### Issues in Literature

Issues related to the discussed topic are not uncommon in the literature. For instance, Spring et al. [25] utilized a technique to prioritize TCP flows of different types, thereby improving response times while maintaining high throughput. Similarly, Key et al. [16] applied similar concepts to create a low-priority background transfer service. In contrast, ICTCP [29] employed receive window adjustment to address the incast collapse problem for TCP in data center networks.

### Measurement Studies on TCP Performance over Cellular Networks

Several studies have evaluated TCP performance over cellular networks. Chan et al. [4] assessed the impact of link layer retransmission and opportunistic schedulers on TCP performance and proposed a network-based solution called Ack Regulator to mitigate the effects of rate and delay variability. Lee [18] investigated long-lived TCP performance over CDMA 1x EVDO networks, and a similar study was conducted in [20], where the performance of four popular TCP variants was compared. Prokkola et al. [23] measured TCP and UDP performance in HSPA networks and compared it with WCDMA and HSDPA-only networks. Huang et al. [14] provided a comprehensive performance evaluation of various smartphones over different types of cellular networks operated by different carriers, along with recommendations to enhance user experiences.

### Figure 20: TCP Performance in AT&T HSPA+ Network

The figure below shows the TCP performance in an AT&T HSPA+ network when the sending rate is shaped to different values. In time-varying cellular networks, it is challenging to determine the shaping parameters beforehand.

| Shaped Sending Rate (Kbps) | Throughput (Kbps) |
|---------------------------|-------------------|
| 8000                      | 5000              |
| 6000                      | 4000              |
| 4000                      | 3000              |
| 2000                      | 2000              |
| 1000                      | 1000              |
| 800                       | 500               |
| 600                       | 400               |
| 400                       | 300               |
| 200                       | 200               |
| 100                       | 100               |

### Conclusion

In this paper, we thoroughly investigated TCP's behavior and performance over buffer-bloated cellular networks. We revealed that the excessive buffers available in existing cellular networks render loss-based congestion control algorithms ineffective, and the ad-hoc solution of setting a static `tcp_rmem_max` is suboptimal. We proposed a dynamic receive window adjustment algorithm, which requires modifications only on the receiver side and is backward-compatible and incrementally deployable. Experimental results show that our scheme reduces Round-Trip Time (RTT) by 24% to 49% while preserving similar throughput in general cases or improving throughput by up to 51% in large Bandwidth-Delay Product (BDP) networks. 

Although the bufferbloat problem is not specific to cellular networks, it is particularly prominent in this environment. A more fundamental solution may be needed, but our work provides a good starting point and an immediately deployable solution for smartphone users.

### Acknowledgments

We thank the anonymous reviewers and our shepherd, Costin Raiciu, for their valuable comments. This research was supported in part by Samsung Electronics, Mobile Communication Division.

### References

[1] N. Balasubramanian, A. Balasubramanian, and A. Venkataramani. Energy Consumption in Mobile Phones: a Measurement Study and Implications for Network Applications. In IMC’09, 2009.

[2] L. S. Brakmo, S. W. O’Malley, and L. L. Peterson. TCP Vegas: New Techniques for Congestion Detection and Avoidance. In ACM SIGCOMM, 1994.

[3] L. Budzisz, R. Stanojevic, A. Schlote, R. Shorten, and F. Baker. On the Fair Coexistence of Loss- and Delay-based TCP. In IWQoS, 2009.

[4] M. C. Chan and R. Ramjee. TCP/IP Performance over 3G Wireless Links with Rate and Delay Variation. In ACM MobiCom, 2002.

[5] M. Dischinger, A. Haeberlen, K. P. Gummadi, and S. Saroiu. Characterizing Residential Broadband Networks. In IMC’07, 2007.

[6] W.-c. Feng, M. Fisk, M. K. Gardner, and E. Weigle. Dynamic Right-Sizing: An Automated, Lightweight, and Scalable Technique for Enhancing Grid Performance. In PfHSN, 2002.

[7] S. Floyd. HighSpeed TCP for Large Congestion Windows. IETF RFC 3649, December 2003.

[8] S. Floyd and T. Henderson. The NewReno Modification to TCP’s Fast Recovery Algorithm. IETF RFC 2582, April 1999.

[9] S. Floyd and V. Jacobson. Random Early Detection Gateways for Congestion Avoidance. IEEE/ACM Transactions on Networking, 1:397–413, August 1993.

[10] J. Gettys. Bufferbloat: Dark Buffers in the Internet. IEEE Internet Computing, 15(3):96, May-June 2011.

[11] S. Ha, I. Rhee, and L. Xu. CUBIC: a New TCP-friendly High-speed TCP Variant. ACM SIGOPS Operating Systems Review, 42:64–74, July 2008.

[12] S. Hemminger. Netem - emulating real networks in the lab. In Proceedings of the Linux Conference, 2005.

[13] H.-Y. Hsieh, K.-H. Kim, Y. Zhu, and R. Sivakumar. A Receiver-centric Transport Protocol for Mobile Hosts with Heterogeneous Wireless Interfaces. In ACM MobiCom, 2003.

[14] J. Huang, Q. Xu, B. Tiwana, Z. M. Mao, M. Zhang, and P. Bahl. Anatomizing Application Performance Differences on Smartphones. In ACM MobiSys, 2010.

[15] V. Jacobson, R. Braden, and D. Borman. TCP Extensions for High Performance. IETF RFC 1323, May 1992.

[16] P. Key, L. Massoulié, and B. Wang. Emulating Low-priority Transport at the Application Layer: a Background Transfer Service. In ACM SIGMETRICS, 2004.

[17] C. Kreibich, N. Weaver, B. Nechaev, and V. Paxson. Netalyzr: Illuminating the Edge Network. In IMC’10, 2010.

[18] Y. Lee. Measured TCP Performance in CDMA 1x EV-DO Networks. In PAM, 2006.

[19] D. Leith and R. Shorten. H-TCP: TCP for High-speed and Long-distance Networks. In PFLDnet, 2004.

[20] X. Liu, A. Sridharan, S. Machiraju, M. Seshadri, and H. Zang. Experiences in a 3G Network: Interplay between the Wireless Channel and Applications. In ACM MobiCom, 2008.

[21] R. Ludwig, B. Rathonyi, A. Konrad, K. Oden, and A. Joseph. Multi-layer Tracing of TCP over a Reliable Wireless Link. In ACM SIGMETRICS, 1999.

[22] K. Nichols and V. Jacobson. Controlling Queue Delay. ACM Queue, 10(5):20:20–20:34, May 2012.

[23] J. Prokkola, P. H. J. Perälä, M. Hanski, and E. Piri. 3G/HSPA Performance in Live Networks from the End User Perspective. In IEEE ICC, 2009.

[24] D. P. Reed. What’s Wrong with This Picture? The end2end-interest mailing list, September 2009.

[25] N. Spring, M. Cheshire, M. Berryman, V. Sahasranaman, T. Anderson, and B. Bershad. Receiver Based Management of Low Bandwidth Access Links. In IEEE INFOCOM, 2000.

[26] S. Sundaresan, W. de Donato, N. Feamster, R. Teixeira, S. Crawford, and A. Pescapè. Broadband Internet Performance: a View from the Gateway. In ACM SIGCOMM, 2011.

[27] K. Tan, J. Song, Q. Zhang, and M. Sridharan. Compound TCP: A Scalable and TCP-Friendly Congestion Control for High-speed Networks. In PFLDnet, 2006.

[28] D. X. Wei, C. Jin, S. H. Low, and S. Hegde. FAST TCP: Motivation, Architecture, Algorithms, Performance. IEEE/ACM Transactions on Networking, 14:1246–1259, December 2006.

[29] H. Wu, Z. Feng, C. Guo, and Y. Zhang. ICTCP: Incast Congestion Control for TCP in Data Center Networks. In ACM CoNEXT, 2010.

[30] L. Xu, K. Harfoush, and I. Rhee. Binary Increase Congestion Control (BIC) for Fast Long-distance Networks. In IEEE INFOCOM, 2004.

[31] Q. Xu, J. Huang, Z. Wang, F. Qian, A. Gerber, and Z. M. Mao. Cellular Data Network Infrastructure Characterization and Implication on Mobile Content Placement. In ACM SIGMETRICS, 2011.

[32] P. Yang, W. Luo, L. Xu, J. Deogun, and Y. Lu. TCP Congestion Avoidance Algorithm Identification. In IEEE ICDCS, 2011.

### Appendix

#### A. List of Experiment Setup

See Table 1.

#### B. Sample TCP `rmem_max` Settings

See Table 2.

### Table 1: The Setup of Each Experiment

| Location | Signal Strength | Client Model | Traffic Pattern | Congestion Control | Server | Network Type | Carrier |
|----------|-----------------|--------------|-----------------|--------------------|--------|--------------|---------|
| Raleigh  | Good            | Linux Laptop | Long-lived TCP  | CUBIC              | Princeton | HSPA+        | AT&T    |
| Chicago  | Weak            | Galaxy S2    | Long-lived TCP  | CUBIC              | Seoul   | HSPA+        | AT&T    |
| Raleigh  | Good            | Galaxy S2    | Traceroute      | CUBIC              | Raleigh | HSPA+        | AT&T    |
| Raleigh  | Good            | Droid Charge | Ping            | -                  | -       | HSPA+        | Verizon |
| Raleigh  | Good            | Linux Laptop | Long-lived TCP  | CUBIC              | Raleigh | HSPA+        | AT&T    |
| Raleigh  | Good            | Linux Laptop | Long-lived TCP  | NewReno, Vegas, CUBIC, BIC, HTCP, HSTCP | Raleigh | HSPA+ | AT&T, Sprint, T-Mobile, Verizon, SK Telecom |
| Raleigh  | Good            | Mac OS 10.7 Laptop, Windows 7 Laptop, Galaxy S2, iPhone 4, Windows Phone 7, Droid Charge | Long-lived TCP | CUBIC | Raleigh | HSPA+, LTE, WiFi | AT&T, Verizon, Sprint, T-Mobile, SK Telecom |
| Seoul    | Good            | Galaxy S2    | Long-lived TCP  | CUBIC              | Seoul   | HSPA+, LTE   | AT&T, Verizon |
| Raleigh  | Good            | Galaxy S2    | Long-lived TCP  | CUBIC              | Raleigh | HSPA+        | AT&T    |
| Raleigh  | Good            | Galaxy S2    | Long-lived TCP  | CUBIC              | Princeton | HSPA+        | AT&T    |
| Raleigh  | Good            | Galaxy S2, Droid Charge, EVO Shift | Long-lived TCP | CUBIC | Raleigh | HSPA+, LTE, EVDO | AT&T, Verizon, Sprint, SK Telecom, WiFi |
| Raleigh  | Good            | Galaxy S2    | Short-lived TCP, Long-lived TCP | CUBIC | Raleigh | HSPA+ | AT&T |
| Seoul    | Good, Weak      | Galaxy S2, Droid Charge | Long-lived TCP | CUBIC | Seoul | HSPA+, LTE | AT&T, Verizon |
| Raleigh  | Good, Weak      | Galaxy S2, Droid Charge, EVO Shift | Long-lived TCP | CUBIC, Vegas | Raleigh | HSPA+, LTE, EVDO | AT&T, Verizon, Sprint, SK Telecom, WiFi |

### Table 2: Maximum TCP Receive Buffer Size (`tcp_rmem_max`) in Bytes on Some Sample Android Phones for Various Carriers

| Device Model | Carrier | Network Type | Default `tcp_rmem_max` (bytes) |
|--------------|---------|--------------|--------------------------------|
| Samsung Galaxy S2 (AT&T) | AT&T | HSPA+ | 110208 |
| HTC EVO Shift (Sprint) | Sprint | EVDO | 110208 |
| Samsung Droid Charge (Verizon) | Verizon | LTE | 35040 |
| LG G2x (T-Mobile) | T-Mobile | HSPA+ | 11680 |
| WiFi | - | - | 262144 |
| UMTS | - | - | - |
| EDGE | - | - | - |
| GPRS | - | - | - |
| WiMAX | - | - | 110208 |
| LTE | - | - | 393216 |
| HSPA+ | - | - | 393216 |
| HSPA+ | - | - | 393216 |
| HSPA+ | - | - | - |
| HSPA+ | - | - | 524288 |
| HSPA+ | - | - | - |
| HSPA+ | - | - | 110208 |
| HSPA+ | - | - | 393216 |
| HSPA+ | - | - | 196608 |
| HSPA+ | - | - | 35040 |
| HSPA+ | - | - | 11680 |
| HSPA+ | - | - | - |
| HSPA+ | - | - | 484848 |
| HSPA+ | - | - | 484848 |
| HSPA+ | - | - | 393216 |
| HSPA+ | - | - | 110208 |
| HSPA+ | - | - | 35040 |
| HSPA+ | - | - | 11680 |
| HSPA+ | - | - | 262144 |
| HSPA+ | - | - | - |
| HSPA+ | - | - | 110208 |

Note: These values may vary on customized ROMs and can be looked up by searching for "setprop net.tcp.buffersize.*" in the `init.rc` file of the Android phone. Different values are set for different carriers even if the network types are the same, likely determined experimentally based on each carrier’s network conditions and configurations.