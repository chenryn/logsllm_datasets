case
{
mu1
[d]xs [d]x =:
stack = stack[:top-2]
stack = append(stack, mul)
top--
case "/":
{
div := stack[top-2] / stack[top-1]
---
## Page 288
stack = stack[:top-2]
stack = append(stack, div)
top-
default:
{
1
:= strconv.Atoi (v)
stack = append(stack, i)
top++
return stack[0]
151.ReverseWordsinaString
题目
Given an input string, reverse the string word by word.
Example 1:
Input: “the sky is blue"
output:
"blue is sky the"
Example 2:
Input: "
hello world!
Output: “"wor1d! he11o"
Explanation: Your reversed string should not contain 1eading or trailing
spaces.
Example 3:
poo5 e, :anduI
example"
Output: “example good a"
Explanation: You need to reduce multiple spaces between two words to a single
space in the reversed string.
Note:
● A word is defined as a sequence of non-space characters.
jou pjnous Sujns pasanau anof 'anamog saoeds guie jo gupeal ujejuo Keu gujuns ndul ●
contain leading or trailing spaces.
---
## Page 289
● You need to reduce multiple spaces between two words to a single space in the reversed
string-
Follow up:
For C programmers, try to solve it in-place in O(1) extra space.
题目大意
给定一个字符串，逐个翻转字符串中的每个单词。
说明：
·无空格字符构成一个单词。
·输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
·如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
进阶：
·请选用C语言的用户尝试使用O（1）额外空间复杂度的原地解法。
解题思路
·给出一个中间有空格分隔的字符串，要求把这个字符串按照单词的维度前后翻转。
·依照题意，先把字符串按照空格分隔成每个小单词，然后把单词前后翻转，最后再把每个单词中间
添加空格。
代码
package leetcode
import "strings"
func reversewords151(s string) string {
s5 := strings.Fields(s)
reverse151(&ss, 0, len(ss)-1)
return strings.join(ss, "")
func reversel51(m *[]string, i int, j int) {
fori>1
if nums [mid]  >= nums [1ow]{
1ow = mid + 1
}else{
high = mid
}
return nums[1ow]
//解法二二分
func findMinl(nums[]int)int{
if 1en(nums)== 0 {
return 0
F
if 1en(nums) == 1 {
return nums[0]
if nums [1en(nums) -1]>nums [0]{
return nums[0]
1ow, high := 0, 1en(nums)-1
for low >1
if nums[1ow] nums[mid]) 11 (mid  0 && nums [mid-1]> nums [mid] && nums[mid]nums[1ow]&&nums[1ow]>nums[high]{// mid 在数值大的—部分
区间里
1ow = mid + 1
}else if nums[mid]nums[high]{// mid 在数值小
的一部分区间里
high = mid - 1
}else{
if nums [1ow]
nums[mid]{
1ow++
i f  nums [hi gh] ==  nums [mi d] {
high--
---
## Page 293
return -1
//解法三暴力
func findMin2(nums[]int) int{
[o]swnu =: uw
for _, num := range nums[1:] {
if min > num {
min = num
return min
154.FindMinimuminRotatedSortedArrayll
题目
Suppose an array sorted in ascending order is rotated at some pivot unknown to you
beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6, 7,0,1, 2] ).
Find the minimum element.
The array may contain duplicates.
Example 1:
Input: [1,3,5]
output: 1
Example 2:
Input: [2,2,2,0,1]
Output:0
Note:
● This is a follow up problem to Eind Minimum in Rotated Sorted Array.
● Would allow duplicates affect the run-time complexity? How and why?
题目大意
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组[0,1,2,4,5,6,7]可能变为
[4,5,6,7,0,1,2]）。请找出其中最小的元素。
注意数组中可能存在重复的元素。
---
## Page 294
解题思路
给出一个原本从小到大排序过的数组，注意数组中有重复的元素。但是在某一个分割点上，把数组
切分后的两部分对调位置，数值偏大的放到了数组的前部。求这个数组中最小的元素。
·这一题是第153题的加强版，增加了重复元素的条件。但是实际做法还是没有变，还是用二分搜
索，只不过在相等元素上多增加一个判断即可。时间复杂度O（logn）。
代码
package leetcode
func findmin154(nums []int) int {
1ow, high := 0, 1en(nums)-1
for low >1
if nums[mid] > nums[1ow]{
1ow = mid + 1
} else if nums [mid] == nums[low] {
1ow++
}else{
high = mid
}
return nums[1ow]
155.MinStack
题目
Design a stack that supports push, pop, top, and retrieving the minimum element in constant
time.
push(x) - Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin( - Retrieve the minimum element in the stack.
Example:
---
## Page 295
MinStack minStack = new MinStack() ;
minstack.push(-2) ;
minstack.push(0) ;
minStack.push(-3) ;
minStack.getMin();
->Returns -3.
minstack.pop O ;
minstack.topO;
-> Returns 0.
minStack.getMin() ;
--> Returns -2.
题目大意
这道题是一个数据结构实现题。要求实现一个栈的类，实现push(、pop()、top()、getMin()。
解题思路
按照题目要求实现即可。
代码
package leetcode
//minstack define
type MinStack struct {
elements, min []int
1
int
/t initialize your data structure here.*/
// Constructorl55 define
func Constructorl55() minStack {
return MinStack{make([]int,0),make([]int, 0)，0}
// Push define
func (this *MinStack) Push(x int) {
this.elements = append(this.elements,x)
if this.1 == 0 {
this.min = append(this.min, x)
}else{
min := this.GetMin()
if x<min {
this.min = append(this.min, x)
}else{
this.min = append(this.min, min)
---
## Page 296
this . 1++
func (this *MinStack) Pop() {
this . 1==
this.min = this.min[:this.1]
this.elements = this.elements [:this .1]
func (this *MinStack) TopO) int {
return this.elements[this.1-1]
func (this *MinStack) GetMin() int{
return this.min[this.11]
160.IntersectionofTwoLinkedLists
题目
Write a program to find the node at which the intersection of two singly linked lists begins.
For example, the following two linked lists:
A:
a1
a2
c1
C2
C3
B:
b1
b2
b3
begin to intersect at node c1.
Example 1:
---
## Page 297
A:
B:
Input: intersectVal = 8, 1istA = [4,1,8,4,5], 1istB = [5,0,1,8,4,5], skipA =
2,skipB=3
Output: Reference of the node with value = 8
Input Explanation: The intersected node′s value is 8 (note that this must not
be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5].
From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the
intersected node in A; There are 3 nodes before the intersected node in B.
Example 2:
A:
0
9
2
B:
3
Input: intersectVal = 2, 1istA = [0,9,1,2,4], 1istB = [3,2,4], skipA = 3,
skipB = 1
Output: Reference of the node with value = 2
Input Explanation: The intersected node′s value is 2 (note that this must not
be 0 if the two 1ists intersect). From the head of A, it reads as [0,9,1,2,4].
From the head of B, it reads as [3,2,4]. There are 3 nodes before the
intersected node in A; There are 1 node before the intersected node in B.
Example 3:
---
## Page 298
A：
2
6
4
B:
5
Input: intersectVal = 0, 1istA = [2,6,4], 1istB = [1,5], skipA = 3, skipB = 2
L(nu:ndno
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of
B, it reads as [1,5]. Since the two lists do not intersect, intersectval must
be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
Notes:
●If the two linked lists have no intersection at all, return null.
● The linked lists must retain their original structure after the function returns.
● You may assume there are no cycles anywhere in the entire linked structure.
●Your code should preferably run in O(n) time and use only O(1) memory.
题目大意
找到2个链表的交叉点。
解题思路
这道题的思路其实类似链表找环。
给定的2个链表的长度如果一样长，都从头往后扫即可。如果不一样长，需要先“拼成”一样长。把B拼
接到A后面，把A拼接到B后面。这样2个链表的长度都是A+B。再依次扫描比较2个链表的结点是
否相同。
代码
package leetcode
import "fmt"