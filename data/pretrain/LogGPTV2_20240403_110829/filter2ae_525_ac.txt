Finally generated passthrough.dat:
类名 | 方法名 | 方法描述 | 污点  
---|---|---|---  
java/util/Collections$CheckedNavigableSet | tailSet |
(Ljava/lang/Object;)Ljava/util/NavigableSet; | 0,1  
java/awt/RenderingHints | put |
(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; | 0,1,2  
#### Step3 Enumeration Passthrough Call Graph
This step is similar to the previous step. The gadgetinspector scans all the
Java methods again, but it is no longer the relationship between the
parameters and the returned result, but the relationship between the
parameters of the method and the submethod it calls, that is, whether the
parameters of the submethod can be Affected by the parameters of the parent
method. So why do we need to generate the passthrough data stream from the
previous step? Since the judgment of this step is also in the bytecode
analysis, here we can only make some guesses first, as in the following
example:
    ...
        private MyObject obj;
        public void parentMethod(Object arg){
            ...
            TestObject obj1 = new TestObject();
            Object obj2 = obj1.childMethod1(arg);
            this.obj.childMethod(obj2); 
            ...
        }
    ...
If the passthrough data stream operation is not performed, it is impossible to
judge whether the return value of TestObject.childMethod1 is affected by
parameter 1, and it is impossible to continue to judge the parameter transfer
relationship between the parent method arg parameter and the child method
MyObject.childmethod.
The author gives an example:
AbstractTableModel$ff19274a.hashcode and submethod IFn.invoke:
  * `this` parameter(0 parameter) of AbstractTableModel$ff19274a.hashcode is passed to the 1 parameter of IFn.invoke, which is represented as 0->IFn.invoke()@1
  * Since f is obtained by this.__clojureFnMap(0 parameter), and f is this (0 parameter) of IFn.invoke(), the 0 parameter of AbstractTableModel$ff19274a.hashcode is passed to the 0 parameter of IFn.invoke. Expressed as 0->IFn.invoke()@0
FnCompose.invoke and submethod IFn.invoke:
  * arg (1 argument) of FnCompose.invoked is passed to the 1 argument of IFn.invoke, expressed as 1->IFn.invoke()@1
  * f1 is the property of FnCompose (this, 0 argument), which is passed as the this (0 parameter) of IFn.invoke, expressed as 0->IFn.invoke()@1
  * f1.invoke(arg) is passed as a 1 parameter to IFn.invoke. Since f1 is serialized, we can control which implementation class is IFn. Therefore, the invoke of which implementation class is called. To be able to control, that is, f1.invoke(arg) can be regarded as a 0 parameter passed to the IFn.invoke 1 parameter (here is just a simple guess, the specific implementation in the bytecode analysis, may be also reflect the author's Reasonable risk judgment), expressed as 0->IFn.invoke()@1
In this step, the gadgetinspector also uses ASM for bytecode analysis. The
main logic is in the classes CallGraphDiscovery and
ModelGeneratorClassVisitor. The ModelGeneratorClassVisitor traces the stack
and localvar of the JVM virtual machine in the execution of the method, and
finally obtains the parameter transfer relationship between the method's
parameters and the submethods it calls.
Generate passthrough call graph code (temporarily omit the implementation of
ModelGeneratorClassVisitor, involving bytecode analysis):
    public class CallGraphDiscovery {
        private static final Logger LOGGER = LoggerFactory.getLogger(CallGraphDiscovery.class);
        private final Set discoveredCalls = new HashSet<>();
        public void discover(final ClassResourceEnumerator classResourceEnumerator, GIConfig config) throws IOException {
            Map methodMap = DataLoader.loadMethods();//load all methods
            Map classMap = DataLoader.loadClasses();//load all classes
            InheritanceMap inheritanceMap = InheritanceMap.load();//load inheritance graph
            Map> passthroughDataflow = PassthroughDiscovery.load();//load passthrough data flow
            SerializableDecider serializableDecider = config.getSerializableDecider(methodMap, inheritanceMap);//Serialization decider
            for (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) {
                try (InputStream in = classResource.getInputStream()) {
                    ClassReader cr = new ClassReader(in);
                    try {
                        cr.accept(new ModelGeneratorClassVisitor(classMap, inheritanceMap, passthroughDataflow, serializableDecider, Opcodes.ASM6),
                                ClassReader.EXPAND_FRAMES);//Determine the current method parameter and sub-method transfer call relationship by combining classMap, inheritanceMap, passthroughDataflow result, and serialization determiner information.
                    } catch (Exception e) {
                        LOGGER.error("Error analyzing: " + classResource.getName(), e);
                    }
                }
            }
        }
Finally generated passthrough.dat:
parent class name | parent method | parent method info | child method's class
name | child method | child method info | parent method parameter index |
which field of the parameter object is passed | child method parameter index  
---|---|---|---|---|---|---|---|---  
java/io/PrintStream | write | (Ljava/lang/String;)V | java/io/OutputStream |
flush | ()V | 0 | out | 0  
javafx/scene/shape/Shape | setSmooth | (Z)V | javafx/scene/shape/Shape |
smoothProperty | ()Ljavafx/beans/property/BooleanProperty; | 0 |  | 0  
#### Search For Available Sources
This step checks all methods that can be triggered based on the entry to the
known deserialization vulnerability. For example, when using a proxy in a
utilization chain, any invoke method that can be serialized and is a subclass
of `java/lang/reflect/InvocationHandler` can be considered source. It also
determines whether the class can be serialized based on the specific
deserialization library.
Search for available sources:
    public class SimpleSourceDiscovery extends SourceDiscovery {
        @Override
        public void discover(Map classMap,
                             Map methodMap,
                             InheritanceMap inheritanceMap) {
            final SerializableDecider serializableDecider = new SimpleSerializableDecider(inheritanceMap);
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) {
                    if (method.getName().equals("finalize") && method.getDesc().equals("()V")) {
                        addDiscoveredSource(new Source(method, 0));
                    }
                }
            }
            // If the class implements readObject, the ObjectInputStream is considered to be trainted
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) {
                    if (method.getName().equals("readObject") && method.getDesc().equals("(Ljava/io/ObjectInputStream;)V")) {
                        addDiscoveredSource(new Source(method, 1));
                    }
                }
            }
            // Any classes that extend serializable and InvocationHandler are trainted when using proxy techniques.
            for (ClassReference.Handle clazz : classMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(clazz))
                        && inheritanceMap.isSubclassOf(clazz, new ClassReference.Handle("java/lang/reflect/InvocationHandler"))) {
                    MethodReference.Handle method = new MethodReference.Handle(
                            clazz, "invoke", "(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;");
                    addDiscoveredSource(new Source(method, 0));
                }
            }
            // hashCode() or equals() is an accessible entry point for standard techniques for putting objects into a HashMap
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) {
                    if (method.getName().equals("hashCode") && method.getDesc().equals("()I")) {
                        addDiscoveredSource(new Source(method, 0));
                    }
                    if (method.getName().equals("equals") && method.getDesc().equals("(Ljava/lang/Object;)Z")) {
                        addDiscoveredSource(new Source(method, 0));
                        addDiscoveredSource(new Source(method, 1));
                    }
                }
            }
            // Using the comparator proxy, you can jump to any groovy Closure call()/doCall() method, all args are contaminated
            // https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/Groovy1.java
            for (MethodReference.Handle method : methodMap.keySet()) {
                if (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))
                        && inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("groovy/lang/Closure"))
                        && (method.getName().equals("call") || method.getName().equals("doCall"))) {
                    addDiscoveredSource(new Source(method, 0));
                    Type[] methodArgs = Type.getArgumentTypes(method.getDesc());
                    for (int i = 0; i  methodMap = DataLoader.loadMethods();
            InheritanceMap inheritanceMap = InheritanceMap.load();
            Map> methodImplMap = InheritanceDeriver.getAllMethodImplementations(
                    inheritanceMap, methodMap);//Get all subclass method implementations of methods (methods rewritten by subclasses)
            final ImplementationFinder implementationFinder = config.getImplementationFinder(
                    methodMap, methodImplMap, inheritanceMap);
            //Save all subclass method implementations of the method to methodimpl.dat
            try (Writer writer = Files.newBufferedWriter(Paths.get("methodimpl.dat"))) {
                for (Map.Entry> entry : methodImplMap.entrySet()) {
                    writer.write(entry.getKey().getClassReference().getName());
                    writer.write("\t");
                    writer.write(entry.getKey().getName());
                    writer.write("\t");
                    writer.write(entry.getKey().getDesc());
                    writer.write("\n");
                    for (MethodReference.Handle method : entry.getValue()) {
                        writer.write("\t");
                        writer.write(method.getClassReference().getName());
                        writer.write("\t");
                        writer.write(method.getName());
                        writer.write("\t");
                        writer.write(method.getDesc());
                        writer.write("\n");
                    }
                }
            }
            //The method calls map, the key is the parent method, and the value is the sub-method and the parent method parameter.
            Map> graphCallMap = new HashMap<>();
            for (GraphCall graphCall : DataLoader.loadData(Paths.get("callgraph.dat"), new GraphCall.Factory())) {
                MethodReference.Handle caller = graphCall.getCallerMethod();
                if (!graphCallMap.containsKey(caller)) {
                    Set graphCalls = new HashSet<>();
                    graphCalls.add(graphCall);
                    graphCallMap.put(caller, graphCalls);
                } else {
                    graphCallMap.get(caller).add(graphCall);
                }
            }
            //exploredMethods saves the method node that the call chain has visited since the lookup process, and methodsToExplore saves the call chain
            Set exploredMethods = new HashSet<>();
            LinkedList methodsToExplore = new LinkedList<>();
            //Load all sources and use each source as the first node of each chain
            for (Source source : DataLoader.loadData(Paths.get("sources.dat"), new Source.Factory())) {
                GadgetChainLink srcLink = new GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());
                if (exploredMethods.contains(srcLink)) {
                    continue;
                }
                methodsToExplore.add(new GadgetChain(Arrays.asList(srcLink)));
                exploredMethods.add(srcLink);
            }
            long iteration = 0;
            Set discoveredGadgets = new HashSet<>();
            //Use BFS to search all call chains from source to sink
            while (methodsToExplore.size() > 0) {
                if ((iteration % 1000) == 0) {
                    LOGGER.info("Iteration " + iteration + ", Search space: " + methodsToExplore.size());
                }
                iteration += 1;
                GadgetChain chain = methodsToExplore.pop();//Pop a chain from the head of the team
                GadgetChainLink lastLink = chain.links.get(chain.links.size()-1);//Take the last node of this chain
                Set methodCalls = graphCallMap.get(lastLink.method);//Get the transfer relationship between all submethods of the current node method and the current node method parameters
                if (methodCalls != null) {
                    for (GraphCall graphCall : methodCalls) {
                        if (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) {
                            //Skip if the pollution parameter of the current node method is inconsistent with the index of the current submethod that is affected by the parent method parameter
                            continue;
                        }
                        Set allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());//Get all subclass rewriting methods of the class in which the submethod is located
                        for (MethodReference.Handle methodImpl : allImpls) {
                            GadgetChainLink newLink = new GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());//New method node
                            if (exploredMethods.contains(newLink)) {
                                //If the new method has been accessed recently, skip it, which reduces overhead. But this step skip will cause other chains/branch chains to pass through this node. Since this node has already been accessed, the chain will be broken here. So if this condition is removed, can you find all the chains? Removed here will encounter ring problems, resulting in an infinite increase in the path...
                                continue;
                            }
                            GadgetChain newChain = new GadgetChain(chain, newLink);//The new node and the previous chain form a new chain
                            if (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) {//If the sink is reached, add the discoveredGadgets
                                discoveredGadgets.add(newChain);
                            } else {
                                //New chain join queue
                                methodsToExplore.add(newChain);
                                //New node joins the accessed collection
                                exploredMethods.add(newLink);
                            }
                        }
                    }
                }
            }
            //Save the searched exploit chain to gadget-chains.txt
            try (OutputStream outputStream = Files.newOutputStream(Paths.get("gadget-chains.txt"));
                 Writer writer = new OutputStreamWriter(outputStream, StandardCharsets.UTF_8)) {
                for (GadgetChain chain : discoveredGadgets) {
                    printGadgetChain(writer, chain);
                }
            }
            LOGGER.info("Found {} gadget chains.", discoveredGadgets.size());
        }
    ...
The sink method given by the author:
    private boolean isSink(MethodReference.Handle method, int argIndex, InheritanceMap inheritanceMap) {
            if (method.getClassReference().getName().equals("java/io/FileInputStream")
                    && method.getName().equals("")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/io/FileOutputStream")
                    && method.getName().equals("")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/nio/file/Files")
                    && (method.getName().equals("newInputStream")
                    || method.getName().equals("newOutputStream")
                    || method.getName().equals("newBufferedReader")
                    || method.getName().equals("newBufferedWriter"))) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Runtime")
                    && method.getName().equals("exec")) {
                return true;
            }
            /*
            if (method.getClassReference().getName().equals("java/lang/Class")
                    && method.getName().equals("forName")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Class")
                    && method.getName().equals("getMethod")) {
                return true;
            }
            */
            // If we can invoke an arbitrary method, that's probably interesting (though this doesn't assert that we
            // can control its arguments). Conversely, if we can control the arguments to an invocation but not what
            // method is being invoked, we don't mark that as interesting.
            if (method.getClassReference().getName().equals("java/lang/reflect/Method")
                    && method.getName().equals("invoke") && argIndex == 0) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/net/URLClassLoader")
                    && method.getName().equals("newInstance")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/System")
                    && method.getName().equals("exit")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Shutdown")
                    && method.getName().equals("exit")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/Runtime")
                    && method.getName().equals("exit")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/nio/file/Files")
                    && method.getName().equals("newOutputStream")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/lang/ProcessBuilder")
                    && method.getName().equals("") && argIndex > 0) {
                return true;
            }
            if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("java/lang/ClassLoader"))
                    && method.getName().equals("")) {
                return true;
            }
            if (method.getClassReference().getName().equals("java/net/URL") && method.getName().equals("openStream")) {
                return true;
            }
            // Some groovy-specific sinks
            if (method.getClassReference().getName().equals("org/codehaus/groovy/runtime/InvokerHelper")
                    && method.getName().equals("invokeMethod") && argIndex == 1) {
                return true;
            }
            if (inheritanceMap.isSubclassOf(method.getClassReference(), new ClassReference.Handle("groovy/lang/MetaClass"))
                    && Arrays.asList("invokeMethod", "invokeConstructor", "invokeStaticMethod").contains(method.getName())) {
                return true;
            }
            return false;
        }
For each entrypoint node, all its sub-method calls, grandchild method calls,
recursively form a tree. What the previous steps did is equivalent to
generating the tree, and what this step does is to find a path to the leaf