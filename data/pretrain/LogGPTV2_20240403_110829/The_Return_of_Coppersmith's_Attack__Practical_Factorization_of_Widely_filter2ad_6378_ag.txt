sample of 30,471 randomly selected citizens
sample of 4,414 e-residents
complete PGP key server dump (9 M)
SSH keys for GitHub developers (4.7 M)
signing keys for all public Maven artifacts
complete IPv4 scan, Certi(cid:128)cate Transparency
41 laptops with di(cid:130)erent chips by 6 TPM manufacturers
Domain name
Complete/larger-scale datasets
Certi(cid:128)cation authorities
ePass signing certi(cid:128)cates
Estonian eID
Estonian mobile eID
Estonian e-residents
Message security (PGP)
So(cid:137)ware signing (GitHub)
So(cid:137)ware signing (Maven)
TLS/HTTPS
Trusted boot (TPM)
Limited, custom-collected datasets
Payment cards (EMV)
Programmable smartcard
So(cid:137)ware signing (Android)
Table 4: (cid:135)e summary of the number and fraction of vulnerable keys detected in di(cid:130)erent domains. (cid:135)e domains are ordered
lexicographically and separated into two groups based on the representativeness of inspected datasets.
13 cards from 4 EU countries, 6 with Manufacturer chip
25 cards from JCAlgTest.org database, 6 with Manufacturer chip
1,080 top ranking applications and games
4,414 keys
2,892 keys
447 keys
5 keys
15 keys
10 devices
0
100
0.03
0.01
0.003
<0.001
24.39
0 keys
2 cards
0 keys
71,417 keys
0
8.67
0
0 keys
0
0
54.87
denoted as Token). (cid:140)is hints that Token is the major source of the
(cid:128)ngerprinted keys in the PGP dataset Out of 2,892 (cid:128)ngerprinted
keys, 436 even contain some form of Token-related identi(cid:128)cation
in the User ID string (154 being master keys with the rest being
sub-keys). Of these, no key with a length shorter than 2048-bit is
present, 96 keys are 2048-bit and 340 keys have a length of 4096 bits.
Given that an older version of Token is not producing (cid:128)ngerprinted
keys, all these keys were likely generated by the newer version of
Token.
(cid:140)e Token vendor recommends generating a keypair outside the
token (for example, using OpenSSL) and importing it to facilitate
private key recovery a(cid:137)er a potential token failure. Interestingly,
such advice seems not to have been followed by a signi(cid:128)cant number
of users (the users who followed this advice are not detected by our
(cid:128)ngerprinting method as their keys have no (cid:128)ngerprint).
(cid:140)e evidence for other devices (not produced directly by the
Manufacturer) generating (cid:128)ngerprinted keys also shows that the
RSALib is provided to external parties developing for the Manufac-
turer hardware.
We would like to stress that not all key lengths generated with
Token are immediately practically factorizable by our method. Token
can generate and use RSA keys up to 4096 bits long, which may be
one of the appeals of the device – given the lack of other available
smartcards supporting key lengths exceeding 2048 bits. Indeed, the
analysis of the (cid:128)ngerprinted PGP keys with respect to the used
length shows a strong user preference for 4096-bit keys. Token
can also generate less common key lengths including 3936-bit RSA
where our a(cid:138)ack is not directly applicable, as seen in Figure 1. (cid:140)e
majority of the Token users on this domain therefore should not be
imminently a(cid:130)ected by direct factorization using our a(cid:138)ack, but
we urge the generation of fresh keys – in light of potential further
improvement of an a(cid:138)ack.
4.6 TLS and SCADA-related keys
We used our (cid:128)ngerprinting method on two large datasets of public
key certi(cid:128)cates, used (mostly) to secure Internet TLS connections.
One dataset originates from a periodic scan of the whole IPv4 ad-
dress space between 2012 and 2017 [28] collected from servers
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1643listening on port 443 and con(cid:128)gured to prefer RSA signatures. (cid:140)e
second dataset comes from the Certi(cid:128)cate Transparency logs main-
tained by Google [33] (CT logs maintained by Google included in
Google Chrome, date 2017-04-25). In total, we analyzed more than
100 million certi(cid:128)cates.
Despite the relatively large number of keys, we only found 15
distinct (cid:128)ngerprinted keys – four were 1024 bits long and eleven
with 2048 bits – used in tens of di(cid:130)erent certi(cid:128)cates. Surprisingly,
almost all these certi(cid:128)cates contain the string “SCADA” in the com-
mon name (cid:128)eld (probably referring to Supervisory Control and
Data Acquisition systems) or a URL leading to a website related
to an industrial monitoring system, or both. As a result, we hy-
pothesize that there is at least one provider of a remote connection
platform with a focus on SCADA systems. It is not clear to us
whether the interfaces are linked to real industrial systems since
administrators of such systems may want to limit the access from
the Internet. Hence, there might exist more systems with admin-
istration interfaces protected by vulnerable keys, but deployed on
local networks.
Interestingly, all 15 keys contain the inspected (cid:128)ngerprint, but
the majority of values of the most signi(cid:128)cant byte (MSB) of their
moduli are signi(cid:128)cantly outside the range observed in the RSALib
(the MSB of keys produced by the inspected smartcards and TPMs
always falls in the interval 0x90-0xA8). (cid:140)is (cid:128)nding suggests the
existence of a di(cid:130)erent implementation of the prime construction
algorithm with the same structure but a di(cid:130)erent modi(cid:128)cation of
the most signi(cid:128)cant bits.
(cid:140)e factorization of the key of a TLS server trivially leads to
numerous powerful a(cid:138)acks: server impersonation, active man-
in-the-middle a(cid:138)ack or passive decryption of the content of the
communication when the connection establishment lacks forward
secrecy. Overall, the impact on the public portion of the Internet
seems to be only very marginal due to the small number of detected
vulnerable TLS keys. However, the potentially signi(cid:128)cant impact for
the entry points of some SCADA services should not be neglected.
4.7 Certi(cid:128)cation authorities
(cid:140)e presence of vulnerable keys belonging to certi(cid:128)cation authori-
ties would magnify the impact due to the possibility of key certi(cid:128)-
cate forgery. We therefore examined two signi(cid:128)cant usage domains.
Browser-trusted certi(cid:128)cates. We examined the certi(cid:128)cates of root
certi(cid:128)cation authorities stored in Mozilla Firefox as browser-trusted
roots (158 certi(cid:128)cates) and in Ubuntu 16.04 (173 certi(cid:128)cates). (cid:140)e
intermediate authorities of level 1 (1,016 total), level 2 (832 total)
and level 3 (21 total) as extracted from TLS scans were also analyzed.
No (cid:128)ngerprinted keys were detected as of May 2017.
ICAO signing certi(cid:128)cates. We analyzed the collection of Document
Signing Certi(cid:128)cates (DSCs) of the ICAO ePassport database (ver-
sion 2044) containing 8,496 certi(cid:128)cates, and the collection of CSCA
Master Lists (version 84) with 616 certi(cid:128)cates. We also inspected the
publicly available national certi(cid:128)cates (e.g., Belgium, Estonia, Ger-
many, Switzerland) [43, 68] available as of May 2017. Fortunately,
no vulnerable keys were found in either dataset, as the occurrence
of such a certi(cid:128)cate would lead to the possibility of impersonating
an inspection terminal or forging electronic document data.
4.8 Generic Java Card platform
Smartcards using the Java Card platform [59] have two principal
con(cid:128)gurations: 1) an open, fully programmable platform where
the users develop and upload their own applications; and 2) Java
Card-based systems closed from the point of view of cryptography
(e.g., banking EMV or SIM cards). Here, we focus on the former
con(cid:128)guration.
(cid:140)e prevalence of the RSALib in the area of programmable smart-
cards is notoriously di(cid:129)cult to estimate. Not all smartcards based
on the Manufacturer’s hardware are vulnerable, as the vulnerability
stems from the deployed cryptographic library and not from the
hardware design itself. Many vendors use the bare hardware (e.g.,
SLE78 chip) and choose not to deploy the RSALib in question. In
such a case, the implementation of the higher-level cryptographic
functions (including RSA keypair generation) is done by the com-
pany that builds on the hardware produced by the Manufacturer.
Although the vulnerable keys have a strong (cid:128)ngerprint that can
be easily veri(cid:128)ed, the real problem (for impact assessment) lies in
obtaining sample public keys. No representative public databases
(comparable to those for TLS and PGP) are available.
Our analysis is based on smartcards from 10 di(cid:130)erent platform
providers (Axalto, Feitian, G&D, Gemalto, In(cid:128)neon, JavaCardOS,
NXP, Oberthur, So(cid:137)lock and Yubico) as recorded by the JCAlgTest
database [60]. (cid:140)e chip manufacturer (ICFabricator property) and
the manufacturing date (ICFabricationDate) can be obtained from
the Card Production Life Cycle (CPLC) information as de(cid:128)ned by
the GlobalPlatform speci(cid:128)cation [32].
Out of the 63 di(cid:130)erent cards included, 25 cards are listed with
the provided CPLC information: 16x NXP (ICFabricator = 4790),
6x In(cid:128)neon (4090), 1x Samsung (4250) and 2x unknown (2050 and
4070). Out of six cards with a Manufacturer chip, two produce
(cid:128)ngerprinted keys. (cid:140)e ICFabricationDate property indicates the
years of manufacture to be 2012 and 2015. Hence, our estimate
of the prevalence of the vulnerability is con(cid:128)rmed again since it
corresponds to the situation observed in TPM chips.
(cid:140)e full impact of the vulnerability will depend entirely on the
scenario in which the cards are actually used. (cid:140)e large number
of already fabricated and distributed smartcards may hinder the
potential for a recall of the product from the market. (cid:140)e card oper-
ating system and the base libraries are stored in read-only memory
and cannot be updated by the user to remove the vulnerability once
a card is deployed. We expect to see the cards for a rather long
time (several years) before all the vulnerable cards are eventually
sold out, especially when dealing with low volume markets. (cid:140)e
buyers should check the cards for the presence of (cid:128)ngerprinted
keys and/or opt for longer key lengths if they are supported by the
card hardware.
4.9 Other domains
(cid:140)e smartcards are also used in many other domains than those
surveyed here in the previous sections, including authentication
tokens (e.g., U2F [70]); e-health cards to authenticate both patients
and medical sta(cid:130) to access medical records or personal identity
veri(cid:128)cation cards (FIPS 201 PIV [61]); and electronic payment cards
(EMV).
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1644(cid:140)e chip-based payment cards used world-wide are backed by
a set of protocols speci(cid:128)ed under the EMV standard [52], which
is currently maintained by the EMV consortium. (cid:140)e RSALib was
approved for use in EMV cards by EMVCo [2, 3], and we found
several references to it in related certi(cid:128)cation reports. However,
we are not aware of any public dataset of keys originating from
EMV cards. We collected a tiny sample of RSA keys from 13 pay-
ment cards issued by di(cid:130)erent banks in four European countries.
Although 6 cards reported chips produced by the Manufacturer,
none of them contained the distinctive (cid:128)ngerprint, meaning that
the RSA key generation method implemented by the RSALib was
not used in either one.
If used, the potential impact of factorizable keys would be par-
ticularly damaging to EMV cards due to the generally short RSA
key lengths used. Short keys are o(cid:137)en used for legacy reasons or to
improve the usability of payments by the shorter time required to
authorize the transaction (especially relevant for contactless pay-
ments). Out of the 13 cards inspected, we observed the following
bit lengths of ICC keys: 768 (3x), 896 (4x), 960 (1x) and 1024 (5x).
We recommend analyzing the keys used in a particular scenario
with the provided (cid:128)ngerprint detection tool and following the rec-
ommendations given in Section 5.
5 MITIGATION AND DISCLOSURE
We propose a mitigation of the a(cid:138)ack impacts and report on the
process of responsible disclosure to the Manufacturer.
5.1 Mitigation
Mitigation can be performed on multiple levels. Inarguably, algo-
rithm replacement is the best long-term mitigation method. How-
ever, changing the algorithm requires updating (cid:128)rmware – which
is usually not possible in already deployed devices like smartcards
or TPMs with code stored in read-only memory. Other options
are available even within the hardware device with the vulnerable
version of the RSALib with some caveats. New keys can be still
generated on the device if they are con(cid:128)gured to use key lengths
not directly a(cid:130)ected by our method (yet still with a reduced se-
curity margin), or keypairs could be generated by another library