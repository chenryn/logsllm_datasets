### 查看 Cgroup 层级结构中的子系统

首先，确认 `/sys/fs/cgroup/memory/` 是否已挂载：

```bash
mount | grep memory
```

进入内存控制组目录并创建一个新的子目录 `cosmos-limit-memory` 用于限制内存使用：

```bash
cd /sys/fs/cgroup/memory/
sudo mkdir cosmos-limit-memory
cd cosmos-limit-memory
ls
```

![](Images/858f37fb98a3209535b3bf3ef143a045.png)
{savepage-src="https://static001.geekbang.org/resource/image/dd/2e/dd7f2f85fab07ed11870c032cc1bee2e.png?wh=1456x438"}

### 启动一个未受内存限制的进程

使用 `stress` 工具启动一个消耗 200MB 内存的进程，并保持该内存占用：

```bash
stress --vm-bytes 200m --vm-keep -m 1
```

运行结果如下图所示：

![](Images/6ec56a92230cd9cfc9d9afec54275f37.png)
{savepage-src="https://static001.geekbang.org/resource/image/28/c0/2896f2b21b6a8f8ee028883c0e20a9c0.png?wh=1240x114"}

### 设置最大内存占用并将进程移动到当前 Cgroup

接下来，我们将设置 `memory.limit_in_bytes` 参数来限制进程的最大内存使用量为 100MB，并将之前启动的进程添加到新的 Cgroup 中。这样，我们就可以通过 `top` 命令观察到 `stress` 进程的最大内存已经被成功限制到了 100MB。

```bash
echo "100m" | sudo tee /sys/fs/cgroup/memory/cosmos-limit-memory/memory.limit_in_bytes
```

确保进程 ID（PID）被正确地写入到对应的 Cgroup 目录下的 `tasks` 文件中，以实现对该进程的内存限制。例如，如果 PID 是 1234，则执行：

```bash
echo 1234 | sudo tee /sys/fs/cgroup/memory/cosmos-limit-memory/tasks
```

以上步骤完成后，您可以使用 `top` 或其他监控工具验证内存限制是否生效。