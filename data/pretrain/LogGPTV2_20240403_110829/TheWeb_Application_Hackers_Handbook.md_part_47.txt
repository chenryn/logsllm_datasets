Submitting the following two passwords will result in different behavior
by the application. Results are returned in the fi rst case but not in the second:
‘ or 1=1 and ‘a’=’a
‘ or 1=2 and ‘a’=’a
This difference in behavior can be leveraged to test the truth of any specifi ed
condition and, therefore, extract arbitrary information one byte at a time. As
with SQL, the XPath language contains a substring function that can be used
to test the value of a string one character at a time. For example, supplying this
password:
‘ or //address[surname/text()=’Gates’ and substring(password/text(),1,1)=
‘M’] and ‘a’=’a
results in the following XPath query, which returns results if the fi rst character
of the Gates user’s password is M:
//address[surname/text()=’Dawes’ and password/text()=’’ or
//address[surname/text()=’Gates’ and substring(password/text(),1,1)= ‘M’]
and ‘a’=’a ‘]/ccard/text()
cc0099..iinndddd 334466 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 347
Chapter 9 n Attacking Data Stores 347
By cycling through each character position and testing each possible value,
an attacker can extract the full value of Gates’ password.
TRY IT!
http://mdsec.net/cclookup/14/
Blind XPath Injection
In the attack just described, the injected test condition specifi ed both the absolute
path to the extracted data (address) and the names of the targeted fi elds (surname
and password). In fact, it is possible to mount a fully blind attack without pos-
sessing this information. XPath queries can contain steps that are relative to the
current node within the XML document, so from the current node it is possible
to navigate to the parent node or to a specifi c child node. Furthermore, XPath
contains functions to query meta-information about the document, including
the name of a specifi c element. Using these techniques, it is possible to extract
the names and values of all nodes within the document without knowing any
prior information about its structure or contents.
For example, you can use the substring technique described previously to
extract the name of the current node’s parent by supplying a series of passwords
of this form:
‘ or substring(name(parent::*[position()=1]),1,1)= ‘a
This input generates results, because the fi rst letter of the address node is a.
Moving on to the second letter, you can confi rm that this is d by supplying the
following passwords, the last of which generates results:
‘ or substring(name(parent::*[position()=1]),2,1)=’a
‘ or substring(name(parent::*[position()=1]),2,1)=’b
‘ or substring(name(parent::*[position()=1]),2,1)=’c
‘ or substring(name(parent::*[position()=1]),2,1)=’d
Having established the name of the address node, you can then cycle through
each of its child nodes, extracting all their names and values. Specifying the
relevant child node by index avoids the need to know the names of any nodes.
For example, the following query returns the value Hunter:
//address[position()=3]/child::node()[position()=4]/text()
And the following query returns the value letmein:
//address[position()=3]/child::node()[position()=6]/text()
cc0099..iinndddd 334477 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 348
348 Chapter 9 n Attacking Data Stores
This technique can be used in a completely blind attack, where no results are
returned within the application’s responses, by crafting an injected condition
that specifi es the target node by index. For example, supplying the following
password returns results if the fi rst character of Gates’ password is M:
‘ or substring(//address[position()=1]/child::node()[position()=6]/
text(),1,1)= ‘M’ and ‘a’=’a
By cycling through every child node of every address node, and extracting
their values one character at a time, you can extract the entire contents of the
XML data store.
TIP XPath contains two useful functions that can help you automate the
preceding attack and quickly iterate through all nodes and data in the XML
document:
n count() returns the number of child nodes of a given element, which
can be used to determine the range of position() values to iterate
over.
n string-length() returns the length of a supplied string, which can be
used to determine the range of substring() values to iterate over.
TRY IT!
http://mdsec.net/cclookup/19/
Finding XPath Injection Flaws
Many of the attack strings that are commonly used to probe for SQL injection
fl aws typically result in anomalous behavior when submitted to a function that
is vulnerable to XPath injection. For example, either of the following two strings
usually invalidates the XPath query syntax and generates an error:
‘
‘--
One or more of the following strings typically result in some change in the
application’s behavior without causing an error, in the same way as they do in
relation to SQL injection fl aws:
‘ or ‘a’=’a
‘ and ‘a’=’b
or 1=1
and 1=2
cc0099..iinndddd 334488 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 349
Chapter 9 n Attacking Data Stores 349
Hence, in any situation where your tests for SQL injection provide tentative
evidence for a vulnerability, but you are unable to conclusively exploit the fl aw,
you should investigate the possibility that you are dealing with an XPath injec-
tion fl aw.
HACK STEPS
1. Try submitting the following values, and determine whether these result
in different application behavior, without causing an error:
‘ or count(parent::*[position()=1])=0 or ‘a’=’b
‘ or count(parent::*[position()=1])>0 or ‘a’=’b
If the parameter is numeric, also try the following test strings:
1 or count(parent::*[position()=1])=0
1 or count(parent::*[position()=1])>0
2. If any of the preceding strings causes differential behavior within the
application without causing an error, it is likely that you can extract arbi-
trary data by crafting test conditions to extract one byte of information at
a time. Use a series of conditions with the following form to determine
the name of the current node’s parent:
substring(name(parent::*[position()=1]),1,1)=’a’
3. Having extracted the name of the parent node, use a series of conditions
with the following form to extract all the data within the XML tree:
substring(//parentnodename[position()=1]/child::node()
[position()=1]/text(),1,1)=’a’
Preventing XPath Injection
If you think it is necessary to insert user-supplied input into an XPath query,
this operation should only be performed on simple items of data that can be
subjected to strict input validation. The user input should be checked against
a white list of acceptable characters, which should ideally include only alpha-
numeric characters. Characters that may be used to interfere with the XPath
query should be blocked, including ( ) = ‘ [ ] : , * / and all whitespace.
Any input that does not match the white list should be rejected, not sanitized.
Injecting into LDAP
The Lightweight Directory Access Protocol (LDAP) is used to access directory
services over a network. A directory is a hierarchically organized data store that
may contain any kind of information but is commonly used to store personal
data such as names, telephone numbers, e-mail addresses, and job functions.
cc0099..iinndddd 334499 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 350
350 Chapter 9 n Attacking Data Stores
Common examples of LDAP are the Active Directory used within Windows
domains, and OpenLDAP, used in various situations. You are most likely to
encounter LDAP being used in corporate intranet-based web applications, such
as an HR application that allows users to view and modify information about
employees.
Each LDAP query uses one or more search fi lters, which determine the direc-
tory entries that are returned by the query. Search fi lters can use various logical
operators to represent complex search conditions. The most common search
fi lters you are likely to encounter are as follows:
n Simple match conditions match on the value of a single attribute. For
example, an application function that searches for a user via his username
might use this fi lter:
(username=daf)
n Disjunctive queries specify multiple conditions, any one of which must
be satisfi ed by entries that are returned. For example, a search function
that looks up a user-supplied search term in several directory attributes
might use this fi lter:
(|(cn=searchterm)(sn=searchterm)(ou=searchterm))
n Conjunctive queries specify multiple conditions, all of which must be
satisfi ed by entries that are returned. For example, a login mechanism
implemented in LDAP might use this fi lter:
(&(username=daf)(password=secret)
As with other forms of injection, if user-supplied input is inserted into an
LDAP search fi lter without any validation, it may be possible for an attacker
to supply crafted input that modifi es the fi lter’s structure and thereby retrieve
data or perform actions in an unauthorized way.
In general, LDAP injection vulnerabilities are not as readily exploitable as
SQL injection fl aws, due to the following factors:
n Where the search fi lter employs a logical operator to specify a conjunctive
or disjunctive query, this usually appears before the point where user-
supplied data is inserted and therefore cannot be modifi ed. Hence, simple
match conditions and conjunctive queries don’t have an equivalent to the
“or 1=1” type of attack that arises with SQL injection.
n In the LDAP implementations that are in common use, the directory attri-
butes to be returned are passed to the LDAP APIs as a separate parameter
from the search fi lter and normally are hard-coded within the application.
cc0099..iinndddd 335500 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 351
Chapter 9 n Attacking Data Stores 351
Hence, it usually is not possible to manipulate user-supplied input to
retrieve different attributes than the query was intended to retrieve.
n Applications rarely return informative error messages, so vulnerabilities
generally need to be exploited “blind.”
Exploiting LDAP Injection
Despite the limitations just described, in many real-world situations it is possible
to exploit LDAP injection vulnerabilities to retrieve unauthorized data from the
application or to perform unauthorized actions. The details of how this is done typi-
cally are highly dependent on the construction of the search fi lter, the entry point
for user input, and the implementation details of the back-end LDAP service itself.
Disjunctive Queries
Consider an application that lets users list employees within a specifi ed depart-
ment of the business. The search results are restricted to the geographic locations
that the user is authorized to view. For example, if a user is authorized to view
the London and Reading locations, and he searches for the “sales” department,
the application performs the following disjunctive query:
(|(department=London sales)(department=Reading sales))
Here, the application constructs a disjunctive query and prepends different
expressions before the user-supplied input to enforce the required access control.
In this situation, an attacker can subvert the query to return details of all
employees in all locations by submitting the following search term:
)(department=*
The * character is a wildcard in LDAP; it matches any item. When this input
is embedded into the LDAP search fi lter, the following query is performed:
(|(department=London )(department=*)(department=Reading )(department=*))
Since this is a disjunctive query and contains the wildcard term (depart-
ment=*), it matches on all directory entries. It returns the details of all employees
from all locations, thereby subverting the application’s access control.
TRY IT!
http://mdsec.net/employees/31/
http://mdsec.net/employees/49/
cc0099..iinndddd 335511 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 352
352 Chapter 9 n Attacking Data Stores
Conjunctive Queries
Consider a similar application function that allows users to search for employ-
ees by name, again within the geographic region they are authorized to view.
If a user is authorized to search within the London location, and he searches
for the name daf, the following query is performed:
(&(givenName=daf)(department=London*))
Here, the user’s input is inserted into a conjunctive query, the second part of
which enforces the required access control by matching items in only one of
the London departments.
In this situation, two different attacks might succeed, depending on the
details of the back-end LDAP service. Some LDAP implementations, including
OpenLDAP, allow multiple search fi lters to be batched, and these are applied
disjunctively. (In other words, directory entries are returned that match any of
the batched fi lters.) For example, an attacker could supply the following input:
*))(&(givenName=daf
When this input is embedded into the original search fi lter, it becomes:
(&(givenName=*))(&(givenName=daf)(department=London*))
This now contains two search fi lters, the fi rst of which contains a single
wildcard match condition. The details of all employees are returned from all
locations, thereby subverting the application’s access control.
TRY IT!
http://mdsec.net/employees/42/
NOTE This technique of injecting a second search fi lter is also effective
against simple match conditions that do not employ any logical operator, pro-
vided that the back-end implementation accepts multiple search fi lters.
The second type of attack against conjunctive queries exploits how many LDAP
implementations handle NULL bytes. Because these implementations typically are
written in native code, a NULL byte within a search fi lter effectively terminates the
string, and any characters coming after the NULL are ignored. Although LDAP
does not itself support comments (in the way that the -- sequence can be used
in SQL), this handling of NULL bytes can effectively be exploited to “comment
out” the remainder of the query.
cc0099..iinndddd 335522 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 353
Chapter 9 n Attacking Data Stores 353
In the preceding example, the attacker can supply the following input:
*))%00
The %00 sequence is decoded by the application server into a literal NULL byte,
so when the input is embedded into the search fi lter, it becomes:
(&(givenName=*))[NULL])(department=London*))
Because this fi lter is truncated at the NULL byte, as far as LDAP is concerned it
contains only a single wildcard condition, so the details of all employees from
departments outside the London area are also returned.
TRY IT!
http://mdsec.net/employees/13/
http://mdsec.net/employees/42/
Finding LDAP Injection Flaws
Supplying invalid input to an LDAP operation typically does not result in an
informative error message. In general, the evidence available to you in diagnosing
vulnerability includes the results returned by a search function and the occur-
rence of an error such as an HTTP 500 status code. Nevertheless, you can use the
following steps to identify an LDAP injection fl aw with a degree of reliability.
HACK STEPS
1. Try entering just the * character as a search term. This character functions
as a wildcard in LDAP, but not in SQL. If a large number of results are
returned, this is a good indicator that you are dealing with an LDAP query.
2. Try entering a number of closing brackets:
))))))))))
This input closes any brackets enclosing your input, as well as those
that encapsulate the main search filter itself. This results in unmatched
closing brackets, thus invalidating the query syntax. If an error results, the
application may be vulnerable to LDAP injection. (Note that this input may
also break many other kinds of application logic, so this provides a strong
indicator only if you are already confident that you are dealing with an
LDAP query.)
Continued
cc0099..iinndddd 335533 88//1199//22001111 1122::0099::3344 PPMM
Stuttard c09.indd V3 - 07/28/2011 Page 354
354 Chapter 9 n Attacking Data Stores
HACK STEPS (CONTINUED)
3. Try entering various expressions designed to interfere with different
types of queries, and see if these allow you to influence the results being
returned. The cn attribute is supported by all LDAP implementations and
is useful to use if you do not know any details about the directory you are
querying. For example:
)(cn=*
*))(|(cn=*
*))%00
Preventing LDAP Injection
If it is necessary to insert user-supplied input into an LDAP query, this opera-
tion should be performed only on simple items of data that can be subjected to
strict input validation. The user input should be checked against a white list of
acceptable characters, which should ideally include only alphanumeric char-
acters. Characters that may be used to interfere with the LDAP query should
be blocked, including ( ) ; , * | & = and the null byte. Any input that does
not match the white list should be rejected, not sanitized.
Summary
We have examined a range of vulnerabilities that allow you to inject into web
application data stores. These vulnerabilities may allow you to read or modify
sensitive application data, perform other unauthorized actions, or subvert appli-
cation logic to achieve an objective.
As serious as these attacks are, they are only part of a wider range of attacks
that involve injecting into interpreted contexts. Other attacks in this category
may allow you to execute commands on the server’s operating system, retrieve
arbitrary fi les, and interfere with other back-end components. The next chapter