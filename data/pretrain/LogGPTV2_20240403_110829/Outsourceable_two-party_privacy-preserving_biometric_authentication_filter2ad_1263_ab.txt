nary strings, and identify them with their vector encodings as above. We also
assume that the similarity between two biometric templates is measured by HD,
or equivalently, the inner product of their corresponding vector encodings. It is
one of the most typical cases which can be found in many biometric recogni-
tion algorithms, including FingerCode for ﬁngerprint [20] and all iris recognition
schemes analyzed in [21].
3.2 Biometric Authentication System
We consider biometric authentication system composed of two phases: en-
rollment and authentication whose participants are service provider and a set
of end-users as in [15]. An end-user is a person with his/her own device which
scans the end-user’s biometric information as a binary vector and generates an
encrypted template from it. The service provider can be an authentication server
or an online service provider whose goal is to discriminate legitimate user ac-
cording to the encrypted biometric template.
In the enrollment phase, an end-user Ui retrieves his/her biometric bit string
xi and sends it in an encrypted form, say Enc(xi) along with the end-user’s
identiﬁer IDi. Server stores (IDi, Enc(xi)) in the database. In the authentication
phase, a user Ui generates his/her fresh biometric templates yi’s, and sends
encrypted forms of them Enc(yi)(cid:48)s with its identiﬁer IDi to the service provider.
The service provider ﬁnds (IDi, Enc(xi)) with the same IDi in its database and
determines whether Ui is a legitimate user or not according to the similarity
between xi and yi which can be derived from Enc(xi) and Enc(yi). An example
of the whole process is shown in Fig. 1.
Fig. 1: Our biometric authentication system.
3.3 Adversarial Model
We follow the approach in [15] to deal with an adversarial model. We assume
that the end-user is fully trusted in the enrollment phase, and the secret key of
the end-user is kept secret at the local storage of the end-user’s device during the
whole enrollment/authentication phases. An adversary is allowed to pass her own
biometric templates to the devices so that the devices act as oracles to encrypt
them and send the encrypted templates to the service provider. The service
provider can be malicious, that is, it may collude with an adversary and query
biometric templates through the devices, watching the matching scores according
to them. Eventually, there are two considered attack scenarios as follows:
– (Passive attack) The only information the service provider knows is the
record {(Enc(xi), IDi)}, where xi is a registered biometric of the i-th user
Ui. In this case, the service provider does not know xi’s in their plaintext
forms.
– (Active attack) The service provider knows {(Enc(xi), IDi)} as in the pre-
i for
vious case, but it also generates queries for the authentication phase yj
j = 1,··· , Q, and sees all pairs {(yj
i , Enc(yj
i )}.
The ﬁrst attack, which is a passive one, corresponds to the Ciphertext-Only
attack, while the second attack corresponds to the Chosen-Plaintext Attack in
the cryptographic context. We will give a formal deﬁnition of these attack models
in Section 5.2.
4
Single Key Function-hiding Inner Product Encryption
for Binary Strings from Lattice
In this section, we introduce a cryptographic primitive, single key Function-
hiding Inner Product Encryption for Binary strings (hereafter, FFB-IPE), which
is specialized for biometric authentication, and present a concrete construction
of which security is based on the hardness assumption of LWE.
4.1 Overview
We ﬁrst provide a brief sketch of our approach in this subsection: we discuss what
brought us to deﬁne a new primitive FFB-IPE, and how we construct FFB-IPE
based on the LWE assumption.
We adapt and relax the deﬁnition of FH-IPE to be suﬃcient in HD-based
biometric authentication, and propose a new practical construction based on the
LWE assumption. In a high-level, biometric authentication with FH-IPE includes
the following procedures: (i) In the enrollment phase, the end-user generates
and sends a secret key corresponding to x to the service provider, using the
stored master secret key. (ii) In the authentication phase, the end-user sends a
ciphertext corresponding to y to the service provider so that the service provider
decrypts it and achieves (cid:104)x, y(cid:105) which directly implies HD between x and y. Note
that, in the HD-based biometric authentication, the secret key generation for x is
done only for once (in enrollment), the vectors x and y are bit strings (i.e., x, y ∈
{−1, 1}k), and the inner product value (cid:104)x, y(cid:105) has to be calculated in Z. Since we
focus on the biometric authentication with HD matcher, we set the new primitive
FFB-IPE to be FH-IPE for a single key query with binary function/message
spaces, where inner products are calculated in Z. The FFB-IPE deﬁnition allows
us to construct a scheme followed by a record-breaking performance.
We brieﬂy explain how we solve the problem of constructing FFB-IPE in
three steps as follows.
Step 1: Basic Scheme – Single Key Construction for Eﬃciency and
Functionality. We ﬁrst draw a basic scheme which is not function-hiding even
for a single key query, and then show how to convert it to FFB-IPE. In the basic
scheme (not secure), msk is a matrix T of structure T t = [Ik||St] ∈ Zk×(k+n)
where Ik is the k × k identity matrix. For a binary vector x, the secret key is set
to be T x. Encryption of zero is a multi-secret LWE sample (b = −Sta + e, a)
with secret matrix S, where a is uniform randomly sampled from Zn
q , and e is
an error vector from some distribution. Encryption of y is obtained by adding
an encoding of y ( = ((q/p) · y, 0)) to encryption of zero. In this way, it can be
seen by a simple calculation that we can derive (cid:104)x, y(cid:105) from the inner product of
the secret key corresponding to x and the ciphertext corresponding to y. This
scheme enables decryptor to calculate the inner product; however, it is obviously
not function-hiding since the secret key shows x in raw.
q
Step 2: Full Scheme – Use One-Time Pad in Key Generation. To modify
the basic scheme to be function-hiding for a single key query, we additionally
generate one more uniform random vector u together with the matrix T setting
the master secret key as msk := [u||T ], and use u as one time pad in the key
generation: we deﬁne secret key corresponding to x by sk := T x + u, instead
of T x. For correctness, a ciphertext contains one additional component which is
probabilistically close to the inner product of u and the original ciphertext (of
the basic scheme).
Step 3: Security Proof – A Reduction from LWE to Weak-HintLWE.
The additional component of a ciphertext eventually gives an additional infor-
mation for the LWE secret matrix S which can be also seen as an information for
the error vector (in one sample of multi-secret LWE) generated in encryption.
Hence, the security of our construction is reduced to the LWE problem with an
additional published value, which we call Weak-HintLWE. Informally speaking,
a Weak-HintLWE sample contains a multi-secret LWE sample together with an
approximate linear combination of the errors which correspond to the respec-
tive secrets of the multi-secret LWE. Needless to say, to prove the hardness of
Weak-HintLWE is very crucial in our security proof. We resolve it by suggesting
a polynomial-time reduction from LWE to Weak-HintLWE under the reasonable
condition for the error distributions. Consequently, the security of our construc-
tion is based on the LWE assumption, and our proposed parameters in Section 6
are also set to make the original LWE problem as hard as desired.
4.2 Formalization of the Primitive
The proposed primitive FFB-IPE Π consists of four probabilistic polynomial-
time algorithms Setup, KeyGen, Enc and Dec. Then FFB-IPE Π = (Setup, KeyGen, Enc, Dec)
is described as below.
– Setup(1λ): The setup algorithm outputs public parameter pp and a master
secret key msk for the security parameter λ.
– KeyGen(pp, msk, x ∈ {−1, 1}k): The key generation algorithm on the inputs
of the public parameter pp, the master secret key msk and a vector x ∈
{−1, 1}k outputs a secret key sk.
– Enc(pp, msk, y ∈ {−1, 1}k): The encryption algorithm takes in the public
parameter pp, the master secret key msk and a vector y ∈ {−1, 1}k, and
returns a ciphertext c.
– Dec(pp, sk, c): The decryption algorithm takes as the input a public param-
eter pp, a ciphertext c, and a secret key sk. It returns a decrypted value
z ∈ Z.
Correctness. We deﬁne the correctness of the primitive FFB-IPE Π = (Setup, KeyGen, Enc, Dec)
as follows.
Deﬁnition 1. FFB-IPE Π = (Setup, KeyGen, Enc, Dec) is said to be correct if
for all (msk, pp) ← Setup(1λ) and x, y ∈ {−1, 1}k,
(cid:104)x, y(cid:105) = v
Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) sk ← KeyGen(pp, msk, x)
c ← Enc(pp, msk, y)
v ← Dec(pp, sk, c)
 > 1 − 2−λ
where λ is the security parameter.
Security. We deﬁne the security of FFB-IPE as follows. Our deﬁnition is similar
to the simulation-based security deﬁnition in [17] with some relaxation in the
sense that the oracle for KeyGen can be queried only once and beforehand.
Deﬁnition 2. A FFB-IPE scheme Π = (Setup, KeyGen, Enc, Dec) is called 1-
sSIM-secure if for all polynomial-time adversary A, there exists a polynomial-
time simulator S = (S1,S2,S3) such that the outputs of the following two exper-
iments are computationally indistinguishable.
Table 1: The Real-world Experiment and the Ideal-world Experiment
RealA(1λ) :
1. (pp, msk) ← Setup(1λ)
2. b ←AOKeyGen(msk,·),OEnc(msk,·)(1λ)
3. output b
IdealA,S (1λ) :
1. (pp, st) ← S1(1λ)
2. b ←A ˜OKeyGen (·), ˜OEnc(·)(1λ, pp)
3. output b
where OKeyGen(msk,·), OEnc(msk,·), ˜OKeyGen(·), ˜OEnc(·) are deﬁned as follows:
– OKeyGen(msk, x) = KeyGen(msk, x) only for the ﬁrst query, and aborts other-
wise.
– OEnc(msk,·) aborts if OKeyGen(msk,·) has not been queried before. Otherwise,
OEnc(msk, y) = Enc(msk, y).
– ˜OKeyGen(·), ˜OEnc(·) are stateful, and shares a simulator state st and a collec-
tion P = {(cid:104)x, y(i)(cid:105)}i, where i is a counter for ˜OEnc(·) initialized to 0 at the
beginning, and x and y(i) are the inputs for invocation of ˜OKeyGen(·) and i-th
invocation of ˜OEnc(·), respectively (At the beginning, P is set to be empty).
• On the adversary’s invocation of ˜OKeyGen(·) with input x, ˜OKeyGen(·)
aborts unless it is the ﬁrst query. Otherwise, ˜OKeyGen(·) invokes the sim-
ulator S2 on input st. The simulator responds with a tuple (sk, st(cid:48)) ←
S2(st). The oracle updates the state st ← st(cid:48) and replies to the adversary
with sk.
• On the adversary’s i-th invocation of ˜OEnc(·) with input y(i), the oracle
aborts unless ˜OKeyGen(·) is queried before. Otherwise, it updates the collec-
input P and st. The simulator responds with a tuple (c, st(cid:48)) ← S3(P, st).
The oracle updates the state st ← st(cid:48) and replies to the adversary with c.
tion P ← P(cid:83){(cid:104)x, y(i)(cid:105)}, sets i ← i + 1, and invokes the simulator S3 on
Our security deﬁnition aims to capture that all adversaries that have both
sk and c ’s cannot obtain any information about x or y(i) other than the inner
products (cid:104)x, y(i)(cid:105): Note that simulator in the ideal world does not take any of x
or y as inputs, and it instead takes P = {(cid:104)x, y(i)(cid:105)}i as inputs.
4.3 Our Construction
In this subsection, we propose a concrete instantiation of FFB-IPE, which satis-
ﬁes the correctness and security conditions deﬁned in the previous subsection. For
a pre-determined threshold value T ∈ Z, our FFB-IPE Π = (Setup, KeyGen, Enc, Dec)
is described as follows:
q
. Sample a random vector u ← Zm
– Setup(1λ): Choose parameters q(λ), p(λ), n(λ), k(λ), m = n + k, and set a
distribution DS over Zn×k
q and a random
matrix S ← DS, and return the master secret key msk = (u, S) and a set
∈ Zm×k
of public parameters pp = (q, p, n, k, m). Let us denote T :=
where Ik is the k × k identity matrix.
– KeyGen(pp, msk, x): For given x ∈ {−1, 1}k, return sk = u + T x ∈ Zm
q .
– Enc(pp, msk, y): For y ∈ {−1, 1}k, do the following.
(cid:20)Ik
(cid:21)
S
q
1. Sample a random vector a ← Zn
q and an error vector e ← Dk
σ. Let
and c1 = (b, a) ∈ Rk
b = −Sta + (q/p) · y + e ∈ Rk
q ,
q × Zn
q . Note that T tc1 = (q/p) · y + e.
2. Sample an error e∗ ← Dσ∗ and compute c0 = −(cid:104)u, c1(cid:105) + e∗ ∈ Rq.
3. Return c := (c0, c1) ∈ Rq × (Rk
v = (cid:98)(p/q) · (c0 + (cid:104)sk, c1(cid:105))(cid:101) ∈ Zp.
– Dec(pp, sk, c, T): Parse c = (c0, c1) ∈ Rq × (Rk
q × Zn
q ).
q × Zn
q ). Compute and output
Correctness. The following theorem shows that the correctness holds for our
construction with certain conditions.
Theorem 1 (correctness). For x, y ∈ {−1, 1}k, let 2k  0, and
the secret distribution D. The deﬁnition of WHintLWEk
(D) is as follow.