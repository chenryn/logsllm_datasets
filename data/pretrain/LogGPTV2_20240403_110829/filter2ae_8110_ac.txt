#### 简易测试
Step 1：修改origin后进行握手尝试  
Step 2：握手成功  
Step
3：用第三方连接websockets发送消息发现能够抓包，如果用户已经登录网站后被诱骗访问攻击者设计好的恶意网页，恶意网页在某元素中植入一个WebSocket
握手请求申请跟网站建立WebSocket连接，一旦打开该恶意网页则自动发起攻击者构造的请求  
#### 实验环境
#### 实验步骤
Step 1：打开靶场环境之后点击Live Chat  
Step 2：之后提交message  
Step 3：在Burp Proxy的WebSockets history选项卡中，观察到"READY"命令从服务器检索过去的聊天消息  
Step 4：在Burp Proxy的HTTP history选项卡中，找到WebSocket握手请求可以看到该请求没有CSRF令牌  
Step 5：右键单击握手请求并选择"复制URL"
Step 6：在浏览器中转到exploit server，将以下模板粘贴到"Body"部分，将your-websocket-url替换为websocket握手中的URL(your-lab-id.web-security-academy.
net/chat)，确保将协议从 Collaborator客户端生成的有效负载替换your-collaborator-url
改完之后的实例如下：
Step 7：点击"Veiw Exploit"
Step 8：之后收到DNS请求
Step 9：之后点击"Deliver exploit to victim"  
之后在Burp Collaborator界面点击Poll now，去查找泄露的信息  
#### 防御措施
  * 检查客户端请求中的Origin信息是否跨域
  * 通过使用Token来验证用户身份防止跨域
### 拒绝服务
#### 基本介绍
由于WebSocket是面向连接的协议，且通过我们之前的实例我们会发现在完成一次请求处理之后，后续由于Keep-Alive导致服务器接受完信息后不会关闭TCP连接，而后续对相同目标服务器的请求也将一律采用这个TCP连接，此时我们就会想到一个问题：如果WebSocket未限制链接数量，那么此时将会带来被DOS攻击的风险，同时需要注意的一点就是WebSocket的连接数量限制和HTTP连接限制并不完全相同，它对于浏览器有差异，例如：火狐浏览器默认最大连接数为200
#### 利用方式
WebSocket建立的连接是持久性的连接，当且仅当客户端或者服务器中的一方主动发起断开链接请求(Opcode
8的关闭帧)时才会关闭，那么我们的利用方式也就显得很是简单了，我们只需要发起大量的连接请求耗尽服务器资源即可实现拒绝服务攻击
Step 1：导入依赖
    python -m pip install ws4py from ws4py.client.threadedclient import WebSocketClient
Step 2：发起连接请求
    class WS_Client(WebSocketClient):
        def opened(self):
            reqData = "Hello"
            self.send(reqData)
        def closed(self, code, reason=None):
            print("[-] Closed down:", code, reason)
        def received_message(self, resp):
            resp = json.loads(str(resp))
            print(resp)
    if __name__ == '__main__':
        while True:
            ws = WS_Client("wss://x.x.x.x:443")
            ws.connect()
#### 防御措施
  * 限制单一IP的最大连接数
  * 设置最大连接时效时间(貌似过于理想化，不太行)
## 请求走私
### 反向代理
目前大多数WEB服务器、负载平衡器和HTTP代理都允许代理WebSocket流量，下面让我们观察一下在反向代理的环境中WebSocket通信应该如何进行，下面描述了一幅理想的图片：
第一步：客户端向反向代理发送升级请求，代理通过检查HTTP方法、"Upgrade"、"Sec WebSocket
version"、"SecWebSocket Key"标头的存在等来检查传入请求是否确实是升级请求，如果请求是正确的升级请求，代理会将其转换为后端  
第二步：后端用状态代码为"101"的HTTP响应回答反向代理，响应还具有"Upgrade"和"Sec-WebSocket-Accept"标头，反向代理应该通过检查状态代码和其他标头来检查后端是否确实准备好建立WebSocket连接，如果一切都正确，那么反向代理将响应从后端转换到客户端
第三步：代理不会关闭客户端和后端之间的TCP或TLS连接，他们都同意使用此连接进行WebSocket通信，因此客户端和后端可以来回发送WebSocket帧，此时的代理应该检查客户端是否发送屏蔽(MASKED
= MASK ^ DATA (^ - XOR)，该机制可防止缓存中毒和请求走私)的WebSocket帧
### 请求走私
事实上由于反向代理的行为可能不同并且不完全遵守RFC 6445标准，从而导致导致走私攻击的发生
#### 示例场景1
假设我们有公开公共WebSocket API的后端，也有外部不可用的内部REST API，此时恶意客户端希望访问内部REST API  
第一步：客户端向反向代理发送升级请求，但标头"Sec-WebSocket-version"中的协议版本错误，代理未验证"Sec-WebSocket-Version"标头并认为升级请求正确并将请求转到后端  
第二步：后端发送状态代码为"426"的响应，因为标头"Sec-WebSocket-version"中的协议版本不正确，然而反向代理没有检查来自后端的足够响应(包括状态代码)并认为后端已准备好进行WebSocket通信，此外它还将请求转换为客户端
第三步：反向代理认为在客户端和后端之间建立了WebSocket连接，而实际上没有WebSocket连接，因为后端拒绝了升级请求，同时代理将客户端和后端之间的TCP或TLS连接保持在打开状态，故而客户端可以通过连接发送HTTP请求轻松访问私有REST
API  
以下反向代理受到影响：
  * Varnish反向代理
  * Envoy反向代理1.8.0(或更早版本)
#### 示例场景2
大多数反向代理在握手部分检查来自后端的状态代码，这使得攻击变得更加困难，但也并非不可能，下面我们观察第二种情况，假设我们现在有公开公共WebSocket
API和公共REST API用于health检查的后端，也有外部无法使用的内部REST API，恶意客户端希望访问内部REST
API，在这里我们使用NGINX来作反向代理，WebSocket API在路径/API/socket.io/上可用，healthcheck
API在/api/health上可用  
通过发送POST请求调用Healthcheck API，名称为"u"的参数控制URL，后端请求外部资源并将状态代码返回给客户端
第一步：客户端发送POST请求以调用healthcheck
API，但带有额外的HTTP头"Upgrade:websocket"，NGINX认为这是一个正常的升级请求，它只查找"Upgrade"标头并跳过请求的其他部分，之后进一步的代理将请求转换到后端
第二步：后端调用healtcheck
API，它到达由恶意用户控制的外部资源，恶意用户返回状态代码为"101"的HTTP响应，后端将该响应转换为反向代理，由于NGINX只验证状态代码，所以它会认为后端已经为WebSocket通信做好了准备，此外它还将请求转换为客户端
第三步：NGINX认为在客户端和后端之间建立了WebSocket连接，实际上并没有WebSocket连接—在后端调用了healthcheck REST
API，同时反向代理将客户端和后端之间的TCP或TLS连接保持在打开状态，客户端可以通过连接发送HTTP请求轻松访问私有REST
API，目前大多数反向代理应该受到这种情况的影响，然而利用该漏洞需要存在外部SSRF漏洞(通常被认为是低严重性问题)
## 防御措施
  * WebSocket连接进行身份认证
  * WebSocket连接能用WSS就别用WS
  * WebSocket连接验证请求源规避跨域攻击
  * WebSocket请求头中的数据秉持不可信原理对其进行严格检查
  * WebSocket请求数据参数进行合法性检查，规避OWASP Top 10类漏洞
## 参考链接