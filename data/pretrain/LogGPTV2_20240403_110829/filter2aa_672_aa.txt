|=-----------------------------------------------------------------------=|
|=----------------------=[ Hijacking RDS-TMC Traffic ]=------------------=|
|=----------------------=[    Information signal     ]=------------------=|
|=-----------------------------------------------------------------------=|
|=-----------------------------------------------------------------------=|
|=-----------------=[ By Andrea "lcars" Barisani         ]=--------------=|
|=-----------------=[      ]=--------------=|
|=-----------------=[                                    ]=--------------=|
|=-----------------=[    Daniele "danbia" Bianco         ]=--------------=|
|=-----------------=[     ]=--------------=|
|=-----------------------------------------------------------------------=|
--[ Contents
1. - Introduction
2. - Motivation
3. - RDS
4. - RDS-TMC
5. - Sniffing circuitry
6. - Simple RDS Decoder 0.1
7. - Injection circuitry
I.  - References
II. - Links
--[ 1. Introduction
Modern Satellite Navigation systems use a recently developed standard
called RDS-TMC (Radio Data System - Traffic Message Channel) for receiving
traffic information over FM broadcast. The protocol allows communication of
traffic events such as accidents and queues. If information affects the
current route plotted by the user the information is used for calculating
and suggesting detours and alternate routes. We are going to show how to
receive and decode RDS-TMC packets using cheap homemade hardware, the goal
is understanding the protocol so that eventually we may show how trivial it
is to inject false information.
We also include the first release of our Simple RDS Decoder (srdsd is the
lazy name) which as far as we know is the first open source tool available
which tries to fully decode RDS-TMC messages. It's not restricted to
RDS-TMC since it also performs basic decoding of RDS messages.
The second part of the article will cover transmission of RDS-TMC messages,
satellite navigator hacking via TMC and its impact for social engineering
attacks.
--[ 2. Motivation
RDS has primarily been used for displaying broadcasting station names on FM
radios and give alternate frequencies, there has been little value other
than pure research and fun in hijacking it to display custom messages.
However, with the recent introduction of RDS-TMC throughout Europe we are
seeing valuable data being transmitted over FM that actively affects SatNav
operations and eventually the driver's route choice. This can
have very important social engineering consequences. Additionally, RDS-TMC
messages can be an attack vector against SatNav parsing capabilities.
Considering the increasing importance of these system's role in car
operation (which are no longer strictly limited to route plotting anymore)
and their human interaction they represent an interesting target combined
with the "cleartext" and un-authenticated nature of RDS/RDS-TMC messages.
We'll explore the security aspects in Part II.
--[ 3. RDS
The Radio Data System standard is widely adopted on pretty much every
modern FM radio, 99.9% of all car FM radio models feature RDS nowadays.
The standard is used for transmitting data over FM broadcasts and RDS-TMC
is a subset of the type of messages it can handle. The RDS standard is
described in the European Standard 50067.
The most recognizable data transmitted over RDS is the station name which
is often shown on your radio display, other information include alternate
frequencies for the station (that can be tried when the signal is lost),
descriptive information about the program type, traffic announcements (most
radio can be set up to interrupt CD and/or tape playing and switch to radio
when a traffic announcement is detected), time and date and many more
including TMC messages.
In a FM transmission the RDS signal is transmitted on a 57k subcarrier in
order to separate the data channel from the Mono and/or Stereo audio.
FM Spectrum:
  Mono   Pilot Tone   Stereo (L-R)     RDS Signal
   ^         ^           ^   ^            ^^
 ||||||||||  |   ||||||||||  ||||||||||   ||
 ||||||||||  |   ||||||||||  ||||||||||   ||
 ||||||||||  |   ||||||||||  ||||||||||   || 
 ||||||||||  |   ||||||||||  ||||||||||   ||
 ||||||||||  |   ||||||||||  ||||||||||   ||
--------------------------------------------------------------------------
            19k 23k        38k        53k 57k              Freq (Hz)
The RDS signal is sampled against a clock frequency of 1.11875 kHz, this
means that the data rate is 1187.5 bit/s (with a maximum deviation of +/-
0.125 bit/s).
The wave amplitude is decoded in a binary representation so the actual data
stream will be friendly '1' and '0'.
The RDS smallest "packet" is called a Block, 4 Blocks represent a Group. 
Each
Block has 26 bits of information making a Group 104 bits large.
Group structure (104 bits):
 ---------------------------------------
| Block 1 | Block 2 | Block 3 | Block 4 |
 ---------------------------------------
Block structure (26 bits):
 ---------------- ---------------------
| Data (16 bits) | Checkword (10 bits) |
 ---------------- ---------------------
The Checkword is a checksum included in every Block computed for error
protection, the very nature of analog radio transmission introduces many
errors in data streams. The algorithm used is fully specified in the
standard and it doesn't concern us for the moment.
Here's a representation of the most basic RDS Group:
Block 1:
 ---------------------              PI code   = 16 bits 
| PI code | Checkword |             Checkword = 10 bits
 ---------------------
Block 2:                                               Group code = 4  bits
                                                       B0         = 1  bit
 ---------------------------------------------------   TP         = 1  bit 
| Group code | B0 | TP | PTY |  | Checkword |  PTY        = 5  bits
 ---------------------------------------------------   Checkword  = 10 bits
Block 3:
 ------------------                 Data      = 16 bits
| Data | Checkword |                Checkword = 10 bits
 ------------------                
Block 4:
 ------------------                 Data      = 16 bits
| Data | Checkword |                Checkword = 10 bits
 ------------------                  
The PI code is the Programme Identification code, it identifies the radio
station that's transmitting the message. Every broadcaster has a unique
assigned code.
The Group code identifies the type of message being transmitted as RDS can
be used for transmitting several different message formats. Type 0A (00000)
and 0B (00001) for instance are used for tuning information. RDS-TMC
messages are transmitted in 8A (10000) groups. Depending on the Group type
the remaining 5 bits of Block 2 and the Data part of Block 3 and Block 4
are used according to the relevant Group specification.
The 'B0' bit is the version code, '0' stands for RDS version A, '1' stands
for RDS version B.
The TP bit stands for Traffic Programme and identifies if the station is
capable of sending traffic announcements (in combination with the TA code
present in 0A, 0B, 14B, 15B type messages), it has nothing to do with
RDS-TMC and it refers to audio traffic announcements only.
The PTY code is used for describing the Programme Type, for instance code 1
(converted in decimal from its binary representation) is 'News' while code
4 is 'Sport'.
--[ 4. RDS-TMC
Traffic Message Channel packets carry information about traffic events,
their location and the duration of the event. A number of lookup tables are
being used to correlate event codes to their description and location
codes to the GPS coordinates, those tables are expected to be present in
our SatNav memory. The RDS-TMC standard is described in International
Standard (ISO) 14819-1.
All the most recent SatNav systems supports RDS-TMC to some degree, some
systems requires purchase of an external antenna in order to correctly 
receive
the signal, modern ones integrated in the car cockpit uses the existing FM
antenna used by the radio system. The interface of the SatNav allows
display of the list of received messages and prompts detours upon events
that affect the current route.
TMC packets are transmitted as type 8A (10000) Groups and they can be
divided in two categories: Single Group messages and Multi Group messages.
Single Group messages have bit number 13 of Block 2 set to '1', Multi Group
messages have bit number 13 of Block 2 set to '0'.
Here's a Single Group RDS-TMC message:
Block 1:
 ---------------------              PI code   = 16 bits 
| PI code | Checkword |             Checkword = 10 bits
 ---------------------
Block 2:                                                Group code = 4  bits
                                                        B0         = 1  bit
 -----------------------------------------------------  TP         = 1  bit 
| Group code | B0 | TP | PTY | T | F | DP | Checkword | PTY        = 5  bits
 -----------------------------------------------------  Checkword  = 10 bits
 T = 1 bit    DP = 3 bits  
 F = 1 bit    
Block 3:                                                D          = 1 bit 
                                                        PN         = 1 bit
 -------------------------------------                  Extent     = 3 bits
| D | PN | Extent | Event | Checkword |                 Event      = 11 bits
 -------------------------------------                  Checkword  = 10 bits
Block 4:
 ----------------------             Location  = 16 bits
| Location | Checkword |            Checkword = 10 bits
 ----------------------                  
We can see the usual data which we already discussed for RDS as well as new
information (the  are now described).
We already mentioned the 'F' bit, it's bit number 13 of Block 2 and it
identifies the message as a Single Group (F = 1) or Multi Group (F = 0). 
The 'T', 'F' and 'D' bits are used in Multi Group messages for identifying 
if
this is the first group (TFD = 001) or a subsequent group (TFD = 000) in the
stream.
The 'DP' bit stands for duration and persistence, it contains information
about the timeframe of the traffic event so that the client can
automatically flush old ones.
The 'D' bit tells the SatNav if diversion advice needs to be prompted or
not.
The 'PN' bit (Positive/Negative) indicates the direction of queue events,
it's opposite to the road direction since it represent the direction of the
growth of a queue (or any directional event).
The 'Extent' data shows the extension of the current event, it is measured
in terms of nearby Location Table entries.
The 'Event' part contains the 11 bit Event code, which is looked up on the
local Event Code table stored on the SatNav memory. The 'Location' part
contains the 16 bit Location code which is looked up against the Location
Table database, also stored on your SatNav memory, some countries allow a
free download of the Location Table database (like Italy[1]).
Multi Group messages are a sequence of two or more 8A groups and can
contain additional information such as speed limit advices and
supplementary information.
--[ 5. Sniffing circuitry
Sniffing RDS traffic basically requires three components:
1. FM radio with MPX output
2. RDS signal demodulator
3. RDS protocol decoder
The first element is a FM radio receiver capable of giving us a signal that
has not already been demodulated in its different components since we need
access to the RDS subcarrier (and an audio only output would do no good).
This kind of "raw" signal is called MPX (Multiplex). The easiest way to get
such signal is to buy a standard PCI Video card that carries a tuner
which has a MPX pin that we can hook to.
One of these tuners is Philips FM1216[2] (available in different
"flavours", they all do the trick) which provides pin 25 for this purpose.
It's relatively easy to identify a PCI Video card that uses this tuner, we
used the WinFast DV2000. An extensive database[3] is available.
Once we get the MPX signal it can then be connect to a RDS signal
demodulator which will perform the de-modulation and gives us parsable
data. Our choice is ST Microelectronics TDA7330B[4], a commercially
available chip used in most radio capable of RDS de-modulation. Another
possibility could be the Philips SAA6579[5], it offers the same
functionality of the TDA7330, pinning might differ.
Finally we use custom PIC (Peripheral Interface Controller) for preparing
and sending the information generated by the TDA7330 to something that we
can understand and use, like a standard serial port.  
The PIC brings DATA, QUAL and CLOCK from demodulator and "creates" a
stream good enough to be sent to the serial port. Our PIC uses only two
pins of the serial port (RX - RTS), it prints out ascii '0' and '1'
clocked at 19200 baud rate with one start bit and two stop bits, no parity
bit is used. 
As you can see the PIC makes our life easier, in order to see the raw
stream we only have to connect the circuit and attach a terminal to the
serial port, no particular driver is needed. The PIC we use is a PIC 16F84,
this microcontroller is cheap and easy to work with (its assembly has only
35 instructions), furthermore a programmer for setting up the chip can be
easily bought or assembled. If you want to build your own programmer a good
choice would be uJDM[6], it's one of the simplest PIC programmers available
(it is a variation of the famous JDM programmer).
At last we need to convert signals from the PIC to RS232 compatible signal
levels. This is needed because the PIC and other integrated circuits works
under TTL (Transistor to Transistor Logic - 0V/+5V), whereas serial port
signal levels are -12V/+12V. The easiest approach for converting the signal
is using a Maxim RS-232[7]. It is a specialized driver and receiver
integrated circuit used to convert between TTL logic levels and RS-232
compatible signal levels.
Here's the diagram of the setup:
                \   /
                 \ / 
                  |
                  |
                  |                     [ RDS - Demodulator ]