UI中的ECP功能之后，我们确定上面的SetObjectWorkflow描述了要在服务器端执行的一系列步骤（包括Powershell
cmdlet执行），以执行特定操作。
_ECP用户界面，显示ResetVirtualDirectory的配置选项。_
* * *
通过提交示例ResetVirtualDirectory请求，我们观察到Exchange服务器写入了一个关于VirtualDirectory的美化打印的配置到指定的路径，删除了VirtualDirectory，然后重新创建了该目录。该配置文件包含目录中的许多属性，并且可以使用任意扩展名写入到系统上的任何目录。请求和结果文件的屏幕截图如下所示.
http请求DDIService去重置OAB VirtualDirectory的示例:
    POST /ecp/DDI/DDIService.svc/SetObject?schema=ResetOABVirtualDirectory&msExchEcpCanary={csrf} HTTP/1.1
    Host: localhost
    Cookie: msExchEcpCanary={csrf};
    Content-Type: application/json
    {
      "identity": {
        "__type": "Identity:ECP",
        "DisplayName": "OAB (Default Web Site)",
        "RawIdentity": "cf64594f-d739-44a4-aa70-3fbd158625e2"
      },
      "properties": {
        "Parameters": {
          "__type": "JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel",
          "FilePathName": "C:\\VirtualDirectory.aspx"
        }
      }
    }
_DDIService导出的文件显示了VirtualDirectory的所有属性。_
* * *
_ECP Web UI显示VirtualDirectory的可编辑参数。_
UI中公开了以下参数，用于编辑VirtualDirectory。值得注意的是，内部URL和外部URL在UI中公开，在XAML中作为参数描述，并在任意路径下写入文件中。这些因素的组合允许攻击者控制的输入到达任意路径，这是启用Webshell所必需的条件。
经过一些试验，我们确定服务器的内部/外部URL字段已部分验证。即服务器验证了URI方案，主机名，并强加了256个字节的最大长度。另外，服务器对有效负载中的任何百分号进行“百分比编码”（例如，“％”变为“％25”）。结果，像这样的经典ASPX代码块``被转换为``无效的代码块。但是，未对其他元字符（例如）进行编码，从而允许注入如下所示的URL：
    http://o/#
> PS.又是一个good trick！
重置VirtualDirectory后，此URL会嵌入到导出中，并保存到我们选择的路径中，从而允许在Exchange服务器上执行远程代码。
_使用webshell在受感染的Exchange服务器上执行命令。_
* * *
### 泄漏后端+域
完整的利用链需要Exchange服务器后端和域。在[Crowdstrike的有关攻击的博客文章中，](https://www.crowdstrike.com/blog/falcon-complete-stops-microsoft-exchange-server-zero-day-exploits/)他们发布了整个Internet上正在发生的攻击的完整日志。在此日志中，第一个调用一个/ rpc /端点：
_初始请求命中了Exchange公开的/ rpc /_
* * *
此初始请求必须是未经身份验证的，并且可能利用[HTTP](https://docs.microsoft.com/en-us/previous-versions/tn-archive/aa996225\(v=exchg.65)?redirectedfrom=MSDN)上的[RPC，](https://docs.microsoft.com/en-us/previous-versions/tn-archive/aa996225\(v=exchg.65)?redirectedfrom=MSDN)该[RPC](https://docs.microsoft.com/en-us/previous-versions/tn-archive/aa996225\(v=exchg.65)?redirectedfrom=MSDN)本质上通过端点公开了NTLM身份验证。HTTP上的RPC本身是一个相当复杂的协议，可以[通过Microsoft的开放规范计划对其进行详细介绍](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rpch/d49bfc93-1e8c-4741-ba49-56067e56314b)。
作为攻击者，我们有兴趣解析发送[NTLM协商消息](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b34032e5-3aae-4bc6-84c3-c6d80eadf7f2)后返回给我们的[NTLM质询](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/801a4681-8809-4be9-ab0d-61dcfe762786)[消息](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b34032e5-3aae-4bc6-84c3-c6d80eadf7f2)。该质询消息包含许多[AV_PAIR结构](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/83f5e789-660d-4781-8491-5f8c6641f75e)，[这些结构](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/83f5e789-660d-4781-8491-5f8c6641f75e)包含我们感兴趣的信息，特别是`MsvAvDnsComputerName`（后端服务器名称）和`MsvAvDnsTreeName`（域名）。  
[Impacket的](https://github.com/SecureAuthCorp/impacket)
[http.py](https://github.com/SecureAuthCorp/impacket/blob/master/impacket/http.py#L143)已经包含执行此协商以生成协商消息，然后将质询响应解析为AV_PAIR结构的代码。请求和响应最终看起来像：
    RPC_IN_DATA /rpc/rpcproxy.dll HTTP/1.1Host: frontend.exchange.contoso.comUser-Agent: MSRPCAccept: application/rpcAccept-Encoding: gzip, deflateAuthorization: NTLM TlRMTVNTUAABAAAABQKIoAAAAAAAAAAAAAAAAAAAAAA=Content-Length: 0Connection: close
    HTTP/1.1 401 UnauthorizedServer: Microsoft-IIS/8.5request-id: 72dce261-682e-4204-a15a-8055c0fd93d9Set-Cookie: ClientId=IRIFSCHPJ0YLFULO9MA; expires=Tue, 08-Mar-2022 22:48:47 GMT; path=/; HttpOnlyWWW-Authenticate: NTLM TlRMTVNTUAACAAAACAAIADgAAAAFAomiVN9+140SRjMAAAAAAAAAAJ4AngBAAAAABgOAJQAAAA9DAE8AUgBQAAIACABDAE8AUgBQAAEACABlAHgAVgBNAAQAIABjAG8AcgBwAC4AYwBvAG4AdABvAHMAbwAuAGMAbwBtAAMAKgBlAHgAVgBNAC4AYwBvAHIAcAAuAGMAbwBuAHQAbwBzAG8ALgBjAG8AbQAFACAAYwBvAHIAcAAuAGMAbwBuAHQAbwBzAG8ALgBjAG8AbQAHAAgA8EkBM20U1wEAAAAAWWW-Authenticate: NegotiateWWW-Authenticate: Basic realm="frontend.exchange.contoso.com"X-Powered-By: ASP.NETX-FEServer: frontendDate: Mon, 08 Mar 2021 22:48:47 GMTConnection: closeContent-Length: 0
可以使用Impacket解析base64编码的哈希，以显示泄漏的域信息。
_嵌入在WWW身份验证NTLM挑战中的泄漏的域信息_
恢复`AV_PAIR data`的编码为[Windows Unicode，](https://docs.microsoft.com/en-us/windows/win32/intl/unicode)并将特定映射`AV_ID`到值。`AV_IDs`是映射到特定内容的常量，例如，我们要获取3（后端主机名）和5（域）的字符串。
_AV_PAIR结构到计算数据中数字的映射_
* * *
此处发布的信息确定后端值为ex.corp.contoso.com，域为corp.contoso.com。这些是滥用前面讨论的SSRF漏洞所需的值。
### 课外工作
如其他地方所述，我们已省略某些漏洞利用细节，以防止漏洞利用。读者可以通过这种机制来利用任意用户对ECP端点进行身份验证的机制。一旦有足够的时间，我们将在后续博客中发布有关此问题的更多详细信息。
## 检测
Microsoft’s Threat Intel Center (MSTIC)
已经提供了出色[indicators](https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/)和[detection
scripts](https://github.com/microsoft/CSS-Exchange/tree/main/Security)，任何配备内部Exchange服务器的人都应该使用。为了确定是否存在妥协，我们建议SOC，MSSP和MDR采取以下步骤：
  1. 确保所有端点保护产品均已更新并正常运行。尽管漏洞利用本身可能尚未向检测引擎发布大量的IoC，但可以使用现代工具轻松检测漏洞利用后的活动。
  2. 在所有Exchange服务器上，从上面链接的Microsoft github运行“ TestProxyLogon.ps1”脚本。根据我们对利用漏洞进行武器化的经验，脚本应检测出任何被利用系统的证据。
  3. 仔细检查有问题的服务器的配置，计划的任务，自动运行等，这些都是攻击者在获得初始访问权限后可能隐藏的所有位置。确保为Exchange服务器启用了“审核过程创建”审核策略和PowerShell日志记录，并检查可疑的命令和脚本。差异应尽快得到验证，报告和补救。
在继续探索这些漏洞的过程中，我们打算发布其他材料，以检测您所在环境中此漏洞的任何证据。
## 实施漏洞利用
[Sean Metcalf](https://adsecurity.org/?p=4119)和[Trimarc
Security的](https://www.trimarcsecurity.com/single-post/2019/02/12/Mitigating-Exchange-Permission-Paths-to-Domain-Admins-in-Active-Directory)先前工作详细介绍了本地Exchange安装通常随附高级权限。
通过这种方式进行配置后，控制Exchange服务器的攻击者可以轻松地将此访问权限用于ACL滥用引起的整个域范围的损害。受影响的环境可以通过检查应用于根域对象的ACL并观察易受攻击的Exchange资源是否属于这些组来确定是否应怀疑站点范围的损害。我们在Trimarc帖子中对PowerShell片段进行了修改，以更具体地筛选Exchange
Windows权限和Exchange受信任子系统组。如果您的环境已将Exchange资源添加到自定义组或其中的自定义组，则需要相应地调整脚本。
    import-module ActiveDirectory
    $ADDomain = ''
    $DomainTopLevelObjectDN = (Get-ADDomain $ADDomain).DistinguishedName
    Get-ADObject -Identity $DomainTopLevelObjectDN -Properties * | select -ExpandProperty nTSecurityDescriptor | select -ExpandProperty Access | select IdentityReference,ActiveDirectoryRights,AccessControlType,IsInherited | Where-Object {($_.IdentityReference -like "*Exchange Windows Permissions*") -or ($_.IdentityReference -like "*Exchange Trusted Subsystem*")} | Where-Object {($_.ActiveDirectoryRights -like "*GenericAll*") -or ($_.ActiveDirectoryRights -like "*WriteDacl*")}
## 致谢
我们的研究过程依赖于原始研究人员，事件响应者和其他致力于复现这些错误的安全研究人员已发表的作品，而不是凭空复现。我们的感谢和欣赏的是：
  * [DEVCORE-](https://devco.re/)发现了原始Bug
  * [Volexity-](http://volexity.com/)在野外发现了bug
  * [@ 80vul-](https://twitter.com/80vul/)第一个复现漏洞利用链的用户
  * [Rich Warren（@buffaloverflow）-](http://twitter.com/buffaloverflow)在调查过程中与我们积极合作的人
  * [Crowdstrike-](https://www.crowdstrike.com/)发表了有关野外主动攻击的其他信息
  * [微软-](https://www.microsoft.com/)迅速发布了指示和补丁
> 本文为翻译文章，原文链接: exploit/>