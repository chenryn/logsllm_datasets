# Jekyll on iOS: When Benign Apps Become Evil

**Authors:**
- Tielei Wang
- Kangjie Lu
- Long Lu
- Simon P. Chung
- Wenke Lee

**Affiliation:**
School of Computer Science, College of Computing, Georgia Institute of Technology

**Contact:**
{tielei.wang, kangjie.lu, long, pchung, wenke}@cc.gatech.edu

**Abstract:**
Apple employs mandatory app review and code signing mechanisms to ensure that only approved apps can run on iOS devices. In this paper, we introduce a novel attack method that effectively circumvents both these security measures. Our method allows attackers to conceal malicious behavior, which would otherwise lead to the app being rejected during the Apple review process. Once the app is installed on a user's device, it can be remotely instructed to execute the intended attacks.

The core idea is to make the apps remotely exploitable and then introduce malicious control flows by rearranging signed code. Since these new control flows do not exist during the app review, such apps, referred to as Jekyll apps, can pass undetected through the review process and easily obtain Apple’s approval.

We implemented a proof-of-concept Jekyll app and successfully published it in the App Store. We remotely launched various attacks on a controlled group of devices that had installed the app. The results show that, despite running within the iOS sandbox, the Jekyll app can perform numerous malicious tasks, including stealthily posting tweets, taking photos, stealing device identity information, sending emails and SMS, attacking other apps, and even exploiting kernel vulnerabilities.

## 1. Introduction

Apple iOS is one of the most popular and advanced operating systems for mobile devices. By the end of June 2012, Apple had sold 400 million iOS devices, such as iPhones, iPads, and iPod touches. Despite its popularity, only a few malicious apps have been discovered, primarily due to the advanced security architecture of iOS and the strict regulations of the App Store.

In addition to standard security features like Address Space Layout Randomization (ASLR), Data Execution Prevention (DEP), and Sandboxing, iOS enforces mandatory App Review and code signing mechanisms. App Review inspects every app submitted by third parties in binary form and only allows it to enter the App Store if it complies with the App Store's regulations. The code signing mechanism further prohibits unsigned code from running on iOS devices, ensuring that all third-party apps must be approved by Apple and cannot be modified after approval.

According to the official App Review guidelines, developers should expect their apps to undergo thorough inspection for any possible violations. Many reasons can lead to app rejections, such as data theft and the use of private APIs reserved for system apps. Although the technical details of the review process are largely unknown, it is believed that this selective and centralized app distribution model significantly increases the difficulty and cost for malicious or ill-intended apps to reach end users.

In this paper, we present a new attack method that targets the App Store reviewing process and the code signing mechanism. Using this method, attackers can create malicious or term-violating apps and still publish them on the App Store, thereby opening new attack surfaces on iOS devices. Our attack does not assume specific details about how Apple reviews apps but highlights the theoretical difficulties faced by any known methods to analyze programs. By demonstrating the power of this practical attack, we highlight the shortcomings of the pre-release review approach and call for more runtime monitoring mechanisms to protect iOS users in the future.

The key idea behind our attack is to plant remotely exploitable vulnerabilities (i.e., backdoors) in a normal app, decompose the malicious logic into small code gadgets, and hide them under legitimate functionalities. After the app passes the App Review and is installed on an end user's device, the attacker can remotely exploit the planted vulnerabilities and assemble the malicious logic at runtime by chaining the code gadgets together.

Figure 1 illustrates the high-level concept. On the left is the app's original control flow graph (CFG) as observed during the app review process, without the planted vulnerability being exploited. On the right is the effective control flow graph exhibited during runtime, which differs from the left in the new program paths introduced at runtime by the remote attackers. Even if the vetting process could check all possible paths in the left CFG, it cannot discover the malicious logic that is only assembled at runtime.

Apps constructed in this manner appear benign but can carry out malicious actions when instructed; we call them Jekyll apps. By carefully designing the vulnerabilities and crafting the gadgets, Jekyll apps can reliably pass the app review process and open up new attack surfaces on iOS devices. Specifically, an attacker can achieve the following general tasks via Jekyll apps:

1. **Stealthy Abuse of User Privacy and Device Resources:** Jekyll apps can abuse private APIs, which provide unrestricted access to sensitive resources and are intended for Apple's internal use only. Explicit use of private APIs almost always gets an app rejected by the App Store. However, Jekyll apps can dynamically load, locate, and implicitly invoke private APIs, thus bypassing review checks.

2. **Exploitation of Kernel Vulnerabilities:** Although the sandboxing policy in iOS limits the possibility and impact of exploiting kernel vulnerabilities, certain attacks are still effective against vulnerable device drivers (e.g., IOKit drivers).

3. **Attacks on Other Apps:** Jekyll apps can serve as a trampoline to attack other apps. For example, once new vulnerabilities are found in Mobile Safari, an attacker can set up a malicious webpage, use the Jekyll app to direct the browser to visit the booby-trapped website, and compromise the browser app. Given the high privileges granted to Mobile Safari, the compromised browser can facilitate more powerful attacks, such as untethered jailbreaks.

We have implemented a proof-of-concept Jekyll app and submitted it to the App Store. The app successfully passed Apple’s review despite the hidden vulnerabilities and code gadgets. Following ethical hacking practices, we immediately removed the app from the App Store once a group of experiment devices under our control had downloaded it. The download statistics provided by Apple confirmed that the app had never been downloaded by any other users. By exploiting the vulnerabilities and chaining the planted gadgets, we remotely launched many malicious operations on our experiment devices, as summarized in Table 1.

In summary, the main contributions of our work are:

- We propose a novel method to generate iOS apps that can pass App Review and synthesize new control flows as instructed remotely during runtime, without violating code signing. We call such malicious apps Jekyll apps.
- We are the first to propose a dynamic analysis technique to discover the private APIs used to post tweets, send emails, and send SMS without user consent on iOS. We incorporate these attacks, along with a set of previously known iOS attacks, into a Jekyll app to demonstrate its versatility.
- We successfully published a proof-of-concept Jekyll app in the Apple App Store and later launched remote attacks on a controlled group.
- We demonstrate that the security strategy of solely relying on pre-install review, as currently followed by the Apple App Store, is ineffective against Jekyll apps and similar attacks. We discuss and advocate for runtime security measures as a necessary step in advancing iOS security.

The rest of the paper is organized as follows. Section 2 introduces the background. Section 3 presents a motivating example and describes the design of our attack scheme. Section 4 demonstrates some of the malicious operations that can be carried out by Jekyll apps. Section 5 provides implementation details, and Section 6 compares our research to related work. Section 7 discusses potential countermeasures against our attack, and Section 8 concludes the paper.

## 2. Background

### 2.1 iOS Security

iOS provides a rich set of security features. We briefly introduce the related exploit mitigation mechanisms here. Interested readers are referred to [31, 38] for the overall security architecture of iOS.

**Data Execution Prevention (DEP) and Address Space Layout Randomization (ASLR):**
Apple introduced DEP in iOS 2.0 and ASLR in iOS 4.3. DEP is based on the NX (eXecute Never) bit supported by the ARM architecture, and the kernel prevents third-party apps from requesting memory pages that are writable and executable simultaneously. This prevents traditional code injection attacks. ASLR randomizes a process’s memory layout, making it difficult for attackers to launch return-to-libc-based or return-oriented programming-based attacks. However, ASLR in iOS only enforces module-level randomization, meaning executable modules are randomized, but not individual functions within them.