title:Jekyll on iOS: When Benign Apps Become Evil
author:Tielei Wang and
Kangjie Lu and
Long Lu and
Simon P. Chung and
Wenke Lee
Jekyll on iOS: When Benign Apps Become Evil
Tielei Wang, Kangjie Lu, Long Lu, Simon Chung, and Wenke Lee,  
Georgia Institute of Technology
Open access to the Proceedings of the 22nd USENIX Security Symposium is sponsored by USENIXThis paper is included in the Proceedings of the 22nd USENIX Security Symposium.August 14–16, 2013 • Washington, D.C., USAISBN 978-1-931971-03-4Jekyll∗ on iOS: When Benign Apps Become Evil
Tielei Wang, Kangjie Lu, Long Lu, Simon Chung, and Wenke Lee
School of Computer Science, College of Computing, Georgia Institute of Technology
{tielei.wang, kangjie.lu, long, pchung, wenke}@cc.gatech.edu
Abstract
Apple adopts the mandatory app review and code sign-
ing mechanisms to ensure that only approved apps can
run on iOS devices.
In this paper, we present a novel
attack method that fundamentally defeats both mecha-
nisms. Our method allows attackers to reliably hide ma-
licious behavior that would otherwise get their app re-
jected by the Apple review process. Once the app passes
the review and is installed on an end user’s device, it can
be instructed to carry out the intended attacks.
The key idea is to make the apps remotely exploitable
and subsequently introduce malicious control ﬂows by
rearranging signed code. Since the new control ﬂows
do not exist during the app review process, such apps,
namely Jekyll apps, can stay undetected when reviewed
and easily obtain Apple’s approval.
We implemented a proof-of-concept Jekyll app and
successfully published it in App Store. We remotely
launched the attacks on a controlled group of devices
that installed the app. The result shows that, despite run-
ning inside the iOS sandbox, Jekyll app can successfully
perform many malicious tasks, such as stealthily posting
tweets, taking photos, stealing device identity informa-
tion, sending email and SMS, attacking other apps, and
even exploiting kernel vulnerabilities.
1
Introduction
Apple iOS is one of the most popular and advanced op-
erating systems for mobile devices. By the end of June
2012, Apple had sold 400 million iOS devices [30], such
as iPhone, iPad and iPod touch. Despite the tremendous
popularity, in the history of iOS, only a handful of ma-
licious apps have been discovered [24]. This is mainly
attributed to the advanced security architecture of iOS
and the strict regulations of the App Store.
∗Jekyll is a character with dual personalities from the novel The
Strange Case of Dr. Jekyll and Mr. Hyde.
In addition to the standard security features like Ad-
dress Space Layout Randomization (ASLR), Data Exe-
cution Prevention (DEP), and Sandboxing, iOS enforces
the mandatory App Review and code signing mecha-
nisms [31]. App Review inspects every app submitted
by third parties (in binary form) and only allows it to
enter the App Store if it does not violate App Store’s reg-
ulations [5]. To further prohibit apps distributed through
channels other than the App Store (i.e., unsigned apps),
the code signing mechanism disallows unsigned code
from running on iOS devices. As a result, all third-party
apps running on iOS devices (excluding jailbroken de-
vices [48]) have to be approved by Apple and cannot be
modiﬁed after they have obtained the approval.
According to the ofﬁcial App Review guidelines [5],
developers should expect their apps to go through a thor-
ough inspection for all possible term violations. Dur-
ing this process, many reasons can lead to app rejections,
such as stealing data from users and using private APIs
reserved for system apps. Although the technical de-
tails of the review process remain largely unknown, it is
widely believed that such a selective and centralized app
distribution model has signiﬁcantly increased the difﬁ-
culty and cost for malicious or ill-intended apps to reach
end users.
In this paper, we present a new attack method against
the App Store reviewing process and the code signing
mechanism. Using this method, attackers can create ma-
licious or term-violating apps and still be able to publish
them on App Store, which in turn open up new attack sur-
faces on iOS devices. We stress that our attack does not
assume any speciﬁcs about how Apple reviews apps, but
targets theoretical difﬁculties faced by any known meth-
ods to analyze programs. By demonstrating the power
of this practical attack, we highlight the shortcomings of
the pre-release review approach and call for more run-
time monitoring mechanisms to protect iOS users in the
future.
The key idea behind our attack is that, instead of sub-
USENIX Association  
22nd USENIX Security Symposium  559
1
ways gets an app rejected by App Store [4]. However,
Jekyll apps can dynamically load, locate, and implicitly
invoke the private APIs and thus reliably bypass the re-
view checks. Comparing with simple obfuscation tech-
niques (e.g., [7, 23, 25]), our approach hides the usage
of private APIs in a way that is more resilient to non-
trivial code analysis — without correctly triggering the
planted vulnerabilities and arranging the code gadgets,
the invocation of private APIs never appears in the code
and execution of Jekyll apps.
Second, Jekyll apps open a window for attackers to ex-
ploit vulnerabilities in kernel space. Although the sand-
boxing policy in iOS limits the possibility and impact of
exploiting kernel vulnerabilities [22] by third-party apps,
certain attacks are still effective against vulnerable de-
vice drivers (i.e., IOKit drivers [49]).
Third, Jekyll apps also serve as a trampoline to attack
other apps. On iOS, by requesting a URL, an app can
launch another app that has registered to handle that URL
scheme. However, this simpliﬁed IPC (Inter-process
communication) mechanism may facilitate inter-app at-
tacks. For instance, once new vulnerabilities have been
found in Mobile Safari (the built-in web browser in iOS),
an attacker can set up a malicious webpage exploiting
such vulnerabilities, use the Jekyll app to direct the Mo-
bile Safari to visit the booby-trapped website, and even-
tually compromise the browser app. Given the high privi-
leges granted to Mobile Safari, the compromised browser
will in turn provide the stepping stone for more power-
ful attacks, such as untethered jailbreak, as shown by the
JailbreakMe attack [1] on old versions of iOS.
Attack Type
Abuse Device Resources
Attack Kernel
Attack Other Apps
Attack Description
Sending SMS
Sending Email
Posting Tweet
Abusing Camera
Dialing
Manipulating Bluetooth
Stealing Device Info
Rebooting system
Crashing Mobile Safari
Affected Version
iOS 5.x
iOS 5.x
iOS 5.x & 6.x
iOS 5.x & 6.x
iOS 5.x & 6.x
iOS 5.x & 6.x
iOS 5.x & 6.x
iOS 5.x
iOS 5.x & i6.x
Table 1: Attack summary on iPhone
We have implemented a proof-of-concept Jekyll app
and submitted it to the App Store. The app success-
fully passed Apple’s review despite the hidden vulner-
abilities and code gadgets that can be assembled to carry
out malicious logic. Following the ethical hacking prac-
tice, we immediately removed the app from App Store
once a group of experiment devices of our control had
downloaded it. The download statistic provided by Ap-
ple later conﬁrmed that the app had never been down-
loaded by any other users. By exploiting the vulnera-
bilities and chaining the planted gadgets in the app, we
CFG exhibited in vetting process. Red
node represents the vulnerabilities.
Dynamic CFG in victim’s device after
exploiting vulnerabilities.
Figure 1: High Level Intuition
mitting an app that explicitly contains malicious func-
tionalities to Apple,
the attacker plants remotely ex-
ploitable vulnerabilities (i.e., backdoor) in a normal app,
decomposes the malicious logic into small code gadgets
and hides them under the cover of the legitimate func-
tionalities. After the app passes the App Review and
lands on the end user device, the attacker can remotely
exploit the planted vulnerabilities and assemble the ma-
licious logic at runtime by chaining the code gadgets to-
gether.
Figure 1 shows the high level idea. On the left is the
app’s original control ﬂow graph (CFG), which is what
can be observed during the app review process, with-
out the planted vulnerability being exploited.
In com-
parison, on the right is the effective control ﬂow graph
the same app will exhibit during runtime, which differs
from the left in the new program paths (represented by
the dotted paths) introduced at runtime by the remote at-
tackers (i.e., app developers). Since attackers can con-
struct malicious functionalities through dynamically in-
troducing new execution paths, even if the vetting pro-
cess could check all possible paths in the left CFG (i.e.,
100% path coverage), it cannot discover the malicious
logic that is only to be assembled at runtime as per at-
tacker’s commands. Apps so constructed bear benign
looks and yet are capable of carrying out malicious logic
when instructed; we call them Jekyll apps. By care-
fully designing the vulnerabilities and crafting the gad-
gets, Jekyll apps can reliably pass app review process
and open up a new attack surface on iOS devices when
installed. Speciﬁcally, an attacker can achieve the fol-
lowing general tasks via Jekyll apps:
First, Jekyll apps offer an approach to stealthily abuse
user privacy and device resources, for instance, via pri-
vate APIs1, which may provide unrestricted access to
certain sensitive resources and are intended for Apple’s
internal use only. Explicit use of private APIs almost al-
1Private APIs are undocumented and often security-critical APIs on
iOS, see Section 2.2 for details.
560  22nd USENIX Security Symposium 
USENIX Association
2
remotely launched many malicious operations on our ex-
periment devices, as summarized in Table 1. Even on
iOS 6.1.2, the latest version of iOS at the time of our ex-
periments, the Jekyll app can abuse the camera device to
recode videos, post tweets, steal device identity informa-
tion such as IMEI (the unique device identiﬁer), manip-
ulate the bluetooth device, attack Mobile Safari, and dial
arbitrary number. We made a full disclosure of our attack
scheme to Apple in March 2013 and have since been in
correspondence with Apple.
In summary, the main contributions of our work are as
follows:
• We propose a novel method to generate iOS apps
that can pass App Review and synthesize new con-
trol ﬂows as instructed remotely during runtime,
without violating code signing. We call such mali-
cious apps Jekyll apps. Given that arbitrary control
ﬂows can be introduced to such apps at runtime, the
code signing mechanism on iOS is totally defense-
less against Jekyll apps.
• We are the ﬁrst to propose a dynamic analysis tech-
nique to discover the private APIs used to post
tweets, send email, and send SMS without user’s
consent on iOS. We incorporate these attacks, along
with a set of previously known iOS attacks, into a
Jekyll app to show its versatility.
• We successfully publish a proof-of-concept Jekyll
app in Apple App Store and later launch remote at-
tacks to a controlled group.
• We demonstrate that the security strategy to solely
rely on pre-install review, as currently followed by
Apple App Store, is ineffective against Jekyll apps
and similar attacks. We discuss and advocate run-
time security measures as a necessary step in ad-
vancing iOS security.
The rest of the paper is organized as follows. Sec-
tion 2 introduces the background. Section 3 presents a
motivating example and describes the design of our at-
tack scheme. Section 4 demonstrates some of the mali-
cious operations that can be carried out by Jekyll apps.
Section 5 gives the implementation details and Section 6
compares our research to related work. Section 7 dis-
cusses the potential countermeasures against our attack
and Section 8 concludes the paper.
2 Background
iOS Security
2.1
iOS provides a rich set of security features. We brieﬂy in-
troduce the related exploit mitigation mechanisms here.
Interested readers are referred to [31, 38] for the overall
security architecture of iOS.
DEP and ASLR. Apple introduced the Data Exe-
cution Prevention (DEP) mechanism in iOS 2.0 and
later the Address Space Layout Randomization (ASLR)
mechanism in iOS 4.3 [21]. The DEP mechanism in
iOS is based on the NX (eXecute Never) bit supported
by the ARM architecture and the kernel prevents third
party apps from requesting memory pages that are write-
able and executable at the same time. Since data pages
such as the stack and heap are marked non-executable
and code pages are marked executable but non-writeable,
DEP prevents the traditional code injection attacks that
need to write payloads into memory and execute them.
ASLR randomizes a process’s memory layout.
If a
third-party app is compiled as a position-independent ex-
ecutable (PIE), the locations of all memory regions in its
process’s address space, including the main executable,
dynamic libraries, stack, and heap, are unpredictable. As
an important complementary to DEP, ASLR makes it
very difﬁcult for attackers to launch return-to-libc based
or return-oriented programming based attacks (see Sec-
tion 2.3). However, ASLR in iOS only enforces the mod-
ule level randomization, that is, executable modules are