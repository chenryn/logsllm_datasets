tiﬁcate is not valid for that domain (its CommonName is set to
mom.com), and it is setting cookies non-HTTPOnly, and not
Secure. Interestingly, it is possible to login to the site both
in HTTPS, and in plain-text HTTP.
In Figure 4, we show the cumulative distribution func-
tion for the inclusions we recorded. We can see that low-
maintenance domains often include JavaScript libraries from
low-maintenance providers. High-maintenance domains, in-
stead, tend to prefer high-maintenance providers, showing
that they are indeed concerned about the providers they in-
clude. For instance, we can see that the JavaScript libraries
provided by sites with the worst maintenance scores, are in-
cluded by over 60% of the population of low-maintenance
sites, versus less than 12% of the population of sites with
high-maintenance scores. While this percentage is ﬁve times
smaller than the one of low-maintenance sites, still, about
one out of four of their inclusions come from providers with
a low maintenance score, which are potential “‘weak spots”’
in their security perimeter. For example, criteo.com is an
advertising platform that is remotely included in 117 of the
top 10,000 Alexa domains, including ebay.de and sisal.it,
the society that holds the state monopoly on bets and lot-
tery in Italy. criteo.com has an implementation of SSL that
supports weak ciphers, and a weak Diﬃe-Hellman ephemeral
741oper’s erroneous understanding of the way in which Java-
Script is fetched and executed. The error introduced is not
immediately apparent because, often times, these scripts are
developed and tested on the developer’s local machine (or
network), which also hosts the web server.
The set of domains hosting pages vulnerable to cross-user
and cross-network scripting, included popular domains such
as virginmobileusa.com, akamai.com, callofduty.com and
gc.ca.
4.2 Stale Domain-name-based Inclusions
Whenever a domain name expires, its owner may choose
not to renew it without necessarily broadcasting this deci-
sion to the site’s user-base. This becomes problematic when
such a site is providing remote JavaScript scripts to sites reg-
istered under diﬀerent domains. If the administrators of the
including sites do not routinely check their sites for errors,
they will not realize that the script-providing site stopped
responding. We call these inclusions “stale inclusions”. Stale
inclusions are a security vulnerability for a site, since an at-
tacker can register the newly-available domain and start pro-
viding all stale JavaScript inclusion requests with malicious
JavaScript. Since the vulnerable pages already contain the
stale script inclusions, an attacker does not need to interact
with the victims or convince them to visit a speciﬁc page,
making the attack equivalent to a stored XSS.
To quantify the existence of stale JavaScript inclusions, we
ﬁrst compiled a list of all JavaScript-providing domains that
were discovered through our large-scale crawling experiment.
From that list, we ﬁrst excluded all domains that were part
of Alexa’s top one million web sites list. The remaining 4,225
domains were queried for their IP address and the ones that
did not resolve to an address were recorded. The recorded
ones were then queried in an online WHOIS database. When
results for a domain were not available, we attempted to
register it on a popular domain-name registrar.
The ﬁnal result of this process was the identiﬁcation of
56 domain names, used for inclusion in 47 of the top 10,000
Internet web sites, that were, at the time of our experiments,
available for registration. By manually reviewing these 56
domain names, we realized that in 6 cases, the developers
mistyped the JavaScript-providing domain. These form an
interesting security issue, which we consider separately in
Section 4.4.
Attackers could register these domains to steal credentials
or to serve malware to a large number of users, exploiting
the trust that the target web application puts in the hi-
jacked domain. To demonstrate how easy and eﬀective this
attack is, we registered two domains that appear as stale
inclusions in popular web sites, and make them resolve to
our server. We recorded the Referer, source IP address,
and requested URL for every HTTP request received for
15 days. We minimized the inconvenience that our study
might have caused by always replying to HTTP requests
with a HTML-only 404 Not Found error page, with a brief
explanation of our experiment and how to contact us. Since
our interaction with the users is limited to logging the three
aforementioned pieces of data, we believe there are no ethi-
cal implications in this experiment. In particular, we regis-
tered blogtools.us, a domain included on goldprice.org,
which is a web application that monitors the price of gold
and that ranks 4,779th in the US (according to Alexa). Pre-
viously, blogtools.us was part of a platform to create RSS
Figure 4: Risk of including third-party providers,
included in high and low maintenance web applica-
tions.
key exchange of 512 bits. Another example is levexis.com,
a marketing platform, which is included in 15 of the top
10,000 Alexa websites, including lastminute.com, and has
an invalid SSL certiﬁcate.
4. ATTACKS
In this section, we describe four types of vulnerabilities
that are related to unsafe third-party inclusion practices,
which we encountered in the analysis of the top 10,000 Alexa
sites. Given the right conditions, these vulnerabilities enable
an attacker to take over popular web sites and web applica-
tions.
4.1 Cross-user and Cross-network Scripting
In the set of remote script inclusions resulting from our
large-scale crawling experiment, we discovered 133 script
inclusions where the “src” attribute of the script tag was
requesting a JavaScript ﬁle from localhost or from the
127.0.0.1 IP address. Since JavaScript is a client-side lan-
guage, when a user’s browser encounters such a script tag, it
will request the JavaScript ﬁle from the user’s machine. In-
terestingly, 131 out of the 133 localhost inclusions speciﬁed
a port (e.g., localhost:12345), which was always greater
than 1024 (i.e., a non-privileged port number). This means
that, in a multiuser environment, a malicious user can set
up a web server, let it listen to high port numbers, and
serve malicious JavaScript whenever a script is requested
from localhost. The high port number is important be-
cause it allows a user to attack other users without requiring
administrator-level privileges.
In addition to connections to localhost, we found several
instances where the source of a script tag was pointing to a
private IP address (e.g., 192.168.2.2). If a user visits a site
with such a script inclusion, then her browser will search
for the JavaScript ﬁle on the user’s local network.
If an
attacker manages to get the referenced IP address assigned
to his machine, he will be able to serve malicious JavaScript
to the victim user.
We believe that both vulnerabilities result from a devel-
742blogtools.us
hbotapadmin.com
Intended domain
Actual domain
Visits
Including domains
Including pages
80,466
24
84
4,615
4
41
Table 5: Results from our experiment on expired
remotely-included domains
googlesyndication.com
googlesyndicatio.com
purdue.edu
purude.edu
worldofwarcraft.com
worldofwaircraft.com
lesechos.fr
onegrp.com
lessechos.fr
onegrp.nl
Table 6: Examples of mistyped domains found in
remote JavaScript inclusion tags
feeds. We also registered hbotapadmin.com, included in a
low-traﬃc page on hbo.com, which is an American cable tele-
vision network, ranking 1,411th in the US. hbotapadmin.com
was once owned by the same company, and its registration
expired in July 2010. The results of our experiment are
shown in Table 5. While hbotapadmin.com is being included
exclusively by HBO-owned domains, it is interesting to no-
tice that blogtools.us is still included by several lower-
ranking domains, such as happysurfer.com, even though
the service is not available anymore.
4.3 Stale IP-address-based Inclusions
As described in Section 2, some administrators choose to
include remote scripts by addressing the remote hosts, not
through a domain name but directly through an IP address.
While at ﬁrst this decision seems suboptimal, it is as safe as
a domain-name-based inclusion, as long as the IP address
of the remote machine is static or the including page is au-
tomatically updated whenever the IP address of the remote
server changes.
To assess whether one of these two conditions hold, we
manually visited all 299 pages performing an IP address-
based inclusion, three months after our initial crawl. In the
majority of cases, we recorded one of the following three sce-
narios: a) the same scripts were included, but the host was
now addressed through a domain name, b) the IP addresses
had changed or the inclusions were removed or c) the IP
addresses remained static. Unfortunately, in the last cate-
gory, we found a total of 39 IP addresses (13.04%) that had
not changed since our original crawl but at the same time,
were not providing any JavaScript ﬁles to the requests. Even
worse, for 35 of them (89.74%) we recorded a “Connection
Timeout,” attesting to the fact that there was not even a
Web server available on the remote hosts. This fact reveals
that the remote host providing the original scripts either
became unavailable or changed its IP address, without an
equivalent change in the including pages.
As in domain-name-based stale inclusions, these inclusions
can be exploited by an attacker who manages to obtain the
appropriate IP address. While this is deﬁnitely harder than
registering a domain-name, it is still a vulnerability that
could be exploited given an appropriate network conﬁgura-
tion and possibly the use of the address as part of a DHCP
address pool.
4.4 Typosquatting Cross-site Scripting (TXSS)
Typosquatting [17, 28] is the practice of registering do-
main names that are slight variations of the domains asso-
ciated with popular web sites. For instance, an individual
could register wikiepdia.org with the intent of capturing a
part of the traﬃc originally meant to go toward the popu-
lar Wikipedia website. The user that mistypes Wikipedia,
instead of getting a “Server not found” error, will now get a
page that is under the control of the owner of the mistyped
domain. The resulting page could be used for advertising,
brand wars, phishing credentials, or triggering a drive-by
download exploit against a vulnerable browser.
Traditionally, typosquatting always refers to a user mistyp-
ing a URL in her browser’s address bar. However, web de-
velopers are also humans and can thus mistype a URL when
typing it into their HTML pages or JavaScript code. Un-
fortunately, the damage of these mistakes is much greater
than in the previous case, since every user visiting the page
containing the typo will be exposed to data originating from
the mistyped domain. In Table 6, we provide ﬁve examples
of mistyped URLs found during our experiment for which
we could identify the intended domain.
As in the case of stale domain-names, an attacker can sim-
ply register these sites and provide malicious JavaScript to
all unintended requests. We observed this attack in the wild:
according to Google’s Safe Browsing, worldofwaircraft.
com has spread malware in January 2012. To prove the ef-
ﬁcacy of this attack, we registered googlesyndicatio.com
(mistyped googlesyndication.com), and logged the incom-
ing traﬃc. We found this domain because it is included
in leonardo.it, an Italian online newspaper (Alexa global
rank: 1,883, Italian rank: 56). Over the course of 15 days,
we recorded 163,188 unique visitors. Interestingly, we dis-
covered that this misspelling is widespread: we had visitors
incoming from 1,185 diﬀerent domains, for a total of 21,830
pages including this domain. 552 of the domains that in-
clude ours belong to blogs hosted on *.blogspot.com.br,
and come from the same snippet of code:
It seems that
bloggers copied that code from one another. This mistype
is also long living: We located a page containing the error,
http://www.oocities.org/br/dicas.html/, that is a mir-
ror of a Brazilian Geocities site made in October 2009.
5. COUNTERMEASURES
In this section, we review two techniques that a web appli-
cation can utilize to protect itself from malicious remotely-
included scripts. Speciﬁcally, we examine the eﬀectiveness
of using a coarse-grained JavaScript sandboxing system and
the option of creating local copies of remote JavaScript li-
braries.
5.1 Sandboxing remote scripts
Recognizing the danger of including a remote script, re-
searchers have proposed a plethora of client-side and server-
side systems that aim to limit the functionality of remotely-
included JavaScript libraries (see Section 6). The majority
of these countermeasures apply the principle of least privi-
lege to remotely-included JavaScript code. More precisely,
these systems attempt to limit the actions that can be per-
formed by a remotely-included script to the bare minimum.
743we modiﬁed to intercept HTTP traﬃc and inject instru-
mentation code into the passing HTML pages. This instru-
mentation code uses JavaScript’s setters and getters to
add wrappers to certain sensitive JavaScript functions and
DOM/BOM properties, allowing us to monitor their use.
The browser-provided on-demand stack-tracing functional-
ity, allowed us to determine, at the time of execution of our
wrappers, the chain of function calls that resulted in a spe-
ciﬁc access of a monitored resource. If a function, executed
by a remote script, was part of this chain, then we safely de-
duce that the script was responsible for the activity, either
by directly accessing our monitored resources or by assisting
the access of other scripts.
For instance, suppose that a web page loads a.js and
b.js as follows:
/* a . js */
f u n c t i o n myalert ( msg ) {
window . alert ( msg );
/* b . js */
myalert (" hello ");
/* stack trace */
b . js :1: myalert (...)
a . js :2: window . alert (...)

}




JS Action
Reading Cookies
document.write()
Writing Cookies
eval()
XHR
Accessing LocalStorage
Accessing SessionStorage
Geolocation
# of Top scripts
41
36
30
28
14
3
0
0
Table 7: JavaScript functionality used by the 100
most popularly included remote JavaScript ﬁles
The least-privilege technique requires, for each remotely-
included JavaScript ﬁle, a proﬁle describing which function-
ality is needed when the script is executed. This proﬁle can
be generated either through manual code inspection or by
ﬁrst allowing the included script to execute and then record-
ing all functions and properties of the Document Object
Model (DOM) and Browser Object Model (BOM) that the
script accessed. Depending on the sandboxing mechanism,
these proﬁles can be either coarse-grained or ﬁne-grained.
In a coarse-grained sandboxing system, the proﬁle-writer
instructs the sandbox to either forbid or give full access
to any given resource, such as forbidding a script to use
eval. Constrastingly, in a ﬁne-grained sandboxing system,
the proﬁle-writer is able to instruct the sandbox to give ac-
cess to only parts of resources to a remotely included script.
For instance, using ConScript [16], a proﬁle-writer can allow
the dynamic creation of all types of elements except iframes,
or allow the use of eval but only for the unpacking of JSON
data. While this approach provides signiﬁcantly more con-
trol over each script than a coarse-grained proﬁle, it also
requires more eﬀort to describe correct and exact proﬁles.
Moreover, each proﬁle would need to be updated, every time
that a remote script legitimately changes in a way that af-
fects its current proﬁle.
Static and dynamic analysis have been proposed as ways
of automatically constructing proﬁles for sandboxing sys-
tems, however, they both have limitations in the coverage
and correctness of the proﬁles that they can create. Static
analysis cannot account for dynamically-loaded content, and
dynamic analysis cannot account for code paths that were
not followed in the training phase of the analysis. More-
over, even assuming a perfect code-coverage during training,
it is non-trivial to automatically identify the particular use
of each requested resource in order to transit from coarse-
grained sandboxing to ﬁne-grained.
Given this complex, error-prone and time-consuming na-
ture of constructing ﬁne-grained proﬁles, we wanted to assess
whether coarse-grained proﬁles would suﬃciently constrain
popular scripts. To this end, we automatically generated
proﬁles for the 100 most included JavaScript ﬁles, discovered
through our crawl. If the privileges/resources required by le-
gitimate scripts include everything that an attacker needs to
launch an attack, then a coarse-grained sandboxing mecha-
nism would not be an eﬀective solution.
The actions performed by an included JavaScript ﬁle were
discovered using the following setup: A proxy was placed in
between a browser and the Internet. All traﬃc from the
web browser was routed through the web proxy [11], which




