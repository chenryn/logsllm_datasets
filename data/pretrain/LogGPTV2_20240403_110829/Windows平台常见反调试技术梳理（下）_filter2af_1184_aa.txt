# Windows平台常见反调试技术梳理（下）
|
##### 译文声明
本文是翻译文章，文章原作者 apriorit，文章来源：apriorit.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 反调试方法
###  软件及硬件断点
断点（breakpoint）是调试器提供的主要工具。我们可以使用断点在特定位置中断程序执行流程。断点有两种类型：
1、软件断点
2、硬件断点
如果没有断点支持，我们很难逆向分析目标软件。常用的反逆向分析技巧都会检测断点是否存在，因此我们也有对应的反调试方法。
**软件断点**
在IA-32架构中，有一条特殊的指令：带有`0xCC`操作码（opcode）的`int
3h`，这条指令可以用来调用调试句柄。当CPU执行这条指令时，就会产生中断，将控制权交给调试器。为了获得控制权，调试器需要将`int
3h`指令注入代码中。为了检测断点是否存在，我们可以计算函数的校验和。示例代码如下：
    DWORD CalcFuncCrc(PUCHAR funcBegin, PUCHAR funcEnd)
    {
        DWORD crc = 0;
        for (; funcBegin  u KERNELBASE!GetThreadContext L6
    KERNELBASE!GetThreadContext:
    7538d580 8bff            mov     edi,edi
    7538d582 55              push    ebp
    7538d583 8bec            mov     ebp,esp
    7538d585 ff750c          push    dword ptr [ebp+0Ch]
    7538d588 ff7508          push    dword ptr [ebp+8]
    7538d58b ff1504683975    call    dword ptr [KERNELBASE!_imp__NtGetContextThread (75396804)]
为了让代码读取`Dr0`–`Dr7`寄存器的值为0，我们需要重设`CONTEXT`结构中`ContextFlags`字段的`CONTEXT_DEBUG_REGISTERS`标志，然后在`NtGetContextThread`函数调用后恢复该值。至于`GetThreadContext`函数，该函数调用的是`NtSetContextThread`。绕过硬件断点检查并重置相关字段的代码如下所示：
    typedef NTSTATUS(NTAPI *pfnNtGetContextThread)(
        _In_  HANDLE             ThreadHandle,
        _Out_ PCONTEXT           pContext
        );
    typedef NTSTATUS(NTAPI *pfnNtSetContextThread)(
        _In_ HANDLE              ThreadHandle,
        _In_ PCONTEXT            pContext
        );
    pfnNtGetContextThread g_origNtGetContextThread = NULL;
    pfnNtSetContextThread g_origNtSetContextThread = NULL;
    NTSTATUS NTAPI HookNtGetContextThread(
        _In_  HANDLE              ThreadHandle,
        _Out_ PCONTEXT            pContext)
    {
        DWORD backupContextFlags = pContext->ContextFlags;
        pContext->ContextFlags &= ~CONTEXT_DEBUG_REGISTERS;
        NTSTATUS status = g_origNtGetContextThread(ThreadHandle, pContext);
        pContext->ContextFlags = backupContextFlags;
        return status;
    }
    NTSTATUS NTAPI HookNtSetContextThread(
        _In_ HANDLE              ThreadHandle,
        _In_ PCONTEXT            pContext)
    {
        DWORD backupContextFlags = pContext->ContextFlags;
        pContext->ContextFlags &= ~CONTEXT_DEBUG_REGISTERS;
        NTSTATUS status = g_origNtSetContextThread(ThreadHandle, pContext);   
        pContext->ContextFlags = backupContextFlags;
        return status;
    }
    void HookThreadContext()
    {
      HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
      g_origNtGetContextThread = (pfnNtGetContextThread)GetProcAddress(hNtDll, "NtGetContextThread");
      g_origNtSetContextThread = (pfnNtSetContextThread)GetProcAddress(hNtDll, "NtSetContextThread");
      Mhook_SetHook((PVOID*)&g_origNtGetContextThread, HookNtGetContextThread);
      Mhook_SetHook((PVOID*)&g_origNtSetContextThread, HookNtSetContextThread);
    }
###  SEH
SEH（Structured Exception
Handling）是操作系统向应用程序提供的一种机制，使应用程序可以接受关于异常情况的通知（如除以0、引用不存在的指针或者执行受限指令）。这种机制可以让我们在应用内部处理异常，无需操作系统介入。如果异常没有被处理，就会导致程序异常终止。开发者通常会在栈中找到指向SEH的指针，也就是SEH帧（SEH
frame）。当前SEH帧地址位于`FS`选择器（x64系统上是`GS`选择器）相对地址offset
0处，该地址指向的是`ntdll!_EXCEPTION_REGISTRATION_RECORD`结构：
    0:000> dt ntdll!_EXCEPTION_REGISTRATION_RECORD
       +0x000 Next             : Ptr32 _EXCEPTION_REGISTRATION_RECORD
       +0x004 Handler          : Ptr32 _EXCEPTION_DISPOSITION
当出现异常时，控制权将交给当前的SEH处理函数（handler）。根据所处的具体情况，这个SEH处理函数应当返回如下某个`_EXCEPTION_DISPOSITION`枚举值：
    typedef enum _EXCEPTION_DISPOSITION {
        ExceptionContinueExecution,
        ExceptionContinueSearch,
        ExceptionNestedException,
        ExceptionCollidedUnwind
    } EXCEPTION_DISPOSITION;
如果处理函数返回的是`ExceptionContinueSearch`，系统会从触发异常的指令处继续执行。如果处理函数不知道如何处理异常，就会返回`ExceptionContinueSearch`，然后系统会移到处理链中的下一个处理函数。我们可以在WinDbg调试器中使用`!exchain`命令浏览当前的异常处理链：
    0:000> !exchain
    00a5f3bc: AntiDebug!_except_handler4+0 (008b7530)
      CRT scope  0, filter: AntiDebug!SehInternals+67 (00883d67)
                    func:   AntiDebug!SehInternals+6d (00883d6d)
    00a5f814: AntiDebug!__scrt_stub_for_is_c_termination_complete+164b (008bc16b)
    00a5f87c: AntiDebug!_except_handler4+0 (008b7530)
      CRT scope  0, filter: AntiDebug!__scrt_common_main_seh+1b0 (008b7c60)
                    func:   AntiDebug!__scrt_common_main_seh+1cb (008b7c7b)
    00a5f8e8: ntdll!_except_handler4+0 (775674a0)
      CRT scope  0, filter: ntdll!__RtlUserThreadStart+54386 (7757f076)
                    func:   ntdll!__RtlUserThreadStart+543cd (7757f0bd)
    00a5f900: ntdll!FinalExceptionHandlerPad4+0 (77510213)
链中最后一个处理程序是系统分配的默默人处理程序。如果之前的所有处理程序都无法处理异常，那么系统处理程序就会访问注册表，获取如下键值：
    HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AeDebug
根据`AeDebug`表项的值，应用程序会被终止，或者控制权会交给调试器。调试器路径位于`Debugger`表项中（`REG_SZ`）。
当创建新进程时，系统会将主SEH帧（primary SEH
frame）加入其中。主SEH帧的处理程序同样由系统定义。主SEH帧大多数情况下位于分配给进程的内存栈的开头处。SEH处理程序函数原型如下所示：
    typedef EXCEPTION_DISPOSITION (*PEXCEPTION_ROUTINE) (
        __in struct _EXCEPTION_RECORD *ExceptionRecord,
        __in PVOID EstablisherFrame,
        __inout struct _CONTEXT *ContextRecord,
        __inout PVOID DispatcherContext
        );
如果应用程序正在被调试，那么在生成`int 3h`中断后，调试器将会拦截控制权。否则，控制权就会交给SEH处理函数。基于SEH帧的反调试代码如下所示：
    BOOL g_isDebuggerPresent = TRUE;
    EXCEPTION_DISPOSITION ExceptionRoutine(
        PEXCEPTION_RECORD ExceptionRecord,
        PVOID             EstablisherFrame,
        PCONTEXT          ContextRecord,
        PVOID             DispatcherContext)
    {
        g_isDebuggerPresent = FALSE;
        ContextRecord->Eip += 1;
        return ExceptionContinueExecution;
    }
    int main()
    {
        __asm
        {
            // set SEH handler
            push ExceptionRoutine
            push dword ptr fs:[0]
            mov  dword ptr fs:[0], esp
            // generate interrupt
            int  3h
            // return original SEH handler
            mov  eax, [esp]
            mov  dword ptr fs:[0], eax
            add  esp, 8
        }
        if (g_isDebuggerPresent)
        {
            std::cout Eip
+= 1`这一行代码会修改执行流中的下一条指令地址，这样就会执行在`int
3h`后的下一条指令。然后代码返回原始的SEH处理函数，清空栈，并且检查是否存在调试器。
**如何绕过**
虽然绕过SEH检查并没有通用的方法，但逆向分析人员还是可以使用某些技术来减轻工作量。我们来观察下关于SEH处理程序的调用栈：
    0:000> kn
     # ChildEBP RetAddr  
    00 0059f06c 775100b1 AntiDebug!ExceptionRoutine 
    01 0059f090 77510083 ntdll!ExecuteHandler2+0x26
    02 0059f158 775107ff ntdll!ExecuteHandler+0x24
    03 0059f158 003b11a5 ntdll!KiUserExceptionDispatcher+0xf
    04 0059fa90 003d7f4e AntiDebug!main+0xb5
    05 0059faa4 003d7d9a AntiDebug!invoke_main+0x1e
    06 0059fafc 003d7c2d AntiDebug!__scrt_common_main_seh+0x15a 
    07 0059fb04 003d7f68 AntiDebug!__scrt_common_main+0xd 
    08 0059fb0c 753e7c04 AntiDebug!mainCRTStartup+0x8
    09 0059fb20 7752ad1f KERNEL32!BaseThreadInitThunk+0x24
    0a 0059fb68 7752acea ntdll!__RtlUserThreadStart+0x2f
    0b 0059fb78 00000000 ntdll!_RtlUserThreadStart+0x1b
可以看到该调用来自于`ntdll!ExecuteHandler2`。这个函数是任何SEH处理函数的调用起点。我们可以在调用指令处设置断点：
    0:000> u ntdll!ExecuteHandler2+24 L3
    ntdll!ExecuteHandler2+0x24:
    775100af ffd1            call    ecx
    775100b1 648b2500000000  mov     esp,dword ptr fs:[0]
    775100b8 648f0500000000  pop     dword ptr fs:[0]
    0:000> bp 775100af
设置断点后，我们应该分析被调用的每个SEH处理函数的代码。如果反调试技术涉及到对SEH处理函数的多次调用，那么逆向人员应该花精力绕过这些函数。
###  VEH
VEH（Vectored Exception Handler）是从Windows
XP引入的一种机制，也是SEH的变种。VEH和SEH并不相互依赖，可以同时工作。当添加了新的VEH处理函数时，SEH链并不会受到影响，因为VEH处理函数存在于未导出的`ntdll!LdrpVectorHandlerList`变量中。VEH和SEH机制非常相似，唯一的区别在于系统使用已公开的函数来设置并删除VEH处理函数。添加并删除VEH处理函数的函数原型以及VEH处理函数本身的原型如下所示：
    PVOID WINAPI AddVectoredExceptionHandler(
        ULONG                       FirstHandler,
        PVECTORED_EXCEPTION_HANDLER VectoredHandler
    );
    ULONG WINAPI RemoveVectoredExceptionHandler(
        PVOID Handler
    );
    LONG CALLBACK VectoredHandler(
        PEXCEPTION_POINTERS ExceptionInfo
    );
    The _EXCEPTION_POINTERS structure looks like this:  
    typedef struct _EXCEPTION_POINTERS {
      PEXCEPTION_RECORD ExceptionRecord;
      PCONTEXT          ContextRecord;
    } EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;