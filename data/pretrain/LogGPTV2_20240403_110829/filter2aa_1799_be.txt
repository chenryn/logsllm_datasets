Section objects for mapped national language support (NLS) tables.
Object type objects for each object type created by ObCreateObjectTypeEx.
ALPC ports created to represent remote procedure call (RPC) endpoints when Local RPC 
(ncalrpc) is used. This includes explicitly named endpoints, as well as auto-generated 
COM (OLEXXXXX) port names and unnamed ports (LRPC-XXXX, where XXXX is a ran-
domly generated hexadecimal value).
Per-session namespace directory. (See the next subsection.)
If at least one Windows Server Container has been created, such as by using Docker for 
ID of the root job for the container), which then contain the object namespace local to 
that Silo.
Section objects used by virtualized instances (VAIL) of Win32k.sys and other window 
manager components on Windows 10X devices when launching legacy Win32 
applications. Also contains the Host object directory to represent the other side 
of the connection.
Windows subsystem ALPC ports, shared section, and window stations in the 
WindowStations object directory. Desktop Window Manager (DWM) also stores its 
ALPC ports, events, and shared sections in this directory, for non-Session 0 sessions. 
162 
CHAPTER 8 System mechanisms
Object names are global to a single computer (or to all processors on a multiprocessor computer), 
-
network. Server code on the remote Windows system calls the Object Manager and the I/O manager 
Because the kernel objects created by non-app-container processes, through the Win32 and UWP API, 
such as mutexes, events, semaphores, waitable timers, and sections, have their names stored in a single 
object directory, no two of these objects can have the same name, even if they are of a different type. This 
The issue with name collision may seem innocuous, but one security consideration to keep in mind 
when dealing with named objects is the possibility of malicious object name squatting. Although object 
current session namespace that can be set with the standard Windows API. This makes it possible for an 
unprivileged application running in the same session as a privileged application to access its objects, 
as described earlier in the object security subsection. Unfortunately, even if the object creator used 
squatting attack, in which the un-
privileged application creates the object before the privileged application, thus denying access to the 
legitimate application.
Windows exposes the concept of a private namespace to alleviate this issue. It allows user-mode 
applications to create object directories through the CreatePrivateNamespace API and associate these 
directories with boundary descriptors created by the CreateBoundaryDescriptor API, which are special 
data structures protecting the directories. These descriptors contain SIDs describing which security 
principals are allowed access to the object directory. In this manner, a privileged application can be 
sure that unprivileged applications will not be able to conduct a denial-of-service attack against its ob-
Additionally, a boundary descriptor can also contain an integrity level, protecting objects possibly 
belonging to the same user account as the application based on the integrity level of the process. (See 
Chapter 7 of Part 1 for more information on integrity levels.)
One of the things that makes boundary descriptors effective mitigations against squatting attacks 
is that unlike objects, the creator of a boundary descriptor must have access (through the SID and 
integrity level) to the boundary descriptor. Therefore, an unprivileged application can only create an 
unprivileged boundary descriptor. Similarly, when an application wants to open an object in a private 
namespace, it must open the namespace using the same boundary descriptor that was used to create 
it. Therefore, a privileged application or service would provide a privileged boundary descriptor, which 
would not match the one created by the unprivileged application.
CHAPTER 8 System mechanisms
163
EXPERIMENT: Looking at the base named objects and private objects
You can see the list of base objects that have names with the WinObj tool from Sysinternals or 
with WinObjEx64. However, in this experiment, we use WinObjEx64 because it supports addi-
tional object types and because it can also show private namespaces. Run Winobjex64.exe, and 
click the BaseNamedObjects node in the tree, as shown here:
The named objects are listed on the right. The icons indicate the object type:
I 
Mutexes are indicated with a stop sign.
I 
I 
Events are shown as exclamation points.
I 
I 
Symbolic links have icons that are curved arrows.
I 
I 
Power/network plugs represent ALPC ports.
I 
Timers are shown as Clocks.
I 
Other icons such as various types of gears, locks, and chips are used for other object types.
EXPERIMENT: Looking at the base named objects and private objects
You can see the list of base objects that have names with the WinObj tool from Sysinternals or 
with WinObjEx64. However, in this experiment, we use WinObjEx64 because it supports addi-
tional object types and because it can also show private namespaces. Run Winobjex64.exe, and 
click the BaseNamedObjects node in the tree, as shown here:
The named objects are listed on the right. The icons indicate the object type:
I
Mutexes are indicated with a stop sign.
I
I
Events are shown as exclamation points.
I
I
Symbolic links have icons that are curved arrows.
I
I
Power/network plugs represent ALPC ports.
I
Timers are shown as Clocks.
I
Other icons such as various types of gears, locks, and chips are used for other object types.
164 
CHAPTER 8 System mechanisms
Now use the Extras menu and select Private Namespaces
shown here: 
mutex is part of the LoadPerf boundary), and the SID(s) and integrity level associated with it (in 
this case, no explicit integrity is set, and the SID is the one for the Administrators group). Note 
that for this feature to work, you must have enabled kernel debugging on the machine the tool is 
running on (either locally or remotely), as WinObjEx64 uses the WinDbg local kernel debugging 
driver to read kernel memory.
Now use the Extras menu and select Private Namespaces
shown here: 
mutex is part of the LoadPerf boundary), and the SID(s) and integrity level associated with it (in 
this case, no explicit integrity is set, and the SID is the one for the Administrators group). Note 
that for this feature to work, you must have enabled kernel debugging on the machine the tool is 
running on (either locally or remotely), as WinObjEx64 uses the WinDbg local kernel debugging 
driver to read kernel memory.
CHAPTER 8 System mechanisms
165
EXPERIMENT: Tampering with single instancing
of single-instancing enforcement through named objects. Notice that when launching the 
Wmplayer.exe executable, Windows Media Player appears only once—every other launch simply 
results in the window coming back into focus. You can tamper with the handle list by using 
1.
Launch Windows Media Player and Process Explorer to view the handle table (by click-
ing View, Lower Pane View, and then Handles). You should see a handle whose name
2.
Right-click the handle and select Close Handle
that Process Explorer should be started as Administrator to be able to close a handle in
another process.
3.
Run Windows Media Player again. Notice that this time a second process is created.
4.
Go ahead and play a different song in each instance. You can also use the Sound Mixer
in the system tray (click the Volume icon) to select which of the two processes will have
greater volume, effectively creating a mixing environment.
Instead of closing a handle to a named object, an application could have run on its own be-
fore Windows Media Player and created an object with the same name. In this scenario, Windows 
Media Player would never run because it would be fooled into believing it was already running 
on the system.
EXPERIMENT: Tampering with single instancing
of single-instancing enforcement through named objects. Notice that when launching the 
Wmplayer.exe executable, Windows Media Player appears only once—every other launch simply 
results in the window coming back into focus. You can tamper with the handle list by using 
1.
Launch Windows Media Player and Process Explorer to view the handle table (by click-
ing View, Lower Pane View, and then Handles). You should see a handle whose name 
2.
Right-click the handle and select Close Handle
that Process Explorer should be started as Administrator to be able to close a handle in 
another process.
3.
Run Windows Media Player again. Notice that this time a second process is created.
4.
Go ahead and play a different song in each instance. You can also use the Sound Mixer 
in the system tray (click the Volume icon) to select which of the two processes will have 
greater volume, effectively creating a mixing environment.
Instead of closing a handle to a named object, an application could have run on its own be-
fore Windows Media Player and created an object with the same name. In this scenario, Windows 
Media Player would never run because it would be fooled into believing it was already running 
on the system.
166 
CHAPTER 8 System mechanisms
Symbolic links
-
narily hierarchical directory structure.
The Object Manager implements an object called a symbolic link object, which performs a similar 
function for object names in its object namespace. A symbolic link can occur anywhere within an object 
string that it substitutes for the symbolic link name. It then restarts its name lookup.
One place in which the executive uses symbolic link objects is in translating MS-DOS-style device 
names into Windows internal device names. In Windows, a user refers to hard disk drives using the names 
C:, D:, and so on, and serial ports as COM1, COM2, and so on. The Windows subsystem creates these 
-
tory, which can also be done for additional drive letters through the DefineDosDevice API.
LowMemoryCondition, but due to the introduction of memory partitions (described in Chapter 5 of 
Part 1), the condition that the event signals are now dependent on which partition the caller is running 
in (and should have visibility of). As such, there is now a LowMemoryCondition event for each memory 
partition, and callers must be redirected to the correct event for their partition. This is achieved with 
executed each time the link is parsed by the Object Manager. With WinObjEx64, you can see the 
doing a !object \KernelObjects\LowMemoryCondition command and then dumping the _OBJECT_
SYMBOLIC_LINK structure with the dx command.)
FIGURE 8-36 The LowMemoryCondition symbolic link redirection callback.
CHAPTER 8 System mechanisms
167
Session namespace
Services have full access to the global
the namespace. Regular user applications then have read-write (but not delete) access to the global 
namespace (minus some exceptions we explain soon.) In turn, however, interactive user sessions are 
then given a session-private view of the namespace known as a local namespace. This namespace 
provides full read/write access to the base named objects by all applications running within that 
-
Making separate copies of the same parts of the namespace is known as instancing the namespace. 
are running an application that creates a named object, each user session must have a private version 
-
ing the same object. If the Win32 application is running under an AppContainer, however, or is a UWP 
whose names correspond to the Package SID of the AppContainer (see Chapter 7 of Part 1, for more 
information on AppContainer and the Windows sandboxing model).
The Object Manager implements a local namespace by creating the private versions of the four 
n (where 
n
event, for example, the Win32 subsystem (as part of the BaseGetNamedObjectDirectory API in 
One more way through which name objects can be accessed is through a security feature called 
Base Named Object (BNO) Isolation. Parent processes can launch a child with the ProcThreadAttribute 
BnoIsolation-
-
tory and initial set of objects (such as symbolic links) to support it, and then have NtCreateUserProcess 
BnoIsolationHandlesEntry
168 
CHAPTER 8 System mechanisms
Later, BaseGetNamedObjectDirectory queries the Token object to check if BNO Isolation is enabled, 
sort of sandbox for a process without having to use the AppContainer functionality.
All object-manager functions related to namespace management are aware of the instanced direc-
tories and participate in providing the illusion that all sessions use the same namespace. Windows sub-
directory with \??
named DeviceMap in the executive process object (EPROCESS, which is described further in Chapter 3 
of Part 1) that points to a data structure shared by other processes in the same session. 
The DosDevicesDirectoryDeviceMap structure points at the Object Manager directory 
DosDevicesDirectoryDeviceMap. If the 
DeviceMap
GlobalDosDevicesDirectory 
DeviceMap
Under certain circumstances, session-aware applications need to access objects in the global session 
even if the application is running in another session. The application might want to do this to synchro-
nize with instances of itself running in other remote sessions or with the console session (that is, session 
Session directories are isolated from each other, but as mentioned earlier, regular user applications 
Section and symbolic link objects cannot be globally created unless the caller is running in Session 
0 or if the caller possesses a special privilege named create global object
ObUnsecureGlobalNames value. By default, these names 
are usually listed:
I 
netfxcustomperfcounters.1.0
I 
SharedPerfIPCBlock
I 
I 
CHAPTER 8 System mechanisms
169
EXPERIMENT: Viewing namespace instancing
You can see the separation between the session 0 namespace and other session namespaces as 
see a subdirectory with a numeric name for each active session. If you open one of these direc-
BaseNamedObjects, which are the local namespace subdirectories of the session. The following 
Next, run Process Explorer and select a process in your session (such as Explorer.exe), and then 
view the handle table (by clicking View, Lower Pane View, and then Handles). You should see a 
n, where n is the session ID. 
EXPERIMENT: Viewing namespace instancing
You can see the separation between the session 0 namespace and other session namespaces as 
see a subdirectory with a numeric name for each active session. If you open one of these direc-
BaseNamedObjects, which are the local namespace subdirectories of the session. The following 
Next, run Process Explorer and select a process in your session (such as Explorer.exe), and then 
view the handle table (by clicking View, Lower Pane View, and then Handles). You should see a 
n, where n is the session ID. 
170 
CHAPTER 8 System mechanisms
Object filtering
ability to use the altitude
-
ers are permitted to intercept calls such as NtOpenThread and NtOpenProcess and even to modify the 
access masks being requested from the process manager. This allows protection against certain opera-
tions on an open handle—such as preventing a piece of malware from terminating a benevolent security 
process or stopping a password dumping application from obtaining read memory permissions on the 
LSA process. Note, however, that an open operation cannot be entirely blocked due to compatibility is-
sues, such as making Task Manager unable to query the command line or image name of a process.
pre and post callbacks, allowing them to prepare 
which can be returned across all calls to the driver or across a pre/post pair. These callbacks can be 
registered with the ObRegisterCallbacks API and unregistered with the ObUnregisterCallbacks API—it is 
the responsibility of the driver to ensure deregistration happens.
Use of the APIs is restricted to images that have certain characteristics:
I 
The image must be signed, even on 32-bit computers, according to the same rules set forth in
/integrity-
checkIMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY value in the
PE header. This instructs the memory manager to check the signature of the image regardless of
any other defaults that might not normally result in a check.
I 
The image must be signed with a catalog containing cryptographic per-page hashes of the
executable code. This allows the system to detect changes to the image after it has been loaded
in memory.
Before executing a callback, the Object Manager calls the MmVerifyCallbackFunction on the target 
function pointer, which in turn locates the loader data table entry associated with the module owning 
LDRP_IMAGE_INTEGRITY_FORCED
Synchronization
The concept of mutual exclusion is a crucial one in operating systems development. It refers to the guar-
antee that one, and only one, thread can access a particular resource at a time. Mutual exclusion is neces-
CHAPTER 8 System mechanisms
171
when two threads running on different processors both write data to a circular queue.
Processor A
Get queue tail
Insert data at current location
•••
Increment tail pointer
•••
Time
Processor B
•••
Get queue tail
•••
Insert data at current location /*ERROR*/
Increment tail pointer
•••
FIGURE 8-37 Incorrect sharing of memory.
-
happen on a multiprocessor system, the same error could occur on a single-processor system if the 
queue tail pointer.
Sections of code that access a nonshareable resource are called critical sections. To ensure correct 