除了I/O设备之外，物联网设备可能会依赖一些特定的网络外设，这部分本文在基于系统调用劫持获取信息的基础上，创建一张对应名称和IP的网卡，并使用桥接的方式和本地网卡连接，以用于后续的测试中。
除了IO设备与网络设备，还有类似LED等少数附加设备，这些设备通常有专门的可执行文件控制，网络服务程序并不直接和这些设备进行交互，对于这部分设备，本文使用前文中提到的系统调用劫持直接屏蔽对应的系统调用。
### 3.5 进程透明启动
如前文中提到的，部分进程在执行时会进行execve、fork等系统调用操作，而因为本文使用了转发系统调用到宿主机的方式，在使用这些系统调用时，进程会脱离模拟器环境，由操作系统来执行程序。
操作系统加载可执行文件时，会默认按照宿主机架构加载程序代码，进行解释执行。显而易见的，宿主机在默认情况下无法处理异架构的程序，对于这个问题，本文提出了一种基于内核配置的跨架构进程透明启动技术。
无论用户层使用什么方式创建一个新进程，最后都会通过execve等系统调用传递信息至操作系统，由操作系统内核寻找对应格式的处理器来执行对应的进程。本文注册内核的执行函数，在涉及execve、fork脱离模拟器环境时调用execve时进行判断，如果当前载入的程序并非宿主机架构的程序，则载入对应的模拟器环境加载该程序用于执行，防止程序脱离当前定制的用户态仿真环境执行。
关于其中具体工具的使用和配置，可以参考这篇[文章](https://blog.lyle.ac.cn/2020/04/14/transparently-running-binaries-from-any-architecture-in-linux-with-qemu-and-binfmt-misc/) 。
## 4\. 实验数据
为了验证仿真工具的能力，设计了一些简单的实验进行测试。本文主要使用网页爬取与FTP同步的方式，基于网页的爬虫自动解析厂商的固件下载页面并下载固件；基于FTP同步的方式主要同步厂商FTP中与固件相关的文件，例如后缀是zip、bin、pkg等结尾的固件。另外考虑到实验的多样性，也手工下载了一些品牌的固件用作实验。
经过爬取，本文一共得到来自46个厂商的14483个固件作为测试集，用于验证测试模式的产生效率以及实际的测试实验。固件数据集中比较多数的是路由设备的固件，也包含一些摄像头、NAS的固件。固件中包含i386、ARM、MIPS、PowerPC，并有对应的32位、64位、大小端等多种不同架构。由于不同厂商对固件开放的程度不同、产品数量不同，在数据库中部分厂商如D-Link、TP-Link等厂商的固件占了较大的比例。
总计爬取了14483个固件，其中因为文件格式没有成功识别、解压缩或解密错误、固件中不包含正常可执行文件等原因，有6495个固件不能正确解包，本文对正确解包的7989个固件进行实验。
以应用程序为维度衡量仿真能力，本文判定应用程序是否仿真成功的标准为：使用编写好的测试程序发送对应协议的请求报文，对应端口返回了协议对应的正确响应时，认为仿真成功，否则认为仿真失败。
基于这个标准，本文对仿真成功的程序架构与类型分别进行了统计，在仿真成功的程序中，各个架构程序的数量如下表所示。由于有大量的固件使用了同样的可执行文件，本文在统计中分别统计了执行成功的程序数量与根据哈希去重后的程序数量。
架构 | 位长 | 大小端 | 程序数量 | 去重后数量  
---|---|---|---|---  
arm | 32 | big | 857 | 13  
arm | 32 | little | 730 | 89  
i386 | 32 | little | 767 | 8  
mips | 32 | big | 19472 | 629  
mips | 32 | little | 9445 | 469  
mips64 | 64 | big | 40 | 11  
powerpc | 32 | big | 60 | 4  
在仿真成功的程序中，程序数量如下表所示，因为每个固件中存在的程序数量与类型不同，所以在表中，不同程序的数量和比例有所不同。其中部分程序对应的比例较小，这是由于不是所有固件都带有对应的功能，例如只有小部分固件存在UPnP相关的服务程序，而大部分的固件中都存在DNS相关的服务程序。
程序名称 | 程序数量 | 去重后数量  
---|---|---  
dnsmasq | 7610 | 147  
hnap | 12 | 3  
httpd | 6899 | 181  
lighttpd | 90 | 42  
miniupnpd | 84 | 26  
smbd | 866 | 120  
telnetd | 7728 | 399  
tftpd | 144 | 43  
udhcpd | 7894 | 245  
utelnetd | 44 | 17  
没有仿真成功的测试程序有几种原因，一种原因是部分程序在启动时会对系统环境做详尽的检查，如检查运行进程、检查系统各种参数，当有一些条件没有满足时程序会退出，由于有一部分检查在可执行程序内部完成，不涉及到外部的调用或函数，本系统的技术不能控制，导致本系统不能成功的仿真。一种原因是部分程序依赖的设备较为特殊，是本文尚未实现的设备，在这种条件下本文也不能很好的进行仿真。
## 5\. 后记
### 5.1 本文缺陷
本文通过对物联网设备模糊测试技术的研究，实现了对物联网设备中的网络应用程序进行仿真的目的。但是，本文的实现总体来说比较粗糙，有很多没有自动化或者不完善的部分，主要作为一种仿真的思路提出以供后来的研究者参考。
### 5.2 模糊测试工作
在完成仿真后，要继续的工作是对仿真成功的二进制文件进行模糊测试，在仿真的基础上，还需要解决三个问题。即如何对网络程序进行测试、如何获取覆盖率反馈信息、如何对格式敏感的程序进行测试，对应的文章会在后续放出。
### 5.3 开源计划
由于当前代码结构比较混乱、缺少文档，目前没有开源的计划，如果感兴趣的朋友比较多，等整理好代码后可能会通过这个
[repo](https://github.com/LyleMi/UEMU) 开源。
## 6\. 参考链接
### 6.1 工具
  * [QEMU](https://github.com/qemu/qemu)
  * [Qiling Advanced Binary Emulation Framework](https://github.com/qilingframework/qiling)
  * [Unicorn CPU emulator framework (ARM, AArch64, M68K, Mips, Sparc, X86)](https://github.com/unicorn-engine/unicorn)
  * [firmadyne](https://github.com/firmadyne/firmadyne)
### 6.2 论文
  * Towards Automated Dynamic Analysis for Linux-based Embedded Firmware
  * AVATAR: A Framework to Support Dynamic Security Analysis of Embedded Systems' Firmwares
  * HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation
  * P2IM: Scalable and Hardware-independent Firmware Testing via Automatic Peripheral Interface Modeling
* * *