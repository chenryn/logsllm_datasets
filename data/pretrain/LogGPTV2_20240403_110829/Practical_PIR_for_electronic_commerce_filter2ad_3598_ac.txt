e(Cf , ˆg) ?= e(w, ˆgα/ˆgr) · e(g, ˆg)f (r)(cid:105)
(cid:104)
Much like traditional discrete logarithm commitments [27] and
Pedersen commitments [52], polynomial commitments are addi-
tively homomorphic and scalar multiplication of committed values
can be computed by exponentiating the commitment by the scalar.
We exploit both of these facts extensively in our protocols.
3.5 Zero-knowledge proofs
Our protocols employ several standard zero-knowledge proofs
(ZKPs) from the literature: proofs of knowledge of a committed
value [53], range proofs [9] to prove that a committed value is non-
negative, proofs of knowledge of a discrete log representation of
a number [11], and proofs that a commitment opens to the prod-
uct of the openings of two other commitments [20]. We refer the
interested reader to the respective papers for more details on each
of these proofs, or to [16] for a self-contained treatment of all of
the aforementioned proofs. We also use some efﬁcient batch proof
techniques [6, 7] to achieve practicality in our protocols; the rest of
this section describes these batch proofs.
3.5.1 Proving equality of 1-out-of-r discrete logs.
We combine the batch veriﬁcation techniques of Bellare et al. [6,
7] with Cramer et al.’s [24] technique for proving the disjunction
of two or more propositions to yield efﬁciently veriﬁable proofs of
equality of 1-out-of-r discrete logarithms. That is, given bases g
and h and two sets of inputs g1, g2, . . . , gr and h1, h2, . . . , hr, to
(cid:0)logg (gi) = logh (hi)(cid:1) without reveal-
prove the predicate(cid:87)r
ing which particular statements are true and which are false.
i=1
A detailed description of how to implement this proof is provided
in Appendix A, and it is proved secure by Bellare et al. [7, Theorem
2.2].
3.5.2 Proving that a vector of commitments opens to
a standard basis vector.
We introduce a new proof that allows one to efﬁciently prove that
a vector of r commitments opens to an r-dimensional standard ba-
sis vector (i.e., a length-r vector containing a single 1 and the rest
0). Our proof uses a special case of the batch proof of equality of
1-out-of-r discrete logarithms from the previous section as a sub-
routine. In particular, we use the special case in which g1 = g2 =
··· = gr and the hi are all different, but loghγ (hi) = ai is known
to the veriﬁer, where γ is randomly chosen by the prover and un-
known to the veriﬁer. In our protocol, the prover actually wishes to
prove to the veriﬁer that the vector of polynomials committed to by
a vector of polynomial commitments evaluate to a standard basis
vector at x = 0. However, modifying our approach as described
here to handle other types of commitments (e.g., Pedersen com-
mitments) is straightforward and modifying it to handle different
evaluation points is trivial.
Let (cid:126)a = (cid:104)a1, . . . , ar(cid:105) ∈R (Z2κ )r. The key observation behind
our approach is as follows:
if (cid:126)v is a standard basis vector, then
(cid:126)v · (cid:126)a = ai for some 1 ≤ i ≤ r; conversely, if (cid:126)v is not a standard
basis vector, then with high probability (cid:126)v·(cid:126)a (cid:54)= ai for any 1 ≤ i ≤ r.
A detailed description of how to implement this proof is provided
in Appendix B, and it is proved secure in the extended version of
this paper [36, Appendix A].
3.5.3 Batch veriﬁcation of evaluations of polynomial
commitments at a common point.
In [40], Kate et al. show how to open a single polynomial com-
mitment to a set of evaluations at the same time with a single wit-
ness element, a technique they call batch opening. We ﬂip this
proof around and show how to verify the evaluations of a set of
polynomial commitments at a single point, a technique we call batch
veriﬁcation. Batch veriﬁcation can be either cooperative or non-
cooperative. The cooperative form of the protocol is interactive
(though it can be made noninteractive using the Fiat-Shamir heuris-
tic [28]), and uses only a single witness element, while the nonco-
operative form is noninteractive and uses one witness element per
commitment. As the name implies, the noncooperative form of
batch veriﬁcation does not require the prover’s cooperation; i.e.,
only the veriﬁer changes. In particular, the veriﬁer combines all of
the witnesses (and commitments) into a single witness (and com-
mitment) at veriﬁcation time to signiﬁcantly reduce veriﬁcation
time at the cost of a negligible decrease in soundness.
A detailed description of how to implement cooperative batch
veriﬁcation is provided in Appendix C, and it is proved secure in
the extended version of this paper [36, Appendix B].
4. CONSTRUCTIONS
We now describe the full details of our constructions. We de-
velop our scheme incrementally in three steps. First, we describe
how to convert Goldberg’s multi-server PIR into SPIR. We then
describe the basic single-payee PSPIR construction and show how
to extend it to support access control lists. Finally, we discuss our
approach to bookkeeping and use this to add support for top-K
replication and to construct multiple-payee PSPIR.
4.1 Symmetric PIR construction
The ﬁrst step in our construction is to convert Goldberg’s PIR
scheme into SPIR; that is, we augment the scheme to enforce the
681additional property that no query will ever reveal information about
more than a single record, under some mild computational assump-
tions. This property implies that no coalition of users can use
knowledge obtained from one or more PIR queries to learn any in-
formation about a record that they did not purchase in one of those
queries. We accomplish this with the aforementioned proof that a
vector of commitments opens to a standard basis vector. In particu-
lar, the user (querying servers with indices I1, . . . , Ik for the record
at index β using his current wallet, wallet) does the following:
1. chooses (cid:126)f = (cid:104)f1, . . . , fr(cid:105) ∈R (Zq[x])r such that deg(fi) ≤
t and fi(0) = δiβ,
2. computes a vector (cid:126)C of component-wise PolyCommitDL
commitments to the polynomials in (cid:126)f,
3. computes k vectors (cid:126)ρj = (cid:104)f1(Ij), . . . , fr(Ij)(cid:105) of evalua-
tions of the polynomials in (cid:126)f, and k witnesses wj that at-
test to the fact that the r evaluations in (cid:126)ρj are correct using
cooperative batch veriﬁcation (made noninteractive via Fiat-
Shamir), for 1 ≤ j ≤ k,
4. computes the set S of commitment values from the proof that
the polynomials committed to in (cid:126)C open to a standard basis
vector at x = 0, and
5. sends ( (cid:126)C, S, wallet, (cid:126)ρj, wj), to server Ij for 1 ≤ j ≤ k.
Note that each server receives different vectors of evaluation points
and witnesses, but the same wallet and sets of commitments. Upon
receiving these values, each server Ij
6. ensures that it has not seen wallet in an earlier query,
7. veriﬁes that the evaluations in (cid:126)ρj are correct using coopera-
tive batch veriﬁcation (with witness wj),
8. computes a (k, (cid:96))-threshold BLS signature share σj on the
value (cid:126)C(cid:107)S(cid:107)wallet, and
9. sends σj to the user.
After receiving signature shares from each server, the user
10. combines σ1, . . . , σk into a signature σ on (cid:126)C(cid:107)S(cid:107)wallet,
11. computes the challenge c = hash(σ) and uses this challenge
to compute the set V of responses to complete the aforemen-
tioned proof that the polynomials committed to in (cid:126)C open to
a standard basis vector at x = 0, and
12. sends (σ, V ) to server Ij for 1 ≤ j ≤ k.
Upon receipt of this response, each server Ij
13. veriﬁes that σ is a valid signature on (cid:126)C(cid:107)S(cid:107)wallet, and
14. computes c = hash(σ) and checks if the responses in V are
valid responses for this challenge.
Recall that in Goldberg’s PIR scheme, the user recovers the record
by Lagrange interpolation at the point x = 0. It is apparent that
the above proof convinces the database servers that the query only
reveals information about a single record when the responses are
interpolated at the point x = 0, but we must also consider a clever
user that chooses the polynomials in his query non-randomly. In
this case, the polynomials might be chosen such that interpolat-
ing at some other point x = a reveals information about some
other database record. This is unsurprising, since it is known that
information-theoretic SPIR is impossible to achieve without some
interaction between the servers, or a shared secret among them [31].
We thus introduce a shared secret key sk, known to all the servers
but unknown to the users. (Note that the servers must already share
a copy of the database, so requiring them to share an additional
secret key is reasonable.) To prevent the above attack, server Ij
15. seeds a pseudorandom generator (PRG) with Fsk( (cid:126)C), where
F is a pseudorandom function family,
16. uses the PRG to generate a common pseudorandom nonce
and appends it to the database as an ephemeral (r +1)th data-
base record for this query,3
17. uses the PRG to generate t − 1 random Zq elements from
which it forms a common pseudorandom polynomial g ∈
Zq[x] of degree (at most) t with g(0) = 0,
18. computes and appends g(Ij) to (cid:126)ρj, and
19. encodes the query response exactly as in Goldberg’s original
construction. Note that when encoding the response, the ser-
vers include the ephemeral (r + 1)th record in the database,
and also include their respective evaluations of the pseudo-
random polynomial g in the query as if the user had submit-
ted it as part of his original query.
This last set of steps effectively rerandomizes the user’s query. The
user decodes the responses to his rerandomized query in the usual
way (see §3.2).
Note that this SPIR construction preserves the t-privacy and v-
Byzantine-robustness properties of the underlying PIR protocol;
however, our approach to rerandomizing user queries prevents us
from inheriting the scheme’s optional τ-independence property.
Theorem 1. The above modiﬁcations convert Goldberg’s multi-
server information-theoretic PIR into multi-server SPIR. Query pri-
vacy is provided information theoretically against up to t − 1, and
computationally against t (under the DL assumption), colluding
servers; the database’s privacy is protected computationally (un-
der the t-SDH assumption [40]).
The proof of this theorem is in the extended version of this pa-
per [36, Appendix C].
4.2 Single-payee PSPIR
Next, we extend the above SPIR construction to single-payee
PSPIR. To do this, we augment the protocol as follows. First, we
have the user compute a commitment, called a receipt, that encodes
the price of the requested record under the price tier encoded in his
wallet. The user proves in zero-knowledge that the receipt is well-
formed (i.e., that it encodes the correct price) and that the balance
in his wallet is sufﬁcient to purchase the record at that price; once
convinced by this proof, the database servers issue a threshold BLS
signature on the user’s receipt and wallet. The user can later ex-
change his wallet and this signed receipt with the bank to retrieve
a new wallet for use in a future transaction. We also discuss how
a user can recharge the balance in his wallet, and then point out a
simple trick that enables the servers to enforce access control lists
with only a slight modiﬁcation to the PSPIR protocol.
3It is important that no other values are used to seed the PRG, since
the user might otherwise replay (cid:126)C to retrieve a different nonce and
potentially leak some information about other database records.
682Proving sufﬁcient funds and computing the receipt.
Pi =(cid:81)r
To compute the receipt, the user and each database server in-
dependently compute a commitment to the price of the record en-
coded in the user’s query for each price tier. This is done by tak-
ing advantage of the homomorphic properties of polynomial com-
mitments: each party computes the T polynomial commitments
for 1 ≤ i ≤ T , where pij is the jth component
of (cid:126)pi. (Recall that (cid:126)pi is the tier i price list.) Note that Pi is a com-
mitment to a polynomial fPi = (cid:126)f · (cid:126)pi whose constant coefﬁcient is
equal to the price of record β in (cid:126)pi (i.e., fPi (0) = pπi). Next, the
user
j=1 C pij
j
1. chooses γ0, γ1 ∈R Zq and computes the PolyCommitPed
commitment CP = Pπ(hα)γ1 hγ0, where π is the price tier
encoded in wallet,
pπβ
2. computes a Pedersen commitment ReceiptP = g
T
hγ0
T
and the witness wP = gφ(α)hγ1 where φ(x) is the quotient
upon division of fPπ (x) − fPπ (0) by x − 0,
3. computes ΠP , a ZKP of knowledge of (x1, . . . , xT , b) and
(γ0, γ1, p) such that CP = P x1
T (hα)γ1 hγ0 (recall
T , b − p ≥ 0, and
that xi = δiπ), ReceiptP = gp
wallet encodes attributes x1, . . . , xT and balance b, and
4. sends the tuple (CP , wP , ReceiptP , ΠP ) to server Ij for
··· P xT
T hγ0
1
1 ≤ j ≤ k.
Upon receiving these values, each server Ij
5. veriﬁes that the proof ΠP is correct,
6. checks if e(CP , ˆg) ?= e(wP , ˆgα) · ReceiptP ,
7. computes a (k, (cid:96))-threshold BLS signature share ςj on the
value wallet(cid:107)ReceiptP , and
8. sends ςj to the user.
If any veriﬁcation step above fails, then the servers abort imme-
diately; otherwise, the servers proceeds to process the user’s query
as usual. The user recombines the signature shares ςj, 1 ≤ j ≤ k,
to recover the signature ς on wallet(cid:107)ReceiptP .
Remark 1. To improve performance, our implementation of the
above protocols (as described in [36, Appendix D]) diverges some-
what from the above descriptions. In particular, each of the ZKPs
used in the SPIR construction are computed noninteractively using
Fiat-Shamir, and the commitments and responses from this proof
are transmitted to each server as early as possible, thus allowing
the servers to begin veriﬁcation before the user completes the proof.
Then, instead of computing ReceiptP noninteractively, each ser-
ver issues a threshold BLS signature share on wallet, all com-
mon values from this proof, and all commitment values from the
proof that ReceiptP is valid; the user recombines these signa-
ture shares to produce a challenge value for this latter proof, then
transmits the recombined signature and his responses to each ser-
ver. This convinces the servers that they each saw the same wallet
and query in the earlier SPIR proof.4
4The reason we describe the protocols as above is to make the SPIR
construction secure on its own. In our implementation, the security