### Preventing the Assumption of a "Lost Identity"

In practice, this issue can be mitigated by allowing the provider to place a "tombstone" on a name with its own signature, irrespective of the user's key policy. The provider would use specific out-of-band authorization steps to authorize such an action. Unlike allowing providers to issue key change operations, a permanent account deactivation does not require much additional trust in the provider, as a malicious provider could already render an account unusable through denial of service.

### 6.3 Protocol Extensions

#### Limiting the Effects of Denied Service

Powerful identity providers may refuse to distribute STRs (Signed Tree Roots) to providers with which they do not collude. In such cases, clients querying these honest providers will be unable to obtain explicit proof of equivocation. Clients can help circumvent this by submitting observed STRs to these honest identity providers. The honest identity providers can verify the other provider's signature and then store and redistribute the STR.

Similarly, any identity provider might ignore requests about individual bindings to prevent clients from performing consistency checks or key changes. Clients can potentially circumvent this attack by using other providers to proxy their requests. However, a malicious provider may ignore all requests for a name, rendering the binding unusable for as long as the provider denies service. This only allows the provider to deny service; any modification to the binding during this attack would become evident once the service is restored.

#### Obfuscating the Social Graph

As an additional privacy requirement, users may want to conceal with whom they are in communication, or providers may want to offer anonymized communication. In principle, users could use Tor to anonymize their communications. However, if only a few users in CONIKS use Tor, providers can distinguish clients connecting through Tor from those connecting directly.

CONIKS could leverage the proxying mechanism described in §6.3 to obfuscate the social graph. If Alice wants to conceal with whom she communicates, her client could use other providers to proxy any requests for her contacts' bindings or consistency proofs. Clients could choose these proxying providers uniformly at random to minimize the amount of information any single provider has about a particular user's contacts. This can be further improved if more providers agree to act as proxies. Thus, the only way for providers to gain information about whom a given user is contacting would be to aggregate collected requests. For system-wide Tor-like anonymization, CONIKS providers could form a mixnet [13], which would provide much higher privacy guarantees but would likely hamper the deployability of the system.

#### Randomizing the Order of Directory Entries

Once a user learns the lookup index of a name, this position in the tree is known for the rest of time because the index is a deterministic value. If a user has an authentication path for two users, PI:EMAIL and PI:EMAIL, which share a common prefix in the tree, Bob’s authentication path will leak any changes to Alice’s binding if his key has not changed, and vice versa. To prevent this information leakage, foo.com can periodically randomize the ordering of entries by including additional data when computing their lookup indices. However, such randomized reordering of all directory entries would require a complete reconstruction of the tree. Thus, if done every epoch, the identity provider would be able to provide enhanced privacy guarantees at the expense of efficiency. The shorter the epochs, the greater the tradeoff between efficiency and privacy. An alternative would be to reorder all entries every n epochs to achieve better efficiency.

#### Key Expiration

To reduce the time frame during which a compromised key can be used by an attacker, users may want to enforce key expiration. This would entail including the epoch in which the public key is to expire as part of the directory entry, and clients would need to ensure that such keys are not expired when checking the consistency of bindings. Furthermore, CONIKS could allow users to choose whether to enforce key expiration on their binding, and provide multiple security options allowing users to set shorter or longer expiration periods. When the key expires, clients can automatically change the expired key and specify the new expiration date according to the user’s policies.

#### Support for Multiple Devices

Any modern communication system must support users communicating from multiple devices. CONIKS easily allows users to bind multiple keys to their username. Unfortunately, device pairing has proved cumbersome and error-prone for users in practice [32, 67]. As a result, most widely-deployed chat applications allow users to simply install software on a new device, which will automatically create a new key and add it to the directory via password authentication. The tradeoffs for supporting multiple devices are the same as for key change. Following this easy enrollment procedure requires that Alice enforce the cautious key change policy, and her client will no longer be able to automatically determine if a newly observed key has been maliciously inserted by the server or represents the addition of a new device. Users can deal with this issue by requiring that any new device key is authenticated with a previously-registered key for a different device. This means that clients can automatically detect if new bindings are inconsistent, but will require users to execute a manual pairing procedure to sign the new keys as part of the paranoid key change policy discussed above.

### 7 Related Work

#### Certificate Validation Systems

Several proposals for validating SSL/TLS certificates seek to detect fraudulent certificates via transparency logs [4, 34, 38, 39, 53], or observatories from different points in the network [4, 34, 54, 58, 68]. Certificate Transparency (CT) [39] publicly logs all certificates as they are issued in a signed append-only log. This log is implemented as a chronologically-ordered Merkle binary search tree. Auditors check that each signed tree head represents an extension of the previous version of the log and gossip to ensure that the log server is not equivocating.

This design only maintains a set of issued certificates, so domain administrators must scan the entire list of issued certificates (or use a third-party monitor) to detect any newly-logged, suspicious certificates issued for their domain. We consider this a major limitation for user communication, as independent, trustworthy monitors may not exist for small identity providers. CT is also not privacy-preserving; indeed, it was designed with the opposite goal of making all certificates publicly visible.

Enhanced Certificate Transparency (ECT) [60], developed concurrently [46], extends the basic CT design to support efficient queries of the current set of valid certificates for a domain, enabling built-in revocation. Since ECT adds a second Merkle tree of currently valid certificates organized as a binary search tree sorted lexicographically by domain name, third-party auditors must verify that no certificate appears in only one of the trees by mirroring the entire structure and verifying all insertions and deletions.

Because of this additional consistency check, auditing in ECT requires effort linear in the total number of changes to the logs, unlike in CT or CONIKS, which only require auditors to verify a small number of signed tree roots. ECT also does not provide privacy: the proposal suggests storing users in the lexicographic tree by a hash of their name, but this provides only weak privacy as most usernames are predictable and their hash can easily be determined by a dictionary attack.

Other proposals include public certificate observatories such as Perspectives [54, 58, 68], and more complex designs such as Sovereign Keys [53] and AKI/ARPKI [4, 34], which combine append-only logs with policy specifications to require multiple parties to sign key changes and revocations to provide proactive as well as reactive security.

All of these systems are designed for TLS certificates, which differ from CONIKS in a few important ways. First, TLS has many certificate authorities sharing a single, global namespace. It is not required that the different CAs offer only certificates that are consistent or non-overlapping. Second, there is no notion of certificate or name privacy in the TLS setting, and as a result, they use data structures making the entire namespace public. Finally, stronger assumptions, such as maintaining a private key forever or designating multiple parties to authorize key changes, might be feasible for web administrators but are not practical for end users.

#### Key Pinning

An alternative to auditable certificate systems are schemes that limit the set of certificate authorities capable of signing for a given name, such as certificate pinning [16] or TACK [44]. These approaches are brittle, with the possibility of losing access to a domain if an overly strict pinning policy is set. Deployment of pinning has been limited due to this fear, and most web administrators have set very loose policies [35]. This difficulty of managing keys, experienced even by technically savvy administrators, highlights how important it is to require no key management by end users.

#### Identity and Key Services

As end users are accustomed to interacting with a multitude of identities at various online services, recent proposals for online identity verification have focused on providing a secure means for consolidating these identities, including encryption keys. Keybase [37] allows users to consolidate their online account information while also providing semi-automated consistency checking of name-to-key bindings by verifying control of third-party accounts. This system’s primary function is to provide an easy means to consolidate online identity information in a publicly auditable log. It is not designed for automated key verification and does not integrate seamlessly into existing applications.

Nicknym [56] is designed to be purely an end-user key verification service, which allows users to register existing third-party usernames with public keys. These bindings are publicly auditable by allowing clients to query any Nicknym provider for individual bindings they observe. While equivocation about bindings can be detected in this manner in principle, Nicknym does not maintain an authenticated history of published bindings, which would provide more robust consistency checking as in CONIKS.

#### Cryptographically Accountable Authorities

Identity-based encryption inherently requires a trusted private-key generator (PKG). Goyal [28] proposed the accountable-authority model, in which the PKG and a user cooperate to generate the user’s private key in such a way that the PKG does not know what private key the user has chosen. If the PKG ever runs this protocol with another party to generate a second private key, the existence of two private keys would be proof of misbehavior. This concept was later extended to the black-box accountable-authority model [29, 61], in which even issuing a black-box decoder algorithm is enough to prove misbehavior. These schemes have somewhat different security goals than CONIKS, as they require discovering two private keys to prove misbehavior (and provide no built-in mechanism for such discovery). By contrast, CONIKS is designed to provide a mechanism to discover if two distinct public keys have been issued for a single name.

#### VUFs and Dictionary Attacks

DNSSEC [15] provides a hierarchical mapping between domains and signing keys via an authenticated linked list. Because each domain references its immediate neighbors lexicographically in this design, it is possible for an adversary to enumerate the entire set of domains in a given zone via zone walking (repeatedly querying neighboring domains). In response, the NSEC3 extension [40] was added; while it prevents trivial enumeration, it suffers a similar vulnerability to ECT in that likely domain names can be found via a dictionary attack because records are sorted by the hash of their domain name. Concurrent with our work on CONIKS, [27] proposed NSEC5, effectively using a verifiable unpredictable function (also in the form of a deterministic RSA signature) to prevent zone enumeration.

### 8 Conclusion

We have presented CONIKS, a key verification system for end users that provides consistency and privacy for users’ name-to-key bindings, all without requiring explicit key management by users. CONIKS allows clients to efficiently monitor their own bindings and quickly detect equivocation with high probability. CONIKS is highly scalable and is backward compatible with existing secure communication protocols. We have built a prototype CONIKS system that is application-agnostic and supports millions of users on a single commodity server.

As of this writing, several major providers are implementing CONIKS-based key servers to bolster their end-to-end encrypted communications tools. While automatic, decentralized key management without at least a semi-trusted key directory remains an open challenge, we believe CONIKS provides a reasonable baseline of security that any key directory should support to reduce users' exposure to mass surveillance.

### Acknowledgments

We thank Gary Belvin, Yan Zhu, Arpit Gupta, Josh Kroll, David Gil, Ian Miers, Henry Corrigan-Gibbs, Trevor Perrin, and the anonymous USENIX reviewers for their feedback. This research was supported by NSF Award TC-1111734. Joseph Bonneau is supported by a Secure Usability Fellowship from OTF and Simply Secure.

### References

[1] Pidgin. http://pidgin.im, Retr. Apr. 2014.
[2] Protocol Buffers. https://code.google.com/p/protobuf, Retr. Apr. 2014.
[3] E. Barker, W. Barker, W. Burr, W. Polk, and M. Smid. Special Publication 800-57 rev. 3. NIST, 2012.
[4] D. Basin, C. Cremers, T. H.-J. Kim, A. Perrig, R. Sasse, and P. Szalachowski. ARPKI: attack resilient public-key infrastructure. ACM CCS, 2014.
[5] D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B.-Y. Yang. High-speed high-security signatures. Journal of Cryptographic Engineering, 2(2), 2012.
[6] D. J. Bernstein, M. Hamburg, A. Krasnova, and T. Lange. Elligator: Elliptic-curve points indistinguishable from uniform random strings. ACM CCS, 2013.
[7] D. Boneh, B. Lynn, and H. Shacham. Short signatures from the Weil pairing. ASIACRYPT, 2001.
[8] N. Borisov, I. Goldberg, and E. Brewer. Off-the-record communication, or, why not to use PGP. WPES, 2004.
[9] S. Braun, A. Flaherty, J. Gillum, and M. Apuzzo. Secret to Prism program: Even bigger data seizure. Associated Press, Jun. 2013.
[10] P. Bright. Another fraudulent certificate raises the same