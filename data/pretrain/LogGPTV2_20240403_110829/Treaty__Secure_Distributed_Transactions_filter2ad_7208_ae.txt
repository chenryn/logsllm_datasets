### Figure 6: Performance Evaluation of Pessimistic Single-Node Transactions
Figure 6 presents the performance evaluation of pessimistic single-node transactions under the TPC-C and YCSB benchmarks. The YCSB performance is assessed with both a write-heavy (20% reads) and a read-heavy (80% reads) workload.

### Figure 7: Performance Evaluation of Optimistic Single-Node Transactions
Figure 7 illustrates the performance evaluation of optimistic single-node transactions under the TPC-C and YCSB benchmarks. Similar to Figure 6, the YCSB performance is evaluated with a write-heavy (20% reads) and a read-heavy (80% reads) workload.

### Performance Overheads
- **Encryption Overhead**: Encryption adds minimal overhead compared to non-encrypted versions. SCONE’s overheads are reasonable.
- **TREATY w/o Enc vs. RocksDB**: TREATY without encryption experiences a 1.6× slowdown compared to RocksDB, while TREATY with encryption has a 2× slowdown.
- **Stabilization Impact**: The stabilization period does not significantly affect overall throughput, resulting in a 2.1× slowdown compared to RocksDB.
- **Latency**: All TREATY SCONE versions do not scale as well as native execution, but their latency is equivalent or even smaller than the natively executed versions. This behavior is expected since the native versions are "saturated" at 64 clients, while the SCONE versions are saturated at 32 clients.

### YCSB Workloads
- **Throughput and Latency**: Figure 6 shows the throughput and latency for all six systems under the two YCSB workloads. The YCSB configuration, unlike TPC-C, presents fewer conflicts.
- **Read-Heavy Workload**:
  - Encryption adds a throughput overhead of 1.3× and 2.7× compared to native and SCONE versions, respectively.
  - Latency overheads are 1.6× and 4.6×, respectively.
- **Write-Heavy Workload**:
  - Throughput overheads are 1.2× and 2.8× compared to native and SCONE versions, respectively.
  - Latency overheads are 1.5× and 4.7×, respectively.
- **Stabilization Function**: TREATY’s stabilization function does not dramatically impact performance. For the read-heavy workload, TREATY w/ Enc w/ Stab takes advantage of the "idle" (stabilization) time to improve scalability, becoming saturated at 64 clients, while other versions are saturated at 32 clients.

### Optimistic Transactions
- **Performance Comparison**: Figure 7 shows that TREATY w/ Enc w/ Stab performs 5× and 4× worse compared to native RocksDB for TPC-C and YCSB, respectively.
- **Throughput Overhead**: TREATY’s stabilization does not incur extra throughput overhead compared to TREATY w/ Enc, thanks to the user-space fiber scheduler.
- **Latency Overhead**: TREATY w/ Enc w/ Stab experiences roughly 10% more latency than TREATY w/ Enc.
- **Saturation Point**: TREATY w/ Enc w/ Stab’s saturation point under YCSB is 128 clients, while RocksDB’s is 32 clients. TREATY shows similar overheads as SPEICHER [31].

### Network Library for Transactions
- **Evaluation Setup**: We evaluate TREATY’s networking library using iPerf against six baselines: eRPC (SCONE), eRPC (native), iPerf-UDP (native), iPerf-UDP (SCONE), iPerf-TCP (native), and iPerf-TCP (SCONE). Native versions (eRPC and iPerf) do not provide security, while SCONE versions (eRPC and iPerf) do not secure the network layer; they only use the secure message format for TREATY-networking.
- **iPerf Build**: The iPerf build with SCONE is optimized for SGX using async syscalls [26] for performance.
- **Sockets and eRPC**: For sockets (native and SCONE), we use iPerf to measure throughput. For eRPC versions and TREATY-networking, we implement a client-server model with eRPC to simulate iPerf. Our experiments saturate the network bandwidth with different packet sizes.
- **Throughput Results**: Figure 8 shows the throughput in network bandwidth for all seven systems. eRPC is comparable to iPerf-TCP, while iPerf-UDP performs poorly, especially for large messages (> MTU). TCP outperforms UDP and eRPC, likely due to its optimization for high-speed bulk transfers and offloading to the network controller.
- **Small and Medium Packets**: For small and medium packets (less than the MTU of 1460 B), eRPC shows a 30% and 22% slowdown for 256 B and 1024 B packets, respectively, compared to iPerf-TCP.
- **Large Messages**: Both eRPC and iPerf-TCP perform almost equivalently for larger messages.
- **Conclusions**:
  - SCONE’s overhead is significant, deteriorating up to 8× for iPerf-TCP (SCONE) and up to 4× for eRPC.
  - eRPC in SCONE performs up to 1.5× faster than iPerf-TCP (SCONE) due to the number of syscalls.
  - TREATY’s network stack, which fully secures the network and includes encryption overheads, performs equivalently to iPerf-TCP (SCONE).

### Recovery Protocol
- **Overheads**: We evaluate the overheads of TREATY recovery with and without encryption compared to native recovery. Logs of 800K entries result in log sizes of 69 MiB and 91 MiB for non-encrypted and encrypted entries, respectively.
- **Results**: TREATY recovery without decryption costs incurs a 1.5× slowdown compared to native recovery. With encryption, the overhead increases to 2× slower than native recovery.

### Related Work
- **Confidential Computing Frameworks**: Confidential computing frameworks [23], [25], [47], [77] use TEEs to build secure systems [31], [78]–[85]. TREATY leverages SCONE to build the first secure distributed transactional KV storage system with TEEs.
- **Secure Systems for Cloud Computing**: Secure systems for cloud computing [75], [80], [86]–[95] offer different security properties, interfaces, threat models, and security enforcement mechanisms. EnclaveDB [80] is the most related work but differs in being a single-node in-memory system without persistence and distribution, running in emulated hardware, and assuming unlimited enclaves.
- **Distributed Storage Systems**: Secure distributed storage systems [100]–[102] provide consistency, durability, availability, and integrity. Cloud-Proof [102] distrusts the cloud provider but requires clients to guarantee these security properties and a trusted proxy, limiting scalability. TREATY leverages TEEs to avoid such limitations.
- **Other Distributed Systems**: Other distributed systems [2], [27]–[29] deploy RDMA, but TREATY targets security, which is more challenging. DMA connections for direct I/O are not allowed by TEEs. ShieldBox [83] uses DPDK, but it targets only layer 2 in the OSI model, which is limiting for distributed systems. SPEICHER [31] uses SPDK [71] for direct I/O to SSDs. rkt-io [49] provides a library OS in the enclave including a full network stack. TREATY builds on these advancements to design a secure direct network I/O mechanism for TEEs with a 2PC protocol.

### Conclusion
In this paper, we present TREATY, a secure distributed transactional KV store for untrusted cloud environments. TREATY offers high-performance serializable transactions with strong security properties. We achieve these goals by building on hardware-assisted secure transactions with SGX and designing a distributed 2PC protocol with a direct I/O network library based on eRPC. Additionally, we design a stabilization protocol for transactions using an asynchronous trusted counter interface along with a distributed attestation service. We implement an end-to-end secure transaction processing system based on RocksDB/SPEICHER as the underlying storage engine. Our evaluation with YCSB and TPC-C shows reasonable overheads for TREATY, while providing strong security properties.

### Software Artifact
TREATY is publicly available at: https://github.com/TUM-DSE/Treaty.

### Acknowledgements
We thank our shepherd, Prof. Fernando Pedone, and Dr. Le Quoc Do, Dimitris Stavrakakis, and Prof. Jana Giceva for their helpful comments. This work was supported in part by a Microsoft Research PhD Fellowship and grants from Huawei Research, UK RISE, and BaCaTeC.