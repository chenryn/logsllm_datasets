245
Important Only integer arithmetic directly inside the checked block is
subject to overflow checking. For example, if one of the checked
statements is a method call, checking does not apply to code that runs in
the method that is called.
You can also use the unchecked keyword to create an unchecked block
statement. All integer arithmetic in an unchecked block is not checked and
never throws an OverflowException. For example:
Click here to view code image
int number = int.MaxValue;
unchecked
{
    int wontThrow = number++;
    Console.WriteLine("this will be reached");
}
Writing checked expressions
You can also use the checked and unchecked keywords to control overflow
checking on integer expressions by preceding just the individual
parenthesized expression with the checked or unchecked keyword, as shown
in these examples:
Click here to view code image
int wontThrow = unchecked(int.MaxValue + 1);
int willThrow = checked(int.MaxValue + 1);
The compound operators (such as += and –=) and the increment (++) and
decrement (--) operators are arithmetic operators and can be controlled by
using the checked and unchecked keywords. Remember, x += y is the same as
x = x + y.
Download from finelybook PI:EMAIL
246
Important You cannot use the checked and unchecked keywords to
control floating-point (noninteger) arithmetic. The checked and
unchecked keywords apply only to integer arithmetic using data types
such as int and long. Floating-point arithmetic never throws
OverflowException—not even when you divide by 0.0. (Remember
from Chapter 2 that the .NET Framework has a special floating-point
representation for infinity.)
In the following exercise, you will see how to perform checked arithmetic
when using Visual Studio 2017.
Use checked expressions
1. Return to Visual Studio 2017.
2. On the Debug menu, click Start Debugging.
You will now attempt to multiply two large values.
3. In the Left Operand box, type 9876543. In the Right Operand box, type
9876543. Click the * Multiplication button, and then click Calculate.
The value –1195595903 appears in the Result box on the form. This is a
negative value, which cannot possibly be correct. This value is the result
of a multiplication operation that silently overflowed the 32-bit limit of
the int type.
4. Return to Visual Studio and stop debugging.
5. In the Code and Text Editor window displaying MainPage.xaml.cs,
locate the multiplyValues method, which should look like this:
Click here to view code image
private void multiplyValues()
{
    int lhs = int.Parse(lhsOperand.Text);
    int rhs = int.Parse(rhsOperand.Text);
    int outcome = 0;
    outcome = lhs * rhs;
    expression.Text = $" * ";
    result.Text = outcome.ToString();
Download from finelybook PI:EMAIL
247
}
The statement outcome = lhs * rhs; contains the multiplication operation
that is silently overflowing.
6. Edit this statement so that the calculation value is checked, like this:
outcome = checked(lhs * rhs);
The multiplication is now checked and will throw an OverflowException
rather than silently returning the wrong answer.
7. On the Debug menu, click Start Debugging.
8. In the Left Operand box, type 9876543. In the Right Operand box, type
9876543. Click the * Multiplication button, and then click Calculate.
This time, Visual Studio drops into the debugger and reports that the
multiplication resulted in an OverflowException exception. You now
need to add a handler to catch this exception and handle it more
gracefully than just failing with an error.
9. On the Debug menu, click Stop Debugging.
10. In the Code and Text Editor window displaying the MainPage.xaml.cs
file, locate the calculateClick method.
11. Add the following catch handler (shown in bold) immediately after the
existing FormatException catch handler in this method:
Click here to view code image
private void calculateClick(object sender, RoutedEventArgs e)
{
    try
    {
        ...
    }
    catch (FormatException fEx)
    {
        result.Text = fEx.Message;
    }
    catch (OverflowException oEx)
    {
        result.Text = oEx.Message;
    }
}
Download from finelybook PI:EMAIL
248
The logic of this catch handler is the same as that for the
FormatException catch handler. However, it is still worth keeping these
handlers separate instead of simply writing a generic Exception catch
handler; in the future you might decide to handle these exceptions
differently.
12. On the Debug menu, click Start Debugging to build and run the
application.
13. In the Left Operand box, type 9876543. In the Right Operand box, type
9876543. Click the * Multiplication button, and then click Calculate.
The second catch handler successfully catches the OverflowException
and displays the message “Arithmetic operation resulted in an overflow”
in the Result box.
14. Return to Visual Studio and stop debugging.
Exception handling and the Visual Studio debugger
By default, the Visual Studio debugger only stops an application that is
being debugged and reports exceptions that are unhandled. Sometimes it
is useful to be able to debug exception handlers themselves, and in this
case you need to be able to trace exceptions when they are thrown by
the application, before they are caught. You can easily do this. On the
Debug menu, click Windows and then click Exception Settings. The
Exception Settings pane appears below the Code and Text Editor
window:
Download from finelybook PI:EMAIL
249
In the Exception Settings pane, expand Common Language Runtime
Exceptions, scroll down, and select System.OverflowException:
Now, when exceptions such as OverflowException occur, Visual
Studio will drop into the debugger, and you can use the Step Into button
on the Debug toolbar to step into the catch handler.
Throwing exceptions
Download from finelybook PI:EMAIL
250
Suppose that you are implementing a method called monthName that accepts
a single int argument and returns the name of the corresponding month. For
example, monthName(1) returns “January,” monthName(2) returns
“February,” and so on. The question is, what should the method return if the
integer argument is less than 1 or greater than 12? The best answer is that the
method shouldn’t return anything at all—it should throw an exception. The
.NET Framework class libraries contain lots of exception classes specifically
designed for situations such as this. Most of the time, you will find that one
of these classes describes your exceptional condition. (If not, you can easily
create your own exception class, but you need to know a bit more about the
C# language before you can do that.) In this case, the existing .NET
Framework ArgumentOutOfRangeException class is just right. You can
throw an exception by using a throw statement, as shown in the following
example:
Click here to view code image
public static string monthName(int month)
{
   switch (month)
   {
      case 1 :
          return "January";
      case 2 :
          return "February";
      ...
      case 12 :
          return "December";
      default :
          throw new ArgumentOutOfRangeException("Bad month");
   }
}
The throw statement needs an exception object to throw. This object
contains the details of the exception, including any error messages. This
example uses an expression that creates a new
ArgumentOutOfRangeException object. The object is initialized with a string
that populates its Message property by using a constructor. Constructors are
covered in detail in Chapter 7, “Creating and managing classes and objects.”
In the following exercises, you will modify the MathsOperators project to
throw an exception if the user attempts to perform a calculation without
selecting a radio button for an operator.
Download from finelybook PI:EMAIL
251
Note This exercise is a little contrived, as any good application design
would have a default radio button selected initially, but this application
is intended to illustrate a point.
Throw an exception
1. Return to Visual Studio 2017.
2. On the Debug menu, click Start Debugging.
3. In the Left Operand box, type 24. In the Right Operand box, type 36,
and then click Calculate.
Nothing appears in the Expression and Result boxes. The fact that you
have not selected an operator option is not immediately obvious. It
would be useful to write a diagnostic message in the Result box.
4. Return to Visual Studio and stop debugging.
5. In the Code and Text Editor window displaying MainPage.xaml.cs,
locate and examine the calculateClick method, which should currently
look like this:
Click here to view code image
private int calculateClick(object sender, RoutedEventArgs e)
{
    try
    {
        if ((bool)addition.IsChecked)
        {
            addValues();
        }
        else if ((bool)subtraction.IsChecked)
        {
            subtractValues();
        }
        else if ((bool)multiplication.IsChecked)
        {
            multiplyValues();
        }
Download from finelybook PI:EMAIL
252
        else if ((bool)division.IsChecked)
        {
            divideValues();
        }
        else if ((bool)remainder.IsChecked)
        {
            remainderValues();
        }
    }
    catch (FormatException fEx)
    {
        result.Text = fEx.Message;
    }
    catch (OverflowException oEx)
    {
        result.Text = oEx.Message;
    }
}
The addition, subtraction, multiplication, division, and remainder fields
are the buttons that appear on the form. Each button has a property
called IsChecked that indicates whether the user has selected it. The
IsChecked property is a nullable Boolean that has the value true if the
button is selected or false otherwise. (You learn more about nullable
values in Chapter 8, “Understanding values and references.”) The
cascading if statement examines each button, in turn, to find which one
is selected. (The radio buttons are mutually exclusive , so that the user
can select only one radio button at most.) If none of the buttons is
selected, none of the if  statements will be true and none of the
calculation methods are called.
You could try to solve the problem by adding one more else statements
to the if-else cascade to write a message to the result text box on the
form, but a better solution is to separate the detection and signaling of an
error from the catching and handling of that error.
6. Add another else statement to the end of the list of if-else statements and
throw an InvalidOperationException, as shown in bold in the following
code:
Click here to view code image
if ((bool)addition.IsChecked)
{
    addValues();
Download from finelybook PI:EMAIL
253
}
...
else if ((bool)remainder.IsChecked)
{
    remainderValues();
}
else
{
    throw new InvalidOperationException("No operator selected");
}
7. On the Debug menu, click Start Debugging to build and run the
application.
8. In the Left Operand box, type 24. In the Right Operand box, type 36,
and then click Calculate.
Visual Studio detects that your application has thrown an
InvalidOperationException, and an exception dialog box opens. Your
application has thrown an exception, but the code does not catch it yet.
9. On the Debug menu, click Stop Debugging.
Now that you have written a throw statement and verified that it throws an
exception, you will write a catch handler to handle this exception.
Catch the exception
1. In the Code and Text Editor window displaying MainPage.xaml.cs, add
the following catch handler shown in bold immediately below the two
existing catch handlers in the calculateClick method:
Click here to view code image
...
catch (FormatException fEx)
{
    result.Text = fEx.Message;
}
catch (OverflowException oEx)
{
    result.Text = oEx.Message;
}
catch (InvalidOperationException ioEx)
{
    result.Text = ioEx.Message;
}
Download from finelybook PI:EMAIL
254
This code catches the InvalidOperationException that is thrown when
the user fails to select an operator radio button.
2. On the Debug menu, click Start Debugging.
3. In the Left Operand box, type 24. In the Right Operand box, type 36,
and then click Calculate.
The message “No operator selected” appears in the Result box.
Note If your application drops into the Visual Studio debugger,
you have probably enabled Visual Studio to catch all common
language runtime exceptions as they are thrown. If this happens, on
the Debug menu, click Continue. Remember to disable Visual
Studio from catching CLR exceptions as they are thrown when you
have finished this exercise!
4. Return to Visual Studio and stop debugging.
The application is now a lot more robust. However, several exceptions
could still arise that are not caught and will cause the application to fail. For
example, if you attempt to divide by 0, an unhandled DivideByZeroException
will be thrown. (Integer division by 0 does throw an exception, unlike
floating-point division by 0.) One way to solve this problem is to write an
ever-larger number of catch handlers inside the calculateClick method.
Another solution is to add a general catch handler that catches Exception at
the end of the list of catch handlers. This will trap all unexpected exceptions
that you might have forgotten about, or that might be caused as a result of
truly unusual circumstances.
Note Using a catchall handler to trap the Exception exception is not an
excuse to omit catching specific exceptions. The more definite you can
Download from finelybook PI:EMAIL
255
be in your exception handling, the easier it will be to maintain your
code and spot the causes of any underlying or commonly recurring
issues. Only use the Exception exception for cases that are really…
well, exceptional. For the following exercise, the “divide by zero”
exception falls into this category. However, having established that this
exception is a distinct possibility in a professional application, good
practice would be to add a handler for the DivideByZeroException
exception to the application.
Catch unhandled exceptions
1. In the Code and Text Editor window displaying MainPage.xaml.cs, add
the following catch handler to the end of the list of existing catch
handlers in the calculateClick method:
Click here to view code image
catch (Exception ex)
{
    result.Text = ex.Message;
}
This catch handler will catch all hitherto unhandled exceptions,
whatever their specific type.
2. On the Debug menu, click Start Debugging.
You will now attempt to perform some calculations known to cause
exceptions and confirm that they are all handled correctly.
3. In the Left Operand box, type 24. In the Right Operand box, type 36,
and then click Calculate.
Confirm that the diagnostic message “No operator selected” still appears
in the Result box. This message was generated by the
InvalidOperationException handler.
4. In the Left Operand box, type John, click the + Addition button and
then click Calculate.
Confirm that the diagnostic message “Input string was not in a correct
Download from finelybook PI:EMAIL
256
format” appears in the Result box. This message was generated by the
FormatException handler.
5. In the Left Operand box, type 24. In the Right Operand box, type 0.
Click the / Division button, and then click Calculate.
Confirm that the diagnostic message “Attempted to divide by zero”
appears in the Result box. This message was generated by the general
Exception handler.
6. Experiment with other combinations of values, and verify that exception
conditions are handled without causing the application to stop.
7. When you have finished, return to Visual Studio and stop debugging.
Using throw exceptions
A throw exception is semantically similar to a throw statement, except that it
can be used anywhere you can use an expression. For example, suppose you
want to set the string variable name to the value entered into the nameField
text box on a form, but only if the user has actually entered a value into that
field; otherwise, you want to throw a “Missing input” exception. You could
use the following code:
Click here to view code image
string name;
if (nameField.Text != "")
{
    name = nameField.Text;
}
else
{
    throw new Exception("Missing input"); // this is a throw
statement
}
Although this code does the job, it is a little ungainly and verbose. You
can simplify this block by using a throw expression together with another
operator called the “query-colon” or ?:. The query-colon operator acts like an
inline if…else statement for an expression. It is a ternary operator that takes
the following three operands: a Boolean expression, an expression to evaluate
Download from finelybook PI:EMAIL
257
and return if the Boolean expression is true, and another expression to
evaluate and return if the Boolean expression is false. You can use it with a
throw expression like this:
Click here to view code image
string name = nameField.Text != "" ? nameField.Text : throw new
Exception("Missing input"); // this is a throw expression
In this case, if the nameField text box is not empty the value of the Text
property is stored in the name variable. Otherwise the throw expression is
evaluated, which in turn, throws an exception. This code is much more
concise than the previous example.
Using a finally block
It is important to remember that when an exception is thrown, it changes the
flow of execution through the program. This means that you can’t guarantee
that a statement will always run when the previous statement finishes because
the previous statement might throw an exception. Remember that in this case,
after the catch handler has run, the flow of control resumes at the next
statement in the block holding this handler and not at the statement
immediately following the code that raised the exception.
Look at the example that follows, which is adapted from the code in
Chapter 5, “Using compound assignment and iteration statements.” It’s very
easy to assume that the call to reader.Dispose will always occur when the
while loop completes. After all, it’s right there in the code.
Click here to view code image
TextReader reader = ...;
...
string line = reader.ReadLine();
while (line != null)
{
    ...
    line = reader.ReadLine();
}
reader.Dispose();
Sometimes, it’s not an issue if one particular statement does not run, but
on many occasions, it can be a big problem. If the statement releases a
Download from finelybook PI:EMAIL
258
resource that was acquired in a previous statement, failing to execute this
statement results in the resource being retained. This example is just such a
case: when you open a file for reading, this operation acquires a resource (a
file handle), and you must ensure that you call reader.Dispose to release the
resource. If you don’t, sooner or later you’ll run out of file handles and be
unable to open more files. If you find that file handles are too trivial, think of
database connections instead.
The way to ensure that a statement is always run, whether or not an
exception has been thrown, is to write that statement inside a finally block. A