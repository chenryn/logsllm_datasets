corresponding “signing key” sj . Indeed, this combination is necessary to provide the implicit entity authentication. 
However, it also posts an obstacle to get a security proof since the simulator may also be unaware of sj . Fortunately, 
if  the  randomness  rj  is  chosen  from  a  big  enough  Gaussian  distribution,  then  the  value  rˆj  almost  obliterates  all 
information of sj . More speciﬁcally, the simulator can directly choose rˆj  such that rˆj  = sj d + rj  for some unknown 
rj  by computing yj  = (arˆj  + 2fˆ j ) − pj d, and programming the random oracle d = H1(j, i, yj , xi) correspondingly. 
Combining the properties of Gaussian distributions and the random oracle H1, we have that yj  is almost identically 
distributed  as  that  in  the  real  run  of  the  protocol.  Now,  we  check  the  randomness  of  kj  =  (pic + xi)ˆrj  + 2cgj . 
Note that for the test session, we can always guarantee that at least one of pi  and xi  is honestly generated (and thus 
is computationally indistinguishable from uniformly distributed element under the Ring-LWE assumption), or else 
there is no “secrecy” to protect at all if both pi  and xi  are chosen by the adversary. That is, the value pic + xi  is 
always  uniformly  distributed  if  c  is  invertible  in  Rq.  Again,  by  programming  c  =  H1(i, j, xi),  the  simulator  can 
actually replace  pic + xi  with  xˆi  =  c ui  for a uniformly distributed ring element  ui. In this case, we have that 
kj  = xˆirˆj  + 2cgj  = c(uirˆj  + 2gj ) should be computationally indistinguishable from a uniformly distributed element 
under the Ring-LWE assumption. In other words,  kj  can be used to derive a high min-entropy key material  σj  as 
required by using the Mod2  function. 
−1
Unfortunately, directly using “noise ﬂooding” has a signiﬁcant drawback, i.e., the requirement of a super-polynomially 
big standard deviation β, which may lead to a nightmare for practical performance due to a super-polynomially big 
modulus q for correctness and a very large ring dimension n for the hardness of the underlying Ring-LWE problems. 
Fortunately, we can somehow reduce the big cost by further employing the rejection sampling technique [50]. Rejec­
tion sampling is a crucial technique in signature schemes to make the distribution of signatures independent of the 
signing key. Since [50] it has been applied in many other lattice-based signature schemes [36,29,3,38]. 
In  our  case  the  combination  of  the  static  and  ephemeral  secret  keys,  rˆj  =  sj d + rj ,  at  party  j  is  essentially 
a signature on all the public messages under party  j’s public key (we again take party  j  as an example, but note 
that similar analysis also holds for party  i). Thus, we can freely use the rejection sampling technique to relax the 
requirement on a super-polynomially big β. In other words, we can use a much smaller β, but require party j to use 
rj  if  rˆj  =  sj d + rj  follows the distribution  χβ , and to resample a new  rj  otherwise. We note that by deploying 
rejection sampling in our AKE it is the ﬁrst time that rejection sampling is used beyond signature schemes. As for 
signatures, rejection sampling is done locally, and thus will not affect the interaction between the two parties, i.e., 
two-pass messages. Even though the computational performance of each execution might become worse with certain 
(small) probability (due to rejection and repeated sampling), the average computational cost is much better than the 
setting of using a super-polynomially big β. 
6  We remark that this is also the reason why the nice reconciliation mechanism in [59] cannot be used in our protocol. Speciﬁcally, 
it is unclear whether the reconciliation function rec(·, ·) in [59] could also preserve the high min-entropy property of the ﬁrst 
input (i.e., which might not be uniformly random) for any (maliciously chosen) second input. 
7  Actually,  noise  ﬂooding  works  conditioned  on  the  size  of  the  random  variable,  and  thus  does  not  require  to  be  distributed 
according to χα. 
4 
1.3  Related Work, Comparison and Discussion 
In the past few years, many cryptographers have put effort into constructing different kinds of KE protocols from lat­
tices. At Asiacrypt 2009, Katz and Vaikuntanathan [41] proposed the ﬁrst password-based authenticated key exchange 
protocol that can be proven secure based on the LWE assumption. Ding et al. [26] proposed a passive-secure KE proto­
col based on (Ring-)LWE. Like the standard DH protocol, the protocol in [26] could not provide authentication—i.e., 
it is not an AKE protocol—and is thus weak to man-in-the-middle attacks. Lei et al. [47] presented a KE protocol 
based on NTRU encryption and a new “NTRU-KE” assumption. 
Table  1.  Comparison  of  Lattice-based  AKEs  (CCA∗  means  CCA-security  with  high  min-entropy 
keys [31], and EUF-CMA means existential unforgeability under chosen message attacks) 
Protocols  KEM/PKE  Signature  Message-pass 
Model 
FSXY12 [31]  CCA∗ 
FSXY13 [32]  OW-CCA 
Peikert14 [59] 
BCNS14 [8] 
CPA 
CPA 
-
-
EUF-CMA 
EUF-CMA 
Ours 
-
-
2-pass 
2-pass 
3-pass 
4-pass 
2-pass 
CK 
CK 
RO?  Num. of Rq 
× 
√ 
SK-security  √ 
√ 
BR with wPFS  √ 
» 7 
7 
2 for KEM b 
ACCE 
> 2 a 
2 
a  The actual number of ring elements depends on the choice of the concrete lattice-based signatures.
b  Since the protocol uses traditional signatures to provide authentication, it does not contain any other ring elements.
To the best of our knowledge, there are four papers focusing on designing AKEs from lattices [31,59,32,8]. In 
general, all known lattice-based AKE protocols work by following generic transformations from key encapsulation 
mechanisms (KEM) to AKEs and explicitly using signatures to provide authentication. Fujioka et al. [31] proposed 
a generic construction of AKE from KEMs, which can be proven secure in the CK model. Informally, they showed 
that  if  there  is  a  CCA  secure  KEM  with  high  min-entropy  keys  and  a  family  of  pseudorandom  functions  (PRF), 
then there is a secure AKE protocol in the standard model. Instantiated with lattice-based CCA secure KEMs such 
as [60,57], it is possible to construct lattice-based AKE protocols in the standard model. However, as the authors 
commented, their construction was just of theoretic interest due to huge public keys and the lack of an efﬁcient and 
direct construction of PRFs from (Ring-)LWE. Following [31], the paper [32] tried to get a practical AKE protocol, 
and gave a generic construction from any one-way CCA-secure KEM in the random oracle model. The two protocols 
in [31,32] share some similarities such as having two-pass messages, and involving three times encryptions (i.e., two 
encryptions under each party’s static public keys and one encryption under an ephemeral public key). For concreteness, 
instantiated with the CPA-secure encryption from Ring-LWE [52] (i.e., by ﬁrst transforming it into a CCA-secure one 
using the Fujisaki-Okamoto (FO) transformation in the random oracle model), the protocol in [32] requires to exchange 
seven ring elements in total. 
Recently, Peikert [59] presented an efﬁcient KEM based on Ring-LWE, which was then transformed into an AKE 
protocol by using the same structure as SIGMA [43]. The resulting protocol involved one encryption, and two sig­
natures and two MACs for explicit entity authentication. As the SIGMA protocol, the protocol in [59] has three-pass 
messages and was proven SK-secure [15] in the random oracle model. Bos et al. [8] treated Peikert’s KEM as a DH-
like KE protocol, and integrated it into the Transport Layer Security (TLS) protocol. Thus, their AKE protocol also 
employed signatures to provide explicit authentication. In fact, they used the traditional digital signatures such as RSA 
and ECDSA to provide authentication (i.e., it is not a pure post-quantum AKE protocol). The security of their protocol 
was proven in the authenticated and conﬁdential channel establishment (ACCE) security model [40], which is based 
on the BR model, but has many differences to capture entity authentication and channel security. 
Since the lack of concrete security analysis and parameter choices in the literature, we only give a theoretical 
comparison of lattice-based AKEs in Table 1. In summary, our protocol only has two-pass messages (about two ring 
elements) and does not use signatures/MACs at al, and its security solely relies on the hardness of Ring-LWE. To the 
best of our knowledge there is not a single post-quantum authenticated key exchange protocol (until this work) which 
5 
solely relies on a quantum-hard computational problem and does not make use of explicit cryptographic primitives 
except hash functions. 
1.4  Roadmap 
In the preliminaries section, we recall the BR model and several useful tools on lattices. Then, we give a two-pass 
AKE protocol from ideal lattices in Section 3, and prove its security based on Ring-LWE problems in Section 4. In 
Section 5, we present the one-pass variant of our protocol. The concrete choices of parameters and timings are given 
in Section 6. 
2  Preliminaries 
2.1  Notation 
Let  κ  be  the  natural  security  parameter,  and  all  quantities  are  implicitly  dependent  on  κ.  Let  poly(κ)  denote  an 
unspeciﬁed function  f (κ)  =  O(κc) for some constant  c. The function  log  denotes the natural logarithm. We use 
standard notation O, ω to classify the growth of functions. If f (κ)  =  O(g(κ) · logc κ), we denote f (κ)  =  O˜(g(κ)). 
We say a function f (κ) is negligible if for every c > 0, there exists a N such that f (κ)  N . We use 
negl(κ) to denote a negligible function of κ, and we say a probability is overwhelming if it is 1 − negl(κ). 
The set of real numbers (integers) is denoted by R (Z, resp.). We use ←r  to denote randomly choosing an element 
from some distribution (or the uniform distribution over some ﬁnite set). Vectors are in column form and denoted by 
bold lower-case letters (e.g., x). The £2  and £∞  norms we designate by 1·1 and 1·1∞. The ring of polynomials over Z 
(Zq  = Z/qZ, resp.) we denote by Z[x] (Zq[x], resp.). 
Let X be a distribution over ﬁnite set S. The min-entropy of X is deﬁned as 
H∞(X) = − log(max Pr[X  = s]). 
s∈S 
Intuitively, the min-entropy says that if we (privately) choose x from X  at random, then no (unbounded) algorithm 
can guess the value of x correctly with probability greater than 2−H∞(X). 
2.2  Security Model for AKE 
We now recall the Bellare-Rogaway security model [7], restricted to the case of two-pass AKE protocol. 
Sessions  We ﬁx a positive integer N  to be the maximum number of honest parties that use the AKE protocol. Each 
party is uniquely identiﬁed by an integer i in {1, 2, . . . , N }, and has a static key pair consisting of a static secret key ski 
and static public key pki, which is signed by a Certiﬁcate Authority (CA). A single run of the protocol is called a 
session. A session is activated at a party by an incoming message of the form (Π, I , i, j ) or the form (Π, R, j, i, Xi), 
where Π is a protocol identiﬁer; I and R are role identiﬁers; i and j are party identiﬁers. If party i receives a message 
of the form (Π, I , i, j ), we say that i is the session initiator. Party i then outputs the response Xi  intended for party j. 
If party j receives a message of the form (Π, R, j, i, Xi), we say that j is the session responder; party j then outputs 
a response Yj  to party i. After exchanging these messages, both parties compute a session key. 
If  a  session  is  activated  at  party  i  with  i  being  the  initiator,  we  associate  with  it  a  session  identiﬁer  sid  = 
(Π, I , i, j, Xi) or  sid  =  (Π, I , i, j, Xi, Yj ). Similarly, if a session is activated at party  j  with  j  being the respon­
der, the session identiﬁer has the form sid = (Π, R, j, i, Xi, Yj ). For a session identiﬁer sid = (Π, ∗, i, j, ∗[, ∗]), the 
third coordinate—that is, the ﬁrst party identiﬁer—is called the owner of the session; the other party is called the peer 
of the session. A session is said to be completed when its owner computes a session key. The matching session of 
sid = (Π, I , i, j, Xi, Yj ) is the session with identiﬁer ssid = (Π, R, j, i, Xi, Yj ) and vice versa. 
6 
Adversarial Capabilities  We model the adversary A as a probabilistic polynomial time (PPT) Turing machine with 
full control over all communications channels between parties, including control over session activations. In particular, 
A can intercept all messages, read them all, and remove or modify any desired messages as well as inject its own 
messages. We also suppose A is capable of obtaining hidden information about the parties, including static secret keys 
and session keys to model potential leakage of them in genuine protocol executions. These abilities are formalized by 
providing A with the following oracles (we split the Send query in [14] into Send0, Send1  and Send2  queries for 
the case of two-pass protocols): 
–	 Send0(Π, I , i, j ): A activates party i as an initiator. The oracle returns a message Xi  intended for party j. 
–	 Send1(Π, R, j, i, Xi): A activates party j  as a responder using message Xi. The oracle returns a message Yj 
–	 Send2(Π, R, i, j, Xi, Yj ): A  sends  party  i  the  message  Yj  to  complete  a  session  previously  activated  with  a 
intended for party i. 
Send0(Π, I , i, j ) query that returned Xi. 
ated. 
–	 SessionKeyReveal(sid): The oracle returns the session key associated with the session sid if it has been gener­
–	 Corrupt(i): The oracle returns the static secret key belonging to party i. A party whose key is given to A in this 
way is called dishonest; a party not compromised in this way is called honest. 
–	 Test(sid ∗ ): The oracle chooses a bit b ←r  {0, 1}. If b = 0, it returns a key chosen uniformly at random; if b = 1, 
it returns the session key associated with sid ∗. Note that we impose some restrictions on this query. We only allow 
A to query this oracle once, and only on a fresh (see Deﬁnition 1) session sid ∗ . 