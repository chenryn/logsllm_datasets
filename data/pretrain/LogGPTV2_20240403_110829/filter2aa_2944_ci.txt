particularly important on low-power devices because some secure element chips pro-
vide hardware support for AES (and even public key cryptography) but have no sup-
port for SHA-256 or other hash functions, requiring devices to fall back on slower and
less efficient software implementations.
NOTE
You’ll recall from chapter 11 that HKDF consists of two functions: an
extract function that derives a master key from some input key material, and
an expand function that derives one or more new keys from the master key.
When used with a hash function, COSE’s HKDF performs both functions.
When used with AES it only performs the expand phase; this is fine because
the input key is already uniformly random as explained in chapter 11.8 
In addition to symmetric authenticated encryption, COSE supports a range of public
key encryption and signature options, which are mostly very similar to JOSE, so I
won’t cover them in detail here. One public key algorithm in COSE that is worth high-
lighting in the context of IoT applications is support for elliptic curve Diffie-Hellman
(ECDH) with static keys for both the sender and receiver, known as ECDH-SS. Unlike
the ECDH-ES encryption scheme supported by JOSE, ECDH-SS provides sender
authentication, avoiding the need for a separate signature over the contents of each
message. The downside is that ECDH-SS always derives the same key for the same pair of
sender and receiver, and so can be vulnerable to replay attacks and reflection attacks,
and lacks any kind of forward secrecy. Nevertheless, when used with HKDF and mak-
ing use of the context fields in table 12.4 to bind derived keys to the context in which
they are used, ECDH-SS can be a very useful building block in IoT applications.
12.3.2 Alternatives to COSE
Although COSE is in many ways better designed than JOSE and is starting to see wide
adoption in standards such as FIDO 2 for hardware security keys (https://fidoalliance
.org/fido2/), it still suffers from the same problem of trying to do too much. It sup-
ports a wide variety of cryptographic algorithms, with varying security goals and quali-
ties. At the time of writing, I counted 61 algorithm variants registered in the COSE
algorithms registry (http://mng.bz/awDz), the vast majority of which are marked as
recommended. This desire to cover all bases can make it hard for developers to know
which algorithms to choose and while many of them are fine algorithms, they can lead
to security issues when misused, such as the accidental nonce reuse issues you’ve
learned about in the last few sections.
8 It’s unfortunate that COSE tries to handle both cases in a single class of algorithms. Requiring the expand
function for HKDF with a hash function is inefficient when the input is already uniformly random. On the
other hand, skipping it for AES is potentially insecure if the input is not uniformly random.
473
End-to-end security
If you need standards-based interoperability with other software, the COSE can be a
fine choice for an IoT ecosystem, so long as you approach it with care. In many cases,
however, interoperability is not a requirement because you control all of the software
and devices being deployed. In this a simpler approach can be adopted, such as using
NaCl (the Networking and Cryptography Library; https://nacl.cr.yp.to) to encrypt
and authenticate a packet of data just as you did in chapter 6. You can still use CBOR
or another compact binary encoding for the data itself, but NaCl (or a rewrite of it,
like libsodium) takes care of choosing appropriate cryptographic algorithms, vetted
by genuine experts. Listing 12.14 shows how easy it is to encrypt a CBOR object using
NaCl’s SecretBox functionality (in this case through the pure Java Salty Coffee library
you used in chapter 6), which is roughly equivalent to the COSE example from the
previous section. First you load or generate the secret key, and then you encrypt your
CBOR data using that key.
var key = SecretBox.key();       
var cborMap = CBORObject.NewMap()    
        .Add("foo", "bar")           
        .Add("data", 12345);         
var box = SecretBox.encrypt(key, cborMap.EncodeToBytes());    
System.out.println(box);
NaCl’s secret box is relatively well suited to IoT applications for several reasons:
 It uses a 192-bit per-message nonce, which minimizes the risk of accidental
nonce reuse when using randomly generated values. This is the maximum size
SHA-3 and STROBE
The US National Institute of Standards and Technology (NIST) recently completed an
international competition to select the algorithm to become SHA-3, the successor to
the widely used SHA-2 hash function family. To protect against possible future weak-
nesses in SHA-2, the winning algorithm (originally known as Keccak) was chosen
partly because it is very different in structure to SHA-2. SHA-3 is based on an elegant
and flexible cryptographic primitive known as a sponge construction. Although SHA-3
is relatively slow in software, it is well-suited to efficient hardware implementations.
The Keccak team have subsequently implemented a wide variety of cryptographic
primitives based on the same core sponge construction: other hash functions, MACs,
and authenticated encryption algorithms. See https://keccak.team for more details.
Mike Hamburg’s STROBE framework (https://strobe.sourceforge.io) builds on top of
the SHA-3 work to create a framework for cryptographic protocols for IoT applications.
The design allows a single small core of code to provide a wide variety of crypto-
graphic protections, making a compelling alternative to AES for constrained devices.
If hardware support for the Keccak core functions becomes widely available, then
frameworks like STROBE may become very attractive.
Listing 12.14
Encrypting CBOR with NaCl
Create or load a key.
Generate some 
CBOR data.
Encrypt 
the data.
474
CHAPTER 12
Securing IoT communications
of nonce, so you can use a shorter value if you absolutely need to save space
and pad it with zeroes before decrypting. Reducing the size increases the risk
of accidental nonce reuse, so you should avoid reducing it to much less than
128 bits.
 The XSalsa20 cipher and Poly1305 MAC used by NaCl can be compactly imple-
mented in software on a wide range of devices. They are particularly suited to
32-bit architectures, but there are also fast implementations for 8-bit microcon-
trollers. They therefore make a good choice on platforms without hardware
AES support.
 The 128-bit authentication tag use by Poly1305 is a good trade-off between secu-
rity and message expansion. Although stronger MAC algorithms exist, the
authentication tag only needs to remain secure for the lifetime of the message
(until it expires, for example), whereas the contents of the message may need
to remain secret for a lot longer.
If your devices are capable of performing public key cryptography, then NaCl also
provides convenient and efficient public key authenticated encryption in the form the
CryptoBox class, shown in listing 12.15. The CryptoBox algorithm works a lot like
COSE’s ECDH-SS algorithm in that it performs a static key agreement between the
two parties. Each party has their own key pair along with the public key of the other
party (see section 12.4 for a discussion of key distribution). To encrypt, you use your
own private key and the recipient’s public key, and to decrypt, the recipient uses their
private key and your public key. This shows that even public key cryptography is not
much more work when you use a well-designed library like NaCl.
WARNING
Unlike COSE’s HKDF, the key derivation performed in NaCl’s
crypto box doesn’t bind the derived key to any context material. You should
make sure that messages themselves contain the identities of the sender and
recipient and sufficient context to avoid reflection or replay attacks.
var senderKeys = CryptoBox.keyPair();       
var recipientKeys = CryptoBox.keyPair();    
var cborMap = CBORObject.NewMap()
        .Add("foo", "bar")
        .Add("data", 12345);
var sent = CryptoBox.encrypt(senderKeys.getPrivate(),          
        recipientKeys.getPublic(), cborMap.EncodeToBytes());   
var recvd = CryptoBox.fromString(sent.toString());
var cbor = recvd.decrypt(recipientKeys.getPrivate(),     
        senderKeys.getPublic());                         
System.out.println(CBORObject.DecodeFromBytes(cbor));
Listing 12.15
Using NaCl’s CryptoBox
The sender and recipient 
each have a key pair.
Encrypt using your 
private key and 
the recipient’s 
public key.
The recipient 
decrypts with their 
private key and 
your public key.
475
End-to-end security
12.3.3 Misuse-resistant authenticated encryption
Although NaCl and COSE can both be used in ways that minimize the risk of nonce
reuse, they only do so on the assumption that a device has access to some reliable
source of random data. This is not always the case for constrained devices, which
often lack access to good sources of entropy or even reliable clocks that could be
used for deterministic nonces. Pressure to reduce the size of messages may also
result in developers using nonces that are too small to be randomly generated safely.
An attacker may also be able to influence conditions to make nonce reuse more
likely, such as by tampering with the clock, or exploiting weaknesses in network pro-
tocols, as occurred in the KRACK attacks against WPA2 (https://www.krackattacks
.com). In the worst case, where a nonce is reused for many messages, the algorithms
in NaCl and COSE both fail catastrophically, enabling an attacker to recover a lot of
information about the encrypted data and in some cases to tamper with that data or
construct forgeries.
 To avoid this problem, cryptographers have developed new modes of operation
for ciphers that are much more resistant to accidental or malicious nonce reuse.
These modes of operation achieve a security goal called misuse-resistant authenticated
encryption (MRAE). The most well-known such algorithm is SIV-AES, based on a
mode of operation known as Synthetic Initialization Vector (SIV; https://tools.ietf.org/
html/rfc5297). In normal use with unique nonces, SIV mode provides the same
guarantees as any other authenticated encryption cipher. But if a nonce is reused, a
MRAE mode doesn’t fail as catastrophically: an attacker could only tell if the exact
same message had been encrypted with the same key and nonce. No loss of authen-
ticity or integrity occurs at all. This makes SIV-AES and other MRAE modes much
safer to use in environments where it might be hard to guarantee unique nonces,
such as IoT devices.
DEFINITION
A cipher provides misuse-resistant authenticated encryption (MRAE)
if accidental or deliberate nonce reuse results in only a small loss of security.
An attacker can only learn if the same message has been encrypted twice with
the same nonce and key and there is no loss of authenticity. Synthetic Initializa-
tion Vector (SIV) mode is a well-known MRAE mode, and SIV-AES the most com-
mon use of it.
SIV mode works by computing the nonce (also known as an Initialization Vector or
IV) using a pseudorandom function (PRF) rather than using a purely random value
or counter. Many MACs used for authentication are also PRFs, so SIV reuses the MAC
used for authentication to also provide the IV, as shown in figure 12.8.
CAUTION
Not all MACs are PRFs so you should stick to standard implementa-
tions of SIV mode rather than inventing your own.
476
CHAPTER 12
Securing IoT communications
The encryption process works by making two passes over the input:
1
First, a MAC is computed over the plaintext input and any associated data.9 The
MAC tag is known as the Synthetic IV, or SIV.
2
Then the plaintext is encrypted using a different key using the MAC tag from
step 1 as the nonce.
The security properties of the MAC ensure that it is extremely unlikely that two differ-
ent messages will result in the same MAC tag, and so this ensures that the same nonce
is not reused with two different messages. The SIV is sent along with the message, just
as a normal MAC tag would be. Decryption works in reverse: first the ciphertext is
decrypted using the SIV, and then the correct MAC tag is computed and compared
with the SIV. If the tags don’t match, then the message is rejected.
WARNING
Because the authentication tag can only be validated after the mes-
sage has been decrypted, you should be careful not to process any decrypted
data before this crucial authentication step has completed.
In SIV-AES, the MAC is AES-CMAC, which is an improved version of the AES-CBC-
MAC used in COSE. Encryption is performed using AES in CTR mode. This means
9 The sharp-eyed among you may notice that this is a variation of the MAC-then-Encrypt scheme that we said
in chapter 6 is not guaranteed to be secure. Although this is generally true, SIV mode has a proof of security
so it is an exception to the rule.
{“sensor”: “abc123”,”data”:…}
AES-CMAC
MAC key
AES-CTR
Ciphertext
Encryption
key
IV
Authentication tag
In SIV mode, the MAC tag is
used as the IV for encryption.
AES-SIV only needs an AES encryption
circuit for all operations.
Figure 12.8
SIV mode uses the MAC authentication tag as the IV for encryption. This 
ensures that the IV will only repeat if the message is identical, eliminating nonce reuse 
issues that can cause catastrophic security failures. SIV-AES is particularly suited to IoT 
environments because it only needs an AES encryption circuit to perform all operations 
(even decryption). 
477
End-to-end security
that SIV-AES has the same nice property as AES-CCM: it requires only an AES encryp-
tion circuit for all operations (even decryption), so can be compactly implemented.
So far, the mode I’ve described will always produce the same nonce and the same
ciphertext whenever the same plaintext message is encrypted. If you recall from chap-
ter 6, such an encryption scheme is not secure because an attacker can easily tell if the
same message has been sent multiple times. For example, if you have a sensor sending
packets of data containing sensor readings in a small range of values, then an observer
Side-channel and fault attacks
Although SIV mode protects against accidental or deliberate misuse of nonces, it
doesn’t protect against all possible attacks in an IoT environment. When an attacker
may have direct physical access to devices, especially where there is limited physical
protection or surveillance, you may also need to consider other attacks. A secure ele-
ment chip can provide some protection against tampering and attempts to read keys
directly from memory, but keys and other secrets may also leak though many side
channels. A side channel occurs when information about a secret can be deduced by
measuring physical aspects of computations using that secret, such as the following:
 The timing of operations may reveal information about the key. Modern crypto-
graphic implementations are designed to be constant time to avoid leaking
information about the key in this way. Many software implementations of AES
are not constant time, so alternative ciphers such as ChaCha20 are often
preferred for this reason.
 The amount of power used by a device may vary depending on the value of
secret data it is processing. Differential power analysis can be used to
recover secret data by examining how much power is used when processing
different inputs.
 Emissions produced during processing, including electromagnetic radiation,
heat, or even sounds have all been used to recover secret data from cryp-
tographic computations.
As well as passively observing physical aspects of a device, an attacker may also
directly interfere with a device in an attempt to recover secrets. In a fault attack, an
attacker disrupts the normal functioning of a device in the hope that the faulty oper-
ation will reveal some information about secrets it is processing. For example, tweak-
ing the power supply (known as a glitch) at a well-chosen moment might cause an
algorithm to reuse a nonce, leaking information about messages or a private key. In
some cases, deterministic algorithms such as SIV-AES can actually make fault attacks
easier for an attacker.
Protecting against side-channel and fault attacks is well beyond the scope of this
book. Cryptographic libraries and devices will document if they have been designed
to resist these attacks. Products may be certified against standards such as FIPS
140-2 or Commons Criteria, which both provide some assurance that the device will
resist some physical attacks, but you need to read the fine print to determine exactly
which threats have been tested.
478
CHAPTER 12
Securing IoT communications
may be able to work out what the encrypted sensor readings are after seeing enough
of them. This is why normal encryption modes add a unique nonce or random IV in
every message: to ensure that different ciphertext is produced even if the same mes-
sage is encrypted. SIV mode solves this problem by allowing you to include a random
IV in the associated data that accompanies the message. Because this associated data
is also included in the MAC calculation, it ensures that the calculated SIV will be dif-
ferent even if the message is the same. To make this a bit easier, SIV mode allows
more than one associated data block to be provided to the cipher—up to 126 blocks
in SIV-AES.
 Listing 12.16 shows an example of encrypting some data with SIV-AES in Java using
an open source library that implements the mode using AES primitives from Bouncy
Castle.10 To include the library, open the pom.xml file and add the following lines to
the dependencies section:
      org.cryptomator
      siv-mode
      1.3.2
SIV mode requires two separate keys: one for the MAC and one for encryption and
decryption. The specification that defines SIV-AES (https://tools.ietf.org/html/rfc5297)
describes how a single key that is twice as long as normal can be split into two, with the
first half becoming the MAC key and the second half the encryption key. This is
demonstrated in listing 12.16 by splitting the existing 256-bit PSK key into two 128-bit
keys. You could also derive the two keys from a single master key using HKDF, as you
learned in chapter 11. The library used in the listing provides encrypt() and decrypt()
methods that take the encryption key, the MAC key, the plaintext (or ciphertext for
decryption), and then any number of associated data blocks. In this example, you’ll
pass in a header and a random IV. The SIV specification recommends that any ran-
dom IV should be included as the last associated data block.
TIP
The SivMode class from the library is thread-safe and designed to be
reused. If you use this library in production, you should create a single
instance of this class and reuse it for all calls.
var psk = PskServer.loadPsk("changeit".toCharArray());           
var macKey = new SecretKeySpec(Arrays.copyOfRange(psk, 0, 16),   
        "AES");                                                  
var encKey = new SecretKeySpec(Arrays.copyOfRange(psk, 16, 32),  
        "AES");                                                  
10
At 4.5MB, Bouncy Castle doesn't qualify as a compact implementation, but it shows how SIV-AES can be eas-
ily implemented on the server.
Listing 12.16
Encrypting data with SIV-AES
Load the key 
and split into 
separate MAC and 
encryption keys.
479
Key distribution and management
var randomIv = new byte[16];               
new SecureRandom().nextBytes(randomIv);    
var header = "Test header".getBytes();
var body = CBORObject.NewMap()
        .Add("sensor", "F5671434")
        .Add("reading", 1234).EncodeToBytes();
var siv = new SivMode();
var ciphertext = siv.encrypt(encKey, macKey, body,      
        header, randomIv);                              
var plaintext = siv.decrypt(encKey, macKey, ciphertext,     
        header, randomIv);                                  
12.4
Key distribution and management
In a normal API architecture, the problem of how keys are distributed to clients and
servers is solved using a public key infrastructure (PKI), as you learned in chapter 10.
To recap:
 In this architecture, each device has its own private key and associated public key. 
 The public key is packaged into a certificate that is signed by a certificate author-
ity (CA) and each device has a permanent copy of the public key of the CA. 
 When a device connects to another device (or receives a connection), it pres-
ents its certificate to identify itself. The device authenticates with the associated
private key to prove that it is the rightful holder of this certificate.
 The recipient can verify the identity of the other device by checking that its cer-
tificate is signed by the trusted CA and has not expired, been revoked, or in any
other way become invalid.
This architecture can also be used in IoT environments and is often used for more
capable devices. But constrained devices that lack the capacity for public key cryptog-
raphy are unable to make use of a PKI and so other alternatives must be used, based
Pop quiz
5
Misuse-resistant authenticated encryption (MRAE) modes of operation protect
against which one of the following security failures?
a
Overheating
b
Nonce reuse
c
Weak passwords
d
Side-channel attacks
e
Losing your secret keys
6
True or False: SIV-AES is just as secure even if you repeat a nonce.
The answers are at the end of the chapter.
Generate a random IV 
with the best entropy 
you have available.
Encrypt the body 
passing the header 
and random IV as 
associated data.
Decrypt by passing 
the same associated 
data blocks.
480
CHAPTER 12
Securing IoT communications
on symmetric cryptography. Symmetric cryptography is efficient but requires the API
client and server to have access to the same key, which can be a challenge if there are
a large number of devices involved. The key distribution techniques described in the
next few sections aim to solve this problem.
12.4.1 One-off key provisioning
The simplest approach is to provide each device with a key at the time of device
manufacture or at a later stage when a batch of devices is initially acquired by an orga-
nization. One or more keys are generated securely and then permanently stored in
read-only memory (ROM) or EEPROM (electrically erasable programmable ROM)
on the device. The same keys are then encrypted and packaged along with device