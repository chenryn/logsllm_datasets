insert
end *underline* underline
endYou can make the text appear
.t insert
insert
end *raised* raised
-t
.t
insert
insert
end*sunken*sunken
.t insert
insert
end *\nJustification* bold
end
Text'
.t insert
end*\nright justification*right
t
insert
end
\n center justiticatiorcenter
.t
insert
end\nleft justification·left
.t insert
p[oq. :sadyiosqns pue xadngu\. pue
.t insert
end*Text can be
.t insert
Iadns ,2adns.pue
t
insert
qns.qns.pua
.10.pua
-t
.t insert
insert
end·seripted
:t insert end *Text can be made to react to the user interactions* colorOnEnter
t insert end *\nBindings: * bold
.t insert
end *\nEnbedded windows:
.t insert end *You can insert labels *
*bold
.t window
create end -window.t.1
.t window ereate end -window,t.b
.t insert
end * or any kind ot windows *
运行这个程序的时候，我们将看到如图16-9所示的窗口。
图16-9
加入iava编程群：524621833
---
## Page 517
第16章X富口系统的程序设计
499
操作注释：
在这个例子里创建出来的第一个文本窗口和那个卷屏条勾画出基本的操作界面。然后依次
创建出所有的内部窗口（..和t.b）、但并没有立刻安排它们显示在窗口里，因为我们将把它们
插人到文本素材里。接着，我们用各种配置选项把将要用到的绑定标签配置好。请看下面这个
配置命令：
它将创建出一个名为bold的标签。带这个标签的字符将以字体“.*-Courier-Bold-O-Normal-
*-120-******”的形式被插入到文本素材里去。我们一会儿再介绍Tk对字体的管理。类似地，
带blueFg标签的字符在插入时将被显示为蓝色。
其实我们并不需要明确地创建出文本的标签。当我们插入一段带food标签的文本时，
foo将被自动创建出来。我们在这里采用的做法是预先配置好这些标签、而程序也就在
我们进行配置时创建出它们来
接下来，我们按下面的命令格式插入带标签的文本：
text_widget insert index chars tagliat chara tagliat...
index是一个用来指明文本中某个特定位置的字符串（类似于数组的下标），比如字符的插入
位置，或者某个字符范围的首尾位置等。这类文本“下标”的语法是：
base modifier nodifier modifier ...
base给出了起始点位置，各个modifier对下标进行相对于起始点的移位或调整。modifier可
以从起始点开始朝两个方向移动下标。
下标的起始点base必须是表16-4中的某一项：
表16-4
Inde x Base
说明
line.char
代表第line行的第char个字符
X*x6
代表文本窗口里的一个学符，它正好签佐坐标值为x和y的那个像素
mark
代表紧跟在书签mark后面的部个字符
tag.first
代表文本里带tag标签的第一个字符。uag.hst代表类似的最后一个字符
pathname
代表路径名为pathname的嵌人窗口的位置
modifier可以是表16-5中的格式：
表16-5
modifier
说明
+count chars
把下标向前调整coum个字符
-count chars
把下标向后调整count个字符
+count lines
把下标向前调整count行
加入jaVa编程群：524621833
---
## Page 518
500
Linux程序设计
（续）
modifier
说明
-count lines
把下标向后调整com行
Linestart
调那下标指向这一行的第一个字符
Lineend
调整下标指向这-行的最后-个字符
wordstart
调整下标指向包含当前下标的那个单词的第一个学符
Wordend
调整下标指向包含当前下标的那个单词的最后一个字符
我们可以给某个特定的文本段加上一个以上的标签。比如说，文本可以同时加黑和倾斜，
成为加黑的斜体字。在插人文本的时候，必须指定它们的插人位置。在我们刚才的例子里，
“end”意味着“把文本插人前面显示过的最后一个字符之后”。在文本里，下标也可以加有标签
和书签，所以下面这个文本命令：
.c insert end *right justification*right
将把文字“rightjustification”插人到文本素材里所有文字之后，并且居右摆放。
文本素材支持大量的特性，我们建议读者认真阅读由man命令给出的关于文本的使
用手册至，并且仔细学习Tk发行版本里自带的文本演示程序。在结束我们对文本的介
绍之前，可以想象一下用Motif或Xlib来实现剧才那个例子会是什么情况。如果用的是
Motif，它可能会有好几百行：而如果用的是Xlib，可能就是几千行了。Tk的作用就是
这么巨大！
11.画布
我们用Tk的画布（Canvas）素材实现结构化的图像。画布能够显示任意个数的图形元素，
包括矩形、圆形、直线、文本和嵌人窗口，这些元累可以被操作（移动或着色）和响应用户的
动作。比如说，我们可以让某个特定的图形元素在用户在它上面点击鼠标按钮时改变自己的背
景颜色。
在开始学习画布素材之前，我们先来介绍一些理论知识，先来看看图形元素的标识代码
（identifier）和图签（tag）概念。
当我们在画布里创建出一个图形元素的时候，它会分配到一个独一无二的整数标识代码。
图形元素可以有任意个数的图签关联在它自己身上。图签是一串字符，可以是整数以外的任何
形式。图签被用于图形元素的归组、标识和操作目的。同一个图签可以关联许多个图形元素，
把它们归组为一个类别。画布中的每个图形元素都可以通过它的ID（标识代码）或与它关联的
图签被标识出来。图签all隐含地关联着画布中的每一个元素。画布里的每个图形元素都有一个
绘制区，鼠标光标在画布上移动时会落在某些图形元素的绘制区里（因为图形元素可以重叠，
所以鼠标光标所在位置可能是几个图形元素的绘制区）.图签current指的就是位于屏幕窗口画面
最顶部的那个图形元素，这个图签由Tk自动管理。
当我们在画布素材命令里指定图形元素时，如果用的是一个整数，我们就认为它指的是具
加入jaVa编程群：524621833
---
## Page 519
第16章X窗口系统的程序设计501
有该ID值的那个图形元素；如果用的不是一个整数，我们就认为它指的是画布里其图签匹配上
这个指定符的所有图形元素。在下面的例子里，我们使用的tagOrld符号既可以是一个只选定一
个图彩元素的ID，也可以是一个选定零个或多个图形元素的图签。
在画布上创建任何一个图形元素都必须指定它的摆放位置。图形元素的摆放位置是出一些
浮点数字指定的，这些数字的前面还可以加上可选的单个字母m、c、i和p，这几个字母的含
义是：
*m表示毫米。
*c表示厘米。
·i表示英寸。
*p表示点阵数。
如果坐标数字前面没有这几个字母，程序就默认该数值是一个点阵数。现在向大家介绍几
个画布命令，看它们都是干什么用的。在下面这些命令里，pathName标识符指的是画布的路径
名。第一个命令：
pathName create arc xl y1 x2 y2 7option value option value ...?
它的作用是在画布上创建一个arc图形元素（弧线），弧线是由一个椭圆定义的，面数字x1
ylx2y2给出了这个椭圆外接矩形区域的坐标。上面这条命令的选项包括-extent、-fill和-outline
等。请看下面例子：
 set k [.c create are 10 10 50 50 -fi11 red -outline blue -tags redArc]
这条命令在画布.c里创建了一个arc图形元素，Sk给出了它的ID值。它的边界线是蓝色的。
这条弧线被包围在一个矩形区域里，矩形的画布坐标是10105050，并且被填充为红色。这条
弧线还关联有一个redArc图签。
pathMaee itemcontiguxe tag0rId 7option value option value ...?
这个命令的作用与-configure素材命令很相似，两者的区别在于前者被用来修改只与图形
元素有关的选项，而不是修改整个画布素材：被修改图形元素是由tagOrld指定的。请看下面的
例子：
.c itemconfigure redArc -fi1l yellow
它把所有与图签redArc关联着的图形元素的fill（填充）颜色改为黄色。
pathNane type tagOrld
这条命令的作用是返回由tagOrld指定的图形元素名单里的第一个元素的类型。比如说：
.c type redArc
pathame bind tagOrId 7sequence? ?coemand?
这个命令的作用与bind命令很相似，但它不是对整个画布进行操作，面是只对由tagOrld指
定的图形元素进行处理。如果没有给出command参数，它将返回与画布图形元素tagOrld的绑定
序列sequence关联着的所有命令。如果既没有给出sequence参数也没有给出command参数，就将
加入jaVa编程群：524621833
---
## Page 520
502Linux程序设计
返回所有与该图形元素绑定着的序列。请看：
.c bind $k*.c itemcontigure redAre -fil1 blus*
第一个绑定操作将把那个与“tagOrldSk”关联着的图形元素在鼠标进人它的时候填充为蓝
色。第二个绑定操作将把那些与redArc关联着的图形元素在鼠标离开它们的时候都填充为红色。
文本和画布支持的命令实在是太多了，要想只靠这一章把它们全部论述到肯定是不行的。
我们强烈建议大家仔细阅读canvas和text的man手册页，那里有大量的经典示例可以帮助大家更
好地掌握这两种素材。下面这个小程序只演示了很少的几个功能。
动手试试：画布上的文字
1）先创建面布和在它上面显示的几个对象：一把茶壶的图像、茶壶图像上的一行文字、另
外一个文本对象—它提示用户可以移动图形元素、还有一个矩形。我们对这个画布进行打包，
使它充满整个窗口。
#!/usr/bin/wish -f
set c [canvas .c -width 300 -height 300 -relief sunken -bd 2]
set inage [image create photo -Ei1e teapot.ppm -vidth 200 -height 200]
Sc create text 150 150 -text *Inage Object*-fi11 white
-tags item-fillred
pack.c
2）接着，我们绑定这个画布，这样我们就能够对显示在它上面的图形元素进行操作了。我
们将在下一步定义itemDragStart和dragItem过程。
bind Sc *itemDragStart $c ax ey*
bind Sc  *dragIten $c kx y*
3）为了过程的正确执行，我们需要定义两个全局变量lastX和lastY。
global lastx lastY
event handler for the  event
proc itemDragStart （cx y){
global lastx lastY
set lastY (Sc canvasy $y]
event handler for the  event
proc dragItem (c x y){
global lastx lastY
set y (Sc canvasy Sy)
set x [$c canvasx $x]
$c move current [expr $x-$1astx][expr $y-$lastY]
set lastx Sx
set laatY $y
加入iaVa编程群：524621833
---
## Page 521
第16章X窗口系统的程序设计
503
这个程序产生如图16-10所示的窗口输出。
caivas.tk
Move any ltem
using Mouse
图16-10
操作注释：
这只是一个很简单的例子。我们创建了几个画布图形元素，绑定了鼠标按键，使用户能够
用鼠标移动它们。比如下面这一行：
Sc create inage 150 150 -anchor center -image Simage -tags iten
在画布上面从画布坐标（150，150）开始创建了一个图像。这个图像本身就是一个对象，所以
我们可以把事件处理器绑定到与这个图形元素关联着的图签上，这样就能够移动它并让它对用
户的操作动作做出反应。类似于文本，画布支持的功能也相当的多，所以在一个只有20行左右
的程序示例里是很难把它们都说清楚的。我们将在最后的软件示例中看到更多的画布功能。
在我们结束对通布的学习之前，我们要向大家说明下它们的几个特性：
·画布元素可以连接上事件处理器。
·一个图形元素可以关联有多个图签，但只能有一个独一无二的ID。
·如果某个图形元素是一个素材，它必须是包含它的那个画布的子紫材。
·如果图形元索是素材，你就能够对它们进行配置，就像它们是在画布以外那样。嵌人在面
布里并不影响它们原有的方法。
·在把图形元素摆放到画布上去的时候，你可以把它们重叠起来，遮住故在下面的图形元素。