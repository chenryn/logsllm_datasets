 80
 70
 60
 50
 40
 30
 20
 10
 0
Uncongested network
PI, no ECN, 90load
PI, with ECN, 90load
PI, with ECN+, 90load
PI, no ECN, 105load
PI, with ECN, 105load
PI, with ECN+, 105load
 0
 0.2  0.4  0.6  0.8
 1
 1.2  1.4  1.6  1.8
 2
Response Time (sec)
Figure 5: PI performance
ECN does improve the performance, note that the impact of ECN+
is even more profound. Moreover, for both levels of congestion, the
clients’ response times are very close to the uncongested scenario.
Because we treat PI in more detail in the following section, we now
turn our discussion to another important issue, the impact of ECN+
on throughput at the congested router.
4.4 Throughput
The primary objective of ECN+ is to address TCP’s “admis-
sion control” problem, where the loss of TCP control packets can
severely impact the system performance in highly dynamic envi-
ronments. While the impact of ECN+ on end-to-end delay is in-
deed signiﬁcant in the presence of all AQM schemes, we demon-
strate below that the impact on throughput can also be surprisingly
high.
Table 1 summarizes the throughput results for ECN+ and ECN
for all AQM schemes. The improvements of ECN+ over ECN
are more moderate for PI, RED, and REM, where they vary from
1% to 5%. This is somewhat expected, because ECN+ impacts
mostly short-lived ﬂows that in turn cannot impact throughput con-
siderably. Nevertheless, it is important to note that the impact
on throughput is systematically positive, which means that ECN+
does not improve the end-to-end response-time characteristic by
degrading throughput. Instead, ECN+ exploits opportunities thus
far unexploited by AQM schemes.
However, in the RED∗ scenario, the impact of ECN+ on through-
put becomes quite substantial, and ranges from 6%, in the light
congestion scenario, to 20% in the persistent one. The key rea-
sons for throughput degradation in the RED∗/ECN scenario are the
same as for the response-time degradation. In summary, because
TCP data packets are marked beyond maxth, the RED∗’s operat-
ing point moves closer to maxth, which further causes a signiﬁcant
degradation for short ﬂows as SYN ACK packets are often dropped.
Unfortunately, the same happens to larger ﬂows that are forced to
wait a long time before being “admitted” into the network, which
causes signiﬁcant throughput degradation.
4.5 Comparing Different Schemes
While the relationship among different schemes is beyond the
scope of this paper (see references [20, 23, 24] for more rigorous
comparisons of various AQM schemes, as well as FIFO), we do
it because the impact of ECN+, while systematically positive, is
non-uniform for the evaluated AQM schemes. Due to space con-
straints, we do not show the response-time comparisons for differ-
ent AQM schemes with ECN+ in a separate ﬁgure. In summary,
while PI has the best performance, the difference between PI and
other schemes is signiﬁcantly reduced in the presence of ECN+.
Also, RED∗’s proﬁle is almost identical to REM’s, while RED*
outperforms RED. This is because ECN+ improves RED∗’s per-
formance the most.
5. UNDERSTANDING ECN+
5.1 Decoupling ECN+ from AQM
ECN+ is inherently coupled with AQM. However, while the per-
formance of AQM schemes with and without ECN has been ex-
plored, and while the impact of ECN+ on AQM performance is
evidently positive, the question is: can ECN+ be decoupled from
AQM-speciﬁc mechanisms? In other words, our goal is to isolate
the impact of ECN+ from sophisticated mechanisms that deﬁne the
way packets are dropped or marked at the queue. Reasons for con-
ducting such evaluations are the following: (i) to emphasize the
importance of ECN+, (ii) to understand the impact of non-ECN-
related AQM mechanisms on end-to-end performance, and (iii) to
compare the impacts of the two in various scenarios.
To decouple ECN+ from speciﬁc AQM dropping/marking mech-
anisms we proceed as follows. We explore a simple threshold-
based AQM algorithm, which is deﬁned as follows: when the tem-
poral queue length is smaller than a given queue threshold, no
packets are marked; whenever the queue length exceeds the thresh-
old, all packets are marked. This scheme intentionally lacks all
fundamental AQM mechanisms: ﬁrst, it does not use the averaged
queue length as an indication of congestion, which is needed to pro-
tect from prematurely sending congestion indications to the end-
points [16]; second, it has a sharp “step” marking function; there-
fore, it lacks any randomization properties and is prone to possi-
ble ﬂow-synchronization effects that can cause signiﬁcant through-
put degradations [16]; ﬁnally, the threshold scheme lacks sophisti-
cated control-theoretic mechanisms (e.g., the ones proposed in [8,
19]). However, the scheme uses ECN+, which initializes smooth
ECN-based endpoint control deﬁned in [12], and enables marking
of SYN ACK packets. Thus, the system’s performance depends
solely upon these two mechanisms.
To isolate “classical” AQM mechanisms from ECN+, we com-
pare the above scheme against dropping PI. Dropping PI posseses
all the features that the above scheme lacks, yet PI in this scenario
lacks the support of ECN+. It is important to understand that we
neither suggest that PI should not use ECN+ nor that one should
apply the threshold scheme. Our goal is to evaluate the impact of
the two mechanisms. While necessarily not comprehensive, the ex-
periments and analysis below provide valuable insights that are of
practical importance.
5.2 Web Trafﬁc Mixes
5.2.1 Lightly Congested Links
AQM algorithms are designed to control delay and throughput
in persistently congested scenarios by marking/dropping packets in
an effort to stabilize the queue length at a targeted level. However,
in lightly congested scenarios, both classical randomization mech-
anisms and sophisticated control theoretic mechanisms may be of
limited importance. This is because the temporal queue length may
only occasionally exceed the level targeted by AQM. Thus, trying
to stabilize the queue length in such scenarios may be less relevant,
because the queuing oscillations are largely independent of the ac-
tual AQM mechanisms. On the contrary, the use of ECN+ (i.e.,
AQM scheme
RED/ECN RED/ECN+
RED∗/ECN RED∗/ECN+
REM/ECN REM/ECN+
90% load
105% load
84.91
94.65
85.11
95.02
73.24
76.62
79.29
96.51
78.28
94.42
78.63
99.73
PI/ECN PI/ECN+
86.37
99.76
86.56
99.89
Table 1: Normalized Throughput (%)
marking instead of dropping packets) during these short congestion
periods can have a dominant impact on end-to-end performance.
)
%
(
y
t
i
l
i
b
a
b
o
r
p
e
v
i
t
l
a
u
m
u
C
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
Uncongested network
Threshold, with ECN+, 90load
PI, no ECN, 90load
 0
 0.2  0.4  0.6  0.8
 1
 1.2  1.4  1.6  1.8
 2
Response Time (sec)
Figure 6: Threshold with ECN+ vs. PI without ECN; 90% load
Indeed, Figure 6 conﬁrms our hypothesis.
It depicts the web
response-time proﬁles of the threshold scheme with ECN+ and
PI without ECN. Despite the lack of sophisticated mechanisms,
the threshold scheme with ECN+ has a better response-time pro-
ﬁle than the dropping PI. More surprisingly, the throughputs of the
two schemes are approximately the same; 85.05% for the threshold
scheme and 86.09% for PI. Below, we develop a model to further
explain these results.
5.2.2 Modeling Queuing Behavior
Here, we develop a simple, yet insightful, model to understand
the impact of AQM mechanisms on delay and throughput in lightly
congested scenarios. While interactions between a particular AQM
scheme at the router and TCP congestion control at the endpoints
are essential for system operability, we make no attempts to model
these complex interactions (see references [7, 17] for such attempts).
Instead, we apply an indirect approach. We ﬁrst determine the
queuing behavior, in absence of AQM, as a function of link uti-
lization. Then, we compute the probability that the queue length
exceeds the level typically targeted by AQM algorithms. A large
probability of exceeding the targeted queue level implies a poten-
tially high impact of AQM mechanisms that aim to stabilize the
queue length at that level, while a small probability indicates a lim-
ited impact of such mechanisms on performance.
We model the router buffer as an M[X]/M/1 queue with a FIFO
service discipline. Packets arrive in the queue in bursts of varying
size governed by random variable X. The distribution of X is deter-
mined by TCP’s slow-start mechanisms, the size and distribution
of TCP’s receiver advertised window parameter Wmax,4 and the
ﬂow size distribution. Assume ﬁrst a short ﬂow of size s that never
exits the slow-start phase such that its window size never reaches
4According to measurements from [27], approximately 20% of
TCP ﬂows have the advertised window parameter set to 8 kBytes,
35% to 16 kBytes, and the rest of 45% to 64 kBytes.
the bound determined by Wmax. Thus, because the initial window
size is two packets [6], and because TCP’s slow-start mechanism
doubles the window size each round-trip-time, the ﬂow arrives into
the system in n bursts of size Xs = {2, . . . , 2n−1, Rs}, where
Rs = s mod(2n − 1). On the contrary, larger ﬂows will necessar-
ily hit the limit imposed by the receiver. Denote by l the (“large”)
ﬁle size in this scenario; the ﬁle arrives into the queue in bursts
of size Xl = {1, 2, . . . , Wmax, . . . , Wmax, Rl}, where the ac-
tual number of bursts and the remainder factor Rl are functions
of l and Wmax. Finally, by mapping the ﬁle-size distribution using
the above ﬁle-to-burst size transformations, and by using the three-
modal distribution for Wmax [27], we can compute the burst-size
distribution X for any given ﬂow-size distribution.
We justify the choice of the M[X]/M/1 model as follows. First,
the arrival process is Poisson because this realistically models high-
aggregation regimes in which bursts from many ﬂows arrive at the
queue. The same argument justiﬁes the assumption of uncorre-
lated burst sizes: bursts produced by very long ﬂows are limited
by the Wmax parameter, and correlation among such bursts dimin-
ishes due to large numbers of other bursts that originate from many
different sources. Second, the model assumes the Poisson service
rate. While the service rate (packets/sec) is clearly deterministic in
practice, the Poisson assumption signiﬁcantly simpliﬁes our anal-
ysis here and at the same time only moderately overestimates the
queue length [17]. Finally, we do not model the impact of other
bottlenecks that can exist on an end-to-end path. Any distortion of
packet bursts on secondary bottlenecks would necessarily lead to
even shorter queue lengths than modeled here.
Denote by ρ the load on the link, and by E(X) and E(X 2) the
ﬁrst and second moments of the burst size. Then, it could be shown
that the expected queue length, E(Q), can be expressed as
E(Q) =
ρ
E(X) + E(X 2)
1 − ρ
2E(X)
.
(1)
The derivation is given in [22].
50
45
40
35
30
25
20
15
10
5
0
M[X]/M/1 model
Simulation
0
10
20
30
40
50
60
70
Length of TCP flows (pkts)
Figure 7: The average queue length as a function of the ﬂow
length for ρ = 0.8
Figure 7 shows the expected queue length as a function of the
ﬂow size, for a ﬁxed load, and in a scenario where all generated
ﬂows are of the same size. While not representative of an actual
scenario, our goal here is to illustrate a good match between the
)
s
t
k
p
(
h
g
n
e
t
l
e
u
e
u
q
e
g
a
r
e
v
A
model and simulations. The non-monotonic relationship between
the average queue length and the TCP ﬂow length arises because
the average queue length peaks when the probability of large bursts
is highest and not when the average burst is highest. Our results
here line up well with the ones reported in [7], which are obtained
using the M/G/1 queuing model.
The key insight from Figure 7 is a particularly moderate level
of queuing with respect to the queuing delay typically targeted by
AQM schemes [15], despite a relatively high utilization level. This
implies a limited impact of AQM mechanisms that aim to stabi-
lize the queue length at the targeted level; an AQM algorithm can
achieve this goal in a persistently congested scenario by sending
more frequent congestion indications, yet, an AQM cannot increase
the queue length in moments of trafﬁc starvation. Indeed, the mean
queuing delay in lightly congested scenarios may often be below
the level targeted by AQM schemes (e.g., 5 ms, as proposed in
[15]). For example, Figure 7 indicates that a typical web-browsing
aggregate (e.g., the mean ﬂow-size equals 7.22 packets [33]) would
have only a moderate (5 packets) average queue length.
While quite insightful, Figure 7 does not correspond to a real-
istic ﬂow-size distribution. In addition, Equation (1) computes the
average queue length, which can be quite misleading in the case
of non-standard queuing distributions. Below, we use our model
in order to evaluate the impact of a realistic ﬂow-size distribution,
and also to numerically compute the corresponding queue-size dis-
tribution.
We numerically solve the system of linear equations deﬁned by
the matrix of M[X]/M/1 transition probabilities (see [22] for de-
tails) as follows. We start from the ﬁle-size distribution used in
the previous section, which is initially obtained from representa-
tive web-based network measurements [23, 33]. Next, using the
ﬁle-to-burst transformations developed above, we obtain the appro-
priate burst-size distribution, which enables us to solve the system
of M[X]/M/1 equations and obtain the queue size distribution. Fi-
nally, we compute the probability of the queue length exceeding the
level typically targeted by AQM algorithms, and present the results
in Figure 8.