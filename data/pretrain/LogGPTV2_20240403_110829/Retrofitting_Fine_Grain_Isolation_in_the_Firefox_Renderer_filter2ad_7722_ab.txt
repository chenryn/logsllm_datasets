leaks via side channels. FuzzyFox [27] and cross-origin read
blocking [41] are promising ways to tackle these channels.
For the same reason, we consider transient execution
attacks (e.g., Spectre [26]) out of scope. We believe that our
SFI and our process-based isolation mechanisms make many
of these attacks harder to carry out—e.g., by limiting transient
reads and control ﬂow to the sandbox memory and code,
respectively—much like Site Isolation [41]. But, in general,
this is not enough: an attacker could potentially exploit code
in the renderer to transiently leak sensitive data. We leave
the design of a Spectre-robust sandbox to future work.
The protections offered by RLBox are only valid if the
Firefox code that interfaces with the sandboxed library
code is retroﬁtted to account for untrusted code running
in the library sandbox. As we discuss next, this is usually
notoriously difﬁcult to get right. RLBox precisely reduces
this burden to writing a series of validation functions. In our
attacker model, we assume these functions to be correct.
3 Pitfalls of retroﬁtting protection
The Firefox renderer was written assuming libraries are
trusted. To beneﬁt from sandboxing requires changing our
threat model to assume libraries are untrusted, and modify
the renderer-library interface accordingly (e.g, to sanitize
untrusted inputs).
While migrating to this model we made numerous
mistakes—overlooking attack vectors and discovering many
bugs only after building RLBox to help detect them. We
present a brief taxonomy of these mistakes, with examples
drawn from the code snippet illustrating the interface
between the renderer’s JPEG decoder and libjpeg4 shown in
4We use libjpeg interchangeably with libjpeg-turbo, the faster fork of the
USENIX Association
29th USENIX Security Symposium    701
Figure 1. We discuss how RLBox helps prevent these attacks
in Section 4.
For the rest of this section, we assume that libjpeg is fully
sandboxed or memory isolated, i.e., libjpeg code is restricted
from accessing arbitrary memory locations in the renderer
process, and may only access memory explicitly dedicated
to the sandbox—the sandbox memory. The renderer itself
can access any memory location including sandbox memory.
3.1
Insecure data ﬂow
Failing to sanitize data. Failing to sanitize data received
from libjpeg including function return values, callback param-
eters, and data read from sandbox shared memory can leave
the renderer vulnerable to attack. For example, if the renderer
uses the num_bytes parameter to the skip_input_data()
callback on line 25 of Figure 1 without bounds checking it,
an attacker-controlled libjpeg could could force it to overﬂow
or underﬂow the src->next_input_byte buffer.
Pointer data is particularly prone to attack, either when
pointers are used directly (with C++’s * and -> operators)
or indirectly (via memory functions such as memcpy() and
memmove(), array indexing operations, etc.). For example,
if the parameter jd of fill_input_buffer() is not sanitized
(line 35), the read of jd->src on line 36 becomes an
arbitrary-read gadget. In the same callback, if both jd and
src are unsanitized, the write to src->next_input_byte on
line 39 becomes an arbitrary-write gadget. Similar attacks
using the memmove() on line 50 are possible.
Missing pointer swizzles. Some sandboxing mechanisms—
e.g., NaCl (§6.2) and Wasm (§9)—use alternate pointer
representations. Some sandboxing tools e.g., NaCl (§6.2) and
Wasm (§9) use alternate pointer representations for efﬁciency.
Though this is often done for performance, in Wasm’s case
this is more fundamental: Wasm pointers are 32-bit whereas
Firefox pointers are 64-bit. We must translate or swizzle
pointers to and from these alternate representations when data
is transferred between the renderer and the sandboxed libjpeg.
We found that doing this manually is both tedious and
extremely error prone. This is largely because pointers
can be buried many levels deep in nested data structures.
Overlooking a swizzle either breaks things outright, or worse,
silently introduces vulnerabilities. For instance, failing to
swizzle the nested pointer mInfo.err on line 44 prior to
dereferencing, can result in a write gadget (whose write-range
depends on the precise pointer representation).
Leaking pointers. Leaking pointers from the Firefox
renderer to the sandboxed libjpeg can allow an attacker to
derandomize ASLR [50] or otherwise learn locations of
code pointers (e.g., C++ virtual tables). Together with an
arbitrary-write gadget, this can allow an attacker-controlled
libjpeg to execute arbitrary code in the renderer.
original libjpeg library which is used in Firefox.
16
17
18
19
20
27
28
29
30
37
38
39
40
41
42
43
44
45
46
47
48
49
50
1 // InitInternal() registers callbacks
(cid:44)→
for libjpeg to call while decoding an image
2 nsresult nsJPEGDecoder::InitInternal() {
3
...
mInfo.client_data = (void*)this;
...
//Callbacks invoked by libjpeg
mErr.pub.error_exit = my_error_exit;
mSourceMgr.fill_input_buffer = fill_input_buffer;
mSourceMgr.skip_input_data = skip_input_data;
...
4
5
6
7
8
9
10
11 }
12
13 // Adjust output buffers for decoded pixels
14 void nsJPEGDecoder::OutputScanlines(...) {
15
...
while (mInfo.output_scanline  (long)src->bytes_in_buffer) {
...
} else {
src->next_input_byte += num_bytes;
}
31
32 }
33
34 // Invoked repeatedly to get input as it arrives
35 void fill_input_buffer (j_decompress_ptr jd) {
36
struct jpeg_source_mgr* src = jd->src;
nsJPEGDecoder* decoder = jd->client_data;
...
src->next_input_byte = new_buffer;
...
if (/* buffer is too small */) {
JOCTET* buf = (JOCTET*) realloc(...);
if (!buf) {
decoder->mInfo.err->msg_code = JERR_OUT_OF_MEMORY;
...
}
...
}
...
memmove(decoder->mBackBuffer + decoder->mBackBufferLen,
src->next_input_byte, src->bytes_in_buffer);
(cid:44)→
...
51
52 }
53
54 // Invoked on a decoding error
55 void my_error_exit (j_common_ptr cinfo) {
56
decoder_error_mgr* err = cinfo->err;
...
longjmp(err->setjmp_buffer, error_code);
57
58
59 }
Figure 1: The renderer-library interface:
this code snippet
illustrates the renderer’s interface to the JPEG decoder and is used
as a running example. The decoder uses libjpeg’s streaming interface
to decode images one pixel-row at a time, as they are received.
Receiving and decoding concurrently is critical for responsiveness.
702    29th USENIX Security Symposium
USENIX Association
In
our example,
the
in libjpeg structs
renderer saves pointers
to
nsJPEGDecoder objects
(line 4),
which alone allows an attacker to locate code pointers—the
nsJPEGDecoder class is derived from the Decoder class, which
deﬁnes virtual methods and thus has a virtual table pointer as
the ﬁrst ﬁeld. Even initializing callbacks (line 8) could leak
pointers to functions and reveal the location of Firefox’s code
segment5.
Double fetch bugs. RLBox uses shared memory (§4) to
efﬁciently marshal objects between the renderer and the
sandboxed libraries. This, unfortunately, introduces the
possibility of double fetch bugs [47, 62, 64].
Insecure control ﬂow
Consider the mInfo object used in Figure 1. Since this
object is used by both libjpeg and the renderer, RLBox stores
it in shared memory. Now consider the bounds check of
mInfo.output_scanline on line 16 prior to the assignment
of output buffer imageRow. In a concurrent libjpeg sandbox
thread, an attacker can modify mInfo.output_scanline after
the check (line 16), and before the value is fetched (again)
and used on line 18. This would bypasses the bounds check,
leading to an arbitrary-write gadget. While this example is
obvious, double-fetch bugs often span function boundaries
and are much harder to spot.
3.2
Isolation prevents arbitrary control transfers from the sandbox
into the renderer. Thus, out of necessity, callbacks for libjpeg
must be explicitly exposed. But this alone is not sufﬁcient
to prevent attacks.
Corrupted callback state. Callbacks may save state in the
sandboxed library. An attacker-controlled libjpeg can abuse
the control ﬂow of callbacks by corrupting this state. For
example, on line 4 of Figure 1, the renderer stores a pointer
to the nsJPEGDecoder object into the client_data ﬁeld of
mInfo. Inside fill_input_buffer() this pointer is used to
access the nsJPEGDecoder object (line 37). Failing to sanitize
client_data before using it allows an attacker to set the
pointer to a maliciously crafted object and hijack control ﬂow
when Firefox invokes a virtual method on this object.
Unexpected callback invocation. Security bugs can also
occur if an attacker controlled libjpeg invokes a permitted
callback at unexpected times. Consider the my_error_exit()
callback function, which uses longjmp() to implement error
handling. On line 58, longjmp() changes the instruction
pointer of the renderer based on information stored in
setjmp_buffer.
If an attacker invokes my_error_exit()
before setjmp_buffer is initialized, they can (again) hijack
the renderer control ﬂow.
Callback state exchange attacks. Threading introduces
another vector to attack callback state. When Firefox
5Whether callback locations are leaked depends on the underlying
sandboxing mechanism. While both our process isolation and NaCl use
jump tables and thus do not leak, other sandbox implementations could leak
such information.
decodes two images in parallel, two decoder threads
make calls to libjpeg. Firefox expects libjpeg to invoke the
fill_input_buffer() callback on each thread with the
corresponding nsJPEGDecoder object. But, an attacker could
supply the same nsJPEGDecoder object to both threads when
calling fill_input_buffer(). If the ﬁrst thread reallocates
the source buffer (line 42), while the second thread is
using it to get input bytes, this can induce a data race and
use-after-free vulnerability in turn.
4 RLBox: automating secure sandboxing
Modifying the Firefox JPEG decoder to guard against all
the attacks discussed in Section 3 requires substantial code
additions and modiﬁcations. Doing this manually is extremely
error prone. Moreover, it also makes the code exceedingly
fragile: anyone making subsequent changes to the decoder
must now have an intimate knowledge of all the necessary
checks to have any hope of getting it right. Multiply this by the
number of libraries Firefox supports and number of developers
working on the renderer, and the problem becomes intractable.
We built the RLBox framework to tackle these challenges.
RLBox helps developers migrate and maintain code in
the Firefox renderer to safely use sandboxed libraries. We
designed RLBox with the following goals in mind:
1. Automate security checks: Adding security checks
un-assisted is labor intensive and error prone, as dis-
cussed (§3). However, most of the sandboxing pitfalls
can be detected and prevented through static checks, i.e.,
through compile-time errors indicating where code needs
to be manually changed for security, or eliminated with
dynamic checks and sanitizations (e.g., pointer swizzling
and bounds checking).
2. No library changes: We want to avoid making changes to
libraries. When libraries come from third parties we do not
necessarily understand their internals, nor do we want to.
Additionally, any changes we make to libraries increases
the effort required to track upstream changes.
3. Simplify migration: Firefox uses dozens of libraries, with
occasional additions or replacements. Consequently, we
want to minimize the per-library effort of using RLBox,