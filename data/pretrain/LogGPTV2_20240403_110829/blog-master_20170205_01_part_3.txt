 ?column?         
----------        
   203996        
(1 row)        
postgres=# select * from gin_metapage_info(get_raw_page('idx_t2_1',0));        
 pending_head | pending_tail | tail_free_size | n_pending_pages | n_pending_tuples | n_total_pages | n_entry_pages | n_data_pages | n_entries | version         
--------------+--------------+----------------+-----------------+------------------+---------------+---------------+--------------+-----------+---------        
   4294967295 |   4294967295 |              0 |               0 |                0 |          2611 |          2610 |            0 |    203996 |       2        
(1 row)        
n_entries = count(distinct indexed column1) + ....         
```        
b-tree 要高效的使用复合索引，必须带驱动列的查询条件。        
GIN 使用复合索引，可以任意组合查询条件，当有多列查询条件时，使用隐含的bitmapAnd or bitmapOr。        
什么情况下，gin比btree慢？        
通常，多列查询时，如果使用了驱动列，那么B-TREE索引会更快一些，因为它不需要使用bitmapAnd or bitmapOr，而GIN需要。        
其他情况，gin都比btree的复合查询快。        
## 九 gin 多列索引的独门秘籍        
通过前面的分析，我们已经摸清楚了GIN的复合索引结构（展开式B树），并且也知道GIN是key+ctid list的类b+tree树组织形式，它可以有很高的压缩比，也可以高效的查询单KEY。        
那么GIN具备这些特性后，有哪些独门秘籍呢？        
1\. 任意组合查询，都可以达到很高效，你不需要创建多个b-tree索引了，一个GIN搞定它(不必担心GIN的IO，有fastupdate技术支撑，并且读写(entry合并)不堵塞)。        
比如淘宝的搜索页面，用户可能根据任意属性，勾选任意条件进行查询。        
创建一张测试表, 6个字段    
```    
postgres=# create table taobao(c1 int, c2 int, c3 timestamp, c4 text, c5 numeric, c6 text);    
CREATE TABLE    
```    
插入1000万随机记录    
```    
postgres=# insert into taobao select random()*2000, random()*3000, now()+((50000-100000*random())||' sec')::interval , md5(random()::text), round((random()*1000000)::numeric,2), md5(random()::text) from generate_series(1,10000000);    
INSERT 0 10000000    
```    
创建GIN多列索引    
```    
postgres=# create index idx_taobao_gin on taobao using gin(c1,c2,c3,c4,c5,c6);    
```    
数据样例    
```    
postgres=# select * from taobao limit 10;    
  c1  |  c2  |             c3             |                c4                |    c5     |                c6                    
------+------+----------------------------+----------------------------------+-----------+----------------------------------    
 1405 |  882 | 2017-02-06 09:41:24.985878 | 49982683517aab7d194f3affe74ba827 |  65157.79 | 256ad6d098a6536e3548b5af91a26557    
 1277 | 1269 | 2017-02-06 09:52:16.313212 | b40c1febdb7f62c916d3632a03092261 | 940751.10 | 9911b203e38b57c55a769312c2aaaeba    
  870 |  159 | 2017-02-06 05:59:46.853421 | 96a0f84d9f9381d77364d93ca2d7aa6f | 419618.52 | 1e716d90055d3b32027a5e80a19e2f4f    
 1990 | 1100 | 2017-02-07 00:35:26.849744 | 684b66b25eb57d97f604eb9d92dfc8b0 | 764940.62 | eea82a253995a70da23a9f9ba3015175    
  625 | 1076 | 2017-02-06 01:48:13.929789 | 7fe094f548cffa367ebeb28d4f188875 | 482201.22 | 81ba27a8123dbd3e3a741c5984368709    
  968 |  554 | 2017-02-06 06:05:29.971936 | 6c8b34e4eb7c5eca3a8ad6131c5aecd3 | 583617.05 | b5cfc01c845cc87a4eb8a425ac9b2e01    
 1795 |  667 | 2017-02-06 20:18:46.027376 | b4ef2282064ef3e7a4eb3c624ba42334 | 911819.49 | a794b4635bb314972d891c7218063642    
  222 | 1041 | 2017-02-06 20:29:15.686187 | f3a6bc2b683e272c293d09353fb2465b | 722814.10 | 22b3b06a69b134dee9e3236907637683    
 1596 | 2153 | 2017-02-05 22:38:54.795333 | 1455f7f7f198d09e380e680321a31968 | 672431.00 | efac7b0a2154e25321a522b98903df41    
  313 | 2955 | 2017-02-06 22:59:49.117719 | 7840bbd2be443904b094b9f8919730c0 | 525295.10 | b5feb900191fd404f3a3de407fa62c93    
(10 rows)    
 public | taobao | table | postgres | 1202 MB |     
 public | idx_taobao_gin | index | postgres | taobao | 3761 MB |     
```    
查询测试    
任意单一字段    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c1=1;    
                                                          QUERY PLAN                                                              
------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=46.51..4873.01 rows=4840 width=90) (actual time=1.602..10.038 rows=5043 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: (taobao.c1 = 1)    
   Heap Blocks: exact=4958    
   Buffers: shared hit=4966    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..45.30 rows=4840 width=0) (actual time=0.849..0.849 rows=5043 loops=1)    
         Index Cond: (taobao.c1 = 1)    
         Buffers: shared hit=8    
 Planning time: 0.319 ms    
 Execution time: 10.346 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c2=882;    
                                                          QUERY PLAN                                                              
------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=34.16..3287.73 rows=3246 width=90) (actual time=1.175..7.024 rows=3373 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: (taobao.c2 = 882)    
   Heap Blocks: exact=3350    
   Buffers: shared hit=3358    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..33.35 rows=3246 width=0) (actual time=0.651..0.651 rows=3373 loops=1)    
         Index Cond: (taobao.c2 = 882)    
         Buffers: shared hit=8    
 Planning time: 0.094 ms    
 Execution time: 7.236 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c3='2017-02-06 09:41:24.985878';    
                                                      QUERY PLAN                                                           
-----------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=8.01..9.02 rows=1 width=90) (actual time=0.025..0.025 rows=1 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: (taobao.c3 = '2017-02-06 09:41:24.985878'::timestamp without time zone)    
   Heap Blocks: exact=1    
   Buffers: shared hit=6    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.019..0.019 rows=1 loops=1)    
         Index Cond: (taobao.c3 = '2017-02-06 09:41:24.985878'::timestamp without time zone)    
         Buffers: shared hit=5    
 Planning time: 0.125 ms    
 Execution time: 0.057 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c4='b40c1febdb7f62c916d3632a03092261';    
                                                      QUERY PLAN                                                           
-----------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=8.01..9.02 rows=1 width=90) (actual time=0.028..0.028 rows=1 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: (taobao.c4 = 'b40c1febdb7f62c916d3632a03092261'::text)    
   Heap Blocks: exact=1    
   Buffers: shared hit=6    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.023..0.023 rows=1 loops=1)    
         Index Cond: (taobao.c4 = 'b40c1febdb7f62c916d3632a03092261'::text)    
         Buffers: shared hit=5    
 Planning time: 0.101 ms    
 Execution time: 0.058 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c5='764940.62';    
                                                      QUERY PLAN                                                           
-----------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=8.01..9.02 rows=1 width=90) (actual time=0.028..0.028 rows=1 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: (taobao.c5 = 764940.62)    
   Heap Blocks: exact=1    
   Buffers: shared hit=6    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.023..0.023 rows=1 loops=1)    
         Index Cond: (taobao.c5 = 764940.62)    
         Buffers: shared hit=5    
 Planning time: 0.127 ms    
 Execution time: 0.069 ms    
(10 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c6='test';    
                                                      QUERY PLAN                                                           
-----------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=8.01..9.02 rows=1 width=90) (actual time=0.023..0.023 rows=0 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: (taobao.c6 = 'test'::text)    
   Buffers: shared hit=5    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.020..0.020 rows=0 loops=1)    
         Index Cond: (taobao.c6 = 'test'::text)    
         Buffers: shared hit=5    
 Planning time: 0.088 ms    
 Execution time: 0.054 ms    
(9 rows)    
```    
任意2字段    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c2=1 and c3='2017-02-06 09:41:24.985878';    
                                                       QUERY PLAN                                                           
------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=15.00..16.02 rows=1 width=90) (actual time=0.060..0.060 rows=0 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: ((taobao.c2 = 1) AND (taobao.c3 = '2017-02-06 09:41:24.985878'::timestamp without time zone))    
   Buffers: shared hit=11    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..15.00 rows=1 width=0) (actual time=0.057..0.057 rows=0 loops=1)    
         Index Cond: ((taobao.c2 = 1) AND (taobao.c3 = '2017-02-06 09:41:24.985878'::timestamp without time zone))    
         Buffers: shared hit=11    
 Planning time: 0.100 ms    
 Execution time: 0.093 ms    
(9 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c2=1 or c3='2017-02-06 09:41:24.985878';    
                                                             QUERY PLAN                                                                 
------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=42.98..3305.68 rows=3247 width=90) (actual time=1.165..6.947 rows=3330 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: ((taobao.c2 = 1) OR (taobao.c3 = '2017-02-06 09:41:24.985878'::timestamp without time zone))    
   Heap Blocks: exact=3295    
   Buffers: shared hit=3308    
   ->  BitmapOr  (cost=42.98..42.98 rows=3247 width=0) (actual time=0.650..0.650 rows=0 loops=1)    
         Buffers: shared hit=13    
         ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..33.35 rows=3246 width=0) (actual time=0.638..0.638 rows=3329 loops=1)    
               Index Cond: (taobao.c2 = 1)    
               Buffers: shared hit=8    
         ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.011..0.011 rows=1 loops=1)    
               Index Cond: (taobao.c3 = '2017-02-06 09:41:24.985878'::timestamp without time zone)    
               Buffers: shared hit=5    
 Planning time: 0.099 ms    
 Execution time: 7.161 ms    
(15 rows)    
```    
任意3字段    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c4='b40c1febdb7f62c916d3632a03092261' and c5=1 and c6='test';    
                                                                 QUERY PLAN                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=22.00..23.02 rows=1 width=90) (actual time=0.051..0.051 rows=0 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: ((taobao.c4 = 'b40c1febdb7f62c916d3632a03092261'::text) AND (taobao.c5 = '1'::numeric) AND (taobao.c6 = 'test'::text))    
   Buffers: shared hit=13    
   ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..22.00 rows=1 width=0) (actual time=0.048..0.048 rows=0 loops=1)    
         Index Cond: ((taobao.c4 = 'b40c1febdb7f62c916d3632a03092261'::text) AND (taobao.c5 = '1'::numeric) AND (taobao.c6 = 'test'::text))    
         Buffers: shared hit=13    
 Planning time: 0.115 ms    
 Execution time: 0.084 ms    
(9 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from taobao where c4='b40c1febdb7f62c916d3632a03092261' or c5=1 or c6='test';    
                                                              QUERY PLAN                                                                  
--------------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.taobao  (cost=24.03..27.08 rows=3 width=90) (actual time=0.061..0.062 rows=1 loops=1)    
   Output: c1, c2, c3, c4, c5, c6    
   Recheck Cond: ((taobao.c4 = 'b40c1febdb7f62c916d3632a03092261'::text) OR (taobao.c5 = '1'::numeric) OR (taobao.c6 = 'test'::text))    
   Heap Blocks: exact=1    
   Buffers: shared hit=16    
   ->  BitmapOr  (cost=24.03..24.03 rows=3 width=0) (actual time=0.055..0.055 rows=0 loops=1)    
         Buffers: shared hit=15    
         ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.025..0.025 rows=1 loops=1)    
               Index Cond: (taobao.c4 = 'b40c1febdb7f62c916d3632a03092261'::text)    
               Buffers: shared hit=5    
         ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.016..0.016 rows=0 loops=1)    
               Index Cond: (taobao.c5 = '1'::numeric)    
               Buffers: shared hit=5    
         ->  Bitmap Index Scan on idx_taobao_gin  (cost=0.00..8.01 rows=1 width=0) (actual time=0.012..0.012 rows=0 loops=1)    
               Index Cond: (taobao.c6 = 'test'::text)    
               Buffers: shared hit=5    
 Planning time: 0.110 ms    
 Execution time: 0.122 ms    
(18 rows)    
```    
任意4字段    
不再举例，都能用上索引    
2\. 由于ctid list组织，所以可以做到很好的压缩，前面讲的posting list compress就是这个功效。所以它节约空间，提升效率。        
```    
postgres=# create table t4(c1 int,c2 int);    
CREATE TABLE    
postgres=# insert into t4 select generate_series(1,10000000),1;    
INSERT 0 10000000    
postgres=# create index btree_t4_c1 on t4 using btree(c1);    
CREATE INDEX    
postgres=# create index btree_t4_c2 on t4 using btree(c2);    
CREATE INDEX    
postgres=# create index btree_t4_c1 on t4 using btree(c1);    
CREATE INDEX    
postgres=# create index btree_t4_c2 on t4 using btree(c2);    
CREATE INDEX    
postgres=# create index gin_t4_c1 on t4 using gin(c1);    
CREATE INDEX    
postgres=# create index gin_t4_c2 on t4 using gin(c2);    
CREATE INDEX    
postgres=# \di+    
                            List of relations    
 Schema |    Name     | Type  |  Owner   | Table |  Size   | Description     
--------+-------------+-------+----------+-------+---------+-------------    
 public | btree_t4_c1 | index | postgres | t4    | 214 MB  | // btree为全entry索引，    
 public | btree_t4_c2 | index | postgres | t4    | 214 MB  | // 所以即使c2字段1000万全重复值，存储空间也一样    
 public | gin_t4_c1   | index | postgres | t4    | 534 MB  | // 原本存储heap ctid的，被拆分为pos 2 bytes、blkid 4 bytes来存储posting list的长度、posting tree root的blkid，所以比btree多了一点    
 public | gin_t4_c2   | index | postgres | t4    | 10 MB   | // ctid list(posting list)自动压缩，压缩比很高    