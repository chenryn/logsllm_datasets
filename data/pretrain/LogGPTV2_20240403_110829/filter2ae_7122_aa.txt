**作者：灰豆  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
# 介绍
substring、getDate、catch 等是常用的 JavaScript API，接下来的几篇文章将对 V8 中 API
的设计思想、源码和关键函数进行讲解，并通过例子讲解 JavaScript 在 V8 中的初始化、运行方式，以及它与解释器、编译器、字节码之间的关系。
本文讲解 API Equal 和 StrictEqual 的设计与实现。
# Equal 和 StrictEqual 的调用方式
来看一段 JS 源码和它的字节码：
    1.  var a="123";
    2.  var b = a == 123;
    3.  var c = a === 123;
    4.  console.log(b);
    5.  console.log(c);
    6.  //分隔线............
    7.  //省略...............................
    8.  000000CFDD021F54 @   22 : 6a f9 04          TestEqual r1, [4]
    9.  000000CFDD021F57 @   25 : 23 03 05          StaGlobal [3], [5]
    10.  000000CFDD021F5A @   28 : 21 02 02          LdaGlobal [2], [2]
    11.  000000CFDD021F5D @   31 : c2                Star1
    12.  000000CFDD021F5E @   32 : 0d 7b             LdaSmi [123]
    13.  000000CFDD021F60 @   34 : 6b f9 07          TestEqualStrict r1, [7]
    14.  //省略...............................
上述代码中，第 2 行代码 '==' 的字节码是第 8 行代码 TestEqual； 第 3 行代码 '===' 的字节码是第 13 行代码
TestEqualStrict; 下面讲解字节码 TestEqual 和 TestEqualStrict，源码如下：
    IGNITION_HANDLER(TestEqual, InterpreterCompareOpAssembler) {
      CompareOpWithFeedback(Operation::kEqual);
    }
    //分隔线............
    IGNITION_HANDLER(TestEqualStrict, InterpreterCompareOpAssembler) {
      CompareOpWithFeedback(Operation::kStrictEqual);
    }
上述两条字节码中都使用了 CompareOpWithFeedback()，区别是参数不同，CompareOpWithFeedback 源码如下：
    1.    void CompareOpWithFeedback(Operation compare_op) {
    2.      TNode lhs = LoadRegisterAtOperandIndex(0);
    3.      TNode rhs = GetAccumulator();
    4.      TNode context = GetContext();
    5.  //省略.......................
    6.      TVARIABLE(Smi, var_type_feedback);
    7.      TNode result;
    8.      switch (compare_op) {
    9.        case Operation::kEqual:
    10.          result = Equal(lhs, rhs, context, &var_type_feedback);
    11.          break;
    12.        case Operation::kStrictEqual:
    13.          result = StrictEqual(lhs, rhs, &var_type_feedback);
    14.          break;
    15.        case Operation::kLessThan:
    16.        case Operation::kGreaterThan:
    17.        case Operation::kLessThanOrEqual:
    18.        case Operation::kGreaterThanOrEqual:
    19.          result = RelationalComparison(compare_op, lhs, rhs, context,
    20.                                        &var_type_feedback);
    21.          break;
    22.        default:
    23.          UNREACHABLE();
    24.      }
    25.  //省略.......................
    26.      SetAccumulator(result);
    27.      Dispatch();
    28.    }
上述代码中，第 2 行取出左操作数 lhs； 第 3 行取出右操作数 rhs。rhs 存储在累加器中，所以字节码 TestEqual 的操作数只有
r1，也就是 lhs。[4] 不属于 TestEqual 的操作数，它用于信息收集。TestEqualStrict 的情况也一样。  
第 8 行代码根据 compare_op 选择 Equal 或是 StrictEqual。  
第 15~19 行代码是小于、大于等操作的实现，本文不做讲解。
# Equal 源码分析
图 1 给出了 Equal 的源码和函数调用堆栈，需要使用 mksnapshot 进行跟踪。  
下面讲解 Equal 源码。
    1.  TNode CodeStubAssembler::Equal(/*省略*/) {
    2.    //省略................
    3.  TVARIABLE(Object, var_left, left);
    4.  TVARIABLE(Object, var_right, right);
    5.    //省略...............
    6.   BIND(&loop);
    7.  {
    8.  left = var_left.value();
    9.  right = var_right.value();
    10.  Label if_notsame(this);
    11.  GotoIf(TaggedNotEqual(left, right), &if_notsame);
    12.  {GenerateEqual_Same(left, &if_equal, &if_notequal, var_type_feedback);}
    13.  BIND(&if_notsame);
    14.  Label if_left_smi(this), if_left_not_smi(this);
    15.  Branch(TaggedIsSmi(left), &if_left_smi, &if_left_not_smi);
    16.  BIND(&if_left_smi);
    17.  {
    18.    Label if_right_smi(this), if_right_not_smi(this);
    19.    CombineFeedback(var_type_feedback,
    20.                    CompareOperationFeedback::kSignedSmall);
    21.    Branch(TaggedIsSmi(right), &if_right_smi, &if_right_not_smi);
    22.    BIND(&if_right_smi);
    23.    { Goto(&if_notequal);   }
    24.    BIND(&if_right_not_smi);
    25.    { TNode right_map = LoadMap(CAST(right));
    26.      Label if_right_heapnumber(this), if_right_oddball(this),
    27.          if_right_bigint(this, Label::kDeferred),
    28.          if_right_receiver(this, Label::kDeferred);
    29.      GotoIf(IsHeapNumberMap(right_map), &if_right_heapnumber);
    30.      TNode right_type = LoadMapInstanceType(right_map);
    31.      GotoIf(IsStringInstanceType(right_type), &do_right_stringtonumber);
    32.      GotoIf(IsOddballInstanceType(right_type), &if_right_oddball);
    33.      GotoIf(IsBigIntInstanceType(right_type), &if_right_bigint);
    34.      GotoIf(IsJSReceiverInstanceType(right_type), &if_right_receiver);
    35.      CombineFeedback(var_type_feedback, CompareOperationFeedback::kAny);
    36.      Goto(&if_notequal); }  }
    37.  BIND(&if_left_not_smi);
    38.  { GotoIf(TaggedIsSmi(right), &use_symmetry);
    39.    Label if_left_symbol(this), if_left_number(this),
    40.        if_left_string(this, Label::kDeferred),
    41.        if_left_bigint(this, Label::kDeferred), if_left_oddball(this),
    42.         if_left_receiver(this);
    43.     TNode left_map = LoadMap(CAST(left));
    44.     TNode right_map = LoadMap(CAST(right));
    45.     TNode left_type = LoadMapInstanceType(left_map);
    46.     TNode right_type = LoadMapInstanceType(right_map);
    47.     GotoIf(IsStringInstanceType(left_type), &if_left_string);
    48.     GotoIf(IsSymbolInstanceType(left_type), &if_left_symbol);
    49.     GotoIf(IsHeapNumberInstanceType(left_type), &if_left_number);
    50.     GotoIf(IsOddballInstanceType(left_type), &if_left_oddball);
    51.     Branch(IsBigIntInstanceType(left_type), &if_left_bigint,
    52.            &if_left_receiver);
    53.     BIND(&if_left_string);
    54.     { GotoIfNot(IsStringInstanceType(right_type), &use_symmetry);
    55.       result =
    56.           CAST(CallBuiltin(Builtin::kStringEqual, context(), left, right));
    57.       CombineFeedback(var_type_feedback,
    58.                       SmiOr(CollectFeedbackForString(left_type),
    59.                             CollectFeedbackForString(right_type)));
    60.       Goto(&end);      }
    61.     BIND(&if_left_number);
    62.     { Label if_right_not_number(this);
    63.       CombineFeedback(var_type_feedback, CompareOperationFeedback::kNumber);
    64.       GotoIf(Word32NotEqual(left_type, right_type), &if_right_not_number);
    65.       var_left_float = LoadHeapNumberValue(CAST(left));
    66.       var_right_float = LoadHeapNumberValue(CAST(right));
    67.       Goto(&do_float_comparison);
    68.       BIND(&if_right_not_number);
    69.       { Label if_right_oddball(this);
    70.         GotoIf(IsStringInstanceType(right_type), &do_right_stringtonumber);
    71.         //省略...............
    72.         Goto(&if_notequal);
    73.         BIND(&if_right_oddball);
    74.         { Label if_right_boolean(this);
    75.           GotoIf(IsBooleanMap(right_map), &if_right_boolean);
    76.           CombineFeedback(var_type_feedback,
    77.                           CompareOperationFeedback::kOddball);
    78.           Goto(&if_notequal);
    79.           BIND(&if_right_boolean);
    80.            {CombineFeedback(var_type_feedback,
    81.                              CompareOperationFeedback::kBoolean);
    82.              var_right =
    83.                  LoadObjectField(CAST(right), Oddball::kToNumberOffset);
    84.              Goto(&loop);
    85.            }  }  }  }
    86.      BIND(&if_left_bigint);
    87.      {
    88.        Label if_right_heapnumber(this), if_right_bigint(this),
    89.            if_right_string(this), if_right_boolean(this);
    90.        CombineFeedback(var_type_feedback, CompareOperationFeedback::kBigInt);
    91.        GotoIf(IsStringInstanceType(right_type), &if_right_string);
    92.        //省略...............
    93.        BIND(&if_right_heapnumber);
    94.        { CombineFeedback(var_type_feedback, CompareOperationFeedback::kNumber);
    95.          result = CAST(CallRuntime(Runtime::kBigIntEqualToNumber,
    96.                                    NoContextConstant(), left, right));
    97.          Goto(&end);  }
    98.        BIND(&if_right_bigint);
    99.        {
    100.           result = CAST(CallRuntime(Runtime::kBigIntEqualToBigInt,
    101.                                     NoContextConstant(), left, right));
    102.           Goto(&end); }