Branch prediction predicts values for MIL instructions that block
the evaluation of the guard of a PC store whose target address has
been already resolved. For σ = (I , s, C, F , δ , P), we model it as:
predbr (σ ) = (cid:8)t ′ 7→ v | t ← c?st P C ta ∈ I ∧ t ′ ∈ fn(c) ∧ s(ta)↓(cid:9)
Let σ0 be the state where only the instruction in a1 has been trans-
lated. Œen predbr (σ0) is empty, since σ0 contains a single uncon-
ditional PC update (the guard of t13 has no free names). Œe CPU
may apply rules Exe, Ret, and Ftc on t13 without waiting the result
of t11. Œis leads to a new state σ1 which is obtained by updat-
ing the storage with s1 = {t13 7→ a2}, extending the microin-
structions’ list with the translation of a2, and the snapshot with
δ1 = {t2i 7→ t13 7→ a2 for 1 ≤ i ≤ 5}, while producing the obser-
vation il a2. In this state predbr (σ1) = {t23 7→ 0, t23 7→ 1} since
the conditions of the two PC stores (i.e., t24 and t25) depend on
t23 which is yet to be resolved. Œe CPU can now apply rule Prd
using the prediction t23 7→ 1, thus guessing that the condition is
true. Œe new state σ2 contains s2 = s1 ∪ {t23 7→ 1}, δ2 = δ1, and
P2 = {t23}.
Œe CPU can follow the speculated branch by applying rules Exe
and Ftc on t24, which results in state σ3 with s3 = s2 ∪ {t24 7→ a3},
δ3 = δ2 ∪ {t24 7→ {t23 7→ 1}, t3i 7→ {t24 7→ a3} for 1 ≤ i ≤ 5}, and
F3 = {t13, t24}. Additionally, it produces the observation il a3.
Applying rule Exe on t31 and t32 results in a buﬀer overread and
produces state σ4 with s4 = s3 ∪ {t31 7→ r0, t32 7→ A1[r0]}, and ob-
servation dl r0. Similarly, rule Exe on t33 produces the observation
dl A2 + A1[r0].
Clearly, if r0 ≥ A1.size, the observation reveals memory content
outside A1, allowing an aŠacker to learn sensitive data. Observe
that this is rejected by the security condition, since such observa-
tion is not possible in the sequential semantics.
7.1.1 Countermeasure: Serializing Instructions. Serializing instruc-
tions can be modeled by constraining the scheduling of microin-
structions. For example, we can model the Intel’s lfence instruction
via a function lfence(I ) that extracts all microinstructions resulting
from the translation of lfence.
Concretely, for σ = (I , s, C, F , δ , P), t ∈ lfence(I ) and σ −→→→ σ ′, it
holds that: (i) if σ (t )↑ and σ ′(t )↓ then for each t ′ ← c?ld M ta ∈ σ
such that t ′
 t, and t ′ ← c?ld M ta ∈ σ , or t ′ ←
c?st M ta tv ∈ σ , or t ′ ← c?st R ta tv ∈ σ , then σ (t )↓ ∧ δ (t )↑.
Intuitively, the conditions restrict the scheduling of microinstruc-
tions to ensure that: (i) whenever a fence is executed, all previous
loads have been retired, and (ii) subsequent memory operations or
register stores can be executed only if the fence has been retired.
In order to reduce the performance overhead, several works (e.g.
[46]) use static analysis to identify necessary serialization points in
a program. In the previous example, it is suﬃcient to place lfence
a‰er t32 and before t33. Œis does not prevent the initial buﬀer
overread of t32, however, it suspends t33 until t32 is retired. In case
of misprediction, t32 and t33 will be rolled back, preventing the
observation dl A2 + A1[r0] which causes the information leak.
7.1.2 Countermeasure: Implicit Serialization. An alternative coun-
termeasure to prevent Spectre-PHT is to use instructions that intro-
duce implicit serialization [18, 41]. For instance, adding the follow-
ing gadget between instructions a2 and a3 in the previous example
prevents Spectre-PHT on existing Intel CPUs:
/ / cmp
a′
3 : f = (r0 ≥ r1)
t ′
31
l d R r0
a′′
3 : cmov f , r0, 0
t ′′
31
l d R f
t ′
33
t ′
31 ≥ t ′
32
t ′
34
st R f t ′
33
t ′′
32
t ′
32
l d R r1
t ′
35
st P C a′′
3
t ′′
34
t ′′
31
= 1
st R r0 0
st P C a′′′
3
Intuitively, this gadget forces mispredictions to always access A1[0],
11
32 until t ′′
31 has been executed; str-act of t ′′
Consider the extension of the previous example with the gadget
and suppose predbr mispredicts t23 7→ 1. Œe instruction in a′′
3 in-
troduces a data dependency between t11 and t32 since str-act of t31
includes t ′′
31 includes t ′
34;
and str-act of t ′
32 includes t12. Œese names (and intermediate intra-
instruction dependencies) are in the free names of some condition
of a PC store, hence they cannot be predicted by predbr and their
dependencies are enforced by the semantics. In particular, when
t23 is mispredicted as 1, t ′′
32 is executed a‰er that t11 has obtained
the value from the memory. Œis ensures that t ′′
32 sets r0 to 0 every
time a buﬀer overread occurs. Œerefore misspeculations generate
the observations dl A1 + 0 and dl A2 + A1[0], which do not violate
the security condition (since A1 is labeled as public).
7.1.3 New Vulnerability: Spectre-PHT ICache. When the ﬁrst
Spectre aŠack was published, some microarchitectures (e.g., Cor-
tex A53) were claimed immune to the aŠack because of “allowing
speculative fetching but not speculative execution” [5]. Œe infor-
mal argument was that mispredictions cannot cause buﬀer over-
reads or leave any footprint on the cache in absence of specula-
tive loads. To check this claim, we constrain the semantics to only
allow speculation of PC values. Speciﬁcally, we require for any
transition (σ , δ , P) −→→→ (σ ′
, P ′) that executes a microinstruction
(step-param(σ , σ ′) = (Exe, t )) which is either a load (t ← c?ld τ ta ∈
σ ) or a store (t ← c?st τ ta tv ∈ σ ) of a resource other than the
program counter (τ , P C) to have an empty snapshot on past
microinstructions (dom(δ ) ∩ {t ′ | t ′
 N }
a3
violate the security condition. Consider the program *p:=&f; (*p)()
that saves the address of a function (i.e., &f ) in a function pointer
at constant address p and immediately invokes the function. As-
suming that these instructions are stored at addresses a1 and a2,
their MIL translation is:
t11
st M p &f
t21
l d M p
a1
a2
t12
st P C a2
t22
t21
t23
st P C t22