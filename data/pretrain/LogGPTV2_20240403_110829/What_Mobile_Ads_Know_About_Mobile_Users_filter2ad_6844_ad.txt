(cid:88)
(cid:88)
(cid:88)
(cid:88)
MoPub
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
TABLE VI: Feasibility of inference attacks using the local resource oracle across devices and advertising libraries (columns
labeled with AdSDK indicate the presence of any app using that AdSDK on the device)
Note that a malicious ad can query the local resource oracle
for as many URLs as it wishes to conﬁrm visited pages.
D. Social graph
Kakao Talk is a popular messaging app with over 100
million installs. It caches the thumbnails of friends’ images
in external storage. Thus, if the attacker has a mapping
from the names of cached thumbnails to the corresponding
identities, he can easily identify the user’s friends.
Even if the attacker has only a limited number of
mappings between cached images and people, he can
still infer whether his malicious advertising creative is
served to a particular user by checking the presence of
the cached images of this user’s friends. Furthermore,
even partial knowledge of the victim’s social neighborhood
helps the attacker infer the victim’s identity [34]. Inferred
identity can then be conﬁrmed using location data and
other identiﬁers directly available to the attacker.
In our experiments, the local resource oracle correctly
identiﬁed the presence and absence of friends’ thumbnail
images in the user’s Kakao Talk contact list.
E. User trajectories
As explained in Section IV-D, an ad running in the
MoPub AdSDK can learn both the location and device
identiﬁer, letting the advertiser construct a partial trajectory
if his ads are shown to the same user more than once.
We created a simple app following MoPub integra-
tion guidelines. The app requests ACCESS FINE LOC-
ATION, emulating the scenario where the app needs ﬁne-
grained location for its own functionality. We also created
an advertising creative that reports the device’s location to
our server, combined with the timestamp and GAID.
Our simulated advertiser was able to re-construct ﬁne-
grained trajectories of one of the authors who installed the
app on his device—see Figure 9.
It is well-known that even simple trajectories, such as
work-home place pairs and commute paths, are strongly
identifying [14, 20, 31, 55]. Furthermore, just one location
can identify the user if, for example, it is reported from
inside a single-person residence.
Finally, the attacker can combine multiple pieces of
information, for example, to infer social ties between users
from their geographic co-locations [12].
VII. Defenses
A. App developers
Unfortunately, the developers of ad-supported apps have
few options to protect their users from malicious advertis-
ing. The logic of AdSDKs and the conﬁguration settings
of WebView instances used by AdSDKs to display ads are
opaque to the apps, and app developers have no control
over them. If an app’s business model requires it to include
an AdSDK that needs READ EXTERNAL STORAGE,
the app is forced to request this permission from the user.
In Web programming, website owners can specify Con-
tent Security Policy (CSP) for their pages to conﬁne third-
party JavaScript code [45]—assuming users’ browsers sup-
port CSP. Android’s WebView supports CSP for loaded
content, but there is no way for app developers to enforce
CSP on the advertising creatives loaded by WebView
instances within AdSDKs. Furthermore, app developers
have no mechanisms for restricting the privileges of the
AdSDKs they include. In particular, an app cannot conﬁne
WebView modules to an isolated subspace of external
storage because this is not supported by the Android OS.
B. AdSDK providers
AdSDK providers have more options to protect users
from malicious advertising. For example, they may scan
advertising creatives to detect the presence of privacy-
violating code. These scans can be evaded by malicious ad-
vertisers by delivering different scripts to different clients
10
Example of malicious advertising code
Checking the existence of non-image ﬁles
’DMV’: ’1645feb7’,
...
1 var checklist = {
2
3
4 };
5 function vetFiles() {
6
7
for (var key in checklist) {
var script_elem = document.
8
9
10
createElement(’script’);
// If the file is present, filePresent
will be called
script_elem.addEventListener("load",
filePresent);
script_elem.src = "file:///sdcard/
TunnyBrowser/cache/webviewCache/" +
checklist[key];
script_elem.label = key;
document.body.appendChild(script_elem);
11
12
13
14 }
15
16 window.addEventListener("load", vetFiles,
}
true);
Fig. 8: Inferring sites visited in the Dolphin browser
1 
2
3
...
...
4
5 
payload.js checks the existence of cached ﬁles
’Abilify’: ’-71942260.0’,
’Brintellix’: ’45704837.0’,
...
’Xanax’: ’-605716878.0’
1 // Medications to check
2 var checklist = {
3
4
5
6
7 };
8
9 function imagePresent(e) {
10
var report_obj = document.createElement(’
11
12
img’);
report.obj = "http://attackerdomain.com/
report?med=" + e.target.label;
// Report existence of cached medication
images to the advertiser
document.body.appendChild(img_obj2);
13
14 }
15
16 function vetImages() {
17
18
for (var key in checklist) {
var img_obj = document.createElement(’
img’);
// If an image is present, imagePresent
will be called
img_obj.addEventListener("load",
imagePresent);
img_obj.src = "file:///sdcard/Android/
data/com.goodrx/cache/uil-images/"
+ checklist[key];
19
20
21
img_obj.label = key;
document.body.appendChild(img_obj);
22
23
24
25 }
26
27 window.addEventListener("load", vetImages,
}
true);
Fig. 7: Checking the presence of cached medication images
on the device
Fig. 9: Inferred trajectory
or by obfuscating malicious JavaScript payloads under the
guise of optimization.
An effective, yet impractical defense is to ban scripts
in advertising creatives. This contradicts the fundamental
business logic of AdSDK providers, who want to accom-
modate advertisers seeking ever more dynamic and respon-
sive advertisements. MRAID speciﬁcation also requires
JavaScript in advertising creatives [26]. Therefore, a ban
on scripts is not aligned with the trend towards richer, more
interactive advertisements.
A more feasible partial defense is to “jail” the WebView
instance used to show advertising impressions so that it can
access only a dedicated subspace of external storage. Since
the attacks we presented (with the exception of trajectory
inference) all involve reading or loading local resources via
ﬁle-scheme URIs, an AdSDK can try to intercept all such
requests and block those attempting to access resources
outside the dedicated directory.
Since Android 3.0 Honeycomb, WebView supports the
shouldInterceptRequest API that lets developers register
their own callback methods. AdSDK providers can im-
11
1 // Extends WebViewClient to check resource
requests
2 class SandboxWebViewClient extends
WebViewClient {
// Define a whitelisted directory that
loaded HTML contents are allowed to
access
// JAIL_DIR: /data/data/[package]/
app_jail
final Uri JAIL_DIR = Uri.fromFile(
getApplicationContext().getDir("jail"
,0));
final String JAIL_PREFIX = JAIL_DIR.
getPath();
@Override
public WebResourceResponse
shouldInterceptRequest (WebView view,
String url) {
// Intercept every file URI request and
check whether the file path of the
URL is a subdirectory of JAIL_DIR
Uri givenUri = Uri.parse(url);
String givenPath = givenUri.getPath();
if ("file".equals(givenUri.getScheme())
) {
if (givenPath.startsWith(JAIL_PREFIX)
) {
// If URL is a file URI and a
subdirectory of JAIL_DIR, the
request is granted
return null;
} else {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
// Otherwise, block access
return new WebResourceResponse("
text/html", "UTF-8", null);
}
} else {
// All other requests are allowed
return null;
20
21
22
23
24
25
26
27
28 }
29 ...
30 // Assigns SandboxWebViewClient to a
}
...
}
...
WebView instance that shows advertising
creatives
31 WebView myWebView = (WebView) findViewById(
R.id.webview);
32 myWebView.setWebViewClient(new
SandboxWebViewClient());
33 ....
Fig. 10: “Jailing” WebView by intercepting URI requests
plement their access-control logic in the callback method.
This defense is difﬁcult to implement, however, because
it requires that the AdSDK (1) intercept all possible ways
in which JavaScript can access local ﬁles from WebView,
and (2) correctly interpret the ﬁle path.
Figure 10 shows a proof of concept
that conﬁnes
ﬁle URI requests to a whitelist of designated app-owned
directories. Ln 5 and 6 deﬁne a jail directory for WebView
instances. All subdirectories of the jail directory can be
accessed by WebView instances that use SandboxWeb-
ViewClient. Ln 14 in the shouldInterceptRequest call-
back checks that the intercepted ﬁle URI is a sub-directory
of the jail directory.
This defense is only a limited, partial protection. It
checks ﬁle URI requests, but there may be other ways
to access local resources that bypass the defense. For
example, Android does not invoke shouldInterceptRe-
quest for content URIs (content://). Therefore, when
a WebView instance enables setAllowUniversalAccess-
FromFileURLs, the attacker can steal local ﬁles by send-
ing XMLHttpRequest to content URIs. In particular, pic-
tures taken by the device’s on-board camera are available
via content://media/external/images/media/[number].
Therefore, we strongly recommend not to enable setAl-
lowUniversalAccessFromFileURLs and not to change its
default false setting.
Furthermore, after intercepting the URI, AdSDK must
correctly interpret the ﬁle path in the request and the origin
of the JavaScript code that issued the request. This is
notoriously error-prone [18, 19, 44].
We emphasize that the proposed defense is designed
against malicious advertisers. It is not effective against
malicious apps. If a malicious app with the READ EX-
TERNAL STORAGE permission is already installed on
the user’s device, it can read other apps’ ﬁles directly from
external storage, without any need for inference attacks.
An AdSDK can also “jail” advertising impressions by
imposing a CSP on them. Conﬁning URIs to certain
directories requires matching the path parts of URIs, which
is not supported by CSP 1.0 [45]. CSP 2.0 has path
matching functionality [52], but CSP 2.0 is supported in
Android WebView only since Android 5.0 which currently
accounts for 15% of the Android market [13]. This defense
is thus not available on 85% of Android devices.
As an alternative to jailing and ﬁne-grained ﬁltering,
AdSDK may simply block ads from loading local re-
sources regardless of their origin. This is likely unac-
ceptable because it prevents media-rich ads from reading
cached video and images and will result in unnecessary
mobile network data usage.
C. Mobile OS designers
A more robust defense would add new mobile-OS
facilities that permit application-level code such as AdSDK
to restrict a class such as WebView to a dedicated storage