# Title: EndBox: Scalable Middlebox Functions Using Client-Side Trusted Execution

## Authors:
- David Goltzsche
- Signe Rüsch
- Manuel Nieke
- Sébastien Vaucher
- Nico Weichbrodt
- Valerio Schiavoni
- Pierre-Louis Aublin
- Paolo Costa
- Christof Fetzer
- Pascal Felber
- Peter R. Pietzuch
- Rüdiger Kapitza

### Affiliations:
- **TU Braunschweig, Germany**: David Goltzsche, Signe Rüsch, Manuel Nieke, Nico Weichbrodt, Rüdiger Kapitza
- **University of Neuchâtel, Switzerland**: Sébastien Vaucher, Valerio Schiavoni, Pascal Felber
- **Imperial College London, United Kingdom**: Pierre-Louis Aublin, Peter R. Pietzuch
- **Microsoft Research, United Kingdom**: Paolo Costa
- **TU Dresden, Germany**: Christof Fetzer

### Conference:
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

---

# Abstract
Many organizations enhance the performance, security, and functionality of their managed networks by deploying middleboxes centrally as part of their core network. While this simplifies maintenance, it also increases costs because the middlebox hardware must scale with the number of clients. A promising alternative is to outsource middlebox functions to the clients themselves, thus leveraging their CPU resources. However, this approach raises security challenges for critical middlebox functions such as firewalls and intrusion detection systems.

We introduce EndBox, a system that securely executes middlebox functions on client machines at the network edge. Its design combines a virtual private network (VPN) with middlebox functions that are hardware-protected by a trusted execution environment (TEE), as offered by Intel’s Software Guard Extensions (SGX). By maintaining VPN connection endpoints inside SGX enclaves, EndBox ensures that all client traffic, including encrypted communication, is processed by the middlebox. Despite its decentralized model, EndBox's middlebox functions remain maintainable: they are centrally controlled and can be updated efficiently. We demonstrate EndBox with two scenarios involving (i) a large company and (ii) an Internet service provider that both need to protect their network and connected clients. We evaluate EndBox by comparing it to centralized deployments of common middlebox functions, such as load balancing, intrusion detection, firewalls, and DDoS prevention. Our results show that EndBox achieves up to 3.8× higher throughput and scales linearly with the number of clients.

---

# I. Introduction
Middleboxes are essential components in the backbones of large managed networks, implementing various security and performance-related functions such as firewalls, intrusion detection, caching, and load balancing. As network traffic and attacks continue to grow, these middleboxes must handle increasing loads while remaining cost-effective and manageable. The current best practice is to deploy middleboxes centrally, despite the high infrastructure and management costs. Recent research has explored outsourcing middleboxes to cloud infrastructures, which reduces maintenance effort but introduces potential security risks and legal issues.

To address these limitations, we propose a new decentralized deployment approach where middlebox functions are placed on client machines at the network edge. This approach leverages the potentially idle resources of client machines for processing client traffic, which constitutes a significant fraction of traffic in managed networks. 

A decentralized deployment model for middleboxes raises two main challenges: (i) ensuring that clients can be trusted to execute middlebox functions faithfully, and (ii) retaining control over middlebox functions, which is more challenging with distributed middleboxes. While this is achievable for tightly administered servers, it is difficult for client machines due to missing patches, improper configuration, careless users, or rogue insiders, making them more vulnerable to malicious software.

We describe EndBox, a system for the trusted execution of middlebox functions on client machines. EndBox is based on a virtual private network (VPN), specifically OpenVPN, enhanced with support for trusted middlebox functions through the Click software router. EndBox intercepts all traffic between the client and the network, ensuring that it is processed by middlebox functions executing on the client machine. These functions are protected by trusted hardware features, such as Intel’s Software Guard Extensions (SGX), which enforce their use and protect their integrity.

EndBox also supports the analysis of encrypted network traffic without compromising end-to-end security, unlike man-in-the-middle (MITM) proxies. Despite its decentralized deployment model, middlebox functions executed by EndBox can be reconfigured securely, rapidly, and seamlessly using user-defined in-band VPN control messages.

The remainder of the paper is organized as follows:
- **Section II** introduces two scenarios for EndBox and discusses the problem statement and threat model.
- **Section III** describes the EndBox design, explaining how it secures middlebox functions using Intel SGX, maintains VPN connection endpoints inside SGX enclaves, and processes encrypted network traffic securely.
- **Section IV** provides implementation details, including integration with the VPN client and the Click software router, and optimizations for reducing SGX enclave transitions and enabling use case-specific traffic protection.
- **Section V** evaluates EndBox, demonstrating its immunity to various attacks, linear scalability with the number of clients, and low performance overhead.

---

# II. Towards Secure Client-Side Middleboxes
In this section, we present explicit scenarios that benefit from the deployment of secure client-side middleboxes (§II-A). We then describe how middleboxes are deployed in today’s managed networks and why state-of-the-art solutions are not suitable for implementing the aforementioned scenarios (§II-B). Finally, we explain the Intel Software Guard Extensions (SGX) as an enabling technology for our solution (§II-C) and discuss our assumed threat model with respect to untrusted clients (§II-D).

### A. Scenarios
We describe two representative scenarios that benefit from secure client-side middleboxes as provided by EndBox.

#### Scenario 1: Enterprise Network
A large company seeks to protect its network using middleboxes. Due to the increasing cost of centralized hardware middleboxes, the company decides to offload middlebox functions to client machines using EndBox. Employees working from remote locations can connect to the internal network or join the network remotely using a VPN client.

#### Scenario 2: ISP Network
An Internet service provider (ISP) with hundreds of thousands of customers wants to offer additional protection by performing deep packet inspection (DPI) on network packets. The goal is to protect customers’ client machines and the ISP’s network components from malware, such as ransomware. However, it is challenging for the provider to implement such a system due to the need to access encrypted traffic payload and the high cost of acquiring middleboxes capable of extensive analysis. The ISP extends its product portfolio by offering a data plan that deploys EndBox for network traffic analysis on the client machines of customers, including a discount to compensate for the allocation of client-side resources.

### B. Middleboxes Today
Middleboxes play a central role in analyzing, filtering, and manipulating network traffic. Typical examples include firewalls and intrusion detection and prevention systems (IDPSs) for improved security, and caches and load balancers for better performance. There are three fundamentally different approaches to deploying middleboxes:

#### Centralized Middlebox Deployments
This is the most common type of deployment in managed networks, where middleboxes are placed between servers and the gateway to the Internet. As middleboxes are diverse and often complex, there is a trend to replace costly specialized hardware appliances with software-based solutions running on commodity hardware. With ever-growing network traffic and enterprise links offering capacities reaching 100 Gbps, scalable software solutions are required. Since middleboxes are often stateful, simple horizontal packet-based scaling is challenging. Centralized middlebox deployments are non-trivial to scale with the number of client machines, resource-intensive, and consequently costly.

#### Cloud-Based Middlebox Deployments
In line with the trend of network functions virtualization (NFV), middleboxes are outsourced to public clouds operated by third parties or private telco clouds operated by ISPs. Although using public clouds relieves network administrators from managing middleboxes, it comes with several downsides: (i) traffic must be redirected, incurring additional latency; (ii) public clouds are external, untrusted infrastructure, moving critical functions off-site; and (iii) traffic redirected to clouds may be filtered or manipulated outside the network. Offloading middlebox functions to private telco clouds may incur less latency and be more trustworthy, but still requires substantial investment by ISPs. In summary, cloud-based middleboxes are convenient to manage but potentially reduce the reliability of managed networks due to concerns regarding security, latency, and legality.

#### Middleboxes at End-Hosts
Finally, middlebox functions may be placed at end-hosts, either servers in a data center or clients inside an enterprise environment. These approaches benefit from network traffic being processed directly at its source or destination, improving scalability as each host handles its own traffic. However, fully untrusted end-hosts have not been considered, which is the key challenge introduced by the scenarios described in §II-A. In contrast, ETTM [20] does consider untrusted end-hosts but has limitations: (i) it provides lower security guarantees, e.g., it cannot withstand physical attacks; (ii) it relies on traffic being correctly forwarded by physical switches, extending the trusted computing base (TCB) of the whole system; and (iii) it builds on an expensive distributed consensus algorithm (see §VI).

In this paper, our goal is to explore a deployment model that targets entirely untrusted clients and network hardware to reap the following benefits: (i) network traffic can be filtered or processed at the source or destination; (ii) processing encrypted traffic does not create vulnerabilities and is practical; (iii) central network devices in a managed network are relieved from having to provide middlebox functions; and (iv) deployments can be made to scale because middlebox functions are executed by potentially under-utilized client machines.

### C. Intel SGX
Recent Intel CPUs include support for trusted execution environments (TEEs) in the form of Software Guard Extensions (SGX). SGX enables the protection of data and code through safe compartments called enclaves. Computations performed inside an enclave are isolated from potentially malicious software, including the operating system.

SGX uses special x86 instructions to create and manage enclaves. Enclaves occupy an isolated logical memory range inside the address space of a process. SGX protects the integrity and confidentiality of this range with checksums and memory encryption. Enclave memory is stored in a system-reserved memory range called the enclave page cache (EPC), which is transparently encrypted [21].

The Intel SGX software development kit (SDK) offers functionality to help with enclave software development, such as lifecycle management and support for function calls across the enclave boundary. Function calls that cross from the untrusted to the trusted environment are called ecalls, while ocalls perform the opposite.

In addition to protecting code and data, SGX can authenticate enclaves through local or remote attestation. Local attestation provides a way for two enclaves on the same machine to authenticate each other based on measurements, which are essentially hashes of the enclaves. Attestation depends on messages called reports that can contain user-defined data, e.g., for binding data to an enclave instance. Remote attestation is based on keys fused into the CPU during manufacturing and extends attestation to a remote machine [22]. The process involves data structures called quotes generated by a special enclave called the Quoting Enclave (QE). Using the web-based Intel Attestation Service (IAS), quotes can be remotely verified to originate from a genuine SGX CPU.