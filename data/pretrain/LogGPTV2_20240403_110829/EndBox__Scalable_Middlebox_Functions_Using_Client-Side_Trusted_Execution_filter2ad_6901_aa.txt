title:EndBox: Scalable Middlebox Functions Using Client-Side Trusted Execution
author:David Goltzsche and
Signe R&quot;usch and
Manuel Nieke and
S&apos;ebastien Vaucher and
Nico Weichbrodt and
Valerio Schiavoni and
Pierre-Louis Aublin and
Paolo Costa and
Christof Fetzer and
Pascal Felber and
Peter R. Pietzuch and
R&quot;udiger Kapitza
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
ENDBOX: Scalable Middlebox Functions
Using Client-Side Trusted Execution
David Goltzsche∗, Signe R¨usch∗, Manuel Nieke∗, S´ebastien Vaucher†, Nico Weichbrodt∗, Valerio Schiavoni†,
Pierre-Louis Aublin‡, Paolo Costa§, Christof Fetzer¶, Pascal Felber†, Peter Pietzuch‡ and R¨udiger Kapitza∗
∗TU Braunschweig, Germany, PI:EMAIL, PI:EMAIL
†
‡
¶
University of Neuchˆatel, Switzerland, PI:EMAIL
Imperial College London, United Kingdom, PI:EMAIL
Microsoft Research, United Kingdom, PI:EMAIL
§
TU Dresden, Germany, PI:EMAIL
Abstract—Many organisations enhance the performance, secu-
rity, and functionality of their managed networks by deploying
middleboxes centrally as part of their core network. While this
simpliﬁes maintenance, it also increases cost because middlebox
hardware must scale with the number of clients. A promising
alternative is to outsource middlebox functions to the clients
themselves, thus leveraging their CPU resources. Such an ap-
proach, however, raises security challenges for critical middlebox
functions such as ﬁrewalls and intrusion detection systems.
We describe ENDBOX, a system that securely executes mid-
dlebox functions on client machines at the network edge. Its
design combines a virtual private network (VPN) with middlebox
functions that are hardware-protected by a trusted execution
environment (TEE), as offered by Intel’s Software Guard Exten-
sions (SGX). By maintaining VPN connection endpoints inside
SGX enclaves, ENDBOX ensures that all client trafﬁc, including
encrypted communication, is processed by the middlebox. Despite
its decentralised model, ENDBOX’s middlebox functions remain
maintainable: they are centrally controlled and can be updated
efﬁciently. We demonstrate ENDBOX with two scenarios involving
(i) a large company; and (ii) an Internet service provider that
both need to protect their network and connected clients. We
evaluate ENDBOX by comparing it to centralised deployments of
common middlebox functions, such as load balancing, intrusion
detection, ﬁrewalling, and DDoS prevention. We show that
ENDBOX achieves up to 3.8× higher throughput and scales
linearly with the number of clients.
I. INTRODUCTION
Middleboxes are part of backbones of large networks that are
managed by organisations (managed networks), and implement
diverse sets of functions related to security (e.g. ﬁrewalls and
intrusion detection), and performance (e.g. caching and load bal-
ancing). At the same time, they must handle growing network
trafﬁc [1] and ever-increasing network-based attacks [2], [3],
all while remaining efﬁciently manageable and cost-effective.
The current best practice is to deploy middleboxes centrally
as part of a network, despite high infrastructure and manage-
ment costs [4]. Recent research proposals, instead, investigate
the beneﬁts of outsourcing middleboxes to cloud infrastruc-
tures [4], [5]. While this reduces maintenance effort and, in
turn, cost, deploying critical network functions externally and
redirecting sensitive network trafﬁc off-site introduces potential
security risks and may be illegal.
To address these limitations, we propose a new decentralised
deployment approach in which middlebox functions are placed
on client machines at the network edge. Thus, middlebox
functions can exploit the potentially idle resources of client
machines for processing client trafﬁc. This approach is espe-
cially efﬁcient as client trafﬁc constitutes a large fraction of
trafﬁc in managed networks [6], [7].
A decentralised deployment model for middleboxes raises
two new challenges: (i) it requires clients to be trusted
to execute middlebox functions faithfully, and (ii) network
administrators must retain control over middlebox functions [6],
which is more challenging with distributed middleboxes. While
this is achievable for tightly administered machines such as
servers, it is in contrast with today’s IT management practices
in which employees working as developers retain administrative
privileges on their machines. Due to missing patches, improper
conﬁguration, careless users, or rogue insiders, client machines
are more vulnerable to malicious software which try to
circumvent client-side middlebox functions.
Many organisations would therefore consider essential mid-
dlebox functions such as ﬁrewalls or intrusion detection systems
as too critical to be entrusted to client machines not under
their control. For example, Internet service providers (ISPs)
would typically be reluctant to deploy intrusion detection and
prevention systems (IDPSs) at customers’ client machines to
prevent malware from spreading; companies would refrain from
performing data leak prevention (DLP) on employee machines
but rather install it at a centralised gateway. Thus far, research
proposals have mostly considered host-based deployments of
network functions for trusted server machines [4]–[6].
We describe ENDBOX, a new system for the trusted
execution of middlebox functions on client machines. The
design of ENDBOX is based on a virtual private network (VPN),
namely OpenVPN [8], which is used to access a managed
network from an untrusted one. We enhance the VPN client
with support for the execution of trusted middlebox functions
through the Click software router [9]. ENDBOX intercepts
all trafﬁc between the client and the network and ensures
that it is processed by middlebox functions executing on the
client machine. The functions are guarded by trusted hardware
features available in modern CPUs—ENDBOX uses Intel’s
Software Guard Extensions (SGX) to enforce their use when
clients communicate with a managed network and to protect
their integrity.
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00048
386
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
To support also widely prevalent encrypted network traf-
ﬁc [10], [11], ENDBOX leverages its trusted execution model
for encrypted trafﬁc analysis. In contrast to man-in-the-middle
(MITM) proxies, which may compromise encrypted sessions,
ENDBOX shields encryption keys locally on the clients, thereby
enabling decryption without weakening overall security.
Despite its decentralised deployment model, middlebox
functions executed by ENDBOX can be reconﬁgured securely,
rapidly, and seamlessly. ENDBOX uses user-deﬁned in-band
VPN control messages that are periodically exchanged between
a control server in the managed network and all ENDBOX
clients. Control messages announce conﬁguration updates
to middlebox functions, forcing clients to always use the
latest conﬁguration version. The overhead of exchanging
control messages and applying new middlebox conﬁgurations
is low because ENDBOX clients retrieve new conﬁgurations
asynchronously.
The remainder of the paper is organised around its main
contributions:
§II introduces two scenarios for ENDBOX and discusses the
problem statement as well as the threat model that we
consider when outsourcing middlebox functions to untrusted
clients;
§III describes the ENDBOX design, thereby explaining how it
secures middlebox functions using Intel SGX, maintains
VPN connection endpoints inside SGX enclaves, and securely
processes encrypted network trafﬁc without compromising
end-to-end security;
§IV describes implementation details on how ENDBOX integrates
with the VPN client and the Click software router. We also
detail our approach to reduce the number of SGX enclave
transitions, enable use case speciﬁc trafﬁc protection, and
optimise communication between ENDBOX clients;
§V evaluates ENDBOX and shows that it is immune to many
attacks such as rollback, replay, denial-of-service (DoS) or
cipher downgrade attacks. We show ENDBOX scales linearly
with the number of connected clients and achieves 2.6× to
3.8× higher throughput compared to a centralised middlebox
deployment. Finally, we show that ENDBOX has a low
performance overhead of 16%.
II. TOWARDS SECURE CLIENT-SIDE MIDDLEBOXES
We ﬁrst present explicit scenarios that beneﬁt from the
deployment of secure client-side middleboxes (§II-A). We then
describe how middleboxes are deployed in today’s managed
networks and why state-of-the-art solutions are not suitable for
implementing the aforementioned scenarios (§II-B). Finally,
we explain the Intel Software Guard Extensions (SGX) as an
enabling technology for our solution (§II-C) and discuss our
assumed threat model with respect to untrusted clients (§II-D).
A. Scenarios
We describe two representative scenarios that beneﬁt from
secure client-side middleboxes as provided by ENDBOX.
Scenario 1: Enterprise network. A large company seeks to
protect their network using middleboxes. Due to the increasing
cost of centralised hardware middleboxes, the company decides
to ofﬂoad middlebox functions. It is decided to let client
machines execute middlebox functions using ENDBOX. In
line with employees working from remote locations, clients
can be connected either to the internal network or join the
network remotely using a VPN client.
Scenario 2: ISP network. An Internet service provider (ISP)
with hundreds of thousands of customers wants to offer
additional protection by performing deep packet inspection
(DPI) on network packets. The goal is to protect customers’
client machines as well as the ISP’s network components from
malware, such as ransomware. However, it is challenging for
the provider to implement such a system because (i) they need
to access encrypted trafﬁc payload, which is impossible without
creating security vulnerabilities [12], changing well-established
protocols [13], [14] , or inﬂicting a non-justiﬁable performance
overhead [15]; and (ii) the acquisition of middleboxes being
capable of performing extensive analysis on considerable
amounts of trafﬁc is too costly [16]. The product portfolio
of the ISP is extended by a data plan that deploys ENDBOX
for network trafﬁc analysis on the client machines of customers.
The plan includes a discount to compensate for the allocation
of client-side resources.
B. Middleboxes today
Middleboxes play a central role in analysing, ﬁltering, and
manipulating network trafﬁc. Typical examples are ﬁrewalls
and IDPSs for improved security; or caches and load balancers
for better performance. We observe three fundamentally dif-
ferent approaches of deploying middleboxes: (i) centralised
deployment as part of the managed network; (ii) cloud-based
deployment; and (iii) deployment as part of end-hosts.
Centralised middlebox deployments. This is the most com-
mon type of deployment in managed networks in which the
middleboxes are placed between servers and the gateway to
the Internet (see Fig. 1a). As middleboxes are diverse and
often complex, there is a trend to replace costly specialised
hardware appliances by software-based solutions running on top
of commodity hardware [17]. With ever-growing network trafﬁc
and enterprise links offering capacities reaching 100 Gbps, this
requires scalable software solutions. Since middleboxes are
often stateful (e.g. during intrusion detection), it is challenging
to perform simple horizontal packet-based scaling, as each
network ﬂow must be assigned to an individual middlebox
instance [7]. Centralised middlebox deployments are non-trivial
to scale with the number of client machines, resource-intensive
and consequently costly [4].
Cloud-based middlebox deployments. In line with the trend
of network functions virtualization (NFV) [18], middleboxes
are outsourced to public clouds operated by a third party [4]
or private telco clouds operated by ISPs [19] (see Fig. 1b).
Although using public clouds relieves network administrators
from the management of middleboxes, it comes with several
downsides: (i) in order to be processed in a cloud infrastructure,
trafﬁc must be redirected thereby incurring additional latency;
(ii) public clouds are external, untrusted infrastructure, i.e.
387
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
Server
Server
Server
Server
Server
Server
Server
Middle
box
Server
Middle
box
Server
Middle
box
Managed 
Network
Gateway
Client
Client
Client
Server
Server
Server
Managed 
Network
Gateway
Client
Middle
box
Client
Middle
box
Client
Middle
box
Middlebox
Managed 
Network Gateway
Client
Client
Client
(a) centralised
Managed 
Network
Gateway
Client
Client
Client
d
u
o
Middle
boxC
l
(b) cloud-based
(c) server-side
(d) client-side
Fig. 1: Different middlebox deployment models: (a) traditional centralised hardware middleboxes, (b) outsourcing of software
middleboxes into public or private cloud environments, and (c, d) software middleboxes at end-hosts
critical functions are moved off-site; and (iii) trafﬁc redirected
to clouds may be ﬁltered or manipulated outside the network.
Ofﬂoading middlebox functions to private telco clouds may
incur less latency and the infrastructure can be regarded as
more trustworthy. However, it still needs substantial investment
by ISPs. In summary, cloud-based middleboxes are convenient
to manage, but potentially reduce the reliability of managed
networks. They are often discarded because of concerns
regarding security, latency, and legality.
Middleboxes at end-hosts. Finally, middlebox functions may
also be placed at end-hosts, be it servers in a data centre
(see Fig. 1c) [6] or clients inside an enterprise environment
(see Fig. 1d) [20]. These approaches beneﬁt from network
trafﬁc being processed directly at its source or destination,
improving scalability as each host handles its own trafﬁc.
However, fully untrusted end-hosts have not been considered,
which is the key challenge introduced by the scenarios described
in §II-A. In contrast, ETTM [20] does consider untrusted
end-hosts, but its approach is limited: Contrary to ENDBOX,
ETTM (i) provides lower security guarantees; e.g. it cannot
withstand physical attacks; (ii) relies on trafﬁc being correctly
forwarded by physical switches, thus, extending the trusted
computing base (TCB) of the whole system; and (iii) builds
on an expensive distributed consensus algorithm (see §VI).
In this paper, our goal is to explore a deployment model
that targets entirely untrusted clients and network hardware
in order to reap the following beneﬁts: (i) network trafﬁc
can be ﬁltered or processed at the source or destination;
(ii) processing encrypted trafﬁc does not create vulnerabilities
and is practical; (iii) central network devices in a managed
network are relieved from having to provide middlebox
functions; and (iv) deployments can be made to scale because
middlebox functions are executed by potentially under-utilised
client machines.
C. Intel SGX
Recent Intel CPUs include support for trusted execution envi-
ronments (TEEs), in the form of Software Guard Extensions
(SGX). SGX enables the protection of data and code through
safe compartments called enclaves. Computations performed
inside an enclave are isolated from potentially malicious
software, including the operating system.
SGX uses special x86 instructions to create and manage
enclaves. Enclaves occupy an isolated logical memory range
inside the address space of a process. SGX protects the integrity
as well as the conﬁdentiality of this range with checksums and
memory encryption. Enclave memory is stored in a system-
reserved memory range called enclave page cache (EPC) that
is transparently encrypted [21].
The Intel SGX software development kit (SDK) offers
functionality to help with enclave software development, such
as life cycle management or support for function calls across the
enclave boundary. Function calls that cross from the untrusted to
the trusted environment are called ecalls, while ocalls perform
the opposite.
In addition to protecting code and data, SGX can authenticate
enclaves through local or remote attestation: local attestation
provides a way for two enclaves on the same machine to
authenticate each other based on measurements, which basically
are hashes of the enclaves. Attestation depends on messages
called reports that can contain user-deﬁned data, e.g. for binding
data to an enclave instance. Remote attestation is based on
keys fused into the CPU during manufacturing and extends
attestation to a remote machine [22]. The process involves
data structures called quotes that are generated by a special
enclave called Quoting Enclave (QE). Using the web-based
Intel Attestation Service (IAS), quotes can be remotely veriﬁed
to originate from a genuine SGX CPU.