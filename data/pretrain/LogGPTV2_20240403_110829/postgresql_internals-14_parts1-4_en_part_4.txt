primary key, btree, for table "pg_toast.pg_toast_16385"
Thus,atableincreasestheminimumnumberofforkfilesusedbythetable
up to eight: three for the main table,three for the  table,and two for the
index.
Columncusestheextendedstrategy,soitsvalueswillbecompressed:
=> UPDATE t SET c = repeat('A',5000);
=> SELECT * FROM pg_toast.pg_toast_16385;
chunk_id | chunk_seq | chunk_data
−−−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−−−
(0 rows)
The  table is empty: repeated symbols have been compressed by the  al-
gorithm,sothevaluefitsthetablepage.
Andnowlet’sconstructthisvalueofrandomsymbols:
=> UPDATE t SET c = (
SELECT string_agg( chr(trunc(65+random()*26)::integer), '')
FROM generate_series(1,5000)
)
RETURNING left(c,10) || '...' || right(c,10);
?column?
−−−−−−−−−−−−−−−−−−−−−−−−−
LIDPTCFYKM...YZSXTPJBVN
(1 row)
UPDATE 1
Thissequencecannotbecompressed,soitgetsintothetable:
=> SELECT chunk_id,
chunk_seq,
length(chunk_data),
left(encode(chunk_data,'escape')::text, 10) || '...' ||
right(encode(chunk_data,'escape')::text, 10)
FROM pg_toast.pg_toast_16385;
34
1.2 ProcessesandMemory
chunk_id | chunk_seq | length | ?column?
−−−−−−−−−−+−−−−−−−−−−−+−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−
16390 | 0 | 1996 | LIDPTCFYKM...NLEHTFPEYD
16390 | 1 | 1996 | JFHGWVQWCO...PEQZGVCSID
16390 | 2 | 1008 | EMIXMJJHXQ...YZSXTPJBVN
(3 rows)
Wecanseethatthecharactersareslicedintochunks.Thechunksizeisselectedin
suchawaythatthepageofthetablecanaccommodatefourrows.Thisvalue
variesalittlefromversiontoversiondependingonthesizeofthepageheader.
Whenalongattributeisaccessed,Postgreautomaticallyrestorestheoriginal
valueandreturnsittotheclient;itallhappensseamlesslyfortheapplication. If
longattributesdonotparticipateinthequery,thetablewillnotbereadat
all. Itisoneofthereasonswhyyoushouldavoidusingtheasteriskinproduction
solutions.
Iftheclientqueriesoneofthefirstchunksofalongvalue,Postgrewillreadthe v.
requiredchunksonly,evenifthevaluehasbeencompressed.
Nevertheless, data compression and slicing require a lot of resources; the same
goes for restoring the original values. That’s why it is not a good idea to keep
bulky data in Postgre, especially if this data is being actively used and does
notrequiretransactionallogic(likescannedaccountingdocuments).Apotentially
betteralternativeistostoresuchdatainthefilesystem,keepinginthedatabase
onlythe names ofthe correspondingfiles. But thenthe database system cannot
guaranteedataconsistency.
1.2 Processes and Memory
APostgreserverinstanceconsistsofseveralinteractingprocesses.
The first process launched at the server start is postgres, which is traditionally
calledpostmaster.Itspawnsalltheotherprocesses(Unix-likesystemsusethefork
system call for this purpose) and supervises them: if any process fails, postmas-
terrestartsit(orthewholeserverifthereisariskthattheshareddatahasbeen
damaged).
35
Chapter1 Introduction
Because of its simplicity,the process model has been used in Postgre from thevery
beginning,andeversincetherehavebeenunendingdiscussionsaboutswitchingoverto
threads.
Thecurrentmodelhasseveraldrawbacks: staticsharedmemoryallocationdoesnotallow
resizing structures like buffer cache on the fly; parallel algorithms are hard to imple-
mentandlessefficientthantheycouldbe;sessionsaretightlyboundtoprocesses.Using
threadssoundspromising,eventhoughitinvolvessomechallengesrelatedtoisolation,
OS compatibility,and resource management. However,their implementation would re-
quirearadicalcodeoverhaulandyearsofwork,soconservativeviewsprevailfornow: no
suchchangesareexpectedinthenearfuture.
Serveroperationismaintainedbybackgroundprocesses.Herearethemainones:
startup restoresthesystemafterafailure.
p. autovacuum removesstaledatafromtablesandindexes.
p. walwriter writesentriestodisk.
p. checkpointer executescheckpoints.
p. writer flushesdirtypagestodisk.
statscollector collectsusagestatisticsfortheinstance.
walsender sendsentriestoareplica.
walreceiver getsentriesonareplica.
Some of these processes are terminated once the task is complete,others run in
thebackgroundallthetime,andsomecanbeswitchedoff.
Eachprocessismanagedbyconfigurationparameters,sometimesbydozensofthem. To
setuptheserverinacomprehensivemanner,youhavetobeawareofitsinnerworkings.
Butgeneralconsiderationswillonlyhelpyouselectmoreorlessadequateinitialvalues;
lateron,thesesettingshavetobefine-tunedbasedonmonitoringdata.
Toenableprocessinteraction,postmasterallocatessharedmemory,whichisavail-
abletoalltheprocesses.
Since disks (especially ,but  too) are much slower than ,Postgre
p. usescaching: somepartofthesharedisreservedforrecentlyreadpages,in
hopethattheywillbeneededmorethanonceandtheoverheadofrepeateddisk
36
1.3 ClientsandtheClient-ServerProtocol
accesswillbereduced. Modifieddataisalsoflushedtodiskaftersomedelay,not
immediately.
Buffercachetakesthegreaterpartofthesharedmemory,whichalsocontainsother
buffersusedbytheservertospeedupdiskaccess.
Theoperatingsystemhasitsowncachetoo. Postgre(almost)neverbypasses
theoperatingsystemmechanismstousedirect/,soitresultsindoublecaching.
PostgreSQL
instance
postmaster
c ac al pc ali plei p pei pn e l pn lit n lcit ciat cat ati toioin onn bba bac ack cke ken end ndd backgroundprocesses
sharedmemory
buffercache
operating
system
cache
Incaseofafailure(suchasapoweroutageoranoperatingsystemcrash),thedata
kept in  is lost, including that of the buffer cache. The files that remain on
diskhavetheirpageswrittenatdifferentpointsintime.Tobeabletorestoredata
consistency,Postgremaintainsthewrite-aheadlog ()duringitsoperation, p.
whichmakesitpossibletorepeatlostoperationswhennecessary.
1.3 Clients and the Client-Server Protocol
Anothertaskofthepostmasterprocessistolistenforincomingconnections.Once
a new client appears,postmaster spawns a separate backend process.1 The client
1 backend/tcop/postgres.c,PostgresMainfunction
37
Chapter1 Introduction
establishesaconnectionandstartsasessionwiththisbackend. Thesessioncon-
tinuesuntiltheclientdisconnectsortheconnectionislost.
The server has to spawn a separate backend for each client. If many clients are
tryingtoconnect,itcanturnouttobeaproblem.
p. • Each process needs  to cache catalog tables,prepared statements,inter-
p. mediate query results,and other data. The more connections are open,the
morememoryisrequired.
• If connections are short and frequent (a client performs a small query and
disconnects),thecostofestablishingaconnection,spawninganewprocess,
andperformingpointlesslocalcachingisunreasonablyhigh.
• Themoreprocessesarestarted,themoretimeisrequiredtoscantheirlist,and
p. thisoperationisperformedveryoften. Asaresult,performancemaydecline
asthenumberofclientsgrows.
This problem can be resolved by connection pooling, which limits the number of
spawned backends. Postgre has no such built-in functionality,so we have to
rely on third-party solutions: pooling managers integrated into the application
serverorexternaltools(suchasPgBouncer1 orOdyssey2). Thisapproachusually
meansthateachserverbackendcanexecutetransactionsofdifferentclients,one
after another. It imposes some restrictions on application development since it
is only allowed to use resources that are local to a transaction,not to the whole
session.
Tounderstandeachother,aclientandaservermustuseoneandthesameinter-
facingprotocol.3 Itisusuallybasedonthestandardlibpqlibrary,buttherearealso
othercustomimplementations.
Speakinginthemostgeneralterms,theprotocolallowsclientstoconnecttothe
serverandexecutequeries.
Aconnectionisalwaysestablishedtoaparticulardatabaseonbehalfofaparticu-
larrole,oruser. Althoughtheserversupportsadatabasecluster,itisrequiredto
establishaseparateconnectiontoeachdatabasethatyouwouldliketouseinyour
1 pgbouncer.org
2 github.com/yandex/odyssey
3 postgresql.org/docs/14/protocol.html
38
1.3 ClientsandtheClient-ServerProtocol
application.Atthispoint,authenticationisperformed:thebackendprocessverifies
theuser’sidentity(forexample,byaskingforthepassword)andcheckswhether
thisuserhastherighttoconnecttotheserverandtothespecifieddatabase.
Squeriesarepassedtothebackendprocessastextstrings. Theprocessparses
thetext,optimizesthequery,executesit,andreturnstheresulttotheclient.
39
Part I
Isolation
and MVCC
2
Isolation
2.1 Consistency
The key feature of relational databases is their ability to ensure data consistency,
thatis,datacorrectness.
It is a known fact that at the database level it is possible to create integrity con-
straints,suchasor. Thedatabasesystemensuresthatthesecon-
straintsareneverbroken,sodataintegrityisnevercompromised.
If all the required constraints could be formulated at the database level, consis-
tency would be guaranteed. But some conditions are too complex for that, for
example,theytouchuponseveraltablesatonce. Andevenifaconstraintcanbe
definedin the database,butforsome reason it is not,it does notmean that this
constraintmaybeviolated.
Thus,data consistency is stricter than integrity,but the database system has no
ideawhat“consistency”actuallymeans. Ifanapplicationbreaksitwithoutbreak-
ingtheintegrity,thereisnowayforthedatabasesystemtofindout.Consequently,
it is the application that must lay down the criteria for data consistency,and we
havetobelievethatitiswrittencorrectlyandwillneverhaveanyerrors.
Butiftheapplicationalwaysexecutesonlycorrectsequencesofoperators,where
doesthedatabasesystemcomeintoplay?
Firstofall,acorrectsequenceofoperatorscantemporarilybreakdataconsistency,
and—strangeasitmayseem—itisperfectlynormal.
Ahackneyedbutclearexampleisatransferoffundsfromoneaccounttoanother.A
consistencyrulemaysoundasfollows: amoneytransfermustneverchangethetotal
43
Chapter2 Isolation
balanceoftheaffectedaccounts.Itisquitedifficult(althoughpossible)toformulate
thisruleasanintegrityconstraintin,solet’sassumethatitisdefinedatthe
applicationlevelandremainsopaquetothedatabasesystem.Atransferconsistsof
twooperations:thefirstonedrawssomemoneyfromoneoftheaccounts,whereas
thesecondoneaddsthissumtoanotheraccount. Thefirstoperationbreaksdata
consistency,whereasthesecondonerestoresit.
Ifthefirstoperationsucceeds,butthesecondonedoesnot(becauseofsomefail-
ure),dataconsistencywillbebroken.Suchsituationsareunacceptable,butittakes
agreatdealofefforttodetectandaddressthemattheapplicationlevel. Luckily
itisnotrequired—theproblemcanbecompletelysolvedbythedatabasesystem
itselfifitknowsthatthesetwooperationsconstituteanindivisiblewhole,thatis,
atransaction.
Butthereisalsoamoresubtleaspecthere. Beingabsolutelycorrectontheirown,
transactionscanstartoperatingincorrectlywhenruninparallel. That’sbecause
operationsbelongingtodifferenttransactionsoftengetintermixed. Therewould
benosuchissuesifthedatabasesystemfirstcompletedalloperationsofonetrans-
actionandthenmovedontothenextone,butperformanceofsequentialexecution
wouldbeimplausiblylow.
Atrulysimultaneousexecutionoftransactionscanonlybeachievedonsystemswithsuit-
able hardware: a multi-core processor,a diskarray,and so on. But the same reasoning
isalsotrueforaserverthatexecutescommandssequentiallyinthetime-sharingmode.
Forgeneralizationpurposes,boththesesituationsaresometimesreferredtoasconcurrent
execution.
Correct transactions that behave incorrectly when run together result in concur-
rencyanomalies,orphenomena.
Hereis asimple example. Toget consistentdata fromthe database,the applica-
tion must not see any changes made by other uncommitted transactions, at the
veryminimum. Otherwise(ifsometransactionsarerolledback),itwouldseethe
databasestatethathasneverexisted.Suchananomalyiscalledadirtyread. There
arealsomanyotheranomalies,whicharemorecomplex.
When running transactions concurrently, the database must guarantee that the
resultofsuchexecutionwillbethesameastheoutcomeofoneofthepossiblese-
44
2.2 IsolationLevelsandAnomaliesDefinedbytheSQLStandard
quentialexecutions.Inotherwords,itmustisolatetransactionsfromoneanother,
thustakingcareofanypossibleanomalies.
Tosumitup,atransactionisasetofoperationsthattakesthedatabasefromone
correctstatetoanothercorrectstate(consistency),providedthatitisexecutedin
full (atomicity) and without being affected by other transactions (isolation). This
definitioncombinestherequirementsimpliedbythefirstthreelettersofthe
acronym.Theyaresointertwinedthatitmakessensetodiscussthemtogether.In
fact,thedurabilityrequirementishardlypossibletosplitoffeither: afteracrash, p.
the system may still contain some changes made by uncommitted transactions,
andyouhavetodosomethingaboutittorestoredataconsistency.
Thus,thedatabasesystemhelpstheapplicationmaintaindataconsistencybytak-
ingtransactionboundariesintoaccount,eventhoughithasnoideaabouttheim-
pliedconsistencyrules.
Unfortunately, full isolation is hard to implement and can negatively affect per-
formance. Mostreal-lifesystemsuseweakerisolationlevels,whichpreventsome
anomalies,butnotallofthem. Itmeansthatthejobofmaintainingdataconsis-
tencypartiallyfallsontheapplication.Andthat’sexactlywhyitisveryimportant
to understand which isolation level is used in the system,what is guaranteed at
thislevelandwhatisnot,andhowtoensurethatyourcodewillbecorrectinsuch
conditions.
2.2 Isolation Levels and Anomalies Defined by the SQL
Standard
Thestandardspecifiesfourisolationlevels.1 Theselevelsaredefinedbythelist
ofanomaliesthatmayormaynotoccurduringconcurrenttransactionexecution.
Sowhentalkingaboutisolationlevels,wehavetostartwithanomalies.
Weshouldbearinmindthatthestandardisatheoreticalconstruct: itaffectsthe
practice,but the practice still diverges from it in lots of ways. That’s why all ex-
1 postgresql.org/docs/14/transaction-iso.html
45
Chapter2 Isolation
ampleshereareratherhypothetical. Dealingwithtransactionsonbankaccounts,
theseexamplesarequiteself-explanatory,butIhavetoadmitthattheyhavenoth-
ingtodowithrealbankingoperations.
Itisinterestingthattheactualdatabasetheoryalsodivergesfromthestandard: it
wasdevelopedafterthestandardhadbeenadopted,andthepracticewasalready
wellahead.
Lost Update
Thelostupdateanomalyoccurswhentwotransactionsreadoneandthesametable
row,thenoneofthetransactionsupdatesthisrow,andfinallytheothertransaction
updatesthesamerowwithouttakingintoaccountanychangesmadebythefirst
transaction.
Suppose that two transactions are going to increase the balance of one and the
sameaccountby$.Thefirsttransactionreadsthecurrentvalue($,),then
the second transaction reads the same value. The first transaction increases the
balance(makingit$,)andwritesthenewvalueintothedatabase.Thesecond
transactiondoesthesame: itgets$,afterincreasingthebalanceandwrites
thisvalue.Asaresult,thecustomerloses$.
Lostupdatesareforbiddenbythestandardatallisolationlevels.
DirtyReads and Read Uncommitted
The dirty read anomaly occurs when a transaction reads uncommitted changes
madebyanothertransaction.
Forexample,thefirsttransactiontransfers$toanemptyaccountbutdoesnot
committhischange.Anothertransactionreadstheaccountstate(whichhasbeen
updated but not committed) and allows the customer to withdraw the money—
eventhoughthefirsttransactiongetsinterruptedanditschangesarerolledback,
sotheaccountisempty.
ThestandardallowsdirtyreadsattheReadUncommittedlevel.
46
2.2 IsolationLevelsandAnomaliesDefinedbytheSQLStandard
Non-Repeatable Reads and Read Committed
The non-repeatable read anomaly occurs when a transaction reads one and the
samerowtwice,whereasanothertransactionupdates(ordeletes)thisrowbetween
thesereadsandcommitsthechange.Asaresult,thefirsttransactiongetsdifferent
results.
Forexample,supposethereisaconsistencyrulethatforbidshavinganegativebal-
anceinbankaccounts.Thefirsttransactionisgoingtoreducetheaccountbalance
by$. Itchecksthecurrentvalue,gets$,,anddecidesthatthisoperation
ispossible. Atthesametime,anothertransactionwithdrawsallthemoneyfrom
this account and commits the changes. If the first transaction checked the bal-