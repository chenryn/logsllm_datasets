                    needRemove = set()
                    for val in available:
                        if 0 < boards[board][1][col] - (val-boards[board][1][col]) < 
10:
                            # print(f"Removing {val} due to rule 7")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][1][col] == condition[1]:
                            needRemove.add(condition[0])
                    available -= needRemove
                elif row == 0 and boards[board][1][col]==0 and boards[board][2][col]:
                    needRemove = set()
                    for val in available:
                        if (boards[board][2][col]-val)%2==0:
                            # print(f"Removing {val} due to rule 8")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][2][col] == condition[2]:
                            needRemove.add(condition[0])
                    available -= needRemove
                elif row == 1 and boards[board][0][col]==0 and boards[board][2][col]:
                    needRemove = set()
                    for val in available:
                        if 0 < val - (boards[board][2][col]-val) < 10:
                            # print(f"Removing {val} due to rule 9")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][2][col] == condition[2]:
                            needRemove.add(condition[1])
                    available -= needRemove
                elif row == 1 and boards[board][2][col]==0 and boards[board][0][col]:
                    needRemove = set()
                    for val in available:
                        if 0 < val - (boards[board][0][col]-val) < 10:
                            # print(f"Removing {val} due to rule 10")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][0][col] == condition[0]:
                            needRemove.add(condition[1])
                    available -= needRemove
                elif row == 2 and boards[board][0][col]==0 and boards[board][1][col]:
                    needRemove = set()
                    for val in available:
                        if 0 < boards[board][1][col] - (val-boards[board][1][col]) < 
10:
                            # print(f"Removing {val} due to rule 11")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][1][col] == condition[1]:
                            needRemove.add(condition[2])
                    available -= needRemove
                elif row == 2 and boards[board][1][col]==0 and boards[board][0][col]:
                    needRemove = set()
                    for val in available:
                        if (val-boards[board][0][col])%2==0:
                            # print(f"Removing {val} due to rule 12")
                            needRemove.add(val)
                    for condition in unknown_conditions:
                        if boards[board][0][col] == condition[0]:
                            needRemove.add(condition[2])
                    available -= needRemove
                if boards[board][row][0] and boards[board][row][1] and col == 2:
                    needRemove = set()
                    if 0 < boards[board][row][1] - (boards[board][row][0]-boards[board]
[row][1]) < 10:
                        needRemove.add(boards[board][row][1] - (boards[board][row][0]-
boards[board][row][1]))
                    for condition in unknown_conditions:
                        if boards[board][row][0] == condition[0] and boards[board][row]
[1] == condition[1]:
                            needRemove.add(condition[2])
                    available -= needRemove
                elif boards[board][row][0] and boards[board][row][2] and col == 1:
                    needRemove = set()
                    if (boards[board][row][2]-boards[board][row][0])%2==0:
                        needRemove.add(boards[board][row][0] - (boards[board][row][0]-
boards[board][row][2]+1)//2)
                    for condition in unknown_conditions:
                        if boards[board][row][0] == condition[0] and boards[board][row]
[2] == condition[2]:
                            needRemove.add(condition[1])
                    available -= needRemove
                elif boards[board][row][1] and boards[board][row][2] and col == 0:
                    needRemove = set()
                    if 0 < boards[board][row][1] - (boards[board][row][2]-boards[board]
[row][1]) < 10:
                        needRemove.add(boards[board][row][1] - (boards[board][row][2]-
boards[board][row][1]))
                    for condition in unknown_conditions:
                        if boards[board][row][1] == condition[1] and boards[board][row]
[2] == condition[2]:
                            needRemove.add(condition[0])
                    available -= needRemove
                if boards[board][0][col] and boards[board][1][col] and row == 2:
                    needRemove = set()
                    if 0 < boards[board][1][col] - (boards[board][0][col]-boards[board]
[1][col]) < 10:
                        needRemove.add(boards[board][1][col] - (boards[board][0][col]-
boards[board][1][col]))
                    for condition in unknown_conditions:
                        if boards[board][0][col] == condition[0] and boards[board][1]
[col] == condition[1]:
                            needRemove.add(condition[2])
                    available -= needRemove
                elif boards[board][0][col] and boards[board][2][col] and row == 1:
                    needRemove = set()
                    if (boards[board][2][col]-boards[board][0][col])%2==0:
                        needRemove.add(boards[board][0][col] - (boards[board][0][col]-
boards[board][2][col]+1)//2)
                    for condition in unknown_conditions:
                        if boards[board][0][col] == condition[0] and boards[board][2]
[col] == condition[2]:
                            needRemove.add(condition[1])
                    available -= needRemove
                elif boards[board][1][col] and boards[board][2][col] and row == 0:
                    needRemove = set()
                    if 0 < boards[board][1][col] - (boards[board][2][col]-boards[board]
[1][col]) < 10:
                        needRemove.add(boards[board][1][col] - (boards[board][2][col]-
boards[board][1][col]))
                    for condition in unknown_conditions:
                        if boards[board][2][col] == condition[2] and boards[board][1]
[col] == condition[1]:
                            needRemove.add(condition[0])
                    available -= needRemove
                if available:
                    print(row,col,available)
                    return 0, board, row, col, random.choice(list(available))
    # Failed to defense...    
    # for board in range(len(boards)):
    for board in [opp_choice]:
        if solved[board]:
            continue
        for row in range(3):
            for col in range(3):
                if boards[board][row][col] == 0:
                    return 2, board, row, col, 1
opp_choice = 0
context.log_level = 'debug'
for _ in range(1):
    p = remote("10.10.10.103", 3000)
    p.sendlineafter('verbose? (y/n)', 'y')
    numBoards = [1,3,9,13]
    level = 0
    boards = [[[0]*3 for row in range(3)] for board in range(numBoards[level])]
    solved = [False for board in range(numBoards[level])]
    print(boards)
    move(0,1,1,5)
    while not all(solved):
        get_move()
        check_solved()
        if all(solved):
            break
        print(boards)
        attack, board, x,y,val = judge()
        if attack == 1:
            print('Attack!')
            solved[board] = True
        elif attack == 0:
            print('Defend!')
        elif attack == 2:
            print('WTF, failed to defense...')
        print('my:',board, x, y, val)
        move(board, x, y, val)
    status = p.recvuntil('game').decode()
    if 'lose' in status:
        p.close()
        continue
    level = 1
    boards = [[[0]*3 for row in range(3)] for board in range(numBoards[level])]
    solved = [False for board in range(numBoards[level])]
    for board in range(numBoards[level]):
        p.recvuntil('uncomplete')
        p.recvline()
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][0][0] = a
        boards[board][0][1] = b
        boards[board][0][2] = c
        a,b,c = map(int,p.recvline().strip().decode())
        boards[board][1][0] = a
        boards[board][1][1] = b