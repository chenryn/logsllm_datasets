	在确定两个性能指标 X,Y 之间是否存在因果关系的过程中,基于 d-分隔原则,需要判断 X 和 Y 在其他性能 指标为给定值的情况下是否条件独立.由于微服务架构系统中通过监控工具获取的系统性能数据大部分为连
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1239 
续值,为了判断连续数据的条件独立性[74],本文使用了如下方法.续值,为了判断连续数据的条件独立性[74],本文使用了如下方法. 
建立零假设 H0:性能指标 X,Y 在给定条件 C 下的偏相关系数ρXY,C=0.其对应的备择假设 H1 为:X,Y 在给定条 件 C 下的偏相关系数ρXY,C≠0.通过 F 检验验证 H0 是否成立:若 H0 成立,则说明监控指标 X,Y 在给定条件 C 下条 件独立,其实际意义为 X,Y 之间没有因果关系或者 X,Y 经由 C 产生了间接的因果关系.零假设 H0 在 F 检验下的 显著性水平 z(ρXY,C)的计算公式如公式(1)所示. 
| z | ( ρ XY C | ) | = | n | − | | | C | | 3− | ⋅ | log | 1 | + | ρ XY C | (1)  |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|| z |( ρ XY C |) |= |n |− |2 |2 || 3− |⋅ |log |1 |− |ρ XY C |(1)  |
其中,n 为混沌实验数据集中性能指标的数量,|C|为 C 中性能指标的数量.通过文献[75]中的论证可知,满足标准 正态分布.给定阈值 p(本文中 p=0.05),若|z|<p,则接受假设ρXY,C=0,说明 X,Y 在给定条件 C 下独立,并删除因果关 系图中对应的边 X—Y. 
3.3  因果关系边权重赋值
在第 3.2 节得到的性能指标之间的因果关系图中,一个性能指标会存在多条指向该指标的因果关系链路. 为了能够将多条因果关系链路排序,优先输出可能性较高的因果关系链路,本阶段为因果关系图中的每一条因 果关系边赋予权重值,作为因果关系链路的排序依据.由于韧性风险是基于微服务系统的服务降级上所提出的, 且服务性能指标的上升和下降通常由其他系统性能指标的上升和下降引起,本文将混沌实验数据集中各性能 指标的上升和下降变化作为因果关系边权重赋予的依据.如果在相近的时间段内两个性能指标同时发生了明 显的变化,则说明这两个性能指标很有可能是互相影响的.借鉴文献[76]中判断一个事件是否对时序数据产生影响的思路,为了检测某一性能指标的上升和下降,本 文提出的分析方法将该项性能指标的时间序列数据按照指定的数据量依次划分成若干个数据窗口,对每两个 相邻的窗口Γfront,通过 t 检验(student t’s test) 计算Γfront和Γrear之间的检验统计量 tscore.tscore 的计算公式如公式 (2)所示. 
| 其中,n 为数据窗口的大小, | μ Γ | front | , | μ Γ rear | , σ Γ 2 | t | score | = | μ Γ | front | front | − | μ Γ rear | (2)  |
|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|| 其中,n 为数据窗口的大小, |μ Γ |front |, |μ Γ rear |, σ Γ 2 |t |score |= |σ Γ 2 |σ Γ 2 |front |+ |σ Γ 2 rear |(2)  |
| 其中,n 为数据窗口的大小, |μ Γ |front |, |μ Γ rear |, σ Γ 2 |front  |t , σ Γ 2 rear |t , σ Γ 2 rear |n |n |n |− |1 |1 |
| 其中,n 为数据窗口的大小, |μ Γ |front |, |μ Γ rear |, σ Γ 2 |front  |t , σ Γ 2 rear |t , σ Γ 2 rear |分别为窗口Γfront和Γrear内性能数据的均值和方差.若计算得 |分别为窗口Γfront和Γrear内性能数据的均值和方差.若计算得 |分别为窗口Γfront和Γrear内性能数据的均值和方差.若计算得 |分别为窗口Γfront和Γrear内性能数据的均值和方差.若计算得 |分别为窗口Γfront和Γrear内性能数据的均值和方差.若计算得 |分别为窗口Γfront和Γrear内性能数据的均值和方差.若计算得 |到某两个窗口的 tscore 的绝对值大于某个特定阈值在自由度 n−1 时对应的检验统计量(如在阈值为 0.05、窗口 大小为 20 时,t 检验对应的检验统计量为 1.7291),则说明性能指标在两个窗口之间性能发生了显著的上升或下 降变化.tscore 为正值时,性能指标显著下降;tscore 为负值时,性能指标显著上升.图 5 展示了通过上述方法检测一个 服务的性能指标变化的样例,在性能数据上标注的绿色点表示识别到的性能上升变化,红色点表示识别到的性 能下降变化. 
Fig.5  Detected performance changes by student t’s test 
图 5  使用 t 检验检测到的性能数据变化
	通过上述对性能变化检测的方法,一个性能指标的时间数列数据可以转换成图 6 中的性能变化序列,其中, 0 表示性能指标没有显著变化,1 表示性能上升,−1 表示性能指标下降.1240 	Journal of Software软件学报 Vol.32, No.5, May 2021 
…000001000000−10000000100000−100000… 
Fig.6  Performance change series 
图 6  性能变化序列
随后,对于因果关系图中的每一条因果关系边,以边上两个性能指标节点的性能变化序列作为输入,计算两 个监控指标之间的皮尔森系数,即可得到性能指标之间的在性能变化上的关联程度.图 7 展示了一条因果关系 边上的两个性能指标根据性能上升下降的变化构建性能变化序列,并以性能变化序列之间的关联系数为因果 关系边赋予权重的整个过程. 
Fig.7  Causality edge weight assignment 
图 7  因果关系边权重赋值过程
3.4  韧性风险影响链路输出图 7  因果关系边权重赋值过程
3.4  韧性风险影响链路输出
基于在第 3.2 节中的因果关系图,韧性风险影响链路将通过以下方法生成:将不满足服务韧性目标的服务 性能所对应的节点设为目标节点,在因果关系图中寻找所有直接或间接指向目标节点的性能节点,最后构建出 所有由这些节点组成,并最终指向目标节点的因果关系链路.与现有的使用因果关系图的根因诊断的研究相同, 本文以深度优先遍历的思路实现了路径构建算法,并最终将所有的因果关系链路作为结果输出. 
由于在因果关系图中同时包含了有向边和无向边,在因果关系链路构建的过程中,需要对深度优先算法做 出相应的改动,将无向边当作两条方向相反的有向边处理.此外,在因果关系图中进行路径遍历,通常会返回一 条以上的因果关系链路.为了对这些因果关系链路进行排序,以第 3.3 节中设置的因果关系边权重为依据,本文 提出的分析方法对因果关系链路的构建算法进行了如下改进:当算法遍历到因果关系图中的某一个节点时,算 法将优先遍历与该节点相连的权重值较高的边.因此,算法在最后输出韧性风险影响链路的过程中将以可能性 从高到低的顺序依次输出可能的因果关系链路,图 8 为一个基于边权重的因果关系链路排序的样例.Fig.8  Sort causality chains by weight of causality edges 
图 8  根据因果关系边的权重实现因果关系链路的排序
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 	1241 
整个因果关系链路的构建算法如算法 2 所示.算法将输出已排序的若干以韧性风险所影响的服务性能指
标为最终节点的韧性风险影响链路,运维人员能够按照韧性风险影响链路中的性能指标对韧性风险所带来的
影响进行进一步分析. 
算法 2. 因果关系链路构建算法.
输入:因果关系图 G,起始节点 N.
输出:因果关系链路集合 path_strings/ 
1.  functionsearchSource(G,N) 
	//在因果关系图 G 中寻找异常性能节点 N 的影响链路 
2.    varsearch_result  //图搜索结果,搜索的结果为一个树结构3.    search_result.node←N 
	search_result.children←[⋅] 
4.    _searchSources(G,N,search_result)  //以 N 作为源节点开始链路搜索
5.  //根据输出结果构建因果链路集合 
6.  path_strings←[⋅];  //待输出的链路集合 
7.    path_strings.push(N.name); 
	//将只有 N 一个节点的链路作为初始输入的缓存链路 8.    _build_path_strings(search_result.children,path_strings[0]); 
	//通过图搜索结果构建韧性风险影响链路 
9.    returnpath_strings; 