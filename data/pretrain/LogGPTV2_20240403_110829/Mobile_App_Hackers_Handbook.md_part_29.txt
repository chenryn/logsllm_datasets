### Optimized Text

#### APKTool Workflow
1. **Loading Resource Table:**
   - The resource table is loaded from the file: `/home/tyrone/apktool/framework/1.apk`.
   - Status: `Loaded`.

2. **Manifest and Resources:**
   - The regular manifest package is processed.
   - File resources are decoded.
   - Values in XMLs are decoded.
   - Assets and libraries are copied.

3. **Recompiling the APK:**
   - After making necessary modifications to the source, you can recompile the APK using the following command:
     ```sh
     $ java -jar apktool.jar b output/ new.apk
     ```

4. **Building Process:**
   - Sources and resources are checked for changes.
   - Smali files are generated.
   - Libraries are copied.
   - The final APK file is built.

**Note:**
- To build an application using APKTool, ensure that the SDK tool `aapt` is on your PATH.
- APKTool is ideal for modifying applications without access to the source code. It can be downloaded from: [Android APKTool](https://code.google.com/p/android-apktool/).

#### Jadx
- **Jadx** is an open-source DEX decompiler that is actively maintained and improving with each version. It provides both command-line tools and a GUI for browsing decompiled code.
- **Source Code and Downloads:** [Jadx GitHub](https://github.com/skylot/jadx)
- **Figure 6.15:** Viewing decompiled application code in Jadx-gui.

#### JAD
- **JAD** is a free tool for decompiling Java Class files back to source files. It does not provide a user interface like JD-GUI.
- **Status:** No longer in active development (last release in 2001).
- **Reliability:** Found to be less reliable than other similar tools.
- **Download:** [JAD Mirror Site](http://varaneckas.com/jad/)

#### Dealing with ART
- **ART (Android Runtime):** Converts DEX files into OAT files at installation time.
- **OAT Files:** ELF dynamic objects run on the device.
- **Disassembly Tool:** `oatdump` disassembles OAT files similarly to how `dexdump` handles DEX files.
- **APK and DEX Access:** The APK file of each installed application is still stored on the device, making the DEX file accessible even when the OAT file is in use.
- **Extracting DEX from OAT:** A script called `oat2dex` created by Pau Oliva can extract DEX files from OAT files. This script uses `radare2` and can be found at: [oat2dex Script](https://github.com/poliva/random-scripts/blob/master/android/oat2dex.sh)

#### Summary
- **Android Security Model:** Unique and complex, requiring a thorough understanding for effective analysis.
- **Reverse Engineering Tools:** Mature and capable of investigating application behavior and underlying code.
- **Chapter Overview:** This chapter covers the fundamental knowledge required for reverse engineering and hacking Android applications. Chapter 7 will provide a practical start to this process.

### Chapter 7: Attacking Android Applications
- **Introduction:**
  - Given the complexity of Android's security model, it is challenging for developers to create completely secure applications.
  - Attackers should consider multiple approaches and testing perspectives, including the application container, communications, and internet servers.

- **Application Security Model Quirks:**
  - **Interacting with Application Components:**
    - Components can be exported by default, explicitly, or implicitly.
    - **Default Export Behavior:** Content providers are no longer exported by default in API 17 (Android 4.2 Jelly Bean) unless the targetSdkVersion is set to 16 or lower.
    - **Explicitly Exported:** Components marked as exported in the manifest.
    - **Implicitly Exported:** Components with intent filters are exported by default.
  - **Finding Exported Components:**
    - Inspect the applicationâ€™s manifest.
    - Use drozer modules like `app.package.attacksurface` and `app.broadcast.info` for detailed information.

- **Supreme User Contexts:**
  - **Root and System Users:** Can interact with any component, even if not exported.
  - **Risk Assessment:** Low risk compared to other potential exploits, but still important to understand.

- **Permission Protection Levels:**
  - **Custom Permissions:** Best protected with a signature level.
  - **Protection Level Downgrade Attack:** Malicious apps can define permissions with a normal protection level, bypassing the intended security.
  - **Proof of Concept:** Demonstrated on the Twitter application, where a malicious app can interact with unprotected components.

- **Summary:**
  - Understanding the quirks and vulnerabilities in the Android security model is crucial for effective application testing and security analysis.
  - This chapter focuses on attacking applications and their communication channels, while subsequent chapters will cover additional aspects of Android security.