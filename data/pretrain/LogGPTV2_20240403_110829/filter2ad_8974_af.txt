      int v4; // ebx
      v2 = 0;
      result = strlen(a1);
      if ( result )
      {
        v4 = a1 - v1;
        do
        {
          *v1 = byte_402FF8[(char)v1[v4]];
          ++v2;
          ++v1;
          result = strlen(a1);
        }
        while ( v2 
> 翻看了下PE头中.rdata和.data的定义，发现.rdata的RVA是0x2000，内存大小为0x622，.data的RVA是0x3000。也就是说虚拟地址0x402000-0x402621是.rdata段。0x402622至0x402fff为未定义的内存空间（实际上内存页大小是0x1000，所以该端内存的会被默认填充为0）。但这不妨碍我们通过0x402ff8作为基址进行内存定位。翻了下.data段立马发现从0x403018开始为一个疑似转换表。
    a="~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=>> print 'EjRWeJA='.decode('base64').encode('hex')
    1234567890
    >>> print("reverse+".decode("base64").encode("hex").upper())
    ADEBDEAEC7BE
    > X:\tmp\reverse2_final.exe
    input code:ADEBDEAEC7BE
    You've got it !!! DDCTF{reverse+}
### Confused
    void __cdecl -[ViewController checkCode:](ViewController *self, SEL a2, id a3)
    {
      void *v3; // rax
      void *v4; // rax
      void *v5; // ST18_8
      void *v6; // rax
      char *v7; // rax
      void *v8; // rax
      char *v9; // rax
      void *v10; // rax
      void *v11; // rax
      void *v12; // [rsp+38h] [rbp-58h]
      void *v13; // [rsp+40h] [rbp-50h]
      __int128 v14; // [rsp+48h] [rbp-48h]
      __int64 v15; // [rsp+58h] [rbp-38h]
      SEL v16; // [rsp+60h] [rbp-30h]
      void *v17; // [rsp+68h] [rbp-28h]
      char *v18; // [rsp+70h] [rbp-20h]
      __int64 v19; // [rsp+78h] [rbp-18h]
      __int64 v20; // [rsp+80h] [rbp-10h]
      char *v21; // [rsp+88h] [rbp-8h]
      v17 = self;
      v16 = a2;
      v15 = 0LL;
      objc_storeStrong(&v15, a3);
      v3 = objc_msgSend(v17, "pwd");
      v4 = (void *)objc_retainAutoreleasedReturnValue(v3);
      v5 = v4;
      v6 = objc_msgSend(v4, "stringValue");
      v14 = (unsigned __int64)objc_retainAutoreleasedReturnValue(v6);
      objc_release(v5);
      if ( (unsigned __int8)objc_msgSend((void *)v14, "hasPrefix:", CFSTR("DDCTF{")) )
      {
        v7 = (char *)objc_msgSend((void *)v14, "length");
        v8 = objc_msgSend((void *)v14, "substringFromIndex:", v7 - 1);
        v13 = (void *)objc_retainAutoreleasedReturnValue(v8);
        if ( (unsigned __int8)objc_msgSend(v13, "isEqualToString:", CFSTR("}")) )
        {
          v9 = (char *)objc_msgSend((void *)v14, "length");
          v19 = 6LL;
          v18 = v9 - 7;
          v20 = 6LL;
          v21 = v9 - 7;
          v10 = objc_msgSend((void *)v14, "substringWithRange:", 6LL, v9 - 7);
          v12 = (void *)objc_retainAutoreleasedReturnValue(v10);
          if ( objc_msgSend(v12, "length") == (void *)18 )
          {
            v11 = (void *)objc_retainAutorelease(v12);
            *((_QWORD *)&v14 + 1) = objc_msgSend(v11, "UTF8String");
          }
          objc_storeStrong(&v12, 0LL);
        }
        objc_storeStrong(&v13, 0LL);
      }
      if ( *((_QWORD *)&v14 + 1) )
      {
        if ( (unsigned int)sub_1000011D0(*((__int64 *)&v14 + 1)) == 1 )
          objc_msgSend(v17, "onSuccess");
        else
          objc_msgSend(v17, "onFailed");
      }
      else
      {
        objc_msgSend(v17, "onFailed");
      }
      objc_storeStrong(&v14, 0LL);
      objc_storeStrong(&v15, 0LL);
    }
找到成功的提示，往前一个函数为判断函数。函数内首先分配内存，初始化虚拟机，最后将输入去头尾后代入虚拟机，虚拟机将读入指令中存储的数据，加二，与输入比较，如失败，跳到最后，成功则执行下条指令，逻辑同上。故将指令中字符提取如下：fcjjmWmsEmrRfcDjye。
    __int64 __fastcall sub_100001C60(__int64 a1)
    {
      __int64 result; // rax
      result = rot2(*(_DWORD *)a1, 2);
      *(_DWORD *)a1 = (char)result;
      ++*(_QWORD *)(a1 + 24);
      return result;
    }
根据伪代码重写一个`rot2`函数即可
    import string
    a = 'fcjjmWmsEmrRfcDjye'
    def rot2(s):
        res = ''
        for i in s:
            if i in string.lowercase:
                res += chr((ord(i)+2-97)%26+97)
            else:
                res += chr((ord(i)+2-65)%26+65)
        return res
    print rot2(a)
加入DDCTF{}后得到FLAG:
    DDCTF{helloYouGotTheFlag}
### obfuscating macros
    __int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      char v3; // al
      char v4; // al
      bool v5; // al
      __int64 v6; // rax
      char v8; // [rsp+0h] [rbp-40h]
      unsigned __int64 v9; // [rsp+28h] [rbp-18h]
      v9 = __readfsqword(0x28u);
      std::__cxx11::basic_string,std::allocator>::basic_string(&v8, a2, a3);
      std::operator>>,std::allocator>(&std::cin, &v8);
      sub_4069D6((__int64)&v8);
      v5 = 0;
      if ( v3 )
      {
        sub_4013E6((__int64)&v8, 10LL);
        if ( v4 )
          v5 = 1;
      }
      if ( v5 )
        v6 = std::operator>(&std::cout, "WELL DONE!");
      else
        v6 = std::operator>(&std::cout, "wrong answer");
      std::ostream::operator>);
      std::__cxx11::basic_string,std::allocator>::~basic_string(&v8);
      return 0LL;
    }
有两个检查，第一个检查与第二题RE类似，就是检查是否0-9A-F，第二个检查使用了类似OLLVM的混淆，使用硬件断点跟踪输入的读取，发现在0x405FA3附近进行了读取，并且与某个值进行相减，如果相减不为0程序退出，相减为0后续还会读取输入
    if ( v47 )
          {
            v4 = (_BYTE *)(*(_QWORD *)vm.p_input)++;// 读取输入0x12
            **(_BYTE **)vm.field_10 -= *v4;         // 0x79 - 0x12
            if ( !v12 )
              v12 = 162LL;
            if ( !v47 )
在0x405FC6下断点，例如输入1234567890,第一轮比较0x79和0x12，所以将输入改为7934567890继续看第二轮的比较（或者改寄存器），重复以上步骤得到flag
    .text:0000000000405FC4                 mov     eax, edx
    .text:0000000000405FC6                 sub     ecx, eax
    .text:0000000000405FC8                 mov     eax, ecx
flag: DDCTF{79406C61E5EEF319CECEE2ED8498}