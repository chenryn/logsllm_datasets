Export from SPTool
×
ExportList
Signal:mtlb [vector]
Signal:chirp [vector]
Signal: train [vector]
Export filters as TFobjects
Signal:sigl [vector]
Signal:
sig2 [vector]
Filter:
LSlp [design]
Filter:
pzlp [imported]
Export todisk..
Filter:FIRbp [design]
Export to workspace
Filter:filt1 [design]
Spectrum: mtlbse [auto]
Spectrum:chirpse [auto
Spectrum:trainse[auto
Cancel
Help
K
Show:
AIl
图29-14信号导出界面
如果要选中多个数据，可以按住Ctr键点选。选择完毕后，点击
Exporttoworkspace按钮即可。这样，sig2就被导出至Workspace以
供后续使用了。
---
## Page 1093
CTF特训营：技术详解、解题方法与
第30章经典赛题讲解
1093/1144
第30章经典赛题讲解
loT领域涉及的范围极广，并非一本书所能涵盖得了的，本书希
望达到的目标更多是引导以及提供思路，并没有完全涵盖所有理论以
及基础知识。本篇中提到的工具也是比赛解题中行之有效的工具，各
个知识点都是笔者本人的经验技巧。本章作为本篇的最后一章，收集
了近儿年比较经典的loT类赛题为大家进行集中讲解，同时扩展解题
的思路，希望对于读者在今后的学习和比赛能够有所启发。
---
## Page 1094
CTF特训营：技术详解、解题方法与
30.1PCTF2016:Confused ARM1094/1144
30.1PCTF2016:ConfusedARM
本题的大部分关键点在第27章中都已经有过介绍，我们直接继
续分析即可，最后的main函数，如图30-1所示
其中，sub_80006A4、sub_80007F0、sub_8000A50这些函数看
上去像是初始化函数，8000A50的参数115200其实是指定了波特率
因此可以大胆猜测这几个函数与我们关心的题自内容并不十分相关
所以我们看重要分析的是后面的几个函数。由于以0x20000000开始
的地址在RAM中，仅通过静态调试并不容易分析出内容，所以这里
采用第27章中的MDK来动态调试以辅助分析。我们在main函数的位
置0x08001084处下断点，当到达main函数时，在Memory窗口中输入
0x20000000，即可查看内存中的数据。其中，有一处数据引起了我
们的注意，在sub_800560中引1用了0x2000002C的数据，该处的输人
如图30-2所示。
可以看到，0x2000002C处开始的数据为637C777B..这个像什
么？没错，这就是AES的SBoX，所以我们可以大胆推测，这里使用
了AES算法。而main函数中的Key是0x2000000C处的16字节数据，即
---
## Page 1095
CTF特训营：技术详解、解题方法与
30.1PCTF2016:ConfusedARM1095/1144
为AESKey，我们从内存中很容易就可以看到，Key为
0x430x420x410x400x470x460x450x440x4b0x4a0x490x480x4f0x4e
0x4d0x4c。那么加密的内容呢？通过观察我们很容易发现
sub_8000560和sub_800055c都是对key进行的操作，而sub_8000248
使用了key对flag进行操作，那么0x200031C中的内容即为解密的flag
0x2000001C中的内容就肯定是需要解密的密文了。但实际上，在前
面的图片中看到的flag提交了是不对的，同时根据题自提示，程序中
有一处算法使用错误。根据实际情况分析，可以判断出sub_8000560
和sub_800055c均为Key扩展相关的函数，修改注释如图30-3所示。
---
## Page 1096
CTF特训营：技术详解、解题方法与
30.1PCTF2016:ConfusedARM
1096/1144
int_cdecl_noreturn nain()
SystenInit(）;
sub_88006A4();
sub_80007F8();
sub_8000A50(115200);
Sub_8000AA8(&USART1,64);
sub_8000560(（int)dword_2000000c,（int)&unk_2000026C);
while（1）
if（unk_20000000）
printf(
"Keyis:0xg08x,0x%08x,0x208x,0x08x\r\n,
duord_2000000c[0],
duord_2000000c[1],
duord_2000000c[2],
duord_2000000c[3]);
unk_20000000-0;
if（1Sub_80007E2（&GPI0A,2）)
sub_800055c（（int)duord_200000oc,（int)&unk_2000026c);
sub_8e0e248(（int)&unk_200eee1c,（int)duord_2000031c,（int)dword_200000ec);
Sub_8000AA8（&USART1,64);
printf(
"F14g 1s：PCTF{%08x208x208x208x}\r\n,
duord_2000031c[0],
duord_2000031c[1],
duord_2000031c[2],
duord_2000031c[3]);
图30-1整理后的main函数
Memory1
Address:0x20000000
9012000000000000000000000000:00000002X0
0x20000012:
44
4B
4A
4948
4F4E4D
4C
75
0C7F
89
27
C9BA
CA
0x20000024:
F1
70
DE
EA
F6
60
E4
1F
63
7C
77
7B
F2
6B
6F
C5
30
01
0x20000036:
67
2B
FED7
AB
76
CA
82
C9
7D
FA
59
47
FO AD
D4
A2
AF
0x20000048:
06
A4
72
CO
B7
FD93
26
36
3F
E7
CC
34
A5
E5
F1
71
D8
0x2000005A:
31
1504C7
23C3
189605
9A071280E2EB27B2
75
0x2000006C:09
83
2C1A1B
6E5AA0523BD6B329E32F8453D1
0x2000007F:
00_FD.
JUC
R1
5B6ACBBF39474C58CFD0.FF03FR
Call Stack + Locals
Memory1
Cimuslstinn
+1.7rar
---
## Page 1097
CTF特训营：技术详解、解题方法与
30.1 PCTF2016:ConfusedARM
1097/1144
图30-2内存数据
由图30-3可以注意到，在AES_Decrypt处，在key扩展函数独立
的情况下，加解密应该使用exp_key进行，而非十六字节的原始key，
也即AES_Decrypt的第三个参数应该为exp_key才对，看到这里，我
们就找到了算法的使用错误了，那么接下来patch一下，将key的地址
改为exp_key的地址，步骤如下。
依次选择Edit→PatchProgram→ChangeByte，由于IDA没有
ARM汇编器，所以只能编辑Bytes，在这里将R2改为exp_key，如图
30-4所示。
int_cdecl_noreturn nain()
Systenlnit();
sub_80006A4();
sub_80007F0();
Sub_8000A50(115200);
Sub_800DAA8（&USART1,64);
hile（1）
if （unk_20000000)
printf（(Key is ：0x208x,0x208x,0x208x，0x208x\r\n",key[0].key[1].key[2].key[3]）;
unk_20000000-0;
if（sub_80007E2（&GPI0A,2）)
key_deexpan(（int)key,（int)Gexp_key);
AES_Decrypt（(int)&ciphertext,(int)plaintext,(int)key);
printf(*F14g 1s:PCTF(208x208x208x208x)\r\n",plaintext[0],plaintext[1],plainte>
5Ub_8000AA8(&USART1,64);
---
## Page 1098
CTF特训营：技术详解、解题方法与
30.1PCTF2016:Confused ARM
1098/1144
图30-3进一步识别关键函数
PatchBytes
Address
0x80010E0
File offset
OxFFFFFFFF
Originalvalue
yalues
OK
Cancel
Help
图30-4对固件进行patch
同时还要修改R0，原来是0x2000000C+0x10，现在0x2000000C
变成了0x2000026C，那么要相应减去0x00000250，最后的patch结果
如图30-5所示。
Seg000:080010E00B4A
LDR
R2,=exp_key
Seg000:080010E2 0B49
LDR
R1,=exp_key
Seg000:080010E40B48
LDR
Rθ,=key
seg000:080010E6 1030
ADDS
R0,#0x10
Seg000:080010E8 B031
ADDS
R1,#0xB0
Seg000:080010EA FF F7 AD F8
BL
AES_Decrypt
图30-5修改后的固件
由于IDA不支持保存到hex文件，因此我们直接将hex文件用文本
编辑器打开，按图30-6所示的字节修改即可。
---
## Page 1099
CTF特训营：技术详解、解题方法与.
30.1 PCTF2016:Confused ARM
1099/1144
265
:101070002846FFF735FD0028F9D0204670BD000056
266
:101080000038014008B5FFF7BBFCFFF70BFBFFF78B
267
:10109000AFFB4FF4E130FFF7DBFC1C4D402128464D
268
:1010A000FFF702FD1A491B48FFF75AFA194C1A4E6E
269
：1010B0000C3C207850B11749C86800908B684A688A
270
：1010C000096816A0FFF76EFD00202070022130464F
271
：1010D000FFF787FB0028ECD10D490E48FFF73EFAD9
272
：1010E0000B4A0B490B481030B031FFF7ADF8402176
273
:1010F0002846FFF7D9FC0648B030C16800918368E4
274
:10110000426801680FA0FFF74DFDD2E700380140AB
275
：101110006C0200200C000020000801404B65792083
276
：101120006973203A3078253038782C30782530387B
277
：10113000782C3078253038782C3078253038780D78
278
：101140000A000000466C3467203173203A50435443
图30-6用文本编辑器修改lntelhex文件
注意，行末的checksum原来为76，修改为如图30-6所示的结果
后要改为E7，否则加载时会报checksum错误提示。关于lntelhex格式
的checksum计算，大家可以参考图30-7。
---
## Page 1100
CTF特训营：技术详解、解题方法与.
30.1PCTF2016:ConfusedARM
1100/1144
：10010000214601360121470136007EFE09D2190140
：100110002146017EB7C20001FF5F16002148011988
：10012000194E79234623965778239EDA3F01B2CAAT
：100130003F0156702B5E712B722B732146013421C7
00000001FF
Start code
Byte count
Address
Record type
Data
Checksun
图30-7Intelhex格式
checksum为除了startcode和checksum部分的字节数值之和，并
且计算过程中只保留了1字节，即对256取余。最后对0x100求补，即
用0x100减去最后计算出的加和。patch后用MDK重新加载，然后打开
UART#1窗口。加载完成后运行，在UART#1窗口中就能看到正确的
flag了，如图30-8所示。
UART#1
F14g 1s:PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s:PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s :PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s:PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s:PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s:PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s :PCTF(14ff306b13ea82d2e463bb82a82c1a37)
F14g 1s:PCTF(14ff306b13ea82d2
Call Stack Locals
UART1
Memory1
Simulation
t1:0.26817747 sec
---
## Page 1101
CTF特训营：技术详解、解题方法与
30.1 PCTF2016: Confused ARM
1101/1144
图30-8UART窗口获得答案
---
## Page 1102
CTF特训营：技术详解、解题方法与
80.2UCTF2016资格赛：TWI1102/1144
30.2UCTF2016资格赛：TWI
拿到题目首先用file命令进行识别，命令如下：
[root@kali:~]%filetwi
twi:ELF32-bitLSBexecutable,AtmelAVR8-bit,version1(SYSV),staticallylinked
stripped
Atmel单片机的程序比较少见，不过早年在reversing.kr上已经有
类似的题目了。
使用前面介绍的AVRStudio进行调试，同时结合IDA进行分析，
如图30-9所示，sub_62函数在不停操作TWCR和TWSR寄存器，而这