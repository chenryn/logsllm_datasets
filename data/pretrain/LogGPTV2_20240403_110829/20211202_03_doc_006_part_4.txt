Here, we will distinguish two flavors of CA:
➊ Cell 0 is CJDPMIJˆI˜ ¯˘ its ╎ ➋ Cell 0 CJDPMIJˆIQ cells
neighborhood (0's next state ╎ in its neighborhood
is a function of the cell ╎ (0 contributes to state
states in the neighborhood) ╎ changes to be made in
╎ the neighborhood)
╎
[Conway's ˙õWö VT ˚‘Tö] ╎ [Fluid simulation]
Both flavors lead to quite different SQL implementations.
➊ is (almost) straightforward, ➋ is more involved. Let us
discuss both.
Cell Neighborhood
Cell neighborhood is flexibly defined, typically referring
to (a subset of) a cell's adjacent cells:
Types of neighborhoods, for < = 2 (2D grid):
Moore von Neumann
○ cell 0
0's neighborhood
○ ○ ○ extended neighborhood
○
x y cell
^ _ cell state
Table grid
Accessing the Cell Neighborhood — Non-Solution! ##
Excerpt of code in 1⥁ (computes next generation of grid),
access the Moore neighbors < of cell R:
WITH RECURSIVE
ca(x,y,cell) AS (
⋮
SELECT 0.x, 0.y, T(0.cell, õôô(è.cell)) AS cell
FROM ca AS 0, ca AS è -- U two references to ca
⚠
WHERE (0.x - è.x)^2 + (0.y - è.y)^2 <= 2
GROUP BY 0.x, 0.y, 0.cell
⋮
)
Looks like a suitable CA core (%, `aa encode CA rules).
BUT refers to recursive table more than once: ⭍ in SQL.
Interlude: WITH RECURSIVE — Syntactic Restrictions
WITH RECURSIVE syntactically restricts query forms, in
particular the references to the recursive table !:
1. No references to / in 1₀.
2. A single reference to / in 1⥁ only (linear recursion).
3. No reference to / in subqueries outside the FROM clause.
4. No reference to / in INTERSECT or EXCEPT.
5. No reference to / in the null-able side of an outer join.
6. No aggregate functions in 1⥁ (window functions do work).
7. No ORDER BY, OFFSET, or LIMIT in 1⥁.
Enforces distributivity: 1⥁(/ ∪ {\}) = 1⥁(/) ∪ 1⥁({\}),
allowing for incremental evaluation of WITH RECURSIVE.
Accessing the Cell Neighborhood — A Solution! $$
S Window functions admit access to rows in cell vicinity:
x → ≡ cell 0
₀ ₁ ₂
y ₀⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅
↓ ₁⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅
₂⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅ ⋅
˛9ˇ!7!786 "# 0.x 0.y 0.x-0.y 0.x+0.y
8ˇ$%ˇ "# 0.y 0.x 0.x+0.y 0.x-0.y
ˇ8&' "%!&%%6 ( ˛ˇ%)%$76* 96$ ( +8::8&76*
┌╌╌╌╌╌╌╌┐
SELECT ⋯ T(0.cell, õôô(0.cell) OVER (┆‹TUõWö›┆)) ⋯
└╌╌╌╌╌╌╌┘
FROM ca AS c(x,y,cell)
#
Conway's Game of Life
Life8 simulates the evolution of cells 0 (state: either
alive or dead) based on the population count 0 ≤ ‹ ≤ 8 of
0's Moore neighborhood:
1. If 0 is alive and ‹ < 2, 0 dies (underpoulation).
2. If 0 is alive and 2 ≤ ‹ ≤ 3, 0 lives on.
3. If 0 is alive and 3 < ‹, 0 dies (overpopulation).
4. If 0 is dead and ‹ = 3, 0 comes alive (reproduction).
Note: The next state of 0 is a function of the neighborhood
states. 0 does not alter cell states in its neighborhood.
8 John Horton Conway, column Mathematical Games in Scientific American (October 1970).
#
Life — A Few Notable Cell Patterns
Still ╎ Oscillators ╎ Spaceships
╎ (period: 2) ╎
╎ ╎
╎ ╎ ⋅ ⋅
╎ ╎ ⋅ ⋅
⋅ ⋅ ╎ ╎
⋅ ⋅ ╎ ╎
⋅ ⋅ ╎ ⋅ ╎
╎ ⋅ ╎
⋅ ╎ ╎ ⋅ ⋅ ⋅
⋅ ╎ ╎ ⋅ ⋅ ⋅ ⋅
⋅ ⋅ ╎ ⋅ ⋅ ╎ ⋅ ⋅ ⋅
╎ ⋅ ⋅ ⋅ ╎ ⋅
⋅ ⋅ ╎ ⋅ ⋅ ⋅ ╎
⋅ ╎ ⋅ ⋅ ╎
⋅ ⋅ ╎ ╎
#
Life — SQL Encoding of Rules (+: below, ,-- ≡ SUM) ✎
WITH RECURSIVE
life(gen,x,y,cell) AS (
⋮
SELECT l.gen + 1 AS gen, l.x, l.y,
CASE (l.cell, ( SUM(l.cell) OVER (‹,VU‘-Vè\õ’ ⋯›)
+ SUM(l.cell) OVER (‹.öU\‘0õ’ ⋮›)
+ SUM(l.cell) OVER (‹ú‘õôVèõ’ ⋱›)
+ SUM(l.cell) OVER (‹ú‘õôVèõ’ ⋰›)
- 4 * l.cell)
)
-- (0, ‹): 0 ≡ state of cell, ‹ ≡ # of live neighbors
WHEN (1, 2) THEN 1 -- ⎫
WHEN (1, 3) THEN 1 -- ⎬ alive
WHEN (0, 3) THEN 1 -- ⎭
ELSE 0 -- dead
END AS cell
FROM life AS l
⋮
)
9 ┆ CA with Cells That Influence Their Neighborhood
If cells assume an active role in influencing the next
generation, this suggests a different SQL implementation.
➊ “influenced by” ╎ ➋ “influences”
╎
╎ ⋅ ⋅ ⋅ ⋅ ⋅
⭨⭣⭩ ╎ ⭦ ⭡ ⭧ ⭦ ⭡ ⭧
⭢ ⭠ ╎ ⋅ ⭠ ⭢ ⭠ ⭢ ⋅
⭧⭡⭦ ╎ ⭩ ⭣ ⭨ ⭩ ⭣ ⭨
╎ ⋅ ⋅ ⋅ ⋅ ⋅
In type ➋, cells ⚪ actively influence their neighbors.
Affected cells ⚫ need to accumulate these individual
influences (up to 8 in this grid — only two shown here).
#
Simulate the Flow of Liquid (in a 1D Landscape)
﹤₀ kinetic(x) ﹥₀
▄
████ ███
██████ water(x) ███
█████████ ███
█████████ ███
┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬┬ x ground(x)
0 ≥
──┬──┬──┬──
≡ ground █ ≡ liquid x-1 x x+1
Goal: Model two forms of energy in this system:
potential energy at x (9ëG(x) ≡ ground(x) + water(x))
left/right kinetic energy at x (:CJetic(x))
#
Liquid Flow: Cellular Automaton9
Δwater ← (0,0,…,0) -- changes to water and energy levels
Δkin ← (0,0,…,0) -- in next generation
DëL x in 1…≥-1:
⎢ -- liquid flow to the left
⎢ CD pot(x)-kin(x) ＞ pot(x-1)+kin(x-1):
⎢ ⎢ flow ← ¼ × ΩCJ(water(x), pot(x)-kin(x)-(pot(x-1)+kin(x-1)))
⎢ ⎢ Δwater(x-1) ← Δwater(x-1)+flow -- ⎫ aggregate the
⎢ ⎢ Δwater(x) ← Δwater(x) -flow -- ⎬ influences on
⎢ ⎣ Δkin(x-1) ← Δkin(x-1) - ½×kin(x-1) - flow -- ⎭ cells @ x / x-1
⎢ -- liquid flow to the right
⎢ CD pot(x)+kin(x) ＞ pot(x+1)-kin(x+1):
⎢ ┆ -- "mirror" the above code
⎣
water ← water + Δwater -- ⎱ apply the aggregated influences
kin ← kin + Δkin -- ⎰ to all cells (ground is constant)
9 CA rules adapted from those posted by user YankeeMinstrel on the Cellular Automata e. ¼, ½ are
(arbitrary) dampening/friction factors. See https://www.reddit.com/r/cellular_automata/.
CA with Neighborhood Influencing Rules: SQL Template
WITH RECURSIVE
cells(iter,x,y,state) AS (
⋮
SELECT c0.iter + 1 AS iter, c0.x, c0.y,
c0.state ⨁ COALESCE(agg.Δstate, ‹-›) AS state
FROM cells AS c0 LEFT OUTER JOIN
-- find and aggregate influences on all cells @ x,y
(████████ -- ⎱ ██ encodes rules
████████) AS agg(x,y,Δstate) -- ⎰ of the CA
-- extract the influences on cell c0 (□ if none)
ON (c0.x, c0.y) = (agg.x, agg.y)
WHERE c0.iter < ‹‘\öUõ\‘Vèµ›
)
Design: no agg(?,@,_) if cell @ ?,@ doesn't change state.
Assume that ‹-› is neutral element for ⨁: µ ⨁ ‹-› = µ.
CA: From Individual to Aggregated Influences (SQL Template)
⋮
SELECT c0.iter + 1 AS iter, c0.x, c0.y,
c0.state ⨁ COALESCE(agg.Δstate, ‹-›) AS state
FROM cells AS c0 LEFT OUTER JOIN
-- find and aggregate influences on all cells @ x,y
(SELECT infs.x, infs.y, ‹õôô›(infs.Δstate) AS Δstate
FROM (████████
████████) AS infs(x,y,Δstate)
GROUP BY infs.x, infs.y
) AS agg(x,y,Δstate)
-- extract the influences on cell c0 (□ if none)
ON (c0.x, c0.y) = (agg.x, agg.y)
⋮
(?,@,Δstate) ∈ infs: individual influence on cell @ ?,@.
Typically, we will have ‹õôô› = (∅, ‹-›, ⨁).
CA: Individual Neighborhood Influences (SQL Template)
⋮
-- find and aggregate influences on all cells @ x,y
(SELECT infs.x, infs.y, ‹õôô›(infs.Δstate) AS Δstate
FROM (SELECT ████████ -- ⎱ all influences that c1 has on
████████ -- ⎰ its neighborhood (≡ CA rules)
FROM cells AS c1) AS inf(influence),
LATERAL unnest(inf.influence) AS infs(x,y,Δstate)
GROUP BY infs.x, infs.y
) AS agg(x,y,Δstate)
⋮
For each cell c1, ███ computes an array of influence
influence with elements (?,@,Δstate): c1 changes the
state of cell @ ?,@ by Δstate.
For each c1, influence may have 0, 1, or more elements.
CA: Encoding Neighborhood Influencing Rules (SQL Template)
⋮
(SELECT (CASE WHEN ‹‹₁› THEN -- if ‹‹₁› holds, then c1 has ...
array[ROW(c1.x-1, c1.y, ▒▒▒), -- leftward influence
ROW(c1.x, c1.y+1, ▓▓▓)] -- downward influence
END
|| CASE WHEN ‹‹₂› THEN
array[ROW(c1.x, c1.y, ███)] -- influence on c1 itself
END -- 3 3 3
⋮ -- x y Δstate
) AS influence
FROM cells AS c1
WINDOW horizontal AS ⋯ -- ⎱ provide frames to access neighbors
WINDOW vertical AS ⋯ -- ⎰ of c1 in ‹‹ᵢ›, ▒▒▒, ▓▓▓, and ███
) AS inf(influence)
⋮
Admits straightforward transcription of rules into SQL.
CA: Summary of Influence Data Flow (Example)
Assume Δstate :: int, ‹õôô› ≡ SUM (i.e., ‹-› ≡ 0, ⨁ ≡ +):
➊ Table CJD ➋ Table CJDQ ➌ Table CDDQ
┌───────────────────┐ ┌─┬─┬──────┐ ┌─┬─┬──────┐
│ influence │ │x│y│Δstate| │x│y│Δstate|
├───────────────────┤ ├─┼─┼──────┤ ├╌┼╌┼──────┤
│{(1,3,+4),(1,4,-2)}│ │1│3│ +4 │ │1│3│ +2 │
│{(1,3,-3),(1,3,+1)}│ │1│3│ -3 │ │1│4│ 0 │
│{(2,2,-5)} │ │1│3│ +1 │ │2│2│ -5 │
│{(1,4,+2)} │ │┈│┈│┈┈┈┈┈┈│ └─┴─┴──────┘
└───────────────────┘ │1│4│ -2 │
│1│4│ +2 │
=─────────?─────────@ │┈│┈│┈┈┈┈┈┈│ =────?─────@
neighborhood influence, │2│2│ -5 │ apply to current cell