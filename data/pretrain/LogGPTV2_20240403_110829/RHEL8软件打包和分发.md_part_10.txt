    RPM 宏是在输出目录结构中标题为 `macros`{.literal} 的文件。
    :::
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#rpm-distribution-macros_more-on-macros}RPM 分发宏 {.title}
:::
不同的发行版根据所打包软件的语言实施或发行版的具体指南，提供不同的推荐
RPM 宏集。
推荐的 RPM 宏集合通常作为 RPM 软件包提供，可与 `yum`{.literal}
软件包管理器一起安装。
安装后，可以在 `/usr/lib/rpm/macros.d/`{.literal} 目录中找到宏文件。
要显示原始 RPM 宏定义，请运行：
``` literallayout
rpm --showrc
```
以上输出显示原始 RPM 宏定义。
要确定宏的作用以及在打包 RPM 时很有用，请使用用作参数的宏名称运行
`rpm --eval`{.literal} 命令：
``` literallayout
rpm --eval %{_MACRO}
```
如需更多信息，请参阅 `rpm`{.literal} man page。
::: section
::: titlepage
### []{#advanced-topics.html#using-the-custom-macros_more-on-macros}创建自定义宏 {.title}
:::
您可以使用自定义宏覆盖 `~/.rpmmacros`{.literal}
文件中的分布宏。您所做的任何更改都会影响您计算机上的每一构建。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
不建议在 `~/.rpmmacros`{.literal}
文件中定义任何新的宏。此类宏不会出现在其他计算机上，用户可能想要尝试重新构建您的软件包。
:::
要覆盖宏，请运行 ：
``` literallayout
%_topdir /opt/some/working/directory/rpmbuild
```
您可以从上例中创建 目录，包括所有通过 `rpmdev-setuptree`{.literal}
工具的子目录。这个宏的值默认为 `~/rpmbuild`{.literal}。
``` literallayout
%_smp_mflags -l3
```
上面的宏通常用于传递给 Makefile，如
`make %{?_smp_mflags}`{.literal}，并在构建阶段设置多个并发进程。默认情况下，它被设置为
`-jX`{.literal}，其中 `X`{.literal}
是内核数。如果更改了内核数量，您可以加快或减慢软件包构建的速度。
:::
:::
:::
::: section
::: titlepage
# []{#advanced-topics.html#epoch-scriplets-and-triggers_advanced-topics}epoch、Scriptlet 和 Triggers {.title}
:::
本节论述了 `Epoch`{.literal}、`Scriptlets`{.literal} 和
`Triggers`{.literal}，它们代表 RMP SPEC 文件的高级指令。
所有这些指令不仅影响 SPEC 文件，还影响安装生成的 RPM 的最终计算机。
::: section
::: titlepage
## []{#advanced-topics.html#packaging-epoch_epoch-scriplets-and-triggers}Epoch 指令 {.title}
:::
`Epoch`{.literal} 指令允许根据版本号定义权重的依赖关系。
如果 RPM SPEC 文件中没有列出此指令，则根本不设置 `Epoch`{.literal}
指令。这与不设置 `Epoch`{.literal} 导致 `Epoch`{.literal} 为 0
的共同理念不同。但是，YUM 实用程序出于分离目的将未设置 `Epoch`{.literal}
视为与 0 的 `Epoch`{.literal} 相同。
但是，SPEC 文件中列出 `Epoch`{.literal}
通常会被省略，因为在大多数情况下，引入 `Epoch`{.literal}
值会偏差软件包版本时预期的 RPM 行为。
::: example
[]{#advanced-topics.html#idm139867800403776}
**例 4.2. 使用 epoch**
::: example-contents
如果您使用 `Epoch: 1`{.literal} 和 `Version: 1.0`{.literal} 安装
`foobar`{.literal} 软件包，以及带有 `Version: 2.0`{.literal} 但没有
`Epoch`{.literal} 指令的其他软件包
`foobar`{.literal}，新版本永远不会被视为更新。原因在于 `Epoch`{.literal}
版本优先于传统的 `Name-Version-Release`{.literal} 标记，它表示 RPM
软件包的版本控制。
:::
:::
因此，使用 `Epoch`{.literal} 非常少见。但是，`Epoch`{.literal}
通常用来解决升级排序问题。这个问题可能显示为上游软件版本号或版本变化的副作用，它们包含字母字符，且无法始终根据编码进行可靠比较。
:::
::: section
::: titlepage
## []{#advanced-topics.html#scriptlets-new_epoch-scriplets-and-triggers}scriptlets {.title}
:::
[**scriptlet**]{.strong} 是一系列在安装或删除软件包之前或之后执行的 RPM
指令。
仅将 [**Scriptlet 用于无法在构建时或启动脚本中执行的任务**]{.strong}。
::: section
::: titlepage
### []{#advanced-topics.html#scriptlets-directives_scriptlets-new}scriptlets 指令 {.title}
:::
存在一组常用的 [**Scriptlet**]{.strong} 指令。它们与 SPEC
文件部分标头类似，如 `%build`{.literal} 或
`%install`{.literal}。它们由多行代码段定义，通常编写为标准 POSIX shell
脚本。但是，它们也可以使用其他编程语言编写，目标计算机分发的 RPM
接受这些语言。RPM 文档包括可用语言的详尽列表。
下表包含按照执行顺序列出的 [**Scriptlet**]{.strong}
指令。请注意，包含脚本的软件包会在 `%pre`{.literal} 和 `%post`{.literal}
指令间安装，它会在 `%preun`{.literal} 和 `%postun`{.literal}
指令间卸载。
::: table
[]{#advanced-topics.html#idm139867800320672}
**表 4.2. Scriptlet 指令**
::: table-contents
  指令                     定义
  ------------------------ ---------------------------------------------
  `%pretrans`{.literal}    仅在安装或删除任何软件包之前执行的脚本let。
  `%pre`{.literal}         在目标系统上安装包之前执行的脚本let。
  `%post`{.literal}        仅在目标系统上安装包之后执行的 Scriptlet。
  `%preun`{.literal}       从目标系统卸载软件包之前执行的脚本let。
  `%postun`{.literal}      从目标系统卸载软件包之后执行的 Scriptlet。
  `%posttrans`{.literal}   在事务结束时执行的脚本let。
:::
:::
:::
::: section
::: titlepage
### []{#advanced-topics.html#turning-off-a-scriptlet-execution_scriptlets-new}关闭脚本小程序执行 {.title}
:::
要关闭任何脚本小程序的执行，请使用 `rpm`{.literal} 命令和
`--no_scriptlet_name_`{.literal} 选项。
::: itemizedlist
**流程**
-   例如，要关闭 `%pretrans`{.literal} 脚本小程序的执行，请运行：
    ``` literallayout
    # rpm --nopretrans
    ```
    您还可以使用 `-- noscripts`{.literal} 选项，它等同于以下所有选项：
    ::: itemizedlist
    -   `--nopre`{.literal}
    -   `--nopost`{.literal}
    -   `--nopreun`{.literal}
    -   `--nopostun`{.literal}
    -   `--nopretrans`{.literal}
    -   `--noposttrans`{.literal}
    :::
:::
::: itemizedlist
**其它资源**
-   详情请查看 `rpm(8)`{.literal} man page。
:::
:::
::: section
::: titlepage
### []{#advanced-topics.html#scriptlets-macros_scriptlets-new}脚本小程序宏 {.title}
:::
[**Scriptlets**]{.strong} 指令也可用于 RPM 宏。
以下示例演示了使用 systemd scriptlet 宏，这可以确保 systemd
收到有关新单元文件的通知。
``` literallayout
$ rpm --showrc | grep systemd
-14: transaction_systemd_inhibit %{plugindir}/systemd_inhibit.so
-14: _journalcatalogdir /usr/lib/systemd/catalog
-14: _presetdir /usr/lib/systemd/system-preset
-14: _unitdir   /usr/lib/systemd/system
-14: _userunitdir       /usr/lib/systemd/user
/usr/lib/systemd/systemd-binfmt %{?} >/dev/null 2>&1 || : /usr/lib/systemd/systemd-sysctl %{?} >/dev/null 2>&1 || :
-14: systemd_post
-14: systemd_postun
-14: systemd_postun_with_restart
-14: systemd_preun
-14: systemd_requires
Requires(post): systemd
Requires(preun): systemd
Requires(postun): systemd
-14: systemd_user_post  %systemd_post --user --global %{?} -14: systemd_user_postun %{nil} -14: systemd_user_postun_with_restart %{nil} -14: systemd_user_preun systemd-sysusers %{?} >/dev/null 2>&1 || :
echo %{?} | systemd-sysusers - >/dev/null 2>&1 || : systemd-tmpfiles --create %{?} >/dev/null 2>&1 || :
$ rpm --eval %{systemd_post}
if [ $1 -eq 1 ] ; then
        # Initial installation
        systemctl preset  >/dev/null 2>&1 || :
fi
$ rpm --eval %{systemd_postun}
systemctl daemon-reload >/dev/null 2>&1 || :
$ rpm --eval %{systemd_preun}
if [ $1 -eq 0 ] ; then
        # Package removal, not upgrade
        systemctl --no-reload disable  > /dev/null 2>&1 || :
        systemctl stop  > /dev/null 2>&1 || :
fi
```
:::
:::
::: section
::: titlepage
## []{#advanced-topics.html#triggers_epoch-scriplets-and-triggers}Triggers 指令 {.title}
:::
[**触发器是**]{.strong} RPM
指令，提供在软件包安装和卸载过程中进行交互的方法。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
[**触发器可能会在意外时执行**]{.strong}，例如在更新包含的软件包时。[**触发器很难调试**]{.strong}，因此需要以强大的方式实施，以便在意外执行时不会中断任何内容。因此，红帽建议最大程度减少
[**Triggers 的使用**]{.strong}。
:::
[**下面列出了每个现有触发器的执行顺序和详情**]{.strong} ：
``` literallayout
all-%pretrans
…​
any-%triggerprein (%triggerprein from other packages set off by new install)
new-%triggerprein
new-%pre      for new version of package being installed
…​           (all new files are installed)
new-%post     for new version of package being installed
any-%triggerin (%triggerin from other packages set off by new install)
new-%triggerin
old-%triggerun
any-%triggerun (%triggerun from other packages set off by old uninstall)
old-%preun    for old version of package being removed
…​           (all old files are removed)
old-%postun   for old version of package being removed
old-%triggerpostun
any-%triggerpostun (%triggerpostun from other packages set off by old un
            install)
…​
all-%posttrans
```
以上项目可在 `/usr/share/doc/rpm-4.*/triggers`{.literal} 文件中找到。
:::
::: section
::: titlepage
## []{#advanced-topics.html#using-non-shell-scripts-in-a-spec-file_epoch-scriplets-and-triggers}在 SPEC 文件中使用非 shell 脚本 {.title}
:::
SPEC 文件中的 `-p`{.literal} scriptlet
选项允许用户调用特定的解释程序而不是默认的 shell
脚本解释器(`-p /bin/sh`{.literal})。
以下流程描述了如何创建脚本，该脚本会在安装 `pello.py`{.literal}
程序后打印信息：
::: orderedlist
**流程**
1.  打开 `pello.spec`{.literal} 文件。
2.  找到以下行：
    ``` literallayout
    install -m 0644 %{name}.py* %{buildroot}/usr/lib/%{name}/
    ```
3.  在上面的一行中插入：
    ``` literallayout
    %post -p /usr/bin/python3
    print("This is {} code".format("python"))
    ```
4.  按照 ["构建
    RPM"一节](#packaging-software_packaging-and-distributing-software.html#building-rpms_packaging-software "构建 RPM"){.xref}
    所述构建您的软件包。
5.  安装软件包：
    ``` literallayout
    # yum install /home//rpmbuild/RPMS/noarch/pello-0.1.2-1.el8.noarch.rpm
    ```
6.  安装后检查输出信息：
    ``` literallayout
    Installing       : pello-0.1.2-1.el8.noarch                              1/1
    Running scriptlet: pello-0.1.2-1.el8.noarch                              1/1
    This is python code