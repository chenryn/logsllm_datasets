We view the pairs
(cid:81)1, N
for each k,
i=0 (Ci, yi)Pι,i,k
i=0
out-of-many product. Each such correction term alone would
require O(N log N ) time for the prover to compute (see the
treatment of Theorem III.12).
Yet the messages of (Ci, D)N−1
are nonzero only at 2
indices i (namely, l0 and l1), so that, for each k, a “messages-
only” version of the above correction term can be computed
in O(N ) time (the messages of the inner expression can be
accumulated in constant time for each value (ι, j) of the outer
index). The total runtime of the prover is thus O(N log N ).
Our approach is to subtract these messages alone; the resulting
ciphertext is still an encryption of 0 under D (just with more
complicated randomness), and so passes veriﬁcation all the
same.
E. The opposite parity requirement
We comment further on the requirement that l0 (cid:54)≡ l1 mod 2
(whose necessity is explained by the discussion above).
1) Technique: Cryptographically, we must ensure that two
executions of the many-out-of-many procedure correspond
to secrets l0 and l1 featuring opposite parities. We recall
the two lists of polynomials F0,0(X), . . . , F0,m−1(X) and
F1,0(X), . . . , F1,m−1(X), corresponding respectively to the
two witnesses l0 and l1. Our technique is to require that
the prover commit to the constant- and ﬁrst-order parts (i.e.,
respectively, in separate commitments E and F ) of the poly-
nomials F0,0(X)·F1,0(X) and (X−F0,0(X))·(X−F1,0(X)).
These products are both a priori quadratic in X, with leading
coefﬁcients given respectively by b0,0 · b1,0 and (1 − b0,0) ·
(1 − b1,0) (where b0,0 and b1,0 are the least-signiﬁcant bits of
l0 and l1).
The veriﬁer’s check
F xE ?= Com ((f0,0 · f1,0, (x − f0,0)(x − f1,0))) ,
then, enforces exactly that both polynomials above are in fact
linear, and hence that their leading coefﬁcients are zero. This
in turn exactly encodes the logical fact that both b0,0∧b1,0 = 0
and ¬b0,0 ∧ ¬b1,0 = 0, or in other words that b0,0 ⊕ b1,0 = 1
(and hence l0 (cid:54)≡ l1 mod 2).
2) Privacy implications: The requirement
that l0 (cid:54)≡ l1
mod 2 decreases privacy, but only minimally so. Indeed, it
decreases the cardinality of the set of possible pairs (l0, l1) ∈
{0, . . . , N − 1}2 from N · (N − 1) to N 2
2 ; put differently,
it restricts the set of possible sender–receiver pairs to those
represented by the edges of the complete bipartite directed
graph on {0, . . . , N −1}, where the coloring is given by parity
(i.e., as opposed to the complete directed graph).
This restricted cardinally still grows quadratically in N, and
the deﬁcit can essentially be remedied simply by picking larger
anonymity sets.
F. Security deﬁnitions
We present security deﬁnitions for Anonymous Zether,
adapting those of Quisquis [5, §4], as well as the original
treatment of [6, §C]. We refer also to Ben-Sasson, Chiesa,
Garman, Green, Miers, Tromer and Virza [3]. Unlike [6, §C],
we treat a simpliﬁed version of Anonymous Zether in which
only transfers—and no funds or burns—exist (and in which
the contract is initialized with its full capacity). This version
is simpler to analyze, and evokes the approach of Quisquis [5,
§4.3]. For simplicity, we also ignore the existence of epochs
in our analysis, and assume that each transaction takes effect
immediately.
We now have the constituent algorithms:
y = gsk).
We ﬁrst recall the auxiliary algorithms:
• (y, sk) ← Gen(1λ) returns a random keypair (satisfying
• b ← Read(acc, sk) decrypts acc[y], where y := gsk,
and returns its balance b (obtained by “brute-forcing” the
exponent, assumed to be in the range {0, . . . , MAX}).
G(1λ) and generates commitment scheme params.
• σ ← Setup(cid:0)1λ(cid:1) runs a group-generation algorithm
i=0 , D, π(cid:1) ← Trans(acc, sk, y, R, b∗)
• tx := (cid:0)(Ci, yi)N−1
i=0 , D, π(cid:1) is invalid with respect
acc. If tx = (cid:0)(Ci, yi)N−1
generates a transfer transaction, given an anonymity set
R = (yi)N−1
i=0 containing both y := gsk and y (at indices
of opposite parity), as well as the contract’s current state.
• acc ← Verify(acc, tx) veriﬁes the transaction tx against
to acc, Verify sets acc = ⊥; otherwise, it returns a new
state acc obtained by updating acc[yi] ·= (C−1
, D−1)
for each i ∈ {0, . . . , N − 1}.
i
We denote by Π = (Setup, Trans, Verify) the payment
system deﬁned by these algorithms. For each such Π, we
deﬁne in addition a stateful smart contract oracle OSC, which
maintains a global state acc : G → G2, and also accepts
transactions (upon each of which it calls Verify). OSC’s state,
as well as each transaction sent
to it, are visible to all
adversaries deﬁned below.
We introduce a generic experiment setup, upon which our
further deﬁnitions will build:
Deﬁnition V.1. The generic cryptocurrency experiment
CryptA,Π(λ) is deﬁned as:
1) Parameters σ ← Setup(cid:0)1λ(cid:1) are generated and given to
A.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1810
i=0
2) A outputs a list
{0, . . . , MAX} and (cid:80)N−1
for which each bi ∈
(bi)N−1
i=0 bi = MAX. For each i ∈
{0, . . . , N − 1}, a keypair (yi, ski) ← Gen(1λ) is gener-
ated, and acc[yi] := Encyi(bi) is stored. OSC is initialized
using the table acc, and S = (yi)N−1
3) A is given access to an oracle Transact(·,·,·,·). For each
particular call Transact(i, y, R, b∗) for which yi and y re-
side in R (and occupy indices of opposite parity), a trans-
action tx ← Trans(acc, ski, y, R, b∗) is generated, and is
sent to OSC (which executes acc ← Verify(acc, tx)).
4) A is given access to an oracle Insert(·), where Insert(tx)
sends tx directly to OSC.
is given to A.
i=0
We deﬁne our security properties by adding steps to the
above setup.
The
V.2.
overdraft-safety
We ﬁrst consider “overdraft safety”, called “theft preven-
tion” in Quisquis [5]. The adversary, to win, must produce
a valid transaction which increases the total balance of a
set of accounts she controls (or, alternatively, which siphons
value from an honest account). Unlike Quisquis, we explicitly
allow adversarially generated keys; in this light, we require
the adversary to reveal its accounts’ secret keys (mirroring the
revelation of coins in [3, Def. C.3]).
Deﬁnition
experiment
OverdraftA,Π(λ) is deﬁned by adding the following step to
CryptA,Π(λ):
5) A is given access to an oracle Corrupt(·), where
Corrupt(i) returns ski. (Denote by C ⊂ S the set of
corrupted public keys at any particular time.)
6) A outputs a transaction tx∗, as well as a list of keypairs
(y∗
(i) There exists some i for which yi ∈ S\C and b ←
∗
i ). Consider the following conditions:
i , sk
Read(acc, ski) decreases as a result of tx∗.
of tx∗.
∗
i ) increases as a result
i (cid:54)∈S\C Read(acc, sk
y∗
The result of the experiment is deﬁned to be 1 if (tx∗ is
valid and) either of these conditions hold. The result is
also 1 if any of the Read calls fail to terminate (i.e., with
a result b ∈ {0, . . . , MAX}). Otherwise, the result is 0.
We say that Π is overdraft-safe if, for each PPT adver-
sary A,
there exists a negligible function negl for which
Pr[OverdraftA,Π(λ) = 1] ≤ negl(λ).
(ii) The sum(cid:80)
call
We now consider privacy, which we
ledger-
indistinguishability (following [3, Def. C.1]). Importantly, we
must heed the insecurity of multi-recipient El Gamal under
insider attacks, discussed for example in Bellare, Boldyreva
and Staddon [21, §4]. Our solution is exactly that of [21, Def.
4.1]; in other words, we require that the adversary reveal the
secret keys of all adversarially chosen accounts. In particular,
this measure prevents the adversary from using a public keys
whose secret key it does not know (as in the attack of
Subsection V-B).
In practice, this requirement is captured by our registration
procedure, which demands that each account issue a signature
on its own behalf. As [21, §4] mention, we could equally well
perform key extractions (i.e., from these signatures) during our
security proofs; this alternative would be unenlightening and
cumbersome.
Deﬁnition V.3. The ledger-indistinguishability experiment
L-INDA,Π(λ) is deﬁned by adding the following steps to
CryptA,Π(λ):
5) A outputs indices i0, i1, public keys y0, y1, quantities
1, and an anonymity set R∗. A also outputs a secret
b∗
0, b∗
key ski for each yi ∈ R∗\S. Consider the conditions:
(i) For each b ∈ {0, 1}, yb resides in R∗ (and occupies an
(ii) If either y0 (cid:54)∈ S or y1 (cid:54)∈ S, then y0 = y1 (i.e., at the
index whose parity is opposite ib).
same index) and b∗
0 = b∗
1.
is 0. Otherwise,
If either of these conditions fails to hold,
the result
of the experiment
the experimenter
selects a random bit b ← {0, 1} and generates tx ←
b ); ﬁnally, it sends tx to OSC.
Trans(acc, skib , yb, R∗, b∗
6) A outputs a bit b(cid:48). The output of the experiment is deﬁned
to be 1 if and only if b(cid:48) = b.
We say that Π is ledger-indistinguishable if, for each PPT
adversary A, there exists a negligible function negl for which
Pr[L-INDA,Π(λ) = 1] ≤ 1
2 + negl(λ).
The condition 5.(ii), inspired by Quisquis [5, §4.3], also
exactly encodes the consistency condition of [21, Def. 4.1]
(namely that adversary’s message vectors coincide over the
corrupt keys).
G. Protocol and security properties
A sketch of our full interactive Anonymous Zether protocol
is given in Appendix D.
We deﬁne the algorithms Trans and Verify by applying the
Fiat–Shamir heuristic to this interactive protocol. In this way,
we obtain a payment system Π = (Setup, Trans, Verify).
The following results are proven in the full version of this
paper:
Theorem V.4. If the discrete logarithm problem is hard with
respect to G, then Π is overdraft-safe.
Theorem V.5. If the DDH problem is hard with respect to G,
then Π is ledger-indistinguishable.
The proofs of these results rely on techniques presented in
Sections III and IV.
H. Overview of prior work
We now undertake a thorough overview of related work.
1) Zerocash: Ben-Sasson, Chiesa, Garman, Green, Miers,
Tromer and Virza [3]’s Zerocash represents the ﬁrst fully-
featured, cryptographically rigorous payment system; it en-
hances the efﬁciency and security of Miers, et al.’s Zerocoin
[22] in a number of respects. Zerocash is currently deployed
live in the cryptocurrency Zcash. Zerocash features succinct
proofs and constant-time veriﬁcation. Zerocash’s requires a
trusted setup, features a constantly growing UTXO set (cf.
[5]), and is not “deniable” (cf. [5, §1]); ﬁnally, it also does
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1811
not admit an efﬁcient, autonomous wallet. Anonymous Zether
has no trusted setup, requires constant storage for full nodes,
is deniable, and features an efﬁcient wallet with no trust
assumptions.
2) Monero: Monero [4] is a live cryptocurrency which
hides UTXO values; it also obscures each transaction’s input
UTXOs by hiding them within larger rings. Monero is deni-
able. On the other hand, Monero features a constantly growing
UTXO set (cf. [5]), moreover, it also boasts a relatively weak
form of anonymity, and is vulnerable to “intersection attacks”
(see [5, §8.3]). Monero’s transaction overhead (in computation
and communication) grows linearly in the number of UTXOs
consumed, which may grow with the quantity of funds spent.
Finally, Monero does not admit an efﬁcient wallet. Anonymous
Zether requires constant storage;
it also satisﬁes a strong
notion of anonymity (see Deﬁnition V.3 and Theorem V.5).
Anonymous Zether’s overhead is independent of the quantity
of funds spent. Finally, Anonymous Zether features an efﬁcient
wallet.
3) Lelantus: Jivanyan’s Lelantus [23] enriches Zerocoin
so as to feature certain Zerocash-like functionalities—like
arbitrary-denomination coins, hidden coin values, and di-
rect payments—while nonetheless avoiding a trusted setup.
Lelantus’ prover and veriﬁer time grow quasilinearly and
linearly, respectively, in the size of the entire list CMList
of coins, a source of inefﬁciency which explicitly motivated
the development of Zerocash (cf. [3, §1.3]). This list itself,
moreover, grows linearly over time, and must be stored (cf.
[5]). Light clients too must store a linearly increasing list
of coins. A transaction must include one separate proof for
each coin spent; this overhead may grow with the quantity of
funds being spent. Finally, Lelantus’ direct payments require
out-of-band communication over a private channel; anyone
who observes this communication—including, crucially, the
sender—can detect when the recipient spends her coins (cf.
[3, §1.3]).
Anonymous Zether’s payments require no out-of-band com-
munication, and each transaction’s recipient is protected from
its sender. Its storage is constant in time (per full node and per
client); its overhead is also constant in time (for each particular
level of anonymity) and in the quantity being spent.
4) Quisquis: Fauzi, Meiklejohn, Mercer and Orlandi’s
Quisquis [5] is a cryptocurrency design whose full nodes need
retain only constant storage in time (per user). It also lacks a
trusted setup, and is deniable. Quisquis nonetheless requires
that wallets continually scan the blockchain for account state
changes [5, 5.2.3]. Its constant storage property requires that
users voluntarily submit DestroyAcct proofs [5, §5.2.4]; as
the system does not economically incentivize these proofs’
inclusion, it is unclear whether Quisquis’ signature property
would obtain in practice. Finally, Quisquis suffers from a cer-
tain race condition [5, §5.2.6] which could cause even honest
users’ transactions to fail in practice (cf. “front-running”, [6,
§3.1]).
Anonymous Zether’s wallets need not scan the blockchain
for incoming transactions. Its constant storage property is
automatic, and does not require voluntary cooperation on the
part of users. Finally, it natively protects against front-running,
and honest users’ transactions necessarily succeed.
5) Zether: B¨unz, Agrawal, Zamani and Boneh’s Zether [6]
introduces the account-based paradigm to private payment; it
also prioritizes interoperation with Ethereum. Zether solves
many practical challenges associated with account-based se-