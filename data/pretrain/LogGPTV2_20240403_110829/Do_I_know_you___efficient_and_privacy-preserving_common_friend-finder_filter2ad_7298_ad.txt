### Service Interface Parameters

The Common Friends service interface includes the following parameters:

- **Service Needed**
- **IRequest**
- **RResponse**
- **IResponse**
- **Result Container**
- **Message**
- **Protocol Result**
- **Constituent Data** (e.g., PSI type, hop length, number of friends, supported algorithms, PKI, accepted type, PKR, PSI protocol-specific payload (RDC and IDC))
- **PSI State Machine Status** (optionally M to send)
- **PSI Variant Specific Content**
- **PSI Final Result** (secret key KIR)

**Table 5: Parameters in the Common Friends Service Interface.**

### Framework Description

Figure 4 illustrates how applications can use the Common Friends service. Tables 4 and 5 summarize the details of the methods and containers used. To use the Common Friends service, application instances on a responder device (R) and an initiator device (I) first establish a communication channel between them.

Before starting a PSI instance, I sends a request (IReq) to R, which includes:
- I’s Diffie-Hellman Public Key (PKI)
- The type of protocol I wants to run

Currently, two types of protocols are supported:
1. A protocol that outputs only the cardinality of the intersection (PSI-CA).
2. A protocol that outputs the actual intersection set (BFPSI), which is more efficient compared to traditional PSI.

R’s application instance can choose to accept or reject the proposed protocol type and notify I accordingly. If accepted, R starts the protocol by invoking `StartResponder` with IReq as an argument. This method performs the first step of the PSI protocol and returns a response (RRes). R then sends RRes to I, which starts its Common Friends service engine. This returns an IRes message, which is sent back to R.

R invokes the `Process` method with IRes as the parameter, which returns a `ResultContainer` object. The `ResultContainer` contains a status field that can be either "done" or "wait," and an optional message (M).

The three protocol messages (IReq, RRes, IRes) are mandatory for all PSI schemes. Some PSI protocols, such as PSI-CA, contain only three flows and can be accommodated using these messages. Others, like BFPSI, may require additional message exchanges. To handle this variation, the Common Friends framework allows for an optional phase that can be repeated as many times as needed by the PSI protocol being used.

The application instances determine whether to carry out these optional exchanges by examining the `ResultContainer` returned by the PSI protocol engine and performing the following operations:
- If it contains a message (M), transfer M to the peer.
- If the status component is "wait," wait for the peer to respond. Otherwise (status is "done"), call `getResult` to extract the PSI result.

While the optional phase is being executed, the application instances act as conduits for their respective PSI protocol engines to communicate with each other. Depending on the type of PSI, the result of PSI may be empty for the initiator. As mentioned before, KIR can be used for subsequent access control.

### Plugging in Bloom Filter Based PSI

To integrate the BFPSI protocol (described in Section 2.4) into the Common Friends service, we need to provide BFPSI-specific implementations of each of the methods identified in Table 4. Constructing the Bloom filter (BFI) and testing whether elements of RR are present in BFI are implemented within the `StartInitiator` and `StartResponder` methods, respectively. The creation of the challenge set (to eliminate false positives) is implemented in the `Process` method on R, and the corresponding creation of the response set is implemented in the `ProcessContainer` method on I. The `ProcessContainer` method on R processes the response set and populates the intersection.

### Implementation

We present the implementation of Common Friends on Android and its integration with an existing tethering application from our prior work [5].

#### Framework
We implemented Common Friends as a simple Android service that exposes its interface to third-party applications via Android Interface Definition Language (AIDL) declarations. Communication between the service and application uses Android-specific AIDL interfaces. The core service is implemented in standard Java, making it executable on any device equipped with a Java Virtual Machine. The application instances on I and R are responsible for setting up a communication channel to exchange protocol messages received from the Common Friends Service.

Protocol messages are containers implemented as Parcelable and Serializable Android classes, and are opaque to the calling applications. The application instance on R chooses the protocol variant to use. Currently, our implementation supports PSI-CA and BFPSI, implemented as plugins in the Common Friends framework.

Developers can embed the Common Friends functionality into their applications by adding the Common Friends Service AIDL interface declaration to their application source tree, along with the container classes. The framework can also be extended with additional PSI protocol engines: the abstract class `AlgorithmEngine` provides basic primitives (methods: `StartResponder`, `StartInitiator`, `Process`, and optionally `ProcessContainer`) for future extensions with new PSI protocols.

#### PSI-CA
We implemented the PSI-CA protocol proposed in [14] using the standard Android cryptography provider (Bouncy Castle). We used Elliptic Curve Diffie-Hellman (ECDH) based on the NIST P-192 curve [44] to implement both the Diffie-Hellman key agreement and the modular arithmetic operations within the PSI-CA protocol [14].

#### Bloom Filter Based PSI (BFPSI)
To implement the BFPSI protocol (see Section 2.4), we selected a fixed false positive probability of \( p = 10^{-4} \) and used a Bloom filter with a length calculated according to Equation 1. Diffie-Hellman key exchange was as in the case of PSI-CA. We used HMAC-SHA-1 to instantiate HMAC and SHA-1 for KDF(·,·). Bloom filter operations were implemented using code available from [GitHub](https://github.com/MagnusS/Java-BloomFilter) with SHA-1 as the underlying hash function.

#### Tethering Application
To demonstrate the applicability of our techniques to real-world scenarios where access control decisions are securely made based on the existence of common friends, we extended an application for tethering (proposed in our prior work [5]) by integrating it with our Common Friends service.

The application allows a device to act as a WiFi tethering access point or as a WiFi tethering client. We extended the application by allowing a user to choose whether or not to authorize another user to connect to their access point based on whether or not they are friends on a given social network or have some common friends. The device acting as the access point is turned into a "hotspot" using the Android WiFi Manager API and plays the role of R. It also opens a Bluetooth socket to listen for incoming tethering requests. Our tethering service is advertised by a specific Universal Unique Identifier (UUID), which is used in the service discovery.

The device acting as a tethering client plays the role of I and initiates a Bluetooth service discovery procedure looking for a suitable WiFi tethering access point. On successful discovery, both applications establish a Bluetooth connection in RFCOMM mode and run BFPSI or PSI-CA to learn which or how many friends are common. Based on the gathered information, R decides whether or not to send the WiFi SSID and password to I over the secure channel (using the previously established Diffie-Hellman shared key KIR).

**Code Availability:** The source code of our implementations can be made available for research use upon request.

### Performance Analysis

This section presents an empirical evaluation of the performance of the Common Friends service when using PSI-CA [14] vs. BFPSI (Section 2.4). Specifically, we analyze the computational, communication, and energy consumption costs incurred by them.

#### Computation and Communication Overhead
To measure running times and bandwidth overhead, we performed experiments (over 30 trials) on a Samsung Galaxy Nexus smartphone running Android 4.2 API 17 and a Samsung Galaxy Tablet GT-P3100 running Android 4.1.2 API 16, connected over Bluetooth.

**Table 6: Average values and standard deviations of computation and communication time (in seconds) for one BFPSI and PSI-CA protocol transaction for various input set sizes.**

| Input Size | BFPSI Comm. [s] (std, avg) | BFPSI Comp. [s] (std, avg) | PSI-CA Comm. [s] (std, avg) | PSI-CA Comp. [s] (std, avg) |
|------------|----------------------------|----------------------------|------------------------------|------------------------------|
| 100        | 0.649 (0.061, 0.049)        | 0.652 (0.061, 0.062)        | 3.053 (0.089, 0.373)          | 2.999 (0.24, 0.358)           |
| 200        | 0.646 (0.086, 0.72)         | 1.047 (0.088, 1.33)         | 5.307 (0.212, 7.904)          | 6.401 (0.195, 13.438)         |
| 300        | 0.066 (0.811, 0.816)        | 0.056 (1.597, 1.968)        | 7.904 (0.16, 10.099)          | 13.438 (0.799, 20.709)        |
| 400        | 0.085 (0.811, 0.816)        | 0.099 (1.597, 1.968)        | 10.099 (0.176, 12.543)        | 20.709 (0.69, 26.535)         |
| 500        | 0.085 (0.811, 0.816)        | 0.099 (1.597, 1.968)        | 12.543 (0.176, 166.029)       | 26.535 (0.69, 26.535)         |

**Table 7: Total number of bytes exchanged in a protocol run for increasingly large sets.**

| Input Size | BFPSI (bytes) | PSI-CA (bytes) |
|------------|---------------|----------------|
| 100        | 2,548         | 34,833         |
| 200        | 3,424         | 67,933         |
| 300        | 4,292         | 100,399        |
| 400        | 5,168         | 133,222        |
| 500        | 6,036         | 166,029        |

We assumed that both parties have the same number of friends and varied this number in the range {100, 200, 300, 400, 500}. The intersection of the sets was always at 10% of the set size.

**Processing Time:** Total average execution time increases linearly for both protocols, but at different rates (Fig. 7). Specifically, Table 6 shows that, with 5-fold increases in set sizes, computation time for PSI-CA increases by several seconds, whereas, with BFPSI, it increases by less than half a second.

**Communication Bandwidth:** As shown in Table 7, the total number of bytes exchanged also increases linearly for both protocols. However, the amount of data exchange is significantly larger for PSI-CA, by a factor of almost 6 compared to BFPSI.

#### Power Analysis
It is well-known that energy consumption for sending/receiving a message increases with the message size [46, 49]. As a result, the use of the BFPSI protocol can have a lower impact on battery life, which is crucial for mobile users. To study this aspect, we performed a power analysis of the Common Friends service with input sets of 200 items, using two Samsung Nexus S devices running the CyanogenMod 9.1.0-crespo Android release and a laptop running a power analysis tool for Android devices called Little Eye.1

Currently, the tool is optimized for precise power analysis measurements only on certain device models, but it can be used for rough estimates on others as well. (In general, power analysis on mobile devices at the granularity of applications is known to be a challenging problem [49], however, our estimates suffice to provide an intuition of power requirements for continuous executions of the Common Friends service.)

Figures 5 and 6 show power diagrams for BFPSI and PSI-CA protocols, respectively, when executed 5 times (the x-axis shows elapsed time, and the peaks correspond to the five executions). We also calculated the overall energy consumed by Common Friends during each test. Measurements include CPU power and communication, but exclude power consumed by the device screen. According to our measurements, BFPSI execution required 0.18 mAh, while PSI-CA utilized 0.55 mAh, indicating that BFPSI consumes approximately 3 times less energy than PSI-CA.

To confirm that observed differences are not induced by the power consumption characteristics of the device model we used, we re-ran the tests on different devices and obtained similar results.

**Little Eye Tool:** [http://www.littleeye.co/](http://www.littleeye.co/)