### 优化后的文本

#### 25.13 Thunk 及其符号

当 CPU 在不同字长（如 16 位和 32 位）、不同空间（如内核空间和用户空间）或不同模块之间（如 DLL）的代码之间跳转时，通常需要一些代码来完成衔接、映射和转换工作。这些代码片段被称为 Thunk。关于 Thunk 一词的来源有多种说法：有人认为它是 Think 的一种特殊过去式（类似于 drink > drunk），有人认为这个词来源于早期计算机在运算时发出的声音，还有人认为它是 "THe-fUNCtion" 的缩写。无论来源如何，重要的是理解 Thunk 是用来实现特定函数调用和执行转移的一小段代码。

##### 25.13.1 DLL 技术中的 Thunk

Thunk 的一种典型应用是在动态链接库（Dynamic Link Library, DLL）技术中实现动态绑定和跨模块调用。通过一个简单的例子来理解 DLL 技术的基本原理和 Thunk 的作用：

在使用了 MessageBox API 的 HiWorld 程序中，可以看到以下代码：

```assembly
0:001> u HiWorld!MessageBoxW
HiWorld!MessageBoxW:
00412538 ff2500b44100    jmp     dword ptr [HiWorld!_imp__MessageBoxW (0041b400)]
```

其中 `HiWorld!_imp__MessageBoxW` 可以被视为一个全局变量，使用 `dd` 命令可以观察到它的值：

```assembly
0:001> dd HiWorld!_imp__MessageBoxW l1
0041b400  77d9610a
```

使用 `ln` 命令可以看到 `77d9610a` 是 User32.DLL 中的 `MessageBoxW` 函数的地址：

```assembly
0:001> ln 77d9610a
(77d9610a)   USER32!MessageBoxW   |  (77d96158)   USER32!SetSysColors
```

位于 HiWorld 中的 `MessageBoxW` 是一个典型的 Thunk，它的作用是跳转到全局变量 `HiWorld!_imp__MessageBoxW` 所指定的地址。

##### 25.13.2 实现不同字长模块间调用的 Thunk

另一种典型应用是在不同字长的模块间进行函数调用以完成翻译和转换任务。例如，在 Windows 9x 中，为了支持旧的 16 位软件，系统允许从 32 位应用程序（EXE）中调用 16 位模块（DLL）中的函数。由于 32 位代码使用的数据类型和寄存器与 16 位代码有很大差异，因此在调用前必须将函数参数翻译为 16 位代码所使用的数据类型，并将线程的栈切换为供 16 位代码使用的栈。Windows 9x 设计了一种称为 Flat Thunk 的机制，使用一对 DLL（一个 32 位，一个 16 位）来执行从 32 位代码到 16 位代码的函数调用，并提供了一个专门的编译工具（Thunk Compiler）来帮助生成这对 DLL。尽管今天的 Windows 操作系统不再支持 16 位模块，但某些 API（如 ThunkConnect32）仍然保留在 MSDN 中。

##### 25.13.3 启动线程的 Thunk

在 `kernel32.dll` 中可以看到一段名为 `BaseProcessStartThunk` 的代码，其汇编指令如下：

```assembly
0:001> u kernel32!BaseProcessStartThunk
kernel32!BaseProcessStartThunk:
7c810665 33ed            xor     ebp,ebp
7c810667 50              push    eax
7c810668 6a00           push    0
7c81066a e945690000     jmp     kernel32!BaseProcessStart (7c816fb4)
```

这段代码将 EBP 寄存器清零，然后向栈中压入两个参数，并无条件地跳转到 `BaseProcessStart` 函数。实际上，这段代码是每个进程的初始线程开始在用户态执行的起点。EAX 的值是进程的启动函数地址，即登记在 PE 文件头结构中的入口地址。`BaseProcessStartThunk` 是一个典型的 Thunk，它做一些简单的操作后便跳转到真正执行任务的目标函数。

##### 25.13.4 Thunk 分类

DIA SDK 中的 `THUNK_ORDINAL` 枚举类型将 Thunk 归纳为表 25-31 所列出的 7 种类型：

| 常量                        | 值 | 说明                                           |
|-----------------------------|-----|------------------------------------------------|
| THUNK_ORDINAL_NOTYPE        | 0   | 普通的 Thunk                                   |
| THUNK_ORDINAL_ADJUSTOR      | 1   | 用于调整 this 指针的 Thunk                     |
| THUNK_ORDINAL_VCALL         | 2   | 用于调用虚函数的 Thunk                         |
| THUNK_ORDINAL_PCODE         | 3   | 用于调用 P-Code 的 Thunk                       |
| THUNK_ORDINAL_LOAD          | 4   | 加载地址并跳转到这个地址                       |
| THUNK_ORDINAL_TRAMP_INCREMENTAL | 5   | 增量性的 Trampoline Thunk                      |
| THUNK_ORDINAL_TRAMP_BRANCHISLAND | 6   | 分支性的 Trampoline Thunk                      |

其中 P-Code 是 Packed Code 的缩写，是一种比 .NET 技术更早的中间代码技术。Trampoline Thunk 用于将函数调用从一个空间弹到另一个空间，例如从内核空间到用户空间或反之。

##### 25.13.5 Thunk 符号

Thunk 符号（SymTagThunk[27]）用来描述程序中的 Thunk。表 25-32 列出了用来描述前面介绍的 `HiWorld!MessageBoxW` 的 Thunk 符号的各种属性。

| 属性                    | 值          | 说明                                               |
|-------------------------|--------------|----------------------------------------------------|
| get_addressOffset       | 0x1538      | Thunk 的地址偏移                                   |
| get_addressSection      | 2            | Thunk 的节地址                                     |
| get_length              | 0x6         | Thunk 的代码长度，6 个字节                         |
| get_lexicalParentId     | 449          | 父词条 ID，代表的是 User32.DLL                     |
| get_locationType        | static[1]   | 位置类型                                           |
| get_name                | MessageBoxW | 名称                                               |
| get_relativeVirtualAddress | 0x12538    | Thunk 的 RVA                                       |
| get_thunkOrdinal        | standard thunk[0] | Thunk 类型                                         |
| get_virtualAddress      | 0x12538     | Thunk 过程的虚拟地址                               |

从 PDB 的编纂结构角度来讲，Thunk 符号是 Compiland 符号的子符号。例如，表 25-32 所描述的 `MessageBoxW` 符号的父词条 ID（449）代表的是描述 User32.DLL 的 Compiland 符号。

---

### 补编内容

#### 28.9 JPDA 标准

Java 是一种流行的动态语言，使用 Java 语言开发的程序先编译为字节码，然后由 Java 虚拟机（JVM）按照 JIT 编译的方式来执行。Java 程序可以在各种装有 Java 运行环境（Java Runtine）的系统中运行，具有非常好的跨平台特征，因此被广泛应用到企业应用、网络服务、网站开发、移动和嵌入式设备等领域。本节我们介绍用于调试 Java 程序的调试器标准——JPDA。我们介绍的版本是 Java SE 6。

##### 28.9.1 JPDA 概貌

JPDA 的全称是 Java 平台调试器架构（Java Platform Debugger Architecture），它由以下三个部分组成：

1. **Java 调试器接口（Java Debug Interface，简称 JDI）**：这是一套供调试器或性能分析工具使用的 Java API，用来访问目标程序的内部状态和调用 Java 虚拟机的各种调试功能。JDI 工作在调试器进程中，负责与调试器的其他部分进行交互。
2. **Java 虚拟机工具接口（JVM Tool Interface，简称 JVM TI）**：这是 JVM 对外提供调试服务的标准接口，它工作在被调试的 Java 进程中，负责与 Java 虚拟机进行交互收集调试信息并接收和处理来自 JDI 的命令请求。
3. **Java Debug Wire Protocol（简称 JDWP）**：这是 JVM TI 与 JDI 之间进行通信的协议，二者通过这个协议交换信息。

从用户的角度来看，位于调试器进程中的部分（包括 JDI）常被称为前端（Front End），被调试器进程中负责支持调试器前端工作的部分常被称为后端（Back End）。下面我们对以上三个部分进行分别介绍。

##### 28.9.2 JDI

JDI 是一套纯粹的 Java API 库，用来简化使用 Java 语言来开发 Java 调试器。它封装了通过 JDWP 与 JVM TI 通信的过程，使得调试器开发者只要调用这些简单易用的 Java API 就能开发出强大的调试器。尽管调试器开发者可以直接使用 JDWP 或 JVM TI，但使用 JDI 是推荐的方法。JDI 主要包含表 28-7 所列出的一些 Java 包（package）。

| 包名                 | 功能                                          |
|----------------------|-----------------------------------------------|
| com.sun.jdi          | JDI 的核心包，定义了位于目标进程内的类型、数据和虚拟机本身 |

---

希望这些优化后的文本更加清晰、连贯和专业。如果还有其他部分需要优化，请告诉我！