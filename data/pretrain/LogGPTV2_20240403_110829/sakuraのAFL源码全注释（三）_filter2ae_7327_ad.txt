    * [open函数返回值](https://blog.csdn.net/csdn66_2016/article/details/77716008)
    * 调用成功时返回一个文件描述符fd，调用失败时返回-1，并修改errno
  * fdopen 
    * `FILE * fdopen(int fildes, const char * mode);`fdopen()会将参数fildes 的文件描述词, 转换为对应的文件指针后返回.
    * 参数mode 字符串则代表着文件指针的流形态, 此形态必须和原先文件描述词读写模式相同. 关于mode字符串格式请参考fopen().
    * 返回值：转换成功时返回指向该流的文件指针. 失败则返回NULL, 并把错误代码存在errno中.
  * fgets 
    * `char *fgets(char *str, int size, FILE *stream)`从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (size-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。
    * string为一个字符数组，用来保存读取到的字符。
    * size为要读取的字符的个数。如果该行字符数大于size-1，则读到size-1个字符时结束，并在最后补充’\0’；如果该行字符数小于等于size-1，则读取所有字符，并在最后补充’\0’。即，每次最多读取size-1个字符。
    * stream为文件流指针。  
-【返回值】读取成功，返回读取到的字符串，即string；失败或读到文件结尾返回NULL。因此我们不能直接通过fgets()的返回值来判断函数是否是出错而终止的，应该借助feof()函数或者ferror()函数来判断。
  * fopen 
    * `FILE * fopen(const char * path, const char * mode);`打开一个文件并返回文件指针
    * [fopen参数详解](http://c.biancheng.net/cpp/html/250.html)
  * atexit 
    * `int atexit (void (*function) (void));`atexit()用来设置一个程序正常结束前调用的函数. 当程序通过调用exit()或从main中返回时, 参数function所指定的函数会先被调用, 然后才真正由exit()结束程序.
    * 如果执行成功则返回0, 否则返回-1, 失败原因存于errno 中.
  * mkdir 
    * `int mkdir(const char *pathname, mode_t mode);`mkdir()函数以mode方式创建一个以pathname为名字的目录，mode定义所创建目录的权限
    * 返回值: 0:目录创建成功 -1:创建失败
  * flock 
    * `int flock(int fd,int operation);`flock()会依参数operation所指定的方式对参数fd所指的文件做各种锁定或解除锁定的动作。此函数只能锁定整个文件，无法锁定文件的某一区域。
    * LOCK_SH 建立共享锁定。多个进程可同时对同一个文件作共享锁定。
    * LOCK_EX 建立互斥锁定。一个文件同时只有一个互斥锁定。
    * LOCK_UN 解除文件锁定状态。
    * LOCK_NB 无法建立锁定时，此操作可不被阻断，马上返回进程。通常与LOCK_SH或LOCK_EX 做OR(|)组合。
    * 单一文件无法同时建立共享锁定和互斥锁定，而当使用dup()或fork()时文件描述词不会继承此种锁定。
    * 返回值 返回0表示成功，若有错误则返回-1，错误代码存于errno。
  * scandir 
    * `int scandir(const char *dir,struct dirent **namelist,int (*filter)(const void *b),int ( * compare )( const struct dirent **, const struct dirent ** ) );`
    * `int alphasort(const void *a, const void *b);`
    * `int versionsort(const void *a, const void *b);`
    * 函数scandir扫描dir目录下(不包括子目录)满足filter过滤模式的文件，返回的结果是compare函数经过排序的，并保存在namelist中。注意namelist的元素是通过malloc动态分配内存的,所以在使用时要注意释放内存。alphasort和versionsort是使用到的两种排序的函数。
    * 当函数成功执行时返回找到匹配模式文件的个数，如果失败将返回-1。
  * lstat 
    * `int lstat (const char * file_name, struct stat * buf);`
    * 函数说明：lstat()与stat()作用完全相同, 都是取得参数file_name 所指的文件状态, 其差别在于, 当文件为符号连接时, lstat()会返回该link 本身的状态. 详细内容请参考stat().
    * 返回值：执行成功则返回0, 失败返回-1, 错误代码存于errno.
  * read 
    * `size_t read(int fd, void * buf, size_t count);`read()会把参数fd所指的文件传送count个字节到buf指针所指的内存中. 若参数count为0, 则read()不会有作用并返回0.
    * 返回值为实际读取到的字节数, 如果返回0, 表示已到达文件尾或是无可读取的数据,此外文件读写位置会随读取到的字节移动.
    * 如果顺利,read()会返回实际读到的字节数, 最好能将返回值与参数count作比较, 若返回的字节数比要求读取的字节数少, 则有可能读到了文件尾
    * 当有错误发生时则返回-1, 错误代码存入errno中, 而文件读写位置则无法预期.
  * sscanf 
    * `int sscanf(const char *str, const char *format, ...)`从字符串读取格式化输入。
    * 如果成功，该函数返回成功匹配和赋值的个数。如果到达文件末尾或发生读错误，则返回EOF。
    * 例子 
                strcpy( dtm, "Saturday March 25 1989" );
        sscanf( dtm, "%s %s %d  %d", weekday, month, &day, &year );
        printf("%s %d, %d = %s\n", month, day, year, weekday )
        ...
        March 25, 1989 = Saturday
  * link 
    * `int link (const char * oldpath, const char * newpath);`
    * link()以参数newpath指定的名称来建立一个新的连接(硬连接)到参数oldpath所指定的已存在文件. 如果参数newpath指定的名称为一已存在的文件则不会建立连接.
    * 返回值：成功则返回0, 失败返回-1, 错误原因存于errno.
  * rmdir
  * `int rmdir(const char *pathname);`rmdir函数用于删除一个空目录。
  * getcwd
  * `char * getcwd(char * buf, size_t size);`getcwd()会将当前的工作目录绝对路径复制到参数buf所指的内存空间，参数size为buf的空间大小。
  * unlink
  * `int unlink(const char * pathname)`unlink()会删除参数pathname 指定的文件. 如果该文件名为最后连接点, 但有其他进程打开了此文件, 则在所有关于此文件的文件描述词皆关闭后才会删除. 如果参数pathname 为一符号连接, 则此连接会被删除。
  * pipe 
    * `int pipe(int fd[2])`创建一个简单的管道，若成功则为数组fd分配两个文件描述符，其中fd[0]用于读取管道，fd[1]用于写入管道
    * 若成功则返回零，否则返回-1，错误原因存于errno中。
    * 管道，顾名思义，当我们希望将两个进程的数据连接起来的时候就可以使用它，从而将一个进程的输出数据作为另一个进程的输入数据达到通信交流的目的
  * setsid
  * 子进程从父进程继承了：SessionID、进程组ID和打开的终端。子进程如果要脱离这些，代码中可通过调用setsid来实现。而命令行或脚本中可以通过使用命令setsid来运行程序实现。setsid帮助一个进程脱离从父进程继承而来的已打开的终端、隶属进程组和隶属的会话。
  * dup2 
    * `int dup2(int oldfd,int newfd);`
    * 复制一个现存的文件描述符。当调用dup函数时，内核在进程中创建一个新的文件描述符，此描述符是当前可用文件描述符的最小数值，这个文件描述符指向oldfd所拥有的文件表项。dup2和dup的区别就是可以用newfd参数指定新描述符的数值，如果newfd已经打开，则先将其关闭。如果newfd等于oldfd，则dup2返回newfd, 而不关闭它。
    * dup2函数返回的新文件描述符同样与参数oldfd共享同一文件表项。
  * waitpid 
    * `pid_t waitpid(pid_t pid, int * status, int options);`waitpid()会暂时停止目前进程的执行, 直到有信号来到或子进程结束. 如果在调用wait()时子进程已经结束, 则wait()会立即返回子进程结束状态值. 子进程的结束状态值会由参数status返回, 而子进程的进程识别码也会一块返回. 如果不在意结束状态值, 则参数status可以设成NULL. 参数pid为欲等待的子进程识别码。
    * 返回值：如果执行成功则返回子进程识别码(PID), 如果有错误发生则返回-1. 失败原因存于errno中.
  * setitimer
  * [linux几种定时函数的使用](https://www.cnblogs.com/fnlingnzb-learner/p/5984844.html)
  * mmap 
    * `void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)`  
该函数主要用途有三个：
    * 将普通文件映射到内存中，通常在需要对文件进行频繁读写时使用，用内存读写取代I/O读写，以获得较高的性能；
    * addr 
      * 指向欲映射的内存起始地址，通常设为NULL，代表让系统自动选定地址，映射成功后返回该地址。
    * length 
      * 代表将文件中多大的部分映射到内存。
    * prot 
      * PROT_EXEC 映射区域可被执行
      * PROT_READ 映射区域可被读取
      * PROT_WRITE 映射区域可被写入
      * PROT_NONE 映射区域不能存取
  * sprintf 
    * `int sprintf(char *string, char *format [,argument,...]);`
      * 把格式化的数据写入某个字符串中，即发送格式化输出到string所指向的字符串
  * ftruncate
  * `int ftruncate(int fd, off_t length)` ftruncate()会将参数fd指定的文件大小改为参数length指定的大小。参数fd为已打开的文件描述词，而且必须是以写入模式打开的文件。如果原来的文件件大小比参数length大，则超过的部分会被删去
  * lseek 
    * `off_t lseek(int fildes, off_t offset, int whence);`每一个已打开的文件都有一个读写位置, 当打开文件时通常其读写位置是指向文件开头, 若是以附加的方式打开文件(如O_APPEND), 则读写位置会指向文件尾. 当read()或write()时, 读写位置会随之增加,lseek()便是用来控制该文件的读写位置. 参数fildes 为已打开的文件描述词, 参数offset 为根据参数whence来移动读写位置的位移数.
    * 参数 whence 为下列其中一种: 
      * SEEK_SET 参数offset 即为新的读写位置.
      * SEEK_CUR 以目前的读写位置往后增加offset 个位移量.
      * SEEK_END 将读写位置指向文件尾后再增加offset 个位移量. 当whence 值为SEEK_CUR 或
      * SEEK_END 时, 参数offet 允许负值的出现.
    * 下列是特别的使用方式:  
1) 欲将读写位置移到文件开头时:lseek(int fildes, 0, SEEK_SET);  
2) 欲将读写位置移到文件尾时:lseek(int fildes, 0, SEEK_END);  
3) 想要取得目前文件位置时:lseek(int fildes, 0, SEEK_CUR);
    * 返回值：当调用成功时则返回目前的读写位置, 也就是距离文件开头多少个字节. 若有错误则返回-1, errno 会存放错误代码.
  * readdir
readdir()返回参数dir 目录流的下个目录进入点
    #include 
    #include 
    #include 
    main()
    {
      DIR * dir;
      struct dirent * ptr;
      int i;
      dir = opendir("/etc/rc.d");
      while((ptr = readdir(dir)) != NULL)
      {
          printf("d_name : %s\n", ptr->d_name);
      }
      closedir(dir);
    }
    执行：
    d_name : .
    d_name : ..
    d_name : init.d
    d_name : rc0.d
    d_name : rc1.d
    d_name : rc2.d
    d_name : rc3.d
    d_name : rc4.d
    d_name : rc5.d
    d_name : rc6.d
    d_name : rc
    d_name : rc.local
    d_name : rc.sysinit
## 参考资料