导致其成为“悬挂指针”（DanglingPointer），如图9-41所示。
如果此时AfdRetumTplnfo函数再被调用，那么悬挂指针TplnfoElement+OxC将会被loFreeMdl函
数用于释放内存，最终造成“DoubleFree”双重释放漏洞。
2.1O控制码0x120C3
采用前面的方法，追踪IO控制码0x120C3对应的处理函数，可以发现它调用的是
afd!AfdTransmitPackets函数：
kd>g
Tracing nt!NtDeviceIoControlFile to return address 83c5a42a
Cannot find hal1ExReleaseFastMutex
14
[e]nt!NtDeviceIoControlFile
---
## Page 469
450
漏洞战争：软件漏洞分析精要
E
[1]
nt!IopXxControlFile
21
[2]
nt1_SEH_prolog4
省略部分内客
25
[E
nt1IofCal1oriver
22
4]
afdlAfdDispatchDeviceControl
3
5]
afdlAfdTransmitPackets
21
]e
6]
afd1_SEH_pro1og4
67
21
】
5}
afdlAfdTransmitPackets
3
[6]
afd!AfdTliGetTpInfo
1F ( *(ntry * 1#) 3 B )
(strya * B;
6 2 )
(02+8)
0bFDerefere
te0j+ct()1
F( *Ip
[leneat + Bt):
1f（*(05 . 6）62）
lsfeteneat + bC));
*(1pl
t）未作清空，导致它仍指向已释效的mt，成为悬挂指针（nglingPoient
FolLenest +BC));
**61
gs号 *+ efeg
( (85 ▪ 26) ) #1
29）=（8+2=)
210
46441u):
0 - （e5 .2）
图9-41AfdReturnTpInfo函数
afd!AfdTransmitPackets函数的两个参数分别为pIRP与ploStackLocation，因此在IDA中将其a1和a2
参数分别重命名为pIRP与ploStackLocation，从F5反编译的代码可以发现它与AfTransmitFile函数开
头部分有些类似，如图9-42所示，
---
## Page 470
第9章内核漏洞分析451
bT8FD )
/此处不等于
gete LABEL_152;
if ( v3 1- bdf92u 66 (v3
geto-LABEL_:
411
（=（2▪2）11（（x（2x
*(pleSt
geto LABtL_152;
不执行，要求
65 -0;
//18e
0led-0
t(Tu
geto LaBEL_1a;
/发生我转，要求
HEL_14:
salig
t():
u5（v52 ·Bx10）:
// 1yoe3InputBuffer
//(TgpestapetBuffer+
DxC) & 0x30 1=
hx3e.plo5tac
ation
A)
省
if（（o7））
Ritusrker:
//直指规转到达里
）200）
件，才能调用到
必须满足以上3处条
e1se
AfdTdiGetTpinfo函数
u6 - AreteitetTplnfo(v5);
执行这里
图9-42AfdTransmitPackets函数
---
## Page 471
452漏洞战争：软件漏洞分析精要
通过WinDbg动态调试判断上面一些条件语句的跳转情况，再结合IDA静态分析，可以知道若要
成功调用到AfdTdiGetTplnfo函数（之所以要调用该函数，主要是用于实现AfdRetumTplnfo的再次调
用，以造成双重释放漏润，具体见后面分析）必须满足以下条件：
InputBufferLength >= ex1θ
Type3InputBuffer & 3 = @
*(Type3InputBuffer + @xC) & @xFFFFFFC8 == θ
*(Type3InputBuffer + exC) & @x3e 1= @x30
•Type3InputBuffer != @
=1( +Jngne）
*(Type3InputBuffer + 4) P
afd1AfdT11GetTpInfo+8x69:
8e4da3a6 ff151ce24c8e
dword ptr [afd1_imp__ExA1locatePoolwithQuotaTag
(8e4ce21c)]
kd> dd esp 14
8a9b1bec0808881e fffffffe c6646641 04d611f8// 申请过大的内存触发异常
kd> p
Breakpointθhit//调用异常处理函数AfdReturnTpInfo
afdlAfdReturnTpInfo:
8e4f7e6a 8bff
moved1,ed1
进入AfdRetumTplnfo函数后，它会再次调用以下代码，对前面已释放过内存的*（TplnfoElement
+0xC）再次进行释放，导致双重释放漏润的发生。
IoFreeMd1(*(TpInfoE1ement+ @xC));
对AfdRetumTplnfo，跟进第二次调用AfdRetumTplnfo的过程，可以发现它调用loFreeMdl函数所
释放的内存正是前面已经被释放过的，单步执行IoFreeMdl函数后就触发了DoubleFree漏洞，导致系
统蓝屏，如图9-43所示。
kd> b1
kd> g
e 8e4f7e6a
0001 (eee1) afdlAfdReturnTpInfo
Breakpoint e hit
afd1AfdReturnTpInfo:
---
## Page 472
第9章内核漏洞分析
453
8e4f7e6a 8bff
edl,edi
kd> g
Breakpoint e hit
afd!AfdReturnTpInfo:
8e4f7e6a 8bff
nOV
edi,edi
省略部分内容……
kd> p
afd1AfdReturnTpInfo+Bxa4:
8e4f7fee ff77ec
push
dword ptr [edi+ech]
kd> p
afd!AfdReturnTpInfo+Bxa7:
8e4f7f11 ff15fce24c8e
cal1
dword ptr [afd1_imp_IoFreeMd1 （8e4ce2fc)]
kd> dd esp 11
8d223af4857b2a20
kd> dt _NDL 857b2a28
nt1_MDL
+exeee Next
：0x8574de0e
：1500
_MDL
+ex8e4 Size
+exee6 Md1Flags
：0
+exee8 Process
:（nul1)
+exeec MappedSystemVa : (nu11)
+0xe1e StartVa
:0x13371000
+0x014 ByteCount
+0xe18 Byte0ffset
:0x16ecca
kd> p
:8x337
*** Fatal System Error: exoeeeeec2
(ex8800087,ex88801097,0x88808844,0x85782A28)
WARNING: This break is not a step/trace completion.
The last command has been cleared to prevent
accidental continuation of this unrelated event.
Check the event, location and thread before resuming.
Break instruction exception - code seeeeee3 (first chance)
A fatal systen error has occurred.
Debugger entered on first try; Bugcheck callbacks have not been fnvoked.
A fatal system error has occurred.
---
## Page 473
454漏洞战争：软件漏洞分析精要
letectedand xln
dows has beer
shut dow
AD_POCL_CALLER
hese steps:
youneed touse Sa
seTectspueerode,
nce
echertcal1nf oreat1on:
ST0F：0000000C2（000000007,0-00001097.005800014,0-85782A20）
oletngtaforcrshdu.
图9-43系统蓝屏
9.7.3漏洞利用
为了成功利用漏洞，我们需要进行如下操作。
（1）先创建一个对象去“占坑”填充第1次释放的内存，但该对象的大小必须与释放内存的大小一
致（由于用户可控制MDL大小，因此不成问题），Pwn2Own比赛上Siberas团队使用的是
WokerFactory对象，其大小是OxA0。
区限电（）
（3）将可控数据（Shellcode）覆盖到已释放的对象内存，Siberas团队用包含memcpy 的内核函数
NtQueryEaFile实现该操作。
（4）利用可操作WokerFactory 对象的函数NtSetlnformationWorkerFactory 将Shellcode 地址写入
HalDispatchTable + 0x4
（5）在用户层调用NtQueryIntervalProfile函数执行Shellcode以实现提权。
Siberas团队之所以使用WokerFactory对象，是因为它刚好存在NtSetInformationWorkerFactory操
作函数能够帮助实现任意内容写任意地址，即上面的第4步操作。用WinDbg反汇编
---
## Page 474
第9章内核漏润分析455
NtSetInformationWorkerFactory函数：
kd> uf NtSetInfornationkorkerFactory
Flow analysis was incomplete, some code may be missing
ntINtSetInformationworkerFactory:
83ca1ace 6a38
push
38h
83ca1ac2 68f8f6c583
Push
offset nt1 ?? ::FNo0oBFM::string*+θx6a98 （83c5f6f8)
83calac7 e83ceafcff
ca11
nt1_SEH_pro1og4 (83c7e5e8)
83ca1acc 64a124010080
moV
83ca1ad2 8a883a810080
cl,byte ptr [eax+13Ah]
eax,dword ptr fs:[eeeee124h]
mov
83ca1ad8 884dd8
mov
byte ptr [ebp-28h],c1
83ca1adb 33ce
xor
eax,eax
83ca1add 8d7dc4
1ea
ed1,[ebp-3Ch]
83calaee ab
stos
dword ptr es:[ed1]
83calae1 ab
stos
dword ptr es:[edi]
83calae5 6a08
83ca1ae2 8b758c
mov
e=sa // [u+d]d popa
Push
8
83calae7 5b
pop
ebx
//ebx=8
省略部分内容
ntINtSetInformationworkerFactory+ex1e7:
83ca1bc8 8b4510
mov
8e=xea //[uet+da]Jjd ponpxea
83ca1bcb 84c9
test
c1,c1
83ca1bcd 7414
Je
nt INtSetInformationworkerFactory+ex122 (83calbe3)
省略部分内容
nt!NtSetInformationworkerFactory+ex122:
83ca1be3 8b38
mov
edi,dword ptr [eax]
83ca1be5 897dc4
mov
dword ptr [ebp-3Ch],ed1
83ca1be8 8b4884
mov
eax,dword ptr [eax+4]
83ca1beb 8945c8
mov
dword ptr [ebp-38h],eax
nt:1NtSetInformationworkerFactory+ex12d:
83calbee c745fcfeffffff mov
dword ptr [ebp-4],eFFFFFFFEh
83ca1bf5 6a00