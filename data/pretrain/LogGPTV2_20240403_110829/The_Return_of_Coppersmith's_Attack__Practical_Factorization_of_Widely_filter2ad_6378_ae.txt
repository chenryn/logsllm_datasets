(cid:35)
It is easy to see that either a(cid:48) or b(cid:48) (c(cid:48) ≡ a(cid:48) + b(cid:48) mod ord(cid:48)) occur in
the interval I and that the size of the I is the smallest possible.
3 PRACTICAL IMPLEMENTATION
We implemented the full a(cid:138)ack in SageMath, based on an imple-
mentation [75] of the Howgrave-Graham method [40]. We used
it to verify the applicability of the method on real keys generated
on the vulnerable smartcards. It was also used to perform time
measurements in order to optimize our parameters and evaluate
the worst case running time, as captured by Figure 1 and Table 1.
3.1 Details and empirical evaluation
(cid:140)e (cid:128)ngerprint veri(cid:128)cation algorithm computes the discrete loga-
rithm of a public modulus. We chose the primorial of 512-bit RSA
as the modulus, since it applies to all key lengths. We recorded no
false negatives in 3 million vulnerable keys generated by RSALib,
since all of the keys have the sought structure. As expected, no false
positives were recorded on 1 million non-a(cid:130)ected keys generated
by OpenSSL. We estimated the probability of a false positive on a
single key as 2−154 in Section 2.2.2.
We practically veri(cid:128)ed the factorization method on multiple
randomly selected 512 and 1024-bit keys. Since the complexity of
factorization of a 2048-bit key could be approximately 100 CPU
years, we did not select keys randomly. Instead, we generated
keys on an a(cid:130)ected smartcard and exported the private keys. (cid:140)e
knowledge of the primes allows us to precisely compute the number
of a(cid:138)empts required for the factorization as the distance of the
initial guess c(cid:48)/2 (Section 2.8) to a(cid:48) or b(cid:48) (whichever is closer).
Out of 137,000 freshly generated keys, we selected 24 public keys
with the least e(cid:130)ort required (all keys with 221 a(cid:138)empts or fewer)
for factorization and ran the computation, each (cid:128)nishing within
one week. We used the time measurements to verify the linear
relationship of factorization time on the order and we checked that
the worst case time estimate matches the slope of the line.
3.2 Possible improvements and limitations
(cid:140)e a(cid:138)ack can be trivially parallelized on multiple computers. Each
individual task is assigned a di(cid:130)erent subrange of the values a(cid:48) that
need to be guessed. (cid:140)e expected wall time of the a(cid:138)ack can be
decreased linearly with the number of CPUs (assuming that each
task can execute the same number of a(cid:138)empts per a unit of time).
However, the expected CPU time and the worst case CPU time
remain una(cid:130)ected.
(cid:140)e time of each a(cid:138)empt is dominated by la(cid:138)ice reduction. Our
implementation uses the default implementation of LLL in Sage-
Math (backed by the fpyLLL wrapper for fpLLL [27]). A more
e(cid:129)cient implementation might speed up the process. However, we
do not expect signi(cid:128)cant improvements.
In our opinion, the best improvement could be achieved by a
be(cid:138)er choice of polynomials in the phase of la(cid:138)ice construction.
We follow the general advice for polynomial choice from [57]. More
suitable la(cid:138)ice may exist for our speci(cid:128)c problem.
Our algorithm for optimizing the running time utilizes a heuristic
for (cid:128)nding an optimized value of the modulus M(cid:48). A be(cid:138)er heuristic
or a bruteforce search might (cid:128)nd a modulus, where the generator
has a lower order or could discover a be(cid:138)er combination of the
la(cid:138)ice size and M(cid:48) value.
Despite an extensive search for be(cid:138)er values within a signi(cid:128)-
cantly larger space (Section 2.7.4), we obtained only small improve-
ments of the overall factorization time (halving the overall time
at best in comparison to the greedy algorithm). We examined the
trade-o(cid:130) between the number of a(cid:138)empts and the time per a(cid:138)empt,
as captured by Figure 2 to understand the nature of the optimization
process.
We did not explore implementations of la(cid:138)ice reduction backed
by dedicated hardware or GPUs. Most key lengths are processed
with a la(cid:138)ice of low dimensions, however, some improvements
may be gained for lengths that require a large la(cid:138)ice [39]. In our
experience, the memory used by one factorization was up to 300 MB.
SageMath is an interpreted language, so the requirements of a
hardware circuit might be di(cid:130)erent.
Finally, we cannot rule out that a fundamentally improved ap-
proach, which would utilize the properties of keys more e(cid:129)ciently,
will be devised.
4 ANALYSIS OF IMPACTS
(cid:140)e discussion of impacts is far from straightforward. First, the
prevalence of factorizable keys in a given usage domain is between
very easy to very di(cid:129)cult to obtain. For example, the prevalence
of (cid:128)ngerprinted keys used for TLS is easy to enumerate thanks
to Internet-wide scans like Censys [28]. Obtaining large datasets
of public keys for usage domains for devices expected to be more
vulnerable (e.g., electronic passports) is usually signi(cid:128)cantly harder
given the nature of secure hardware use.
Secondly, the actual damage caused by a factorized key varies
signi(cid:128)cantly between and also within the usage domains. Finally,
not all key lengths are actually factorizable, and the factorization
time varies signi(cid:128)cantly – hence, the security of a particular key
length depends on the target domain.
We discuss the overall impact based on the following aspects:
(1) Accessibility of public keys – how di(cid:129)cult it is for an
a(cid:138)acker to obtain the target public key(s) for subsequent
factorization a(cid:138)empts;
(2) Total number of factorizable keys found or assumed – as
detected by scans of a given usage domain;
(3) Cost to factorize the keys with the lengths actually used
in the target domain (as estimated in Table 2);
(4) Implications of a successful factorization – what damage
the a(cid:138)acker can cause.
Note that due to the varying parameter M used by the RSALib
when generating the keys of di(cid:130)erent lengths, the di(cid:129)culty of key
factorization does not strictly increase with the key length (see
Figure 1). Some shorter keys may be actually more di(cid:129)cult to
factorize using our method than other longer keys. As an example,
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1639Key size
University cluster
(Intel E5-2650 v3@3GHz Q2/2014)
Rented Amazon c4 instance
(2x Intel E5-2666 PI:EMAIL, estimated)
Energy-only price ($0.2/kWh)
(Intel E5-2660 PI:EMAIL, estimated)
512 b
1024 b
2048 b
3072 b
4096 b
1.93 CPU hours (veri(cid:128)ed)
97.1 CPU days (veri(cid:128)ed)
140.8 CPU years
2.84 ∗ 1025 years
1.28 ∗ 109 years
0.63 hours, $0.063
31.71 days, $76
45.98 years, $40,305
9.28 ∗ 1024 years, $8.13 ∗ 1027
4.18 ∗ 108 years, $3.66 ∗ 1011
$0.002
$1.78
$944
$1.90 ∗ 1026
$8.58 ∗ 109
Table 2: An estimation of factorization times and prices for di(cid:130)erent key lengths on di(cid:130)erent types of computational devices.
All results are the worst case estimates with expected resources spent being the half of the values shown. (cid:135)e time values
marked as (veri(cid:128)ed) were practically veri(cid:128)ed by factorization of real test keys while others were extrapolated based on a know
number of attempts and a time per attempt. (cid:135)e energy consumption was estimated based on the thermal design power (TDP)
speci(cid:128)cations of Intel Xeon E5-2660 v3 @ 2.60 GHz [42] (note that peak power can be up to 1.5-3x more), time per attempt as
benchmarked on Amazon c4 instance, energy price of $0.2/kWh and scaled to 2.90 GHz (as Amazon c4 uses publicly unreleased
Intel Xeon E5-2666 v3 clocked at a slightly higher frequency). (cid:135)e university cluster column captures the factorization times
as measured by us on a university computational cluster with Intel Xeon E5-2650 v3 @ 3.00 GHz CPUs scaled to a single-
core of this CPU. (cid:135)e Amazon c4 instance price corresponds to outsourcing of a single key factorization to Amazon AWS (c4
price is $0.1/hour for a 2-core CPU). We performed benchmark on a c4 instance for a single Coppersmith’s computation and
extrapolated to number of attempts in the worst case. (cid:135)e energy-only price corresponds to situation when one operates own
hardware and wants to factorize so many keys that the price of hardware completely amortizes over all factorized keys. A
factorization benchmark on Microso(cid:133) Azure was also performed with results roughly comparable to Amazon AWS (+10%).
a 1280-bit key is more di(cid:129)cult to factorize than a 2048-bit key in
our se(cid:138)ing. It is crucial to survey the precise key lengths as used
within the inspected domains. We take advantage of the possibility
to quickly detect the key (cid:128)ngerprint, with quick summary of the
a(cid:130)ected domains in Section 4.1 and in Table 3 and Table 4 followed
with additional details for every domain therea(cid:137)er.
4.1 Summary of results
(cid:140)e electronic identity documents (eIDs) domain is signi(cid:128)cantly
a(cid:130)ected. Despite the general di(cid:129)culty of obtaining relevant datasets
with public keys from passports or eIDs that limited our analysis to
only four countries, we detected two countries issuing documents
with vulnerable keys. (cid:140)e public lookup service of Estonia allowed
for a random sampling of the public keys of citizens and revealed
that more than half of the eIDs of regular citizens are vulnerable
and that all keys for e-residents are vulnerable.
(cid:140)e use of two-factor authentication tokens and commit signing
is on the rise, yet these approaches are still adopted only by a mi-
nority of developers – but usually for the more signi(cid:128)cant projects.
(cid:140)e analysis of the authentication keys of all GitHub developers
found several hundreds of vulnerable keys. (cid:140)e developers with
vulnerable keys have access to crucial open-source repositories
with more than 50,000 stars. Increased scrutiny should be applied
to new commits before the a(cid:130)ected users replace vulnerable keys.
Trusted Platform Modules (TPMs) provide secure hardware an-
chor for trusted boot. Although it is di(cid:129)cult to directly extrapolate
the overall prevalence of chips with vulnerable keypair generation
from our limited sample of 41 laptops with di(cid:130)erent TPM chips,
approximately 24% were producing vulnerable keys, indicating that
the domain is signi(cid:128)cantly a(cid:130)ected. As the replacement of a chip
alone is very impractical or almost impossible, organizations have
to replace the whole laptop, slowing down the recovery from the
problem. Importantly, TPM is used not only to facilitate trusted
boot, but also to store sensitive secrets like ones necessary to access
the Volume Master Key (VMK) for Microso(cid:137) BitLocker full disk en-
cryption so(cid:137)ware [58]. (cid:140)e possibility to factorize TPM’s 2048-bit
key for “sealed storage” might lead to a recovery of BitLocker’s disk
decryption key in the con(cid:128)guration using a TPM and a PIN.
(cid:140)e Pre(cid:138)y Good Privacy (PGP) keys used for digital signatures
and email encryption are easy to download from PGP keyservers.
We detected almost three thousand (cid:128)ngerprinted keys with slightly
less than one thousand practically factorizable. (cid:140)e Yubikey 4 token
seems to be the origin for the majority of these keys as hundreds
even contain identifying strings in the keyholder information and
the date of generation correlates with the release date of this token.
We found only a negligible fraction of vulnerable keys in the
TLS/HTTPS domain. However, all 15 unique keys found were tied
to di(cid:130)erent pages with SCADA-related topics, which may point to
a single provider of a SCADA remote connection platform.
We did not collect relevant datasets of public keys for authen-
tication tokens implementing PIV or U2F standard but found at
least one instance of a widely used token utilizing chips with the
a(cid:130)ected RSALib. Similarly, other devices (e.g., e-health and EMV
payment cards) might be impacted by the described vulnerability,
although we were not able to verify the impact in such domains.
We encourage the use of our tool for detecting vulnerable keys
described in Section 5 and the noti(cid:128)cation of a(cid:130)ected parties if
found.
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA16404.2 Electronic identity documents
Various citizen identity documents represent a large area for the
application of cryptographic smartcards, such as biometric pass-
ports (ePassport, ICAO Doc 9303), eDriver licenses (ISO/IEC 18013)
and additional identity documents. Some national IDs are based on
the same suite of protocols as ePassports, which are standardized
by ICAO 9303 [41]. Other countries have implemented their own
suite of protocols, such as the Estonian EstEID [5], the Belgian eID
[6] or the Taiwanese ID.
Electronic passports and identity cards utilize digital signatures
for: 1) the authentication of stored data (passive authentication);
2) the veri(cid:128)cation of the genuine origin of the chip inside (active
authentication, AA); and 3) the establishment of a secure chan-
nel between the passport and the border inspection terminal with
mutual authentication (Extended Access Control, EAC-PACE). Ad-
ditionally, in some instances, the issuing country uses the national
IDs for citizen authentication when accessing government services
via the Internet.
(cid:140)e suppliers of ePassport implementations typically provide the
platform in several possible con(cid:128)gurations with di(cid:130)erent supported
algorithms (RSA-based, EC-based) and protocols (EAC-PACE, AA),
leaving the choice of the preferred con(cid:128)guration to the issuing
country. (cid:140)e use of the RSALib is referenced in multiple certi(cid:128)cation
documents of electronic passports of several countries.
We are not aware of any country disclosing publicly the full
database of their citizens public keys. A small fraction of countries
provide lookup services with signi(cid:128)cant limitations on the num-
ber of queries allowed. We analyzed four di(cid:130)erent types of digital
certi(cid:128)cates issued by the country of Estonia: a) regular citizenship
eID keys (denoted as esteid); b) eID keys for electronic use only
(“digital certi(cid:128)cate of identity”, denoted as esteid-digi); c) keys for
operations from mobile devices (denoted as esteid-mobiil); and d)
e-resident keys (denoted as esteid-resident). For every type, sepa-
rate authentication (auth) and signature (sign) 2048-bit RSA keys
are available. (cid:140)e keys are used to support various eGovernment