### 3. Practical Implementation

We implemented the full attack in SageMath, based on an implementation [75] of the Howgrave-Graham method [40]. This implementation was used to verify the applicability of the method on real keys generated on vulnerable smartcards. It also facilitated time measurements to optimize our parameters and evaluate the worst-case running time, as illustrated in Figure 1 and Table 1.

#### 3.1. Details and Empirical Evaluation

The fingerprint verification algorithm computes the discrete logarithm of a public modulus. We chose the primorial of a 512-bit RSA key as the modulus, as it applies to all key lengths. In testing, we recorded no false negatives in 3 million vulnerable keys generated by RSALib, since all these keys have the sought structure. As expected, no false positives were recorded on 1 million non-affected keys generated by OpenSSL. The probability of a false positive on a single key is estimated to be \(2^{-154}\), as discussed in Section 2.2.2.

We practically verified the factorization method on multiple randomly selected 512 and 1024-bit keys. Given that the complexity of factorizing a 2048-bit key could be approximately 100 CPU years, we did not select keys randomly. Instead, we generated keys on an affected smartcard and exported the private keys. Knowledge of the primes allows us to precisely compute the number of attempts required for factorization as the distance from the initial guess \(c'/2\) (Section 2.8) to \(a'\) or \(b'\) (whichever is closer).

From 137,000 freshly generated keys, we selected 24 public keys with the least effort required (all keys with 221 attempts or fewer) for factorization. Each computation finished within one week. Time measurements were used to verify the linear relationship of factorization time with the order and to check that the worst-case time estimate matches the slope of the line.

#### 3.2. Possible Improvements and Limitations

The attack can be trivially parallelized on multiple computers. Each individual task is assigned a different subrange of the values \(a'\) that need to be guessed. The expected wall time of the attack can be decreased linearly with the number of CPUs, assuming each task can execute the same number of attempts per unit of time. However, the expected CPU time and the worst-case CPU time remain unaffected.

The time for each attempt is dominated by lattice reduction. Our implementation uses the default LLL implementation in SageMath (backed by the fpyLLL wrapper for fpLLL [27]). A more efficient implementation might speed up the process, but we do not expect significant improvements.

In our opinion, the best improvement could be achieved by a better choice of polynomials during lattice construction. We follow the general advice for polynomial choice from [57], but more suitable lattices may exist for our specific problem.

Our algorithm for optimizing the running time utilizes a heuristic for finding an optimized value of the modulus \(M'\). A better heuristic or a brute-force search might find a modulus where the generator has a lower order or discover a better combination of lattice size and \(M'\) value.

Despite an extensive search for better values within a significantly larger space (Section 2.7.4), we obtained only small improvements in overall factorization time (halving the overall time at best compared to the greedy algorithm). We examined the trade-off between the number of attempts and the time per attempt, as captured in Figure 2, to understand the nature of the optimization process.

We did not explore implementations of lattice reduction backed by dedicated hardware or GPUs. Most key lengths are processed with a lattice of low dimensions, but some improvements may be gained for lengths requiring a large lattice [39]. In our experience, the memory used by one factorization was up to 300 MB. SageMath is an interpreted language, so the requirements of a hardware circuit might be different.

Finally, we cannot rule out that a fundamentally improved approach, which would utilize the properties of keys more efficiently, will be devised.

### 4. Analysis of Impacts

Discussing the impacts is far from straightforward. First, the prevalence of factorizable keys in a given usage domain can range from very easy to very difficult to obtain. For example, the prevalence of fingerprinted keys used for TLS is easy to enumerate thanks to Internet-wide scans like Censys [28]. Obtaining large datasets of public keys for usage domains for devices expected to be more vulnerable (e.g., electronic passports) is usually significantly harder given the nature of secure hardware use.

Secondly, the actual damage caused by a factorized key varies significantly between and within usage domains. Finally, not all key lengths are actually factorizable, and the factorization time varies significantly. Therefore, the security of a particular key length depends on the target domain.

We discuss the overall impact based on the following aspects:
1. **Accessibility of Public Keys**: How difficult it is for an attacker to obtain the target public key(s) for subsequent factorization attempts.
2. **Total Number of Factorizable Keys Found or Assumed**: As detected by scans of a given usage domain.
3. **Cost to Factorize the Keys with the Lengths Actually Used in the Target Domain**: As estimated in Table 2.
4. **Implications of a Successful Factorization**: What damage the attacker can cause.

Note that due to the varying parameter \(M\) used by RSALib when generating keys of different lengths, the difficulty of key factorization does not strictly increase with the key length (see Figure 1). Some shorter keys may be more difficult to factorize using our method than other longer keys. For example, a 1280-bit key is more difficult to factorize than a 2048-bit key in our setting. It is crucial to survey the precise key lengths as used within the inspected domains. We take advantage of the possibility to quickly detect the key fingerprint, with a quick summary of the affected domains in Section 4.1 and in Tables 3 and 4, followed by additional details for every domain thereafter.

#### 4.1. Summary of Results

The electronic identity documents (eIDs) domain is significantly affected. Despite the general difficulty of obtaining relevant datasets with public keys from passports or eIDs, limiting our analysis to only four countries, we detected two countries issuing documents with vulnerable keys. The public lookup service of Estonia allowed for a random sampling of the public keys of citizens, revealing that more than half of the eIDs of regular citizens are vulnerable, and all keys for e-residents are vulnerable.

The use of two-factor authentication tokens and commit signing is on the rise, yet these approaches are still adopted only by a minority of developers, usually for the more significant projects. The analysis of the authentication keys of all GitHub developers found several hundred vulnerable keys. Developers with vulnerable keys have access to crucial open-source repositories with more than 50,000 stars. Increased scrutiny should be applied to new commits before the affected users replace vulnerable keys.

Trusted Platform Modules (TPMs) provide a secure hardware anchor for trusted boot. Although it is difficult to directly extrapolate the overall prevalence of chips with vulnerable keypair generation from our limited sample of 41 laptops with different TPM chips, approximately 24% were producing vulnerable keys, indicating that the domain is significantly affected. As the replacement of a chip alone is very impractical or almost impossible, organizations have to replace the whole laptop, slowing down the recovery from the problem. Importantly, TPM is used not only to facilitate trusted boot but also to store sensitive secrets like those necessary to access the Volume Master Key (VMK) for Microsoft BitLocker full disk encryption software [58]. The possibility to factorize TPM’s 2048-bit key for "sealed storage" might lead to the recovery of BitLocker’s disk decryption key in the configuration using a TPM and a PIN.

Pretty Good Privacy (PGP) keys used for digital signatures and email encryption are easy to download from PGP keyservers. We detected almost three thousand fingerprinted keys, with slightly less than one thousand being practically factorizable. The Yubikey 4 token seems to be the origin for the majority of these keys, as hundreds even contain identifying strings in the keyholder information, and the date of generation correlates with the release date of this token.

We found only a negligible fraction of vulnerable keys in the TLS/HTTPS domain. However, all 15 unique keys found were tied to different pages with SCADA-related topics, which may point to a single provider of a SCADA remote connection platform.

We did not collect relevant datasets of public keys for authentication tokens implementing PIV or U2F standards but found at least one instance of a widely used token utilizing chips with the affected RSALib. Similarly, other devices (e.g., e-health and EMV payment cards) might be impacted by the described vulnerability, although we were not able to verify the impact in such domains.

We encourage the use of our tool for detecting vulnerable keys, as described in Section 5, and the notification of affected parties if found.

#### 4.2. Electronic Identity Documents

Various citizen identity documents represent a large area for the application of cryptographic smartcards, such as biometric passports (ePassport, ICAO Doc 9303), eDriver licenses (ISO/IEC 18013), and additional identity documents. Some national IDs are based on the same suite of protocols as ePassports, which are standardized by ICAO 9303 [41]. Other countries have implemented their own suite of protocols, such as the Estonian EstEID [5], the Belgian eID [6], or the Taiwanese ID.

Electronic passports and identity cards utilize digital signatures for:
1. **Authentication of stored data** (passive authentication).
2. **Verification of the genuine origin of the chip inside** (active authentication, AA).
3. **Establishment of a secure channel between the passport and the border inspection terminal with mutual authentication** (Extended Access Control, EAC-PACE).

Additionally, in some instances, the issuing country uses the national IDs for citizen authentication when accessing government services via the Internet.

The suppliers of ePassport implementations typically provide the platform in several possible configurations with different supported algorithms (RSA-based, EC-based) and protocols (EAC-PACE, AA), leaving the choice of the preferred configuration to the issuing country. The use of RSALib is referenced in multiple certification documents of electronic passports of several countries.

We are not aware of any country disclosing publicly the full database of their citizens' public keys. A small fraction of countries provide lookup services with significant limitations on the number of queries allowed. We analyzed four different types of digital certificates issued by the country of Estonia: 
- Regular citizenship eID keys (denoted as esteid).
- eID keys for electronic use only ("digital certificate of identity", denoted as esteid-digi).
- Keys for operations from mobile devices (denoted as esteid-mobiil).
- e-resident keys (denoted as esteid-resident).

For every type, separate authentication (auth) and signature (sign) 2048-bit RSA keys are available. These keys support various eGovernment services.