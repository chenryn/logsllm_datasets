### Proof of Theorem and Cryptosystem Compatibility

#### Proof of Theorem
The proof of the theorem can be found in the Coq source code. It leverages the structure of the shuffle proof, which is essentially a Sigma protocol with an additional challenge. For each initial challenge, we first extract the witness, whose existence is guaranteed by the underlying Sigma protocol. After gathering all these witnesses, we use straightforward linear algebra to compute either two distinct openings to the same commitment or the permutation and randomness used for shuffling. The only non-linear algebraic part of the proof involves the Schwartz-Zippel lemma to check the equality of polynomials. Since the lemma implies that the polynomials are equal except with negligible probability, we have added the equality of the polynomials as an assumption to the theorem (lines 43 to 47). A general treatment of the lemma is left as future work.

#### Encryption Schemes in Class

We have proven the security of the mix net for all cryptosystems in the class defined in Section IV. We now show that commonly used cryptosystems in e-voting fall into this class.

##### ElGamal in Class
The most common encryption scheme used in e-voting is ElGamal. Variants of ElGamal, such as the PPATC scheme from [64], also belong to this class. Below, we briefly recall the definition of ElGamal:

**Definition 3.** The ElGamal encryption scheme (in a Schnorr group) Σ is a tuple (Σ.KeyGen, Σ.Enc, Σ.Dec, Σ.KeyMatch) of probabilistic polynomial-time (PPT) algorithms, where:
- **Group Definition:** Let \( G \) be the group of \( k \)-th residues in \( \mathbb{Z}_p \) of prime order \( q \), where \( p = kq + 1 \) for some primes \( p, k, \) and \( q \). Let \( g \) denote a generator of \( G \).
- **Ciphertext and Randomness Spaces:** The ciphertext space \( C \) is the Cartesian product \( G \times G \), the randomness space \( R \) is the field \( \mathbb{Z}_q \), and the ciphertext space is a vector space with respect to the randomness space.
- **Message Space:** The message space \( M \) is \( G \).
- **Key Generation:** The KeyGen algorithm defines a set of public and secret key pairs \((PK, SK)\) from which one is uniformly selected: \((PK, SK) \leftarrow_r \Sigma.KeyGen() = (g^x, x \leftarrow_r \mathbb{Z}_q)\).
- **Encryption:** The Enc algorithm takes a public key \( PK \), a message \( m \in M \), and a random value \( r \in R \) and returns a ciphertext \( CT \in C \): \(\forall PK \in PK, \forall m \in M, \forall r \in R, CT \leftarrow \Sigma.Enc_{PK}(m, r) = (g^r, PK^r \cdot m)\).
- **Decryption:** The Dec algorithm takes a ciphertext \( CT = (c_1, c_2) \in C \) and a secret key \( SK \in SK \) and returns either a message \( m \in M \) or null \( \bot \): \(\forall CT \in C, \Sigma.Dec_{SK}(CT) \rightarrow c_2 / (c_1^{SK})\).

Basic ElGamal fits the definition of our (Terelius-Wikström compatible) encryption scheme. This allows us to get a verified implementation of the optimized Terelius-Wikström mix net, which is compatible with existing voting systems used in national elections. This is a significant step in gaining better confidence in the correctness of e-voting systems.

However, most national e-voting systems do not use basic ElGamal. Instead, they use variants like parallel ElGamal, where multiple ElGamal ciphertexts are shuffled in parallel, and Gjøsteen ElGamal, which achieves short ciphertexts for longer messages at the cost of longer keys. All these variants are provably Terelius-Wikström compatible encryption schemes.

We have proven in Coq that parallel ElGamal is a (Terelius-Wikström compatible) encryption scheme. The module (ExtendedElGamal) demonstrates this by taking the number of ciphertexts \( N \) to be shuffled in parallel as input.

### Applications to Verifying National Elections

Our work can be applied to verify national elections. We have proven that both ElGamal and parallel ElGamal fall into the defined class. We can now extract the mix net with the case of basic ElGamal into OCaml and use it to verify evidence produced by an election scheme built for binding government elections.

#### Extracted Verifier

In this section, we discuss the extracted verifier, specifically its differences from the verified objects, its efficiency, and the e-voting systems with which we have tested it.

**a) Differences between Verified Objects and Implementation:**
- **Coq Extraction Facility:** The Coq extraction facility is not itself verified to be correct. The required verified extraction facility, CertiCoq, is under development but not yet complete. For existing elections, it is highly unlikely that any flaws in the system align with those in the Coq extraction facility. However, once the extracted verifier is public, an adversary may try to exploit any flaws. Therefore, the current practice of using multiple independent verifiers should continue. The Coq proof of the verifier (before extraction) is still a machine-checked proof that a correct verifier exists, which is a significant improvement over the current state of the art.
- **Fiat-Shamir Transform:** The Fiat-Shamir transform is a one-line modification to the implementation. Proving the correctness of this transform is out of scope as it requires formalizing highly non-trivial cryptographic reasoning, specifically about rewinding in the random oracle model. We have checked that the verifier in our implementation is compatible with the proof transcripts produced by other implementations used in national elections.

**b) Efficiency:**
Efficiency is less critical for mix net verifiers compared to other areas of cryptography because the verifier is run irregularly. Our extracted verifier is lightweight, with the exception of group exponentiations. Using a 2048-bit Schnorr group, verifying an election of 10,000 ballots took 200 seconds. The bottleneck operation is parallelizable, and further optimizations, such as fixed base exponentiation, could be applied. Our results suggest that our verifier would check all proofs in under an hour on commodity hardware, even without further optimizations.

**c) Sanity Checks:**
We have tested our extracted verifier on a wide variety of invalid transcripts, and as expected, it rejected all of them. This is consistent with the soundness property we proved about the verifier.

#### Veriﬁcatum
Veriﬁcatum is the first complete and fully distributed verifiable mix net, considered the gold standard for implementations of verifiable mix nets. It has been used in national elections in Norway, Estonia, and Switzerland. We installed Veriﬁcatum on an Ubuntu virtual machine and generated various test proof transcripts using its demo functionality. We converted these transcripts to JSON files using the provided tool. There are several differences in notation and structure between Veriﬁcatum and our verifier, but the parser is not overly complicated. We successfully verified the transcripts from Veriﬁcatum using our verifier.

#### CHVote 2.0
CHVote 2.0 was developed by the state of Geneva in Switzerland. The system is similar to the SwissPost electronic voting system in user experience. After casting their vote, voters receive a confirmation code that should match the sheet they were sent. The system uses a verifiable mix net as part of the tally process. The mix net used in CHVote 2.0 is a direct implementation of the optimized Terelius-Wikström mix net, compatible with our verifier. We installed the CHVote 2.0 system locally and produced several demo election transcripts. We successfully verified the transcripts from CHVote 2.0 in our verifier.

#### Deploying the Verifier on Real Elections
We have not deployed the verifier on transcripts from real elections because countries using these systems do not make the transcripts publicly available, releasing them only to trusted auditors.

### Conclusion
Verifiable mix nets are crucial components in numerous applications, especially in electronic voting systems for governmental elections. Given the history of critical errors in e-voting, we must develop tools to provide greater confidence in the security of verifiable mix nets. We have contributed to this by using Coq to machine-check the security of the most commonly used verifiable mix net in secure e-voting and extracting an efficiently executable version of the verifier. We have demonstrated our verifier for two e-voting systems that have collectively handled millions of votes and been used in several national elections. The verifier is also applicable to a wide variety of additional electronic voting systems and other applications that rely on verifiable mix nets based on proofs of shuffle.

#### Future Work
Several directions for future work include:
- **Fiat-Shamir Transform:** Prove the Fiat-Shamir transform in Coq to remove the current limitation.
- **Commitment Scheme:** Ensure the commitment scheme is binding, which is necessary for the Terelius-Wikström mix net to work as a proof of shuffle. Generating these parameters is fairly straightforward.