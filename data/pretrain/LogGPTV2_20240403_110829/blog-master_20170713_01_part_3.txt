         0.092  insert into test4 values (:id2-9090, md5(random()::text), now()) on conflict (id) do update set info=excluded.info,crt_time=excluded.crt_time;  
         1.241  end;  
```    
性能对比报表如图：    
#### 1、TPS\QPS对比  
TPS     |只读   |只写   |读多写少       |读少写多    
---|---|---|---|---    
双节点(tps)     |1064671        |137264 |52182  |27419    
三节点(tps)     |1067570        |125433 |49386  |26489   
双节点(qps)     |1064671        |137264 |574002 |301609  
三节点(qps)     |1067570        |125433 |543246 |291379  
性能损耗        |-0.27%         |8.6%   |5.3%   |3.4%  
#### 2、平均响应时间  
平均响应时间    |只读   |只写   |读多写少       |读少写多    
---|---|---|---|---    
双节点(ms)      |0.060   |0.466  |1.226  |2.334    
三节点(ms)      |0.060  |0.510  |1.296  |2.416    
#### 3、响应抖动对比(方差)  
抖动主要和SSD的GC回收的管理机制，以及主备网络的稳定性有关。      
响应时间方差    |只读   |只写   |读多写少       |读少写多    
---|---|---|---|---    
双节点(ms)      |0.017  |7.586  |7.466  |22.840    
三节点(ms)      |0.029  |9.061  |9.677  |25.711    
#### 4、对比图  
1、TPS  
![pic](20170713_01_pic_007.jpg)   
2、QPS  
![pic](20170713_01_pic_008.jpg)    
3、事务响应时间  
![pic](20170713_01_pic_009.jpg)    
4、事务响应时间抖动（方差）  
抖动主要和SSD的GC回收的管理机制，以及主备网络的稳定性有关。  
![pic](20170713_01_pic_010.jpg)     
## 复制层面 - MySQL和PostgreSQL的差异    
复制机制决定了两种产品的差异。    
PostgreSQL，通过WAL的物理式复制同步备库。产生多少WAL就复制多少WAL，不需要等待事务结束才开始复制。因此备库与主库的WAL延迟与事务大小无关，仅仅与网络带宽和网络RT有关。每次事务结束时（不论事务大小），仅仅等待COMMIT RECORD ACK即可（commit record是固定大小的，非常小），所以不管事务多大，延迟都是等效的。    
MySQL，通过binlog进行复制同步备库。主库上没有结束的事务，binlog不会发给备库，因此备库的延迟和事务大小直接相关。事务越大(指产生影响的ROW越多的事务)，产生的BINLOG越多，事务提交的RT越高，延迟越严重。MySQL业务应尽量避免大事务。    
## 小结    
从测试结果不难发现，三节点与双节点的读性能几乎一致，而三节点写事务性能相比双节点略低一丁点(5%左右)，换来的是鱼与熊掌兼得(高可用和高可靠)。阿里云RDS(三节点版)已成为金融级用户的最佳选择。   
三节点的性能影响主要来自事务提交后，等待WAL或binlog发送给备库，收到ACK需要多久。PostgreSQL和MySQL的差异如上所述。    
经过以上测试，不同类型的场景，预期和实际测试效果一致。    
单节点的性能一定是最好的（因为不需要等待备库复制事务的WAL ACK），但是对于可用性和可靠性的测试意义不大。另一方面我们也能得到这样的推论。        
1、如果两节点为异步复制配置，那么性能应该和单节点相当。    
2、如果两节点为同步（带自动降级功能）复制配置，那么性能和三节点相当，这与测试完全相符，三节点和两节点的性能不相上下。    
### 1、只读事务    
只读事务，不管是几节点，性能是一样的。    
### 2、只写小事务    
只写的小事务，保护级别越高，RT就越高，RT在整个事务中的占比越高，性能影响就越大。    
### 3、读写混合事务（读多写少）    
读多写少的混合事务，保护级别越高，RT就越高，但RT在整个事务中的占比与事务本身的耗时有关，整个事务的时间越短，RT的性能影响就越明显。      
### 4、读写混合事务（读少写多）    
读少写多的混合事务，保护级别越高，RT就越高，但RT在整个事务中的占比与事务本身的耗时有关，整个事务的时间越短，RT的性能影响就越明显。      
## 系列文章        
[《阿里云RDS金融数据库(三节点版) - 背景篇》](../201707/20170709_02.md)      
[《阿里云RDS金融数据库(三节点版) - 理论篇》](../201707/20170710_01.md)      
[《阿里云RDS金融数据库(三节点版) - 性能篇》](../201707/20170713_01.md)        
[《阿里云RDS金融数据库(三节点版) - 案例篇》](../201707/20170723_01.md)        
## 阿里云RDS金融数据库(三节点版)      
[阿里云RDS金融数据库 - MySQL三节点版](https://help.aliyun.com/document_detail/51701.htm)          
阿里云RDS金融数据库 - PostgreSQL三节点版(敬请期待)          
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")