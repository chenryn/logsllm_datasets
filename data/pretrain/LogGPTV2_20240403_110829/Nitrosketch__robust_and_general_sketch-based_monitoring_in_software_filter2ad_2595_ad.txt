= E
Now, as hi is pairwise independent, we have that for any x′ ∈
U \ {x}: Pr[hi(x) = hi(x′)] = 1/w. We are now ready to prove the
lemma:
That is, the value of x’s counter, Ci,hi(x), is affected by all x′ ∈ U
such that hi(x) = hi(x′), and the contribution of each such x′ is
p−1 fi,x′дi(x′).
pendent, we have that E(cid:2)Ci,hi(x) · дi(x)(cid:3) =
Next, notice that since E[дi(x′)] = 0 and as дi is two-way inde-
x′∈U:hi(x′)=hi(x) E(cid:2)fi,x′ · дi(x′) · дi(x)(cid:3) = p−1E[fi,x] = fx .
p−1
Var(cid:2)Ci,hi(x)дi(x) − p−1fi,x
(cid:3) = E(cid:2)(Ci,hi(x)дi(x) − p−1fi,x)2(cid:3)
= E(cid:2)(Ci,hi(x)дi(x))2 − 2p−1Ci,hi(x)дi(x)fi,x + p−2f 2
(cid:3)
(cid:34)(cid:169)(cid:173)(cid:171)p−1

fi,x′дi(x′)дi(x)(cid:170)(cid:174)(cid:172)2
− 2p−1(cid:169)(cid:173)(cid:171)p−1
fi,x′дi(x′)дi(x)fi,x(cid:170)(cid:174)(cid:172) + p−2f 2
(cid:169)(cid:173)(cid:171)
i,x′(cid:170)(cid:174)(cid:172) − f 2
 ≤ p−2E[L2
2,i]/w ≤ 2p−1L2


x′∈U\{x}|hi(x)=hi(x′)
□
where the last inequality is correct per Lemma 3.
We denote A ≡ Ci,hi(x)дi(x) and B ≡ p−1 fi,x (note that since
Var[fi,x] = fxp(1−p), Var[B] = fxp−1(1−p)). Our goal is to bound
the variance of A and use Chebyshev’s inequality.
x′∈U|hi(x)=hi(x′)
x′∈U|hi(x)=hi(x′)
x′∈U|hi(x)=hi(x′)

= p−2E
= p−2E
2/w,
f 2
i,x′
(cid:35)
f 2
i,x
i,x
i,x
A − B =(cid:169)(cid:173)(cid:171)p−1

x′∈U|hi(x)=hi(x′)
= p−1
fi,x′дi(x′)дi(x)(cid:170)(cid:174)(cid:172) − p−1fi,x

x′∈U\{x}|hi(x)=hi(x′)
fi,x′дi(x′)дi(x).
Notice that A − B (the change caused by all flows but x) is indepen-
dent from B (just flow x), and thus:
−1.
≤ p
−1L2
−2E[L2
2,i]/w + fxp
−1(1 − p) ≤ 2p
frequency provided by the i’th row. Then according to Chebyshev’s
VAR[A] = VAR[(A − B) + B] = VAR[A − B] + VAR[B]
2/w + fxp
We denote byfx(i) ≜ A = Ci,hi(x)дi(x) the estimation for x’s
inequality (where σ(A) =(cid:112)Var[A]):
(cid:104)(cid:12)(cid:12)(cid:12)fx(i) − fx
= Pr(cid:2)|Ci,hi(x)дi(x) − E(cid:2)Ci,hi(x)дi(x)(cid:3) | ≥ ϵ L2(cid:3)
|A − E[A] | ≥
= Pr[|A − E[A] | ≥ ϵ L2] ≤ Pr
(cid:12)(cid:12)(cid:12) ≥ ϵ L2
σ(A) · ϵ L2
(cid:105)
(cid:113)
2p−1L2
p(ϵ L2)2 ≤ 2/w
fx
2/w + fx p−1
pϵ 2 + 1
pϵ 2L2
2/w + fx p−1
(ϵ L2)2
2/w + fx
2L2
p(ϵ L2)2
= 2/w
pϵ 2 +
=
.
We want a constant probability of the error exceeding ϵL2 in each
row, so that the median of the rows will be correct with probability
1 − δ. Therefore, by demanding L2 ≥ 8p−1ϵ−2 and w ≥ 8p−1ϵ−2 we
get that the error probability is
(cid:104)(cid:12)(cid:12)(cid:12)(cid:100)fx,i − fx
(cid:12)(cid:12)(cid:12) ≥ ϵL2
(cid:105) ≤ 2/w
pϵ2 +
Pr
Pr
≤ 2p−1L2
Z. Liu et al.
estimate, (cid:98)fx = mediani∈{1, ...d }fx(i), is correct with a probability
As the d = O(log δ−1) rows are independent, the algorithm’s
of at least 1 − δ using a standard Chernoff bound. Specifically, we
□
showed the correctness of Theorem 2.
The formal proof of Theorem 5 is deferred to Appendix A.
THEOREM 5. Let w = 11ϵ−2p−1 and d = O(log δ−1); AlwaysCor-
rect NitroSketch guarantees:
(cid:104)|(cid:98)fx − fx | > ϵL2
(cid:105)
Pr
 7.6× faster) and better accu-
racy once converged when compared to SketchVisor [43], and (e)
is more accurate and requires less memory than NetFlow [21] and
sFlow [71].
Testbed. We evaluate NitroSketch on a set of 4 commodity servers
running Ubuntu 16.04.03, each of which has an Intel Xeon E5-2620
v4 PI:EMAIL, 128GB DDR4 2400Mhz memory, two Broadcom
BCM5720 1GbE NICs, and an Intel XL710 Ethernet NIC with
two 40-Gigabit ports. Our testbed has three hosts as the data plane
directly connected through 40Gbps links. The control is connected
through a 1Gbps link. Each virtual switch is configured with two
forwarding rules for bidirectional packet forwarding.
Workloads. We use four types of workloads: (a) CAIDA: 10 one-
hour public CAIDA traces from 2016 [14] and 2018 [15] each con-
taining 1 to 1.9 billion packets; (b) Min-sized: simulated traffic with
min-sized packets for stress testing; (c) Data center: data center
traces UNI1 and UNI2 from [11]; (d) Cyber attack: DDoS attack
traces from [58]. The average packet sizes in the CAIDA, Cyber
attack, and data center traces are 714, 272, and 747 bytes respec-
tively. To minimize confounding effects of overheads, we modify the
MAC addresses of packets to avoid cache misses on the Exact-Match
Cache of OVS-DPDK. We use MoonGen [31] to replay traces and
to generate random 64B packets.
Sketches and metrics. We evaluate NitroSketch with four popular
sketches Count-Min Sketch [27], Count-Sketch [17], UnivMon [55],
and K-ary Sketch [51]. We use 5-tuple as the flow key and consider
the following performance metrics:
• Throughput: in gigabits per second (Gbps) of traffic.
• Packet Rate: Millions of transmitted packets per second (Mpps).
For 64B packets, 10Gbps throughput is equivalent to 14.88Mpps,
and 40Gbps equals to 59.53Mpps.
• CPU Utilization: percentage of the CPU time spent on each
module/function, measured by Intel VTune Amplifier [46].
• Accuracy: the accuracy of three measurement tasks: Heavy Hitter
(HH), Change Detection (Change), and Entropy Estimation (En-
tropy). For HH and Change, we set a threshold 0.05% and estimate
the mean relative errors on the detected heavy flows. We report
relative error= |t−tr eal |
, where tr eal is the ground truth of a task
tr eal
and t is the measured value. For each data point, we run 10 times
independently and report the median and the standard deviation.
Also, the recall rate is defined as the ratio of true instances found.
Parameters. By default, we select parameters based on a 5% accu-
racy guarantee. Note that this is a theoretical guarantee for parameter
selection purposes and NitroSketch achieves higher fidelity in prac-
tice (e.g., < 1% errors). For throughput evaluation, we set a fixed
p = 0.01 geometric sampling rate for NitroSketch and allocate the
memory based on the precision guarantee. We evaluate four sketches
in NitroSketch. (a) UnivMon: we allocate 4MB, 2MB, 1MB, 500KB
for the first HH sketches, and 250KB for the rest of sketches. (b)
Count-Min: we use 200KB memory for 5 rows of 10000 counters.
(c) Count Sketch: we allocate 2MB for 5 rows of 102400 counters.
(d) K-ary Sketch: we utilize 2MB for 10 rows of 51200 counters.
7.1 Throughput
Throughput with AIO version. We evaluate the throughput of the
all-in-one version in Figure 8(a) with 1h CAIDA traces and 1h
datacenter traces (looped). All original sketches implemented with