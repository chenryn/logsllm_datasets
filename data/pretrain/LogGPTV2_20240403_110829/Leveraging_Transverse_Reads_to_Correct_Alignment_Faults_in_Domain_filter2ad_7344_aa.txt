title:Leveraging Transverse Reads to Correct Alignment Faults in Domain
Wall Memories
author:S&apos;ebastien Ollivier and
Donald Kline Jr. and
Kawsher A. Roxy and
Rami G. Melhem and
Sanjukta Bhanja and
Alex K. Jones
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Leveraging Transverse Reads to Correct Alignment
Faults in Domain Wall Memories
S´ebastien Ollivier1, Donald Kline Jr.1, Roxy Kawsher2, Rami Melhem1, Sanjukta Banja2, and Alex K. Jones1
1University of Pittsburgh, Email: {sbo15@, dek61@, melhem@cs., akjones@}pitt.edu
2University of South Florida, Email: {kawsher@mail., bhanja@}usf.edu
Abstract—Spintronic domain wall memories (DWMs) are
prone to alignment faults, which cannot be protected by tra-
ditional error correction techniques. To solve this problem, we
propose a new technique called derived error correction coding
(DECC). We construct metadata from the data and shift state of
the DWM, on demand, using a novel transverse read (TR). TR
reads in an orthogonal direction to the DWM access point and can
determine the number of ones in a DWM. Errors in the metadata
correspond to shift-faults in the DWM. Rather than storing the
metadata, it is created on-demand and protected by storing parity
bits. Repairing the metadata with ECC allows restoration of
DWM alignment and ensures correct operation. Through these
techniques, our shift-aware error correction approaches provide
a lifetime of over 15 years with a similar performance, while
reducing area and energy by 370% and 52%, versus the state-
of-the-art, for a 32-bit nanowire.
I. INTRODUCTION
Spin-transfer torque magnetic memory (STT-MRAM) has
received considerable attention as a potential replacement for
SRAM due to its near SRAM performance, its advantages in
static power along with good endurance [1]. The revenue for
this technology is projected to reach $3.3 billion by 2028 [2].
Unfortunately, STT-MRAM cannot reach a sufﬁcient density
to be competitive for main memory or secondary storage
applications. Spintronic domain-wall memory (DWM)—also
referred to as “Racetrack” memory—recently proposed and
demonstrated by IBM [3], is a promising candidate to over-
come density limitations while retaining the static energy
beneﬁts of STT-MRAM.
DWM is constructed from ferromagentic nanowires—also
referred to as “tapes” or “racetracks”—separated into domains
and connected to a single (or possibly a few) access transis-
tor(s) to create access ports, much like STT-MRAM. DWM
conserves the advantages of STT-MRAM while increasing the
storage density by up to 10× [4] and has a theoretical area
per data bit as small as 2F 2 [5], where F is the technology
feature size. Data access is obtained by shifting the magnetic
domains along the nanowire and aligning the target domain
to an access device. After alignment, data access is identi-
cal to STT-MRAM. DWM demonstrations of memory array
structures [6] and content addressable memories (CAMs) [7]
∗This work was supported by US NSF GRFP grant No. 1747452, NSF
grant No. 1619027, and SHREC industry and agency members and by the
IUCRC Program of the NSF (Grant No. CNS-1738783)
show fabrication feasibility with great potential for density,
performance, and power consumption.
As a result, DWM has been proposed for structures where
non-uniform access is tolerated, such as NUCA caches [8].
By leveraging shift-based writing [9], racetrack writes become
competitive with SRAM, eliminating a drawback of STT-
MRAM for caches near the core (e.g. L1), due to their
relatively large incidence of unﬁltered writes. Solutions have
also been demonstrated to apply dedicated DWM memory
structures in private L1 caches where timing predictability is
crucial to maintain pipeline integrity and non-uniform access
behavior is problematic [10].
Unfortunately, due to process variation of deeply-scaled
domain-wall memories [3], slight ﬂuctuations in current com-
bined with imperfections in the nanowires can cause faults in
the shift process. These faults include over-shifting, under-
shifting, and pinning where only part of the tape shifts.
While all of these faults, especially pinning, may become less
frequent as the fabrication process matures, recent modeling
has demonstrated that the current error rates of under-shifting
and over-shifting is signiﬁcant [11]. Thus, for domain-wall
memory to become viable, the shifting reliability must be
addressed. In this work we will focus on addressing position
faults, i.e., faults that cause the entire racetrack to over-shift or
under-shift by one or several domains. A position fault means
that data read from the racetrack corresponds to the incorrect
position and that writing to this location will
incorrectly
overwrite data in an unintended location and fail to update the
appropriate data location. Position faults must be detected and
corrected to make domain-wall memory technology viable.
In memory structures created from domain-wall memories,
multiple racetracks are used to create a memory block. These
racetracks are accessed in parallel and can be shifted to-
gether [12]. It is possible to allocate additional racetracks
to store parity information such that error correction codes
(ECC) can be used to correct the data that is read when
one racetrack is misaligned from the others. Unfortunately,
the use of ECC in this fashion is insufﬁcient to determine
when a misalignment has occurred and how to correct the
misalignment. Assuming no other types of faults, ECC will
discover the misalignment only when it reads data that differs
from the correct data, which will not occur if data stored
in the correct and misaligned position are the same. More-
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00047
375
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:28 UTC from IEEE Xplore.  Restrictions apply. 
the data differs provides no insight
over, discovering that
into how the racetrack is misaligned. As a result, several
innovative approaches have been developed to detect and
correct position faults in racetracks [11]. Unfortunately, these
algorithms considerably degrade the intrinsic advantages of
racetracks to minimize the impact of the shifting errors by
either degrading the performance or by minimizing the density
advantage through increasing the required number of domains
and/or increasing the number of read/write heads.
Fundamentally, knowledge about alignment requires infor-
mation about positioning along the nanowire, while traditional
ECC to protect the data provides insight only into data that
is orthogonal to each racetrack. In this paper, we propose
transverse error correction coding (TECC). TECC ﬁrst creates
a signature from information constructed by accessing data
along the nanowire using a new access method called a
transverse read. The transverse read reports the number of
ones stored between two points along the nanowire, starting
and ending at an access port or an end of the nanowire.
Using a speciﬁc encoding of the padding domains in the
racetrack—the domains required to allow shifting for access
point alignment—our signature can be used to report and
correct misalignment faults of the nanowire. Unfortunately, it
is inefﬁcient to store the signature of each nanowire directly.
Instead, a new concept called derived error correction coding
(DECC) creates the signature on demand and stores only parity
bits that can identify errors in the signature, and thus faults
in the alignment of the racetracks. Applying these two new
concepts to a memory constructed from DWMs guarantees the
correction of a single racetrack by any amount of misalignment
or a maximum of three racetracks misaligned by one domain.
In addition to its reliability it can decrease the area overhead
and energy consumption over the state-of-the-art approaches.
In particular, we provide the following contributions:
• We propose transverse reads, a new method to access a
domain-wall nanowire along the length of the nanowire
to determine the number of ones contained therein, sup-
ported by device level simulations.
• We demonstrate a novel encoding of the padding bits
along with transverse reads (TECC) to correct arbitrary
shift faults in a single racetrack.
• We present derived error correction coding, a novel
technique to protect data created on-demand by storing
only the ECC parity bits required to protect the data.
• We provide a detailed analysis of derived error correc-
tion coding with novel encoding padding in racetrack
memories compared to the state-of-the-art approach.
In particular, our DECC approach signiﬁcantly improves
over the fault tolerance methods proposed in HIFI [11]. Our
performance and energy consumption match and improve
upon the high performance mode of HIFI (p-ECC) while
providing signiﬁcantly better area than the high-density lower
performance mode of HIFI (p-ECC-O). In particular, for a
group of 512 nanowires, DECC is 2.56× and 3.72× smaller
than p-ECC and 1.83× and 1.55× smaller than p-ECC-O, for
376
Figure 1: Anatomy of a DWM nanowire.
nanowires of length 16 and 32, respectively.
The remainder of this paper is organized as follows. In
Section II, we present more detail on racetrack memory, its
shifting challenges and the current state-of-the-art solution for
misalignment fault tolerance, HIFI. Next, Section III discusses
our novel transverse read, which enables ones-counting in a
nanowire. Section IV demonstrates how TECC can correct
alignment faults in a single nanowire using transverse reads,
while Section V presents DECC, which efﬁciently expands the
TECC correction capability to a group of nanowires. Following
this, in Section VI we discuss the reliability, area, performance,
and power results of DECC. We also discuss relevant related
work for protecting against DWM pinning and misalignment
in Section VII. Finally, we relate conclusions in Section VIII.
II. PRELIMINARIES
In this section, we present basic information about racetrack
memory as well as a short description of the leading algorithm
developed to resolve the shifting errors, HIFI [11].
A. Racetrack memory
DWM is fundamentally constructed from blocks made up
of many nanowires [3, 8, 13]. Each nanowire is composed
of domains separated by domain walls. An example of a
DWM nanowire is shown in Figure 1. The value of a domain
is determined by its polarization as shown in the ﬁgure by
the direction of the arrow. Like STT-MRAM, DWM is a
spintronic memory. When the domain aligned with the ﬁxed
layer (shown in dark blue) of the access port is being read,
if its polarization is in the same direction as the ﬁxed layer
(aligned) the resistance will be lower than if they are in
opposite directions (antiparallel) like in STT-MRAM. Access
ports (read and/or write locations) are ﬁxed elements. Thus, a
domain needs to be shifted and aligned with the access port
(i.e., tape “head”) to be read or written. Depending on the
shifting direction required, a pulse is sent along the nanowire.
Extra “padding” domains (shown in gray) are required on each
side of the data domains to prevent data loss while shifting to
an extremity.
Once a domain is aligned with the head, an orthogonal cur-
rent to the nanowire traversing the access port ﬁxed layer can
be used to read or write the domain. Typically the write current
is much larger (often an order of magnitude higher) than the
reading current. Shifting has also been proposed to accelerate
and reduce the energy of writing compared to a current-based
write [9]. This is shown in Figure 1 in the read/write port
by placing ﬁxed domains of opposing polarizations in-plane
but orthogonal to the nanowire. By shifting into or out of the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:28 UTC from IEEE Xplore.  Restrictions apply. 
Overhead Region
Main Data 
Overhead Region
SECDED
(a)
(b)
Cache 
line
size
Figure 2: Block of nanowires.
ﬁgure, this polarization can be written into the aligned domain.
This can improve both the speed and energy of writing at the
cost of more complex fabrication and layout.
DWM technology has been proposed for utilization in a
variety of positions in the memory hierarchy, including in
network-on-chips [14], as part of the cache hierarchy repre-
senting the last-level cache [8] and multiple cache levels [10],
in GPGPU registers [15] and caches [16], and as a fast
main-memory technology [17]. These memories use traditional
hierarchical memory design approaches often organizing it
into ranks, banks, sub-banks, arrays, etc. Because a block of
nanowires holds multiple rows/words of data with a width
determined by the number of nanowires in a block, we can
consider the block of nanowires as a sub-array. Thus, data
accessed from the memory can directly select the appropriate
sub-array in the peripheral circuitry, but to access the actual
row/word requires shifting the sub-array for correct alignment.
An example memory sub-array for a cache similar to
TapeCache [8] is shown in Figure 2. In the ﬁgure, data
domains are shown in blue and the padding domains are
shown in gray with the domains on the left highlighted in
purple and those on the right in beige. Within the sub-array,
all nanowires receive a shifting pulse at the same time to allow
the system to read/write a data block (e.g., memory row or
cache line) simultaneously. To access the rightmost data, the
data is shifted to the left, popping the purple padding domains
off the nanowire, similarly popping the beige domains to read
the leftmost data.
B. Shifting Faults
While grouping the DWM nanowires into a sub-array and
shifting them together, one (or more) of them can experience
an over or under-shift position fault. The probabilities of a
shift fault are given in Table I [11]. The probability of a
fault increases superlinearly as the system attempts to shift by
multiple positions in a single shifting current pulse, noted as
Table I: Shift error probabilities [11].
±k Step Error Rate
k=2
k=1
Shifting
Distance
1
2
3
4
5
6
7
4.55·10−5
9.95·10−5
2.07·10−4
3.76·10−4
5.94·10−4
8.43·10−4
1.10·10−3
1.37·10−21
1.19·10−20
5.59·10−20
1.80·10−19
4.47·10−19
9.96·10−18
7.57·10−15
Read and write head
Read head
Figure 3: HIFI fault correction (a) p-ECC (b) p-ECC-O [11]. Data
bits shown in white with dashed line bounding box. Padding bits
shown in gray. Additional encoding bits for p-ECC shown in white.
Note p-ECC-O uses padding bits to store encoding bits.
shifting distance. For example, a nanowire is more than twice
as likely to experience a shift fault if shifting by two positions
in one pulse compared to shifting by one position. It is also
important to note that misalignment by one (k = 1) has a high
fault rate while misalignment by two (k = 2) is very small and
larger misalignment, i.e., k≥ 3, is essentially negligible. Thus,
a technique for protecting the system against position faults
can be tuned to mainly focus on single position misalignments
per shift. Also, as noted in Section I, if a shifting fault does
occur, the data read may not produce a data error and the
misalignment could go undetected while accumulating many
undetected alignment faults. Hence, it is critical to detect and
correct a misalignment as soon as it appears.
Previous work proposed to use encoding along with addi-
tional read heads on each nanowire to determine and correct
alignment [11] which we discuss in detail in the next section.
C. HIFI: p-ECC and p-ECC-O
Several techniques were developed in HIFI [11] in order to
provide superior correction to ECC for domain-wall memory
shift errors. Two HIFI techniques, p-ECC and p-ECC-O,
determine and correct racetrack position errors at the expense
of adding read/write heads and domains on either side of the
tapes. These access ports are coupled with particular encoding
techniques that allow detection and, in some cases, correction
when a misalignment has occurred.
Figure 3 shows the HIFI organizations for fault
toler-
ance with single error correction and double error detection
(SECDED). SECDED HIFI corrects errors by using an encod-
ing in “auxiliary” domains in a pattern of alternating groups of
two 1’s and two 0’s. Using the two adjacent read heads, the
system can compare two values from the auxiliary bits and
compare it against the expected system state. For example, if
the system was expecting to read “00” but rather read “01” the