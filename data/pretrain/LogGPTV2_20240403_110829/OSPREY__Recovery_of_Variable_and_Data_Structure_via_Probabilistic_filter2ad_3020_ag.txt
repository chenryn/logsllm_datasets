ings of the ACM on Programming Languages, vol. 3, no. OOPSLA, pp.
1–31, 2019.
[16] G. Balakrishnan and T. Reps, “Wysinwyx: What you see is not what you
execute,” ACM Transactions on Programming Languages and Systems
(TOPLAS), vol. 32, no. 6, pp. 1–84, 2010.
[17] “Nationalsecurityagency/ghidra,”
https://github.com/
NationalSecurityAgency/ghidra/blob/master/Ghidra/Features/
Decompiler/ghidra scripts/CreateStructure.java#L25, 2019.
[18] E. De Cristofaro, J.-M. Bohli, and D. Westhoff, “Fair: fuzzy-based
aggregation providing in-network resilience for real-time wireless sensor
networks,” in Proceedings of the second ACM conference on Wireless
network security, 2009, pp. 253–260.
[19] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos,
“Vuzzer: Application-aware evolutionary fuzzing.” in NDSS, vol. 17,
2017, pp. 1–14.
[20] H. Peng, Y. Shoshitaishvili, and M. Payer, “T-fuzz: fuzzing by program
transformation,” in 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 2018, pp. 697–710.
[21] “American fuzzy lop (aﬂ),” http://lcamtuf.coredump.cx/aﬂ, 2020.
[22] D. She, K. Pei, D. Epstein, J. Yang, B. Ray, and S. Jana, “NEUZZ:
efﬁcient fuzzing with neural program smoothing,” in 2019 IEEE Sym-
posium on Security and Privacy, SP 2019, San Francisco, CA, USA,
May 19-23, 2019, 2019, pp. 803–817.
[23] C. Cadar, D. Dunbar, and D. R. Engler, “KLEE: unassisted and auto-
matic generation of high-coverage tests for complex systems programs,”
in 8th USENIX Symposium on Operating Systems Design and Implemen-
tation, OSDI 2008, December 8-10, 2008, San Diego, California, USA,
Proceedings, 2008, pp. 209–224.
[24] X. Ge, K. Taneja, T. Xie, and N. Tillmann, “Dyta: dynamic symbolic
execution guided with static veriﬁcation results,” in Proceedings of the
33rd International Conference on Software Engineering, ICSE 2011,
Waikiki, Honolulu , HI, USA, May 21-28, 2011, R. N. Taylor, H. C.
Gall, and N. Medvidovic, Eds. ACM, 2011, pp. 992–994.
[25] J. Chen, W. Hu, L. Zhang, D. Hao, S. Khurshid, and L. Zhang,
“Learning to accelerate symbolic execution via code transformation,” in
32nd European Conference on Object-Oriented Programming, ECOOP
2018, July 16-21, 2018, Amsterdam, The Netherlands, ser. LIPIcs, T. D.
Millstein, Ed., vol. 109.
Schloss Dagstuhl - Leibniz-Zentrum fuer
Informatik, 2018, pp. 6:1–6:27.
[26] S. Person, G. Yang, N. Rungta, and S. Khurshid, “Directed incremental
symbolic execution,” in Acm Sigplan Notices, vol. 46, no. 6. ACM,
2011, pp. 504–515.
[27] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: a platform for in-
vivo multi-path analysis of software systems,” in Proceedings of the 16th
International Conference on Architectural Support for Programming
Languages and Operating Systems, ASPLOS 2011, Newport Beach, CA,
USA, March 5-11, 2011, 2011, pp. 265–278.
[28] B. Livshits, A. V. Nori, S. K. Rajamani, and A. Banerjee, “Merlin:
speciﬁcation inference for explicit information ﬂow problems,” ACM
Sigplan Notices, vol. 44, no. 6, pp. 75–86, 2009.
[29] K. Miller, Y. Kwon, Y. Sun, Z. Zhang, X. Zhang, and Z. Lin, “Proba-
bilistic disassembly,” in 2019 IEEE/ACM 41st International Conference
on Software Engineering (ICSE).
IEEE, 2019, pp. 1187–1198.
[30] M. A. B. Khadra, D. Stoffel, and W. Kunz, “Speculative disassembly of
binary code,” in 2016 International Conference on Compliers, Architec-
tures, and Sythesis of Embedded Systems (CASES).
IEEE, 2016, pp.
1–10.
[31] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna, “Static disassembly
of obfuscated binaries,” in USENIX security Symposium, vol. 13, 2004,
pp. 18–18.
[32] M. Popa, “Binary code disassembly for reverse engineering,” Journal of
Mobile, Embedded and Distributed Systems, vol. 4, no. 4, pp. 233–248,
2012.
{USENIX} Security Symposium ({USENIX} Security 20), 2020.
[33] A. Flores-Montoya and E. Schulte, “Datalog disassembly,” in 29th
[34] H.-A. Loeliger, J. Dauwels, J. Hu, S. Korl, L. Ping, and F. R. Kschis-
chang, “The factor graph approach to model-based signal processing,”
Proceedings of the IEEE, vol. 95, no. 6, pp. 1295–1322, 2007.
[35] N. E. Beckman and A. V. Nori, “Probabilistic, modular and scalable
inference of typestate speciﬁcations,” in Proceedings of the 32nd ACM
SIGPLAN conference on Programming language design and implemen-
tation, 2011, pp. 211–221.
[36] Z. Xu, X. Zhang, L. Chen, K. Pei, and B. Xu, “Python probabilistic
type inference with natural language support,” in Proceedings of the
2016 24th ACM SIGSOFT International Symposium on Foundations of
Software Engineering, 2016, pp. 607–618.
[37] T. Kremenek, P. Twohey, G. Back, A. Ng, and D. Engler, “From
uncertainty to belief: Inferring the speciﬁcation within,” in Proceedings
of the 7th symposium on Operating systems design and implementation,
2006, pp. 161–176.
[38] J. S. Yedidia, W. T. Freeman, and Y. Weiss, “Generalized belief
propagation,” in Advances in neural information processing systems,
2001, pp. 689–695.
[39] P. F. Felzenszwalb and D. P. Huttenlocher, “Efﬁcient belief propagation
for early vision,” International journal of computer vision, vol. 70, no. 1,
pp. 41–54, 2006.
[40] K. Murphy, Y. Weiss, and M. I. Jordan, “Loopy belief propaga-
tion for approximate inference: An empirical study,” arXiv preprint
arXiv:1301.6725, 2013.
[41] D. Kahle, T. Savitsky, S. Schnelle, and V. Cevher, “Junction tree
algorithm,” Stat, vol. 631, 2008.
[42] “Coreutils,” https://www.gnu.org/software/coreutils/, 2019.
[43] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “Bap: A binary
analysis platform,” in International Conference on Computer Aided
Veriﬁcation. Springer, 2011, pp. 463–469.
[44] D. Andriesse, X. Chen, V. Van Der Veen, A. Slowinska, and H. Bos,
“An in-depth analysis of disassembly on full-scale x86/x64 binaries,”
in 25th {USENIX} Security Symposium ({USENIX} Security 16), 2016,
pp. 583–600.
[45] “Osprey,”
https://www.cs.purdue.edu/homes/zhan3299/proj/osprey,
2020.
[46] “F1 score,” https://en.wikipedia.org/wiki/F1 score, 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
826
[47] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “Address-
sanitizer: A fast address sanity checker,” in Presented as part of the
2012 {USENIX} Annual Technical Conference ({USENIX}{ATC} 12),
2012, pp. 309–318.
[48] S. Dinesh, “Retrowrite: Statically instrumenting cots binaries for fuzzing
and sanitization,” Ph.D. dissertation, Purdue University Graduate School,
2019.
[49] “Nvd
https://nvd.nist.gov/vuln/detail/
cve-2019-12802,”
-
CVE-2019-12802, 2019.
[50] J. Lee, T. Avgerinos, and D. Brumley, “TIE: principled reverse engi-
neering of types in binary programs,” in Proceedings of the Network
and Distributed System Security Symposium, NDSS 2011, San Diego,
California, USA, 6th February - 9th February 2011, 2011.
[51] B. D. Sutter, B. D. Bus, K. D. Bosschere, P. Keyngnaert, and B. Demoen,
“On the static analysis of indirect control transfers in binaries,” in
Proceedings of the International Conference on Parallel and Distributed
Processing Techniques and Applications, PDPTA 2000, June 24-29,
2000, Las Vegas, Nevada, USA, 2000.
[52] H. Theiling, “Extracting safe and precise control ﬂow from binaries,” in
7th International Workshop on Real-Time Computing and Applications
Symposium (RTCSA 2000), 12-14 December 2000, Cheju Island, South
Korea, 2000, pp. 23–30.
[53] A. Slowinska, T. Stancescu, and H. Bos, “Howard: A dynamic excavator
for reverse engineering data structures,” in Proceedings of the Network
and Distributed System Security Symposium, NDSS 2011, San Diego,
California, USA, 6th February - 9th February 2011, 2011.
[54] C. Kolbitsch, T. Holz, C. Kruegel, and E. Kirda, “Inspector gadget:
Automated extraction of proprietary gadgets from malware binaries,” in
31st IEEE Symposium on Security and Privacy, S&P 2010, 16-19 May
2010, Berleley/Oakland, California, USA, 2010, pp. 29–44.
[55] M. H. Nguyen, T. B. Nguyen, T. T. Quan, and M. Ogawa, “A hy-
brid approach for control ﬂow graph construction from binary code,”
in 20th Asia-Paciﬁc Software Engineering Conference, APSEC 2013,
Ratchathewi, Bangkok, Thailand, December 2-5, 2013 - Volume 2, 2013,
pp. 159–164.
[56] W. He, M. Golla, R. Padhi, J. Ofek, M. D¨urmuth, E. Fernandes, and
B. Ur, “Rethinking access control and authentication for the home inter-
net of things (iot),” in 27th {USENIX} Security Symposium ({USENIX}
Security 18), 2018, pp. 255–272.
[57] E. Gustafson, M. Muench, C. Spensky, N. Redini, A. Machiry, Y. Fratan-
tonio, D. Balzarotti, A. Francillon, Y. R. Choe, C. Kruegel et al.,
“Toward the analysis of embedded ﬁrmware through automated re-
hosting,” in 22nd International Symposium on Research in Attacks,
Intrusions and Defenses ({RAID} 2019), 2019, pp. 135–150.
[58] G. Hernandez, F. Fowze, D. Tian, T. Yavuz, and K. R. Butler, “Fir-
musb: Vetting usb device ﬁrmware using domain informed symbolic
execution,” in Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security, 2017, pp. 2245–2262.
[59] K. Jansen, M. Sch¨afer, D. Moser, V. Lenders, C. P¨opper, and J. Schmitt,
“Crowd-gps-sec: Leveraging crowdsourcing to detect and localize gps
spooﬁng attacks,” in 2018 IEEE Symposium on Security and Privacy
(SP).
IEEE, 2018, pp. 1018–1031.
[60] D. Freed, S. Havron, E. Tseng, A. Gallardo, R. Chatterjee, T. Ristenpart,
and N. Dell, “” is my phone hacked?” analyzing clinical computer
security interventions with survivors of intimate partner violence,”
Proceedings of the ACM on Human-Computer Interaction, vol. 3, no.
CSCW, pp. 1–24, 2019.
[61] H. Cho, P. Zhang, D. Kim, J. Park, C.-H. Lee, Z. Zhao, A. Doup´e,
and G.-J. Ahn, “Prime+Count: Novel Cross-world Covert Channels on
ARM TrustZone,” in Proceedings of the Annual Computer Security
Applications Conference (ACSAC), Dec. 2018.
[62] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher et al., “Spectre attacks: Exploit-
ing speculative execution,” in 2019 IEEE Symposium on Security and
Privacy (SP).
IEEE, 2019, pp. 1–19.
[63] A. Reina, A. Fattori, F. Pagani, L. Cavallaro, and D. Bruschi, “When
hardware meets software: A bulletproof solution to forensic memory
acquisition,” in Proceedings of
the 28th annual computer security
applications conference, 2012, pp. 79–88.
[64] M. Schwarz and A. Fogh, “Drama: How your dram becomes a security
problem,” 2016.
[65] L. Demetrio, B. Biggio, G. Lagorio, F. Roli, and A. Armando, “Explain-
ing vulnerabilities of deep learning to adversarial malware binaries,”
arXiv preprint arXiv:1901.03583, 2019.
[66] M. Schwarz, D. Gruss, M. Lipp, C. Maurice, T. Schuster, A. Fogh,
and S. Mangard, “Automated detection, exploitation, and elimination of
double-fetch bugs using modern cpu features,” in Proceedings of the
2018 on Asia Conference on Computer and Communications Security,
2018, pp. 587–600.
[67] H. Lee, C. Song, and B. B. Kang, “Lord of the x86 rings: A portable
user mode privilege separation architecture on x86,” in Proceedings of
the 2018 ACM SIGSAC Conference on Computer and Communications
Security, 2018, pp. 1441–1454.
[68] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos,
“An in-depth analysis of disassembly on full-scale x86/x64 binaries,”
in 25th USENIX Security Symposium, USENIX Security 16, Austin, TX,
USA, August 10-12, 2016, 2016, pp. 583–600.
[69] J. Geldenhuys, M. B. Dwyer, and W. Visser, “Probabilistic symbolic
execution,” in International Symposium on Software Testing and Anal-
ysis, ISSTA 2012, Minneapolis, MN, USA, July 15-20, 2012, 2012, pp.
166–176.
[70] M. Borges, A. Filieri, M. d’Amorim, and C. S. Pasareanu, “Iterative
distribution-aware sampling for probabilistic symbolic execution,” in
Proceedings of the 2015 10th Joint Meeting on Foundations of Software
Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September
4, 2015, 2015, pp. 866–877.
[71] M. Z. Kwiatkowska, G. Norman, and D. Parker, “PRISM 4.0: Veriﬁca-
tion of probabilistic real-time systems,” in Computer Aided Veriﬁcation
- 23rd International Conference, CAV 2011, Snowbird, UT, USA, July
14-20, 2011. Proceedings, 2011, pp. 585–591.
[72] A. Filieri, C. Ghezzi, and G. Tamburrelli, “Run-time efﬁcient prob-
abilistic model checking,” in Proceedings of
the 33rd International
Conference on Software Engineering, ICSE 2011, Waikiki, Honolulu ,
HI, USA, May 21-28, 2011, 2011, pp. 341–350.
[73] A. F. Donaldson, A. Miller, and D. Parker, “Language-level symmetry
reduction for probabilistic model checking,” in QEST 2009, Sixth
International Conference on the Quantitative Evaluation of Systems,
Budapest, Hungary, 13-16 September 2009, 2009, pp. 289–298.
[74] K. A. Miller, Y. Kwon, Y. Sun, Z. Zhang, X. Zhang, and Z. Lin, “Prob-
abilistic disassembly,” in Proceedings of the 41st International Confer-
ence on Software Engineering, ICSE 2019, Montreal, QC, Canada, May
25-31, 2019, 2019, pp. 1187–1198.
[75] Z. Xu, X. Zhang, L. Chen, K. Pei, and B. Xu, “Python probabilistic type
inference with natural language support,” in Proceedings of the 24th
ACM SIGSOFT International Symposium on Foundations of Software
Engineering, FSE 2016, Seattle, WA, USA, November 13-18, 2016, 2016,
pp. 607–618.
[76] T. Xie, N. Tillmann, J. De Halleux, and W. Schulte, “Fitness-guided
path exploration in dynamic symbolic execution,” in 2009 IEEE/IFIP
International Conference on Dependable Systems & Networks.
IEEE,
2009, pp. 359–368.
[77] F. Peng, Z. Deng, X. Zhang, D. Xu, Z. Lin, and Z. Su, “X-force: Force-
executing binary programs for security applications,” in Proceedings of
the 23rd USENIX Security Symposium, San Diego, CA, USA, August
20-22, 2014., 2014, pp. 829–844.
[78] W. You, Z. Zhang, Y. Kwon, Y. Aafer, F. Peng, Y. Shi, C. Harmon,
and X. Zhang, “Pmp: Cost-effective forced execution with probabilistic
memory pre-planning,” in 2020 IEEE Symposium on Security and
Privacy (SP), pp. 381–398.
[79] A. V. Aho and J. D. Ullman, Principles of compiler design. Addison-
[82] C. Lattner and V. Adve, “LLVM: A Compilation Framework for Lifelong
Program Analysis & Transformation,” in Proceedings of the 2004 Inter-
national Symposium on Code Generation and Optimization (CGO’04),
Palo Alto, California, Mar 2004.
[83] “Pin
-
a
dynamic
binary
instrumentation
tool,”
https:
//software.intel.com/content/www/us/en/develop/articles/
pin-a-dynamic-binary-instrumentation-tool.html, 2012.
[80] P. Zhao and J. N. Amaral, “Function outlining and partial inlining,”
in 17th International Symposium on Computer Architecture and High
Performance Computing (SBAC-PAD’05), 2005, pp. 101–108.
[81] “fortune (unix)
- wikipedia,” https://en.wikipedia.org/wiki/Fortune
Wesley, 1977.
(Unix), 2020.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
827
APPENDIX
A. Limitations of Existing Techniques
Howard [14] is also dynamic analysis based. It improves
REWARDS using heuristics to resolve conﬂicting results. For
example, it favors data structures with ﬁelds over monolithic
scalar variables. Thus, the 128-bit ﬂoating-point value copy