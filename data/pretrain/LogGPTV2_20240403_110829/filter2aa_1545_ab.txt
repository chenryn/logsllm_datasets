f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
open(“/etc/passwd”, O_RDONLY);
check perm
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Step 3. Operate as privileged user — Writing content to the file
Attacking Open File Credentials
/etc/
passwd
f_mode 
O_RDONLY
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
f_op
f_cred
~/dummy
f_op
f_cred
f_mode 
O_RDWR
~/dummy
f_op
f_cred
f_mode 
O_RDWR
Write to /etc/
passwd on disk
check perm
open(“/etc/passwd”, O_RDONLY);
struct file on kernel heap
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
DirtyCred: Swapping Linux Kernel Credentials
Three Steps: 
1. Free an inuse unprivileged credential with the vulnerability 
2. Allocate privileged credentials in the freed memory slot 
3. Operate as privileged user
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Three Challenges
1. How to free credentials. 
2. How to allocate privileged credentials as unprivileged users. 
(attacking task credentials) 
3. How to stabilize file exploitation. (attacking open file 
credentials)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 1: Free Credentials
• Both cred and file object are in dedicated caches 
• Most vulnerabilities happens in generic caches 
• Most vulnerabilities may not have free capability
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 1: Free In-use Credentials Invalidly
• Solution: Pivoting Vulnerability Capability 
• Pivoting Invalid-Write (e.g., OOB & UAF write) 
• Pivoting Invalid-Free (e.g., Double-Free)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Pivoting Invalid-Write
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• Leverage victim objects with a reference to credentials
Pivoting Invalid-Write
victim 
object
credential 
object
credential 
object
credential 
object
*cred
0xff…000
0xff…100
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• Manipulate the memory layout to put the cred in the overwrite 
region
vuln 
object
victim 
object
*cred
Pivoting Invalid-Write
victim 
object
credential 
object
credential 
object
credential 
object
*cred
0xff…000
0xff…100
overflow 
object
credential 
object
credential 
object
credential 
object
0xff…000
0xff…100
For OOB
For UAF
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• Partially overwrite the pointer to cause a reference unbalance
credential 
object
vuln 
object
victim 
object
*cred
Pivoting Invalid-Write
victim 
object
credential 
object
credential 
object
*cred
0xff…000
0xff…100
overflow 
object
credential 
object
credential 
object
credential 
object
0xff…000
0xff…100
For OOB
For UAF
credential 
object
credential 
object
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• Free the credential object when freeing the victim object
Pivoting Invalid-Write
freed
credential 
object
credential 
object
freed
0xff…000
0xff…100
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Pivoting Invalid-Free
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• Two references to free the same object
Pivoting Invalid-Free
Freed
Allocated
Allocated
Vuln Obj
ref_a
ref_b
Vulnerable object in kernel memory
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Pivoting Invalid-Free
Freed
Allocated
Allocated
Freed
Step 1. Trigger the vuln, free the vuln object 
with one reference
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Pivoting Invalid-Free
Freed
Allocated
Allocated
Freed
Freed memory page
Step 1. Trigger the vuln, free the vuln object 
with one reference
Step 2. Free the object in the memory cache 
to free the memory page
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Pivoting Invalid-Free
Freed
Allocated
Allocated
Freed
Freed memory page
Credentials Credentials
Credentials
Credentials
Step 1. Trigger the vuln, free the vuln object 
with one reference
Step 2. Free the object in the memory cache 
to free the memory page
Step 3. Allocate credentials to reclaim the 
freed memory page (Cross Cache Attack)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Pivoting Invalid-Free
Freed
Allocated
Allocated
Freed
Freed memory page
Credentials Credentials
Credentials
Freed 
Credentials
Credentials Credentials
Credentials
Credentials
Step 1. Trigger the vuln, free the vuln object 
with one reference
Step 2. Free the object in the memory cache 
to free the memory page
Step 3. Allocate credentials to reclaim the 
freed memory page (Cross Cache Attack)
Step 4. Free the credentials with the left 
dangling reference
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Three Challenges
1. How to free credentials. 
2. How to allocate privileged credentials as unprivileged users. 
(attacking task credentials) 
3. How to stabilize file exploitation. (attacking open file 
credentials)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 2: Allocating Privileged Task Credentials
• Unprivileged users come with unprivileged task credentials 
• Waiting privileged users to allocate task credentials 
influences the success rate
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 2: Allocating Privileged Task Credentials
• Solution I: Trigger Privileged Userspace Process 
• Executables with root SUID (e.g. su, mount) 
• Daemons running as root (e.g. sshd)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 2: Allocating Privileged Task Credentials
• Solution I: Trigger Privileged Userspace Process 
• Executables with root SUID (e.g. su, mount) 
• Daemons running as root (e.g. sshd) 
• Solution II: Trigger Privileged Kernel Thread 
• Kernel Workqueue — spawn new workers 
• Usermode helper — load kernel modules from userspace
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Three Challenges
1. How to free credentials. 
2. How to allocate privileged credentials as unprivileged users. 
(attacking task credentials) 
3. How to stabilize file exploitation. (attacking open file 
credentials)
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
~/dummy
• The swap of file object happens before permission check 
/etc/
passwd
Challenge 3: Stabilizing File Exploitation
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
close(fd);
f_op
f_cred
Write to /etc/
passwd failed
check perm
f_mode 
O_RDONLY
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• The swap of file object happens after file write. 
Challenge 3: Stabilizing File Exploitation
~/dummy
f_mode 
O_RDWR
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
close(fd);
f_op
f_cred
Write to ~/
dummy
check perm
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• The swap of file object should happen between permission 
check and actual file write 
• The desired time window is small 
Challenge 3: Stabilizing File Exploitation
~/dummy
f_mode 
O_RDWR
int fd = open(“~/dummy”, O_RDWR); 
write(fd, “HACKED”, 6); 
close(fd);
f_op
f_cred
Write to /etc/
passwd
Time window of swapping file
check perm
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 3: Stabilizing File Exploitation
• Solution I: Extend with Userfaultfd or FUSE 
• Pause kernel execution when accessing userspace memory
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Solution I: Userfaultfd & FUSE
• Pause at import_iovec before v4.13 
• import_iovec copies userspace memory
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Solution I: Userfaultfd & FUSE
• Pause at import_iovec before v4.13 
• import_iovec copies userspace memory 
• Used in Jann Horn’s exploitation for CVE-2016-4557 
• Dead after v4.13
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Solution I: Userfaultfd & FUSE
• vfs_writev after v4.13
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Solution I: Userfaultfd & FUSE
• Pause at generic_perform_write 
• prefaults user pages 
• Pauses kernel execution at the  
page fault
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Challenge 3: Stabilizing File Exploitation
• Solution I: Extend with Userfaultfd & FUSE 
• Pause kernel execution when accessing userspace memory 
• Userfaultfd & FUSE might not be available 
• Solution II: Extend with file lock 
• Pause kernel execution with lock
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
• A lock of the inode of the file 
• Lock the file when it is being writing to 
Solution II: File Lock
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Solution II: File Lock
Thread A
Thread B
check perm
Lock
Unlock
Do the write
check perm
Lock
Unlock
Do the write
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Solution II: File Lock
check perm
Lock
Unlock
Do the write 
(write 4GB)
check perm
Lock
Unlock
Do the write
Thread A
Thread B
A large time window
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Demo Time!
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
CVE-2021-4154
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Centos 8 and Ubuntu 20
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Android Kernel with CFI enabled*
* access check removed for demonstration
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Advantages of DirtyCred
• A generic method 
• The method applies to container and Android. 
• Simple but powerful 
• No need to deal with KASLR, CFI. 
• Data-only method. 
• Exploitation friendly 
• Make your exploit universal! 
• empowers different bugs to be Dirty-Pipe-liked (sometimes even better).
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Defense Against DirtyCred
• Fundamental problem 
• Object isolation is based on type not privilege 
• Solution 
• Isolate privileged credentials from unprivileged ones 
• Where to isolate? 
• Virtual memory (using vmalloc): No cross cache attack anymore! 
• Code is available at https://github.com/markakd/DirtyCred
#BHUSA   @BlackHatEvents 
#DirtyCred   
Zhenpeng Lin 
@Markak_ 
Takeaways
• New exploitation concept — DirtyCred: swapping credentials 
• Principled approach to different challenges 
• Universal exploits to different kernels 
• Effective defense
Zhenpeng Lin (@Markak_) 
https://zplin.me 
PI:EMAIL
Pic comes from @sirdarckcat