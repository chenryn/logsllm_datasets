### DirtyCred: Swapping Linux Kernel Credentials

#### Overview
DirtyCred is a novel exploitation technique that involves swapping credentials in the Linux kernel to gain elevated privileges. This method can be applied to various environments, including containers and Android, and does not require dealing with KASLR (Kernel Address Space Layout Randomization) or CFI (Control Flow Integrity).

#### Three Steps of DirtyCred
1. **Free an in-use unprivileged credential using a vulnerability.**
2. **Allocate privileged credentials in the freed memory slot.**
3. **Operate as a privileged user.**

#### Three Challenges
1. **How to free credentials.**
2. **How to allocate privileged credentials as unprivileged users (attacking task credentials).**
3. **How to stabilize file exploitation (attacking open file credentials).**

#### Challenge 1: Freeing Credentials
- **Dedicated Caches:** Both `cred` and `file` objects are in dedicated caches, making it difficult to free them.
- **Generic Cache Vulnerabilities:** Most vulnerabilities occur in generic caches and may not have the capability to free specific objects.

##### Solution: Pivoting Vulnerability Capability
- **Pivoting Invalid-Write (e.g., OOB & UAF write):** 
  - **Leverage Victim Objects:** Use victim objects that have a reference to credentials.
  - **Manipulate Memory Layout:** Arrange the memory layout to place the credential object in the overwrite region.
  - **Partially Overwrite Pointer:** Partially overwrite the pointer to cause a reference imbalance.
  - **Free Credential Object:** Free the credential object when freeing the victim object.

- **Pivoting Invalid-Free (e.g., Double-Free):**
  - **Two References to Free the Same Object:**
    - **Step 1:** Trigger the vulnerability and free the vulnerable object with one reference.
    - **Step 2:** Free the object in the memory cache to free the memory page.
    - **Step 3:** Allocate credentials to reclaim the freed memory page (Cross Cache Attack).
    - **Step 4:** Free the credentials with the remaining dangling reference.

#### Challenge 2: Allocating Privileged Task Credentials
- **Unprivileged Users:** Unprivileged users come with unprivileged task credentials.
- **Privileged User Allocation:** Waiting for privileged users to allocate task credentials can influence the success rate.

##### Solutions:
- **Solution I: Trigger Privileged Userspace Process:**
  - **Executables with Root SUID (e.g., `su`, `mount`).**
  - **Daemons Running as Root (e.g., `sshd`).**

- **Solution II: Trigger Privileged Kernel Thread:**
  - **Kernel Workqueue:** Spawn new workers.
  - **Usermode Helper:** Load kernel modules from userspace.

#### Challenge 3: Stabilizing File Exploitation
- **File Object Swap Timing:** The swap of the file object should happen between the permission check and the actual file write. The desired time window is small.

##### Example Code:
```c
int fd = open("~/dummy", O_RDWR);
write(fd, "HACKED", 6);
close(fd);
```

- **Failed Write to `/etc/passwd`:**
  - **Permission Check:** `f_mode` is `O_RDONLY`.
  - **File Write:** Writing to `~/dummy` fails.

- **Successful Write to `/etc/passwd`:**
  - **Permission Check:** `f_mode` is `O_RDWR`.
  - **File Write:** Writing to `/etc/passwd` succeeds.

##### Solutions:
- **Solution I: Extend with Userfaultfd or FUSE:**
  - **Pause Kernel Execution:** Pause at `import_iovec` before v4.13 or `vfs_writev` after v4.13.
  - **Prefaults User Pages:** Pauses kernel execution at the page fault.

- **Solution II: Extend with File Lock:**
  - **Lock the Inode:** A lock of the inode of the file.
  - **Large Time Window:** Lock the file during the write operation to create a large time window.

#### Demo
- **CVE-2021-4154:**
  - **Platforms:** CentOS 8 and Ubuntu 20.
  - **Android Kernel:** With CFI enabled (access check removed for demonstration).

#### Advantages of DirtyCred
- **Generic Method:** Applicable to containers and Android.
- **Simple but Powerful:** No need to deal with KASLR or CFI.
- **Data-Only Method:** Exploitation-friendly and universal.
- **Empowers Different Bugs:** Can make different bugs similar to Dirty Pipe (or even better).

#### Defense Against DirtyCred
- **Fundamental Problem:** Object isolation is based on type, not privilege.
- **Solution:** Isolate privileged credentials from unprivileged ones.
- **Virtual Memory:** Use `vmalloc` to prevent cross-cache attacks.
- **Code Availability:** [GitHub Repository](https://github.com/markakd/DirtyCred)

#### Takeaways
- **New Exploitation Concept:** DirtyCred involves swapping credentials.
- **Principled Approach:** Addresses different challenges systematically.
- **Universal Exploits:** Effective across different kernels.
- **Effective Defense:** Provides robust protection against such attacks.

---

**Presenter: Zhenpeng Lin (@Markak_)**  
[Personal Website](https://zplin.me)  
**Email:** PI:EMAIL  
**Image Credit:** @sirdarckcat