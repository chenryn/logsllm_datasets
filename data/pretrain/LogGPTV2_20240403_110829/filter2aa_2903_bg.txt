因为EFlags[TF]=1而导致的单步异常
BS=1
陷阱
调试寄存器DRn和LENn定义的指令断点
Bn=1 and (Gn=1 or
Ln=1)
R/Wn=0 错误
调试寄存器DRn和LENn定义的写数据断点
Bn=1 and (Gn=1 or
Ln=1)
R/Wn=1 陷阱
调试寄存器DRn和LENn定义的I/O读写断点
Bn=1 and (Gn=1 or
Ln=1)
R/Wn=2 陷阱
调试寄存器DRn和LENn定义的数据读（不包括
取指）写断点
Bn=1 and (Gn=1 or
Ln=1)
R/Wn=3 陷阱
当DR7的GD位为1时，企图修改调试寄存器
BD=1
错误
任务状态段（TSS）的T标志为1时进行任务切
换
BT=1
陷阱
对于错误类调试异常，因为恢复执行后断点条件仍然存在，所以为
了避免反复发生异常，调试软件必须在使用IRETD指令返回重新执行触
发异常的指令前将标志寄存器的RF（Resume Flag）位设为1，告诉CPU
不要在执行返回后的第一条指令时产生调试异常，则CPU执行完该条指
令后会自动清除RF标志。
4.2.6 调试状态寄存器
调试状态寄存器（DR6）的作用是当CPU检测到匹配断点条件的断
点或有其他调试事件发生时，用来向调试器的断点异常处理程序传递断
点异常的详细信息，以便使调试器可以很容易地识别出发生的是什么调
试事件。例如，如果B0被置为1，那么就说明满足DR0、LEN0和R/W0
所定义条件的断点发生了。表4-3列出了DR6中各个标志位的具体含
义。
表4-3 调试状态寄存器（DR6）
简
称
全称
比
特
位
描  述
B0
Breakpoint
0
0
如果处理器检测到满足断点条件0的情况，那么处理器会在调用
异常处理程序前将此位置为1
B1
Breakpoint
1
1
如果处理器检测到满足断点条件1的情况，那么处理器会在调用
异常处理程序前将此位置为1
B2
Breakpoint
2
2
如果处理器检测到满足断点条件2的情况，那么处理器会在调用
异常处理程序前将此位置为1
B3
Breakpoint
3
3
如果处理器检测到满足断点条件3的情况，那么处理器会在调用
异常处理程序前将此位置为1
BD
检测到访
问调试寄
存器
13
这一位与DR7的GD位相联系，当GD位被置为1，而且CPU发现
了要修改调试寄存器（DR0～DR7）的指令时，CPU会停止继续
执行这条指令，把BD位设为1，然后把执行权交给调试异常
（#DB）处理程序
BS
单步
（Single
step）
14
这一位与标志寄存器的TF位相联系，如果该位为1，则表示异常
是由单步执行（single step）模式触发的。与导致调试异常的其
他情况相比，单步情况的优先级最高，因此当此标志为1时，也
可能有其他标志也为1
BT
任务切换
（Task
switch）
15
这一位与任务状态段（TSS）的T标志（调试陷阱标志，debug
trap flag）相联系。当CPU在进行任务切换时，如果发现下一个
任务的TSS的T标志为1，则会设置BT位，并中断到调试中断处
理程序
因为单步执行、硬件断点等多种情况触发的异常使用的都是一个向
量号（即1号），所以调试器需要使用调试状态寄存器来判断到底是什
么原因触发的异常。
4.2.7 示例
下面通过一些例子来加深理解。表4-4列出了对调试寄存器的设
置，通过这些设置，我们定义了4个硬件断点，表格的最后一列是我们
预期的断点触发条件。
表4-4 断点示例
编号
地址寄存器
R/Wn
LENn
断点触发条件
0
DR0=A0001H R/W0=11（读/
写）
LEN0=00（1B） 读写A0001H开始的1字
节
1
DR1=A0002H R/W1=01（写）
LEN1=00（1B） 写A0002H开始的1字节
2
DR2=B0002H R/W2=11（读/
写）
LEN2=01（2B） 读写B0002H开始的2字
节
3
DR3=C0000H R/W3=01（写）
LEN3=11（4B） 写C0000H开始的4字节
对于上面的调试器设置，表4-5列出了一些读写操作（数据访
问），并说明它们是否会命中断点。
表4-5 内存访问示例
访问类
型
访问地
址
访问长
度
触发断点与否
读或写
A0001H 1
触发（与断点0匹配）
读或写
A0001H 2
触发（读与断点0匹配，写与断点0和1都匹配）
写
A0002H 1
触发（与断点1匹配）
写
A0002H 2
触发（与断点1匹配）
读或写
B0001H 4
触发（与断点2匹配，对B0002和B0003的访问落入断点2
定义的区域）
读或写
B0002H 1
触发（与断点2匹配）
读或写
B0002H 2
触发（与断点2匹配）
写
C0000H 4
触发（与断点3匹配）
写
C0001H 2
触发（与断点3匹配）
写
C0003H 1
触发（与断点3匹配）
读或写
A0000H 1
否
读
A0002H 1
否（断点1的访问类型是写）
读或写
A0003H 4
否
读或写
B0000H 2
否
读
C0000H 2
否（断点3定义的访问类型是写）
读或写
C0004H 4
否
表格最后一列说明了断点的命中情况及原因。可以看到，一个数据
访问可能与多个断点定义的条件相匹配，这时，CPU会设置状态寄存器
的多个位，显示出所有匹配的断点。
再举个实际的例子。在WinDBG中打开上一节的HiInt3程序。根据
清单4-2可以知道，printf函数所使用的字符串的内存地址是0042201c。
考虑到printf函数执行时会访问这个地址，所以我们尝试对其设置断
点。但当初始断点命中时执行ba命令，WinDBG会提示设置失败：
0:000> ba w1 0042201c
       ^ Unable to set breakpoint error
The system resets thread contexts after the process
breakpoint so hardware breakpoints cannot be set.
Go to the executable's entry point and set it then.
 'ba w1 0042201c'