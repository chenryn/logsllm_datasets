Implementation considerations also led us to the asymmetry in
Rule 3. We deliberately do not use the graph G\li−1 in the two-
hop clause, as might be expected, even though it would result in
correct paths. This is because the current node will not in general
know the incoming link of the previous node unless it is signaled
with the packet.
As a variant of Rule 3, we observe that we can deﬁne an analo-
gous rule by removing the incoming node (rather than link). This
places stronger connectivity demands on the underlying topology:
it ensures that there is a path to the destination that does not re-
turn to the previous node, rather than one that does not re-cross the
previous link. We have found that it produces otherwise similar
results, and so omit it from our evaluation due to space limitations.
The correctness proof of the link version of Rule 3 is given in
Appendix C. It is similar to that of Rule 2, and the node version
follows by analogy. We also show that Rule 3 is compatible with
shortest-path routing and hence trivially deployable.
4. TAG ARCHITECTURE
In this section, we describe a tag routing architecture that pro-
vides end-systems with path diversity. Each packet carries a tag that
determines the path it takes through the network from the present
location to the destination1. Thus tags act as selectors across a set
of network paths. They are an alternative to explicit source routes
selected by hosts and label-switched paths selected by ISPs. To
describe our architecture, we begin with tags themselves, and then
present two design variants: a shim protocol that ﬁts between IP
and higher protocol layers and cleanly signals tags; and an encod-
ing of tags into IP packets that is compatible with common IP us-
age.
4.1 Tag Properties
We require that tags have several properties to render them use-
ful and practical for path selection. First, tags must be consistent in
their path selections to the same extent as existing Internet routes.
This allows end-systems to systematically explore the tag space and
avoids adverse interactions with existing transports, e.g., packet re-
ordering slows TCP.
Second, tags are opaque and lack global meaning except that we
require a value of zero to correspond to the default Internet path.
For other tag values, each ISP selects a path through its network,
without the requirement that it communicate the choice of paths to
end-systems or other ISPs. This means that tag routes are policy
compliant in the same manner as default routes, since each ISP will
apply its policies by deﬁnition. It also means that end-systems must
send packets along tagged routes to discover them.
Third, different tags should select a diverse set of network paths.
By this we mean that union of all paths that can be selected be-
tween a source and destination covers a region of the network that
is signiﬁcantly larger than the default Internet path (were tags not
used). This implies that it will usually be possible to avoid an un-
desirable portion of the default Internet path. However, we do not
require that different tags select different paths. This makes it eas-
ier to construct tag paths. It also enables incremental deployment
because ISPs that have not been upgraded can be viewed as trivially
mapping all tag values to the default path.
Given the above properties, tag routes are useful for applications
that beneﬁt from diverse paths, such as routing around the location
of a fault that might be a lossy link, point of congestion, Byzantine
failure, low capacity link, or high delay link. For this kind of ap-
plication, it matters little that the route is not known a priori. This
is because ﬁnding a good route will typically involve testing an al-
ternative path to check that it does not suffer from loss, delay or
bandwidth problems, etc., regardless of whether the route is explic-
1Clearly, tags could be deﬁned for a connection-oriented network
too. Here we focus on extending IP.
IP header
tag
16 bits
stop
start
TTL
TTL
8 bits 8 bits
TCP etc.
Tag Header
Figure 2: Shim Encoding. A shim header is inserted between IP and
the next higher layer to carry the tag and TTL range for which deﬂec-
tions are enabled.
itly known. In these applications there tend to be many paths that
are acceptable, e.g., any path that avoids the fault, so that trying
paths is a reasonable strategy. Conversely, tag routes are less suit-
able for sending packets along particular routes to satisfy security
or QoS policies, since the route must be found by trying tag values.
4.2 Shim Layer Tag Encoding
Figure 2 shows how packets are tagged using a shim protocol
layer that sits between IP and the next higher layer. Tagging is a
simple insertion of two pieces of compact, ﬁxed-length informa-
tion. First, the tag itself is carried in the clear. Ten bits (selecting
among 1024 paths) are sufﬁcient, and we round this up to 16 bits
for convenience. Note that this tag size is much smaller than the
(exponentially large) number of possible source routes. However,
there is no compelling reason to make the tag size large since, given
the properties of tags, it must be searched by trial and error. Sec-
ond, range information is carried in the form of a start TTL and stop
TTL values. This range signiﬁes the portion of the path for which
tag selection is to be used. It enables the end-system to narrow the
region of faults, e.g., if a fault can be bypassed with tags operating
on the last half of a path then it must lie in the last half of the path.
Given this encoding, tags are used at routers as follows. First,
the current TTL is checked to see if it lies within the range.
If
not, or if the tag is zero, the default route is used. We also use
the default route for IP fragments because only the initial fragment
will contain the shim header. Otherwise, the tag is used to select
a possibly alternative path. This begs the question of how ISPs
map tag values to paths. We give a procedure for doing so later in
this section, for the case in which the diverse paths are provided by
deﬂections. However, ISPs could use any method they prefer, e.g.,
to map tags to MPLS [16] paths if they are available.
4.3 IP Tag Encoding
We observe that it is possible to carry tag information on IP pack-
ets themselves by overloading IP header ﬁelds in a manner that is
compatible with common IP usage. The information is then used
at routers in the same manner as for the shim protocol. A sample
encoding is shown in Figure 3.
We use 10 of the IP identiﬁer bits to encode the tag, setting the
remaining 6 bits to a well-known ﬂag pattern. We then use TTL
values to deﬁne the tag selection region, carrying it implicitly by
setting the initial TTL instead of separate start and stop TTL values.
To do this, we deﬁne a rarely used portion of the TTL space to
indicate that tag selection should be used. Common initial TTL
values include 30, 32, 60, 64, 128, and 255, and Internet paths
rarely exceed 40 hops [26]. This means that TTL values between
128 and 215 are rarely seen in practice. We deﬁne the range 160
to 200 to indicate that tag selection should be used. Hosts can then
set their initial TTL value such that tag selection is applied to the
entire path (by using 200), only the end of the path (by using values
> 200) or only the beginning of the path (by using values > 160
IP header
tag
6 bit
flag
Identification
(16 bits)
DF on
Flags
(3 bits)
160
TTL
(8 bits)
TCP etc.
Overloaded IP Fields
Figure 3: IP Encoding. The tag is carried in a subset of the Identiﬁ-
cation ﬁeld, deﬂections are switched on for a range of TTL values, and
fragments are not deﬂected.
and < 200). Other initial TTL values, including those in common
use, will cause tag selection to be turned off and the default path
to be followed. Note that this scheme is not as ﬂexible as the shim
protocol, where an arbitrary subpath can be used for tag selection,
but we will see that it is sufﬁcient to provide useful diversity.
The advantage of this overloading is that it enables true incre-
mental deployment. Individual hosts and ISP networks can be up-
graded to use tag selection independent of all other parties; the de-
ﬂection rules we consider in the next section allow routers within
an ISP to be individually upgraded too. An upgraded host can then
use tags for path diversity even when communicating with a host
that has not been upgraded.
The disadvantage of this method is that, like all such schemes,
no overloading of IP is entirely backwards-compatible. In our case,
the small fraction of hosts that do use TTLs within the tag selection
range will have a small fraction of their packets re-routed (when
the IP identiﬁer contains the ﬂag value). This will not cause a loss
of connectivity, but may degrade performance. A further issue is
that traceroute cannot be used to trace tag paths because the TTL
has been overloaded. Finally, note that there are other proposals
to overload the IP identiﬁer ﬁeld for incremental deployment (e.g.,
CSFQ [21] and IP traceback [18]) that, if adopted, would not be
compatible with our usage. Nonetheless, while we do not claim it
is the best that can be found, this encoding shows it is possible to
provide tag routing with a high degree of backwards-compatibility.
4.4 Mapping Tags to Deﬂections
When deﬂection routing is in use, we use the following proce-
dure to map tags carried on packets to choices in the deﬂection set
at a router.
Tag Mapping Procedure: Let the deﬂection set at a router given
by a rule contain K members. Number these members pseudo-
randomly, starting with zero for the default shortest cost neighbor.
Let the router also pseudo-randomly choose a small prime num-
ber P from the ﬁrst few primes (e.g., the ﬁrst 10) greater than or
equal to K. Given a tag value of T on a packet, the router should
forward to the member of the deﬂection set identiﬁed by number
N = (T mod P ) mod K.
This rule uses modulo arithmetic to pick from the deﬂection set.
The outer mod operation produces a number in the right range.
The randomization is used to avoid correlated choices at different
routers. The purpose of the inner mod operation is to produce a
further degree of freedom. It converts the input tag into an effective
tag value that is different for routers that chose different primes. In
this manner, the same tag values can be found to make different
choices at different routers, even when the routers have deﬂection
sets of the same size. We ﬁnd the inner mod operation to be valu-
able in terms of path diversity as part of our evaluation (Section 6).
ISP A
ISP C
ISP D
dst
src
ISP B
Figure 4: Inter-domain deﬂections can switch peering points and AS-
PATHs. The solid line from source to destination shows the default
path via ISPs A-B-D. The dotted line shows a deﬂection that changes
the peering point but not the ASPATH. The dashed line shows a deﬂec-
tion that changes both peering point and ASPATH to ISPs A-C-D.
5.
INTER-DOMAIN RULES
We now show how to extend deﬂections across multiple ISPs
to provide peering point diversity.
It is straightforward for each
ISP to independently use deﬂections to route to external IP preﬁxes
advertised by BGP via one or more peering points. Deﬂections may
then change the ISP egress point (and hence next ingress point)
compared to default routes.
For inter-domain routing, we consider each ISP in isolation. We
assume that all routers in the ISP run BGP (with some policy cho-
sen by the ISP) as well as an IGP protocol such as OSPF or ISIS.
Each router then forwards packets on the shortest path to the IP
nexthop of the path selected by its BGP decision process. This will
often result in different routers in the ISP sending to different egress
points for a given destination because IGP cost metric is included
in the BGP decision process, e.g., early-exit routing. Thus the com-
plication for our deﬂection rules is that the default egress point and
hence cost metric for a destination may change unexpectedly when
the packet is deﬂected.
We can handle this complication to avoid intra-ISP loops by ex-
tending the cost function. Revealing the destination parameter that
has been implicit, the cost metric so far has the form cost(n, dst).
To capture the BGP decision process, we simply extend it to have
the form cost(n, nexthop(n, dst)). Here, nexthop() models the
BGP decision process that selects the IP nexthop to a destination IP
address dst. This decision process is part of BGP implementation
and should be the same for all routers in one ISP to prevent rout-
ing inconsistencies. A node n can compute the nexthop() of any
neighbor as the inputs to the nexthop() function: the BGP route
advertisements to the destination dst and the IGP costs to the can-
didate nexthops in the BGP advertisements, are both known to n.
The former is known from iBGP relay sessions and the latter from
IGP. With this nexthop information, a node ni can compute the
costs cost(ni±1, nexthop(ni±1, dst)). They are all a node needs
to know to compute a deﬂection set (Section 3). With this extension
of cost, all proofs in the appendix go through unchanged.
Inter-domain deﬂections provide two beneﬁts in terms of path
diversity. Both are shown in Figure 4. First, the peering point used
between two ISPs may change; deﬂections are not limited in their
diversity to intra-ISP changes. This can occur because a packet
heading for a given peering point may deﬂect to a router that prefers
a different peering point. In fact, the presence of multiple peering
points will tend to increase the deﬂection potential.
Second, and more generally, the next ISP may be changed. This
is because the BGP decision process that is run at each router chooses
the ASPATH and nexthop jointly; BGP does not bind an entire ISP
to an ASPATH before choosing nexthops. An important consider-
ation in this case, given that deﬂected paths are loop-free within
individual ISPs, is that they remain loop-free across multiple ISPs.
This will continue to be the case when ISPs use “prefer-customer”
and “valley-free” routing policies, as is the common case. These
policies mean that any router of an ISP will only choose an egress
point that advertises the most preferred ASPATH, barring inter-ISP
loops as long as there are no customer-provider loops.
Interest-
ingly, it is possible that the deﬂected ASPATH is one that was not
advertised downstream, but is nonetheless policy compliant by its
construction. For instance, in Figure 4, the advertised ASPATH to
dst by ISP A is ISPs A-B-D, but the deﬂected one may be A-C-D.
6. EVALUATION
In this section we simulate our tag architecture and deﬂection
rules to characterize the kinds of path diversity that they provide.
A high degree of path diversity is desirable to increase the ability
of a source to avoid faulty links or nodes on their default paths. We
characterize path diversity in three respects: the deﬂection paths
that exist between particular source and destination nodes (6.2);
the ability to route around particular nodes or links deemed faulty
(6.3); and the ability to switch peering points (6.4).
6.1 Methodology
We implemented a custom simulator to explore deﬂection routes
and evaluate tag-based deﬂections.
Input Topologies: We study a wide range of topologies because
deﬂection routes are a property of the network on which they are
computed:
1. Real networks for which we can obtain topologies and link
weights. These are Abilene and GEANT, research and educational
networks based in the US and Europe, respectively. These networks
have relatively large capacities but relatively few nodes and links.
2. Measured ISP topologies from Rocketfuel [20]. We use ﬁve
topologies (Sprint, Ebone, Tiscali, Exodus and Abovenet) complete
with link-weights that are inferred to match observed routing pat-
terns. (We exclude Telstra because the mapping is of low quality.)
These networks are substantially larger than Abilene and GEANT.
3. Topologies randomly generated with Brite [12]. We used two
different models: Barabasi Albert (BA) and the Waxman model
(Waxman). The BA model generates graphs with a power-law de-
gree distribution, and the Waxman model generates graphs with a
uniform degree distribution. For each model, we use link delay as
the cost metric for routing and generate low and high degree graphs.
The size and degree of all simulated networks are given in the
ﬁrst column of Table 1. Networks within the same category are
ordered by average node degrees. Rule 3 refers to the link-version
of Rule 3 (Section 3). The node-version has similar results and
is omitted to save space. For Abovenet, we use and give ﬁgures
for the maximally connected component, since the network is not
connected otherwise.
Output Metrics: We compute several metrics for each network
and each deﬂection rule. They are summarized below, with further
detail where the corresponding results are presented.
To measure the number of usable deﬂection paths, we compute
the number of neighbors in the deﬂection set at each router. This
captures the number of opportunities there are to deﬂect off the
shortest path. We next compute the number of different deﬂec-
tion paths between a source and a destination. This shows how de-
ﬂection opportunities at nodes are translated into deﬂection paths
through the network. Finally, we ﬁnd the largest fraction of the
shortest path between a source and a destination that can be by-
 1
 0.8
 0.6
 0.4
 0.2
n
o
i
t
c
a
r
f
e
v
i
t
a
l
u
m
u
C
 0
 0
 1
 1
 0.8
 0.6
 0.4
 0.2
n
o
i
t
c
a
r
f
e
v
i
t
a
l
u
m
u
C
 3
 0
 0
Rule 1
Rule 2
Rule 3
 2
Number of deflection neghbors
(a) Abilene
 1
 0.8
 0.6
 0.4
 0.2
n
o
i
t
c
a