然后，我们更改了消息传递的范围，将提醒的重点放在实际影响可用性的团队上，这些团队可能是工程师总数
50%
的人口。所以，现在至少我们关于服务可用性的信息正在触及到正确的受众。下一步是基于上下文的推送，这样就能将提醒信息关联到具体的工程团队，并允许他们评估他们是否具有低于标准的可用性。
但是，想要找出向谁提供这些信息并不总是那么容易。在微服务体系结构中，可能有
40
多个团队在任意给定时间实际运行微服务，而且都可能会影响服务关键路径的可用性。如果我们在服务边缘测量可用性，并确定十分之一的用户无法在给定小时内播放电影，那么要确定哪个团队可能实际导致该故障是相当困难的。更具挑战性的是，在许多情况下，它是外部驱动的。例如，假设一个在线游戏平台需要可用才能在服务上播放标题。在这种情况下，我也许必须去
Netflix 的 UI
团队，因为该团队依赖于该服务，看看他们是否能对外部供应商服务故障建立弹性依赖（其实我们已经这样做了）。
我认为，在提到"可用性"和"可靠性"这两个术语时，在你的组织中明确说明这一点很有帮助。作为我们在
Netflix
在流媒体服务上下文中使用这些术语的类比，我往往会参考作为存储区域网络（SAN）组成部分的磁盘阵列。如果磁盘阵列用来类比服务，那么阵列中的基础磁盘驱动器就类似于微服务。磁盘阵列的设计要考虑到单个驱动器可能会失败，也就是说阵列要继续服务于数据存取。使用此模型，你可以将可用性计算为磁盘阵列（类似于我关心的
Netflix
流媒体服务）能够向客户端提供服务的时间百分比。驱动器在阵列中的故障率表示驱动器的可靠性（在我的例子中，也就是微服务）。
与磁盘阵列配置（RAID
配置、缓存等）一样，可以在微服务体系结构中应用运维模式，以便根据可能的微服务故障提高总体服务可用性。Netflix
使用的一个示例是基于隔水浮仓模式的 Hystrix
框架，当下游微服务发生故障时，该框架在微服务之间进行"断路"。如果可能，该框架可提供回退机制，以便仍向最终用户提供服务。
总之，在微服务级别设置和测量可靠性目标可让你朝着所需的聚合服务级别可用性迈进。不同的组织可能以不同的方式使用可用性和可靠性这两个术语，但这就是我们根据运维模型定义它们的方式。
**David：**那么，你能向该团队提供什么样的信息，而且确保这些信息是可操作的？
**Coburn：**我了解到另一家公司有一个微服务可用性报告。他们查看了服务被其他服务成功调用的速度。比如我自己是处理订阅者或成员信息的服务，并且有
30
个服务与我交谈，则我的可用性主要衡量标准应该是依赖于我的服务的成功率。很多时候，团队会专注于其服务端的可用性。这不能保证你以所需的速率成功为请求提供服务，但这一切都看你怎样度量。
我们喜欢另一家公司的模型，并考虑如何将其应用于我们自己的基础架构。幸运的是，我们有一个通用的
IPC【进程间通信】框架，并且我们有围绕 Hystrix
的指标，另外还有些命令可以记录客户端（依赖服务）成功调用的速率。我们汇总了所有关键微服务的此信息，并将这一趋势与前
30
天进行比较。这个比较不必非常接近实时，它更加关注可操作性，也就是说你的服务是越来越好还是越来越糟。
假设一个团队拥有三个微服务，目标是使微服务具有来自客户端调用的四个九的可用性。如果这些微服务保持在四分之九以上，团队将永远不会收到电子邮件（可用性报告）。如果与前
21 天相比，最近 7
天存在下滑趋势，或者如果微服务未能实现四个九可用，则报告将发送给团队。该报告将每周一周显示为条形图。绿色表示达到给定一周的目标。红色或黄色表示未能达到目标。黄色表示比前一周有所改善；红色表示降级。单击图形中的条形将提交详细的报告，显示与微服务交谈的上游（客户端）服务在整个时间窗口的调用速度以及这些调用的可用性。右侧面板上是下游依赖项调用和成功率的视图，这非常有用，因为微服务可用性可能会因下游依赖项而降低。我们将此内部实现称为"微服务可用性记分卡框架"。此时，SRE
团队（使用数据分析）向团队提供了有关他们拥有的微服务的信息，尤其是其对依赖客户端服务的微服务可用性，团队不必受到
Netflix
整体服务可用性的干扰。这应该是非常可操作的信息。当此图表不断推送给工程师时，他们可以相对快速地查看它们。Netflix
的 SRE 解决方案是仅在团队有需要注意的变动时推送记分卡。
**David：**所以，这听起来相当*被动*，对不对？向他们发送记分卡是因为你们希望看到将来发生的情况会有改善。请问还有什么*积极主动*的方法？也就是在收到记分卡之前，如何帮助那些试图做出良好决策的人？
**Coburn：**记分卡的一个很好的类比是汽车驾驶面板上的信息，指示"你的右前轮胎正在失去压力"。它不告诉你该如何处理它，只是提供信息，一个正在走向错误方向的趋势。在考虑如何最好地告知人们时，我利用了过去在性能领域工作的经验，我们并不担心发现较大的性能偏差。我们有金丝雀来评估系统寻找重大偏差，因此，如果
CPU 需求在推送时出现 20%
的跳跃，警报将开始触发。长期而言，可能最终让你感受到的是六个月期间每周增加五毫秒延迟。最后你不得不注意到，"哇，我突然需要三倍的容量的资源才能满足服务需求；发生了什么事？"记分卡的作用是捕捉较小的偏差，以避免温水煮青蛙的情况发生。我认为可靠性的类似情况是，如果忽略小偏差，并且未能主动解决它们，那么大的故障迟早会发生。
**David：**好吧，那么从上下文的角度，你可以做什么，让人们在当下做出正确的决定？从理论上讲，错误预算的概念意味着在任何时候*T*，我有一个方法判定自己是否应该做一些事情，如发布一个新版本。上下文在这种情况有什么用处？人们不断查看记分卡然后做出正确决策的理论依据是什么？
**Coburn：**如果有人遇到严重影响实际生产可用性的问题（例如，持续发生导致客户无法观看视频内容的生产事件），则微服务可用性记分卡的上下文可能不是解决这个问题的方法。在这种情况下，他们很可能收到报告，但没有采取行动。解决这个问题的方法就是把相关人员聚集在一个房间里，找出前进的道路。这仍然并不意味着他们应该停止推送代码，因为他们也有很多其他服务依赖于它们。
针对你提出的更多实时输入，以帮助工程师在目前做出更好的部署决策的问题，我们努力将信息放在他们使用的工具中。Spinnaker
现在公开群集中的可用性趋势（AWS 术语是自动缩放组），如果他们通过 UI
进行更改，则这些数据肯定会被工程师注意到。
当我们考虑持续提高可用性时，目标分为两大类：避免所有事件（无论类型如何），以及某人有导致事件或重复故障的特定问题模式。
从上下文角度来看，如果他们遇到问题，尽管一次次的做出改进的尝试，但仍然产生导致影响生产的事件，这个团队显然需要人类的智慧参与，而不是系统提供的报告。在
Netflix，核心 SRE
团队没有责任介入并排除故障，或解决微服务特定问题，但该团队被视为"Netflix
的中枢神经系统"。再进一步说，作为中枢神经系统，这是 Netflix