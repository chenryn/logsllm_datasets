(cid:22)
(cid:12)
(cid:28)
(cid:10)
(cid:21)
(cid:7)
(cid:18)
(cid:17)
(cid:14)
(cid:17)
(cid:27)
(cid:19)
(cid:7)
(cid:27)
(cid:26)
(cid:17)
n
i
d
e
m
o
o
z
(cid:1)(cid:2)(cid:4)
(cid:1)(cid:2)(cid:1)(cid:2)
(cid:1)(cid:2)(cid:1)(cid:1)
(cid:5) (cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:1)(cid:14)(cid:7) (cid:15)(cid:16)(cid:17)(cid:11)(cid:18) (cid:19)(cid:14)(cid:10)(cid:20) (cid:18)(cid:21)(cid:16)(cid:14)(cid:7)(cid:22)
(a) DOD − DSSE vs. ODS and traditional DSSE
(cid:1)(cid:23)(cid:2)(cid:2)
(cid:1)(cid:2)(cid:2)(cid:2)
(cid:3)(cid:2)(cid:2)
(cid:25)(cid:2)(cid:2)
(cid:24)(cid:2)(cid:2)
(cid:23)(cid:2)(cid:2)
(cid:2)
(cid:1)(cid:2)(cid:3)
(cid:29)(cid:30)(cid:29)(cid:13)(cid:29)(cid:31)(cid:31)(cid:32)
(cid:29)(cid:31)(cid:31)(cid:32)(cid:1) (cid:33)(cid:23)(cid:25)(cid:34)(cid:1) (cid:19)(cid:18)(cid:7)(cid:16)(cid:11)(cid:21)(cid:35)(cid:22)
(cid:29)(cid:31)(cid:31)(cid:32)(cid:1) (cid:33)(cid:23)(cid:25)(cid:34)(cid:1) (cid:19)(cid:36)(cid:15)(cid:12)(cid:16)(cid:37)(cid:7)(cid:22)
(cid:1)(cid:2)(cid:4)
(cid:1)(cid:2)(cid:1)(cid:2)
(cid:1)(cid:2)(cid:1)(cid:1)
(cid:5) (cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:1)(cid:14)(cid:7) (cid:15)(cid:16)(cid:17)(cid:11)(cid:18) (cid:19)(cid:14)(cid:10)(cid:20) (cid:18)(cid:21)(cid:16)(cid:14)(cid:7)(cid:22)
(b) DOD − DSSE vs. traditional DSSE
Figure 5: End-to-end cryptographic delay with out-state network setting, where (b) is zoomed in view of DOD-DSSE and
traditional DSSE, which is hard to be observed in (a).
because the former provides sublinear operating time while
the latter achieves the best security. We applied an average
padding strategy to mitigate the information leakage from
ODICT due to the optimal search/update time property.
We analyzed the asymptotic communication complexity
of the aforementioned schemes. Traditional DSSE achieves
optimal bandwidth overhead of O(r), where r is the number
of data corresponding with the search/update query [26].
In ODS approaches, keyword-ﬁles pairs are packaged into
4KB blocks, and the total number of blocks is denoted as B.
Given a search/update operation, the number of blocks being
transmitted by OMAT and ODICT is s · c · O(log B) and
s′ · c· O(log B), respectively, where c = 4 is the bucket size in
Path ORAM [24] and s, s′ are the numbers of communication
rounds to retrieve suﬃcient results for the query [25]. In
DOD-DSSE , the bandwidth complexity is 4 · O(N ), where
N is the maximum number of unique keywords/ﬁles that
DOD-DSSE can support.
After that, we benchmarked the actual performance of
DOD-DSSE and its counterparts in practice based on the
previous asymptotic communication analysis. Figures 4a,
4b demonstrate the actual end-to-end cryptographic delay
(i.e., encryption, transmission delays) of schemes using in-
Table 2: Total size of encrypted data structure(s) in GB.
108
# keyword-ﬁle pairs DOD-DSSE† DSSE [26] ODICT OMAT
0.05
1.16
4.66
10.48
18.63
29.10
41.91
1.37
37.38
149.54
336.46
598.15
934.60
1345.83
0.1
2.4
10
22.4
40
62.4
90
1010
2.5 × 109
2.25 × 1010
4 × 1010
6.25 × 1010
9 × 1010
0.02
0.6
2.4
5.6
10
15.6
22.4
† DOD-DSSE stores two encrypted data structures in two non-colluding
servers so that the storage cost for each server will be a half of presented
numbers.
state Amazon EC2 server(s) with various data structure
sizes. We can see that DOD-DSSE incurs a small-constant
communication overhead due to extra queries (i.e., 4x times
slower than traditional DSSE). However, it is approximately
50x and 210x times faster than ODICT and OMAT which
speciﬁcally take 42 and 167 seconds to perform an operation
on the large data structure, respectively. This indicated that
even though the asymptotic complexity of ODS approaches
looks very eﬃcient, hidden constants such as c, s, s′ actually
contribute a lot to the communication overhead, as shown
in Table 1 and Figure 4a.
311
We inspected the cost of DOD-DSSE to investigate the
impacts of network communication and cryptographic opera-
tions on the end-to-end delay. We observed that the majority
of the delay is due to network transmission, in which the
ratio between it and cryptographic operations is roughly
8:1. To investigate more the impact of network latency and
throughput on DOD-DSSE and its counterparts, we setup
two EC2 servers geographically located outside of our state,
resulting in a network latency and throughput of 31 ms
and 30 Mbps, respectively. As it can be seen in Figure 5b,
this geographically distributed out-state environment makes
DOD-DSSE and traditional DSSE perform approximately
200 ms and 100 ms slower than in-state setting, respectively.
Due to the characteristics of ODS requiring a number of
communication rounds to perform a search or update oper-
ation, slower network latency and throughput signiﬁcantly
impact the performance of ODICT and OMAT. We can see
that DOD-DSSE is now 170x and 690x times faster than
ODICT and OMAT, respectively by this setting. Comparing
with the in-state conﬁguration, ODICT and OMAT are both
4.5x times slower than their in-state version. This implies
12.78 minutes and 3.2 minutes to accomplish an operation,
respectively (Figure 5a).
Finally, we analyzed the storage cost of DOD-DSSE . With
the largest dataset being experimented in this study (i.e.,
9 × 1011 keyword-ﬁle pairs), DOD-DSSE requires approxi-
mately 35 MB to store at the client side all necessary infor-
mation for its operation such as symmetric keys, Tf , Tw and
global counter arrays. This can be easily fulﬁlled even by
resource-limited devices such as a smartphone or a tablet.
Tables 2 shows the total size of the encrypted data struc-
ture(s) stored at the server side required by DOD-DSSE and
its counterparts with diﬀerent dataset sizes. DOD-DSSE
requires 8x and 2x times as much storage space as that of
traditional DSSE and OMAT, respectively, and yet, is much
more compact than ODICT using dictionary10. Consider-
ing the advantages of DOD-DSSE in terms of eﬃciency,
storage cost and achieved security aspects over traditional
DSSE and ORAM-based methods, our scheme is likely to
be an ideal security-performance trade-oﬀ DSSE scheme for
privacy-critical cloud computing.
6. RELATED WORK
Searchable Encryption (SE). The ﬁrst SE was proposed
by Song et al. in [20] and was followed by several schemes
which can search only on static ﬁle collections (e.g., [6, 8]).
Kamara et al. were among the ﬁrst to develop a DSSE
scheme [13], followed by several DSSE schemes that oﬀer
various performance and security properties such as small
leakage [21, 26], scalable searches with extended query types
[5, 4] and high eﬃciency [17].
All DSSE schemes leak data structure-access pattern in-
cluding search pattern and update pattern (see Section 1.1).
Liu et al.
in [15] showed that the search pattern reveals
signiﬁcant information about the queried keywords. Bosch et
al. in [2] developed a search pattern hiding DSSE, which re-
quires re-encrypting and transmitting entire encrypted data
structure per search query and, therefore, seems to be im-
practical. Islam et al. in [11] showed that, with some prior
10We would like to notice an advantage of dictionary over matrix
structure. That is, it is not limited by the number of unique keywords
and ﬁles, but only the maximum number of keyword-ﬁle pairs which
might be useful for applications requiring diverse keyword-ﬁle relations.
knowledge on the keyword/ﬁle pairs, an adversary can learn
signiﬁcant information about the queries and keywords from
the access pattern. The update pattern leaks information
during updates depending on the type of data structure used
and other security-performance trade-oﬀs [26]: The most
eﬃcient DSSE [13] achieves the least security. The schemes
in [12] and [4] achieved higher privacy. Recently, Yavuz and
Guajardo [26] proposed a scheme that leaks less information.
PIR. Private Information Retrieval (PIR) is the task of
retrieving a data item from a public (unencrypted) database
server without revealing to the server the speciﬁc item that
has been accessed (e.g., [7, 9]). In contrast, in our setting,
the DSSE data structure is encrypted (rather than public)
and it is private to each user. In both settings one also has
distributed (multi-server) versions of the basic protocols.
ORAM. ORAM allows clients to perform arbitrary queries
to an outsourced database without leaking any access pat-
tern. Therefore, it can be used to obliviously access encrypted
data structure in DSSE. Preliminary ORAM schemes [18]
were very costly, but recent progress in ORAM constructions
(e.g., [23, 19, 24, 25, 22]) are promising. The most eﬃcient
and popular ORAM scheme is Path ORAM [24], which oﬀers
optimal bandwidth/processing cost . Despite these improve-
ments, as indicated by recent studies [21, 4, 16, 1], ORAM is
not practical for searchable encryption as it introduces large
bandwidth overhead and high delay.
ODS. ODS is an instantiation of position-based ORAM
(e.g., Path ORAM) speciﬁcally designed for oblivious access
on data structure [25]. Similar to recursive ORAMs, ODS
reduces the client storage cost but increases the number
of communication rounds and bandwidth overhead. Hence,
ODS is also not practical for large data structure in DSSE.
Multi-cloud Oblivious Storage. Stefanov et al. in [22]
proposed an ORAM scheme using two non-colluding servers
to reduce the client bandwidth cost. This approach diﬀers
from us in that two servers are required to perform com-
putation and communication with each other. We only use
servers as basic storage units so that they are only required
to have functionalities to transfer and receive data being
requested.
7. CONCLUSIONS
In this paper, we developed a new oblivious access scheme
over the encrypted data structure(s) for searchable encryp-
tion purposes that we refer to as DOD-DSSE . DOD-DSSE
achieves high security yet practical encrypted search/update
operations simultaneously. That is, DOD-DSSE seals critical
information leakage from the data structure access pattern
by guaranteeing query unlinkability and, therefore, it oﬀers a
much higher security than traditional DSSE schemes. At the
same time, DOD-DSSE performs two orders of magnitude
faster than using ORAM-based techniques (e.g., ODS with
Path ORAM), for search/update operations on the encrypted
data structure. These properties make DOD-DSSE an ideal
alternative for oblivious yet practical searchable encryption
on privacy-critical cloud computing applications.
8. ACKNOWLEDGMENTS
We would like to thank Gabriel Hackebeil, Daniel Lin as
well as anonymous reviewers for their insightful comments
and suggestions to improve the quality of the paper.
312
9. REFERENCES
[1] V. Bindschaedler, M. Naveed, X. Pan, X. Wang, and
Y. Huang. Practicing oblivious access on cloud storage:
the gap, the fallacy, and the new way forward. In
Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages
837–849. ACM, 2015.
[2] C. Bosch, A. Peter, B. Leenders, H. W. Lim, Q. Tang,
H. Wang, P. Hartel, and W. Jonker. Distributed
searchable symmetric encryption. In Privacy, Security
and Trust (PST), 2014 Twelfth Annual International
Conference on, pages 330–337. IEEE, 2014.
[3] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart.
Leakage-abuse attacks against searchable encryption. In
Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages
668–679. ACM, 2015.
[4] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla,
H. Krawczyk, M.-C. Rosu, and M. Steiner. Dynamic
searchable encryption in very-large databases: Data
structures and implementation. IACR Cryptology
ePrint Archive, 2014:853, 2014.
[14] J. Katz and Y. Lindell. Introduction to modern
cryptography. CRC Press, 2014.
[15] C. Liu, L. Zhu, M. Wang, and Y.-a. Tan. Search pattern
leakage in searchable encryption: Attacks and new
construction. Information Sciences, 265:176–188, 2014.
[16] M. Naveed. The fallacy of composition of oblivious ram
and searchable encryption. Technical report,
Cryptology ePrint Archive, Report 2015/668, 2015.
[17] M. Naveed, M. Prabhakaran, and C. A. Gunter.
Dynamic searchable encryption via blind storage. In
Security and Privacy (S&P), 2014 IEEE Symposium
on, pages 639–654. IEEE, 2014.
[18] B. Pinkas and T. Reinman. Oblivious ram revisited. In
Advances in Cryptology–CRYPTO 2010, pages 502–519.
Springer, 2010.
[19] L. Ren, C. Fletcher, A. Kwon, E. Stefanov, E. Shi,
M. Van Dijk, and S. Devadas. Constants count:
practical improvements to oblivious ram. In 24th
USENIX Security Symposium (USENIX Security 15),
pages 415–430, 2015.
[20] D. X. Song, D. Wagner, and A. Perrig. Practical
techniques for searches on encrypted data. In Security
and Privacy, 2000. S&P 2000. Proceedings. 2000 IEEE
Symposium on, pages 44–55. IEEE, 2000.
[5] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M.-C.
[21] E. Stefanov, C. Papamanthou, and E. Shi. Practical
dynamic searchable encryption with small leakage. In
Annual Network and Distributed System Security
Symposium – NDSS, volume 14, pages 23–26, 2014.
[22] E. Stefanov and E. Shi. Multi-cloud oblivious storage.
In Proceedings of the 2013 ACM SIGSAC conference
on Computer and Communications Security, pages
247–258. ACM, 2013.
[23] E. Stefanov, E. Shi, and D. Song. Towards practical
oblivious ram. arXiv preprint arXiv:1106.3652, 2011.
[24] E. Stefanov, M. Van Dijk, E. Shi, C. Fletcher, L. Ren,
X. Yu, and S. Devadas. Path oram: an extremely
simple oblivious ram protocol. In Proceedings of the
2013 ACM SIGSAC conference on Computer and
Communications security, pages 299–310. ACM, 2013.
[25] X. S. Wang, K. Nayak, C. Liu, T. Chan, E. Shi,
E. Stefanov, and Y. Huang. Oblivious data structures.
In Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security, pages
215–226. ACM, 2014.
[26] A. A. Yavuz and J. Guajardo. Dynamic searchable
symmetric encryption with minimal leakage and
eﬃcient updates on commodity hardware. In Selected
Areas in Cryptography – SAC 2015, Lecture Notes in
Computer Science. Springer International Publishing,
August 2015.
[27] Y. Zhang, J. Katz, and C. Papamanthou. All your
queries are belong to us: The power of ﬁle-injection
attacks on searchable encryption.
Ro¸su, and M. Steiner. Highly-scalable searchable
symmetric encryption with support for boolean queries.
In Advances in Cryptology–CRYPTO 2013, pages
353–373. Springer, 2013.
[6] Y.-C. Chang and M. Mitzenmacher. Privacy preserving
keyword searches on remote encrypted data. In Applied
Cryptography and Network Security, pages 442–455.
Springer, 2005.
[7] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan.
Private information retrieval. Journal of the ACM
(JACM), 45(6):965–981, 1998.
[8] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky.
Searchable symmetric encryption: improved deﬁnitions
and eﬃcient constructions. In Proceedings of the 13th
ACM Conference on Computer and communications
security, pages 79–88. ACM, 2006.
[9] I. Goldberg. Improving the robustness of private
information retrieval. In 2007 IEEE Symposium on
Security and Privacy (SP’07), pages 131–148. IEEE,
2007.
[10] F. Hahn and F. Kerschbaum. Searchable encryption
with secure and eﬃcient updates. In Proceedings of the
2014 ACM SIGSAC Conference on Computer and
Communications Security, pages 310–320. ACM, 2014.
[11] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access
pattern disclosure on searchable encryption:
Ramiﬁcation, attack and mitigation. In Annual
Network and Distributed System Security Symposium –
NDSS, volume 20, page 12, 2012.
[12] S. Kamara and C. Papamanthou. Parallel and dynamic
searchable symmetric encryption. In Financial
Cryptography and Data Security, pages 258–274.
Springer, 2013.
[13] S. Kamara, C. Papamanthou, and T. Roeder. Dynamic
searchable symmetric encryption. In Proceedings of the
2012 ACM Conference on Computer and
Communications Security, pages 965–976. ACM, 2012.
313