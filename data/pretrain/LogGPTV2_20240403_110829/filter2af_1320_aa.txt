**作者：Lucifaer  
博客：**
### 0x01 Jenkins的动态路由解析
`web.xml`：
可以看到Jenkins将所有的请求交给`org.kohsuke.stapler.Stapler`来处理的，跟进看一下这个类中的`service`方法：
可以看到这里会根据url来调用不同的webApp，如果url以`/$stapler/bound/`开头，则根节点对象为`org.kohsuke.stapler.bind.BoundObjectTable`，否则为`hudson.model.Hudson`（继承jenkins.model.Jenkins）。
这里涉及到四个参数：
  * req：请求对象
  * rsp：响应对象
  * root：webApp（根节点）
  * servletPath：经过路由解析后的对象
继续向下跟：
在`org.kohsuke.stapler.Stapler#tryInvoke`中会根据不同的webApp的类型对请求进行相应的处理，处理的优先级顺序向下：
  * StaplerProxy
  * StaplerOverridable
  * StaplerFallback
在`tryInvoke`中完成对路由的分派以及将路由与相应的功能进行绑定的操作，这里面比较复杂，但是非常有意思。
我们来看一下文档中是如何介绍路由请求这部分操作的：
文档中详细的说明了当我们传入类似`/foo/bar/`这样的url时路由解析的具体做法，具体看一下`tryInvoke`中的代码实现：
这里首先会根据webApp（根节点）来获取webApp的一个MetaClass对象，然后轮询MetaClass中所有的分派器——也就是Dispatcher.dispatcher。我们这里知道webApp是`hudson.model.Hudson`（继承jenkins.model.Jenkins），也就是说这里创建了MetaClass后会将请求包带入所有的分派器中进行相应的路由处理。
那么接下来就会有两个问题了：
  * metaClass是如何构造的？还有metaClass是个什么东西？
  * 在哪里完成的如文档所说的递归进行路由解析并通过分派器进行相应处理的呢？
这个两个问题困扰我很长的时间，在我耐心的动态调了一遍之后才明白了他的调用原理。
#### metaClass的构建
这里我会用动态调试的方式来解释metaClass的构建过程以及它是一个什么东西。
这里我用根据orange文章中所给出的路由来进行跟踪，路由为`/securityRealm/user/test/`。那么首先看一下metaClass的构建过程：
这里有两个关键点`getMetaClass`以及`getKlass`，首先跟进`getKlass`看一下:
首先先判别我们传进来的node（也就是节点）是否是属于上面三个Facet的一个配置项，关于Facet我的理解是用于简化项目配置项的一种操作，它并不属于J2EE的部分，这部分我是参考。跟进`f.getKlass`，会发现直接返回null，所以我们不用关注这个循环，继续向下看`Klass.java(o.getClass())`：
这里动态的实例化了`KlassNavigator.JAVA`，这里的Klass其实是一个动态实例化的对象，这个对象中存在很多方法用于操作，同时也实例化了`Klass`类。可能现在还是看不出来什么和metaClass有关的东西，那不妨接着看看`getMetaClass`中是怎么处理这个`Klass`的。
跟进`MetaClass`：
在这里首先通过之前实例化的`Klass`对象中的方法来获取node节点的信息，并调用`buildDispatchers()`来创建分派器，这个方法是url调度的核心。
这个方法非常的长，我们来梳理一下（其实orange已经帮助我们梳理了），我是按照代码中自上而下的顺序来整理的：
  * `.do(...)`也就是`do(...)`和`@WebMethod`标注的方法
  * `.doIndex(...)`
  * `js`也就是`js(...)`
  * 有`@JavaScriptMethod`标注的方法
  * `NODE.getTOKEN()`也就是`get()`
  * `NODE.getTOKEN(StaplerRequest)`也就是`get(StaplerRequest)`
  * `.get(String)`也就是`get(String)`
  * `.get(int)`也就是`get(int)`
  * `.get(long)`也就是`get(long)`
  * `.getDynamic(,...)`也就是`getDynamic()`
  * `.doDynamic(...)`也就是`doDynamic()`
也就是说符合以上命名规则的方法都可以被调用。
`buildDispatchers()`的主要作用就是寻找对应的node节点与相应的处理方法（继承家族树中的所有类）并把这个方法加入到分配器dispatchers中。而这里所说的这个方法可能是对节点的进一步处理最后通过反射的方法调用真实处理该节点的方法。
举一个例子，在代码中可以看到在对`get(...)`类的node进行处理的时候都会动态生成一个`NameBasedDispatcher`对象并将其添加进入dispathers中，而这个对象都存在`doDispatch()`的方法用于处理分派器传来的请求，而在处理请求的最后都会调用`invoke`来反射调用真实处理方法：
这里先记一下这样的处理过程，在之后的分派器处理路由请求时会有涉及。
#### 路由请求处理过程
仍然是以上面`/securityRealm/user/test/`路由为例。首先不看代码，先根据文档中所描述的处理方式大致猜一下这一串路由是如何解析的：
    -> node: Hudson
      -> node: securityRealm
        -> node: user
          -> node: test
回到`tryInvoke`中我们来具体看一下在代码中是怎么做的：
注意到这里会有一个遍历`metaClass.dispatchers`的操作，然后在每次遍历的过程中，将请求、返回以及node节点传入`Dispatcher.dispatch`中，跟一下这个`dispatch`：
这个是一个抽象类，那么他的具体实现是什么呢，还记得上一节所探讨的metaClass中对get请求的处理么，它们都会动态的生成一个`NameBasedDispatcher`对象，而我们现在的处理过程中就会调用到这个对象中的`dispatch`方法，我们来看一下：
注意看红框的部分，这里会获取请求的node节点，并调用其具体实现中的`doDispatch`方法，而这个`doDispatch`方法是在`buildDispatchers()`中根据不同的node节点动态生成的，那么也就是调用了处理`get(...)`的`doDispatch`：
这里我们有一个疑惑，第一个节点已经ok了，那么如何递归的解析其他的节点呢？这一点需要跟一下`req.getStapler().invoke()`，先看一下`getStapler()`：
就是当前的Stapler。这里的ff是一个`org.kohsuke.stapler.Function`对象，它保存了当前根节点中方法的各种信息：
ff.invoke会返回`Hudson.security.HudsonPrivateSecurityRealm`对象：
然后将这个`HudsonPrivateSecurityRealm`对象作为新的根节点再次调用`tryInvoke`来进行解析，一直递归到将url全部解析完毕，这样才完成了动态路由解析。
### 0x02 Jenkins白名单路由
在跟踪Jenkins的动态路由解析中，一直没有提及一个过程，就是在`org.kohsuke.stapler.Stapler#tryInvoke`中首先对属于`StaplerProxy`的node进行的一个校验：
跟进看一下：
这里首先要进行权限检查，首先检查访问请求是否具有读的权限，如果没有读的权限则会抛出异常，在异常处理中会对URL进行二次检测，如果`isSubjectToMandatoryReadPermissionCheck`返回false，则仍能正常的返回，那么跟进看一下这个方法：
这里有三种方法绕过权限检查，这里着重看一下第一种，可以看到这里有一个白名单，如果请求的路径是这其中的路径的话，就可以绕过权限检测：
### 0x03 绕过ACL进行跨物件操作
这也是orange文章中最为精华的部分，主要是有三个关键点：
  * Java中万物皆继承于java.lang.Object，所以所有在Java中的类都存在`getClass()`这个方法
  * Jenkins的动态路由解析过程也是一个`get(...)`的命名格式，所以`getClass()`可以在Jenkins调用链中被动态调用。
  * 上文中所说的白名单可以绕过ACL的检测
重点说一下第二点，根据文档以及我们上文的分析，如果有这么一个路由：
    http://jenkin.local/adjuncts/whatever/class/classLoader/resource/index.jsp/content
那么在Jenkins的路由解析过程中会是这样的过程：
    jenkins.model.Jenkins.getAdjuncts("whatever") 
    .getClass()
    .getClassLoader()
    .getResource("index.jsp")
    .getContent()
当例子中的class更改成其他的类时，get(...)也会被相应的调用，也就是说可以操作任意的GETTER方法！
理解了这一点，我们只需要把调用链中各个物件间的关系找出来就能构成一条完整的利用链！这一点才是整个漏洞中最精彩的一部分。
### 0x04 整理漏洞利用链