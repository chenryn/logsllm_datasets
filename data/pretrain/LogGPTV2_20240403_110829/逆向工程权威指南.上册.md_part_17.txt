执行scanfO前后，变量x的值没有发生变化，在上述情况下，scanfO函数仅仅返回o，而没对变量进行
赋值。
现在来“hack”一下。右键单击EAX，选中“Setto1”。
在此之后EAX寄存器存储的值被人为设定为1，程序将完成后续的操作，
ou enr
printfO函数会在控制台里显示数据栈里变量x的值。
我们使用F9键继续运行程序。此后控制台的情况如图7.11所示。
图7.11控制合窗口
1850296084是十进制值，其十六进制值就是我们刚才看到的0x6E494714。
7.3.4MSVC:x86+Hiew
下面，我们一起修改可执行文件，所谓的“修改“可执行文件，就是对其打补丁（即人们常说的”patch”）。
通过打补丁的方法，我们可以强制程序在所有情况下都进行输出。
首先，我们要启用MSVC的编译选项/MD，这样编译出来的可执行文件将把标准函数链接到
MSVCR*DLL，以方便我们在可执行文件的文本段里找到mainO函数。此后，我们使用Hiew工具打开可
执行文件，找到.text 段开头部分的 mainO函数（依次使用 Enter,F8,F6,Enter,Enter）。
然后会看到图7.12所示的界面，
ERO
2.g w,!
[r-][]
13rso1
casf
554
[]]
srlott
图7.12使用 Hiew观察main()函数
---
## Page 97
第7章scanf)
79
Hiew能够识别并显示ASCIIZ，即以null为结束字节的ASCII字符串。它还能识别导入函数的函数名称。
如图7.13所示，将鼠标光标移至.0040127处（即JNZ指令的所在位置，我们使其失效），按F3键，
然后输入“9090”。“9090”是两个连续的NOP（NoOperation，空操作）的opcode。
净32E
cal
R
图7.13在Hiew中把JNZ替换为两条NOP指令
然后按F9键（更新），把修改后的可执行文件保存至磁盘。
连续的9090是典型的修改特征，有的人会觉得不甚美观。此外还可以把这个opcode的第二个字节改
为零（opcode的两个字节代表jump offset），令jcc指令跳转的偏移量为0，从而继续运行下一条指令。
刚才的修改方法可使转移指令失效。除此以外我们还可以强制程序进行转我们可以把jcc对应的opcode的第
一个字节替换为“EB”，不去修改第二字节（ofset）。这种修改方法把条件转移指令替换为了无条件跳转指令。经
过这样的调整之后，本例中的可执行文件都会无条件地显示错误处理信息“Whatyou entered？Huh？”。
7.3.5MSVC:x64
本例使用的变量x是int型整数变量。在x64系统里，int型变量还是32位数据。在64位平台上访间寄存
器的（低）32位时，计算机就要使用助记符以E-头的寄存器名称。然而在访间x64系统的64位指针时，我们
就需要使用R-字头的寄存器名称、处理完整的64位数据。
指令清单7.12MSVC2012x64
$SG2924 DB
_DATASEGMENT
“Enter X: *, OaH, 008
$SG2926 DB
*You entered fd...', Oai, 008
H00,P
$SG2927 DB
$SG2929 DB
*Khat you entered? Hah? *, OaH, 0OH
_DATAENDS
_TEXT SEGMENT
x5 = 32
SLN5:
ma1n
PROC
ub
lea
rcx, OFFSET FLAT:$SG2924 : *Enter X:1
rsp, 56
ca11
lea
rdx, QMoRD PTR x$[rsp]
printf
ca11
Lea
rcx, OFFSET FLAT:SSG2926 :*$d
scanf
cmp
eax, 1
Jne
SHORT $LN2Bnain
---
## Page 98
80
逆向工程权威指南（上册）
nov
edx, DMoRD PTR x$[rsp]
ca11
lea
rcx, OFFSST FLAT:$SG2927 : *You entered Bd.., 
Jnp
printf
SHORT SLNIenain
$LN2emain1
Lea
ca11
SLNIemain:
printf
; return 0
add
eax,
r8p, 56
eax
main
ret
ENDP
_TEXT
ENDS
END
7.3.6
ARM
ARM: Optimizing Keil 6/2013 (Thumb 式)
指令清单7.13OptimizingKeil6/2013（Thumb模式）
var_8
= -8
PUSH
(R3, LR)
BL
ADR
R0, aEnterX
*Enter X: \n*
_2printf
ADR
MOV
R1, SP
R0, aD
=Pl。1
BL
CMP
R0,1
_Oscanf
ADR
R0, aMhatYouEntered : *What you entered? Huh?\n*
1oc_1E
BL
loc_1A
MOVS
: CODE XREF: main+26
R0, #0
POP
(R3,PC)
loc_1E
LDR
: CODE XREF: main+12
R1, [SP,#8+var_8]
ADR
R0, aYouEnteredD_
BL
; *You entered ld...\n*
1oc_1A
B
这里我们见到了未介绍过的CMP和BEQ指令。
ARM系统的CMP与x86系统的同名指令相似，它们都是将两个参数相减，并设置相应的标志位。
BEQ是条件转移指令（BranchifEQual），在CMP操作数相等的情况下进行跳转。如果CMP比较
的两个值相同，则ZF标志寄存器的值就会是1，那么BEQ指令就会跳转到它指定的偏移量上去。它
与x86的JZ指令作用相同。
其余的指令并不难理解：程序流有两个分支，这两个分支最终收敛于loc_1A处，通过“MOVR0，#0”
指令把返回值保存于R0寄存器，然后退出。
ARM64
指令清单7.14Non-optimizing GCC 4.9.1ARM64
1 .100:
3 .1C1:
-string “Enter X:*
-8tring *ld*
5 .1C2:
---
## Page 99
L
scanfO)
81
string “You entezed id...\n*
-LC3:
CgnH cpeuerue no xeugg burig*
10 : save FP and LR in stack frane:
9 f6:
12 set stack frane (FP=SP)
stp
x29, ×30,
[sp，-32]1
14 ; load pointer to the
13
add
x29, sp,0
1
adrp
“Enter X:" string:
x0,-LC0
add
x0,x0, :1o12:,LC0
18 :1oad pointer
17
b1
r to the *ad string:
puts
19
20
adrp
add
x0，x0,:1o12:.LC1
x0,
-LC1
21;calculate
address of x variable in the local stack
22
add
x1, x29, 28
23
scanf() returned result in W0.
b1
_1soc99_scanf
25:
24;
check it:
27 : BNE is Branch if Not Equal
9Z
duo
w0, 1
28 : 80 if w0<>0, junp to L2 wi11 be occurred
30 : at this moment wo=1, meaning no error
bne
-L2
31 :1oad x value fron the local stack
33 : load pointer to the *You entered ed...\n* string:
32
1dr
w1, [x29,28]
C
35
adrp
add
x0,x0,:1o12:.LC2
x0,.LC2
37 ; skip
36
b1
the
code, which print the “What you entered? Huh?° string:
printf
39.L2:
8C
b
.L3
40 : load pointer to the *What you entered? Buh?* string:
41
adrp
x0, x0,:1o12:.LC3
x0,.LC3
43
42
add
44.L3:
b1
puts
45;return 0
47 : restore FP and LR:
46
BoV
w0,0
48
1dp
x29, x30, [sp], 32
49
ret
上述程序通过CMP/BNE指令对控制分支语句。
7.3.7
MIPS
指令清单 7.15Optimizing GCC 4.4.5（IDA)
.text:004006A0 main:
.text:004006A0 var_18
.text:004006A0
= -0x18
.text:004006A0 var_10
= =0x10
.text:004006A0 var_4
.text: 004006A0
-
0090000:2X01
1u1
$gp,0x42
-text:004006A4
.text:004006AB
11
Bddiu
'des
d6s
0x418960
-0×28
.text:004006AC
8V
$gp, 0x28+var_18($sp)
$ra,
0x28+var_4 ($ap)
.text:00400680
-text:004006B4
1a
$t9, puts
.text:004006BB
1ui
$a0,0x40
. text:004006BC
ja1r
snd : 63$
-text:004006c0
1a
$a0, aEnterX
 *Enter X:*
---
## Page 100
82
逆向工程权威指南（上册）
.text:004006C4
1v
$gp, 0x28+var_18 ($sp)
,text:004006CB
lui
$a0, 0x40
. text:004006cc
.text:00400600
'6$
$a0, aD
_isoc99_scanf
La
$t9 : _isoc99_scanf
+ "1d"
. text:004006D4
ja1r
-text:004006D8
addlu
$a1, $sp, 0x28+var_10 # branch delay s1ot
. text:004006DC
1i
$v1,
.text:004006E0
1v
$gp, 0x28+var_18($sp)
1
.text:00400684
beg
Sat, Szero
`OAS
$v1, 1oc_40070C
-text:004006E8
1a
# branch delay 8lot, NOP
.text:004006F0
. text:004006EC
*63$
lu1
$a0, 0x40
puts
.text:004006F4
jalr
snd : 63$
.text:004006F8
1v
la
$ra, 0x28+var_4($sp)
$a0,
(gng cpatagua noA yeun。 Ipazaqugnoxieuge
.text:004006FC
. text:00400700
.text:00400704
move
jr
$v0, $zero
$sp, 0x28
$ra
.text:00400708
add1u
.text:0040070c 1oc_40070C:
.text:0040070c
1a
$t9, printf
-text:00400710
1×
1ui
$a1, 0x28+var_10 ($sp)
-text:00400718
.text:00400714
jalr
$t9 : printf
$a0, 0x40
.text:0040071c
1a
$a0, aYouEnteredD_
-text:00400720
 *You entered id...\n*
1v
Sra,
0x28+var_4 (§sp)
text:00400724
.text:00400728
nove
$ra
-text:0040072C
add1u
$sp, 0x28
scanfO函数通过SV0寄存器传递其返回值。地址为0x004006E4的指令负责比较SV0和SV1的值。其中，
SV1在0x004006DC处被赋值为1。BEQ的作用是“BranchEqual”（在相等时进行跳转）。如果两个寄存器
里的值相等，即成功读取了1个整数，那么程序将会从0x0040070C处继续执行指令。
7.3.8练习题
JNE/JNZ指令可被修改为JE/JZ指令，而且后者也可被修改为前者。BNE和BEQ之间也有这种关系。
不过，在进行这种替代式修改之后，还要对程序的基本模块进行修改。请多进行一些有关练习。
7.4练习题
7.4.1题目
这段代码在Linuxx86-64上用GCC编译，运行的时候都崩溃了（段错误）。然面，它在Windows环境
下用Msvc2010x86编译后却能工作，为什么？
include 
include 
void alter_string(char *s)
printf (“Resuit: ls\n*, s))
strepy (8,“Goodbye!*);
1;
int nain()
alter_string (*Bello, vorld!\n*);
---
## Page 101
第8章
参数获
取
调用方（caller）函数通过栈向被调用方（callee）函数传递参数。本章介绍被调用方函数获取参数的
具体方式。
指令清单8.1范例
#include 
Init f (1nt a, int b,int c)
return a*b+c:
Int nain()
printf (*d\n°, t(1, 2, 3)))
return 0:
8.1
x86
8.1.1
MSVC
使用MSVC2010 Express编译上述程序，可得到汇编指令如下。
指令清单8.2MSVC2010Express
_TEXTSEGMENT
_b$ - 12
_a$ - 8
 size = 4
_c$ = 16
 size = 4
PROC
; size = 4
push
nov
ebp,esp
ebp
nov
eax,
DMORD PTR _a4[ebp]
imu1
eax,
DWORD PTR _c$ [ebp]
add
eax,
pop
ret
dqa
ENDP
_f
nain