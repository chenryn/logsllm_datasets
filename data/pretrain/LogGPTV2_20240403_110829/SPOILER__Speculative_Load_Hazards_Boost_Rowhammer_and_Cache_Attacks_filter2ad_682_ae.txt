we test add and leal, which use the Arithmetic Logic Unit
(ALU) and the Address Generation Unit (AGU), respectively.
Figure 12 shows that only 1000 adds can be executed be-
tween the stores and load before the SPOILER effect is lost.
Since each add typically takes about 1 cycle to execute, this
roughly gives a 1000 cycle depth for SPOILER. Considering
the observed depth, we discuss potential attacks that can track
the speculative load in the following two scenarios.
7 Tracking Speculative Loads With SPOILER
7.1 SPOILER Context Switch
Single-threaded attacks can be used to steal information from
other security contexts running before/after the attacker code
on the same thread [8, 41]. Example scenarios are I) context
switches between processes of different users, or II) between
a user process and a kernel thread, and III) Intel Software
Guard eXtensions (SGX) secure enclaves [41, 54]. In such at-
tacks, the adversary puts the microarchitecture to a particular
state, waits for the context switch and execution of the victim
thread, and then tries to observe the microarchitectural state
after the victim’s execution. We propose an attack where the
adversary 1) ﬁlls the store buffer with arbitrary addresses, 2)
issues the victim context switch and lets the victim perform a
secret-dependent memory access, and 3) measures the execu-
tion time of the victim. Any correlation between the victim’s
In this attack, we are interested in tracking a memory access in
the privileged kernel environment after a context switch. First,
we ﬁll the store buffer with addresses that have the same page
offset, and then execute a system call. During the execution
of the system call, we expect to observe a delayed execution
if a secret load address has aliasing with the stores. We
utilize SPOILER to iterate over various virtual pages, thus
some of the pages have more noticeable latency due to the
1 MB aliasing. We analyze multiple syscalls with various
execution times. For instance, Figure 13 shows the execution
time for mincore. In the ﬁrst experiment (red/1 MB Conﬂict),
we ﬁll the store buffer with addresses that have aliasing with
a memory load operation in the kernel code space. The 1 MB
aliasing delay with 7 steps suggests that we can track the
632    28th USENIX Security Symposium
USENIX Association
0123456Number of Hammers1080510152025Amount of Bit Flips1h, 5m10h, 50m21hr, 40m1d, 9h1d, 19h2d, 6h2d, 17h0500100015002000250030003500400001020nop0100200300400500600700800900100001020add0200400600800100012001400160018002000Number of Operations01020Number of StepslealFigure 13: Execution time of mincore system call. When a
kernel load address has aliasing with the attacker’s stores
(red/1MB Conﬂict), the step-wise delay will appear. These
timings are measured with Kernel Page Table Isolation dis-
abled.
Figure 14: The effect of SPOILER on TLB ﬂush. The execu-
tion cycle always increases for 4 kB aliased addresses, except
for some of the virtual pages inside in the store buffer where
we observe step-wise hills.
address of a kernel memory load by the knowledge of our
arbitrary ﬁlled store addresses. The blue (No Conﬂict) line
shows the timing when there is no aliasing between the target
memory load and the attackers store. Surprisingly, only by
ﬁlling the store buffer, the system call executes much slower:
the normal execution time for mincore should be around
250 cycles (cyan/No Store). This proof of concept shows
that SPOILER can be used to leak information from more
privileged contexts, however this is limited only to loads that
appear at the beginning of the next context.
7.2 Negative Result: SPOILER SGX
In this experiment, we try to combine SPOILER with the
CacheZoom [41] approach to create a novel single-threaded
side-channel attack against SGX enclaves with high temporal
and spatial resolution (4-byte) [40]. We use SGX-STEP [53]
to precisely interrupt every single instruction. Nemesis [54]
shows that the interrupt handler context switch time is depen-
dent on the execution time of the currently running instruction.
On our test platform, Core i7-8650U, each context switch on
an enclave takes about 12000 cycles to execute. If we ﬁll
the store buffer with memory addresses that match the page
offset of a load inside the enclave in the interrupt handler,
the context switch timing is increased to about 13500 cycles.
While we cannot observe any correlation between the matched
4 kB or 1 MB aliased addresses, we do see unexpected peri-
odic downward peaks with a similar step-wise behavior as
SPOILER(Figure 14). We later reproduce a similar behavior
by running SPOILER before an ioctl routine that ﬂushes
the TLB on each call. Intel SGX also performs an implicit
TLB ﬂush during each context switch. We can thus infer that
the downward peaks occur due to the TLB ﬂush, especially
since the addresses for the downward peaks do not have any
address correlation with the load address. This suggests that
the TLB ﬂush operation itself is affected by SPOILER. This
effect eliminates the opportunity to observe any potential cor-
relation due to the speculative load. As a result, we can not
use SPOILER to track memory accesses inside an enclave.
Further exploration of the root cause of the TLB ﬂush effect
can be carried out as a future work.
8 Mitigations
Software Mitigations The attack exploits the fact that when
there is a load instruction after a number of store instruc-
tions, the physical address conﬂict causes a high timing be-
havior. This happens because of the speculatively executed
load before all the stores are ﬁnished executing. There is
no software mitigation that can completely erase this prob-
lem. While the timing behavior can be removed by inserting
store fences between the loads and stores, this cannot be
enforced to the user’s code space, i.e., the user can always
leak the physical address information. Another yet less robust
approach is to execute other instructions between the loads
and stores to decrease the depth of the attack. However,
both of the approaches are only applicable to defend against
attacks such as the one described in Section 7.
As for most attacks on JavaScript, removing accurate timers
from the browser would be effective against SPOILER. Indeed,
some timers have been removed or distorted by jitters as a
response to attacks [35]. There is however a wide range of
timers with varying precision available, and removing all of
them seems impractical [13, 46].
When it is not possible to mitigate the microarchitectural
attacks, developers can use dynamic tools to at least de-
tect the presence of such leakage [6, 9, 63]. One of the dy-
namic approaches is gained by monitoring hardware perfor-
mance counters in real-time. As explained in Section 4.1, two
of the counters Ld_Blocks_Partial:Address_Alias and
Cycle_Activity:Stalls_Ldm_Pending have high correla-
tions with the leakage.
USENIX Association
28th USENIX Security Symposium    633
050100150200250300Page Number200400600800100012001400Cycle1 MB ConflictNo ConflictNo Store2003004005006007008009001000Page Number800100012001400160018002000CycleHardware Mitigations The hardware design for the mem-
ory disambiguator may be revised to prevent such physical
address leakage, but modifying the speculative behavior may
cause performance impacts. For instance, partial address com-
parison was a design choice for performance. Full address
comparison may address this vulnerability, but will also im-
pact performance. Moreover, hardware patches are difﬁcult to
be applied to legacy systems and take years to be deployed.
9 Conclusion
We introduced SPOILER, a novel approach for gaining phys-
ical address information by exploiting a new information
leakage due to speculative execution. To exploit the leakage,
we used the speculative load behavior after jamming the store
buffer. SPOILER can be executed from user space and requires
no special privileges. We exploited the leakage to reveal in-
formation on the 8 least signiﬁcant bits of the physical page
number, which are critical for many microarchitectural at-
tacks such as Rowhammer and cache attacks. We analyzed
the causes of the discovered leakage in detail and showed how
to exploit it to extract physical address information.
Further, we showed the impact of SPOILER by performing
a highly targeted Rowhammer attack in a native user-level
environment. We further demonstrated the applicability of
SPOILER in sandboxed environments by constructing efﬁ-
cient eviction sets from JavaScript, an extremely restrictive
environment that usually does not grant any access to physical
addresses. Gaining even partial knowledge of the physical
address will make new attack targets feasible in browsers even
though JavaScript-enabled attacks are known to be difﬁcult to
realize in practice due to the limited nature of the JavaScript
environment. Broadly put, the leakage described in this paper
will enable attackers to perform existing attacks more efﬁ-
ciently, or to devise new attacks using the novel knowledge.
The source code for SPOILER is available on GitHub6.
Responsible Disclosure We informed the Intel Product Secu-
rity Incident Response Team (iPSIRT) of our ﬁndings. iPSIRT
thanked for reporting the issue and for the coordinated dis-
closure. iPSIRT then released the public advisory and CVE.
Here is the time line for the responsible disclosure:
• 12/01/2018: We informed our ﬁndings to iPSIRT.
• 12/03/2018: iPSIRT acknowledged the receipt.
• 04/09/2019: iPSIRT released public advisory (INTEL-
SA-00238) and assigned CVE (CVE-2019-0162).
Acknowledgments
We thank Yuval Yarom, our shepherd Eric Wustrow and the
anonymous reviewers for their valuable comments for improv-
ing the quality of this paper.
6https://github.com/UzL-ITS/Spoiler
This work is supported by U.S. Department of State, Bu-
reau of Educational and Cultural Affairs’ Fulbright Program
and National Science Foundation under grant CNS-1618837
and CNS-1814406. We also thank Cloudﬂare for their gener-
ous gift to support our research.
References
[1] Jeffery M Abramson, Haitham Akkary, Andrew F Glew, Glenn J Hinton,
Kris G Konigsfeld, and Paul D Madland. Method and apparatus for
performing a store operation, April 23 2002. US Patent 6,378,062.
[2] Jeffrey M Abramson, Haitham Akkary, Andrew F Glew, Glenn J Hinton,
Kris G Konigsfeld, Paul D Madland, David B Papworth, and Michael A
Fetterman. Method and apparatus for dispatching and executing a load
operation to memory, February 10 1998. US Patent 5,717,882.
[3] Zelalem Birhanu Aweke, Salessawi Ferede Yitbarek, Rui Qiao, Reetu-
parna Das, Matthew Hicks, Yossi Oren, and Todd Austin. Anvil:
Software-based protection against next-generation rowhammer attacks.
ACM SIGPLAN Notices, 51(4):743–755, 2016.
[4] Naomi Benger, Joop van de Pol, Nigel P. Smart, and Yuval Yarom.
“ooh aah... just a little bit” : A small amount of side channel can go a
long way. In Cryptographic Hardware and Embedded Systems – CHES
2014, pages 75–92, Berlin, Heidelberg, 2014. Springer.
[5] Daniel J Bernstein. Cache-timing attacks on aes, 2005.
[6] Samira Briongos, Gorka Irazoqui, Pedro Malagón, and Thomas Eisen-
barth. Cacheshield: Detecting cache attacks through self-observation.
In Proceedings of the Eighth ACM Conference on Data and Application
Security and Privacy, CODASPY ’18, pages 224–235, New York, NY,
USA, 2018. ACM.
[7] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Ben-
jamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin,
and Daniel Gruss. A systematic evaluation of transient execution at-
tacks and defenses. arXiv preprint arXiv:1811.05441, 2018.
[8] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang
Lin, and Ten H Lai. Sgxpectre attacks: Stealing intel secrets from sgx
enclaves via speculative execution. arXiv preprint arXiv:1802.09085,
2018.
[9] Marco Chiappetta, Erkay Savas, and Cemal Yilmaz. Real time detec-
tion of cache-based side-channel attacks using hardware performance
counters. Applied Soft Computing, 49:1162–1174, 2016.
[10] Jack Doweck. Inside intel R(cid:13) core microarchitecture. In Hot Chips 18
Symposium (HCS), 2006 IEEE, pages 1–35. IEEE, 2006.
[11] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. Jump
In The 49th
over aslr: Attacking branch predictors to bypass aslr.
Annual IEEE/ACM International Symposium on Microarchitecture,
MICRO-49, pages 40:1–40:13, Piscataway, NJ, USA, 2016. IEEE Press.
[12] Agner Fog. The microarchitecture of intel, amd and via cpus: An
optimization guide for assembly programmers and compiler makers.
Copenhagen University College of Engineering, pages 02–29, 2012.
[13] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi.
Grand pwning unit: Accelerating microarchitectural attacks with the
gpu. In Grand Pwning Unit: Accelerating Microarchitectural Attacks
with the GPU, page 0, Washington, DC, USA, 2018. IEEE, IEEE Com-
puter Society.
[14] Daniel Genkin, Lev Pachmanov, Eran Tromer, and Yuval Yarom. Drive-
by key-extraction cache attacks from portable code. In International
Conference on Applied Cryptography and Network Security, pages
83–102. Springer, 2018.
[15] Mel Gorman. Understanding the Linux Virtual Memory Manager.
Prentice Hall, London, 2004.
634    28th USENIX Security Symposium
USENIX Association
[16] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas
Jufﬁnger, Sioli O’Connell, Wolfgang Schoechl, and Yuval Yarom. An-
other ﬂip in the wall of rowhammer defenses. In 2018 IEEE Symposium
on Security and Privacy (SP), pages 245–261. IEEE, 2018.
[33] Moritz Lipp, Daniel Gruss, Michael Schwarz, David Bidner, Clémen-
tine Maurice, and Stefan Mangard. Practical keystroke timing attacks
in sandboxed javascript. In Computer Security – ESORICS 2017, pages
191–209. Springer, 2017.
[17] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and
Stefan Mangard. Prefetch side-channel attacks: Bypassing smap and
kernel aslr. In Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, CCS ’16, pages 368–379,
New York, NY, USA, 2016. ACM.
[18] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. Rowham-
mer.js: A remote software-induced fault attack in javascript. In Detec-
tion of Intrusions and Malware, and Vulnerability Assessment, pages
300–321. Springer, 2016.
[19] Lars T Hansen. Shared memory: Side-channel information leaks, 2016.
[20] Sebastien Hily, Zhongying Zhang, and Per Hammarlund. Resolving
false dependencies of speculative load instructions, October 13 2009.
US Patent 7,603,527.
[21] Jann Horn. speculative execution, variant 4: speculative store bypass,
2018.
[22] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing side
channel attacks against kernel space aslr. In 2013 IEEE Symposium on
Security and Privacy, pages 191–205. IEEE, 2013.
[23] Mehmet Sinan ˙Inci, Berk Gulmezoglu, Gorka Irazoqui, Thomas Eisen-
barth, and Berk Sunar. Cache attacks enable bulk key recovery on the
cloud. In Cryptographic Hardware and Embedded Systems – CHES
2016, pages 368–388, Berlin, Heidelberg, 2016. Springer.
[24] Intel.
Intel R(cid:13) 64 and IA-32 Architectures Optimization Reference
Manual.
[25] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. S$a: A shared
cache attack that works across cores and deﬁes vm sandboxing – and
its application to aes. In Proceedings of the 2015 IEEE Symposium on
Security and Privacy, SP ’15, pages 591–604, Washington, DC, USA,
2015. IEEE Computer Society.
[26] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. Systematic re-
verse engineering of cache slice selection in intel processors. In 2015
Euromicro Conference on Digital System Design (DSD), pages 629–
636. IEEE, 2015.
[27] Yeongjin Jang, Sangho Lee, and Taesoo Kim. Breaking kernel address
space layout randomization with intel tsx. In Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security,
pages 380–392. ACM, 2016.
[28] Vasileios P Kemerlis, Michalis Polychronakis, and Angelos D