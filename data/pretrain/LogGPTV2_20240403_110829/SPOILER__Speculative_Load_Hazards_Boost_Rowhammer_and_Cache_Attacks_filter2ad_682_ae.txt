### Optimized Text

We tested the `add` and `leal` instructions, which utilize the Arithmetic Logic Unit (ALU) and the Address Generation Unit (AGU), respectively. Figure 12 illustrates that only 1000 `add` operations can be executed between store and load instructions before the SPOILER effect is lost. Given that each `add` typically takes about one cycle to execute, this indicates a depth of approximately 1000 cycles for SPOILER. Considering this observed depth, we will discuss potential attacks that can track speculative loads in the following two scenarios.

### 7 Tracking Speculative Loads with SPOILER

#### 7.1 SPOILER Context Switch

Single-threaded attacks can be used to steal information from other security contexts running before or after the attacker's code on the same thread [8, 41]. Examples include context switches between processes of different users, between a user process and a kernel thread, and within Intel Software Guard eXtensions (SGX) secure enclaves [41, 54]. In such attacks, the adversary manipulates the microarchitecture into a specific state, waits for the context switch, and then observes the microarchitectural state after the victim's execution. We propose an attack where the adversary:
1. Fills the store buffer with arbitrary addresses.
2. Initiates a context switch to the victim, allowing it to perform a secret-dependent memory access.
3. Measures the execution time of the victim.

In this attack, we aim to track a memory access in the privileged kernel environment after a context switch. First, we fill the store buffer with addresses that have the same page offset, and then execute a system call. During the system call, we expect to observe delayed execution if a secret load address has aliasing with the stores. By using SPOILER to iterate over various virtual pages, some pages exhibit more noticeable latency due to 1 MB aliasing. We analyze multiple syscalls with varying execution times. For example, Figure 13 shows the execution time for the `mincore` syscall. In the first experiment (red/1 MB Conflict), we fill the store buffer with addresses that have aliasing with a memory load operation in the kernel code space. The 1 MB aliasing delay with 7 steps suggests that we can track the address of a kernel memory load by knowing our arbitrary filled store addresses. The blue (No Conflict) line shows the timing when there is no aliasing between the target memory load and the attacker's stores. Surprisingly, merely filling the store buffer causes the system call to execute much slower: the normal execution time for `mincore` should be around 250 cycles (cyan/No Store). This proof of concept demonstrates that SPOILER can be used to leak information from more privileged contexts, but this is limited to loads that appear at the beginning of the next context.

#### 7.2 Negative Result: SPOILER SGX

In this experiment, we attempted to combine SPOILER with the CacheZoom [41] approach to create a novel single-threaded side-channel attack against SGX enclaves with high temporal and spatial resolution (4-byte) [40]. We used SGX-STEP [53] to precisely interrupt every single instruction. Nemesis [54] shows that the interrupt handler context switch time depends on the execution time of the currently running instruction. On our test platform, Core i7-8650U, each context switch on an enclave takes about 12000 cycles. If we fill the store buffer with memory addresses that match the page offset of a load inside the enclave in the interrupt handler, the context switch timing increases to about 13500 cycles. While we cannot observe any correlation between the matched 4 kB or 1 MB aliased addresses, we do see unexpected periodic downward peaks with a similar step-wise behavior as SPOILER (Figure 14). We later reproduced a similar behavior by running SPOILER before an `ioctl` routine that flushes the TLB on each call. Intel SGX also performs an implicit TLB flush during each context switch. We infer that the downward peaks occur due to the TLB flush, especially since the addresses for the downward peaks do not have any address correlation with the load address. This suggests that the TLB flush operation itself is affected by SPOILER. This effect eliminates the opportunity to observe any potential correlation due to the speculative load. As a result, we cannot use SPOILER to track memory accesses inside an enclave. Further exploration of the root cause of the TLB flush effect can be carried out as future work.

### 8 Mitigations

#### Software Mitigations

The attack exploits the fact that a load instruction following a number of store instructions causes high timing behavior due to physical address conflict. This happens because the load is speculatively executed before all the stores are finished. There is no software mitigation that can completely eliminate this problem. While the timing behavior can be removed by inserting store fences between the loads and stores, this cannot be enforced in the user's code space, as the user can always leak physical address information. Another, less robust approach is to execute other instructions between the loads and stores to decrease the depth of the attack. However, both approaches are only applicable to defending against attacks like the one described in Section 7.

For most JavaScript-based attacks, removing accurate timers from the browser would be effective against SPOILER. Indeed, some timers have been removed or distorted by jitters in response to attacks [35]. However, a wide range of timers with varying precision are available, and removing all of them seems impractical [13, 46].

When it is not possible to mitigate microarchitectural attacks, developers can use dynamic tools to at least detect the presence of such leakage [6, 9, 63]. One dynamic approach involves monitoring hardware performance counters in real-time. As explained in Section 4.1, two counters, `Ld_Blocks_Partial:Address_Alias` and `Cycle_Activity:Stalls_Ldm_Pending`, have high correlations with the leakage.

#### Hardware Mitigations

The hardware design for the memory disambiguator may be revised to prevent such physical address leakage, but modifying the speculative behavior may cause performance impacts. For instance, partial address comparison was chosen for performance reasons. Full address comparison could address this vulnerability but would also impact performance. Moreover, hardware patches are difficult to apply to legacy systems and take years to deploy.

### 9 Conclusion

We introduced SPOILER, a novel approach for gaining physical address information by exploiting a new information leakage due to speculative execution. To exploit the leakage, we used the speculative load behavior after jamming the store buffer. SPOILER can be executed from user space and requires no special privileges. We exploited the leakage to reveal information on the 8 least significant bits of the physical page number, which are critical for many microarchitectural attacks such as Rowhammer and cache attacks. We analyzed the causes of the discovered leakage in detail and showed how to exploit it to extract physical address information.

Furthermore, we demonstrated the impact of SPOILER by performing a highly targeted Rowhammer attack in a native user-level environment. We also showed the applicability of SPOILER in sandboxed environments by constructing efficient eviction sets from JavaScript, an extremely restrictive environment that usually does not grant any access to physical addresses. Gaining even partial knowledge of the physical address will make new attack targets feasible in browsers, even though JavaScript-enabled attacks are known to be difficult to realize in practice due to the limited nature of the JavaScript environment. Broadly put, the leakage described in this paper will enable attackers to perform existing attacks more efficiently or to devise new attacks using the novel knowledge.

The source code for SPOILER is available on GitHub [6].

### Responsible Disclosure

We informed the Intel Product Security Incident Response Team (iPSIRT) of our findings. iPSIRT thanked us for reporting the issue and for the coordinated disclosure. iPSIRT then released the public advisory and CVE. Here is the timeline for the responsible disclosure:
- 12/01/2018: We informed iPSIRT of our findings.
- 12/03/2018: iPSIRT acknowledged the receipt.
- 04/09/2019: iPSIRT released the public advisory (INTEL-SA-00238) and assigned CVE (CVE-2019-0162).

### Acknowledgments

We thank Yuval Yarom, our shepherd Eric Wustrow, and the anonymous reviewers for their valuable comments for improving the quality of this paper.

[6] https://github.com/UzL-ITS/Spoiler

This work is supported by the U.S. Department of State, Bureau of Educational and Cultural Affairs’ Fulbright Program, and the National Science Foundation under grants CNS-1618837 and CNS-1814406. We also thank Cloudflare for their generous gift to support our research.

### References

[1] Jeffery M Abramson, Haitham Akkary, Andrew F Glew, Glenn J Hinton, Kris G Konigsfeld, and Paul D Madland. Method and apparatus for performing a store operation, April 23, 2002. US Patent 6,378,062.
[2] Jeffrey M Abramson, Haitham Akkary, Andrew F Glew, Glenn J Hinton, Kris G Konigsfeld, Paul D Madland, David B Papworth, and Michael A Fetterman. Method and apparatus for dispatching and executing a load operation to memory, February 10, 1998. US Patent 5,717,882.
[3] Zelalem Birhanu Aweke, Salessawi Ferede Yitbarek, Rui Qiao, Reetuparna Das, Matthew Hicks, Yossi Oren, and Todd Austin. Anvil: Software-based protection against next-generation Rowhammer attacks. ACM SIGPLAN Notices, 51(4):743–755, 2016.
[4] Naomi Benger, Joop van de Pol, Nigel P. Smart, and Yuval Yarom. “ooh aah... just a little bit”: A small amount of side channel can go a long way. In Cryptographic Hardware and Embedded Systems – CHES 2014, pages 75–92, Berlin, Heidelberg, 2014. Springer.
[5] Daniel J Bernstein. Cache-timing attacks on AES, 2005.
[6] Samira Briongos, Gorka Irazoqui, Pedro Malagón, and Thomas Eisenbarth. Cacheshield: Detecting cache attacks through self-observation. In Proceedings of the Eighth ACM Conference on Data and Application Security and Privacy, CODASPY ’18, pages 224–235, New York, NY, USA, 2018. ACM.
[7] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. A systematic evaluation of transient execution attacks and defenses. arXiv preprint arXiv:1811.05441, 2018.
[8] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H Lai. Sgxpectre attacks: Stealing Intel secrets from SGX enclaves via speculative execution. arXiv preprint arXiv:1802.09085, 2018.
[9] Marco Chiappetta, Erkay Savas, and Cemal Yilmaz. Real-time detection of cache-based side-channel attacks using hardware performance counters. Applied Soft Computing, 49:1162–1174, 2016.
[10] Jack Doweck. Inside Intel R Core Microarchitecture. In Hot Chips 18 Symposium (HCS), 2006 IEEE, pages 1–35. IEEE, 2006.
[11] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. Jump over ASLR: Attacking branch predictors to bypass ASLR. In The 49th Annual IEEE/ACM International Symposium on Microarchitecture, MICRO-49, pages 40:1–40:13, Piscataway, NJ, USA, 2016. IEEE Press.
[12] Agner Fog. The microarchitecture of Intel, AMD, and VIA CPUs: An optimization guide for assembly programmers and compiler makers. Copenhagen University College of Engineering, pages 02–29, 2012.
[13] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. Grand pwning unit: Accelerating microarchitectural attacks with the GPU. In Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU, page 0, Washington, DC, USA, 2018. IEEE, IEEE Computer Society.
[14] Daniel Genkin, Lev Pachmanov, Eran Tromer, and Yuval Yarom. Drive-by key-extraction cache attacks from portable code. In International Conference on Applied Cryptography and Network Security, pages 83–102. Springer, 2018.
[15] Mel Gorman. Understanding the Linux Virtual Memory Manager. Prentice Hall, London, 2004.
[16] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas Juffinger, Sioli O’Connell, Wolfgang Schoechl, and Yuval Yarom. Another flip in the wall of Rowhammer defenses. In 2018 IEEE Symposium on Security and Privacy (SP), pages 245–261. IEEE, 2018.
[17] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Mangard. Prefetch side-channel attacks: Bypassing SMAP and kernel ASLR. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS ’16, pages 368–379, New York, NY, USA, 2016. ACM.
[18] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. Rowhammer.js: A remote software-induced fault attack in JavaScript. In Detection of Intrusions and Malware, and Vulnerability Assessment, pages 300–321. Springer, 2016.
[19] Lars T Hansen. Shared memory: Side-channel information leaks, 2016.
[20] Sebastien Hily, Zhongying Zhang, and Per Hammarlund. Resolving false dependencies of speculative load instructions, October 13, 2009. US Patent 7,603,527.
[21] Jann Horn. Speculative execution, variant 4: speculative store bypass, 2018.
[22] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing side channel attacks against kernel space ASLR. In 2013 IEEE Symposium on Security and Privacy, pages 191–205. IEEE, 2013.
[23] Mehmet Sinan İnci, Berk Gülmezoglu, Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. Cache attacks enable bulk key recovery on the cloud. In Cryptographic Hardware and Embedded Systems – CHES 2016, pages 368–388, Berlin, Heidelberg, 2016. Springer.
[24] Intel. Intel R 64 and IA-32 Architectures Optimization Reference Manual.
[25] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. S$a: A shared cache attack that works across cores and defies VM sandboxing – and its application to AES. In Proceedings of the 2015 IEEE Symposium on Security and Privacy, SP ’15, pages 591–604, Washington, DC, USA, 2015. IEEE Computer Society.
[26] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. Systematic reverse engineering of cache slice selection in Intel processors. In 2015 Euromicro Conference on Digital System Design (DSD), pages 629–636. IEEE, 2015.
[27] Yeongjin Jang, Sangho Lee, and Taesoo Kim. Breaking kernel address space layout randomization with Intel TSX. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 380–392. ACM, 2016.
[28] Vasileios P Kemerlis, Michalis Polychronakis, and Angelos D