### 优化后的文本

```plaintext
resume: 0
ed_explred: 0
interface_up: 1
interface_down: 0
0: assumed by "uTupe"
queue_0_tx_cnt: 100219217
queue_0_tx_bytes: 84830086234
0: dosenenbxaoenenb (此行可能包含错误，建议检查)
queue_0_tx_queue_wakeup: 0
queue_0_cx_dna_napp1ng_ezx: 0
queue_0_tx_linearize: 0
queue_0_tx_linearize_failed: 0
queue_0_cx_napi_comp: 112514572
queue_0_tx_tx_poll: 112514649
queue_0_tx_doorbells: 52759561
[ ... ]

这些统计数据是从内核的ethtool框架中获取的，许多网络设备驱动程序都支持这一框架。设备驱动程序可以定义自己的ethtool指标。

---
## 第445页
408
第10章 网络
`-i` 选项显示驱动程序详细信息，`-k` 选项显示接口可调参数。例如：
```
ethtool -i eth0
driver: ens
version: 2.0.3K
[...]
ethtool -k eth0
eth0 的特性:
rx-checksumming: off
[...]
tcp-segmentation-offload: off
tx-tcp-segmentation: off [fixed]
tx-tcp-ecn-segmentation: off [fixed]
tx-tcp-mangleid-segmentation: off [fixed]
tx-tcp6-segmentation: off [fixed]
udp-fragmentation-offload: off
generic-segmentation-offload: on
generic-receive-offload: on
large-receive-offload: off [fixed]
rx-vlan-offload: off [fixed]
tx-vlan-offload: off [fixed]
ntuple-filters: off [fixed]
receive-hashing: on
high-dns: on
[...]
```

这个例子是一个使用ena驱动程序的云实例，当前tcp-segmentation-offload是关闭状态。可以使用`-K`选项来更改这些可调参数。

### 10.2.8 tcpdump
最后，`tcpdump(8)` 可以捕获数据包以便进行研究，这被称为“数据包嗅探”。例如，嗅探接口`en0`并将结果写入一个转储文件（`-w`），然后读取该文件（`-r`）而不进行名称解析（`-n`）：

```
$ tcpdump -i en0 -w /tmp/out.tcpdump
listening on en0, link-type EN10MB (Ethernet), capture size 262144 bytes
^C
451 packets captured
477 packets received by filter
0 packets dropped by kernel
$ tcpdump -nr /tmp/out.tcpdump
reading from file /tmp/out.tcpdump, link-type EN10MB (Ethernet)
13:39:48.917870 IP 10.0.0.65.54154 > 69.53.1.1.4433: Flags [P.], seq 1357:1357, ack 2844371493, win 537, options [nop,nop,TS val 252126 ecr 4065740083], length 0
13:39:48.921398 IP 108.177.1.2.443 > 10.0.0.65.59496: Flags [P.], seq 3108664869:3108664929, ack 2844371493, win 537, options [nop,nop,TS val 252126 ecr 4065740083], length 60
13:39:48.921442 IP 10.0.0.65.59496 > 108.177.1.2.443: Flags [.], ack 60, win 505, options [nop,nop,TS val 4065741487 ecr 252126], length 0
13:39:48.921463 IP 108.177.1.2.443 > 10.0.0.65.59496: Flags [P.], seq 0:60, ack 1, win 537, options [nop,nop,TS val 252126 ecr 4065740083], length 60
[...]
```

`tcpdump(8)` 输出的文件可以被其他工具读取，包括Wireshark GUI。Wireshark允许轻松检查数据包头，并且可以“跟随”TCP会话，重新组装传输和接收的数据，以便研究客户端/主机之间的交互。

虽然在内核和libpcap库中已经对数据包捕获进行了优化，但在高流量下仍然可能会消耗大量CPU资源来进行收集、存储和后处理。这些开销可以通过使用过滤器来减少，只记录具有特定头部细节的数据包。然而，即使对于未被捕获的数据包，过滤表达式也必须应用于所有数据包，因此其处理必须高效。这就是Berkeley Packet Filter (BPF)的起源，它最初作为数据包捕获过滤器创建，后来扩展成为本书中用于跟踪工具的技术。请参见第2.2节中的`tcpdump(8)`过滤程序示例。

虽然数据包捕获工具似乎能够显示网络的全面细节，但它们仅显示线路上发送的细节。它们对内核状态视而不见，包括负责数据包的进程、堆栈跟踪以及套接字和TCP的内核状态。这些细节可以使用BPF跟踪工具查看。

### 10.2.9 /proc
`/proc/net` 目录可以在命令行中进行探索：

```
$ ls /proc/net/
arp          if_inet6      snmp6        unix
dev          ip_tables_targets  softnet_stat  wireless
fib_trie     ipv6_route    stat
fib_triestat ipv6_stats    tcp
icmp         ipv6_v6only   tcp6
icmp6        ip6_flowlabel udp
igmp         ip_mr_cache   udp6
ip_fib       ip_mr_vif     udplite
ip_mr_cache  ip_tables_names
ip_mr_vif    ip_tables_natches
```

`netstat(1)` 和 `sar(1)` 工具暴露了许多这些指标。如前所述，它们包括系统范围内的数据包速率、TCP主动和被动新连接、TCP重传、ICMP错误等统计信息。

还有 `/proc/interrupts` 和 `/proc/softirqs`，可以显示网络设备中断在CPU上的分布。例如，在一个双CPU系统上：

```
$ cat /proc/interrupts
           CPU0   CPU1
[...]
28:      1775400     80  PCI-MSI 81920-edge  ena-mgmntlpc1 : 0000:00:05.0
29:        533   5501189  PCI-MSI 81921-edge  eth0Tx-Rx0
30:      4526113     278  PCI-MSI 81922-edge  eth0Tx-Rx1
$ cat /proc/softirqs
            CPU0   CPU1
[...]
NET_RX:  10915058  11500522
```

这个系统有一个使用ena驱动程序的eth0接口。上述输出显示eth0为每个CPU使用一个队列，并且接收软中断分布在两个CPU上。（传输看起来不平衡，但网络堆栈通常会跳过这个软中断并直接传输到设备。）

以下BPF工具是为了扩展而不是重复网络可观测性，超越了这些/proc和传统工具的指标。有一个BPF sockstat(8)用于系统范围的套接字指标，因为这些特定指标在/proc中不可用。但是没有类似的tcpstat(8)、udpstat(8)或ipstat(8)工具用于系统范围的指标：尽管可以用BPF编写这些工具，但这些工具只需要使用/proc中已经维护的指标。甚至不需要编写这些工具：netstat(1)和sar(1)提供了这种可观测性。

以下BPF工具通过按进程ID、进程名称、IP地址和端口分解统计信息，揭示导致事件的堆栈跟踪，暴露内核状态，并显示自定义延迟测量，从而扩展了可观测性。这些工具可能看起来很全面，但实际上并非如此。它们设计为与/proc/net和早期的传统工具一起使用，以扩展可观测性。

### 10.3 BPF工具
本节介绍了您可以用于网络性能分析和故障排除的BPF工具。这些工具如图10-4所示。

应用程序
sockstat
connlat
solatency
sofamily
系统调用接口
套接字
cetic
TCP
UDP
IP
superping
排队规则
网络设备
leee80211scan
链路层
bpftrace
设备驱动程序
图10-4 用于网络分析的BPF工具

bpftrace在图10-4中显示为观察设备驱动程序。请参见第10.4.3节中的示例。图中的其他工具来自第4章和第5章中介绍的BCC或bpftrace仓库，或者为本书创建。一些工具同时出现在BCC和bpftrace中。表10-3列出了这些工具的来源（BT是bpftrace的缩写）。

表10-3 网络相关工具
工具 来源 目标 描述
sockstat 本书 套接字 高级套接字统计信息
sofamily 本书 套接字 按进程计数新的套接字地址族
soprotocol 本书 套接字 按进程计数新的套接字传输协议
soconnect 本书 套接字 跟踪带详细信息的套接字IP协议连接
soaccept 本书 套接字 跟踪带详细信息的套接字IP协议接受
socketio 本书 套接字 总结带有I/O计数的套接字详细信息
socksize 本书 套接字 显示按进程的套接字I/O大小直方图
sormem 本书 套接字 显示套接字接收缓冲区使用情况和溢出
soconnlat 本书 套接字 总结IP套接字连接延迟并带有堆栈
solstbyte 本书 套接字 总结IP套接字第一个字节延迟
tcpconnect BCC/BT/本书 TCP 跟踪TCP主动连接（connect()）
tcpaccept BCC/BT/本书 TCP 跟踪TCP被动连接（accept()）
tcplife BCC/本书 TCP 跟踪带有连接详细信息的TCP会话生命周期
tcptop BCC TCP 显示按主机的TCP发送/接收吞吐量
tcpretrans BCC/BT TCP 跟踪带有地址和TCP状态的TCP重传
tcpsynbl 本书 TCP 显示TCP SYN积压的直方图
tcpwin 本书 TCP 跟踪TCP发送拥塞窗口参数
tcpnagle 本书 TCP 跟踪TCP Nagle使用和传输延迟
newudpconn 本书 UDP 跟踪从本地主机的新UDP连接
gethostlatency 本书/BT SNQ 跟踪通过库调用的DNS查找延迟
ipecn 本书 IP 跟踪IP入站显式拥塞通知
burxdelay 本书 ICMP 测量网络堆栈中的ICMP回显时间
qdisc-fq (...) 本书 qdiscs 显示FQ qdisc队列延迟
netsize 本书 net 显示网络设备I/O大小
nettxlat 本书 net 显示网络设备传输延迟
skbdrop 本书 skbs 跟踪带有内核堆栈跟踪的sk_buff丢弃
skblife 本书 skbs sk_buff的生命周期作为跨堆栈延迟
leee80211scan 本书 WiFi 跟踪IEEE 802.11 WiFi扫描

对于来自BCC和bpftrace的工具，请参阅其仓库以获取完整的最新工具选项和功能列表。这里总结了一些最重要的功能。

### 10.3.1 sockstat
`sockstat(8)` 每秒打印套接字统计信息以及套接字相关系统调用的计数。例如，在一个生产边缘服务器上：

```
$ sockstat.bt
Attaching 10 probes..
Tracing sock statistics, Output every 1 second.
01:11:41
[tracepoint:syscalls:sys_enter_bind]: 1
[tracepoint:syscalls:sys_enter_socket]: 67
[tracepoint:syscalls:sys_enter_connect]: 67
[tracepoint:syscalls:sys_enter_accept4]: 89
[kprobe:sock_sendmsg]: 5280
[kprobe:sock_recvmsg]: 10547
01:11:42
[...]
```

每秒打印一个时间戳（例如，“21:22:56”），后跟各种套接字事件的计数。这个例子显示每秒有10,547个`sock_recvmsg()`和5,280个`sock_sendmsg()`事件，以及不到一百个`accept4(2)`和`connect(2)`。

该工具的作用是提供高级别的套接字统计信息，用于工作负载特征描述，并为进一步分析提供起点。输出包括探测点名称，以便您可以进一步调查；例如，如果您看到比预期更高的`kprobe:sock_sendmsg`事件率，可以使用以下bpftrace单行命令获取进程名称：

```
$ bpftrace -e 'kprobe:sock_sendmsg { printf("%s\n", comm); }'
Attaching 1 probe...
```
```

希望这能帮助你更好地理解和使用这些工具！