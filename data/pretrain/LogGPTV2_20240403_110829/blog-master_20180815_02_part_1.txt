## PostgreSQL 无会话、有会话模式 - 客服平均响应速度（RT）实时计算实践(窗口查询\流计算)    
### 作者                                                               
digoal                                                               
### 日期                                                               
2018-08-15                                                             
### 标签                                                               
PostgreSQL , 无会话 , 客服响应速度 , 触发器 , rule , 窗口查询            
----                                                               
## 背景         
通常客服系统可能存在一对多，多对多的情况。    
例如，    
我们在使用淘宝时，与店家交流时，你根本不知道后面的小二是一个人还是多个人共用一个账号，还有可能是多个人使用了多个账号但是对消费者只看到一个。    
例如：    
小二(n)账号 -> 统一对外账号 -> 消费者    
还有的情况是一个小二为多个消费者服务：    
小二账号 -> 统一对外账号 -> 消费者(n)    
小二重要的KPI之一是响应速度，因为这直接反应到消费者的感受上。如果消费者一个问题，很久没人回复，可能就直接关闭页面，更换其他商家了。    
那么如何统计响应速度呢？    
通常来说，需要从消费者维度看待响应速度，因为一个问题可能被多个小二回复，也可能被1个小二回复，这种情况下，应该统计第一反馈时间作为响应时间。    
另一方面，如果系统没有会话机制的话，统计起来会比较麻烦。（并且，一个真实的会话里面的若干次交互，可能统计时会被抽象成若干的“虚拟会话”）    
我们来看个例子。    
## 1 无会话模式的响应速度统计    
假设数据以TS字段顺序到达为前提(通常这种场景，按TS到达的可能性较大，或者你可以使用clock_timestamp()来作为这个时间，可能性就更大了。)，后面会讲如果不这样有什么问题，以及解决方案。    
无会话模式，适合于客户发起消息后，后台任意分配一个客服给他(或者分配一个客服池子给他)，第一时间响应他的可以是任意客服。    
1、客服、客户交谈表（只展示重要字段）    
```    
create table tbl (    
  a int not null,   -- 客服ID    
  b int not null,   -- 客户ID    
  ts timestamp not null,   -- 消息时间    
  direct boolean not null  -- 消息方向 true: a->b, false: b->a    
);    
```    
2、客服的平均响应时间    
一个客户的最早发言时间，下一时刻任意客服最早回复这位客户的回复时间。（中间部分略过）    
例如    
```    
1, 2, 0001, false   -- 客户2给客服1发信息时间，作为一次虚拟会话的开始时间    
100, 2, 0003, false   -- 客户2给客服100发信息时间，如果比下一条先到达，这次虚拟会话 ，按这种方法将计算不到。    
22, 2, 0002, true   -- 客服22给客户2发信息时间，作为一次虚拟会话的最早响应时间    
1, 2, 0005, true   -- 客服1给客户2发信息时间    
```    
3、实时计算解决这个问题    
结果表结构    
```    
create table tbl_result (    
  b int not null,  -- 客户ID    
  b_ts timestamp,  -- 客户发起一次虚拟会话的最早时间    
  a int default -1,  -- 最先响应这次虚拟会话的客服ID, -1表示还没人响应    
  a_ts timestamp  -- 最先响应这次虚拟会话的时间    
);    
-- 添加约束，当客户的虚拟会话没有完结时，不计新虚拟会话。      
-- 保证同一时刻，同一客户，只有一个未完结的虚拟会话。    
alter table tbl_result add constraint uk exclude (b with =) where (a=-1);    
```    
4、实时处理逻辑    
when insert into tbl    
```    
if    
b -> a 逻辑(客户发给客服)    
select 1 from tbl_result where b=? and a = -1;    
if not found then     
    insert into tbl_result (b,b_ts) values (NEW.b,NEW.ts) on conflict ON CONSTRAINT uk do nothing;    
    -- update set b_ts=excluded.b_ts     
    -- where tbl_result.b_ts > excluded.b_ts;  -- 仅当新写入时间小于原记录时更新, 也可以不做，假设TS是顺序的。    
-- else    
  -- 说明还没有人回复它，跳过，等第一次客服响应来更新这条记录    
end if;    
if    
a -> b 逻辑(客服发给客户)    
select 1 from tbl_result where b=? and a = -1;    
if found then    
update tbl_result set a=? , a_ts=? where b=? and a = -1 and NEW.ts >= b_ts;    
-- else    
  -- 说明已有人回复，不需要更新    
end if;    
```    
5、tbl的insert trigger函数    
```    
create or replace function tb() returns trigger as $$    
declare    
begin    
  if not NEW.direct then  -- b -> a 逻辑(客户发给客服)    
    perform 1 from tbl_result where b=NEW.b and a = -1;    
    if not found then     
      insert into tbl_result (b,b_ts) values (NEW.b,NEW.ts) on conflict ON CONSTRAINT uk do nothing;    
      -- update set b_ts=excluded.b_ts     
      -- where tbl_result.b_ts > excluded.b_ts;  -- 仅当新写入时间小于原记录时更新, 也可以不做，假设TS是顺序的。    
    -- else    
      -- 说明还没有人回复它，跳过，等第一次客服响应来更新这条记录    
    end if;    
  else  -- a -> b 逻辑(客服发给客户)    
    perform 1 from tbl_result where b=NEW.b and a = -1;    
    if found then    
      update tbl_result set a=NEW.a , a_ts=NEW.ts where b=NEW.b and a = -1 and NEW.ts >= b_ts;    
    -- else    
      -- 说明已有人回复，不需要更新    
    end if;    
  end if;    
  return NULL;    
end;    
$$ language plpgsql strict;    
```    
创建触发器    
```    
create trigger tg0 after insert on tbl for each row execute procedure tb();    
```    
6、写入压测    
```    
假设有100个客服    
100万个客户    
使用clock_timestamp生成TS，确保数据按一定时序顺序写入。    
vi test.sql    
\set a random(1,100)    
\set b random(1,1000000)    
\set bo random(0,1)    
insert into tbl values (:a, :b, clock_timestamp(), :bo::boolean);    
```    
```    
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 32 -j 32 -T 120    
```    
```    
postgres=# select count(*) from tbl;    
  count       
----------    
 19805266    
(1 row)    
postgres=# select count(*) from tbl_result;    
  count      
---------    
 5202622    
(1 row)    
```    
7、算法校验，正确    
```    
postgres=# select * from tbl where b=1 order by ts limit 10;    
 a  | b |             ts             | direct     
----+---+----------------------------+--------    
 25 | 1 | 2018-08-15 09:43:22.862526 | f    
 17 | 1 | 2018-08-15 09:43:25.180255 | f    
 63 | 1 | 2018-08-15 09:43:29.901536 | t    
  3 | 1 | 2018-08-15 09:43:31.906753 | t    
 38 | 1 | 2018-08-15 09:43:52.035444 | f    
 24 | 1 | 2018-08-15 09:43:52.679127 | f    
 69 | 1 | 2018-08-15 09:43:54.855426 | t    
 44 | 1 | 2018-08-15 09:44:05.735922 | t    
 75 | 1 | 2018-08-15 09:44:10.555001 | t    
 17 | 1 | 2018-08-15 09:44:10.565798 | f    
(10 rows)    
postgres=# select * from tbl_result where b=1 order by b_ts limit 10;    
 b |            b_ts            | a  |            a_ts                
---+----------------------------+----+----------------------------    
 1 | 2018-08-15 09:43:22.862526 | 63 | 2018-08-15 09:43:29.901536    
 1 | 2018-08-15 09:43:52.035444 | 69 | 2018-08-15 09:43:54.855426    
 1 | 2018-08-15 09:44:10.565798 | 86 | 2018-08-15 09:44:33.090099    
 1 | 2018-08-15 09:44:33.815634 | 63 | 2018-08-15 09:44:45.737907    
 1 | 2018-08-15 09:44:52.277396 | 45 | 2018-08-15 09:44:59.006899    
 1 | 2018-08-15 09:45:19.288931 | -1 |     
(6 rows)    
```    
### 性能，写入吞吐达到16.5万行/s。    
```    
transaction type: ./test.sql    
scaling factor: 1    
query mode: prepared    
number of clients: 32    
number of threads: 32    
duration: 120 s    
number of transactions actually processed: 19805266    
latency average = 0.194 ms    
latency stddev = 0.221 ms    
tps = 165043.068862 (including connections establishing)    
tps = 165056.827167 (excluding connections establishing)    
statement latencies in milliseconds:    
         0.001  \set a random(1,100)    
         0.000  \set b random(1,1000000)    
         0.000  \set bo random(0,1)    
         0.191  insert into tbl values (:a, :b, clock_timestamp(), :bo::boolean);    
```    
## 2 有会话模式的响应速度统计    
假设数据以TS字段顺序到达为前提(通常这种场景，按TS到达的可能性较大，或者你可以使用clock_timestamp()来作为这个时间，可能性就更大了。)，后面会讲如果不这样有什么问题，以及解决方案。    
相比前面的不同之处，a,b一一对应，即有会话模式。    
```    
客户1发给客服2    
那么就只看客服2第一次响应客户1的时间。    
```    
有会话模式，适合于客户发起消息后，后台分配一个客服给他，第一时间响应他的必须是这个分配的客服。    
稍微修改前面的代码即可。    
1、客服、客户交谈表（只展示重要字段）    
```    
create table tbl (    
  a int not null,   -- 客服ID    
  b int not null,   -- 客户ID    
  ts timestamp not null,   -- 消息时间    
  direct boolean not null  -- 消息方向 true: a->b, false: b->a    
);    
```    
2、客服的平均响应时间    
一个客户的最早发言时间，下一时刻对应客服最早回复这位客户的回复时间。（中间部分略过）    
例如    
```    
1, 2, 0001, false   -- 客户2给客服1发信息时间，作为一次虚拟会话的开始时间    
1, 2, 0003, false   -- 客户2给客服1发信息时间。    
1, 2, 0002, true   -- 客服1给客户2发信息时间，作为一次虚拟会话的最早响应时间    
1, 2, 0005, true   -- 客服1给客户2发信息时间    
```    
3、实时计算解决这个问题    
结果表结构    
```    
create table tbl_result (    
  b int not null,  -- 客户ID    
  b_ts timestamp,  -- 客户发起一次虚拟会话的最早时间    
  a int,           -- 客户给谁发起了这次会话    
  rsp_a int default -1,  -- 响应这次虚拟会话的客服ID, -1表示没人响应    
  a_ts timestamp  -- 最先响应这次虚拟会话的时间    
);    
-- 添加约束，当客户的虚拟会话没有完结时，不计新虚拟会话。      
-- 保证同一时刻，同一客户，与同一客服，只有一个未完结的虚拟会话。    
alter table tbl_result add constraint uk exclude (b with =, a with =) where (rsp_a=-1);    
```    
4、实时处理逻辑    
when insert into tbl    
```    
if    
b -> a 逻辑(客户发给客服)    
select 1 from tbl_result where b=? and a=? and rsp_a = -1;    
if not found then     
    insert into tbl_result (b,b_ts,a) values (NEW.b,NEW.ts,NEW.a) on conflict ON CONSTRAINT uk do nothing;    
    -- update set b_ts=excluded.b_ts     
    -- where tbl_result.b_ts > excluded.b_ts;  -- 仅当新写入时间小于原记录时更新, 也可以不做，假设TS是顺序的。    