### 图9：延迟分布
- (a) Infocom 06 9-12
- (b) Conext 9-12

#### 延迟分布图
- 时间（秒）
- 横轴：时间
- 纵轴：延迟

### 图10：消息接收时间
- Infocom 9-12
- 横轴：时间
- 纵轴：消息数量

不同算法的延迟分布显示出相当相似的结果。

为了探究不同算法性能相似的原因，我们首先验证消息传递过程是否具有“突发性”。也就是说，我们确认这种现象不是由于大量节点在相对不频繁的时间内同时进行接触。例如，在会议中，参与者可能在某个会话结束后聚集在一个共同区域，并在此期间传递了许多数据包。为了确认这不是主要原因，我们在图10中绘制了所有最优和近似最优路径的累积总交付时间。从图中可以看出，交付率随时间变化较为均匀，这表明没有特定时间段内大多数消息被集中传递。

此外，流行路由算法的表现明显优于其他算法，这也说明不同算法之间的性能相似并不是因为它们都找到了相同的最优路径。实际上，在许多情况下，存在比大多数转发算法所选路径更好的路径。然而，这些算法通常能找到接近最优但并不完全最优的路径。

为了进一步理解多种不同转发算法之间性能惊人的相似性，我们研究了不同算法选择的具体路径。图11展示了一些典型结果。每个图表对应于一个特定的消息（σ, δ, t1）。横轴表示自t1以来的时间，纵轴表示到达目的地的路径数量。对于每种算法，其符号叠加在所选路径对应的条形上。

图中的两个案例显示了典型的路径爆炸现象——到达目的地的路径数量随时间呈指数增长。此外，图表还显示，所有转发算法使用的路径在路径爆炸过程的早期就已到达目的地。

例如，左图显示，对于这个特定的消息，FRESH 和 Greedy 能够找到在 t1 时刻到达的路径（即最优路径），而 Greedy Online 和 Greedy Total 则在 t1 后 20 秒内找到路径。最后，Dynamic Programming 在 t1 后 90 秒找到路径。右图的情况与此类似。

这表明，不同的算法可能因为大量的路径在 t1 之后不久就到达目的地而表现出类似的（尽管非最优）性能。当存在大量几乎最优的路径时，转发算法可以相对较容易地找到其中一条路径。也就是说，路径爆炸的存在可能是许多算法表现相似的一个因素。

如果这一假设成立，那么转发算法的性能应受到路径爆炸方式的强烈影响。在第5.2节中，我们发现不同类型的源-目的对（即 in-in、in-out、out-in 和 out-out）的路径爆炸方式不同。我们可以利用这一见解来分析算法性能。

如果路径爆炸效应是导致不同转发算法性能相似的主要原因，那么在同一种类型内的算法性能应该较为相似，而在不同类型之间则差异较大。例如，所有 in-in 对的算法性能应该相似，但在 in-in 对和 in-out 对之间则会有很大差异。

### 图11：两种消息在 Infocom '06 9-12 中由转发算法选择的路径
- (a) 消息 88-82
- (b) 消息 86-26

为了验证这一点，我们将模拟结果按类型分开。结果如图12所示。该图展示了四种类型对的六种转发算法的平均延迟和成功率。结果显示，成功和延迟主要取决于源-目的对的类型，而不是所使用的算法类型。除了流行路由外，所有转发算法再次表现出相似的性能。

然而，图12还显示，一旦按类型对消息进行分类，不同转发算法之间的差异开始显现。特别是，使用最大接触模式信息的算法（即 Greedy Total 和 Dynamic Programming，它们同时使用过去和未来的信息）在某些情况下表现更好。具体来说，当其中一个节点是“out”节点时，这些算法表现更优。但如果两个节点都是“in”节点，则接触模式信息帮助不大。然而，当一个或两个节点是“out”节点时，最大接触模式信息是有帮助的。

深入研究后，我们发现 Greedy Total 在源节点为“out”节点时表现特别好。回想第5.2节中的讨论，当源节点具有低接触率 λσ 时，直到消息移动到高接触率节点（λi > λσ）时才会发生快速路径爆炸。这与 Greedy Total 的策略一致。注意，Greedy Total 是一种不依赖目的地的策略——它仅寻求将消息移向具有更高接触率的节点（即 λi > λσ）。

这些结果为口袋交换网络等环境中的有效转发提供了一些启发式方法。特别是，它们表明，如果转发算法能够尽快引发路径爆炸，那么它将是成功的。这是一个与以往提案中常用的转发原则略有不同的新原则。也就是说，转发算法的目标不再是直接找到最短路径到达目的地，而是尽可能快地引发路径爆炸。这建议优先将消息转发给高接触率节点，而不考虑它们与目的地的关系。

本文的研究结果为我们提供了更好地理解节点移动性、接触模式和转发性能在会议环境中的性质。总体而言，结论如下：节点间的连接模式导致了指数路径爆炸效应，其速率取决于节点的接触率。由于节点之间的接触率差异较大，高接触率节点的路径爆炸发生得更快。在这种环境下，成功的转发依赖于将消息移动到高接触率节点，以便尽快发生路径爆炸。一旦高接触率节点间发生路径爆炸，其中一个节点与目的地的接触就会导致消息传递。

### 结论
口袋交换网络中的转发问题因节点之间的不规则且不可预测的接触模式而变得复杂。为了理解转发问题的本质，本文采用了一种新颖的方法，即枚举和表征在这种环境中可用的转发路径集。具体来说，我们研究了节点和接触密度高且活动空间受限的情况。我们的主要观察结果是，对于大多数消息，存在路径爆炸效应，这意味着虽然最优路径可能很长，但通常有许多接近最优的路径到达目的地。我们通过分析和实证支持了这一结果。我们提出了一个简单的节点间均匀接触模型，并表明在这种情况下路径爆炸是可以预期的。并且我们通过实证表明，在我们的数据中确实发生了路径爆炸，但由于节点之间接触率的不同，情况更为复杂。我们的实证结果重点关注高接触率（“in”）节点和低接触率（“out”）节点之间的差异。

这些结果有助于我们理解为什么不同转发算法表现出非常相似的性能。由于路径爆炸效应，不同转发算法经常找到几乎相同持续时间的到达目的地的路径。

我们的研究留下了一些重要的开放问题。我们对非均匀情况的理解不如对均匀情况的理解精确；更复杂的分析模型在这方面会有所帮助。此外，我们还没有考虑转发的成本，因此即使性能相似，也可能有充分的理由偏好某种算法。了解路径爆炸现象可能有助于理解不同转发算法的相对成本。

### 致谢
作者感谢波士顿大学Web和互联网组（WING）成员在工作初期提供的宝贵反馈，以及Mostafa Ammar在2006年夏天在Thomson Paris进行的有益讨论。我们还要感谢Laurent Massoulié在分析部分提供的宝贵建议。本研究得到了NSF拨款CCR-0325701和ANI-0322990的支持，以及HAGGLE FET项目提供的资金支持。

### 参考文献
[此处列出参考文献]

---

通过以上优化，文本变得更加清晰、连贯和专业，结构更加合理，便于读者理解和阅读。