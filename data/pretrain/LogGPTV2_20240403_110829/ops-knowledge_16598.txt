User: Install and deploy Apache server on CentOS 7 and configure it to provide secure web services via HTTPS protocol.
Assistant: The following are the steps to install and deploy the Apache server on CentOS 7 and configure it to provide secure web services through the HTTPS protocol: 1. Install Apache Enter the following command in the terminal to install the Apache server: ``` sudo yum install httpd ``` 2. Start Apache Enter the following command to start the Apache server: ``` sudo systemctl start httpd ``` 3. Configure the firewall The firewall is enabled by default on CentOS 7, and HTTP and HTTPS protocols need to be allowed in the firewall. Enter the following command to open the port for the HTTP protocol: ``` sudo firewall-cmd --permanent --add-service=http ``` Enter the following command to open the port for the HTTPS protocol: ``` sudo firewall-cmd --permanent --add-service=https ``` Reload the firewall configuration for changes to take effect: ``` sudo firewall-cmd --reload ``` 4. Configure SSL certificates To provide secure HTTPS services, we need to configure SSL for Apache Certificate. You can purchase or use a self-signed certificate from a certificate authority (CA). Here are the steps to use a self-signed certificate. 4.1 Generate a self-signed certificate Enter the following command in the terminal: ``` sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/pki/tls/private/example.com.key -out /etc /pki/tls/certs/example.com.crt ``` The above command will generate the private key file example.com.key in the /etc/pki/tls/private/ directory and the private key file in /etc/pki/tls/certs The certificate file example.com.crt is generated in the / directory. 4.2 Configuring SSL Enter the following command to open the Apache SSL configuration file: ``` sudo vi /etc/httpd/conf.d/ssl.conf ``` Find the following parameter and change accordingly: ``` SSLCertificateFile /etc/pki/ tls/certs/example.com.crt SSLCertificateKeyFile /etc/pki/tls/private/example.com.key ``` Save and exit. 5. Configure the virtual host Enter the following command to open the Apache default virtual host configuration file: ``` sudo vi /etc/httpd/conf.d/welcome.conf ``` Find the following line and comment it out: ``` # RedirectMatch "^/$" "/apache-default/" ``` Save and exit. Open the default virtual host configuration file by typing: ``` sudo vi /etc/httpd/conf/httpd.conf ``` Find the following line and comment it out: ``` # ErrorDocument 404 /error/noindex.html ` `` Insert the following code at the end of the configuration file to create a new virtual host: ``` <VirtualHost *:80> ServerName example.com Redirect permanent / https://example.com/ </VirtualHost> <VirtualHost *:443 > ServerName example.com DocumentRoot /var/www/example.com ErrorLog /var/log/httpd/error_log CustomLog /var/log/httpd/access_log combined SSLEngine on </VirtualHost> ``` In the above code, example.com with your domain name. Change DocumentRoot to the directory you want to serve this virtual host. Save and exit. 6. Restart Apache Enter the following command to restart the Apache server: ``` sudo systemctl restart httpd ``` Your Apache server should now be configured to provide secure web services over the HTTPS protocol.