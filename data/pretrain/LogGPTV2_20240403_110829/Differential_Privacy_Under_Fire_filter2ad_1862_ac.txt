d in this case.
To avoid privacy leaks through the default value, d
must not itself depend on the contents of the database.
In Fuzz, a static value for d is included with the query.
Also, for reasons that will become clear in Section 4.4,
d should fall within the range of the microquery m.
4.3 Do default values decrease utility?
When the microquery for a row r times out while an-
swering a non-adversarial query, the utility of the query’s
overall result almost inevitably degrades. After all, the
result no longer incorporates the intended contribution
of r or any other row whose microquery has timed out,
but rather uses the default value for each such micro-
query. However, a non-adversarial querier can always
avoid the inclusion of any default values by choosing
a sufﬁciently high timeout. If the timeouts are chosen
properly, timeouts should never occur while answering
non-adversarial queries. Thus, the only querier who ex-
periences degraded utility is the adversary.
The question, then, becomes how to choose the time-
out values. One possible method is as follows. The
querier is supplied with a reference implementation of
the query processor that additionally outputs the max-
imum processing time Tmax for each microquery. The
querier can then (locally) test his queries on arbitrary
databases of his own construction and thus infer a rea-
sonable time bound. The querier then adds a small safety
margin and uses, say, 1.1 · Tmax as the timeout for his
query. He then submits the query to the actual query
processor, to be run on the private database.
4.4 Do default values create privacy leaks?
At ﬁrst glance, it may appear that default values are re-
placing one evil with another: they seem to plug the tim-
ing channel at the expense of introducing a data channel.
However, this is not the case: as long as the timeouts are
applied at the microquery level (as opposed to imposing
a timeout on the whole query), differential privacy is pre-
served, for the following reason.
First, recall that Fuzz is designed to ensure that the
completion time of a query depends only on the size of
the database, but not its contents. Since we have assumed
that the size of the database is public, and since our threat
model rules out all the other channels, the only remaining
way in which private information could ‘leak’ is through
the (noised) data that the query returns.
Now, recall that the type system Fuzz implements
is based on the type system from [25]. As described
in [25], this type system ensures that all programs that
type-check are differentially private. This is achieved by
7
inferring an upper bound on the program’s sensitivity to
small changes in its inputs—speciﬁcally, a change to an
individual database row.
Fuzz extends the type system from [25] with micro-
query timeouts on map and split, but, crucially, time-
outs do not increase the sensitivity of these two func-
tions. The reason is that the sensitivity of map and split
depends on the range of values that the microquery can
return. Since the default value is taken from the range
of values that the microquery can already return in the
absence of timeouts, the addition of timeouts does not
increase this range, and thus does not increase the sensi-
tivity either.
Of course, running a query on a given database with
and without timeouts (or with shorter vs.
longer time-
outs) can yield very different results. Suppose we have a
database b and a function with microqueries that, without
timeouts, produces an output o when it is run on b. If we
now add a very short microquery timeout, we can easily
cause all the microqueries to abort and return their de-
fault value, and the resulting output for the same database
D can be dramatically different from o. However, this
does not mean that differential privacy is violated. Re-
call from Section 2.1 that the differential privacy guaran-
tee makes a statement about running the same query on
two databases b and b′ that differ in exactly one row r. If
we run a query with timeouts on both b and b′, the only
microquery that could behave differently is the one on
row r. All the other microqueries start in the same state
for both databases, so their behavior will be exactly the
same—they will either time out on both b and b′, or on
neither.
5 The Fuzz system
Next, we present the design of the Fuzz system, which
represents one speciﬁc point (the lower left quadrant) in
the solution space from Table 1. This point is a good
ﬁrst step because it works with existing programming-
language technology and is relatively easy to implement.
5.1 Overview
Fuzz consists of three main components: a simple pro-
gramming language, a type checker, and a predictable
query processor. The programming language rules out
channels based on global state or side effects, simply by
not supporting any primitives that could produce either.
The type checker rules out budget-based channels by
statically checking queries before they are executed and
rejecting any query that cannot be guaranteed to com-
plete with the available balance. Finally, the predictable
query processor closes timing-based channels by ensur-
ing that each microquery terminates after very close to
exactly a speciﬁed amount of time. Figure 4 illustrates
our approach.
Type checker
Privacy
budget
Admission control
Predictable
query processor
Querier
Network
Fuzz runtime
Database
Figure 4: Scenario. Queries are ﬁrst type-checked by
Fuzz and then executed in predictable time.
5.2 Language and type system
Fuzz queries are written in a simple functional program-
ming language whose functionality is roughly compara-
ble to PINQ. The Fuzz language contains a special type
db for databases, which is not a valid return type of any
query. We say that a primitive is critical if it takes db
as an argument. Our language ensures that critical prim-
itives either return other values of type db (and nothing
else) or add noise to all of their return values. Fuzz de-
termines the correct amount of noise to add by using the
sensitivity analysis and type system from [25].
Fuzz currently supports four critical primitives (Ta-
ble 2): map applies a function f
to each row in one
database and returns the results in another database;
split applies a boolean predicate p to each row in a
database and returns two databases, one with all rows r
for which p(r) = TRUE and the other with the rest; count
returns the (noised) number of rows in a database; and
sum returns the (noised) sum of all the rows. sum’s type
ensures that it can only be applied to databases with nu-
meric rows.
5.3 Predictable query processor
To close timing channels, the query processor must en-
sure that all critical primitives take a predictable amount
of time that depends only on the size of the database.
This is trivial for sum and count. However, map and
split involve arbitrary microqueries, and it can be difﬁ-
cult to statically analyze how much time these will take.
To avoid the need for such an analysis, Fuzz instead
relies on predictable transactions. A predictable trans-
action is a primitive P-TRANS(λ, a, T, d), where λ is a
function, a an argument, T a timeout, and d a default
value. P-TRANS takes exactly time T , and returns λ(a) if
λ terminates within time T , or d otherwise. Note that an
implementation of P-TRANS may have to (a) add a delay
if λ terminates early, and (b) abort λ slightly before T
expires to ensure that any resources allocated by λ can
be released in time. In Section 6, we describe two ap-
proaches to implementing P-TRANS in practice.
When evaluating map or split, Fuzz invokes P-TRANS
for each microquery, using the speciﬁed timeout T and—
in the case of map—the speciﬁed default value (split
has an implicit default of TRUE).
8
Arguments
Primitive
map db f T d Database db, function f, timeout T, default value d Database
split db p T Database db, boolean predicate p, timeout T
count db
sum db
Database db
Database db
Return value
Two databases
Noised |db|
Noised ∑i dbi
Table 2: Critical primitives in the Fuzz language
All values of type db internally have representations
of the same size, i.e., they consume the same amount
of memory and (conceptually) have the same number
of rows as the original database. If necessary, they are
padded with dummy rows. For example, if the original
database has 1,000 rows and consumes 1 MB of mem-
ory, the two databases returned by a split both consume
1 MB, and an invocation of map on either of them will
invoke 1,000 microqueries—though of course the results
of microqueries on dummy rows will be discarded.
5.4 How Fuzz protects privacy
We now brieﬂy summarize how Fuzz protects against
covert channels. First, the only observations a querier
can make that depend on the contents of the database are
the completion time of the query and its return value.
This is because of (a) our threat model from Section 3.1,
(b) the fact that the language contains no primitives with
side-effects, such as mutating global state, and (c) the
fact that the type system rules out abnormal termination.
Second, the return value of the query is differentially
private. Since db is not a valid return type and critical
operations return only values of type db or else appropri-
ately noised values (based on the sensitivity that has been
statically inferred [25]), the return value cannot depend
on non-noised values from the database directly. Also,
the language does not contain any primitives for observ-
ing side-effects within the query, such as memory con-
sumption or the current wallclock time. The only time-
related primitives are the timeouts on the microqueries;
these have a sensitivity of 1 because (a) each microquery
operates on only one row from the database at a time, and
(b) microqueries have no access to global state and there-
fore cannot communicate with one another. Thus, if we
add or remove one individual’s data from the database,
this affects only one row, so this can only cause one more
(or less) microquery to time out and add a default result
to the output.
Third, the completion time of a query depends only
on the size of the database (which we assumed to be
public) and data that has already been noised. To see
why, consider that the only operations that have access to
non-noised data are the microqueries, for which Fuzz en-
forces a constant runtime (by aborting or padding them
to their timeout), and that values of type db cannot af-
fect the control ﬂow directly, only indirectly through re-
turn values of critical operations, which are noised. It
is perfectly OK for the completion time of a query to de-
pend on noised data, since such data is safe to release and
could even have been returned to the querier directly.
In summary, Fuzz is designed to ensure that everything
observable by the querier—whether directly through the
data channel or indirectly through the timing channel—
either does not depend on the contents of the database or
has been noised appropriately.
6 Implementation strategies
In this section, we describe the abstract requirements for
implementing predictable transactions, and we propose
two concrete implementation strategies: one for newly
designed runtimes (6.2) and one for retroﬁtting Fuzz into
an existing runtime (6.3). Naturally, we expect the for-
mer to be more efﬁcient and the latter to be easier to im-
plement.
6.1 Requirements
To implement P-TRANS(λ, a, T, d), the following three
properties need to hold for the language runtime:
• Isolation: λ(a) can be executed without interfering
with the succeeding computation in any way, apart
from contributing its return value.
• Preemptability: The execution of λ(a) can be
aborted at any time, or at most within some time
bound ∆a;
• Bounded deallocation: At any point during the ex-
ecution of λ(a), there is a upper bound ∆d on the
time needed to deallocate all resources allocated so
far by λ(a).
If these requirements hold, we can implement P-TRANS
by running λ(a) in isolation and setting a timer to T −
∆a − ∆d (which must be updated when ∆d changes due to
new allocations). If the timer ﬁres, we can abort λ and
deallocate its resources without overrunning the overall
timeout T . After a ﬁnal delay to reach T exactly, we
can return either the result of λ(a) if we have it, or d
otherwise.
6.2 White-box approach
If we design a new language runtime from scratch, or
if we are willing to make extensive changes to an exist-
ing runtime, we can achieve isolation and preemptability
9
by avoiding global variables that could be left in an in-
consistent state when a microquery is aborted, as well
as any termination of the microquery that does not cor-
rectly return the default value. Thus, it becomes possible
to abort a microquery simply by performing a longjmp
or its equivalent.
Regarding bounded deallocation, we expect that the
key resource in most cases will be memory. It is possi-
ble to design the memory allocator in such a way that
the memory allocated by a microquery can be deallo-
cated in constant time. For example, we can divert the
allocator from its usual allocation pool while a micro-
query is in progress, and instead allocate memory from
a special region dedicated to microqueries. If the micro-
query takes arguments and returns results by value rather
than by reference, objects in the main heap cannot ac-
quire references to this region, so it is safe to summarily
deallocate the entire region when the microquery aborts
or terminates.
6.3 Black-box approach
The ﬁrst strategy assumes a fairly deep understanding of
how all primitive operations of the language are imple-
mented, and how they interact with the allocator and each
other. If we are working with an existing runtime sys-
tem, it may be hard to be sure that the entire rest of the
state of memory outside the microquery allocation region
has been restored to its original state after a microquery
ﬁnishes; for example, if we use any off-the-shelf library
functions, they may have local buffers or other global
state through which information can leak.
In this case, we can still ensure isolation and preempt-
ability by leveraging operating system support, e.g., by
farming out microqueries to a separate process, which
can then be destroyed at any time without interfering
with the state of the main runtime. Bounded dealloca-
tion can be achieved if we know an upper bound on the
amount of time the operating system needs to destroy a
process.
7 Proof-of-concept implementation
Next, we describe our proof-of-concept implementation
of Fuzz. Our implementation does not execute Fuzz pro-
grams directly; rather, we implemented a front-end that
accepts Fuzz programs, typechecks them, and then (if
successful) translates them into Caml programs. Thus,
we did not need to implement an entire language run-
time from scratch; it was sufﬁcient to implement a library
with Fuzz-speciﬁc primitives like map and split, and to
extend an existing runtime with support for predictable
transactions. We chose Caml because it is similar enough
to Fuzz to make the translation relatively straightforward.
7.1 Background: Caml Light
Our implementation is based on Caml Light [5, 19] ver-
sion 0.75, a stable and lightweight implementation of
Caml. Here, we brieﬂy describe only the aspects of Caml
Light that are relevant for our discussion of Fuzz. For a
detailed description of Caml Light, please see [19].
In Caml Light, Caml code is ﬁrst compiled into byte-
code for an abstract machine called ZAM (the ZINC ab-
stract machine); this bytecode is then executed on a run-
time that implements the ZAM. Because of this archi-
tecture, the actual ZAM runtime is relatively simple: it
mainly consists of an interpreter for the ZAM instruc-
tions and some code for I/O, memory management, and
garbage collection.
The state of the ZAM consists of a code pointer, a reg-
ister holding the current environment, an accumulator,
two stacks (an argument stack and a return stack) and the
heap. The heap is divided into two zones: a ﬁxed-size
‘young’ zone and a variable-size ‘old’ zone. Most ob-
jects are initially allocated in the young zone; when this
zone ﬁlls up, a ‘minor’ garbage collection copies any ob-
jects that remain active into the old zone. This was orig-
inally done to reduce the frequency of ‘major’ garbage