250
500
Concurrent users
750
1000
Figure 14: The solid black line is the theoretical performance of concurrent requests served in the ﬁxed time
horizon. The red circles represent the actual performance of plain Node.js with NodeSentry; the blue squares
the performance of pure Node.js. Up to 200 clients the performance is optimal. Between 500-1000 we have
a slight drop that is anyhow below 50%.
fs in ‘st‘ membrane
fs separate membrane
hooks can be implemented by ConScript, thereby relying
heavily on model checking technologies. Stefan et al. [40]
introduce COWL, a JavaScript conﬁnement system based
on a new label-based mandatory access control API within
web browsers that can be used by developers to indicate how
to restrict the communication between compartments and
external servers.
Security platforms for managed code.
Livshits [27] provides a taxonomy of runtime taint tracking
approaches, in order to preventing web application vulnera-
bilities such as cross-site scripting and SQL injection attacks.
Wei et al., [45] propose a new architecture that decom-
poses a web service into two parts, executing in a separate
protection domain. Only the trusted part can handle security-
sensitive data.
Burket et al., [7] developed GuardRails, a source-to-source
tool for building secure Ruby on Rails web applications,
by attaching security policies, via annotations, to the data
model itself. GuardRails produces a modiﬁed application
that automatically enforces the speciﬁed policies.
Hosek et al., [21] developed a Ruby-based middleware that
(1) associates security labels with data and (2) performs trans-
parent label tracking, across a multi-tier web architecture in
order to prevent harmful data disclosure.
Nguyen-Tuong et al., [32] propose a fully automated ap-
proach to harden PHP-based web applications via precise
taint tracking of data and checking speciﬁcally for dangerous
content only in parts of commands and output that came
from untrustworthy sources.
Web application ﬁrewalls (WAF).
Krueger et al., [25] describe a technique, based on anomaly
detectors, that replace suspicious parts in HTTP requests
by benign data.
ModSecurity [1] is a ﬁrewall that detects malicious behavior
by pattern matching HTTP requests with an existent rule
base. A similar proxy-based approach has been proposed
by Braun et al., [6] who implemented a policy enforcement
mechanism to guarantee the control ﬂow integrity of web
applications.
)
s
r
e
s
u
t
n
e
r
r
u
c
n
o
c
d
e
l
d
n
a
h
(
y
t
i
c
a
p
a
C
750
500
250
0
0
500
Concurrent users
1000
Figure 15: Tightening security by adding both
an Upper-Bound policy and a Lower-Bound policy
does not aﬀect capacity, as demonstrated with
the comparison of "fs" inside or outside the "st"
membrane.
to vet the script about to be loaded. The loading process
will only continue after approval of the policy. ConScript [29]
allows the enforcement of ﬁne-grained security policies for
JavaScript in the browser. The approach is similar to self-
protecting JavaScript [28, 35], except that ConScript uses
deep advice, thus protects all access paths to a function. The
price for using deep advice is the need for client-side support
in the JavaScript engine. WebJail [42] oﬀers the integrator
the possibility to deﬁne a policy, in a speciﬁc, non-JavaScript
way, that restricts the behavior of a third-party component
in an isolated way. Agten et al., [2] present JSand, a server-
driven sandboxing framework to enforce server-speciﬁed secu-
rity policies in a client’s browser. Richards et al. [37] present
a security infrastructure for dealing with the gadget attacker
threat model, by allowing the speciﬁcation of access control
policies on parts of a JavaScript program via leveraging the
concept of delimited histories with revocation. Fredrikson et
al., [15] have developed an oﬀ-line mechanism for the analysis
of JavaScript applications that identify the place where policy
(cid:23)(cid:24)(cid:22)
9. CONCLUSIONS
Among the various server-side frameworks, Node.js has
emerged as one of the most popular. Its strengths are the use
of JavaScript, an eﬃcient runtime tailored for cloud-based
event parallelism, and thousands of third-party libraries.
Yet, these very libraries are also a source of potential
security threats. Since the server runs with full privileges,
a vulnerability in one library can compromise one’s entire
server. This is indeed what recently happened with the "st"
library used by the popular web server libraries to serve
static ﬁles.
In order to address the problem of least privilege integra-
tion of third party libraries we have developed NodeSentry,
a novel server-side JavaScript security architecture that
supports such least-privilege integration of libraries.
We have illustrated how our enforcement infrastructure
can support a simple and uniform implementation of security
rules, starting from traditional web-hardening techniques to
custom security policies on interactions between libraries
and their environment, including any dependent library.
We have described the key features of the implementation
of NodeSentry which builds on the implementation of
membranes by Miller and Van Cutsem as a stepping stone
for building trustworthy object proxies [44].
In order to show the practical eﬀectiveness of NodeSentry
we have evaluated its performance in an experiment where
a server must be able to provide ﬁles concurrently to an
increasing number of clients up to thousands of clients
and tens of thousands of ﬁle requests. Our evaluation
shows that for up to 250 clients NodeSentry has the same
server capacity and throughput of plain Node.js, and that
such capacity is essentially the theoretical optimum. At
1000 concurrent clients in a handful of seconds, when plain
Node.js’s already dropped capacity barely above 60% of the
theoretical optimum, NodeSentry is able to attests itself
at 50%.
Our complete prototype implementation (including the
full source code, test suites, code documentation, installa-
tion/usage instructions, and the "st" example) is available
at https://distrinet.cs.kuleuven.be/software/NodeSentry/
or directly installable via npm install nodesentry.
Acknowledgments
We thank our shepherd Joshua Schiﬀman and the anony-
mous reviewers for their valuable feedback. This research
is partially funded by the Research Fund KU Leuven, the
EU-funded FP7 projects NESSoS and WebSand, the IWT-
SBO project SPION and the Italian Project PRIN-MIUR-
TENACE. With the ﬁnancial support from the Prevention of
and Fight against Crime Programme of the European Union
European Commission – Directorate-General Home Aﬀairs.
This publication reﬂects the views only of the authors, and
the funders cannot be held responsible for any use which
may be made of the information contained therein.
10. REFERENCES
[1] Modsecurity – the open source web application ﬁrewall.
https://www.modsecurity.org/.
[2] P. Agten, S. Van Acker, Y. Brondsema, P. H. Phung,
L. Desmet, and F. Piessens. JSand: Complete
Client-Side Sandboxing of Third-Party JavaScript
without Browser Modiﬁcations. In Proceedings of the
(cid:23)(cid:24)(cid:23)
Annual Computer Security Applications Conference
(ACSAC), pages 1–10, 2012.
[3] A. Barth. RFC 6265: HTTP State Management
Mechanism. http://tools.ietf.org/html/rfc6265, 2011.
[4] N. Bielova. Survey on JavaScript Security Policies and
their Enforcement Mechanisms in a Web Browser.
Journal of Logic and Algebraic Programming, 2012.
[5] N. Bielova, D. Devriese, F. Massacci, and F. Piessens.
Reactive non-interference for a browser model. In
Proceedings of the International Conference on Network
and System Security (NSS), pages 97–104, 2011.
[6] B. Braun, P. Gemein, H. P. Reiser, and J. Posegga.
Control-ﬂow integrity in web applications. In
Engineering Secure Software and Systems (ESSOS’13),
pages 1–16. Springer, 2013.
[7] J. Burket, P. Mutchler, M. Weaver, M. Zaveri, and
D. Evans. GuardRails: A Data-Centric Web
Application Security Framework. In Proceedings of the
USENIX Conference on Web Application Development
(WebApps), 2011.
[8] F. Chong and G. Carraro. Architecture strategies for
catching the long tail. Technical report, Microsoft
Corporation, April 2006. Available on the web at http:
//msdn.microsoft.com/en-us/library/aa479069.asp.
[9] W. De Groef, D. Devriese, N. Nikiforakis, and
F. Piessens. FlowFox: a Web Browser with Flexible
and Precise Information Flow Control. In Proceedings
of the ACM Conference on Computer and
Communications Security (CCS), pages 748–759, 2012.
[10] W. De Groef, D. Devriese, N. Nikiforakis, and
F. Piessens. Secure Multi-Execution of Web Scripts:
Theory and Practice. Journal of Computer Security,
22(4):469–509, 2014.
[11] L. Desmet, W. Joosen, F. Massacci, P. Philippaerts,
F. Piessens, I. Siahaan, and D. Vanoverberghe.
Security-by-contract on the. net platform. Information
Security Technical Report, 13(1):25–32, 2008.
[12] D. Devriese and F. Piessens. Noninterference Through
Secure Multi-Execution. In Proceedings of the IEEE
Symposium on Security and Privacy (SP), pages
109–124, 2010.
[13] U. Erlingsson. The inlined reference monitor approach
to security policy enforcement. PhD thesis, Cornell
University, 2003.
[14] D. Flanagan. JavaScript: the deﬁnitive guide. "
O’Reilly Media, Inc.", 2002.
[15] M. Fredrikson, R. Joiner, S. Jha, T. Reps, S. Hassen,
and V. Yegneswaran. Eﬃcient Runtime Policy
Enforcement Using Counterexample-Guided
Abstraction Reﬁnement. In Proceedings of the
International Conference on Computer Aided
Veriﬁcation (CAV), 2012.
[16] P. Gardner, S. Maﬀeis, and G. Smith. Towards A
Program Logic for JavaScript. In Proceedings of the
ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages (POPL), January 2012.
[17] L. Griﬃn, B. Butler, E. de Leastar, B. Jennings, and
D. Botvich. On the Performance of Access Control
Policy Evaluation. In Proceedings of the IEEE
International Symposium on Policies for Distributed
Systems and Networks (POLICY), pages 25–32, 2012.
G. Vigna. You Are What You Include: Large-scale
Evaluation of Remote JavaScript Inclusions. In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS), pages 736–747, 2012.
[34] A. Ojamaa and K. Düüna. Assessing the Security of
Node.js Platform. In Proceedings of the International
Conference for Internet Technology and Secured
Transactions (ICITST), pages 348–355, 2012.
[35] P. H. Phung, D. Sands, and A. Chudnov. Lightweight
Self-Protecting JavaScript. In Proceedings of the ACM
Symposium on Information, Computer and
Communications Security (ASIACCS), pages 47–60,
2009.
[36] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and
S. Esmeir. BrowserShield: Vulnerability-driven ﬁltering
of dynamic HTML. ACM Transactions on the Web
(TWEB), 1(11), September 2007.
[37] G. Richards, C. Hammer, F. Z. Nardelli,
S. Jagannathan, and J. Vitek. Flexible Access Control
for JavaScript. In Proceedings of the ACM Conference
on Object-Oriented Programming, Systems, Languages
& Applications (OOPSLA), 2013.
[38] F. B. Schneider. Enforceable Security Policies. ACM
Transactions on Information and System Security
(TISSEC), 3(1):30–50, 2000.
[39] S. Stamm, S. Brandon, and G. Markham. Reining in
the Web with Content Security Policy. In Proceedings
of the International Conference on World Wide Web
(WWW), 2010.
[40] D. Stefan, E. Z. Yang, P. Marchenko, A. Russo,
H. Dave, K. Brad, and D. Mazieres. Protecting Users
by Conﬁning JavaScript with COWL. In Proceedings of
the USENIX Symposium on Operating Systems Design
and Implementation (OSDI 14), 2014.
[41] S. Tilkov and S. Vinoski. Node.js: Using JavaScript to
Build High-Performance Network Programs. IEEE
Internet Computing, 14(6):80–83, 2010.
[42] S. Van Acker, P. De Ryck, L. Desmet, F. Piessens, and
W. Joosen. WebJail: Least-privilege Integration of
Third-party Components in Web Mashups. In
Proceedings of the Annual Computer Security
Applications Conference (ACSAC), 2011.
[43] S. Van Acker, N. Nikiforakis, L. Desmet, F. Piessens,
and W. Joosen. Monkey-in-the-browser: Malware and
vulnerabilities in augmented browsing script markets.
In Proceedings of the ACM Symposium on Information,
Computer and Communications Security (ASIACCS),
2014.
[44] T. Van Cutsem and M. S. Miller. Trustworthy Proxies:
Virtualizing Objects with Invariants. In Proceedings of
the European Conference on Object-Oriented
Programming (ECOOP), pages 154–178, 2013.
[45] J. Wei, L. Singaravelu, and C. Pu. A Secure
Information Flow Architecture for Web Service
Platforms. IEEE Transactions on Services Computing,
1(2):75–87, 2008.
[18] A. Guha, C. Saftoiu, and S. Krishnamurthi. The
Essence of JavaScript. In Proceedings of the European
Conference on Object-Oriented Programming
(ECOOP), pages 126–150, 2010.
[19] N. J. Gunther. Guerrilla capacity planning – a tactical
approach to planning for highly scalable applications
and services. Springer, 2007.
[20] J. Hodges, C. Jackson, and A. Barth. Rfc 6797: Http
strict transport security (hsts).
http://tools.ietf.org/html/rfc6797, 2012.
[21] P. Hosek, M. Migliavacca, I. Papagiannis, D. M. Eyers,
D. Evans, B. Shand, J. Bacon, and P. Pietzuch.
SafeWeb: A Middleware for Securing Ruby-based Web
Applications. In Proceedings of the International
Middleware Conference, pages 480–499, 2011.
[22] T. Jim, N. Swamy, and M. Hicks. Defeating script
injection attacks with browser-enforced embedded
policies. In Proceedings of the International World Wide
Web Conference (WWW), pages 601–610, May 2007.
[23] K. M. Kavanagh, M. Nicolett, and O. Rochford. Magic
Quadrant for Security Information and Event
Management. http://www.gartner.com/technology/
reprints.do?id=1-1W1N1U4&ct=140627, June 2014.
[24] P. B. Kruchten. Architectural Blueprints – The “4+1”
View Model of Software Architecture. Journal of IEEE
Software, 12(6):42–50, 1995.
[25] T. Krueger, C. Gehl, K. Rieck, and P. Laskov. TokDoc:
A Self-Healing Web Application Firewall. In
Proceedings of the 2010 ACM Symposium on Applied
Computing (SAC), pages 1846–1853, 2010.
[26] S. Lekies, B. Stock, and M. Johns. 25 Million Flows
Later – Large-scale Detection of DOM-based XSS. In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS), 2013.
[27] B. Livshits. Dynamic Taint Tracking in Managed
Runtimes. Technical Report MSR-TR-2012-114,
Microsoft Research, 2012.
[28] J. Magazinius, A. Askarov, and A. Sabelfeld. A
Lattice-based Approach to Mashup Security. In
Proceedings of the ACM Symposium on Information,
Computer and Communications Security (ASIACCS),
pages 15–23, 2010.
[29] L. Meyerovich, A. Felt, and M. Miller. Object views:
Fine-grained sharing in browsers. In Proceedings of the
19th international conference on World wide web, pages
721–730. ACM, 2010.
[30] L. A. Meyerovich and B. Livshits. ConScript:
Specifying and Enforcing Fine-Grained Security
Policies for JavaScript in the Browser. In Proceedings of
the IEEE Symposium on Security and Privacy (SP),
pages 481–496, 2010.
[31] M. S. Miller. Robust Composition: Towards a Uniﬁed
Approach to Access Control and Concurrency Control.
PhD thesis, Johns Hopkins University, Baltimore,
Maryland, USA, May 2006.
[32] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley,
and D. Evans. Automatically hardening web
applications using precise tainting. In Proceedings of
the IFIP International Information Security
Conference, pages 372–382, 2005.
[33] N. Nikiforakis, L. Invernizzi, A. Kapravelos,
S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and
(cid:23)(cid:24)(cid:24)