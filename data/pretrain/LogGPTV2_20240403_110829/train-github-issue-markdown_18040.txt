# Environment
    Windows build number: Win32NT 10.0.18362.0
    Windows Terminal version (if applicable): 0.5.2762.0
# Steps to reproduce
    echo -ne '\e]10;foo\e'; sleep 1; echo -ne '\\'; sleep 5; echo; sleep 1; echo; sleep 10
# Expected behavior
Two linefeeds eventually, nothing more.
OSC 10 sets the default foreground, it's not yet supported by WT. You can
replace it with any other number that's not yet supported.
The terminating sequence of `OSC` should be `ST` accoding to the standard
(`BEL` is a commonly used but nonstandard choice instead). `ST` in the `C0`
set is `ESC` followed by `\`.
Now we insert a bit of delay in the middle of `ST`. Such difference in timing
should never make a difference in the final outcome, not even when the
sequence is unsupported.
# Actual behavior
The following weirdnesses occur:
  * A literal `\` gets printed. It shouldn't.
  * That `\` gets printed 6 seconds after starting the command line, rather than 1 second after. That is, not immediately when received, but when the next character (whether that's a newline or not) is received.
  * Subsequent newlines don't move the cursor to the beginning of the line as expected, but walk downwards in the second column.
So it seems the parser might be stuck in some weird mode??
The bug does not occur if the delay is eliminated and the unsupported escape
sequence is printed in a single step. It is completely ignored then, as
expected.
The bug does not occur with supported escape sequences either, such as setting
the title with OSC 0. It's immune to injected delays, as expected.