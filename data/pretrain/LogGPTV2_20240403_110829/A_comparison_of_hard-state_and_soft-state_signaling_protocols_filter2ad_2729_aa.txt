title:A comparison of hard-state and soft-state signaling protocols
author:Ping Ji and
Zihui Ge and
James F. Kurose and
Donald F. Towsley
A Comparison of Hard-state and Soft-state Signaling
Protocols
Ping Ji, Zihui Ge, Jim Kurose, and Don Towsley 
fjiping,gezihui,kurose,PI:EMAIL
Computer Science Department,
University of Massachusetts at Amherst,
ABSTRACT
One of the key infrastructure components in all telecommunication
networks, ranging from the telephone network, to VC-oriented data
networks, to the Internet, is its signaling system. Two broad ap-
proaches towards signaling can be identiﬁed: so-called hard-state
and soft-state approaches. Despite the fundamental importance of
signaling, our understanding of these approaches - their pros and
cons and the circumstances in which they might best be employed
- is mostly anecdotal (and occasionally religious). In this paper,
we compare and contrast a variety of signaling approaches rang-
ing from a “pure” soft state, to soft-state approaches augmented
with explicit state removal and/or reliable signaling, to a “pure”
hard state approach. We develop an analytic model that allows us
to quantify state inconsistency in single- and multiple-hop signal-
ing scenarios, and the “cost” (both in terms of signaling overhead,
and application-speciﬁc costs resulting from state inconsistency)
associated with a given signaling approach and its parameters (e.g.,
state refresh and removal timers). Among the class of soft-state
approaches, we ﬁnd that a soft-state approach coupled with ex-
plicit removal substantially improves the degree of state consis-
tency while introducing little additional signaling message over-
head. The addition of reliable explicit setup/update/removal allows
the soft-state approach to achieve comparable (and sometimes bet-
ter) consistency than that of the hard-state approach.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]
General Terms
Performance, Design
Keywords
signaling, soft-state, hard-state
This work is supported in part by DARPA subcontracts with
Northrop Grumman Information Technology 2000-012 and 2000-
109, National Science Foundation subcontract with the University
of Florida UF-EIES-0205003-UMA, and National Science Foun-
dation grant ANI-0085848.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
1.
INTRODUCTION
One of the key infrastructure components in all telecommunica-
tion networks, ranging from the telephone network, to VC-oriented
data networks, to the Internet, is its signaling system. Two broad
classes of signaling approaches can be identiﬁed: so-called hard-
state and soft-state approaches. Between these two extremes lie
signaling approaches that in practice borrow various mechanisms
from each. Despite the fundamental importance of signaling, our
understanding of these two approaches - their pros and cons and
the circumstances in which they might best be employed is still not
well understood.
Broadly speaking, we associate the term “soft-state” with sig-
naling approaches in which installed state “times out” (and is re-
moved) unless periodically “refreshed” by the receipt of a signaling
message (typically from the entity that initially installed the state)
indicating that the state should continue to remain installed. Since
unrefreshed state will eventually time out, soft-state signaling re-
quires neither explicit state removal nor a procedure to remove or-
phaned state should the state-installer crash. Similarly, since state
installation and refresh messages will be followed by subsequent
periodic refresh messages, reliable signaling is not required. The
term “soft-state” was coined by Clark [3], who described the notion
of periodic state refresh messages being sent by an end system, and
suggested that with such refresh messages, state could be lost in a
crash and then automatically restored by subsequent refresh mes-
sages - all transparently to the end system, and without invoking
any explicit crash-recovery procedures:
“... the state information would not be critical in maintaining
the desired type of service associated with the ﬂow. Instead,
that type of service would be enforced by the end points,
which would periodically send messages to ensure that the
proper type of service was being associated with the ﬂow. In
this way, the state information associated with the ﬂow could
be lost in a crash without permanent disruption of the ser-
vice features being used. I call this concept “soft state,” and
it may very well permit us to achieve our primary goals of
survivability and ﬂexibility...”
Roughly speaking, then, the essence of a soft-state approach is
the use of best-effort periodic state-installation/refresh by the state-
installer and state-removal-by-timeout at the state-holder. Soft-
state approaches have been taken in numerous protocols, including
RSVP [20], SRM [9], PIM [6, 5, 7], SIP[10] and IGMP[4].
“Hard-state” signaling takes the converse approach to soft state
- installed state remains installed unless explicitly removed by the
receipt of a state-teardown message from the state-installer. Since
state remains installed unless explicitly removed, hard-state signal-
ing requires a mechanism to remove orphaned state that remains
after the state-installer has crashed or departed without removing
state. Similarly, since state installation and removal are performed
only once (and without state refresh or state timeout), it is impor-
tant for the state-installer to know when state has been installed or
removed. Reliable (rather than best-effort) signaling protocols are
thus typically associated with hard-state protocols. Roughly speak-
ing, then, the essence of a hard-state approach is the reliable and
explicit installation and removal of state information. Hard-state
approaches have been taken in protocols such as ST-II[14, 18] and
Q.2931b[15].
Between the extremes of a pure hard-state approach and a pure
soft-state approach lie many protocols that have adopted elements
of each approach. Indeed, protocols that were initially conceived
as pure soft-state protocols have adopted a number of hard-state
mechanisms (often as extensions) over time. For example, in
IGMPv1[4], soft-state timeout at a router was used to detect the
departure of previously registered hosts; IGMPv2/v3 [8, 2] later
added an explicit leave message to allow a host to explicitly inform
the state-holding router of its departure. In the original RSVP [20],
PATH and RESV state installation messages were transmitted best-
effort under the assumption that the loss of a signaling message
would be recovered from a later refresh message; ACK-based reli-
able signaling was introduced as an extension to RSVP in [1] and
was also suggested in [13]. RSVP has also provided for explicit
(although optional) removal of ﬁlter speciﬁcations since its concep-
tion. Hard-state protocols have adopted elements of the soft-state
approach as well. In the ST-II hard-state signaling protocol, peri-
odic HELLO messages serve to inform the HELLO sender that all
is well with its neighbors, and that its own state that relies on a
given neighbor is still valid - an implicit refreshing of its state.
Given the blurred distinctions between hard-state and soft-state
approaches and the fact that protocols falling into one category of-
ten adopt mechanisms typically associated with the other, we be-
lieve that the crucial issue is not whether a hard-state or a soft-state
approach is “better” in some absolute sense. Instead, we believe
that the more fundamental question is to understand how the mech-
anisms that have evolved into being included in various hard-state
and soft-state signaling protocols can best be used in given situa-
tions, and why.
In this paper, we thus compare and contrast a variety of signaling
approaches ranging from a “pure” soft-state approach, to soft-state
approaches augmented with explicit remote state removal and/or
reliable signaling, to a “pure” hard-state approach. We deﬁne a
set of generic protocols that lie along this spectrum, and develop
a uniﬁed parameterized analytic model that allows us to quantify
a key performance metric associated with a given signaling pro-
tocol - the fraction of time that the state of the state-installer and
the state-holder are inconsistent [16]. We also quantify the “cost”
(both in terms of signaling overhead, and application-speciﬁc costs
resulting from state inconsistency) associated with a given signal-
ing approach and its parameter values (e.g., state refresh and re-
moval timeout intervals). Among the class of soft-state approaches,
we ﬁnd that adding explicit removal in a soft-state approach sub-
stantially improves state consistency, while introducing little ad-
ditional signaling message overhead. The addition of reliable ex-
plicit setup/update/removal further allows the soft-state approach to
achieve comparable (and sometimes better) consistency than that of
the hard-state approach.
Our work here focuses on evaluating the performance of differ-
ent signaling mechanism and protocols. However, there are other
non-performance-oriented criteria by which to compare various sig-
naling approaches (e.g., the complexity or “robustness” of protocol
implementation). These criteria, however, are beyond the scope of
this paper.
The remainder of this paper is structured as follows. In Section 2,
we describe ﬁve different signaling protocols that incorporate vari-
ous hard-state and soft-state mechanisms, and qualitatively discuss
the factors that will inﬂuence performance. Section 3.1 presents an
analytic model for examining the performance of these approaches
in the single-hop case, and compares their performance. Section
3.2 considers the multi-hop case. Section 4 discusses related work.
Finally, Section 5 summarizes this paper and discusses future work.
2. SOFT-STATE, HARD-STATE AND PRO-
TOCOLS IN BETWEEN
In this section, we describe the operation of ﬁve different ab-
stract signaling protocols. These protocols differ in the manner
in which state is installed, maintained, and removed, and whether
selected signaling messages are transported best-effort or reliably.
We will consider a single node (henceforth referred to as the “sig-
naling sender”) that wishes to install, maintain, and eventually re-
move (or have removed) state at a remote node (that we will refer
to as the “signaling receiver”). We consider the simple, but illustra-
tive, example of a signaling sender having a local state value that
it wishes to install at one or multiple signaling receivers along a
signaling path. When the signaling sender state value equals it of
the signaling receiver(s), we will say that the values are consistent
[16]; otherwise the sender and receiver(s) state values are incon-
sistent. Our goal here is not to model a speciﬁc signaling protocol
such as RSVP or Q2931b, but rather to capture the essential as-
pects of identiﬁably different approaches towards signaling. After
describing the protocols, we then consider the performance metrics
by which these protocols can be evaluated, and qualitatively discuss
the factors that will impact performance.
We will consider the following ﬁve approaches:
Pure soft-state (SS): In this approach, the signaling sender sends
a trigger message [1] that contains state installation or update in-
formation to the signaling receiver, and starts a state refresh timer
(with value T ). When the state-refresh timer expires, the signaling
sender sends out a refresh message [20] containing the most up-to-
date signaling state information, and resets the refresh timer. Trig-
ger and refresh message are sent in a best-effort (unreliable) man-
ner. When a trigger or refresh message is received at the signaling
receiver, the corresponding signaling state information is recorded
and a state-timeout timer (with value X) associated with this state
is started (or restarted if it was already running). Signaling state at
the signaling receiver is removed only when its state-timeout timer
expires; that is, state will be maintained as long as the receiver con-
tinues to receive refresh messages before the state-timeout timer
expires. This timeout could occur because the signaling sender
is no longer sending refresh messages (because its local state has
been removed and it thus wants the remote state to be removed at
the signaling receiver), or because refresh messages have been lost
in transmission, and have resulted in a state timeout at the signal-
ing receiver. We will refer to the latter case as false removal of
state, since the signaling sender did not intend for this state to be
removed.
Soft-state with Explicit Removal (SS+ER): SS+ER is similar
to the SS approach, with the addition of an explicit state-removal
message. When state is removed at the signaling sender, the sender
sends a best effort (unreliable) signaling message to the signaling
receiver carrying explicit state-removal information. State refresh
and trigger messages, and a state-timeout timer are all employed as
in the case of SS.
Figure 1: Signaling sender and receiver: messages and mechanisms
Soft-State with Reliable Trigger (SS+RT): SS+RT is similar to
SS with two important additions. First, trigger messages are trans-
mitted reliably in SS+RT. Each time a trigger message is transmit-
ted, the sender starts a retransmission timer (with value R). On re-
ceiving an explicit trigger message, the destination not only updates
signaling state, but also sends an acknowledgment to the sender.
If no trigger acknowledgment is received before the retransmis-
sion timer expires, the signaling sender resends the trigger mes-
sage. Secondly, SS+RT also employs a notiﬁcation mechanism in
which the signaling destination informs the signaling sender about
state removals due to state-timeout timer expiration. This allows
the signaling sender to recover from false removal by sending a
new trigger message.
Soft-State with Reliable Trigger/Removal (SS+RTR): SS+RTR
is similar to the SS+RT approach, except that the SS+RTR ap-
proach uses reliable messages to handle not only state setup/update
but also state removal.
Hard-State (HS) approach: In the HS approach, reliable ex-
plicit messages are used to setup, update and remove state at the
signaling receiver. Neither refresh messages nor soft-state timeout
removal mechanisms are employed. A crucial concern with any
hard-state protocol is the removal of orphaned state at the signaling
receiver. Because the hard-state protocol does not provide timeout-
based state removal, it must rely on an external signal to detect that
it is holding orphaned state. This signal can be generated for exam-
ple, by a separate heartbeat protocol whose job is to detect when the
signaling sender crashes and then inform the signaling receiver of
this event. Alternatively, the external signal might be generated via
a notiﬁcation from a lower layer protocol at the signaling receiver
that had an association with a lower layer protocol at the signaling
sender and hence detected that signaling sender failed. Once such
an external notiﬁcation (signal) is received, the hard-state signaling
approach cleans up the orphaned signaling state associated with
the signaling sender. One complicating factor is that of false noti-
ﬁcation - the external signal may falsely detect a signaling sender
crash (this would occur, for example, if a series of heartbeat mes-
sages were lost, but the signaling sender was still operational). As
in the case of SS+RT, false notiﬁcation can be repaired by having
the signaling receiver notify the signaling sender (if it exists) that its
orphaned state has been removed. A signaling sender whose state
has been incorrectly removed can then send a new trigger message.
Figure 1 illustrates the messages and mechanisms used by the
signaling sender and receiver in the various signaling protocols.
In the following section, we will develop a uniﬁed parameterized
analytic model that allows us to quantify a key metric associated
with a given signaling protocol - the fraction of time that the state
of the state-installer and the state-holder are consistent (i.e., have
the same value). Clearly, we would like this value to be as close to
one as possible. In addition to quantifying consistency, we would
also like to quantify the cost associated with a given signaling ap-
proach and the level of consistency it is able to achieve. One aspect
of this cost will be the signaling message rate itself. A second
aspect of this cost is the cost associated with being in an inconsis-
tent state. For example, in IGMP, when an end host leaves without
signaling its departure to its edge router, multicast data will con-
tinue to ﬂow towards the receiver (even though the receiving host
is no longer in the multicast group) - a cost. In the case of a hier-
archical peer-to-peer ﬁle-sharing system in which a client uploads
the names of the ﬁles it shares to a server when it joins the P2P
network, but then leaves the network without signaling its depar-
ture, the inconsistent state at the server will result in other peers
attempting to contact the departed peer - again, a cost. In Section
3, we model this cost as a weighted sum of the signaling overhead
and application-speciﬁc costs (corresponding to the cost of the un-
wanted multicast data ﬂows, or connection attempts to a departed
peer in the examples above).
We conclude this section with a qualitative discussion of the fac-
tors that will inﬂuence the performance of signaling protocols:
(cid:15) Application-speciﬁc inconsistency cost. As noted above,
these are the costs associated with the signaling sender and
receiver being in inconsistent states. Clearly, when this cost
is high, the signaling sender may be willing to incur a higher
signaling overhead in order to keep the signaling sender and
receiver states as consistent as possible.
(cid:15) Refresh timeout value. As noted in [1], the smaller the
value of the refresh timer, the sooner that consistent state will
be installed at the state-holder, and consequently the smaller
the application-speciﬁc cost due to state inconsistency. How-
ever, this advantage comes at the cost of an increased signal-
ing rate. If the application-speciﬁc cost of inconsistent state
is high, however, this increased signaling cost may be war-
ranted.
(cid:15) Soft-state timeout value. Since this timer is meant to re-
move state that is not refreshed, ideally this value should be
as small as possible in order to remove orphaned state as soon
as the signaling sender departs. However, too small a timeout
value can result in false state removal.
peer’s registration of its ﬁles at a supernode is a single-hop signal-
ing process, where the signaling sender is the peer, the signaling
receiver is the supernode, and the signaling state contains the iden-
tities of the shared ﬁles and the fact the peer is in the system and
serving ﬁles.
(cid:15) Signaling message loss. As the probability of message loss
becomes higher, we expect the fraction of time that the sig-
naling sender and receiver states are inconsistent also in-
crease, as it will take longer for either a message to be de-
livered reliably, or for a best-effort refresh message to be de-
livered. In cases of high loss and high application-speciﬁc in-
consistency costs, those protocols with explicit reliable trans-
fer will be preferable.
(cid:15) Number of hops.
In certain signaling protocols such as
RSVP and AFSP[19], a signaling sender must install state
at multiple nodes between itself and the ultimate signaling
destination. As the number of hops increases, the fraction
of time that all nodes are in an inconsistent state will also
increase.
In the following sections, we will develop an analytic model that
will allow us to quantitatively explore these issues.
3. MODELING AND ANALYSIS OF SIGNAL-
ING APPROACHES
We begin our analysis by considering the simple example of
a single node (the “signaling sender”) that can install, maintain,
change, and eventually remove (or have removed) a single piece of
state information at a remote node (the “signaling receiver”). We
focus here on a single piece (rather than multiple pieces) of state,
as it is conceptually simpler and the latter can generally be con-
sidered as multiple instantiations of the former. The installation,
maintenance, change, and removal of state is accomplished using
one of the ﬁve abstract signaling approaches described in the pre-
vious section. We assume that the signaling sender and receiver
communicate over a network that can delay and lose, but not re-
order, messages.
3.1 Signaling in a Single-hop System
We ﬁrst consider a single-hop system, in which the signaling
sender and receiver are the only two entities involved in the signal-
ing protocol. As shown in Figure 2, we can think of the two entities
as being connected through a single logical hop, which may consist
S
D
S
D
(a) single physical hop
(b) multiple physical hops
with end-to-end signaling
Figure 2: single-hop signaling systems
3.1.1 Model Description
Before describing our system model, we ﬁrst brieﬂy discuss the
events that can occur during the life cycle of a signaling sender/receiver
pair.
Signaling state setup. When the signaling session ﬁrst installs
(initializes) its local state, it transmits a signaling message contain-
ing the state to the receiver. After some delay, the signaling mes-
sage reaches the remote receiver, enabling both sender and receiver
to achieve consistent state.
Signaling state update. A sender may also update its local state.
As in the case of state setup, the sender then installs the new state
value at the receiver. When a sender updates its local state, the
sender’s and receiver’s state will be inconsistent until the update
successfully propagates to the receiver.
Signaling state removal. At the end of the lifecycle, the sender
will remove its state. At this point, the receiver’s state should also
be removed. Once the sender has removed its state, the receiver’s
state is “stale” (inconsistent) until it is removed. A number of