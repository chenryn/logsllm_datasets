    ```
    Welcome to nginx!
    Welcome to nginx!
    If you see this page, the nginx web server is successfully 
    installed and working. Further configuration is required.
    For online documentation and support please refer to
    nginx.org.
    Commercial support is available at
    nginx.com.
    Thank you for using nginx.
    ```
    由于您正在使用`curl`导航到 NGINX 欢迎页面，它将以原始 HTML 格式呈现在您的终端显示器上。
在本节中，我们已经在同一个 Docker 环境中成功地生成了两个 NGINX web 服务器实例。我们将一个实例配置为不暴露默认 Docker 网络之外的任何端口，而将第二个 NGINX 实例配置为在同一网络上运行，但将端口`80`暴露给端口`8080`上的主机系统。我们看到了如何使用标准的互联网浏览器以及 Linux 中的`curl`实用程序来访问这些容器。
在本练习中，我们还看到了容器如何使用 Docker 网络与其他容器直接对话。我们使用`webserver1`容器调用`webserver2`容器的 IP 地址，并显示该容器托管的网页的输出。
在本练习中，我们还能够使用本机 Docker `bridge`网络演示容器实例之间的网络连接。然而，当我们大规模部署容器时，没有简单的方法知道 Docker 网络中的哪个 IP 地址属于哪个容器。
在下一节中，我们将研究本机 Docker DNS，并了解如何使用人类可读的 DNS 名称向其他容器实例可靠地发送网络流量。
# 原生〔t0〕DNS Docker
运行容器化基础架构的最大好处之一是能够快速轻松地横向扩展您的工作负载。一个集群中有多台机器，它们之间有一个共享的`overlay`网络，这意味着您可以有许多容器跨服务器群运行。
正如我们在前面的练习中看到的，Docker 赋予我们允许容器通过 Docker 提供的各种网络驱动程序(如`bridge`、`macvlan`和`overlay`驱动程序)与集群中的其他容器直接对话的能力。在前面的例子中，我们利用 Docker `bridge`网络允许容器通过各自的 IP 地址相互对话。然而，当您的容器部署在真实的服务器上时，您通常不能依赖于具有一致的 IP 地址的容器，它们可以使用这些地址来相互交谈。每当一个新的容器实例终止或重新启动时，Docker 都会给这个容器一个新的 IP 地址。
类似于传统的基础架构场景，我们可以利用容器网络中的域名系统，为容器提供可靠的相互通信方式。通过为 Docker 网络中的容器分配人类可读的名称，用户不再需要在每次想要在 Docker 网络上的容器之间发起通信时查找 IP 地址。Docker 本身将在容器产生和重生时跟踪它们的 IP 地址。
在 Docker 的旧版本中，通过使用`docker run`命令中的`--link`标志在容器之间建立链接，可以实现简单的 DNS 解析。使用链接，Docker 将在链接容器的`hosts`文件中创建一个条目，这将实现简单的名称解析。然而，正如您将在接下来的练习中看到的，在容器之间使用链接可能会很慢，不可伸缩，并且容易出错。Docker 的最新版本支持在同一 Docker 网络上运行的容器之间的本地 DNS 服务。这允许容器查找在同一 Docker 网络中运行的其他容器的名称。这种方法的唯一警告是，本地 Docker DNS 在默认的 Docker `bridge`网络上不起作用；因此，必须首先创建其他网络来构建您的容器。
要使本机 Docker DNS 工作，我们必须首先使用`docker network create`命令创建一个新网络。然后，我们可以使用带有`--network-alias`标志的`docker run`在该网络中创建新的容器。在下面的练习中，我们将使用这些命令来了解本机 Docker DNS 如何工作，以实现容器实例之间的可扩展通信。
## 练习 e 6.02:使用 Docker DNS
在下面的练习中，您将了解在同一网络上运行的 Docker 容器之间的名称解析。您将首先使用传统链接方法启用简单的名称解析。您将通过使用更新、更可靠的本地 Docker DNS 服务来对比这种方法:
1.  First, create two Alpine Linux containers on the default Docker `bridge` network that will communicate with each other using the `--link` flag. Alpine is a very good base image for this exercise because it contains the `ping` utility by default. This will enable you to quickly test the connectivity between containers in the various scenarios. To get started, create a container called `containerlink1` to indicate that you have created this container using the legacy link method:
    ```
    $ docker run -itd --name containerlink1 alpine:latest
    ```
    这将在默认的 Docker 网络中启动一个名为`containerlink1`的容器。
2.  Start another container in the default Docker bridge network, called `containerlink2`, which will create a link to `containerlink1` to enable rudimentary DNS:
    ```
    $ docker run -itd --name containerlink2 --link containerlink1 alpine:latest
    ```
    这将在默认的 Docker 网络中启动一个名为`containerlink2`的容器。
3.  Run the `docker exec` command to access a shell inside the `containerlink2` container. This will allow you to investigate how the link functionality is working. Since this container is running Alpine Linux, you do not have access to the Bash shell by default. Instead, access it using an `sh` shell:
    ```
    $ docker exec -it containerlink2 /bin/sh
    ```
    这会让你掉进`containerlink2`容器里的一个根`sh`壳里。
4.  From the shell of the `containerlink2` container, ping `containerlink1`:
    ```
    / # ping containerlink1
    ```
    您将收到对`ping`请求的回复:
    ```
    PING container1 (172.17.0.2): 56 data bytes
    64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.307 ms
    64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.162 ms
    64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.177 ms
    ```
5.  Use the `cat` utility to have a look at the `/etc/hosts` file of the `containerlink2` container. The `hosts` file is a list of routable names to IP addresses that Docker can maintain and override:
    ```
    / # cat /etc/hosts
    ```
    `hosts`文件的输出应如下所示:
    ```
    127.0.0.1  localhost
    ::1  localhost ip6-localhost ip6-loopback
    fe00::0    ip6-localnet
    ff00::0    ip6-mcastprefix
    ff02::1    ip6-allnodes
    ff02::2    ip6-allrouters
    172.17.0.2    containerlink1 032f038abfba
    172.17.0.3    9b62c4a57ce3
    ```
    从`containerlink2`容器的`hosts`文件的输出中，观察到 Docker 正在为`containerlink1`容器名称及其容器标识添加条目。这使得`containerlink2`容器能够知道名称，并且容器标识被映射到 IP 地址`172.17.0.2`。键入`exit`命令将终止`sh` shell 会话，并将您带回环境的主终端。
6.  Run `docker exec` to access an `sh` shell inside the `containerlink1` container:
    ```
    $ docker exec -it containerlink1 /bin/sh
    ```
    这会让你掉进`containerlink1`容器的壳里。
7.  Ping the `containerlink2` container using the `ping` utility:
    ```
    / # ping containerlink2
    ```
    您应该会看到以下输出:
    ```
    ping: bad address 'containerlink2'
    ```
    无法 ping 通`containerlink2`容器，因为链接容器只能单向工作。`containerlink1`容器不知道`containerlink2`容器存在，因为在`containerlink1`容器实例中没有创建`hosts`文件条目。
    注意
    您只能使用容器之间的传统链接方法链接到正在运行的容器。这意味着第一个容器不能链接到稍后开始的容器。这是为什么不再推荐使用容器之间的链接的众多原因之一。我们将在本章中介绍这个概念，向您展示功能是如何工作的。
8.  Due to the limitations using the legacy link method, Docker also supports native DNS using user-created Docker networks. To leverage this functionality, create a Docker network called `dnsnet` and deploy two Alpine containers within that network. First, use the `docker network create` command to create a new Docker network using a `192.168.56.0/24` subnet and using the IP address `192.168.54.1` as the default gateway:
    ```
    $ docker network create dnsnet --subnet 192.168.54.0/24 --gateway 192.168.54.1
    ```
    根据您使用的 Docker 版本，成功执行此命令可能会返回您创建的网络的标识。
    注意
    简单地使用`docker network create dnsnet`命令将创建一个带有 Docker 分配的子网和网关的网络。本练习演示如何为 Docker 网络指定子网和网关。还应注意，如果您的计算机连接到`192.168.54.0/24`子网或与该空间重叠的子网，可能会导致网络连接问题。请在本练习中使用不同的子网。
9.  Use the `docker network ls` command to list the Docker networks available in this environment:
    ```
    $ docker network ls
    ```
    应返回 Docker 网络列表，包括您刚刚创建的`dnsnet`网络:
    ```
    NETWORK ID      NAME       DRIVER     SCOPE
    ec5b91e88a6f    bridge     bridge     local
    c804e768413d    dnsnet     bridge     local
    f52b4a5440ad    host       host       local
    9bed60b88784    none       null       local
    ```
10.  Run the `docker network inspect` command to view the configuration for this network:
    ```
    $ docker network inspect dnsnet
    ```
    应显示`dnsnet`网络的详细信息。密切关注`Subnet`和`Gateway`参数。这些参数与您在*步骤 8* 中创建 Docker 网络时使用的参数相同:
    ![Figure 6.8: Output from the docker network inspect command ](img/B15021_06_08.jpg)
    图 6.8:docker 网络检查命令的输出
11.  Since this is a Docker `bridge` network, Docker will also create a corresponding bridge network interface for this network. The IP address of the `bridge` network interface will be the same IP address as the default gateway address you specified when creating this network. Use the `ifconfig` command to view the configured network interfaces on Linux or macOS. If you are using Windows, use the `ipconfig` command:
    ```
    $ ifconfig
    ```
    这将显示所有可用网络接口的输出，包括新创建的`bridge`接口:
    ![Figure 6.9: Analyzing the bridge network interface for the newly created Docker network  ](img/B15021_06_09.jpg)
    图 6.9:分析新创建的 Docker 网络的网桥接口
12.  Now that a new Docker network has been created, use the `docker run` command to start a new container (`alpinedns1`) within this network. Use the `docker run` command with the `--network` flag to specify the `dnsnet` network that was just created, and the `--network-alias` flag to give your container a custom DNS name:
    ```
    $ docker run -itd --network dnsnet --network-alias alpinedns1 --name alpinedns1 alpine:latest
    ```
    成功执行命令后，应在返回正常终端提示之前显示完整的容器标识。
13.  Start a second container (`alpinedns2`) using the same `--network` and `--network-alias` settings:
    ```
    $ docker run -itd --network dnsnet --network-alias alpinedns2 --name alpinedns2 alpine:latest
    ```
    注意
    理解`–network-alias`标志和`--name`标志之间的区别很重要。`--name`标志用于在 Docker API 中赋予容器一个人类可读的名称。这使得按名称启动、停止、重新启动和管理容器变得很容易。但是`--network-alias`标志用于为容器创建一个自定义的域名系统条目。
14.  Use the `docker ps` command to verify that the containers are running as expected:
    ```
    $ docker ps 
    ```
    输出将显示正在运行的容器实例:
    ```
    CONTAINER ID    IMAGE           COMMAND      CREATED 
      STATUS              PORTS             NAMES
    69ecb9ad45e1    alpine:latest   "/bin/sh"    4 seconds ago
      Up 2 seconds                          alpinedns2
    9b57038fb9c8    alpine:latest   "/bin/sh"    6 minutes ago
      Up 6 minutes                          alpinedns1
    ```
15.  Use the `docker inspect` command to verify that the IP addresses of the container instances are from within the subnet (`192.168.54.0/24`) that was specified:
    ```
    $ docker inspect alpinedns1
    ```
    以下输出被截断以显示相关细节:
    ![Figure: 6.10: Output from the Networks section of the alpinedns1 container instance ](img/B15021_06_10.jpg)
    图:6.10:alpindens1 容器实例的网络部分的输出
    从输出中可以观察到`alpinedns1`容器被部署了一个`192.168.54.2`的 IP 地址，这是在 Docker 网络创建期间定义的子网的一部分。
16.  Execute the `docker network inspect` command in a similar fashion for the `alpinedns2` container:
    ```
    $ docker inspect alpinedns2