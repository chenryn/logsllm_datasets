# SUCTF Web 题目解析与出题思路分享

在本次 SUCTF 中，我设计了三道 Web 类题目：CheckIn、pythonginx 和 Upload Labs 2。以下将详细探讨每道题目的设计思路及一些随想，同时也会分享最近对 phar 反序列化的一些研究心得。

## CheckIn
### 设计思路
这道题的灵感来源于我在查阅 PHP 文档时发现的一个关于 `.user.ini` 文件的[说明](https://www.php.net/manual/en/configuration.file.per-user.php)。`.user.ini` 文件可以被用来构造 PHP 后门，这一技巧虽然已经存在很长时间，但在许多上传教程中却鲜有提及，例如 [upload labs](https://github.com/c0ny1/upload-labs) 也未涉及此点。考虑到其相对简单且可能仍有部分参赛者不了解这个 trick，我决定将其作为签到题。
  
### 实施细节
题目源码基于国赛华东北赛区某题修改而来。原本计划禁止使用 `.htaccess` 来避免误导选手，但因笔误导致禁用了错误的目标（`htacess`），从而引发了一些混淆。此外，由于权限设置不当，进一步增加了难度。对于因此给各位带来的困扰，在此深表歉意。

## pythonginx
### 背景信息
本题源自于我在 Black Hat 上看到的一篇论文 [us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf](https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf)，该文中提到了一种利用特殊字符（如 ℆）访问敏感文件的方法。

### 出题意图
尽管最终题目变成了一个简单的猜 flag 位置的问题，但我希望通过这种方式让更多人了解到 Unicode 正规化的潜在安全风险。

## Upload Labs 2
### 概述
在这道题中，我最初打算使用 `__wakeup` 方法来实现反序列化攻击，但由于深夜疲劳导致误用为 `__destruct`，使得原定的最后一环挑战未能实现。尽管如此，通过结合 `finfo_file` 等函数和 `php://filter` 伪协议，依然能够成功触发 phar 反序列化过程。

### 关键技术
- **FINFO_FILE**：通过 `_php_finfo_get_type` 调用 `php_stream_open_wrapper_ex` 实现 phar 反序列化。
- **PHP FILTER**：利用 `php://filter/read=convert.base64-encode/resource=` 绕过某些限制进行文件操作。
- **XXE to PHAR**：即使外部实体加载被禁用，仍可通过特定方式执行 XXE 攻击并进而触发 phar 反序列化。
- **MySQL Connection Chain**：模拟 MySQL 连接流程以演示如何利用反射类方法达到预期效果。

## 结语
此次 SUCTF 的成功举办离不开新队员们的辛勤付出。尽管我们在运维和命题方面尚显稚嫩，但我们会不断学习进步，争取为大家提供更优质、更具挑战性的竞赛体验。感谢每一位参与者的支持与理解！

如果你有兴趣进一步讨论 phar 技巧或其他相关话题，请随时联系我 (zeddyu.lu#gmail.com) 或者加入 SU 团队 (suers_xctf#126.com)。再次感谢大家的热情参与！