which returns a 64-bit double ﬂoat value at a given address.
The target region may contain entries that are interpreted as
NaN. Due to the way ﬂoating point numbers are handled, the
result is NaN if a value with the highest 11 bits set to 1 is
hit. This cannot be distinguished from a faulting read attempt,
as this yields NaN as well. This needs additional byte-shifted
probes around that address to verify that the page is indeed
mapped. By retrieving a value which is not NaN, we are certain
that the page is mapped.
We are able to scan 4GiB beginning from the heap start.
Once this space is scanned, the heap address of the asm.js
module needs to be adjusted and scanning can continue. Care
has to be taken to only perform probes which attempt to read
out of bounds of the asm.js heap size. The heap size is speciﬁed
on creation of the asm.js object. Normally, when the heap
pointer is not modiﬁed, inbound accesses do not throw an
exception, while out of bound accesses do. As we modiﬁed the
heap location to point to an unmapped address, inbound heap
accesses will throw exceptions. These are not crash-resistant.
Simply moving the initial heap location to a lower address and
scanning with an offset from the targeted address avoids this
problem. Thus, only out of bound probes are utilized, as these
do not terminate Firefox.
c) Determining Memory Contents: Once a mapped
page is found, we need to determine what it contains. When
sweeping the complete memory, we can hit shared modules,
data structures like the TEB, or application heaps. Learning
what memory contains can be done using regular JavaScript
by utilizing the capability to call fully featured JavaScript
functions from asm.js. We can therefore use the same heuristics
used with Internet Explorer to, for example, safely deduce a
TEB. At the end, the same techniques used in Internet Explorer
can be utilized to gain code execution.
C. Memory Scan Timings
We used performance.now(),
the high-resolution per-
formance counter of JavaScript. We performed 268,369,911
probes with Firefox (Windows and Linux) and 32,768 probes
with IE on unmapped memory to measure the probes per
seconds a single browser thread can achieve. We observed
different scanning rates between the two tested browsers. 32-
bit Internet Explorer was only able to reach 63 probes/s, while
Firefox was able to scan with 718 probes/s in Windows and
18,357 probes/s in Linux on average. However, this includes
optimizations as explained below.
The difference in scanning speeds is caused by the different
methods used for probing. While Internet Explorer needs to
spawn a new JavaScript function with setInterval() for
every probe, Firefox uses ahead-of-time compiled code of
asm.js. This causes signiﬁcantly less overhead. We were able
to move parts of the JavaScript scanning loop into the asm.js
code, providing another speedup. This is due to fewer calls
into the asm.js JavaScript subset, which are expensive. We
provide only maximum scanning times, as these are already
small enough to be practical for an adversary.
Figure 3. Location of the asm.js heap pointer (heapLoc) needed to modify
in order to gain crash-resistance.
chain (LdrInitShimEngineDynamic). The chain propagates
our ﬁrst controlled argument P in a way that
LdrInitShimEngineDynamic([P+0x08]+0x20, [P]+0x18)
is executed. If the ﬁrst parameter points to any module,
the second parameter can specify a string pointer to a DLL
name. This DLL can reside on a remote server and is
loaded into the address space of the program. Hence, the
adversary reaches her goal of code execution. We opted to
use LdrInitShimEngineDynamic because neither EMET [31]
nor CCFIR [59] blacklist the function, and normally dynamic
loading of remote DLLs via the standard Windows API is
monitored. We can also use WinExec([P+0x08]+0x20, )
with a chain of four functions to achieve the execution of
arbitrary programs.
B. Memory Probing in Mozilla Firefox
Next, we describe the steps we used to scan memory in
64-bit Mozilla Firefox on Windows 8.1 and Ubuntu 14.10
Linux 3.17.1 All steps are also applicable to any other 64-
bit application embedding the SpiderMonkey engine. This
includes for example Mozilla Thunderbird with asm.js enabled.
We introduced a vulnerability into Firefox 38.0 to simulate
a real-world bug. This allows to leak information into the
JavaScript context and write to memory addresses. With these
primitives, we show the creation of crash-resistance and the
feasibility of memory oracles to scan arbitrary memory.
In contrast to Internet Explorer, we do not need to rely on
setInterval() and web workers. Instead of creating a fake
object, we need to change ﬁelds in Firefox’ object metadata
to obtain crash-resistance. However, web workers can be used
to increase the performance, especially since calling into and
out of asm.js is an expensive operation. The main bottleneck
is the handling of generated faults, because they are delivered
with four context switches for every exception.
a) Manipulating the Function Object: We let Firefox
create an asm.js function by utilizing the asm.js subset of
JavaScript. This leads to a AsmJSModule memory object. We
then overwrite the heap location to point to the memory region
we want to scan. To achieve this goal, we use an information
leak to ﬁrst deduce the location of the JSSValue object,
which constitutes the function reference. Then, we utilize
targeted reads to learn the location of the heap address in the
AsmJSModule. We then set the heap location to the region we
want to scan (see Figure 3). It is possible to use the function
object several times: by setting the heap location to another
address for each probe, we use the ahead-of-time compiled
asm.js code repeatedly.
11
In 32-bit Internet Explorer it takes at most (0x80000000−
0x78000000)/0x1000 = 32, 768 crash-resistant probes to
locate the TEB. Thus,
the maximum scanning time is
(32, 768/63)s = 520.1s (8.7 minutes). To locate the most
upper mapped DLL, 28 = 256 probes are necessary at
most. This is due to the module base entropy of 8 bits, the
64KB alignment of modules, and the address scan range from
0x77000000 to 0x78000000 where at least one module resides.
This yields a maximum scanning time of (256/63)s = 4.1s.
In Firefox 64-bit in Windows we scanned for PE metadata
of mapped modules. To locate the DLL mapped on top of the
address space, it takes at most 219 = 524, 288 probes due to
a module base entropy of 19 bits in 64-bit processes. Thus,
the maximum scanning time is (524, 288/718)s = 730.2s
(12.2 minutes). Scanning starts at the top usermode address
of 0x7FFFFFE0000 and is performed toward lower addresses
in 64KB steps.
In Firefox 64-bit for Linux, we focus on ﬁnding reference-
less hidden memory. An instantiation of reference-less memory
is the linear safe region of the 64-bit implementation of CPI.
Locating the safe region of CPI can be done in very few steps.
As outlined earlier, we ﬁrst probe for a location in the region
and then use binary search to locate the exact starting address.
As this requires less than 1,000 probes, it is almost instant
((1, 000/18, 357)s = 0.05s).
The difference in probes/s between the Windows and Linux
version of Firefox is due to the fast signal handling in Linux
in comparison to the exception handling in Windows. Speed
increases further when spawning several workers that perform
the scanning. This is due to multiple cores on modern CPUs,
which run the worker threads in parallel.
VI. RELATED WORK
Recent years of
research show a continuously rising
amount of achievements on both the offensive and defensive
side. Back in 2004, Shacham et al. [50] showed the inef-
fectiveness of ASLR on 32-bit systems due to its suscep-
tibility to brute-force attacks. Their work suggested defense
mechanisms like subsequent re-randomization. While their
approach targeted servers on 32-bit systems, we show that
similar capabilities are possible with web browsers on 32-bit
and 64-bit platforms.
Since then, several approaches have been proposed to
levels of randomization problems. Binary
tackle different
Stirring [56] randomizes basic blocks at
the cost of high
performance loss. Oxymoron approaches the problem by using
information hiding techniques [3]. By rewriting 32-bit Linux
binaries and adding an additional protected layer of indirec-
tion for control ﬂow transfers, Oxymoron allows ﬁne-grained
ASLR without
losing code sharing capabilities. However,
these defenses are still vulnerable against data-only attacks
combined with information leakages. Snow et al. introduced
just-in-time code-reuse (JIT-ROP) [51] that can repeatedly
utilize an information leak to bypass ﬁne-grained ASLR im-
plementations. The authors suggest frequent re-randomization
at runtime as a possible solution. Isomeron [17] approaches
that problem by applying re-randomization at different lev-
els of granularity. This approach has an immense effect on
thwarting code-reuse attacks. However, our work shows that
re-randomization of code is not enough, as constant structures
can be misued to bypass it. Especially with crash-resistance
and memory oracles, constant structures are locatable without
control-ﬂow hijacking.
Bittau et al. [6] proposed another interesting ﬂavor of ROP
attacks which they called Blind ROP (BROP). The authors
show how stack buffer overﬂows can be utilized to bypass
ASLR and conduct code-reuse attacks remotely. BROP uses
server crashes as a side channel which, in turn, reveals infor-
mation about the memory layout. By locating and arranging
speciﬁc gadgets remotely, they trigger a write over a socket
that transfers the binary to the attacker to ﬁnd more gadgets.
Our work is different in that it focuses on browsers, which
have a hard crash policy. Nevertheless, with crash-resistance
and memory oracles we are able to undermine memory secrecy.
Seibert et al. introduced another approach on the Apache
server by reading bytes and measuring the time [48]. It turns
out that speciﬁc bytes leave different timing patterns and thus,
probed in sequence, reveal
the memory
layout. Our work differs in that we introduce fault-tolerant
functionality in browsers, which has not been shown before.
Its result, however, is similar, in that we can deduce memory
which is not locatable by simple memory disclosures.
information about
Another branch of defense mechanisms involves CFI. Due
to its performance overhead, research has put its focus on
the coarse-grained variant of CFI. However, recent research
the coarse-grained variants are prone to
demonstrates that
code-reuse attacks [16, 21, 47]. Schuster et al.
introduce
Counterfeit Object-Oriented Programming (COOP) [46] that
ranks itself on the same line with other code-reuse attacks.
The authors manage to bypass many CFI defense mechanisms
by using chains of existing C++ virtual function calls. The
drawback is that semantic-aware C++ defenses check virtual
function table hierarchies and prevent COOP. In contrast, we
present a different function-reuse technique in addition to
the contributions of crash-resistance and memory oracles. It
uses exported function chains and C-like indirect calls instead
of virtual function calls. Thus, C++ defenses are insufﬁcient
against it. Furthermore, we combined function chaining with
fault-tolerance to gain a novel function-reuse technique named
Crash-Resistant Oriented Programming (CROP).
Note that register or data-ﬂow randomization is insufﬁcient
as a defense against function chaining as well: function pro-
totypes of exported functions are mostly documented to ease
their usage by a programmer. Thus, the number of arguments
and their types are known. If an exported function propagates
ﬁelds of its ﬁrst argument structure to parameters for a function
at an indirect call site, the propagation is unaffected by register
or data-ﬂow randomization. As the propagated ﬁelds constitute
parameters, they always need to be pushed onto the stack or
put into parameter registers speciﬁed in the ABI. Shufﬂing the
parameters makes is necessary to adjust the parameter handling
of each function which is allowed at the indirect call site. To
our knowledge this is not done by current defenses [13, 37].
In 2014, Kuznetsov et al. introduce CPI [26]. As discussed
before, CPI is prone to data pointer overwrites: Evans et al.
showed that such overwrites can be utilized to launch timing
side-channel attacks that lead to information leakages about
the safe region [19]. Similarily, we can deduce the reference-
12
less safe region. However, we show that it is possible within
Firefox which does normally not allow faults, while Evans et
al. utilize the web server Nginx, which respawns upon a crash.
CROP is in spirit similar to sigreturn-oriented program-
ming (SROP [8]), as we can set register contexts as well.
While SROP is only possible on Linux, we can utilize crash-
resistance to perform arbitrary exported function chaining and
system call dispatching on Windows in a fault-tolerant way.
VII. DISCUSSION
In the following, we discuss the implications and limita-
tions of crash-resistance and memory oracles. Additionally, we
elaborate on potential countermeasures and design choices to
thwart fault-tolerant memory scanning.
A. Novel Memory Scanning Technique
The existence of reliable and fast memory oracles enables
an attacker to bypass all defenses that rely in any way on
metadata that is stored in userspace. A common approach was
to keep the data in reference-less memory so an attacker would
need to hijack the control ﬂow, inject code, or perform code-
reuse attacks, before disabling that protection. This implies that
the defense also protected itself. However, we show that hidden
information in the userspace can be found by an attacker,
without control-ﬂow hijacking, code-injection or code-reuse
attacks. While this primitive alone does not allow an attacker
to exploit an application, it provides a valuable addition to her
arsenal. It is an advantage when simple memory disclosures are
not an option. Hence, it might allow circumventing previously
effective defense mechanisms.
With the knowledge obtained by crash-resistant address
space scanning, an attacker can overwrite data considered to be
unreachable by adversaries. If such data serves as metadata for
protection mechanisms, it can enable the successful execution
of other exploit stages. This might enable control-ﬂow hijack-
ing again or might endanger the security provided by shadow
stacks [15]: modifying a reference-less shadow stack after it is
discovered with memory oracles might allow traditional code-
reuse attacks again.
Another notable example is the reference-less safe region
used by 64-bit CPI implementations. CPI is able to prevent
control-ﬂow hijacking exploits, but altering the safe region’s
metadata effectively disables it. This allows control-ﬂow hi-
jacking and thus,
the realization of traditional code-reuse
attacks such as ROP. However, CPI also provides a Software
Fault Isolation (SFI [55]) and hash table-based implementation
of the safe region [27]. While the SFI version is immune
against memory oracles,
it has an additional performance
overhead of about 5%. The hash table-based version is located
in userspace and can have a size of 230.4 bytes, while the
original linear-based safe region has a size of 242. According
to Kuznetsov et al. [27], it requires around 51,000 probes to
locate the hash table-based safe region. In Firefox on 64-bit,
we achieve a rate of 18,357 probes per seconds. Thus, locating
the safe region would still be fast with only 2.78 seconds. As
the 32-bit safe region is protected by segmentation, we cannot
reach it with memory oracles.
Recent work named Readactor++ [14] protects C++ vir-
tual function call sites. We do not claim to have bypassed
Readactor++. However, we weakened it in the sense that we
can leak information about the memory layout with memory
oracles. More speciﬁcally, we can extract trampoline addresses
corresponding to exported functions.
The speed of memory scanning with memory oracles
currently varies across browsers and platforms. This is due to
a) the way they are implemented and b) the runtime overhead
of the exception/signal handlers. Firefox 64-bit on Linux
achieves the fastest scanning as ahead-of-time asm.js code is
used, which intentionally uses exceptions for bound checks.
Additionally, signal handler on Linux are faster than exception
handler on Windows. In contrast, the fault-tolerant feature in
Internet Explorer is harnessed with code normally used to
execute JavaScript timer functions. Thus, much boilerplate
code is executed and slows down the scanning ability,
in
addition to the SEH exception handling overhead. An increase
in performance might be gained with typed arrays, as element
accesses map to array element accesses on the assembly level.
Currently we use a fake string object in Internet Explorer. With
asm.js coming to Internet Explorer on Windows 10 [30], it
might be possible to increase the speed further.
We currently only make use of fault-tolerant functional-
ity based on exception/signal handling for crash-resistance,
memory oracles, and memory scanning. While we show their
existence and powerful advantages, crash-resistance might be
achieved with system calls or functions intended to query
memory information. We hope that future work will reveal
more crash-resistant functionality for different purposes such
as CROP (see Section IV-B2). Automated approaches utilizing
static analysis might simplify that process, such that legitimate