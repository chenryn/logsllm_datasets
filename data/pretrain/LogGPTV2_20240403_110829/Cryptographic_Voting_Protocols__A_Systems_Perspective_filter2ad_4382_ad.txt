carefully monitoring the DRE’s output. For example, in
Chaum’s scheme, the DRE must print (i.e., commit) the
transparencies and dolls DB and DT before the voter
chooses which transparency to take. If the DRE knows
which transparency the voter will select before it com-
mits to the dolls and transparency image, it can construct
the dolls in a way such that the ballot will decrypt to an
arbitrary image (see Section 3.2.1).
In this section we show three types of attacks which
leverage human ignorance of the intricacies of crypto-
graphic protocols. First, we present message reorder-
ing attacks and social engineering attacks, which enable
DREs to undetectably replace voters’ ballots with votes
of its own choosing. Next, we discuss attacks which take
advantage of voters who apathetically discard their re-
ceipts at the polling station. Finally, we show attacks
where a voter may be able to detect wrongdoing but can-
not authoritatively prove DRE misbehavior to election
ofﬁcials. We follow with some mitigation strategies.
5.1 Message Reordering and Social Engi-
neering Attacks
Message reordering attacks. The security of crypto-
graphic protocols implicitly relies on the participants de-
tecting any reordering of the messages in the protocol.
With human participants, this assumption is not neces-
sarily valid; if the deviation is minor, the average voter
may not notice. In a message reordering attack, a mali-
cious DRE attempts to cheat voters by slightly reordering
the steps of the cryptographic voting protocol.
VoteHere’s implementation of Neff’s scheme is vul-
nerable to message reordering attacks. Recall that Vote-
Here’s implementation of Neff’s scheme gives voters the
option of a basic or detailed receipt after it has commit-
ted to the ballot construction (Figure 4). Now suppose
that the DRE reorders steps 2, 3, and 4 in Figure 4 in the
following way:
1. Voter → DRE :
i
3. DRE → Voter :
basic or detailed?
4. Voter → DRE :
r, where r ∈ {basic, detailed}
2. DRE → Printer : BSN, hash(V C)
5a. DRE → Printer :
5b. Voter → DRE :
5c. DRE → Printer :
6. DRE → B. Board : OV C
commit(p1, . . . , pn)
ci
c1, . . . , cn
The change to the voter’s experience is probably minor,
but the advantage afforded the DRE is large—the DRE
learns whether the voter wants a basic or detailed receipt
before it must commit to the ballot construction V C.
With a basic receipt, a voter gives up her right to later ver-
ify her ballot is actually a vote for the desired candidate.
A basic receipt only contains (BSN, hash(V C)). This is
generally ﬁne—if the DRE doesn’t know whether a voter
wants a basic or detailed receipt until after it commits to
the VC, it risks detection if the voter chooses a detailed
receipt and it constructed a VC for a different candidate.
But if the DRE learns the voter wants a basic receipt be-
fore it commits to the VC, it can undetectably submit
a ballot for any candidate. If the voter wants a detailed
receipt, the DRE just behaves honestly and properly con-
structs the VC.
By making a slightly more noticeable change to the
voter experience, a DRE can cheat even if the voter
chooses a detailed receipt. Consider the following mes-
sage reordering attack when a voter chooses a detailed
receipt (again, altered from Figure 4):
1. Voter → DRE :
3. DRE → Voter :
4. Voter → DRE :
5b. Voter → DRE :
2. DRE → Printer :
5a. DRE → Printer :
5c. DRE → Printer :
6. DRE → B. Board : OV C
i
basic or detailed?
detailed
ci
BSN, hash(V C)
commit(p1, . . . , pn)
c1, . . . , cn
In this attack, the DRE gets all the information from the
voter before it prints or commits to anything. The DRE
can now undetectably construct the VC to represent a
vote for any candidate. Since the DRE knows the voter’s
choice challenge ci before it constructs the VC, it can
construct the VC where row i is an unchosen row and se-
lect another row as the choice row. Since ci determines
how row i of the VC is opened, the DRE can construct
the VC such that the row i of the OVC is consistent with
the challenge ci. This means when the voter checks her
ballot later on the bulletin board, it will verify correctly
even though it is actually a vote for another candidate.
USENIX Association
14th USENIX Security Symposium
43
Social engineering attacks.
In a social engineering at-
tack, an adversary attempts to fool a victim into volun-
tarily revealing a secret [2]. Social engineering is usu-
ally discussed in the context of passwords. For exam-
ple, an adversary posing as tech support calls the CEO of
a company to “verify” some things about her computer
and tells her that her password is needed to do this. We
present two social engineering attacks where the DRE
fools the voter into revealing her future actions.
For our ﬁrst attack, consider Chaum’s scheme. As we
see in the summary of Chaum’s protocol in Figure 7, the
voter relays her choice of layer to the printer, and not
the DRE. The DRE cannot cheat after it commits to the
transparency image, BSN, DB, and DT . But nothing
prevents a DRE from simply asking the voter which layer
she will choose in advance and then hoping that she ac-
tually chooses the layer she said she would. In this social
engineering attack, the DRE slightly alters the protocol:
1. Voter → DRE :
∗. DRE → Voter :
∗. Voter → DRE :
2. DRE → Printer :
3. DRE → Printer : BSN, DB, DT
4. Voter → Printer :
5. DRE → Printer :
candidate choices
top or bottom?
c∗, where c∗ ∈ {top, bottom}
transparency images
c, where c ∈ {top, bottom}
signkc
(BSN),
signkDRE(BSN, DT, DB, chosen transparency)
where * represents added steps. In step 5, the DRE can
construct the doll DB or DT (depending on the voter’s
response c∗) and the two layers such that the ballot de-
crypts to an arbitrary image of the DRE’s choosing (see
Section 3.2.1). This attack is successful and undetectable
as long as c∗ = c (i.e., the voter doesn’t change her mind
or make a mistake). With a sternly worded message, the
DRE can strongly encourage the voter to honor her orig-
inal choice.
Our
second attack succeeds
since most non-
cryptographers probably do not realize that multiple
executions of a cryptographic protocol should be in-
dependent. For example, random choices in separate
executions should be freshly generated.
In Neff’s
scheme, suppose a DRE triggers a reboot after it learns
a voter’s random challenge ci for her chosen row, and
then restarts the protocol, feigning an error.
If the
voter chooses the same challenge ci again, the DRE
can undetectably forge a ballot for a different candidate
by constructing row i as an unchosen row consistent
with the challenge ci. If the voter happens to choose a
different challenge, the DRE can escape detection by
rebooting again and then behaving normally.
5.2 Discarded Receipts
The security of Neff’s and Chaum’s scheme relies on
voters using their receipts to verify their ballots. If an
adversary can determine that certain ballots will not be
veriﬁed, she can undetectably alter or replace these bal-
lots. We expect some voters will be apathetic about the
veriﬁcation process and discard their receipts. Without
her receipt, it is unlikely a voter will verify her ballot on
the bulletin board. A malicious poll worker could collect
receipts discarded in or near the polling station and tell
a malicious DRE the BSNs of ballots which are safe to
replace or alter.
5.3 Other Human Factor Attacks
In this section, we present other human factor attacks
where a voter may be able to detect wrongdoing but can-
not authoritatively prove DRE misbehavior to election
ofﬁcials.
Generating an invalid signature. Both Neff’s and
Chaum’s scheme require the DRE to sign receipts it pro-
duces. The primary purpose of signed receipts is to pre-
vent voters from falsely claiming fraud. The concern is
that some voter might try to cast doubt on the election
results by forging a receipt to frame a DRE. If after ver-
ifying her ballot on the bulletin board a voter claims the
DRE cheated her, she must produce a receipt with a valid
signature to prove it. Thus, the main purpose of signing
receipt is not to prevent voters against cheating DREs,
but to prevent election ofﬁcials against misbehaving vot-
ers.
However, signatures create problems for honest voters
interacting with malicious DREs. If at some point the
DRE realizes it will be caught cheating when the voter
later veriﬁes her ballot on the bulletin board, the DRE can
produce a receipt with an invalid signature. Although the
voter can detect she was cheated, she cannot prove this
to the election authorities. The signature on her receipt
is invalid, and for all they know, might be forged.
Printing the wrong DRE Machine ID. For auditing
purposes, receipts in Neff’s and Chaum’s schemes con-
tain the DRE’s machine ID. However, we cannot trust a
malicious DRE to print its correct identiﬁer, since using a
false identiﬁer will shift suspicion. For example, a DRE
may generate bogus signatures and use an identiﬁer from
an honest machine. When election ofﬁcials receive fraud
complaints from voters with the invalid receipts contain-
ing the honest machine’s identiﬁer, the legitimate votes
from the honest DRE might be called into question. Ul-
timately, this casts suspicion on the entire election.
44
14th USENIX Security Symposium
USENIX Association
Ignoring voter input. DREs can ignore voter input
in an attempt to forge ballots. For example, in Neff’s
scheme, if a DRE wants to forge a VC for a candidate of
its own choosing, it might ignore the voter’s challenges
and instead use and print challenges consistent with the
forged VC. An observant voter will be able to clearly de-
tect that this has occurred, since the challenges printed
on the receipt will not match what the voter typed in.
However, it might be difﬁcult for the voter to prove to
a third party that the DRE cheated in this way. First, if
a voter wants to try to demonstrate the misbehavior to a
poll worker, she might have to reveal her voting inten-
tions. Second, if the DRE only ignores voter input every
50 voters, subsequent attempts to replicate the misbehav-
ior will fail.
5.4 Mitigation Strategies
Message reordering and social engineering attacks.
Message reordering and social engineering attacks have
a high chance of succeeding because the average human
voter doesn’t fully understand the importance of message
ordering in cryptographic protocols or how a commit-
ment scheme works. Also, humans may be forgiving of
or not notice slight deviations from the “canonical” vot-
ing experience. Even if the voter notices that the DRE
does not print something exactly when it should have,
she might ignore the deviation if the rest of the voting
experience goes smoothly and all the numbers on her re-
ceipt “match up”.
Since message reordering and social engineering at-
tacks only involve slight modiﬁcations to a voter’s in-
teraction with the DRE, the only defense we foresee is
ultimately unsatisfying: parallel testing. To resist these
attacks, election ofﬁcials must audit DREs throughout
the day to verify they do not even slightly deviate from
the canonical behavior. Note that pre-election auditing is
not sufﬁcient since there are many ways that a malicious
DRE could arrange to cheat only on election day. How-
ever, live testing of DREs on election day can be risky.
For example, we must ensure that a malicious DRE can-
not submit audit votes from testers as legitimate votes.
Auditing for message reordering and social engineer-
ing attacks is difﬁcult.
It requires auditors to be inti-
mately familiar with the details of DRE operation. The
changes in the voting experience these attacks impose
might appear completely innocuous to a naive observer.
Also,
to evade random auditing, a clever DRE may
choose to only launch message reordering and social en-
gineering attacks intermittently.
Voter education may help mitigate these attacks. Voter
education can effectively turn every voter into an auditor.
However, if the system requires too many instructions
and checks, voters may worry that if they make a mis-
take, they will be cheated. Others may reject the system
on principle, arguing that it should not be hard to cor-
rectly use a voting system.
Discarded receipts. To address the problems with dis-
carded receipts, we must educate voters that receipts are
valuable and should not be frivolously discarded in a
public place.
Other human factor attacks. One approach to the
problem of machines generating invalid signatures is to
have voters verify the signature on their receipts at the
polling station. However, since voters cannot verify sig-
natures on their own, this approach requires another set
of hardware devices and software that voters must trust.
Also, it is not obvious how the signature veriﬁcation
devices receive the public keys from the DREs in the
polling station in a trustworthy manner.
If the device
loads them directly from the DREs, a malicious DRE
may give a different public key to the veriﬁcation device
than the one it was loaded with.
DREs cannot be trusted to reliably print their ma-
chine IDs on receipts. The best solution is to require re-
ceipts and transparencies to be preprinted with machine
IDs and loaded onto the corresponding machines at the
polling stations. This solution prevents malicious DREs
from lying about their machine ID, but it creates logis-
tical hassles. Blank paper and transparency stock is no
longer generic—a particular roll can only be used by one
machine.
One possible defense against DREs that ignore voter
input is parallel testing of live machines on election day.
However, as previously discussed, parallel testing has
limitations.
6 Denial of Service Attacks and Election
Recovery
Although Neff’s and Chaum’s schemes can detect many
attacks, recovering legitimate election results in the face
of these attacks may be difﬁcult.
In this section, we
present several detectable but irrecoverable denial of ser-
vice (DoS) attacks launched at different stages of the vot-
ing and tallying process. We consider attacks launched
by malicious DREs and attacks launched by malicious
tallying software, and discuss different recovery mecha-
nisms to resist these attacks.
6.1 Denial of Service (DoS) Attacks
Launched by malicious DREs. Malicious DREs can
launch several DoS attacks which create detectable, but
USENIX Association
14th USENIX Security Symposium
45
unrecoverable situations. We present two classes of at-
tacks: ballot deletion and ballot stufﬁng.
In a ballot deletion attack, a malicious DRE erases vot-
ers’ ballots or submits random bits in their place. Elec-
tion ofﬁcials and voters can detect this attack after the
close of polls, but there is little they can do at that point.
Since the electronic copy serves as the only record of the
election, it is impossible to recover the legitimate ballots
voted on that DRE.
DREs can launch more subtle DoS attacks using ballot
stufﬁng. Recall that both Neff’s and Chaum’s schemes
use ballot sequence numbers (BSNs) to uniquely iden-
tify ballots. BSNs enable voters to ﬁnd and verify their
ballots on the public bulletin board, and by keeping track
of the set of valid BSNs, election ofﬁcials can track and
audit ballots.
In the BSN duplication attack, a DRE submits multi-
ple ballots with the same BSN. Election ofﬁcials will be
able to detect this attack after the ballots reach the bul-
letin board, but recovery is difﬁcult. It is not clear how to
count ballots with the same BSN. Suppose a DRE sub-
mits 100 valid ballots (i.e., from actual voters) and 100
additional ballots, using the same BSN for all the bal-
lots. How do talliers distinguish the invalid ballots from
the valid ones?
In the BSN stealing attack, a malicious DRE “steals”
BSNs from the set of BSNs it would normally assign to
legitimate voters’ ballots. For a particular voter, the DRE
might submit a vote of its own choosing for the BSN
it is supposed to use, and on the voter’s receipt print a
different (invalid) BSN. Since the voter will not ﬁnd her
ballot on the bulletin board, this attack can be detected,
but recovery is tricky: how do election ofﬁcials identify
the injected ballots and remove them from the tally?
Neff’s and Chaum’s scheme enable voters and/or elec-
tion ofﬁcials to detect these attacks, but recovery is non-
trivial because 1) the voters’ legitimate ballots are miss-
ing and 2) it is hard to identify the invalid ballots injected
by the DRE.
Launched by malicious tallying software. DoS at-
tacks in the tallying phase can completely ruin an elec-
tion. For example, malicious tallying softwares can
delete the trustees’ keys, making decryption and tallying
of the encrypted ballots forever impossible. Malicious
bulletin board software can erase, insert, or delete bal-
lots.
Selective DoS. An attacker could use DoS attacks to
bias the outcome of the election. Rather than ruining
the election no matter its outcome, a more subtle adver-
sary might decide whether to mount a DoS attack or not