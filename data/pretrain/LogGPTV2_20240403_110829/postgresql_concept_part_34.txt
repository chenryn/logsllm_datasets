CREATE TEMPORARY TABLE actors (
id DECIMAL(3),
name VARCHAR(40),
CONSTRAINT actor_id CHECK (id < 150)
) ON COMMIT DELETE ROWS;
UNIQUEclause
SQL92specifiessomeadditionalcapabilitiesforUNIQUE:
TableConstraintdefinition:
[ CONSTRAINT name ] UNIQUE ( column [, ...] ) [ { INITIALLY DEFERRED | INI-
TIALLY IMMEDIATE } ] [ [ NOT ] DEFERRABLE ]
318 APPENDIXD. REFERENCEMANUAL
ColumnConstraintdefinition:
[ CONSTRAINT name ] UNIQUE [ { INITIALLY DEFERRED | INITIALLY IMMEDI-
ATE} ] [ [ NOT ] DEFERRABLE ]
NULLclause
TheNULL"constraint"(actuallyanon-constraint)isaPostgresextensiontoSQL92isincluded
for symmetrywiththeNOT NULLclause. Sinceitisthedefaultforanycolumn, itspresenceis
simplynoise. [CONSTRAINTname]NULL
NOTNULLclause
SQL92specifiessomeadditionalcapabilitiesforNOTNULL:
[ CONSTRAINT name ] NOT NULL [ { INITIALLY DEFERRED | INITIALLY IMMEDI-
ATE} ] [ [ NOT ] DEFERRABLE ]
CONSTRAINTclause
SQL92 specifies some additional capabilities for constraints, and also defines assertions and
domainconstraints. Note: Postgresdoesnotyetsupporteitherdomainsorassertions.
Anassertionisaspecialtypeofintegrityconstraintandsharesthesamenamespaceasother
constraints. However, an assertionis not necessarilydependenton one particularbase table as
constraintsare,soSQL-92providestheCREATEASSERTIONstatementasanalternatemethod
fordefiningaconstraint:
CREATE ASSERTION name CHECK ( condition )
DomainconstraintsaredefinedbyCREATEDOMAINorALTERDOMAINstatements:
Domainconstraint:
[ CONSTRAINT name ] CHECK constraint
[ { INITIALLY DEFERRED | INITIALLY IMMEDIATE} ] [ [ NOT ] DEFERRABLE ]
Tableconstraintdefinition:
[ CONSTRAINT name ] { PRIMARY KEY ( column , ... ) | FOREIGN KEY con-
straint | UNIQUE constraint | CHECK constraint } [ { INITIALLY DEFERRED | INI-
TIALLY IMMEDIATE} ] [ [ NOT ] DEFERRABLE ]
Columnconstraintdefinition:
[ CONSTRAINT name ] { NOT NULL | PRIMARY KEY | FOREIGN KEY con-
straint | UNIQUE | CHECK constraint } [ { INITIALLY DEFERRED | INITIALLY IMME-
DIATE} ] [ [ NOT ] DEFERRABLE ]
ACONSTRAINTdefinitionmaycontainonedefermentattributeclauseand/oroneinitialconstraint
modeclause,inanyorder.
D.22. CREATETABLEAS 319
NOTDEFERRABLE The constraint must be checked at the end of each statement. SET
CONSTRAINTSALLDEFERREDwillhavenoeffectonthistypeofconstraint.
DEFERRABLE Thiscontrolswhethertheconstraintcanbedeferredtotheendofthetransac-
tion. IfSETCONSTRAINTSALLDEFERREDisusedortheconstraintissettoINITIALLY
DEFERRED,thiswillcausetheforeignkeytobecheckedonlyattheendofthetransaction.
SETCONSTRAINTchangestheforeignkeyconstraintmodeonlyforthecurrenttransaction.
INITIALLY IMMEDIATE Check constraint only at the end of the transaction. This is the
default
INITIALLY DEFERRED Checkconstraintaftereachstatement.
CHECKclause
SQL92specifiessomeadditionalcapabilitiesforCHECKineithertableorcolumnconstraints.
tableconstraintdefinition:
[ CONSTRAINT name ] CHECK ( VALUE condition ) [ { INITIALLY DEFERRED | INI-
TIALLY IMMEDIATE} ] [ [ NOT ] DEFERRABLE ]
columnconstraintdefinition:
[ CONSTRAINT name ] CHECK ( VALUE condition ) [ { INITIALLY DEFERRED | INI-
TIALLY IMMEDIATE} ] [ [ NOT ] DEFERRABLE ]
PRIMARYKEYclause
SQL92specifiessomeadditionalcapabilitiesforPRIMARYKEY:
TableConstraintdefinition:
[ CONSTRAINT name ] PRIMARY KEY ( column [, ...] ) [ { INITIALLY DE-
FERRED | INITIALLY IMMEDIATE} ] [ [ NOT ] DEFERRABLE ]
ColumnConstraintdefinition:
[ CONSTRAINT name ] PRIMARY KEY [ { INITIALLY DEFERRED | INITIALLY IMMEDI-
ATE} ] [ [ NOT ] DEFERRABLE ]
D.22 CREATE TABLE AS
Name
CREATETABLEAS—Createsanewtable
CREATETABLEtable[(column[,...] ) ] ASselect_clause
320 APPENDIXD. REFERENCEMANUAL
Inputs
table Thenameofanewtabletobecreated.
column Thenameofacolumn. Multiplecolumnnamescanbespecifiedusingacomma-delimited
listofcolumnnames.
select_clause Avalidquerystatement. RefertoSELECTforadescriptionoftheallowedsyntax.
Outputs
RefertoCREATETABLEandSELECTforasummaryofpossibleoutputmessages.
Description
CREATE TABLE AS enablesa table to be createdfrom the contents of an existingtable. It is
functionalityequivalenttoSELECTINTO,butwithperhapsamoredirectsyntax.
D.23 CREATE TRIGGER
Name
CREATETRIGGER—Createsanewtrigger
CREATETRIGGERname{BEFORE|AFTER}{event[OR...] }
ONtable
FOREACH{ROW|STATEMENT}
EXECUTEPROCEDUREfunc(arguments)
Inputs
name Thenameofanexistingtrigger.
table Thenameofatable.
event OneofINSERT,DELETEorUPDATE.
funcname Auser-suppliedfunction.
Outputs
CREATE Thismessageisreturnedifthetriggerissuccessfullycreated.
D.23. CREATETRIGGER 321
Description
CREATE TRIGGER will enter a new trigger into the current data base. The trigger will be
associatedwiththerelationrelnameandwillexecutethespecifiedfunctionfuncname.
The trigger can be specified to fire either before BEFORE the operation is attempted on a
tuple(beforeconstraintsarecheckedandtheINSERT,UPDATEorDELETEisattempted)or
AFTER theoperation hasbeen attempted(e.g., after constraintsare checkedand the INSERT,
UPDATEorDELETEhascompleted). Ifthetriggerfiresbeforetheevent,thetriggermayskip
theoperationforthecurrenttuple,orchangethetuplebeinginserted(forINSERTandUPDATE
operations only). If the trigger fires after the event, all changes, including the last insertion,
update,ordeletion,are"visible"tothetrigger.
Refer to the chapters on SPI and Triggers in the PostgreSQL Programmer’s Guide for more
information.
Notes
CREATETRIGGERisaPostgreslanguageextension.
Onlytherelationownermaycreateatriggeronthisrelation.
Asofthecurrentrelease(v7.0),STATEMENTtriggersarenotimplemented.
RefertoDROP TRIGGERforinformationonhowtoremovetriggers.
Usage
Checkifthespecifieddistributorcodeexistsinthedistributorstablebeforeappendingorupdating
arowinthetablefilms:
CREATE TRIGGER if_dist_exists
BEFORE INSERT OR UPDATE ON films
FOR EACH ROW
EXECUTE PROCEDURE check_primary_key (’did’, ’distributors’, ’did’);
Beforecancellingadistributororupdatingitscode,removeeveryreferencetothetablefilms:
CREATE TRIGGER if_film_exists
BEFORE DELETE OR UPDATE ON distributors
FOR EACH ROW
EXECUTE PROCEDURE check_foreign_key (1, ’CASCADE’, ’did’, ’films’, ’did’);
Compatibility
SQL92
ThereisnoCREATETRIGGERinSQL92.
ThesecondexampleabovemayalsobedonebyusingaFOREIGNKEYconstraintasin:
322 APPENDIXD. REFERENCEMANUAL
CREATE TABLE distributors (
did DECIMAL(3),
name VARCHAR(40),
CONSTRAINT if_film_exists FOREIGN KEY(did)
REFERENCES films ON UPDATE CASCADE ON DELETE CASCADE
);
D.24 CREATE TYPE
Name
CREATETYPE—Definesanewbasedatatype
CREATETYPEtypename(
INPUT=input_function,
OUTPUT=output_function,
INTERNALLENGTH={internallength|VARIABLE}
[,EXTERNALLENGTH={externallength|VARIABLE}]
[,DEFAULT="default"]
[,ELEMENT=element]
[,DELIMITER=delimiter]
[,SEND=send_function]
[,RECEIVE=receive_function]
[,PASSEDBYVALUE])
Inputs
typename Thenameofatypetobecreated.
internallength Aliteralvalue,whichspecifiestheinternallengthofthenewtype.
externallength Aliteralvalue,whichspecifiestheexternallengthofthenewtype.
input_function Thenameofafunction,createdbyCREATEFUNCTION,whichconvertsdata
fromitsexternalformtothetype’sinternalform.
output_function The name of a function, created by CREATE FUNCTION, which converts
datafromitsinternalformtoaformsuitablefordisplay.
element Thetypebeingcreatedisanarray;thisspecifiesthetypeofthearrayelements.
delimiter Thedelimitercharacterforthearray.
default Thedefaulttexttobedisplayedtoindicate"datanotpresent."
D.24. CREATETYPE 323
send_function Thenameofafunction,createdbyCREATEFUNCTION,whichconvertsdata
ofthistypeintoaformsuitablefortransmissiontoanothermachine.
receive_function The name of a function, created by CREATE FUNCTION, which converts
dataofthistypefromaformsuitablefortransmissionfromanothermachinetointernalform.
Outputs
CREATE Messagereturnedifthetypeissuccessfullycreated.
Description
CREATE TYPE allows the user to register a new user data type with Postgres for use in the
currentdatabase. Theuserwhodefinesatypebecomesitsowner. typename isthenameof the
newtypeandmustbeuniquewithinthetypesdefinedforthisdatabase.
CREATE TYPE requires the registration of two functions (using create function) before
definingthetype. Therepresentationofanewbasetypeisdeterminedbyinput_function, which
convertsthetype’sexternalrepresentationtoaninternalrepresentationusablebytheoperators
andfunctionsdefinedforthetype. Naturally,output_functionperformsthereversetransformation.
Boththeinputandoutputfunctionsmustbedeclaredtotakeoneortwoargumentsoftype"opaque".
New basedatatypescan be fixed length,in whichcaseinternallength isa positiveinteger,or
variable length, in which case Postgres assumes that the new type has the same format as the
Postgres-supplieddatatype,"text". Toindicatethatatypeisvariablelength,setinternallengthto
VARIABLE.Theexternalrepresentationissimilarlyspecifiedusingtheexternallengthkeyword.
To indicatethatatypeisanarrayandto indicatethat atypehasarrayelements,indicatethe
typeof thearrayelementusing the elementkeyword. For example, to defineanarrayof 4-byte
integers("int4"),specifyELEMENT=int4
To indicate the delimiter to be used on arrays of this type, delimiter can be set to a specific
character. Thedefaultdelimiteristhecomma(",").
A default value is optionally available in casea user wants some specificbit pattern to mean
"datanotpresent."SpecifythedefaultwiththeDEFAULTkeyword.
Theoptionalargumentssend_functionandreceive_functionareusedwhentheapplicationpro-
gram requesting Postgres servicesresideson a different machine. In this case, the machine on
which Postgres runs may use a format for the data type different from that used on the remote
machine. Inthiscaseitisappropriatetoconvertdataitemstoastandardformwhensendingfrom
the serverto the client and converting from the standard format to the machine specificformat
whentheserverreceivesthe datafrom theclient. If thesefunctions arenot specified,thenitis
assumedthat the internalformat of the typeis acceptableon all relevantmachinearchitectures.
Forexample,singlecharactersdonothavetobeconvertedifpassedfromaSun-4toaDECstation,
butmanyothertypesdo.
324 APPENDIXD. REFERENCEMANUAL
The optional flag, PASSEDBYVALUE, indicates that operators and functions which use this
datatypeshouldbepassedanargumentbyvalueratherthanbyreference. Notethatyoumaynot
passbyvaluetypeswhoseinternalrepresentationismorethanfourbytes.
Fornewbasetypes,ausercandefineoperators,functionsandaggregatesusingtheappropriate
facilitiesdescribedinthissection.
ArrayTypes
Two generalized built-in functions, array_in and array_out, exist for quick creation of variable
lengtharraytypes. ThesefunctionsoperateonarraysofanyexistingPostgrestype.
LargeObjectTypes
A "regular" Postgres type can only be 8192 bytes in length. If you need a larger type you must
createaLargeObjecttype. TheinterfaceforthesetypesisdiscussedatlengthinthePostgreSQL
Programmer’sGuide. ThelengthofalllargeobjecttypesisalwaysVARIABLE.
Examples
Thiscommandcreatestheboxdatatypeandthenusesthetypeinaclassdefinition:
CREATE TYPE box (INTERNALLENGTH = 8,
INPUT = my_procedure_1,
OUTPUT = my_procedure_2);
CREATE TABLE myboxes (id INT4, description box);
Thiscommandcreatesavariablelengtharraytypewithintegerelements:
CREATE TYPE int4array (INPUT = array_in,
OUTPUT = array_out,
INTERNALLENGTH = VARIABLE,
ELEMENT = int4);
CREATE TABLE myarrays (id int4, numbers int4array);
Thiscommandcreatesalargeobjecttypeandusesitinaclassdefinition:
CREATE TYPE bigobj (INPUT = lo_filein,
OUTPUT = lo_fileout,
INTERNALLENGTH = VARIABLE);
CREATE TABLE big_objs (id int4, obj bigobj);
D.25. CREATEUSER 325
Notes
Typenamescannotbeginwiththeunderscorecharacter("_")andcanonlybe31characterslong.
ThisisbecausePostgressilentlycreatesanarraytypeforeachbasetypewithanameconsisting
ofthebasetype’snameprependedwithanunderscore.
RefertoDROP TYPEtoremoveanexistingtype.
See also CREATE FUNCTION, CREATE OPERATOR andthe chapteron Large Objects
inthePostgreSQLProgrammer’sGuide.
Compatibility
SQL3
CREATETYPEisanSQL3statement.
D.25 CREATE USER
Name
CREATEUSER—Createsanewdatabaseuser
CREATEUSERusername
[WITH[SYSIDuid]
[PASSWORD’password’]]
[CREATEDB|NOCREATEDB]
[CREATEUSER|NOCREATEUSER]
[INGROUPgroupname[,...] ]
[VALIDUNTIL’abstime’]
Inputs
username Thenameoftheuser.
uid TheSYSIDclausecanbeusedtochoosethePostgresuseridoftheuserthatisbeingcreated.
ItisnotatallnecessarythatthosematchtheUNIXuserids,butsomepeoplechoosetokeep
thenumbersthesame.
Ifthisisnotspecified,thehighestassigneduseridplusonewillbeusedasdefault.
password Setstheuser’spassword. Ifyoudonotplantousepasswordauthenticationyoucanomit
thisoption,otherwisetheuserwon’tbeabletoconnecttoapassword-authenticatedserver.
See pg_hba.conf(5)or the administrator’sguidefor detailson how to set upauthentication
mechanisms.
326 APPENDIXD. REFERENCEMANUAL
CREATEDB,NOCREATEDB These clauses define a user’s ability to create databases. If
CREATEDBisspecified,theuserbeingdefinedwillbeallowedtocreatehisowndatabases.
Using NOCREATEDB will deny a user the ability to create databases. If this clause is
omitted,NOCREATEDBisusedbydefault.
CREATEUSER, NOCREATEUSER Theseclausesdeterminewhetherauserwillbepermitted
tocreatenewusershimself. Thisoptionwillalsomaketheuserasuperuserwhocanoverride
all accessrestrictions. Omitting this clause will set the user’s value of this attribute to be
NOCREATEUSER.
groupname Anameofagroupintowhichtoinserttheuserasanewmember.
abstime TheVALID UNTIL clausesetsanabsolutetimeafterwhichtheuser’spasswordisno
longervalid. Ifthisclauseisomittedtheloginwillbevalidforalltime.
Outputs
CREATEUSER Messagereturnedifthecommandcompletessuccessfully.
Description
CREATEUSERwilladdanewusertoaninstanceofPostgres. Refertotheadministrator’sguide
for information about managing users and authentication. You must be a database superuser to
usethiscommand.
UseALTERUSERtochangeauser’spasswordandprivileges,andDROPUSERtoremovea
user. UseALTERGROUPtoaddorremovetheuserfromothergroups. Postgrescomeswitha
scriptcreateuserwhichhasthesamefunctionalityasthiscommand(infact,itcallsthiscommand)
butcanberunfromthecommandshell.
Usage
Createauserwithnopassword:
CREATE USER jonathan
Createauserwithapassword:
CREATE USER davide WITH PASSWORD ’jw8s0F4’
Createauserwithapassword,whose accountisvaliduntiltheendof 2001. Notethatafterone
secondhastickedin2002,theaccountisnotvalid:
CREATE USER miriam WITH PASSWORD ’jw8s0F4’ VALID UNTIL ’Jan 1 2002’
D.26. CREATEVIEW 327
Createanaccountwheretheusercancreatedatabases:
CREATE USER manuel WITH PASSWORD ’jw8s0F4’
CREATEDB
Compatibility
SQL92
ThereisnoCREATEUSERstatementinSQL92.
D.26 CREATE VIEW
Name