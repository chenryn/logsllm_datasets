## Feature request
**What is the expected behavior?**  
Following the definition inside the docs:  
https://webpack.js.org/api/module-methods/#import-1
We can use static paths inside dynamic imports, to search matching files
inside a specific folder / files tree.
Example:
        importApp(path) {
            return import(
                /* webpackInclude: /\/app.mjs$/ */
                /* webpackExclude: /\/node_modules/ */
                /* webpackChunkName: "chunks/[request]" */
                /* webpackMode: "lazy" */
                `../../${path}`
            );
        }
**What is motivation or use case for adding/changing the behavior?**  
There are use cases (especially for the neo.mjs context), where the base path
can be in different spots.
In case I want to build the framework repo itself to get split chunks for all
apps & examples, I need to path specified above ("../../").
We have the structure:
neo
  * apps
  * examples
  * src
  *     * worker
  *     *       * App.mjs
Since the AppWorker is the main entry point for all apps, we need to walk 2
folders upwards.
Now, when we use npx neo-app to generate a new app (workspace), the folder
structure is different:
workspace
  * apps
  * node_modules
  *     * neo.mjs
  *     *       * src
  *     *       *         * worker
  *     *       *         *           * App.mjs
In this case, we want to parse all apps inside the apps top level folder,
while ignoring the apps & examples folder inside the neo.mjs repo itself.
Ignoring the repo works fine with the webpackExclude here.
To make it work, I needed to create a copy of the AppWorker class, just to
change the webpack based imports:  
https://github.com/neomjs/neo/blob/dev/buildScripts/webpack/entrypoints/AppWorker.mjs
Extending the real AppWorker class can not work, since in this case, webpack
would parse the overridden imports as well.
        importApp(path) {
            if (!Neo.config.isExperimental) { // dist/dev & dist/prod
                return import(
                    /* webpackInclude: /\/app.mjs$/ */
                    /* webpackExclude: /\/node_modules/ */
                    /* webpackChunkName: "chunks/[request]" */
                    /* webpackMode: "lazy" */
                    `../../../../../${path}`
                    );
            } else {
                return import( // dev mode
                    /* webpackIgnore: true */
                    `../../../${path}`
                    );
            }
        }
It actually needs 2 different versions for this one directly (running inside
the browser VS using webpack based builds).
It does work fine with the duplicated app worker file, but I think it should
be easier to achieve this.
**How should this be implemented in your opinion?**  
I am not 100% sure, what the best approach could be.
We could add a specific variable name, which would need to get resolved inside
the webpack based builds.
E.g.: `${basePath}../../${path}`
To keep it reasonable, the variable has to get defined inside the same scope.
        importApp(path) {
            let basePath = '';
            if (myCustomEnv === true) { // this is the tricky part => figuring out which version to use
                basePath = '../../../';
            }
            return import(
                /* webpackInclude: /\/app.mjs$/ */
                /* webpackExclude: /\/node_modules/ */
                /* webpackChunkName: "chunks/[request]" */
                /* webpackMode: "lazy" */
                `${basePath}../../${path}`
            );
        }
**Are you willing to work on this yourself?**  
Ugh, if I just had more time. Willing to provide feedback for sure.