The above if used may raise security threats. JavaScript when used to dynamically evaluate code will create a 
potential security risk.
eval(‘alert(“Query String ‘ + unescape(document.location.search) + ‘”);’); 
eval(untrusted string); Can lead to code injection or client-side open redirect.
JavaScripts “new function” also may create a potential security risk.
Three points of validity are required for JavaScript 
1. Have all the logic server-side, JavaScript validation be turned off on the client
2. Check for all sorts of XSS DOM Attacks, never trust user data, know your source and sinks (i.e. look at all 
variables that contain user supplied input).
3. Check for insecure JavaScript libraries and update them frequently.
References:
• http://docstore.mik.ua/orelly/web/jscript/ch20_04.html
• https://www.owasp.org/index.php/Static_Code_Analysis
• http://www.cs.tau.ac.il/~omertrip/fse11/paper.pdf
• http://www.jshint.com
Buffer Overruns
191
APENDIX
192
Code Review Do’s And Dont’s
At work we are professions. But we need to make sure that even as professionals that when we do code reviews 
besides the technical aspects of the code reviews we need to make sure we consider the human side of code 
reviews. Here is a list of discussion points that code reviewers; peer developers need to take into consideration. 
This list is not comprehensive but a suggestion starting point for an enterprise to make sure code reviews are 
effective and not disruptive and a source of discourse. If code reviews become a source of discourse within 
an organization the effectives of finding security, functional bugs will decline and developers will find a way 
around the process.  Being a good code reviewer requires good social skills, and is a skill that requires practice 
just like learning to code. 
• You don’t have to find fault in the code to do a code review. If you always fine something to criticize your 
comments
will loose credibility.
• Do not rush a code review. Finding security and functionality bugs is important but other developers or team 
mem-
bers are waiting on you so you need to temper your do not rush with the proper amount urgency. 
• When reviewing code you need to know what is expected. Are you reviewing for security, functionality, main-
tain-
ability, and/or style? Does your organization have tools and documents on code style or are you using your 
own coding style? Does your organization give tools to developers to mark unacceptable coding standards 
per the organizations own coding standards?
• Before beginning a code review does your organization have a defined way to resolve any conflicts that may 
come 
up in the code review by the developer and code reviewer?
• Does the code reviewer have a define set of artifacts that need to be produce as the result of the code review?
• What is the process of the code review when code during the code review needs to be changed?
• Is the code reviewer knowledgeable about the domain knowledge of the code that is being reviewed? Ample 
evidence abounds that code reviews are most effective if the code reviewer is knowledgeable about the do-
main of the code I.e. Compliance regularizations for industry and government, business functionality, risks, etc.
Agile Software Development Lifecycle
CODE REVIEW DO’S AND DONT’S
193
AGILE 
SOFTWARE 
DEVELOPMENT 
LIFECYCLE
DESIGN
CODE
TEST
DEPLOY
INTERACTION
FASE
INTERACTION
FASE
INTERACTION
FASE
INTERACTION
FASE
1
3
2
4
DESIGN
CODE
TEST
DEPLOY
DESIGN
CODE
TEST
DEPLOY
DESIGN
CODE
TEST
DEPLOY
Code Review Do’s And Dont’s
194
Integrating security into the agile sdlc process flow is difficult. The organization will need constant involve-
ment from security team and or a dedication to security with well-trained coders on every team.
Continuous Integration and Test Driven Development
The term ‘Continuous Integration’ originated with the Extreme Programming development process. Today it is 
one of the best practices of SDLC Agile. CI requires developers to check code into source control management 
START
FINISH/
SIGNED
OFF
CHECK-IN CODE
SAST - AdHoc Static Analysis - Developer Initiated
CHECKMARX / SAST
SECURITY
DEVELOPMENT
RECORD METRICS
CHECK-IN
DEV
6
7
1
5
YES:
FIX CODE
YES:
FAIL
NO/FALSE POSITIVE
SAST
SAST 
PASS OR 
FAIL?
FALSE
POSITIVE
SIGNOFF
INVOKE SAST
ADJUST RULEBASE
YES
SIGN/OFF?
ISR
NO:
REQUEST FIX/ 
ESCALATE
PASS/FAIL
NO PASS
TUNED RULES 
CONTROLLED 
BY APPSEC
YES
NO
2
11
3
4
8
SAST 
PASS OR 
FAIL?
Code Review Do’s And Dont’s
195
application (scm) several times a day. An automated build server and application verify each check-in. The 
advantage is team members can quickly detect build problems early in the software development process. 
The disadvantage of CI for the Code Reviewer is while code may build properly; software security vulnerabil-
ities may still exist. Code review may be part of the check-in process but review may only to make sure the 
code only meets the minimum standards of the organization. Code review is not a secure code review with risk 
assessment approach on what needs to have additional time spent doing a code review.
The second disadvantage for the code review is because the organization is moving quickly with Agile process 
a design flaw may be introduced allowing a security vulnerabilities and the vulnerabilities may get deployed.
A red flag for the code reviewer is…
1. No user stories talk about security vulnerabilities based on risk.
2. User stories do not openly describe source and sinks.
3. No risk assessment for the application has been done. 
Breaking Down Process Areas
The term ‘Test Driven Development’ like CI originated with Extreme Programming development process. To-
day like CI it is one of the best practices of SDLC Agile. TDD requires developers to rely on repetition of a very 
short development cycle. First the step is the developer writes an automated test case that defines a needed 
improvement or new functionality.  This first step TDD initial fails the test.  Subsequent steps the developers 
create a minimum amount of code to pass. Finally the developer refactors the new code to the organization 
acceptable coding standard.
BREAKING DOWN PROCESS AREAS
AGILE
1
CONTINUOUS INTEGRATION
2
TEST DRIVEN DEVELOPMENT
3
STORY
SPRINT
BACKLOG
1
TDD:
CREATE TEST 
FIRST CODE 
UNTIL IT PASSES
INTEGRATION: 
AUTOMATED 
BUILD AND TESTS 
IMMEDIATE 
FEEDBACK ON 
ISSUES
FUNCTIONING 
PRODUCT
PRODUCT
BACKLOG
STORY
1
STORY
2
SPRINT
DAY
(MAX)
30
CONTINOUS 
INTEGRATION 
PERIOD
HOUR
(MAX)
24
Code Review Do’s And Dont’s
196
CATEGORY
DESCRIPTION
PASS
FAIL
Are there backdoor/unexposed business logic classes?
General
Is the placement of authentication and authorization check correct?
Authorization
Are the checks correct implemented? Is there any backdoor parameter?
Authorization
Is the check applied on all the required files and folder within web root directory?
Authorization
Are security checks placed before processing inputs?
Authorization
Incase of container-managed authentication - Is the authentication based on web methods only?
Authorization
Incase of container-managed authentication - Is the authentication based on web methods only?
Authorization
Is Password Complexity Check enforced on the password?
Authorization
Is password stored in an encrypted format?
Cryptography
Is password disclosed to user/written to a file/logs/console?
Authorization
Are there unused configurations related to business logic?
Business Logic and 
Design
If request parameters are used to identify business logic methods, is there a proper mapping of 
user privileges and methods/actions allowed to them?
Business Logic and 
Design
Check if unexposed instance variables are present in form objects that get bound to user inputs. 
If present, check if they have default values.
Business Logic and 
Design
Check if unexposed instance variables present in form objects that get bound to user inputs. If 
present, check if they get initialized before form binding.
Business Logic and 
Design
Is there execution stopped/terminated after for invalid request? I.e. when authentication/autho-
rization check fails? 
Authorization
Check if unexposed instance variables are present in form objects that get bound to user inputs. 
If present, check if they have default values.
Business Logic and 
Design
Check if unexposed instance variables present in form objects that get bound to user inputs. If 
present, check if they get initialized before form binding.
Business Logic and 
Design
Is there execution stopped/terminated after for invalid request? I.e. when authentication/autho-
rization check fails?
Authorization
Are the checks correct implemented? Is there any backdoor parameter?
Business Logic and 
Design
Is the check applied on all the required files and folder within web root directory?
Business Logic and 
Design
Is there any default configuration like Access- ALL?
Business Logic and 
Design
Does the configuration get applied to all files and users?
Business Logic and 
Design
Incase of container-managed authentication - Does the authentication get applied on all 
resources?
Authorization
Does the design handle sessions securely?
Session 
Management
CODE REVIEW CHECKLIST
Code Review Checklist
197
CATEGORY
DESCRIPTION
PASS
FAIL
Are database credentials stored in an encrypted format
Cryptography
Does the design support weak data stores like flat files
Business Logic and 
Design
Does the centralized validation get applied to all requests and all the inputs?
Business Logic and 
Design
Does the centralized validation check block all the special characters?
Business Logic and 
Design
Does are there any special kind of request skipped from validation?
Business Logic and 
Design
Does the design maintain any exclusion list for parameters or features from being validated?
Business Logic and 
Design
Are all the untrusted inputs validated?
Input data is constrained and validated for type, length, format, and range.
Imput Validation
Is the data sent on encrypted channel?  Does the application use HTTPClient for making external 
connections?
Cryptography
Is the data sent on encrypted channel?  Does the application use HTTPClient for making external 
connections?
Cryptography
Does the design involve session sharing between components/modules? Is session validated 
correctly on both ends?
Session 
Management
Does the design use any elevated OS/system privileges for external connections/commands?
Business Logic and 
Design
Is there any known flaw(s) in API’s/Technology used? For eg: DWR
Business Logic and 
Design
Does the design framework provide any inbuilt security control? Like  in ASP.NET MVC? Is 
the application taking advantage of these controls?
Business Logic and 
Design
Are privileges reduce whenever possible?
Business Logic and 
Design
Is the program designed to fail gracefully?
Business Logic and 