message m with secret s using scheme A and Bob encrypts the
If As(Bs(cid:2) (m)) =
same message with key s
Bs(cid:2) (As(m)), then Alice and Bob can be ensured that the contents
of the messages they exchange remain conﬁdential without actually
sharing a key. Using this scheme, Alice encrypts a message m and
sends the quantity X = As(m) to Bob. Bob encrypts the received
using scheme B.
(cid:2)
message, resulting in Y = Bs(cid:2) (X), which he then sends to Alice.
−1
s (Y ) and again sends this value
Alice decrypts Y , creating C = A
−1
s(cid:2) (C), thereby
to Bob. Bob then decrypts C such that m = B
recovering the message m initially encrypted by Alice.
The above method can be used to perform k-out-of-n OT as fol-
lows. Alice encrypts n messages such that X0 = As(m0),··· ,
Xn−1 = As(mn−1). Bob selects a subset k of the n messages and
encrypts them as Y0 = Bs(cid:2) (Xk0 ),··· , Yk−1 = Bs(cid:2) (Xkk−1 ). Al-
ice then receives the k quantities of Y , which she can not identify
because Bob has encrypted them, and decrypts them resulting in
−1
s (Yk−1). Finally, Bob decrypts
C0 = A
C0,··· , Ck−1 and reveals the k selected messages.
s (Y0),··· , Ck−1 = A
−1
0,··· , Xn−1 = m
0 ·C0,··· , mk k−1 = k
−1
0,··· , Yk−1 = Xkk−1 · k
0 ,··· , Ck−1 = Y
Two-Lock cryptosystems can be implemented based on either
the RSA or Discrete Log problems. While both approaches pro-
vide sufﬁcient protection of the encrypted data, systems based on
the RSA problem can be made to run more efﬁciently through the
use of small values of e. Because the 0s and 1s are encoded as
long strings of bits of length greater than |N| in Fairplay, this op-
timization is not susceptible to small exponent attacks. From the
RSA-based scheme proposed by Huang et al. [32], Alice sends Bob
e
n−1. Bob selects k random numbers,
X0 = m
one for each message he wishes to ultimately receive, and sends Al-
ice Y0 = Xk0 · k
e
k−1. Alice responds by
d
sending Bob C0 = Y
k−1, from which Bob re-
k−1·Ck−1.
−1
covers the messages mk 0 = k
The 1-out-of-2 OT scheme implemented with Fairplay requires a
total of three modular exponentiations by the sender and two mod-
ular exponentiations by the receiver. Moreover, this approach re-
quires two random number generations and a total of four message
transfers. The RSA-based scheme also requires three modular ex-
ponentiations by the sender, but these operations are faster given
our use of small values of e. The receiver side need only perform
a single modular multiplication and one modular division. This ap-
proach also requires only a single random number generation and
also requires the exchange of four messages. Accordingly, we ex-
pect to see a slight but measurable difference in the per-OT efﬁ-
ciency of our approach. We present our experimental results in
Section 5.
4. SYSTEM ARCHITECTURE
d
e
e
In this section, we present the details of the MIPNet architec-
ture. We begin by discussing the intuition behind our design and
formalize the desired system guarantees. We then present a simple
version of our architecture that protects against a globally passive
adversary and assumes that all participants in the network are be-
nign. Our second model provides additional protections against
active attackers. We then discuss methods for graceful scaling and
characterize the probability of collisions in the second system and
prove that the previously deﬁned guarantees hold in MIPNets.
Note that we focus on the design of the MIPNet architecture and,
for the time being, assume that all clients participate in the network
for long periods of time. Due to space limitations, we discuss mem-
bership management issues in greater detail in our technical report.
4.1 Design Intuition
Mix networks are an attractive model for anonymous commu-
nications for a number of reasons. The use of multiple layers of
encryption offers an intuitive mechanism for obscuring the rela-
tionship between source and destination. However, it is often what
happens between proxies in such systems that allows an adversary
to link two endpoints. For instance, by injecting additional traf-
ﬁc into a proxy suspected to be in the path of a speciﬁc ﬂow, an
adversary can observe increased latency between source and des-
(cid:2)(cid:1)
(cid:13)(cid:25)(cid:14)(cid:17)(cid:20)(cid:27)(cid:20)(cid:24)(cid:23)(cid:14)(cid:21)(cid:1)
(cid:7)(cid:20)(cid:30)(cid:18)(cid:26)
(cid:3)(cid:21)(cid:20)(cid:18)(cid:23)(cid:27)
(cid:12)(cid:18)(cid:23)(cid:17)
(cid:12)(cid:18)(cid:23)(cid:17)
(cid:9)(cid:23)(cid:20)(cid:24)(cid:23)
(cid:10)(cid:25)(cid:24)(cid:30)(cid:31)
(cid:9)(cid:23)(cid:20)(cid:24)(cid:23)
(cid:10)(cid:25)(cid:24)(cid:30)(cid:31)
(cid:12)(cid:18)(cid:23)(cid:17)
(cid:9)(cid:23)(cid:20)(cid:24)(cid:23)
(cid:10)(cid:25)(cid:24)(cid:30)(cid:31)
(cid:7)(cid:14)(cid:20)(cid:21)(cid:15)(cid:24)(cid:30)
(cid:7)(cid:6)(cid:10)(cid:8)(cid:18)(cid:27)(cid:26)
(cid:7)(cid:14)(cid:20)(cid:21)(cid:15)(cid:24)(cid:30)
(cid:12)(cid:5)(cid:4)(cid:1)
(cid:13)(cid:25)(cid:14)(cid:23)(cid:26)(cid:19)(cid:24)(cid:25)(cid:22)
(cid:9)(cid:15)(cid:21)(cid:20)(cid:29)(cid:20)(cid:24)(cid:28)(cid:26)(cid:1)(cid:10)(cid:25)(cid:24)(cid:30)(cid:31)
(cid:3)(cid:21)(cid:20)(cid:18)(cid:23)(cid:27)
(cid:12)(cid:18)(cid:23)(cid:17)
⊂
(cid:11)(cid:16)(cid:29)(cid:1)(cid:2)(cid:2)(cid:2)
(cid:7)(cid:14)(cid:20)(cid:21)(cid:15)(cid:24)(cid:30)
Figure 1: A conceptual comparison of traditional mix networks and MIP-
Nets. Note that at every “Send”, an adversary has an opportunity to perturb
trafﬁc. Mixing in place allows for such attack vectors to be largely removed.
tination [19]. Moreover, ﬂows can be watermarked by perturbing
packet interarrival times, allowing the adversary to identify the par-
ticipants of a ﬂow with a high degree of accuracy without injecting
additional trafﬁc. While the use of multiple intermediaries reduces
the probability of a single proxy being able to determine the sender
and receiver, it also increases the attack surface of the entire system.
The MIPNet architecture attempts to reconcile these issues by
eliminating the need to use multiple proxies. The use of only a
single proxy would appear ﬂawed as no number of layers of en-
cryption would prevent a proxy in possession of all of the neces-
sary keys from linking source and destination. However, this issue
can be overcome through the use of SFE between clients and the
proxy. Instead of giving the OP messages that it can decrypt, inter-
pret and forward, we simply require it to hold messages in a mail-
box. Clients use SFE exchanges not only to send and retrieve the
message stored within a subset of the slots in the mailbox, but also
to decrypt and reencrypt the entire mailbox. Because of the prop-
erties of SFE, this ﬁnal operation can take place without clients
revealing the key to the OP or the OP revealing the entirety of the
mailbox to each client. It is this cascade of functions that provides
for anonymous communications in MIPNets. This “middle-path"
allows us to enjoy much of the simplicity of relay-based anony-
mous communication while not having to rely on multiple proxies.
Figure 1 highlights this difference.
The work on anonymous buses [4] and ﬂash mixes [34] are the
most similar related efforts to ours; however, our approach is novel
in a number of ways. Unlike the former, the use of SFE makes
it so that no client is ever able to see the entire contents of the
mailbox. Second, while buses are secure in the honest-but-curious
model, our solution is secure in the presence of a malicious adver-
sary. Unlike both schemes, our approach also prevents the mixing
node from knowing the relationship between messages before and
after mixing. Finally, the performance evaluation and parameter
characterization of our system is in much greater depth than previ-
ous works.
4.2 Desired System Properties
More formally, our system strives to provide the following guar-
antees: Let C be the universe of all possible clients and SA ∈ C be
the set of clients currently connected to the OP.
Deﬁnition 1. Sender Anonymity: Let client c ∈ SA be the sender
of message mi, denoted c = sender(mi). A system provides
sender anonymity iff a passive adversary can determine that c ∈ SA
and sender(mi) ∈ SA, but not that c = sender(mi) with proba-
bility greater than
1|SA| + , where  is a negligible value.
Deﬁnition 2. Receiver Anonymity: Let client c ∈ SA be the re-
ceiver of message mj, denoted c = receiver(mj). A system pro-
vides receiver anonymity iff a passive adversary can determine that
c ∈ SA and receiver(mj) ∈ SA, but not that c = receiver(mj)
with probability greater than
1|SA| + .
Deﬁnition 3. Unlinkability: A system provides unlinkability if
it provides both sender and receiver anonymity as no two messages
can be attributed to any client.
4.3 Basic Architecture
The simple version of the MIPNet architecture, presented for
ease of understanding, works as follows: an Oblivious Proxy OP
engages a client Ci in an SFE exchange. As its input, OP provides
a mailbox M, which contains all communications currently being
exchanged between members of the MIPNet. The mailbox itself
contains a number of slots, each consisting of a two bit vector, for
each of the n participants. The ﬁrst bit of the slot, Mi,0 (the “read
bit”), signiﬁes whether or not the vector represents real communi-
cation. The second bit of the slot, Mi,1 (the “data bit”), represents a
bit of data being sent to a client. Note that if Mi,0 = 0, the value of
Mi,1 is of no consequence to the receiver. This allows participating
clients to inject cover trafﬁc when they are not attempting to com-
municate with another participating node. Ci inputs its identiﬁer i,
at least one vector Ri and the intended destination j of Ri.
Instead of simply using OTs to prevent OP from learning the
slot read by a client, we use SFE to gain anonymity of reads and to
make the message and slot written by the client indistinguishable
from the other messages in the mailbox. We achieve this additional
guarantee as follows. All nodes participating in the MIPNet share
a keystream k, and enter the current and “next” value of k as an
input to the exchange. The keystream is used to blindly decrypt
and reencrypt (via XOR within the SFE exchange itself, which is
natively supported by Fairplay) all of the slots in the mailbox. Be-
cause of the properties of SFE, we can perform these operations
without exposing the contents of the remaining n− 1 slots not read
by Ci.
As output, Ci receives the decrypted string of bits stored in Mi
and OP receives a new set of pseudorandom bits M
. While Ci
has blindly changed the appearance of all of the slots within the
mailbox M, it has only changed the content of a single slot (as
guaranteed by the circuit). Because all slots appear to have been
overwritten from the perspective of OP , Ci is equally as likely to
have written to any one of the slots. Accordingly, a passive adver-
can not guess which message was
sary able to see both M and M
written by Ci with probability greater than 1
OP then engages Ci+1 and continues to service all remaining
clients in order based on the ring topology of the MIPNet. This
service model removes the ability to infer communications between
two clients based on the frequency and temporal relationship of
reads and writes.
It is important to note that the assumption of a shared key is not
necessarily unrealistic. Even with such an assumption, the inability
to read the entire contents of M limits the amount of data a sin-
gle malicious client can leak per round. However, we remove this
assumption in the next subsection to make MIPNets more robust.
4.4
Improved Architecture
(cid:2)
(cid:2)
n + .
The basic MIPNet architecture works well given a number of as-
sumptions. Most importantly, it requires that all clients are well be-
haved and that they do not attempt to deny service by always trans-
mitting messages to all or a subset of the other clients in each round.
Additionally, it assumes that all clients will protect the keystream
used to encrypt all communications between members. Such ex-
pectations are not necessarily realistic given that the anonymity of
(cid:1)(cid:1)
(cid:15)(cid:5)
(cid:3)
(cid:3)
(cid:15)(cid:9)
(cid:4)
(cid:3)
(cid:5)
(cid:9)
(cid:12)(cid:25)(cid:24)(cid:23)(cid:26)(cid:30)(cid:1)
(cid:3)
(cid:14)(cid:19)(cid:28)(cid:20)(cid:25)(cid:23)(cid:22)
(cid:12)(cid:24)(cid:28)(cid:21)(cid:31)(cid:24)(cid:30)(cid:29)
(cid:18)
(cid:13)
(cid:24)
(cid:16)(cid:20)(cid:25)(cid:24)(cid:32)(cid:24)(cid:27)(cid:31)(cid:29)
(cid:17)(cid:28)(cid:27)(cid:33)(cid:34)
(cid:15)
(cid:18)(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:18)
(cid:13)
(cid:15)(cid:18)
(cid:12)(cid:25)(cid:24)(cid:23)(cid:26)(cid:30)
(cid:4)
(cid:18)
(cid:13)
(cid:24)
(cid:3) (cid:3) (cid:3)
(cid:3) (cid:3) (cid:3)
(cid:4) (cid:3) (cid:4)
(cid:4) (cid:3) (cid:4)
(cid:4) (cid:3) (cid:3)
(cid:3) (cid:4) (cid:3)
(cid:12)(cid:25)(cid:24)(cid:23)(cid:26)(cid:30)
(cid:5)
(cid:3) (cid:4) (cid:5) (cid:6) (cid:7) (cid:8) (cid:9) (cid:10) (cid:11)
(cid:15)(cid:2)
(cid:18)
(cid:13)
(cid:24)
(cid:4) (cid:3) (cid:3)
(cid:4) (cid:3) (cid:3)
(cid:4) (cid:3) (cid:4)
(cid:4) (cid:3) (cid:4)
(cid:4) (cid:3) (cid:3)