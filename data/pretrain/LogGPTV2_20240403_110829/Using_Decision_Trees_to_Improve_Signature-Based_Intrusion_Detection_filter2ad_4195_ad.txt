0
200
400
600
800
1000
1200
1400
1600
Number of Rules
Fig. 5. Time Measurements for increasing Number of Rules.
or destination addresses for certain rules, cause our system to create several in-
ternal signature instances from that rule which are later treated independently
during the building of the decision tree. When deﬁning a network topology with
diﬀerent subnets and multiple web servers (as needed for the MIT/LL data), the
complete rule set used for our evaluation is transformed into 2398 rule instances
that need to be processed internally. As a single tree would be too large for
this amount of rules, the detection engine splits the rule set for each supported
protocol into two subsets and builds two separate trees.
Figure 6 shows the total memory consumption of the patched version of Snort
for increasing amounts of rules. It indicates that even when the complete set of
rules is loaded, the memory demands are reasonable given todays main memory
sizes. The time to build the tree (including the case for the maximum number
of rules) has never exceeded 12 seconds.
Notice the interesting irregularity that Figure 6 shows for the modiﬁed ver-
sion of Snort around rule number 700. The reason is a change in the shape of the
decision tree. Given the tree for the previous rules and adding a single additional
one, the ID 3 algorithm creates a tree which has the same height but is much
broader. It contains noticeable more nodes (mostly due to copied rule instances
with unspeciﬁed feature values) and therefore consumes more memory. However,
additional rules ﬁt well into the resulting tree structure and the detection time
does not increase signiﬁcantly after that as more rules are added (as can be seen
in Figure 5).
7 Conclusion
Signature-based intrusion detection systems face the challenge of an constantly
increasing number of rules that need to be compared to input elements. Com-
bined with the facts that the amount of data is constantly growing and that
Snort NG (decision trees)
188
C. Kruegel and T. Toth
250000
200000
150000
100000
50000
)
s
e
t
y
b
o
l
i
K
n
i
(
y
r
o
m
e
M
d
e
s
U
0
0
200
400
600
800
1000
1200
1400
1600
Number of Rules
Fig. 6. Memory Consumption.
users expect results in real-time, current systems have already met their limits
in coping with this challenge. Novel approaches to re-structure or cluster the
signature rules are necessary in order to relieve the detection engines of as many
redundant checks as possible.
This paper presents a clustering approach based on decision trees which
utilizes machine learning principles to optimize the rules-to-input comparison
process. We describe an application of our mechanism to Snort, the most popular
open-source network intrusion detection system, and show that a signiﬁcant
improvement of its processing speed was possible. Decision trees, however, are
a general solution that can be of beneﬁt to other intrusion detection systems
(host- and network-based), packet ﬁlters and ﬁrewalls as well.
Acknowledgments
This research was supported by the Army Research Oﬃce, under agreement
DAAD19-01-1-0484. The U.S. Government is authorized to reproduce and dis-
tribute reprints for Governmental purposes notwithstanding any copyright an-
notation thereon. The views and conclusions contained herein are those of the
author and should not be interpreted as necessarily representing the oﬃcial poli-
cies or endorsements, either expressed or implied, of the Army Research Oﬃce,
or the U.S. Government.
References
1. A. Aho and M. Corasick. Eﬃcient string matching: An aid to bibliographic search.
Communications of the Association for Computing Machinery, 18:333–340, 1975.
2. Cisco IDS - formerly NetRanger. http://www.cisco.com/warp/public/cc/pd/
sqsw/sqidsz/index.shtml, 2002.
Using Decision Trees to Improve Signature-Based Intrusion Detection
189
3. C. Jason Coit, Stuart Staniford, and Joseph McAlerney. Towards Faster String
Matching for Intrusion Detection or Exceeding the Speed of Snort. In Proceedings
of DISCEX 2001, 2001.
4. S.T. Eckmann, G. Vigna, and R.A. Kemmerer. STATL: An Attack Language
In Proceedings of the ACM Workshop on
for State-based Intrusion Detection.
Intrusion Detection Systems, Athens, Greece, November 2000.
5. M. Fisk and G. G. Varghese. An analysis of fast string matching applied to content-
based forwarding and intrusion detection. Technical Report UCSD TR CS2001-
0670, UC San Diego, 2001.
6. Daniel Hartmeier. Design and Performance of the OpenBSD Stateful Packet Filter
(pf). In USENIX Annual Technical Conference – FREENIX Track, 2002.
7. Wenke Lee, Sal Stolfo, and Kui Mok. A Data Mining Framework for Building
Intrusion Detection Models. In In Proceedings of the IEEE Symposium on Security
and Privacy, Oakland, CA, May 1999.
8. MIT Lincoln Labs. DARPA Intrusion Detection Evaluation. http://www.ll.mit.
edu/IST/ideval, 1999.
9. J.S. Moore and R.S. Boyer. A Fast String Searching Algorithm. Communications
of the Association for Computing Machinery, 20:762–772, 1977.
10. Vern Paxson. Bro: A system for detecting network intruders in real-time. In 7th
USENIX Security Symposium, San Antonio, TX, USA, January 1998.
11. J. R. Quinlan. Discovering rules by induction from large collections of examples.
In Expert Systems in the Micro-Electronic Age. Edinburgh University Press, 1979.
12. J. R. Quinlan. Induction of decision trees. Machine Learning, 1(1):81–106, 1986.
13. RealSecure. http://www.iss.net/products_services/enterprise_protection.
14. Martin Roesch. Snort - Lightweight Intrusion Detection for Networks. In USENIX
Lisa 99, 1999.
15. Snort-NG. Snort - Next Generation: Network Intrusion Detection System. http:
//www.infosys.tuwien.ac.at/snort-ng.
16. Snort. Open-source Network Intrusion Detection System. http://www.snort.org.
17. Sourceﬁre. Snort 2.0. http://www.sourcefire.com/technology/whitepapers.
htm.
18. Swatch: Simple Watchdog. http://swatch.sourceforge.net.
19. Symantec - NetProwler and Intruder Alert.
symantec.com/products/products.cfm?ProductID=%50, 2002.
http://enterprisesecurity.
20. Giovanni Vigna, Steve Eckmann, and Richard A. Kemmerer. The STAT Tool
In Proceedings of DISCEX 2000, Hilton Head, South Carolina, January
Suite.
2000. IEEE Computer Society Press.
Appendix A
Integrating Decision Trees into Snort
When integrating our data structures and the detection process into Snort, we
attempted to keep the changes to the original code as little as possible. This
ensures that the modiﬁcations can be ported to new versions of Snort easily
and enables us to test our components independently of the main program. The
two major changes occurred in the parser and in the code that calls the original
detection process with its two-dimensional lists.
190
C. Kruegel and T. Toth
The parser (i.e., the functions ParseRule() and ParseRuleOptions()) in
rules.c had to be adapted to extract the relevant signature information from
the rules. Snort translates the checks of properties into function pointers which
are later called by the detection process and encapsulates their values in private
data areas that have a feature dependent layout. Although possible, it seems
undesirable to extract values required by our functions from function pointers
and their corresponding private data structures, therefore they are directly gath-
ered during parsing. Nevertheless, the original lists structure is still created and
utilized by our code (e.g., for dynamic rule activation) whenever possible.
The second part of changes aﬀected the detection function (Detect()) in
rules.c. Instead of calling the original processing routine, it redirects to our
decision trees. The modiﬁed detection procedure calls response and logging func-
tions in a similar way than the old one. However, it is possible that they are called
several times for a single packet as our engine determines all matching signatures
for each input element. When this behavior is undesirable, our module can be
put into a mode where only the ﬁrst match per packet is reported (with the com-
mand line switch -j). In this mode, our system imitates the original reporting
behavior of Snort.
All other changes were only minor modiﬁcations of function prototypes to ac-
commodate additional arguments or the addition of variables to data structures
such as OptTreeNode. Neither the preprocessing nor the response and logging
functionality is aﬀected in any way by our patch. It simply replaces the lists
with decision trees. Therefore, it is further on possible to use and write new
plug-in modules as desired. In addition, it is also possible to add new features
(i.e., to introduce new keywords) to the signature language. Although this seems
contradicting at ﬁrst glance as our decision tree requires the knowledge of these
features and their corresponding types, it can be done by excluding these prop-
erties from the decision tree and simply check them afterward for all signatures
that have triggered for a certain packet. This obviously reduces the eﬀectiveness
of our approach but allows one to extend Snort and keep the ability of deploying
the modiﬁed detection engine.
Discussion of Snort Rules
The rule set of Snort has evolved together with the program itself. Whenever a
new threat has been discovered, rules that specify an appropriate signature to
detect it have been added. The current version ships with 1581 rules that are
stored in 47 ﬁles. When testing our implementation, we used Mucus to generate
test data for a subset of 848 signatures. Mucus is a tool that reads a rule and
creates a network packet with exactly the properties speciﬁed by that signature.
When running our prototype on each test packet, we obviously expected to
detect the corresponding rule used to create it. Sometimes however, not only the
expected signature triggered on a single packet, but several others as well. This
has three main reasons.
Rules are identical: A few rule pairs simply specify identical values for the
same features.
Using Decision Trees to Improve Signature-Based Intrusion Detection
191
alert tcp $EXTERNAL_NET any -> $HOME_NET any (msg:"SCAN SYN FIN";flags:SF;
classtype:attempted-recon; sid:624; rev:1;)
alert tcp $EXTERNAL_NET any -> $HOME_NET any (msg:"SCAN synscan portscan";
id: 39426; flags: SF; classtype:attempted-recon; sid:630; rev:1;)
Rules are nearly identical: Several rule pairs specify identical values for all
but one feature. For this feature, one rule does not deﬁne a value at all, thereby
matching all packets that trigger the other one. Notice that for the second rule
pair, only the destination ports diﬀer. The content string represented by the
ASCII values |57 48 41 54 49 53 49 54| is identical to ‘WHATISIT’.
alert tcp $HOME_NET 23 -> $EXTERNAL_NET any (msg:"TELNET Bad Login";
content: "Login incorrect"; nocase; flags:A+; sid:1251; )
alert tcp $HOME_NET 23 -> $EXTERNAL_NET any (msg:"TELNET login incorrect";
content:"Login incorrect"; flags:A+; sid:718; rev:5;)
alert tcp $HOME_NET 146 -> $EXTERNAL_NET 1024: (msg:"BACKDOOR Infector";
content: "WHATISIT"; flags: A+; sid:117; )
alert tcp $HOME_NET 146 -> $EXTERNAL_NET 1000:1300 (msg:"BACKDOOR Infector
to Client"; content:"|57 48 41 54 49 53 49 54|"; flags:A+; sid:120;)
Rules are imprecise: Certain rules specify feature values that can appear with
a reasonable high probability in random, usually non-malicious packets as well.
This aﬀects many rules which deﬁne a very short content string that is searched
for inside the packet payload.
alert tcp $EXTERNAL_NET any -> $HOME_NET 21 (msg:"FTP wu-ftp attempt [";
flags:A+; content:"˜"; content:"["; classtype:misc-attack; sid:1377;)
alert tcp $EXTERNAL_NET any -> $HOME_NET 21 (msg:"FTP wu-ftp attempt {";
flags:A+; content:"˜"; content:"{"; classtype:misc-attack; sid:1378;)
The problem with multiple matching rules is the fact that Snort only reports
the ﬁrst one. This might result in a packet that triggers a signature which indi-
cates only a minor threat although it would also match one reporting a serious
security problem. When using Snort, one has to make sure that signatures are
speciﬁed as precise as possible and have only a negligible probability of matching
benign traﬃc. We circumvent this limitation by reporting all rules that match a
certain packet (when desired).