title:Postcards from the Post-HTTP World: Amplification of HTTPS Vulnerabilities
in the Web Ecosystem
author:Stefano Calzavara and
Riccardo Focardi and
Mat&apos;us Nemec and
Alvise Rabitti and
Marco Squarcina
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Postcards from the Post-HTTP World:
Ampliﬁcation of HTTPS Vulnerabilities in the Web Ecosystem
Stefano Calzavara
Ca’ Foscari Univ.
PI:EMAIL
Riccardo Focardi
Ca’ Foscari Univ.
& Cryptosense
PI:EMAIL
Matus Nemec
Ca’ Foscari Univ.
& Masaryk Univ.
PI:EMAIL
Alvise Rabitti
Ca’ Foscari Univ.
Marco Squarcina
TU Wien
PI:EMAIL
PI:EMAIL
Abstract—HTTPS aims at securing communication over the
Web by providing a cryptographic protection layer that ensures
the conﬁdentiality and integrity of communication and enables
client/server authentication. However, HTTPS is based on the
SSL/TLS protocol suites that have been shown to be vulnerable
to various attacks in the years. This has required ﬁxes and
mitigations both in the servers and in the browsers, producing a
complicated mixture of protocol versions and implementations in
the wild, which makes it unclear which attacks are still effective
on the modern Web and what is their import on web application
security. In this paper, we present the ﬁrst systematic quantitative
evaluation of web application insecurity due to cryptographic
vulnerabilities. We specify attack conditions against TLS using
attack trees and we crawl the Alexa Top 10k to assess the import
of these issues on page integrity, authentication credentials and
web tracking. Our results show that the security of a consistent
number of websites is severely harmed by cryptographic weak-
nesses that, in many cases, are due to external or related-domain
hosts. This empirically, yet systematically demonstrates how a
relatively limited number of exploitable HTTPS vulnerabilities
are ampliﬁed by the complexity of the web ecosystem.
I. INTRODUCTION
The HTTP protocol is the central building block of the
Web, yet it does not natively provide any conﬁdentiality or
integrity guarantee. HTTPS protects network communication
against eavesdropping and tampering by running HTTP on top
of cryptographic protocols like Secure Socket Layer (SSL) and
its successor Transport Layer Security (TLS), which allow for
the establishment of encrypted bidirectional communication
channels. Besides conﬁdentiality and integrity, HTTPS also
ensures authentication, because clients and servers may prove
their identity by presenting certiﬁcates signed by a trusted cer-
tiﬁcation authority. HTTPS has been increasingly recognized
as a cornerstone of web application security over time and it
is routinely employed by more and more websites, to the point
that the average volume of encrypted web trafﬁc has surpassed
the average volume of unencrypted trafﬁc according to data
from Mozilla [36]. It is plausible to believe that, in a near
future, HTTP will be (almost) entirely replaced by HTTPS,
thanks to initiatives like Let’s Encrypt and the actions taken
by major browser vendors to mark HTTP as ‘not secure’ [73].
Security experts know well that the adoption of HTTPS
is necessary for web application security, but not sufﬁcient.
Web applications can be attacked at many different layers, for
example on session management [17]. Moreover, the correct
deployment of HTTPS itself is far from straightforward [52].
For instance, bad security practices like the lack of adoption of
HTTP Strict Transport Security (HSTS) may allow attackers to
sidestep HTTPS and completely void its security guarantees.
But even when HTTPS is up and running, cryptographic ﬂaws
in SSL/TLS may undermine its intended security expectations.
Many attacks against SSL/TLS have been found, allowing for
information disclosure via side-channels or fully compromis-
ing the cryptographic keys used to protect communication [1],
[4], [9], [11], [14], [59]. These attacks are not merely theo-
retical: they have been shown to be effective in the wild and
open data from Qualys [64] suggest that many servers are
vulnerable to them. Several papers have also discussed the
results of similar data collections [14], [28], [39], [84], [85].
Despite this availability of data, however, previous analyses
provide only a very limited picture of how much cryptographic
weaknesses in HTTPS implementations harm the security
of the current Web. First, these studies are based on large-
scale detections of server-side vulnerabilities, but they do not
provide a thorough account of their exploitability on modern
clients. Many known vulnerabilities such as Bleichenbacher’s
padding oracle attack on PKCS #1 v1.5 RSA encryption [13]
or various padding oracle attacks on Cipher Block Chaining
(CBC) mode ciphers [3], [59], [88] rely on speciﬁc assump-
tions on both the client and the server to be exploited, such
as that the TLS peers will negotiate a speciﬁc ciphersuite like
RSA key exchange or use a symmetric cipher in CBC-mode,
respectively. Hence, the mere existence of a vulnerability does
not necessarily imply the possibility to attack a TLS con-
nection between an up-to-date client and a vulnerable server,
since all modern browsers implement various mitigations that
prevent many of the known TLS attacks. Moreover, attacks
against TLS at the transport layer may drastically differ in
terms of their impact at the application layer: for example,
the POODLE-TLS attack [78] can gradually leak a secret, but
it requires the attacker to force the browser into re-sending the
secret many times. Thus, the attack can leak a session cookie
by injecting requests from a page under the attacker’s control,
but not a password that is inserted by the user on a secure
login page and only sent once.
In this paper we present the ﬁrst systematic quantitative
evaluation of web application insecurity due to cryptographic
HTTPS vulnerabilities. The analysis relies on a characteri-
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:52)(cid:85)(cid:70)(cid:71)(cid:66)(cid:79)(cid:80)(cid:1)(cid:36)(cid:66)(cid:77)(cid:91)(cid:66)(cid:87)(cid:66)(cid:83)(cid:66)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:22)(cid:20)
(cid:19)(cid:25)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
TLS vulnerabilities are ampliﬁed by the web ecosystem and
have a huge practical impact on otherwise secure websites
that depend on or are related to the vulnerable hosts. We
found vulnerabilities in popular, security-conscious websites.
For example, because of TLS weaknesses in related hosts or
dependencies, it is possible to break password conﬁdentiality
on myspace.com, session security on yandex.com and cookie
integrity on live.com. We responsibly disclosed our ﬁndings
to the interested websites.
Contributions and paper structure:
make the following contributions:
In this paper, we
1) we review existing cryptographic attacks against TLS,
identifying those which are still effective on modern
clients. We then characterize such attacks in terms of
attack trees, which identify conditions to break the conﬁ-
dentiality and/or integrity properties of the TLS protocol.
To the best of our knowledge, this is the most system-
atic model of such attacks presented in the literature
– with a special focus on their practical impact – and
can serve other security researchers working in the area
(Section III);
2) we build an analysis platform which implements the
checks deﬁned by the attack trees and we run it on
the homepages of the top 10,000 websites of the Alexa
ranking supporting HTTPS. As part of this data collection
process, we also scan 90,816 hosts which either (i) store
sub-resources included in the crawled pages or (ii) are
sub-domains of the websites. These hosts have a major
import on the security of the crawled websites, which we
precisely assess (Section IV);
3) we rigorously identify a number of severe web application
attacks enabled by vulnerable TLS implementations and
we run automated checks for them on the collected data.
We focus on three different aspects of web application
security: page integrity (Section V), authentication cre-
dentials (Section VI) and web tracking (Section VII). This
list is not meant to be exhaustive, yet it is rich enough to
cover important security implications of existing crypto-
graphic ﬂaws of TLS on major websites.
Finally, Section II provides background on TLS and Sec-
tion VIII provides our closing perspective, discussing related
work, ethical issues and limitations of our study.
II. BACKGROUND ON TLS
In this section, we describe TLS 1.0, 1.1 and 1.2. Readers
who are already familiar with TLS can safely skip this section.
We do not discuss TLS 1.3 [66], as there are no known attacks
against
it due to the removal of vulnerable cryptographic
constructions used in previous protocol versions [66, Section
1.2]. Notice that version 1.3 is not yet widely supported in
the wild: only 5.2% of hosts in our scan supported some draft
version of TLS 1.3 (the ﬁnal version was not yet published at
the time of the scan). Moreover, we do not discuss certiﬁcate-
based client authentication as it is rarely adopted on the Web.
The TLS protocol consists of the following sub-protocols:
Fig. 1. An anonymized top Alexa website (central circle) and its sub-domains
(gray, on the right) and dependencies (white, with arrows). The website is
entirely deployed over HTTPS, but becomes insecure due to three vulnerable
sub-domains and three vulnerable dependencies (striped circles).
zation of TLS vulnerabilities in terms of attack trees [74]
capturing the conditions for the various attacks to be enabled
and on a crawl of the top 10,000 websites from Alexa sup-
porting HTTPS, including all their dependencies (hosts from
which sub-resources are included) and sub-domains. Crawling
dependencies and sub-domains is of ultimate importance, as
secure websites might be broken by importing sub-resources
or sending domain cookies over vulnerable TLS channels. The
complexity of the web ecosystem, in fact, ampliﬁes the effect
of TLS vulnerabilities, as illustrated in Figure 1. Our results
are disquieting:
• 898 websites are fully compromisable, allowing for script
injection, while 977 websites present low integrity pages
that the attacker can tamper with. Fully compromisable
sites include e-commerce sites such as alibaba.com, e-
banking services such as deutsche-bank.de and major
websites such as myspace.com and verizon.com. 660
out of the 898 compromisable websites (73.5%) include
external scripts from vulnerable hosts, thus empirically
demonstrating that the complexity of web applications
enormously ampliﬁes their attack surface;
• 10% of the detected login forms have conﬁdentiality
issues, which may enable password theft. 412 websites
may be subject
to cookie theft, exposing to session
hijacking, and 543 websites are subject to cookie integrity
attacks. Interestingly, we found that more than 20% of
the analyzed domain cookies can be potentially leaked,
suggesting that the organization of web applications as
related sub-domains ampliﬁes their attack surface and
needs to be carefully analyzed;
• 142 websites include content from vulnerable hosts of
the popular tracker PubMatic and thus expose users to
proﬁling attacks. Remarkably,
this privacy attack can
be ampliﬁed by the previous ﬁnding on compromisable
websites, so as to affect up to 968 websites. This shows
once more that attacks against TLS on external resources
may expose otherwise secure websites to severe threats.
One of the original aspects of our work is that all of the
presented attacks on web applications are exclusively due to
practical TLS vulnerabilities that are enabled on the server
and not prevented by modern browsers, thus potentially ex-
ploitable. Our ﬁndings show that a limited number of practical
(cid:19)(cid:25)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
Record Protocol carries the data,
that are optionally en-
crypted and authenticated, of the application data protocol
and the remaining TLS sub-protocols;
Handshake Protocol negotiates cryptographic keys and au-
thenticates the server;
Change Cipher Spec Protocol signals to the other peer that
the subsequent records will be encrypted and authenti-
cated under the negotiated keys;
Alert Protocol signals status changes, with warnings and
terminating fatal alerts, following e.g., decryption errors.
A. The Handshake Protocol
We describe in detail the Handshake Protocol, as it is the one
responsible for agreeing on the cryptographic algorithms and
keys used to protect messages and for authenticating the server.
As such, it constitutes a clearly sensitive target for network
attackers. The Handshake Protocol is an authenticated key
exchange protocol. The peers negotiate the TLS version and
the cryptographic algorithms (ciphersuites) for key exchange,
server authentication, and Record Protocol protection.
The client initiates the handshake with a ClientHello
message, that includes the highest supported TLS protocol ver-
sion, a random nonce for key derivation, the session identiﬁer,
the list of supported ciphersuites, the supported compression
methods (usually empty, as TLS compression is deprecated
for security reasons), and optional TLS extensions.
The server responds with a ServerHello message with
the lower between its highest supported protocol version and
the client’s version, a random nonce, the session identiﬁer,
the selected ciphersuite and compression method, and selected
extensions (a subset of those offered by the client). The server
should follow an ordering of the ciphersuites, ideally selecting
the most secure ciphersuite offered by the client. If there are
no supported algorithms in common, the server responds with
a handshake failure alert.
The server also sends
its X.509 certiﬁcate in the
Certificate message, that links its identity to its public
key. Depending on the selected ciphersuite, it may send a
ServerKeyExchange message contributing to the key ma-
terial. The client sends the ClientKeyExchange message
with its key material. The shared key material is called the Pre-
master Secret (PMS) and is used together with the exchanged
random nonces to compute the Master Secret, which is in turn
used to derive the session keys for the Record Protocol. Once
the Master Secret is shared, the peers run the Change Cipher
Spec Protocol and start protecting their messages.