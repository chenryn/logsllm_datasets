searched key and returns no data (or an error). Thumb stones are indeed used to mark a key as deleted 
in the base hive.
The system supports three kinds of differencing hives:
I 
Mutable hives can be written and updated. All the write requests directed to the mount point
(or to its children keys) are stored in the differencing hive.
I 
Immutable hives can’t be modified. This means that all the modifications requested on a key
that is located in the differencing hive will fail.
CHAPTER 10 Management, diagnostics, and tracing
425
I 
Write-through hives represent differencing hives that are immutable, but write requests
directed to the mount point (or its children keys) are redirected to the base layer (which is not
immutable anymore).
The NT kernel and applications can also mount a differencing hive and then apply namespace 
redirection on the top of its mount point, which allows the implementation of complex virtualized 
configurations like the one employed for Centennial applications (shown in Figure 10-7). The Modern 
Application Model and the architecture of Centennial applications are covered in Chapter 8. 
Centennial App 12
Centennial App 24
Namespace redirection
Mount
points
Registry merging
Loaded from
C:\ProgramData\Packages\Centennial.Test.App12
*Loaded from
C:\ProgramData\Packages\Centennial.Test.App24
Silo 12
HKLM\Software
Silo12Software
Silo 24
HKLM\Software
Silo12Software
Host HKLM\Software
Host\Registry\WC
FIGURE 10-7 Registry virtualization of the software hive in the Modern Application Model for 
Centennial applications.
Registry optimizations
The configuration manager makes a few noteworthy performance optimizations. First, virtually every 
registry key has a security descriptor that protects access to the key. However, storing a unique security 
descriptor copy for every key in a hive would be highly inefficient because the same security settings 
often apply to entire subtrees of the registry. When the system applies security to a key, the configura-
tion manager checks a pool of the unique security descriptors used within the same hive as the key 
to which new security is being applied, and it shares any existing descriptor for the key, ensuring that 
there is at most one copy of every unique security descriptor in a hive.
The configuration manager also optimizes the way it stores key and value names in a hive. Although 
the registry is fully Unicode-capable and specifies all names using the Unicode convention, if a name 
contains only ASCII characters, the configuration manager stores the name in ASCII form in the hive. 
426 
CHAPTER 10 Management, diagnostics, and tracing
When the configuration manager reads the name (such as when performing name lookups), it converts 
the name into Unicode form in memory. Storing the name in ASCII form can significantly reduce the 
size of a hive.
To minimize memory usage, key control blocks don’t store full key registry path names. Instead, 
they reference only a key’s name. For example, a key control block that refers to \Registry\System\
Control would refer to the name Control rather than to the full path. A further memory optimization is 
that the configuration manager uses key name control blocks to store key names, and all key control 
blocks for keys with the same name share the same key name control block. To optimize performance, 
the configuration manager stores the key control block names in a hash table for quick lookups.
To provide fast access to key control blocks, the configuration manager stores frequently accessed 
key control blocks in the cache table, which is configured as a hash table. When the configuration 
manager needs to look up a key control block, it first checks the cache table. Finally, the configuration 
manager has another cache, the delayed close table, that stores key control blocks that applications 
close so that an application can quickly reopen a key it has recently closed. To optimize lookups, these 
cache tables are stored for each hive. The configuration manager removes the oldest key control blocks 
from the delayed close table because it adds the most recently closed blocks to the table.
Windows services
Almost every operating system has a mechanism to start processes at system startup time not tied 
to an interactive user. In Windows, such processes are called services or Windows services. Services 
are similar to UNIX daemon processes and often implement the server side of client/server applica-
tions. An example of a Windows service might be a web server because it must be running regardless 
of whether anyone is logged on to the computer, and it must start running when the system starts so 
that an administrator doesn’t have to remember, or even be present, to start it.
Windows services consist of three components: a service application, a service control program 
(SCP), and the Service Control Manager (SCM). First, we describe service applications, service accounts, 
user and packaged services, and all the operations of the SCM. Then we explain how autostart services 
are started during the system boot. We also cover the steps the SCM takes when a service fails during 
its startup and the way the SCM shuts down services. We end with the description of the Shared service 
process and how protected services are managed by the system.
Service applications
Service applications, such as web servers, consist of at least one executable that runs as a Windows 
service. A user who wants to start, stop, or configure a service uses a SCP. Although Windows supplies 
built-in SCPs (the most common are the command-line tool sc.exe and the user interface provided 
by the services.msc MMC snap-in) that provide generic start, stop, pause, and continue functionality, 
some service applications include their own SCP that allows administrators to specify configuration set-
tings particular to the service they manage.
CHAPTER 10 Management, diagnostics, and tracing
427
Service applications are simply Windows executables (GUI or console) with additional code to 
receive commands from the SCM as well as to communicate the application’s status back to the SCM. 
Because most services don’t have a user interface, they are built as console programs.
When you install an application that includes a service, the application’s setup program (which 
usually acts as an SCP too) must register the service with the system. To register the service, the setup 
program calls the Windows CreateService function, a services-related function exported in Advapi32.
dll (%SystemRoot%\System32\ Advapi32.dll). Advapi32, the Advanced API DLL, implements only a 
small portion of the client-side SCM APIs. All the most important SCM client APIs are implemented in 
another DLL, Sechost.dll, which is the host library for SCM and LSA client APIs. All the SCM APIs not 
implemented in Advapi32.dll are simply forwarded to Sechost.dll. Most of the SCM client APIs commu-
nicate with the Service Control Manager through RPC. SCM is implemented in the Services.exe binary. 
More details are described later in the “Service Control Manager” section.
When a setup program registers a service by calling CreateService, an RPC call is made to the SCM 
instance running on the target machine. The SCM then creates a registry key for the service under 
HKLM\SYSTEM\CurrentControlSet\Services. The Services key is the nonvolatile representation of the 
SCM’s database. The individual keys for each service define the path of the executable image that con-
tains the service as well as parameters and configuration options.
After creating a service, an installation or management application can start the service via the 
StartService function. Because some service-based applications also must initialize during the boot 
process to function, it’s not unusual for a setup program to register a service as an autostart service, 
ask the user to reboot the system to complete an installation, and let the SCM start the service as the 
system boots.
When a program calls CreateService, it must specify a number of parameters describing the service’s 
characteristics. The characteristics include the service’s type (whether it’s a service that runs in its own 
process rather than a service that shares a process with other services), the location of the service’s 
executable image file, an optional display name, an optional account name and password used to start 
the service in a particular account’s security context, a start type that indicates whether the service 
starts automatically when the system boots or manually under the direction of an SCP, an error code 
that indicates how the system should react if the service detects an error when starting, and, if the 
service starts automatically, optional information that specifies when the service starts relative to other 
services. While delay-loaded services are supported since Windows Vista, Windows 7 introduced sup-
port for Triggered services, which are started or stopped when one or more specific events are verified. 
An SCP can specify trigger event information through the ChangeServiceConfig2 API.
A service application runs in a service process. A service process can host one or more service 
applications. When the SCM starts a service process, the process must immediately invoke the 
StartServiceCtrlDispatcher function (before a well-defined timeout expires—see the “Service logon” 
section for more details). StartServiceCtrlDispatcher accepts a list of entry points into services, with one 
entry point for each service in the process. Each entry point is identified by the name of the service 
the entry point corresponds to. After making a local RPC (ALPC) communications connection to the 
SCM (which acts as a pipe), StartServiceCtrlDispatcher waits in a loop for commands to come through 
the pipe from the SCM. Note that the handle of the connection is saved by the SCM in an internal 
428 
CHAPTER 10 Management, diagnostics, and tracing
list, which is used for sending and receiving service commands to the right process. The SCM sends 
a service-start command each time it starts a service the process owns. For each start command it 
receives, the StartServiceCtrlDispatcher function creates a thread, called a service thread, to invoke 
the starting service’s entry point (Service Main) and implement the command loop for the service. 
StartServiceCtrlDispatcher waits indefinitely for commands from the SCM and returns control to the 
process’s main function only when all the process’s services have stopped, allowing the service process 
to clean up resources before exiting.
A service entry point’s (ServiceMain) first action is to call the RegisterServiceCtrlHandler function. 
This function receives and stores a pointer to a function, called the control handler, which the ser-
vice implements to handle various commands it receives from the SCM. RegisterServiceCtrlHandler 
doesn’t communicate with the SCM, but it stores the function in local process memory for the 
StartServiceCtrlDispatcher function. The service entry point continues initializing the service, which can 
include allocating memory, creating communications end points, and reading private configuration 
data from the registry. As explained earlier, a convention most services follow is to store their param-
eters under a subkey of their service registry key, named Parameters.
While the entry point is initializing the service, it must periodically send status messages, using the 
SetServiceStatus function, to the SCM indicating how the service’s startup is progressing. After the 
entry point finishes initialization (the service indicates this to the SCM through the SERVICE_RUNNING 
status), a service thread usually sits in a loop waiting for requests from client applications. For example, 
a web server would initialize a TCP listen socket and wait for inbound HTTP connection requests.
A service process’s main thread, which executes in the StartServiceCtrlDispatcher function, receives 
SCM commands directed at services in the process and invokes the target service’s control handler 
function (stored by RegisterServiceCtrlHandler). SCM commands include stop, pause, resume, interro-
gate, and shutdown or application-defined commands. Figure 10-8 shows the internal organization of 
a service process—the main thread and the service thread that make up a process hosting one service.
Main
StartServiceCtrlDispatcher
Service control handler
Pipe to
SCM
3
RegisterServiceCtrlHandler
Initialize
Process client requests
1
3
Main thread
Service thread
1. StartServiceCtrlDispatcher launches service thread.
2. Service thread registers control handler.
3. StartServiceCtrlDispatcher calls handlers in response to SCM commands.
4. Service thread processes client requests.
Connections to
service clients
4
2
FIGURE 10-8 Inside a service process.
CHAPTER 10 Management, diagnostics, and tracing
429
Service characteristics
The SCM stores each characteristic as a value in the service’s registry key. Figure 10-9 shows an example 
of a service registry key.
FIGURE 10-9 Example of a service registry key.
Table 10-7 lists all the service characteristics, many of which also apply to device drivers. (Not every 
characteristic applies to every type of service or device driver.) 
Note The SCM does not access a service’s Parameters subkey until the service is deleted, 
at which time the SCM deletes the service’s entire key, including subkeys like Parameters.
TABLE 10-7 Service and Driver Registry Parameters
Value Setting
Value Name
Value Setting Description
Start
SERVICE_BOOT_START (0x0)
Winload preloads the driver so that it is in memory dur-
ing the boot. These drivers are initialized just prior to 
SERVICE_SYSTEM_START drivers.
SERVICE_SYSTEM_START (0x1)
The driver loads and initializes during kernel initializa-
tion after SERVICE_BOOT_START drivers have initialized.
SERVICE_AUTO_START (0x2)
The SCM starts the driver or service after the SCM pro-
cess, Services.exe, starts.
SERVICE_DEMAND_START (0x3)
The SCM starts the driver or service on demand (when a 
client calls StartService on it, it is trigger started, or when 
another starting service is dependent on it.)
SERVICE_DISABLED (0x4)
The driver or service cannot be loaded or initialized.
430 
CHAPTER 10 Management, diagnostics, and tracing
Value Setting
Value Name
Value Setting Description
ErrorControl
SERVICE_ERROR_IGNORE (0x0)
Any error the driver or service returns is ignored, and no 
warning is logged or displayed.
SERVICE_ERROR_NORMAL (0x1)
If the driver or service reports an error, an event log 
message is written.
SERVICE_ERROR_SEVERE (0x2)
If the driver or service returns an error and last known 
good isn’t being used, reboot into last known good; 
otherwise, log an event message.
SERVICE_ERROR_CRITICAL (0x3)
If the driver or service returns an error and last known 
good isn’t being used, reboot into last known good; 
otherwise, log an event message.
Type
SERVICE_KERNEL_DRIVER (0x1)
Device driver.
SERVICE_FILE_SYSTEM_DRIVER (0x2)
Kernel-mode file system driver.
SERVICE_ADAPTER (0x4) 
Obsolete.
SERVICE_RECOGNIZER_DRIVER (0x8)
File system recognizer driver.
SERVICE_WIN32_OWN_PROCESS 
(0x10)
The service runs in a process that hosts only one service.
SERVICE_WIN32_SHARE_PROCESS 
(0x20)
The service runs in a process that hosts multiple services.
SERVICE_USER_OWN_PROCESS 
(0x50)
The service runs with the security token of the logged-in 
user in its own process.
SERVICE_USER_SHARE_PROCESS 
(0x60)
The service runs with the security token of the logged-in 
user in a process that hosts multiple services.
SERVICE_INTERACTIVE_PROCESS 
(0x100)
The service is allowed to display windows on the console 
and receive user input, but only on the console session 
(0) to prevent interacting with user/console applications 
on other sessions. This option is deprecated.
Group
Group name
The driver or service initializes when its group is 
initialized.
Tag
Tag number
The specified location in a group initialization order. This 
parameter doesn’t apply to services.
ImagePath
Path to the service or driver execut-
able file
If ImagePath isn’t specified, the I/O manager looks for 
drivers in %SystemRoot%\System32\Drivers. Required 
for Windows services.
DependOnGroup
Group name
The driver or service won’t load unless a driver or service 
from the specified group loads.
DependOnService
Service name
The service won’t load until after the specified service 
loads. This parameter doesn’t apply to device drivers or 
services with a start type different than SERVICE_AUTO_
START or SERVICE_DEMAND_START.
ObjectName
Usually LocalSystem, but it can 
be an account name, such as .\
Administrator
Specifies the account in which the service will run. If 
ObjectName isn’t specified, LocalSystem is the account 
used. This parameter doesn’t apply to device drivers.
DisplayName
Name of the service
The service application shows services by this name. If 
no name is specified, the name of the service’s registry 
key becomes its name.
CHAPTER 10 Management, diagnostics, and tracing