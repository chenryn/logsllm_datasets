这将启动一个名为`mysql-01`的运行 MySQL 的容器，该容器在容器中名为`/var/lib/mysql`的挂载点挂载名为`pv-mysql-data`的卷。最后一个选项是使用`-e`，创建一个名为`MYSQL_ROOT_PASSWORD`的环境变量，设置为`my-password`。
一旦容器启动并运行，您可以查看卷目录，通过检查目录中的数据来验证 MySQL 是否正确装载了卷:
![Figure 2.4 – MySQL persistent volume ](img/Fig_2.4_B15514.jpg)
图 2.4–MySQL 持久卷
如您所见，新的卷包含所有标准文件，这些文件是在新的 MySQL 服务器第一次启动时创建的。
我们还提到，您可以让 Docker 自动创建卷，而不是自己创建卷。要让 Docker 在容器启动时创建卷，请运行与使用预创建卷时相同的命令。例如，使用前面的 MySQL 示例，让我们假设*没有使用`docker volume create`命令*预创建卷。
让我们执行相同的命令:
```
docker run --name mysql-01 -v pv-mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-password -d mysql
```
当我们这样做的时候，Docker 守护程序会意识到不存在名为`pv-mysql-data`的现有卷，并且在它装入容器之前会创建一个卷。
## 安装现有体积
与也存储在本地主机上的容器层不同，如果从 Docker 中移除容器，卷不会丢失。在之前的 MySQL 升级示例中，我们将数据库服务器升级到了更新的版本。由于我们希望保持容器名称与先前部署的容器相同，因此我们移除了旧容器，并以相同的名称启动了新容器。通过移除容器，我们移除了存储在本地文件系统上的容器层。
为了避免在升级后或从主机上移除容器后丢失数据库，我们可以在新的运行容器中装载现有卷。由于默认情况下不会删除卷，因此数据仍在本地文件系统上，并准备好供任何其他容器使用。
当我们停止并移除 MySQL 服务器时，卷保持不变。当我们启动新的 MySQL 容器时，我们只需要使用原始容器中使用的相同卷名来提供`-v`选项。这就是为什么创建命名卷优于创建匿名卷的原因。在我们的示例中，我们创建了一个名为`pv-mysql-data`的命名卷。要使用相同的卷运行新容器，我们可以使用带有`-v`选项的`docker run`命令，如下所示:
```
docker run --name mysql-01 -v pv-mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-password -d mysql:v2
```
这将启动我们的新`mysql:v2`容器，其体积与之前的容器相同，现有数据库完全完好无损。
## 在多个容器中安装一个容积
如果您有一个需要多个容器的应用，并且每个容器都需要完全相同的数据，该怎么办？虽然您可以为每个容器创建一个卷并将数据复制到每个容器中，但更有效的方法是在多个容器之间共享一个卷。
Docker 卷的一个独特特征是多个容器可以访问同一个卷。虽然这听起来像是为共享数据提供单一位置的简单解决方案，但您需要记住，当多个进程访问相同数据时，并不是每个应用都能很好地运行。使用我们的数据库示例，使用相同的卷启动第二个容器会导致第二个容器的 MySQL 服务器在启动时失败。由于文件被第一个容器的数据库锁定，第二个容器不能独占访问数据库来装载它。如果查看第二个实例的日志，您会看到如下所示的错误:
![Figure 2.5 – Locking error output ](img/Fig_2.5_B15514.jpg)
图 2.5–锁定错误输出
在一些用例中，共享卷将为您的应用带来好处。想象一下，您正在主机上运行几个 web 服务器实例，这些实例只显示从夜间更改的文件夹中检索到的数据。一种选择是每天晚上使用管道创建一个新的容器，但是对于这个例子，我们假设您没有配置项/光盘系统。
相反，您可能在主机上有一个进程，将数据拉入创建 Docker 卷的目录中。每个网络服务器将使用一个卷挂载，使用相同的 Docker 卷。这允许每个容器从单个共享位置访问数据，而不需要对基础映像进行任何更改。
为了实现这一点，您只需要在容器启动时为每个容器提供相同的装载选项。例如，我们在主机上创建了一个名为`webdata`的卷，我们希望启动四个 NGINX 服务器，它们将使用 Docker 卷中的数据。启动每个实例时，只需使用相同的`webdata`命名卷:
```
docker run --name webserver01 -v webdata:/opt/web/data -d bitnami/nginx:latest docker run --name webserver02 -v webdata:/opt/web/data -d bitnami/nginx:latest docker run --name webserver03 -v webdata:/opt/web/data -d bitnami/nginx:latest docker run --name webserver04 -v webdata:/opt/web/data -d bitnami/nginx:latest
```
由于 NGINX 服务器只读取数据，所以我们不会遇到 MySQL 遇到的任何锁定错误。
现在我们已经讨论了卷，并创建了其中的一些卷，您可能会意识到，当主机上有许多卷时，可能很难记住存在哪些卷。下一节将讨论我们的卷的一些基本管理选项。
## 上市 Docker 卷〔t0〕月
请记住卷由 Docker 管理，因此守护程序知道创建的每个卷。如果您想列出您或 Docker 守护程序创建的每个卷，请使用`docker volume list`选项:
![Figure 2.6 – docker volume list output  ](img/Fig_2.6_B15514.jpg)
图 2.6–docker 卷列表输出
此选项将显示当前由 Docker 管理的所有卷。
## 清理卷 mes
默认情况下，Docker 从不删除为容器创建的卷。我们已经知道，当我们使用一个卷停止和启动一个容器时，数据会一直存在，但是当我们不再需要数据时，我们能做些什么呢？
想象一下`/var/lib/docker/volumes`文件夹中的数据量会以惊人的速度增长。因此，最佳做法是清理或删除卷以释放磁盘空间，我们通常将其称为垃圾收集过程的一部分。
从不再需要的映像中删除数据的最简单方法是在从 Docker 中移除容器时使用`-v`选项。在本书中，我们已经多次使用`docker rm `从主机中移除映像。如果您有一个附加到容器的卷，并且您想要在删除映像时删除数据，您可以将`-v`选项添加到`rm`命令，这将删除与容器相关联的所有卷。要删除 MySQL 服务器和持久数据，我们将使用以下命令:
```
docker rm -v mysql
```
有时您不想通过移除容器来删除数据。删除卷无法撤消，因此更好的做法是移除容器，并将卷保留一定的天数。经过一段时间后，您可能会更愿意删除卷。
如果您想删除单个或多个卷，可以使用`docker volume rm`选项。您可以在`rm`选项后提供卷名。系统将删除提供的每个卷，从而释放主机系统上的磁盘空间。
您可能担心会删除容器正在使用的卷。不要害怕——Docker 已经帮你搞定了。如果您试图删除当前正在运行的容器正在使用的或分配给已停止的容器的任何卷，您将收到一个错误:
```
Error response from daemon: remove test-auto: volume is in use - [51000e2f61c79ae705cdac78692fa5590fb2b26d3d0eb0a3916df230 daf1b617]
```
Docker 将只允许您删除尚未被正在运行的容器打开的卷。
您可能有许多要删除的卷。虽然您可以使用`remove`命令提供每个名称，但是 Docker 提供了另一个选项，称为修剪。清理将查看所有卷，并删除当前未装载到正在运行的容器上的任何卷。
使用此选项时要小心，只有当您知道未使用的卷不包含您出于任何原因需要的数据时，才使用它。这个过程是最终的，一旦运行，它将删除所有不使用的卷。
要删除未使用的卷，我们使用`docker volume prune`选项。此命令将查看所有卷，任何未连接到正在运行的容器的卷都将被删除。当您发出命令时，它将警告您，它将删除任何没有至少一个运行容器的卷:
![Figure 2.7 – docker prune confirmation ](img/Fig_2.7_B15514.jpg)
图 2.7–Docker 清理确认
**选择** `y` **为是小心**–此动作没有撤销命令。执行后，您将收到已删除卷的摘要，包括它们的名称和回收的总磁盘空间:
![Figure 2.8 – docker prune results ](img/Fig_2.8_B15514.jpg)
图 2.8–Docker 清理结果
这就完成了本章的 Docker 卷部分。请记住，卷只是向容器提供数据持久性的一种方式。另一种方法称为绑定装载，虽然它也像卷一样使用主机文件系统，但绑定装载有一个非常不同的用例。
# 坞接器绑定 mo〔t0〕unts
您可以用来向容器提供持久数据的第二个选项称为绑定装载。总的来说，卷和绑定安装可能看起来相似；两者都使用本地主机的文件系统，并且都使用`docker -v`选项装载。虽然它们有许多相同的特征，但是绑定挂载和卷挂载在一个主要方面是不同的:它是由 Docker 管理的*而不是*。
与 Docker 卷不同，Docker 无法创建绑定装载。您不能使用`docker volume create`选项创建绑定挂载；但是，当容器启动时，Docker 可以自动创建绑定挂载。即使 Docker 可以在主机上创建绑定装载位置，它也不会“管理”装载。
由于 Docker 不管理绑定装载，因此不能使用 Docker 命令删除它们。Docker 不跟踪列表中绑定挂载的位置。如果在主机上文件系统的不同区域创建绑定装载，一旦不再需要手动删除数据，就需要跟踪每个要删除的绑定装载的位置。
绑定挂载是位于主机文件系统上任何位置的目录，使用`docker -v`选项绑定到容器。与通常总是位于预定义位置(如`/var/lib/docker/volumes`)的卷不同，绑定挂载可以位于主机文件系统的任何位置。由于目录位于文件系统上，因此在尝试访问目录时，您可能会遇到权限问题。这个讨论超出了本书的范围，进入了 Linux 文件系统权限的领域。
您可以绑定任何现有目录或创建新目录，方法是预先创建目录或让 Docker 在容器启动时创建目录。
在我们解释如何使用绑定挂载之前，您可能会问自己:*“我为什么要使用绑定挂载？”*或*“我为什么要用音量？我为什么要在乎用哪一个？”。*我们将解释为什么您可能希望或可能不希望使用绑定装载，然后将它们与卷进行比较。
当您需要与正在运行的容器共享主机系统上的某些内容时，绑定装载可能是有益的。例如，您在本地笔记本电脑上开发了一个应用，并希望在代码定稿之前测试该应用。与其在本地控制台上运行它，不如在容器中测试它。您可以将源代码存储在`/source`中，然后在编译时，您可以将可执行文件和任何库存储在`/apps/testapp`中。让我们来看看:
1.  You start a container with the `-v` option, which will bind mount the local host's `/apps/testapp` folder in the container. This doesn't change very much from using a volume in a container. In fact, the syntax to mount a bind location is the same as mounting a volume to a container when using the `docker run -v` option. However, rather than providing a volume name in the `-v` option, you need to provide the local host directory instead; for example: