instance, in the case of our running example in Listing 1, the
return tlen instruction at Line 19 is a valid exit point.
We consider all return statements as possible valid exit
points. However, a function might exit because of an error (for
instance, Line 4 in Listing 1), and the corresponding return statement
does not represent a valid exit point. Hence, to identify the VEP
set, we need to filter out all the return statements that are part of
error basic blocks (BBerr).
In summary, to identify the VEP set of a function f with
PDG(f) = (V,D,C), we need to find all the exit points of f, i.e.,
1566
Ex(f), and filter out all the return instructions that belong to error
basic blocks. More formally:
VEP(f)={r|((r∈Ex(f))∧(BB(r)(cid:7)∈BBerrs(f)))}.
where BB(r) indicates the basic block of instruction r.
To ensure that a patch satisfies condition C1, we need to verify
that all inputs that go through the valid exit points, i.e., VEP of the
patched function fp, also go through the valid exit points of the
original function f.
We observe that, in order for an input i to be successfully
executed by a function, the input must satisfy the path constraint (PC)
of a valid exit point. Thus, all the inputs that are accepted as valid by
a function, which we denote as vinputs(f), are the union of all the
inputs that satisfy the path constraints for at least one valid exit point.
More formally, the constraints on the inputs that are successfully
executed by the function f are captured by the following disjunction:
vinputs(f)=
(PC(i)).
(3)
(cid:2)
i∈VEP(f)
If we have vinputs(fp) → vinputs(f), which shows that all
the inputs that can be successfully executed by the patched function
fp are also successfully executed by the original function f, we
have succeeded in proving condition C1.
For our running example in Listing 1, with the PDG of the
patched function in Figure 2b, the valid exit point is at Line 19
(return tlen). By following the solid edges backwards and
computing the path constraints for the patched function, we obtain
vinputs(fp) = ((En == T )∧ (t->len > MAX_LEN == F )).
For the original function, whose PDG is in Figure 2a, we
obtain vinputs(f) = (En == T ). We can easily see that
vinputs(fp)→vinputs(f), thus satisfying C1.
To perform this step, we use symbolic interpretation to convert
the C language statements into symbolic expressions (as discussed
in more detail below). Then, we prove the implications between
the two symbolic expressions using a SAT solver [34] (more details
are provided in Section IV-E).
4) Output equivalence (C2): To verify the output equivalence
condition (C2), we need to verify that all externally visible changes
(as described in Section II-B) in the patched function are the same
as that of the original one. Specifically, we want to ensure that
for any input that successfully executes through the patched and
original function, the output of the two functions will be identical.
We first look at all the affected (non-control-flow) statements.
First, we discard all the statements that modify local variables.
While local variables can have an indirect effect on a function’s
output (which we take into account, as explained below), the local
variables themselves are not externally visible. Thus, we do not
need to consider them in this step. In the next step, we need to
verify that all the updates (writes) to non-local (global and pointer)
variables, function call arguments, and return values in the patched
function are the same as that of the original function. In other words,
we aim to prove that all global and pointer variables have the same
values after the patched function has executed (compared to the
original function), the patched function returns the same value, and
it calls the same functions with the same arguments (and in the
same order). When we are able to prove this, we are sure that, for
every valid input, the patch does not change the externally visible
effect of executing this function.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:07 UTC from IEEE Xplore.  Restrictions apply. 
Given a statement t, we need to show that for all (valid) inputs
that reach t in the patched and the original function, their outputs
will be the same. More formally:
∀i∈I|(i(cid:2)→tp)→(output(tp)=output(t))
The output value of a statement depends on the values of the
inputs (input variables). Consider, for example, the statement c
= a + b. Here, the output is assigned to the variable c, and the
value depends on the inputs a and b. We can determine where
these inputs come from by looking at the data-dependency graph
for the statement. Of course, the inputs for a statement could come
from multiple data-dependency paths. Consider again the PDG
in Figure 2b. For the statement at Line 15, there are two complete
data dependency paths:  and . The execution
can take two different paths to reach this line, based on whether the
function input satisfies the constraint on Line 10 or not.
For a given statement t, and for each data-dependency path to this
statement, we compute a symbolic expression for the possible output
values (along these paths). The idea is that the union of the symbolic
expressions (overall data-dependency paths) for t are the same for
the patched function as for the original one. While this intuitively
makes sense, there is one additional consideration. It is not enough to
ensure that just the symbolic expressions are the same; they need to
be the same under the same path constraints. Thus, we need to extend
the symbolic expressions with their corresponding path constraints.
We refer to these extended symbolic expressions as symbolic output-
constraint pairs, which are computed as described hereinafter:
For a given statement t in a function f and the corresponding
PDG(f) = (V,D,C), we can compute the output-constraint pairs
from all the complete data dependency paths to t. For each such
(cid:3)
path, we compute an output-constraint pair as:
1≤i≤n
Ψs =(interpret(),
PC(xi)).
where interpret represents the symbolic expression that is com-
puted by interpreting each of the instructions in sequence, and PC(•)
is the path constraint of the corresponding instruction in the PDG.
Let Ψp(t) and Ψ(t) be the symbolic output-constraint pairs for
the statement t in the patched and original function, respectively.
We say that the output of statement t is equivalent in the original
and the patched function, denoted as Ψp(v)≡Ψ(v), if the following
equation holds:
∀(ox,cx)∈Ψp(v)·∃(oy,cy)∈Ψ(v)(cid:10)(ox ==oy)∧(cx→cy). (4)
Note that o• are not concrete values but rather symbolic values.
It is possible that there is an infinite number of data dependency
paths that lead to a statement. This happens when there are loops
or cyclic dependencies in the data dependency graph (for example,
when a value is updated inside the body of a loop and later used
by an affected statement). We will show in Section IV-E how we
resolve cycles in the data dependency graph. We will further argue
that our approach is safe for a subset of instances, and we only
consider these cases as safe patches.
Consider how we verify that condition C2 holds for our running
example in Listing 1: The affected statements are at Lines 3, 8, 10,
11, 15, 17, and 19. Recall that we only consider non-control-flow
statements. Thus, we can remove Line 3 and 10 from further
consideration. Next, we can discard all statements that write to local
1567
variables, which removes Lines 8, 11, and 15. We end up with the
statements at Lines 17 and 19, which write to a non-local variable
through a pointer and return a value, respectively.
Looking at the PDG for the patched function (in Figure 2b), we
see that there exist two complete data dependency paths for Line 17:
 and . The symbolic interpretation
steps for both paths is shown in Table I. For every path, we first
initialize each of the variables with a unique symbol, and then
start interpreting each instruction according to its semantics. The
symbolic output with corresponding path constraints along the
path  is (o1
p) = (t->total = sym2,((En ==
T )∧((sym2 > sym3) == F )∧((((sym2+4)%2)(cid:7)= 0) == F ))).
the path ,
is
For
p) = (t->total = sym2+sym5,((En == T )∧((sym2 >
p,c2
(o2
sym3)==F )∧((((sym2+4)%2)(cid:7)=0)==T ))).
result
p,c1
the
For interpreting the original function, we start with the same
initial symbols for the same variables that were used in the patched
function. From the original function’s PDG in Figure 2a, for
Line 17, there are also two data dependency paths:  and
. The symbolic output along with the corresponding
path constraints are (o1
c) = (t->total = sym2, ((En ==
T )∧ (((sym2%2) (cid:7)= 0) == F ))) and (o2
c) = (t->total =
sym2+sym5,((En==T )∧(((sym2%2)(cid:7)=0)==T ))).
p → c1
p → c2
p == o2
c.
We can see that o1
c and o2
c ∧ c1
c ∧ c2
c, c1
p == o1
c,c2
Hence, Equation 4 holds.
Similarly, we can show that the output at Line 19 is equivalent
in both the patched and the original function. As a result, our system
has verified that the patch satisfies condition C2, and the patch is
safe. For a patch that affects multiple functions, the steps described
above are performed for each function.
IV. SPIDER: DESIGN AND IMPLEMENTATION
In this section we show the details of SPIDER, a tool, that
satisfies our requirements R1 and R2, uses the approach described
in Section III to analyze a given C source code patch and determine
if it is an sp. The steps that SPIDER performs are detailed in the
remaining part of this section.
A. Preprocessing
SPIDER starts by handling the C preprocessor directives. File
inclusions (i.e., #include) are ignored, since as a requirement
we do not want to collect information outside of the two input source
code files. Macro definitions are ignored as well: macro calls will be
treated as regular function calls, as explained later. The system then
uses the unifdef 1 tool to handle conditional code inclusion directives
(e.g., #ifdef, #ifndef, etc.): the output of unifdef is a valid
C source file, without any of these constructs. Note that this step
could exclude certain code segments. Section V explains this in
detail. This first step outputs two C source files ready to be parsed.
B. Parsing
The preprocessed source files are parsed using the Joern [77]
fuzzy parser, which provides an Abstract Syntax Tree (AST) for all
the functions in the file. Although Joern also provides a Control Flow
Graph (CFG), with nodes linked to the ones in the AST, we had
to modify it to suite our needs. Specifically, we had to implement
the reaching definitions analysis [58], simple type inference [63],
control dependency analysis [18], and, finally, program dependency
graph [36]. At the end of this phase, SPIDER has access to the AST,
CFG, and PDG for each of the functions affected by the patch.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:07 UTC from IEEE Xplore.  Restrictions apply. 
Current Statement
8: len = t->len + 4
15: tlen = len - 4
17: t->total = tlen
8: len = t->len + 4
11: len += DEF_SIZE
15: tlen = len - 4
17: t->total = tlen
Symbolic State
Input
For path:  starting with initial state
len = sym1, t->len = sym2, MAX_LEN = sym3
tlen = sym4, DEF_SIZE = sym5, t->total = sym6
len = sym2 + 4, t->len = sym2, MAX_LEN = sym3
tlen = sym5, DEF_SIZE = sym5, t->total = sym6
len = sym2 + 4, t->len = sym2, MAX_LEN = sym3
tlen = sym2, DEF_SIZE = sym5, t->total = sym6
For path:  starting with initial state
len = sym1, t->len = sym2, MAX_LEN = sym3
tlen = sym4, DEF_SIZE = sym5, t->total = sym6
len = sym2 + 4, t->len = sym2, MAX_LEN = sym3
tlen = sym4, DEF_SIZE = sym5, t->total = sym6
len = sym2 + 4 + sym5, t->len = sym2, MAX_LEN = sym3
tlen = sym4, DEF_SIZE = sym5, t->total = sym6
len = sym2 + 4 + sym5, t->len = sym2, MAX_LEN = sym3
tlen = sym2 + sym5, DEF_SIZE = sym5, t->total = sym6
Output
len = sym2 + 4
tlen = sym2
t->total = sym2
len = sym2 + 4
len = sym2 + 4 + sym5
tlen = sym2 + sym5
t->total = sym2 + sym5
TABLE I: Symbolic interpretation of the data-dependency path  and  of the PDG in Figure 2b.
C. Fine-grained diff
SPIDER uses function names to pair the functions in the original
file with the corresponding ones in the new files, assuming patches
that insert, delete, or rename one or more functions not to be sps.
SPIDER then identifies the functions affected by the patch using java-
diff-utils2, a common text diff tool. Our system then applies a state-
of-the-art AST diffing technique, Gumtree [35], between the original
and patched ASTs of the affected functions. Gumtree maps the nodes
in the old AST with the corresponding nodes in the new one and
identifies nodes that have been moved, inserted, deleted, or updated.
A moved node is a node that the patch moved in another position in
the AST, but whose content was unchanged, while an updated node
is a non-moved node whose content was changed. The differences in
the ASTs are also associated to the corresponding nodes in the CFG.
(cid:76)(cid:81)(cid:87)(cid:3)(cid:76)(cid:81)(cid:76)(cid:87)(cid:66)(cid:71)(cid:72)(cid:89)(cid:76)(cid:70)(cid:72)(cid:11)(cid:12)(cid:3)(cid:94)
(cid:76)(cid:81)(cid:87)(cid:3)(cid:85)(cid:72)(cid:87)(cid:3)(cid:32)(cid:3)(cid:16)(cid:20)(cid:30)
(cid:3)(cid:76)(cid:81)(cid:87)(cid:3)(cid:85)(cid:72)(cid:87)(cid:3)(cid:32)(cid:3)(cid:16)(cid:20)(cid:30)
(cid:37)(cid:37)(cid:20)
(cid:3)(cid:71)(cid:72)(cid:89)(cid:66)(cid:87)(cid:3)(cid:13)(cid:82)(cid:69)(cid:77)(cid:3)(cid:32)(cid:3)(cid:78)(cid:80)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:11)(cid:86)(cid:76)(cid:93)(cid:72)(cid:82)(cid:73)(cid:11)(cid:71)(cid:72)(cid:89)(cid:66)(cid:87)(cid:12)(cid:12)(cid:30)
(cid:71)(cid:72)(cid:89)(cid:66)(cid:87)(cid:87)(cid:3)(cid:13)(cid:82)(cid:69)(cid:77)(cid:3)(cid:32)(cid:3)(cid:78)(cid:80)(cid:68)(cid:79)(cid:79)(cid:82)(cid:70)(cid:11)(cid:86)(cid:76)(cid:93)(cid:72)(cid:82)(cid:73)(cid:11)(cid:71)(cid:72)(cid:89)(cid:66)(cid:87)(cid:12)(cid:12)(cid:30)
(cid:3)
(cid:76)(cid:73)(cid:11)(cid:4)(cid:82)(cid:69)(cid:77)(cid:12)(cid:3)(cid:94)
(cid:76)(cid:73)(cid:11)(cid:4)(cid:82)(cid:69)(cid:77)(cid:12)(cid:3)(cid:94)
(cid:3)(cid:3)(cid:3)(cid:74)(cid:82)(cid:87)(cid:82)(cid:82)(cid:3)(cid:82)(cid:88)(cid:87)(cid:30)
(cid:3)(cid:3)(cid:3)(cid:74)(cid:82)(cid:87)(cid:82)(cid:3)(cid:82)(cid:88)(cid:87)(cid:30)
(cid:3)(cid:96)
(cid:3)(cid:96)
(cid:3)(cid:76)(cid:73)(cid:11)(cid:86)(cid:72)(cid:87)(cid:88)(cid:83)(cid:66)(cid:71)(cid:72)(cid:89)(cid:11)(cid:82)(cid:69)(cid:77)(cid:12)(cid:12)(cid:3)(cid:94)
(cid:3)(cid:76)(cid:73)(cid:11)(cid:86)(cid:72)(cid:87)(cid:88)(cid:83)(cid:66)(cid:71)(cid:72)(cid:89)(cid:11)(cid:82)(cid:69)(cid:77)(cid:12)(cid:12)(cid:3)(cid:94)
(cid:3)(cid:3)(cid:3)(cid:74)(cid:82)(cid:87)(cid:82)(cid:82)(cid:3)(cid:72)(cid:85)(cid:85)(cid:82)(cid:85)(cid:30)
(cid:3)(cid:3)(cid:3)(cid:74)(cid:82)(cid:87)(cid:82)(cid:3)(cid:72)(cid:85)(cid:85)(cid:82)(cid:85)(cid:30)
(cid:3)(cid:96)(cid:3)
(cid:3)(cid:96)(cid:3)
(cid:17)(cid:17)(cid:17)
(cid:17)(cid:17)(cid:17)
(cid:3)(cid:85)(cid:72)(cid:87)(cid:3)(cid:32)(cid:3)(cid:68)(cid:71)(cid:71)(cid:66)(cid:71)(cid:72)(cid:89)(cid:11)(cid:82)(cid:69)(cid:77)(cid:12)(cid:30)
(cid:3)(cid:85)(cid:72)(cid:87)(cid:3)(cid:32)(cid:3)(cid:68)(cid:71)(cid:71)(cid:66)(cid:71)(cid:72)(cid:89)(cid:11)(cid:82)(cid:69)(cid:77)(cid:12)(cid:30)
(cid:3)(cid:74)(cid:82)(cid:87)(cid:82)(cid:3)(cid:82)(cid:88)(cid:87)(cid:30)
(cid:3)(cid:74)(cid:82)(cid:87)(cid:82)(cid:3)(cid:82)(cid:88)(cid:87)(cid:30)
(cid:72)(cid:85)(cid:85)(cid:82)(cid:85)(cid:29)
(cid:72)(cid:85)(cid:85)(cid:82)(cid:85)(cid:29)
(cid:3)(cid:78)(cid:73)(cid:85)(cid:72)(cid:72)(cid:11)(cid:82)(cid:69)(cid:77)(cid:12)(cid:30)(cid:3)(cid:3)
(cid:78)(cid:73)
(cid:3)(cid:78)(cid:73)(cid:85)(cid:72)(cid:72)(cid:11)(cid:82)(cid:69)(cid:77)(cid:12)(cid:30)(cid:3)(cid:3)
(cid:11) (cid:69)(cid:77)(cid:12)
(cid:82)(cid:88)(cid:87)(cid:29)
(cid:82)(cid:88)(cid:87)(cid:29)
(cid:3)(cid:85)(cid:72)(cid:87)(cid:88)(cid:85)(cid:81)(cid:81)(cid:3)(cid:85)(cid:72)(cid:87)(cid:30)
(cid:3)(cid:85)(cid:72)(cid:87)(cid:88)(cid:85)(cid:81)(cid:3)(cid:85)(cid:72)(cid:87)(cid:30)
(cid:96)
(cid:37)(cid:37)(cid:21)
(cid:37)(cid:37)(cid:22)
(cid:37)(cid:37)(cid:23)
(cid:37)(cid:37)(cid:24)
(cid:37)(cid:37)(cid:25)
Fig. 3: Control flow
annotated listing where the greyed out blocks, i.e., BB2 and BB3,
represent the error-handling basic blocks identified by our approach.
D. Identification of error-handling basic blocks
We use a technique similar to the ones proposed in the works
by Kang et al. [42] and Tian et al. [73] in order to identify
error-handling basic blocks.
1568
Figure 3 illustrates our approach, where the identified error-
handling basic blocks are greyed out. Specifically, we consider a
basic block BB to be an error-handling basic block if it satisfies
any of the following conditions:
•
•
If BB forces the function to return a constant negative
value or a C standard error code (i.e., one of the constant
symbols defined in errno.h, e.g., EINVAL) prepended
by a minus sign or NULL. For this, we do a basic reaching
definition analysis and check that all paths through the basic
block reach a function exit that returns a constant negative
value or a C standard error code. This is based on the
observation that functions use negative integers or values in
errno.h or NULL to indicate error conditions. For the
CFG of our running example in Figure 1, we detect BB2
as an error-handling basic block as it causes the function
to return a negative integer (return -1). Similarly,
in Figure 3, BB2 causes the function to return the value
of the variable ret, which is a negative integer (-1) set
in BB1. Hence, BB2 will be considered as a BBerr.
If BB ends in a direct jump (a goto) to a label that
might indicate an error condition. We maintain a set of
15 error-related labels (e.g., panic, error, fatal,
err), and we check if the BB ends with a goto
error-related-label; statement. We derived our
labels from an existing survey [14] and our experience
in working with system code. This is based on the
observation that most of the system code, especially
operating system kernels [15], use goto to handle error
conditions [6], [14]. In Figure 3, BB3 has the goto
error; statement, and since error is one of our
labels, BB3 will be considered as a BBerr. Note that,
BB3 also satisfies the first condition, similar to BB2, as
it can also cause the function to return a negative integer.
Unlike the work by Tian et al. [73], we do not consider the
post-dominators of a BBerr to be BBerrs, thus, in Figure 3, the
post-dominators of the error-handling basic blocks BB2 and BB3
(BB5 and BB6, respectively) will not be considered as BBerrs.
This conservative approach improves precision by avoiding certain
basic blocks to be wrongly identified as BBerrs (such as BB6).
However, we may miss certain error-handling basic blocks (BB5).
Note that, our approach for improving the precision by missing
potential error-handling basic blocks is safe. We refer all the
interested readers to Appendix K where we explain this in detail.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:07 UTC from IEEE Xplore.  Restrictions apply. 
1 − max len = s t r l e n ( buf ) ;
2
3
4
5
6
7
8
9
10
+ max len = s t r l e n ( buf ) + msg−>len ;
total mem = max len ;
i f ( max len = MAXMEM) {
}
return send msg ( msg , buf ) ;
Listing 3: Patch affecting the control-flow of a function.
return −EINVAL;
To check that our error-block detection approach is accurate,
we randomly sampled 100 patches, and we verified that all the error
basic blocks that we identified are indeed valid BBerrs.
As explained in Section III, SPIDER discards all changes that
happen within the identified BBerrs. In Appendix I, we run SPIDER
in “not ignoring mode” (NoEB), in which we do not ignore changes
within BBerrs and show that the detection rate does not materially
change (a 0.79% decrease; see, (Default - NoEB) in Table IV). This
result shows that discarding the changes within error-handling basic
blocks does not significantly influence the effectiveness of SPIDER.
E. Patch Analysis
In the remaining part of this section, we explain how SPIDER
identifies sps based on the general technique described in Section III.
(cid:23)
(cid:8)(cid:43)
(cid:23)
(cid:436)(cid:444)(cid:38)(cid:35)(cid:472)(cid:42)(cid:30)(cid:53)(cid:471)(cid:41)(cid:34)(cid:43)(cid:3)(cid:612)(cid:3)(cid:16)(cid:12)(cid:17)(cid:473)
(cid:434)(cid:444)(cid:42)(cid:30)(cid:53)(cid:471)(cid:41)(cid:34)(cid:43)(cid:3)(cid:611)(cid:3)(cid:48)(cid:49)(cid:47)(cid:41)(cid:34)(cid:43)(cid:472)(cid:31)(cid:50)(cid:35)(cid:473)(cid:3)(cid:606)(cid:3)(cid:42)(cid:48)(cid:36)(cid:463)(cid:613)(cid:41)(cid:34)(cid:43)(cid:445)
(cid:23)
(cid:23)
(cid:23)
(cid:437)(cid:444)(cid:49)(cid:44)(cid:49)(cid:30)(cid:41)(cid:471)(cid:42)(cid:34)(cid:42)(cid:3)(cid:611)(cid:3)(cid:16)(cid:12)(cid:17)(cid:445)(cid:3)
(cid:435)(cid:444)(cid:49)(cid:44)(cid:49)(cid:30)(cid:41)(cid:471)(cid:42)(cid:34)(cid:42)(cid:3)(cid:611)(cid:3)(cid:42)(cid:30)(cid:53)(cid:471)(cid:41)(cid:34)(cid:43)
(cid:439)(cid:444)(cid:38)(cid:35)(cid:472)(cid:49)(cid:44)(cid:49)(cid:30)(cid:41)(cid:471)(cid:42)(cid:34)(cid:42)(cid:3)(cid:613)(cid:611)(cid:3)(cid:16)(cid:4)(cid:27)(cid:16)(cid:8)(cid:16)(cid:473)
(cid:9)
(cid:23)
(cid:433)(cid:432)(cid:444)(cid:47)(cid:34)(cid:49)(cid:50)(cid:47)(cid:43)(cid:3)(cid:48)(cid:34)(cid:43)(cid:33)(cid:471)(cid:42)(cid:48)(cid:36)(cid:472)(cid:42)(cid:48)(cid:36)(cid:443)(cid:3)(cid:31)(cid:50)(cid:35)(cid:473)
(cid:440)(cid:444)(cid:47)(cid:34)(cid:49)(cid:50)(cid:47)(cid:43)(cid:3)(cid:463)(cid:8)(cid:12)(cid:17)(cid:25)(cid:4)(cid:15)(cid:445)
Program-Dependency Graph of the patched function in Listing 3.
Fig. 4:
Given the P DG, we remove all the data-dependency and control-
dependency cycles in the P DG by removing all the back edges [23].
Given a statement t, we consider an edge to be a back edge if it is
originated from a statement that is dominated by t in the P DG. We
provide more details in Appendix F, and argue that this technique
is safe, if the patch does not contain any directly affected statements
within a loop. However, if a patch directly modifies any statements
within the loop this may not be safe, as proving the condition C2
becomes undecidable [46]. To be safe, a patch that directly modifies
a statement within a loop will not be considered as an sp.
Using the diff-annotated CFG of the patched function, first we
find all the directly affected statements. As explained in Section III,
these are the statements that are directly modified by the patch.
Second, given the P DG, we follow the edges from the nodes
corresponding to the directly affected statements to identify all
the statements that are reachable, which represent the indirectly
affected statements. The union of the directly and indirectly
affected statements is our total affected statements. As mentioned
in Section III, we ignore the affected statements that belong to the
error-handling basic blocks (BBerrs).
1569
Verifying non-increasing input space (C1): To verify condition
C1, we first check if any of the affected statements is a conditional
statement. By the definition of PDG (Section III-A), these are the
nodes that have an outgoing control dependency (solid) edge.
If there are affected conditional statements, then we find all the
valid exit points, i.e., the valid return statements (or VEP). For
each statement in the VEP, we identify the conditional statements
that are part of the path constraint by following the solid edges
backward until En.
Given a path constraint, we convert each of the conditional
in the path constraint into a symbolic expression. As explained
in Section III-B4, we start by initializing each of the variables
with unique symbolic values in the original and patched function.
Therefore, if a variable is not modified by the patch, it will have
the same symbolic value in both the original and patched functions.
Conversion to symbolic expression: For a statement to be
converted into symbolic expression, its data dependencies need to
be first converted to symbolic expressions as well.
Therefore, given a statement s, we first check if it has
any incoming data dependency edges, if this is the case, we
go to the parent and try to repeat this process backward in a
breadth-first manner until we find all the nodes with no incoming
data dependency edges,
the
data-dependency paths are complete (Section III-A).
the nodes from which all
i.e.,
We call the nodes with no incoming data dependency edges
as free nodes. We first convert each of the free nodes into symbolic
values by following the corresponding instruction semantics (as
shown in Table I).
We then forward-propagate the values from the free nodes to
the statements along the data dependency edges until we reach s.
To interpret function calls, we create a new symbolic value based
on the hash of the function name and the symbolic values of its argu-
ments. For instance, for the call strlen(buf), we create a sym-
bolic value with name equal to hash(strlen, sym(buf)),
where sym(buf) is the symbolic value of the variable buf.
When multiple definitions of a variable reach an instruction, we
use conditional symbolic variables based on the path constraint of
the stricter path. For a variable x, if two definitions d1 and d2 from
statements v1 and v2, respectively, reach a statement v3. Then the
symbolic value of x at v3 would be:
(cid:4)
v3(x)=
Ite(P C(v1),d1,d2)
Ite(P C(v2),d2,d1)
if P C(v1)→P C(v2)
otherwise
(5)
Where Ite(c,a,b) represents an if-then-else symbolic
value, which dictates to use the value a if c is satisfiable else b, P C
is the path constraint, and, from the rules of implication, P C(c1)→
P C(c2) indicates that P C(c1) is a stricter condition than P C(c2).
The Equation 5 correctly handles multiple definitions. We refer all
the interested readers to Appendix H, where we explain this in detail.
Consider the statement at line 7 in the PDG of Figure 4.
Here, multiple definitions of the variable total_mem reach
line 7. i.e., from line 3 and 5. By using the initial symbolic values,
for strlen(buf) = sym1, msg->len = sym2, MIN =
sym3, and MAXMEM = sym4. The definitions of total_mem
at line 3 and 5 are sym1 + sym2 and sym3, respectively. The
path constraint for line 3 and 5 are P C(3) = (En==T) and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:07 UTC from IEEE Xplore.  Restrictions apply. 
P C(5) = ((En==T)∧ ((sym1 + sym2) =
sym4)), for brevity we did not expand P C(5), but the actual sym-
bolic expression would be only in terms of initial symbolic values.
Following the steps described above, we convert the path
constraints of each of the valid returns in the patched function to
symbolic expressions. Then we obtain Equation 3 by the disjunction
of the symbolic expressions. Finally, we convert the disjuncted
symbolic expression into a Z3 [34] expression, i.e., vinputs(fp)
(see Section III-B3).
We follow the same steps in the original function to compute
vinputs(f), then, using the Z3 tool once again, we verify the
implication vinputs(fp)→vinputs(f), thus proving that the patch
satisfies condition C1.
Verifying output equivalence (C2): Given the list of affected
non-control-flow statements, as explained in Section III-B4, we
only consider the statements that update the non-local state of the
function, i.e., the function output.
Consider the patch in Listing 1, where, although all the
statements are affected by the patch, the only statements of interest
are at line 17 and 19, as they update the heap and return value.
As explained in Section III-B4 and shown in Table I, we
compute the symbolic expressions along each complete data
dependency path along with the corresponding path constraints.
Finally, we convert the symbolic expressions into Z3 expression
and verify Equation 4 using Z3. This verifies that the function
affected by the patch satisfies condition C2. Note that the patch
showed in Listing 3 changes only local variables and thus the output
of the function remains the same as that of the original function for
all valid inputs, thus satisfying condition C2.
We follow the above steps for each of the functions modified
by the patch. We consider a patch to be a safe patch, only when
C1 and C2 can be proved by following the steps described above.
Handling library functions: As explained in Section III, we
consider patches that have only locally analyzable statements,
i.e., patches that do not directly affect function calls and pointers.
However, we noticed that there are certain library functions, whose
effects can be easily summarized. Such as, memset. There are
other print and logging library functions, like printf and
printk, that do not affect the output of the patched function.
To handle this, we maintain a few categories of commonly used,
well-known library functions (see Appendix G), whose effects can
be either summarized or ignored.
V. ASSUMPTIONS
Our implementation as specified in Section IV-E tries to
guarantee that a patch is a safe patch. However, a careful reader
might have noticed that there are certain assumptions made by
our implementation. In this section, we explicitly describe the
assumptions in our implementation:
Non-alias dependencies: As explained in Section IV-E, we use
a PDG based on variables to compute all the affected statements.
However, this ignores the data dependencies that could happen
through pointers [19]. Handling this requires precise pointer analysis,
which in turn require access to the whole program violating our
requirement R1.
Pure functions: We consider all functions to be pure functions [75],
i.e., the output of a function only depends on the input arguments.
In other words, multiple calls to a function with the same arguments
results in the same output. Furthermore, reordering function
calls without any change to the arguments will also be treated as
equivalent. That is, f1(arg1); f2(arg2); is equivalent to
f2(arg2); f1(arg1);. However, there could exist impure
functions, whose output could also depend on the global state of the
program. Soundly detecting whether a function is impure requires
analyzing the function and its callees, which is not scalable and
requires resolving function pointers.
Conditional compilation: The preprocessor conditional code di-
rectives (e.g., #ifdef, #ifndef, #else, etc.) allow different
pieces of code to be be compiled depending on the values of certain
preprocessor variables. We use the unifdef tool to handle these con-
ditional compilation directives. unifdef attempts to obtain maximal
code by enabling all preprocessor variables. However, for #ifdef-
#else constructs, to be consistent, it has to select the code either
under the if or the else directive. This could result in certain
statements in the patch (which are controlled by preprocessor vari-
ables) to be invisible to SPIDER, and, in turn, this could lead to false
positives. Handling conditional code compilation precisely requires
analyzing the patch under all possible values of preprocessor vari-
ables and their combinations. This is not scalable for large codebases
like the Linux kernel. To handle this, we allow users to enable the no