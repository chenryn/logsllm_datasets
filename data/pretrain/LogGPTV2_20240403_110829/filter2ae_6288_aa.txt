工程领域从来没有黑科技，而密码学不仅仅是工程。
### 一、何为哈希？
密码哈希是一类数学函数，可以在有限合理的时间内将任意长度的消息压缩为固定长度的二进制串，其输出值为成为哈希值或者散列值。哈希在密码学中扮演着十分重要的角色，用于实现数据完整性验证以及认证工作。公式表示为：`h=H(m)`
    函数说明： 
    m：任意长度消息（不同算法实现，长度限制不同，有的哈希函数（SHA-3）不限制消息长度，有的限制（SHA-2），但即使有限制其长度也非常大，可以认为是任意长度消息） 
    H：哈希函数 
    h：固定长度的哈希值
将哈希函数用于工程项目是有其原因的。
  * 哈希函数定义——密码哈希函数是一类数学函数，可以在有限合理的时间内，将任意长度的消息压缩为固定长度的二进制串，其输出值称为哈希值，也称散列值。
  * 碰撞定义——是指两个不同的消息在同一哈希函数作用下，具有相同的哈希值。
  * 哈希函数的安全性——是指在现有的计算资源（包括时间、空间、资金等）下，找到一个碰撞是不可行的。
  * 抗强碰撞性——找任意一对不同的消息M1 、M2，使H(M1)=H(M2)在计算上是不可行的。
  * 雪崩效应——当一个输入位发生变化时，输出位将有一半会发生变化。
以上的性质中，我们应该重点关注他的 **抗碰撞性** 这个特点，因为之后的相关内容均与其有关。
下面，我们就来解释下为什么哈希函数有以上特性（我们以经典的MD5算法来说明）。
    首先对明文进行补位处理。
        （1）将512位的明文分组划分为16个子明文分组，每个子明文分组为32位。
        （2）申请4个32位的链接变量，记为A、B、C、D。
        （3）子明文分组与链接变量进行第1轮运算。
        （4）子明文分组与链接变量进行第2轮运算。
        （5）子明文分组与链接变量进行第3轮运算。
        （6）子明文分组与链接变量进行第4轮运算。
        （7）链接变量与初始链接变量进行求和运算。
        （8）链接变量作为下一个明文分组的输入重复进行以上操作。
        （9）最后，4个链接变量里面的数据就是MD5摘要。
    输出128位固定长度的摘要。
因为哈希函数均为多轮处理，所以他的混淆扩散性很好。由于轮数很多以及强大的密码学设计，所以当原文中有一点点内容有所改变都会引起结果的巨大变化。除此之外，由于结果共有128位，所以哈希值的可能性共有2^128这么多，所以重复性也是非常低的（结果空间很大）。其安全性是指在现有的计算资源（时间、空间、资金等）下，找到一个碰撞是不可行的。
详细的MD5分析过程见：
[hash算法原理之md5过程](https://blog.csdn.net/xuejianbest/article/details/80391237)  
[MD5哈希算法学习](https://blog.csdn.net/u014634338/article/details/46350229)
### 二、区块链中的哈希算法
区块链通过哈希算法对一个交易区块中的交易信息进行加密，并把信息压缩成由一串数字和字母组成的散列字符串。区块链的哈希值能够唯一而准确地标识一个区块，区块链中任意节点通过简单的哈希计算都可以获得这个区块的哈希值，计算出的哈希值没有变化也就意味着区块中的信息没有被篡改。
对于区块链来说，哈希函数在其项目中有以下优点：
  * collision-free 即冲突概率小:  
`x != y => hash(x) != hash(y)`
  * 能够隐藏原始信息：  
例如区块链中各个节点之间对交易的验证只需要验证交易的信息熵，而不需要对原始信息进行比对，节点间不需要传输交易的原始数据只传输交易的哈希即可，常见算法有SHA系列和MD5等算法
在比特币系统中使用了两个密码学哈希函数，一个是SHA256，另一个是PIPEMD160.后者用于生成比特币地址，而前者的用处更为丰富。
#### 1 PIPEMD160算法
    RIPEMD (RACE原始完整性校验讯息摘要)是一种加密哈希函数，由 鲁汶大学 Hans Dobbertin,Antoon Bosselaers 和 Bart Prenee组成的COSIC 研究小组发布于1996年。 RIPEMD是以MD4为基础原则所设计的 ，而且其表现与更有名的SHA-1类似.
此算法主要用于比特币的地址方面。在我之前的文章中对此也有所提及[区块链安全的那些事—匿名性以及隐私性](https://xz.aliyun.com/t/2874#toc-2)。对于地址的生成，具体的步骤如下：
  * 1 随机选取一个32字节的数作私钥
  * 2 通过椭圆曲线算法（ECDSA-secp256k1）由私钥推出公钥（共65字节， 1字节 0x04, 32字节为x坐标，32字节为y坐标）
  * 3 将公钥通过 SHA-256 哈希算法处理，得到32字节的哈希值
  * 4 **对第3步得到的哈希值，通过PIPEMD-160算法得到20字节的哈希值**
  * 5 把由版本号+第4步得到的哈希值组成的21字节数据进行双SHA-256哈希运算，得到的哈希值的前4字节做校验和，放置到21字节的末尾
  * 对25字节数据进行Base58编码，得到的就是比特币地址
上述内容中的第四步我们就用到了`PIPEMD-160算法`，该算法经历了`补位、补长度、轮函数计算`最终输出了20个字节的固定长度数据。由哈希函数难重复的特性（为了避免两个节点的地址出现相同的情况），我们在地址生成过程中调用了该函数，并得到了唯一的节点地址。
详细算法过程请参考：[加密散列-PIPEMD160](https://shadowdragons.github.io/2018/04/05/ripemd160/)
#### 2 SHA256算法
SHA256属于SHA（Secure Hash
Algorithm，安全哈希算法）家族一员，是SHA-2算法簇中的一类，对于小于264位的消息，产生一个256位的消息摘要。
SHA256是构造区块链所用的主要密码哈希函数。区块头部信息以及交易数据均是用此哈希去计算，以保证数据的完整性。同时在比特币中，基于寻找给定前缀的SHA256哈希值理念，专家设计了工作量证明的共识机制。
根据上述图片所示，SHA-256其计算过程分为两个阶段：消息的预处理和主循环。在消息的预处理阶段，主要完成消息的填充和扩展填充，将所有输入的原始消息转换为n个512比特的消息块，之后对每个消息块利用SHA256压缩函数进行处理。这个计算流程就是一个迭代计算的过程，当最后1个消息块（第n块）处理完毕后，最终输出值就是原始消息的SHA256值。
我将详细的算法流程放在了下面：
在比特币系统中，SHA256最重要的是被用来完成POW（工作量证明）。按照我之前写过的激励机制[区块链的那些事—论激励机制](https://xz.aliyun.com/t/2904)，Pow要求节点数和算力大致匹配，因为需要通过CPU的计算能力来进行投票、然而随着人们对SHA256的计算由CPU逐渐升级为GPU搭配FPGA直至ASIC矿机，这使得节点数和Pow算力逐渐失配。
对于Pow机制的引入，我们用下面的一个通俗的例子进行讲解：
    场景一、A和B在篮球场
    A：B，你是不是口渴了，你要不要去买水喝，顺便帮我买一瓶哈。
    B：呵呵，你的小心思我还不知道，你自己也口渴了吧，你去，我不去。
    A：哎哎，咱们不扯这些没用的，来抛硬币，好不好，正面你去，反面我去，公平吧，如何？
    B：好吧。
    ………
    场景二、A与B即时聊天中
    B：A，今天来我家玩，来的路上，有一家披萨店，很好吃，顺便带一点哈。
    A：哦，要不你来我家玩吧，你顺便带上披萨。
    B：A，你竟然都这么说了，看来只能抛硬币解决了。
    A：丫的，这个怎么抛，我怎么知道你有没有搞鬼。
    B：嗯，那到也是。
    1.考虑对结果加密
    B：我心中想一个数，假设为N，然后N在乘以一个数P，得到结果M。N是我的密钥，我把结果M告诉你。你来猜N是奇数还是偶数，猜中了，算你赢。