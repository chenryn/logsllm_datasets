i
f
i
c
e
p
s
t
f
i
h
S
c
i
g
o
l
c
i
f
i
c
e
p
s
D
N
A
c
i
g
o
l
c
i
f
i
c
e
p
s
R
O
X
c
i
g
o
l
c
i
f
i
c
e
p
s
e
r
a
p
m
o
C
4 bits
4 bits
Bitwise
4 bits
OR
MUX
jr?
M
U
X
alert
0
load/
store?
store path
36 bits
36 bits
Data pointer 
taintedness
detector
alert
MUX
0
y
r
o
m
e
M
a
t
a
D
Jump pointer
taintedness detector
4 bits
32 bits
36 bits
36 bits
36 bits
36 bits
32 bits
32 bits
A
L
U
M
U
X
36 bits
e
l
i
F
r
e
t
s
i
g
e
R
8-bit byte
Taintedness
bit
36 bits
36 bits
36 bits
36 bits
36 bits
36 bits
36 bits
36 bits
M
U
X
M
U
X
36 bits
load path
Figure 3: Architecture Design of Pointer Taintedness Tracking and Detection 
ALU 
registers.  The  propagation 
instructions  are  responsible  for  propagating 
taintedness  between 
is 
implemented  by  the  ALU  taintedness  tracking  logic 
(shown  as  a  shaded  area  in  Figure  3).  With  the  few 
exceptions  noted  below,  the  ALU  taintedness  works  as 
follows:  for  operations  with  two  source  operands,  the 
taintedness  bits  of  a  resultant  register  are  obtained  by  the 
bitwise  OR  of  the  corresponding  taintedness  bits  in  the 
source  operand  registers.  For  example,  after  executing 
ADD R1,R2,R3, R1 is tainted if and only if R2 is tainted or 
R3 is tainted.  
instructions  cause 
taintedness 
The 
following  exceptional  cases 
require  special 
handling.  (1)  Shift 
to 
propagate  within  the  operand  register.  If  a  byte  in  the 
operand  register  is  tainted,  then  the  taintedness  bit  of  its 
adjacent byte along the direction of shifting is set to 1. (2) 
The taintedness bits of any byte AND-ed with an untainted 
zero  are  cleared,  because  the  resulting  byte  value  is 
constant  0,  regardless  of  user  input.  (3)  The  compiler 
idiom XOR R1,R2,R2 is frequently used to assign constant 
0  to  the  target  register  R1.  The  taintedness  bits  in  R1  are 
cleared  as  a  result.  This  idea  is  borrowed  from  previous 
techniques [7] and [18]. (4) Compare instructions are used 
for  data  range  checking.  If  a  tainted  register  R1  is 
compared  with  some  untainted  data  in R2, the taintedness 
bits  in  R1  are  cleared  after the operation. The rationale is 
that  programmers  often  write  input  validation  code  to 
check  certain  safety  properties.  The  validation  code  is  in 
the 
instructions.  For  application 
compatibility, any data that undergoes validation is trusted 
form  of  compare 
after  such  an  operation.  This  could  potentially  lead  to 
missed  detection  (a.k.a.  false  negatives).  For  example,  in 
situations  in  which  the  program  does  check  user  input 
values  but  the  check  algorithm  is  flawed.  The  false 
negative scenarios are discussed in Section 5.3. 
Table 1 summarizes the taintedness tracking logic. The 
ALU  taintedness  tracking  logic  consists  of  a  multiplexer 
(MUX)  selecting  from  four  sources  of  input  based  on  the 
opcode of the current instruction. These multiplexer inputs 
correspond  to  the  five  types  of  ALU  instructions  listed 
above. 
Table 1: Taintedness Propagation by ALU Instructions 
ALU Instruction Type 
ALU  instructions  except  shift,
compare,  and  AND,  e.g.,  op
R1,R2,R3
Shift instruction 
AND instruction 
XOR R1,R2,R2 
Compare instruction  
Taintedness Propagation 
Tainedness of R1 = 
       (Taintedness of R2) or 
       (Taintedness of R3). 
If  a  byte  in  the  operand  is  tainted, 
the  taintedness  bit  of  its  adjacent 
byte along the direction of shifting is 
set to 1. 
Untaint  each  byte  AND-ed  with  an 
untainted zero. 
Taintedness of R1 = 0000. 
Untaint every byte in the operands of 
the compare instruction. 
4.3. Attack Detection 
In  general,  whenever  a  tainted  data  value  is  used  for 
memory  access,  an  alert  should  be  raised.  The  proposed 
detection mechanism is described using the instruction set 
architecture  of  the  SimpleScalar  processor  simulator.  In 
SimpleScalar, only the load/store instructions and the jump 
instruction  JR  (i.e.,  jump  to  the  address  in  a  register)  can 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:19:55 UTC from IEEE Xplore.  Restrictions apply. 
dereference  a  pointer,  which  is  stored  in  a  register.  The 
jump pointer taintedness detector is placed after the ID/EX
(instruction  decode/execution)  stage  when  the  jump  target 
register value is available. The four taintedness bits in the 
target register are OR-ed. If any byte in the word is tainted, 
the output of the OR-gate is 1 and the instruction is marked 
as malicious. The detector of tainted pointers for load/store 
instructions is placed after the EX/MEM (execute/memory) 
stage; here the four taintedness bits of the address word are 
inputted into an OR-gate, and the instruction is marked as 
malicious  if  the output of the gate is 1 and the instruction 
opcode  is  load  or  store.  The  actual  security  exception  is 
raised  in  the  pipeline’s  retirement  stage.  Retirement  of  an 
instruction marked as malicious causes the pipeline to raise 
a  security  exception.  The  operating  system  can  then 
terminate the process and stop the ongoing intrusion. 
4.4.  Taintedness Initialization 
Any  data  received  from  an  external  device  that  can 
potentially  be  controlled  by  a  malicious  user  are 
considered  tainted,  e.g.,  input  coming  from  network,  file 
system,  keyboard,  command 
line  arguments,  and 
environmental variables. All such data are passed from an 
external  source  to  the  program  buffer  through  operating 
system  calls.  The  system  call 
implementations  are 
modified to mark every byte in the buffer as tainted when it 
is  returning  from  kernel  space  to  user  space.  This  can  be 
implemented  by  adding  every  word  in  the  buffer  to  a 
special register RT. The value of RT is always 0, but every 
taintedness  bit  of  RT  is  1.  In  the  current  implementation, 
we  modify  the  system  call  module  of  the  SimpleScalar
simulator for this purpose. In particular, all data delivered 
to the application through the SYS_READ (local I/O) and 
SYS_RECV  (network  I/O)  are  marked  as  tainted.  These 
two system calls are invoked by most input functions in C 
library, such as scanf(), fread(), recv(), and recvfrom().
In  summary,  three  subsystems  in  the  SimpleScalar
simulator are modified to implement the algorithm: (1) The 
memory subsystem is extended with the taintedness bits in 
the  memory,  the  cache,  and  the  register  file.  (2)  The 
original  system  call  implementation  is  modified  so  that 
SYS_READ  and  SYS_RECV  mark  every  byte  in  the 
receiving  buffer  as  tainted.  (3)  The  instruction  pipeline  is 
extended 
calculation, 
propagation, and detection. 
taintedness 
implement 
to 
5. Evaluation 
The proposed architecture has the following properties: 
(1) high coverage in detecting attacks tampering with both 
control  and  non-control  data; 
to 
applications,  i.e.,  the  detection  does  not  rely  on  any 
internal  knowledge  on  the  applications,  e.g.,  buffer  sizes, 
variable  upper  bounds,  or  program  semantics;  (3)  no 
known  false  positives;  and  (4)  very  small  space  overhead 
and performance overhead. These properties are evaluated 
transparency 
(2) 
by  running  synthetic  programs,  real  network  applications, 
and SPEC benchmarks on the proposed architecture. 
5.1.  Security Protection Coverage 
The  pointer  taintedness  detection  technique  provides  a 
significant improvement in security coverage by protecting 
applications from both control data attacks and non-control 
data attacks. The security coverage of existing control-flow 
integrity  based  protections  was  evaluated  against  control 
data attacks only. This section shows that non-control data 
attacks  do  exist  and  can  cause  the  same  level  of  security 
compromise 
in  many  real  applications.  For  a  fair 
comparison,  we  employ  several  applications  that  were 
previously used to assess the existing techniques. 
5.1.1.