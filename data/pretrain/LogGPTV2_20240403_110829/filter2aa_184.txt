KCon
KCon
探索虚拟化技术在漏洞检测中的应用
By:仙果
PART 01
自我介绍
PART 02
困境的“城内和城外”
PART 03
VT VS Exploit 
PART 04
攻防技术对抗
PART 05
结语
目录
CONTENTS
自我介绍
01
高级安全工程师
仙果
安全研究员
准爸爸
我
是
谁
？
看雪学院
02 困境的“城内和城外”
困境
针对性的检测漏洞攻击
时间和效率的考量
人工分析的难度较大
人才培养周期长
攻防对抗成本显著增加
虚拟化技术应用于漏洞攻防对抗
精确对抗漏洞攻击
节省人力成本
虚拟化（Virtualization）
更多的时间在技术研究上
Virtualzation
Hardware Enabled Virtualzation
隐藏了系统、应用程序员和终
端用户赖以交互的计算机资源
物理性的一面，把单一物理资
源转换为多个逻辑资源，反之
亦可。
硬件层面上，CPU对虚拟化技术提
供直接支持，提高虚拟效率，降低
开发难度；硬件上实现内存地址甚
至是I/O设备的映射，支持二次寻
址。
VM_0
VM_1
VM_2
…… 
客户机
客户机
客户机
总线控制器
物理 I/O 设
备
页表
访问 I/O 设
备
CPU
Hypervisor
物理设备层
HEV/Hypervisor
操作系统
应用程序
操作系统
应用程序
操作系统
应用程序
虚拟机-1
虚拟机-2
虚拟机-3
Intel VT
AMD SVM
为每个虚拟机提供虚拟处理器
VMM层可以控制处理器资源，物理内存，管理中
断和I/O操作
各虚拟机采用相同接口处理虚拟机设备
每个虚拟机可以独立运行，相互独立
VMM层对虚拟机完全透明
客户机模式
Hypervisor 与Guest 直接快速切换
中断Guest 中特定的指令或事件
DMA保护
虚拟中断
嵌套页实现地址翻译
TLB(Translation Lookaside Buffer)减少性能下降
Intel VT---EPT
intel CPU在处理器级别加入对内存虚拟化的支持，支持
两级地址翻译
一个逻辑CPU处于非根模式下运行客户机代码时，使用
的地址是客户机虚拟地址，而访问这个虚拟地址时，同
样会发生地址的转换，这里的转换还没有设计到VMM
层，和正常的系统一样，依然是采用CR3作为基址，利
用客户机页表进行地址转换，只是到这里虽然已经转换
成物理地址，是客户机物理地址，不等同于宿主机的物
理地址，所以并不能直接访问，需要借助于第二次的转
换，也就是EPT的转换。
真实物理地址
虚拟物理地址
虚拟线性地址
gPT
CR3
EPTP
gPT
EPT
VT VS Exploit 
03
硬件各个单元合并虚拟之后，使
用KVM 硬件虚拟化框架，进行
硬件单元的管理和调度。
KVM使用 Intel VT 技术来提升
虚拟化处理性能，在 KVM 上层
通过嵌套的 nested VT技术，使
检测框架运行在 QEMU 虚拟机
中。
利用VT技术，从而实现传统技术
无 法 实 现 的 技 术 。 例 如 MSR
HOOK，EPT hook，特权指令
监控等。
VT 检测框架
计算单元
硬件设备层
Hypervisor VT 
（KVM+QEMU）
Guest OS
应用程序 A
VT
Win7
应用程序 B
VT
XP
应用程序 C
VT
Win10
存储单元
显示单元
指令追踪通过在 HOST 层针对
CPU指令注入MTF陷阱，当
CPU 汇编指令执行完毕后，触
发 VM Exit 事件，陷入 HOST 
处理流程中。
进而能够记录具体的指令流程和
当前CPU的运行环境，从而能够
进行命中规则的指令流记录。
当记录完成之后，就可以进行规
则上的匹配，规则匹配完整之后，
通过 VMResume 指令产生 VM 
Entry 事件交回到 Guest进行执
行下一条指令。
依次进行循环处理。
指令追踪流程图
MOV$DWORD$PTR[REG],REG
ADD$REG,XXXX
MOV$REG,RET
SUB$REG,XXX
CALL$DWORD$PTR[REG]
注入$MFT$陷阱
启动追踪
记录指令
VM$Entry
规则匹配
CPU
VM$Exit
Guest
Host
指令追踪 VS ROP
返回地址
栈帧
TEB
PEB
Module
……+
返回地址
栈帧
TEB
PEB
Module
……+
规则匹配流程
Reg+In+Moudle++
Reg+Target+In+moudle
Source+
指令追踪通过在 HOST 层针对
CPU指令注入MTF陷阱，当
CPU 汇编指令执行完毕后，触
发 VM Exit 事件，陷入 HOST 
处理流程中。
进而能够记录具体的指令流程
和当前CPU的运行环境，从而
能够进行命中规则的指令流记
录。
当记录完成之后，就可以进行
规则上的匹配，规则匹配完整
之后，通过 VMResume 指令
产生 VM Entry 事件交回到
Guest进行执行下一条指令。
依次进行循环处理。
VT VS 提权
MOV$DWORD$PTR[REG],REG
ADD$REG,XXXX
MOV$REG,RET
SUB$REG,XXX
CALL$DWORD$PTR[REG]
注入$MFT$陷阱
启动追踪
记录指令
VM$Entry
规则匹配
CPU
VM$Exit
Guest
Host
VT VS 提权
VT VS 提权
eProcess
CR3
eProcess
CR3
eProcess
CR3
进程*A
进程*B
进程*C
SwapContext
SwapContext
Mov CR3,XXX
HOST
KPCR
ePorcess
PID&Token
是否系统进程
是
放行
校验 Token
内核提权
操作系统中每个进程都有
属于自身权限的Token，
漏洞需要提权则要获取到
NT system 权限的token，
进行覆盖。
当进行CR3 的赋值时，
Guest 就会陷入到 Host 
中，进而可以进行PID和
Token的判断。
VT VS Rookit
Kdi.sys
Win32k.sys
Gdi.sys
NTKRNELOS.SYS
…… 
Guest
 Mem 
layout
E+R+W
E+R+W
E+R+W
E+R+W
R+W 
HOST
 EPT 
…… 
R+W 
GPA->HPA
VT VS Rookit
HOST
校验内存地址
E+R+W
E+R+W
E+R+W
E+R+W
R+W 
HOST
 EPT 
R+W 
尝试执行
Page Guard
放行
Rootkit
VT VS Ring0->Ring3
HOST
Ring 3
启用SMAP&SMEP
Pop rax
Ring0
Mov [0x04000000],rax
Call  [0x04000000]
Push rax
关闭 SMAP&SMEP
注入 MTF 陷阱
记录指令
开启SMAP&SMEP
VT VS 内核信息泄漏
PID,Module name
监视器
Shadow CR3
NO E
Pop rdx
Mov rax,rdx
Push rax
Pop rax
Module Page
HOST
设置可执行
注入 MTF 陷阱
记录指令
设置不可执行
攻防技术对抗
04
无痕HOOK
内存隐藏
反虚拟机
检测
攻防技术对抗
结语
05
Thank you!
路漫漫其修远兮
吾将上下而求索
Thank you!
Thank you!