title:Low-rate TCP-targeted denial of service attacks: the shrew vs. the
mice and elephants
author:Aleksandar Kuzmanovic and
Edward W. Knightly
Low-Rate TCP-Targeted Denial of Service Attacks
(The Shrew vs. the Mice and Elephants)  y
Aleksandar Kuzmanovic and Edward W. Knightly
ECE/CS Departments
Rice University
Houston, TX 77005, USA
fakuzma,PI:EMAIL
ABSTRACT
Denial of Service attacks are presenting an increasing threat to the
global inter-networking infrastructure. While TCP’s congestion
control algorithm is highly robust to diverse network conditions,
its implicit assumption of end-system cooperation results in a well-
known vulnerability to attack by high-rate non-responsive ﬂows. In
this paper, we investigate a class of low-rate denial of service at-
tacks which, unlike high-rate attacks, are difﬁcult for routers and
counter-DoS mechanisms to detect. Using a combination of ana-
lytical modeling, simulations, and Internet experiments, we show
that maliciously chosen low-rate DoS trafﬁc patterns that exploit
TCP’s retransmission time-out mechanism can throttle TCP ﬂows
to a small fraction of their ideal rate while eluding detection. More-
over, as such attacks exploit protocol homogeneity, we study fun-
damental limits of the ability of a class of randomized time-out
mechanisms to thwart such low-rate DoS attacks.
Categories and Subject Descriptors
C.2.0 [Security and Protection]: Denial of Service;
C.2.2 [Computer-Communication Networks]: Network Proto-
cols
General Terms
Algorithms, Performance, Security
Keywords
Denial of Service, TCP, retransmission timeout
This research is supported by NSF ITR Grant ANI-0085842, NSF
Special Projects Grant ANI-0099148, a Sloan Fellowship, and by
HP Laboratories.
yA shrew is a small but aggressive mammal that ferociously attacks
and kills much larger animals with a venomous bite.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’03, August 25–29, 2003, Karlsruhe, Germany.
Copyright 2003 ACM 1-58113-735-4/03/0008 ...$5.00.
1.
INTRODUCTION
Denial of Service (DoS) attacks consume resources in networks,
server clusters, or end hosts, with the malicious objective of pre-
venting or severely degrading service to legitimate users. Resources
that are typically consumed in such attacks include network band-
width, server or router CPU cycles, server interrupt processing ca-
pacity, and speciﬁc protocol data structures. Example DoS attacks
include TCP SYN attacks that consume protocol data structures on
the server operating system; ICMP directed broadcasts that direct
a broadcast address to send a ﬂood of ICMP replies to a target host
thereby overwhelming it; and DNS ﬂood attacks that use speciﬁc
weaknesses in DNS protocols to generate high volumes of trafﬁc
directed at a targeted victim.
Common to the above attacks is a large number of compromised
machines or agents involved in the attack and a “sledge-hammer”
approach of high-rate transmission of packets towards the attacked
node. While potentially quite harmful, the high-rate nature of such
attacks presents a statistical anomaly to network monitors such that
the attack can potentially be detected, the attacker identiﬁed, and
the effects of the attack mitigated (see for example, [6, 22, 30]).
In this paper, we study low-rate DoS attacks, which we term
“shrew attacks,” that attempt to deny bandwidth to TCP ﬂows while
sending at sufﬁciently low average rate to elude detection by counter-
DoS mechanisms.
TCP congestion control operates on two timescales. On smaller
timescales of round trip times (RTT), typically 10’s to 100’s of
msec, TCP performs additive-increase multiplicative-decrease (AIMD)
control with the objective of having each ﬂow transmit at the fair
rate of its bottleneck link. At times of severe congestion in which
multiple losses occur, TCP operates on longer timescales of Re-
transmission Time Out (RTO).1 In an attempt to avoid congestion
collapse, ﬂows reduce their congestion window to one packet and
wait for a period of RTO after which the packet is resent. Upon fur-
ther loss, RTO doubles with each subsequent timeout. If a packet
is successfully received, TCP re-enters AIMD via slow start.
To explore low-rate DoS, we take a frequency-domain perspec-
tive and consider periodic on-off “square-wave” shrew attacks that
consist of short, maliciously-chosen-duration bursts that repeat with
a ﬁxed, maliciously chosen, slow-timescale frequency. Consider-
ing ﬁrst a single TCP ﬂow, if the total trafﬁc (DoS and TCP trafﬁc)
during an RTT-timescale burst is sufﬁcient to induce enough packet
losses, the TCP ﬂow will enter a timeout and attempt to send a new
packet RTO seconds later. If the period of the DoS ﬂow approxi-
mates the RTO of the TCP ﬂow, the TCP ﬂow will continually incur
loss as it tries to exit the timeout state, fail to exit timeout, and ob-
tain near zero throughput. Moreover, if the DoS period is near but
1recommended minimum value 1 sec [1]
75outside the RTO range, signiﬁcant, but not complete throughput
degradation will occur. Hence the foundation of the shrew attack is
a null frequency at the relatively slow timescale of approximately
RTO enabling a low average rate attack that is difﬁcult to detect.
In a simpliﬁed model with heterogeneous-RTT aggregated ﬂows
sharing a bottleneck link, we derive an expression for the through-
put of the attacked ﬂows as a function of the timescale of the DoS
ﬂow, and hence of the DoS ﬂow’s average rate. Furthermore, we
derive the “optimal” DoS trafﬁc pattern (a two-level periodic square
wave) that minimizes its average rate for a given level of TCP
throughput for the victim, including zero throughput.
Next, we use ns-2 simulations to explore the impact of aggrega-
tion and heterogeneity on the effectiveness of the shrew attack. We
show that even under aggregate ﬂows with heterogeneous RTT’s,
heterogeneous ﬁle sizes, different TCP variants (New Reno, SACK,
etc.), and different buffer management schemes (drop tail, RED,
etc.), similar behavior occurs albeit with different severity for dif-
ferent ﬂows and scenarios. The reason for this is that once the ﬁrst
brief outage occurs, all ﬂows will simultaneously timeout. If their
RTOs are nearly identical, they synchronize to the attacker’s pe-
riod and will enter a cycle identical to the single-ﬂow case, even
with heterogeneous RTTs and aggregation. However, with highly
variable RTTs, the success of the shrew DoS attack is weighted
such that small RTT ﬂows will degrade far worse than large RTT
ﬂows, so that the attack has the effect of a high-RTT-pass ﬁlter.
We show that in all such cases, detection mechanisms for throttling
non-responsive ﬂows such as RED-PD are not able to throttle the
DoS attacker.
We then perform a set of Internet experiments in both a local and
wide area environment. While necessarily small scale experiments
(given that the expected outcome is to reduce TCP throughput to
near zero), the experiments validate the basic ﬁndings and show
that even a remote attacker (across a WAN) can dramatically reduce
TCP throughput. For example, in the WAN experiments, a remote
909 kb/sec average-rate attack consisting of 100 ms bursts at the
victim’s RTO timescale reduced the victim’s throughput from 9.8
Mb/sec to 1.2 Mb/sec.
Finally, we explore potential solutions to low rate DoS attacks.
While it may appear attractive to remove the RTO mechanism all
together or choose very small RTO values, we do not pursue this av-
enue as timeout mechanisms are fundamentally required to achieve
high performance during periods of heavy congestion [1]. Instead,
we consider a class of randomization techniques in which ﬂows
randomly select a value of minRTO such that they have random
null frequencies. We use a combination of analytical modeling and
simulation to show that such strategies can only distort and slightly
mitigate TCP’s frequency response to the shrew attack. Moreover,
we devise an optimal DoS attack given that ﬂows are randomizing
their RTOs and show that such an attack is still quite severe.
In summary, vulnerability to low-rate DoS attacks is not a conse-
quence of poor or easily ﬁxed TCP design, as TCP necessarily re-
quires congestion control mechanisms at both fast (RTT) and slow
(RTO) timescales to achieve high performance and robustness to
diverse network conditions. Consequently, it appears that such at-
tacks can only be mitigated and not prevented through randomiza-
tion. Development of prevention mechanisms that detect malicious
low-rate ﬂows remains an important area for future research.
2. TCP’S TIMEOUT MECHANISM
Here, we present background on TCP’s retransmission timeout
(RTO) mechanism [28]. TCP Reno detects loss via either timeout
from non-receipt of ACKs, or by receipt of a triple-duplicate ACK.
If loss occurs and less than three duplicate ACKs are received, TCP
waits for a period of retransmission timeout to expire, reduces its
congestion window to one packet and resends the packet.2
Selection of the timeout value requires a balance among two ex-
tremes: if set too low, spurious retransmissions will occur when
packets are incorrectly assumed lost when in fact the data or ACKs
are merely delayed. Similarly, if set too high, ﬂows will wait un-
necessarily long to infer and recover from congestion.
To address the former factor, Allman and Paxson experimentally
showed that TCP achieves near-maximal throughput if there exists
a lower bound for RTO of one second [1]. While potentially con-
servative for small-RTT ﬂows, the study found that all ﬂows should
have a timeout value of at least 1 second in order to ensure that
congestion is cleared, thereby achieving the best performance.
To address the latter factor, a TCP sender maintains two state
variables, SRTT (smoothed round-trip time) and RTTVAR (round-
trip time variation). According to [28], the rules governing the
computation of SRTT, RTTVAR, and RTO are as follows. Until
a RTT measurement has been made for a packet sent between the
sender and receiver, the sender sets RTO to three seconds. When
the ﬁrst RTT measurement R0 is made, the host sets SRTT = R0,
RTTVAR = R0=2 and RTO = SRTT  axG; 4RTTVAR,
where G denotes the clock granularity (typically (cid:20) 100 ms). When
a subsequent RTT measurement R0 is made, a host sets
RTTVAR = 1   (cid:12) RTTVAR  (cid:12) jSRTT   R0j
and
SRTT = 1   (cid:11)SRTT  (cid:11) R0
where (cid:11) = 1=8 and (cid:12) = 1=4, as recommended in [15].
Thus, combining the two parts, a TCP sender sets its value of
RTO according to
RTO = axminRTO; SRTT  axG; 4 RTTVAR:
(1)
Re-
transmission
Timer
2 sec
2 sec - RTT
1 sec
1 sec - RTT
time
0
1 sec
1sec +2 RTT
Figure 1: Behavior of the TCP retransmission timer
Finally, we illustrate RTO management via a retransmission-
timer timeline in Figure 1. Assume that a packet with sequence
number  is sent by a TCP sender at reference time  = 0, and that
a retransmission timer of 1 second is initiated upon its transmis-
sion. If packet  is lost and fewer than three duplicate ACKs are
2Conditions under which TCP enters retransmission timeout vary
slightly according to TCP version. We discuss this issue in Sec-
tion 5.
received by the sender, the ﬂow “times out” when the timer expires
at  = 1 sec. At this moment, the sender enters the exponential
backoff phase: it reduces the congestion window to one, doubles
the RTO value to 2 seconds, retransmits the un-ACKed packet with
sequence number , and resets the retransmission timer with this
new RTO value.
If the packet is lost again (not shown in Figure 1), exponential
backoff continues as the sender waits for the 2 sec-long retransmis-
sion timer to expire. At  = 3 sec, the sender doubles the RTO
value to 4 seconds and repeats the process.
Alternately, if packet  is successfully retransmitted at time  =
1 sec as illustrated in Figure 1, its ACK will arrive to the sender at
time t=1+RTT. At this time, the TCP sender exits the exponential
backoff phase and enters slow start, doubling the window size to
two, transmitting two new packets   1 and   2, and reseting the
retransmission timer with the current RTO value of 2 sec. If the two
packets are not lost, they are acknowledged at time t= 1+2*RTT,
and SRTT, RTTVAR and RTO are recomputed as described above.
Provided that minRTO > SRTT  axG; 4 RTTVAR, RTO is
again set to 1 sec. Thus, in this scenario in which timeouts occur
but exponential backoff does not, the value of RTO deviates by no
more than RTT from minRTO for  > minRTO  2 RTT.
3. DOS ORIGINS AND MODELING
In this section, we describe how an attacker can exploit TCP’s
timeout mechanism to perform a DoS attack. Next, we provide a
scenario and a system model of such an attack. Finally, we develop
a simple model for aggregate TCP throughput as a function of the
DoS trafﬁc parameters.
3.1 Origins
The above timeout mechanism, while essential for robust con-
gestion control, provides an opportunity for low-rate DoS attacks
that exploit the slow-timescale dynamics of retransmission timers.
In particular, an attacker can provoke a TCP ﬂow to repeatedly en-
ter a retransmission timeout state by sending high-rate, but short-
duration bursts having RTT-scale burst length, and repeating peri-
odically at slower RTO timescales. The victim will be throttled to
near-zero throughput while the attacker will have low average rate
making it difﬁcult for counter-DoS mechanisms to detect.
We refer to the short durations of the attacker’s loss-inducing
bursts as outages, and present a simple but illustrative model relat-
ing the outage timescale (and hence attacker’s average rate) to the
victim’s throughput as follows.
First, consider a single TCP ﬂow and a single DoS stream. As-
sume that an attacker creates an initial outage at time 0 via a short-
duration high-rate burst. As shown in Figure 1, the TCP sender will
wait for a retransmission timer of 1 sec to expire and will then dou-
ble its RTO. If the attacker creates a second outage between time 1
and 1+2RTT, it will force TCP to wait another 2 sec. By creating
similar outages at times 3, 7, 15,    , an attacker could deny service
to the TCP ﬂow while transmitting at extremely low average rate.
While potentially effective for a single ﬂow, a DoS attack on TCP
aggregates in which ﬂows continually arrive and depart requires pe-
riodic (vs. exponentially spaced) outages at the minRTO timescale.
Moreover, if all ﬂows have an identical minRTO parameter as rec-
ommended in RFC 2988 [28], the TCP ﬂows can be forced into
continual timeouts if an attacker creates periodic outages.
Thus, we consider “square wave” shrew DoS attacks as shown in
Figure 3 in which the attacker transmits bursts of duration   and rate
R in a deterministic on-off pattern that has period T . As explored
below, a successful shrew attack will have rate R large enough to
induce loss (i.e., R aggregated with existing trafﬁc must exceed
length of the peak
l
DoS
rate
magnitude of
the peak R
period of the attack
T
Figure 3: Square-wave DoS stream
the link capacity), duration   of scale RTT (long enough to induce
timeout but short enough to avoid detection), and period T of scale
RTO (chosen such that when ﬂows attempt to exit timeout, they are
faced with another loss).
3.2 Model
Consider a scenario of an attack shown in Figure 2(a). It consists
of a single bottleneck queue driven by  long-lived TCP ﬂows with
heterogeneous RTTs and a single DoS ﬂow. Denote RTTi as the
roundtrip time of the i-th TCP ﬂow, i = 1;    ; . The DoS ﬂow
is a periodic square-wave DoS stream shown in Figure 3. The fol-
lowing result relates the throughput of the TCP ﬂows to the period
of the attack.
DoS TCP Throughput Result. Consider a periodic DoS attack
with period T . If the outage duration satisﬁes
(C1)
 0 (cid:21) RT Ti
and the minimum RTO satisﬁes
(C2) minRTO > SRTTi  4  RTTVARi
for all i = 1;    ; , then the normalized throughput of the aggre-
gate TCP ﬂows is approximately
(cid:26)T  =
d iRT 
T
e T   iRT 
T
:
(2)
This result is obtained as follows. As shown in Figure 2(b), the
periodic  -length bursts create short  0-length outages having high
packet loss.3 If  0 reaches the TCP ﬂows’ RTT timescales, i.e.,  0 (cid:21)
RT Ti, for all i = 1;    ; , then the congestion caused by the DoS
burst lasts sufﬁciently long to force all TCP ﬂows to simultaneously
enter timeout. Moreover, if minRTO > SRTTi  4 RTTVARi, for
i = 1;    ; , all TCP ﬂows will have identical values of RTO and
will thus timeout after minRTO seconds, which is the ideal moment
for an attacker to create a new outage. Thus, in this case, despite
their heterogeneous round-trip times, all TCP ﬂows are forced to
“synchronize” to the attacker and enter timeout at (nearly) the same
time, and attempt to recover at (nearly) the same time. Thus, when
exposed to outages with period T , Equation (2) follows. Note also
that in Equation (2) we do not model throughput losses due to the
slow-start phase, but simply assume that TCP ﬂows utilize all avail-
able bandwidth after exiting the timeout phase.
Moreover, in the model, the aggregate TCP trafﬁc is assumed
to utilize the full link bandwidth after the end of each retrans-
mission timeout and the beginning of the following outage. Ob-
serve that if the period T is chosen such that T (cid:21) 1  2 RT Ti,
all TCP ﬂows will continually enter a retransmission timeout of
1 sec duration. Thus, because Equation (2) assumes that RTO =
minRTO for T > minRTO, while this is not the case in the period
minRTO; minRTO  2 RTT, Equation (2) behaves as an upper
bound in practice. In other words, periodic DoS streams are not
3The relationship between   and  0 is explored in Section 4.
TCP  1
.
.
.
TCP n
DoS
C
TCP  1
.
.
.
TCP n
"outage"
~
C
~
C
Figure 2: DoS scenario and system model
utilizing TCP’s exponential backoff mechanism but rather exploit
repeated timeouts.
Next, we consider ﬂows that do not satisfy conditions (C1) or
(C2).
DoS TCP Flow-Filtering Result. Consider a periodic DoS at-
tack with period T . If the outage duration  0 (cid:21) RT Ti and minRTO >
SRTTi  4  RTTVARi for i = 1;    ; k whereas  0 < RT Tj or
minRTO (cid:20) SRTTj  4  RTTVARj for j = k  1;    ; , then
Equation (2) holds for ﬂows 1;    ; k.
This result, shown similarly to that above, states that Equation
(2) holds for any TCP sub-aggregate for which conditions (C1) and
(C2) hold. In other words, if a shrew DoS attack is launched on a
group of ﬂows such that only a subset satisﬁes the two conditions,
that subset will obtain degraded throughput according to Equation
(2), whereas the remaining ﬂows will not. We refer to this as “ﬂow
ﬁltering” in that such an attack will deny service to a subset of ﬂows
while leaving the remainder unaffected, or even obtaining higher
throughput. We explore this issue in detail in Section 5.
3.3 Example
Here, we present a baseline set of experiments to explore TCP’s
“frequency response” to shrew attacks. We ﬁrst consider the ana-
lytical model and the scenario depicted in Figure 2 in which condi-
tions (C1) and (C2) are satisﬁed and minRTO = 1 sec. The curve
labeled “model” in Figure 4 depicts (cid:26) vs. T as given by Equation
(2). Throughput is normalized to the link capacity, which under
high aggregation, is also the throughput that the TCP ﬂows would