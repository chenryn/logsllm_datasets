the introspection on the A57 core than the A53 core, since A57
core is more powerful than the A53 core.
TABLE I: Secure World Introspection Time
Core-Time
A53-Average
A53-Max
A53-Min
A57-Average
A57-Max
A57-Min
Hash 1-Byte
1.07 × 10−8 s
1.14 × 10−8 s
9.23 × 10−9 s
6.71 × 10−9 s
7.50 × 10−9 s
6.67 × 10−9 s
Snapshot 1-byte
1.08 × 10−8 s
1.57 × 10−8 s
9.24 × 10−9 s
6.75 × 10−9 s
7.83 × 10−9 s
6.67 × 10−9 s
2) Attack Time Delay: We evaluate normal world attack
time delay in two aspects, where Tns recover is introduced
by the the kernel-level attack module, and Tns threshold is
introduced by the prober module. We repeat the measurement
of the recovery time Tns recover 50 times on one A53 core and
one A57 core. For the A53 core, the average recovering time is
5.80 × 10−3 s. For the A57 core, the average recovering time
is 4.96 × 10−3 s.
Then we present the prober’s time delay Tns threshold when
KProber is probing all cores simultaneously. As the prober
execution involves all available cores, we present the prober’s
time delay Tns threshold regardless of core types. To observe
the variation of the threshold, we execute the KProber with
different probing periods. For each probing period, we choose
the largest difference calculated by the Time Comparer as
the threshold, and we repeat
the measurement 50 times.
We present the average threshold, maximum threshold, and
minimum threshold of the 50 rounds for each time period in
Table II.
TABLE II: Probing Threshold on Multi-Core
Min
Average
Probing Period
8 s
16 s
30 s
120 s
300 s
2.61 × 10−4 s
3.54 × 10−4 s
4.21 × 10−4 s
5.26 × 10−4 s
6.61 × 10−4 s
Max
7.76 × 10−4 s
1.38 × 10−3 s
8.99 × 10−4 s
9.49 × 10−4 s
1.77 × 10−3 s
1.07 × 10−4 s
1.31 × 10−4 s
2.59 × 10−4 s
3.18 × 10−4 s
4.18 × 10−4 s
Based on the experiment results, we ﬁnd that the average
threshold becomes larger along with a longer probing period
and the maximum threshold is around 1.8 × 10−3 s. To further
understand the variation of the threshold, we investigate the
reported time of each thread and identify that,
in some
rare cases, Time Comparer on core i may get the time x
of the core x with an abnormal large delay, which is up
to 1.3 × 10−3 s. This cross-core reading delay leads to the
large threshold. Meanwhile, a longer probing period increases
the occurrence of those rare cases, so the average threshold
increases too.
Fig. 4: KProber Probing Threshold Stability
To present the stability of KProber, we show the variation
of the thresholds with different probing periods in Figure 4.
We can see that even though the KProber’s average probing
threshold increases with the probing period, the upper whiskers
of the thresholds only go up slightly, and only few extreme
large outliers are introduced for probing period 300 s, which
go over 1 × 10−3 s.
Finally, we also observe that setting introspection with a
ﬁxed CPU afﬁnity is easier to be probed than using all cores
randomly. As we mentioned in Section IV-A1, we also evaluate
the case to use KProber for ﬁguring out one single core’s
availability. We conduct the experiment with the same setting
as presented above. According to our experiment result, the
average thresholds to probe the single core only equal to ∼
1/4 of the presented threshold for probing all cores, for all
ﬁve probing periods we evaluated. This means the more cores
KProber needs to probe, the larger probing threshold it suffers.
294
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
C. Race Condition Analysis
Based on the experiment results, we have following obser-
vations on the race condition between the normal world and
the secure world:
1) The switch delays Ts switch for the A53 core and A57
core are similar.
2) The secure world can use more powerful CPU core (i.e.,
A57 core) for introspection to achieve a shorter Ts 1byte.
3) The secure world is easier to be probed if it’s CPU
afﬁnity is predictable to the normal world.
4) The timing bottleneck of TZ-Evader is the time period
for recovering its attacking trace Tns recover.
According to Equation 1, we know the attack can ﬁnish its
cleaning task after the secure world inspects S memory bytes,
where:
Tns sched + Tns threshold + Tns recover − Ts switch
S >
Ts 1byte
(2)
Now we consider the worst case for the TZ-Evader:
the
introspection starts on one A57 core while the TZ-Evader
uses on one A53 core to remove its attacking trace. In
Section IV-B1, we have Ts switch ≤ 3.60 × 10−6 s. Also,
the secure world can inspect the kernel data with the max-
imum speed Ts 1byte = 6.67 × 10−9 s. The attacker recovers
its attacking trace as the lowest efﬁciency Tns recover =
6.13 × 10−3 s, and Tns sched = 2 × 10−4 s. In Section IV-B2,
we have for the worst case of TZ-Evader, Tns threshold ≤
1.80 × 10−3 s. By applying the experimental data into the
above Equation 2, we have S ≤ 1218351 bytes. Sup-
posing the attack bytes appears randomly in the kernel and
the introspection checks the entire OS kernel whose size
is 11916240 bytes, nearly 1 − 1218351
11916240 ≈ 90% of the
kernel space is not protected by existing TrustZone-based
asynchronous introspection. Therefore, as long as both kernel
attack module and prober module do not locate in the 10%
scanned area, the system suffers TZ-Evader attack.
V. SATIN: SECURE ASYNCHRONOUS INTROSPECTION
We propose a secure and trustworthy TrustZone-based asyn-
chronous introspection mechanism named SATIN that can
practically inspect rich OS and effectively defeat TZ-Evader
attacks. We ﬁrst discuss two major challenges on developing
the secure asynchronous introspection and then present the
detailed design of the proposed mechanism. Figure 5 shows
the architecture of SATIN, which is implemented in the
secure world. It consists of two major components, where
the integrity checking module performs the integrity checking
on rich OS using a divide-and-conquer method to control the
checking time of each round and the self activation module is
responsible for waking up the secure world with the help of
a secure timer and ensuring that the entrance cannot be either
predicted or quickly probed by the normal world.
A. Asynchronous Introspection Challenges
We identify two main challenges on developing secure
asynchronous introspection mechanisms against TZ-Evader.
S-EL1
Self
Activation
Module
Integrity
Checking
Module
4. Restore
S Context
and
Switch to S-EL1
5. Conﬁgure
secure timer
for next awake
Secure
Timer
1. Raise
TImer
Interrupt
Interrupt
Controller
EL1
EL2
EL3
Normal
World
OS Kernel
3. Save NS Context
Secure
Monitor
2. Distribute
Interrupt
Fig. 5: SATIN Architecture
1) Challenge 1: Performance vs. Detection Accuracy:
On single core processors, the TrustZone-based introspection
introduces unacceptable overhead as the introspection has to
suspend the rich OS during the security checking process. The
pausing issue leads to poor user experience. For example, a
music song played in the normal world becomes incoherent
when the CPU enters the secure world. Similarly, on the multi-
core processors, we cannot frequently freeze all cores even for
a small period of time. For instance, Azab et al. [8] propose an
introspection mechanism that requires to freeze all CPU cores
on the server every 8 or 16 seconds.It becomes one of the
biggest obstacles for asynchronous introspection mechanisms
to be widely adopted and deployed, though a better detection
accuracy can be achieved by freezing all cores. Meanwhile,
even a multi-core platform can execute the introspection and
other tasks simultaneously, the execution of the secure world
still possesses some shared resources such as the CPU core.
It is not well studied how much overhead is introduced by
running the introspection in parallel to the rich OS.
2) Challenge 2: Evasion Attack: It is a challenge to defend
against evasion attack when designing asynchronous introspec-
tion mechanisms [20]. If the attacker can escape ahead of
the introspection by predicting or probing the execution of
the asynchronous introspection, then the introspection result
cannot be trusted [43], [45]. On single core processors, random
checking is an effective scheme to defeat evasion attacks.
However, on multi-core ARM processors, TZ-Evader can even
escape from the random checking on any random core. It
is critical
to develop a secure asynchronous introspection
mechanism to defeat the new evasion attacks.
B. Integrity Checking Module
To improve the detection rate, we propose to reduce the
introspection time for each round by dividing the entire OS
kernel into smaller areas and taking turns to check one area in
each round. Therefore, it can guarantee to ﬁnish one round of
security checking right before the malicious normal world can
probe it but have not chance to remove any attacking traces.
The integrity checking module prepares the hash value of each
small area’s benign status during booting stage. Then for each
295
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
round of wake-up, it scans one small area and compares the
hash value with the pre-calculated benign one. If the integrity
checking module ﬁnds any abnormal small area, it can raise an
alarm to the server side or the device user. To ensure that the
malware cannot remove its traces before we ﬁnish checking on
one small area, the size of each small area should be smaller
than (Tns delay + Tns recover − Ts switch)/Ts 1byte bytes. We
develop a pseudo-random method to select the next small area
m−1
for introspection. Suppose the set setarea =
i=0 area i
contains all the areas of the OS kernel, and each area i
satisﬁes the above size condition. When the secure world starts
one round of the introspection, the module randomly picks
one area area x from setarea and then applies setarea =
setarea − area x. Ifset area == N U LL, then SATIN resets
setarea = {area 0, ..., area (m − 1)}.
Also,
the integrity checking module needs to guarantee
its execution is not interrupted by other non-secure parties.
According to the latest ARM interrupt routing model [3],
the normal world interrupt signal
is possible to interrupt
the execution of secure world. To prevent the normal world
from using interrupts to interfere in the introspection process,
SATIN needs to block all interrupts during each round of the
introspection. We propose to deploy the integrity checking
module into the secure timer interrupt handler, and then set
EL3 to not trap the normal world interrupt by conﬁguring
SCR EL3.IRQ = 0. With this setting, even if the normal
world interrupt signal can arrives the secure world,
their
priorities are lower than the integrity checking module.
C. Self Activation Module
The self activation module is designed to make sure the
secure world can invoke the integrity checking module anytime
without the help of the normal world. It relies on a secure timer
that the normal world cannot access. Each TrustZone-enabled
core has an individual secure timer that can only be read or
written with the secure world privilege. During the booting
time, the self activation module is invoked once on each core
to write the next awake time into the secure timer register.
After the trusted booting process, when the timer condition
meets, the timer raises an interrupt for the secure world and
the secure monitor switches the core from the normal world
to the secure world to handle this interrupt. By conﬁguring
the secure timer, we can activate the secure world without
involving the normal world. Thus, we can prevent the normal
world from disturbing the invocation of introspection. When
one core enters the secure world via the secure timer interrupt,
SATIN ﬁrst performs the introspection on one small area and
then sets the awake time for the next round of introspection.
The self activation module decides the next awake time by
time x, which is set to a base period time tp (e.g., 8s, 16s,
etc.) plus a random deviation td (e.g., a random time from
−tp to tp). By applying the random deviation with the next
awake time, the interval between two consecutive rounds of
introspection is among [0, 2∗ tp], which means at any moment
the introspection could start to scan and the attacker has to
keep probing all cores. In addition, the random deviation can
Secure Timer Interrupt
Core_i
Kernel
Area
Set
area_0 
(checked)
...
Integrity
Checking
Module
Self