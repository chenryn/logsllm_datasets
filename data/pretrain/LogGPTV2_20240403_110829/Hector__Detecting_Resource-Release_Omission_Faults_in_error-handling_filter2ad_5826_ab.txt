reiserfs warning(sb, . . .);
brelse(bhjh);
goto free and return;
1
2 if (!bhjh) {
3
4
5 }
6
7 if (is reiserfs jr(rs)
8
9
10
11
12 }
13
14 . . .
15 if (check advise trans params(sb, journal) != 0)
16
17
18 . . .
19
20 . . .
21
journal−>j trans max = le32 to cpu(. . .);
free and return: . . .
brelse(bhjh);
goto free and return;
journal−>j default max commit age = journal−>j max commit age;
Omission fault
protocols), and fs (ﬁle systems) directories of Linux 2.6.34,5
but we also consider a selection of other widely used systems
software, summarized in Table I.
TABLE I.
CONSIDERED SOFTWARE
Project
Linux drivers
Linux snd/net/fs
Wine
PostgreSQL
Apache httpd
Python
Python
PHP
Both considered versions of Python are in current use.
(Lines of code)
(4.6MLoC)
(1.5MLoC)
(2.1MLoC)
(0.6MLoC)
(0.1MLoC)
(0.4MLoC)
(0.3MLoC)
(0.6MLoC)
Version
2.6.34
2.6.34
1.5.0
9.1.3
2.4.1
2.7.3
3.2.3
5.4.0
Description
Linux device drivers
sound,network and ﬁle system
Windows emulator
Database
HTTP server
Python runtime
Python runtime
PHP runtime
Amount of code containing error-handling code. We
deﬁne a block of error-handling code as the code executed
from when a test for an error is found to be true up to the
point of returning from the containing function. The block
may include gotos. For example, in Figure 2, a block of
error-handling code starts on line 6 and includes the code
on lines 18-20 at the end of the function. Fig. 4 shows the
percentage of code found within functions that contain zero,
one, or more blocks of error-handling code. Depending on the
project, 28%-69% of the code is within functions that contain
at least one block of error-handling code and 16%-43% of
the code is within functions that contain multiple blocks of
error-handling code (shown below the horizontal dashed lines).
The latter functions are of particular interest, because in such
functions, it is possible to identify resource-release omission
faults by comparing the various blocks of error-handling code
to each other and determining whether they are consistent. Our
examples in Section II-A come from functions containing 7-14
blocks of error-handling code. The fault in the third example
was introduced when a function was reorganized, and new
error-handling code was introduced, showing the difﬁculty of
maintaining such complex code.
Kinds of errors encountered. The impact of faults in error
handling code is determined in part by how often the handled
5Linux 2.6.34 was released in 2010. We focus on a version from a few years
ago to prevent our contributions to the Linux kernel from the early stages of
our development of Hector from interfering with our results.
Fig. 4. Percentage of code found within functions that have 0 or more blocks
of error-handling code
Fig. 5. Distribution of integer error-code return values
Fig. 6. Support and conﬁdence of the identiﬁed protocols
errors occur. It is difﬁcult to automatically determine the source
of all the possible errors that may be encountered. Nevertheless,
48% of the blocks of error-handling code in Linux drivers,
sound, net, and fs return integer error codes, understood
by e.g. the user-level standard library function perror, to
indicate the error cause. We rely on these error codes to obtain
an overview of the reasons for the errors encountered in Linux.
Fig. 5 shows the percentage of the considered blocks of
error-handling code that involve the various constants used in
each of the Linux drivers, sound, net, and fs directories,
focusing on the top 10 such constants used in each case. The
errors associated with these values differ in their source and
likelihood. EINVAL is the most common value throughout and
indicates that the function has received invalid arguments. These
arguments may depend on values received from applications or
hardware, allowing invalid values from the user level or from
hardware malfunctions to trigger a fault. ENOMEM, indicating
insufﬁcient memory, is the next most common value in most
cases. Running out of kernel memory is unlikely, except in
the case of low-memory embedded systems or in the case of
a system that is already under a memory-leak based attack,
and thus faults in such blocks of error-handling code are
unlikely to be triggered in an otherwise well-programmed
system. For drivers, the second most common constant is
ENODEV, which is also common in sound. ENODEV indicates
the unavailability of a device, as may be triggered by defective
hardware. Another common constant is EFAULT, indicating a
bad address. EFAULT is commonly used by functions copying
data to or from user space, at an address coming from user
level. A malicious application can easily construct an invalid
address, making the correctness of the associated error-handling
code critical.
Applicability of speciﬁcation mining. Speciﬁcation min-
ing approaches detect sets or sequences of functions that are
commonly used together and that are expected to represent
the required protocol for carrying out a particular task. Such
approaches typically suffer from a high rate of false positives
[15], and thus use some form of pruning and ranking to make
the most likely speciﬁcations the most apparent to the user.
Common metrics include support and conﬁdence, or variants
thereof [10], [11], [12], [13], [14], such as the z-ranking used
by Engler et al. [7]. Support is the number of times the protocol
is followed across the code base, while conﬁdence is the
percentage of occurrences of a portion of the protocol that
satisfy the complete protocol. The speciﬁcation-mining tool
PR-Miner [9], for example, which has been applied to Linux
code, has been evaluated with thresholds causing it to prune
fault reports where the associated protocol does not have support
of at least 15 and conﬁdence of at least 90%.
Using the heuristics that we will present in Section IV for
identifying related resource acquisition and release functions,
we identify 2747 potential protocols in Linux, and 1051 in
the other considered software. Fig. 6 shows the support and
conﬁdence of each, as determined by an intraprocedural analysis.
Each × or circle in this ﬁgure represents one or more protocols
with the same support and conﬁdence values. For Linux, only
3% of the protocols have both support of 15 or more and
conﬁdence of 90% or more. 88% have support below 15 and
58% have conﬁdence below 90%. For the other software, only
3% of the protocols have both support of 15 or more and
conﬁdence of 90% or more. 81% have support below 15 and
68% have conﬁdence below 90%. The distributions are thus
quite similar at both the kernel and user level. Faults in the
usage of almost all of these protocols would be overlooked in a
speciﬁcation mining approach using these thresholds. Lowering
the thresholds could signiﬁcantly increase the number of false
positives. There is thus a need for a fault-detection approach
that can ﬁnd faults in the usage of protocols that have lower
support and conﬁdence.
III. OUR ALGORITHM
The goal of our algorithm is to identify inconsistencies in
the releasing of resources in a function’s error-handling code.
Inconsistencies may be intended, e.g., if the resource has not
yet been acquired or has been released in another way, or
may represent a fault. The main challenge in designing the
algorithm is to distinguish between these cases. Inconsistencies
identiﬁed as unintended are reported as faults. The algorithm is
microscopic in that it is primarily based on intraprocedural
0102030405060708090100 % of Lines of Code (LOC)DriversSoundNetFSPython(2.7)Python(3.2.3)ApacheWinePHPPGSQL0EHC12-56-10005101520253035 % of EHCdriverssoundnetfsEINVALENODEVENOMEMEFAULTEIOEBUSYENXIOEPERMEAGAINERESTARTSYSOthersEINVALENOMEMEFAULTENODEVEBUSYEIOENXIOENOENTEAGAINEPERMOthersEINVALENOMEMEFAULTEOPNOTSUPPENOBUFSENODEVEMSGSIZEENOENTEPERMEBUSYOthersEINVALENOMEMEIOENOENTEFAULTEPERMENOSPCEOPNOTSUPPEROFSENAMETOOLONGOthers0102030405060708090100 Confidence (%)110100100010000 SupportProtocols with high support and confidence in LinuxOther protocols in Linux0102030405060708090100 Confidence (%)1101001000 SupportProtocols with high support and confidence in other softwareOther protocols in other softwareinformation. It is made resistant to false positives in the
information about resource acquisition and release operations by
following a strategy of correlating information about acquisition
operations to information about release operations, within each
analyzed function.
The input to our algorithm is a function deﬁnition where
some statements have been already annotated as being resource
acquisitions or releases. These annotations are performed by
a preprocessing phase, which is orthogonal to our algorithm.
The preprocessing phase must also annotate each acquisition or
release with an expression representing the affected resource,
and annotate some basic blocks as being the start of a block
of error-handling code. A possible implementation of this
preprocessing is presented in Section IV-A, but it can be done
in any manner.
Our algorithm then works on the (intraprocedural) control-
ﬂow graph (CFG) of the provided function deﬁnition, annotated
with the results of the preprocessing phase. As a running
example, we use the code previously shown in Fig. 1, focusing
on the resource pdev. Fig. 7(a) shows a portion of this code’s
CFG, starting from line 4, where pdev is ﬁrst initialized. Nodes
are numbered according to the corresponding line numbers in
Fig. 1. A branch to the right enters error-handling code.
Given the annotated CFG, the ﬁrst step of the algorithm
connects resource releases in error-handling code to the resource
acquisitions that can reach them. This is done by what
amounts to an intraprocedural live-variable analysis, in which
acquisitions are considered to be deﬁnitions and releases in
error-handling code are considered to be the only uses. In our
example (Fig. 7(a)), the release of pdev on line 18 (solid node),
which is part of error-handling code, is found to be live at the
acquisition of pdev on line 4 (shaded node), by following in
reverse the dashed edges.
Next, for each acquisition that is found to have at least
one “live” release, the algorithm walks forwards through the
function’s CFG, collecting each possible subset of the CFG
nodes that represents a path from the acquisition to any block
of error-handling code. For our example, starting from node 4,
there are four such paths, shown in Fig. 7(b-e). The resulting
set of paths is then divided into a set of exemplars, which
for some resource contain both an acquisition of the resource
and a release of the resource in error-handling code, and a
set of candidate faults, which contain an acquisition but no
corresponding release in error-handling code (annotated releases
prior to the error-handling code are possible). Exemplars are
truncated just before the block of error-handling code. In our
example, the paths in Fig. 7(c and e) represent exemplars,
because they contain the release operation, while the paths
in Fig. 7(b and d) represent candidate faults. In Fig. 7, the
exemplar and candidate fault in Fig. 7(c and d), respectively,
are marked explicitly. We refer to the resource acquired at
the beginning of any such exemplar or candidate fault as the
associated resource.
The algorithm then compares each candidate fault to each
exemplar, starting with the exemplar closest to it in the code,
as indicated by the line number, to determine whether the
exemplar provides evidence that the candidate fault should
release its associated resource in its error-handling code. In
our example, we consider the exemplar in Fig. 7(c) and the
4.
6.
7.
10.
11.
13.
14.
pdev = ...
err = ...
err = ...
err = ...
.5
.8
.12
.15
pdev = ...
4.
.5
20 . exit unregister:
platform device unregister(...)
22.
exit:
return...
(b)
4.
6.
7.
pdev = ...
err = ...
Exemplar
.8
18 .
exit device put:
platform device put(pdev)
20. exit unregister:
platform device unregister(...)
18 .
exit device put:
platform device put(pdev)
20. exit unregister:
platform device unregister(...)
22. exit:
return...
(a)
4.
6.
7.
10.
11.
pdev = ...
. err = ...
err = ...
.12
22 . exit:
return...
(d)
22. exit:
return...
(c)
pdev = ...
err = ...
err = ...
err = ...
4.
6.
7.
10.
11.
13.
14.
.15
Candidate fault
18 .
exit device put:
platform device put(pdev)
20. exit unregister:
platform device unregister(...)
22. exit:
return...
(e)
Fig. 7. CFG and paths for Fig. 1
candidate fault in Fig. 7(d). A fault report is generated for the
candidate fault if the following conditions all hold:
1)
2)
3)
The candidate fault does not return the resource.
The complete set of resource acquisitions reaching
the exemplar and the candidate fault both acquire
the associated resource in the same way. These
acquisitions may, but need not, occur at the same
line of code.
Any operation in the candidate fault prior to the error-
handling code that is annotated as a release of the
associated resource also occurs in the exemplar.
These conditions are motivated as follows. If the candidate fault
returns the resource (condition 1), then the resource should not
be released, and indeed the block at the end of the candidate
fault is probably not really error-handling code. Condition 2
results from the observation that we only have evidence that the
resources associated with the candidate fault and the exemplar
should be released in the same way if they were acquired in
the same way. Finally, if a supposed release operation found
in the candidate fault also appears in the exemplar, where it
is followed by another release of the same resource in error-
handling code, then the supposed release operation does not
really perform a release (condition 3). The set of generated