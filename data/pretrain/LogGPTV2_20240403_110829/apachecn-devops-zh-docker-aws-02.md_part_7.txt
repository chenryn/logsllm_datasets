version: '2.4'
volumes:
  public:
    driver: local
services:
  test:
    ...
    ...
  release:
    ...
    ...
  app:
    extends:
      service: release
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - public:/public
    healthcheck:
      test: curl -fs localhost:8000
      interval: 3s
      retries: 10
    ports:
      - 8000:8000
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
      - --check-static=/public
 - --die-on-term
 - --processes=4
 - --threads=2
  acceptance:
    ...
    ...
  migrate:
    ...
    ...
  db:
    ...
    ...
```
在前面的例子中，我还添加了`--processes`和`--threads`标志，它们支持并发处理。您可以在[上阅读这些和更多配置选项。](https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html#adding-concurrency-and-monitoring)
# 使用动态端口映射
目前，发布阶段工作流使用静态端口映射运行应用，其中应用服务容器上的端口 8000 映射到 Docker Engine 上的端口`8000`。虽然这在本地运行时通常可以正常工作(除非您有其他一些使用端口 8000 的应用)，但在远程连续交付构建服务上运行发布阶段工作流时，这可能会导致问题，因为该服务可能为许多不同的应用运行多个构建。
更好的方法是使用动态端口映射，将`app`服务容器端口映射到 Docker Engine 上当前未使用的动态端口。该端口是从所谓的*短暂端口范围*中选取的，这是一个为应用动态使用而保留的端口范围。
要配置动态端口映射，您需要更改`app`服务的`docker-compose.yml`文件中的端口映射:
```
version: '2.4'
volumes:
  public:
    driver: local
services:
  test:
    ...
    ...
  release:
    ...
    ...
  app:
    extends:
      service: release
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - public:/public
    healthcheck:
      test: curl -fs localhost:8000
      interval: 3s
      retries: 10
    ports:
 - 8000
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
      - --check-static=/public
      - --die-on-term
      - --processes=4
      - --threads=2
  acceptance:
    ...
    ...
  migrate:
    ...
    ...
  db:
    ...
    ...
```
在前面的示例中，我们简单地将端口映射从`8000:8000`的静态映射更改为`8000`，从而实现了动态端口映射。有了这种配置，一个问题是您事先不知道要分配什么端口，但是，您可以使用`docker-compose port  `命令来确定给定容器端口上给定服务的当前动态端口映射:
```
> docker-compose port app 8000
0.0.0.0:32768
```
当然，我们可以将它合并到我们的自动化工作流中，而不是每次都手动键入这个命令:
```
.PHONY: test release clean
test:
    docker-compose build --pull release
    docker-compose build
    docker-compose run test
release:
    docker-compose up --exit-code-from migrate migrate
    docker-compose run app python3 manage.py collectstatic --no-input
    docker-compose up --exit-code-from acceptance acceptance
 @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g) clean:
    docker-compose down -v
    docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS
```
在前面的例子中，我们使用命令替换来获取当前的端口映射，并将输出传递到一个`sed`表达式，该表达式将`0.0.0.0`替换为`localhost`。请注意，因为 GNU Make 将美元符号解释为 Make 变量引用，所以如果您想要由将要执行的 shell 命令计算单个美元符号，则需要对美元符号(`$$`)进行双转义。
有了这些，现在`make release`命令的输出将完成以下内容:
```
> make release
...
...
docker-compose run app bats acceptance.bats
Starting todobackend_db_1 ... done
1..4
ok 1 todobackend root
ok 2 todo items returns empty list
ok 3 create todo item
ok 4 delete todo item
App running at http://localhost:32771
```
# 添加版本目标
对应用进行版本控制是至关重要的，尤其是在构建 Docker 映像并且想要区分各种映像时。稍后，当我们发布 Docker 映像时，我们将需要在每个发布的映像上包含一个版本标签，版本控制的一个简单约定是在您的应用存储库中使用当前提交的 Git 提交哈希。
下面演示了如何在 Make 变量中捕获并显示当前版本:
```
.PHONY: test release clean version
export APP_VERSION ?= $(shell git rev-parse --short HEAD)
version:
 @ echo '{"Version": "$(APP_VERSION)"}'
test:
    docker-compose build --pull release
    docker-compose build
    docker-compose run test
release:
    docker-compose up --abort-on-container-exit migrate
    docker-compose run app python3 manage.py collectstatic --no-input
    docker-compose up --abort-on-container-exit acceptance
    @ echo App running at http://$$(docker-compose port app 8000 | sed s/0.0.0.0/localhost/g)clean:
    docker-compose down -v
    docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS
```
我们首先声明一个名为`APP_VERSION`的变量，并在这个变量前面加上`export`关键字，这意味着该变量在环境中对于每个目标都是可用的。然后，我们使用名为`shell`的 Make 函数来执行`git rev-parse --short HEAD`命令，该命令返回当前提交的七个字符的短散列。最后，我们添加了一个名为`version`的新目标，它只是将版本以 JSON 格式打印到终端，这在本书后面我们自动化应用的连续交付时会很有用。注意`make`使用美元符号引用变量，也执行 Make 函数，具体可以在[https://www . GNU . org/software/Make/manual/html _ node/functions . html](https://www.gnu.org/software/make/manual/html_node/Functions.html)阅读。
If you just run the `make` command without specifying a target, make will execute the first target in the Makefile. This means, for our scenario, just running `make` will output the current version.
下面演示运行`make version`命令:
```
> make version
{"Version": "5cd83c0"}
```
# 测试端到端工作流
此时，我们本地 Docker 工作流的所有部分都已就绪，现在是审查工作流并验证一切正常的好时机。
核心工作流现在包括以下任务:
*   运行测试阶段–`make test`
*   运行发布阶段–`make release`
*   清理–`make clean`
我会让你来测试，但我鼓励你适应工作流程，并确保一切顺利完成。运行`make release`后，验证您可以导航到应用，应用正确显示 HTML 内容，并且您可以执行创建、读取、更新和删除操作。
一旦您感到满意，一切都如预期的那样运行，请确保您已经将您的更改提交并推送到您在前一章中分叉的 GitHub 存储库中。
# 摘要
在本章中，您实现了一个 Docker 工作流，该工作流测试、构建应用并将应用打包到一个 Docker 映像中，该映像可以发布并部署到生产环境中。您学习了如何使用 Docker 多阶段构建分两个阶段构建您的应用——测试阶段使用一个开发环境，该环境配有开发库和源代码编译工具，允许您在预编译包中构建和测试应用及其依赖项，而发布阶段则采用这些构建的包，并将它们安装到一个生产就绪的操作环境中，没有开发库和其他工具，从而显著减少应用的攻击面。
您学习了如何使用 Docker Compose 来帮助简化在测试和发布阶段需要执行的各种命令和操作，创建了一个带有多个服务的`docker-compose.yml`文件，每个服务都以声明性的、易于理解的格式定义。您学习了如何复制启动和运行应用所需的大量部署任务，例如运行数据库迁移、收集静态文件，以及在尝试运行应用之前确保应用数据库健康。能够在本地环境中执行这些任务，可以让您对这些任务在实际生产环境中的工作方式有信心和了解，并在您的任何应用或配置更改在本地中断这些过程时向您发出预警。在正确的状态下启动应用并连接到应用数据库后，您学习了如何从外部客户端的角度运行验收测试，这让您对自己的映像是否按预期工作充满信心，并在这些验收测试失败时发出预警，作为应用持续开发的一部分。
最后，您学习了如何使用 GNU Make 将所有这些结合在一个完全自动化的工作流中，它为您提供了简单的高级命令，您可以使用这些命令来执行工作流。您现在可以通过简单地运行`make test`来执行测试阶段，通过运行`make release`来运行发布阶段，并使用`make clean`来清理您的环境。这使得运行工作流变得非常容易，在本书的后面，将简化连续交付构建系统的配置，我们将使用这些系统来自动测试、构建和发布您的 Docker 应用。
在接下来的章节中，您将学习如何实际发布您在本章中创建的 Docker 发行版映像，但在此之前，您需要建立一个 AWS 帐户，配置对您帐户的访问，并安装支持与 AWS 交互的工具，这将是下一章的重点。
# 问题
1.  对/错:使用`FROM`和`TO`指令定义多阶段 Dockerfile。
2.  真/假:`docker`命令`--rm`标志在容器退出后自动删除容器。
3.  对/错:当您运行您的工作流时，您应该只构建一次应用工件。
4.  真/假:在没有附加标志的情况下运行`docker-compose run`命令时，如果启动的目标服务因错误而失败，docker-compose 将以非零代码退出。
5.  真/假:在没有附加标志的情况下运行`docker-compose up`命令时，如果启动的服务之一出现错误，docker-compose 将以非零代码退出。
6.  对/错:如果你想使用 Docker Swarm，你应该配置一个 Docker Compose 版本的 3.x。
7.  您可以根据 Docker 文件中服务的依赖关系来配置 service _ healthy 条件。然后使用`docker-compose run`命令运行服务；依赖关系被启动，但是 Docker Compose 没有等到依赖关系健康时立即启动服务，从而导致失败。你如何解决这个问题？
8.  您可以在 Docker Compose 中创建一个端口映射为`8000:8000`的服务。当您尝试启动此服务时，会出现一个错误，指示端口正在使用中。你如何解决这个问题并确保它不再发生？
9.  创建 Makefile 后，在尝试运行目标时，您会收到一个关于缺少分隔符的错误。这个错误最可能的原因是什么？
10.  哪个 GNU Make 函数允许你捕捉一个 shell 命令的输出？
11.  您在 Makefile 中定义了一个名为 test 的目标，但是当您运行`make test`时，您会得到一个回应，说没有什么可做的。你如何解决这个问题？
12.  要使用`docker-compose push`命令，必须在 Docker Compose 服务定义中配置哪些属性？
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   Docker 命令行参考:[https://docs.docker.com/engine/reference/commandline/cli/](https://docs.docker.com/engine/reference/commandline/cli/)
*   多阶段构建:[https://docs . docker . com/develop/develop-img/多阶段构建/](https://docs.docker.com/develop/develop-img/multistage-build/)
*   Docker 合成版本 2 规范:https://docs . docker . com/compose/compose-file/compose-file-v2/
*   Docker 复合命令行参考:https://docs . docker . com/compose/reference/
*   Docker 复合启动命令:https://docs . docker . com/compose/startup-order/T2]
*   适用于 Python 应用的 uWSGI quick start:[http://uWSGI-docs . readed docs . io/en/latest/wsgiquick start . html](http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html)
*   bash-自动化测试系统:[https://github.com/sstephenson/bats](https://github.com/sstephenson/bats)
*   GNU 制作虚假目标:[https://www . GNU . org/software/Make/manual/html _ node/false-Targets . html](https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html)
*   GNU Make Functions:[https://www . GNU . org/software/Make/manual/html _ node/Functions . html # Functions](https://www.gnu.org/software/make/manual/html_node/Functions.html#Functions)