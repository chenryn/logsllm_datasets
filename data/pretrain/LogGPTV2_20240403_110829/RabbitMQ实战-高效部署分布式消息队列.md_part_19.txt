### 优化后的文本

对于存储服务器来说，这可能不是一个大问题。但是，如果你正在处理繁重的RPC（远程过程调用）任务呢？如果每个RPC客户端每秒创建和销毁数百个响应队列，磁盘节点可能会显著降低性能。内存节点可以提供出色的性能，而磁盘节点则能确保集群配置信息在重启后仍然可用。那么，如何在这两者之间找到平衡呢？

RabbitMQ只需要集群中至少有一个磁盘节点，其他节点都可以是内存节点。记住，当节点加入或离开集群时，必须将这些变更通知到至少一个磁盘节点。如果唯一的磁盘节点崩溃了，集群仍可继续路由消息，但无法执行以下操作：
- 创建队列
- 创建交换器
- 创建绑定
- 添加用户
- 更改权限
- 添加或删除集群节点

换句话说，如果集群中唯一的磁盘节点崩溃，集群会继续运行，但在该节点恢复之前，你无法进行任何更改。解决方法是在集群中设置两个磁盘节点，以确保至少有一个磁盘节点始终可用，从而保存元数据变更。唯一需要所有磁盘节点都在线的操作是添加或删除集群节点。当内存节点重启时，它们会连接到预配置的磁盘节点并下载当前集群元数据的副本。如果唯一的磁盘节点也发生故障，内存节点在重启后将无法找到集群。因此，在添加内存节点时，务必告知其所有磁盘节点的位置（内存节点唯一存储到磁盘的元数据信息是集群中磁盘节点的地址）。只要内存节点能够找到至少一个磁盘节点，它就能在重启后重新加入集群。

现在，让我们开始建立集群吧！

### 5.3 在你的笔记本电脑上设置集群

理解RabbitMQ处理集群的内部机制可能有些复杂，但设置集群却相对简单。你甚至可以在开发系统上设置一个功能齐全的集群，这非常有用，因为这意味着你可以在编写代码时测试失败场景，并观察它们的处理方式。假设你在第一章已经安装了RabbitMQ服务器。在开始配置集群前，请确保现有的RabbitMQ没有运行。如果需要关闭节点，移动到RabbitMQ安装目录并运行 `sbin/rabbitmqctl stop`。你应该会看到如下信息，提示节点已关闭：

```
Stopping and halting node rabbit@Phantome ... ...done.
```

现在节点已关闭，你可以开始配置集群了。通常，使用 `rabbitmq-server` 命令启动节点即可。但如果不加额外参数，该命令会默认使用节点名称 `rabbit` 和监听端口 `5672`。如果你尝试在同一台机器上启动三个节点，第二个和第三个节点会因节点名称和端口冲突而启动失败。我们可以通过设置 `RABBITMQ_NODENAME` 和 `RABBITMQ_NODE_PORT` 环境变量来指定唯一的节点名称和端口号。在我们的示例中，端口号从 `5672` 开始，每个新节点增加1。同样，第一个节点命名为 `rabbit`，接下来的两个节点分别命名为 `rabbit_1` 和 `rabbit_2`。你可以使用不同的节点名称和端口号，只要对每个节点来说是唯一的即可。让我们在开发系统上设置并启动三个节点，如以下清单所示（首先，确保移除RabbitMQ 2.7.0之前的版本的所有插件，禁用RabbitMQ 2.7.0及之后版本的所有插件）。

**注意**：我们尚未讨论RabbitMQ插件，但你可能已经启用了一些插件。如果是这样，你需要在启动集群节点前禁用这些插件。这是因为像RabbitMQ Management这样的插件会监听特定端口来提供服务（例如Management插件的Web UI）。我们还没有讲到如何设置插件监听不同端口，所以当第二个和后续节点启动它们的插件时，会与第一个节点的插件冲突，导致节点崩溃。

#### 清单5.1：在开发系统上启动三个节点的集群

```sh
$ RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit ./sbin/rabbitmq-server -detached
Activating RabbitMQ plugins ...
0 plugins activated:

$ RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit_1 ./sbin/rabbitmq-server -detached
Activating RabbitMQ plugins ...
0 plugins activated:

$ RABBITMQ_NODE_PORT=5674 RABBITMQ_NODENAME=rabbit_2 ./sbin/rabbitmq-server -detached
Activating RabbitMQ plugins ...
0 plugins activated:
```

现在，开发系统上有三个Rabbit节点：`rabbit`、`rabbit_1` 和 `rabbit_2`（每个节点都会有系统的主机名，添加在 `@` 后）。但每个节点仍然是独立的，拥有自己的元数据，并不知道其他节点的存在。集群中的第一个节点将初始元数据带入集群，并且无须被告知加入。而第二个和之后的节点将加入它并获取它的元数据。要加入第二个和第三个节点，首先需要停止Erlang节点上运行的RabbitMQ应用程序，并重置（清空）它们的元数据。这样它们才可以被加入并获取集群的元数据。`rabbitmqctl` 工具会帮助你与每个节点通信并完成上述任务。

让我们从停止第二个节点上的RabbitMQ应用程序开始：

```sh
$ ./sbin/rabbitmqctl -n rabbit_1@Phantome stop_app
Stopping node rabbit_1@Phantome ...
...done.

$ ./sbin/rabbitmqctl -n rabbit_1@Phantome reset
Resetting node rabbit_1@Phantome ...
...done.
```

现在，有了一个停止运行并且清空的Rabbit应用，你可以将其加入第一个集群节点：

```sh
$ ./sbin/rabbitmqctl -n rabbit_1@Phantome cluster rabbit@Phantome rabbit_1@Phantome
Clustering node rabbit_1@Phantome with [rabbit@Phantome, rabbit_1@Phantome]...
...done.

$ ./sbin/rabbitmqctl -n rabbit_1@Phantome start_app
Starting node rabbit_1@Phantome ...
broker running
...done.
```

你可能注意到，在发送 `cluster` 命令到第二个节点时，你得到了 `Clustering node rabbit_1@Phantome with [rabbit@Phantome, rabbit_1@Phantome]` 的输出。为什么要把自己也集群进来？这样做是为了让 `rabbit_1` 成为磁盘节点。当你将新节点加入集群时，必须列出集群中的所有磁盘节点作为 `cluster` 命令的参数。这就是内存节点在重启后还能知道如何获取初始元数据和状态的原因。如果新增节点本身就是磁盘节点，`rabbitmqctl` 会智能地识别这一点。另一个关键参数是 `-n rabbit_1@Phantome`，它告诉 `rabbitmqctl` 你希望在指定节点而非默认节点（`rabbit@`）上执行命令。你可以使用 `-n` 参数指定任何RabbitMQ节点，无论是在你的开发系统上还是网络上的其他系统。

**注意**：记住Erlang节点通过认证Erlang cookie的方式来允许互相通信。由于 `rabbitmqctl` 使用Erlang OTP通信机制与Rabbit节点通信，运行 `rabbitmqctl` 的机器和所要连接的Rabbit节点必须使用相同的Erlang cookie。否则，你会收到错误。

至此，你的开发系统上已经有了两个节点的Rabbit集群，第三个独立Rabbit节点正等待加入集群。不要让它等太久！加入第三个节点的命令几乎与加入第二个节点相同，如以下清单所示。

#### 清单5.2：将第三个节点加入集群

```sh
$ ./sbin/rabbitmqctl -n rabbit_2@Phantome stop_app
Stopping node rabbit_2@Phantome ...
...done.

$ ./sbin/rabbitmqctl -n rabbit_2@Phantome reset
Resetting node rabbit_2@Phantome ...
...done.

$ ./sbin/rabbitmqctl -n rabbit_2@Phantome cluster rabbit@Phantome rabbit_1@Phantome
Clustering node rabbit_2@Phantome with [rabbit@Phantome, rabbit_1@Phantome]...
...done.

$ ./sbin/rabbitmqctl -n rabbit_2@Phantome start_app
Starting node rabbit_2@Phantome ...
broker running
...done.
```

当你使用相同的命令将第三个节点加入时，唯一的不同是 `-n` 参数指定了第三个节点 `rabbit_2`，而不是 `rabbit_2` 自身。因此，`rabbit_2` 会知道集群中的两个磁盘节点，但它本身不会成为磁盘节点。相反，通过不指定其作为参数，`rabbit_2` 会成为内存节点。

在所有节点运行并成功集群后，让我们看看你的作品，并用 `rabbitmqctl` 查看集群状态：

```sh
$ ./sbin/rabbitmqctl cluster_status
Cluster status of node rabbit@Phantome...
[{nodes, [{disc, [rabbit_1@Phantome, rabbit@Phantome]}, {ram, [rabbit_2@Phantome]}]},
{running_nodes, [rabbit_1@Phantome, rabbit@Phantome, rabbit_2@Phantome]}]
...done.
```

关键是 `nodes` 部分：

```erlang
{nodes, [{disc, [rabbit_1@Phantome, rabbit@Phantome]}, {ram, [rabbit_2@Phantome]}]}
```

`rabbitmqctl` 告诉你有三个节点加入了集群：
- 两个磁盘节点：`rabbit` 和 `rabbit_1`
- 一个内存节点：`rabbit_2`

`running_nodes` 部分告诉你集群中的哪些节点正在运行。现在你可以连接到这三个 `running_nodes` 中的任何一个，并开始创建队列、发布消息或执行其他AMQP任务。但在开始使用集群学习如何编写可以重连并处理节点故障的程序之前，你应该将新学到的集群搭建技能用于在多台计算机上创建集群。

### 5.4 将节点分布到更多的机器上

将RabbitMQ集群运行在多台物理机器上并不比在开发系统上构建集群难多少。首先，你需要知道RabbitMQ集群对延迟非常敏感，应仅在本地局域网内使用。使用集群来提供地理可用性或通过WAN路由消息会导致超时和异常的集群行为，这是不明智的。记住这一点，我们将在本地局域网创建分布式集群，如下所示：
- 三个节点分别在三台独立的物理机器上（Amazon EC2微型实例/服务器）
- 每个节点在Ubuntu 10.04 LTS 64-bit上运行RabbitMQ 2.7.0
- Erlang R13B04

首先，你需要在每台机器上安装操作系统和RabbitMQ 2.7.0（使用第一章中的指令）。虽然我们使用的是Ubuntu，但在任何基于UNIX的操作系统上都可以工作。为了简化设置，我们使用了Amazon Web Services EC2服务器（http://aws.amazon.com/ec2）。我们的EC2服务器是拥有613 MB内存和8 GB存储空间的微型实例。为了专注于真正的集群工作而非服务器设置，我们制作了一个装有Ubuntu和RabbitMQ的Amazon Machine Image (AMI)，随时可以用来集群。要使用它，启动三台EC2 US West-N. California区域的新服务器，并在选择服务器镜像时搜索AMI ID `ami-69ebb42c`。这样，你应该有了三台新的微型EC2服务器，运行着Ubuntu 10.04 LTS和纯净的RabbitMQ 2.7.0拷贝。

我们将三台服务器分别设置为 `ip-10-170-29-145`、`ip-10-170-30-18` 和 `ip-10-170-29-88`（见图5.4）。当从AMI创建服务器时，Amazon Web Services会自动分配主机名。你的主机名会有所不同，因此请使用分配的主机名代替。

![RabbitMQ集群](https://example.com/image.png)

**图5.4 在EC2服务器上构建Rabbit集群**

**注意**：如果你使用我们的AMI来搭建EC2，在使用SSH连接到服务器时确保使用 `ubuntu` 作为用户名。

现在，你需要做的是将 `ip-10-170-29-145` 的Erlang cookie复制到其他几个节点，使它们可以互相通信。如果节点的Erlang cookie字符串不同，Erlang节点尝试互相认证时会导致集群失败。如果你使用的是我们的AMI，可以在 `/var/lib/rabbitmq/.erlang.cookie` 找到Erlang cookie。复制cookie内的字符串，并粘贴到其他两个节点的 `/var/lib/rabbitmq/.erlang.cookie` 上。然后通过运行 `sudo /etc/init.d/rabbitmq-server restart` 命令重启另外两个节点的RabbitMQ进程。这实际上是构建分布式集群中最困难的部分。现在可以准备加入集群了。首先将 `ip-10-170-30-18` 加入集群。

```sh
ubuntu@ip-10-170-30-18:~# sudo rabbitmqctl stop_app
...done.

ubuntu@ip-10-170-30-18:~# sudo rabbitmqctl reset
...done.

ubuntu@ip-10-170-30-18:~# sudo rabbitmqctl cluster rabbit@ip-10-170-29-145 rabbit@ip-10-170-30-18
['rabbit@ip-10-170-29-145', 'rabbit@ip-10-170-30-18']
...done.

ubuntu@ip-10-170-30-18:~# sudo rabbitmqctl start_app
...done.
```

现在，你的分布式RabbitMQ集群已经成功设置并运行。