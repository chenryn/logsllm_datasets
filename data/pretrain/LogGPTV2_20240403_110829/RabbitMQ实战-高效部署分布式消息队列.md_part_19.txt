存的服务器来说这没什么大不了的。但是如果你正处理繁重的RPC呢？如果每个
RPC客户端正创建和销毁每秒数以百计的应答队列，你就会明白磁盘节点会降低性
能。内存节点可以提供的出色性能，和磁盘节点能够保障集群配置信息幸免于重启，
你如何平衡这两者呢？
RabbitMQ只要求在集群中至少有一个磁盘节点。所有其他节点可以是内存节点。
记住，当节点加入或者离开集群时，它们必须要将该变更通知到至少一个磁盘节点。
如果只有一个磁盘节点，而且不凑巧的是它刚好又崩溃了，那么集群可以继续路由
---
## Page 128
106
第5章集群并处理失败
消息，但是不能做以下的操作了：
■创建队列
■创建交换器
■创建绑定
■添加用户
■更改权限
■添加或删除集群节点
换句话说，如果集群中唯一的磁盘节点崩溃的话，集群仍然可以保持运行，但
是直到将该节点恢复到集群前，你无法更改任何东西。解决方案是在集群中设置两
个磁盘节点，因此它们中至少有一个是可用的，能在任何时候保存元数据变更。只
有一个需要所有的磁盘节点必须在线的操作是添加或者删除集群节点。当内存节点
重启后，它们会连接到预先配置的磁盘节点，下载当前集群元数据拷贝。如果你只
该磁盘节点也发生故障的话，那么内存节点在重启之后就无法找到集群了。所以当
添加内存节点时，确保告知其所有的磁盘节点（内存节点唯一存储到磁盘的元数据
信息是集群中磁盘节点的地址）。只要内存节点可以找到至少一个磁盘节点，那么
它就能在重启后重新加人集群。
话不多说。让我们开始建立集群吧！
5.3在你的笔记本电脑上设置集群
理解RabbitMQ如何处理集群的内部工作机制是比较困难的；不过设置集群倒
是非常简单！简单到可以在你的开发系统中设置完整功能的集群。这非常的棒，因
为这意味着在你编写代码时，你可以在生产环境中，测试失败场景，并观察它们是
如何处理的。在第1章，你应该将RabbitMQ服务器安装到你的开发机器上了。在
开始配置集群前，需要首先确保现存的Rabbit没有运行。如果需要关闭节点的话，
则移动到RabbitMQ安装目录，然后运行sbin/rabbitmqctlstop²。你应该会看
到如下信息，提示你节点已经关闭了。
2通过使用RabbitMQ中央配置文件替代rabbitmqct1来配置集群成员也是可以的。由于这个方法容
易出现错误并且难以调试，因此我们不会对它进行介绍。
---
## Page 129
5.3在你的笔记本电脑上设置集群
107
Stopping and haiting node rabbit@Phantome ... ...done.
现在节点已经关闭了，你可以开始配置集群了。通常来讲，你使用 rabbitmq-
server命令启动节点之后就大功告成了。但是如果不用额外参数的话，该命令
会默认使用节点名称rabbit和监听端口号5672。如果你尝试在同台机器用这个
方法启动三个节点的话，那么第二个和第三个节点会因为节点名称和端口冲突导
致启动失败。在每次调用rabbitmq-Server命令前，我们通过设置RABBITMQ_
NODENAME和RABBITMQ_NODE_PORT环境变量来明确指定唯一的节点名称和端口
号。在我们的例子中，端口号从5672开始，接着每个新启动的节点都增加1。同样地，
第一个节点命名为rabbit，之后第二个和第三个节点则分别命名为rabbit_1和
rabbit_2。你可以使用不同的节点名称和端口号，只要对每个节点来说是唯一的
即可。让我们在开发系统上设置并启动三个节点，如下列清单所示（首先，确保移
除RabbitMQ【2.7.0之前的版本】所有插件，禁用RabbitMQ【2.7.0和2.7.0之后的
版本】所有插件）
注意：我们尚未讨论RabbitMQ插件，不过有可能你已经启用了一部分插
件了。如果确实如此的话，你需要在启动集群节点前将插件禁用。这是因
为像RabbitMQManagement插件这样的插件会监听专门的端口来提供服务
（例如Management插件的WebUI）。我们还没有讲到如何设置插件监听不
同的端口，所以当第二个和之后的节点启动了它们的插件，就会和第一个
启动节点的插件相冲突，然后节点就都崩溃了。
清单5.1：在开发系统上启动三个节点的集群
$RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit\
./sbin/rabbitmq-server-detached
Activating RabbitMQ plugins ...
0 plugins activated:
$RABBITMQ_NODE_PORT=5673RABBITMQ_NODENAME=rabbit_1\
./sbin/rabbitmq-server-detached
Activating RabbitMQ plugins ...
0 plugins activated:
$RABBITMQ_NODE_PORT=5674 RABBITMQ_NODENAME=rabbit_2\
./sbin/rabbitmq-server-detached
Activating RabbitMQ plugins ...
0plugins activated:
现在在开发系统上运行着三个Rabbit节点，分别是rabbit、rabbit_1 和
---
## Page 130
108
第5章集群并处理失败
rabbit_2（每个节点都会有系统的主机名，添加在@后）。但是每个节点仍然是独
立节点，拥有自己的元数据，并且不知道其他节点的存在。集群中的第一个节点将
初始元数据带人集群中，并且无须被告知加人。而第二个和之后的节点将加人它并
且获取它的元数据。要加入第二个和第三个节点，首先需要停止Erlang节点上运行
的RabbitMQ应用程序，并重设（清空）它们的元数据。这样它们才可以被加人并
且获取集群的元数据。rabbitmqctl工具会帮你和每个节点通信并完成以上的任务。
让我们从停正第二个节点上的RabbitMQ应用程序开始：
$ ./sbin/rabbitmqctl -n rabbit_l@Phantome stop_app
Stopping niode rabbit_l@Phantome ...
...done.
下一步，你需要重设第二个节点的元数据和状态为清空的状态：
$./sbin/rabbitmqctl -n rabbit_i@Phantome reset
Resetting node rabbit_l@Phantome ...
...done.
现在拥有了一个停止运行的（并且清空了的）Rabbit应用，你已经准备好将它
加入到第一个集群节点：
$ ./sbin/rabbitmqctl -n rabbit_l@Phantome cluster rabbit@Phantome \
rabbit_l@Phantome
Clustering node rabbit_l@Phantome with [rabbit@Phantome,
rabbit_l@Phantome]..
...done.
最后你可以重新启动第二个节点的应用程序，这样它就开始成为集群中运作的
一员了：
$ ./sbin/rabbitmqctl -n rabbit_l@Phantome start_app
Starting node rabbit_1@Phantome ...
broker running
...done.
你也许注意到了，当你发送cluster命令式到第二个节点时，你获得
了Clustering node rabbit_l@Phantome with [rabbit@Phantome,
点自已也集群进来？这样做是对的。原因在于你想让rabbit_1也成为磁盘节点。
当你将新节点加人到集群时，你必须列出在集群中的所有磁盘节点，并作为集群命
令的参数。这就是内存节点在重启之后还能知道如何获得初始元数据和状态的原因。
---
## Page 131
5.3在你的笔记本电脑上设置集群
109
如果磁盘节点之一就是要新增节点的话，rabbitmqctl可以非常机智地认识到你
想让该新增节点也成为磁盘节点。另一个传入rabbitmgctl命令的关键参数是-n
rabbit_1@Phantome。这会告诉rabbitmqctl你想要在指定节点而非默认节点
（rabbit@）上执行命令。你可以使用-n参数指定任何RabbitMQ节点，不管是在
你的开发系统上或者是网络上任何可以连接的其他系统上。
注意：记住Erlang节点间通过认证Erlang cookie的方式来允许互相通信。
因为rabbitmqctl使用ErlangOTP通信机制来和Rabbit节点通信，运
行rabbitmqctl的机器和所要连接的 Rabbit节点必须使用相同的Erlang
cookie。否则你会得到一个错误。
到目前为止你的开发系统上已经有了两个节点的Rabbit集群，第三个独立
Rabbit节点正等待加入集群。别把这第三个节点留在冷风中痴痴地等！如下列清单
所示，加人第三个节点和加入第二个节点的命令几乎是一样的。
清单5.2将第三个节点加入集群
$./sbin/rabbitmqctl-nrabbit_2@Phantome stop_app
Stopping node rabbit_2@Phantome ...
...done.
$./sbin/rabbitmqctl -n rabbit_2@Phantome reset
Resetting node rabbit_2@Phantome ...
...done.
$./sbin/rabbitmqctl-nrabbit_2@Phantomecluster rabbit@Phantome
rabbit_1@Phantome
Clustering node rabbit_2@Phantomewith[rabbit@Phantome
rabbit_1@Phantome] ...
...done.
$./sbin/rabbitmqctl-n rabbit_2@Phantomestart_app
Starting node rabbit_2@Phantome ...
broker running
...done.
当你使用相同的命令将第三个节点加入时，唯一不同的是-n参数指定了第三
却没有rabbit_2。因此，rabbit_2会知道集群中的两个磁盘节点，但其本身不
会成为磁盘节点。取而代之的是，通过不指定其作为参数，rabbit2会成为内存
节点。
在所有节点运行并成功集群之后，让我们看看你的作品，并用rabbitmqct1
---
## Page 132
110
第5章集群并处理失败
来查看集群。
$./sbin/rabbitmqctlcluster_status
Cluster status of node rabbit@Phantome..
[{nodes,[{disc,[rabbit_l@Phantome,rabbit@Phantome]},
[ram,[rabbit_2@Phantome]}l},
{running_nodes, [rabbit_1@Phantome, rabbit@Phantome]}]
...done.
关键是nodes部分：
{nodes, [{disc, [rabbit_1@Phantome,rabbit@Phantome]},
.{ram,[rabbit_2@Phantome]}]},
rabbitmqctl告诉你有三个节点加入到了集群。
·两个（“disc”）节点：rabbit和rabbit_1
■一个内存节点：rabbit_2
running_nodes部分告诉你集群中的哪些节点正在运行。现在你可以连接到
这三个running_nodes 中的任何一个，并且开始创建队列，发布消息或者执行其
他任何AMQP任务。但在开始使用集群学习如何编写可以重连并处理节点故障的程
序之前，你应该将新学到的集群搭建技能用于在多台电脑上创建集群。
5.4将节点分布到更多的机器上
将RabbitMQ集群运行在多台物理机器上并不比在开发系统上构建集群难多少。
首先你需要知道的是RabbitMQ集群对延迟非常敏感，应当只在本地局域网内使用。
使用集群来提供地理可用性或者通过WAN来路由消息，都会导致超时和怪异的集
群行为，因此这是不明智的。记住这些，我们将在本地局域网创建分布式集群，像
这样：
■三个节点分别在三台独立的物理机器上（AmazonEC2微型实例／服务器）
■每个节点在Ubuntu10.04LTS64-bit上运行RabbitMQ2.7.0
■Erlang R13B04
3作者笔误：根据上下文，应为{running_nodes，[rabbit_2@Phantome，rabbit_l@Phantome，
rabbit@Phantome]}]—译者注
---
## Page 133
5.4将节点分布到更多的机器上
111
首先你需要先在机器上安装操作系统和RabbitMQ2.7.0（在每台系统上使用第
1章中的指令）。虽然我们使用的是Ubuntu，但是在任何基于UNIX的操作系统上
都可以工作。同时，为了使得设置这三个系统尽量简单，我们使用了AmazonWeb
ServicesEC2服务器（http://aws.amazon.com/ec2）。我们的EC2服务器是拥有613
MB内存和8GB存储空间的微型实例。因此你可以专注于真正的集群工作上而非服
务器设置上，我们制作了装有Ubuntu和RabbitMQ的AmazonMachineImage（AMI），
以便随时可以用来集群。要使用它的话，启动三台EC2USWest-N.Califormia区域
的新服务器，并在选择服务器镜像的时候搜索AMIIDami-69ebb42c。看吧！你
应该有了三台闪亮的新的微型EC2服务器，运行着Ubuntu10.04LTS和一份纯净的
RabbitMQ2.7.0拷贝
我们将三台服务器分别设置为ip-10-170-29-145、ip-10-170-30-18和
ip-10-170-29-88（见图5.4）。当从AMI创建服务器时，AmazonWebServices会
自动分配主机名。你的主机名会有所不同，因此使用分配的主机名来代替即可。
交换器A
队列1
队列2
队列3
RabbiMQ
RabbltMQ
RabbitMQ
rabbit@
rabbit@
rabbit@
Jp-10-170-29-145
p-10-170-30-18
ip-10-170-29-88
EC2服务器1
EC2服务器2
EC2服务器3
10.170.29.145
10.170.30.18
10.170.29.88
RabbitMQ集群
图5.4在EC2服务器上构建Rabbit集群
4如果你使用我们的AMI来搭建EC2的话，在使用SSH连接到服务器时确保使用ubuntu作为用户名
5作者笔误：英文原版书中图5.4上的主机名和IP地址无法与文中内容对应起来。根据文中作者提到的
机器名，中文翻译版中已对此进行了修改。一译者注
---
## Page 134
112
第5章集群并处理失败
现在，你需要做的是将ip-10-170-29-145的Erlangcookie复制到其他几个
节点，让它们可以互相通信。如果节点的Erlangcookie字串不同，那么当Erlang节
点尝试互相认证时会导致集群失败。如果你使用的是我们的AMI，那么你可以在
/var/lib/rabbitmq/.erlang.cookie找到Erlangcookie。复制cookie内的字串，
并粘贴到其他两个节点的/var/lib/rabbitmq/.erlang.cookie上。然后通过
运行 sudo/etc/init.d/rabbitmq-serverrestart命令重启另外两个节点的
RabbitMQ进程。这其实是构建分布式集群中最困难的部分了。现在可以准备加人
集群了。首先将ip-10-170-30-18加人集群。
ubuntu@ip-10-170-30-18:~# sudo rabbitmqctl stop_app
...done.
ubuntu@ip-10-170-30-18:~#sudo rabbitmqctl reset
...done.
ubuntu@ip-10-170-30-18:~#sudorabbitmqctlcluster
rabbit@ip-10-170-29-145\
rabbit@ip-10-170-30-18
['rabbit@ip-10-170-29-145',
----
...done.
ubuntu@ip-10-170-30-18:~#sudorabbitmqctlstart_app