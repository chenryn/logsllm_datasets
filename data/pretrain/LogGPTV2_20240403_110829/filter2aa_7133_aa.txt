# 循环
---
- https://www.kancloud.cn/imxieke/ruby-base/107293
---
# 循环的基础
我们在编写程序时，常常遇到“希望这个处理重复执行多次”的情况。例如：
- 希望同样的处理执行 X 次
更复杂点的例子有：
- 用其他对象置换数组里的所有元素；
- 在达成某条件之前，一直重复执行处理。
这时，我们都需要用到循环。
接下来，我们将会介绍 Ruby 中基本的循环结构。其中比较特别的是，除了用传统的循环语句实现循环外，我们还能用方法来实现循环，也就是说我们可以根据自己的需要定制循环方法。
# 循环时的注意事项
下面两点是循环时必须注意的。
- 循环的主体是什么
- 停止循环的条件是什么
大家也许会认为，我们自己写的循环处理，“循环的主体是什么”我们自己总会知道吧。但是，实际编写程序时，稍不注意就会发生把不应该循环的处理加入到循环中这样的错误。而且，如果是循环里再嵌套循环的结构，在哪里做怎么样的循环、循环的结果怎么处理等都可能会使程序变得难以读懂。
另外，如果把“停止循环的条件”弄错了，有可能会发生处理无法终止，或者处理还没完成但已经跳出循环等这样的情况。大家写循环结构时务必注意上述两点，避免发生错误。
# 实现循环的方法
Ruby 中有两种实现循环的方法。
- 使用循环语句
    利用 Ruby 提供现有的循环语句，可以满足大部分循环处理的需求。
- 使用方法实现循环
    将块传给方法，然后在块里面写上需要循环的处理。一般我们在为了某种特定目的而需要定制循环结构时，才使用方法来实现循环。
下面是我们接下来要介绍的六种循环语句或方法。
- times 方法
- while 语句
- each 方法
- for 语句
- until 语句
- loop 方法
# times 方法
如果只是单纯执行一定次数的处理，用 times 方法可以很轻松实现。
假设我们希望把“满地油菜花”这个字符串连续输出 7 次。
```ruby
7.times do
  puts "满地油菜花"
end
```
执行示例
```
> ruby times.rb
满地油菜花
满地油菜花
满地油菜花
满地油菜花
满地油菜花
满地油菜花
满地油菜花
```
使用 times 方法实现循环时，需要用到块 `do ～ end`。
```ruby
循环次数.times do
 希望循环的处理
end
```
块的 `do ～ end` 部分可以用 `{～}` 代替，像下面这样：
```ruby
循环次数.times {
 希望循环的处理
}
```
在 times 方法的块里，也是可以获知当前的循环次数的。
```ruby
10.times do |i|
  ┊
end
```
这样，就可以把当前的循环次数赋值给变量 i
```ruby
5.times do |i|
  puts "第#{i} 次的循环。"
end
```
执行示例
```
> ruby times2.rb
第 0 次的循环。
第 1 次的循环。
第 2 次的循环。
第 3 次的循环。
第 4 次的循环。
```
请注意循环的次数是从 0 开始计算的。把循环次数的初始值设为 1 不失为一个好方法，但可惜我们不能这么做，因此我们只能在块里面对循环次数做调整
```ruby
5.times do |i|
  puts "第#{i+1} 次的循环。"
end
```
执行示例
```
> ruby times3.rb
第 0 次的循环。
第 1 次的循环。
第 2 次的循环。
第 3 次的循环。
第 4 次的循环。
```
但是，这样的写法会使变量 `i` 的值与实际输出的值产生差异。从降低程序复杂度来看，这并不是一个好的的编程习惯。若是对循环次数比较在意时，我们不必勉强使用 `times` 方法，可使用下面即将介绍的 `for` 语句和 `while` 语句。
# for 语句
`for` 语句同样是用于实现循环的。需要注意的是，与刚才介绍的 `times` 方法不同，`for` 并不是方法，而是 Ruby 提供的循环控制语句。
以下是使用 `for` 语句的典型示例
```ruby
sum = 0
for i in 1..5
  sum = sum + i
end
puts sum
```
执行示例
```
> ruby for.rb
15
```
这是一个求从 1 到 5 累加的程序。for 语句的结构如下所示：
```ruby
for 变量 in 开始时的数值..结束时的数值 do
 希望循环的处理
end
```
> 可以省略 do
我们回顾一下程序代码清单 6.4。程序第 1 行将 0 赋值给变量 sum，程序第 5 行输出变量 sum 的值并换行。
第 2 行到第 4 行的 for 语句指定变量 i 的范围是从 1 到 5。也就是说，程序一边从 1 到 5 改变变量 i 的值，一边执行 sum = sum + i。如果不使用循环语句，这个程序可以改写为：
```ruby
sum = 0
sum = sum + 1
sum = sum + 2
sum = sum + 3
sum = sum + 4
sum = sum + 5
puts sum
```
for 语句与 times 方法不一样，循环的开始值和结束值可以任意指定。例如，我们想计算从变量 from 到变量 to 累加的总数，使用 times 方法的程序为：
```ruby
from = 10
to = 20
sum = 0
(to - from + 1).times do |i|
  sum = sum + (i +  from)
end
puts sum
```
使用 for 语句的程序为：
```ruby
from = 10
to = 20
sum = 0
for i in from..to
  sum = sum + i
end
puts sum
```
使用 for 语句后的程序变得更加简单了。
另外，sum = sum + i 这个式子也有更简单的写法：
```ruby
sum += i
```
本例是加法的简写，做减法、乘法时也同样可以做这样的省略。
```
a -= b
a *= b
```
# 普通的 for 语句
其实上一节介绍的是 `for` 语句的特殊用法，普通的 `for` 语句如下所示：
```ruby
for 变量 in 对象 do
 希望循环的处理
end
```
> 可以省略 do
可以看出，`in` 后面的部分和之前介绍的有点不同。
但和之前的 `for` 语句相比也并非完全不一样。实际上，`..` 或者 `...` 都是创建范围对象时所需的符号。
当然，并非任何对象都可以指定给 `for` 语句使用。下面是使用数组对象的例子。
```ruby
names = ["awk", "Perl", "Python", "Ruby"]
for name in names
  puts name
end
```
执行示例
```ruby
> ruby for_names.rb
awk
Perl
Python
Ruby
```
本例中，循环遍历各数组的元素，并各自将其输出。
# while 语句
不管哪种类型的循环，while 语句都可以胜任，while 语句的结构如下：
```ruby
while 条件 do
 希望循环的处理
end
```
> 可以省略 do
这几行程序的意思就是，只要条件成立，就会不断地重复循环处理。我们来看看下面的示例。
```ruby
i = 1
while i  ruby while.rb
1
2
```
本例为什么会得出这样的结果呢。首先，程序将 1 赋值给变量 `i`，这时 `i` 的值为 1。接下来 `while` 语句循环处理以下内容：
1. 执行 `i < 3` 的比较。
2. 比较结果为真（也就是 `i` 比 3 小）时，程序执行 `puts i` 和 `i += 1`。比较结果为假（也就是 `i` 大于等于 3）时，程序跳出 `while` 循环，不执行任何内容。
3. 返回 1 处理。
首次循环，由于 `i` 的初始值为 1，因此程序执行 `puts 1`。第 2 次循环，`i` 的值为 2，比 3 小，因此程序执行 `puts 2`。当程序执行到第 3 次循环，i 的值为 3，比 3 小的条件不成立，也就是说比较结果为假，因此，程序跳出 `while` 循环，并终止所有处理。
我们再来写一个使用 `while` 语句的程序。
把之前使用 `for` 语句写的程序，改写为使用 `while` 语句程序
```ruby
sum = 0
i = 1
while i <= 5
  sum += i
  i += 1