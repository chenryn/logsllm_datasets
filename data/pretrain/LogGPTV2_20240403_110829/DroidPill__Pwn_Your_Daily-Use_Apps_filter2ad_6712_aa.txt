title:DroidPill: Pwn Your Daily-Use Apps
author:Chaoting Xuan and
Gong Chen and
Erich Stuntebeck
DroidPill: Pwn Your Daily-Use Apps
Chaoting Xuan†, Gong Chen‡, Erich Stuntebeck†
{cxuan, estuntebeck}@vmware.com, PI:EMAIL
†VMWare
‡Georgia Institute of Technology
ABSTRACT
Nowadays, attacking and defending Android apps has be-
come an arms race between black hats and white hats. In
this paper, we explore a new hacking technique called the
App Confusion Attack, which allows hackers to take full con-
trol of benign apps and their resources without device root-
ing or privilege escalation. Conceptually, an App Confusion
Attack hijacks the launching process of each benign app, and
forces it to run in a virtual execution context controlled by
hackers, instead of the native one provided by the Android
Application Framework. This attack is furtive but has dan-
gerous consequences. When a user clicks on a benign app,
the malicious alternative can be loaded and executed with
an indistinguishable user interface. As a result, hackers can
manipulate the communication between the benign app and
the OS, including kernel and system services, and manip-
ulate the code and data at will. To demonstrate this at-
tack, we build DroidPill, a framework for malware creation
that employs the app virtualization technique and the de-
sign ﬂaws in Android to achieve such attacks with free apps.
Our evaluation results and case studies show that Droid-
Pill is practical and eﬀective. Lastly, we conclude this work
with several possible countermeasures to the App Confusion
Attack.
Categories and Subject Descriptors
I.3.2 [Security and Privacy]: Intrusion/Anomaly Detec-
tion and Malware Mitigation—Social Engineering Attacks
Keywords
Mobile System Security; Android Malware; App Confusion
Attack; App Virtualization
1.
INTRODUCTION
Android is the most popular mobile platform in terms of
the number of users [1]. Google Play hosts over 2.5 mil-
lion Android applications (apps) [2]. Therefore, it is not
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
AsiaCCS ’17, April 4–6, 2017, Abu Dhabi, United Arab Emirates.
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00.
DOI: http://dx.doi.org/10.1145/3052973.3052986
surprising that this open-source software stack for mobile
devices experiences the largest number of malware threats,
as evidenced by the report that about 97% of smartphone
malware is related to Android [3].
According to [4] [5] [6], Android malware in the wild can
be classiﬁed into four categories: (1) data theft (e.g., spy-
ware), (2) extortion (e.g., ransomware, and SMS fraud), (3)
privilege escalation, and (4) remote control. Except for the
last one, which is used for network attacks (e.g., botnet), the
ﬁrst three categories may require malware to exploit other
benign apps and their data on devices. For example, ran-
somware can blackmail victims by locking other apps from
being launched, or encrypting valuable data on SD cards [7]
[8] [9].
To date, various techniques for hacking Android apps
(e.g., vulnerability exploitation, and phishing attack) have
been studied and reported [11] [12] [13]. However, these at-
tacks are either unable to access benign apps’ internal data,
or targeted to a speciﬁc app version. More importantly, it is
diﬃcult for these techniques to pass through scanning ser-
vices deployed by app stores. In this paper, we introduce
a new attack into the Android malware families, called the
App Confusion Attack. In this attack, a malicious app hi-
jacks a user’s entry to a benign app, and forces the app to
run in the virtual execution context under the control of the
malware, which is transparent to the user. By sandboxing
the benign app, the malware can abuse its code and data
arbitrarily.
In order to instantiate the attack, we built DroidPill, a
framework for malware creation based on app virtualization.
The app virtualization technique, which we classify into two
categories (i.e., inclusive and exclusive) in this paper, encap-
sulates an app (guest app) in a restricted execution environ-
ment within the context of another app (sandbox app). The
virtual execution context is carefully crafted such that it is
oblivious to the app or app user, while maintaining com-
patibility with the native context provided by the Android
Application Framework. Also, DroidPill uses two diﬀerent
attack vectors, app shortcut manipulation and top activity
preemption, to realize the App Confusion Attack unobserv-
able to users.
There are two distinct characteristics when using Droid-
Pill. First, DroidPill can simultaneously attack multiple be-
nign apps on a device without carrying their code and data.
Hackers can utilize this feature to precisely proﬁle users by
monitoring their daily app usage. For example, based on the
in-app observation of a user’s emails, social activities and
browsing history, a malware can uncover numerous pieces
678of private information (e.g., job, social circle, and personal
interests) and build the user’s proﬁle. Second, using Droid-
Pill to compromise security-sensitive apps at the application
layer could lead to system-wide attacks. For example, a mal-
ware can capture the entire network traﬃc by attacking a
VPN app on the device.
To sum up, our contributions include:
• We propose the App Confusion Attack, which hijacks
the launching process of each benign app into a virtual
environment context controlled by a sandbox app, and
takes full control of those benign apps and their re-
sources without device rooting or privilege escalation.
• We implement DroidPill, which uses the app virtual-
ization technique, to launch the App Confusion At-
tacks with multiple benign apps simultaneously on a
device. To our best knowledge, this is the ﬁrst paper
using app virtualization from the hacker’s perspective.
• We introduce ﬁve use cases with DroidPill, which
range from intercepting network traﬃc to steal-
ing
sever-
for both mobile users and
ity of
app developers.
The demo videos are available
at:
https://www.youtube.com/channel/UCRCTTU-
bGVpd3o9pmm5THTg
and demonstrates
the
ad revenue,
such attacks
The rest of this paper is structured as follows. We com-
pare and contrast diﬀerent attack models, including the App
Confusion Attack, and then elaborate the kernel technique
for DroidPill, app virtualization, in Section 2. Afterwards,
Section 3 details DroidPill’s system design and implementa-
tion, and Section 4 presents two attack vectors we use. In
Section 5, we evaluate DroidPill’s performance and itemize
several attack cases. While the limitations and the coun-
termeasures are discussed in Section 6, we overview a few
related work in Section 7 and conclude the paper in Sec-
tion 8.
2. CONCEPTS
In this section, we explain two notions that will be fre-
quently used for the rest of this paper: (1) app attacks,
which include the App Confusion Attack, and (2) app vir-
tualization, which is used for implementing DroidPill.
2.1 App Attacks
We study how hackers exploit benign apps with an in-
stalled malware by comparing and contrasting the existing
attack schemes and our App Confusion Attack.
2.1.1 Existing Attacks
Generally, hackers may take one of the following four ap-
proaches: (1) ask for dangerous Android permissions (e.g.,
READ SMS, and READ CONTACTS), with which a mal-
ware can “legitimately” acquire sensitive data from other
apps via the Android framework API calls [4] [5], (2) attack
a benign app by exploiting its vulnerabilities (e.g., weak au-
thentication, and SQL injection [13] [14]), (3) apply the UI1
confusion attacks (e.g., phishing, and tapjacking) to spoof
user communications for designated actions (e.g., type in
password on a fake login page [15] [16] [17]), and (4) mas-
querade as a target app by repackaging it with a malicious
1User Interface
payload, and lure victim users to install the repackaged app
[18]. However, each approach has its limitation.
First, Android does not expose most apps’ internal data,
so merely requiring the permissions does not guarantee that
a malware can obtain the desired data from its target app.
For example, a malware can read a user’s browser his-
tory by requesting the READ HISTORY BOOKMARKS
permission, but it cannot access the cookies saved in the
browser’s internal storage. Furthermore, if the user browses
websites in incognito mode, then the URLs and cookies are
not even stored on disk, thus unavailable to the malware as
well.
Second, people treat software vulnerabilities more and
more seriously these days. Google’s bug bounty program re-
wards bug hunters for discovering vulnerabilities in Android
OS, system apps, and regular Google apps [19]. In addition,
several tools (e.g., [20]) have been developed to help people
automatically scan app vulnerabilities. For critical vulnera-
bilities in Android, OEMs can push the patches to devices
over the air. Meanwhile, developers can also patch their
apps via the app update mechanisms. As a result, many
exploits, that are available in old versions of Android OSes
or apps, are often blocked in newer versions.
Third, in current UI confusion attacks, malware tricks
users into taking a single-step action (e.g., click a button),
which restrains the impact of these attacks. For example,
such an attack cannot monitor a sequence of users’ interac-
tions with a target app, or exploit app functionalities which
require multi-step actions (e.g., transfer money from one ac-
count to another).
Last, most users tend to install apps from a trusted mar-
ketplace, which may deploy the scanning service (e.g., app-
clone detection [6]) to detect malware. Consequently, hack-
ers may not be able to publish their repackaged apps there.
Moreover, the app repackaging approach cannot attack the
pre-installed apps (e.g., Chrome) on a device.
2.1.2 App Confusion Attack
In the App Confusion Attack, the malware hijacks a be-
nign app’s launching procedure via such techniques as app
shortcut manipulation and top activity preemption. Thus,
when the user attempts to start the benign app (e.g., click
the app icon), the malware is triggered to steal the screen
focus by creating a virtual execution context and forcing the
benign app to be executed within it. More importantly, the
malware should be carefully designed such that the victim
user cannot visually distinguish the two situations: (1) the
benign app’s executions in the virtual execution context,
and (2) the native execution context provided by the An-
droid Application Framework. In this way, the malware can
perform malicious tasks without awareness at the user level.
The App Confusion Attack is close to the App Masque
Attack found in iOS 8.1 and earlier versions [21]. In the app
masque attack, the malicious repackaged app can silently re-
place a benign app installed on a device, even though they
are signed by diﬀerent developers’ certiﬁcates. The two at-
tacks are similar in the sense that the malware hides its ma-
licious activities by acting on behalf of the guest app, which
is transparent to users. However, the app masque attack
does not work for Android, because its app update mech-
anism follows the same origin policy that forbids patching
apps by diﬀerent developers.
679Table 1: App Attacks
Table 2: App Virtualizations
Code&Data
App
Version
App-Clone
Detection
Weak
N/A
N/A
N/A
Weak
N/A
Weak
N/A
N/A
Strong
Strong
Weak
Strong
Strong
Strong
Permission
Request
Vulnerability
Exploitation
UI
Confusion
App
Repackaging
App
Confusion
In comparison with the existing app attack schemes, the
App Confusion Attack has three appealing characteristics to
hackers. First, this attack scheme gives the malware com-
plete control over a guest app’s code and data inside the
virtual context, which may lead to the system-wide security
breaches. This overcomes the shortcomings of permission
request attacks and UI confusion attacks. Second, the App
Confusion Attack occurs at the application layer, and does
not require exploiting vulnerabilities in the kernel or sys-
tem apps; therefore, it is possible to attack a wide range of
the apps running on various Android versions. Actually, the
App Confusion Attack can be used as plan B for hackers
when their eﬀorts of escalating privileges are failed. Last,
in an App Confusion Attack, the malware does not need
to carry a guest app’s code and data; therefore, it has lit-
tle footprints to app-clone scanners. Compared with the
repackaged apps, it has a better chance to survive the app-
clone detection run by app stores. Table 1 compares the
App Confusion Attack and the other schemes.
2.2 App Virtualization
2.2.1 Classiﬁcation
In Android, app virtualization is a technique that allows a
sandbox app to create a virtual execution context, in which
a guest app can be loaded and executed in the same way
as it runs in the native execution context provided by An-
droid OS. Sandbox apps are actually regular Android apps
that do not have any system privilege. Functionally, app
virtualization consists of OS service virtualization and stor-
age virtualization. While OS service virtualization converts
virtual OS services used by guest apps to physical OS ser-
vices used by sandbox apps, storage virtualization translates
virtual storage used by guest apps to physical storage used
by sandbox apps.
In OS service virtualization, the sandbox app plays the
role of a broker: to the guest app, it acts on behalf of the
Android system services and provide the same service in-
terfaces. Whereas, to Android system services, it hides the
guest app’s identity and issues its service requests. In such a
situation, an identity gap exists between the guest app and
the Android system services: While the guest app claims
that “I am Alice”, Android system services say that “You
are Bob”. In storage virtualization, the similar identity gap
Inclusive
Exclusive
Guest App
System Services
Emulation
App Object
Translation
Yes
Yes
Yes
No
No
Yes
exists between the guest app and the OS storage system. In
sandbox apps, virtualization logic should be designed and
implemented at discretion to ﬁll such identity gaps; oth-
erwise, it will result in run-time exceptions or unpredicted
program behaviors.
App virtualization can be classiﬁed into two catogories:
inclusive app virtualization and exclusive app virtualization.
In an inclusive app virtualization system, the sandbox app is