# DroidPill: Pwn Your Daily-Use Apps

**Authors:**  
Chaoting Xuan†, Gong Chen‡, Erich Stuntebeck†  
{cxuan, estuntebeck}@vmware.com, PI:EMAIL  
†VMware  
‡Georgia Institute of Technology

## Abstract
The ongoing battle between attackers and defenders in the realm of Android app security has escalated into a high-stakes arms race. In this paper, we introduce a novel hacking technique called the **App Confusion Attack**, which enables hackers to gain full control over benign apps and their resources without requiring device rooting or privilege escalation. This attack intercepts the launch process of benign apps, forcing them to run in a virtual execution context controlled by the hacker, rather than the native context provided by the Android Application Framework. The attack is stealthy but highly dangerous, as it allows hackers to manipulate the communication between the app and the OS, including kernel and system services, and to alter code and data at will.

To demonstrate the feasibility of this attack, we developed **DroidPill**, a framework for creating malware that leverages app virtualization techniques and design flaws in Android. Our evaluation results and case studies show that DroidPill is both practical and effective. We conclude with several potential countermeasures to mitigate the App Confusion Attack.

**Categories and Subject Descriptors**  
I.3.2 [Security and Privacy]: Intrusion/Anomaly Detection and Malware Mitigation—Social Engineering Attacks

**Keywords**  
Mobile System Security, Android Malware, App Confusion Attack, App Virtualization

## 1. Introduction
Android is the most widely used mobile platform, with Google Play hosting over 2.5 million applications. Consequently, Android faces the highest number of malware threats, with approximately 97% of smartphone malware targeting the platform. According to recent reports, Android malware can be categorized into four main types: (1) data theft (e.g., spyware), (2) extortion (e.g., ransomware, SMS fraud), (3) privilege escalation, and (4) remote control. These attacks often require malware to exploit other benign apps and their data on the device.

Various techniques for hacking Android apps, such as vulnerability exploitation and phishing, have been studied. However, these methods are either limited in their ability to access internal app data or are version-specific, making them less effective. Additionally, they often fail to bypass the scanning services deployed by app stores. In this paper, we present a new attack, the **App Confusion Attack**, which hijacks the launch process of benign apps and forces them to run in a virtual execution context controlled by the malware. This attack is transparent to the user and allows the malware to abuse the app's code and data arbitrarily.

We implemented **DroidPill**, a framework for creating malware based on app virtualization. DroidPill uses two attack vectors—app shortcut manipulation and top activity preemption—to achieve the App Confusion Attack. Our contributions include:

- **Proposing the App Confusion Attack**: A method that hijacks the launch process of benign apps into a virtual environment controlled by a sandbox app, allowing full control over the apps and their resources without device rooting or privilege escalation.
- **Implementing DroidPill**: A framework that uses app virtualization to launch App Confusion Attacks on multiple benign apps simultaneously on a device. To our knowledge, this is the first paper to explore app virtualization from a hacker's perspective.
- **Demonstrating Use Cases**: We provide five use cases for DroidPill, ranging from intercepting network traffic to stealing sensitive information, and discuss the implications for both mobile users and app developers.

The rest of the paper is organized as follows. Section 2 compares different attack models and elaborates on the key technique, app virtualization. Section 3 details the design and implementation of DroidPill, while Section 4 presents the two attack vectors. Section 5 evaluates DroidPill's performance and provides several attack scenarios. Section 6 discusses the limitations and potential countermeasures, and Section 7 reviews related work. Finally, Section 8 concludes the paper.

## 2. Concepts
In this section, we define two key concepts: (1) **app attacks**, including the App Confusion Attack, and (2) **app virtualization**, which is the core technique used in DroidPill.

### 2.1 App Attacks
We examine how hackers exploit benign apps using installed malware by comparing existing attack schemes with our App Confusion Attack.

#### 2.1.1 Existing Attacks
Hackers typically employ one of the following approaches:
1. **Request Dangerous Permissions**: Malware requests permissions like `READ_SMS` and `READ_CONTACTS` to access sensitive data through the Android framework API.
2. **Exploit Vulnerabilities**: Malware exploits vulnerabilities in benign apps, such as weak authentication or SQL injection.
3. **UI Confusion Attacks**: Malware uses techniques like phishing and tapjacking to spoof user interactions.
4. **App Repackaging**: Malware repackages a target app with a malicious payload and lures users to install it.

However, each approach has limitations. For example, requesting permissions does not guarantee access to all desired data, and vulnerabilities are often patched. UI confusion attacks are limited to single-step actions, and repackaged apps can be detected by app stores.

#### 2.1.2 App Confusion Attack
In the App Confusion Attack, the malware hijacks the launch process of a benign app using techniques like app shortcut manipulation and top activity preemption. When the user attempts to start the app, the malware creates a virtual execution context and forces the app to run within it. The malware is designed to be indistinguishable from the native execution context, allowing it to perform malicious tasks without user awareness.

Compared to existing attack schemes, the App Confusion Attack offers several advantages:
- **Complete Control**: The malware gains full control over the app's code and data within the virtual context.
- **No Privilege Escalation Required**: The attack operates at the application layer, making it effective across various Android versions.
- **Low Footprint**: The malware does not need to carry the app's code and data, reducing its detectability by app-clone scanners.

### 2.2 App Virtualization
#### 2.2.1 Classification
App virtualization in Android allows a sandbox app to create a virtual execution context where a guest app runs as if it were in the native context. Functionally, app virtualization includes OS service virtualization and storage virtualization.

- **OS Service Virtualization**: The sandbox app acts as a broker, providing the same service interfaces to the guest app while hiding its identity from the Android system services.
- **Storage Virtualization**: The sandbox app translates the guest app's virtual storage to physical storage, maintaining the identity gap.

App virtualization can be classified into two categories:
- **Inclusive App Virtualization**: The sandbox app and the guest app share the same process.
- **Exclusive App Virtualization**: The sandbox app and the guest app run in separate processes.

Inclusive app virtualization is more common and easier to implement, but exclusive app virtualization offers better isolation and security.

---

This revised text aims to improve clarity, coherence, and professionalism, ensuring that the content is well-structured and easy to follow.