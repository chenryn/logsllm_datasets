attest1 [V : T , apk ; A1 : −; ∗ : pkO] → [V : r; A1 : Ch] .
attest2 [Ai : Ch; Dj : (sk j ); ∗ : pkO] → [Ai : αj ; Dj : Ch] .
The reader may refer to Appendix A for the security analysis of
SANA.
δt,skV,cert(pkV)VeriﬁerVNV←R{0,1}‘NNVOwnerOskO,apk,cert(pkO)NO←R{0,1}‘NNOσV←Sign(cid:0)skV;NO|δt(cid:1)δt0←checkPolicy(cid:0)idV,δt(cid:1)ifVerify(pkV;NO|δt,σV)=1∧δt06=0thenσ1←Sign(cid:0)skO;hg|cl|vl|texp=time()+δt(cid:1)T←{H,cl,vl,texp,σ1}←Enc(cid:0)pkV;T(cid:1)σ2←Sign(cid:0)skO;NV|apk(cid:1)endififVerify(pkO;NV|apk,σ2)=1thenifVerify(pkO;hg|cl|vl|texp,σ1)=1thenT←Dec(cid:0)skV;(cid:1)store({T,apk})endifendif[cl,vl]←getFreeCounter()H={h1,...,hz}←getGoodConﬁgs()hg←hash(h1|...|hz)δt,σV,cert(pkV),apk,σ2,cert(pkO)Figure 3: Protocol attest (attest1 and attest2)
6. SANA IMPLEMENTATION
We implemented SANA based on three recently proposed se-
curity architecture for low end embedded devices: SMART [12],
TrustLite [17], and TyTAN [11]. In this section, we discuss our
implementation based on TyTAN shown in Figure 4.
Figure 4: Implementation of SANA based on TyTAN [11]
TyTAN [11] is a security architectures for embedded systems,
that is based on TrustLite [17]4. TyTAN provides hardware-assisted
isolation of system components with real-time execution. Isolation
is fundamental to protect critical components against unintended ac-
cess by other potentially malicious components. In TyTAN, a Mem-
ory Protection Unit (MPU) restricts access to data, to the task that
owns this data. Moreover, both authenticity and conﬁdentiality of the
4TrustLite is based on Intel’s Siskiyou Peak research platform.
tasks’ code and data are based on secure boot. We implemented the
components of SANA (i.e., verifyChallenge(), createResponse(),
and aggregateResponse()) on TyTAN as isolated tasks, which are
protected via secure boot. Further, we conﬁgured the MPU such
that only SANA’s tasks can access the protocols secret data. For
example, according to rule #2 in the MPU table in Figure 4, the
OAS secret key sk i (which resides in memory address Addr 6 to
Addr 7) is only read accessible to createResponse() (i.e., code re-
siding in memory address Addr 3 to Addr 4). Finally, we developed
a proof-of-concept implementation of our OAS scheme for both
the low-end device in exam (i.e., TyTAN [11]), and for commodity
hardware. Our OAS scheme implementation uses the library in [34]
for pairing-based cryptographic operations, which we found particu-
larly suitable for our target platforms. OAS operations are deﬁned
over the BN254 pairing-friendly elliptic curve [34], which provides
a strong security level of 128-bit.
7. PERFORMANCE EVALUATION
We now evaluate computational, memory, communication, and
energy costs of SANA based on our implementation in Section 6.
Computational cost. The major part of the computational cost on
provers and aggregators, is due to the cryptographic operations, i.e.,
creating and aggregating Optimistic Aggregate Signature (OAS)
signatures, and creating the good software conﬁguration hg. The
gateway aggregator A1, which directly communicates to the veriﬁer
V, aggregates at most g1 signatures, where g1 is the number of
neighbors of A1 and creates one hash. Every aggregator Ai also
creates one hash, and aggregates at most pi signatures, where pi ≤
gi − 1 and gi is the number of neighbors of Ai in the network.
Finally, each Pi creates one OAS signature and one hash.
apk,T={H.cl,vl,texp,σO}VeriﬁerVN←R{0,1}‘Nattest1attest2(1)verifyChallenge()pkOAggregatorA1Ch={N,T}ProverPipkO,skiiftexp<time()∨¬checkCounter(cl,vl)thenelseif¬Verify(cid:0)pkO;hg|cl|vl|texp,σO(cid:1)thenendifabort()abort()hg←hash(h1|...|hz)Ch(2)createResponse()ifhi∈Hthenαi←Sign(cid:0)ski,hi|N|cl|vl,M(cid:1)hi←hgendif(1)verifyChallenge()(3)aggregateResponse()αiα1←⊥M←hg|N|cl|vlifB={(mi,Si):i=1,...,m}←Verify(cid:0)apk,S⊥=φ;M,α1(cid:1)6=⊥thenifB=φthenα1α1←AggSig(α1,αi,M)M←(cid:0)hash(h1|...|hz)(cid:1)|N|cl|vlendifr←1elser←0endifhi←getSoftConf()Addr10Addr9Addr8Addr7Addr6Addr5Addr4Addr3Addr2Addr1Task 2Task 1Device OSv1 , ...,vSc1 , ...,cSskipkOaggregateResponse()KcreateResponse()verifyChallenge()Instruction Pointer (IP)       Code  Memory        Access     #TyTAN Device Di132Addr0Addr3Addr2Addr1Addr4Addr3Addr1Addr6Addr7Addr5Addr7Addr9rrrwRAMROMsecureBoot()cert(pki )Addr0Communication cost. Our OAS implementation has a signature
size of (cid:96)Sign = 256 bits. We also use (cid:96)N = 160, (cid:96)c = 64, and
(cid:96)(cid:48)Sign = 320. Consequently, counter values are 8 bytes, counter
ids are 2 bytes, nonces are 20 bytes, OAS signatures are 32 bytes,
public keys are 32 bytes, digital signatures are 40 bytes, and software
conﬁgurations are 20 bytes. A token T with z good conﬁgurations
consists of 20z + 58 bytes, and a challenge Ch of 20z + 78 bytes.
A response αi has size 32 + 32w + 20µ bytes, where µ is the
number of distinct bad software conﬁgurations h1, . . . , hµ and w
is the number of distinct OAS public keys of bad provers. The
communication overhead of the each aggregator Ai is, sending at
most 32 + (20z + 78)gi + 32w + 20µ bytes and receiving at most
20z + 78 + 32gi + 32w + 20µ bytes. Finally, every prover Pi sends
84 bytes and receives 20z + 78 bytes.
Memory cost. Each Pi in G stores the ids (c1 . . . cs) and values
(v1 . . . vs) of s counters, its OAS secret key (sk i), its identity cer-
of O. The storage
tiﬁcate (cert(pk i)), and the public key pk
overhead for every Pi is estimated as 10s + 228 bytes, where s is
the number of counters used by O. Low-end embedded devices
targeted by SANA (e.g., the TI MSP430) have at least 1024 bytes
of non-volatile memory. SANA consumes less than 32% of this
memory, assuming that ten veriﬁers could attest G within the same
time frame.
Run-time. SANA is optimized so that the communication overhead
is constant when all provers are correctly conﬁgured. On the other
hand, the aggregation tree approach allows provers, and aggrega-
tors on the same depth of the tree, to perform their computations
in parallel. However, the OAS signature aggregation at depth d
depends on the signature creation computations at depth d + 1.
Consequently, the overall run-time of the SANA depends on the
depth (d = f (n + a) ∈ O(log(n + a))) of the aggregation tree
generated for the graph of the network, the number of neighbors of
each aggregator, and the number of bad provers. Let tsign, tagg, tver,
thash and ttx be the times needed to create and aggregate an OAS sig-
natures, verify a digital signature, create the good conﬁguration hg,
and transmit a single byte to a neighbor, respectively. The run-time
t of SANA is estimated as:
O
t ≤(cid:2)110d +
+(cid:0) d(cid:88)i=0
d(cid:88)i=0
(32wi + 20mi)(cid:3) · ttx+
pi(cid:1) · tagg + d · (tver + thash) + tsign.
Table 2 presents an evaluation of the cryptographic operations
required by our OAS, on both TyTAN [11] and a t2.micro Ama-
zon EC2 instance [3]5. Results are an average over 100 executions.
Table 3 shows the estimated execution time for each of the OAS algo-
rithms we presented in Section 4, where pi is the number of children
of a node in the aggregation tree, µ is the number of conﬁgurations
in G, and n is the number of provers in G.
Energy costs. Let Esend, Ercv, Esign, Eagg, Ever, and Ehash be the
energy required to send one byte, receive one byte, create or aggre-
gate OAS signatures, verify a digital signature, and create the good
conﬁguration hg respectively.
Then the energy consumption E(Ai) of each aggregator in G is:
E(Ai) ≤(cid:0)32 + (20z + 78)gi + 32w + 20m(cid:1) · Esend
+(cid:0)20z + 78 + 32gi + 32w + 20m(cid:1) · Ercv
And the energy consumption E(Pi) of each prover in G is:
E(Pi) ≤ 84 · Esend + (20z + 78) · Ercv + Esign + Ehash.
+ pi · Eagg + Ever + Ehash.
5Amazon EC2 is running Ubuntu server 14.04 equipped with an
Intel Xeon Processor CPU (up to 3.3 GHz), and 1 Gbyte of RAM.
+
+
Table 2: Performance of cryptographic operations
Function
TyTAN [11]
Run-time (ms)
EC2 t2.micro [3]
Run-time (ms)
(*)
921.52
1282.71
H : {0, 1}l → G1
gx, g ∈ G1
gx, g ∈ G2
ab, a, b ∈ G1
ab, a, b ∈ G2
ab, a, b ∈ GT
e : G1 · G2 → GT
(*) Operation not performed by provers or aggregators in SANA
3.39
4.71
11.60
0.32
0.33
0.07
7.67
86.48
(*)
(*)
(*)
Table 3: Performance of OAS algorithms.
EC2 t2.micro [3]
Run-time (ms)
TyTAN [11]
Run-time (ms)
Function
Sign
PubKeyGen
PubKeyAggr
SignatureAggr
AggregateVerify
2204.23
(*)
(*)
86.48 · pi
(*)
8.1
11.60
0.33 · n
0.32 · pi
0.33 ·(cid:80)µ
2 (|Si| − 1) + (8.16) · µ
(*) Operation not performed by provers or aggregators in SANA
Simulation results. We simulated SANA for large networks using
the OMNeT++ [25] event simulator. We implemented our protocol
at the application layer and used delays, based on measurements for
TyTAN (Table 2), to simulate the different cryptographic operations.
We set the communications rate for links between two devices to
250 Kbps, which is the deﬁned data rate of ZigBee – a common
communication protocol for IoT devices. We simulated different
network topologies including trees (with fan-out degree 2, 4, 8, and
12), and networks with ﬁxed number of neighbors (4, 8 and 12). We
varied the size of the network from ten to 1, 000, 000 devices. For
a fair comparison with SEDA [5], we carried out our simulations
assuming all devices in the network to be low-ended devices that
needs to be attested. Figure 5 and Figure 6 show the results of
our simulations. To better assess the performance of SANA, we
also simulated it in its targeted setting, where untrusted aggregator
devices are more powerful, i.e., 50% Raspberry Pi devices6, 30%
Intel Galileo devices7, and 20% t2.micro EC2 instances [3], and the
communication rate is 5 Mbps. We also simulated the extension
of SEDA, described in [5], that is capable of identifying malicious
devices. We denote this extension by SEDA-ID. From our results,
we can see that, if the number of bad provers is ﬁxed, then the run-
time of SANA, for a tree topologies (Figure 5(a)) and for networks
with ﬁxed number of neighbors (Figure 5(b)), is logarithmic in the
size of the network.
As shown in Figure 6(a), SEDA shows better performance com-
pared to SANA. However, while SEDA imposes a strong require-
ment on the devices participating in the attestation protocol, which
are low-end devices equipped with trusted hardware, SANA gives
a signiﬁcantly improved ﬂexibility in the type of devices that can
act as aggregators, and resiliency to a stronger attacker model. In
fact, SANA does not impose any constraint or requirement on the
devices acting as aggregators, which can be completely untrusted.
This better serves typical practical deployments, where data ag-
6Raspberry Pi has a 700 MHz CPU and 512 MByte of RAM
7Intel Galileo has a 400MHz CPU and 256 MByte of RAM
(a) Tree topologies
(b) Fixed number of neighbors
Figure 5: Performance evaluation of SANA
(a) Low-end only devices
(b) Realistic setting for SANA
Figure 6: Performance comparison between SANA and SEDA
gregation is performed by more powerful but untrusted devices in
the network, such as routers or cloud servers. Figure 6(b) further
stresses the advantage of SANA in more realistic scenarios, showing
its run-time adopting more powerful devices as aggregators. As
can be seen from Figure 6(b), the difference in the run-time of the
two schemes in such scenario, can become as little as 1.5 seconds.
Finally, while SEDA merely reports the number of devices that
failed attestation, SANA enables the veriﬁer to identify bad provers
as well as their software conﬁguration. Figure 6(b) shows the per-
formance of SEDA when modiﬁed to report the ids of devices that
failed attestation as suggested in the original paper [5]. Our perfor-
mance analysis demonstrates that, in its targeted setting, SANA can
perform as good as SEDA, regardless of the digital signature, and
DoS mitigation included. Note that, digital signatures may leverage
hardware acceleration (as already done for base symmetric crypto
operations) leading to a better performance than SEDA.
8. THRESHOLD ATTESTATION
Although constant in the size of the network, the overhead of
SANA is linear in the number of bad provers (i.e., malicious de-
vices). However, as described in Section 1, we aim at providing
a constant-time network attestation protocol, through which a re-
source constrained veriﬁer V (e.g., a smartphone) can verify a very
large (e.g., in order of millions) network of devices. In this section
we brieﬂy discuss a possible extension of SANA that allows such a
constant-time veriﬁcation.
We base this extension on the following observation: While in
some applications the number of malicious devices might be linear
in the size of the network (i.e., a certain percentage), typically the
maximum number of accepted compromise is ﬁxed. We believe
that this assumption is reasonable, since the number of devices to
tolerate is related to the redundancy rather than to the size of the
network. Consequently, we can set a threshold (i.e., an upper
bound) for the number of bad devices to verify. The threshold is