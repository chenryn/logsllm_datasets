V
V
V
V
¸
?
¸
V
?
V
?
?
¸
V
V
−
V
V
−
−
¸
V
V
V
¸
V
−
V
V
V
V
V
V
V
−
−
V
V
V
V
−
−
−
¸
−
−
−
−
−
V
?
¸
−
−
V
¸
−
?
¸
−
?
−
?
?
¸
¸
agilecrm
anima
campaignmonitor
cargo
feedpress
gemfury
github
helpscout
jetbrains
launchrock
ngrok
persona
pingdom
readme.io
shopify
smartjobboard
statuspage
strikingly
surgesh
tumblr
uberﬂip
uptimerobot
uservoice
webﬂow
wordpress
worksites
Note: We use the following notation: service not affected (¸); service is vul-
nerable (V); the conditions of redirect and PSL do not apply (−); could not evaluate,
e.g., due to payment required, no public registration form, etc. (?). Helpscout allows
to host only arbitrary active content ﬁles (js, css); Gemfury allows to host only
arbitrary passive content ﬁles (images, media, ...); Launchrock implicitly associates
every subdomain to the mapped domain, not only the www subdomain.
js https
js https
content
js
html
file https
js file https
js file https
content
js https
js file headers https
js https
js
js https
js https
js https
js https
js https
js https
js file https
js https
content
js https
js https
js https
js https
Table 5: PSL on dynamic DNS services.
Service
afraid (FreeDNS)
duckdns
dyndns
noip
securepoint
# Domains
52,443
1
293
91
10
PSL
V 0/52,443
¸ 1/1
V 287/293
V 85/91
¸ 10/10
which do not have integrity against a related-domain attacker,
hence may enable attacks like session ﬁxation and cookie forc-
ing. This increase comes from the fact that related-domain
attackers can compromise the conﬁdentiality of domain cook-
ies alone, while they can break the integrity of any cookie by
exploiting cookie shadowing [62]. The fraction of domains
not affected by integrity issues is only due to the lack of ca-
pabilities available for the subdomain we could possibly take
over. The only robust way to improve cookie integrity in this
setting is the adoption of the __Host- preﬁx, which is unfor-
tunately negligible in the wild: we only identiﬁed one cookie
using it in our dataset.
Concerning CSP, the ﬁrst observation we make is that, as
reported by previous studies [15,46,57], the majority of CSPs
in the wild suffer from incorrect conﬁgurations, voiding their
security guarantees even against web attackers. Remarkably,
however, related-domain attackers are more powerful than
traditional web attackers for real-world CSPs, being able to
bypass the protection mechanism on 139 additional domains.
This is apparent for object injection, frame injection, and
framing control. For example, we quantiﬁed the following
Note: C and I denote cookie conﬁdentiality and integrity. Numbers within
parenthesis represent the improvement compared to a web attacker; when missing, the
web attacker cannot perform the attack.
increase in the attack surface for frame injection: 45 (+7%)
domains are exploitable exclusively by controlling one of the
vulnerable subdomains identiﬁed in our dataset.
As to the other mechanisms, CORS deployments are sig-
niﬁcantly more at risk against related-domain attackers rather
than against traditional web attackers. In particular, we iden-
tify 224 (+11%) new exploitable cases, including 63 (+54%)
cases with credentials. Note that the use of CORS with cre-
dentials is particularly delicate from a security perspective,
hence the strong percentage increase in the number of vulner-
able cases is concerning. Domain relaxation, instead, can be
abused by related-domain attackers in 57 out of 97 domains
(59%) making use of this mechanism. Exploiting domain re-
laxation puts a related-domain attacker in the same origin of
the target web application, hence bypassing all web security
boundaries: this is a critical vulnerability, which deserves at-
tention. Domain relaxation is a bad security practice, which
should better be avoided in the modern Web. Finally, our anal-
ysis of postMessage shows that all sites suffering from unsafe
programming practices are already vulnerable against web
attackers, i.e., for this speciﬁc attack vector related-domain
attackers are no more powerful than traditional web attackers,
at least based on the collected data. In other words, sites either
do not enforce any security check or restrict communication
to selected individual origins: this might be a consequence of
the postMessage API granting access to origin information,
rather than site information directly.
6 Related Work
Related-Domain Attackers. The notion of related-domain
attacker was ﬁrst introduced by Bortz, Barth, and Czeskis [9].
Their work identiﬁed the security risks posed by related do-
mains against (session) cookies and proposed a possible solu-
tion called origin cookies. A similar defense mechanism, i.e.,
USENIX Association
30th USENIX Security Symposium    2929
the __Host- preﬁx, was eventually integrated into major web
browsers. Other than that, related-domain attackers received
only marginal attention from the security community, with a
few notable exceptions. Zheng et al. discussed the security
implications of the lack of cookie integrity in many top sites,
considering both network and related-domain attackers [62].
Calzavara et al. presented black-box testing strategies for web
session integrity, including related-domain attackers in their
threat model [16]. Related-domain attackers have also been
considered in formal web security models, again in the con-
text of web sessions [13]. Our paper signiﬁcantly advances the
understanding of related-domain attackers by discussing new
security threats, which go beyond web sessions and have been
quantiﬁed in the wild through a large-scale measurement.
Attacking Subdomains. Subdomain takeover is an infamous
attack, which has been covered by a body of work. Liu et
al. [33] studied the threat posed by dangling DNS records,
e.g., records that contain aliases to expired domains or point-
ing to IP addresses hosted on cloud services. The authors
performed a large-scale analysis that uncovered the existence
of hundreds of dangling records among the subdomains of the
top 10k sites of Alexa and under the .edu and .gov zones.
With respect to [33], we improved the subdomain enumeration
part by a factor of 13 and increased the number of analyzed
services from 9 to 31. Also, the paper does not extensively
analyze the web security implications of subdomain takeover.
Borgolte et al. [8] improved on the results of [33] concerning
deprovisioned cloud instances and proposed an extension of
the ACME protocol used by some CAs for domain valida-
tion (e.g., Let’s Encrypt). Schwittman et al. [48] studied these
domain validation techniques and discovered several vulner-
abilities that could be exploited by attackers to obtain valid
certiﬁcates for domains they do not own.
Liu et al. [34] proposed a technique to detect shadowed
domains used in malware distribution campaigns, i.e., legit-
imate domains that are compromised to spawn an arbitrary
number of subdomains after taking control of the DNS con-
ﬁguration panel at the registrar. Alowaisheq et al. [5] recently
demonstrated a domain hijacking attack that relies on the ex-
ploitation of stale NS records. Zhang et al. [61] showed how
a domain with HTTPS misconﬁgurations can be abused by
a network attacker to force the communication over HTTP
with its related domains. However, the authors consider two
domains as related if they share the same TLS certiﬁcate,
which differs from the deﬁnition considered in this work.
A large body of works studied the problem of domain im-
personation (e.g., [4, 28, 45]) where attackers trick users to
interact with their malicious websites by using domain names
that mimic those of honest sites. An example is provided by
doppelganger domains [60] which are spelled similarly to
legitimate subdomain names except for the dots that separate
the components of the domain name. We consider all these
threats out of the scope of our analysis, as they have different
security implications than the vulnerabilities we discuss.
Web Measurements. Meiser et al. [35] studied the cross-
origin data exchange practices of 5k websites to assess to
which extent their security could be affected by the presence
of an XSS vulnerability on one of their communication part-
ners. In our work, we study a similar problem, but we restrict
our focus to related domains, and we consider other mecha-
nisms that are out of scope for [35], e.g., CSP. Chen et al. [18]
performed a large-scale measurement of CORS misconﬁgu-
rations. Among the 480k domains that they analyzed, they
discovered that 27.5% of them are affected by some vulner-
ability and, in particular, 84k trust all their subdomains and
can thus be exploited by a related-domain attacker. Son and
Shmatikov [50] analyzed the usage of the Messaging API on
the top 10k Alexa websites. The authors found that 1.5k hosts
do not perform any origin checking on the receiving mes-
sage, while 261 implement an incorrect check: (almost) all
these checks can be bypassed from a related-domain position,
although half of them can also be bypassed from domains
with a specially-crafted name. More recently, Steffens and
Stock [51] proposed an automated framework for the analysis
of postMessage handlers and used it to perform a comprehen-
sive analysis of the ﬁrst top 100k websites of the Tranco list.
The authors discovered 111 vulnerable handlers, out of which
80 do not perform any origin check. Regarding the remaining
handlers, the authors identiﬁed only 8 incorrect origin valida-
tions, showing an opposite trend with respect to [50]. Finally,
insecure conﬁgurations of CSP have been analyzed in a num-
ber of research papers [15,46,57,58]. However, none of these
works considered the problem of related-domain attacks.
7 Conclusion
In this paper, we presented the ﬁrst analysis tailored at quanti-
fying the threats posed by related-domain attackers to the
security of web applications. We ﬁrst introduced a novel
framework that captures the capabilities acquired by such
attackers, according to the position in which they operate,
and we discuss which web attacks can be launched from that
privileged position, highlighting the advantages with respect
to traditional web attackers. We also studied the security im-
plications of 31 third-party service providers and dynamic
DNS to identify the capabilities that a related-domain attacker
acquires when taking over a domain hosted by them, and pre-
sented a novel subdomain hijacking technique that resulted in
a bug bounty of $1,000. Then, we described the design of our
automated toolchain used to assess the pervasiveness of these
threats in the wild. The toolchain consists of an analysis mod-
ule for subdomain takeover that identiﬁes which subdomains
can be hijacked by an attacker. Next, the web security module
quantiﬁes how many related domains can be attacked from
the domains discovered in the previous step. We performed
a large-scale analysis on the 50k most popular domains, and
we identiﬁed vulnerabilities in 887 of them, including major
websites like cnn.com and cisco.com. Then, we correlated
2930    30th USENIX Security Symposium
USENIX Association
for the ﬁrst time the impact of these vulnerabilities on the
security of web applications, showing that related-domain
attackers have an additional gain compared to web attackers
that goes beyond the traditional cookie issues.
Acknowledgments
We thank the anonymous reviewers for their helpful sugges-
tions. We also thank Google for sponsoring our research with
$5,000 in credits for Google Cloud Platform and Cisco Ta-
los for granting us access to a dataset that was used during
a preliminary investigation for this project. This work has
been partially supported by the European Research Council
(ERC) under the European Union’s Horizon 2020 research
(grant agreement 771527-BROWSEC); by the Austrian Sci-
ence Fund (FWF) through the project PROFET (grant agree-
ment P31621); by the Austrian Research Promotion Agency
(FFG) through the Bridge-1 project PR4DLT (grant agree-
ment 13808694) and the COMET K1 SBA.
References
[1] Puppeteer. https://pptr.dev/, 2020.
[2] J. Aas, R. Barnes, B. Case, Z. Durumeric, P. Eckersley,
A. Flores-López, J. A. Halderman, J. Hoffman-Andrews,
J. Kasten, E. Rescorla, S. Schoen, and B. Warren. Let’s
Encrypt: An Automated Certiﬁcate Authority to Encrypt
the Entire Web. In CCS, 2019.
[3] Abusix. Abuse Contact Database.
abusix.com/contactdb, 2020.
https://www.
[4] P. Agten, W. Joosen, F. Piessens, and N. Nikiforakis.
Seven Months’ Worth of Mistakes: A Longitudinal
Study of Typosquatting Abuse. In NDSS, 2015.
[5] E. Alowaisheq, S. Tang, Z. Wang, F. Alharbi, X. Liao,
and X. Wang. Zombie Awakening: Stealthy Hijacking
of Active Domains Through DNS Hosting Referral. In
CCS, 2020.
[6] A. Barth, C. Jackson, and J. C. Mitchell. Robust De-
fenses for Cross-Site Request Forgery. In CCS, 2008.
[7] N. Biasini.
Threat Spotlight: Angler Lurking in
the Domain Shadows. http://blogs.cisco.com/
security/talos/angler-domain-shadowing,
2015.
[8] K. Borgolte, T. Fiebig, S. Hao, C. Kruegel, and G. Vigna.
Cloud Strife: Mitigating the Security Risks of Domain-
Validated Certiﬁcates. In NDSS, 2018.
[9] A. Bortz, A. Barth, and A. Czeskis. Origin Cookies:
Session Integrity for Web Applications. In W2SP, 2011.
[10] S. Brin and L. Page. The Anatomy of a Large-Scale
Hypertextual Web Search Engine. Comput. Networks,