make  more  work  before  the  responder  is  ready  to  accept
the  connection.  The  idea  is  that  the  responder  can  easily
check that the initiator has indeed performed the required
Table 1: Explanations for Figure 15
Initiator generates I1
Packet transit delay
Responder generates R2t
Packet transit delay
Initiator processes R1, solves the puzzle, 
and generates I2
Packet transit delay
Responder processes I2 and generates R2 
Packet transit delay
Initiator processes R2
dT1
dT2
dT3
dT4
dT5
dT6
dT7
dT8
dT9
work  before  performing  the  computationally  expensive
public key operations. Thus, if the responder is under a re-
source exhausting DoS attack, it can partially mitigate the
effects  of  the  attack  by  requiring  legitimate  initiators  to
make some work that allows it to cheaply distinquish legit-
imate initiators from DoS packets. The idea is that if the at-
tacker  would  start  making  the  work,  it  would  slow  down
the  attack  since  the  attacker  would  need  to  spend  a  huge
number of CPU cycles to pass the puzzle test.
Figure 15 illustrates the protocol run and the measured
times; see also Table 1. In our current implementation the
responder always generates R1 in response to a received I1.
It is possible to move R1 generation into precomputation
step, thereby reducing dT3 by a large factor. 
The  measurements  were  made  between  two  800  MHz
Pentium III PCs, running over a lightly loaded 100 Mbps
switched Ethernet. The results are depicted in Tables 2 and
3.  The  ﬁgures  consist  of  averages  over  5  test  runs  ±  one
Initiator
dT1
Responder
I1
R1
I2
R2
dT2
dT3
dT4
dT6
dT7
dT8
dT5
dT9
Figure 15: The times measured
Table 2: Average message processing time in ms
K
0
7
8
9
10
dT1
1.4±0.3
1.4±0.3
1.1±0.0
1.4±0.3
1.2±0.0
dT5
dT3
115±9
  300±12  
121±12   503±99
  573±250
117±8
2300±1370
134±6
129±5
1810±470
dT7
176±10
177±10
185±16
158±3
178±14
dT9
26±3
34±6
35±5
30±7
45±5
standard deviation. While this gives good estimates for the
other  time  periods,  the  numbers  for  dT5  are  slightly  mis-
leading.  That  is,  solving  the  puzzle  is  an  indeterministic
operation,  requiring  a  random  number  of  trials.  Getting
good numbers for dT5 would require a large number of tri-
als, in the order of thousands of runs.
As can be seen from the results, the total protocol run
takes about 600 ms. About 500 ms of this is spent on the
cryptographic operations. The introduction of a low puzzle
factor K increases the average time by 200...300 ms; with
K=10 the average protocol run takes still less than 3 sec-
onds while requiring almost always over 1 second of CPU 
time for solving the puzzle. Our earlier tests indicate that
when K > 10 the time required starts to grow fast, reaching
100 seconds with K = 15.
While the base HIP/HLP implementation seems simple
enough, cleaning up and handling all the performance opti-
mizations on the TCP side requires extensive modiﬁcation
to the kernel. Basically, it looks like many of the TCP algo-
rithms  must  be  modiﬁed  to  understand  that  the  data  may
take different paths through the network, thereby compli-
cating  the  statistics  gathering  and  prediction  algorithms.
On the other hand, we expect that the SCTP implementors
have already faced these problems, and our intention is to
analyse  the  recently  released  kernel  based  SCTP  imple-
mentation to see how the problems are addressed there.
7.
Conclusions
The focus on this paper has been on modifying the TCP/IP 
architecture  to  include  a  new  cryptographic  name  space
and a new protocol layer. We have provided one possible
design, heavily based on the HLP/HIP approach. We have
also shown how the HLP/HIP approach can be easily ex-
tended to handle end-host multi-homing and mobility, and
Table 3: Average packet delay in milliseconds
dT2
0.12
dT4
0.32
dT6
0.34
dT8
0.13
how to solve the involved security problems in a way that
does not require any additional infrastructure. Furthermore,
we  have  brieﬂy  touched  the  backward  compatibility  and
API issues.
To  sum  up,  the  HLP/HIP  approach  provides  new  end-
point names that are public keys. For convenience, the pub-
lic keys are usually represented by tags derived by taking a
cryptographic hash function over the key. The tags are used
instead of IP addresses when representing the communicat-
ing parties to the applications. Along with the new names, a
new layer is established between the network and transport
layers. This layer takes care of establishing secure connec-
tion between any two end-points, translating the outgoing
end-point  names  into  IP  addresses  and  determining  the
names from the security associations on incoming packets,
and  securely  modifying  the  translation  state  to  reﬂect  the
current  multi-homing  and  mobility  status.  Additionally,
since the communication context is bound to the end-point
identiﬁers  instead  of  IP  addresses,  the  architecture  also
makes it easier to support several routing realms and to es-
tablish  state  with  any  node  in  the  network.  On  the  other
hand, the security context is not, as such, suitable as a ge-
neric  application  level  end-to-end  security  solution.  To
achieve  application  level  semantics,  the  end-points  need
additional assurances about their peers.
From the architectural point of view, in our architecture
it  is  sufﬁcient  to  have  just  one  mechanism  to  solve  the
reachability,  double-jump,  and  local  signalling  optimiza-
tion problems. From the security point of view, no separate
mechanism is needed to secure mobility related signalling
since the security inherent to the architecture sufﬁces. In a
companion paper [6] we have shown how the architecture
can be extended to address the network mobility problem.
Acknowledgements
This  work  would  have  been  impossible  without  the  pio-
neering work performed by a number of senior researchers
and engineers at the IETF, IRTF, and elsewhere. We are es-
pecially  indebted  to  the  insights  of  J. Noel  Chiappa,  and
their application in the form of the HLP/HIP proposals by
Robert Moskowitz. The insights made by the IRTF Name
Space Research Group have allowed us to further reﬁne our
thinking.
We  want  to  thank  our  colleagues  Catharina  Candolin,
Miika  Komu,  Yki  Kortesniemi,  Glenn  Morrow,  Teemu
Rinta-Aho, Göran Schultz, Vesa Torvinen, Zoltan Turanyi,
and  especially  Juha  Heinänen,  Erik  Nordmark,  and  Jarno
Rajahalme, for their constructive comments on various ver-
sions of this paper. We also want to thank Petri Jokela and
Tony Jokikyyny for their contributions to the actual text.
References
[1] R. Moskowitz, Host Identity Payload Architecture, work in
progress, Internet Draft (expired), February 2001, http://
homebase.htt-consult.com/draft-moskowitz-
hip-arch-02.txt
J. N. Chiappa, Endpoints and Endpoint Names: A Proposed
Enhancement to the Internet Architecture, unpublished note
available  at  http://users.exis.net/~jnc/tech/
endpoints.txt
[2]
[3] S. Bellovin, EIDs, IPsec and HostNAT, a presentation give at
41st  IETF  in  Los  Angeles,  California.  Steven  Bellovin,
March  1998,  http://www.research.att.com/~smb/
talks/hostnat.pdf
[4] E.  Lear, What's  In A  Name:  Report  from  the  Name  Space
Research Group, work in progress, Internet Draft draft-irtf-
nsrg-report-02.txt,  Internet  Research  Task  Force,  February
2002.
[5] E. Nordmark, MIPv6: from hindsight to foresight?, work in
progress,  Internet  Draft  draft-nordmark-mobileip-mipv6-
hindsight-00.txt, IETF November 14, 2001.
[6] P. Nikander and J. Arkko, “Delegation of Signalling Rights,”
a position paper presented at the 10th Annual Workshop on
Security Protocols, Cambridge, April 17–19, 2002.
[7] R. Moskowitz, Host Identity Payload and Protocol, work in
progress, Internet Draft draft-moskowitz-hip-05.txt, Novem-
ber  2001, 
http://homebase.htt-consult.com/
draft-moskowitz-hip-05.txt
[8] Robert  Moskowitz,  Host  Identity  Protocol  Implementation,
work in progress, Internet Draft (expired) draft-moskowitz-
hip-impl-01.txt,  Feb  2001,  http://homebase.htt-
consult.com/draft-moskowitz-hip-impl-01.txt
[9] G.  Montenegro  and  C.  Castelluccia,  SUVC  Identiﬁers  and
Addresses,  work  in  progress,  Internet  Draft  draft-montene-
gro-sucv-02.txt, November 2001.
[10] P. Bhagwat, C. Perkins and S. Tripathi, “Network Layer Mo-
bility: an Architecture and Survey”, IEEE Personal Commu-
nications Magazine, June 1996. 
[11] A. Mankin et. al., Threat Models introduced by Mobile IPv6
and  Requirements  for  Security  in  Mobile  IPv6,  work  in
progress,  Internet  Draft  draft-ietf-mobileip-mipv6-scrty-
reqts-02.txt, November 2001.
[12] P.  Nikander,  Denial-of-Service,  Address  Ownership,  and
Early Authentication  in  the  IPv6 World,  presented  at  Cam-
bridge  Security  Protocols  Workshop  2001,  April  25-27,
2001,  Cambridge  University. To  be  published  in  the  work-
shop proceedings at the LNCS series.
[13] G.  O’Shea  and  M.  Roe,  Child-proof  Authentication  for
MIPv6  (CAM),  ACM  Computer  Communications  Review,
Volume 31, Number 2, ISSN # 0146-4833, ACM April 2001.
[14] J. H. Saltzer, “On The Naming and Binding of Network Des-
tinations,”  in  Local  Computer  Networks,  edited  by  P.
Ravasio  et  al.,  North  Holland, Amsterdam,  1982,  pp.  311-
317.  Also  available  as  RFC  1498,  University  of  Southern
California, Information Sciences Institute, Marina Del Rey,
Calif., August 1993.
[15] J. H. Saltzer, David Reed and David Clark, “End-To-End Ar-
guments in System Design”, ACM Transactions on Compu-
ter Systems, Vol. 2, No. 4, November 1984.
[16] R.  Stewart  et  al.,  “Stream  Control  Transmission  Protocol
(SCTP)  Dynamic Address  Reconﬁguration”,  Internet  Draft
draft-ietf-tsvwg-addip-sctp-06.txt,  work  in  progress,  IETF,
September 2002.
[17] N.  Montavont,  T.  Noel,  and  M.  Kassi-Lahlou,  “MIPv6  for
Multiple Interfaces”, work in progress, Internet Draft draft-
montavont-mobileip-mmi-00.txt, July 2002.
[18] C.  Huitema,  Multi-homed  TCP,  work  in  progress,  Internet
Draft (expired), May, 1995, http://www.chem.ucla. 
edu/~beichuan/etcp/huitema-TCP.txt
[19] F. Teraoka et. al., LIN6: A Solution to Mobility and Multi-
Homing in IPv6, work in progress, Internet Draft draft-ter-
aoka-ipng-lin6-01.txt, 16 August 2001.
[20] M. Crawford et. al., Separating Identiﬁers and Locators in
Addresses: An Analysis of the GSE Proposal for IPv6, work
in  progress,  Internet  Draft  (expired),  draft-ietf-ipngwg-esd-
analysis-05.txt, October 1999, http://www.ietf. 
org/proceedings/99nov/I-D/draft-ietf-
ipngwg-esd-analysis-05.txt
[21] P.  Nikander,  C.  Candolin,  and  J.  Lundberg,  “From  address
orientation  to  host  orientation,”  in  Réseaux  et  systèmes
répartis, calculateurs parallèles,  ISSN 1260-3198, Special
Issue on Mobility and Internet, Volume 13, Nr:o 2, Hermes
Science Publications, Paris, France, December 2001.
[22] P.  Nikander,  “An  Address  Ownership  Problem  in  IPv6,”
work  in  progress,  Internet-Draft  (expired),  February  2001,
http://www.tml.hut.fi/~pnr/publications/
draft-nikander-ipng-address-ownership-
00.txt
[23] A.  C.  Snoeren  and  H.  Balakrishnan,  “An  End-to-End  Ap-
proach  to  Host  Mobility”,  Proc.  of  the  Sixth Annual ACM/
IEEE  International  Conference  on  Mobile  Computing  and
Networking, August 2000.
[24] C. Candolin and P. Nikander, “IPv6 Source Addresses Con-
sidered Harmful,” in Hanne Riis Nielson (ed.), Proceedings
of NordSec 2001, Sixth Nordic Workshop on Secure IT Sys-
tems,  November  1-2,  Lyngby,  Denmark,  Technical  Report
IMM-TR-2001-14, pp. 54-68, Technical University of Den-
mark, November 2001.
[25] B. Carpenter, “Architectural Principles of the Internet”, RFC 
1958, IETF June 1996.
[26] R. Moskowitz, The Need for a new Internet Namespace, in-
formal  note  in  circulation,  Robert  Moskowitz,  November
1999.
[27] T. Aura and J. Arkko, “MIPv6 BU Attacks and Defences”,
work  in  progress,  Internet  Draft  draft-aura-mipv6-bu-at-
tacks-00.txt, November 2001.