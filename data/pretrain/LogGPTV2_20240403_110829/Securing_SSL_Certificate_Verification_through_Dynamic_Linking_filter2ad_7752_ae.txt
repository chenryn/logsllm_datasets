of SSL libraries that are broken by design [19]. Brubaker
et al. speciﬁcally target SSL libraries, generating 8 million
random permutations of valid X509 certiﬁcates to perform
diﬀerential testing and discover hundreds of certiﬁcate val-
idation discrepancies [7]. Akhawe et al. [2] considered the
issues of TLS errors on the web and notices diﬀerences with
results from OpenSSL. While these studies makes recom-
mendations based on their ﬁndings, there is no mechanism
for retroﬁtting changes into existing applications, which we
make feasible with CertShim.
Large-scale automated dynamic analysis of SSL usage re-
quires knowledge of application semantics in order to trigger
SSL connections, and is therefore diﬃcult on general com-
puting platforms due to the great diversity of languages,
code paths, and SSL implementations; however, recent work
has made use of the constrained interfaces of mobile plat-
forms to perform large scale analysis. SMV-Hunter leverages
knowledge of the X509TrustManager interface and Android
WindowManager to perform user interface automation, trig-
gering SSL connections in hundreds of Android apps to de-
tect MitM vulnerabilities [43]. MalloDroid performs static
analysis to identify deviant SSL usage in thousands of apps,
but manually audited to conﬁrm vulnerabilities [16].
While the above studies oﬀered recommendations for the
general improvement of the SSL ecosystem, such as im-
proved app market testing [16], clarifying SSL APIs [19], or
communicating vulnerabilities to developers [7], they were
unable to introduce system-wide defenses to SSL vulnera-
bilities in legacy software. An exception to this is Fahl et
al’s Rethinking SSL work, in which an Android patch is in-
troduced that dramatically improves app security through
user interface warnings, device-speciﬁc developer options,
and forced certiﬁcate and hostname validation [17]. While
we also introduce a platform-wide defense, our work does
not require a manufacturer update, or even administrator
privileges, to put to use. Additionally, where pluggable cer-
tiﬁcate veriﬁcation is left to future work by Fahl et al., we
introduce four such modules, and the ability to use them
in tandem through policy-speciﬁed consensus votes. Our
tool, CertShim, works in a considerably more complex en-
vironment than the Android platform, where various SSL
implementations need be considered. Both our system and
Fahl et al’s experience compatibility issues with some pro-
grams; however, rather than rely on developers to update
their applications, we provide a policy engine that allows
for application- or domain-speciﬁc certiﬁcate handling.
Rather than re-architecting SSL stacks in the OS, other
work has invasive strategies to protecting SSL that actu-
ally closely mirror the attack behaviors. MYTHIS uses a
local MitM network proxy as an SSL security layer on an-
droid [11]; by anchoring its security in a single-path net-
work probe, MYTHIS detects rogue access points [40], but
not attacks near the server or network interior. Huang et
al. embed ﬂash scripts in browser code that “phone home”
to the server, allowing websites to detect the presence of
forged certiﬁcates [24]. CertShim also behaves similarly to
an attack by hijacking dynamic library calls; however, our
solution is a more general one that permits multiple trust
models and detects wider classes of attacks.
Various proposals in the literature adopt a similar deploy-
ment strategy to CertShim. Provos et al. [36] implement
privilege separation (Privsep), modifying a small portion of
the OpenSSH source code to permit diﬀerent parts of an ap-
plication run at diﬀerent privilege levels. They demonstrate
that this approach allowed for interoperability and negligible
performance costs. Watson et al. [46] present Capsicum, a
capability-based sandboxing mechanism for UNIX, through
the introduction of a library that replaces basic UNIX op-
erations such as fork and exec. They present Capsicum-
compliant versions of several popular utilities (e.g.
tcp-
dump, gzip), and perform microbenchmarking to demon-
strate small overheads on the modiﬁed system calls. The
DNSSEC-Tools project provided Libval, a shim for the DNS
library that facilitated the rapid adoption of DNSSEC [44].
Our work diﬀers from the Libval in that we target multi-
ple SSL implementations used by a greater diversity of pro-
grams, override additional functions in the Linux networking
stack to track SSL ﬂow context, and employ a modular de-
sign that supports multiple veriﬁcation methods.
8. CONCLUSION
This paper has introduced CertShim, a mechanism that
immediately improves the security of Internet communica-
tions by interposing on SSL APIs, and even permits the
retroﬁtting of legacy software to support SSL trust enhance-
ments such as Convergence and DANE. Moreover, we have
presented a practical mechanism for polling the results of
multiple veriﬁcation methods, further promoting the adopt-
ability of CA alternatives by overcoming their usage lim-
itations. We have also shown that 94% of the SSL us-
age in Ubuntu’s most commonly installed packages are sup-
ported by CertShim, and that CertShim secures applica-
403tions against some of the most infamous SSL vulnerabilities
explored in the literature. This work signiﬁcantly increases
system-wide security of SSL communications in non-browser
software, while simultaneously reducing the barriers to eval-
uating and adopting the myriad alternative proposals to the
certiﬁcate authority system.
Acknowledgments
We would like to thank Paul van Oorschot, Jeremy Clark,
Patrick Traynor, and Boyana Norris for their valuable com-
ments and insight. This work is supported in part by the
US National Science Foundation under grant numbers CNS-
1118046 and CNS-1254198. Braden Hollembaek was funded
in part through an NSF REU supplement.
Availability
Source code for CertShim will be made available from our
lab website at http://sensei.ufl.edu.
9. ADDITIONAL AUTHORS
Abdulrahman Alkhelaiﬁ, University of Oregon.
10. REFERENCES
[1] libconﬁg - c/c++ conﬁguration ﬁle library. Available:
http://www.hyperrealm.com/libconfig/.
[2] Akhawe, D., Amann, B., Vallentin, M., and
Sommer, R. Here’s My Cert, So Trust Me, Maybe?
Understanding TLS Errors on the Web. In Proceedings
of the 22nd International World Wide Web Conference
(WWW 2013) (Rio de Janeiro, Brazil, May 2013).
[3] Alicherry, M., and Keromytis, A. D.
Doublecheck: Multi-path veriﬁcation Against
Man-in-the-Middle Attacks. In Computers and
Communications, 2009. ISCC 2009. IEEE Symposium
on (2009), IEEE, pp. 557–563.
[4] Amann, B., Sommer, R., Vallentin, M., and
Hall, S. No Attack Necessary: The Surprising
Dynamics of SSL Trust Relationships. In ACSAC ’13:
Proceedings of the 29th Annual Computer Security
Applications Conference (Dec. 2013).
[5] Arkko, J., and Nikander, P. Weak Authentication:
How to Authenticate Unknown Principals without
Trusted Parties. In Security Protocols,
B. Christianson, B. Crispo, J. Malcolm, and M. Roe,
Eds., vol. 2845 of Lecture Notes in Computer Science.
Springer Berlin Heidelberg, 2004, pp. 5–19.
[6] Bernat, A. R., and Miller, B. P. Anywhere,
Any-time Binary Instrumentation. In Proceedings of
the 10th ACM SIGPLAN-SIGSOFT Workshop on
Program Analysis for Software Tools (New York, NY,
USA, 2011), PASTE ’11, ACM, pp. 9–16.
[7] Brubaker, C., Jana, S., Ray, B., Khurshid, S.,
and Shmatikov, V. Using Frankencerts for
Automated Adversarial Testing of Certiﬁcate
Validation in SSL/TLS Implementations. In
Proceedings of the 2014 IEEE Symposium on Security
and Privacy (San Jose, CA, May 2014).
[8] Buck, B., and Hollingsworth, J. K. An API for
Runtime Code Patching. Int. J. High Perform.
Comput. Appl. 14, 4 (Nov. 2000), 317–329.
[9] Carly, R. Internet Security provider Comodo’s CEO
Named “Entrepreneur of the Year” by Info Security
Products Guide. Available:
http://www.comodo.com/news/press_releases/
2011/02/comodo-CEO-entrepreneur-of-the-Year-
infosecurity-global-excellence-award.html,
February 2011.
[10] Clark, J., and van Oorschot, P. C. SoK: SSL and
HTTPS: Revisiting Past Challenges and Evaluating
Certiﬁcate Trust Model Enhancements. In Proceedings
of the 2013 IEEE Symposium on Security and Privacy
(San Francisco, CA, May 2013).
[11] Conti, M., Dragoni, N., and Gottardo, S.
MITHYS: Mind The Hand You Shake - Protecting
Mobile Devices from SSL Usage Vulnerabilities. In
Security and Trust Management, R. Accorsi and
S. Ranise, Eds., vol. 8203 of Lecture Notes in
Computer Science. Springer Berlin Heidelberg, 2013,
pp. 65–81.
[12] Ducklin, P. The TURKTRUST SSL Certiﬁcate
Fiasco – What Really Happened, and What Happens
Next? Available: http:
//nakedsecurity.sophos.com/2013/01/08/Available:
the-turktrust-ssl-certificate-fiasco-what-
happened-and-what-happens-next/, January 2013.
[13] Eastlake, D., et al. Transport Layer Security
(TLS) Extensions: Extension Deﬁnitions.
[14] Eckersley, P. Sovereign Key Cryptography for
Internet Domains, 2011.
[15] Edge, J. Mozilla and CNNIC. Available:
http://lwn.net/Articles/372386/, February 2010.
[16] Fahl, S., Harbach, M., Muders, T.,
Baumg¨artner, L., Freisleben, B., and Smith, M.
Why Eve and Mallory Love Android: An Analysis of
Android SSL (in)Security. In Proceedings of the 2012
ACM Conference on Computer and Communications
Security (New York, NY, USA, 2012), CCS ’12, ACM,
pp. 50–61.
[20] Gibbs, S. Heartbleed Bug: What Do You Actually
Need to do to Stay Secure? Available:
http://www.theguardian.com/technology/2014/
apr/10/heartbleed-bug-everything-you-need-to-
know-to-stay-secure.
[21] Grigg, I. VeriSign’s Conﬂict of Interest Creates New
Threat. Financial Cryptography 1 (September 2004).
[22] Hickman, K., and Elgamal, T. The SSL Protocol.
Netscape Communications Corp 501 (1995).
[23] Hoffman, P., and Schlyter, J. The DNS-Based
Authentication of Named Entities (DANE) Transport
Layer Security (TLS) Protocol: TLSA. Tech. rep.,
RFC 6698, August, 2012.
[24] Huang, L.-S., Rice, A., Ellingsen, E., and
Jackson, C. Analyzing Forged SSL Certiﬁcates in the
Wild.
[25] Laurenzano, M., Tikir, M., Carrington, L., and
Snavely, A. PEBIL: Eﬃcient static binary
instrumentation for Linux. In Performance Analysis of
Systems Software (ISPASS), 2010 IEEE International
Symposium on (March 2010), pp. 175–183.
[26] Laurie, B., Langley, A., and Kasper, E.
Certiﬁcate Transparency. Available: ietf.
org-Certiﬁcate Transparency (06.01. 2013) (2013).
[27] Liang, J., Jiang, J., Duan, H., Li, K., Wan, T.,
[17] Fahl, S., Harbach, M., Perl, H., Koetter, M.,
and Smith, M. Rethinking SSL Development in an
Appiﬁed World. In Proceedings of the 2013 ACM
SIGSAC Conference on Computer and
Communications Security (New York, NY, USA,
2013), CCS ’13, ACM, pp. 49–60.
[18] Fisher, D. Microsoft Revokes Trust in Five Diginotar
Root Certs. Wired. Available:
http://threatpost.com/microsoft-revokes-trust-
five-diginotar-root-certs-mozilla-drops-trust-
staat-der-nederland-cert, September 2011.
[19] Georgiev, M., Iyengar, S., Jana, S., Anubhai,
R., Boneh, D., and Shmatikov, V. The Most
Dangerous Code in the World: Validating SSL
Certiﬁcates in Non-Browser Software. In Proceedings
of the 2012 ACM conference on Computer and
communications security (Raleigh, NC, USA, 2012),
CCS ’12, ACM, pp. 38–49.
404and Wu, J. When HTTPS Meets CDN: A Case of
Authentication in Delegated Service.
[28] Marlinspike, M. More tricks for defeating SSL in
practice. Black Hat USA (2009).
[29] Marlinspike, M. New tricks for defeating SSL in
practice. BlackHat DC (Feb. 2009).
[30] Marlinspike, M. SSL and the Future of
Authenticity. Black Hat USA (2011).
[31] Marlinspike, M. Trust Assertions for Certiﬁcate
Keys.
[32] Mills, E. Comodo: Web Attack Broader Than
Initially Thought. CNET. Available: http:
//news.cnet.com/8301-27080_3-20048831-245.
html?part=rss&tag=feed&subj=InSecurityComplex,
March 2011.
[33] Myers, M. Revocatoin: Options and challenges. In
Financial Cryptography (1998), Springer, pp. 165–171.
[34] Pennarun, A., Allombert, B., and
Reinholdtsen, P. Ubuntu Popularity Contest.
Available: http://popcon.ubuntu.com/.
[35] Pieter Lexis. SWEDE - A Tool To Create and
Verify TLSA (DANE) Records. Available:
https://github.com/pieterlexis/swede.
[36] Provos, N., Friedl, M., and Honeyman, P.
Preventing Privilege Escalation. In Proceedings of the
12th USENIX Security Symposium (2003),
pp. 231–242.
[37] Psyced.org. Certiﬁcate Patrol. Available:
http://patrol.psyced.org/.
[38] Rivest, R. L. Can We Eliminate Certiﬁcate
Revocation Lists? In Financial Cryptography (1998),
Springer, pp. 178–183.
[39] Sandvik, R. Security Vulnerability Found in
Cyberoam DPI Devices (CVE-2012-3372). Available:
https://blog.torproject.org/blog/security-
vulnerability-found-cyberoam-dpi-devices-cve-
2012-3372, July 2012.
[40] Shetty, S., Song, M., and Ma, L. Rogue Access
Point Detection by Analyzing Network Traﬃc
Characteristics. In Military Communications
Conference, 2007. MILCOM 2007. IEEE (Oct 2007),
pp. 1–7.
[41] Singel, R. Law Enforcement Appliance Subverts SSL.
Available: http://www.wired.com/threatlevel/
2010/03/packet-forensics, March 2010.
[42] Soghoian, C., and Stamm, S. Certiﬁed Lies:
Detecting and Defeating Government Interception
Attacks Against SSL. In Financial Cryptography and
Data Security. Springer, 2012, pp. 250–259.
[43] Sounthiraraj, D., Sahs, J., Greenwood, G., Lin,
Z., and Khan, L. SMV-HUNTER: Large Scale,
Automated Detection of SSL/TLS Man-in-the-Middle
Vulnerabilities in Android Apps. In Proceedings of the
19th Network and Distributed System Security
Symposium. (2014).
[44] SPARTA, Inc. DNSSECTools: DNSSEC Software
Libraries and Tools. Available:
http://www.dnssec-tools.org/.
[45] Vratonjic, N., Freudiger, J., Bindschaedler,
V., and Hubaux, J.-P. The Inconvenient Truth
About Web Certiﬁcates. In Economics of Information
Security and Privacy III, B. Schneier, Ed. Springer
New York, 2013, pp. 79–117.
[46] Watson, R., Anderson, J., Laurie, B., and
Kennaway, K. Capsicum: Practical Capabilities for
UNIX. In Proceedings of the 19th USENIX Security
Symposium (2010).
[47] Wendlandt, D., Andersen, D. G., and Perrig,
A. Perspectives: Improving SSH-style Host
Authentication with Multi-Path Probing. In USENIX
2008 Annual Technical Conference (Boston, MA,
2008), ATC’08, pp. 321–334.
405