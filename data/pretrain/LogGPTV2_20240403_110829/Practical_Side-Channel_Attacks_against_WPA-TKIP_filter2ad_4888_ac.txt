a Wi-Fi frame, the Linux kernel will first attempt to perform WEP
decryption in the h_decrypt handler. This process will verify if
the ICV is correct, and if not, the MSDU will be dropped silently.
However, if correct, the next handlers will be called. One of these
handlers inspects the power save flags in the MAC header, to check
if the client is entering power saving mode. Therefore, if the AP has
marked the client as being in power saving mode, we know that the
ICV of the TKIP frame was correct. Using the PS-Poll message, the
adversary can test if a client has entered power saving mode. That
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand419Client
Adversary
AP
TKIP-Frame
Chopped-Frame
PS-Poll
Buffered/Null-Data
R
e
p
e
a
t
e
d
Figure 4: Abusing power management features of Linux’s
Wi-Fi stack to determine whether the ICV of the TKIP frame
is correct. When the AP replies using a Null-Data frame, the
ICV is correct. If the AP does not reply, the ICV is wrong.
is, if the client entered power saving mode, the AP replies to the PS-
Poll frame with the buffered data, or with a Null-frame. However, if
the client was not marked as being in power saving mode, the AP
will ignore the PS-Poll frame. Thus, if the PS-Poll message results
in a reply from the AP, we know the ICV was correct.
To summarize, our side-channel attack works as follows. First,
the adversary captures a TKIP-encapsulated message from the client
to the Access Point (AP). The frame will be used to perform a
ChopChop attack, and may be received by the AP, a MITM position
is not required. In order to use the power management oracle, the
adversary has to modify the frame as follows:
• Set the Power Management bit in the MAC header. This will
notify the AP that the client is entering power saving mode.
• Change the Quality of Service (QoS) Traffic Identifier (TID).
This allows us to use a channel with a lower TKIP Sequence
Counter (TSC), passing the TSC verification. If no QoS header
is present, one can be inserted.
• Set the fragment number to one. This indicates the MPDU is
fragmented, and that the Michael MIC is present in the last
fragment. Therefore, the AP will not verify the Michael MIC
for this frame, effectively bypassing TKIP countermeasures.
With these changes to the TKIP frame, the adversary can perform
a ChopChop attack to recover the plaintext message. In order to
verify if a chopped-off byte is guessed correctly, a PS-Poll message
is sent to the AP. The PS-Poll message is spoofed as having the
source address of the target client. If the guessed byte was correct,
the AP will reply with buffered data or a null-data frame. If the
guessed byte was wrong, the AP silently drops the chopped TKIP
frame, and hence will not send any response to the PS-Poll frame.
Repeatedly chopping off bytes, and guessing their values using the
above technique, allows an adversary to decrypt the frame. Figure 4
shows a simplified illustration of the attack method.
We evaluated the attack against a Linux machine running hostapd.
Similar to the original Beck and Tews attack, our goal is to decrypt
an ARP request. After using the power management oracle to de-
crypt its content, we can recover the Michael MIC key, which is
possible because the Michael algorithm is invertible [39]. However,
unlike Tews and Beck, it is not necessary to wait one minute after
each successfully decrypted byte, since our attack method does not
trigger TKIP countermeasures (i.e. Michael MIC Failure Reports). As
a result, our attack is significantly faster to execute. Comparing to
Tews and Beck, we can save 11 minutes of waiting for the 1-minute
TKIP time-out countermeasure to end, reducing the execution time
of our attack to 1 to 4 minutes.
From Linux kernel version 3.12-rc1 onward, the order of the Re-
ceive (Rx) handlers was changed, and the decryption handler was
called after processing the power save flags in MAC headers. As a
result, a client will be marked as asleep if the power management
flag was set in the MAC header, regardless of successful decryption.
Therefore the oracle will no longer work. We remark that the kernel
version in which our oracle is no longer present, Linux 3.12, was
released on November 2, 2013. From March 2015 onward, usage of
TKIP is being partly discouraged by the Wi-Fi Alliance [7]. There-
fore, we argue that devices which have TKIP enabled by default, are
likely to be running an older and therefore vulnerable kernel ver-
sion. Regardless, we will describe another side-channel technique
in Section 5.2 that also works against newer Linux kernel version.
4.4 MediaTek Fragmentation Oracle
Against MediaTek, we discovered an oracle that leverages the way
in which fragmented frames are cached and reassembled. Recall
that large MSDUs are fragmented into MPDUs, and each MPDU is
given a fragment number which is increased monotonically. In all
but the last frame, the “More Fragments” flag is set in the frame’s
MAC header. Upon receipt of a fragmented frame, it will be cached
by the receiver for later re-assembling. Upon receipt of the last
fragment, the receiver re-assembles and processes the message.
Interestingly, if the AP receives a fragmented TKIP frame with a
correct ICV, this fragment will overwrite the previous fragment in
the cache, or may even cause the fragment cache to be cleared. We
will show how this behavior can be abused as a side-channel.
Analyzing the side-channel revealed an additional vulnerability,
where the AP accepts plaintext frames from an authenticated client,
independent of wether the client uses WPA-TKIP or AES-CCMP.
The vulnerability was verified by injecting a plaintext ARP request,
resulting in the receipt of an encrypted ARP reply. Since the AP’s
replies are encrypted, its contents are unknown to an adversary.
However, this is sufficient for an adversary to easily inject plaintext
fragmented frames to verify the effects of the fragmentation oracle.
As an advantage, this means that the adversary does not need to
fragment an additionally captured TKIP frame during an attack.
As an example, we first describe how an adversary can inject
a fragmented plaintext ARP request to the AP. ARP is used for
discovering the link layer address associated to a network layer
address. The protocol header contains, among other things, a link
and network layer addresses for the source and destination. The
field for the link layer source address is filled by the address of
the target client. During transmission, this ARP request may be
fragmented into two smaller Wi-Fi frames. Given that an AP pro-
cesses (plaintext) data frames only from authenticated clients, the
source address of the targeted client has to be spoofed. When the
AP receives and re-assembles the fragments, it will send a reply to
the spoofed hardware source address contained in the ARP request,
even if this address is non-existing (i.e. spoofed to a random ad-
dress). If the network uses encryption, such as TKIP, the AP replies
with an encrypted message, even if the ARP request was received in
plaintext. Since this works for plaintext ARP requests, the adversary
does not need prior knowledge about the TKIP key(stream).
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand420Client
Adversary
AP
TKIP-Frame
Fragment 1/2
Chopped-Frame
Fragment 2/2
ARP-Reply
R
e
p
e
a
t
e
d
Figure 5: Abusing the defragmentation code of MediaTek’s
Wi-Fi stack to determine whether the ICV of the TKIP frame
is correct. If the AP does not reply, the ICV is correct. When
the AP replies using an ARP reply, the ICV is wrong.
Our attack now works as follows. First, the adversary captures
a TKIP-encapsulated message from the client to the AP, which
may be used to perform a ChopChop attack. In order to use the
fragmentation oracle, the adversary has to modify the captured
frame. Similar to the power management oracle, the fragmentation
oracle bypasses TSC verification and TKIP countermeasures by
adjusting the QoS channel and fragment number:
• Change the Quality of Service (QoS) Traffic Identifier (TID).
This allows us to use a channel with a lower TKIP Sequence
Counter (TSC), passing the TSC verification. If no QoS header
is present, one can be inserted.
• Set the fragment number to one. This indicates the MPDU is
fragmented, and that the Michael MIC is present in the last
fragment. Therefore, the AP will not verify the Michael MIC
for this frame, effectively bypassing TKIP countermeasures.
With these changes, the adversary can perform a ChopChop at-
tack to recover the plaintext message. To verify if a chopped-off
byte is guessed correctly, the adversary sends the first fragment
of a plaintext ARP request, then the modified fragmented TKIP
frame, and finally sends the last fragment of the ARP request. If the
guessed byte was correct, the fragmented TKIP frame causes the
AP to remove the first ARP fragment from its fragmentation cache.
Upon receipt of the second ARP fragment, the AP will be unable
to reconstruct the plaintext ARP request, and therefore will not
send an ARP reply. If the guessed byte was wrong, the AP silently
drops the chopped frame. Upon receipt of the second fragment,
the AP re-assembles the ARP fragments and sends an encrypted
ARP reply to the random hardware source address provided in the
plaintext ARP request. If an adversary crafts every ARP request
with a unique hardware source address, it can easily be identified
to which fragments a reply is sent. By sniffing the network for ARP
replies to these randomly generated addresses, the correct guess
can be detected, allowing for the plaintext message to be recovered.
Figure 5 shows a simplified illustration of the attack method. The
adversary captures a TKIP-frame, which may be received by the AP,
that is, a man-in-the-middle position is not required. The chopped-
off and fragmented ARP frames are then repeatedly sent to the
AP, potentially triggering ARP replies from the AP, therefore suc-
cessfully recovering the plaintext message using the fragmentation
oracle.
We evaluated the attack against an ASUS RT-AC51U running
firmware version 3.0.0.4. A proof-of-concept attack has been imple-
mented, verifying that keystream and the client-to-AP Michael MIC
key can be recovered. The attack has not been optimized in regards
of its execution time. However, recall that the fragmentation oracle
does not trigger TKIP countermeasures, and will therefore be faster
to execute than existing attacks.
It has been shown that MediaTek devices may be vulnerable to a
downgrade attack from AES-CCMP to WPA-TKIP [35]. As a result,
clients using AES-CCMP may be downgraded to WPA-TKIP and
fall victim to our attack. Therefore it is important that one should
disable WPA-TKIP, even if it is used in combination with CCMP.
Finally, while inspecting the plaintext ARP injection vulnerabil-
ity, we found that any plaintext data packet can be injected towards
the AP. As a proof-of-concept, we created a portscanner that injects
plaintext TCP-SYN requests, resulting in the receipt of an encrypted
RESET or SYN-ACK message. These replies have different lengths,
because the SYN-ACK message includes an option field in its TCP
header. As a result, we can determine if a port is open or closed.
5 ABUSING HARDWARE DECRYPTION
In this section we present new side-channels attacks that are intro-
duced due to the usage of hardware decryption. Additionally, we
present two fatal vulnerabilities in OpenBSD, whose root cause is
the incorrect handling of hardware-decrypted frames.
5.1 The Impact of Hardware Decryption
During the second phase of our security analysis, we inspected
the interactions between all layers (i.e. components) of the Wi-Fi
stack. While doing this we discovered that the hardware decryp-
tion support of Wi-Fi chips can introduce additional side-channel
vulnerabilities. Moreover, we observed that OpenBSD incorrectly
handled fragmented frames that underwent hardware decryption,
resulting in a trivial frame forging attack.
Our hardware-based decryption side-channels enable an adver-
sary to determine whether the ICV of a TKIP frame is correct. Sim-
ilar to our previous side-channels, this can then be used to guess
and verify the value of a chopped off byte. The main idea behind
the side-channels is that certain drivers drop an incoming frame
if hardware decryption failed. Note that with TKIP, a (hardware)
decryption failure occurs if the ICV is incorrect.1 In other words,
frames are only forwarded to the Wi-Fi subsystem of the operating
system if the ICV of the TKIP frame is correct. Any detectable side-
effect of forwarding a frame to the Wi-Fi subsystem can therefore
be abused to determine if the ICV of a TKIP frame is correct. In the
remainder of his section, we discuss and evaluate various of these
side-effects, most of which are implementation-dependent.
5.2 Linux Power Management
One side-effect of forwarding the frame to the Wi-Fi subsystem of
the Linux operating system, is that the power management flags
of the frame are inspected. Recall that our power-management
side-channel of Section 4.3 abused this side-effect to determine
1 TKIP uses an authenticate-then-encrypt construction, meaning a frame’s authenticity
can only be checked after decryption. When the ICV is correct but the Michael MIC is
wrong, there was no decryption failure, but an authentication failure.
Session 5B: Fault Attacks and Side Channel AnalysisAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand421Listing 2: Processing frames on Linux kernel 3.12 and above
when hardware decryption is used.
1 void process_received_frame() {
2
3
4
5
6
7
8
9
10
11
12
13
14 }
// 1. Driver-specific: drop frame if hardware decryption failed
if (hardware_decrypt_failed) return;
// 2. Retransmitted (plaintext) frames are dropped
CALL_RXH(ieee80211_rx_h_check_dup);
// 3. The power management flags are inspected
CALL_RXH(ieee80211_rx_h_sta_process)
// 4. Optional software decryption, and TSC replay check
CALL_RXH(ieee80211_rx_h_decrypt)
// 5. Defragment fragmented frames
CALL_RXH(ieee80211_rx_h_defragment);
// 6. Check authenticity and report possible MIC failures
CALL_RXH(ieee80211_rx_h_michael_mic_verify)
if the ICV of a TKIP frame is correct. However, this attack only
worked against Linux kernel 3.11 and lower, because newer kernels
decrypted the frame in software after, instead of before, inspecting
the power management flags of received frames. This different
order of operations in newer kernels effectively mitigated our attack.
However, with hardware decryption, the Wi-Fi chip again decrypts
frames before the operating system receives and inspects the power
management flags. More concretely, Listing 2 shows the actions
that a received frame undergoes on Linux 3.12 and above, assuming
that hardware decryption is enabled.