∆; Γ; π ‘ inr e : (t1 + t2)l
∆; Γ; π1 ‘ e : (t1 + t2)l ∆; Γ; π1|l ‘ v1 : ([π2] t1 → t)l
∆ ‘ π2 (cid:22) (π1|l)
∆; Γ; π1|l ‘ v2 : ([π2] t2 → t)l
∆; Γ; π1 ‘ case e v1 v2 : t t l
∆; Γ, x : t1; π ‘ e : t2 ∆ ‘ l
∆; Γ;· ‘ λx: t1. e : ([π] t1 → t2)l
∆; Γ; π1 ‘ e1 : ([π2] t1 → t2)l ∆; Γ; π1 ‘ e2 : t1 ∆ ‘ π2 (cid:22) (π1|l)
∆; Γ; π1 ‘ e1 e2 : t2 t l
∆ ‘ l
∆; Γ; π ‘ X : (PX)l
∆, α (cid:22) p; Γ; π ‘ e : t α 6∈ dom(∆) ∆ ‘ l
∆; Γ; π ‘ Λα (cid:22) p. e : (∀α (cid:22) p. t)l
∆; Γ; π ‘ e : (∀α (cid:22) p2. t)l ∆ ‘ p1 (cid:22) p2
∆; Γ; π ‘ e [p1] : t t l
∆; Γ; π ‘ e : t{p/α} ∆ ‘ p (cid:22) q ∆ ‘ l
∆; Γ; π ‘ pack (p (cid:22) q, e) : (∃α (cid:22) q. t)l
∆; Γ; π ‘ e1 : (∃α (cid:22) p. t1)l
∆, α (cid:22) p; Γ, x : t1; π ‘ e2 : t2
α 6∈ ftv(Γ) ∪ ftv(t2)
∆; Γ; π ‘ open (α, x) = e1 in e2 : t2 t l
∆; Γ; π ‘ e : t1 ∆ ‘ t1 ≤ t2
∆; Γ; π ‘ e : t2
(T-Var)
(T-Unit)
(T-Inl)
(T-Inr)
(T-Case)
(T-Fun)
(T-App)
(T-Name)
(T-All)
(T-Inst)
(T-Pack)
(T-Open)
(T-Sub)
Fig. 7. Modiﬁed typing rules of λRP with run-time authority
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
24
Stephen Tse and Steve Zdancewic
∆ ‘ l
∆; Γ; π ‘ X{i} : Cl
:
t
∆; Γ; π ‘ e2 : (Pp2)l
∆; Γ; π ‘ e1 : (Pp1)l
∆, p1 (cid:22) p2; Γ; π ‘ e3 : t ∆ ‘ p1 (cid:22) π(delegatep1(cid:22)p2)
∆; Γ; π ‘ e1 : (Pp1)l
∆, p1 (cid:22) p2; Γ; π ‘ e3 : t ∆; Γ; π ‘ e4
∆; Γ; π ‘ if (e1 (cid:22) e2) e3 e4 : t t l
∆; Γ; π ‘ e2 : (Pp2)l
∆; Γ; π ‘ let (e1 (cid:22) e2) in e3 : t t l
∆; Γ; π ‘ e1 : Cl
∆; Γ; π ‘ e2 : (Pp)l
∆; Γ; (π, p . i)|l ‘ e3 : t ∆; Γ; π|l ‘ e4 : t
∆; Γ; π ‘ if (e1 ⇒ e2 . i) e3 e4 : t t l
∆; Γ; π ‘ e : t2 ∆ ‘ t2 − t1 = s ∆ ‘ s (cid:22) π(declassify)
∆; Γ; π ‘ declassify e t1 : t1
∆; Γ; π ‘ e : t ∆ ‘ p (cid:22) π(endorse)
∆; Γ; π ‘ endorse e p : t u {!p}
∆; Γ; π ‘ e : (Pp)l
∆; Γ; π ‘ acquire e . i : (Cl + 1l)l
(T-Cap)
(T-IfDel)
(T-LetDel)
(T-IfCert)
(T-Dcls)
(T-Endr)
(T-Acq)
Fig. 8. Additional typing rules of λRP with run-time authority
cannot declassify the argument, which is owned by Bob, unless Alice acts for Bob.
Note that the types accurately describe the security-relevant operations that may
be performed by the function.
The examples above use only static authority. To illustrate how run-time capa-
bilities are used, consider this program:
h : ∀α. [·] Pα → [·] C → [·] bool{α:!} → bool{!>}
h = Λα. λuser : Pα. λcap : C. λdata : bool{α:!}.
if (cap ⇒ user . declassify)
(declassify data bool{!>})
false
The type of h is parameterized by a principal α, and the authority constraint [·]
indicates that no static authority is needed to call this function. Instead, h takes
a run-time principal user (whose static name is α), a capability cap, and some
data private to α. The body of the function tests whether capability cap provides
evidence that user has granted the program the declassify privilege. If so, the
ﬁrst branch is taken and the data is declassiﬁed to the bottom label. Otherwise h
simply returns false.
The program h illustrates the use of the declassify e t expression, which de-
classiﬁes the expression e of type t0 to have type t, where t0 and t diﬀer only in their
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
25
(A, X1 (cid:22) X2), e3 −→ (A, X1 (cid:22) X2), e0
3
A, let (X1 (cid:22) X2) in e3 −→ A, let (X1 (cid:22) X2) in e0
3
A, let X1 (cid:22) X2 in * −→ A, *
A, let X1 (cid:22) X2 in inl v −→ A, inl v
A, let X1 (cid:22) X2 in inr v −→ A, inr v
A, let X1 (cid:22) X2 in X −→ A, X
A, let X1 (cid:22) X2 in X{i} −→ A, X{i}
A, (let X1 (cid:22) X2 in v1) v2 −→ A, let X1 (cid:22) X2 in (v1 v2)
A, (let X1 (cid:22) X2 in v) [p] −→ A, let X1 (cid:22) X2 in (v [p])
A, open (α, x) = (let X1 (cid:22) X2 in v) in e
−→ A, let X1 (cid:22) X2 in (open (α, x) = v in e)
A ‘ X1{i} ⇒ X2 . i
A, if (X1{i} ⇒ X2 . i) e3 e4 −→ A, e3
A ‘ X1{i} 6⇒ X2 . i
A, if (X1{i} ⇒ X2 . i) e3 e4 −→ A, e4
A, declassify v t −→ A, v
A, endorse v p −→ A, v
E ‘ X{i}
A, acquire X . i −→ A, inl X{i}
E 6‘ X{i}
A, acquire X . i −→ A, inr *
(E-LetDel)
(E-LetUnit)
(E-LetInl)
(E-LetInr)
(E-LetName)
(E-LetCap)
(E-LetApp)
(E-LetInst)
(E-LetOpen)
(E-IfCertYes)
(E-IfCertNo)
(E-Dcls)
(E-Endr)
(E-AcqYes)
(E-AcqNo)
Fig. 9. Additional evaluation rules of λRP with run-time authority
security label annotations. The judgment ∆ ‘ t1 − t2 = s indicates that under the
acts-for hierarchy ∆, the type t1 may be declassiﬁed to type t2 using the authority
of the principals in s. We call s the set of declassiﬁcation requisites (Figure 10),
which is computed by traversing through the types and collecting the authority in
labels:
s0 = {p | ∆ ‘ d2(p) (cid:22) d1(p), ∆ ‘ d1(p) 6(cid:22) d2(p)}
∆ ‘ {d1!s} − {d2!s} = s0
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
26
Stephen Tse and Steve Zdancewic
∆ ‘ u − u0 = s1 ∆ ‘ l − l0 = s2
∆ ‘ ul − u0
l0 = s1 ∪ s2
∆ ‘ 1 − 1 = ·
1 = s1 ∆ ‘ t2 − t0
1 + t0
∆ ‘ t1 − t0
∆ ‘ (t1 + t2) − (t0
∆ ‘ t0
∆ ‘ (t1 → t2) − (t0
2 = s2
2) = s1 ∪ s2
2 = s2
2) = s1 ∪ s2
1 − t1 = s1 ∆ ‘ t2 − t0
1 → t0
∆ ‘ Pp − Pp = ·
∆, α (cid:22) p ‘ t − t0 = s
∆ ‘ (∀α (cid:22) p. t) − (∀α (cid:22) p. t0) = s
s0 = {p | ∆ ‘ d2(p) (cid:22) d1(p), ∆ ‘ d1(p) 6(cid:22) d2(p)}
∆ ‘ {d1!s} − {d2!s} = s0
Fig. 10. Declassiﬁcation requisites
(D-Label)
(D-Unit)
(D-Sum)
(D-Fun)
(D-Name)
(D-All)
(D-Label)
For example, ‘ bool{Alice:!}−bool{Alice:Bob!} = {Alice}, because Alice’s author-
ity is needed to add Bob as a reader. T-Dcls in Figure 8 is used when typechecking
the declassify expression.
The typing judgments for run-time authority are of the form ∆; Γ; π ‘ e : t,
where π is the set of static capabilities available within the expression e. Given
static capabilities π, we write π(i) for the set of principals that have granted the
permission i; so π(i) = {p | p . i ∈ π}. In the rule T-Dcls, s is the set of principals
whose authority is needed to perform the declassiﬁcation, therefore the condition
∆ ‘ s (cid:22) π(declassify) says that the set of declassify-granting principals in the
static authority is suﬃcient to act for s.
For robustness [Zdancewic and Myers 2001; Zdancewic 2003; Myers et al. 2004],
we must ensure that the integrity of the data is reﬂected in the set of static capabil-
ities available.6 To do so, we deﬁne an operator π|l, that restricts the capabilities
in π to just those whose owners have delegated to principals present in the integrity
portion of the label l. With respect to hierarchy ∆, the formal deﬁnition is:
π|{d!s} = {p . i ∈ π | ∃q ∈ s. ∆ ‘ p (cid:22) q}
The restriction operator occurs in the typing rules of branching constructs. For
example, T-Case in Figure 7 is the modiﬁed form of T-Case in Figure 3 for the
case expression.
6Although we do not carry out a robustness proof here, we expect that the methodology developed
by Myers et al. [2004] could be applied in this setting as well.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
27
The rule for capability certiﬁcation also uses the restriction operator, but it also
adds the permission p . i before checking the branch taken when the capability
provides privilege i (T-IfCert in Figure 8).
Note that the restriction is applied after the permission is added, to prevent
the specious ampliﬁcation of rights based on untrustworthy capabilities. At run
time, the validity of a capability under the current acts-for hierarchy determines
which branch of the certiﬁcation expression is taken (E-IfCertYes and E-IfCertNo
in Figure 9).
To verify that a capability grants permission for principal X2 to perform some
privileged operation i, the run-time system determines whether the issuer X1 of
the capability acts for the principal X2 wanting to use the capability. It can be
implemented simply as A ‘ X2 (cid:22) X1, but we want to keep the operation abstract
and show a PKI implementation in Section 6.
Function types capture the static capabilities that may be used in the body of the
function, and the modiﬁed rule for typechecking function application requires that
the static capabilities π of the calling context are suﬃcient to invoke the function
(T-Fun and T-App in Figure 7).
Finer-grained control of declassiﬁcation can be incorporated into this framework
by reﬁning the declassify privilege identiﬁer with more information, for instance,
to give upper bounds on the data that may be declassiﬁed or distinguish between
declassify expressions applied for diﬀerent reasons (see Section 6.2).
4.2 Endorsement and delegation
Endorsement is a downgrading mechanism for integrity policies, in the same way
that declassiﬁcation is a downgrading mechanism for conﬁdentiality policies. An
endorsement by principal p expresses the trust of p about the integrity of some
data, and hence requires p’s permission. Such an operation, like type-casts and
declassiﬁcation, does not have any run-time eﬀect. We use the privilege identiﬁer
endorse ∈ I for such a privilege and use the expression endorse e p to express that
p endorses the integrity of e (see Figure 6). Its typing and evaluation (T-Endr and
E-Endr in Figure 8 and Figure 9) rules parallel those for declassiﬁcation (T-Dcls
and E-Dcls).
Delegation, on the other hand, allows the acts-for hierarchy to change during
program execution—so far, the operational semantics has been given in terms of a
ﬁxed A. When p delegates to q, then q may read or declassify all data readable or
owned by p; therefore, delegation is a very powerful operation that should require
permission from p.
We add a new expression let (e1 (cid:22) e2) in e3 that allows programmers to
extend the acts-for hierarchy in the scope of the expression e3. Here, e1 and e2
must evaluate to run-time principals. Assuming their static names are p and q,