202 Accepted, from the IMS server. Moreover, the recipient,
XXX-YYYY-1613 2, as shown in Line 1, indeed receives it.
Note that though some information items are required to forge
the header and send out the forged message, all of them can be ob-
tained without root access. The major ones are the IMS server’s IP
address and the UDP socket’s destination port number. The former
can be fetched from the routing table and the latter is ﬁxed for each
carrier.
We next validate this vulnerability for OP-II, but root access is
required. There are three major steps to do the message injection.
First, we fetch the information of the IPSec security using the com-
mand, ip xfrm state.
It includes the HMAC-SHA1/SHA2
keys for integrity protection and authenticity, and the SPI (Security
Parameter Index) value of ESP (Encapsulating Security Payload).
Second, we conﬁgure XFRM with the IPSec information and the
SIP session identiﬁer of TCP (i.e., 5-tuple address). Third, we use
RAW SOCKET to create an IP/TCP packet with the 5-tuple address
to carry the forged SIP message, and then send it out through the
IMS-speciﬁc interface. Before being sent out, the packet is auto-
matically encapsulated into an IPSec packet due to the XFRM con-
ﬁguration. Afterwards, a response message with the same status
202 Accepted is received.
Causes and lessons.
Although the data-plane communication
2For the privacy concern, only the last four digits are shown.
mation dialog at the sender phone, after the application sends out
an SMS message to the number.
Causes and lessons.
The root cause is that the SMS permission
control relies on the SMS API to monitor the SMS activities, but
the way of using network sockets to send out SMS messages is
neither monitored nor prevented. Though SMS has been shifted
to the IMS-based SMS, the security mechanisms at the phone are
not updated with its deployment. Moreover, the loopholes that the
IMS-based SMS may open in the existing system are not carefully
examined and addressed by mobile OS.
(V4) Spoofable SMS Messages at IMS Server
4.2.2
To ensure that the sender identiﬁer speciﬁed in an SMS message
belongs to its genuine sender, it is not an issue for the CS-based
SMS. It is because the control information including the sender
identiﬁer is speciﬁed by the CS gateway in the core network. How-
ever, the control information of the IMS-based SMS is allowed to
be speciﬁed at the phone, so the identiﬁer may be spoofed by mali-
cious users. Once the IMS server does not check the sender identi-
ﬁer of each incoming SIP message, the spoofed SMS messages can
be delivered to their recipients.
Validation. We discover that this vulnerability works for OP-I
but not for OP-II. In order to pass the integrity check at the IMS
server of OP-I, we identify that there are eight header ﬁelds which
have to be ﬁlled correctly in a forged SIP message. The values
of the other ﬁelds do not affect the result of the integrity check.
As shown in Figure 3, those eight ﬁelds are Request-Line at Line
1, Route at Line 3, Via at Line 4, From at Line 6, To at Line 7,
P-Preferred-Identify at Line 9, Call-ID at Line 14, and Content-
Length at Line 15. They respectively require the recipient’s phone
number, the IMS server’s address, the sender’s IP address, the sender’s
phone number, the recipient’s phone number, the sender’s phone
number, the sender’s IP address, and the message body size. For
the message body, there are only two ﬁelds required to be ﬁlled:
the recipient’s phone number and the SMS message content, as
shown in Figure 4. To build the message body, we can employ a set
of classes (e.g., CdmaSmsAddress and BearerData) in the library,
ITelephony [12].
We validate this vulnerability by sending a spoofed message,
where the speciﬁed sender number is not the sender’s, to a recipient.
The message can be received by the recipient, and it still carries the
spoofed sender number. We want to note two things. First, all the
required information items in the message header can be obtained
without root access. For the IMS server’s address, the IP address
can be fetched from the phone’s routing table, whereas the port
number is always the same for each carrier. Second, the sender’s IP
address and phone number do not need to match. That is, a mali-
cious user can spoof other phone numbers by keeping using her IP
address.
Causes and lessons.
The root cause is that there is no secure
binding between the PS network identiﬁer (i.e., IP address) used to
set up the SIP session, and the sender identiﬁer (i.e., phone number)
speciﬁed in the SIP message. The IMS-based SMS offers more
ﬂexibility than the legacy from the protocol design, but does not
prevent the abuse of the ﬂexibility. OP-I should learn from OP-II
that the secure binding is applied to SMS messages.
4.3 Proof-of-concept Attacks
We devise four proof-of-concept attacks: (1) silent SMS abuse;
(2) SMS spooﬁng; (3) SMS Client DoS; (4) SMS spamming toward
IMS. All the attacks can be launched in the OP-I network, whereas
in the OP-II, only the forth one is feasible. For OP-I, the two at-
Figure 5: A pop-up conﬁrmation dialog that is used when a
non-SMS application sends out a SMS message that may cause
charges.
offers more ﬂexibility to the IMS-based SMS, the IMS server does
not restrict the trafﬁc carried by the SIP session to the SMS client
only. For OP-I, no end-to-end security mechanism is used so that
the injection of forged messages can be easily done without root
access. For OP-II, even if the IPSec mechanism is employed, the
message injection can still happen with root access. It may come
from the IMS system’s fundamental limitation that the IMS server
is only able to authenticate the device but not software (i.e., the
SMS client), since the private keys used for the IMS service are
installed in the device hardware (i.e., SIM card). Once malicious
users can leverage the keys no matter which way is used (e.g., ex-
ploiting the security module XFRM), the IPSec security mechanism
can be abused.
4.2 Phone and IMS Server Vulnerabilities
We identify other two vulnerabilities at the phone and the IMS
server respectively: insufﬁcient SMS access defense and spoofable
SMS messages.
(V3) Insufﬁcient SMS Access Defense at Phone
4.2.1
Based on the current SMS access defense on the phone, when a
non-SMS application without root access wants to send SMS mes-
sages, it has to be granted the SMS permission during its installa-
tion (e.g., SEND_SMS in Android). However, when SMS moves
from the CS-based technology to the IMS-based design over PS
network, mobile OS may not provide sufﬁcient defense of the SMS
access. We discover that for OP-I, an application without the SMS
permission is allowed to send SMS messages by using network
sockets. This application does not require root access but only the
network permission. Such vulnerability empowers the malware to
abuse SMS without awareness of security applications, mobile OS,
or users. Note that this vulnerability is not feasible for OP-II, since
sending out SMS messages from a non-SMS application requires
to crack the IPSec security (as presented in the V2 validation) but
the cracking needs root access.
Validation. We validate this vulnerability for OP-I by letting
an application send an SMS message to a service number which
causes charges on the sender’s account. When the application with
the SMS permission relies on the SMS APIs to do it, the Android
OS will pop up a dialog to request user’s conﬁrmation before send-
ing it out, as shown in Figure 5. Based on V2, we develop an ap-
plication without root access or the SMS permission, and it is able
to send out forged SMS messages by injecting the SIP messages to
the SIP session. It is observed that there is not any pop-up conﬁr-
tacks, silent SMS abuse and SMS client DoS, require the malware
at the victim phone. However, the other two can be launched from
the attacker phone or any non-victim phone that is used to be a
springboard and has the malware installed. Note that the malware
in these attacks does not require root access. For OP-II, the SMS
spamming attack requires root access at the attacker phone to crack
the SIP session’s IPSec.
Silent SMS abuse. Clearly, the discovered loopholes can be ex-
ploited to abuse SMS on a mobile phone silently. This silent SMS
abuse can result in the victim’s monetary loss. It works as follows.
The malware without root access requires to be deployed at the vic-
tim phone, and sends out its forged SMS messages to the recipients
who cause charges (e.g., premium-rate text service [50]). With V1,
the attacker can develop the malware which knows how to fabri-
cate SIP/SMS messages. According to V2 and V3, the malware is
able to send out the forged SIP/SMS messages via the IMS-speciﬁc
interface without getting the victim’s attention (e.g., no pop-up con-
ﬁrmation dialog.)
SMS spooﬁng.
The attacker can send SMS messages on behalf
of another mobile user without his/her awareness or involvement.
Such SMS spooﬁng attack may lead to the victim’s monetary loss,
and the hijacking of the victim’s account, to name a few, when
it targets the SMS-powered services of the victim. More details
of the damage propagating towards the SMS-powered services are
presented in Section 5. The attack works as follows. According
to V2, the attacker can successfully send out the forged SIP/SMS
messages, where the originating number is set to the victim’s phone
number, to the IMS server. The spoofed SMS messages can be then
delivered to the recipient due to V4. From the recipient’s point of
view, those SMS messages are sent by the victim.
Moreover, this SMS spooﬁng attack can be launched from other
phones to prevent the attacker from being traced back. This attack
can be done by the malware without root access at those spring-
board phones. Though there exists a risk that the malware can be
detected, thereby impeding the attack or possibly tracing back to
the attacker, the risk is very low. It is because the current defenses
(e.g., the security mechanisms from two research studies [3, 19],
the conﬁrmation dialog of the Android OS, and other mechanisms
from antivirus applications) against the SMS malware all focus on
whether the applications with the SMS permission would abuse
SMS or not. However, the malware does not require the SMS per-
mission.
SMS client DoS.
The malware on the victim phone can send
a large amount of SIP/SMS messages to the local phone’s SMS
client, thereby exhausting the client’s resources to result in its DoS.
In order to send a SIP message to the local SMS client, the malware
requires to conﬁgure its destination address with the IP address of
the local IMS-speciﬁc interface and the port number used for SMS
(i.e., 5060 in OP-I). Its source address can be assigned any arbitrary
IP address and port number. Note that the IMS-speciﬁc interface’s
IP address can be obtained from the system’s network information
without root access. Due to different implementations of the SMS
clients from phone companies, different results are observed. We
here examine two different SMS clients from Samsung and LG,
and test two phone models, Samsung S5 and LG G3, respectively.
On the phone S5, the DoS attack prevents the SMS client from
receiving any SIP/SMS messages. It is because the SMS client, the
process of which is named as com.sec.ims.android, cannot
handle any incoming SIP messages once the client’s CPU usage
is equal to or higher than 25% on the tested phone. We observe
that when the malware sends SIP messages to the SMS client with
the speed at least 3,825 messages (1 KB each) per second, the client
would suffer from DoS with the CPU usage at least 25%. The effect
can last if the attack does not stop. Note that the threshold of the
SMS client’s CPU usage may vary with different clients, systems,
or/and other ongoing services.
More severely for the phone G3, the DoS attack crashes the SMS
client on the victim phone. With the crash, the mobile OS would
also stop responding or slowly respond to user input for a period
of time. Though the SMS client can be automatically recovered
within 150 seconds after being crashed, the attack can be repeat-
edly launched to crash it whenever its recovery completes. The
root cause is that the SMS client, the process of which is named
as com.lge.ims, has the vulnerability of memory leak. We dis-
cover that the process would buffer part of the incoming SIP/SMS
messages that have new recipient phone numbers into its memory.
When a SIP message, which has the large size of 7.5 KB and a new
recipient number, is sent to the SMS client, the client’s memory
usage would increase by 4.5 KB. We thus develop the malware to
launch the attack by continually sending the SIP messages that have
the large size and different recipient numbers, to the SMS client
on the victim phone.
It is observed that the attack takes around
200-250 seconds to crash the client’s process with more than 140K
forged SIP messages, and its memory usage reaches 128 MB right
before the crash.
SMS spamming towards IMS.
The attacker can also launch
SMS spamming attack towards the IMS system to downgrade its
performance. This attack, which relies on V2, requires root access
to crack IPSec at the attacker phone for OP-II, but it is not needed
for OP-I. The victims are the IMS systems of the carrier networks.
The attack aims to cause the heavy computation load (e.g., decrypt-
ing plenty of IPSec packets, handling lots of SIP messages with
large sizes, etc.) in the IMS system by sending a large amount of
SIP/SMS messages to the IMS server. However, due to the legal
concerns, we did not conduct this attack against the IMS systems
of OP-I and OP-II.
5. THREAT PROPAGATION TOWARDS
SMS-POWERED SERVICES
In this section, we examine how the threats caused by the IMS-
based SMS menace SMS-powered services. We study 40 SMS-
powered services, which are summarized in Table 2, in the US.
With the threat of the SMS spooﬁng, an attacker can send SMS
messages to use the SMS-powered services on behalf of a vic-
tim without his/her awareness. Together with the vulnerabilities of
these SMS-powered services, the SMS threat can be manipulated to
launch attacks against them. It can lead to three major types of at-
tacks: account hijacking, unauthorized donation, and unauthorized
subscription. We below consider one representative service of each
attack type as an example to illustrate service vulnerabilities, at-
tack methods, and negative impacts. The SMS-powered services
corresponding to those three attack types are offered by Facebook
(a social network company), American Red Cross (a charity orga-
nization), The Home Depot (a home improvement retailer), respec-
tively. Note that these attacks are feasible only for OP-I, but not
OP-II.
5.1 Facebook: Account Hijacking
A Facebook user is allowed to use SMS to manage his/her ac-
count (e.g., posting status, adding a friend, poking someone, liking
a page, etc.) with the service of Facebook Text [16]. For example,
for the action of liking the Facebook page, Lakers Nation, a user
can send an SMS message with the text, Like LakersNation,
to the number 32665. To use this Facebook Text service, the user
ƵƚŚĞŶƚŝĐĂƚĞĚ
hƐĞƌͲ&ƐĞƐƐŝŽŶ
ϮͲǁĂǇĂƵƚŚĞŶ͘
ĂƌƌŝĞƌ
KǀĞƌ^D^
ϭ͘>ŽŐŝŶĂŶĚƌĞƋƵĞƐƚƚŽĂĚĚĂƉŚŽŶĞ;ƌĞŐŝƐƚĞƌĂƉŚŽŶĞηͿ
Ϯ͘dĞǆƚ͞&͟ƚŽϯϮϲϱϱ;&KK<Ϳ
/ƐƐƵĞĂ
ϯ͘^ĞŶĚŽŶĞͲƚŝŵĞĐŽŶĨŝƌŵĂƚŝŽŶĐŽĚĞ
ƌĂŶĚŽŵ
ĐŽĚĞ
ϰ͘ŶƚĞƌƚŚĞƌĞĐĞŝǀĞĚĐŽĚĞŽŶƚŚĞƌĞŐŝƐƚƌĂƚŝŽŶƉĂŐĞ
Figure 6: Authentication procedure of the phone number reg-
istration on Facebook.
is required to securely bind his/her phone number to the account
beforehand, as shown in Figure 6. During the phone number reg-
istration, Facebook relies on a one-time conﬁrmation code to au-
thenticate the number. However, the Facebook Text service can be
abused to launch the account hijacking attack due to its vulnerabil-
ities and the SMS spooﬁng threat.
Vulnerabilities. We identify two security vulnerabilities of the
Facebook Text service: no runtime authentication and inappropri-
ate binding of phone number registration and Facebook Text ser-
vice. The ﬁrst vulnerability is that a user can keep using the regis-
tered phone number to manipulate his/her account via SMS without
any runtime authentication. The initial authentication of the phone
number is the only security mechanism used for the Facebook Text
service. It is validated in our 28-day experiment. As a result, once
obtaining the victim’s phone number, the attacker is able to ma-
nipulate the victim’s Facebook account by sending out the spoofed
SMS messages.
The second one is that once a user registers his/her phone num-
ber, his/her Facebook Text service is automatically enabled. How-
ever, the user’s phone number registration may be used for only se-
curity purpose (e.g., password recovery). This inappropriate bind-
ing may expose the user to the SMS threats, but s(he) does not
know it. Moreover, the number of this kind of users is not small,