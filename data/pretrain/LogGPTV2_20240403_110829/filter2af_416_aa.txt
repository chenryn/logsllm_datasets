这故事得从公司，渗透组因为临时加的小项目，需要搭个渗透综合类的环境，最初就有了这个方案，朋友问怎么整？跨度有点太大了，只因以前吹牛逼，大学学网络，干运维环境啥都会搭建.....。  
谷歌还能找到很多OpenVPN的环境部署，国内大多被和谐了。过程中踩了一些坑，分享给圈子，也可以自己搭环境玩一些有意思的东西。  
**GitHub目前找到最齐全的参考资料：**
**环境如下:**  
OpenVPNServer: Ubuntu18 Desktop（公网）假设ip：40.40.40.40
需要装个VirtualBox创建一个虚拟网卡(仅主机模式)：ip : 192.168.131.10 gw 192.168.131.1  
OpenVPNClient：xxx.xxx.xxx.xxx 注意：不建议在Windows上搭建OpenServer，涉及一些数据包机制转发的会有些麻烦。  
为了方便理解这种模式，梳理一副图片，如下所示：  
这是部署前梳理流程图，如上图所示，底层是一个Ubuntu or
Windows，客户端利用OpenVPN访问公网，Ubuntu内部开启虚拟容器，开启虚拟机而且仅主机模式。用户想要通过客户端OpenVPN连接内网的虚拟机，可以利用Vagrant部署自动化管理容器，Vagrant介绍不太多这里，因为部署很简单，自动化脚本写点Python就好了。
**Windows10 OpenVPN部署：**
    1.下载OpenVpn
    2.配置VPNServer网卡适配器
    3.Cd Easy-rsa 
    4.init-config.bat
    5.Edit Vars.bat
      KEY-COUNTRY = UA
      KEY-PROVINCE = Kiev
      KEY-CITY = Kiev
      KEY- ORG = ServerVPN
    6.Cd “c:\Pro OpenVPNPath\easy-rsa”
    7.Vars 
    8.clean-all
    9.Build-dh  执行后出现dh4096.pem
    10.配置环境变量，OpenVPN
    11.Build-ca CreateCA
    12.Build-Key-ServerVPN
    13.Build-key ClientVPN
    14.Openvpn --genkey -- secret keys/ta.key
    15.Cp Server.ovpn --> /$path/OpenVPN/config/Server.ovpn
    16.Edit Server.ovpn
    17.Edit Client
**Ubuntu18 OpenVPN部署：**
    wget -P ~/ https://github.com/OpenVPN/easy-r
     mkdir OpenVPNeasy
     cd OpenVPNeasy/
     wget https://github.com/OpenVPN/easy-rsa
     vim easy-rsa  // 这个需要修改一些配置，详细参考上述github
     tar xvf EasyRSA-unix-v3.0.6.tgz
     cd EasyRSA-v3.0.6/
     openvpn --genkey --secret ta.key
     cp ./ta.key /etc/openvpn/
     cp ./pki/ca.crt /etc/openvpn/
     cp ./pki/dh.pem /etc/openvpn/
     cp /usr/share/doc/openvpn/examples/sample-c
     cd /etc/openvpn/
     cd server/
     gzip -d server.conf.gz   会生成配置文件server.conf
**更详细的配置请参考Github，确实写的很好！需要把ca.crt，ta.key，粘贴到客户端，因为必须要验证，这里并没有赋值客户端的密钥或者认证，因为账号密码登陆认证，下面对配置文件重要内容贴上，里面有注释：**  
**OpenVPNServerConfig：**
    dev-node "vpn-ada"  这里是网卡
    mode server
    port 12345   绑定端口
    proto tcp4-server 使用协议
    dev tun
    tls-server
    tls-auth "C:\\Program Files\\OpenVPN\\easy-rsa\\keys\\ta.key" 0
    tun-mtu 1500
    tun-mtu-extra 32
    mssfix 1450
    上述生成的密钥
    ca "C:\\Program Files\\OpenVPN\\easy-rsa\\keys\\ca.crt"
    cert "C:\\Program Files\\OpenVPN\\easy-rsa\\keys\\vpn.crt"
    key "C:\\Program Files\\OpenVPN\\easy-rsa\\keys\\vpn.key"
    dh "C:\\Program Files\\OpenVPN\\easy-rsa\\keys\\dh2048.pem"
    # 可分配多个网段，这是一个大网段，然后可以给指定用户分配固定ip，注意是掩码32Bit的
    server 10.10.0.0 255.255.255.0
    # 也可以多个server 10.11.0.01 xxxxxxx
    # 给客户端配置特殊的ip需求，这个目录自己创建，目录里面的文件就是账户名，比如有一个账户test，那么想给他分配10.10.1.1，就需要在下面创建一个test文件，并且输入ifconfig-push 10.10.1.1 10.10.1.2
    client-config-dir ccd
    #允许客户端子网互通，这个很重重要，子网内通讯
    client-to-client
    # 心跳检测
    keepalive 10 120
    cipher AES-128-CBC
    comp-lzo
    verify-client-cert require
    # 允许密码认证脚本 verify optional ，checkpsw.exe是windwos下OpenVPNServer需要用到的 c写的密码验证程序，高版本OpenVPN要求用脚本可执行的方式认证密钥的正确与错误，正确返回0，错误返回1
    # 同样还需要创建密码文件pwd-fle ，格式 test !@#$%asdasd 账户 密码
    auth-user-pass-verify checkpsw.exe via-env
    script-security 3
    # 允许密码认证
    username-as-common-name
    client-cert-not-required
    status openvpn-status.log
    log-append  openvpn.log
    persist-key
    persist-tun
    verb 3
    route-delay 5
    route-method exe
    # 服务器增加到xxxxx/24的路由
    route 10.10.1.0 255.255.255.0
    route 10.10.2.0 255.255.255.0
    # 让所有客户端都增加xxxxxx的路由
    push "route 10.10.0.0 255.255.255.0"
    push "route 192.168.131.0 255.255.255.0"
**两个平台的检测脚本：checkpwd.exe or checkpwd.sh:**
    Windows:
    #include
    #include
    #include
    #define MAX 1024
    int checkpsw(char *username, char *password)
    {
            FILE *f;
            char user[MAX + 2], pass[MAX + 2], active[MAX + 2];
            if (!(f = fopen("userpwd", "r")))
            {
                    perror("Open PASSWORD file error");
                    printf("The password file not found\n");
                    return -1;
            }
            while (!feof(f))
            {
                    fscanf(f, "%s %s %s\n", user, pass, active);
                    if (strcmp(username, user) == 0 && strcmp(password, pass) == 0 && strcmp(active, "1") == 0)
                    {
                            fclose(f);
                            return 0;
                            //验证通过应该返回0;
                    }
            }
            fclose(f);
            return 1;
    }
    int main()
    {
            int status;
            status = checkpsw(getenv("USERNAME"), getenv("PASSWORD"));
            return status;
    }
    Python:
    #!/bin/bash
    #
    # This script will authenticate OpenVPN users against
    # a plain text file. The passfile should simply contain
    # one row per user with the username first followed by
    # one or more space(s) or tab(s) and then the password.
    PASSFILE="/etc/openvpn/psw-file"
    LOG_FILE="/var/log/openvpn/openvpn-password.log"
    TIME_STAMP=`date "+%Y-%m-%d %T"`
    ###########################################################
    if [ ! -r "${PASSFILE}" ]; then