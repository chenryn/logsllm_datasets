  这样一下子，就在几个星期之内，麦卡锡发现他的理论演算变成了一种实际的编程语言，而且出乎意料地强大。
  由此也就得出了20世纪50年代的编程语言到现在还没有过时的原因。简单说，因为这种语言本质上不是一种技术，而是数学。数学是不会过时的。你不应该把Lisp语言与50年代的硬件联系在一起，而是应该把它与快速排序（Quicksort）算法进行类比。这种算法是1960年提出的，至今仍然是最快的通用排序方法。
  Fortran语言也是20世纪50年代出现的，并且一直使用至今。它代表了语言设计的一种完全不同的方向。Lisp语言是无意中从纯理论发展为编程语言的，而Fortran从一开始就是作为编程语言设计出来的。但是，今天我们把Lisp看成高级语言，而把Fortran看成一种相当低层次的语言。
  1956年Fortran刚诞生的时候，叫做Fortran I，与今天的Fortran语言差别极大。Fortran I实际上是汇编语言加上数学，在某些方面还不如今天的汇编语言强大。比如，它没有子例程，只有分支跳转结构（branch）。今天的Fortran语言可以说更接近Lisp而不是Fortran I。
  Lisp和Fortran代表了编程语言发展的两大方向。前者的基础是数学，后者的基础是硬件架构。从那时起，这两大方向一直在互相靠拢。Lisp语言刚设计出来的时候就很强大，接下来的二十年它提高了运行速度。而那些所谓的主流语言把更快的运行速度作为设计的出发点，然后再用四十多年的时间一步步变得更强大。直到今天，最高级的主流语言也只是刚刚接近Lisp的水平。虽然已经很接近了，但还是没有Lisp那样强大。
为什么Lisp语言很特别
  Lisp语言诞生的时候就包含了9种新思想。其中一些我们今天已经习以为常，另一些则刚刚在其他高级语言中出现，至今还有2种是Lisp独有的。按照被大众接受的程度，这9种思想依次如下排列。
  （1） 条件结构（即if-then-else结构）。现在大家都觉得这是理所当然的，但是Fortran I就没有这个结构，它只有基于底层机器指令的goto结构。
  （2） 函数也是一种数据类型。在Lisp语言中，函数与整数或字符串一样，也属于数据类型的一种。它有自己的字面表示形式（literal representation），能够存储在变量中，也能当作参数传递。一种数据类型应该有的功能，它都有。
  （3） 递归。Lisp是第一种支持递归函数的高级语言^。
^“Lisp语言的许多特性（比如，把程序写成列表形式以及实现某种形式的递归）都在20世纪50年代的IPL-V语言中出现过。但是，IPL-V更像是汇编语言，它的程序中充满了操作码/地址对。参见Alien Newell等人编著的《IPL-V语言操作手册》（Information Processing Language-V Manual），Prentice-Hail，1961年出版。”
  （4） 变量的动态类型。在Lisp语言中，所有变量实际上都是指针，所指向的值有类型之分，而变量本身没有。复制变量就相当于复制指针，而不是复制它们指向的数据。
  （5） 垃圾回收机制。
  （6） 程序由表达式组成。Lisp程序是一些表达式树的集合，每个表达式都返回一个值。这与Fortran和大多数后来的语言都截然不同，它们的程序由表达式和语句组成。
  区分表达式和语句在Fortran I中是很自然的，因为它不支持语句嵌套。所以，如果你需要用数学式子计算一个值，那就只有用表达式返回这个值，没有其他语法结构可用，否则就无法处理这个值。
  后来，新的编程语言支持块结构，这种限制当然也就不存在了。但是为时已晚，表达式和语句的区分已经根深蒂固。它从Fortran扩散到Algol语言，接着又扩散到它们两者的后继语言。
  （7） 符号类型。符号实际上是一种指针，指向存储在散列表中的字符串。所以，比较两个符号是否相等，只要看它们的指针是否一样就行了，不用逐个字符地比较。
  （8） 代码使用符号和常量组成的树形表示法。
  （9） 无论什么时候，整个语言都是可用的。Lisp并不真正区分读取期、编译期和运行期。你可以在读取期编译或运行代码，也可以在编译期读取或运行代码，还可以在运行期读取或者编译代码。
  在读取期运行代码，使得用户可以重新调整（reprogram）Lisp的语法；在编译期运行代码，则是Lisp宏的工作基础；在运行期编译代码，使得Lisp可以在Emacs这样的程序中充当扩展语言（extension language）；在运行期读取代码，使得程序之间可以用S表达式（S-expression）通信，近来XML格式的出现使得这个概念被重新“发明”出来了^。
“如果你不想让经理发现你正在使用Lisp编程，你可以告诉他你用的是XML。”
  Lisp语言刚出现的时候，这些思想与其他编程语言大相径庭，后者的设计思想主要由50年代后期的硬件决定。随着时间流逝，流行的编程语言不断更新换代，语言设计思想逐渐向Lisp靠拢。思想（1）到思想（5）已经被广泛接受，思想（6）开始在主流编程语言中出现，思想（7）在Python语言中有所实现，不过似乎没有专用的语法。
  思想（8）可能是最有意思的一点。它与思想（9）只是由于偶然原因才成为Lisp语言的一部分，因为它们不属于麦卡锡的原始构想，是由拉塞尔自行添加的。它们从此使得Lisp语言看上去很古怪，但也成为了这种语言最独一无二的特点。说Lisp语言古怪倒不是因为它的语法很古怪，而是因为它根本没有语法，程序直接以解析树（parse tree）的形式表达出来。在其他语言中，这种形式只是经过解析在后台产生，但是Lisp直接采用它作为表达形式。它由列表构成，而列表则是Lisp的基本数据结构。
  用一门语言自己的数据结构来表达该语言是非常强大的功能。思想（8）和思想（9），意味着你可以写出一种能够自己编程的程序。这可能听起来很怪异，但是对于Lisp语言却是再普通不过。最常用的做法就是使用宏。
  术语“宏”在Lisp语言中的意思与其他语言中的不一样。Lisp宏无所不包，它既可能是某样表达式的缩略形式，也可能是一种新语言的编译器。无论是想真正理解Lisp语言，还是只想拓宽编程视野，最好都学学宏。
  就我所知，宏（采用Lisp语言的定义）目前仍然是Lisp独有的。一个原因是为了使用宏，你大概不得不让你的语言看上去像Lisp—样古怪。另一个可能的原因是，如果你想为自己的语言添上这种终极武器，你从此就不能声称自己发明了新语言，只能说发明了一种Lisp的新方言。
  我把这件事当作笑话说出来，但是事实就是如此。如果你创造了一种新语言，其中有car、cdr、cons、quote、cond、atom、eq这样的功能，还有一种把函数写成列表的表示方法，那么在它们的基础上完全可以推导出Lisp语言的所有其他部分。事实上，Lisp语言就是这样定义的，麦卡锡把语言设计成这个样子就是为了让这种推导成为可能。
语言优势真正体现的地方
  就算Lisp确实代表了目前主流编程语言不断靠近的一个方向，这是否意味着你就应该用它编程呢？如果使用一种不是如此强大的语言，你又会有多少损失呢？有时不采用最尖端的技术不也是一种明智的选择吗？这么多人使用主流编程语言，这本身不也说明那些语言有可取之处吗？举例来说，你的经理不正是希望使用一种很容易雇到程序员的语言吗？
  另一方面，许多项目是无所谓选择哪一种编程语言，反正不同的语言都能完成工作。一般来说，条件越苛刻的项目，强大的编程语言就越能发挥作用。但是，无数的项目根本没有苛刻条件的限制。大多数的编程任务可能只要写一些很小“胶水程序”，然后再把这些小程序连起来就行了。你可以用自己熟悉的编程语言或者用对于特定项目来说有着最强大函数库的语言来写这些“胶水程序”。如果你只是需要在Windows应用程序之间传递数据，使用Visual Basic照样能达到目的。
  你也可以使用Lisp语言编写这些小程序（我用它写了桌面计算器），但是Lisp的最大优势体现在编程任务的另一端，就是在激烈竞争的条件下开发那些解决困难问题的复杂程序。ITA软件公司为Orbitz旅行社开发的飞机票价搜索程序就是一个很好的例子。网络订票市场很难迸入，因为它已经被两大巨头（Travelocity和Expedia）牢牢控制了，但是ITA的软件性能看上去使得那两家公司的软件顿时相形见绌。