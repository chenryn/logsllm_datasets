# 五、Kubes 训练营
我们相信，你们中的许多人已经在一定程度上使用了 Kubernetes 您可能有正在生产中运行的集群，或者您可能已经使用 kubeadm、Minikube 或 Docker Desktop 踢过轮胎。这本书的目标是超越 Kubernetes 的基础，因此，我们不想重复 Kubernetes 的所有基础。相反，我们添加了这一章作为任何可能对 Kubernetes 不熟悉或者可能只是玩了一会儿的人的训练营。
因为这是一个训练营章节，所以我们不会深入每个主题，但是到最后，您应该对 Kubernetes 的基础知识有足够的了解，才能理解剩下的章节。如果你有很强的 Kubernetes 背景，你可能仍然会发现这一章作为复习很有用，我们将从 [*第 6 章*](06.html#_idTextAnchor174) *、服务、负载平衡和外部 DNS 开始进入更复杂的主题。*
在本章中，我们将介绍运行中的 Kubernetes 集群的组件，包括控制平面和工作节点。我们将详细介绍每个 Kubernetes 对象及其用例。如果您过去使用过 Kubernetes，并且对使用`kubectl`感到舒适，并且完全了解 Kubernetes 对象(如`DaemonSets`、`StatefulSets`、`ReplicaSets`等……)，那么您可能想跳转到 [*第 6 章*](06.html#_idTextAnchor174) 、*服务、负载均衡和外部 DNS* ，我们将使用 KinD 在这里安装 Kubernetes。
在本章中，我们将涵盖以下主题:
*   Kubernetes 组件概述
*   探索控制平面
*   了解工作节点组件
*   与应用编程接口服务器交互
*   介绍 Kubernetes 对象
# 技术要求
本章有以下技术要求:
*   一台 Ubuntu 18.04 服务器，至少有 4 **千兆字节**(**GB**)**随机存取存储器** ( **内存**)
*   一个不可思议的群集的孩子
您可以在以下 GitHub 存储库中访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# Kubernetes 成分概述
在任何基础设施中，理解系统如何协同工作来提供服务总是一个好主意。如今有这么多安装程序选项，许多 Kubernetes 用户都没有必要了解 Kubernetes 组件是如何集成的。
几年前，如果您想运行 Kubernetes 集群，您需要手动安装和配置每个组件。安装一个正常运行的集群是一个陡峭的学习曲线，这经常会导致沮丧，导致许多人和公司说*“Kubernetes 太难了”*。手动安装的优势在于，您真正了解每个组件是如何相互作用的，如果您的集群在安装后遇到问题，您就知道应该寻找什么。
如今，大多数人点击云提供商的按钮，几分钟内就能拥有一个功能齐全的 Kubernetes 集群。内部安装也变得同样容易，有了谷歌、红帽、Rancher 等的选项，消除了安装 Kubernetes 集群的复杂性。当您在安装后遇到问题或有疑问时，就会出现我们看到的问题。由于您没有配置 Kubernetes 组件，您可能无法向开发人员解释如何在工作节点上调度 Pod。最后，由于您正在运行由第三方提供的安装程序，它们可能会启用或禁用您不知道的功能，从而导致安装可能违反您公司的安全标准。
要了解 Kubernetes 组件如何协同工作，您必须首先了解 Kubernetes 集群的不同组件。下图来自`Kubernetes.io`站点，显示了 Kubernetes 集群组件的高级概述:
![Figure 5.1 – Kubernetes cluster components ](img/Fig_5.1_B15514.jpg)
图 5.1–Kubernetes 集群组件
如你所见， Kubernetes 星团由几个部分组成。随着本章的深入，我们将讨论这些组件以及它们在 Kubernetes 集群中扮演的角色。
# 探索控制平面
顾名思义，控制平面控制着一个集群的每一个方面。如果您的控制平面发生故障，您可能会认为您的集群会遇到问题。没有控制平面，集群将没有任何调度能力，这意味着正在运行的工作负载将保持运行，除非它们停止并重新启动。因为控制平面极其重要，所以总是建议您至少有三个主节点。许多生产安装运行三个以上的主节点，但是安装的节点数量应该总是奇数。让我们通过检查每一个来看看为什么控制平面及其组件对运行的集群如此重要。
## 不灭 API 服务器
集群中第一个需要理解的组件是`kube-apiserver`组件。由于 Kubernetes 是**应用编程接口** ( **API** )驱动的，所以进入集群的每个请求都要经过 API 服务器。让我们看一个使用 API 端点的简单`get nodes`请求，如下所示:
`https://10.240.100.100:6443/api/v1/nodes?limit=500`
Kubernetes 的用户部署与 API 服务器交互的一种常见方法是 kubectl 实用程序。使用 kubectl 发出的每个命令都在幕后调用一个 API 端点。在前面的例子中，我们执行了一个`kubectl get nodes`命令，该命令向端口`6443`上的`10.240.100.100`上的`kube-apiserver`进程发送了一个 API 请求。API 调用请求`/api/vi/nodes`端点，该端点返回集群中节点的列表，如下图所示:
![Figure 5.2 – List of Kubernetes nodes ](img/Fig_5.2_B15514.jpg)
图 5.2–Kubernetes 节点列表
如果没有运行的应用编程接口服务器，对集群的所有请求都将失败。所以，如你所见，让`kube-apiserver`组件一直运行是非常重要的。通过运行三个或更多主节点，我们可以限制丢失主节点的任何影响。
注意
当运行多个主节点时，您需要在集群前面有一个负载平衡器。Kubernetes API 服务器可以由大多数标准解决方案来引导，包括 F5、HAProxy 和 Seesaw。
## Etcd 数据库
说 Etcd 是你的 Kubernetes 集群并不夸张。Etcd 是一个快速且高度可用的分布式键值数据库，Kubernetes 使用它来存储所有集群数据。集群中的每个资源在数据库中都有一个键。如果您登录到运行 Etcd 的节点(或 Pod)，您可以使用`etcdctl`可执行文件查看数据库中的所有键。下面的代码片段显示了一个运行 KinD 的集群示例:
```
EtcdCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt  get / --prefix --keys-only
```
前面命令的输出包含太多数据，本章无法一一列出。一个基本的 KinD 集群将返回大约 317 个条目。所有按键以`/registry/`开始。例如，返回的一个键是`cluster-admin`键的`ClusterRole`，如下所示:`/registry/clusterrolebindings/cluster-admin`。
通过稍微修改我们之前的命令，我们可以使用键名称使用`etcdctl`实用程序检索值，如下所示:
```
EtcdCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --key=/etc/kubernetes/pki/etcd/server.key --cert=/etc/kubernetes/pki/etcd/server.crt  get /registry/clusterrolebindings/cluster-admin
```
输出将包含外壳无法解释的字符，但您将了解存储在 Etcd 中的数据。对于`cluster-admin`键，输出显示如下:
![](img/Fig_5.3_B15514.jpg)
图 5.3–etc dctl 集群角色绑定输出
我们解释 Etcd 中的条目的原因是为了提供一个关于 Kubernetes 如何使用它来运行集群的背景。您已经直接从数据库中看到了`cluster-admin`键的输出，但是在日常生活中，您会使用`kubectl get clusterrolebinding cluster-admin -o yaml`查询应用编程接口服务器，这会返回以下内容:
![](img/Fig_5.4_B15514.jpg)
图 5.4–kube CTL 集群角色绑定输出
如果您查看`kubectl`命令的输出，并将其与`etcdctl`查询的输出进行比较，您将看到匹配的信息。当您执行`kubectl`命令时，该请求将被发送到应用编程接口服务器，然后该服务器将向 Etcd 数据库查询对象的信息。
## 多维数据集调度程序
顾名思义，组件负责调度运行的 Pods。每当在集群中启动 Pod 时，应用编程接口服务器都会接收请求，并根据多项标准(包括主机资源和集群策略)决定在哪里运行工作负载。
## 库贝-控制器-管理器
`kube-controller-manager`组件实际上是包含在单个二进制中的多个控制器的集合。将四个控制器包含在一个可执行文件中，通过在一个进程中运行所有四个控制器来降低复杂性。`kube-controller-manager`组件中包含的四个控制器是节点、复制、端点以及服务帐户和令牌控制器。
每个控制器为集群提供唯一的功能，这里列出了每个控制器及其功能:
![](img/B15514_table_5.1.jpg)
每个控制器运行一个不终止(永不结束)的控制回路。这些控制循环监视每个资源的状态，进行任何必要的更改来规范化资源的状态。例如，如果您需要将部署从一个节点扩展到三个节点，复制控制器会注意到当前状态有一个 Pod 正在运行，而期望的状态是有三个 Pod 正在运行。要将当前状态移动到所需状态，复制控制器将请求另外两个 Pods。
## 云-控制器-管理器
这是一个您可能没有遇到的组件，具体取决于您的集群是如何配置的。类似于`kube-controller-manager`组件，这个控制器在一个二进制文件中包含四个控制器。包括的控制器有节点控制器、路由控制器、服务控制器和卷控制器，每个控制器都负责与各自的云服务提供商产品进行交互。
# 了解工作节点组件
工人节点，顾名思义，负责运行工作负载。当我们讨论控制平面的`kube-scheduler`组件时，我们提到当调度新的 Pod 时，`kube-scheduler`组件将决定在哪个节点上运行 Pod。它使用从工作节点发送给它的信息来实现这一点。此信息会不断更新，以帮助将 Pods 分布在集群中，从而有效利用资源。下面是工作节点组件的列表。
## Kubernetes
你可能会听到一个工人节点被称为`kubelet`。`kubelet`是一个在所有工作节点上运行的代理，它负责运行实际的容器。
## 多维数据集代理
与的名字相反，`kube-proxy`根本不是代理服务器。`kube-proxy`负责在 Pod 和外部网络之间路由网络通信。
## 容器运行时
这是图中没有表示的，但是每个节点也需要一个容器运行时。容器运行时负责运行容器。你首先想到的可能是 Docker。虽然 Docker 是一个容器运行时，但它不是唯一可用的运行时选项。在过去的一年里，其他选项变得可用，并迅速取代 Docker 成为首选的容器运行时。两个最突出的 Docker 替代品是 CRI-O 和 container der。
对于书本练习，我们将使用 KinD 创建一个 Kubernetes 集群。在撰写本文时，KinD 只提供了 Docker 作为容器运行时的官方支持，对 Podman 的支持有限。
# 与 API 服务器交互
正如我们前面提到的，您可以使用直接的应用编程接口请求或`kubectl`实用程序与应用编程接口服务器交互。在本书中，我们将主要使用`kubectl`进行大部分的交互，但是在适用的情况下，我们将使用直接的 API 调用进行调用。
## 使用 Kubernetes kubectl 实用程序
`kubectl`是一个单一的可执行文件，允许您使用**命令行界面** ( **CLI** )与 Kubernetes API 进行交互。它适用于大多数主要的操作系统和架构，包括 Linux、Windows 和 Mac。
大多数操作系统的安装说明位于 T2 https://kubernetes.io/docs/tasks/tools/install-kubectl/的 Kubernetes 站点。由于我们在本书的练习中使用的是 Linux 作为我们的操作系统，我们将介绍在 Linux 机器上安装`kubectl`。请遵循以下步骤:
1.  要下载最新版本的`kubectl`，可以运行`curl`命令下载，如下所示:
    ```
    curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    ```
2.  下载后，需要通过运行以下命令使文件可执行:
    ```
    chmod +x ./kubectl
    ```
3.  最后，我们将可执行文件移动到您的路径，如下所示:
    ```
    sudo mv ./kubectl /usr/local/bin/kubectl
    ```
现在您的系统上有了最新的`kubectl`实用程序，可以从任何工作目录执行`kubectl`命令。
Kubernetes 每 3 个月更新一次。这包括对基本 Kubernetes 集群组件和`kubectl`实用程序的升级。您可能会遇到集群和您的`kubectl`命令版本不匹配的情况，需要您升级或下载您的`kubectl`可执行文件。您可以通过运行`kubectl version`命令来检查两者的版本，该命令将输出应用编程接口服务器和`kubectl`客户端的版本。版本检查的输出显示在下面的代码片段中:
```
Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.1", GitCommit:"d224476cd0730baca2b6e357d144171ed74192d6", GitTreeState:"clean", BuildDate:"2020-01-14T21:04:32Z", GoVersion:"go1.13.5", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.0", GitCommit:"70132b0f130acc0bed193d9ba59dd186f0e634cf", GitTreeState:"clean", BuildDate:"2020-01-14T00:09:19Z", GoVersion:"go1.13.4", Compiler:"gc", Platform:"linux/amd64"}