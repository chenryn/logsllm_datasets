in Section IV-B, it may introduce few noises in case two
functions with different names have the exactly same code
logic within the same project (despite rarely in practice based
on our observation). Considering the small probability of data
noise and the tolerance of Tree-LSTM to data noise, we
believe that our method is minimally affected. In terms of
the computational overhead, ASTERIA is based on the Tree-
LSTM network, where the model training is time-consuming
if the size of an AST is large. In addition, the ofﬂine encoding
is time-consuming since LSTM cannot take full advantage of
GPU for parallel computing. As our future research, we plan
to employ more efﬁcient NLP techniques for AST encoding.
We conduct a vulnerability search in our ﬁrmware dataset
and analyze the search results. Through our analysis, we ﬁnd
that the results with score of 1 are all conﬁrmed as vulnerable
cases. The functions with high scores hold similar code
patterns with the vulnerable function. We hope that this work
can inspire researchers about the connection between natural
language and assemble language or intermediate language for
binary security analysis. Notice that vulnerability veriﬁcation
is a very important follow-up work after the vulnerability
search. We only manually conﬁrm whether the functions
are vulnerable or not, without conducting the exploitability
analysis.
VIII. CONCLUSION
In this paper, we proposed ASTERIA, a deep learning-based
AST encoding scheme to measure the semantic equivalence
of functions across platforms. We used AST as the func-
tion feature and adopted the Tree-LSTM network to encode
the AST into semantic representation vectors. We then em-
ployed the Siamese Network for integrating two identical
Tree-LSTM networks to calculate the similarity between two
AST encodings. We implemented a prototype of ASTERIA.
For the model training, we built a large-scale cross-platform
dataset containing 49,725 binary ﬁles by cross-compiling 260
open-source software. We compared our model against the
state-of-the-art approach Gemini and an AST-based method
Diaphora. Comprehensive evaluation results show that our
ASTERIA outperforms Diaphora and Gemini in both accuracy
and efﬁciency. We also conducted a vulnerability search in an
IoT ﬁrmware dataset and found 75 vulnerable functions.
IX. ACKNOWLEDGEMENT
This work is partly supported by Guangdong Province Key
Area R&D Program of China (Grant No.2019B010137004),
Key Program of National Natural Science Foundation of China
(Grant No.U1766215), National Natural Science Foundation of
China (Grant No.U1636120) and Industrial Internet Innovation
and Development Project (Grant No.TC190H3WU).
REFERENCES
[1] Buildroot making embedded linux easy. https://buildroot.org. [Online;
accessed 26-February-2020].
[2] Cve - cve. https://cve.mitre.org/. (Accessed on 03/23/2021).
[3] Diaphora.
https://github.com/joxeankoret/diaphora. Accessed jan 4,
[4] Dlink all products.
https://support.dlink.com/AllPro.aspx.
[5] Netgear download.
http://support.netgear.cn/download.asp.
2020.
Accessed May 19, 2020].
Accessed May 19, 2020].
[Online;
[Online;
[6] Schneider support. https://www.schneider-electric.cn/zh/download. [On-
[7] IDA Pro.
https://www.hex-rays.com/products/ida/index.shtml, 2019.
line; Accessed May 19, 2020].
[Online; accessed 3-April-2020].
5-April-2020].
[8] Binwalk. https://www.reﬁrmlabs.com/binwalk/, 2020. [Online; accessed
[9] Cve-cve-2011-0762.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2011-0762, 2020. [Online; accessed 5-April-2020].
[10] Cve-cve-2013-1944.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2013-1944, 2020. [Online; accessed 5-April-2020].
[11] Cve-cve-2014-0195.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2014-0195, 2020. [Online; accessed 5-April-2020].
[12] Cve-cve-2014-4877.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2014-4877, 2020. [Online; accessed 5-April-2020].
[13] Cve-cve-2016-2105.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2016-2105, 2020. [Online; accessed 5-April-2020].
[14] Cve-cve-2016-6303.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2016-6303, 2020. [Online; accessed 5-April-2020].
[15] Cve-cve-2016-8618.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2016-8618, 2020. [Online; accessed 5-April-2020].
[16] Openssl.
https://www.openssl.org/source/old/1.1.0/, 2020.
[Online;
accessed 5-April-2020].
[17] Pytorch. https://pytorch.org/, 2020. [Online; accessed 5-April-2020].
[18] Andrew Ayers, Richard Schooler, and Robert Gottlieb. Aggressive
inlining. ACM SIGPLAN Notices, 32(5):134–145, 1997.
[19] Hamid Abdul Basit and Stan Jarzabek. Detecting higher-level similarity
SIGSOFT Softw. Eng. Notes, 30(5):156–165,
patterns in programs.
September 2005.
[20] Ira D Baxter, Andrew Yahin, Leonardo Moura, Marcelo Sant’Anna,
and Lorraine Bier. Clone detection using abstract syntax trees.
In
Proceedings. International Conference on Software Maintenance (Cat.
No. 98CB36272), pages 368–377. IEEE, 1998.
[21] Jose E Cabrero and Ian M Holland. System and method for providing
shared global offset table for common shared library in a computer
system, July 10 2001. US Patent 6,260,075.
[22] Mahinthan Chandramohan, Yinxing Xue, Zhengzi Xu, Yang Liu,
Chia Yuan Cho, and Hee Beng Kuan Tan. Bingo: Cross-architecture
cross-os binary search. In Proceedings of the 2016 24th ACM SIGSOFT
International Symposium on Foundations of Software Engineering, pages
678–689. ACM, 2016.
[23] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. To-
wards automated dynamic analysis for linux-based embedded ﬁrmware.
2016.
[24] Sumit Chopra, Raia Hadsell, and Yann LeCun. Learning a similarity
In 2005
metric discriminatively, with application to face veriﬁcation.
IEEE Computer Society Conference on Computer Vision and Pattern
Recognition (CVPR’05), volume 1, pages 539–546. IEEE, 2005.
[25] Cristina Cifuentes and K John Gough. Decompilation of binary
programs. Software: Practice and Experience, 25(7):811–829, 1995.
[26] Andrei Costin,
Jonas Zaddach, Aur´elien Francillon, and Davide
Balzarotti. A large-scale analysis of the security of embedded ﬁrmwares.
In 23rd USENIX Security Symposium (USENIX Security 14), pages 95–
110, 2014.
[27] Ang Cui, Michael Costello, and Salvatore Stolfo. When ﬁrmware
modiﬁcations attack: A case study of embedded exploitation. 2013.
[28] Yaniv David, Nimrod Partush, and Eran Yahav. Firmup: Precise static
ACM SIGPLAN
detection of common vulnerabilities in ﬁrmware.
Notices, 53(2):392–404, 2018.
[29] Yaniv David and Eran Yahav. Tracelet-based code search in executables.
In Proceedings of the 35th ACM SIGPLAN Conference on Programming
Language Design and Implementation, PLDI ’14, pages 349–360, New
York, NY, USA, 2014. ACM.
[30] Scott Deerwester, Susan T Dumais, George W Furnas, Thomas K
Landauer, and Richard Harshman. Indexing by latent semantic analysis.
Journal of the American society for information science, 41(6):391–407,
1990.
[31] Najim Dehak, Reda Dehak, James R Glass, Douglas A Reynolds, Patrick
Kenny, et al. Cosine similarity scoring without score normalization
techniques. In Odyssey, page 15, 2010.
[32] Vijay D’Silva, Mathias Payer, and Dawn Song. The correctness-security
In 2015 IEEE Security and Privacy
gap in compiler optimization.
Workshops, pages 73–87. IEEE, 2015.
[33] Thomas Dullien and Rolf Rolles. Graph-based comparison of executable
objects (english version). SSTIC, 5(1):3, 2005.
[34] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley.
Blanket execution: Dynamic similarity testing for program binaries
and components. In 23rd {USENIX} Security Symposium ({USENIX}
Security 14), pages 303–317, 2014.
[35] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley.
Blanket execution: Dynamic similarity testing for program binaries and
components. In 23rd USENIX Security Symposium (USENIX Security
14), pages 303–317, San Diego, CA, 2014. USENIX Association.
[36] Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla.
discovre: Efﬁcient cross-architecture identiﬁcation of bugs in binary
code. In NDSS, 2016.
[37] Qian Feng, Minghua Wang, Mu Zhang, Rundong Zhou, Andrew Hender-
son, and Heng Yin. Extracting conditional formulas for cross-platform
bug search. In Proceedings of the 2017 ACM on Asia Conference on
Computer and Communications Security, pages 346–359, 2017.
[38] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa,
and Heng Yin. Scalable graph-based bug search for ﬁrmware images.
In Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, pages 480–491. ACM, 2016.
[39] Debin Gao, Michael K Reiter, and Dawn Song. Binhunt: Automatically
In International
ﬁnding semantic differences in binary programs.
Conference on Information and Communications Security, pages 238–
255. Springer, 2008.
[40] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind
Machiry, Yanick Fratantonio, Davide Balzarotti, Aurelien Francillon,
Yung Ryn Choe, Christopher Kruegel, et al. Toward the analysis of
embedded ﬁrmware through automated re-hosting.
pages 135–150,
2019.
[41] John L Hennessy and David A Patterson. Computer architecture: a
quantitative approach. Elsevier, 2011.
[42] G. Hernandez, F. Fowze, D. J. Tang, T. Yavuz, P. Traynor, and K. R. B.
Butler. Toward automated ﬁrmware analysis in the iot era. IEEE Security
& Privacy, 17(5):38–46, 2019.
[43] Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term memory.
Neural Computation, 9(8):1735–1780.
[44] Roger A Horn. The hadamard product.
In Proc. Symp. Appl. Math,
volume 40, pages 87–169, 1990.
[45] Xin Hu, Tzi-cker Chiueh, and Kang G Shin. Large-scale malware
indexing using function-call graphs. In Proceedings of the 16th ACM
conference on Computer and communications security, pages 611–620,
2009.
[46] Xin Hu, Kang G Shin, Sandeep Bhatkar, and Kent Grifﬁn. Mutantx-
In Pre-
s: Scalable malware clustering based on static features.
sented as part of the 2013 {USENIX} Annual Technical Conference
({USENIX}{ATC} 13), pages 187–198, 2013.
[47] Joel Jones. Abstract syntax tree implementation idioms. In Proceedings
of the 10th conference on pattern languages of programs (plop2003),
page 26, 2003.
[48] Wei Ming Khoo, Alan Mycroft, and Ross Anderson. Rendezvous: A
In Proceedings of the 10th Working
search engine for binary code.
Conference on Mining Software Repositories, pages 329–338. IEEE
Press, 2013.
[49] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu.
Semantics-based obfuscation-resilient binary code similarity comparison
In Proceedings of
with applications to software plagiarism detection.
the 22nd ACM SIGSOFT International Symposium on Foundations of
Software Engineering, pages 389–400, 2014.
[50] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu.
Semantics-based obfuscation-resilient binary code similarity comparison
with applications to software plagiarism detection. In ACM SIGSOFT
International Symposium on Foundations of Software Engineering, FSE
2014, pages 389–400, New York, NY, USA, 2014. ACM.
[51] Jiang Ming, Meng Pan, and Debin Gao.
with inter-procedural control ﬂow.
Information Security and Cryptology, pages 92–109. Springer, 2012.
ibinhunt: Binary hunting
In International Conference on
[52] Jannik Pewny, Behrad Garmany, Robert Gawlik, Christian Rossow, and
Thorsten Holz. Cross-architecture bug search in binary executables. In
2015 IEEE Symposium on Security and Privacy, pages 709–724. IEEE,
2015.
[53] Edward Raff, Jon Barker, Jared Sylvester, Robert Brandon, Bryan
Catanzaro, and Charles K Nicholas. Malware detection by eating a
In Workshops at the Thirty-Second AAAI Conference on
whole exe.
Artiﬁcial Intelligence, 2018.
[54] Frank Ruskey and TC Hu. Generating binary trees lexicographically.
SIAM Journal on Computing, 6(4):745–758, 1977.
[55] Andreas Sæbjørnsen, Jeremiah Willcock, Thomas Panas, Daniel Quin-
lan, and Zhendong Su. Detecting code clones in binary executables.
In Proceedings of the Eighteenth International Symposium on Software
Testing and Analysis, ISSTA ’09, pages 117–128, New York, NY, USA,
2009. ACM.
[56] Andrew Schulman.
Finding binary clones with opstrings function
digests: Part iii. Dr. Dobb’s Journal, 30(9):64, 2005.
[57] Yusuke Shido, Yasuaki Kobayashi, Akihiro Yamamoto, Atsushi
Miyamoto, and Tadayuki Matsumura. Automatic source code summa-
rization with extended tree-lstm. In 2019 International Joint Conference
on Neural Networks (IJCNN), pages 1–8. IEEE, 2019.
[58] Kai Sheng Tai, Richard Socher, and Christopher D Manning. Improved
semantic representations from tree-structured long short-term memory
networks. arXiv preprint arXiv:1503.00075, 2015.
[59] Kai Sheng Tai, Richard Socher, and Christopher D. Manning. Improved
semantic representations from tree-structured long short-term memory
networks. CoRR, abs/1503.00075, 2015.
[60] Zheng Wang, Ken Pierce, and Scott McFarling. Bmat-a binary matching
tool for stale proﬁle propagation. The Journal of Instruction-Level
Parallelism, 2:1–20, 2000.
[61] J. Wurm, K. Hoang, O. Arias, A. Sadeghi, and Y. Jin.
Security
analysis on consumer and industrial iot devices. In 2016 21st Asia and
South Paciﬁc Design Automation Conference (ASP-DAC), pages 519–
524, 2016.
[62] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn
Song. Neural network-based graph embedding for cross-platform binary
In Proceedings of the 2017 ACM SIGSAC
code similarity detection.
Conference on Computer and Communications Security, pages 363–376.
ACM, 2017.
[63] Yinxing Xue, Zhengzi Xu, Mahinthan Chandramohan, and Yang
Liu. Accurate and scalable cross-architecture cross-os binary code
IEEE Transactions on Software Engineering,
search with emulation.
45(11):1125–1149, 2018.
[64] Fabian Yamaguchi, Felix Lindner, and Konrad Rieck. Vulnerability ex-
trapolation: Assisted discovery of vulnerabilities using machine learning.
In Proceedings of the 5th USENIX conference on Offensive technologies,
pages 13–13, 2011.
[65] Fabian Yamaguchi, Markus Lottmann, and Konrad Rieck. Generalized
vulnerability extrapolation using abstract syntax trees. In Proceedings
of the 28th Annual Computer Security Applications Conference, pages
359–368, 2012.
[66] Wenpeng Yin, Katharina Kann, Mo Yu, and Hinrich Sch¨utze. Compara-
tive study of cnn and rnn for natural language processing. arXiv preprint
arXiv:1702.01923, 2017.
[67] William J Youden. Index for rating diagnostic tests. Cancer, 3(1):32–35,
1950.
[68] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti,
et al. Avatar: A framework to support dynamic security analysis of
embedded systems’ ﬁrmwares. In NDSS, pages 1–16, 2014.
[69] Peng Zhao and Jos´e Nelson Amaral. To inline or not
to inline?
enhanced inlining decisions. In International Workshop on Languages
and Compilers for Parallel Computing, pages 405–419. Springer, 2003.
[70] Mark H Zweig and Gregory Campbell. Receiver-operating characteristic
(roc) plots: a fundamental evaluation tool in clinical medicine. Clinical
chemistry, 39(4):561–577, 1993.