http://orafce.projects.postgresql.org/
Large set of Oracle compatibility functions
“dual” table
Debian and RPM packages available
Invaluable
PortingOracleApplicationstoPostgreSQL:38/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
ora2pg
http://ora2pg.projects.postgresql.org/
Converts Oracle schema definitions
Extracts data from Oracle database for import into
PostgreSQL
Packages available
Invaluable
PortingOracleApplicationstoPostgreSQL:39/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
TOra
http://tora.sourceforge.net/
GUI for PostgreSQL and Oracle
Contains exploration and debugging facilities for Oracle
Packages available, but usually without Oracle support
Generally a bit outdated, but good for this purpose
PortingOracleApplicationstoPostgreSQL:40/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
DBD::Oracle
http://search.cpan.org/dist/DBD-Oracle/
Needed for ora2pg
Also helpful for test scripts etc.
Building it can be challenging
Debian and RPM packages available
PortingOracleApplicationstoPostgreSQL:41/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Oracle Instant Client
Needed for DBD::Oracle and TOra
Also contains sqlplus
download from Oracle
PortingOracleApplicationstoPostgreSQL:42/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Oracle Database Express Edition
Use this for testing if you have no other Oracle instance.
download from Oracle
PortingOracleApplicationstoPostgreSQL:43/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outline
1 Porting the SQL
2 Porting Tools
3 PL/SQL vs. PL/pgSQL
4 Interfaces
5 Project Management
PortingOracleApplicationstoPostgreSQL:44/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
From PL/SQL to PL/pgSQL
Compatibility isn’t that great, but it’s obviously the best
choice.
The PL/pgSQL parser is DAAB.
See also http://www.postgresql.org/docs/current/
static/plpgsql-porting.html.
PortingOracleApplicationstoPostgreSQL:45/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Function Creation
CREATE FUNCTION ... RETURN type becomes
CREATE FUNCTION ... RETURNS type
Function body must be quoted (dollar quoting).
Various other details are incompatible:
LANGUAGE
STRICT, STABLE, etc.
For variable declarations, DECLARE is needed in PostgreSQL.
PortingOracleApplicationstoPostgreSQL:46/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Syntax Differences
FOR i IN REVERSE 1..10 LOOP — Order must be switched
for PostgreSQL.
PortingOracleApplicationstoPostgreSQL:47/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Variables
PL/SQL can distinguish column names and variable names.
PL/pgSQL replaces all matching tokens by variables.
Find a namespacing mechanism to tell apart variables,
parameters, and columns.
PortingOracleApplicationstoPostgreSQL:48/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Packages
Use schemas to group your functions.
Call syntax is about the same.
But there is no equivalent public/private mechanism.
PortingOracleApplicationstoPostgreSQL:49/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Package Variables
Not supported by PostgreSQL
Write a wrapper based on (temporary) tables.
PortingOracleApplicationstoPostgreSQL:50/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Cursors
Usually, you need less cursors in PostgreSQL.
CURSOR foo IS SELECT ...;
BEGIN
FOR x IN foo LOOP
can be simplified to
BEGIN
FOR x IN SELECT ... LOOP
Note: The x is defined implicitly in Oracle. In PostgreSQL, you
need to declare it.
PortingOracleApplicationstoPostgreSQL:51/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Cursors Variables
This doesn’t work in PostgreSQL:
CURSOR foo IS SELECT ...;
x foo%ROWTYPE;
BEGIN
FOR x IN foo LOOP
Use RECORD:
DECLARE
CURSOR foo IS SELECT ..;
x RECORD;
BEGIN
FOR x IN foo LOOP
PortingOracleApplicationstoPostgreSQL:52/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
PERFORM
In PostgreSQL, “procedure” calls must start with PERFORM. E. g.,
service.put_utl(’Error’);
becomes
PERFORM service.put_utl(’Error’);
PortingOracleApplicationstoPostgreSQL:53/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
EXECUTE
For DDL statements, EXECUTE might be necessary. E. g.,
EXECUTE ’CREATE TABLE ’ || quote_ident(foo) || ...
PortingOracleApplicationstoPostgreSQL:54/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Subcommits
Code that does COMMIT or ROLLBACK needs major, client-side
changes. (Savepoints won’t usually do the job.)
PortingOracleApplicationstoPostgreSQL:55/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Exceptions (1)
An exception rolls back all changes implicitly in PostgreSQL.
You can drop most savepoint-using code from the Oracle
version.
More complex behavior needs a redesign.
PortingOracleApplicationstoPostgreSQL:56/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Exceptions (2)
Exception block syntax is the same.
Exception names are different.
Oracle supports user-defined exception names.
Error codes are different.
Variable SQLERRM is available.
Of course, error messages are also different.
PortingOracleApplicationstoPostgreSQL:57/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Exceptions (3)
We use a scheme to encode exception information into the
message string:
RAISE name; ---> RAISE EXCEPTION ’name’;
Similar for error codes:
raise_application_error(12345, ’msg’);
---> RAISE EXCEPTION ’+12345:msg’;
Codes can be positive or negative. Write a wrapper function.
errcode := substr(SQLERRM, 1, 6)
PortingOracleApplicationstoPostgreSQL:58/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
No Data Found Exceptions
Oracle throws NO_DATA_FOUND exceptions for
SELECT
INSERT
UPDATE
DELETE
PostgreSQL only for:
SELECT INTO STRICT
Use IF NOT FOUND to deal with other cases.
PortingOracleApplicationstoPostgreSQL:59/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Logging
dbms_output “package” is provided by orafce. E. g.
dbms_output.put_line(’WRONG PARAMETER: ’ || par);
Watch for interferences from null values!
PortingOracleApplicationstoPostgreSQL:60/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Backtraces
orafce provides dbms_utility.format_call_stack()
impossible to implement
dbms_utility.format_error_stack() in PostgreSQL
(except by patching PL/pgSQL directly)
PortingOracleApplicationstoPostgreSQL:61/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
What About PL/Java?
Should be compatible with SQL/JRT and Oracle
Basic functionality should work without changes
Reality is more complex
There is little or no experience with this scenario.
PortingOracleApplicationstoPostgreSQL:62/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outline
1 Porting the SQL
2 Porting Tools
3 PL/SQL vs. PL/pgSQL
4 Interfaces
5 Project Management
PortingOracleApplicationstoPostgreSQL:63/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
psql/sqlplus
psql is much nicer for interactive use. :-)
sqlplus is much nicer for scripting use. :-(
With use of variables and naming conventions, sqlplus scripts
can be converted anyway.
Consider a wholesale rewrite.
PortingOracleApplicationstoPostgreSQL:64/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Backup, Recovery
Build a new system using transaction log archiving or SQL dumps.
PortingOracleApplicationstoPostgreSQL:65/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Setup, initdb
Works completely differently.
Forget everything you get from Oracle.
Write new setup scripts that integrate well with the operating
system.
Forget about tablespaces, partitioning, OS tuning, etc. until
you have a porting result.
PortingOracleApplicationstoPostgreSQL:66/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
JDBC
Works great, aside from SQL syntax issues
PortingOracleApplicationstoPostgreSQL:67/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outline
1 Porting the SQL
2 Porting Tools
3 PL/SQL vs. PL/pgSQL
4 Interfaces
5 Project Management
PortingOracleApplicationstoPostgreSQL:68/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Testing
Have a test suite for:
functions
setup
tables/database contents
PortingOracleApplicationstoPostgreSQL:69/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Dividing the Work
In PL/SQL-heavy applications, you can usually divide the
work by function or package.
Someone needs to drive and monitor integration work.
Have a test suite.
PortingOracleApplicationstoPostgreSQL:70/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Long-Term Maintenance
Will the original application continue to be developed?
...while the porting project runs?!?
How is the merging going to work?
One time ports, maintainable ports, and mergeable ports are
all slightly different.
PortingOracleApplicationstoPostgreSQL:71/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Code Formatting
Create a code formatting standard.
(This applies to any development project.)
I tend to stick with the original layout.
This is important for later updates, merges, and maintenance.
PortingOracleApplicationstoPostgreSQL:72/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Version Control
Use version control, even if the client doesn’t.
Prefer to use your own VCS; merge later.
PortingOracleApplicationstoPostgreSQL:73/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Beyond the SQL
Applications also contain setup and maintenance scripts.
These were typically written by old-school Oracle
administrators.
Hence completely incomprehensible and written in ksh
Half the logic usually doesn’t make sense for PostgreSQL.
Half the logic required to make PostgreSQL work will not
have been written yet.
Reserve plenty of time for dealing with this.
PortingOracleApplicationstoPostgreSQL:74/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Legacy Code and Legacy Environments
Applications to be ported are usually very old and crufty.
This multiplies the time required to deal with them.
A lot of the code won’t compile/run on newer operating
systems.
Half your tools won’t compile/run on the old operating
system.
Everything is locked down, so you can’t do anything about
this.
Evaluate this carefully before starting the project.
PortingOracleApplicationstoPostgreSQL:75/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Client Participation
Almost always, the database clients will need to be adjusted.
Almost always, you need someone reachable who understands
the code.
Clients think SQL code is a black box with a clean and simple
interface.
In practice, a port is like a major new software release.
A port affects your entire system.
The client must be willing, able, and available to participate in the
project.
PortingOracleApplicationstoPostgreSQL:76/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
“Josh’s Rules (of Database Contracting)”
http://blogs.ittoolbox.com/database/soup/archives/
joshs-rules-of-database-contracting-17253
Learn them by heart.
Print them out.
Post them at your office door.
Quote them to the sales people.
PortingOracleApplicationstoPostgreSQL:77/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Contribute Your Improvements
Porting projects are a great source of ideas for features and
bug fixes.
Record your experiences, e. g., in the wiki.
Contribute to orafce and ora2pg.
Contribute to PL/pgSQL and PL/Java.
PortingOracleApplicationstoPostgreSQL:78/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Coincidence?
If you need help:
Oracle Ask Tom: http://asktom.oracle.com/
PostgreSQL Ask Tom: PI:EMAIL
PortingOracleApplicationstoPostgreSQL:79/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Fly Way to Conclude SQL-Themed Presentation
COMMIT;
PortingOracleApplicationstoPostgreSQL:80/80