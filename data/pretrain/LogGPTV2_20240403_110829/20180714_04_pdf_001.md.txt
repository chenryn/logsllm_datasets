# Indexes and Write Optimization in PostgreSQL

## Speaker: Anastasia Lubennikova
## Website: [www.postgrespro.ru](http://www.postgrespro.ru)

### Agenda
1. Why Do We Need Indexes?
2. Write-Optimization Techniques
3. PostgreSQL-Specific Considerations
4. Advanced PostgreSQL Indexes
5. The Future of Indexing in PostgreSQL

## Introduction to PostgreSQL Indexes

Indexes are crucial for speeding up search operations, but they can also introduce overhead during write operations.

### Benefits of Indexes
- **Speed Up Search**: 
  - **Primary Key**
  - **Constraints**
  - **Secondary Indexes**

### Overheads of Indexes
- **Index Maintenance Overhead**
- **Index Size**
- **INSERT Slowdown**
- **Random I/O**
- **Index Fragmentation**
- **More Indexes = More Overhead**

## Do We Need Write-Optimization?

### Heavy Write Load
- **MVCC (Multi-Version Concurrency Control)**
- **UPDATE Operations**:
  - `UPDATE mytable SET a = a + 1;`

### Performance Impact
- **1GB Table Example**:
  - **Update All Values**:
    - Without Index: ~200 seconds
    - With Index: ~600 seconds

## DBMS Trade-offs

### CAP Theorem
- **ACID vs. BASE**
- **Lower Hardware Cost vs. Better Productivity**
- **Read Speed vs. Write Speed**
- **Productivity vs. Fault-Tolerance**

## Write-Optimization Techniques

### Characteristics
- **Faster Writes**
- **Good Read Performance**
- **Fault-Tolerant Storage**

### Techniques
- **Insert Buffer**:
  - Accumulate data, sort, and insert at once.
  - **Pros**: Avoids random I/O
  - **Cons**: Possible data loss, merge time

- **Seqscan Buffer**:
  - Avoids hidden scans
  - **Cons**: Only non-unique

- **MySQL InnoDB Change Buffer**:
  - Cache-oblivious data structures
  - **Approximately Optimal for Any Hardware**

- **Divide & Conquer**:
  - **LSM Trees (Log-Structured Merge Trees)**:
    - Cascade of B-trees
    - First tree is in memory
    - **Examples**:
      - LevelDB
      - BigTable
      - Cassandra
      - HBase
      - SophiaDB
      - Other NoSQL Databases

- **From LSM to COLA (Cache-Oblivious Lookahead Arrays)**:
  - Introduced in 2007 by founders of Tokutek
  - Leaf levels linked by lookahead pointers
  - **COLA: Theory and Practice**:
    - Prototype shows incredible results!
    - **Challenges**:
      - VACUUM
      - WAL (Write-Ahead Logging)
      - Concurrency
      - Index size

- **Fractal Tree**:
  - Insert the message instead of the data
  - Send it down the tree
  - Apply the message to the leaf page
  - **Examples**:
    - TokuDB for MySQL
    - TokuMX for MongoDB

## PostgreSQL-Specific Considerations

### Write-Ahead-Log (WAL)
- **WAL is not extendable**
- **File Manager**:
  - 1 Relation (Heap or Index) = 1 continuous file
- **Free Space Map**
- **Block Size**:
  - 8 KB

## Advanced PostgreSQL Indexes

### Optimizing Index Usage
- **pg_stat_statements**: Track and optimize index usage
- **REINDEX**: Rebuild bloated and fragmented indexes
- **CREATE INDEX CONCURRENTLY**: Minimize downtime during index creation

### Partial Indexes
- **BRIN (Block Range INdex)**:
  - Tiny min/max index

### Covering and Unique Indexes
- **Maintain Constraints (Unique, Primary Key, etc.) on A**
- **Use IndexOnlyScan on A, B**
- **Maintain Two Indexes**:
  - Covering + Unique
  - **Example**:
    ```sql
    CREATE UNIQUE INDEX ON mytable USING btree(a) INCLUDING(b);
    ```

### Effective Storage of Duplicates
- **Compress Duplicated Keys on Index Page**:
  - In Progress

### Bulk Insert
- **Example**:
  ```sql
  INSERT INTO mytable SELECT x FROM generate_series(0, 1000000) AS x;
  ```
  - **Impact**:
    - 1,000,000 B-tree searches
    - 1,000,000 WAL records

### Insert Buffer
- **Flexible and Recoverable**:
  - In Development

## Conclusion

Thank you for your attention! Any questions?

**Contact Information**:
- Email: [PI:EMAIL]
- Website: [www.postgrespro.ru](http://www.postgrespro.ru)