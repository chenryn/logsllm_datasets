(except for the XMSS benchmarks) using openssl 1.1.1h.
For XMSS-SHA2 20 256 the average signing time mea-
sured is 4.23 ms, which also updates the key and thus doubles
as key-evolution-time. Signature veriﬁcation takes 0.25 ms on
average, and key generation takes about 7.7 min, which does
however generate all values that are necessary to set up the
pebbling structure without additional cost. (Key generation
time of XMSS can be brought down to 0.9 s when using the
multi-tree version. This comes at the cost of doubled signature
size and - more importantly - using a non-generic multiple
layer structure for the pebbling.)
For RSA-2048 we measured an average signing-time of
0.54 ms, and veriﬁcation time of 0.02 ms. RSA key generation
has less consistent performance due to the rejection-sampling
in prime number generation. We measured a median time of
51 ms with 31 ms and 83 ms as 0.25 and 0.75 quantiles and
an average of 63 ms.
Pebbling H and the static key will involve up to 20
2 = 10
evaluations of H and the key-evolution of the static scheme
per step. Individual evaluations of H are completely negligible
(≪ 0.01 ms) next to all this.
Hence, Σ.sign takes about 0.54 ms, and Σ.verify roughly
0.27 ms. The runtime of Σ.gen is essentially the 7.7 min for
XMSS key generation. Hashing a short bitstring 220 times with
SHA256 takes 61 ms which is essentially all that is needed to
set up the other pebbling-structures and easily falls within the
runtime-variation of the former.
For Σ.evolve we get 2· 63 ms + 4.23 ms + 2· 10· 4.23 ms ≈
215 ms. More important is the speed with which multiple
evolutions can be performed in quick succession (this is e.g.
relevant on devices that have not been used in a while). In this
case the creation of the dynamic signing-key and the time-
lock puzzle can be left out, giving us 88.8 ms per epoch;
Notably though the pebbling can be trivially parallelized to
up to 2 · 10 = 20 threads which on our 6-core CPU gives
us 4.23 ms · (cid:100) 20
3.65 s of parallel computation per fast-forwarded day.
2·6(cid:101) + 4.23 ms ≈ 12.7 ms, which is equivalent
B. Deﬁnitions
1) IND-NMA-security:
Intuitively a time lock puzzle is
IND-NMA-secure if no PPT-adversary can distinguish encap-
sulated values of its choice faster than ∆t:
Deﬁnition 20 (IND-NMA-Security). A timelock-puzzle is
IND-NMA-secure, if no PPT-adversaries A has a chance non-
negligibly better than 1/2 of winning in Experiment 6:
∀A ∈ PPT, λ ∈ N, ∆t ∈ T :
(cid:104)
ExpIND-NMA
Pr
=: AdvIND-NMA
(cid:105) − 1
TL,A (cid:0)1λ, ∆t(cid:1) = 1
TL, A (cid:0)1λ, ∆t(cid:1) ≤ negl (λ)
TL,A (cid:0)1λ, ∆t(cid:1)
2
Experiment 6: ExpIND-NMA
1 m0, m1 := A(1λ, ∆t)
2 abort if(|m0| (cid:54)= |m1|)
3 b ←$ {0, 1}
4 c := TL.lock(cid:0)1λ, ∆t, mb
(cid:1)
5 t0 := now()
6 b(cid:48) := A(mb)
7 t1 := now()
8 abort if(t1 − t0 ≥ ∆t)
9 return b = b’
Note also that our deﬁnition uses two security parameters:
∆t and 1λ; the later is a regular security parameter that limits
the total amount of (potentially parallel) work an attacker may
perform. This is necessary because most time lock puzzles can
be broken in a very short amount of time as long as the total
work is unbounded (for example by searching for the message
and the randomness via parallel brute force).
We note that this deﬁnition is simpliﬁed over pre-existing
ones such as the one from Bitansky et al.[26], but sufﬁcient
for our purposes: Given the complications of the entire se-
curity model that the introduction of the circuit-depth of the
adversary would mean, and that an instantiation would have to
translate that into real-time anyways, a higher-level approach
appears to be a better choice for us in our particular use-case.
2) Hidden Full Interaction:
Deﬁnition 21 (Hidden Full Interaction). Let il be a consistent
instruction list as deﬁned in section II with starting state st.
We say that il causes a hidden full interaction in a group
gr ∈ st.G, if there is a consecutive sublist il
(cid:48) in il, in which
every action concerning gr is hid and for every party P ∈ gr
at least one of the following holds:
• P successfully sends a (valid) message m:
getting the identiﬁer id
1) P executes SndM(gr, m) for any valid message m,
2) All parties P(cid:48) ∈ gr,P(cid:48) (cid:54)= P execute rcv(gr)
3) P successfully executes Ack(id)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1691
• P successfully leaves the group:
1) P executes Leave(gr), getting the identiﬁer id.
2) All parties P(cid:48) ∈ gr,P(cid:48) (cid:54)= P execute rcv(gr)
3) P successfully executes Ack(id)
• P is successfully removed from the group:
the identiﬁer id.
1) An administrator V∗ executes Rmv(gr,P), getting
2) All parties P(cid:48) ∈ gr,P(cid:48) /∈ {V∗,P} execute rcv(gr)
3) V∗ successfully executes Ack(id)
We deﬁne the predicate HFI that takes an instruction list il,
a starting state st and a group-identiﬁer gr and returns 1 if
and only if executing il with starting-state st causes a hidden
full interaction in the group identiﬁed by gr.
3) Completeness of Epochal Signatures:
Deﬁnition 22 (Completeness of Epochal Signatures). An
epochal signature Σ scheme is complete if:
∀λ ∈ N, E ∈ poly(λ), V ∈ {1, . . . , E − 1},
pk , sk ← Σ.gen(cid:0)1λ, ∆t, E , V(cid:1) , e ∈ {1, . . . , E − 1},
e(cid:48) ∈ {e, . . . , min (e + V , E )} :
Σ.verify (pk , e(cid:48), Σ.sign (sk e, e) m, m) = 1
Where sk e is the secret key returned from the e’th exection
of Σ.evolve.
C. Proofs
1) Proof of Theorem 6:
Theorem 6. Σ is unforgeable in the sense of Deﬁnition 16
with:
AdvEEUF-CMA
Σ,E ,V , F (cid:0)1λ, ∆t(cid:1)
(cid:0)1λ(cid:1)
 E · AdvPRF
(cid:0)1λ, V · ∆t(cid:1)
(cid:0)1λ(cid:1)
H, APRF
+ V · AdvIND-NMA
(cid:0)1λ(cid:1)
(cid:98)Σ,E , A4
+ AdvFS-EUF-CMA
+ AdvEUF-CMA
T L, AIND-NMA
Σ, A5
≤E ·
Proof. Let E be the total number of epochs. We will show
that our scheme is secure using game-hopping:
Let Game 0 be the original EEUF-CMA-game and
Pr [break0] be the probability that a forger F succeeds in
presenting a forgery.
For Game 1 we guess the epoch e for which the forger will
be successful in creating a forgery and abort if this is not the
case. Since signatures are valid for V epochs, this means that
this abort will happen by the end of epoch e + V . Our guess
will be correct with probability E−1, giving us:
Pr [break0] ≤ E · Pr [break1]
In Game 2 we replace the results of all evaluations of
H(re,·) with random values. In order to do this, we have to
replace all later values of r as well in reverse order, using the
PRF-assumption for H.
Let Game 2.E := Game 1. For all i in {E − 1, . . . , e}
the second
perform the following replacement: (Note that
number in the game labels identiﬁes the epoch that is modiﬁed
and is thus counting down instead of up.)
In Game 2.i we replace the results of all evaluations of
H(ri+1,·) with random values. To show that this replacement
is sound we initialize a PRF-challenger and use the oracle it
provides instead of computing H directly. This replacement is
sound as by Game 2.i + 1 ri+1 is a truly random value. If the
challengers internal bit is 0 than we are in Game 2.(i + 1),
otherwise we are in Game 2.i. We can therefore convert any
adversary capable of detecting this change into an adversary
A2.i capable of breaking the PRF-security of H:
Pr [break2.i+1] ≤ Pr [break2.i] + AdvPRF
H, A2.i
Since there are at most E hops like this, we conclude that:
(cid:0)1λ(cid:1)
(cid:0)1λ(cid:1)
Pr [break1] ≤ Pr [break2] + E · AdvPRF
H, A2
instead
3 we
In Game
in
encapsulate
question.
the
tle, . . . , tle+V −1
identical sub-hops. Let
To do this we need V almost
Game 3.V := Game 2. For all i in {V − 1, . . . , 0} perform
the following replacement: (Note that the second number in
the game labels is again counting down.)
random strings
secrets
of
in
In Game 3.i we replace the value encapsulated in tle+i
with a random string. This is a sound replacement due to the
temporal hiding property of the time lock puzzle: To show
this we initialize a hiding-challenger and query it with rt||(cid:98)sk t
as m0 and a random string of the same length as m1. This
replacement is sound since the randomness used to generate
the time lock puzzle is actually random by Game 3.(i+1) and
since the overall security-game ensures that the puzzle is not
older than V ·∆t. If the challengers internal bit is 0 then we are
in Game 3.(i + 1). Otherwise the output is the encapsulation
of a random value and we are in Game 3.i. Any adversary
capable of distinguishing these two games can therefore be
turned into an adversary A3.i against the hiding property of
the time lock puzzle and we have:
(cid:3) ≤ Pr [break3.i] + AdvIND-NMA
Pr(cid:2)break3.(i+1)
T L, A3.i
By deﬁning Game 3 := Game 3.0 and combining these sub-
hops, we get:
Pr [break2] ≤ Pr [break3] + V · AdvIND-NMA
T L, A3
In Game 4 we modify the key-generation as follows: After
setting up r and sk r we compute re(cid:48), pk e(cid:48), sk e(cid:48), tle(cid:48) for all
epochs e(cid:48) ∈ {e − V + 1, . . . , e + V } directly. After that we
initialize a FS-EUF-CMA-challenger for the forward-secure
signature scheme and receive its public key (cid:99)pk which we
will use instead of generating our own. Then we request the
signatures on our dynamic level public keys. For this we ﬁrst
ask the challenger to perform E − e− V + 1 key-updates. For
each i ∈ {V − 1, . . . , 0} we then
||e + i ||re+i−V
• request a signature (cid:98)σe+i on pk e+i
Then we request the updated secret key (cid:98)sk e−1. Using this key
we can set up (cid:98)sk for the ﬁrst e − 1 epochs and complete
the key-generation as normal. For the ﬁrst e − 1 epochs we
||tle+i−V and then
• request a key-update.
(cid:0)1λ, V · ∆t(cid:1)
(cid:0)1λ, V · ∆t(cid:1)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:37 UTC from IEEE Xplore.  Restrictions apply. 
1692
tle(cid:48)
leave Σ.evolve and Σ.sign unchanged. From the e’th epoch
onwards we modify Σ.evolve to use the respective (cid:98)σe(cid:48) and
computing them honestly and set (cid:98)sk’ to ⊥ as it is no longer
that we prepared during the key-generation instead of
needed: By Game 1 no more evolutions are performed after
the e + V ’th epoch and Σ.sign does not use that key. All
values that are given to the adversary are still sampled from
the same distributions as in Game 4, therefore this part of the
change is perfectly undetectable. If the adversary presents a
valid forgery for epoch e, we check whether the static level
signature is equal to (cid:98)σe. If it is not, we can forward it to the
FS-EUF-CMA-challenger and win the FS-EUF-CMA-game
and abort. Otherwise we proceed as before. The difference
between the games is therefore perfectly indistinguishable
unless F manages to forge a static level signature. and we
ﬁnd:
Pr [break3] ≤ Pr [break4] + AdvFS-EUF-CMA
(cid:98)Σ,E , A4
(cid:0)1λ(cid:1)
In Game 5 we lastly consider the case in which the adver-
sary attacks the dynamic scheme: When it is time to compute
pk e and sk e we instead initialize an EUF-CMA challenger
for the dynamic signature-scheme and use the challenge public
key as pk e. This replacement is sound as the randomness used
for the key-generation algorithm is true randomness by Game
2. Whenever we need to sign a message using sk e we instead
request the signature from the challenger. Once the forger
presents us with a valid forgery the static level signature is
by Game 4 the one that we created during the key-generation
phase and therefore not new. Since the new signature is by
assumption fresh this means by the structure of the scheme,
that the dynamic level signature is fresh. Therefore it can be
forwarded to the EUF-CMA challenger who will accept it.
Therefore any adversary capable of winning Game 5 can be
converted into an adversary A6 that has the same probability
of breaking the dynamic signature scheme and we ﬁnd:
Pr [break5] = AdvEUF-CMA
Σ, A5
AdvEEUF-CMA
Combining these, we get that for all forgers F:
Σ,E ,V , F (cid:0)1λ, ∆t(cid:1)
(cid:0)1λ(cid:1)
 E · AdvPRF
(cid:0)1λ, V · ∆t(cid:1)
(cid:0)1λ(cid:1)
H, APRF
+ V · AdvIND-NMA
(cid:0)1λ(cid:1)
(cid:98)Σ,E , A4
+ AdvFS-EUF-CMA
+ AdvEUF-CMA
advantage among all A3.i. This means that if H, T L, (cid:98)Σ and Σ
Where APRF is the adversary with the highest advantage
among all A2.i and AIND-NMA is the adversary with the highest
T L, AIND-NMA
≤E ·
provide the respective security notions, then Σ is unforgeable
in the sense of EEUF-CMA.
Σ, A5
(cid:0)1λ(cid:1)
2) Π only uses the secret key of a simple (EUF-CMA-
secure) signature-scheme as long-term secret.
3) Π works with every EUF-CMA-secure signature scheme.
4) Π only uses the long-term secret key to create signatures
with the regular signing algorithm.
5) There exists a time period tΠ such that Π never veriﬁes
a signature more than tΠ after its creation.
6) Π does not use any oracles that cannot be efﬁciently
simulated.
Then the protocol Π∗ that only differs from Π in that the
conventional signature-scheme is replaced with an epochal
signature-scheme Σ with parameters so that (V −1)·∆t ≥ tΠ
is HFI-OfD-secure.
We refer to the full version for a discussion of the require-
ments and notes on authenticity and completeness.
1) Deniability:
Intuitively the deniability of the scheme
is primarily a consequence of the deniability of the epochal
signature-scheme, Requirement 2 that all other secrets are
ephemeral and can thus be sampled by a simulator and
Requirement 1 that demands that Π is disjoined under hidden
full interactions. Most of the other requirements boil down to
“the protocol does nothing weird or unusual” and are therefore
less important for a ﬁrst intuition.
In order to deﬁne our simulator S we ﬁrst introduce the