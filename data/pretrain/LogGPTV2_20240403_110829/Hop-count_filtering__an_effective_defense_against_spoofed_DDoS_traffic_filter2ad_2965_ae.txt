imental results to predict the performance of HCF under real DDoS
attacks, we can conﬁrm whether HCF provides signiﬁcant resource
savings.
We set up a simple testbed of two machines connected to a 100
Mbps Ethernet hub. A Dell Precision workstation with 1.9 GHz Pen-
tium 4 processor and 1 GB of memory, simulates the victim server
where HCF is installed. A second machine generates various types
of IP trafﬁc to emulate incoming attack trafﬁcs to the victim server.
To minimize the effect of caches, we randomize each hash key to
simulate randomized IP addresses to hit all buckets in the hash table.
For each hop-count look-up, we assume the worst case search time.
The search of a 24-bit address preﬁx traverses the entire chained list
of 11 entries, and the hop-count lookup within the 24-bit preﬁx tra-
verses the entire depth of the tree.
We generate two types of trafﬁc, TCP and ICMP, to emulate ﬂood-
ing trafﬁcs in DDoS attacks. In the case of ﬂooding TCP trafﬁc, we
use a modiﬁed version of tcptraceroute [1] to generate TCP
SYN packets to simulate a SYN ﬂooding attack.
In addition, we
also repeatedly open a TCP connection on the victim machine and
close it right away, which includes sending both SYN and FIN pack-
ets. Linux delays most of the processing and the establishment of the
connection control block until receiving the ﬁnal ACK from the host
that does the active open. Since the processing to establish a con-
nection is included in our open + close experiment, the mea-
sured critical path may be longer than that in a SYN ﬂooding attack.
To emulate ICMP attacks, we run three experiments of single-stream
pings. The ﬁrst uses default 64-byte packets, and the second uses
1500-byte packets. In both experiments, packets are sent at 10 ms in-
tervals. The third experiment uses ping ﬂood (ping -f) with the
default packet size of 64 bytes and sends packets as fast as the sys-
tem can transmit. To understand HCF’s impact on normal IP trafﬁc,
we also consider bulk data transfers under both TCP and UDP. We
compare the per-packet overhead without HCF with the per-packet
overhead of the ﬁltering function in Table 2.
We present the recorded processing times in CPU cycles in Ta-
ble 2. The column under ’with HCF’ lists the execution times of the
ﬁltering function. The column under ‘without HCF’ lists the normal
Filtering 90% of DDoS Traffic
Filtering 70% of DDoS Traffic
Filtering 50% of DDoS Traffic
8. RELATED WORK
l
s
e
c
y
c
U
P
C
d
e
v
a
s
f
t
o
e
g
a
n
e
c
r
e
P
100
90
80
70
60
50
40
10
20
30
Researchers have used the distribution of TTL values seen at servers
to detect abnormal load spikes due to DDoS trafﬁc [34]. The Razor
team at Bindview built Despoof [2], which is a command-line anti-
spooﬁng utility. Despoof compares the TTL of a received packet
that is considered “suspicious,” with the actual TTL of a test packet
sent to the source IP address, for veriﬁcation. However, Despoof re-
quires the administrator to determine which packets should be exam-
ined, and to manually perform this veriﬁcation. Thus, the per-packet
processing overhead is prohibitively high for weeding out spoofed
trafﬁc in real time.
In parallel with, and independent of our work, the possibility of
using TTL for detecting spoofed packet was discussed in [42]. Their
results have shown that the ﬁnal TTL values from an IP address were
predictable and generally clustered around a single value, which is
consistent with our observation of hop-counts being mostly stable.
However, the authors did not provide a detailed solution against
spoofed DDoS attacks. Neither did they provide any analysis of the
effectiveness of using TTL values, nor the construction, update, and
deployment of an accurate TTL mapping table. In this paper, we
examine both questions and develop a deployable solution.
There are a number of recent router-based ﬁltering techniques to
lessen the effects of DDoS packets or to curb their propagations in
the Internet. As a proactive solution to DDoS attacks, these ﬁltering
schemes [15, 25, 31, 45], which must execute on IP routers or rely on
routers’ markings, have been proposed to prevent spoofed IP packets
from reaching intended victims. The most straightforward scheme is
ingress ﬁltering [15], which blocks spoofed packets at edge routers,
where address ownership is relatively unambiguous, and trafﬁc load
is low. However, the success of ingress ﬁltering hinges on its wide-
deployment in IP routers. Most ISPs are reluctant to implement this
service due to administrative overhead and lack of immediate bene-
ﬁts to their customers.
Given the reachability constraints imposed by routing and network
topology, route-based distributed packet ﬁltering (DPF) [31] utilizes
routing information to determine whether an incoming packet at a
router is valid with respect to the packet’s inscribed source and des-
tination IP addresses. The experimental results reported in [31] show
that a signiﬁcant fraction of spoofed packets may be ﬁltered out, and
those spoofed packets that DPF fails to capture, can be localized into
ﬁve candidate sites which are easy to trace back.
To validate that an IP packet carries the true source address,
SAVE [25], a source address validity enforcement protocol, builds a
table of incoming source IP addresses at each router that associates
each of its incoming interfaces with a set of valid incoming network
addresses. SAVE runs on each IP router and checks whether each
IP packet arrives at the expected interface. By matching incoming
IP addresses with their expected receiving interfaces, the set of IP
source addresses that any attacker can spoof are greatly reduced.
Based on IP traceback marking, Path Identiﬁer (Pi) [45] embeds
a path ﬁngerprint in each packet so that a victim can identify all
packets traversing the same path across the Internet, even for those
with spoofed IP addresses.
Instead of probabilistic marking, Pi’s
marking is deterministic. By checking the marking on each packet,
the victim can ﬁlter out all attacking packets that match the path
signatures of already-known attacking packets. Pi is effective even if
only half of the routers in the Internet participate in packet marking.
There already exist commercial solutions [22, 29] that block the
propagation of DDoS trafﬁc with router support. However, the main
difference between our scheme and the existing approaches is that
HCF is an end-system mechanism that does not require any network
support. This difference implies that our solution is immediately
deployable in the Internet.
40
70
Percentage of DDoS traffic
50
60
80
90
100
Figure 14: Resource savings by HCF.
packet processing times without HCF. Each row in the table repre-
sents a single experiment, and each experiment is run with a large
number (≈ 40,000) of packets to compute the average number of cy-
cles. We present both the minimum and the average numbers. There
exists a difference between average cycles and minimum cycles for
two reasons. First, some packets take longer to process than oth-
ers, e.g., a SYN/ACK packet takes more time than a FIN packet.
Second, the average cycles may include lower-level interrupt pro-
cessing, such as input processing by the Linux Ethernet driver. We
observe that, in general, the ﬁltering function uses signiﬁcantly fewer
cycles than the emulated attacking trafﬁc, generally an order of mag-
nitude less. Consequently, HCF should provide signiﬁcant resource
savings by detecting and discarding spoofed trafﬁc. In case of bulk
data transfers, the differences are also signiﬁcant. However, the pro-
cessing of packets in bulk data transfers takes fewer cycles than the
emulated attack trafﬁc. We attribute this to TCP header prediction
and UDP’s much simpler protocol processing. It is fair to say that
the ﬁltering function adds only a small overhead to the processing of
legitimate IP trafﬁc. However, this is by far more than compensated
by not processing spoofed trafﬁc.
To illustrate the potential savings in CPU cycles, we compute the
actual resource savings we can achieve, when an attacker launches a
spoofed DDoS attack against a server. Given attack and legitimate
trafﬁc, a and b, in terms of the fraction of total trafﬁc per unit time,
the average number of CPU cycles consumed per packet without
HCF is a · tD + b · tL, where tD and tL are the per-packet process-
ing times of attack and legitimate trafﬁc, respectively. The average
number of CPU cycles consumed per packet with HCF is:
(1− α)· a· tDF + α· a· tD + b· (tL +tLF )
with tDF and tLF being the ﬁltering overhead for attack and le-
gitimate trafﬁc, respectively, and α the percentage of attack trafﬁc
that we cannot ﬁlter out. Let’s also assume that the attacker uses
64-byte ping trafﬁc to attack the server that implements HCF. The
results for various a, b, and α parameters are plotted in Figure 14.
The x-axis is the percentage of total trafﬁc contributed by the DDoS
attack, namely a. The y-axis is the number of CPU cycles saved as
the percentage of total CPU cycles consumed without HCF. The ﬁg-
ure contains a number of curves, each corresponding to an α value.
Since the per-packet overhead of the DDoS trafﬁc (20,194) is much
higher than TCP bulk transfer (6,538), the percentage of the DDoS
trafﬁc that HCF can ﬁlter, (1− α), essentially becomes the sole de-
termining factor in resource savings.
As the composition of total trafﬁc varies, the percentage of resource
savings remains essentially the same as (1− α).
9. CONCLUSION AND FUTURE WORK
In this paper, we present a hop-count based ﬁltering scheme that
detects and discards spoofed IP packets to conserve system resources.
Our scheme inspects the hop-count of each incoming packet to vali-
date the legitimacy of the packet. Using moderate amount of storage,
HCF constructs an accurate IP2HC mapping table via IP address ag-
gregation and hop-count clustering. A pollution-proof mechanism
initializes and updates entries in the mapping table. By default, HCF
stays in alert state, monitoring abnormal IP2HC mapping behaviors
without discarding any packet. Once spoofed DDoS trafﬁc is de-
tected, HCF switches to action state and discards most of the spoofed
packets.
By analyzing actual network measurements, we show that HCF
can remove 90% of spoofed trafﬁc. Moreover, even if an attacker is
aware of HCF, he or she cannot easily circumvent HCF. Our ex-
perimental evaluation has shown that HCF can be efﬁciently im-
plemented inside the Linux kernel. Our analysis and experimental
results have indicated that HCF is a simple and effective solution
in protecting network services against spoofed IP packets. Further-
more, HCF can be readily deployed in end-systems since it does not
require any network support.
There are several issues that warrant further research. First, the ex-
istence of NAT (Network Address Translator) boxes, each of which
may connect multiple stub networks, could make a single IP address
appear to have multiple valid hop-counts at the same time. We will
need experimental studies to understand the effectiveness of HCF in
the presence of NAT. Second, to install the HCF system at a victim
site for practical use, we need a systematic procedure for setting the
parameters of HCF, such as the frequency of dynamic updates. Fi-
nally, we would like to build and deploy HCF in various networks to
see how effective it is against real spoofed DDoS trafﬁcs.
10. REFERENCES
[1] Dave Andersen. tcptraceroute. Available: http://nms.lcs.mit.edu/software/ron/.
[2] Razor Team at Bindview. Despoof, 2000. Available:
http://razor.bindview.com/tools/desc/despoof readme.html.
[3] G. Banga, P. Druschel, and J. Mogul. Resource containers: A new facility for
resource management in server systems. In Proceedings of USENIX OSDI’99,
New Orleans, LA, February 1999.
[4] S. M. Bellovin. Icmp traceback messages. In Internet Draft:
draft-bellovin-itrace-00.txt (work in progress), March 2000.
[5] N. Bhatti and R. Friedrich. Web server support for tiered services. IEEE Network,
13(5), September/October 1999.
[6] CERT Advisory CA-2000.01. Denial-of-service development, January 2000.
Available: http://www.cert.org/advisories/CA-2000-01.html.
[7] CERT Advisory CA-96.21. TCP SYN ﬂooding and IP spooﬁng, November 2000.
Available: http://www.cert.org/advisories/CA-96-21.html.
[8] CERT Advisory CA-98.01. smurf IP denial-of-service attacks, January 1998.
Available: http://www.cert.org/advisories/CA-98-01.html.
[9] B. Cheswick, H. Burch, and S. Branigan. Mapping and visualizing the internet. In
Proceedings of USENIX Annual Technical Conference ’2000, San Diego, CA,
June 2000.
[10] K. Claffy, T. E. Monk, and D. McRobb. Internet tomography. In Nature, January
1999. Available: http://www.caida.org/Tools/Skitter/.
[11] E. Cronin, S. Jamin, C. Jin, T. Kurc, D. Raz, and Y. Shavitt. Constrained mirror
placement on the internet. IEEE Journal on Selected Areas in Communications,
36(2), September 2002.
[12] S. Dietrich, N. Long, and D. Dittrich. Analyzing distributed denial of service
tools: The shaft case. In Proceedings of USENIX LISA’2000, New Orleans, LA,
December 2000.
[13] D. Dittrich. Distributed Denial of Service (DDoS) attacks/tools page. Available:
http://staff.washington.edu/dittrich/misc/ddos/.
[14] The Swiss Education and Research Network. Default TTL values in TCP/IP,
2002. Available: http://secfr.nerim.net/docs/ﬁngerprint/en/ttl default.html.
[15] P. Ferguson and D. Senie. Network ingress ﬁltering: Defeating denial of service
attacks which employ IP source address spooﬁng. In RFC 2267, January 1998.
[16] National Laboratory for Applied Network Research. Active measurement project
(amp), 1998-. Available: http://watt.nlanr.net/.
[17] M. Fullmer and S. Romig. The osu ﬂow-tools package and cisco netﬂow logs. In
Proceedings of USENIX LISA’2000, New Orleans, LA, December 2000.
[18] L. Garber. Denial-of-service attack rip the internet. IEEE Computer, April 2000.
[19] S. Gibson. Distributed reﬂection denial of service. In Technical Report, Gibson
Research Corporation, February 2002. Available: http://grc.com/dos/drdos.htm.
[20] T. M. Gil and M. Poletter. Multops: a data-structure for bandwidth attack
detection. In Proceedings of USENIX Security Symposium’2001, Washington
D.C, August 2001.
[21] R. Govinda and H. Tangmunarunkit. Heuristics for internet map discovery. In
Proceedings of IEEE INFOCOM ’2000, Tel Aviv, Israel, March 2000.
[22] Arbor Networks Inc. Peakﬂow DoS, 2002. Available:
http://arbornetworks.com/standard?tid=34&cid=14.
[23] J. Ioannidis and S. M. Bellovin. Implementing pushback: Router-based defense
against ddos attacks. In Proceedings of NDSS’2002, San Diego, CA, February
2002.
[24] A. D. Keromytis, V. Misra, and D. Rubenstein. Sos: Secure overlay services. In
Proceedings of ACM SIGCOMM ’2002, Pittsburgh, PA, August 2002.
[25] J. Li, J. Mirkovic, M. Wang, P. Reiher, and L. Zhang. Save: Source address
validity enforcement protocol. In Proceedings of IEEE INFOCOM ’2002, New
York City, NY, June 2002.
[26] R. Mahajan, S. M. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S. Shenker.
Controlling high bandwidth aggregates in the network. ACM Computer
Communication Review, 32(3), July 2002.
[27] D. Moore, G. Voelker, and S. Savage. Inferring internet denial of service activity.
In Proceedings of USENIX Security Symposium’2001, Washington D.C., August
2001.
[28] Robert T. Morris. A weakness in the 4.2bsd unix tcp/ip software. In Computing
Science Technical Report 117, AT&T Bell Laboratories, Murray Hill, NJ,
February 1985.
[29] Mazu Networks. Enforcer, 2002. [Online]. Available:
http://www.mazunetworks.com/products/.
[30] P. G. Neumann and P. A. Porras. Experience with emerald to date. In Proceedings
of 1st USENIX Workshop on Intrusion Detection and Network Monitoring, April
1999.
[31] K. Park and H. Lee. On the effectiveness of route-based packet ﬁltering for
distributed dos attack prevention in power-law internets. In Proceedings of ACM
SIGCOMM ’2001, San Diego, CA, August 2001.
[32] V. Paxson. End-to-end routing behavior in the internet. IEEE/ACM Transactions
on Networking, 5(5), October 1997.
[33] V. Paxson. An analysis of using reﬂectors for distributed denial-of-service
attacks. ACM Computer Communication Review, 31(3), July 2001.
[34] M. Poletto. Practical approaches to dealing with ddos attacks. In NANOG 22
Agenda, May 2001. Available: http://www.nanog.org/mtg-0105/poletto.html.
[35] X. Qie, R. Pang, and L. Peterson. Defensive programming: Using an annotation
toolkit to build dos-resistant software. In Proceedings of USENIX OSDI’2002,
Boston, MA, December 2002.
[36] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical network support
for IP traceback. In Proceedings of ACM SIGCOMM ’2000, Stockholm, Sweden,
August 2000.
[37] A. C. Snoren, C. Partridge, L. A. Sanchez, C. E. Jones, F. Tchakountio, S. T.
Kent, and W. T. Strayer. Hash-based IP traceback. In Proceedings of ACM
SIGCOMM ’2001, San Diego, CA, August 2001.
[38] D. Song and A. Perrig. Advanced and authenticated marking schemes for IP
traceback. In Proceedings of IEEE INFOCOM ’2001, Anchorage, Alaska, March
2001.
[39] O. Spatscheck and L. Peterson. Defending against denial of service attacks in
Scout. In Proceedings of USENIX OSDI’99, New Orleans, LA, February 1999.
[40] N. Spring, R. Mahajan, and D. Wetherall. Measuring isp topologies with
rocketfuel. In Proceedings of ACM SIGCOMM ’2002, Pittsburgh, PA, August
2002.
[41] R. Stone. Centertrack: An IP overlay network for tracking DoS ﬂoods. In
Proceedings of USENIX Security Symposium’2000, Denver, CO, August 2000.
[42] S. Templeton and K. Levitt. Detecting spoofed packets. In Proceedings of The
Third DARPA Information Survivability Conference and Exposition (DISCEX
III)’2003, Washington, D.C., April 2003.
[43] H. Wang, D. Zhang, and K. G. Shin. Detecting syn ﬂooding attacks. In
Proceedings of IEEE INFOCOM ’2002, New York City, NY, June 2002.
[44] G. R. Wright and W. R. Stevens. TCP/IP Illustrated, Volume 2. Addison-Wesley
Publishing Company, 1994.
[45] A. Yaar, A. Perrig, and D. Song. Pi: A path identiﬁcation mechanism to defend
against ddos attacks. In Proceedings of IEEE Symposium on Security and
Privacy, Oakland, CA, May 2003.