cases.
Figure 6: Atomicity state machine showing explicit and im-
plicit transitions from unprotected, enclaved, and sched-
uler states. Note, that interrupt transitions are not explicitly
shown in this figure but can be interpreted as enter_sched
transitions.
B CASE STUDY SOURCE CODE IN C
\
\
__asm__ (" push r15 ");
__asm__ (" mov .w %0 , r15 " : : "i"( clix_length ));
__asm__ (". word 0 x1389 ");
__asm__ (" pop r15 ");
1 # include 
2 # include " uart .h"
3 # include " uart_hardware .h"
4 # include 
5 # include " kernel_defines .h"
6 # include " secure_mintimer .h"
7 # include " log .h"
8 # include " sancus_helpers .h"
9
10 # define ___MACRO_CLIX ( clix_length )
11
12
13
14
15
16 # define _HAVE_APPA
17 # define _HAVE_APPB
18 # define _HAVE_APP_SLEEP
19 # define _HAVE_IO_THREAD
20
21 /* --- IO Enclave --------------------------------------------- */
22 DECLARE_SM ( ioenclave ,
23
24 # ifdef _HAVE_IO_THREAD
25 # define IO_BUFS
26 SM_DATA ( ioenclave ) unsigned char io_bufs [ IO_BUFS ] = {0 , 0, 0, 0};
27 SM_DATA ( ioenclave ) bool io_ready [ IO_BUFS ] = { false , false , false ,
0 x1234 );
1
1
1
1
\
\
4
false };
28 # endif
// !!
return ( false );
} else {
io_bufs [ caller ]
io_ready [ caller ] = true ;
return ( true );
= b;
___MACRO_CLIX (30) ;
return ( secure_mintimer_now_usec64 () );
// Sync I/O
___MACRO_CLIX (30) ;
while ( UART_STAT & UART_TX_FULL ) {}
UART_TXD = b;
return ( true );
// Async I/O
___MACRO_CLIX (50) ;
int caller = ( int ) sancus_get_caller_id () ;
if (! caller || caller >= IO_BUFS ) { caller = 0; }
if ( io_ready [ caller ]) {
29
30 // Output
31 bool SM_ENTRY ( ioenclave ) io_uart_write_byte ( unsigned char b)
32 {
33 # ifdef _HAVE_IO_THREAD
34
35
36
37
38
39
40
41
42
43
}
44
45 # else
46
47
48
49
50
51 # endif
52 }
53
54 // Read sensor
55 uint64_t SM_ENTRY ( ioenclave ) io_get_reading ( void )
56 {
57
58
59 }
60
61 # ifdef _HAVE_IO_THREAD
62 static char sm3_unprotected_stack [ THREAD_EXTRA_STACKSIZE_PRINTF ];
63 // Async I/O thread
64 void SM_ENTRY ( ioenclave ) io_thread ( void )
65 {
66
67
68
69
70
71
72
73
74
75
76 # ifdef _HAVE_APP_SLEEP
77
78 # endif
}
79
return ;
80
81 }
82 # endif
83
84 /* --- APP A -------------------------------------------------- */
85 # ifdef _HAVE_APPA
86 static char sm1_unprotected_stack [ THREAD_EXTRA_STACKSIZE_PRINTF ];
87 DECLARE_SM ( appa ,
88
89 SM_DATA ( appa ) uint64_t reading_a = 0;
90
91 void SM_ENTRY ( appa ) a_entry ( void )
92 {
93
94
95
96
97
98
99
100 # ifdef _HAVE_APP_SLEEP
101
102 # endif
}
103
104 }
105 # endif
106
___MACRO_CLIX (30) ;
while ( UART_STAT & UART_TX_FULL ) {} // !!
UART_TXD = io_bufs [i ];
io_ready [i] = false ;
reading_a = io_get_reading () ;
printf1 ("A: t is % lu \n" , reading_a );
if ( reading_a >= 50000) { io_uart_write_byte ( 'A '); }
// this could implement * any * policy .
for ( int i = 0; i = 50000) { io_uart_write_byte ( 'B '); }
107
108 /* --- APP B -------------------------------------------------- */
109 # ifdef _HAVE_APPB
110 static char sm2_unprotected_stack [ THREAD_EXTRA_STACKSIZE_PRINTF ];
111 DECLARE_SM ( appb ,
112
113 SM_DATA ( appb ) uint64_t reading_b = 0;
114
115 void SM_ENTRY ( appb ) b_entry ( void )
116 {
117
118
119
120
121
122
123
124 # ifdef _HAVE_APP_SLEEP
125
126 # endif
}
127
128 }
129 # endif
130
131 /* --- Unprotected Job Creation ------------------------------- */
132 int main ( void )
133 {
134
135
136
137
138 # ifdef _HAVE_APPA
139
140 # endif
141 # ifdef _HAVE_APPB
142
143 # endif
144
145 # ifdef _HAVE_APPA
146
147
LOG_INFO (" ######## Riot on Sancus \n");
LOG_INFO (" Case study with same prio levels \n");
sm1_unprotected_stack ,
// Unprotected stack for
while ( sancus_enable (& ioenclave ) == 0) ;
while ( sancus_enable (& appa ) == 0) ;
while ( sancus_enable (& appb ) == 0) ;
thread_create_protected (
OCALLS
148
THREAD_EXTRA_STACKSIZE_PRINTF ,
// size of the
unprotected stack
149
150
151
152
153
1,
THREAD_CREATE_WOUT_YIELD ,
SM_GET_ENTRY ( appa ) ,
SM_GET_ENTRY_IDX ( appa , a_entry ) , // SM IDX address
"A");
logging
// Priority to give
// Thread create flag
// SM Entry address
// Name for console
thread_create_protected (
sm2_unprotected_stack ,
THREAD_EXTRA_STACKSIZE_PRINTF ,
1,
THREAD_CREATE_WOUT_YIELD ,
SM_GET_ENTRY ( appb ) ,
SM_GET_ENTRY_IDX ( appb , b_entry ) ,
"B");
thread_create_protected (
sm3_unprotected_stack ,
THREAD_EXTRA_STACKSIZE_PRINTF ,
1,
THREAD_CREATE_WOUT_YIELD ,
SM_GET_ENTRY ( ioenclave ) ,
SM_GET_ENTRY_IDX ( ioenclave , io_thread ) ,
" IO ");
154 # endif
155 # ifdef _HAVE_APPB
156
157
158
159
160
161
162
163
164 # endif
165 # ifdef _HAVE_IO_THREAD
166
167
168
169
170
171
172
173
174 # endif
175
176
177
178
179
180
181
182
183
184
185 }
UNREACHABLE () ;
return 0;
LOG_INFO (" Thread initialization done \n");
while ( true ){
secure_mintimer_usleep (300000) ;
}
LOG_INFO (" Exiting main thread by shutting down CPU \n");
sched_shut_down () ;
Listing 3: Source code of our case study implementation
in C. Note that two while-loops in l.48 and l.71 do have
deterministic execution time unless there is a hardware
fault.
Session 5A: Control System Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1372