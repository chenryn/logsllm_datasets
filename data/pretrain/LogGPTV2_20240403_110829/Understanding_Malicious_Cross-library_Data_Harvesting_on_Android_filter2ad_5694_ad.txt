PolicyLint (original)
PolicyLint (retrained)
Precision
87.2%
27.5%
71.4%
95.2%
82.2%
86.5%
Recall
89.3%
19.2%
25.3%
90.8%
71.3%
82.7%
located SDK (within the same app), and then checks the com-
pliance of such activities with the SDK’s data sharing policies
recovered by DPA (Section 3.2). To this end, XLA runs a
program analysis tool that integrates existing techniques.
Locating cross-library API calls. XLA looks for cross-
library calls by walking through the call graph generated
by FlowDroid [47]. Speciﬁcally, each node in the graph rep-
resents a function and carries the information about the func-
tion’s class and package (according to Java’s reverse domain
name notational convention [33]); each edge (with direction)
describes a call from the caller node to the callee node. On
the graph, XLA identiﬁes cross-library calls by comparing the
package names of the caller and callee class: if their top and
second level domains (1) do not match with each other, and
(2) do not match the host app’s package name, the call is con-
sidered cross-library – an approach also used by MAPS [87].
Also, a cross-library call can leverage Java’s reﬂection to
implicitly trigger a function (see the example in Figure 4a).
Hence, XLA inspects all reﬂection calls on the call graph, and
checks whether the caller and callee classes belong to dif-
ferent libraries. To this end, XLA ﬁrst locates reﬂection calls
from a set of call patterns (see Table 6). As shown by a recent
study [62], these patterns cover the most common reﬂection
use cases in Android apps. Further, our approach recovers the
callee’s class name and method name from the arguments
passed to the reﬂection functions. For example, the argu-
ment of Class.forName(target_class_name) indicates
the callee class name, e.g., com.facebook.AccessToken in
Figure 4a. A problem here is, the argument could be a vari-
able. To ﬁnd its value, XLA utilizes DroidRA [62], an inter-
procedural, context-sensitive and ﬂow-sensitive analyzer ded-
icated to resolve reﬂection calls, to track the string content
propagated to the variable.
Identifying cross-library leaks. With the discovered cross-
library calls, XLA then identiﬁes the restricted data items
returned to the caller library, and performs taint tracking to
detect potential data exﬁltration (to the Internet) by the caller
library. In particular, XLA leverages Meta-DB to recognize
restricted data items being returned , as meta-DB recorded
which are the sensitive SDK APIs and the restricted data they
return (see Section 3.4).
Further, we need to track down the data ﬂow of the re-
stricted data. Instead of directly using the techniques of Flow-
Droid (e.g., with deep object sensitivity), which is considered
heavy-weight for an analysis of 1.3M apps [77, 87], we need
a relatively light-weight tool. Hence, we opt for existing taint
track techniques that are capable of inter-procedural analy-
sis, ﬁeld-sensitive but not object-sensitive. We take the return
value of the cross-library calls as the taint source, and network-
ing APIs as the sink. For example, the return value of the re-
ﬂection call on com.facebook.AccessToken.getToken()
is a taint source including Facebook user’s session token (Fig-
ure 4a); once the data reaches a sink in the caller library, e.g.,
OutputStream.write(String.getBytes()) API to send the data
to the Internet, XLA reports a potential data exﬁltration.
Checking policy non-compliance. Given a potential exﬁl-
tration of the restricted data from a victim SDK, we check
whether it violates the ToS policy of the target SDK (obtained
by DPA in Section 3.2). Depending on the conditions with
which the ToSes restrict the access to individual data items,
our approach for a compliance check is as follows.
(cid:15) No third-party access; no access by any party. If the ToS
(e.g., those of Facebook, Twitter and Pinterest) prohibits an
access to the data by a third-party (e.g., a third-party library
or its vendor) or by any party (e.g., Facebook user ID and
password are not even allowed to be exﬁltrated/stored by the
host app vendor), we consider the exﬁltration of the data a
violation of the ToS – an XLDH activity is identiﬁed.
(cid:15) Requiring user consents; complying with regulations. Some
ToSes ask that the access to certain data items should require
a user consent or comply with privacy regulations (i.e., GDPR,
CCPA, COPPA). In XLDH, data sharing and collection
occur between caller library and victim SDK without being
processed by the host app. Hence, we consider the caller
library to be a data controller [19], which has obligations
to comply with regulations and disclose the data practice
in its privacy policy [19]. In our study, we check the privacy
policy of the caller library to determine whether it discloses
the data collection and sharing behaviors in its privacy
policy. To automatically analyze the privacy policy, we use
PolicyLint [45] to extract privacy policy tuples (actor, action,
data object, entity) associated with that restricted data. Here
the tuple (actor, action, data object, entity) illustrates who
[actor] collects/shares [action] what [data object] with whom
[entity], e.g., “We [actor] share [action] personal information
[data object] with advertisers [entity]". In our study, we care
about the tuples with caller library as actor, share/collect
as action and the restricted data as entity. Note that for
non-English privacy policies which PolicyLint [45] can not
handle, we translate them into English for further processing.
Discussion. Recent studies such as [80, 87] on privacy com-
pliance considered the data as leaked out once an API return-
ing the data is invoked by an unauthorized party. We found this
is imprecise in detecting XLDH, due to the pervasiveness of
service syndication (e.g., Twitter4j, Firebase Authentication)
in which a benign library wraps other SDKs (Facebook login,
Twitter login) to support their easy integration into apps. Such
USENIX Association
30th USENIX Security Symposium    4141
Table 5: Summary of 40 vendor’s data sharing policies
Condition
No access by any party
User consent
No third-party access
Comply with regulations
Other
Percentage
396 (38.7%)
249 (24.34%)
206 (20.13%)
123 (12.02%)
47 (4.59%)
Example
Don’t proxy, request or collect Facebook usernames or passwords.
Obtain consent from people before using user data in any ad.
Don’t use the Ads API if you’re an ad network or data broker.
Any End User Customer Data collected through your use of the Service is subject to the GDPR
Only certain application types may access Restricted data for each product.
Table 6: Most common patterns of reﬂection call sequences
Sequence pattern
Class:forName() ! getMethod() ! invoke()
getDeclaredMethod() ! setAccessible ! invoke()
syndication libraries also acquire restricted data from these
third-party SDKs but rarely send them out to their servers.
Therefore, a policy violation can only be conﬁrmed once the
collected data are delivered to the unauthorized recipient.
3.4 Meta-DB Construction
Our Meta-DB records the API speciﬁcations and metadata
of top 40 third-party libraries, which cover 91% of Google
Play apps (see below). For each API, Meta-DB records the
data it returns (e.g., session token, page likes, user ID, pro-
ﬁles, groups followed) and whether or not the return data is
restricted by the SDK’s ToS.
Identifying popular third-party SDKs. To ﬁnd the most
popular SDKs which are appealing XLDH-attack targets, we
ranked the third-party SDKs based on the number of apps
using them. Speciﬁcally, we randomly sampled 200,000 apps
in Dg and identiﬁed the third-party SDKs using by those apps.
Just like MAPS [87], we considered a SDK as third-party if
the top and second level domains in its package name do not
match the app’s package name. After ranking those SDKs, we
selected the top 200 excluding those with obfuscated pack-
age names, and further manually reviewed and removed util-
ity SDKs which are not associated with restricted data, e.g.,
Google gson SDK [21]. The remaining 40 SDKs were then
used in our research to construct Meta-DB (Figure 3).
Note that in our study, the 40 SDKs (from top 200) recorded
in Meta-DB are integrated in 91% of apps. This indicates a
high chance for them to co-locate with a malicious library in
an app. In contrast, the remaining 6,273 SDKs we found were
less popular: the 201st popular SDK was integrated in just
0.8% of Google Play apps.
Identifying privacy-sensitive APIs. We gathered 26,707
API speciﬁcations provided by the aforementioned 40 SDK
vendors. Such documentations, especially those provided
by popular vendors, tend to be highly structured, with well
speciﬁed API names, argument lists, and return data. This
allowed us to build a parser to extract the API names and
the return values. Particularly, for each API, we use regex (e.g.,
"returns(nW*nw*)*jretrieves(nW*nw*)*jget(nW*nw*)*")
to match the return values. Note that API speciﬁcations are
often well-structured and the regex based method is efﬁcient
to identify the return values. In particular, we evaluate the
regex-based method on 200 labelled data and achieve a
precision of 100% and a recall of 98.74%. Altogether, we
extracted 10,336 APIs and their associated return values from
26,707 API speciﬁcations.
Our study marked an API as privacy-sensitive if its
return values were protected by data sharing policies. This
is done by checking each API’s return values against the
restricted data reported by DPA. However, this can not be
achieved by simply using a string matching method, because
the API speciﬁcation and ToS usually describe protected
information differently. For example, ToS tends to describe
a data object in a more generic way (e.g., user proﬁle), while
the API documentation usually use more speciﬁc terms
(e.g., username). Hence, we align the data objects in API
speciﬁcation with that in the ToS based upon their semantics
(represented by the vectors computed using an embedding
technique). Speciﬁcally, we train a domain-speciﬁc word
embedding model to get the data object vectors, and then
measure the similarity by calculating the cosine distance
between the vectors. In our implementation, we gather 1.5G
domain-speciﬁc corpora (e.g., privacy policies, ToSes, API
documentations) and 2.5G open-domain corpora (e.g., Google
News, Wikipedia) to train a skip-gram based word2vec model.
Here, we leverage data augmentation technique [84], which
generate a new sentence by randomly replacing synonym,
inserting word, swapping positions of words and deleting
words, to enlarge our domain-speciﬁc corpora.
Evaluation. To evaluate the model, we randomly sampled
300 APIs from 6,394 APIs associated with 10 SDKs’ API
speciﬁcations. We manually checked the API speciﬁcation
and labeled 153 privacy-sensitive APIs and 147 non-privacy-
sensitive APIs. By setting a similarity threshold of 0.7, our
approach achieved 87% precision and 93% recall on the an-
notated dataset. In total, our model discovered 1,094 sensitive
APIs from 26,707 APIs of 40 SDKs meta-DB. We manually
checked all of them and got a precision of 85.6%. Note that we
only used the validated sensitive APIs in the XLDH detection.
4142    30th USENIX Security Symposium
USENIX Association
4 Evaluation and Challenges in Detection
This section reports our evaluation study on XFinder to under-
stand its effectiveness and performance, and the challenges in
identifying XLDH from a large number of real-world apps.
4.1 Effectiveness
Evaluation on ground-truth set. We evaluated XFinder over
the ground-truth dataset including a “bad set” and a “good
set”, with 40 apps each. The apps in the bad set are integrated
with 4 XLDH libraries (com:yandex:metrica, com:inmobi,
com:appsgeyser, cn:sharesdk), which were found manually
early in our research (before we built XFinder). The good set
includes the apps randomly sampled from the top paid app
list on Google Play [22]. They are considered to be mostly
clean and were further conﬁrmed manually in our research to
be free of XLDH libraries: we inspected cross-library calls
in these apps against the top 40 SDKs (recorded in Meta-DB)
and concluded that their corresponding data ﬂows do not vio-
late the callees’ ToSes. Running on these ground-truth sets,
XFinder achieved a precision of 100% and a recall of 100%.
Evaluation on unknown set. Then, we evaluated XFinder
on a large “unknown” dataset – Dg excluding 13018 apps
integrating known XLDH libraries, which contains 1,328,130
free Android app in total with 40 SDK ToSes. XFinder re-
ported 2,968 apps associated with 37 distinct XLDH libraries
(distinguished based on their package names). To measure the
effectiveness of XFinder, we randomly selected three apps
for each identiﬁed XLDH library (105 in total) and manually
validated the detection results: 32 (out of 37) identiﬁed XLDH
libraries were true positives (a precision of 86%), affecting 93
out of the 105 apps. We performed manual end-to-end tests on
seven XLDH libraries (including OneAudience, Mobiburn,
and Devtodev) in real-world apps, and conﬁrmed that they
indeed exﬁltrated Facebook user data to their servers (using
Xposed [40] for app instrumentation and Packet Capture [1]
for inspecting networking trafﬁc).
Looking into the ﬁve falsely reported libraries, we
found that three of them (com.parse, com.batch and
com.gigabud) were caused by the taint analysis of XLA. As
mentioned in Section 3.3, for better scalability, our taint track-
ing is object-insensitive. Speciﬁcally, after our approach taints
a ﬁeld f (holding a Facebook token) in an object obj of class
C, which causes the whole class to be tainted; as a result,
when the taint of the ﬁeld f 0 (not storing a sensitive data)
in another object obj2 of the same class is propagated to a
sink, XLA could not distinguish the two objects and simply
considers the token-related information to be exposed to the
sink, thereby leading to the false alarms.
Another two false positives (com.xcosoftware and
fr.pcsoft) were introduced because our current program
analysis could not fully resolve the server endpoints of data
exﬁltration. Although XFinder found that the two libraries
expose a Facebook access token to the Internet (so reporting
them as XLDH), the libraries actually send the token to the
Facebook server (to retrieve additional user data, e.g., name,
ID, page likes), not an unauthorized recipient. Fully auto-
mated resolution of such an endpoint is challenging, since
the Facebook endpoint used in the networking API is heav-
ily obfuscated (using a complicated control ﬂow to trans-
form the endpoint string, see the code snippet in our released
dataset [39]). We utilized one of the state-of-the-art tools [89]
capable of statically resolving string values in Android apps
(using a value set analysis approach, with backward slicing
and string related operation analysis), which, however, still