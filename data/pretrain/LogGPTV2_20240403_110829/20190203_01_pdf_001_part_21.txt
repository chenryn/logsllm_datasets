Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 234
EDB Postgres Replication Server User’s Guide
5.7 Performing Failover
Failover is the replacement of the publication database by the subscription database
should a failure occur on the publication database or its host. Failover is considered an
irreversible action so the subscription database permanently takes over the role of the
publication database.
Generally, the same steps must be followed to perform a failover as was discussed for a
controlled switchover in Section 5.6, however, the following points must also be taken
into consideration:
 If the control schema objects on the publication database (that is, schemas
_edb_replicator_pub, _edb_replicator_sub, _edb_scheduler, and
their objects) cannot be salvaged or restored from a backup, then performing a
failover may only be possible with the assistance of EnterpriseDB Technical
Support Services.
 Pending updates not yet applied to the subscription may have been lost. The
chances of this are greater if the interval between synchronizations is long.
If you determine that a failover is possible, follow the steps for a controlled switchover.
5.8 Optimizing Performance
Once you have become familiar with setting up and managing your replication system,
you will often look for ways to optimize the performance of replications. This section
discusses various publication server and subscription server configuration options
available to improve the performance of snapshot and synchronization replications.
The publication server and subscription server configuration options are set in the
publication server and subscription server configuration files, respectively. See Section
10.4.1 for a detailed explanation of how to set the configuration options in these files.
Note: Most of these configuration options are applicable to multi-master replication
systems as well. Options applicable to multi-master replication systems are those that
apply to the publication server and are not specific to a database product other than
Postgres (such as an Oracle feature).
5.8.1 Optimizing Snapshot Replication
This section discusses configuration options for improving snapshot replication
performance.
Note: The options described in this section apply to the publication server only and are
set in the publication server configuration file unless otherwise specified.
copyViaDBLinkOra
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 235
EDB Postgres Replication Server User’s Guide
When the copyViaDBLinkOra option is set to true, the Oracle database link API,
dblink_ora, is used instead of JDBC COPY to populate Advanced Server subscription
tables from an Oracle publication during snapshot replication.
Oracle database link provides an additional performance improvement over JDBC COPY.
Note: The Oracle database link API feature is not available with PostgreSQL, therefore
the copyViaDBLinkOra option is not applicable to PostgreSQL subscription tables.
Note: Prior to using dblink_ora with xDB Replication Server, there are a number of
required configuration steps that must be performed in Advanced Server. For Advanced
Server versions 9.3 or earlier, see the readme text file, README-
dblink_ora_setup.txt located in the POSTGRES_INSTALL_HOME/doc/contrib
directory for directions. For Advanced Server versions 9.4 or later, see Chapter
dblink_ora in the Database Compatibility for Oracle Developer’s Guide for directions.
copyViaDBLinkOra={true | false}
The default value is false.
useFastCopy
Set the useFastCopy option to true to skip Write-Ahead Log (WAL) logging during
COPY operations in order to optimize data transfer speed.
The archive_mode configuration parameter in the postgresql.conf file of the target
Postgres database server must be off (thereby disabling archiving of WAL data) in order
to use the useFastCopy option.
useFastCopy={true | false}
The default value is false.
cpBatchSize
Use the cpBatchSize option to set the batch size (in Megabytes) that is used in the
JDBC COPY operation during a snapshot. Increase the value of this option for large
publication tables.
This option is influential when Postgres is the subscription database since the JDBC
COPY operation is used to load Postgres subscription tables.
This option has no effect when Oracle or SQL Server is the subscription database. To
tune loading of Oracle or SQL Server tables alter the batchSize option.
cpBatchSize=n
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 236
EDB Postgres Replication Server User’s Guide
The default value for n is 8.
batchSize
The batchSize option controls the number of INSERT statements in a JDBC batch.
This option is particularly significant when Oracle or SQL Server is the subscription
database since tables of these database types are loaded using JDBC batches of INSERT
statements.
For a Postgres subscription database, tables are loaded using JDBC COPY, however, if the
COPY operation fails for some reason, then table loading is retried using JDBC batches of
INSERT statements as in the case of Oracle and SQL Server.
batchSize=n
The default value for n is 100.
skipAnalyze
Set the skipAnalyze option to true if you want to skip execution of the ANALYZE
command after loading Postgres subscription tables. The ANALYZE command gathers
statistical information on the table contents. These statistics are used by the query
planner.
skipAnalyze={true | false}
The default value is false.
snapshotParallelLoadCount
Note: To apply this option to a single-master replication system, it must be set for the
subscription server within the subscription server configuration file. To apply this option
to a multi-master replication system, it must be set for the publication server within the
publication server configuration file.
The snapshotParallelLoadCount option controls the number of threads used to
perform snapshot data replication in parallel mode. The default behavior is to use a single
thread. However, if the target system architecture contains multi-CPUs/cores you can
specify a value greater than 1, normally equal to the CPU/core count, to fully utilize the
system resources.
snapshotParallelLoadCount=n
The default value is 1.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 237
EDB Postgres Replication Server User’s Guide
lobBatchSize
If a table contains a column with a data type typically used for large objects such as
BYTEA, BLOB, or CLOB, there is a greater possibility that a heap space error may occur
because of a potentially large amount of data (hundreds of megabytes) brought into
memory. In order to minimize the possibility of this error, a snapshot replication loads
tables containing a large object data type, one row at a time using a single INSERT
statement per batch.
If however, the large object data type column is known to contain relatively small
amounts of data, you can increase the speed of a snapshot replication by increasing the
value of the lobBatchSize option to allow a greater number of rows (specified by n) in
each batch.
lobBatchSize=n
The default value is 1.
5.8.2 Optimizing Synchronization Replication
This section discusses configuration options for improving synchronization replication
performance.
In addition, for configuration options specifically applicable to publication databases
configured with the log-based method of synchronization replication, see Section
10.4.1.15.
Note: The options described in this section apply to the publication server only and are
set in the publication server configuration file.
5.8.2.1 Using Prepared SQL Statements
When synchronization replication occurs, the changes recorded in the shadow tables are
applied to the subscription tables in JDBC batch updates. Within each batch, changes
may be applied using either an individual SQL statement for each change; or a set of
changes may be applied using a single, prepared SQL statement. A prepared SQL
statement is parsed and compiled only once, but it can be executed multiple times using
different values for certain components of the SQL statement in each execution. A SQL
statement that is not prepared is parsed, compiled, and executed only once.
Prepared statements are useful only if the same type of SQL statement (INSERT, UPDATE
or DELETE) is executed repeatedly and consecutively with the same target table, but with
different values. If there is a sequence of consecutive changes that occur to the same table
using the same operation such as inserting a set of rows into the same table populating the
same columns, the publication server may apply these changes using a prepared
statement. Otherwise, each change is applied with its own individual SQL statement.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 238
EDB Postgres Replication Server User’s Guide
There are a number of server configuration options that control the characteristics of the
JDBC batch along with if, when, and how often prepared statements are used. These are
discussed in the following sections.
defaultBatchUpdateMode
The defaultBatchUpdateMode option controls whether the default mode is to use
individual SQL statements in the JDBC batch update (this mode of operation is referred
to as BUS) or to use prepared SQL statements in the JDBC batch update (this mode of
operation is referred to as BUP).
defaultBatchUpdateMode={BUS | BUP}
The default value is BUS.
switchBatchUpdateMode
The switchBatchUpdateMode option controls whether or not the publication server
dynamically switches between BUS mode and BUP mode during the replication process
depending upon the type and sequence of updates it encounters in the shadow tables for
the trigger-based method or the changeset stream for the log-based method.
switchBatchUpdateMode={true | false}
The default value is true.
This means using the default settings of defaultBatchUpdateMode=BUS and
switchBatchUpdateMode=true, the publication server starts out by applying updates
with individual SQL statements. When it encounters a stream of consecutive changes that
can all be processed in a single prepared statement, it will switch to using prepared SQL
statements.
Note: If you want a certain batch update mode used throughout all synchronization
replications applied by a given publication server without switching update modes, set
the defaultBatchUpdateMode option to the desired mode in combination with
switchBatchUpdateMode=false. For example, if you only want prepared statements
used, set the following options:
defaultBatchUpdateMode=BUP
switchBatchUpdateMode=false
Note: When Oracle is the subscription database, synchronization replication always
occurs in BUP mode as if the preceding two options were always set. The reason for this
is so large columns of TEXT data type from Postgres publications can successfully
replicate to Oracle CLOB columns. In BUS mode an individual Oracle SQL statement has
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 239
EDB Postgres Replication Server User’s Guide
a string literal maximum length of 4000 characters. This limitation does not occur for
prepared SQL statements that are used in BUP mode.
busBatchThresholdCount
The busBatchThresholdCount option sets the number of consecutive updates of the
same type that must be encountered in the shadow tables for the trigger-based method or
the changeset stream for the log-based method before the publication server switches
from BUS mode to BUP mode if dynamic switching is permitted (that is
switchBatchUpdateMode=true).
busBatchThresholdCount=n
The default value for n is 5.
The number of consecutive changes using the same table and SQL statement type must
exceed the specified value n before a prepared statement is used.
Setting this threshold to a low value will encourage higher use of prepared statements
while setting it to a high value will limit the use of prepared statements.
If changes to the publication were made using many SQL statements where each
statement affected more than one row, then it may be beneficial to lower
busBatchThresholdCount to encourage the use of prepared statements on the
multiple shadow table rows resulting from each individual change on the publication.
bupBatchThresholdCount and bupBatchThresholdRepeatLimit
If BUP mode is employed, but the number of updates using the same prepared statement
is low causing frequent switches to a new prepared statement, it may be more beneficial
to use individual SQL statements (BUS mode).
For example, the following sequence of updates would be better processed in BUS mode:
INSERT INTO emp
INSERT INTO dept
INSERT INTO emp
INSERT INTO dept
DELETE FROM emp
UPDATE emp
UPDATE dept
INSERT INTO emp
INSERT INTO dept
DELETE FROM dept
INSERT INTO emp
DELETE FROM emp
INSERT INTO dept
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 240
EDB Postgres Replication Server User’s Guide
However, in the following sequence, it is better to use BUP mode. Updates 1 thru 3 are
batched in one prepared statement, 4 thru 7 in another prepared statement, 8 in its own
prepared statement, and then 9 thru 15 in one prepared statement.
1. INSERT INTO emp
2. INSERT INTO emp
3. INSERT INTO emp
4. UPDATE dept
5. UPDATE dept
6. UPDATE dept
7. UPDATE dept
8. INSERT INTO emp
9. INSERT INTO dept
10. INSERT INTO dept
11. INSERT INTO dept
12. INSERT INTO dept
13. INSERT INTO dept
14. INSERT INTO dept
15. INSERT INTO dept
The bupBatchThresholdCount option is used in combination with the
bupBatchThresholdRepeatLimit option to control the frequency of mode switches
based on the volatility of expected update types to the publication.
bupBatchThresholdCount=m
The default value for m is 5.
bupBatchThresholdRepeatLimit=n
The default value for n is 10.
Each time the same prepared SQL statement is consecutively executed, an internal
“batch” counter is incremented. If this batch count falls below
bupBatchThresholdCount for the number of executions of a given prepared
statement, then a second internal “repeat” counter is incremented by one. If the repeat
counter eventually reaches bupBatchThresholdRepeatLimit, the update mode is
switched from BUP to BUS.
Thus, if there are frequent, consecutive changes of prepared SQL statements (as
measured against bupBatchThresholdRepeatLimit), each of which is executed a
small number of times (as measured against bupBatchThresholdCount), then the
mode of execution changes back to individual SQL statements instead of prepared
statements.
Note: The publication server changes back to prepared statements when the threshold set
by busBatchThresholdCount is met.
The following example illustrates the processing of updates when
bupBatchThresholdCount is set to 3 and bupBatchThresholdRepeatLimit is set
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 241
EDB Postgres Replication Server User’s Guide
to 4. A change to the “query domain” referred to in this example means a different
statement type (INSERT, UPDATE, or DELETE) or a different target table are encountered
in the next update, thus requiring the use of a different prepared SQL statement.
1. INSERT INTO emp
2. INSERT INTO emp
3. INSERT INTO dept
At this point the query domain is changed after the first two updates (change from table
emp to dept) and the number of executions of the prior prepared statement (2) is less
than bupBatchThresholdCount, so the repeat counter is set to 1.
4. INSERT INTO dept
5. INSERT INTO dept
6. INSERT INTO dept
7. INSERT INTO emp
The query domain is changed again (change from table dept to emp), but this time the
number of executions (4) for the same query domain (updates 3 thru 6) exceeds
bupBatchThresholdCount so the repeat counter is reset to 0.
8. INSERT INTO emp
9. UPDATE emp
The query domain is changed again (INSERT statement to UPDATE statement) and the
number of executions (2) is less than bupBatchThresholdCount, so the repeat counter
is incremented to 1.
10. UPDATE emp
11. INSERT INTO dept
12. DELETE FROM dept
13. INSERT INTO emp
The query domain is changed between updates 10 and 11, between updates 11 and 12,
and between updates 12 and 13. At this point, the repeat counter has been incremented 3
more times to a value of 4. This now equals bupBatchThresholdRepeatLimit, so
processing is changed from BUP mode to BUS mode.
5.8.2.2 Parallel Synchronization
Parallel synchronization takes advantage of multi-CPUs or cores in the system
architecture by using multiple threads to apply transaction sets in parallel.
Parallel synchronization is applied in two ways:
 Multiple threads are used to load data for multiple tables in parallel from the
source database. Each thread opens a separate connection therefore you will
observe multiple connections with the source database. The pooling framework is
used to cache the connections. After the threads are finished with the data load,
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 242
EDB Postgres Replication Server User’s Guide
the idle connections are returned to the pool and remain there for a period of 3
minutes before being removed from the pool (as long as these are not reused).
 Changes are applied to multiple target databases in parallel. A transaction set
from the source database is loaded only once. The target databases are updated in
parallel from this loaded transaction set. When this transaction set has been
applied to all targets (either successfully, or with failures on some targets), the
next transaction set is loaded and applied in parallel. This aspect of parallel
synchronization is particularly relevant to multi-master replication systems.
The following configuration options affect the usage of parallel synchronization.
syncLoadThreadLimit
The syncLoadThreadLimit option controls the maximum number of threads used to
load data from source publication tables during parallel synchronization. The default
count is 4. However, depending on the target system architecture (specifically, multi-
CPUs/cores) you can choose to specify a custom count, normally equal to the CPU/core
count, to fully utilize the system resources.
syncLoadThreadLimit=n
The default value is 4.
dataSyncThreadCount
The dataSyncThreadCount option controls the maximum number of threads used to
apply incremental changes during synchronization replication to the target slave
databases (for single-master replication systems) or to the target master nodes (for multi-
master replication systems) in parallel mode. The default behavior (when
dataSyncThreadCount is set to 0) is to use as many threads as there are target nodes.
However, depending on the target system architecture (specifically, multi-CPUs/cores)