由编译器所生成的类似汇编语言的代码输出：
412
然后在REPL中用该函数的名字来调用DISASSEMBLE。在Allegro中，它可以显示类似下面的
现在再次反汇编add并查看这些声明是否产生了什么效果。
很明显，其中做了很多事。如果你熟悉x86汇编语言的话，就很可能看出具体的内容。现在
;; disassembly of #
i; code start: #x737496f4:
CL-USER> (disassemble 'add)
：
CL-USER> (disassemble 'add)
(defun add (x y)
：
; disassembly of #
:formals: X Y
(the fixnum (+ x y)))
5
6
5
formals:X Y
code start: #x7374dc34:
.6
0：
:90
0：
第32章
8
03c2
&
8
688
8么08
088
8
9
8b
55
8
5
5
9063
ec
2
 fc movl
03
jmp
movl
cmp1
subl
movl
结论：
jo
addl
movl
jnz
testb
orl
movl
int
.N
0
int
clc
ret
leave
clc
 pushl
nop
 cmpb
下一步是什么
esi,[ebp-4]
ebx, eax
ebx, eax
ecx,$2
esp,$36
ebp,esp
ebp
*[edi+39]
ebx,[edi-113] 
eax,ebx
45
ebx, edx
bl,$3
$100; SYS::TRAP-SIGNAL-HIT
$97
14
esi
www.TopSage.com
; SYS::TRAP-ARGERR
：EXCL::+_2OP
;SYS::C_INTERRUPT-PENDING
---
## Page 430
载。例如，下面给出了html.asd的内容，它是来自第31章和第32章的FOO库的ASD文件：
操作，包括加载或编译它们等。一个系统也可以定义成依赖于其他的系统，后者将在必要时被加
Facility。°ASDF背后的基本思想是，你在ASD文件中定义系统，然后ASDF提供了一些系统上的
和编译文件，
和ant相似，
统定义机制”或“系统定义工具”来处理它们，后者类似于make或ant这样的构建工具。跟make
文件甚至成为READ之前被加载。Lisp程序员将其称为“系统定义”问题，并通常使用所谓的“系
何使用了这些宏的文件之前加载，而一个含有DEFPACKAGE形式的文件也必须在用到该包的任何
载到他们的Lisp映像里，或者有可能先用cOMPILE-FILE将其编译然后再加载。
码。
同的选择做一个概括。
需要交付的软件类型、目标用户以及所使用的CommonLisp实现。在本节里，我将对其中一些不
件。我忽略该主题的主要原因是有许多种方式可以做到这点，并且具体哪一种是最好的取决于你
32.4
近年来，最为广泛使用的系统定义工具是ASDF，它的全称是Another SystemDefinition
，所有文件都需要以正确的顺序来编译和加载。例如，一个含有宏定义的文件必须在你编译任
②ASDF最初是由SBCL的开发者之一DanielBarlow所编写的，并且长久以来就是SBCL的一部分，也以独立库的形
①cOMPILE-FILE所产生的FASL文件是与实现相关的，并且不一定能在同一个CommonLisp实现的不同版本间兼
。“你可以将一个简单的库以单个源代码文件的形式来发布，然后程序员们可以用LOAD将其加
那些跨越多个源文件的更加复杂的库和应用提出了更大的挑战——为了加载和编译这些代
如果你在编写打算共享给其他Lisp程序员的代码，那么发行它们的最直接方式就是提供源代
另一个对于实践有重要意义但我却没有在本书谈论过的主题，是如何交付用Lisp编写的软
(defsystem html
(defpackage :com.gigamonkeys.html-system (:use :asdf :cl))
嗯，看来确实有效果。
(in-package
式来分发。它最近已经被采纳并包含在诸如OpenMCL和Allegro等其他实现中。
供新的代码定义来升级已有的数据。
序提供补丁。追加一个补丁的方法就是加载这个FASL文件，而由于FASL可以包含任意代码，它可被用来通过提
容。这样，使用它们就不是分发Lisp代码的一种良好方式了。它们可用于为特定实现的已知版本里运行的应用程
:author "Peter Seibel"
:name "html"
No value
:version "0.1"
交付应用程序
390
，其间试图只做必要的工作，例如只重新编译那些发生了改变的文件。
系统定义工具允许你指定不同文件之间的依赖关系，并帮助你以正确的顺序来加载
:com.gigamonkeys.html-system)
"PeterSeibel"
nop
www.TopSage.com
32.4
---
## Page 431
载FASL可能需要花很多时间，尤其是当你需要做一些计算来设置环境的状态时，因此多数
负责启动运行时环境、加载FASL文件并以某种方式调用适当的启动函数。不过，由于事实上加
随后你可以将Lisp应用程序分发成一个Lisp运行时环境外加一组FASL文件，以及一个可执行程序
映像所达到的一个特定状态，通过加载含有创建适当定义和数据的代码的.lisp或.fasl文件来改变。
的，在Lisp中开发软件是一个不断修改你的Lisp映像中的定义和数据集的增量过程。“程序”只是
时运行的那个程序，其中的某些功能可能是你的应用程序所不需要的。
Windows上是DLL），Lisp程序与此不同，它必须包含一个Lisp运行时环境，也就是当你启动Lisp
人该程序的名字即可。
应用程序一样运行你的程序一
的知识。你不能期待他们能独立地下载并安装一个Lisp实现。并且你还应该让他们能像运行其他
的应用程序，那么你必定要提供一些东西，让用户可以下载、安装和运行而无需知道任何有关Lisp
Lisp的最终用户打包一个应用程序却不能带来多大的帮助。如果你正在分发一个纯面向最终用户
工具，但整个流行趋势是向ASDF发展的。?
使用其他系统定义工具，例如相对比较古老的MK:DEFSYSTEM，或者甚至是库作者自己设计的
统依赖关系。
源代码，即来自每个实用章节的代码都被定义成一个系统，并带有ASD文件中表达的适当的跨系
先保证:macro-utilities系统已被编译和加载。对于其他的ASD文件示例，你可以查看本书的
来以正确的顺序编译和加载文件packages.lisp、html.lisp以及html-macros.lisp，并首
链接，那么你就可以通过键入
不过，C程序通常依赖于作为操作系统一部分的那些构成C“运行时环境”的特定共享库（在
当然，尽管ASDF让Lisp程序员可以容易地安装Lisp库了，但它对于你想要给不了解或不关心
你将发现大多数免费和开源的Common Lisp库都带有一个ASD文件。它们中的一些还有可能
(asdf:operate 'asdf:load-op :html)
414
②另一个工具ASDF-INSTALL，构建在ASDF和MK:DEFSYSTEM之上，提供了一种从网络上自动下载和安装库的简
①在不支持符号链接的Windows上，其工作方式略有不同，但也是差不多的。
更复杂的问题在于，“程序”这个概念在Lisp中并没有很好的定义。正如你在本书中所看到
如果你在变量asdf:*central-registry*中所列出的目录里添加了一个到该文件的符号
单方式。学习ASDF-INSTALL的最佳途径是阅读Edi Weitz的“A tutorial for ASDF-INSTALL”（http://www.weitz.de/
:depends-on (:macro-utilities))
:components
:long-description
(:file
第32章
ile
结论：下一步是什么
:depends-on ("packages"))
一通过双击Windows或OSX上的一个图标，或者在Unix命令行下输
("packages" "html")))
www.TopSage.com
---
## Page 432
Lisp Works发布在http://www.lispworks.com/documentation/HyperSpec/index.html。 HyperSpec并不是
称为HyperSpec或CLHS），一个ANSI语言标准的HTML版本，它由Kent Pitman制作并通过
勘误以及指向Web上其他Lisp资源的链接。
可以查看本书位于http://www.gigamonkeys.com/book/的Web站点，这里有那些实用章节的源代码
然后再做另一个。就这样不断地进行下去。
开始亲手编写你自己的Lisp代码。选择一个令你感兴趣的项目，然后用Common Lisp来完成它。
32.5
也要求你为此构建大量的特定基础设施才可行。
也可以调试和升级一个运行中的服务器，这在那些不够动态的语言里要么根本是不可能的，要么
并且不需要担心如何打包面向最终用户的应用程序。并且Common Lisp的交互式调试和开发特性
Common Lisp真正擅长的方式。你可以选取一种最适合你的操作系统和CommonLisp实现组合，
建OpenMCL上的应用程序的.app捆绑变得更容易。
分打包成一个可以双击的.app应用程序捆绑完全没有任何困难。MikelEvins的Bosco工具可以让创
应用程序捆绑（bundle)，其本质上就是带有特定结构的一个目录，因此将Lisp应用程序的所有部
shell脚本来开始可能会更容易一些。
在Unix上，通过使用多种免费和开源的实现，你也可以从本质上达到同样的效果，只是使用一个
程序。类似地，LispWorks专业版中的“delivery”机制允许你构建所有程序的单一可执行文件。
共享库形式的Lisp运行时环境、一个映像文件以及一个用给定映像启动Lisp运行时环境的可执行
的企业版提供了一个函数excl:generate-application，它可以创建出一个目录，其中含有
Allegro和LispWorks这样的商业实现，提供了用来构建这样一个可执行程序的工具。例如，Allegro
的映像文件来启动Lisp运行时环境，并调用作为该应用程序入口点的那个函数。
单个映像文件包含你应用程序的所有定义和数据。然后你所需要的就是一个程序，它可以用适当
应用程序打包成一个Lisp运行时环境外加一堆FASL，你可以将其打包成一个Lisp运行时环境外加
默认映像。但在多数实现里，你都有某种方法可以指定一个不同的映像文件。这样，不必将一个
得多。
它做的第一件事就是加载映像文件，这比通过加载FASL文件来重建所有状态花费的时间要少
一个称为“映像文件”（image file）或“核心”（core）的文件里。当一个Lisp运行时环境启动时，
不过，如果你还需要更进一步的指点，本节提供了一些可供参考的地方。对于初学者来说，
当然，近年来的另一种分发应用程序的流行方式是将其作为服务器端应用程序。这是
在Mac OS X上，事情甚至变得更奇妙了。由于Mac OS X上的所有应用程序都打包成了.app
这就是事情开始依赖于具体实现和操作系统的地方了。一些CommonLisp实现，尤其是诸如
正常情况下，这个映像文件是一个只含有语言所定义的标准包和具体实现所提供的附加包的
就这么多了。欢迎来到Lisp的精彩世界。现在你的最佳选择（如果你还没有开始的话）就是
何去何从
www.TopSage.com
32.5何去何从
415
---
## Page 433
程概念的经典计算机科学文献。每个程序员都可以从该书中受益良多，不过要注意的是Scheme
InterpretationofComputerPrograms第二版（MITPress，1996年），这是使用Scheme来教授重要编
是什么感觉，可以去看Harold Abelson、Gerald Jay Sussman和Julie Sussman的Structure and
管该书主要集中在Scheme而非Common Lisp上，但两者应用的是同样的原则。
(Cambridge University Press，1996年）提供了编程语言理论和使用Lisp实现技术的完美融合。尽
处理上尤为优秀。
Advanced Techniques for CommonLisp（Prentice Hall，1994年）。前者提供了对各种人工智能相关
Programming: Case Studies in Common Lisp(Morgan Kaufmann, 1992年)比及Paul Graham的On Lisp:
被许多CommonLisp实现所支持的元对象协议的事实标准。
年)。这本书也称为AMOP，它说明了元对象协议是什么以及你为何需要它，并且还描述了一个
Kiczales、 Jim des Rivieres和Daniel G. Bobrow的The Art of the Metaobject Protocol (MIT Press, 199)
然后如果你真的想要成为一个对象技术专家或者只是想要激发灵感的话，可以阅读Grego1
Programming in Common Lisp: A Programmer's Guide to CLOS (Addison-Wesley, 1989年） 开始。
的参考书，可以选择David Margolies的ANSI Common Lisp Reference Book（Apress，2005年）。?
从日内瓦到赫尔辛基。
的几年里，Lisp用户群正在世界上的许多城市里陆续出现，从纽约到奥克兰，从科隆到慕尼黑,
http://planet.lisp.org/的Planet Lisp站点上。
#lisp频道就是两个最主要的会面场所。还有一些Lisp相关的博客，其中的多数都被聚合到了位于
门语言的权威指导，并且它更适合于日常使用。‘
一个学习向导，但在你未从ANSI购买语言标准的打印副本的情况下，它是你可以获得的关于这
如果你想要接触其他Lisp程序员，那么Usenet的com.lang.lisp新闻组和Freenode IRC网络上的
416
① SLIME带有一个Elisp库，它允许你自动跳转到任何由标准所定义的名字在HyperSpec中的对应项上。你还可以下
那些更喜欢用理论的眼光来看事物的读者，或者读者只是想知道作为MIT的计算机学院新生
如果你是那种对事情的工作原理究根问底的人，那么Christian Queinnec的Lisp in Small Pieces
两本覆盖通用CommonLisp技术的书籍是Peter Norvig的Paradigms of Artijficial Intelligence
想了解CommonLisp对象系统的更多内容，你可以从SonyaE.Keena的Object-Oriented
如果你想要继续啃书本，那么这里有--些推荐书目。如果你想要一本放在桌面上又厚又精美
并且你要保持关注所有这些论坛上关于你所在区域里的本地Lisp用户组的公告-
②
定义的方式。
是它说明了某些特性在完成之前被标准所丢弃从而没能成为标准的前因后果，以及为何某些特性采用了标准中所
的标准在一些方面还有所区别，这使得它不是一个很好的日常参考。不过，它是一份极其有用的历史文献，尤其
会的成员之一，决定发布第二版以填补CLtL1和未来标准之间的鸿沟。该书的第二版，现在称为CLL2，在本质
载一份HyperSpec的完整副本以实现本地的离线浏览。
是标准化委员会在接近完成的一个特定时间里的工作的快照，接近但并不等于最终的标准。因此，CLL2与最终
也称为CLtL1，在很多年里都是该语言的事实标准。在等待官方的ANSI标准完成时，GuySteele-
第32章结论：下一步是什么
www.TopSage.com
一标准化委
一-在过去
---
## Page 434
果你已经学到这里了，那么肯定已经准备好要这样做了。那么祝你玩得开心！
Guy Steele早先所编辑的The Hacker's Dictionary（Harper&Row，1983年）。
看Eric S.Raymond所编译的The New Hacker's Dictionary第三版（MIT Press，1996年），该书基于
Smarter Than the Few and How Collective Wisdom Shapes Business, Economies, Societies, and Nations
CommonLisp的状况系统也有很大参考价值。
员来说也是这样。特别是Meyer关于契约式设计（Design By Contract）的思想对于应该如何使用
视。它含有很多值得思考的东西，即便是对于那些工作在诸如CommonLisp这类动态语言的程序
给出了Eiffel发明人对静态语言思想的杰出解释，Eiffel是Simula和Algol的一个后裔，常常被人忽
程序员的完美教材，其中的许多内容都可以应用在任何面向对象的语言里。
在这之后,Kent Beck的Smalltalk Best Practice Patterns (Prentice Hall, 1997年）是一本面向Smaltalk
Smalltalk-80:The Language（Addison Wesley，1989年）开始，它是对Smalltalk核心的标准介绍。
况下号称自己真正理解了面向对象，因此你可能需要从Adele Goldberg和David Robson的
和CommonLisp之间有许多重要的区别。
但是不要让所有这些建议影响你的编程，真正学好一门语言的唯一方法是去实际使用它。如
最后，为了寻找一些乐趣，并且也是为了了解Lisp和Lisp程序员对黑客文化的影响，可以看
尽管不是关于计算机的，但James Surowiecki的The Wisdom of Crowds:Why the Many Are
另一方面，Bertrand Meyer的Object-Oriented Software Construction (Prentice Hall,1997年）
一旦你习惯了Lisp的思维方式，就可能想了解它的更多内容。没人可以在不懂Smaltalk的情
www.TopSage.com
32.5何去何从
417
---