### Chain and Adversary Goals

When the chain does not exceed the threshold, the adversary's power in such attacks is limited. Typically, their goal is not to directly launch malicious behaviors but rather to create opportunities for subsequent Return-Oriented Programming (ROP) attacks. By doing so, our scheme is more likely to detect these follow-up ROP attacks.

### Gadgets Within Sliding Windows

In most cases, the gadgets within a sliding window are insufficient for an ROP attack. However, over the entire lifecycle of a process, there is always a possibility that an adversary might find a sliding window where an ROP attack is feasible. The current version of ROPecker cannot detect such cases. A possible solution is to dynamically reduce the window size to lower the likelihood of ROP attacks. Specifically, we can monitor all sliding windows that occur during normal execution, analyze each one to evaluate the potential for an ROP attack, and record those with a high probability. Based on this information, ROPecker can temporarily reduce the window size when the execution flow enters one of these recorded windows and restore it once the flow moves out.

### Related Work

#### Randomization

**Address Space Layout Randomization (ASLR)**: ASLR randomizes the base addresses of code segments to prevent ROP attacks by making it difficult for adversaries to locate the necessary gadgets. However, ASLR can be bypassed through brute-force attacks [30] or information leakage [31]. Additionally, some libraries or applications may not be ASLR-compatible, allowing adversaries to find useful gadgets to circumvent the mechanism.

**Binary Stirring**: This technique [8] allows x86 native code to self-randomize its instruction addresses each time it is launched. However, the modified binary file size increases by 73% on average.

**Instruction Location Randomization (ILR)**: ILR [7] randomizes the location of every instruction in a program to thwart attackers' ability to reuse program functionality. The new ILR-generated programs must run on a dedicated Virtual Machine (VM). While the runtime performance overhead is relatively low, the rule files are large, and their in-memory size is even larger. For example, the on-disk size of the rule file for the benchmark tool 481.wrf is about 264MB, while its in-memory size reaches 345MB. In contrast, the entire database in our system is only 210MB.

#### Compiler-Based Approaches

**Control Flow Integrity (CFI)**: CFI [19] is a common technique to defend against code reuse attacks. Traditional CFI operates at the function level, which makes it ineffective against ROP attacks, as ROP disrupts control flow at the instruction level.

**CFLocking**: CFLocking [5] aims to limit or lock the number of abnormal control flow transfers by recompiling a program. This technique cannot handle ROP attacks that use unaligned gadgets.

**Return-less Kernel**: This approach [4] removes the `ret` opcode from the kernel image by placing control data into a dedicated buffer instead of the stack. It only defends against `ret`-based ROP attacks.

**Virtualization-Based Approach**: Shuo et al. [15] propose a virtualization-based method that requires source code and compiler modifications to insert control-data-integrity-checking code into function prologue and epilogue. This approach cannot defend against ROP attacks using `jump`/`call` instructions.

**G-free**: G-free [6] is a compiler-based approach that eliminates all unaligned indirect branch instructions with aligned sleds and protects aligned indirect branch instructions to prevent misuse. It requires source code and may introduce new gadgets that could be used by adversaries.

#### Instrumentation-Based Approaches

**DROP, TRUSS, ROPDefender, TaintCheck**: These approaches [2, 1, 32, 33] use code instrumentation to insert checking code into binary code to detect ROP attacks. They break binary integrity and suffer from high performance overhead. For instance, the preliminary performance measurements for DROP range from 1.9X to 21X, and the performance overhead for TaintCheck is over 20X. Some, like ROPDefender and DROP, focus only on `ret`-based ROP attacks.

**IPR, ROPGuard, KBouncer, CCFIR**: Newer approaches aim to address the high performance overhead. IPR [9] smashes gadgets in place without changing the code size, but many gadgets cannot be removed, and the remaining un-modifiable gadgets may still be sufficient for ROP attacks. ROPGuard [3] and KBouncer [11] add checking points only in selective critical functions, leading to low performance overhead but potentially missing ROP attacks that do not use those paths. CCFIR [10] randomly inserts all legal targets of indirect control-transfer instructions into a dedicated Springboard board, but suffers from compatibility issues on certain platforms.

#### Other Approaches

**CFIMon**: CFIMon [34] detects various control flow integrity violations by collecting and analyzing runtime traces. However, it has high detection latency, which may delay the detection of attacks.

**MoCFI**: MoCFI [35] is a framework to mitigate control flow attacks on smartphones. It performs control flow integrity checking on-the-fly without requiring application source code and shows no notable overhead for popular iOS applications.

**Polychronakis et al.**: Polychronakis et al. [36] propose a method to identify ROP payloads in arbitrary data. The technique speculatively drives the execution of existing code in the address space based on input data and identifies valid ROP code at runtime. Our payload checking algorithm adopts the basic idea of this method.

### Conclusions and Future Work

We have presented ROPecker, a novel and universal ROP attack detection and prevention system. ROPecker innovates two main techniques: the gadget chain detection algorithm, which detects chains in past and future execution flows, and the sliding window mechanism, which triggers the detection algorithm at optimal times for high accuracy and efficiency. ROPecker does not require source code, special compilers, or binary instrumentations. It complements instrumentation- and compiler-based approaches, as well as randomization schemes.

We evaluated ROPecker's security and performance using real-life ROP attacks and benchmarks, showing acceptable performance loss.

**Future Work**: 
- Extend ROPecker to defend against kernel-space ROP attacks. We will move ROPecker into the hypervisor space to protect it from being disabled by adversaries.
- Support ARM platforms, where the past payload detection will be removed due to the lack of LBR registers. The future payload detection will still work, and the disassembler and gadget analysis will be simplified.

### Acknowledgments

The authors thank the anonymous reviewers and shepherd Davide Balzarotti for their insightful comments. We are also grateful to Virgil D. Gligor and Edward J. Schwartz for useful discussions. This research is supported by the Singapore National Research Foundation under its International Research Centre Singapore Funding Initiative, administered by the IDM Programme Office, Media Development Authority (MDA).

### References

[References listed as provided in the original text]

This optimized version aims to make the text more coherent, clear, and professional.