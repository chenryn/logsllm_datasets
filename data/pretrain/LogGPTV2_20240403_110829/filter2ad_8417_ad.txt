                }
              ],
              "data": "0000000000855c340000fb82... "
            },{
              "account": "eosio",
              "name": "setabi",
              "authorization": [{
                  "actor": "alice",
                  "permission": "active"
                }
              ],
              "data": "0000000000855c34570e656f73696f3a3a6162692f312e31000102686900030269640675696e7436340c626c6f636b5f7072656669780675696e74333209626c6f636b5f6e756d0675696e74333201000000000000806b026869000000000000"
            }
          ],
          "transaction_extensions": [],
          "signatures": [
            "SIG_K1_K12rdVM7JiVVZsZ24dxeQF2ehKc7Nymom4zm3QAZijRtCESQneXnEyCXA3wwYpT98JEhr2HcnXcE4bu3crYG1PoNY8fZTz"
          ],
          "context_free_data": []
        }
      },
      "block_time": "2019-12-26T03:25:18.500",
      "block_num": 1379521,
      "last_irreversible_block": 1379663,
      "traces": [{
          ... 省略若干内容
        }
      ]
    }
以上可以看出，合约部署交易有 2 个 Action：setcode 和 setabi。setcode 的 data 字段是编译的 wasm
二进制字节码，setabi 的 data 字段是合约代码所对应的 abi 文件。
细心的读者可能已经发现，EOS 的交易结构没有 from 和 to 字段。这是因为 EOS
和以太坊的账户模型和权限模型都非常不同。因为账户权限模型已经超出了本文的范围，这里不多做讨论。读者能够了解在
EOS平台上，部署合约本质上也是发送一笔交易即可。
### **2.3.3 WASM 虚拟机运行合约**
和以太坊一样，EOS 的智能合约也需要运行在虚拟机上。EOS 采用了 Web Assembly 又名 WASM 虚拟机。WASM是一个已崭露头角的 web
标准，受到 Google, Microsoft, Apple 及其他公司的广泛支持。
EOS在技术白皮书中指明并不提供具体的虚拟机实现，任何满足沙盒机制的虚拟机都可以运行在 EOSIO 中。EOS
官方虚拟机代码实现来自WAVM，Primary repo: 。
WAVM 也是基于栈的虚拟机，主要有以下 2 个特点：
1.栈是后进先出的，大多数 WAVM 指令都假定操作数将从栈顶中取出，并将结果放回栈顶中。
2.程序计数器控制程序执行，控制指令可以修改计数器的内容，如果没有控制指令，则自增。
WASM 虚拟机能够操作的存储空间主要包括三部分：
· 栈
Wasm是基于栈的虚拟机，并且执行的是字节码，这一点和JVM、EVM等虚拟机类似。和其他基于栈的虚拟机一样，Wasm指令集里的很大一部分指令都是直接对栈进行操作，比如
i32.const、 i32.add、 i32.sub、 drop等。
· 内存 Wasm 虚拟机可以操作一个按字节寻址的线性内存空间。内存可以由 Wasm
虚拟机自己分配，也可以从外部引入（import），但是在MVP阶段最多只能有一块内存。不管 Wasm
内存来自于哪儿，都可以按页进行扩展，一页是64KiB。下面是内存操作相关的一些指令：
· memory.grow 使可访问内存增加一页
· memory.size 把当前内存字节数推入栈顶
· load系列指令（比如i32.load）把内存数据载入栈顶
· store 系列指令（比如i32.store）把栈顶数据写回内存
· 全局变量 Wasm模块可以从外部引入全局变量，也可以在内部自己定义全局变量，这些全局变量使用同一个索引空间。有两条指令可以操作全局变量：
· get_global 获取指定索引处的全局变量值，并推入栈顶
· set_global 从栈顶弹出一个值，并用它设置指定索引处的全局变量
来看一个具体的示例。下面的内容是 helloword 对应的 wast 代码的一部分。
    (module
      (type (;0;) (func (result i32)))
      (type (;1;) (func (param i32 i32)))
      (type (;2;) (func (param i32 i32 i32) (result i32)))
      (type (;3;) (func (param i32 i32) (result i32)))
      (type (;4;) (func (param i64)))
      (type (;5;) (func (param i32)))
      (type (;6;) (func (param i32 i64)))
      (type (;7;) (func))
      (type (;8;) (func (param i64 i64 i64)))
      (type (;9;) (func (param i32) (result i32)))
      (type (;10;) (func (param i64 i64)))
      (import "env" "action_data_size" (func (;0;) (type 0)))
      (import "env" "eosio_assert" (func (;1;) (type 1)))
      (import "env" "memset" (func (;2;) (type 2)))
      (import "env" "read_action_data" (func (;3;) (type 3)))
      (import "env" "memcpy" (func (;4;) (type 2)))
      (import "env" "require_auth" (func (;5;) (type 4)))
      (import "env" "prints" (func (;6;) (type 5)))
      (import "env" "printn" (func (;7;) (type 4)))
      (import "env" "eosio_assert_code" (func (;8;) (type 6)))
      (func (;9;) (type 7)
        call 12)
      (func (;10;) (type 8) (param i64 i64 i64)
        call 9
        get_local 0
        get_local 1
        ...
这里我们可以看到 11 个 function signatures 和他们对应的索引，function signature
就像函数原型，定义了预期的函数输入和输出。还有一些 import 的函数，表示从 external c++ 引入的函数。
对于一个函数，编译后 WASM 字节码如下：
    (func (;12;) (type 7)
        (local i32)
        get_global 0
        i32.const 16
        i32.sub
        tee_local 0
        i32.const 0
        i32.store offset=12
        i32.const 0
        get_local 0
        i32.load offset=12
        i32.load
        i32.const 7
        i32.add
        i32.const -8
        i32.and
        tee_local 0
        i32.store offset=8196
        i32.const 0
        get_local 0
        i32.store offset=8192
        i32.const 0
        memory.size
        i32.store offset=8204)
部分指令定义如下：
· i32.load8_s: 加载1字节， 将8位整数零扩展为32位整数
· i32.load8_u: 加载1字节， 将8位整数零扩展为32位整数
· i32.load16_s: 加载2字节， 将16位整数符号扩展为32位整数
· i32.load16_u: 加载2字节， 将16位整数零扩展为32位整数
· i32.load: 加载4字节，转换为32位整数
**[注]**
符号扩展：
二进制中的有符号数，符号位总是位于数的第一位，如果向方位较大的数据类型进行扩展，符号位也应该位于第一位才对，所以当一个负数被扩展时，其扩展的高位全被置位为1；对于整数，因为符号位是0，所以其扩展的位仍然是0
零扩展： 不管要转换成什么整型类型，不要最初值的符号位是什么，扩展的高位都被置位0.
见《深入理解计算机系统》 原书第3版 第2章 信息的表示和处理 2.2.6节 扩展一个数字的位表示。
更多关于 wasm 指令的具体含义，请参考：
· 
· 
## 03 小 结
本文主要讲解了目前主流的智能合约运行平台：以比特币为首的区块链 1.0 平台，以以太坊为首的区块链 2.0 平台，以 EOS 为首的区块链 3.0
平台，以及在这些平台上智能合约是如何开发，编译，运行的。从本文中，我们看到了合约运行平台的演进：从比特币仅提供非图灵完备的平台，演进到以太坊提供图灵完备的平台；从以太坊仅提供低吞吐量的运行平台，演进到
EOS 提供高吞吐量的运行平台。这些演进满足了各式各样的需求，也推进了区块链技术的持续创新。
在智能合约运行平台蓬勃发展的同时，智能合约面临的安全威胁也伴随而来。本文希望读者对智能合约的开发，编译，部署，运行有个大致的了解。接下来，我们后续的文章会更具体的分析智能合约面临的安全威胁。
## **参考文献**
1.  
2.  
3.  
4.  
5.  
6.
**蚂蚁安全天宸实验室** :
隶属于蚂蚁安全实验室，致力于研究并落地下一代核电级安全防御和密码学基础设施，攻克业界系统安全、移动安全、IoT安全、密码学等重点领域的安全防御技术难题。
扫码关注蚂蚁安全实验室微信公众号，干货不断！
* * *