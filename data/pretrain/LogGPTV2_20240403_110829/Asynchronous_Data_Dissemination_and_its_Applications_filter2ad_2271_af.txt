respectively. Node 𝑖 then sends ⟨RECONSTRUCT, 𝑖, ˜𝑠𝑖, ˜𝜋𝑖⟩ to all nodes.
Upon receiving a RECONSTRUCT message, each node validates it
using the dleq.Verify algorithm. Finally, after receiving ℓ valid
RECONSTRUCT messages, each honest node reconstructs 𝑔𝑠
1 using
Lagrange interpolation.
Remark. The above dual-threshold ACSS protocol uses a ran-
dom oracle in two places: the non-interactive variant of Chaum-
Pedersen’s “Σ” protocol for proving equality of discrete logarithm
and Scrape’s PVSS. If one wishes to avoid the random oracle, one
can use the pairing-based equality of discrete logarithm and a recent
PVSS scheme based on Bilinear decisional Diffie-Hellman (DBDH)
from [23].
Dual-threshold ACSS for arbitrary secrets. Although our dual-
threshold ACSS in Algorithm 6 only supports uniform secrets, it can
be extended to arbitrary secrets 𝑧 ∈ Z𝑞 using techniques from [48].
Briefly, to share an arbitrary secret 𝑧 ∈ Z𝑞, the dealer first runs the
sharing phase of Algorithm 6 for a random secret 𝑔𝑠
1 along with a
RBC on 𝑧 ·ℎ−𝑠. Upon reconstructing ℎ𝑠, each honest node can use it
to recover 𝑧. The security of this approach requires the Decisional
Diffie-Hellman (DDH) assumption. We refer readers to [48] for
more details on this approach.
We next analyze our dual-threshold ACSS protocol.
Lemma 5.6 (Termination and Correctness). The dual-threshold
ACSS protocol in Algorithm 6 guarantees termination and correctness
for any ℓ < 𝑛 − 𝑡.
Proof. Note that when the dealer is honest, the predicate 𝑃(·),
i.e., the PVSS.Verify check will return true at every honest node.
Thus, the Termination and Correctness of our dual-threshold ACSS
follow directly from the Termination and Validity guarantees of
our RBC protocol.
least 𝑡 + 1 honest nodes. Hence, except for probability(cid:0)2𝑡+1
𝑡+1(cid:1) 1
When the dealer is malicious, and the sharing phase terminates
at an honest node, a similar argument as Lemma 5.4 implies that
every honest node will eventually terminate the sharing phase. Fur-
thermore, from Lemma 4.2, the PVSS.Verify check succeeds at at
𝑞𝑡+1 , 𝒗
is a commitment to a degree-ℓ polynomial. Furthermore, all these
nodes check that 𝒄 consists of encryptions of valid shares of all
nodes. Also, the Totality of the RBC protocol guarantees that every
node will eventually output 𝒗∥𝒄∥𝝅; hence, each honest will even-
tually receive their encrypted share and send it to all nodes during
the reconstruction phase.
For any given ℓ < 𝑛 − 𝑡, since there are at least ℓ + 1 honest
nodes in the system, during the reconstruction phase, each honest
node will receive at least ℓ + 1 valid decrypted shares, which are
sufficient to reconstruct the committed polynomial (in the expo-
nent) and recover the secret 𝑔𝑠
1. Note that all of these points lie
on a fixed degree-ℓ polynomial, which gets finalized whenever the
sharing phase terminates at one honest node. Moreover, during the
reconstruction phase, every node validates the decrypted shares
against the same polynomial commitment. As a result, any set of
ℓ + 1 valid shares will result in the same output. This implies that
our dual-threshold ACSS in Algorithm 6 achieves both Termination
and Correctness.
□
Lemma 5.7 (Completeness). The dual-threshold ACSS protocol
in Algorithm 6 guarantees Completeness for any ℓ < 𝑛 − 𝑡.
Proof sketch. When the dealer is honest, Completeness fol-
lows directly from the validity guarantee of our RBC protocol and
the fact that PVSS.Verify check will be successful at every honest
node. When the dealer is malicious, at the end of sharing phase,
from the totality and agreement guarantees of our RBC protocol,
every honest node will eventually receive an identical 𝒗∥𝒄∥𝝅. Fur-
thermore, Lemma 4.4 implies that the check PVSS.Verify(𝒗, 𝒄, 𝝅)
was successful at least 𝑡 + 1 honest nodes. Hence, due to the correct-
ness guarantee of PVSS.Verify, 𝒗 is a valid polynomial commitment
to a degree-ℓ polynomial and 𝒄 consists of correct encryptions
of shares of every node. Thus, upon receiving 𝒗∥𝒄∥𝝅, each node
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2714can locally decrypt the appropriate ciphertext in 𝒄 to recover its
share. Putting all these together, we get that Algorithm 6 guarantees
Completeness.
□
Lemma 5.8 (Secrecy). The dual-threshold ACSS protocol in Algo-
rithm 6 guarantees Secrecy for any threshold ℓ < 𝑛 − 𝑡.
Proof sketch. When the secret is a uniformly random element
1 ∈ G, IND1-Secrecy property (Definition F.2) of Scrape’s PVSS
𝑔𝑠
implies that, to an adversary that corrupts up to ℓ nodes, assuming
1 is indistinguishable from a randomly chosen
hardness of DDH, 𝑔𝑠
element in G. Hence, when we use 𝑔𝑠
1 as a one time pad in the
transformation of [48], our dual-threshold ACSS ensures Secrecy
for arbitrary secrets.
□
Remark. Note that our dual-threshold ACSS ensures secrecy even
in scenarios where the adversary corrupts more than 𝑡 (up to ℓ)
nodes during both sharing and reconstruction phase. In contrast,
existing schemes [3, 16, 34] can not ensure secrecy if the adversary
corrupts more than 𝑡 nodes during the sharing phase. For termina-
tion of the sharing phase, all existing dual-threshold ACSS schemes
(including ours) require that the adversary corrupts only up to 𝑡
nodes during the sharing phase and up to 𝑛 − ℓ − 1 nodes during
the reconstruction phase.
6 LOWER BOUNDS ON COMMUNICATION
COMPLEXITY
In this section, we present communication complexity lower bound
results for the problems studied in this paper. All the lower bounds
we show hold even under synchrony, so they naturally apply to the
harder network model of asynchrony.
For data dissemination, we show a lower bound of Ω(𝑛|𝑀|+𝑛2)
in Theorem 6.2 below. Thus, our ADD protocol has optimal commu-
nication complexity for |𝑀|≥ Θ(𝑛 log 𝑛) (see remark in Section 3),
and has a gap of at most 𝑂(log 𝑛) otherwise. Our lower bound proof
draws inspiration from Byzantine agreement lower bound proof of
Dolev and Reischuk [24].
To prove the lower bound for data dissemination (DD), we refor-
mulate the problem slightly, which we refer to as the Fixed-sender
Data Dissemination (f-DD) problem. It is easy to see that any proto-
col that solves DD also solves f-DD. Thus a lower bound for f-DD
applies to DD as well.
Definition 6.1 (Fixed-sender Data Dissemination (f-DD)). Consider
a network of 𝑛 nodes consisting of 2𝑡 + 1 senders whose input is
𝑀 and 𝑛 − (2𝑡 + 1) recipients whose input is ⊥. Let there be up to 𝑡
malicious nodes among all nodes. A protocol Π solves Fixed-sender
Data Dissemination (f-DD) if it ensures that every honest node
eventually outputs 𝑀.
Theorem 6.2. Any protocol that solves f-DD or DD for message
𝑀 with 𝑛 ≥ 3𝑡 + 1 must incur a cost of Ω(𝑛|𝑀|+𝑛2).
Proof. First, Ω(𝑛|𝑀|) is a trivial lower bound for f-DD, since
𝑛−(2𝑡 +1) ≥ 𝑡 = Ω(𝑛) honest recipients need to receive the message
𝑀 eventually, which incurs a cost of Ω(𝑛|𝑀|).
Next, we show Ω((𝑡/2)2) = Ω(𝑛2) is also a lower bound for f-DD,
even for 1-bit message. The proof is analogous to the Ω((𝑡/2)2) lower
bound proof for Byzantine agreement or broadcast due to Dolev and
Reischuk [24]. Suppose there exists protocol Π that solves DD for 1
bit using < (𝑡/2)2 messages. Let 𝑆 be the set of recipient nodes who
will output 1 if they do not receive any message during execution
of Π. Without loss of generality, suppose that |𝑆|≥ 𝑡/2 (otherwise a
symmetric argument works as well). Consider the following two
scenarios.
I. Let the sender’s input message be 0. The adversary corrupts
a set of recipient nodes 𝐵 ⊆ 𝑆 where |𝐵|= 𝑡/2. Let 𝐴 denote
the set of remaining nodes. Each corrupt node in 𝐵 behave
honestly except (i) they do not send messages to each other;
and, (ii) ignore the first 𝑡/2 messages they receive. Then, all
honest nodes will output 0. Note that, since Π uses less than
(𝑡/2)2 messages and |𝐵|= 𝑡/2, ∃𝑝 ∈ 𝐵 such that 𝑝 receives less
than 𝑡/2 messages.
II. Let the sender’s input message be 0. Let 𝐴(𝑃) denote the set of
nodes that (attempt to) send 𝑝 messages in Scenario I. Since 𝑝
receives < 𝑡/2 messages, |𝐴(𝑝)|< 𝑡/2. The adversary corrupts
nodes in 𝐴(𝑝) ∪ (𝐵 \ {𝑝}). This is allowed because |𝐴(𝑝) ∪ (𝐵 \
{𝑝})|< 𝑡. The corrupt nodes in 𝐵 \ {𝑝} behave the same as in
Scenario I except that they additionally ignore all messages
from node 𝑝. The corrupted nodes in 𝐴(𝑝) behave the same as
in Scenario I except that they do not send messages to 𝑝.
We claim that Scenario I and II are distinguishable to nodes in
𝐴 \ 𝐴(𝑝). Nodes in 𝐵 \ {𝑝} behave the same to all nodes. Nodes in
𝐴(𝑝) behave the same to 𝐴 \ 𝐴(𝑝) by construction. Node 𝑝 behaves
the same since in both Scenarios it does not receive any message
from others. Thus the claim holds.
Due to the claim above, in Scenario II, honest nodes in 𝐴 \ 𝐴(𝑝)
output 0 like they did in Scenario I. However, since 𝑝 in Scenario
II does not receive any message, it will output 1 by assumption,
which violates the requirement of f-DD. Therefore, such a protocol
Π does not exists, and Ω((𝑡/2)2) = Ω(𝑛2) is a lower bound for f-DD
even for 1-bit message.
Hence, any protocol that solves f-DD for a message 𝑀 must incur
a communication cost of Ω(𝑛|𝑀|+𝑛2). By definition, any protocol
that solves DD also solves f-DD, and therefore the lower bound
applies to DD as well.
□
For RBC for long messages, a lower bound of Ω(𝑛|𝑀|+𝑛2) is
straightforward: Ω(𝑛|𝑀|) comes from the fact that Ω(𝑛) honest
nodes each need to receive the message 𝑀 from the broadcaster,
and Ω(𝑛2) is a lower bound for solving RBC even for single-bit
input [4, 24]. Hence, our RBC protocol is optimal when |𝑀|≥ Θ(𝜅𝑛),
and has a gap of at most 𝑂(𝜅) from the optimal otherwise. For all
variants of secret sharing problems (AVSS, ACSS, Dual-threshold
AVSS), there is a lower bound of Ω(𝑛2) according to [4]. Since a AVSS
protocol is sufficient to solve RBC [4], the Ω(𝑛2) lower bound on RBC
also applies to AVSS, and other stronger secret sharing problems
as well. Therefore, our secret sharing protocol constructions are a
factor of 𝑂(𝜅) from the optimal.
7 RELATED WORK
To the best of our knowledge, the ADD problem has not been stud-
ied before. This may be in part because, despite being a simple
primitive, its applications are not immediately apparent. In hind-
sight, the biggest conceptual barrier for us in this work was to
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2715realize the usefulness of ADD as opposed to designing protocols to
solve it. For many of the applications we have identified for ADD
in this work, we had to introduce additional techniques to address
other efficiency bottlenecks in them.
Reliable broadcast. The problem of reliable broadcast (RBC) was
introduced by Bracha [14]. In the same paper, Bracha provided
an RBC protocol for a single bit with a communication cost of
𝑂(𝑛2), thus 𝑂(𝑛2|𝑀|) for |𝑀| bits using a naïve approach. Almost
two decades later, Cachin and Tessaro [16] improved the cost
to 𝑂(𝑛|𝑀|+𝜅𝑛2 log 𝑛) assuming a collision-resistant hash function
with 𝜅 being the output size of the hash. Hendricks et al. in [32]
propose an alternate RBC extension protocol with a communication
cost of 𝑂(𝑛|𝑀|+𝜅𝑛3) using a erasure coding scheme where each
element of a codeword can be verified for correctness.
Recently, assuming a trusted setup phase, hardness of 𝑞-SDH [11,
12] and Decisional Bilinear Diffie-Hellman (DBDH) [13], Nayak et
al. [41] reduced the communication cost to 𝑂(𝑛|𝑀|+𝜅𝑛2). Our RBC
protocol achieves the best of both worlds, i.e., it does not require a
setup, and has a communication cost of 𝑂(𝑛|𝑀|+𝜅𝑛2).
Asynchronous VSS/CSS. The problem of asynchronous verifiable
secret sharing has been studied for decades in many different set-
tings [3–6, 15, 17, 18, 34, 42, 52]. The information-theoretically
secure schemes [17, 18, 22, 42, 43] mostly have high communi-
cation cost or sub-optimal fault tolerance. Using cryptographic
assumption such as collision resistant hash function and Decisional
Diffie-Hellman assumption, Cachin et al. [15] proposed a AVSS
scheme with communication cost of 𝑂(𝑛3𝜅). Backes et al. [4] later
improved it to 𝑂(𝜅𝑛2) assuming a trusted setup phase and the hard-
ness of 𝑞-SDH. Very recently, Alhaddad et al. [3] proposed a ACSS
scheme for uniformly random secrets with a total communication
cost of 𝑂(𝜅𝑛2 log 𝑛).
Some works focused on improving the amortized communication
cost of AVSS for many secrets [3, 16, 52], such as amortized cost
of 𝑂(𝑛2𝜅) per secret in Cachin et al. [16], and 𝑂(𝑛𝜅) per secrets in
both hbACSS [52] and Haven [3].
Dual-threshold ACSS. The problem of dual-threshold AVSS was
introduced by Cachin and Tessaro [16] where they provide a dual-
threshold for 𝑡 < 𝑛/4 and ℓ < 𝑛/2 with communication cost of
𝑂(𝜅𝑛3). Only recently, Kokoris et al. [34] proposed the first dual-
threshold ACSS protocol for 𝑡 < 𝑛/3 and ℓ < 2𝑛/3 with a com-
munication cost of 𝑂(𝜅𝑛3) and Alhaddad et al. [3] improved the