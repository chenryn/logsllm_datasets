code more than once, it is possible for future variants to use this code more eﬃ-
ciently to evade detection. This is because once the “GetProcAddress” function
in kernel32.dll is located, address of any other library functions can be resolved
On Random-Inspection-Based Intrusion Detection
177
using this function (in fact, this is the method used by Sasser and CodeRed). In or-
der to clear such doubt, we experimented with the library-function-locating code
of the two worms. In our experiments, we copied the piece of code under concern
(with arguments for searching the “GetProcAddress” function) onto the stack and
execute them. We repeated each experiment 5 times, with WindRain perform-
ing an inspection every 2400 instructions, and see if it can detect the “attack”.
WindRain successfully detects all the 10 “attacks”. Thus we are pretty certain
that WindRain can detect both MSBlast and Welchia in their VVP, even if they
are modiﬁed to make more eﬃcient use of their library-function-locating code.
Another way to increase our conﬁdence in WindRain’s ability to detect the
ﬁve worms is to decrease the inspection frequency and see if it can still achieve
100% detection rate. Since SQLSlammer and CodeRed execute in “data space”
forever, we ﬁnd it unnecessary to perform such test for these worms. For both
MSBlast and Welchia, we ﬁnd that WindRain still achieves 100% detection when
conﬁgured to perform an inspection every 24000 instructions executed (as before,
we repeated each attacks 5 times). However, for Sasser, we tested WindRain by
increasing the interval between two inspections with step of 800 instructions.
We start with an inspection frequency of once every 2400 instrctions. We ﬁnd
WindRain miss the ﬁrst attack when performing inspection once every 7200
instructions. Among the ﬁve attacks tried at this frequency, only one is missed.
In conclusion, we are very conﬁdent that WindRain can detect the ﬁve worms
tested with probability very close to one. This is true even when WindRain
is performing inspection at a low frequency of once every 2400 instructions.
Furthermore, by detecting MSBlast, Welchia, Sasser and CodeRed in their VVP,
WindRain can guarantee to detect these attacks before they can cause any real
damage to the system. This is because in Windows, kernel services are only
accessible through library functions. Thus the Windows kernel is inaccessible to
the injected code when it is still in its VVP.
Finally, it appears possible to shorten the VVP of the tested worms by im-
proving their implementation. Nonetheless, we believe the underlying decoding
and library-function-locating algorithms will continue to have linear complexity.
With this observation, an inspection frequency of once every 800 instructions
should be suﬃcient to detect future injected code that is optimized to have
short VVP. However, we shall argue in Sect. 5.3 that the best way to guard
against these threats is to complement our system with obfuscation techniques.
5.2 False Positive Rates
We have evaluated the false positive rate of WindRain by performing some
daily activities with WindRain running on the background. In all of our tests,
WindRain is conﬁgured to perform an inspection every 800 instructions. By ex-
perimenting WindRain at such high inspection frequency, we have established
a worst-case false-positive rate. We expect the false-positive rate will only drop
when we decrease the inspection frequency of WindRain. Another reason for
choosing the number 800 is that we believe this inspection frequency is high
enough to detect most attacks with very high probability.
178
S.P. Chung and A.K. Mok
The daily activities we have tested include: surﬁng the web (using IE), read-
ing PDF ﬁles, creating word documents (using MSWord and Wordpad), viewing
PowerPoint presentations, connecting to a remote machine (using Telnet), com-
piling the entire WindRain system (using the MS VisualStudio for the applica-
tion part, and the MS DDK for the device driver part), ﬁle management (under
WindowsExplorer), playing MP3s (using WindowsMediaPlayer) and Quicktime
movies (using QTPlayer) and using a bunch of GNU tools that comes with cyg-
win (including all the utilities tested in the performance analysis). Finally, we
have also tried compiling and running Java programs while WindRain is running.
The ﬁrst false positives identiﬁed are from WindowsMediaPlayer and Win-
dowsExplorer. We ﬁnd both WindowsMediaPlayer and WindowsExplorer exe-
cute small fragments of code on the heap, which cause the false alarms. The
violating code executed on the heap are thunks that pass control to some call-
back functions. This turns out to be a well documented “workaround” to pass
the “this” pointer of C++ objects to callback functions. This technique allows
instance methods to be called by the callback mechanism. To tackle this prob-
lem, we modiﬁed WindRain to recognize the structure of the thunk and make
sure it is passing control to some callback function. After the modiﬁcation, there
are no more false alarms from these applications.
We have also observed occasional false positive when Microsoft software prompts
us to activate/register their products. We believe this is a technique to avoid bypass-
ing the corresponding check and use the software without activation/registration.
The major oﬀender in this category is winlogon.exe, which keeps prompting the
user to activate Windows. No more false positives are observed after we activate
Windows.
Finally, we ﬁnd that both the compilation and execution of Java programs
will lead to false positives in WindRain. The false positives from executing Java
application is caused by the JIT compilation in the underlying JVM. When na-
tive code is generated during runtime, they are kept in writable memory areas.
This is mainly for eﬃciency reasons and allows new native code to be writ-
ten without ﬁrst unprotecting the corresponding pages. The execution of these
dynamically-generated code will lead to false positives from WindRain. For the
compilation of Java code, we observe that the Java compiler uses code from the
JVM, which may explain the problem. We believe, in general, WindRain does
not handle programs that use dynamically-generated/self-modifying code very
well. A possible solution is to perform proﬁle-based anomaly detection using the
library/function-calling pattern of the monitored program. In this solution, in-
stead of determining whether “data” is being executed, the IDS will keep track
of the function-usage pattern of the monitored program. By building a normal
proﬁle of this pattern, the IDS can check if the observed function usage is nor-
mal. Any abnormal behavior is marked as intrusion. We believe this approach is
also useful in detecting existing-code attacks.
One last point about our experiments is that by running WindRain in a
Windows system, we have implicitly tested WindRain against those Windows
system processes. For system processes, we mean processes Windows created by
On Random-Inspection-Based Intrusion Detection
179
itself, including svchost.exe, lsass.exe, etc. In fact, it seems that these processes
are the ones that needed most protection. Our results show that WindRain has
zero false positive for all these processes after the user has activated Windows
with Microsoft. Thus it is possible to modify WindRain to only report intrusions
concerning these processes. This modiﬁcation will allow WindRain to provide
very useful protection to some major threats against Windows systems, while
maintaining a zero false-positive rate.
5.3 Performance Overhead
Since WindRain does not need to keep any record about diﬀerent processes, its
memory footprint is very small and is constant. The entire device driver (includ-
ing the interrupt service routine and all other code) is just 20KB. In other words
, WindRain has minimal space overhead. However, the frequent execution of the
interrupt service routine at inspection points can cause substantial overhead in
terms of execution time. In this section, we report WindRain’s runtime overhead
when tested on several programs in the SPEC2000 benchmark suite. The eﬀect
of the inspection frequency on the runtime overhead is studied by running the
benchmarks under 9 diﬀerent WindRain conﬁgurations.
Before we present the experimental results, let us brieﬂy describe our experi-
ments. Each benchmark program is executed six times. They are executed on an
otherwise idle Windows system with all the Windows system processes running
on the background. From the execution times measured for the six runs, one
outlier is removed. This helps to avoid any ﬂuctuation in the measured values
from aﬀecting our results. We establish the base execution time of the bench-
mark program by averaging the remaining ﬁve data points. For each inspection
frequency studied, the process is repeated with WindRain running under the
corresponding conﬁguration. Again, the execution time is measured six times
for each benchmark, and one outlier is removed to obtain ﬁve data points. The
averaged execution time is compared against the base execution time to obtain
%
n
i
d
a
e
h
r
e
v
o
e
c
n
a
m
r
o
e
P
f
 55
 50
 45
 40
 35
 30
 25
 20
 15
 10
 5
 0
 800
Performance Overhead vs Inspection Frequency
link41a
gap
gzip tif
gzip gcc
make gcc
 1200
 1000
 2200
Inspection freq (in number of instr between inspections)
 1400
 1600
 1800
 2000
 2400
Fig. 1. Performance overhead of WindRain at diﬀerent inspection frequency: y-axis
is the overhead in %, x-axis gives the inspection frequency in number of instructions
executed before an inspection occurs
180
S.P. Chung and A.K. Mok
the overhead caused by WindRain at the inspection frequency being tested. The
results of our experiments is shown in Fig. 1.
From the results in Fig. 1, we see that the performance overhead drops quite
signiﬁcantly as the inspection frequency decreases. This shows a signiﬁcant trade-
oﬀ between detection rate and performance overhead. Such tradeoﬀ once again
highlights the value of obfuscation techniques that lengthen the VVP of future in-
jected code. Consider an obfuscation technique that guarantees any injected code
will spend at least 2000 instructions locating the needed library functions. With
such guarantee, we can perform an inspection every 2000 instructions and still
guard against optimized injected code at an overhead of around 20%. Otherwise,
we will have to guard against these future attacks by increasing the inspection fre-
quency at the cost of higher performance penalty. However, even when perform-
ing random inspection once every 800 instructions, the performance overhead of
WindRain still compares favorably against many system-call-based IDS. Accord-
ing to [8, 27], system-call-based systems typically incur more than 100% overhead
in the interposition of system calls alone, unless the kernel is modiﬁed for the task.
To study how much overhead is contributed by the random-inspection process
alone, we studied the performance overhead of a system that performs random
inspection without the PC-value checking. We compared the performance over-
head of both WindRain and the “empty” system at three inspection frequencies:
once every 800, 1600 and 2400 instructions respectively. Due to space limitation,
we omit the raw data of our experiments and simply report our ﬁndings below.
We ﬁnd that a large proportion of the overhead (more than 89% in all our
experiments) comes from performing random inspection. On the other hand, the
checking of PC values obtained from random inspections only slightly increases
the overhead. This result demonstrates the feasibility of performing more so-
phisticated checking at each inspection point. For example, one would expect
the checking of the return address of the current stack frame to incur very small
extra overhead. This ﬁnding also allows us to conclude that the overhead is
mainly contributed by the side eﬀect of random inspection, instead of perform-
ing the PC checking. This side eﬀect includes the ﬂushing of pipelines and the
consumption of extra instruction cache. We have also measured the eﬀect of
random inspection on diﬀerent cache miss rate and the paging rate. Our exper-
iments show no signiﬁcant increase in these measures while performing random
inspection. As a result, we strongly believe that the ﬂushing of pipeline caused
by the frequent performance-counter overﬂow and subsequent interrupt handling
is the major cause of the high overhead. Pipeline ﬂushing is also identiﬁed as a
major cause of overhead in system-call interposition systems.
6 Conclusions and Future Work
In this paper, two problems of system-call-based anomaly detection systems
are discussed: its inherent vulnerability to mimicry attacks and its being non-
portable for the widely deployed Windows systems. These weaknesses have their
roots in monitoring at the system-call interface and the predictability thereof
On Random-Inspection-Based Intrusion Detection
181
to the attacker. Since this monitoring mechanism is shared by all system-call-
based systems, it is diﬃcult to completely overcome these diﬃculties without
having an alternative and complementary mechanism. We propose random in-
spection as an alternative monitoring mechanism. We demonstrated that ran-
dom inspection can be implemented on Windows without requiring knowledge
or modiﬁcation of the Windows kernel. Furthermore, owing to its random na-
ture, random-inspection-based intrusion detection is inherently less susceptible
to mimicry attacks. Random-inspection-based intrusion detection is a strong
complement to the more traditional system-call-based intrusion detection sys-
tems. Together these two types of IDS require attackers to deal with two con-
ﬂicting constraints. In order to evade detection by random-inspection-based sys-
tems, the attacks need to be short. On the other hand, to evade detection by
system-call-based IDS, attacks must be more complicated and therefore take
longer to execute. Random-inspection-based systems also provide a second line
of defense for systems that depend on obfuscation/diversiﬁcation as the main
line of defense. With our random-inspection-based detection as a complement,
even obfuscation/diversiﬁcation techniques that are susceptible to reversal by
an attacker can become very useful defense mechanisms. In particular, random-
inspection-based detection will make the design of obfuscation techniques easier.
In reciprocal, both traditional system-call-based systems and obfuscation tech-
niques can complement random-inspection-based systems by forcing intruders
to lengthen the attacks. This will allow random inspection to be performed at
lower frequency while still maintaining a very high detection rate and a lower
frequency implies a lower performance overhead.
To demonstrate the usefulness of random-inspection-based detection, we have
implemented a working prototype: the WindRain intrusion detection tool. Our
prototype performs random inspection on the PC value of the instruction being
executed. If the inspected PC value corresponds to a region of memory that
contains data, WindRain will mark it as an intrusion. Despite being a very
simple system, our analysis shows that WindRain can detect most of the in-
jected code attacks with a very high probability. We have tested several attacks
against WindRain (namely, MSBlast, Welchia, Sasser, Code Red and SQLSlam-
mer, all famous attacks against Windows systems). We found that WindRain
can detect all the attempted attacks very eﬀectively. This is even true with
the lowest inspection frequency tested. In terms of false positive, we found that
WindRain generates few false alarms for all but two applications we have tested,
the Java compiler and the JVM. Furthermore, WindRain was found to work
well with all the Windows system processes without raising any false positive.
This makes WindRain very suitable for system-wide protection. In terms of
performance overhead, WindRain compares favorably against many other in-
trusion detection systems, even when performing inspections at a very high
frequency.
We consider our work in this paper as an illustration of the usefulness of
random-inspection-based intrusion detection systems. There is a lot of interesting
182
S.P. Chung and A.K. Mok
work to be done in both enhancing the idea of random-inspection-based detection
and extending the capability of WindRain.
For the improvement of WindRain, we are working on solutions that allow
WindRain to work with dynamically-generated/self-modifying code (like those
generated by JVM). We believe the approach outlined in the Sect. 5.2 is very
promising. We are also interested in ways to turn oﬀ WindRain for non-critical
processes so that only critical processes incur the performance overhead from
WindRain. A possible direction would be to capture Windows context switch
and reconﬁgure WindRain accordingly. We have some preliminary evidence of
success on this. We note that the software approach we take allows us to attack
these problems in ways that the inﬂexibility of hardware-based technology such
as NX would have a much harder time to emulate.
In terms of the development of random-inspection-based systems, we are inter-
ested in studying what kind of information is available at the random-inspection
points, and how to make use of it. An interesting direction of research is to
design proﬁle-based intrusion detection systems under the random-inspection
mechanism. The proﬁle-based approach will allow us to protect programs that
use dynamically generated code without generating too many false positives. It
is also a promising approach to tackle existing code attacks. We believe our work
has opened up new directions for research of obfuscation techniques that can be
used as defensive mechanisms. With the complement of random-inspection-based
systems, new obfuscation techniques do not have to thwart attacks directly. They
only need to make attacks signiﬁcantly more complicated and visible to random-
inspection-based detection. The work in [2] about address obfuscation is a very
good example in this direction. Another interesting example is to reproduce the
harsh Windows environment (where the kernel interface is unknown) on Linux.
This can be achieved by randomizing the mapping between the system-call num-
ber and the corresponding kernel service. If we obfuscate the kernel interface,
we can avoid injected code from making direct calls to the kernel. As a result,
injected code will have to go through the long library-function-locating process
as on Windows. Thus this obfuscation technique will allow injected code attacks
to be detected easily by random-inspection-based systems like WindRain.
References
1. Elena Gabriela Barrantes, David H. Ackley, Stephanie Forrest, Trek S. Palmer,
Darko Stefanovic and Dino Dai Zovi, Randomized instruction set emulation to dis-
rupt binary code injection attacks, 10th ACM International Conference on Com-
puter and Communications Security (CCS), pp. 272 - 280. October 2003.
2. Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar, Address Obfuscation: An Eﬃ-