ditionals and loops for parsing. Other servers may perform
a block read into a buffer, and then subsequently process
the data contained in the buffer. In such cases, a signature
may still be generated based on the presence of non-ASCII
characters, as was done in the case of passlogd. How-
ever, if the protocol involved is a binary protocol, then this
approach would fail as well.
DoS attacks aimed at evading character distribution sig-
natures. A typical buffer overﬂow attack contains binary
characters to represent pointer values and executable code.
An attacker can replace these characters with ASCII charac-
ters chosen to preserve the character distribution of benign
inputs. In this case, a character distribution based signature
would fail. The attack would not have the effect of injected
code execution, but will still cause the victim process to
crash. Thus, if the attacker’s goal is simply DoS, then such
a strategy would successfully evade our signatures. For this
reason, we prefer length-based signatures in ARBOR.
Addressing limitations. Motivated by the above difﬁcul-
ties faced by ARBOR, we have recently developed COV-
ERS [19], a complementary approach for signature gener-
ation. To address the fragmentation problem, it aggregates
inputs read from multiple program locations into a single
session. To address the concurrency problem, it uses a tech-
nique to correlate the effects of attacks back to speciﬁc in-
puts. Finally, to handle message ﬁeld overﬂows, it relies on
a manual speciﬁcation of message formats. The principal
drawback of COVERS is this need for manual involvement.
In contrast, ARBOR accepts false negatives in some cases
to achieve fully automatic signature generation.
4 Related Work
The key ideas behind this paper were ﬁrst sketched in [17].
Preliminary experimental results, together with a high level
exposition of the approach, were presented in [18]. Due to
length limitations, [18] does not provide a technical descrip-
tion of the approach, or a detailed experimental evaluation,
both of which are included in this full-length paper.
Detection of Memory Errors and/or Exploits [5, 7, 8]
describe techniques for preventing stack-smashing attacks.
Techniques such as address-space randomization [1, 3, 4]
provide broader protection from memory error exploits. In-
struction set randomization [2, 14] (and OS features such as
non-executable data segments) prevents foreign code injec-
tion attacks. Techniques such as [12, 13, 21, 27, 39] provide
comprehensive detection of all memory errors, whether or
not they are used in an attack . With all these approaches,
a victim process is terminated when a memory error (or its
exploitation) is detected, thereby leading to loss of server
availability during periods of intense attacks.
Approaches for Recovering from Memory Errors Auto-
matic patch generation (APG) [29] proposed an interesting
approach that uses source-code instrumentation to diagnose
a memory error, and automatically generate a patch to cor-
rect it. STEM [30] improved on APG by eliminating the
need for source code access, and instead using machine-
code emulation. Both approach force an error return on the
current function when an attack is detected. The difﬁculty
with this strategy is that the application may be unprepared
to handle the error-code, and as a result, may not recover. In
contrast, our approach forces error returns for input func-
tions, where server applications expect and handle errors.
Therefore, recovery is more reliable in our approach.
Failure-oblivious computing [26] uses CRED [27] to de-
tect all memory errors at runtime. When an out-of-bounds
write is detected, the corresponding data is stored in a sep-
arate section of memory. A subsequent out-of-bound read
will return this data. This approach makes attacks harm-
less, and allows for recovery as well. The main drawback
of this approach is that it typically slows down programs by
a factor of 2 or more.
DIRA [32] uses a source-code transformation for run-
time logging of memory updates. When an attack is de-
tected, all the updates made since the last network input op-
eration are undone, and the process restarted at this point.
However, their approach limits logging to global variable
updates for performance reasons. This limits light-weight
recovery, requiring a total application restart in some cases.
[38] developed an approach for diagnosing
memory error exploits and signature generation. Their ap-
proach uses a post-crash forensic analysis of address-space
randomized programs. Their signature consists of the ﬁrst
three bytes of jump address included in a buffer overﬂow
attack. To minimize false positives, they suggest the use of
program contexts (speciﬁcally, current context), an idea we
had described in [18].
Xu et al.
As compared to the above approaches, ARBOR has the
beneﬁt that it generates vulnerability-oriented signatures, as
opposed to exploit-speciﬁc signatures that can miss attack
variants that exploit the same vulnerability. Moreover, it is
fully automatic, works on black-box COTS software, has
low runtime overheads, and recovers quickly and reliably
from attacks.
COVERS [19] presents a technique that complements
ARBOR — it can generate robust signatures that can be
deployed in the network, and can deal with message sub-
ﬁeld overﬂows in a more robust fashion. However, this is
achieved at the cost of requiring manual effort in specifying
message formats, whereas ARBOR is fully automatic.
Network-level Detection of Buffer Overﬂows Butter-
cup [24] and [11] detect buffer-overﬂow attacks in net-
work packets by recognizing jump addresses within net-
work packets. Buttercup requires these addresses to be ex-
ternally speciﬁed, while [11] detects them automatically,
by leveraging the nature of stack-smashing attacks and the
memory layout used in Linux. [34] suggested a more ro-
bust approach for detecting buffer overﬂow attacks using
abstract execution of the attack payload. PayL [37] devel-
ops a new technique for anomaly detection on packet pay-
loads that can detect a wider range of attacks. However,
the technique has a higher false positive rate than the above
techniques. Shield [36] uses manually generated signatures
to ﬁlter out buffer overﬂows as well as other attacks.
Network Signature Generation Earlybird [31] and Au-
tograph [15], two of the earliest approaches for worm de-
tection, relied on characteristics of worms to classify net-
work packets as benign or attack-bearing. Honeycomb [16]
avoids the classiﬁcation step by using a honeynet, which
only receives attack trafﬁc. The signatures generated by all
three techniques rely on the longest byte sequence that re-
peats across all attack packets. A polymorphic (and meta-
morphic) attack can change its code as it propagates, which
can cause these signature generation techniques to fail. To
mitigate this problem, Polygraph [22] can generate multiple
(shorter) byte-sequences as signatures. Nemean [40] im-
proves on the above approaches by incorporating protocol
semantics into the signature generation algorithm. By do-
ing so, it is able to handle a broader class of attacks than
previous signature generation approaches that were primar-
ily focused on worms.
The above techniques operate at the network level, while
our approach works at the host level. This means that our
approach is able to exploit the internal state of server pro-
cesses (e.g., current or historical context) to generate more
robust signatures. More importantly, our approach is able
to generate a general vulnerability-oriented signature from
a single attack sample, whereas previous approaches re-
quire multiple attack samples to synthesize a generalized
signature. Indeed, the generality of the signature provided
by previous approaches is largely determined by the attack
samples available.
for Signature Generation The
Hybrid Approaches
HACQIT project [25] uses software diversity for attack de-
tection. A rule-based algorithm is then used to learn char-
acteristics of suspect inputs. The approach generates an ef-
fective signature for Code Red, but its effectiveness for a
broader class of attacks was not evaluated.
TaintCheck [23] and Vigilante [6] track the ﬂow of infor-
mation from network inputs to data used in attacks, e.g., a
jump address used in a code-injection attack. The signatures
generated by TaintCheck are somewhat simplistic — it uses
the 3 leading bytes of a jump address as a signature, which
can lead to false positives, especially with binary protocols.
Vigilante’s signatures consist of machine code derived from
the victim program’s code. These signatures do not pro-
duce false positives, but can be large and overly speciﬁc.
They suggested some heuristics for generalizing them, but
these heuristics were not well evaluated.
FLIPS [20] uses PayL [37] to detect anomalous inputs.
If the anomaly is conﬁrmed by an accurate attack detector
(which, in their implementation, was based on instruction
set randomization), a content-based signature is generated
using techniques similar to network signature generation
techniques.
An advantage of ARBOR is our use of a relatively sim-
ple infrastructure that is based on library interposition. In
contrast, TaintCheck, Vigilante and FLIPS rely on relatively
complex infrastructures for runtime instruction emulation
or binary transformations.
5 Summary
Our approach solves two key problems encountered in au-
tomatic ﬁltering of attacks. First, it automatically discov-
ers the signatures that distinguish attack-bearing data from
normal data. These signatures are synthesized by carefully
observing both the input data and the internal behavior of a
protected process. Second, it automatically invokes the nec-
essary recovery actions. Instead of simply discarding data,
a transient network error is simulated so that the applica-
tion’s own recovery code can be utilized to safely recover
from a foiled attack attempt. Our approach can work with
COTS software without access to source code.
ARBOR was effective in generating a signature for 10
of the 11 “real world” attacks used in our experiments,
thus demonstrating its effectiveness in blocking most buffer
overﬂow attacks. Moreover, false positives were not ob-
served in these experiments.
Although ARBOR is currently a stand-alone system, it
can be extended with the ability to communicate with other
systems, allowing it to send generated attack signatures and
attack payloads to system administrators and other systems
protected by our approach, so that these systems can block
out recurrences of the same attack without ever having wit-
nessed even a single attack instance.
We believe that the central idea of using program context
information to reﬁne input classiﬁcation has applicability
beyond the class of buffer overﬂow attacks, and is a topic of
our ongoing research.
References
[1] The PaX team. http://pax.grsecurity.net.
[2] E. Barrantes et al. Randomized instruction set emulation to disrupt
binary code injection attacks. In CCS, 2003.
[3] S. Bhatkar, D. DuVarney, and R. Sekar. Address obfuscation: An ef-
ﬁcient approach to combat a broad range of memory error exploits.
In USENIX Security, 2003.
[4] S. Bhatkar, R. Sekar, and D. DuVarney. Efﬁcient techniques for
comprehensive protection from memory error exploits. In USENIX
Security, 2005.
[5] T. Chiueh and F. Hsu. RAD: A compile-time solution to buffer
overﬂow attacks. In ICDCS, 2001.
[6] M. Costa et al. Vigilante: End-to-end containment of Internet
worms. In SOSP, 2005.
[7] C. Cowan et al. StackGuard: Automatic adaptive detection and
prevention of buffer-overﬂow attacks. In USENIX Security, 1998.
[8] H. Etoh and K. Yoda.
Published
Protecting from stack-smashing
at URL
attacks.
http://www.trl.ibm.com/projects/security/ssp, 2000.
on World-Wide Web
[9] H. Feng et al. Anomaly detection using call stack information. In
IEEE S&P, 2003.
[10] J. Gifﬁn, S. Jha, and B. Miller. Efﬁcient context-sensitive intrusion
detection. In NDSS, 2004.
[11] F. Hsu and T. Chiueh. CTCP: A centralized TCP/IP architecture for
networking security. In ACSAC, 2004.
[12] T. Jim et al. Cyclone: a safe dialect of C.
In USENIX Annual
Technical Conference, 2002.
[13] R. Jones and P. Kelly. Backwards-compatible bounds checking for
arrays and pointers in C programs. In Intl. Workshop on Automated
Debugging, 1997.
[14] G. Kc, A. Keromytis, and V. Prevelakis. Countering code-injection
attacks with instruction-set randomization. In ACM CCS, 2003.
[15] H. Kim and B. Karp. Autograph: Toward automated, distributed
worm signature detection. In USENIX Security, 2004.
[16] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion de-
tection signatures using honeypots. In HotNets-II, 2003.
[17] Z. Liang, R. Sekar, and D. DuVarney.
Immunizing servers from
buffer-overﬂow attacks. Presentation in ARCS Workshop, 2004.
[18] Z. Liang, R. Sekar, and D. DuVarney. Automatic synthesis of ﬁlters
to discard buffer overﬂow attacks: A step towards realizing self-
healing systems. In USENIX Annual Technical Conference, (Short
Paper) 2005.
[19] Z. Liang and R. Sekar. Fast and automated generation of attack
In CCS,
signatures: A basis for building self-protecting servers.
2005.
[20] M. Locasto, K. Wang, A. Keromytis, and S. Stolfo. FLIPS: Hybrid
adaptive intrusion prevention. In RAID, 2005.
[21] G. Necula, S. McPeak, and W. Weimer. CCured:
type-safe
retroﬁtting of legacy code. In POPL, 2002.
[22] J. Newsome et al. Polygraph: Automatically generating signatures
for polymorphic worms. In IEEE S&P, 2005.
[23] J. Newsome and D. Song. Dynamic taint analysis for automatic de-
tection, analysis, and signature generation of exploits on commodity
software. In NDSS, 2005.
[24] A. Pasupulati et al. Buttercup: On network-based detection of poly-
morphic buffer overﬂow vulnerabilities. In IEEE/IFIP Network Op-
eration and Management Symposium, 2004.
[25] J. Reynolds et al. On-line intrusion detection and attack prevention
using diversity, generate-and-test, and generalization. Hawaii Intl.
Conference on System Sciences, 2003.
[26] M. Rinard et al. A dynamic technique for eliminating buffer over-
ﬂow vulnerabilities (and other memory errors). In ACSAC, 2004.
[27] O. Ruwase and M. Lam. A practical dynamic buffer overﬂow de-
tector. In NDSS, 2004.
[28] R. Sekar et al. A fast automaton-based method for detecting anoma-
lous program behaviors. In IEEE S&P, 2001.
[29] S. Sidiroglou and A. Keromytis. A network worm vaccine architec-
ture. In WETICE, 2003.
[30] S. Sidiroglou, M. Locasto, S. Boyd, and A. Keromytis. Building a
reactive immune system for software services. In USENIX Annual
Technical Conference, 2005.
[31] S. Singh et al. Automated worm ﬁngerprinting. In OSDI, 2004.
[32] A. Smirnov and T. Chiueh. DIRA: Automatic detection, identiﬁca-
tion and repair of control-hijacking attacks. In NDSS, 2005.
[33] Y. Tang and S. Chen. Defending against Internet worms: A
signature-based approach. In INFOCOM, 2005.
[34] T. Toth and C. Kruegel. Accurate buffer overﬂow detection via ab-
stract payload execution. In RAID, 2002.
[35] D. Wagner and D. Dean. Intrusion detection via static analysis. In
IEEE S&P, 2001.
[36] H. Wang et al. Shield: Vulnerability-driven network ﬁlters for pre-
venting known vulnerability exploits. In SIGCOMM, 2004.
[37] K. Wang and S. Stolfo. Anomalous payload-based network intru-
sion detection. In RAID, 2004.
[38] J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt. Automatic diag-
nosis and response to memory corruption vulnerabilities. In CCS,
2005.
[39] W. Xu, D. DuVarney, and R. Sekar. An efﬁcient and backwards-
compatible transformation to ensure memory safety of C programs.
In FSE, 2004.
[40] V. Yegneswaran, J. Gifﬁn, P. Barford, and S. Jha. An architecture for
generating semantics-aware signatures. In USENIX Security, 2005.