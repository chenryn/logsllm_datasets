    ```
现在您已经有了一个 Quay 映像存储库和一个从 Minikube VM 创建的本地开发环境，让我们开始编写留言簿操作符。请注意，操作员代码的一个示例位于 https://github.com/PacktPublishing/-Learn-Helm/tree/master/guestbook-operator 的 Packt 存储库中。
## 搭建操作员文件结构
类似于 Helm 图表本身，由`operator-sdk` CLI 构建的 Helm 操作符有一个必须遵守的特定文件结构。下表解释了文件结构:
![Figure 8.6 – The file structures explained ](img/Figure_8.6.jpg)
图 8.6–解释的文件结构
可以使用`operator-sdk new`命令轻松创建操作员文件结构。在您的迷你库虚拟机中，执行以下命令来构建留言簿操作员:
```
$ operator-sdk new guestbook-operator --type helm --kind Guestbook --helm-chart Learn-Helm/helm-charts/charts/guestbook
INFO[0000] Creating new Helm operator 'guestbook-operator'. 
INFO[0003] Created helm-charts/guestbook       
WARN[0003] Using default RBAC rules: failed to get Kubernetes config: could not locate a kubeconfig 
INFO[0003] Created build/Dockerfile                     
INFO[0003] Created watches.yaml                         
INFO[0003] Created deploy/service_account.yaml          
INFO[0003] Created deploy/role.yaml                     
INFO[0003] Created deploy/role_binding.yaml             
INFO[0003] Created deploy/operator.yaml                 
INFO[0003] Created deploy/crds/charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml 
INFO[0003] Generated CustomResourceDefinition manifests. 
INFO[0003] Project creation complete.
```
`operator-sdk new`命令创建了一个名为`guestbook-operator`的本地目录，其中包含操作员内容。规定应使用`--type`旗帜和`Guestbook`作为华润的名称创建掌舵人。
最后，`--helm-chart`标志指示`operator-sdk` CLI 将源留言簿图表复制到操作员目录。
随着留言簿操作员成功搭建，让我们构建操作员并将其推送到我们的 Docker 登记处。
## 建造操作员并将其推到 Docker
`operator-sdk`命令行界面提供了一个`operator-sdk build`命令，使得可以直接构建操作员映像。该命令被设计为针对操作员的顶级目录运行，并将通过引用位于操作员的`build/` 文件夹下的 Dockerfile 来构建映像。
在您的迷你库虚拟机中，运行`operator-sdk build`命令，根据指示替换您的 Docker 用户名，如下所示:
```
$ cd guestbook-operator
$ operator-sdk build quay.io/$QUAY_USERNAME/guestbook-operator
```
如果构建成功，您将收到以下消息:
```
INFO[0092] Operator build complete.
```
由于 Minikube 虚拟机安装了 Docker，因此`operator-sdk` CLI 在后台使用 Docker 来构建映像。您可以运行`docker images`命令来验证映像是否已构建，如下所示:
```
$ docker images
```
在本地构建操作员映像后，必须将其推送到映像注册表中，以便从 Kubernetes 中提取。为了使用 Docker 将映像推送到注册表，您必须首先向目标注册表进行身份验证。使用`docker login`命令登录 Docker，如以下代码片段所示:
```
$ docker login quay.io --username $QUAY_USERNAME --password $QUAY_PASSWORD
```
登录 Docker 后，使用`docker push`命令将操作员映像推送到 Docker 登记处，如下所示:
```
$ docker push quay.io/$QUAY_USERNAME/guestbook-operator
```
当推送完成后，返回到您在*创建 Docker 仓库*部分创建的`guestbook-operator`仓库。您应该能够看到在**存储库标签**部分下发布的新标签，如下图所示:
![Figure 8.7 – A new tag should be pushed to your Quay registry ](img/Figure_8.7.jpg)
图 8.7–一个新的标签应该被推送到你的 Docker 登记处
现在您的操作符已经被推送到容器注册中心，让我们继续将操作符部署到您的 Kub ernetes 环境中。
## 部署留言簿操作员
在搭建留言簿操作员时，`operator-sdk` CLI 还创建了一个名为`deploy`的文件夹，并生成了在其中部署操作员所需的文件。
以下文件结构描述了`deploy`文件夹的内容:
```
deploy/
  crds/
    charts.helm.k8s.io_guestbooks_crd.yaml
    charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml
  operator.yaml
  role_binding.yaml
  role.yaml
  service_account.yaml
```
`crds/`文件夹包含创建留言簿 CRD ( `charts.helm.k8s.io_guestbooks_crd.yaml`)所需的 YAML 资源。该文件是向 Kubernetes 注册新留言簿应用编程接口端点所必需的。此外，`crds/`文件夹包含一个示例留言簿 CR 应用(`charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml`)。创建此文件将触发操作员安装留言簿 Helm 图表。
查看 CR 的内容，以便熟悉定义的属性类型，如下所示:
```
$ cat guestbook-operator/deploy/crds/charts.helm.k8s.io_v1alpha1_guestbook_cr.yaml
```
下面的代码块提供了输出的一个片段:
![Figure 8.8 – Snippet of the Guestbook CR ](img/Figure_8.8.jpg)
图 8.8–留言簿 CR 的片段
`spec`小节下的每个条目都是指留言簿图表的`values.yaml`文件。`operator-sdk`工具自动用该文件中包含的每个默认值创建了该示例 CR。在应用此 CR 之前，可以添加或修改其他条目，以覆盖留言簿图表的其他值。操作员在运行时使用这些值来相应地部署留言簿应用。
`deploy/operator.yaml`文件定义了实际的操作员本身，并包含一个简单的部署资源。我们将很快回到这个文件的内容。
创建`role_binding.yaml`、`role.yaml`和`service_account.yaml`文件的目的是为操作员提供必要的权限来查看留言簿 CRs 并将留言簿 Helm 图表安装到 Kubernetes。它通过使用`service_account.yaml`文件中定义的服务帐户向 Kubernetes API 进行身份验证来执行这些操作。一旦通过认证，运营商将获得基于`role.yaml`和`role_binding.yaml`资源的授权。`role.yaml`文件列出了细粒度的权限，这些权限描述了操作员被允许执行的确切资源和操作。`role_binding.yaml`文件将角色绑定到操作员的服务帐户。
了解在操作员的`deploy/`文件夹下创建的每个资源后，按照以下步骤部署您的留言簿操作员:
1.  不幸的是，Minikube 虚拟机不包含`Kubectl`，因此如果您仍然从命令行连接到虚拟机，您必须首先退出到您的本地系统，方法是运行以下命令:
    ```
    $ exit
    ```
2.  The resources that were created with `operator-sdk` earlier are also located in the Packt repository under the `guestbook-operator/` folder. If you have not cloned this repository in previous chapters, clone it now using the following command:
    ```
    $ git clone https://github.com/PacktPublishing/-Learn-Helm.git Learn-Helm
    ```
    另外，请注意，Packt 存储库中唯一一个从您在 Minikube 虚拟机中创建的资源中修改的资源是`role.yaml`文件。`operator-sdk`命令行界面基于包含在留言簿 Helm 图表中的模板文件生成了一个简单的`role.yaml`文件。然而，如果你还记得的话，留言簿图表包含了一些资源，这些资源只基于一个条件值。这些资源是`Job`和`PersistentVolumeClaim`挂钩资源，只有在启用持久存储时才会包括在内。这方面的一个例子显示在`PersistentVolumeClaim`模板中，在下面的代码片段中:
    ```
    {{- if .Values.redis.master.persistence.enabled }}
    apiVersion: v1
    kind: PersistentVolumeClaim
    ```
    `operator-sdk`命令行界面没有自动为`Jobs`和`PersistentVolumeClaims`创建**基于角色的访问控制** ( **RBAC** )规则，因为它不知道该模板是否包括在内。
    因此，作者将这些规则添加到了`role.yaml`文件中，该文件位于 https://github . com/PacktPublishing/-Learn-Helm/blob/master/guest book-operator/deploy/role . YAML # L81-L104。
3.  The Guestbook operator will be dependent on a new API endpoint. Create this endpoint by applying the CRD under the `guestbook-operator/deploy/crds` folder, as follows:
    ```
    $ kubectl apply -f guestbook-operator/deploy/crds/charts.helm.k8s.io_guestbooks_crd.yaml
    ```
    稍后，我们将使用该文件夹(CR)下的第二个文件来部署留言簿应用。
4.  Next, you will need to modify the `guestbook-operator/deploy/operator.yaml` file to specify the operator image that you built earlier. You will notice the following lines of code within this file:
    ```
    # Replace this with the built image name
    image: REPLACE_IMAGE
    ```
    用操作员映像的位置替换`REPLACE_IMAGE`文本。该值应类似于`quay.io/$QUAY_USERNAME/guestbook-operator`。
5.  一旦您应用了 CRD 并更新了您的`operator.yaml`文件，您就可以通过运行以下命令来应用`guestbook-operator/deploy/`文件夹下的每个资源:
    ```
    $ kubectl apply -f guestbook-operator/deploy -n chapter8
    ```
6.  等待操作员报告`1/1`就绪状态，方法是对`chapter8`名称空间中的 Pods 运行一个手表，如下所示:
    ```
    $ kubectl get pods -n chapter8 -w
    ```
现在已经部署了留言簿操作员，让我们用它来安装留言簿 Helm 图表。