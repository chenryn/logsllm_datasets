title:Phasing: Private Set Intersection Using Permutation-based Hashing
author:Benny Pinkas and
Thomas Schneider and
Gil Segev and
Michael Zohner
Phasing: Private Set Intersection using 
Permutation-based Hashing
Benny Pinkas, Bar-Ilan University; Thomas Schneider, Technische Universität Darmstadt;  
Gil Segev, The Hebrew University of Jerusalem; Michael Zohner,  
Technische Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/pinkas
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXPhasing: Private Set Intersection using Permutation-based Hashing
Benny Pinkas
Bar-Ilan University, Israel
PI:EMAIL
Thomas Schneider
TU Darmstadt, Germany
PI:EMAIL
Gil Segev
Hebrew University, Israel
PI:EMAIL
Michael Zohner
TU Darmstadt, Germany
PI:EMAIL
Abstract
Private Set Intersection (PSI) allows two parties to com-
pute the intersection of private sets while revealing noth-
ing more than the intersection itself. PSI needs to be ap-
plied to large data sets in scenarios such as measurement
of ad conversion rates, data sharing, or contact discovery.
Existing PSI protocols do not scale up well, and therefore
some applications use insecure solutions instead.
We describe a new approach for designing PSI proto-
cols based on permutation-based hashing, which enables
to reduce the length of items mapped to bins while en-
suring that no collisions occur. We denote this approach
as Phasing, for Permutation-based Hashing Set Intersec-
tion. Phasing can dramatically improve the performance
of PSI protocols whose overhead depends on the length
of the representations of input items.
We apply Phasing to design a new approach for
circuit-based PSI protocols. The resulting protocol is up
to 5 times faster than the previously best Sort-Compare-
Shufﬂe circuit of Huang et al. (NDSS 2012). We also
apply Phasing to the OT-based PSI protocol of Pinkas et
al.
(USENIX Security 2014), which is the fastest PSI
protocol to date. Together with additional improvements
that reduce the computation complexity by a logarithmic
factor, the resulting protocol improves run-time by a fac-
tor of up to 20 and can also have similar communication
overhead as the previously best PSI protocol in that re-
spect. The new protocol is only moderately less efﬁcient
than an insecure PSI protocol that is currently used by
real-world applications, and is therefore the ﬁrst secure
PSI protocol that is scalable to the demands and the con-
straints of current real-world settings.
1
Introduction
Private set intersection (PSI) allows two parties P1 and P2
with respective input sets X and Y to compute the inter-
section X ∩ Y of their sets without revealing any infor-
mation but the intersection itself. Although PSI has been
1
widely studied in the literature, many real-world applica-
tions today use an insecure hash-based protocol instead
of a secure PSI protocol, mainly because of the insufﬁ-
cient efﬁciency of current PSI protocols.
In this work we present Phasing, Permutation-based
Hashing Set Intersection, which is a new approach for
constructing PSI protocols based on a hashing technique
that ensures that hashed elements can be represented by
short strings without any collisions. The overhead of re-
cent PSI protocols depends on the length of these rep-
resentations, and this new structure of construction, to-
gether with other improvements, results in very efﬁcient
performance that is only moderately larger than that of
the insecure protocol that is in current real-world usage.
1.1 Motivating Scenarios
The motivation for this work comes from scenarios
where PSI must be applied quite frequently to large
sets of data, and therefore performance becomes critical.
Moreover, the communication overhead might be even
more important than the computation overhead, since in
large data centers it is often easier to add computing
power than to improve the outgoing communication in-
frastructure. We describe here three scenarios which re-
quire large-scale PSI implementations.
Measuring ad conversion rates Online advertising,
which is a huge business, typically measures the success
of ad campaigns by measuring the success of converting
viewers into customers. A popular way of measuring this
value is by computing the conversion rate, which is the
percentage of ad viewers who later visit the advertised
site or perform a transaction there. For banner ads or ser-
vices like Google Adwords it is easy to approximate this
value by measuring ad click-throughs. However, mea-
suring click-throughs is insufﬁcient in other online ad-
vertising settings. One such setting is mobile advertis-
ing, which is becoming a dominating part of online ad-
USENIX Association  
24th USENIX Security Symposium  515
vertising. Even though mobile ads have a great effect,
click-throughs are an insufﬁcient measure of their utility,
since it is unlikely, due to small displays and the casual
nature of mobile browsing, that a user will click on an
ad and, say, purchase a car using his mobile device. An-
other setting where click rate measurement is unsatisfac-
tory is advertising of ofﬂine goods, like groceries, where
the purchase itself is done ofﬂine.1
An alternative method of measuring ad performance is
to compare the list of people who have seen an ad with
those who have completed a transaction. These lists are
held by the advertiser (say, Google or Facebook), and by
merchants, respectively. It is often possible to identify
users on both ends, using identiﬁers such as credit card
numbers, email addresses, etc. A simple solution, which
ignores privacy, is for one side to disclose its list of cus-
tomers to the other side, which then computes the nec-
essary statistics. Another option is to run a PSI protocol
between the two parties. (The protocol should probably
be a variant of PSI, e.g. compute total revenues from
customers who have seen an ad. Such protocols can be
derived from basic PSI protocols.) In fact, Facebook is
running a service of this type with Datalogix, Epsilon
and Acxiom, companies which have transaction records
for a large part of loyalty card holders in the US. Accord-
ing to reports2, the computation is done using a variant of
the insecure naive hashing PSI protocol that we describe
in §3.1. Our results show that it can be computed using
secure protocols even for large data sets.
Security incident information sharing Security inci-
dent handlers can beneﬁt from information sharing since
it provides them with a global view during incidents.
However, incident data is often sensitive and potentially
embarrassing. The shared information might reveal in-
formation about the business of the company that pro-
vided it, or of its customers. Therefore, information is
typically shared rather sparsely and protected using legal
agreements. Automated large scale sharing will improve
security, and there is in fact work to that end, such as the
IETF Managed Incident Lightweight Exchange (MILE)
effort. Many computations that are applied to the shared
data compute the intersection and its variants. Applying
PSI to perform these computations can simplify the le-
gal issues of information sharing. Efﬁcient PSI protocols
will enable it to be run often and in large scale.
Private contact discovery When a new user registers
to a service it is often essential to identify current regis-
1See, e.g., http://www.reuters.com/article/2012/10/01/
us-facebook-ads-idUSBRE8900I120121001 .
2See, e.g., https://www.eff.org/deeplinks/2012/09/deep
-dive-facebook-and-datalogix-whats-actually-getting
-shared-and-how-you-can-opt.
2
tered users who are also contacts of the new user. This
operation can be done by simply revealing the user’s con-
tact list to the service, but can also be done in a pri-
vacy preserving manner by running a PSI protocol be-
tween the user’s contact list and the registered users of
the service. This latter approach is used by the TextSe-
cure and Secret applications, but for performance rea-
sons they use the insecure naive hashing PSI protocol
described in §3.1.3
In these cases each user has a small number of
records n2, e.g., n2 = 256, whereas the service has mil-
lions of registered users (in our experiments we use
n1 = 224).
In our
the client needs only O(n2 logn1)
best PSI protocol,
memory, O(n2) symmetric cryptographic operations and
O(n1) cheap hash table lookups, and the communication
is O(n1 logn1). (The communication overhead is indeed
high as it depends on n1, but this seems inevitable if brute
force searches are to be prevented.)
It therefore holds that n2 (cid:30) n1.
1.2 Our Contributions
Our goal in this work is to enable PSI computations for
large scale sets that were previously beyond the capabil-
ities of state-of-the-art protocols. The constructions that
we design in this work improve performance by more
than an order of magnitude. We obtain these improve-
ments by generalizing the hashing approach of [22] and
applying it to generic secure computation-based PSI pro-
tocols. We replace the hash function in [22] by a permu-
tation which enables us to reduce the bit-length of inter-
nal representations. Moreover, we suggest several im-
provements to the OT-based PSI protocol of [22]. We
explain our contributions in more detail next:
Phasing: Using permutation-based hashing to reduce
the bit-length of representations. The overhead of the
best current PSI protocol [22] is linear in the length of the
representations of items in the sets (i.e., the ids of items
in the sets). The protocol maps items into bins, and since
each bin has very few items in it, it is tempting to hash
the ids to shorter values and trust the birthday paradox
to ensure that no two items in the same bin are hashed
to the same representation. However, a closer examina-
tion shows that to ensure that the collision probability is
smaller than 2−λ , the length of the representation must
be at least λ bits, which is too long.
In this work we utilize the permutation-based hashing
techniques of [1] to reduce the bit-length of the ids of
items that are mapped to bins. These ideas were sug-
gested in an algorithmic setting to reduce memory us-
3See https://whispersystems.org/blog/contact-disco
very/ and https://medium.com/@davidbyttow/demystifying
-secret-12ab82fda29f , respectively.
516  24th USENIX Security Symposium 
USENIX Association
age, and as far as we know this is the ﬁrst time that they
are used in a cryptographic or security setting to improve
performance. Essentially, when using β bins the ﬁrst
logβ bits in an item’s hashed representation deﬁne the
bin to which the item is mapped, and the other bits are
used in a way which provably prevents collisions. This
approach reduces the bit-length of the values used in the
PSI protocol by logβ bits, and this yields reduced over-
head by up to 60%-75% for the settings we examined.
the bit-length of elements in PSI. Afterwards, we ap-
ply Phasing to generic secure computation protocols, and
present Circuit-Phasing, our new approach for circuit-
based PSI §5. Thereafter, we apply Phasing to the previ-
ously fastest OT-based PSI protocol of [22] and present
several optimizations in §6. In §7 we analyze the hashing
failure probability of Circuit- and OT-Phasing. Finally,
we provide an evaluation of our PSI protocols in §8.
Circuit-Phasing:
Improved circuit-based PSI. As
we discuss in §3.4 there is a great advantage in using
generic secure computation for computing PSI, since this
enables to easily compute variants of the basic PSI func-
tionality. Generic secure computation protocols evalu-
ate Boolean circuits computing the desired functionality.
The best known circuit for computing PSI was based on
the Sort-Compare-Shufﬂe circuit of [12]. We describe
Circuit-Phasing, a new generic protocol that uses hash-
ing (speciﬁcally, Cuckoo hashing and simple hashing)
and secure circuit evaluation.
In comparison with the
previous approach, our circuits have a smaller number
of AND gates, a lower depth of the circuit (which affects
the number of communication rounds in some protocols),
and a much smaller memory footprint. These factors lead
to a signiﬁcantly better performance.
OT-Phasing: Improved OT-based PSI. We introduce
the OT-Phasing protocol which improves the OT-based
PSI protocol of [22] as follows:
• Improved computation and memory. We reduce
the length of the strings that are processed in the
OT from O(log2 n) to O(logn), which results in a
reduction of computation and memory complexity
for the client from O(nlog2 n) to O(nlogn).
• 3-way Cuckoo hashing. We use 3 instead of 2
hash functions to generate a more densely populated
Cuckoo table and thus decrease the overall number
of bins and hence OTs.
OT-Phasing improves over state-of-the-art PSI both in
terms of run-time and communication. Compared to the
previously fastest PSI protocol of [22], our protocol im-
proves run-time by up to factor 10 in the WAN setting
and by up to factor 20 in the LAN setting. Furthermore,
our OT-Phasing protocol in some cases achieves similar
communication as [18], which was shown to achieve the
lowest communication of all PSI protocols [22].
1.3 Outline
We give preliminary information in §2 and summarize
related work in §3. In §4 we describe Phasing, our op-
timization for permutation-based hashing that reduces
2 Preliminaries
2.1 Notation
We denote the parties as P1 and P2. For all protocols we
assume that P2 obtains the output. The respective input
sets are denoted as X and Y , with sizes n1 = |X| and n2 =
|Y|. Often n1 = n2 and we use the notation n = n1 = n2.
We assume that elements are of bit-length σ.
We call the symmetric security parameter κ, the bit-
length of the elliptic curves ϕ, and the statistical security
parameter λ . Throughout the paper we assume 128-bit
security, i.e., κ = 128, ϕ = 283 (using Koblitz-curves),
and λ = 40. For symmetric encryption we use AES-128.
We refer to the concatenation of bit-strings by ||, to
the exclusive-OR (XOR) operation by ⊕, and to the i-th
element in a sequence S by S[i]. In many protocols, we
shorten the size of hash values that are sent to (cid:31) = λ +
log2(n1) +log 2(n2) instead of 2κ. This yields collision
probability 2−λ , which is suited for most applications.
2.2 Security
Two types of adversaries are typically discussed in the
secure computation literature: A semi-honest adversary
is trusted to follow the protocol, but attempts to learn as
much information as possible from the messages it re-
ceives. This adversary model is appropriate for scenar-
ios where execution of the correct software is enforced
by software attestation or where an attacker might ob-
tain the transcript of the protocol after its execution, ei-
ther by stealing it or by legally enforcing its disclosure.
In contrast, a malicious adversary can behave arbitrar-
ily. Most work on PSI was in the semi-honest setting.
Protocols that are secure against malicious adversaries,
e.g., [9, 10, 14], are considerably less efﬁcient. We focus
on optimal performance and therefore design protocols
secure against semi-honest adversaries only. Further-
more, the security of the protocols is proven in the ran-
dom oracle model, as is justiﬁed in the full version [21].
2.3 Hashing to Bins
Our protocols hash the input items to bins and then op-
erate on each bin separately.
In general, our hashing
USENIX Association  
24th USENIX Security Symposium  517
3
schemes use a table T consisting of β bins. An element e
is mapped to the table by computing an address a = H(e)
using a hash function H that is modeled as a random
function. A value related to e is then stored in bin T [a].
There is a rich literature on hashing schemes, which
differ in the methods for coping with collisions, the com-
plexity for insertion/deletion/look-up, and the utilization
of storage space.
In [9, 10, 22], hashing to bins was
used to improve the number of comparisons that are per-
formed in PSI protocols. In the following, we detail the
two most promising hashing schemes for use in PSI, ac-
cording to [22]: simple hashing and Cuckoo hashing. For
the OT-based PSI protocol of [22] it was shown that a
combination of simple hashing (for P1) and Cuckoo hash-
ing (for P2) results in the best performance.
2.3.1 Simple Hashing
Simple hashing builds the table T by mapping each ele-
ment e to bin T [H(e)] and appending e to the bin. Each
bin must, of course, be able to store more than one ele-
ment. The size of the most populated bin was analyzed
in [23], and depends on the relation between the num-
ber of bins and the total number of elements. Most im-
portantly for our application, when hashing n elements
into β = n bins, it was shown that the maximum number
of elements in a bin is lnn
lnlnn (1 + o(1)). In §7.1 we give
a theoretical and an empirical analysis of the maximum
number of elements in a bin.
2.3.2 Cuckoo Hashing
Cuckoo hashing [19] uses h hash functions H1, ...,Hh to
map an element e to a bin using either one of the h hash
functions. (Typically, h is set to be h = 2; we also use
h = 3.) In contrast to simple hashing, it allows at most
one element to be stored in a bin. If a collision occurs,
Cuckoo hashing evicts the element in the bin and per-
forms the insertion again for the evicted element. This