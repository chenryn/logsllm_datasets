 位置。如果index
 为BADADDR ，则该结构体被添加到Structures窗口的结尾部分。
add_struc_member(struc_t *s, char * name, ea_t offset, flags_t flags, typeinfo_t *info, asize_t size)
 在给定结构体中添加一个给定name的新成员。该成员要么添加到结构体中给定的offset
 位置，如果offset
 为BADADDR
 ，则附加到结构体末尾。flags
 参数描述新成员的数据类型。有效的标志使用在bytes.hpp 文件中描述的FF_XXX
 常量定义。info
 参数提供有关复杂数据类型的额外信息，对于原始数据类型，它被设置为NULL
 。typeinfo_t
 数据类型在nalt.hpp文件中定义。size
 参数指定新成员占用的字节数。
6. 操纵段
segment_t
 类存储与数据库中不同段（如.text
 和.data
 ）有关的信息，这些段可通过View▶Open Subviews▶Segments 窗口查看。如前所述，各种可执行文件格式（如PE和ELF ）通常将IDA 术语段称为节。下面的函数可用于访问 segment_t
 对象。其他处理 segment_t
 类的函数在segment.hpp文件中声明。
segment_t *getseg(ea_t addr)
 ，返回一个指向segment_t
 对象的指针，该对象包含给定的地址。
segment_t *ida_export get_segm_by_name(char * name)
 ，用给定的名称返回一个指向segment_t
 对象的指针。
add_segm(ea_t para, ea_t start, ea_t end, char *name, char *sclass)
 ，在当前数据库中创建一个段。段的边界由start
 （包括）和end
 （不包括）地址参数指定，段的名称则由name
 参数指定。该段的类描述被创建的段的类型。预定义的类包括CODE
 和DATA
 。请参阅segment.hpp文件，获取预定义类的完整列表。如果使用分段地址（seg:offset
 ）， start
 和end
 将被解释为偏移量而不是虚拟地址，这时，para
 参数描述节的基址。如果没有使用分段地址，或者所有段以零为基数，则这个参数应设置为零。
add_segm_ex(segment_t *s, char *name, char *sclass, int flags)
 ，是另一种新建段的方法。你应该设置s
 字段，以反映段的地址范围。该段根据name
 和sclass
 参数命名和分类。flags
 参数应设置为在segment.hpp文件中定义的一个ADDSEG_XXX
 值。
int get_segm_qty()
 ，返回数据库中的节的数量。
segment_t *getnseg(int n)
 ，返回一个指向segment_t
 对象的指针，该对象包含与数据库中第n个程序节有关的信息。
int set_segm_name(segment_t * s, char *name, ...)
 ，更改给定段的名称。将name
 作为格式化字符串处理，并合并该格式化字符串所需的任何其他参数，即构成段的名称。
get_segm_name(ea_t addr, char *name, size_t namesize)
 ，将包含给定地址的段的名称复制到用户提供的name
 缓冲区中。注意，IDA 可能会对name
 进行过滤，使用一个哑字符（通常为ida.cfg 中SubstCha
 r指定的一个下划线）替换其中的无效字符（在ida.cfg 中没有指定为NameChars
 的字符）。
get_segm_name(segment_t * s, char *name, size_t namesize)
 将给定段的可能已经被过滤的名称复制到用户提供的name
 缓冲区中。
get_true_segm_name(segment_t * s, char *name, size_t namesize)
 ，将给定段的准确名称复制到用户提供的name
 缓冲区中，不过滤任何字符。
在创建段时，必须使用一个 add_segm
 函数。仅仅声明和初始化一个 segment_t
 对象，实际上并不能在数据库中创建一个段。所有包装类（如 func_t
 和struc_t
 ）均是如此。这些类仅仅提供一种便捷的方法来访问一个基本数据库实体的属性。要创建、修改或删除具体的数据库对象，你必须使用适当的函数，以对数据库进行永久性更改。
7. 代码交叉引用
在xref.hpp 中定义的许多函数和枚举常量（部分如下所示）可用于访问代码交叉引用信息。
get_first_cref_from(ea_t from)
 ，返回给定地址向其转交控制权的第一个位置。如果给定的地址没有引用其他地址，则返回BADADDR （- 1）。
get_next_cref_from(ea_t from, ea_t current)
 ，如果current
 已经由前一个对get_first_ cref_from
 或get_next_cref_from
 的调用返回，则返回给定地址（from
 ）向其转交控制权的下一个位置。如果没有其他交叉引用存在，则返回BADADDR 。
get_first_cref_to(ea_t to)
 返回向给定地址转交控制权的第一个位置。如果不存在对给定地址的引用，则返回BADADDR （- 1）。
get_next_cref_to(ea_t to, ea_t current)
 ，如果current
 已经由前一个对get_first_cref_to
 或get_next_cref_to
 的调用返回，则返回向给定地址（to
 ）转交控制权的下一个位置。如果没有对给定地址的其他交叉引用，则返回BADADDR 。
8. 数据交叉引用
访问数据交叉引用信息的函数（也在 xref.hpp 中声明）与用于访问代码交叉引用信息的函数非常类似。这些函数如下所示。
get_frist_dref_from(ea_t from)
 ，返回给定地址向其引用一个数据值的第一个位置。如果给定地址没有引用其他地址，则返回BADADDR （-1）。
get_next_dref_from(ea_t from, ea_t current)
 ，如果current
 已经由前一个对get_first_ dref_from
 或get_next_dref_from
 的调用返回，则返回给定地址（from
 ）向其引用一个数据值的下一个位置。如果没有其他交叉引用存在，则返回BADADDR 。
get_first_dref_to(ea_t to)
 ，返回将给定地址作为数据引用的第一个位置。如果没有对给定地址的引用，则返回BADADDR （-1）。
get_next_dref_to(ea_t to, ea_t current)
 ，如果current
 已经由前一个对get_first_ dref_to
 或get_next_dref_to
 的调用返回，则返回将给定地址（to
 ）作为数据引用的下一个位置。如果没有其他对给定位置的交叉引用，则返回BADADDR 。
SDK中没有与 IDC 的XrefType
 对应的函数。虽然 xref.hpp 文件声明了一个名为 lastXR
 的变量，但SDK 并不导出这个变量。如果你需要确定一个交叉引用的类型，你必须使用 xrefblk_t
 结构体迭代交叉引用。我们将在下一节中讨论 xrefblk_t
 结构体。
16.2.5 IDA API 迭代技巧
通常，使用 IDA API 能以几种不同的方式迭代数据库对象。在下面的例子中，我们将说明一些常用的迭代技巧。
1. 枚举函数
迭代数据库中函数的第一种技巧与使用 IDC 脚本迭代函数的方法类似：
for (func_t *f = get_next_func(0); f != NULL; f = get_next_func(f->startEA)) {  
   char fname[1024];  
   get_func_name(f->startEA, fname, sizeof(fname));  
   msg("%08x: %s\n", f->startEA, fname);  
}
另外，我们可以直接按索引号迭代函数，如下面的例子所示：
for (int idx = 0; idx  get_func_qty(); idx++) {  
   char fname[1024];  
   func_t *f = getn_func(idx);  
   get_func_name(f->startEA, fname, sizeof(fname));  
   msg("%08x: %s\n", f->startEA, fname);  
}
最后，我们可以采用一种较为低级的方法，利用一个由area.hpp 文件定义的名为areacb_t
 的数据结构（也叫做区域控制块
 ）。区域控制块用于维护相关的 area_t
 对象的列表。一个名为funcs
 的全局areacb_t
 变量作为IDA API 的一部分导出（在 funcs.hpp 文件中）。使用areacb_t
 类，前面的例子可以改写为：
➊ int a = funcs.get_next_area(0);  
   while (a != -1) {  
      char fname[1024];  
➌    func_t *f = (func_t*)funcs.getn_area(a);  // getn_area returns an area_t  
      get_func_name(f->startEA, fname, sizeof(fname));  
      msg("%08x: %s\n", f->startEA, fname);  