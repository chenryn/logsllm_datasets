YEAR Integer value (positive or negative)
MONTH 0 through 11
DAY Integer value (positive or negative)
HOUR 0 through 23
MINUTE 0 through 59
SECOND 0 through 59.9(p) where 9(p) is the precision of fractional
seconds
The fields must be presented in descending order – from YEARS to MONTHS, and from
DAYS to HOURS, MINUTES and then SECONDS.
Advanced Server supports two INTERVAL types compatible with Oracle databases.
The first variation supported by Advanced Server is INTERVAL DAY TO SECOND
[(p)]. INTERVAL DAY TO SECOND [(p)] stores a time interval in days, hours,
minutes and seconds.
p specifies the precision of the second field.
Advanced Server interprets the value:
INTERVAL '1 2:34:5.678' DAY TO SECOND(3)
as 1 day, 2 hours, 34 minutes, 5 seconds and 678 thousandths of a second.
Advanced Server interprets the value:
INTERVAL '1 23' DAY TO HOUR
as 1 day and 23 hours.
Advanced Server interprets the value:
INTERVAL '2:34' HOUR TO MINUTE
as 2 hours and 34 minutes.
Advanced Server interprets the value:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 24
Database Compatibility for Oracle® Developers
Reference Guide
INTERVAL '2:34:56.129' HOUR TO SECOND(2)
as 2 hours, 34 minutes, 56 seconds and 13 thousandths of a second. Note that the
fractional second is rounded up to 13 because of the specified precision.
The second variation supported by Advanced Server that is compatible with Oracle
databases is INTERVAL YEAR TO MONTH. This variation stores a time interval in years
and months.
Advanced Server interprets the value:
INTERVAL '12-3' YEAR TO MONTH
as 12 years and 3 months.
Advanced Server interprets the value:
INTERVAL '456' YEAR(2)
as 12 years and 3 months.
Advanced Server interprets the value:
INTERVAL '300' MONTH
as 25 years.
2.2.4.2 Date/Time Input
Date and time input is accepted in ISO 8601 SQL-compatible format, the Oracle default
dd-MON-yy format, as well as a number of other formats provided that there is no
ambiguity as to which component is the year, month, and day. However, use of the
TO_DATE function is strongly recommended to avoid ambiguities.
Any date or time literal input needs to be enclosed in single quotes, like text strings. The
following SQL standard syntax is also accepted:
type 'value'
type is either DATE or TIMESTAMP.
value is a date/time text string.
2.2.4.2.1 Dates
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 25
Database Compatibility for Oracle® Developers
Reference Guide
The following table shows some possible input formats for dates, all of which equate to
January 8, 1999.
Table 2-7 Date Input
Example
January 8, 1999
1999-01-08
1999-Jan-08
Jan-08-1999
08-Jan-1999
08-Jan-99
Jan-08-99
19990108
990108
The date values can be assigned to a DATE or TIMESTAMP column or variable. The hour,
minute, and seconds fields will be set to zero if the date value is not appended with a time
value.
2.2.4.2.2 Times
Some examples of the time component of a date or time stamp are shown in the following
table.
Table 2-8 Time Input
Example Description
04:05:06.789 ISO 8601
04:05:06 ISO 8601
04:05 ISO 8601
040506 ISO 8601
04:05 AM Same as 04:05; AM does not affect value
04:05 PM Same as 16:05; input hour must be Manual...'));
SELECT * FROM books;
content
----------------------------------------------------------
Manual...
(1 row)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 29
Database Compatibility for Oracle® Developers
Reference Guide
2.3 SQL Commands
This section provides a summary of the SQL commands compatible with Oracle
databases that are supported by Advanced Server. The SQL commands in this section
will work on both an Oracle database and an Advanced Server database.
Note the following points:
 Advanced Server supports other commands that are not listed here. These
commands may have no Oracle equivalent or they may provide the similar or
same functionality as an Oracle SQL command, but with different syntax.
 The SQL commands in this section do not necessarily represent the full syntax,
options, and functionality available for each command. In most cases, syntax,
options, and functionality that are not compatible with Oracle databases have been
omitted from the command description and syntax.
 The Advanced Server documentation set documents command functionality that
may not be compatible with Oracle databases.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 30
Database Compatibility for Oracle® Developers
Reference Guide
2.3.1 ALTER INDEX
Name
ALTER INDEX -- modify an existing index.
Synopsis
Advanced Server supports two variations of the ALTER INDEX command compatible with
Oracle databases. Use the first variation to rename an index:
ALTER INDEX name RENAME TO new_name
Use the second variation of the ALTER INDEX command to rebuild an index:
ALTER INDEX name REBUILD
Description
ALTER INDEX changes the definition of an existing index. The RENAME clause changes
the name of the index. The REBUILD clause reconstructs an index, replacing the old copy
of the index with an updated version based on the index's table.
The REBUILD clause invokes the PostgreSQL REINDEX command; for more information
about using the REBUILD clause, see the PostgreSQL core documentation at:
https://www.postgresql.org/docs/11/static/sql-reindex.html
ALTER INDEX has no effect on stored data.
Parameters
name
The name (possibly schema-qualified) of an existing index.
new_name
New name for the index.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 31
Database Compatibility for Oracle® Developers
Reference Guide
Examples
To change the name of an index from name_idx to empname_idx:
ALTER INDEX name_idx RENAME TO empname_idx;
To rebuild an index named empname_idx:
ALTER INDEX empname_idx REBUILD;
See Also
CREATE INDEX, DROP INDEX
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 32
Database Compatibility for Oracle® Developers
Reference Guide
2.3.2 ALTER PROCEDURE
Name
ALTER PROCEDURE
Synopsis
ALTER PROCEDURE procedure_name options [RESTRICT]
Description
Use the ALTER PROCEDURE statement to specify that a procedure is a SECURITY
INVOKER or SECURITY DEFINER.
Parameters
procedure_name
procedure_name specifies the (possibly schema-qualified) name of a stored
procedure.
options may be:
[EXTERNAL] SECURITY DEFINER
Specify SECURITY DEFINER to instruct the server to execute the procedure with
the privileges of the user that created the procedure. The EXTERNAL keyword is
accepted for compatibility, but ignored.
[EXTERNAL] SECURITY INVOKER
Specify SECURITY INVOKER to instruct the server to execute the procedure with
the privileges of the user that is invoking the procedure. The EXTERNAL keyword
is accepted for compatibility, but ignored.
The RESTRICT keyword is accepted for compatibility, but ignored.
Examples
The following command specifies that the update_balance procedure should execute
with the privileges of the user invoking the procedure:
ALTER PROCEDURE update_balance SECURITY INVOKER;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 33
Database Compatibility for Oracle® Developers
Reference Guide
2.3.3 ALTER PROFILE
Name
ALTER PROFILE – alter an existing profile
Synopsis
ALTER PROFILE profile_name RENAME TO new_name;
ALTER PROFILE profile_name
LIMIT {parameter value}[...];
Description
Use the ALTER PROFILE command to modify a user-defined profile; Advanced Server
supports two forms of the command:
 Use ALTER PROFILE…RENAME TO to change the name of a profile.
 Use ALTER PROFILE…LIMIT to modify the limits associated with a profile.
Include the LIMIT clause and one or more space-delimited parameter/value pairs to
specify the rules enforced by Advanced Server, or use ALTER PROFILE…RENAME TO to
change the name of a profile.
Parameters
profile_name
The name of the profile.
new_name
new_name specifies the new name of the profile.
parameter
parameter specifies the attribute limited by the profile.
value
value specifies the parameter limit.
Advanced Server supports the value shown below for each parameter:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 34
Database Compatibility for Oracle® Developers
Reference Guide
FAILED_LOGIN_ATTEMPTS specifies the number of failed login attempts that a user
may make before the server locks the user out of their account for the length of time
specified by PASSWORD_LOCK_TIME. Supported values are:
 An INTEGER value greater than 0.
 DEFAULT - the value of FAILED_LOGIN_ATTEMPTS specified in the
DEFAULT profile.
 UNLIMITED – the connecting user may make an unlimited number of failed
login attempts.
PASSWORD_LOCK_TIME specifies the length of time that must pass before the server
unlocks an account that has been locked because of FAILED_LOGIN_ATTEMPTS.
Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_LOCK_TIME specified in the DEFAULT
profile.
 UNLIMITED – the account is locked until it is manually unlocked by a
database superuser.
PASSWORD_LIFE_TIME specifies the number of days that the current password may
be used before the user is prompted to provide a new password. Include the
PASSWORD_GRACE_TIME clause when using the PASSWORD_LIFE_TIME clause to
specify the number of days that will pass after the password expires before
connections by the role are rejected. If PASSWORD_GRACE_TIME is not specified, the
password will expire on the day specified by the default value of
PASSWORD_GRACE_TIME, and the user will not be allowed to execute any command
until a new password is provided. Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_LIFE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The password does not have an expiration date.
PASSWORD_GRACE_TIME specifies the length of the grace period after a password
expires until the user is forced to change their password. When the grace period
expires, a user will be allowed to connect, but will not be allowed to execute any
command until they update their expired password. Supported values are:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 35
Database Compatibility for Oracle® Developers
Reference Guide
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_GRACE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The grace period is infinite.
PASSWORD_REUSE_TIME specifies the number of days a user must wait before re-
using a password. The PASSWORD_REUSE_TIME and PASSWORD_REUSE_MAX
parameters are intended to be used together. If you specify a finite value for one of
these parameters while the other is UNLIMITED, old passwords can never be reused.
If both parameters are set to UNLIMITED there are no restrictions on password reuse.
Supported values are:
 A NUMERIC value greater than or equal to 0. To specify a fractional portion
of a day, specify a decimal value. For example, use the value 4.5 to specify 4
days, 12 hours.
 DEFAULT - the value of PASSWORD_REUSE_TIME specified in the DEFAULT
profile.
 UNLIMITED – The password can be re-used without restrictions.
PASSWORD_REUSE_MAX specifies the number of password changes that must occur
before a password can be reused. The PASSWORD_REUSE_TIME and
PASSWORD_REUSE_MAX parameters are intended to be used together. If you specify a
finite value for one of these parameters while the other is UNLIMITED, old passwords
can never be reused. If both parameters are set to UNLIMITED there are no
restrictions on password reuse. Supported values are:
 An INTEGER value greater than or equal to 0.
 DEFAULT - the value of PASSWORD_REUSE_MAX specified in the DEFAULT
profile.
 UNLIMITED – The password can be re-used without restrictions.
PASSWORD_VERIFY_FUNCTION specifies password complexity. Supported values
are:
 The name of a PL/SQL function.
 DEFAULT - the value of PASSWORD_VERIFY_FUNCTION specified in the
DEFAULT profile.
 NULL
PASSWORD_ALLOW_HASHED specifies whether an encrypted password to be allowed
for use or not. If you specify the value as TRUE, the system allows a user to change
the password by specifying a hash computed encrypted password on the client side.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 36
Database Compatibility for Oracle® Developers
Reference Guide
However, if you specify the value as FALSE, then a password must be specified in a
plain-text form in order to be validated effectively, else an error will be thrown if a
server receives an encrypted password. Supported values are:
 A BOOLEAN value TRUE/ON/YES/1 or FALSE/OFF/NO/0.
 DEFAULT – the value of PASSWORD_ALLOW_HASHED specified in the
DEFAULT profile.
Note: The PASSWORD_ALLOW_HASHED is not an Oracle-compatible parameter.
Examples
The following example modifies a profile named acctg_profile:
ALTER PROFILE acctg_profile
LIMIT FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 1;
acctg_profile will count failed connection attempts when a login role attempts to
connect to the server. The profile specifies that if a user has not authenticated with the
correct password in three attempts, the account will be locked for one day.
The following example changes the name of acctg_profile to payables_profile:
ALTER PROFILE acctg_profile RENAME TO payables_profile;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 37
Database Compatibility for Oracle® Developers
Reference Guide
2.3.4 ALTER QUEUE
Advanced Server includes extra syntax (not offered by Oracle) with the ALTER QUEUE
SQL command. This syntax can be used in association with the DBMS_AQADM package.
Name
ALTER QUEUE -- allows a superuser or a user with the aq_administrator_role
privilege to modify the attributes of a queue.
Synopsis
This command is available in four forms. The first form of this command changes the
name of a queue.
ALTER QUEUE queue_name RENAME TO new_name
Parameters
queue_name
The name (optionally schema-qualified) of an existing queue.
RENAME TO
Include the RENAME TO clause and a new name for the queue to rename
the queue.
new_name
New name for the queue.
The second form of the ALTER QUEUE command modifies the attributes of the queue:
ALTER QUEUE queue_name SET [ ( { option_name option_value }
[,SET option_name
Parameters
queue_name
The name (optionally schema-qualified) of an existing queue.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 38
Database Compatibility for Oracle® Developers
Reference Guide