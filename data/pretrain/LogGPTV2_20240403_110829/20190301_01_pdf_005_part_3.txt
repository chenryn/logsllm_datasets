### INTERVAL Types

#### Fields and Ranges
- **YEAR**: An integer value (positive or negative).
- **MONTH**: 0 through 11.
- **DAY**: An integer value (positive or negative).
- **HOUR**: 0 through 23.
- **MINUTE**: 0 through 59.
- **SECOND**: 0 through 59.9(p), where 9(p) is the precision of fractional seconds.

The fields must be presented in descending order: from YEARS to MONTHS, and from DAYS to HOURS, MINUTES, and then SECONDS.

#### INTERVAL DAY TO SECOND [(p)]
Advanced Server supports two INTERVAL types compatible with Oracle databases. The first variation is `INTERVAL DAY TO SECOND [(p)]`, which stores a time interval in days, hours, minutes, and seconds. The `p` parameter specifies the precision of the second field.

Examples:
- `INTERVAL '1 2:34:5.678' DAY TO SECOND(3)` is interpreted as 1 day, 2 hours, 34 minutes, 5 seconds, and 678 thousandths of a second.
- `INTERVAL '1 23' DAY TO HOUR` is interpreted as 1 day and 23 hours.
- `INTERVAL '2:34' HOUR TO MINUTE` is interpreted as 2 hours and 34 minutes.
- `INTERVAL '2:34:56.129' HOUR TO SECOND(2)` is interpreted as 2 hours, 34 minutes, 56 seconds, and 13 thousandths of a second (rounded up due to the specified precision).

#### INTERVAL YEAR TO MONTH
The second variation supported by Advanced Server is `INTERVAL YEAR TO MONTH`, which stores a time interval in years and months.

Examples:
- `INTERVAL '12-3' YEAR TO MONTH` is interpreted as 12 years and 3 months.
- `INTERVAL '456' YEAR(2)` is interpreted as 456 years.
- `INTERVAL '300' MONTH` is interpreted as 25 years.

### Date/Time Input

Date and time input is accepted in ISO 8601 SQL-compatible format, the Oracle default `dd-MON-yy` format, and other formats provided there is no ambiguity. The `TO_DATE` function is strongly recommended to avoid ambiguities.

Any date or time literal input must be enclosed in single quotes, similar to text strings. The following SQL standard syntax is also accepted:
- `type 'value'`
  - `type` is either `DATE` or `TIMESTAMP`.
  - `value` is a date/time text string.

#### Dates
The following table shows some possible input formats for dates, all of which equate to January 8, 1999:

| Example          | Format       |
|------------------|--------------|
| January 8, 1999  | Full Date    |
| 1999-01-08       | ISO 8601     |
| 1999-Jan-08      | Oracle       |
| Jan-08-1999      | Oracle       |
| 08-Jan-1999      | Oracle       |
| 08-Jan-99        | Oracle       |
| Jan-08-99        | Oracle       |
| 19990108         | Compact      |
| 990108           | Compact      |

Date values can be assigned to a `DATE` or `TIMESTAMP` column or variable. If a date value is not appended with a time value, the hour, minute, and seconds fields will be set to zero.

#### Times
Some examples of the time component of a date or timestamp are shown in the following table:

| Example   | Description              |
|-----------|--------------------------|
| 04:05:06.789 | ISO 8601 with milliseconds |
| 04:05:06   | ISO 8601                 |
| 04:05     | ISO 8601                 |
| 040506    | ISO 8601                 |
| 04:05 AM  | Same as 04:05; AM does not affect value |
| 04:05 PM  | Same as 16:05; input hour must be adjusted |

### SQL Commands

This section provides a summary of the SQL commands compatible with Oracle databases that are supported by Advanced Server. These commands work on both Oracle and Advanced Server databases.

#### ALTER INDEX
**Name**: `ALTER INDEX` - modify an existing index.

**Synopsis**:
```sql
ALTER INDEX name RENAME TO new_name;
ALTER INDEX name REBUILD;
```

**Description**:
- `ALTER INDEX` changes the definition of an existing index.
- The `RENAME` clause changes the name of the index.
- The `REBUILD` clause reconstructs an index, replacing the old copy with an updated version based on the index's table.

**Parameters**:
- `name`: The name (possibly schema-qualified) of an existing index.
- `new_name`: New name for the index.

**Examples**:
- To change the name of an index from `name_idx` to `empname_idx`:
  ```sql
  ALTER INDEX name_idx RENAME TO empname_idx;
  ```
- To rebuild an index named `empname_idx`:
  ```sql
  ALTER INDEX empname_idx REBUILD;
  ```

**See Also**:
- `CREATE INDEX`
- `DROP INDEX`

#### ALTER PROCEDURE
**Name**: `ALTER PROCEDURE`

**Synopsis**:
```sql
ALTER PROCEDURE procedure_name [EXTERNAL] SECURITY {DEFINER | INVOKER} [RESTRICT]
```

**Description**:
- Use the `ALTER PROCEDURE` statement to specify that a procedure is a `SECURITY INVOKER` or `SECURITY DEFINER`.

**Parameters**:
- `procedure_name`: The (possibly schema-qualified) name of a stored procedure.
- `SECURITY DEFINER`: Executes the procedure with the privileges of the user that created the procedure.
- `SECURITY INVOKER`: Executes the procedure with the privileges of the user that is invoking the procedure.
- `EXTERNAL` and `RESTRICT` keywords are accepted for compatibility but ignored.

**Example**:
- The following command specifies that the `update_balance` procedure should execute with the privileges of the user invoking the procedure:
  ```sql
  ALTER PROCEDURE update_balance SECURITY INVOKER;
  ```

#### ALTER PROFILE
**Name**: `ALTER PROFILE` - alter an existing profile.

**Synopsis**:
```sql
ALTER PROFILE profile_name RENAME TO new_name;
ALTER PROFILE profile_name LIMIT {parameter value} [...];
```

**Description**:
- Use the `ALTER PROFILE` command to modify a user-defined profile.
- `ALTER PROFILE...RENAME TO` changes the name of a profile.
- `ALTER PROFILE...LIMIT` modifies the limits associated with a profile.

**Parameters**:
- `profile_name`: The name of the profile.
- `new_name`: The new name of the profile.
- `parameter`: Specifies the attribute limited by the profile.
- `value`: Specifies the parameter limit.

**Supported Parameters**:
- `FAILED_LOGIN_ATTEMPTS`: Number of failed login attempts before locking the account.
- `PASSWORD_LOCK_TIME`: Length of time the account is locked.
- `PASSWORD_LIFE_TIME`: Number of days before the password expires.
- `PASSWORD_GRACE_TIME`: Grace period after password expiration.
- `PASSWORD_REUSE_TIME`: Number of days before reusing a password.
- `PASSWORD_REUSE_MAX`: Number of password changes before reuse.
- `PASSWORD_VERIFY_FUNCTION`: Password complexity function.
- `PASSWORD_ALLOW_HASHED`: Whether encrypted passwords are allowed.

**Examples**:
- Modify a profile named `acctg_profile`:
  ```sql
  ALTER PROFILE acctg_profile
  LIMIT FAILED_LOGIN_ATTEMPTS 3 PASSWORD_LOCK_TIME 1;
  ```
- Change the name of `acctg_profile` to `payables_profile`:
  ```sql
  ALTER PROFILE acctg_profile RENAME TO payables_profile;
  ```

#### ALTER QUEUE
**Name**: `ALTER QUEUE` - allows a superuser or a user with the `aq_administrator_role` privilege to modify the attributes of a queue.

**Synopsis**:
```sql
ALTER QUEUE queue_name RENAME TO new_name;
ALTER QUEUE queue_name SET (option_name option_value);
```

**Parameters**:
- `queue_name`: The name (optionally schema-qualified) of an existing queue.
- `RENAME TO new_name`: Renames the queue.
- `SET (option_name option_value)`: Modifies the attributes of the queue.

**Note**:
- This command is available in four forms, including renaming and setting queue attributes.

---

**Copyright Â© 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**