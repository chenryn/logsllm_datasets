[48] Bradley Reaves, Nolen Scaife, Adam Bates, Patrick
Traynor, and Kevin R.B. Butler. Mo(bile) money,
mo(bile) problems: Analysis of branchless banking ap-
plications in the developing world. In 24th USENIX
USENIX Association
29th USENIX Security Symposium    1513
Security Symposium (USENIX Security 15), pages 17–
32, 2015.
[49] Bradley Reaves, Luis Vargas, Nolen Scaife, Dave Tian,
Logan Blue, Patrick Traynor, and Kevin R. B. Butler.
Characterizing the security of the SMS ecosystem with
public gateways. ACM Trans. Priv. Secur., 22:2:1–2:31,
December 2018.
[50] M. Roland, J. Langer, and J. Scharinger. Applying relay
In 2013 5th International
attacks to Google wallet.
Workshop on Near Field Communication (NFC), pages
1–6, 2 2013.
[51] Michael Roland and Josef Langer. Cloning credit cards:
A combined pre-play and downgrade attack on EMV
contactless. In Proceedings of the 7th USENIX Confer-
ence on Offensive Technologies, WOOT’13, pages 6–6.
USENIX Association, 2013.
[52] M. Sabt, M. Achemlal, and A. Bouabdallah. Trusted
execution environment: What it is, and what it is not. In
2015 IEEE Trustcom/BigDataSE/ISPA, volume 1, pages
57–64, 8 2015.
[53] Hossein Siadati, Toan Nguyen, Payas Gupta, Markus
Jakobsson, and Nasir Memon. Mind your SMSes. Com-
put. Secur., 65:14–28, March 2017.
[54] Soot.
https://www.sable.mcgill.ca/soot/tut
[Online; ac-
orial/profiler2/index.html, 2018.
cessed October-2018].
[55] Chris McMahon Stone, Tom Chothia, and Flavio D.
Garcia. Spinner: Semi-automatic detection of pinning
without hostname veriﬁcation. In Proceedings of the
33rd Annual Computer Security Applications Confer-
ence, ACSAC 2017, pages 176–188, 2017.
[56] Vincent F. Taylor and Ivan Martinovic. Short paper: A
longitudinal study of ﬁnancial apps in the Google Play
store. In Financial Cryptography and Data Security,
pages 302–309, 2017.
[57] Economic Times.
https://economictimes.indi
atimes.com/news/politics-and-nation/new-f
orm-of-otp-theft-on-rise-many-techies-vic
tims/articleshow/67521098.cms, 2019.
accessed August-2019].
[Online;
[58] India Today.
https://www.indiatoday.i
n/technology/news/story/fraudsters-s
teal-rs-91-000-from-a-man-s-e-walle
t-1382689-2018-11-05, 2018.
August-2019].
[Online; accessed
[59] Patrick Traynor, Thomas La Porta, and Patrick Mc-
Daniel. Security for telecommunications networks. Ad-
vances in information security. 2008.
[60] Wandera.
What are
app permissions – a
https:
look into Android app permissions.
//www.wandera.com/mobile-security/app-a
nd-data-leaks/app-permissions/.
accessed August-2019].
[Online;
[61] Jane K Winn and Louis De Koker. Introduction to mo-
bile money in developing countries: Financial inclusion
and ﬁnancial integrity conference special issue. Uni-
versity of Washington School of Law Research Paper,
(2013-01), 2013.
[62] Wenbo Yang, Yuanyuan Zhang, Juanru Li, Hui Liu, Qing
Wang, Yueheng Zhang, and Dawu Gu. Show me the
money! Finding ﬂawed implementations of third-party
in-app payment in Android apps. In NDSS, 2017.
[63] Changsok Yoo, Byung-Tak Kang, and Huy Kang Kim.
Case study of the vulnerability of OTP implemented in
internet banking systems of South Korea. Multimedia
Tools and Applications, 74:3289–3303, 05 2015.
9 Appendix
9.1 BHIM Code Instrumentation
We provide a brief discussion of one example instrumentation
of BHIM with the goal of determining the workﬂow of the
UPI protocol. BHIM version 1.3 consists of about 516K lines
of obfuscated smali code. Some apps such as Paytm are even
larger than BHIM, posing a signiﬁcant reverse engineering
challenge.
After searching through the BHIM code, we located
the snippet below that belongs to the NPCI
library
and is integrated with the BHIM app. We found that
NPCI had not obfuscated the name of the package as
shown in line #1 in/org/npci/upiapp/utils. However, the
method names are obfuscated as indicated by the method
name at line #19 called a. The third-party libraries used
by NPCI are not obfuscated as is seen by the class
org.apache.http.impl.client.DefaultHttpClient at line #17.
We instrumented different portions of the BHIM app to de-
termine the control-ﬂow of the program. We found that when
using automated tools such as Soot [54] to instrument the app,
we got unexpected failures such as the app hanging indeﬁ-
nitely (we did get Soot to work for smaller test programs). We
were unable to root-cause why BHIM’s instrumentation with
Soot did not work. Hence, we resorted to a careful smali code
instrumentation of BHIM.
Listing 1 shows the method that performs HTTP GET.
Since the methods are all static methods, by Android (and
Java) convention, the ﬁrst parameter is stored in the register
p0, the second in register p1 etc. The registers v0, v1 etc. are
registers local to a method body. Listing 2 contains code that
prints the parameters to the GET request contained in the
1514    29th USENIX Security Symposium
USENIX Association
parameter p1. We inserted the code in Listing 2 after line
#38, right at the beginning of the function (after the function
prologue at line #35). The inserted code snippet prints the
parameters using the System.out.print API call. The printed
debug statements appear in Android logcat logs. We did a
similar instrumentation for HTTP POST methods.
Some of the apps such as Paytm, that contain several DEX
ﬁles (with each DEX ﬁle containing a maximum of 65536
methods), were even more challenging to instrument, as
they obfuscate the calls to most of the third-party libraries
they use. In such cases, further experimentation and analysis
was required to discover the calls. That apart, the security
defenses used by these apps may also change across app
revisions. For instance, while older versions of Paytm
could be repackaged, the latest version of the app resists
repackaging.
1 . class public Lin / org / npci / upiapp / utils / RestClient ;
2 . super Ljava / lang / Object ;
3 . source " RestClient . java "
4
5 # annotations
6 . annotation system Ldalvik / annotation / MemberClasses ;
7
8
Lin / org / npci / upiapp / utils /
value = {
RestClient$UnsuccessfulRestCall ;
}
9
10 . end annotation
11
12 # static fields
13 . field private static final a: Ljava / lang / String ;
14
15 . field private static b: Lorg / apache / http / impl / client /
DefaultHttpClient ;
16
17 . field private static c: Lorg / apache / http / impl / client /
DefaultHttpClient ;
18
19 . method public static a( Landroid / content / Context ; Ljava /
lang / String ; Ljava / util / Map ;) Lin / org / npci / upiapp /
models / ApiResponse ;)
. locals 6
. annotation system Ldalvik / annotation / Signature ;
value = {
"(" ,
" Landroid / content / Context ;" ,
" Ljava / lang / String ;" ,
" Ljava / util / Map " ,
" ;)" ,
" Lin / org / npci / upiapp / models / ApiResponse ;"
}
. end annotation
. prologue
const /16 v5 , 0 x130
. line 404
new - instance v2 , Lorg / apache / http / client / methods /
HttpGet ;
invoke - direct { v2 }, Lorg / apache / http / client / methods /
HttpGet ;->() V
. line 405
...
move - result - object v2
const - string v3 , " . Response Code :
"
invoke - virtual {v2 , v3 }, Ljava / lang / StringBuilder ;->
append ( Ljava / lang / String ;) Ljava / lang /
StringBuilder ;
move - result - object v2
invoke - interface { v0 }, Lorg / apache / http / HttpResponse
;-> getStatusLine () Lorg / apache / http / StatusLine ;
move - result - object v0
invoke - interface { v0 }, Lorg / apache / http / StatusLine ;->
getStatusCode () I
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58 . end method
move - result v0
...
Listing 1: BHIM code snippet
USENIX Association
29th USENIX Security Symposium    1515
1 sget - object v0 , Ljava / lang / System ;-> out : Ljava / io /
PrintStream ;
2
3 new - instance v1 , Ljava / lang / StringBuilder ;
4 invoke - direct { v1 }, Ljava / lang / StringBuilder ;->() V
5
6 const - string / jumbo v2 , " Log_debug_upi_str0 : "
7 invoke - virtual {v1 , v2 }, Ljava / lang / StringBuilder ;->
append ( Ljava / lang / String ;) Ljava / lang / StringBuilder ;
8
9 move - result - object v1
10 invoke - virtual {v1 , p1 }, Ljava / lang / StringBuilder ;->
append ( Ljava / lang / String ;) Ljava / lang / StringBuilder ;
11
12 move - result - object v1
13 invoke - virtual { v1 }, Ljava / lang / StringBuilder ;-> toString
() Ljava / lang / String ;
14
15 move - result - object v1
16 invoke - virtual {v0 , v1 }, Ljava / io / PrintStream ;-> println (
Ljava / lang / String ;) V
17
18
19 sget - object v0 ,
PrintStream ;
Ljava / lang / System ;-> out : Ljava / io /
20
21 new - instance v1 , Ljava / lang / StringBuilder ;
22 invoke - direct { v1 }, Ljava / lang / StringBuilder ;->() V
23
24 const - string / jumbo v2 , " Log_debug_upi_restclient_map0 : "
25 invoke - virtual {v1 , v2 }, Ljava / lang / StringBuilder ;->
append ( Ljava / lang / String ;) Ljava / lang / StringBuilder ;
26
27 move - result - object v1
28 invoke - virtual { p2 }, Ljava / lang / Object ;-> toString () Ljava /
lang / String ;
29
30 move - result - object v2
31 invoke - virtual {v1 , v2 }, Ljava / lang / StringBuilder ;->
append ( Ljava / lang / String ;) Ljava / lang / StringBuilder ;
32
33 move - result - object v1
34 invoke - virtual { v1 }, Ljava / lang / StringBuilder ;-> toString
() Ljava / lang / String ;
35 move - result - object v1
36 invoke - virtual {v0 , v1 }, Ljava / io / PrintStream ;-> println (
Ljava / lang / String ;) V
Listing 2: HTTP GET Instrumentation Code
1516    29th USENIX Security Symposium
USENIX Association