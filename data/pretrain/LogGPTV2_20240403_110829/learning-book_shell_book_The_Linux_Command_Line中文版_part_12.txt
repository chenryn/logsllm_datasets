shell在展开中执行算数表达式。这允许我们把shell提示当作计算器来使用：
[ne@linuxbox -]$echo $((2 + 2))
算术表达式展开使用这种格式：
$((expression))
（以上括号中的）表达式是指算术表达式，它由数值和算术操作符组成。
算术表达式只支持整数（全部是数字，不带小数点），但是能执行很多不同的操作。这里是
一些它支持的操作符：
操作符
说明
+
加
减
*
乘
/
除（但是记住，因为展开只是支持整数除法，所以结果是整
数
%
取余，只是简单的意味着。“余数”
84
---
## Page 86
**
取幂
表8-1：算术操作符
在算术表达式中空格并不重要，并且表达式可以嵌套。例如，5的平方乘以3：
[ne@linuxbox -]$ echo $(($((5**2))* 3))
75
一对括号可以用来把多个子表达式括起来。通过这个技术，我们可以重写上面的例子，同时
用一个展开代替两个，来得到一样的结果：
[ne@linuxbox -]$ echo $(((5**2) * 3))
75
这是一个使用除法和取余操作符的例子。注意整数除法的结果：
((Z/s))$ stenba onq fq poptatp ontg oqpa s[- xoqxmustgou]
Five divided by tvo equals 2
[ne@linuxbox -]$ echo vith $((5%2)) left over.
vith 1 left over.
在35章会更深入地讨论算术表达式的内容。
8.5
花括号展开
可能最奇怪的展开是花括号展开。通过它，你可以从一个包含花括号的模式中创建多个文本字
符串。这是一个例子：
[ne@linuxbox -]$ echo Front-{A,B,C}-Back
Front-A-Back Front-B-Back Front-C-Back
85
---
## Page 87
花括号展开模式可能包含一个开头部分叫做报头，一个结尾部分叫做附言。花括号表达式
种模式不能嵌入空白字符。这个例子中使用了一个整数区间：
[ne@linuxbox -]$ echo Nunber_(1. .5}
Munber_1 Munber_2 Kunber_3 Hunber_4 Hunber_5
倒序排列的字母区间：
[ne@linuxbox -]$ echo {(2..A}
Z Y I W VU T S R Q P O N ML K J IHG F ED C B A
花括号展开可以嵌套：
[ne@linuxbox -]$ echo a{A{1,2},B{3,4}}b
aA1b aA2b aB3b aB4b
那么这对什么有好处呢？最常见的应用是，创建一系列的文件或目录列表。例如，如果我们
是摄影师，有大量的相片。我们想把这些相片按年月先后组织起来。首先，我们要创建一系列
以数值“年一月”形式命名的目录。通过这种方式，可以使目录名按照年代顺序排列。我们可
以手动键入整个目录列表，但是工作量太大了，并且易于出错。反之，我们可以这样做：
[ne@linuxbox -]$ mkdir Pics
[ne@linuxbox -]$ cd Pics
[ne@linuxbox Pics]$ mitdir {2007. .2009}0{1. .9} {2007. .2009){10. .12}
[nedlinuxbox Pics]$ 1s
2007-01 200707 2008-01 200807 200901 2009-07
200702 200708 200802 200808 200902 200908
200703 2007-09 2008-03 200809 200903 200909
200705 200711 2008-05 200811 200905 200911
200706 200712 200806 200812 200906 2009-12
樟极了！
86
---
## Page 88
8.6参数展开
在这一章我们将会简单介绍参数展开，但会在后续章节中进行详细讨论。这个特性在shell脚
本中比直接在命令行中更有用。它的许多功能和系统存储小块数据，并给每块数据命名的能力
有关系。许多像这样的小块数据，更恰当的称呼应该是变量，可供你方使地检查它们。例如
叫做“USER”的变量包含你的用户名。可以这样做来调用参数，并查看USER中的内容。：
[ne@linuxbox -]$ echo $USER
me
要查看有效的变量列表，可以试试这个：
sso 1 auoqutad s[- xoqrnustsou]
你可能注意到在其它展开类型中，如果你误输入一个模式，展开就不会发生。这时echo命
令只简单地显示误键入的模式。但在参数展开中，如果你拼写错了一个变量名，展开仍然会进
行，只是展开的结果是一个空字符串：
[ne@linuxbox -]$ echo $SUER
[ne@linuxbox -]$
8.7命令替换
命令替换允许我们把一个命令的输出作为一个展开模式来使用：
[ne@linuxbox -]$ echo $(ls)
Desktop Documents ls-output.txt Music Pictures Public Tenplates
Videos
我最喜欢用的一行命令是像这样的：
87
---
## Page 89
(do qoq）$ t-T $[-xoqxnutoou]
rvxr=xr=x 1 root root 71516 2007-12-05 08:58 /bin/cp
这里我们把whichcp的执行结果作为一个参数传递给ls命令，因此可以在不知道cp命令
完整路径名的情况下得到它的文件属性列表。我们不只限制于简单命令。也可以使用整个管道
线（只展示部分输出）：
[ne@linuxbox -]$ file $(ls /usr/bin/* 1 grep zip)
/usr/bin/bunzip2:
symbolic link to *bzip2
在这个例子中，管道线的输出结果成为file命令的参数列表。
在旧版shell程序中，有另一种语法也支持命令替换，可与刚提到的语法轮换使用。bash也
支持这种语法。它使用倒引号来代替美元符号和括号：
d qorqx,[-s s[- xoqxnuou]
-rvxr-xr=x 1 root root 71516 2007-12-05 08:58 /bin/cp
8.8引1用
我们已经知道shell有许多方式可以完成展开，现在是时候学习怎样来控制展开了。以下面例
子来说明：
[ne@linuxbox -]$ echo this is a
test
this is a test
或者：
[ne@linuxbox -]$ echo The total is $100.00
The total is 00.00
88
---
## Page 90
在第一个例子中，shell利用单词分割删除掉echo命令的参数列表中多余的空格。在第二个
例子中，参数展开把s1的值替换为一个空字符串，因为1是没有定义的变量。shell提供了一
种叫做引用的机制，来有选择地禁止不需要的展开。
8.9双引号
我们将要看一下引用的第一种类型，双引号。如果你把文本放在双引号中，shell使用的特殊字
符，都失去它们的特殊含义，被当作普通字符来看待。有几个例外：8，\（反斜杠），和·（倒
引号）。这意味着单词分割、路径名展开、波浪线展开和花括号展开都将失效，然而参数展开、
算术展开和命令替换仍然执行。使用双引号，我们可以处理包含空格的文件名。比方说我们是
不幸的名为turowords.tzt文件的受害者。如果我们试图在命令行中使用这个文件，单词分割机
制会导致这个文件名被看作两个独自的参数，而不是所期望的单个参数：
4xsspxon ons [- sT s[- xoqxmutoou]
ls: cannot access tvo: No such file or directory
ls: cannot access vords.txt: No such file or directory
使用双引号，我们可以阻止单词分割，得到期望的结果；进一步，我们甚至可以修复破损的
文件名。
xspzon on, [-sT s[- xoqxnutou]
[ne@linuxbox -]$ mv "tvo vords.txt" tvo_words.txt
你瞧！现在我们不必一直输入那些讨厌的双引号了。
记住，在双引号中，参数展开、算术表达式展开和命令替换仍然有效：
[ne@linuxbox -]$ echo “$USER $((2+2)) $(cal)
me 4
February 2008
eS z U 0 n O nS
我们应该花费一点时间来看一下双引号在命令替换中的效果。首先仔细研究一下单词分割
是怎样工作的。在之前的范例中，我们已经看到单词分割机制是怎样来删除文本中额外空格的：
89
---
## Page 91
[ne@linuxbox -]$ echo this is atest
this is a test
在默认情况下，单词分割机制会在单词中寻找空格，制表符，和换行符，并把它们看作单词
之间的界定符。这意味着无引用的空格，制表符和换行符都不是文本的一部分，它们只作为分
隔符使用。由于它们把单词分为不同的参数，所以在上面的例子中，命令行包含一个带有四个
不同参数的命令。如果我们加上双引号：
 st stua, ooo s[- xoqrnusteou]
test"
this is a  test
单词分割被禁止，内嵌的空格也不会被当作界定符，它们成为参数的一部分。一旦加上双引
号，我们的命令行就包含一个带有一个参数的命令。
事实上，单词分割机制把换行符看作界定符，对命令替换产生了一个虽然微妙但有趣的影
响。考虑下面的例子：
[ne@linuxbox -]$ echo $(cal)
February 2008 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14
-(t)s. o s[-xoquou]
February 2008
在第一个实例中，没有引用的命令替换导致命令行包含38个参数。在第二个例子中，命令
行只有一个参数，参数中包括嵌入的空格和换行符。
8.10单引号
如果需要禁止所有的展开，我们要使用单引号。以下例子是无引用，双引号，和单引号的比较
结果：
90
---
## Page 92
[ne@linuxbox -]$ echo text -/*,txt {a,b} $(echo foo) $((2+2)) $USER
text /hone/ne/ls-output.txt a b foo 4 me
[ne@linuxbox -]$ echo *text -/+.txt {a,b} $(echo foo) $((2+2)) $USER"
text -/*.txt{a,b} foo 4 me
[ne@linuxbox -]$ echo *text -/*.txt {a,b} $(echo foo) $((2+2)) $USER
text -/*.txt{a,b} $(echo foo) $((2+2)) $USER
正如我们所看到的，随着引用程度加强，越来越多的展开被禁止。
8.11转义字符
有时候我们只想引用单个字符。我们可以在字符之前加上一个反斜杠，在这里叫做转义字符。
经常在双引号中使用转义字符，来有选择地阻止展开。
[ne@linuxbox -]$ echo *The balance for user $USER is: \$5.00*
The balance for user ne is: $5.00
使用转义字符来消除文件名中一个字符的特殊含义，是很普遍的。例如，在文件名中可能使
用一些对于shell来说有特殊含义的字符·这些字符包括“s”，”，””等字符。在文件名中包含
特殊字符，你可以这样做：
[neglinuxbox -]$ mv bad\&filenane good_filenane
为了允许反斜杠字符出现，输入“”来转义。注意在单引号中，反斜杠失去它的特殊含义
它被看作普通字符。
反斜杠转义字符序列
反斜杠除了作为转义字符外，也可以构成一种表示法，来代表某种特殊字符，这
些特殊字符叫做控制码。ASCII编码表中前32个字符被用来把命令转输到电报机
之类的设备。一些编码是众所周知的（制表符，退格符，换行符，和回车符）。而其
它一些编码就不熟悉了（空值，传输结束码，和确认）。
91
---
## Page 93
转义序列含义
{a
响铃（“警告”一导致计算机嘟嘟响）
b
退格符
\n
新的一行·在类Unix系统中，产生换行
\r
回车符
\t
制表符
上表列出了一些常见的反斜杠转义字符序列。这种利用反斜杠的表示法背后的
思想来源于C编程语言，许多其它语言也采用了这种表示方法，包括shell。
echo命令带上-e选项，能够解释转义序列。你可以把转义序列放在$里面。
以下例子中，我们可以使用sleep命令创建一个简单的倒数计数器（sleep是一个简
单的程序，它会等待指定的秒数，然后退出）：
sleep I0; echo -e "Time’s uplα"
我们也可以这样做：
S dn s,au。oqa 01 das
8.12总结归纳
随着我们继续学习shell，你会发现使用展开和引用的频率逐渐多起来，所以能够很好的理解它
们的工作方式很有意义。事实上，可以这样说，它们是学习shell的最重要的主题。如果没有
准确地理解展开模式，shell总是神秘和混乱的源泉，并且shell潜在的能力也浪费掉了。
8.13拓展阅读
·Bash手册页有主要段落是关于展开和引用的，它们以更正式的方式介绍了这些题目。
·Bash参考手册也包含章节，介绍展开和引用：
http://www.gnu.org/software/bash/manual/bashref.html
92
---
## Page 94
9
键盘高级操作技巧
开玩笑地说，我经常把Unix描远为“这个操作系统是为喜欢敲键盘的人们服务的。”当然，
Unix甚至还有一个命令行这件事证明了我所说的话。但是命令行用户不喜欢入那么多字。
要不为什么会有如此多的命令有这样简短的命令名，像cplsmv和rm？事实上，命令行最
为珍视的目标之一就是情；用最少的击键次数来完成最多的工作。另一个目标是你的手指永
远不必离开键盘，永不触摸鼠标。在这一章节，我们将看一下bash特性，这些特性使键盘使用
起来更加迅速，更加高效。
以下命令将会露面
·clear-清空屏幕
·history一显示历史列表内容
9.1命令行编辑
Bash使用了一个名为Readline的库（共享的例程集合，可以被不同的程序使用），来实现命令
行编辑。我们已经看到一些例子。我们知道，例如，箭头按键可以移动光标，此外还有许多特
性。想想这些额外的工具，我们可以在工作中使用。学会所有的特性并不重要，但许多特性非
常有帮助。选择自己需要的特性。
注意：下面一些按键组合（尤其使用Alt键的组合），可能会被GUI拦截来触发其它的功
能。当使用虚拟控制台时，所有的按键组合都应该正确地工作。
9.2移动光标
下表列出了移动光标所使用的按键：
按键
行动
Ctrl-a
移动光标到行首。
6
---
## Page 95
Ctrl-e
移动光标到行尾。
Ctrl-f