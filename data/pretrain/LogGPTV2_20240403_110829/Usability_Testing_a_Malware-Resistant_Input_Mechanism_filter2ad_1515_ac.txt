### Usability Evaluation of Bumpy Variants During the Benign Phase

To evaluate the usability of the Bumpy variants during the Benign phase, we measured the login success rate and duration, averaged over each user in each of the five groups.

#### Login Success Rate
We begin by discussing the login success rate. For a user \( u \) in the Benign phase, let \( \text{success}_{\text{Be}}(u) = \frac{|LS_{\text{Be}}(u)|}{|L_{\text{Be}}(u)|} \), where \( LS_{\text{Be}}(u) \) and \( L_{\text{Be}}(u) \) denote the successful logins and all attempted logins, respectively, by user \( u \).

The sample mean and standard deviation of the login success rates for users in group \( U_d \) (design-d users) during the Benign phase are given by:
\[
\bar{x}[\text{success}_{\text{Be}}]_d = \text{avg}_{u \in U_d} \, \text{success}_{\text{Be}}(u)
\]
\[
s[\text{success}_{\text{Be}}]_d = \text{stddev}_{u \in U_d} \, \text{success}_{\text{Be}}(u)
\]

These measures are presented in Figure 3(a). The sample mean approximates the population mean \( \mu[\text{success}_{\text{Be}}]_d \). We use Analysis of Variance (ANOVA) to determine if there are significant differences in the login success rates between different designs at a significance level of \( \alpha = 0.05 \). ANOVA revealed no significant differences, indicating that the extra steps required by our designs did not make it more difficult for users to log in successfully.

#### Login Duration
Next, we measure the login duration for each Bumpy variant, i.e., the time required by users to log into the course web page. For a login attempt \( \ell \), let \( \text{dur}(\ell) \) denote the time from the first action indicating the start of the login attempt (password field gaining focus or TM window opening) to the user clicking the "log in" button or pressing enter.

The average time required by user \( u \) to log in successfully in the Benign phase is:
\[
\text{duration}_{\text{Be}}(u) = \text{avg}_{\ell \in LS_{\text{Be}}(u)} \, \text{dur}(\ell)
\]

When computing this average, we excluded any login with a 15-second period of inactivity, considering such instances as outliers. This removed 5 out of 1650 logins in the Benign phase across all four Bumpy designs and Control.

The sample mean and standard deviation of the average successful login duration for users in \( U_d \) are:
\[
\bar{x}[\text{duration}_{\text{Be}}]_d = \text{avg}_{u \in U_d} \, \text{duration}_{\text{Be}}(u)
\]
\[
s[\text{duration}_{\text{Be}}]_d = \text{stddev}_{u \in U_d} \, \text{duration}_{\text{Be}}(u)
\]

These values are shown in Figure 3(b) for the different designs. The sample mean approximates the population mean \( \mu[\text{duration}_{\text{Be}}]_d \). We again use ANOVA to determine if there are significant differences in the login durations between different designs at a significance level of \( \alpha = 0.05 \). The results are shown in Figure 3(c).

Not surprisingly, the Control design yielded significantly faster login times than the designs that utilized a TM (Original, Graphical, Challenge), as opening and inspecting the TM requires extra steps. Additionally, the Challenge design was significantly slower than Original, Graphical, and NoTM, likely due to the additional diligence required to transcribe the challenge value from the TM into the password field. The only other significant result is that NoTM was faster than Original, which can be attributed to the absence of a TM. According to the exit questionnaire, only 2 out of 14 participants assigned to NoTM reported difficulty with remembering their SAS, suggesting that NoTM is competitive with Control in terms of login duration.

Based on the sample means in Figure 3(b), the difference between the fastest (Control) and slowest (Challenge) methods is approximately 7 seconds in a successful login attempt. While the additional delay in Challenge can be justified by its greater security, designs like NoTM offer competitive login durations and similar security benefits.

### Resilience in Attack Scenarios

In the Attack phase, users were subjected to simulated attacks, as might be carried out by malware. We used the logins conducted during this phase to infer the effectiveness of the designs (Original, Graphical, NoTM, and Challenge) in protecting the user's password.

For an attack type \( a \in \{\text{Feigned-Fail (FF)}, \text{Wrong-Dest (WD)}, \text{SAS-Present (SP)}, \text{Passive (Pa)}\} \), let \( L_{a,\text{At}}(u) \) denote the logins by user \( u \) in the Attack phase subject to attack \( a \). Let \( L_{\text{Ac,At}}(u) \cup L_{\text{WD,At}}(u) \) denote all Attack logins by \( u \) subject to an Active (Ac) attack, and let \( L_{\text{Any,At}}(u) \) denote all Attack logins by \( u \).

For any \( a \in \{\text{FF, WD, SP, Ac, Pa, Any}\} \), let:
\[
\text{avgLeaked}_{a,\text{At}}(u) = \text{avg}_{\ell \in L_{a,\text{At}}(u)} \, \frac{\text{leaked}(\ell)}{\text{pwdLen}(\ell)}
\]
\[
\text{maxLeaked}_{a,\text{At}}(u) = \text{max}_{\ell \in L_{a,\text{At}}(u)} \, \frac{\text{leaked}(\ell)}{\text{pwdLen}(\ell)}
\]

where \( \text{pwdLen}(\ell) \) denotes the password length of user \( u \) at the time of login attempt \( \ell \), and \( \text{leaked}(\ell) \) denotes the number of password characters leaked to the (simulated) malware in login \( \ell \).

The results for the various designs \( d \in \{\text{Original, Graphical, NoTM, Challenge}\} \) are shown in Figure 4. Specifically, Figure 4(a) lists:
\[
\bar{x}[\text{avgLeaked}_{a,\text{At}}]_d = \text{avg}_{u \in U_d} \, \text{avgLeaked}_{a,\text{At}}(u)
\]
\[
s[\text{avgLeaked}_{a,\text{At}}]_d = \text{stddev}_{u \in U_d} \, \text{avgLeaked}_{a,\text{At}}(u)
\]

and Figure 4(b) lists:
\[
\bar{x}[\text{maxLeaked}_{a,\text{At}}]_d = \text{avg}_{u \in U_d} \, \text{maxLeaked}_{a,\text{At}}(u)
\]
\[
s[\text{maxLeaked}_{a,\text{At}}]_d = \text{stddev}_{u \in U_d} \, \text{maxLeaked}_{a,\text{At}}(u)
\]

We use this data to test the null hypotheses \( \mu[\text{avgLeaked}_{a,\text{At}}]_d = \mu[\text{avgLeaked}_{a,\text{At}}]_e \) and \( \mu[\text{maxLeaked}_{a,\text{At}}]_d = \mu[\text{maxLeaked}_{a,\text{At}}]_e \) for designs \( d, e \in \{\text{Original, Graphical, NoTM, Challenge}\} \), \( d \neq e \), and for attack type \( a \). The hypotheses rejected at a significance level of \( \alpha = 0.05 \) are:
\[
\mu[\text{avgLeaked}_{\text{SP,At}}]_{\text{No}} \neq \mu[\text{avgLeaked}_{\text{SP,At}}]_{\text{Or}}
\]
\[
\mu[\text{maxLeaked}_{\text{SP,At}}]_{\text{No}} \neq \mu[\text{maxLeaked}_{\text{SP,At}}]_{\text{Or}}
\]
\[
\mu[\text{avgLeaked}_{\text{SP,At}}]_{\text{No}} \neq \mu[\text{avgLeaked}_{\text{SP,At}}]_{\text{Ch}}
\]
\[
\mu[\text{maxLeaked}_{\text{SP,At}}]_{\text{No}} \neq \mu[\text{maxLeaked}_{\text{SP,At}}]_{\text{Ch}}
\]

This indicates that NoTM performed significantly worse than Original and Challenge in defending against SAS-Present attacks. We believe this is because Original and Challenge provide feedback (displayed on the TM) that users expect to see before entering their passwords, which is necessary for the login process in the Challenge case.

Another observation is that the Bumpy variants improve users' abilities to protect their passwords. Current web password logins do not protect against even Passive attacks, whereas all our designs performed better, especially Graphical and Challenge, even when considering long-term monitoring by an attacker.

In the exit questionnaire, 62% of 58 (non-Control group) respondents agreed they would be happy to use this system for other websites, 14% were neutral, and 24% disagreed.

### Effects of Training for Attack Scenarios

In the Attack-and-Warn phase, users were attacked and then warned if they leaked any password characters. This provided a form of training. We tested whether this training improved users' abilities to protect their passwords.

Let \( L_{a,\text{AW}}(u) \) denote the logins by user \( u \) in the Attack-and-Warn phase categorized as attack type \( a \in \{\text{Passive, Feigned-Fail, Wrong-Dest, SAS-Present}\} \). We define two subsets of these logins: those before the first warning (\( B_{a,\text{AW}}(u) \)) and those after the first warning (\( A_{a,\text{AW}}(u) \)).

The login attempt that caused the first warning for attack \( a \) to be presented to \( u \) is defined to be in \( B_{a,\text{AW}}(u) \). If \( u \) received no warnings for attack \( a \), both \( B_{a,\text{AW}}(u) \) and \( A_{a,\text{AW}}(u) \) are empty.

We define these sets for the Active and Any attacks in the natural way:
\[
L_{\text{Ac,AW}}(u) = B_{\text{Ac,AW}}(u) \cup A_{\text{Ac,AW}}(u)
\]
\[
L_{\text{Any,AW}}(u) = B_{\text{Pa,AW}}(u) \cup B_{\text{SP,AW}}(u) \cup L_{\text{Ac,AW}}(u)
\]

Our tests show that training via warnings in the Attack-and-Warn phase was effective in reducing password leakage in most cases.