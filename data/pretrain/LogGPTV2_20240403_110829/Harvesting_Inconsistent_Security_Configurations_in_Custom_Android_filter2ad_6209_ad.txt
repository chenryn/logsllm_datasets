entities to ﬁx some discovered bugs (e.g. adding a per-
mission requirement to a privileged service). However,
we found out that through newer OS releases, certain se-
curity features are actually downgraded, leading to po-
tential risks if done unintentionally. We discuss this ﬁnd-
ing in more details in Section 6.6.
Through the Cross-Vendor analysis (A2), DroidDiff
detects that several security features are inconsistent
among vendors, even though they are of the same OS ver-
sion. We have further analyzed the vendors that cause the
highest number of inconsistencies. An interesting obser-
vation is that smaller vendors, such as BLU, Xiaomi and
Digiland caused several risky inconsistencies.
In fact,
all inconsistent GIDs are caused by these 3 companies.
Probably, small vendors may not have enough expertises
to fully evaluate the security implications of their actions.
The Cross-Model analysis (A3) also detects a num-
ber of inconsistencies, which means that different de-
vice models from the same vendor and OS version, might
have different security conﬁgurations.
Although the Cross-Carrier (A4) and Cross-Region
(A5) analyses detect a smaller percentage of inconsis-
tencies, it is still signiﬁcant to know that the same device
model running the same OS version might have some
different conﬁgurations if it is customized for different
carriers or regions. Our results shows that the inconsis-
tencies are less common in North America region, and
more prevalent in Chinese editions.
6.2 Permissions Changes Pattern
Protection level mismatch. DroidDiff results conﬁrm
that Android permissions may hold different protection
levels across similar images. As Figure 3 illustrates,
more than 50% of the candidate image sets contain at
least 32 (out of 673), 9 (out of 817) permissions having
inconsistent protection levels in the Cross-Version (A1)
and Cross-Model (A3) analyses, respectively. To reveal
1160  25th USENIX Security Symposium 
USENIX Association
A1: Cross-Version, A2: Cross-Vendor, A3: Cross-Model, A4: Cross-Carrier, A5: Cross-Region
Figure 3: Overall Inconsistencies Detected
more insights, we checked which combination of protec-
tion level changes are the most common. That is, which
combination out of the following 3 possible combina-
tions is the most common (Normal, Dangerous), (Normal,
Signature) or (Dangerous, Signature). We have calcu-
lated the occurrence of each pattern, and present the re-
sults in Figure 4. As shown, (Normal, Signature) combi-
nation is the most common pattern. This is quite serious
as several permissions that hold a Signature protection
level on some images are deﬁned with a Normal protec-
tion level on others. We present here two permissions
holding inconsistent protection levels:
• com.orange.permission.SIMCARD_AUTHENTICATION
holds Signature and Normal protection on Sam-
sung S4(4.2.2) and Sony Experia C2105 (4.2.2),
respectively.
• com.sec.android.app.sysscope.permission.RUN_
SYSSCOPE holds Dangerous and Signature protec-
tion on Samsung Note4 (5.0.1) and S4(5.0.1).
Usage of unspeciﬁed protection level. Android allows
developers to deﬁne a permission without specifying a
protection level, in which case, the default protection
level is Normal.
In our investigation, we found that it
is not clear whether developers really intended to use
Normal as the protection level. We found that a large
percentage of these permissions (with unspeciﬁed pro-
tection level) hold conﬂicting protections on other im-
ages. Overall, 2% of the permissions studied were de-
ﬁned without a speciﬁed protection level in at least one
image. To check if developers intended to use Normal
as the protection level, for each permission that has been
deﬁned without a protection level, we check its corre-
sponding deﬁnitions on other images to see if it has a
protection level speciﬁed. We then compare the other
speciﬁcation to see it it is Normal or not. As Figure 5(a)
illustrates, on average, 91% of these permissions holding
(cid:13)(cid:16)(cid:1)
(cid:5)(cid:10)(cid:16)(cid:1)
(cid:5)(cid:7)(cid:16)(cid:1)
Vendor 
(cid:9)(cid:4)(cid:16)(cid:1)
(cid:8)(cid:5)(cid:16)(cid:1)
Model 
(cid:11)(cid:5)(cid:16)(cid:1)
(cid:5)(cid:11)(cid:16)(cid:1)
(cid:7)(cid:12)(cid:16)(cid:1)
Version 
(cid:8)(cid:9)(cid:16)(cid:1)
(cid:6)(cid:7)(cid:16)(cid:1)
(cid:5)(cid:8)(cid:16)(cid:1)
Carrier 
(cid:6)(cid:16)(cid:1)
(cid:6)(cid:7)(cid:16)(cid:1)
Region 
(cid:18)(cid:3)(cid:12)(cid:13)(cid:10)(cid:5)(cid:9)(cid:17)(cid:1)(cid:2)(cid:5)(cid:11)(cid:7)(cid:6)(cid:13)(cid:12)(cid:16)(cid:14)(cid:19)(cid:1)
(cid:18)(cid:3)(cid:12)(cid:13)(cid:10)(cid:5)(cid:9)(cid:17)(cid:1)(cid:4)(cid:8)(cid:7)(cid:11)(cid:5)(cid:15)(cid:16)(cid:13)(cid:6)(cid:19)(cid:1)
(cid:18)(cid:2)(cid:5)(cid:11)(cid:7)(cid:6)(cid:13)(cid:12)(cid:16)(cid:14)(cid:17)(cid:1)(cid:4)(cid:8)(cid:7)(cid:11)(cid:5)(cid:15)(cid:16)(cid:13)(cid:6)(cid:19)(cid:1)
(cid:10)(cid:7)(cid:16)(cid:1)
(cid:11)(cid:9)(cid:16)(cid:1)
Figure 4: Protection Level Changes Patterns
unspeciﬁed protection level hold a Signature protection
on at least 1 other image, which indicates that developers
probably intended to use the Signature protection level.
We illustrate this ﬁnding with 2 permissions:
• com.sec.android.phone.permission.UPDATE_
MUTE_STATUS holds Unspecified and Signature
protections on Samsung E7 (5.1.1) and S6
Edge(5.1.1), respectively.
• com.android.chrome.PRERENDER_URL
holds
Unspecified and Signature protections on LG
Vista (4.4.2) and Nexus7 (4.4.2), respectively.
6.3 Permission-GID Mapping
By analyzing the differential analysis results of the map-
pings between GIDs and permissions, we have con-
ﬁrmed that customization introduces problematic GID-
to-permission mappings that can lead to serious vul-
nerabilities in the victim images. Through the Cross-
Vendor analysis (A2), DroidDiff detects 3 inconsis-
tent cases (out of 25 common GIDs), in which ven-
dors mapped less privileged permissions to privileged
GIDs.
This dangerous pattern leads to downgrad-
USENIX Association  
25th USENIX Security Symposium  1161
(cid:3)(cid:8)(cid:1)
(cid:4)(cid:8)(cid:1)
(cid:5)(cid:2)(cid:8)(cid:1)
(cid:19)(cid:4)(cid:13)(cid:14)(cid:11)(cid:6)(cid:10)(cid:18)(cid:1)(cid:3)(cid:9)(cid:15)(cid:15)(cid:9)(cid:12)(cid:8)(cid:20)(cid:1)
(cid:19)(cid:2)(cid:6)(cid:12)(cid:8)(cid:7)(cid:14)(cid:13)(cid:17)(cid:15)(cid:18)(cid:1)(cid:3)(cid:9)(cid:15)(cid:15)(cid:9)(cid:12)(cid:8)(cid:20)(cid:1)
(cid:19)(cid:5)(cid:9)(cid:8)(cid:12)(cid:6)(cid:16)(cid:17)(cid:14)(cid:7)(cid:18)(cid:1)(cid:3)(cid:9)(cid:15)(cid:15)(cid:9)(cid:12)(cid:8)(cid:20)(cid:1)
(a) Unspeciﬁed Protection Level Change
Patterns
(cid:7)(cid:10)(cid:1)
(cid:5)(cid:3)(cid:10)(cid:1)
(cid:6)(cid:4)(cid:10)(cid:1)
(cid:2)(cid:7)(cid:8)(cid:11)(cid:7)(cid:6)(cid:1)
(cid:3)(cid:10)(cid:13)(cid:13)(cid:10)(cid:11)(cid:9)(cid:1)(cid:15)(cid:1)(cid:4)(cid:12)(cid:14)(cid:1)(cid:5)(cid:13)(cid:7)(cid:6)(cid:1)
(cid:3)(cid:10)(cid:13)(cid:13)(cid:10)(cid:11)(cid:9)(cid:1)(cid:15)(cid:1)(cid:5)(cid:13)(cid:7)(cid:6)(cid:1)
(cid:5)(cid:3)(cid:9)(cid:1)
(cid:4)(cid:3)(cid:9)(cid:1)
(cid:6)(cid:3)(cid:9)(cid:1)
(cid:4)(cid:19)(cid:18)(cid:21)(cid:10)(cid:8)(cid:22)(cid:18)(cid:17)(cid:1)(cid:5)(cid:10)(cid:16)(cid:18)(cid:24)(cid:7)(cid:15)(cid:1)
(cid:6)(cid:17)(cid:9)(cid:10)(cid:11)(cid:17)(cid:10)(cid:9)(cid:1)(cid:4)(cid:10)(cid:19)(cid:16)(cid:14)(cid:20)(cid:20)(cid:14)(cid:18)(cid:17)(cid:20)(cid:1)
(cid:4)(cid:10)(cid:19)(cid:16)(cid:14)(cid:20)(cid:20)(cid:14)(cid:18)(cid:17)(cid:1)(cid:3)(cid:10)(cid:24)(cid:10)(cid:15)(cid:1)(cid:2)(cid:13)(cid:7)(cid:17)(cid:12)(cid:10)(cid:1)
(b) Protected Broadcast Inconsisten-
cies
Figure 5: Inconsistency Breakdown
(c) Causes of Components Protection Mis-
match
ing the protection level of these GIDs. We illustrate
this ﬁnding with one detected example. On AOSP
images and several customized images (running 4.4.4
and below), camera GID is mapped to a Dangerous
level permission (android.permission.CAMERA). How-
ever, on Neo 4.5 (BLU), we found out
the
same GID is mapped to a Normal level permission:
android.permission.ACCESS_MTK_MMHW. This case indi-
cates that BLU has downgraded the requirement for apps
to obtain the camera GID. Our analysis reveals that the
requirements for two more GIDs, system GID and media
GID, have been downgraded. These two GIDs, protected
by a Signature permission on most devices, can be ac-
quired with a Normal permission on the victim devices.
that
6.4 Protected Broadcasts Changes Pattern
DroidDiff further reveals that protected broadcasts’ def-
initions might be removed from some images during the
customization process. As illustrated in Figure 5(b),
through the Cross-Version analysis (A1), we detected
that 70% of protected broadcast are not deﬁned on at
least one vendor. This might not necessarily be prob-
lematic if the broadcast is not used. However, our in-
vestigation shows that around 9% of these inconsistently
unprotected broadcasts (28 on average per image set) are
used as intent-ﬁlters actions for broadcast receivers. This
inconsistency across versions is quite alarming as a priv-
ileged receiver that was supposed to be invoked by sys-
tem processes can be invoked by any unprivileged app on
certain versions. As Figure 3 further illustrates, Cross-
Vendor (A2) and Cross-Model (A3) analyses reveal that
more than 25% of candidate image sets contain at least
2% broadcasts which are inconsistently protected, but
still being used as intent-ﬁlter actions.
6.5 Component Security Changes Pattern
Visibility mismatch. DroidDiff results conﬁrm that
app components may have a conﬂicting visibility. That
is, the component is exposed on one image but not on an-
other. As Figure 3 illustrates, 50% of the candidate im-
age sets contain at least 3.9% components (around 222)
and 2% (133) holding inconsistent visibility through var-
ious versions (A1) and models (A3), respectively. To
provide insights about which components hold more
visibility inconsistencies, we break down our ﬁndings
to activities, services, receivers, and content providers.
We plot the results in Figure 6. As depicted, content
providers and activities have the highest visibility mis-
match. In fact, 25% of the candidate image sets contain
at least 20% (53) and 14% (21) content providers hold-
ing a different visibility in different versions (A1) and
vendors (A2), respectively. Similarly, 4% (139) and 3%
(45) of activities hold a conﬂicting visibility in 50% of
the studied sets based on A1 and A2, respectively.
Permission mismatch. DroidDiff further reveals that
components may hold inconsistent protections across im-
ages. We break down our ﬁndings in Figure 8 (see ap-
pendix). Our results show that content providers ex-
hibit the highest number of protection inconsistencies. In
fact, more than 25% of the candidate images sets include
at least 19% (51) and 10% (33) content providers hav-
ing different protections in the Cross-Version (A1) and
Cross-Model (A3) analyses, respectively. We have fur-
ther analyzed these inconsistent components and catego-
rized the reason behind the discrepancies. As Figure 5(c)
illustrates, in the majority of the cases (60%), the dis-
crepancy is caused by the same component being pro-
tected with a permission on one image, but not protected
at all on others. The second common reason (30%) is that
the same component is protected with permissions hold-
ing different protection levels across the studied images.
Using non-deﬁned permissions to protect a component is
third common reason (10%).
Duplicate components declaration. Based on our
analysis of the inconsistent broadcast receivers (partic-
ularly high on Lollipop images), we found out that most
of them are caused by a non-safe practice that developers
follow. Developers declare duplicate broadcast receivers
names in the same app, but assign them different pro-
tections. After further investigation, we found out that
it is not a safe practice to do as it will be possible to
bypass any restrictions put on the ﬁrst deﬁned receiver.
To illustrate, consider the following receivers, deﬁned in
Samsung’s preloaded PhoneErrorService app:
1162  25th USENIX Security Symposium 
USENIX Association
Figure 6: Breaking Down Components: Visibility Mismatch
...
android:name="DATA_ROUTER_DISPLAY"/>
In the above code,
the developer decided to pro-
tect the functionality triggered when receiving the ac-
tion REFRESH_RESET_FAIL with the permission REBOOT
(Signature level).
In the other case, she decided not
to require any permissions when invoking the function-
ality triggered by the action DATA_ROUTER_DISPLAY. At
ﬁrst glance, the above duplicate components declaration
might look ﬁne. However, we found out that the Pack-
ageManagerService does not carefully handle the regis-
tration of duplicate receivers. On one hand, it correctly
handles mapping each ﬁlter to the required permission,
used for implicit intents routing (e.i., sending the action
REFRESH_RESET_FAIL requires REBOOT permission, while
sending DATA_ROUTER_DISPLAY does not require any per-
mission). On the other hand, however, it does not cor-
rectly map each component name to the required per-
mission, used for explicit intents routing (e.i., the ﬁrst
PhoneErrorReceiver should require REBOOT while the
second one should not). In fact, it turns out that the sec-
ond declaration of the component name replaces the ﬁrst
one. Thus, any protection requirement on the second re-
ceiver would replace the ﬁrst receiver’s permission re-
quirement in case of explicit invocation. Consequently, in
the above example, invoking PhoneErrorReceiver ex-
plicitly does not require any permission. The explicit in-
(cid:33)(cid:32)(cid:32)(cid:44)(cid:1)