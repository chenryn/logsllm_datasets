### 优化后的文本

#### 6.1 安全特性的一致性分析
在跨版本分析（A1）中，我们发现某些实体修复了一些已知漏洞（例如为特权服务添加权限要求）。然而，通过新的操作系统版本发布，某些安全特性实际上被降级了，这可能导致无意中的潜在风险。我们在第6.6节详细讨论这一发现。

通过跨厂商分析（A2），DroidDiff检测到即使是相同操作系统版本的不同厂商之间，某些安全特性也存在不一致性。我们进一步分析了导致最多不一致性的厂商。一个有趣的观察是，较小的厂商如BLU、小米和迪吉兰德造成了多个高风险的不一致性。事实上，所有不一致的GID都是由这三家公司引起的。可能的原因是小厂商缺乏足够的专业知识来全面评估其操作的安全影响。

跨型号分析（A3）同样检测到了一些不一致性，这意味着同一厂商和同一操作系统版本的不同设备型号可能具有不同的安全配置。虽然跨运营商（A4）和跨区域（A5）分析检测到的不一致性比例较小，但仍然值得注意的是，同一设备型号在同一操作系统版本下，如果针对不同运营商或地区进行定制，可能会有不同的配置。我们的结果显示，在北美地区的不一致性较少见，而在中文版中更为普遍。

#### 6.2 权限变更模式
**保护级别不匹配**：DroidDiff的结果确认了Android权限在相似镜像之间可能存在不同的保护级别。如图3所示，在跨版本（A1）和跨型号（A3）分析中，超过50%的候选镜像集至少有32个（共673个）和9个（共817个）权限具有不一致的保护级别。为了揭示更多见解，我们检查了最常见的保护级别变化组合，即以下三种组合中哪一种最常见：(Normal, Dangerous)、(Normal, Signature) 或 (Dangerous, Signature)。我们计算了每种模式的发生频率，并在图4中展示了结果。结果显示，(Normal, Signature) 组合是最常见的模式。这是相当严重的问题，因为某些权限在一个镜像上具有Signature保护级别，而在另一个镜像上却定义为Normal保护级别。以下是两个具有不一致保护级别的权限示例：
- `com.orange.permission.SIMCARD_AUTHENTICATION` 在三星S4（4.2.2）上具有Signature保护级别，而在索尼Experia C2105（4.2.2）上具有Normal保护级别。
- `com.sec.android.app.sysscope.permission.RUN_SYSSCOPE` 在三星Note4（5.0.1）上具有Dangerous保护级别，而在S4（5.0.1）上具有Signature保护级别。

**未指定保护级别**：Android允许开发者定义权限而不指定保护级别，默认情况下保护级别为Normal。在我们的调查中，我们发现开发者是否真的意图使用Normal作为保护级别并不明确。我们发现大量这些未指定保护级别的权限在其他镜像上具有冲突的保护级别。总体而言，2%的权限在至少一个镜像中未指定保护级别。为了检查开发者是否意图使用Normal作为保护级别，我们对每个未指定保护级别的权限检查其在其他镜像上的相应定义，以查看是否指定了保护级别。然后比较其他指定是否为Normal。如图5(a)所示，平均而言，91%的这些权限在至少一个其他镜像上具有Signature保护级别，这表明开发者可能意图使用Signature保护级别。以下是两个示例：
- `com.sec.android.phone.permission.UPDATE_MUTE_STATUS` 在三星E7（5.1.1）上未指定保护级别，而在S6 Edge（5.1.1）上具有Signature保护级别。
- `com.android.chrome.PRERENDER_URL` 在LG Vista（4.4.2）上未指定保护级别，而在Nexus7（4.4.2）上具有Signature保护级别。

#### 6.3 权限-GID映射
通过对GID与权限之间的映射进行差异分析，我们确认了定制化引入了问题性的GID-to-permission映射，这可能导致严重的漏洞。通过跨厂商分析（A2），DroidDiff检测到3个不一致的情况（共25个常见GID），其中厂商将较低权限的权限映射到特权GID。这种危险模式会导致这些GID的保护级别降级。我们用一个检测到的例子来说明这一发现。在AOSP镜像和几个定制化镜像（运行4.4.4及以下版本）上，camera GID映射到一个Dangerous级别的权限（`android.permission.CAMERA`）。然而，在Neo 4.5（BLU）上，我们发现相同的GID映射到一个Normal级别的权限：`android.permission.ACCESS_MTK_MMHW`。这种情况表明BLU降低了应用程序获取camera GID的要求。我们的分析还显示，system GID和media GID的要求也被降级。这两个GID在大多数设备上受Signature权限保护，但在受影响的设备上只需Normal权限即可获得。

#### 6.4 受保护广播的变化模式
DroidDiff进一步揭示了在定制过程中某些受保护广播的定义可能从某些镜像中被移除。如图5(b)所示，通过跨版本分析（A1），我们检测到70%的受保护广播在至少一个厂商中未定义。如果该广播未被使用，则不一定存在问题。然而，我们的调查显示，大约9%的这些不一致的未受保护广播（平均每组镜像28个）被用作广播接收器的intent-filter动作。这种跨版本的不一致性非常令人担忧，因为原本应由系统进程调用的特权接收器可能在某些版本上被任何非特权应用程序调用。如图3进一步所示，跨厂商（A2）和跨型号（A3）分析显示，超过25%的候选镜像集中至少有2%的广播不一致地受保护，但仍被用作intent-filter动作。

#### 6.5 组件安全性变化模式
**可见性不匹配**：DroidDiff的结果确认了应用组件可能具有冲突的可见性。也就是说，某个组件在一个镜像中暴露，而在另一个镜像中则不暴露。如图3所示，50%的候选镜像集中至少有3.9%的组件（约222个）和2%（133个）在各种版本（A1）和型号（A3）中具有不一致的可见性。为了提供更多关于哪些组件具有更多可见性不一致的见解，我们将发现分解为活动、服务、接收器和内容提供者。我们在图6中绘制了结果。如图所示，内容提供者和活动具有最高的可见性不匹配。事实上，25%的候选镜像集中至少有20%（53个）和14%（21个）的内容提供者在不同版本（A1）和厂商（A2）中具有不同的可见性。类似地，基于A1和A2，分别有4%（139个）和3%（45个）的活动在50%的研究集合中具有冲突的可见性。

**权限不匹配**：DroidDiff进一步揭示了组件在不同镜像之间可能具有不一致的保护。我们在附录的图8中分解了我们的发现。结果显示，内容提供者表现出最高数量的保护不一致性。事实上，超过25%的候选镜像集中至少有19%（51个）和10%（33个）的内容提供者在跨版本（A1）和跨型号（A3）分析中具有不同的保护。我们进一步分析了这些不一致的组件，并对其背后的原因进行了分类。如图5(c)所示，在大多数情况下（60%），不一致的原因是同一个组件在一个镜像中受到权限保护，而在其他镜像中完全不受保护。第二个常见原因（30%）是同一个组件在研究的镜像中受到不同保护级别的权限保护。使用未定义的权限来保护组件是第三个常见原因（10%）。

**重复组件声明**：根据我们对不一致广播接收器的分析（特别是在Lollipop镜像中尤为突出），我们发现大多数情况是由开发人员采用的一种不安全的做法造成的。开发人员在同一应用程序中声明重复的广播接收器名称，但为其分配不同的保护。经过进一步调查，我们发现这样做是不安全的，因为可以绕过对第一个定义的接收器施加的任何限制。例如，考虑三星预装的PhoneErrorService应用程序中定义的以下接收器：

```xml
<receiver android:name="PhoneErrorReceiver">
    <intent-filter>
        <action android:name="REFRESH_RESET_FAIL"/>
        <action android:name="DATA_ROUTER_DISPLAY"/>
    </intent-filter>
</receiver>
```

在上述代码中，开发人员决定在接收到`REFRESH_RESET_FAIL`动作时，使用`REBOOT`（Signature级别）权限来保护触发的功能。在另一种情况下，她决定在调用`DATA_ROUTER_DISPLAY`动作触发的功能时不需任何权限。乍一看，这种重复组件声明似乎没有问题。然而，我们发现PackageManagerService在处理重复接收器注册时并不谨慎。一方面，它正确地将每个过滤器映射到所需的权限，用于隐式意图路由（例如，发送`REFRESH_RESET_FAIL`动作需要`REBOOT`权限，而发送`DATA_ROUTER_DISPLAY`不需要任何权限）。另一方面，它却没有正确地将每个组件名称映射到所需的权限，用于显式意图路由（例如，第一个`PhoneErrorReceiver`应该需要`REBOOT`权限，而第二个不应该需要任何权限）。实际上，第二次声明的组件名称会替换第一次声明的名称。因此，对第二个接收器的任何保护要求会替换第一个接收器的权限要求。因此，在上述示例中，显式调用`PhoneErrorReceiver`不需要任何权限。