title:Identifying Cross-origin Resource Status Using Application Cache
author:Sangho Lee and
Hyungsub Kim and
Jong Kim
Identifying Cross-origin Resource Status Using
Application Cache
Sangho Lee, Hyungsub Kim, and Jong Kim
Department of Computer Science and Engineering
{sangho2, hyungsubkim, jkim}@postech.ac.kr
POSTECH, Korea
Abstract—HTML5 Application Cache (AppCache) allows web
applications to cache their same- and cross-origin resources in
the local storage of a web browser to enable ofﬂine access.
However, cross-origin resource caching in AppCache has potential
security and privacy problems. In this paper, we consider a novel
web privacy attack that exploits cross-origin AppCache. Our
attack allows a remote web attacker to exploit a victim web
browser to exactly identify the status of target URLs: existence,
redirection, or error. Especially, our attack can be performed
without using client-side scripts, can concurrently identify the
status of multiple URLs, and can exactly identify the redirections
of target URLs. We further demonstrate advanced attacks that
leverage the basic attack to de-anonymize and ﬁngerprint victims.
First, we determine the login status of a victim web browser by
identifying URL redirections or errors due to absent or erroneous
login information. Second, we probe internal web servers located
in the local network of a victim web browser by identifying URL
existence. We also suggest an effective countermeasure to mitigate
the proposed attacks.
I.
INTRODUCTION
The Web has become the most popular distributed appli-
cation platform due to its high cross-platform compatibility.
Users can launch a web application on any web browser in any
platform without modiﬁcation or with negligible modiﬁcation.
Therefore, many applications, including email, calendars, word
processors, and spreadsheets, are being implemented as web
applications.
However,
the Web’s popularity has made it
the most
valuable attack target, so that users demand an in-depth
security analysis of the Web to prevent attacks before they
rapidly spread. Numerous researchers have considered various
web attacks, such as clickjacking [16], cross-site scripting
(XSS) [33], cross-site request forgery (CSRF) [4], and domain
name system (DNS) rebinding [18], that attackers can exploit
to steal sensitive information or to make proﬁts. Despite the
best efforts of researchers to reduce such security and privacy
problems, unrevealed security threats probably still remain
in web applications and web browsers due to undiscovered
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23027
software vulnerabilities and problematic speciﬁcations. Con-
sequently, researchers should detect and remove new vulnera-
bilities before attackers recognize and widely abuse them.
In this paper, we demonstrate a new web privacy attack that
exploits security ﬂaws of an HTML5 functionality, Application
Cache (AppCache) [14]. AppCache allows web applications
to cache resources in the local storage of a web browser to
enable ofﬂine access to them. However, we discover security
problems, side channels, of AppCache due to its cross-origin
resource caching. By exploiting the security problems, a web
attacker [2], who serves a malicious web application, can
exploit a victim web browser to correctly identify the status
of a target URL, such as whether the URL exists, whether the
URL redirects the browser to another web page, or whether
the URL returns an error code to the browser, without using
error-prone timing information [9]. We name the attack a URL
status identiﬁcation attack.
We further describe advanced attacks that leverage the URL
status identiﬁcation attack. First, we can determine the login
status of a victim web browser. Many web applications have
web pages that (1) redirect a browser to a login page if the
browser has no login information or (2) return an error code to
a browser if the browser has erroneous login information [5],
[6], [23]. By using such web pages, an attacker can identify
which web sites a victim frequently visits and which web
pages a victim is authorized to access. When an attacker can
determine whether a victim is allowed to access web sites
or web pages for speciﬁc companies, universities, regions, or
groups, the attacker can de-anonymize the victim [34] and
perform context-aware phishing [20].
Second, we can probe internal web servers located in the
local network of a victim web browser. By using the URL
status identiﬁcation attack, an attacker can probe any URL
including an internal URL. Probing internal URLs allows an at-
tacker to probe networked devices (or things) in a victim’s local
network, such as routers, network printers, network-attached
storage (NAS), smart TVs, and smart thermostats [10], [11],
[24], [26]. Thus, the attacker can ﬁngerprint the victim and
can conduct succeeding attacks (e.g., DNS rebinding [18] and
router reconﬁguration [30]). The danger of internal web server
probing will increase as the Internet of Things (IoT) becomes
popular.
Our attack has three distinguishable features. First of all,
our attack can obtain sensitive information without using
client-side scripts nor plug-ins. Rather, it only uses an HTML
document that declares an AppCache manifest which speciﬁes
TABLE I.
TARGET WEB BROWSERS.
Browser
Chrome
Firefox
Internet Explorer
Opera
Safari
Version
34
29
11
21
7
a target URL. Conventional security tools (e.g., NoScript [28])
usually disable or limit execution of suspicious client-side
scripts and plug-ins, because most web attacks exploit client-
side malicious scripts. However, such tools cannot protect user
privacy from our attack because it leverages neither client-side
scripts nor plug-ins. Some researchers have already considered
scriptless attacks [12], [17], [27], but all of them rely on
cascading style sheets (CSS) unlike our attack.
Second, our attack can concurrently identify the status of
multiple target URLs. Attackers aim to develop a fast attack
because they cannot guarantee that a victim spends a long time
in their attack pages, so they have to obtain the victim’s secrets
as quickly as possible and as much as possible. However,
conventional timing-based web privacy attacks [5], [9]–[11],
[19], [21], [23], [24], [26], [27] cannot simultaneously infer the
status of multiple URLs because concurrent network requests
lead to timing errors. In contrast, our attack can identify the
status of a target URL without
thereby inspecting
timing,
multiple URLs concurrently (Section IV).
Third, our attack can correctly recognize whether a URL
redirection occurs when a victim web browser visits a target
URL, namely, it violates the requirement of atomic HTTP
redirect handling [31]. To infer the status of a target URL,
conventional attacks [5], [6], [10], [11], [24], [26] load the
target URL via some tags (e.g., img, script, and link)
and check when or whether onload or onerror events
occur. Such tags transparently follow URL redirections for
the atomic HTTP redirect handling, so that attackers cannot
accurately recognize whether redirections occur. Therefore,
identifying whether a URL redirection occurs and determining
a login status according to a conditional URL redirection
(Section V-A) are only exact with our attack.
We launched our attack on the recent versions of ﬁve major
web browsers at the time of writing this paper, and conﬁrmed
that all web browsers which strictly followed the AppCache
standard were vulnerable to our attack (Table I). One exception
was Safari because it did not properly follow the up-to-date
standard (Section III-D1). We reported our ﬁndings to Mozilla
and Google, and they agreed that our attack could breach user
privacy.
Our work makes the following contributions:
•
Novel attack. To the best of our knowledge, this is the
ﬁrst in-depth study of AppCache security problems.
All major web browsers that correctly implement Ap-
pCache suffer from the discovered problems. Although
other researchers have considered AppCache poison-
ing [25] and AppCache-based DNS rebinding [22],
they exploit not the security problem of AppCache
but the security problem of DNS and networks. Thus,
their studies differ from ours.
Strong attack. Our attack can be performed without
•
client-side scripts nor plug-ins, can simultaneously
identify the status of multiple URLs, and can correctly
identify the redirection of a target URL. These features
make our attack difﬁcult to defend, extend its attack
coverage, and increase its performance, respectively.
Effective countermeasure. We propose a counter-
measure to mitigate our attack: a Cache-Origin
request-header ﬁeld. The countermeasure is essential
to mitigate all of the security attacks that this work
explores.
•
The remainder of this paper is organized as follows. Sec-
tion II explains conventional cross-origin web privacy attacks.
Section III introduces the HTML5 AppCache. Section IV de-
scribes a URL status identiﬁcation attack based on AppCache.
Section V demonstrates advanced attacks to determine a login
status and probe internal web servers by using the URL status
identiﬁcation attack. Section VI discusses countermeasures
against our attacks. Section VII presents related work. Lastly,
Section VIII concludes this work. In addition, we describe an
AppCache-based URL timing attack in Appendix.
II. CROSS-ORIGIN WEB PRIVACY ATTACKS
In this section, we brieﬂy explain conventional cross-origin
web privacy attacks. We mainly focus on attacks that rely
inevitable. We
on timing channels that are unreliable but
introduce attack examples to infer browsing history,
login
status, and internal web servers.
A. Attack Model
The model of the cross-origin web privacy attack resembles
that of CSRF attacks [4]. In the cross-origin web privacy
attack, an attacker aims to obtain sensitive information of
a victim web browser relevant to a target web application
by convincing the victim web browser to visit an attacker’s
web site, which serves slightly malicious web pages. The
malicious web pages contain no exploit codes to take control
of the victim web browser or to inject malicious scripts into
the target web application. Instead, the web pages contain
legitimate HTML codes and scripts to include cross-origin
content while measuring fetch latency to obtain side-channel
information, such as the browsing history and login status of
the victim web browser. Therefore, it is difﬁcult to determine
the maliciousness of the web site.
B. Cross-origin Content Inclusion
HTML has various methods of including cross-origin con-
tent. We brieﬂy explain and compare them.
1) Speciﬁc content inclusion: HTML provides tags (e.g.,
img, script, and link) to embed speciﬁc types of same-
or cross-origin content in a web page, such as images, scripts,
and CSSs. The tags successfully include a URL that indicates
a valid resource with a matched content type. But, the tags fail
to include a URL when the URL is invalid (e.g., connection
failure, non-existent resource, and unauthorized access) or the
URL indicates a resource with an unmatched content type.
Finally, web browsers call either the onload or onerror
event handlers according to successful or unsuccessful content
inclusion via the tags.
2
Although the main purpose of the explained tags is to
include content with speciﬁc types, attackers can abuse the
tags to obtain side-channel information by including arbitrary
content and checking an error status while measuring latency.
Web browsers cannot determine the content type of a URL
until they receive an actual resource, so they send a normal
GET request to a web application to fetch the resource. When
the content type of the received resource differs from the tag
type, the web browsers abort the content inclusion and ﬁre an
error event. However, attackers can infer the status of a URL
from its fetch latency because the latency varies for various
reasons, such as whether the browsers have previously visited
the URL, whether the browsers are logged in, and whether the
URL exists. Attackers can thereby guess sensitive information
by using information implied by the varied fetch latency.
2) Arbitrary content inclusion: HTML provides tags (e.g.,
frame, iframe, object, and embed) to embed arbitrary
content in a web page. The main purpose of the frame and
iframe tags is to embed other HTML documents, and the
main purpose of the object and embed tags is to embed
multimedia, such as audio, video, and PDF ﬁles. The tags only
support the onload event handler, so that attackers should
guess the status of a URL by measuring how much time a
web browser spends before ﬁring an onload event.
However, the preceding tags are unsuitable for performing
web privacy attacks due to two shortcomings. First, the fetch
latency is unpredictable because the tags try to receive all
resources (e.g., images, scripts, and CSSs) that compose a
web page before rendering the resources. This procedure
adds a high amount of noise to the time measurement [5].
Second, to avoid security problems (e.g., clickjacking [16]
on login pages), many modern web applications do not al-
low web browsers to load their web pages in such tags.
The web applications use an HTTP response-header ﬁeld
X-Frame-Options or a frame busting code [29] to prevent
such content inclusion. Therefore, the HTML tags for arbitrary
content inclusion are unsuitable for performing web privacy
attacks.
C. Inferring Login Status
We explain a timing attack that uses variance in fetch
latency to infer the login status of a victim web browser [5]. An
attacker can reveal the real identity of a victim web browser’s
user according to which web sites the user is frequently logged
in. When a web browser accesses the front pages of web
applications, many of them provide different web pages to the
browser according to the login status. They usually redirect
a logged-in browser to a personalized web page,
thereby
introducing additional network delay. Malicious web pages