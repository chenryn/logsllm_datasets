### 1.5.7 内存管理

#### 代码示例
```c
#include <stdio.h>
#include <unistd.h>

void main() {
    void *curr_brk, *tmp_brk, *pre_brk;
    
    printf("当前进程 PID：%d\n", getpid());
    tmp_brk = curr_brk = sbrk(0);
    printf("初始化后的结束地址：%p\n", curr_brk);
    getchar();

    brk(curr_brk + 4096);
    curr_brk = sbrk(0);
    printf("brk 之后的结束地址：%p\n", curr_brk);
    getchar();

    pre_brk = sbrk(4096);
    curr_brk = sbrk(0);
    printf("sbrk 返回值（即之前的结束地址）：%p\n", pre_brk);
    printf("sbrk 之后的结束地址：%p\n", curr_brk);
    getchar();

    brk(tmp_brk);
    curr_brk = sbrk(0);
    printf("恢复到初始化时的结束地址：%p\n", curr_brk);
    getchar();
}
```

#### 实验步骤
1. **关闭 ASLR**
   ```bash
   echo 0 > /proc/sys/kernel/randomize_va_space
   ```

2. **执行程序并观察内存地址**
   ```bash
   $ ./a.out
   当前进程 PID：27759
   初始化后的结束地址：0x56579000
   ```

3. **查看内存映射**
   ```bash
   # cat /proc/27759/maps
   ...
   56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out
   56558000-56579000 rw-p 00000000 00:00 0 [heap]
   ...
   ```
   数据段结束地址和堆开始地址同为 `0x56558000`，堆结束地址为 `0x56579000`。

4. **使用 `brk()` 增加堆空间**
   ```bash
   $ ./a.out
   当前进程 PID：27759
   初始化后的结束地址：0x56579000
   brk 之后的结束地址：0x5657a000
   ```

5. **查看内存映射**
   ```bash
   # cat /proc/27759/maps
   ...
   56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out
   56558000-5657a000 rw-p 00000000 00:00 0 [heap]
   ...
   ```
   堆开始地址不变，结束地址增加为 `0x5657a000`。

6. **使用 `sbrk()` 增加堆空间**
   ```bash
   $ ./a.out
   当前进程 PID：27759
   初始化后的结束地址：0x56579000
   brk 之后的结束地址：0x5657a000
   sbrk 返回值（即之前的结束地址）：0x5657a000
   sbrk 之后的结束地址：0x5657b000
   ```

7. **查看内存映射**
   ```bash
   # cat /proc/27759/maps
   ...
   56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out
   56558000-5657b000 rw-p 00000000 00:00 0 [heap]
   ...
   ```

8. **减小堆空间**
   ```bash
   $ ./a.out
   当前进程 PID：27759
   初始化后的结束地址：0x56579000
   brk 之后的结束地址：0x5657a000
   sbrk 返回值（即之前的结束地址）：0x5657a000
   sbrk 之后的结束地址：0x5657b000
   恢复到初始化时的结束地址：0x56579000
   ```

9. **查看内存映射**
   ```bash
   # cat /proc/27759/maps
   ...
   56557000-56558000 rw-p 00001000 08:01 28587506 /home/a.out
   56558000-56579000 rw-p 00000000 00:00 0 [heap]
   ...
   ```

10. **开启 ASLR**
    ```bash
    echo 2 > /proc/sys/kernel/randomize_va_space
    ```

11. **执行程序并观察内存地址**
    ```bash
    $ ./a.out
    当前进程 PID：28025
    初始化后的结束地址：0x578ad000
    ```

12. **查看内存映射**
    ```bash
    # cat /proc/28025/maps
    ...
    5663f000-56640000 rw-p 00001000 08:01 28587506 /home/a.out
    5788c000-578ad000 rw-p 00000000 00:00 0 [heap]
    ...
    ```
    可以看到这时数据段的结束地址 `0x56640000` 不等于堆的开始地址 `0x5788c000`。

#### `mmap()` 和 `munmap()` 示例
```c
#include <stdio.h>
#include <sys/mman.h>
#include <unistd.h>

void main() {
    void *curr_brk;
    char *addr;

    printf("当前进程 PID：%d\n", getpid());
    printf("初始化后\n");
    getchar();

    addr = mmap(NULL, (size_t)4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0);
    printf("mmap 完成\n");
    getchar();

    munmap(addr, (size_t)4096);
    printf("munmap 完成\n");
    getchar();
}
```

1. **初始化**
   ```bash
   $ ./a.out
   当前进程 PID：28652
   初始化后
   # cat /proc/28652/maps
   ...
   f76b2000-f76b5000 rw-p 00000000 00:00 0
   f76ef000-f76f1000 rw-p 00000000 00:00 0
   ...
   ```

2. **mmap**
   ```bash
   $ ./a.out
   当前进程 PID：28652
   初始化后
   mmap 完成
   # cat /proc/28652/maps
   ...
   f76b2000-f76b5000 rw-p 00000000 00:00 0
   f76ee000-f76f1000 rw-p 00000000 00:00 0
   ...
   ```

3. **munmap**
   ```bash
   $ ./a.out
   当前进程 PID：28652
   初始化后
   mmap 完成
   munmap 完成
   # cat /proc/28652/maps
   ...
   f76b2000-f76b5000 rw-p 00000000 00:00 0
   f76ef000-f76f1000 rw-p 00000000 00:00 0
   ...
   ```
   可以看到第二行第一列地址从 `f76ef000 -> f76ee000 -> f76ef000` 变化。 `0xf76ee000 - 0xf76ef000 = 0x1000 = 4096`。

#### 使用 `malloc` 分配堆空间
通常情况下，我们不会直接使用 `brk()` 和 `mmap()` 来分配堆空间，而是通过 C 标准库提供的 `malloc` 函数来分配块。

```c
#include <stdlib.h>
#include <stdio.h>

void foo(int n) {
    int *p;
    p = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        p[i] = i;
    }
    free(p);
}
```

### 1.5.8 glibc malloc

glibc 即 GNU C Library，是为 GNU 操作系统开发的一个 C 标准库。glibc 主要由两部分组成：
1. 头文件，位于 `/usr/include`。
2. 库的二进制文件，有动态和静态两个版本，动态版本位于 `/lib/libc.so.6`，静态版本位于 `/usr/lib/libc.a`。

#### 下载和编译 glibc
1. **下载 glibc 源码**
   ```bash
   $ git clone git://sourceware.org/git/glibc.git
   $ cd glibc
   $ git checkout --track -b local_glibc-2.23 origin/release/2.23/master
   ```

2. **修改配置文件**
   ```bash
   $ cat Makeconfig | grep -i werror | grep warn
   +gccwarn += #-Werror
   ```

3. **打补丁并编译**
   ```bash
   # 打补丁
   # 编译
   ```

关于 glibc 中的 `malloc` 实现是一个很重要的话题，我们会在后面的章节详细介绍。