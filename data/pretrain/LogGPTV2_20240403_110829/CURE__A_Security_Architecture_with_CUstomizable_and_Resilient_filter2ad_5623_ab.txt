be protected from adversaries on all software layers (PL3-
PL0), other potentially malicious enclaves, and DMA at-
tacks [63, 76].
SR.2: Hardware security primitives. The protection of the
enclaves must be enforced by secure hardware components
which can only be conﬁgured by the software TCB.
SR.3: Minimal software TCB. The TCB must be protected
from adversaries in all software layers (PL3-PL0) and mini-
mal in size to be formally veriﬁable, i.e., a few KLOCs [44].
SR.4: Side-channel attack resilience. Mitigations against
the most relevant software side-channel attacks must be avail-
able, namely, side-channel attacks on cache resources [31,
50, 70, 102], controlled side-channel attacks [65, 92, 101] and
transient-execution attacks [12, 14, 43, 45, 78, 89, 90, 93].
4.2 Functionality Requirements (FR)
FR.1: Dynamic enclave boundaries. The trust boundaries
of an enclave must be freely conﬁgurable such that enclaves
USENIX Association
30th USENIX Security Symposium    1075
1076    30th USENIX Security Symposium
USENIX Association
5.2.1 Enclave Management
Before describing the different enclave types supported by
CURE, we give an overview on CURE’s enclave management.
Security monitor. All CURE enclaves are managed by the
software TCB, called Security Monitor (SM), as in other TEE
architectures [22, 48]. As indicated in Figure 2, the SM it-
self represents an enclave which is part of the ﬁrmware. As
described in Section 2, we assume a system that performs
a secure boot on reset, veriﬁes the ﬁrmware (including the
SM) and then jumps to the entry point of the SM. Further,
we assume that the SM has already loaded its rollback pro-
tected state  into the volatile main memory. The SM state
contains , , , ℎ and a structure  for
each enclave installed on the device.
Enclave installation. When an enclave is deployed to the
device, the SM ﬁrst veriﬁes the signature  using 
and ℎ. Then, the SM creates a new enclave meta-data
structure  and stores ,  and  in it. More-
over, the SM creates an enclave state structure  which
is used to persistently store all sensitive enclave data. The
SM also creates an authenticated encryption key  which
is used to protect the enclave state when it is stored to disk
or ﬂash memory.  and  are also stored in .
Initially,  only contains an authenticated encryption key
 created by the SM, which is used by the enclave to en-
crypt and integrity protect data communicated to the untrusted
OS, and a monotonic counter. The enclave meta-data struc-
ture  also contains a monotonic counter used to rollback
protect the enclave state.
Enclave setup & teardown. The setup of an enclave is al-
ways triggered by the corresponding host app. After the OS
loads the enclave binary and conﬁguration ﬁle, it performs a
context switch to the SM. The SM identiﬁes the enclave by
the label  and begins the enclave setup by (1) conﬁguring
the hardware security primitives (Section 5.3) such that one or
multiple continuous physical memory regions (according to
the conﬁguration ﬁle) are exclusively assigned to the enclave
in order to isolate the enclave from the rest of the system soft-
ware. Since the binary and conﬁguration ﬁle are loaded from
untrusted software, their integrity must always be veriﬁed
using  and . Assigning physical memory regions
is inevitable when providing enclaves which are able to ex-
ecute privileged software (kernel-space enclave), since this
allows the enclave to control the MMU. Thus, virtual memory
cannot be used to effectively isolate the enclave. (2) After en-
clave veriﬁcation, the SM conﬁgures the hardware primitives
to assign also the rest of the system resources, e.g., cache
or peripherals, to the enclave according to the conﬁguration
ﬁle. All assigned resources are also noted in . Moreover,
the SM assigns an identiﬁer to the enclave which is stored in
 and which is unique for every enclave currently active
on the device. The SM can manage up to  (implementation
deﬁned) enclaves in parallel. We provide more details on the
meaning of the enclave identiﬁer in Section 5.3. (3) In the last
step, the enclave state  is restored, i.e., loaded from disk
or ﬂash memory, decrypted and veriﬁed using , and then
copied to the enclave memory such that it is accessible during
enclave runtime. The SM also checks that the monotonic
counter in  matches the counter stored in .
The SM conﬁgures all interrupts to be routed to the SM
while an enclave is running. Thus, the SM fully controls the
context switches into and out of an enclave. While the SM
is executed, all interrupts on the CPU core executing the SM
are disabled. All other cores remain interrupt responsive. In
CURE, hardware-assisted hyperthreading is disabled during
enclave execution to prevent data leakage through resources
shared between the hardware threads. Alternatively, all hard-
ware threads of a CPU core could also be assigned to the
enclave if the enclave code beneﬁts from parallelization. In
the reminder of the paper, we assume that hyperthreading is
disabled during enclave runtime.
After the setup is complete, the SM jumps to the entry
point of the enclave. During the enclave teardown, which
can be triggered by the host app or the enclave itself, the SM
securely stores the enclave state (using ), while incre-
menting the monotonic counters in  and , removes
all enclave data from the memory and caches and reconﬁgures
the hardware primitives.
Enclave execution. At run time, enclaves can access services
provided by the SM over its API, e.g., to dynamically increase
the enclave’s memory or to receive an integrity report which
the SM creates by signing  with  and by attaching
. The integrity report is then send to the service provider
by the enclave. Subsequently, using ℎ, the service
provider can perform a remote attestation of the enclave. Only
if the attestation succeeds, the service provider provisions
sensitive data to the enclave. More complex remote attestation
schemes [61] could also be implemented.
Enclaves might use services of the untrusted OS which do
not require access to the plain sensitive enclave data, e.g., ﬁle
or network I/O. For those cases, an enclave can utilize ,
which is part of , to protect its sensitive data. CURE also
allows multiple enclaves to share encrypted sensitive data
over the OS. However, the required key exchange is assumed
to be performed over the back ends of the service providers
and thus, out-of-scope for CURE.
Every enclave which includes a cryptographic library can
also create own keys (apart from ) and store them in .
Thus, enclaves can also implement key rotation, revocation
or recovery schemes which is, however, the responsibility of
the service provider and thus, out-of-scope for CURE.
On every enclave setup/teardown and context switch in and
out of an enclave, the SM ﬂushes all core-exclusive cache
resources, i.e., the data cache, the TLB and the BTB, thereby
preventing information leakage across execution contexts.
USENIX Association
30th USENIX Security Symposium    1077
5.2.2 User-space Enclaves
User-space enclaves (Encl1 in Figure 2) comprise a complete
user-space process.
OS integration. The key characteristic of a user-space en-
clave is its tight integration into the OS, i.e., it relies on the
OS for memory management, exception/interrupt handling
and other services provided through syscalls (e.g., ﬁle system
or network I/O). The OS schedules user-space enclaves like
normal user-spaces processes, only that the context switches
in and out of the enclave are intercepted by the SM. The
OS’s services are used by all user-space enclaves which pre-
vents code duplication. Moreover, user-space enclaves do not
contain management software, leading to smaller binaries.
In controlled side-
Controlled side-channel defenses.
channel attacks, the adversary gains information about an
enclave’s execution state by observing usage of resources
managed by the OS, predominantly page tables [65, 92, 101].
CURE defends against these attacks by moving the page tables
of user-space enclaves into the enclave memory. More subtle
controlled side-channel attacks exploit the fact that the en-
clave’s interrupt handling is performed by the OS [91]. CURE
also mitigates these attacks by allowing each enclave to reg-
ister trap handlers to observe its own interrupt behavior, and
act accordingly if a suspicious behavior is detected [15, 79].
Limitations & usage scenarios. A user-space enclave cannot
run higher-privileged code, e.g., device drivers. Thus, all
sensitive data shared with a peripheral has to be processed
by drivers in the untrusted OS and thus, is unprotected if not
encrypted. Hence, user-space enclaves are unable to protect
sensitive services which interact with devices like sensors
or GPUs. Instead, user-space enclave are beneﬁcial when
protecting short-living services that can rely on encrypted
data transmission, e.g., One Time Password (OTP) generators,
payment services, digital key services and many more.
5.2.3 Kernel-space Enclaves
Kernel-space enclaves can comprise only the kernel space
(Encl2), or the kernel and user space (Encl3).
Providing OS services. The key characteristic of a kernel-
space enclave is its capability to run code bare-metal on a
CPU core in the privileged (PL2) software layer or even in
the hypervisor level (PL1) if available. Thus, OS services,
e.g. memory management, can be implemented inside the
enclave in a runtime (RT) component (Figure 2). This results
in less resource sharing with the untrusted OS, and thus, it is
easier to protect against controlled side-channel attacks [91,
92, 101]. Moreover, by including device drivers into the
RT, a secure communication channel to peripherals can be
established. Furthermore, kernel-space enclaves provide more
computational power since CURE allows to run kernel-space
enclaves across multiple cores. In CURE, peripherals can
either be assigned exclusively to a single enclave, by the SM,
at enclave setup or shared between different enclaves and/or
the OS. The peripheral’s internal memory is ﬂushed by the
SM when (re-)assigned to a new entity to prevent information
leakage [49, 72, 107].
Protecting virtual machines. CURE’s ability to include the
kernel space into the enclave allows the construction of en-
claves that encapsulate complete virtual machines (VMs).
VMs are not self-contained but rely on memory and periph-
eral management services provided by a hypervisor, which
makes the VM enclave vulnerable to controlled side-channel
attacks [38, 51]. CURE mitigates this by moving the VM
page tables into the enclave memory and including unmodi-
ﬁed complete drivers into the enclave to avoid dependencies
on the untrusted hypervisor [16, 17]. As for other kernel-
space enclaves, peripherals are temporarily assigned to VM
enclaves by the SM. Again, before a peripheral is reassigned,
its internal memory is sanitized by the SM.
Limitations & usage scenarios. Sensitive services can be
ported to kernel-space enclaves without changing them. How-
ever, in contrast to user-space enclaves, an enclave RT needs
to be added which increases the binary size, adds development
overhead and increases the memory consumption. Moreover,
the CPU cores selected for the enclave ﬁrst have to be freed
from pending processes, detached from the OS and the RT
booted on them. Nevertheless, kernel-space enclaves are
required when protecting services which heavily rely on pe-
ripheral communication, e.g., authentication services using
biometric sensors, ML services collecting input data over
sensors or ofﬂoading computations to accelerators, DRM ser-
vices or in general services which require secure I/O.
5.2.4 Sub-space Enclaves
In CURE, enclave trust boundaries can be freely deﬁned which
allows to construct ﬁne-grained enclaves that only include
parts of the software residing in a privilege level, therefore
called sub-space enclaves.
Shrinking the TCB. Sub-space enclaves are especially ap-
pealing when constructed in the highest privilege level (PL0)
of the system (Encl4 in Figure 2). In CURE, sub-space en-
claves are used to isolate the SM from the ﬁrmware code to
protect against exploitable memory corruption vulnerabilities
that might be present in the ﬁrmware code [24]. Moreover,
hardware countermeasures, described in Section 5.3, are used
to prevent the ﬁrmware code from accessing the SM data or
hardware primitives. Ultimately, this minimizes the software
TCB in CURE, as opposed to other TEE architectures that rely
on a software TCB containing all code in the highest privilege
level, i.e., EL3 (ARM) or the machine level (RISC-V), e.g.,
TrustZone [3], Sanctuary [10], Sanctum [22], Keystone [48].
5.3 Hardware Security Primitives
To provide CURE’s customizable enclaves, new security prim-
itives (SP) are needed in hardware. Our SPs augment the
1078    30th USENIX Security Symposium
USENIX Association
USENIX Association
30th USENIX Security Symposium    1079
1080    30th USENIX Security Symposium
USENIX Association
USENIX Association
30th USENIX Security Symposium    1081
1082    30th USENIX Security Symposium
USENIX Association
Performing access control. The added registers hold mem-
ory ranges deﬁned by a 32-bit base address (Addr) and a
32-bit mask (Mask), and are used by the control logic to per-
form access control on every memory transaction using the
eid and address signals. Access control is only performed
on channels with a parent-to-child direction (channels A and
C). At access violation, the transaction is redirected (with
all-zero data) to an unused, zero-initialized memory region.
Thus, all forbidden transactions write/read zeros to/from the
unused memory region. An adversary enclave might ﬁll L1
with malicious data which could get ﬂushed with SM priv-
ileges during enclave context switch. To prevent this, we
modify the core such that on every switch to the SM, the L1 is
ﬂushed before the eid register is set. We connect the system
bus to the peripheral and interrupt bus. This allows the SM to
conﬁgure the added registers and control logic, and trigger an
interrupt upon access violation which is handled by the SM.
Memory arbiter. We add 15 registers to the memory arbiter,
one for each enclave (13), the SM and the ﬁrmware. Each
register deﬁnes the memory region assigned to each execu-
tion context. For the enclaves, the control logic veriﬁes that
transactions only target the assigned region. For the SM, no
access control is performed. The OS is allowed to access all
regions except the ones speciﬁed in registers of the arbiter.
The ﬁrmware is allowed to access its own and the OS regions
which is why a static ID needs to be assigned to the ﬁrmware.
Peripheral arbiter. We add two registers per peripheral to the
arbiter of the peripheral bus. One covers the MMIO region of
the peripheral, and the other 32-bit register contains a bitmap
that deﬁnes read and write permissions for every enclave.
DMA port. We add a register at every port which connects
a DMA device. In CURE, a DMA device is exclusively as-
signed to a single enclave at one point in time. In our pro-
totype, a DMA device accesses the main memory but not
other peripherals.
If speciﬁc use cases, e.g. PCI peer-to-
peer transactions [67], must be supported, additional registers
need to be added to specify multiple allowed memory regions.
Together with the peripheral arbiter, this fulﬁlls FR.2.
6.2.3 L2 Cache Partitioning
For cache side-channel resilience, we implement way-based
ﬂexible cache partitioning for the shared L2 (last-level)
cache [81] in our prototype. We leverage the eid-extended
TileLink memory transactions to detect when an enclave is-
sues a cache request.
Conﬁgurable partitioning. We implement two modes of
partitioning to allow enclaves to individually enable cache
side-channel resilience. The ﬁrst mode CP-BASIC performs
rudimentary access control where each enclave is only permit-
ted to access (hit) its own cache lines, but is free to evict cache
lines from other ways. The second mode CP-STRICT provides
more stringent security guarantees by allocating exclusively
one or more ways (across all cache sets) to the pertinent en-
clave. Only these cache ways can be accessed by the enclave