2）只需查看文件/文件夹即可触发
问题本身显然在KConfig中，但是如果我们无法调用配置文件...也就没有办法触发它。所以这里有几个部分。带着这些信息，我决定看看KConfig和KConfigGroup的代码。这里我找到了一个名为readEntry()的函数。  
kconfiggroup.cpp
我们可以看到它在做的一些事情：  
1）检查条目的key  
2）如果$e这个key存在，`expandString()`会读取它的值。  
显然现在我们需要了解`expandString()`的作用。通过搜索文件，我们在kconfig.cpp中找到了这个函数。  
kconfig.cpp
长话短说：  
1）检查`$`字符；  
2）检查是否后面有`（）`；  
3）调用popen传入该值  
4）返回值（必须去掉该部分）  
这基本上解释了它的大部分工作原理，但是我想按照代码准确找到在哪里`readEntry()`和`expandString()`被调用，然后执行我们的命令。  
在github上搜索了很长一段时间后，我确定有一个特定于桌面文件的函数，叫做`readIcon()`，位于KDesktopFile类中。  
kdesktopfile.cpp
基本上它仅用了`readEntry()`函数，在配置文件中获取Icon。了解到这个函数存在...我们可以回到源代码，搜索`readIcon()`。  
目前为止，我一直只是在研究.directory文件，但是在阅读更多代码后，发现KDesktopFile类不仅仅用于.directory文件。它也可以用于.desktop文件（谁能想到呢？？？？？）。  
因为KDE将.directory和.desktop看作KDesktopFile的文件，并且icon在这个类中调用（或许其他类，在这里并不重要），所以如果我们注入命令，那么命令将会被执行。
## 0x04 Exploitation
### Finding ways to trigger readEntry
#### SMB share method
我们知道如果可以让某人查看.directory或.desktop文件，`readEntry()`将会被调用，从而执行我们的代码。我认为肯定有更多触发readEntry的方法。理想情况下，是完全远程的、少交互，即不用下载文件。  
解决这个问题的方法是，在iframe中使用smb:// URI来提供用户将要连接的远程共享，最终在他们连接时执行我们的directory文件。  
不幸的是，KDE不同于GNOME ，它不会自动挂载远程共享，如果文件系统上不存在.directory/.desktop，则不信任他们。  
这基本上破坏了让用户意外浏览到远程共享并执行任意代码的目的。很有趣，因为自动挂载远程共享是KDE用户很久以来一直要求的功能特性。如果实现了这点，这个攻击可能会更加危险。  
无论如何，我们不能自动挂载远程共享，但是KDE确实有一个客户端，用于方便使用KDE用户普遍使用的SMB共享。这个应用程序叫做SMB4k，实际上没有与KDE一起提供。  
使用SMB4k挂载共享后，就可以通过Dolphin进行访问。  
如果我们对公共SMB共享可写，（人们正在使用SMB4k浏览）我们就可以植入恶意配置文件，当在Dolphin中查看该文件时，它将会显示如下内容，最终实现了远程代码执行。
#### ZIP method (nested config)
向某人发送.directory或.desktop文件显然会引发很多问题，对吗？我想是的。这也是大多数关于这个话题的评论所说的。为什么这不重要？因为嵌套文件和伪造文件扩展名是你可能想到的最简单的事情。  
这里我们可以作出选择。第一个选择是创建一个嵌套目录，在打开父目录后立刻加载图标，甚至可以在没有看到目录或不知道目录内容的情况下执行代码。例如，查看Apache网站上下载的httpd。
毫无戒心的用户不可能看出其中某个目录嵌套了一个恶意的.directory文件。如果你期盼出现，可以，但通常来讲，不会有任何怀疑。  
nested directory payload
    $ mkdir httpd-2.4.39
    $ cd httpd-2.4.39
    $ mkdir test; cd test
    $ vi .directory
    [Desktop Entry]
    Type=Directory
    Icon[$e]=$(echo${IFS}0>~/Desktop/zer0.lol&)
压缩文件，发送出去。  
在文件管理器中打开httpd-2.4.39文件夹的时候，test目录将会试图加载Icon，从而执行命令。
#### ZIP method (lone config file)
我们的第二个选择是，“伪造”文件扩展名。实际上我忘记在最初的poc中记录这种方法，这就是我为什么现在将其包括在这里。事实上，当KDE不能识别文件扩展名时，它会试图变“智能化”，分配一个文档类型。如果文件开头包含[Desktop
Entry]，该文件会被分配到application/x-desktop类型。最终允许文件在加载时由KConfig处理。  
在此基础上，我们可以用一个类似于“t”的字符制作一个假的TXT文件。为了演示隐藏文件十分简单，我再次使用了httpd包。
很明显图标会暴露文件，但是这种方法仍然比比随机的.directory/.desktop文件谨慎的多。  
同样的，只要文件夹一打开，代码就会被执行。
#### Drag & Drop method (lone config file)
坦白来说，这个方法相对没用，但是我认为在演示中它会很酷，同时在payload的传递中添加一些社会工程学元素。  
当我分析KDE时，我（偶然）意识到，你实际上可以拖放远程资源，并且拥有一个文件传输触发器。这些都由KIO (kde 输入/输出模块)启用。  
这基本上允许用户拖放远程文件，并传输到本地文件系统中。  
实际上，如果我们可以让用户拖放链接，文件传输将会触发并最终在文件加载到系统时执行任意代码。
## 0x05 结束
多亏了KDE团队，只要打了必要的补丁，您就不必再担心这个漏洞。  
非常感谢他们在得知此问题约24小时内就对此发布了补丁，是令人印象深刻的响应。  
我还要在此对以下的朋友表示感谢，他们在整个过程中给予我很大帮助。请查看参考文献中Nux分享的payload :)  
· [Nux](https://twitter.com/ItsNux)  
· [yuu](https://twitter.com/netspooky)
## References
[KDE 4/5 KDesktopfile (KConfig) Command
Injection](https://gist.githubusercontent.com/zeropwn/630832df151029cb8f22d5b6b9efaefb/raw/64aa3d30279acb207f787ce9c135eefd5e52643b/kde-kdesktopfile-command-injection.txt)
[KDE Project Security
Advisory](https://kde.org/info/security/advisory-20190807-1.txt)
[KDE System
Administration](https://userbase.kde.org/KDE_System_Administration/Configuration_Files#Shell_Expansion)
[KDE ARBITRARY CODE EXECUTION AUTOCLEAN by
Nux](https://github.com/RevThreat/KDE-ARBITRARY-CODE-EXECUTION-AUTOCLEAN/)