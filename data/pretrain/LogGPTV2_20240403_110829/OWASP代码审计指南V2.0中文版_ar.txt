坏，但是代码中可能存在影响性能和安全性的问题。下面是在代码审计期间要寻找的推荐实
践的总结。此外，值得一提的是，一些工具可以使这部分的工作变得更容易，它们可以帮助
您理解并指出代码中的缺陷。 
172 
代码访问安全性 
这支持半信任代码的执行，防止几种形式的安全威胁。以下是由于代码访问安全性使用
不当而导致的可能漏洞说明: 
表:代码访问安全漏洞 
漏洞 
说明 
链接要求或断言使用不
当 
该代码容易受到引诱攻击。 
代码允许不受信任的调
用者 
恶意代码可以使用该代码来执行敏感操作和访问资
源。 
声明的安全 
尽可能使用声明式安全性而不是命令式安全性。声明性语法示例(MSDN[2]，2013): 
示例： 
[MyPermission(SecurityAction.Demand, Unrestricted = true)] 
public class MyClass 
{ 
public MyClass() 
{ 
//The constructor is protected by the security call. 
} 
173 
public void MyMethod() 
{ 
//This method is protected by the security call. 
} 
public void YourMethod() 
{ 
//This method is protected by the security call. 
} 
} 
非托管代码 
尽管 C#是一种强类型语言，但使用非托管代码也可以调用“不安全”的代码。"审计任
何使用非托管资源的类，如跨方法调用的数据库连接，实现 IDisposable 接口。如果对象的
语义使得 Close 方法比 Dispose 方法更符合逻辑，请在 Dispose 之外提供 Close 方法”。 
异常处理 
出于安全目的和其他原因，管理代码应该使用异常处理。确保遵循以下建议: 
⚫ 
避免循环中的异常处理，必要时使用 try/catch 块。 
⚫ 
识别包含异常的代码。 
⚫ 
对意外情况使用异常处理，而不仅仅是控制应用程序中的流程。 
工具 
174 
FxCop 
FxCop 是一个分析二进制程序集的分析工具，而不是源代码。该工具具有一组预定义
的 
规则，并且可以配置和扩展它们。关于安全性的一些可用规则是(CodePlex，2010): 
表: FxCop Flags 
规则 
描述 
EnableEventValidationShouldBeTru
e 
验
证
是
否
在
特
定
页
面
上
禁
用
了
EnableEventValidation 指令。 
ValidateRequestShouldBeEnabled 
验证是否在特定页面上禁用了 ValidateRequest 指
令。 
ViewStateEncryptionModeShouldB
eAlways 
验
证
是
否
在
特
定
页
面
上
未
将
ViewStateEncryptionMode 指令设置为 Never。 
EnableViewStateMacShouldBeTrue 
验证在特定页面上 EnableViewStateMac 指令是否
未设置为 false。 
EnableViewStateShouldBeTrue 
验证特定页面上的 EnableViewState 指令是否未设
置为 false。 
ViewStateUserKeyShouldBeUsed 
验
证
是
否
在
应
用
程
序
中
使
用
Page.ViewStateUserKey 来防止 CSRF。 
175 
DebugCompilationMustBeDisable
d 
验证调试编译已关闭。 这消除了与启用调试代码以及
返回其他大量错误消息有关的潜在性能和安全性问题。 
CustomErrorPageShouldBeSpecifie
d 
验证 CustomErrors 部分是否配置为具有默认
URL，以便在发生错误时重定向使用。 
FormAuthenticationShouldNotCon
tainFormAuthenticationCredentials 
验证在表单身份验证配置下是否未指定凭据。 
EnableCrossAppRedirectsShouldB
eTrue 
验
证
system.web.authentication.forms 
enableCrossAppRedirects 是否设置为 true。设置指示
在身份验证过程之后是否应将用户重定向到另一个应用程
序 URL。如果设置为 false，则身份验证过程将不允许重
定向到另一个应用程序或主机。这有助于防止攻击者在身
份验证过程中强迫用户重定向到另一个站点。这种攻击通
常称为开放重定向，主要用于网络钓鱼攻击。 
FormAuthenticationProtectionSho
uldBeAll 
验证system.web.authentication.forms保护上的保
护属性是否设置为 All，以指定应用程序同时使用数据验证
和加密来帮助保护身份验证 cookie。 
FormAuthenticationRequireSSLSh
ouldBeTrue 
验证system.web.authentication.forms配置元素上
的 requireSSL 属性是否设置为 True，这将强制身份验证
cookie 指定安全属性。这指示浏览器仅通过 SSL 提供
cookie。 
FormAuthenticationSlidingExpirati
onShouldBeFalse 
验 证 通 过
HTTP
为 网 站 提 供 服 务 时 ，
176 
system.web.authentication.forms slideExpiration 是
否设置为 false。 这将强制身份验证 cookie 具有固定的
超时值，而不是由每个请求刷新。 由于 cookie 将遍历明
文网络并可能被拦截，因此 cookie 上具有固定的超时值
将限制 cookie 可以重播的时间。 如果 cookie 仅通过
HTTPS 发送，则不太可能被拦截，并且将 slideExpiration
设置为 True 会导致在每次请求后刷新超时，从而提供更
好的用户体验。 
详细参考英文文档。 
3.6 A6 敏感数据泄露 
许多网络应用程序不能正确地保护敏感数据，如信用卡、税号和身份验证凭证。攻击者
可能会窃取或修改保护薄弱的数据，以实施信用卡欺诈、身份盗窃或其他犯罪。敏感数据应
该得到额外的保护，如静态或传输中的加密，以及与浏览器交换时的特殊预防措施。 
3.6.1 加密控制 
软件开发人员、架构师和设计师是决定特定应用程序属于哪一类的最关键人员。密码技
术提供静态数据的安全性(通过加密)、数据完整性(通过散列/摘要)和数据的不可否认性(通
过签名)。为了确保加密充分保护数据，所有源代码必须使用具有强密钥大小的标准(安全)
算法。 
实现加密代码时的常见缺陷包括使用非标准加密算法、自定义加密(标准和非标准)算法、
177 
使用加密不安全的标准算法(例如，DES)，不安全密钥的实现会削弱任何应用程序的整体安
全态势。上述缺陷的实现使得攻击者能够使用密码分析工具和技术来解密敏感数据。 
3.6.2 描述 
许多公司为客户处理敏感信息，例如医疗信息或信用卡号码，行业法规规定这些敏感信
息必须加密以保护客户的信息。在医疗行业，HIPAA 法规建议企业必须对医疗数据实施必
要的保护，在金融行业，许多法规涵盖 PII(个人身份信息)控制。 
不管监管处罚的财务影响如何，保护(通过加密或散列)应用程序处理的信息有许多业务
原因，包括隐私和欺诈检测/保护。应识别应用程序处理的所有敏感数据，并实施加密。同
样，应决定敏感数据在传输过程中 (即，从一台计算机发送到另一台)和/或静止(即，存储在
数据库、文件、钥匙串等中) 是否必须加密： 
1)传输过程中的保护。这通常意味着使用 SSL/TLS 层来加密通过超文本传输协议传输
的数据，也可以包括 FTPS 协议，甚至是传输控制协议。像 IIS 和 Apache Struts 这样的框
架都包含了 SSL/TLS 功能，因此开发人员不会编写实际的 TLS 加密，而是会配置一个框架
来提供 TLS 安全性。 
然而，做出这样的决策，即使是在架构层面，也需要充分了解安全性。关于 TLS 设计
决策的讨论包含在第 1.3 节中。 
2)存储时保护。这可以包括对数据库中的信用卡进行加密、对密码进行散列、生成消息
认证码(MAC)以确保消息在计算机之间没有被修改。当 TLS 通过框架实现时，要加密或散
列要存储的数据的代码通常需要使用加密库提供的 API。 
开发人员不会编写代码来实现 AES 算法(OpenSSL 或 CryptoAPI 会这样做)，开发人员
178 
将编写模块来以正确的方式使用 AES。同样，需要对最新的算法、密钥存储和其他设计决
策做出正确的决定，这些将在 1.4 节中介绍。 
3.6.2.1 密码学定义 
在深入讨论加密流量和数据之前，下表定义了加密领域中使用的一些术语。 
表:密码学术语定义 
名称 
解释 
编码 
将数据从一种形式转换为另一种形式，通常是为了使数据更容易处理。
例如，对二进制数据进行编码(无法打印到屏幕上的二进制数据转换为可
复制/粘贴的可打印的 ASCII 格式)。请注意，编码的目的不是隐藏数据，
将编码数据返回其原始形式的方法将是众所周知的。 
熵 
本质上，这是随机性。 加密功能将需要以某种形式的随机性工作，以允
许源数据以某种方式加密，以使攻击者无法在没有必要密钥的情况下逆
转加密。拥有良好的熵源对于任何密码算法都是必不可少的。 
哈希 
将数据不可逆地转换成所谓的“指纹”或“散列值”。可以采用任何大