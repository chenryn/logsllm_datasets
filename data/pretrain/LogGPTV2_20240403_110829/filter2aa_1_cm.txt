    so that users who try to access
     abc.example.com
    will be redirected to the GitHub-hosted page.
    例如，假设一个组织希望将其子域abc.example.com托管在GitHub页面abc_example.github.io上。该组织可以使用DNS CNAME记录将abc.example.com指向abc_example.github.io，以便尝试访问abc.example.com的用户将被重定向到托管在GitHub上的页面。
    But if this third-party site is deleted, the CNAME record that points from the company’s subdomain to that third-party site will remain unless someone remembers to remove it. We call these abandoned CNAME records
     dangling CNAMEs
    . Since the third-party page is now unclaimed, anyone who registers that site on the third-party service can gain control of the company’s subdomain.
    如果这个第三方网站被删除了，从公司子域名到第三方网站的CNAME记录会继续存在，除非有人记得删除它。我们称这些废弃的CNAME记录为悬挂的CNAME。由于第三方页面现在无人认领，任何在第三方服务上注册该网站的人都可以控制公司的子域名。
    Let’s say the company in our example later decides to delete the GitHub page but forgets to remove the CNAME record pointing to
     abc_example.github.io
    . Because
     abc_example.github.io
    is now unclaimed, anyone can register a GitHub account and create a GitHub page at
     abc_example.github.io
    . Since
     abc.example.com
    still points to
     abc_example.github.io
    , the owner of
     abc_example.github.io
    now has full control over
     abc.example.com
    .
    假设我们的例子中的公司决定删除GitHub页面，但忘记删除指向abc_example.github.io的CNAME记录。由于abc_example.github.io现在未被认领，任何人都可以注册GitHub帐户并在abc_example.github.io上创建GitHub页面。由于abc.example.com仍然指向abc_example.github.io，abc_example.github.io的所有者现在完全控制abc.example.com。
    Subdomain takeovers allow attackers to launch sophisticated phishing campaigns. Users sometimes check that the domain name of a page they’re visiting is legit, and subdomain takeovers allow attackers to host malicious pages using legitimate domain names. For example, the attacker who took over
     abc.example.com
    can host a page that looks like
     example.com
    on the GitHub page to trick users into providing their credentials.
    子域劫持让攻击者能够启动复杂的网络钓鱼攻击。用户有时会检查他们正在访问的页面的域名是否合法，而子域劫持允许攻击者使用合法的域名来托管恶意页面。例如，劫持 abc.example.com 的攻击者可以在 GitHub 页面上托管一个看起来像 example.com 的页面，以欺骗用户提供他们的凭证。
    But subdomain takeovers can become even more dangerous if the organization uses cookie sharing. Imagine that
     example.com
    implements a shared-session-based SSO system. Its cookies will be sent to any subdomain of
     example.com
    , including
     abc.example.com
    . Now the attacker who took over
     abc.example.com
    can host a malicious script there to steal session cookies. They can trick users into accessing
     abc.example.com
    , maybe by hosting it as a fake image or sending the link over to the user. As long as the victim has already logged into
     example.com
    ’s SSO system once, the victim’s browser will send their cookie to the attacker’s site. The attacker can steal the victim’s shared session cookie and log in as the victim to all services that share the same session cookie.
    子域接管可能会变得更加危险，如果组织使用 cookie 共享。想象一下，example.com 实施了共享会话基础的 SSO 系统。它的 cookie 将被发送到 example.com 的任何子域，包括 abc.example.com。现在接管了 abc.example.com 的攻击者可以在那里托管恶意脚本来窃取会话 cookie。他们可以通过主持它作为假图像或向用户发送链接来诱骗用户访问 abc.example.com。只要受害者已经登录 example.com 的 SSO 系统一次，受害者的浏览器就会将他们的 cookie 发送到攻击者的站点。攻击者可以窃取受害者的共享会话 cookie 并以受害者的身份登录所有共享同一会话 cookie 的服务。
    If the attacker can steal the shared session cookie by taking control of a single subdomain, all
     example.com
    sites will be at risk. Because the compromise of a single subdomain can mean a total compromise of the entire SSO system, using shared cookies as an SSO mechanism greatly widens the attack surface for each service.
    如果攻击者能够通过控制单个子域名窃取共享会话 cookie，则所有 example.com 网站都会面临风险。因为单个子域名的妥协可能意味着对整个 SSO 系统的完全妥协，使用共享 cookie 作为 SSO 机制极大地扩大了每个服务的攻击面。
    Security Assertion Markup Language
     Security Assertion Markup Language (
     SAML)
    is an XML-based markup language used to facilitate SSO on larger-scale applications. SAML enables SSO by facilitating information exchange among three parties: the user, the identity provider, and the service provider.
    安全断言标记语言（SAML）是一种基于XML的标记语言，用于在更大规模的应用程序上实现单点登录。SAML通过促进三方之间的信息交换而实现SSO：用户、身份提供者和服务提供者。
    How SAML Works
    In SAML systems, the user obtains an identity assertion from the identity provider and uses that to authenticate to the service provider. The
     identity
    provider is a server in charge of authenticating the user and passing on user information to the service provider. The
     service provider
    is the actual site that the user intends to access.
    在SAML系统中，用户从身份提供者获得身份断言，并使用它来向服务提供者进行身份验证。身份提供者是负责对用户进行身份验证并将用户信息传递给服务提供者的服务器。服务提供者是用户打算访问的实际网站。
     Figure 20-1
    illustrates how the process works.
    图20-1说明了该过程的工作原理。
       Figure 20-1
      : A simplified view of the SAML authentication process
      图20-1：SAML认证过程的简化视图。
    First, you try to access a resource from the service provider. Since you aren’t logged in, the service provider makes you send a SAML request to the identity provider. Once you’ve provided your credentials, the identity provider will send you a SAML response, which you can use to authenticate to the service provider. The SAML response contains an identity assertion that communicates your identity to the service provider. These are usually uniquely identifiable pieces of information such as your username, email address, or user ID. For instance, take a look at the following SAML identity assertion. It communicates the user’s identity via the user’s username:
    首先，您尝试从服务提供商访问资源。由于您尚未登录，服务提供商要求您向身份提供商发送 SAML 请求。一旦您提供了凭据，身份提供商将向您发送 SAML 响应，您可以使用该响应来对服务提供商进行身份验证。SAML 响应包含一个身份断言，用于向服务提供商传达您的身份信息。这些通常是可唯一标识的信息片段，例如您的用户名、电子邮件地址或用户 ID。例如，查看以下 SAML 身份断言。它通过用户的用户名来传达用户的身份。
     user1
       Note
      All the SAML messages in this chapter are highly simplified for the sake of readability. Realistic SAML messages will be longer and contain a lot more information.
      本章中的所有SAML消息都经过了高度简化以便于阅读。真实的SAML消息将会更长，并包含更多的信息。
    SAML Vulnerabilities
    As you can see in
     Figure 20-1
    , the key to accessing resources held by the service provider is in the SAML response. An attacker who can control the SAML response passed to the service provider can authenticate as someone else. Therefore, applications need to protect the integrity of their SAML messages, which they usually accomplish by using a signature to sign the message.
    如图20-1所示，访问服务提供商所持有的资源的关键在于SAML响应中。能够控制传递给服务提供商的SAML响应的攻击者可以冒充他人进行身份验证。因此，应用程序需要保护其SAML消息的完整性，通常通过使用签名对消息进行签名来实现。
    SAML can be secure if the SAML signature is implemented correctly. However, its security breaks apart if attackers can find a way to bypass the signature validation and forge the identity assertion to assume the identity of others. For example, if the attacker can change the embedded username in a SAML assertion, they can log in as another user.
    如果SAML签名被正确实施，SAML可以很安全。然而，如果攻击者能够找到绕过签名验证并伪造身份声明以假扮他人身份的方法，它的安全性就会瓦解。例如，如果攻击者能够更改SAML声明中嵌入的用户名，则他们可以以另一个用户身份登录。
    The digital signature that most applications apply to SAML messages ensures that no one can tamper with them. If a SAML message has the wrong signature, it won’t be accepted:
    大多数应用程序应用于SAML消息的数字签名确保任何人都不能篡改它们。如果SAML消息具有错误的签名，则不会被接受。
        dXNlcjE=
            user1
    Unfortunately, SAML security mechanisms aren’t always well implemented. Sometimes the SAML signature isn’t implemented or verified at all! If this is the case, attackers can forge the identity information in the SAML response at will. Other times, developers make the mistake of verifying signatures only if they exist. Attackers can then empty the signature field or remove the field completely to bypass the security measure.
    遗憾的是，SAML安全机制并不总是很好地实施。有时并没有实现或验证SAML签名！如果是这种情况，攻击者可以随意伪造SAML响应中的身份信息。其他时候，开发人员的错误是仅在存在时验证签名。攻击者可以随后清空签名字段或完全移除该字段以绕过安全措施。
    Lastly, if the signing mechanism used to generate the signature is weak or predictable, attackers can forge signatures. If you take a closer look at the previous signed SAML message, you’ll notice that the signature,
     dXNlcjE=
    , is just the base64 encoding of
     user1
    . We can deduce that the signature mechanism used is
     base64(
     username
     )
    . To forge a valid identity assertion for
     victim_user
    , we can change the signature field to
     base64("
     victim_user")
    , which is
     dmljdGltX3VzZXI=
    , and obtain a valid session as
     victim_user
    :
    最后，如果用于生成签名的签名机制是脆弱或可预测的，则攻击者可以伪造签名。如果你仔细查看前面签署的SAML消息，你会发现签名“dXNlcjE= ”只是用户1的Base64编码。我们可以推断出所使用的签名机制是Base64（用户名）。为了伪造victim_user的有效身份声明，我们可以将签名字段更改为Base64（“victim_user”），即dmljdGltX3VzZXI=，并作为victim_user获得有效会话：
        dmljdGltX3VzZXI=
            victim_user
    Another common mistake developers make is trusting that encryption alone will provide adequate security for the SAML messages. Encryption protects a message’s confidentiality, not its integrity. If a SAML response is encrypted but not signed, or signed with a weak signature, attackers can attempt to tamper with the encrypted message to mess with the outcome of the identity assertion.
    开发者常犯的另一个错误是相信仅依靠加密即可为SAML消息提供足够的安全保障。加密可以保护消息的保密性，但不能保护其完整性。如果SAML响应被加密但未签名，或者签名过于薄弱，攻击者可以试图篡改加密的消息以干扰身份断言的结果。
    There are many interesting ways of tampering with encrypted messages without having to break the encryption. The details of such techniques are beyond the scope of this book, but I encourage you to look them up on the internet. To learn more about encryption attacks, visit Wikipedia at
     https://en.wikipedia.org/wiki/Encryption#Attacks_and_countermeasures
    .
    有许多有趣的方法可以篡改加密消息，而不必破解加密。这些技术的细节超出了本书的范围，但我鼓励您在互联网上查找相关信息。如想了解更多关于加密攻击的信息，请访问维基百科：https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86#%E5%AF%B9%E5%86%B2%E5%92%8C%E5%AF%B9%E6%8A%97%E5%8A%9B%E6%8E%AA%E6%96%BD。
    SAML messages are also a common source of sensitive data leaks. If a SAML message contains sensitive user information, like passwords, and isn’t encrypted, an attacker who intercepts the victim’s traffic might be able to steal those pieces of information.
    SAML消息也是敏感数据泄漏的常见来源。如果SAML消息包含敏感的用户信息，比如密码，并且没有加密，攻击者截获受害者的流量就有可能窃取这些信息。
    Finally, attackers can use SAML as a vector for smuggling malicious input onto the site. For example, if a field in a SAML message is passed into a database, attackers might be able to pollute that field to achieve SQL injection. Depending on how the SAML message is used server-side, attackers might also be able to perform XSS, XXE, and a whole host of other nasty web attacks.
    最终，攻击者可以使用SAML作为将恶意输入走私到站点上的向量。例如，如果将SAML消息中的字段传递到数据库中，攻击者可能能够污染该字段以实现SQL注入。根据SAML消息在服务器端的使用方式，攻击者还可以执行XSS、XXE和其他许多恶意网络攻击。
    These SAML vulnerabilities all stem from a failure to protect SAML messages by using signatures and encryption. Applications should use strong encryption and signature algorithms and protect their secret keys from theft. Additionally, sensitive user information such as passwords shouldn’t be transported in unencrypted SAML messages. Finally, as with all user input, SAML messages should be sanitized and checked for malicious user input before being used.
    这些 SAML 漏洞来自于未通过签名和加密保护 SAML 消息。应用程序应该使用强加密和签名算法，并保护其密钥不被盗取。此外，敏感用户信息（如密码）不应以未加密的 SAML 消息形式传输。最后，与所有用户输入一样，SAML 消息应被清理并检查是否存在恶意用户输入，然后再使用。
    OAuth
    The final way of implementing SSO that we’ll discuss is OAuth.
     OAuth
    is essentially a way for users to grant scope-specific access tokens to service providers through an identity provider. The identity provider manages credentials and user information in a single place, and allows users to log in by supplying service providers with information about the user’s identity.
    我们即将讨论的最终单点登录实现方式是OAuth。OAuth本质上是一种用户通过身份提供者为服务提供商提供特定范围访问令牌的方式。身份提供者在单一位置管理凭证和用户信息，并允许用户通过提供有关用户身份的信息向服务提供商登录。
    How OAuth Works
    When you log in to an application using OAuth, the service provider requests access to your information from the identity provider. These resources might include your email address, contacts, birthdate, and anything else it needs to
    determine who you are. These permissions and pieces of data are called the
     scope
    . The identity provider will then create a unique
     access_token
    that the service provider can use to obtain the resources defined by the scope.
    当您使用OAuth登录应用程序时，服务提供商会向身份提供者请求访问您的信息。这些资源可能包括您的电子邮件地址、联系人、出生日期等任何需要确定您身份的信息。这些权限和数据被称为范围。身份提供者将创建一个唯一的访问令牌，服务提供商可以使用该令牌来获取范围定义的资源。
    Let’s break things down further. When you log in to the service provider via OAuth, the first request that the service provider will send to the identity provider is the request for an
     authorization
    . This request will include the service provider’s
     client_id
    used to identify the service provider, a
     redirect_uri
    used to redirect the authentication flow, a
     scope
    listing the requested permissions, and a
     state
    parameter, which is essentially a CSRF token:
    让我们进一步拆解。当您通过OAuth登录服务提供商时，服务提供商发送给身份提供商的第一个请求是授权请求。此请求将包括用于标识服务提供商的client_id，用于重定向身份验证流程的redirect_uri，列出所请求权限的scope和状态参数，这是一个CSRF令牌：
identity.com/oauth?
client_id=CLIENT_ID
&response_type=code
&state=STATE
&redirect_uri=https://example.com/callback
&scope=email
    Then, the identity provider will ask the user to grant access to the service provider, typically via a pop-up window.
     Figure 20-2
    shows the pop-up window that Facebook uses to ask for your consent to send information to
     spotify.com
    if you choose to log in to Spotify via Facebook.
    然后，身份提供者将要求用户通过弹出窗口向服务提供者授权访问。图20-2显示了Facebook在您选择通过Facebook登录到Spotify时要求您同意向spotify.com发送信息的弹出窗口。
       Figure 20-2
      : The consent pop-up seen during a typical OAuth flow
      图20-2：在OAuth流程中看到的同意弹出窗口。
    After the user agrees to the permissions the service provider asks for, the identity provider will send the
     redirect_uri
    an authorization code:
    用户同意要求的权限后，身份提供者将向redirect_uri发送授权码。
https://example.com/callback?authorization_code=abc123&state=STATE
    The service provider can then obtain an
     access_token
    from the identity provider by using the authorization code, along with their client ID and secret. Client IDs and client secrets authenticate the service provider to the identity provider:
    服务提供商可以使用授权代码以及其客户端ID和密钥从身份提供者获得访问令牌。客户端ID和客户端密钥将服务提供商身份验证到身份提供者：