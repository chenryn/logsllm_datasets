# 【技术分享】内核池溢出漏洞利用实战之Windows 10篇

## 译文声明
本文为翻译文章，原文来源：安全客  
原文地址：[请插入链接]  
译文仅供参考，具体内容表达及含义以原文为准。  
译者：[an0nym0u5](http://bobao.360.cn/member/contribute?uid=578844650)  
预估稿费：200 RMB  
投稿方式：发送邮件至linwei#360.cn 或登录网页版在线投稿。

## 一、前言
本文是《内核池溢出漏洞利用实战之Windows 7篇》的续集，我们将探讨如何在Windows 10系统中实现相同的漏洞利用。由于微软自Windows 8以来加强了针对内核池攻击的防御措施，这将更具挑战性。本文将深入分析与池相关的技术细节，建议读者先阅读第一篇文章作为背景知识。

### 1.1 Windows 8系统的防护措施
Windows 8引入了一系列安全改进措施来保护内核池，包括但不限于以下几点：

- **真正安全的链接/断开链接**
- **池索引验证**：防止池索引覆盖攻击。
- **不执行非分页池（No-Execute）**：这是一种新型的非分页池，具有NX属性，成为Windows默认使用的池类型。
- **SMEP**：管理模式执行保护。
- **MIN_MAP_ADDR**：内存首地址0x1000被保留且不可分配，以防御空引用类漏洞。
- **NtQuerySystemInformation()缺陷**：该缺陷在低完整性场景下（如浏览器沙箱）不再可利用。

关于配额进程指针覆盖漏洞的说明如下：
- 进程指针目前通过cookie进行编码：
  1. 分配块时：`ExpPoolQuotaCookie 异或 ChunkAddress 异或 ProcessPointer`
  2. 块空闲时：`ExpPoolQuotaCookie 异或 ChunkAddress`，用作canary。
- 解码后的进程指针必须指向内核空间，否则会触发异常检测。

要详细了解Windows 8的安全缓解措施，请参阅相关文章[1]和[2]。虽然Windows 8中的某些攻击方法已被修复，但仍有利用RIP协议获取数据的漏洞。然而，在Windows 10中，这些漏洞已通过在_OBJECT_HEADER中设置cookie的方式得到了进一步修复。

因此，要在Windows 10中利用配额进程指针覆盖漏洞，我们需要做到以下几点：
1. 获取池Cookie（PoolCookie），用于正确编码指针。
2. 确定溢出块的地址，同样用于编码指针。
3. 在已知地址的内核空间中放置任意数据，并确保指针指向我们伪造的结构。

接下来，让我们开始尝试！

## 二、获取溢出块指针
这部分内容较为简短，前提是您已经熟悉了Windows 7系统下的基本池喷射技术。我们将采用高级池喷射技术，该技术在文章[3]中有详细阐述。通过这种方法，我们可以预测任何可能的分配行为。借助IOCTL漏洞，我们可以轻松获取输入输出管理器分配给系统缓冲区（SystemBuffer）的地址。由于系统缓冲区是溢出的，我们可以通过溢出块获得其地址。需要注意的是，NtQuerySystemInformation漏洞在低完整性场景下不可利用，因此我们需要至少在中等完整性层面进行操作。

## 三、获取已知地址内核空间的一些任意数据
有多种方法可以实现这一目标。过去，我通常使用池喷射技术结合随机IOCTL系统调用来向空闲的内核空间存放数据，但这并不十分可靠。后来，我发现了一种更可靠的方法。

`CreatePrivateNamespace`函数用于在分页池中分配一个目录对象，其定义如下：
```c
HANDLE WINAPI CreatePrivateNamespace(
  _In_opt_ LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
  _In_     LPVOID                lpBoundaryDescriptor,
  _In_     LPCTSTR               lpAliasPrefix
);
```
关键点在于：
1. 该函数返回一个句柄，这意味着我们可以在分页池中获取该目录对象的地址。
2. 第二个参数是一个边界描述符，必须唯一。可以使用`CreateBoundaryDescriptor`函数创建它：
   ```c
   HANDLE WINAPI CreateBoundaryDescriptor(
     _In_ LPCTSTR Name,
     _In_ ULONG   Flags
   );
   ```
   调用后将其赋值给一个变量，例如`HelloWorld!`。

边界描述符名直接存储在分页池中的对象中，因此以下代码给出了分页池块：
- 名称`Hello World!`存储在对象地址+0x1A8偏移处，对名称长度没有明显限制。
- 该对象的大小可控，使其成为强大的分页池喷射工具。

总之，我们已经能够在内核空间中存放一些任意数据，并通过NtQuerySystemInformation漏洞获取其地址。

## 四、获取池Cookie
气氛似乎变得紧张起来。`ExpPoolQuotaCookie`是由驱动程序生成的一个8字节的Cookie（在64位系统下），其熵足够安全，无法猜测或计算其值。最初看来，获取池Cookie的唯一方法是发现罕见的任意读取漏洞。然而，通过研究`ExpPoolQuotaCookie`的使用过程，我发现了一些线索。

当池块在进程配额管理过程中被使用时，池类型（PoolType）会设置配额位（Quota Bit），并在池头后8个字节（64位系统）处存储一个编码过的指针。但在释放块后，情况发生了变化：
- `Process Billed`值仅是池Cookie和块地址的异或结果，用作canary来检测池溢出攻击。如果能够读取到`Process Billed`值，则有可能获取池Cookie。

假设攻击步骤如下：
1. 使用池喷射技术分配一些可控的块，块地址已知且随时可释放。
2. 释放其中一个块。
3. 释放其前面的块。
4. 在之前的两个块地址处重新分配一个块，这可以通过IOCTL漏洞实现，确保系统缓冲区在此处已分配。
5. 即使有空闲空间和块的重新分配，前一个池头也不会被重写，这意味着池Cookie和块地址的异或值仍然存在于块数据中。

这里假设存在一个带外读取漏洞，只需最小的一次带外读取即可获取池Cookie。因此，我们从最初的任意读取转换为带外读取来获取池Cookie，这是一种更常见的手段。实际上，我在同一驱动程序中发现了这样的带外读取漏洞！

### 4.1 关于CVE-2017-7441
以下是编号为0x22E1C0的IOCTL漏洞的伪代码：
- 驱动程序获取输入后，在系统缓冲区中调用`RtlLookupElementGenericTableAvl`函数。
- 如果该函数成功执行，它会在系统缓冲区中通过`memcpy`指令复制返回值。尽管在复制前会检查空间大小，但计算驱动程序写入多少字节时会出现错误，多返回2个多余的字节。
- 为了定位到有漏洞的代码，`RtlLookupElementGenericTableAvl`函数必须成功执行，并且至少控制其返回值的长度。一种方法是在系统缓冲区中写入当前进程ID，使得`RtlLookupElementGenericTableAvl`函数正常运行并将路径返回到当前进程的可执行文件。
- 可以控制可执行文件的路径长度，Windows下的最大路径长度为255字节。为了获取8字节的池Cookie，需要使用4个不同路径长度的可执行文件创建4个不同进程，从而触发4次该漏洞。

## 五、结论
至此，我们已经成功实现了从Windows 7到Windows 10的内核池漏洞利用过程。尽管Windows 10中利用池溢出漏洞变得更加困难，但池喷射技术和NtQuerySystemInformation漏洞仍为攻击者提供了足够的内核态信息，使其攻击依然可行。你可以在GitHub上找到我的利用代码：[https://github.com/cbayet/Exploit-CVE-2017-6008](https://github.com/cbayet/Exploit-CVE-2017-6008)。

## 六、参考文献
1. [Windows 8 Heap internals]
2. [Kernel Pool Exploitation on Windows 7]
3. [Windows Kernel Pool Spraying](http://trackwatch.com/windows-kernel-pool-spraying/)
4. [Source code of the exploit](https://github.com/cbayet/Exploit-CVE-2017-6008)