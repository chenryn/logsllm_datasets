### 7.1 The Class of Properties Our Unwinding Theorems Cover

Figure 7.1 illustrates the classes of security properties that our unwinding theorems can handle. The unshaded area in the figure represents these classes.

It may seem unusual that Separability is not included in these theorems. Our unwinding theorems are formulated in terms of states that are reachable from any given state. In contrast, Separability requires that all high-level traces be possible with all low-level traces, which is a property over the entire state machine and cannot be expressed solely in terms of reachable states.

### 7.4 Unwinding Theorems

An ideal unwinding theorem should have two key properties:
1. The required conditions should be expressible between a state and its immediate successors.
2. The system satisfies the desired property if and only if the unwinding condition holds for all states.

However, it is not always feasible to express the unwinding theorem condition between adjacent states. For instance, Goguen and Meseguer's unwinding theorem for non-interference can be expressed between a state and all its adjacent states, whereas Millenâ€™s unwinding theorem for 1-Forward Correctability cannot. We will not limit ourselves to theorems that can be expressed between adjacent states. Instead, we will focus on unwinding theorems that ensure the system satisfies the property if and only if the conditions are true for all states. This ensures that our unwinding theorems are both sound and complete.

### 7.5 Unwinding Theorem for Generalized Noninterference (GNI) and N-Forward Correctability

In this section, we present an unwinding theorem for Generalized Noninterference (GNI) and N-Forward Correctability. Before presenting the unwinding conditions, we define these properties in a way that simplifies the proofs of the theorems. The following definitions are based on Millen [Millen94].

**Definition 7.6: Simple Perturbation**
A trace \( d \) is a simple perturbation of \( t \) before \( g \) if there exists a high-level input event \( x \) such that for some \( b \):
1. \( t = b \)
2. \( t = b \cdot x \cdot g \) and \( d = b \cdot x \cdot g \) (inserting \( x \) into \( b \) before \( g \))
3. \( d = b \) and \( d = b \cdot x \cdot g \) (deleting \( x \) from \( b \) before \( g \))

**Definition 7.7: Correction**
A trace \( d' \) is a correction of \( d \) in \( g \) if \( d = f \) and \( d' = f' \) such that \( |(L \cup HI) = g'| \). Thus, a correction in \( g \) is a modification of high-level non-inputs in \( g \).

**Definition 7.8: N-Forward Correctability**
An event system \( S \) is N-Forward Correctable if for all traces \( LIn \), if \( d \) is a simple perturbation of \( t \) before either \( g \) or \( \alpha T \) and for all \( a \), \( |HI = \emptyset \) (i.e., \( g \) contains no high-level input events), then there exists a correction \( t' \) of \( d \) in \( g \) such that \( t' \in T \).

We note that \( -\)-Forward Correctability is Restrictiveness, and 0-Forward Correctability is forward correctable Generalized Noninterference. In Theorem 7.3, we will prove that the non-forward correctable GNI is equivalent to the forward correctable version in deterministic systems. That is, a correction can only occur before a perturbation in a non-deterministic system. Furthermore, we will demonstrate how to transform the NFA into one where the forward correctable definition of the security property can be applied.

### 7.5.1 Forward Correctable versus Non-Forward Correctable GNI

The non-forward correctable version is more challenging to handle than the forward correctable one. For the forward correctable version, only the possible futures need to be considered. If the system designer is evaluating state \( q \), only the states reachable from \( q \) need to be considered, as a correction to a perturbation can only affect future events. In a non-forward correctable system, a change to a trace may alter the path through the state machine. Therefore, if one is considering state \( q \), a change in the path from the start state may result in the system being in a state \( q' \neq q \).

The following theorem proves that we can always transform the state machine into one where causal techniques apply.

**Theorem 7.2: Transformation of NFA to DFA for Causal GNI**
Given an NFA \( M \), by:
1. Replacing all high-level output transitions with \( \lambda \) transitions.
2. Transforming the NFA to remove \( \lambda \) transitions.
3. Transforming the NFA to eliminate non-determinism,
we can obtain a deterministic finite automaton (DFA) \( M' \) such that the causal version of GNI can be used to evaluate the system.

**Proof:**
In \( M \), replace high-level output transitions with \( \lambda \) transitions and eliminate the \( \lambda \) transitions and non-determinism. Call this new DFA \( M' \). The transformation can be accomplished without changing the language of \( M \) [Wood87 pg. 118]. We must prove that if \( M' \) satisfies the causal version of the property, then \( M \) satisfies the non-causal version.

Let \( t \) be a trace that places the system in state \( q \in Q \) (of \( M \)) such that for a simple perturbation after \( t \), a correction would modify events in \( t \). After the modification of the events in \( t \), \( M \) will be in a state \( q' \). By definition, only High-Level Output events may be changed. Consider the effects on the states \( q \) and \( q' \) by replacing in \( M \) all High-Level Output transitions with \( \lambda \) transitions. The projections from the two states must be equal. If \( q = q' \), we are done since eliminating non-determinism will not affect this equality. If \( q \) and \( q' \) are different, there exists a non-deterministic choice that causes the path through the state machine to diverge. If this were not the case, the execution of \( t \) (after replacing the High-Level Output transitions with \( \lambda \) transitions) would place the system in state \( q \). Transforming the NFA to a DFA will result in the non-determinism being removed. Since there is no longer any non-determinism, the execution of \( t \) (after replacing High-Level Output transitions with \( \lambda \) transitions) will place the system in state \( q = q' \), and only future events from \( q \) need be considered.

**Theorem 7.2** demonstrates that a non-causal property can be transformed into a causal one by eliminating \( \lambda \) transitions and transforming the NFA to a DFA. If the property is causal, the elimination of \( \lambda \) transitions is not required, as the calculation of the projection from a state will implicitly remove them. However, the transformation from a NFA to a DFA must not be done in a causal system, as the nature of the non-determinism is important. If the non-determinism is eliminated, the property is transformed into its non-causal equivalent.

### 7.5.2 Unwinding Theorems

**Theorem 7.3: N-Forward Correctability Unwinding Theorem**
If \( M \) is the event system acceptor for the event system \( S \), \( S \) is N-Forward Correctable if and only if:
\[ \forall x \in HI, \forall y \in LIn, \forall q \in Q: p(q) = p(q/x) \text{ and } p(q/y) = p(q/x/a) \]

**Proof:**
There are four parts to this proof, corresponding to the two directions of the implication and whether the two state equivalencies hold, or whether the low inputs are present before \( g \) in the definition of N-Forward Correctability.

Suppose \( S \) is N-Forward Correctable. Assume \( x \in HI \) and \( q \in Q \). We will show that \( p(q) = p(q/x) \) in two steps. First, we will show that \( p(q/x) \subseteq p(q) \). By definition, there exists a trace \( s \) such that \( s \) is a simple perturbation of \( s \cdot x \cdot g \) before \( g \). Also, \( g \) has no high-level input events. By N-Forward Correctability, there exists a \( g' \) such that \( s' \in T \) and \( g' \mid L \cup HI = g \). Therefore, \( p(q/x) \subseteq p(q) \). The proof that \( p(q) \subseteq p(q/x) \) is similar. The same proof methods are used.

Assume \( p(q) = p(q/x) \) and \( p(q/y) = p(q/x/a) \). Consider a trace \( t \in T \) such that \( t \mid HI = \emptyset \). From the equivalence \( p(q) = p(q/x) \) and \( p(q/y) = p(q/x/a) \), there exists a \( g' \in p(q) \) such that \( b \) is the simple perturbation of \( b \cdot x \cdot g \) and has a correction \( b' \). Similarly, we can construct corrections for other simple perturbations. Therefore, the state machine satisfies N-Forward Correctability.

### Example Application

Figure 7.2 illustrates the system under consideration. The functionality of this system is unimportant; we will demonstrate that the state machine is Generalized Noninterference secure but is not 0-Forward Correctability secure.

Since we want to determine if it satisfies both forward correctable and non-forward correctable GNI, we must transform the state machine such that the forward correctable version is applicable. Figure 7.3(a) shows the results of replacing the high-level output transitions with \( \lambda \) transitions. Figure 7.3(b) shows the transformation to remove the \( \lambda \) transitions, and Figure 7.3(c) removes the non-determinism.

---

This revised text aims to provide a clearer, more coherent, and professional presentation of the original content.