为了从提供的日志条目中提取信息，可以使用以下Grok表达式进行解析：

```
%{DATA:log_file} %{TIMESTAMP_ISO8601:timestamp} %{NUMBER:pid} %{LOGLEVEL:log_level} %{JAVACLASS:class_name} \[%{UUID:request_id} - - - - -\] %{GREEDYDATA:resource_view}
```

这个Grok表达式的各个部分解释如下：
- `%{DATA:log_file}`：匹配日志文件名（例如 `nova-compute.log.2017-05-14_21:27:09`）。
- `%{TIMESTAMP_ISO8601:timestamp}`：匹配ISO 8601格式的时间戳（如 `2017-05-14T19:41:52.813`）。注意这里将原始的空格和点替换为T以符合ISO 8601标准。
- `%{NUMBER:pid}`：匹配进程ID（如 `2931`）。
- `%{LOGLEVEL:log_level}`：匹配日志级别（如 `INFO`）。
- `%{JAVACLASS:class_name}`：匹配类名或模块名（如 `nova.compute.resource_tracker`）。
- `\[%{UUID:request_id} - - - - -\]`：匹配请求ID及其后的固定模式（如 `[req-addc1839-2ed5-4778-b57e-5854eb7b8b09 - - - - -]`）。
- `%{GREEDYDATA:resource_view}`：贪婪地匹配剩余的日志消息部分（如 `Final resource view: name=myhost, value=512.0 MB`）。

请确保您的Grok环境中已定义了上述的所有模式。如果某些模式不存在，则可能需要自定义它们或调整现有模式来适应特定的日志结构。此外，根据实际的日志内容，您可能还需要对时间戳格式做适当调整以确保准确匹配。