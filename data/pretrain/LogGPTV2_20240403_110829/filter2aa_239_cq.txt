            class [mscorlib]System.Type, object>>
            DecompileSample.Program/'<>o__0'::'<>p__0'
      IL_005e: ldtoken    [mscorlib]System.Console
      IL_0063: call       class [mscorlib]System.Type [mscorlib]
        System.Type::GetTypeFromHandle(valuetype [mscorlib]
            System.RuntimeTypeHandle)
      IL_0068: ldloc.0
      IL_0069: ldfld      object DecompileSample.DynamicClass::DynValue
      IL_006e: callvirt   instance void class [mscorlib]System.Action`3
        ::Invoke(!0, !1, !2)
      IL_0073: nop
      IL_0074: call string [mscorlib]System.Console::ReadLine()
      IL_0079: pop
      IL_007a: ret
     } // end of method Program::Main
显然，C#编译器做了许多工作，以支持动态类型。在生成的代码中，会看到对
System.Runtime. 
CompilerServices.CallSite类和
System.Runtime.CompilerServices.CallSiteBinder类的引用。
CallSite是在运行期间处理查找操作的类型。在运行期间调用动态对象时，必须找到
该对象，看看其成员是否存在。CallSite会缓存这个信息，这样查找操作就不需要重复执
行。没有这个过程，循环结构的性能就有问题。
CallSite完成了成员查找操作后，就调用CallSiteBinder（）方法。它从CallSite中提取
信息，并生成表达式树，来表示绑定器绑定的操作。
显然这需要做许多工作。优化非常复杂的操作时要格外小心。显然，使用dynamic类
型是有用的，但它是有代价的。
16.6 DLR
使用dynamic类型的一个重要场景是使用Dynamic Language Runtime（动态语言运行
时，DLR）的一部分。DLR是添加到CLR的一系列服务，它允许添加动态语言，如Ruby
和Python，并使C#具备和这些动态语言相同的某些动态功能。
最初DLR的核心功能现在是完整.NET 
Framework 
4.5的一部分，DLR位于
System.Dynamic名称空间和System.Runtime.ComplierServices名称空间中。为了与IronRuby
和IronPython等脚本语言集成，需要安装DLR中额外的类型。这个DLR是IronRuby和
IronPython环境的一部分，它可以从http://ironpython.codeplex.com上下载。
IronRuby和IronPython是Ruby和Python语言的开源版本，它们使用DLR。Silverlight也
使用DLR。通过包含DLR，可以给应用程序添加脚本编辑功能。脚本运行库允许给脚本传
入变量和从脚本传出变量。
16.7 包含DLR ScriptRuntime
假定能给应用程序添加脚本编辑功能，并给脚本传入数值和从脚本传出数值，使应用
程序可以利用脚本完成工作。这些都是在应用程序中包含DLR的ScriptRuntime而提供的功
能。目前，IronPython和IronRuby都支持包含在应用程序中的脚本语言。
有了ScriptRuntime，就可以执行存储在文件中的代码段或完整的脚本。可以选择合适
的语言引擎，或者让DLR确定使用什么引擎。脚本可以在自己的应用程序域或者在当前的
应用程序域中创建。不仅可以给脚本传入数值并从脚本中传出数值，还可以在脚本中调用
在动态对象上创建的方法。
这种灵活性为包含ScriptRuntime提供了无数种用法。下面的示例说明了使用
ScriptRuntime的一种方式。假定有一个购物车应用程序，它的一个要求是根据某种标准计
算折扣。这些折扣常常随着新销售策略的启动和完成而变化。处理这个要求有许多方式，
本例将说明如何使用ScriptRuntime和少量Python脚本达到这个要求。
为了简单起见，本例是一个WPF 
Windows桌面应用程序。它也可以是一个大型Web
应用程序或任何其他应用程序的一部分。图16-3显示了这个应用程序的样例屏幕。为了使
用运行库，示例应用程序添加了NuGet包IronPython。
图16-3
该应用程序提取所购买的物品数量和物品的总价，并根据所选的单选按钮使用某个折
扣。在实际的应用程序中，系统使用略微复杂的方式确定要使用的折扣，但对于本例，单
选按钮就足够了。
下面是计算折扣的代码（代码文件DLRHostSample/MainWindow.xaml.cs）：
    private void OnCalculateDiscount(object sender, RoutedEventArgs e)
    {
      string scriptToUse;
      if (CostRadioButton.IsChecked.Value)
      {
        scriptToUse = "Scripts/AmountDisc.py";
      }
      else
      {
        scriptToUse = "Scripts/CountDisc.py";
      }
      ScriptRuntime scriptRuntime = ScriptRuntime.CreateFromConfiguration();
      ScriptEngine pythEng = scriptRuntime.GetEngine("Python");
      ScriptSource source = pythEng.CreateScriptSourceFromFile(scriptToUse);
      ScriptScope scope = pythEng.CreateScope();
      scope.SetVariable("prodCount", Convert.ToInt32(totalItems.Text));
      scope.SetVariable("amt", Convert.ToDecimal(totalAmt.Text));
      source.Execute(scope);
      textDiscAmount.Text = scope.GetVariable("retAmt").ToString();
    }
第一部分仅确定要应用折扣的脚本AmountDisc.py或CountDisc.py。AmountDisc.py根
据购买的金额计算折扣（代码文件DLRHostSample/Scripts/AmountDisc.py）。
    discAmt = .25
    retAmt = amt
    if amt > 25.00:
      retAmt = amt-(amt＊discAmt)
能打折的最低购买金额是$25。如果购买金额小于这个值，就不计算折扣，否则就使
用25%的折扣率。
CountDisc.py根据购买的物品数量计算折扣（代码文件
DLRHostSample/Scripts/ContDisc.py）：
    discCount = 5
    discAmt = .1
    retAmt = amt
    if prodCount > discCount:
      retAmt = amt-(amt＊discAmt)
在这个Python脚本中，购买的物品数量必须大于5，才能给总价应用10%的折扣率。
下一部分是启动ScriptRuntime环境。这需要执行4个特定的步骤：创建ScriptRuntime
对象、设置合适的ScriptEngine、创建ScriptSource以及创建ScriptScope。
ScriptRuntime对象是起点，也是包含ScriptRuntime的基础。它拥有包含环境的全局状
态。ScriptRuntime对象使用CreateFromConfiguration（）静态方法创建。app.config文件如
下所示（代码文件DLRHostSample/app.config）：
这段代码定义了“microsoft.scripting”的一部分，设置了IronPython语言引擎的几个属
性。
接着，从ScriptRuntime中获取一个对ScriptEngine的引用。在本例中，指定需要Python
引擎，但ScriptRuntime可以自己确定这一点，因为脚本的扩展名是py。
ScriptEngine完成了执行脚本代码的工作。执行文件或代码段中的脚本有几种方法。
ScriptEngine还提供了ScriptSource和ScriptScope。
ScriptSource对象允许访问脚本，它表示脚本的源代码。有了它，就可以操作脚本的
源代码。从磁盘上加载它，逐行解析它，甚至把脚本编译到CompiledCode对象中。如果
多次执行同一个脚本，这就很方便。
ScriptScope对象实际上是一个名称空间。要给脚本传入值或从脚本传出值，应把一个
变量绑定到ScriptScope上。本例调用SetVariable方法给Python脚本传入prodCount变量和
amt变量。它们是totalItems文本框和totalAmt文本框中的值。计算出来的折扣使用
GetVariable（）方法从脚本中检索。在本例中，retAmt变量包含了我们需要的值。
在CalcTax按钮中，调用了Python对象上的方法。CalcTax.py脚本是一个非常简单的方
法，它接受一个输入值，加上20%的税，再返回新值。代码如下（代码文件
DLRHostSample/Scripts/CalcTax.py）：
    def CalcTax(amount):
      return amount＊1.2
下面是调用CalcTax（）方法的C#代码（代码文件
DLRHostSample/MainWindow.xaml.cs）：
    private void OnCalculateTax(object sender, RoutedEventArgs e)
    {
      ScriptRuntime scriptRuntime = ScriptRuntime.CreateFromConfiguration();
      dynamic calcRate = scriptRuntime.UseFile("Scripts/CalcTax.py");
      decimal discountedAmount;
      if (! decimal.TryParse(textDiscAmount.Text, out discountedAmount))
      {
        discountedAmount = Convert.ToDecimal(totalAmt.Text);
      }
      totalTaxAmount.Text = calcRate.CalcTax(discountedAmount).ToString();
    }
这是一个非常简单的过程。这里再次使用与前面相同的配置设置创建了ScriptRuntime
对象。calRate是一个ScriptScope对象，它定义为动态对象，以便轻松地调用CalcTax（）
方法。这是使用动态类型简化编程工作的一个示例。
16.8 DynamicObject和ExpandoObject
如果要创建自己的动态对象，该怎么办？这有两种方法：从DynamicObject中派生，
或者使用ExpandoObject。使用DynamicObject需要做的工作较多，因为必须重写几个方
法。ExpandoObject是一个可立即使用的密封类。
16.8.1 DynamicObject
考虑一个表示人的对象。一般应定义名字、中间名和姓氏等属性。现在假定要在运行
期间构建这个对象，且系统事先不知道该对象有什么属性或该对象可能支持什么方法。此
时就可以使用基于DynamicObject的对象。需要这类功能的场合几乎没有，但到目前为
止，C#语言还没有提供该功能。
先看看DynamicObject（代码文件
DynamicSamples/DynamicSample/WroxDyamicObject.cs）：
    public class WroxDynamicObject : DynamicObject
    {
      private Dictionary _dynamicData = new Dictionary();
      public override bool TryGetMember(GetMemberBinder binder, out object result
)
      {
        bool success = false;
        result = null;
        if (_dynamicData.ContainsKey(binder.Name))
        {
          result = _dynamicData[binder.Name];
          success = true;
        }
        else
        {
          result = "Property Not Found! ";
          success = false;
        }
        return success;
      }
      public override bool TrySetMember(SetMemberBinder binder, object value)
      {
        _dynamicData[binder.Name] = value;
        return true;
      }
      public override bool TryInvokeMember(InvokeMemberBinder binder,
                                          object[] args, out object result)
      {
        dynamic method = _dynamicData[binder.Name];
        result = method((DateTime)args[0]);
        return result ! = null;
      }
    }
在这个示例中，重写了3个方法TrySetMember（）、TryGetMember（）和
TryInvokeMember（）。
TrySetMember（）方法给对象添加了新方法、属性或字段。本例把成员信息存储在
一个Dictionary对象中。传送给TrySetMember（）方法的SetMemberBinder对象包含Name
属性，它用于标识Dictionary中的元素。
TryGetMember（）方法根据GetMemberBinder对象的Name属性检索存储在Dictionary
中的对象。
下面的代码使用了刚才新建的动态对象（代码文件
DynamicSamples/DynamicSample/Program.cs）：
    dynamic wroxDyn = new WroxDynamicObject();
    wroxDyn.FirstName = "Bugs";
    wroxDyn.LastName = "Bunny";
    WriteLine(wroxDyn.GetType());
    WriteLine($"{wroxDyn.FirstName} {wroxDyn.LastName}");
看起来很简单，但在哪里调用了重写的方法？正是.NET 
Framework帮助完成了调
用。DynamicObject处理了绑定，我们只需要引用FirstName和LastName属性即可，就好像
它们一直存在一样。
添加方法很简单。可以使用上例中的WroxDynamicObject，给它添加
GetTomorrowDate（）方法，该方法接受一个DateTime对象为参数，返回表示第二天的日
期字符串。代码如下：
    dynamic wroxDyn = new WroxDynamicObject();
    Func GetTomorrow = today => today.AddDays(1).ToShortDateStr
ing();
    wroxDyn.GetTomorrowDate = GetTomorrow;
    WriteLine($"Tomorrow is {wroxDyn.GetTomorrowDate(DateTime.Now)}");
这段代码使用Func创建了委托GetTomorrow。该委托表示的方法调用了
AddDays，给传入的Date加上一天，返回得到的日期字符串。接着把委托设置为wroxDyn
对象上的GetTomorrowDate（）方法。最后一行调用新方法，并传递今天的日期。动态功
能再次发挥了作用，对象上有了一个有效的方法。
16.8.2 ExpandoObject
ExpandoObject的工作方式类似于上一节创建的WroxDynamicObject，区别是不必重写
方法，如下面的代码示例所示（代码文件
DynamicSamples/DynamicSample/WroxDynamicObject.cs）：
    static void DoExpando()
    {
      dynamic expObj = new ExpandoObject();
      expObj.FirstName = "Daffy";
      expObj.LastName = "Duck";
      WriteLine($"{expObj.FirstName} {expObj.LastName}");
      Func GetTomorrow = today => today.AddDays(1).ToShortDateS
tring();
      expObj.GetTomorrowDate = GetTomorrow;
      WriteLine($"Tomorrow is {expObj.GetTomorrowDate(DateTime.Now)}");
      expObj.Friends = new List();
      expObj.Friends.Add(new Person() { FirstName = "Bob", LastName = "Jones" });
      expObj.Friends.Add(new Person() { FirstName = "Robert", LastName = "Jones" 
});
      expObj.Friends.Add(new Person() { FirstName = "Bobby", LastName = "Jones" }
);
      foreach (Person friend in expObj.Friends)
      {
        WriteLine($"{friend.FirstName} {friend.LastName}");
      }
    }
注意，这段代码与前面的代码几乎完全相同，也添加了FirstName和LastName属性，
以及GetTomorrow函数，但它还多做了一件事——把一个Person对象集合添加为对象的一
个属性。
初看起来，这似乎与使用dynamic类型没有区别。但其中有两个微妙的区别非常重
要。第一，不能仅创建dynamic类型的空对象。必须把dynamic类型赋予某个对象，例如，
下面的代码是无效的：
    dynamic dynObj;
    dynObj.FirstName = "Joe";
与前面的示例一样，此时可以使用ExpandoObject。
第二，因为dynamic类型必须赋予某个对象，所以，如果执行GetType调用，它就会报
告赋予了dynamic类型的对象类型。所以，如果把它赋予int, GetType就报告它是一个int。
这不适用于ExpandoObject或派生自DynamicObject的对象。
如果需要控制动态对象中属性的添加和访问，则使该对象派生自DynamicObject是最
佳选择。使用DynamicObject，可以重写几个方法，准确地控制对象与运行库的交互方
式。而对于其他情况，就应使用dynamic类型或ExpandoObject。
下面是使用dynamic类型和ExpandoObject的另一个例子。假设需求是开发一个通用的
逗号分隔值（CSV）文件的解析工具。从一个扩展到另一个扩展时，不知道文件中将包含
什么数据，只知道值之间是用逗号分隔的，并且第一行包含字段名。
首先，打开文件并读入数据流。这可以用一个简单的辅助方法完成（代码文件
DynamicSamples/DynamicFileReader/DynamicFileHelper.cs）：
    private StreamReader OpenFile(string fileName)
    {
      if(File.Exists(fileName))
      {
        return new StreamReader(fileName);
      }
      return null;
    }
这段代码打开文件，并创建一个新的StreamReader来读取文件内容。
接下来要获取字段名。方法很简单：读取文件的第一行，使用Split函数创建字段名的
一个字符串数组。
    string[] headerLine = fileStream.ReadLine().Split(', ').Trim().ToArray();
接下来的部分很有趣：读入文件的下一行，就像处理字段名那样创建一个字符串数
组，然后创建动态对象。具体代码如下所示（代码文件
DynamicSamples/DynamicFileReader/DynamicFileHelper.cs）：
    public IEnumerable ParseFile(string fileName)