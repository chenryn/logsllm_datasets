### Running the OpenSSL Command for the First Time

When you run the provided command for the first time, it will take a few minutes to execute and will end with a command prompt. From this prompt, you can execute your OpenSSL commands to create the necessary keys, as described in the previous sections.

The `docker run` command starts an OpenSSL instance within a Docker container, with a volume mount that maps the `ch03/sample01` (or the current directory, indicated by `$(pwd)`) from the host file system to the `/export` directory of the container's file system. This volume mount allows you to share part of the host file system with the container. When the OpenSSL container generates certificates, they are written to the `/export` directory of the container. Since we have a volume mount, these files are also accessible from the `ch03/sample01` directory on the host file system.

### Generating a Private and Public Key for the cURL Client

To generate a private key and a public key for the cURL client, use the following OpenSSL command:

```sh
# openssl genrsa -out /export/privkey.pem 4096
```

Next, to generate a self-signed certificate corresponding to the private key (`privkey.pem`), use the following OpenSSL command:

```sh
# openssl req -key /export/privkey.pem -new -x509 -sha256 -nodes -out client.crt -subj "/C=US/ST=CA/L=SJC/O=Zee/OU=Bar/CN=client"
```

### Summary

- **Transport Layer Security (TLS)** is fundamental for securing any API.
- Securing APIs with TLS is the most common form of protection in API deployments.
- TLS ensures data confidentiality and integrity in transit, while mutual TLS (mTLS) protects APIs from intruders by enforcing client authentication.
- **OpenSSL** is a commercial-grade toolkit and cryptographic library for TLS, available on multiple platforms.

---

## Chapter 4: OAuth 2.0 Fundamentals

OAuth 2.0 represents a significant advancement in identity delegation. It evolved from OAuth 1.0 (see Appendix B) and was primarily influenced by OAuth Web Resource Authorization Profiles (see Appendix B). The main difference between OAuth 1.0 and 2.0 is that OAuth 1.0 is a standard protocol for identity delegation, whereas OAuth 2.0 is a highly extensible authorization framework. OAuth 2.0 is the de facto standard for securing APIs and is widely used by Facebook, Google, LinkedIn, Microsoft (MSN, Live), PayPal, Instagram, Foursquare, GitHub, Yammer, Meetup, and many more. Twitter is a notable exception, still using OAuth 1.0.

### Understanding OAuth 2.0

OAuth 2.0 primarily addresses the access delegation problem. For example, if you want a third-party application to read your status messages on Facebook, you would delegate access to your Facebook wall. One way to do this is by sharing your Facebook credentials with the third-party application, allowing it direct access to your Facebook wall. However, this approach has security risks, as the third-party application can misuse your credentials. OAuth 2.0 solves this by allowing you to share a time-bound, temporary token that is only good for a well-defined purpose. Figure 4-1 illustrates how access delegation works with OAuth 2.0, and the following steps explain the process:

1. **User Visits Third-Party Application**: The user visits the third-party web application and wants to allow it to publish messages to their Facebook wall. To do this, the web application needs a token from Facebook and redirects the user to Facebook.
2. **Facebook Authentication and Consent**: Facebook prompts the user to authenticate (if not already authenticated) and requests consent to give the third-party web application permission to publish messages to their Facebook wall.
3. **User Provides Consent**: The user authenticates and provides consent to Facebook, which then shares a token with the third-party web application. This token is only valid for a limited period and can only be used to publish messages to the Facebook wall.
4. **Third-Party Application Receives Token**: The third-party web application receives the token from Facebook. The exact process of obtaining the token will be discussed later in the chapter.
5. **Accessing the Facebook API**: The third-party web application uses the token to access the Facebook API. The API ensures that only requests with a valid token can access it. The details of this step will be explained later in the chapter.

### OAuth 2.0 Actors

OAuth 2.0 involves four key actors in a typical flow:

1. **Resource Owner**: The individual who owns the resources. In our example, the Facebook user who owns the Facebook wall is the resource owner.
2. **Resource Server**: The server hosting the protected resources. In this case, the server hosting the Facebook API is the resource server.
3. **Client**: The application that wants to access the resource on behalf of the resource owner. In this scenario, the third-party web application is the client.
4. **Authorization Server**: The entity that acts as a security token service, issuing OAuth 2.0 access tokens to client applications. In this use case, Facebook itself acts as the authorization server.

### Grant Types

A grant type in OAuth 2.0 defines how a client can obtain an authorization grant from a resource owner to access a resource on their behalf. The term "grant" originates from the French word "granter," meaning to give consent. In OAuth 2.0, a grant type specifies a well-defined process to get the resource owner's consent for a well-defined purpose, known as the scope. The scope defines what actions the client application can perform on a given resource. In Figure 4-1, the token issued by the Facebook authorization server is bound to a scope, allowing the client application to post messages to the user's Facebook wall.

The grant types in OAuth 2.0 are similar to the OAuth profiles in WRAP (see Appendix B). The OAuth 2.0 core specification introduces four core grant types: the authorization code grant type, the implicit grant type, the resource owner password credentials grant type, and the client credentials grant type. Table 4-1 shows how OAuth 2.0 grant types correspond to WRAP profiles.

| OAuth 2.0 | OAuth WRAP |
|-----------|------------|
| Authorization Code Grant Type | Web App Profile/Rich App Profile |
| Implicit Grant Type | - |
| Resource Owner Password Credentials Grant Type | Username and Password Profile |
| Client Credentials Grant Type | Client Account and Password Profile |

### Authorization Code Grant Type

The authorization code grant type in OAuth 2.0 is similar to the Web App Profile in WRAP. It is recommended for web applications or native mobile applications that can open a web browser. The resource owner initiates the authorization code grant type by visiting the client application. The client application, which must be registered with the authorization server, redirects the resource owner to the authorization server for approval. The following HTTP request is generated when redirecting the user to the authorization server's authorize endpoint:

```sh
https://authz.example.com/oauth2/authorize?
response_type=code&
client_id=0rhQErXIX49svVYoXJGt0DWBuFca&
redirect_uri=https%3A%2F%2Fmycallback
```

The `authorize` endpoint is a well-known, published endpoint of an OAuth 2.0 authorization server. The `response_type` parameter must be set to `code`, indicating that the request is for an authorization code. The `client_id` is an identifier for the client application, and the `redirect_uri` is the URL to which the authorization server will redirect the user after approval. The `scope` parameter can also be included to specify the level of access the client needs on the target resource/API.

In step 5, the authorization server returns the requested authorization code to the client application's registered callback URL (also known as `redirect_uri`). The authorization code should have a short lifetime, typically no longer than one minute:

```sh
https://callback.example.com/?code=9142d4cad58c66d0a5edfad8952192
```

The client application must then exchange the authorization code for an OAuth access token by sending a request to the authorization server's token endpoint. The token endpoint is usually secured, and the client application can include the `client_id` and `client_secret` in the HTTP Authorization header. The following is a sample request to the token endpoint:

```sh
curl -v â€“k -X POST --basic
-u 0rhQErXIX49svVYoXJGt0DWBuFca:eYOFkL756W8usQaVNgCNkz9C2D0a
-H "Content-Type:application/x-www-form-urlencoded;charset=UTF-8"
-d "grant_type=authorization_code&
    code=9142d4cad58c66d0a5edfad8952192&
    redirect_uri=https://mycallback"
    https://authz.example.com/oauth2/token
```

The authorization server responds with the access token and an optional refresh token. The `expires_in` parameter indicates the lifetime of the access token in seconds:

```json
{
  "token_type": "bearer",
  "expires_in": 3600,
  "refresh_token": "22b157546b26c2d6c0165c4ef6b3f736",
  "access_token": "cac93e1d29e45bf6d84073dbfb460"
}
```

Each refresh token has a longer lifetime compared to the access token, typically in days rather than minutes.

### Implicit Grant Type

The implicit grant type is used by JavaScript clients running in the web browser. However, it is not recommended due to inherent security issues, and the authorization code grant type with no client authentication is preferred. The implicit grant type does not have an equivalent profile in OAuth WRAP.

The JavaScript client initiates the implicit grant flow by redirecting the user to the authorization server. The `response_type` parameter in the request is set to `token`, indicating that the client expects a token, not a code. The client only needs to send the `client_id` in the request for logging and auditing purposes and to find the corresponding `redirect_uri`:

```sh
https://authz.example.com/oauth2/authorize?
response_type=token&
client_id=0rhQErXIX49svVYoXJGt0DWBuFca&
redirect_uri=https%3A%2F%2Fmycallback
```

The response includes the access token as a URI fragment, without providing a refreshing mechanism:

```sh
https://callback.example.com/#access_token=cac93e1d29e45bf6d84073dbfb460&expires_in=3600
```

Unlike the authorization code grant type, the implicit grant type client receives the access token directly in the response to the grant request. The browser never sends the URI fragment to the back end, so the client application must return an HTML page with JavaScript to extract the access token from the URI fragment.

### Resource Owner Password Credentials Grant Type

The resource owner password credentials grant type requires the resource owner to trust the client application. This is equivalent to the Username and Password Profile in OAuth WRAP. The resource owner must provide their credentials directly to the client application.

The following cURL command sends a request to the authorization server's token endpoint, passing the resource owner's username and password as parameters. The client application also proves its identity, typically using HTTP Basic authentication:

```sh
curl -v -k -X POST --basic
-u 0rhQErXIX49svVYoXJGt0DWBuFca:eYOFkL756W8usQaVNgCNkz9C2D0a
-H "Content-Type:application/x-www-form-urlencoded;charset=UTF-8"
-d "grant_type=password&
    username=admin&password=admin"
    https://authz.example.com/oauth2/token
```

The response includes an access token and a refresh token:

```json
{
  "token_type": "bearer",
  "expires_in": 3600,
  "refresh_token": "22b157546b26c2d6c0165c4ef6b3f736",
  "access_token": "cac93e1d29e45bf6d84073dbfb460"
}
```

### Note

The authorization server must treat the authorization code, access token, refresh token, and client secret key as sensitive data. These tokens should never be sent over HTTP and must be transmitted using Transport Layer Security (TLS). They should also be stored securely, possibly by encrypting or hashing them.