title:Supercharging planetlab: a high performance, multi-application, overlay
network platform
author:Jonathan S. Turner and
Patrick Crowley and
John D. DeHart and
Amy Freestone and
Brandon Heller and
Fred Kuhns and
Sailesh Kumar and
John W. Lockwood and
Jing Lu and
Michael Wilson and
Charles Wiseman and
David Zar
Supercharging PlanetLab – A High Performance,  
Multi-Application, Overlay Network Platform 
Jon Turner 
Washington University 
+1-314-935-8552 
PI:EMAIL 
Patrick Crowley 
Washington University 
+1-314-935-9186 
PI:EMAIL 
John DeHart 
Washington University 
+1-314-935-7329 
PI:EMAIL 
Amy Freestone 
Washington University 
+1-314-935-6160 
PI:EMAIL 
Brandon Heller 
Washington University 
+1-314-935-6160 
PI:EMAIL 
Fred Kuhns 
Washington University 
+1-314-935-6598 
PI:EMAIL 
Sailesh Kumar 
Washington University 
+1-314-935-6160 
PI:EMAIL 
John Lockwood 
Washington University 
+1-314-935-4460 
PI:EMAIL 
Jing Lu 
Washington University 
+1-314-935-4658 
PI:EMAIL 
Michael Wilson 
Washington University 
+1-314-935-6160 
PI:EMAIL 
Charles Wiseman 
Washington University 
+1-314-935-6160 
PI:EMAIL 
David Zar 
Washington University 
+1-314-935-4876 
PI:EMAIL
ABSTRACT 
In  recent  years,  overlay  networks  have  become  an  important 
vehicle  for  delivering  Internet  applications.  Overlay  network 
nodes are typically implemented using general purpose servers or 
clusters.  We  investigate  the  performance  benefits  of  more  inte-
grated architectures, combining general-purpose servers with high 
performance  Network  Processor  (NP)  subsystems.  We  focus  on 
PlanetLab  as  our  experimental  context  and  report  on  the  design 
and evaluation of an experimental PlanetLab platform capable of 
much higher levels of performance than typical system configura-
tions. To make it easier for users to port applications, the system 
supports a fast path/slow path application structure that facilitates 
the mapping of the most performance-critical parts of an applica-
tion  onto  an  NP  subsystem,  while  allowing  the  more  complex 
control  and  exception-handling  to  be  implemented  within  the 
programmer-friendly  environment  provided  by  conventional 
servers.  We  report  on  implementations  of  two  sample  applica-
tions, an IPv4 router, and a forwarding application for the Internet 
Indirection  Infrastructure.  We  demonstrate  an  80×  improvement 
in packet processing rates and comparable reductions in latency. 
This work supported in part by NSF (grants 0520778 and 0626661).  
Permission to  make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise,
or  republish,  to  post  on  servers  or  to  redistribute  to  lists,  requires  prior
specific permission and/or a fee. 
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan. 
Copyright 2007 ACM 978-1-59593-713-1/07/0008...$5.00. 
Categories  and  Subject  Descriptors.  C.2.1 
[Computer-
Communications Networks]: Network Architecture and Design 
– network communication 
General Terms. router architecture, performance 
Keywords.  PlanetLab,  overlay  networks,  network  processors, 
Global Environment for Network Innovation (GENI) 
1. INTRODUCTION 
Network overlays have become  a popular tool for implementing 
Internet applications. While content-delivery networks provide the 
most  prominent  example  of  the  commercial  application  of  over-
lays [DI02, KO04], systems researchers have developed a variety 
of  experimental  overlay  applications,  demonstrating  that  the 
overlay  approach  can  be  an  effective  method  for  deploying  a 
broad  range  of  innovative  systems  [BH06,  FR04,RH05,  ST02]. 
Rising traffic volumes in overlay networks make the performance 
of  overlay  nodes  an  issue  of  growing  importance.  Currently, 
overlays  nodes  are  constructed  using  general  purpose  servers, 
often organized into a cluster with a load-balancing switch acting 
as  a  front  end.  This  paper  explores  an  alternative  approach  that 
combines  general  purpose  server  blades  and  high  performance 
Network  Processor  (NP)  subsystems  into  an  integrated  architec-
ture designed to support multiple applications concurrently. 
To provide a concrete target for the research, and to facilitate 
the  system’s  deployment  and  use  by  others,  we  have  chosen  to 
focus on the design of a high performance node for the PlanetLab 
overlay network testbed [CH03, PE02]. In the roughly five years 
since its inception, PlanetLab has become a popular experimental 
platform and deployment vehicle for systems researchers in net-
working  and  distributed  systems.  PlanetLab  nodes  are  imple-
mented  using  conventional  PCs,  running  a  modified  version  of 
Linux. This provides a familiar implementation environment and 
is inexpensive and easy to deploy. At the same time, it does have 
significant performance limitations that have become increasingly 
apparent as the usage of PlanetLab has grown, and as researchers 
have sought to deploy long-running services that carry significant 
volumes  of  traffic.  Because  PlanetLab  applications  run  as  user-
space processes, their packet forwarding rates are typically limited 
to under 50K packets per second, which translates to less than 100 
Mb/s for average packet lengths of 250 bytes. Applications that do 
significant  processing  of  packets  (rather  than  simply  forwarding 
them) can have substantially smaller packet forwarding rates. In 
addition,  applications  running  in  PlanetLab  are  subject  to  high 
latencies (tens of milliseconds per hop), high delay jitter and poor 
performance  isolation.  These  characteristics  are  caused  by  the 
coarse-grained time-slicing provided by the operating system, and 
the failure to properly account for OS-level processing on behalf 
of different application processes. 
To address these issues, we have developed an experimental 
system that can serve as a high performance PlanetLab node. Our 
Supercharged  PlanetLab  Platform  (SPP)  integrates  general  pur-
pose  server  blades  with  performance-optimized  NP  subsystems, 
into  a  platform  that  delivers  the  flexibility  and  ease-of-use  of  a 
conventional  PlanetLab  implementation,  while  delivering  much 
higher levels of performance. By supporting a simple and familiar 
fast-path/slow-path  application  structure,  we  make  it  straight-
forward  for  researchers  to  map  the  high  volume  part  of  their 
applications  (which  is  typically  fairly  small)  onto  the  NP  re-
sources,  while  enabling  them  to  implement  the  more  complex 
parts  in  the  programmer-friendly  environment  offered  by  a  gen-
eral-purpose  server.  We  report  on  the  implementation  of  two 
applications running in this environment, that demonstrate packet 
forwarding rates of 4.8 million packets per second for a single NP 
subsystem; this is sufficient for throughputs of 5 Gb/s for average 
packet lengths of just 130 bytes. We also report latencies that are 
consistently  less  than  200  μs.  It  should  be  noted  that  while  we 
focus on PlanetLab as the implementation context for this work, 
our  broader  objective  is  to  understand  the  design  of  such  plat-
forms for more general contexts, such as future commercial over-
lay  hosting  services  that  are  likely  to  be  far  less  resource-
constrained than PlanetLab. So, while some aspects of the archi-
tecture  exceed  current  requirements  for  PlanetLab,  they  can  be 
important in other settings.  
Section  2  of  the  paper  provides  an  overview  of  the  system, 
setting  the  context  for  the  more  detailed  presentation  in  later 
sections. Section 3, provides some background on network proc-
essors  generally,  and  the  IXP  2850,  in  particular.  Section  4  de-
scribes  the  software  framework  that  enables  the  fast  path 
processing of multiple PlanetLab slices to co-exist within a single 
network  processor.  Section  5  briefly  discusses  our  strategy  for 
improving  the  performance  of  the  general  purpose  processor 
Remote Login Interface
Remote Login Interface
out-of-band
out-of-band
control
control
Slice
Slice
Manager
Manager
shared
shared
server
server
Control Interface
Control Interface
Filters
Filters
Parse
Parse
Lookup
Lookup
Fast Path
Fast Path
Hdr
Hdr
Format
Format
Queue
Queue
Manager
Manager
.
.
.
.
.
.
.
.
.
.
.
.
l
l
o
o
r
r
t
t
n
n
o
o
c
c
d
d
n
n
a
a
b
b
-
-
n
n
i
i
s
s
t
t
e
e
k
k
c
c
a
a
p
p
n
n
o
o
i
i
t
t
p
p
e
e
c
c
x
x
e
e
&
&
t
t
u
u
p
p
t
t
u
u
o
o
s
s
e
e
c
c
a
a
f
f
r
r
e
e
t
t
n
n
i
i
l
l
o
o
r
r
t
t
n
n
o
o
c
c
d
d
n
n
a
a
b
b
-
-
n
n
i
i
s
s
t
t
e
e
k
k
c
c
a
a
p
p
n
n
o
o
i
i
t
t
p
p