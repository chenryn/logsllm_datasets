2.19.0.2. Example 2-36. 使用 md5 模块获得十六进制或 base64 编码的 md5
值
File: md5-example-2.py
import md5
import string
import base64
hash = md5.new()
hash.update("spam, spam, and eggs")
value = hash.digest()
print hash.hexdigest()
# before 2.0, the above can be written as
# 在 2.0 前, 以上应该写做:
# print string.join(map(lambda v: "%02x" % ord(v), value), "")
print base64.encodestring(value)
4c054aa3b6eda37560c57283b71046c3
TAVKo7bto3VgxXKDtxBGww==
Example 2-37 展示了如何使用 md5 校验和来处理口令的发送与应答的验证(不
过我们将稍候讨论这里使用随机数字所带来的问题).
2.19.0.3. Example 2-37. 使用 md5 模块来处理口令的发送与应答的验证
File: md5-example-3.py
import md5
import string, random
def getchallenge():
# generate a 16-byte long random string. (note that the built-
# in pseudo-random generator uses a 24-bit seed, so this is not
# as good as it may seem...)
# 生成一个 16 字节长的随机字符串. 注意内建的伪随机生成器
# 使用的是 24 位的种子(seed), 所以这里这样用并不好..
challenge = map(lambda i: chr(random.randint(0, 255)), range(16))
return string.join(challenge, "")
def getresponse(password, challenge):
# calculate combined digest for password and challenge
# 计算密码和质询(challenge)的联合密文
m = md5.new()
m.update(password)
m.update(challenge)
return m.digest()
#
# server/client communication
# 服务器/客户端通讯
# 1. client connects. server issues challenge.
# 1. 客户端连接, 服务器发布质询(challenge)
print "client:", "connect"
challenge = getchallenge()
print "server:", repr(challenge)
# 2. client combines password and challenge, and calculates
# the response.
# 2. 客户端计算密码和质询(challenge)的组合后的密文
client_response = getresponse("trustno1", challenge)
print "client:", repr(client_response)
# 3. server does the same, and compares the result with the
# client response. the result is a safe login in which the
# password is never sent across the communication channel.
# 3. 服务器做同样的事, 然后比较结果与客户端的返回,
# 判断是否允许用户登陆. 这样做密码没有在通讯中明文传输.
server_response = getresponse("trustno1", challenge)
if server_response == client_response:
print "server:", "login ok"
client: connect
server: '\334\352\227Z#\272\273\212KG\330\265\032>\311o'
client: "l'\305\240-x\245\237\035\225A\254\233\337\225\001"
server: login ok
Example 2-38 提供了 md5 的一个变种, 你可以通过标记信息来判断它是否在
网络传输过程中被修改(丢失).
2.19.0.4. Example 2-38. 使用 md5 模块检查数据完整性
File: md5-example-4.py
import md5
import array
class HMAC_MD5:
# keyed md5 message authentication
def _ _init_ _(self, key):
if len(key) > 64:
key = md5.new(key).digest()
ipad = array.array("B", [0x36] * 64)
opad = array.array("B", [0x5C] * 64)
for i in range(len(key)):
ipad[i] = ipad[i] ^ ord(key[i])
opad[i] = opad[i] ^ ord(key[i])
self.ipad = md5.md5(ipad.tostring())
self.opad = md5.md5(opad.tostring())
def digest(self, data):
ipad = self.ipad.copy()
opad = self.opad.copy()
ipad.update(data)
opad.update(ipad.digest())
return opad.digest()
#
# simulate server end
# 模拟服务器端
key = "this should be a well-kept secret"
message = open("samples/sample.txt").read()
signature = HMAC_MD5(key).digest(message)
# (send message and signature across a public network)
# (经过由网络发送信息和签名)
#
# simulate client end
#模拟客户端
key = "this should be a well-kept secret"
client_signature = HMAC_MD5(key).digest(message)
if client_signature == signature:
print "this is the original message:"
print
print message
else:
print "someone has modified the message!!!"
copy 方法会对这个内部对象状态做一个快照( snapshot ). 这允许你预先计算
部分密文摘要(例如 Example 2-38 中的 padded key).
该算法的细节请参阅 HMAC-MD5:Keyed-MD5 for Message Authentication
( http://www.research.ibm.com/security/draft-ietf-ipsec-hmac-md5-00.t
xt ) by Krawczyk, 或其他.
千万别忘记内建的伪随机生成器对于加密操作而言并不合适. 千万小心.
2.20. sha 模块
sha 模块提供了计算信息摘要(密文)的另种方法, 如 Example 2-39 所示. 它
与 md5 模块类似, 但生成的是 160 位签名.
2.20.0.1. Example 2-39. 使用 sha 模块
File: sha-example-1.py
import sha
hash = sha.new()
hash.update("spam, spam, and eggs")
print repr(hash.digest())
print hash.hexdigest()
'\321\333\003\026I\331\272-j\303\247\240\345\343Tvq\364\346\311'
d1db031649d9ba2d6ac3a7a0e5e3547671f4e6c9
关于 sha 密文的使用, 请参阅 md5 中的例子.
2.21. crypt 模块
(可选, 只用于 Unix) crypt 模块实现了单向的 DES 加密, Unix 系统使用这个
加密算法来储存密码, 这个模块真正也就只在检查这样的密码时有用.
Example 2-40 展示了如何使用 crypt.crypt 来加密一个密码, 将密码和 salt
组合起来然后传递给函数, 这里的 salt 包含两位随机字符. 现在你可以扔掉
原密码而只保存加密后的字符串了.
2.21.0.1. Example 2-40. 使用 crypt 模块
File: crypt-example-1.py
import crypt
import random, string
def getsalt(chars = string.letters + string.digits):
# generate a random 2-character 'salt'
# 生成随机的 2 字符 'salt'
return random.choice(chars) + random.choice(chars)
print crypt.crypt("bananas", getsalt())
'py8UGrijma1j6'
确认密码时, 只需要用新密码调用加密函数, 并取加密后字符串的前两位作为
salt 即可. 如果结果和加密后字符串匹配, 那么密码就是正确的. Example
2-41 使用 pwd 模块来获取已知用户的加密后密码.
2.21.0.2. Example 2-41. 使用 crypt 模块身份验证
File: crypt-example-2.py
import pwd, crypt
def login(user, password):
"Check if user would be able to log in using password"
try:
pw1 = pwd.getpwnam(user)[1]
pw2 = crypt.crypt(password, pw1[:2])
return pw1 == pw2
except KeyError:
return 0 # no such user
user = raw_input("username:")
password = raw_input("password:")
if login(user, password):
print "welcome", user
else:
print "login failed"
关于其他实现验证的方法请参阅 md5 模块一节.
2.22. rotor 模块
这个模块在 2.3 时被声明不赞成, 2.4 时废了. 因为它的加密算法不安全.
- Feather
(可选) rotor 模块实现了一个简单的加密算法. 如 Example 2-42 所示. 它的
算法基于 WWII Enigma engine.
2.22.0.1. Example 2-42. 使用 rotor 模块
File: rotor-example-1.py
import rotor
SECRET_KEY = "spam"
MESSAGE = "the holy grail"
r = rotor.newrotor(SECRET_KEY)
encoded_message = r.encrypt(MESSAGE)
decoded_message = r.decrypt(encoded_message)
print "original:", repr(MESSAGE)
print "encoded message:", repr(encoded_message)
print "decoded message:", repr(decoded_message)
original: 'the holy grail'
encoded message: '\227\271\244\015\305sw\3340\337\252\237\340U'
decoded message: 'the holy grail'
2.23. zlib 模块
(可选) zlib 模块为 "zlib" 压缩提供支持. (这种压缩方法是 "deflate".)
Example 2-43 展示了如何使用 compress 和 decompress 函数接受字符串参
数.
2.23.0.1. Example 2-43. 使用 zlib 模块压缩字符串
File: zlib-example-1.py
import zlib
MESSAGE = "life of brian"
compressed_message = zlib.compress(MESSAGE)
decompressed_message = zlib.decompress(compressed_message)
print "original:", repr(MESSAGE)
print "compressed message:", repr(compressed_message)
print "decompressed message:", repr(decompressed_message)
original: 'life of brian'
compressed message:
'x\234\313\311LKU\310OSH*\312L\314\003\000!\010\004\302'
decompressed message: 'life of brian'
文件的内容决定了压缩比率, Example 2-44 说明了这点.
2.23.0.2. Example 2-44. 使用 zlib 模块压缩多个不同类型文件
File: zlib-example-2.py
import zlib
import glob
for file in glob.glob("samples/*"):
indata = open(file, "rb").read()
outdata = zlib.compress(indata, zlib.Z_BEST_COMPRESSION)
print file, len(indata), "=>", len(outdata),
print "%d%%" % (len(outdata) * 100 / len(indata))
samples\sample.au 1676 => 1109 66%
samples\sample.gz 42 => 51 121%
samples\sample.htm 186 => 135 72%
samples\sample.ini 246 => 190 77%
samples\sample.jpg 4762 => 4632 97%
samples\sample.msg 450 => 275 61%
samples\sample.sgm 430 => 321 74%
samples\sample.tar 10240 => 125 1%
samples\sample.tgz 155 => 159 102%
samples\sample.txt 302 => 220 72%
samples\sample.wav 13260 => 10992 82%
你也可以实时地压缩或解压缩数据, 如 Example 2-45 所示.
2.23.0.3. Example 2-45. 使用 zlib 模块解压缩流
File: zlib-example-3.py
import zlib
encoder = zlib.compressobj()
data = encoder.compress("life")
data = data + encoder.compress(" of ")
data = data + encoder.compress("brian")
data = data + encoder.flush()
print repr(data)
print repr(zlib.decompress(data))
'x\234\313\311LKU\310OSH*\312L\314\003\000!\010\004\302'
'life of brian'
Example 2-46 把解码对象封装到了一个类似文件对象的类中, 实现了一些文件
对象的方法, 这样使得读取压缩文件更方便.
2.23.0.4. Example 2-46. 压缩流的仿文件访问方式
File: zlib-example-4.py
import zlib
import string, StringIO
class ZipInputStream:
def _ _init_ _(self, file):
self.file = file
self._ _rewind()
def _ _rewind(self):
self.zip = zlib.decompressobj()
self.pos = 0 # position in zipped stream
self.offset = 0 # position in unzipped stream
self.data = ""
def _ _fill(self, bytes):
if self.zip:
# read until we have enough bytes in the buffer
while not bytes or len(self.data)  self.offset:
if not self.read(min(position - self.offset, 16384)):
break
def tell(self):
return self.offset
def read(self, bytes = 0):
self._ _fill(bytes)
if bytes:
data = self.data[:bytes]
self.data = self.data[bytes:]
else:
data = self.data
self.data = ""
self.offset = self.offset + len(data)
return data
def readline(self):
# make sure we have an entire line
while self.zip and "\n" not in self.data:
self._ _fill(len(self.data) + 512)
i = string.find(self.data, "\n") + 1
if i ", "exec")
if co:
# got a complete statement. execute it!
print "-"*40
print script,
print "-"*40