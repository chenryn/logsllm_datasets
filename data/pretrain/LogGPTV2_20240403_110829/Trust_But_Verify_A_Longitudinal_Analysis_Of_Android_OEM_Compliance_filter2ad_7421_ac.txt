across 42 different vendors and cover 1,403 different device models.
For what concerns the SDK distribution, our dataset covers the
Android system’s evolution from version 2.3.3 to version 9 (i.e.,
from SDK 10 to 28). The oldest image dates back to 2010, while
the newest is from 2020. Figure 1 presents the distribution of our
dataset in terms of SDK distribution.
According to public statistics [22], our dataset
is also
heterogeneous in terms of coverage of different vendors: half of
our dataset is constituted by “big players” (e.g., Samsung, Huawei,
LG, and Xiaomi), while the remaining ROMs belong to vendors
with a market share less than 4% (e.g., Google, Lenovo, Mobicel,
Motorola, Oppo, Realme, and Vivo).
Moreover, as discussed in the previous section, our customization
analysis needs to compare a given ROM against its associated
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
91
16<=1718192122232425262728SDK Level0%5%10%15%20%Percentage over a total of 2907 entries“base image.” To this end, we also created a set of 326 ROMs by
compiling all AOSP versions (i.e., tags) that are the base image
of a least one ROM in our dataset (as discussed in Section III-B).
Obviously, these last 326 ROMs are not counted in our statistics.
the ro.build.version.sdk property
To identify the tag of the AOSP base image, we relied
on the ro.build.id value for the 88% (2,566) of our
dataset. For 9% (261) of the ROMs we combined instead the
information from the build date (ro.build.date.utc)
with
values.
Finally, we relied on the information contained in the
ro.com.google.gmsversion property
2% (59)
of the ROM and the value of the ro.build.description
for the remaining 23 ROMs. Note that all the 2,907 ROMs in our
dataset contain apps from the Google Suite; thus, we can assume
they all obtained the GMS certification from Google.
for
V. COMPLIANCE
All the ROMs in our dataset are branded Android and contain
apps from the Google Suite (and thus obtained the GMS
certifications). Therefore, one would expect them to be compliant
with the mandatory requirements of the CDD.
This is important because system security aspects always played
a crucial role in the CDD, which contained an entire chapter
dedicated to the Security Model Compatibility since its first edition
in 2009. Mandatory requirements are clearly marked as “must,”
and a failure to implement them is a clear violation of the CDD.
Alternatively, a feature can be defined as strongly recommended:
in this case, not implementing such a feature is not a strict violation
of the CDD. This section discusses our analysis and findings.
We manually extracted all these requirements from the CDD of
Android 1.6 to Android 9, as summarized in Table I. In order of
appearance, the first system hardening requirement was introduced
in the CDD of Android 4.3, where Google announced the support
of SELinux for Android devices. Therefore all ROMs based on
Android 4.3+ must support and implement the SELinux Mandatory
Access Control. Then, starting from Android 7, the Security Model
Compatibility section has focused mainly on kernel configuration
options. Surprisingly, the CDD security requirements do not
mention user-space hardening until Android 9, and the only
user-space hardening requirement is defined only as strongly
recommended. Since the introduction of Project Treble made
updates faster and easier for OEMs to roll out to devices and
introduced several tests to verify and test the OS kernel, we present
our results divided before and after its introduction. This distinction
can help us understand to which extent the introduction of Project
Treble was able to mitigate the problem of Android customizations.
A. Kernel Configurations Compliance
As discussed in Section III-F, for each of the 2,907 ROMs,
we analyzed their Linux-based kernel binary to identify potential
misconfigurations in contrast with the strict requirements defined
in the CDD. However, we identified that 262 ROMs in our dataset
did not contain the kernel binary, and therefore we excluded them
from our analysis.
For 249 of the remaining 2,645 kernels, our system was unable to
extract neither their kernel configuration nor the symbols from the
92
kernel binary. This is because those kernels were compiled without
the CONFIG_IKCONFIG and CONFIG_MODULES [23]
configurations. However, as described in [24], both configurations
must be enabled for kernels targeting Android 8.0 and higher.
Besides, by reading the Core Kernel Requirements [24] defined in
the Vendor Test Suite (VTS) for Android 8.0 and higher, we noticed
how the configuration of these 249 kernels should violate and
fail the tests. Out of the 249 kernels missing these configurations,
162 corresponded to the Android version ≥ 8.0. Thus, as the first
result of this analysis, we highlight how these 162 kernels are not
compliant with Android, and these misconfigurations should have
been detected by the correspondent VTS. This casts a shadow on
the strictness of these requirements’ enforcement, especially since
some of these could have been automatically checked.
For the other 2,396 kernels, we retrieved the textual configuration
from 561 kernels and the symbol table for the remaining. Identifying
violations on kernels having their configuration is straightforward
as the CDD precisely indicates which configuration options must
be used. On the other hand, verifying violations with the only
support of the kernel binary symbols is not immediate. However, we
noticed how almost every kernel configuration defined in the CDD
introduces a set of specific symbols, and therefore it is possible
to infer a specific compilation flag based on the symbols included
within the binary (Table VI, in Appendix, shows the mappings
between kernel configuration and symbols).
It is important to note that since some flags are interchangeable,
we conservatively mark a kernel to be not compliant if and only
if it does not implement any of the available options. For example,
if a kernel adopts CONFIG_CC_STACKPROTECTOR_STRONG
rather than CONFIG_CC_STACKPROTECTOR_REGULAR, we
do not mark it as not compliant since the CDD requires the vendor
to implement at least one of the two.
Our analysis identified that 7.9% (190 out of 2,396) of the
kernels (from 10 different vendors) violate the CDD for their
specific Android version since they do not implement one or more
mandatory security requirement.
Amongst these 162 are used in ROMs re-architectured with
Project Treble, thus targeting an Android version greater or equal
than 8.0. The most common violation, found on 150 kernels, relates
to the absence of kernel memory protections aimed at marking
sensitive memory regions and sections read-only or non-executable
(which can be enabled with CONFIG_DEBUG_RODATA or
CONFIG_STRICT_KERNEL_RWX).
We also identified 10% (241 out of 2,396) of the kernels (from
10 vendors) do not implement one or more strongly recommended
features. This time, we noticed how 160 vendors did not enable
CONFIG_RANDOMIZE_BASE (no Kernel Address Space Layout
Randomization); hence, these kernels do not implement any random-
ization of their base address once loaded. Although these features
are not mandatory, the Vendor Test Suites inform the vendor if any
strongly recommended features are missing. Thus, even though
these vendors were warned about the lack of these features, they
ignored the advice and did not include them in their final product.
Table II shows the evolution of violations across different SDK
levels. The table shows that the re-architecture introduced with
Project Treble and the testing performed with the VTS are not
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
KNOWLEDGE BASE: THE TABLE SUMMARIZES ALL THE SYSTEM HARDENING REQUIREMENTS DEFINED IN THE ANDROID COMPATIBILITY DEFINITION DOCUMENT
(BOTH THE must (I.E., MANDATORY) AND THE strongly recommended) THIRD-PARTY VENDORS SHOULD IMPLEMENT TO BRAND THEMSELVES AS “ANDROID”
TABLE I
SDK
Version
4 - 17
18
19
1.6 - 4.2
4.3
4.4
20 - 23
5.0 - 6.1
MUST
CDD
–
SELinux: support Permissive Mode
SELinux: contexts installd, netd, and vold in Enforcing Mode
SELinux: global Enforcing Mode
SELinux: all domains in Enforcing Mode
SELinux: not modify, omit, or replace the neverallow rules
present within the SELinux AOSP folder
24 - 25
7.0 - 7.1 Kernel: support for seccomp-BPF support (TSYNC)
26 - 27
8.0 - 8.1
Kernel: support for
CONFIG CC STACKPROTECTOR REGULAR or
CONFIG CC STACKPROTECTOR STRONG
Kernel: support for CONFIG DEBUG RODATA or
CONFIG STRICT KERNEL RWX
Kernel: support for CONFIG PAGE TABLE ISOLATION
or CONFIG UNMAP KERNEL AT EL0
Kernel: support for CONFIG HARDENED USERCOPY
28
9
VIOLATIONS REGARDING THE KERNEL CONFIGURATION
TABLE II
SDK Version
18
19
26
27
28
4.3
4.4
8.0
8.1
9.0
# Kernel
77
599
145
140
196
2396
# Violations
CDD
26 (33.8%)
3 (0.5%)
50 (34.5%)
33 (23.6%)
78 (39.8%)
190 (7.9%)
# Strongly
Recommended
–
–
70 (48.3%)
66 (47.1%)
101 (51.5%)
237 (9.9%)
enough to counter the problem of customization on Android from
the Kernel Security perspective.
On the contrary, it can be observed that many kernels still do
not comply with the directives imposed by Google and continue to
release on the market devices equipped with kernels that do not meet
the mandatory security specifications. The numerous tests should
have identified (and likely actually did identify) all these violations,
which would be enough to mark the final ROMs as non-compliant.
B. SELinux Compliance
For each Android version that supports SELinux, AOSP provides
a standard policy that vendors can use as a base to build and
customize their SELinux configuration. As discussed in Sec-
tion III-D, starting from Android 4.3, Google introduced as a
strong requirement that all third-party vendors must adopt this new
Mandatory Access Control system. The CDD mandates that third-
party vendors must support SELinux in Permissive Mode1. Instead,
from Android 4.4, Google started to protect few critical services with
SELinux and forced the vendors to do the same: hence, vendors were
required to set up SELinux in Enforcing Mode at least for the three
domains installd, netd, and vold. Starting from Android
1When SELinux runs in Permissive Mode, every violation is logged, but not
enforced, so to provide vendors enough information for an adequate fix to the
component causing the error.
93
STRONGLY
RECOMMENDED
–
–
SELinux: other domains remain in Permissive Mode
–
–
Kernel: support for data read-only after initialization
( ro after init)
Kernel: support for
CONFIG HARDENED USERCOPY
Kernel: support for CONFIG CPU SW DOMAIN PAN or
CONFIG ARM64 SW TTBR0 PAN
Kernel: support for CONFIG RANDOMIZE BASE
Userspace: do not disable CFI/IntSan on components that have
it enabled
5.0, instead, vendors were required to set up SELinux in Enforcing
Mode for all the domains. Moreover, from this version, vendors must
not modify, omit, or replace some AOSP specific rules, which act
as a safety net for misconfigurations. These rules are the so-called
neverallow rules: if a custom SELinux policy directly or indi-
rectly violates any of these rules, the SELinux toolchain would throw
a compilation error, thus preventing the adoption of unsafe config-
urations from the beginning. With these rules, it is possible to avoid
and mitigate potential known security issues and harmful behaviors,
such as forbidding any third-party application to write to files in the
/sys directory or preventing them from receiving and sending
uevent messages. We note that modifying (or removing) any
of these neverallow rules is a strict violation of the CDD.
To determine whether a ROM is compliant with the SELinux
requirements, we proceed in two steps. First, we look at violations
related to Permissive Mode by inspecting the SELinux policy
available in the ROM (since it is possible to retrieve all the
permissive domains directly from the compiled policy). Second,
we look for vendors that manipulated the base policy provided in
AOSP to overcome the restrictions imposed by the neverallow
rules. For this, we retrieve the tag of used as a base image by the
vendor (see Section III-B), and we compare the two sets of policies.
Out of the 2,907 ROMs, we identified 1,090 of them not
containing a SELinux policy. Of these 1,090, 452 are targeting an
Android version lower than 4.3, and it is thus expected that they
do not have any policy.
Since SELinux must have kernel support to work, we decided
to intersect the remaining ROMs with the results extracted from
the previous kernel analysis (see Section V-A) and we identified
how 29 lack CONFIG_SECURITY_SELINUX: for those, it is
expected that we do not find SELinux configurations.
The remaining 609 ROMs are divided as follows: for 167 we
were not able to obtain the boot.img, and for 91 of them we
were not able to extract neither the kernel configuration nor the
symbol table; thus, we cannot perform any measurement on these
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
VIOLATIONS REGARDING THE CONFIGURATION OF A PERMISSIVE DOMAIN IN
TABLE III
THE SELINUX POLICY
VIOLATIONS REGARDING THE DEFINITION OF ALLOWRULES IN CONTRAST
WITH A NEVERALLOW RULE DEFINED IN THE AOSP SELINUX BASE POLICY
TABLE IV
SDK Version
21
22
23
24
25
26
27
28
5.0
5.1
6.0
7.0
7.1
8.0
8.1
9.0
# ROM CDD
Violations
1/58 (1.7%)
26/251 (10.3%)
21/359 (5.8%)
11/226 (4.8%)
2/163 (1.2%)
21/141 (14.8%)
18/139 (12.9%)
8/196 (4.0%)
108/1533 (7.0%)
Permissive Domains