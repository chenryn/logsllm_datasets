n, e∗
e∗ = (z∗
r∗
z = MTHash(z∗), r∗
lates the execution of Π by running (active, id, c∗, r∗
in the rst round, SimB
j ← {0, 1}µ for j ∈
n) and
m). Then, he computes (c∗, d∗) ← Commit(k∗),
e = MTHash(e∗), and rφ = MTHash(φ). SimB simu-
e , rφ, aφ, p, fS , fB) ←
i ← {0, 1}λ for i ∈ [n], e∗
n+1 . . . , e∗
1 , . . . , z∗
1 , . . . , z∗
z , r∗
icfe
45
jc
jc
jc
z , r∗
(initialize, id, c∗, r∗
GL,H
e , rφ, aφ, p, fS , fB), where aφ is the challenge limit
property of φ, and generating the message (sell, id, z∗, φ) from ˜S to ˜B∗.
2. Upon receiving (abort, id, ˜S) from FL
icfe in the second round, SimB simulates the
abort by running (aborted, id) ← GL,H
(abort, id) and terminating the simulation.
Upon receiving (accept, id) from ˜B∗ in the second round, SimB sends (buy, id, φ)
to FL
icfe and simulates the acceptance of ˜B∗ by running (initialized, id) ←
GL,H
(accept, id).
3. If SimB receives (abort, id) from ˜B∗ in the third round, he sends (abort, id) to
icfe, runs (aborted, id) ← GL,H
FL
Otherwise, SimB simulates the key revealing executed by honest Seller by running
(revealed, id, k∗, d∗) ← GL,H
(reveal, id, k∗, d∗). In the same round, SimB learns
icfe to ˜B∗. Then, SimB
x from the message (revealed, id, x), which is sent from FL
needs to map the randomly selected values in the rst round to the correct witness
by performing the following steps.
 For all i ∈ [n] set oi = xi and for all i ∈ {n + 1, . . . , m} and φi := (i, opi, Ii)
compute oi := opi(oIi[1], . . . , oIi[l]).
 Then, program the random oracle H in such a way that the decryption of
z∗ and e∗ equals the correct witness and the intermediate outputs of φ(x),
respectively. Therefore, send the message (program, id, (k||i), oi ⊕ z∗
i ) for all
i ∈ [n] and (program, id, (k||i), oi ⊕ e∗
4. If SimB receives (f inalize, id) from ˜B∗ in the fourth round, he simulates the
(f inalize, id) and
i ) for all i ∈ {n + 1, . . . , m}.
(abort, id), and terminates the simulation.
jc
jc
jc
jc
jc
icfe, waits one round, and proceeds with step (b).
nalization of the protocol Π by running (sold, id) ← GL,H
terminating.
If ˜B∗ sends a (challenge, id, Q) message, SimB needs to simulate the dispute
resolution sub-protocol. Therefore, he executes the following steps alternately:
(a) Upon receiving (challenge, id, Q) from ˜B∗ when |Q| ≤ aφ, SimB runs
(challenge, id, Q), sets aφ = aφ − |Q|, sends
(challenged, id, Q) ← GL,H
(f reeze, id, ˜B∗,|Q|) to FL
Upon receiving (prove, id, π) from ˜B∗, SimB needs to simulate an invalid
proof of misbehavior. Therefore, he sends no message to FL
icfe in order to trig-
ger the Payout-phase of it and runs GL,H
(prove, id, π). Then, he terminates
the simulation.
Upon receiving (complain, id) from ˜B∗, SimB needs to simulate an invalid
complain-message. To this end, he sends no message to FL
icfe in order to trigger
the Payout-phase, runs GL,H
(complain, id), and terminates the simulation.
If no message is received from ˜B∗ during the challenge-response-phase, SimB
sends (abort, id, 1) to FL
icfe in the name of ˜B∗ and waits one round. Then,
he runs (sold, id) ← GL,H
(challenge timeout, id), to simulate the timeout-
message sent by honest Seller, and outputs (bought, id, x) to ˜B∗.
(b) After Buyer challenged honest Seller, SimB needs to simulate a valid
response. To this end, he computes Rq ← GenerateResponse(φ, x, k∗, Q)
icfe. He simulates Π by running
and sends
(responded, id, Rq) ← GL,H
(respond, id, Rq). Then, he waits one round, and
proceeds with step (a).
If no message is received from ˜B∗ in round 4, SimB sends (abort, id, 1) to
FL
icfe in the name of ˜B∗ and waits one round. Then, he runs (sold, id) ←
GL,H
(f inalize, id), to simulate the nalization executed by honest Seller, and
outputs (bought, id, x) to ˜B∗.
(f reeze, id, ˜S,|Rq|)
to FL
jc
jc
jc
jc
46
Simulation with Two Corrupted Parties
The case of two corrupted parties, i.e., a corrupted Seller and a corrupted Buyer is a com-
bination of the two previous cases in which only one party is corrupted. Since both parties
are corrupted, the environment Z has full control over S∗ and B∗ in the hybrid world exe-
cution. The ideal world consists of the two corrupted dummy parties ˜S∗ and ˜B∗, the ideal
functionality FL
icfe, and the ideal adversary SimSR. SimSR is responsible for all inputs and
outputs of the dummy parties towards the ideal functionality. Hence, on receiving a message
through a dummy party from the environment Z, SimSR needs to generate the appropriate
inputs to FL
icfe must be
converted into outputs to Z through the dummy parties.
icfe and to simulate the execution of Π. In addition, the outputs of FL
It is important to note that the protocol does not provide any guarantees if none of the
parties behaves honestly. Especially, the protocol may never terminate and coins may be
locked beyond the protocol execution. This is easy to see when considering a protocol exe-
cution in which neither of the two parties sends a nalize-message or any other message in
round 4. The protocol waits for the next message and hence does not terminate. Moreover,
the p coins are locked forever.
This example shows that considering a protocol execution with two corrupted parties is not
reasonable in the given two-party protocol for a fair exchange. However, to allow compos-
ability of Π and other protocols, the indistinguishability in this corruption setup has to
be shown. The proof of the following Claim makes use of techniques already used within
the single corruption setups. Therefore, the proof focuses on the most challenging aspect of
the simulation and is based on the argumentation already stated in the single corruption
scenarios.
Claim. There exists an ecient algorithm SimSB such that for all ppt environments Z that
corrupt both, Seller and Buyer, it holds that the execution of Π in the (GL,H
,L,H)-hybrid
world in presence of adversary A is indistinguishable from the ideal world execution of FL
with the ideal adversary SimSB.
Proof. In the scenario of two corrupted parties, i.e., a corrupted Seller ˜S∗ and a corrupted
Buyer ˜B∗, the simulator SimSB controls all outputs of these parties towards the environment
Z and he needs to provide inputs to the ideal functionality FL
icfe on behalf of the corrupted
parties. SimSB is a combination of the simulators in the single corruption cases presented
previously.
icfe
jc
Simulator SimSB for simulation with corrupted Seller and corrupted Buyer.
round,
SimSR
simulates
running
1. Upon
jc
jc
receiving
the
by
rst
(active, id, c, rz, re, rφ, aφ, p, fS , fB)
(initialize, id, c, rz, re, rφ, aφ, p, fS , fB)
the
from
˜S∗
in
execution
←
Π
of
GL,H
(initialize, id, c, rz, re, rφ, aφ, p, fS , fB). If SimSR also receives (sell, id, z, φ)
in round 1 through ˜S∗, he sets x∗ = 1n×λ and sends (sell-f ake, id, x∗, φ, p, fS , fB)
to FL
icfe.
If not both messages, sell and initialize, are received through ˜S∗ in round one,
SimSR terminates the simulation.
2. Upon receiving (abort, id) through ˜S∗ in the second round, SimSR sends
(abort, id) to FL
icfe. Furthermore, he simulates Π by running (aborted, id) ←
GL,H
second round, SimSR
Upon receiving (accept, id)
sends (buy, id, φ) to FL
icfe and simulates the acceptance of ˜B∗ by running
(initialized, id) ← GL,H
(accept, id).
If no message was received in round 2, SimSR terminates the simulation.
(abort, id) and terminating the simulation.
through
in the
˜B∗
jc
47
jc
jc
(abort, id), and terminates the simulation.
jc
3. If SimSR receives (abort, id) from ˜B∗ in the third round, he sends (abort, id) to
icfe, runs (aborted, id) ← GL,H
FL
Upon receiving (reveal, id, k, d) through ˜S∗ in round 3 such that Open(c, d, k) =
1, SimSR simulates the revealing of the encryption key, Therefore, he runs
(revealed, id, k, d) ← GL,H
(reveal, id, k, d). In addition, he computes x =
Dec(k, z) and replaces the message (revealed, id, x∗) from FL
icfe to ˜B∗ with
(revealed, id, x).
If no message is received in round 3, SimSR simulates the abort of both parties
by sending (abort, id) in the name of ˜S∗ to FL
icfe and sending a (block, id) message
in the name of ˜B∗ to L. Then, he terminates the simulation.
4. If SimSR receives (f inalize, id) from ˜B∗ in the fourth round, he simulates the
nalization of the protocol Π by running (sold, id) ← GL,H
(f inalize, id). Then,
he sends (abort, id, 0) in the name of ˜B∗ to FL
icfe, outputs (bought, id, x) through
˜B∗, and terminates.
If ˜B∗ sends a (challenge, id, Q) message, SimSR needs to simulate the dispute
resolution sub-protocol. Therefore, he executes the following steps alternately
starting with (a):
(a) Upon receiving (challenge, id, Q) from ˜B∗ when |Q| ≤ aφ, SimSB runs
(challenged, id, Q) ← GL,H
(challenge, id, Q), sets aφ = aφ−|Q| and Qr = Q,
sends (f reeze, id, ˜B∗,|Q|) to FL
icfe, waits one round, and proceeds with step
(b).
Upon receiving (prove, id, π) from ˜B∗, SimSB needs to simulate a judgment
on the given proof of misbehavior. Therefore, he runs GL,H
(prove, id, π) and
computes Judge(k, rz, re, rφ, π). If the result is 1, SimSB sends (abort, id, 0)
to FL
icfe on behalf of ˜S∗ in order to trigger the payo in favor of Buyer. Ad-
ditionally, he outputs (not sold, id) through ˜S∗ and terminates. Otherwise,
icfe on behalf of ˜B∗, outputs
if the result is 0, SimSB sends (abort, id, 0) to FL
(bought, id, x) through ˜B∗, and terminates.
Upon receiving (complain, id) from ˜B∗, SimSB needs to simulate a
judgment on the given complain-message. To this end, he computes
ValidateResponse(Qr, Rr, re). If the output is false, SimSB sends (abort, id, 0)
in the name of ˜S∗ to FL
icfe and outputs (not sold, id) through ˜S∗. Otherwise,
if the output is true, he sends (abort, id, 0) in the name of ˜B∗ to FL
icfe and
outputs (bought, id) through ˜B∗. In both cases, he runs GL,H
(complain, id),
and terminates the simulation.
If no message is received from ˜B∗ in this round, SimSB sends (abort, id, 1)
to FL
if he re-
ceives a (challenge timeout, id) from ˜S∗, he simulates Π by running
GL,H
(challenge timeout, id). Otherwise, if no message is received from ˜S∗,
SimSB needs to refuse the unfreezing by sending a (block, id) message in the
name of ˜S∗ to L. Afterwards, he terminates the simulation.
(b) Upon receiving (respond, id, Rq) from ˜S∗, SimSB runs (responded, id, Rq) ←
GL,H
icfe, waits
one round, and continues with step (a).
If no message is received from ˜S∗ in this round, SimSB sends (abort, id, 1)
to FL
if he re-
ceives a (response timeout, id) from ˜B∗, he simulate Π by running
GL,H
(respond timeout, id). Otherwise, if no message is received from ˜B∗,
(respond, id, Rq), sets Rr = Rq, sends (f reeze, id, ˜S,|Rq|) to FL
in the name of ˜B∗ and waits one round. Then,
in the name of ˜S∗ and waits one round. Then,
icfe
icfe
jc
jc
jc
jc
jc
jc
48
SimSB needs to refuse the unfreezing by sending a (block, id) message in the
name of ˜B∗ to L. Afterwards, he terminates the simulation.
If no message is received from ˜B∗ in round 4, SimSB sends (abort, id, 1) to FL
in the name of ˜B∗ and waits one round. Then, if he receives (f inalize, id) from