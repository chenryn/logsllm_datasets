---
## Page 2357
图8-1Honeyclient的第一代开源原型
2005年6月，在蒙特利尔的RECon会议上，Honeyclient的最初原型首
次在公众面前亮相山。观众们显示了极大的兴趣，并在会议之后向
我提出了许多问题。除了介绍Honeyclient原型之外，我还被问到了
许多相关的问题。
这项技术是伟大的，但最终的军备竞赛会怎么样呢？攻击者会不会
通过网络缺陷、着色URL或robot.txt文件设置Honeyclient的检测器
呢？对于Honeyclient无法自动“点击"的Flash网站又该怎么办呢？我
知道未来的开发中需要改进的一个地方就是使Honeyclient能够检测
嵌入到JavaScript应用程序中的链接。
稍后，我们将会看到Honeyclient操作是如何受到这些类型的反检测
措施的影响的。
2356
---
## Page 2358
[1]有关Honeyclient在RECon会议上的展示请参见
http:/2005.recon.cx/recon 2005/papers/Kathy_Wang/Wang-Honeyclients-
RECON.pdf.
8.3第二代Honeyclient
2005年夏末，Honeyclient项目得到了MITRE公司的资助，我们的新
项目队伍口开始致力于更高级的Honeyclient。我们希望保持部分的
最初原型，主要是基准线完整性检查系统。但是，我们还想添加全
新的特性，例如在虚拟机中运行Honeyclient。一直运行最初的
Honeyclient，直到它被劫持，然后对操作系统进行重新镜像以准备
下一次的被攻击，这个过程是非常乏味的。另外，如果我们想快速
保持被韧持的操作系统用于以后的攻击证据分析，就需要实现
Honeyclient的虚拟化。我们的队伍想要实现快速、易用并且具有强
大伸缩性的系统。当我们创建下一代Honeyclient原型时，这些想法
始终在我们的脑海中盘旋。
我们所作出的最初决策之一是对新的Honeyclient体系结构实现模块
化。这就允许我们开发可选的插件，可以根据用户的目标方便地启
用或禁用。模块化便于项目队伍之外的责献者开发可以与现有的
Honeyclient代码一起工作的插件。我们还决定根据GNU公共许可v2
对这个第二代Honeyclient进行授权。我始终是开放源代码的热心支
持者，回归社区总是非常好的方法，它可以鼓励其他人创建自己的
开源Honeyclient原型。
另一个重要决定是采用客户——服务器模型，其中Honeyclient的客
户（或代理）端位于Honeyclient虚拟主机上，而服务器（或管理
者）端位于容纳Honeyclient虚拟主机的物理服务器上。服务器控制
Honeyclient的高级操作，包括克隆和挂起虚拟机、检测Honeyclient系
统的变化、与外部Honeyclient数据库进行通信以及捕捉Honeyclient和
远程服务器之间流量的完整数据包以记录日志。这个新的体系结构
几乎是对旧版本的完全重写。我们还更改了术语，把“驱动器一—代
理"更改为“客户一服务器”。更改术语的部分原因是我们觉得客户
服务器更好地反映了这一代的Honeyclient能够实现的主要概念之
一：分布式Honeyclient。我们队伍的重量级开发人员DarienKindlund
就负责实现这个基于虚拟机的Honeyclient模型。
2357
---
## Page 2359
站在体系结构的角度，这个新的Honeyclient原型是个虚拟机
（VM），它把一个本地运行的目标应用程序驱动到一个或多个远程
资源（见图8-2）。在这个体系结构中，Honeyclient的结构如下所
示：
图8-2Honeyclient体系结构
·运行于VMware[2]虚拟机中。
运行MicrosoftWindows操作系统的一个变型。
配置为当系统管理员启动系统之后自动登录。
在登录时，自动执行称为HoneyClient：Agent的Perl模块，作为一个
daemon运行于一个Cygwinl环境中，并开始Web访问。
2358
---
## Page 2360
我们选择VMware服务器进行虚拟化，因为它对所有的用户都是免费
的，我们并不想加重开源社区用户的负担，不想让他们购买软件才
能运行我们的Honeyclient原型。尽管VMware并不是开放源代码的，
但我们发现它比开放源代码的虚拟化项目更适合我们的需要。它还
可以运行于许多操作系统上。本章后面的"Honeyclient的未来"将解释
为什么选择Limux作为主机操作系统。
Honeyclient系统被实现为一系列的Perl模块，在WindowsXP平台上执
行。这些Perl模块驱动一个Microsoft InternetExplorer浏览器，并自动
爬行到特定的网站。驱动器脚本向Honeyclient提供了一个URL作为起
点之后，这个模拟的InternetExplorer浏览器就抓取这个网站上的每个
URL，并依次地点击每个链接，同时由驱动器脚本提取链接，用于
将来的爬行。
HoneyclientPerl服务器检查文件和注册表键的完整性。甚至在
Honeyclient第一次连接到一台远程服务器之前，完整性检查模块就
开始在Honeyclient主机上监视文件、注册表键值和相关的进程信
息。在Honeyclient访问每个站点之后，完整性检查模块把文件校验
和、注册表的键值与已知的良好列表进行比较，观察敏感的系统文
件或注册表键是否被修改。如果发现了修改，服务器就把这个URI
标记为潜在恶意的，并保存在爬行这个URL时生成的所有网站流量
记录，然后提醒分析师对这个网站进一步进行检查。
Honeyclient原型安装在一个虚拟机环境（当前是VMware）中，以便
把系统恢复到一个已知的良好状态。为了进一步减少风险，我们的
物理主机操作系统是Linux。由于Honeyclient的虚拟主机是Windows，
出于前面所解释的原因，部署一个不同的操作系统作为物理主机有
助于限制从虚拟主机到物理主机的连环失败的风险。当我们收集并
分析负载数据时，可以更好地理解Honeyclient原型的限制，并不断
对它进行修改以提高它的性能。
漏洞攻击常常通过垃圾邮件和拒绝服务这样的攻击方式登录到客户
系统中，因此我们希望Honeyclient不要被攻击者当做发动其他攻击
的跳板。因此，我们的设计的另一块内容是一个启用了防火墙的路
由器，与Honeyclient一样运行在一台虚拟主机上。当这个防火墙路
由器在内部网络和DM亿网络之间进行传递时，会过滤Honeyclient流
量。当Honeyclient被驱动到一个远程资源时，这个防火墙被配置为
允许Honeyclient访问处理从远程资源提取所有内容所需要的最小资
源集。Honeywall（https://projects.honeynet.org/honeywall）是Honeynet
2359
---
## Page 2361
项目的另一个开源软件，它很好地满足了我们的需要，因此开发队
伍的成员JDDurick把它集成到我们的体系结构中。
如果主机系统把一个Honeyclient驱动到http://www.cnn.com页面，这
个防火墙将允许Honeyclient与通过TCP端口80映射到
http://www.cnn.com域的所有Web服务器（包括任何可能容纳外部内
联内容的其他服务器，例如来自http://www.doubleclick.net外部链接
的广告）进行联系。当防火墙批准Honeyclient进行访问时，
Honeyclient就接到信号转到http://www.cnn.com。这个防火墙允许我
们保护Honeyclient，防止它被攻击之后作为其他攻击的跳板。如果
攻击者试图从Honeyclient主机发动电子邮件或DDoS攻击，这些行动
将被防火墙所阻塞。
尽管我们一开始利用了Honeywall，但我们很快意识到通过这个防火
墙的限制性外出流量防止了Honeyclient主机被劫持的可能。例如，
如果一个网页使用了第三方的横幅式广告，漏洞攻击潜伏在一台不
同的服务器上，那么Honeyclient将会错过这个攻击，因为防火墙将
会阻塞对后面这个服务器域的访问。这个场景是我们需要考虑的权
衡因素。让自己被盗用以捕捉更多的漏洞攻击更重要呢？还是限制
成为肉鸡的机会更为重要？这是每个Honeyclient用户需要作出的一
个决定。
在Honeynet项目中，除了利用Honeywall之外，我们还集成了来自
Capture-HPC[]Honeyclient的完整性检查算法。最初，我们的服务器
只是简单地检查我们的Honeyclient系统上的文件和注册表键的基准
线变化。稍后，我们决定对体系结构进行更改，实时检查文件、注
册表键和系统进程的变化。Capture的完整性检查代码符合我们的标
准，因此我们的开发队伍中的成员XenoKovah与ChristianSeifert一起
把这个完整性检查功能集成到Honeyclient中。
[1]http://www.honeyclient.org/trac/wiki/about上列出Honeyclient项目
队伍以及它的捐助人。
[2]VMware公司的网址是http://www.vmware.com。
[3]Windows XP的网址是http://www.microsoft.com/windowsxp。
[4]Cygwin工具可以从http://www.cygwin.com获得。
[5]Capture-HPCHoneyclient可参见https://projects.honeynet.org/capture-
hpc，这个项目在https:/projects.honeynet.org/capture-
hpc/wiki/AboutCapture上有描述。
2360
---
## Page 2362
8.4Honeyclient的操作结果
我们的第2代原型在2006年已经完全可以投入操作。虽然开发
Honeyclient框架是个必要的步骤，与第2代原型一起成长本身也是一
种学习体验。我们必须解决的第一个障碍是这个新原型所产生的假
阳性。
8.4.1WindowsXP的透明活动
例如，如果我们访问一个外语网站，正浏览器将弹出一个窗口，询
问是否需要安装这个网站所用的特定语言的语言包。在这个过程
中，我们注意到有6个WindowsXP注册表键按照下面的方式进行了
修改：
HKEY_CURRENT_USERSoftware\MicrosoffInternet
Explorer\IntelliForms（增加）
HKEY_CURRENT_USER\Software\MicrosoftInternet
Explorer\International（修改）
HKEY_CURRENT_USER\Software\MicrosoffInternet
Explorer\InternationalCpMRU（增加）
HKEY_USERS\S.+\Software\MicrosoffInternet
Explorer\IntelliForms（增加）
HKEY_USERSS.+SoftwareMicrosoffInternet
ExplorerInternational（修改）
HKEY_USERS\S.+\Software\MicrosoffInternet
Explorer\International\CpMRU（增加）
由于我们在浏览一些没有问题的外语网站时同样会出现上面这些结
果，因此我们知道这些修改并不是恶意行为的提示。此时，我们决
定把这些没有问题的操作添加到我们的白名单中。另一个有趣的结
果是在我们访问基于SSL的URL时发生的。下面这些文件在Windows
XP环境中被反复修改：
Cab1..tmp,Cab2..mp,.....Cabx.tmp
2361
---
## Page 2363
Tar1..tmp,Tar2..tmp,......Tarx.tmp
创建这种白名单始终是一种有趣的体验。开始测试已知的良好网站
之前，我们并不知道在WindowsXP环境内部的正常操作过程中会发
生多少修改。即使我们在文件和注册表键中看到了所有这些修改，
也并不意味着我们知道一个文件或注册表键的修改是否是恶意的。
例如，当我们访问一个情况不明的网站时遇到一个文件中的下面这
个修改时：
C:\WINDOWSfla1.tmp
这个文件是正常的还是恶意的？当我们在百度上搜索这个文件名
时，看上去即使是反病毒研究人员对这个文件是否“良好”也存在疑
问。正如这个文件的名称所提示的那样，它可能与FlashPlayer相关
联，但它也可能与系统中我们不需要的东西相关联。一般而言，不