vith_items:
Axoadeq -
- socat
name: Configure the haproxy cnf file vith hosts
notify: restart haproxy
任务（tasks）定义了两个功能，一为安装，二为同步配置文件，安装使用了yum模块，
循环安装 haproxy、socat两个工具，同时根据配置参数谊染roles/haproxy/templates/haproxy.
cfgj2模板文件，完成后同步到目标主机/etc/haproxy/haproxy.cfg位置，状态发生变化时重启
haproxy服务，使之生效。
下面定义了haproxy角色haproxy.cfg的配置模板：
[ roles/haproxy/templates/haproxy.cfg.j2 】
backend app
rx111
($for host in groups[*lbservers*] )
1isten [( daenonnane 11 (( hostvars [host] [ ansible_* + iface] -ipv4.
address 1):(( 1istenport 1)
{xogpue]
[$ for host in groups[*webservers′])
balance
(1 aoue[eq 1]
server [( hostvars[host] .ansible_hostname 1) (t hostvars [host]
['ansible_, + iface] -ipv4.address 1]:({ httpd_port 1}
( endfor t)
{{hostvars[host][ansible_'+ iface].ipv4.address }}实现了获取网卡名变量 iface（group_
vars/Ibservers 中定义）的 IPv4 IP 地址。
（3）web角色
web角色主要实现了php、php-mysql、git平台部署及SELinux的配置功能，任务（tasks）
的定义如下：
---
## Page 175
154第二部分高级简
[ roles/web/tasks/main.yml ]
httpd is handled by the base=apache role upstrean
name: Install php and git
yum: nane=(( item )) state=present
with_items:
- php
- git
- php-nysq]
nane: Configure SELinux to allow httpd to connect to remote database
when: sestatus,re := 0
seboolean! name=httpd_can_network_connect_db state=true persistent=yes
- name: Copy the code from repository
git1 repo=(( repository 11 version=(I webapp_version )) deat=/var/vvw/htm1/
判断sestatus变量（roles/common/tasks/main.yml中定义）返回的rc（运行代码）不等于0
（失败）则配置selinuxhttpd访问远程数据库的权限，使用的是Ansible的 seboolean模块，该
示开机自启动。
（4）nagios 角色
nagios角色主要实现了nagios 监控平台的部署，重点介绍任务（tasks）的定义：
[ roles/nagios/tasks/ main.yml ]
nane1 create the nagios object files
template: src=[{ iten + ",§2" 1}
dest=/etc/nagios/ansible=managed/ ( ( item 1)
with_itens:
vebservers,cfg
dbservers,cfg
- 1bservers,cfg
notify: restart nagios
template分发多个模板文件时可以使用with_items来循环同步，变量与字符使用“+“
号连接（具体见jinja2语法）。
理解以上4个角色的定义后，再理解ansible-examples其他playbook的内容已经没有太
大的困难，本书将不一一说明。
9.2节～9.11节Ansible介绍及示例参考http:/docs.ansible.com官网文格。
---
## Page 176
8 
第10章Clyeo
集中化管理平台Saltstack详解
Saltstack（http://www.saltstack.com/）是一个服务器基础架构集中化管理平台，开始
于2011年的一个项目，具备配置管理、远程执行、监控等功能，一般可以理解成简化版的
puppet ( http://puppetlabs.com/) 和 加I 强 版 的 func ( https:/fedorahosted.org/func/) 。 Saltstack
基于Python语言实现，结合轻量级消息队列（ZeroMQ）与Python第三方模块（Pyzmq、
PyCrypto、Pyjinja2、python-msgpack 和 PyYAML等）构建。Saltstack具备如下特点。
口部署简单、方便。
口支持大部分UNIX/Linux及Windows环境。
口主从集中化管理。
口配置简单、功能强大、扩展性强。
口主控端（master）和被控制端（minion）基于证书认证，安全可靠。
口支持API及自定义模块，可通过Python轻松扩展。
通过部署Saltstack环境，我们可以在成千上万台服务器上做到批量执行命令，根据不
同业务特性进行配置集中化管理、分发文件、采集服务器数据、操作系统基础及软件包管理
等，因此，Saltstack是运维人员提高工作效率、规范业务配置与操作的利器。目前Saltstack
已经趋向成熟，用户群及社区活跃度都不错，同时官方也开放了不少子项目，具体可访问
https://github.com/saltstack 获得。
为了方便读者更系统化地了解Saltstack的技术点，本章将针对相关技术点详细展开
介绍。
---
## Page 177
156第二部分高级篇
10.1
Saltstack的安装
Saltstack的不同角色服务安装非常简单，建议读者采用yum源方式来实现部署，下面介
绍具体步骤。
10.1.1业务环境说明
为了方便读者理解，笔者通过虚拟化环境部署了两组业务功能服务器来进行演示，操作
系统版本为CentOSrelease 6.4，自带Python2.6.6。相关服务器信息如表10-1所示（CPU核
数及Nginx根目录的差异化是为方便演示生成动态配置的需要）。
表10-1环境说明表
角色
Id [minion id)
IP
Groupsnode （组名)Cpus (核数)Web Root(Nginx 根目录)
Master
SN2013-08-020
192.168.1.20
SN2012-07-010
192.168.1.10
webIgroup
2
/www
minion
SN2012-07-011
192.168.1.11
weblgroup
4
/www
minion
SN2012-07-012
192.168.1.12
weblgroup
2
/www
SN2013-08-021
192.168.1.21
weh2group
2
Idata
192.168.1.22
weh2groap
2
/data
10.1.2
安装EPEL
由于目前RHEL官网yum源还没有Saltstack的安装包支持，因此先安装EPEL作为部
署Saltstack 的默认yum 源。
 RHEL(CentOS) 5 版 本:rpm -Uvh 下 载 地 t址:http://mirror.pnl.gov/epel/5/i386/epel
release-5-4.noarch.rpm
 RHEL(CentOS) 6 版 本: rpm -Uvh 下 载地 址: http://ftp.linux.ncsu.edu/pub/epel/6/i386/
epel-release-6-8.noarch.rpm
10.1.3安装Saltstack
（1）主服务器安装（主控编）
-20seu-3tes Tte1sut mm#
#chkconfig salt=master on
service salt-master start
（2）从服务器安装（被控端）
-uoTuTu-1eeTteeuT umA#
---
## Page 178
第10章集中化管理平台Saltstack详解157
chkconfig salt-minion on
tservice salt-ninion start
10.1.4Saltstack防火墙配置
在主控端添加TCP4505、TCP4506的规则，面在被控端无须配置防火墙，原理是被控
端直接与主控端的zeromq建立长链接，接收广播到的任务信息并执行，具体操作是添加两
条iptables规则：
10.1.5更新Saltstack配置及安装校验
Saltstack分两种角色，一种为master（主控端），另一种为minion（被控编），安装完毕
后需要对两种角色的配置文件进行修改，下面具体说明。
（1）master主控端配置
1）更新主控端关键项配置：
[ /etc/salt/master 】
绑定Master迅信 IP:
interface: 192.168.1.20
自动认证，遭免手动选行 salt-key 来确认证书信任；
auto_accept: Trve
指定Saltstack 文件根目录位置
18400x
base:
- /srv/sa1t
2）重启saltstacksalt-master服务使新配置生效，具体执行以下命令：
+service salt-master restart
（2）minion被控端配置
1）更新被控端关键项配置：
[ /etc/salt/minion ]
指定master 主机IP 地址
naster: 192.168.1.20
修改被控端主机识别id，建议使用操作系统主机名来配置
120-80-010229 1PT
---
## Page 179
158第二部分高级篇
2）重启 saltstack salt-minion服务使新配置生效，具体执行以下命令：
service salt-sinion restart
（3）校验安装结果
通过test模块的ping方法，可以确认指定被控端设备与主控端是否建立信任关系及连通
性是否正常，探测所有被控端采用“*来代替‘SN2013-08-021'即可，其体如图10-1所示。
[roote5N2013-s-a2e-]#saltSN2013-ag-821test.ping
5N2013-08-021:
图 10-1测试安装主机的连通性
当/etc/salt/master 没有配置auto_accept:True 时，需要通过 sall-key命令来进行证书认
证操作，具体操作如下：
 salt-key-L，显示巴经或未认证的被控增id，Accepted Keys为已认证清单，
Unaccepted Keys 为未认证清单；
 salt-key-D，删除所有认证主机id证书；
 salt-key -d id, 删除单个 id 证书;
 salt-key-A，接受所有 id证节请求；
 salt-key -a id，接受单个 id证书请求。
10.2利用Saltstack远程执行命令
Saltstack的一个比较突出优势是具备执行远程命令的功能，操作及方法与func（https/
fedorahosted.org/func/）相似，可以帮助运维人员完成集中化的操作平台。
命令格式：salt[参数】
示例：查看被控主机的内存使用情况，如图10-2所示。
buffers
/+buffers/c
104
图10-2查看“SN2013-08-021”主机内存使用
---
## Page 180
第10章集中化管理平台Saltstack详解159
其中针对，Saltstack提供了多种方法对被控端主机（id）进行过滤。下面列
举常用的具体参数。
1）-E，-pcre，通过正则表达式进行匹配。示例：控测 SN2013字符开头的主机id名是
否连通，命令：salt-E“SN2013.*test.ping，运行结果如图10-3所示。
Tre
5N2013-08-022:
图10-3正则匹配主机的连通性
2）-L,-list，以主机id名列表的形式进行过滤，格式与Python 的列表相似，即不同主
机id名称使用逗号分隔。示例：获取主机id名为 SN2013-08-021、SN2013-08-022；获取完
整操作系统发行版名称。命令：salt -L‘SN2013-08-021,SN2013-08-022 grains.item osfullname，
运行结来如图10所示。
Centos
图10-4列表形式匹配主机的操作系统类型
3）-G，-grain，根据被控主机的 grains（10.4节详解）信息进行匹配过滤，格式为：，例如，过滤内核为Linux的主机可以写成kemel:Linux'，如果同时
需要正则表达式的支持可切换成-grain-pcre参数来执行。示例：获取主机发行版本号为6.4
的 Python 版本号，命令：salt-G‘osrelease:6.4”cmd.runpython-V"，运行结果如图 10-5所示。
N2013-08-021:
PythonZ.b.b
图 10-5grain形式匹配主机的 Python版本
4）-I,-pillar，根据被控主机的pillar（10.5节详解）信息进行匹配过滤，格式为“对
象名称：对象值"，例如，过滤所有具备‘apache:httpdpillar值的主机。示例：探测具有
“nginx:root:/data”信息的主机连通性，命令：salt -1'nginx:root:/data' test.ping，运行结果如
图10-6所示
---
## Page 181
160第二部分高级篇
105[-82-8-102N500]
True8-022:
True
图10-6pillar 形式匹配主机的连通性
其中pillar属性配置文件如下（关于pillar后面10.5单独进行说明）：
nginx:
root: /data
5)-N，-nodegroup.根据主控端master配置文件中的分组名称进行过滤。以笔者定义的
组为例（主机信息支持正则表达式、grain、条件运算符等），通常根据业务类型划分，不同业
务具备相同的特点，包括部署环境、应用平台、配置文件等。举例分组配置信息如下：
[/etc/salt/master 】
nodegroups1
web1group:*LeSN2012-07-010,SN2012-07-011,SN2012-07-012*
web2group:*LesN2013-08-021,SN2013-08-022
其中，L@表示后面的主机id格式为列表，即主机id以逗号分隔：G@表示以grain格
式描述；S@表示以IP子网或地址格式描述。
示例：探测 web2group 被控主机的连通性，其命令为：salt-N web2group test.ping，运行
结果如图10-7所示。
N-10s[~82-S-2Ns0]
Irue
图10-7分组形式（nodegroup）匹配主机的连通性
6）-C，-compound，根据条件运算符not、and、or去匹配不同规则的主机信息。示例：
探测SN2013开头并且操作系统版本为CentOS的主机连通性，命令如下：
8alt -C *ge^sN2013.* and Geos:Centos* test -ping
其中，not语句不能作为第一个条件执行，不过可以通过以下方法来规避，示例：探测
非 SN2013 开头的主机连通性，其命令为：salt-C*and not E@SN2013.*test.ping。
7）-S,-ipcidr，根据被控主机的IP地址或IP子网进行匹配，示例如下：
---
## Page 182
第10章集中化管理平台Saltstack详解161
salt =S 192.168.0.0/16 test.ping
salt -S 192.168.1.10 test,ping
10.3Saltstack常用模块及API
Saltstack提供了非常丰富的功能模块，涉及操作系统的基础功能、常用工具支持等，更
多模块信息见官网模块介绍：http:/docs.saltstack.com/ref/modules/al/index.html。当然，也可
以通过sys模块列出当前版本支持的模块，如图10-8所示。
05[82-80-102NS100]
N2013-08-022:
acl
archve
apache
config
cnd
cp
data
utools
disk
dia
图10-8所有主机Saltstack支持的模块清单（部分截图）
接下来抽取出常见的模块进行介绍，同时也会列举模块API使用方法。API的原理是通
过调用master client模块，实例化一个LocalClient 对象，再调用 cmdO方法来实现的。以下
是API 实现 test.ping的示例：
client = salt,client.Loca1Client ()
inport salt.client
ret = client,cmd(**', *test,ping′)
结果以一个标准的Python字典形式的字符申返回，可以通过evalO函数转换成Python