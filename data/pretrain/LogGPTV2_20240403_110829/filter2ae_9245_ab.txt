    --    Bill Jncjkqfuck
    --bcaec54eecc63acce604a3050f77—
通过在EML中捆绑V8
exploit并通过intent使Email打开，我们可以成功在Email进程中执行代码获得其权限，从而正式跳出renderer进程的isolate沙箱。Email应用本身具备读取相片、通讯录的权限故到这里我们已经满足了Pwn2Own的初步要求。截至目前，我们的攻击链步骤如下：
  1. 通过http header头attachment的方式强迫浏览器将含有攻击代码的EML文件和js文件下载。在安卓上，下载路径固定于例如`/sdcard/Download/test.eml`和`/sdcard/Download/test.js`中。
  2. 在获得renderer进程权限后，构造并调用brokerer IPCstartContentIntent，传入参数为`intent:#Intent;scheme=geo;package=com.samsung.android.email.provider;component=com.samsung.android.email.provider/com.samsung.android.email.ui.messageview.MessageFileView;type=application/eml;S.AbsolutePath=/sdcard/Download/test.eml;end`，从而唤起并exploit Email应用的webview
  3. 成功获取Email应用进程权限
# Bug 4: Go beyond the Galaxy (Apps) … but blocked?
以上结果虽然能满足Pwn2Own的初步要求，但是我们的终极目标是要能够任意安装应用，而Email显然没有这个权限。我们的下一步就是需要找到一个具有`INSTALL_PACKAGES`权限的进程或应用来作为目标。显而易见，Galaxy
Apps（三星应用商店）是一个目标。这个应用中有一个非常有潜力的Activity`com.samsung.android.sdk.ppmt.PpmtPopupActivity`，非常直接地接收intent传入的url参数，没有对来源做任何校验就在webview中打开。
不过天上不会掉馅饼，显然这个Activity被保护了 – 不导出。 … 但只是对外保护，不是对内保护
# Bug 5: Push SDK pushes vulnerability
在审计三星平台其他App的过程中，我们发现同样的component
`com.sec.android.app.samsungapps/com.samsung.android.sdk.ppmt.PpmtReceiver`和`com.samsung.android.themestore/com.samsung.android.sdk.ppmt.PpmtReceiver`出现在了多个应用，包括Galaxy
Apps中。通过分析其功能我们认为这应该是一个私有push
SDK，用于一些广告、活动通知相关的推送。这些receiver都是导出的，在PpmtReceiver的相关代码中，我们发现了如下有意思的代码片段：
    //The Ppmt receiver seems responsible for push message, and under certain intent configuration, it routes to path 
        private void a(Context arg5, Intent arg6, String arg7) {
            if("card_click".equals(arg7)) {
                CardActionLauncher.onCardClick(arg5, arg6);
                return;
            }
    //in onCardClick, it reaches CardActionLauncher, 
        private static boolean a(Context arg2, String arg3, CardAction arg4) {
            boolean v0;
            if("app".equals(arg4.mType)) {
                v0 = CardActionLauncher.b(arg2, arg3, arg4);
            }
    //If the CardAction.mType is "intent", we finally reaches the following snippet:
    private static boolean d(Context arg5, String arg6, CardAction arg7) {
            boolean v0 = false;
            if(TextUtils.isEmpty(arg7.mPackageName)) {
                Slog.w(CardActionLauncher.a, "[" + arg6 + "] fail to launch intent. pkg null");
                return v0;
            }
            Intent v1 = new Intent();
            v1.setPackage(arg7.mPackageName);
            if(!TextUtils.isEmpty(arg7.mData)) {
                v1.setData(Uri.parse(arg7.mData));
                v1.setAction("android.intent.action.VIEW");
            }
            if(!TextUtils.isEmpty(arg7.mAction)) {
                v1.setAction(arg7.mAction);
            }
            if(!TextUtils.isEmpty(arg7.mClassName)) {
                v1.setComponent(new ComponentName(arg7.mPackageName, arg7.mClassName));
            }
            if(arg7.mExtra != null && !arg7.mExtra.isEmpty()) {
                v1.putExtras(arg7.mExtra);
            }
            CardActionLauncher.a(v1, arg6);
            try {
                switch(arg7.mComponent) {
                    case 1: {
                        int v2 = 268435456;
            try {
                v1.setFlags(v2);
                arg5.startActivity(v1);
                goto label_78;
        //….
通过这段代码，我们可以通过发送broadcast以任意参数指定任意Activity启动，当然包括Galaxy
Apps内部未导出的Activity。我们通过这个漏洞来间接启动之前提到的PpmtPopupActivity，进而加载含有JS
exploit的攻击页面，从而获得Galaxy
Apps的权限（shell），利用它的`INSTALL_PACKAGES`权限来安装任意应用。一个有意思的地方是，这个Activity本身并没有直接的UI指向它，所以猜测这能是一个废弃的SDK，但忘记被去掉了。
这个漏洞被分配了CVE-2018-10499.
# Chaining it altogether
![Whole escape
chain](https://images.seebug.org/content/images/2019/10/11/1570780379000-5zyiyy.png-w331s)
这就是我们攻破Galaxy
S8的完整利用链。所有的漏洞均已在当时及时报告给了厂商并得到了修复。鉴于这个漏洞利用链每一步都是在寻找更高权限的进程或应用来作为跳板进行攻击的特点，我们将它命名为”Galaxy
Leapfrogging” (盖乐世蛙跳）。完成攻破的Galaxy
S8为当时的最新版本samsung/dreamqltezc/dreamqltechn:7.0/NRD90M/G9500ZCU1AQF7:user/release-keys.
在此感谢Samsung Mobile Security在修复漏洞中作出的工作，和腾讯科恩实验室以及科恩实验室的前同事们。 接下来还会有其他各大Android
Vendor的各式CVE writeup，请保持关注。Weibo:
[flanker_017](https://www.weibo.com/u/2214340953) .
# 注1： isolated webview的当前状态
从Android O开始，所有的应用在缺省状态下均在isolated
context运行webview，也就意味着攻破了webview不再意味着直接获取应用的权限，从而极大地阻止了我们的蛙跳战术。但部分用户量非常大的App（在此不直接点名），使用了自己编译的webview或第三方通用浏览服务提供的webview，例如X5/tbs和ucwebcore，而截至目前这些webview即使在最新版本Android上面仍然没有启用isolated限制，也意味着他们仍然是蛙跳战术巨大而明显的目标。
* * *