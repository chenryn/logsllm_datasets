4
4
3
3
3
3
3
2
2
19
2
2
1
1
783
138
22
51
41
21
21
35
17
18
11
18
7
13
9
12
5
5
9
9
5
6
2
6
4
4
2
2
1
3
3
2
1
19
2
2
1
1
528
171
63
51
45
35
22
36
20
16
11
10
19
10
8
9
7
9
7
8
7
5
6
2
3
3
3
2
3
2
0
2
0
0
1
0
0
0
596
112
14
37
29
18
10
30
17
14
8
10
7
9
5
8
4
9
7
8
5
5
2
2
3
3
2
1
1
2
0
2
0
0
1
0
0
0
385
203
75
66
57
25
37
41
25
21
20
20
19
16
14
12
11
10
9
9
7
6
6
6
4
4
3
3
3
3
3
2
2
19
2
2
1
1
767
137
21
50
40
20
20
35
21
19
11
18
7
13
8
11
5
10
9
9
5
6
2
6
4
4
2
2
1
3
3
2
1
19
2
2
1
1
530
Table 2: Experiment results across firmware categories. (F:
Firmware, D: Device, IT: Identity Tracking, AM: Active
MITM, PM: Passive MITM)
5 EVALUATION
We have implemented a prototype of FirmXRay1 based on Ghidra [8]
with more than 5K lines of our own code. While there are a great
number of MCU manufactures, our implementation particularly tar-
gets the bare-metal firmware developed based on the Nordic or TI
SDK. In this section, we present our evaluation results. We first de-
scribe the experiment setup in §5.1. Then, we provide the detailed ex-
periment results in §5.2, followed by the attack case studies in §5.3.
5.1 Experiment Setup
Bare-metal firmware collection. To evaluate FirmXRay, we first
need to collect the bare-metal firmware. Intuitively, we can either
crawl firmware through the manufacturer’s websites or dump them
from the actual device hardware. However, such approaches are
not scalable for two reasons. First, developers seldom make the
device firmware publicly available. Second, it will be costly to buy
all these devices. Therefore, we must look for cost-effective and
scalable approaches. To this end, as indicated in §2.1, bare-metal
firmware are usually transferred from mobile apps to devices for
over-the-air upgrade, and thus the apps should at least have the
1The source code is available at https://github.com/OSUSecLab/FirmXRay.
Pointer Type
Absolute Function Pointer
Absolute String Pointer
Vector Table Entry
Three Sets Combined
# True Positive (%)
40 (95.2%)
14 (33.3%)
40 (95.2%)
42 (100%)
# False Positive (%)
2 (4.8%)
28 (66.7%)
2 (4.8%)
0 (0)
Table 3: Base address recognition w/ one set of pointers.
capability to download them, which consequently enables us to
develop a mobile app based approach to collect firmware by reverse
engineering its download logic. Also surprisingly, we noticed many
apps actually did not implement such logic, but instead they even
directly leverage the mobile app update mechanism from app stores
to upgrade the firmware by embedding the firmware image inside
the app package.
As a result, we developed a simple script to automatically unpack
the mobile apps to extract the bare-metal firmware at scale. In
particular, we first crawled about 2 million free apps from Google
Play in February 2020 as our dataset. We further selected those using
BLE by scanning relevant APIs such as startScan, and ultimately
obtained 135, 486 apps in total. From these BLE apps, we directly
unpacked the APKs and extracted the Nordic and TI firmware, since
they have distinct signatures, which can be easily distinguished (e.g.,
magic bytes in the firmware header). Ultimately, we successfully
obtained 793 such unique bare-metal firmware (768 from Nordic
and 25 from TI). Note that one app may contain multiple firmware
because (1) one device may have different versions of firmware (e.g.,
different versions of a medical device firmware extracted from the
same ShockLink app), or (2) one app may have multiple device of the
same category (e.g., two types of thermometer from the Kinsa app).
We further group different versions of the same device together,
and find that the 793 firmware represent 538 unique devices.
Firmware categorization. To better understand the security im-
plications across firmware, we would like to first categorize them.
While it is challenging to directly infer their categories from the
firmware code, we notice there are two sources that can help: (i)
the parameters of the SDK function SD_BLE_GAP_APPEARANCE_SET
from Nodic that specifies the device types (e.g., sensor, keyboard,
etc., and there are 50 such types), and (ii) the mobile app description
associated with the firmware. Therefore, we use the following ap-
proach to infer the firmware categories: if SD_BLE_GAP_APPEARANCE
_SET API is available in the firmware code, we directly obtain the
device type; otherwise we manually infer the device category based
on the app description. With this approach, we eventually identified
108 firmware categories (note that the extra category beyond what
is defined by the API comes from our manual analysis of the app
description). The categories with at least two devices are in the first
column of Table 2, and we can notice that the top 5 most popular
categories are (1) wearable (e.g., smart band and smart watch), (2)
sensor (e.g., speed and humidity sensor), (3) tag (e.g., device tracker),
(4) robot (e.g., robot dog), and (5) medical device (e.g., blood pressure
monitor). For the category (e.g., drone, sim charger, smart luggage)
that has only one device, we aggregate them in the Others category
shown in the 2nd row of Table 2.
Experiment environment. Our analysis was performed on a
Linux sever equipped with twelve Intel Core i7-8700 (3.20 GHz)
CPUs and 32 GB RAM, running Ubuntu 18.04.2 LTS.
(a) A Nordic firmware.
(b) 793 Nordic firmware
(c) A TI firmware.
(d) 25 TI firmware
Figure 7: Distribution of target function value N(x) across:
(a)(c) candidate base addresses of a single firmware, and
(b)(d) recognized base addresses among all firmware.
5.2 Experiment Results
Among the 538 unique devices (from 793 firmware), FirmXRay
has identified 528 (98.1%) of them configured with random static
MAC addresses, 385 (71.5%) Just Works pairing, and 530 (98.5%)
insecure key exchange using Legacy pairing. The detailed statistics
of the vulnerabilities across firmware categories are shown in the
6th - 11th columns of Table 2. In the following, we zoom in how
FirmXRay reaches these results. In particular, we first describe
the effectiveness of firmware base address recognition in §5.2.1,
followed by the results of the three types of vulnerabilities identified
in §5.2.2, §5.2.3, and §5.2.4, respectively.
5.2.1 Effectiveness of Base Address Recognition. To validate the ef-
fectiveness of our base addresses recognition, we need to first search
for the ground truth of the base addresses. Interestingly, we notice
that there are 42 firmware exposing their SDK versions (e.g., S110,
S130) in their file names, which enables identifying their base ad-
dresses according to the SDK specifications. Among these firmware,
we found FirmXRay correctly recovered all the base addresses without
any false positives. We further demonstrate the advantage of combin-
ing three sets of pointers, by using only one of the three sets to infer
the base address. The detailed experimental results are presented in
Table 3, which shows the number of firmware that are (in)correctly
recovered with base addresses among the 42 ground truth samples.
As shown, using only a single set of pointers will all result in false
positives ranging from 4.8% to 66.7%. We further investigated these
cases, and found that the failure is due to the lack of enough ab-
solute pointers. For instance, the nrf52810_xxaa.bin firmware only
contains 7 absolute function pointers, while there are usually tens
of such pointers in other firmware. Therefore, we have to combine
all three sets of pointers together to reduce false positives.
0x00x30000x60000x90000xc0000xf0000x120000x150000x180000x1b0000x1e0000x210000x240000x270000x2a0000x2d000Base Address05101520253035N(x)0x00x60000xc0000x120000x180000x1e0000x240000x2a0000x300000x360000x3c000Base Address0100200300400N(x)0x00x40000x80000xc0000x100000x140000x180000x1c0000x200000x240000x280000x2c0000x300000x340000x38000Base Address05101520253035N(x)0x00x40000x80000xc0000x100000x140000x180000x1c000Base Address20406080100N(x)Firmware Name Mobile App
cogobeacon
sd_bl
LRFL_nRF52
orb
sd_bl
com.aegismobility.guardian Car Accessory
fr.solem.solemwf
fr.solem.solemwf
one.shade.app