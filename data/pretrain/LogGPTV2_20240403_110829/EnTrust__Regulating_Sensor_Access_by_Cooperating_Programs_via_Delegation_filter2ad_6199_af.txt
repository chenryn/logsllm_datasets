### References

1. [Defenses]. In USENIX Security Symposium, 2011.
2. Aafer, Y., Zhang, N., Zhang, Z., Zhang, X., Chen, K., Wang, X., Zhou, X., Du, W., and Grace, M. "Hare hunting in the wild Android: A study on the threat of hanging attribute references." In CCS, 2015, ACM.
3. Roesner, F., Kohno, T., Moshchuk, A., Parno, B., Wang, H., and Cowan, C. "User-driven access control: Rethinking permission granting in modern operating systems." In S&P, 2012, IEEE.
4. Ringer, T., Grossman, D., and Roesner, F. "Audacious: User-driven access control with unmodified operating systems." In CCS, 2016, ACM.
5. Petracca, G., Reineh, A.-A., Sun, Y., Grossklags, J., and Jaeger, T. "AWare: Preventing abuse of privacy-sensitive sensors via operation bindings." In USENIX Security Symposium, 2017.
6. Onarlioglu, K., Robertson, W., and Kirda, E. "Input-driven access control for better privacy on traditional operating systems." In DSN, 2016, IEEE/IFIP.
7. Nadkarni, A., and Enck, W. "Preventing accidental data disclosure in modern operating systems." In CCS, 2013, ACM.
8. Wijesekera, P., Baokar, A., Tsai, L., Reardon, J., Egelman, S., Wagner, D., and Beznosov, K. "The feasibility of dynamically granted permissions: Aligning mobile privacy with user preferences." In S&P, 2017, IEEE.
9. Olejnik, K., Da Costa, I., Machado, J.S., Huguenin, K., Khan, M.E., and Hubaux, J.P. "Smarper: Context-aware and automatic runtime-permissions for mobile devices." In S&P, 2017, IEEE.
10. Jia, Y. J., Chen, Q. A., Wang, S., Rahmati, A., Fernandes, E., Mao, Z. M., and Prakash, A. "ContexIoT: Towards Providing Contextual Integrity to Appified IoT Platforms." In NDSS, 2017.
11. Acar, Y., Backes, M., Bugiel, S., Fahl, S., McDaniel, P., and Smith, M. "SOK: Lessons learned from Android security research for appified software platforms." In S&P, 2017, IEEE.
12. Li, L., Bartel, A., Bissyandé, T. F., Klein, J., Le Traon, Y., Arzt, S., Rasthofer, S., Bodden, E., Octeau, D., and McDaniel, P. "ICCTA: Detecting inter-component privacy leaks in Android apps." In ICSE, 2015, IEEE.
13. Octeau, D., McDaniel, P., Jha, S., Bartel, A., Bodden, E., Klein, J., and Le Traon, Y. "Effective inter-component communication mapping in Android with EPICC: An essential step towards holistic security analysis." In USENIX Security Symposium, 2013.
14. Nadkarni, A., Andow, B., Enck, W., and Jha, S. "Practical DIFC enforcement on Android." In USENIX Security Symposium, 2016.
15. Octeau, D., Luchaup, D., Dering, M., Jha, S., and McDaniel, P. "Composite constant propagation: Application to Android inter-component communication analysis." In ICSE, 2015, IEEE.
16. Octeau, D., Jha, S., Dering, M., McDaniel, P., Bartel, A., Li, L., Klein, J., and Le Traon, Y. "Combining static analysis with probabilistic models to enable market-scale Android inter-component analysis." In ACM SIGPLAN Notices, 2016.
17. Krohn, M.N., Yip, A., Brodsky, M., Cliffer, N., Kaashoek, M.F., Kohler, E., and Morris, R. "Information flow control for standard OS abstractions." In SOSP, 2007.
18. Zeldovich, N., Boyd-Wickizer, S., Kohler, E., and Mazières, D. "Making information flow explicit in HiStar." In OSDI, 2006.
19. Chatterjee, R., Doerfler, P., Orgad, H., Havron, S., Palmer, J., Freed, D., Levy, K., Dell, N., McCoy, D., and Ristenpart, T. "The Spyware Used in Intimate Partner Violence." In S&P, 2018, IEEE.
20. Chin, E., Felt, A. P., Greenwood, K., and Wagner, D. "Analyzing inter-application communication in Android." In MobiSys, 2011, ACM.
21. Huang, L.-S., Moshchuk, A., Wang, H. J., Schecter, S., and Jackson, C. "Clickjacking: Attacks and defenses." In USENIX Security Symposium, 2012.
22. Luo, T., Jin, X., Ananthanarayanan, A., and Du, W. "Touchjacking attacks on web in Android, iOS, and Windows phone." In FPS, 2012.
23. Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., and Sheth, A. N. "TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones." In USENIX OSDI, 2010.
24. Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., Octeau, D., and McDaniel, P. "FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps." ACM Sigplan Notices, 2014, pp. 259–269.
25. Tang, Y., Ames, P., Bhamidipati, S., Bijlani, A., Geambasu, R., and Sarda, N. "CleanOS: Limiting mobile data exposure with idle eviction." In USENIX OSDI, 2012.
26. Sun, Y., Petracca, G., Ge, X., and Jaeger, T. "Pileus: Protecting user resources from vulnerable cloud services." In ACSAC, 2016, ACM.
27. Wijesekera, P., Baokar, A., Hosseini, A., Egelman, S., Wagner, D., and Beznosov, K. "Android permissions remystified: A field study on contextual integrity." In USENIX Security Symposium, 2015.
28. Levy, H. M. "Capability-Based Computer Systems." Digital Press. Available at http://www.cs.washington.edu/homes/levy/capabook/, 1984.
29. Prevelakis, V., and Spinellis, D. "Sandboxing applications." In USENIX Annual Technical Conference, FREENIX Track, 2001.
30. Chang, F., Itzkovitz, A., and Karamcheti, V. "User-level resource-constrained sandboxing." In USENIX Windows Systems Symposium, 2000.
31. Smalley, S., Vance, C., and Salamon, W. "Implementing SELinux as a Linux security module." NAI Labs Report #01-043, 2001.
32. Smalley, S., and Craig, R. "Security Enhanced (SE) Android: Bringing flexible MAC to Android." In NDSS, 2013.
33. Ye, Z., Smith, S., and Anthony, D. "Trusted paths for browsers." ACM Transactions on Information and System Security, 2005.
34. Zhou, Z., Gligor, V., Newsome, J., and McCune, J. "Building verifiable trusted path on commodity x86 computers." In S&P, 2012, IEEE.
35. Shapiro, J., Vanderburgh, J., Northup, E., and Chizmadia, D. "Design of the EROS trusted window system." In USENIX Security Symposium, 2004.
36. Li, W., Ma, M., Han, J., Xia, Y., Zang, B., Chu, C.-K., and Li, T. "Building trusted path on untrusted device drivers for mobile devices." In Asia-Pacific Workshop on Systems, 2014, ACM.
37. Eugster, P., Felber, P., Guerraoui, R., and Kermarrec, A.-M. "The many faces of publish/subscribe." ACM Computing Surveys, 2003.
38. Mellor-Crummey, J. M., and Scott, M. L. "Scalable reader-writer synchronization for shared-memory multiprocessors." ACM SIGPLAN Notices, 1991.
39. Felt, A. P., Ha, E., Egelman, S., Haney, A., Chin, E., and Wagner, D. "Android permissions: User attention, comprehension, and behavior." In SOUPS, 2012, ACM.
40. Rivest, R., Shamir, A., and Adleman, L. "A method for obtaining digital signatures and public-key cryptosystems." Communications of the ACM, 1978.
41. Bianchi, A., Corbetta, J., Invernizzi, L., Fratantonio, Y., Kruegel, C., and Vigna, G. "What the App is that? Deception and countermeasures in the Android user interface." In S&P, 2015, IEEE.
42. Cummings, P., Fullan, D.A., Goldstein, M.J., Gosse, M.J., Picciotto, J., Woodward, J.P., and Wynn, J. "Compartmented Model Workstation: Results through prototyping." In S&P, 1987, IEEE.
43. Schechter, S. "Common pitfalls in writing about security and privacy human subjects experiments, and how to avoid them." Microsoft Tech. Rep., 2013.
44. Felt, A. P., Egelman, S., Finifter, M., Akhawe, D., and Wagner, D. "How to ask for permission." In USENIX Workshop on Hot Topics in Security, 2012.
45. Sheehan, K.B. "Toward a typology of Internet users and online privacy concerns." The Information Society, 2012.
46. Debatin, B., Lovejoy, J.P., Horn, A.K., and Hughes, B.N. "Facebook and online privacy: Attitudes, behaviors, and unintended consequences." Journal of Computer-Mediated Communication, 2009.
47. Petracca, G., Atamli-Reineh, A., Sun, Y., Grossklags, J., and Jaeger, T. "Aware: Controlling app access to I/O devices on mobile platforms." CoRR abs/1604.02171, 2016.
48. Ongtang, M., McLaughlin, S., Enck, W., and McDaniel, P. "Semantically rich application-centric security in Android." Security and Communication Networks, 2012.
49. Dietz, M., Shekhar, S., Pisetsky, Y., Shu, A., and Wallach, D. "Quire: Lightweight provenance for smart phone operating systems." In USENIX Security Symposium, 2011.
50. Sasse, M. A., Brostoff, S., and Weirich, D. "Transforming the ‘Weakest Link’ — a Human/Computer Interaction Approach to Usable and Effective Security." BT Technology Journal, 2001.
51. Arce, I. "The weakest link revisited [information security]." In IEEE Security & Privacy, 2003.
52. Fahl, S., Harbach, M., Acar, Y., and Smith, M. "On the Ecological Validity of a Password Study." In Ninth Symposium on Usable Privacy and Security, 2013.

### Appendices

#### Appendix A - Study Demographics
In total, 69 recruited subjects completed our study. Of these, 34 (49%) were female. Age distribution was as follows: 36 (52%) were 18-25 years old, 27 (39%) were 26-50 years old, and 6 (9%) were over 51 years old. Among the participants, 33 (48%) were students from our institution, with 9 (13%) being undergraduates and 24 (35%) being graduate students. Two (3%) were Computer Science majors. Employment sectors included: 11 (16%) in Public Administration, 9 (13%) in Hospitality, 6 (9%) in Human Services, 6 (9%) in Manufacturing, and 4 (6%) in Science or Engineering. All participants reported being active smartphone users (1-5 hours/day). Additionally, 42 (61%) were long-term Android users (3-5 years), while others were long-term iOS users. For our laboratory and field studies, we distributed the participants as evenly as possible. Each lab group had 9 long-term Android users, and the remaining 6 long-term Android users participated in our field study.

#### Appendix B - Time Constraints Analysis
We leveraged data collected from the field study to perform an analysis of time constraints for input events and action/operation requests, to calibrate the time window for the event ambiguity prevention mechanism (Section 4.2). Figure 8 reports the measurements of the gaps between consecutive input events and handoff events, as well as the lags between each event and the corresponding response from the serving program. From the measurements, we observed:
1. The minimum gap between subsequent input events targeting the same program (211 ms) is an order of magnitude larger than the maximum lag required by the program to serve each incoming event (22 ms).
2. The minimum gap (171 ms) between subsequent handoff events targeting the same program is an order of magnitude larger than the maximum lag required by the program to serve incoming requests (15 ms).

To avoid ambiguity, we set the time window to 150 ms, ensuring the entire delegation path can be identified before the next event for the same program arrives. Additionally, 87% of the delegation paths had a total length of three edges (one input event, one handoff event, and one sensor operation request). The remaining 13% had a maximum length of four edges (one additional handoff event), supporting our claim that we can hold events without penalizing concurrency.

#### Appendix C - Program Identification
To prove the programs' identity to users, EnTrust specifies both the program's name and visual identity mark (e.g., icon) in every delegation request, as shown in Figure 6. EnTrust retrieves the program's identity by accessing the `AndroidManifest.xml`, which must contain a unique name and a unique identity mark (e.g., icon) for the program package. EnTrust verifies the program's identity via the crypto-checksum of the program’s binary, signed with the developer’s private key and verifiable with the developer’s public key, similar to prior work [46, 47, 11].

#### Appendix D - Input Event Authentication
EnTrust leverages SEAndroid [38] to ensure that programs cannot inject input events by directly writing into input device files (e.g., `/dev/input/*`), corresponding to hardware and software input interfaces attached to the mobile platform. Only device drivers can write into input device files, and only the Android Input Manager, a trusted system service, can read such device files and dispatch input events to programs. Additionally, EnTrust uses the Android screen overlay mechanism to block the overlay of graphical user interface components and prevent hijacking of input events. EnTrust also accepts only voice commands processed by the Android System Voice Actions module. EnTrust authenticates input events by leveraging sixteen mediation hooks placed inside the stock Android Input Manager and six mediation hooks placed inside the System Voice Actions module.

#### Appendix E - Handoff Event Mediation
Programs communicate with each other via Inter-Component Communication (ICC), which in Android is implemented as part of the Binder IPC mechanisms. ICC includes both intent and broadcast messages that can be exchanged among programs. The Binder and the Activity Manager regulate messages exchanged among programs via the intent API. Programs can also send intents to other programs or services using the broadcast mechanism, allowing intents to be sent as arguments in broadcast messages. The Activity Manager routes intents to broadcast receivers based on the information contained in the intents and the broadcast receivers that have registered their interest. To mediate intents and broadcast messages exchanged between programs, EnTrust leverages mediation hooks placed inside the Activity Manager and the Binder.

Other operating systems support mechanisms similar to Android's Intents. For example, macOS and iOS use the Segue mechanism, while Chrome OS supports Web Intents. Thus, EnTrust can be implemented for other modern systems supporting the cooperating program abstraction.

#### Appendix F - Sensor Operation Mediation
Android uses the Hardware Abstraction Layer (HAL) interface to allow only system services and privileged processes to access system sensors indirectly via a well-defined API exposed by the kernel. SEAndroid [38] ensures that only system services can communicate with the HAL at runtime. Other programs (e.g., apps) must interact with such system services to request execution of operations targeting sensors. EnTrust leverages this mediation layer to identify operation requests generated by programs, placing 12 hooks inside the stock Android Audio System, Media Server, Location Services, and Media Projection.

### Notes
1. In this paper, we use the term "delegate" to refer to the use of IPCs to request help in task processing, not the granting of permissions to other processes.
2. One of the surveillance mobile apps available online (e.g., FlexiSPY).
3. Several banks are now offering these services to their clients.
4. https://source.android.com
5. The runtime permission mechanism enabled users to revoke permissions at any time.
6. Source: https://fortune.com
7. https://dialogflow.com
8. https://source.android.com/compatibility/cts/
9. Android Open Source Project - https://source.android.com
10. This range was selected based on the size of the delegation graphs created during our experiments, which should be representative of real scenarios.
11. https://developer.android.com/studio/test/monkey.html
12. To stress test our system, we selected a lower bound that is considerably lower than the maximum speed at which a user can possibly keep tapping on the screen (∼210 ms).
13. Chosen among the most-downloaded Android apps from the Google Play Store and including all apps and system services shipped with the stock Android OS.
14. Equivalent of IPCs for Android OS.
15. Gaps higher than 1,500 ms were excluded because they were not relevant to the analysis.
16. Android requires all apps and services to be signed by their developers.
17. https://developers.google.com/voice-actions/
18. https://developer.android.com