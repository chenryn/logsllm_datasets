# samsung漏洞挖掘
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在学习了一些projectzero系列文章后的一些收获，这里主要讲下最近的一个mms exploit系列。
该系列的文章以qmage的解析器codec为对象，详细介绍了发掘可研究点，获取对象信息，挖掘攻击面，寻找和构造攻击向量，编写有效的fuzzer以及最后根据某个漏洞编写exp的一套流程，本文包含了一些学习中感觉有价值的点和一些我踩坑的经历，一并发出来。
## 发掘可研究点
从以往的历史issue中，原作者发现samsung的图像解析器的代码提供商有Quramsoft，在测试手机 /system/lib64发掘到了相关so库：
    libimagecodec.quram.so
    libatomcore.quram.so
    libagifencoder.quram.so
    libSEF.quram.so
    libsecjpegquram.so
    libatomjpeg.quram.so
其中libimagecodec.quram.so是其中体积最大，使用最多，支持解析格式较多的一个库，因此原作者将此作为切入点，最终根据以往的漏洞，决定将切入点确定为通过MediaScanner
service，其一般解析图像的路径是 scanSingleFile -> doScanFile ->
processImageFile，其中processImageFile有一句重要的代码
    BitmapFactory.decodeFile(path, mBitmapOptions);
该操作是解析图像的重点语句，它会调用底层厂商提供的解析器代码，因此可以以此作为深入挖掘的点
## 获取对象信息
溯源那句函数，发现其调用路径 BitmapFactory.decodeFile -> decodeStream ->
decodeStreamInternal -> nativeDecodeStream ->
doDecode，而在doDecode函数中发现其调用的是Skia组件的函数
    SkCodec::MakeFromStream(std::move(stream), &result, &peeker);
    SkCodec::Result result = codec->getAndroidPixels(decodeInfo, decodingBitmap.getPixels(),
                decodingBitmap.rowBytes(), &codecOptions);
据此根据分析samsung手机上的Skia的so库libhwui.so或者是libskia.so来获取根据必要的对象信息，这里一些基本的信息不再累述，原作者都有提到，这里提下其他的。
提供下没有samsung手机但想获取相关so库的解决方法：
  1. [已有的一些android手机的系统文件dump仓库](https://git.rip/dumps/samsung?page=1)，注意版本对应samsung的android10系统
  2. 下载samsung的系统镜像，[sammobile网站](https://www.sammobile.com/firmwares/)，或者xda也有一些，在下载完了以后，将系统镜像解压出来，在解析system.img文件
这里的话主要是下载一月和八月的系统镜像:
  1. [N9760ZCU1BTA1_N9760CHC1BTA1_CHC(android10，2020-01-01)](https://www.sammobile.com/samsung/galaxy-note-10-plus/firmware/SM-N9760/CHC/download/N9760ZCU1BTA1/317963/)
  2. [N9760ZCU3CTH1_N9760CHC3CTH1_CHC(android10，2020-08-01)](https://www.sammobile.com/samsung/galaxy-note-10-plus/firmware/SM-N9760/CHC/download/N9760ZCU3CTH1/362125/)
    $ mkdir system
    $ sudo mount -t ext4 system.img system
    $ ls system
    acct                default.prop           init.usb.rc          product_services
    apex                dev                    init.zygote32.rc     publiccert.pem
    audit_filter_table  dpolicy                init.zygote64_32.rc  res
    bin                 dqmdbg                 keydata              sbin
    bugreports          efs                    keyrefuge            sdcard
    cache               etc                    lost+found           sepolicy_version
    carrier             init                   mnt                  spu
    charger             init.container.rc      odm                  storage
    config              init.environ.rc        oem                  sys
    d                   init.rc                omr                  system
    data                init.recovery.qcom.rc  proc                 ueventd.rc
    debug_ramdisk       init.usb.configfs.rc   product              vendor
## 挖掘攻击面
这里除了逆向相应so库，建议去寻找是否有开源代码，这里的话原作者是从带有” _LL_ “的开源包中找到Skia的部分使用代码。
libQmageDecoder.so大部分行为和Skia接口类似，但是他可以多几种格式多解析，且解析操作的路径也有所区别
## 寻找和构造攻击向量
对于系统自带的功能，可以去通过系统自带的apk中寻找，如在/system/app和/system/priv-app中可以找到类似默认携带的apk，这次使用的是/system/priv-app/SecSetting/SecSettings.apk，将其通过apktool解析，然后从res目录中找到我们需要的种子(这里的话需要旧版本的上android系统上去寻找)，除此之外，由于qmg文件又和media是相关联的，因此在system/media下也有相应的qmg文件
    $ apktool d SecSettings.apk
    $ cd SecSettings/res
    $ ls drawable*/*|grep qmg
    $ for file in /system/media/*.qmg; do xxd -g 1 -l 16 $file; done
原作者一开始尝试触发的方式是将accessibility_light_easy_off.qmg文件在hex
editor中修改了其对应的width和height位，然后在2020-2月的Gallery版本中打开，发现可以触发崩溃，崩溃进程是com.sec.android.gallery3d，因此可以以此去写fuzz
原作者文章中并没介绍fuzzer的具体细节，更多的是在讲整体测试的一个架构，这里的话就主要记录下SkCodecFuzzer的搭建和源码分析以及效果，穿插着原作者的一些介绍
搭建的一些条件直接参考SkCodecFuzzer的文档，原作者之所以这样搭建是因为想在x86上获得更好的测试，因此使用了/system/lib64/*和/system/bin/linker64文件去生成
aarch64上可执行的ELF文件，然后在qemu-aarch64中测试
    $ ls
    androidpath  capstone-4.0.1  depot_tools  libbacktrace  ndk  skia  tmp
    $ ls androidpath/
    bin  lib64
    $ ls androidpath/bin/
    linker64
这里的话根据需要将skia同步至分支android10-release，不然后续会出现如这条[issue](https://github.com/googleprojectzero/SkCodecFuzzer/issues/1)错误
    $ git clone https://github.com/google/skia
    $ git checkout remotes/origin/android/10-release
    $  git branch
    * (HEAD detached at origin/android/10-release)
      master
同时为了防止编译时候会出现该issue问题，capstone编译需要多增加一项针对aarch64的架构的选项
    $ CAPSTONE_ARCHS=aarch64 CAPSTONE_BUILD_CORE_ONLY=yes ./make.sh cross-android64
另外如遇到该[issue错误](https://github.com/googleprojectzero/SkCodecFuzzer/issues/3)，需要修改SkCodecFuzzer的Makefile，除了将路径修正外，需要在CXXFLAGS后面加上一个
-I$(SKIA_PATH)，这是为了Skia库内部文件相互引用时能根据相对路径，其解决方法很耗时，后续如果将skia库同步为android版本则无需添加该路径也可解决该问题
    CXXFLAGS=-D_LIBCPP_ABI_NAMESPACE=__1 -I$(SKIA_PATH)/include/core -I$(SKIA_PATH)/include/codec -I$(SKIA_PATH)/include/config -I$(SKIA_PATH)/include/config/android -I$(CAPSTONE_PATH)/include -I$(LIBBACKTRACE_PATH)/include -I$(SKIA_PATH)
除此之外如遇到下面问题，直接patch掉AArch64BaseInfo.c中掉A64NamedImmMapper_fromString就好，这里并没有使用到，然后重新编译capstone
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/capstone-4.0.1/libcapstone.a(AArch64BaseInfo.o): In function `A64NamedImmMapper_fromString':
    AArch64BaseInfo.c:(.text+0xc8): undefined reference to `__ctype_tolower_loc'
遇到下面这些符号问题(基本上在android10上发生），其实看函数就知道是和内存分配的相关的，因此可以去查看bionic的相关库，发现在
system/apex/com.android.runtime.release/bionic/ 下有 libc.so, libdl.so, libm.so
三个文件，再看 /system/lib64 下的同名文件，发现这三者是符号链接，于是需要把源文件一起放到环境所需的lib64文件夹中
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64/libmemunreachable.so: undefined reference to `malloc_iterate@LIBC_Q'
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64/libmemunreachable.so: undefined reference to `malloc_disable@LIBC_Q'
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64/libmemunreachable.so: undefined reference to `malloc_backtrace@LIBC_Q'
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64/libselinux.so: undefined reference to `__system_properties_init@LIBC_Q'
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64/libmemunreachable.so: undefined reference to `malloc_enable@LIBC_Q'
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64/libmedia.so: undefined reference to `android_mallopt@LIBC_Q'
编译
    $ make
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/ndk/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++ -c -o loader.o loader.cc -D_LIBCPP_ABI_NAMESPACE=__1 -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/core -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/codec -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/config -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/config/android -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/capstone-4.0.1/include -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/libbacktrace/include -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/ndk/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++ -c -o common.o common.cc -D_LIBCPP_ABI_NAMESPACE=__1 -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/core -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/codec -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/config -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/config/android -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/capstone-4.0.1/include -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/libbacktrace/include -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/ndk/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++ -c -o tokenizer.o tokenizer.cc -D_LIBCPP_ABI_NAMESPACE=__1 -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/core -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/codec -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/config -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia/include/config/android -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/capstone-4.0.1/include -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/libbacktrace/include -I/home/test/Desktop/fuzz/SkCodecFuzzer/deps/skia
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/ndk/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang -c -o libdislocator.o ../third_party/libdislocator/libdislocator.so.c
    /home/test/Desktop/fuzz/SkCodecFuzzer/deps/ndk/android-ndk-r20b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++ -o loader loader.o common.o tokenizer.o libdislocator.o -L/home/test/Desktop/fuzz/SkCodecFuzzer/deps/capstone-4.0.1 -lcapstone -L/home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64 -lhwui -ldl -lbacktrace -landroidicu -Wl,-rpath -Wl,/home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/lib64 -Wl,--dynamic-linker=/home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/bin/linker64
    $ ls
    common.cc  common.o         loader     loader.o  run.sh        tokenizer.h
    common.h   libdislocator.o  loader.cc  Makefile  tokenizer.cc  tokenizer.o
    $ file loader
    loader: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /home/test/Desktop/fuzz/SkCodecFuzzer/deps/androidpath/bin/linker64, with debug_info, not stripped
这里分析下这个fuzz的框架，根据run.sh脚本可知核心在loader中，所以直接分析loader链接前的各个目标文件的源码即可
  * loader.cc
    int main(int argc, char **argv) {
      ParseEnvironmentConfig();
      ParseArguments(argc, argv);
      if (!VerifyConfiguration(argv[0])) {
        return 1;
      }
      InitMallocHooks();
      SetSignalHandler(GeneralSignalHandler);
      ProcessImage();
      DestroyMallocHooks();
      _exit(0);
    }
main函数，逻辑看起来并不复杂，大致可以推断出ParseEnvironmentConfig和ParseArguments用于解析配置和参数，InitMallocHooks用以初始化内存分配hook，SetSignalHandler则相对应原文中原作者介绍的一些特殊的信号处理方式，ProcessImage则是主要进行fuzz的函数，DestroyMallocHooks负责清理工作。这里的话我们主要分析下InitMallocHooks，SetSignalHandler，ProcessImage和DestroyMallocHooks
先来看下InitMallocHooks和DestroyMallocHooks这两个函数，原作者初始化和销毁都很简洁，可以看到各个hook底层调用的是afl的hook组件libdislocator.so.c中的函数，除此之外主要起了将重置hook函数和输出栈回溯信息的作用，这些afl组件主要是可以在内存错误发生时提供更为精确的检测，他会将malloc和free在底层实现为mmap和mprotect，将每个返回的块精确地放置在映射的内存页面的末尾，具体细节建议直接阅读源码
因此作者通过这个功能，可以在需要时在libdislocator和jemalloc之间切换，便于记录运行时进程中发生的分配和释放操作。
    static void *my_malloc_hook(size_t, const void *);
    static void *my_realloc_hook(void *, size_t, const void *);
    static void my_free_hook(void *, const void *);
    static void InitMallocHooks() {
      __malloc_hook = my_malloc_hook;
      __realloc_hook = my_realloc_hook;
      __free_hook = my_free_hook;
    }
    static void DestroyMallocHooks() {
      __malloc_hook = NULL;
      __realloc_hook = NULL;
      __free_hook = NULL;
    }
    static void *my_malloc_hook(size_t size, const void *caller) {
      size_t aligned_size = size;
      if (config::android_host) {
        aligned_size = ((size + 7LL) & (~7LL));
        if (aligned_size < size) {
          aligned_size = size;
        }
      }
      void *ret = afl_malloc(aligned_size);
      if (config::log_malloc) {
        DestroyMallocHooks();
        fprintf(stderr, "malloc(%10zu) = {%p .. %p}",
                size, ret, (void *)((size_t)ret + aligned_size));
        PrintMallocBacktrace(caller);
        InitMallocHooks();
      }
      return ret;
    }
    static void *my_realloc_hook(void *ptr, size_t size, const void *caller) {
      size_t aligned_size = size;
      if (config::android_host) {
        aligned_size = ((size + 7LL) & (~7LL));
        if (aligned_size < size) {
          aligned_size = size;
        }
      }
      void *ret = afl_realloc(ptr, aligned_size);
      if (config::log_malloc) {
        DestroyMallocHooks();
        fprintf(stderr, "realloc(%p, %zu) = {%p .. %p}",
                ptr, size, ret, (void *)((size_t)ret + aligned_size));
        PrintMallocBacktrace(caller);
        InitMallocHooks();