if ssΠ is composable ZK for ssΠ.RG, then CPPed
is composable ZK for Dmtx.
q
lin
14 While in our description we use the same commitment key for every uj, our scheme easily extends to the case
where diﬀerent commitment keys are used.
22
5 Eﬃcient CP-SNARKs for Polynomial Commitments
In this section we show a collection of zero-knowledge CP-SNARKs for a variety of relations over
vectors committed using a speciﬁc commitment scheme from [ZGK+17b]. This scheme is for com-
mitting to multivariate polynomials and it can be used for vectors by converting them into their
multilinear extension polynomials. Although this commitment scheme has a specially structured
commitment key, its veriﬁcation algorithm can be casted as a form of Pedersen veriﬁcation; this
means we can apply our results of Section 3.5 to turn all the CP-SNARKs in this section into ones for
a standard Pedersen commitment, or to simply make them work under some common Pedersen-like
scheme. Among the CP-SNARKs in this section, worth mentioning are one for Hadamard product
and one for the self permutation relation. Notably these schemes have a CRS that is universal (and
in some cases deterministically specializable).
5.1 Preliminaries and Building Blocks
We review the main building blocks of our constructions.
Polynomial Commitments
The speciﬁc commitment scheme we consider here is the polynomial commitment underlying the
veriﬁable polynomial delegation (VPD) scheme of Zhang et al. [ZGK+17b]. In a nutshell, a VPD
allows one to commit to multivariate polynomials and later prove their evaluations (also commit-
ted) at a public point. Here we show that their VPD scheme can be seen as a CP-SNARK for
such polynomial commitment, for relations encoding polynomial evaluations. Namely, whereas in
[ZGK+17b] VPD is presented as a single primitive, here we separate the commitment scheme from
the argument system. With this simple change (together with a slightly stronger zero-knowledge
notion) we can use our composition results to argue security when commitments are reused across
diﬀerent proofs.
Formally, we consider a commitment scheme whose message space D includes both values in
a ﬁnite ﬁeld F and a class F of polynomials with coeﬃcients in F, with µ variables and maximal
degree δ in each variable. We denote these partitions of D = F ∪ F as Dpol = F and Dval = F
and we use a ﬂag type to diﬀerentiate between them so that f ∈ F when type = pol, and f ∈ F
when type = val.15 In addition to satisfying the notion of Deﬁnition 2.1, we assume the scheme to
be knowledge extractable and to have a trapdoor generation. For convenience, we summarize its
deﬁnition below.
Deﬁnition 5.1 (Extractable Trapdoor Polynomial Commitments). An extractable trapdoor
polynomial commitment scheme for a class of polynomials F is a tuple of algorithms PolyCom =
(Setup, Commit, CheckCom, VerCommit) that work as follows.
Setup(1λ) → ck : takes the security parameter and outputs a commitment key ck.
Commit(ck, f, type) → (cf , of ) : takes the commitment key ck, a ﬂag type ∈ {pol, val} and an ele-
ment f ∈ Dtype, and outputs a commitment cf and an opening of . We use ComPoly(ck,·) and
ComVal(ck,·) as shorthands for Commit(ck,·, pol) and Commit(ck,·, val) respectively. We also as-
sume that type is part of cf , namely it is not hidden.
CheckCom(ck, c) → b : takes as input a commitment c and accepts it as valid (b = 1) or not (b = 0).
15 Note that the only ambiguity can occur when diﬀerentiating a degree-0 polynomial from a point.
23
VerCommit(ck, cf , f, of ) → b : takes as input commitment c, element f ∈ D and opening of , and
accepts (b = 1) or rejects (b = 0). If f is a degree-0 polynomial the same algorithm applies to
commitments created using ComVal
PolyCom must satisfy correctness, binding and (perfect) hiding as in Deﬁnition 2.1 (with the ad-
ditional requirements that correctness also implies that CheckCom accepts, and binding holds for
adversarial commitments that are accepted by CheckCom). In addition PolyCom must satisfy the
trapdoor and extractability properties deﬁned below.
Trapdoor. There exists three algorithms (ck, td) ← Sck(1λ),(c, st) ← TdCom(td, type) and
o ← TdOpen(td, st, c, f ) such that: the distribution of the commitment key returned by Sck is per-
fectly/statistically close to the one of the key returned by Setup; for any type ∈ (pol, val), any
f ∈ Dtype, (c, o) ≈ (c(cid:48), o(cid:48)) where (c, o) ← Commit(ck, f, type), (c(cid:48), st) ← TdCom(td, type) and
o(cid:48) ← TdOpen(td, st, c(cid:48), f ).
Extractability. PolyCom is knowledge extractable for auxiliary input distribution Z if for every
(non-uniform) eﬃcient adversary A there exists a (non-uniform) eﬃcient extractor E such that
Pr[GameextrZ,A,E = 1] = negl.
GameextrZ,A,E
ck ← Setup(1λ) ; auxZ ← Z(1λ) ; c ← A(ck, auxZ ) ; (f, o) ← E(ck, auxZ )
return CheckCom(ck, c) ?= 1 ∧ VerCommit(ck, c, f, o) ?= 0
Linearly Homomorphic Commitments. For the constructions presented in this section we
assume that the commitments are linearly homomorphic. That is we assume existence of a de-
terministic algorithm (c(cid:48), o(cid:48)) ← HomEval(ck, g, (cj)j∈[(cid:96)], (oj)j∈[(cid:96)]) such that, for a linear function
g : F(cid:96) → F, if VerCommit(ck, cj, aj, oj) = 1 then VerCommit(ck, c(cid:48), g((aj)j∈[(cid:96)]), o(cid:48)) = 1. In the paper
we assume HomEval takes in the vector of (cid:96) coeﬃcients of g.
Zero-knowledge CP-SNARKs for PolyCom
Constructions in this section use the following existing CP-SNARKs for the scheme PolyCom:
?= u2, where u1, u2 ∈ F.
?= u1 · u2, where u1, u2, u3 ∈ F.
– CPeq: a CP-SNARK for relation Req(u1, u2) := u1
– CPprd: a CP-SNARK for relation Rprd(u1, u2, u3) := u3
– CPpoly: a CP-SNARK for the relation Rpoly over Dx × D1 × D2 where Dx = Fµ, D1 = F, D2 = F
and Rpoly(x, f, y) := y ?= f (x). For zero-knowledge, we assume that CPpoly satisﬁes a notion
where the commitment key is generated in trapdoor mode and the CPpoly simulators (Skg,Sprv)
get access to the commitment trapdoor produced by Sck. Note that such notion is weaker than the
one of Deﬁnition 3.1 but suﬃcient to argue that a scheme satisfying this notion is a cc-SNARK.
In Appendix E we show pairing-based constructions of PolyCom and CPpoly extracted from
the veriﬁable polynomial delegation scheme of Zhang et al. [ZGK+17b]. As observed by Zhang
et al. constructions for CPeq and CPprd can be obtained using standard techniques from classical
sigma-protocols. Finally, we observe that all these schemes share the same (deterministic) KeyGen
algorithm that, on input the commitment key ck, simply partitions the elements of ck into ek = ck
and vk = cvk, where cvk is a subset of the elements in ck that is suﬃcient to run algorithms
CheckCom, ComVal and HomEval.
24
Efficiency. Both proof-of-equality and proof-of-product (Appendix A in [WTas+17]) are built
as Sigma protocols, where both prover and veriﬁer run in constant time. They can be made non-
interactive using the Fiat-Shamir heuristic [FS87]. The proof in CPeq consists of one group element
and one ﬁeld element. In CPprd, the prover sends 3G1 + 5F. The proof in CPpoly for polynomial
evaluation CPpoly needs 2(µ + 1) group elements, its veriﬁer runs in O(µ) and the prover in time
O(m). Here, µ is the number of variables of the polynomial and m is its number of monomials. The
KeyGen algorithm of CPpoly outputs an evaluation key of (2(δ + 1)µ + 3)G1 + (µ + 3)G2 elements and
a subset veriﬁcation key of size (µ + 3)G2, where δ is the maximum degree in each variable of the
committed polynomial. For clariﬁcation, note that by construction the public parameters P within
the commitment key are formed by two group elements per element in the set of all multisets of
{1, . . . , µ} where each element appears at most δ times. Asymptotically, the crs of CPpoly contains
(cid:1)) group elements. As will be explained, in our setting δ = 1, which keeps the crs size small.
O((cid:0)µδ+µ
µδ
Multilinear Extensions
Given a function f : {0, 1}µ → F, its unique multilinear extension (MLE) is the (unique) multilinear
polynomial ˜f : Fµ → F such that f (b) = ˜f (b) for all b ∈ {0, 1}µ. Such multilinear extension is
deﬁned as the following polynomial
˜f (X1, . . . , Xµ) =
χb(X1, . . . , Xµ) · f (b)
b∈{0,1}µ
where χb(X1, . . . , Xµ) =(cid:81)µ
j=1 χbj (Xj), χ1(X) = X and χ0(X) = 1 − X. For a vector u ∈ Fm (for
0 ≤ i ≤ m− 1 with i =(cid:80)µ−1
some m = 2µ), its unique MLE is the MLE ˜u of the function u : {0, 1}µ → F such that, for every
j=0 ij2j, u(i0, . . . , iµ−1) = ui+1. Note that by using MLEs one can commit
Let eq : {0, 1}µ ×{0, 1}µ → {0, 1} be the equality predicate (eq(a, b) = 1 iﬀ a = b) and let (cid:101)eq be
to a vector u using PolyCom by committing to its MLE ˜u, with maximum variable degree δ = 1.
its MLE (which has a closed-form representation that allows evaluation in time O(µ) [Tha13]). We
recall the following lemma from [Rot09] (as restated in [Tha13]):
Lemma 5.1 ([Rot09, Lemma 3.2.1]). For any polynomial h : Fµ→ F extending p : {0, 1}µ → F
(i.e., such that ∀b ∈ {0, 1}µ : h(b) = p(b)), it holds
(cid:88)
(cid:88)
(cid:101)eq(X, b) · h(b).
˜p(X) =
b∈{0,1}µ
5.2 A CP-SNARK for Sum-Check
The sum-check protocol [LFKN92] is an interactive proof that allows a prover to convince a veriﬁer
b∈{0,1}µ g(b) where g : Fµ → F. The protocol consists
i=1 degi(g)) plus the
of the validity of a statement of the form t =(cid:80)
of µ rounds, it is public coin, and the running time of the veriﬁer in it is O((cid:80)µ
t =(cid:80)
mials of the form g(S) =(cid:81)p
Here we propose a zero-knowledge variant of the sum-check protocol where both the polyno-
mial g and the target value t are committed and one proves knowledge of these values such that
b∈{0,1}µ g(b). Precisely, we work with polynomials g deﬁned as the product of p + 1 polyno-
i=0 gi(S), such that all the gi’s, except g0, are committed. Namely, we
cost of evaluating g once (on a random point).
25
show a CP-SNARK CPsc for commitment scheme PolyCom and the relation Rsc(x, u), with x ∈ F
and u ∈ F × F p, that is formally deﬁned as:
Rsc(g0, (t, (gj)j∈[p])) = 1 ⇐⇒ g(S) =(cid:81)p
i=0gi(S) ∧ t =(cid:80)
b∈{0,1}µ g(b)
Our scheme, dubbed CPsc, is built as a generalization of the protocol recently proposed in
[ZGK+17b, WTs+18] that works for a relation that is the same as the above one except that only t
is committed while g is public to the veriﬁer. For the reader familiar with the zero-knowledge sum-
check protocol in [ZGK+17b, Construction 2], what we do here is to modify their protocol using the
following ideas: whereas in [ZGK+17b] the veriﬁer has access to g and computes a commitment to
g(s) for a random point s on its own, in our case the veriﬁer has access to a commitment cg of g and
we let the prover create a commitment to g(s) and use CPpoly to prove its correctness with respect
to cg. More precisely, the veriﬁer does not have a commitment to g but rather commitments to the
factors of g. Hence our prover proceeds by additionally creating commitments to each gi(s), it proves
i=0 gi(s) with respect to these
commitments. Making these changes results in a protocol that is the same as that in [ZGK+17b]
except for the last round from the prover to the veriﬁer. Indeed we can prove the security of our
protocol by making a reduction to the one of [ZGK+17b]. In Figure 3 we give a detailed description
of this protocol for the case p = 2; this is suﬃcient for our applications.
their correct evaluations and then uses CPprd to prove that g(s) =(cid:81)p
Protocol Πsc:
Common input: ct, g0, c1, c2; P’s input: (t, ot, g1, o1, g2, o2)
P : g(S) :=(cid:81)2
P : hi(X) :=(cid:80)
i=0gi(S), c0 := ct, t0 := t, ρ0 := ot, let f (A0, . . . Ak) := A0 +(cid:80)d
bi+1,...,bµ∈{0,1}g(s1, . . . , si−1, X, bi+1, . . . , bµ) :=(cid:80)d
for i = 1 . . . µ :
j=0ajX j
j=0Aj := (2, 1, . . . , 1)
P : compute {(comaj , ρaj ) ← ComVal(ck, aj)}d
j=0, (com
∗
i−1, ρ
i−1) ← HomEval(ck, f,{comaj}d
∗
j=0),{ρaj}d
j=0)
πeq ← CPeq.Prove(ck, comi−1, com
∗
i−1, ti−1, hi(0) + hi(1), ρi−1, ρ
∗
i−1)
j=0),·)
i−1, πeq), si ←$ F, (comi,·) ← HomEval(ck, (1, si, . . . , sd
∗
i−1,·) ← HomEval(ck, f,{comaj}d
∗
i ),{comaj}d
j=0,·)
j=0, πeq
P → V : {comaj}d
V : {CheckCom(cvk, comaj )}d
V : CPeq.VerProof(cvk, comi−1, com
V → P : si ∈ F
P : ti ← hi(si), (comi, ρi) ← HomEval(ck, (1, si, . . . , sd
j=0, compute (com
i ),{comaj}d
j=0,{ρaj}d
j=0)
endfor
P : {(c
j) ← ComVal(ck, g
(cid:48)
(cid:48)
j, o
P : (c
1) ← HomEval(ck, g0(s), c
∗
∗
1, o
P → V : c
(cid:48)
1, c
(cid:48)
2, π1, π2, π
∗
V :(cid:86)
j=1,2CheckCom(cvk, c(cid:48)
1,·) ← HomEval(ck, g0(s), c
V : (c
∗
j) ∧ CPpoly.VerProof(vk, s, cj, c(cid:48)
1,·), CPprd.VerProof(vk, (c
(cid:48)
j, πj)
∗
(cid:48)
2, comµ), π
1, c
∗
)
j := gj(s)), πj ← CPpoly.Prove(ek, s, (cj, c
j))}j=1,2
(cid:48)
(cid:48)
(cid:48)
(cid:48)
j), (gj, g
j), (oj, o
2, comµ), (g0(s) · g
(cid:48)
(cid:48)
∗