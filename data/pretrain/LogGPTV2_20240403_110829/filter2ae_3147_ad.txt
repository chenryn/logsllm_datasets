                time.sleep(10)
                continue
            if PLUGIN_DB:
                del sys.modules[PLUGIN_DB.keys()[0]] # 清理插件缓存
                PLUGIN_DB.clear()
            for task_netloc in task_target:
                while True:
                    if int(thread._count()) = 1: return
        script_plugin = []
        json_plugin = []
        # 获取vuldb中的插件
        file_list = os.listdir(sys.path[0] + '/vuldb')
        time_ = datetime.datetime.now()
        for filename in file_list:
            try:
                # 插件分为json和py两种格式
                if filename.split('.')[1] == 'py':
                    script_plugin.append(filename.split('.')[0])
                if filename.split('.')[1] == 'json':
                    json_plugin.append(filename)
            except:
                pass
        for plugin_name in script_plugin:
            try:
                # py格式的插件直接导入，然后读取对于变量，插入到mongodb中
                res_tmp = __import__(plugin_name)
                plugin_info = res_tmp.get_plugin_info()
                plugin_info['add_time'] = time_
                plugin_info['filename'] = plugin_name
                plugin_info['count'] = 0
                na_plugin.insert(plugin_info)
            except:
                pass
        for plugin_name in json_plugin:
            try:
                # json格式的插件，用json解析后读取对应变量，插入到mongodb中
                json_text = open(sys.path[0] + '/vuldb/' + plugin_name, 'r').read()
                plugin_info = json.loads(json_text)
                plugin_info['add_time'] = time_
                plugin_info['filename'] = plugin_name
                plugin_info['count'] = 0
                del plugin_info['plugin']
                na_plugin.insert(plugin_info)
            except:
                pass
### get_config
    def get_config():
        try:
            config_info = na_config.find_one({"type": "vulscan"})
            pass_row = config_info['config']['Password_dic']
            thread_row = config_info['config']['Thread']
            timeout_row = config_info['config']['Timeout']
            white_row = config_info['config']['White_list']
            password_dic = pass_row['value'].split('\n')
            thread_count = int(thread_row['value'])
            timeout = int(timeout_row['value'])
            white_list = white_row['value'].split('\n')
            return password_dic, thread_count, timeout, white_list
        except Exception, e:
            print e
和之前nascan中的读取配置类似，只是这回读的是type为vulscan的配置
读取弱口令、线程数、timeout、白名单之类的配置参数，然后返回
### monitor
新起了个`monitor`监测线程，监测插件的使用情况
    def monitor():
        # 引入全局变量
        global PASSWORD_DIC, THREAD_COUNT, TIMEOUT, WHITE_LIST
        while True:
            # 获取正在执行的任务
            queue_count = na_task.find({"status": 0, "plan": 0}).count()
            if queue_count:
                # 如果有正在执行的任务，则置为1
                load = 1
            else:
                # 否则根据当前线程数，来判断插件是否在被使用
                ac_count = thread._count()
                load = float(ac_count - 4) / THREAD_COUNT
            if load > 1: load = 1
            if load  0:
                time.sleep(8)
            else:
                time.sleep(60)
* * *
然后进入到`while True`的循环
通过`queue_get()`进行任务参数的获取
    def queue_get():
        global TASK_DATE_DIC
        # 获取未加载的task，更新为启动状态
        task_req = na_task.find_and_modify(query={"status": 0, "plan": 0}, update={"$set": {"status": 1}}, sort={'time': 1})
        if task_req:
            # 如果存在，在TASK_DATE_DIC记录task，然后返回任务信息
            TASK_DATE_DIC[str(task_req['_id'])] = datetime.datetime.now()
            return task_req['_id'], task_req['plan'], task_req['target'], task_req['plugin']
        else:
            # 获取 plan != 0 的task列表
            task_req_row = na_task.find({"plan": {"$ne": 0}})
            if task_req_row:
                for task_req in task_req_row:
                    # 判断是否需要再次启动任务
                    if (datetime.datetime.now() - task_req['time']).days / int(task_req['plan']) >= int(task_req['status']):
                        if task_req['isupdate'] == 1:
                            # 任务更新后，需要重新从info集合中获取ip和port
                            # 更新task集合的target
                            task_req['target'] = update_target(json.loads(task_req['query']))
                            na_task.update({"_id": task_req['_id']}, {"$set": {"target": task_req['target']}})
                        # 更新task集合中的status自增1
                        na_task.update({"_id": task_req['_id']}, {"$inc": {"status": 1}})
                        # 在TASK_DATE_DIC记录task
                        TASK_DATE_DIC[str(task_req['_id'])] = datetime.datetime.now()
                        # 返回task信息
                        return task_req['_id'], task_req['plan'], task_req['target'], task_req['plugin']
            return '', '', '', ''
回到`__main__`中
    # 获取任务信息
    task_id, task_plan, task_target, task_plugin = queue_get()
    if task_id == '':
        # 没有获取到task配置则sleep10秒后继续获取
        time.sleep(10)
        continue
    if PLUGIN_DB:
        # 当有插件缓存时清理插件缓存
        # 后面扫描时会导入插件模块，删除之前导入的模块
        del sys.modules[PLUGIN_DB.keys()[0]] 
        PLUGIN_DB.clear()
    for task_netloc in task_target:
        while True:
            # 控制线程数
            if int(thread._count()) 