# pikachu-WalkThrough
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**靶场项目地址**
- https://github.com/zhuifengshaonianhanlu/pikachu
**知识点**
- [Burte Force](#burte_force)
    - [基于表单的暴力破解](#基于表单的暴力破解)
    - [验证码绕过(on server)](#验证码绕过(on_server))
    - [验证码绕过(on client)](#验证码绕过(on_client))
    - [token防爆破?](#token防爆破?)
- [XSS](#xss)
    - [反射型 xss(get)](#反射型xss(get))
    - [反射性 xss(post)](#反射性xss(post))
    - [存储型 xss](#存储型xss)
    - [DOM 型 xss](#dom型xss)
    - [DOM 型 xss-x](#dom型xss-x)
    - [xss 之盲打](#xss之盲打)
    - [xss 之过滤](#xss之过滤)
    - [xss 之 htmlspecialchars](#xss之htmlspecialchars)
    - [xss 之 href 输出](#xss之href输出)
    - [xss 之 js 输出](#xss之js输出)
- [CSRF](#csrf)
    - [CSRF(get)](#csrf(get))
    - [CSRF(POST)](#csrf(post))
    - [CSRF Token](#csrf_token)
- [Sql Inject](#sql_inject)
    - [数字型注入(post)](#数字型注入(post))
    - [字符型注入(get)](#字符型注入(get))
    - [搜索型注入](#搜索型注入)
    - [xx 型注入](#xx型注入)
    - ["insert/update" 注入](#"insert/update"注入)
    - ["delete" 注入](#"delete"注入)
    - ["http header" 注入](#"http_header"注入)
    - [盲注(base on boolian)](#盲注(base_on_boolian))
    - [盲注(base on time)](#盲注(base_on_time))
    - [宽字节注入](#宽字节注入)
- [RCE](#rce)
    - [exec "ping"](#exec_"ping")
    - [exec "eval"](#exec_"eval")
- [File Inclusion](#file_inclusion)
    - [本地文件包含](#本地文件包含)
    - [远程文件包含](#远程文件包含)
- [Unsafe Filedownload](#unsafe_filedownload)
- [Unsafe Fileupload](#unsafe_fileupload)
    - [client check](#client_check)
    - [MIME type](#mime_type)
    - [getimagesize](#getimagesize)
- [Over Permission](#over_permission)
    - [水平越权](#水平越权)
    - [垂直越权](#垂直越权)
- [../../ 目录遍历](#目录遍历)
- [敏感信息泄露](#敏感信息泄露)
- [PHP 反序列化](#php反序列化)
- [XXE](#xxe)
- [URL 重定向](#url重定向)
- [SSRF](#ssrf)
    - [SSRF(curl)](#ssrf(curl))
    - [SSRF(file_get_content)](#ssrf(file_get_content))
**实验环境**
`环境仅供参考`
- phpstudy :http://phpstudy.php.cn/
- Microsoft Windows 10 企业版 LTSC - 10.0.17763
- VMware® Workstation 15 Pro - 15.0.0 build-10134415
- kali 4.19.0-kali3-amd64
- pikachu - Commits on Feb 9, 2019
---
## 前言
优秀的 web 基础靶场,与 dvwa 相比 dvwa 更适合教学,pikachu 漏洞种类更多,建议通关顺序 dvwa --> pikachu
---
## 搭建/使用
**windows**
1. 把下载下来的 pikachu 文件夹放到 web 服务器根目录下;
2. 根据实际情况修改 inc/config.inc.php 里面的数据库连接配置;
3. 访问 http://x.x.x.x/pikachu ,会有一个红色的热情提示"欢迎使用,pikachu 还没有初始化,点击进行初始化安装!",点击即可完成安装
---
## Burte_Force
"暴力破解"是一攻击具手段,在web攻击中,一般会使用这种手段对应用系统的认证信息进行获取. 其过程就是使用大量的认证信息在认证接口进行尝试登录,直到得到正确的结果. 为了提高效率,暴力破解一般会使用带有字典的工具来进行自动化操作.
理论上来说,大多数系统都是可以被暴力破解的,只要攻击者有足够强大的计算能力和时间,所以断定一个系统是否存在暴力破解漏洞,其条件也不是绝对的. 我们说一个web应用系统存在暴力破解漏洞,一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略,导致其被暴力破解的"可能性"变的比较高. 这里的认证安全策略, 包括:
1. 是否要求用户设置复杂的密码;
2. 是否每次认证都使用安全的验证码(想想你买火车票时输的验证码～)或者手机otp;
3. 是否对尝试登录的行为进行判断和限制(如:连续5次错误登录,进行账号锁定或IP地址锁定等);
4. 是否采用了双因素认证;
...等等.千万不要小看暴力破解漏洞,往往这种简单粗暴的攻击方式带来的效果是超出预期的!
### 基于表单的暴力破解
**服务器端核心代码**
```php
//典型的问题,没有验证码,没有其他控制措施,可以暴力破解
if(isset($_POST['submit']) && $_POST['username'] && $_POST['password']){
    $username = $_POST['username'];
    $password = $_POST['password'];
    $sql = "select * from users where username=? and password=md5(?)";
    $line_pre = $link->prepare($sql);
    $line_pre->bind_param('ss',$username,$password);
    if($line_pre->execute()){
        $line_pre->store_result();
        if($line_pre->num_rows>0){
            $html.= ' login success';
        } else{
            $html.= ' username or password is not exists～';
        }
    } else{
        $html.= '执行错误:'.$line_pre->errno.'错误信息:'.$line_pre->error.'';
    }
}
```
**漏洞利用**
1. 进入皮卡丘靶场，点进 暴力破解 -> 基于表单的暴力破解;
2. 在账户名和密码栏中随意输入一对账号和密码，如 0 / 0 ;  `如果空着直接登录，抓到的包会有问题，返回的长度会都一样`
3. 点击 login，回到 Burp 中查看抓到的数据包，右击选择 'Send to Intruder'，
4. 在 Intruder -> Options 中，攻击类型 Attack type 中选择 Cluster bomb(集群爆破)，右侧 clear 清除标记；
5. 双击选中先前登录输入的字符位置，将其 add 进字典载入的选项；  `注意在载入设置中，对账户名和密码两处都要载入字典进行爆破`
6. 全部设置好后，点击右上的 Start attack，开始爆破。
7. 观察返回的结果页面，点击 Length，可以看到有几个返回长度值特殊的输入，这几组大概率就是被爆破出来的正确账户和密码。
### 验证码绕过(on_server)
**服务器端核心代码**
```php
$html="";
if(isset($_POST['submit'])) {
    if (empty($_POST['username'])) {
        $html .= "用户名不能为空";
    } else {
        if (empty($_POST['password'])) {
            $html .= "密码不能为空";
        } else {
            if (empty($_POST['vcode'])) {
                $html .= "验证码不能为空哦!";
            } else {
//              验证验证码是否正确
                if (strtolower($_POST['vcode']) != strtolower($_SESSION['vcode'])) {
                    $html .= "验证码输入错误哦!";
                    //应该在验证完成后,销毁该$_SESSION['vcode']
                }else{
                    $username = $_POST['username'];
                    $password = $_POST['password'];
                    $vcode = $_POST['vcode'];
                    $sql = "select * from users where username=? and password=md5(?)";
                    $line_pre = $link->prepare($sql);
                    $line_pre->bind_param('ss',$username,$password);
                    if($line_pre->execute()){
                        $line_pre->store_result();
                        //虽然前面做了为空判断,但最后,却没有验证验证码!!!
                        if($line_pre->num_rows()==1){
                            $html.=' login success';
                        }else{
                            $html.= ' username or password is not exists～';
                        }
                    }
                    else{
                        $html.= '执行错误:'.$line_pre->errno.'错误信息:'.$line_pre->error.'';
                    }
                }
            }
        }
    }
}
```
服务器端只检查了一次验证码,而后未将验证码过期处理,一直有效,可验证一次重复爆破
**漏洞利用**
burpsuite,抓个验证码输入正确的请求,就可以重复爆破了
### 验证码绕过(on_client)
**服务器端核心代码**
```php
if(isset($_POST['submit'])){
    if($_POST['username'] && $_POST['password']) {
        $username = $_POST['username'];
        $password = $_POST['password'];
        $sql = "select * from users where username=? and password=md5(?)";
        $line_pre = $link->prepare($sql);
        $line_pre->bind_param('ss', $username, $password);
        if ($line_pre->execute()) {
            $line_pre->store_result();
            if ($line_pre->num_rows > 0) {
                $html .= ' login success';
            } else {
                $html .= ' username or password is not exists～';
            }
        } else {
            $html .= '执行错误:' . $line_pre->errno . '错误信息:' . $line_pre->error . '';
        }
    }else{
        $html .= ' please input username and password～';
    }
}
```
**客户端端核心代码**
```html
    var code; //在全局 定义验证码
    function createCode() {
        code = "";
        var codeLength = 5;//验证码的长度
        var checkCode = document.getElementById("checkCode");
        var selectChar = new Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9,'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');//所有候选组成验证码的字符,当然也可以用中文的
        for (var i = 0; i < codeLength; i++) {
            var charIndex = Math.floor(Math.random() * 36);
            code += selectChar[charIndex];
        }
        //alert(code);
        if (checkCode) {
            checkCode.className = "code";
            checkCode.value = code;
        }
    }
    function validate() {
        var inputCode = document.querySelector('#bf_client .vcode').value;
        if (inputCode.length <= 0) {