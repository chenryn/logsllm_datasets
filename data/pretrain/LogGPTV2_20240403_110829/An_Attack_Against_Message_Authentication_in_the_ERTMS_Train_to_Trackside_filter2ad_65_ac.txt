any message up to the last-but-one block (using Equation (1)),
mf
so we can compute H mv
l(cid:0)1. We also have knowledge
of mvn as part of the observed message. Therefore we can
(cid:8) mfl , however, with a very
compute H mv
n(cid:0)1
high probability these will not be equal (Figure 4(a)).
(cid:8) mvn and H
n(cid:0)1 and H
mf
l(cid:0)1
In order to get a valid MAC for the message mf we extend
it with one additional block mfl+1 (see Figure 4(b)):
mfl+1 = mvn
(cid:8) H mv
n(cid:0)1
(cid:8) H
mf
l
(6)
This block will force the input to the 3DES encryption in the
MAC calculation to be the same for the new, forged message
and the old, observed message. Therefore, even though we
do not know the keys k2 and k3 we know that this new
message will have the same MAC as mv. The crafted block
mfl+1 will, however, contain random data which most likely
would not pass any message veri(cid:12)cation at the Application
Layer. We now extend this approach to give us more control
over the data we need to add to the message, and make it
into an acceptable ERTMS message.
To be able to create a message that will be accepted by
the train, we will leverage an additional feature of the Appli-
cation Layer protocol, namely the ability to include optional
data packets into the message. For the purposes of our at-
tack we will include the packet for sending plaintext mes-
sages into the forged message. This packet is used to send
messages of up to 255 characters that will be displayed on
the driver’s console. Intuitively, we want the random data
contained in block mfl+1 to be the text message included
in the additional packet. We make use of conditions that
can be included to indicate when the message should be dis-
played to the driver. These conditions can be chosen such
that the message will probably never be displayed.
According to the speci(cid:12)cation, the message in the text
message packet needs to conform to the ISO 8859-1 encoding
standard, which includes ASCII. It is not speci(cid:12)ed whether
this is checked when receiving the message, when it is dis-
played or even at all.
If the encoding is not checked, at
this point, we can use the message for the random block ex-
actly as described before. However, below we will assume
the encoding is checked when the message is received and
we show how to construct a forged message that includes a
valid encoded text message.
In order to use the technique described previously to con-
struct a forged message, we include a text message of 16
characters such that we have control over the last two full
blocks in the MAC computation (see Figure 4(c)). The be-
ginning of the message is again denoted by mf = (mf1 ; : : : ; mfl ).
Two additional parts, that form the actual text message,
will be appended in blocks mfl+1 and mfl+2 . The addition
of two blocks gives us enough (cid:13)exibility in the plaintext to
allow these blocks to conform to the ISO 8859-1 standard.
We start by computing the input to the 3DES block for the
(cid:8) mvn ) and the intermediate MAC
original message (H mv
n(cid:0)1
mf
of the (cid:12)xed part of the forged message (H
) using k1. We
l
then randomly generate the (cid:12)rst half of the text message
in the correct encoding, including it in block mfl+1 . We
continue by computing the value of the last message block
mfl+2 , such that mf has the same MAC as the original
message, using Eq. (6) and H
):
(cid:8) H
mf
l
mf
l+1 = DESk1(mfl+1
(cid:8) H mv
n(cid:0)1
(cid:8) H
mf
l+1
mfl+2 = mvn
We then check if mfl+2 is a valid ISO 8859-1 encoded mes-
sage.
If this is not the case, we start over by generating
another random (cid:12)rst half of the text message mfl+1 and see
if this results in a correctly encoded block mfl+2 . Once we
have a correctly encoded mfl+2 we have our forged message
with the correctly encoded text message consisting of mfl+1
and mfl+2 .
In the next section we give an example of a
forged Movement Authority message.
To determine the probability that we (cid:12)nd a correctly en-
coded mfl+2 , we assume its distribution is uniform. This
should be the case due to the DES encryption used to com-
mf
pute H
l+1. As 65 byte values are not de(cid:12)ned in ISO 8859-1,
the probability that a random string of 8 bytes is correctly
encoded according to ISO 8859-1 is:
Using the assumption that DES is a pseudo-random func-
tion, we therefore need 10 tries on average to (cid:12)nd a correctly
Variable
Length
(bits)
Description
Message 3 (Movement Authority)
NID MESSAGE
L MESSAGE
T TRAIN
8
10
32
Message type
Length of message (bytes)
Train timestamp
M ACK
1
Acknowledgement required
NID LRBG
Packet 15 (Movement Authority)
24
ID of Last Relevant Balise Group
NID PACKET
Q DIR
L PACKET
Q SCALE
V EMA
T EMA
N ITER
L ENDSECTION
Q SECTIONTIMER
Q ENDTIMER
Q DANGERPOINT
Q OVERLAP
D STARTOL
T OL
D OL
V RELEASEOL
8
2
13
2
7
10
5
15
1
1
1
1
15
10
15
7
Packet ID
Direction
Length of packet (bits)
Scale used for de(cid:12)nition of resolution
Maximum speed
Validity time
Number of iterations
Length of section in MA
Section timeout Quali(cid:12)er
Timer for end section in MA quali(cid:12)er
Indicates whether a danger point ex-
ists or release speed is to be speci(cid:12)ed
Indicates whether overlap exists or re-
lease speed is to be speci(cid:12)ed
Distance from overlap timer start to
end of MA
Validity period for overlap
Distance from the end of the MA to
end of overlap
Release speed for overlap
Packet 72 (Plain Text Message)
NID PACKET
Q DIR
L PACKET
Q SCALE
Q TEXTCLASS
8
2
13
2
2
Q TEXTDISPLAY
D TEXTDISPLAY
1
15
M MODETEXTDISPLAY 4
M LEVELTEXTDISPLAY 3
L TEXTDISPLAY
T TEXTDISPLAY
15
10
M MODETEXTDISPLAY 4
M LEVELTEXTDISPLAY 3
Packet ID
Direction
Length of packet (bits)
Scale used for de(cid:12)nition of resolution
Class of Message to be displayed
Display message if one/all events ful-
(cid:12)lled (start/end events relation)
Distance at which text is displayed
(start event)
Operating mode for text display (start
event)
Operating level for text display (start
event)
Length the text is to be displayed for
(end event)
Time the text is to be displayed for
(end event)
Operating mode for text display (end
event)
Operating level for text display (end
event)
Con(cid:12)rmation required
Length of text message
Q TEXTCONFIRM
L TEXT
X TEXT
2
8
variable Contents of text message
Example
3 (Movement Authority)
51
1327095428
0 (Acknowledgement not
required)
1
15 (Movement Author-
ity)
2 (Both directions)
113
2 (10m scale)
40 (200km/h)
1023 (unlimited)
0 (No iterations)
5000 (50000m)
0
0 (No information)
0 (No information)
1 (Overlap information
to follow)
0
0
0
126 (Use calculated on-
board speed)
72 (Plain Text Message)
0 (Reverse)
220
2 (10m)
0 (Auxiliary)
0 (as soon as one event
ful(cid:12)lled)
32767 (327670m)
9 (System Failure)
0 (Level 0)
0 (0m)
0 (0 seconds)
9 (System Failure)
0 (Level 0)
0 (Not required)
16 (16 chars)
...
Table 2: The structure of a Movement Authority message. The message contains a Movement Authority
packet and a Plain Text Message packet. We also show, as an example, the values we used in our forged
message.
mv1
mv2
mvn(cid:0)1
mvn
H mv
n(cid:0)2
DESk1
DESk1
: : :
DESk1
3DES
H mv
1
H mf
1
H mv
2
H mf
2
H mv
n(cid:0)1
H mf
l(cid:0)1
M AC(mv)
̸=
M AC(mf )
DESk1
DESk1
: : :
DESk1
3DES
H mf
l(cid:0)2
mf1
mf2
mfl(cid:0)1
mfl
(a) Messages mv and mf have diﬀerent
MACs.
mv1
mv2
mvn(cid:0)1
H mv
n(cid:0)2
mvn
mv1
mvn(cid:0)1
H mv
n(cid:0)2
DESk1 DESk1
: : :
DESk1
3DES
DESk1
: : :
DESk1
mvn
3DES
H mv
1
H mf
1
H mv
2
H mf
2
H mv
n(cid:0)1
H mf
l(cid:0)1
M AC(mv)
=
M AC(mf )
H mf
l
H mv
1
H mf
1
H mv
n(cid:0)1
H mf