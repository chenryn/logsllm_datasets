提到的时钟IC就是指该实时时钟。
---
## Page 174
第9章操作系统和应用的关系
软件
应用程序
第S
有操作系统的基本的输入输出程序
控制硬件
实时时钟
显示器用的I/O
硬件
图9-5应用程序经过OS间接地控制硬件
9.3系统调用和高级编程语言的移植性
操作系统的硬件控制功能，通常是通过一些小的函数集合体的形
式来提供的。这些函数及调用函数的行为统称为系统调用（system
call），也就是应用对操作系统（system）的功能进行调用（call）的意
思。在前面的程序中用到了timeO及printfO等函数，这些函数内部也
都使用了系统调用。这里之所以用“内部”这个词，是因为在Windows
操作系统中，提供返回当前日期和时刻，以及在显示器中显示字符串等
功能的系统调用的函数名，并不是time(和printf)。系统调用是在
timeO和printfO函数的内部执行的。大家可能会认为这个方法有些绕，
不过这是有原因的。
C语言等高级编程语言并不依存于特定的操作系统。这是因为人们
希望不管是Windows还是Linux，都能使用几乎相同的源代码。因此，
高级编程语言的机制就是，使用独自的函数名，然后再在编译时将其
转换成相应操作系统的系统调用（也有可能是多个系统调用的组合）。
---
## Page 175
9.4操作系统和高级编程语言健硬件抽象化
也就是说，用高级编程语言编写的应用在编译后，就转换成了利用系
统调用的本地代码（图9-6）
高级编程语言程序
本地代码程序
time ();
在Windows环境下编译
Windows的系统调用
printt():
Windows的系统调用
Linux的系统调用
Linux的系统调用
在Linux环境下编译
图9-6高级编程语言的函数调用在编译后变成了系统调用
在高级编程语言中，也存在可以直接调用系统调用的编程语言。
不过，利用这种方式做成的应用，移植性”并不友好（也俗称为有恶意
行为的应用）。例如，直接调用Windows系统调用的应用，在Linux上
显然是无法运行的。
操作系统和高级编程语言使硬件抽象化
通过使用操作系统提供的系统调用，程序员就没必要编写直接控
制硬件的程序了。面且，通过使用高级编程语言，有时甚至也无需考
虑系统调用的存在。这是因为操作系统和高级编程语言能够使硬件抽
象化。这是个非常了不起的处理。
下面就让我们来看一下硬件抽象化的具体实例。代码清单9-2是用
C语言编写的往文件中写人字符串的应用。fopenO是用来打开文件的
①移植性指的是同样的程序在不同操作系统下运行时需要花费的时闲等，费
时越少说明移植性越好。
更多资料请关注裁的新浪薄客http：//blog
---
## Page 176
9章操作系统和应用的美系
函数，fputsO是用来往文件中写人字符申的函数，fclose0是用来关闭
文件的函数
代码清单9-2往文件中写入字符串的应用
#include
void main()(
FILE *fp - fopen(*MyFile.txt*,*v*);
//打开文件
//写入文件
fputs（*你好*，fp）;
fclose(tp);
//关闭文件
该应用在编译运行后，MyFile.txt文件中就会被写人“你好”字符
串。文件是操作系统对磁盘媒介空间的抽象化。就如第5章中介绍
的那样，作为硬件的磁盘媒介，就如同树木的年轮一样，被划分为了
多个扇区，并以扇区为单位对磁盘进行读写。如果直接对硬件进行
操作的话，那就变成了通过向磁盘用的I/O指定扇区位置来对数据
进行读写了。
但是，在代码清单9-2的程序中，扇区根本没有出现过。传递给
fopenO函数的参数，是文件名“MyFile.txt”和指定文件写人的“w”。传
递给fputsO的参数，是往文件中写人的字符串”你好”和fp。传递给
fclose的参数，也仅仅是fp。也就是说，磁盘媒介的读写采用了文件这
个概念，将整个流程抽象化成了打开文件用的fopenO、写人文件用的
fputs0、关闭文件用的fclose0（图9-7）。
①fopen()、fputsO、fclose()）这些品数名分刚是file open、fileput string、file
close 的略称。string是字符事的意思。
---
## Page 177
ws作系统的特征
lopen、fputs、fclose
图9-7物理上的确盘媒体被抽象化成了文件
下面让我们来看一下代码清单9-2中变量力的功能。变量f中被
赋予的是fopenO函数的返回值。该值称为文件指针。应用打开文件
后，操作系统就会自动申请分配用来管理文件读写的内存空间。这个
内存空间的地址可以通过fopenO函数的返回值获得。用fopenO打开文
件后，接下来就是通过指定文件指针来对文件进行操作。正因为如此，
fputs)及fclose(的参数中都指定了文件指针（变量f）。
至于用来管理文件读写的内存空间的内容实际在哪里，程序员则
没必要关注。只要能意识到“用来操作磁盘媒介的某些信息在某个地方
存储着”，就可以制作应用了。
9.5Windows操作系统的特征
考虑到大多数读者使用的都是Windows操作系统，这里我们就以
Windows为例，来详细讲解操作系统的具体功能。Windows操作系统
的主要特征如下所示。
（1）32位操作系统（也有64位版本）
（2）通过API函数集来提供系统调用
（3）提供采用了图形用户界面的用户界面
更多资料请关注裁的新浪薄客http：//blo
---
## Page 178
第9章操作系统和应用的关系
（4）通过WYSIWYG实现打印输出
（5）提供多任务功能
（6）提供网络功能及数据库功能
（7）通过即插即用实现设备驱动的自动设定
这里只列出了对程序员有意义的一些特征。接下来将依次对
Windows操作系统的特征，以及其对编程的影响进行说明。
（1）32位操作系统
虽然现在的Windows也有64位版本，但一般广泛普及的还是32
位版本。这里的32位表示的是处理效率最高的数据大小。Wimndows处
理数据的基本单位是32位。习惯在以前的MS-D0S等16位操作系统
下编程的程序员，可能不太愿意使用32位的数据类型。因为他们认为
处理32位的数据，要比处理16位的数据更花时间。确实，在16位操
作系统中处理32位的数据时，因为要处理两次16位的数据，所以会
多花一些时间。而如果是32位操作系统的话，那么只需要1次就可以
完成32位的数据的处理了。所以说，凡是在Windows上运行的应用，
都可以毫无顾虑地尽可能地使用32位的数据。
例如，用C语言来处理整数数据时，有8位的char类型、16位的
short类型，以及32位的long类型（还有int类型）三个选项。使用位
数大的long类型的话，虽然内存及磁盘的开销较大，但应用的运行速
度并不会下降。这在其他编程语言中也是同样的。
①WYSIWYG是What You See Is What You Get 的略写。意思是，星示器上显
示的文本及图形等（What You See）是（Is）可以原样输出到打印机上打印
( What You Get ) 的 。
---
## Page 179
9.5_Windows作系统的特征
（2）通过API函数集来提供系统调用
Windows是通过名为API的函数集来提供系统调用的。API是联
系作成应用的程序员和操作系统之间的接口。所以称为API
（Application Programming Interface，应用程序接口）。
当前主流的32位版WindowsAPI也称为Win32API。之所以这样
命名，是为了便于和以前的16位版的Winl6API，以及更先进的64位
版的Win64API区分开来。Win32API中，各函数的参数及返回值的数
据大小，基本上都是32位。
API通过多个DLL文件来提供。各API的实体都是用C语言编写
的函数。因面，C语言程序的情况下，AIP的使用更加容易。截至到现
在，本书示例程序中用到的API中都有MessageBoxO。MessageBoxO
被保存在Windows提供的user32.dll这个DLL文件中。
（3）提供采用了GUI的用户界面
GUI（Graphical UserInterface，图形用户界面）指的是通过点击显
示器中显示的窗口及图标等即可进行可视化操作的用户界面。对用户
来说，GUI是图形、鼠标，但对程序员来说，GUI并不仅是这些。这
是因为想要作成一个实现GUI的应用，并不是一件容易的事情。曾经
有一首律句是这样的：“GUI，用的时候是天堂，做的时候是地狱”，大
家可以想象它的难度了吧。
之所以这样困难，是因为在GUI中用户按照怎样的顺序操作是无
法确定的。例如，图9-8是Web浏览器（IntemetExplorer 7）的一个窗
口。通过多个标签页的切换，就可以进行各种项目设定。从Web浏览
器的用户角度来说，这样的窗口不仅使用方便，操作也简单，但对负
责开发的程序员来说，却决不是简单的事情。
---
## Page 180
第9章操作系统和应用的美系
还界创建步个主页述项卡，谨在每行输入一十地址（）
上次会活*的活+开9）
+
主页开物
更的在适动于中的图示方式
/卡0)
中国
AW
图9-8用户可以按照任意顺序来操作窗口的任意元素
在像MS-DOS这种没有使用GUI的操作系统中，应用的处理流程
由程序员决定，用户按照定好的流程来进行操作即可。与此相反，采
用GUI的操作系统中运行的应用，则是由用户决定处理流程的。因此，
程序员就必须要制作出在任何操作顺序下都能运行的应用。这就要求
以前的程序员要改变观念。这就是GUI的难点。如果程序员最初接触
的操作系统就是Windows的话，那他或许会认为GUI是理所当然的。
（4）通过WYSIWYG实现打印输出
WYSIWYG指的是显示器上显示的内容可以直接通过打印机打印
输出。在Windows中，显示器和打印机是被作为同等的图形输出设备
处理的，而该功能也就为WYSIWYG的实现提供了条件。
借助WYSIWYG功能，程序员可以轻松不少。最初，为了实现在
---
## Page 181
9.5_Windows作系统的特征
显示器中显示和在打印机中打印，就必须分别编写各自的程序。而在
Windows中，借助WYSIWYG功能，基本上在同一个程序中就可以实
现显示和打印这两方面的操作了（当然，也可以将显示和打印的内容放
在不同的程序中处理）。
（5）提供多任务功能
多任务指的是同时运行多个程序的功能。Windows是通过时钟分
割技术来实现多任务功能的。
时钟分割指的是在短时间间隔内，多个程序切换运行的方式。在
用户看来，就是多个程序在同时运行。也就是说，Windows会自动切
换多个程序的运行（图9-9）。此外，Windows中还具有以程序中的函
数为单位来进行时钟分割的多线程功能。
程序1
运行待机运行待机运行待机
切
切
切
程序2
待机运行待机运行待机运行
在用户看来，这些程序
都是在同时运行的
时间
图9-9通过时钟分割实现多任务的机制
（6）提供网络功能及数据库功能
Windows中，网络功能是作为标准功能提供的。数据库（数据库服
务器）功能有时也会在之后进行追加。网络功能和数据库功能，虽并不
是操作系统本身不可欠缺的功能，但因为它们和操作系统很接近，所
①关于多线程，我们会在第10章进行说明。
更多资料请关注我的新浪博客http：//blo
---
## Page 182
第9章操作系统和应用的关系
以被统称为中间件面不是应用。意思是处于操作系统和应用的中间
（middle）。操作系统和中间件合在一起，也称为系统软件。应用不仅可
以利用操作系统，也可以利用中间件的功能（图9-10）。
应用
利用功能
操作系统
中间件
系统软件
图9-10应用可以利用操作系统和中间件的功能
相对于操作系统一旦安装就不能轻易替换，中间件则可以根据需
要进行任意的替换。不过，大多数情况下，中间件变更后应用往往也
需要变更，因此中间件的变更也不是那么容易。
（7）通过即插即用实现设备驱动的自动设定
即插即用（Plug-and-Play）指的是新的设备连接（Plug）后立刻就
可以使用（Play）的机制。新的设备连接到计算机后，系统就会自动安
装和设定用来控制该设备的设备驱动程序。
设备驱动是操作系统的一部分，提供了同硬件进行基本的输人输
出的功能。键盘、鼠标、显示器、磁盘装置等，这些计算机中必备的
硬件的设备驱动，一般都是随操作系统一起安装的。如果之后再追加
新的网卡（NIC）等硬件的话，就需要向操作系统追加该硬件专用的设
①NIC（Network Interface Card）是计算机连接网络（LAN）时使用的设备
也称为网卡成者LAN卡。
---
## Page 183