Certainly! Here is a more polished and coherent version of the text:

---

### Code Analysis and Patch Verification

#### Memory Copy Vulnerability (CVE-2009-3002)
The following code snippet demonstrates a memory copy operation that introduces a vulnerability:
```c
memcpy(uaddr, &sat, sizeof(sat));
return 0;
```
This function, which uses `memcmp` to compare memories, was found to have a leak. The model checker identified a counterexample for a 6-bit policy within 1 hour and 39 minutes. After applying the official patch, which sets the `sat` structure to 0 using `memset`, the driver verified the policy in approximately the same time, confirming that the patch effectively stops the leak.

#### Information Leak in the Netlink Subsystem (CVE-2009-3612)
In the netlink subsystem of the kernel, the function `tcf_fill_node` prepares a `struct tcmsg` to be sent back to the user. However, a typing mistake caused the field `tcm__pad1` to be filled twice instead of `tcm__pad2`:
```c
struct tcmsg *tcm;
...
nlh = NLMSG_NEW(skb, pid, seq, event, sizeof(*tcm), flags);
tcm = NLMSG_DATA(nlh);
tcm->tcm_family = AF_UNSPEC;
tcm->tcm__pad1 = 0;
tcm->tcm__pad1 = 0; // Should be tcm__pad2
```
This mistake leaks kernel memory from `tcm__pad2` to user space. The official patch corrects this by changing the last line to `tcm->tcm__pad2 = 0`. Our analysis confirmed that the patch successfully fixes the security hole and prevents a 6-bit leakage policy violation. Without the patch, a counterexample is found within 3 minutes and 34 seconds; with the patch, the program is verified in about the same time.

#### Padding Vulnerability in `sigaltstack`
The `sigaltstack` vulnerability is more complex and only manifests on 64-bit processors. On such systems, the `struct stack_t` is padded to a multiple of 8 bytes due to the size differences between 32-bit and 64-bit systems:
```c
typedef struct sigaltstack {
    void __user *ss_sp;
    int ss_flags; // 4 bytes padding on 64-bit
    size_t ss_size;
} stack_t;
```
The `do_sigaltstack` syscall in `kernel/signal.c` copies this structure back to userland via `copy_to_user` but does not clear the padding bytes, leading to a leak on 64-bit systems:
```c
int do_sigaltstack(const stack_t __user *uss, stack_t __user *uoss, unsigned long sp) {
    stack_t oss;
    ... // oss fields get filled
    if (copy_to_user(uoss, &oss, sizeof(oss)))
        goto out;
}
```
CBMC supports 64-bit widths but does not automatically measure padding bytes. We addressed this by providing a model of `copy_to_user` that checks if the length parameter is aligned according to the architecture. This ensures that any padding alignments are filled with nondeterministic integer values.

#### Buffer Overflow in `read_from_buf`
In the `read_from_buf` function, an underflow can cause `nbytes` and `*ppos` to access memory outside the actual buffer, disclosing kernel memory:
```c
if (*ppos + nbytes > ctr->bufsz)
    nbytes = ctr->bufsz - *ppos;
if (copy_to_user(buf, ctr->buf + *ppos, nbytes))
    return -EFAULT;
```
Our analysis currently requires significant manual intervention to model out-of-bound memory accesses. A potential solution would be to modify CBMC to return nondeterministic values for such accesses, implicitly modeling the access to confidential data.

### Authentication Checks

#### Secure Remote Password (SRP)
We analyzed the password request function in `libsrp/t_getpass.c` to ensure there is no leakage. The confidential input is the user's password, and the observations are the terminal echos. The environment modeling the console and its modes was provided to check this program:
```c
_TYPE(int) t_getpass(char* buf, unsigned maxlen, const char* prompt) {
    DWORD mode;
    GetConsoleMode(handle, &mode);
    SetConsoleMode(handle, mode & ~ENABLE_ECHO_INPUT);
    if (fputs(prompt, stdout) == EOF || fgets(buf, maxlen, stdin) == NULL) {
        SetConsoleMode(handle, mode);
        return -1;
    }
}
```
CBMC proved that starting from any initial mode, the program will always end with `log2(|P|) = 0`, indicating no leakage. Removing the line that disables the echo causes the policy to be violated.

#### Cyrus IMSPD
The `login_plaintext` function in `imsp/login_unix.c` attempts to authenticate a user by comparing the entered password with the stored password:
```c
int login_plaintext(char *user, char* pass, char** reply) {
    struct passwd* pwd = getpwnam(user);
    if (!pwd) return 1;
    if (strcmp(pwd->pw_passwd, crypt(pass, pwd->pw_passwd)) != 0) {
        *reply = "wrong password";
        return 1;
    }
    return 0;
}
```
This function has three distinguishable observations: (1) it returns 1, (2) it returns 1 and sets `*reply`, and (3) it returns 0. We modeled the parameters as low user input and the stored password as a confidential variable. The program was verified to conform to a policy that only leaks 3 observations, within 9 seconds.

### Related Work
Recent efforts in quantitative information flow (QIF) analysis include static analysis [4], verification techniques [1, 8], and theoretical work on self-composition [2, 18]. These approaches primarily aim to quantify leakage but struggle with scalability. Tools like FlowCheck [14, 15] scale to large programs but are based on dynamic instrumentation, whereas our approach uses verification and static analysis, providing stronger theoretical guarantees and not requiring code execution.

### Conclusion
This paper combines state-of-the-art model checking with QIF theory to analyze information leakage. We demonstrated that CVE-reported vulnerabilities in the Linux kernel can be analyzed with high precision and scalability, and we verified that official patches fix the problems. We argued that a quantitative framework is better suited than a qualitative one to determine when an information leak represents a security threat.

### Acknowledgment
We thank Peter O’Hearn for his helpful comments. This research was funded by EPSRC, grant EP/F023766/1, titled "Model Checking and Program Analysis for Quantifying Interference."

### References
[1] Michael Backes, Boris K¨opf, and Andrey Rybalchenko: Automatic Discovery and Quantification of Information Leaks. Proc. 30th IEEE Symposium on Security and Privacy (S&P ’09).
[2] Gilles Barthe, Pedro R. D’Argenio, and Tamara Rezk: Secure Information Flow by Self-Composition. CSFW ’04.
[4] David Clark, Sebastian Hunt, and Pasquale Malacaria: Quantitative information flow, relations and polymorphic types. Journal of Logic and Computation, 18(2):181-199, 2005.
[5] Edmund Clarke, Daniel Kroening, and Flavio Lerda: A Tool for Checking ANSI-C Programs. TACAS 2004.
[6] http://www.cprover.org/cbmc/applications.shtml – Checked 17 June 2010.
[7] Joseph A. Goguen, Jose Meseguer: Security Policies and Security Models. IEEE Symposium on Security and Privacy 1982.
[8] Jonathan Heusser and Pasquale Malacaria: Applied Quantitative Information Flow and Statistical Databases. FAST 2009.
[9] Boris K¨opf and Andrey Rybalchenko: Approximation and randomization for quantitative information-flow analysis. CST 2010.
[10] J. Landauer and T. Redmond: A Lattice of Information. IEEE Computer Security Foundations Workshop, 1993.
[11] Pasquale Malacaria: Assessing security threats of looping constructs. POPL 2007.
[12] Pasquale Malacaria, Han Chen: Lagrange multipliers and maximum information leakage in different observational models. PLAS 2008.
[13] Pasquale Malacaria and Jonathan Heusser: Information Theory and Security: Quantitative Information Flow. LNCS, Springer Verlag, 2010.
[14] Stephen McCamant, Michael D. Ernst: Quantitative information flow as network flow capacity. PLDI 2008.
[15] James Newsome, Stephen McCamant, Dawn Song: Measuring channel capacity to distinguish undue influence. PLAS 2009.
[16] Benjamin Schwarz, Hao Chen, David Wagner, Jeremy Lin, Wei Tu, Geoff Morrison, Jacob West: Model Checking An Entire Linux Distribution for Security Violations. ACSAC 2005.
[17] Corina S. Pasareanu, Matthew B. Dwyer, and Michael Huth: Assume-Guarantee Model Checking of Software: A Comparative Case Study. SPIN 1999.
[18] T. Terauchi and A. Aiken: Secure information flow as a safety problem. SAS 2005.
[19] Hirotoshi Yasuoka and Tachio Terauchi: Quantitative static analysis for quantifying information flow in a simple imperative language. Journal of Computer Security, 15(3), 2007.

---