0x0804d0b3: add eax, dword ptr [eax]; add byte ptr [ebx + 0x5e], bl; pop edi; pop ebp; ret;  //eax += *eax
0x8048e87: sub eax, esi; pop esi; pop edi; pop ebp; ret; //eax -= esi
0x0804b193: add eax, 0x5b000000; pop esi; pop edi; pop ebp; ret; //eax += 0x5b000000, esi = 0x5b000000-off_to_sys
0x8048e87: sub eax, esi; pop esi; pop edi; pop ebp; ret; //eax -= esi
0x08049841: push esi; call eax;
Somerset Recon
4. Call system()
●
Wanted it to be reliable and reproducible
●
DEP/NX is annoying
●
What string argument do we pass to system()?
CVE-2018-9095 - Triage
//Chain pseudo
0x804ae7c: pop esi; pop edi; pop ebp; ret; //esi = **libc
0x0804ae79: mov eax, esi; pop ebx; pop esi; pop edi; pop ebp; ret; //eax = esi, esi = **libc
0x0804d0b3: add eax, dword ptr [eax]; add byte ptr [ebx + 0x5e], bl; pop edi; pop ebp; ret;  //eax += *eax
0x8048e87: sub eax, esi; pop esi; pop edi; pop ebp; ret; //eax -= esi
0x0804b193: add eax, 0x5b000000; pop esi; pop edi; pop ebp; ret; //eax += 0x5b000000, esi = 0x5b000000-off_to_sys
0x8048e87: sub eax, esi; pop esi; pop edi; pop ebp; ret; //eax -= esi
0x08049841: push esi; call eax;
Somerset Recon
4. Call system() with arguments
$ strings JLinkExe | grep "sh$"
fflush
SWOFlush
.gnu.hash
That’ll work...
CVE-2018-9095 - Triage
Somerset Recon
CVE-2018-9095 - PoC
●
Local code execution
●
32-bit JLinkExe binary
●
i386 and amd64 Linux systems
●
ROP
○
ASLR bypass
○
Ret2libc
Somerset Recon
CVE-2018-9095 - Demo
●
Demo
Somerset Recon
CVE-2018-9097 - Settings File Overflow
Very similar to previous exploit
JLinkExe executable reads a “SettingsFile” 
●
Reads in settings file and passes to libjlinkarm.so.6.30.2 to update 
settings
●
libjlinkarm.so.6.30.2  has a buffer overrun in BSS segment 
●
Used the overflow to overwrite a function pointer in BSS segment
Somerset Recon
Remote Exploits
Somerset Recon
CVE-2018-9096 - Discovery
JLinkRemoteServer opens up a bunch of ports:
$ sudo netstat -tulpn | grep JLinkRemote
tcp        0      0 0.0.0.0:24              0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 127.0.0.1:19080         0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 0.0.0.0:19020           0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 127.0.0.1:19021         0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 127.0.0.1:19030         0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 0.0.0.0:23              0.0.0.0:*               LISTEN    31417/./JLinkRemote
Somerset Recon
CVE-2018-9096 - Discovery
JLinkRemoteServer opens up a bunch of ports:
$ sudo netstat -tulpn | grep JLinkRemote
tcp        0      0 0.0.0.0:24              0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 127.0.0.1:19080         0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 0.0.0.0:19020           0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 127.0.0.1:19021         0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 127.0.0.1:19030         0.0.0.0:*               LISTEN    31417/./JLinkRemote 
tcp        0      0 0.0.0.0:23              0.0.0.0:*               LISTEN    31417/./JLinkRemote
Telnet?
Somerset Recon
CVE-2018-9096 - Discovery
●
Reverse engineering revealed it was actually a built-in Telnet server:
●
Allows Telnet connections which provide similar functionality to the 
Tunnel server
Somerset Recon
CVE-2018-9096 - Discovery
Fuzzing of the Telnet server revealed an interesting crash:
JLinkRemoteServ[31402]: segfault at 41414141 ip 41414141...
Somerset Recon
CVE-2018-9096 - Triage
Additional RE and triage revealed the following about this vulnerability: 
●
Stack buffer overflow
●
Crashes are not consistent due to race condition
●
Limited amount of space to work with (48 byte maximum ROP chain 
length)
●
ASLR + DEP/NX but no PIE 
●
Additional user-controlled data were found in program memory
Somerset Recon
CVE-2018-9096 - Exploitation
●
Traditional techniques used to set up the call to system()
○
NX was bypassed using ROP chain
○
ROP chain bypassed ASLR using GOT dereference of libc function 
call 
■
ROP chain then calculates address of system() based on offset 
from base of libc
●
Main issue was getting arbitrary user-controlled strings as argument to 
system()
Somerset Recon
CVE-2018-9096 - Exploitation
●
User-controlled strings were consistently found in one of either two 
static locations that were 72 bytes apart from each other 
○
We were unable to predict which location will store the 
user-controlled string
●
How do we consistently setup the argument to system() to run our 
command?
Somerset Recon
CVE-2018-9096 - SPACE SLEDS
Somerset Recon
CVE-2018-9096 - SPACE SLEDS
●
Inspired by NOP sled techniques used to increase the reliability of 
exploits
●
Concept: Prepend spaces to the user-controlled command string in 
order to create some overlap between the two command strings
●
Use the address of the overlapping command strings as the argument 
to system()
Somerset Recon
CVE-2018-9096 - Demo
Somerset Recon
CVE-2018-9093 - Tunnel Server Backdoor
“The Remote Server provides a tunneling mode which allows remote 
connections to a J-Link/J-Trace from any computer, even from outside the 
local network.”
Somerset Recon
CVE-2018-9093 - Tunnel Server Backdoor
“I wonder if there are any weaknesses with their auth?”
Somerset Recon
CVE-2018-9093 - Tunnel Server Backdoor
●
Registers all detected J-Link device serial number with Segger server
●
Segger server accepts connections and proxies traffic back to 
registered devices based off of serial numbers
●
Uses hardcoded magic numbers and no authentication
●
●
J-Link device -> proxy server: Magic number = 0x11223344
●
Debugging client -> proxy server: Magic number = 0x55667788
Somerset Recon
CVE-2018-9093 - Serial Number Analysis
●
But brute forcing all of the serial numbers would be too hard...right?
●
Serial numbers are 9 decimal digits - 10 billion possibilities
○
Assuming 10 serial numbers/second it would take >31 years to try all possible S/Ns
○
●
Is there some way to shrink the space?
○
How are Segger serial numbers assigned?
○
Where do the serial numbers begin?
○
●
How can we find J-Link serial numbers?
Somerset Recon
CVE-2018-9093 - Serial Number Analysis
Google “Segger J-Link” images:
Somerset Recon
CVE-2018-9093 - Serial Number Analysis
Phone a friend and ask for their serial numbers?
Somerset Recon
CVE-2018-9093 - Serial Number Analysis
●
From search results combined with devices we own we were able to 
find about about 30 J-Link serial numbers
●
From those results several patterns emerged
Somerset Recon
CVE-2018-9093 - Serial Number Analysis
●
86: Model
●
10: Version
●
00743: 
Incremented 
number per device
Somerset Recon
CVE-2018-9093 - Serial Number Analysis
Serial Number Analysis Results:
●
Good coverage of serial number space is possible with ~100,000 serial 
numbers
○
Reduces time to brute force from over 32 years to less than 3 
hours
Somerset Recon
CVE-2018-9093 - Impact
● Demo
Somerset Recon
CVE-2018-9093 - Impact
Once connected to a J-Link Device one can:
● Flash new firmware to a device
● Read existing firmware
● … 
( ͡~ ͜ʖ ͡°)
Somerset Recon
Disclosure
Somerset Recon
Disclosure
April 4 2018 - Disclosed vulnerabilities to Segger
April 5 2018 - Segger responds acknowledging vulnerabilities
April 9 2018 - Segger releases patches for most of the vulnerabilities
April 10 2018 - Founder & CTP responds thanking us
Somerset Recon
Summary of Vulnerabilities
●
Vulnerabilities  in J-Link tunnel server opens backdoor to attached J-Links and 
can compromise the state of your devices and your network
●
Vulnerabilities in the JLinkRemoteServer allow an attacker to gain full remote 
code execution
●
No authentication for JLinkRmoteServer or JLinkGDBServer which allows  
downloading and flashing of embedded devices
●
Traffic is not encrypted to JLinkRemoteServer or tunnel server
●
Vulnerabilities in file parsing allow an attacker who distributes malicious J-Link 
files (command files or settings files) to gain execution on the machine that 
parses those files
Somerset Recon
Conclusions
●
Developers should always use the PIE flag to make memory corruption 
more difficult
●
Several unknown vulnerabilities were discovered that affect the JLink 
Debugger family and its associated software
●
Given that these devices play a critical role in the embedded supply 
chain, additional security protection should be implemented to protect 
the users and consumers
●
Segger’s response was encouraging 
○
No cease and desist
○
Quickly patched many of the vulnerabilities
●
Don’t trust any remote debugging server
Somerset Recon
BUT WAIT THERE’S MORE!
●
JLink firmware flashing process
●
Firmware malware
Somerset Recon
JLink Updating Process
●
JLink Commander will ask you if you’d like to update your connected 
JLink Debug Probe
○
We figured out how the update process works
●
We reversed the USB protocol
Somerset Recon
JLink Updating Process
●
Firmware is checked on the device before flashing, but not very well
○
Hint:  It uses dates
○
Can this be bad?
●
Firmware is not signed and can be modified
How could this be bad?
Somerset Recon
Malware
Consider a piece of malware that gets circulated via email, etc.:
●
Runs silently
●
Flashes any JLink connected to the computer
●
Exits cleanly
Somerset Recon
Malware - DEMO
● Demo
Somerset Recon
Questions?
We will be posting slides, source code, and additional info:
●
Slides and POCs: https://github.com/Somerset-Recon
●
Blog post: https://www.somersetrecon.com/