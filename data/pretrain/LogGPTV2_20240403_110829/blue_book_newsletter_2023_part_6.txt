    ```logql
    sum(count by(host) (rate({host=~".+"} [24h])) > bool 0)
    ```
    This query will:
    - `{host=~".+"}`: Fetch all log lines that contain the label `host`
    - `count by(host) (rate({host=~".+"} [24h])`: Calculates the number of entries in the last 24h.
    - `count by(host) (rate({host=~".+"} [24h])) > bool 0`: Converts to `1` all the vector elements that have more than 1 message.
    - `sum(count by(host) (rate({host=~".+"} [24h])) > bool 0)`: Sums all the vector elements to get the number of hosts that have more than one message.
    `journald` promtail parser is known to fail between upgrades, it's useful too to make an alert to make sure that all your hosts are sending the traces. You can do it with: `sum(count by(host) (rate({job="systemd-journal"} [24h])) > bool 0)`
### [Pytest](pytest-xprocess.md)
* New: [Stop pytest right at the start if condition not met.](pytest.md#stop-pytest-right-at-the-start-if-condition-not-met)
    Use the `pytest_configure` [initialization hook](https://docs.pytest.org/en/4.6.x/reference.html#initialization-hooks).
    In your global `conftest.py`:
    ```python
    import requests
    import pytest
    def pytest_configure(config):
        try:
            requests.get(f'http://localhost:9200')
        except requests.exceptions.ConnectionError:
            msg = 'FATAL. Connection refused: ES does not appear to be installed as a service (localhost port 9200)'
            pytest.exit(msg)
    ```
    - Note that the single argument of `pytest_configure` has to be named `config`.
    - Using `pytest.exit` makes it look nicer.
* New: Introduce pytest-xprocess.
    [`pytest-xprocess`](https://github.com/pytest-dev/pytest-xprocess) is a pytest plugin for managing external processes across test runs.
    [Installation](https://pytest-xprocess.readthedocs.io/en/latest/#quickstart):
    ```bash
    pip install pytest-xprocess
    ```
    [Usage](https://pytest-xprocess.readthedocs.io/en/latest/#quickstart):
    Define your process fixture in `conftest.py`:
    ```python
    import pytest
    from xprocess import ProcessStarter
    @pytest.fixture
    def myserver(xprocess):
        class Starter(ProcessStarter):
            # startup pattern
            pattern = "[Ss]erver has started!"
            # command to start process
            args = ['command', 'arg1', 'arg2']
        # ensure process is running and return its logfile
        logfile = xprocess.ensure("myserver", Starter)
        conn = # create a connection or url/port info to the server
        yield conn
        # clean up whole process tree afterwards
        xprocess.getinfo("myserver").terminate()
    ```
    Now you can use this fixture in any test functions where `myserver` needs to be up and `xprocess` will take care of it for you.
    [Matching process output with pattern](https://pytest-xprocess.readthedocs.io/en/latest/starter.html#matching-process-output-with-pattern):
    In order to detect that your process is ready to answer queries,
    `pytest-xprocess` allows the user to provide a string pattern by setting the
    class variable pattern in the Starter class. `pattern` will be waited for in
    the process `logfile` for a maximum time defined by `timeout` before timing out in
    case the provided pattern is not matched.
    It’s important to note that pattern is a regular expression and will be matched using python `re.search`.
    [Controlling Startup Wait Time with timeout](https://pytest-xprocess.readthedocs.io/en/latest/starter.html#controlling-startup-wait-time-with-timeout):
    Some processes naturally take longer to start than others. By default,
    `pytest-xprocess` will wait for a maximum of 120 seconds for a given process to
    start before raising a `TimeoutError`. Changing this value may be useful, for
    example, when the user knows that a given process would never take longer than
    a known amount of time to start under normal circunstancies, so if it does go
    over this known upper boundary, that means something is wrong and the waiting
    process must be interrupted. The maximum wait time can be controlled through the
    class variable timeout.
    ```python
       @pytest.fixture
       def myserver(xprocess):
           class Starter(ProcessStarter):
               # will wait for 10 seconds before timing out
               timeout = 10
    ```
    Passing command line arguments to your process with `args`:
    In order to start a process, pytest-xprocess must be given a command to be passed into the subprocess.Popen constructor. Any arguments passed to the process command can also be passed using args. As an example, if I usually use the following command to start a given process:
    ```bash
    $> myproc -name "bacon" -cores 4 
    ```
    That would look like:
    ```python
    args = ['myproc', '-name', '"bacon"', '-cores', 4, '']
    ```
    when using args in pytest-xprocess to start the same process.
    ```python
    @pytest.fixture
    def myserver(xprocess):
        class Starter(ProcessStarter):
            # will pass "$> myproc -name "bacon" -cores 4 "  to the
            # subprocess.Popen constructor so the process can be started with
            # the given arguments
            args = ['myproc', '-name', '"bacon"', '-cores', 4, '']
            # ...
    ```
### [Python Snippets](python_snippets.md)
* New: [Substract two paths.](python_snippets.md#substract-two-paths)
    It can also framed to how to get the relative path between two absolute paths:
    ```python
    >>> from pathlib import Path
    >>> p = Path('/home/lyz/')
    >>> h = Path('/home/')
    >>> p.relative_to(h)
    PosixPath('lyz')
    ```
* New: [Copy files from a python package.](python_snippets.md#copy-files-from-a-python-package)
    ```python
    pkgdir = sys.modules[''].__path__[0]
    fullpath = os.path.join(pkgdir, )
    shutil.copy(fullpath, os.getcwd())
    ```
* New: [Sort the returned paths of glob.](python_snippets.md#sort-the-returned-paths-of-glob)
    `glob` order is arbitrary, but you can sort them yourself.
    If you want sorted by name:
    ```python
    sorted(glob.glob('*.png'))
    ```
    sorted by modification time:
    ```python
    import os
    sorted(glob.glob('*.png'), key=os.path.getmtime)
    ```
    sorted by size:
    ```python
    import os
    sorted(glob.glob('*.png'), key=os.path.getsize)
    ```
* New: [Read file with Pathlib.](python_snippets.md#read-file-with-pathlib)
    ```python
    file_ = Path('/to/some/file')
    file_.read_text()
    ```
* New: [Get changed time of a file.](python_snippets.md#get-changed-time-of-a-file)
    ```python
    import os
    os.path.getmtime(path)
    ```
* New: [Configure the logging of a program to look nice.](python_snippets.md#configure-the-logging-of-a-program-to-look-nice)
    ```python
    def load_logger(verbose: bool = False) -> None:  # pragma no cover
        """Configure the Logging logger.
        Args:
            verbose: Set the logging level to Debug.
        """
        logging.addLevelName(logging.INFO, "\033[36mINFO\033[0m")
        logging.addLevelName(logging.ERROR, "\033[31mERROR\033[0m")
        logging.addLevelName(logging.DEBUG, "\033[32mDEBUG\033[0m")
        logging.addLevelName(logging.WARNING, "\033[33mWARNING\033[0m")
        if verbose:
            logging.basicConfig(
                format="%(asctime)s %(levelname)s %(name)s: %(message)s",
                stream=sys.stderr,
                level=logging.DEBUG,
                datefmt="%Y-%m-%d %H:%M:%S",
            )
            telebot.logger.setLevel(logging.DEBUG)  # Outputs debug messages to console.
        else:
            logging.basicConfig(
                stream=sys.stderr, level=logging.INFO, format="%(levelname)s: %(message)s"
            )
    ```
* New: [Get the modified time of a file with Pathlib.](python_snippets.md#get-the-modified-time-of-a-file-with-pathlib)
    ```python
    file_ = Path('/to/some/file')
    file_.stat().st_mtime
    ```
    You can also access:
    - Created time: with `st_ctime`
    - Accessed time: with `st_atime`
    They are timestamps, so if you want to compare it with a datetime object use the `timestamp` method:
    ```python
    assert datetime.now().timestamp - file_.stat().st_mtime >> from urllib.parse import unquote
    >>> print(unquote("%CE%B1%CE%BB%20"))
    αλ
    ```
### [Jinja2](python_jinja2.md)
* New: [Escape jinja expansion on a jinja template.](python_jinja2.md#escape-jinja-expansion-on-a-jinja-template)
    ```jinja
    {% raw %}
    Anything in this block is treated as raw text,
    including {{ curly braces }} and
    {% other block-like syntax %}
    {% endraw %}
    ```
### [mkdocstrings](mkdocstrings.md)
* Correction: Correct the watch directive.
    `watch` is a list of directories to watch while serving the documentation. So if any file is changed in those directories, the documentation is rebuilt.
### [Pydantic](pydantic.md)
* New: [Investigate libraries.](pydantic.md#to-investigate)
    [Integration of pydantic with pandas](https://pandera.readthedocs.io/en/stable/pydantic_integration.html)
* Correction: [Initialize attributes at object creation.](pydantic.md#initialize-attributes-at-object-creation)
    `pydantic` recommends [using root validators](pydantic.md#using-root-validators), but it's difficult to undestand how to do it and to debug the errors. You also don't have easy access to the default values of the model. I'd rather use the [overwriting the `__init__` method](pydantic.md#overwriting-the-__init__-method).
    ```python
    class fish(BaseModel):
        name: str
        color: str
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            print("Fish initialization successful!")
            self.color=complex_function()
    ```
### [Python Telegram](python-telegram.md)
* New: Analyze the different python libraries to interact with telegram.
    There are two ways to interact with Telegram through python:
    - Client libraries
    - Bot libraries
    Client libraries:
    Client libraries use your account to interact with Telegram itself through a developer API token.
    The most popular to use is [Telethon](https://docs.telethon.dev/en/stable/index.html).
    Bot libraries:
    [Telegram lists many libraries to interact with the bot API](https://core.telegram.org/bots/samples#python), the most interesting are:
    - [python-telegram-bot](#python-telegram-bot)
    - [pyTelegramBotAPI](#pytelegrambotapi)
    - [aiogram](#aiogram)
    If there comes a moment when we have to create the messages ourselves, [telegram-text](https://telegram-text.alinsky.tech/api_reference) may be an interesting library to check.
    [python-telegram-bot](https://github.com/python-telegram-bot/python-telegram-bot):
    Pros:
    - Popular: 23k stars, 4.9k forks
    - Maintained: last commit 3 days ago
    - They have a developers community to get help in [this telegram group](https://telegram.me/pythontelegrambotgroup)
    - I like how they try to minimize third party dependencies, and how you can install the complements if you need them
    - Built on top of asyncio
    - Nice docs
    - Fully supports the [Telegram bot API](https://core.telegram.org/bots/api)
    - Has many examples
    Cons:
    - Interface is a little verbose and complicated at a first look
    - Only to be run in a single thread (not a problem)
    References:
    - [Package documentation](https://docs.python-telegram-bot.org/) is the technical reference for python-telegram-bot. It contains descriptions of all available classes, modules, methods and arguments as well as the changelog.
    - [Wiki](https://github.com/python-telegram-bot/python-telegram-bot/wiki/) is home to number of more elaborate introductions of the different features of python-telegram-bot and other useful resources that go beyond the technical documentation.
    - [Examples](https://docs.python-telegram-bot.org/examples.html) section contains several examples that showcase the different features of both the Bot API and python-telegram-bot
    - [Source](https://github.com/python-telegram-bot/python-telegram-bot)