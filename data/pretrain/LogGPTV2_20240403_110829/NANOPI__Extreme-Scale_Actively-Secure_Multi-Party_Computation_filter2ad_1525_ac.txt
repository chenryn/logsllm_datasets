g
n
i
t
t
e
s
y
t
r
a
p
-
n
O
O(1)
O(τ|Cf |)
Space
O(1)
(cid:16)|Cf |(cid:17)
(cid:16)|Cf |(cid:17)
(cid:16)|Cf |(cid:17)
O(cid:0)p(cid:1)
(cid:16)|Cf |(cid:17)
(cid:16)|Cf |(cid:17)
n|Cf |(cid:17)
(cid:16)
(cid:16)
n|Cf |(cid:17)
O
O
O
O
O
O
O(p)
O
Round
O(1)∗
O(d)
O(1)∗
O(1)†
O(1)†
O(1)†
(cid:16)|Cf |/p
(cid:17)
O
O(d)
O(d)
O(1)†
O(1)†
n|Cf |/p
(cid:16)
(cid:17)
O
O
(cid:18)
Comp./Comm.
complexity§
O(s |Cf |)
1 + s/log |Cf |(cid:17)(cid:19)
|Cf |(cid:16)
(cid:16)|s Cf |(cid:17)
(cid:16)|Cf |(cid:0)1 + s/log τ(cid:1)(cid:17)
1 + s/log |Cf |(cid:17)(cid:19)
(cid:18)
|Cf |(cid:16)
1 + s/log |Cf |(cid:17)(cid:19)
(cid:18)
|Cf |(cid:16)
(cid:16)|Cf |(cid:0)1 + s/log p(cid:1)(cid:17)
(cid:18)
1 + s/log |Cf |(cid:17)(cid:19)
n|Cf |(cid:16)
1 + s/log |Cf |(cid:17)(cid:19)
(cid:18)
n|Cf |(cid:16)
n + s/log |Cf |(cid:17)(cid:19)
(cid:18)
n|Cf |(cid:16)
(cid:18)
n + s/log |Cf |(cid:17)(cid:19)
n|Cf |(cid:16)
(cid:16)
n|Cf |(cid:0)n + s/log p(cid:1)(cid:17)
O
O
O
O
O
O
O
O
O
|Cf | denotes the circuit size of f . τ is the number of executions in a batch.
d, the circuit depth, is application-dependent. p is an (almost) application-
independent (except for circuit size) parameter determined by the size of local
memory. s is the statistic security parameter.
§ Worst-case complexity of per-party work.
∗ Asymptotically more expensive and hard to run computations on dynamic
data.
† Will fail for many circuits due to its extraordinary space requirement.
⋆ It has been experimentally shown that, in practice, WRK is substantially
more efficient than other MPC protocols due to its small constant factors.
points. Hence the dashed estimation line is an underestimation of
the actual peak memory usage.
Note that even on a nowadays powerful cloud server with 128GB
memory (roughly the c5.18xlarge instance at $3/hour on Amazon
EC2), WRK would not be able to securely compute the edit distance
of two 350-nucleotide genome strings. On less expensive computers
like PCs (and resp. mobile devices), WRK is even incapable of exe-
cuting 20 iterations of SHA256 (resp. 20 iterations of AES). Finally,
we stress that this is only in the lighter-weight two-party setting. In
a general n-party setting, WRK’s peak memory usage will have to
be multiplied by a factor of n − 1 because each party needs to store
a abit’s key and MAC for every one of the rest n − 1 parties. There-
fore, it is really stretching for this state-of-the-art MPC protocol to
compute something practically useful when n increases.
The Impact of Rounds and Inefficacy of Naïve Adaptations. A nat-
ural attempt to reduce the space requirement of original WRK is to
limit the batch sizes of its abits and leaky-aANDs generation sub-
routines to some constants so that the resulting WRK-variant can
be streamingly executed. However, not only will this small change
affect protocol correctness and introduce security vulnerabilities
(as we will explain in Section 4), the prohibitive overhead incurred
Actual observation
Estimation
Logistic Regression on 1K MNIST dataset
Logistic Regression on 100 MNIST dataset
(cid:14)(cid:102)(cid:14)
200-nucleotide ED
20 SHA256
100 AES
20 AES
350-nucleotide ED
Sort 5K Ints
0
0
0.25M 0.5M 1M
2M
4M
8M
16M 32M
Cloud server (128 GB)
PC (8 GB)
Mobile devices (1 GB)
256M
512M
1B
2B
4B
16T
4T
1T
128G
32G
8G
2G
e
g
a
s
u
y
r
o
m
e
m
k
a
e
P
Number of ANDs (|Cf |)
(cid:14)⇝(cid:14)
(cid:26) m1 − m2
128M
д1 − д2
(cid:27)
Figure 1: Peak memory usage of two-party WRK protocol. Security parameters: s = 40, κ = 128. The estimation assumes a linear model ˆk · |Cf | + ˆb
for the peak memory usage. We chose to underestimate by setting ˆk (cid:66)
and ˆb (cid:66)
min
min
for all observed
(д1,m1),(д2,m2)
for all observed
(д1,m1),(д2,m2)
(cid:26)(cid:12)(cid:12)(cid:12)(cid:12)m1 − m1 − m2
д1 − д2
(cid:12)(cid:12)(cid:12)(cid:12)(cid:27)
.
д1
WRK
50.7
)
s
/
D
N
A
(
d
e
e
p
S
50K
40K
30K
20K
10K
WRK
Naïve WRK
WRK
38.2
WRK
16.2
Naïve
WRK
0.02
Naïve
WRK
2.7
Naïve
WRK
1.6
WRK
10.7
Naïve
WRK
0.01
2 Party LAN
2 Party WAN
4 Party LAN
4 Party WAN
Figure 2: Performane degradation of naïvely adapted WRK
Assume s = 40, κ = 128. Speeds measured on running an random circuit
mixing 25% ANDs and 75% of XORs. The bucket size is 3. The network
latency of LAN and WAN are 0.2ms and 40ms, respectively.
by the roundtrips also renders the performance of the streamed
protocol execution pointless.
In order to quantify the performance penalty, we have tried
out this naïve modification to WRK and experimentally measured
its performance in various setups. As Figure 2 shows, the naïvely
converted WRK variant runs more than 20x slower than original
WRK even in the low-latency LAN setting. In a WAN network,
the factor of slowdown increases to 800–1000, which makes it
practically unusable!
Finally, although we picked WRK as the baseline in our case-
study both because of its performance advantage over its peer pro-
tocols and also the availability of implementation, the fundamental
conflict between the round and space complexities of malicious
MPC protocols is present in all known MPC protocols. The commu-
nity has yet to see any actively-secure MPC implementation that
is able to run extremely large circuits at a reasonably fast speed.
Thus, new secure mechanisms are needed to better reconcile the
conflicts between space and round in MPC protocol design.
4 DIAGNOSIS AND APPROACH OVERVIEW
In this section, we first analyze the root causes of WRK’s space-
round dilemma. Then, we sketch our ideas to address the challenge,
even under very stringent space/time budgets.
For presentation clarity, we restrict our discussion to the two-
party setting, but the ideas can naturally be carried over to the
multi-party setting.
4.1 Root Causes
Root cause 1: The abit protocol. The way in which abits are gen-
erated and used in WRK requires O(|Cf |) space: (1) Note that abit
is realized using OT extension, which requires constant rounds per
batch. Therefore, computing O(|Cf |) abits within constant rounds
implies using O(|Cf |) space so that O(|Cf |) OTs can run in par-
allel. (2) The call to abit in step (2) of protocol Π2pc (Figure 14)
assumes that the O(|Cf |) tuples returned by abit are all stored in
the program by both parties.
Root cause 2: The aAND protocol. For similar reasons as above,
the way aAND is generated and used in WRK also seriously limits
its scalability: (1) WRK’s aANDs generation protocol ΠaAND is
constant-round but uses O(Cf )-space. (2) Even if WRK’s ΠaAND was
efficiently executable in constant-space, the way aAND gets used
in WRK’s Π2pc also prevents Π2pc from running in constant-space.
This second issue happens to be occluded by a presentation flaw in
their papers [44, 45].
Take their two-party authenticated garbling Π2pc [44] as an ex-
ample. The ideal aAND of FPre used by Π2pc (which we excerpted
from [44] as Figure 3) is actually different from their FaAND func-
tionality (which we copied below for easy comparison):
FaAND
Honest case: Generate uniform [r1]1, [r2]1, [r3]1, and [s1]2, [s2]2, [s3]2,
such that (r1 ⊕ s1) ∧ (r2 ⊕ s2) = r3 ⊕ s3.
Corrupted parties: A corrupted party gets to specify the randomness
used on its behalf by the functionality.
The gap is that: FaAND does not allow the participants to control
the values of the abits, whereas the aAND of FPre does allow P1
FPre(κ)
init: Upon receiving init from P2 and ∆1 from P1, choose uniform ∆2 ∈ {0, 1}κ and store ∆1, ∆2. Send ∆2 to P2.
abit: Upon receiving abit from both P1 and P2, sample uniform r, s ∈ {0, 1}, uniform K[r], M[r], K[s], M[s] ∈ {0, 1}κ such that K[r] = M[r] ⊕ r ∆B and
M[s] = K[s] ⊕ s ∆1. Send (s, M[s], K[r]) to P2.
aAND: Upon receiving (aAND, (r1, M[r1], K[s1]), (r2, M[r2], K[s2]), (r3, M[r3], K[s3])) from P1 and (aAND, (s1, M[s1], K[r1]), (s2, M[s2], K[s2])) from P2,
verify that M[ri] = K[ri]⊕ri ∆2 and that M[si] = K[si]⊕si ∆1 for i ∈ {1, 2} and send cheat to P1 and P2 if not. Otherwise, set s3 (cid:66) r3 ⊕(r1 ⊕s1)(r2 ⊕s2),
set K[r3] (cid:66) M[r3] ⊕ r3∆2 and M[s3] (cid:66) K[s3] ⊕ s3∆1. Send (s3, M[s3], K[r3]) to P2.
Figure 3: The two-party FPre functionality. (κ is a computational security parameter.) (excerpted from [44])
(resp. P2) to specify the abit-values r1, r2 (resp. s1, s2). WRK’s ΠaAND
only realizes FaAND but Π2pc actually depends on the extra control
offered by FPre’s aAND so that its abit generation can be treated
as function-independent offline work! The same presentation flaw
also appeared in the multi-party version of WRK [45].
This issue can be fixed by introducing an extra round for the
parties to align the random abits returned by Fabit and FaAND. We
looked into their source code and verified that this is what actually
happens in their software implementation. We stress, however, that
this extra treatment won’t affect the round complexity of WRK only
if sufficient space is available to cache the abits associated with all
the wires and AND triples so that all the messages can be sent in
the same round. In practice, since space is eventually limited by
some constant, Π2pc has to use O(|Cf |) rounds.
Root cause 3: The function-dependent protocol Π2pc. If a wire splits
into multiple wires (which are used as input to different AND gates),
then the same authenticated permutation bit has to be used to
compute all those AND gates involving the split wires. This implies
that Π2pc needs to be aware of all wire-connection information of
the circuit, which depends on the function and even the specific
ways to construct the function. WRK obtains this wire-connection
information by fully unroll the function, which is not feasible when
|Cf | is large. If only partial information of wire-connections is
known, as is the case when Pool-JIMU executes programs, the
naïve Π2pc must keep every wire around just in case some are
later found split into other wires. This is clearly against the idea of
space-efficient streamed execution.
γ ], K[λ2
Concrete Space Analysis. Assume 128-bit computational security,
γ ]) per
every party needs to store at least a triple (Lγ , M[λ1
wire (which is 16×3 = 48 bytes) and three authenticated bits (which
is 32 × 3 = 96 bytes) per leaky-aAND. Because each AND defines
a new wire and needs an nonleaky-aAND to compute, so at least
48 + 96B bytes memory are needed for each AND where B is the
bucket size. In addition, to efficiently implement Πabit and ΠaAND,
it is important to batch-run sufficiently many AESNI instructions,
which demands additional large contiguous memory to pack the
data to run through the AES cipher.
In the general n-party setting, each garbler has to store roughly
16 +32(n−1) +96B(n−1) bytes per AND: 16 bytes for the wire-label
Lγ , 32(n − 1) bytes for wire permutation abit share, and 96B(n − 1)
for 3B MACs and 3B keys (but the length of each M or K now has
expanded n − 1 times). The evaluator has to store (48 + 96B)(n − 1)
bytes per AND because n − 1 wire-labels per wire is needed at the
time of gate evaluation.
4.2 New Challenges and Key Solution Ideas
One would naturally think carrying the pool idea [48] over here to
WRK will resolve the space-round issue, just like it did to JIMU [47].
Unfortunately, this is not the case. In fact, efficiently running WRK
protocols with limited space requires not only cryptographic en-
hancements, but also some new programming language support
that no existing MPC frameworks has offered. Next, we overview
the new challenges and our key ideas to address them.
4.2.1 The Authenticated Garbling Phase. WRK requires aligning
aANDs to their corresponding wire-permutation-bits. In combina-