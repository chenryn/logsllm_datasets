music, but the user score for tennis ads may increase while
the user is looking at a tennis website, and vice versa for
music ads.
We do not make any assumptions about the relative im-
portance of B, G, or U . An ideal auction design however
must allow for this ﬂexibility.
Besides the basic goal of running an auction that lever-
ages the user proﬁle while prohibiting the broker from re-
constructing it, there are a few additional related goals that
are important:
• to maintain the privacy oﬀered to the advertisers them-
selves. In particular, to prevent advertisers from learn-
ing each other’s bids and budgets.
• to maintain the level of click-fraud defense in current
tracking systems.
• to minimize the overhead of the auction.
As will become apparent in subsequent sections, our de-
signs do not perfectly achieve all of these goals. Rather, our
designs oﬀer trade-oﬀs between these goals.
Note ﬁnally that it is possible that the value of U may cor-
relate with the probability that the user will buy the prod-
uct or service being advertised assuming that the user has
clicked. If this is the case, then the advertiser would want
to express multiple bids as a function of U , since diﬀerent
U ’s would produce diﬀerent revenues for the advertiser. We
do not address this capability in this paper, but rather leave
it for future work should it turn out to be important.
669Ads: A, (BxG), [B,G]
C
Clicks:Ac, ((BnxGn)x(Un/Uc)), [Bc,Gc]
B
an ad, then the client computes the following values and
transmits them to the broker:
C
C
Rank at Client (RaC)
Ads: A, ID, [BxG], [B,G]
Ads: ID, U
Ads:  ID,Rank
Clicks:Ac, [BnxGn], (Un/Uc), [Bc,Gc]
Rank at Broker (RaB)
Ads: A, ID, [BxG], [B,G] 
Ads: ID, (BxG)
Ads: ID, U
Ads:  ID,Rank
Clicks:  Ac, [BnxGn], (Un/Uc), [Bc,Gc]
Rank at 3rd Party (Ra3)
B
B
3
B
Figure 2: Three basic auction schemes. A is an ad
ID unique to the ad, while ID is an Ad ID unique to
the combination of ad and client. The subscripts ‘c’
and ‘n’ refer to the clicked ad and the next ranked ad
respectively. [x] denotes encryption of x. Messages
between client and broker pass through anonymiz-
ing proxies. Messages through solid-line proxies are
encrypted. Messages though dotted-line proxies are
in the clear.
4. DETAILED DESIGNS
To run the auction speciﬁed in Section 3, the system doing
the ranking must have access to the bid B, the broker quality
score G, and the user score U . This means that either 1) B
and G are sent to the client, 2) U is sent to the broker, or
3) B, G, and U are all sent to a 3rd party (Figure 2). These
basic approaches are explored in the following sections.
4.1 Rank-at-Client (RaC)
In this approach, the following information is transmitted
with the ad to the client along with everything else required
by the advertising system (e.g. targeting information, not
shown):
A: The ad ID.
(B × G): A single value which is the product of (B × G).
[B, G]: The individual values B and G, encrypted with a
symmetric key known only to the broker.
When a collection of ads arrive at the client, it ranks all
ads using (B × G × U ). Note that in this case U is current,
while (B × G) is more-or-less older.
If the user clicks on
Ac: The ad ID of the clicked ad.
((Bn × Gn) × (Un/Uc)): A single value which is the
(Bn × Gn) product of the next-ranked ad times the
ratio (Un/Uc) of the user score of the next-ranked ad
Un and the user score of the clicked ad Uc.
[Bc,Gc]: The encrypted B and G for the clicked ad as re-
ceived earlier from the broker.
Upon reception of this message, the broker decrypts
[Bc,Gc].
It uses Gc and ((Bn × Gn) × (Un/Uc)) to com-
pute the CPC as shown in Equation 2. The broker also
compares the resulting CPC with the decrypted Bc.
If
CP C > Bc, then the broker knows that the client is en-
gaged in click fraud, and the broker can ignore the message.
If CP C ≤ Bc, then the broker can accept the message, al-
though this doesn’t mean that the client is not engaged in
click-fraud. Other mechanisms, such as statistical analysis,
must be used to detect it as is done today.
Variation: It may not be necessary to transmit the en-
crypted values [Bc,Gc]. This is because Bc and Gc can be
looked-up using the ad ID Ac. The danger here is that the
looked-up values may be diﬀerent from the Bc and Gc val-
ues used to rank the ads. How diﬀerent depends on the
level of churn in B and G values, which we found to be
minimal in the Bing auction trace (Section 6). Therefore,
it may well suﬃce to use looked-up values rather than val-
ues stored along with the ad at the client. Note that this
variation applies to RaB and Ra3 as well.
4.2 Rank-at-Broker (RaB)
One concern with RaC is that the value (BxG) exposes
information about the advertiser (see Section 5.1.3). This
can be avoided if the ranking is done at the broker. The RaB
scheme presented here is similar to the approach proposed
by Privad in [12]. We present it here for completeness.
Along with the ad, the broker transmits the following to
the client:
A: The ad ID.
ID: An identiﬁer unique to this speciﬁc delivery of this ad
(among all other deliveries). In other words, the same
ad delivered to other clients would have a diﬀerent
values of ID.
[B × G]: A single value which is the product of (B × G),
encrypted with a symmetric key known only to the
broker.
[B, G]: The values B and G, encrypted with a symmetric
key known only to the broker.
The client computes a user score U for each ad (in the
absense of knowledge of what web page the ad may be shown
on). In order to obscure the user proﬁle, the client assigns
a random value for U for those ads for which the client has
a very low user score (for instance because the demographic
doesn’t match that of the user).
Clients transmit the ID,U tuples to the broker via a proxy.
These messages are not encrypted. The proxy also remem-
bers which IDs were received from which clients.
670For each received ID, the broker looks up the current val-
ues of B and G.
It then uses B, G, and U to rank each
received ad among a large number of recently received ads
(say, those received over the last hour), and associates a rank
number Rank to each ad. Closely ranked ads may have the
same ranking number. The broker transmits the ID,Rank
tuple back to the proxy.
The proxy looks up which client is associated with each
ID, and forwards the message on to the client. The client
disregards the ads related to the low user scores, and uses
the remaining ranking for selecting ads to put in ad boxes.
When a user clicks on an ad, it transmits the following
information to the broker:
Ac: The ad ID of the clicked ad.
[Bn × Gn]: The encrypted (B × G) for the next-ranked ad
received earlier.
(Un/Uc): A single value which is the ratio of the user score
of the next-ranked ad Un and the user score of the
clicked ad Uc.
[Bc,Gc]: The encrypted B and G for the clicked ad received
earlier.
Upon reception of this message, the broker decrypts [Bn ×
Gn] and [Bc,Gc]. It uses Gc, (Bn × Gn), and (Un/Uc)) to
compute the CPC as shown in Equation 2. As with RaC, the
broker also compares the resulting CPC with the decrypted
Bc for click fraud.
The proxy prevents the broker from learning the identity
of the client whose ads are being ranked. The per-client-
per-ad unique ID prevents the proxy, which does know the
client identity (network address), from learning which ad,
and therefore what targeting information, is being referred
to.
Even with the noise added to low user scores, we are con-
cerned that the non-noise user scores can be interpreted at
the broker as a kind of ﬁngerprint over the set of ads (i.e.,
ads targeted to men should have uniformly higher scores for
men, and lower scores for women). In this way, the broker
could potentially tease out the proﬁle of users.
4.3 Rank-at-3rd-Party (Ra3)
This approach is similar to RaB, but prevents the ﬁnger-
printing mentioned above. The main diﬀerence between Ra3
and RaB is that in Ra3, the broker additionally sends the
unique ad IDs and (B × G) products to a 3rd party system
which is trusted not to collude with the broker. This in-
formation must be delayed long enough that the 3rd party
system cannot use a timing attack to correlate the values
associated with a single user. This 3rd party also receives
the user scores from the clients, and based on this informa-
tion, ranks ads in the same way the broker does in the RaB
approach. Since, unlike the broker, it does not know which
ads were transmitted to the same client, it cannot ﬁngerprint
the clients.
4.4 Homomorphic Encryption Variant (RaC,
RaB, and Ra3)
A variation on all three auction designs is to use homomor-
phic encryption (e.g., ElGamal [9]), which allows for multi-
plication operations on encrypted data. This may be used
to defend against certain attacks by the broker as described
in Sections 5.1.1 and 5.3.3. When a user clicks on an ad, the
client encrypts (Un/Uc) with the broker’s public key. In the
case of RaC, it also encrypts (Bn × Gn) with the broker’s
public key. In the case of RaB and Ra3, the broker provides
the encrypted [Bn × Gn], but using its public key instead of
a symmetric key. For all three schemes, the broker provides
[1/Gc], again encrypted with the broker’s public key. Using
homomorphic property of the encryption, the client is able
to calculate:
[Bn × Gn] ×(cid:20) Un
Uc (cid:21) × [1/Gc] = (cid:20)Bn(cid:18) Gn × Un
Gc × Uc (cid:19)(cid:21)
and transmit the resulting value in the click report. Upon
receiving a click report, broker decrypts the value to obtain
the CPC. Although homomorphic encryption is relatively
expensive, there is no need to do the operation in real-time.
Rather, the client can do the operation when it has spare
CPU cycles before transmitting, and the broker can likewise
run the operations later on as batch processing.
5. AUCTION ANALYSIS
This section analyzes the three types of auctions in terms
of privacy, auction quality, and attacks on the auction sys-
tems.
5.1 Privacy Properties
In this section, we look at the information that is conveyed
for the sake of the auction between honest-but-curious play-
ers, and determine whether it constitutes a privacy threat.
In Section 5.3 we relax this assumption.
5.1.1 Broker analyzes (Un/Uc) (RaB and Ra3)
In order to exploit this value to gather more information
about the user proﬁle, the broker would have to ﬁrst tease
apart the values of Un and Uc, then use the value combined
with the ad targeting to reverse engineer the user proﬁle, and
then use the user proﬁle knowledge to link together multiple
reports. The ﬁrst step may be made diﬃcult by making
(Un/Uc) relatively coarse-grained, thus making it harder to
uniquely factor out its components. The second step is made
diﬃcult simply by the sheer number of clients that are likely
to have similar user scores. Thus, we conclude that exposure
of (Un/Uc) does not constitute a serious threat.
5.1.2 Broker analyzes ((Bn × Gn) × (Un/Uc)) (RaC)
This value is more diﬃcult to reverse engineer than
(Un/Uc), and is therefore also not a threat.
5.1.3 Client analyzes (B × G) (RaC)
An advertiser can use this value to determine the broker
quality score G assigned by the broker to its own ads. This
can be done by the advertiser simply creating a client that
receives its own ads, and using the known value of B to factor
out G. Whether this is a problem needs to be decided by
the broker, though we point out that today Google reveals
a coarse-grained quality score to its advertising customers.
The product (B × G) to the client also reveals the overall
ranking of an ad to anyone running a client, including the
advertiser’s competitors. From this, they can also roughly
estimate the advertiser’s bids. It is not clear that this is a
problem, for two reasons. First, in today’s advertising sys-
tems, an advertiser can see how its competitors rank relative
to itself simply by observing how ads are displayed. RaC
671makes it easier and cheaper to obtain this ranking infor-
mation, but does not fundamentally change an advertiser’s
ability to do so. Second, historically in traditional advertis-
ing (print, TV, radio), advertisers can monitor how much
advertising their competitors do, and can generally know
the cost of that advertising. While certainly all things being
equal advertisers would like to keep this information secret,
historically the inability to do so has not, for the most part,
prevented companies from advertising.
If exposing the product (B × G) to the client is an accept-
able privacy loss, then RaC should be the preferred auction
method for its overall simplicity and lower overhead. If it is
not acceptable, then RaB and Ra3, which both avoid expos-
ing this information, may be preferred.
5.2 Auction Properties
In this section, we discuss the various shortcomings of each
of the approaches with respect to the auction properties,
especially ranking results and revenue.
5.2.1 System delays
There are several potential delays in the non-tracking ad-
vertising systems that can change both the rankings and the
computed CPC. With RaC, there is a delay between when
the ad was transmitted and adbox time when the ranking
takes place. With RaB and Ra3, there is a delay between
when the ranking occurs and adbox time when the ranking
is actually used.
In either case, the bid B or the broker
quality score G used for ranking may no longer be correct,
and an out-of-date ranking takes place.
During the design of the auction approaches, these delays
were a major concern. As it turns out, at least for the auc-
tion data from Bing search advertising auctions (Section 6),
the delays have only a minor impact on both broker rev-
enue and advertiser costs, even when the delay is several
hours or a day. Nevertheless, this may not be the case for
other systems or future systems, and so it remains important
that these delays are engineered to be minimal. This could
be done, for instance, by having clients frequently request
small numbers of new ads.
5.2.2 Client selection
A problem encountered by non-tracking advertising is that
the broker does not know which clients are the best clients
to send an ad to. For instance, suppose that some number
of clients M have requests ads for watches. The broker does
not know which clients may be interested in cheap watches,
and which in expensive. The advertiser, however, might not
have enough budget to pay for all the clicks that would result
if all watch ads are sent to all interested users.
Lets assume that the broker knows the clicks per
delivered-ad rate. From this, it can determine the number of
clients N that should receive the ad without exhausting the
advertisers budget. If it randomly chooses N clients among
the interested clients, then it will not be sending all ads to
the most interested clients.
One way to solve this problem is for the broker to go ahead
and send the ad to all interested clients, but to also send
a parameter giving the minimum user score that a client
must have in order to show the ad. This way, only the
best matching clients will show the ad. The broker may
be able to establish the expected click per delivered-ad rate
for various user scores, and therefore predict the setting of
the user score based on the number of clients. If the broker
predicts too high, then it can lower the minimum user score
and send this to clients, thus causing more clients to show
the ad.
5.2.3 Auction Scope