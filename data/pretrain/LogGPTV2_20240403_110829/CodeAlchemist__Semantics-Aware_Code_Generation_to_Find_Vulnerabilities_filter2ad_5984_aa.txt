title:CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities
in JavaScript Engines
author:HyungSeok Han and
DongHyeon Oh and
Sang Kil Cha
CodeAlchemist: Semantics-Aware Code Generation
to Find Vulnerabilities in JavaScript Engines
HyungSeok Han
KAIST
DongHyeon Oh
KAIST
PI:EMAIL
PI:EMAIL
Sang Kil Cha
KAIST
PI:EMAIL
Abstract—JavaScript engines are an attractive target
for
attackers due to their popularity and ﬂexibility in building
exploits. Current state-of-the-art fuzzers for ﬁnding JavaScript
engine vulnerabilities focus mainly on generating syntactically
correct test cases based on either a predeﬁned context-free
grammar or a trained probabilistic language model. Unfor-
tunately, syntactically correct JavaScript sentences are often
semantically invalid at runtime. Furthermore, statically analyzing
the semantics of JavaScript code is challenging due to its
dynamic nature: JavaScript code is generated at runtime, and
JavaScript expressions are dynamically-typed. To address this
challenge, we propose a novel test case generation algorithm
that we call semantics-aware assembly, and implement it in a
fuzz testing tool termed CodeAlchemist. Our tool can generate
arbitrary JavaScript code snippets that are both semantically and
syntactically correct, and it effectively yields test cases that can
crash JavaScript engines. We found numerous vulnerabilities of
the latest JavaScript engines with CodeAlchemist and reported
them to the vendors.
I.
INTRODUCTION
JavaScript (JS) engines have become a core component of
modern web browsers as they enable dynamic and interactive
features on web pages. As of July of 2018, approximately
94.9% of all the websites use JS [34], and almost all smart-
phones are equipped with a JS-enabled browser today.
The growing popularity of JS also means that JS engines
are an appealing target for attackers. As developers attempt to
improve performance and functionality of modern JS engines,
they continuously introduce new security vulnerabilities. Such
vulnerabilities can be exploited by an attacker to compromise
arbitrary victim machines [19], [20] that are potentially behind
a ﬁrewall. In this case, the attacker simply needs to entice the
victim to visit a malicious web page containing a malicious
JS snippet.
As such, there has been much research on ﬁnding JS engine
vulnerabilities. LangFuzz [17] is one of the most successful
fuzzers in this ﬁeld, ﬁnding more than 2,300 bugs in JS engines
since 2011 [16]. LangFuzz initially parses sample JS ﬁles,
referred to here as JS seeds, and splits them into code frag-
ments. It then recombines the fragments to produce test cases,
i.e., JS code snippets. Another successful JS engine fuzzer is
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23263
www.ndss-symposium.org
jsfunfuzz [27], which does not require any sample ﬁles unlike
LangFuzz. Instead, it randomly generates syntactically valid JS
statements from a JS grammar manually written for fuzzing.
Although this approach requires signiﬁcant manual effort to
implement language production rules, it is extremely efﬁcient
in ﬁnding JS engine vulnerabilities: it has found more than
2,800 bugs since 2006 [16].
Although successful, current state-of-the-art JS engine
fuzzers suffer from generating semantically valid JS code
snippets. According to our preliminary study, more than 99%
of test cases produced by jsfunfuzz raise a runtime error after
consuming only three JS statements. Given that LangFuzz
does not consider the JS semantics while associating the code
fragments, it has more or less the same problem. For example,
test cases generated from current fuzzers may refer to variables
that are not deﬁned in the current execution context.
it
One may argue that
is possible to extend jsfunfuzz
to handle full-ﬂedged JS semantics, but writing a complete
grammar for fuzzing requires effort nearly identical to that
required when writing a JS engine, which is not feasible in
practice. To mitigate requirement of the manual effort while
reducing the number of invalid JS test cases to generate,
jsfunfuzz makes JS errors silent by wrapping JS code snippets
with try-catch statements. However, such an approach
does not resolve the root cause of JS runtime errors, and it may
change the semantics of JS code snippets. For instance, the
Proof of Concept (PoC) exploit snippet of CVE-2017-11799
shown in Figure 1 triggers the vulnerability only without a
try-catch statement as a try-catch block suppresses the
JIT optimization, which is critical to trigger the vulnerability.
Skyﬁre [35] and TreeFuzz [24] partially learn JS language
semantics by building probabilistic language models from a
corpus of JS seed ﬁles, and they use the models to generate test
cases. However, these approaches largely rely on the accuracy
of the language models, and they currently suffer from han-
dling the complex type system of JS language, meaning they
are highly likely to produce semantically invalid test cases.
For example, consider the JS statement x.toUpperCase().
When the variable x is not a string, and it does not have a
method toUpperCase, we will observe a type error when
executing the statement. Unraveling such language semantics
with a language model is difﬁcult in practice.
In this paper, we propose a novel test case generation
technique that we call semantics-aware assembly, which can
systematically generate JS code snippets that are both syntac-
tically and semantically correct in a fully automatic fashion.
The crux of our approach is to break JS seeds into fragments
that we refer to as code bricks. Each code brick is tagged with
a set of constraints representing in which condition the code
brick can be combined with other code bricks. We call such a
condition as an assembly constraint. Speciﬁcally, we compute
which variables are used and deﬁned in each code brick using a
classic data-ﬂow analysis [1], and dynamically ﬁgure out their
types. We merge code bricks only when the used variables in
each code brick are properly deﬁned from the other code bricks
in front, and their types match. Unlike LangFuzz where it
joins arbitrary code fragments together as long as the language
syntax allows it, the assembly constraints naturally help us
follow the language semantics when interlocking code bricks.
We note that some test cases generated from semantics-aware
assembly may still throw a runtime error as it may over-
approximate the assembly constraints. However, our empirical
study shows that our technique can drastically reduce the
likelihood of encountering runtime errors from the generated
test cases compared to the state-of-the-art JS engine fuzzers.
Furthermore, semantics-aware assembly does not require
any manual effort for implementing language grammars be-
cause it learns JS semantics from existing JS seeds. The similar
intuition is used by LangFuzz, but our focus is not only on
resolving syntactic errors, but also on semantic errors unlike
any other existing JS engine fuzzers.
We implement semantics-aware assembly on a fuzzing tool
that we refer to as CodeAlchemist, and evaluate it on four ma-
jor JS engines: ChakraCore of Microsoft Edge, V8 of Google
Chrome, JavaScriptCore of Apple Safari, and SpiderMonkey
of Mozilla Firefox. Our tool was able to ﬁnd 4.7× more unique
crashes than jsfunfuzz in one of our experiments. It also dis-
covered numerous previously-unknown security vulnerabilities
from the latest JS engines at the time of writing.
Our main contributions are as follows.
1) We present semantics-aware assembly, a novel tech-
nique for fuzzing JS engines. The proposed tech-
nique can produce random yet semantics-preserving
JS code snippets during a fuzzing campaign.
2) We implement our idea on a prototype called CodeAl-
chemist. To the best of our knowledge, CodeAl-
chemist is the ﬁrst semantics-aware JS engine fuzzer.
3) We evaluate CodeAlchemist on four major JS en-
gines, and found a total of 19 bugs including 11
security bugs. We reported all of them to the vendors.
II. BACKGROUND
In this section we start by describing the characteristics
of JS language and its type system. We then discuss the
meaning of JS runtime errors that may occur while evaluating
JS code. Since our design goal is to minimize such errors while
generating JS test cases, it is essential to understand what are
they, and what are their implications.
A. JavaScript and the Type System
JS is a dynamic programming language. Thus, JS programs
can modify the type system at runtime, and can dynamically
generate code on the ﬂy, e.g., the infamous eval function
evaluates JS code represented as a string. The dynamic nature
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
//try {
class MyClass {
constructor() {
this.arr = [1, 2, 3];
}
f() {
super.arr = [1];
this.x;
}
}
let c = new MyClass();
for (let i = 0; i < 0x10000; i++) {
c.f();
}
//} catch (e) {}
Fig. 1: A PoC JS snippet that triggers CVE-2017-11799 in
ChakraCore. If the try-catch statement, which is currently
commented out, is used, the code does not crash ChakraCore.
There
seven kinds of primitive
Null,
of the language signiﬁcantly hurts the precision of static
analyses [29].
in JS:
are
Undefined,
Symbol,
Number, and Object. An Object type is simply a
collection of properties. Since JS is a dynamically-typed
language, variables can be assigned with any type at runtime.
For instance, one can assign the number 42 to a string variable
s with no problem:
String,
Boolean,
types
1
2
var s = ’string variable’;
s = 42; // This is valid
Unlike classic object-oriented languages such as C++ and
Java, JS is a prototype-oriented language, which means that
an object instance A can inherit properties of another object
instance B at runtime by simply setting B as a prototype of
A. Any object instances in JS have a __proto__ property,
which can be accessed and modiﬁed at runtime. Consider the
following JS statement as an example:
1
var arr = new Array(42);
After evaluating the above statement,
the initialized array
variable arr will have the Array object as its prototype.
By accessing the property (arr.__proto__), we can easily
ﬁgure out which prototype is used by an object instance at
runtime. Additionally, we can also dynamically assign a new
prototype to an object instance during a program execution.
Since the type system of JS can dynamically change, it is
likely to encounter runtime errors during the evaluation of JS
statements.
B. JavaScript Runtime Errors
Even a syntactically valid JS snippet can raise runtime
errors, which is indeed the key motivation to our research.
There are ﬁve kinds of native runtime errors deﬁned in the
ECMAScript standard [9] (corresponding object names are
in parentheses): syntax error (SyntaxError), range error
(RangeError), reference error (ReferenceError), type
error (TypeError), and URI error (URIError). Figure 2
presents sample statements that can raise them. Each line in
the ﬁgure is independent to each other, and can run separately
to throw a speciﬁc runtime error.
2
1
2
3
4
5
eval(’break’); // SyntaxError
var r = new Array(4294967296); // RangeError
u; // ReferenceError
var t = 10; t(); // TypeError
decodeURIComponent(’%’); // URIError
Fig. 2: Sample statements for runtime errors. Each line throws
a speciﬁc runtime error when it is individually evaluated.
Syntax errors trigger when a JS engine interprets syntac-
tically invalid code. Since JS is a dynamic language, code
that looks syntactically correct can still raise a syntax error
at runtime. For example, Line 1 in Figure 2 presents a case
where a break statement is evaluated on the ﬂy with the
eval function. Note that the statement itself is syntactically
correct, but a syntax error is raised when it is evaluated because
it is not within a loop in the current context.
Range errors happen when we try to use a value that is not
in the allowed range. For example, Line 2 shows a syntactically
valid JS statement, which will throw a range error because the
Array constructor only accepts a number less than 232 − 1,
and 4294967296 = 232.
Reference errors occur when accessing an undeﬁned vari-
able. The variable u in Line 3 is used without any prior
deﬁnition. According to our study, this is the most common
error that we can detect while fuzzing JS engines.
Type errors arise when the actual type of a value is different
from the expected type. For example, Line 4 declares an integer
variable t, but then, we consider the variable as a function,
and make a function call. As a result, we will encounter a type
error after executing the line.
Finally, URI errors appear during the execution of global
URI functions when they were used in a way that is incom-
patible with their deﬁnition. Line 5 raises a URI Error because
the given parameter string is not a valid URI.
In addition to the native errors, there can be runtime errors
deﬁned by programmers, which we refer to as a custom error
in this paper. One can deﬁne custom errors by instantiating the
Error object, and can raise them with a throw statement.
Our focus in this paper is on reducing the number of native
runtime errors, but not custom errors as they are a part of the
JS semantics anyways.
III. MOTIVATION
Our research is inspired by a preliminary study that we
performed with jsfunfuzz [27], one of the state-of-the-art JS
engine fuzzers. We chose jsfunfuzz because it is historically
the most successful JS engine fuzzer that is open-sourced.
LangFuzz [17], for instance, is not publicly accessible.
We ran jsfunfuzz on the four major JS engines,
i.e.,
ChakraCore, V8, JavaScriptCore, SpiderMonkey, and observed
interesting phenomena: (1) we encountered a runtime error for
every JS ﬁle that jsfunfuzz generated; and (2) each of the ﬁle
returned a runtime error after evaluating only few statements.
Particularly, we were able to catch a runtime error in 99.5%
of the cases with only three or less top-level 1 statements.
1Each top-level statement generated from jsfunfuzz included 2.5 statements
on average.