### Discrete-Time Simulation Parameters

For the discrete-time unit of one minute in our simulation, we set \(\alpha = \frac{1.8}{60} = 0.03\). From Equation (18), we can derive \(\eta = \frac{232\alpha}{N} = 358\) scans per minute, which translates to approximately \(5.965\) scans per second. Since different infected hosts have varying scan rates, we assume each host has a constant scan rate \(x\), independently determined by a normal distribution \(N(\eta, \sigma^2)\) with \(\sigma = 100\). The scan rate \(x\) is bounded by \(x \geq 1\).

In our simulation, the ingress scan monitors cover an IP space of \(2^{20}\). We also assume an initial number of infected hosts \(I_0 = 10\).

### SQL Slammer Propagation

SQL Slammer propagated similarly to Code Red by randomly generating target IP addresses for scanning [19]. According to [19], an infected host sent out approximately 4,000 scans per second initially. The authors observed that 75,000 hosts were infected within the first 30 minutes. For the Slammer simulation, we set \(\eta = 4000\) and \(N = 100,000\), considering that many infected hosts did not scan the monitors due to congestion caused by Slammer. The scan rate \(x\) of a host is predetermined by the normal distribution \(N(4000, 2000^2)\), with \(x \geq 1\).

In the discrete-time simulation, the monitoring interval \(\Delta\) is set to one minute for Code Red and one second for the faster SQL Slammer worm.

### Background Noise Consideration

We must account for background non-worm noise in our simulations. Goldsmith provided data on the background noise for Code Red activities monitored on a Class B network (covering \(2^{16}\) IP addresses) [11]. He recorded TCP port 80 SYN requests from Internet hosts to unused IP addresses inside his local network, using a method similar to our ingress scan monitors. The data showed that the background noise was small compared to Code Red traffic and remained relatively constant. If modeled using a normal distribution, the number of noise scans per hour follows \(N(110.5, 30^2)\), and the number of noise sources follows \(N(17.4, 3.3^2)\).

To align with our experimental setup, we monitor an IP space of \(2^{20}\), which is 16 times larger than Goldsmith's. Therefore, the number of noise scans and sources should be scaled up by 16. Additionally, since our monitoring interval is one minute instead of one hour, we reduce the number of noise scans and sources by a factor of 60. Thus, in our Code Red simulations, the noise added at each monitoring interval follows \(N(29.5, 8^2)\) for \(Z_t\) and \(N(4.63, 0.893^2)\) for \(C_t\). This extension of noise is approximate but the best we can do with the available data. We are currently seeking more detailed log data for Code Red and Slammer to enhance the realism of our experiments.

For SQL Slammer, we lack observed data on background noise, so we assume it has the same background noise as Code Red.

### Alarm Threshold and Kalman Filter Activation

In the simulation, the alarm threshold for \(Z_t\) is set to twice the mean value of the background noise. The Kalman filter is activated when the illegitimate scan traffic \(Z_t\) exceeds the alarm threshold for three consecutive monitoring intervals. This prevents frequent activation due to noise surges.

### Code Red Simulation and Early Warning

For Code Red, Figure 5(a) shows the number of infected hosts \(I_t\) over time, while Figure 5(b) shows the estimated infection rate \(\hat{\alpha}\) using observation data \(Z_t\). In this simulation run, \(Z_t\) at times 126, 127, and 128 minutes exceed the alarm threshold of 59, triggering the Kalman filter at 128 minutes. Figure 5(c) shows the estimate \(\hat{\alpha}\) using \(C_t\) after bias correction. Both estimates converge to the true value of \(\alpha\), but the estimate using \(C_t\) is smoother. Our goal is to determine if the estimate stabilizes and oscillates slightly around a positive constant value. Hence, we will use \(C_t\) after bias correction to estimate \(\alpha\) unless otherwise specified.

We estimate the vulnerable population size \(N\) using Equation (18) at each discrete time. Figure 6 shows the estimated value of \(N\) over time. For comparison, we also calculate \(\hat{N}\) using the estimated parameter \(\hat{\beta}\) from the Kalman filter (Equation 17). The results indicate that Equation (18) provides a more accurate estimate of \(N\) than the direct estimation from the Kalman filter.

In this simulation, Code Red infects 1% of the vulnerable population at 199 minutes and 2% at 223 minutes. Figure 5(c) shows that during the time when Code Red infects 1% to 2% of the population, the estimate of the worm's infection rate \(\alpha\) has already stabilized, though the estimated value is still rough. Thus, the Monitoring and Control (MWC) system can detect the presence of the worm when it infects about 1% to 2% of the vulnerable population, even if the estimation of \(N\) is less precise.

### Variability in Worm Propagation

Worm propagation is a stochastic process. To verify the robustness of the Kalman filter detection algorithm, we ran 100 simulations of Code Red with the same parameters. Figure 7 shows the upper and lower bounds and the average number of infected hosts across these 100 runs.

For each run, we used the Kalman filter to estimate the worm's infection rate \(\alpha\). The worm infects 2% of the vulnerable population between 200 to 258 minutes. During each simulation, the estimated \(\alpha\) gradually decreases its oscillation and converges to the true value (Figure 5(c)). We obtained the maximum and minimum values of the estimated \(\alpha\) after the worm infects 2% of the population. These bounds, shown in Figure 8, indicate the stability of the estimation. The figure also shows that the Kalman filter's performance is not affected by the variability in the worm's spreading speed. This is because the filter activates earlier when the worm spreads faster, and the signal-to-noise ratio of the observed data increases, leading to faster convergence.

### Early Warning for a "Hit-list" Worm

The "hit-list" concept, first introduced in [24], involves a worm with a built-in list of potentially vulnerable IP addresses. The worm first propagates by scanning only the hosts on this list. After infecting most hosts on the list, it uses random scans to infect other vulnerable hosts.

During the hit-list scanning phase, the worm does not send probes to nonexistent IP addresses. Therefore, we assume the monitoring system collects worm scans only after the hit-list scanning phase. In our simulation, we assume the worm has already infected all hosts on the hit-list at time 0, resulting in a large number of initially infected hosts. Due to the high scan traffic, the Kalman filter is activated immediately.

Figure 9(a) compares the propagation of a hit-list worm with 1,000 entries to the previous Code Red propagation. The hit-list does not significantly affect the worm's propagation pattern. Figures 9(b) and 9(c) show the estimation of the worm's infection rate \(\alpha\) and the vulnerable population \(N\), respectively. Compared to Figure 5(c), Figure 9(b) indicates that the Kalman filter estimation of the infection rate converges faster for the hit-list worm due to the higher signal-to-noise ratio.

In this simulation, the hit-list worm infects 1% of the vulnerable population at 45 minutes and 2% at 69 minutes. By 69 minutes, the estimate has stabilized with minimal oscillation. Thus, the MWC can detect the presence of the hit-list worm when it infects 1% to 2% of the vulnerable population.

### SQL Slammer Simulation and Early Warning

[Continue with the section on SQL Slammer simulation and early warning, following the same structured and professional format as above.]