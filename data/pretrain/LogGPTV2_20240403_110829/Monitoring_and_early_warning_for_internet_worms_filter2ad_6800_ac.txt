Therefore, for the discrete time unit of one minute in our
simulation, α = 1.8/60 = 0.03. From (18) we can reversely
derive η = 232α/N = 358 per minute, i.e., Code Red sent
out on average about 358/60 = 5.965 scans per second.
Because diﬀerent infected hosts have diﬀerent scan rates,
we assume that each host has a constant scan rate x , a rate
that is independently predetermined by a normal distribu-
tion N (η, σ2) where σ = 100 (the scan rate x is bounded by
x ≥ 1). In our simulation, the ingress scan monitors cover
220 IP space. We also assume I0 = 10 at the beginning.
SQL Slammer propagated in the same way as Code Red
by randomly generating target IP addresses to scan [19].
According to [19], a Slammer infected host sent out on av-
erage 4,000 scans per second at the beginning. The authors
in [19] also observed that 75,000 hosts were infected in the
ﬁrst 30 minutes. Thus in the case of Slammer simulation, we
set η = 4000 and N = 100, 000 (since many infected hosts
did not scan the monitors in the ﬁrst 30 minutes due to the
congestions caused by Slammer). Because the scan rate of
Slammer was bandwidth limited and varied a lot among dif-
ferent computers, in our simulation the scan rate x of a host
is predetermined by the normal distribution N (4000, 20002)
(x is bounded by x ≥ 1).
In the discrete-time simulation, the monitoring interval ∆
is set to be one minute for Code Red, and one second for
the very fast SQL Slammer worm.
6.2 Background Noise Consideration
We need to consider background non-worm noise in our
simulations. Fortunately, Goldsmith provided simple data
of the background noise for Code Red activities monitored
on a Class B network (covers 216 IP addresses) [11]. Gold-
smith recorded TCP port 80 SYN requests from Internet
hosts to any unused IP addresses inside his local network —
such method is the same as the ingress scan monitors in our
proposed monitoring system. The observation data showed
that the background noise was small compared to Code Red
traﬃc and the noise did not vary much. If we use normal
distribution to model the background noise, then for each
hour the number of noise scans follows N (110.5, 302) and
the number of noise sources follows N (17.4, 3.32).
We try to hold the statistics of the observed background
noise in our experiments: we monitor 220 IP space, which
is 16 times as large as what Goldsmith monitored, so the
number of noise scans or noise sources should be enlarged
by 16 times; we use one minute in stead of one hour as the
monitoring interval, thus we should decrease the number of
noise scans or noise sources by 60. In this way, in our Code
Red simulations, the noise added into the observation data
at each monitoring interval follows N (29.5, 82) for Zt and
N (4.63, 0.8932) for Ct. Of course, this kind of extension of
noise is very rough, but it is the best we can do based on
the data available. Currently, we are trying to obtain the
detailed log data on Code Red and Slammer from others in
order to have more realistic experiments.
For the SQL Slammer, we do not have any observed data
on its background noise. Thus we simply assume that it has
the same background noise as the Code Red.
In the simulation experiments, the alarm threshold for Zt
is set to be two times as large as the mean value of the
background noise. The Kalman ﬁlter will be activated when
the illegitimated scan traﬃc Zt is over the alarm threshold
for three consecutive monitoring intervals. In this way, the
Kalman ﬁlter will not be frequently activated by the surge
of noise traﬃc.
6.3 Code Red Simulation and Early Warning
For Code Red, Fig. 5(a) shows It in one simulation run as
a function of time; Fig. 5(b) shows the estimate of infection
rate ˆα as time goes on by using observation data Zt. In this
simulation run, Zt at time 126, 127 and 128 minutes are over
the alarm threshold 59, thus the Kalman ﬁlter is activated
at 128 minutes. Fig. 5(c) shows the estimate ˆα by using Ct
after bias correction (7). Both estimates converge to the real
value of α, but the estimate by using Ct is smoother. Our
objective of the estimation is to ﬁnd whether the estimate
stabilizes and oscillates slightly around a positive constant
value. Therefore in the following, we will always use Ct after
bias correction to estimate α with the Kalman ﬁlter if not
mentioned explicitly.
We estimate the vulnerable population size N by Equation
(18) at each discrete time. Fig. 6 shows the estimated value
of N as time goes on. For comparison, we also use the
estimated parameter ˆβ derived from the Kalman ﬁlter (17)
to directly calculate ˆN by ˆN = ˆα/ ˆβ. The result is also shown
in Fig. 6. This ﬁgure shows that Equation (18) can provide
a more accurate estimate of N than the direct estimation
from the Kalman ﬁlter.
In this simulation run, Code Red infects 1% of the vulner-
able population at 199 minutes, and 2% of population at 223
minutes. Fig. 5(c) shows that during the time when Code
Red infects 1% to 2% population, the estimate of the worm’s
infection rate α has already stabilized to show the constant
positive property (though the estimated value is still very
rough). Therefore, the MWC can detect the presence of the
worm when it infects about 1% to 2% of vulnerable popula-
tion (the estimation of N is rougher but it is less important
than the worm infection rate in order to detect a worm).
6.3.1 Variability in Worm Propagation
Worm propagation is in fact a stochastic process. In order
to check if the Kalman ﬁlter detection algorithm works well
under most cases, we use the same parameter settings in the
previous simulation to run the Code Red simulation for 100
times. Fig. 7 shows the upper and lower bounds and the
average value of the number of infected hosts in these 100
simulation runs.
For each of these 100 simulation runs, we use the Kalman
ﬁlter to estimate the worm’s infection rate α. Among these
100 runs, the worm infects 2% of the vulnerable population
at the time between 200 to 258 minutes. During the estima-
tion process of each simulation run, the estimated value of
α will gradually decrease its oscillation and converge to its
true value (as shown in Fig. 5(c)). For each simulation run,
we obtain the maximum and minimum values of estimated
α after the worm infects 2% population — the oscillation
of the estimated α will not exceed this boundary after the
worm infects 2% population. This boundary tells us how
well we can obtain a stabilized estimation. The oscillation
bounds are shown in Fig. 8 for these 100 simulation runs.
In order to check if the Kalman ﬁlter has worse perfor-
mance when the worm propagates faster, in Fig. 8 we have
sorted the 100 simulation runs according to the time when
the worm infects 2% population. In other words, the worm
in simulation i in Fig. 8 infects 2% of vulnerable popula-
tion earlier than the worm in simulation j if i < j. This
ﬁgure shows that the performance of the Kalman ﬁlter is
not aﬀected by the variability of the spreading speed of the
worm. One reason is that the Kalman ﬁlter is activated ear-
lier when the worm spreads faster. Another reason is that
when the worm spreads faster, the signal-to-noise ratio of
the observed data will become higher, thus the estimation
will converge faster.
s
t
s
o
h
d
e
t
c
e
f
n
i
f
o
#
3.5
3
2.5
2
1.5
1
0.5
0
x 105
e
t
a
r
n
o
i
t
c
e
f
n
i
d
e
t
a
m
i
t
s
E
0.25
0.2
0.15
0.1
0.05
0
100
200
300
400
500
600
Time t (minute)
a. Code Red propagation
Real value of α
Estimated value of α
0.25
Real value of α
Estimated value of α
t
e
a
r
n
o
i
t
c
e
n
f
i
t
d
e
a
m
i
t
s
E
0.2
0.15
0.1
150
200
250
300
350
Time t (minute)
b. use observed data Zt
0.05
0
150
200
250
Time t (minute)
300
350
c. use Ct after bias correction
Figure 5: Code Red simulation and Kalman ﬁlter estimation of infection rate (for one simulation run)
N
n
o
i
t
l
a
u
p
o
p
d
e
t
a
m
i
t
s
E
6
5
4
3
2
1
0
x 105
Real population size N
From estimated β
From η and estimated α
x 105
Upper bound
Lower bound
Mean value
3.5
3
2.5
2
1.5
1
0.5
s
t
s
o
h
d
e
t
c
e
f
n
i
f
o
#
150
200
250
300
Time t (minute)
350
400
0
0
100
200
300
400
Time t (minute)
Real value of infection rate
Upper bound of estimates
Lower bound of estimates
0.1
0.08
0.06
d
n
u
o
b
e
t
a
r
n
o
i
t
c
e
f
0.04
n
i
d
e
t
a
m
i
t
s
E
0.02
500
600
0
20
40
60
80
100
Simulation Run ( sorted )
Figure 6: Estimate of population
N for Code Red
Figure 7: Variability in
Code Red simulation
(for 100 simulation runs)
Figure 8: Bound of ˆα after
worm infects 1% population
(for 100 simulation runs)
6.3.2 Early Warning for a “Hit-list" Worm
“Hit-list” concept was ﬁrst presented in [24]. The worm
has a built-in list that contains thousands IP addresses of
potentially vulnerable machines. The worm will ﬁrst propa-
gate by only scanning computers on this list. After infecting
most hosts on the list, the worm uses random scans to try
to infect other vulnerable hosts on the Internet.
At the hit-list scanning phase, the worm does not send
probes to nonexistent IP addresses. Therefore, we assume
that the monitoring system could collect worm scans only
after the worm ﬁnishes the hit-list scanning phase. In our
simulation, we assume that at time 0 the worm has already
infected all hosts on the hit-list, i.e., it has a large number
of initially infected hosts. Because of the worm’s high scan
traﬃc when it begins to randomly scan, the Kalman ﬁlter
will be activated immediately at the beginning.
Fig. 9(a) shows the propagation of a hit-list worm that
has a 1000-entry hit-list compared with previous Code Red
propagation (they have the same simulation settings except
the number of initially infected hosts). From Fig. 9(a) we
observe that the hit-list does not aﬀect the worm propaga-
tion pattern. Fig. 9(b)(c) show the estimation of the worm
infection rate α and the vulnerable population N , respec-
tively. Compared to Fig. 5(c), Fig. 9(b) shows that the
Kalman ﬁlter estimation of the infection rate converges to
the true value faster than the estimation for a worm with-
out hit-list. It is because the worm with hit-list sends out
larger amount of scans; the signal-to-noise ratio of the ob-
servation data in this experiment is higher than what used
in the original Code Red experiment.
In this simulation run, the hit-list worm infects 1% and
2% of vulnerable population at time 45 and 69 minutes, re-
spectively. Fig. 9(b) shows that the estimate has already
stabilized with only small oscillation by 69 minutes. There-
fore, the WMC can still detect the presence of the hit-list
worm when it infects only 1% to 2% of vulnerable popula-
tion.
6.4 Slammer Simulation and Early Warning