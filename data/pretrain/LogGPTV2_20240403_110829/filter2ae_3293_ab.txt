    {
        return json_encode($this->toArray(), $options);
    }
    public function toArray(): array
    {
        $data = array_merge($this->data, $this->relation);
        foreach ($data as $key => $val)
        $item[$key] = $this->getAttr($key);
    }
    // vendor/topthink/think-orm/src/model/concern/Attribute.php
    public function getAttr(string $name)
    {
        return $this->getValue($name, $value, $relation);
    }
    protected function getValue(string $name, $value, bool $relation = false)
    {
        $closure = $this->withAttr[$fieldName];
        $value = $closure($value, $this->data);
    }
这样一跳完整的利用链就出来。
### 5.另一条利用起点
利用起点挖掘的时候发现还存在其他起点。
`vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php`
需要满足`$this->autosave`
为false，进入`save`函数，发现并没有实现什么功能，参考网上师傅分析的思路，`AbstractCache`类的子类有没有实现该函数：
进入到`vendor/topthink/framework/src/think/filesystem/CacheStore.php`，发现了`save`
方法：
看到可控的`$this->store`可以触发任意类的`set`方法只要找到任意类存在危险操作的`set`
方法即可利用。`$this->key`可控，`$this->expire`可控。
跟进下`$this->getForStorage`：
`$this->cache`可控，`$this->complete` 可控，因此`$contents`可控，只不过经过一次json编码，但是不影响目的。
寻找一处存在危险行为的`set` 方法：
`vendor/topthink/framework/src/think/cache/driver/File.php`：
    public function set($name, $value, $expire = null): bool
    {
        $this->writeTimes++;
        if (is_null($expire)) {
            $expire = $this->options['expire'];
        }
        $expire   = $this->getExpireTime($expire);
        $filename = $this->getCacheKey($name);
        $dir = dirname($filename);
        if (!is_dir($dir)) {
            try {
                mkdir($dir, 0755, true);
            } catch (\Exception $e) {
                // 创建失败
            }
        }
        $data = $this->serialize($value);
        if ($this->options['data_compress'] && function_exists('gzcompress')) {
            //数据压缩
            $data = gzcompress($data, 3);
        }
        $data   = "\n" . $data;
        $result = file_put_contents($filename, $data);
        if ($result) {
            clearstatcache();
            return true;
        }
        return false;
    }
分析`set`方法，跟踪下几个重要的函数：
    $filename = $this->getCacheKey($name);
    public function getCacheKey(string $name): string
    {
        $name = hash($this->options['hash_type'], $name);
        if ($this->options['cache_subdir']) {
            // 使用子目录
            $name = substr($name, 0, 2) . DIRECTORY_SEPARATOR . substr($name, 2);
        }
        if ($this->options['prefix']) {
            $name = $this->options['prefix'] . DIRECTORY_SEPARATOR . $name;
        }
        return $this->options['path'] . $name . '.php';
    }
`$this->options` 可控，所以`getCacheKey` 返回的值完全可控。
    $data = $this->serialize($value);
    protected function serialize($data): string
    {
        if (is_numeric($data)) {
            return (string) $data;
        }
        $serialize = $this->options['serialize'][0] ?? "\Opis\Closure\serialize";
        return $serialize($data);
    }
`$this->options['serialize'][0]`可控，`$serialize`可控，`$data`
为我们传入`set`函数的`$value`，也就是`$this->store->set($this->key, $contents,
$this->expire);` 中的`$content`，是可控的。只不过此时`$data` 经过json编码。
不难发现这里我们可以构造动态代码执行，测试下这个过程（本地实验是在windows下所以利用`&`或者`||`，linux下直接利用反引号即可。
    "\"||dir||\""];
    $cachedProperties = array_flip([
        'path', 'dirname', 'basename', 'extension', 'filename',
        'size', 'mimetype', 'visibility', 'timestamp', 'type',
    ]);
    foreach ($contents as $path => $object) {
        if (is_array($object)) {
            $contents[$path] = array_intersect_key($object, $cachedProperties);
        }
    }
    $contents = json_encode($contents);
    $options = ["system"];
    $data = $contents;
    var_dump($data);
    $serialize = $options[0];
    $serialize($data);
梳理下思路：
    // vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php
    // abstract class AbstractCache 抽象类
    // protected $cache = [];
    // protected $complete = [];
    public function __destruct()
    {
        if (! $this->autosave) { //$this->autosave=false
            $this->save();
        }
    }
    // vendor/topthink/framework/src/think/filesystem/CacheStore.php
    //use League\Flysystem\Cached\Storage\AbstractCache;
    // class CacheStore
    // protected $key;
    // protected $expire;
    public function save()
    {
        $contents = $this->getForStorage();
        $this->store->set($this->key, $contents, $this->expire);
    }//$this->store = new File();
    // vendor/topthink/framework/src/think/cache/driver/File.php
    // // use think\cache\Driver;
    // class File extends Driver
    public function set($name, $value, $expire = null): bool
    {
    $data = $this->serialize($value);
    }
    // vendor/topthink/framework/src/think/cache/Driver.php
    // abstract class Driver
    // protected $options = [];
    protected function serialize($data): string
    {
        $serialize = $this->options['serialize'][0];
        return $serialize($data);//命令执行点
        }
还没完 ，继续分析`set` 方法：
    $data   = "\n" . $data;
    $result = file_put_contents($filename, $data);
发现还存在一个任意文件写入的点，只不过存在一个`死亡exit`，CTF中常见的一个点，利用p牛的php://filter协议的base64编码很轻松就能绕过。前面提到过`$filename`可控，`$data`
也可控，所以可以getshell。
### 6.漏洞利用
PS：这里只梳理触发的过程，防止不必要的麻烦，不放出POC，具体参数在分析过程中都提到了。
#### 利用链一
`vendor/topthink/think-orm/src/Model.php`
入口在`Model` 类的`__destruct`方法，但是此类为抽象类无法实例化，找到了它的子类`Pivot`类
`vendor/topthink/think-orm/src/model/Pivot.php`
以实例化`Pivot`类为起点
然后给有关参数赋值，满足一定条件层层触发：
`$this->save` > `$this->updateData` > `$this->checkAllowFields` >
`$this->db()`
在`$this->db()`中字符串拼接，触发`__toString`
`vendor/topthink/think-orm/src/model/concern/Conversion.php`
触发了`Conversion` 类的`__toString`，`Conversion` 类为Trait类，在`Model` 类中利用，只需赋值然后触发：
`$this->toJson` > `$this->toArray()` 然后进入到`Attribute`类的 `getAttr`函数
`vendor/topthink/think-orm/src/model/concern/Attribute.php` 为Trait类，在`Model`
类中利用
`getAttr` > `$this->getValue`
    $closure = $this->withAttr[$fieldName];
    $value   = $closure($value, $this->data);
动态函数执行。
#### 利用链二
`vendor/league/flysystem-cached-adapter/src/Storage/AbstractCache.php`
入口为`AbstractCache`类的`__destruct` 方法 该类为抽象类找到其子类`CacheStore`
`vendor/topthink/framework/src/think/filesystem/CacheStore.php`
进入子类的`$this->save` 调用任意类的`set`函数：
    $this->store->set($this->key, $contents, $this->expire);
调用`File`类 `vendor/topthink/framework/src/think/cache/driver/File.php`
`$this->serialize` 然后命令执行：
`vendor/topthink/framework/src/think/cache/Driver.php`
`Driver`类为抽象类，在`File`类 中有调用
    return $serialize($data);
执行命令。
#### 利用链三
前部分和利用链二一样，只是在最后getshell的方法不同，利用`File`类任意文件写入shell
    $data   = "\n" . $data;
    $result = file_put_contents($filename, $data);
## 思路总结
### 反序列化利用链基础挖掘思路
先找到入口文件，然后再层层跟进，找到代码执行点等危险操作。
特别注意魔法函数、任意类和函数的调用、以及子类等的综合分析
构造POC注意复用类和抽象类的问题：
发现类是Trait类，Trait类PHP 5.4.0开始引入的一种代码复用技术，是为解决PHP单继承而准备的一种代码复用机制，无法通过 `trait`
自身来实例化，需要找到复用它的类来利用。
抽象类也不能实例化，需要找到子类普通类来实例化。
再就是ThinkPHP命名空间的问题：
命名空间基础可以参考php文档，参照文档很好理解三种引用方式，文档中将命名空间与文件系统作类比：
>   1. 非限定名称（不包含前缀的类名称）
>
> 如 _$a=new foo();_ 或 _foo::staticmethod();_ 。如果当前命名空间是 _currentnamespace_
> ，foo 将被解析为 _currentnamespace\foo_ 。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo
> 会被解析为 _foo_ 。
>
>   2. 限定名称 （包含前缀的名称）
>
> 如 _$a = new subnamespace\foo();_ 或 _subnamespace\foo::staticmethod();_
> 。如果当前的命名空间是 _currentnamespace_ ，则 foo 会被解析为
> _currentnamespace\subnamespace\foo_ 。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo
> 会被解析为 _subnamespace\foo_ 。
>
>   3. 完全限定名称（包含了全局前缀操作符的名称）
>
> 如 _$a = new \currentnamespace\foo();_ 或
> _\currentnamespace\foo::staticmethod();_ 。在这种情况下，foo 总是被解析为代码中的文字名(literal
> name) _currentnamespace\foo_ 。
>
>
TinkPHP采用命名空间，那么我们构造POC的时候也应利用命名空间的方法调用不同类和函数，构造POC就是在一个文件中定义多个命名空间，文档中也有说明。有两种方式：简单组合语法和大括号语法
简单组合语法：
不推荐这种方法。
大括号语法：
构造POC的最后还会用到全局非命名空间：
> 将全局的非命名空间中的代码与命名空间中的代码组合在一起，只能使用大括号形式的语法。全局代码必须用一个不带名称的 namespace 语句加上大括号括起来
     xxx = $v;
        echo serialize($s);
    }
    ?>
挖掘利用链真好玩，phpstorm真香。
## 参考
[挖掘暗藏ThinkPHP中的反序列利用链](https://blog.riskivy.com/挖掘暗藏thinkphp中的反序列利用链/)  
[ThinkPHP6.X反序列化利用链](https://xz.aliyun.com/t/6479)  
[ThinkPHP 6.0.x反序列化(二)](https://nikoeurus.github.io/2019/12/03/ThinkPHP
6.0.x反序列化\(二)/)  
[PHP手册-命名空间](https://www.php.net/manual/zh/language.namespaces.php)