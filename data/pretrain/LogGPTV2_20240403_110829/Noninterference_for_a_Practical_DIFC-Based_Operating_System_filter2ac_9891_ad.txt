i.g!(t, {t
TAGMGR ˆ
+}) →
O∪{t−},
ˆ
T ∪{t}
(cid:3)
NEWTAG0 ˆ
O,
T = choose :CHOOSET − ˆ
T
ˆ
(cid:2)
(cid:4)
(cid:4)
∀i
(cid:2)
i.g ?
κ
(create tag, None) →
choose!(S, I, O)?t →
i.g!(t, {t
, t
TAGMGR ˆ
O,
+}) →
(cid:3)
ˆ
T ∪{t}
−
The DUALPRIVS subprocess gives a user process Ui access to the
shared capabilities in ˆO. On input Oi, it returns ¯Di, the set of tags
for which process i has dual privilege. DUALPRIVS is formulated as
66
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
below to prevent user processes from enumerating the contents of ˆO.
Since there are no tags t such that {t−, t+} ⊆ ˆO, the process must
privately own at least one privilege for t to get dual privilege for it.
Thus, DUALPRIVS does not alert a process to the existence of any
tags it did not already know of:
DUALPRIVS ˆ
O,
T =
ˆ
(cid:4)
(cid:4)
∀i
(cid:2)
i.g?(dual privs, Oi) →
−
i
) ∩ (O
+
∪ ˆO
(cid:3)
+
i.g!((O
i
TAGMGR ˆ
O,
ˆ
T
∪ ˆO
−
)) →
Finally, the behavior of CHECK+ has already been hinted at.
Recall this subprocess checks to see if the supplied set of tags is
globally addable:
CHECK+ ˆ
O,
T =
ˆ
And similarly:
CHECK- ˆ
O,
T =
ˆ
(cid:4)(cid:4)
∀i
(cid:4)
(cid:4)
∀i
+
(cid:2)
i.g?(check+, L) →
(if L ⊆ ˆO
then i.g!True
else i.g!False) →
TAGMGR ˆ
O,
(cid:3)
ˆ
T
−
(cid:2)
i.g?(check-, L) →
(if L ⊆ ˆO
then i.g!True
else i.g!False) →
TAGMGR ˆ
O,
(cid:3)
ˆ
T
2) The Process Manager (PROCMGR): The main job of the pro-
cess manager is to allocate process identiﬁers when kernel processes
call fork. We assume a large space of process identiﬁers, P. The
process manager keeps track of subset ˆP ⊆ P to account for which
of those processes identiﬁers have already been used. In then allocates
from P − ˆP .
G. High Level System Deﬁnition
The overall system SYS is an interleaving of all the processes
speciﬁed. Recall that P is the set of all possible process IDs. The
user-half of the system is:
UPROCS = (cid:3)
j∈P
Uj
The kernel processes are:4
(cid:2)(cid:2)
KS = (cid:3)
j∈P
j:
K (cid:7)
{j.q}
(cid:3)
QUEUES
(cid:3)
\ αQUEUES
(1)
Adding in the helper process gives the complete kernel:
SWITCH
\ αSWITCH
(cid:3)
(cid:3)
(cid:2)
KS (cid:7)
(cid:2)
P.c
KERNEL1 (cid:7)
(cid:2)
P.g
KERNEL2 (cid:7)
P.p
TAGMGR
\ αTAGMGR
(cid:3)
PROCMGR0
\ αPROCMGR0
KERNEL1 =
KERNEL2 =
KERNEL =
Finally:
SYS = UPROCS (cid:7)
P.s
KERNEL
This assembly of kernel process makes extensive use of the CSP
hiding operator (“\”). That is, the combined process SYS does not
show direct evidence of internal state transitions such as: communica-
tions between any i:K and the switch; communications with the tag
manager; communications with the process manager; etc. In fact the
only events that remain visible are the workings of the user processes
Ui and their system calls given by i.s ?
. By implication,
κ
kernels that implement the Flume model should hide the system’s
inner workings from unprivileged users (which is indeed the case for
the Flume implementation). In practical terms, the CSP model for
SYS shows what a non-root Unix user might see if examining his
processes with the strace utility.
and i.s !
κ
PROCMGR ˆ
P = PM-FORK ˆ
P
| PM-GETPID ˆ
P
| PM-EXIT ˆ
P
V. NONINTERFERENCE
To answer the fork operation, the process manager picks an unused
process ID (j) for the child, gives birth to the child (j:K) with the
message j.b!(S, I, O), and returns child’s process ID to the parent:
(cid:2)
P
∀i
P =choose : CHOOSEP− ˆ
PM-FORK ˆ
(cid:4)
(cid:2)
(cid:4)
i.p?(S, I, O, fork) →
choose!(S, I, O)?j →
j.b!(S, I, O) → i.p!(j) →
PROCMGR ˆ
(cid:3)
P ∪{j}
Trivially:
PM-GETPID =
(cid:4)
(cid:4)
∀i
(cid:2)
i.p?(getpid)!i → PROCMGR
(cid:3)
Kernel processes notify the process manager of their exits, which
are handled as no-ops:
PM-EXIT =
(cid:4)
(cid:4)
∀i
(cid:2)
i.p?(exit) → PROCMGR
(cid:3)
A ﬁnal task for the process manager is to initialize the system,
launching the ﬁrst kernel process. This process runs with special
process ID init, off-limits to other processes. Thus:
PROCMGR0 = init.b!({}, T , {}) → PROCMGRP−{init}
A mature deﬁnition in the literature for models like Flume’s is
noninterference. Informally [17]:
One group of users, using a certain set of commands, is
noninterfering with another group of users if what the ﬁrst
group does with those commands has no effect on what the
second group of users can see.
In terms of Flume, select any export-protection tag t, a process p with
t ∈ Sp, and a process q with t /∈ Sq. Noninterference means that
p’s execution path should be entirely independent of q’s. If p could
somehow inﬂuence q, then it could reveal to q information tagged
with t, violating the export-protection policy.
A. Deﬁnition
We use Ryan and Schneider’s deﬁnition of noninterference [18],
where process equivalence follows the stable failures model [19],
[20]. This deﬁnition considers all possible pairs of traces for S that
vary only by elements in the high alphabet (i.e., they are equal
when projected to low). For each pair of traces, two experiments
are considered: advancing S over the elements in left trace, and
advancing S over the elements in the right trace. The two resulting
processes must look equivalent from a “low” perspective. Formally:
See Appendix B for a description of the QUEUES process, which
is mostly an implementation detail.
4Notation: As per standard CSP, αK denotes the “alphabet” of process K.
Also, P.c (cid:2) {p.c | p ∈ P}
67
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
not in that policy [21]. The most relevant deﬁnition is that of Bossi
et al., which partitions the space of symbols into three sets —
high, low, and declassify — and adjusts deﬁnitions in the CCS/SPA
process algebra accordingly [22]. These extensions are not directly
applicable in our setting, since Flume processes can dynamically
transition between high, low and declassify states by creating new
tags, receiving capabilities, changing labels, and dropping capabilities
(all of the six transitions are possible).
To accommodate Flume’s model we present a new deﬁnition,
whose key distinction is to consider declassiﬁcation orthogonally to
secrecy. That is, at any given time, each process can be either high
or low (determined by whether t ∈ S) and either declassify or non-
declassify (determined by whether t− ∈ O). We deﬁne a new set
of symbols MIDt that emanate from or are received by declassiﬁer
processes. MIDt has the property that MIDt and HIt need not be
disjoint, nor do MIDt and LOt:
MIDt (cid:2)
(cid:5)
(cid:5)
i.b.(S, I, O, . . . ) | t
i.s.(S, I, O, . . . ) | t
− ∈ O
− ∈ O
(cid:6)
(cid:6)
∪
Next, consider all pairs of traces that differ only in high non-
declassify elements, and are therefore equivalent when projected to
LOt ∪ MIDt. Again, two experiments are performed, advancing S
over the left and right traces. The two resulting processes must look
equivalent from a low, non-declassify perspective. The ﬁnal deﬁnition
captures the notion that high, non-declassifying processes cannot
interfere with low, non-declassifying processes. If a high process
wishes to inﬂuence a low process, it must communicate through a
declassiﬁer process.
Deﬁnition 4 (Noninterference with declassiﬁcation). For a CSP
process S, alphabets LO and MID contained in αS, the predicate
NIDMID
LO (S) is true iff
∀tr,tr(cid:2) ∈ traces(S) :
tr (cid:3) (LO ∪ MID) = tr(cid:2) (cid:3) (LO ∪ MID) ⇒
SF(cid:4)S/tr(cid:5) (cid:3) (LO − MID) = SF(cid:4)S/tr(cid:2)(cid:5) (cid:3) (LO − MID) .
Note that this extended deﬁnition is equivalent to the standard
deﬁnition if MID = {}, i.e., if declassiﬁcation is disallowed. We
conjecture an “unwound” version of this deﬁnition is equivalent to
Bossi et al.’s DP BNDC if HIt and MIDt are disjoint, but we defer
the proof to future work.
B. Allocation of Global Identiﬁers
The model presented in Section IV is almost fully-speciﬁed, with
an important exception: the process CHOOSE:
CHOOSEY = ?(S, I) → (cid:2)
y∈Y
(!y) → STOP
The “internal (nondeterministic) choice” operator ((cid:15)) implies that
the model requires further reﬁnement. The question becomes: how to
allocate tags and process identiﬁers?