    例如，以下输出显示了 [*testguest*]{.emphasis} 虚拟机的配置，并确认
    002.004 USB 闪存磁盘设备已被添加。
    ``` literallayout
    # virsh dumpxml testguest
    [...]
    [...]
    ```
-   运行虚拟机并测试该设备是否存在并正常工作。
:::
::: itemizedlist
**其他资源**
-   `man virt-xml`{.literal} 命令
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#modifying-devices-attached-to-virtual-machines_managing-virtual-devices}修改附加到虚拟机的设备 {.title}
:::
您可以通过编辑附加虚拟设备的配置来更改虚拟机的功能。例如，如果您想要优化虚拟机的性能，您可以更改其虚拟
CPU 型号以更好地与主机的 CPU 匹配。
以下流程提供了使用命令行界面(CLI)修改虚拟设备的常规说明。附加到虚拟机的一些设备，如磁盘和
NIC，也可以使用 [RHEL 9 web
控制台](#managing-virtual-machines-in-the-web-console_configuring-and-managing-virtualization.html "第 8 章 在 web 控制台中管理虚拟机"){.link}进行修改。
::: itemizedlist
**先决条件**
-   获取您要附加到虚拟机的设备所需的选项。要查看特定设备的可用选项，请使用
    `virt-xml --device=?`{.literal} 命令。例如：
:::
``` literallayout
# virt-xml --network=?
--network options:
[...]
address.unit
boot_order
clearxml
driver_name
[...]
```
::: itemizedlist
-   [**可选：**]{.strong}使用 `virsh dumpxml vm-name`{.literal}
    将输出发送到文件来备份虚拟机的 XML 配置。例如，以下命令将
    [*Motoko*]{.emphasis} 虚拟机的配置备份为 `motoko.xml`{.literal}
    文件：
:::
``` literallayout
# virsh dumpxml Motoko > motoko.xml
# cat motoko.xml
  Motoko
  ede29304-fe0c-4ca4-abcd-d246481acd18
  [...]
```
::: orderedlist
**步骤**
1.  使用 `virt-xml --edit`{.literal} 命令，包括设备的定义和所需选项：
    例如，以下可清除关闭的 [*testguest*]{.emphasis} 虚拟机的
    [*\*]{.emphasis} 配置，并将其设置为
    [*host-model*]{.emphasis}：
    ``` literallayout
    # virt-xml testguest --edit --cpu host-model,clearxml=yes
    Domain 'testguest' defined successfully.
    ```
:::
::: title
**验证**
:::
要校验设备已被修改，请执行以下任一操作：
::: itemizedlist
-   运行虚拟机并测试该设备是否存在并反映了所做的修改。
-   使用 `virsh dumpxml`{.literal} 命令并查看是否在虚拟机 XML
    配置中修改了设备的 XML 定义。
    例如,以下输出显示了 [*testguest*]{.emphasis} 虚拟机的 配置，并确认
    CPU 模式已被配置为 [*host-model*]{.emphasis}。
    ``` literallayout
    # virsh dumpxml testguest
    [...]
    [...]
    ```
:::
::: itemizedlist
**故障排除**
-   如果删除设备导致您的虚拟机无法引导，使用 `virsh define`{.literal}
    工具通过重新载入之前备份的 XML 配置文件来恢复 XML 配置。
    ``` literallayout
    # virsh define testguest.xml
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
对于虚拟机的 XML 配置的小更改，您可以使用 `virsh edit`{.literal} 命令 -
例如
`virsh edit testguest`{.literal}。但是，不要使用这个方法进行更广泛的更改，因为它可能会以阻止虚拟机引导的方式破坏配置。
:::
::: itemizedlist
**其他资源**
-   `man virt-xml`{.literal} 命令
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#removing-devices-from-virtual-machines_managing-virtual-devices}从虚拟机中删除设备 {.title}
:::
您可以通过删除虚拟设备来更改虚拟机(VM)的功能。例如，如果不再需要，您可以从其中一个虚拟机中删除虚拟磁盘设备。
以下步骤演示了如何使用命令行界面(CLI)从虚拟机(VM)中删除虚拟设备。还可
[使用 RHEL 9 web
控制台](#managing-virtual-machines-in-the-web-console_configuring-and-managing-virtualization.html "第 8 章 在 web 控制台中管理虚拟机"){.link}从虚拟机中删除一些设备，如磁盘或
NIC。
::: itemizedlist
**先决条件**
-   [**可选：**]{.strong}使用 `virsh dumpxml vm-name`{.literal}
    将输出发送到文件来备份虚拟机的 XML 配置。例如，以下命令将
    [*Motoko*]{.emphasis} 虚拟机的配置备份为 `motoko.xml`{.literal}
    文件：
:::
``` literallayout
# virsh dumpxml Motoko > motoko.xml
# cat motoko.xml
  Motoko
  ede29304-fe0c-4ca4-abcd-d246481acd18
  [...]
```
::: orderedlist
**步骤**
1.  使用 `virt-xml --remove-device`{.literal}
    命令，包括设备的定义。例如：
    ::: itemizedlist
    -   以下会在运行的 [*testguest*]{.emphasis}
        虚拟机关闭后，从其中删除标记为 [*vdb*]{.emphasis} 的存储设备：
        ``` literallayout
        # virt-xml testguest --remove-device --disk target=vdb
        Domain 'testguest' defined successfully.
        Changes will take effect after the domain is fully powered off.
        ```
    -   以下命令会立即从运行的 [*testguest2*]{.emphasis} 虚拟机中删除
        USB 闪存驱动器设备：
        ``` literallayout
        # virt-xml testguest2 --remove-device --update --hostdev type=usb
        Device hotunplug successful.
        Domain 'testguest2' defined successfully.
        ```
    :::
:::
::: itemizedlist
**故障排除**
-   如果删除设备导致您的虚拟机无法引导，使用 `virsh define`{.literal}
    工具通过重新载入之前备份的 XML 配置文件来恢复 XML 配置。
    ``` literallayout
    # virsh define testguest.xml
    ```
:::
::: itemizedlist
**其他资源**
-   `man virt-xml`{.literal} 命令
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#types-of-virtual-devices_managing-virtual-devices}虚拟设备类型 {.title}
:::
RHEL 9 中的虚拟化可显示可附加到虚拟机的几种不同类型的虚拟设备：
::: variablelist
[模拟设备]{.term}
:   模拟设备是广泛使用的物理设备的软件实现。为物理设备设计的驱动程序还与模拟设备兼容。因此可非常灵活地使用模拟设备。
    但是，由于他们需要严格模拟特定类型的硬件，与相应物理设备或更优化的虚拟设备相比，模拟设备的性能损失可能会显著降低。
    支持以下模拟设备类型：
    ::: itemizedlist
    -   虚拟 CPU(vCPU)，有大量可用的 CPU
        型号。模拟的性能影响很大程度上取决于主机 CPU 和模拟的 vCPU
        之间的区别。
    -   模拟系统组件，如 PCI 总线控制器。
    -   模拟存储控制器，如 SATA、SCSI 甚至 IDE。
    -   模拟声音设备，如 ICH9、ICH6 或 AC97。
    -   模拟图形卡，如 VGA 卡。
    -   模拟网络设备，如 rtl8139。
    :::
[半虚拟设备]{.term}
:   半虚拟（Paravirtualization）提供了向虚拟机公开虚拟设备的速度。半虚拟设备公开专用于虚拟机使用的接口，因此可显著提高设备的性能。RHEL
    9 为虚拟机提供半虚拟设备，使用 [*virtio*]{.emphasis} API
    作为管理程序和虚拟机之间的层。这个方法的缺陷在于它需要在客户端操作系统中使用特定的设备驱动程序。
    建议您尽可能为虚拟机使用半虚拟设备而不是模拟设备，特别是当它们运行大量
    I/O 的应用程序时。半虚拟设备减少 I/O 延迟并增加 I/O
    吞吐量，在某些情况下可使其非常接近裸机性能。其它半虚拟设备还会在不能使用的虚拟机中添加功能。
    支持以下半虚拟设备类型：
    ::: itemizedlist
    -   半虚拟设备(`virtio-net`{.literal})。
    -   半虚拟化存储控制器：
        ::: itemizedlist
        -   `virtio-blk`{.literal} - 提供块设备模拟。
        -   `virtio-scsi`{.literal} - 提供更完整的 SCSI 模拟。
        :::
    -   半虚拟时钟。
    -   半虚拟串行设备(`virtio-serial`{.literal})。
    -   气球（balloon）设备(`virtio-balloon`{.literal})用于在虚拟机及其主机之间动态分配内存。
    -   半虚拟随机数字生成器(`virtio-rng`{.literal})。
    :::
[物理共享设备]{.term}
:   某些硬件平台可让虚拟机直接访问各种硬件设备和组件。这个过程被称为[*设备分配*]{.emphasis}或者[*透传（passthrough）*]{.emphasis}。
    以这种方式连接后，物理设备的某些方面可直接供虚拟机使用，因为它们是物理计算机。这为虚拟机中使用的设备提供了出众的性能。但是，物理附加到虚拟机的设备对主机不可用，也不能迁移。
    然而，一些设备可以在多个虚拟机间[*共享*]{.emphasis}。例如，一个物理设备在某些情况下可以提供多个[*介质设备*]{.emphasis}，然后将其分配给不同的虚拟机。
    支持以下 passthrough 设备类型：
:::
::: itemizedlist
-   USB、PCI 和 SCSI 透传 -
    直接向虚拟机公开通用行业标准总线，以便将其特定功能提供给客户机软件。
-   单根 I/O 虚拟化(SR-IOV)- 一个规范，允许对 PCI Express
    资源进行硬件强制隔离。这使得单个物理 PCI 资源分区成虚拟 PCI
    功能更加安全且高效。它通常用于网络接口卡(NIC)。
-   N_Port ID 虚拟化(NPIV)-
    一个光纤通道技术，可与多个虚拟端口共享单一物理主机总线适配器(HBA)。
-   GPU 和 vGPU - 特定图形或计算工作负载的加速器。有些 GPU
    可以直接附加到虚拟机，而某些类型还提供共享底层物理硬件的虚拟
    GPU(vGPU)的功能。
:::
:::
::: section
::: titlepage
# []{#managing-virtual-devices_configuring-and-managing-virtualization.html#managing-virtual-usb-devices_managing-virtual-devices}管理虚拟 USB 设备 {.title}
:::
在使用虚拟机时，您可以访问和控制 USB 设备，如闪存驱动器或 web
摄像机（附加到主机系统）。在这种情况下，主机系统会将设备的控制权传递给虚拟机。这也被称为
USB-passthrough。
以下部分提供有关使用命令行的信息：
::: itemizedlist
-   [将 USB
    设备](#managing-virtual-devices_configuring-and-managing-virtualization.html#attaching-usb-devices-to-virtual-machines_managing-virtual-usb-devices "将 USB 设备附加到虚拟机"){.link}附加到虚拟机