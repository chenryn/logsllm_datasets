# 二、处理 Docker 数据
曾经，容器用于无状态工作负载，这些工作负载可以纵向扩展、快速扩展，并在不影响工作负载的情况下从一个位置移动到另一个位置。无状态工作负载限制了您可以运行的容器类型，禁止您运行除存储在基本映像中的项目之外的任何内容。
在本章中，我们将涵盖以下主题:
*   为什么需要持久数据
*   Docker 卷
*   Docker 绑定安装
*   tmpfs 挂载 Docker
我们开始吧！
# 技术要求
本章没有任何技术要求。
如果您想使用本章中的示例创建卷，可以使用我们在 [*第 1 章*](01.html#_idTextAnchor018)*Docker 和 Container Essentials* 中创建的 Docker 主机。我们将在本章中用作示例的卷在以后的章节中不需要。
您可以从第 1 章*Docker 和 Containers Essentials* 访问代码来创建 Docker 主机，方法是访问以下 GitHub 存储库:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# 为什么需要持久数据
让我们考虑一个示例用例，其中您可能想要从一个容器向一个持久位置写入数据。
假设您有一个系统，要求您部署一个 **MySQL** 数据库，该数据库由运行在 **NGINX** 上的基于网络的应用作为前端。使用标准的`docker run`命令启动应用的两个容器。你和用户一起做一些初始测试，他们确认一切都按预期进行。当涉及到添加记录、查询记录、编辑和删除时，用户是成功的——这些都工作正常。容器运行几天后，您会收到一封来自安全部门的电子邮件，告诉所有用户所有 MySQL 服务器都需要尽快部署新的补丁来解决安全漏洞。
您可以快速创建一个包含最新补丁的新 MySQL 映像，并将其推送到您的容器注册表中。通过与用户一起工作，您可以决定部署新容器的时间，并通过执行以下操作开始该过程:
*   停止运行容器。
*   使用与上一个映像使用的容器名称运行新映像。为此，您需要使用`docker rm`命令移除当前容器。
*   启动新的 MySQL 容器。
容器启动后，您登录以验证 MySQL 是否正在运行，并确认修补程序已经应用。接下来，您登录到应用并在数据库中搜索记录，然后收到一个“未找到记录”错误。你会觉得这很奇怪，因为系统已经运行了几天了。要进一步排除故障，您可以直接登录数据库来检查数据库的运行状况，并发现服务器上没有数据库。
你的数据库怎么了？为什么数据库服务器似乎已被清除并重新初始化？您知道系统在过去的几天里一直在工作，一切都在按预期运行，也就是说，直到您下载了一个新的 MySQL 映像并启动它来代替原始容器。
回想一下我们在 [*第 1 章*](01.html#_idTextAnchor018)*Docker 和 Container Essentials* 中的短暂讨论，容器的可写层是短暂的，当容器被移除时，写入其中的所有数据都将丢失，即使您启动了一个同名的容器。当您移除容器以重新使用名称时，包含数据库的容器层被删除。当新的容器启动时，它创建了一个新的容器层，当 MySQL 启动时，它没有看到它的任何基本文件，并创建了一个新的、完全初始化的 MySQL 实例。
当然，您不希望每次需要部署新版本的数据库服务器时都丢失数据库。由于容器层是短暂的，您需要将您的数据库存储在基础层之外的一些东西上，这些东西将在映像升级之间保持不变。到目前为止，我们一直告诉您容器是短暂的，那么您如何配置您的容器来保存数据呢？
幸运的是，Docker 包括使用两种方法向容器添加持久数据的能力:
*   Docker 卷
*   Docker 绑定安装
还有第三种选择使用主机的内存提供存储，称为 **tmpfs** 。这种类型的装载不会通过容器重启、Docker 重启或主机重启而持久化。它仅用作在高速随机存取存储器中临时存储数据的位置，并且是真正短暂的。虽然它不提供持久性，但是在一些特定的用例中，选择 tmpfs 可能是有益的。
当需要运行需要持久数据的容器时，应该选择哪个选项？卷和绑定装载的功能类似，将文件存储在本地主机文件系统上，为容器提供持久性。最终的决定归结为理解每个选项是如何管理的，以及如果使用不当会暴露哪些数据
# Docker 卷
Docker 卷是向容器添加持久数据的首选选项。卷只不过是本地主机上使用卷装载映射到容器的目录。创建卷时，会在主机文件系统上创建一个新目录，通常在`/var/lib/docker/volumes//`下。如果您拥有主机的根访问权限，您可以像查看任何其他目录一样查看文件结构。下面的截图显示了来自 Docker 主机的`volumes`目录下的目录，该 Docker 主机使用卷运行容器:
![Figure 2.1 – Docker folder directories  ](img/Fig_2.1_B15514.jpg)
图 2.1–Docker 文件夹目录
为了在重启之间维护信息，Docker 使用 Boltdb 将密钥元数据存储在主机上的各种数据库中，Boltdb 是一个用 Go 编写的快速数据库，用于存储持久密钥值。浏览`/var/lib/docker`文件夹时，您可能会遇到两个 Boltdb 数据库:
*   `/var/lib/docker/volumes/metadata.db`:维护 Docker 卷的元数据，如名称、驱动程序、标签和选项
*   `/var/lib/docker/network/files/local-kv.db`:维护 Docker 网络的元数据
由于我们在本章中关注的是数据，因此我们将使用`metadata.db`数据库。正如您将在本章后面看到的，当您创建 Docker 卷时，您可以提供诸如名称或标签之类的选项。这些信息存储在数据库中，以保持卷的持久性。
以下是一个来自名为`webdata`的 Docker 卷的 JSON 格式的`metadata.db`示例:
```
webdata{"Name":"webdata","Driver":"local","Labels":null,"Options":null}
```
每个 Docker 卷在`/var/lib/docker/volumes`目录中都有一个目录。在每个卷文件夹中，都有一个名为`_data`的目录，其中包含容器的实际数据。
在使用带有容器的卷之前，必须先创建它。创建 Docker 卷可以使用 Docker CLI 手动完成，也可以在容器启动时由 Docker 守护程序自动完成。由于这两种方法都是由 Docker 创建的，它们由 Docker 自己拥有和管理，因此使用 Docker CLI 管理和跟踪它们非常容易。
## 使用命令行界面创建卷
要创建一个 Docker 卷，我们可以使用卷管理选项:
```
docker volume 
```
可用选项如下:
![Table 2.1 – Volume management options ](img/B15514_Table_2.1.jpg)
表 2.1–卷管理选项
要创建新卷，请使用`create`选项:
```
docker volume create 
```
执行`create`后，会看到创建的卷名。如果您没有提供可选的卷名，Docker 将分配一个卷标识作为名称。创建卷而不提供卷名被称为匿名卷:
![Figure 2.2 – Anonymous volume output ](img/Fig_2.2_B15514.jpg)
图 2.2–匿名卷输出
当您向使用卷的主机添加其他容器时，匿名卷可能很难跟踪。因此，最好在创建时命名卷，而不是让 Docker 生成一个长的匿名卷名。
您在创建时为其提供卷名的任何卷都称为命名卷。要创建命名卷，您需要向`docker volume create`命令提供卷名:
![Figure 2.3 – Named volume output ](img/Fig_2.3_B15514.jpg)
图 2.3–命名卷输出
一旦使用任一方法创建了卷，您可以通过查看`/var/lib/docker/volumes`来验证目录是为您的卷创建的。您会发现一个目录，其卷名由`create`命令返回。
现在您已经知道如何创建卷，下一步是将其与容器一起使用。
## 在容器中安装容积
将卷装入容器的过程与命名卷或匿名卷的过程相同。我们已经讨论了使用 Docker CLI 创建卷的过程，但是没有解释如何让 Docker 自动创建卷。
在本节中，我们将解释如何让 Docker 自动创建卷并装载它。我们还将解释如何将以前创建的命名卷装入容器。
将卷装入容器时，需要向`docker start`命令提供两个选项之一。可以用来装载卷的两个选项是`--mount`或`-v`。如果您运行的是标准容器，可以使用任一选项，但`-v`是最常用的选项。
在本章的前面，我们创建了一个名为`pv-mysql-data`的卷。我们现在想用命名的卷来启动我们的 MySQL 容器，这样我们将有一个持久的数据库。要在容器中装入一个卷，您需要在启动容器时通过`-v`选项。`-v`选项需要两个参数:卷名和容器挂载点。在下面的命令示例中，您可以看到使用命名卷装载启动 MySQL 的命令。我们还添加了一些传递给容器的附加选项，特别是`-e`选项，用于设置环境变量:
```
docker run --name mysql-01 -v pv-mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-password -d mysql
```