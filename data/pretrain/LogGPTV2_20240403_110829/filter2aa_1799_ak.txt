EXPERIMENT: Viewing the IRQL
!irql debugger command. The saved IRQL rep-
resents the IRQL at the time just before the break-in to the debugger, which raises the IRQL to a 
static, meaningless value:
kd> !irql  
Debugger saved IRQL for processor 0x0 -- 0 (LOW_LEVEL)
is the processor control region (PCR), whereas its extension, the processor region control block 
(PRCB), contains the saved IRQL in the DebuggerSavedIRQL
a remote kernel debugger will raise the IRQL to HIGH_LEVEL to stop any and all asynchronous 
processor operations while the user is debugging the machine, which would cause the output 
of !irql to be meaningless. This “saved” value is thus used to indicate the IRQL right before the 
debugger is attached.  
interprocessor in-
terrupt (IPI) to request that another processor perform an action, such as dispatching a particular 
thread for execution or updating its translation look-aside buffer (TLB) cache. The system clock 
generates an interrupt at regular intervals, and the kernel responds by updating the clock and 
measuring thread execution time. The HAL provides interrupt levels for use by interrupt-driven 
software interrupts (described later in this chapter) to initiate thread scheduling and to asynchro-
Mapping interrupt vectors to IRQLs
On systems without an APIC-based architecture, the mapping between the GSIV/IRQ and the IRQL had 
to be strict. To avoid situations where the interrupt controller might think an interrupt line is of higher 
-
terrupt is not tied to its GSIV/IRQ, but rather to the interrupt vector: the upper 4 bits of the vector map 
back to the priority. Since the IDT can have up to 256 entries, this gives a space of 16 possible priorities 
(for example, vector 0x40 would be priority 4), which are the same 16 numbers that the TPR can hold, 
which map back to the same 16 IRQLs that Windows implements!
appropriate interrupt vector for the interrupt, and program the IOAPIC to use that vector for the asso-
choose an interrupt vector that maps back to that priority. These decisions are performed by the Plug 
and Play manager working in concert with a type of device driver called a bus driver, which determines 
the presence of devices on its bus (PCI, USB, and so on) and what interrupts can be assigned to a device. 
EXPERIMENT: Viewing the IRQL
!irql debugger command. The saved IRQL rep-
resents the IRQL at the time just before the break-in to the debugger, which raises the IRQL to a 
static, meaningless value:
kd> !irql 
Debugger saved IRQL for processor 0x0 -- 0 (LOW_LEVEL)
is the processor control region (PCR), whereas its extension, the processor region control block 
(PRCB), contains the saved IRQL in the DebuggerSavedIRQL
a remote kernel debugger will raise the IRQL to HIGH_LEVEL to stop any and all asynchronous 
processor operations while the user is debugging the machine, which would cause the output 
of !irql to be meaningless. This “saved” value is thus used to indicate the IRQL right before the 
debugger is attached.
interprocessor in-
terrupt (IPI) to request that another processor perform an action, such as dispatching a particular 
terrupt (IPI) to request that another processor perform an action, such as dispatching a particular 
terrupt
thread for execution or updating its translation look-aside buffer (TLB) cache. The system clock 
generates an interrupt at regular intervals, and the kernel responds by updating the clock and 
measuring thread execution time. The HAL provides interrupt levels for use by interrupt-driven 
software interrupts (described later in this chapter) to initiate thread scheduling and to asynchro-
42 
CHAPTER 8 System mechanisms
The bus driver reports this information to the Plug and Play manager, which decides—after taking into 
account the acceptable interrupt assignments for all other devices—which interrupt will be assigned to 
each device. Then it calls a Plug and Play interrupt arbiter, which maps interrupts to IRQLs. This arbiter 
is exposed by the HAL, which also works with the ACPI bus driver and the PCI bus driver to collectively 
determine the appropriate mapping. In most cases, the ultimate vector number is selected in a round-
later in this section shows how the debugger can query this information from the interrupt arbiter.
Outside of arbitered interrupt vectors associated with hardware interrupts, Windows also has a num-
Table 8-4.
TABLE 8-4 
Vector
Usage
APC interrupt
0x2F
DPC interrupt
0x30
Hypervisor interrupt
0x31-0x34
VMBus interrupt(s)
0x35
CMCI interrupt
0xCD
Thermal interrupt
0xCE
IOMMU interrupt
0xCF
DMA interrupt
0xD1
Clock timer interrupt
0xD2
Clock IPI interrupt
0xD3
Clock always on interrupt
0xD7
Reboot Interrupt
0xD8
Stub interrupt
0xD9
Test interrupt
0xDF
Spurious interrupt
0xE1
IPI interrupt
0xE2
LAPIC error interrupt
0xE3
DRS interrupt
0xF0
Watchdog interrupt
0xFB
Hypervisor HPET interrupt
0xFD
0xFE
Performance interrupt
CHAPTER 8 System mechanisms
43
Predefined IRQLs
I 
The kernel typically uses highKeBugCheckEx and mask-
ing out all interrupts or when a remote kernel debugger is attached. The profile level shares the
enabled. The performance interrupt, associated with such features as Intel Processor Trace (Intel
PT) and other hardware performance monitoring unit (PMU) capabilities, also runs at this level.
I 
Interprocessor interrupt level is used to request another processor to perform an action, such
Deferred Recovery Service (DRS) level also shares the same value and is used on x64 systems
by the Windows Hardware Error Architecture (WHEA) for performing recovery from certain
Machine Check Errors (MCE).
I 
Clock
to measure and allot CPU time to threads.
I 
The synchronization IRQL is internally used by the dispatcher and scheduler code to protect
highest level right after the device IRQLs.
I 
The device IRQLs are used to prioritize device interrupts. (See the previous section for how hard-
ware interrupt levels are mapped to IRQLs.)
I 
The corrected machine check interrupt level is used to signal the operating system after a serious
the Machine Check Error (MCE) interface.
I 
DPC/dispatch-level and APC-level interrupts are software interrupts that the kernel and device
drivers generate. (DPCs and APCs are explained in more detail later in this chapter.)
I 
The lowest IRQL, passive
thread execution takes place and all interrupts can occur.
Interrupt objects
The kernel provides a portable mechanism—a kernel control object called an interrupt object, or 
KINTERRUPT—that allows device drivers to register ISRs for their devices. An interrupt object contains 
all the information the kernel needs to associate a device ISR with a particular hardware interrupt, 
including the address of the ISR, the polarity and trigger mode of the interrupt, the IRQL at which the 
device interrupts, sharing state, the GSIV and other interrupt controller data, as well as a host of perfor-
mance statistics. 
44 
CHAPTER 8 System mechanisms
These interrupt objects are allocated from a common pool of memory, and when a device driver 
registers an interrupt (with IoConnectInterrupt or IoConnectInterruptEx), one is initialized with all the 
necessary information. Based on the number of processors eligible to receive the interrupt (which is 
indicated by the device driver when specifying the interrupt affinity
for each one—in the typical case, this means for every processor on the machine. Next, once an inter-
InterruptObject) of each eligible processor 
kernel updates the DispatchAddressKINTERRUPT data structure) to point to the function 
KiChainedDispatchInterruptListEntry
then KiInterruptDispatch is used instead.
The interrupt object also stores the IRQL associated with the interrupt so that KiInterruptDispatch or 
KiChainedDispatch can raise the IRQL to the correct level before calling the ISR and then lower the IRQL 
to the interrupt object (or any other argument for that matter) on the initial dispatch because the initial 
dispatch is done by hardware.
When an interrupt occurs, the IDT points to one of 256 copies of the KiIsrThunk function, each one 
having a different line of assembly code that pushes the interrupt vector on the kernel stack (because 
this is not provided by the processor) and then calling a shared KiIsrLinkage function, which does the 
rest of the processing. Among other things, the function builds an appropriate trap frame as explained 
-
InterruptObject array and using 
the interrupt vector on the stack as an index, dereferencing the matching pointer. On the other hand, 
value of the registry value BugCheckUnexpectedInterrupts
KeBugCheckEx, or the inter-
rupt is silently ignored, and execution is restored back to the original control point.
KiInterruptDispatchNoLock, 
which is used for interrupts that do not have an associated kernel-managed spinlock (typically used by 
drivers that want to synchronize with their ISRs), KiInterruptDispatchNoLockNoEtw for interrupts that do 
not want ETW performance tracing, and KiSpuriousDispatchNoEOI for interrupts that are not required 
to send an end-of-interrupt signal since they are spurious. 
KiInterruptDispatchNoEOI, which is used for interrupts that have programmed the APIC in 
Auto-End-of-Interrupt (Auto-EOI) mode—because the interrupt controller will send the EOI signal au-
interrupt routines take advantage of the “no-lock” dispatch code because the HAL does not require the 
kernel to synchronize with its ISR.
CHAPTER 8 System mechanisms
45
Another kernel interrupt handler is KiFloatingDispatch, which is used for interrupts that require 
ISRs might need to use these registers (such as the video card ISR performing a quick drawing opera-
tion). When connecting an interrupt, drivers can set the FloatingSave argument to TRUE, requesting 
this greatly increases interrupt latency.) Note that this is supported only on 32-bit systems.
Regardless of which dispatch routine is used, ultimately a call to the ServiceRoutine
message signaled 
interrupts (MSI), which are explained later, this is a pointer to KiInterruptMessageDispatch, which will 
then call the MessageServiceRoutine
those based on NDIS or StorPort (more on driver frameworks is explained in Chapter 6 of Part 1, “I/O 
KiInterruptDispatch
Read from device
Acknowledge-
Interrupt
Request DPC
Driver ISR
Raise IRQL
Grab Spinlock
Drop Spinlock
Lower IRQL
Dispatch
Code
KilsrLinkage
I/O APIC
Peripheral Device
Controller
CPU Interrupt
Dispatch Table
Interrupt
Object
ISR Address
Spinlock
Dispatcher
CPU KPRCB
CPU
CPU
CPU Local
 APIC
0
2
3
n
0
2
3
n
FIGURE 8-15 
46 
CHAPTER 8 System mechanisms
Associating an ISR with a particular level of interrupt is called connecting an interrupt object, and dissoci-
ating an ISR from an IDT entry is called disconnecting an interrupt object. These operations, accomplished by 
calling the kernel functions IoConnectInterruptEx and IoDisconnectInterruptEx, allow a device driver to “turn 
on” an ISR when the driver is loaded into the system and to “turn off” the ISR if the driver is unloaded.
-
dling directly with interrupt hardware (which differs among processor architectures) and from needing 
to know any details about the IDT. This kernel feature aids in creating portable device drivers because it 
-
nize the execution of the ISR with other parts of a device driver that might share data with the ISR. (See 
Chapter 6 in Part 1 for more information about how device drivers respond to interrupts.)
We also described the concept of a chained dispatch, which allows the kernel to easily call more than 
one ISR for any interrupt level. If multiple device drivers create interrupt objects and connect them 
to the same IDT entry, the KiChainedDispatch routine calls each ISR when an interrupt occurs at the 
daisy-chain
in which several devices share the same interrupt line. The chain breaks when one of the ISRs claims 
ownership for the interrupt by returning a status to the interrupt dispatcher.
If multiple devices sharing the same interrupt require service at the same time, devices not acknowl-
edged by their ISRs will interrupt the system again once the interrupt dispatcher has lowered the IRQL. 
Chaining is permitted only if all the device drivers wanting to use the same interrupt indicate to the ker-
nel that they can share the interrupt (indicated by the ShareVector
the sharing requirements of each. 
EXPERIMENT: Examining interrupt internals
Using the kernel debugger, you can view details of an interrupt object, including its IRQL, ISR 
!idt debugger command and 
check whether you can locate an entry that includes a reference to I8042KeyboardInterruptService, 
the ISR routine for the PS2 keyboard device. Alternatively, you can look for entries pointing to 
Stornvme.sys or Scsiport.sys or any other third-party driver you recognize. In a Hyper-V virtual 
device entry:
70:    fffff8045675a600 i8042prt!I8042KeyboardInterruptService (KINTERRUPT ffff8e01cbe3b280)
To view the contents of the interrupt object associated with the interrupt, you can simply click 
on the link that the debugger offers, which uses the dt command, or you can manually use the 
dx 
6: kd> dt nt!_KINTERRUPT ffff8e01cbe3b280 
+0x000 Type
: 0n22 
+0x002 Size
: 0n256 
+0x008 InterruptListEntry : _LIST_ENTRY [ 0x00000000`00000000 - 0x00000000`00000000 ]
EXPERIMENT: Examining interrupt internals
Using the kernel debugger, you can view details of an interrupt object, including its IRQL, ISR 
!idt debugger command and
check whether you can locate an entry that includes a reference to I8042KeyboardInterruptService, 
the ISR routine for the PS2 keyboard device. Alternatively, you can look for entries pointing to 
Stornvme.sys or Scsiport.sys or any other third-party driver you recognize. In a Hyper-V virtual 
device entry:
70:    fffff8045675a600 i8042prt!I8042KeyboardInterruptService (KINTERRUPT ffff8e01cbe3b280)
To view the contents of the interrupt object associated with the interrupt, you can simply click 
on the link that the debugger offers, which uses the dt command, or you can manually use the 
dx 
6: kd> dt nt!_KINTERRUPT ffff8e01cbe3b280
+0x000 Type
: 0n22
+0x002 Size
: 0n256
+0x008 InterruptListEntry : _LIST_ENTRY [ 0x00000000`00000000 - 0x00000000`00000000 ]
CHAPTER 8 System mechanisms
47
+0x018 ServiceRoutine   : 0xfffff804`65e56820  
unsigned char i8042prt!I8042KeyboardInterruptService 
+0x020 MessageServiceRoutine : (null)
+0x028 MessageIndex     : 0 
+0x030 ServiceContext   : 0xffffe50f`9dfe9040 Void 
+0x038 SpinLock
: 0 
+0x040 TickCount
: 0 
+0x048 ActualLock
: 0xffffe50f`9dfe91a0  -> 0 
+0x050 DispatchAddress  : 0xfffff804`565ca320   void  nt!KiInterruptDispatch+0 
+0x058 Vector