• (G2) {WS(z; V1)} c {WS(z; V1)}
/x])} x := e
(cid:3) {H(H
• (G3) {H(H
(cid:3)
(cid:3) ≡ H(y). Here, e[e
(cid:3)
(cid:3) (cid:11)= H in case e
H
pression obtained from e by replacing x by e
, e)}, provided
(cid:3)
/x] is the ex-
, e[e
.
(cid:3)
(cid:3)
3.2.2 Random Assignment:
Lemma 3.3. The following axioms are sound:
• (R1) {true} x
• (R2) {true} x
r← U {Indis(νx)}
r← U {H(H, e)} if e is x or is of the form
e1||x||e2, x||e2 or e1||x.
Moreover, the following preservation axioms, where we as-
sume x (cid:11)= y 3, are sound:
• (R3) {Indis(νy; V1; V2)}x
• (R4) {WS(y; V )}x
r← U{WS(y; V, x)}
r← U{Indis(νy; V1, x; V2)}
Axiom (R1) is obvious. Axiom (R2) takes advantage of the
fact that U is a large set, or more precisely that its cardinal-
ity is exponential in the security parameter, and that since
e contains the fresh generated x the probability that it has
already been submitted to H is small. Axioms (R3) and
(R4) state that the value of x cannot help an adversary in
distinguishing the value of y from a random value in (R3)
or computing its value in (R4). This is the case because the
value of x is randomly sampled.
Henceforth, we write x ∈ var(e) to state that e is x or is
of the form e1||x||e2, x||e2 or e1||x.
3.2.3 Hash Function:
Lemma 3.4. The following basic axioms are sound, when
x (cid:11)= y, and α is either a constant or a variable:
• (H1){WS(y; V ) ∧ H(H, y)}x := α ⊕ H(y)
{Indis(νx; V, x)}
• (H2){H(H, y)} x := H(y){H(H
(cid:3)
the form e1||x||e2, x||e2 or e1||x.
, e)}, if e is x or is of
• (H3){Indis(νy; V ; V
(cid:3)
{Indis(νx; V, x; V
(cid:3)
, y)} if y (cid:11)∈ V
, y) ∧ H(H, y)}x := H(y)
Axiom (H1) captures the main feature of the random oracle
model, namely that the hash function is a random function.
Hence, if an adversary cannot compute the value of y and
this latter has not been hashed yet then he cannot distin-
guish H(y) from a random value. Axiom (H2) is similar to
axiom (R2). Axiom (H3) uses the fact that the value of y
can not be queried to the hash oracle.
3By x = y we mean syntactic equality.
Lemma 3.5. The following preservation axioms are sound
provided that x (cid:11)= y and z (cid:11)= x:
• (H4) {WS(y; V ) ∧ WS(z; V ) ∧ H(H, y)}x := H(y)
{WS(z; V, x)}
var(e) ∧ x /∈ var(e)
• (H5) {H(H, e) ∧ WS(z; y)}x := H(y){H(H, e)}, if z ∈
• (H6) {Indis(νy; V1; V2, y) ∧ H(H, y)}x := H(y)
{Indis(νy; V1, x; V2, y)}, if y (cid:11)∈ V1
• (H7) {Indis(νz; V1, z; V2)∧ WS(y; V1 ∪ V2, z)∧ H(H, y)}
x := H(y){Indis(νz; V1, z, x; V2)}
The idea behind (H4) is that to the adversary the value
of x is seemingly random so that it can not help to compute
z. Axiom (H5) states that the value of e not having been
hashed yet reminds true as long as e contains a variable z
whose value is not computable out of y. (H6) and (H7) give
necessary conditions to the preservation of indistinguisha-
bility that is based on the seemingly randomness of a hash
value.
3.2.4 One-way Function:
Lemma 3.6. The following axiom is sound, when y (cid:11)∈ V ∪
{x}:
• (O1) {Indis(νy; V ; y)} x := f (y) {WS(y; V, x)}.
Axiom (O1) captures the one-wayness of f .
Lemma 3.7. The following axioms are sound when z (cid:11)= x:
• (O2) {Indis(νz; V1, z; V2, y)} x := f (y)
{Indis(νz; V1, z, x; V2)}, if z (cid:11)= y
• (O3) {WS(z; V ) ∧ Indis(νy; V, z; y)} x := f (y)
{WS(z; V, x)}
For one-way permutations, we also have the following axiom:
• (P1){Indis(νy; V1; V2, y)} x := f (y)
{Indis(νx; V1, x; V2)}, if y (cid:11)∈ V1 ∪ V2
Axiom (O2) is obvious since f (y) is given to the adversary
in the precondition and axiom (O3) follows from the fact
that y and z are independent. Axiom (P1) simply ensues
from the fact that f is a permutation.
3.2.5 The Xor operator
In the following axioms, we assume y (cid:11)= z.
Lemma 3.8. The following axiom is sound when y (cid:11)∈ V1∪
V2:
• (X1) {Indis(νy; V1, y, z; V2)}x := y ⊕ z
{Indis(νx; V1, x, z; V2)},
Moreover, we have the following axioms that are sound pro-
vided that t (cid:11)= x, y, z.
• (X2) {Indis(νt; V1, y, z; V2)}x := y ⊕ z
{Indis(νt; V1, x, y, z; V2)}
• (X3) {WS(t; V, y, z)}x := y ⊕ z{WS(t; V, y, z, x)}
To understand axiom (X1) one should consider y as a key
and think about x as the one-time pad encryption of z with
the key y. Axioms (X2) and (X3) take advantage of the fact
that is easy to compute x given y and z.
3.2.6 Concatenation:
Lemma 3.9. The following axioms are sound:
• (C1) {WS(y; V )} x := y||z {WS(x; V )}, if x (cid:11)∈ V . A
dual axiom applies for z.
• (C2) {Indis(νy; V1, y, z; V2)∧Indis(νz; V1, y, z; V2)} x :=
y||z {Indis(νx; V1; V2)}, if y, z (cid:11)∈ V1 ∪ V2
• (C3) {Indis(νt; V1, y, z; V2)}x := y||z
{Indis(νt; V1, x, y, z; V2)}, if t (cid:11)= x, y, z
• (C4) {WS(t; V, y, z)} x := y||z {WS(t; V, y, z, x)}, if
t (cid:11)= x, y, z
(C1) states that if computing a substring of x out of the
elements of V is hard, then so is computing x itself. The
idea behind (C2) is that y and z being random implies ran-
domness of x, with respect to V1 and V2. Eventually, x being
easily computable from y and z accounts for rules (C3) and
(C4).
In addition to the axioms above, we have the usual sequen-
tial composition and consequence rules of the Hoare logic.
In order to apply the consequence rule, we use entailment
(logic implication) between assertions as in Lemma 3.10.
Lemma 3.10. Let X ∈ Dist(Γ, (cid:2)H, (cid:3)) be a distribution
ensemble:
1. If X |= Indis(νx; V1; V2), V
(cid:3)
2 ).
then X |= Indis(νx; V
(cid:3)
1 ; V
1 ⊆ V1 and V
(cid:3)
2 ⊆ V1 ∪ V2
(cid:3)
2. If X |= WS(x; V
then X |= WS(x; V ).
3. If X |= Indis(νx; V1; V2 ∪ {x}) and V ⊆ V1 \ {x} then
) and V ⊆ V
(cid:3)
(cid:3)
X |= WS(x; V ).
The soundness of the Hoare Logic follows by induction from
the soundness of each axiom and soundness of the Conse-
quence and Sequential composition rules.
Proposition 3.11. The Hoare triples of Section 3.2 are
valid.
Example 3.2. We illustrate our proposition with Bellare
& Rogaway’s generic construction [5].
r← {0, 1}n0
1) r
Indis(νr; Var) ∧ H(G, r) ∧ H(H, ine||r)
2) a := f (r)
Indis(νa; Var − r) ∧ WS(r; Var − r) ∧ H(G, r)∧
H(H, ine||r)
3) g := G(r)
Indis(νa; Var − r) ∧ Indis(νg; Var − r)∧
WS(r; Var − r) ∧ H(H, ine||r)
4) b := ine ⊕ g
Indis(νa; Var − r) ∧ Indis(νb; Var − g − r)∧
WS(r; Var − r) ∧ H(H, ine||r)
5) s := ine||r
Indis(νa; Var − r − s) ∧ Indis(νb; Var − g − r − s)∧
WS(s; Var − r − s) ∧ H(H, s)
6) c := H(s)
Indis(νa; Var − r − s) ∧ Indis(νb; Var − r − g − s)∧
Indis(νc; Var − r − s)
7) oute := a||b||c
Indis(νoute; Var − a − b − c − r − g − s)
1) (R1), (R2), and (R2).
2) (P 1), (O1), (G3), and (G3).
3) (H7), (H1), (H4), and (G3).
4) (X2), (X1), (X3), and (G3).
5) (G1), (G1), (C1), and (G3).
6) (H7), (H7), and (H1).
7) (C2) twice.
3.3 Extensions
In this section, we show how our Hoare logic, and hence
our veriﬁcation procedure, can be adapted to deal with on
one hand injective partially trapdoor one-way functions and
on the other hand OW-PCA (probabilistic) functions. The
ﬁrst extension is motivated by Pointcheval’s construction
in [18] and the second one by the Rapid Enhanced-security
Asymmetric Cryptosystem Transform (REACT) [17]. For
obvious reasons, we cannot recall the deﬁnitions of the se-
curity of these functions; we explain them informally.
The ﬁrst observation we have to make is that Proposi-
tion 3.1 is too demanding in case f is not a permutation.
Therefore, we introduce a new predicate Indisf (νx; V1; V2)
whose meaning is as follows:
r←
U; (S, (cid:2)H, (f, f
X |= Indisf (νx; V1; V2) if and only if X ∼V1;V2 [u
r← X : (S{x (cid:9)→ f (u)}, (cid:2)H, (f, f
−1))].
−1))
Notice that, when f is a bijection, Indisf (νx; V1; V2) is
equivalent to Indis(νx; V1; V2) (fi can be the identity function
as in the last step of Example 3.3 and 3.4). Now, let oute, the
output of the encryption oracle, have the form a1||· ··||an
with ai = fi(xi). Then, we can prove the following:
Proposition 3.12. We consider GE a generic encryp-
tion scheme of the form ((cid:3),E (ine, oute) : c,D(ind, outd) :
c(cid:3)
If {true}c{ nV
).
Indisfi (νai; a1, . . . , an, ine)} is valid then GE
i=1
is IND-CPA.
Now, we introduce a new axiom for Indisf (νx; V1; V2) that
replaces axiom (P1) in case the one-way function f is not a
permutation:
(cid:3)
(P 1
) {Indis(νy; V1; V2, y)}
x := f (y)
{Indisf (νx; V1, x; V2)} if y (cid:11)∈ V1 ∪ V2
−1 : Z → X be such that ∀z ∈ dom(f
−1(z), y). Here f
Clearly all preservation rules can be generalized for Indisf .
Injective partially trapdoor one-way functions: In
contrast to the previous section, we do not assume f to be
a permutation. On the other hand, we demand a stronger
property than one-wayness. Let f : X × Y → Z be a func-
−1)∃y ∈
tion and let f
Y, z = f (f
−1 is a partial function. The
function f is said partially one-way, if for any given z =
f (x, y), it is computationally impossible to compute a cor-
responding x.
In order to deal with the fact that f is
now partially one-way, we add the following axioms, where
we assume x, y (cid:11)∈ V ∪ {z} and where we identify f and
(x, y) (cid:9)→ f (x||y):
(PO1) {Indis(νx; V, x, y) ∧ Indis(νy; V, x, y)}
z := f (x||y)
{ WS(x; V, z) ∧ Indisf (νz; V, z) }
The intuition behind the ﬁrst part of (PO1) is that f
guarantees one-way secrecy of the x-part of x||y. The second
part follows the same idea that (P1’).
Example 3.3. We verify Pointcheval’s transformer [18].
r← {0, 1}n0
1) r
Indis(νr; Var) ∧ H(G, r)
r← {0, 1}n0
2) s
Indis(νr; Var) ∧ Indis(νs; Var) ∧ H(G, r) ∧ H(H, ine||s)
3) w := ine||s
Indis(νr; Var) ∧ WS(w; Var − s − w) ∧ H(G, r) ∧ H(H, w)
4) h := H(w)
Indis(νr; Var − w − s) ∧ Indis(νh; Var − w − s) ∧ H(G, r)
5) a := f (r||h)
Indisf (νa; Var − r − s − w − h)
∧WS(r; Var − r − s − w − h) ∧ H(G, r)
6) b := w ⊕ G(r)
Indisf (νa; a, ine) ∧ Indis(νb; a, b, ine)
7) oute := a||b
Indisf (νa; a, ine) ∧ Indis(νb; a, b, ine)
1) (R1) and (R2); 2) (R3), (R1), (G3) and (R2); 3) (C3),
(C1), (G3), and (G3); 4) (H7), (H1), and (G3); 5) New
rule (P O1) and (G3); 6) Extension of (G1) to Indisf , and
(H1); 7) Extension of (G1) to Indisf , and (G1).
To conclude, we use the fact that Indisf (νa; a, ine) and
Indis(νb; a, b, ine) implies Indisf (νa; a, b, ine)
OW-PCA: Some constructions such as REACT are based
on probabilistic one-way functions that are diﬃcult to invert
even when the adversary has access to a plaintext checking
oracle (PC), which on input a pair (m, c), answers whether
c encrypts m. In order to deal with OW-PCA functions, we
need to strengthen the meaning of our predicates allowing
the adversary to access to the additional plaintext checking
oracle. For instance, the deﬁnition of WS(x; V ) becomes:
X |= WS(x; V ) iﬀ Pr[(S, (cid:2)H, (f, f
r← X : AP CA(S(V )) =
S(x)] is negligible, for any adversary A. Now, we have to
revisit Lemma 3.10 and the axioms that introduce WS(x; V )
in the postcondition. It is, however, easy to check that they
are valid.
−1))
Example 3.4. REACT [17]
r← {0, 1}n0
r← {0, 1}n0
1) r
Indis(νr; Var)