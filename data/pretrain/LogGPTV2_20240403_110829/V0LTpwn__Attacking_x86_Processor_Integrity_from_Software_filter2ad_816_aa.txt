title:V0LTpwn: Attacking x86 Processor Integrity from Software
author:Zijo Kenjar and
Tommaso Frassetto and
David Gens and
Michael Franz and
Ahmad-Reza Sadeghi
V0LTpwn: Attacking x86 Processor Integrity 
from Software
Zijo Kenjar and Tommaso Frassetto, Technische Universität Darmstadt; 
David Gens and Michael Franz, University of California, Irvine; 
Ahmad-Reza Sadeghi, Technische Universität Darmstadt
https://www.usenix.org/conference/usenixsecurity20/presentation/kenjar
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.V0LTpwn: Attacking x86 Processor Integrity from Software
Zijo Kenjar1, Tommaso Frassetto1, David Gens2, Michael Franz2, and Ahmad-Reza Sadeghi1
1Technical University of Darmstadt, Germany
{zijo.kenjar,tommaso.frassetto,ahmad.sadeghi}@trust.tu-darmstadt.de
2University of California, Irvine
{dgens,franz}@uci.edu
Abstract
Fault-injection attacks have been proven in the past to
be a reliable way of bypassing hardware-based security
measures, such as cryptographic hashes, privilege and
access permission enforcement, and trusted execution
environments. However, traditional fault-injection at-
tacks require physical presence, and hence, were often
considered out of scope in many real-world adversary
settings.
In this paper we show this assumption may no longer
be justiﬁed on x86. We present V0LTpwn, a novel
hardware-oriented but software-controlled attack that
aﬀects the integrity of computation in virtually any ex-
ecution mode on modern x86 processors. To the best
of our knowledge, this represents the ﬁrst attack on
the integrity of the x86 platform from software. The
key idea behind our attack is to undervolt a physical
core to force non-recoverable hardware faults. Under
a V0LTpwn attack, CPU instructions will continue to
execute with erroneous results and without crashes, al-
lowing for exploitation. In contrast to recently presented
side-channel attacks that leverage vulnerable speculative
execution, V0LTpwn is not limited to information dis-
closure, but allows adversaries to aﬀect execution, and
hence, eﬀectively breaks the integrity goals of modern
x86 platforms. In our detailed evaluation we success-
fully launch software-based attacks against Intel SGX
enclaves from a privileged process to demonstrate that
a V0LTpwn attack can successfully change the results of
computations within enclave execution across multiple
CPU revisions.
1 Introduction
Modern hardware platforms have a long history that
spans multiple decades. The need to ensure backwards
compatibility and the constant tweaking of existing de-
signs has burdened widely deployed hardware architec-
tures with legacy components that have become highly
complex, and far from ﬂawless. In the recent past, we
have seen how seemingly minor implementation bugs at
the hardware level can have a severe impact on secu-
rity [14]. Attacks such as Meltdown [36], Spectre [33],
Foreshadow [58], and RIDL [62] demonstrate that at-
tackers can exploit these bugs from software to bypass
access permissions and extract secret data.
Furthermore, we have seen that the adverse eﬀects
of hardware vulnerabilities are not limited to conﬁden-
tiality, but can also compromise integrity in principle:
the infamous Rowhammer bug [32] resulted in numer-
ous exploits [6,24,43,48,50,56,60,63,65] leveraging bit
ﬂips in ﬂawed DRAM modules, which are deployed on
practically all computer systems today. While initial
defenses have been proposed to mitigate Rowhammer
from software [5,8], ﬁxing Rowhammer bugs ultimately
requires deploying new hardware.
With recent feature sizes shrinking to single-digit
nanometer scale, semiconductor companies face the grow-
ing problem of the so-called dark silicon. At run time
large parts of the chip will have to be left powered-oﬀ,
since the billions of transistors cannot be operated within
the thermal constraints and power budget the platform
was originally designed for. This prevented hardware
designers from leveraging Dennard scaling [17,53]; conse-
quently, manufacturers have moved to more intelligent,
on-demand thermal and voltage control on recent plat-
forms. This means that critical operational aspects of
the processor can now and are increasingly controlled
from software during run time. Unfortunately, this de-
velopment comes with severe consequences for computer
security.
In 2017 Tang et al. [55] showed that the intricacies of
low-level and ﬁne-grained power management on ARM-
based mobile devices open up serious pitfalls, as they
were able to induce faults in the processor of a Nexus 6
smartphone, allowing them to bypass the isolation bound-
ary of TrustZone. So far, a similar scenario was deemed
unlikely on x86-based systems for several reasons: (i) x86-
USENIX Association
29th USENIX Security Symposium    1445
based power management traditionally does not expose
direct access to hardware regulators to software above
the BIOS level, (ii) desktops and servers are typically
not battery powered, and hence, feature less aggressive
and more coarse-grained power management, and ﬁnally
(iii) x86-based platforms deploy extensive safety measures
and implement strict architectural defenses to prevent,
detect, and recover from hardware faults at run time.
We elaborate on the diﬀerences between our work and
previous attacks in Section 8.
In this paper, we present V0LTpwn, the ﬁrst software-
controlled fault-injection attack for x86-based platforms
(together with concurrent work [38,45]). Our attack is
able to directly aﬀect processor execution regardless of
privilege level, execution mode, or hardware isolation.
As a result, V0LTpwn is also able to compromise the
integrity guarantees of Intel’s Software Guard Exten-
sions (SGX). SGX is a hardware security extension
which Intel promotes in cloud-based scenarios where
cloud providers should be considered untrusted [27].
The key idea behind our V0LTpwn attack is to un-
dervolt the physical target core that executes the victim
software (i.e., reduce its available voltage). We achieve
this by exploiting software-exposed but obscure power-
management interfaces of modern x86 platforms. We
analyze a number of CPUs of diﬀerent Intel generations
and we show that all of them are prone to fault-injection
attacks despite deploying dedicated counter measures.
In particular, all of these processors feature an elaborate
set of management and safety mechanisms collectively
called Machine-Check Architecture (MCA) [28], provid-
ing detection and fallback routines for handling critical
hardware events such as core, uncore, interconnect, bus,
parity, and cache errors.
Processors leverage a number of model-speciﬁc regis-
ters to control and report such events across diﬀerent
hardware layers. These events can then be forwarded as
machine-check exceptions to software handlers to store,
process, and react to critical failures. However, we show
that an adversary can still inject exploitable hardware
faults by carefully driving processor execution into un-
stable voltage domains. We construct a proof-of-concept
exploit in which the attacker injects such faults into a
running SGX enclave entirely from software. We analyze,
conduct, and evaluate this new attack through a number
of tests across multiple Intel CPUs.
Contrary to recent hardware-oriented attacks such
as Foreshadow [58], Spectre [33], RIDL [62] and Melt-
down [36] — which are limited to extracting information
through side channels — our attack enables an adver-
sary to manipulate enclave execution and compromise
its integrity. Through concurrent use of execution units
and by leveraging power-intensive instructions we pro-
voke resource contention which results in reliable and
reproducible faults in our tests. For this, we leverage
undocumented features, extending and customizing the
available software tools to enable detailed probing and
attacks on real-world code. Our ﬁndings show that the
deployed defenses (MCA, SGX isolation) are insuﬃcient
in practice, leaving a large number of real-world system
vulnerable to V0LTpwn.
To summarize, our contributions include the following:
• Novel attack against x86 processors: we
present V0LTpwn, the ﬁrst software-controlled fault-
injection attack for the x86 platform. Through
targeted undervolting from malicious software
V0LTpwn is able to alter computational results and
aﬀect processor execution in victim software at run
time. We introduce several new techniques, such
as identifying fault-susceptible frequency settings,
instruction patterns, and stressing the logical part-
ner core to increase temperature and resource con-
tention while undervolting.
• Real-world impact and responsible disclo-
sure: we conﬁrmed reproducible and exploitable
faults for code running within user processes, ker-
nel code, and SGX enclaves. Intel conﬁrmed our
ﬁndings and proof-of-concept attack, assigned a
CVE [57], issued an advisory [30], and released a
microcode update.
• Extensive evaluation and proof-of-concept
implementation: we implement and demonstrate
an end-to-end exploit against recent processors that
support SGX, which is designed as a completely iso-
lated and trusted execution environment in the pres-
ence of potentially malicious software running on
the platform. By undervolting the processor while
the SGX enclave runs we are able to manipulate
its execution at run time and demonstrate manip-
ulation of computation through software-induced
faults. Our results show that we are able to induce
and exploit faults on multiple processors of diﬀer-
ent micro-architectures despite extensive defensive
measures to prevent, detect, and recover from such
errors.
2 Background
In this section we explain the background information
required for the understanding of the rest of the paper.
First, we describe the principles of power management
on modern x86 processors. Second, we explain undocu-
mented software interfaces for overclocking. Third, we
discuss Intel’s Machine Check Architecture. Finally, we
brieﬂy cover the basics of Intel SGX.
1446    29th USENIX Security Symposium
USENIX Association
2.1 Dynamic Voltage and Frequency
Scaling on the x86 platform
The performance and power consumption of processors
depends on frequency and voltage settings. For diﬀer-
ent software workloads, modern processors incorporate
technologies for Dynamic Voltage and Frequency Scal-
ing (DVFS). In this context, processor vendors often
deﬁne performance states (P-states), which represent
distinct pairs of voltage level and clock frequency.
On recent Intel processors, DVFS techniques are in-
cluded in its Enhanced Intel Speedstep Technology (EIST).
EIST implements hardware control of P-states and con-
siders workload, sensor measurements, power constraints
as well as software hints when selecting P-states at run
time. For conﬁguration and hints, a software interface
is provided using Model-Speciﬁc-Registers (MSR) [26],
which require supervisor privileges. Hardware control
of P-states can be deactivated, for instance, to allow an
operating system driver to manually transition the plat-
form to a diﬀerent P-state. In Intel’s Software-Developer
Manual [26], a P-state is called a ratio, i.e., an 8-bit
value determining the frequency when multiplied with a
base clock of (typically) 100 Mhz. In this paper, we will
refer to P-states with the hexadecimal representation of
the ratio. For instance, P-state 0x20 (i.e., decimal value
32) represents a frequency of 3200 MHz.
Since the Skylake microarchitecture Intel introduced
Hardware-Controlled Performance States (HWP). HWP
oﬀers a more ﬁne-grained interface, i.e., the OS can deﬁne
operation ranges for high-performance and energy-saving
phases. In general, P-state deﬁnitions are model-speciﬁc
as the matching core voltage for a particular frequency
is deﬁned by the hardware and may also be adjusted
dynamically by the voltage regulators of the processor
at run time.
2.2 Overclocking Interfaces
Overclocking is a common operation used to maximize
processor performance on x86 processors. For the en-
thusiast market, manufacturers release custom unlocked
processor models. Paired with a suitable mainboard,
users are able to adjust settings like clock multiplier,
voltage levels and power limits via the interfaces of the
BIOS/UEFI implementation.
As a recent development, Intel has exposed traditional
BIOS features to the operating system to enable real-time
overclocking. For instance, Intel’s Extreme Tuning Util-
ity (XTU) as well as ThrottleStop allow users to adjust
overclocking settings like voltage levels without a reboot
of the system under Microsoft Windows. Reverse engi-
neering has revealed the use of MSR OC Mailbox (0x150)
by these applications. Interestingly, the oﬃcial documen-
Figure 1: MSR OC Mailbox (0x150) is used to adjust
voltage levels from software, including applications such
as Intel’s Extreme Tuning Utility (XTU) and Throt-
tleStop.
tation does not disclose this functionality. However, we
ﬁnd references in drivers [1], presentations [46] and many
mainboard manuals. We assume Intel keeps this func-
tionality undocumented, because voltage manipulation
can easily damage the hardware, and hence, requires
extreme caution when applied from software.
To the best of our knowledge, MSR OC Mail-
box (0x150) has the structure depicted in Figure 1. Bit
[63] is ﬁxed and must be set to 1 in all writes to this
MSR. Bits [42:40] represent a hardware domain which is
addressed by the command in bits [39:32]. The lower 32
bits have a variable structure and contain the command
payload. An important feature of MSR 0x150 is the
ability to modify voltages. For instance, a voltage oﬀset
can be applied to the base voltage of a P-state. We
found this feature to be available on all recent Intel pro-
cessors. The actual voltage can be changed with 5 mV
granularity. This behavior conforms to voltage regulator
speciﬁcations [49], in which the voltages requests from
the processor to the regulator unit are encoded in 5 mV
steps. We veriﬁed this experimentally. The available set
of commands appears to be dependent on the microar-
chitecture [46]. An extended description of commands
is provided in Appendix A.
2.3 Intel’s Machine-Check Architecture
Semiconductor manufacturers achieve feature sizes
within single-digit nanometer scales while continuously
decreasing power-consumption per transistor to scale up
performance of the chip. Unfortunately, this also causes
these platforms to be increasingly sensitive to environ-
mental conditions, such as heat and electro-magnetic
radiation. This means that random hardware errors are
expected given suﬃcient uptime of a running system [35].
For this reason, modern processor hardware features
a set of intricate error-handling mechanisms to detect,
correct, and potentially recover from such situations.
One of these mechanisms is the Machine-Check Archi-
tecture (MCA), which was introduced by Intel starting
with the P5 architecture. MCA continuously monitors
individual hardware elements, such as cores, caches, in-
terconnects and buses, integrated controllers, etc., in
real-time and logs and reports any hardware-level er-