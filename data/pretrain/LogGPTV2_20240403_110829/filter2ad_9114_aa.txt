## 环境
phpstudy+thinkphp5.1.20
由于thinkphp5.1以上的版本不再支持官网下载源码，需要使用composer下载，比如说下载5.1.20版本
`composer create-project --prefer-dist topthink/think tp5120`
`cd tp5120`
`vim composer.json`
把 **composer.json** 文件中 **"topthink/framework": "5.1.*"** 改为
**"topthink/framework": "5.1.20"**
执行`composer update` 即可
## 框架流程
首先，看入口文件 `/public/index.php` ，只有三行代码
    namespace think;
    // 加载基础文件
    require __DIR__ . '/../thinkphp/base.php';
    // 支持事先使用静态方法设置Request对象和Config对象
    // 执行应用并响应
    Container::get('app')->run()->send();
定义命名空间，加载基础文件，然后执行应用并响应
首先来看基础文件： `'/thinkphp/base.php'`
其作用在于注册自动加载、注册错误处理、加载默认配置
这其中比较重要的就是自动加载功能，系统调用 `Loader::register();` 方法注册自动加载，跟进该方法
    public static function register($autoload = '')
        {
            // 注册系统自动加载
            spl_autoload_register($autoload ?: 'think\\Loader::autoload', true, true);
            $rootPath = self::getRootPath();
            self::$composerPath = $rootPath . 'vendor' . DIRECTORY_SEPARATOR . 'composer' . DIRECTORY_SEPARATOR;
            // Composer自动加载支持
            ......
            // 注册命名空间定义
            ......
            // 加载类库映射文件
            ......
            // 自动加载extend目录
            ......
        }
可以看到该文件有几个部分组成
  * 注册系统自动加载
  * Composer自动加载支持
  * 注册命名空间定义
  * 加载类库映射文件
  * 自动加载extend目录
除了第一步之外，都是为自动加载时查找文件路径做准备，重点说下第一步
第一步使用了 `spl_autoload_register`
函数，这是一个自动加载函数，若是实例化一个未定义的类时就会触发该函数，然后会触发第一个参数作为指定的方法，可以看到此函数指定了
`think\Loader::autoload` 作为触发方法，继续跟进
    public static function autoload($class)
        {
            if (isset(self::$classAlias[$class])) {
                return class_alias(self::$classAlias[$class], $class);
            }
            if ($file = self::findFile($class)) {
                // Win环境严格区分大小写
                if (strpos(PHP_OS, 'WIN') !== false && pathinfo($file, PATHINFO_FILENAME) != pathinfo(realpath($file), PATHINFO_FILENAME)) {
                    return false;
                }
                __include_file($file);
                return true;
            }
        }
该函数首先判断`$class`是否在类库别名`$classAlias`中，在的话直接返回，不在的话向下执行`findFile()`，`findFile()`就是一个利用多种方式查找文件的函数，最后会返回文件的路径，未找到会返回false，之后就利用`__include_file`对文件做include包含，这就是自动包含
返回到`index.php`中，接下来就会调用`Container`的`get`方法实例化`app`类，接着调用`app`类中的`run`方法执行应用程序，存在这几个过程
### 初始化应用
设定运行信息，读取初始化配置等
    $this->initialize();
### 模块、控制器或入口绑定
默认情况下，这段函数是不执行的
    if ($this->bindModule) {
        // 模块/控制器绑定
        $this->route->bind($this->bindModule);
    } elseif ($this->config('app.auto_bind_module')) {
        // 入口自动绑定
        $name = pathinfo($this->request->baseFile(), PATHINFO_FILENAME);
        if ($name && 'index' != $name && is_dir($this->appPath . $name)) {
            $this->route->bind($name);
        }
    }
### 路由检测
调用到了`checkRoute()`和`init()`进行路由检测，这里的`routeCheck()`就是路由解析的入口，并且把解析的调度信息保存到全局Request对象中
    $dispatch = $this->dispatch;
    if (empty($dispatch)) {
        // 路由检测
        $dispatch = $this->routeCheck()->init();
    }
    // 记录当前调度信息
    $this->request->dispatch($dispatch);
### 记录路由和请求信息
调试模式下，保存路由的请求信息到日志文件中
    if ($this->appDebug) {
        $this->log('[ ROUTE ] ' . var_export($this->request->routeInfo(), true));
        $this->log('[ HEADER ] ' . var_export($this->request->header(), true));
        $this->log('[ PARAM ] ' . var_export($this->request->param(), true));
    }
### 执行路由调度 :
执行请求分派到的业务逻辑
    $this->middleware->add(function (Request $request, $next) use ($dispatch, $data) {
        return is_null($data) ? $dispatch->run() : $data;
    });
    $response = $this->middleware->dispatch($this->request);
接下来就将得到的`$response`返回
回到index.php，会在index.php中调用`Response`类的`send()`方法，将结果输出到客户端
## thinkphp传参方式
在具体分析流程前传参方式，首先介绍一下模块等参数
  * 模块 : `application\index`，这个`index`就是一个模块，负责前台相关
  * 控制器 : 在模块中的文件夹`controller`，即为控制器，负责业务逻辑
  * 操作 : 在控制器中定义的方法，比如在默认文件夹中`application\index\controller\Index.php`中就有两个方法，`index`和`hello`
  * 参数 : 就是定义的操作需要传的参数
在本文中会用到两种传参方式，其他的方式可以自行了解
  1. PATH_INFO模式 : `http://127.0.0.1/public/index.php/模块/控制器/操作/(参数名)/(参数值)...`
  2. 兼容模式 : `http://127.0.0.1/public/index.php?s=/模块/控制器/操作&(参数名)=(参数值)...`
## 路由解析过程
### 路由检测
首先在run函数的路由检测处下断点，在 `application\index\controller` 目录下新建一个test.php
接下来，我们访问 `http://127.0.0.1/public/index.php/index/Test/hello/name/world`
，返回phpstorm可以发现已经捕获到了
首先，路由检测调用到了 `routeCheck()` 方法，F7跟进看一下
    public function routeCheck()
        {
            // 检测路由缓存
            if (!$this->appDebug && $this->config->get('route_check_cache')) {
                ...
            }
            // 获取应用调度信息
            $path = $this->request->path();
            // 是否强制路由模式
            ...
            // 路由检测 返回一个Dispatch对象
            $dispatch = $this->route->check($path, $must);
            ...
            return $dispatch;
        }
该函数首先根据 `route_check_cache` 检测是否开启了路由缓存，默认情况下该配置为false， `'route_check_cache'
=> false` ，接下来到589行获取应用调度信息，利用了`Request`的`path`方法，继续跟进
    public function path()
        {
            if (is_null($this->path)) {
                $suffix   = $this->config['url_html_suffix'];
                $pathinfo = $this->pathinfo();
                if (false === $suffix) {
                    // 禁止伪静态访问
                    $this->path = $pathinfo;
                } elseif ($suffix) {
                    // 去除正常的URL后缀
                    $this->path = preg_replace('/\.(' . ltrim($suffix, '.') . ')$/i', '', $pathinfo);
                } else {
                    // 允许任何后缀访问
                    $this->path = preg_replace('/\.' . $this->ext() . '$/i', '', $pathinfo);
                }
            }
            return $this->path;
        }
继续跳转到 `pathinfo()` 方法
    public function pathinfo()
        {
            if (is_null($this->pathinfo)) {
                if (isset($_GET[$this->config['var_pathinfo']])) {
                    // 判断URL里面是否有兼容模式参数
                    $pathinfo = $_GET[$this->config['var_pathinfo']];
                    unset($_GET[$this->config['var_pathinfo']]);
                } elseif ($this->isCli()) {
                    // CLI模式下 index.php module/controller/action/params/...
                    $pathinfo = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : '';
                } elseif ('cli-server' == PHP_SAPI) {
                    $pathinfo = strpos($this->server('REQUEST_URI'), '?') ? strstr($this->server('REQUEST_URI'), '?', true) : $this->server('REQUEST_URI');
                } elseif ($this->server('PATH_INFO')) {
                    $pathinfo = $this->server('PATH_INFO');
                }
                // 分析PATHINFO信息
                if (!isset($pathinfo)) {
                    foreach ($this->config['pathinfo_fetch'] as $type) {
                        if ($this->server($type)) {
                            $pathinfo = (0 === strpos($this->server($type), $this->server('SCRIPT_NAME'))) ?
                            substr($this->server($type), strlen($this->server('SCRIPT_NAME'))) : $this->server($type);
                            break;
                        }
                    }
                }
                $this->pathinfo = empty($pathinfo) || '/' == $pathinfo ? '' : ltrim($pathinfo, '/');
            }
            return $this->pathinfo;
        }
该方法依据请求方式跳转到不同的if判断中，由于我们利用的时pathinfo模式，所以跳转到最后一个elseif中来判断，由 `$this->server`
获取参数，接下来对$pathinfo进行分析，之后会去掉$pathinfo中最左侧的 `/` 返回，此时
`$pathinfo=index/Test/hello/name/world`
下面返回到path方法，将其去除正常url后缀后赋值给返回值$path
跳转回`routeCheck()`方法，接下来程序会执行到路由检测部分，调用route的`check()`方法，把$path作为$url参数传入，继续跟进
    public function check($url, $must = false)
        {
            // 自动检测域名路由
            $domain = $this->checkDomain();
            $url    = str_replace($this->config['pathinfo_depr'], '|', $url);
            $completeMatch = $this->config['route_complete_match'];