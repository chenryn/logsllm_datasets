The evaluation shows consistent ﬁndings. As shown in
Fig. 6(b), CacheS identiﬁes four suspicious memory ac-
cesses in mpi montmul (two pointer dereferences at line 6
of Fig. 6(a) are optimized into one memory load at line 2
of Fig. 6(b)). By checking the constraint solver, we ﬁnd a
pair of program secrets that affect the value of B and further
lead to the access of different cache lines at the ﬁrst memory
access (the solution is given in Fig. 6(c)).
We then instrument the program private key with the
solver provided solutions in Fig. 6(c) and observe the run-
time cache access within gem5. This secret pair is generated
by analyzing the ﬁrst leakage memory access, but since vari-
ants of B may affect the following memory trafﬁc as well, we
report the cache status at all the suspicious memory accesses
in mpi montmul. We note that while CacheS analyzes 32-
bit binaries, at this step we compile the instrumented source
code into 64-bit binaries since the simulated OS throws some
exceptions when running 32-bit code. After compilation, the
ﬁve leakage points in the source code actually produce three
memory load instructions in the 64-bit assembly code. Cache
behaviors, including the accessed cache line and the corre-
sponding cache status, are recorded at these points. Fig. 6(d)
presents the simulation results. Due to the limited space,
we provide only the ﬁrst seven records (59568 records in to-
tal). Program counters 0x40770a, 0x407744 and 0x40775d
represent the three identiﬁed memory loads of information
leaks. It is easy to see that different cache lines are accessed
at each point. Additionally, a timing window of one cache
hit vs. miss is found (this memory access represents a table
lookup in the ﬁrst element of B->p).
8.4
Information Leaks in the Modular Expo-
nentiation Algorithm
Both RSA and ElGamal algorithms employ the modular ex-
ponentiation algorithm for decryption. Existing research
has reported that such an algorithm is vulnerable to cache-
based timing channel attacks [77, 52]. Here, we evaluate
the corresponding implementations in OpenSSL, Libgcrypt,
and mbedTLS. As reported in Table 2, CacheS successfully
revealed a much larger leakage surface, including 80 (54 un-
known and 26 known) information leaks, from our test cases.
Information Leaks in Libgcrypt. A large number of leak-
age points are reported from the sliding window-based mod-
ular exponentiation implementation in Libgcrypt 1.6.1. Ex-
isting research has pointed out the direct usages of (window-
size) secret keys as exploitable [52], and CacheS pinpointed
this issue. In addition to the 4 direct usages of secrets, we fur-
ther uncovered 36 leaks due to the propagation of secret in-
formation ﬂows, as CacheS keeps track of both variable-level
and memory loading based information ﬂows (Sec. 6.2).
While previous trace-based analysis also keeps track of
information ﬂow propagation (i.e., CacheD [77]), CacheS
still outperforms CacheD because of its program-wide anal-
ysis. With the help of CacheD’s authors, we conﬁrmed that
CacheS can detect all 22 leaks reported in CacheD [77], and
further reveals 18 additional points.
Information Leaks
in mbedTLS. CacheS has also
identiﬁed leaks in another commonly used cryptosys-
leaks
tem, mbedTLS. Appendix E presents
found in the mbedTLS case.
function
mbedtls mpi exp mod implements a sliding window-
In general,
several
USENIX Association
28th USENIX Security Symposium    667
Figure 6: Case study of information leaks in mbedTLS. The constraint solver ﬁnds a pair of secrets (k and k’) which leads to
the access of different cache lines at line 2 of (b).
based modular exponentiation, which leads to secret-
dependent memory accesses (precomputed table lookup).
The table lookup statement (line 10) does not generate a
leak point since it only gets a pointer referring to an array
element, however, further memory dereferences on the ac-
quired pointer reveal 4 direct usages of secrets (discussed in
Sec. 8.3). We also ﬁnd 25 leaks due to the propagation of
secret information ﬂows (Sec. 6.2).
We note that mbedTLS uses RSA exponent blinding as a
countermeasure [43], which practically introduces noise and
mitigates cache side channels (but is still exploitable with
enough collisions or if the attacker can derive the exponent
from a single trace). We leave it as future work to model
the feasibility of exploitations, given the identiﬁed leaks and
also taking program randomness (e.g., exponent blinding)
into consideration.
Information Leaks in OpenSSL. Information leaks in
OpenSSL are within or derived from functions counting the
length of a secret array. Fig. 7 presents a function that
contains 4 memory accesses which engender information
leaks: BIGNUM maintains an array of 32-bit elements, and
BN num bits counts the number of bits within a given big
number. Since the last element of the array may be less than
32 bits, a lookup table is used to determine the exact bits in
the last element of the secret array (function call at line 7
in Fig. 7). By storing secrets within a big number structure,
table queries in BN num bits word could lead to secret-
dependent memory accesses.
While CacheD [77] ﬂags only one information leak (line
26 in Fig. 7) covered by its execution trace, CacheS detects
more leaks. As shown in Fig. 7, four table queries are an-
alyzed by CacheS, and all of them are ﬂagged as leaks. In
addition to these four direct usages of secrets, CacheS also
ﬁnds one more leak in OpenSSL 1.0.2k, and two in OpenSSL
1.0.2f, both are due to the propagation of secret information
ﬂows.
False Positive. In addition to the issues in Appendix C that
have been conﬁrmed and ﬁxed by the OpenSSL developers,
we also ﬁnd one false positive when analyzing OpenSSL
1.0.2f. To defeat side channel attacks against the precom-
puted table lookup, OpenSSL forces the cache access at the
table lookup point in a constant order [33]. This constant
order table lookup is demonstrated with a sample C code in
Appendix D. The base address of the lookup table is aligned
to zero the least-signiﬁcant bits, and scatter and gather meth-
ods are employed to mimic the Fortran-style memory alloca-
tion to access the table in a constant order and remove timing
channels.
Ideally, with the base address being aligned, the table ac-
cess should not produce an information leak regarding the
cache line access model (but scatter-gather implementation
can also be exploited with cache bank attacks [87]. As dis-
cussed in Sec. 5, our cache access constraint can be fur-
ther extended to capture cache bank side channels). How-
ever, since public information (e.g., base address of the ta-
ble) is abstracted as a symbol p in CacheS, the alignment is
not modeled. Therefore, CacheS incorrectly ﬂags the table
lookup as a leak point, which leads to a false positive.
8.5 Flag Secret-Dependent Control Flow
To reduce false negatives and also show the versatility of
CacheS, we extend CacheS to search for secret-dependent
branch conditions.
Similar to the detection of secret-
dependent memory accesses (Sec. 5), we check each condi-
tional jump and ﬂag secret-dependent jump conditions. The
conditional jump in REIL IR is jcc, and the value of its ﬁrst
operand speciﬁes whether the jump is taken or not. We trans-
668    28th USENIX Security Symposium
USENIX Association
1.2.3.4.5.6.7.8.9.10.11.12. 13.14. 15. 1.2.3.4.5.6.7.8.9.10.11.(a) Source code.staticintmpi_montmul(mbedtlsmpi*A,constmbedtls_mpi*B,constmbedtls_mpi∗N, mbedtlsmpi_uintmm,constmbedtlsmpi∗T) {...m=(B->nn: n;...for(i= 0; ip[0]) * mm;mpi_mul_hlp(m, B->p, d, u0);...} ...}moveax, [ebp+ 0xc]movedx, [eax+ 0x4]...moveax, [eax+ 0x8]moveax, [eax]imuleax, [ebp-0x10]add     eax, edximuleax, [ebp+ 0x14]mov[ebp-0xc], eaxmoveax, [ebp+ 0xc]moveax, [eax+ 0x8](b) Assembly instructions.(c) Solution of mem load at line 2 of (b).k= 0x40000000 k’ = 0xc0000002  1.2.40770a: 2199023255240 hit407744: 2199023255240 hit 40775d: 101018 hit 407744: 2199023255240 hit 40775d: 101018 hit 407744: 2199023255240 hit 40775d: 101018 hit40770a: 2199023255246 hit407744: 2199023255246 hit 40775d: 101046 miss407744: 2199023255246 hit 40775d: 101046 hit 407744: 2199023255246 hit 40775d: 101046 hit(d) Hardware simulation results with k (the upper part) and k’ (the lower part).Vulnerable program points and corresponding memory access instructions are backgroundedwith blue. Secret-carrying variablesand registersare markedwithred;Bis a secret-dependent address (line 2 in figure (a)).Mem	addrAccessedCache	line		CachestatusTimingwindowlate each secret-dependent condition c into an SMT formula
f and solve the following constraint:
f (cid:54)= f [s(cid:48)
i/si]
(2)
where a satisﬁable solution indicates that different secrets
lead to the execution of different branches. In addition, since
REIL IR creates additional jcc statements to model certain
x86 instructions (e.g., the shift arithmetic right sar and bit
scan forward bsf), we rule out jcc statements if their cor-
responding x86 instructions are not conditional jumps.
In
this research we do not take jcc into consideration if it does
not represent an x86 conditional jump, since in general the
silicon implementations of x86 instructions on mainstream
CPUs have ﬁxed latency [2].
Table 6 presents the evaluation results, including the in-
formation leakage units produced by the same metric used in
Table 2. While secret-dependent control ﬂow is absent in all
the AES cases, CacheS pinpoints multiple instances in every
RSA/ElGamal implementation. We further manually stud-
ied each of them, and we report that besides 4 false positives
(explained later in this section), all the other cases represent
secret-dependent branch conditions. In the example given in
Appendix F, the value of bits, which is derived from the
private key, is used to construct several conditions. Similar
patterns are also found in other cases.
False Negative. Bernstein et al. exploited the secret-
dependent control ﬂows in Libgcrypt 1.7.6 [17], where the
leading and trailing zeros of a window-size secret are used
to compute a branch condition. While the corresponding
vulnerable branches also exist in Libgcrypt 1.7.3, they are
not detected by CacheS. In general, 32-bit x86 opcode bsr
and bsf are used to count the leading and trailing zeros of a
given operand, and both opcodes are lifted into a while loop
implemented by a jcc statement (for the deﬁnition of their
semantics, see the bsr and bsf sections of the x86 devel-
oper manual [3]). Consider a proof-of-concept pseudo-code
below:
1
2
3
4
5
6
where the lifted while loop entails implicit information ﬂow,
which is not supported (see Sec. 6.2 for the information ﬂow
policy). In addition, although we disable the checking of jcc
regarding Constraint 2 if its corresponding x86 instruction is
not a conditional jump (like the bsr and bsf cases), we re-
port that once enabling the checking of such jcc statements,
secret-dependent control ﬂows (e.g., line 3 of the pseudo-
code) are detected for both cases.
False Positive. We ﬁnd 4 false positives when analyzing
Libgcrypt 1.6.1. This is due to the imprecise modeling of
interprocedural call sites. Consider a sample pseudo-code
below:
1
2
t = 0;
while (getBit(t, src) == 0) //src could be a secret
{
}
return t; // the number of trailing zeros in src
foo(k, p) { // k is {(cid:62)} and p is {12}
if (...) {
t += 1;
Table 6: Secret-dependent control branches. We found no
issue in the AES implementations. A summary of all leakage
points can be found at the extended version of this paper [76].
conditions
Implementation Algorithm # of Secret-dependent False
4
Libgcrypt 1.6.1 RSA/ElGamal
0
Libgcrypt 1.7.3 RSA/ElGamal
0
mbedTLS 2.5.1
0
OpenSSL 1.0.2f RSA/ElGamal
0
OpenSSL 1.0.2k RSA/ElGamal
4
21
6
8
12
12
59
RSA
Total
9
4
4
5
5
27
Information
Positive Leakage Unit
3
4
5
6
7
8
9
10
} else {
r = bar(k); // r is {(cid:62)}
r = bar(p); // r is {(cid:62)} since (cid:104) f oo,{12}(cid:105) ⊆ (cid:104) f oo,{(cid:62)}(cid:105)
if (r) // false positive
...
}
bar(i){return i;}
where foo performs two function calls to bar with differ-
ent parameters. The summary of the ﬁrst call (line 3) is
represented as ((cid:104) f oo,{(cid:62)}(cid:105),{(cid:62)}), where (cid:104) f oo,{(cid:62)}(cid:105) forms
the calling context (as explained in Sec. 6.3, a calling con-
text includes the caller name and the input), and the second
{(cid:62)} is the function call output. Then the following function
call (line 5) with (cid:104) f oo,{12}(cid:105) as the calling context will di-
rectly return {(cid:62)} and cause a false positive (line 6) according
to the recorded summary, since (cid:104) f oo,{12}(cid:105) ⊆ (cid:104) f oo,{(cid:62)}(cid:105).
Our study shows that such sound albeit imprecise modeling
caused 4 false positives when analyzing Libgcrypt 1.6.1.
9 Discussion
Soundness. Our abstraction is sound (see our technical re-
port for the proof [76]), but the CacheS implementation is
soundy [53] as it roots the same assumption as previous tech-
niques that aim to ﬁnd bugs rather than performing rigorous
veriﬁcation [55, 84, 54].
CacheS adopts a lightweight but unsound memory model
implementation; program state representations are optimized
to reduce the memory usage and speed up the analysis. There
is a line of research aiming to deliver a (nearly) sound mem-
ory model when analyzing x86 assembly [13, 64, 65, 21].
We leave it to future work to explore practical methods to
improve CacheS with a sound model without undermining
the strength of CacheS in terms of scalability and precision.
Reduce False Positives. Our abstract domain SAS models
public program information with free public symbols. To
further improve the analysis precision and eliminate false
positives, such as in the case discussed in Sec. 8.4, one ap-
proach is to perform a ﬁner-grained modeling of public pro-
gram information. To this end, so-called “lazy abstraction”
can be adopted to postpone abstraction until necessary [71].
In contrast to our current approach where analyses are per-
formed directly over SAS, lazy abstraction provides a ﬂexi-
ble abstraction strategy on demand, where different program
points can exhibit distinct levels of precision. Well-selected
program points for lazy abstraction are critical to achieve
scalability. For example, abstraction can be performed at ev-
USENIX Association
28th USENIX Security Symposium    669
ery loop merge point or whenever abstract formulas become
too large and exhaust the memory resource. We leave it to
future work to explore practical strategies for lazy abstrac-
tion.
10 Related Work
Timing Attacks. Kocher’s seminal paper [44] identiﬁes tim-
ing attacks as a potential threat to crypto system. Later work
ﬁnds that timing information reveals the victim program’s
usage of data/instruction cache, leading to efﬁcient timing
attacks against real world cryptography software, including
AES [37, 60, 74, 16, 20, 6], DES [75], RSA [7, 62, 86], El-
Gamal [90], and ECDSA [15]. Recent work shows that such
cache-based timing attacks are possible on emerging plat-
forms, such as cloud computing, VM environments, trusted
computing environments, and mobile platforms [66, 85, 83,
89, 52, 49, 56, 69, 24, 36].
Detect Cache-Based Timing Channels. CacheAudit lever-
ages static analysis techniques (i.e., abstract interpretation)
to reason information leakage due to cache side chan-
nels [32, 33]. CacheS outperforms CacheAudit due to our
novel abstract domain. CacheAudit uses relational and nu-
merical abstract domains to only infer the information leak-
age bound, while our abstract domain models semantics with
symbolic formulas, pinpoints information leaks with con-
straint solving, and enables the generation of counter ex-
amples to promote debugging.
In addition, we propose a
principled way to improve the scalability by tracking secrets
and public information with different granularities. This
enables a context-sensitive interprocedural analysis of real-
world cryptosystems for which CacheAudit is not capable
of handling. Brotzman et al. [22] propose a static symbolic
reasoning technique that also covers multiple program paths.
However, their analysis lacks abstraction of public values,
and can analyze only small-size programs.
In contract, dynamic analysis-based approaches, such as
taint analysis or trace-based symbolic execution, are inca-