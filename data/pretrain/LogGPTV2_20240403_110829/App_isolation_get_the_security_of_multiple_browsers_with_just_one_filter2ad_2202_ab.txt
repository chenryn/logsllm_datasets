the integrity of Browser A is maintained because untrusted
content in Browser B cannot infect Browser A, preventing
attacks such as reﬂected XSS.
These rules prevent the “cross-origin” versions of the at-
tacks listed in Table 1. We classify attacks as “cross-origin”
if the attack is launched from a diﬀerent origin than the vic-
tim origin, as opposed to “same-origin” attacks (such as one
Facebook page trying to mount a CSRF attack on another
Facebook page). Using a separate browser does not prevent
the same-origin versions of these attacks, nor same-origin
only attacks such as stored XSS, because the attacker resides
in the same browser as the victim.
We provide a more thorough analysis of the cross-origin
attacks from Table 1 below. We assume the attacker wishes to
attack a victim web site to which the user has authenticated
and can lure the user into visiting a malicious web site on a
diﬀerent origin. Furthermore, we assume that the user uses
separate browsers according to the rules above.
• Reﬂected XSS – In a reﬂected XSS attack, the at-
tacker lures the user into visiting a malicious URL
inside the non-sensitive browser. This URL will allow
the attacker’s script to execute inside the victim’s ori-
gin. However, because the user is authenticated to the
victim site in the sensitive browser, the attacker’s script
will not have access to the user’s session.
• Session ﬁxation – In a session ﬁxation attack, the
attacker includes a known session ID inside a victim
URL, then lures the user into visiting this URL and
tricks her into logging in. Once the user is logged in,
the attacker can freely impersonate the user with the
shared session ID. However, because the user only types
her password into the sensitive browser, the attack will
fail.
• Cross-origin resource import – In a cross origin
resource import attack, the attacker’s page requests a
sensitive resource from the victim’s origin as a script
or style sheet. If the user were authenticated to the
victim site in the same browser, this request can leak
conﬁdential information to the attacker. However, the
user is authenticated instead in the sensitive browser,
thereby foiling the attack.
• Click-jacking – Click-jacking attacks overlay a trans-
parent iframe from a victim page over a part of the
attacker’s page where the user is likely to click. This
aims to trick the user into clicking somewhere on the
Cross-origin Attacks
Reﬂected XSS
Session Fixation
Cross-Origin Resource Import
Click-jacking
CSRF
Visited Link Sniﬃng
Cache Timing Attack
Rendering Engine Hi-jacking
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Entry-point Restriction State Isolation Separate browser
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 1: Cross-origin attacks mitigated by entry-point restriction, state isolation, and using separate browsers.
Same-origin attacks, such as stored XSS, are not mitigated.
victim’s page (e.g., the delete account button) with-
out realizing it. Because the user is authenticated in
the sensitive browser, clicking on the transparent vic-
tim iframe in the non-sensitive browser will cause no
damage.
• Cross-site request forgery – In a traditional CSRF
attack, the adversary makes subresource requests within
a page she owns in an attempt to change the user’s state
on the victim’s server. This attack succeeds because
the user’s credentials are attached to the attacker’s
subresource request. However, because the user au-
thenticates only in the sensitive browser, the malicious
request will not have a cookie attached, rendering it
harmless.
• Visited link sniﬃng – The attacker’s web site might
attempt to sniﬀ the user’s browsing history by drawing
visited links in a diﬀerent color or style than unvisited
ones, and then using JavaScript or CSS to discover
which have been visited. Although a possible mitiga-
tion has been proposed and adopted by several major
browsers [20], new attacks have been discovered that
can detect browsing history despite the defense [21].
However, if the user uses separate browsers, these
browsers have diﬀerent history databases, so a web
site in the non-sensitive browser is unable to discern
the browsing history of the sensitive browser.
• Cache timing attack – Similar to visited link sniﬃng
attacks, an attacker can measure the time to load a
victim resource to determine if the user has visited
it [4, 5]. Diﬀerent browsers have diﬀerent caches for
their web resources, so web sites in the non-sensitive
browser cannot detect cache hits or misses in the sensi-
tive browser.
• Rendering engine hi-jacking – A powerful attacker
might exploit a vulnerability in the browser’s rendering
engine to hi-jack its execution. For browsers with
a single rendering engine instance (e.g., Firefox and
Safari), this would let the attacker access all the user’s
state, such as the victim site’s cookies and page contents.
These attacks still apply to browsers with multiple
rendering engine instances, if they rely on the rendering
engine to enforce the Same-Origin Policy (e.g., Chrome
and IE8). However, if the user logged in to the victim
site with a diﬀerent browser, the victim’s cookies and
sensitive pages will reside in an entirely diﬀerent OS
process. Assuming the exploited rendering engine is
sandboxed, the attacker’s exploit is unable to access
this process.
3.2 Site Isolation in a Single Browser
As shown in the previous section, using a dedicated browser
to visit certain sites mitigates a signiﬁcant number of web
attacks. This observation raises a question: which properties
of browsing with a single browser make it vulnerable to these
attacks? We believe the answer to this question can be
summarized in three points:
1. Malicious sites are free to make requests to vulnerable
parts of victim’s site.
2. Malicious sites can make requests that have access to
the victim’s cookies and session data.
3. Malicious sites can exploit the rendering engine for
direct access to in-memory state and to stored data
from the victim site.
Our key observation is that these abilities are not funda-
mental ﬂaws of browsing with a single browser but rather
weaknesses of current browsers. We believe that for many
types of web sites, it is possible to simulate the behavior of
multiple browsers with a single browser by solving each of
these weaknesses. These changes come with a compatibil-
ity cost, however, because benign third-party sites are also
prevented from accessing the user’s cookies. We evaluate
the complexity that diﬀerent types of sites face for adopting
these changes in Section 7.2.
In the next three sections, we introduce mechanisms for
removing these limitations in a single browser. First, we pro-
vide a means for web sites to opt in to this protection if they
accept the compatibility implications. Second, we prevent
untrusted third parties from making requests to vulnerable
parts of these web sites. Third, we isolate the persistent and
in-memory state of these sites from other sites. Because our
approach works best with “app-like” web sites that contain
sensitive user data and few cross-site interactions, we refer
to this approach as app isolation.
4.
IDENTIFYING ISOLATED WEB APPS
App isolation can provide a web site with the security ben-
eﬁts of running in a dedicated browser, but it comes at some
compatibility cost. Isolating cookies and in-memory state
not only prevents malicious web sites from compromising
sensitive data, it can also hinder legitimate web sites from
sharing information. For example, Facebook Connect[22] lets
web sites access visitors’ identifying information via Face-
book, which would not work if Facebook was isolated in
a separate browser. To remain compatible with web sites
that desire this sharing, we employ an opt-in policy that lets
web developers decide whether to isolate their site or web
application from the rest of the browser.
We must choose the opt-in mechanism carefully to avoid
introducing new security concerns, and we must consider
the granularity at which the isolation should take eﬀect. In
this section, we ﬁrst show the consequences of an inadequate
opt-in mechanism using HTTP headers. Then, we describe a
viable origin-wide approach with host-meta, and reﬁne it to
support sub-origin level web applications with manifest ﬁles.
Bootstrapping with HTTP headers.
As a straw man, we ﬁrst consider identifying an isolated
app using a custom HTTP header (e.g., X-App-Isolation: 1).
If the browser receives this header on an HTTP response,
the browser treats all future responses from the origin as
belonging to the isolated app.
The primary disadvantage of this approach is that it does
not verify that the given response has the privilege to speak
for the entire origin. This lack of veriﬁcation lets owners
of portions of an origin (e.g., foo.com/~username/) opt the
entire origin in to app isolation. A malicious sub-domain
owner can use this mechanism to prevent desirable sharing on
other parts of the origin, or he can misconﬁgure the app (e.g.,
listing a non-existent entry point) to perform a denial-of-
service attack. Worse, bootstrapping with a custom HTTP
response header might not enforce the policy for the initial
request sent to the server, opening a window of vulnerability.
Bootstrapping with Host-meta.
To avoid attacks that grant the privileges of the entire
origin to each resource, the browser can instead bootstrap app
isolation using a ﬁle at a well-known location that can only be
accessed by the legitimate owner of the origin. The host-meta
mechanism is designed for exactly this reason [23]. With host-
meta, the owner of the origin creates an XML ﬁle containing
app isolation meta data located at /.well-known/host-meta.
This meta data can include conﬁguration information, such
as a list of acceptable entry points. Because host-meta should
be controllable only by the legitimate owner of the origin,
an adversary controlling only a directory will not be able to
inﬂuence the app isolation policy for the entire origin.
It is essential to retrieve host-meta information through a
secure channel such as HTTPS. Otherwise, an active network
attacker can replace the host-meta entries with bogus URLs,
allowing the attacker to conduct denial-of-service or other
misconﬁguration attacks.
One downside of bootstrapping with host-meta is that is
has poor performance because an additional round trip is
required to fetch a resource if the host-meta ﬁle is not in the
cache.
Bootstrapping with Manifest File.
The above proposals work at the granularity of an origin.
However, it is also possible to isolate web apps at a ﬁner
granularity without violating the security concerns of “ﬁner-
grained origins” [24].
In the Chrome Web Store, web application developers
package their applications using a manifest ﬁle [25]. This
method of packaging web applications is becoming common;
for example, Mozilla’s Open Web Applications are also pack-
aged using a such ﬁle [26]. The ﬁle includes a list of URL
patterns that comprise the application, together with other
meta data such as requested permissions. The manifest ﬁle
provides extra context to the browser for how to treat the
app, allowing it to enforce policies that might break ordi-
nary web content. The Chrome Web Store also supports
“veriﬁed apps [27],” in which the manifest ﬁle’s author demon-
strates that she has control over all origins included in the
application’s URL patterns.
We use additional syntax in the manifest to let applications
in the Chrome Web Store opt in to app isolation. The URL
patterns in the manifest might or might not span an entire
origin, which would allow a site like Google Maps (e.g.,
http://www.google.com/maps) to opt into isolation features
without aﬀecting the rest of the origin. The Chrome Web
Store already provides a mechanism for verifying that the
manifest is provided by the web site author, which we leverage
to prevent a malicious manifest ﬁle from bundling attacker
URLs in the same app as a victim site.
The reason this does not run afoul of the typical security
concerns of ﬁner-grained origins is that our state isolation
eﬀectively separates the application’s pages from the rest of
the web, including non-application pages in the same origin.
Origin contamination via scripts or cookies is blocked because
an application page and a non-application page do not share
the same renderer process or cookie store.
Both origin-level isolation using host-meta and application-
level isolation using manifest ﬁles are viable opt in mecha-
nisms. We leave it to browser vendors to decide on which
method they deem appropriate. In the remainder of this
paper, we refer to the unit of isolation as an app, whether
designated as an origin or a collection of URLs in a manifest.
5. ENTRY-POINT RESTRICTION
Using multiple browsers securely requires the user to re-
frain from visiting a sensitive app at a URL that could be
constructed by an attacker. Instead, the user always visits
the app in the sensitive browser from a known starting point.
Simulating this behavior with a single browser requires an
intuitive way of visiting URLs of sensitive apps without com-
promising security. Our proposal for Entry-point Restriction
provides a way to safely transition between sensitive and
non-sensitive pages in a single browser, without altering the
user’s behavior.
In this section, we present the rules for entry-point re-
striction and discuss the challenges for selecting appropriate
entry points. Table 1 lists attacks that are prevented by
entry-point restriction.
5.1 Design
Under the entry-point restriction policy, we deﬁne an entry
point to be a landing page of an app designated by the
app’s owner. Any app may choose to opt into entry-point
restriction by providing at least one entry point.
Once an app opts into entry-point restriction, the browser
may load a resource from the app if and only if at least one
of the following statements holds true.
• The resource is requested by a page inside the app.
• The URL of the resource is a valid entry point for the
app.
on deep links to content, such as socially integrated sites
like Facebook or content-oriented sites like New York Times.
These sites will have a diﬃcult time adopting the policy,
because it is extremely diﬃcult to identify all the URLs that
legitimate sites may link to. We show in Section 7.2 that
other types of sites, such as online banks, are amenable to
these restrictions and can beneﬁt from entry-point restriction.
Sub-resource restrictions.
By default, entry-point restriction must deny sub-resources
at non-entry-point URLs from loading. This will prevent
vulnerabilities such as reﬂected XSS and CSRF; however, it
may also aﬀect legitimate web pages. For example, loading a
non-entry-point image will fail despite being typically a safe
action.
Fortunately, this usability constraint can be alleviated.
Entry-point restriction is only necessary because malicious
requests will have the user’s authentication tokens attached
to them. Section 6 describes how State Isolation can be
used to isolate these authentication tokens from sub-resource
requests. When used in conjunction with state isolation,
entry-point restriction can safely allow sub-resources at non-