• Restrictions on dynamic class loading: One important
restriction is made on dynamically loading class ﬁles:
a Java application can load application classes only
from its own Java Archive (JAR) ﬁle. This restriction
ensures that:
1. Java applications on a device cannot interfere
with each other or steal data from each other.
2. Third-party applications cannot gain access to
the private or protected components of the Java
classes that the device manufacturer or a service
provider may have provided as part of the system
applications.
2.2 MIDP Security
In the following, we present the security architecture of
MIDP 1.0 and MIDP 2.0. Although, security models in
both MIDP 1.0 and MIDP 2.0 are limited security models
(compared to J2SE/EE), MIDP 2.0 provides more security
mechanisms than those provided by MIDP 1.0. MIDP 2.0
exposes to MIDlets more capabilities of the device, and pro-
vides the security mechanisms needed to control the use of
these capabilities.
2.2.1 MIDP 1.0 Security
Application security in MIDP 1.0 is based on the Java sand-
box model. The sandbox security model provided by MIDP
1.0 (and CLDC) is different from the conventional Java
sandbox model. In fact, no Security Manager nor Security
Policies (as for J2SE/EE) are used for access control.
It is also important to note that in MIDP 1.0, MIDlet
suites are allowed to save data in persistent storage ﬁles
(called record stores). However, sharing record stores be-
tween MIDlet suites is not allowed, which means that a
MIDlet has no way to access a record store belonging to
another MIDlet. This offers a good protection of MIDlet
persistent storage.
With respect to end-to-end security, MIDP 1.0 speciﬁca-
tion does not include any cryptographic functionality. The
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
only network protocol provided in MIDP 1.0 is the HTTP
protocol. MIDlet suites are usually downloaded from the
Internet to the device without almost any protection using
HTTP or WAP. The HTTP Basic Authentication Scheme
is the only mandatory security mechanism, which is not a
strong security mechanism. Since MIDlets in MIDP 1.0
cannot be signed, the integrity or authenticity of down-
loaded applications cannot be veriﬁed.
2.2.2 MIDP 2.0 Security
The difference between MIDP 1.0 security and MIDP 2.0
security is that, in MIDP 2.0, accessing sensitive resources
(APIs and functions) is not totally prohibited.
Instead,
MIDP 2.0 controls access to protected APIs by granting
permissions to protection domains and binding each MIDlet
on the device to one protection domain. Thus one MIDlet
will be granted all permissions provided to the protection
domain that has been bound to it. A MIDlet is bound to
one protection domain according to a well deﬁned proce-
dure that allows the AMS to authenticate the origin of a
MIDlet and identify the protection domain to be bound to
this MIDlet. If one MIDlet can be authenticated, then it is
qualiﬁed as trusted, otherwise, it will be qualiﬁed as un-
trusted. MIDP 2.0 introduces the ability to share record
stores between MIDlet suites. The protection of record
stores is discussed later in this section. An important dif-
ference between the security of MIDP 1.0 and MIDP 2.0
is that MIDP 2.0 provides end-to-end security by allowing
secure networking using HTTPS protocol.
• Sensitive APIs
IN MIDP 2.0, some capabilities of the device are ex-
posed to MIDlets and are protected by permissions. Thus
a set of APIs are deﬁned to be used as interface between
MIDlets and the exposed capabilities of the device. The set
of these APIs is identiﬁed as sensitive. The sensitive APIs in
MIDP 2.0 are the ones related to networking in addition to
the PushRegistry class that allows for autimatic launching
of MIDlets.
• Permissions and Protection Domains
Access to sensitive APIs is protected by permissions. A
protection domain deﬁnes a set of permissions, and for each
permission, the protection domain deﬁnes the level of ac-
cess to the API protected by the permission. The level of
access can be either Allowed or User. The “Allowed” per-
mission means that the MIDlet can access the sensitive API
directly, whereas the “User” permission means that the user
has to approve this access. This can be with one of the fol-
lowing interaction mode [18]:
• Blanket The permission is valid for every invocation of
the protected API until the MIDlet suite is uninstalled
or the permission is changed by the user.
• Session: The permission is valid during one execu-
tion of the MIDlet (any MIDlet in the MIDlet suite).
For each execution of the MIDlet, the user must be
prompted on or before the ﬁrst invocation of the pro-
tected API.
• Oneshot: The user must be prompted for each invoca-
tion of the protected API.
In [26] which is an addendum to the MIDP 2.0 speciﬁca-
tion, protection domains are categorized into four classes,
namely, Manufacturer, Operator, Trusted third party, and
Untrusted domain.
• Granting permissions to MIDlets
A MIDlet suite (each MIDlet in the MIDlet suite) is
granted permissions by applying the following principles:
• Each MIDlet suite is bound to a protection domain.
This association depends on the degree of trust the de-
vice has for the MIDlet suite. A MIDlet suite can be
either trusted or untrusted. An untrusted MIDlet suite
is one for which the origin and the integrity of its JAR
ﬁle cannot be reliably determined by the device. MI-
Dlet suites compliant with MIDP 1.0 are considered as
untrusted in MIDP 2.0. A trusted MIDlet suite is one
for which the device can authenticate the origin and
verify that the JAR ﬁle has not been tampered with.
• A MIDlet suite can require a set of permissions by list-
ing them in two attributes of the JAD ﬁle:
1. The MIDlet-Permissions attribute lists
permissions that are vital (critical) to the execu-
tion of the MIDlet.
2. The MIDlet-Permissions-Opt attribute
lists permissions that may be needed during the
execution but the MIDlet can still run if those
permissions are not granted to it (non-critical).
The presence of these two attributes in the JAD ﬁle
allows the AMS to verify that the associated MIDlet
suite is suitable for the device before loading the full
JAR ﬁle.
• If the MIDlet-Permissions attribute is deﬁned
and the corresponding permissions set is CP, then the
set of permissions granted to the MIDlet suite is equal
to CP if CP is included in the permissions set granted
to the protection domain.
• If the MIDlet-Permissions attribute is not de-
ﬁned, then the set of permissions granted to the MI-
Dlet suite is equal to the set of permissions granted to
the protection domain.
• Trusting MIDlet Suites
The procedure for determining whether a MIDlet suite is
trusted or untrusted is device-speciﬁc. Some devices might
trust only MIDlet suites obtained from certain servers.
Other devices might support only untrusted MIDlet suites.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Others authenticate MIDlet suites using the Public Key In-
frastructure (PKI).
• Persistent Storage Security
In MIDP 2.0 a MIDlet suite can save data in a persistent
storage area. The storage unit in J2ME CLDC is the record
store. Each MIDlet suite can have one or more record
stores, these are stored on the persistent storage of the de-
vice. Record stores are identiﬁed by a unique full name,
which is a concatenation of the vendor name, the MIDlet
suite name, and the record store name. Within the same MI-
Dlet, two record stores can not have the same name. How-
ever, if they belong to two different MIDlet suites, they can
have the same name since their full names will be unique.
The actual structure of the record store on the device stor-
age consists of a header and a body. The header contains
information about the record store while the body consists
of a number of byte arrays called records, these contain the
actual data to be stored. The part of the Java platform re-
sponsible for manipulating the storage is called the Record
Management System (RMS).
For MIDP 1.0, record stores were not allowed to be
shared among MIDlet suites.
In MIDP 2.0, sharing of
record stores is allowed; the MIDlet suite that created the
record store can choose to make it shared or not. More-
over,
the sharing mode can be set to read-only or
read/write. Sharing information is stored in the header
of each record store, and the default mode of sharing is pri-
vate (no sharing).
• End-to-end Security
MIDP 2.0 speciﬁcation mandates that HTTPS be
implemented to allow secure connection with remote sites.
HTTPS implementations must provide server authentica-
tion. The Certiﬁcate authorities present in the device are
used to authenticate sites by verifying certiﬁcate chain
provided by a server.
3 Vulnerability Analysis
In this section, we present our vulnerability analysis of
the J2ME CLDC security. We start by listing the most im-
portant previously reported ﬂaws. After that, we present
the vulnerabilities discovered by our team using mainly two
principle tools. The ﬁrst relies on inspecting the reference
implementation source code, looking for possible security
related ﬂaws. The second consisted of executing black
box tests on the code (using phone emulators and actual
phones), with the purpose of ﬁnding possible attacks on the
platform.
3.1 Previously Reported Flaws
Few security ﬂaws about J2ME CLDC have been re-
ported. The most serious one is the Siemens S55 SMS ﬂaw.
Besides, several problems about the Sun’s MIDP RI have
been reported.
3.1.1 Siemens S55 SMS
In late 2003, the Phenoelit hackers group [19] has discov-
ered that the Siemens S55 phone has a vulnerability that
makes the device send SMS messages without the autho-
rization of the user. This attack can be carried out by a
malicious MIDlet that when loaded by the target user, will
send an SMS message from the target user’s system without
asking for permission. This is due to a race condition dur-
ing which the Java code can overlay the normal permission
request with an arbitrary screen display.
3.1.2 Problems on Sun’s MIDP RI
The Bug Database of Sun Microsystems contains hundreds
of problems about J2ME CLDC. However, few are related
to security. In the following we describe the problems that
we deem relevant from the security standpoint.
Permissions are necessary needed to establish a socket
connection
(socket://hostname:portnumber).
But if one runs the RI on PC where portnumber is
the application does not check for
already occupied,
permission [24].
Instead, it throws an IOException.
This is not correct because there is no need to access
native sockets if application has not enough permissions.
We investigated this problem on MIDP 2.0 RI and it
generated a ConnectionNotFoundException which means
that permission checking were bypassed.
A problem has been reported on RSA algorithm imple-
mentation claiming that the big number division function
checks the numerator instead of the divisor for zero [23].
On the available MIDP 2.0 RI, we could not check this prob-
lem because the RSA algorithm implementation is provided
only in object ﬁles.
The return value of midpInitializeMemory()
method called in main() is never checked [22]. When
memory allocation fails, system will crash without any way
to ﬁgure out the reason of that crash.
In the sequel, we present the approach we followed to
discover vulnerabilities in J2ME CLDC, then we list the
vulnerabilities we were able to ﬁnd. They are organized
according to the components in which they were discovered
(e.g. storage system, KVM, etc.).
3.2 Our Approach
Efforts in software security analysis, (i.e., developing
techniques to assess security of software and to avoid se-
curity ﬂaws) fall into: Vulnerability analysis, static code
analysis, security testing, formal veriﬁcation, and security
evaluation standard methodologies. Vulnerability analysis
mainly refers to efforts directed towards classiﬁcation of se-
curity bugs. A good example for this is the work done by
Krsul [10] and Bishop [1]. The ultimate goal is to develop
tools that would detect vulnerabilities in software based on
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
the characteristics of the various “types” of vulnerabilities.
The term “vulnerability analysis” is also sometimes used
meaning the analysis of a software system (using various
techniques) to detect security ﬂaws.
Static code analysis can be used to ﬁnd security-related
errors. Several methods exist that could be manual as in
code inspection or automated using tools. The main idea