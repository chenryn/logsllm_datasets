# Title: Multi-Domain Service Orchestration Over Networks and Clouds: A Unified Approach

## Authors:
- Balázs Sonkoly<sup>1</sup>
- János Czentye<sup>1</sup>
- Robert Szabó<sup>2</sup>
- Dávid Jocha<sup>2</sup>
- János Elek<sup>2</sup>
- Sahel Sahhaf<sup>3</sup>
- Wouter Tavernier<sup>3</sup>
- Fulvio Risso<sup>4</sup>

<sup>1</sup>Budapest University of Technology and Economics; <sup>2</sup>Ericsson Research; <sup>3</sup>Ghent University – iMinds; <sup>4</sup>Politecnico di Torino

**Contact Information:** [PI:EMAIL]

## Abstract
End-to-end service delivery often involves the transparent insertion of Network Functions (NFs) into the path. Flexible service chaining requires dynamic instantiation of both NFs and traffic forwarding overlays. Virtualization techniques in compute and networking, such as cloud and Software-Defined Networking (SDN), offer this flexibility to service providers. However, integrating existing cloud and network control mechanisms can be challenging, often requiring one to be subordinated to the other, for example, OpenDaylight under an OpenStack controller. We designed and implemented a joint cloud and network resource virtualization and programming API. This demonstration showcases our abstraction's capability for flexible service chaining control across various technology domains.

**Keywords:** NFV, SDN, multi-domain orchestration, SFC control plane

## 1. Introduction
Cloud platforms enable the creation, management, and on-demand scaling of services. Efficient virtualization techniques and advanced orchestration algorithms facilitate flexible operation and optimal resource utilization. In addition to virtual compute and storage resources, basic networking is provided to connect virtual machines. Traditional telecommunication services and carrier networks, however, have limitations in service creation, deployment, and provisioning due to their strong coupling with physical topologies and specialized hardware. Network Function Virtualization (NFV) bridges the gap between cloud technologies and carrier networks by providing software-based telecommunication services that can run in virtualized environments on general-purpose servers. This allows recent advancements in cloud research to be leveraged in carrier environments.

Flexible service definition and creation can begin by abstracting and formalizing the service into a service chain or service graph, which is a generic way to describe high-level services and assemble processing flows for given traffic. Currently, significant attention is focused on the concept of Service Function Chaining (SFC) and NFV. Organizations like IETF, ETSI, MEF, and the Linux Foundation, along with several research projects, are addressing different aspects of SFC. For instance, IETF is working on SFC architecture and data plane elements, while ETSI has proposed a management and orchestration framework for NFV. The Linux Foundation launched the Open Platform for NFV Project (OPNFV), a carrier-grade open-source reference platform.

UNIFY<sup>1</sup> is an EU-funded FP7 project aimed at unifying cloud and carrier network resources in a common orchestration framework. We designed a novel SFC control plane capable of integrating any infrastructure domains, including different NF execution environments, SDN networks, or legacy data centers. Our architecture supports automated, dynamic service creation and multi-domain NFV orchestration. Central to our design is a unified virtualization and resource programming interface. This demonstration highlights the power of our approach in controlling SFC deployments across multi-technology domains.

<sup>1</sup>[http://www.fp7-unify.eu](http://www.fp7-unify.eu)

## 2. Proof of Concept
In UNIFY, we proposed a joint, narrow-waist SFC control plane over compute (with storage) and network resources for flexible service creation. Our control plane design enables recursive orchestration of various resource types and supports different, even legacy, technologies and migration between them. We introduced a new infrastructure element called the Universal Node (UN), a COTS hardware-based packet processor node capable of high-performance forwarding and running high-complexity NFs in its virtualized environment.

Our virtualization is based on the Big Switch with Big Software (BiS-BiS) concept, which combines a forwarding element with software (compute and storage) resources. BiS-BiS can run NFs and steer traffic transparently among infrastructure and NF ports. The key idea is that BiS-BiS integrates cloud resources with forwarding behavior control. The virtualization view can include arbitrary interconnections of BiS-BiS nodes. SFC programming is achieved by assigning NFs to BiS-BiS nodes and editing flow rules within these nodes. The resource orchestrator maps configurations from different client virtualizations to the underlying domain virtualizer. We also introduced the concept of NF decomposition, where an NF mapped to a BiS-BiS in the client virtualization can be replaced with an interconnection of NF components during the mapping process. The data model of the virtualizer is defined in YANG.

In Figure 1, virtualizers are denoted by green boxes and provide virtual views (interconnected BiS-BiS nodes) for their managers (clients). Managers, shown as red boxes, configure and control these views. The manager-virtualizer relationship is recursive, allowing UNIFY domains to be stacked into a multi-level control hierarchy similar to ONF’s SDN architecture. The recursive interface is the UNIFY interface.

The initial version of our open-source NFV orchestration framework, ESCAPEv2, was presented in [1]. It has been significantly redesigned to meet the design goals and requirements of the joint SFC control plane addressed by UNIFY. ESCAPEv2 now:
- Enables recursive orchestration by implementing UNIFY interfaces at the north and south.
- Operates on our novel joint resource abstraction models.
- Supports UNIFY domains directly and several technological domains via adapters.
- Can be easily extended with additional plug-and-play components and algorithms, such as NF implementations, network embedding algorithms, and NF decomposition models.

On top of ESCAPEv2, we implemented a simple service layer with a GUI (see the upper left part of Figure 1) where users can define service requests with specific requirements, such as bandwidth or delay constraints between arbitrary elements in the service graph. The service layer contains a service orchestrator responsible for mapping the service request to the virtualizer. If the service orchestrator sees only a single BiS-BiS node, its orchestration task is trivial, allowing all resource management to be delegated to the lower-layer UNIFY domain, realized by the resource orchestrator component (see the upper right part of Figure 1).

At the infrastructure level, different technologies are supported and integrated with the framework. We maintained our Mininet-based domain, orchestrated by a dedicated ESCAPEv2 entity via NETCONF and OpenFlow control channels, with NFs running as isolated Click processes. For legacy data center solutions, we support clouds managed by OpenStack and OpenDaylight, requiring a UNIFY-conformant local orchestrator on top of an OpenStack domain. Legacy OpenFlow network control is realized by a POX controller and a corresponding adapter module. Finally, we provide a proof-of-concept implementation of our Universal Node concept. The UN local orchestrator controls logical switch instances (accelerated by Intel’s DPDK) and manages NFs running as Docker containers.

During the demonstration, we will showcase:
- How to create a joint domain abstraction for networks and clouds.
- How to orchestrate and optimize resource allocation and deploy service chains over these unified resources.
- The advantages of recursive orchestration and NF decomposition.

**Acknowledgements:** This work was conducted within the framework of the FP7 UNIFY project, partially funded by the Commission of the European Union.

## 3. References
[1] A. Csoma, B. Sonkoly, L. Csikor, F. Németh, A. Gulyás, W. Tavernier, and S. Sahhaf. "ESCAPE: Extensible Service ChAin Prototyping Environment using Mininet, Click, NETCONF and POX." In Proc. of the ACM SIGCOMM 2014, 2014.

[2] S. Sahhaf, W. Tavernier, D. Colle, and M. Pickavet. "Network service chaining with efficient network function mapping based on service decompositions." In 1st IEEE Conference on Network Softwarization, NetSoft 2015, 2015.

**Further details:** [http://sb.tmit.bme.hu/UNIFY15](http://sb.tmit.bme.hu/UNIFY15)