lz520520@深蓝攻防实验室
# 0x00 前言
漏洞分析第一篇，在讲UAF之前， 先简单过一下HEVD代码的逻辑，方便后续的分析。
# 0x01 HEVD代码分析
## 1.1 驱动程序逻辑分析
驱动程序的主函数文件是HackSysExtremeVulnerableDriver.c  
主要包含5个函数  
DriverEntry: 驱动程序入口函数，类似于exe的main、dll的DllMain  
IrpDeviceIoCtlHandler: 设备操作处理函数，DeviceIoControl请求处理，重要函数，根据请求会调用不同漏洞代码模块。  
DriverUnloadHandler: 驱动卸载处理函数，可忽略  
IrpCreateCloseHandler：驱动设备打开关闭处理函数，通常来说就是CreateFile、CloseHandle的请求处理，可忽略  
IrpNotImplementedHandler：可忽略  
除了DriverEntry是固定函数名，其他都是自定义的，只有传参和返回类型是有要求的，那么是怎么将相关请求绑定相关函数的呢。  
ring3在访问驱动（通过驱动符号链接）进行操作时，会产生相应的IRP（I/O Request
Package）事件，在驱动内对IRP进行操作，实现用户层对驱动的操作。  
实现对IRP事件的处理需要使用到派遣函数，这时就是通过驱动对象的MajorFunction属性进行IRP请求类型和派遣函数绑定，所以派遣函数其实也是回调函数，也是为啥传参和返回类型是有要求的。  
如下所示  
IRP_MJ_CREATE对应CreateFile请求。  
IRP_MJ_CLOSE对应CloseHandle请求。  
IRP_MJ_DEVICE_CONTROL则对应DeviceIoControl请求，绑定的派遣函数是IrpDeviceIoCtlHandler。  
IrpDeviceIoCtlHandler里获取IRP请求里设置的控制码，通过switch-case来调用不同的漏洞代码模块。当然控制码是自定义的。  
再来看一下exp里如何访问漏洞模块的，像UAF，通过IOCTL_ALLOCATE_UAF_OBJECT和IOCTL_FREE_UAF_OBJECT等控制码来访问驱动里的漏洞模块。  
对应到驱动代码里就是这块分支函数，也是后续的分析重点。  
我们需要理解的逻辑大概就这些了，关于更多驱动开发的知识可参考下面这个，可以快速掌握一些驱动知识。  
[https://bbs.pediy.com/thread-266038.htm](https:_bbs.pediy.com_thread-266038)
## 1.2 UAF漏洞代码分析
### 1.2.1 UAF漏洞介绍
申请出一个堆块保存在一个指针中，在释放后，没有将该指针清空，形成了一个悬挂指针（danglingpointer），而后再申请出堆块时会将刚刚释放出的堆块申请出来，并复写其内容，而悬挂指针此时仍然可以使用，使得出现了不可控的情况。攻击者一般利用该漏洞进行函数指针的控制，从而劫持程序执行流。  
当应用程序调用free()释放内存时，如果内存块小于256kb，dlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放回内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放回内核。如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。dlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。（这块可能不太准确，大概看看就行）  
但是其实这里有以下几种情况
  * 内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。
  * 内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。
  * 内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。
漏洞利用的过程可以分为以下4步：
  1. 申请堆块，保存指针。
  2. 释放堆块，形成悬挂指针。
  3. 再次申请堆块，填充恶意数据。
  4. 使用悬挂指针，实现恶意目的。
下面我们去HEVD项目中具体看如何体现。
### 1.2.2 UAF漏洞代码
漏洞代码位于UseAfterFreeNonPagedPool.c  
里面包括4个重要函数以及这4个IRP处理函数，IRP处理函数会分别调用这4个重要函数  
#### AllocateUaFObjectNonPagedPool
用于创建内核对象PUSE_AFTER_FREE_NON_PAGED_POOL  
如下调用ExAllocatePoolWithTag在内核非分页池申请内存，并填充数据  
_USE_AFTER_FREE_NON_PAGED_POOL是一个0x58大小的结构体。  
这边将该结构体对象存放在全局变量`g_UseAfterFreeObjectNonPagedPool`中了  
#### FreeUaFObjectNonPagedPool
用于释放内核对象，这个函数里有两段代码，上面会修复代码，可以看到比`g_UseAfterFreeObjectNonPagedPool`被释放后，多了一个置NULL的动作，这样就可以防止悬挂指针的重利用。  
#### AllocateFakeObjectNonPagedPool
将用户模式传入UserFakeObject指向内容拷贝给核心对象。  
先根据FAKE_OBJECT_NON_PAGED_POOL结构体分配一个非分页池的内存，然后将UserFakeObject的内容拷贝给KernelFakeObject。  
这里重点在于ExAllocatePoolWithTag分配内核池内存，如果存在一个已释放的相同大小或者大一点的内存，那么重新申请就有概率申请到该段内存，然后再为该段内存写入恶意代码，这样就会导致之前的悬挂指针再被调用时，访问的是被覆盖的内存内容，从而执行恶意代码。  
为了增大申请到该段内存的概率，会使用一种池喷射的技巧，可参考扩展知识部分。  
查看这个FAKE_OBJECT_NON_PAGED_POOL可以看到大小与之前的机构体一致。这个结构体没有如上分成callback和buffer，这个其实不影响的，只要大小一样，把结构体前4字节设置成恶意代码地址即可。  
#### UseUaFObjectNonPagedPool
该函数作用是调用全局变量g_UseAfterFreeObjectNonPagedPool，执行他的回调函数。  
### 1.2.3 小结
分析了漏洞代码，其实会对漏洞成因更加了解，我们只要按照AllocateUaFObjectNonPagedPool->FreeUaFObjectNonPagedPool->AllocateFakeObjectNonPagedPool->UseUaFObjectNonPagedPool的顺序调用，就可以触发漏洞，在第三步传入包含恶意代码地址的结构体，覆盖原来的内存，再二次调用原来的结构体指针即可访问恶意代码，也就是UAF（use
after free）的含义。  
而修复方案在于Free之后将引用指针置位NULL，来避免二次访问已释放内存块。  
后续对于漏洞的利用除了上述流程还需要考虑如何提高申请到相同内存块的几率，这个涉及到内核池管理，也用到内核池漏洞常用的池喷射技术。
# 0x02 漏洞利用
先在用户空间的堆中分配FakeObject，将前4字节指向漏洞利用后运行的payload EopPayload地址。  
## 2.1 池喷射代码
再强调下为啥需要池喷射，UAF需要重新申请到相同的内存块并覆盖成恶意代码，而内核池中可能会有许多空间的内存块，如果释放的内存块刚好和其他空闲的内存块相邻，系统就会将这两个内存块合并，那么再申请内存时，
无法保证刚好用到我们释放的那个内存块。  
NtAllocateReserveObject可用于在内核池分配两个可选的内核对象，这里是调用NtAllocateReserveObject在内核空间分配IoCompletionReserve内核对象，IoCompletionReserve的内核对象大小为0x60，刚好比我们需要重利用的结构体0x58大一点。  
池喷射第一步，先申请10000个IoCompletionReserve对象，用于将内核池中空闲、零散的池块都申请完。  
第二步，然后再申请5000个该对象，这时申请出来的池块很大概率是连续的。  
第三步，每隔一个内核对象释放一个对象，这样就会留下很多间隔0x60的空闲池块，那么在申请_USE_AFTER_FREE_NON_PAGED_POOL结构体时用到的池块的前一个池块就不会是空闲的，释放的时候就不会被合并，这样出意外的可能性就很低了。  
这里可能会有一个疑问，上面释放了那么多池块，为啥不会申请到其他，一个原因是申请是优先使用池块大小相同或更相近的，我们在漏洞代码里看到的两个结构体都是0x58是最相近的，另一个原因是越晚释放的池块会更优先被使用，也就是后入先出的概念。
## 2.2 UAF利用代码
接着就是UAF利用的常规几步，  
第一步：访问驱动，发送申请UAF_OBJECT结构体的请求。  
第二步：访问驱动，发送释放UAF_OBJECT结构体的请求。  
第三步：访问驱动，发送申请FAKE_OBJECT结构体的请求，这里循环了1000次，也是池喷射的概念，一次可能不一定申请到上面释放的内存块，所以增大概率，申请1000次。  
第四步：也就是漏洞触发恶意代码执行的一步，调用原来已释放结构体的悬挂指针，访问被覆盖的内存块，触发恶意代码执行。  
中间有一个FreeReserveObjects，用于释放之前池喷射申请的所有内存块，不然太占用内存空间了，因为运行在内核，不释放的话即使你当前漏洞利用程序退出也不会释放。  
## 2.3 payload代码
这段payload的作用是将SYSTEM进程的token复制到当前进程，这样当前进程则为system权限。  
fs寄存器在Ring0中指向一个称为KPCR的数据结构，即FS段的起点与 KPCR
结构对齐，而在Ring0中fs寄存器一般为0x30，这样fs:[124h]就指向KPRCB数据结构的第四个字节。由于 KPRCB
结构比较大，在此就不列出来了。查看其数据结构可以看到第四个字节指向`CurrentThead`(KTHREAD类型)。这样fs:[124h]其实是指向当前线程的`_KTHREAD`
    kd> dt nt!_KPCR
       +0x000 NtTib            : _NT_TIB
        ......
       +0x0dc KernelReserved2  : [17] Uint4B
       +0x120 PrcbData         : _KPRCB
    kd> dt _KPRCB
    nt!_KPRCB
       +0x000 MinorVersion     : Uint2B
       +0x002 MajorVersion     : Uint2B
       +0x004 CurrentThread    : Ptr32 _KTHREAD
       +0x008 NextThread       : Ptr32 _KTHREAD
       +0x00c IdleThread       : Ptr32 _KTHREAD
`_KTHREAD:[0x50]` 指向 `_KPROCESS`， 即
`nt!_KTHREAD.ApcState.Process`，`_EPROCESS`的第一个成员就是`_KPROCESS`，表示两个数据结构地址一样，则可以通过`_KPROCESS`访问`_EPROCESS`数据  
再来看看`_EPROCESS`的结构，+0xb8处是进程活动链表，用于储存当前进程的信息，我们通过对它的遍历，可以找到system的`token`(+0xf8)，我们知道system的PID一直是4，通过这一点我们就可以遍历了，遍历到系统`token`之后替换就行了
    kd> dt nt!_EPROCESS
       +0x000 Pcb              : _KPROCESS
       +0x098 ProcessLock      : _EX_PUSH_LOCK
       +0x0a0 CreateTime       : _LARGE_INTEGER
       +0x0a8 ExitTime         : _LARGE_INTEGER
       +0x0b0 RundownProtect   : _EX_RUNDOWN_REF
       +0x0b4 UniqueProcessId  : Ptr32 Void
       +0x0b8 ActiveProcessLinks : _LIST_ENTRY
       +0x0c0 ProcessQuotaUsage : [2] Uint4B
       +0x0c8 ProcessQuotaPeak : [2] Uint4B
       +0x0d0 CommitCharge     : Uint4B
       +0x0d4 QuotaBlock       : Ptr32 _EPROCESS_QUOTA_BLOCK
       +0x0d8 CpuQuotaBlock    : Ptr32 _PS_CPU_QUOTA_BLOCK
       +0x0dc PeakVirtualSize  : Uint4B
       +0x0e0 VirtualSize      : Uint4B
       +0x0e4 SessionProcessLinks : _LIST_ENTRY
       +0x0ec DebugPort        : Ptr32 Void
       +0x0f0 ExceptionPortData : Ptr32 Void
       +0x0f0 ExceptionPortValue : Uint4B
       +0x0f0 ExceptionPortState : Pos 0, 3 Bits
       +0x0f4 ObjectTable      : Ptr32 _HANDLE_TABLE
       +0x0f8 Token            : _EX_FAST_REF
## 2.4 执行
执行效果如下，效果是通过UAF在内核进行system
token复制，让当前进程的token已切换为system，接着创建一个新进程如cmd.exe则也是system权限。  
然后看下内核的变化
    # 搜索HEVD
    lm m H*
    # 查看符号表
    kd> x /D HEVD!u*
     A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
    9a3e77f2          HEVD!UaFObjectCallbackNonPagedPoolNx (void)
    9a3e7806          HEVD!UseUaFObjectNonPagedPoolNx (void)
    9a3e74e8          HEVD!UseUaFObjectNonPagedPoolIoctlHandler (struct _IRP *, struct _IO_STACK_LOCATION *)
    9a3e742c          HEVD!UseUaFObjectNonPagedPool (void)
    9a3e78c2          HEVD!UseUaFObjectNonPagedPoolNxIoctlHandler (struct _IRP *, struct _IO_STACK_LOCATION *)
    9a3e7108          HEVD!UninitializedMemoryStackObjectCallback (void)
    9a3e6fe6          HEVD!UninitializedMemoryPagedPoolObjectCallback (void)
    9a3e70e8          HEVD!UninitializedMemoryStackIoctlHandler (struct _IRP *, struct _IO_STACK_LOCATION *)
    9a3e6fc6          HEVD!UninitializedMemoryPagedPoolIoctlHandler (struct _IRP *, struct _IO_STACK_LOCATION *)
    9a3e7418          HEVD!UaFObjectCallbackNonPagedPool (void)
通过上述操作可找到UseUaFObjectNonPagedPool函数的地址，然后分析该函数调用g_UseAfterFreeObjectNonPagedPool结构体的回调函数位置，定位到9a3e749b  
在9a3e749b下断点, 然后再运行exp
    bp 9a3e749b
此处跳转的内存地址是00ab39d0  
再步入之前，我们先看下nonPagedPool，看池喷射的效果  
g_UseAfterFreeObjectNonPagedPool保存着内核对象_USE_AFTER_FREE_NON_PAGED_POOL的地址
    9a3e4014->8757b948