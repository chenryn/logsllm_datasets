B
Marc Vila1,2( ), Maria-Ribera Sancho1,3, and Ernest Teniente1
1 Universitat Polit`ecnica de Catalunya, Barcelona, Spain
{marc.vila.gomez,maria.ribera.sancho,ernest.teniente}@upc.edu
2 Worldsensing, Barcelona, Spain
PI:EMAIL
3 Barcelona Supercomputing Center, Barcelona, Spain
PI:EMAIL
Abstract. One of the main features of the Internet of Things (IoT)
is the ability to collect data from everywhere, convert this data into
knowledge,andthenusethisknowledgetomonitoraboutanundesirable
situation. Monitoring needs to be done automatically to be practical
and should be related to the ontological structure of the information
beingprocessedtobeuseful.However,currentsolutionsdonotallowto
properly handle this information from a wide range of IoT devices and
alsotobeabletoreactifacertainvaluethresholdisexceeded.Thisisthe
main purpose of XYZ Monitor, the system we propose here: to monitor
IoT devices so that it can automatically react and notify when a given
alarmisdetected.Wedealwithalarmsdefinedbymeansofbusinessrules
andallowsettingontologicalrequirementsovertheinformationhandled.
· · · ·
Keywords: IoT Monitoring API Microservices Framework
1 Introduction
SeveralauthorsrecognizetheIoTtobeoneofthemostimportantdevelopments
ofthe21stcentury[14].Accordingtothem,theIoTrepresentsthemostexciting
technologicalrevolutionsincetheInternetbecauseitbringsendlessopportunities
andimpactineverycornerofourplanet.IoTdevicesareusedashumanconsum-
ablessuchaswearablesorhealthtrackers;buttheyarealsokeytothesuccessof
industrial applications such as Smart Cities, Industry 4.0, Smart Energy, Con-
nected Cars or Healthcare. I.e., almost all industrial environments are currently
highly dependant from the IoT.
IoT devices and systems are intended to collect and process data from the
least expected places, and its expansion is allowing to operate sensors in a
widerangeofapplications;energymanagement,mobility,manufacturing,Smart
Cities [18] or healthcare, where there is the need of services able to monitor the
medical condition of a patient [7]; or even operated in private use at home, for
example to monitor the home safety.
(cid:2)c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.472–484,2021.
https://doi.org/10.1007/978-3-030-76352-7_43
XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices 473
Thus, one of the inherent capabilities of such IoT systems is the ability to
automatically monitor the information associated to the raw data they are pro-
cessing. This has to be achieved by transforming raw data into relevant knowl-
edge of the system domain, and then specifying conditions over this knowledge,
referredtoasalarms,thatallowidentifyingandhandlingundesirablesituations.
Microservices Architecture is in the core of providing a solution for such
monitoring systems. It is an architectural style which promotes developing an
application“asasuiteofsmallservices,eachrunninginitsownprocessandcom-
municatingwithlightweightmechanismswiththeothers”[6].Thereisaneedfor
managing IoT platforms with these architectures to facilitate IoT development
in itself, improving scalability, interoperability and extensibility [17].
This is particularly important when automatic IoT monitoring is concerned,
since microservices and IoT share a lot in common in terms of architectural
goals [3]. However, to our knowledge, previous work used to assume monolithic
architectures[7,8,11],withouttakingintoaccountallthebenefitsofamicroser-
vices orientation. An exception can be found in [4], which implements a service-
orientedarchitecture(SOA)formonitoringinagriculture;andin[10]thatdefines
microservices architecture about security monitoring in public buildings.
Summarizing, we can see that previous proposals dealing with microser-
vices, monitoring and IoT consider only very specific domains, and are intended
to monitor a certain data, from a particular sensor to achieve a single given
response.I.e.,theyaretailor-madeandthereisnogeneralpurposedomaininde-
pendent proposal.
OurworkisrelatedtotheindustrialresearchandinnovationatWorldsensing
(www.worldsensing.com),whichfocusesonthemonitoringofindustrialenviron-
ments through IoT systems. In this sense, one of the company’s main goals is to
develop a generic environment (assuming different device types and data from
differentproviders)abletomonitorsystemsandalarms,asdefinedthroughcus-
tomizable business rules, and based on a microservices architecture. This is, in
fact, the main contribution of this paper. The system we have developed, called
XYZ Monitor, is Open Source, easy to use and applicable to different domains.
2 Related Work
WedistinguishbetweenIoTinmonolithicandIoTinmicroservicearchitectures,
and monitoring in IoT in both architectures.
2.1 IoT in Monolithic Architectures
In these architectures, systems are built, tested, and deployed as one large body
ofcode,asauniquesolution[12].Thisistheclassicalwayofbuildingapplications
insoftwaredeployments.Everythingisunifiedand,thus,thereisnomodularity.
Among the relevant work in this area we may find [5], which focuses on a
Service Oriented Middleware; [2] which designs a Service Oriented Architecture
(SOA) for wireless sensor networks; and [15] that expands the SOA concept
474 M. Vila et al.
with cloud-based Publish/Subscribe Middleware and also implements the Web
of Things (WoT) concept.
The main drawback of these solutions is that of successfully handling IoT
environments which are increasingly complex, with many kinds of devices that
areheterogeneousasfarastheiruseandoperation.Monolithicsystemshavetheir
mainlimitations here.Everythingislinked,ifthereisachange,improvementor
correction to make, even if it is minimal, the whole system has to be deployed,
testedandrestarted.Ifonepartofthesystemstopsworking,itisverylikelythat
the whole system will stop working. Moreover, their reusability is very limited.
2.2 IoT in Microservices Architecture
Themicroservicesarchitectureemergedasasolutiontoovercomepreviousdraw-
backs [12]. In this architecture, systems are developed as a set of self-contained
components,orlooselycoupledservices,alsocalledmicroservices.Eachmicroser-
vice encapsulates its logic to implement a single business function, and commu-
nication is done through web interfaces (APIs). This approach has contributed
to improved fault isolation, simplicity in understanding the system, technology
flexibility, faster technical deployments, scalability, and reusability [13].
Several works are intended to provide IoT solutions through microservices
architecture. [9] explores how the service-oriented architecture paradigm may
be revisited to address challenges posed by the IoT for the development of
distributed applications. [3] investigates patterns and best practices used in
microservices and analizes how they can be used in the IoT. [17] proposed an
architecture of a microservices based middleware, to ensure cohesion between
different types of devices, services and communication protocols. [1] proposes
a modular and scalable architecture based on lightweight virtualization, with
Docker. [16] proposes an open microservices system framework for IoT applica-
tions. [19] provides an environment to transform automatically functionalities
from IoT devices to a Service Oriented Architecture based IoT services.
2.3 Monitoring in IoT
Some proposals have also been devoted to monitoring on IoT. [7] discusses the
integrationofIoTdevicesforhealthmonitoring.[8]extendsthepreviousconcept
toincludesafetyprotocolsfordatatransmissionalsoinhealthcare.[11]proposes
anIoT-basedsolutiontomonitorSmartCitiesenvironments.However,allthese
proposals are based on monolithic architectures.
Moving to non-monolithic architectures, [4] implements a SOA for monitor-
ing in agriculture; while [10] develops a microservices based architecture for a
monitoring system to improve the safety of public buildings. It is worth noting
that both applications are very domain-specific and that they handle only very
concrete devices.
Summarizing, the use cases are very specific. Input elements to the systems
are very limited, only certain devices are available. And once the data is in
the system, it follows a closed monitoring flow. They include a business rules
XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices 475
with notification system. But, this is also closed to modifications and cannot be
changed externally.
3 XYZ Monitor System Overview
Our goal is aimed at overcoming the limitations of previous proposals. With
this purpose, we have built the XYZ Monitor system, which is able to monitor
datafromdifferentIoTdevicesandreportingifcertainconditionsoverthisdata
are met. Input data is generic and extensible to changes to support different
elements. IoT devices communicate with the system via HTTP calls, through
APIs. Once the data is in the system, it is analyzed and monitored. If the user
has specified an alarm by means of a business rule, it will be monitored by
sending notifications to an email address indicated in the system. XYZ Monitor
relies on a microservices architecture, with the advantages that this entails.
XYZMonitorgetstheinputofdatafromthedevicesthemselvessincewenat-
urallyassumethatthereal-worldobjects,sensorsanddevicescanautonomously
infer their state and submit this information to the service. This is a feasible
assumption in the context of the IoT, where environmental data can be col-
lected by the objects, which can then infer their own state.
Once in the system, this data will serve us to monitor the behaviour of the
devices and also to activate alarms if certain conditions over the data are met.
3.1 Conceptual Overview
The workflow of our proposal is summarized in Fig.1. Initially, the Data Col-
lection component receives information inputs from the different devices. These
devices are onboarded in the Data Management system by the user. These data
can be visualised on the platform itself as passive monitoring, Monitoring com-
ponent. At the same time that the data is being received, the system, performs
Data Analysis. This is done through business rules, predefined by the platform
user, it is also called alarm monitoring. When an alarm occurs, i.e. a business
rule detects that something is not right, like a value out of range, the system
warns through the Notification component, automatically.
Fig.1. Workflow of our proposal
476 M. Vila et al.
Oneofthemainfeaturesofoursystemisitsabilitytohandlealarmsthatare
defined by means of business rules,specified over the conceptual ontology of the
informationhandled.ThisconceptualontologyisdefinedwithUMLinFig.2and
allowsabstractingtheconceptsofinterestfromitstechnologicalimplementation,
thus providing independence between data gathering and processing.
Fig.2. Ontology of the information handled by XYZ
Anevent isaninputofdatasentbyanIoTdevicetooursystem.Weassume
twodifferenttypesofevents,althoughourproposaliseasilyextensiblebyassum-
ing additional subclasses of events with different types. A device is the smart
object intercepting the events (such as a sensor or a thermometer). Each device
hasalocationincoordinatesformatoritisnamedwithalabel.Adevice belongs
toadevice category whichmanagesitandservestoindicatewhattypeofevents
that device is sending. Finally, a business rule (also called alarm) allows stating
a complex condition to be monitored over the data stored by means of a query
and also notify to whoever has been determined in the system.
3.2 Architectural Overview
Our system has been designed to operate through a microservices architec-
ture.Eachfunctionalmoduleisisolatedandcommunicateswitheachotherover
HTTP interfaces. This architecture is specified in Fig.3.
Fig.3. Microservice architecture of our proposal
XYZ Monitor: IoT Monitoring of Infrastructures Using Microservices 477
When a user or an IoT device wants to communicate with our system, our
API Gateway will be in the front-line. An API Gateway takes all the HTTP
requestsfromaclientdetermineswhichservicesareneededandthenroutesthem
to the appropriate microservice. It translates between web protocols and web-
unfriendly protocols, used internally. Among the existing, Netflix Zuul, Kong,
ApacheApisix,etc.,wehavechosenKong(https://konghq.com/kong/),anOpen
Source Software, simple to configure, it works well and meets our needs.
Among the existing OSS data visualization systems for monitoring, e.g.
Kibana, Prometheus, Grafana or Chronograf, we decided to use Grafana
(https://grafana.com) because it is easy to use and fits well with most types
of IoT data we are dealing with. We are able to have a monitoring and visual-
ization system with the data reported by the devices.
Oursystemincorporatesanelementthatallowsittoreacttocertaincircum-
stances. Node-Red (https://nodered.org), its OSS, and permits creating flows
for actions through custom JavaScript functions. Within this system we have
created a flow to check these circumstances or business rules.
Also a frontend has been developed in React (https://reactjs.org), which
is an OSS JavaScript framework. The backend is done with Flask (https://
flask.palletsprojects.com), an OSS micro framework in Python. As database,
PostgreSQL(https://postgresql.org)isused,anOSSobject-relationaldatabase.
Thesystemarchitecturehasbeendeployedundermicroservicesbythemeans
ofDocker(https://docker.com)andDocker-compose(https://docs.docker.com/
compose/). Docker is an open source project providing a systematic way to
automatethefasterdeploymentofLinuxapplicationsinsideportablecontainers.
4 Proposal in a Nutshell
4.1 Data Collection
Oursystemiseasilyextensible.Therefore,toexemplifyitsinputwehavechosen
todistinguishbetweentwotypesofinputsavailableforthesystem.Iftheuserhas
theneedtoaddanothertypeofinput,itcanbedoneeasily.Thisiswhyallinput
elementshaveasuperiorelement,whichgeneralizestheirvalues.Moreprecisely,
XYZ Monitor is able to handle two types of possible elements: EventA and
EventB,respectively.BothkindofinputsarespecializationsofinputtypeEvent,
which is a communication trigger that is the base type for a device reading.
Events. An Event includes the information of the device to which the data is
beinginput(device name),andalsothedateofsamplecollection(datetime);but
itdoesnothavetheabilitytoknowwhatvaluethatsamplehas.Thevalueofthe
sample is obtained from the classes inherited from Event. Which can be EventA
orEventB.Forthis,anAPI(/api/events)hasbeendevelopedtogatherEvents
sent to the system. It is defined following the JSON Schema1 specification:
1 JSON Schema - A Media Type for Describing JSON Documents: https://tools.ietf.
org/html/draft-handrews-json-schema-01.
478 M. Vila et al.
Listing 1.1. Event JSON Schema simplification
1 "event": {
2 "type": "object",
3 "properties": {
4 "device_name": {
5 "type": "string",
6 "$ref": "#/definitions/device/properties/name"
7 },
8 "datetime": {
9 "type": "string",
10 "format": "date-time",
11 "example": "2020-04-01T10:54:03+00:00"
12 }
13 },
14 "required": [ "device_name", "datetime" ] }
EventA isaninputvalueintheformofastring,i.e.itcanbeanyalphanumeric
element. For example, “heat”, “1.0”, “1”, etc.
Listing 1.2. EventA JSON Schema simplification
1 "event_a": {
2 "type": "object",
3 "allOf": [ { "$ref": "#/definitions/event" },
4 { "properties": {
5 "value": {
6 "type": "string",
7 "example": "1"
8 }
9 },
10 "required": [ "value" ] } ] }
EventB events are defined in a similar way, but the input value that is in the
form of a number, so it can have numerical values, even with decimal values.
XYZ Monitor shows the events that have been correctly received by the sys-
tem(seeFig.4).Inparticular,XYZmonitorprovidesforeachevent:itsidentifier,
device to which it reports, value and date of reception.
Fig.4. Frontend showing the Events yet in our system