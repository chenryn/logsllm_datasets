# Feature request
## Is your feature request related to a problem? Please describe.
Currently when deploying to now 2.0 we force all dependencies to be
`devDependencies`, the reason for this is creating the _smallest possible
lambda_.  
This however introduces some issues:
  * When everything is a devDependency, how are my pages requiring these modules? 
    * answer: `next build --lambdas` bundles imported modules and no longer uses `externals` for this reason.
  * When the user has a `next.config.js` that uses any module, most commonly a Next.js plugin like `@zeit/next-css` loading `next.config.js` in production will fail because of the module not being there. However this opens up the question: why is next-css being loaded on cold start in production.
## Describe the solution you'd like
One solution is forcing `phases` to be used, documentation can be found here:
https://github.com/zeit/next.js#custom-configuration
However there are alternatives, for example:
  * bundling the configuration (would also allow for `next.config.ts` or similar. At first glance this seems like a solution, however it doesn't solve the build-time modules being loaded in production mode.
  * No longer allowing a "runtime" next.config.js, this would be a breaking change but it would make a lot of sense since this forces applications to optimize at build and not have runtime values being passed for convenience. However we'd still need a way to allow `publicRuntimeConfig` and `assetPrefix` (which does work at runtime), which is for example used by Trulia's appshell.
## Describe alternatives you've considered
I'd love to know how people are using `next.config.js` currently. From what
I've seen the vast majority looks like the equivalent of:
    const thePlugin = require('theplugin')
    module.exports = thePlugin({})
## Additional context
Issue reference for Now 2.0: #5750
For now this issue is just a writeup of one issue regarding serverless
execution, I don't have a definitive opinion about this yet, but I wanted to
write down my thoughts on the subject so that we can get the community
involved and work towards a solution üëç