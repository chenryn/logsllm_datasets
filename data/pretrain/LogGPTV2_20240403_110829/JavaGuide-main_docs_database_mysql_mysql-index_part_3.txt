存储过程定义完成之后，我们执行存储过程即可！
```sql
CALL BatchinsertDataToCusOder(1, 1000000); # 插入100w+的随机数据
```
等待一会，100w 的测试数据就插入完成了！
3、创建覆盖索引并使用 `EXPLAIN` 命令分析。
为了能够对这 100w 数据按照 `score` 进行排序，我们需要执行下面的 SQL 语句。
```sql
SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;#降序排序
```
使用 `EXPLAIN` 命令分析这条 SQL 语句，通过 `Extra` 这一列的 `Using filesort` ，我们发现是没有用到覆盖索引的。
![](https://oss.javaguide.cn/github/javaguide/mysql/not-using-covering-index-demo.png)
不过这也是理所应当，毕竟我们现在还没有创建索引呢！
我们这里以 `score` 和 `name` 两个字段建立联合索引：
```sql
ALTER TABLE `cus_order` ADD INDEX id_score_name(score, name);
```
创建完成之后，再用 `EXPLAIN` 命令分析再次分析这条 SQL 语句。
![](https://oss.javaguide.cn/github/javaguide/mysql/using-covering-index-demo.png)
通过 `Extra` 这一列的 `Using index` ，说明这条 SQL 语句成功使用了覆盖索引。
关于 `EXPLAIN` 命令的详细介绍请看：[MySQL 执行计划分析](./mysql-query-execution-plan.md)这篇文章。
### 联合索引
使用表中的多个字段创建索引，就是 **联合索引**，也叫 **组合索引** 或 **复合索引**。
以 `score` 和 `name` 两个字段建立联合索引：
```sql
ALTER TABLE `cus_order` ADD INDEX id_score_name(score, name);
```
### 最左前缀匹配原则
最左前缀匹配原则指的是，在使用联合索引时，**MySQL** 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 **`>`**、**`=`**、**` EXPLAIN SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;
+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+
| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra          |
+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+
|  1 | SIMPLE      | cus_order | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 997572 |   100.00 | Using filesort |
+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+
1 row in set, 1 warning (0.00 sec)
```
各个字段的含义如下：
| **列名**      | **含义**                                     |
| ------------- | -------------------------------------------- |
| id            | SELECT 查询的序列标识符                      |
| select_type   | SELECT 关键字对应的查询类型                  |
| table         | 用到的表名                                   |
| partitions    | 匹配的分区，对于未分区的表，值为 NULL        |
| type          | 表的访问方法                                 |
| possible_keys | 可能用到的索引                               |
| key           | 实际用到的索引                               |
| key_len       | 所选索引的长度                               |
| ref           | 当使用索引等值查询时，与索引作比较的列或常量 |
| rows          | 预计要读取的行数                             |
| filtered      | 按表条件过滤后，留存的记录数的百分比         |
| Extra         | 附加信息                                     |
篇幅问题，我这里只是简单介绍了一下 MySQL 执行计划，详细介绍请看：[MySQL 执行计划分析](./mysql-query-execution-plan.md)这篇文章。