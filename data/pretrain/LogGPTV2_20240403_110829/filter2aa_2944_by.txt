 An aud claim that lists the URI of the token endpoint of the AS as the intended
audience.
 An exp claim that limits the expiry time of the JWT. An AS may reject a client
authentication JWT with an unreasonably long expiry time to reduce the risk of
replay attacks.
Some authorization servers also require the JWT to contain a jti claim with a unique
random value in it. The AS can remember the jti value until the JWT expires to
prevent replay if the JWT is intercepted. This is very unlikely because client authen-
tication occurs over a direct TLS connection between the client and the AS, but the
use of a jti is required by the OpenID Connect specifications, so you should add
one to ensure maximum compatibility. Listing 11.3 shows how to generate a JWT in
the correct format using the Nimbus JOSE+JWT library that you used in chapter 6.
In this case, you’ll use the ES256 signature algorithm (ECDSA with SHA-256), which
is widely implemented. Generate a JWT header indicating the algorithm and the
key ID (which corresponds to the keystore alias). Populate the JWT claims set values
as just discussed. Finally, sign the JWT to produce the assertion value. Open the
JwtBearerClient.java file and type in the contents of the listing at the end of the main
method.
var clientId = "test";
var as = "https://as.example.com:8080/oauth2/access_token";
var header = new JWSHeader.Builder(JWSAlgorithm.ES256)      
        .keyID("es256-key")                                 
        .build();                                           
var claims = new JWTClaimsSet.Builder()
        .subject(clientId)                          
        .issuer(clientId)                           
        .expirationTime(Date.from(now().plus(30, SECONDS)))     
        .audience(as)                               
        .jwtID(UUID.randomUUID().toString())      
        .build();
var jwt = new SignedJWT(header, claims);   
jwt.sign(new ECDSASigner(privateKey));     
var assertion = jwt.serialize();           
Once you’ve registered the JWK Set with the AS, you should then be able to generate
an assertion and use it to authenticate to the AS to obtain an access token. Listing 11.4
shows how to format the client credentials request with the client assertion and send it
to the AS an HTTP request. The JWT assertion is passed as a new client_assertion
parameter, and the client_assertion_type parameter is used to indicate that the
assertion is a JWT by specifying the value:
urn:ietf:params:oauth:client-assertion-type:jwt-bearer
Listing 11.3
Generating a JWT client assertion
Create a header with 
the correct algorithm 
and key ID.
Set the subject and issuer 
claims to the client ID.
Add a short
expiration time.
Set the audience 
to the AS token 
endpoint.
Add a
random JWT
ID claim to
prevent
replay.
Sign the 
JWT with the 
private key.
395
The JWT bearer grant for OAuth2
The encoded form parameters are then POSTed to the AS token endpoint using the
Java HTTP library. Open the JwtBearerClient.java file again and add the contents of
the listing to the end of the main method.
var form = "grant_type=client_credentials&scope=create_space" +   
        "&client_assertion_type=" +                               
"urn:ietf:params:oauth:client-assertion-type:jwt-bearer" +        
        "&client_assertion=" + assertion;                         
var httpClient = HttpClient.newHttpClient();                          
var request = HttpRequest.newBuilder()                                
        .uri(URI.create(as))                                          
        .header("Content-Type", "application/x-www-form-urlencoded")  
        .POST(HttpRequest.BodyPublishers.ofString(form))              
        .build();                                                     
var response = httpClient.send(request,           
        HttpResponse.BodyHandlers.ofString());    
System.out.println(response.statusCode());
System.out.println(response.body());
Run the following Maven command to test out the client and receive an access token
from the AS:
mvn -q clean compile exec:java \
  -Dexec.mainClass=com.manning.apisecurityinaction.JwtBearerClient
After the client flow completes, it will print out the access token response from the AS.
11.3.3 Service account authentication
Authenticating a service account using JWT bearer authentication works a lot like client
authentication. Rather than using the client credentials grant, a new grant type named
    urn:ietf:params:oauth:grant-type:jwt-bearer
is used, and the JWT is sent as the value of the assertion parameter rather than the
client_assertion parameter. The following code snippet shows how to construct the
form when using the JWT bearer grant type to authenticate using a service account:
var form = "grant_type=" +                                
       "urn:ietf:params:oauth:grant-type:jwt-bearer" +    
       "&scope=create_space&assertion=" + assertion;     
The claims in the JWT are the same as those used for client authentication, with the
following exceptions:
 The sub claim should be the username of the service account rather than the
client ID.
 The iss claim may also be different from the client ID, depending on how the
AS is configured.
Listing 11.4
Sending the request to the AS
Build the form 
content with the 
assertion JWT.
Create
the POST
request to
the token
endpoint.
Send the request and 
parse the response.
Use the jwt-bearer 
grant type.
Pass the JWT as
the assertion
parameter.
396
CHAPTER 11
Securing service-to-service APIs
There is an important difference in the security properties of the two methods, and
this is often reflected in how the AS is configured. When the client is using a JWT to
authenticate itself, the JWT is a self-assertion of identity. If the authentication is suc-
cessful, then the AS issues an access token authorized by the client itself. In the JWT
bearer grant, the client is asserting that it is authorized to receive an access token on
behalf of the given user, which may be a service account or a real user. Because the
user is not present to consent to this authorization, the AS will usually enforce stron-
ger security checks before issuing the access token. Otherwise, a client could ask for
access tokens for any user it liked without the user being involved at all. For example,
an AS might require separate registration of trusted JWT issuers with settings to limit
which users and scopes they can authorize access tokens for.
 An interesting aspect of JWT bearer authentication is that the issuer of the JWT
and the client can be different parties. You’ll use this capability in section 11.5.3 to
harden the security of a service environment by ensuring that pods running in Kuber-
netes don’t have direct access to privileged service credentials.
11.4
Mutual TLS authentication
JWT bearer authentication is more secure than sending a client secret to the AS, but
as you’ve seen in section 11.3.1, it can be significantly more complicated for the client.
OAuth2 requires that connections to the AS are made using TLS, and you can use
TLS for secure client authentication as well. In a normal TLS connection, only the
server presents a certificate that authenticates who it is. As explained in chapter 10,
Pop quiz
3
Which one of the following is the primary reason for preferring a service account
over the client credentials grant?
a
Client credentials are more likely to be compromised.
b
It’s hard to limit the scope of a client credentials grant request.
c
It’s harder to revoke client credentials if the account is compromised.
d
The client credentials grant uses weaker authentication than service accounts.
e
Clients are usually private to the AS while service accounts can live in a shared
repository.
4
Which of the following are reasons to prefer JWT bearer authentication over cli-
ent secret authentication? (There may be multiple correct answers.)
a
JWTs are simpler than client secrets.
b
JWTs can be compressed and so are smaller than client secrets.
c
The AS may need to store the client secret in a recoverable form.
d
A JWT can have a limited expiry time, reducing the risk if it is stolen.
e
JWT bearer authentication avoids sending a long-lived secret over the network.
The answers are at the end of the chapter.
397
Mutual TLS authentication
this is all that is required to set up a secure channel as the client connects to the
server, and the client needs to be assured that it has connected to the right server and
not a malicious fake. But TLS also allows the client to optionally authenticate with a
client certificate, allowing the server to be assured of the identity of the client and use
this for access control decisions. You can use this capability to provide secure authenti-
cation of service clients. When both sides of the connection authenticate, this is
known as mutual TLS (mTLS).
TIP
Although it was once hoped that client certificate authentication would
be used for users, perhaps even replacing passwords, it is very seldom used.
The complexity of managing keys and certificates makes the user experience
very poor and confusing. Modern user authentication methods such as Web-
Authn (https://webauthn.guide) provide many of the same security benefits
and are much easier to use.
11.4.1 How TLS certificate authentication works
The full details of how TLS certificate authentication works would take many chapters
on its own, but a sketch of how the process works in the most common case will help
you to understand the security properties provided. TLS communication is split into
two phases:
1
An initial handshake, in which the client and the server negotiate which cryp-
tographic algorithms and protocol extensions to use, optionally authenticate
each other, and agree on shared session keys.
2
An application data transmission phase in which the client and server use the
shared session keys negotiated during the handshake to exchange data using
symmetric authenticated encryption.2
During the handshake, the server presents its own certificate in a TLS Certificate mes-
sage. Usually this is not a single certificate, but a certificate chain, as described in chap-
ter 10: the server’s certificate is signed by a certificate authority (CA), and the CA’s
certificate is included too. The CA may be an intermediate CA, in which case another
CA also signs its certificate, and so on until at the end of the chain is a root CA that is
directly trusted by the client. The root CA certificate is usually not sent as part of the
chain as the client already has a copy.
RECAP
A certificate contains a public key and identity information of the sub-
ject the certificate was issued to and is signed by a certificate authority. A certifi-
cate chain consists of the server or client certificate followed by the certificates
of one or more CAs. Each certificate is signed by the CA following it in the
chain until a root CA is reached that is directly trusted by the recipient.
2 There are additional sub-protocols that are used to change algorithms or keys after the initial handshake and
to signal alerts, but you don’t need to understand these.
398
CHAPTER 11
Securing service-to-service APIs
To enable client certificate authentication, the server sends a CertificateRequest mes-
sage, which requests that the client also present a certificate, and optionally indicates
which CAs it is willing to accept certificates signed by and the signature algorithms it
supports. If the server doesn’t send this message, then the client certificate authentica-
tion is disabled. The client then responds with its own Certificate message containing
its certificate chain. The client can also ignore the certificate request, and the server
can then choose whether to accept the connection or not.
NOTE
The description in this section is of the TLS 1.3 handshake (simpli-
fied). Earlier versions of the protocol use different messages, but the process
is equivalent.
If this was all that was involved in TLS certificate authentication, it would be no differ-
ent to JWT bearer authentication, and the server could take the client’s certificates
and present them to other servers to impersonate the client, or vice versa. To prevent
this, whenever the client or server present a Certificate message TLS requires them to
also send a CertificateVerify message in which they sign a transcript of all previous mes-
sages exchanged during the handshake. This proves that the client (or server) has
control of the private key corresponding to their certificate and ensures that the sig-
nature is tightly bound to this specific handshake: there are unique values exchanged
in the handshake, preventing the signature being reused for any other TLS session. The
session keys used for authenticated encryption after the handshake are also derived from
these unique values, ensuring that this one signature during the handshake effectively
authenticates the entire session, no matter how much data is exchanged. Figure 11.4
shows the main messages exchanged in the TLS 1.3 handshake.
LEARN ABOUT IT
We’ve only given a brief sketch of the TLS handshake pro-
cess and certificate authentication. An excellent resource for learning more is
Bulletproof SSL and TLS by Ivan Ristic´ (Feisty Duck, 2015).
Pop quiz
5
To request client certificate authentication, the server must send which one of
the following messages?
a
Certificate
b
ClientHello
c
ServerHello
d
CertificateVerify
e
CertificateRequest
6
How does TLS prevent a captured CertificateVerify message being reused for a
different TLS session? (Choose one answer.)
a
The client’s word is their honor.
b
The CertificateVerify message has a short expiry time.
399
Mutual TLS authentication
11.4.2 Client certificate authentication
To enable TLS client certificate authentication for service clients, you need to config-
ure the server to send a CertificateRequest message as part of the handshake and to vali-
date any certificate that it receives. Most application servers and reverse proxies
c
The CertificateVerify contains a signature over all previous messages in the
handshake.
d
The server and client remember all CertificateVerify messages they’ve ever
seen.
The answers are at the end of the chapter.
Client
Server
ClientHello
ServerHello
CertiﬁcateRequest
Certiﬁcate
CertiﬁcateVerify
Finished
Certiﬁcate
CertiﬁcateVerify
Finished
Application data
The client starts the
handshake by sending
a ClientHello message.
The server includes a
CertiﬁcateRequest message
in its response if it supports
client certiﬁcate authentication.
The client then sends its
certiﬁcate chain and signs the
CertiﬁcateVerify message.
Figure 11.4
In the TLS handshake, the server sends its own certificate and can ask the 
client for a certificate using a CertificateRequest message. The client responds with a 
Certificate message containing the certificate and a CertificateVerify message proving that 
it owns the associated private key.
400
CHAPTER 11
Securing service-to-service APIs
support configuration options for requesting and validating client certificates, but
these vary from product to product. In this section, you’ll configure the NGINX ingress
controller from chapter 10 to allow client certificates and verify that they are signed by
a trusted CA.
 To enable client certificate authentication in the Kubernetes ingress controller, you
can add annotations to the ingress resource definition in the Natter project. Table 11.1
shows the annotations that can be used.
NOTE
All annotation values must be contained in double quotes, even if they
are not strings. For example, you must use nginx.ingress.kubernetes.io/
auth-tls-verify-depth: "1" to specify a maximum chain length of 1.
To create the secret with the trusted CA certificates to verify any client certificates, you
create a generic secret passing in a PEM-encoded certificate file. You can include mul-
tiple root CA certificates in the file by simply listing them one after the other. For the
examples in this chapter, you can use client certificates generated by the mkcert utility
that you’ve used since chapter 2. The root CA certificate for mkcert is installed into its
CAROOT directory, which you can determine by running
mkcert -CAROOT
Table 11.1
Kubernetes NGINX ingress controller annotations for client certificate authentication
Annotation
Allowed values
Description
nginx.ingress.kubernetes.io/
auth-tls-verify-client
on, off, optional, 
or optional_no_ca
Enables or disables client certificate 
authentication. If on, then a client 
certificate is required. The optional 
value requests a certificate and veri-
fies it if the client presents one. The 
optional_no_ca option prompts 
the client for a certificate but doesn’t 
verify it.
nginx.ingress.kubernetes.io/
auth-tls-secret
The name of a Kuberne-
tes secret in the form 
namespace/secret-
name
The secret contains the set of 
trusted CAs to verify the client 
certificate against.
nginx.ingress.kubernetes.io/
auth-tls-verify-depth
A positive integer
The maximum number of intermedi-
ate CA certificates allowed in the 
client’s certificate chain.
nginx.ingress.kubernetes.io/
auth-tls-pass-certificate-
to-upstream
true or false
If enabled, the client’s certificate 
will be made available in the ssl-
client-cert HTTP header to 
servers behind the ingress.
nginx.ingress.kubernetes.io/
auth-tls-error-page
A URL
If certificate authentication fails, 
the client will be redirected to this 
error page.
401
Mutual TLS authentication
which will produce output like the following:
/Users/neil/Library/Application Support/mkcert
To import this root CA as a Kubernetes secret in the correct format, run the following
command:
kubectl create secret generic ca-secret -n natter-api \
  --from-file=ca.crt="$(mkcert -CAROOT)/rootCA.pem"
Listing 11.5 shows an updated ingress configuration with support for optional client
certificate authentication. Client verification is set to optional, so that the API can sup-
port service clients using certificate authentication and users performing password
authentication. The TLS secret for the trusted CA certificates is set to natter-api/
ca-secret to match the secret you just created within the natter-api namespace.
Finally, you can enable passing the certificate to upstream hosts so that you can extract
the client identity from the certificate. Navigate to the kubernetes folder under the