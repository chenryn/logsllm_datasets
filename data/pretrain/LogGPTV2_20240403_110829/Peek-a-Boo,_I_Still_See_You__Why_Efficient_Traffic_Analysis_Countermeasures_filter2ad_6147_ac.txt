was collected in 2006. Despite all these differences we
found the high-level trends and conclusions are the same
across both datasets. For these reasons, we will focus our
analysis only on the Herrmann dataset for the remainder
of this paper. Appendix A contains details for classiﬁer
performance using the Liberatore dataset at k = 128.
B. Comparison of Classiﬁers
Figure 6 gives a three-by-three grid of graphs: one
column per classiﬁer and one row for countermeasure type.
We start by quickly comparing the relative performance of
the three classiﬁers, which is observable by comparing the
performance across the three columns.
The ﬁrst thing to notice is that at k = 2, essentially all of
the classiﬁers do well against all of the countermeasures.
Traces with 0 packets in one direction
Traces with ≤ 5 bidirectional packets
Traces with ≤ 10 bidirectional packets
Traces with ≤ 1s duration
Median trace duration
Median bidirectional packet count
Median bandwidth utilization (bytes)
LL
3.1%
5.2%
13.8%
29.4%
2.4 sec.
106
H
0.1%
0.2%
0.4%
6.4%
3.6 sec.
256
78,382
235,687
Figure 5. Statistics illustrating the presence of degenerate or erroneous
traces in the Liberatore and Levine and Hermann datasets.
The LL and P classiﬁers are particularly strong, even
against the DTS and TM countermeasures. The overall best
classiﬁer is clearly the P classiﬁer. It is robust to all the
countermeasures. The H classiﬁer edges out both the P and
LL classiﬁers for raw trafﬁc, but is very fragile in the face
of all but the simplest countermeasure (Linear padding).
The LL classiﬁer proves more robust than the H classiﬁer,
but has more severe accuracy degradation compared to P
as k increases.
C. Comparison of Countermeasures
Consider the ﬁrst row of Figure 6, where we see a com-
parison of the two Type-1 randomized padding schemes.
Curiously, it is better to pick a single random padding
amount to apply to each packet within a trace than to
pick fresh random amounts per packet. Applying a single
random amount across all packets shifts the distribution
of packet lengths in a way that is unlikely to have been
seen during training. On the other hand, randomizing per
packet “averages out” during training and testing.
Common intuition about the Pad to MTU countermea-
sure is that it ought to work well against TA attacks since
it ensures that no individual packet length information is
leaked. However, as we seen in the second row of Figure 6,
we see this intuition is wrong in large part because the
number of packets is still leaked. The LL classiﬁer, for
example, exploits this fact, since it trains on the number
of packets of each (direction, length). When the packets are
padded to the MTU, there are only two numbers, namely
for (↑,1500) and (↓,1500). The LL classiﬁer does well
337
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:30 UTC from IEEE Xplore.  Restrictions apply. 
Figure 6. Average accuracy as k varies for the LL (left column), H (middle column), and P (right column) classiﬁers with respect to the Type-1 (top
row), Type-2 (middle row), and Type-3 (bottom row) countermeasures. The dotted gray line in each graph represents a random-guess adversary.
because the number of packets transmitted is relatively
consistent across traces for a particular web page. (We
will investigate this more in the next section.) This also is
our ﬁrst evidence that exact packet-length information is
not necessary for high-accuracy classiﬁcation.
Next, we turn to the Type-3 countermeasures. Recall
that these countermeasures focus on altering a speciﬁc
feature of the web page trafﬁc, namely the distribution
of normalized counts, so that one web page looks like
another with respect to that feature. In theory then, the
distribution of packets produced by the DTS and TM
countermeasures should match that of the target web
page and, unlike Type-1 and Type-2 countermeasures, the
number of packets from the source web page should be
concealed, in part. This is not true in all cases, however,
as Type-3 countermeasures do not substantially change the
total bandwidth of data transmitted in each direction, nor
the duration of the trace with regards to time. In fact, no
countermeasure considered here substantially changes the
total bandwidth. Moreover, these countermeasures do not
hide “burstiness” of the data, which may be correlated
to higher level structure of the underlying HTTP trafﬁc
(e.g., a downstream burst represents a web page object).
Therefore, DTS and TM perform best against the H clas-
siﬁer, which examines the same normalized packet count
distribution, while the P classiﬁer performs particularly
well with its use of packet burst information.
We compare the best countermeasure from each type
in Figure 7: Session Random 255 (Type-1), Pad to MTU
(Type-2), and DTS (Type-3). A few surprises arise in this
comparison. First, Session Random 255 performs better
or about the same as Pad to MTU. This is surprising,
as Session Random 255 is a signiﬁcantly lighter-weight
countermeasure. It has only 7% overhead compared to
Pad to MTU’s 58%, and can potentially be dropped into
existing deployments of SSH and TLS. That said, even at
k = 128, it is unlikely to be satisfying to drop accuracy
only down to 90%. DTS does better than the others across
all values of k against the best classiﬁer (P), but we note
that simpler countermeasures actually can do a better job
338
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:30 UTC from IEEE Xplore.  Restrictions apply. 
Figure 7. Comparison of the overall best performing countermeasure of each type against the LL, H, and P classiﬁers.
against the LL and H classiﬁers for lower k values.
VI. EXPLORING COARSE FEATURES
Our study of existing classiﬁers reveals that some ﬁne-
grained features, such as individual packet lengths, are not
required for high-accuracy classiﬁcation. Indeed, the fact
that the P classiﬁer performs so well against the Pad to
MTU countermeasure means that it is using features other
than individual packet lengths to determine classiﬁcation.
This leads us to the following question: Are coarse trafﬁc
features sufﬁcient for high-accuracy classiﬁcation?
total
transmission time,
To answer this question, we explore three coarse fea-
tures:
total per-direction band-
width, and trafﬁc “burstiness”.6 From these features we
build the time (TIME), bandwidth (BW), and the variable
n-gram (VNG) classiﬁer using na¨ıve Bayes as our underly-
ing machine learning algorithm. See Figure 9 for a visual
summary of their performance. Later, we put these three
coarse features together, and build the VNG++ na¨ıve Bayes
classiﬁer. We will see that VNG++ is just as accurate as
the (more complex) P classiﬁer.
A. Total Time
We begin with the most coarse and intuitively least
useful feature, the total timespan of a trace. How much
do traces differ based on total time? The left-most plot in
Figure 8 depicts the time of the ﬁrst 50 traces from ﬁve
websites in the Herrmann dataset. There is clear regularity
within traces from each website, suggesting relatively low
variance for this feature.
To test the usefulness of total time in classiﬁcation, we
implemented a na¨ıve Bayes classiﬁer that uses time as
its only feature. This simple time-only classiﬁer is quite
successful for small k, as shown in Figure 9. At k = 2, it
is able to achieve better than an 80% average accuracy
against the three best countermeasures from each class
as determined by performance on the P classiﬁer. As the
privacy set increases, the likelihood of multiple websites
having similar timing increases, and so the accuracy of
6We note that these features are more coarse than individual packet
lengths, in the sense that knowing the latter likely implies knowing the
former, but not the other way around.
339
the time classiﬁer goes down. At k = 775, it achieves
only about 3% accuracy, although this is still substantially
better than random guessing (0.1%) and may provide value
as a supplementary feature in order to increase a classiﬁer’s
accuracy.
Figure 9 also shows that the time classiﬁer performs
roughly the same against raw trafﬁc (i.e., the “None” coun-
termeasure) and with trafﬁc countermeasures applied. As
one might expect padding-based countermeasures (Type-1
and Type-2), do not directly modify the total time taken
by traces. On the other hand, distribution-based counter-
measures (Type-3) potentially inject dummy packets into
a trace, but this is most often no more than 10-12 packets
sent in quick succession. Thus, these also do not change
the total time signiﬁcantly.
B. Total Per-Direction Bandwidth
Next, we turn to total bandwidth consumed per di-
rection. We see the consistency of total bandwidth in
the center plot in Figure 8, which displays the upstream
and downstream bandwidths of the ﬁrst 50 traces of ﬁve
websites from the Herrmann dataset. This plot shows a
clear clustering of the websites with both very low variance
within website clusters and high degrees of separability
(i.e., spacing) between clusters.
Therefore, we expect bandwidth-based classiﬁcation
will work well as long as websites within the privacy
set do not have too much overlap in terms of total
per-direction bandwidth. Figure 9 shows that, indeed, the
bandwidth classiﬁer performs well. In fact, the real surprise
is just how well the bandwidth-only classiﬁer works for all
privacy set sizes despite the coarse nature of the feature. At
k = 2, the classiﬁer provides close to perfect accuracy of
over 99% against all countermeasures. Moreover, compare
the behavior of the bandwidth-only classiﬁer to that of the
LL and H classiﬁers (c.f., Figure 7), which do not use
bandwidth as a feature, as k increases. The bandwidth clas-
siﬁer is clearly more robust to changes in privacy set size.
This might seem surprising, since countermeasures such as
Pad to MTU and Session Random 255 should, intuitively,
obfuscate bandwidth usage. They do, but these per-packet
paddings only add noise to the low order bits of total
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:30 UTC from IEEE Xplore.  Restrictions apply. 
Figure 8. Each scatterplot is a visual representation of the ﬁrst ﬁfty traces, from the ﬁrst ﬁve websites in the Herrmann dataset. Each symbol of the
same shape and color represents the same web page. (left) Distribution of traces with respect to duration in seconds. (middle) Distribution of traces
with respect to bandwidth utilization, where we distinguish the upstream and downstream directions. (right) Distribution of traces with respect to the
number of bursts per trace.
bandwidth. Speciﬁcally, the change to bandwidth usage is
too small relative to what would be needed to make two
websites’ bandwidths likely to overlap signiﬁcantly. This is
true for all of the padding-based countermeasures (Type-1
and Type-2). Distribution-based countermeasures DTS and
TM, however, offer the best resistance to the bandwidth
classiﬁer for higher k values. Here, they outpace other
countermeasures by several percentage points. This seems
to be due to the insertion of dummy packets, which can add
more noise than per-packet padding for total bandwidth
use.
C. Variable n-gram
The time and bandwidth features already provide im-
pressive classiﬁcation ability despite their coarse nature,
but do not yet give the accuracy that
the Panchenko
classiﬁer achieves. We therefore look at a third feature,
that of burst bandwidth. A burst is a sequence of non-
acknowledgement packets sent in one direction that lie
between two packets sent in the opposite direction. The
bandwidth of a burst
is the total size of all packets
contained in the burst, in bytes. For instance, if we have
a trace of the form
(↑, 100), (↓, 1500), (↓, 100), (↑, 200), (↑, 300)
then there are three bursts with bandwidth 100, 1600, and
500. The intuition underlying this is that bursts correlate
with higher-level properties of the trafﬁc, such as indi-
vidual web requests. This observation was ﬁrst made by
Panchenko et al. [14].
The right-most plot in Figure 8 shows the number of
bursts for each of the ﬁrst 50 traces for ﬁve websites in
the Herrmann dataset. Even the number of bursts correlates
strongly with the web page visited. Although this relatively
limited information is capable of providing some classiﬁ-
cation ability, it turns out that burst bandwidths prove even
more powerful.
Recalling that an n-gram model would coalesce n
packets together into one feature, we can view bandwidth
bursts as a variable n-gram model in which n varies across
the trace. Then, our VNG (Variable n-Gram) classiﬁer par-
titions a trace into bursts, coalesces packets into variable
n-grams described by (direction, size) pairs, rounds the
resulting sizes up to the nearest multiple of 600 bytes7,
and then applies a na¨ıve Bayes classiﬁer. Figure 9 shows
how well the VNG classiﬁer performs, already achieving
better than 80% accuracy for all padding-based coun-
termeasures, and achieving signiﬁcantly higher accuracy
levels for distribution-based approaches than any other
classiﬁer except the P classiﬁer.
D. Combining Coarse Features: the VNG++ Classiﬁer
To extract all potential
identifying information from
these coarse features, we combine the time, bandwidth,
and variable n-gram classiﬁers to give a simple, yet
impressively effective, classiﬁer that dispenses with use
of individual packet lengths for classiﬁcation. Speciﬁcally,
we use total time, bandwidth in each direction of the con-
nection, and variable n-grams as features of a na¨ıve Bayes
classiﬁer. A graph of the VNG++ classiﬁer’s accuracy as
k varies is given in Figure 11.
In comparing VNG++ to the P classiﬁer, we note that the
latter uses a large assortment of features (as discussed in
Section III), including ﬁne-grained ones such as frequency
of individual packet lengths. It also applies a more compli-
cated machine learning algorithm in the form of an SVM.
Figure 11 depicts the performance of the P and VNG++
classiﬁers against the best performing countermeasures of
each type, as well as data with no countermeasure applied.
Note that for clarity the y-axis starts at 50%, unlike
other graphs. From this ﬁgure,
two clear trends arise.
First, VNG++’s performance against no countermeasure
degrades slightly faster with k than the P classiﬁer. This
highlights that ﬁne-grained features can provide some
small beneﬁt in classifying unprotected traces. Second,
7Panchenko et al. experimentally determine this rounding value as a
way to maximize classiﬁcation accuracy via dimensionality reduction.
340
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:50:30 UTC from IEEE Xplore.  Restrictions apply. 
Figure 9. The average accuracy against the raw encrypted trafﬁc (None), and the best countermeasures from each type, as established in Section V.
(left) the time-only classiﬁer. (middle) the bandwidth only classiﬁer. (right) the VNG (“burstiness”) classiﬁer.
Countermeasure
None
Session Random 255
Packet Random 255
Linear
Exponential
Mice-Elephants
Pad to MTU
Packet Random MTU
Direct Target Sampling
Trafﬁc Morphing
P
97.2 ± 0.2
90.6 ± 0.3
94.9 ± 0.3
96.8 ± 0.2
96.6 ± 0.3
94.5 ± 0.6
89.8 ± 0.4
92.1 ± 0.3
81.8 ± 0.5
88.7 ± 0.4
Classiﬁer
P-NB
98.2 ± 0.9
59.1 ± 2.3
93.7 ± 1.6
96.9 ± 1.1
97.4 ± 0.9
95.1 ± 0.8
91.7 ± 1.5