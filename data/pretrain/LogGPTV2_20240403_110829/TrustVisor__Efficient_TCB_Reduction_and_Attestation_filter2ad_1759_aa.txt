title:TrustVisor: Efficient TCB Reduction and Attestation
author:Jonathan M. McCune and
Yanlin Li and
Ning Qu and
Zongwei Zhou and
Anupam Datta and
Virgil D. Gligor and
Adrian Perrig
TrustVisor: Efficient TCB Reduction and Attestation 
Jonathan M. McCune, Ning Qu, Yanlin Li 
Anupam Datta, Virgil D. Gligor, Adrian Perrig 
March 9, 2009  
(revised March 10, 2010) 
CMU-CyLab-09-003 
CyLab 
Carnegie Mellon University 
Pittsburgh, PA 15213 
TrustVisor: Efﬁcient TCB Reduction and Attestation∗
Jonathan M. McCune Yanlin Li Ning Qu Zongwei Zhou
Anupam Datta Virgil Gligor Adrian Perrig
CyLab, Carnegie Mellon University
Abstract
An important security challenge is to protect the execution
of security-sensitive code on legacy systems from malware
that may infect the OS, applications, or system devices. Prior
work experienced a tradeoff between the level of security
achieved and efﬁciency. In this work, we leverage the fea-
tures of modern processors from AMD and Intel to overcome
the tradeoff to simultaneously achieve a high level of security
and high performance.
We present TrustVisor, a special-purpose hypervisor that
provides code integrity as well as data integrity and secrecy
for selected portions of an application. TrustVisor achieves
a high level of security, ﬁrst because it can protect sensitive
code at a very ﬁne granularity, and second because it has
a very small code base (only around 6K lines of code) that
makes veriﬁcation feasible. TrustVisor can also attest the ex-
istence of isolated execution to an external entity. We have
implemented TrustVisor to protect security-sensitive code
blocks while imposing less than 7% overhead on the legacy
OS and its applications in the common case.
1
Introduction
Current commodity operating systems and applications lack
formal assurance that the secrecy and integrity of security-
sensitive data are protected. The size and complexity of these
systems suggest that we will not achieve the level of assur-
ance necessary to guarantee the absence of security vulner-
abilities in these systems in the near future. Even the best-
engineered code contains bugs in proportion to its size [24],
and available formal methods – while holding great promise
for the future – are plagued by scalability challenges. Yet, the
convenience and low cost of commodity systems offer un-
matched appeal for both users and developers, dictating that
security-sensitive workloads will be run on these systems for
years to come.
This situation highlights the need for techniques to achieve
isolated execution of security-sensitive code without breaking
compatibility with legacy OSes. Indeed, in recent years many
∗This research was supported in part by CyLab at Carnegie Mellon under
grants DAAD19-02-1-0389 and MURI W 911 NF 0710287 from the Army
Research Ofﬁce, grant CNS-0831440 from the National Science Foundation,
and by a gift from AMD. The views and conclusions contained here are those
of the authors and should not be interpreted as necessarily representing the
ofﬁcial policies or endorsements, either express or implied, of AMD, ARO,
CMU, CyLab, NSF, or the U.S. Government or any of its agencies.
researchers have investigated approaches to execute security-
sensitive code while reducing the extent to which the legacy
OS and applications are included in the trusted computing
base for that code [7, 8, 14, 20, 22, 29, 30, 32, 35]. We
brieﬂy lay out the design space explored by existing work
and discuss the granularity of the code that is protected.
One possibility is to isolate an entire application from
the OS. Several proposals are based on the use of a full-
featured commodity VMM that always runs beneath the
legacy OS [7, 8, 14, 32, 35]. These works achieve limited
security properties because the entire application and VMM
code needs to be trusted, bloating the trusted computing base
(TCB) by several hundreds of thousands of lines of code.
High performance is the main advantage of these approaches.
The Flicker system [22] represents the other extreme of
the granularity spectrum, because it protects ﬁne granules of
security-sensitive code and adds only a few hundred lines
to the TCB. Unfortunately, Flicker incurs signiﬁcant perfor-
mance overhead due to its frequent use of hardware support
for a dynamic root of trust for measurement (DRTM) [2, 16].
In this paper, we aim to achieve the best of both worlds:
protect small security-sensitive code blocks within a poten-
tially malicious environment and yet achieve high perfor-
mance for legacy applications. More speciﬁcally, our goal
is to provide data secrecy and integrity, as well as execution
integrity for security-sensitive portions of an application, ex-
ecuting the code in isolation from the OS, untrusted appli-
cation code, and system devices. Execution integrity is the
property that code P actually executes with inputs Pinputs and
produces outputs Poutputs. Finally, we also enable external
entities to receive attestations that describe the execution of
security-sensitive code and optionally its parameters.
To accomplish these goals, we develop a special-purpose
hypervisor, called TrustVisor, designed to provide a mea-
sured, isolated execution environment for security-sensitive
code modules without trusting the OS or the application that
invokes the code module. This environment is initialized via
a DRTM-like process called the TrustVisor Root of Trust for
Measurement, or TRTM. TRTM interacts with a software-
based, “micro-TPM” (µTPM) that is part of TrustVisor and
executes at high speed on the platform’s primary CPU. We
restrict our µTPM to providing only basic randomness, mea-
surement, attestation, and data sealing facilities. Additional
trusted computing features can be leveraged by directly inter-
acting with the hardware TPM.
We have fully implemented TrustVisor on an AMD plat-
form, and report on its design, implementation, and evalua-
tion. We also discuss the effort of porting several legacy code-
bases to take advantage of TrustVisor’s protections. Trust-
Visor works on commodity x86 hardware with virtualization
support by leveraging DMA protection [2] and 2D page walk-
ing [5]. These mechanisms enforce (IO)MMU-based protec-
tion of TrustVisor itself and application-level security-sensi-
tive code and data from the OS, other applications, and mali-
cious DMA-capable peripherals (e.g., malware such as rootk-
its that exploit software vulnerabilities in the OS or applica-
tions, or DMA writes via Firewire peripherals). Legacy OSes
and applications remain compatible with TrustVisor; changes
are only required to applications that wish to leverage the pro-
tected environment. TrustVisor imposes less than 7% over-
head in the common case, and has a TCB of only 6351 lines
of code, over half of which implements cryptographic opera-
tions for the µTPM.
TrustVisor enables many exciting applications, but is par-
ticularly well suited for implementing oracle-like properties
for portions of applications. For example, the security of
many cryptographic primitives is based on an assumption that
an adversary has access to only a particular interface for the
primitive. This assumption can be challenging to enforce in
a real-world system as a result of its hierarchical privilege
model and large TCB. However, when implemented on Trust-
Visor, the interface and consequently the attack surface can be
carefully constrained.
Contributions. We design and implement a comprehensive
system that enables application developers to achieve strong
security guarantees for their data and code executing on com-
modity platforms, and to prove those security properties to an
external veriﬁer. The small TCB, efﬁciency, ease-of-use, and
commodity hardware support distinguish our approach from
previous efforts.
2 Adversary Model
We distinguish between a local adversary and a network ad-
versary, though the two may collude.
Local Adversary. We consider a local adversary with ac-
cess to two signiﬁcant system interfaces. First, we assume
that the adversary can execute arbitrary code as part of the
legacy OS and applications. Second, the adversary can ac-
cess the system’s DMA-capable devices, e.g., Firewire inter-
face. Thus, the adversary may be able to read or write se-
crets in memory without modifying the legacy OS. We do not
consider physical attacks against the system’s CPU, memory
controller, main memory, Trusted Platform Module (TPM),
or the busses that interconnect them.
Given the hierarchical privilege structure of legacy OSes,
this model gives the adversary the ability to tamper with exe-
cuting code of the legacy OS, both while it executes and when
the relevant executable and conﬁguration ﬁles are at rest in
non-volatile storage. Common manifestations of these abili-
ties are rootkits and Trojans.
This leaves us at the mercy of the adversary for availability.
However, we observe that today’s adversaries are ﬁnancially
motivated and often prefer to keep machines online. Fur-
thermore, the adversary does not have the ability to interfere
with the operation of hardware virtualization features such as
virtual machine control blocks (VMCBs), nested page tables
(NPTs), and the device exclusion vector (DEV) that operate
with higher privilege than the legacy OS.
Network Adversary. We adopt the standard Dolev-Yao
threat model [12] for network communication, thus giving
the network adversary the ability to block, inject, or modify
network trafﬁc between entities in our system. However, the
adversary cannot break cryptographic primitives.
3 Background
We describe the hardware dynamic root of trust mechanism
and the Flicker system [22], including its prerequisites, secu-
rity properties, and practical shortcomings.
3.1 Dynamic Root of Trust
Dynamic Root of Trust for Measurement (DRTM) is a mech-
anism available with AMD’s SVM extensions [2] and Intel’s
TXT extensions [16].
It enables the measured launch of a
protected code module at any time during a system’s opera-
tion. Measurement denotes computing a cryptographic hash
over code before it is executed. This process amounts to reini-
tializing all CPUs (but not other devices) to a well-known
state, computing a cryptographic hash over the relevant code
region after memory isolation and DMA protection mecha-
nisms are active, and before the launched code begins to exe-
cute. The measurement is extended into a Platform Conﬁgu-
ration Register (PCR) in the system’s TPM chip [33] in such a
way that this measurement can be distinguished as occurring
during the establishment of a DRTM (as opposed to a reboot).
This measurement process enables TPM-based remote at-
testation and data sealing. An attestation is a TPM-signed
list of PCR values that enables an external veriﬁer to make
a security decision about the attesting platform. Sealing is a
TPM function whereby data is encrypted such that it can only
be decrypted if the TPM’s PCRs contain pre-deﬁned values
(e.g., the values of a known-good version of a hypervisor).
We refer the interested reader to the relevant speciﬁcations
for additional background on the DRTM process [2, 15, 16].
3.2 The Flicker System
Flicker [22] demonstrates that it is possible to use current
trusted computing and hardware virtualization technologies
to dramatically reduce the TCB for certain security-sensitive
operations. Indeed, with Flicker, current commodity systems
are capable of securely executing code without the need to
trust the legacy OS. While a valuable proof-of-concept, sev-
eral characteristics of the Flicker system render it impractical
for use in situations with demanding performance (e.g., la-
tency, throughput) requirements.
Each Flicker session takes signiﬁcant time to execute an
application that maintains secrets because slow TPM opera-
tions are on the system’s critical path. During Flicker ses-
sions, the user perceives that her system momentarily hangs.
This user-experience can be quite disruptive and the perfor-
mance impact is unacceptable on even a moderately loaded
(e.g., tens of users) server. We show that much higher perfor-
mance is attainable with current hardware by slightly extend-
ing the size of the trusted code, but still remaining an order of
magnitude smaller than commodity VMMs.
Further, Flicker requires the security-sensitive code of in-
terest to be custom-compiled and linked with very few ex-
ternal dependencies. This complicates the development pro-
cess and makes debugging more difﬁcult. Though libraries of
commonly-used functions may be developed, a preferred so-
lution is one that can protect portions of existing legacy code
without modiﬁcation. TrustVisor employs a registration pro-
cess compatible with existing code, obtaining its advantage
primarily from its ability to understand legacy OSes’ mem-
ory paging structures.
4 TrustVisor Design
In §4.1, we present a design overview of TrustVisor. We then
offer its detailed presentation in two passes. §4.2 describes
the memory protection mechanisms that provide isolation
between TrustVisor, the legacy OS, zero or more security-
sensitive codeblocks, and DMA-capable peripheral devices
on the platform running TrustVisor. §4.3 then presents the
trusted computing aspects of TrustVisor, including both the
roots of trust for TrustVisor itself and the trusted computing
support available to security-sensitive code.
4.1 Design Overview
A primary goal of this work is to enable the execution of
self-contained security-sensitive codeblocks – called Pieces
of Application Logic, or PALs – in total isolation from a
legacy OS and DMA-capable devices. We further seek to
initialize the isolated execution environment via a process re-
sembling a hardware DRTM, but we want to avoid the severe
performance penalty paid by Flicker (e.g., tens or hundreds
of milliseconds per session [22, 23]) as a result of its de-
pendence on hardware TPM operations and frequent use of
hardware DRTM. We introduce TrustVisor’s isolation mech-
anisms, and then its use of trusted computing.
Memory Protection. TrustVisor has three basic operating
modes (Figure 1). Host mode refers to execution of TrustVi-
sor code at the system’s highest privilege level. TrustVisor in
turn supports two guest modes: legacy and secure.
In legacy guest mode, a commodity x86 OS and its appli-
cations can execute without requiring any awareness of the
presence of TrustVisor. The legacy OS manages all periph-
eral devices on the system (network, disk, display, USB, etc.),
with the TPM as the only device shared between TrustVisor
and the untrusted legacy OS.1
1TPM chips are memory-mapped to multiple addresses, each correspond-
ing to a different privilege level called a locality [33]. TrustVisor’s memory
protections prevent the legacy guest from accessing privileged localities.
App
PAL
Untrusted
Legacy
OS
App
PAL
Untrusted
Legacy
OS
App
PAL
Untrusted
Legacy
OS
TrustVisor
TrustVisor
TrustVisor
a. Host Mode
b. Legacy
c. Secure
Guest Mode
Guest Mode
Legend:
Accessible
Executing
Protected
Figure 1: TrustVisor memory protections from the perspec-
tive of executing code. (a) In host mode, TrustVisor is exe-
cuting in response to a trap or hypercall, and may manipulate
the state of a PAL, or the untrusted legacy OS or applica-
tions. (b) In legacy guest mode, TrustVisor isolates PAL state
and its own memory regions from the untrusted legacy code.
(c) In secure guest mode, a PAL is executing, and TrustVi-
sor isolates it from the memory regions of TrustVisor and the
untrusted legacy OS and applications.
In secure guest mode, a PAL executes in isolation from the
legacy OS and its applications. A PAL is identiﬁed to Trust-
Visor via a registration process that employs an application-
level hypercall interface, with the PAL execution environment
initialized by TrustVisor to a well-known, secure conﬁgura-
tion. Note that a PAL can also be a part of the OS itself if
making changes to the OS is practical. TrustVisor is orders
of magnitude smaller than a full OS, thereby bolstering its
ability to provide assured isolation between a PAL and all
untrusted code and devices on the system. All PAL input pa-
rameters are marshaled by TrustVisor into protected memory
before the PAL begins executing.
TrustVisor leverages available hardware virtualization sup-
port to provide memory isolation and DMA protection for
each PAL (Figure 2). In summary, TrustVisor provides isola-
tion by virtualizing a machine’s physical memory, enforcing
memory isolation between different PALs and untrusted code,
and protecting against malicious DMA reads and writes.
Trusted Computing. A DRTM-like mechanism provides
the valuable security properties of a known-good initial state,
memory protection from DMA accesses, and integrity mea-
surement of the launched code before it executes. We devise
a suitable mechanism for PALs called the TrustVisor Root of