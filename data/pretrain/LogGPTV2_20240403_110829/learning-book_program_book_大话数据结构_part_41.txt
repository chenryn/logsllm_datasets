### 项目管理中的关键路径

在项目管理中，关键路径是指从项目开始到结束的最长路径。在这个路径上，每个任务的时间都直接影响整个项目的完成时间。例如，在汽车制造过程中，发动机的组装和整车组装是关键活动，其总时间为5.5天。如果要缩短整个工期，必须减少关键路径上的任务时间。比如，将发动机制造时间缩短为2.5天，整车组装时间缩短为1.5天，则关键路径长度变为4.5天，从而减少了整个项目的工期。

### 关键路径的识别

对于简单的AOE（Activity on Edge）网络，如图7-9-3所示，人们可以直观地找到关键路径。但对于复杂的AOE网络，如图7-9-2所示，手动识别变得困难。因此，需要使用算法来自动识别关键路径。

#### 7.9.1 关键路径算法原理

为了更好地理解关键路径算法，我们通过一个例子来说明。假设一个学生放学回家后有四小时空闲时间，其中家庭作业需要两小时完成。有些学生会在前两小时完成作业，而有些则会拖延到最后两小时才开始。这里，家庭作业的最早开始时间是0小时，最晚开始时间是2小时。当这两个时间不相等时，意味着存在空闲时间。

如果我们要求学生在这四个小时内没有空闲时间，那么家庭作业的最早和最晚开始时间都是0小时，这意味着它是关键活动。

因此，我们需要定义以下参数：
1. **事件的最早发生时间 (etv)**：顶点 \( v_k \) 的最早发生时间。
2. **事件的最晚发生时间 (ltv)**：顶点 \( v_k \) 的最晚发生时间。
3. **活动的最早开工时间 (ete)**：弧 \( a_k \) 的最早发生时间。
4. **活动的最晚开工时间 (lte)**：弧 \( a_k \) 的最晚发生时间。

通过比较每个活动的最早和最晚开工时间，我们可以判断该活动是否是关键活动。如果两者相等，则该活动是关键活动。

#### 7.9.2 关键路径算法实现

我们将图7-9-2的AOE网转化为邻接表结构，如图7-9-4所示。在邻接表中，增加了权值域 `weight` 来存储弧的权值。

```c
typedef struct {
    int adjvex;
    int weight;
    struct EdgeNode *next;
} EdgeNode;

typedef struct {
    char data;
    int in;
    EdgeNode *firstedge;
} VertexNode;

typedef struct {
    VertexNode adjList[10];
    int numVertexes, numEdges;
} GraphAdjList;
```

求事件的最早发生时间 `etv` 的过程与拓扑排序类似。我们需要先调用拓扑排序算法来计算 `etv` 和拓扑序列列表。

```c
int* etv, *ltv;  // 事件最早和最晚发生时间数组
int* stack2;     // 用于存储拓扑序列的栈
int top2;        // 栈指针

Status TopologicalSort(GraphAdjList GL) {
    EdgeNode *e;
    int i, k, gettop;
    int top = 0;
    int count = 0;
    int *stack;

    stack = (int*)malloc(GL->numVertexes * sizeof(int));
    for (i = 0; i < GL->numVertexes; i++) {
        if (GL->adjList[i].in == 0) {
            stack[top++] = i;
        }
    }

    top2 = 0;
    etv = (int*)malloc(GL->numVertexes * sizeof(int));
    for (i = 0; i < GL->numVertexes; i++) {
        etv[i] = 0;
    }
    stack2 = (int*)malloc(GL->numVertexes * sizeof(int));

    while (top != 0) {
        gettop = stack[--top];
        count++;
        stack2[++top2] = gettop;

        for (e = GL->adjList[gettop].firstedge; e; e = e->next) {
            k = e->adjvex;
            if (--GL->adjList[k].in == 0) {
                stack[top++] = k;
            }
            if (etv[gettop] + e->weight > etv[k]) {
                etv[k] = etv[gettop] + e->weight;
            }
        }
    }

    if (count < GL->numVertexes) {
        return ERROR;
    } else {
        return OK;
    }
}
```

接下来，我们计算事件的最晚发生时间 `ltv` 和活动的最早和最晚开工时间 `ete` 和 `lte`。

```c
void CriticalPath(GraphAdjList GL) {
    EdgeNode *e;
    int i, gettop, k, j;
    int ete, lte;

    TopologicalSort(GL);

    ltv = (int*)malloc(GL->numVertexes * sizeof(int));
    for (i = 0; i < GL->numVertexes; i++) {
        ltv[i] = etv[GL->numVertexes - 1];
    }

    while (top2 != 0) {
        gettop = stack2[top2--];

        for (e = GL->adjList[gettop].firstedge; e; e = e->next) {
            k = e->adjvex;
            if (ltv[k] - e->weight < ltv[gettop]) {
                ltv[gettop] = ltv[k] - e->weight;
            }
        }
    }

    for (j = 0; j < GL->numVertexes; j++) {
        for (e = GL->adjList[j].firstedge; e; e = e->next) {
            k = e->adjvex;
            ete = etv[j];
            lte = ltv[k] - e->weight;

            if (ete == lte) {
                printf("Critical Activity: %s -> %s, Length: %d\n", GL->adjList[j].data, GL->adjList[k].data, e->weight);
            }
        }
    }
}
```

通过上述步骤，我们可以有效地识别出关键路径，并进行相应的优化。