    d3VGa1kvWjhqakoxakgvY3NGMzdtR1lBVXhwMzJuUms1d1JwL2M2ZVdaUE0rekdpYmZFbm1GVzV5VUVVClliW
    DRoenpHcjVRNmYvc3lzdXpoYXlsV2kzWEN2SXJINkxCakZOdTNVSjBWSXpjSk4wa3hhQUJhWFk4SlVEWVgKdF
    hVTGlwdlVPcWt0dE9xSlN4T1hXZzcyU1dLTEt2L1F2ZkRSVlhlZFVrMDY2azdSTDFva3BiTW53WWxmWWc3Sgp
    tcFpaUjJDTk53Yk1rUW0yVG1yQS9NWnVkdnF0c1g5UHBrZ0pJK1pXalV3VnRHUlVUZERNeFpXeDRIM25lSml5
    CjhtOHVkazQyUk4wajNuMHdWWHNXdDZRbXk3YlFzSFlYSUhVZ2tCWFl6ZHkvdStOb2RLQWpoZFZwaUpiekluY
    3oKU2RvbFhpbmlLd05VTFc4VmpqUzlLVFNSd2lkcWVPa2twTmVJcWlSbldUM1RUTUFNemI1ajBqRUdGN0wzRE
    9NUAo2UUlCQXc9PQotLS0tLUVORCBQVUJMSUMgS0VZLS0tLS0K"
对该字符串解码，得到公钥，然后用SHA256进行哈希散列得到flag：
    r10@kali:~/tisc$ public_key | base64 -d
    -----BEGIN PUBLIC KEY-----    MIIEIDANBgkqhkiG9w0BAQEFAAOCBA0AMIIECAKCBAEAm99b2pvtrViW+jN/3NFf
    w8g36dQR6iJr+cyRe+k8XFzuHUO4LN3tk76tFS8DbaCcYFiuf8GsugcRmQDErPZf
    qgkvXZpufffTfjTB+je/Wi43bwLqtw0W4cXoPW33uGVaWZX0oLzKC/Axg7kwItmG
    xnn321TAjEZgTbL+OaNkcHzfQ7UzwaEp9UPtT8pGYoNJHlX3fkFq2iVy77uI4gRK
    Mf8ujTfkIHHjQ7BEzgEgk8kqxGaSPlINQs65P4tvOpihqpwUVpAjPLNBTt9Hz1F/
    fR+aDsJQRKZNMrWRLuMYiO2Mx9cZBnwzL9KuFRvHelO7BWayU9f0XOpg/zybEQOL
    ux+jmsUsTsQbjK9cB67Ma21D+XJHyKgKuP9u14mVCZgCBk9lybS1bxdvFDQPgkyc
    M3z9vuucCU1Eu2D0lhFmJ3FQfZkAY++XHUpiwui9NO3A9UG7amyXbOSclF2X9kRq
    0CwmqOtBRBEWISe5rdzc/ATOP3PqDjGwySXxWZDCH8rrgnzWpv2LriYQTnf2cE0G
    /iI8RwjYoGLWzeLVRr1hhZ8Y5s4R/sR497WenkRcpOLOkDVge7MusTOWh4eNi4go
    PldsiYTqTndA1wV67r09ujpp8VvpdLuo+4h+7p/pfpXMsx8dALom4sfkYcJHhObk
    xt5CpNCkVXh5tsGheFb7v85GiNFy17zualMda32BinPeEbFrqKwD2Z4R5QgQuB8u
    IwjqSTgNo9Uvvch6lWCbj9e+80ugV4o7jHCd/56FkuvhCqiINdZDUU4ZB37hdelf
    eE9NbxDjKG8V7aCdwqJJDYGiz/3jmuCfB/k5FkoHSANgbLE0A5Smk3T8tuv8Sz+f
    v4rrPxmpn8X2Sm1Foz+U0BWzP+VLmpLnnyXkrOHyn8lJFbn/U5NWGRLn+ev2CSkw
    AI/TfHALqTvjqlGQxTTaY7Znkn5i+D1LztK8cpSZXdDVoRh+/vMIEiNuk8++/s6a
    HNd7wuFkY/Z8jjJ1jH/csF37mGYAUxp32nRk5wRp/c6eWZPM+zGibfEnmFW5yUEU
    YbX4hzzGr5Q6f/sysuzhaylWi3XCvIrH6LBjFNu3UJ0VIzcJN0kxaABaXY8JUDYX
    tXULipvUOqkttOqJSxOXWg72SWKLKv/QvfDRVXedUk066k7RL1okpbMnwYlfYg7J
    mpZZR2CNNwbMkQm2TmrA/MZudvqtsX9PpkgJI+ZWjUwVtGRUTdDMxZWx4H3neJiy
    8m8udk42RN0j3n0wVXsWt6Qmy7bQsHYXIHUgkBXYzdy/u+NodKAjhdVpiJbzIncz
    SdolXiniKwNULW8VjjS9KTSRwidqeOkkpNeIqiRnWT3TTMAMzb5j0jEGF7L3DOMP
    6QIBAw==
    -----END PUBLIC KEY-----    
    r10@kali:~/tisc$ printf "TISC20{%s}" $(public_key | shasum -a 256 | cut -d' ' -f 1)
    TISC20{8eaf2d08d5715eec34be9ac4bf612e418e64da133ce8caba72b90faacd43ceee}
**Flag:**
`TISC20{8eaf2d08d5715eec34be9ac4bf612e418e64da133ce8caba72b90faacd43ceee}`
## STAGE 3: Recover some files
这一关需要对Stage
2提供的`encrypted.zip`文件中被加密的文件进行解密。为了达到这个目的，我们需要了解勒索文件`anorocware`的内部运行流程。对`main.mian`进行检查，可以发现赎金条(ransom
note)被写入`ransomnote-anoroc.txt`文件中:
赎金条包含一个先前计算的`machineid.ID()`:
    $$$$$$$$\ $$$$$$\  $$$$$$\   $$$$$$\
    \__$$  __|\_$$  _|$$  __$$\ $$  __$$\
       $$ |     $$ |  $$ /  \__|$$ /  \__|
       $$ |     $$ |  \$$$$$$\  $$ |
       $$ |     $$ |   \____$$\ $$ |
       $$ |     $$ |  $$\   $$ |$$ |  $$\
       $$ |   $$$$$$\ \$$$$$$  |\$$$$$$  |
       \__|   \______| \______/  \______/
    Hello Sir / Madam,
    Your computer has been hax0red and your files are now to belong to me.
    We use military grade cryptography code to encrypt ur filez.
    Do not try anything stupid, u will lose ur beloved data.
    You have 48 hours to pay 1 Ethereum (ETH) to 0xc184e8BB0c8AA7326056D21C4Badf3eE58f04af2.
    Email PI:EMAIL proof of your transaction to obtain your decryption keys.
    PLEASE INCLUDE YOUR MACHINE-ID = 6d8da77f503c9a5560073c13122a903b IN YOUR EMAIL
    Your move,
    Anor0cW4re Team
    +++++ +++++ +++++ +++++ +++++ +++++
    DO NOT BE ALARMED;
    DO NOT SEND ETHEREUM TO ANY ACCOUNT;
    THIS IS AN EDUCATIONAL RANSOMWARE
    FOR CYBER SECURITY TRAINING;
    +++++ +++++ +++++ +++++ +++++ +++++
然后,URL`https://ifconfig.co/json`获取受害者网络的信息，填充了`city`和`ip`参数：
然后，生成两个随机数，分别代表`encryption key``encryption IV`：
然后，构造JOSN结构数据，包含字段`City``EncIV``EncKey``IP``MachineId`:
随后，对公钥进行解密、编码、解析：
接着，对JOSN字段进行URL编码：
处理后JOSN数据被转换为一个大数并求幂，可以理解为进行RSA操作：
随后，所有的数据将被写入`keydetails-enc.txt`文件中：
与此同时，域名生成算法`main.QbznvaAnzrTrarengvbaNytbevguz`执行，生成C2域名，并发送报告：
最后，通过`main.visit.func1`函数遍历整个目录，完成所有文件加密：
接下来，分析`main.visit.func1`函数，使用`EncKey`对AES-128密码进行初始化来对文件加密：
通过分析发现，IV并不是一个常量，而是将IV的前两个字节设置为文件名的前两个字节：
密码设置为CTR模式，加密数据输出到`.anoroc`后缀的文件中：
分析完毕了整个加密逻辑，为了进行文件解密，首先需要检查公钥：
    r10@kali:~/tisc$ openssl rsa -noout -text -inform PEM -in ./pub_key -pubin
    Public-Key: (8192 bit)
    Modulus:
        00:9b:df:5b:da:9b:ed:ad:58:96:fa:33:7f:dc:d1:
        5f:c3:c8:37:e9:d4:11:ea:22:6b:f9:cc:91:7b:e9:
        3c:5c:5c:ee:1d:43:b8:2c:dd:ed:93:be:ad:15:2f:
        03:6d:a0:9c:60:58:ae:7f:c1:ac:ba:07:11:99:00:
        c4:ac:f6:5f:aa:09:2f:5d:9a:6e:7d:f7:d3:7e:34:
    ...
        bf:bb:e3:68:74:a0:23:85:d5:69:88:96:f3:22:77:
        33:49:da:25:5e:29:e2:2b:03:54:2d:6f:15:8e:34:
        bd:29:34:91:c2:27:6a:78:e9:24:a4:d7:88:aa:24:
        67:59:3d:d3:4c:c0:0c:cd:be:63:d2:31:06:17:b2:
        f7:0c:e3:0f:e9
    Exponent: 3 (0x3)
这里指数为3，可以采用[cube-root
attack](https://crypto.stackexchange.com/questions/33561/cube-root-attack-rsa-with-low-exponent)思路。首先，将密文转换为十六进制：
    import binascii
    data = open("./dockerize/encrypted/keydetails-enc.txt", "rb").read()
    print("0x" + binascii.hexlify(data).decode("utf-8"))'
    r10@kali:~/tisc$ python conv_hex.py
    0x04aca8af91f97ef198ba32c820e8868deb693f86f763d3a2879a84fa8e7af6f396107701b480e453ec6
    9b7e3f72f02520f408a98c163db6c70f9902eab87c882b73c158e16be95dc4a9921fec3297586343b250f
    6cf58f3512e37de84e2f3d12639bec4f88ed5e68226fad6c2e5dbdfe9b44350aaedc61015e8f28cce50a6
    9c67f919f0c5d2c2c9073bf4d25afb299e65acf703880949b32f5e442e77cf527f6a8a3881ba1f94e7910
    3abb9c1a1f55a4735488e05d0a41fd7feb3b7c130c2139dcc4301a55d87806e04f45ce210ecbc971bfaf7
    a2ff090f39709f4025f658f7729eb1cfbef40cfce7d469d1095f60144e2f312b6493ce0cca37651890894
    25a04d035cdd6a80b131b231215141ae83f2a3410fc551ca30296be4ad3f7bf4cdb1e09583f97d445150c
    037f88d7ca765174f8b202b6a5f513dd9f20b430bbbbfc2309293271faac024b38cde3fc22555cd860ef7
    9ae16697982e37650c933ced29879280f2301d7efcc4967dd77e668a65afbc770d46669e67678f347c5d8
    5ffe05218d8ebeec470ca1d74ae8956589db43999a1643a95b0a72acf6ace052fdef8bcc63dc7ce670248
    66d4e7cb421965218614a41e0789c7239733e6f97c00f1db05bff3e1283e3790a4a9ac2e6f1cfa5084555
    f4412da28d7434bfa27d6b4cdf4da50889c9285c8ca0e606398bfb3b34894752667df01a28023b7297d3a
    16978f4a974cf2d04088
接着可以用Sage计算立方根：
    from sage.crypto.util import bin_to_ascii, ascii_to_bin
    c = 0x04aca8af91f97ef198ba32c820e8868deb693f86f763d3a2879a84fa8e7af6f396107701b480e45
    3ec69b7e3f72f02520f408a98c163db6c70f9902eab87c882b73c158e16be95dc4a9921fec3297586343b
    250f6cf58f3512e37de84e2f3d12639bec4f88ed5e68226fad6c2e5dbdfe9b44350aaedc61015e8f28cce
    50a69c67f919f0c5d2c2c9073bf4d25afb299e65acf703880949b32f5e442e77cf527f6a8a3881ba1f94e
    79103abb9c1a1f55a4735488e05d0a41fd7feb3b7c130c2139dcc4301a55d87806e04f45ce210ecbc971b
    faf7a2ff090f39709f4025f658f7729eb1cfbef40cfce7d469d1095f60144e2f312b6493ce0cca3765189
    089425a04d035cdd6a80b131b231215141ae83f2a3410fc551ca30296be4ad3f7bf4cdb1e09583f97d445
    150c037f88d7ca765174f8b202b6a5f513dd9f20b430bbbbfc2309293271faac024b38cde3fc22555cd86
    0ef79ae16697982e37650c933ced29879280f2301d7efcc4967dd77e668a65afbc770d46669e67678f347
    c5d85ffe05218d8ebeec470ca1d74ae8956589db43999a1643a95b0a72acf6ace052fdef8bcc63dc7ce67
    024866d4e7cb421965218614a41e0789c7239733e6f97c00f1db05bff3e1283e3790a4a9ac2e6f1cfa508
    4555f4412da28d7434bfa27d6b4cdf4da50889c9285c8ca0e606398bfb3b34894752667df01a28023b729
    7d3a16978f4a974cf2d04088
    ci = Integer(c)
    p = pow(ci, 1/3)
    pa = p.ceil().binary()
    print(bin_to_ascii("0" + pa))
得到`EncKey``EndIV`等字段的值：
    City=Singapore&EncIV=%1C%9F%A4%9B%2C%9EN%AF%04%9CA%AE%02%86%03%81&EncKey=%99z%11%12%7FjD%22%93%D2%A8%EB%1D2u%04&IP=112.199.210.119&MachineId=6d8da77f503c9a5560073c13122a903b
编写`decrypt_anoroc.py`对文件进行解密：
    from Crypto.Cipher import AES
    from Crypto.Util import Counter
    import sys
    import os.path
    IV = bytes.fromhex('1c9fa49b2c9e4eaf049c41ae02860381')
    KEY = bytes.fromhex('997a11127f6a442293d2a8eb1d327504')
    def main():
        filename = sys.argv[1]
        output = sys.argv[2]
        data = open(filename, 'rb').read()
        base = os.path.basename(filename)
        new_iv = base[:2].encode('utf-8') + IV[2:]
        cipher = AES.new(KEY, AES.MODE_CTR, initial_value=new_iv, nonce=b'')
        mt_bytes = cipher.decrypt(data)
        open(output, 'wb').write(mt_bytes)
    if __name__ == '__main__':
        main()
最终在解密后的数据库中找到flag:
    r10@kali:~/tisc$ python decrypt_anoroc.py ./encrypted/secret_investments.db.anoroc decrypted/secret_investments.db
    r10@kali:~/tisc$ sqlite3 decrypted/secret_investments.db
    SQLite version 3.31.1 2020-01-27 19:55:54
    Enter ".help" for usage hints.
    sqlite> .schema
    CREATE TABLE IF NOT EXISTS "stocks" (
        "id"    INTEGER NOT NULL UNIQUE,
        "symbol"    TEXT,
        "shares_held"    INTEGER,
        "target"    INTEGER,
        PRIMARY KEY("id" AUTOINCREMENT)
    );
    CREATE TABLE sqlite_sequence(name,seq);
    CREATE TABLE IF NOT EXISTS "ctf_flag" (
        "id"    INTEGER NOT NULL UNIQUE,
        "comp"    TEXT,
        "flag"    TEXT,
        PRIMARY KEY("id" AUTOINCREMENT)
    );
    sqlite> select * from ctf_flag;
    1|TSIC20|TISC20{u_decrypted_d4_fil3s_w0w_82161874619846}
**Flag:** `TISC20{u_decrypted_d4_fil3s_w0w_82161874619846}`
## STAGE 4: Where is the C2?
连接服务器得到提示：
    $$$$$$$$\ $$$$$$\  $$$$$$\   $$$$$$\
    \__$$  __|\_$$  _|$$  __$$\ $$  __$$\
       $$ |     $$ |  $$ /  \__|$$ /  \__|
       $$ |     $$ |  \$$$$$$\  $$ |
       $$ |     $$ |   \____$$\ $$ |
       $$ |     $$ |  $$\   $$ |$$ |  $$\
       $$ |   $$$$$$\ \$$$$$$  |\$$$$$$  |
       \__|   \______| \______/  \______/
    CSIT's The Infosecurity Challenge 2020
    https://play.tisc.csit-events.sg/
    CHALLENGE 4: WHERE IS THE C2?
    ======================================
    SUBMISSION_TOKEN? LdWaGOgyfbVQromGEgmzfADJYNpGEPKLUgjiudRJfMoKzpXyklQgNqSxSQeNYGsr
    Where (domain name) can we find the ransomware servers on 2054-03-21T16:19:03.000Z?
在Stage
3中我们分析得到`main.QbznvaAnzrTrarengvbaNytbevguz`函数生成了C2域名。对该函数进行进一步分析，发现它在端点`https://worldtimeapi.org/api/timezone/Etc/UTC.json`获取一个JOSN数据并进行编码：
该端点返回一堆与时区有关的值：
    {
       "abbreviation":"UTC",
       "client_ip":"",
       "datetime":"2020-09-17T21:29:49.031611+00:00",
       "day_of_week":1,
       "day_of_year":251,
       "dst":false,