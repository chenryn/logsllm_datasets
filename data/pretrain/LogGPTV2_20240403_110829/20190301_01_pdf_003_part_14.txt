### Copyright Notice
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.

## Database Compatibility for Oracle® Developers
### Built-in Package Guide

#### 3.12 DBMS_RANDOM
The `DBMS_RANDOM` package provides several methods to generate random values. The available procedures and functions are listed in the table below.

| Function/Procedure | Return Type | Description |
|--------------------|-------------|-------------|
| `INITIALIZE(val)` | n/a | Initializes the `DBMS_RANDOM` package with the specified seed value. Deprecated, but supported for backward compatibility. |
| `NORMAL()` | `NUMBER` | Returns a random `NUMBER`. |
| `RANDOM` | `INTEGER` | Returns a random `INTEGER` with a value greater than or equal to -2^31 and less than 2^31. Deprecated, but supported for backward compatibility. |
| `SEED(val)` | n/a | Resets the seed with the specified value. |
| `STRING(opt, len)` | `VARCHAR2` | Returns a random string. |
| `TERMINATE` | n/a | `TERMINATE` has no effect. Deprecated, but supported for backward compatibility. |
| `VALUE` | `NUMBER` | Returns a random number with a value greater than or equal to 0 and less than 1, with 38-digit precision. |
| `VALUE(low, high)` | `NUMBER` | Returns a random number with a value greater than or equal to `low` and less than `high`. |

#### 3.12.1 INITIALIZE
The `INITIALIZE` procedure initializes the `DBMS_RANDOM` package with a seed value.

**Signature:**
```sql
INITIALIZE(val IN INTEGER)
```

**Parameters:**
- `val`: The seed value used by the `DBMS_RANDOM` package algorithm.

**Example:**
```sql
DBMS_RANDOM.INITIALIZE(6475);
```

#### 3.12.2 NORMAL
The `NORMAL` function returns a random number of type `NUMBER`.

**Signature:**
```sql
result NUMBER := NORMAL()
```

**Parameters:**
- `result`: A random value of type `NUMBER`.

**Example:**
```sql
x := DBMS_RANDOM.NORMAL();
```

#### 3.12.3 RANDOM
The `RANDOM` function returns a random `INTEGER` value that is greater than or equal to -2^31 and less than 2^31.

**Signature:**
```sql
result INTEGER := RANDOM()
```

**Parameters:**
- `result`: A random value of type `INTEGER`.

**Example:**
```sql
x := DBMS_RANDOM.RANDOM();
```

#### 3.12.4 SEED
The `SEED` procedure resets the seed value for the `DBMS_RANDOM` package. It is available in two forms:

**First Form:**
```sql
SEED(val IN INTEGER)
```

**Second Form:**
```sql
SEED(val IN VARCHAR2)
```

**Parameters:**
- `val`: The seed value used by the `DBMS_RANDOM` package algorithm.

**Examples:**
```sql
-- Using an integer seed
DBMS_RANDOM.SEED(8495);

-- Using a string seed
DBMS_RANDOM.SEED('abc123');
```

#### 3.12.5 STRING
The `STRING` function returns a random `VARCHAR2` string in a user-specified format.

**Signature:**
```sql
result VARCHAR2 := STRING(opt IN CHAR, len IN NUMBER)
```

**Parameters:**
- `opt`: Formatting option for the returned string.
  - `u` or `U`: Uppercase alpha string
  - `l` or `L`: Lowercase alpha string
  - `a` or `A`: Mixed case string
  - `x` or `X`: Uppercase alpha-numeric string
  - `p` or `P`: Any printable characters
- `len`: The length of the returned string.
- `result`: A random value of type `VARCHAR2`.

**Example:**
```sql
x := DBMS_RANDOM.STRING('X', 10);
```

#### 3.12.6 TERMINATE
The `TERMINATE` procedure has no effect.

**Signature:**
```sql
TERMINATE
```

**Note:**
- The `TERMINATE` procedure should be considered deprecated; it is supported for backward compatibility only.

#### 3.12.7 VALUE
The `VALUE` function returns a random `NUMBER` that is greater than or equal to 0 and less than 1, with 38-digit precision. It is available in two forms.

**First Form:**
```sql
result NUMBER := VALUE()
```

**Second Form:**
```sql
result NUMBER := VALUE(low IN NUMBER, high IN NUMBER)
```

**Parameters:**
- `low`: The lower boundary for the random value. The random value may be equal to `low`.
- `high`: The upper boundary for the random value; the random value will be less than `high`.
- `result`: A random value of type `NUMBER`.

**Examples:**
```sql
-- First form
x := DBMS_RANDOM.VALUE();

-- Second form
x := DBMS_RANDOM.VALUE(1, 100);
```

### 3.13 DBMS_REDACT
The `DBMS_REDACT` package enables the redacting or masking of data returned by a query. It provides procedures to create, alter, enable, disable, and drop policies. The available procedures are listed in the table below.

| Function/Procedure | Function or Return Type | Description |
|--------------------|-------------------------|-------------|
| `ADD_POLICY(object_schema, object_name, policy_name, policy_description, column_name, column_description, function_type, function_parameters, expression, enable, regexp_pattern, regexp_replace_string, regexp_position, regexp_occurence, regexp_match_parameter, custom_function_expression)` | Procedure | Adds a data redaction policy. |
| `ALTER_POLICY(object_schema, object_name, policy_name, action, column_name, function_type, function_parameters, expression, regexp_pattern, regexp_replace_string, regexp_position, regexp_occurence, regexp_match_parameter, policy_description, column_description, custom_function_expression)` | Procedure | Alters the existing data redaction policy. |
| `DISABLE_POLICY(object_schema, object_name, policy_name)` | Procedure | Disables the existing data redaction policy. |
| `ENABLE_POLICY(object_schema, object_name, policy_name)` | Procedure | Enables a previously disabled data redaction policy. |
| `DROP_POLICY(object_schema, object_name, policy_name)` | Procedure | Drops a data redaction policy. |
| `UPDATE_FULL_REDACTION_VALUES(number_val, binfloat_val, bindouble_val, char_val, varchar_val, nchar_val, nvarchar_val, datecol_val, ts_val, tswtz_val, blob_val, clob_val, nclob_val)` | Procedure | Updates the full redaction default values for the specified datatype. |

**Note:**
- You must be the owner of the table to create or change the data redaction policies. Users are exempted from all column redaction policies, which the table owner or super-user is by default.

#### 3.13.1 Using DBMS_REDACT Constants and Function Parameters
The `DBMS_REDACT` package uses constants and redacts column data based on the `function_type` parameter of `dbms_redact.add_policy` and `dbms_redact.alter_policy` procedures. The table below highlights the values for these parameters.

| Constant Type | Value | Description |
|---------------|-------|-------------|
| `NONE` | 0 | No redaction, zero effect on the result of a query against the table. |
| `FULL` | 1 | Full redaction, redacts full values of the column data. |
| `PARTIAL` | 2 | Partial redaction, redacts a portion of the column data. |
| `RANDOM` | 4 | Random redaction, each query results in a different random value depending on the datatype of the column. |
| `REGEXP` | 5 | Regular Expression-based redaction, searches for the pattern of data to redact. |
| `CUSTOM` | 99 | Custom redaction type. |

The following table shows the values for the `action` parameter of `dbms_redact.alter_policy`.

| Constant Type | Value | Description |
|---------------|-------|-------------|
| `ADD_COLUMN` | 1 | Adds a column to the redaction policy. |
| `DROP_COLUMN` | 2 | Drops a column from the redaction policy. |
| `MODIFY_EXPRESSION` | 3 | Modifies the expression of a redaction policy. The redaction is applied when the expression evaluates to `TRUE`. |
| `MODIFY_COLUMN` | 4 | Modifies a column in the redaction policy to change the redaction function type or function parameter. |
| `SET_POLICY_DESCRIPTION` | 5 | Sets the redaction policy description. |
| `SET_COLUMN_DESCRIPTION` | 6 | Sets a description for the redaction performed on the column. |

**Partial Data Redaction:**
Partial data redaction allows you to redact only a portion of the column data. To use partial redaction, set the `dbms_redact.add_policy` procedure `function_type` parameter to `dbms_redact.partial` and use the `function_parameters` parameter to specify the partial redaction behavior.

**Datatype Formats for Partial Redaction:**
The data redaction feature provides predefined formats to configure policies for the following datatypes:
- Character
- Number
- Datetime

The table below highlights the format descriptors for partial redaction with respect to these datatypes.

| Datatype | Format Descriptor | Description | Examples |
|----------|-------------------|-------------|----------|
| **Character** | `REDACT_PARTIAL_INPUT_FORMAT` | Specifies the input format. Enter `V` for each character from the input string to be possibly redacted. Enter `F` for each character from the input string that can be considered a separator (e.g., blank spaces or hyphens). | `VVVFVVFVVVV,VVV-VV-VVVV,X,1,5` for masking the first 5 digits of SSN strings such as `123-45-6789`, resulting in `XXX-XX-6789`. |
| **Character** | `REDACT_PARTIAL_OUTPUT_FORMAT` | Specifies the output format. Enter `V` for each character from the input string to be possibly redacted. Replace each `F` character from the input format with a character such as a hyphen or any other separator. | `VVV-VV-VVVV` for redacting SSN strings into `XXX-XX-6789`. |
| **Character** | `REDACT_PARTIAL_MASKCHAR` | Specifies the character to be used for redaction. | `X` for redacting SSN strings into `XXX-XX-6789`. |
| **Character** | `REDACT_PARTIAL_MASKFROM` | Specifies which `V` within the input format from which to start the redaction. | `1` for redacting SSN strings starting at the first `V` of the input format `VVVFVVFVVVV` into `XXX-XX-6789`. |
| **Character** | `REDACT_PARTIAL_MASKTO` | Specifies which `V` within the input format at which to end the redaction. | `5` for redacting SSN strings up to and including the fifth `V` within the input format `VVVFVVFVVVV` into `XXX-XX-6789`. |
| **Number** | `REDACT_PARTIAL_MASKCHAR` | Specifies the character to be displayed in the range between 0 and 9. | `9, 1, 5` for redacting the first five digits of the Social Security Number `123456789` into `999996789`. |
| **Number** | `REDACT_PARTIAL_MASKFROM` | Specifies the start digit position for redaction. | - |
| **Number** | `REDACT_PARTIAL_MASKTO` | Specifies the end digit position for redaction. | - |
| **Datetime** | `REDACT_PARTIAL_DATE_MONTH` | `m` redacts the month. To mask a specific month, specify `m#` where `#` indicates the month specified by its number between 1 and 12. | `m3` displays as March. |
| **Datetime** | `REDACT_PARTIAL_DATE_DAY` | `d` redacts the day of the month. To mask with a day of the month, append `1-31` to a lowercase `d`. | `d3` displays as `03`. |
| **Datetime** | `REDACT_PARTIAL_DATE_YEAR` | `y` redacts the year. To mask with a year, append `1-9999` to a lowercase `y`. | `y1960` displays as `60`. |
| **Datetime** | `REDACT_PARTIAL_DATE_HOUR` | `h` redacts the hour. To mask with an hour, append `0-23` to a lowercase `h`. | `h18` displays as `18`. |
| **Datetime** | `REDACT_PARTIAL_DATE_MINUTE` | `m` redacts the minute. To mask with a minute, append `0-59` to a lowercase `m`. | `m20` displays as `20`. |
| **Datetime** | `REDACT_PARTIAL_DATE_SECOND` | `s` redacts the second. To mask with a second, append `0-59` to a lowercase `s`. | `s40` displays as `40`. |

The following table represents `function_parameters` values that can be used in partial redaction.

| Function Parameter | Data Type | Value | Description |
|--------------------|-----------|-------|-------------|
| `REDACT_US_SSN_F5` | `VARCHAR2` | `VVVFVVFVVVV,VVV-VV-VVVV,X,1,5` | Redacts the first 5 numbers of SSN. Example: The number `123-45-6789` becomes `XXX-XX-6789`. |
| `REDACT_US_SSN_L4` | `VARCHAR2` | `VVVFVVFVVVV,VVV-VV-VVVV,X,6,9` | Redacts the last 4 numbers of SSN. Example: The number `123-45-6789` becomes `123-45-XXXX`. |
| `REDACT_US_SSN_ENTIRE` | `VARCHAR2` | `VVVFVVFVVVV,VVV-VV-VVVV,X,1,9` | Redacts the entire SSN. Example: The number `123-45-6789` becomes `XXX-XX-XXXX`. |
| `REDACT_NUM_US_SSN_F5` | `VARCHAR2` | `9,1,5` | Redacts the first 5 numbers of SSN when the column is a number datatype. Example: The number `123456789` becomes `999996789`. |
| `REDACT_NUM_US_SSN_L4` | `VARCHAR2` | `9,6,9` | Redacts the last four numbers of SSN when the column is a number datatype. |

### Copyright Notice
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved.