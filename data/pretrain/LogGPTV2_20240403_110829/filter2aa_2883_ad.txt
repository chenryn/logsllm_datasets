• --severity-threshold to evaluate only policies with severity equal or larger than a threshold.
Additionally, rbac-police also supports policies that evaluate the effective permissions of a node—the 
union of its Kubelet permissions and pods’ permissions. Some of the more complex attacks require a 
number of permissions to execute. Thus, it is possible that while no single pod has all the permissions 
necessary to carry out an attack, a combination of pods on a node do. 
Check out rbac-police’s GitHub page for more information. If you run Kubernetes, consider trying it out. 
It takes seconds to run and provides a lot of valuable insight into your RBAC posture and possible risks.
rbac-police
We’re very excited to release rbac-police, a tool we used throughout this research to identify powerful 
permissions.
An open source command line interface (CLI) written in Golang, rbac-police retrieves the permissions 
of pods, nodes, and services accounts in a cluster, and evaluates them through built-in or custom Rego 
policies. Assessing the RBAC posture of your cluster is as easy as running ‘rbac-police eval lib’. 
The image below shows a slice of rbac-police’s output:
16
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Check out Checkov’s website for more information.
Recommendations
Tackling powerful RBAC permissions can be complex. They’re easy to miss and often asked by 
third-party add-ons or the underlying infrastructure. Even when you manage the powerful component, 
dropping permissions isn’t always straightforward and often involves code changes.
Whether you run Kubernetes clusters or maintain a popular Kubernetes project, below are best practic-
es and hardening measures that can improve your RBAC posture.
1. 
Follow the principle of least privilege: only assign explicitly required permissions: 
a.    When possible, use RoleBindings to grant permissions over a certain namespace rather than clus-
ter-wide. 
b.   Use resourceNames to scope down permissions to specific resources. 
2. 
Track powerful permissions and ensure they’re not granted to less-trusted or publicly exposed pods. 
If you maintain a Kubernetes project, document the powerful permissions asked by your platform.
3. 
Refrain from running powerful DaemonSets:
a.    Move functionalities that require powerful privileges from DaemonSets running on all nodes to 
deployments running on few or to control plane controllers. 
b.    Rely on the Kubelet credentials for operations that only involve objects bound to the local node, 
such as retrieving secrets of neighboring pods.
c.    Minimize write permissions by storing state in CRDs and ConfigMaps rather than in core objects 
like pods.
4. 
Isolate powerful pods from untrusted or publicly exposed ones using scheduling constraints like 
Taints and Tolerations, NodeAffinity rules, or PodAntiAfinity rules.
Checkov
Checkov is an open source static code analysis tool by Bridgecrew for scanning infrastructure as code (IaC) 
files for misconfigurations that may lead to security or compliance problems. Checkov shifts security left 
by alerting on misconfigurations before they’re committed to production environments. 
We’ve recently contributed four new RBAC checks that alert on Kubernetes IaC files containing Roles or 
ClusterRoles that define powerful permissions: CKV_K8S_155, CKV_K8S_156, CKV_K8S_157 and CKV_
K8S_158. These focus on highly powerful permissions that can be abused to manipulate authentication 
and authorization, such as impersonation. 
Checkov is currently adding support for graph checks that can evaluate connections between multiple 
Kubernetes resources. Once that feature is released, expect to see more RBAC checks added.
Figure 12: Checkov alerts on a ClusterRole with powerful permissions
17
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
5. 
Configure policy controllers to alert on automated identities such as service accounts and nodes that 
query for their permissions via the SelfSubjectReviews APIs. These requests may point to compro-
mised credentials.
6. 
Configure policy controllers to detect or prevent misuse of powerful permissions for nefarious activ-
ities. Abuse of powerful permissions often diverges from normal usage. See the examples below for 
more details.
Detecting Attacks with Admission Control
Quite often, compromised credentials exhibit irregular behaviors, and present an opportunity for de-
fenders to identify breaches. In Kubernetes, admission control can detect and prevent attacks powered 
by compromised credentials and privileged permissions. Policy controllers like OPA Gatekeeper and 
Kynvero can enforce policies that prevent or alert on suspicious requests to the Kubernetes API. Below 
are two examples for this approach using OPA Gatekeeper.
Suspicious SelfSubjectReviews
A common attacker pattern following credential theft is querying the system for their permissions. In 
Kubernetes, that is done via the SelfSubjectAccessReview or SelfSubjectRulesReview APIs. Non-human 
identities like serviceAccounts and nodes querying these APIs for their permissions are strong indica-
tors of compromise. A policy that detects these requests offers a great opportunity to catch compro-
mised credentials.
Here’s an example of a policy for OPA Gatekeeper that detects such queries.
Suspicious Assignment of Controller Service Accounts
By default, the kube-system namespace hosts several admin-equivalent service accounts that are used 
by controllers running as part of the api-server. Attackers that can create pods or pod controllers in 
the kube-system namespace, or modify pod controllers in kube-system namespace, can assign one 
of these admin-equivalent service accounts to a pod in their control and abuse their powerful token to 
gain complete control over the cluster. 
In the framework introduced in “Classifying Powerful Kubernetes Permissions,” this attack is classified 
under Acquire Tokens.
Controller service accounts aren’t normally assigned to running pods. Defenders can capitalize on that 
to detect this privilege escalation attack with a policy that alerts on requests that attach a controller 
service account to an existing or new kube-system pod. We wrote an example for OPA Gatekeeper, 
which is available here.
Conclusion
As outlined in this report, excessive RBAC permissions are common, easily missed, and can result in 
impactful privilege escalation attacks against Kubernetes clusters. At the same time, hardened RBAC 
settings can enforce least privilege, block unintended access, and demoralize attackers.
Maintaining a secure RBAC posture can be challenging due to the dynamic nature of Kubernetes and the 
number of third-party add-ons commonly used to operate modern clusters. Refer to the “Identifying 
Powerful Permissions” section for tools like rbac-police that can evaluate your RBAC posture, and see 
the “Recommendations” section for ways you can minimize risk and hold off attacks even when some 
powerful pods still exist in a cluster.
We’d like to thank the vendors and open source projects mentioned in this report for their collaboration 
as well as their efforts to minimize the distribution of powerful credentials in their platforms.
18
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
About
Prisma Cloud
Prisma® Cloud is a comprehensive cloud native security platform with the industry’s broadest secu-
rity and compliance coverage—for applications, data, and the entire cloud native technology stack—
throughout the development lifecycle and across hybrid and multicloud deployments. Prisma Cloud’s 
integrated approach enables security operations and DevOps teams to stay agile, collaborate effectively, 
and accelerate cloud native application development and deployment securely.
Prisma Cloud’s Cloud Workload Protection (CWP) module delivers flexible protection to secure cloud 
VMs, containers and Kubernetes apps, serverless functions and containerized offerings like Fargate tasks. 
Using the built-in admission control for Kubernetes, users can enforce policies that alert on suspicious or 
non-compliant activities in their cluster, including Kubernetes privilege escalation. Refer to CWP’s sam-
ple repository for admission policies that can detect the attacks outlined in this report
Prisma Cloud’s Cloud Code Security (CCS) module delivers automated security for cloud native infra-
structure and applications, integrated with developer tools. The module shifts security left by catching 
misconfigurations in code and IaC before they’re pushed to production. Prisma Cloud CSS is powered by 
Checkov, the popular open source policy-as-code IaC scanner, and will soon leverage the newly contrib-
uted Kubernetes RBAC checks to identify and alert on powerful permissions in Kubernetes manifests.
Unit 42
Unit 42 brings together our world-renowned threat researchers with an elite team of security consul-
tants to create an intelligence-driven, response-ready organization. The Unit 42 Threat Intelligence 
team provides threat research that enables security teams to understand adversary intent and attri-
bution while enhancing protections offered by our products and services to stop advanced attacks. As 
threats escalate, Unit 42 is available to advise customers on the latest risks, assess their readiness, and 
help them recover when the worst occurs. The Unit 42 Security Consulting team serves as a trusted 
partner with state-of-the-art cyber risk expertise and incident response capabilities, helping custom-
ers focus on their business before, during, and after a breach.
Authors
Yuval Avrahami, Principal Security Researcher, Palo Alto Networks
Shaul Ben Hai, Staff Security Researcher, Palo Alto Networks
Contributors
This report would not be possible without the tremendous work and efforts taken by the larger Palo Alto 
Networks team. The following people assisted significantly in its creation.
Reviewing
Ariel Zelivansky
Jay Chen
Nathaniel Quist
Sharon Ben Zeev
Editing
Grace Cheung
Aimee Savran
19
Prisma by Palo Alto Networks | Kubernetes Privilege Escalation: Excessive Permissions in Popular Platforms | White Paper
Appendix A: Powerful Permissions by Attack Class
Manipulate Authentication/Authorization (AuthN/AuthZ)
impersonate users/groups/serviceaccounts
Impersonate other identities, such as users, groups, and service accounts.
escalate roles/clusterroles
Add arbitrary permissions to existing roles or clusterroles.
bind rolebindings/cluster role bindings
Grant existing roles or clusterroles to arbitrary identities.
approve signers & update certificatesigningrequests/approval
Have an existing signer approve a certificatesigningrequest.
control mutating webhooks
Mutate admitted roles and clusterroles.
Acquire Tokens
list secrets
Retrieve service account tokens for existing service accounts in a namespace.
This attack is set to be addressed in the future by Kubernetes Enhancement Proposal (KEP) 2799: 
 Reduction of Secret-based Service Account Tokens.
create secrets
Issue new service account tokens for existing service accounts.
create serviceaccounts/token
Issue temporary service account tokens for existing service accounts via TokenRequests.
create pods
Assign an existing service account to a new pod, allowing the pod to access its token. Alternatively, attach 
the token secret of an existing service account token to a new pod as an environment variable or volume.
control pod controllers
Assign an existing service account to new or existing pods, allowing them to access its token. 
 Alternatively, attach the token secret for an existing service account token to new or existing pods as an 
environment variable or volume.
control validating webhooks 
Get tokens as they're created, for example when a token secret is created for a new service account.
control mutating webhooks
Get tokens as they're created, for example when a token secret is created for a new service account. 
Attach service account tokens to new pods.
Remote Code Execution
create pods/exec
Execute commands in an existing pod via the API server.
update pods/ephemeralcontainers
Attach a new container to an existing pod to execute code on it. Attach the container as privileged to 
execute code on the underlying node.
create nodes/proxy
Execute commands in the existing pod via the Kubelet.
control pods
Replace the image of a container by modifying an existing pod. Create a new privileged pod to execute 
code on a node.
control pod controllers
Freely create or modify pods via pod controllers like Deployments. Execute code on nodes by setting a 
container to be privileged.
control mutating webhooks
Mutate admitted pods and execute code by replacing the image, command, arguments, environment 
variable, or volumes for one of their containers.
3000 Tannery Way
Santa Clara, CA 95054
Main: 
+1.408.753.4000
Sales: 
+1.866.320.4788
Support: +1.866.898.9087
www.paloaltonetworks.com
© 2022 Palo Alto Networks, Inc. Palo Alto Networks is a registered   
trademark of Palo Alto Networks. A list of our trademarks can be found at 
https://www.paloaltonetworks.com/company/trademarks.html. All other 
marks mentioned herein may be trademarks of their respective companies. 
prisma_wp_kubernetes-privilege-escalation_051222
Steal Pods
modify nodes
Evict a pod by tainting its node with the NoExecute effect. Ensure its replacement (given the pod is 
managed by ReplicaSets, for example) lands on a specific node by marking others as unscheduled, for 
example via a NoSchedule taint.
modify nodes/status
Mark a node as unschedule, for example by setting its pod capacity to 0.
create pods/eviction
Evict a pod, mainly in order to cause controllers like ReplicaSets to respawn it.
delete pods
Delete a pod to cause controllers like ReplicaSets to respawn it.
delete nodes
Delete a node to delete its pods, and cause controllers like ReplicaSets to respawn it.
modify pods/status
Match a pod's labels to the selector of an existing replica controller (e.g. a ReplicaSet) in the same 
namespace, to trick it into deleting an existing replica. Ensure the fake pod isn't the one being deleted 
by setting his ready time to be the earliest among replicas.
modify pods
Match a pod's labels to match the selector of a replica controller like a ReplicaSet in the same 
 namespace, to trick it into deleting an existing replica.
Meddler-in-the-Middle
control endpointslices
Modify existing endpointslices for existing services to redirect some of their traffic. Create new end-
pointslices for existing services to redirect some of their traffic.
modify endpoints
Modify the endpoint of an existing service to redirect the service's traffic elsewhere. This attack is nul-
lified on clusters configured to use endpointslices instead of endpoints.
modify services/status
Attach a Load Balancer IP to exploit CVE-2022-8554 and redirect traffic from pods and nodes from 
their designated target to existing endpoints.
modify pods/status
Match a pod's labels to the selector of a service in the same namespace to intercept some of its traffic.
modify pods
Match a pod's labels to the selector of a service in the same namespace to intercept some of its traffic.
create services
Create an ExternalIP service to exploit CVE-2022-8554 and redirect traffic from pods and nodes from 
their designated target to existing endpoints.
control mutating webhooks
Mutate newly admitted services, endpoints and endpointslices to redirect cluster traffic.