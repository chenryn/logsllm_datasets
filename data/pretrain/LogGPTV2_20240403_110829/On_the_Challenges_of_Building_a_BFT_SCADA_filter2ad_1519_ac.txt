### 6. Message Flow in SMaRt-SCADA

The following sequence illustrates the message flow when a write value is executed in SMaRt-SCADA:

1. **WriteValue (ID, I/O)**
2. **DAC (Data Access Client)**
3. **DAS (Data Access Server)**
4. **DAC (Data Access Client)**
5. **DAS (Data Access Server)**
6. **WriteResult (ID)**
7. **Byzantine Agreement**
8. **DAC (Data Access Client)**
9. **DAS (Data Access Server)**
10. **WriteResult (ID)**
11. **DAC (Data Access Client)**
12. **AES (Alarm and Event Server)**
13. **AEC (Alarm and Event Client)**
14. **WriteResult (ID)**
15. **EventUpdate (ID)**

In this process, the ProxyHMI (steps 14 and 14a) waits for \( f + 1 \) equal messages for `WriteResult` and `EventUpdate` (steps 15 and 15a), respectively. The `WriteResult` message is then forwarded to the DA server (step 16), while the `EventUpdate` message is sent to the AE server (step 16a). Finally, the HMI receives these messages.

During the write operation, the SCADA Master's liveness can be compromised. Specifically, when the SCADA Master sends a `WriteValue` message to the Frontend via the ProxyFrontend, the ProxyMasterâ€™s DA client remains blocked until it receives a `WriteResult` message. If this message never arrives, the SCADA Master will be indefinitely blocked. To prevent this, we implemented a timeout mechanism within the Adapter. When the `WriteValue` message is forwarded to the Frontend, a timeout is triggered. Each Adapter sends a timeout message to the other Adapters if a `WriteResult` message is not received. When a majority of timeout messages are received, an empty `WriteResult` message is sent to the SCADA Master, indicating that a timeout has occurred. This ensures the liveness of the SCADA Master even if an attacker drops `WriteValue` or `WriteResult` messages.

### V. Experimental Evaluation

This section presents a preliminary experimental evaluation comparing the performance of SMaRt-SCADA with the original NeoSCADA.

#### A. System Configuration

The experiments were conducted on machines equipped with two quad-core 2.27 GHz Intel Xeon E5520 processors, 32 GB of RAM, and interconnected by a Gigabit Ethernet switch. The machines run Linux Ubuntu 14.04 (64-bit) with kernel version 3.13.0-32-generic and Oracle Java 1.7.0_80-b15.

- **NeoSCADA**: Deployed on three machines, each containing one component: Frontend, SCADA Master, and HMI.
- **SMaRt-SCADA**: Deployed on six machines: one Frontend, four SCADA Masters, and one HMI, each with its corresponding proxy.

#### B. Update Item Workload

We evaluated a scenario where the Frontend updates a set of items and sends the updates to the SCADA Master, which then forwards them to the HMI. We considered 1000 `ItemUpdate` messages per second to simulate the workload used in the intrusion-tolerant logical timeout protocol of Kirsch et al. [9]. This workload emulates a scenario where 1000 RTUs are updated every second and propagate their information to the Frontend. We simplified this experiment by removing the RTUs, as the Frontend generates the messages. This workload was validated with the staff of an electrical company, who confirmed it is significantly above typical operational levels, even during crises.

**Results:**

- **Figure 8(a)**: Shows the number of messages processed by NeoSCADA and SMaRt-SCADA. There is a 6% performance drop in SMaRt-SCADA due to additional steps required for updates. In NeoSCADA, each `ItemUpdate` message takes 3 communication steps from the Frontend to the HMI, whereas in SMaRt-SCADA, it takes 9 steps. Each `ItemUpdate` message in SMaRt-SCADA is executed in each SCADA Master after a Byzantine agreement and voting in the ProxyHMI.

- **Figure 8(b)**: Illustrates the number of messages processed with alarms. We ran both solutions in two alarm scenarios: 50% and 100% of `ItemUpdate` messages triggering alarms. While NeoSCADA processed all messages, SMaRt-SCADA showed an overhead of 10% and 25% for the 50%- and 100%-alarms scenarios, respectively. The throughput decrease reflects the additional communication steps introduced by our solution.

#### C. Write Value Workload

We evaluated the performance of both solutions for the `Write value` use case, considering synchronous writes by the HMI in a Frontend item. For each write operation, the HMI waits until the operation is completed.

**Results:**

- **Figure 8(c)**: Shows the number of writes performed in both solutions. SMaRt-SCADA introduces an overhead of 78%, resulting from the additional 10 communication steps required for the write operation. Additionally, since the SCADA Master in our solution is single-threaded, it does not fully utilize multi-core CPUs. However, the BFT-SMaRt library itself is not the bottleneck, as it achieves a throughput of 16k requests/sec for similar message sizes [12]. The throughput achieved by SMaRt-SCADA is sufficient for real-world workloads, as it is virtually impossible for human operators to perform almost 100 commands/second.

### VI. Related Work

There are few works dedicated to building dependable SCADA systems. Kirsch et al. [9] made the first attempt to build a BFT SCADA Master using state machine replication. Although they integrated their BFT library with a real SCADA Master product, they provided limited details about integration issues. They presented two challenges and solutions: a logical timeout for synchronizing replicas and a communication abstraction for bi-directional, asynchronous communications. In our work, we used a similar logical timeout, and BFT-SMaRt allows clients to send and receive asynchronous messages.

Spire [10] is the first complete intrusion-tolerant SCADA system, designed to tolerate faults in the system and/or network. It requires a significant number of nodes to support availability in the presence of simultaneous intrusions. Our work complements Spire by providing insights into the challenges of replicating a SCADA service.

### VII. Lessons Learned & Conclusion

In this paper, we presented the challenges in building a BFT SCADA system by integrating two open-source projects. We designed and implemented the SMaRt-SCADA prototype, making several design and implementation decisions. Key lessons learned include:

- **SMR Determinism**: Ensuring determinism in SCADA systems is crucial for availability. Active replication (e.g., SMR) helps by eliminating the need to change replica roles upon failures. We dedicated significant effort to guaranteeing SMR properties, including sequential execution and eliminating asynchronous messages and multi-threading.
  
- **BFT Replication Suitability**: BFT replication, while more robust, incurs additional costs due to tolerance of malicious faults. Our evaluation shows a performance loss compared to NeoSCADA, primarily due to message serialization bottlenecks. Alternatives, such as using a BFT library that supports multi-threading, could mitigate this impact.

- **Cost of Transparent Solutions**: Minimizing modifications in both SCADA and BFT library code simplified integration but impacted performance. Placing proxies between the SCADA and BFT library introduced additional processing steps. Deep integration would be more complex and limit future changes in both projects.

### Acknowledgments

This work was partially supported by the EC through project FP7 SEGRID (607109), by the FCT through the project Abyss (PTDC/EEI-SCR/1741/2014), and LASIGE Research Unit (UID/CEC/00408/2013).

### References

[References remain unchanged and are listed at the end of the document.]