(6)
WriteValue(ID,I/O)
V
(7)
DAC (8)
DAS
DAC (9)
DAS
(10)
WriteResult(ID)
Byzantine
agreement
DAC (11)
DAS
(12)
WriteResult(ID)
DAC
(13)
DAC
AES
(13a)
AEC
(14) WriteResult(ID)
(14a)EventUpdate(ID)
(15)
(16)
DAC
V
DAS
(15a)
V
AEC
(16a)
AES
Fig. 7. The messages ﬂow when a write value is executed in SMaRt-SCADA.
ProxyHMI (14 and 14a), the ProxyHMI waits for f + 1 equal
messages for WriteResult and EventUpdate (15 and
15a), respectively. There the WriteResult message goes to
the DA server (16) and the EventUpdate goes to the AE
Server (16a). Finally, the HMI receives these messages.
During the write operation, the SCADA Master liveness can
be compromised. More precisely, when the SCADA Master
sends a WriteValue message to the Frontend via the Prox-
yFrontend. The ProxyMaster’s DA client stays blocked until
it receives a WriteResult message. If such message never
arrives, the SCADA Master will be blocked forever. To prevent
this, we used an approach similar to the one that was prepared
in [9]. The Adapter contains a timeout mechanism that is
triggered when the WriteValue message is forwarded to the
Frontend. Each Adapter sends to the other Adapters a timeout
message informing that a timeout was exceeded due to a
missing WriteResult message. When a majority of timeout
messages arrive at each Adapter, an empty WriteResult
message is sent to the SCADA Master informing that a timeout
has occurred. This way, we can ensure the liveness of the
SCADA Master even if an attacker drops WriteValue or
WriteResult messages.
V. EXPERIMENTAL EVALUATION
This section presents a preliminary experimental evaluation
comparing the performance of SMaRt-SCADA with the orig-
inal NeoSCADA.
The machines used in the experiments have two quad-core
2.27 GHz Intel Xeon E5520 with 32 GB of RAM memory and
are interconnected by a Gigabit Ethernet switch. The machines
168
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
t
u
p
h
g
u
o
r
h
T
)
c
e
s
/
s
p
o
(
 1000
 800
 600
 400
 200
 0
1000
 800
 600
 400
 200
 0
NeoSCADA
SMaRt-SCADA
(a) Update value use case.
NeoSCADA
SMaRt-SCADA
(50% alarms)
SMaRt-SCADA
(100% alarms)
(b) Update value use case with the AE subsys-
tem.
500
400
300
200
100
 0
NeoSCADA
SMaRt-SCADA
(c) Write value use case.
Fig. 8. Performance evaluation between NeoSCADA and SMaRt-SCADA.
run Linux Ubuntu 14.04 (64-bit) with kernel version 3.13.0-
32-generic and Oracle Java 1.7.0 80-b15.
We deployed the NeoSCADA in three machines, each one
containing its component: Frontend, SCADA Master, and
HMI. In contrast, we deployed the SMaRt-SCADA in six
machines: one Frontend, four SCADA Masters, and one HMI,
each one also containing its corresponding proxy.
A. Update Item workload
We started our evaluation by deploying a scenario where the
Frontend contains a set of items that are being updated, and
then the Frontend sends the updates to the SCADA Master
which then forwards them to the HMI. In this experiment,
we considered 1000 ItemUpdate messages per second to
simulate the same workload used to evaluate the intrusion-
tolerant
logical timeout protocol of Kirsch et al. [9]. This
workload emulates a scenario wherein every second 1000
RTUs are updated and then propagate their information to the
Frontend. We have simpliﬁed this experiment by removing the
RTUs, as the Frontend generate the messages. We validated
this workload with the staff of an electrical company that runs
a country-scale SCADA, and they said that it is signiﬁcantly
above to what they typically observe, even in a crisis.
Figure 8(a) illustrates the number of messages processed
by NeoSCADA and SMaRt-SCADA. There is a performance
drop of 6% in the SMaRt-SCADA due to the additional
steps needed to perform the updates (see Figures
3 and
6): In NeoSCADA, each ItemUpdate message takes 3
communication steps to go from the Frontend to the HMI,
but in the SMaRt-SCADA the same operation takes 9 steps.
In SMaRt-SCADA, each ItemUpdate message is executed
in each SCADA Master after the ProxyMasters execute a
Byzantine agreement and later is voted in the ProxyHMI.
We repeated this experiment to understand the overhead
associated with the setup of alarms. More precisely, we added
the Monitor handler in the SCADA Master to verify whether
the items value passes a certain threshold. When that occurs,
an EventUpdate message is produced, saved the internal
storage, and ﬁnally sent to the HMI. In this experiment, we
exercise both the DA and AE subsystems.
Figure 8(b) shows the number of messages processed. We
ran both solutions in two different alarm scenarios. In one
scenario, we considered that every ItemUpdate message
triggers an alarm (100%-alarms), while in the other, half of
them do it (50%-alarms). While NeoSCADA was able to
process all messages for both percentages of alarms, SMaRt-
SCADA presents an overhead of 10% and 25% for the 50%-
and 100%-alarms scenarios, respectively. The throughput de-
crease reﬂects the additional communication steps introduced
by our solution. In particular, in the 100%-alarms scenario the
number of events that go to storage is twice what was observed
in the 50%-alarms scenario.
B. Write Value workload
In this last experiment, we evaluated the performance of
both solutions for the Write value use case. We considered that
the HMI performs synchronous writes in a Frontend’s item.
This means that, for each write operation, the HMI waits until
the operation is completed.
Figure 8(c) illustrates the number of writes that can be
performed in both solutions. We can observe that the SMaRt-
SCADA introduces an overhead of 78%. This signiﬁcant
throughput decrease results from the additional 10 commu-
nications steps that our solution needs to perform the write
operation (see Figures 4 and 7). Additionally, since in our
solution the SCADA Master is single threaded, it does not take
full advantage of multi-core CPUs. Moreover, we observed
that the BFT-SMaRt is not the bottleneck of our system, as it
reaches a throughput of 16k requests/sec for a similar message
size (1024k bytes) [12]. However, the throughput achieved
by SMaRt-SCADA is sufﬁcient to accommodate a real-world
workload, as it is virtually impossible for a group of human
operators to perform almost 100 commands/second.
VI. RELATED WORK
There are only a few works dedicated to the effort of
building dependable SCADA systems. Kirsch et al. made
the ﬁrst attempt to build BFT SCADA Master using state
machine replication [9]. Although there was an integration of
their BFT library with a real SCADA Master product, the
authors provided few details about the issues raised during
the integration of the system with a BFT library. However,
they presented two detailed challenges and solutions. The ﬁrst
challenge concerns the type of communication of a traditional
SCADA system, within a replicated environment. The authors
proposed a logical timeout to synchronize the replicas polling
the RTUs. The second challenge is related to the typical
communication pattern of state machine replication, i.e., a
client makes a request and waits for the response of the
servers. In a SCADA scenario, the communications can be
bi-directional and asynchronous, since it is event-driven. The
authors developed a communication abstraction between the
169
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply. 
clients (e.g., HMI and Frontends) and the SCADA Masters.
In our work, we used a similar logical timeout and the second
challenge is solved by BFT-SMaRt that allows clients to send
and receive asynchronous messages.
Spire [10] is the ﬁrst complete intrusion-tolerant SCADA
system. It was designed to tolerate faults in the system
and/or the network. Moreover, Spire main goal was to tackle
the worst case scenario, whereas highly determined attackers
can overpass the existent intrusion-tolerant techniques. Their
solution requires a signiﬁcant extra number of nodes to support
availability in the presence of simultaneous intrusions. The
system was tested in a wide-area deployment with two control
centers (i.e., in site) connected to and two data centers (i.e.,
external to the SCADA infrastructure facilities). Our work is
complementary to Spire as it provides no discussion about the
challenges of replicating a SCADA service.
VII. LESSONS LEARNED & CONCLUSION
In this paper, we presented the challenges in building a BFT
SCADA system by integrating two open-source projects. We
designed a solution to address these challenges, implementing
the SMaRt-SCADA prototype as a result. In this process, we
had to make a few design and implementation decisions. We
think that some of the learned lessons can be useful for works
that need to build a BFT SCADA Master from a single server:
a) SMR determinism: The availability of SCADA systems
is a major concern for utility companies. Although primary-
backup conﬁgurations are more attractive as they use fewer
resources,
the response-time to failures could compromise
the correct functioning of critical infrastructures. Using active
replication (e.g., SMR) solves part of this problem, as there
is no need to change the replicas’ roles upon failures. In this
work, we dedicated a signiﬁcant amount of effort to guarantee
SMR properties. In the integration process, we had to make
the SCADA Master execute sequentially,
i.e., eliminating
asynchronous messages and multi-threading execution.
b) Is BFT replication suitable for SCADA systems? BFT
replication is a step further from the SMR, with additional
costs due to the tolerance of malicious faults. Our evaluation
indicates a performance loss from the original NeoSCADA.
However, the overhead was not introduced by the BFT library
itself, as its maximum throughput was reported to be several
times greater than ours. The main cause for this performance
loss was the message serialization bottleneck introduced to
guarantee determinism. Nevertheless, we do not dispute al-
ternatives to our implementation in a way to accommodate
BFT into a SCADA with a minor performance impact. For
example, by using a BFT library that supports multi-threading
(e.g., [17], [18]). Moreover, Alchieri et al. have implemented
paralelism in BFT-SMaRt reconﬁgurations [19].
c) The cost of transparent solutions: We decided to mini-
mize the modiﬁcations in both SCADA and BFT library code.
As they already have a signiﬁcant amount of code, i.e., BFT-
SMaRt has ≈ 15k lines of code, and Eclipse NeoSCADA has
≈ 875k lines of code. Then, we decided to keep the original
SCADA and BFT library design, to simplify the software
integration. However, it had an impact on the SCADA Master
performance, as placing proxies between the SCADA and BFT
library introduced additional processing steps. The alternative
would be to integrate both projects more deeply. However, this
integration would be far more complex and would limit future
changes in both projects.
ACKNOWLEDGMENTS
This work was partially supported by the EC through project
FP7 SEGRID (607109), by the FCT through the project
Abyss (PTDC/EEI-SCR/1741/2014), and LASIGE Research
Unit (UID/CEC/00408/2013).
REFERENCES
[1] S. Surisetty and S. Kumar, “Is McAfee SecurityCenter/Firewall Software
Providing Complete Security for Your Computer?” in Procs. of the Int.
Conf. on Digital Society, 2010.
[2] R. Sommer and V. Paxson, “Outside the Closed World: On Using
Machine Learning for Network Intrusion Detection,” in Procs. of the
IEEE Symp. on Security and Privacy, 2010.
Falliere.
[3] N.
tion
exploring-stuxnet-s-plc-infection-process. Symantec.
Exploring
Infec-
http://www.symantec.com/connect/blogs/
Stuxnet’s
Process.
(2010)
[4] Kaspersky Lab. (2017) The State of Industrial Cybersecurity 2017.
PLC
https://go.kaspersky.com/rs/802-IJN-240/images/ICS
[5] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed, “ZooKeeper: Wait-free
Coordination for Internet-scale Systems,” in Procs. of the USENIX Conf.
on USENIX Annual Technical Conf., 2010.
[6] B. Calder et al., “Windows Azure Storage: A Highly Available Cloud
Storage Service with Strong Consistency,” in Procs. of the ACM Symp.
on Operating Sys. Principles, 2011.
[7] J. Corbett et al., “Spanner: Google’s Globally Distributed Database,”
ACM Trans. on Comp. Sys., vol. 31, no. 3, 2013.
[8] P. Ver´ıssimo, N. Neves, and M. Correia, Intrusion-Tolerant Architec-
tures: Concepts and Design. Springer, 2003.
[9] J. Kirsch, S. Goose, Y. Amir, D. Wei, and P. Skare, “Survivable SCADA
Via Intrusion-Tolerant Replication,” IEEE Trans. on Smart Grid, vol. 5,
no. 1, 2014.
[10] A. Babay, T. Tantillo, T. Aron, M. Platania, and A. Y., “Network-Attack-
Resilient Intrusion-Tolerant SCADA for the Power Grid,” in Procs. of
the IEEE/IFIP Int. Conf. on Dependable Sys. and Networks, 2018.
[11] Eclipse. (2017) NeoSCADA. https://www.eclipse.org/eclipsescada/.
[12] A. Bessani, J. Sousa, and E. Alchieri, “State Machine Replication for
the Masses with BFT-SMaRt,” in Procs. of the IEEE/IFIP Int. Conf. on
Dependable Sys. and Networks, 2014.
[13] J. Rose.
(2015) How E.ON uses open source IoT technology
energy plants.
for monitoring & control of
https://www.eclipsecon.org/europe2015/session/how-eon-uses-open-
source-iot-technology-monitoring-control-their-renewable-energy-
plants.html.
renewable
their
[14] M. Castro and B. Liskov, “Practical Byzantine Fault-Tolerance and
Proactive Recovery,” ACM Trans. on Comp. Sys., vol. 20, no. 4, 2002.
[15] F. Schneider, “Implementing Fault-tolerant Services Using the State
Machine Approach: A Tutorial,” ACM Comp. Surveys, vol. 22, no. 4,
1990.
[16] M. Garcia, A. Bessani, I. Gashi, N. Neves, and R. Obelheiro, “Analysis
of operating system diversity for intrusion tolerance,” Software: Practice
and Experience, vol. 44, no. 6, 2014.
[17] R. Kotla and M. Dahlin, “High throughput Byzantine fault tolerance,”
in Procs. of the IEEE/IFIP Int. Conf. on Dependable Sys. and Networks,
2004.
[18] M. Kapritsos, Y. Wang, V. Quema, A. Clement, L. Alvisi, and M. Dahlin,
“All About Eve: Execute-verify Replication for Multi-core Servers,” in
Procs. of the USENIX Conf. on Operating Sys. Design and Implemen-
tation, 2012.
[19] E. Alchieri, F. Dotti, O. M. Mendizabal, and F. Pedone, “Reconﬁguring
parallel state machine replication,” in Procs. of the IEEE Symposium on
Reliable Distributed Systems, 2017.
170
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:25:29 UTC from IEEE Xplore.  Restrictions apply.