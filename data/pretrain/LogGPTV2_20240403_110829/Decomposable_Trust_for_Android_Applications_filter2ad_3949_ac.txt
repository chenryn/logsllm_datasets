(cid:3)
(cid:2)
(cid:1)
Fig. 3. High Level Architecture. A proxy process executes in the CVM
whose purpose is to execute forwarded system calls. The proxy has the same
security credentials of the host process within the CVM (same UID, set of
permissions).
protection to only non-root user apps. Therefore, all launched
apps have a non-zero UID. 3
Isolating and securing the UI/Input. On Android,
if
an app wishes to display output or receive input, it needs
to create the appropriate UI elements in memory and then
request the services of the display and input managers through
an IPC. The IPC interface is well deﬁned on smartphone
operating systems, just as in standard Linux based systems
(OpenGL, X). On Android, display-related operations occur
through IPCs (speciﬁcally, a type of ioctl system call) on
the WindowManager. Anception detects and identiﬁes these
operations at the system call interface and lets them pass
through to the host OS (Figure 3). Any information collected
through UI elements resides on the host only, hence obeying
the second principle.
3If an app changes its UID after being launched, Anception will kill the
app. Such changes are not permitted as per the Android security model and
are made possible only on rooted devices, that are outside our threat model.
346346
Servicing UI/Input on the host enables an important op-
timization. The CVM runs a headless Android stack, thus
cutting its memory consumption. We have evaluated memory
consumption (Section VI-C) and found that Anception runs an
Android stack consuming around 64MB 4.
Protecting User Pages of an App from the CVM. When
the user launches the app, code is loaded into memory pages
on the host. These pages are not visible to the CVM because
the host exercises strict control over the pages available to
the CVM, thus obeying the third principle. As we observe in
Figure 3, sensitive data exists in pages outside the addressable
region of the CVM.
Reducing the Attack Surface of the host kernel. Anception
creates a lightweight proxy for the app that executes within
the CVM and has the same security credentials (UID, umask,
directory structure) as that of its host counterpart within the
CVM. When the app issues a system call, Anception’s host-
side redirection logic inspects the call and generally redirects
them to the CVM. The proxy’s purpose is to execute any
forwarded system calls from the host kernel. The other ad-
vantage of using a proxy is that the permissions model of the
host is transported to the CVM. The same permission checks
that would have been executed on the host for a process are
executed on the CVM. In Figure 3, Anception operates in host
kernel space and serves to transfer such calls to the CVM
kernel by performing the appropriate marshaling (including
pointer translation if call arguments contain pointers) of data.
C. Splitting the execution of Android apps
Anception services a subset of system calls on the CVM,
which is lower privileged, while the process memory resides
on the host. The other subset of calls is serviced on the host
kernel. Consider the following cases:
•
•
•
An app that makes no system calls: In this case, the
app executes entirely on the host. Since it makes no
system calls, the app is not going to be able to attack
the system to escalate its privileges. Such apps are not
likely to be very interesting, but they work correctly
under Anception.
An app that makes only UI/Input system calls: Ancep-
tion recognizes UI/Input related calls and lets them
execute on the host. This is possible because the
UI operations are well-deﬁned and easily identiﬁed.
There is no overlap of UI-managed (e.g., framebuffer,
touch screen) resources with other resources visible
to an app (e.g. ﬁles); that is, UI related calls do not
manipulate non-UI resources on Android.
An app that makes system calls that depend on an
abstract handle: As before, Anception recognizes the
UI calls and service them on the host. Other calls that
provide functionality through an abstract handle, such
as the ﬁle descriptor, can be serviced in the CVM
as long as the invariants provided by the handle in
the form of its exposed functionality are maintained.
Examples include the vast majority of ﬁle system, IPC,
and networking related calls.
4For comparison, even an old version of Android (GingerBread) required
atleast 256MB to run.
347347
IOC WAIT INPUT EVT , &i n b u f f ) ;
t h e bank s e r v e r
c e r t
t h a t came w i t h t h e code
. . . ) ;
‘ rw ’ ) ;
1 / / o b t a i n an FD f o r b i n d e r communication
2 b i n d e r = open ( ‘ / dev / b i n d e r ’ ,
3 / / g e t bank s e r v e r
4 s o c k f d = s o c k e t ( AF INET , SOCK STREAM, 0 ) ;
5 c o n n e c t ( sockfd , ” bank . com” ,
6
7
8 i o c t l ( b i n d e r ,
9 i f ( i n b u f f . e v e n t == EVT PWD ENTERED)
10 {
11
12
13
14
15
16
17
18 }
19
20 c l o s e ( b i n d e r ) ;
21 c l o s e ( s o c k f d ) ;
/ / append t h e command f o r
i n b u f f . t e x t += ’ LOGIN CMD ’ ;
/ /
/ /
/ / u s i n g t h e i d / password t o
/ /
send ( sockfd , o u t b u f f ,
s i z e o f ( o u t b u f f ) ) ;
t h e bank
c a l l a u s e r s p a c e
e s t a b l i s h TLS c o n n e c t i o n and a u t h e n t i c a t e
e n c r y p t i o n r o u t i n e
Listing 1. Simpliﬁed benign code
1 s o c k f d = s o c k e t (PF BLUETOOTH, SOCK DGRAM, 0 ) ;
2 f d i n = open ( ‘ a r b i t r a r y . t x t ’ ,
3 s e n d f i l e ( sockfd ,
f d i n , NULL, PAGE SIZE ) ;
‘ rw ’ ) ;
Listing 2. System calls executed to trigger null dereference in kernel space
Consider the (simpliﬁed for illustration) example app in
Listing 1. The app obtains a handle to the binder device (Line
2), which is used to interact with the UI subsystem. Then,
it opens a socket and connects to the banking server (Lines
4, 5) using a preloaded certiﬁcate (line 3) in the code and
then waits for an input event by executing an ioctl IPC on
the binder device (Line 8). When an input is delivered by the
input subsystem, the ioctl returns with the input data. The
app checks whether the data is from a password box, and then
it performs an encryption operation using a userspace library
function (Line 13-15). Finally, the app initiates a handshake
with the banking server using the encrypted packet (Line 16).
On Anception, Line 2 is executed on the host as per the
second principle. Lines 4 and 5 handle network communication
and are serviced by the CVM. Line 8 executes on the host
since the handle came from the host. As per the third principle,
encryption happens in isolated virtual pages on the host (user-
level library code). Finally, the send operation is serviced by
the CVM (Line 16). The ﬁle handles are closed on the CVM
(Lines 20-21).
Let us consider how Anception executes a malicious app.
Listing 2 lists the set of system calls executed by CVE-2009-
2692. This exploit works by invoking a null page dereference
(line 3) from kernel space. Under Anception, we execute all
3 system calls in the CVM. The exploit speciﬁes shellcode
by asking the ELF-loader to load some code at the null page.
As all memory pages are managed on the host, when the null
dereference is triggered inside the CVM, the shellcode is not
available and the exploit manages to only crash the CVM. The
host OS remains protected.
Some system calls like memory mapping mmap2(),
fork() and sigaction() do not use abstract handles to
identify their services because they modify process state within
the host kernel. We discuss these next.
D. Redirection Logic
As highlighted in the previous subsection, we want system
calls to be executed on the CVM under the context of the proxy
(e.g., ﬁle I/O, network, most IPCs), but some system calls must
be executed on the host (e.g., UI-related). The redirection logic,
which is part of the Anception kernel modiﬁcations to Android
on the host, makes that decision. Fortunately, the execution
environment of an Android app is well-deﬁned in terms of the
ﬁle, network, IPC and memory operations allowed. Developers
use a speciﬁc API to ensure a well-behaved app according
to the best practices5. Below, we consider major classes of
system calls and how the redirection logic handles them, so as
to provide correct API semantics to the apps.
File I/O. The Android ﬁle-system is partitioned into a read-
only part containing system code and a read-write part guarded
by UID-based permissions for apps to use. Each app has its
own directory (/data/data/package.name) on the read-
write part and no one else may access the contents except the
app itself6. On Anception, following Principle 1, we load the
shared libraries from the host’s read-only ﬁle system. Accesses
to the app’s data directory, on the other hand, are redirected
to the CVM. If there is initial data packaged with the app,
during installation this is unpacked to the app data directory.
Anception copies over this data to the CVM as part of the
app enrollment procedure. At runtime, any new ﬁles created
or existing ﬁles that are modiﬁed exist only in the CVM due
to redirection. Accesses to devices, with few exceptions such
as handling interactions with the Window Manager via binder,
are directed to the CVM.
UI operations. Android apps request UI operations through
an IPC on the WindowManager that is a centralized entity
for frame buffer management. The requests are identiﬁed by
inspecting the IPCs issued by an app. Anception services all
such operations on the host.
Network I/O. If an app wishes to perform network I/O
(including local sockets), all such operations are serviced by
the CVM. A socket open request results in a handle on the
CVM, which is passed back to the host. Operations on that
handle (e.g., send) are marshaled and passed back to the CVM.
That also implies that the CVM’s external connectivity can be
controlled from the host by ﬁrewall rules, if desired.
IPC. Android provides a custom capability-based binder
IPC mechanism that simulates a synchronous procedure call
across processes. Anception transparently bridges IPCs orig-
inating from the host destined for the CVM. Apps also use
binder IPC to talk to other apps. We allow such IPCs to proceed
on the host. Traditional IPC mechanisms such as unix domain
sockets are supported similar to Network I/O.
Memory-mapped ﬁles. Anception executes the memory
mapping in the proxy’s address space and temporarily pins
those pages (after forcing read faults to ensure the data was
demand paged). In the meantime, we perform a null mapping
on the host by extending the brk of the app by the same amount
of pages the memory mapping takes. We then copy page data
5Available at http://developer.android.com/guide/index.html
6sharing can occur if apps share a UID
from the proxy to the app via efﬁcient remapping of pages.
Write-back is used when data has to be synchronized with
the CVM, for example, the msync operation. In this way, we
avoid transferring every page fault back to the CVM.
Fork/Clone and exec. Fork/Clone is replicated on the
proxy as well since Anception maintains a one-to-one corre-
spondence between host processes and proxy processes. When
the fork/clone executes on the host,
the child is assigned
to the CVM too. An app cannot escape the CVM through
fork/clone/exec calls.
Nothing special needs to be done to the proxy on an exec
system call. The proxy continues to store the resource handles.
The host process executes the new code. Code that is a system
binary is simply executed on the host since the host’s version
is identical to the guest’s. Code that is user-generated is ﬁrst
copied out from the guest to a special execution cache on
the host that is not accessible to the untrusted app, and then
executed from the execution cache. The reason for this is that
we don’t want the app to trick the system into copying an
executable to a restricted location. Expressing the policy this
way is much cleaner.
System Management. Dangerous calls like insmod,
rmmod, shutdown, ptrace [10] and others relating to
whole system management are denied to applications because
no user downloaded app should ever invoke these. Android
security model denies them as well.
IV.
IMPLEMENTATION
Anception prototype runs on a Samsung Galaxy Tab with
Android 4.2 and Linux Kernel 3.4. We added two new kernel
modules, one each for the host and the guest. The lguest [40]
hypervisor provides the virtualization technology, although
other hypervisors can be used. The detailed architecture is
shown in Figure 4. The CVM is a headless Android instance
and it executes app proxies. Anception sits at the host kernel’s
system call interface and is implemented in approximately
5200 lines of code.
1) Host-Guest Communication. Anception marshals sys-
tem call data (including pointers) into a host kernel buffer. The
marshaled data is copied over to a set of pages (Figure 4) that
are remapped (using the kmap function) from the guest kernel
space. Note that the guest, being unprivileged, cannot map
memory outside the assigned region. The guest uses a hypercall
mechanism to signal the host. The host injects interrupts into
the guest kernel to signal the guest. Combining these two
techniques, Anception implements a controlled communica-
tion channel between the CVM and the host. Our previous
prototypes investigated other forms of communication such as
sockets [16] and virtio [41] but they exhibited high overhead
due to unnecessary data copy operations.
2) Anception System Call Interception Method (ASIM).
System call interception is used for a variety of purposes
[23], [21]. Anception uses the technique to capture calls and
forward them to the CVM. We investigated existing methods
of interception such as ptrace, ftrace, dtrace and kprobes.
Anception’s ﬁrst prototype used UML and ptrace but