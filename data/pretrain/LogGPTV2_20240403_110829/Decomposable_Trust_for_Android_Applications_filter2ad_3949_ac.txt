### High-Level Architecture

A proxy process executes within the CVM (Container Virtual Machine) to handle forwarded system calls. The proxy has the same security credentials as the host process within the CVM, including the same UID and set of permissions. This ensures that all launched apps have a non-zero UID, thereby providing protection for non-root user applications.

### Isolating and Securing the UI/Input

On Android, if an app wishes to display output or receive input, it must create the appropriate UI elements in memory and request services from the display and input managers via IPC (Inter-Process Communication). The IPC interface is well-defined on smartphone operating systems, similar to standard Linux-based systems (e.g., OpenGL, X). On Android, display-related operations occur through IPCs (specifically, a type of `ioctl` system call) on the `WindowManager`. Anception detects and identifies these operations at the system call interface and allows them to pass through to the host OS (Figure 3). Any information collected through UI elements resides only on the host, adhering to the second principle.

**Note:** If an app changes its UID after being launched, Anception will terminate the app. Such changes are not permitted according to the Android security model and are possible only on rooted devices, which are outside our threat model.

### Optimizing Memory Consumption

Servicing UI/Input on the host enables an important optimization. The CVM runs a headless Android stack, reducing its memory consumption. Our evaluation (Section VI-C) shows that Anception runs an Android stack consuming around 64MB of memory.

### Protecting User Pages of an App from the CVM

When the user launches an app, code is loaded into memory pages on the host. These pages are not visible to the CVM because the host exercises strict control over the pages available to the CVM, adhering to the third principle. As shown in Figure 3, sensitive data exists in pages outside the addressable region of the CVM.

### Reducing the Attack Surface of the Host Kernel

Anception creates a lightweight proxy for the app that executes within the CVM and has the same security credentials (UID, umask, directory structure) as its host counterpart within the CVM. When the app issues a system call, Anception's host-side redirection logic inspects the call and generally redirects it to the CVM. The proxy's purpose is to execute any forwarded system calls from the host kernel. Using a proxy also transports the permissions model of the host to the CVM, ensuring that the same permission checks executed on the host for a process are also executed on the CVM. In Figure 3, Anception operates in the host kernel space and serves to transfer such calls to the CVM kernel by performing the appropriate marshaling, including pointer translation if call arguments contain pointers.

### Splitting the Execution of Android Apps

Anception services a subset of system calls on the CVM, which is lower-privileged, while the process memory resides on the host. The other subset of calls is serviced on the host kernel. Consider the following cases:

1. **App with No System Calls:**
   - The app executes entirely on the host. Since it makes no system calls, it cannot attack the system to escalate its privileges. Such apps are not likely to be very interesting but work correctly under Anception.

2. **App with Only UI/Input System Calls:**
   - Anception recognizes UI/Input-related calls and lets them execute on the host. This is possible because UI operations are well-defined and easily identified. There is no overlap of UI-managed resources (e.g., framebuffer, touch screen) with other resources visible to an app (e.g., files).

3. **App with System Calls Depending on Abstract Handles:**
   - Anception recognizes UI calls and services them on the host. Other calls that provide functionality through abstract handles, such as file descriptors, can be serviced in the CVM as long as the invariants provided by the handle are maintained. Examples include most file system, IPC, and networking-related calls.

### Example Code Analysis

Consider the simplified example app in Listing 1. The app obtains a handle to the binder device (Line 2), opens a socket and connects to the banking server (Lines 4, 5), and waits for an input event by executing an `ioctl` IPC on the binder device (Line 8). When input is delivered, the `ioctl` returns with the input data. The app checks whether the data is from a password box and performs an encryption operation using a userspace library function (Lines 13-15). Finally, the app initiates a handshake with the banking server using the encrypted packet (Line 16).

- **On Anception:**
  - Line 2 is executed on the host.
  - Lines 4 and 5 handle network communication and are serviced by the CVM.
  - Line 8 executes on the host since the handle came from the host.
  - Encryption happens in isolated virtual pages on the host (user-level library code).
  - The send operation is serviced by the CVM (Line 16).
  - File handles are closed on the CVM (Lines 20-21).

For a malicious app (Listing 2), Anception executes all system calls in the CVM. The exploit specifies shellcode by asking the ELF-loader to load some code at the null page. Since all memory pages are managed on the host, when the null dereference is triggered inside the CVM, the shellcode is not available, and the exploit only crashes the CVM. The host OS remains protected.

### Redirection Logic

The redirection logic, part of the Anception kernel modifications to Android on the host, decides where system calls should be executed. The execution environment of an Android app is well-defined in terms of file, network, IPC, and memory operations. Below, we consider major classes of system calls and how the redirection logic handles them:

- **File I/O:**
  - The Android file system is partitioned into a read-only part containing system code and a read-write part guarded by UID-based permissions. Each app has its own directory (`/data/data/package.name`) on the read-write part. On Anception, shared libraries are loaded from the host’s read-only file system, and accesses to the app’s data directory are redirected to the CVM.

- **UI Operations:**
  - Android apps request UI operations through an IPC on the `WindowManager`. Anception services all such operations on the host.

- **Network I/O:**
  - Network I/O operations are serviced by the CVM. A socket open request results in a handle on the CVM, which is passed back to the host. Operations on that handle (e.g., `send`) are marshaled and passed back to the CVM.

- **IPC:**
  - Anception transparently bridges IPCs originating from the host destined for the CVM. Traditional IPC mechanisms such as Unix domain sockets are supported similarly to Network I/O.

- **Memory-Mapped Files:**
  - Anception executes memory mapping in the proxy’s address space and temporarily pins those pages. In the meantime, a null mapping is performed on the host, and page data is copied from the proxy to the app via efficient remapping.

- **Fork/Clone and Exec:**
  - Fork/Clone is replicated on the proxy, maintaining a one-to-one correspondence between host processes and proxy processes. The child is assigned to the CVM too. On an `exec` system call, the proxy continues to store the resource handles, and the host process executes the new code.

- **System Management:**
  - Dangerous calls like `insmod`, `rmmod`, `shutdown`, `ptrace`, and others related to whole system management are denied to applications.

### Implementation

Anception prototype runs on a Samsung Galaxy Tab with Android 4.2 and Linux Kernel 3.4. We added two new kernel modules, one each for the host and the guest. The `lguest` hypervisor provides the virtualization technology. The detailed architecture is shown in Figure 4.

#### Host-Guest Communication

Anception marshals system call data (including pointers) into a host kernel buffer. The marshaled data is copied over to a set of pages remapped from the guest kernel space. The guest uses a hypercall mechanism to signal the host, and the host injects interrupts into the guest kernel to signal the guest. This implements a controlled communication channel between the CVM and the host.

#### Anception System Call Interception Method (ASIM)

Anception uses system call interception to capture calls and forward them to the CVM. We investigated existing methods such as `ptrace`, `ftrace`, `dtrace`, and `kprobes`. Anception's first prototype used UML and `ptrace`, but this was later optimized.