An abelian group structure is deﬁned on the set of divisors
by addition of the correspondings coeﬃcients in the formal
pk ) →
P aP (P ) be a divi-
P f (P )aP . We remark
P aP = 0, f (A) = (cf )(A) for any factor c ∈
F∗
P ordP (f )(P ),
where ordP (f ) is the order of the zero or pole of f at P
(if f has no zero or pole at P , then ordP (f ) = 0). A di-
visor A is called principal if A = (f ) for some function f .
P aP (P ) is princi-
P aP · P = ∞. Two
divisors A and B are equivalent if A − B is a principal divi-
sor. Let P ∈ E[r] where r is coprime to p, and let AP be
a divisor equivalent to (P ) − (∞); in this case, the divisor
rAP is principal and so, there is a function fP such that
(fP ) = rAP = r(P ) − r(∞). A pairing is a bilinear and
non-degenerate map e : G1 × G2 → G3. More speciﬁcally we
will consider the reduced Tate pairing [3] of order r, which is
a well deﬁned pairing with G1 = E(Fp)[r], G2 = E(F
pk )[r]
and G3 = F∗
F
pk /(F∗
pk )r.
Definition 1. Let (P, Q) ∈ E(Fp)[r] × E(Fpk )[r], we
consider the Miller function fr,P (Q) [22] deﬁned by the divi-
sor D = r(P )−([r]P )−(r−1)(∞). The reduced Tate pairing
of P, Q can be computed by: e(P, Q) = fr,P (Q)(pk−1)/r.
The Miller function and the pairing value can be com-
puted by the BKLS algorithm [3]. We deﬁne in the fol-
Algorithm 1: BKLS-like algorithm to compute the Tate
pairing e(P, Q)
Require: P ∈ E(Fp)[r] ⊂ E(Fp), Q ∈ E(F
pk )[r] ⊂
E(F
pk ), r = (rt, . . . , r0)2
Ensure: e(P, Q)
T = P
f = 1
for i from t − 1 to 0 do
f ← f 2 · (cid:96)T,T (Q)
T ← [2]T
if ri = 1 then
f ← f · (cid:96)T,P (Q)
T ← T + P
pk−1
return f
r
lowing sections (cid:96)T1,T2 (Q) as the value of the line function
through two points T1 and T2 evaluated on Q with slope
λT1,T2 = (yT2 − yT1 )/(xT2 − xT1 ). In the following, the loop
in algorithm 1 is called the Miller Loop while the last step
pk−1
r
is the Final Exponentiation.
f
2.2 Construction of compressed pairing
In [28, 15], the concept of the compressed pairing is in-
troduced in 2004. Naehrig, Barreto and Schwabe in [26]
formalized this concept and proposed a more eﬃcient algo-
rithm to compute the compressed pairing on BN-curves [4].
BN curves is a family of ”pairing-friendly” elliptic curves over
Fp, i.e. they contain a subgroup of order r whose embedding
degree k is not too large. That means that the bit length of
p is not too large with respect to r or ρ = log(p)/ log(r) is
close to 1, which leads to eﬃcient computation. Compressed
pairing schemes have several advantages: shorter values and
instead of implementation using F
pk operations, only the
Fp operations are needed to compute the compressed pair-
ing. Moreover, the overall time complexity is slightly less
eﬃcient than very eﬃcient implementation [11]. The BN-
family of elliptic curves has an embedding degree k = 12 and
a prime order r. The Weierstrass equation of these curves is
E : y2 = x3 + b, with b (cid:54)= 0 and the trace of the Frobenius,
the curve order and the characteristic of the ﬁnite ﬁeld Fp
are parameterized as follows :
• t(x) = 6x2 + 1
• p(x) = 36x4 + 36x3 + 18x2 + 6x + 1
• n(x) = 36x4 + 36x3 + 24x2 + 6x + 1.
The algorithm proposed by Naehrig et al [26] has two stages.
The ﬁrst stage compresses the pairing value from F
p12 into
a value in a smaller ﬁnite ﬁeld F
p6 . And the second stage
p6 into two values in F
compresses the value from F
In
the following, let ξ be an element which is not a square or a
third power in F
Mapping F
p6 . The ﬁrst stage consists in com-
pressing a value of a large ﬁnite ﬁeld F
p12 into a value of F
p6 .
The computation of the ﬁnal exponentiation to the power
(p12 − 1)/r is split into three parts for eﬃciency reasons:
p12 into F
p2 .
p2 .
p12 − 1
r
= (p6 − 1)(p2 + 1)
(cid:18) p4 − p2 + 1
(cid:19)
.
r
6432
p6−1
As ξ deﬁned before is not a square in F
and ξ is not a square in F
p6 , then the poly-
q6 , and we can consider
p12 .
p6 (σ) where σ is the square root of ξ in F
nomial x2 − ξ is irreducible in F
F
q12 = F
Since σp6−1 = ξ
P 6 , we have
σp6−1 = −1. Let f be the output of the Miller Loop and
f = α1 +α2σ. Then f p6−1 = (α1+α2σ)p6
α1+α2σ , using the property
of the Frobenius morphism, we have f p6−1 = αp6
1 +αp6
α1+α2σ =
α1−α2σ
α1+α2σ = α−σ
. We can represent the pairing
value α1 + α2σ by α which is a value in F
p6 , the compression
rate is 1/2.
α+σ with α = α1
α2
2 σp6
p12 = F
p2 with F
. Let τ ∈ F
−αp2+1+ξ
−αp2 +α
p6 into two values in F
Mapping F
p2 . As seen before, we
can compress f p6−1 from a F
p6 value. The
second stage of the Final Exponentiation allows to eﬃciently
perform the exponentiation to the power (p2 + 1). Let ˆα =
f p6−1 and ˆβ = ˆαp2+1 = (cid:0) α−σ
(cid:1)p2+1. Using the fact that
p12 value into a F
α+σ
β+σ , we can show that β =
p12 as an extension ﬁeld of F
ˆβ = β−σ
p12 be a
third root of ξ, and as previously, we can represent the ﬁnite
ﬁeld F
p6 (σ) =
(F
p2 (τ ))(σ). Then β can be represented by β0 + β1τ + β2τ 2.
Finally, since the output of the Miller Loop f is in F
p12
and p12 − 1 = (p6 − 1)(p2 + 1)(p4 − p2 + 1), the relation
ˆβp4−p2+1 = ( β0+β1τ +β2τ 2−σ
β0+β1τ +β2τ 2+σ )p4−p2+1 = 1 holds, then β2 =
3β2
0 +ξ
3β1ξ , i.e. the third component can be computed by the
ﬁrst two ones. The rate of the compression is enhanced to
1/3.
We can perform the two ﬁrst steps of the Final Exponentia-
tion by representing an element of F
p12 using two values of
F
p2 . In the sequel, we will add another element of Fp in or-
der to have a jacobian coordinate which allows computation
without inversion, which is the most time consuming oper-
ation. This remark is very important and consequently, the
two ﬁrst exponentiations of the Final Exponentiation are no
more needed using compressed pairing representation.
Arithmetic on the compressed pairing value. As we
saw before we can represent a compressed pairing value by
p2 × Fp). In the com-
a triple of values (a0, a1, a) ∈ (F
putation of compressed pairing, we need to compute eﬃ-
ciently the three following operations: computing the square
of a value, computing the multiplication between two values
and computing the line function value of two points in the
Miller function. The formulae for these three operations
have been given by Naehrig et al. in [26] and are recalled in
appendix B. Since we need the formulae for the line func-
tion, this operation is recalled here.
p2 × F
Line function..
To compute the value of the pairing of two points P and
Q, we need the formula of the line function through U, V
evaluated at Q, noted by (cid:96)U,V (Q). This value is given by the
ν where (µ, ν) ∈ (Fp)2 the
following formula: we denote by µ
slope value of the line (U, V ) and the result is represented
by (cid:96)U,V (Q(cid:48)) = (C0, C1, C) for ζ a primitive third root of
unity which lies in Fp since p = 1 (mod3) in [26]: C0 =
(cid:1)(νyU − µxU ), C1 =(cid:0) ζ2
(cid:1)µxQ(cid:48) , C = νyQ(cid:48) .
(cid:0) − ζ
1−ζ2
1−ζ2
2.3 Representation of implementation in Barreto-
Naehrig Curves
Recall that in the case of BN-curves, p and r have a spe-
cial form which can be parameterized by polynomials of the
curve characteristic x. For the compressed pairing compu-
tation, the ﬁnal exponentiation is the only hard-core expo-
nentiation of the normal pairing computation: f
our case.
p4−p2+1
r
in
Algorithm 2: Computation of the Final Exponentiation
Input : f, p, r
p4−p2+1
r
Output: f
a ← f−6x−5
b ← ap using Frobenius
b ← ab
Compute f p, f p2
and f p3
f ← f p3 · (b · (f p)2 · f p2
return f
p4−p2+1
r
)6x2+1 · b · (f p · f )9 · a · f 4
In the pairing computation, the Frobenius function can
be computed very eﬃciently. The ﬁnal exponentiation is
developed by p3 + (6x2 + 1)p2 − (36x3 + 18x2 − 12x − 1)p −
(36x3 + 30x2 + 18x + 2) for a more eﬃcient computation,
and the algorithm of exponentiation is showed below.
3. A FIRST FAULT ATTACK ON THE COM-
PRESSED PAIRING
In this section we present new attacks for the compressed
pairing implementation that allow to completely invert the
pairing computation. Our attack is a second order attack,
since we need to inject two faults during the same pairing
computation: one during the Miller Loop and the second one
during the Final Exponentiation. Furthermore, up to now,
attacks have only been proposed against the Miller Loop or
only against the Final Exponentiation or against the normal
pairing computation which is not the most eﬃcient pairing
computation.
To attack the Miller Loop with compressed pairing, we
modify the classical attack against classical pairing. For the
Final Exponentiation which depends on the pairing compu-
tation, the attacks work for elliptic curves with and without
pairing-friendly BN-curves. In the case of BN-curves, the at-
tack is very eﬃcient, while in the more general other cases,
it requires to inject many faults.
3.1 First Step: Attack on the Miller Loop
The attack on the Miller loop of the compressed pairing
is inspired from classical attacks against the Miller Loop for
the normal pairing proposed by Page and Vercauteren [27].
A similar scheme is represented by El Mrabet [23] for the
Jacobian coordinates. Some modiﬁcations are needed to use
similar ideas in the case of BN-curve. Due to the fact that
the pairing considered is an asymmetric pairing, and the
computation of Miller Loop is asymmetric in its two argu-
ments, we distinguish two cases: the secret key is the ﬁrst
or the second argument.
Overall Fault Attack against the Miller Loop. As
in [27], our fault attack injects random faults in the loop
control variable, i.e. we can force the loop to end before its
644expected end. However, we do not know how many itera-
tions have been performed before the end. The main idea
that we use is the birthday paradox to generate two consec-
utive values of the Miller Loop and we have 50% chance to
ﬁnd the value of the secret key.
More explicitly, let k be the number of iterations and r =
(r1, r2 . . . rk)2 be the corresponding exponent. Using the
birthday paradox, we found the result of Miller Loop with i
and i + 1 iterations and we denote the outputs of the Miller
Loop by mi and mi+1. Now, we know that if ri = 0, mi+1 =
i × (cid:96)T,T (Q). Consequently, we can recover the value of
m2
(cid:96)T,T (Q), and we will show in the following, how we can
recover the secret key using (cid:96)T,T (Q). We recall the formula
of the line function through the two points U, V evaluated
on the point Q in compressed pairing: C0 =(cid:0)− ζ
µxU ), C1 =(cid:0) ζ2
(cid:1)µxQ, C = νyQ.