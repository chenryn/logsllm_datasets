title:Banksafe Information Stealer Detection Inside the Web Browser
author:Armin Buescher and
Felix Leder and
Thomas Siebert
Banksafe
Information Stealer Detection Inside the
Web Browser
Armin Buescher1, Felix Leder2, and Thomas Siebert1
1 G Data Security Labs, Bochum, Germany
2 Institute of Computer Science 4, University of Bonn, Germany
Abstract. Information stealing and banking trojans have become the
tool of choice for cyber criminals for various kinds of cyber fraud. Tradi-
tional security measures like common antivirus solutions currently do not
provide suﬃcient reactive nor proactive detection for this type of mal-
ware. In this paper, we propose a new approach on detecting banking
trojan infections from inside the web browser called Banksafe. Banksafe
detects the attempts of illegitimate software to manipulate the browsers‘
networking libraries, a common technique used in widespread informa-
tion stealer trojans. We demonstrate the eﬀectiveness of our solution with
evaluations of the detection and classiﬁcation of samplesets consisting of
several malware families targetting the Microsoft Windows operating
system. Furthermore we show the eﬀective prevention of possible false
positives of the approach.
1 Introduction
Information stealers, and especially banking trojans, are a species of crimeware
that is specialized in stealing login credentials and manipulating online banking
transactions during the communication between an infected computer and the
banks servers. The majority of these types of trojans focuses on stealing money
from a victims bank account, even though the functionality can more generally
be described as versatile information stealers with backdoor functionalities to
create botnets. These are also capable of sending e-mail and instant-messaging
spam, installing additional malware on the victims system and executing dis-
tributed denial-of-service attacks. The technologies used by recent variants to
hijack the system enable cybercriminals to extract account details of virtually
any web-based login system that is not protected by additional security mea-
sures like security tokens. One of these security measures is already under attack
according to recent reports [12] describing that some criminal groups expanded
their arsenal with mobile phone malware enabling them to intercept login cre-
dentials for Mobile-TAN systems. Some trojan horses also have the ability to
intercept FTP login credentials and search the victims hard-drive for speciﬁc
ﬁles like conﬁdential documents or private keys of digital certiﬁcates. Login data
and stolen ﬁles are typically automatically uploaded by the malware to so-called
R. Sommer, D. Balzarotti, and G. Maier (Eds.): RAID 2011, LNCS 6961, pp. 262–280, 2011.
c(cid:2) Springer-Verlag Berlin Heidelberg 2011
Banksafe Information Stealer Detection Inside the Web Browser
263
dropzone servers where the botmasters can collect them and try to monetize the
information theirselves or sell it in underground forums. Among the information
sold in the underground are credit card details, e-mail, social network and web
server administrator accounts. These are typically sold in bulk with hundreds or
often even thousands of units.
There are several advantages for cybercriminals in buying oﬀ-the-shelf in-
formation stealers. The outsourcing of development to other parties supplying
extensively tested and regularly updated software was adopted to the under-
ground market from traditional business models over the last years. Extensive
tests and updates in this case promise reliable functionality of the malware and
evasion of common security software. The approach of selling crimeware kits on
a large scale also leads to the emergence of many, often smaller sized botnets
which complicate to track and shut down them down.
Since these types of trojans are a versatile tool in terms of which information
they are able to steal from a victims computer there is also a variety of attack
schemes in which they are used. Most prominent in the news coverage are mas-
sive web-based attacks where computers of thousands of internet surfers with
vulnerable web browsers or plugins are infected by so-called drive-by-downloads
or social engineering tricks to install trojans and ﬁnally harvest as much informa-
tion as possible from the victims. In contrast to these mass attacks, information
stealers are also regularly used in targeted attacks against businesses and gov-
ernmental organizations. In October 2010 a group of criminals was arrested after
the investigation of a case the FBI called Operation Trident Breach [18] where
a total of more than $70 million were stolen from bank accounts of at least 390
small and medium businesses in the United States. The groups’ attacks instru-
mented a technique called spear-phishing where the victims were tricked into
executing malware using e-mails with a clever social engineering scheme.
In this paper we make the following contributions:
– we show that traditional security measures fail in protecting users against
infections by banking trojans. This includes both the detection using signa-
tures, which fail due to the obfuscation techniques used in builder tools of
banking trojans as well as behavior blockers, which are not able to detect
infections.
– we propose a method to pro-actively detect banking trojan infections called
Banksafe
– we show that Banksafe is able to reliably detect and identify prevalent bank-
ing trojans including Zeus, Spyeye, Patcher, Carberp, Silentbanker and Be-
bloh
The rest of the paper is structured as follows. The following section gives an
overview about related work. Section 3 gives an overview about the most promi-
nent information stealers found in-the-wild. Section 4 describes our approach for
detecting and classifying this special type of trojans by the manipulation they
perform inside the browser. This includes a description of the diﬀerent techniques
for manipulation. In order to evaluate our approach a series of experiments has
been conducted, which are described in section 5. A series of 1,045 Zeus and
264
A. Buescher, F. Leder, and T. Siebert
SpyEye samples is tested to estimate the success rate in large scale for these two
most prevalent families. The detection of those two families by our Banksafe tool
is compared to the detection by anti-virus software using signatures as well as
behaviour detection. In the last part we outline the detection results of a series
of other information stealer families. In section 6 we discuss some limitations of
our approach before giving a summary and describing future work.
2 Related Work
All of the major banking trojans act inside the browser to intercept and manip-
ulate network data. This is often called man-in-the-browser (mitb). The tech-
niques used by these banking trojans are also often found in user-mode rootkits.
They have to act in user-mode, as opposed to kernel-mode, in order to have access
to network data before it is encrypted. In the following an overview about related
work on root-kits is given together with diﬀerent approaches to detect them. We
show that we can determine the banking trojan family with a high probability
which is closely related to the classiﬁcation of malware. A brief overview of other
classiﬁcation approaches is given, too.
Rootkits and manipulation components can be applied at diﬀerent levels
which are usually separated into user-mode, kernel-mode, virtualized, and
ﬁrmware root-kits. An overview about the diﬀerent levels and an idea how to
create root-kits below the level of ﬁrmware is given in [34]. While the lower level
root-kits are hardly encountered in the wild, a range of user-mode and kernel-
mode rootkits exist. An overview about the techniques used by both types can be
found in [14]. A more detailed explanation about the way how rootkits intercept
and manipulate systems and the architectural relationships behind the required
components can be found in [9]. For banking trojans, it is especially important to
operate and monitor applications in user-mode, because the data passing lower
levels is usually encrypted. This is normally done by hooking relevant functions
inside the victim program, like the network receive functions in a browser. This
is like a detours from the original function into an intermediate ﬁlter function
within the rootkit. A wide range of libraries exist that allow this manipulation
[15,17,21,16]. A description of the diﬀerent kinds of hooks that exist is given in
the sections of this paper following this section.
Related to the topic of hiding software using rootkits is the detection of rootk-
its. This is usually achieved using sanity checks for inconsistent relationships and
data structures. The basic ideas for the detection is described in section 5.3 of [9].
A subset of the techniques is proved to work in [37]. Using a dynamic tracer, con-
trol ﬂow redirections that lead from one executable image to another are used to
identify suspicious modiﬁcations. This approach is generic but prone to false pos-
itives. Most of the research around root-kits focuses on the kernel-mode specimen
because they, theoretically, can be developed in a way so that they are hard to im-
possible to detect. [23] detect linux rootkits based on modiﬁcations in the system
call table, which are inconsistent to the kernels symbol information and conﬁrm
their results with source code. Both types of information are usually not available
for Windows systems, which are the most targeted platforms nowadays.
Banksafe Information Stealer Detection Inside the Web Browser
265
Diﬀerent frameworks exist that can check the integrity of known code and
data regions in order to identify those types of anomalies that are the result
of root-kits. In [10] a generic framework for writing root-kits detection tools is
presented. The framework provides an API for custom extensions and can be
used for the detection of user- as well as kernel-mode root-kits. [32] is a tool that
checks for all kinds of manipulations on user-mode and kernel-mode. It detects
all kinds of root-kits and is even able to detect previously unknown malware.
Besides available tools and program, a range of academic work around the
detection of root-kits exists. In [20] an approach is presented that detects root-
kits based on the data modiﬁcations that are performed by root-kits. In order
to achieve this, they make use of dynamic slicing on sensitive data. This al-
lows to pinpoint the malicious code but only works for known manipulations on
very speciﬁc data structures. Another way to pinpoint root-kit code is presented
in[31]. The work is based on the root-kit detection using diﬀerential execution
tracing with virtual machines [30]. Execution traces on an infected system are
compared to those on a clean system using the same data. If the execution diﬀers,
the changes are assumed to be happening due to the root-kit. Less sophisticated
but also very reliable detections for root-kits are based on introspection tech-
niques using virtual machines. They monitor the execution from outside the
operating system by adding monitoring components to the virtual machine. Ex-
amples for this are [13,33,24,35]. Whereas the previous work solely focuses on
obvious modiﬁcations performed by root-kits, there exist a broad range of ker-
nel structures that may be used to add hidden functionality to a system. In [38]
kernel structures that include pointers to important code are identiﬁed at im-
portant operating system interfaces. Based on modiﬁcation that inﬂuence and
change this to a normal form, rootkits are detected.
The work in [25] focuses on inline function hooking in user-mode applications.
For this the log output from a root-kit detection tool of a commercial antivirus
vendor is used. The combination of hooks is used to classify root-kits using the
expected maxima function of the Weka toolkit. [27] extends the approach to
multiple root-kits infecting a system at the same time. Diﬀerent root-kits have
diﬀerent modiﬁcations but share subsets. The work shows that it is still possible
to identify certain combinations. Another approach that relies on data mining for
classifying root-kits is presented in [26]. The work uses a complex classiﬁcation
scheme based on system call table modiﬁcations and IAT hooks, but not inline
hooking. Unfortunately, no information about false positives and the likelihood
of false clusterings is given.
All of the previous work on root-kit detection, and classiﬁcation, tries to detect
root-kits system-wide. All of the approaches are therefore generic and are able to
detect new variants that meet certain assumption. Being generic results in the
problem that legitimate system manipulations on the system are detected, but
are false positives. Such modiﬁcations are performed by software for performance
proﬁling, virus detection, as well as a range of other security tools. We overcome
this problem by only monitoring speciﬁc applications, i.e. the web browser. Mod-
iﬁcations in the context of our focus are very unlikely which signiﬁcantly lowers
266
A. Buescher, F. Leder, and T. Siebert
the probability of false positives. Other related work is more focused on the
classiﬁcation of malware in general, and not root-kits in particular. Anti-virus
software is not a good reference for this as shown in [8]. The reason for this
is that anti-virus vendors are interested in reliable detection but only partly in
naming the detected threat correctly. In most cases the vendor just wants to
provide some name to the user. The discrepancy is shown in [8] by comparing
behavioral information from execution monitoring to the signatures of anti-virus
products. A more reliable classiﬁcation can be achieved using behavioral infor-
mation on the interaction between an application and the operating system. In
[7] diﬀerent clustering algorithms are compared for their reliability to classify
malware based on behavioral patterns. Similar reliable but less scalable are the
machine learning algorithms applied in [29]. A reliable classiﬁcation is especially
hard for polymorphic and metamorphic malware, which changes its appearance
from infection to infection. [36] is a classiﬁcation approach that combines a ﬁxed
set of characteristics that are unlikely to change for these types of malware and
can be used for classiﬁcation. Other approaches show that a reliable classiﬁcation
of this malware is possible using characteristic data ﬂow information [39,22]
3 Overview of Banking Trojans
The malware used by the criminals in Operation Trident Breach was a ver-
sion of Zeus, also called Zbot by some antivirus vendors, which is undisputedly
the most successful banking trojan in recent years. This success is based on
its technical sophistication and the fact that the author of Zeus decided not to
use his creation to build hiw own botnet but to sell a ready-to-use package to
interested criminals in underground forums. This package includes a so-called
builder and the PHP ﬁles needed to setup a command & control webserver. The
Zeus builder is used to generate new variants of the trojans executable ﬁle using
custom-engineered binary obfuscation techniques aiming at the weaknesses of
antivirus signatures to evade detection by security software. Similar to legiti-
mate software products the Zeus package features a copy protection mechanism
for the builder using hardware-based information to prevent the spreading of
pirated copies in the underground scene [19]. Older versions of Zeus were limited
to the infection of computers running the operating system Microsoft Windows
XP whereas newer variants are also able to take over Windows Vista and 7.