pxd #[。 1sou[uoo[enoo.1]
/root
[rootelocalhost ~]# cd /
[rootelocalhost /]# 1s 1d/proc/
drxr-xrx 134 root root 0 20051027/proc/
就是这个目录，只能是读和执行权限，但绝对没有写权限的：就是我们把/proc 目录的写权限打开给root，root用户也是不能
进行写操作：
[root0localhost ~]# chnod 755 /proc
[rootelocalhost /]# 1s 1d /proc/
drvxr-xrx 134 root root 0 200510-27/proc/
[rootelocalhost /]# cd /proc/
[root0localhost proc]# mkdir testdir
mkdir：无法创建目录“testdir”：没有那个文件或目录
3.2.2、对于涉及系统全局的系统管理；
硬件管理、文件系统理解、用户管理以及涉及到的系统全局配置等等...如果您执行某个命令或工具时，提示您无权限，大多
定需要超级权限来完成：
比如用adduser来添加用户，这个只能用通过超级权限的用户来完成：
3.2.3、超级权限的不可替代性；
由于超级权限在系统管理中的不可缺少的重要作用，为了完成系统管理任务，我们必须用到超级权限：在一般情况下，为了
系统安全，对于一般常规级别的应用，不需要root用户来操作完成，root用户只是被用来管理和维护系统之用：比如系统日
志的查看、清理，用户的添加和删除..
在不涉及系统管理的工作的环境下，普通用户足可以完成，比如编写一个文件，听听音乐：用gimmp处理一个图片等..基
于督通应用程序的调用，大多普通用户就可以完成：
当我们以普通权限的用户登录系统时，有些系统配置及系统管理必须通过超级权限用户完成，比如对系统日志的管理，添加
和删除用户。而如何才能不直接以root登录，却能从普通用户切换到root用户下才能进行操作系统管理需要的工作，这就涉
及到超级权限管理的问题：
获取超级权限的过程，就是切换普通用户身份到超级用户身份的过程：这个过程主要是通过su和sudo来解决
3.3、使用su命令临时切换用户身份；
3.3.1、Su的适用条件和威力
su命令就是切换用户的工具，怎么理解呢？比如我们以善通用户beinan登录的，但要添加用户任务，执行useradd，beinan
用户没有这个权限，而这个权限恰恰由root所拥有。解决办法无法有两个，一是退出 beinan用户，重新以root用户登录，
成后再退出root。我们可以者到当然道过su切换是一种比较好的办法：
通过su可以在用户之间切换，如果超级权限用户root向善通或虚拟用户切换不需要密码，什么是权力？这就是！而普通用户
切换到其它任何用户都需要密码验证；
3.3.2、Su的用法：
su [0PTION选项参数][用户]
-, -1, --login
登录开改变到所切换的用户坏境：
---
## Page 31
c, -commmand=COMIAND
执行一个命令，然后退出所切换到的用户环境：
至于更详细的，请参看 man su：
3.3.3、Su的范例：
su在不加任何参数，默认为切换到root用户，但没有转到root用户家目录下，也就是说这时虽然是切换为root用户了，但
并没有改变root登录环境：用户默认的登录环境，可以在/etc/passwd中查得到，包括家目录，SHELL定义等：
[beinan@localhost ~]$ su
Passvord:
[rootelocalhost beinan]# ped
/home/beinan
su加参数－，表示默认切换到root用户，并且改变到root用户的环境：
[beinan0localhost ~]$ ped
/hose/beinan
ns s[ rsoeooea]
Passvord:
pxd #[。 1sou[eoo[enoo.1]
/root
su参数－用户名
Passvord:
pxd #[. 1sou[uoo[enoo.1]
/root
[beinan@localhost ~]$ su  linuxsir注：这是切换到 linuxsir 用户
Password：注：在这里输入密码：
[linuxsirelocalhost]spad注：查看用户当前所处的位置：
/home/linuxsir
[linuxsirelocalhost~]sid注：查看用户的UID和GID 信息，主要是看是否切换过来了：
uid=505 (1inuxsir) gid=502(1inuxsir) groups=0 (root), 500 (beinan) , 502 (1inuxsir)
[linuxsir@localhost ~]$
[beinanelocalhost~]$ su--c 1s注：这是su的参数组合，表示切换到root 用户，并且改变到root 环境，然后列出
root家目录的文件，然后退出root用户；
Password:注：在这里输入root 的密码：
anaconda-ks, cfg Desktop instal1. 1og instal1. log. syslog testgroup testgroupbeinan testgrouproot
[beinan@localhost ]$pwd注：查看当前用户所处的位置;
/home/beinan
[beinan@localhost ]$id注：查看当前用户信息；
uid=500 (beinan) gid=500 (beinan) groups=500 (beinan)
3.3.4、Su的优缺点；
su的确为管理带来方便，通过切换到root下，能完成所有系统管理工具，只要把root 的密码交给任何一个普通用户，他都
能切换到roo1来完成所有的系统管理工作：
但通过su切换到root后，也有不安全因素：比如系统有10个用户，而且都参与管理。如果这10个用户都涉及到超级权限
的运用，做为管理员如果想让其它用户通过su来切换到超级权限的root，必须把root权限密码都告诉这10个用户：如果这
---
## Page 32
10个用户都有root权限，通过root权限可以敏任何事，这在一定程度上就对系统的安全造成了威协：想想Windows 吧，简
直就是恶梦：
没有不安全的系统，只有不安全的人”，我们绝对不能保证这10个用户都能按正常操作流程来管理系统，其中任何一人对系
统操作的重大失误，都可能导致系统崩溃或数据损失；
所以su工具在多人参与的系统管理中，并不是最好的选择，Su只适用于一两个人参与管理的系统，毕竟 su并不能让普通用
户受限的使用：
超级用户root密码应该掌握在少数用户手中，这绝对是真理！所以集权而治的存在还是有一定道理的：
3.4、sudo授权许可使用的su，也是受限制的su
3.4.1.sudo的适用条件；
由于su 对切换到超级权限用户root后，权限的无限制性，所以 su并不能担任多个管理员所管理的系统。如果用su来切换
到超级用户来管理系统，也不能明确哪些工作是由哪个管理员进行的操作。特别是对于服务器的管理有多人参与管理时，最
好是针对每个管理员的技术特长和管理范围，并且有针对性的下放给权限，并且约定其使用哪些工具来完成与其相关的工作，
这时我们就有必要用到sudo。
通过 sudo，我们能把某些超级权限有针对性的下放，开且不需要普通用户知道 root 密码，所以 sudo 相对于权限无限制性的
su来说，还是比较安全的，所以 sudo 也能被称为受限制的 su：另外 sudo 是需要授权许可的，所以也被称为授权许可的
Su:
sudo执行命令的流程是当前用户切换到root（或其它指定切换到的用户），然后以root（或其它指定的切换到的用户）身份
执行命令，执行完成后，直接退回到当前用户：面这些的前提定要通过 sudo 的配置文件/etc/sudoers来进行授权：
3.4.2、从编写sudo配置文件/etc/sudoers开始：
sudo 的配置文件是/etc/sudoers，我们]可以用他的专用编辑工具visodu，此工具的好处是在添加规则不太准确时，保存退
出时会提示给我们错误信息：配置好后，可以用切换到您授权的用户下，通过sudo-来查看哪些命令是可以执行或禁止的：
etc/sudoers文件中每行算一个规则，前面带有#号可以当作是说明的内容，开不执行：如果规则很长，一行列不下时，可以
用号来续行，这样看来一个规则也可以拥有多个行：
Vetc/sudoers的规则可分为两类：一类是别名定义，另一类是授权规则：别名定义并不是必须的，但授权规则是必须的：
3.4.3、/etc/sudoers配置文件中别名规则
别名规则定义格式如下：
Alias_Type NAME = itenl, item2, -..
或
Alias_Type NAME = iteml, iten2, item3 : NAME = iten4, item5
别名类型（Alias_Type）：别名类型包括如下四种
Host_Alias 定义主机别名：
User_Alias 用户别名，别名成员可以是用户，用户组（前面要加%号）
Runas_Allas 用来定义runas 别名，这个别名指定的是“目的用户"，即 sudo 允许切换至的用户；
Cmnd_Allas 定义命令别名：
NAME就是别名了，NMAE的命名是包含大写字母、下划线以及数字，但必须以一个大写字母开头，比如SYNADM、SYN_ADM
或 SYNAD0 是合法的，sYNAMDA 或1SYNAD 是不合法的;
---
## Page 33
item按中文翻译是项目，在这里我们可以译成成员，如果一个别名下有多个成员，成员与成员之间，通过半角，号分隔：成员
在必须是有效并事实存在的。什么是有效的呢？比如主机名，可以通过w查看用户的主机名（或p地址），如果您只是本地
机操作，只通过hostname命令就能查看：用户名当然是在系统中存在的，在/etc/paswd中必须存在：对于定义命令别名，
成员也必须在系统中事实存在的文件名（需要绝对路径）：
item 成员受别名类型 Host_Alias、User_Alias、Runas_Alias、Cmnd_Alias 制约，定义什么类型的别名，就要有什么类型的
成员相配。我们用Host_Alias 定义主机别名时，成员必须是与主机相关相关联，比如是主机名（包括远程登录的主机名）、
ip地址（单个或整段）、掩码等：当用户登录时，可以通过w命令来查看登录用户主机信息：用User_Alias和Runas_Alias
定义时，必须要用系统用户做为成员：用Cmnd_Aias 定义执行命令的别名时，必须是系统存在的文件，文件名可以用通配
符表示，配置Cmnd_Alias时命令需要绝对路径：
其中 Runas_Alias 和 User_Alias 有点相似，但与 User_Alias 绝对不是同一个概念，Runas_Alias 定义的是某个系统用户
可以 sudo 切换身份到Runas_Alias 下的成员：我们在授权规则中以实例进行解说：
别名规则是每行算一个规则，如果一个别名规则一行容不下时，可以通过来续行：同一类型别名的定义，一次也可以定义儿
个别名，他们中间用：号分隔，
出成员
Host_A1iasHT02=st09, st10 注：主机别名 HT02，有两个成员；
Host_A1ias HT01=1ocalhost, st05, st04, 10, 0, 0, 4, 255. 255. 255. 0, 192. 168. 1. 0/24:HT02=st09, st10  注: 上面的两条对
主机的定义，可以通过一条来实现，别名之间用：号分割：
注：我们通过Host_Alias 定义主机别名时，项目可以是主机名、可以是单个ip（整段p地址也可以），也可以是网络掩码：
如来是主机名，必须是多台机器的网络中，面且这些机器得能通过主机名相互通信访同才有效。部什么才算是通过主机名相
互通信或访问呢？比如ping主机名，或通过运程访问主机名来访间。在我们局域网中，如果让计算机通过主机名访间通信，
必须设置/etc/hosts，/etc/resolv.conf，还要有 DNS 做解析，否则相互之间无法通过主机名访间：在设置主机别名时，如果
项目是中某个项目是主机名的话，可以通过hostname命令来查看本地主机的主机名，通过w命令查来看登录主机是来源，
通过来源来确认其它客户机的主机名或p地址：对于主机别名的定义，看上去有点复杂，其实是很简单。
如果您不明白Host_Alias是怎么回事，也可以不用设置主机别名，在定义授权规则时通过ALL来匹配所有可能出现的主机情
况。如果您把主机方面的知识弄的更明白，的确需要多多学习。
User_AliasSYSAD=beinan,linuxsir,bnnnb,lanhaitun 注：定义用户别名，下有四个成员：要在系统中确实在存在的：
User_AliasNETAD=beinan,banb注：定义用户别名NETAD，我想让这个别名下的用户来管理网络，所以取了 NETAD 的
别名：
User_AliasVEBMASTER=linuxsir注：定义用户别名WEBMASTER，我想用这个别名下的用户来管理网站；
User_Alias  SYSAD=beinan, linuxsir, bnnnb, lanhaitun:NETAD=beinan, bnnb: WEBMASTER=linuxsir 注： 上面=行的别名
定义，可以通过这一行来实现，请看前面的说明，是不是符合？
Cmnd_A1ias USERMAG=/usr/sbin/adduser, /usr/sbin/userde1, /usr/bin/passwd [AZaz]*, /bin/chown, /bin/chmod
注意：命令别名下的成员必须是文件或目录的绝对路径：
Cand_A1ias
DISKIAG=/sbin/fdisk, /sbin/parted
Cmnd_Alias
NETMAG=/sbin/ifconfig, /etc/init, d/network
Cand_Alias
KILL = /usr/bin/ki11
Cmnd_A1ias PWMAG = /usr/sbin/reboot, /usr/sbin/hal1t
Cand_Alias
SHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh, 
/usr/local/bin/tcsh, /usr/bin/rsh,\
/usr/loca1/bin/zsh
注：这行定义命令别名有点长，可以通过号断行：
---
## Page 34
Cmnd_A1ias SU = /usr/bin/su, /bin, /sbin, /usr/sbin, /usr/bin
在上面的例子中，有KILL和PWMAG的命令别名定义，我们可以合并为一行来写，也就是等价行：
Cmnd_Alias KILL = /usr/bin/ki11:PWMAG = /usr/sbin/reboot,/usr/sbin/halt 注: 这行就代表了 KILL 和 PWMAG
命令别名，把KILL和PMMAG的别名定义合并在一行写也是可以的：
Runas_Alias  OP = root, operator
Runas_AliasDBADMmysql:0P=root，operator注：这行是上面两行的等价行：至于怎么理解 Runas_Alias，我们1必须
得通过授权规则的实例来理解：
3.4.4、/etc/sudoers中的授权规则：
授权规期是分配权限的执行规期，我们前面所讲到的定义别名主要是为了史方使的授权引用别名：如来系统中只有儿个用户
其实下放权限比较有限的话，可以不用定义别名，而是针对系统用户直接直接授权，所以在授权规则中别名并不是必须的：
授权用户主机=命令动作
这三个要素缺一不可，但在动作之前也可以指定切换到特定用户下，在这里指定切换的用户要用（)号括起来，如果不需要密
码直接运行命令的，应该加NOPASSWD：参数，但这些可以省略：举例说明：
实例一：
beinan ALL=/bin/chown, /bin/chmod
如果我们在/etc/sudoers 中添加这一行，表示beinan 可以在任何可能出现的主机名的系统中，可以切换到root用户下执行
/bin/chown 和/bin/chmod命令，通过 sudo-I来查看beinan 在这台主机上允许和禁止运行的命令：
值得注意的是，在这里省略了指定切换到哪个用户下执行/bin/shown和/bin/chmod命令：在省略的情况下默认为是切换到root
用户下执行：同时也省略了是不是需要beinan用户输入验证密码，如果省略了，默认为是需要验证密码。
为了更详细的说明这些，我们可以构造一个更复杂一点的公式：
授权用户主机=[《（切换到哪些用户或用户组][是否需要密码验证]命令1,【（切换到娜些用户或用户组)][是否需要密码验证]
[命令2][（切换到哪些用户或用户组]][是否需要密码验证][命令3]
注解：
凡是[】中的内容，是可以省略：命令与命令之间用，号分隔：通过本文的例子，可以对照着看哪些是省略了，哪些地方需要有
空格：
在[（切换到哪些用户或用户组)]，如果省略，则默认为root用户：如果是ALL，则代表能切换到所有用户：注意要切换到的
目的用户必须用(号括起来，比如(ALL)、(beinan)
实例二：
beinan ALL=(root) /bin/chosn, /bin/chmod
如果我们把第一个实例中的那行去掉，换成这行：表示的是beinan 可以在任何可能出现的主机名的主机中，可以切换到root
下执行/bin/chown，可以切换到任何用户招执行/bin/chmod命令，通过sudo-I来查看beinan在这台主机上允许和禁止运
行的命令：
实例三：
beinan ALL= (root)NOPASSRD: /bin/chown, /bin/chnod
---
## Page 35
如果换成这个例子呢？表示的是beinan 可以在任何可能出现的主机名的主机中，可以切换到root下执行/bin/chown，不需
要输入beinan用户的密码：并且可以切换到任何用户下执行/bin/chmod命令，但执行chmod 时需要beinan 输入自己的密
码：通过 sudo-来查看 beinan 在这台主机上允许和禁止运行的命令：
关于一个命令动作是不是需要密钙，我们可以发现在系统在默认的情况下是需要用户密码的，除非特加指出不需要用户需要
输入自己密码，所以要在执行动作之前加入NOPASSWD：参数；
有可能有的弟兄对系统管理的命令不太懂，不知道其用法，这样就影响了他对sudoers定义的理解，下面我们再举一个最简
单，最有说服务力的例子：
实例四：
比如我们想用 beinan普通用户通过 more/etc/shadow文件的内容时，可能会出现下面的情况；
[beinan@localhost ~]$ more /etc/shadon
/etc/shadow：权限不够
这时我们可以用 sudo more /etc/shadow来读取文件的内容：就就需要在/etc/soduers 中给beinan 授权：
于是我们就可以先 su到root用户下通过visudo来改/etc/sudoers：（比如我们是以beinan用户登录系统的）
[beinan@localhost ~]$ su
Passvord:注：在这里输入root 密码
下面运行visodu;
[rootelocalhost beinan]#visudo注:运行 visudo 来改/etc/sudoers
加入如下一行，退出保存：退出保存，在这里要会用vi，visudo 也是用的vi编辑器：至于vi 的用法不多说了；
beinan ALL=/bin/nore表示beinan可以切换到root 下执行more 来查看文件：
退回到 beinan 用户下，用 exit 命令：
[root0localhost beinan]#exit
exit
[beinan0localhost ~]$
查看 beinan的通过 sudo 能执行哪些命令？
[beinan@localhost ~]$ sudo 1
Passvord:注：在这里输入beinan用户的密码
User beinan may run the following commands on this host:：注：在这里清晰的说明在本台主机上，beinan用户可以以
root 权限运行more：在root 权限下的 more，可以查者任何文本文件的内容的：
(root)/bin/nore
最后，我们看看是不是beinan用户有能力看到/etc/shadow文件的内容；
[beinan@localhost ~]$ sudo more /etc/shadov
beinan 不但能看到/etc/shadow文件的内容，还能看到只有root权限下才能看到的其它文件的内容，比如：
[beinan@localhost *]$ sudo more /etc/gshadox
对于beinan用户查看和读取所有系统文件中，我只想把/etc/shadow的内容可以让他查看：可以加入下面的一行：
beinan ALL=/bin/nore /etc/shador
题外话：有的弟兄会说，我通过su切换到root用户就能看到所有想看的内容了，哈哈，对啊。但咱们现在不是在讲述sudo
的用法吗？如果主机上有多个用户并且不如道root用户的密码，但又想查看某些他们看不到的文件，这时就需要管理员授权
了：这就是 sudo 的好处;
实例五：习用户组在/etc/sudoers中写法：
---
## Page 36
如果用户组出现在/etc/sudoers 中，前面要加%号，比如%beinan，中间不能有空格：
%beinanALL=/usr/sbin/*, /sbin/*
如果我们在/etc/sudoers 中加上如上一行，表示beinan 用户组下的所有成员，在所有可能的出现的主机名下，都能切换到
root用户下运行/usr/sbin 和/sbin 目录下的所有命令；
实例六：综习取消某类程序的执行：
取消程序某类程序的执行，要在命令动作前面加上！号：在本例中也出现了通配符的*的用法：
beinanALL=/usr/sbin/*,/sbin/*, !/usr/sbin/fdisk注：把这行规则加入到/etc/sudoers 中=但您得有 beinan 这个用
户组，并且beinan也是这个组中的才行：
本规则表示beinan用户在所有可能存在的主机名的主机上运行/usr/sbin 和/sbin下所有的程序，但fdisk 程序除外：
[beinan@localhost ~]$ sudo -I
Password:注：在这里输入beinan用户的密码：
User beinan may run the following commands on this host:
(root) /usr/sbin/*
(root) /sbin/*
(root) /sbin/fdisk
I- xs(pi/uqs/ opns $[~ jsoujeool@ueujeq]
Sorry, user beinan is not allowed to execute /sbin/fdisk -I as root on localhost.
注：不能切换到root用户下运行 fdisk 程序；
实例七：别名的运用的实践：
假如我们就一台主机localhost，能通过hostname来查者，我们在这里就不定义主机别名了，用ALL 来匹配所有可能出现的
主机名：并且有 beinan、Inuxsir、lanhaitun 用户：主要是通过小例子能更好理解：sudo 虽然简单好用，但能把说的明白的
确是件难事：最好的办法是多看例子和 man soduers；
User_Alias SYSADER=beinan, linuxsir, %beinan
User_Alias DISKADER=1anhaitun
Runas_Alias 0P=root
Cmnd_Alias
SYDCMD=/bin/chown, /bin/chmod, /usr/sbin/adduser, /usr/bin/passwd [AZazJ*, 1/usr/bin/passwd
root
Cand_Alias
DSKCMD=/sbin/parted, /sbin/fdisk注： 定义命令别名 DSKCMID, 下有成员 parted 和 fdisk ;
SYSADER  ALL= SYDCMD, DSKCMD
DISKADER ALL= (OP)DSKCMD