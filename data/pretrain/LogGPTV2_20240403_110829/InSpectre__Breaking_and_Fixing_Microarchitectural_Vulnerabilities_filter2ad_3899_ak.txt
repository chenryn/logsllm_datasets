cases for Ret when t ∈ F2 (which are identiﬁed by T 3 in Figure).
Lemma A.9. Assume that σ1 R (σ2, δ2, P2).
(Case Ret and t < F2) Assume that σ2 −→→ σ ′
dom(δ2) = ∅, t < P2, and (I2, s2, C2, F2) ∼t (I2, δ2(t ), C2, F2) such
that I ′
= P2.
2
By Lemma 5.3 [ι](I2, s2, C2, F2) = s2(t ). By cond. 4, whenever
2, t ∈ dom(s2), dom(δ2(t ))∩
= C2, F ′
2
= s2, C ′
2
= F2, δ ′
2
, and P ′
2
= I2, s ′
2
= δ2|
{t }
Let t ← c?o ∈ I2 be the microinstruction bound to t in I2. Since
dom(δ2) ∩ dom(δ2(t )) = ∅ we know that t ∈ I2,uf and hence
t ′ < dom(δ2), s1(et ′) = s2(t ′). We know that s1(eti ) = s2(ti ) by 4.
et ∈ dom(I1) by 2. It follows thatet can be executed resulting in
I ′
1
F ′
1
(Case Ret and t ∈ F2) In this case we must additionally account for
the microinstructions produced by t: i.e. the partition ˆI2 of I2 such
that {t ← c?o} < ˆI2. Œe microsintructions are not in I2,uf , since
= I1, s ′
2(t )] such that s ′
1
= F1. Œis is suﬃcient to reestablish R.
= s1[et 7→ s ′
1(et ) = gs ′
2(t ), C ′
1
= C1, and
2,uf
t ∈ dom(δ2), hence are not covered by the bijectione·. However,
1 and apply Ftc to t. Œis allows to extend the bijectione· to
microinstructions in ˆI2 are in I ′
. For this reason, in order to
restablish the bisimulation, the OoO must perform a further step
from σ ′
relate the newly decoded microinstructions to ˆI2.
(Converse direction) For the converse direction, from the OoO
semantics to the speculative semantics the steps for commits and
non-speculative retires follow the commit case above closely. Œe
only delicate case is for Exe. So assume σ1 −→OoO σ ′
1 such that
= I1,
s ′
= F1. We get that ι = t ←
1
c?o ∈ I2,uf . Œere are two cases. Either t < dom(s2) (t has not yet
been executed), or t ∈ dom(s2) ∩ dom(δ2). In the former case, the
execution step can be mirrored in the speculative semantics and
then retired. In the laŠer case, the execution step can be retired
directly. Œis completes the proof of lemma A.9.
(cid:3)
eι =et ←ec?eo ∈ I1,et < dom(s1), [ec]s1 is true, [eι]σ1 = (ev,el), I ′
= s1[et 7→ ev], C ′
= C1, and F ′
1
1
1
We now obtain theorem 6.4 as a corollary of lemma A.7 and A.9.
✷
(1) If (σ2, δ2, P2) −→→→ (σ ′
2, δ ′
2, P ′
2) is an instance of Cmt, Ftc, or
(2) If σ1 −→→ σ ′
1 R (σ ′
2, δ ′
1 such that σ ′
Ret then σ1 −→→∗ σ ′
1 then (σ2, δ2, P2) −→→→ (σ ′
2, δ ′
2, P ′
Proof. Assume ﬁrst that (σ2, δ2, P2) −→→→ (σ ′
2, P ′
2).
2) such that σ ′
1 R (σ ′
2, δ ′
2, P ′
2). Let σi =
2, P ′
1 R (σ ′
i ). We prove that σ ′
(Ii , si , Ci , Fi ) and σ ′
2)
i
and proceed by cases, ﬁrst from the speculative to the OoO seman-
tics.
(Case Cmt) We get σ2 −→→ σ ′
2, and t < dom(δ2), t ← c?st M ta tv ∈
I2, s2(t ) = v, t < C2 and bn(str-may(σ2, t )) ⊆ C2. Since t is not
i , C ′
2, δ ′
i , F ′
i , s ′
= (I ′
members of bn(str-may(σ2, t )) are non-speculated, by cond. 2, 3,
speculated we get t ∈ I2,r et ir ed . Since t < dom(δ2) we get s1(et ) =ev
by cond. 4,et < fC1 by cond. 3,et ∈ eI2 by cond. 2, and, since all
4, bn(str-may(σ1,et )) ⊆ C1. It follows that σ ′
= (I1, s1, C1 ∪ {et , F1),
and the conditions 1.-5. for σ ′
(Case non-speculative Ftc) For a non-speculative fetch we get
t < dom(δ2). Also, σ2 −→→ σ ′
2), t ),
t ← c?st P C tv ∈ I2, s2(t ) = v, t < F, bn(str-may(σ2, t )) ⊆ C2,
I ′
= F2 ∪ {t }. Since t ←
2
c?st P C tv ∈ I2 and t < dom(δ2) we obtain that t ← c?st P C tv ∈
2, step-param(σ2, σ ′
2 are easily veriﬁed.
= C2, and F ′
2
2) = (Ftc(I ′
= I2 ∪ I ′′
= s2, C ′
2
1 and σ ′
2 , s ′
2
1
I2,r et ir ed and hence thatet ←ec?st P C etv ∈ I1. Also, s1(et ) = ev by
cond. 4, t < F1 by cond. 5, and bn(str-may(σ1,et )) ⊆ F1. But then
2 (by wellformedness), s ′
1
1 where I ′
1
= s1, C ′
1
= C1,
= I1 ∪eI ′
σ1 −→→ σ ′
and F ′
1
= F1 ∪ {et }.
2, δ ′
A.4 MIL Constant Time Security: ‡eorem 7.3
2, P ′
2).
Œe proof is done by showing that the relation R is a bisimulation
for the OoO transition relation, where σ Rσ ′ iﬀ σ ≈ σ ′ and there
exist σ0 ∼L σ ′
0 and n such that σ0 −→→n σ and σ ′
0 −→→n σ ′.
Let (I , s, C .F) = σ , (I ′
.F ′) = σ ′, σ −→→ σ1 = (I ∪ It , s ∪
st , C ∪ Ct , F ∪ Ft ), and step-param(σ , σ1) = (α , t ). Œe proof is
done by case analysis on α.
, C ′
, s ′
(Case Exe) Œe hypothesis of the rule ensure that ι = t ← c?o ∈
I , s(t )↑, [c]s, and [ι]σ = (v, l ). Œe conclusion ensures that ˆs =
{t 7→ v }, ˆC = ∅, ˆF = ∅, and ˆI = ∅. Relation ≈ ensures that ι ∈ I ′,
s ′(t )↑, and [c]s ′.
We must show that exists v ′ such that [ι]σ ′ = (v ′
, l ). For o = e
and o = st τ ta tv the proof is trivial.
In fact, since [ι]σ then
all free names of o are deﬁned in σ and ≈ ensures that the same
names are deﬁned in σ ′. For o = ld τ ta, [ι]σ = (v, l ) ensures
that bn(str-act(σ , t )) = {ts }, σ (ta )↓, and σ (ts )↓. Relation ≈ ensures
that σ ′(ta ) = σ (ta ), σ ′(ts )↓, I = I ′ (hence there are the same
a t ′
store instructions), and that for every store t ′ ← c ′?st τ t ′
v ,
[c ′]σ = [c ′]σ ′, and σ (t ′
, t )) =
bn(str-act(σ , t )) and [ι]σ ′ = (σ ′(ts ), l ′). Finally, since relation ≈
guarantee that (ts ∈ C) ⇔ (ts ∈ C ′) then l ′ = l.
Œese properties enable applying rule (Exe) to show that σ ′
a ). Œerefore bn(str-act(σ ′
a ) = σ ′(t ′
l
−→→
21
−−−−→→ (I ′ ∪ translate(v ′
, t )) ⊆ F ′. We can apply rule
, F ′ ∪
Exe when o = ld ta .
Relation ≈ ensures that bn(str-may(σ ′
(Ftc) to show that σ ′ il v ′
{t }) = σ ′
1.
To show that v ′ = v and ≈ is reestablished for translate(v, max(I ))
we use a similar reasoning to case Exe. We ﬁnd two sequential
traces that end with the fetch of t and use MIL constant time to
show that the value used for the PC update must be the same and
that the parameter and conditions of the newly decoded microin-
structions are equivalent in the two states.
, max(I ))), s ′
, C ′
, F ′) = σ ′
1.
, s ′ ∪ {t 7→ s ′(ts )}, C ′
(I ′
To prove that ≈ is preserved we use Œeorem 6.3. Let t ′ ← c ′?o′ ∈
I . Let N ′ be f n(c ′) if o′ is neither a load or a store; f n(c ′) ∪ {t ′
a }
if o′ is a memory or register access and t ′
a is the corresponding
address; f n(c ′) ∪ {t ′
v is
the corresponding value. If t < N ′ then the proof is trivial, since
[c]s ∪ {t 7→ v } = [c]s = [c]s ′ = [c]s ′ ∪ {t 7→ s ′(ts )} (the same
holds for the address in case of a resource accesses or program
counter update).
v } if o′ is a program counter update and t ′
σ0
∼L
σ ′
0
n
n
σ
R
σ ′
n + 1 + m
(α , t )
n + 1 + m
σ1
R
σ ′
1
m
m
σS
≈
σ ′
S
For t ∈ f n(c ′) we reason as follows. States σ1 and σ ′
1 are the (n +1)-
th states of two OoO traces ρ = σ0 −→→n+1 σ1 and ρ ′ = σ ′
0 −→→n+1 σ ′
1
0. Œere is a trace ρ1 = σ0 −→→n+1 σ1 −→→m σs
such that σ0 ∼L σ ′
that has preﬁx ρ, such that C(σs , t ′′) for every t ′′ ≤ max(bn(I ′)).
Notice that this state is “sequential”. Since in the OoO semantics
the storage is monotonic then σ1(t ) = σs (t ). Œeorem 6.3 permits
to connect this trace to a sequential trace, which enables to use
the MIL constant-time hypothesis. In fact, there exists an ordered
execution π of ρ1 that ends in σs : π = σ0 −→n+1+m σs . For the
same reason, ρ ′ is a preﬁx of a trace ρ ′
1 that ends in a sequential
state σ ′
1(t ), and there exists a sequential trace π ′ of
n + 1 + m steps that ends in σ ′
s , t ′′) then
[c ′](σs )↓ and [c ′](σ ′
s )↓. Œerefore, we can use the assumption on
s , hence [c ′]σs = [c ′]σ ′
MIL constant-time to show that σs ≈ σ ′
s .
s )↑ or [c ′]σ1 = [c ′]σ ′
Since t ∈ f n(c), either [c ′](σs )↑ and [c ′](σ ′
1.
Œe same reasoning is used if t ′ is a resource accesses and t = t ′
a ,
or if t ′ is program counter update and t = t ′
v .
s . Since C(σs , t ′′) and C(σ ′
s (t ) = σ ′
s , σ ′
(Case Cmt) Œe hypothesis ensure that t ← c?st M ta tv ∈ I ,
s(t ) = v, t < C, bn(str-may(σ , t )) ⊆ C, and s(ta) = a. Œe conclu-
sion ensures that st = ∅, Ct = {t }, Ft = ∅, It = ∅, and l = ds a.
Also, the invariant guarantees that [c]s.
Œe relation ≈ ensures that t ← c?st M ta tv ∈ I ′, ∃v ′
t < C ′, s ′(ta) = a, and [s]′[c].
To show that bn(str-may(σ ′
same reasoning used to prove that bn(str-act(σ ′
Exe when o = ld ta .
Relation ≈ ensures that bn(str-may(σ ′
apply rule (Cmt) to show that σ ′ l
−→→ (I ′
σ1 ≈ σ ′
1.
, t )) = bn(str-may(σ , t )) we use the
, t )) = {ts } of case
, t )) ⊆ C ′. Œerefore we can
, s ′
, C ′ ∪ {t }, F ′) = σ ′
.s ′(t ) = v ′,
1 hence
(Case Ftc) Œe hypothesis of the rule ensure that t ← c?st P C tv ∈
I , s(t ) = v, t < F, bn(str-may(σ , t )) ⊆ F. Œe conclusion ensures
that st = ∅, Ct = ∅, Ft = {t }, It = translate(v, max(I )), and l = il v.
Also, the invariant guarantees that [c]s.
Œe relation ≈ ensures that t ← c?st P C tv ∈ I ′, ∃v ′
t < F ′, and [c]s ′.
To show that bn(str-may(σ ′
same reasoning used to prove that bn(str-act(σ ′
, t )) = bn(str-may(σ , t )) we use the
, t )) = {ts } of case
.s ′(t ) = v ′,
22