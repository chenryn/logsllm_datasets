the handle to the reserve object. Instead of allocating a new structure, the
kernel attempts to acquire the reserve object (by setting its InUse bit to true)
and uses it until the KAPC object is not needed anymore, at which point the
reserve object is released back to the system. Currently, to prevent
mismanagement of system resources by third-party developers, the reserve
object API is available only internally through system calls for operating
system components. For example, the RPC library uses reserved APC objects
to guarantee that asynchronous callbacks will still be able to return in low-
memory situations.
A similar scenario can occur when applications need failure-free delivery
of an I/O completion port message or packet. Typically, packets are sent with
the PostQueuedCompletionStatus API in Kernelbase.dll, which calls the
NtSetIoCompletion API. Like the user APC, the kernel must allocate an I/O
manager structure to contain the completion-packet information, and if this
allocation fails, the packet cannot be created. With reserve objects, the
application can use the NtAllocateReserveObject API on startup to have the
kernel preallocate the I/O completion packet, and the NtSetIoCompletionEx
system call can be used to supply a handle to this reserve object,
guaranteeing a successful path. Just like User APC reserve objects, this
functionality is reserved for system components and is used both by the RPC
library and the Windows Peer-To-Peer BranchCache service to guarantee
completion of asynchronous I/O operations.
Object security
When you open a file, you must specify whether you intend to read or to
write. If you try to write to a file that is open for read access, you get an error.
Likewise, in the executive, when a process creates an object or opens a
handle to an existing object, the process must specify a set of desired access
rights—that is, what it wants to do with the object. It can request either a set
of standard access rights (such as read, write, and execute) that apply to all
object types or specific access rights that vary depending on the object type.
For example, the process can request delete access or append access to a file
object. Similarly, it might require the ability to suspend or terminate a thread
object.
When a process opens a handle to an object, the Object Manager calls the
security reference monitor, the kernel-mode portion of the security system,
sending it the process’s set of desired access rights. The security reference
monitor checks whether the object’s security descriptor permits the type of
access the process is requesting. If it does, the reference monitor returns a set
of granted access rights that the process is allowed, and the Object Manager
stores them in the object handle it creates. How the security system
determines who gets access to which objects is explored in Chapter 7 of Part
1.
Thereafter, whenever the process’s threads use the handle through a
service call, the Object Manager can quickly check whether the set of granted
access rights stored in the handle corresponds to the usage implied by the
object service the threads have called. For example, if the caller asked for
read access to a section object but then calls a service to write to it, the
service fails.
EXPERIMENT: Looking at object security
You can look at the various permissions on an object by using
either Process Hacker, Process Explorer, WinObj, WinObjEx64, or
AccessChk, which are all tools from Sysinternals or open-source
tools available on GitHub. Let’s look at different ways you can
display the access control list (ACL) for an object:
■    You can use WinObj or WinObjEx64 to navigate to any
object on the system, including object directories, right-
click the object, and select Properties. For example, select
the BaseNamedObjects directory, select Properties, and
click the Security tab. You should see a dialog box like the
one shown next. Because WinObjEx64 supports a wider
variety of object types, you’ll be able to use this dialog on a
larger set of system resources.
By examining the settings in the dialog box, you can see that the
Everyone group doesn’t have delete access to the directory, for
example, but the SYSTEM account does (because this is where
session 0 services with SYSTEM privileges will store their
objects).
■    Instead of using WinObj or WinObjEx64, you can view the
handle table of a process using Process Explorer, as shown
in the experiment “Viewing open handles” earlier in this
chapter, or using Process Hacker, which has a similar view.
Look at the handle table for the Explorer.exe process. You
should notice a Directory object handle to the
\Sessions\n\BaseNamedObjects directory (where n is an
arbitrary session number defined at boot time. We describe
the per-session namespace shortly.) You can double-click
the object handle and then click the Security tab and see a
similar dialog box (with more users and rights granted).
■    Finally, you can use AccessChk to query the security
information of any object by using the –o switch as shown
in the following output. Note that using AccessChk will
also show you the integrity level of the object. (See Chapter
7 of Part 1, for more information on integrity levels and the
security reference monitor.)
Click here to view code image
C:\sysint>accesschk -o \Sessions\1\BaseNamedObjects
Accesschk v6.13 - Reports effective permissions for 
securable objects
Copyright (C) 2006-2020 Mark Russinovich
Sysinternals - www.sysinternals.com
\Sessions\1\BaseNamedObjects
  Type: Directory
  RW Window Manager\DWM-1
  RW NT AUTHORITY\SYSTEM
  RW DESKTOP-SVVLOTP\aione
  RW DESKTOP-SVVLOTP\aione-S-1-5-5-0-841005
  RW BUILTIN\Administrators
  R  Everyone
     NT AUTHORITY\RESTRICTED
Windows also supports Ex (Extended) versions of the APIs
—CreateEventEx, CreateMutexEx, CreateSemaphoreEx—that add another
argument for specifying the access mask. This makes it possible for
applications to use discretionary access control lists (DACLs) to properly
secure their objects without breaking their ability to use the create object
APIs to open a handle to them. You might be wondering why a client
application would not simply use OpenEvent, which does support a desired
access argument. Using the open object APIs leads to an inherent race
condition when dealing with a failure in the open call—that is, when the
client application has attempted to open the event before it has been created.
In most applications of this kind, the open API is followed by a create API in
the failure case. Unfortunately, there is no guaranteed way to make this
create operation atomic—in other words, to occur only once.
Indeed, it would be possible for multiple threads and/or processes to have
executed the create API concurrently, and all attempt to create the event at
the same time. This race condition and the extra complexity required to try to
handle it makes using the open object APIs an inappropriate solution to the
problem, which is why the Ex APIs should be used instead.
Object retention
There are two types of objects: temporary and permanent. Most objects are
temporary—that is, they remain while they are in use and are freed when they
are no longer needed. Permanent objects remain until they are explicitly
freed. Because most objects are temporary, the rest of this section describes
how the Object Manager implements object retention—that is, retaining
temporary objects only as long as they are in use and then deleting them.
Because all user-mode processes that access an object must first open a
handle to it, the Object Manager can easily track how many of these
processes, and which ones, are using an object. Tracking these handles
represents one part of implementing retention. The Object Manager
implements object retention in two phases. The first phase is called name
retention, and it is controlled by the number of open handles to an object that
exists. Every time a process opens a handle to an object, the Object Manager
increments the open handle counter in the object’s header. As processes
finish using the object and close their handles to it, the Object Manager
decrements the open handle counter. When the counter drops to 0, the Object
Manager deletes the object’s name from its global namespace. This deletion
prevents processes from opening a handle to the object.
The second phase of object retention is to stop retaining the objects
themselves (that is, to delete them) when they are no longer in use. Because
operating system code usually accesses objects by using pointers instead of
handles, the Object Manager must also record how many object pointers it
has dispensed to operating system processes. As we saw, it increments a
reference count for an object each time it gives out a pointer to the object,
which is called the pointer count; when kernel-mode components finish using
the pointer, they call the Object Manager to decrement the object’s reference
count. The system also increments the reference count when it increments the
handle count, and likewise decrements the reference count when the handle
count decrements because a handle is also a reference to the object that must
be tracked.
Finally, we also described usage reference count, which adds cached
references to the pointer count and is decremented each time a process uses a
handle. The usage reference count has been added since Windows 8 for
performance reasons. When the kernel is asked to obtain the object pointer
from its handle, it can do the resolution without acquiring the global handle
table lock. This means that in newer versions of Windows, the handle table
entry described in the “Object handles and the process handle table” section
earlier in this chapter contains a usage reference counter, which is initialized
the first time an application or a kernel driver uses the handle to the object.
Note that in this context, the verb use refers to the act of resolving the object
pointer from its handle, an operation performed in kernel by APIs like the
ObReferenceObjectByHandle.
Let’s explain the three counts through an example, like the one shown in
Figure 8-35. The image represents two event objects that are in use in a 64-
bit system. Process A creates the first event, obtaining a handle to it. The
event has a name, which implies that the Object Manager inserts it in the
correct directory object (\BaseNamedObjects, for example), assigning an
initial reference count to 2 and the handle count to 1. After initialization is
complete, Process A waits on the first event, an operation that allows the
kernel to use (or reference) the handle to it, which assigns the handle’s usage
reference count to 32,767 (0x7FFF in hexadecimal, which sets 15 bits to 1).
This value is added to the first event object’s reference count, which is also
increased by one, bringing the final value to 32,770 (while the handle count
is still 1.)
Figure 8-35 Handles and reference counts.
Process B initializes, creates the second named event, and signals it. The
last operation uses (references) the second event, allowing it also to reach a
reference value of 32,770. Process B then opens the first event (allocated by
process A). The operation lets the kernel create a new handle (valid only in
the Process B address space), which adds both a handle count and reference
count to the first event object, bringing its counters to 2 and 32,771.
(Remember, the new handle table entry still has its usage reference count
uninitialized.) Process B, before signaling the first event, uses its handle three
times: the first operation initializes the handle’s usage reference count to
32,767. The value is added to the object reference count, which is further
increased by 1 unit, and reaches the overall value of 65,539. Subsequent
operations on the handle simply decreases the usage reference count without
touching the object’s reference count. When the kernel finishes using an
object, it always dereferences its pointer, though—an operation that releases
a reference count on the kernel object. Thus, after the four uses (including the
signaling operation), the first object reaches a handle count of 2 and
reference count of 65,535. In addition, the first event is being referenced by
some kernel-mode structure, which brings its final reference count to 65,536.
When a process closes a handle to an object (an operation that causes the
NtClose routine to be executed in the kernel), the Object Manager knows that
it needs to subtract the handle usage reference counter from the object’s
reference counter. This allows the correct dereference of the handle. In the
example, even if Processes A and B both close their handles to the first
object, the object would continue to exist because its reference count will
become 1 (while its handle count would be 0). However, when Process B
closes its handle to the second event object, the object would be deallocated,
because its reference count reaches 0.
This behavior means that even after an object’s open handle counter
reaches 0, the object’s reference count might remain positive, indicating that
the operating system is still using the object in some way. Ultimately, it is
only when the reference count drops to 0 that the Object Manager deletes the
object from memory. This deletion has to respect certain rules and also
requires cooperation from the caller in certain cases. For example, because
objects can be present both in paged or nonpaged pool memory (depending
on the settings located in their object types), if a dereference occurs at an
IRQL level of DISPATCH_LEVEL or higher and this dereference causes the
pointer count to drop to 0, the system would crash if it attempted to
immediately free the memory of a paged-pool object. (Recall that such access
is illegal because the page fault will never be serviced.) In this scenario, the
Object Manager performs a deferred delete operation, queuing the operation
on a worker thread running at passive level (IRQL 0). We’ll describe more
about system worker threads later in this chapter.
Another scenario that requires deferred deletion is when dealing with
Kernel Transaction Manager (KTM) objects. In some scenarios, certain
drivers might hold a lock related to this object, and attempting to delete the
object will result in the system attempting to acquire this lock. However, the
driver might never get the chance to release its lock, causing a deadlock.
When dealing with KTM objects, driver developers must use
ObDereferenceObjectDeferDelete to force deferred deletion regardless of
IRQL level. Finally, the I/O manager also uses this mechanism as an
optimization so that certain I/Os can complete more quickly, instead of
waiting for the Object Manager to delete the object.
Because of the way object retention works, an application can ensure that
an object and its name remain in memory simply by keeping a handle open to
the object. Programmers who write applications that contain two or more
cooperating processes need not be concerned that one process might delete
an object before the other process has finished using it. In addition, closing
an application’s object handles won’t cause an object to be deleted if the
operating system is still using it. For example, one process might create a
second process to execute a program in the background; it then immediately
closes its handle to the process. Because the operating system needs the
second process to run the program, it maintains a reference to its process
object. Only when the background program finishes executing does the
Object Manager decrement the second process’s reference count and then
delete it.
Because object leaks can be dangerous to the system by leaking kernel
pool memory and eventually causing systemwide memory starvation—and
can break applications in subtle ways—Windows includes a number of
debugging mechanisms that can be enabled to monitor, analyze, and debug
issues with handles and objects. Additionally, WinDbg comes with two
extensions that tap into these mechanisms and provide easy graphical
analysis. Table 8-24 describes them.
Table 8-24 Debugging mechanisms for object handles
Mechan
ism
Enabled By
Kernel 
Debugger 
Extension
Handle 
Tracing 
Database
Kernel Stack Trace systemwide and/or per-
process with the User Stack Trace option 
checked with Gflags.exe
!htrace 
Object 
Referenc
e 
Tracing
Per-process-name(s), or per-object-type-
pool-tag(s), with Gflags.exe, under Object 
Reference Tracing
!obtrace 
Object 
Referenc
e 
Tagging
Drivers must call appropriate API
N/A
Enabling the handle-tracing database is useful when attempting to
understand the use of each handle within an application or the system
context. The !htrace debugger extension can display the stack trace captured
at the time a specified handle was opened. After you discover a handle leak,
the stack trace can pinpoint the code that is creating the handle, and it can be
analyzed for a missing call to a function such as CloseHandle.
The object-reference-tracing !obtrace extension monitors even more by
showing the stack trace for each new handle created as well as each time a
handle is referenced by the kernel (and each time it is opened, duplicated, or
inherited) and dereferenced. By analyzing these patterns, misuse of an object
at the system level can be more easily debugged. Additionally, these
reference traces provide a way to understand the behavior of the system when
dealing with certain objects. Tracing processes, for example, display
references from all the drivers on the system that have registered callback
notifications (such as Process Monitor) and help detect rogue or buggy third-
party drivers that might be referencing handles in kernel mode but never
dereferencing them.
 Note
When enabling object-reference tracing for a specific object type, you can
obtain the name of its pool tag by looking at the key member of the
OBJECT_TYPE structure when using the dx command. Each object type
on the system has a global variable that references this structure—for
example, PsProcessType. Alternatively, you can use the !object
command, which displays the pointer to this structure.
Unlike the previous two mechanisms, object-reference tagging is not a
debugging feature that must be enabled with global flags or the debugger but
rather a set of APIs that should be used by device-driver developers to
reference and dereference objects, including ObReferenceObjectWithTag and
ObDereferenceObjectWithTag. Similar to pool tagging (see Chapter 5 in Part
1 for more information on pool tagging), these APIs allow developers to
supply a four-character tag identifying each reference/dereference pair. When
using the !obtrace extension just described, the tag for each reference or
dereference operation is also shown, which avoids solely using the call stack
as a mechanism to identify where leaks or under-references might occur,
especially if a given call is performed thousands of times by the driver.
Resource accounting
Resource accounting, like object retention, is closely related to the use of
object handles. A positive open handle count indicates that some process is
using that resource. It also indicates that some process is being charged for
the memory the object occupies. When an object’s handle count and
reference count drop to 0, the process that was using the object should no
longer be charged for it.
Many operating systems use a quota system to limit processes’ access to
system resources. However, the types of quotas imposed on processes are
sometimes diverse and complicated, and the code to track the quotas is
spread throughout the operating system. For example, in some operating
systems, an I/O component might record and limit the number of files a
process can open, whereas a memory component might impose a limit on the
amount of memory that a process’s threads can allocate. A process
component might limit users to some maximum number of new processes
they can create or a maximum number of threads within a process. Each of
these limits is tracked and enforced in different parts of the operating system.
In contrast, the Windows Object Manager provides a central facility for
resource accounting. Each object header contains an attribute called quota
charges that records how much the Object Manager subtracts from a
process’s allotted paged and/or nonpaged pool quota when a thread in the
process opens a handle to the object.
Each process on Windows points to a quota structure that records the
limits and current values for nonpaged-pool, paged-pool, and page-file usage.
These quotas default to 0 (no limit) but can be specified by modifying
registry values. (You need to add/edit NonPagedPoolQuota,
PagedPoolQuota, and PagingFileQuota under
HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory
Management.) Note that all the processes in an interactive session share the
same quota block (and there’s no documented way to create processes with
their own quota blocks).
Object names
An important consideration in creating a multitude of objects is the need to
devise a successful system for keeping track of them. The Object Manager
requires the following information to help you do so:
■    A way to distinguish one object from another
■    A method for finding and retrieving a particular object
The first requirement is served by allowing names to be assigned to
objects. This is an extension of what most operating systems provide—the
ability to name selected resources, files, pipes, or a block of shared memory,
for example. The executive, in contrast, allows any resource represented by
an object to have a name. The second requirement, finding and retrieving an
object, is also satisfied by object names. If the Object Manager stores objects
by name, it can find an object by looking up its name.
Object names also satisfy a third requirement, which is to allow processes
to share objects. The executive’s object namespace is a global one, visible to
all processes in the system. One process can create an object and place its
name in the global namespace, and a second process can open a handle to the
object by specifying the object’s name. If an object isn’t meant to be shared