    static int
    _Unpickler_MemoPut(UnpicklerObject *self, Py_ssize_t idx, PyObject *value)
    {
        PyObject *old_item;
        if (idx >= self->memo_size) { // 条件成立直接*2分配空间
            if (_Unpickler_ResizeMemoList(self, idx * 2) memo_size);
        }
        Py_INCREF(value);
        old_item = self->memo[idx];
        self->memo[idx] = value;
        Py_XDECREF(old_item);
        return 0;
    }
再次回溯，寻找`idx`的来源
    static int
    load_long_binput(UnpicklerObject *self)
    {
        PyObject *value;
        Py_ssize_t idx;
        char *s;
        if (_Unpickler_Read(self, &s, 4) stack) stack->data[Py_SIZE(self->stack) - 1];
        idx = calc_binsize(s, 4);
        if (idx  PY_SSIZE_T_MAX)
            return -1;
        else
            return (Py_ssize_t) x;
    }
其最终来源于我们的输入值，所以通过修改我们的输入值，可以成功导致基于堆的越界写
修复
    #define PyMem_RESIZE(p, type, n) 
      ( (p) = ((size_t)(n) > PY_SSIZE_T_MAX / sizeof(type)) ? NULL :    
        (type *) PyMem_REALLOC((p), (n) * sizeof(type)) //  如果为0，直接失败
###  int and float constructing from non NUL-terminated buffer
找到未修复`commit:9ad0aae6566311c6982a20955381cda5a2954519`  
官方[issues](https://bugs.python.org/issue24802)
这个issue我找到了`commit`，搭建了环境，但是没有复现成功，最主要的是，对我们寻找`fuzz`方面没有太大帮助，但是对我们理解字符串转换的危害还是很有帮助的，所以我们从原理上来跟一下源码  
那就通过`issue`中提到的代码，从理论上来复现一下
`poc.py`
    import array
    float(array.array("B",b"A"*0x10))
调用栈
    STACK_TEXT:  
    0080f328 651ac6e9 ffffffff 000000c8 00000000 python35!unicode_fromformat_write_cstr+0x10
    0080f384 651ac955 0080f39c 090a2fe8 65321778 python35!unicode_fromformat_arg+0x409
    0080f3d8 651f1a1a 65321778 0080f404 090a2fe8 python35!PyUnicode_FromFormatV+0x65
    0080f3f4 652070a9 6536bd38 65321778 090a2fe8 python35!PyErr_Format+0x1a
    0080f42c 6516be70 090a2fe8 0080f484 00000000 python35!PyOS_string_to_double+0xa9
    0080f4f4 6514808b 06116b00 6536d658 6536d658 python35!PyFloat_FromString+0x100
    0080f554 6516e6e2 06116b00 06116b00 06116b00 python35!PyNumber_Float+0xcb
    ...
直接看代码，首先是`floatobject.c`中的`PyFloat_FromString`
    PyObject *
    PyFloat_FromString(PyObject *v)
    {
        const char *s, *last, *end;
        double x;
        PyObject *s_buffer = NULL;
        Py_ssize_t len;
        Py_buffer view = {NULL, NULL};
        PyObject *result = NULL;
        if (PyUnicode_Check(v)) {
            s_buffer = _PyUnicode_TransformDecimalAndSpaceToASCII(v);
            if (s_buffer == NULL)
                return NULL;
            s = PyUnicode_AsUTF8AndSize(s_buffer, &len);
            if (s == NULL) {
                Py_DECREF(s_buffer);
                return NULL;
            }
        }
        else if (PyObject_GetBuffer(v, &view, PyBUF_SIMPLE) == 0) {
            s = (const char *)view.buf;    tp_name);
            return NULL;
        }
        last = s + len;
        /* strip space */
        while (s = 1.0 && overflow_exception)
        PyErr_Format(overflow_exception,
                        "value too large to convert to float: "
                        "%.200s", s);
    else
        result = x;
跟进`PyErr_Format`函数
    PyObject *
    PyErr_Format(PyObject *exception, const char *format, ...)
    {
        va_list vargs;
        PyObject* string;
    #ifdef HAVE_STDARG_PROTOTYPES
        va_start(vargs, format);
    #else
        va_start(vargs);
    #endif
    #ifdef Py_DEBUG
        /* in debug mode, PyEval_EvalFrameEx() fails with an assertion error
           if an exception is set when it is called */
        PyErr_Clear();
    #endif
        string = PyUnicode_FromFormatV(format, vargs);
        PyErr_SetObject(exception, string);
        Py_XDECREF(string);
        va_end(vargs);
        return NULL;
    }
继续跟进`PyUnicode_FromFormatV`
    yObject *
    PyUnicode_FromFormatV(const char *format, va_list vargs)
    {
        va_list vargs2;
        const char *f;
        _PyUnicodeWriter writer;
        _PyUnicodeWriter_Init(&writer);
        writer.min_length = strlen(format) + 100;
        writer.overallocate = 1;
        /* va_list may be an array (of 1 item) on some platforms (ex: AMD64).
           Copy it to be able to pass a reference to a subfunction. */
        Py_VA_COPY(vargs2, vargs);
        for (f = format; *f; ) {
            if (*f == '%') {
                f = unicode_fromformat_arg(&writer, f, &vargs2);
                if (f == NULL)
                    goto fail;
            }
        ...
根据调用栈跟进`unicode_fromformat_arg`  
由于`format`是由`%s`构成，所以我们只看`s`部分
    unicode_fromformat_arg
    ...
    case 's':
        {
            /* UTF-8 */
            const char *s = va_arg(*vargs, const char*);
            if (unicode_fromformat_write_cstr(writer, s, width, precision) < 0)
                return NULL;
            break;
        }
    ...
利用`va_arg`直接读取了参数，并将指针`s`指向该地址，继续跟进`unicode_fromformat_write_cstr`
    static int
    unicode_fromformat_write_cstr(_PyUnicodeWriter *writer, const char *str,
                                  Py_ssize_t width, Py_ssize_t precision)
    {
        /* UTF-8 */
        Py_ssize_t length;
        PyObject *unicode;
        int res;
        length = strlen(str); 
        if (precision != -1)
            length = Py_MIN(length, precision);
        unicode = PyUnicode_DecodeUTF8Stateful(str, length, "replace", NULL);
        if (unicode == NULL)
            return -1;
        res = unicode_fromformat_write_str(writer, unicode, width, -1);
        Py_DECREF(unicode);
        return res;
    }
直接利用`strlen`计算上面的参数长度，如果`str`不是一个以``结尾的字符串，那么接下来利用长度访问该地址的数据将会出现越界读写的问题
该漏洞主要原因来源于`floatobject.c`中的代码，`%s`的数据由强制转换而来
    else if (PyObject_GetBuffer(v, &view, PyBUF_SIMPLE) == 0) {
            s = (const char *)view.buf;    <<<<< 强制转换
            len = view.len;
        }
提醒我们，在做强制转换时，要注意检查是否可以转换，转换后会不会造成漏洞
## fuzzer编写
上文我们已经分析完`cpython`的三个漏洞了，对`cpython`有了一定的了解，那么我们就开始编写`cpython`的`fuzzer`代码。  
在编写前，我们来看看`cpython`自己有没有`fuzz`测试模块，简单搜索一下，发现在`Modules/_xxtestfuzz/`目录下存在`fuzz`代码，这就好办了，我们直接在此基础上添加我们想要测试的模块的fuzz代码就行
首先阅读一下`fuzz.c`大概的代码逻辑就会发现，如果想要添加模块的`fuzz`代码，还是很简单的  
主要需要修改的就两个部分，拿`struck.unpack`来举例子
第一步，初始化
    PyObject* struct_unpack_method = NULL;
    PyObject* struct_error = NULL;
    /* Called by LLVMFuzzerTestOneInput for initialization */
    static int init_struct_unpack() {
        /* Import struct.unpack */
        PyObject* struct_module = PyImport_ImportModule("struct"); // 导出模块