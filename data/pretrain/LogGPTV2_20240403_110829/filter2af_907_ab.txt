        return k + j + l;
    }
    function _yEMYyf(j, k, l){
        return j + l;
    }
    function _hDp7fx(j, k, l){
        return _yEMYyf(l, +![], j) + k;
    }
    function _zaApRm(j, k, l){
        return _hDp7fx(k, l, j);
    }
    function _Qht8Gs(j, k, l){
        return j['log'](l);
    }
    var _pDcMr4 = {
        ktJbRx: console,
        DrS5f6: 5,
        Y2dAP6: [+!+[]]+[+[]] - [!+[]+!+[]+!+[]],
        tZF58n: function(){
            return _Qht8Gs(
                this.ktJbRx,
                this.Y2dAP6,
                _zaApRm(!+[]+!+[]+!+[], this.DrS5f6, this.Y2dAP6)
            );
        }
    };
    _pDcMr4[_B2PfcZ(_yEMYyf('F' ,'M', '5'), _yEMYyf('t' ,'L', 'Z'), _yEMYyf('8' ,'q', 'n'))]();
### 2.7 控制流平坦化
借助`switch`语句，将顺序执行的代码转变成看似乱序的switch语句
    // 变化前
    function aaa(){
        var a, b, c;
        a = 1
        b = a + 2;
        c = b + 3;
        return c + 4;
    }
    // 变化后
    function aaa(){
        var a, b, c, d = 0, arr = '2|3|1|4'.split('|');
        while(!![]){
            switch(arr[d++]){
                case '1':
                    c = b + 3;
                    continue;
                case '2':
                    a = 1;
                    continue;
                case '3':
                    b = a + 2;
                    continue;
                case '4':
                    return c + 4;
                    continue;
            }
            break;
        }
    }
### 2.8 逗号表达式
逗号表达式会先计算左边的参数，再计算右边的参数值，最后返回最右边参数的值，可以在左边参数中加入无效语句达到混淆目的
    // 变化前
    function aaa(){
        var a, b, c;
        a = 1
        b = a + 2;
        c = b + 3;
        return c + 4;
    }
    // 变化后
    function aaa(){
        var a, b, c, d, e;
        return (c = (e = 3, (b = (d = 2, a = 1, a)),b + 2), c + 3) + 4;
    }
## 三、自动化混淆方案
人工混淆成本过高，实际应用中常先将代码转化为ast语法树，再在不影响输出结果的情况下改变树结构实现混淆
### 3.1 ast语法树
ast是一种树状形式表现代码语法结构的抽象结构，它产生于编译过程中语法分析阶段，由词法分析阶段的Token单元组合而来，然后再经过语义分析阶段、中间代码生成阶段转化成目标机器可识别的机器码
常见语法树节点（[@babel/parser](https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md)）：
    Identifier  ==>  标识符
    Programs  ==>  根节点
    Functions  ==>  函数节点
    Literals  ==>  字面量
        ├── RegExpLiteral  ==>  正则型字面量，如：str.replace(/a/g, 1);
        ├── StringLiteral  ==>  字符型字面量，如：var a = 'abc';
        ├── BooleanLiteral  ==>  布尔型字面量，如：Boolean(false);
        └── NumericLiteral  ==>  数字型字面量，如：var a = 1;
    Statements  ==>  语句节点
        ├── ExpressionStatement  ==>  表达式语句，如：console.log(1);
        ├── BlockStatement  ==>  块语句，如：if (true){};
        ├── EmptyStatement  ==>  空语句，如：if (true){};
        ├── BreakStatement  ==>  中断语句，如：break;
        └── ForStatement  ==>  for循环语句，如：for(;;){};
    Declarations  ==>  声明语句节点
        ├── FunctionDeclaration  ==>  函数声明，如：function aaa(){};
        └── VariableDeclaration  ==>  变量声明，如：let a = 1;
    Expressions  ==>  表达式节点
        ├── FunctionExpression  ==>  函数表达式，如：(function(){console.log(1);})();
        ├── BinaryExpression  ==>  二项式表达式，如：1 == 2;
        ├── AssignmentExpression  ==>  赋值表达式，如：a = window;
        ├── ConditionalExpression  ==>  三元运算表达式，如：1 > 2 ? 1 : 2;
        └── CallExpression  ==>  调用表达式，如：alert(1);
例：js多元运算式
    function test(p) {
        var a = 5, b = 12;
        return p > 1 ? p  b : p = 6 : p = 3;
    }
函数内部return返回一串运算式，肉眼较难理清代码逻辑，将其放入在线ast解析工具（[astexplorer](https://astexplorer.net/)）解析
==> `var a = 5, b = 12;`
==> `return p > 1 ? p  b : p = 6 : p = 3;`
可以看到，`return`的`argument`是一个三元表达式，当①为真时执行②、为假时执行③，而②也是一个三元表达式，当④为真时执行⑤、为假时执行⑥，③是一个赋值赋值表达式，将数字型字面量`3`赋值给标识符`p`
  * ①：`p > 1`
  * ②：`p  b : p = 6`
  * ③：`p = 3`
  * ④：`p  b`
  * ⑥：`p = 6`
### 3.2 ast混淆原理
与编译器原理相似，但混淆器在生成语法树后不生成中间代码而是按提前制定的转变规则修改语法树结构，然后再生成与原始代码相同的字符流代码
例：使用ast修改数字型字面量
    // 混淆前
    for (a=3, b=0; a>b; b++){
        console.log(b);
    }
    // babel混淆
    traverse(ast, {
        NumericLiteral(path){
            let value = path.node.value;  // 获取原始节点值
            let key = parseInt(Math.random() * 999999, 10);  // 生成随机数
            let cipherNum = value ^ key;  // 原始值与随机数进行位异或操作，得到cipherNum
            path.replaceWith(t.binaryExpression('^', t.numericLiteral(cipherNum), t.numericLiteral(key)));  // 利用异或自反性值，将原始节点数值改变为异或表达式
            path.skip();  // 跳过当前节点防止死循环，新生成的ast树也存在数字 
        }
    });
    // 混淆后
    for (a = 558389 ^ 558390, b = 299059 ^ 299059; a > b; b++) {
        console.log(b);
    }
### 3.3 babel工具
babel是众多js编译工具中的一款，以插件结构api形式提供服务，作为自动化混淆工具时工作流程如下：
  * 解析js代码生成ast树：`@babel/parser`
  * 遍历ast并改变树结构：`@babel/traverse`、`@babel/types`
  * 根据新ast生成新js代码：`@babel/generator`
#### 01 解析
[@babel/parser](https://babeljs.io/docs/en/babel-parser)提供`parse()`接口用于解析源码生成抽象语法树
    const parser = require("@babel/parser");
    let ast = parser.parse('var a = 1 + 1;');
    console.log(ast);
    ==>
    Node {
      type: 'File',
      start: 0,
      end: 14,
      loc: SourceLocation {
        start: Position { line: 1, column: 0 },
        end: Position { line: 1, column: 14 },
        filename: undefined,
        identifierName: undefined
      },
      errors: [],
      program: Node {
        type: 'Program',
        start: 0,
        end: 14,
        loc: SourceLocation {
          start: [Position],
          end: [Position],
          filename: undefined,
          identifierName: undefined
        },
        sourceType: 'script',
        interpreter: null,
        body: [ [Node] ],
        directives: []
      },
      comments: []
    }
访问子节点
    const parser = require("@babel/parser");
    let ast = parser.parse('var a = 1 + 1;');
    console.log(ast.program.body[0].declarations[0].id);
    ==>
    Node {
      type: 'Identifier',
      start: 4,
      end: 5,
      loc: SourceLocation {
        start: Position { line: 1, column: 4 },
        end: Position { line: 1, column: 5 },
        filename: undefined,
        identifierName: 'a'
      },
      name: 'a'
    }
#### 02 转换
转换ast用到[@babel/types](https://babeljs.io/docs/en/babel-types)、[@babel/traverse](https://babeljs.io/docs/en/babel-traverse)两个模块，前者定位节点制定变化规则，后者遍历节点将规则应用到语法树中
  * @babel/types
该模块提供的api名称与@babel/parser生成的ast节点`type`相同，如：
接口 | 说明 | 示例  
---|---|---  
stringLiteral | 字符型字面量 | t.stringLiteral("expressionStatement test")  
expressionStatement | 表达式语句节点 |
t.expressionStatement(t.stringLiteral("expressionStatement test"))  
functionDeclaration | 函数声明 | t.functionDeclaration(
t.identifier(''),[],t.blockStatement([t.emptyStatement()]))  
binaryExpression | 二项表达式 | t.binaryExpression('^', t.numericLiteral(1),
t.numericLiteral(2))  
  * @babel/traverse
将@babel/types写好的规则即`visitor`对象放入`traverse()`中遍历，遍历方式为深度优先
    var ast = parser.parse('var a = "1";');
    const visitor = {
        enter(path){
            console.log('enter: ' + path.type);
        },
        exit(path){
            console.log('exit: ' + path.type);
        }
    }
    traverse(ast, visitor);
    ==>
    enter: Program
    enter: VariableDeclaration
    enter: VariableDeclarator
    enter: Identifier
    exit: Identifier
    enter: StringLiteral
    exit: StringLiteral
    exit: VariableDeclarator
    exit: VariableDeclaration
    exit: Program
其中定位树节点用到了`path`对象，常见属性和方法有：
#### 03 生成
@babel/traverse生成新ast后，再经过@babel/generator便可以生成新的js代码
    var ast = parser.parse('var a = 1;');
    const visitor = {
        NumericLiteral(path){
            xxx
        }
    }
    traverse(ast, visitor);
    let code = generator(ast).code;
    console.log(code);
## 四、ast混淆器
### 4.1 改变对象访问方式
两种对象访问方式都在`MemberExpression`中，受到`computed`参数值控制，为`false`时表示以
`.`形式访问对象、为`true`时表示以`[]`形式访问对象
给`computed`赋值为 `true`并改变`property`值的类型为`StringLiteral`
    const visitor = {
        MemberExpression(path){
            if (path.node.computed == false){  // computed为false时执行
                //const name = path.get('property').toString();  // toString方法获取原始值
                const name = path.node.property.name;  // node节点获取原始值
                path.node.property = t.stringLiteral(name);  // 将原始值赋值给property
                path.node.computed = true;  // 改变computed为true
            }
        }