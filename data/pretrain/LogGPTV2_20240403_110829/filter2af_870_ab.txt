    .rdata:00000001800E3690  dq offset aReportsTheNu_0 ; "Reports the number of, and process ids "...
    // “Reports the number of, and process ids of all applications currently capturing audio.
    //  Returns a WNF_CAPTURE_STREAM_EVENT_HEADER data structure”
应该注意，包含在Windows性能分析器中的perf_nt_c.dll库中同样的表也可以用。
##### 订阅事件
要认证一个新事件，我们只需在驱动程序中调用ExSubscribeWnfStateChange，该驱动程序可以从上面找到的WNF状态名称。这个函数是导出的，但没有在任何标头中定义，因此我们必须通过从上面的定义来手动声明它。注意,ntoskrnl.lib包含导入库存根，所以不需要手动检索它的地址(感谢Alex提供的protip;))。
这里唯一需要做的是调用具有正确参数的函数。
    NTSTATUS
    CallExSubscribeWnfStateChange (
        VOID
        )
    {
        PWNF_SUBSCRIPTION wnfSubscription= NULL;
        WNF_STATE_NATE stateName;
        NTSTATUS status;
        stateName.Data = 0x2821B2CA3BC4075; // WNF_AUDC_CAPTURE
        status = ExSubscribeWnfStateChange(&wnfSubscription, &stateName, 0x1, NULL, &notifCallback, NULL);
        if (NT_SUCCESS(status)) DbgPrint("Subscription address: %p\n", Subscription_addr);
        return status;
    }
##### 定义回调
正如我们前面看到的，ExSubscribeWnfStateChange在其参数中包含一个回调，每次触发事件时都调用该回调。此回调将用于获取和处理与通知相关的事件数据。
    NTSTATUS
    notifCallback (
        _In_ PWNF_SUBSCRIPTION Subscription,
        _In_ PWNF_STATE_NAME StateName,
        _In_ ULONG SubscribedEventSet,
        _In_ WNF_CHANGE_STAMP ChangeStamp,
        _In_opt_ PWNF_TYPE_ID TypeId,
        _In_opt_ PVOID CallbackContext
        );
要获得回调中的数据，我们必须调用ExQueryWnfStateDataName。同样，这个函数是导出的，但没有在任何标头中定义，所以我们必须自己定义它。
    NTSTATUS
    ExQueryWnfStateData (
        _In_ PWNF_SUBSCRIPTION Subscription,
        _Out_ PWNF_CHANGE_STAMP CurrentChangeStamp,
        _Out_writes_bytes_to_opt_(*OutputBufferSize, *OutputBufferSize) PVOID OutputBuffer,
        _Inout_ PULONG OutputBufferSize
        );
    [...]
我们需要调用这个API两次:一次是为了获得为数据分配缓冲区所需的大小，另一次是为了实际检索数据
    NTSTATUS
    notifCallback(...)
    {
        NTSTATUS status = STATUS_SUCCESS;
        ULONG bufferSize = 0x0;
        PVOID pStateData;
        WNF_CHANGE_STAMP changeStamp = 0;
        status = ExQueryWnfStateDataFunc(Subscription, &changeStamp, NULL, &bufferSize);
        if (status != STATUS_BUFFER_TOO_SMALL) goto Exit;
        pStateData = ExAllocatePoolWithTag(PagedPool, bufferSize, 'LULZ');
        if (pStateData == NULL) {
            status = STATUS_UNSUCCESSFUL;
            goto Exit;
        }
        status = ExQueryWnfStateDataFunc(Subscription, &changeStamp, pStateData, &bufferSize);
        if (NT_SUCCESS(status)) DbgPrint("## Data processed: %S\n", pStateData);
        [...] // do stuff with the data
    Exit:
        if (pStateData != nullptr) ExFreePoolWithTag(pStateData, 'LULZ');
        return status;
    }
##### 卸载驱动程序时的清理
如果你盲目地尝试上面的代码，你会得到一个丑陋的蓝屏，因为我痛苦地知道，我第一次尝试这个练习和卸载我的驱动!我们需要提前删除这个订阅。
为此，我们可以在驱动卸载例程中调用ExUnsubscribeWnfStateChange(并确保PWNF_SUBSCRIPTION
wnfSubscription被构造为全局变量)
    PVOID
    ExUnsubscribeWnfStateChange (
        _In_ PWNF_SUBSCRIPTION Subscription
        );
    VOID
    DriverUnload (
        _In_ PDRIVER_OBJECT DriverObject
        )
    {
       [...]
       ExUnsubscribeWnfStateChange(g_WnfSubscription);
    }
##### 惊人的失败
我们现在要做的就是启动驱动程序，启用Cortana，使用它然后等待一会儿，等待事件触发。
然而!并没有什么!
我的实验结果完全失败了，因为我忘记了我的虚拟机上没有声卡(可能是我无法启动任何与声音相关的应用程序的原因吧)。最重要的是，由于我的主机配置，我根本无法让它工作(不要问)。
但是，为了确保我的驱动程序正确工作，我不得不选择另一个事件，并开始使用WNF_SHEL_DESKTOP_APPLICATION_STARTED。此通知在桌面应用程序启动时发出。作为回应，它只输出启动的应用程序名称。有了这个WNF状态名，就很容易得到一些结果。
##### 与WNF保持同步
我在前面展示了一种查找WNF名称的简单方法，方法是在包含该表的一个dll中搜索IDA中的名称。更可靠和可扩展的方法是通过解析DLL来查找表并转储它来检索WNF状态名。虽然这并不是我使用的练习方法,Alex需要一个与时俱进的WNF状态名的变化(添加/删除/修改)，因为他痴迷于分散内核的每一个构造，我想出了一个脚本来帮助他完成这个心愿。
我忘记在BlackHat杂志提到过，我现在想做一些广告。:^这个脚本可以用来区分两个dll，并快速获得表中的差异，以及从单个DLL中转储表数据。这个输出是Alex和我在我们的wnftool应用程序中使用的，可以很容易地用于其他C和Python程序中。
    $ python .\StateNamediffer.py -h
    usage: StateNamediffer.py [-h] [-dump | -diff] [-v] [-o OUTPUT] [-py]
    file1 [file2]
    Stupid little script to dump or diff wnf name table from dll
    positional arguments:
        file1
        file2 Only used when diffing
    optional arguments:
        -h, --help show this help message and exit
        -dump Dump the table into a file
        -diff Diff two tables and dump the difference into a file
        -v, --verbose Print the description of the keys
        -o OUTPUT, --output OUTPUT Output file (Default: output.txt)
        -py, --python Change the output language to python (by default it's c)
输出示例(一旦11月的限制解除，我将发布脚本)
    typedef struct _WNF_NAME
    {
        PCHAR Name;
        ULONG64 Value;
    } WNF_NAME, *PWNF_NAME;
    WNF_NAME g_WellKnownWnfNames[] =
    {
        {"WNF_A2A_APPURIHANDLER_INSTALLED", 0x41877c2ca3bc0875}, // An app implementing windows.AppUriHandler contract has been installed
        {"WNF_AAD_DEVICE_REGISTRATION_STATUS_CHANGE", 0x41820f2ca3bc0875}, // This event is signalled when device changes status of registration in Azure Active Directory.
        {"WNF_AA_CURATED_TILE_COLLECTION_STATUS", 0x41c60f2ca3bc1075}, // Curate tile collection for all allowed apps for current AssignedAccess account has been created
        {"WNF_AA_LOCKDOWN_CHANGED", 0x41c60f2ca3bc0875}, // Mobile lockdown configuration has been changed
        [...]
    }
##### 结论和感谢
多亏了这个练习，我有机会深入研究一个我根本不知道的内核组件，这个组件玩起来很有趣。我学到了很多东西，我真的很喜欢尝试弄明白如何使用WNF。我非常高兴在Recon度过了美妙的一周。
本文翻译自： 