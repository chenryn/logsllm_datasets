# 智能合约安全开发

## 作者
- **Ali0th**
- **Email**: [PI:EMAIL]
- **Blog**: [blog.riskivy.com](https://blog.riskivy.com)
- **GitHub**: [Martin2877](https://github.com/Martin2877)

## 目录
1. 相关概念
2. 安全事件
3. 审计之路
4. 常见漏洞
5. 常用工具

## 1. 相关概念

### 智能合约 (Smart Contract)
智能合约是一种以计算机程序方式来缔结和执行各种合约的技术。最早在上世纪90年代，Nick Szabo等人提出了类似的概念，但由于缺乏可靠的执行环境而未能实现。区块链技术的出现弥补了这一缺陷，使得智能合约得以实际应用。

以太坊支持通过图灵完备的高级语言（如Solidity、Serpent、Viper）来开发智能合约。这些智能合约运行在以太坊虚拟机（EVM）中，可以接受外部交易请求和事件，触发预先编写的代码逻辑，生成新的交易和事件，并调用其他智能合约。

## 2. 安全事件

以下是一些重要的智能合约安全事件：

- **The DAO 漏洞**
- **以太坊短地址漏洞**
- **钱包合约奇偶校验破解**
- **Parity多重签名钱包提款漏洞**
- **HTTP RPC API 漏洞**
- **Parity多重签名钱包合约漏洞**
- **Solidity编程语言漏洞**
- **智能合约Fallback函数漏洞**
- **递归调用漏洞 (Recursive Call)**
- **调用深度限制 (Call Depth)**
- **太阳风暴攻击**
- **以太坊浏览器 Mist 漏洞**
- **区块节点漏洞**
- **日食攻击 (Eclipse Attack)**
- **Geth客户端DoS攻击漏洞**
- **浪子合约漏洞**
- **自杀合约漏洞**
- **贪婪合约漏洞**
- **遗嘱合约漏洞**
- **交易顺序依赖性**
- **时间戳依赖性**
- **挖矿中心化问题**
- **BEC/SMT 智能合约无限转币漏洞**

## 3. 审计之路

### 如何从零开始审计新的代码语言？

#### 常规路径
1. **开发过程**：了解智能合约的基本开发流程。
2. **基本语法**：掌握所选语言的基本语法。
3. **深入语法**：学习更复杂的语法和特性。
4. **漏洞类型**：了解常见的智能合约漏洞。
5. **工具利用**：熟悉常用的审计工具。
6. **开始审计**：进行实际的代码审计。

#### 弯道超车
1. **语法**：快速掌握基本语法。
2. **漏洞类型**：重点学习常见漏洞。
3. **直接审计**：通过阅读代码和文档直接进行审计。

### 工具推荐
- **Remix-ide**：用于编写、测试和部署智能合约。
- **Pet-shop**：一个简单的DApp示例项目。
- **DASP**：分布式应用程序安全性项目。
- **Ethereum Smart Contract Best Practices**：最佳实践指南。
- **Solidity**：以太坊的主要编程语言。

## 4. 常见漏洞

### 计算问题
- **整数上溢 (Integer Overflow)**
- **整数下溢 (Integer Underflow)**

### 条件竞争
- **条件竞争 (Race Condition)**
- **可重入性 (Re-Entrancy)**
- **跨函数条件竞争 (Cross-function Race Conditions)**

### 粗心
- **构造函数缺失 (Missing Constructor)**
- **错误接口 (Wrong Interface)**
- **代码逻辑问题 (Code Logic Issues)**

### 外部调用
- **未经核查的外部调用 (Unchecked External Call)**
- **未受保护函数 (Unprotected Function)**
- **使用tx.origin做认证 (Use tx.origin for authorization)**

### 时间操纵
- **时间操纵 (Time manipulation)**
- **时间戳依赖 (Timestamp Dependence)**

### 访问控制
- **访问控制 (Access Control)**
- **使用delegatecall (delegatecall usage)**
- **随机数问题 (Bad Randomness)**
  - 使用区块变量 (Using block variables)
  - 区块哈希值 (Blockhash)
  - 私有种子 (Private Seed)

### 抢先交易
- **抢先交易 (Front-running)**

### 强制转账
- **强制向合约转账 (Forcibly Sending Ether to a Contract)**

### 拒绝服务
- **拒绝服务 (Denial of Service)**
  - 恢复交易拒绝服务 (DoS with (Unexpected) revert)
  - Gas耗尽拒绝服务 (DoS with Block Gas Limit)
  - 意外报错 (unexpected throw)
  - 意外自杀 (unexpected kill)
  - 突破访问控制 (access control breached)
  - 时间检查与使用 (time-of-check vs time-of-use (TOCTOU))
  - 交易顺序依赖 (transaction ordering dependence (TOD))
  - 短地址漏洞 (Short Address Attack)

### Fallback 函数
- **无参数，不返回值**
- **无匹配函数或data无内容时被调用**
- **合约接受Ether时被调用（需要payable标记）**
- **2300 gas 限额**
- **可以接收msg.data内容**

```solidity
function() payable {}
```

### 可重入性 (Re-Entrancy)
- **定义**：允许攻击者在合约执行过程中多次调用同一函数。
- **示例**：King of the Ether 合约攻击。

### Gas
- **每笔交易都会收取一定数量的gas**
- **执行结束后剩余gas将返还给发送者**

### Gas耗尽拒绝服务
- **示例**：调用者（上一个赢家）可以设置下一个赢家，如果他故意设置这个赢家编号值很大的话，那么将可能导致循环中gas不足，使得该函数无法再被成功调用。

### 区块特性
- **区块信息对所有人可见**
- **交易会被排序并打包成区块，被所有参与的节点执行和分发**

### 谨慎使用 `send()`, `transfer()`, `call.value()`()
- **当发生异常时**：
  - `transfer` 返回 throws，`send()` 和 `call()` 返回 false。
  - `transfer` 会恢复交易前的状态，而后两者不会。
  - 如果没有核查其执行结果，合约会继续执行接下来的代码。
- **Gas 预付**：
  - `send()` 和 `transfer()` 固定预付2,300 gas，而 `call()` 可以自定义。

### 攻击方式
- **Gas 耗尽报错**
- **Fallback 函数故意报错**
- **处理一个没有 fallback 函数的合约，或 fallback 不带 payable 的合约**

### 未经核查的外部调用
- **示例**：King of the Ether 合约里，攻击者让其合约地址成为 King，并且这个合约是其他人无法对其转账成功的，那么这个攻击者的合约就永远都是 King 了。
- **解决方法**：验证对方是否为账户地址而非合约地址。

### 拒绝服务 (unexpected throw)
- **示例**：not-so-smart-contracts
- **CTF**：Ethernaut

## 5. 常用工具

### 符号执行
- **Manticore**：基于符号执行的二进制及智能合约分析工具
  - CLI模式分析sol代码
  - API模式分析sol代码
- **Oyente**
- **Mythril**

### 静态分析
- **securify.ch**

### 模糊测试
- **Echidna**

### 反汇编
- **Binary Ninja + ethersplay**
- **IDA + ida-evm**

---

希望这份优化后的文本能够帮助你更好地理解和掌握智能合约的安全开发。如果有任何进一步的问题或需要更多帮助，请随时联系我。