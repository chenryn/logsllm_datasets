智能合约安全开发
Ali0th
Email ：PI:EMAIL
智能合约安全开发
1. 相关概念
2. 安全事件
3. 审计之路
4. 常见漏洞
5. 常用工具
智能合约
智能合约（Smart Contract）是以太坊中最为重要的一个概念，即以计
算机程序的方式来缔结和运行各种合约。最早在上世纪 90 年代，Nick 
Szabo 等人就提出过类似的概念，但一直依赖因为缺乏可靠执行智能合约的
环境，而被作为一种理论设计。区块链技术的出现，恰好补充了这一缺陷。
以太坊支持通过图灵完备的高级语言（包括 Solidity、Serpent、Viper）
等来开发智能合约。智能合约作为运行在以太坊虚拟机（Ethereum Virual
Machine，EVM）中的应用，可以接受来自外部的交易请求和事件，通过触
发运行提前编写好的代码逻辑，进一步生成新的交易和事件，可以进一步调
用其它智能合约。
智能合约
智能合约
智能合约
Smart Contract
智能合约
DApp
安全事件
The DAO 漏洞
以太坊短地址漏洞
wallet contract奇偶校验破解
Parity多重签名钱包提款漏洞
HTTP RPC API 漏洞
Parity多重签名钱包合约漏洞
以太坊编程语言Solidity漏洞
智能合约Fallback函数
智能合约递归调用（recursive）
调用深度限制（call depth）
太阳风暴
以太坊浏览器 Mist
区块节点漏洞
日食攻击（eclipse attack）
Geth客户端DoS攻击漏洞
浪子合约漏洞
自杀合约漏洞
贪婪合约漏洞
遗嘱合约漏洞
交易顺序依赖性
时间戳依赖性
挖矿中心化
BEC/SMT 智能合约无限转币漏洞
审计之路
如何从零上手新的代码语言进行审计？
审计之路
如何从零上手新的代码语言进行审计？
常规：开发过程->基本语法->深入语法->漏洞类型->工具利用->开始审计
弯道超车：语法->漏洞类型->文本直接审计
审计之路
如何从零上手新的代码语言进行审计？
常规：开发过程->基本语法->深入语法->漏洞类型->工具利用->开始审计
Remix-ide
Pet-shop
DASP
Ethereum Smart Contract Best Practices
Solidity
常见漏洞
- Arithmetic Issues 计算问题
- Integer Overflow 整形上溢
- integer underflow 整形下溢
- Race Condition 条件竞争
- Re-Entrancy 可重入性 (同函数条件竞争)
- Cross-function Race Conditions 跨函数条件竞争
- Carelessness 粗心
- Missing Constructor 构造函数缺失
- Wrong Interface 错误接口
- Code Logic Issues 代码逻辑问题
- Unchecked External-Call 未经核查的外部调用
- Unprotected Function 未受保护函数
- Use tx.origin for authorization 使用tx.origin做认证
- Time manipulation 时间操纵
- Timestamp Dependence 时间戳依赖
- Access Control 访问控制
- delegatecall 使用delegatecall
- Bad Randomness 随机数问题
- Using block variables 使用区块变量
- Blockhash 使用区块哈希值
- Private Seed 使用私有种子
- front-running 抢先交易
- Forcibly Sending Ether to a Contract 强制向合约转账
- Denial of Service 拒绝服务
- DoS with (Unexpected) revert 恢复交易拒绝服务
- DoS with Block Gas Limit  Gas耗尽拒绝服务
- unexpected throw 意外报错
- unexpected kill 意外自杀
- access control breached 突破访问控制
- Front Running 抢先交易
- time-of-check vs time-of-use (TOCTOU)
- race condition
- transaction ordering dependence (TOD)
- Short Address Attack 短地址漏洞
常见漏洞
Fallback
1 无参数，不返回值。
2 无匹配函数或data无内容时被调用
3 合约接受Ether时被调用（需要payable标记）
4 2300 gas 限额
5 可以接收msg.data内容
function() payable {}
常见漏洞
Re-Entrancy
(可重入性)
常见漏洞
Re-Entrancy
(可重入性)
常见漏洞
Gas
1 每笔交易都会收取一定数量的gas
2 执行结束后剩余gas将返还给发送者
常见漏洞
Gas耗尽拒绝服务
示例：调用者（上一个赢家）可以设置下一个赢家，如果他故意
设置这个赢家编号值很大的话，那么将可能导致循环中 gas 不足，
那么这个函数就不能再被调用成功了。
常见漏洞
区块特性
1 区块信息对所有人可见
2 交易会被排序并打包成区块，被所有参与的节点执行和分发
常见漏洞
Bad Randomness 随机数问题
1 Using block variables 使用区块变量
2 Blockhash 使用区块哈希值
常见漏洞
Bad Randomness 随机数问题
1 Using block variables 使用区块变量
2 Blockhash 使用区块哈希值
常见漏洞
谨慎使用 send(), transfer(), call.value()()
1当发生异常的时候, transfer 返回 throws，send()和call()返回false，，
transfer会恢复交易前的状态，而后两者不会，如果没有核查其执行结
果时，合约会继续执行接下来的代码。
2 send()和transfer() 固定预付2,300 gas，而call()可以自定义。
常见漏洞
攻击方式：
1 gas 耗尽报错
2 fallback函数故意报错
3 处理一个没有fallback函数的合约，
或 fallback不带payable的合约。
Unchecked External Call 未经核查的外部调用
常见漏洞
攻击方式：
示例：King of the Ether 合约里，攻击者让先其合约地址成为
King ，并且这个合约是其它人无法对其转账的成功的，那么这个攻
击者的合约就永远都是 King 了。
解决方法：
验证对方是否为账户地址而非合约地址。
Denial of Service 拒绝服务：unexpected throw 意外报错
漏洞修炼
漏洞复现：
not-so-smart-contracts
CTF：
Ethernaut
常用工具
Symbolic Execution :
Manticore
Oyente
Mythril
Static analysis :
securify.ch
Fuzzing :
Echidna
disassembler :
Binary Ninja + ethersplay
IDA + ida-evm
常用工具
Symbolic Execution : Manticore
基于符号执行的二进制及智能合约分析工具
使用CLI模式分析sol代码
使用API模式分析sol代码
常用工具
Symbolic Execution : Manticore
Contact Me
blog.riskivy.com
斗象科技能力中心(TCC)   Ali0th
Email ：PI:EMAIL
Github : https://github.com/Martin2877