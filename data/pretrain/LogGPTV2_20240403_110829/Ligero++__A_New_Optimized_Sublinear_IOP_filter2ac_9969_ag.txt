[32] Irene Giacomelli, Jesper Madsen, and Claudio Orlandi. 2016. ZKBoo: Faster
[33] Shafi Goldwasser, Yael Tauman Kalai, and Guy Rothblum. 2008. Delegating
Zero-Knowledge for Boolean Circuits. In USENIX. 1069–1083.
computation: interactive proofs for muggles. In STOC 2008. 113–122.
[34] Shafi Goldwasser, Yael Tauman Kalai, and Guy N. Rothblum. 2015. Delegating
Computation: Interactive Proofs for Muggles. J. ACM 62, 4 (2015), 27:1–27:64.
[35] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. 1985. The Knowledge
Complexity of Interactive Proof-Systems (Extended Abstract). In STOC. 291–304.
[36] Shafi Goldwasser, Silvio Micali, and Charles Rackoff. 1989. The Knowledge
Complexity of Interactive Proof Systems. SIAM J. Comput. 18, 1 (1989), 186–208.
[37] Jens Groth. 2009. Linear Algebra with Sub-linear Zero-Knowledge Arguments.
In CRYPTO. 192–208.
ments. In ASIACRYPT. 321–340.
without Short PCPs. In CCC. 278–291.
knowledge from secure multiparty computation. In STOC. 21–30.
[39] Yuval Ishai, Eyal Kushilevitz, and Rafail Ostrovsky. 2007. Efficient Arguments
[40] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. 2007. Zero-
[38] Jens Groth. 2010. Short Pairing-Based Non-interactive Zero-Knowledge Argu-
[41] Yael Tauman Kalai and Ran Raz. 2008. Interactive PCP. In ICALP. 536–547.
[42] Jonathan Katz, Vladimir Kolesnikov, and Xiao Wang. 2018.
[43] Joe Kilian. 1992. A Note on Efficient Zero-Knowledge Proofs and Arguments
Improved Non-
Interactive Zero Knowledge with Applications to Post-Quantum Signatures. In
CCS. 525–537.
(Extended Abstract). In STOC. 723–732.
Interactive Zero-Knowledge Arguments. In TCC. 169–189.
Methods for Interactive Proof Systems. In FOCS. 2–10.
[44] Helger Lipmaa. 2012. Progression-Free Sets and Sublinear Pairing-Based Non-
[45] Carsten Lund, Lance Fortnow, Howard J. Karloff, and Noam Nisan. 1990. Algebraic
[46] Ralph C. Merkle. 1989. A Certified Digital Signature. In CRYPTO. 218–238.
[47] Silvio Micali. 1994. CS Proofs (Extended Abstracts). In FOCS. 436–453.
[48] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. 2013. Pinocchio:
[49] Omer Reingold, Guy N. Rothblum, and Ron D. Rothblum. 2016. Constant-round
Nearly Practical Verifiable Computation. In S&P. 238–252.
interactive proofs for delegating computation. In STOC. 49–62.
[50] Adi Shamir. 1990. IP=PSPACE. In FOCS. 11–15.
[51] Riad S. Wahby, Srinath T. V. Setty, Zuocheng Ren, Andrew J. Blumberg, and
Michael Walfish. 2015. Efficient RAM and control flow in verifiable outsourced
computation. In NDSS.
[52] Riad S Wahby, Ioanna Tzialla, Abhi Shelat, Justin Thaler, and Michael Walfish.
2018. Doubly-efficient zkSNARKs without trusted setup. In 2018 IEEE Symposium
on Security and Privacy (SP). IEEE, 926–943.
[53] Howard Wu, Wenting Zheng, Alessandro Chiesa, Raluca Ada Popa, and Ion
Stoica. 2018. DIZK: A Distributed Zero Knowledge Proof System. In USENIX.
675–692.
[54] Tiacheng Xie, Jiaheng Zhang, Yupeng Zhang, Charalampos Papamanthou, and
Dawn Song. 2019. Libra: Succinct Zero-Knowledge Proofs with Optimal Prover
Computation. In Advances in Cryptology (CRYPTO).
[55] Jiaheng Zhang, Tiancheng Xie, Yupeng Zhang, and Dawn Song. 2020. Transparent
Polynomial Delegation and Its Applications to Zero Knowledge Proof. In S&P
2020.
[56] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and
Charalampos Papamanthou. 2017. vSQL: Verifying Arbitrary SQL Queries over
Dynamic Outsourced Databases. In IEEE Symposium on Security and Privacy.
863–880.
[57] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and Char-
alampos Papamanthou. 2017. A Zero-Knowledge Version of vSQL. Cryptology
ePrint, 2017. (2017).
[4] Martin R. Albrecht, Christian Rechberger, Thomas Schneider, Tyge Tiessen, and
REFERENCES
[1] 2014. libsnark. https://github.com/scipr-lab/libsnark. (2014).
[2] 2019. libiop. https://github.com/scipr-lab/libiop. (2019).
[3] Martin R. Albrecht, Lorenzo Grassi, Christian Rechberger, Arnab Roy, and Tyge
Tiessen. 2016. MiMC: Efficient Encryption and Cryptographic Hashing with
Minimal Multiplicative Complexity. In ASIACRYPT. 191–219.
Michael Zohner. 2015. Ciphers for MPC and FHE. In EUROCRYPT. 430–454.
[5] Scott Ames, Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkitasub-
ramaniam. 2017. Ligero: Lightweight Sublinear Arguments Without a Trusted
Setup. In CCS. 2087–2104.
[6] Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.
1998. Proof Verification and the Hardness of Approximation Problems. J. ACM
45, 3 (1998), 501–555.
[7] Sanjeev Arora and Shmuel Safra. 1998. Probabilistic Checking of Proofs: A New
Characterization of NP. J. ACM 45, 1 (1998), 70–122.
[8] László Babai. 1985. Trading Group Theory for Randomness. In STOC. 421–429.
[9] László Babai, Lance Fortnow, Leonid A. Levin, and Mario Szegedy. 1991. Checking
[12] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. 2018. Fast
[10] Stephanie Bayer and Jens Groth. 2012. Efficient Zero-Knowledge Argument for
Computations in Polylogarithmic Time. In STOC. 21–31.
Correctness of a Shuffle. In EUROCRYPT. 263–280.
[11] Eli Ben-Sasson, Iddo Bentov, Alessandro Chiesa, Ariel Gabizon, Daniel Genkin,
Matan Hamilis, Evgenya Pergament, Michael Riabzev, Mark Silberstein, Eran
Tromer, and Madars Virza. 2017. Computational Integrity with a Public Random
String from Quasi-Linear PCPs. In EUROCRYPT. 551–579.
Reed-Solomon Interactive Oracle Proofs of Proximity. In ICALP. 14:1–14:17.
[13] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. 2018. Scalable,
transparent, and post-quantum secure computational integrity. IACR Cryptology
ePrint Archive 2018 (2018), 46.
[14] Eli Ben-Sasson, Iddo Bentov, Yinon Horesh, and Michael Riabzev. 2019. Scalable
Zero Knowledge with No Trusted Setup. In CRYPTO. 701–732.
[15] Eli Ben-Sasson, Dan Carmon, Yuval Ishai, Swastik Kopparty, and Shubhangi
Saraf. 2020. Proximity Gaps for Reed-Solomon Codes. Cryptology ePrint Archive,
Report 2020/654. (2020). https://eprint.iacr.org/2020/654.
[21] Eli Ben-Sasson, Alessandro Chiesa, and Nicholas Spooner. 2016.
[22] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. 2014. Scalable
[16] Eli Ben-Sasson, Alessandro Chiesa, Ariel Gabizon, Michael Riabzev, and Nicholas
Spooner. 2016. Short Interactive Oracle Proofs with Constant Query Complexity,
via Composition and Sumcheck. IACR Cryptology ePrint Archive 2016 (2016), 324.
[17] Eli Ben-Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers,
Eran Tromer, and Madars Virza. 2014. Zerocash: Decentralized Anonymous
Payments from Bitcoin. In IEEE Symposium on Security and Privacy. 459–474.
[18] Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, and Eran Tromer. 2013. On
the concrete efficiency of probabilistically-checkable proofs. In Symposium on
Theory of Computing Conference, STOC’13, Palo Alto, CA, USA, June 1-4, 2013.
585–594.
[19] Eli Ben-Sasson, Alessandro Chiesa, Daniel Genkin, Eran Tromer, and Madars
Virza. 2013. SNARKs for C: Verifying Program Executions Succinctly and in Zero
Knowledge. In CRYPTO. 90–108.
[20] Eli Ben-Sasson, Alessandro Chiesa, Michael Riabzev, Nicholas Spooner, Madars
Virza, and Nicholas P. Ward. 2019. Aurora: Transparent Succinct Arguments for
R1CS. In EUROCRYPT. 103–128.
Oracle Proofs. In TCC. 31–60.
Zero Knowledge via Cycles of Elliptic Curves. In CRYPTO. 276–294.
[23] Eli Ben-Sasson, Alessandro Chiesa, Eran Tromer, and Madars Virza. 2014. Succinct
Non-Interactive Zero Knowledge for a von Neumann Architecture. In USENIX.
781–796.
[24] Nir Bitansky, Ran Canetti, Alessandro Chiesa, and Eran Tromer. 2013. Recursive
composition and bootstrapping for SNARKS and proof-carrying data. In STOC.
111–120.
[25] Jonathan Bootle, Andrea Cerulli, Pyrros Chaidos, Jens Groth, and Christophe
Petit. 2016. Efficient Zero-Knowledge Arguments for Arithmetic Circuits in the
Discrete Log Setting. In EUROCRYPT. 327–357.
[26] Benedikt Bünz, Jonathan Bootle, Dan Boneh, Andrew Poelstra, Pieter Wuille, and
Gregory Maxwell. 2018. Bulletproofs: Short Proofs for Confidential Transactions
and More. In S&P. 315–334.
[27] Melissa Chase, David Derler, Steven Goldfeder, Claudio Orlandi, Sebastian Ra-
macher, Christian Rechberger, Daniel Slamanig, and Greg Zaverucha. 2017. Post-
Quantum Zero-Knowledge and Signatures from Symmetric-Key Primitives. In
CCS. 1825–1842.
[28] Craig Costello, Cédric Fournet, Jon Howell, Markulf Kohlweiss, Benjamin Kreuter,
Michael Naehrig, Bryan Parno, and Samee Zahur. 2015. Geppetto: Versatile
Verifiable Computation. In 2015 IEEE Symposium on Security and Privacy, SP.
253–270.
[29] Ivan Damgård and Yuval Ishai. 2006. Scalable Secure Multiparty Computation.
Interactive
In CRYPTO. 501–520.
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2037A ADDITIONAL EXPERIMENTAL RESULTS
DNA profile matching (DPM). The DNA profile match (DPM) is
an application considered in [13]. The server holds a database of
DNA profile releases the commitment of the database. A client can
query the database, outputting three potential results: match, no
match and partial match. The server then uses a zero knowledge
proof scheme to prove that the query result is carried out correctly,
and the public can verify this statement.
The detailed computation is described in [13, Appendix E]. The
number of constraints to test each DNA entry is 90,954 [13, Figure
4]. We estimate the performance of Ligero++ based on the size of
R1CS constraints and present the numbers in Table 4.
number of entries
Prover Verfication
Time(s)
Time(s)
Proof
Size(KB)
16
32
64
142
163
178
Table 4: Performance of Ligero++ for DPM
0.84
0.89
0.92
63
118
200
generate a proof for batched verification. The verification of each
ECDSA signature consists of one hashing and several modulo ex-
ponentiation, and the number of constraints for one verification is
32,768 using SHA-256 as the hash function. We estimate the perfor-
mance of Ligero++ for batched verification of ECDSA signatures
in Table 5. As shown in the table, both the verification time and
the proof size grow sub-linearly. As each ECDSA signature is 64
bytes and takes around 3.8ms to verify, we can see that the verifica-
tion time of our batch verification is already faster than verifying
ECDSA signatures directly for 𝑛 = 64 signatures. We also estimate
that the proof size will be smaller than the total size of signatures
for 𝑛 ≥ 3, 200 which are relevant for blockchain applications, and
the performance of our scheme demonstrates that we could poten-
tially use the batched verification to improve both the proof size
and the verification time.
Prover Verfication
Time(s)
Time(s)
𝑛
1
4
16
64
2.6
5.1
15.7
50.7
Proof
Size(KB)
76
100
122
146
0.15
0.17
0.21
0.23
Batched verification of ECDSA signatures. Elliptic Curve Dig-
ital Signature Algorithm (ECDSA) is commonly used in crypto-
currencies to sign transactions. An important application of zero
knowledge proofs is to aggregate multiple ECDSA signatures and
Table 5: Performance of Ligero++ for batched verification of
ECDSA.
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2038