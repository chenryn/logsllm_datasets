deployment of DNSSEC on hijackable domains. A measurement on
the maximum TTL value limit for popular resolvers is included in
Appendix C.
Find a cache-miss. The Zaw attack can only be launched when a
vulnerable domain’s valid A record is not in the cache of an affected
resolver (Section 3). To estimate how often such cache-miss appears,
we query affected resolvers occasionally to resolve exploitable do-
mains. Specifically, we queried 40 affected resolvers for the A record
of all 628 hijackable domains with a “+norec” option, which asks
the resolver to respond only from its cache. Given the response
with NOERROR status, if an A record is received in the answer section,
it means that the domain is in the cache of the resolver; however, if
the answer section is empty, we considered the domain not to exist
in the cache (i.e., cache-miss). We consistently ran this experiment
for 5 days. To avoid overloading the resolver, we sent a query ev-
ery 30 seconds. In total, we queried each domain for 25 times and
reported the responses.
Looking into the responses from the 5 days, we observed in-
consistent behaviors by resolvers. Specifically, some resolvers (e.g.,
CloudFlare) responded with NOERROR status and then responded
with an error status (e.g., SERVFAIL). This could be due to the utiliza-
tion of anycast addressing in which some instances of the resolver
support “+norec” option while others disabled it. In addition, some
resolvers (e.g., Dyn DNS) always respond with an error status. This
could indicate that these resolvers disabled the “+norec” option for
privacy concerns to prevent cache snooping [47].
Table 5 (in Appendix C) shows the cache-miss rates of resolvers
supporting “+norec”. Here, we measured the consistency rate, which
represents the ratio of the number of NOERROR responses to the total
number of responses. A higher rate indicates consistent support for
“+norec” among the instances of the resolver. Also calculated is the
cache-miss rate, which represents the rate of the number of cache-
misses over the total number of NOERROR responses. As resolvers
which belong to the same operator showed similar consistency rates
and cache miss rates, we only present the average of consistent
rates and cache miss rates of resolvers under the same operator.
Among the 10 resolver operators, we observed that 6 (e.g., Dyn
DNS) providers have low support for “+norec”. However, some
error messages may be caused by internal configurations such
as filtering. The other 4 operators generally accept the “+norec”
option (e.g., OpenNIC). More importantly, the cache-miss rate for
the exploitable domains at these resolvers is nearly 99%. It means
that it is not challenging for an attacker to launch a Zaw attack
against these domains.
Zref selection. A resolver selects a specific nameserver from the
returned NS RRSet for any follow-up queries of the corresponding
domain based on different criteria (see section 2.1). To measure
the attack’s success rate, we are interested in investigating the
probability that an affected resolver selects a Zref. We define the
probability that a resolver selects a Zref as:
P(𝑍𝑟𝑒 𝑓 ) = P(𝑁 𝑆𝑇 𝐿𝐷𝑛𝑠) . P(𝑍𝑟𝑒 𝑓𝑆𝐿𝐷𝑛𝑠 | 𝑁 𝑆𝑇 𝐿𝐷𝑛𝑠)
(1)
where, P(𝑁 𝑆𝑇 𝐿𝐷𝑛𝑠) is the probability of selecting a nameserver
from TLDns and P(𝑍𝑟𝑒 𝑓𝑆𝐿𝐷𝑛𝑠 | 𝑁 𝑆𝑇 𝐿𝐷𝑛𝑠) is the probability of
selecting a Zref from SLDns given that a nameserver has been
selected from TLDns. For each domain, we averaged P(𝑍𝑟𝑒 𝑓 ) over
all the snapshots. Here we assumed that the probability of selecting
any nameserver from the NS RRSet are equal.
Figure 5d (in Appendix C) illustrates the distribution of the Zref
selection probability among the hijackable domains. We found that
the Zref selection probability is relatively high in our identified
hijackable domains. Specifically, we found 391 (62.26%) of these
domains have a Zref selection probability of 0.5 or higher. Even
worse, 270 (42.99%) domains have a Zref selection probability of 1.
DNSSEC-signed domains. Domains with properly deployed DNSSEC
are protected against this attack due to the chain of trust provided
by this protocol. DNSSEC is an extended version of DNS that uti-
lizes public key infrastructure (PKI) to provide data integrity on
DNS responses [77]. We investigated the deployment of DNSSEC
on the identified hijackable domains to further assess this vulner-
ability. DNSSEC provides the integrity of DNS records by intro-
ducing three main record types, including DNSKEY records, RRSIG
(Resource Record Signature) and DS (Delegation Signer) records.
DNSKEY contains the public keys used to sign the records. For each
RRSet, there exists a corresponding RRSIG record that contains a
digital signature for it. Also, a DS record is placed at the parent
zone and holds a hash of the child’s signing key. A properly signed
domain must include and configure these records correctly.
To check the level of the DNSSEC deployment for the hijackable
domains, we first automatically queried each domain for DNSSEC
records that facilitate the validation process, i.e., DNSKEY, RRSIG,
and DS. Domains that do not have these three records configured are
not considered signed properly [16]. For domains that set all these
records, we then utilized a DNS checking tool (i.e., Zonemaster [81])
to investigate if the signatures are expired or broken.
Our study reveals that a large number of the hijackable domains
have none of the three record types configured. Specifically, 619 do-
mains (98.56%) did not configure any DNSKEY, RRSIG, or DS records.
In contrast, we only found 8 (1.27%) domains that have at least
DNSKEY record configured, which suggests there was an attempt of
deploying DNSSEC for these domains. In addition, only one domain
(moodysanalytics.com) was found to deploy DNSSEC properly.
5.3 Case studies
Here we introduce several typical domains with Zrefs, which were
used in critical services. In particular, we found 2 domains (twigaw
allet.com for TWIGA wallet, onfastspring.com for FastSpring)
used as payment facilitation services, and one domain that is oper-
ated by a US airport (flypittsburgh.com for Pittsburgh Interna-
tional Airport). The Zref selection probabilities for these domains
are (0.33, 0.5, 0.2), respectively (Section 5.2). For FastSpring, an
SaaS e-commerce platform, we utilized PublicWWW [64], a source
code search engine, to estimate the number of domains that used
this service to process the online payment, and found 768 websites
connecting to this domain. TWIGA wallet facilitates payment ex-
change and online purchases. Hijacking such a service is critical as
an adversary will be able to steal payment information.
It is important to note that none of the security-critical domains
discussed in this case study are DNSSEC-signed. The lack of the
utilization of DNSSEC poses an increased risk of domain hijacking.
Furthermore, all these domains were found exploitable for a rela-
tively long time, at least during whole duration of our analysis, i.e.,
91 days.
6 DISCUSSION
Recommendation for DNS hosting providers. Our study un-
covered shortcomings within the domain ownership verification
procedures implemented by most of the DNS hosting providers
(Section 4.2). To mitigate this issue, for DNS hosting services that
use a fixed set of nameservers (e.g., DigitalOcean), the provider can
require a customer to add a randomly generated NS record at the
TLD level for the domain ownership verification. Specifically, such a
random NS record could be of the format of random.provider.TLD.
The random label could be generated based on the costumer’s iden-
tity information such as his/her account email address and IP. When
validating the domain ownership, the provider could require the
customer to add this random record at the registrar. The provider
should only activate a domain once it observes this random record
in the domain’s resolution path. Note that this random nameserver
does not need to be a stand-alone nameserver; it could have its IP
pointing to one of the actual nameservers used by the provider. For
DNS hosting services who randomly assign their nameservers (e.g.,
GoDaddy), we suggest checking the existence of stale NS records
at SLDns by enumerating all possible resolution paths for each do-
main of their customers. When such record is found, a completely
different set of NS records should be assigned.
In addition, we argue that one cause for Zaw attacks is that some
DNS hosting providers will copy all the current DNS records for the
added domain, including the NS record (Section 5.1). This design
choice is adopted to make the new service transfer of the domain
transparent and to limit the website’s downtime. However, this
decision has its drawbacks, especially when these NS records are
associated with another service. Although the provider allows the
customer to edit these records, the customer is not aware of the
risks posed by keeping these records, especially when they become
stale. Thus, we suggest that the DNS service providers alert their
customers to delete these records to mitigate this risk. Also, DNS
hosting providers can gradually decrease the TTL values of these
NS records and then eventually delete them proactively from the
domain’s zone. This will allow sufficient time for these records to
be cleared from the caching systems that have cached them in the
past and thus will not negatively affect the domain’s availability.
Protection against DNS cache poisoning. Our study showcases
a practical attack scenario of cache poisoning exploiting stale NS
records at SLD zone, which circumvents the protection of current
caching rules. We suggest that the caching rules should be improved
to mitigate Zaw attack. Specifically, as suggested by Jiang et al.,
the bailiwick rule could be updated to cache authoritative data that
resides at the TLD level [42]. Also, the credibility rule could assign
a higher trust level to data from the TLD zone than the data from
the SLD zone. As an example, MaraDNS [55], a DNS implementa-
tion, has already adopted the suggested bailiwick rule [42]. The
importance of deploying these suggestions becomes more appar-
ent, especially with the popularity of DNS hosting service which
allow any customers to create a zone for a domain of deactivated
accounts even if s/he do not own the domain. Note that a recent
RFC draft [40] is proposed to improve the DNS standards in RFC
1034 and RFC 1035 [57, 58]. This draft suggests explicitly validating
the NS sets with the child (the SLD zone), as already implemented
with ’harden-referral-path’ in unbound. As a result, the attack we
propose becomes straight-forward to execute, as an explicit NS
query via the affected resolver is no longer necessary. Hence, we
suggest that operators of major DNS resolvers do not implement
this, until DNS hosting providers have widely addressed the issue
we uncovered in this paper.
In addition, properly DNSSEC-signed domains are protected
from cache poisoning attacks if the users accessing theses domains
are using DNSSEC validating resolvers [7]. In particular, an attacker
cannot properly sign new records for the hijacked domains. That
is because she does not have the private signing key, which will
be used to generate correct RRSIG for the new records. Even if the
attacker tries to generate a new signing key, it will not match the key
stored as a DS record that is placed at the TLD. As a result, the chain
of trust will be broken. However, recent studies [16, 79] showed that
the current deployment of DNSSEC by domain owners or resolvers
is far from perfect. More importantly, our results showed that only
one of the vulnerable domains is properly signed. (Section 5.2).
Hence, we advocate the faster deployment of DNSSEC.
Limitations. In the experiment of affected resolvers (Section 4.3),
we made the minimum effort to have the attacker’s IP address
cached at the resolvers. It is worth noting that this does not guar-
antee that all the traffic of an affected domain will be diverted to
the attacker’s IP address. Particularly, a client’s local cache at the
browser or the operating system may still point to correct IP ad-
dress. In addition, due to the use of anycast addressing by DNS
resolvers, for a large-scale attack, the adversary needs to success-
fully poison as many affiliated resolver servers as possible for a
more effective attack. However, we believe that these obstacles
could be bypassed easily. In particular, the local cache will clear
out eventually and then the client will query the recursive resolver.
In addition, the attacker can run his/her attack from different ge-
ographical location to infect a broader range of resolvers such as
injecting his/her attack code in JavaScript advertisement. However,
to carry out a stealthy version of this attack, the adversary could
just target limited instances of the resolvers’ servers.
Also, the measurement on the cache-miss rate (Section 5.2) was
conducted from one server. Ideally, it could be executed from differ-
ent geolocations to observe a wider range of caching samples. This
measurement serves as initial estimate and a large-scale version of
it is considered for future work.
7 RELATED WORK
DNS security. A body of work have covered different aspects on
DNS resolution process and the behavior of public resolvers. Yu
et al., [80] studied the aspects that influence resolvers to select a
specific NS record form a set of authority servers for further queries.
Other research investigated manipulation resolution process due
to malware, censorship, or monetizing incentives [21, 49, 51, 62].
Meanwhile, different models were proposed to poison and pro-
tect the cache. For example, Son et al. [72] presented an analysis of
different types of cache poisoning. The Bailiwick rule and Credi-
bility rule are introduced [76] to protect resolvers from a variety
range of attacks against the cache [8]. However, Kaminsky [44]
introduced a type of attack that exploits the credibility rule to over-
write cached data with the response from referral section. Different
defense mechanisms were introduced in [20, 63]. Also, Alharbi et
al. [5] designed an attack to poison local cache of different operat-
ing system. In addition, Jiang et al. [42] showed that by abusing the
Bailiwick rule and the Credibility rule, some revoked domains may
still be resolvable by extending their TTL value. Similarly, klein et
al. presented different attack scenarios to overwrite the cache [46].
Unlike prior efforts, in our research, we showed that abusing weak
verification processes at DNS hosting providers makes these attack
scenarios practical.
Domain Hijacking. A wealth of research has been conducted on
domain hijacking [10, 14, 52, 75]. For example, Liu et al. showed the
possibility of hijacking a domain through its stale records that are
still pointing to publicly available resources. Specifically, they sur-
veyed stale NS records that point to only expired domains. In addi-
tion, they investigated CNAME, MX records pointing to publicly avail-
able resources, such as cloud providers, expired domains, and mea-
sured A records using deactivated cloud providers’ accounts [52].
Vissers et al. presented different domain hijacking scenarios, such
as nameserver dependency, outdated Whois records, typosquatting
and bitsquatting [75]. Bryant showed that he was able to take con-
trol over all .io TLD domains through the TLD’s stale NS records [14].
Borgolte et al. analyzed a use-after-free vulnerability that causes
a domain takeover by abusing stale A records pointing to cloud
providers: an adversary can claim the corresponding IP address of
the stale record at the provider and then issue an SSL certificate
through automated certificate authority (e.g., Let’s Encrypt). They
also proposed a new approach to validate domains in the automated
certificate management environments of CAs [10].
Other research presented detection methodologies to detect hi-
jacked domains, such as [11, 53]. In contrast to previous work, we
investigated stale NS record at the domain’s level. Unlike stale NS
records that exist at the TLD level, stale NS records at the domain’s
level are stealthier and more difficult to be noticed by the domain
owner. In addition, in our research, we showcased the attack sce-
nario, where by exploiting the weak validation procedures of DNS
hosting providers, attackers can hijack vulnerable domains that
have stale records residing at their domain zones.
DNS Misconfigurations. Numerous studies have looked into var-
ious kinds of DNS misconfiguration [9, 23, 24, 37, 43, 48, 61, 65, 71],
including the NS records inconsistency between the TLDns and
the SLDns. Although it’s known that this type of misconfiguration
affects the availability of a domain, in our research, we showed that
inactive NS records in SLDns can be easily acquired and activated
by an attacker, thus, leading to domain hijacking.
8 CONCLUSION
This paper comprises the first large-scale study on the menaces of
stale NS records in the SLD zone. We have highlighted that these
records can be easily exploited, causing a stealthy hijacking of ac-
tive domains associated with DNS hosting services. By scanning
over 1M high-profile domains, we identified 628 hijackable do-
mains, affecting government agencies, public services, and large
corporations. Our research further shows prominent DNS hosting
services (e.g., Amazon Route 53) and popular public resolvers (e.g.,
CloudFlare) are all vulnerable to the attack. Moving forward, we
investigated a set of mitigation strategies to help the affected parties
defend against this new security risk.
ACKNOWLEDGMENTS
We thank our shepherd Tobias Fiebig and the anonymous reviewers
for their insightful comments. This work was supported in part by
the National Science Foundation under CNS-1838083, 1801432 and