the system, which includes both C code and Java programs,
tracking operations on device ﬁles is hard to be done statically.
Most relevant to our work is the recent research on vendor
customization of pre-installed apps [43]. This research stati-
cally analyzes 10 representative stock Android images from 5
top vendors to identify the provenances of their pre-installed
apps. It further discovers that a large portion of those apps are
overly privileged or have re-delegation vulnerabilities, and also
most of the problematic apps come from the vendors. Unlike
this prior work, whose focus is the impact of customizations
on apps, our work looks at device drivers, which are the
predominant cause for phone vendors to customize Android.
What we found, including the pervasiveness of exposed Linux
device nodes and the serous consequences once they are
exploited, have never been reported before.
When a security analysis on Android needs to touch its
system code, oftentimes, this needs to be done through a
dynamic analysis [2, 26, 32, 44]. A prominent example of
this line of work is TaintDroid [26], a tool designed for
dynamic taint analysis on Android. This approach can achieve
a ﬁne-grained tracking of data ﬂows across apps and the OS.
However, it is less suitable for analyzing multiple customized
systems because it requires an intensive instrumentation of the
OS to get a good performance, which limits its portability.
Another ﬁne-grained dynamic tool is Droidscope [44], which
runs the whole Android platform on an emulator to reconstruct
both the OS and Dalvik level views of the system. The
problem is that it is difﬁcult for the emulator to mimic different
customized hardware, which is required for our study on
Android Linux devices.
System-call analysis. Given the challenges of using existing
tools for our study, we built our own dynamic analysis tool that
works on the system-call level to achieve a high performance
and portability. System calls have long been used for security-
related program analysis [21, 36, 37, 40]. ADDICTED is built
on strace that is ported and extended to work on ARM-based
systems.
Android permissions. Also related to our research is a large
amount of the literature on Android permissions. Those per-
missions are meant to protect critical Android resources on
the framework layer [24, 27–29]. Prior work leverages dy-
namic analysis to “demystify” Android permissions, mapping
Android APIs to their related permissions [28]. The outcomes
of the study can help us ﬁnd the right APIs to trigger device-
related permissions, for the purpose of locating the Linux
ﬁles related to the device. Another example is the technique
for tracking an IPC call’s provenance to prevent permission
re-delegation attacks. Our approach also monitors the IPC
but for ﬁnding the ﬁle-system activities in response to the
request. There is also a line of research on enhancement of
the permission system [19, 22, 25, 33, 35, 39]. Fundamentally,
all those prior studies focus on the security protection on the
framework layer, while our research investigated the Linux-
layer security hazards introduced by device customizations.
Android Linux-layer security. Only limited effort has been
made on Android’s Linux-layer security. Prominent exam-
ples include Momento [34], which investigates the informa-
tion leaks from the shared memory usage data exposed by
Android’s Linux, and the recent work on Android public
information leaks [46]. Those studies follow the foot step
of the work on the privacy implications of the Linux Proc
ﬁle system [45]. Different from the prior work, our research
investigates the Linux-layer protection of Android device ﬁles,
whose exposures have direct and often more serious conse-
quences, as shown in the paper. Also, effort has been made
recently to enhance access control on Android [42], based upon
SELinux [6].
Sensor data inference. There is a line of research on inferring
sensitive user information from the public data exposed by
Android devices, particularly the outputs of different sen-
sors [20, 31, 41]. Different from such work, our approach
reveals the customization errors that cause explicit disclosure
of Android device nodes, allowing an unauthorized party to
directly get information from them.
VIII. CONCLUSION
The fragmentation of the Android ecosystem has brought
in new security challenges: vendors and carriers aggressively
customize ofﬁcial OS versions to accommodate their new
hardware pieces and services, which can potentially undermine
Android security protection. This important issue, however,
has not been adequately studied. Particularly, little is known
about the security implications of customizing a variety of
Android Linux devices such as camera, audio, GPS, etc. In our
research, we made the ﬁrst step toward better understanding of
this issue, leveraging a new technique, ADDICTED, designed
for automatic detection of some types of security-critical
customization ﬂaws. ADDICTED dynamically analyzes the
operations on a sensitive Android device to connect it to a set
of Linux device ﬁles. The security protection of these ﬁles is
then evaluated against that received by their counterparts on the
AOSP OS. In this way, our approach automatically identiﬁes
those under-protected device nodes. Running ADDICTED on
popular phone models, we discovered critical ﬂaws that allow
an unauthorized app to take pictures and screenshots, and
even record the user’s input keys from touchscreen. Those
vulnerabilities were found to exist on hundreds of other phone
models. Our measurement study further reveals the LCFs
present in over 1,000 phone models distributed across different
Android versions, carriers and countries.
With the important discoveries we made, our research just
scratches the surface of the grand security challenges that
come with Android customizations. Even on the Linux layer,
still there are many device ﬁles we cannot interpret, not to
mention detection of their security ﬂaws. More importantly,
further effort is expected to understand how to protect security-
critical resources on different Android layers, and develop
effective means to ensure that customized resources are still
well guarded.
ACKNOWLEDGEMENTS
The project was supported in part by the NSF CNS-
1017782, 1117106, 1223477 and 1223495.
421
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Demo of
the paper.
https://sites.google.com/site/
linuxdroid0/.
[2] Droidbox: Android application sandbox.
https://code.
google.com/p/droidbox/. Accessed:Nov, 2013.
[3] File,
os x.
macosx/. Accessed: 05/20/2013.
folder comparison & synchronization for mac
http://www.deltopia.com/compare-merge-sync/
[4] Full ﬁrmware.
http://www.full-ﬁrmware.com/.
Ac-
[5] Samsung updates: Latest news and ﬁrmware for your
http://samsung-updates.com/. Ac-
cessed:05/02/2013.
samsung devices!
cessed: 05/02/2013.
[6] Se linux.
http://www.nsa.gov/research/ ﬁles/selinux/
papers/slinux.pdf. Accessed: 11/09/2013.
[7] Using the input subsystem. http://www.linuxjournal.com/
article/6429, year = 2013,.
[8] Android tops 81 percent of
share in q3.
strategy-analytics-q3-2013-phone-share/, 2013.
cessed: 10/31/2013.
smartphone market
http://www.engadget.com/2013/10/31/
Ac-
[9] Boot image tools. https://github.com/sakindia123/Boot-
Image-tools, 2013.
[10] How to take screenshots on your unrooted android
http://www.lindylabs.com/
phone – windows version.
screenshot it/instructions win.html, 2013.
[11] Linux-fbdev.org. http://www.linux-fbdev.org/, 2013.
[12] List of best-selling mobile phones. http://en.wikipedia.
org/wiki/List of best-selling mobile phones, 2013.
[13] randoop, random test generation.
https://code.google.
com/p/randoop/, 2013. Accessed: 11/08/2013.
http://en.wikipedia.org/wiki/RGB
[14] Rgb color model.
color model, 2013.
[15] Samsung s5p/exynos4 ﬁmc driver. https://www.kernel.
org/doc/Documentation/video4linux/ﬁmc.txt, 2013.
[16] strace. http://sourceforge.net/projects/strace/, 2013. Ac-
cessed: 11/08/2013.
framework.
[17] V4l2
https://www.kernel.org/doc/
Documentation/video4linux/v4l2-framework.txt, 2013.
[18] Yuv. http://en.wikipedia.org/wiki/YUV, 2013.
[19] Alastair R. Beresford, Andrew Rice, Nicholas Skehin,
and Ripduman Sohan. Mockdroid: trading privacy for
application functionality on smartphones. In Proceedings
of the 12th Workshop on Mobile Computing Systems and
Applications, HotMobile ’11, pages 49–54, New York,
NY, USA, 2011. ACM.
[20] Liang Cai and Hao Chen.
inferring
keystrokes on touch screen from smartphone motion. In
Proceedings of the 6th USENIX conference on Hot topics
in security, HotSec’11, pages 9–9, Berkeley, CA, USA,
2011. USENIX Association.
Touchlogger:
[21] Davide Canali, Andrea Lanzi, Davide Balzarotti, Christo-
pher Kruegel, Mihai Christodorescu, and Engin Kirda.
A quantitative study of accuracy in system call-based
malware detection.
In Proceedings of the 2012 Inter-
national Symposium on Software Testing and Analysis,
ISSTA 2012, pages 122–132, New York, NY, USA, 2012.
ACM.
[22] Kevin Zhijie Chen, Noah M. Johnson, Vijay D’Silva,
Shuaifu Dai, Kyle MacNamara, Tom Magrino, Ed-
ward XueJun Wu, Martin Rinard, and Dawn Xiaodong
Song. Contextual policy enforcement in android appli-
cations with permission event graphs.
In NDSS. The
Internet Society, 2013.
[23] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and
David Wagner. Analyzing inter-application communica-
tion in android. In Proceedings of the 9th international
conference on Mobile systems, applications, and services,
MobiSys ’11, pages 239–252, New York, NY, USA,
2011. ACM.
[24] Michael Dietz, Shashi Shekhar, Yuliy Pisetsky, Anhei
Shu, and Dan S. Wallach. Quire: Lightweight provenance
for smart phone operating systems.
In 20th USENIX
Security Symposium, San Francisco, CA, August 2011.
[25] Manuel Egele, Christopher Kruegel, Engin Kirda, and
Giovanni Vigna. PiOS: Detecting privacy leaks in iOS
applications.
In Proceedings of the 18th Annual Net-
work & Distributed System Security Symposium (NDSS),
February 2011.
[26] William Enck, Peter Gilbert, Byung-Gon Chun, Lan-
don P. Cox, Jaeyeon Jung, Patrick McDaniel, and An-
mol N. Sheth. Taintdroid: an information-ﬂow tracking
system for realtime privacy monitoring on smartphones.
In Proceedings of the 9th USENIX conference on Operat-
ing systems design and implementation, OSDI’10, pages
1–6, Berkeley, CA, USA, 2010. USENIX Association.
[27] William Enck, Machigar Ongtang, and Patrick McDaniel.
On lightweight mobile phone application certiﬁcation. In
Proceedings of the 16th ACM CCS, CCS ’09, pages 235–
245, New York, NY, USA, 2009. ACM.
[28] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn
Song, and David Wagner. Android permissions demys-
tiﬁed.
In Proceedings of the 18th ACM conference on
Computer and communications security, CCS ’11, pages
627–638, New York, NY, USA, 2011. ACM.
[29] Adrienne Porter Felt, Helen J Wang, Alexander
Moshchuk, Steven Hanna, and Erika Chin. Permission re-
delegation: Attacks and defenses. In Proceedings of the
20th USENIX Security Symposium, pages 22–37, 2011.
[30] Michael Grace, Yajin Zhou, Zhi Wang, and Xuxian Jiang.
Systematic detection of capability leaks in stock Android
smartphones.
In Proceedings of the 19th Network and
Distributed System Security Symposium (NDSS), Febru-
ary 2012.
[31] Jun Han, Emmanuel Owusu, Thanh-Le Nguyen, Adrian
Perrig, and Joy Zhang. Accomplice: Location inference
using accelerometers on smartphones.
In Proceedings
of the 4th International Conference on Communication
Systems and Networks, Bangalore, India, 2012.
[32] Kim Hazelwood and Artur Klauser. A dynamic binary
instrumentation engine for the arm architecture. In Pro-
ceedings of the 2006 international conference on Com-
pilers, architecture and synthesis for embedded systems,
CASES ’06, pages 261–270, New York, NY, USA, 2006.
ACM.
[33] Peter Hornyack, Seungyeop Han, Jaeyeon Jung, Stuart
Schechter, and David Wetherall. These aren’t the droids
you’re looking for: retroﬁtting android to protect data
from imperious applications. In Proceedings of the 18th
ACM CCS, CCS ’11, pages 639–652, New York, NY,
USA, 2011. ACM.
[34] Suman Jana and Vitaly Shmatikov. Memento: Learning
In Proceedings of the
secrets from process footprints.
422
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
2012 IEEE Symposium on Security and Privacy, SP
’12, pages 143–157, Washington, DC, USA, 2012. IEEE
Computer Society.
[35] Limin Jia, Jassim Aljuraidan, Elli Fragkaki, Lujo Bauer,
Michael Stroucken, Kazuhide Fukushima, Shinsaku Kiy-
omoto, and Yutaka Miyake. Run-time enforcement of
information-ﬂow properties on Android (extended ab-
stract).
In Computer Security—ESORICS 2013: 18th
European Symposium on Research in Computer Security,
pages 775–792. Springer, September 2013.
[36] Clemens Kolbitsch, Paolo Milani Comparetti, Christo-
pher Kruegel, Engin Kirda, Xiaoyong Zhou, and Xi-
aoFeng Wang. Effective and efﬁcient malware detection
at the end host. In Proceedings of the 18th conference on
USENIX security symposium, SSYM’09, pages 351–366,
Berkeley, CA, USA, 2009. USENIX Association.
[37] Andrea Lanzi, Davide Balzarotti, Christopher Kruegel,
Mihai Christodorescu, and Engin Kirda. Accessminer:
using system-centric models for malware protection. In
Proceedings of the 17th ACM conference on Computer
and communications security, CCS ’10, pages 399–412,
New York, NY, USA, 2010. ACM.
[38] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and
Guofei Jiang. Chex: statically vetting android apps for
component hijacking vulnerabilities.
In Proceedings of
the 2012 ACM conference on Computer and communica-
tions security, CCS ’12, pages 229–240, New York, NY,
USA, 2012. ACM.
[39] Mohammad Nauman, Sohail Khan, and Xinwen Zhang.
Apex: extending android permission model and enforce-
ment with user-deﬁned runtime constraints.
In Pro-
ceedings of the 5th ACM Symposium on Information,
Computer and Communications Security, ASIACCS ’10,
pages 328–332, New York, NY, USA, 2010. ACM.
[40] Alessandro Reina, Aristide Fattori, and Lorenzo Cav-
allaro. A system call-centric analysis and stimulation
technique to automatically reconstruct android malware
behaviors. In Proceedings of the 6th European Workshop
on System Security (EUROSEC), Prague, Czech Repub-
lic, April 2013.
[41] Roman Schlegel, Kehuan Zhang, Xiao yong Zhou,
Mehool Intwala, Apu Kapadia, and XiaoFeng Wang.
Soundcomber: A stealthy and context-aware sound trojan
for smartphones. In NDSS. The Internet Society, 2011.
[42] Stephen Smalley and Robert Craig. Security enhanced
(se) android: Bringing ﬂexible mac to android. In NDSS.
The Internet Society, 2013.
[43] Lei Wu, Michael Grace, Yajin Zhou, Chiachih Wu, and
Xuxian Jiang. The impact of vendor customizations
on android security.
In Proceedings of the 2013 ACM
SIGSAC conference on Computer communications secu-
rity, CCS ’13, pages 623–634, New York, NY, USA,
2013. ACM.
[44] Lok Kwong Yan and Heng Yin. Droidscope: seamlessly
reconstructing the os and dalvik semantic views for
dynamic android malware analysis.
In Proceedings of
the 21st USENIX conference on Security symposium,
Security’12, pages 29–29, Berkeley, CA, USA, 2012.
USENIX Association.
[45] Kehuan Zhang and XiaoFeng Wang. Peeping tom in
the neighborhood: keystroke eavesdropping on multi-user
systems.
the 18th conference on
USENIX security symposium, SSYM’09, pages 17–32,
Berkeley, CA, USA, 2009. USENIX Association.
In Proceedings of
[46] Xiaoyong Zhou, Soteris Demetriou, Dongjing He,
Muhammad Naveed, Xiaorui Pan, XiaoFeng Wang,
Carl A. Gunter, and Klara Nahrstedt. Identity, location,
disease and more: Inferring your secrets from android
public resources. In Proceedings of 20th ACM Confer-
ence on Computer and Communications Security (CCS),
November 2013.
[47] Yajin Zhou, Zhi Wang, Wu Zhou, and Xuxian Jiang.
Hey, you, get off of my market: Detecting malicious
apps in ofﬁcial and alternative Android markets.
In
Proceedings of the 19th Annual Network & Distributed
System Security Symposium, February 2012.
423
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply.