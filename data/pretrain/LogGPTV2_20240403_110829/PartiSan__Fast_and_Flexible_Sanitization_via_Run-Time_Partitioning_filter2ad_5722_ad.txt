### Our Policy and Its Implications

Our policy enables efficient coverage expansion compared to the original program, which incorporates both coverage and sanitization instrumentation. As coverage increases, functions transition from variant 1 to variant 3, thereby accelerating the execution of well-explored parts of the program. However, this approach may reduce the likelihood of bug detection and the feedback provided to the fuzzer. For instance, an input that reveals a non-crashing bug without increasing coverage will execute without sanitization under our policy. Additionally, a function deemed "fully-explored" might still provide valuable coverage feedback to the fuzzer. This is because libFuzzer's coverage model is fine-grained (e.g., it includes execution counts), whereas our definition of "fully-explored" is binary.

### Evaluation

We evaluated PartiSan-enabled libFuzzer using a popular benchmark suite for fuzzers [4], derived from widely-used libraries. We ran all 23 benchmarks with ASan enabled. Eleven of these benchmarks completed (i.e., found a bug) within a few minutes. For the remaining 12 benchmarks, we measured fuzzing throughput and coverage over eight hours or until completion. Figure 5 shows the results for two benchmarks (geometric mean of 10 runs). The markers indicate the completion of a run (i.e., after the first marker, the line represents the remaining 9 runs).

As expected, PartiSan significantly increased fuzzing throughput (executions per second) for the sanitized libraries. For 9 out of 12 benchmarks, this translated into improved coverage, and 3 benchmarks completed significantly faster. For example, in the libpng benchmark (left side of Fig. 5), PartiSan allowed us to find the bug within our time budget, whereas previously we could not. However, the impact of PartiSan was not always pronounced. In the wpantund benchmark (right side of Fig. 5), coverage only improved slightly. Note that fuzzing throughput generally decreases over time as the fuzzer explores longer code paths.

### Discussion

#### Custom Partitioning Policies

We implemented three runtime partitioning policies in PartiSan. The flexibility of our design and implementation allows developers to define their own policies. To implement a custom partitioning policy, developers can provide their own load policy and activate variant functions when linking the final binary. Our policy for the fuzzing use case is built on this mechanism.

#### Asynchronous Partitioning

We offloaded our runtime partitioning procedure onto a background thread. This approach minimizes the impact on the application's performance since partitioning happens asynchronously. However, this means we cannot partition on a per-function call basis or based on the calling context. In the fuzzing use case, we partition synchronously as part of the main fuzzing loop.

#### Partitioning Granularity

PartiSan partitions the program at the function level. Specifically, PartiSan might execute the sanitized variant of a hot function containing a long-running loop, which can induce a noticeable slowdown. PartiSan does not support control-flow transfers between variants within the same function. While finer-grained partitioning could refine our design, significant engineering effort would be required, and our fundamental conclusions would remain unchanged.

#### Selective Sanitization

Like ASAP, PartiSan does not support sanitizers that do not function correctly if applied selectively. For example, in a multithreaded program compiled with ThreadSanitizer [17], if two functions concurrently write to the same memory location without acquiring a lock, ThreadSanitizer will detect a data race. This would not be true in a PartiSan-enabled version if one function executed the sanitized variant and the other the unsanitized variant, rendering ThreadSanitizer ineffective.

### Related Work

#### Run-Time Partitioning

Kurmus and Zippel proposed a split kernel with a protected partition containing hardened variants of each kernel function and an unprotected partition with non-hardened variants [9]. Control flow is transferred to one of the two partitions when the kernel services a system call or interrupt request. Unlike PartiSan, it does not permit control flow transfers between the two partitions.

The ASAP framework, presented by Wagner et al., reduces sanitizer overhead by removing checks from frequently executed code while leaving infrequently executed code unaffected [22]. This is also a form of partitioning, but unlike PartiSan, ASAP never creates multiple variants of a function. Static partitioning mechanisms, such as ASAP, do not support adaptive overhead thresholds, probabilistic bug detection, or our fuzzing policy.

Bunshin distributes security checks over multiple program variants, running them in parallel in an N-Variant execution system [24]. This approach improves program latency but increases resource consumption, limiting its applicability. In a fuzzing scenario, available cores can be more efficiently leveraged by running additional fuzzer instances.

#### Sanitizers

We applied PartiSan to AddressSanitizer and UndefinedBehaviorSanitizer, which are part of the LLVM compiler framework [13,16]. MemorySanitizer, which detects reads of uninitialized values, is fully compatible with PartiSan [21]. Sanitizers that detect bad casting [5,7,11] and variadic function misuses [1] could also benefit from PartiSan by applying checks selectively. ThreadSanitizer, however, is not a good fit for PartiSan due to selective sanitization rendering it ineffective (cf. Sect. 8).

FUSS, another work by Wagner, uses a separate optimization stage to increase fuzzing throughput [23, Sect. 4.3]. After a warm-up phase, FUSS recompiles the program using collected profile data to omit costly instrumentation code. This one-time optimization through recompilation constitutes static partitioning, while PartiSan optimizes dynamically and continuously.

#### Control-Flow Diversity

PartiSan uses control-flow diversity to partition the runtime of the protected program. Prior work has explored control-flow diversity for security purposes. Isomeron, for example, defeats just-in-time return-oriented-programming (JIT-ROP) attacks by creating diversified clones of the programâ€™s functions and switching randomly between them [3]. Crane et al. used control-flow diversity to mitigate cache-based side-channel attacks by adding noise to observable leakage in the shared cache [2].

### Conclusion

We present PartiSan, a runtime partitioning technique that enhances the performance and flexibility of sanitized programs. PartiSan allows developers to ship a single sanitizer-enabled binary without committing to a specific fraction of time spent sanitizing or the type of sanitization. Using tunable policies, PartiSan reduces the performance overheads of ASan and UBSan by 68% and 76%, respectively. Our experiments show that PartiSan consistently increases fuzzing throughput, leading to improved coverage and more bugs found.

PartiSan's dynamic partitioning mechanism supports adaptive overhead thresholds and probabilistic bug detection, extending the usage scenarios of sanitizers to a wider group of testers and program inputs. This will enable developers to catch more errors early, reducing the number of vulnerabilities in released software.

### Acknowledgments

We thank Jonas Wagner for his advice and pointing out useful previous work, and the anonymous reviewers for their valuable feedback. This material is based upon work partially supported by the Defense Advanced Research Projects Agency (DARPA), the United States Office of Naval Research (ONR), the National Science Foundation, and a gift from Oracle Corporation.

### References

[References listed as in the original text]

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and understandable.