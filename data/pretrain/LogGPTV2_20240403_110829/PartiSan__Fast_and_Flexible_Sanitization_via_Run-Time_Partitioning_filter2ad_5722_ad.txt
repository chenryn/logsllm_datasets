Our policy allows us to increase coverage eﬃciently compared to the original
program whose functions contain both coverage and sanitization instrumenta-
tion. As coverage increases, functions transition from variant 1 to 3 , speeding
up execution of the well-explored parts of the program. The downside of this
approach is that it potentially reduces the chance of bug detection as well as
coverage feedback to the fuzzer. Consider an input that exposes a non-crashing
bug without increasing coverage. Under our policy, such inputs execute without
PartiSan: Fast and Flexible Sanitization via Run-Time Partitioning
417
Fig. 5. Fuzzing throughput and coverage for libpng and wpantund
sanitization. Additionally, a function that we deem “fully-explored” might still
provide useful coverage feedback to the fuzzer. The reason is that libFuzzer’s cov-
erage model is ﬁne-grained (e.g., it includes execution counts) while our notion
of fully-explored is binary.
7.2 Evaluation
We evaluated the PartiSan-enabled libFuzzer on a popular benchmark suite for
fuzzers [4] derived from widely-used libraries. We ran all 23 included benchmarks
with ASan enabled. Out of these 23 benchmarks 11 complete (ﬁnd a bug) within
a few minutes. For the remaining 12 benchmarks we measured fuzzing through-
put and coverage and ran them for eight hours or until completion. Figure 5
shows the results for two benchmarks (geometric mean of 10 runs). The markers
indicate the completion of a run (i.e., after the ﬁrst marker the line represents
the remaining 9 runs).
As expected, PartiSan is able to increase fuzzing throughput (executions per
second) for the sanitized libraries. For 9 (of 12) benchmarks this translates to
improved coverage, and 3 benchmarks complete signiﬁcantly faster. For example,
for the libpng benchmark (left side of Fig. 5) PartiSan lets us ﬁnd the bug
within our time budget, whereas previously we could not. However, the impact
of PartiSan is not always that pronounced. For the wpantund benchmark (right
side of Fig. 5), coverage only improves slightly. Note that fuzzing throughput
generally decreases over time as the fuzzer explores longer and longer code paths.
418
J. Lettner et al.
8 Discussion
Custom Partitioning Policies. We implemented three run-time partitioning poli-
cies in PartiSan. The ﬂexibility of our design and implementation additionally
allows developers to deﬁne their own policies. To implement a custom partition-
ing policy, the developer can provide her own load policy and activate variant
function when linking the ﬁnal binary. Our policy for the fuzzing use case is built
atop this mechanism.
Asynchronous Partitioning. We opted to oﬄoad our run-time partitioning pro-
cedure onto a background thread. The advantage of this approach is that, since
partitioning happens asynchronously relative to the rest of the application, our
runtime component has little impact on the application’s performance. The dis-
advantage is that we cannot partition on a per-function call basis or depending on
the calling context. That said, in the fuzzing use case we partition synchronously
as part of the main fuzzing loop.
Partitioning Granularity. PartiSan partitions the program run time at function-
level granularity. In particular, PartiSan might execute the sanitized variant of
a hot function containing a long-running loop. Executing this sanitized variant
can induce a noticeable slowdown as PartiSan does not support control-ﬂow
transfers between variants within the same function. Our design can be reﬁned
with ﬁner-grained partitioning, though a signiﬁcant engineering eﬀort would be
required to implement it. Our fundamental conclusions would not change with
an improved partitioning scheme.
Selective Sanitization. Like ASAP, PartiSan does not support sanitizers that do
not function correctly if they are applied selectively. Consider, for example, a
multithreaded program compiled with ThreadSanitizer [17]. If two functions in
the program concurrently write to the same memory location without acquiring
a lock, then ThreadSanitizer will detect a data race. This would not be true in
a PartiSan-enabled version of the program if we executed the sanitized variant
of one function and the unsanitized variant of the other. In this case, the data
race would not be detected, thus rendering ThreadSanitizer ineﬀective.
9 Related Work
9.1 Run-Time Partitioning
Kurmus and Zippel proposed to create a split kernel with a protected partition
containing a hardened variant of each kernel function, and an unprotected parti-
tion containing non-hardened variants [9]. Whenever the kernel services a system
call or an interrupt request, it transfers control ﬂow to one of the two partitions.
The protected (unprotected) partition is used to service requests from untrusted
(trusted) processes and devices. Unlike PartiSan, however, it does not permit
control ﬂow transfers between the two partitions. A service request is handled
in its entirety by one of the two partitions.
PartiSan: Fast and Flexible Sanitization via Run-Time Partitioning
419
The ASAP framework, presented by Wagner et al., reduces sanitizer overhead
by removing sanitizer checks and programmer asserts from frequently executed
code, while leaving the infrequently executed code unaﬀected [22]. This is also
a form of partitioning, as ASAP creates a sanitized and an unsanitized par-
tition within the program. As with PartiSan, transfers between sanitized and
unsanitized code are frequent with ASAP. However, contrary to PartiSan and
the aforementioned work, ASAP never creates multiple variants of a function.
ASAP should therefore be considered a static form of partitioning. Note that
static partitioning mechanisms can neither support adaptive overhead thresh-
olds, nor probabilistic bug detection, nor our presented fuzzing policy.
Bunshin reduces sanitizer and exploit mitigation overhead by distributing
security checks over multiple program variants and running them in parallel in
an N-Variant execution system [24]. The key idea is to generate program variants
in such a way that any speciﬁc sanitizer check appears in only one of the variants.
This distribution principle makes each variant faster than the original program
and also enables the simultaneous use of incompatible tools. Bunshin achieves full
sanitizer coverage by running all variants in parallel, i.e., for any given sanitizer
check there will be a variant that executes it. This approach improves program
latency at the cost of increased resource consumption which limits Bunshin’s
applicability. In a fuzzing scenario, for example, available cores can be more
eﬃciently leveraged by running additional fuzzer instances.
9.2 Sanitizers
We applied PartiSan to two of the sanitizers that are part of the LLVM
compiler framework, AddressSanitizer and UndeﬁnedBehaviorSanitizer [13,16].
Many other sanitizers exist. MemorySanitizer detects reads of uninitialized val-
ues and, although we did not include it in our evaluation, it is fully compatible
with PartiSan [21]. Sanitizers that detect bad casting [5,7,11] and variadic func-
tion misuses [1] could also beneﬁt from PartiSan by applying checks selectively.
ThreadSanitizer instruments memory accesses and atomic operations to
detect data races, deadlocks, and misuses of thread synchronization primitives
(e.g., pthread mutexes) in multithreaded programs [17]. Unfortunately, it is not
a good ﬁt for PartiSan because selective sanitization renders the sanitizer inef-
fective (cf. Sect. 8).
FUSS, another work by Wagner, uses a separate optimization stage to
increase fuzzing throughput [23, Sect. 4.3]. After a warm-up phase, FUSS collects
proﬁle data from the running fuzzer. It then re-compiles the program under test
using the collected proﬁle data to omit the most costly instrumentation code,
and restarts the fuzzer with the new binary. We argue that this one-time opti-
mization through re-compilation constitutes static partitioning (albeit integrated
over time), while PartiSan optimizes dynamically and continuously.
420
J. Lettner et al.
9.3 Control-Flow Diversity
PartiSan partitions the run time of the protected program using control-ﬂow
diversity. Prior work has explored the use of control-ﬂow diversity for security
purposes. One such work, Isomeron [3], is a defensive technique that defeats just-
in-time return-oriented-programming (JIT-ROP) attacks [18]. Isomeron creates
diversiﬁed clones of the program’s functions and switches randomly between
functions on every function call and return statement. Even with precise knowl-
edge of the gadget locations, an attacker cannot mount a reliable JIT-ROP
attack, as Isomeron might transfer control ﬂow to a non-intended location after
every execution of a gadget.
Crane et al. describe how they used control-ﬂow diversity to mitigate cache-
based side-channel attacks [2]. Crane et al. create multiple variants of program
functions and applies diﬀerent diversifying transformations to each variant. The
transformations are designed to preserve the semantics of the code, but obscure
the code’s memory access patterns (i.e., data access locations and execution
trace). Essentially, the technique adds noise to the observable leakage in the
shared cache, which raises the diﬃculty for the adversary.
10 Conclusion
We present PartiSan, a run-time partitioning technique that increases the per-
formance and ﬂexibility of sanitized programs. PartiSan allows developers to
ship a single sanitizer-enabled binary without having to commit to either the
fraction of time spent sanitizing on a given target, nor the type of sanitization
employed. Speciﬁcally, PartiSan uses run-time partitioning controlled by tunable
policies. We have explored three simple policies and expect future developers to
deﬁne additional, application and domain-speciﬁc ones. Our experiments show
that, using our expected-cost policy, PartiSan reduces performance overheads of
the two popular sanitizers, ASan and UBSan, by 68% and 76% respectively. We
also demonstrate how PartiSan can improve fuzzing eﬃciency. When integrated
with libFuzzer, PartiSan consistently increases fuzzing throughput which leads
to improved coverage and more bugs found.
PartiSan’s dynamic partitioning mechanism enables adaptive overhead
thresholds and probabilistic bug detection; neither of which are supported by
static partitioning mechanisms presented in previous work. Hence, PartiSan is
able to extend the usage scenarios of sanitizers to a much wider group of testers
and their respective program inputs, leading to the exploration of a greater num-
ber of program paths. This will enable developers to catch more errors early,
reducing the number of vulnerabilities in released software.
Acknowledgement. We would like to thank Jonas Wagner for his advice and pointing
out useful previous work. We also would like to thank the anonymous reviewers for their
valuable feedback.
This material is based upon work partially supported by the Defense Advanced
Research Projects Agency (DARPA) under contracts FA8750-15-C-0124 and FA8750-
15-C-0085, by the United States Oﬃce of Naval Research (ONR) under contract
PartiSan: Fast and Flexible Sanitization via Run-Time Partitioning
421
N00014-17-1-2782, and by the National Science Foundation under awards CNS-1619211
and CNS-1513837.
Any opinions, ﬁndings, and conclusions or recommendations expressed in this mate-
rial are those of the authors and do not necessarily reﬂect the views of the Defense
Advanced Research Projects Agency (DARPA) or its Contracting Agents, the Oﬃce
of Naval Research or its Contracting Agents, the National Science Foundation, or any
other agency of the U.S. Government.
The authors also gratefully acknowledge a gift from Oracle Corporation.
References
1. Biswas, P., et al.: Venerable variadic vulnerabilities vanquished. In: 26th USENIX
Security Symposium. SSYM 2017. USENIX Association, Vancouver (2017, to
appear)
2. Crane, S., Homescu, A., Brunthaler, S., Larsen, P., Franz, M.: Thwarting cache
side-channel attacks through dynamic software diversity. In: 22nd Annual Network
and Distributed Systems Security Symposium. NDSS 2015. Internet Society, San
Diego (2015)
3. Davi, L., Liebchen, C., Sadeghi, A.R., Snow, K.Z., Monrose, F.: Isomeron: code
randomization resilient to (just-in-time) return-oriented programming. In: 22nd
Annual Network and Distributed Systems Security Symposium. NDSS 2015. Inter-
net Society, San Diego (2015)
4. Google: Fuzzer test suite (2018). https://github.com/google/fuzzer-test-suite
5. Haller, I., et al.: TypeSan: practical type confusion detection. In: 23rd ACM
SIGSAC Conference on Computer and Communications Security. CCS 2016, pp.
517–528. ACM, New York (2016)
6. International Organization for Standardization: Information technology - program-
ming languages - C. Standard, International Organization for Standardization,
Geneva, CH, December 2011
7. Jeon, Y., Biswas, P., Carr, S., Lee, B., Payer, M.: HexType: eﬃcient detection
of type confusion errors for C++. In: Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security, pp. 2373–2387. ACM,
New York (2017)
8. Koppen, G.: Discontinuing the hardened Tor browser series (2017). https://blog.
torproject.org/blog/discontinuing-hardened-tor-browser-series
9. Kurmus, A., Zippel, R.: A tale of two kernels: towards ending kernel hardening
wars with split kernel. In: 21st ACM SIGSAC Conference on Computer and Com-
munications Security. CCS 2014, pp. 1366–1377. ACM, New York (2014)
10. Lattner, C., Adve, V.: LLVM: a compilation framework for lifelong program anal-
ysis & transformation. In: 2004 International Symposium on Code Generation and
Optimization. CGO 2004, p. 75. IEEE Computer Society, Palo Alto (2004)
11. Lee, B., Song, C., Kim, T., Lee, W.: Type casting veriﬁcation: stopping an emerging
attack vector. In: 24th USENIX Security Symposium. SSYM 2015, pp. 81–96.
USENIX Association, Austin (2015)
12. Lee, J., et al.: Taming undeﬁned behavior in LLVM. In: 38th annual ACM SIG-
PLAN Conference on Programming Language Design and Implementation. PLDI
2017. ACM, Barcelona, June 2017
13. LLVM Developers: Undeﬁned behavior sanitizer (2017). https://clang.llvm.org/
docs/UndeﬁnedBehaviorSanitizer.html
422
J. Lettner et al.
14. LLVM Developers: libFuzzer (2018). https://llvm.org/docs/LibFuzzer.html
15. National Institute of Standards and Technology: National vulnerability database
(2017). https://nvd.nist.gov
16. Serebryany, K., Bruening, D., Potapenko, A., Vyukov, D.: AddressSanitizer: a fast
address sanity checker. In: 2012 USENIX Annual Technical Conference. ATC 2012,
p. 28. USENIX Association, Berkeley (2012)
17. Serebryany, K., Iskhodzhanov, T.: ThreadSanitizer: data race detection in practice.
In: 2009 Workshop on Binary Instrumentation and Applications. WBIA 2009, pp.
62–71. ACM, New York (2009)
18. Snow, K.Z., Monrose, F., Davi, L., Dmitrienko, A., Liebchen, C., Sadeghi, A.R.:
Just-in-time code reuse: on the eﬀectiveness of ﬁne-grained address space layout
randomization. In: 2013 IEEE Symposium on Security and Privacy. SP 2013, pp.
574–588. IEEE, San Francisco (2013)
19. Song, D., et al.: SoK: sanitizing for security. In: 40th IEEE Symposium on Security
and Privacy. SP 2019. IEEE Computer Society, San Francisco (2019)
20. Standard Performance Evaluation Corporation: SPEC CPU 2006 (2017). https://
www.spec.org/cpu2006
21. Stepanov, E., Serebryany, K.: MemorySanitizer: fast detector of uninitialized mem-
ory use in C++. In: 2015 IEEE/ACM International Symposium on Code Genera-
tion and Optimization. CGO 2015, pp. 46–55. IEEE, San Francisco (2015)
22. Wagner, J., Kuznetsov, V., Candea, G., Kinder, J.: High system-code security with
low overhead. In: 2015 IEEE Symposium on Security and Privacy. SP 2015, pp.
866–879. IEEE Computer Society, Washington, D.C. (2015)
23. Wagner, J.B.: Elastic program transformations: automatically optimizing the relia-
bility/performance trade-oﬀ in systems software. Ph.D. thesis, Ecole Polytechnique
Federale de Lausanne (2017)
24. Xu, M., Lu, K., Kim, T., Lee, W.: Bunshin: compositing security mechanisms
through diversiﬁcation. In: 2017 USENIX Annual Technical Conference. ATC 2017,
pp. 271–283. USENIX Association (2017)