instruction appears before the branch; Case 2 relies on
the interrupt instruction; Case 3 relies on instruction ret;
Case 4 exploits hidden branch instructions. Besides, they
used a special rule to detect polymorphic exploit code
which contains a loop. Although they mentioned that the
228
Security ’06: 15th USENIX Security Symposium
USENIX Association
above rules are initial sets and may require updating with
time, it is always possible for attackers to bypass those
pre-known rules. Moreover, more rules mean more over-
head and longer latency in ﬁltering packets. In contrast,
SigFree exploits a different data ﬂow analysis technique,
which is much harder for exploit code to evade.
3 SigFree Overview
3.1 Basic Deﬁnitions and Notations
This section provides the deﬁnitions that will be used
in the rest of the paper.
Deﬁnition 1 (instruction sequence) An instruction se-
quence is a sequence of CPU instructions which has one
and only one entry instruction and there exist at least one
execution path from the entry instruction to any other in-
struction in this sequence.
An instruction sequence is denoted as si, where i is
the entry address of the instruction sequence. A frag-
ment of a program in machine language is an instruction
sequence, but an instruction sequence is not necessarily a
fragment of a program. In fact, we may distill instruction
sequences from any binary strings. This poses the fun-
damental challenge to our research goal. Figure 2 shows
four instruction sequences distilled from a substring of a
GIF ﬁle. These four instruction sequences are not frag-
ments of a real program, although they may also be ex-
ecuted in a speciﬁc CPU. Below we call them random
instruction sequences, whereas use the term binary exe-
cutable code to refer to a fragment of a real program in
machine language.
Deﬁnition 2 (instruction ﬂow graph) An instruction ﬂow
graph (IFG) is a directed graph G = (V, E) where each
node v ∈ V corresponds to an instruction and each edge
e = (vi, vj) ∈ E corresponds to a possible transfer of
control from instruction vi to instruction vj.
Unlike traditional control ﬂow graph (CFG), a node
of an IFG corresponds to a single instruction rather than
a basic block of instructions. To completely model the
control ﬂow of an instruction sequence, we further ex-
tend the above deﬁnition.
Deﬁnition 3 (extended instruction ﬂow graph) An ex-
tended instruction ﬂow graph (EIFG) is a directed graph
G = (V, E) which satisﬁes the following properties:
each node v ∈ V corresponds to an instruction, an
illegal instruction, or an external address; each edge
e = (vi, vj) ∈ E corresponds to a possible transfer of
control from instruction vi to instruction vj, to illegal in-
struction vj, or to an external address vj.
The reason that we deﬁne IFG and EIFG is to model
two special cases which CFG cannot model (the differ-
ence will be very evident in the following sections). First,
in an instruction sequence, control may be transferred
from an instruction node to an illegal instruction node.
For example, in instruction sequence s08 in Figure 2, the
transfer of control is from instruction “lods [ds:esi]” to an
illegal instruction at address 0F . Second, control may be
transferred from an instruction node to an external ad-
dress node. For example, instruction sequence s00 in
Figure 2 has an instruction “jmp ADAAC3C2”, which
jumps to external address ADAAC3C2.
3.2 Attack Model
An attacker exploits a buffer overﬂow vulnerability of
a web server by sending a crafted request, which con-
tains a malicious payload. Figure 3 shows the format of
a HTTP request. There are several HTTP request meth-
ods among which GET and POST are most often used
by attackers. Although HTTP 1.1 does not allow GET
to have a request body, some web servers such as Mi-
crosoft IIS still dutifully read the request-body according
to the request-header’s instructions (the CodeRed worm
exploited this very problem).
The position of a malicious payload is determined by
the exploited vulnerability. A malicious payload may be
embedded in the Request-URI ﬁeld as a query parame-
ter. However, as the maximum length of Request-URI
is limited, the size of a malicious payload, hence the be-
havior of such a buffer overﬂow attack, is constrained. It
is more common that a buffer overﬂow attack payload is
embedded in Request-Body of a POST method request.
Technically, a malicious payload may also be embedded
in Request-Header, although this kind of attacks have not
been observed yet. In this work, we assume an attacker
can use any request method and embed the malicious
code in any ﬁeld.
Request -
- Method
Request -URI
-
HTTP- Version
-
Request - Header
-
*
* A blank line *
Request -Body
-
Figure 3: A HTTP Request. A malicious payload is nor-
mally embedded in Request-URI or Request-Body
3.3 Assumptions
Accordingly, we name the types of nodes in an EIFG
instruction node, illegal instruction node, and external
address node.
In this paper, we focus on buffer overﬂow attacks
whose payloads contain executable code in machine lan-
guage, and we assume normal requests do not contain
USENIX Association
Security ’06: 15th USENIX Security Symposium
229
string bytes
address
instruction sequence S00
(start from address 00)
instruction sequence S01
(start from address 01)
instruction sequence S02
(start from address 02)
instruction sequence 5
(start from address 08)
&
string bytes
address
00
01
02
03
04
05
06
07
08
09
0A
0B
0C
0D
0E
0F
00
D5
3F
00
AD
83
5F
87
C0
5F
E9
B3
43
AA
AD
8F
add ch,dl
aas
aad 3f
aas
add [ebp+C0875F83],ch
add [ebp+C0875F83],ch
add [ebp+C0875F83],ch
pop edi
pop edi
pop edi
jmp ADAA43C2
jmp ADAA43C2
jmp ADAA43C2
00
01
02
03
04
05
06
07
08
09
0A
0B
0C
0D
0E
0F
00
D5
3F
00
AD
83
5F
87
C0
5F
E9
B3
43
AA
AD
8F
rcr [edi-17],B3
inc ebi
stos [es:edi]
lods [ds:esi]
(illegal instruction)
Figure 2: Instruction sequences distilled from a substring of a GIF ﬁle. We assign an address to every byte of the string. Instruction
sequences s00, s01, s02 and s08 are distilled by disassembling the string from addresses 00, 01, 02 and 08, respectively.
executable machine code. A normal request may contain
any data, parameters, or even a SQL statement. Note that
although SQL statements are executable in the applica-
tion level, they cannot be executed directly by a CPU.
As such, SQL statements are not viewed as executable in
our model. Application level attacks such as data manip-
ulation and SQL injection are out of the scope.
Though SigFree is a generic technique which can be
applied to any instruction set, for concreteness we as-
sume the web server runs the Intel IA32 instruction set,
the most popular instruction set running inside a web
server today.
3.4 Architecture
Figure 4 depicts the architecture of SigFree and it is
comprised of the following modules:
SigFree
HTTP
Requests
URI
Decoder
ASCII
Filter
Instruction
Sequences
Distiller
Instruction
Sequences
Analyzer
Pass
(Requests only
contains pure data)
Block
(Requests contain
executable codes)
Pass (Requests are printable ASCII)
Figure 4: The architecture of SigFree
URI decoder. The speciﬁcation for URLs [12] limits
the allowed characters in a Request-URI to only a subset
of the ASCII character set. This means that the query
parameters of a request-URI beyond this subset should
be encoded [12]. Because a malicious payload may be
embedded in the request-URI as a request parameter, the
ﬁrst step of SigFree is to decode the request-URI.
ASCII Filter. Malicious executable code are normally
binary strings. In order to guarantee the throughput and
response time of the protected web system, if the query
parameters of the request-URI and request-body of a re-
quest are both printable ASCII ranging from 20-7E in
hex, SigFree allows the request to pass (In Section 7.2,
we will discuss a special type of executable codes called
alphanumeric shellcodes [45] that actually use printable
ASCII) .
Instruction sequences distiller (ISD). This module dis-
tills all possible instruction sequences from the query pa-
rameters of Request-URI and Request-Body (if the re-
quest has one).
Instruction sequences analyzer (ISA). Using all the
instruction sequences distilled from the instruction se-
quences distiller as the inputs, this module analyzes these
instruction sequences to determine whether one of them
is (a fragment of) a program.
4 Instruction Sequence Distiller
This section ﬁrst describes an effective algorithm to
distill instruction sequences from http requests, followed
by several excluding techniques to reduce the processing
overhead of instruction sequences analyzer.
4.1 Distilling Instruction Sequences
To distill an instruction sequence, we ﬁrst assign an
address to every byte of a request. Then, we disassem-
ble the request from a certain address until the end of
the request is reached or an illegal instruction opcode is
encountered. There are two traditional disassembly al-
gorithms: linear sweep and recursive traversal [38, 46].
The linear sweep algorithm begins disassembly at a cer-
tain address, and proceeds by decoding each encountered
instruction. The recursive traversal algorithm also begins
disassembly at a certain address, but it follows the con-
trol ﬂow of instructions.
In this paper, we employ the recursive traversal algo-
rithm, because it can obtain the control ﬂow information
230
Security ’06: 15th USENIX Security Symposium
USENIX Association
Intuitively, to get all
during the disassembly process.
possible instruction sequences from a N -byte request,
we simply execute the disassembly algorithm N times
and each time we start from a different address in the re-
quest. This gives us a set of instruction sequences. The
running time of this algorithm is O(N 2).
One drawback of the above algorithm is that the same
instructions are decoded many times. For example, in-
struction “pop edi” in Figure 2 is decoded many times by
this algorithm. To reduce the running time, we design
a memorization algorithm [20] by using a data struc-
ture, which is an EIFG deﬁned earlier, to represent the
instruction sequences. To distill all possible instruction
sequences from a request is simply to create the EIFG
for the request. An EIFG is used to represent all pos-
sible transfers of control among these instructions.
In
addition, we use an instruction array to represent all pos-
sible instructions in a request. To traverse an instruction
sequence, we simply traverse the EIFG from the entry
instruction of the instruction sequence and fetch the cor-
responding instructions from the instruction array. Fig-
ure 5 shows the data structure for the request shown in
Figure 2. The details of the algorithm for creating the
data structure are described in Algorithm 1. Clearly, the
running time of this algorithm is O(N ), which is optimal
as each address is traversed only once.
$
%
!
'
=
"
#
>
&
@
?
A
B
00
0F
add ch,dl
aad 3F
aas
add [ebp+C0875F83],ch
lods [ds:esi]
sbb [ds:edi-79],-40
pop edi
xchg eax,eax
rcr [ds:edi-17],B3
pop edi
jmp ADAA43C2
mov bl,43
inc ebx
stos [es:edi]
lods [ds:esi]
illegal instruction
(a)
(b)
Figure 5: Data structure for the instruction sequences distilled
from the request in Figure 2.
(a) Extended instruction ﬂow
graph. Circles represent instruction nodes; triangles represent
external addresses; rectangles represent illegal instructions. (b)
The array of all possible instructions in the request.
4.2 Excluding Instruction Sequences
The previous step may output many instruction se-
quences at different entry points. Next we exclude some
of them based on several heuristics. Here excluding
an instruction sequence means that the entry of this se-
quence is not considered as the real entry for the embed-
ded code (if any).
Algorithm 1 Distill all instruction sequences from a re-
quest
initialize EISG G and instruction array A to empty
for each address i of the request do
add instruction node i to G
i ← the start address of the request
while i <= the end address of the request do
inst ← decode an instruction at i
if inst is illegal then
A[i] ← illegal instruction inst
set type of node i “illegal node” in G
else
A[i] ← instruction inst
if inst is a control transfer instruction then
for each possible target t of inst do
if target t is an external address then
add external address node t to G
add edge e(node i, node t) to G
else
add edge e(node i, node i + inst.length) to G
i ← i + 1
The fundamental rule in excluding instruction se-
quences is not to affect the decision whether a request
contains code or not. This rule can be translated into the
following technical requirements: if a request contains
a fragment of a program, the fragment must be one of
the remaining instruction sequences or a subsequence of
a remaining instruction sequence, or it differs from a re-
maining sequence only by few instructions.
Step 1 If instruction sequence sa is a subsequence of
instruction sequence sb, we exclude sa. The rationale for
excluding sa is that if sa satisﬁes some characteristics
of programs, sb also satisﬁes these characteristics with a
high probability.
This step helps exclude lots of instruction sequences
since many distilled instruction sequences are subse-
quences of the other distilled instruction sequences. For
example, in Figure 5(a), instruction sequence s02, which
is a subsequence of instruction sequence s00, can be ex-
cluded. Note that here we only exclude instruction se-
quence s02 rather than remove node v02. Similarly, in-
struction sequences s03,s05, s07, s09,s0a,s0c,s0d and s0e
can be excluded.
Step 2 If instruction sequence sa merges to instruction
sequence sb after a few instructions (e.g., 4 in our exper-
iments) and sa is no longer than sb, we exclude sa. It is
reasonable to expect that sb will preserve sa’s character-