where the size of group Zp depends on the security
parameter (cid:21). The hash function is collision-resistent if
H ((cid:21)) = maxA{AdvCOLA;H ((cid:21))} is negligible for any
AdvCOL
adversary A.
• a secure key derivation function.
A key derivation function D : GT → {0; 1}k on a ran-
dom input outputs a k-bit string which is computation-
ally indistinguishable from a random string. We deﬁne
the advantage of an adversary A in distinguishing two
distributions as
AdvKDFA;D ((cid:21)) = Pr[A(1(cid:21); D(x)) = 1] − Pr[A(1(cid:21); r) = 1]
where x ∈ GT ; r ∈R {0; 1}k and (cid:21) is the security pa-
rameter determining k. So the key derivation function
((cid:21)) = maxA{AdvKDFA;D ((cid:21))} is
is KDF-secure if AdvKDF
negligible for any adversary A.
D
2.4 Receiver-Bounded Online/Ofﬂine Identity-
Based Encryption
A receiver-bounded online/oﬄine identity-based encryption
(RB-OOIBE) scheme consists of the following algorithms:
• Setup(1(cid:21)): on input the security parameter 1(cid:21), out-
put the public key param and master secret key M K.
• KeyGen(param; M K; id): on input the public pa-
rameter param, the master secret key M K and an
identity id, output the secret key skid.
• Oﬀ-Encrypt(param; st): on input the public param-
eter param and a state table st, output the updated
state table st.
• On-Encrypt(param; id; m; st): on input the public
parameter param, an identity id, a message m and a
state table st, output the ciphertext C and the (up-
dated) state table st, or ‘⊥’.
• Decrypt(param; skid; C): on input the public param-
eter param, the secret key skid, a ciphertext C, output
the plaintext m or ‘⊥’.
Note that the oﬄine encryption should be performed by
powerful devices in the oﬄine phase. In the online phase,
one can arbitrarily choose a pre-computed oﬄine ciphertext
from the state table and employ it in the online encryption.
One oﬄine ciphertext can be dedicated to one recipient only.
The encrypter should maintain the state table for recording
the usage of oﬄine ciphertexts.
Now we deﬁne the CCA security for RB-OOIBE.
Deﬁnition 2. The chosen-ciphertext security of an RB-
OOIBE scheme is deﬁned by the following game with secu-
rity parameter (cid:21) between an adversary A and a challenger.
1. Setup. Perform Setup(1(cid:21)) to get (param; M K) and
give param to A.
2. Query phase 1. A may issue queries to the following
oracles.
(a) Extract(id): return
skid ← KeyGen(param; M K; id).
(b) Encrypt(id; m): return the ciphertext C where
(C; st) ← On-Encrypt(param; id; m; st) , st ←
Oﬀ-Encrypt(param; st) and st is the initially
empty state table.
4
(c) Decrypt(id; C): return
m ← Decrypt(param; skid; C), where skid ←
KeyGen(param; M K; id).
3. Challenge. A presents (m0; m1). Return the challenge
ciphertext C
∗
to A where
∗
; st) ← On-Encrypt(param; id; m(cid:12); st); (cid:12) ∈R {0; 1}
(C
and st ← Oﬀ-Encrypt(param; st).
4. Query phase 2. A continues making queries as in Query
to the decryption
phase 1, except that A can’t issue C
oracle.
∗
5. Guess. A outputs the guess (cid:12)
′ ∈ {0; 1}. We say A wins
the game if (cid:12)
= (cid:12).
′
′
The advantage of A for a scheme Π is deﬁned as AdvCCAA;(cid:5) ((cid:21)) =
| Pr[(cid:12)
= (cid:12)] − 1
|. An RB-OOIBE scheme is IND-ID-CCA-
((cid:21)) = maxA{AdvCCAA;(cid:5) ((cid:21))} is negligible for
secure if AdvCCA
any adversary A.
(cid:5)
2
We also deﬁne a weaker model: selective-ID CCA security
(IND-sID-CCA). The selective-ID security is deﬁned in the
same way as full CCA security except that A has to decide
which id it wants to attack in the beginning of the game.
As described before, the selective-ID is not so weak in case
only hundreds of identities are used.
Note that our construction and all previous OOIBE schemes
have to trust the oﬄine ciphertext generator. That is, the
ciphertexts sent by the sensor nodes can be always decrypted
by the owner of them.
3. CONSTRUCTION
We introduce our main scheme Π in this section. The scheme
is based on Boneh and Boyen’s IBE [3].
• Setup(1(cid:21)). Randomly generate a prime p, two groups
G; GT of order p, a bilinear map e and generators
g; g2; h1; h2 ∈ G. Compute g1 = g(cid:11) where (cid:11) ∈R Zp.
Choose a key derivation function D : GT → {0; 1}k,
where k is the block size of a symmetric key encryption
SE=(SEnc,SDec), and a hash function H : {0; 1}∗ →
Zp. Output the public parameter and master secret
key:
param = (g; g1; g2; h1; h2; H; D); M K = (cid:11):
• KeyGen(param; M K; id). Pick a random value r ∈
Zp. Compute the secret key for id as
1 h1)r; gr):
skid = (g(cid:11)
2 (gid
• Oﬀ-Encrypt(param; st). Randomly choose s; ˆa; ˆb; ˆc ∈R
Zp and compute
(c1; c2; c3; c4; c5) = (e(g1; g2)s; gs; (g^a
1 h1)s; (g
and K = D(c1). Let C
an oﬄine ciphertext. Append (∗; C
′
= (K; c2; c3; c4; c5; ˆa; ˆb; ˆc
) to st.
′
^b
1h2)s; g^cs
1 )
−1) be
′
) ∈ st.
• On-Encrypt(param; id; m; st). Get C
try (id; C
domly pick an entry (∗; C
(id; C
‘⊥’. Let C
′
′
). If there is no free entry (∗; C
= (K; c2; c3; c4; c5; ˆa; ˆb; ˆc
If there exists no such C
from the en-
, ran-
) from st and replace it with
) on st, return
′
′
′
′
−1). Compute
−1(id−ˆa) and t2 = ˆc
−1((cid:27)−ˆb);
˜c1 = SEncK (m);
t1 = ˆc
where (cid:27) = H(c2; c3; c4; c5; t1). Output the ﬁnal cipher-
text
C = (˜c1; c2; c3; c4; c5; t1; t2)
= (SEncK (m); gs; (g^a
1 h1)s; (g
^b
1h2)s; g^cs
1 ;
−1(id − ˆa); ˆc
ˆc
and the updated state table st.
−1((cid:27) − ˆb))
• Decrypt(P aram; skid; C). Let C = (˜c1; c2; c3; c4; c5; t1; t2)
and skid = (d1; d2). Compute (cid:27) = H(c2; c3; c4; c5; t1).
Check that
e(c4ct2
5 ; g) ?= e(c2; g(cid:27)
1 h2):
If the equation holds, output ‘⊥’. Otherwise, compute
c1 = e(c2; d1)=e(c3ct1
5 ; d2) and K = D(c1):
Output the message
m = SDecK (˜c1):
3.1 Security
We prove that the scheme is IND-sID-CCA secure.
Theorem 1. Our scheme Π is IND-sID-CCA-secure as-
suming the decision BDH assumption holds in G, the sym-
metric encryption scheme SE=(SEnc,SDec) with block size k
is IND-CCA secure, the hash function H is collision-resistant
and the key derivation function D : GT → {0; 1}k is secure.
More precisely, we have
((cid:21)) ≤ AdvDDHG
((cid:21)) + AdvKDF
((cid:21)) + AdvCCA
AdvCCA
SE
D
(cid:5)2
+AdvCOL
H ((cid:21)) +
((cid:21))
qD
p
where (cid:21) is the security parameter and qD is the maximum
number of queries to the decryption oracle.
Proof. Suppose there is an adversary A breaking Π with
non-negligible advantage. Given a random decision BDH
instance (g; ga; gb; gc; Z), where Z is either e(g; g)abc or a
random element of GT , we construct another algorithm B
breaking the decision BDH as follows.
• Init. A chooses an identity id
∗ ∈ Zp that it intends
to attack.
• Setup. B sets g1 = ga, g2 = gb and g3 = gc and
chooses a hash function H : {0; 1}∗ → Zp and a key
derivation function D : GT → {0; 1}k. It then picks
random values (cid:21)1; (cid:21)2 ∈ Zp and deﬁnes h1 = g
g(cid:21)1
−(cid:27)
−k1;id(cid:3) k3;id(cid:3)
and h2 = g
,
1
; k1;id(cid:3) ) and k1;id(cid:3) ; k2;id(cid:3) ; k3;id(cid:3)
g(cid:21)2
3 g
∈R Zp. The parameter (g; g1; g2; h1; h2; H; D) is then
sent to A. Since g; g1; g2 are randomly chosen, and
= H(g3; g(cid:21)1
3 g
−k2;id(cid:3) k3;id(cid:3)
g(cid:21)2 , where (cid:27)
; gk3;id(cid:3)
−id
1
∗
(cid:3)
(cid:3)
h1; h2 are uniformly random, the distribution of the
parameter is identical to that in the actual construc-
tion.
• Query Phase 1. B answers the following queries.
1. Extract(id): for any id ̸= id
∗
, B chooses a ran-
dom value r ∈ Zp and sets the private key for id
as
(gid
1 h1)r; g
(cid:0)1
id(cid:0)id(cid:3)
2
gr):
), we can see that
(gid−id
(cid:0)(cid:21)1
id(cid:0)id(cid:3)
2
1
(cid:3)
g(cid:21)1 )r
(cid:0)(cid:21)1
id(cid:0)id(cid:3)
skid = (d1; d2) = (g
2
Let ˜r = r − b=(id − id
∗
(cid:0)(cid:21)1
id(cid:0)id(cid:3)
d1 = g
2
(gid
1 h1)r = g
(cid:3)
g(cid:21)1 )r− b
2 (gid−id
(cid:0)1
1
id(cid:0)id(cid:3)
= ga
= ga
2 (gid
1 h1)~r;
id(cid:0)id(cid:3)
d2 = g
2
gr = gr− b
id(cid:0)id(cid:3)
= g ~r:
2. Encrypt(id; m): for id ̸= id
∗
Since ˜r is uniform in Zp, the key is correctly dis-
tributed.
, B chooses a ﬁxed
random value s for id, and computes the cipher-
∗
text as in the actual construction. For id = id
,
B computes the ciphertext as
c2 = g3;
˜c1 = SEncK (m);
−k2;id(cid:3) k3;id(cid:3)
c3 = g(cid:21)1
3 g
c5 = gk3;id(cid:3)
c4 = g(cid:21)2
3 g
;
;
−k1;id(cid:3) k3;id(cid:3)
;
t1 = k1;id(cid:3) ;
t2 = k2;id(cid:3) ;
where k1;id(cid:3) ; k2;id(cid:3) ; k3;id(cid:3) are chosen in Setup phase
and K = D(Z). We can see that if Z = e(g; g)abc =
e(g1; g2)c, this is a valid encryption of m.
3. Decrypt(id; C): let C = (˜c1; c2; c3; c4; c5; t1; t2).
B ﬁrst checks the validity of C as in the actual
construction. If C doesn’t pass the equation, B
responses ‘⊥’. Otherwise, for id ̸= id
, B gen-
∗
erates id’s secret key as in Extract oracle, and
, B ﬁrst computes
∗
then decrypts C. For id = id
(cid:27) = H(c2; c3; c4; c5; t1). Consider the following
case:
: B computes the private key for (id; (cid:27))
– (cid:27) ̸= (cid:27)
∗
as
(d1; d2; d3)
(cid:0)(cid:21)2
(cid:27)(cid:0)(cid:27)(cid:3)
2
g(cid:21)1r1 (g(cid:27)−(cid:27)
(cid:3)
1
g(cid:21)2 )r2 ; gr1 ; g
gr2 );
= (g
where r1; r2 ∈R Zp. We can see that when