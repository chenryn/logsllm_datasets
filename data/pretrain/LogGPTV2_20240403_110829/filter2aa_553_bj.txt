些早期的编译器没有ctype.h系列）。
443
7.4 一个统计单词的程序
现在，我们可以编写一个统计单词数量的程序（即，该程序读取并报告
单词的数量）。该程序还可以计算字符数和行数。先来看看编写这样的程序
要涉及那些内容。
首先，该程序要逐个字符读取输入，知道何时停止读取。然后，该程序
能识别并计算这些内容：字符、行数和单词。据此我们编写的伪代码如下：
读取一个字符
当有更多输入时
递增字符计数
如果读完一行，递增行数计数
如果读完一个单词，递增单词计数
读取下一个字符
前面有一个输入循环的模型：
while ((ch = getchar()) != STOP)
{
...
}
这里，STOP表示能标识输入末尾的某个值。以前我们用过换行符和句
点标记输入的末尾，但是对于一个通用的统计单词程序，它们都不合适。我
们暂时选用一个文本中不常用的字符（如，|）作为输入的末尾标记。第8章
中会介绍更好的方法，以便程序既能处理文本文件，又能处理键盘输入。
444
现在，我们考虑循环体。因为该程序使用getchar()进行输入，所以每次
迭代都要通过递增计数器来计数。为了统计行数，程序要能检查换行字符。
如果输入的字符是一个换行符，该程序应该递增行数计数器。这里要注意
STOP 字符位于一行的中间的情况。是否递增行数计数？我们可以作为特殊
行计数，即没有换行符的一行字符。可以通过记录之前读取的字符识别这种
情况，即如果读取时发现 STOP 字符的上一个字符不是换行符，那么这行就
是特殊行。
最棘手的部分是识别单词。首先，必须定义什么是该程序识别的单词。
我们用一个相对简单的方法，把一个单词定义为一个不含空白（即，没有空
格、制表符或换行符）的字符序列。因此，“glymxck”和“r2d2”都算是一个单
词。程序读取的第 1 个非空白字符即是一个单词的开始，当读到空白字符时
结束。判断非空白字符最直接的测试表达式是：
c != ' ' && c != '\n' && c != '\t' /* 如果c不是空白字符，该表达式为真*/
检测空白字符最直接的测试表达式是：
c == ' ' || c == '\n' || c == '\t' /*如果c是空白字符，该表达式为真*/
然而，使用ctype.h头文件中的函数isspace()更简单，如果该函数的参数
是空白字符，则返回真。所以，如果c是空白字符，isspace(c)为真；如果c不
是空白字符，!isspace(c)为真。
要查找一个单词里是否有某个字符，可以在程序读入单词的首字符时把
一个标记（名为 inword）设置为1。也可以在此时递增单词计数。然后，只
要inword为1（或true），后续的非空白字符都不记为单词的开始。下一个空
白字符，必须重置标记为0（或false），然后程序就准备好读取下一个单
词。我们把以上分析写成伪代码：
如果c不是空白字符，且inword为假
设置inword为真，并给单词计数
445
如果c是空白字符，且inword为真
设置inword为假
这种方法在读到每个单词的开头时把inword设置为1（真），在读到每
个单词的末尾时把inword设置为0（假）。只有在标记从0设置为1时，递增
单词计数。如果能使用_Bool类型，可以在程序中包含stdbool.h头文件，把
inword的类型设置为bool，其值用true和false表示。如果编译器不支持这种
用法，就把inword的类型设置为int，其值用1和0表示。
如果使用布尔类型的变量，通常习惯把变量自身作为测试条件。如下所
示：
用if (inword)代替if (inword == true)
用if (!inword)代替if (inword == false)
可以这样做的原因是，如果 inword为true，则表达式 inword == true为
true；如果 inword为false，则表达式inword == true为false。所以，还不如直
接用inword作为测试条件。类似地，!inword的值与表达式inword == false的
值相同（非真即false，非假即true）。
程序清单7.7把上述思路（识别行、识别不完整的行和识别单词）翻译
了成C代码。
程序清单7.7 wordcnt.c程序
// wordcnt.c -- 统计字符数、单词数、行数
#include 
#include      // 为isspace()函数提供原型
#include     // 为bool、true、false提供定义
446
#define STOP '|'
int main(void)
{
char c;        // 读入字符
char prev;       // 读入的前一个字符
long n_chars = 0L;// 字符数
int n_lines = 0;    // 行数
int n_words = 0;    // 单词数
int p_lines = 0;    // 不完整的行数
bool inword = false;  // 如果c在单词中，inword 等于 true
printf("Enter text to be analyzed (| to terminate):\n");
prev = '\n';      // 用于识别完整的行
while ((c = getchar()) != STOP)
{
n_chars++;     // 统计字符
if (c == '\n')
n_lines++;   // 统计行
if (!isspace(c) && !inword)
{
447
inword = true;// 开始一个新的单词
n_words++;   // 统计单词
}
if (isspace(c) && inword)
inword = false;  // 打到单词的末尾
prev = c;     // 保存字符的值
}
if (prev != '\n')
p_lines = 1;
printf("characters = %ld, words = %d, lines = %d, ",
n_chars, n_words, n_lines);
printf("partial lines = %d\n", p_lines);
return 0;
}
下面是运行该程序后的一个输出示例：
Enter text to be analyzed (| to terminate):
Reason is a
powerful servant but
an inadequate master.
448
|
characters = 55, words = 9, lines = 3, partial lines = 0
该程序使用逻辑运算符把伪代码翻译成C代码。例如，把下面的伪代
码：
如果c不是空白字符，且inword为假
翻译成如下C代码：
if (!isspace(c) &&!inword)
再次提醒读者注意，!inword 与 inword == false 等价。上面的整个测试
条件比单独判断每个空白字符的可读性高：
if (c != ' ' && c != '\n' && c != '\t' && !inword)
上面的两种形式都表示“如果c不是空白字符，且如果c不在单词里”。如
果两个条件都满足，则一定是一个新单词的开头，所以要递增n_words。如
果位于单词中，满足第1个条件，但是inword为true，就不递增 
n_word。当
读到下一个空白字符时，inword 被再次设置为 false。检查代码，查看一下
如果单词之间有多个空格时，程序是否能正常运行。第 8 章讲解了如何修正
这个问题，让该程序能统计文件中的单词量。
449
7.5 条件运算符：?:
C提供条件表达式（conditional expression）作为表达if else语句的一种
便捷方式，该表达式使用?:条件运算符。该运算符分为两部分，需要 3 个运
算对象。回忆一下，带一个运算对象的运算符称为一元运算符，带两个运算
对象的运算符称为二元运算符。以此类推，带 3 个运算对象的运算符称为三
元运算符。条件运算符是C语言中唯一的三元运算符。下面的代码得到一个
数的绝对值：
x = (y  b) ? a : b;
450
如果a大于b，那么将max设置为a；否则，设置为b。
通常，条件运算符完成的任务用 if else 语句也可以完成。但是，使用条
件运算符的代码更简洁，而且编译器可以生成更紧凑的程序代码。
我们来看程序清单7.8中的油漆程序，该程序计算刷给定平方英尺的面
积需要多少罐油漆。基本算法很简单：用平方英尺数除以每罐油漆能刷的面
积。但是，商店只卖整罐油漆，不会拆分来卖，所以如果计算结果是1.7
罐，就需要两罐。因此，该程序计算得到带小数的结果时应该进1。条件运
算符常用于处理这种情况，而且还要根据单复数分别打印can和cans。
程序清单7.8 paint.c程序
/* paint.c -- 使用条件运算符 */
#include 
#define COVERAGE 350   // 每罐油漆可刷的面积（单位：平方英
尺）
int main(void)
{
int sq_feet;
int cans;
printf("Enter number of square feet to be painted:\n");
while (scanf("%d", &sq_feet) == 1)
{
cans = sq_feet / COVERAGE;
451
cans += ((sq_feet % COVERAGE == 0)) ? 0 : 1;
printf("You need %d %s of paint.\n", cans,
cans == 1 ? "can" : "cans");
printf("Enter next value (q to quit):\n");
}
return 0;
}
下面是该程序的运行示例：
Enter number of square feet to be painted:
349
You need 1 can of paint.
Enter next value (q to quit):
351
You need 2 cans of paint.
Enter next value (q to quit):
q
该程序使用的变量都是int类型，除法的计算结果（sq_feet 
/
COVERAGE）会被截断。也就是说， 
351/350得1。所以，cans被截断成整
数部分。如果sq_feet % COVERAGE得0，说明sq_feet被COVERAGE整除，
cans的值不变；否则，肯定有余数，就要给cans加1。这由下面的语句完成：
452
cans += ((sq_feet % COVERAGE == 0)) ? 0 : 1;
该语句把+=右侧表达式的值加上cans，再赋给cans。右侧表达式是一个
条件表达式，根据sq_feet是否能被COVERAGE整除，其值为0或1。
printf()函数中的参数也是一个条件表达式：
cans == 1 ? "can" : "cans");
如果cans的值是1，则打印can；否则，打印cans。这也说明了条件运算
符的第2个和第3个运算对象可以是字符串。
小结：条件运算符
条件运算符：?:
一般注解：
条件运算符需要3个运算对象，每个运算对象都是一个表达式。其通用
形式如下：
expression1 ? expression2 : expression3
如果expression1为真，整个条件表达式的值是expression2的值；否则，
是expression3的值。
示例：
(5 > 3) ? 1 : 2 值为1
(3 > 5) ? 1 : 2 值为2
(a > b) ? a : b 如果a >b，则取较大的值
453
7.6 循环辅助：continue和break
一般而言，程序进入循环后，在下一次循环测试之前会执行完循环体中
的所有语句。continue 和break语句可以根据循环体中的测试结果来忽略一部
分循环内容，甚至结束循环。
7.6.1 continue语句
3种循环都可以使用continue语句。执行到该语句时，会跳过本次迭代的
剩余部分，并开始下一轮迭代。如果continue语句在嵌套循环内，则只会影
响包含该语句的内层循环。程序清单7.9中的简短程序演示了如何使用
continue。
程序清单7.9 skippart.c程序
/* skippart.c -- 使用continue跳过部分循环 */
#include 
int main(void)
{
const float MIN = 0.0f;
const float MAX = 100.0f;
float score;
float total = 0.0f;
int n = 0;
float min = MAX;
454
float max = MIN;
printf("Enter the first score (q to quit): ");
while (scanf("%f", &score) == 1)
{
if (score  MAX)
{
printf("%0.1f is an invalid value.Try again: ",score);
continue;  // 跳转至while循环的测试条件
}
printf("Accepting %0.1f:\n", score);
min = (score  max) ? score : max;
total += score;
n++;
printf("Enter next score (q to quit): ");