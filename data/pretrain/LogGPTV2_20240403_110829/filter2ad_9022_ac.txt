随机填充算法可以通过将一些随机位附加到其中一个端来填充明文，但是以下攻击指出了这种简单填充的危险。假设Bob向Alice发送了正确填充的加密。攻击者Marvin拦截密文并阻止其到达目的地。Bob注意到Alice没有回复他的消息，并决定将重新发送给Alice。他随机填充并传输生成的密文。Marvin现在有两个密文，对应于使用两种不同随机填充对同一消息的两次加密。以下定理表明，虽然他不知道使用的填充算法，但Marvin仍能够算出明文。
**定理8**
设为RSA公钥，其中的长度为是位。令集合。设是长度最长为位的消息。定义和，其中和是分别为的整数。如果Marvin知道了和的加密(但不知道或)，则他可以有效地计算出M。
**证明**
定义和，我们知道当时，这些多项式有相同的根。换句话说，是结式的根。的次数最多是。此外有，因此是模的一个小根，而Marvin可以利用Coppersmith定理（定理3）有效地求出这个根。一旦已知，便可以使用上一节的Franklin-Reiter攻击算出，从而得到。
当时，只要填充长度小于消息长度的，就可以进行攻击。这是一个重要的结论。注意，对于建议值，对于标准的模数大小来说，这种攻击是无用的。
#### 4.5 部分密钥泄露攻击
设为RSA私钥，假设Marvin通过某种方式知道了的一部分，比如说四分之一。他能得到剩下的部分吗？当相应的公钥指数很小时，答案是肯定的，令人惊讶吧。最近，Boneh，Durfee和Frankel证明了只要，就有可能从它的一小部分位算出的所有部分。可见结论说明了保护整个RSA私钥的重要性。
**定理9 (BDF)**
设为RSA私钥，其中长度为位.。给定的最小有效位，Marvin可以在的线性时间算出。
证明依赖于另一个完美精妙的Coppersmith定理。
**定理10 (Coppersmith)**
设是一个位RSA模。然后，给定的最小有效位或的最有效位，可以有效地将分解。
定理9很容易从定理10推理出来，事实上，根据和的定义，存在一个整数，使得：
由于，我们必有。对方程模进行约化，设，得到：
由于Marvin知道了的最小有效位，他知道的值，因此，他得到了一个关于和的方程。对于的每一个的可能值，Marvin求解的二次方程，并能得到了的一些候选值。对于这些候选值，他运用定理10尝试去分解。可以证明的候选值的总数最多为，因此，在最多次尝试之后，将被分解。
定理9被称为部分密钥泄露攻击，对于更大的值，只要，也存在类似的攻击，不过，要实现此种攻击的技术有点复杂。有趣的是，基于离散日志的密码系统，如ELGamal公钥系统，似乎不容易受到部分密钥泄漏攻击的影响。事实上，如果给出和的常数部分，则没有已知的多项式时间算法来计算的其余部分。
为了总结这一节，我们将证明当加密指数很小时，RSA系统会泄漏相应私钥一半的最高有效位。要了解这一点，再考虑一个方程，其中是的整数。给定，Marvin可以很容易地计算出：
之后：
因此，是的很好的近似值。该界表明，对于大多数，中一半的最高有效位与相同。由于只有个可能的值，因此Marvin可以构造一个大小的小集合，使得集合中的一个元素等于的一半最高有效位的。的情况特别有趣，在这种情况下，可以知道，系统完全泄漏了的一半最高有效位。
### 5 执行攻击
我们将注意力转向另一类完全不同的攻击。这些攻击不是攻击RSA函数的底层结构，而是专注于RSA的实现。
#### 5.1 时序攻击
想一下存储RSA私钥的智能卡，由于卡是防篡改的，攻击者Marvin可能无法审阅其内容并使其泄露出密钥。然而，Kocher的一个巧妙攻击表明，通过精确测量智能卡执行RSA解密（或签名）所需的时间，可以快速发现私有解密指数。
我们将解释如何使用"重复平方算法"对一个简单的RSA实现进行攻击。设是的二进制表示（即）。基于的观察基础，我们可以知道用重复平方算法来计算最多使用次模乘，算法是如下工作的：
令等于，等于1，对于，执行以下步骤：
（1）如果，令等于，
（2）令等于。
最后，有值为。
当时，变量遍历值的集合，变量在集合中"收集"适当幂以获得。
为了发起攻击，Marvin要求智能卡在大量随机消息上生成签名，并测量每个签名生成所需的时间。
攻击从最低有效位开始一次一个地算出的比特位。我们知道是奇数，因此。考虑第二次迭代。最初且。如果，则智能卡会计算乘积，否则，它是不会计算的。设是智能卡计算所花费的时间。由于计算的时间取决于的值，因此彼此不同（简单模约化算法需要不同的时间，取决于所减少的值）。一旦Marvin获得智能卡的物理规格，之后他便会测量得到（在发起攻击之前）。
Kocher观察到当时，两个集合和是相关的。例如，如果，对于某些，比预期的要大得多，那么也可能大于预期。另一方面，如果，则两个集合和表现为独立的随机变量。通过测量相关性，Marvin可以确定是0还是1。继续使用这个方法，他可以很快得到，。注意，当使用低公钥指数时，上一节的部分密钥泄露攻击表明，使用Kocher的时序攻击，只需要知道的四分之一的位就行。
有两种方法可以抵御攻击。最简单的是添加适当的延迟，以使模幂运算总是要花费一定的时间。第二种方法是由Rivest提出的基于盲化的方法。在解密M之前，智能卡选择一个随机的并计算，然后将应用于上并获得，最后，令。通过这种方法，将应用于Marvin不知道的随机消息上，这样的话，Marvin就不能发起攻击了。
Kocher最近在这些线路上发现了另一种叫做功率密码分析的攻击。
Kocher表明，通过在签名生成过程中精确测量智能卡的功耗，Marvin通常可以轻松发现密钥。事实证明，在多精度乘法期间，卡的功耗高于正常值。通过测量高消耗周期的长度，Marvin可以很容易地确定在给定的迭代中卡是执行一次还是两次乘法，从而暴露出的比特位。
Kocher最近发现了另一种类似的攻击，称为能量分析攻击。Kocher指出通过精确测量智能卡在签名生成过程中的功耗，Marvin通常可以很容易地得到秘密密钥。结果表明，在多精度乘法过程中卡的功耗会高于正常值，通过测量高消耗周期的长度，Marvin可以很容易地确定在给定的迭代中卡是否执行一次或两次乘法，从而得到的比特位。
#### 5.2 随机故障
RSA的解密和签名的实现经常使用中国剩余定理来加速的计算，签名者Bob为了替换模的工作，先计算签名模和的结果，然后利用中国剩余定理将结果结合起来。更准确地说，Bob首先计算：
其中和。然后，他得到签名通过令：
其中：
与和两个指数相比，CRT最后一步的运行时间可以忽略不计。注意和是的一半长，然后由于乘法的简单实现需要平方时间，所以模的乘法速度是模的4倍，而且，是的一半长，计算的速度是计算的8倍，因此，整个签名时间减少了四倍，许多实现都使用这种方法来提高性能。
Boneh，DeMillo和Lipton观察到使用CRT方法有内在的危险。假设在生成签名时，Bob的计算机上的一个小故障导致它在一条指令中错误计算。例如，在将寄存器中的值从一个位置复制到另一个位置时，其中一个比特位被翻转了。(故障可能是由环境电磁干扰引起的，也可能是由于罕见的硬件缺陷造成的，比如早期版本的奔腾芯片。)
Marvin得到了无效的签名给定之后可以很容易地对Bob的模数进行分解。
正如A. K.
Lenstra所说，我们发现了一个新的攻击。假设在Bob生成签名时发生单个错误，那么，或中将有一个被错误地计算。如果说是正确的，那么就会不正确，得到的签名为。一旦Marvin获取到了，通过计算，他就知道这是一个错误的签名。然而注意到：
因此，便是的一个非平凡因子。
要使攻击奏效，Marvin必须对有充分的了解。也就是说，我们假设Bob不使用任何随机填充方法，签名前的随机填充可以防御此种攻击，对于Bob来说，一个更简单的防御方法是在将生成的签名发送给全世界之前检查生成的签名。当使用CRT加速方法时，检查是特别重要的。随机故障攻击对许多密码系统都是有害的，许多系统，包括RSA的非CRT实现，都可以使用随机故障进行攻击。不过，这些结论更多的是理论性的。
#### 5.3 Bleichenbacher对PKCS 1的攻击
设是位RSA模，是位消息，其中。在应用RSA加密之前，一般会通过向其添加随机位，将消息填充到位。公钥加密标准1（Public Key
Cryptography Standard 1, PKCS 1）的旧版标准就是使用的这种方法。填充后，消息如下所示：
* * *
02 随机位 00 M
* * *
生成的消息长度为位，并直接使用RSA加密。包含"02"的初始块长度为16位，从上图可看出已在消息中添加了随机填充。
当运行在Bob的机器上应用程序(例如，Web浏览器)接收到消息时，会对其进行解密，检查初始块，并去掉随机填充。但是，一些应用程序会检查"02"初始块，如果不存在，就会返回一条错误消息，说明"无效的密文"。Bleichenbacher表示这个错误消息可能导致灾难性的后果：攻击者Marvin可以使用错误消息解密他所选择的密文。
假设Marvin截获了一个针对Bob的密文，并希望对其进行解密。为了发动攻击，Marvin随机挑选了一个，计算，并将发送到Bob的机器。运行在Bob的机器上的应用程序接收并尝试解密它。它要么用错误消息进行响应，要么根本不响应(如果的格式正确的话)。因此，Marvin知道解密过程中16位最高有效位是否等于02。实际上，Marvin有这样的谕言，对于他选择的任何，他都可以测试解密的16位最高有效位是否等于02。Bleichenbacher证明了这样的谕言足以解密。
### 6 结论
对RSA系统进行了20年的研究以来，产生了一些有见地的攻击，但还没有发现破坏性的攻击。到目前为止发现的攻击主要说明了在实现RSA时需要避免的陷阱，目前看来，可以信任正确的RSA密码系统实施来提供数字世界中的安全性。我们将针对RSA的攻击分为四类：(1)利用系统公然误用的基本攻击；(2)低私钥指数攻击，此种攻击非常严重，绝不能使用低私钥指数；(3)低公钥指数攻击；(4)对RSA系统执行时的攻击。这些持续不断的攻击说明，我们对基本数学结构的研究还是不够的。另外，Desmedt和Odlyzko、Joye和Quisquater以及DeJonge和Chaum还提出了一些额外的攻击。在整篇论文中，我们观察到通过在加密或签名之前正确填充消息可以防御许多攻击。
**致谢**
我要感谢Susan Landau鼓励我撰写调查问卷，感谢Tony Knapp帮忙编辑手稿。我还要感谢在早些时候Mihir Bellare、Igor
Shparlinski和R. Venkatesan对草案发表的评论。
* * *