镜像或者将Dockerfle分发给所有开发人员，所有开发人员根据Dockerfile创建的容器或者
220
“开发任务结束后，架构师调整Dockerfile或者image，然后分发给测试部门，测试部门
本章主要介绍Docker在个人学习，技术创业和中小型企业生产环境中的实践之道。在
“4）公司内部私有仓库的管理，镜像的管理问题是否解决。目前官方提供的私有仓库管
本书的第三部分也会针对这些问题介绍一些目前比较流行的解决方案。
3）目前，Docker对容器的安全管理做得不够完善，在应用到生产环境之前可以使用第
2）是否需要对Docker容器做资源限制，以及如何限制，如CPU、内存、网络、磁盘等等。
对于是否要在生产环境中使用Docker，笔者也是刚刚在生产环境中使用Docker不到半
目前在生产环境上使用Docker的企业已经不在少数，比较有名的就是百度BAE。
测试部门应当对Docker版本的程序和部署在普通服务器上的应用程序进行性能上的测试。
利用好基础的base镜像的继承特性来调整镜像的轻微改动，
使用-v共享文件夹来存储开发人员的程序代码。
3.注意事项
项目伊始，架构师根据项目预期创建好需要的基础Base镜像、Nginx、Tomcat、MySQL
1）如果Docker出现不可控的风险，是否考虑了其他的解决方案。
第二部分实战案例
应用Docker到生产环境
，比如当需要测试程序对不同
---
## Page 235
第21章
■第20章
■第19章
第18章
高级话题
第三部分7t3
Docker相关项目
高级网络配置
Docker安全
Docker核心技术
---
## Page 236
用、持续集成、容器管理和编程开发等。
的相关手段。
统、虚拟网络等技术话题。
来了？接下来，笔者将在第三部分介绍Docker的相关高级话题。
用操作。那么，Docker是如何实现的？它目前有何问题？它的技术生态环境是否已经成长起
222第三部分高级话题
最后，在第21章笔者还将介绍Docker周边相关项目的进展情况，包括平台及服务应
第20章将具体讲解Docker使用网络的一些高级配置等，并分析底层实现的技术过程。
第19章将从命名空间、控制组、内核能力、服务端等角度来剖析Docker目前保障安全
、第18章将介绍Docker的核心实现技术，包括架构、命名空间、控制组、联合文件系
经过前两部分的讲解和实践，相信读者已经比较深人地了解了Docker的设计理念与应
---
## Page 237
通过专门的Engine 模块来分发管理各个来自客户端的任务。
理这些请求（创建、运行、分发容器）。在设计上，Docker daemon是一个非常松耦合的架构，
行，作为服务端接受来自客户的请求，并处
行通信，如图18-1所示。
上，也可通过socket或者RESTful API来进
18.1
网络支持。本章将介绍这些基本概念。
（Namespaces）控制组（Control Groups）、联合文件系统（Union File Systems）和Linux虚拟
com/docker/libcontainer），试图打造更通用的底层容器虚拟化库。
版本起，Docker除了继续支持LXC格式之外，还开始引入自家的 libcontainer（https://github.
从操作系统功能上看，Docker底层依赖的核心技术主要包括Linux操作系统的命名空间
Dockerdaemon一般在宿主主机后台运
1.服务端
客户端和服务端既可以运行在一个机器
Docker采用了标准的C/S架构，包括客户端和服务端两大部分。
早期版本Docker的底层是基于成熟的LinuxContainer（LXC）技术实现的。自Docker0.9
Docker归根到底是一种容器虚拟化技术。
基本架构
Docker核心技术
Docker服务端
容器#3
容器#2
容器#1
图18-1Docker基本架构
1--
第18章
Chiapcte18
Docker客户端
---
## Page 238
务端：
务端监听在本地的TCP连接1234端口，
果服务端没有监听到默认套接字，则需要客户端在执行命令的时候显式指定。例如，假定服
的命令，需要再次调用客户端命令。
发送命令后，等待服务端返回，一旦收到返回后，客户端立刻执行结束并退出。用户执行新
的交互。
端
户访问。可以通过-H选项来修改监听的方式。例如，让服务端监听本地的TCP连接1234
224
：同样，客户端默认通过本地的unix:///var/run/docker.sock套接字向服务端发送命令。如
用户使用的Docker可执行命令即为客户端程序。与Docker daemon不同的是，客户端
口：
OS/Arch (client):1inux/amd64
Go version (client):
Client API version:1.15
$sudo docker version
Docker客户端则为用户提供一系列可执行命令，用户用这些命令实现与Docker daemon
2.客户端
注：Ubuntu系统中，Docker服务端的默认启动配置文件在/etc/default/docker。
此外，Docker还支持通过HTTPS认证方式来验证访问。
graphdriver:
2014/11/02 14:30:32 docker daemon:1.3.0 c78088f;execdriver:native;
$sudodocker-H0.0.0.0:1234-d&
Docker服务端默认监听本地的unix://var/run/docker.sock套接字，只允许本地的root用
Client version:1.3.0
$sudo docker
on this host?
2014/11/02
[9f3e8962]
[9f3e8962]
MONY NOO
2014/11/02
[9f3e8962.initserver()]Creating server
[9f3e8962]
[9f3e8962] +job serveapi(tcp://0.0.0.0:1234)
第三部分高级话题
version:1.3.0
+job init_networkdriver()
WHATYOU'RE DOING/!\
214:30:32/!\DON'T BINDONANOTHER IPADDRESS THAN 127.0.0.1IF YOU
-job
+job initserver()
(client):
-H tcp://127.0.0.1:1234 version
init_networkdriver()=ok（0)
g01.3.3
c78088f
：只有通过-H参数指定了正确的信息才能连接到服
---
## Page 239
空间和子命名空间将分别有一个进程号来对应。
间是一个父子关系的结构，子空间中的进程对于父空间是可见的。新fork出的进程在父命名
间中，看到的进程号不相同，每个进程命名空间有一套自己的进程号管理方法。进程命名空
认为自己是独占系统的。
和某些运行时环境（runtime，例如一些系统命令和系统库），但是彼此是不可见的一
述的所有需求，让某些进程在彼此隔离的命名空间中运行。虽然，这些进程都共用一个内核
IPC 等等的相互隔离。前者相对容易实现一些，后者则需要宿主主机系统的深人支持。
CPU、网络IO、硬盘IO、存储空间等的限制外，还要实现文件系统、网络、PID、UID
CPU等资源，所有的资源都是应用进程直接共享的。要想实现虚拟化，除了要实现对内存
中运行一样。命名空间保证了容器之间彼此互不影响。
18.2
：随着Linux系统对于命名空间功能的逐步完善，Linux软件工程师已经可以实现上文所
我们知道，在操作系统中，包括内核、文件系统、网络、PID、UID、IPC、内存、硬盘
例如，查看Docker主进程的pid进程号是5989：
Linux通过命名空间管理进程号，对于同一进程（同一个task_struct），在不同的命名空
每个容器都可以拥有自己单独的命名空间，运行在其中的应用都像是在独立的操作系统
命名空间（Namespace）是Linux内核针对实现容器虚拟化而引入的一个强大特性。
查看新建容器进程的父进程，正是Docker主进程5989：
ec559327572b5bf99d0f80b98ed3a3b62023844c7fdbea3f8caed4ffa5c62e86
[c5fe8ac9]
"auplink": executable file not found in SPATH
[error] mount.go:1l [warning]:couldn`t run auplink before unmount: exec:
2014/11/0214:42:15P0sT/v1.13/containers/create
$sudo docker run-dubuntu
新建一个Ubuntu的“hello world”容器：
$ps-efIgrep docker
1.进程命名空间
Git commit (server):c78088f
[c5fe8ac9]+job create()
root
Go version (server): gol.3.3
Server APIversion:1.15
Server version:1.3.0
命名空间
5989
5988
014:38pts/6
/bin/sh-c"while true;do echo hello world;sleep 1;done”
00:00:00docker-d
第18章Docker核心技术225
02T02
一它们都
---
## Page 240
进程看到的文件结构不同，这样每个命名空间中的进程所看到的文件目录彼此被隔离。
法交互。
起使用，同一个IPC名字空间内的进程可以彼此可见，允许进行交互；不同空间的进程则无
IPC)，包括信号量、消息队列和共享内存等。PID 命名空间和IPC 命名空间可以组合起来一
docker0网桥上的虚拟网口：
地主机上的docker0网桥连接在一起。如图18-2所示。
连接到一起。默认情况下，容器中的虚拟网卡将同本
NetworkDevice）的方式，将不同命名空间的网络设备
网络就能隔离开来。Docker采用虚拟网络设备（Virtual
路由表、防火墙规则，sockets 等等。这样每个容器的
的视图。包括网络设备接口、IPv4和IPv6协议栈、IP
络命名空间为进程提供了一个完全独立的网络协议栈
统的端口。
进程就可以相互隔离，但是网络端口还是共享本地系
226
使用brctl工具，则可以看到桥接到宿主主机
通过网络命名空间，
UTS（UNIXTime-sharing System）命名空间允许每个容器拥有独立的主机名和域名，从
5.UTS命名空间
类似chroot，将一个进程放到一个特定的目录执行。挂载命名空间允许不同命名空间的
4.挂载命名空间
容器中进程交互还是采用了Linux常见的进程间交互方法（InterprocessCommunication·
3.IPC命名空间
docker0
bridge name
$brctl show
如果有了PID命名空间，那么每个名字空间中的
2.网络命名空间
sleep 1;done
root 6126
$ps-eflgrep while
第三部分高级话题
5989
8000.56847afe9799
bridge id
014:41 ?00:00:00/bin/sh-cwhiletrue;doecho he11oworld;
可以实现网络隔离。
一个网
no
STP enabled
图18-2
容器名字空间
Docker使用了网络命名空间
vethd533
vethd166
veth4148
interfaces
网桥dockero
网口
虚拟
物理主机
网卡
物理
网口
容器名字空间
虚拟
口
---
## Page 241
具）到系统级虚拟化（包括OpenVZ、Linux-VServer、LXC 等）。
计等。只有能控制分配到容器的资源，Docker才能避免多个容器同时运行时的系统资源竞争。
18.3
序，而非本地系统上存在的用户。
而可以虚拟出一个有独立主机名和网络空间的环境，就跟网络上一台独立的主机一样。
控制组（CGroups）是Linux内核的一个特性，主要用来对共享资源进行隔离、限制、审
具体来看，控制组提供如下功能：
控制组的设计目标是为不同的应用情况提供统一的接口，从控制单一进程（比如nice工
控制组技术最早是由Google的程序员2006年提出，Linux内核自 2.6.24开始支持。
$sudo docker ps
默认情况下，Docker容器的主机名就是返回的容器ID：
口控制（Control）
口
品
口
口
控制组可以提供对容器的内存、CPU、磁盘IO等资源进行限制和计费管理。
每个容器内部都可以有root帐号，跟宿主主机不在一个命名空间。
每个容器可以有不同的用户和组id，也就是说可以在容器内使用特定的内部用户执行程
6.用户命名空间
ec559327572b
[c5fe8ac9] -job container_inspect(ec5)=OK (0)
[c5fe8ac9] +job container_inspect(ec5)
2014/11/02 15:30:56 GET/v1.13/containers/ec5/json
ec559327572b
CONTAINER
[c5fe8ac9]
2014/11/02 15:00:29 GET /v1.13/containers/json
[c5fe8ac9]
接和文件系统。
用cpuacct子系统记录某个进程组使用的CPU时间。
资源审计（Accounting）用来统计系统实际上把多少资源用到适合的目的上，可以使
资源限制（ResourceLimiting）组可以设置为不超过设定的内存限制。比如：内存子
控制组
docker inspect
隔离（Isolation）
优先级（Prioritization）通过优先级让一些组优先得到更多的CPU等资源。
存，就会出发Out of Memory警告。
系统可以为进程组设定一个内存使用上限，一旦进程组使用的内存达到限额再申请内
+jobcontainers()
）挂起、恢复和重启动等操作。
Up18minutes
为组隔离名字空间，这样一个组不会看到另一个组的进程、网络连
IMAGE
-f[(".Config.Hostname"}}
127.0.0.1:5000/ubuntu:latest
COMMAND
furious_goodall
CREATED
ec5
第18章Docker核心技术227
STATUS
/bin/sh-c'while tr
PORTS
NAMES
18
---
## Page 242
可限制Docker组中的所有进程使用的物理内存总量不超过100MB：
Docker组应用的各种限制项，包括：
228
total_rss_huge 16777216
unevictable
active_file0
active_anon 107384832
pgpgout 52634
pgpgin 74766
writeback0
rss_huge 16777216
memory.limit_in_bytes
memory.failcnt
cgroup.clone_children
进人对应的容器文件夹，
$ sudoecho104857600>/sys/fs/cgroup/memory/docker/memory.limit_in_bytes
用户可以通过修改这些文件值来控制组限制Docker应用资源。例如，通过下面的命令
memory.move_charge_at_immigrate
memory.limit_in_bytes
安装Docker后，用户可以在/sys/fs/cgroup/memory/docker/目录下看到对
total_rss 107286528
total_cache 110592
hierarchical_memory_1imit 18446744073709551615
inactive_file
pgmajfault0
pgfault
mapped_file0
rss 107286528
cache 110592
$ cat memory.stat
memory.force_empty
cgroup.procs
cgroup.event_control
$cd42352bb6c1d1c5c411be8fa04e97842da87d14623495189c4d865dfc444d12ae/
memory.max_usage_in_bytes
memory.force_empty
memory.failcnt
cgroup.procs
42352bb6c1d1c5c411be8fa04e97842da87d14623495189c4d865dfc444d12ae
第三部分高级话题
S1s
tasks
cgroup.event_control
cgroup.clone_children
$ls
cd/sys/fs/cgroup/memory/docker
115722
可以看到对应容器的一些状态：
memory.oom control
memory.numa stat
memory.move_charge_at_immigrate
memory.max_usage_in_bytes
notify_on_release
memory.use_hierarchy
memory.usage_in_bytes
memory.swappiness
memory.stat