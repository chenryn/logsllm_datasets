These attacks are arguably the most dangerous speculation
attacks because they can bypass compiler inserted fences.
Prior defenses either excluded these attacks from their threat
model, or implemented aggressive limits to speculation that
dramatically degraded performance. In contrast, SPECCFI
provides complete protection against these dangerous attacks,
with little impact on performance, and with minimal hardware
complexity.
SPECCFI introduces the idea of using CFI, explored previ-
ously as a protection against control-ﬂow hijacking attacks for
committed instructions (i.e., even on non-speculative proces-
sors), as a defense against speculation attacks. In particular,
SPECCFI veriﬁes the forward-edge of CFI on the instructions
in the speculative path and only allows speculation if CFI
labels match protecting against Spectre-BTB attacks. It also
veriﬁes the backward-edge using a uniﬁed shadow call stack,
protecting against Spectre-RSB attacks. Essentially, SPECCFI
moves the CFI check to the decode stage of the pipeline,
preventing speculative execution of instructions unless they
conform to the CFI annotations. For normal programs, this
results in negligible performance degradation since it only
prevents speculation with mismatching CFI labels, which will
most likely result in misspeculation. By stopping misspecu-
lation, we beneﬁt from avoiding cache pollution and other
resource waste during misspeculation.
Combined with recent proposals to mitigate Spectre-PHT,
we believe SPECCFI mitigates the threat from known specu-
lation attacks. Moreover, it does so without sacriﬁcing per-
formance due to speculative execution and with minimal
modiﬁcations to the processor pipeline.
ACKNOWLEDGEMENTS
This paper was partially supported by NPRP grant 8-1474-
2-626 from the Qatar National Research Fund (a member of
Qatar Foundation). The statements in the paper are solely the
responsibility of the authors.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] Altera de2-115 development and education board. https://www.altera.
com/solutions/partners/partner-proﬁle/terasic-inc-/board/altera-de2-
115-development-and-education-board.html#overview, 2010.
[2] Spec cpu2017 documentation.
https://www.spec.org/cpu2017/Docs,
2017.
2019.
[3] Test suite extensions.
https://llvm.org/docs/Proposals/TestSuite.html,
[4] Mart´ın Abadi, Mihai Budiu, ´Ulfar Erlingsson, and Jay Ligatti. Control-
ﬂow integrity. In ACM Conference on Computer and Communications
Security (CCS), 2005.
[5] ADVANCED MICRO DEVICES,
Speculative store bypass disable.
content/resources/124441 AMD64 SpeculativeStoreBypassDisable
Whitepaper ﬁnal.pdf, 2018.
Amd64 technology:
https://developer.amd.com/wp-
INC.
[6] ADVANCED MICRO DEVICES,
INC.
for
managing
niques
amd
https://developer.amd.com/wp-content/resources/90343-B
SoftwareTechniquesforManagingSpeculation WP 7-18Update FNL.
pdf, 2018.
speculation
on
Software
tech-
processors.
[7] Alejandro Cabrera Aldaya, Billy Bob Brumley, Sohaib ul Hassan,
Cesar Pereida Garca, and Nicola Tuveri. Port contention for fun and
proﬁt. Technical report, 2018. Available from https://eprint.iacr.org/
2018/1060.pdf.
[8] Osman Aleksander. The ao486 project. https://github.com/alﬁkpl/ao486,
2014.
[9] ARM. Cache speculative side-channels. https://bugs.chromium.org/p/
project-zero/issues/detail?id=1528, 2018.
[10] ARM. Vulnerability of speculative processors to cache timing side-
channel mechanism. https://developer.arm.com/support/security-update,
2018.
[11] ARM Limited. Arm® a64 instruction set architecture (00bet9), 2018.
[12] Fabrice Bellard. Qemu, a fast and portable dynamic translator.
In
USENIX Annual Technical Conference, volume 41, page 46, 2005.
[13] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner,
Alessandro Sorniotti, Babak Falsaﬁ, Mathias Payer, and Anil Kur-
mus. Smotherspectre: exploiting speculative execution through port
contention. arXiv preprint arXiv:1903.01843, 2019.
[14] Nathan Burow, Scott A Carr, Stefan Brunthaler, Mathias Payer, Joseph
Nash, Per Larsen, and Michael Franz. Control-ﬂow integrity: Precision,
security, and performance. arXiv preprint arXiv:1602.04056, 2016.
[15] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Ben-
jamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and
Daniel Gruss. A systematic evaluation of transient execution attacks and
defenses. In USENIX Security Symposium, 2019.
[16] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and
Thomas R Gross. Control-ﬂow bending: On the effectiveness of control-
ﬂow integrity. In USENIX Security, 2015.
[17] Nicholas Carlini and David Wagner. ROP is still dangerous: Breaking
modern defenses. In USENIX Security, 2014.
[18] Chandler Carruth.
Mitigating speculative
attacks
in crypto.
https://github.com/HACS-workshop/spectre-mitigations/blob/master/
crypto guidelines.md, 2018.
[19] Chandler Carruth. Rfc: Speculative load hardening (a spectre vari-
ant 1 mitigation). https://lists.llvm.org/pipermail/llvm-dev/2018-March/
122085.html, 2018.
[20] Nick Christoulakis, George Christou, Elias Athanasopoulos, and Sotiris
Ioannidis. Hcﬁ: Hardware-enforced control-ﬂow integrity.
In ACM
Conference on Data and Application Security and Privacy (CODASPY),
2016.
[21] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi,
Patrick Koeberl, Dean Sullivan, Orlando Arias, and Yier Jin. Haﬁx:
Hardware-assisted ﬂow integrity extension.
In Design Automation
Conference (DAC), 2015.
[22] Lucas Davi, Patrick Koeberl, and Ahmad-Reza Sadeghi. Hardware-
assisted ﬁne-grained control-ﬂow integrity: Towards efﬁcient protection
of embedded systems against software exploitation. In Design Automa-
tion Conference (DAC), 2014.
[23] Matthew Dillon.
Clarifying the spectre mitigations.
http://lists.
dragonﬂybsd.org/pipermail/users/2018-January/335637.html, 2018.
[24] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim,
and Wenke Lee. Efﬁcient protection of path-sensitive control security.
In USENIX Security, 2017.
[25] Leonid Domnitser, Aamer Jaleel, Jason Loew, Nael Abu-Ghazaleh,
and Dmitry Ponomarev. Non-monopolizable caches: Low-complexity
mitigation of cache side channel attacks.
In ACM Transactions on
Architecture and Code Optimization (TACO), 2012.
[26] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin
Rinard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. Control
jujutsu: On the weaknesses of ﬁne-grained control ﬂow integrity.
In
ACM Conference on Computer and Communications Security (CCS),
2015.
[27] D. Evtyushkin, R. Riley, N. Abu-Ghazaleh, and D. Ponomarev. Branch-
scope: A new side-channel attack on directional branch predictor.
In
ACM International Conference on Architectural Support for Program-
ming Languages and Operating Systems (ASPLOS), 2018.
[28] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. Jump
over aslr: Attacking branch predictors to bypass aslr. In Proc. IEEE/ACM
International Symposium on Microarchitecture (Micro), 2016.
[29] Enes G¨oktas, Elias Athanasopoulos, Herbert Bos, and Georgios Por-
tokalidis. Out of control: Overcoming control-ﬂow integrity. In IEEE
Symposium on Security and Privacy (Oakland), 2014.
[30] J. Horn. speculative execution, variant 4: speculative store by-pass. https:
//bugs.chromium.org/p/project-zero/issues/detail?id=1528, 2018.
[31] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung,
William R. Harris, Taesoo Kim, and Wenke Lee. Enforcing unique
code target property for control-ﬂow integrity. In ACM Conference on
Computer and Communications Security (CCS), 2018.
[32] Casen Hunger, Mikhail Kazdagli, Ankit Rawat, Alex Dimakis, Sri-
ram Vishwanath, and Mohit Tiwari. Understanding contention-based
channels and using them for defense.
In IEEE Symposium on High
Performance Computer Architecture (HPCA), 2015.
[33] Open Source Security Inc. Respectre: The state of the art in spectre
defenses. https://www.grsecurity.net/respectre announce.php, 2018.
[34] Intel.
Intel
analysis of
speculative
execution side
channels.
https://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-
Analysis-of-Speculative-Execution-Side-Channels.pdf, 2018.
[35] Intel.
Retpoline: A branch
target
injection mitigation.
https://software.intel.com/security-software-guidance/api-app/sites/
default/ﬁles/Retpoline-A-Branch-Target-Injection-Mitigation.pdf, 2018.
[36] Intel. Speculative execution side channel mitigations. https://software.
intel.com/security-software-guidance/api-app/sites/default/ﬁles/336996-
Speculative-Execution-Side-Channel-Mitigations.pdf, 2018.
Intel 64 and ia-32 architectures optimization
[37] Intel Corporation.
reference manual.
https://www.intel.com/content/dam/www/public/us/
en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf,
2016.
[38] Intel Corporation.
Control-ﬂow enforcement
technology preview.
https://software.intel.com/sites/default/ﬁles/managed/4d/2a/control-
ﬂow-enforcement-technology-preview.pdf, 2017.
[39] Mehmet Kayaalp, Meltem Ozsoy, Nael Abu-Ghazaleh, and Dmitry
Ponomarev. Branch regulation: Low-overhead protection from code
reuse attacks.
In International Symposium on Computer Architecture
(ISCA), 2012.
[40] Khaled N Khasawneh, Esmaeil Mohammadian Koruyeh, Chengyu Song,
Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh. Safe-
spec: Banishing the spectre of a meltdown with leakage-free speculation.
In Design Automation Conference (DAC), 2019.
[41] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer.
Dawg: A defense against cache timing attacks in speculative execution
processors. 2018.
[42] V. Kiriansky and C. Waldspurger. Speculative buffer overﬂows: Attacks
and defenses. arXiv preprint arXiv:1807.03757, 2018.
[43] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom.
Spectre attacks: Exploiting speculative execution. In IEEE Symposium
on Security and Privacy (Oakland), 2019.
[44] Paul Kocher.
Spectre mitigations in microsoft’s c/c++ compiler.
MicrosoftCompilerSpectreMitigation.html, 2018.
[45] E. Koruyeh, K. Khasawneh, C. Song, and N. Abu-Ghazaleh. Spectre
In USENIX
returns! speculation attacks using the return stack buffer.
Workshop on Offensive Technologies (WOOT), 2018.
[46] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg.
Meltdown: Reading kernel memory from user space.
In USENIX
Security Symposium (Security), 2018.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
52
[71] Victor van der Veen, Dennis Andriesse, Enes G¨oktas¸, Ben Gras, Lionel
Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. Practical
context-sensitive CFI. In ACM Conference on Computer and Commu-
nications Security (CCS), 2015.
[72] Victor van der Veen, Enes G¨oktas, Moritz Contag, Andre Pawoloski,
Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athana-
sopoulos, and Cristiano Giuffrida. A tough call: Mitigating advanced
code-reuse attacks at the binary level. In IEEE Symposium on Security
and Privacy (Oakland), 2016.
[73] Stephan van Schaik, Alyssa Milburn, Sebastian sterlund, Pietro Frigo,
Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.
RIDL: Rogue in-ﬂight data load. In IEEE Symposium on Security and
Privacy (Oakland), May 2019.
[74] Guanhua Wang, Sudipta Chattopadhyay, Ivan Gotovchits, Tulika Mitra,
and Abhik Roychoudhury. oo7: Low-overhead defense against spectre
attacks via binary analysis. arXiv preprint arXiv:1807.05843, 2018.
[75] Hua Wang, Yao Guo, and Xiangqun Chen. Fpvalidator: validating type
equivalence of function pointers on the ﬂy. In Annual Computer Security
Applications Conference (ACSAC), 2009.
[76] O. Weisse, J. Van, M. Minkin, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, R. Strackx, T. Wenisch, and Y. Yarom. Foreshadow-
NG: Breaking the virtual memory abstraction with transient out-of-order
execution. Technical report, 2018.
[77] M. Yan, J. Choi, D. Skarlatos, A. Morrison, C. Fletcher, and J. Torrellas.
Invisispec: Making speculative execution invisible in the cache hierarchy.
In IEEE/ACM International Symposium on Microarchitecture (MICRO),
2018.
[78] Bennet Yee, David Sehr, Gregory Dardyk, J Bradley Chen, Robert Muth,
Tavis Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar.
Native client: A sandbox for portable, untrusted x86 native code.
In
IEEE Symposium on Security and Privacy, pages 79–93. IEEE, 2009.
[79] Tse-Yu Yeh and Yale N Patt. Alternative implementations of two-level
adaptive branch prediction. In ACM SIGARCH Computer Architecture
News, volume 20, pages 124–134, 1992.
[80] M. T. Yourst. Ptlsim: A cycle accurate full system x86-64 microarchi-
tectural simulator. In Proc. of ISPASS, 2007.
[81] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres,
Stephen McCamant, Dong Song, and Wei Zou. Practical control ﬂow
integrity and randomization for binary executables. In IEEE Symposium
on Security and Privacy (Oakland), 2013.
[82] Mingwei Zhang and R Sekar. Control ﬂow integrity for COTS binaries.
In USENIX Security, 2013.
[47] G. Maisuradze and C. Rossow.
ret2spec: Speculative execution using
return stack buffers. In ACM Conference on Computer and Communi-
cations Security (CCS), 2018.
[48] Stephen McCamant and Greg Morrisett. Evaluating sﬁ for a cisc
architecture. In USENIX Security Symposium, 2006.
[49] Microsoft. Spectre mitigations in msvc. https://blogs.msdn.microsoft.
com/vcblog/2018/01/15/spectre-mitigations-in-msvc/, 2018.
[50] Marina Minkin, Daniel Moghimi, Moritz Lipp, Michael Schwarz,
Jo Van Bulck, Daniel Genkin, Daniel Gruss, Berk Sunar, Frank Piessens,
and Yuval Yarom. Fallout: Reading kernel writes from user space. 2019.
[51] Hoda Naghibijouybari, Khaled N. Khasawneh, and Nael Abu-Ghazaleh.
Constructing and characterizing covert channels on gpgpus.
In
IEEE/ACM International Symposium on Microarchitecture (MICRO),
2017.
[52] Hoda Naghibijouybari, Ajaya Neupane, Zhiyun Qian, and Nael Abu-
Ghazaleh. Rendered insecure: Gpu side channel attacks are practical. In
ACM SIGSAC Conference on Computer and Communications Security
(CCS), 2018.
[53] Ben Niu and Gang Tan. Modular control-ﬂow integrity.
In ACM
SIGPLAN Conference on Programming Language Design and Imple-
mentation (PLDI), 2014.
[54] Ben Niu and Gang Tan. Per-input control-ﬂow integrity.
In ACM
Conference on Computer and Communications Security (CCS), 2015.
[55] Oleksii Oleksenko, Bohdan Trach, Tobias Reiher, Mark Silberstein, and
Christof Fetzer. You shall not bypass: Employing data dependencies to
prevent bounds check bypass. arXiv preprint arXiv:1805.08506, 2018.
[56] A. Patel, F. Afram, and K. Ghose. Marss-x86: A qemu-based micro-
In
architectural and systems simulator for x86 multicore processors.
Proc. of QUF, 2011.
[57] PAX team. Future of pax. https://pax.grsecurity.net/docs/pax-future.txt,
2002.
[58] PAX team. RAP: RIP ROP. https://pax.grsecurity.net/docs/PaXTeam-
H2HC15-RAP-RIP-ROP.pdf, 2015.
[59] Moinuddin K. Qureshi. Ceaser: Mitigating conﬂict-based cache attacks
via encrypted-address and remapping. In Proc. IEEE/ACM International
Symposium on Microarchitecture (Micro), 2018.
[60] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi,
Ahmad-Reza Sadeghi, and Thorsten Holz. Counterfeit object-oriented
programming: On the difﬁculty of preventing code reuse attacks in c++
applications. In IEEE Symposium on Security and Privacy, pages 745–
762. IEEE, 2015.
[61] Michael Schwarz, Claudio Canella, Lukas Giner, and Daniel Gruss.
Store-to-leak forwarding: Leaking data on meltdown-resistant cpus.
arXiv preprint arXiv:1905.05725, 2019.
[62] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian
Stecklina, Thomas Prescher, and Daniel Gruss. Zombieload: Cross-
privilege-boundary data sampling. arXiv preprint arXiv:1905.05726,
2019.
[63] Michael Schwarz, Robert Schilling, Florian Kargl, Moritz Lipp, Claudio
Canella, and Daniel Gruss. Context: Leakage-free transient execution.
arXiv preprint arXiv:1905.09100, 2019.
[64] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss.
arXiv preprint
Netspectre: Read arbitrary memory over network.
arXiv:1807.10535, 2018.
[65] Hovav Shacham. The geometry of innocent ﬂesh on the bone: Return-
In ACM Conference on
into-libc without function calls (on the x86).
Computer and Communications Security (CCS), 2007.
[66] J. Stecklina and T. Prescher. Lazyfp: Leaking fpu register state using
arXiv preprint arXiv:1806.07480,
microarchitectural side-channels.
2018.
[67] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. Context-
sensitive fencing: Securing speculative execution via microcode cus-
tomization. In ACM International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS), 2019.
[68] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway,
´Ulfar Erlingsson, Luis Lozano, and Geoff Pike. Enforcing forward-edge
control-ﬂow integrity in gcc & llvm. In USENIX Security, 2014.
[69] P. Turner. Retpoline: a software construct for preventing branch-target-
injection. https://support.google.com/faqs/answer/7625886, 2018.
[70] Jo Van B., M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens,
M. Silberstein, T. F Wenisch, Y. Yarom, and R. Strackx. Foreshadow:
Extracting the keys to the intel sgx kingdom with transient out-of-order
execution. In USENIX Security Symposium (Security), 2018.
Authorized licensed use limited to: University of New South Wales. Downloaded on October 18,2020 at 09:22:13 UTC from IEEE Xplore.  Restrictions apply. 
53