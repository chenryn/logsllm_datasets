of the FPB unit in two different data structures: the ﬁrst one is a
control structure located at an internal memory address outside
of ROM and RAM. This data structure is used to conﬁgure and
control the breakpoint and code remapping feature. It is also
used to reference the second data structure, called patch-table,
holding our trampoline instructions. To use the FPB debugging
unit for hotpatching, we implemented a C-library to perform
the necessary FPB unit conﬁguration and prepare the load of
the patch. The library provides the following functions:
fpb_init. This function initializes the FPB unit by preparing
and properly referencing the required data structures. Further-
more, it checks the availability of a FPB unit on the given
board. A successful initialization conﬁrms the FPB capability
of the used hardware unit.
fpb_enable. This sets the global enable bit of the FPB unit.
If not set, the unit will ignore any conﬁgured and enabled
breakpoint.
enable_single_patch. This function creates the trampoline
through the code remapping feature and breakpoint usage.
The trampoline consists of a branch instruction performing a
control-ﬂow redirect from the insertion point to the patch entry
point. The branch instruction can be either supplied with the
patch or a branch instruction calculation can be implemented
based on the given offsets. This function sets the breakpoint
to the trampoline insertion point and deﬁnes the breakpoint
behavior as code remapping. Finally, it enables the hotpatch
through a atomic switchover using a single register write.
load_patch_and_dispatcher. The function implements the
patch loading and preparation process. A basic dispatcher (see
Section V-B) is loaded and modiﬁed with the given knowledge
of patch locations. Afterwards, the patch is copied to RAM.
The entire patching process runs in a low priority task,
managed by the FreeRTOS [54] system. The atomic switchover
is interruptible as it consists of a single assembly instruction,
which cannot be interrupted by deﬁnition, see Section V and
Section VII. As a consequence, the embedded system cannot
miss any deadline as proper real-time scheduling stays in place.
Furthermore, no further concurrency handling is required.
The implemented program ﬂow can be summarized as fol-
lows: (1) initialize the FPB unit and check board compatibility,
(2) load the dispatcher to RAM, (3) copy the patch to RAM
(dedicated patch region), (4) modify the dispatcher with a patch
location entry if required, (5) enable the FPB unit globally,
(6) conﬁgure and enable the instruction matcher, (7) the patch
ﬂow is active.
B. Patch Development
Next, we describe how a patch is developed for hotpatch-
ing. This especially requires code changes in the embedded
ﬁrmware to effectively mitigate the discovered vulnerability.
In the software development cycle common within the indus-
try [55], developers mitigate the vulnerabilities by constantly
updating and modifying the software, creating patches. It is
also a good practice to separate feature updates from security
updates. Given our trampoline architecture, hotpatches can be
obtained by means of static code comparison of the unpatched
and patched ﬁrmware version. Creating a hotpatch is typically
straight-forward and requires little additional work: the devel-
oper performs the static code comparison of the binary images
and extracts the patch based on the instructions that have been
changed or inserted. Development tools such as IDA Pro3 or
3https://www.hex-rays.com/products/ida/
8
Listing 1: CVE2018-16601 source-level patch
1
2
3
4
5
if ( (uxHeaderLength >
(pxNetworkBuffer->xDataLength
- ipSIZE_OF_ETH_HEADER )) ||
(uxHeaderLength < ipSIZE_OF_IPv4_HEADER))
{ return eReleaseBuffer; }
Radare24 already support the generation of an instruction dif-
ference on binary level. These development tools also directly
indicate the required trampoline insertion points as they show
the memory addresses of the instructions where the patched
ﬁrmware differs from the unpatched version. The trampoline
can be either directly derived from the insertion point and the
future patch location within the devices RAM, or a dynamic
instruction calculation can be implemented within the updater
task (see Section V-B). A fully developed updater could also
dynamically choose a free patch slot (hardware breakpoint).
The developer may add slight modiﬁcations to the patch. For
example, restoring some stack values and registers like the
frame pointer. These modiﬁcations are currently only required
because of the dispatcher solution, see Section V-B, which has
been implemented to overcome the limited range for branching
instructions on our proof-of-concept platform. However, these
modiﬁcations can be reused along all hotpatches.
In general, the developer can follow these steps for hotpatch
development: (1) create and compile a patched version of the
application, (2) compare the patched and unpatched ﬁrmware
on assembly level, (3) extract the differences and add mod-
iﬁcations, (4) determine the insertion point and package the
patch for application.
C. Example of Hotpatch Development for FreeRTOS
This section presents the development process of the
FreeRTOS case study from Section VII-D, following the devel-
opment guidelines described in Section V-B and Section VI-B.
FreeRTOS 9.0.0 is vulnerable to CVE2018-16601 [56]. The
reason for this vulnerability is a missing bounds check on the
length of the IP Header [57]. The vulnerable function is called
prvProcessIPPacket and is located in the ﬁle FreeRTOS_IP.c.
A comparison with the current FreeRTOS 10.0.3 shows the
bounds check that was implemented to mitigate this vulnera-
bility. Listing 1 lists the source code of the patch.
We backported the source-level patch into the vulnera-
ble FreeRTOS version and compiled two binaries, with and
without the patch. With the use of Radare2, we performed a
binary diff that reveal the assembly instructions in Listing 2
that perform the bounds check. In a binary diff, newly inserted
assembly instructions are marked with a ’+’ symbol. This indi-
cates the trampoline insertion point. To cope with limitations of
the FPB unit, the insertion point is shifted to the ﬁrst precedent
instruction at a 4-byte aligned memory address.
As explained in Section V-B, some instructions have to be
adjusted. In case the patch should continue directly after the
trampoline, the patch requires a return to the dispatcher and
jump_section. In case the branch target is outside the patch,
4https://www.radare.org/n/
Listing 2: Binary diff between the vulnerable and the patched
FreeRTOS binary
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
lsls r3, r3, 2
and r3, r3, 0x3c
str r3, [r7, 0x24]
+ ldr r3, [r7]
+ ldr r3, [r3, 0x1c]
+ subs r3, 0xe
+ ldr r2, [r7, 0x24]
+ cmp r2, r3
+ bhi 0x801619a
+ ldr r3, [r7, 0x24]
+ cmp r3, 0x13
+ bhi 0x801619e
+ movs r3, 0
+ b 0x80162ca
ldr r3, [r7, 4]
the offset between RAM and ROM is typically too large to
be coded directly into a branch instruction. This control-ﬂow
redirection is the reverted case of the jump_section control-
ﬂow redirect. The branch is performed by manipulating the
program counter register, which contains the memory location
of the next instruction to execute.
D. Patch Application
it
After the patch has been developed,
is transmitted
processed, and ﬁnally activated on the target device. This is
performed by the updater service which executes as a low-
priority task to handle the tasks described in Section V-B.
Apart from the actual patch, a patch ﬁle also contains an inser-
tion point, a trampoline, and a hardware breakpoint. All of this
can be combined into a simple binary ﬁle format. For both, the
updater and the patch format, already implemented solutions
exist. These solutions can be adopted for industrial usage as
such update methods are common among IoT devices [1]. The
updater fetches and processes the patch ﬁle. Next, the updater
triggers the atomic switchover once all FPB and patch prepara-
tion is ﬁnished, i.e., sending the patch activation signal. This
is done by the library functions load_patch_and_dispatcher
and enable_single_patch as described in Section VI-A. As the
updater task is preemptable and patch activation is atomic, no
update time needs to be deﬁned or selected. The patch can be
activated as soon as possible without negative impact on the
application.
E. Example of Hotpatch Application for FreeRTOS
We implemented an updater service as described in Sec-
tion VII-D and Section VI-D. The updater task handles the
patch preparation and performs the atomic switchover. Af-
terwards, the FPB unit continuously monitors the program
execution and halts the CPU at
the predeﬁned trampoline
insertion point. Thereafter, the breakpoint drops this instruction
and replaces it with the trampoline. Those steps are described
in detail in Section V-B. The resulting instructions of the
process after the run-time code-remapping are visualized in
Listing 3. In line 4, the canceled instruction is replaced by a
branch to the jump_section, i.e., the patch.
The control-ﬂow is redirected to the jump_section, a special
function serving as entry-point of the patch. This entry point
9
Listing 3: Instruction replacement on breakpoint hit
push {r7, lr}
[...]
ldrb r3, [r3]
lsls r3, r3, 2 bl jump_section
and r3, r3, 0x3c
[...]
Listing 4: Dispatcher in the FreeRTOS case study
push {r3}
ldr.w r3, [0x20000052]; dispatcher entry
cmp lr, r3
beq 0x20000074; patch location
[...]
pop {r3}
pop {r7, pc}
1
2
3
4
5
6
1
2
3
4
5
6
7
is required as no direct branch from ROM to RAM is possible
on the used hardware, as described in Section V-B. The
jump_section manipulates the program counter (PC) shifting
execution to the dispatcher. The dispatcher checks the origin
of each control-ﬂow redirection, indicated by the LR register.
This register contains the return address, which is stored
automatically by each branch and link (BL) instruction. A
comparison between the current origin (LR) and each possible
origin (dispatcher entry) can determine the patch to execute,
which is shown in the resulting dispatcher code presented in
Listing 4.
VII. EVALUATION
To demonstrate the practicability of our hotpatching frame-
work HERA, we conducted diverse measurements and case
studies in our evaluation. In particular, we evaluate HERA
based on the open-source implementation of two real-world
medical devices (a syringe pump and a heartbeat sensor),
which both provide critical functionality and real-time re-
quirements. We port the two programs to our target hardware
platform and even integrated the electrical part of both devices,
i.e., actuators, sensors, and displays to facilitate evaluation
of HERA based on a real and representative physical setup.
The representative test setup is shown in Figure 5. As no
vulnerability is known for the open-source implementation of
both devices, we implanted typical memory corruption vul-
nerabilities (out-of-bounds write) allowing a remote attacker
to compromise the devices.
As the HERA framework patches systems on binary level,
hotpatch development can be conducted on basis of binaries
as well as using source code. However, developing patches
for real-world embedded systems rises several challenges.
Typical embedded devices do not come with the possibility
to easily modify the software they run. Porting the software
to development hardware leaves manifold issues due to the
close interactions with the hardware. While it
is straight-
forward to develop patches using source-code or a binary
with minimal changes, this is more complicated if a binary
contains a multitude of changes as more than a single bug
are ﬁxed. For the measurement study, exact knowledge of
the internal software and debug features of the processor are
Figure 5: Photo of the implemented setup.
required. Therefore, our case study bases on two open-source
medical devices, where both source code and hardware setup
are publicly available and well-documented.
Embedded devices often execute software written in
memory-unsafe languages, likewise our example projects. Due
to the manual memory management, memory errors are preva-
lent and often lead to critical software vulnerabilities [58].