if (flush_reload(lut + i * 4096)) {
report(i);
}
caches the results of recent translations. In the case of a page miss,
i.e., when the virtual address is not found in the dTLB, the page miss
handler (PMH) attempts to consult the page table to find the trans-
lation. In most cases, this translation can be done while the µOP
is speculative. However, in some cases, the page walk has side ef-
fects that cannot take place until the µOP retires. Specifically, store
operations should mark pages as dirty and all memory operations
should mark pages as accessed. Performing these side effects while
the µOP is speculative risks generating an architecturally-visible
side effect for a transient µOP. (Recall that the processor cannot
determine whether speculative µOPs will retire or not.) At the same
time, recording all the information required for setting the bits
on retirement would require a large amount of hardware that will
only be used in relatively rare cases. Thus, to handle these cases,
the processor re-dispatches the µOP and arranges for a microcode
assist to set the bits when the µOP retires. See the patent [20] for
further details on the process.
Recall (Section 2.2) that Canella et al. [10] classify transient-
execution attacks based on the cause of transient execution. Spectre-
type attacks are caused by misprediction of data or control flow,
whereas Meltdown-type attack are caused by transient execution
beyond a fault. As described above, a µOP re-dispatch occurring as
part of handling microcode assists also causes transient execution.
Assist-based WTF. To test the effects of microcode assists on the
WTF shortcut, we use the code in Listing 3. To mark attack_page
as not accessed (Line 7), we can either use the Linux idle page
tracking interface [17] or the page table manipulation options in
SGX-Step [75]. Using these methods for clearing the accessed bit
requires elevated privileges. However, some operating systems may
clear the accessed bit regularly or upon paging pressure, obviating
the need for root access. Furthermore, because microcode assists do
not generate faults, we do not need fault suppression, and remove
the TSX transaction.
Canella et al. [10] list sev-
Assist-based vs. Meltdown-type.
eral properties of Meltdown-type attacks. Assist-based transient
execution shares some properties with Meltdown-type techniques.
Specifically, it relies on deferred termination of a µOP to bypass
hardware security barriers and attacks based on it can be miti-
gated by preventing the original leak. However, unlike Meltdown-
type techniques, assists do not rely on architectural exceptions.
Consequently, no fault suppression techniques are required. Thus,
assist-based techniques represent a new cause to trigger transient
execution. In a concurrent work, Schwarz et al. [68] also identify
that assists result in transient execution. They extend the definition
of Meltdown-type to include microcode assists, which they describe
as “(microarchitectural) faults”.
5.2 Analyzing WTF
In this section we deepen our investigation of WTF by considering
various causes for faulting loads and the fault suppression used.
Particularly, for fault-suppression we experiment with both TSX-
based suppression and with using branch misprediction. We ran
our experiments on three Intel processors: Coffee Lake R i9-9900K,
Kaby Lake i7-7600U, and Skylake i7-6700. The only exception is
Protection Keys, which are not available on these processors, and
were tested on a Xeon Silver 4110 processor. To the best of our
knowledge, no Coffee Lake R processor supports Protection Keys.
We summarize the results in Table 1.
We use the toy example in Listing 1 with multiple combinations
of causes of illegal loads and fault-suppression mechanisms for the
load. Following the analysis by Canella et al. [10], we systematically
investigated the following exception types as causes for illegal loads.
Non-Canonical. We found that the easiest way to trigger WTF is
by provoking a general protection exception (#GP) when accessing a
non-canonical address outside of the valid range of virtual addresses
represented by the processor [38]. Our experiments show that this
technique works reliably on all tested processors and exception
suppression mechanisms.
Supervisor Fault. We note that on Linux even when KPTI is
enabled, some kernel code pages remain mapped in a user process’s
address space (see Section 6.1) and can hence be used to provoke
faulting loads on kernel addresses (raising a #PF exception). We
found that supervisor page faults can be successfully abused to
trigger WTF on all tested processors and exception suppression
mechanisms.
For complete-
Supervisor Mode Access Prevention (SMAP).
ness, we also tested whether WTF can be triggered by SMAP fea-
tures [38]. For this experiment, we explicitly dereference a user
space pointer in kernel mode such that SMAP raises a #PF exception.
We observed that SMAP violations may successfully trigger the
WTF shortcut on all tested processors and exception suppression
mechanisms. While we do not consider this to be an exploitable
attack scenario, SMAP was to the best of our knowledge previously
considered to be immune to any Meltdown-type effects [10].
Protection Key Fault. We investigated triggering WTF via
reading from pages marked as unreadable using Intel’s Protection
Key mechanism [38], which also raises a page fault (#PF) exception.
We found that Protection Key violations may successfully trigger
WTF on the tested Xeon processor with all exception suppression
mechanisms.
Misalignment in Advanced Vector Extensions (AVX). We
investigated whether WTF may also be triggered by general pro-
tection fault exceptions (#GP) generated by misaligned AVX load
instructions [38]. Interestingly, we found that this technique works
exclusively using TSX exception suppression on recent Coffee Lake
R processors.
Non-Present Fault and Coffee Lake R Regression. We in-
vestigated triggering WTF from non-present pages both with and
Fault Suppression
Architecture
Non-canonical
Kernel pages
User pages with SMAP
Protection keys
AVX misalignment
Not present with PTE inversion
Not present without PTE inversion
TSX
Pre CL R CL R
Misprediction
Pre CL R CL R
✓
✓
✓
✓
✗
✗
✗
✓
✓
✓
N/A
✓
✓
✗
✓
✓
✓
✓
✗
✗
✗
✓
✓
✓
N/A
✗
✗
✗
Table 1: Evaluating the WTF shortcut using different fault-
inducing and fault-suppression mechanisms on Intel archi-
tectures before Coffee Lake R (pre CL R) and on Coffee Lake
R (CL R). ✓ and ✗ indicate attack success. ✓○ and ✗○ indicate
behavior change in Coffee Lake R.
without PTE inversion [13]. In our experiments, we created the
former using the mprotect system call with the permission set to
PROT_NONE, and the latter by unmapping the target page using the
munmap system call. While dereferencing non-present pages always
causes the CPU to raise a page fault (#PF) exception, we noticed
a troubling regression in Intel’s newest Coffee Lake R architecture.
Where, unlike earlier generations, we can successfully trigger the
WTF shortcut on Coffee Lake R processors when accessing a page
marked as non-present from within a TSX transaction.
Interestingly, our investigation revealed that the behavior in the
case of non-present pages depends on the contents of the page-
frame number in the page-table entry. Specifically, we have only
seen WTF working on Coffee Lake R when the page-frame number
in the PTE refers to an invalid page frame or to EPC pages. We
note that widely deployed PTE inversion [13] software mitigations
for Foreshadow modify the contents of the page-frame number
for pages protected with mprotect to point to invalid page frames
(i.e., not backed by physical DRAM). Our experiments show that
the WTF shortcut is only triggered when loading from these pages
from within a TSX transaction, whereas WTF seems not to be
activated when dereferencing unmapped pages with valid page-
frame numbers, both inside or outside TSX. We suspect that the
CPU inhibits some forms of transient execution within branch
mispredictions while allowing them in TSX transactions.
5.3 Analyzing Store-to-Leak
Store-to-Leak exploits address resolution logic in the store buffer.
Namely, that in case of a full virtual address match between a load
and a prior store, store-to-load forwarding logic requires that the
load operation may only be unblocked after the physical address
of the prior store has been resolved [33]. In this case, if the tested
virtual address has a valid mapping to a physical address, whether
accessible to the user or not, the store is forwarded to the load.
Recovering Information About Address Mapping. The suc-
cess of Store-to-Leak, therefore, provides two types of side-channel
information on the address mapping of the tested virtual address.
First, we observed that Data Bounce reliably triggers forwarding
in the first attempt when writing to addresses that have a valid
virtual mapping in the TLB. Secondly, when writing to addresses
CPU
Pentium 4 531
i5-3230M
i7-4790
i7-6600U
i7-6700K
i7-8650U
i9-9900K
E5-1630 v4
Data Bounce Fetch+Bounce
Speculative
Fetch+Bounce
WTF
✓
✓
✓
✓
✓
✓
✓
✓
✗
✓
✓
✓
✓
✓
✓
✓
✗
✓
✓
✓
✓
✓
✓
✓
✗
✓
✓
✓
✓
✓
✓
✓
Table 2: Attack techniques and processors we evaluated.
that have a valid physical mapping but are currently not cached
in the TLB, we found that Store-to-Leak still works after multiple
repeated Data Bounce attempts. Overall, as Data Bounce never per-
forms forwarding for unmapped addresses that do not have a valid
physical mapping, the attacker may learn whether an address has
a valid physical mapping and whether this mapping was cached
inside the TLB.
Finally, we also observed two exceptions to the above, in which
Store-to-Leak may still trigger forwarding for addresses that are
not backed by a valid virtual address mapping. We now proceed to
explain these exceptions and how they affect Store-to-Leak.
First, we
The Strange Case of Non-Canonical Addresses.
experimentally confirmed that on all tested processors, Data Bounce
forwards data when writing to and subsequently reading from a
non-canonical address. This behavior is peculiar since dereferencing
non-canonical addresses always generates a general protection fault
(#GP) as these addresses are invalid by definition and can never be
backed by a physical address [38]. We note, however, that all attack
techniques based on Store-to-Leak only use canonical addresses
and our attacks are hence not hindered by these observations.
Secondly, we noticed
Non-Present Pages and Coffee Lake R.
a different behavior in Intel’s newest Coffee Lake R architecture.
Where, unlike earlier generations, we can successfully trigger Data
Bounce when accessing a non-present page from within a TSX
transaction. Notably, we have only seen Store-to-Leak forwarding
for non-present pages on Coffee Lake R when the page-frame num-
ber in the PTE refers to an invalid page frame, and Data Bounce
executes within a TSX transaction. We have not seen this behav-
ior with any other fault-suppression primitive or on any other
TSX-enabled CPU. Furthermore, note that we never encountered
an inverted kernel page table entry, but instead observed that un-
mapped kernel pages always have an all-zero page-frame number.
Hence, the Store-to-Leak attacks described in this paper are not
affected by these observations.
5.4 Environments
We evaluated all attack techniques on multiple Intel CPUs. All
attack primitives worked on all tested CPUs, which range from the
Ivy Bridge architecture (released 2012) to Whiskey Lake and Coffee
Leak R (both released end of 2018). The only exception is a Pentium
4 Prescott CPUs (released 2004), on which only Data Bounce works.
Table 2 contains the list of CPUs we used for evaluation.
Next, the attack primitives are not limited to the Intel’s Core
architecture but also work on Intel’s Xeon architecture. Thus, our
attacks are not limited to consumer devices, but can also be used
in the cloud. Furthermore, our attacks even work on CPUs with
silicon fixes for Meltdown and Foreshadow, such as the i7-8565U
and i9-9900K [16]. Finally, we were unable to reproduce our attack
primitives on AMD and ARM CPUs, limiting the attacks to Intel.
6 ATTACKS ON ASLR
In this section, we evaluate our attack on ASLR in different scenar-
ios. As Data Bounce can reliably detect whether a physical page
backs a virtual address, it is well suited for breaking all kinds of
ASLR. In Section 6.1, we show that Data Bounce is the fastest way
and most reliable side-channel attack to break KASLR on Linux,
and Windows, both in native environments as well as in virtual
machines. In Section 6.2, we describe that Data Bounce can even
be mounted from JavaScript to break ASLR of the browser.
6.1 Breaking KASLR
We now show that Data Bounce can reliably break KASLR. We
evaluate the performance of Data Bounce in two different KASLR
breaking attacks, namely de-randomizing the kernel base address
as well as finding and classify modules based on detected size.
De-randomizing the Kernel Base Address. On Linux systems,
KASLR had been supported since kernel version 3.14 and enabled
by default since around 2015. As Jang et al. [45] note, the amount
of entropy depends on the kernel address range as well as on the
alignment size, which is usually a multiple of the page size.
We verified this by checking /proc/kallsyms across multiple
reboots. With a kernel base address range of 1 GB and a 2 MB align-
ment, we get 9 bits of entropy, allowing the kernel to be placed at
one of 512 possible offsets.
Using Data Bounce, we now start at the lower end of the address
range and test all of the 512 possible offsets. If the kernel is mapped
at a tested location, we will observe a store-to-load forwarding
identifying the tested location as having a valid mapping to a phys-
ical address. Table 3 shows the performance of Data Bounce in
de-randomizing kernel ASLR. We evaluated our attack on both an
Intel Skylake i7-6600U (without KAISER) and a new Intel Coffee
Lake i9-9900K that already includes fixes for Meltdown [51] and
Foreshadow [74]. We evaluated our attack on both Windows and
Linux, achieving similar results.
For the evaluation, we tested 10 different randomizations (i.e., 10
reboots). In each, we try to break KASLR 100 times, giving us a total
of 1000 samples. For evaluating the effectiveness of our attack, we
use the F1-score. On the i7-6600U and the i9-9900K, the F1-score for
finding the kernel ASLR offset is 1 when testing every offset a single
time, indicating that we always find the correct offset. In terms
of performance, we outperform the previous state of the art [45]
even though our search space is 8 times larger. Furthermore, to
evaluate the performance on a larger scale, we tested a single offset
100 million times. In that test, the F1-score was 0.9996, showing
that Data Bounce virtually always works. The few misses that we
observe are possibly due to the store buffer being drained or that
our test program was interrupted.
Finding and Classifying Kernel Modules. The kernel reserves
1 GB for modules and loads them at 4 kB-aligned offset. In a first
step, we can use Data Bounce to detect the location of modules
by iterating over the search space in 4 kB steps. As kernel code is
Target
Processor
Skylake (i7-6600U)
Coffee Lake (i9-9900K)
base
direct-physical
module
base
direct-physical
module
1
3
32
1