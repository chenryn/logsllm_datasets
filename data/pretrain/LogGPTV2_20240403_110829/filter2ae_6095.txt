#### 前言
* * *
最近出现了很多拜帕斯的文章，好像什么被点燃了，作为一个浮躁的热血菜逼青年。
#### 遗漏标签
* * *
类似这样的标签还有一些，对于WAF来说，要考虑在数据清洗过程中资源的消耗，业务方面问题，造成的一某方面的漏洞，我们从`架构` `规则缺陷/特性`
`协议`这三方面去思考，可能找到Bypass的方法。  
(`上图引用自ZP讲师视频`)
#### Top属性类似的补充
* * *
控制台中输入  
类似的属性还有好几个  
payload:
总结起来有 top self parent frames content window，无疑top是最短的。
#### 其他补充
* * *
一般我们把payload进行编码 ，或者敏感部分进行编码可以达到绕过WAF的作用  
payload:
    JS8编码：
    JS16编码：
    其他
#### parseInt()与toString()
* * *
`parseInt()`  
例子: `alert`字符串用`parseInt`函数，以基数为`30`转化后为`8680439`  
`toString()`  
例子: `toString`函数将返回的数字`8680439`,以基数为`30`还原  
这样你就能理解下面这个例子了。
#### 俩个例子
* * *
2个payload很久就有了，但是思路可以学习，我第一次看到时，感觉很兴奋，可能还是太年轻了。
这个例子很巧妙，将alt和lang属性分别赋值合并起来就是alert，并在top属性内将2个属性相加。
在top属性内添加2个变量，并赋值构造eval，然后执行alert(1)  
测试下，拦截了。  
其实waf拦截的是alert这个关键字，换个`prompt`函数就过了。  
也可以选择将`alert(1)`编码，因为有`eval`存在啊，直接拿来用
setTimeout()函数也是没问题的，毕竟也能执行代码。
#### eval函数的补充
* * *
为啥叫这个名字呢，现在想想好傻，大概想表达的是和这个`alert`差不多的效果(╯▽╰)╭
`setTimeout`  
`setInterval`与`setInterval`不同，对于`setTimeout`只执行code一次。
绕过waf，引用外部js。
##### 其他
    拆分与编码
    结合函数：
#### constructor属性
payload:
#### 后记
* * *
测试WAF是几个月前的，所以有些可能会失效，以前刚开始学习web时，觉得xss就是弹个框，好无聊。直到自己决定写一点点总结关于xss的时候，在学习的过程，每当自己构造
~~抄袭~~ 的payload弹框时，都很兴奋，很满足，对着电脑傻笑，我想这就是我想要的ლ(•̀ _ •́ ლ)
## 参考致谢
* * *
[vulnerability-lab.com](http://www.vulnerability-lab.com/resources/documents/531.txt)
[swisskyrepo/PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection)