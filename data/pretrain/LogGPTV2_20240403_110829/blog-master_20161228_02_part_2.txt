timing on
postgres=# explain (analyze on,verbose on,timing on,costs on,buffers on,summary on) select count(*) from item1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=254.75..254.75 rows=1 width=8) (actual time=16.712..16.712 rows=1 loops=1)
   Output: count(*)
   Buffers: shared hit=1334
   ->  Seq Scan on public.item1  (cost=0.00..38.00 rows=100000 width=0) (actual time=0.007..10.242 rows=100000 loops=1)
         Output: i_id, i_im_id, i_name, i_price, i_data
         Buffers: shared hit=1334
 Planning Time: 0.043 ms
 Execution Time: 16.730 ms
(8 rows)
```
2\. hpet  
```  
#echo hpet > /sys/devices/system/clocksource/clocksource0/current_clocksource   
postgres=# explain analyze SELECT COUNT(*) FROM tbl_time;  
                                                         QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=169247.71..169247.72 rows=1 width=8) (actual time=13968.218..13968.218 rows=1 loops=1)  
   ->  Seq Scan on tbl_time  (cost=0.00..144247.77 rows=9999977 width=0) (actual time=0.018..7067.711 rows=10000000 loops=1)  
 Planning time: 0.059 ms  
 Execution time: 13968.271 ms  
(4 rows)  
```  
3\. acpi_pm  
```  
#echo acpi_pm > /sys/devices/system/clocksource/clocksource0/current_clocksource   
postgres=# explain analyze SELECT COUNT(*) FROM tbl_time;  
                                                         QUERY PLAN                                                            
-----------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=169247.71..169247.72 rows=1 width=8) (actual time=19641.242..19641.243 rows=1 loops=1)  
   ->  Seq Scan on tbl_time  (cost=0.00..144247.77 rows=9999977 width=0) (actual time=0.018..9896.285 rows=10000000 loops=1)  
 Planning time: 0.060 ms  
 Execution time: 19641.296 ms  
(4 rows)  
```  
## 使用pg_test_timing测试不同的时钟硬件在使用gettimeofday时带来的性能影响  
pg_test_timing是用来测试不同硬件时钟的损耗的，使用gettimeofday进行测试  
下面是测试  
1\. tsc  
```
pg_test_timing   
Testing timing overhead for 3 seconds.  
Per loop time including overhead: 47.70 nsec  
Histogram of timing durations:  
< usec   % of total      count  
     1     95.23986   59893249  
     2      4.75540    2990515  
     4      0.00384       2414  
     8      0.00077        485  
    16      0.00013         79  
    32      0.00000          3  
    64      0.00000          1  
```
2\. hpet  
```
pg_test_timing   
Testing timing overhead for 3 seconds.  
Per loop time including overhead: 696.44 nsec  
Histogram of timing durations:  
< usec   % of total      count  
     1     31.81944    1370669  
     2     67.06767    2889038  
     4      1.03890      44752  
     8      0.05959       2567  
    16      0.01418        611  
    32      0.00016          7  
    64      0.00005          2  
```
3\. acpi_pm  
```
pg_test_timing   
Testing timing overhead for 3 seconds.  
Per loop time including overhead: 919.07 nsec  
Histogram of timing durations:  
< usec   % of total      count  
     1     12.25423     399999  
     2     84.17305    2747553  
     4      3.45019     112620  
     8      0.08648       2823  
    16      0.03468       1132  
    32      0.00132         43  
    64      0.00003          1  
   128      0.00003          1  
```
根据以上测试，可以预估前面EXPLAIN ANALYZE带来的问题  
```  
acpi_pm  
<1到底是多少不知道了，<1越多，误差越大  
10000000*(1*0.1225+2*0.8417)/1000000    
hpet  
<1到底是多少不知道了，<1越多，误差越大  
10000000*(1*0.3182+2*0.6706)/1000000    
tsc   
不太好估算，因为<1到底是多少不知道了  
10000000*(1*0.9524+2*0.0475)/1000000    
```  
## auto_explain log timing也有类似问题
当开启auto_explain的timing计数后，由于时钟开销的问题，可能严重的影响性能，如本文所示，即使使用TSC时钟，对于扫描记录数很多的时候，性能下降了一倍。     
虽然auto_explain有一个超时阈值，但是当你开启了timing的记录后，就会导致它把所有的NODE执行时间都记录下来，因为执行结束前，并不知道总时间会不会超，所以每条QUERY的ANALYZE TIMING都会被开启。  
建议如果不是特殊需求，不要开启auto_explain timing选项。  
## 参考  
https://www.ibm.com/developerworks/cn/linux/1308_liuming_linuxtime4/  
https://www.postgresql.org/docs/9.6/static/pgtesttiming.html  
https://www.postgresql.org/docs/9.6/static/auto-explain.html    
https://www.postgresql.org/message-id/flat/31856.1400021891%40sss.pgh.pa.us  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")