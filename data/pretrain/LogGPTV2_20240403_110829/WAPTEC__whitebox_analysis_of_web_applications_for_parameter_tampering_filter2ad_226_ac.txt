23 }
4.2 Extracting constraints from server-side
code
The formula fserver represents server side validation and san-
itization of user inputs. To generate fserver, we ﬁrst capture a
trace comprising of statements that the server executed to process
user inputs. For the running example (Listing 2), Listing 3 shows
the generated trace for inputs card=’card-1’, name=’alice’,
address=’wonderland’, op=’purchase’ and quantity=1. Each
line in the generated trace Listing 3 corresponds to the line in the
running example Listing 2 that generated it.
To generate fserver, we need to identify statements in a trace that
correspond to validation / sanitization done by the server side code.
The server-side code may perform user input validation and saniti-
zation in the following three ways: a) explicit validation of desired
properties of user inputs in conditional statements and b) implicit
validation / sanitization of user inputs through inbuilt functions in
server-side code and c) implicit validation / sanitization of user in-
puts by database. In the running example (Listing 2), validation of
the card parameter at line 2 illustrates explicit validation, trunca-
tion of the name parameter at line 8 illustrates explicit sanitization
(as execution of line 8 ensures that value of the name parameter
will contain 10 or less characters) and rejection of null value for
the parameter address exempliﬁes database sanitization / valida-
tion. fserver is essentially computed by identifying and analyz-
ing all the three types of validation / sanitization constructs present
in a trace. We focus on the ﬁrst two types of validation / saniti-
zation constructs here and the database validation / sanitization is
discussed in the next section (Section 4.3).
Extracting constraints due to explicit validation.
Explicit
validation of user inputs is captured by IF statements appearing
in a trace e.g., four IF statements shown in the trace in Listing 3,
capturing validation of parameters card, name, op and discount,
respectively. To learn the constraint being checked by an IF state-
ment, we analyze its condition argument. Each such condition ar-
gument is then repeatedly expanded until it only contains user in-
(cid:48)
card − 1|card − 2
puts, concrete values and operators. For example, the IF statement
on Line 2 (Listing 3) checks if
(cid:48). We expand $main_ca
$main_ca matches
with $_POST[(cid:48)
(cid:48)] because of the assignment statement on Line 1.
card
Intuitively, starting from the IF statement the above process walks
backwards in the trace and replaces server-side variables appearing
in conditions with values assigned to them until the condition is
expressed in terms of inputs, concrete values and operators.
A challenge in precisely capturing explicit validation in IF state-
ments stems from the presence of irrelevant statements. A naive ap-
proach that considers all IF conditions as relevant to a sink would
report imprecise results. For example, consider the ﬁrst IF state-
ment in the trace (Listing 3). This IF statement checks the value of
parameter card and sets the HTML form to show the selected en-
try. Although the trace contains check on card, it does not prevent
the query computed at line 20 from using malicious values of card.
Similarly, a form may contain several parameters but a server side
sink may only use some of them. Therefore, our analysis must fac-
tor whether a tampered parameter is actually going to be used at a
sensitive operation.
WAPTEC identiﬁes conditionals relevant to a given sink by em-
the data depen-
ploying data- and control-dependency analysis:
dency analysis identiﬁes conditionals that actually contributed data
to a sink, and the control dependency analysis identiﬁes condition-
als that actually dictated control ﬂow to a sink. For the running
example, the query executed at line 20 is neither data nor control
dependent on conditional statement at line 2 and hence this condi-
tional is ignored while analyzing sink at line 20.
For the trace in Listing 3 the above process contributes the fol-
lowing constraints to the fserver formula:
len(name) ≤ 10 ∧ op = ”purchase” ∧ ¬isset(discount).
Extracting implicit constraints due to sanitization. The server-
side sanitization of user inputs may inherently enforce constraints
on user inputs. For example, at line 8 (Listing 2) server-side vari-
able $n which contains value of the parameter name, is sanitized. In
speciﬁc, by truncating the name parameter with substr function,
the server-side code ensures that after this sanitization the contents
of $n variable will have 10 or less characters i.e., it implicitly en-
forces the constraint len (name) ≤ 10.
WAPTEC avoids analyzing paths that would result in generat-
ing false alarms due to such sanitization. To see, we revisit the ba-
sic process by which WAPTEC identiﬁes paths to a success sink.
Notice that we demand that this path is satisﬁed by an input that
satisﬁes fclient. In the event the server chooses to apply sanitiza-
tion of input to satisfy fclient, such a path will not be considered
by WAPTEC for trace analysis, because a benign input will never
traverse that path. For example, in Listing 2, the statement in Line 8
will never be executed by WAPTEC.
Nevertheless, an application may have incomplete or partial sani-
tization. To handle these cases, we capture such implicit constraints
by analyzing the sink expression (e.g., SQL query), and demand-
ing that fclient be held true by the sink expression. We express the
sink expression purely in terms of user inputs and concrete values
by following a process similar to expansion of IF conditions. The
resulting SQL sink expressions are then parsed with a SQL parser
thus identifying data arguments to SQL queries which contain user
inputs (or a function of user inputs). Currently, the restrictions on
the operators appearing in the sink expression are limited to the
language (shown in Table 1) supported by the underlying solver (as
described in §5.2).
5804.3 Extracting constraints from database
Database query operations present interesting consequences for
approaches that analyze server-side code. With respect to such op-
erations, many security analysis approaches limit their reasoning to
reachability, e.g., most tainting approaches aim to ﬁnd if a tainted
data item can reach a database query execution location. Without
analyzing outcome of the query execution, such approaches will
result in imprecision as database engine may either sanitize hos-
tile inputs to comply with its schema or reject them. For black-
box approaches, database triggered sanitization may result in false
alarms. Additionally, whitebox approaches that ignore these con-
straints may never generate a benign set of inputs that will be truly
accepted at the sink. For our running example, without considering
database constraint (NOT NULL) on the address ﬁeld, it is not
possible to generate acceptable benign inputs. Note that this also
forbids discovery of legitimately exploitable parameters for such
sinks, thus resulting in false negatives e.g., the quantity exploit
cannot be constructed without providing a non-null address value.
We ﬁrst note that the database schema is a sequence of SQL
queries that creates different tables and views and expresses cer-
tain restrictions on data that can be inserted into each column of a
table. Suppose we know that a user input u is being inserted into a
column c of a table, then all constraints implied on c by the database
schema, must be satisﬁed (if validation) or will be enforced when
data is added to the database (if sanitization). However, ﬁnding
the mapping between u (typically server-side variables) and c (col-
umn name in a database table) is challenging as it requires bridging
the namespace differences between application code and database
schema i.e., application code and database tables may refer to same
data with different names. WAPTEC analyzes database schema
and queries issued in traces to build a mapping between server-side
variables and database columns which enables it to then express
constraints imposed by database in terms of user inputs.
In the ﬁrst step, this analysis parses the schema of an applica-
tion’s database. For each table creation statement we analyze the
column deﬁnitions that typically specify constraints on values that
can be stored e.g., “NOT NULL" clause enforces non-null values
whereas enum speciﬁes domain of accepted values. We handle
MySQL formatted schemas and extract such conditions in the solver
language.
In the second step, we generate a symbolic query for SQL sinks
found in traces and parse them. This parsing enables us to map ta-
ble column names to program variables. For example, on parsing
a symbolic SQL query “insert into T (uid, ... values(
’$_GET[u]’,...", we can associate column uid of table T to
program variable $_GET[u]. Once this mapping is available, we
generate constraints by replacing column names with program vari-
ables in constraints generated by the ﬁrst step e.g., if uid column
had a NOT NULL constraint, this analysis will yield a constraint
(NOT NULL u).
Discussion. The above discussion highlights the relationships
between server variable names, client form ﬁeld names and database
ﬁeld names as intended by typical web applications. These rela-
tions are important from the perspective of sanitization as well. We
already discussed a precise way to handle the effect of sanitization
that requires the client validation to hold at the sink expression,
(and is therefore safe for such operation). However, such an ap-
proach needs to make an assumption that the database ﬁeld corre-
sponding to the sink expression represents a corresponding client
form ﬁeld (that is transformed to the sink expression with some
form of sanitization). While the discussions in this section suggest
that such an assumption is reasonable across a large class of web
applications, and indeed holds in the applications that we analyzed,
it is very easy to construe examples where it could break. For in-
stance, consider a (contrived) web application which assigns a sink
expression to a value that does not satisfy client validation, and the
intention behind such an assignment may be beyond the inference
of any automated mechanism. More generally, the above discus-
sion raises the need for a speciﬁcation that provides a mapping be-
tween client inputs and database ﬁelds. While such speciﬁcations
were not needed for the applications we analyzed, the availability
of such speciﬁcations will be able to broaden the applicability of
our analysis.
5.
IMPLEMENTATION
To generate fserver, we need a trace of statements executed by
the server-side code. Section 5.1 provides the high-level details
behind a program transformation that enables PHP applications to
generate a trace and facilitate computation of fserver. Generating
benign and hostile inputs entails solving logical formulas and Sec-
tion 5.2 describes the implementation details of the solver.
5.1 Trace generation transformation
Computation of fserver entails reasoning about server-side pro-
cessing of user inputs e.g., properties of user inputs checked by the
server-side code. We capture the server-side processing of user in-
puts in traces which contain program statements executed by the
server-side code to process user inputs. To generate such traces we
perform source-to-source transformation of applications written in
PHP language. The transformed applications are then deployed and
generate traces apart from processing user inputs.
Alternate implementation.
The other choice for capturing
such traces is to instrument a PHP interpreter itself. Although, this
approach requires less effort on a per application basis, it may re-
quire extensive changes to the PHP interpreter. Also, there are con-
siderable analysis needs that led us to adopt a program rewriting
route. First, we needed taint tracking to identify the ﬂow of un-
trusted inputs. Second, we needed data and control ﬂow analysis
required to identify conditions only relevant to the sink. Third, to
handle PHP5 object-oriented features, we need to unambiguously
identify each object in order to avoid name collisions. While these
can be done by hacking various internal parts of a PHP interpreter,
such changes would generally not be portable across revisions to
the interpreter. Our implementation does so in a much cleaner fash-
ion while retaining portability across various PHP interpreters and
is not broken by revisions to the interpreter.
Avoiding name collisions.
Traces are straight-line PHP pro-
grams comprising only of assignments, calls to inbuilt functions
and IF-THEN statements. A challenge in reporting variable names
in traces is caused by the possibility of name collisions. As traces
are straight-line programs, all functions (except PHP inbuilt) exe-
cuted by the web application need to be in-lined. As this in-lining
merges variables from several lexical scopes it could result in name
collisions and could generate traces that misrepresent run of the
web application e.g., name-collisions could result in traces that in-
correctly capture use / reachability of an important variable. To
avoid name collisions, program transformation attaches a unique
preﬁx to each variable name being reported in the trace. To com-
pute these preﬁxes, we use function / method signatures and for
variables appearing in classes, a per object unique identiﬁer is used
additionally (as described below).
PHP object-oriented features. Object-oriented features are
often used in PHP programs (2 of the 6 applications we evaluated
were object-oriented and used inheritance). As multiple instanti-
ations of a class yield objects with same methods, method signa-
tures are same for all such objects. Thus preﬁxing signatures to
581Examples
Class
Equality * =, (cid:54)=
Numeric * +, ∗, −, /, 
Modal
Regex *
PHP
required
∈, (cid:54)∈
trim, len, concat
Instances
x (cid:54)= y
x < 7
required(x)
x ∈ [abc]*
len(x) < len(concat(y, z))
Table 1: WAPTEC constraint language
variable names may still lead to name collisions in object-oriented
programs. Further, a member variable can be accessed using mul-
tiple namespaces e.g., by using the this operator (inside methods)
or by using names assigned to objects. Although, all such instances
are accessing the same memory region, a naive renaming scheme
may lose precision by failing to identify these accesses with a sin-
gle variable name.
The main changes required to classes are for computing unique
preﬁxes for variables. Here, the transformer adds an id member
variable to the class deﬁnition to hold the unique identiﬁer for each
instance of the class. The constructor methods are augmented to
initialize the id variable to a unique value. Further, inheritance
is inherently handled in this scheme as the id member of inher-
iting class shadows the id member of base class. With the help
of id variable, accesses to a member variable through an object
($o→member1) or the this operator ($this→member1) are uni-
formly transformed as v_$id_member1. This enables subsequent
analysis to correctly identify accesses to a single memory location
from disparate namespaces.
As fserver mainly concerns processing of user inputs, the trans-
former ensures that the generated traces only contain statements
manipulating user inputs. We use standard taint tracking tech-
niques to track user inputs and only include statements manipu-
lating tainted arguments in traces. Special care was needed to ini-
tialize and propagate taint as PHP recursively deﬁnes some of the
inbuilt arrays e.g., super global array GLOBALS contains itself as a
member.
5.2 String solver
The string solver component analyzes logical formulae to con-
struct inputs that are fed to the server; some of those inputs the
system was designed to accept, while other inputs are intended to
expose server-side vulnerabilities. The string solver component of
WAPTEC was built on top of Kaluza [21], a state-of-the-art solver
that ﬁnds variable assignments satisfying string and numeric con-
straints. The main challenge in building the string solver compo-
nent was translating the WAPTEC constraint language into the lan-
guage supported by Kaluza.
Constraint language. WAPTEC allows all boolean combina-
tions of the atomic constraints shown in Table 1. The equality and
numeric constraints are standard; regular expression constraints re-
quire a variable to belong to a given regular expression; PHP con-
straints include functions from PHP and JavaScript such as trim
(found in e.g., the MyBloggie application) for removing whites-
pace from the ends of a string and strpos for computing the index
at which one string appears inside another string. Kaluza roughly
supports those categories of constraints marked with an asterisk,
plus functions for computing the length of a string and concatenat-
ing two strings. Thus, translating WAPTEC’s constraint language
to Kaluza’s language requires handling modals and PHP functions.
Static versus dynamic typing. Besides the difference in atomic
constraints, there is a more fundamental difference between the
constraint languages of Kaluza and WAPTEC. Kaluza requires ev-
ery variable to have a single type and does not provide functions
to cast from one type to another1, whereas PHP allows variables to
take on arbitrary values. This mismatch makes the translation dif-
ﬁcult because a constraint such as x (cid:54)= 0 ∧ x (cid:54)= “0” causes a type
error in Kaluza but appears frequently in the semantics of PHP, e.g.,
when deﬁning whether a variable evaluates to true or false.
Our approach approximates the semantics of PHP functions with
a combination of type inference to detect type mismatches, type
resolution to choose one type for mismatched arguments, static
casting to convert problematic arguments to the chosen types, and
type-based simpliﬁcation to eliminate constraints that do not actu-
ally affect the satisﬁability of the constraints but cause Kaluza to
throw type errors.
Untranslatable constraints. Some of WAPTEC’s constraints
cannot faithfully be translated into Kaluza’s constraint language.
For example, PHP employs a number of built-in data structures
not handled by Kaluza, and PHP functions often accept and re-