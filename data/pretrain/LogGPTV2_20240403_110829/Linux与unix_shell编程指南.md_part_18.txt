### 第二部分 文本过滤

#### 11.6 paste用法
`cut` 命令用于从文本文件或标准输出中抽取数据列或字段，而 `paste` 则可以将这些数据重新组合成新的文件。在粘贴两个不同来源的数据时，首先需要确保这两个文件的行数相同。

**命令格式：**
```bash
paste [选项] 文件1 文件2
```

**常用选项：**
- `-d 分隔符`：指定不同于空格或制表符的分隔符。例如，使用 `@` 作为分隔符：`-d @`。
- `-s`：将每个文件的内容合并为一行而不是按行粘贴。
- `-`：表示从标准输入读取数据。

**示例：**
1. **基本用法：**
   ```bash
   paste file1 file2
   ```
   将 `file1` 和 `file2` 的每一行内容并排显示。

2. **指定不同的域分隔符：**
   ```bash
   paste -d : file1 file2
   ```
   使用 `:` 作为分隔符来连接 `file1` 和 `file2` 的每一行内容。

3. **合并多行数据：**
   ```bash
   paste -s file1 file2
   ```
   将 `file1` 和 `file2` 的所有行合并为一行。

4. **管道输入：**
   ```bash
   ls -l | paste
   ```
   将 `ls -l` 的输出以单列形式显示。

#### 11.7 split用法
`split` 命令用于将大文件分割成多个小文件。这对于传输大型文件或处理超出内存限制的文件非常有用。

**命令格式：**
```bash
split -l 行数 输入文件 输出文件前缀
```

**示例：**
1. **基本用法：**
   ```bash
   split -l 1000 bigfile.txt smallfile_
   ```
   将 `bigfile.txt` 每 1000 行分割成一个新文件，新文件名以 `smallfile_` 开头，后跟字母顺序（如 `smallfile_aa`, `smallfile_ab` 等）。

2. **分割文件并指定大小：**
   ```bash
   split -b 1M bigfile.txt smallfile_
   ```
   将 `bigfile.txt` 每 1MB 分割成一个新文件。

#### 11.8 小结
本章介绍了对文本文件进行基本合并和分割处理的各种工具，包括 `sort`, `join`, `split`, `uniq`, `cut` 和 `paste`，并通过大量实例展示了它们的用法。掌握这些工具将大大提高处理文本文件的效率。

---

### 第十二章 tr 用法

#### 12.1 关于 tr
`tr` 命令用于从标准输入中通过替换或删除操作进行字符转换。它主要用于删除文件中的控制字符或进行字符转换。

**命令格式：**
```bash
tr [选项] "字符串1" "字符串2"
```

**常用选项：**
- `-c`：使用字符串1中字符集的补集进行替换。
- `-d`：删除字符串1中所有出现的字符。
- `-s`：压缩重复的字符序列。

**示例：**
1. **去除重复字符：**
   ```bash
   tr -s 'a-z' < input.txt > output.txt
   ```
   压缩 `input.txt` 中的所有连续字母。

2. **删除空行：**
   ```bash
   tr -s '\n' < input.txt > output.txt
   ```
   删除 `input.txt` 中的所有空行。

3. **大小写转换：**
   ```bash
   tr 'A-Z' 'a-z' < input.txt > output.txt
   ```
   将 `input.txt` 中的大写字母转换为小写字母。

4. **删除指定字符：**
   ```bash
   tr -cd 'a-zA-Z\n' < input.txt > output.txt
   ```
   删除 `input.txt` 中所有非字母字符。

5. **转换控制字符：**
   ```bash
   tr -d '\r' < dosfile.txt > unixfile.txt
   ```
   删除 `dosfile.txt` 中的回车符，将其转换为 Unix 格式。

#### 12.2 小结
`tr` 主要用于字符转换或删除控制字符。虽然 `sed` 可以完成类似的功能，但 `tr` 更加简单快捷。

---

### 第三部分 登录环境

#### 第十三章 登录环境
登录系统时，在进入命令提示符之前，系统会执行两个主要步骤：
1. 验证用户名和密码的有效性，这通常通过查询 `/etc/passwd` 文件来完成。
2. 设置用户的登录环境。

如果用户名和密码有效，系统将开始设置用户的登录环境。