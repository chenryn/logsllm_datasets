:::
图16-3 apktool项目引入的jar包
###### 3.解析资源文件 {.section-subtitle}
这个方法是用来解析resource.arsc文件的，这个文件主要包含了所有资源文件的一种格式。Android中资源文件都有相应的类型，以及唯一的一个整型id值，那么这个文件就包含这些内容，如下所示：
::: bodypic-c
![](OEBPS/Images/246-i.jpg){.calibre504}
:::
::: bodypic-c
![](OEBPS/Images/247-i.jpg){.calibre595}
:::
这个方法用到的解析类和AndroidManifest.xml的解析类是一样的，因为它们都属于arsc格式，而且资源文件也是XML格式。这里值得注意的是，会产生一个反编译中最关键的文件public.xml，这个文件位于反编译之后的res\\values\\public.xml目录下：
::: bodypic-c
![](OEBPS/Images/247-2-i.jpg){.calibre596}
:::
可以看到，每个id字段都有对应的类型、名称和id值，而这里的id值是一个整型值，8个字节，由PackageId+TypeId+EntryId：三部分组成，如下所示：
·PackageId：包的id值，Android中如果是第三方应用的话，这个值默认是0x7F，系统应用的话是0x01，具体可以看后面的aapt源码得知，占用两个字节。
·TypeId：资源的类型id值，一般Android中有以下几个类型：attr、drawable、layout、dimen、string、style等，这些类型的值是从1开始逐渐递增的，顺序不能改变，attr=0x01，drawable=0x02......占用两个字节。
·EntryId：具体的类型下资源实体的id值，从0开始，依次递增，占用四个字节。
###### 4.解析dex文件 {.section-subtitle}
这个方法主要是将dex文件解析成smali源码：
::: bodypic-c
![](OEBPS/Images/247-3-i.jpg){.calibre597}
:::
::: bodypic-c
![](OEBPS/Images/248-i.jpg){.calibre598}
:::
这里使用了SmaliDecoder的decode方法，如下所示：
::: bodypic-c
![](OEBPS/Images/248-2-i.jpg){.calibre599}
:::
这里需要借助一个工具包dexlib，它用来处理dex文件，处理完dex文件之后，再交给baksmali工具类生成smali文件即可。
源码分析完了，下面开始测试一下。这里为了运行简单，在入口的main方法中手动构造一个参数：
::: bodypic-c
![](OEBPS/Images/248-3-i.jpg){.calibre600}
:::
[]{#096.xhtml}
#### 16.4 解决常见问题 {.bodycontent-title2}
反编译也会出现错误，本节分析并解决这类问题。
###### 1.第一类反编译错误 {.section-subtitle}
错误信息如图16-4所示。
::: bodypic-c
![](OEBPS/Images/16a4-i.jpg){.calibre601}
:::
图16-4 反编译错误（一）
报错信息和开始使用apktool工具的时候是一样的，看看崩溃代码：
::: bodypic-c
![](OEBPS/Images/249-i.jpg){.calibre433}
:::
可以发现，这里使用一个Map结构存放ResResSpec格式数据，而且key是spec的name值，那么知道资源id的值是唯一的，不可能出现相同的name值，是做了混淆机制，这种混淆机制只对apktool工具有效，对Android系统解析apk运行是不影响的。知道了崩溃的原因，修复也就简单了，直接加一个判断，判断这个key是否在map中，存在的话就直接返回，如图16-5所示。
::: bodypic-c
![](OEBPS/Images/16a5-i.jpg){.calibre602}
:::
图16-5 修复问题
再次运行，如图16-6所示。
过滤了重复的资源值，反编译成功了。这里因为反编译过程中会用到系统的资源id，需要系统资源包framework.apk参与解析工作，因为程序包比较大，反编译时间会长点。可以看看反编译之后的目录，如图16-7所示。
::: bodypic-c
![](OEBPS/Images/16a6-i.jpg){.calibre603}
:::
图16-6 再次运行
::: bodypic-c
![](OEBPS/Images/16a7-i.jpg){.calibre604}
:::
图16-7 回编译文件apktool.xml
它的AndroidManifest.xml内容如下：
::: bodypic-c
![](OEBPS/Images/250-3-i.jpg){.calibre605}
:::
解析成功，可以正常查看了。这里就解决了反编译的错误。
###### 2.第二类反编译错误 {.section-subtitle}
错误信息如图16-8所示。
这个错误和开始看到的错误是一样的，下面看看崩溃的地方是什么原因导致的：
::: bodypic-c
![](OEBPS/Images/250-4-i.jpg){.calibre441}
:::
::: bodypic-c
![](OEBPS/Images/251-i.jpg){.calibre606}
:::
::: bodypic-c
![](OEBPS/Images/16a8-i.jpg){.calibre607}
:::
图16-8 反编译错误（二）
这里是读取一个字符串常量池Chunk头部信息报错的，StringChunk的头部信息包括如下内容：
·header：标准的Chunk头部信息结构。
·stringCount：字符串的个数。
·styleCount：字符串样式的个数。
·flags：字符串的属性，取值包括0x000（UTF-16）、0x001（字符串经过排序）、0x100（UTF-8）及其组合值。
·stringStart：字符串内容块相对于其头部的距离。
·stylesStart：字符串样式块相对于其头部的距离。
其中header是一个标准的Chunk头部信息：
·type：当前Chunk的类型（两个字节）。
·headerSize：当前Chunk的头部大小（两个字节）。
·size：当前Chunk的大小（四个字节）。
共八个字节。继续分析错误代码：
::: bodypic-c
![](OEBPS/Images/252-i.jpg){.calibre608}
:::
这里会检查已给Chunk结构的完整性，输入的StringPool值是：
::: bodypic-c
![](OEBPS/Images/252-2-i.jpg){.calibre153}
:::
下面是字符串常量池Chunk的头部信息，而且值是固定的：0x001C0001，再进入看看代码：
::: bodypic-c
![](OEBPS/Images/252-3-i.jpg){.calibre5}
:::
如果发现格式不正确就抛出一个异常，即格式不是0x001C0001的话就不正确。那么问题差不多清楚了，崩溃的原因很可能是应用的resource.arsc的StringPool这个Chunk的头部信息被混淆了。通过上面的分析知道，StringPool这个Chunk的头部标准格式是0x001C0001，我们来看看应用的resource.arsc文件的二进制数据，如图16-9所示。
::: bodypic-c
![](OEBPS/Images/16a9-i.jpg){.calibre609}
:::
图16-9 分析resource.arsc头部信息（一）\
可以发现有这个值，那么为何还报错呢？到这里或许不知道该怎么办了。再去看一个能够反编译的apk的resource.arsc文件，如图16-10所示。
::: bodypic-c
![](OEBPS/Images/16a10-i.jpg){.calibre610}
:::
图16-10 分析resource.arsc头部信息（二）\
发现果然不一样，头部信息多了8个字节0x000001000，那么再看上面检查Chunk头部类型数据的代码：
::: bodypic-c
![](OEBPS/Images/253-i.jpg){.calibre222}
:::
可以看到，apktool其实已经做了头部信息的检查，但是这里只是检查0x001C0001这个正确信息之前的值只有四个字节，而且是0的情况，读取int整型值，四个字节，发现值等于传递进来的possible的话，就继续执行这个方法，但是这里的possible值是-1了，也就是这里只会检查四个字节，但是分析了应用的resource.arsc文件，发现它是八个字节，而且还不全是0，前四个字节是0，后四个字节是1：
::: bodypic-c
![](OEBPS/Images/253-2-i.jpg){.calibre611}
:::
所以这里检测也是失败的，抛出异常了。
分析完资源文件混淆的机制，下面修改就简单了，首先把上面的8个字节全部改成0：
::: bodypic-c
![](OEBPS/Images/253-3-i.jpg){.calibre612}
:::
然后替换之前的resource.arsc文件，直接用压缩软件替换即可，然后再修改上面的检测代码，如下所示：
::: bodypic-c
![](OEBPS/Images/253-4-i.jpg){.calibre559}
:::
修改代码，一直做检测，直到遇到正确的值为止，修复完成之后，运行：
::: bodypic-c
![](OEBPS/Images/253-5-i.jpg){.calibre613}
:::
不报错了，看看反编译之后的目录：
::: bodypic-c
![](OEBPS/Images/254-i.jpg){.calibre614}
:::
反编译也成功！
通过上面的分析可见，使用apktool反编译的问题主要有两个：
·Exception in thread" main" brut.androlib.AndrolibException：Multiple
res specs：attr/name
异常原因：通过分析源码知道，这个错误主要是因为apk做了混淆操作，导致在反编译的过程中存入了重复的id值。
错误代码：ResTypeSpec.java的addResSpec方法78行。
修复：在这个方法存入map数据之前做一个判断操作即可。
·Exception in thread" main" brut.androlib.AndrolibException：Could not
decode arsc file
异常原因：通过分析源码知道，这个错误主要是因为apk做了resource.arsc头部信息的修改，导致在分析头部数据结构的时候出错。
错误代码：ExtDataInput.java的skipCheckChunkTypeInt方法73行。
修复：修复resource.arsc头部数据，修改skipCheckChunkTypeInt检测方法逻辑。
[]{#097.xhtml}
#### 16.5 apktool的回编译源码分析 {.bodycontent-title2}
前面分析了apktool的反编译功能源码，解决了两个应用反编译的失败问题，下面继续分析一下apktool的回编译功能。关于回编译功能，首先要了解aapt命令功能，如图16-11所示。
::: bodypic-c
![](OEBPS/Images/16a11-i.jpg){.calibre615}
:::
图16-11 apk编译流程图
使用aapt命令编译资源文件：
::: bodypic-c
![](OEBPS/Images/255-i.jpg){.calibre397}
:::
命令参数有点多，只说明如下几个：
·-J后面跟着的是gen目录，也就是编译之后产生的R类，存放资源id。
·-S后面跟着的是res目录，也就是需要编译的资源目录。
·-I后面跟着的是系统的库，因为我们在项目资源中会用到系统的一些资源文件，所以这里需要链接一下。
·-M后面跟着的是项目的清单文件，需要从这个文件中得到应用的包名，然后产生对应的R文件和包名。
这个命令不仅可以进行编译，也可以反编译，如上面提到的解析AndroidManifest.xml和resource.arsc的时候，使用它可以反编译，解析dex文件可以使用dumpdex命令。这些命令都在androidsdk的build-tools目录下。
知道了编译过程，回编译就是按照这个步骤来的，而这里重要的就是使用aapt命令：
::: bodypic-c
![](OEBPS/Images/255-2-i.jpg){.calibre616}
:::
把命令放到了项目的framework目录下，如图16-12所示。
::: bodypic-c
![](OEBPS/Images/16a12-i.jpg){.calibre26}
:::
图16-12 framework目录\
然后开始构造命令参数，主要需要用到系统的jar包android.jar：
::: bodypic-c
![](OEBPS/Images/255-3-i.jpg){.calibre617}
:::