### 简化系统与消除额外复杂度
简化系统并不一定意味着减少功能；它也可以意味着消除**偶然的（accidental）**复杂度。Moseley 和 Marks【32】将**偶然复杂度**定义为：在具体实现过程中出现的，而非从用户视角来看系统所解决的问题本身固有的复杂度。
用于消除**偶然复杂度**的最佳工具之一是**抽象（abstraction）**。一个好的抽象可以将大量实现细节隐藏在一个简洁且易于理解的接口之下。此外，优秀的抽象还能广泛应用于各种不同的场景中。比起重复开发多个类似的组件，重用抽象不仅提高了效率，还有助于提升软件质量。当一个抽象组件得到改进时，所有使用它的应用都将受益。
例如，高级编程语言是一种抽象，它隐藏了底层的机器码、CPU 寄存器和系统调用等细节。SQL 也是一种抽象，它屏蔽了复杂的磁盘/内存数据结构以及来自其他客户端的并发请求等问题。当然，在使用高级语言编程时，我们仍然依赖于机器码，但这些细节被抽象层所掩盖，从而无需直接处理。

### 抽象的作用
通过抽象，我们可以控制系统的复杂性并使其保持在可管理范围内。然而，找到合适的抽象却是一项极具挑战性的任务。尽管分布式系统领域已经存在许多优秀的算法，但我们尚不清楚应如何将它们封装成有用的抽象形式。
本书将重点关注那些能够将大型系统分解为定义明确且可重用组件的有效抽象方法。

### 可演化性：适应变化
系统需求几乎不可能一成不变。更常见的情况是，它们会持续发生变化，比如新的事实被发现、出现未预见的应用场景、业务优先级调整、用户提出新需求、新技术平台取代旧平台或法律法规更新等。
在组织流程方面，**敏捷（agile）**工作模式提供了一个应对变化的框架。敏捷社区还发展出了一些有助于在频繁变动环境中进行软件开发的技术和模式，如**测试驱动开发（TDD, test-driven development）**和**重构（refactoring）**。
虽然关于敏捷技术的讨论大多集中在较小规模的项目上（如单个应用程序中的几个代码文件），本书则将探讨如何在更大范围的数据系统层面提升灵活性。这类系统可能由多个不同的应用或服务组成。例如，如果需要将推特主页时间线的生成方式从方法1改为方法2，你将如何“重构”整个架构？
修改数据系统以适应不断变化的需求的难易程度，很大程度上取决于其**简单性和抽象性**：通常来说，结构清晰简单的系统比复杂的系统更容易修改。由于这一概念至关重要，我们将采用一个特定术语来描述数据系统层面的这种特性——**可演化性（evolvability）**【34】。

## 本章小结
本章探讨了构建数据密集型应用的一些基本原则。这些原则将在后续章节中为我们深入探讨技术细节提供指导。
一个有用的应用程序必须满足多种需求，包括**功能性需求**（即它应该完成的任务，如存储、检索、搜索及处理数据等）和**非功能性需求**（如安全性、可靠性、合规性、可扩展性和可维护性）。本章重点讨论了可靠性、可扩展性和可维护性。
- **可靠性（Reliability）**：即使发生故障，系统也应继续正常运行。故障可能来源于硬件（通常是随机且独立的）、软件（通常是系统性错误，较难处理）或人为因素（不可避免的人为失误）。**容错技术**可以帮助终端用户忽略某些类型的故障。
- **可扩展性（Scalability）**：指系统能够在负载增加的情况下依然保持性能的能力。为了讨论可扩展性，我们需要首先量化描述负载和性能的方法。通过分析推特主页时间线的例子，我们介绍了如何描述负载，并提出了以响应时间百分位数作为衡量性能的一种手段。在可扩展系统中，可以通过添加**处理能力**来确保在高负载下仍能可靠运行。
- **可维护性（Maintainability）**：涉及多个方面，但本质上关乎工程师和运维团队的工作体验。良好的抽象有助于降低系统复杂度，使其更易于修改以适应新应用场景。而良好的可操作性则意味着对系统健康状态具有充分了解，并具备有效的管理手段。
不幸的是，要使一个应用程序既可靠又可扩展同时易于维护并非易事。但在不同应用中反复出现的一些模式和技术确实有所帮助。接下来的几章里，我们将通过一些实际案例来探讨这些目标是如何实现的。
在本书第三部分[图 1-1](img/fig1-1.png) 中，我们将看到一种模式：多个组件协同工作以构成完整的系统。

## 参考文献
...

| 上一章                              | 目录                            | 下一章                               |
| ----------------------------------- | ------------------------------- | ------------------------------------ |
| [第一部分：数据系统基础](part-i.md) | [设计数据密集型应用](README.md) | [第二章：数据模型与查询语言](ch2.md) |