    Platform ServicePack Version      VersionString
    -------- ----------- -------      -------------
     Win32NT             10.0.18362.0 Microsoft Windows NT 10.0.18362.0
# Steps to reproduce
## Test-CTRLC.ps1
    [console]::TreatControlCAsInput = $true
    Start-Sleep -Seconds 1
    $Host.UI.RawUI.FlushInputBuffer()
    Do {
        if ($Host.UI.RawUI.KeyAvailable) {
            $Key = [int]$Host.UI.RawUI.ReadKey("AllowCtrlC,IncludeKeyUp,NoEcho").Character
            Write-Host "Key available - $Key"
            if (3 -eq $Key -or  '  ' -eq $Key) {
                [console]::TreatControlCAsInput = $false
                Write-Host "Ctrl-C detected, exiting script..." -ForegroundColor Yellow
                Break
            }
            #$Host.UI.RawUI.FlushInputBuffer()
        }
    } While ($true)
# Expected behavior
Ctrl+C should be readable from the `$Host.UI.RawUI.KeyAvailable` and
`$Host.UI.RawUI.ReadKey` functions
# Actual behavior
`[console]::TreatControlCAsInput = $true` Does turn off Ctrl+C  
Either `$Host.UI.RawUI.KeyAvailable` or `$Host.UI.RawUI.ReadKey` is not
working correctly
# What works
Start PowerShell console outside of Windows Terminal. aka. standard powershell
console window  
Run the above style of code and Ctrl+C is detected
# Images
## PowerShell 6 (x64) Console (works)
![image](https://user-
images.githubusercontent.com/21229341/65292478-f5651600-db9a-11e9-8677-b764c98a3957.png)
## PowerShell 7 in Windows Terminal
![image](https://user-
images.githubusercontent.com/21229341/65292520-19c0f280-db9b-11e9-97f2-a16ca2b3ee84.png)