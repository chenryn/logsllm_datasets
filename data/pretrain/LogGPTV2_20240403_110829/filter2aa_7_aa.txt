### 设计与研究

外国游客常对美国人在交谈时首先询问“你做什么工作”感到惊讶。我一直不喜欢回答这个问题，因为它很难用一句话解释清楚。然而，我最终找到了一个解决方法：当有人问我从事什么工作时，我会直视对方的眼睛并说：“我正在设计一种新的Lisp语言方言。”如果你也有类似的困扰，我建议你也这样回答。这通常会使对话转向其他话题。

实际上，我确实在“设计”一种编程语言，并且不认为自己在做“研究”。我的工作与其他设计师设计大楼、椅子或新字体并无本质不同。我的目标不是发现新事物，而是创造一种优秀的编程语言。

设计和研究之间的区别在于：前者追求“好”（good），后者追求“新”（new）。优秀的设计不一定新颖，但必须是好的；而优秀的研究不一定实用，但必须是创新的。我认为这两条路径最终会交汇：只有应用新的创意和理论，才能诞生超越前人的最佳设计；只有解决值得解决的问题（即“好”的问题），才能产生最佳的研究成果。因此，设计和研究最终都指向同一个目标，只是路径不同而已。

如果将创建一种编程语言视为设计问题而非科研方向，会有哪些不同呢？最大的不同在于你会更多地考虑用户。设计时，首先要问的是：我为谁设计？他们需要什么？例如，优秀的建筑师不会先设计再强迫用户接受，而是先研究用户需求，然后根据这些需求进行设计。

请注意，我说的是“用户需要的设计”，而不是“用户要求的设计”。我不希望读者认为设计师就像厨师一样，完全按照顾客的要求来做。虽然各个艺术领域差异巨大，但我认为任何领域的最佳作品都不可能由完全听从用户的人创造出来。

有句话说“顾客永远是对的”，这是指优秀设计的标准在于它能否满足用户的需求。如果你的小说没人爱看，或者你做的椅子极不舒服，那么无论其背后有多少先进的理论支持，这个作品都是失败的。

然而，让用户满意并不等于无条件迎合他们的所有要求。用户往往不了解所有的可能性，也常常误解自己的真实需求。一个好的设计师就像一个好医生：不能头痛医头，脚痛医脚。病人告诉你症状，你必须找出真正的原因，然后针对病因进行治疗。

大多数优秀设计都是以用户为中心的。这里所说的“用户”并不是泛指所有人，你可以选择特定的目标用户。比如，你在设计一种工具时，可以选择初学者或专家作为目标用户。同一种设计在一个群体眼中可能是优秀的，在另一个群体眼中则可能是糟糕的。关键是你必须明确你的目标用户。我认为，除非设定了目标用户，否则无法评价一种设计的好坏。

如果目标用户群体包括设计师本人，那么最有可能诞生优秀设计。如果目标用户与设计师差别很大，设计师往往会低估用户的需求。低估用户（即使出于善意）通常会导致设计失误。我怀疑那些设计公共住宅项目的建筑师从未想过自己住在里面会是什么感觉。编程语言也是如此。C、Lisp 和 Smalltalk 都是设计者为了自己使用而设计的，而 Cobol、Ada 和 Java 则是为了他人使用而设计的。

如果你觉得自己在为傻瓜设计产品，那么不仅难以设计出优秀的产品，连傻瓜也不一定喜欢你的设计。

即使你的设计面向最高端的用户，你也必须考虑到人类的特点。科学研究则不同。在数学研究中，你不会为了方便读者理解而选择更复杂的证明方式，只会选择最直接、最简洁的证明。科学研究不需要符合人体工程学。

艺术领域则完全不同。设计必须以人为本。设计椅子时，你不仅要考虑椅子本身，还要考虑人体的各种特点。所有的艺术都必须迎合人类的兴趣和极限。例如，肖像画比风景画更能引起观众的兴趣。文艺复兴时期的经典绘画多描绘人物并非偶然。如果绘画不能表现人类本身，也不会成为今天如此受推崇的艺术形式。

不管你喜不喜欢，编程语言也是以人为本的。人类大脑有许多令人费解的特点，这解释了为什么有些事情人类特别擅长，而另一些事情却很困难。例如，人类似乎不善于处理精细的工作，所以最好交给计算机处理。反之，如果人类擅长细节处理，我们应该都会用机器语言编程。

此外，要记住编程语言不仅是已完成程序的表达方式，更是促进程序从无到有的媒介。成品材料和开发材料往往是不同的。艺术家知道，构思阶段和成品阶段通常需要不同的媒介。例如，大理石是一种非常耐用的材料，适合用于成品，但由于缺乏弹性和灵活性，不适合用于模型制作。

最后完成的程序就像经过精心修剪的树木，杂乱的部分已被剪去。因此，评价一种语言不应只看最终程序是否漂亮，而应看编程过程是否流畅。某些设计使最终程序看起来非常优雅，但编程过程可能非常丑陋。例如，我写过一些宏，它们自动生成其他宏，看起来非常精美，但开发过程却极其繁琐，甚至到现在也不能完全确定它们是否百分之百正确。

我们常常错误地仅凭最终程序来评价编程语言。如果我们从艺术创作的角度来看待这个问题，就不会这样评价。我们不想只剩下一种像大理石那样漂亮但难用的语言。

例如，交互式顶层解释器（如 Lisp 中的 read-eval-print 循环）在软件开发中具有巨大优势。静态类型语言不适合这种解释器，因为它们要求在使用变量前声明类型，这在交互式环境中行不通。如果你同意这一点，那么所有静态类型语言都不易于编程。

为了做出优秀的设计，你必须贴近用户，始终站在用户的角度调整构想。简·奥斯汀的小说之所以出色，部分原因在于她将自己的作品大声读给家人听，从而避免陷入孤芳自赏的境地。你可以想象一下，将一本平庸的“文学”作品当作自己的作品读给朋友听，这会让你真切感受到那些作品高高在上的视角和沉重的负担。

在软件领域，这种贴近用户的设计思想被归纳为“弱即是强”模式。这个模式包含多种思想，但有一点是正确的：如果你正在设计某种新东西，应尽快拿出原型，听取用户的意见。

与之相反的是“万福玛丽亚”模式，即等到完整的成品出来后才推向市场。许多创业公司在互联网泡沫时期因相信这种模式而失败。我还没有听说过有人采用这种模式获得成功。

软件领域以外的人可能没听过“弱即是强”，但在艺术领域普遍存在。例如，绘画中快速勾勒轮廓再逐步加工的方法。在大多数艺术领域，原型材料与成品材料通常是不同的。印刷活字先画在纸上，然后做成铅字；雕塑先用石蜡创作，然后浇铸成青铜；地毯图案先用墨水画出纸型，然后织成地毯；建筑物先做出木模型，然后建成石头建筑。

15世纪油画首次亮相时引起了轰动，原因之一就是油彩允许画家在原型上直接画出最终效果。你可以按自己的想法画出初稿，然后逐步加上细节，甚至对初稿进行重大修改，直到完成。

软件开发也可以采用这种方式。原型不仅仅是模型，它可以逐步演变成最终成品。这样可以利用开发过程中产生的新想法，更重要的是，有助于鼓舞士气。

士气是设计的关键因素。我的一位美术启蒙老师告诉我：如果你觉得画某样东西很乏味，那么你画出来的东西就会真的很乏味。例如，假设你必须画一幢建筑物，决定从每一块砖头开始画起。你可能会感到厌倦，不再认真观察每块砖头的独特之处，而是机械地重复绘制。这样一来，作品效果就会很差。

先做出原型，再逐步加工成成品，这种方式有利于鼓舞士气，因为它让你随时可以看到工作的成效。我在编写代码时有一条规则：任何时候代码都必须能够运行。如果你在一小时后就能看到结果，这就像不远处的奖励，会激励你继续努力。其他艺术领域也是如此，尤其是油画。大多数画家都是先画草图，再逐步加工。这样，每天收工时都能看到整体效果，不会对最终成品毫无感觉。正如画家们常说的：“画作永远没有完工的一天，你只是不再画下去而已。”这种情况对于一线程序员来说再熟悉不过了。