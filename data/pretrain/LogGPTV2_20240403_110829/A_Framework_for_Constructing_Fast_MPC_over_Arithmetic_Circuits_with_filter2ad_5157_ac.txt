(5)
.
If no abort message was received, then the parties output
accept.
1
|F|−1 .
Lemma 3.2. If there exists j ∈ [m] such that [xj] is not correct,
then the honest parties output accept in Protocol 3.1 with probability
at most
[xj] is not correct. Let [u] =
Proof. Assume that there exists an index j ∈ [m] such that
i∈[m]\{j} ρi · [xi] + [r], and observe
that [v] = ρj · [xj] + [u]. Then, since [xj] is not correct, we have
by Lemma 2.4 that [v] is correct with probability at most
1
|F|−1 as
required. Finally, recall that the open procedure guarantees that all
parties abort (and so don’t output accept) if an incorrect sharing is
opened.
(cid:3)
We do not prove full security of this protocol; rather, we directly
simulate it in the main protocol. Although this is a less modular
approach, it actually signi(cid:27)cantly simpli(cid:27)es the proof. For example,
formalizing this as an ideal functionality would require knowing
how to generate the inconsistent messages for the case that some
shares are inconsistent. This requires the simulator knowing the
honest parties’ shares in the case that they are inconsistent, which
leads to an unnatural modeling of the functionality. In the full
protocol simulation, the simulator already knows the honest parties’
shares since it generated them itself (albeit as shares of 0, but the
distribution over the messages in the simulation is not dependent
on the value).
3.3 Triple Veri(cid:27)cation Based on the Open
Procedure
A multiplication triple is a triple of shares ([a],[b],[c]) with the
property that c = a · b. We say that a multiplication triple is ran-
dom if [a] and [b] are sharings of random values in F. We de(cid:27)ne
correctness, as follows:
De(cid:27)nition 3.3. ([a],[b],[c]) is a correct multiplication triple if
([a],[b] and [c]) are correct sharings and c = a · b.
In this section, we show how to verify that a multiplication triple
is correct without revealing anything about its values, by using (and
wasting) an additional random multiplication triple. We use the
same method as [16, 18], described in Protocol 3.4. The idea behind
the protocol is as follows. Given shares of x, y, z and a, b, c the
parties compute and open shares of ρ = α · x + a and σ = y + b,
where α is a random element generated at the beginning of the
protocol. These values reveal nothing about x and y since a and b
are random. In addition, from the way opening is de(cid:27)ned, it follows
that all the honest parties hold the same values for ρ and σ. As
we will see in the proof below, if ([a],[b],[c]) is a correct triple
and ([x],[y],[z]) is not, then α[z] − [c] + σ · [a] + ρ · [b] − ρ · σ
is either incorrect or a sharing of some element d (cid:44) 0. Thus, by
computing and opening this share, the honest parties can detect
cheating and abort. In the case where [a],[b],[c] is also incorrect,
we show that the multiplication of [z] by the random α ensures
that the probability that the parties obtain a correct sharing of 0 is
1
bounded by
|F|−1. As can be seen, the communication cost of this
protocol is due to the three executions of the open procedure.
PROTOCOL 3.4 (Triple Verification Using Open).
• Inputs: The parties hold a triple ([x], [y], [z]) to verify and an
• The protocol:
additional random triple ([a], [b], [c]).
(1) The parties call Fcoin to generate a random α ∈ F \ {0}.
(2) Each party locally computes [ρ] = α · [x] + [a] and [σ] =
[y] + [b].
(3) The parties run open([ρ]) and open([σ]), as de(cid:27)ned in Sec-
tion 2, to receive ρ and σ . If a party receives ⊥ in an open-
ing, then it sends ⊥ to all the other parties and aborts.
(4) Each party locally computes
[v] = α[z] − [c] + σ · [a] + ρ · [b] − ρ · σ .
(5) The parties run the open([v]) procedure to receive v. If a
party receives ⊥ in the opening, then it sends ⊥ to all the
other parties and aborts.
(6) Each party checks that v = 0. If not, then it sends ⊥ to the
other parties and aborts.
If no abort messages are received, then the parties output
(7)
accept.
We now prove the security guarantee provided by Protocol 3.4.
1
|F|−1 .
Lemma 3.5. If [x] and [y] are correct shares, and ([x],[y],[z]) is
not a correct triple, then:
(1) If ([a],[b],[c]) is a correct triple, then all honest parties abort in
(2) If ([a],[b],[c]) is not a correct triple, then the honest parties output
Protocol 3.4 with probability 1.
accept in Protocol 3.4 with probability at most
Proof. Assume that [x],[y] are correct shares and that the triple
([x],[y],[z]) is not correct. First, observe that by the de(cid:27)nition of
the open procedure, if Step 3 concluded without the honest parties
aborting, then it is guaranteed that [ρ] and [σ] are correct and that
all the honest parties hold the same values ρ and σ. By Claim 2.2,
this implies that [a] and [b] are correct shares as well. Thus, for the
remainder of the proof, we can assume that [x],[y],[a] and [b] are
all correct and that all the honest parties hold the correct values
ρ = α · x + a and σ = y + b. Recall that since ([x],[y],[z]) is not
correct, either [z] is not correct or z (cid:44) x · y.
To prove Item (1) in the lemma, assume that ([a],[b],[c]) is a
correct multiplication triple, i.e., all the shares are correct and c =
a · b. Then, by Claim 2.2, [u] = [c] + σ[a] + ρ[b] − ρσ is correct. If
[z] is not correct, then [v] is not correct (since [z] = α−1 ·([v] +[u])
and so by Claim 2.2, correctness of [v] would imply correctness
of [z]). Thus, the honest parties would all abort when running the
open([v]) procedure. Else, if [z] is correct but z (cid:44) x ·y, then it holds
that z = x · y + d for some d ∈ F \ {0}. Then, when the parties
locally compute [v], it holds that:
[v] = α[z] − [c] + σ[a] + ρ[b] − ρσ
= [αz − c + (y + b)a + (αx + a)b − (αx + a)(y + b)]
= [αz − c + ya + ab + αxb + ab − αxy − ay − αxb − ab]
= [αz − αxy + ab − c]
= [α(z − xy) − (c − ab)].
(1)
Since c = a · b and z = x · y + d, it follows that [v] = [α · d] (cid:44) [0],
and thus the honest parties abort in Step 6 with probability 1, as
required.
Next, we prove Item (2) in the lemma, where ([a],[b],[c] is not a
correct triple. Since we are guaranteed that [a] and [b] are correct,
this means that either [c] is not correct or that c (cid:44) a · b. Note
that in both cases, we are guaranteed that [u] = σ[a] + ρ[b] − ρσ is
correct. Now, if the parties do not abort in Step 5, then it follows that
[v] = α · [z] − [c] + [u] is a correct sharing of 0. Since [u] is correct,
then it follows from Claim 2.2 that α ·[z]−[c] is also correct. Using
Claim 2.2 yet again, we have that this can happen only if both [z]
and [c] are incorrect or both are correct. If they are both incorrect,
then by Lemma 2.4, the probability that α · [z] − [c] is correct is
|F|−1, as required. If both [z] and [c] are correct, we
1
bounded by
have that c = a · b + d2 and z = x · y + d1 for some d1, d2 ∈ F \ {0}.
Plugging this into Eq. (1), we have that [v] = [α · d1 − d2]. By
Step 6 of the protocol, the honest parties output accept only if
α · d1 − d2 = 0, which holds if only if α = d2 · d−1
1 . Since α is
distributed uniformly in F \ {0} and independent of d1, d2 (since
it is chosen randomly after d1 and d2 are (cid:27)xed), we have that the
1
honest parties output accept with probability at most
|F|−1. We
conclude that in all cases the probability that the protocol ends
1
|F|−1. (cid:3)
with the honest parties outputting accept is bounded by
As with Protocol 3.1, we do not prove the security of the protocol
with respect to an ideal functionality. This is because such an ideal
functionality would actually be very complex. For example, the
ideal functionality would have to deal with the case that [x],[y]
may not be correct. However, this case can never actually happen
in our protocol (due to the way that [x],[y] are generated). Thus, it
is preferable to not complicate matters with such a functionality.
3.4 Triple Veri(cid:27)cation Based on Multiplication
Secure Up to Additive Attacks
In this section, we present a di(cid:29)erent protocol for verifying that a
multiplication triple is correct. The protocol is similar to that of the
previous section, except that here we use a multiplication protocol
that is guaranteed to be secure up to additive attacks (as de(cid:27)ned
in Section 2.2) instead of the open procedure. In more detail, in
Protocol 3.4, the parties compute shares of
v = α · z − c + σ · a + ρ · b − ρ · σ
where ρ = αx + a and σ = y + b, and verify that it equals 0. This
is computed by (cid:27)rst computing ρ, σ and opening them, and then
using (local) scalar multiplication to obtain shares of v. However,
openings are expensive operations, and in many cases are actually
more expensive than semi-honest multiplication (this is true in
the 3-party case, as well as when multiplying using the protocol
of [17] as discussed in Section 6.1). Thus, in the protocol in this
section, the parties compute shares of v by carrying out all of the
multiplications using a secure protocol, and then only opening
v. Thus, we construct two veri(cid:27)cation protocols that are based
on di(cid:29)erent building blocks; one that is based on invocations of
the open procedure and another that is based on a semi-honest
multiplication protocol that is secure up to additive attacks [21]. As
we will see later, this enables us to obtain di(cid:29)erent protocols that
are better suited for di(cid:29)erent settings, depending on the number of
parties, secret sharing method used, and so on.
We present the protocol based on multiplication in two steps.
First, we introduce a protocol that still requires two openings for
each triple veri(cid:27)cation. Next, we show how to reduce this to two
openings for many triples that are batched together. Since only two
open procedures are ran for many executions, this yields a protocol
where the amortized cost per triple depends only on the cost of the
multiplication and the random sharing generation protocols.
As mentioned above, in this protocol, the values of ρ and σ are
not opened as in the previous protocol. Instead, we compute the
sharing
[v] = [α] · [z] − [c] + [σ] · [a] + [ρ] · [b] − [ρ] · [σ]
= [α] · [z] − [c] + [σ] · [a] − [ρ] · [y]
(2)
using secure multiplication (where the equality holds because σ =
y +b and so b−σ = −y), which equals 0 if the triple is correct (and all
other shares). Intuitively, this protocol is secure for the same reason
as Protocol 3.4 that uses opening, since the multiplications are used
to compute the same equation. However, we note that in this case
we need to generate a random sharing [α] that is kept secret, and
we cannot let its value be publicly known before all multiplications
have been carried out. To see why this is necessary, assume that
([a],[b],[c]) is a correct multiplication triple and [x],[y] and [z] are
all correct sharings, but z (cid:44) x · y, i.e., z = x · y + d for some d (cid:44) 0
known to the adversary. If the value of α is known to the adversary,
then it knows that α · [z] is a sharing of α · xy + α · d. Then, when
computing [u] = [c] + [σ] · [a] + [ρ] · [b] − [ρ] · [σ] the adversary
can cheat in one of the multiplications and make [u] be a sharing
of (c + σ · a + ρ · b − ρ · σ) + α · d, thus causing [v] = α · [z] − [u] to
be a sharing of 0, even if the triple is incorrect. In contrast, when α
is not known, this attack cannot be carried out.
At (cid:27)rst sight, it may seem that this is enough; the parties can
open [v] and verify that it equals 0. Indeed, this does su(cid:28)ce to
guarantee that the triple ([x],[y],[z]) is correct; however, it may
reveal information about y and thus is not secure. In order to see
why, consider an adversary who follows the speci(cid:27)cation of the
multiplication protocol in all its invocations except for the one used
to compute [ρ] = [α] · [x] + [a]; in this computation it causes the
result to equal thereby obtaining a sharing of ρ = α·x +a+d for some
d (cid:44) 0 that it knows (it can do this since the multiplication protocol
is vulnerable to an additive attack). Then, plugging ρ = α · x + a + d
instead of α ·x +a in Eq. (2), we have that the result will be v = −d·y
(everything else cancels out as shown in Eq. (1)). Since πmult is
vulnerable to an additive attack, the adversary can determine the
value of d, and then when v is opened it can compute y = v−d
,
breaking the privacy of the protocol. (Observe that in this attack,
the triple is actually correct, but privacy is broken.)1
This problem can be solved by running a subprotocol to verify if
the share [v] equals 0 or does not equal 0, without revealing any-
thing else (since then [v] is never actually opened). Unfortunately,
this does not su(cid:28)ce since it still reveals whether or not y itself
equals 0 or not; note that if y = 0 then v = 0 irrespective of the
value of d, and if y (cid:44) 0 then v (cid:44) 0. Thus, merely revealing whether
or not v = 0 reveals whether or not y = 0. This is solved by generat-
ing a new triple from ([x],[y],[z]), as follows. The parties generate
a publicly known random element ψ ∈ F and then the correct-
ness of this triple ([x(cid:48)],[y(cid:48)],[z(cid:48)]) is veri(cid:27)ed, instead of the original
triple ([x],[y],[z]), where ([x(cid:48)],[y(cid:48)],[z(cid:48)]) = ([x],[y +ψ],[z +ψ · x]).
Observe that if ([x],[y],[z]) is correct then so is ([x(cid:48)],[y(cid:48)],[z(cid:48)])
because
(cid:48) def
= z + ψ · x = x · y + ψ · x = x · (y + ψ) def
= x
(cid:48) · y
z
(cid:48)
.
Furthermore, y(cid:48) = 0 with probability 1/|F| (only when ψ = −y).
Thus, y(cid:48) will not equal 0 except with negligible probability, and
revealing this fact gives no additional information to the adver-
sary. We remark that the veri(cid:27)cation procedure of ([x(cid:48)],[y(cid:48)],[z(cid:48)])
is correct since
v = α · (z + ψ · x) − c + σ · a − ρ · (y + ψ)
= α · (x · y + ψ · x) − a · b + (y + ψ + b) · a − (α · x + a) · (y + ψ)
= α · x · y + α · x · ψ − a · b + a · y + a · ψ + a · b − α · x · y
− a · y − α · x · ψ − a · ψ = 0
as required.
It remains to show how we check if the share [v] equals 0 or not,
without revealing anything else. This is achieved by generating an
additional random sharing [r] using Frand and multiplying it with
1In the ACM CCS 2017 proceedings version of this paper, the protocol presented
worked by indeed opening [v] and verifying that it equals 0. Thus, it was vulnerable
to the attack mentioned here.
[v] before opening the result. Clearly, if [v] is a sharing of 0, then
multiplying it with a random value makes no di(cid:29)erence and the
result remains 0. In contrast, if [v] is not a sharing of 0, then the
opening of r · v reveals no information about v (since r is random