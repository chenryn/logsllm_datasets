title:DeepMem: Learning Graph Neural Network Models for Fast and Robust
Memory Forensic Analysis
author:Wei Song and
Heng Yin and
Chang Liu and
Dawn Song
DeepMem: Learning Graph Neural Network Models for Fast and
Robust Memory Forensic Analysis
Wei Song
University of California, Riverside
PI:EMAIL
Chang Liu
University of California, Berkeley
PI:EMAIL
ABSTRACT
Kernel data structure detection is an important task in memory
forensics that aims at identifying semantically important kernel
data structures from raw memory dumps. It is primarily used to
collect evidence of malicious or criminal behaviors. Existing ap-
proaches have several limitations: 1) list-traversal approaches are
vulnerable to DKOM attacks, 2) robust signature-based approaches
are not scalable or efficient, because it needs to search the entire
memory snapshot for one kind of objects using one signature, and
3) both list-traversal and signature-based approaches all heavily
rely on domain knowledge of operating system. Based on the limita-
tions, we propose DeepMem, a graph-based deep learning approach
to automatically generate abstract representations for kernel ob-
jects, with which we could recognize the objects from raw memory
dumps in a fast and robust way. Specifically, we implement 1) a
novel memory graph model that reconstructs the content and topol-
ogy information of memory dumps, 2) a graph neural network
architecture to embed the nodes in the memory graph, and 3) an
object detection method that cross-validates the evidence collected
from different parts of objects. Experiments show that DeepMem
achieves high precision and recall rate in identify kernel objects
from raw memory dumps. Also, the detection strategy is fast and
scalable by using the intermediate memory graph representation.
Moreover, DeepMem is robust against attack scenarios, like pool
tag manipulation and DKOM process hiding.
CCS CONCEPTS
• Applied computing → System forensics; • Computing method-
ologies → Neural networks; • Security and privacy → Operating
systems security;
KEYWORDS
Memory Forensics; Direct Kernel Object Manipulation; Deep Learn-
ing
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243813
Heng Yin
PI:EMAIL
Dawn Song
University of California, Riverside
University of California, Berkeley
PI:EMAIL
ACM Reference Format:
Wei Song, Heng Yin, Chang Liu, and Dawn Song. 2018. DeepMem: Learning
Graph Neural Network Models for Fast and Robust Memory Forensic Anal-
ysis. In 2018 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New
York, NY, USA, 13 pages. https://doi.org/10.1145/3243734.3243813
1 INTRODUCTION
Memory forensic analysis [6] extracts live digital evidence of attack
footprints from a memory snapshot (or dump) of a running system.
For instance, by identifying _EPROCESS objects in a Windows mem-
ory dump, analysts can figure out what processes are running on
the target operating system. Memory forensic analysis is advanta-
geous over the traditional disk-based forensics because although
stealth attacks can erase their footprints on disk, they would have
to appear in memory to run.
In previous works, researchers have explored memory forensics
in OS kernels [7, 37], user-level applications [2, 42], as well as mobile
devices [26, 27]. In this work, we focus on detecting objects in the
kernel space. This problem is further complicated by kernel-mode
attacks [16].
Generally speaking, the existing memory forensic tools fall into
two categories: signature scanning and data structure traversal, all
based on certain rules (or constraints), either on values, points-to
relations, or both. Signature scanning tools (e.g., psscan) in Volatil-
ity [37] rely only on value constraints on certain fields to identify
memory objects in the OS kernel, whereas SigGraph [20] relies on
points-to relations as constraints to scan kernel objects. Data struc-
ture traversal tools (e.g., pslist) in Volatility and KOP [5] start
from a root object in a known location, traverse its pointers to dis-
cover more objects, and further traverse pointers in the discovered
objects to reach more objects.
However, there exist several intertwining challenges in the ex-
isting rule-based memory forensic analysis:
(1) Expert knowledge needed. To create signatures or traversing
rules, one needs to have expert knowledge on the related data
structures. For a closed-source operating system (like Windows),
obtaining such knowledge is nontrivial if not impossible.
(2) Lack of robustness. Attackers may directly manipulate data
and pointer values in kernel objects to evade detection, which
is known as DKOM (Direct Kernel Object Manipulation) at-
tacks [9]. In this adversarial setting, it becomes even more chal-
lenging to create signatures and traversing rules that cannot
be easily violated by malicious manipulations, system updates,
and random noise.
(3) Low efficiency. High efficiency is often contradictory to high
robustness. For example, an efficient signature scan tool (like
psscan) simply skips large memory regions that are unlikely to
have the relevant objects (like _EPROCESS) and relies on simple
but easily tamperable string constants as constraints. In contrast,
a robust signature scan tool would have to scan every single
byte and rely on more sophisticated constraints (such as value
ranges, points-to relations) that are more computation-intensive
to check.
In this work, we are inspired by the successful adoption of deep
learning in many problem domains (such as computer vision, voice,
text, and social networks). We treat this memory object recognition
problem as a deep learning problem. Instead of specifying deter-
ministic rules for a signature scan and data structure traversal, we
aim to learn a deep neural network model to automatically recog-
nize memory objects from raw memory dumps. Since the model is
trained in an end-to-end manner, no expert knowledge is required.
The learned deep neural network model is also more robust than
rule-based search schemes because it comprehensively evaluates all
memory bytes and thus can tolerate perturbations to some extent.
A deep neural network model also excels in efficiency, as vector and
matrix computations can be largely parallelized in modern GPUs.
More specifically, in order to take into account adjacency re-
lations between data fields within an object as well as points-to
relations between two objects, we choose to build a graph neural
network model [30], in which each node represents a segment of
contiguous data values between two pointers, and each directed
edge represents an adjacency relation or a points-to relation be-
tween two nodes. We then conduct supervised learning on this
model: we collect a large number of diverse memory dumps, and
label the objects in them using existing memory forensic tools
like Volatility, and train the classification model using this labeled
dataset.
We implement a prototype called DeepMem and conduct the
extensive evaluation with respect to accuracy, efficiency, and ro-
bustness. Experimental results show that it achieves high precision
and recall rate at above 99.5% for important kernel objects, like
_EProcess and _EThread. For efficiency, it scans a memory dump
of 1GB in size only once to build the memory graph in about 80
seconds. Then, for each type of object, the detection time is about
13 seconds per type on a moderate desktop computer (Core i7-6700,
16GB RAM, and no GPU). Moreover, in the attack scenarios, like
pool tag manipulation and DKOM process hiding, signature-based
memory forensics tool (e.g. Volatility), fail to correctly report kernel
objects while DeepMem can tolerate those attacks.
In summary, the contributions of this paper are as follows:
• A graph representation of raw memory. We devise a
graph representation for a sequence of bytes, taking into
account both adjacency and points-to relations, to better
model the contextual information in memory dumps.
• A graph neural network architecture. We propose a graph-
based deep learning architecture with two jointly-trained
networks: embedding network and classifier network. This
deep neural network architecture captures both internal pat-
terns of memory bytes as well as points-to structures in the
memory graph and infers node properties in the graph.
• A weighted voting scheme for object detection. We pro-
pose a weighted voting scheme for object detection, which
summarizes and cross-validates the evidence collected from
multiple parts of an object to infer its location and type.
The remaining sections are structured as follows. Section 2 pro-
vides a background of memory object detection. Section 3 gives an
overview of the DeepMem, followed by design details of each com-
ponent. Section 4 presents implementation details and evaluation
results. Section 5 discusses the limitations of our current design and
implementation and sheds lights on future work. Section 6 surveys
additional related work. In the end, Section 7 concludes the paper.
2 MEMORY OBJECT DETECTION
In this section, we first give a formal problem statement for memory
object detection, and then describe the existing techniques and
discuss their limitations. In the end, we share our insights.
2.1 Problem Statement
If we treat a memory dump as a sequence of bytes, an object in
this dump are treated as a sub-sequence in this memory dump.
Naturally, we can define the object detection problem as a sub-
sequence labeling problem in a large sequence.
Our goal is to search and identify kernel objects in raw mem-
ory images dumped from running operating systems. Let C =
{c1, c2, ...} be the set of kernel data structure types in operating
system. Given a raw memory dump as input, the output is defined
as a set of kernel objects O = {o1, o2, ...}, where each object in the
set is denoted as a pair oi = (addri , ci), ci ∈ C. Here, addri is the
address of the first byte of the object in kernel space, and ci is the
type of the kernel object.
We would like to achieve the following goals:
• No reliance on source code. Unlike MAS [7] and KOP [5],
which rely on the kernel source code to compute a complete
kernel object graph, we do not assume the access to such
information. Instead, we resort to learn from real memory
dumps.
• Automatic feature selection. We do not rely on human
experts to define signatures or traversing rules for various
kernel objects. We aim to automatically learn a detection
model in an end-to-end manner.
• High robustness. Our method should tolerate content and
• High efficiency. We would like to design a scanning ap-
proach to examine every byte in the memory, and at the
same time, achieve high efficiency and scalability.
pointer manipulation of attackers in DKOM attacks.
2.2 Existing Techniques
There are two approaches to utilize the knowledge of data structures
for memory analysis.
The first one is data structure traversal. We can first identify a
root object based on the data structure definition and then follows
the pointers defined in this object to find more objects. In particular,
Volatility [37], a well-known memory forensic tool, provides a set
Figure 1: The overview of the DeepMem architecture
of tools for listing running processes, modules, threads, network
connections, by traversing the relevant data structures. Since data
structure definitions in C/C++ are often vague and incomplete (due
to the presence of generic pointers), the completeness of this ap-
proach is affected. To address this problem, KOP [5] and MAS [7]
perform points-to analysis on the C/C++ source code to resolve
the concrete types for the generic pointers, and thus produce com-
plete data structure definitions. This approach is efficient (as we
can quickly find more objects by just following pointers), but not
robust because attackers may modify the pointers to hide impor-
tant objects, known as Direct Kernel Object Manipulation (DKOM)
attacks.
The second approach is signature scan. We can scan the entire
memory snapshot for objects that satisfy a unique pattern (called
signature). Volatility [37] provides a set of scan tools as well to
scan for processes, modules, etc. To improve search accuracy, Sig-
Graph [20] automatically constructs graph-like signatures by taking
into account points-to relations in data structure definitions, at the
price of even lower search efficiency. In general, the signature scan
is more resilient against DKOM attacks, because it does not depend
so much on pointers. However, it is very inefficient and not scalable,
because it has to search the entire memory snapshot for one kind
of objects using one signature. To further improve the robustness
of signatures, Dolan-Gavitt et al. [11] proposed to perform fuzz
testing to mutate each data structure field and eliminate from the
signature the constraints that can be easily violated by attackers.
However, this will likely lead to the increase of false positives.
Both data structure traversal and signature scan require precise
knowledge of data structures and also heavily depend on specific
versions of the software or the operating system, because data struc-
tures change from one version to another. Therefore, to use these
tools, a data profile must be extracted from each unique operating
system version, which is clearly not convenient or scalable. To ad-
dress this problem, researchers proposed to reuse the code already
existed in the memory snapshot to interpret the memory snapshot
itself [10, 13, 29]. These techniques avoid creating data profiles and
implementing traversal algorithms, but they still heavily rely on
the knowledge of specific operating systems to understand what
code to reuse and how to reuse the code. Moreover, this approach
is still subject to DKOM attacks. In terms of efficiency, code reuse is
better than signature scan, but worse than data structure traversal.
2.3 Our Insight
We believe that the bottleneck for these memory analysis approaches
is the rule-based search scheme. They search and traverse memory
objects based on pre-defined rules. The rules can be hard to con-
struct in the first place, and moreover, the rules cannot easily adapt
to an unknown operating system and a new version and tolerate
malicious attackers that attempt to deliberately violate these rules.
To address these limitations, a “learning” ability becomes essential.
A new memory analysis approach should automatically learn the
intrinsic features of an object that are stable across operating sys-
tem versions and resilient against malicious modifications, and at
the same time is able to detect these objects in a scalable manner.
In this work, we resort to deep learning to tackle this problem.
3 DESIGN OF DEEPMEM