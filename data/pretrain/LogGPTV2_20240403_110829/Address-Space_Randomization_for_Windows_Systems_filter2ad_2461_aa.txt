title:Address-Space Randomization for Windows Systems
author:Lixin Li and
James E. Just and
R. Sekar
∗
Address-Space Randomization for Windows Systems
Lixin Li and James E. Just
Global InfoTek, Inc., Reston, VA
{nli,jjust}@globalinfotek.com
PI:EMAIL
Stony Brook University, Stony Brook, NY
R. Sekar
Abstract
Address-space randomization (ASR) is a promising
solution to defend against memory corruption attacks
that have contributed to about three-quarters of US-
CERT advisories in the past few years. Several tech-
niques have been proposed for implementing ASR on
Linux, but its application to Microsoft Windows, the
largest monoculture on the Internet, has not received
as much attention. We address this problem in this pa-
per and describe a solution that provides about 15-bits
of randomness in the locations of all (code or data) ob-
jects. Our randomization is applicable to all processes
on a Windows box, including all core system services,
as well as applications such as web browsers, oﬃce ap-
plications, and so on. Our solution has been deployed
continuously for about a year on a desktop system used
daily, and is robust enough for production use.
1 Introduction
An overwhelming majority of security advisories from
US CERT in recent years has been attributed to mem-
ory corruption attacks. Typically, these attacks en-
able a remote attacker to execute arbitrary code on
the victim system, thereby providing a mechanism for
self-propagating worms, installation of backdoors (in-
cluding “bot” software), spyware, or rootkits. Address-
space randomization (ASR) [16, 3, 23, 4] provides a
general defense against memory corruption attacks.
Although several ASR techniques have been described
for Linux [16, 3, 23, 4], to the best of our knowledge,
there hasn’t been any previous work describing ASR
for the largest monoculture on the Internet, namely,
the Microsoft Windows platform. We address this
problem, and describe a system called DAWSON (“Di-
versity Algorithms for Worrisome SOftware and Net-
works”) that provides about 15-bits of randomness in
the locations of all code or data.
In parallel with our work, some commercial prod-
ucts for Windows ASR have begun to emerge, namely,
∗
This work was partially funded by Defense Advanced
Research Project Agency under contract FA8750-04-C-0244.
Sekar’s work was also supported in part by an ONR grant
N000140110967 and NSF grants CNS-0208877 and CCR-
0205376. The views and conclusions contained in this document
are those of the authors and should not be interpreted as rep-
resenting the oﬃcial policies, either expressed or implied, of the
Defense Advanced Research Project Agency, NSF, ONR, or the
U.S. Government.
Wehntrust [21] and Ozone [20]. In addition, Windows
Vista is going to be shipped with a limited implemen-
tation of ASR [9]. However, these products suﬀer from
one or more of the following drawbacks:
• Insuﬃcient range of randomization. Windows Vista
randomizes base addresses over a range of 256 possi-
ble values. This level of randomization is hardly suf-
ﬁcient to defeat targeted attacks: the attacker simply
needs to try their attack an average of 128 times be-
fore succeeding. This isn’t likely to signiﬁcantly slow
down self-replicating worms either. Wehntrust and
Ozone provide more randomization, but signiﬁcantly
less than that of DAWSON in some memory regions
such as the stack.
• Incomplete randomization. Often, only a subset
of memory regions are randomized. For instance,
Wehntrust does not randomize some memory regions.
With Ozone, no information is available beyond the
fact that the stack and the DLLs are randomized.
Unfortunately, if the address of any writable memory
region is predictable, the attacker can modify their
attack so as to inject code into this region and ex-
ecute it. Therefore, DAWSON randomizes all such
memory regions.
• Lack of detailed analysis. With Wehntrust and
Ozone, even the most basic information about their
implementation (e.g., the complete list of memory
regions that are randomized) isn’t available. As a
result, one cannot independently analyze or evalu-
ate the quality of protection provided by them. In
contrast, we provide a detailed analytical as well as
experimental evaluation of DAWSON.
1.1 Contributions of this paper
• Development of practical techniques for real-
izing ASR on Windows. The architecture of Win-
dows is quite diﬀerent from UNIX, and poses several
unique challenges that necessitate the development
of new techniques for realizing randomization. Some
of these challenges are:
– Diﬃculty of relocating critical DLLs.
Security-
critical DLLs such as ntdll and kernel32 are
mapped to a ﬁxed memory location by Windows
very early in the boot process. Since most of the
APIs targeted by attack code, including all of the
system calls, reside in these DLLs, we needed to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Figure 1. Memory Error Exploits.
develop techniques to relocate these DLLs.
– Lack of UNIX-style shared libraries.
– Lack of access to OS or application source code.
This means that the primary approach used by
Linux ASR implementations, namely, modiﬁcation
of the kernel source, is not an option on Windows.
In UNIX,
dynamically loaded libraries contain position-
independent code, which allows them to be shared
even if they are loaded at diﬀerent addresses by dif-
ferent processes. In contrast, Windows DLLs need
to be stored at the same memory address by all
processes that share a single copy of the DLL.
• Robust implementation. DAWSON applies ASR
to all Windows services, as well as user applications.
We have had this system running on a production
laptop installed with Windows XP, Oﬃce, and SQL
and IIS servers.
In addition to the standard set
of OS services and applications, we have routinely
used Oﬃce applications, Windows development tools
(MSVC, .Net, etc.), SQL and IIS servers, and web
browsers (e.g., IE and Firefox), and haven’t experi-
enced any compatibility or robustness issues. Perfor-
mance overhead of DAWSON is typically under 5%.
• Analytical evaluation of eﬀectiveness. We de-
velop a classiﬁcation of memory corruption attacks,
and use it subsequently to compare previous works.
We then provide a detailed analytical evaluation of
our approach and provide estimates of success prob-
abilities for various types of attacks.
• Experimental evaluation. We have evaluated the
ability of DAWSON to defeat memory corruption at-
tacks using 5 real-world exploits, as well as a range
of sophisticated memory corruption attacks on a syn-
thetic application.
1.2 Paper Organization
We begin with a classiﬁcation of memory corruption
attacks in Section 2 and describe the strengths and
weaknesses of ASR in defending against these attacks.
With this background, we then provide a comparison
of DAWSON with previous work in Section 3. Our
technical approach is described in Section 4, followed
by analytical and experimental evaluation in Sections 5
and 6 respectively. Finally, concluding remarks appear
in Section 7.
2 ASR and Memory Corruption Attacks
Intuitively, a memory error occurs in C programs when
the object accessed via a pointer expression is diﬀerent
from its referent, i.e., the object intended by the pro-
grammer. Memory errors are classiﬁed into spatial and
temporal errors. Temporal errors occur when a pointer
is dereferenced beyond the lifetime of its referent, e.g.,
access to freed (or reallocated) memory. Security ex-
ploits haven’t targeted temporal errors, and indeed, it
is unclear how they can be used in attacks. Conse-
quently, security research has focused on spatial errors,
which are caused by (a) dereferencing a pointer that
holds a value outside of the bounds of its referent, or
(b) dereferencing a non-pointer or a corrupted pointer
value.
Figure 1 classiﬁes spatial memory error exploits
based on whether pointer corruption is involved or not;
and if so, whether the corrupted pointer refers to a data
or code object; and if this object holds values provided
(“injected”) by the attacker or values already existing
in victim process memory. Within “pointer corruption
attacks,” we include attacks that corrupt values used
in address computation, e.g., an integer value used as
an array subscript.
Absolute address randomization (AAR), used in
[16, 3, 23], randomizes the absolute memory address
of various code and data objects, but the relative dis-
tances between objects aren’t randomized. AAR blocks
pointer corruption attacks, since the attacker is no
longer able to predict the object that will be refer-
enced by a corrupted pointer value. For instance, a
stack-smashing attack involves overwriting the return
address on the stack with a value that points to a buﬀer
variable used to hold attacker-provided data. The lo-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:29:28 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006cation of this variable becomes unpredictable in the
presence of AAR, thus defeating the attack.
Relative address randomization (RAR) techniques
[4] randomize inter-object distances as well, and hence
can defeat non-pointer attacks. DAWSON imple-
ments only AAR, and hence addresses only the pointer-
corruption attacks (4 of the 5 categories shown in Fig-
ure 1). In practice, AAR is very eﬀective since mem-
ory error exploits reported so far have been based on
pointer corruption.
2.1 Limitations of AAR
We list the known limitations of ASR here, referring
the reader to previous works such as [3] for details.
• Local attacks are launched from the same host as the
victim application. AAR is based on the secrecy of
a “randomization key.” In practice, however, it is
hard to protect this secret from local users and ap-
plications, and hence AAR has been used mainly to
defend against remote exploits. Indeed, most AAR
implementations (including DAWSON) aren’t even
designed to defend against local threats, including
threats due to malicious code that, by some mecha-
nism, runs on the same host as the victim application.
• Relative address attacks don’t rely on absolute loca-
tions of data. Examples include data corruption at-
tacks that don’t require pointer corruption, and par-
tial pointer corruption attacks that overwrite only
the least signiﬁcant byte(s) of an address.
• Information leakage attacks utilize a vulnerability to
ﬁrst read the value of some pointer, and then use it
to compute the location of other objects in memory1.
• Brute-force (guessing) attacks repeatedly attempt to
guess the value to be used for corrupting a pointer.
• Double-pointer attacks require two vulnerabilities
that are exploited in two steps. First, an attacker
picks a random memory address A, and writes attack
code at this address by exploiting an absolute address
vulnerability, e.g., a heap overﬂow or a format-string
bug.
In the second step, the attacker uses a rela-
tive address vulnerability (e.g., a buﬀer overﬂow) to
overwrite a code pointer with A.
DAWSON does not defend against the ﬁrst three of
these attack types, but as discussed in Section 5, it
provides probabilistic protection against the other two.
2.2 Need to Relocate All Memory Regions
In addition to these limitations, some implementations
of AAR may suﬀer from the weakness that the locations
of some memory objects may not be randomized. This
1Most previous approaches such as StackGuard (with ran-
dom or XOR canary) [7], ProPolice [8] and PointGuard [6] are
susceptible to such attacks as well.
limitation can totally undermine the eﬀectiveness of
AAR, as we describe below. If a code region S is not
randomized, then the attacker can execute a return-to-
existing code attack into S. Of particular relevance in
Windows is the common use of the instruction sequence
jmp esp which causes a control-transfer to the top of
the stack. During attacks, it is common for the top of
the stack to contain attacker provided data. Thus, this
instruction sequence allows for execution of injected
code.
Any unrandomized writable section W poses a ma-
jor threat, as it is possible to mount a 2-step attack as
follows. In the ﬁrst step, the attacker injects a short
opcode sequence (such as jmp esp or other sequence
that can utilize values in registers) into W . In the next
step, control is transferred to this code2.
Unrandomized read-only data sections don’t pose as
great a threat. Note that until the attacker’s code gets
control, it is not possible to “read” the contents of arbi-
trary memory in order to obtain values of pointers etc.
However, there is a small chance that the read-only re-
gion contains data that corresponds to an exploitable
instruction sequence.
3 Related Work
We use Figure 1 to compare previous techniques for
memory error exploit protection. Early techniques
such as StackGuard [7] and RAD [5] focused on protect-
ing return addresses. ProPolice [8] extends StackGuard
to protect all data on the stack from buﬀer overﬂow at-
tacks, but does not address attacks on heap or static
data. Libsafe/Libverify [1] also targets stack-smashing
vulnerabilities, but does so without requiring source-
code access. [17] shows how to use binary-rewriting to