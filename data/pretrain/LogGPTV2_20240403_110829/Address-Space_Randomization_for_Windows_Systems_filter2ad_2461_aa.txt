# Address-Space Randomization for Windows Systems

## Authors
- Lixin Li, Global InfoTek, Inc., Reston, VA (nli@globalinfotek.com)
- James E. Just, Global InfoTek, Inc., Reston, VA (jjust@globalinfotek.com)
- R. Sekar, Stony Brook University, Stony Brook, NY (rsekar@cs.stonybrook.edu)

## Abstract
Address-space randomization (ASR) is a promising solution to defend against memory corruption attacks, which have contributed to approximately three-quarters of US-CERT advisories in recent years. While several ASR techniques have been proposed for Linux, the application of ASR to Microsoft Windows, the most widely used operating system on the Internet, has received less attention. This paper addresses this gap and describes a solution that provides about 15 bits of randomness in the locations of all code and data objects. Our randomization is applicable to all processes on a Windows system, including core system services and applications such as web browsers and office software. The solution has been continuously deployed for about a year on a desktop system used daily, demonstrating its robustness for production use.

## 1. Introduction
Memory corruption attacks have been responsible for the majority of security advisories from US-CERT in recent years. These attacks typically enable remote attackers to execute arbitrary code on victim systems, facilitating the spread of self-replicating worms, backdoors, spyware, and rootkits. Address-space randomization (ASR) [16, 3, 23, 4] is a general defense mechanism against such attacks. Although several ASR techniques have been developed for Linux, there has been limited work on ASR for the Microsoft Windows platform, the largest monoculture on the Internet.

We address this problem by introducing DAWSON ("Diversity Algorithms for Worrisome SOftware and Networks"), a system that provides about 15 bits of randomness in the locations of all code and data objects. In parallel with our work, some commercial products for Windows ASR, such as Wehntrust [21] and Ozone [20], have emerged. Additionally, Windows Vista will include a limited implementation of ASR [9]. However, these solutions suffer from one or more of the following drawbacks:

- **Insufficient Range of Randomization**: Windows Vista randomizes base addresses over a range of 256 possible values, which is insufficient to defeat targeted attacks. Attackers can succeed after an average of 128 attempts, which does not significantly slow down self-replicating worms. Wehntrust and Ozone provide more randomization but still fall short compared to DAWSON, especially in regions like the stack.
  
- **Incomplete Randomization**: Often, only a subset of memory regions are randomized. For example, Wehntrust does not randomize some memory regions, and Ozone only randomizes the stack and DLLs. If any writable memory region's address is predictable, attackers can inject code into it and execute it. DAWSON randomizes all such memory regions.

- **Lack of Detailed Analysis**: Basic information about the implementation of Wehntrust and Ozone, such as the complete list of randomized memory regions, is not available. This makes it impossible to independently analyze or evaluate the quality of protection they provide. In contrast, we provide a detailed analytical and experimental evaluation of DAWSON.

### 1.1 Contributions of this Paper
- **Development of Practical Techniques for ASR on Windows**: The architecture of Windows differs significantly from UNIX, presenting unique challenges. Some of these include:
  - **Relocation of Critical DLLs**: Security-critical DLLs like `ntdll` and `kernel32` are mapped to fixed memory locations early in the boot process. We developed techniques to relocate these DLLs.
  - **Lack of UNIX-Style Shared Libraries**: Unlike UNIX, Windows DLLs need to be stored at the same memory address by all processes sharing a single copy of the DLL.
  - **No Access to OS or Application Source Code**: This means that the primary approach used by Linux ASR implementations, modifying the kernel source, is not an option on Windows.

- **Robust Implementation**: DAWSON applies ASR to all Windows services and user applications. We have successfully run this system on a production laptop with Windows XP, Office, SQL, and IIS servers, without experiencing any compatibility or robustness issues. The performance overhead of DAWSON is typically under 5%.

- **Analytical Evaluation of Effectiveness**: We develop a classification of memory corruption attacks and compare previous works. We then provide a detailed analytical evaluation of our approach, estimating success probabilities for various types of attacks.

- **Experimental Evaluation**: We evaluated DAWSON's ability to defeat memory corruption attacks using five real-world exploits and a range of sophisticated attacks on a synthetic application.

### 1.2 Paper Organization
- **Section 2**: Classification of memory corruption attacks and the strengths and weaknesses of ASR in defending against them.
- **Section 3**: Comparison of DAWSON with previous work.
- **Section 4**: Technical approach.
- **Section 5**: Analytical evaluation.
- **Section 6**: Experimental evaluation.
- **Section 7**: Concluding remarks.

## 2. ASR and Memory Corruption Attacks
Memory errors in C programs occur when the object accessed via a pointer expression is different from the intended object. These errors are classified into spatial and temporal errors. Temporal errors, which occur when a pointer is dereferenced beyond the lifetime of its referent, have not been targeted by security exploits. Therefore, research has focused on spatial errors, which are caused by:
- Dereferencing a pointer that holds a value outside the bounds of its referent.
- Dereferencing a non-pointer or a corrupted pointer value.

Figure 1 classifies spatial memory error exploits based on whether pointer corruption is involved, and if so, whether the corrupted pointer refers to a data or code object, and if this object holds values provided by the attacker or values already existing in the victim process memory. "Pointer corruption attacks" include those that corrupt values used in address computation, such as an integer value used as an array subscript.

**Absolute Address Randomization (AAR)**, used in [16, 3, 23], randomizes the absolute memory address of various code and data objects but does not randomize the relative distances between objects. AAR blocks pointer corruption attacks because the attacker can no longer predict the object referenced by a corrupted pointer value. For example, a stack-smashing attack involves overwriting the return address on the stack with a value pointing to a buffer variable holding attacker-provided data. With AAR, the location of this variable becomes unpredictable, defeating the attack.

**Relative Address Randomization (RAR)** techniques [4] randomize inter-object distances and can defeat non-pointer attacks. DAWSON implements only AAR, addressing pointer-corruption attacks (four of the five categories shown in Figure 1). In practice, AAR is very effective since most reported memory error exploits are based on pointer corruption.

### 2.1 Limitations of AAR
- **Local Attacks**: AAR is based on the secrecy of a "randomization key," which is difficult to protect from local users and applications. Thus, AAR is mainly used to defend against remote exploits.
- **Relative Address Attacks**: These do not rely on absolute locations of data, such as data corruption attacks that do not require pointer corruption and partial pointer corruption attacks that overwrite only the least significant byte(s) of an address.
- **Information Leakage Attacks**: These utilize a vulnerability to read the value of a pointer and then use it to compute the location of other objects in memory.
- **Brute-Force Attacks**: These repeatedly attempt to guess the value to be used for corrupting a pointer.
- **Double-Pointer Attacks**: These require two vulnerabilities exploited in two steps. First, an attacker writes attack code at a random memory address using an absolute address vulnerability. Second, the attacker uses a relative address vulnerability to overwrite a code pointer with the address of the injected code.

DAWSON does not defend against the first three attack types but provides probabilistic protection against the other two.

### 2.2 Need to Relocate All Memory Regions
Some AAR implementations may not randomize the locations of certain memory objects, which can undermine the effectiveness of AAR. If a code region S is not randomized, the attacker can execute a return-to-existing-code attack into S. In Windows, the common use of the instruction sequence `jmp esp` allows control transfer to the top of the stack, often containing attacker-provided data. Any unrandomized writable section W poses a major threat, as it enables a two-step attack: injecting a short opcode sequence into W and then transferring control to this code. Unrandomized read-only data sections are less threatening but can still contain exploitable instruction sequences.

## 3. Related Work
We use Figure 1 to compare previous techniques for memory error exploit protection. Early techniques such as StackGuard [7] and RAD [5] focused on protecting return addresses. ProPolice [8] extends StackGuard to protect all data on the stack from buffer overflow attacks but does not address attacks on heap or static data. Libsafe/Libverify [1] targets stack-smashing vulnerabilities without requiring source-code access. [17] shows how to use binary-rewriting to implement similar protections.