# 修改DoublePulsar实现在Windows嵌入式系统上的EternalBlue漏洞利用
##### 译文声明
本文是翻译文章，文章原作者 Capt. Meelo，文章来源：capt-meelo.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
最近我发现了一些Windows设备受MS17-010漏洞的影响，其中一个设备引起了我的注意，因为我从没遇到过这种——一个Windows嵌入式操作系统。
[](https://p0.ssl.qhimg.com/t01e71bc5e3939ef742.png)
由于它受到MS17-010的影响，我立即尝试了相关的Metasploit模块。但是没有成功，我只得到一个错误，说目标操作系统不支持。
[](https://p0.ssl.qhimg.com/t01dc6653611f4c4de6.png)
甚至最新的MS17-010模块(exploit/windows/smb/ms17_010_psexec)也无效。
[](https://p1.ssl.qhimg.com/t0191e82b396f7cf7d4.png)
这很奇怪。也许MSF的辅助模块给了我一个假象，或者开发模块的作者忘记了包含对Windows嵌入式系统的支持。
[](https://p4.ssl.qhimg.com/t01f0b6153aa2813142.png)
为了验证目标是否真的易受攻击，我决定使用MS17-010的原始漏洞攻击。于是我启动了FuzzBunch，然后使用SMBTouch。结果表明，目标实际上是易受EternalBlue攻击的。
[](https://p0.ssl.qhimg.com/t01c4cf464810f8fd19.png)
然后我使用了EternalBlue模块，结果是成功的，后门成功地安装在目标上。因此，我猜MSF利用模块的作者只是忘记添加对Windows嵌入式版本的支持。
[](https://p4.ssl.qhimg.com/t01e6c60976fd83dbb0.png)
由于后门已经安装，要完成利用并获得shell，最后需要做的事情就是使用DoublePulsar。首先，我生成了一个DLL格式的shell。
[](https://p4.ssl.qhimg.com/t01682257bc03f09dee.png)
然后，我使用DoublePulsar将生成的DLL注入目标主机。但是，失败了，错误消息为[-] ERROR unrecognized OS
string。我猜MSF模块是没问题的，但Windows嵌入式版本是不受支持的。
[](https://p0.ssl.qhimg.com/t01aa80b3d627c59d3e.png)
我决定更深入地挖掘并研究DoublePulsar。首先，我搜索了在尝试使用DoublePulsar时得到的错误消息。这个字符串是在0x0040376C的.text部分找到的。
[](https://p1.ssl.qhimg.com/t01ab7bee1d63310bd9.png)
为了更好地理解DoublePulsar的错误消息是如何产生的，我决定使用IDA的图形视图跟踪程序的流程。
[](https://p5.ssl.qhimg.com/t01e4bd6d85afd736f9.png)
从图形视图中可以看出，如果目标计算机正在运行Windows 7，它将走左边的路径，然后继续检测其结构是x86还是x64。如果目标不是Windows
7，它将采取正确的路径并执行其他OS检查。由于没有检查Windows Embedded，程序最终输出错误消息[-] ERROR unrecognized
OS string。
[](https://p4.ssl.qhimg.com/t015bdf83299ff4b4f4.png)
通过进一步分析“Windows 7 OS Check”，我观察到我可以通过将指令jz short loc_403641修改为jnz short
loc_403641来强制程序走左边的路径。
[](https://p1.ssl.qhimg.com/t016025434e0481ed4f.png)
为此，我转到 Edit > Patch program > Change byte。
[](https://p4.ssl.qhimg.com/t018a57a2457178d122.png)
然后，我将值74(JZ的操作码)更改为75(JNZ的操作码)。
[](https://p4.ssl.qhimg.com/t0177bb8ce920796d1b.png)
这是修改跳转指令后的样子。
[](https://p2.ssl.qhimg.com/t013eaf3c34792541e1.png)
然后我通过“File > Produce file > Create DIF file…”创建了一个dif文件。。
[](https://p0.ssl.qhimg.com/t01d570db13252028c5.png)
然后使用@stalkr_的脚本(https：/stalkr.net/file/ida/idadif.py)来修补修改过的exe文件。
[](https://p0.ssl.qhimg.com/t01beb4c62ee88138c7.png)
然后将修改后的DoublePulsar-1.3.1.exe移回原来的位置。
[](https://p0.ssl.qhimg.com/t01acb638211582bd58.png)
使用修改后的DoublePulsar，我能够将生成的DLL注入目标主机。
[](https://p0.ssl.qhimg.com/t0172520067cf5b5e09.png)
并得到了一个SYSTEM shell。
[](https://p4.ssl.qhimg.com/t01886a236e6c61e301.png)
审核人：yiwang 编辑：边边