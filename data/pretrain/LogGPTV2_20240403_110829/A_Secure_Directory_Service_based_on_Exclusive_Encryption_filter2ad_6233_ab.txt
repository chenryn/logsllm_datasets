value that, when decrypted with the user’s private key and 
hashed,  yields  the  directory  key  hash  value  stored  in  the 
directory state. 
Definition 2:  An authorized writer of a directory is a user 
for  which  the  directory  state  includes  an  ACE  that  either 
(a)  contains  the  user’s  public  key  and  has  the  write-
authorization  bit  set  or  (b)  contains  the  user’s  public  key 
and is the distinguished owner ACE. 
Definition  3:    The  owner  of  a  directory  is  the  user  for 
which the distinguished owner ACE in the directory state 
contains the user’s public key. 
We illustrate the use of the directory state by detailing 
the steps involved in a standard set of directory operations:  
creating a new directory; adding and removing read/write 
access; reading and listing directory entries; and creating, 
renaming, and deleting entries. 
2.1.  Creating a new directory 
Olivia,  an  authorized  writer  of  directory  “foo”,  creates 
a  subdirectory  of  “foo”  with  the  name  “bar”  by  sending 
the server group a create entry message, which is handled 
as  described  in  § 2.5.    If  the  creation  succeeds,  Olivia 
randomly chooses a new symmetric encryption key for the 
directory,  encrypts  the  directory  key  with  her  own  public 
key,  and  computes  a  one-way  hash  of  the  directory  key.  
She  then  sends  her  public  key,  the  encrypted  directory 
key,  and  the  key  hash  to  the  server  group,  which  uses 
these values to initialize the owner ACE and the directory 
key hash.  At this point, the directory contains no entries, 
and the ACL contains only the owner ACE. 
2.2.  Owner operation: add reader/writer 
Olivia can make Rita an authorized reader of directory 
“bar”  by  encrypting  the  directory  key  with  Rita’s  public 
key and sending Rita’s public key and encrypted directory 
key to the server group, as part of an add reader message 
that  she  signs  with  her  own  private  key.    (If  Olivia  has 
forgotten the directory key, she can retrieve her own ACE 
from  the  server  and  decrypt  the  directory  key  using  her 
private  key.)    The  server  group  verifies  the  owner’s 
signature and creates a new ACE using the received data. 
To make Wallace an authorized writer, Olivia performs 
a  similar  procedure  but  sends  the  server  group  an  add 
writer  message.    The  server  group  treats  add  reader  and 
add  writer  messages  identically,  except  for  the  latter  it 
also sets the write-authorization bit in the user’s ACE. 
Olivia can make Blaine a blind writer by granting him 
write  authorization  but  not  read  authorization.    She  does 
this  by  sending  an  add  writer  message  that  contains  an 
incorrect  value  for  the  encrypted  directory  key.    Without 
access  to  the  correct  directory  key,  Blaine  is  unable  to 
decrypt the entry names; however, the write-authorization 
bit  in  his  ACL  instructs  the  server  group  to  accept  his 
directory updates.  (More on this in § 2.5.) 
Directory entries 
Access Control List (ACL) 
ExclEnc(DirKey, Name1), Reference1 
User1PubKey, PubEnc(User1PubKey, DirKey), WriteAuth1
ExclEnc(DirKey, Name2) , Reference2 
User2PubKey, PubEnc(User2PubKey, DirKey), WriteAuth2
ExclEnc(DirKey, NameN) , ReferenceN 
UserUPubKey, PubEnc(UserUPubKey, DirKey), WriteAuthU
DirKey hash: 
Hash(DirKey) 
Owner ACE: 
OwnerPubKey, PubEnc(OwnerPubKey, DirKey)
Figure 2. Directory state maintained by each server 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:31:41 UTC from IEEE Xplore.  Restrictions apply. 
2.3.  Owner operation: remove reader/writer 
Removing  write  access  is  trivially  accomplished  by 
clearing the write-authorization bit in the user’s ACE. 
Removing  read  access  is  more  involved,  because  it 
requires  re-keying  the  directory.    To  revoke  Wallace’s 
read  access  and  leave  him  as  a  blind  writer,  Olivia  first 
retrieves the directory state  from the server group.  Then, 
she randomly chooses a new directory key, hashes it, and 
encrypts  it  with  the  public  keys  of  all  authorized  readers 
(other  than  Wallace).    She  then  decrypts  and  re-encrypts 
all entry names with the new key and sends all of the new 
information  (except  the  directory  key)  back  to  the  server 
group, which updates its state appropriately. 
If Olivia were to revoke Rita’s read access, she could – 
after  re-keying  the  directory  and  replacing  the  hash  – 
instruct  the  server  group  to  remove  Rita’s  ACE,  since  it 
provides  neither  write  nor  read  access.    Alternatively, 
Olivia  could  leave  this  ACE  in  place,  even  though  it  has 
no authorization value (cf. § 5.2 obfuscation techniques). 
whether  the  directory  contains  a  particular  entry  name, 
which  he  should  not  be  allowed  to  do  since  he  is  not  an 
authorized reader.  To create a new entry, Blaine generates 
a random encrypted name and sends it to the server group 
in a create entry message.  If the new name is unique, the 
server  accepts  it;  if  it  is  not,  Blaine  has  to  generate  a 
different  name,  but  he  learns  nothing  about  the  names  of 
entries  in  the  directory,  since  he  does  not  know  what 
plaintext  name  his  randomly  chosen  encrypted  name 
would decrypt to. 
A rename operation is substantially similar, except that 
instead  of  creating  a  new  entry,  the  server  group  sets  the 
encrypted name in an existing entry to the new encrypted 
name. 
To delete an entry in the directory, Wallace obtains and 
decrypts  the  directory  key  as  above,  encrypts  the  entry 
name  with  the  directory  key,  and  sends  the  encrypted 
name to the server group in a signed delete entry message.  
The server group verifies Wallace’s signature and removes 
the entry with the matching encrypted name, if it exists. 
2.4.  Reader operations: read entry / list entries 
2.6.  Directory service security properties 
To read an entry in the directory, Rita first retrieves her 
ACE  and  the  directory  key  hash  from  the  server  group.  
She  decrypts  the  directory  key  using  her  private  key, 
hashes  it,  and  verifies  the  hash  against  the  directory  key 
hash from the server group.  (If the directory state does not 
contain an ACE for Rita or if the hashes don’t match, then 
she  is  –  by  definition  –  not  an  authorized  reader.)    Rita 
encrypts  the  entry  name  she  is  looking  for  –  using  the 
exclusive  encryption  procedure  –  with  the  directory  key, 
and sends the encrypted name to the server group, as part 
of  a  read  entry  message.    If  the  server  group  finds  a 
matching  encrypted  name  in  the  entry  list,  it  returns  the 
associated reference information to Rita. 
To list all entries in the directory, Rita begins as above, 
but rather then sending a read entry message containing a 
specific  encrypted  name,  she  sends  a  list  entries  message 
to the server group.  The group responds by sending Rita a 
list  of  all  encrypted  entry  names,  which  she  can  decrypt 
using the directory key. 
2.5.  Writer operations: create / rename / delete 
To  create  a  new  entry  in  the  directory,  Wallace 
retrieves his ACE and the directory key hash, decrypts and 
verifies  the  directory  key,  selects  a  new  entry  name, 
encrypts it with the directory key, and sends the encrypted 
name to the server group, as part of a create entry message 
that he signs  with his own private key.  The server group 
verifies  Wallace’s  signature  as  that  of  an  authorized 
writer,  checks  the  encrypted  name  for  uniqueness  among 
the list of existing encrypted names, and adds a new entry 
if the name is unique. 
Blaine  can  also  create  a  new  entry  in  the  directory; 
however, he does not know the name of the entry that he is 
creating.    If  he  did,  then  he  could  use  probing  to  test 
In this subsection, we present and informally justify six 
security  properties  maintained  by  our  directory  service 
design.    The  properties  are  the  access-control  semantics 
and correctness properties itemized in § 1. 
In justifying our claims of the following properties, we 
assume that fewer than a third of the servers in any server 
group  are  compromised,  so  the  group  can  be  assumed  to 
provide clients  with accurate  information and to correctly 
update  the  directory  state  in  response  to  client  requests.  
We  assume  the  security  of  the  underlying  cryptosystem, 
and  we  assume  that  authorized  users  do  not  deliberately 
leak information to other users. 
Property  1:    No  one  other  than  an  authorized  reader  can 
read entry names. 
Justification: 
  Entry  names  are  encrypted  with  the 
directory key, and are thus unreadable without knowledge 
of  the  directory  key.    In  turn,  the  directory  key  is  stored 
only  in  ciphertext  form,  encrypted  with  the  public  key  of 
the authorized readers. 
Property  2:    No  one  other  than  an  authorized  writer  can 
add or modify entry names. 
Justification:  The server group updates the entry list only 
after  verifying  that  the  signature  on  the  write  request 
corresponds to a public key in the directory’s ACL. 
Property  3:    No  one  other  than  the  owner  can  grant  or 
revoke read/write authorization. 
Justification:    The  server  group  updates  the  ACL  and  the 
directory  key  hash  only  after  verifying  that  the  signature 
on the update request corresponds to the public key in the 
owner ACE of the directory. 
Property 4:  No correctly functioning client will ever see 
a syntactically illegal name in a directory. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:31:41 UTC from IEEE Xplore.  Restrictions apply. 
identical  names 
Justification:    A  correctly  functioning  client  will  decrypt 
entry names using the exclusive encryption process, which 
will produce a syntactically legal plaintext name from any 
arbitrary ciphertext bit string. 
Property 5:  No correctly functioning client will ever see 
two  case-insensitively 
the  same 
directory. 
Justification:  The server group ensures uniqueness of the 
ciphertext  entry  names,  and  the  exclusive  encryption 
process  provides  a  one-to-one  mapping  from  de-cased 
legal names to their encrypted representations. 
Property  6:    No  two  correctly  functioning  clients  will 
ever see different views of the same directory. 
Justification:    The  Byzantine  protocol  guarantees  that  the 
server  group  sends  the  same  state  information  to  all 
requesting readers.  Since a reader is authorized only if the 
decrypted  server  key  hashes 
the  server  group’s 
directory  key  hash  value,  all  authorized  readers  will  use 
the  same  directory  key  for  name  decryption.    Thus,  all 
authorized readers will see the same set of entry names. 
in 
to 
Properties  4  and  5  rest  heavily  on  the  exclusive 
encryption process, to which we now turn our attention. 
3. Techniques for exclusive encryption 
This section details a set of techniques that can be used 
to  enforce  or  enable  specific  types  of  exclusions.    The 
general  approach  is  to  construct  a  relation  between  the 
domain  of  syntactically  legal  names  and  the  codomain  of 
all possible bit strings.  This relation must be bijective: 
•
  Injectivity is necessary so that the process is reversible 
and decryption is possible. 
•
  Surjectivity is necessary for syntax enforcement. 
•
  Injectivity of the inverse is necessary for duplication of 
plaintext to be detectable by examination of ciphertext. 
•
  Surjectivity  of  the  inverse  is  necessary  for  all  legal 
names to be representable. 
Although  these  properties  are  not  all  independent  of  one 
another, we enumerate them separately to be precise about 
why  we  need  each  one.    In  particular,  surjectivity  and 
inverse  injectivity  are  closely  related,  but  each  has  a 
different consequence in our environment. 
Exclusive  encryption  is  performed  by  applying  one  or 
more of the techniques described in § 3.1 through § 3.5 (to 
achieve the desired exclusion), followed by an encryption 
step  (specifically,  a  block  cipher  augmented  by  the 
technique  described  in  § 3.6).    Exclusive  decryption  is 
performed  by  a  decryption  step  (as  described  in  § 3.6) 
followed  by  the  inverse  of  one  or  more  of  the  techniques 
from § 3.1 through § 3.5. 
It  is  conceptually  easiest  to  understand  each  of  these 
techniques  by  appreciating  how  its  inverse  (which  is 
performed after decryption) prevents the production of an 
excluded  name.    The  technique  that  is  applied  before 
encryption is constructed by inverting the inverse. 
3.1.  Mapping to exclude specific strings 
To exclude entire strings (e.g. “AUX”) from the set of 
encryptable names, we construct a bijective mapping from 
the set of non-excluded strings to the set of all strings.  By 
applying the inverse of this mapping after decryption, any 
possible decrypted string will de-map to an allowed string.  
For the result of the inverse mapping to match the original 
plaintext, the mapping must be applied before encryption. 
A  simple  way  to  define  the  mapping  is  by  choosing  a 
(mostly)  arbitrary  character  χ  and  removing  one  instance 
of  this  character  from  any  string  equal  to  an  excluded 
name followed by one or more instances of χ. 
For  example,  if  χ  is  the  underscore  character  and  the 
name “foo” is excluded, we map “foo_” to “foo”, “foo_ _” 
to “foo_”, etc.  There is no mapping for “foo”, because it 
is  excluded.    Non-excluded  names  are  mapped  with  the 
identity function, so “bar” maps to “bar”. 
By  construction,  any  arbitrary  string  de-maps  to  an 
allowed  string:    Mapped  name  “foo”  de-maps  to  “foo_”.  
Mapped  name  “foo_”  de-maps  to  “foo_ _”.    There  is  no 
mapped  name  that  can  de-map  to  “foo”.    Mapped  name 
“bar” de-maps to “bar”. 
The  choice  of  character  χ  is  not  entirely  arbitrary.    It 
must be chosen not to cause one excluded name to map to 
another.  For example, if “fo” and “foo” are both reserved 
names, the character ‘o’ cannot be chosen for χ. 
3.2.  Separating out case information 
To  enable  case-insensitive  comparison  of  names,  we 
decouple the character content of each name from its case 
information.    We  do  this  by  creating  a  string  of  bits  that 
indicate  the  case  of  characters  at  corresponding  positions 
in  the  original  string.    Once  we  have  extracted  the  case 
information,  we  de-case  the  original  string  by  converting 
all  uppercase  characters  to  their  lowercase  equivalents.  
Uppercase  characters  are  thus  illegal  in  the  de-cased 
string, so they are added to the set of excluded characters 
handled by the technique described in § 3.3–3.5. 
When recombining the character and case information, 
exceptions  can  be  handled  in  a  straightforward  manner:  
For  characters  that  have  no  case  distinction,  the  case 
information  bit  is  ignored.    If  the  case  information  string 
has fewer bits than the character string has characters, the 
remainder can be treated as zeroes; and if it has more bits, 