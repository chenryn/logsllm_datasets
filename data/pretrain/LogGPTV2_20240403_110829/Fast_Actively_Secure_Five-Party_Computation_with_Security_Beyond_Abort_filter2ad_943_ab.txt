Security
0.16-0.09
0.65-2.87
unanimous abort
fairness
1.05-10.95
0.2-0.13
GOD (honest run)
0.17-0.07
3.94-4.92
GOD (worst case)
6.33-19.42
0.49-6.22
All protocols barring the one with GOD maintain the same
circuit-dependent communication as [25]. The GOD protocol costs
two circuit-dependent communication, one in 5PC and one in 3PC,
the latter amongst a smaller set of 3 parties. This is reflected in the
cost of worst case run of our GOD. For all other protocols, the over-
head comes from extra communication (commitments precisely),
dependent only on the input, output size. SHA being a bigger circuit,
has its absolute overheads more than AES in most cases but the
percentage overheads are better for SHA than AES. The factor of
extra communication overhead incurred by our protocols for SHA
when compared to AES circuit is far less than the factor of increase
in total communication for SHA over AES in [25]. This indicates
that the efficiency of our protocols improves for larger circuits.
1.3 Roadmap
We introduce the necessary primitives required for our protocols
in Section 2. The description of distributed garbling scheme and
the building blocks appears in Section 3. Our efficient protocols
that achieve fairness and unanimous abort are presented in corre-
sponding sections of 4 and 5. Our protocol for achieving guaranteed
output delivery is presented in sections 6. We provide efficiency
analysis of our protocols in Section 7. Finally, the security model
and functionalities of our protocols appear in Appendix A. The
security proofs are deferred to the full version [23].
2 PRELIMINARIES
We consider a set of 5 parties P = {P1, P2, P3, P4, P5}, where each
pair is connected by a pair-wise secure and authentic channel. The
presence of a broadcast channel is assumed only for the GOD pro-
tocol where it is known to be necessary [32]. We model each party
as a non-uniform probabilistic polynomial time (PPT) interactive
Turing Machine. We consider a static security model with honest
majority, where a PPT adversary A can corrupt at most 2 parties
at the onset of protocol. Adversary A can be malicious in our set-
ting.The computational security parameter is denoted by κ. The
security of all our protocols is proved in the standard real/ideal
world paradigm. Appendix A elaborates on the functionalities and
security definitions. Below we discuss the primitives that we use.
Non-Interactive Commitment Schemes. A Non-Interactive Com-
mitment Scheme (NICOM) is defined by two PPT algorithms
(Com, Open) for the purpose of commitment and opening. We
use instantiations based on injective one-way functions that ensure
a strong binding even if the adversary chooses the public parameter
arbitrarily. For our fair protocol, we need an equivocal NICOM (eNI-
COM). An eNICOM is defined with four PPT algorithms (eCom,
eOpen, eGen, Equiv). eCom, eOpen are defined as in NICOM and
eGen, Equiv are used to provide the property of equivocation. The
formal definitions and the instantiations appear in Appendix B.
t
(cid:1)}. Formally, x =
unqualified set Tl , l ∈ {1, ...,(cid:0)n
Secret Sharing Schemes. We use additive sharing and replicated
secret sharing (RSS) [33, 50]. For a value x, its дth additive share
is noted as xд. We now recall RSS. Consider a secret x, of some
finite field F to be shared among n parties s.t only > t parties can
reconstruct x. A maximal unqualified set is the set of t parties who
together cannot reconstruct the secret. A dealer with secret x splits
it into additive shares s.t each share corresponds to one maximal
t)] xl . Each
share xl is associated with Tl (lexicographically wlog) and additive
shares are random s.t they sum to x. Each party Pi , i ∈ [n] gets all
xl for Pi (cid:60) Tl . This ensures that t parties alone of any Tl cannot
retrieve x. We use a 4-party RSS with t = 2 where, each party gets
3 shares and each share is held by 3 parties including the dealer.
Reconstruction is done by combining the shares held by any 3
parties. Given only shares of any two parties {Pi , Pj}, x remains
private as xl where Tl = {Pi , Pj} is missing from the view.
3 DISTRIBUTED GARBLING AND MORE
At the heart of our 5PC lies a 4-party distributed garbling (4DG)
and a matching evaluation protocol tolerating arbitrary semi-honest
l ∈[(n
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1575corruptions. Garbling is done distributively amongst the garblers
{P1, P2, P3, P4} and P5 enacts the sole evaluator. Our 4DG scheme
is a direct simplification of the state-of-the-art actively-secure dis-
tributed garbling scheme of [64]. The semi-honest scheme when
combined with party-emulation idea of [25], achieves malicious
security against 2 corruptions. Specifically, the role of each gar-
bler in the underlying semi-honest 4DG scheme is also enacted by
two other fellow garblers. This emulation is achieved via a unique
seed distribution (SD) technique that ensures that the seed of a
garbler is consistent with two other garblers and all the needed
randomness for 4DG is generated from the seed. This helps to detect
any wrong-doing by at most two garblers. Interestingly, the seed
distribution can further be leveraged to replace the computationally-
heavy public-key primitive Oblivious Transfer (OT) in [64] with
an inexpensive symmetric-key based alternative called attested OT
[25]. While all our protocols for 5PC can be realized with any un-
derlying passively-secure garbling scheme when used with SD and
attested OT, we choose the current construction for efficiency. We
start with the seed distribution technique.
3.1 Building Blocks
Seed Distribution (SD). In the 4DG, all randomness required by a
garbler Pi is generated using a random seed si. The SD technique
involves distributing the seeds among 4 garblers s.t the seed si
generated by Pi is held by two other garblers and no single garbler
has the knowledge of all 4 seeds. Consequently, any data computed
based on si is done identically by 3 parties who own si and thus,
can be compared for correctness. With at least one honest party
in this set of 3 parties, any wrong-doing by at most two parties
is detected. The SD functionality FSD is depicted in Fig 1 and is
realized differently in each of our protocols based on the required
security guarantee (fairness or GOD). We use Sд to denote the set
of indices of parties who hold sд as well as the set of indices of the
seeds held by party Pд. Note that both these sets are identical– for
instance, S1 = {1, 3, 4} indicates that parties P1, P3, P4 hold s1. S1
also indicates that P1 holds s1, s3, s4.
Let Si , i ∈ [4] be S1 = {1, 3, 4}, S2 = {2, 3, 4}, S3 = {1, 2, 3}, S4 =
{1, 2, 4}. Let C be the set of corrupt parties. Corrupted parties Pj ∈ C
may send the trusted party (Input, sj/⊥) as instructed by the adversary.
On message (Input, ∗) from garbler Pд ∈ P \ C and (Input, {sj/⊥}j∈C)
from adversary, sample si on behalf of every honest Pi and send sд (or
⊥ as given by adversary) to each party in Sд.
Figure 1: Functionality FSD
Attested Oblivious Transfer (AOT). The AOT protocol [25] can be
viewed as an OT between a sender and a receiver with an additional
help from two other parties called “attesters”. These “attesters" aid
in ensuring correctness of the OT protocol by attesting inputs of
the sender and the receiver. AOT functionality is recalled in Fig 2.
3.2 The semi-honest 4DG and Evaluation
A distributed garbled circuit (DGC) is prepared together by all
garblers in a distributed manner. Each wire w in our 4DG scheme
is associated with a mask bit λw ∈ {0, 1} and each garbler Pд holds
a share λ
w ,0,
д
w . Each Pд samples two keys k
д
w s.t λw = ⊕д∈[4]λ
д
Ps acts as sender, Pr acts as receiver and Pa1, Pa2 act as attesters.
– On input message (Sen, m0, m1) from Ps , record (m0, m1) and send
(Sen, m0, m1) to Pa1 and Pa2 and Sen to the adversary.
– On input message (Rec, b) from Pr , where b ∈ {0, 1}, record b and
send (Rec, b) to Pa1 and Pa2 and Rec to the adversary.
1, b j ) from Paj , j ∈ [2], if (Sen, sid, ∗,
– On input message (Att, mj
∗) and (Rec, ∗) have not been recorded, ignore this message; otherwise,
record (maj
– On input message Output from the adversary, if (m0, m1, b) (cid:44)
(ma1
(ma2
send
(Output, ⊥) to Pr ; else send (Output, mb) to Pr .
– On input message abort from the adversary, send (Output, ⊥) to Pr .
1 , baj ) and send Att to the adversary.
0 , ma2
0 , maj
1 , ba1) or
(m0, m1, b)
1 , ba2),
0 , ma1
0, mj
(cid:44)
Figure 2: Functionality F4AOT(Ps , Pr , {Pa1, Pa2})
w ,0 ⊕ ∆д for each wire w, with global offset ∆д. Thus, each
д
w ,1 = k
k
super-key of a wire has 4 keys contributed by 4 garblers.
д
д
д
, k
Definition 3.1. A super-key of a wire is a set of 4 keys, each
w ,0}д∈[4] indicates the 0-super-
contributed by one garbler i.e., {k
key on wire w and {k
w ,1}д∈[4] indicates the 1-super-key on w.
д
u,bu
д
v ,bv
Free-XOR is enabled by setting the mask and keys for the output
wire of an XOR gate as the XOR of masks and keys of its input
wires. A garbled AND gate, on the other hand, comprises of 4
super-ciphertexts (super-CT), one for each row of truth table. A
super-CT is made up of 4 CTs, each of which is contributed by
one garbler. Each CT hides a share of a super-key on the output
wire such that during evaluation, 4 decrypted messages of a super-
CT together would give the desired super-key on the output wire.
In order to hide the actual output of intermediate gates from an
evaluator, we enable point and permute. The mask bit λw acts as
the permutation bit for wire w. Thus, for an AND gate with input
wires u, v, output wire w and their corresponding masks λu, λv, λw ,
if xu, xv denote the actual values on wires u, v respectively, then
the evaluator sees super-keys k
where bu, bv defined
as (bu = xu ⊕ λu),(bv = xv ⊕ λv) denote the blinded bits. The
evaluator then decrypts the super-CT positioned at row (bu, bv)
and obtains the output super-key {k
w ,0 ⊕ ∆д(xuxv ⊕ λw)}д∈[4]
that corresponds to the blinded (masked) bit xuxv ⊕ λw on wire w.
Definition 3.2. A blinded or masked bit of a bit xw on a wire w is
the XOR of xw with mask bit λw on wire w i.e. bw = xw ⊕ λw .
Interpreting row (bu, bv) as γ = 2bu + bv + 1 and recasting the
above, we see that the super-CT at row γ for γ ∈ [4] encrypts the
super-key {k
w ,0 ⊕ ∆д((bu ⊕ λu)(bv ⊕ λv) ⊕ λw)}д∈[4]. In 4DG, the
super-CTs as above for an AND gate are prepared distributedly
amongst the garblers, using the additive shares of the mask bits
and keys held by each garbler corresponding to the input and
output wires of the gate. We achieve this in a two-step process.
First, we generate the additive sharing of each key belonging to
the super-key to be encrypted in each row. Second, for each row,
a garbler encrypts the additive shares it holds of each key of the
corresponding super-key (obtained in the first step) in the CT that
it contributes for the super-CT of that row. A CT for row γ has
the format of one-time pad where the pad is calculated using a
double-keyed PRF with keys corresponding to row γ.
д
д
Definition 3.3. A super-ciphertext for a given row γ (γ = 2bu +bv +
1), of an AND gate with input wires u, v, output wire w, is a set of
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1576д
γ }д∈[4], where Pд contributes c
4 CTs, {c
share of each key in {k
γ that encrypts its additive
д
w ,0 ⊕ ∆д((bu ⊕ λu)(bv ⊕ λv) ⊕ λw)}д∈[4].
д
д
д
д
u λ
To compute the additive sharing of super-key {k
To compute 1), each garbler Pд locally computes λ
w ,0 ⊕ ∆д((bu ⊕
λu)(bv ⊕λv)⊕λw)}д∈[4] for all rows (i.e. all possibilities of (bu, bv)),
we compute the additive sharing of the following in sequence,
starting with the additive shares of λu, λv , λw : (A) λu λv (for row
1 i.e. γ = 1 and bu = bv = 0), λu λv (for γ = 2 and bu = 0, bv = 1),
λu λv (for γ = 3 and bu = 1, bv = 0) and λu λv (for γ = 4 and bu = 1,
bv = 1); (B) λ1 = λu λv ⊕λw , λ2 = λu λv ⊕λw , λ3 = λu λv ⊕λw , λ4 =
λu λv ⊕λw ; (C) ∆дλγ for all д, γ ∈ [4] and lastly (D) k
w ,0⊕ ∆дλγ for
all д, γ ∈ [4]. (B) and (D) require linear operations, thus can be done
locally by each garbler. However, for (A) and (C), additive sharing of
a product needs to be computed which requires interaction among
garblers. This is done via OTs, which we explain below. Also, in (A),
it is known how to tweak shares of λu λv locally to get the shares
of remaining products [13], thus computing the sharing of λu λv
alone suffices. We now explain how the additive sharing of 1) λu λv
and 2) ∆дλγ for any γ ∈ [4] is computed.
v. In ad-
д
dition, each pair of parties Pд, Pд′ for д (cid:44) д′ run an OT with Pд
д′
as sender, holding (r, r ⊕ λ
v to
д′
generate 2-out-of-2 additive sharing of λ
v . Pд outputs its share
д′
as r denoted by [λ
v ]S and Pд′ outputs its share as the OT out-