### 作者信息
- **作者**: [cq674350529](https://cq674350529.github.io/2021/03/04/Zyxel%E8%AE%BE%E5%A4%87eCos%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%88%86%E6%9E%90/)
- **首发平台**: 安全客
- **原文链接**: [英文版](https://ecos.wtf/2021/03/30/ecos-load-address) (感谢 `ecos.wtf` 团队的翻译)

### 前言
在分析 Zyxel 某型号设备时，发现其固件无法通过 `binwalk` 等工具直接提取。根据 `binwalk` 的提示信息，推测该设备使用的是 `eCos` 实时操作系统，且其固件为一个单一大文件。由于未知加载地址，在使用 `IDA` 等工具进行逆向分析时，难以建立正确的交叉引用。本文将介绍如何通过对固件的简单分析，确定其加载地址。

### 使用 `binwalk` 进行初步分析
首先使用 `binwalk` 工具对固件进行分析，结果如下：
```shell
binwalk RGS200-12P.bin 
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
128           0x80            eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
5475588       0x538D04        Unix path: /home/remus/svn/ivs/IVSPL5-ZyXEL_New/src_0603/build/../build/obj/ecos/install/include/cyg/libc/stdlib/atox.inl
5475653       0x538D45        eCos RTOS string reference: "ecos/install/include/cyg/libc/stdlib/atox.inl"
...
5945083       0x5AB6FB        eCos RTOS string reference: "ecos_driver_vid_to_if_index!"
5949577       0x5AC889        eCos RTOS string reference: "ecos_driver_inject vid=%u, length=%u"
...
6525239       0x639137        eCos RTOS string reference: "eCos/packages/devs/serial/generic/16x5x/current/src/ser_16x5x.c"
...
```
从输出中可以看到与 `eCos` 相关的字符串，并指出文件架构为 `MIPSEL`，异常向量表基地址为 `0x80000200`。

尝试使用 `IDA` 工具直接加载该文件，设置架构为 `mipsel`、加载地址为 `0x80000200` 后，发现没有识别出任何函数，整个段处于 `Unexplored` 状态。这表明加载地址可能不正确，需要进一步确认。

### 加载地址的验证方法
一般判断加载地址是否正确的方法包括：
1. 成功识别出的函数个数。
2. 正确的字符串交叉引用个数。

即使加载基址正确，初始状态也可能需要手动 `Make Code` 才能进行分析。相比之下，`Ghidra` 可以自动进行这些分析。

### 异常中断处理及加载地址
参考文章 [ecos vector.S 分析II](https://blog.csdn.net/qq_20405005/article/details/77971929)，其中提到 `eCos` 异常中断的初始化及处理知识。尝试其中提到的地址 `0x80000180` 似乎不对。

在 `MLT linker` 文件 [mips_tx49.ld](https://git.falcom.de/pub/ecos/-/blob/5ae20c384f92067161fe47cd1bed577d4e5b1a2b/packages/hal/mips/tx49/current/src/mips_tx49.ld) 中提到了 `hal_vsr_table` 和 `hal_virtual_vector_table` 等地址，但搜索相关地址后仍未找到正确的加载地址。

### 裸机固件加载地址分析
对于裸机固件（bare-metal firmware），通常可以通过查询芯片文档或 SDK 手册来获取内存空间映射分布。例如，STM32F103C8 的 Flash 内存范围为 `0x08000000~0x0801FFFF`。

此外，对于一些 ARM 架构的裸机固件，还可以通过中断向量表来推测加载地址。中断向量表中的前两项分别为 `Initial SP value` 和 `Reset`，后者是复位后的执行起点。

在缺乏相应文档的情况下，可以尝试从固件本身出发，通过分析固件中的特征来推测可能的加载地址。例如，[Magpie](https://www.anquanke.com/post/id/198276) 通过识别 ARM 固件中的函数入口表来推测加载地址；[limkopi.me](https://limkopi.me/analysing-sj4000s-firmware/) 通过查找指令中引用的固定地址成功试出了 `eCos` 固件的加载地址。

### `eCos` 固件加载地址分析
通过 `binwalk` 分析，输出结果中包含 `"eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200"`。查看 `binwalk` 中 `ecos` 对应的 magic 文件，可以发现 `binwalk` 在固件中匹配到一些模式。

使用 `IDA` 工具加载该文件，设置架构为 `mipsl`、加载地址为 `0x80000000`，在最开始处 `Make Code` 后，可以看到熟悉的 `eCos kernel exception handler`，其中包含一个固定地址 `0x80000200`。由于固件文件较大（约 10MB），仅靠单个地址猜测加载地址比较费时。因此，需要查找更多的固定地址和规律性地址，以确定加载地址的区间。

通过进一步分析，最终确定了该固件的加载地址。