**作者：[cq674350529](https://cq674350529.github.io/2021/03/04/Zyxel%E8%AE%BE%E5%A4%87eCos%E5%9B%BA%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%88%86%E6%9E%90/
"cq674350529")  
本文首发于安全客，原文链接：**
### 前言
> English version is [here](https://ecos.wtf/2021/03/30/ecos-load-address),
> thanks for `ecos.wtf` team’s translation.
最近在分析`Zyxel`
某型号设备时，发现该设备的固件无法采用`binwalk`等工具进行提取。根据`binwalk`的提示信息，猜测该设备使用的是`eCos`实时操作系统，其固件是一个单一大文件。由于不知道其加载地址，在使用`IDA`等工具进行分析时，无法建立正确的交叉引用，直接逆向会比较麻烦。而网上与`eCos`固件分析相关的资料不多，在没有相关的芯片文档或`SDK`手册等资料的前提下，从该固件本身出发，通过对固件进行简单分析，寻找固件中引用的固定地址，最终确定了该固件的加载地址。
### binwalk分析
首先使用`binwalk`工具对固件进行分析，如下。尝试使用`-e`选项进行提取时失败，说明该固件可能就是一个单一大文件。从输出中可以看到很多与`eCos`相关的字符串，其中`"eCos
kernel exception handler, architecture: MIPSEL, exception vector table base
address: 0x80000200"`指出了该文件的架构(`MIPSEL`)和异常向量表基地址(`0x80000200`)。
     binwalk RGS200-12P.bin 
    DECIMAL       HEXADECIMAL     DESCRIPTION
    --------------------------------------------------------------------------------    0             0x0             eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
    128           0x80            eCos kernel exception handler, architecture: MIPSEL, exception vector table base address: 0x80000200
    5475588       0x538D04        Unix path: /home/remus/svn/ivs/IVSPL5-ZyXEL_New/src_0603/build/../build/obj/ecos/install/include/cyg/libc/stdlib/atox.inl
    5475653       0x538D45        eCos RTOS string reference: "ecos/install/include/cyg/libc/stdlib/atox.inl"
     ...
    5945083       0x5AB6FB        eCos RTOS string reference: "ecos_driver_vid_to_if_index!"
    5949577       0x5AC889        eCos RTOS string reference: "ecos_driver_inject vid=%u, length=%u"
     ... 
    6525239       0x639137        eCos RTOS string reference: "eCos/packages/devs/serial/generic/16x5x/current/src/ser_16x5x.c"
     ...
尝试使用`IDA`工具直接加载该文件，设置架构为`mipsel`、加载地址为`0x80000200`后，如下。可以看到没有识别出一个函数，整个`segment`都是`Unexplored`状态，估计是因为加载地址不正确，因此需要想办法获取固件的加载地址。
> 一般，判断加载地址是否正确的方式包括：1) 成功识别出的函数个数；2）正确的字符串交叉引用个数。
>
> 后来发现即使加载基址正确，初始状态也是这样，需要在对应的地方手动`Make Code`才行 。。。可能还需要有合适的loader 进行初始化 ???
> 相比而言，`Ghidra`就可以自动进行分析。
![
](https://images.seebug.org/content/images/2021/06/586650dd-672f-40bb-824e-217163dae2b7.png-w331s)
根据相关信息进行查找，文章[ecos vector.S
分析II](https://blog.csdn.net/qq_20405005/article/details/77971929)中简单介绍了`eCos`异常中断的初始化及处理等知识，如下，尝试其中提到的地址`0x80000180`似乎不对。
    # mips cpu 产生exception/interrupt后，cpu会跳到特定的几个地址上,
    # BEV=0时，一般的在0x80000180,当然还有些其他地址，详细的要去看mips书籍
    # 这里有这样的代码
    FUNC_START(other_vector)
        mfc0    k0,cause            # K0 = exception cause
        nop
        andi    k0,k0,0x7F          # isolate exception code
        la      k1,hal_vsr_table    # address of VSR table
        add     k1,k1,k0            # offset of VSR entry
        lw      k1,0(k1)            # k1 = pointer to VSR
        jr      k1              # go there
        nop                     # (delay slot)
    FUNC_END(other_vector)
在`MLT
linker`文件[mips_tx49.ld](https://git.falcom.de/pub/ecos/-/blob/5ae20c384f92067161fe47cd1bed577d4e5b1a2b/packages/hal/mips/tx49/current/src/mips_tx49.ld)中提到了`hal_vsr_table`和`hal_virtual_vector_table`等地址，搜索`SECTION_rom_vectors
(rom`，尝试找到的一些地址后仍然不对。
    // MLT linker script for MIPS TX49
    /* this version for ROM startup */
        .rom_vectors _vma_ : _lma_ \
        { KEEP (*(.reset_vector)) \
        . = ALIGN(0x200); KEEP (*(.utlb_vector)) \
        . = ALIGN(0x100); . = . + 4; \
        . = ALIGN(0x80); KEEP(*(.other_vector)) \
        . = ALIGN(0x100); KEEP(*(.debug_vector)) } \
        > _region_
    // 0-0x200 reserved for vectors
    hal_vsr_table = 0x80000200;
    hal_virtual_vector_table = 0x80000300;
    // search results
    // packages/hal/mips/idt79s334a/current/include/pkgconf/mlt_mips_idt32334_refidt334_rom.ldi
    SECTION_rom_vectors (rom, 0x80200000, LMA_EQ_VMA)
    // ...
### bare-metal firmware加载地址分析
一般来说，针对`bare-metal
firmware`，为了确定其加载地址，可以通过查询对应的芯片文档或`SDK`手册等资料，得到内存空间的映射分布。示例如下，其中`Flash
memory`的范围为`0x08000000~0x0801FFFF`。
![
](https://images.seebug.org/content/images/2021/06/f29517bc-6e1a-4cb9-8975-05f10bde4d4b.png-w331s)
> 来源: [STM32F103C8 memory
> mapping](https://www.st.com/resource/en/datasheet/stm32f103c8.pdf)
此外，对于一些`ARM`架构的`bare-metal firmware`，还可以通过中断向量表来推测加载地址。中断向量表中的前2项内容分别为`Initial
SP value`和`Reset`，其中`Reset`为`reset
routine`的地址，设备上电/重置时将会从这里开始执行，根据该地址推测可能的加载地址。
> In the used cores, an ARM Cortex-M3, the boot process is build around the
> reset exception. At device boot or reboot the core assumes the vector table
> at `0x0000.0000`. The vector table contains exception routines and the
> initial value of the stack pointer. On power-on now the microcontroller
> first loads the initial stack pointer from `0x0000.0000` and then address of
> the reset vector (`0x0000.0004`) into the program counter register (`R15`).
> The execution continues at this address. ([来源](https://blog.3or.de/starting-> embedded-reverse-engineering-freertos-libopencm3-on-stm32f103c8t6.html))
![
](https://images.seebug.org/content/images/2021/06/215d312d-edc4-4526-8e1c-1fabe2d45e17.png-w331s)
> 来源：[ARM Cortex-M3 Vector
> table](https://developer.arm.com/documentation/dui0552/a/the-> cortex-m3-processor/exception-model/vector-table)
在没有对应的芯片文档或`SDK`手册等资料时，可以尝试从固件本身出发，通过分析固件中的一些特征来推测可能的加载地址。例如，[Magpie](https://www.anquanke.com/post/id/198276)通过识别`ARM`固件中的函数入口表，然后基于函数入口表中的地址去推测可能的加载基址；[limkopi.me](https://limkopi.me/analysing-sj4000s-firmware/)通过查找指令中引用的固定地址，成功试出了该`eCos`固件的加载地址。上述方法的本质都是查找固件中存在的固定地址(绝对地址)，因为即使加载地址不正确，引用的这些固定地址也不会改变。下面尝试通过同样的方法来对`Zyxel`
`RGS200-12P`设备的固件进行分析。
> 由于该固件是`MIPS`架构的，而`Magpie`的工具是针对`ARM`架构的，因此并未直接尝试该工具。
### eCos固件加载地址分析
前面使用`binwalk`工具进行分析时，其输出结果中包含`"eCos kernel exception handler, architecture:
MIPSEL, exception vector table base address:
0x80000200"`。通过查看`binwalk`中`ecos`对应的[magic](https://github.com/ReFirmLabs/binwalk/blob/master/src/binwalk/magic/ecos)，如下，表明`binwalk`在该固件中匹配到一些模式。
    # eCos kernel exception handlers
    #
    # mfc0    $k0, Cause       # Cause of last exception
    # nop                      # Some versions of eCos omit the nop
    # andi    $k0, 0x7F
    # li      $k1, 0xXXXXXXXX
    # add     $k1, $k0
    # lw      $k1, 0($k1)
    # jr      $k1
    # nop
    0       string      \x00\x68\x1A\x40\x00\x00\x00\x00\x7F\x00\x5A\x33    eCos kernel exception handler, architecture: MIPSEL,
    >14     leshort     !0x3C1B                                             {invalid}
    >18     leshort     !0x277B                                             {invalid}
    >12     uleshort    x                                                   exception vector table base address: 0x%.4X
    >16     uleshort    x                                                   \b%.4X
使用`IDA`工具加载该文件，设置架构为`mipsl`、加载地址为`0x80000000`，在最开始处`Make Code`后，看到了熟悉的`eCos
kernel exception
handler`，同时其中包含一个固定地址为`0x80000200`。由于该固件文件有点大(约`10M`)，仅靠单个地址去猜测加载地址比较费事：(1)
一次完整的分析比较耗时(大概几分钟)，猜测多个地址的话需要分析好几次；(2)
手动去确认识别出的函数以及字符串交叉引用是否正确也比较麻烦(可能包含成百上千个函数及字符串交叉引用)。因此还需要查找更多的固定地址以及更有规律的地址，来确定加载地址的区间。
> 由于对`eCos`系统不了解，刚开始以为加载地址可能在`0x80000000~0x80000200`之间 :(，后来发现不对。
    ROM:80000000  # Segment type: Pure code
    ROM:80000000                 .text # ROM
    ROM:80000000                 mfc0    $k0, Cause       # Cause of last exception
    ROM:80000004                 nop
    ROM:80000008                 andi    $k0, 0x7F
    ROM:8000000C                 li      $k1, unk_80000200
    ROM:80000014                 add     $k1, $k0
    ROM:80000018                 lw      $k1, 0($k1)
    ROM:8000001C                 jr      $k1
    ROM:80000020                 nop