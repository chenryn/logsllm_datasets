6
7
8
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
41
42
46
47
50
51
1 analyzer HTTP withcontext { # members of $context
connection: HTTP_Conn;
flow:
HTTP_Flow;
4 };
5 enum DeliveryMode {
UNKNOWN_DELIVERY_MODE,
CONTENT_LENGTH,
CHUNKED,
9 };
10 # Regular expression patterns
11 type HTTP_TOKEN = RE/[ˆ()<>@,;:\\"\/\[\]?={} \t]+/;
12 type HTTP_WS
13 extern type BroConn;
14 extern type HTTP_HeaderInfo;
15 %header{
= RE/[ \t]*/;
// Between %.*{ and %} is embedded C++ header/code
class HTTP_HeaderInfo {
public:
HTTP_HeaderInfo(HTTP_Headers *headers) {
delivery_mode = UNKNOWN_DELIVERY_MODE;
for ( int i = 0; i length(); ++i ) {
HTTP_Header *h = (*headers)[i];
if ( h->name() == "CONTENT-LENGTH" ) {
delivery_mode = CONTENT_LENGTH;
content_length = to_int(h->value());
} else if ( h->name() == "TRANSFER-ENCODING"
&& has_prefix(h->value(), "CHUNKED") ) {
delivery_mode = CHUNKED;
}
}
}
DeliveryMode delivery_mode;
int content_length;
upflow = HTTP_Flow(true); downflow = HTTP_Flow(false);
};
35 %}
36 # Connection and flow
37 connection HTTP_Conn(bro_conn: BroConn) {
39 };
40 flow HTTP_Flow(is_orig: bool) {
flowunit = HTTP_PDU(is_orig)
38
43 };
44 # Types
45 type HTTP_PDU(is_orig: bool) = case is_orig of {
withcontext(connection, this);
true
false -> reply:
-> request: HTTP_Request;
HTTP_Reply;
48 };
49 type HTTP_Request = record {
request:
msg:
HTTP_RequestLine;
HTTP_Message;
52 };
53 type HTTP_Reply = record {
54
55
56 };
reply:
msg:
HTTP_ReplyLine;
HTTP_Message;
58
59
60
61
62
64
65
66
75
76
77
80
81
57 type HTTP_RequestLine = record {
method:
:
uri:
:
version:
HTTP_TOKEN;
HTTP_WS;
RE/[[:alnum:][:punct:]]+/;
HTTP_WS;
HTTP_Version;
63 } &oneline, &let {
bro_gen_req: bool = bro_event_http_request(
# an anonymous field has no name
$context.connection.bro_conn,
method, uri, version.vers_str);
67 };
68 type HTTP_ReplyLine = record {
HTTP_Version;
HTTP_WS;
RE/[0-9]\{3\}/;
HTTP_WS;
bytestring &restofdata;
version:
:
status:
:
reason:
69
70
71
72
73
74 } &oneline, &let {
bro_gen_resp: bool = bro_event_http_reply(
$context.connection.bro_conn,
version.vers_str, to_int(status), reason);
78 };
79 type HTTP_Version = record {
:
vers_str:
"HTTP/";
RE/[0-9]+\.[0-9]+/;
82 };
83 type HTTP_Message = record {
HTTP_Headers;
HTTP_Body(HTTP_HeaderInfo(headers));
headers:
body:
84
85
86 };
87 type HTTP_Headers = HTTP_Header[] &until($input.length() == 0);
88 type HTTP_Header = record {
HTTP_TOKEN;
":";
HTTP_WS;
bytestring &restofdata;
name:
:
:
value:
89
90
91
92
93 } &oneline, &let {
94
95
96
bro_gen_hdr: bool = bro_event_http_header(
$context.connection.bro_conn,
$context.flow.is_orig, name, value);
97 };
98 type HTTP_Body(hdrinfo: HTTP_HeaderInfo) =
case hdrinfo.delivery_mode of {
99
100
101
102
103
-> chunks: HTTP_Chunks;
-> other: HTTP_UnknownBody;
CONTENT_LENGTH -> body: bytestring &chunked,
CHUNKED
default
104 };
105 type HTTP_Chunks = record {
&length = hdrinfo.content_length;
chunks:
headers:
HTTP_Chunk[] &until($element.chunk_length == 0);
HTTP_Headers;
108 };
109 type HTTP_Chunk = record {
len_line:
data:
opt_crlf:
bytestring &oneline;
bytestring &chunked, &length = chunk_length;
case chunk_length of {
-> none: empty;
0
default -> crlf: bytestring &oneline;
106
107
110
111
112
113
114
115
};
116 } &let {
118 };
117
chunk_length: int = to_int(len_line, 16); # in hexadecimal
Figure 2: A HTTP parser in binpac with Bro event generation, complete except for MIME and escape-sequence processing.
universally for binary protocols. Adding a parameter to each type
would be tedious and clutter the speciﬁcation. To solve this prob-
lem, we designate “byteorder” as an implicit type parameter that is
always passed to referenced types unless it is redeﬁned at the ref-
erenced type. The binpac compiler traverses the type reference
graph to ﬁnd out which types require byte-order speciﬁcation and
adds byte order parameters to their parse functions.
We have not yet added support for ASCII vs. Unicode to
binpac, though conceptually it will be similar to the support for
byte-order.
4.1.4 Derivative Fields
Sometimes it is useful to add user-deﬁned derivative ﬁelds to
a type deﬁnition to keep intermediate computation results (see
the deﬁnition of HTTP Chunk.chunk length in Figure 2, line
117), or to further process parsing results (DNS label in Figure 3,
lines 58-60). Derivative ﬁelds are speciﬁed within &let {...}
attributes.
A derivative ﬁeld may take one of two forms. First, a derivative
ﬁeld can be deﬁned with an expression, in the form of “ =
”, as in the HTTP example.
Second, it can be evaluated by mapping a type onto a piece of
computed input, in the form of “:  withinput
”.
Here 
evaluates to a sequence of bytes, which are passed to the parse func-
tion of  as input data. Such withinput ﬁelds allow us
to extend parsing beyond consecutive and non-overlapping pieces
of original input data. For instance, the computed input data might
be (1) a reassembly of fragments (e.g. a fragmented DCE/RPC
message body), (2) a Base64-decoded Email body, or (3) a DNS
name pointer (as deﬁned in Section 4.1.4 in [27]), as shown in Fig-
ure 3, lines 55-60.
In the DNS example, a DNS label can be a
sequence of bytes or a “name pointer” pointing to a DNS name
at some speciﬁc offset of the message’s source data.
In the lat-
ter case, we deﬁne a withinput ﬁeld to redirect the input to the
pointed location when parsing the DNS name (and add an attribute
2
3
4
5
6
1 type DNS_message = record {
DNS_header;
header:
DNS_question(this)[header.qdcount];
question:
answer:
DNS_rr(this)[header.ancount];
authority: DNS_rr(this)[header.nscount];
additional: DNS_rr(this)[header.arcount];
7 } &byteorder = bigendian, &exportsourcedata;
8 type DNS_header = record { ... };
9 type DNS_question(msg: DNS_message) = record {
11 } &let {
10
qname: DNS_name(msg); qtype: uint16; qclass: uint16;
12
13
14
15
16
19
20
21
22
23
25
26
27
28
29
30
# Generate Bro event dns_request if a query
bro_gen_request: bool = bro_event_dns_request(
$context.connection.bro_conn,
msg.header, qname, qtype, qclass)
&if (msg.header.qr == 0); # if a request
17 };
18 type DNS_rr(msg: DNS_message) = record {
rr_name:
rr_type:
rr_ttl:
rr_rdata:
DNS_name(msg);
uint16;
uint32;
DNS_rdata(msg, rr_type, rr_class)
&length = rr_rdlen;
rr_class:
rr_rdlen:
uint16;
uint16;
24 } &let {
bro_gen_A_reply: bool = bro_event_dns_A_reply(
$context.connection.bro_conn,
msg.header, this, rr_rdata.type_a)
&if (rr_type == 1);
bro_gen_NS_reply: bool = bro_event_dns_NS_reply(...);
&if (rr_type == 2);
31 };
32 type DNS_rdata(msg: DNS_message, rr_type: uint16,
33
34
35
36
37
1
2
# Omitted: TYPE_PTR, TYPE_MX, ...