KSHOT does not require trusting or depending on the OS
kernel. The Dyninst [24] and EEL [10] systems can be
applied to patch executable binary ﬁles. However, they do not
handle runtime memory. Kernel live patching systems must
traditionally handle application state in some manner — either
through checkpointing and recovery (as with many previous
approaches) or through hardware assistance and pausing (as in
KSHOT). The Libcare [25] system uses system calls and hooks
to replace buggy functions in a userspace process’s memory.
In a typical use, the replaced function is only used by one
process; by contrast, kernel live patching faces more signiﬁcant
consistency issues. The Kitsune [59] and PROTEOS [26]
systems are dynamic software updating approaches. They take
advantage of developer annotations of safe update points.
Developer-marked software locations are assumed to admit
correct patching. By contrast, KSHOT infers target functions
automatically and uses hardware support to create safe pauses
for updates.
Fetch
Preprocess
Restore
Keygen
Patch
Switch
CVE-2017-18270
CVE-2017-16994
CVE-2016-5696
CVE-2016-2143
CVE-2015-7872
CVE-2014-4608
0
0.25
0.5
0.75
Time (μs)
1
·104
Fig. 4: SGX-based patch preparation time.
9
CVE-2017-18270
CVE-2017-16994
CVE-2016-5696
CVE-2016-2143
CVE-2015-7872
CVE-2014-4608
0
5
10
15
20
25
30
35
40
45
50
Time (μs)
Fig. 5: SMM-based live patching time.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV: Comparison with non-kernel binary patching.
TABLE V: Comparison with kernel patching systems.
Kernel Dependency
Untrusted OS
Dyninst [24]
EEL [10]
Libcare [25]
Kitsune [59]
PROTEOS [26]
KSHOT
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)






(cid:2)
Applicability
userspace
userspace
userspace
userspace
kernel
kernel
KUP [8]
KARMA [9]
kpatch [10]
KSHOT
Type
kernel
instruction
function
function
Downtime
3s/kernel
5μs/patch1
45.6ms/patch1
50μs/patch1
Untrusted OS Memory



(cid:2)
>30G
lua engine
16G
18M
1 for an averaged sized patch of less than 1KB
2) Kernel Patching Comparison: Existing kernel live patch-
ing systems assume that patches are trusted when they are
stored in the target OS. However, the integrity of patches can
be easily compromised by attacks which have the kernel access
privilege (e.g., syscall hijacking [19]). By contrast, KSHOT
leverages the SGX enclave to preprocess binary patches with-
out having to trust
the underlying OS. Additionally, data
blocks transmitted between SGX and SMM through the shared
memory are encrypted to protect the patch’s integrity from
malicious modiﬁcation during preprocessing.
In addition, existing solutions rely on kernel-speciﬁc func-
tions to implement
the patching operations (e.g., ptrace,
stop machine, kexec). However, existing vulnerabilities [55],
such as CVE-2015-7837, CVE-2014-4699, or CVE-2012-
4508, can affect those particular kernel functions. For example,
the CVE-2015-7837 vulnerability allows the attacker to load
an unsigned kernel via kexec, which would compromise KUP’s
patching mechanism. In KSHOT,
live patching operations
execute in the SMM handler, which cannot be modiﬁed even if
the underlying Target OS is compromised. Our use of SMM as
a trusted execution environment for deploying patches prevents
a compromised OS from interfering with KSHOT.
We compare KSHOT with representative kernel live patch-
ing methods (including KUP, KARMA, kpatch) in Table V
in terms of patch granularity, patching time,
trusted code
base, and memory consumption. KUP replaces an entire
vulnerable kernel in around 3 seconds. Additionally, KUP
can handle patches with complex data structure changes.
KARMA requires less than 5μs for small patches and uses
very little memory. kpatch takes longer, but it can be deployed
and integrated in the Linux kernel. However, these existing
methods all rely on the OS kernel (and thus their TCB includes
the whole kernel). By contrast, in KSHOT, the TCB extends
only to SMM and the SGX enclave. Moreover, KSHOT needs
no checkpointing of running applications, and uses only 18MB
extra memory space for patch analysis and management.
Moreover, KSHOT requires only about 50μs to deploy most
patches, which is faster than all existing non-instruction-level
methods. Our approach provides an efﬁcient and secure live
patching mechanism.
total system overhead over 1, 000 live patches. Finally, this
approach requires a substantially smaller TCB compared to
previous techniques.
To put these results in context, we discuss two of our
kernel patches with respect to time from vulnerability dis-
covery to patch to adoption. First, CVE-2014-8133 was ﬁrst
discovered 10 October 2014, but a patch was not created
until 14 December 2014 in Linux 3.13. Moreover, this patch
did not get merged into Ubuntu 14.04 until 26 Feb 2015.
Second, CVE-2017-17806 was discovered 17 October 2017,
with a corresponding patch built 29 November 2017 for Linux
4.4, and merged into Ubuntu 16.04 on 4 April 2018. These
timelines match industry reports that critical CVEs take an
average of over a month to get patched [60]. However, even
when a patch is created,
time for
end users to adopt
the new patch [61]—many successful
exploits rely on old, previously-patched vulnerabilities [62].
Live patching techniques are intended in part to reduce the
cost associated with applying an update, and techniques like
KSHOT show promise in furthering that cost reduction while
extending kernel live patching capabilities.
it may take additional
VII. RELATED WORK
In this section, we survey related work from the areas
of trusted execution environments, patch analysis, and live
patching methods.
A. Trusted Execution Environment
Trusted execution environments (TEE) are intended to pro-
vide a safe haven for programs to execute sensitive tasks.
Being able to run programs in a trusted execution environ-
ment is crucial to guarantee the program’s conﬁdentiality and
integrity. Hardware-based TEEs include x86 SMM [63], Intel
SGX [64], [65], AMD memory encryption technology [66],
and ARM TrustZone [67]. HyperCheck [39] leverages SMM to
build a trusted execution environment and monitor hypervisor
integrity. VC3 [21] leverages Intel SGX to provide an isolated
region for secure big data computation. Scotch [68] combines
x86 SMM and Intel SGX to monitor cloud resource usage.
KSHOT uses a TEE for reliable kernel live patching.
B. Patch Analysis
E. Evaluation Summary
We ﬁnd that KSHOT is a general, performant, secure ap-
proach to live patching vulnerable Linux kernels. Across an
indicative benchmark of 30 critical kernel security vulnerabil-
ity patches, we correctly applied all of them successfully with
our approach. Based on our combination of SGX and SMM
patch preparation and deployment, KSHOT incurs under 3%
Traditional patching mechanisms simply apply the source-
code-based patch to the kernel source, re-compile, and reboot
to install the new kernel. In live patching, we directly replace
binary-level code with a new version at runtime. However,
both approaches must identify the target code and prepare
the patch code by analyzing the source or binary code. Patch
analysis methods [42], [69]–[71] can be classiﬁed into two
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
10
broad types: source-to-source and binary-to-binary. Source-to-
source methods require both the original source code and the
patch code. To identify the functions in source code, methods
such as string [72], token [73], and parse tree [74] matching
can be used. Moreover,
the call graph [71] and control
ﬂow graph [75] can be constructed to identify relationships
between functions. By contrast, binary-to-binary methods do
not require source code. Both the patch and the target are
presented in a binary format, and all comparisons are based
only on binary-level features. To accurately identify relevant
function in binary code, tools such as IDA [46] can be used to
extract relevant information. Additionally, techniques such as
BinHunt [76] and iBinHunt [47] use symbolic execution and
theorem proving to formally verify basic block level semantic
equivalence. Fiber [42] employs a precise and accurate patch
code matching mechanism with the source patch code and
binary vulnerable functions. KSHOT analyzes compiled kernel
binary code as well as the source code patch to obtain rich
information (see Section V). Our prototype evaluation uses
codeviz, IDA, iBinHunt and Fiber, but our approach is agnostic
and could employ any similar tool.
C. Live Patching
Existing live patching focuses on open-source operating sys-
tems, mainly Linux. For example, Ksplice [12], kpatch [10],
and kGraft [11] can effectively patch security vulnerabilities
without causing a signiﬁcant downtime. kpatch and Ksplice
both stop the running OS and ensure that none of the processes
are affected by changes induced by patched functions. Speciﬁ-
cally, kpatch replaces the whole functions with patch ones, and
Ksplice patches individual instructions instead of functions.
kGraft patches vulnerabilities at function level, but does not
need to stop the running processes. It maintains the original
and patched function simultaneously and decides which one
to execute by monitoring the state of processes, potentially
inducing incorrect behavior or consuming additional storage.
These methods cannot address changes to data structures [8].
To address this limitation, KUP [8] replaces the whole kernel
with a patched version, but uses checkpoint-and-restore to
maintain application state consistency. However, it checkpoints
all the user processes, leading to large CPU and memory
overhead. KARMA [9] uses a kernel module to replace
vulnerable instructions that it identiﬁes from a given patch
diff. In addition, several live updating methods have been
integrated into operating systems, like Canonical Livepatch
Service [13] in Ubuntu, and Proteos [26] on MINIX 3, which
can update new components if the patch is small. However,
these methods still rely on the trustworthy operation of the
target OS, so potential kernel-level attacks may tamper with
the live patching operation, leading to system failure. KSHOT
addresses this by leveraging a TEE to reliably patch the target
kernel with a smaller TCB and low total overhead.
VIII. LIMITATIONS AND FUTURE WORK
In this section, we discuss potential limitations of our kernel
live patching approach.
Attacks to Trusted Execution Environments: While we
treat the x86 SMM and Intel SGX as a foundation to imple-
ment KSHOT, they might be compromised through vulnera-
bilities at the hardware or ﬁrmware level. For example, the
recent Foreshadow [32] is able to leak the information from
SMM or SGX. Some other attacks like SMM rootkits [33],
[34] or Software Grand Exposure [77], can also compromise
SMM or SGX; we consider these attacks beyond our scope.
Downtime for SMM Handler operations: Although
KSHOT outperforms existing kernel patching systems, it still
introduces some downtime for patching. This is because the
SMM Handler suspends the OS while applying the patch.
Note that KSHOT minimizes this downtime by moving the
preprocessing operations from (blocking) SMM to the (non-
blocking) SGX enclave.
Consistency Issues: Some complex patches may change
the semantics of target functions, which might affect other
non-patched functions. For example, a patch might change the
order in which locks are acquired in multiple functions at the
same time, or some patches might change global data used
by multiple functions. Currently, KSHOT cannot handle those
cases. Our empirical evaluations suggest this is rare, occurring
in around 2% of kernel CVE patches. One way to address
this problem is to construct a consistency model and safely
choose patch tasks [10], [13], identify and patch all relevant
functions, which can be applied even to unstructured programs
(e.g., [78]). We leave this consideration for future work.
IX. CONCLUSIONS
In this paper, we presented KSHOT, a secure and efﬁcient
framework for kernel patching. It leverages x86 SMM and
Intel SGX to patch the kernel without depending on the OS.
Additionally, we use SMM to naturally store the runtime state
of the target host, which reduces external overhead and im-
proves live patching performance. Employing this hardware-
assisted mechanism supports faster restoration without external
checkpoint-and-restore solutions. We evaluate the effectiveness
and efﬁciency of KSHOT by providing an in-depth anal-