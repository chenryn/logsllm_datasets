firstName
lastName
age
0
"Jane"
"Bond"
Undefined
1
"Lars"
"Croft"
72
各个平台对以上方法的支持情况如表23.4所示。
表23.4
Chrome
Firebug
Firefox
IE
Node.js
Safari
dir
√
√
√
√
√
√
dirxml
√
√
√
√
group
√
√
√
√
√
groupCollapsed
√
√
√
√
√
groupEnd
√
√
√
√
√
table
√
√
23.5.5 性能和时间
以下是控制台API对应的性能和时间的方法。
console.markTimeline(label) [Safari-only]
与console.timeStamp相同。
console.profile(title?)
打开性能监测。可选参数title则用于表示性能报告。
console.profileEnd()
停止性能监测并打印报告。
console.time(label)
启动一个计时器，label参数指明了该计时器的标记。
console.timeEnd(label)
停止标记名为label的计时器，并将时间间隔打印出来。
console.timeStamp(label?)
以指定的label来记录一个时间戳。时间戳可以被记在控制台或是时间线上。
各平台的支持情况如表23.5和表23.6所示。
表23.5
Chrome
Firebug
Firefox
IE
Node.js
Safari
markTimeLine
√
profile
√
√
(devtools)
√
√
profileEnd
√
√
(devtools)
√
√
表23.6
Chrome
Firebug
Firefox
IE
Node.js
Safari
time
√
√
√
√
√
√
timeEnd
√
√
√
√
√
√
timeStamp
√
√
这里我们将marktimeline记为了斜体，因为它只被一个平台支持。表中的devtools则表示只有在开发者工具栏打开的情况才会有效。[2]
23.6 名称空间和特殊值
以下全局变量被作为函数的名称空间。要了解详情可以参考括号中对应的章节：
JSON
JSON API功能（第22章）
Math
数值API功能（第21章）
Object
元编程（17.17“备忘录：对象的使用”）
而以下的全局表里则包含了特殊值。你可以翻看括号中对应章节的内容进一步了解它们：
undefined
一个表示值不存在的值（8.3“undefined和null”）。
NaN
一个表示“非数值”的值（11.3.1“NaN”）
Infinity
表示数值无穷大的值（11.3.2“Infinity”）
[1] Mariusz Nowak（@medikoo）告诉我通过Function构造器执行的代码默认是非严格模式的。
[2] 感谢Matthias Reuter（@gweax）和Philipp Kyeck (@pkyeck)对本章的贡献。
第24章 编码和JavaScript
本章将简单介绍一下Unicode以及它在JavaScript中的实现。
24.1 Unicode历史
Unicode由Joe Becker(Xerox),Lee Collins(Apple)和Mark Davis(Apple)在1987年发起。在那时存在着众多互不兼容的编码标准，例如8位ASCII码的变体、Big 5码（繁体中文）、GB2312（简体中文）等，Unicode旨在创建一个国际化的字符集。而在Unicode之前，还并不存在一个标准的编码规范支持多语言的纯文本。而对于富文本系统，则已经有了一些标准允许你包容多种编码（例如苹果的WorldScript）。
第一版Unicode草案在1988年发布。草案的编写工作随着工作组的扩大一直持续着。而在1991年1月31日，Unicode联盟（http://www.unicode.org/consortium/consort.html）成立了：
Unicode联盟是一个致力于开发、维护、促进软件国际化标准和数据（尤其是Unicode标准）发展的非营利组织。
Unicode 1.0的第一版在1991年10月发布了，并很快在1992年6月发布了第二版。
24.2 Unicode中的重要概念
单个字符也许看起来很简单，但是它包含了很多方面。这也是为什么我们说Unicode是一个复杂的标准。以下是Unicode最为重要的基本概念。
（1）字符和字形
它们俩表示的内容很相似。字符是数字实体，而字形是语言的基本单位（例如英文字母、连字印刷、中文字、标点符号等）。对于程序员来说使用的是字符，而对于普通人而言看到的是字形。通过多个字符用来展示一个字形。例如ô，包含了字符o和字符 ^。
（2）雕文
雕文表示显示字形的具体方式。有时，同一个字形可能也会有不同的显示，这都取决于它的上下文以及其他的一些因素。例如，字形f和i可以被表示为一个f雕文和一个i雕文，这个雕文可以与一个连字符雕文连接，也可以不与连字符雕文连接。
（3）码位
Unicode通过一种叫码位的数字来表示字符。码位的十六进制范围从0x0到0x10FFFF（17位十六进制）。
（4）码元
我们将码位编码为码元以便存储和传输它们，码元是一些固定长度的数据片段。其中码元的长度单位是位，它的单位长度由编码方案决定，类似这样的编码方案在Unicode中有很多，例如UTF-8、UTF-16。名称中的数字就表示码元的单位长度，如果码位过大不能被单个码元表示，那么它将会被多个码元所表示；这就是说，码元能表示的单个码位的单位长度是有差异的。
（5）BOM（位顺序标识）
如果码元比单个字节要大的话，那么将由字节顺序决定编码。BOM是一个以单个伪字符（该伪字符可能被编码为多码元）开头的字符，它表明当前码元有一个大数结尾（最显著的位在前面）还是有一个小数结尾（最不显著的位在最前面）。默认不带BOM头的文本是大数结尾。BOM同样指定了所使用的编码；它针对UTF-8，UTF-16等都是有差异的。此外，如果Web浏览器没有其他指明文本编码的信息，BOM信息会被用来作为Unicode的标识。然后BOM的使用并不多，原因如下。
UTF-8是目前最流行的Unicode编码，并且它不需要BOM头，因为它只有一种字节顺序。
许多字符编码都会指定一个固定的字节顺序，这样BOM头就用不到了。包括UTF-16BE（UTF-16大尾数），UTF-16LE，UTF-32BE以及UTF-32LE。这种方式是一种安全控制字节顺序的方式，因为元数据和数据被分开而不会混淆。
（6）常规化
有时候同一个字形可以被展示为多种形式。例如ö字形可以用一个单个码位或是o紧接着字符¨（分音符、双点）表示。常规化则会将一个文本转换为典型的表示方式；相等的码位以及码位的顺序都会转化为对应的相同的码位（或是相同的码位顺序）。这对于文本处理是很有用的（例如，文本的搜索）。Unicode中制定了多种常规化的方式。
（7）字符属性
每一个Unicode字符都拥有多种规范规定的属性，我们在这里列了一些。
名称。它是一个英文名，由字母A～Z，数字0～9，减号以及空格组成。以下是两个例子：