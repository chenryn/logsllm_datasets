title:Pixel: Multi-signatures for Consensus
author:Manu Drijvers and
Sergey Gorbunov and
Gregory Neven and
Hoeteck Wee
Pixel: Multi-signatures for Consensus
Manu Drijvers, DFINITY; Sergey Gorbunov, Algorand and University of Waterloo; 
Gregory Neven, DFINITY; Hoeteck Wee, Algorand and CNRS, ENS, PSL
https://www.usenix.org/conference/usenixsecurity20/presentation/drijvers
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Pixel: Multi-signatures for Consensus
Manu Drijvers
DFINITY
Sergey Gorbunov
Algorand and University of Waterloo
Hoeteck Wee∗
Algorand and CNRS, ENS, PSL
Gregory Neven
DFINITY
Abstract
In Proof-of-Stake (PoS) and permissioned blockchains, a com-
mittee of veriﬁers agrees and sign every new block of trans-
actions. These blocks are validated, propagated, and stored
by all users in the network. However, posterior corruptions
pose a common threat to these designs, because the adversary
can corrupt committee veriﬁers after they certiﬁed a block
and use their signing keys to certify a different block. De-
signing efﬁcient and secure digital signatures for use in PoS
blockchains can substantially reduce bandwidth, storage and
computing requirements from nodes, thereby enabling more
efﬁcient applications.
We present Pixel, a pairing-based forward-secure multi-
signature scheme optimized for use in blockchains, that
achieves substantial savings in bandwidth, storage require-
ments, and veriﬁcation effort. Pixel signatures consist of two
group elements, regardless of the number of signers, can be
veriﬁed using three pairings and one exponentiation, and sup-
port non-interactive aggregation of individual signatures into
a multi-signature. Pixel signatures are also forward-secure
and let signers evolve their keys over time, such that new keys
cannot be used to sign on old blocks, protecting against pos-
terior corruptions attacks on blockchains. We show how to
integrate Pixel into any PoS blockchain. Next, we evaluate
Pixel in a real-world PoS blockchain implementation, show-
ing that it yields notable savings in storage, bandwidth, and
block veriﬁcation time. In particular, Pixel signatures reduce
the size of blocks with 1500 transactions by 35% and reduce
block veriﬁcation time by 38%.
1 Introduction
Blockchain technologies are quickly gaining popularity for
payments, ﬁnancial applications, and other distributed appli-
cations. A blockchain is an append-only public ledger that is
maintained and veriﬁed by distributed nodes. At the core of
the blockchain is a consensus mechanism that allows nodes
∗Authors are listed alphabetically.
to agree on changes to the ledger, while ensuring that changes
once conﬁrmed cannot be altered.
In the ﬁrst generation of blockchain implementations, such
as Bitcoin, Ethereum, Litecoin, the nodes with the largest
computational resources choose the next block. These im-
plementations suffer from many known inefﬁciencies, low
throughput, and high transaction latency [17, 27, 49]. To over-
come these problems, the current generation of blockchain im-
plementations such as Algorand, Cardano, Ethereum Casper,
and Dﬁnity turn to proofs of stake (PoS), where nodes with
larger stakes in the system —as measured, for instance, by the
amount of money in their account— are more likely to partic-
ipate in choosing the next block [21,24,29,32,34,39,47]. Per-
missioned blockchains such as Ripple [54] and Hyperledger
Fabric [4] take yet another approach, sacriﬁcing openness
for efﬁciency by limiting participation in the network to a
selected set of nodes.
All PoS-based blockchains, as well as permissioned ones,
have a common structure where the nodes run a consensus
sub-protocol to agree on the next block to be added to the
ledger. Such a consensus protocol usually requires nodes
to inspect block proposals and express their agreement by
digitally signing acceptable proposals. When a node sees
sufﬁciently many signatures from other nodes on a particular
block, it appends the block to its view of the ledger.
Because the consensus protocol often involves thousands
of nodes working together to reach consensus, efﬁciency of
the signature scheme is of paramount importance. Moreover,
to enable outsiders to efﬁciently verify the validity of the
chain, signatures should be compact to transmit and fast to
verify. Multi-signatures [35] have been found particularly
useful for this task, as they enable many signers to create
a compact and efﬁciently veriﬁable signature on a common
message [15, 40, 58, 59].
The Problem of Posterior Corruptions. Chain integrity
in a PoS blockchain relies on the assumption that the adver-
sary controls less than a certain threshold (e.g., a third) of the
total stake; an adversary controlling more than that fraction
USENIX Association
29th USENIX Security Symposium    2093
may be able to fork the chain, i.e., present two different but
equally valid versions of the ledger. Because the distribution
of stake changes over time, however, the real assumption be-
hind chain integrity is not just that the adversary currently
controls less than a threshold of the stake, but that he never
did so at any time in the past.
This assumption becomes particularly problematic if stake
control is demonstrated through possession of signature keys,
as is the case in many PoS and permissioned blockchains.
Indeed, one could expect current stakeholders to properly
protect their stake-holding keys, but they may not continue to
do so forever, especially after selling their stake. Nevertheless,
without additional precautions, an adversary who obtains keys
that represent a substantial fraction of stake at some point in
the past can compromise the ledger at any point in the future.
The problem is further aggravated in efﬁcient blockchains that
delegate signing rights to a small committee of stakeholders,
because the adversary can gain control of the chain after
corrupting a majority of the committee members.
Referred to by different authors as long-range attacks [20],
costless simulation [52], and posterior corruptions [12], this
problem is best addressed through the use of forward-secure
signatures [3,9,41,46]. Here, each signature is associated with
the current time period, and a user’s secret key can be updated
in such a way that it can only be used to sign messages for
future time periods, not previous ones. An adversary that cor-
rupts an honest node can therefore not use the compromised
key material to create forks in the past of the chain.
1.1 Our Results
We present the Pixel signature scheme, which is a pairing-
based forward-secure multi-signature scheme for use in PoS-
based blockchains that achieves substantial savings in band-
width and storage requirements. To support a total of T
time periods and a committee of size N, the multi-signature
comprises just two group elements and veriﬁcation requires
only three pairings, one exponentiation, and N − 1 multipli-
cations. Pixel signatures are almost as efﬁcient as BLS multi-
signatures, as depicted in Figure 1, but also satisfy forward-
security; moreover, like in BLS multi-signatures, anybody
can non-interactively aggregate individual signatures into a
multi-signature.
Our construction builds on prior forward-secure signatures
based on hierarchical identity-based encryption (HIBE) [14,
18,22,26] and adds the ability to securely aggregate signatures
on the same message as well as to generate public parameters
without trusted set-up.
We achieve security in the random oracle model under a
variant of the bilinear Difﬁe-Hellman inversion assumption
[11, 14]. At a very high level, the use of HIBE techniques
allows us to compress O(logT ) group elements in a tree-
based forward-secure signature into two group elements, and
secure aggregation allows us to compress N signatures under
N public keys into a single multi-signature of the same size
as a single signature.
To validate Pixel’s design, we compared the performance
of a Rust implementation [1] of Pixel with previous forward-
secure tree-based solutions. We show how to integrate Pixel
into any PoS blockchain. Next, we evaluate Pixel on the Al-
gorand blockchain, showing that it yields notable savings in
storage, bandwidth, and block veriﬁcation time. Our exper-
imental results show that Pixel is efﬁcient as a stand-alone
primitive and in use in blockchains. For instance, compared
to a set of N = 1500 tree-based forward-secure signatures
(for T = 232) at 128-bit security level, a single Pixel signature
that can authenticate the entire set is 2667x smaller and can
be veriﬁed 40x faster (c.f. Tables 1 and 3). Pixel signatures
reduce the size of Algorand blocks with 1500 transactions
by ≈ 35% and reduce block veriﬁcation time by ≈ 38% (c.f.
Figures 3 and 4).
1.2 Related Work
Multi-signatures can be used to generate a single short sig-
nature validates that a message m was signed by N different
parties [6,10,13,31,35,43,44,48,50], Multi-signatures based
on the BLS signature scheme [13, 15, 16, 53] are particularly
well-suited to the distributed setting of PoS blockchains as
no communication is required between the signers; anybody
can aggregate individual signatures into a multi-signature.
However, these signatures are not forward-secure.
Tree-based forward-secure signatures [9, 36, 41, 46] can be
used to meet the security requirements, but they are not very
efﬁcient in an N-signer setting because all existing construc-
tions have signature size at least O(N logT ) group elements,
where T is an upper bound on the number of time periods.
Some schemes derived from hierarchical identity-based en-
cryption (HIBE) [14, 18, 22] can bring that down to O(N)
group elements, which is still linear in the number of signers.
The only forward-secure multi-signature schemes that ap-
peared in the literature so far have public key length linear
in the number of time periods T [45] or require interaction
between the signers to produce a multi-signature [55], neither
of which is desirable in a blockchain scenario. The forward-
secure multi-signature scheme of Yu et al. [61] has signature
length linear in the number of signers, so is not really a multi-
signature scheme.
Combining the generic tree-based forward-secure signature
scheme of Bellare-Miner [9] with BLS multi-signatures [13,
16] gives some savings, but still requires O(T ) “certiﬁcates”
to be included in each multi-signature. Batch veriﬁcation [8]
can be used to speed up veriﬁcation of the certiﬁcates to some
extent, but does not give us any space savings. Compared with
existing tree-based forward-secure signatures in [9,36,41,46],
our savings are two-fold:
• we reduce the size of the signature set for N commit-
2094    29th USENIX Security Symposium
USENIX Association
scheme
BLS multi-signatures [13, 15, 53]
Pixel multi-signatures (this work)
key update
–
2 exp
sign
1 exp
4 exp
verify
2 pair
3 pair + 1 exp
|σ|
1
2
|pk|
1
1
|sk|
O(1)
O((logT )2)
forward security
no
yes
Figure 1: Comparing our scheme with BLS signatures. Here, “exp” and “pair” refer to number of exponentiations and pairings
respectively. T denotes the maximum number of time periods. We omit additive overheads of O(logT ) multiplications. The
column “key update” refers to amortized cost of updating the key for time t to t + 1. The columns |σ|, |pk|, and |sk| denote the
sizes of signatures, public keys, and secret keys, respectively, in terms of group elements. Aggregate veriﬁcation for N signatures
requires an additional N − 1 multiplications over basic veriﬁcation.
tee members from O(N logT ) group elements1 to O(1)
group elements; and
• we reduce the veriﬁcation time from O(N) exponentia-
tions to O(1) exponentiation and O(N) multiplications.
1.3 Paper Organization
The rest of this paper is organized as follows:
• In Section 2, we give a high level technical description
of our new pairing-based forward-secure multi-signature
scheme.
• In Sections 4 and 5, we describe the scheme in details.
We prove the security of the construction in the random
oracle model under a variant of a bilinear Difﬁe-Hellman
inversion problem.
• In Section 6, we explain how to apply Pixel to PoS
blockchains to solve posterior corruptions.
• In Section 7, we evaluate the efﬁciency savings for stor-
age, bandwidth, and block veriﬁcation time from using
Pixel on the Algorand PoS blockchain.
2 Technical Overview
Our construction builds on prior forward-secure signatures
based on hierarchical identity-based encryption (HIBE) [14,
18,22,26] and adds the ability to securely aggregate signatures
on the same message as well as to generate public parameters
without trusted set-up.
Overview of our scheme. Starting with a bilinear group
(G1,G2,Gt) with e : G1 × G2 → Gt of prime order q and
generators g1,g2 for G1,G2 respectively, a signature on M ∈
Zq at time t under public key gx
2 is of the form:
σ = (σ(cid:48),σ(cid:48)(cid:48)) = (hx · F(t,M)r,gr
2) ∈ G1 × G2
1 Each tree-based signature comprise O(logT ) group elements corre-
sponding to a path in a tree of depth logT (see Section 7 for details), and
there are N such signatures, one for which committee member.
where the function F(t,M) can be computed with some public
parameters (two group elements in G1 in addition to h ∈ G1)
and r is fresh randomness used for signing. Veriﬁcation relies
on the relation:
e(σ(cid:48),g2) = e(h,y)· e(F(t,M),σ(cid:48)(cid:48))
and completeness follows directly:
e(σ(cid:48),g2) = e(hx · F(t,M)r,g2)
= e(hx,g2)· e(F(t,M)r,g2)
2)· e(F(t,M),gr
= e(h,gx
2)
= e(h,y)· e(F(t,M),σ(cid:48)(cid:48)) .
Note that e(h,y) can be precomputed to save veriﬁcation
computation.
Given N signatures σ1, . . . ,σN ∈ G1 × G2 on the same
message M at time t under N public keys gx1
2 , we
can produce a multi-signature Σ on M by computing the
coordinate-wise product of σ1, . . . ,σN. Concretely, if σi =
(hxi · F(t,M)ri,gri
2 , . . . ,gxN
2 ), then
Σ = (hx1+···+xN · F(t,M)r(cid:48)
,gr(cid:48)
2 )
where r(cid:48) = r1 +··· +rN. To verify Σ, we ﬁrst compute a single
aggregate public key that is a compressed version of all N
individual public keys
apk ← y1 · . . .· yN ,
and verify Σ against apk using the standard veriﬁcation equa-
tion.
How to generate and update keys. To complete this
overview, we describe a simpliﬁed version of the secret keys
and update mechanism, where the secret keys are of size O(T )
instead of O((logT )2). The construction exploits the fact that
the function F satisﬁes
F(t,M) = F(t,0)· F(cid:48)M
for some constant F(cid:48). This means that in order to sign mes-
sages at time t, it sufﬁces to know
(cid:101)skt = {hx · F(t,0)r,F(cid:48)r,gr
2}
USENIX Association
29th USENIX Security Symposium    2095
from which we can compute (hx · F(t,M)r,gr
2).
The secret key skt for time t is given by:
(cid:101)skt ,(cid:101)skt+1,··· ,(cid:101)skT
generated using independent randomness. To update from
the key skt to skt+1, we simply erase (cid:101)skt. Forward security
at time t only learns skt and, in particular, does not learn (cid:101)skt(cid:48)
follows from the fact that an adversary who corrupts a signer
for t(cid:48) < t, and is unable to create signatures for past time slots.
To compress the secret keys down to O((logT )2) without
increasing the signature size, we combine the tree-based ap-
proach in [22] with the compact HIBE in [14]. Roughly speak-
ing, each skt now contains logT sub-keys, each of which con-
tains O(logT ) group elements and looks like an “expanded”
T − t + 1 sub-keys, each of which contains three group ele-
ments.)
version of (cid:101)skt. (In the simpliﬁed scheme, each skt contains
Security against rogue-key attacks. The design of multi-
signature schemes must take into account rogue-key attacks,
where an adversary forges a multi-signature by providing
specially crafted public keys that are correlated with the public
keys of the honest parties. We achieve security against rogue-
key attacks by having users provide a proof of possession
of their secret key [13, 53]; it sufﬁces here for each user to
provide a standard BLS signature y(cid:48) on its public key y (cf.
the proof π in the key generation and veriﬁcation algorithms
in Section 5.2).
Avoiding trusted set-up. Note that the common parame-
ters contain uniformly random group elements h,h0, . . . ,hlogT
in G2 which are used to deﬁne the function F. These elements
can be generated using a indifferentiable hash-to-curve algo-
rithm [19,60] evaluated on some ﬁxed sequence of inputs (e.g.
determined by the digits of pi), thereby avoiding any trusted
set-up.