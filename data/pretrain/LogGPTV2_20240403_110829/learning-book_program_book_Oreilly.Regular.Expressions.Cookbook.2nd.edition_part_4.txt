replace/ operator. The Perl replacement text flavor corresponds with the Perl reg-
ular expression flavor. This book covers Perl 5.6 to Perl 5.14. Perl 5.10 added sup-
port for named backreferences in the replacement text, as it adds named caprure
to the regular expression syntax.
Python
Python’s re module provides a sub function to search and replace. The Python
replacement text flavor corresponds with the Python regular expression flavor.
This book covers Python 2.4 until 3.2. There are no differences in the replacement
text syntax berween these versions of Python.
Ruby
atq Bupnpout °as1 agenue kqny au po 1ued st uoddns uotssaudxa aeqngau s,kqn
search-and-replace function. This book covers Ruby 1.8 and 1.9. While there are
significant differences in the regex syntax between Ruby 1.8 and 1.9, the
Search and Replace with Regular Expressions | 7
---
## Page 24
replacement syntax is basically the same. Ruby 1.9 only adds support for named
backreferences in the replacement text. Named capture is a new feature in Ruby
1.9 regular expressions.
ToolsforWorkingwithRegularExpressions
Unless you have been programming with regular expressions for some time, we rec-
ommend that you first experiment with regular expressions in a tool rather than in
source code. The sample regexes in this chapter and Chapter 2 are plain regular ex-
pressions that don’t contain the extra escaping that a programming language (even a
Unix shell) requires. You can type these regular expressions directly into an applica-
tion's search box.
Chapter 3 explains how to mix regular expressions into your source code. Quoting a
literal regular expression as a string makes it even harder to read, because string es-
caping rules compound regex escaping rules. We leave that until Recipe 3.1. Once you
understand the basics of regular expressions, you′ll be able to see the forest through
the backslashes.
The tools described in this section also provide debugging, syntax checking, and other
feedback that you won’t get from most programming environments. Therefore, as you
develop regular expressions in your applications, you may find it useful to build a
complicated regular expression in one of these tools before you plug it in to your
program.
RegexBuddy
RegexBuddy (Figure 1-1) is the most full-featured tool available at the time of this
writing for creating, testing, and implementing regular expressions. It has the unique
ability to emulate all the regular expression flavors discussed in this book, and even
convert among the different flavors.
RegexBuddy was designed and developed by Jan Goyvaerts, one of this book’s authors
Designing and developing RegexBuddy made Jan an expert on regular expressions, and
using RegexBuddy helped get coauthor Steven hooked on regular expressions to the
point where he pitched this book to O'Reilly.
If the screenshot (Figure 1-1) looks a little busy, that'’s because we’ve arranged most of
the panels side by side to show off RegexBuddy’s extensive functionality. The default
view tucks all the panels neatly into a row of tabs. You also can drag panels off to a
secondary monitor.
To try one of the regular expressions shown in this book, simply type it into the edit
box at the top of RegexBuddy's window. RegexBuddy automatically applies syntax
highlighting to your regular expression, making errors and mismatched brackets
obvious.
8 ∣ Chapter 1: Introduction to Regular Expressions
---
## Page 25
Figure 1-1. RegexBuddy
The Create panel automatically builds a detailed English-language analysis while you
type in the regex. Double-click on any description in the regular expression tree to edit
that part of your regular expression. You can insert new parts to your regular expression
by hand, or by clicking the Insert Token button and selecting what you want from a
menu. For instance, if you don’t remember the complicated syntax for positive look-
ahead, you can ask RegexBuddy to insert the proper characters for you.
Type or paste in some sample text on the Test panel. When the Highlight button is
active, RegexBuddy automatically highlights the text matched by the regex.
Some of the buttons you're most likely to use are:
List All
Displays a list of all matches.
Replace
The Replace button at the top displays a new window that lets you enter replace-
ment text. The Replace button in the Test box then lets you view the subject text
after the replacements are made.
Split (The button on the Test panel, not the one at the top)
on where matches are found in your subject text using your regular expression.
Treats the regular expression as a separator, and splits the subject into tokens based
Click any of these buttons and select Update Automatically to make RegexBuddy keep
the results dynamically in sync as you edit your regex or subject text.
Tools ferWorking with Regular Epressions | 9
---
## Page 26
To see exactly how your regex works (or doesn't), click on a highlighted match or at
the spot where the regex fails to match on the Test panel, and click the Debug button.
RegexBuddy will switch to the Debug panel, showing the entire matching processes
step by step. Click anywhere on the debugger’s output to see which regex token
matched the text you clicked on. Click on your regular expression to highlight that part
of the regex in the debugger.
On the Use panel, select your favorite programming language. Then, select a function
to instantly generate source code to implement your regex. RegexBuddy’s source code
templates are fully editable with the built-in template editor. You can add new functions
and even new languages, or change the provided ones.
To test your regex on a larger set of data, switch to the GREP panel to search (and
replace) through any number of files and folders.
peoqd au o1 a doo fuureueu au,nof apo aomos u xa8a e puy no usu
including the delimiting quotes or slashes. In RegexBuddy, click the Paste button at
the top and select the string style of your programming language. Your regex will then
appear in RegexBuddy as a plain regex, without the extra quotes and escapes needed
for string literals. Use the Copy button at the top to create a string in the desired syntax,
so you can paste it back into your source code.
As your experience grows, you can build up a handy library of regular expressions on
the Library panel. Make sure to add a detailed description and a test subject when you
store a regex. Regular expressions can be cryptic, even for experts.
If you really can’t figure out a regex, click on the Forum panel and then the Login
no pue XO x seadde uauss ufo au ~ppngxa paseupund asno  uonq
are instantly connected to the RegexBuddy user forum. Steven and Jan often hang out
there.
RegexBuddy runs on Windows 98, ME, 2000, XP, Vista, 7, and 8. For Linux and Apple
fans, RegexBuddy also runs well on VMware, Parallels, CrossOver Office, and with a
few issues on WINE. You can download a free evaluation copy of RegexBuddy at hrrp:
//www.regexbucddy.cora/RegexBuddyCookbook.exe. Except for the user forum, the trial
is fully functional for seven days of actual use.
RegexPal
RegexPal (Figure 1-2) is an online regular expression tester created by Steven Levithan,
one of this book's authors. All you need to use it is a modern web browser. RegexPal
is written entirely in JavaScript. Therefore, it supports only the JavaScript regex flavor,
as implemented in the web browser you’re using to access it.
10 | Chapter 1: Introduction to Regular Expressions
---
## Page 27
Figure 1-2. RegexPal
To try one of the regular expressions shown in this book, browse to Fattp://regexpal
com. Type the regex into the box at the top. RegexPal automatically applies syntax
highlighting to your regular expression, which immediately reveals any syntax errors
in the regex. RegexPal is aware of the cross-browser issues that can ruin your day when
dealing with JavaScript regular expressions. If certain syntax doesn’t work correctly in
some browsers, RegexPal will highlight it as an error.
Now type or paste some sample text into the large box at the center. RegexPal auto-
matically highlights the text matched by your regex.
There are no buttons to click, making RegexPal one of the most convenient online
regular expression testers.
RegexMagic
RegexMagic (Figure 1-3) is another tool designed and developed by Jan Goyvaerts.
Where RegexBuddy makes it easy to work with the regular expression syntax, Regex-
Magic is primarily designed for people who do not want to deal with the regular ex-
pression syntax, and certainly won’t read 500-page books on the topic.
With RegexMagic, you describe the text you want to match based on sample text and
RegexMagic’s high-level pattems. The screen shot shows that selecting the “email ad-
dress? pattern is all you need to do to get a regular expression to match an email address.
You can customize the pattern to limit the allowed user names and domain names, and
you can choose whether to allow or require the mailto: prefix.
L11 suojssaadxg ejnbag qpem bupm Jo gqo
---
## Page 28
+
Figure 1-3. RegexMagic
Since you are reading this book, you are on your way to becoming wellversed in regular
expressions. RegexMagic will not be your primary tool for working with them. But
there willstill be situations where it comes in handy. In Recipe 6.7 we explain how you
sion is not the best way to se if a number is within a certain range, there are situations
can create a regular expression to match a range of numbers. Though a regular expres-
where a regular expression is all you can use. There are far more applications with a
built-in regex engine than with a built-in scripting language. There is nothing difficult
about the technique described in Recipe 6.7. But it can be quite tedious to do this by
hand.
Imagine that instead of the simple examples given in Recipe 6.7, you need to match a
number berween 2,147,483,648 (23) and 4,294,967,295 (2321/n 1) in decimal nota-
tion. With RegexMagic, you just select the *Integer" patterm, select the *decimal" op-
tion, and limit the range to 2147483648 . . 4294967295. In *strict” mode, RegexMagic will
instantly generate this beast:
12 | Chapter 1: Introduction to Regular Expressions
---
## Page 29
b(?:429496729[0-5]|42949672[0-8][0-9]|4294967[01][0-9]{2}|429496[0-6]
[0-9]{3}|42949[0-5][0-9]{4]|4294[0-8][0-9]{5}|429[0-3][0-9]{6}|42[0-8]
[0-9]{7}|4[01][0-9]{8}|3[0-9]{9}|2[2-9][0-9]{8}|21[5-9][0-9]{7}|214[89]
[09]{6}|2147[5-9][0-9]{5}|214749[0-9]{4}|214748[4-9][0-9]{3}|2147483 +
[68]98[60]6-]98{}[6-0][6]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
RegexMagic runs on Windows 98, ME, 2000, XP, Vista, 7, and 8. For Linux and Apple
fans, RegexMagic also runs well on VMware, Parallels, CrossOver Office, and with a
few issues on WINE. You can download a free evaluation copy of RegexMagic at hrrp:
/www.regexmagic.com/RegexMagicCookbxok.exe. Except for the user forum, the trial
is fully functional for seven days of actual use.
More OnlineRegexTesters
Creating a simple online regular expression tester is easy If you have some basic web
development skills, the information in Chapter 3 is all you need to roll your own.
Hundreds of people have already done this; a few have added some extra features that
make them worth mentioning.
RegexPlanet
RegexPlanet is a website developed by Andrew Marcuse. Its claim to fame is that it
saueuq uoissaudxa eqnfau jo A1auta 1are| e sue3e saxa8au no6 1sa1 o1 noA smoe
than any other regex tester we are aware of. On the home page you'll find links to testers
for Java, JavaScript, .NET, Perl, PHP, Python, and Ruby. They all use the same basic
interface. Only the list of options is adapted to those of each programming language.
Figure 1-4 shows the .NET version.
Type or paste your regular expression into the *regular expression” box. If you want
to test a search-and-replace, paste the replacement text into the “replacement” box.
You can test your regex against as many different subject strings as you like. Paste your
subject strings into the *input” boxes. Click *more inputs" if you need more than five.
The “regex" and “input boxes allow you to type or paste in muliple lines of text, even
though they only show one line at a time. The arrows at the right are the scrollbar.
When you're done, click the *test? button to send all your strings to the regexpla-
net.com server. The resulting page, as shown in Figure 14, lists the test results at the
top. The first rwo columns repeat your input. The remaining columns show the results
of various function calls. These columns are different for the various programming
languages that the site supports.
regex.larsolavtorvik.com
Lars Olav Torvik has put a great little regular expression tester online at hrtp://regex
larsolavtorvik.com (see Figure 1-5).
Tools for Working with Regular Expressions | 13
---
## Page 30
Pxbr
RegeePu
Regular Expression Test Page i t
0=82810=
Test Results
T
Expression to test
Figure 1-4. RegexPlanet
To start, select the regular expression flavor you're working with by clicking on the
flavor’s name at the top of the page. Lars offers PHP PCRE, PHP POSIX, and JavaScript.
PHP PCRE, the PCRE regex flavor discussed in this book, is used by PHP's preg func-
tions. POSIX is an old and limited regex flavor used by PHP's ereg functions, which
14 |Chapter 1: Introduction to Regular Expressions
---
## Page 31
Rubular
Figure 1-5. regex.larsolavtorvik.com
are not discussed in this book. If you select JavaScript, you'l be working with your
browser’s JavaScript implementation.
Type your regular expression into the Patterm field and your subject text into the Subject
field. A moment later, the Matches field displays your subject text with highlighted
regex matches. The Code field displays a single line of source code that applies your
regex to your subject text. Copying and pasting this into your code editor saves you
the tedious job of manually converting your regex into a string literal. Any string or
array returmed by the code is displayed in the Result field. Because Lars used Ajax
technology to build his site, results are updated in just a few moments for all flavors.
To use the tool, you have to be online, as PHP is processed on the server rather than in
your browser.
The second column displays a list of regex commands and regex options. These depend
on the regex flavor. The regex commands typically include match, replace, and split
operations. The regex options consist of common options such as case insensitivity, as
well as implementation-specific options. These commands and options are described
in Chapter 3.
Toolb for Werking with Regular Expressions | 15
---
## Page 32
Nregex
S
4A20-1_%+|+00[A-299+[A-Z2.60
Z Igpo Caoe II Sivygh Lne  El Hus Uina l Eolc
Load Tarpet 
1024x7451e0Fz
nocpratsd.enasa
Figure 1-6. Nregex
Nregex
Fettp://www.nregex.corm (Figure l-6) is a straightforward online regex tester built
on .NET technology by David Seruyange. It supports the .NET 2.0 regex flavor, which
is also used by .NET 3.0, 3.5, and 4.0.
The layout of the page is somewhat confusing. Enter your regular expression into the
field under the Regular Expression label, and set the regex options using the checkboxes
below that. Enter your subject text in the large box at the bottom, replacing the default
If I just had $5.oo then *she” wouldn’t be so @#$! mad.. If your subject is a web
page, type the URL in the Load Target From URL field, and click the Load button under
pug uomnq asmong au x *xsip peq smo uo a e si ioafqns no p pia ndut se
the file you want, and then click the Load button under that input field.
16 1 Chapter 1: Introduction to Regular Expressions
---
## Page 33
Rubular
Figure 1-7. Rabslar
Your subject text will appear duplicated in the “Matches & Replacements" field at the
center of the web page, with the regex matches highlighted. If you type something into
the Replacement String field, the result of the search-and-replace is shown instead. If
your regular expression is invalid, ... appears.
The regex matching is done in NET code running on the server, so you need to be
online for the site to work. If the automatic updates are slow, perhaps because your
subject text is very long, tick the Manually Evaluate Regex checkbox above the field
for your regular expression to show the Evaluate button. Click that button to update
the *Matches & Replacements" display.
Rubular
Michael Lovitt put a minimalistic regex tester online at Fattp://www.rubular.co (Fig-
ure 1-7). At the time of writing, it lets you choose between Ruby 1.8.7 and Ruby 1.9.2.
This allows you to test both the Ruby 1.8 and Ruby 1.9 regex flavors used in this book.
Enter your regular expression in the box between the rwo forward slashes under “Your
regular expression." You can rum on case insensitivity by typing an 1 in the small box
after the second slash. Similarly, if you like, turn on the option *the dot matches line
breaks" by typing an m in the same box. In tums on both options. Though these con-
ventions may seem a bit user-unfriendly if you're new to Ruby, they conform to
the /regex/in syntax used to specify a regex in Ruby source code.
Toolbs for Working with Regular Expressions | 17
---
## Page 34
+xUe
Erlipse Plagin
IDEA Plngia
Regex Examples
Regexp Editor
Pes Idt &ot
Cast
Figure 1-8. myregexp.coma
Type or paste your subject text into the *Your test string” box, and wait a moment. A
new *Match result box appears to the right, showing your subject text with all regex
matches highlighted.