)
2
−
0
1
×
(
q
λ
−
y
d
e
e
r
q
g
λ
1
0.8
0.6
0.4
0.2
0
1
2,000
4,000
6,000
8,000
Chk-All
Chk-wBL
Chk-AOp
10,000
Number of guesses allowed per account
Fig. 6: The security loss as a function of q for challenge
distribution RockYou and Ctop2.
q. We focus for simplicity on Ctop2, a choice we expect
many deployments to utilize, and show in Figure 6 the se-
curity loss using RockYou as the distribution for a range of
q ∈ {1, 100, 200, 300, . . . , 10,000}. We have drawn a vertical
dotted line at q = 1, 000, which was used by Chk-AOp as the
expected query budget. As before, Chk-AOp has no loss below
q = 1, 000, and only after the attacker gets more than 1,000
queries does the attacker obtain an improvement over the exact
checking case. Figure 7 shows the same type of chart but now
for phpBB. This distribution leads to security loss seeing big
discrete jumps for larger q, suggesting that at certain points
the attacker can take advantage of new balls that just come in
to play as higher mass than individual passwords. A chart for
Myspace would exhibit similar trends as the one for phpBB,
we omit it for the sake of brevity.
− λq
ﬂattens out in both charts. The attacker in the typo-tolerant
cases runs out of heavily-weighted balls to take advantage of
and ends up just querying passwords that cover only one (high-
probability) guess. For RockYou, we see that the improvement
is never more than 1% and, for phpBB, never more than 0.8%.
This all suggests that even as q grows to values unlikely ever to
arise in practice, typo-tolerance nevertheless does not improve
the attacker’s rate of success by much. We note that our
blacklisting and approximately optimal checkers can be made
even more conservative should one desire, by blacklisting
Observe that as q gets larger, the improvement λgreedy
q
812812
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
)
2
−
0
1
×
(
q
λ
−
y
d
e
e
r
q
g
λ
0.8
0.6
0.4
0.2
0
1
2,000
4,000
6,000
8,000
Chk-All
Chk-wBL
Chk-AOp
10,000
Number of guesses allowed per account
Fig. 7: Difference in exact-knowledge adversary success
against typo-tolerant schemes and exact checking, as a func-
tion of q for challenge distribution phpBB and Ctop2.
more passwords or setting q larger, respectively.
q
As noted in the previous section, the greedy algorithm is
known to provide a good approximation for the weighted max
coverage problem. Given that the password probabilities range
over a very dense space, and our correction sets are quite small,
≈ λfuzzy. We do not have any theoretical
we expect λgreedy
proof for this claim, and leave analysis as an important
question for future work. We can of course always bound the
actual value of Δq via Δq ≤ 1.582 Δgreedy
+ 0.582λq. So, for
example with the RockYou challenge distribution, q = 10, and
the Ctop5 corrector set we have that Δq ≤ 0.0153 as compared
− λq = 0.0063. We expect this three-fold decrease in
to λgreedy
relative security to be quite pessimistic: the better the greedy
algorithm approximates the problem the worse the adjustment
to compute Δq becomes.
q
q
B. Estimating attackers
We have so far considered attackers that have exact knowl-
edge of the password distribution (even when the system
designer may not). In practice such attackers do not exist,
and instead adversaries must try to estimate the distribution
of passwords. We refer to these as estimating attackers.
As before, we assume adversaries know the exact checking
algorithm in use.
We started by considering an adversary that estimates
the password distribution using the Weir et al. probabilistic
context-free grammar (PCFG) [43], a trained model of pass-
word distributions used to build effective crackers. However,
our experiments with this showed that it provides poor efﬁcacy
in online guessing attacks, doing signiﬁcantly worse than the
approaches we describe below and, importantly, it did equally
poorly against the typo-tolerant checkers in all settings.
We therefore turn to a different adversarial strategy for
estimating the password distribution. We measure the success
rate of an attacker that uses one of the password leaks as its
estimate of the distribution. This is a typical strategy in prac-
tice. We test these attacks against the other two distributions
and for each of the exact checking, Chk-All, Chk-wBL, and
Chk-AOp. The latter three use Ctop2. The security loss for all
combinations are tabulated in Figure 8. (Note that the left-to-
Attacker
distribution
RockYou
phpBB
Myspace
RockYou
phpBB
Myspace
RockYou
phpBB
Myspace
RockYou
phpBB
Myspace
ExChk
Chk-All
Chk-wBL
Chk-AOp
Challenge distribution
RockYou
11.23
8.10
3.57
+0.51
+0.25
-0.15
+0.32
+0.06
-0.26
0.00
-0.11
-0.27
phpBB Myspace
9.34
1.81
9.54
+0.25
+0.11
+0.49
+0.20
+0.05
+0.46
0.00
-0.04
+0.35
3.21
12.71
3.32
+0.28
+0.38
-0.02
+0.11
+0.19
-0.20
0.00
+0.15
-0.14
Fig. 8: The top table shows the success rate of an attack against
the exact checking scheme for the attacker-estimated distri-
bution (row) used against the challenge distribution (column).
The remaining tables show the difference between success rate
of an attacker against the tolerant scheme and the exact check-
ing scheme, for the indicated attacker-estimated and actual
challenge distribution pairs. All values are in percentages.
right diagonals reﬂect some of the results already shown for
the exact-knowledge attacker in Figure 5.)
The improvement the attacker obtains when one switches to
a tolerant checking system is never greater than 0.28%. More
interestingly, in some cases the difference is negative, which
means that the attacker did worse against the typo-tolerant
scheme. This may be counterintuitive, but here the estimates
the attacker makes about the distribution can often be wrong.
This can lead her to choose a set of guesses that maximizes
the total success probability according to her estimate but not
according to the challenge distribution. We give an example
for the curious reader in Appendix G.
In summary, our simulations here suggest that a carefully
designed typo-tolerant checker will result in little to no secu-
rity loss against realistic adversaries.
VII. CONCLUSION
We presented the ﬁrst treatment of typo-tolerant password
authentication. We demonstrated, with large-scale, real-world
experiments,
that password typos are a real and common
source of user errors in authentication systems. We found
that a few types of typo-corrections account for an over-
whelming number of password typos. We provided a formal
framework for exploring typo-tolerant password checkers, and
focused on a class of them called relaxed checkers that
are backwards-compatible with existing password hashing
schemes. We showed, via what we call the free corrections
theorem, that there exist relaxed checkers against which the
best attack performs no better than the best attack against an
exact checker. Unfortunately the construction requires exact
knowledge of the password distribution. We therefore gave
a number of practical typo-tolerant checkers inspired by it,
and analyzed their security empirically, showing that one can
easily obtain signiﬁcant utility improvement with minimal or
no security degradation.
813813
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:18:05 UTC from IEEE Xplore.  Restrictions apply. 
In future work, we plan to investigate whether
typo-
tolerance will actually serve to improve overall security. Be-
cause allowing for password typos increases login success
rates in benign scenarios, it may help to make adversarial
login attempts stick out. This would strengthen the signals
used to detect online password attacks as used in Internet-
scale authentication systems.
ACKNOWLEDGEMENTS
This work was funded in part by NSF grants CNS-1330308
and CNS-1514163 as well as a generous gift by Microsoft.
REFERENCES
[1] “Amazon login may accept password variants,” http://www.ghacks.
net/2011/01/31/amazon-login-may-accept-password-variants/, accessed:
2015-11-06.
[2] “Facebook passwords are not case sensitive,” http://www.zdnet.com/
accessed:
article/facebook-passwords-are-not-case-sensitive-update/,
2015-11-12.
[3] “Is Vanguard making it
your
is-vanguard-making-it-too-easy-for-cybercriminals-to-access-your-account.
html?startIndex=0, accessed: 2015-11-06.
too easy for cybercriminals
to access
http://www.thestreet.com/story/13213265/4/
account?”
[4] “Twitter’s list of 370 banned passwords,” http://www.businessinsider.
com/twitters-list-of-370-banned-passwords-2009-12, accessed: 2015-
11-06.
[5] “Uniq Turker,” https://uniqueturker.myleott.com/, accessed: 2015-15-10.
[6] S. Antilla, “Vanguard group ﬁres whistleblower who told TheStreet
about ﬂaws in customer security.” TheStreet, 18 Sept. 2015.
[7] G. V. Bard, “Spelling-error tolerant, order-independent pass-phrases via
the Damerau-Levenshtein string-edit distance metric,” in Proceedings
of the ﬁfth Australasian Symposium on ACSW Frontiers-Volume 68.
Australian Computer Society, Inc., 2007, pp. 117–124.
[8] A. Biryukov, D. Dinu, and D. Khovratovich, “Argon and argon2:
password hashing scheme,” Technical report, Tech. Rep., 2015.
[9] J. Bonneau, “Guessing human-chosen secrets,” Ph.D. dissertation,
[Online]. Available: http:
University of Cambridge, May 2012.
//www.cl.cam.ac.uk/∼jcb82/doc/2012-jbonneau-phd thesis.pdf
[10] J. Bonneau, “The science of guessing: analyzing an anonymized corpus
of 70 million passwords,” in IEEE Symposium on Security and Privacy
(SP).
IEEE, 2012, pp. 538–552.
[11] J. Bonneau, C. Herley, P. C. van Oorschot, and F. Stajano, “The Quest to
Replace Passwords: A Framework for Comparative Evaluation of Web
Authentication Schemes,” in 2012 IEEE Symposium on Security and
Privacy, May 2012.
[12] J. Bonneau and S. Schechter, “Towards reliable storage of 56-bit secrets
in human memory,” in 23rd USENIX Security Symposium (USENIX
Security 14). USENIX, 2014.
[13] S. Boztas, “Entropies, guessing, and cryptography,” Department of
Mathematics, Royal Melbourne Institute of Technology, Tech. Rep, vol. 6,
pp. 2–3, 1999.
[14] M. Buhrmester, T. Kwang, and S. D. Gosling, “Amazon’s mechanical
turk a new source of inexpensive, yet high-quality, data?” Perspectives
on psychological science, vol. 6, no. 1, pp. 3–5, 2011.
[15] F. J. Damerau, “A technique for computer detection and correction of
spelling errors,” Communications of the ACM, vol. 7, no. 3, pp. 171–176,
1964.
[16] Y. Dodis, “On extractors, error-correction and hiding all partial informa-
tion,” in Theory and Practice in Information-Theoretic Security, 2005.
IEEE Information Theory Workshop on, 2005, pp. 74–79.
[17] Y. Dodis, L. Reyzin, and A. Smith, “Fuzzy extractors: How to generate
strong keys from biometrics and other noisy data,” in Eurocrypt 2004,
C. Cachin and J. Camenisch, Eds. Springer-Verlag, 2004, pp. 523–540,
lNCS no. 3027.
[18] A. Everspaugh, R. Chatterjee, S. Scott, A. Juels, T. Ristenpart, and
C. Tech, “The Pythia PRF service,” in Proceedings of the 24th USENIX
Conference on Security Symposium. USENIX Association, 2015, pp.
547–562.
[19] S. Fahl, M. Harbach, Y. Acar, and M. Smith, “On the ecological validity
of a password study,” in Proceedings of the Ninth Symposium on Usable
Privacy and Security. ACM, 2013, p. 13.
[20] U. Feige, “A threshold of ln n for approximating set cover,” Journal of
the ACM (JACM), vol. 45, no. 4, pp. 634–652, 1998.
[21] D. Florencio and C. Herley, “A large-scale study of web password
habits,” in Proceedings of the 16th International Conference on World
Wide Web, ser. WWW ’07. New York, NY, USA: ACM, 2007, pp. 657–
666. [Online]. Available: http://doi.acm.org/10.1145/1242572.1242661
[22] B. Fuller, A. Smith, and L. Reyzin, “When are fuzzy extractors
possible?” Cryptology ePrint Archive, Report 2014/961, 2014, http:
//eprint.iacr.org/.
[23] D. S. Hochbaum, “Approximating covering and packing problems:
set cover, vertex cover,
independent set, and related problems,” in
Approximation algorithms for NP-hard problems. PWS Publishing Co.,
1996, pp. 94–143.
[24] M. Jakobsson and R. Akavipat, “Rethinking passwords to adapt to
constrained keyboards,” Proc. IEEE MoST, 2012.
[25] B. Kaliski, “PKCS #5: Password-based cryptography speciﬁcation ver-
sion 2.0,” 2000, RFC 2289.
[26] M. Keith, B. Shao, and P. Steinbart, “A behavioral analysis of passphrase
design and effectiveness,” Journal of the Association for Information
Systems, vol. 10, no. 2, p. 2, 2009.
[27] M. Keith, B. Shao, and P. J. Steinbart, “The usability of passphrases
for authentication: An empirical ﬁeld study,” International journal of
human-computer studies, vol. 65, no. 1, pp. 17–28, 2007.
[28] V. I. Levenshtein, “Binary codes capable of correcting deletions, inser-
tions, and reversals,” in Soviet physics doklady, vol. 10, no. 8, 1966, pp.
707–710.
[29] M. L. Mazurek, S. Komanduri, T. Vidas, L. Bauer, N. Christin, L. F.
Cranor, P. G. Kelley, R. Shay, and B. Ur, “Measuring password guess-
ability for an entire university,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security. ACM, 2013, pp.
173–186.
[30] A. Mehler and S. Skiena, “Improving usability through password-
corrective hashing,” in String Processing and Information Retrieval.
Springer, 2006, pp. 193–204.
[31] R. Morris and K. Thompson, “Password security: a case history,”
Commun. ACM, vol. 22, no. 11, pp. 594–597, Nov. 1979. [Online].
Available: http://doi.acm.org/10.1145/359168.359172