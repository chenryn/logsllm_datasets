# Colors
While I was in the process of writing some colormap manipulation scripts, I
went into the MPL code on 'colors' to find out how exactly it handles the
conversion between the normalized RGBA tuples that MPL uses, and the actual
8-bit RGBA tuples that are used for colors in general.
Looking at the colors module, I noticed that the conversion from normalized to
8-bit tuples is inconsistent in several places.
For example, when one requests some colors from a `Colormap` object in their
8-bit forms by using `bytes=True`, the normalized values are multiplied by
`255` and then rounded down, as shown in
matplotlib/lib/matplotlib/colors.py
Lines 575 to 583 in 8bddf0a
|  if bytes:  
---|---  
|  lut = (self._lut * 255).astype(np.uint8)  
|  else:  
|  lut = self._lut.copy() # Don't let alpha modify original _lut.  
|  
|  if alpha is not None:  
|  alpha = np.clip(alpha, 0, 1)  
|  if bytes:  
|  alpha = int(alpha * 255)  
However, if I were to convert a normalized RGBA-tuple into an RGBA-hex (which
should be the same as an 8-bit RGBA-tuple) using the `to_hex` function, then
the normalized values are multiplied by `255` and rounded to nearest, as shown
in  
matplotlib/lib/matplotlib/colors.py
Lines 333 to 343 in 8bddf0a
|  def to_hex(c, keep_alpha=False):  
---|---  
|  """  
|  Convert *c* to a hex color.  
|  
|  Uses the ``#rrggbb`` format if *keep_alpha* is False (the default),  
|  ``#rrggbbaa`` otherwise.  
|  """  
|  c = to_rgba(c)  
|  if not keep_alpha:  
|  c = c[:3]  
|  return "#" + "".join(format(int(round(val * 255)), "02x") for val in c)  
If I go over the several other modules that deal with this conversion, I see
that rounding down is much more common than rounding to nearest, even though I
would have expected the latter (picking the closest corresponding color makes
much more sense than picking the closest darker color).  
The latter would also ensure that doing `8-bit -> normalized -> 8-bit` always
gives the same values back, regardless of potential floating point errors.  
Is there a reason why there are two different conversions for the same thing,
and why the (in my opinion) worse conversion is much more common?
# Colormaps
I also found a similar peculiarity for picking colors from a `Colormap`
object, shown in
matplotlib/lib/matplotlib/colors.py
Lines 558 to 568 in 8bddf0a
|  if xa.dtype.kind == "f":  
---|---  
|  with np.errstate(invalid="ignore"):  
|  xa *= self.N  
|  # Negative values are out of range, but astype(int) would  
|  # truncate them towards zero.  
|  xa[xa < 0] = -1  
|  # xa == 1 (== N after multiplication) is not out of range.  
|  xa[xa == self.N] = self.N - 1  
|  # Avoid converting large positive values to negative integers.  
|  np.clip(xa, -1, self.N, out=xa)  
|  xa = xa.astype(int)  
I would have expected here that the nearest color in the colormap is selected
when a fraction is given, i.e., `xa` is calculated as
    xa = np.rint(xa*(self.N-1))
instead of
    xa *= self.N