title:EnclavePDP: A General Framework to Verify Data Integrity in Cloud
Using Intel SGX
author:Yun He and
Yihua Xu and
Xiaoqi Jia and
Shengzhi Zhang and
Peng Liu and
Shuai Chang
EnclavePDP: A General Framework to Verify Data Integrity in Cloud
Using Intel SGX
Yun He1,2, Yihua Xu3, Xiaoqi Jia1,2∗
, Shengzhi Zhang3, Peng Liu4, and Shuai Chang1,2
1{CAS-KLONAT†, BKLONSPT‡}, Institute of Information Engineering, Chinese Academy of Sciences
2School of Cyber Security, University of Chinese Academy of Sciences
3Metropolitan College, Boston University
4Pennsylvania State University
Abstract
As the cloud storage service becomes pervasive, verifying the
integrity of their outsourced data on cloud remotely turns out
to be challenging for users. Existing Provable Data Posses-
sion (PDP) schemes mostly resort to a Third Party Auditor
(TPA) to verify the integrity on behalf of users, thus reducing
their communication and computation burden. However, such
schemes demand fully trusted TPA, that is, placing TPA in the
Trusted Computing Base (TCB), which is not always a rea-
sonable assumption. In this paper, we propose EnclavePDP, a
secure and general data integrity veriﬁcation framework that
relies on Intel SGX to establish the TCB for PDP schemes,
thus eliminating the TPA from the TCB. EnclavePDP sup-
ports both new and existing PDP schemes by integrating core
functionalities of cryptography libraries into Intel SGX. We
choose 10 existing representative PDP schemes, and port
them into EnclavePDP with reasonable effort. By deploy-
ing EnclavePDP in a real-world cloud storage platform and
running the 10 PDP schemes respectively, we demonstrate
that EnclavePDP can eliminate the dependence on TPA and
introduce reasonable performance overhead.
1 Introduction
Nowadays, many organizations demand to keep their data
records, and then perform deep analysis over the data us-
ing machine learning or other techniques for their business
purposes. For instance, e-health companies offer optimized
health care plan for customers by analyzing customers’ health
records. However, not all organizations are able to build and
manage their private data storage platform due to the high cost
of building and maintaining such a platform. Hence, cloud
storage service has become quite popular, due to the features
like pay-as-you-go, elasticity, cost-saving, maintenance, etc.
There are many popular cloud storage services today, such as
Dropbox, Google Drive, Amazon S3, One Drive, etc.
∗Corresponding author: PI:EMAIL
†Key Laboratory of Network Assessment Technology, CAS
‡Beijing Key Laboratory of Network Security and Protection Technology
However, users will lose control of their data stored on
the cloud platform, which is an inherent issue in such data
outsourcing model. Although the service providers can be
bound by a Service Level Agreement (SLA) to ensure the data
integrity, users still cannot fully trust them. On one hand, the
cloud servers are not immune to data loss or corruption even
the cloud providers are faithful to protect the outsourced data.
For instance, Dropbox, Amazon and Tencent Cloud lost data
due to improper operations, inadvertent administration errors
or system bugs [1–3]. Although these incidents occurred unin-
tentionally, the service providers may not immediately inform
the data loss incidents to users to protect their reputation (i.e.,
service providers are “imperfect and selﬁsh” [4]). For exam-
ple, according to [5], healthcare data breaches are identiﬁed
after 84.78 days and customers are notiﬁed after additional
68.31 days on average. On the other hand, a service provider
may be actively malicious: deleting data that is infrequently
accessed to save storage space but still charging users for the
deleted data [6], or keeping fewer replicas violating the SLA.
In recent years, numerous data integrity veriﬁcation ap-
proaches [7–19] have been proposed to ensure the integrity of
the outsourced data. These approaches are referred to as Prov-
able Data Possession (PDP) schemes. Such PDP schemes
provide probabilistic guarantees that the outsourced data
has not been maliciously tampered with, without accessing
the entire data from the cloud storage server. PDP schemes
(e.g., APDP [9], etc.) usually generate metadata (or tag) us-
ing the original data, and upload the metadata together with
the original data to the cloud storage servers. The proof of
data integrity is generated by cloud storage servers using
this metadata and veriﬁed by the data owner. Other PDP
schemes [14,17–19] were proposed to support public auditing
for multiple users via a Third Party Auditor (TPA). However,
the TPA may steal users’ private data (honest but curious
TPA) or even conduct collusion attacks with the cloud service
provider (inherently malicious TPA). Besides the trustworthi-
ness concern, deploying TPA also involves extra cost.
In this paper, we propose EnclavePDP (Enclave-protected
Provable Data Possession), a practical and general frame-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    195
work to verify the integrity of the outsourced data on cloud
platforms relying on the Trusted Execution Environments
(TEEs), i.e., Intel SGX [20], thus eliminating TPAs and reduc-
ing both the computation and communication burdens from
users. We implemented a prototype of EnclavePDP using
Intel SGX and ported the core functionalities of Intel SGX
SSL crypto library [21], Intel SGX GMP library [22], and
the PBC [23] (Pairing-Based Cryptography) library into En-
clavePDP. Then, 10 representative PDP schemes, i.e., APDP
[9], CPOR [12], SEPDP [10], MRPDP [11], PPPAS [19],
DHT-PA [18], SEPAP [17], DPDP [7], FlexDPDP [8], and
a basic Message Authentication Code (MAC) based scheme
(MAC-PDP), are implemented on EnclavePDP with reason-
able effort. We evaluated EnclavePDP on a real-world cloud
storage service, FastDFS [24]. Experimental results show that
EnclavePDP introduced negligible overhead to the response
time per PDP request for all the 10 PDP schemes on different
ﬁle sizes (1GB and 16KB), varying from 1.0% to 24.5%.
We summarize the main contribution of the paper as below:
• We proposed and implemented EnclavePDP, a novel and
generic framework that can securely verify the integrity
of the outsourced data relying on Intel SGX, thus elimi-
nating the dependency on TPAs. The core functionaries
of various cryptographic libraries are tailored and ported
into Intel SGX to support both the existing and new
PDP schemes, and 10 representative PDP schemes are
implemented in EnclavePDP with reasonable effort.
• We performed a comprehensive evaluation of En-
clavePDP by deploying it on a real cloud storage service,
FastDFS. All the 10 PDP schemes are evaluated in En-
clavePDP in the aspects of code base in Intel SGX and
overhead of response time, thus eliminating the perfor-
mance concerns of running PDP schemes in Intel SGX.
2 Background
2.1 Provable Data Possession in Clouds
To verify the integrity of the outsourced data on cloud plat-
forms, lots of PDP schemes [7–16] were proposed. Generi-
cally, PDP schemes consist of two phases: a setup phase and
a veriﬁcation phase. In the setup phase, the client (or the data
owner) generates keys (private or public, depending on the
scheme), as well as metadata (or tag) using the keys and the
original data. The metadata (or tag) and the original data are
uploaded to the cloud storage server. In the veriﬁcation phase,
the client constructs a challenge that contains a random sub-
set of ﬁle blocks, and sends the challenge to the prover (i.e.,
the cloud storage server). The prover uses the challenge, the
metadata (or tag) and the ﬁle blocks to compute a proof of
data possession and then sends it back to the client. The client
uses the proof to verify that the data on the cloud is still in-
tact. In addition, many literature surveys, e.g., [25–29] made
a comprehensive comparison among existing PDP schemes.
Below we choose four aspects: types of data, retrievability,
encryption and auditing, to discuss the existing PDP schemes.
Types of data: There exist two types of data: static data
and dynamic data. Static data (e.g., data archive, backups) is
never modiﬁed but appended only, whereas dynamic data is
frequently changed due to operations like update, write and
delete. Some PDP schemes, e.g., APDP [9], are only suitable
for static data, because they need re-generate tags of the com-
plete ﬁle whenever new data is inserted. In contrast, other
schemes like SEPDP [10] support dynamic data operations.
Retrievability: Generally, PDP schemes only provide proba-
bilistic guarantees of the data integrity, i.e., identifying data
corruption without data recovery, e.g., [8–11, 30], etc. In con-
trast, POR (Proof of Retrievability) schemes provide the guar-
antee that the data is intact and still retrievable even after
corrupted by using the redundant encoding, e.g., CPOR [12],
Mirror [16], Iris [31], etc.
Encryption: Some PDP schemes utilize symmetric key en-
cryption to achieve scalability/efﬁciency, e.g., SEPDP [10]
uses symmetric key encryption and cryptographic hash func-
tions, while others use asymmetric key encryption for better
security, e.g., APDP [9] uses RSA-based homomorphic veri-
ﬁable tags (HVT) as the metadata.
Auditing: PDP schemes either support private auditing or
public auditing. For the former, the veriﬁer is always the
data owner, e.g., APDP [9], SEPDP [10], FlexDPDP [8], etc.
For the latter, the TPA sends challenges and veriﬁes proofs
on behalf of the data owner to reduce the computation and
communication overhead of the data owner. Public auditing
schemes can be further categorized into privacy preserving
(e.g., PPPAS [19], DHT-PA [18]) and non-privacy preserving
(e.g., PoS [32], SEPAP [17], MHT-PA [6]) schemes. It is worth
noting most of the public auditing schemes are implemented
using the BLS [33] signature cryptographic primitive.
Intel SGX
2.2
Intel SGX [20] creates an isolated code execution environ-
ment, which enables applications to maintain data conﬁden-
tiality and integrity. Even the privileged software (OS, hyper-
visor and BIOS) cannot violate the protection of Intel SGX.
Note that we do not consider side-channel attacks against
SGX, which can be addressed orthogonally by corresponding
countermeasures (e.g., [34]).
Enclave. Intel SGX constructs trusted execution environ-
ments referred to as enclaves and creates an encrypted mem-
ory region called Enclave Page Cache (EPC) for enclaves
to store code and data. SGX uses a hardware Memory En-
cryption Engine (MEE) [35] to encrypt/decrypt the enclave
data, and also provides a hardware access control mecha-
nism to prevent illegal access to the enclave memory. An
Intel SGX application generally contains two parts: secure
code (enclave) and non-secure code (non-enclave or applica-
tion). The application needs to launch the enclave, and uses
196    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
ecall/ocall interfaces to switch control between the en-
clave and the non-enclave. Since privileged operations (e.g.,
system calls) cannot be executed inside enclaves, ocall is
invoked to execute those privileged operations indirectly.
SGX Remote Attestation. Intel SGX remote attestation
[36] is to ensure that the enclave is correctly initialized on a
remote SGX enabled platform. It evaluates the enclave iden-
tity, its structure, the integrity of the code inside the enclave.
Furthermore, remote attestation can provide shared secret be-
tween the enclave application and its owner to setup a secure
communication channel over the untrusted network.
Sealing. Enclaves can write conﬁdential data to persistent
storage securely using sealing [36], a mechanism to encrypt
and authenticate the enclave data. Each enclave is provided
with a sealing key, derived from an enclave identity (either
Enclave Identity or Signing Identity), private to the executing
platform and the enclave. Data sealed against Enclave Identity
(MRENCLAVE) can only be decrypted by the same enclave,
whereas data sealed against Signing Identify (MRSIGNER)
can be unsealed by any enclave signed by the same developer.
3 Overview
3.1 System and Threat Model
We consider a cloud storage scenario where usually three
primary entities exist: clients or users, Cloud Storage Service
(CSS), and TPA. Specially, clients have a large amount of data
to be stored on the cloud, and CSS is managed by the Cloud
Service Provider (CSP) to provide data storage service (typi-
cally with a large amount of storage space and computational
resources). To save the computational resources as well as
the online burden potentially incurred by the periodic data
integrity veriﬁcation, clients resort to TPA (with extra capa-
bilities that clients do not have, e.g., keeping always online)
to verify the integrity of their outsourced data on cloud.
We assume the threats to the integrity of users’ outsourced
data on cloud can be both internal and external on the cloud
storage platform, e.g., software bugs, hardware failures, ma-
licious or accidental management errors, revenue-motivated
hackers, etc. Moreover, the cloud storage platform may in-
tendedly hide the data corruption incidents from users to
maintain its reputation. Most prior works, e.g., MHT-PA [6],
SEPAP [17], usually rely on TPA to provide a cost-effective
way for users to verify the integrity of their outsourced data,
with the assumption that TPA is reliable and trustworthy. How-
ever, such assumption is not always valid, since TPA could be
(1) honest but curious, learning the users’ data after the audit
as described in PPPAS [19], and (2) untrusted, conducting
collusion attack with the untrusted cloud service providers.
Hence, the proposed solution in this paper does not rely on
TPA. We assume the remote CPU (with Intel SGX security
features) running on the cloud storage platform is trusted. We
also assume that the adversary cannot extract secrets within
the CPU packages, which implies that we trust CPUs to pro-
tect code and data hosted inside TEEs. Side-channel and
denial-of-service attacks are outside the scope of this paper.
3.2 Motivation of Using Intel SGX
In this paper, we mainly focus on those PDP schemes that
rely on TPA to verify the integrity of the outsourced data,
since users’ computation resources as well as online burden
can be signiﬁcantly reduced by TPA. However, such PDP
schemes are still limited in the following aspects. (P1) The
honest but curious TPA. Generally, TPA needs to be fully
trustworthy, exactly following the PDP schemes to execute
the core veriﬁcation functionality. However, an honest but
curious TPA may potentially learn users’ data through the
procedures of challenging and verifying [19] it gets involved
in. (P2) Collusion attack with untrusted cloud providers.
Although a few privacy-preserving public auditing schemes,
e.g., PPPAS [19] and DHT-PA [18], can be used to address
the data breach issues, they are still limited in eliminating the
collusion attack when the TPA collaborates with the cloud
storage server to deceive users. (P3) Communication over-
head. The communication overhead (sending challenges and
proofs between the cloud storage server and the veriﬁer run-
ning in the TPA) is not negligible.
Fortunately, Intel SGX provides the trusted execution envi-
ronment, enclave, which can be leveraged to solve the above
problems. First, Intel SGX prevents the underlying untrusted
OS or hypervisor from accessing the code/data inside the
enclave. Hence, the PDP schemes can run faithfully in en-
clave on untrusted platforms (i.e., the cloud storage servers),
thus eliminating the dependency on TPA (solving P1 and P2).
Second, the enclave can also protect the private keys used by
the PDP schemes against leaking to untrusted components,
and it can also protect the integrity of veriﬁcation against
malicious modiﬁcation. Therefore, we can also deploy private
auditing PDP schemes inside the enclave, which reduces the
computation overhead of the data owners and provides public-
auditing-like support. Finally, EnclavePDP can be deployed
on any of the cloud servers (as long as the underlying Intel
CPU supports SGX), thus it can be co-located with the cloud
storage services on the same physical machine. Hence, the
communication overhead between the veriﬁer in EnclavePDP
and the cloud storage services (inter-process communication)
is negligible (solving P3), compared with that of the native
PDP schemes (network communication).
3.3 Possible Concerns of Using Intel SGX
Compatibility. The implementation of PDP schemes de-
pends on some cryptography libraries (e.g., OpenSSL, PBC