title:Generic Timing Fault Tolerance using a Timely Computing Base
author:Ant&apos;onio Casimiro and
Paulo Ver&apos;ıssimo
Generic Timing Fault Tolerance using a Timely Computing Base
Ant´onio Casimiro Paulo Ver´ıssimo
PI:EMAIL
FC/UL
PI:EMAIL
FC/UL
Abstract
Designing applications with timeliness requirements in
environments of uncertain synchrony is known to be a difﬁ-
cult problem. In this paper, we follow the perspective of tim-
ing fault tolerance: timing errors occur, and they are pro-
cessed using redundancy, e.g., component replication, to re-
cover and deliver timely service. We introduce a paradigm
for generic timing fault tolerance with replicated state ma-
chines. The paradigm is based on the existence of Timing
Failure Detection with timed completeness and accuracy
properties.
Generic timing fault tolerance implies the ability to de-
pendably observe the system and to timely notify timing fail-
ures, which we discuss in the paper. On the other hand, it
ensures replica determinism with respect to time (temporal
consistency), and safety in case of spare exhaustion. We
show that the paradigm can be addressed and realized in
the framework of the Timely Computing Base (TCB) model
and architecture. Furthermore, we illustrate the general-
ity of our approach by reviewing previous existing solutions
and by showing that in contrast with ours, they only secure
a restricted semantics, or simply provide ad-hoc solutions.
1. Introduction
Dealing with applications with timeliness requirements
in environments with poor baseline synchrony is known to
be a difﬁcult problem. During their execution these applica-
tions have to face the possible occurrence of timing failures,
when they do not perform the speciﬁed timed actions within
the speciﬁed deadlines. This raises a number of possible
consequences, such as instantaneous delays, decreased cov-
erage over the long term or contamination of logical safety
properties [23]. A general approach to timing fault toler-
ance has to deal with all these aspects and must provide
Faculdade de Ciˆencias da Universidade de Lisboa. Bloco C5,
Campo Grande, 1749-016 Lisboa, Portugal. Navigators Home Page:
http://www.navigators.di.fc.ul.pt. This work was partially supported by the
EC, through project IST-2000-26031 (CORTEX), and by the FCT, through
the Large-Scale Informatic Systems Laboratory (LASIGE).
adequate solutions or techniques to handle each of the pos-
sible effects of timing failures.
Choosing a distributed systems model relevant to the
provision of the stipulated services and coverage to a cho-
sen fault model is of fundamental importance. However,
well known models like the fully asynchronous, also called
time-free model, or the synchronous model, are not the most
appropriate. The former does not allow to handle timeliness
requirements and the latter does not faithfully characterize
these uncertain environments and thus may lead to incor-
rect behaviors. For example, an application whose safety
depends on meeting a bound will be unsafe if the bound,
being assumed, cannot be guaranteed due to the uncertainty
of the environment. A better way to deal with the problem
is to use partial synchrony models. For instance, the Timed
Asynchronous Model [10], which allows the construction
of fail-aware applications [12], and the Quasi-Synchronous
Model [22], which assumes the existence of synchronous
components that allow certain real-time actions to be ex-
ecuted. Our approach has been to propose a more generic
model, encompassing the whole spectrum of synchrony. We
observed that synchrony is not a homogeneous property of
systems– it varies with time or with space– and this led to
the deﬁnition of the Timely Computing Base (TCB) model.
Applications designed under the TCB model can rely on
the services of a synchronous component, a TCB module,
to achieve a timely and safe behavior.
We have been systematically detailing how the effects of
timing failures can be handled, with the help of a TCB, to
implement certain classes of applications. In this paper we
focus on the problem of timing fault tolerance as a means
to increase the availability of applications with timeliness
requirements. We show that the problem can be handled
in a generic way in the context of the TCB model, using
redundancy techniques. For that purpose we introduce a
paradigm for generic timing fault tolerance using a repli-
cated state machine based server. The paradigm assumes
the existence of a timing failure detector with timed com-
pleteness and accuracy properties, which is used to ensure
the temporal consistency of the server state.
Using replication in the design of fault tolerant systems
is not a novel idea [2]. However, there is not much work
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
dealing with replication for timing fault tolerance. Among
the exceptions, the work in [1] proposes a solution for tim-
ing fault tolerance based on the replication of system com-
ponents and on the deﬁnition of light-weight groups on top
of a quasi-synchronous network. Our approach is more
generic in the sense that it is suitable for any timed ser-
vice executing as a state machine. Furthermore, we reason
in terms of Quality of Service (QoS) speciﬁcations to ex-
press timeliness and reliability requirements. Torres-Rojas
et al. [20] propose a model of timed consistency, which re-
quires the effects of a write operation to be observed in
all the sites of a distributed system within a known and
bounded amount of time. This work uses time to explore the
semantical aspects of the problem, without being concerned
with system synchrony or timeliness. Another work that
deals with server replication for improved availability has
been presented in [16]. It follows the perspective that client
applications specify their timeliness requirements through
a QoS speciﬁcation and proposes a protocol that takes into
account this speciﬁcation to select an adequate set of server
replicas to which requests should be sent. This work has
now been extended in [17] to address the tradeoff between
timeliness and consistency requirements when performing
read and write operations on server replicas.
We offer a system model and a paradigm for generic tim-
ing fault tolerance. We provide a detailed discussion of the
potential problems for the timely and consistent behavior of
a replicated server caused by timing failures, and we enu-
merate the basic requirements that must be fulﬁlled in or-
der to avoid these problems. Then we show that the TCB
model provides an adequate framework to address the prob-
lem. The rest of the paper is organized as follows. In Sec-
tion 2 we describe the system model and we review some of
the facets of timing fault tolerance. Then, in Section 3 we
introduce the generic paradigm for timing fault tolerance
using a replicated state machine. In Section 4 we brieﬂy
present an overview of the TCB model, before we describe,
in Section 5, how this model can provide an adequate frame-
work to address problem of timing fault tolerance using the
paradigm introduced in Section 3.
In Section 6 we dis-
cuss relevant related work in the context of the proposed
paradigm for generic timing fault tolerance. Section 7 con-
cludes the paper.
2. System Model
We consider applications with timeliness requirements,
executing in an environment where it is not possible to
always guarantee time bounds for fundamental variables,
such as message delivery delay or processing time. Let us
consider a timed action as one which must terminate within
a certain interval from a reference instant. Because of the
above, applications are subject to timing failures, which
occur when the execution of a timed action does not ter-
minate within the speciﬁed time bounds. Furthermore we
consider these failures to occur sporadically, and indepen-
dently. Throughout the paper we use the term “timing fault
tolerance” meaning that individual components or actions
are affected by timing failures, whose system-level effect (a
“timing fault”) we wish to tolerate.
The effects of timing failures can be handled in different
ways, depending on the properties of the particular applica-
tion. For example, fail-safe applications can handle individ-
ual timing failures by switching to a fail-safe state as soon as
the timing failure occurs and is detected [24]. Other applica-
tions can remain correct even when occasional timing fail-
ures occur, but they expect a certain coverage or probability
of success relative to an assumed time bound. These ap-
plications must be time-elastic, which means that they can
handle the decreased coverage effect caused by too many
timing failures by adapting to new time bounds [7].
Another way of dealing with timing failures is by repli-
cating the components affected by these failures.
In this
case, which we address here, it is necessary to ensure that
applications remain time-safe, that is, that they remain con-
sistent as they progress despite the occurrence of timing
failures [23]. We consider a client-server operation model
in which the server is replicated and part of it can be imple-
mented as a deterministic state machine [19]. Before intro-
ducing the paradigm for generic timing fault tolerance, let
us describe the correctness criteria that we follow and some
basic assumptions relative to the interaction and to the QoS
models considered in this paper.
2.1. Correctness Criteria
The correctness criteria for our paradigm rely on two
premisses: a) ensuring the value consistency of the updates
to the server replicas state; b) securing the temporal consis-
tency of time-value entities. Any generic solution for timing
fault tolerance must ensure that these requirements are ful-
ﬁlled despite timing failures.
Since we are considering, for the case of write inter-
actions, that the replicated server operates as deterministic
state machine, we must ensure that write requests are pro-
cessed in the same order by all the replicas in the system, so
that the value of their state remains consistent.
Beside this value consistency requirement, it is neces-
sary to ensure that both write and read operations respect
timeliness requirements. Such requirements are very im-
portant in several areas of computing, namely in real-time
control, in real-time databases, or in clock synchronization.
We explain below the relevant correctness criterion[25]:
(cid:15) A time-value entity is such that there are actions on
it whose time-domain and value-domain correctness
are inter-dependent (e.g., the position of a crankshaft,
the temperature of an oven). Real-time problems can,
almost without exception, be formulated in terms of
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:22:41 UTC from IEEE Xplore.  Restrictions apply. 
reading, computing, and updating the state of time-
value entities. For the correct operation of systems
using these entities two problems must be solved: a)
ensuring the timely observation of the entity; b) ensur-
ing the timely use of the observation afterwards.
(cid:15) This implies the establishment of validity constraints
for the computer representations of time-value entities
(which make up the server state), and bounded delays
for their manipulation (reading, writing, computing).
(cid:15) Furthermore,
the fundamental consistency criterion
between concurrent operations, causality, must be
equated in terms of time, which again can be guaran-
teed by the establishment of known and bounded inter-
vals between events [21].
These requirements are captured by the notion of tem-
poral consistency. Consider the value of a time-value en-
tity at instant Ti, EiTi. Assume bound Va for the max-
imum acceptable error accumulated by the observation (a
computer variable) of a time-value entity made at Ti, over
time. Then, we say that the observation is temporally con-
sistent at a (cid:21) Ti, if and only if the value of the time-
value entity at a differs less than Va from the observation
(jEia  EiTij (cid:20) Va). That is, we are deﬁning the faith-
fulness of an observation.
Therefore, when using such observed values to update
the state of a replicated state machine, and later when read-
ing them to perform real-time tasks, it is necessary to guar-
antee that the requests will be processed within bounded
intervals. This means that it is possible to secure temporal
consistency if there is an interval Ta such that the variation
of the value of the time-value entity within that interval is at
most Va. This interval, also called temporal accuracy inter-
val for control [14], constitutes the relevant variable which
determines the bounds that must be observed during execu-
tion in order to detect timing failures.
2.2. Interaction Model
We assume a distributed system composed of several
clients that communicate through a network with a server.
Client processes can execute read or write interactions (by
sending read or write requests to the server) to respectively
retrieve or modify (parts of) the server state. Furthermore,
we assume that read interactions are independent from write
interactions, which means that the server does not have to
enforce any ordering criteria between read and write re-
quests. It also means that read requests, which are the most
frequent, may be served more rapidly and more efﬁciently,
thus achieving an overall performance improvement.
We assume that there is a process in the server respon-
sible for handling write requests, which executes as a de-
terministic state machine. Since we replicate the server for
timing fault tolerance and to implicitly increase its availabil-