# Generic Timing Fault Tolerance using a Timely Computing Base

## Authors
António Casimiro and Paulo Veríssimo  
Faculdade de Ciências da Universidade de Lisboa (FC/UL)  
Email: [PI:EMAIL]

## Abstract
Designing applications with timeliness requirements in environments of uncertain synchrony is a challenging problem. This paper adopts the perspective of timing fault tolerance, where timing errors are processed using redundancy, such as component replication, to recover and deliver timely service. We introduce a paradigm for generic timing fault tolerance with replicated state machines, based on the existence of a Timing Failure Detector (TFD) with timed completeness and accuracy properties.

Generic timing fault tolerance requires dependable observation of the system and timely notification of timing failures. It ensures replica determinism with respect to time (temporal consistency) and safety in case of spare exhaustion. We demonstrate that this paradigm can be addressed and realized within the Timely Computing Base (TCB) model and architecture. Additionally, we illustrate the generality of our approach by reviewing existing solutions, showing that they often secure only restricted semantics or provide ad-hoc solutions.

## 1. Introduction
Handling applications with timeliness requirements in environments with poor baseline synchrony is a known challenge. These applications must cope with timing failures, where specified timed actions do not meet their deadlines. Such failures can lead to instantaneous delays, decreased long-term coverage, or logical safety property contamination. A general approach to timing fault tolerance must address all these aspects and provide techniques to handle the possible effects of timing failures.

Choosing an appropriate distributed systems model is crucial for providing the required services and coverage for a chosen fault model. Well-known models like the fully asynchronous (time-free) model or the synchronous model are not ideal. The former cannot handle timeliness requirements, while the latter does not accurately characterize uncertain environments, potentially leading to incorrect behaviors. Partial synchrony models, such as the Timed Asynchronous Model and the Quasi-Synchronous Model, offer better alternatives. Our approach proposes a more generic model, the Timely Computing Base (TCB), which encompasses the entire spectrum of synchrony. Applications designed under the TCB model can rely on a synchronous component, the TCB module, to achieve timely and safe behavior.

We have been systematically detailing how the effects of timing failures can be managed with the help of a TCB to implement certain classes of applications. In this paper, we focus on timing fault tolerance as a means to increase the availability of applications with timeliness requirements. We show that this problem can be handled generically within the TCB model using redundancy techniques. For this purpose, we introduce a paradigm for generic timing fault tolerance using a replicated state machine-based server. The paradigm assumes the existence of a TFD with timed completeness and accuracy properties, ensuring the temporal consistency of the server state.

Using replication in fault-tolerant systems is not new, but there is limited work on replication for timing fault tolerance. Our approach is more generic, suitable for any timed service executing as a state machine, and we reason in terms of Quality of Service (QoS) specifications to express timeliness and reliability requirements.

## 2. System Model
We consider applications with timeliness requirements in environments where it is not always possible to guarantee time bounds for fundamental variables such as message delivery delay or processing time. A timed action must terminate within a specified interval from a reference instant. Applications are subject to timing failures when a timed action does not meet its time bounds. We consider these failures to occur sporadically and independently. Throughout the paper, "timing fault tolerance" refers to tolerating the system-level effect (a "timing fault") of individual components or actions affected by timing failures.

### 2.1. Correctness Criteria
Our paradigm's correctness criteria are based on two premises:
1. Ensuring value consistency of updates to the server replicas' state.
2. Securing temporal consistency of time-value entities.

For write interactions, the replicated server operates as a deterministic state machine, requiring write requests to be processed in the same order by all replicas to maintain state consistency. Additionally, both write and read operations must respect timeliness requirements, which are crucial in real-time control, real-time databases, and clock synchronization.

A time-value entity has actions whose time-domain and value-domain correctness are inter-dependent. For the correct operation of systems using these entities, two problems must be solved:
- Ensuring the timely observation of the entity.
- Ensuring the timely use of the observation afterward.

This implies establishing validity constraints for the computer representations of time-value entities and bounded delays for their manipulation. Causality, the fundamental consistency criterion between concurrent operations, must also be equated in terms of time, guaranteed by known and bounded intervals between events.

Temporal consistency is defined as follows: for a time-value entity at instant \( T_i \), \( E_i(T_i) \), with a maximum acceptable error bound \( V_a \), the observation is temporally consistent at \( \alpha \geq T_i \) if the value of the time-value entity at \( \alpha \) differs less than \( V_a \) from the observation (\( |E_i(\alpha) - E_i(T_i)| \leq V_a \)).

### 2.2. Interaction Model
We assume a distributed system with multiple clients communicating through a network with a server. Clients can execute read or write interactions to retrieve or modify the server state. Read interactions are independent of write interactions, allowing read requests to be served more rapidly and efficiently. The server has a process responsible for handling write requests, which executes as a deterministic state machine. Replicating the server for timing fault tolerance implicitly increases its availability.

## 3. Generic Paradigm for Timing Fault Tolerance
We introduce a generic paradigm for timing fault tolerance using a replicated state machine. This paradigm assumes the existence of a TFD with timed completeness and accuracy properties, ensuring the temporal consistency of the server state. The TFD is used to detect timing failures and ensure that the server replicas remain consistent and safe.

## 4. Overview of the TCB Model
The TCB model provides a framework for addressing the problem of timing fault tolerance. It allows applications to rely on a synchronous component, the TCB module, to achieve timely and safe behavior. The TCB model encompasses the entire spectrum of synchrony, making it suitable for a wide range of applications.

## 5. Addressing Timing Fault Tolerance with the TCB Model
We show how the TCB model can provide an adequate framework for addressing the problem of timing fault tolerance using the paradigm introduced in Section 3. The TCB model ensures that the server replicas remain consistent and safe despite the occurrence of timing failures.

## 6. Related Work
We discuss relevant related work in the context of the proposed paradigm for generic timing fault tolerance. We compare our approach with existing solutions, highlighting the generality and effectiveness of our approach.

## 7. Conclusion
In conclusion, we present a system model and a paradigm for generic timing fault tolerance using a replicated state machine. We provide a detailed discussion of the potential problems for the timely and consistent behavior of a replicated server caused by timing failures and enumerate the basic requirements that must be fulfilled to avoid these problems. The TCB model provides an adequate framework to address the problem of timing fault tolerance, and we show how this model can be used to implement the proposed paradigm.

---

This revised version aims to improve clarity, coherence, and professionalism, while maintaining the original content and structure.