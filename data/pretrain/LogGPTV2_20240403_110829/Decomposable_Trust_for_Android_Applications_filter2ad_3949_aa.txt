title:Decomposable Trust for Android Applications
author:Earlence Fernandes and
Ajit Aluri and
Alexander Crowell and
Atul Prakash
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Decomposable Trust for Android Applications
Earlence Fernandes, Ajit Aluri∗†, Alexander Crowell, Atul Prakash
Computer Science and Engineering, University of Michigan, Ann Arbor
{earlence, acrowell, aprakash}@umich.edu, †PI:EMAIL
Abstract—Current operating system designs require applica-
tions (apps) to implicitly place trust in a large amount of code.
Taking Android as an example, apps must trust both the kernel
as well as privileged userspace services that consist of hundreds
of thousands of lines of code. Malware apps, on the other hand,
aim to exploit any vulnerabilities in the above large trusted base
to escalate their privileges. Once malware escalates its privileges,
additional attacks become feasible, such as stealing credentials
by scanning memory pages or intercepting user interactions of
sensitive apps, e.g., those used for banking or health management.
This paper introduces a novel mechanism, called Anception, that
strategically deprivileges a signiﬁcant portion of the kernel and
system services, moving them to an untrusted container, thereby
signiﬁcantly reducing the attack surface for privilege escalation
available to malware. Anception supports unmodiﬁed apps, run-
ning on a modiﬁed Android kernel. It achieves performance
close to native Android on several popular macrobenchmarks
and provides security against many types of known Android root
exploits.
Keywords—Android, Virtualization, Root Exploits, Trust De-
composition
I.
INTRODUCTION
Smartphones are characterized by an ecosystem of online
app markets that enable developers (hobbyists, professionals,
criminals) to reach large audiences. According to a recent
Kaspersky report [30], 98.05% of known malware targets
Android, a popular smartphone platform, to gain a foothold
on the device. Once a foothold is acquired, malware escalates
its privileges and then targets mobile banking and personal
data [3], [2].
Android provides basic isolation among apps. For example,
Android assigns a different Linux-UID (user ID) to each
installed app. However, in practice, malware can still exploit
vulnerabilities in system services or the operating system to
escalate its privileges and break isolation [22], [31], [34],
[37]. For example, Gingerbreak was an exploit on Android
that exploited a vulnerability in the root-capability vold vol-
ume daemon on Android to escalate its privileges. Another
attack vector for unprivileged malware is to exploit a kernel
vulnerability. For example, on Linux, vulnerabilities continue
to be found – CVE-2013-2094 local privilege escalation that
exploits Performance Counters for Linux, CVE-2014-7145 in
the Linux CIFS ﬁle system code, CVE-2014-6416 buffer ﬂow
vulnerability in the Linux network code [14].
Once an unprivileged malware exploits a privileged service
or the kernel, it opens the door to further rootkit-style attacks,
including tampering with the code of installed apps or system
libraries, examining and tampering with virtual memory of
other apps, monitoring their communications, etc. For example,
in the Man-in-the-Binder attack, once malware gains root
*Ajit Aluri is now with VMware.
privilege on the OS it intercepts IPC communication between
an app and the UI stack to steal all touch input data, that
includes text input on the virtual keyboard such as userids and
passwords [7].
In this paper, we aim to protect sensitive data in an app’s
virtual memory such as banking credentials, health data and
corporate data. These apps authenticate the user via UI inter-
action and these interactions must be protected. While these
apps may send data over the network over an authenticated and
encrypted channel, the same data will reside in unencrypted
form in virtual memory. Thus, virtual memory of these apps
must also be protected. Currently, none of this data is protected
if an unprivileged app exploits a kernel or privileged service
bug and escalates its privileges.
The most secure solution today to address the problem for
the user to use two physical devices, one for trustworthy apps
and another for untrustworthy apps. Besides being inconve-
nient in terms of managing two devices, the user has to judge
the trustworthiness of apps correctly. If the user is tricked even
once into installing a malicious app on the same device as the
one that contains trustworthy apps, security guarantees break
down.
A similar solution to the two-device solution is to use
a single device that is partitioned to provide multiple vir-
tual devices. Cells [5] and systems based on Cells, e.g.,
Airbag [45], are examples of this. This reduces the inconve-
nience of carrying two physical devices, but retains the other
disadvantages of a two-device solution. If a user is tricked into
installing a malicious app on the virtual device that contains
trusted apps, the conﬁdentiality of data in trusted apps can
be violated by privilege escalation attacks. Another system
proposal is Overshadow [13] and similar mechanisms [47],
[25] that introduce a memory cloaking primitive wherein an
app’s virtual memory is encrypted in a trusted layer (such as
a hypervisor or hardware support [9]) upon a context switch
to the untrusted OS (or another process). Unfortunately, the
Android’s UI stack resides within the untrusted OS and thus
will remains vulnerable to malware – the design does not
consider securing UI interactions – the primary method for
sensitive data to ﬂow between a user and the app.
This paper presents a novel solution for protecting apps
from each other. Our design, called Anception, uses virtual-
ization as a building block but does not require the user to
make an a priori judgment on trustworthiness of apps. Instead,
it deprivileges signiﬁcant portions of the kernel and system
services so that the attack path that is normally possible for a
malware app for privilege escalation is blocked.
To achieve its security goals, Anception adapts the classical
virtualization model and executes many system services as
well as most system calls on a low-privilege container kernel.
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.15
DOI 10.1109/DSN.2015.15
343
343
However, unlike the classical virtualization model, the con-
tainer kernel does not have access to either the user-interface
interactions of apps or to their virtual memory. This provides
a foundation for building high assurance apps that can better
protect themselves without requiring a shaky assumption that
the user will never install malicious apps on the same system.
We prototyped Anception on Android 2.3 and 4.2 in the
form of two loadable Linux kernel modules, consisting of
approximately 5.2K lines of code. Anception does not require
any modiﬁcations to the Android Framework or to Android
applications. We make the following contributions:
The notion of trust decomposition for Android apps
running on a monolithic OS, wherein, the trust an app
places in the OS is split between a smaller trusted host
component and a larger untrusted component. The key
security guarantee enabled is conﬁdentiality of virtual
memory and of UI interactions with a smaller trusted
base.
The design and implementation of Anception, a sys-
tem architecture that deprivileges Android system ser-
vices and kernel services and delegates their function-
ality to an unprivileged virtualized container (Sections
III, IV). Anception is able to deprivilege 1.2M lines
of code from the linux kernel and 108K lines of code
from the privileged Android userspace (Section V)
Detailed evaluation of the security decisions made
during design (Section V). We analyzed 25 Android
vulnerabilities related to privileged system services
and kernel services from the past 4 years and de-
termined that the reduced attack surface provided by
Anception would have blocked 23 of them sufﬁciently
to prevent signiﬁcant attacks on both the host OS
as well as other apps on the system; the remaining
two attacks would have succeeded, but could have
been detected and prevented with simple policy-based
checks at the system-call interface on both standard
Android and Anception-based Android.
Performance evaluation of Anception-based Android
(Section VI). While Anception-based Android suf-
fered in performance on some microbenchmarks that
involved system calls crossing boundaries between the
trusted host and the untrusted container, the perfor-
mance hit was relatively modest on I/O-based bench-
marks and negligible on graphical and interactive
macrobenchmarks.
•
•
•
•
II. THREAT MODEL AND SECURITY GUARANTEES
Threat model. The attacker is a low assurance app down-
loaded from ofﬁcial and unofﬁcial app stores and exploits
vulnerabilities in the kernel services and privileged userspace
services with the aim of corrupting and stealing information
from high assurance apps. We assume that both high and low
assurance apps are installed on the same operating system.
Additionally, high assurance apps are well-designed – they
use encryption for network communications and do not leave
secrets in plain text anywhere except in virtual memory.
We do not prevent theft of secrets in an app’s memory via
covert channels, e.g., by observing memory and CPU usage
344344
High 
Assurance
HiApp
Low 
Assurance 
LoApp
4
3
2
1
Privileged
Services
UI/Input
vold
Location
...
Privileged
Services
UI/Input
High 
Assurance
HiApp
Low 
Assurance 
LoApp
Privileged
Services
vold
Location
...
2
1
3
mem
net
storage
mem
Host Kernel
Kernel
(a)
4
net
storage
Container Kernel
(b)
Fig. 1. Exploitation channels available. In (a), the low assurance app triggers a
vulnerability in a privileged service (1) and uses the extra privileges to tamper
with the high assurance HiApp (2). Similarly, LoApp uses an exploit in the
network stack (arrows 3 and 4). On Anception (b), the compromised privileged
service cannot directly access the state of HiApp (arrows 2 and 4 are blocked)
because the services are delegated to the container.
patterns. We also do not prevent disruptions. A malicious app
may be able to disrupt the running of other apps even without
escalating privileges. Such attacks are likely to be noticed
quickly by users and thus we consider them to be less effective.
The host operating system kernel must be trusted but
normally presents a signiﬁcant attack surface. Our system
reduces the attack surface it presents to apps by running any
privileged operations of an app in a virtualized environment.
Security Guarantees. We provide conﬁdentiality of an
app’s virtual memory in the presence of malicious apps that
exploit kernel and privileged userspace services for privilege
escalation. Additionally, we ensure that malware cannot eaves-
drop on and tamper with the UI interactions of an app.
III. ANCEPTION DESIGN
A. Overview
Consider two apps, HiApp and LoApp. HiApp is a high
assurance app such as a banking or health management app
and LoApp is a low assurance one such as a game or a
calculator. Figure 1(a) shows the execution environment of
an app on Android. The kernel provides the usual services
of memory, storage, and networking, among others. The priv-
ileged services provide higher level functions such as data
management, sensor management, location management, etc.
Privileged services consist of large bodies of complex systems
code and thus provide a large attack surface (on Android,
the privileged services consist of approximately 180K lines
of code). The same attack surface is exposed to both apps.
Worryingly, LoApp can exploit any bugs in the large attack
surface presented by the privileged services as well as the
OS and then use their privileges to exploit and steal secrets
contained in the memory of HiApp. Examples of possible ex-
ploits using previously vulnerabilities on Android include the
following: (1) LoApp exploits a negative index vulnerability
in the privileged vold service (Figure 1) and uses it to exploit
HiApp1; and (2) LoApp triggers an exploit in the networking
stack and uses kernel privileges to steal secrets from HiApp2.
1This vulnerability existed on Android, and is known as GingerBreak.
2This too existed in the Linux kernel and is known as CVE-2009-2692.
The core of the matter is that high and low assurance apps
share the same trusted, but likely buggy, base. It is perhaps
reasonable to assume that high assurance apps and services do
not exploit the bugs; however, no such assumption can be made
of low assurance apps. Thus, we seek to split the trusted base
such that low assurance apps cannot violate the conﬁdentiality
of high assurance apps by exploiting privileged services, even
if these services are buggy. Our conﬁdentiality guarantees are
primarily conﬁned to virtual memory of high assurance apps.
As far as the conﬁdentiality of ﬁle system data and network
communication of high assurance apps is concerned, it can be