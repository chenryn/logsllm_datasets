# Decomposable Trust for Android Applications

**Authors:** Earlence Fernandes, Ajit Aluri, Alexander Crowell, Atul Prakash  
**Affiliation:** Computer Science and Engineering, University of Michigan, Ann Arbor  
**Emails:** {earlence, acrowell, aprakash}@umich.edu, †PI:EMAIL  
**Conference:** 2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks  
**DOI:** 10.1109/DSN.2015.15

## Abstract
Current operating system designs require applications (apps) to implicitly trust a large amount of code. For instance, Android apps must trust both the kernel and privileged userspace services, which consist of hundreds of thousands of lines of code. Malware apps aim to exploit vulnerabilities in this trusted base to escalate their privileges, enabling additional attacks such as stealing credentials or intercepting user interactions with sensitive apps.

This paper introduces Anception, a novel mechanism that strategically deprivileges a significant portion of the kernel and system services by moving them to an untrusted container. This significantly reduces the attack surface available to malware for privilege escalation. Anception supports unmodified apps running on a modified Android kernel and achieves performance close to native Android on several popular macrobenchmarks while providing security against many types of known Android root exploits.

**Keywords:** Android, Virtualization, Root Exploits, Trust Decomposition

## 1. Introduction
Smartphones are characterized by an ecosystem of online app markets, enabling developers, including hobbyists, professionals, and criminals, to reach large audiences. According to a recent Kaspersky report, 98.05% of known malware targets Android, a popular smartphone platform, to gain a foothold on the device. Once a foothold is acquired, malware can escalate its privileges and target mobile banking and personal data.

Android provides basic isolation among apps by assigning a different Linux-UID (user ID) to each installed app. However, in practice, malware can still exploit vulnerabilities in system services or the operating system to escalate its privileges and break isolation. For example, the Gingerbreak exploit targeted a vulnerability in the vold volume daemon on Android to escalate its privileges. Another attack vector is exploiting a kernel vulnerability, such as CVE-2013-2094, which allows local privilege escalation via Performance Counters for Linux.

Once an unprivileged malware exploits a privileged service or the kernel, it opens the door to further rootkit-style attacks, including tampering with the code of installed apps or system libraries, examining and tampering with virtual memory of other apps, and monitoring their communications. For instance, in the Man-in-the-Binder attack, malware intercepts IPC communication between an app and the UI stack to steal touch input data, including user IDs and passwords.

In this paper, we aim to protect sensitive data in an app’s virtual memory, such as banking credentials, health data, and corporate data. These apps authenticate the user via UI interactions, and these interactions must be protected. While these apps may send data over the network over an authenticated and encrypted channel, the same data will reside in unencrypted form in virtual memory. Thus, virtual memory of these apps must also be protected. Currently, none of this data is protected if an unprivileged app exploits a kernel or privileged service bug and escalates its privileges.

The most secure solution today is for the user to use two physical devices: one for trustworthy apps and another for untrustworthy apps. Besides being inconvenient in terms of managing two devices, the user has to correctly judge the trustworthiness of apps. If the user is tricked into installing a malicious app on the same device as the one that contains trustworthy apps, security guarantees break down.

A similar solution is to use a single device partitioned to provide multiple virtual devices, such as Cells and systems based on Cells, e.g., Airbag. This reduces the inconvenience of carrying two physical devices but retains the other disadvantages of a two-device solution. If a user is tricked into installing a malicious app on the virtual device that contains trusted apps, the confidentiality of data in trusted apps can be violated by privilege escalation attacks.

Another system proposal is Overshadow and similar mechanisms that introduce a memory cloaking primitive wherein an app’s virtual memory is encrypted in a trusted layer upon a context switch to the untrusted OS. Unfortunately, the Android UI stack resides within the untrusted OS and remains vulnerable to malware, as the design does not consider securing UI interactions—the primary method for sensitive data to flow between a user and the app.

This paper presents a novel solution for protecting apps from each other. Our design, called Anception, uses virtualization as a building block but does not require the user to make an a priori judgment on the trustworthiness of apps. Instead, it deprivileges significant portions of the kernel and system services so that the attack path normally possible for a malware app for privilege escalation is blocked.

To achieve its security goals, Anception adapts the classical virtualization model and executes many system services as well as most system calls on a low-privilege container kernel. Unlike the classical virtualization model, the container kernel does not have access to either the user-interface interactions of apps or to their virtual memory. This provides a foundation for building high-assurance apps that can better protect themselves without requiring the assumption that the user will never install malicious apps on the same system.

We prototyped Anception on Android 2.3 and 4.2 in the form of two loadable Linux kernel modules, consisting of approximately 5.2K lines of code. Anception does not require any modifications to the Android Framework or to Android applications. We make the following contributions:

- The notion of trust decomposition for Android apps running on a monolithic OS, where the trust an app places in the OS is split between a smaller trusted host component and a larger untrusted component. The key security guarantee enabled is the confidentiality of virtual memory and UI interactions with a smaller trusted base.
- The design and implementation of Anception, a system architecture that deprivileges Android system services and kernel services and delegates their functionality to an unprivileged virtualized container. Anception is able to deprivilege 1.2M lines of code from the Linux kernel and 108K lines of code from the privileged Android userspace.
- A detailed evaluation of the security decisions made during design. We analyzed 25 Android vulnerabilities related to privileged system services and kernel services from the past four years and determined that the reduced attack surface provided by Anception would have blocked 23 of them sufficiently to prevent significant attacks on both the host OS and other apps on the system; the remaining two attacks would have succeeded but could have been detected and prevented with simple policy-based checks at the system-call interface on both standard Android and Anception-based Android.
- A performance evaluation of Anception-based Android. While Anception-based Android suffered in performance on some microbenchmarks involving system calls crossing boundaries between the trusted host and the untrusted container, the performance hit was relatively modest on I/O-based benchmarks and negligible on graphical and interactive macrobenchmarks.

## 2. Threat Model and Security Guarantees

### 2.1 Threat Model
The attacker is a low-assurance app downloaded from official and unofficial app stores, which exploits vulnerabilities in the kernel services and privileged userspace services with the aim of corrupting and stealing information from high-assurance apps. Both high and low-assurance apps are installed on the same operating system. High-assurance apps are well-designed, using encryption for network communications and not leaving secrets in plain text anywhere except in virtual memory.

We do not prevent theft of secrets in an app’s memory via covert channels, such as observing memory and CPU usage patterns. We also do not prevent disruptions. A malicious app may be able to disrupt the running of other apps even without escalating privileges. Such attacks are likely to be noticed quickly by users and thus are considered less effective.

The host operating system kernel must be trusted but normally presents a significant attack surface. Our system reduces the attack surface it presents to apps by running any privileged operations of an app in a virtualized environment.

### 2.2 Security Guarantees
We provide confidentiality of an app’s virtual memory in the presence of malicious apps that exploit kernel and privileged userspace services for privilege escalation. Additionally, we ensure that malware cannot eavesdrop on and tamper with the UI interactions of an app.

## 3. Anception Design

### 3.1 Overview
Consider two apps, HiApp and LoApp. HiApp is a high-assurance app, such as a banking or health management app, and LoApp is a low-assurance one, such as a game or a calculator. Figure 1(a) shows the execution environment of an app on Android. The kernel provides the usual services of memory, storage, and networking, among others. Privileged services provide higher-level functions such as data management, sensor management, location management, etc. Privileged services consist of large bodies of complex systems code and thus provide a large attack surface (on Android, the privileged services consist of approximately 180K lines of code). The same attack surface is exposed to both apps.

Worryingly, LoApp can exploit any bugs in the large attack surface presented by the privileged services as well as the OS and then use their privileges to exploit and steal secrets contained in the memory of HiApp. Examples of possible exploits using previously discovered vulnerabilities on Android include:
1. LoApp exploits a negative index vulnerability in the privileged vold service (Figure 1) and uses it to exploit HiApp. This vulnerability is known as GingerBreak.
2. LoApp triggers an exploit in the networking stack and uses kernel privileges to steal secrets from HiApp. This vulnerability is known as CVE-2009-2692.

The core issue is that high and low-assurance apps share the same trusted, but likely buggy, base. It is reasonable to assume that high-assurance apps and services do not exploit the bugs; however, no such assumption can be made of low-assurance apps. Thus, we seek to split the trusted base such that low-assurance apps cannot violate the confidentiality of high-assurance apps by exploiting privileged services, even if these services are buggy. Our confidentiality guarantees are primarily confined to the virtual memory of high-assurance apps. As for the confidentiality of file system data and network communication of high-assurance apps, it can be achieved through other means, such as encryption and secure protocols.