---
## Page 1052
CTF特训营：技术详解、解题方法与
27.7专业调试工具
1052/1144
图27-38AVRStudio调试界面
在调试界面中依次选择View→MemoryWindow即可打开内存查
看器，查看内存中的数据值，但是需要注意的是，AVR单片机为哈弗
结构的单片机，因此存储区可分为程序存储区和数据存储区，在实际
使用时，要注意选对区域，否则查看到的将是错误的值。如图27-39
所示，其中左上角的选择框可以选择当前要查看哪个存储区（程序或
数据）。
---
## Page 1053
CTF特训营：技术详解、解题方法与
27.7专业调试工具
1053/1144
Memory
Data
8/16abc.
Address:0x100
Cols:Auto
000100FF FF FF FF FF FFFF FFFF FFFF FFFF FF
00010EFF
FFFF
FF FF FF FF FF FF FF
FF FF FF FF
00011CFF
FF FF FF FF FF FF FF FF FF FF FF FF FF
00012AFF FFFF FFFF FFFF FFFF FF FFFF FF FF
000138FF FF FFFFFFFF FF FFFFFEFF FF FF FF
000162FF FF FFFFFF FF FF FFFFFFFFFF FF FF
000170FFFFFFFEFFFFFFFEFFFFFFFFFF FF
00018CFF FF FF FF FF FF FF FF FF FF FF FF FF FF
00019A FF FF FF FF FF FF FF FF FF FF FFFF FF FF
0001A8FE FFFF FFFF FFFE FFFEFF FEFF FF FF
0001C4FF FF FF FF FF FF FF FF FF FF FF FF FF FF
O001EO FF FF FFFFFF FF FF FFFFFF FF FF FF FF
0001EE FE FF FF FFFF FF FF FF FFFF FE FF FF FE
0001FC FF FF FF FF FF FF FF FF FF FF FF FF FF FF
00020A FF FF FF FF FF FF FF FF FF FF FF FF FF FF
000218FF FF FF FF FF FF FF FF FF FF FF FF FF FF
000234 FF FF FF FF FF FF FF FF FF FF FF FF FF FF
000242 FF FF FF FF FF FF FF FF FF FF FF FF FF FF
000250 FFFF FFFF FFFF FF FF FF FE FF FF FF FF
图27-39内存查看器
总之，AVRStudio的使用还是非常容易上手的，更多的功能，还
请各位读者自行尝试和发现，用多了大家就会发现，AVRStudio确实
是一款AVR全系列调试的利器。
3.Hapsim
---
## Page 1054
CTF特训营：技术详解、解题方法与
27.7专业调试工具
1054/1144
Helmi名字的原意是Helmi'sAVRPeripherySimulator，是一个
开源的AVR外设模拟器，其作为AVRStudio的一个插件使用。它可以
将串行设备诸如USART、I2C、SPI等串行接口虚拟成终端来交互。
这一点在调试串口按终端方式工作的程序中非常有用，本节将简单介
绍这款软件的使用方法。该插件是可以免费使用的，各位读者可以从
这里下载（http://www.helmix.at/hapsim/）。
在使用Hapsim软件之前，需要先启动AVRStudio，并使用可执
行文件，利用前文中讲到的方法创建好工程，然后，启动Hapsim软
件即可，如图27-40所示。
 hapsim - LCD1
口
EileViewWindowQptionsHelp
ATmega128
8
LCD1
XOo
LCD-HD44780U
Simulator!
Ready
---
## Page 1055
CTF特训营：技术详解、解题方法与
27.7专业调试工具
1055/1144
图27-40Hapsim启动界面
这款软件可以模拟1602液晶、数字键盘、IO口以及将TW或
USART转为COM口的功能，可以方便我们与程序之间进行交互。比
如，如果我希望使用TW与程序进行交互，则可以通过依次选择File
→NewControl→Terminal来创建一个Terminal，如图27-41所示
hapsim -LCD1
口
X
hapsim - LCD1
BleYiew
Help
BleyewWindowQptionsHelp
 Save
Open Configu
Ctrl+S
口
回区
Save Bs
Exit
新建(N)
A
取消
AvrCycleVie
图27-41创建Terminal界面
这样就可以创建一个Terminal了，然后还需要根据实际使用情况
进行一些设置，比如，如果想连接TWi和Terminal，就需要在Options
→TerminalSettings选项中进行相应的设置，如图27-42和图27-43所
示。
---
## Page 1056
CTF特训营：技术详解、解题方法与
27.7专业调试工具
1056/1144
如图27-43所示，在Serial模式中选择TWI，同时为了方便，勾选
LocalEcho前的方框。单击OK按钮之后，就可以通过Terminal窗口和
程序的TW进行通信了，如果是USART，在Serial选项中相应选择
USART即可。当然，还有其他的高级技巧，读者可以自行实践和发
现。
hapsim-Terminal1
口
×
File
View
Window
Qptions
Help
ATmega
AVRStudioHook
Stay OnTop
LCD1
TerminalSettings
Terminal1
DisplayandModifytheTerminalSettings
---
## Page 1057
CTF特训营：技术详解、解题方法与
27.7专业调试工具
1057/1144
图27-42打开Options选项卡
IP
hapsim-Terminal1
口
File
View
Window
Options
Help
H
ATmega128
8曲？
RUB
LCD1
=
回
x
Terminal Settings
Hame:
aqwl
OK
Cancel
Local Echo
Serial
IMI
Redirection
COM1
Settings
Ready
图27-43TerminalSetting窗体
---
## Page 1058
CTF特训营：技术详解、解题方法与
27.8反编译工具1058/1144
27.8反编译工具
基于以上分析，我们已经可以找到正确的反汇编分析方法了，然
而IDA自前泄露出来的6.8版本，只能进行x86/×86_64和ARM32的反编
译操作。而即使是最新的6.9版本，也只是增加了aarch64和PPC的反
编译支持。对于loT程序的分析，反编译工具可以提供非常多的便
利。
当然，如果没有最新的IDA也没关系。这里为大家提供了一个代
替方案，有一个名为RetargetableDecomplier的在线免费反编译工具
目前支持x86、ARM、MIPS、PIC32和PPC平台的反编译，该工具在
很大程度上能够代替IDAF5的功能，并且还能够支持目前IDA尚不支
持的MIPS和PIC32，同时也提供了一个IDA的插件，使用上还是比较
方便的。而且在线反编译提供的反编译结果也足够方便阅读。
在此笔者将此工具推荐给大家（https://retdec.com
decompilation/），在大多数情况下，只需要上传bin文件即可下载到反
编译后的源码。当然，大家也可以进一步选择使用该工具提供的API
和IDA插件以进行更高级的交互式反编译分析。
---
## Page 1059
CTF特训营：技术详解、解题方法与
第28章固件结构分析1059/1144
第28章固件结构分析
在前面的章节中，我们讨论了裸机系统（即整个固件就是一个程
序）的固件逆向工程方法，但是在实际环境中，我们碰到的固件多是
一系列文件或者文件系统，甚至是数据和代码的混合，这种时候我们
就需要对固件结构先进行分析，从中分离出代码、文件以及部分数据
后再进行更加精确的分析。甚至在有些固件中，存在压缩或加密的代
理，然后才能继续对其进行分析。本章就为大家介绍复杂固件的分析
方法。
---
## Page 1060
CTF特训营：技术详解、解题方法与
28.1常见固件类型1060/1144
28.1常见固件类型
在前面的章节中，笔者已经向大家介绍了单片机程序的分析方
法，那么，接下来我们来分析嵌入式系统的固件。在前文中已经介绍
过固件的概念，本章将展开详细介绍
事实上，在介绍完单片机软件逆向工程的时候，我们已经分析了
一种最基本的固件，那就是裸机程序。裸机程序是组成最为简单的固
件，只包含代码和代码需要引用的数据。更复杂的固件往往会含有不
正一个可执行文件。也许此时你会想到，更复杂的固件是不是仍然会
包含文件系统呢？答案是肯定的，在这里笔者可以负责任地告诉大
家，固件就是程序+文件系统的组合，由文件系统将多个程序组合成
一个更大、更复杂的二进制文件。当然这里的大小指的是一个相对的
概念。很多时候，固件的大小往往只有儿MB，而在Windows或Linux
上的可执行文件动辑就是几百MB，当然两者是不能比的，相比而言
固件是麻雀虽小，五脏俱全。
本节将会列举一些常见的固件类型，大概可分为如下几种。
裸机程序：前面已经提到过，它是组成最简单的固件，也是最
---
## Page 1061
CTF特训营：技术详解、解题方法与
28.1常见固件类型
1061/1144
容易分析的固件，IDA可以正确识别并分析这种类型的固件。
文件系统镜像：往往包含完整的嵌入式文件系统，内部组织了
多个文件结构，还可能会维护Linux的根目录，需要根据具体服务提
取相应的bin文件进行分析。文件系统镜像还会包含众多的配置文件
诸如xml或conf/ini文件等。
带压缩的镜像：嵌入式系统在空间上通常会希望结构尽可能紧
凑，所以希望对固件内容进行压缩，由引导代码进行解压操作，这类
固件的主体内容已经被压缩，因此提取和分析固件代码的难度会更
大。此类固件往往是只读的。
带压缩的文件系统：与带压缩的镜像类似，这种固件采用了支
持压缩的文件系统，例如Squashfs这类文件系统，可以使用lzma之类
的算法对文件系统主体进行压缩，当然也正因为如此，这种固件在实
际运行时，文件系统也是只读的。
由于裸机程序在前文中已经有了详细的分析，因此本节将着重介
绍文件系统的分析。关于固件的识别，在Linux中仍然可以使用常用
的binwalk、file等命令进行初步的判定
---
## Page 1062
CTF特训营：技术详解、解题方法与
28.2Flash文件系统1062/1144
28.2Flash文件系统
与普通计算机系统不同的是，嵌入式系统往往需要使用低成本的
存储器，诸如EEPROM或Nor/NandFlash等，这些存储器在特性、写
入和磨损性能上，与机械硬盘乃至SSD有着诸多区别。因此，在文件
系统设计上，也并不适合直接照搬PC上的常用文件系统，所以在这
样的环境下，就诞生了许多针对Flash存储器而设计的特殊文件系统
这里列举一些最常见的Flash文件系统，具体如下。
JFFS/JFFS2:全名是JournallingFlashFileSystem，是RedHat
公司开发的闪存文件系统，最早是为NORFlash设计的，自2.6版本以
后开始支持NANDFlash，极适合用于嵌入式系统，多见于32MB以下
的Nor型Flash固件中。它支持三种压缩算法：zlib、rubin以及rtime。
YAFFS/YAFFS2：全称为YetAnotherFlashFileSystem，是由
AlephOne公司发展出来的NANDflash嵌入式文件系统。与JFFS不同
的是，YAFFS最初是专门针对Nand型Flash所设计的，对于大容量的
Flash读写更有优势，而JFFS在小容量的FLASH中更具优势，两者各
有侧重。这种文件系统多见于128MB以上的Nand型Flash固件中。
---
## Page 1063
CTF特训营：技术详解、解题方法与
28.2Flash文件系统
1063/1144
Squashfs：是一套供Linux核心使用的GPL开源只读压缩文件系
统。Squashfs能为文件系统内的文件、inode及目录结构提供压缩操
作，并支持最大1024千字节的区块，以提供更大的压缩比。这种文
件系统多用于存储资源紧张的场合，OpenWrt以及DD-Wrt的固件使用
的就是这种文件系统。多见于4～16MB的Nor型Flash中。
---
## Page 1064
CTF特训营：技术详解、解题方法与
28.3固件基地址确定方法1064/1144
28.3固件基地址确定方法
在前面的讨论中，我们是用lDA加载分析hex文件，但在很多时
候，我们掌到的是一个并不包含加载基地址信息的固件，这时候就需
要通过一些方法来确定加载地址，并在IDA中使用正确的基地址加载
程序，才能得到正确的分析结果。但在没有任何信息的时候，确定基
地址确实是非常难的，本节会根据笔者的经验总结一些常用的方法
在碰到具体问题时，往往还需要各位读者仁者见仁、智者见智使用一
切资源去分析。需要注意的是，确定固件基地址并不是必须的，只有
在某些特殊情况下才需要。例如，裸机程序的bin文件，需要自行确
定基地址。桌些使用了多个操作系统的固件，例如，华为桌些终端使
用了vxworks操作系统，并非elf格式的文件，其内核代码直接加载入
内存，此时如果要使用IDA静态分析，则仍然需要确定基地址
1.查阅Datasheet
对于裸机程序，其加载的基地址一定是确定的，而该地址在
Datasheet中是可以找到的，而且一般就是程序存储区的起始地址。
以上文中提到的ConfusedARM为例，其加载地址Ox08000000就是
---
## Page 1065
CTF特训营：技术详解、解题方法与
28.3固件基地址确定方法
1065/1144
MemoryMaps中Flash区域的起始地址。对于其他芯片的裸机程序
同样可以通过查询Datasheet得出结论
2.在固件分区表中查找
这里以某款3G路由的固件为例（该路由比较有代表性），该固件
是一种典型的固件结构，在固件最头部有分区表，标明了每个分区的
加载地址，若没有加载地址则表示该分区不会被映射到内存中。分区
表的结构大概如图28-1所示。
00000OCO
705461626C654865
61 6400 00 00 00 0080pTab1eHead
0000OODO
424F4F54524F4D5F
5630312E30320000B
BOOTR0M_V01.02
000000EO
48 36 39 32 30 43 53 5F
453533 37 32 000000H6920CS_E5372
00000OFO
42 6F 6F 74 4C6F61 64
0000000000000000BootLoad
00000100
0000000000000000
000002000000FC2F
u/
00000110
0000FC2F01010000
0000000000000000
u/
00000120
4E 76 4261636B4C 54
4500 00 00 00 00 00 00NvBackLTE
00000130
0000020000000000
0000180000000000
00000140
000000000D010000
0008000000000000
00000150
4E 76 42 61 63 6B 47 55
0000000000000000NvBackGU
00000160
00001A0000000000
0000100000000000
00000170
000000000E010000
0008000000000000
00000180
426F6F74526F6D00
0000000000000000
BootRom
00000190
00002A0000002C00
D003E080000000