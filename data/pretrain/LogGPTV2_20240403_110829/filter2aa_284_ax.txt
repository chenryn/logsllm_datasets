### Web Application Security and Code Analysis

#### 1. Input Controls
The following server-side classes are used to generate and display form fields in web applications. Identifying these references can help locate entry points into the application.

- `webcontrols.dropdownlist`
- `htmlcontrols.htmlinputhidden`
- `webcontrols.hiddenfield`
- `webcontrols.hyperlink`
- `webcontrols.textbox`
- `webcontrols.label`
- `webcontrols.linkbutton`
- `webcontrols.listbox`
- `webcontrols.checkboxlist`

#### 2. Configuration Files (web.config)
The .NET Framework uses `.config` files, such as `web.config`, to define configuration settings. These files are XML-based and are typically located in the root directory of a web application. For ASP.NET applications, `web.config` contains essential information about the application's operation, including:

- `httpRuntime`
- `sessionState`
- `maxRequestLength`
- `Debug`
- `Credentials`
- `identity impersonate`
- `timeout`
- `remote`
- `connectionStrings`
- `authentication mode`
- `Allow`
- `Deny`
- `forms protection`
- `appSettings`
- `ConfigurationSettings`
- `CustomErrors`
- `httpCookies`
- `httpHandlers`
- `requestEncoding`
- `responseEncoding`
- `Trace`
- `authorization`
- `compilation`

#### 3. Global.asax
Each application may have its own `global.asax` file, which sets event code and values for the application using scripts. Ensure that application variables do not contain sensitive information, as they are accessible to all users within the application.

- `Application_OnAuthenticateRequest`
- `Application_OnAuthorizeRequest`
- `Session_OnStart`
- `Session_OnEnd`

#### 4. Logging
Logging can be a source of information leakage. It is crucial to examine all calls to the logging subsystem to ensure that no sensitive information is being logged. Common mistakes include logging user IDs with passwords or logging database requests containing sensitive data.

- `log4net`
- `Console.WriteLine`
- `System.Diagnostics.Debug`
- `System.Diagnostics.Trace`

#### 5. machine.config
Many variables in `machine.config` can be overridden in the `web.config` file for a specific application.

#### 6. Threads and Concurrency
Code that contains multithreaded functions can lead to race conditions, potentially resulting in security vulnerabilities. The `Thread` keyword is used to create new thread objects. Code using static global variables that hold sensitive information may cause session issues. Static constructors and unsynchronized `Dispose` methods can also lead to concurrency issues.

- `validateRequest`
- `enableViewState`
- `enableViewStateMac`
- `Thread`
- `Dispose`

#### 7. Class Design
Classes that are not intended to be derived from should be sealed. Ensure that all class fields are public only when necessary and do not expose any unnecessary information.

- `Public`
- `Sealed`

#### 8. Reflection and Serialization
Code generated dynamically at runtime based on external input can pose security risks. If code contains sensitive data, consider whether it needs to be serialized.

- `Serializable`
- `AllowPartiallyTrustedCallersAttribute`
- `GetObjectData`
- `System.Reflection`

#### 9. Exception Handling
Ensure that catch blocks do not leak information to the user in case of an exception. Use the `finally` block to manage resources properly. Avoid enabling trace in production environments to prevent information leakage. Implement custom errors correctly.

- `catch`
- `finally`
- `trace enabled`
- `customErrors mode`

#### 10. Cryptography
If cryptography is used, ensure that a strong cipher (e.g., AES or 3DES) is employed. Use larger key sizes for better security. Hash passwords before persisting them and use a secure random number generator.

- `RNGCryptoServiceProvider`
- `SHA`
- `MD5`
- `base64`
- `DES`
- `RC2`
- `System.Security.Cryptography`
- `System.Random`
- `Random`

#### 11. Secure Storage
When storing sensitive data in memory, use secure storage mechanisms.

- `SecureString`
- `ProtectedMemory`

#### 12. Authorization and Permissions
Avoid bypassing .NET code access security permissions. Be cautious with dangerous permissions such as calling unmanaged code outside the CLR.

- `ControlDomainPolicy`
- `ControlPolicy`
- `SkipVerification`
- `ControlEvidence`
- `SerializationFormatter`
- `ControlPrincipal`
- `RequestMinimum`
- `RequestOptional`
- `Assert`
- `Debug.Assert`
- `CodeAccessPermission`
- `MemberAccess`
- `ControlAppDomain`
- `UnmanagedCode`

#### 13. Java Input and Output Streams
Java input and output streams are used to read data into an application and can be potential entry points for attacks. Investigate these for path traversal and DoS attacks.

- `printf`
- `strcpy`
- `java.io.FileOutputStream`
- `File`
- `ObjectInputStream`
- `PipedInputStream`
- `SequenceInputStream`
- `StringBufferInputStream`
- `BufferedReader`
- `ByteArrayInputStream`
- `StreamTokenizer`
- `getResourceAsStream`
- `java.io.FileReader`
- `java.io.FileWriter`
- `java.io.RandomAccessFile`
- `java.io.File`
- `renameTo`
- `Mkdir`

#### 14. Servlets
Servlet API calls can be avenues for parameter/header/URL/cookie tampering, HTTP Response Splitting, and information leakage. Examine these closely as many APIs obtain parameters directly from HTTP requests.

- `javax.servlet.*`
- `getParameterNames`
- `getParameterValues`
- `getParameter`
- `getLocalName`
- `getAttribute`
- `getAttributeNames`
- `getLocalAddr`
- `getPrincipal`
- `getUserPrincipal`
- `isUserInRole`
- `getInputStream`
- `HttpServletRequest`
- `getQueryString`
- `getHeaderNames`
- `getHeaders`
- `getAuthType`
- `getRemoteUser`
- `getCookies`
- `isSecure`
- `getServerName`
- `getRemoteAddr`
- `getRemoteHost`
- `getRealPath`
- `getParameterMap`
- `getScheme`
- `getProtocol`
- `getContentType`
- `getName`
- `getPath`
- `getDomain`
- `getComment`
- `getValueNames`
- `getRequestedSessionId`
- `getRequestURI`
- `getRequestURL`
- `getServerName`
- `getValue`
- `getMethod`
- `getPath`
- `getReader`
- `getRealPath`
- `setHeader`
- `setAttribute`
- `putValue`
- `javax.servlet.http.Cookie`
- `getOutputStream`
- `getWriter`
- `addCookie`
- `addHeader`

#### 15. Cross-Site Scripting (XSS)
Check the following API calls in code reviews as they could be sources of XSS vulnerabilities.

- `javax.servlet.ServletOutputStream.print`
- `strcpy`
- `Response Splitting`

This structured approach ensures that all critical areas of a web application are thoroughly reviewed for security and functionality.