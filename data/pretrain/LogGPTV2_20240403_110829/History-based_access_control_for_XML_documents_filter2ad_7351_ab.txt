### Chapter 1: Introduction

In this chapter, we will provide a motivation for access control in general and history-based access control in particular. Additionally, we will outline the structure of this thesis.

#### 1.1 Motivation

In recent years, there has been a significant shift from paper documents to electronic documents. While electronic documents offer several advantages, such as space-saving storage, faster electronic transfer, and the ability to perform electronic searches, they also introduce new risks. One such risk is that electronic documents can be more easily stolen. For example, a hacker can steal electronic documents remotely without physically entering the building where the computer storing the documents is located. According to studies by the FBI/CSI [GLLR05, GLLR06], unauthorized access and information theft are responsible for a major portion of the damages caused by computer crime. Furthermore, electronic documents can be more easily destroyed; a single command can delete an entire document. It is also much more challenging to control the propagation of information contained in electronic documents, as they can be copied very efficiently compared to paper documents. As a result, criminals exploit these new opportunities to steal digital information.

Figure 1.1 shows the financial losses associated with various types of computer crime incidents, as reported in [GLLR06]. The second largest loss is attributed to unauthorized access to information, highlighting the high demand for access control mechanisms. These mechanisms restrict access to authorized individuals, defining who is allowed or denied access to specific objects. The fourth largest loss is due to the theft of proprietary information. Combined, these two types of losses exceed the amount of loss caused by virus contamination. This underscores the importance of access control. Moreover, Figure 1.1 indicates that a relatively small amount of loss is caused by outsiders penetrating the system, suggesting that protection mechanisms should focus on insider threats, which are authorized users of the system.

**Figure 1.1: Loss in dollar for different types of incidents (source [GLLR06])**

Access control mechanisms were introduced to reduce the risks of information theft and accidental deletion. Various solutions have been developed to provide access control for different types of data storage. Access control systems must be designed differently for different data storage methods because these methods can vary significantly in structure and semantics. For example, in XML documents, it is not useful to grant access to a node without granting access to its parent node, as nodes in an XML document have a parent-child relationship and form a semantic unit. In contrast, granting access to a subdirectory without the parent directory is acceptable in file systems. Similarly, tables in a relational database have different semantics than XML documents and files in a file system. Different data representations may also require different levels of granularity. For instance, a system storing files of different formats may define access at the file level, while a system storing files of a specific type with known internal structures may require defining access to parts of these files individually.

Up until recently, many different data formats and methods of storing data existed. Most applications had their own data format, and interoperability between systems with different data formats was limited. Some systems stored data in databases, while others used files organized in specific directory structures. Data exchange required converting between formats, which could be particularly challenging if the formats were highly dependent on the properties of the processing computer, such as byte order. Additionally, some formats were difficult to extend, leading to issues like the Y2K problem, where dates were stored using only two decimal digits.

As a result, the Extensible Markup Language (XML) [Con04] was introduced in 1998. XML offers several advantages over other data representations, such as binary formats. It is both human-readable and machine-readable, supports the storage of Unicode text, and can represent common data structures like lists and trees.

Although much work has been done on access control for file systems and relational databases, defining access for XML documents presents unique challenges [FM04]. The structure of XML documents is not always known in advance, and elements in XML documents are more dependent on their context than files in a file system or records in a database. Therefore, we focus on access control for XML documents in this thesis.

Previous methods for access control defined access for each object individually and required manual maintenance of lists of allowed and denied objects. However, this approach is inefficient and error-prone, and it does not allow for the implementation of a central access control strategy in an automatic and systematic way. Instead, we need an approach where objects are described by their properties, and access control definitions are derived from rules that use these properties. Only the set of rules needs to be maintained, and it only needs to be updated when the overall access control strategy changes. This rule-based method is required in many business scenarios due to its security benefits and lower maintenance effort.

In these scenarios, company-internal rules define how access should be granted. For example, a set of documents to which access should be denied can be defined by a set of rules that specify the corresponding documents using conditions on certain properties. We refer to these as access control rules. When new documents are created or existing documents are changed, the access control rules are re-evaluated, and the resulting set of documents and their corresponding permissions is updated. Thus, instead of manually maintaining access control lists, access control rules can be used to automatically define access based on conditions about certain properties of the objects.

Models for access control for XML documents differ in their expressiveness for defining the conditions used in access control rules. The expressiveness of these models directly impacts both usability and security. If a model lacks the expressiveness to express a required condition for granting or denying access, an alternative condition must be chosen. There are three types of alternative conditions:

1. **Over-inclusive Condition**: An expressible condition that specifies a set of objects that is too large and includes the intended set. Denying access to these objects limits usability, while allowing access results in a security problem.
2. **Partially Overlapping Condition**: An expressible condition that both misses some objects that should be included and selects additional objects that should not be included. This results in a set that overlaps with the intended set, limiting both security and usability.
3. **Under-inclusive Condition**: An expressible condition that specifies a set that is a subset of the intended set. Allowing access to these objects limits security, while denying access limits usability.

Thus, the expressiveness of the model for defining access control rules is crucial, but it depends on the specific requirements of the scenario. There is no absolute measure of expressiveness; it is sufficient if the model can meet the requirements of a specific scenario.

In the previous discussion, we focused on specifying objects in access control rules. However, the concept of defining objects by rules can also be applied to subjects. Since there are typically more objects than subjects in a system, and to reduce complexity, we focus on specifying objects in this thesis. Nevertheless, approaches that focus on specifying subjects can be combined with our approach, as these two aspects are independent.

The question remains: what properties should be used in access control rules?

**Figure 1.2: Alternative sets when the desired set cannot be specified**

- **All objects of the system**
- **Intended set of objects**
- **A too large set of objects**
- **A too small set of objects**
- **Overlapping set of objects**

This figure illustrates the resulting sets of objects depending on the chosen alternative condition.