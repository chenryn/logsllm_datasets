Figure 3: HTML outputs obtained by executing diﬀerent paths in
the running example. TOENCODE denotes the untrusted string in the
output.
tization to the output sinks, i.e., to the writer.Write call in
TagControl.RenderControl. There are two problems with
doing so, which the developer is burdened to identify man-
ually to get the sanitization right. First, the execution
paths through basic-block B3 embed the untrusted data
in a  block context, where paths through basic-
block B4 place it in a HTML tag context. As a result, any
sanitizer picked cannot be consistent for both such paths.
Second, even if the ﬁrst concern did not exist, sanitizing
the stc.Content variable at the output point is not correct.
The stc.Content is composed of trusted substrings as well
as untrusted data — if the entire string is sanitized, the san-
itizer could change programmer-supplied constant strings
in a way that breaks the intended structure of the output
HTML. For example, if the basic-block B1 executes, the un-
trusted data would be embedded in a JavaScript number
context( javascript: OnNav() explicitly by the program-
mer. If we applied HtmlAttribEncode to the stc.Content
the javascript: would be eliminated breaking the applica-
tion’s intended behavior.
Failure of input sanitization: Moving sanitization checks
to earlier points in the code, say at the input interfaces,
is not a panacea either. The readers can verify that
moving all sanitization to a code locations earlier in the
dataﬂow graph continues to suﬀer from path-sensitivity is-
sues.
Sanitizing in basic-blocks B1 and B2 is not suf-
ﬁcient, because additional contexts are introduced when
blocks B3 and B4 are executed. Sanitization locations mid-
way in the dataﬂow chain, such the concatenation in func-
tion AnchorLink.SetAttribRender, are also problematic be-
cause depending on whether basic-block B1 executes or B2
executes, the this.AttribMap["href"] variable may have
trusted content or not.
2.3 Why is Consistency Hard?
Expressive languages, such as those of the .NET platform,
permit the use of string operations to construct HTML out-
put as strings with trusted code intermixed with untrusted
data. Plus, these rich programming languages allow de-
velopers to write complex dataﬂow and control ﬂow logic.
We summarize the following observations that exist in large
legacy applications authored on such rich programming en-
vironments:
• String outputs: String outputs contain trusted con-
stant code fragments mixed with untrusted data.
• Nested contexts: Untrusted data is often embedded
in nested contexts.
• Intersecting data-ﬂow paths: Data variables are
used in conﬂicting or mismatched contexts along two
or more intersecting data-ﬂow paths.
• Custom Output Controls: Frameworks such as
.NET encourage reusing output rendering code by pro-
viding built-in “controls”, which are classes that render
untrusted inputs in HTML codes. Large applications
extensively deﬁne custom controls, perhaps because
they ﬁnd the built-in controls insuﬃcient. The running
example is typical of such real-world applications — it
deﬁnes its own custom controls, DynamicLink, to ren-
der user-speciﬁed links via JavaScript.
In this paper, we empirically analyze the extent to which
these inconsistency errors arise in practical real-world code.
In security-conscious applications, such as the ones we study,
security audits are routine and use of lint tools can enforce
simple discipline. In particular, notice that running exam-
ple code is careful to restrict the browser context in which
data is allowed to be embedded. For instance, it rigorously
appends quotes to each attribute value, as recommended by
security guidelines [27].
that
state-of-the-art
We point out
static analysis
tools which scale to hundred-thousand LOC applications,
presently are fairly limited. Most existing tools detect data-
ﬂow paths with sanitizers missing altogether. This class of
errors is detected by several static or dynamic analysis tools
(such as CAT.NET [22] or Fortify [9]).
In this paper, we
focus instead on the errors where sanitization is present but
is inconsistent.
3. SCRIPTGARD APPROACH
ScriptGard employs a dynamic analysis approach to de-
tecting and auto-correcting context-inconsistency errors in
sanitization. At a high-level, the overall architecture for
ScriptGard is shown in Figure 4. ScriptGard has two
main components: (a) a training or analysis phase, and (b)
a runtime auto-correction component. In the analysis step,
ScriptGard traces the dynamic execution of the applica-
tion on test inputs. By tracking the ﬂow of trusted values,
ScriptGard can identify all untrusted data embedded in
the application’s output. Given a trace of an application’s
execution, ScriptGard is capable of mapping the trace to
a static program path. ScriptGard is able to determine
the correct sequence of sanitizers that should be applied on
this program path, by parsing the application’s output.
The results of our analysis phase are cached in a saniti-
zation cache, which records all execution paths that were
seen to have context-inconsistency sanitization errors. This
cache serves as a basis for runtime auto-correction of the
application during deployed operation. Our intuition is that
context-inconsistency arises in a relatively small fraction of
the application’s code paths. ScriptGard’s architecture
repairs the placement of sanitizers only on these execution
paths by using a light-weight instrumentation. The auto-
correction component deploys a low-overhead path-detection
604Figure 4: ScriptGard architecture.
technique that detects when these problematic paths are ex-
ecuted at runtime and applies the correct sanitization to
untrusted values. The primary motivation for this archi-
tecture is to enable separation of expensive analysis to be
performed prior to deployment, leaving only low-overhead
components enabled at runtime. Another key feature of our
auto-correction component is that it requires no updates or
changes to the application code, thereby avoiding a long
develop-review-patch development cycle.
Requirements: ScriptGard requires a map between
browser contexts and sanitizer functions appropriate for
those contexts. In practice this correspondence is speciﬁed
by security architects or other experts and can be done once
and for all.
Figure 7 shows the example sanitization speciﬁcation
for the running example as well as the applications we
study. The sanitizer SimpleHTMLFormatting transforms
the input such that its output can only contain certain
permitted HTML tags such as ,  and so on, with
the goal of preventing a browser from executing any Java-
Script from the resulting string. In contrast, the sanitizer
EcmaScriptStringEncode takes JavaScript literals and con-
verts them to Unicode. Such conversion is necessary because
the JavaScript parser converts Unicode to some other repre-
sentation for string data. A similar function UrlPathEncode
performs percent-encoding. This percent encoding is re-
quired because the URL parser will decode URLs on entry
to the parser.
Reasoning about the localized correctness and complete-
ness properties of the context-sanitizer mapping is an inde-
pendent problem of interest; techniques for such correctness
checking are an area of active research [2, 15, 17].
In this
work, we assume the functional completeness and correct-
ness for the speciﬁcations.
3.1 Training Phase
ScriptGard employs a dynamic analysis which treats
each executed path as a sequence of traces. Each trace is
conceptually a sequence of dataﬂow computation operations
that end in a write to the HTTP stream or an output sink.
As we highlighted in Section 2, we must consider traces be-
cause sanitizer placement is path-sensitive. ScriptGard’s
dynamic analysis checks if the sanitization applied on any
untrusted trace is correct. For each untrusted trace observed
during program execution, ScriptGard ﬁrst determines a
mapping for each program trace (cid:126)t to a sequence of sanitizer
functions, f1, f2, . . . , fk, to apply, and second the portion of
the output string that should be sanitized.
We call the ﬁrst step context inference. The second step is
achieved by a technique called positive taint-tracking. If the
sequence of sanitizers applied on a trace does not match the
inferred sequence, ScriptGard discovers a violating path
and it adds the corrected sanitizer sequence for this path to
the sanitization cache.
Positive Tainting: We have discussed untrusted execution
traces in the abstract, but we have not talked about how
ScriptGard determines which traces are untrusted and,
therefore, need to be sanitized. Exhaustively identifying all
the sources of untrusted data can be challenging [19]. Re-
cent work has shown that failure to identify non-web related
channels, such as data read from the ﬁle system, results in
cross-channel scripting attacks [5].
Instead of risking an incomplete speciﬁcation, which
would miss potential vulnerabilities, ScriptGard takes a
conservative approach to identifying untrusted data: it em-
ploys positive tainting, which is a modiﬁcation of traditional
(or negative tainting) used in several previous systems [12,
18, 26, 31, 35, 36].
Instead of tracking untrusted (negative)
data as it propagates in the program, we track all safe data.
Positive tainting is conservative because if input speciﬁca-
tions are incomplete, unknown sources of data are treated
as unsafe by default. We describe details of these two steps
in Section 5.
3.2 Runtime Auto-Correction
From the training phase, ScriptGard builds a sanitiza-
tion cache, which is a map between code paths and the cor-
rect sequence of sanitizers to apply for the browser context
reached by that code path. Then at runtime, ScriptGard
detects which path is actually executed by the program. If
the path has been seen in the training phase, then Script-
Gard can look up and apply the correct sanitizer sequence
from the cache, obviating the need for the full taint ﬂow
instrumentation.
If the path has not been seen in the training phase, then
the owner of the web site has a policy choice. One choice is
Analysis and training phaseRuntime auto-correctionInstrumented server-side DLLsPreferential path profilingSanitizer correctionCode instrumentationBrowser context inferenceSanitization cacheInconsistently sanitized test casesServer code w/lightweight instrumentationHTTP requestsHTTP requestsHTTP requestsServer-side code605real browser has a great deal of implementation issues and
side eﬀects to grapple with, but these are out scope of the
problems we consider here.
More precisely, we treat the browser as a collection of
parsers for diﬀerent HTML standard-supported languages.
Figure 5 shows the sub-grammars corresponding to the
HTML language, JavaScript language, and the languages
for web addresses and inline style attributes.
Because inconsistent application behavior may depend on
context that are more ﬁne-grained that regular HTML or
JavaScript parsing, we can further divide each sub-grammar
into partitions. For instance, the ﬁgure shows the Java-
Script grammar further subdivided into the string literal
sub-grammar, JSON sub-grammar, statement sub-grammar
and the number sub-grammar. Formally, we model the
browser as a composition of multiple sub-grammars.
Deﬁnition 1. Let G1, G2, ...Gn be n sub-grammars, where
each context-free grammar Gi = (Vi, Σi, Si, Pi) is a quadru-
ple consisting of a set of non-terminals Vi, terminals Σi ,
start symbol Si and productions Pi.
Let T be a set of grammar cross-grammar transition sym-
bols and the grammar transition productions PT , be a set
of productions of the form A → Ti or Ti → B, such that
A ∈ Vi, B ∈ Vj (i (cid:54)= j) and Ti ∈ T .
We deﬁne a web browser as a grammar G = {V, Σ,S, P},
with non-terminals V = V1 ∪ V2... ∪ Vn, terminals Σ = ∪Σi,
start symbol S and a set of productions P = PT ∪ P1 ∪
P2...Pn.
Conceptually, parsers for various languages are invoked in
stages. After each sub-parser invocation, if a portion of the
input HTML document is recognized to belong to another
sub-language, that portion of the input is sent to the appro-
priate sub-language parser in the next stage. As a result, any
portion of the input HTML document may be recognized
by one or more sub-grammars. Transitions from one sub-
grammar to another are restricted through productions in-
volving special transition symbols deﬁned above as T , which
is key for our formalization of context. In a real web browser,
each transition from one sub-grammar to another may be
accompanied by a one or more transduction steps of the
recognized input.
Example 2. For instance, data recognized as a JavaScript
string is subject to Unicode decoding before being passed
to the AST. In addition, HTML 5-compliant browsers sub-
ject data recognized as a URI to percent-encoding of certain
characters before it is sent to the URI parser [8].
This form of encoding can be modeled using additional
rules in either of the sub-grammars. While restricting the
browser formalism to a context-free grammar might elide
some of the real-world complexities, we ﬁnd this to be a
convenient way for deﬁning the notion of context, which
appears to match the reality quite well.
Browser Parsing Contexts: We formally deﬁne the no-
tion of a browser parsing context here, with reference to the
grammar G. Intuitively, a context reﬂects the state of the
browser at a given point reading a particular piece of input
HTML. Each step in the derivation, denoted by ⇒ applies
a production rule and yields a “sentential form”, i.e., a se-
quence consisting of non-terminals and terminals. We model
the parsing context as a sequence of transitions made by the
parser between the sub-grammars in G, only allowing the
Figure 5: An abstract model of an HTML 5-compliant Web browser.
Gray boxes represent various parsers for the browser sub-grammars.
Black boxes are the major browser execution components.
to drop the request, then immediately re-execute the appli-
cation with all ScriptGard checks enabled. This is secure
but adds signﬁcant user latency. The other choice is to al-
low the request to complete, but then log the path taken
for later analysis. This is not secure but preserves the per-
formance of the application. We leave this choice up to the
application administrator.
The common overhead for runtime in both policy choices
comes from the cost to detect the path executed by the ap-
plication. We leverage a technique called preferential path
proﬁling, as ﬁrst used in the Holmes statistical debugging
project [7]. Preferential path proﬁling is a technique for
adding lightweight instrumentation to a program to detect
if the program executes one of a set of “preferred” paths
known in advance of deployment. The technique uses an
optimized way of labeling code blocks and updating state
during execution to reduce overhead. We report overhead
on our application in Section 5.
4. FORMALIZATION
In this section, we formalize our approach and the secu-
rity properties we aim to achieve. We start with an abstract
model of the browser. This allows us to deﬁne precisely what
we mean by a browser parsing context. The notion of a con-
text is closely tied to sanitizers that are used, as discussed
previously in Section 2. For example, HtmlAttributeEncode
will properly escape strings in the HTML attribute con-
text, but it is inconsistent to use in other contexts. That
in turn allows us to precisely characterize context-sanitizer
mismatches. We then deﬁne what it means for a server-side
program to prevent all such context-sanitizer mismatches.
Finally, we show that our strategy in ScriptGard in fact
transforms programs into ones that ensure dynamically that
no context-sanitizer mismatches are possible.
4.1 Browser Model: Deﬁnitions
We begin with a browser model as illustrated in Figure 5.
For our purposes, we model a web browser as a parser con-
sisting of sub-parsers for several languages. Of course, a
JavaScript engineBrowser bindingURL attributesstyle attributesASTevent loopdispatchJSON.parsecreateElement, setAttribute, and other DOM blockurl()-moz-binding, expressionURL requestsJavaScript statement parserJavaScript string parserJSON parserJavaScript number parserHTML parserURI parserCSS style attribute parserXMLHttpRequest606derivations that denote transition from one sub-grammar to
another.
Deﬁnition 2. Let derivation D : S ⇒∗ γ correspond to
the sequence (P1, P2, ...Pk) of production rule applications
to derive a sentential form γ from the start symbol S.
A browser context CD induced by a derivation D is de-
ﬁned as a projection (P1, P2, . . . Pk) →↓ (P (cid:48)
2 . . . P (cid:48)
l ), that
preserves only the productions P (cid:48)
i in the set of grammar tran-
sitions PT .
1, P (cid:48)
Our grammars are deterministic, so the notion of induc-
ing a parsing context is well-deﬁned. The browser enters a
particular context as a result of processing a portion of the
input.
Deﬁnition 3. We say that an input I induces browser con-
text C, if
• D : S(I) ⇒∗ γ (on input I, S reduces to γ following
derivation D), and
• D induces context C.
Sanitizers: A complex modern web application typically
has a variety of both server- and client-side sanitizers. We
make the simplifying assumption that sanitizers are pure,
i.e.
lacking side-eﬀects. Our review of dozens of real-life
sanitizers conﬁrms this assumption. We model sanitizers as
abstract functions on strings. Formally,
Deﬁnition 4. A sanitizer is a function f : string (cid:55)→ string.
Deﬁnition 5. A context-sanitizer map is
ψ(C) = (cid:126)f
where C is a context and (cid:126)f is a sequence of sanitizers.
The goal of sanitization is typically to remove special char-
acters that would lead to a sub-grammar transition. For ex-
ample, we often do not want a transition from the HTML
parsing context to the JavaScript parsing context, which
would be enabled by inserting a  block in the mid-
dle of otherwise non-oﬀending HTML. Of course, this is but
one of many ways that the parser can transition to a diﬀer-
ent context. Next, we deﬁne the correctness of a sequence
of sanitizers. The intuition is that is after sanitization, the
state of parsing is conﬁned to a single context.
Deﬁnition 6. Let input I consist of the parsed and non-
parsed portion: I = [IP ◦INP ]. Let input IP induce browser
context C such that ψ(C) = (cid:126)f . Then we say that the
context-sanitizer map is correct if when (cid:126)f (INP ) is reduced,
the grammar never leaves context C.
In other words, applying the correct sequence of sanitiz-
ers “locks” a string in the current context. In particular, a
string locked in the HTML context cannot cause the browser
to transition to the JavaScript context, leading to a code in-
jection.
4.2 Server-side Program: Deﬁnitions
So far, our discussion has focused on parsing HTML
strings within the browser regardless of their source. Our
goal is to produce HTML on the server that will always
have consistent sanitization.
Server-side programs take