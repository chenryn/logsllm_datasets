E. Community Summarization
For each community, DEPCOMM generates a summary that
consists of three parts: the master process, the time span, and
the top-ranked InfoPaths, as shown in Fig. 2). The master
process represents the root process for the system activities
in the community. The time span is computed using the
earliest start time and the latest end time among all the events
in the community (i.e., c.st = minei∈c{ei.st} and c.et =
maxei∈c{ei.et}), which provides the timing information for
tracing certain activities. InfoPaths indicate the information
ﬂows from the inputs to the outputs in the community,
representing the major activities in the community.
InfoPaths Extraction. Given a process-centric community,
DEPCOMM ﬁrst
identiﬁes its input and output nodes. An
input node represents the incoming information ﬂow for a
community, which are the target node of an inter-community
edge (e.g., leak and ../analysis.txt of C3 in Fig. 1) and
network nodes with outgoing edges (e.g., xxx->xxx of C1
in Fig. 1, representing the external IP which a community
receives ﬁles from). In addition, for the communities without
incoming edges (e.g., C5 in Fig. 1), we select the master
process as the input node. An output node represents the
outgoing information ﬂow of a community, which are the
source node of an inter-community edge (e.g., leak of C2
in Fig. 1), network nodes with incoming edges (e.g., xxx->
xxx of C3 in Fig. 1, representing the external IP which a
community sends ﬁles to), and POI nodes. Then, for each pair
of input and output nodes, DEPCOMM uses Depth First Search
(DFS) algorithm to ﬁnd a longest path without duplicate nodes
as an InfoPath. Such a path generally covers more activity
information than the shorter ones.
InfoPaths Prioritization. A community often contains mul-
tiple inputs and outputs, and thus has multiple InfoPaths.
DEPCOMM priorities the InfoPaths based on their likelihoods
to represent major activities (e.g., attack behaviors). The
priority score of an InfoPath Pk : v0→v1→··· →v|Pk|−1 is
computed based on the following four key features:
(a) POI Event (fpoi). An InfoPath that contains the POI event
is directly related to the attack. Thus, fpoi is 1 if an InfoPath
contains the POI event, and is 0 otherwise.
(b) Input/Output Type (fiot). As processes drive the attack
execution, an security analyst is more likely to ﬁnd another
attack stage through process nodes. For example, in Fig. 1,
tracking the attack from C3 to C2 can be done through the
input process node leak but not through the input ﬁle node
../analysis.txt. Thus, fiot gives an InfoPath whose input or
output node is a process a higher priority:
fiot =
1
2
(δ(v0) + δ(v|Pk|−1))
(1)
where δ(vi) is 1 if vi is a process and 0 otherwise.
(c) Event Uniqueness (funi). File events that appear in fewer
communities are more likely to represent the major activities
in the community, such as the event vim write ../analysis.txt
that occurs only in C4, while ﬁle events that are frequently
observed in different communities often represent irrelevant
chronicle tasks running in the background. Based on this
observation, we design the feature funi to measure the unique-
ness of ﬁle events:
funi =
1
|Evt(Pk)|
(cid:4)
ei∈Pk,ei∈Evtf
1
|Comm(ei)|
(2)
where |Evt(Pk)| denotes the number of ﬁle events in Pk,
ei ∈ Evtf denotes ﬁle events, and |Comm(ei)| denotes the
number of communities in which ei occurs. funi has a larger
value when |Comm(ei)| is smaller.
(d) Time Span (fspan). Intuitively, an InfoPath whose time
span is similar to the time span of the community is more
likely to represent the major activities in the community. We
design the feature fspan to model this intuition:
fspan =
e(v|Pk|−2, v|Pk|−1).et − e(v0, v1).st
c.et − c.st
(3)
where the numerator denotes the time span of the InfoPath,
and the denominator denotes the time span of the community.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
548
Attack Cases
TABLE III: Statistics of the attacks’ dependency graphs
|C|
Dep. Graph
|V |
|E|
24,470
527
4,675
369
387,086
5,810
24,094
1,038
10,917
557
22,358
275,917
7,724 2,174,649
2,311 1,007,062
7,645 1,598,642
9,533 1,900,715
37,109
3,302
3,501
37,468
29,987
2,745
2,945
133,890
Pre-processed Attack
Dep. Graph
|V |
|E|
|E|
|V |
65
476
201
42
9
351
160
9
94
1,613
787
63
35
620
203
23
39
82
43
77
518
1,424
79 130
6
5
6,483
2,545
17
12
815 18,858
18
14
5,210 34,047
18
9
7,056 38,419
15
12
750
819
13
17
6
5
559
1,247
16
23
A1: Email Penetration
A2: Compile Crash
A3: Files Tamper
A4: Data Exﬁltration
A5: Password Crack
A6: VPN Filter
D1: Phishing Email (C.S.)
D2: Phishing Email (F.D.)
D3: Firefox Backdoor (F.D.)
D4: Browser Extension (F.D.)
D5: Browser Extension (Theia)
D6: Firefox Backdoor (Theia)
D7: Phishing Email (Theia)
D8: Pine Backdoor (Trace)
Average
8
17
16
10
4
12
48
20
43
45
11
13
8
7
5,026.1 546,191.5 1,302.1 7,553.4 24.3 38.3 18.7
Based on these features, we compute the priority score of
Pk by giving equal weights to each feature. According to the
assigned priority scores, we sort the InfoPaths and select the
top-n paths as the summary, where security analysts have the
ﬂexibility to choose the value of n.
172
205
123
192
V. EVALUATION
DEPCOMM includes ∼15k lines of python code and is
deployed on a server with two Intel Xeon E5-2630 v3 2.4GHz
CPUs (32 processors) and 128GB memory. The evaluation
dataset includes 6 attacks performed in our test environment
deployed with system monitoring tools and 8 attacks in the
DARPA TC (Transparent Computing) dataset [40]. In the eval-
uations, we aim to answer the following research questions:
• RQ1: What is the overall effectiveness of DEPCOMM in
summarizing dependency graphs?
• RQ2: How does DEPCOMM cooperate with the automatic
investigation technique HOLMES [32]?
• RQ3: How effective is DEPCOMM in community detection,
compared with other state-of-the-art approaches?
• RQ4: How effective is DEPCOMM in community compres-
sion?
• RQ5: How effective is DEPCOMM in generating community
summaries using top-ranked InfoPaths?
• RQ6: What is the turnaround performance of DEPCOMM
in summarizing dependency graphs?
A. Evaluation Setup
Attack Dataset: We adopt Sysdig [69] to collect the attack
dataset from 6 Linux hosts that have 10 active users. Routine
system tasks on these hosts include web browsing, text editing,
code development, and some other services (e.g., databases).
On these hosts, we performed 6 multi-step attacks based on
the known exploits [12, 13, 26, 70] and Kill Chain [71]. The
collected dataset contains ∼ 100 million events for three days.
Below are the details of these attacks:
• A1: Penetration into Email Server. An attacker inside a
corporation inserts malicious code into a normal software
and uploads this modiﬁed software to the corporation’s
resource server. One employee downloads this modiﬁed
software and executes it, and the malicious code creates a
connection to the attacker’s host that allows the attackers to
easily hijack emails.
|
C
|
y
t
i
n
u
u
m
m
o
C
f
o
r
e
b
m
u
n
N
e
z
i
S
y
t
t
i
n
u
m
m
o
o
C
f
o
n
o
i
t
t
u
b
i
r
t
s
i
D
D
60
50
40
30
20
10
16
16
10
8
4
48
41
42
Communities without 
attack-related events
Communities with 
attack-related events
19
11
13
14
9
7
A1 A2 A3 A4 A5 A6 D1 D2 D3 D4 D5 D6 D7 D8
0
Fig. 7: Communities detected by DEPCOMM
100
90
80
80
70
60
50
40
30
30
20
10
0
A1 A2 A3 A4 A5 A6 D1 D2 D3 D4 D5 D6 D7 D8
|
V
|
Fig. 8: Community sizes
• A2: Crashing Compiler. An insider attacker uploads a
malicious C code to the internal resource server. When
an employee downloads and compiles the source code, the
malicious code causes the compiler to crash, and at last the
compiler generates an incorrect executable ﬁle.
• A3: Tampering Sensitive Files. During a three-day period,
an insider attacker logs into an employee’s host using
the stolen password several times, and then collects and
tampers some sensitive ﬁles. Finally, the attacker sends these
sensitive ﬁles back by email.
• A4: Data Exﬁltration. An attacker penetrates into a victim
host via exploiting the Shellshock vulnerability [72] to set
up a backdoor, and exﬂitrate sensitive data by installing
malware into the host. This attack is shown in Section II-A.
• A5: Cracking Password. After the shellshock penetration,
the attacker downloads a password cracker payload from the
C&C server, and then obtains the root’s password by running
the cracker. The attacker then penetrates to other hosts inside
the same network using the root privilege obtained via the
cracked passwords.
• A6: VPN Filter To launch a more persistent and stealthy
attack, the attacker uses a more sophisticated multi-stage
VPN Filter malware [73] After the shellshock penetration,
the attacker downloads the Stage 1 executable from the
C&C server. When triggered, the Stage 1 executable will
download the Stage 2 executable, which will gather sensitive
documents and establish a stealthy connection to the C&C
server for data exﬁltration.
DARPA TC Dataset: DARPA TC dataset [40] is an effort