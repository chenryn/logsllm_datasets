# 技术分享：利用Radare2分析Android恶意软件

## 译文声明
本文为翻译文章，原文来源于nowsecure。
原文链接：[请提供原文链接]
译文仅供参考，具体内容及含义以原文为准。

**翻译者：shan66**
**稿费：200RMB（欢迎投稿！）**
**投稿方式：发送邮件至linwei#360.cn 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿**

### 前言
本文将以Triada木马为例，详细介绍如何使用Radare2分析Android恶意软件。通过阅读本文，您将了解如何反汇编Android二进制文件、识别可疑或恶意应用程序的行为，以及Radare2在分析Android恶意软件方面的优缺点。

### 识别可疑的Android应用
Android恶意软件样本并不罕见，但有趣的样本却不多见。为此，我在Koodous平台上搜索了关键词“free download”，找到了一个名为“Free YouTube Video Download”的应用程序。该应用引起了我的怀疑，因为其截图和图标都与其他应用不同。我下载了该程序并开始了分析。

### 目标：判断可疑Android应用是否为恶意软件
评估可疑文件时，首先应查看其他人是否已对其进行过研究。可以使用VirusTotal等病毒扫描工具来检查文件。我上传了该样本，VirusTotal报告检测率为34/55，并将其标识为Triada Android木马。虽然反病毒技术有时会出现误判，但我们仍需进一步验证。

为了获取更多信息，我使用YARA规则对该样本进行了检查。尽管该样本于2016年3月被发现，但至今尚无公开的技术分析报告。卡巴斯基实验室曾将Triada列为最复杂的Android恶意软件之一。为进一步收集样本，我在Koodous上继续搜索，找到了另外三个匹配的.apk文件，但不能确定它们是否属于同一变种系列。

### 探索Android恶意软件的功能
在分析可疑Android应用时，需要考虑以下因素：
- **混淆技术**：不仅用于保护知识产权，也可能隐藏恶意代码。
- **过多权限**：可能是开发者疏忽，也可能是攻击者的故意行为。
- **设备上的奇怪文件**：可能是垃圾文件、二进制资源或加密的有效载荷。
- **模拟器检测**：可能需要对应用进行修补或使用实际设备进行分析。
- **仅限ARM使用的库**：使应用无法在x86模拟器上运行。
- **指向系统二进制文件的字符串**：可能是合法的root权限检测机制，也可能是提权利用代码的一部分。
- **二进制文件中的硬编码IP**：可能是测试服务器IP，也可能是命令和控制服务器的IP。
- **指向APK的链接**：可能是测试目的链接，也可能是第二阶段有效载荷的链接。
- **访问SMS功能**：可用于双因素认证，但也可能用于恶意目的，如未经授权的订阅支付服务或窃取银行验证码。
- **篡改过的合法应用程序**：恶意用户可能会修改合法应用以隐藏恶意代码。
- **应用程序来源的可靠性**：来自未知市场的应用可能存在安全风险。

如果应用来源可疑，建议信任官方市场版本并深入分析可疑应用。手动分析.apk文件有助于了解应用意图和功能。在本例中，我发现该样本生成了一个JSON文件，枚举所有具有NFC HCE权限的应用，并动态加载两个加密的blob，引用另一个受APK Protect保护的.apk。这些代码片段需要通过动态分析提取，我将在后续文章中介绍。

### 详细分析步骤
1. **提取恶意软件信息**：包括权限列表、二进制文件类型、函数名称、导入符号、类和二进制文件中的字符串等。
2. **静态分析**：针对可疑二进制代码进行静态分析，了解其对第一步识别出的资源的操作。
3. **动态分析**：在基于QEMU的Android环境中仿真样本，跟踪程序执行并识别系统事件和行为。

由于大多数移动恶意软件无法在非ARM或模拟环境中运行，我直接在物理硬件设备上进行分析，确保固件干净。

### AndroidManifest.xml
尽管扩展名为.xml，但AndroidManifest.xml是一种二进制XML格式。可以使用Ruby脚本Axml2xml.rb（或通过r2pm -i axml2xml安装）将其转换为可读格式。还可以使用Radare2中的rafind2程序提取感兴趣的字符串：

```sh
$ rafind2 -ZS android AndroidManifest.xml
$ rafind2 -ZS permissions AndroidManifest.xml
$ rafind2 -ZS intent AndroidManifest.xml
```

常见的恶意软件权限包括：
- `permission.CHANGE_WIFI_STATE`
- `permission.CHANGE_NETWORK_STATE`
- `permission.INSTALL_PACKAGES`
- `permission.INSTALL_SHORTCUT`
- `permission.SYSTEM_OVERLAY_WINDOW`
- `permission.ACCESS_DOWNLOAD_MANAGER`
- `permission.MOUNT_UNMOUNT_FILESYSTEMS`
- `permission.RECORD_AUDIO`
- `permission.RECEIVE_BOOT_COMPLETED`
- `permission.KILL_BACKGROUND_PROCESSES`
- `permission.ACCESS_MTK_MMHW`
- `permission.DISABLE_KEYGUARD`
- `permission.SYSTEM_ALERT_WINDOW`
- `permission.GET_TASKS`
- ...

### Classes.dex
此文件包含应用程序的Dalvik代码。Java代码被编译为Dalvik字节码并打包到DEX文件中。某些版本的Android直接从.dex文件执行代码，而其他版本则通过JIT技术将其转换为机器代码。现代Android版本通常会将大部分代码预编译为ART的AOT可执行代码。

使用Radare2从.dex文件中提取信息：

```sh
> icq # 枚举类名
> iiq # 导入（外部方法）
> ic # 枚举类及其方法
> izq # 列出程序中的所有字符串
```

比较manifest文件请求的权限与应用实际使用的权限。如果应用可以动态加载新代码，则需要动态分析才能了解其真正目的。检查classes.dex的导入信息，可以帮助我们了解应用使用的系统API：

```sh
$ rabin2 -qi classes.dex | grep -i -e sms -e bluetooth -e install -e PackageManager -e Datagram -e Telephony -e nfc
```

也可以使用dexdump查看主dex中的所有内容：

```sh
$ dexdump -d | grep ‘“android.’ | cut -d , -f 2- | sort -u
```

在Radare2中，可以使用`/r`命令查找对字符串或方法的引用，以确定谁在使用这些可疑字符串及其目的。

### 字符串过滤
为了过滤命令输出，可以在Radare2 shell中使用`~`操作符。`~`操作类似于UNIX的grep实用程序，但在内部运行，无需单独的系统进程。使用以下字符串过滤器，可以在classes.dex文件中找到一些有趣的内容：

```sh
/system /data /bin/su ...
http://
https://
.apk
%d.%d.%d.%d
Install
SMS
```

通过以上步骤，您可以更全面地分析Android恶意软件，并深入了解其行为和功能。