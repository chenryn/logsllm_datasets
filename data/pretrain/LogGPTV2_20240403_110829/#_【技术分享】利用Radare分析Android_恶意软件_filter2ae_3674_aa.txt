# 【技术分享】利用Radare分析Android 恶意软件
|
##### 译文声明
本文是翻译文章，文章来源：nowsecure
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**翻译：**[ **shan66**](http://bobao.360.cn/member/contribute?uid=2522399780)
**稿费：200RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿**
**前言**
本文将以Triada木马作为样本，详细介绍如何使用Radare分析Android恶意软件分析。通过阅读本文，您将了解如何使用Radare2反汇编Android二进制文件，如何识别可疑或恶意应用程序的行为，以及Radare2在分析Android恶意软件方面的优缺点。
**识别可疑的安卓应用**
Android恶意软件的样本并不少见，但我想要的，是那些有趣的样本。为此，我到Android恶意软件研究平台Koodous上面搜索了一下关键词“free
download”，并找到一个名为“Free Youtube Video
Download”的应用程序。该应用程序立刻引起了我的怀疑，因为它的截屏都是来自另一个应用程序，并且官方图标被换了。于是，我下载了该程序，开始我的分析之旅。
**目标：判断可疑Android应用是否为恶意软体**
在评估可疑文件的时候，最好首先了解一下其他人是否已经研究过这个文件，具体方法是使用病毒解决方案（如VirusTotal）来扫描这个文件。于是，我上传了这个样本，VirusTotal报告的检测率为34/55，并将其标识为Triada
Android木马。很明显，该应用程序已经被感染。
但是别忘了，反病毒技术有时也会出现误判，因为恶意软件的发展速度很快，经常把反病毒供应商的启发式或签名过滤技术甩在后面。
为了从反病毒引擎之外进一步收集更多信息，我又利用YARA规则对这个样本进行了检查，这里使用的是来自Koodous团队编写的Androguard
YARA模块。
虽然该样本是在2016年3月发现的，但是到目前为止，仍然没有公开可用的技术分析报告。当时，卡巴斯基实验室将Triada列为当前最先进的Android恶意软件，并将其与Windows恶意软件的复杂性进行了相应的比较。若要进一步了解该恶意软件所使用的感染技术，请参阅文章“Attack
on Zygote: a new twist in the evolution of mobile threats”。
由于我打算深入研究这个应用，所以在Koodous的搜索框中使用相同的YARA规则继续搜索更多的样本，并找到了另外三个与该规则相匹配的.apks。虽然我收集到了符合YARA规则的多个样本，但我不能确定它们是否属于同一系列的变体。
**探索Android恶意软件的功能**
在分析可疑的Android应用时，我们需要评估以下因素：
混淆技术：混淆不仅可以用于保护知识产权，同时还会被用于隐藏恶意代码。
过多的权限：如果该应用要求过多的权限，它可能只是开发者的无心之过，同时，也可能是攻击者为了不可告人的目的故意而为之。
设备上的奇怪文件：可能是垃圾文件、二进制资源或加密的有效荷载。
模拟器检测：需要对这个应用程序打补丁或使用实际设备进行分析。
仅限ARM使用的库：使得该应用程序无法在x86模拟器上运行。
指向系统二进制文件的字符串：这可能是合法的root权限检测机制，也可能是提权利用代码的一部分。
二进制文件中的硬编码的IP：这些可能是用于测试服务器的IP地址，只是开发人员忘记删除了；也可能是（僵尸网络）命令和控制服务器的IP地址。
指向APK的链接：开发人员可能忘记删除测试目的的这些链接，同时，这些链接也可能指向第二阶段的有效荷载。
访问SMS/短信功能：这可能是合法的，可用于双因素身份验证，同时，也可能用于恶意目的，例如未经授权的订阅付款服务或窃取银行付款的验证码等。
篡改过的合法应用程序：恶意用户会定期修改合法应用，以便在其中保存/隐藏恶意软件的有效荷载。
应用程序来源的可靠性：如果这个.apk来自其他Android市场或是未知的，那么你不知道该应用程序是否经过了相应的安全审查。
如果该应用程序的来源非常可疑，那么您应该信任来自官方市场（通常会记录其审核过程）的应用程序版本，同时，要对来源可疑的应用展开更深入的分析，以检查是否存在恶意的意图。同样，如果应用程序要求过多的权限，那就要提高警惕，避免安装它，并做更多的分析。我们不妨从手动分析.apk中的文件开始下手，这样能够帮助我们了解该应用程序的意图和功能。
当您分析恶意软件样本时，需要确定哪些代码是原始应用程序的一部分而不是恶意软件本身，哪些代码是保护程序、广告或跟踪系统，这将是一个非常大的挑战。通常在同一应用程序中会发现大量统计SDK，它们通常用于收集有关设备和用户行为的各种数据。此外，你还会发现许多在引导期间启动的各种服务，每次重新启动后都会启动它们。
在本例中，我发现该样本生成了一个JSON文件，它会枚举所有已经安装的、具有NFC的主机卡仿真（HCE）权限的应用程序。此外，该样本还会动态加载两个加密的blob，并引用具有APK
Protect保护的另一个.apk。要想提取这些代码片断需要进行动态分析，所以我计划在将来的文章中进行相应的介绍。
详尽的分析工作已经超出了本文的范围，不过我将给出完整的分析过程，读者可以以此作为起点，进行更深入分析。我将介绍的步骤包括：
1\. 提取有关恶意软件的详细信息，如权限列表、二进制文件类型、函数名称、导入的符号、类、二进制文件中包含的字符串等。
2\. 针对应用程序中的可疑二进制代码进行静态分析，以了解这些代码对第一步中识别出来的资源做了什么。
3\. 在基于QEMU的Android环境中对样本进行仿真，以跟踪程序的执行并识别系统事件和行为。
由于大多数移动恶意软件无法在非ARM或模拟环境上运行，因此我直接在物理硬件设备上分析该样本代码，这些设备的固件是重新刷新过的，所以非常干净。
**AndroidManifest.xml**
虽然扩展名为.xml，但AndroidManifest.xml不是人类可读的文本形式。它是一种仅用于Android的二进制XML格式，您可以使用Ruby脚本Axml2xml.rb（也可通过r2pm
-i axml2xml）将其转换为可读格式。
您还可以使用Radare中的rafind2程序从文件中提取感兴趣的字符串（请注意，这些字符串根本不工作）：
    $ rafind2 -ZS android AndroidManifest.xml
    $ rafind2 -ZS permissions AndroidManifest.xml
    $ rafind2 -ZS intent AndroidManifest.xml
恶意软件使用的一些常见权限包括：
    permission.CHANGE_WIFI_STATE
    permission.CHANGE_NETWORK_STATE
    permission.INSTALL_PACKAGES
    permission.INSTALL_SHORTCUT
    permission.SYSTEM_OVERLAY_WINDOW
    permission.ACCESS_DOWNLOAD_MANAGER
    permission.MOUNT_UNMOUNT_FILESYSTEMS
    permission.RECORD_AUDIO
    permission.RECEIVE_BOOT_COMPLETED
    permission.KILL_BACKGROUND_PROCESSES
    permission.ACCESS_MTK_MMHW
    permission.DISABLE_KEYGUARD
    permission.SYSTEM_ALERT_WINDOW/
    permission.GET_TASKS
    ...
**Classes.dex**
这个文件包含有该应用程序的Dalvik代码。所有应用程序的原始Java代码都转换为Dalvik并装配到DEX文件中，该文件可以在无堆栈的基于注册的虚拟机上运行。某些版本的Android将直接从.dex文件中模拟执行代码，另一些版本的Android将通过JIT技术将其转换为真正的机器代码，大多数现代版本的Android都会将大部分代码预编译为针对ART的AOT可执行代码。
您可以使用Radare2从.dex文件中提取信息，具体命令如下所示：
    > icq # enumerate classnames
    > iiq # imports (external methods)
    > ic # enumerate classes and their methods
    > izq # list all strings contained in the program
一个重要的提示是，请比较manifest文件所请求的权限和应用程序本身使用的权限之间的异同。在这种情况下，只要应用程序可以动态加载新代码，我们就无法了解其真正的目的，除非我们进行动态分析。
检查classes.dex的导入信息，可以帮助我们了解应用程序使用哪些系统API。
    $ rabin2 -qi classes.dex | grep -i -e sms -e bluetooth -e install -e PackageManager -e Datagram -e Telephony -e nfc
此外，我们也可以使用dexdump来查看主dex中所有内容：
    $ dexdump -d | grep ‘“android.’ | cut -d , -f 2- | sort -u
一旦通过dexdump完成了反汇编，你就可以使用自己喜欢的编辑器，甚至纯grep来查找串常量调用了。但在Radare2中，您还可以使用/
r命令查找对字符串或方法的引用，以确定谁在使用这些可疑字符串及其目的了。
**对字符串进行过滤**
为了过滤命令的输出，可以在Radare2的shell中使用~操作符。~操作类似于UNIX的grep实用程序，但它在内部运行，不需要任何单独的系统进程。
使用以下字符串过滤器，您可以在classes.dex文件中找到一些有趣的东西：
    /system /data /bin/su …
    http://
    https://
    .apk
    %d.%d.%d.%d
    Install
    SMS