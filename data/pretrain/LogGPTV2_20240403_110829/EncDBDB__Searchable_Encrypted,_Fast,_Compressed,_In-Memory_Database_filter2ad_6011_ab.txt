encoding is to split a column C = (C0, . . . , C|C|−1) into
two structures: a dictionary D and an attribute vector A. The
dictionary D = (D0, . . . , D|D|−1) is ﬁlled with all values
v ∈ C and every v has to be present in D at least once. The
index i of a dictionary entry Di is called its ValueID vid.
The attribute vector A = (A0, . . . , A|A|−1) is constructed by
replacing all values v ∈ C with one vid that corresponds to v.
As a result, A contains |A| = |C| ValueIDs. The index j of
an entry Aj is called its RecordID rid. un(C) denotes the set
of unique values in C, |un(C)| the number of unique values
in C, oc(v, C) the occurrence indices of a unique value v in
C, and |oc(v, C)| the number of occurrences of v in C. We
deﬁne the correctness of a column split as follows:
Def. 1 (Column Split Correctness): A split of column C
into a dictionary D and an attribute vector A is correct if i is
the ValueID stored in the attribute vector at position j and Di
equals Cj, i.e., ∀ j ∈ [0,|A| − 1] : (Aj = i ⇔ Di = Cj).
In Fig. 1, we present a dictionary encoding example based
on a ﬁrst name column (FName). For instance, Jessica is
inserted in the dictionary at the ValueID 1 and all positions
from the original column that contain Jessica are replaced by
this ValueID in the attribute vector (see RecordIDs 0, 2, and 3).
The set of unique values is un(C) = {Hans, Jessica, Archie}
and Archie occurs at the indices oc(Archie, C) = {1, 5}.
Column
RecordID
0
1
2
3
4
5
FName
Jessica 
Archie
Jessica 
Jessica 
Hans
Archie
Dictionary
Value
Hans
Jessica 
Archie
ValueID
0
1
2
Attribute Vector
ValueID
RecordID
1
0
2
1
1
2
1
3
04
2
5
Fig. 1: Dictionary encoding example.
Dictionary encoding reduces the storage space of a column
in many cases, because a ValueID of i Bits is sufﬁcient to
represent 2i different values in the attribute vector and the
(variable-length) values only have to be stored once in the
dictionary. The best compression rate is achieved if columns
contain few unique but many frequent values, because every
value has to be stored only once. The real-world data used for
our evaluation (see Section 6) and other studies [23] show that
this is a characteristic of many columns in data warehouses.
When using dictionary encoding, two steps are necessary for
a range search: a dictionary search followed by an attribute
vector search. The dictionary search checks for each v ∈ D
if it falls into range R and returns the matching ValueIDs
vid. The attribute vector search linearly scans (with multiple
threads) the attribute vector searching for all values in vid
and returns a list of matching RecordIDs rid.
B. Intel Software Guard Extensions (SGX)
Intel SGX is an instruction set extension that is available in
most current Intel processors, making it a widely available TEE.
It provides conﬁdentiality and integrity protection to a software
entity containing trusted code and data called enclave, even in
an untrusted environment. We introduce SGX’s features used
by EncDBDB and refer to the literature for more details [24],
[25], [26], [27], [28], [29].
Memory Isolation. SGX v2 dedicates 256 MB of the system’s
RAM for the so-called Processor Reserved Memory (PRM). All
code and data in the PRM are encrypted while residing outside
of the CPU, and decrypted and integrity checked when loaded
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
439
2 Remote Attestation + Provision 
DB
SGX-enabled Cloud Server 
Storage Management
D
D
D
6
Load
Dictionary
Enclave
6 Dictionary
Search
DB
Data Owner
1 Generate
DB
1 Prepare Data
1 Deploy Data
2 Provision  DB
Proxy
3
Query
9 Results
Application
Trusted
Untrusted
4 Send Query Query
D
8 Results
D
Query
Pipeline
Result
Renderer
4
7 RecordIDs
5 [.,.]
D
6 ValueIDs
Query Evaluation Engine
Attribute Vector Search
7
Fig. 2: Overview and process ﬂow of EncDBDB.
back into the CPU. All other software on the system cannot
access the PRM. The OS can swap out enclave pages and SGX
ensures integrity, conﬁdentiality and freshness of swapped-out
pages, but paging comes with a major performance overhead.
Every program using SGX consists of an enclave and an
untrusted part. The untrusted part is executed as an ordinary
process and the enclave memory is mapped into the virtual
memory of the untrusted host process. This mapping allows the
enclave to access the entire virtual memory of its host process,
while the host process can invoke the enclave only through a
well-deﬁned interface.
Attestation. SGX has a remote attestation feature, which allows
veriﬁcation of code integrity and authenticity on a remote
system. This is done by hashing (called measuring in SGX
terminology) the initial code and data loaded into the enclave.
The authenticity of the measurement, as well as the fact that the
measurement originates from a benign enclave, is ensured by
SGX’s attestation feature. The measurement can be provided
to an external party to prove the correct creation of an enclave.
Remote attestation also enables the establishment of a secure
channel between an external party and an enclave. This secure
channel can be used to deploy sensitive data into the enclave.
C. Authenticated Encryption
An authenticated encryption scheme AE is a symmetric-
key encryption scheme that is IND-CCA secure and unforge-
able [30], i.e., it protects the conﬁdentiality and integrity of
encrypted values at the same time. Note that IND-CCA security
implies that an attacker cannot differentiate ciphertexts, even
if the encrypted plaintexts are equal. AEEnc takes a secret key
SK and a plaintext value v as input and returns a ciphertext
c. AEDec takes SK and c as input and returns v iff v was
encrypted with AEEnc under the secret key SK. AES-128 in
GCM mode with a random initialization vector can be used as
an authenticated encryption implementation.
III. ENCDBDB DESIGN
EncDBDB is a concept for an encrypted, column-oriented,
dictionary-encoding–based, in-memory database. It offers nine
encrypted dictionaries, which provide different security, perfor-
mance, and storage efﬁciency tradeoffs. Three operations differ
for the encrypted dictionaries: encrypted dictionary creation,
dictionary search, and attribute vector search. Details about the
encrypted dictionaries are presented in the Section IV. Here,
we consider encrypted dictionaries as an existing building block
and present how they are used by EncDBDB. In Section III-A,
we present the assumed attacker model.
Fig. 2 presents an overview of EncDBDB’s architecture and
the process ﬂow. In the following, we present EncDBDB’s setup
and query phase. In this section, we only discuss range queries
on a static database, i.e., existing data is outsourced at one point
in time. As (in)equality selects and greater/less than selects
can be expressed as range queries, they are covered implicitly.
In Section IV-A, we present how EncDBDB handles dynamic
data (i.e., insertions, deletions, and updates) and explain how
it supports join, count, aggregation, and average calculations.
Setup phase. 1 The data owner generates a secret key SK DB,
selects one encrypted dictionary for each column, performs
the column split accordingly, encrypts the resulting dictionary
with an individual key SK D, and deploys the data at the cloud
provider. SK D is derived from SK DB, the table name, and
the column name.
2 After remote attestation, the data owner establishes an
authenticated channel to the enclave and transfers SK DB.
Additionally, the data owner deploys SK DB at the proxy via
a secure out-of-band mechanism. All users share one proxy.
Query phase. From this point on, the application can send an
arbitrary number of queries, which are processed as follows:
3 The application issues an SQL query Q to the
proxy. This query can contain an arbitrary number of
selects and ﬁlters. For brevity, we assume that Q se-
lects and ﬁlters only one column. Next,
the proxy de-
rives SK D and encrypts the range start and end with
AEEnc. For instance, the query SELECT FName FROM t1
WHERE FName >= 'Abe' and FName = AEEnc(SK D, 'Abe') and FName <= AEEnc(SK D,
'Ella'). AE hides if the values were queried before.
4 The proxy sends the encrypted query eQ to the cloud
provider, where eQ is handled by a DBMS-speciﬁc query
pipeline. The result of the query pipeline is a query plan,
which is shared with a query evaluation engine. As only
one column is ﬁltered in our example, the plan contains one
encrypted dictionary eD, one plaintext attribute vector A, and
one encrypted range ﬁlter τ that has to be executed.
5 The query evaluation engine enriches eD with metadata:
the table name, the column name, and the column size. Then,
it passes τ and a reference to eD to the enclave.
6 Depending on the encrypted dictionary of the ﬁltered
column, the enclave performs a speciﬁc dictionary search, dur-
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:24:56 UTC from IEEE Xplore.  Restrictions apply. 
440
TABLE II: Characteristics of encrypted dictionar-
ies.
TABLE III: Security feature frequency leakage and
dictionary size of repetition options.
TABLE IV: Security feature order leakage and
search time of order options.
s freq. revealing
sorted rotated unsorted
ED1
freq. smoothing ED4
ED7
freq. hiding
ED3
ED6
ED9
ED2
ED5
ED8
n
o
i
t
p
o
n
o
i
t
i
t
e
p
e
r
order options
frequency
leakage
full
dictionary size |D|
repetition
options
|un(C)|
freq. revealing
freq. smoothing bounded ∼ (cid:2)
v∈C
|A|
freq. hiding
2·|oc(v,C)|
1+bsmax
none
order
options
sorted
rotated
unsorted none
order
search time
leakage
O(log |D| ) +O (|A| )
full
bounded O(log |D| ) +O (|A| )
O(|D| ) +O (|A| · |vid| )
ing which it loads the necessary dictionary entries individually
from untrusted memory. Then, it returns the matching set of
ValueIDs.
7 The query evaluation engine performs an attribute vector
search corresponding to the encrypted dictionary of the ﬁltered
column and passes a list of RecordIDs to the result renderer.
8 The result renderer creates one encrypted result column
eC by undoing the column split, i.e., eC = (eDj | j = Ai∧i ∈
rid). Additionally, it enriches eC with column metadata as
before. If a ﬁlter query were executed on other columns in the
same table, the result renderer would use rid to preﬁlter these
columns. It would also use rid for projections. Finally, the
result renderer passes eC back to the proxy.
9 The proxy receives eC, derives SK D, decrypts each
entry in eC individually and passes the resulting column to
the application.
Notably, only a very small part of the query processing is
done inside the enclave, and the required protected memory
is limited. In particular, it is independent of the dictionary
and attribute vector size. There is no need to modify auxiliary
database functionalities such as the query pipeline, persistency
management, or multiversion concurrency control. Still, the
complete processing is protected.
A. Attacker Model
We consider the data owner, the proxy, and the application,
which uses the database, as trusted. An untrusted cloud provider
deploys EncDBDB on a TEE-enabled machine. The TEE has
features similar to SGX; particularly, it protects the integrity and
conﬁdentiality of the enclave and supports remote attestation.
We assume an honest-but-curious attacker, i.e., a passive
attacker who follows the protocol, but tries to gain as much
information as possible. Except the enclave, the attacker can
observe all other software running at the cloud provider, e.g.,
the OS, the ﬁrmware, and the DBMS. As a result, the attacker
has full access to data stored on disk and main memory, and
she can observe the access pattern to them. Additionally, she
can track all communication between the enclave and resources
outside of it, and all network communication between the proxy
and the DBMS. This includes the incoming queries in which
only the data values are encrypted. The enclave is assumed