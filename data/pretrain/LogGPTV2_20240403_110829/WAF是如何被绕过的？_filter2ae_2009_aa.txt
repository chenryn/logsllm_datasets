# WAF是如何被绕过的？
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：掌控安全-暗箭
不知不觉来到掌控学院也快两个月了，想起俩个月前，从零开始，一步一个脚印的走到现在。虽然有时很疲惫，但是却很快乐。
在下才疏学浅，仅在这里发表一下不成熟的见解，希望对大家的提升有所帮助
首先我们要了解什么是waf：
Web应用防火墙，Web Application Firewall的简称
我们口头相谈的waf有什么功能呢？
WAF可以发现和拦截各类Web层面的攻击，记录攻击日志，实时预警提醒，在Web应 用本身存在缺陷的情况下保障其安全。
但是，WAF不是万能的、完美的、无懈可击的，在种种原因下，它们也会有 各自的缺陷，作为用户不可以盲目相信WAF而不注重自身的安全。
## 我们来看一下目前主流的WAF绕过技术：
作为攻击者，我们要清楚我们利用哪方面来进行绕过：
  1. Web容器的特性
  2. Web应用层的问题
  3. WAF自身的问题
  4. 数据库的一些特性
## Web容器特性1
在IIS+ASP的环境中，对于URL请求的参数值中的%，如果和后面的字符构成的字符串在URL编码表之外，ASP脚本 处理时会将其忽略。
现在假设有如下请求：
    http://zkaq666.com/1.asp?id=1 union se%lect 1,2,3,4 fro%m adm%in
在WAF层，获取到的id参数值为 1 union all se%lect 1,2,3,4 fro%m adm%in ,此时waf因为 %
的分隔，无法检测出关键字 select from 等
但是因为IIS的特性，id获取的实际参数就变为 1 union all select 1,2,3,4 from admin ，从而绕过了waf。
这个特性仅在iis+asp上 asp.net并不存在。
## Web容器特性2
IIS的Unicode编码字符
IIS支持Unicode编码字符的解析，但是某些WAF却不一定具备这种能力。
//已知 ‘s’ 的unicode编码为：%u0053, ‘f’ 的unicode编码为 %u0066
如下：
    http://zkaq666.com/1.asp?id=1 union all %u0053elect 1,2,3,4, %u0066rom admin
但是IIS后端检测到了Unicode编码会将其自动解码，脚本引擎和数据库引擎最终获取到的参数会是： 1 union all select 1,2,3,4
from admin
这种情况需要根据不同的waf进行相应的测试，并不是百发百中。但是对于绕过来说，往往只要一个字符成功绕过 即可达到目的。
## Web容器特性3
####  HPP(HTTP Parameter Pollution): HTTP参数污染:
####  如下图
在HTTP协议中是允许同样名称的参数出现多次的。例如:
[http://zkaq666.com/1.asp?id=123&id=456](http://zkaq666.com/1.asp?id=123&id=456)
这个请求。
根据WAF的不同，一般会同时分开检查 id=123 和 id=456 ，也有的仅可能取其中一个进行检测。但是对于
IIS+ASP/ASP.NET来说，它最终获取到的ID参数的值是123,空格456(asp)或123,456(asp.net)。
所以对于这类过滤规则，攻击者可以通过：
id=union+select+password/&id=/from+admin来逃避对 select * from
的检测。因为HPP特性，id的参数值最终会变为：union select password/,/from admin
## Web容器的特性 –4
####  畸形HTTP请求
当向Web服务器发送畸形的,非RFC2616标准的HTTP请求时,
Web服务器出于兼容的目的，会尽可能解析畸形HTTP请求。而如果Web服务器的兼容方式与WAF不一致,则可能会出现绕过的情况。下面来看这个POST请求:
如果将请求改为
这个请求包就就变为了: Method不合法,没有协议字段HTTP/1.1 ,也没有Host字段。
如果在HTTP/1.1协议中，缺少HOST字段会返回400 bad
request。但是某些版本的Apache在处理这个请求时,默认会设置协议为HTTP/0.9 , Host坝默认使用Apache默认的servername
,这种畸形的请求仍然能够被处理。
如果某些WAF在处理数据的时候严格按照GET,POST等方式来获取数据,或者通过正则来处理数据库包,就会因为某些版本的Apache宽松的请求方式而被绕过。
## Web应用层的问题 -1
####  多重编码问题
如果Web应用程序能够接收多重编码的数据，而WAF只能解码一层(或少于WEB应用程序能接收的层数)时，WAF会 因为解码不完全导致防御机制被绕过。
## Web应用层的问题 -2
####  多数据来源的问题
如Asp和Asp.NET中的Request对象对于请求数据包的解析过于宽松，没有依照RFC的标准来，开发人员在编写代码 时如果使用如下方式接收用户传入的参数
    ID=Request(“ID”)
    ID=Request.Params(“ID”)
WEB程序可从以下3种途径获取到参数ID的参数值：
  1. 从GET请求中获取ID的参数值；
  2. 如果GET请求中没有ID参数，尝试从POST的ID参数中获取参数值；
  3. 如果GET和POST中都获取不到ID的参数值，那么从Cookies中的ID参数获取参数值。
这样对于某些WAF来说，如果仅检查了GET或POST的，那么来自Cookie的注入攻击就无能为力了，更何况来自于 这三种方式组合而成的参数污染的绕过方法呢？
## WAF自身的问题 – 1
####  白名单机制
WAF存在某些机制，不处理和拦截白名单中的请求数据：
1.指定IP或IP段的数据。  
2.来自于搜索引擎爬虫的访问数据。  
3.其他特征的数据
如以前某些WAF为了不影响站点的优化，将User-Agent为某些搜索引擎（如谷歌）的请求当作白名单处理，不检测和拦截。伪造HTTP请求的User-Agent非常容易，只需要将HTTP请求包中的User-Agent修改为谷歌搜索引擎 的User-Agent即可畅通无阻。
## WAF自身的问题 – 2
####  数据获取方式存在缺陷
某些WAF无法全面支持GET、POST、Cookie等各类请求包的检测，当GET请求的攻击数据包无法绕过时，转换 成POST可能就绕过去了。或者，POST以
Content-Type: application/x-www-form-urlencoded 无法绕过时，转换成上传包格式的Content-Type:
multipart/form-data 就能够绕过去
## WAF自身的问题 – 3
####  数据处理不恰当
1、%00截断 将 %00 进行URL解码，即是C语言中的NULL字符