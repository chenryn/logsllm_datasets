e
P
80
60
40
20
0
)
c
e
s
/
x
t
k
(
t
u
p
h
g
u
o
r
h
t
k
a
e
P
150
118.39
100
93.23
Marlin
HotStuff
104.5
101.09
78.39
74.87
50
0
600
400
)
s
m
(
y
c
n
e
t
a
L
Marlin (happy)
Marlin (unhappy)
HotStuff
386
384
229
200
183
182
123
0
)
c
e
s
/
x
t
k
(
t
u
p
h
g
u
o
r
h
t
k
a
e
P
120
100
80
60
40
20
0
Marlin
HotStuff
86.38
65.51
65.18
55.18
47.95
40.18
f = 1 f = 2 f = 3 f = 4 f = 5 f = 6 f = 7 f = 8 f = 9 f = 10
(g) Peak throughput.
f = 1 f = 2 f = 5
(h) Peak throughput for no-
op requests and replies.
f = 1
f = 10
(i) View change latency.
Fig. 10: Performance of Marlin and HotStuff.
no-failure1-failure3-failure
(j) Peak throughput of the
rotating-leader mode under
failures (f = 3).
Performance of view changes. We evaluate the performance
of view changes. We compute the view change latency from
the point when a replica starts the view change to the point
when the ﬁrst block is committed after the view change. We
ﬁrst submit a few client requests and then crash the leader
to assess the performance of view change. For Marlin, we
force our code to execute both happy and unhappy paths to
fully understand the performance. As shown in Figure 10i, the
latency for HotStuff is 182 ms when f = 1 and 384 ms when
f = 10. Meanwhile, in the happy path, the latency for Marlin
is 123 ms for f = 1 and 229 ms for f = 10, being about 30%
to 40% lower than HotStuff. The latency for the unhappy path,
in contrast, is similar to HotStuff for both f = 1 and f = 10.
The results show that the view change protocol of Marlin is at
least as efﬁcient as HotStuff. In practice, one could anticipate
the average latency of Marlin would be somewhere between
the happy path latency and the unhappy path latency.
Performance under failures. We assess the performance
of the rotating leader mode under failures. By the rotating
leader mode, we follow HotStuff implementation [1] (setting
up a timer) and Spinning [49] to rotate leaders periodically.
In our experiments, we let f = 3 and crash 1 or 3 replicas
at the beginning of the experiments. We set up the timer
for the rotating leader to 1s. We report the performance of
the failure-free case, the case under 1 failure, and the case
under 3 failures in Figure 10j. Both Marlin and HotStuff
suffer from performance degradation under failures. For the
1 failure scenario, the performance of Marlin and HotStuff
is 24.5% and 26.8% lower than that in the failure-free case,
respectively. When there are 3 failures, the performance of
Marlin and HotStuff is 36.11% and 38.66% lower, respectively.
The results are expected, as no requests can be proposed or
committed when a faulty replica is a leader. In all the cases,
Marlin consistently outperforms HotStuff. For instance, when
there are 3 failures, the throughput of Marlin is 34.8% higher
than that of HotStuff.
VII. CONCLUSION
This paper introduces Marlin, a novel BFT protocol that
commits operations in two phases and has a linear authenti-
cator communication. We prove the correctness of Marlin and
provide an efﬁcient implementation for Marlin and HotStuff.
Via extensive evaluation, we show Marlin outperforms Hot-
Stuff in various scenarios.
ACKNOWLEDGEMENT
We thank DSN reviewers and our shepherd Vivien Qu´ema
for their insightful comments.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
64
REFERENCES
[1] HotStuff implementation. https://github.com/hot-stuff/libhotstuff.
[2] HotStuff (Relab). https://github.com/relab/hotstuff.
[3] Ittai Abraham, Philipp Jovanovic, Mary Maller, Sarah Meiklejohn,
Gilad Stern, and Alin Tomescu. Reaching consensus for asynchronous
distributed key generation. In PODC, 2021.
[4] Ittai Abraham, Dahlia Malkhi, Kartik Nayak, Ling Ren, and Maofan
Yin. Sync hotstuff: Simple and practical synchronous state machine
replication. In S&P (Oakland), pages 106–118. IEEE, 2020.
[5] Ittai Abraham, Dahlia Malkhi, and Alexander Spiegelman. Asymptoti-
cally optimal validated asynchronous byzantine agreement. In Proceed-
ings of the Symposium on Principles of Distributed Computing, pages
337–346. ACM, 2019.
[6] Mark Abspoel, Thomas Attema, and Matthieu Rambaud. Malicious
security comes for free in consensus with leaders. Cryptology ePrint
Archive, 2020.
[7] Yair Amir, Brian Coan, Jonathan Kirsch, and John Lane.
Prime:
Byzantine replication under attack. IEEE Transactions on Dependable
and Secure Computing, 8(4):564–577, 2011.
[8] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Kon-
stantinos Christidis, Angelo De Caro, David Enyeart, Christopher Ferris,
Gennady Laventman, Yacov Manevich, Srinivasan Muralidharan, Chet
Murthy, Binh Nguyen, Manish Sethi, Gari Singh, Keith Smith, Alessan-
dro Sorniotti, Chrysoula Stathakopoulou, Marko Vukoli´c, Sharon Weed
Cocco, and Jason Yellick. Hyperledger fabric: A distributed operating
system for permissioned blockchains. In EuroSys, 2018.
[9] Michael Ben-Or, Boaz Kelmer, and Tal Rabin. Asynchronous secure
computations with optimal resilience. In Proceedings of the 13th annual
symposium on Principles of distributed computing, pages 183–192.
ACM, 1994.
[10] Daniel J Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-
Yin Yang. High-speed high-security signatures. Journal of cryptographic
engineering, 2(2):77–89, 2012.
[11] Alysson Bessani, Eduardo Alchieri, João Sousa, André Oliveira, and
Fernando Pedone. From byzantine replication to blockchain: Consensus
is only the beginning.
In IEEE/IFIP International Conference on
Dependable Systems and Networks, 2020.
[12] Alexandra Boldyreva. Threshold signatures, multisignatures and blind
signatures based on the gap-difﬁe-hellman-group signature scheme. In
PKC, pages 31–46, 2003.
[13] Dan Boneh, Ben Lynn, and Hovav Shacham. Short signatures from the
weil pairing. Journal of cryptology, 17(4):297–319, 2004.
[14] Christian Cachin, Klaus Kursawe, Frank Petzold, and Victor Shoup.
Secure and efﬁcient asynchronous broadcast protocols.
In Annual
International Cryptology Conference, pages 524–541. Springer, 2001.
Secure intrusion-tolerant
In Proceedings International Conference
[15] Christian Cachin and Jonathan A. Poritz.
replication on the internet.
on Dependable Systems and Networks, pages 167–176, 2002.
[16] Miguel Castro and Barbara Liskov. Practical byzantine fault tolerance.
In OSDI, pages 173–186, 1999.
[17] Kaustuv Chaudhuri, Damien Doligez, Leslie Lamport, and Stephan
Merz. Verifying safety properties with the tla+ proof system.
In
International Joint Conference on Automated Reasoning, pages 142–
148. Springer, 2010.
[18] James R. Clavin, Sisi Duan, Haibin Zhang, Vandana P. Janeja, Karuna P.
Joshi, Yelena Yesha, Lucy C. Erickson, and Justin D. Li. Blockchains
for government: Use cases and challenges. Digit. Gov. Res. Pract.,
1(3):22:1–22:21, 2020.
[19] Miguel Correia, Nuno Ferreira Neves, and Paulo Veríssimo. From
consensus to atomic broadcast: Time-free byzantine-resistant protocols
without signatures. Comput. J., 49(1):82–96, 2006.
[20] Sisi Duan, Karl Levitt, Hein Meling, Sean Peisert, and Haibin Zhang.
In SRDS,
ByzID: Byzantine fault tolerance from intrusion detection.
pages 253–264. IEEE, 2014.
[21] Sisi Duan, Hein Meling, Sean Peisert, and Haibin Zhang. BChain:
Byzantine replication with high throughput and embedded reconﬁgu-
ration. In OPODIS, pages 91–106, 2014.
[22] Sisi Duan, Michael K. Reiter, and Haibin Zhang. Secure causal atomic
broadcast, revisited. In DSN, pages 61–72. IEEE, 2017.
[23] Sisi Duan, Michael K Reiter, and Haibin Zhang. BEAT: Asynchronous
bft made practical. In Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, pages 2028–2041. ACM,
2018.
[24] Sisi Duan and Haibin Zhang. Practical state machine replication with
conﬁdentiality. In SRDS, pages 187–196. IEEE, 2016.
[25] Sisi Duan and Haibin Zhang. Foundations of dynamic bft.
In S&P
(Oakland), 2022.
[26] Sisi Duan and Haibin Zhang. PACE: Fully parallelizable BFT from
reproposable byzantine agreement. IACR Cryptol. ePrint Arch., 2022.
[27] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. Consensus in the
presence of partial synchrony. Journal of the ACM (JACM), 35(2):288–
323, 1988.
[28] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. Consensus in the
presence of partial synchrony. Journal of ACM, 32(2):288–323, 1988.
[29] Fangyu Gai, Ali Farahbakhsh, Jianyu Niu, Chen Feng, Ivan Beschast-
nikh, and Hao Duan. Dissecting the performance of chained-bft.
In
International Conference on Distributed Computing Systems, pages 595–
606, 2021.
[30] Rati Gelashvili, Lefteris Kokoris-Kogias, Alberto Sonnino, Alexan-
der Spiegelman, and Zhuolun Xiang.
Jolteon and ditto: Network-
adaptive efﬁcient consensus with asynchronous fallback. arXiv preprint
arXiv:2106.10362, 2021.
[31] Neil Giridharan, Heidi Howard, Ittai Abraham, Natacha Crooks, and
Alin Tomescu. No-commit proofs: Defeating livelock in bft. Cryptology
ePrint Archive, 2021.
[32] Guy Golan-Gueta, Ittai Abraham, Shelly Grossman, Dahlia Malkhi,
Benny Pinkas, Michael K. Reiter, Dragos-Adrian Seredinschi, Orr
Tamir, and Alin Tomescu. SBFT: A scalable and decentralized trust
infrastructure. In DSN, pages 568–580, 2019.
[33] Rachie Guerraoui, Nikola Kneževi´c, Vivien Quéma, and Marko Vukoli´c.
The next 700 bft protocols. ACM Transactions on Computer Systems,
32(4):12:1–12:45, 2015.
[34] Mohammad M. Jalalzai, Jianyu Niu, Chen Feng, and Fangyu Gai.
arXiv preprint
Fast-hotstuff: A fast and resilient hotstuff protocol.
arXiv:2010.11454, 2021.
[35] Leander Jehl. Formal veriﬁcation of hotstuff. In International Confer-
ence on Formal Techniques for Distributed Objects, Components, and
Systems, 2021.
[36] Chao Liu, Sisi Duan, and Haibin Zhang. Epic: Efﬁcient asynchronous
bft with adaptive security. In DSN, 2020.
[37] Kenneth L McMillan and Oded Padon. Ivy: a multi-modal veriﬁcation
tool for distributed algorithms. In International Conference on Computer
Aided Veriﬁcation, pages 190–202. Springer, 2020.
[38] Andrew Miller, Yu Xia, Kyle Croman, Elaine Shi, and Dawn Song. The
honey badger of bft protocols. In Proceedings of the SIGSAC Conference
on Computer and Communications Security, pages 31–42. ACM, 2016.
[39] Henrique Moniz, Nuno Ferreria Neves, Miguel Correia, and Paulo
Verissimo. Ritas: Services for randomized intrusion tolerance.
IEEE
transactions on dependable and secure computing, 8(1):122–136, 2008.
[40] Ray Neiheiser, Miguel Matos, and Luís Rodrigues. Kauri: Scalable bft
consensus with pipelined tree-based dissemination and aggregation. In
SOSP, pages 35–48, 2021.
[41] Jianyu Niu, Fangyu Gai, Mohammad M Jalalzai, and Chen Feng. On
the performance of pipelined hotstuff. In IEEE Conference on Computer
Communications, pages 1–10. IEEE, 2021.
[42] Michael K Reiter. Secure agreement protocols: Reliable and atomic
group multicast in rampart. In Proceedings of the 2nd ACM Conference
on Computer and Communications Security, pages 68–80, 1994.
[43] Alan T Sherman, Farid Javani, Haibin Zhang, and Enis Golaszewski. On
the origins and variations of blockchain technologies. IEEE Security &
Privacy, 17(1):72–77, 2019.
[44] Victor Shoup. Practical threshold signatures. In Advances in Cryptology
— EUROCRYPT, 2000.
[45] João Sousa, Eduardo Alchieri, and Alysson Bessani. State machine
replication for the masses with bft-smart. In DSN, pages 355–362, 2014.
[46] Joao Sousa, Alysson Bessani, and Marko Vukoli´c. A Byzantine fault-
tolerant ordering service for the Hyperledger fabric blockchain platform.
In DSN, pages 51–58, 2018.
[47] Chrysoula Stathakopoulou, Tudor David, and Marko Vukolic. Mir-bft:
High-throughput bft for blockchains. arXiv preprint arXiv:1906.05552,
2019.
[48] Gilad Stern and Ittai Abraham.
Information theoretic hotstuff.
In
OPODIS, 2020.
[49] Giuliana Santos Veronese, Miguel Correia, Alysson Neves Bessani, and
Lau Cheuk Lung. Spin one’s wheels? byzantine fault tolerance with
a spinning primary.
In 2009 28th IEEE International Symposium on
Reliable Distributed Systems, pages 135–144, 2009.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
65
[50] Giuliana Santos Veronese, Miguel Correia, Alysson Neves Bessani,
Lau Cheuk Lung, and Paulo Verissimo. Efﬁcient byzantine fault-
tolerance. IEEE Transactions on Computers, 62(1):16–30, 2011.
[52] Maofan Yin, Dahlia Malkhi, Micheal K. Reiter, Guy Golan Gueta, and
Ittai Abraham. Hotstuff: Bft consensus with linearity and responsiveness.
In PODC, 2019.
[51] Xin Wang, Sisi Duan, James Clavin, and Haibin Zhang. Bft
in
blockchains: From protocols to use cases. ACM Computing Surveys
(CSUR), 2021.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
66