"java/lang/ProcessImpl".equals(className) : false;
        } else {
            return "java/lang/UNIXProcess".equals(className);
        }
    }
我们可以看到 com.baidu.openrasp.hook.AbstractClassHook#transformClass ，它
会调⽤具体实现类的 hookMethod ⽅法
这⾥也就是对应
com.baidu.openrasp.hook.system.ProcessBuilderHook#hookMethod ，可以看到这
⾥的处理也是很全⾯的挺好
在具体要hook的类⽅法前⾯加上 checkCommand 这个函数
回答上⾯遗留的ModuleClassloader的问题
在这⾥通过 getInvokeStaticSrc 这个⽅法⽣成具体插⼊的类，在这个⽅法当中可以看到，
对于被BootStrap加载的类，它会通过
com.baidu.openrasp.ModuleLoader.moduleClassLoader . loadClass 去调⽤检查命
令的 checkCommand 函数，这样就避免了由于双亲委派机制导致的
ClassNotFoundException
    protected void hookMethod(CtClass ctClass) throws IOException, 
CannotCompileException, NotFoundException {
        String src;
        if (ctClass.getName().contains("ProcessImpl")) {
            if (OSUtil.isWindows()) {
                src = this.getInvokeStaticSrc(ProcessBuilderHook.class, 
"checkCommand", "$1,$2", new Class[]{String[].class, String.class});
                this.insertBefore(ctClass, "", (String)null, src);
            } else if (ModuleLoader.isModularityJdk()) {
                src = this.getInvokeStaticSrc(ProcessBuilderHook.class, 
"checkCommand", "$1,$2,$4", new Class[]{byte[].class, byte[].class, 
byte[].class});
                this.insertBefore(ctClass, "", (String)null, src);
            }
        } else if (ctClass.getName().contains("UNIXProcess")) {
            src = this.getInvokeStaticSrc(ProcessBuilderHook.class, 
"checkCommand", "$1,$2,$4", new Class[]{byte[].class, byte[].class, 
byte[].class});
            this.insertBefore(ctClass, "", (String)null, src);
        }
    }
由于重载思想差不多就随便挑⼀个看看
public static void checkCommand(byte[] command, byte[] args, byte[] 
envBlock) {
        if ((Boolean)HookHandler.enableCmdHook.get()) {
            LinkedList commands = new LinkedList();
            //执⾏的命令
            if (command != null && command.length > 0) {
                commands.add(new String(command, 0, command.length - 1));
            }
            //执⾏的命令的参数
            int index;
            if (args != null && args.length > 0) {
                int position = 0;
                for(index = 0; index  envList = new LinkedList();
            if (envBlock != null) {
                index = -1;
                for(int i = 0; i  0) {
                            envList.add(envItem);
                        }
                        index = i;
                    }
                }
            }
            checkCommand((List)commands, (List)envList);
        }
    }
之后带着这些参数执⾏ HookHandler.doCheckWithoutRequest ,这⾥省略⼀些废话
之后在 com.baidu.openrasp.HookHandler#doRealCheckWithoutRequest
会选择合适的checker去检查我们执⾏的东西
继续省略⼀堆废话，最终会调⽤到 V8.check
public static boolean check(Type type, CheckParameter parameter) {
  return ((Checker)checkers.get(type)).check(parameter);
}
我们来看看对应的c源码，这⾥忽略前⾯部分，后⾯这⾥有个⽐较骚的v8的函
数 SetLazyDataProperty
函数对应的Getter是GetStack，可以看到这个函数⾥⾯⽐较核⼼的操作就是通过JNIENV去调⽤
Java的 com.baidu.openrasp.v8.V8#GetStack 函数很骚
void GetStack(v8::Local name, const 
v8::PropertyCallbackInfo& info) {
  auto isolate = reinterpret_cast
(info.GetIsolate());
  auto env = GetJNIEnv(isolate);
  jbyteArray jbuf = reinterpret_cast(env-
>CallStaticObjectMethod(v8_class.cls, v8_class.GetStack));
  if (jbuf == nullptr) {
    return info.GetReturnValue().Set(v8::Array::New(isolate));
继续往下看check函数，由于我们这⾥分析的是command，所以if部分暂时不⽤看，之后调
⽤ isolate->Check 去执⾏检测(不截图了，简单来说就是找到对应的注册的检测函数去调
⽤)
如何绕过
  }
  auto maybe_string = v8::String::NewExternalOneByte(isolate, new 
ExternalOneByteStringResource(env, jbuf));
  if (maybe_string.IsEmpty()) {
    return info.GetReturnValue().Set(v8::Array::New(isolate));
  }
  auto maybe_value = v8::JSON::Parse(isolate->GetCurrentContext(), 
maybe_string.ToLocalChecked());
  if (maybe_value.IsEmpty()) {
    return info.GetReturnValue().Set(v8::Array::New(isolate));
  }
  auto value = maybe_value.ToLocalChecked();
  info.GetReturnValue().Set(value);
}
绕过的⽅式其实真的有很多，这⾥简单谈⼏个
基于正则的绕过
⾸先对于规则的检测既然是基于正则表达式，那么很显然如果在规则不够完善的情况之下，
那也是可以造成⼀部分的绕过，⽐如我们可以看到在官⽅的插件当中，我们就拿这第⼀个查
看⽂件的命令来说只是任意匹配1-5位，虽然不能通过多个空格之类的绕过
我们的cat函数⽀持同时读多个⽂件 cat /abc/def /etc/passwd ，这样也是可以轻轻松松
得以进⾏绕过
通过修改某些属性
通常如果存在反序列化漏洞，我们通常可以通过 TemplatesImpl 去加载任意字节码，在这⾥
如果对于在RASP执⾏检测过程当中如果存在某些关键配置我们可以操控，那么就可以导致绕
过，⽽OpenRasp⾥⾯就有，⽐如在执⾏检测前中间的调⽤流程有
个 com.baidu.openrasp.HookHandler#doCheckWithoutRequest ，这⾥⾯提到了如果服
务器的cpu使⽤率超过 90% ， 禁⽤全部hook点
command_common: {
  name:    '算法3 - 识别常⽤渗透命令（探针）',
    action:  'log',
      pattern: 'cat.{1,5}/etc/passwd|nc.{1,30}-e.{1,100}/bin/(?:ba)?
sh|bash\\s-.{0,4}i.{1,20}/dev/tcp/|subprocess.call\\(.{0,6}/bin/(?:ba)?
sh|fsockopen\\(.{1,50}/bin/(?:ba)?sh|perl.{1,80}socket.{1,120}open.
{1,80}exec\\(.{1,5}/bin/(?:ba)?sh'
},
又或者满⾜当云控注册成功之前，不进⼊任何hook点，反正这些我们不都是可以通过反射去
设置的么，这⾥我就随便来⼀个，就以第⼀个为例⼦吧，我们可以通过反射获取这个已经实
例化的实例，在这个基础上修改 disableHooks 这个属性即可
代码⽰例如下
为了得到直观的效果我把插件当中的log改为block来演⽰下
try {
  Class clz = 
Thread.currentThread().getContextClassLoader().loadClass("com.baidu.openra
sp.config.Config");
  java.lang.reflect.Method getConfig = clz.getDeclaredMethod("getConfig");
  java.lang.reflect.Field disableHooks = 
clz.getDeclaredField("disableHooks");
  disableHooks.setAccessible(true);
  Object ins = getConfig.invoke(null);
  disableHooks.set(ins,true);
} catch (Exception e) {}
并简单写了个控制器模拟反序列化过程（⼀个字懒）
⾸先执⾏命令返回可爱⼩恐龙
// 命令注⼊ - 常⻅命令
command_common: {
  name:    '算法3 - 识别常⽤渗透命令（探针）',
    action:  'block',
      pattern: 'cat.{1,5}/etc/passwd|nc.{1,30}-e.{1,100}/bin/(?:ba)?
sh|bash\\s-.{0,4}i.{1,20}/dev/tcp/|subprocess.call\\(.{0,6}/bin/(?:ba)?
sh|fsockopen\\(.{1,50}/bin/(?:ba)?sh|perl.{1,80}socket.{1,120}open.
{1,80}exec\\(.{1,5}/bin/(?:ba)?sh|\\{echo,.{10,400}{base64,-d}'}
@RequestMapping("/off")
public void off(){
  try {
    Class clz = 
Thread.currentThread().getContextClassLoader().loadClass("com.baidu.openra
sp.config.Config");
    java.lang.reflect.Method getConfig = 
clz.getDeclaredMethod("getConfig");
    java.lang.reflect.Field disableHooks = 
clz.getDeclaredField("disableHooks");
    disableHooks.setAccessible(true);
    Object ins = getConfig.invoke(null);
    disableHooks.set(ins,true);
  } catch (Exception e) {}
}
当我访问 off 路由成功关闭rasp的hook功能
当然你可能会说还有其他的关闭的hook点，⽐如刚刚上⾯提到的 doCheckWithoutRequest
实际上最终是通过 doRealCheckWithoutRequest 去进⾏下⼀步操作，但毕竟也是类似的意
思就不多考虑这些更改属性的了点到为⽌，毕竟只要破坏中间任⼀环节即可
覆盖插件
我们知道OpenRASP通过 InitFileWatcher ,⼀旦其中的js⽂件被 创建 、 改变 、 删除 都会触
发插件的
并且我们可以看到插件配置当中对于⽂件上传 js 默认是关闭逻辑检测的开关
因此我们如果存在任意⽂件上传并且可以跨⽬录再并且知道插件路径的情况下，虽然不是很
通⽤但好⽍也是⼀个⼿段
⾄于有没有其他⽅式这⾥暂时我就不探究了，顺便吐槽学校的实训太累了，⼼理上的累
参考⽂章
官⽅⽂档
C++中构造函数的两种写法
JNIENV介绍
以OpenRASP为基础-展开来港港RASP的类加载