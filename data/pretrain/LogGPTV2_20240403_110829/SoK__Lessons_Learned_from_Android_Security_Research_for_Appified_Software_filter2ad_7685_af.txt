Users: To effectively inform end users about
the privacy
risks that an app imposes, it is imperative that end users
are capable of correctly perceiving the risk of granting the
access rights requested by apps. Pioneering work showed that
only a very small fraction of users could correctly associate
privacy risks with the respective permissions [9]. One potential
root cause for this lack of understanding seems to be that
permissions communicate resource access, but do not explain
how accessed data is processed and distributed [10]. Hence,
users tend to underestimate the risks ("the app will not misuse
its permissions") or overestimate the risks ("the app will steal
all my private information") [9]. A lack of user comprehension
of permissions allows attackers to create malicious apps that
request all necessary sensitive permissions for their operations
(as demonstrated, e.g., by the Geinimi Trojan [90]).
Apps published after Android v6.0 may request a small
subset of privacy-related permissions during runtime instead
of at installation. Requesting permissions dynamically when
they are required by the app should provide users with more
contextual information and help them in their decision making
process. However, Wijesekera et al. [64] have shown that this
desired contextual integrity—i.e., personal information is only
used in ways determined appropriate by the users—is not
necessarily provided by dynamic permissions and runtime con-
sent dialogs: A majority of privacy-related permission requests
occur when the user is not interacting with the requesting
application or even with the phone, and, moreover, requests
occur at a frequency that prohibits involving the user in every
decision making process. As a consequence, users failed to
establish the connection between the permission request and
the apps’ functionality and consent dialogs are only shown
during ﬁrst request to grant access until manually revoked by
the users although subsequent permission checks might occur
in a different privacy-context than the initial request.
b) Permission Comprehension and Attention by App De-
velopers: Android’s security design requires app developers
to contribute to platform security by requesting, deﬁning, and
properly enforcing permissions in order to retrieve and protect
sensitive user data. Thus, even more than for end users, it is
imperative that app developers understand permissions and the
security tools at their disposal.
Permission Comprehension by App Developers. A number
of studies [12], [13], [14], [16], [17] give insight into how app
developers comprehend permissions and, in particular, how the
SDK supports them in their task to realize least-privileged
apps (e.g., considering the stability of the permission set
or the extent to which permission-protected APIs are well-
documented). Between 30% [13] and 44.8% [12] of the
studied apps requested unnecessary permissions, i.e., were
over-privileged and in clear violation of the least-privilege
principle. Moreover, several apps have been found that request
non-existent or even wrong permissions. Even developers of
system apps, who have access to the highest privileged and
highly dangerous API functions, did not exhibit a signiﬁcantly
better understanding of permissions [15].
To understand the root causes behind the developers’ incom-
prehension of permissions, the studies analyzed the Android
API documentation, ﬁnding that
the API is insufﬁciently
documented and does not identify all permission-protected
APIs. Even worse, the documentation also contained errors,
e.g., describing the wrong permission required for an API
function. Confusing permission names also contribute to these
misconceptions. These inconsistencies and the instability of
the API impede a clear and well-developed documentation
and thereby contribute to the developers’ incomprehension of
permissions and to confusion about permission usage.
Permission Attention by App Developers. Besides develop-
ers’ (lack of) comprehension of permissions, the thoughtful-
ness of developers when enforcing permissions was studied,
as well as their level of comprehension of the mechanisms
at their disposal to accomplish this task. Although Android’s
security design incorporates important lessons learned from
prior operating system security research [91], the fact that
it allows and even encourages differently privileged apps
to communicate with each other has piqued the security
research community’s interest in how this can be exploited
by unprivileged apps to escalate their privileges [17], [18],
[19], [20], [21], [22], [23], [24], [15]. In particular, various
works have identiﬁed an increase in failure of app developers
to properly protect their app’s IPC-exposed (or exported)
interfaces and to transitively enforce permissions [20]. This
441441
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
opens the attack surface for confused deputy attacks2 to, e.g.,
initiate phone calls [17], hijack ICC [19], or exﬁltrate sensitive
user data [23], [22]. The root cause of many of those identiﬁed
vulnerabilities is that application components were by default
exported to be IPC-callable and thus require that the devel-
opers either explicitly protect them with permissions or hide
the components. As indicated by the uncovered vulnerabilities,
most developers are unaware of these conditions. To phrase
this in the terms of Saltzer’s and Schroeder’s secure design
principles [91]: Android failed to implement fail-safe defaults.
2) Countermeasures: Recent changes [94] in the default
installer app for Google Play aim to improve permission
perception for users. Installers present permissions with low
granularity in groups, while some commonly requested per-
missions, like INTERNET, are not presented at all anymore.
This shift
in permission presentation can be viewed as a
pure user experience decision, not as an enabler of user
comprehension.
Research has made several suggestions to enhance the
usability of permissions for both end users and developers:
Kelley et al. [59] propose to enrich permission dialogs with
more detailed privacy-related information to help users make a
more informed decision. Porter Felt et al. [95] propose making
the permission-granting mechanism dependent on the kind of
permission that is requested, e.g., auto-granting non-severe
permissions with reversible side-effects, trusted UI for user-
initiated or alterable requests, or conﬁrmation dialogs for non-
alterable, app-initiated requests that need immediate approval.
A concrete realization of trusted UI are access control gadgets
by Roesner et al. [96] that allow a user-driven delegation of
permissions to apps whenever such widgets can be effectively
integrated into the apps’ workﬂows. Wijesekera et al. [64]
suggest more intelligent systems that learn about their users’
privacy preferences and only confront users with consent
dialogs when a permission request is unexpected for the user.
This consent dialog should provide sufﬁcient contextual cues
for users, e.g., clearly indicating the app requesting the access
to protected resources as well as clearly communicating why
the resource is accessed. Liu et al. [97] propose eliminating
the burden of understanding the enormous list of permissions
by using a limited set of privacy proﬁles including certain
permissions instead; and Felt et al. [13] propose to improve
API documentation to simplify permission requests for app
developers.
Multiple system extensions have been suggested to enhance
the permission system: The seminal Kirin [17] OS extension
used combinations of permissions requested by an app to de-
tect potential misuse of permissions and also revealed confused
deputy apps on AOSP. Apex [55] introduced dynamic and con-
ditional permission enforcement to Android. TaintDroid [54]
used dynamic taint tracking to reveal for the ﬁrst time how
apps actually use permission-protected data and uncovered
a number of questionable privacy practices that motivated
enhancements to the permission system and access control
on ICC. Sorbet [21] was ﬁrst to model Android permissions
and uncovered problems with desired security properties (like
controlled delegation of privileges) on Android.
Some system extensions speciﬁcally aim at mitigating con-
fused deputies: XManDroid [57] primarily augments the per-
mission enforcement with policy-driven access control, where
policies specify confused deputy and collusion attacks [18],
[98] states. QUIRE [56] establishes provenance information
along ICC call paths, enabling callees to evaluate their trust
in the caller. IPC inspection [20] reduces the privileges of
callees to the privileges of the caller.
WHYPER [61] and AutoCog [62] apply NLP techniques
to automatically derive the required permissions from app
descriptions, taking developers out of the loop, and check
whether described functionality and actually requested per-
missions correspond. DescribeMe [63] takes the opposite track
and generates security-centric app descriptions from analysis
of app code in order to increase user understanding of the app.
3) Actors’ Roles: Platform developers (A1. ) and market
operators (A3. ) are fully responsible for the permission
comprehension problems, as the platform enforces use of the
current permission system, and the platforms’ and the markets’
installers communicate the privacy risks of installing appli-
cations to users. Library providers (A4. ) contribute to this
problem through their permission requests. App developers
(A5. ) tend to over-privilege their apps (either for their own
needs, or on behalf of library providers their apps use), making
apps appear unnecessarily dangerous. End users (A8. ) tend to
pay little attention to permissions [9], and only have the option
of accepting everything or not installing the app at all.3 Thus,
while end users’ behavior eventually opens the door to misuse
by malware, end users have limited options and capabilities to
detect whether permissions are being misused.
This problem could potentially be ﬁxed by platform devel-
opers (R1. ) by changing their access control paradigm and
avoiding conditions for some of the identiﬁed vulnerabilities
(e.g. failing to implement fail-safe defaults). Additionally, by
helping app developers (R5. ) and library providers (R4. )
in realizing security best practices for defensive programming
through tool support [13], [58] (R7. ), this indirectly helps
end users. App markets (R3. ) could make their permission
dialogs more comprehensive, demand justiﬁcation from app
developers and run static analyses on received app packages
to adjust permissions accordingly.
4) Lesson Learned:
In conventional ecosystems, neither
developers nor users were involved in the process of requesting
or granting ﬁne-grained permissions to access resources on
a computer. Allowing developers to request and deﬁne ﬁne-
grained permissions and presenting end users permission di-
alogs is a good idea in theory. However, research illustrates
that
this approach overburdens both: Developers tend not
to focus their efforts on the selection process for permis-
2The literature has yet to agree on a ﬁxed term. Other works designate this
attack category as permission re-delegation [20], as component hijacking [22],
or as capability leaks [24], [92]. We use the term confused deputy [93].
3While this has changed with Android v6.0, developers nullify this change
by making their apps compatible with older Android versions.
442442
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
sions [13], while end users neither understand nor pay much
attention to Android’s permission dialogs [9], [99]. Research
has strived to improve permission dialogs [59], [64], [97], but
none of these approaches has solved the two-sided usability
and comprehension problem. Permission dialogs have issues
similar to warning messages: They fail to lead to the desired
effect, as users tend to click through them, misunderstand their
purpose, and hence do not beneﬁt from them.
Instead of continuing the current
line of research, we
propose a clean break and a shift towards taking both users and
developers out of the loop: Approaches that try to automati-
cally derive the required permissions for an app based on its
category, description, and similarity to other apps seem to take
a more promising track [61], [62], [63]. Another promising
alternative seems to be authorizing entire information ﬂows
instead of only access to resources. Although not new [100],
[101], this idea seems worth being re-investigated for appiﬁed
platforms that put the burden of granting permissions onto
their end users.
Our assessment (Permission Evolution): The decision
to realize permissions as implemented by Android was
understandable at Android’s launch, but the concept has
failed in practice, and was presumably doomed to fail
from the beginning.
B. Permission Revolution
A dedicated line of research has investigated the possibilities
of extending alternative access-control models to the Android
platform to establish more ﬂexible, ﬁne-grained, and manda-
tory control over system resources and ICC. This research
followed two major directions: OS extensions and Inlined
Reference Monitoring (IRM).
1) Challenges:
a) Missing Privilege Separation: The most common
third-party code distributed with apps is analytic and adver-
tisement libraries that display ads in order to monetize the app
(cf. Section III-A) [29]. More than 100 unique ad libraries are
available for the different ad networks included in more than
half of all apps [25], [26], [27], [28], [29].
The host app and third-party libraries engage in a symbiotic
relationship that currently requires mutual
trust. Libraries
execute in the context of their host app’s sandbox and inherit
all privileges of their host app. However, ad libraries tend
to exploit these privileges and exhibit a variety of dangerous
behaviors, including misconduct such as insecure loading of
code from web sources [30] as well as collecting users’
private information [26]. Inversely, developers of host apps
have a strong interest in monetizing their apps. Fraudulent
app developers can exploit the symbiotic relationship [31] to
surreptitiously steal money from the ad network by faking
click events [31]. Android’s design failed to provide privilege
separation between these two principals [91], worsening the
privacy threat of ad libraries to users’ data in comparison to
conventional browser-based ads [28].
b) Ineffective Security Apps: Android follows the mantra
that "all applications are created equal" [102]. However, this
also implies that apps by external security vendors, such as
anti-virus apps, do not have higher privileges than other apps.
Studies have investigated to what extent this philosophy inﬂu-
ences the efﬁcacy of such security apps [2], [32], [33]. Prior
systematization of existing Android malware has evaluated
the effectiveness of existing anti-virus apps for Android and
reported that detection rates vary from 54.7%-79.6% [2], [33],
[32]. One study [33] suggests that platform support for anti-
virus apps is essential to improve their efﬁcacy.
c) Lack of Support
for Mandatory Access Control:
Mobile devices are often used in ﬁelds with strong security re-
quirements, such as enterprises and government sectors. Con-
ventional operating systems in those contexts apply advanced
access control models that protect more sensitive information
(e.g., non-interference between two distinct security levels).
The support for mandatory access control is a cornerstone of
the platform security of such established systems. Conversely,
Android lacks any support for mandatory access control.
While the requirement of supporting advanced access con-
trol schemes is intuitive and plausibe, we are not aware of
any academic security requirements analysis that focuses on
those particular stakeholders (i.e., enterprise and government
sectors) on mobile devices and that could describe the particu-
lar challenges that come with enabling support for such access
control schemes on mobile devices. Only governmental guide-
lines have been published, e.g., by NIST [103]. Consequently,
academic research has explored the particular challenges of
adding mandatory and alternative access control models to
Android from different angles, not all of which directly relate
to high-security deployment.
2) Countermeasures: To provide advanced access control
models and robust defenses against malware on Android,
research has followed two main directions for adding access
control to Android based on the responsible deployment actor.
a) Alternative Access Control Models: Early work [65],
[66], [67] explored how access control within Android’s appli-
cation framework can be more semantically rich and dynamic
and introduced mechanisms that have since been adopted by
several follow-up works. The seminal Saint [65] architecture
allows app developers to deﬁne policy-based restrictions and
conditions on ICC to and from their app. CRePE [66] ex-
tended Android with context-related access control for system
resources, where context is deﬁned as the device state and
senseable environment. TISSA [67] introduced access control
mechanisms for ﬁne-grained data sharing, such as returning
ﬁltered, fake, or empty data from calls to framework APIs.
More recently, the SE Android [68] project solved the tech-
nically complex challenge of porting SELinux-based manda-
tory access control from the desktop domain to Android. While
SE Android focused on the Android OS, FlaskDroid [70]
demonstrated how SELinux’ type enforcement can be ex-
tended into the userspace components of the Android applica-
tion framework and beneﬁt privacy protection.
443443
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
Prior work speciﬁcally addressed the lack of privilege sep-
aration between the different security principals on Android.
AdDroid [27] and AdSplit [73] both propose separating adver-
tisement code into separate processes. LayerCake [74] inves-
tigated the more general problem of secure cross-application
interface embedding on Android, e.g., integrating ad libraries
or social network plugins into the host app’s UI while miti-
gating common threats such as click fraud, overlays, or focus
stealing. Compac [72] demonstrates the applicability of stack
inspection in conjunction with ICC tagging to establish per-
component access control for Android apps.
b) Inlined Reference Monitoring: A parallel
line of
work [75], [76], [77], [78] has investigated inline reference
monitoring [104] for enforcing more ﬁne-grained and dynamic
access control policies for privacy protection. These works
were mainly motivated by the deployability beneﬁts of binary
rewriting as a foundation for IRM in contrast to OS modi-
ﬁcations, which empower end users to enhance their privacy
independently from platform developers and device vendors.
IRM solutions on Android currently make the inherent
tradeoff of abandoning a strong security boundary between
untrusted code and reference monitor, and hence their attacker
model focuses on curious-but-benign applications rather than
on malicious code. Moreover, modifying third-party code
involves legal considerations. Most recent advances in this
ﬁeld [79] introduce application virtualization techniques to
Android to avoid third-party code modiﬁcations and separate
the reference monitor from untrusted code.
3) Actors’ Roles: The platform developers are able (A1.
,
and R2. ) to integrate more advanced access control
R1.
models, to offer better privilege separation between third party
security principals, and to provide means to integrate external
security apps. The lack of support for third-party security
apps is particularly noticeable for the platform developer actor,
since Android’s security philosophy shifts responsibility for
privacy protection to end users by forcing them to grant/deny
permission requests and by allowing them to load applications
from arbitrary sources (i.e. to bypass controlled distribution
channels like markets). Furthermore, the problem of missing
privilege separation could also be alleviated by ad network
, R4. ) by refraining from clearly unacceptable
providers (A4.
behavior and by implementing security best practices.
Binary rewriting solutions for IRM currently need to be
deployed by end users (R8. ), who also need to conﬁgure
policies. Their technical approach would also allow software
distribution channels or toolchain providers to implement IRM
solutions for apps they distribute/create (R2.
and R7. ).
4) Lesson Learned: Android adopted design principles
from earlier high-assurance systems, and research has pro-
posed valuable access control extensions to their implementa-
tions on Android. Although most of the proposed OS exten-
sions are not based on a concrete requirements analysis but
rather on postulated challenges, the recent developments of
Google’s AOSP have a posteriori validated this research; and,
in fact, research results can be found in current real-world
deployments within the bounds imposed by Google’s business
model (for instance, SELinux MAC & KNOX [105], dynamic
permissions, AppOps, VPN apps, after-market ROMs). Re-
search ideas for privilege separation within app sandboxes, in
contrast, should be pushed to maturity and have to be brought
to the attention of platform developers. Like mash websites
that combine various security principals that are now privilege
separated by the browser’s sandboxing mechanims, mobile
apps that mash various security principals require an adequate
privilege separation. IRM solutions are an interim idea, but do
not take the user out of the loop (see Section IV-B) and are
limited in their security guarantees.
Since access control enforcement on Android has been
well studied, the research community should shift focus to
the canonical challenges of policy generation and veriﬁcation.
Almost no attention has been given to developing useful and
real policies. Drawing from experience on desktop systems,
policies are moving targets that require decades to develop;
research for mobile systems should support this process. In
particular, Android’s strong requirement for sharing func-
tionality between apps and the shift
to privacy protection
are unexplored for global policies. Moreover, at the moment
enforcement mechanisms on Android are implemented as best-
effort, and the history of OS security has shown the need for
verifying complex enforcement mechanisms and their policies.
Our assessment (Permission Revolution): Retroﬁtting
Android with mandatory access control has created valu-
able ideas that inﬂuenced real-world deployments. Better
privilege separation of apps should be pushed to maturity.
The research community should now refocus on open
challenges for policy generation and system veriﬁcation.
C. Webiﬁcation
An ongoing trend for mobile apps is webiﬁcation, the inte-
gration of web content into mobile apps through technologies
like WebView. Seamless integration of apps with HTML and
JavaScript content provides portability advantages for app
developers. Through its APIs, WebView allows apps a rich,
two-way interaction with the hosted web content: Apps can
invoke JavaScript within the web page, and also monitor and
intercept events in the page as well as register interfaces that
web content can invoke to use app-local content outside the
WebView sandbox. By now, mobile web apps make up 85%
of the free apps on Play [39], [37].
1) Challenges: The webiﬁcation of apps raises new security
challenges that are unique to appiﬁed mobile platforms.
Foremost, the two-way interaction between a host app and
its embedded web content requires app developers to relax the
WebView sandboxing. This enables app-to-web and web-to-
app attacks [39], [37], [34]. In app-to-web attacks, malicious
apps can inject JavaScript into hosted WebViews to extract
sensitive user information and use the WebView APIs to
navigate the WebView to untrusted websites. In web-to-app
attacks, untrusted web content (possibly also injected into an
insecure HTTP/S connection [39]) can leverage the JavaScript
bridge to the host app to escalate its privileges to the level
444444
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:11:39 UTC from IEEE Xplore.  Restrictions apply. 
of its hosting app’s process to access local system resources.
In particular, popular web app creator frameworks, such as
PhoneGap, open a large attack surface for those kind of attacks
through their large web-to-app and app-to-web interfaces. [34]
Further,it has been shown [35], [39] that data ﬂows between
apps that host different web origins can cross domains through
the default Android ICC channels, enabling cross-site scripting
and request forgery attacks by malicious apps or untrusted
web content within an app. Speciﬁcally on mobile platforms,
various means enable code to be injected into web content and
cross-site scripting attacks to be conducted [38].
2) Countermeasures: To solve the new security challenges
raised by webiﬁcation, different defense strategies have been
proposed: NoFrak [34] extends the PhoneGap framework with