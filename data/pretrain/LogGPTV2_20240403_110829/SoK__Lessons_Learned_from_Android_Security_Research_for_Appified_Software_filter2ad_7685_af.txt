### Effective Communication of Privacy Risks to End Users

To effectively inform end users about the privacy risks associated with an app, it is crucial that they can accurately perceive the risk of granting the access rights requested by the app. Early research has shown that only a small fraction of users can correctly associate privacy risks with the respective permissions [9]. One potential cause for this lack of understanding is that permissions communicate resource access but do not explain how the accessed data is processed and distributed [10]. Consequently, users may either underestimate the risks ("the app will not misuse its permissions") or overestimate them ("the app will steal all my private information") [9]. This misunderstanding allows attackers to create malicious apps that request all necessary sensitive permissions for their operations, as demonstrated by the Geinimi Trojan [90].

Apps published after Android v6.0 can request a subset of privacy-related permissions at runtime instead of at installation. This dynamic permission system aims to provide users with more contextual information and assist in their decision-making process. However, Wijesekera et al. [64] found that this desired contextual integrity—where personal information is used only in ways deemed appropriate by the user—is not always achieved. Most privacy-related permission requests occur when the user is not interacting with the app or even with the phone, and the frequency of these requests makes it impractical for users to be involved in every decision. As a result, users fail to establish the connection between the permission request and the app's functionality, and consent dialogs are only shown during the first request until manually revoked, even though subsequent permission checks might occur in a different privacy context.

### Permission Comprehension and Attention by App Developers

Android’s security design requires app developers to contribute to platform security by requesting, defining, and properly enforcing permissions to protect sensitive user data. Therefore, it is imperative that app developers understand permissions and the security tools available to them.

#### Permission Comprehension by App Developers

Several studies [12], [13], [14], [16], [17] provide insights into how app developers comprehend permissions and how the SDK supports them in creating least-privileged apps. Between 30% [13] and 44.8% [12] of the studied apps requested unnecessary permissions, violating the least-privilege principle. Additionally, some apps requested non-existent or incorrect permissions. Even developers of system apps, who have access to highly privileged and dangerous API functions, did not show a significantly better understanding of permissions [15].

The root causes of developers' incomprehension include insufficient documentation of the Android API, which does not identify all permission-protected APIs and contains errors. Confusing permission names also contribute to these misconceptions. These inconsistencies and the instability of the API hinder the creation of clear and well-developed documentation, leading to confusion about permission usage.

#### Permission Attention by App Developers

In addition to comprehension, the thoughtfulness of developers in enforcing permissions and their understanding of the mechanisms available to them have been studied. Although Android’s security design incorporates lessons from prior operating system security research [91], the fact that it allows differently privileged apps to communicate with each other has raised concerns about how unprivileged apps can escalate their privileges [17], [18], [19], [20], [21], [22], [23], [24], [15]. Various works have identified an increase in failures of app developers to properly protect their app’s IPC-exposed interfaces and to transitively enforce permissions [20]. This opens the attack surface for confused deputy attacks, such as initiating phone calls [17], hijacking ICC [19], or exfiltrating sensitive user data [23], [22]. The root cause of many of these vulnerabilities is that application components are by default exported to be IPC-callable, requiring developers to explicitly protect them with permissions or hide the components. Most developers are unaware of these conditions, indicating that Android failed to implement fail-safe defaults [91].

### Countermeasures

Recent changes in the default installer app for Google Play aim to improve permission perception for users by presenting permissions with low granularity in groups and omitting some commonly requested permissions like INTERNET. This shift in permission presentation is primarily a user experience decision rather than an enabler of user comprehension.

Research has suggested several ways to enhance the usability of permissions for both end users and developers:
- Kelley et al. [59] propose enriching permission dialogs with more detailed privacy-related information.
- Porter Felt et al. [95] suggest making the permission-granting mechanism dependent on the type of permission requested.
- Roesner et al. [96] introduce access control gadgets that allow user-driven delegation of permissions.
- Wijesekera et al. [64] suggest intelligent systems that learn users’ privacy preferences and only confront users with consent dialogs when a request is unexpected.
- Liu et al. [97] propose using a limited set of privacy profiles to simplify the list of permissions.
- Felt et al. [13] recommend improving API documentation to simplify permission requests for app developers.

System extensions have also been proposed to enhance the permission system:
- Kirin [17] detects potential misuse of permissions and identifies confused deputy apps.
- Apex [55] introduces dynamic and conditional permission enforcement.
- TaintDroid [54] uses dynamic taint tracking to reveal how apps use permission-protected data.
- Sorbet [21] models Android permissions and uncovers problems with desired security properties.
- XManDroid [57] augments permission enforcement with policy-driven access control.
- QUIRE [56] establishes provenance information along ICC call paths.
- IPC inspection [20] reduces the privileges of callees to the privileges of the caller.

WHYPER [61] and AutoCog [62] apply NLP techniques to automatically derive required permissions from app descriptions, while DescribeMe [63] generates security-centric app descriptions from app code analysis to increase user understanding.

### Actors' Roles

Platform developers (A1) and market operators (A3) are fully responsible for permission comprehension problems, as the platform enforces the current permission system and communicates privacy risks to users. Library providers (A4) contribute to the problem through their permission requests. App developers (A5) often over-privilege their apps, making them appear unnecessarily dangerous. End users (A8) tend to pay little attention to permissions and have limited options to detect misuse.

This problem could be addressed by:
- Platform developers (R1) changing their access control paradigm and avoiding identified vulnerabilities.
- Helping app developers (R5) and library providers (R4) realize security best practices through tool support [13], [58].
- App markets (R3) making permission dialogs more comprehensive and running static analyses on received app packages to adjust permissions accordingly.

### Lessons Learned

In conventional ecosystems, neither developers nor users were involved in the process of requesting or granting fine-grained permissions. Allowing developers to request and define fine-grained permissions and presenting end users with permission dialogs is theoretically sound but overburdens both parties. Research has aimed to improve permission dialogs, but none of these approaches has solved the two-sided usability and comprehension problem. Instead, we propose a clean break and a shift towards taking both users and developers out of the loop, such as automatically deriving required permissions based on app categories, descriptions, and similarities [61], [62], [63]. Another promising alternative is authorizing entire information flows instead of just access to resources.

### Permission Revolution

A dedicated line of research has explored extending alternative access-control models to the Android platform to establish more flexible, fine-grained, and mandatory control over system resources and IPC. This research follows two major directions: OS extensions and Inlined Reference Monitoring (IRM).

#### Challenges

- **Missing Privilege Separation**: Third-party ad libraries often exploit host app privileges, exhibiting dangerous behaviors such as insecure loading of code and collecting private information [26], [28], [29].
- **Ineffective Security Apps**: Android’s "all applications are created equal" philosophy means that security apps do not have higher privileges, leading to varying detection rates of malware [2], [32], [33].
- **Lack of Support for Mandatory Access Control**: Android lacks support for mandatory access control, which is essential in high-security contexts like enterprises and government sectors.

#### Countermeasures

- **Alternative Access Control Models**: Early work [65], [66], [67] introduced mechanisms for more semantically rich and dynamic access control. SE Android [68] ported SELinux-based mandatory access control to Android, and FlaskDroid [70] extended SELinux’ type enforcement to the Android application framework.
- **Inlined Reference Monitoring (IRM)**: IRM solutions [75], [76], [77], [78] enforce fine-grained and dynamic access control policies. Recent advances [79] introduce application virtualization to separate the reference monitor from untrusted code.

#### Actors' Roles

- **Platform Developers (A1, R1, R2)**: Integrate advanced access control models, offer better privilege separation, and provide means to integrate external security apps.
- **Ad Network Providers (A4, R4)**: Refrain from unacceptable behavior and implement security best practices.
- **End Users (R8)**: Deploy and configure IRM solutions, or software distribution channels and toolchain providers (R2, R7) can implement IRM solutions for distributed/created apps.

#### Lessons Learned

Android adopted design principles from earlier high-assurance systems, and research has proposed valuable access control extensions. While most proposed OS extensions are not based on concrete requirements analysis, recent developments in Google’s AOSP have validated this research. Research ideas for privilege separation within app sandboxes should be matured and brought to the attention of platform developers. IRM solutions are an interim idea but do not take the user out of the loop and have limited security guarantees. The research community should focus on policy generation and verification, drawing from experience on desktop systems.

### Webiﬁcation

Webiﬁcation, the integration of web content into mobile apps through technologies like WebView, raises new security challenges unique to appified mobile platforms.

#### Challenges

- **Two-Way Interaction**: The interaction between a host app and its embedded web content requires relaxing the WebView sandboxing, enabling app-to-web and web-to-app attacks [39], [37], [34].
- **Data Flows**: Data flows between apps hosting different web origins can cross domains through default Android IPC channels, enabling cross-site scripting and request forgery attacks [35], [39].

#### Countermeasures

- **NoFrak [34]**: Extends the PhoneGap framework to mitigate web-to-app and app-to-web attacks.
- **Other Defense Strategies**: Various defense strategies have been proposed to address the new security challenges raised by webiﬁcation.

By addressing these challenges and implementing the proposed countermeasures, the security and privacy of mobile apps can be significantly improved.