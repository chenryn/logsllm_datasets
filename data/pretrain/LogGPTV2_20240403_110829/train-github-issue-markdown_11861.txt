# Proposal
I propose these implementations:
## Deno.cacheDir()
Implementation of rust's cache_dir
## Deno.cache(path: string, options: CacheOptions)
access to `deno cache` as a method
## resolveCacheModulePath(path: string)
Native way to resolve an url to the local cache file. Either returns the
`filepath` if the file is cached or `null` if not.  
Example:
    resolveCachedModulePath("https://deno.land/std/fmt/colors.ts") // output on macOS: /User/Name/Library/Caches/deno/deps/https/deno.land/0e481eaf33c7b5f679cc7af0c476a798458854f912fe489bb77131d47e0929db
Maybe Deno needs a dedicated `std/cache` module for functions like
`resolveCachedModulePath` and other cache related stuff?
# Use case
The Deno cache system is great. For dev tools written for Deno it is important
to have access to the local files for a certain path when bundling or
compiling, else it needs to be either re-downloaded or cached with a custom
cache system.
What are your thoughts on this?
References:  
#4069  
https://denolib.gitbook.io/guide/advanced/deno_dir-code-fetch-and-cache  
https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts  
https://deno.land/manual/runtime/compiler_apis  
https://deno.land/x/cache