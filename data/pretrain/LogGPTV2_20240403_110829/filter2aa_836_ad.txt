overwrite-mode ()
Toggle overwrite mode. With an explicit positive numeric argument, switches
to overwrite mode. With an explicit non-positive numeric argument, switches to
insert mode. This command aﬀects only emacs mode; vi mode does overwrite
diﬀerently. Each call to readline() starts in insert mode.
Chapter 1: Command Line Editing
16
In overwrite mode, characters bound to self-insert replace the text at point
rather than pushing the text to the right.
Characters bound to backward-
delete-char replace the character before point with a space.
By default, this command is unbound.
1.4.4 Killing And Yanking
kill-line (C-k)
Kill the text from point to the end of the line.
backward-kill-line (C-x Rubout)
Kill backward to the beginning of the line.
unix-line-discard (C-u)
Kill backward from the cursor to the beginning of the current line.
kill-whole-line ()
Kill all characters on the current line, no matter where point is. By default,
this is unbound.
kill-word (M-d)
Kill from point to the end of the current word, or if between words, to the end
of the next word. Word boundaries are the same as forward-word.
backward-kill-word (M-DEL)
Kill the word behind point. Word boundaries are the same as backward-word.
unix-word-rubout (C-w)
Kill the word behind point, using white space as a word boundary. The killed
text is saved on the kill-ring.
unix-filename-rubout ()
Kill the word behind point, using white space and the slash character as the
word boundaries. The killed text is saved on the kill-ring.
delete-horizontal-space ()
Delete all spaces and tabs around point. By default, this is unbound.
kill-region ()
Kill the text in the current region. By default, this command is unbound.
copy-region-as-kill ()
Copy the text in the region to the kill buﬀer, so it can be yanked right away.
By default, this command is unbound.
copy-backward-word ()
Copy the word before point to the kill buﬀer. The word boundaries are the
same as backward-word. By default, this command is unbound.
copy-forward-word ()
Copy the word following point to the kill buﬀer. The word boundaries are the
same as forward-word. By default, this command is unbound.
yank (C-y)
Yank the top of the kill ring into the buﬀer at point.
Chapter 1: Command Line Editing
17
yank-pop (M-y)
Rotate the kill-ring, and yank the new top. You can only do this if the prior
command is yank or yank-pop.
1.4.5 Specifying Numeric Arguments
digit-argument (M-0, M-1, ... M--)
Add this digit to the argument already accumulating, or start a new argument.
M-- starts a negative argument.
universal-argument ()
This is another way to specify an argument. If this command is followed by one
or more digits, optionally with a leading minus sign, those digits deﬁne the ar-
gument. If the command is followed by digits, executing universal-argument
again ends the numeric argument, but is otherwise ignored. As a special case,
if this command is immediately followed by a character that is neither a digit
or minus sign, the argument count for the next command is multiplied by four.
The argument count is initially one, so executing this function the ﬁrst time
makes the argument count four, a second time makes the argument count six-
teen, and so on. By default, this is not bound to a key.
1.4.6 Letting Readline Type For You
complete (TAB)
Attempt to perform completion on the text before point. The actual completion
performed is application-speciﬁc. The default is ﬁlename completion.
possible-completions (M-?)
List the possible completions of the text before point.
insert-completions (M-*)
Insert all completions of the text before point that would have been generated
by possible-completions.
menu-complete ()
Similar to complete, but replaces the word to be completed with a single match
from the list of possible completions. Repeated execution of menu-complete
steps through the list of possible completions, inserting each match in turn.
At the end of the list of completions, the bell is rung (subject to the setting
of bell-style) and the original text is restored. An argument of n moves n
positions forward in the list of matches; a negative argument may be used to
move backward through the list. This command is intended to be bound to
TAB, but is unbound by default.
menu-complete-backward ()
Identical to menu-complete, but moves backward through the list of possible
completions, as if menu-complete had been given a negative argument.
delete-char-or-list ()
Deletes the character under the cursor if not at the beginning or end of the line
(like delete-char). If at the end of the line, behaves identically to possible-
completions. This command is unbound by default.
Chapter 1: Command Line Editing
18
1.4.7 Keyboard Macros
start-kbd-macro (C-x ()
Begin saving the characters typed into the current keyboard macro.
end-kbd-macro (C-x ))
Stop saving the characters typed into the current keyboard macro and save the
deﬁnition.
call-last-kbd-macro (C-x e)
Re-execute the last keyboard macro deﬁned, by making the characters in the
macro appear as if typed at the keyboard.
1.4.8 Some Miscellaneous Commands
re-read-init-file (C-x C-r)
Read in the contents of the inputrc ﬁle, and incorporate any bindings or variable
assignments found there.
abort (C-g)
Abort the current editing command and ring the terminal’s bell (subject to the
setting of bell-style).
do-uppercase-version (M-a, M-b, M-x, ...)
If the metaﬁed character x is lowercase, run the command that is bound to the
corresponding uppercase character.
prefix-meta (ESC)
Metafy the next character typed. This is for keyboards without a meta key.
Typing ‘ESC f’ is equivalent to typing M-f.
undo (C-_ or C-x C-u)
Incremental undo, separately remembered for each line.
revert-line (M-r)
Undo all changes made to this line. This is like executing the undo command
enough times to get back to the beginning.
tilde-expand (M-~)
Perform tilde expansion on the current word.
set-mark (C-@)
Set the mark to the point. If a numeric argument is supplied, the mark is set
to that position.
exchange-point-and-mark (C-x C-x)
Swap the point with the mark. The current cursor position is set to the saved
position, and the old cursor position is saved as the mark.
character-search (C-])
A character is read and point is moved to the next occurrence of that character.
A negative count searches for previous occurrences.
character-search-backward (M-C-])
A character is read and point is moved to the previous occurrence of that
character. A negative count searches for subsequent occurrences.
Chapter 1: Command Line Editing
19
skip-csi-sequence ()
Read enough characters to consume a multi-key sequence such as those deﬁned
for keys like Home and End. Such sequences begin with a Control Sequence
Indicator (CSI), usually ESC-[. If this sequence is bound to "\e[", keys pro-
ducing such sequences will have no eﬀect unless explicitly bound to a readline
command, instead of inserting stray characters into the editing buﬀer. This is
unbound by default, but usually bound to ESC-[.
insert-comment (M-#)
Without a numeric argument, the value of the comment-begin variable is in-
serted at the beginning of the current line. If a numeric argument is supplied,
this command acts as a toggle: if the characters at the beginning of the line
do not match the value of comment-begin, the value is inserted, otherwise the
characters in comment-begin are deleted from the beginning of the line. In
either case, the line is accepted as if a newline had been typed.
dump-functions ()
Print all of the functions and their key bindings to the Readline output stream.
If a numeric argument is supplied, the output is formatted in such a way that
it can be made part of an inputrc ﬁle. This command is unbound by default.
dump-variables ()
Print all of the settable variables and their values to the Readline output stream.
If a numeric argument is supplied, the output is formatted in such a way that
it can be made part of an inputrc ﬁle. This command is unbound by default.
dump-macros ()
Print all of the Readline key sequences bound to macros and the strings they
output. If a numeric argument is supplied, the output is formatted in such a
way that it can be made part of an inputrc ﬁle. This command is unbound by
default.
emacs-editing-mode (C-e)
When in vi command mode, this causes a switch to emacs editing mode.
vi-editing-mode (M-C-j)
When in emacs editing mode, this causes a switch to vi editing mode.
1.5 Readline vi Mode
While the Readline library does not have a full set of vi editing functions, it does contain
enough to allow simple editing of the line. The Readline vi mode behaves as speciﬁed in
the posix 1003.2 standard.
In order to switch interactively between emacs and vi editing modes, use the command
M-C-j (bound to emacs-editing-mode when in vi mode and to vi-editing-mode in emacs
mode). The Readline default is emacs mode.
When you enter a line in vi mode, you are already placed in ‘insertion’ mode, as if you
had typed an ‘i’. Pressing ESC switches you into ‘command’ mode, where you can edit the
text of the line with the standard vi movement keys, move to previous history lines with
‘k’ and subsequent lines with ‘j’, and so forth.
Appendix A: GNU Free Documentation License
20
Appendix A GNU Free Documentation License
Version 1.3, 3 November 2008
Copyright c⃝ 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
http://fsf.org/
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
0. PREAMBLE
The purpose of this License is to make a manual, textbook, or other functional and
useful document free in the sense of freedom: to assure everyone the eﬀective freedom
to copy and redistribute it, with or without modifying it, either commercially or non-
commercially. Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible for modiﬁcations
made by others.
This License is a kind of “copyleft”, which means that derivative works of the document
must themselves be free in the same sense. It complements the GNU General Public
License, which is a copyleft license designed for free software.
We have designed this License in order to use it for manuals for free software, because
free software needs free documentation: a free program should come with manuals
providing the same freedoms that the software does. But this License is not limited to
software manuals; it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book. We recommend this License principally for
works whose purpose is instruction or reference.
1. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work, in any medium, that contains a
notice placed by the copyright holder saying it can be distributed under the terms
of this License. Such a notice grants a world-wide, royalty-free license, unlimited in
duration, to use that work under the conditions stated herein.
The “Document”,
below, refers to any such manual or work. Any member of the public is a licensee, and
is addressed as “you”. You accept the license if you copy, modify or distribute the work
in a way requiring permission under copyright law.
A “Modiﬁed Version” of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modiﬁcations and/or translated into
another language.
A “Secondary Section” is a named appendix or a front-matter section of the Document
that deals exclusively with the relationship of the publishers or authors of the Document
to the Document’s overall subject (or to related matters) and contains nothing that
could fall directly within that overall subject. (Thus, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any mathematics.) The
relationship could be a matter of historical connection with the subject or with related
matters, or of legal, commercial, philosophical, ethical or political position regarding
them.
The “Invariant Sections” are certain Secondary Sections whose titles are designated, as
being those of Invariant Sections, in the notice that says that the Document is released
Appendix A: GNU Free Documentation License
21
under this License. If a section does not ﬁt the above deﬁnition of Secondary then it is
not allowed to be designated as Invariant. The Document may contain zero Invariant
Sections. If the Document does not identify any Invariant Sections then there are none.
The “Cover Texts” are certain short passages of text that are listed, as Front-Cover
Texts or Back-Cover Texts, in the notice that says that the Document is released under
this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may
be at most 25 words.
A “Transparent” copy of the Document means a machine-readable copy, represented
in a format whose speciﬁcation is available to the general public, that is suitable for
revising the document straightforwardly with generic text editors or (for images com-
posed of pixels) generic paint programs or (for drawings) some widely available drawing
editor, and that is suitable for input to text formatters or for automatic translation to
a variety of formats suitable for input to text formatters. A copy made in an otherwise
Transparent ﬁle format whose markup, or absence of markup, has been arranged to
thwart or discourage subsequent modiﬁcation by readers is not Transparent. An image
format is not Transparent if used for any substantial amount of text. A copy that is
not “Transparent” is called “Opaque”.
Examples of suitable formats for Transparent copies include plain ascii without
markup, Texinfo input format, LaTEX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modiﬁcation. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited
only by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for output purposes only.
The “Title Page” means, for a printed book, the title page itself, plus such following
pages as are needed to hold, legibly, the material this License requires to appear in the
title page. For works in formats which do not have any title page as such, “Title Page”
means the text near the most prominent appearance of the work’s title, preceding the
beginning of the body of the text.
The “publisher” means any person or entity that distributes copies of the Document
to the public.
A section “Entitled XYZ” means a named subunit of the Document whose title either