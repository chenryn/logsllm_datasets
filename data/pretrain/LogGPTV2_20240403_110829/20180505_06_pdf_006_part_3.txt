SQL> CREATE OR REPLACE PACKAGE BODY PCK_CHINOOK_REPORTS
AS
PROCEDURE GET_ARTIST_BY_ALBUM(P_ARTIST_ID ALBUM.TITLE%TYPE)
IS
V_ARTIST_NAME ARTIST.NAME%TYPE;
BEGIN
SELECT ART.NAME INTO V_ARTIST_NAME
FROM ALBUM ALB JOIN ARTIST ART USING(ARTISTID)
WHERE ALB.TITLE=P_ARTIST_ID;
DBMS_OUTPUT.PUT_LINE('ArtistName: '||V_ARTIST_NAME);
END;
PROCEDURE CUST_INVOICE_BY_YEAR_ANALYZE
AS
V_CUST_GENRES VARCHAR2(200);
BEGIN
FOR V IN(SELECT CUSTOMERID, CUSTNAME, LOW_YEAR, HIGH_YEAR, CUST_AVG
FROM TMP_CUST_INVOICE_ANALYSE)
LOOP
IF SUBSTR(V.LOW_YEAR, -4) > SUBSTR(V.HIGH_YEAR , -4) THEN
SELECT LISTAGG(GENRE, ',') WITHIN GROUP (ORDER BY
GENRE) INTO V_CUST_GENRES
FROM (SELECT DISTINCT
FUNC_GENRE_BY_ID(TRC.GENREID) AS GENRE
FROM TMP_CUST_INVOICE_ANALYSE TMPTBL JOIN INVOICE INV
USING(CUSTOMERID)
JOIN INVOICELINE INVLIN
ON INV.INVOICEID = INVLIN.INVOICEID
JOIN TRACK TRC
ON TRC.TRACKID = INVLIN.TRACKID
WHERE CUSTOMERID=V.CUSTOMERID);
DBMS_OUTPUT.PUT_LINE('Customer: '||UPPER(V.CUSTNAME)||' -
Offer a Discount According To Preferred Genres:
'||UPPER(V_CUST_GENRES));
END IF;
END LOOP;
END;
END;
SQL> EXEC PCK_CHINOOK_REPORTS.GET_ARTIST_BY_ALBUM();
SQL> EXEC PCK_CHINOOK_REPORTS.CUST_INVOICE_BY_YEAR_ANALYZE;
The above examples demonstrate basic Oracle PL/SQL procedure and function capabilities. Oracle PL/SQL
provides a vast number of features and capabilities that are not within the scope of this document.
For additional details:
https://docs.oracle.com/cd/E18283_01/appdev.112/e17126/create_procedure.htm
https://docs.oracle.com/database/121/LNPLS/create_procedure.htm
https://docs.oracle.com/cd/E18283_01/appdev.112/e17126/create_function.htm
https://docs.oracle.com/database/121/LNPLS/create_function.htm#LNPLS01370
https://docs.oracle.com/database/121/LNPLS/create_package.htm#LNPLS01371
37
Migration to: PostgreSQL Functions
[Back to TOC]
Overview
PostgreSQL version 9.6 provides support for both stored procedures and stored functions using the
CREATE
statement. To emphasize, the procedural statements used by PostgreSQL version 9.6 support the
FUNCTION
statement only. The statement is not compatible with this
CREATE FUNCTION CREATE PROCEDURE
PostgreSQL version.
PL/pgSQL is the main database programming language used for migrating from Oracle’s PL/SQL code.
PostgreSQL support additional programming languages, also available in Amazon Aurora PostgreSQL:
• PL/pgSQL
• PL/Tcl
• PL/Perl
Use the command to view all available extensions for Amazon Aurora.
psql=>show.rds.extensions
Interchangeability Between Oracle PL/SQL and PostgreSQL PL/pgSQL
PostgreSQL’s PL/pgSQL language is often considered the ideal candidate to migrate from Oracle’s PL/SQL code
because many of the Oracle PL/SQL syntax elements are supported by PostgreSQL PL/pgSQL code.
For example, Oracle’s statement is supported by PostgreSQL
CREATE OR REPLACE PROCEDURE
PL/pgSQL. Many other PL/SQL syntax elements are also supported making PostgreSQL and PL/pgSQL natural
alternatives when migrating from Oracle.
PostgreSQL create function privileges
To create a function, a user must have privilege on the language. When creating a function, a language
USAGE
parameter can be specified as shown in the examples.
Examples
Converting Oracle Stored Procedures and Functions to PostgreSQL PL/pgSQL:
1. Use the PostgreSQL command to create a new function named :
CREATE FUNCTION FUNC_ALG
psql=> CREATE OR REPLACE FUNCTION FUNC_ALG(P_NUM NUMERIC)
RETURNS NUMERIC
AS $$
BEGIN
RETURN P_NUM * 2;
END; $$
LANGUAGE PLPGSQL;
• Using a statement creates a new function, or replaces an existing
CREATE OR REPLACE
function, with these limitations:
- You cannot change the function name or argument types.
- The statement does not allow changing the existing function return type.
- The user must own the function to replace it.
38
• is implemented similarly to Oracle’s PL/SQL parameter.
INPUT parameter (P_NUM) INPUT
• The signs are used to prevent the need to use single-quoted string escape elements. With the
$$
sign, there is no need to use escape characters in the code when using single quotation marks ( '
$$
). The sign appears after the keyword and after the function keyword .
$$ AS END
• Use the parameter to specify the language for the created function.
LANGUAGE PLPGSQL
2. Convert the Oracle PL/SQL function to PostgreSQL PL/pgSQL:
EMP_SAL_RAISE
psql=> CREATE OR REPLACE FUNCTION EMP_SAL_RAISE
(IN P_EMP_ID DOUBLE PRECISION, IN SAL_RAISE DOUBLE PRECISION)
RETURNS VOID
AS $$
DECLARE
V_EMP_CURRENT_SAL DOUBLE PRECISION;
BEGIN
SELECT SALARY INTO STRICT V_EMP_CURRENT_SAL
FROM EMPLOYEES WHERE EMPLOYEE_ID = P_EMP_ID;
UPDATE EMPLOYEES
SET SALARY = V_EMP_CURRENT_SAL + SAL_RAISE
WHERE EMPLOYEE_ID = P_EMP_ID;
RAISE DEBUG USING MESSAGE := CONCAT_WS('', 'NEW SALARY FOR EMPLOYEE ID: ', P_EMP_ID, ' IS
', (V_EMP_CURRENT_SAL + SAL_RAISE));
EXCEPTION
WHEN OTHERS THEN
RAISE USING ERRCODE := '20001', MESSAGE :=
CONCAT_WS('', 'AN ERROR WAS ENCOUNTERED - ', SQLSTATE, ' -ERROR-
', SQLERRM);
END; $$
LANGUAGE PLPGSQL;
psql=> select emp_sal_raise(200, 1000);
3. Convert the Oracle PL/SQL function to PostgreSQL PL/pgSQL:
EMP_PERIOD_OF_SERVICE_YEAR
psql=> CREATE OR REPLACE FUNCTION EMP_PERIOD_OF_SERVICE_YEAR
(IN P_EMP_ID DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS $$
DECLARE
V_PERIOD_OF_SERVICE_YEARS DOUBLE PRECISION;
BEGIN
SELECT
EXTRACT (YEAR FROM NOW()) - EXTRACT (YEAR FROM (HIRE_DATE))
INTO STRICT V_PERIOD_OF_SERVICE_YEARS
FROM EMPLOYEES
WHERE EMPLOYEE_ID = P_EMP_ID;
RETURN V_PERIOD_OF_SERVICE_YEARS;
END; $$
LANGUAGE PLPGSQL;
psql=> SELECT EMPLOYEE_ID,
FIRST_NAME,
EMP_PERIOD_OF_SERVICE_YEAR(EMPLOYEE_ID) AS
PERIOD_OF_SERVICE_YEAR
FROM EMPLOYEES;
39
Oracle Packages and Package Bodies
PostgreSQL version 9.6 does not support Oracle Packages and Package Bodies. All PL/SQL objects must be
converted to PostgreSQL functions. The following examples describe how the Amazon Schema Conversion
Tool (SCT) handles Oracle Packages and Package Body names:
Oracle:
• Package Name:
PCK_CHINOOK_REPORTS
• Package Body:
GET_ARTIST_BY_ALBUM
SQL> EXEC PCK_CHINOOK_REPORTS.GET_ARTIST_BY_ALBUM('');
PostgreSQL (converted using Amazon SCT):
• The sign separates the package and the package name.
$
psql=> SELECT PCK_CHINOOK_REPORTS$GET_ARTIST_BY_ALBUM('');
Examples
Convert an Oracle Package and Package Body to PostgreSQL PL/pgSQL:
1. Oracle Package - Oracle Package Body -
PCK_CHINOOK_REPORT, GET_ARTIST_BY_ALBUM:
psql=> CREATE OR REPLACE FUNCTION
chinook."PCK_CHINOOK_REPORTS$GET_ARTIST_BY_ALBUM"
(p_artist_id text)
RETURNS void
LANGUAGE plpgsql
AS $function$
DECLARE
V_ARTIST_NAME CHINOOK.ARTIST.NAME%TYPE;
BEGIN
SELECT
art.name
INTO STRICT V_ARTIST_NAME
FROM chinook.album AS alb
JOIN chinook.artist AS art
USING (artistid)
WHERE alb.title = p_artist_id;
RAISE DEBUG USING MESSAGE := CONCAT_WS('', 'ArtistName: ',
V_ARTIST_NAME);
END;
$function$;
-- Procedures (Packages) Verification
psql=> set client_min_messages = 'debug';
-- Equivalent to Oracle SET SERVEROUTPUT ON
psql=> select chinook.pck_chinook_reports$get_artist_by_album('Fireball’);
40
2. Oracle Package - Oracle Package Body -
PCK_CHINOOK_REPORTS, CUST_INVOICE_BY_YEAR_ANALYZE:
psql=> CREATE OR REPLACE FUNCTION
chinook."pck_chinook_reports$cust_invoice_by_year_analyze"()
RETURNS void
LANGUAGE plpgsql
AS $function$
DECLARE
v_cust_genres CHARACTER VARYING(200);
v RECORD;
BEGIN
FOR v IN
SELECT
customerid, custname, low_year, high_year, cust_avg
FROM chinook.tmp_cust_invoice_analyse
LOOP
IF SUBSTR(v.low_year, - 4) > SUBSTR(v.high_year, - 4) THEN
-- Altering Oracle LISTAGG Function With PostgreSQL STRING_AGG
Function
select string_agg(genre, ',') into v_cust_genres
from (
select distinct
chinook.func_genre_by_id(trc.genreid)
as genre
from chinook.tmp_cust_invoice_analyse tmptbl
join chinook.INVOICE inv using(customerid)
join chinook.INVOICELINE invlin
on inv.invoiceid = invlin.invoiceid
join chinook.TRACK trc
on trc.trackid = invlin.trackid
where customerid=v.CUSTOMERID) a;
-- PostgreSQL Equivalent To Oracle DBMS_OUTPUT.PUT_LINE()
RAISE DEBUG USING MESSAGE := CONCAT_WS('', 'Customer: ',
UPPER(v.custname), ' - Offer a Discount According To Preferred
Genres: ', UPPER(v_cust_genres));
END IF;
END LOOP;
END;
$function$;
-- Executing
psql=> SELECT chinook.pck_chinook_reports$cust_invoice_by_year_analyze();
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createfunction.html
https://www.postgresql.org/docs/9.6/static/plpgsql.html
https://www.postgresql.org/docs/9.6/static/xplang.html
https://www.postgresql.org/docs/9.6/static/xfunc-sql.html
41
Migrating from: Oracle UDFs
[Back to TOC]
Overview
You can create an Oracle User-Defined Function (UDF) using PL/SQL, Java, or C. UDFs are useful for providing
functionality not available in SQL or SQL built-in functions. They can appear in your SQL statements wherever
built-in SQL functions appear.
UDFs Usage:
• Can be used to return a single value from a statement (scalar function).
SELECT
• Can be used while performing DML operations.
• Can be used in and
WHERE, GROUP BY, ORDER BY, HAVING, CONNECT BY, START
clauses.
WITH
Example
Create a simple Oracle UDF that receives each employee’s and values as INPUT
HIRE_DATE SALARY
parameters and calculates the overall salary over the employee’s years of service for the company.
SQL> CREATE OR REPLACE FUNCTION TOTAL_EMP_SAL_BY_YEARS
( p_hire_date DATE, p_current_sal NUMBER)
RETURN NUMBER
AS
v_year s_of_service NUMBER;
v_total_sal_by_years NUMBER;
BEGIN
SELE CT EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM to_date(p_hire_date))
INTO v_years_of_service FROM dual;
v_total_sal_by_years:=p_current_sal*v_years_of_service;
RETURN v_total_sal_by_years;
END;
/
-- Ver ifying
SQL> SELECT EMPLOYEE_ID,
FIRST_NAME,
TOTAL_EMP_SAL_BY_YEARS(HIRE_DATE, SALARY)AS TOTAL_SALARY
FROM EMPLOYEES; 2 3 4
EMPLOYEE_ID FIRST_NAME TOTAL_SALARY
------ ----- -------------------- ------------
100 Steven 364000
101 Neena 204000
102 Lex 272000
103 Alexander 99000
104 Bruce 60000
105 David 57600
…
For additional details:
https://docs.oracle.com/cd/E24693_01/server.11203/e17118/functions256.htm
42
Migration to: PostgreSQL User-Defined Functions
[Back to TOC]
Overview
PostgreSQL supports the creation of User-Defined Functions using the statement. The
CREATE FUNCTION
PostgreSQL extended SQL language, PL/pgSQL, is the primary language to use while migrating from Oracle’s
PL/SQL User-Defined Functions.
PostgreSQL Create Function Privileges
To create a function, a user must have USAGE privilege on the language.
Example
Convert the Oracle User-Defined Function from the previous Oracle section to a PostgreSQL PL/pgSQL
function:
psql=> CREATE OR REPLACE FUNCTION total_emp_sal_by_years
(P_HIRE_DATE DATE, P_CURRENT_SAL NUMERIC)
RETUR NS NUMERIC
AS
$BODY$
DECLA RE
V_YEARS_OF_SERVICE NUMERIC;
V_TOTAL_SAL_BY_YEARS NUMERIC;
BEGIN
SELECT EXTRACT(YEAR FROM NOW()) - EXTRACT(YEAR FROM
(P_HI RE_DATE)) INTO V_YEARS_OF_SERVICE;
V_TOTAL_SAL_BY_YEARS:=P_CURRENT_SAL*V_YEARS_OF_SERVICE;
RETU RN V_TOTAL_SAL_BY_YEARS;
END;
$BODY$
LANGUAGE PLPGSQL;
psql=> SELECT EMPLOYEE_ID,
FIRST_NAME,
TOTA L_EMP_SAL_BY_YEARS(HIRE_DATE, SALARY)AS TOTAL_SALARY
FROM EMPLOYEES;
employee_id | first_name | total_salary
-------------+-------------+--------------
100 | Steven | 364000.00
101 | Neena | 204000.00
102 | Lex | 272000.00
103 | Alexander | 99000.00
104 | Bruce | 60000.00
105 | David | 57600.00
106 | Valli | 52800.00
107 | Diana | 42000.00
…
For additional details:
https://www.postgresql.org/docs/current/static/xfunc.html
https://www.postgresql.org/docs/9.6/static/sql-createfunction.html
http://docs.aws.amazon.com/SchemaConversionTool/latest/userguide/Welcome.html
43
Migrating from: Oracle UTL_FILE
[Back to TOC]
Overview
Oracle’s PL/SQL package enables you to read and write files stored outside of the database server,
UTL_FILE
such as files stored on the O/S, your database server, or a connected storage volume. The
. and . are procedures within the
UTL_FILE.FOPEN, UTL_FILE GET_LINE, UTL_FILE PUT_LINE
package used to open, read, and write files.
UTL_FILE
Example
Run an anonymous PL/SQL block that reads a single line from file1 and writes it to file2.
• Use to create a handle for the file.
UTL_FILE.FILE_TYPE
• Use to open streamable access to the file and specify:
UTL_FILE.FOPEN
The logical Oracle directory object that was created pointing to the O/S folder where the file
o
resides.
The file name.
o
The file access mode:
o
 A: append mode.
 W: write mode.
• Use to read a line from the input file into a variable.
UTL_FILE.GET_LINE
• Use to write a single line to the output file.
UTL_FILE.PUT_LINE
DECLARE
strString1 VARCHAR2(32767);
fileFile1 UTL_FILE.FILE_TYPE;
BEGIN
fileFile1 := UTL_FILE.FOPEN('FILES_DIR','File1.tmp','R');
UTL_FILE.GET_LINE(fileFile1,strString1);
UTL_FI LE.FCLOSE(fileFile1);
fileFi le1 := UTL_FILE.FOPEN('FILES_DIR','File2.tmp','A');
utl_file.PUT_LINE(fileFile1,strString1);
utl_file.fclose(fileFile1);
END;
/
For additional details:
https://docs.oracle.com/database/121/ARPLS/u_file.htm
44
Migration to:
Amazon Aurora PostgreSQL does not support a direct comparable alternative for Oracle UTL_FILE.
45
Migrating from: Oracle JSON Document Support
[Back to TOC]
Overview
JSON documents are based on JavaScript syntax and allow serialization of objects. Oracle support for JSON
document storage and retrieval enables you to extend the database capabilities beyond purely relational use-
cases and allows the Oracle database to support semi-structured data. Oracle JSON support also includes full-
text search and several other functions dedicated to querying JSON documents.
Additional details:
http://www.oracle.com/technetwork/database/soda-wp-2531583.pdf
Examples
Create a table to store a JSON document in a column and insert a JSON document into the table:
data
CREATE TABLE json_docs (
id RAW(16) NOT NULL,
data CLOB,
CONSTRAINT json_docs_pk PRIMARY KEY (id),
CONSTRAINT json_docs_json_chk CHECK (data IS JSON)
);
INSERT INTO json_docs (id, data)
VALUES (SYS_GUID(),
'{
"FName" : "John",
"LName" : "Doe",
"Address" : {
"Street" : "101 Street",
"City" : "City Name",
"Country" : "US",
"Pcode" : "90210"
}
}');
Unlike XML data, which is stored using the SQL data type XMLType, JSON data is stored in an Oracle Database
using the SQL data types VARCHAR2, CLOB, and BLOB. Oracle recommends that you always use
an is_json check constraint to ensure the column values are valid JSON instances. Or, add a constraint at the
table-level ( ).