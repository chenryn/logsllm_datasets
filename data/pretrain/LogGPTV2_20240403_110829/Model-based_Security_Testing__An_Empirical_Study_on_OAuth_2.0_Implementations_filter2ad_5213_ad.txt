cation for its applications while using the OAuth services provided
by other leading IdPs. For example, while AOL is an application
of Facebook, it also offers OAuth-based authentication service to
other applications on its own (AOL) platform. Unfortunately, we
have discovered that, if a dual-role IdP could not implement OAuth
correctly (as an application) for its leading IdP(s), all applications
on the dual-role IdP’s platform, no matter whether their implemen-
tations are secure or not, would be affected. An attacker can thus
signiﬁcantly amplify the impact of his attacks by targeting OAuth
implementation ﬂaws in a dual-role IdP platform instead of attack-
ing an individual 3rd party application.
In particular, there is a
strong motivation for any IdP to become a dual-role IdP to facili-
tate new users to login, since many users may only have an account
in a subset of the leading IdPs. As such, the dual-role IdP is quite
common in practice. For example, 10 out of 13 Chinese IdPs under
study are dual-role ones.
On the other hand, a dual-role IdP often supports multiple lead-
ing IdPs as its providers. For example, Sohu, the 8th most popular
Chinese websites ranked by Alexa, provides 9 leading IdPs for its
users to login. Another observation is that a dual-role IdP may
implement OAuth securely for some leading IdPs while fail to do
so for others. Combining these two ﬁndings, it is very likely for
an attacker to ﬁnd a vulnerable OAuth implementation of a dual-
role IdP for one of its leading IdPs. For example, 8 out of the 10
Chinese dual-role IdPs are vulnerable due to their incorrect OAuth
implementation for other leading IdPs.
6.2.2 Security Implications and Remedies
Such an ampliﬁcation attack is quite general in nature and can
be applied in many scenarios. We demonstrate its power by the
following two examples. Firstly, Jing [24] shows that an attacker
can obtain the victim’s code by the covert (open) redirect attack.
Equipped with this code, Eve can log into the application as the
victim by substituting the code with the victim’s one in Step 5 of
Fig. 1. To hijack a large number of application accounts, Eve would
normally need to ﬁnd an open redirect URI for every application
which is time consuming and may not be even feasible as it is un-
likely for small/ simple applications to have such a URI. However,
if Eve can ﬁnd the URI for a ﬂawed dual-role IdP, she can then ob-
tain the code to log into the dual-role IdP as the victim. Since the
victim may use the dual-role IdP to authenticate many applications
in advance, the attacker can then easily log into these applications
as the victim via a dual-role IdP.
More interestingly, the dual-role IdP can aggravate some seem-
ingly mild problems. For example, the ‘Login CSRF’ attack logs
the victim into the application as the attacker. If the application
becomes the dual-role IdP, then Alice may bind the attacker’s ac-
count on the dual-role IdP to her own application account. For this
binding step, the attacker can even exploit the feature of automatic
authorization to authorize many applications in advance to avoid
any interactions with the victim. Thereafter, the attacker can login
these applications as the victim without being detected.
Apart from these examples, this ampliﬁcation attack can lead to
more possibilities depending on speciﬁc use cases. To prevent the
aforementioned ampliﬁcation attack, a dual-role IdP must provide
a secure SSO service for applications on its own platform and im-
plement OAuth correctly for all of leading IdPs’ OAuth service it
supports.
6.3 Discovered Vulnerability 3: Failure to Re-
voke Authorization
6.3.1 Observed Results
As discussed in Section 4.2.2, we rollback the system to the pre-
vious state (e.g., State S3) and then try to visit the next state (e.g.,
State S5). By this way, we discover a deviation from the normal
execution sequence (S3 → S4 → S5 → ...) to an abnormal be-
havior (S3 → S5 → ...), which leads to an authorization violation
since the attacker can bypass the authorization step. In other words,
IdP would automatically issue a code (State S5) for a unauthorized
application when receiving the authorization request (R4 in Fig. 3),
as long as this application has been authorized once (but now has
6.4.2 Security Implications
While it is usually difﬁcult for an “ordinary” attacker to sit on
the path and eavesdrop the user’s communication, if the commu-
nication is forced to ﬂow through a on-path device controlled by a
monitoring authority as in the cases of the Great Firewall (GFW)
or Great Cannon (GC) [28] of China (GFW), then the monitoring
authority can readily access to the IdP or gain control of App which
is supposed to be outside its jurisdiction. Note that this new exploit
only requires the following two conditions and does not need any
direct involvement from the App or IdP.
1. The network trafﬁc to/from either the IdP or the App should
pass the monitoring device of the authority.
2. The trafﬁc passed through the authority should not be pro-
tected by TLS.
For the former, it is difﬁcult for a normal user to know in advance
whether an IdP or App, especially for mobile applications/ services,
is hosted behind the monitoring device of the authority. For the lat-
ter, our study shows that 91.24% OAuth-based applications inside
China do not adopt TLS to protect their OAuth sessions. Depending
on whether the App or the IdP is hosted inside the on-path moni-
toring authority, there can be two different scenarios.
1. Gain Access to IdP outside the Jurisdiction of the Monitoring
Authority. In this case, the App is hosted behind the on-path
monitoring device of the authority, who can eavesdrop the ac-
cess token to access to user’s data hosted by IdP. Worse still,
with on-path devices like the recently reported Great Cannon
of China, one can readily tamper the OAuth user request and
launch large-scale App impersonation attacks [21] to acquire
the access tokens of the victims in a whole-sale manner.
2. Gain Control of App outside the Jurisdiction of the Monitoring
Authority. If the IdP is behind the on-path monitoring device
of the authority, the authority can directly eavesdrop the iden-
tity credentials (e.g., code or access token) issued by the IdP
at Step 4 of Fig. 1. We indeed observe some major IdPs do not
adopt TLS in this step. As a result, the monitoring authority
can use the credential to log into an application as the user and
gain the full control of the user’s offshore application account
such as checking the user’s activities on the application.
6.5 Rediscover Existing Vulnerabilities
In addition to the discovery of the new vulnerabilities and ex-
ploits discussed above, OAuthTester has also successfully rediscov-
ered existing OAuth security ﬂaws during our automated vulnera-
bility assessment. Such existing loopholes include those caused
by the 4 vulnerabilities discovered by SSOScan [42], 5 discovered
by AuthScan [4], 4 presented in [37], the App Impersonation at-
tack [21] and covert redirect [24]. Since other vulnerabilities have
been well investigated, we only demonstrate two more recent at-
tacks, namely, the App impersonation and covert redirect attack,
to show the power of OAuthTester. OAuthTester can recoganize
the system is in a wrong state when fuzzing the redirect_uri and
response_type parameters. In addition, the properties of these two
parameters are changed.
After the debut of these two vulnerabilities, Facebook and Sina
have provided corresponding ﬁxes, as shown in Fig. 7, by allow-
ing applications to restrict the redirect_uri and the response_type.
Despite these efforts, there are still 62.69% and 89.60% of tested
applications vulnerable to these two attacks, respectively.
7. DISCUSSIONS
Owing to the relatively small set of possible state transitions and
request/ response parameters, our proposed model-building/ test-
ing approach turns out to be effective to discover vulnerabilities of
Figure 6: No TLS of Misused STATE Parameter
been revoked). Speciﬁcally, we have identiﬁed such a logic ﬂaw
for speciﬁc applications in cooperation with Sina or Renren.
Security Implications and Remedies
6.3.2
This logic ﬂaw can lead to unauthorized access to the user re-
source hosted by IdP. After revoking authorization, the original ac-
cess token has become invalid and the App cannot use it to access
user’s data anymore. However, the App may exploit this logic ﬂaw
to obtain a fresh token (or activate the original one) as follows: 1).
When the victim visits the application, the application sends an au-
thorization URI (R4 in Fig. 3) to IdP via the victim’s browser. 2).
As Sina and Renren fail to completely validate the status of the
application, they mistakenly assume that the application has been
authorized (not revoked). Therefore, Sina and Renren exploit the
automatic authorization feature to issue a fresh access token (and
activate the invalid one) to the application without the user’s con-
ﬁrmation and awareness. By this way, an application can obtain an
access token to stealthily access the user’s information again.
As no interactions are required, the user cannot realize such an
attack unless he checks the App Management Page8 carefully. Worse
still, suppose the user can realize that he is under attack, no mech-
anism can be employed to protect himself. We ﬁnd that even when
the user changes his password in IdP, the issued access token is still
valid and the attack steps have not been interfered. In this sense,
the ultimate goal of OAuth has been totally broken since the appli-
cation can access the user resource without authorization.
The failure in revoking previous authorization has been conﬁrmed
by Sina who explained that this problem was a side-effect of special
cooperation between Sina and some privileged applications on the
platform. Although we only identiﬁed two vulnerable applications
for Renren and one for Sina, we expect more applications with this
loophole exist given the prevalence of privileged applications [21]
on those platforms. To prevent this logic ﬂaw, IdP should make
complete validations for all applications, no matter whether they
are in special cooperations or not.
6.4 New Discoveries on the Failure to Adopt
TLS Protection
6.4.1 Observed Results
The security of OAuth critically relies on the usage of TLS. As
shown in Fig. 6, however, 82.96% of the applications under study
do not deploy the TLS scheme. It is well-known that the lack of
TLS allows an on-path attacker to eavesdrop the conﬁdential code
or access token. With such information, the attacker then can either
login the application as the victim or retrieve the victim’s data [37]
hosted in the IdP. Although this is an old problem, we discuss below
new exploits of this vulnerability.
8This page would show all the authorized applications excluding
the applications that have been revoked authorization.
FacebookSinaRenrenTencentWeiboAverage020406080100Identity ProviderPercentage of Apps (%)  No TLS of Redirection Endpoint No TLS of Misused STATE Parameterhave employed similar schemes to analyze the security of other
Single-Sign-On protocols including OpenID, SAML and Facebook
Connect. While these studies mainly focused on the speciﬁcation
analyses, our goal is to discover security problems caused by im-
plementation ﬂaws in practice.
Despite the power of model checking, many practical loopholes
remain undiscovered due to different interpretations of the ambigu-
ous speciﬁcation as shown in [10]. To clarify the speciﬁcation
as well as implementation subtleties, Wang et al. [40] utilized the
program veriﬁcation techniques to analyze the recommended soft-
ware development kits (SDK) provided by IdPs and showed that the
SDKs often contain hidden, implicit assumptions. Wang et al. [39]
recovered important semantic information from the network trafﬁc
and identiﬁed 8 unknown logical ﬂaws. Based on these works, In-
teGuard [41] further managed to protect the application of OAuth
by analyzing the relationship of parameters. A CST [9] approach is
then proposed to protect a more general multiparty protocol trans-
actions. While these works mainly focus on speciﬁc vulnerabili-
ties, our work enables one to systematically evaluate the security
of real-world OAuth implementations at scale.
Security Testing. Gibbons [17] manually tests the Top-50 web-
sites in Ireland against the security model deﬁned by RFC6819.
For large scale testing, Sun [37] then builds a semi-automatic tool
to test ﬁve speciﬁc vulnerabilities for 96 applications, which are
discovered by manual. While SSOScan [42] can improve [37] in
terms of the testing scale and automation level, SSOScan also only
aims at detecting ﬁve previously known vulnerabilities. Shernan et.
al [36] crawl the Alexa top 10,000 domains and identify that 25%
of websites using OAuth do not use the STATE parameter. Note
that these tools available so far are specially designed for a limited
set of speciﬁc, previously-known loopholes based on the manual
understanding of the system. In contrast, OAuthTester is able to
discover new vulnerabilities thanks to a formal system model and
higher code coverage.
Common testing tools such as WebScarab [32], HTTP Fuzzer [1]
and NoTamper [22], only accept per-request fuzzing and thus fail
to analyze dependencies between different tuples of requests with
responses. Blackbox testing like [13, 34] fail to consider protocol-
speciﬁc information and cannot guarantee the coverage. Unlike
these works, model-based testing (MBT) can guarantee to cover
all the execution paths. It is shown in [35] that MBT is more ef-
ﬁcient in ﬁnding defects than manual testing and thus has been
widely applied in software testing [12], for embedded systems,
client-server systems and web applications. Most of MBT works
such as [14, 15, 27] assume the existence of a correct model, which
is not true for OAuth due to the different interpretation of the RFC.
Other Model-Based Inference/Veriﬁcation Tools. Table 3 shows
the key differences between OAuthTester and some general model-
based tools. To construct a state machine, various inputs, e.g., exe-
cutables, network trace and speciﬁcations, have been extensively
analyzed. For example, Prospex [11] applies the dynamic data
taint techniques to analyze the binary executables, which, how-
ever, are often not available for modern web applications. In ad-
dition, pure network-trace-based scheme like ScriptGen [25], [34]
and [39] only analyzes the network traces (i.e., Input2 in Fig. 2) to
infer the data dependency of HTTP request/ response parameters.
Such method lacks the knowledge of the expected behavior of the
protocol (as speciﬁed in its standards) which makes it difﬁcult to
identify security problems caused by the incorrect implementation
of the speciﬁcation. On the other hand, pure speciﬁcation-based
scheme such as Bansal [5] builds the model only based on the pro-
tocol speciﬁcation (i.e., Input1 in Fig. 2), which cannot discover
the vulnerabilities caused by implementation speciﬁcs.
Figure 7: Statistics of App Impersonation and Covert Redirect
OAuth. However, we can further reﬁne OAuthTester, whose power
depends on the granularity of system model. Although we have
managed to reﬁne the model by the knowledge_pool variable ac-
cording to the characteristics/ details of the system response(s), we
may still fail to infer deeper insights of the system. For example, we
consider neither the implementation of SSL nor the detailed HTTP
header such as cookies. We also do not consider “non-key” pa-
rameters that might have an implicit effect on the system security.
Hence, it is worthwhile to consider possible ways to further reﬁne
our current system/ protocol modeling methodology. To indicate
our future research directions, we discuss below some potential se-
curity ﬂaws which are not well studied by the current model:
Inconsistency of Subsystem: App may consist of a main system
and multiple subsystems. The main system generally is more im-
portant and only supports a more secure IdP. Meanwhile, a user will
automatically log into the main system once he logs into the sub-
system. Therefore, an attacker may target the subsystem to break
the main system if the subsystem does not incorrectly implement
OAuth. In the context of Web, this feature may lead to various at-
tack vectors. For example, the attacker can bypass the same origin
policy since these two systems often share the same domain [40].
Failure to Re-authenticate App: As required by RFC6749, IdP
should authenticate App by app_secret during refreshing access to-
ken, but some IdPs, e.g.
the Tencent Weibo, do not authenticate
their applications at all. Hence, an attacker can get an access token
once he obtains a refresh token somehow. As the refresh token is
sent in a URL fragment, it can be easily disclosed with any 302
redirect to malicious domain [19].
Expected Permission: When a user authorizes an application,
IdP will show a list of permissions requested by the application so
that the user can reset and take back the privileged and unneces-
sary permissions. However, the user never knows whether the IdP
actually issues/ revokes the permissions as expected.
8. RELATED WORK
OAuth Security Studies. Previous research [18] and [26] mainly
focused on the study of the security model of OAuth from the proto-
col design and speciﬁcation perspectives. For example, the autho-
rization code grant ﬂow has been proven to be cryptographically
secure [8] under the assumption that transport layer security (TLS)
is used. In particular, model-checking method has been extensively
used. Pai [33] formalized the speciﬁcation of OAuth and redis-
covered a known security ﬂaw. Bansal et al. [5] applied ProVerif
to reveal two unknown vulnerabilities, i.e., Covert Redirect and
Social CSRF attack, based on a customized attacker model and