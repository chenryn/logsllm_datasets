into a TPM Platform Control Register (PCR), and stores
the measurement in kernel memory. This set of measure-
ments can be used by the Recorder to make a decision
about the integrity of the a Provenance-Aware Applica-
tion (PAA) prior to accepting the disclosed provenance.
When a PAA wishes to disclose provenance, it opens a
11See http://snap.stanford.edu
324  24th USENIX Security Symposium 
USENIX Association
6
Figure 4: A provenance graph of image conversion.
Here, workﬂow provenance (WasDerivedFrom) encodes
a relationship that more accurately identiﬁes the output
ﬁles’ dependencies compared to only using kernel layer
observations (Used, WasGeneratedBy).
new UNIX domain socket to send the provenance data
to the Provenance Recorder. The Recorder uses its own
UNIX domain socket to recover the process’s pid, then
uses the /proc ﬁlesystem to ﬁnd the full path of the bi-
nary, then uses this information to look up the PAA in
the IMA measurement list. The disclosed provenance is
recorded only if the signature of PAA matches a known-
good cryptographic hash.
As a demonstration of this functionality, we created
a provenance-aware version of the popular ImageMag-
ick utility 12. ImageMagick contains a batch conversion
tool for image reformatting, mogrify. Shown in Fig-
ure 4, mogrify reads and writes multiple ﬁles during
execution, leading to an overtainting problem – at the
kernel layer, LPM is forced to conservatively assume
that all outputs were derived from all inputs, creating
false dependencies in the provenance record. To address
this, we extended the Provmon protocol to support a
new message, provmsg_imagemagick_convert,
which links an input ﬁle directly to its output ﬁle. When
the recorder receives this message, it ﬁrst checks the list
of IMA measurements to conﬁrm that ImageMagick is
in a good state. If successful, it then annotates the exist-
ing provenance graph, connecting the appropriate input
and output objects with WasDerivedFrom relationships.
Our instrumentation of ImageMagick demonstrates that
LPM supports layered provenance at no additional cost
over other provenance-aware systems [29, 43], and does
so in a manner that provides assurance of the integrity of
the provenance log.
3.5 Deployment
We now demonstrate how we used LPM in the deploy-
ment of a secure provenance-aware system. Additional
background on the security technologies use in our de-
ployment can be found in our technical report [8].
12See http://www.imagemagick.org
3.5.1 Platform Integrity
We conﬁgured LPM to run on a physical machine with
a Trusted Platform Module (TPM). The TPM provides a
root of trust that allows for a measured boot of the sys-
tem. The TPM also provides the basis for remote attes-
tations to prove that LPM was in a known hardware and
software conﬁguration. The BIOS’s core root of trust for
measurement (CRTM) bootstraps a series of code mea-
surements prior to the execution of each platform com-
ponent. Once booted, the kernel then measures the code
for user space components (e.g., provenance recorder)
before launching them, through the use of the Linux In-
tegrity Measurement Architecture (IMA)[52]. The result
is then extended into TPM PCRs, which forms a veriﬁ-
able chain of trust that shows the integrity of the system
via a digital signature over the measurements. A remote
veriﬁer can use this chain to determine the current state
of the system using TPM attestation.
We conﬁgured the system with Intel’s Trusted Boot
(tboot),13 which provides a secure boot mechanism, pre-
venting system from booting into the environment where
critical components (e.g., the BIOS, boot loader and
the kernel) are modiﬁed.
Intel tboot relies on the In-
tel TXT14 to provide a secure execution environment.
15 Additionally, we compiled support for IMA into the
provenance-aware kernel, which is necessary in order for
the LPM Recorder to be able to measure the integrity of
provenance-aware applications.
3.5.2 Runtime Integrity
After booting into the provenance-aware kernel, the run-
time integrity of the TCB (deﬁned in §3.2) must also be
assured. To protect the runtime integrity of the kernel,
we deploy a Mandatory Access Control (MAC) policy,
as implemented by Linux Security Modules. On our pro-
totype deployments, we enabled SELinux’s MLS policy,
the security of which was formally modeled by Hicks et
al.
[33]. Reﬁning the SELinux policy to prevent Ac-
cess Vector Cache (AVC) denials on LPM components
required minimal effort; the only denial we encountered
was when using the PostgreSQL recorder, which was
quickly remedied with the audit2allow tool. Pre-
serving the integrity of LPM’s user space components,
such as the provenance recorder, was as simple as creat-
ing a new policy module. We created a policy module to
protect the LPM recorder and storage back-end using the
sepolicy utility. Uncompiled, the policy module was
only 135 lines.
13 See http://sf.net/projects/tboot
14 See https: //www.kernel.org/doc/Documentation/intel_txt.txt
15For virtual environments, similar functionality can be provided on
Xen via TPM sealing and the virtual TPM (vTPM), which is bound to
the physical TPM of the host system.
USENIX Association  
24th USENIX Security Symposium  325
7
UsedUsedWasDerivedFromWasGeneratedByWasDerivedFromWasGeneratedBya.pngb.pngmogrify -format jpg *.pnga.jpgb.jpg4 Security
In this section, we demonstrate that our system meets
all of the required security goals for trustworthy whole-
system provenance. In this analysis, we consider an LPM
deployment on a physical machine that was enabled with
the Provmon module and has been conﬁgured to the con-
ditions described in Section 3.5.
Complete (G1). We deﬁned whole-system provenance
as a complete description of agents (users, groups) con-
trolling activities (processes) interacting with controlled
data types during system execution (§ 3.1). LPM at-
tempts to track these system objects through the place-
ment of provenance hooks (§3.4.1), which directly fol-
low each LSM authorization hook. The LSM’s complete
mediation property has been formally veriﬁed [20, 64];
in other words, there is an authorization hook prior to
every security-sensitive operation. Because every inter-
action with a controlled data type is considered security-
sensitive, we know that a provenance hook resides on
all control paths to the provenance-sensitive operations.
LPM is therefore capable of collecting complete prove-
nance on the host.
It is important to note that, as a consequence of plac-
ing provenance hooks beneath authorization hooks, LPM
is unable to record failed access attempts. However, in-
serting the provenance layer beneath the security layer
ensures accuracy of the provenance record. Moreover,
failed authorizations are a different kind of metadata than
provenance because they do not describe processed data;
this information is better handled at the security layer,
e.g., by the SELinux Access Vector Cache (AVC) Log.
Tamperproof (G2). The runtime integrity of the LPM
trusted computing base is assured via the SELinux MLS
policy, and we have written a policy module that protects
the LPM user space components (§3.5.2). Therefore, the
only way to disable LPM would be to reboot the sys-
tem into a different kernel; this action can be disallowed
through secure boot techniques,13 and is detectable by
remote hosts via TPM attestation (§3.5.1).
Veriﬁable (G3). While we have not conducted an in-
dependent formal veriﬁcation of LPM, our argument for
its correctness is as follows. A provenance hook follows
each LSM authorization hook in the kernel. The correct-
ness of LSM hook placement has been veriﬁed through
both static and dynamic analysis techniques [20, 25, 34].
Because an authorization hook exists on the path of ev-
ery sensitive operation to controlled data types, and LPM
introduces a provenance hook behind each authorization
hook, LPM inherits LSM’s formal assurance of complete
mediation over controlled data types. This is sufﬁcient
to ensure that LPM can collect the provenance of every
sensitive operation on controlled data types in the kernel
(i.e., whole-system provenance).
Authenticated Channel (G4). Through use of Net-
ﬁlter hooks [57], LPM embeds a DSA signature in ev-
ery outbound network packet. Signing occurs immedi-
ately prior to transmission, and veriﬁcation occurs im-
mediately after reception, making it impossible for an
adversary-controlled application running in user space
to interfere. For both transmission and reception, the
signature is invisible to user space.
Signatures are
removed from the packets before delivery, and LPM
feigns ignorance that the options ﬁeld has been set if
get_options is called. Hence, LPM can enforce that
all applications participate in the commitment protocol.
Prior to implementing our own message commitment
protocol in the kernel, we investigated a variety of ex-
isting secure protocols. The integrity and authenticity of
provenance identiﬁers could also be protected via IPsec
[36], SSL tunneling,16 or other forms of encapsulation
[5, 65]. We elected to move forward with our approach
because 1) it ensures the monitoring of all all processes
and network events, including non-IP packets, 2) it does
not change the number of packets sent or received, en-
suring that our provenance mechanism is minimally in-
vasive to the rest of the Linux network stack, and 3)
it preserves compatibility with non-LPM hosts. An al-
ternative to DSA signing would be HMAC [9], which
offers better performance but requires pairwise keying
and sacriﬁces the non-repudiation policy; BLS, which
approaches the theoretical maximum security parame-
ter per byte of signature [12]; or online/ofﬂine signature
schemes [15, 23, 26, 55].
Authenticated Disclosures (G5). We make use
of IMA to protect
the channel between LPM and
provenance-aware applications wishing to disclose
provenance.
IMA is able to prove to the provenance
recorder that the application was unmodiﬁed at the time
it was loaded into memory, at which point the recorder
can accept the provenance disclosure into the ofﬁcial
record. If the application is known to be correct (e.g.,
through formal veriﬁcation), this is sufﬁcient to estab-
lish the runtime integrity of the application. However, if
the application is compromised after execution, this ap-
proach is unable to protect against provenance forgery.
A separate consideration for all of the above security
properties are Denial of Service (DoS) attacks. DoS at-
tacks on LPM do not break its security properties. If an
attacker launches a resource exhaustion attack in order
to prevent provenance from being collected, all kernel
operations will be disallowed and the host will cease to
function. If a network attacker tampers with a packet’s
provenance identiﬁer, the packet will not be delivered to
the recipient application.
In all cases, the provenance
record remains an accurate reﬂection of system events.
http://docs.oracle.com/cd/E23823_01/html/816-5175/kssl-
16See
5.html
8
326  24th USENIX Security Symposium 
USENIX Association
Locations = [ ]
for each s in a,FindSuccessors(a) do
Algorithm 1 Summarizes a’s propagation through the system.
Require: a is an entity
1: procedure REPORT(a)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end procedure
Locations.Add()
else if s.type is Network Packet then
Locations.Add()
end for
return Locations
if s.type is File then
end if
(cid:31) Assigns an empty list.
5 LPM Application: Provenance-Based
Data Loss Prevention
To further demonstrate the power of LPM, we now in-
troduce a set of mechanisms for Provenance-Based Data
Loss Prevention (PB-DLP) that offer dramatically sim-
pliﬁed administration and improved enforcement over
existing DLP systems. A provenance-based approach is
a novel and effective means of handling data loss preven-
tion; to our knowledge, we are the ﬁrst in the literature
to do so. The advantage of our approach when compared
to existing systems is that LPM-based provenance-aware
systems already perform system-wide capture of infor-
mation ﬂows between kernel objects. Data loss preven-
tion in such a system therefore becomes a matter of pre-
venting all derivations of a sensitive source entity, e.g., a
Payment Card Industry (PCI) database, from being writ-
ten to a monitored destination entity (e.g., a network in-
terface).
We begin by deﬁning a policy format for PB-DLP. In-
dividual rules take the form
where Srcs is a list of entities representing persistent
data objects, and dst is a single entity representing either
a persistent data object such as a ﬁle or interface or an ab-
stract entity such as a remote host. The goal for PB-DLP
is as follows – an entity e1 with ancestors A is written
to entity e2 if and only if A (cid:31)⊇ Srcs for all rules in the
rule set where e2 = dst. The reason that sources are ex-
pressed as sets is that, at times, the union of information
is more sensitive than its individual components. For ex-
ample, sharing a person’s last name or birthdate may be
permissible, while sharing the last name and birthdate is
restricted as PII.2
Below, we deﬁne the functions that realize this goal.
First, we deﬁne two provenance-based functions as the
basis for a DLP monitoring phase, which allows admin-
istrators to learn more about the propagation of sensitive
data on their systems. Then, we deﬁne mechanisms for a
DLP enforcement phase.
if d = rule.dst then
for each rule in Rules do
A = FindAncestors(e)
NumSrcs = length(rule.Srcs)
for each src in rule.Srcs do
Algorithm 2 Mediates request to write e to d given Rules.
Require: e,d are entities
Require: Rules is a PB-DLP policy
1: procedure PROVWRITE(e,d,Rules)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: