# WebAssembly 生产实践案例解析

大家好，我是于航。在本节课中，我们将不再局限于WebAssembly（Wasm）的实现细节，而是从技术标准转向生产实践。作为应用篇的第二部分，我们将探讨自2017年Wasm MVP标准确立以来，特别是在WASI出现后，Wasm走出浏览器环境，在现实世界中的实际应用案例。这些案例将帮助我们理解Wasm如何解决实际问题。

## 案例一：eBay - 条形码扫描功能优化

### 背景介绍
eBay是一家知名的在线拍卖与购物网站，用户可以在该平台上出售商品。为了简化用户录入待售商品的操作流程，eBay在其iOS和Android原生应用中提供了条形码扫描功能。通过这一功能，应用能够利用移动设备的摄像头扫描产品的UPC条形码，并自动填写相关商品信息，从而提高用户体验。

### 问题所在
虽然在原生应用中，eBay使用了自研的C++条形码扫描库，确保了良好的性能，但在HTML5应用中，由于JavaScript版本条形码扫描器的表现不佳（仅20%时间表现良好），导致用户体验不一致。主要原因是JavaScript引擎的优化机制无法保证每次扫描都能得到即时编译（JIT）优化。

### 解决方案
#### 1. **等待WICG提出的"Shape Detection API"**
   - 该提案提出了一系列API，允许Web平台直接利用硬件加速或系统资源进行人脸识别、条形码识别等功能。然而，这项技术仍处于起步阶段，跨浏览器兼容性尚需时日。

#### 2. **采用WebAssembly**
   - Wasm字节码可以直接转换为优化后的机器码，无需经过复杂的中间步骤，如生成AST、字节码等。
   - Wasm模块的执行不会像JavaScript那样存在“去优化”过程，因此性能更加稳定。
   - 利用Emscripten工具链，eBay团队可以将现有的C++条形码扫描库编译为Wasm模块，而无需重写代码。

### 项目架构
1. **创建工作线程**：使用Web Worker API从主线程创建一个工作线程，用于加载和实例化Wasm模块。
2. **处理视频流数据**：主线程将摄像头获取到的视频流数据传递给工作线程，后者调用Wasm模块导出的函数处理像素数据，返回识别结果。
3. **设置阈值时间**：应用通过设置阈值时间来检测是否读取到有效的条形码信息，超时时提示用户重试或手动输入。

### 一致化的编译管道
- 为了确保开发环境的一致性，eBay团队使用Docker构建统一的Wasm编译管道，结合NPM脚本命令，使Wasm模块的开发与现有前端开发流程无缝整合。

### 实际效果
- 经过测试，基于Wasm的实现虽能在1秒内处理50帧画面，但识别成功率仅为60%。通过引入ZBar开源库并采用多线程竞争策略，最终识别成功率提升至95%以上。
- 产品上线后，统计数据显示87%的成功扫描来自Wasm实现（自研C++库和ZBar）。

## 案例二：AutoCAD Web版

### 背景介绍
AutoCAD是一款由Autodesk公司开发的2D绘图设计软件，广泛应用于多个领域。随着移动互联网的发展，Autodesk开始将其桌面端应用移植到Web平台。

### 历史负担
- AutoCAD桌面端应用已有近40年的历史，代码库庞大且结构复杂，超过1500万行C/C++代码。

### 移植过程
- **初期尝试**：2010年，基于Adobe Flash发布首个Web版应用。
- **进一步优化**：2013年，通过交叉编译和GWT转译Java代码为JavaScript，发布“粗糙版”Web应用。
- **ASM.js与Wasm**：2015年，利用ASM.js提升性能；2018年3月，基于Wasm构建的新版本发布。

### 应用架构
- **绘图区域**：由Canvas元素和相关Web API渲染，Wasm模块控制绘图效果。
- **UI控制区域**：使用TypeScript和React框架构建，通过`postMessage` API与Wasm模块通信。

### 总结
在这节课中，我们介绍了两个Wasm的实际应用案例：
1. **eBay条形码扫描功能**：通过Wasm和多线程竞争策略，显著提升了条形码识别的成功率。
2. **AutoCAD Web版**：利用Wasm成功将庞大的桌面端应用移植到Web平台，实现了高性能运行。

希望这些真实案例能为你提供更多关于Wasm的信心和思考。

**课后练习**
请思考一下，将原生应用移植到Web应用时可能会遇到哪些问题？或者原生应用与Web应用在执行流程或组成方式上有哪些区别？欢迎大家在留言区分享你的见解。今天的课程就到这里，希望对你有所帮助。同时欢迎你将这节课分享给你的朋友或同事，一起交流讨论。