title:The ART of App Compartmentalization: Compiler-based Library Privilege
Separation on Stock Android
author:Jie Huang and
Oliver Schranz and
Sven Bugiel and
Michael Backes
The ART of App Compartmentalization:
Compiler-based Library Privilege Separation on Stock Android
Jie Huang
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
Sven Bugiel
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
Oliver Schranz
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
Michael Backes
CISPA, Saarland University
Saarland Informatics Campus
PI:EMAIL
ABSTRACT
Third-party libraries are commonly used by app developers for
alleviating the development efforts and for monetizing their apps.
On Android, the host app and its third-party libraries reside in
the same sandbox and share all privileges awarded to the host
app by the user, putting the users’ privacy at risk of intrusions by
third-party libraries. In this paper, we introduce a new privilege
separation approach for third-party libraries on stock Android.
Our solution partitions Android applications at compile-time into
isolated, privilege-separated compartments for the host app and the
included third-party libraries. A particular benefit of our approach is
that it leverages compiler-based instrumentation available on stock
Android versions and thus abstains from modification of the SDK,
the app bytecode, or the device firmware. A particular challenge
for separating libraries from their host apps is the reconstruction of
the communication channels and the preservation of visual fidelity
between the now separated app and its libraries. We solve this
challenge through new IPC-based protocols to synchronize layout
and lifecycle management between different sandboxes. Finally,
we demonstrate the efficiency and effectiveness of our solution
by applying it to real world apps from the Google Play Store that
contain advertisements.
CCS CONCEPTS
• Security and privacy → Mobile platform security;
KEYWORDS
Android Runtime, App Compartmentalization, Third-party Libraries
1 INTRODUCTION
Third-party libraries are constituent parts of mobile apps and help
app developers to quickly deploy common utility functionality or
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134064
leverage services, such as analytics or app monetization. However,
past experience has shown that those third-party libraries do not
only provide convenience [19, 26, 34, 35], but also bare risks for the
users’ privacy. On Android, particularly the fact that third-party
libraries and their host apps share the same sandbox has been iden-
tified as a means for nosy libraries to exploit their ambient authority
to tap into device-local resources, such as location tracking, phone
identifiers, or users’ private data, which can be of high interest to
external parties, like advertisement networks.
In light of those risks, the security community has recently pro-
posed different approaches to tame overly curious or even mali-
ciously acting libraries, where the focus clearly lies on privilege-
separating the notorious advertisement libraries. The proposed
solutions range from completely removing the library payload,
dedicated advertisement system services [27, 32] and system modi-
fications [31, 39] to application bytecode rewriting [25, 36, 40]. How-
ever, while those solutions greatly benefit the users’ privacy, they
do not entirely satisfy deployment restrictions from the end-users’
perspective. Unfortunately, application or system modifications
are unavoidable in the currently proposed solutions. Modifying
applications breaks the same origin policy of Android application
updates, since the original app has to be repackaged and resigned.
As a consequence this repackaged app version can no longer update
automatically. System modifications, on the other hand, are noto-
riously hard to distribute to end-user devices and distribution via
after-market ROMs is generally considered as a too high technical
hurdle for most layman end-users.
In this paper, we propose an alternative approach to privilege-
separation of untrusted advertisement libraries in Android apps by
using compiler-based instrumentation of apps. Since compilation is
an integrated, standardized part of app installation, compile-time
modifications do not require the target application to be repack-
aged and resigned, hence abstaining from breaking the application
signature. Moreover, Android’s dex2oat on-device compiler can
be operated entirely at the application layer and does not require
changes to the application framework or system image. As such,
compiler-based instrumentation forms a beneficial trade-off in the
deployment of a library separation solution. The foundation of our
approach to compiler-based library separation is a systematic study
of the ten most frequently used advertisement libraries to identify
the integration patterns between advertisement library and their
host apps. We discover that only a small number of such patterns
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1037exist and that they establish only a loose coupling between libraries
and host apps (e.g., callbacks, field access, or method invocations).
Based on those insights, we design and implement an extension for
the Android on-device dex2oat compiler suite, which at compile-
time identifies the code segments that integrate the advertisement
library into the app. It then splits the app at those integration points
into two distinct apps to be installed with a strong (process) se-
curity boundary in between and with being privileged separately.
The challenge of this approach is to reintegrate the now compart-
mentalized library with its host app, e.g., manage the event-driven
advertisement and application lifecycles or ensure visual fidelity
by correctly displaying advertisements. We solve this challenge in
our solution through a new IPC-based protocol for synchronizing
lifecycle events between the host app’s and library’s sandboxes as
well as for synchronizing the layout management between an over-
layed advertisement and the app’s user interface. More concretely,
we make the following contributions:
Study of advertisement library integration techniques. In order to
provide a solid foundation for our solution, we thoroughly analyzed
the ten most prevalent advertisement libraries in the Google Play
store that represent a large fraction of the market share of apps
that include advertisements. Beyond motivating the design of our
compartmentalization solution, we consider the results of our study
to be useful for the academic audience to facilitate independent
research on the topic.
Compiler-based Application Compartmentalization. We introduce
CompARTist, a compiler-based application compartmentalization
system that enforces privilege separation and fault isolation of ad-
vertisement libraries on Android. Our approach offers a deployment
alternative to existing solutions, since it does not require modifica-
tions of the firmware and does not break Android’s signature-based
same origin model. The primary challenge for our solution was the
reintegration of the library compartment with the host through
compile-time code instrumentations.
Outline. The remainder of this paper is organized as follows: In
Section 2, we provide background on the advertising ecosystem
on Android and present in Section 3 the findings of our study of
advertisement library integration techniques. Section 4 categorizes
and discusses prior related work. In Section 5, we introduce the
overall architecture of CompARTist. Furthermore, we discuss ro-
bustness, performance, and limitations as well as future directions
of our approach in Section 6 and conclude the paper in Section 7.
2 BACKGROUND
We briefly provide background information on the Android adver-
tisement ecosystem and on advertisement libraries in context of
Android’s sandboxing design.
2.1 Advertising Ecosystem
There are typically three participating parties in mobile advertis-
ing on Android: publishers, advertisers, and advertising networks.
Developers take the role of publishers who spare some part of
their apps’ user interface to show banners, interstitials, or other
advertisements to their users. Advertisers provide the actual adver-
tisements to be shown to customers. The advertising network is the
Figure 1: Advertising Ecosystem
Figure 2: Default Android sandboxing
broker that controls the integration and delivery of advertisements
from advertisers to publishers. Figure 1 depicts a typical scenario
where the advertiser entrusts the network (here Google Admob)
with the delivery of advertisements. Conversely, app developers re-
ceive payments for displaying advertisements or generating clicks
through their users. To ease the task of integrating advertisements
into applications, the advertisement network usually provides the
app developers with dedicated SDKs, i.e., advertisement libraries.
2.2 Android App Sandboxing
Figure 2 gives an overview over Android’s default application sand-
boxing. Android’s user-based permission model mandates that ac-
cess to certain resources, e.g., location information or user contacts,
requires the declaration of specific permissions in the application
manifest. File system access, on the contrary, is enforced through
the UID-based sandboxing system of the underlying Linux ker-
nel where apps are assigned distinct UIDs and cannot access each
other’s files.
However, third-party libraries can undermine those security
mechanisms by exploiting their ambient authority. As depicted in
Figure 2, all app components share the same UID and are considered
the same security principal. This kind of coarse authorization gives
untrusted third-party libraries the opportunity to exploit all permis-
sions assigned to their host application, as well as access all its files.
While the introduction of a dynamic runtime permission system in
Android 6 allows users to revoke a predefined set of permissions
from applications, this is still enforced on the app level. Even the
PublisherUserApp ContentApp Contentmanifest.permission:READ_CONTACTACCESS_COARSE_LOCATION ad permissionhost permissionshared uidUI monitoringAdvertising NetwrokUISystemResLocalFilesRuntimeFilesAds SDKXMLJSONURL...AdvertiserAds SDKXMLJSONURL...AdMobServerBanner AdServices/FileSysshared       permissionsshared       MAC/DACHOST3rd-party libsAppsandboxsandboxprocess boundarySession E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1038introduction of SELinux [33] in Android 4.3 only reduces the granu-
larity to the process level, while component-level granularity would
be required to separate library privileges. As a result, on default
Android, a privacy-invading third-party library [19, 22, 26, 34, 35]
can easily access and leak private resources or a vulnerable library
version unnecessarily extends its host app’s attack surface [28].
3 LIBRARY INTEGRATION TECHNIQUES
Statistical results from the freely available library detection tool Lib-
Scout [9, 20] indicate a low fragmentation of advertising libraries
among the top apps on Google Play. As shown in the first column
in Table 1, between the first and the tenth most popular advertise-
ment library the integration rate drops down significantly from
25.94% (Google Play Services Ads) to 3.11% (Amazon Ads). In partic-
ular, this means that analyzing the ten most popular advertisement
libraries allows us to cover a large fraction of all applications ship-
ping advertisement code. Since the focus of our study is on how a
host app can integrate a library, we checked the possible integration
patterns by analyzing the libraries’ official API documentations.
For those libraries that did not provide a full list of public APIs, we
use Oracle’s Java class file disassembler javap to extract the public
fields and methods from the library’s codebase. Table 1 summa-
rizes the results of our study on possible integration techniques of
advertisement libraries into host apps.
Method Invocation and Field Access are the two most common
integration techniques among all libraries. Typically, method invo-
cation and field access are used to exchange data between the host
and the library, e.g., to request loading of an advertisement or to
retrieve advertisement information.
We observed two possible techniques for deriving subclasses
from library code in order to integrate the library into the app: Class
Inheritance and Interface Implementation. Libraries use those tech-
niques to allow host apps to register callback components to react
to certain events, such as displaying or closing an advertisement. In
many cases, the callback methods are triggered with library-specific
objects as parameter values. This intertwines the library and host
tighter than, e.g., method invocations and field accesses, making the
library’s separation more challenging (as discussed in Section 5).
Furthermore, a small fraction of advertising libraries also propa-
gates information to their hosts by throwing customized Exceptions
that the host needs to catch and react to.
Layout Arrangement is an integration technique that allows ban-
ner advertisements to occupy part of the host app’s user interface.
To integrate this kind of non-full-screen views, app developers need
to make changes to their apps’ UI hierarchy. There are two ways
to integrate a banner view element: It can either be added in the
corresponding XML resource file for interface definition or it can
be instantiated and added as a new view element at runtime.
We found that all analyzed advertisement libraries require at
least one permission from their host app, INTERNET being the most
prevalent one. Further, dedicated advertisement components, e.g.
Activity, BroadcastReceiver, or ContentProvider need to be
registered for the advertisement library as well. All this requires
the host app developer to make changes to the host app’s manifest
file.
Based on our findings, we conclude that most advertisement
libraries share a common set of well-defined integration techniques,
which makes them amenable targets for efficiently separating them
at those integration points from their host apps.
4 RELATED WORK
In this section, we discuss prior works for compartmentalization
of libraries as well as related works for blocking of advertisements
and general application-layer approaches to enhance Android’s app
sandboxing.
4.1 Library Compartmentalization
We first discuss closest related works for compartmentalizing app
components, in particular libraries. We categorize those existing
solutions based on their deployment strategy and compare them
for their respective advantages and drawbacks. Table 2 summarizes
the results of this discussion.
4.1.1
System-centric Solutions. System-centric solutions usually
ship a compartmentalization approach as part of the firmware (F3:
✗). This generally provides the advantage of establishing dedicated
system services/processes for advertising code (F1: ✓), running
monitoring code by-design with elevated privileges (F5: ✓), and
avoiding changes to the apps’ bytecode (F2: ✓). For instance, Ad-
Droid [27] and AFrame [39] both introduce new system services
that expose APIs for integrating advertisement libraries into appli-
cations. Trivially, a system-centric solution can always keep the
signature-based same origin model of apps intact by customizing
the signature verification process (e.g., whitelisting own changes).
While this allows for a robust privilege separation by running ad-
vertisement code in a separate process, it also requires developers to
adapt their apps to the system (F4: ✗). In contrast, AdSplit [32] takes
the developer out of the loop by automatically retrofitting applica-
tions to use their system (F4: ✓). FlexDroid [31] takes an even more
involved approach by modifying the operating system to introduce
so called inter-process stack inspection to allow per-component
permission enforcement and uses fault isolation techniques within
app processes to secure the stack-inspection code (F1: ✗). Addi-
tionally, it requires developers to include custom per-component
permission policies in their apps’ manifests (F4: ✗).
4.1.2 Application Layer Solutions. An alternative line of work
applies application rewriting and inlined reference monitoring
(IRM [21]) techniques, which abstain from modifying the firmware
(F3: ✓). Instead they modify the apps’ bytecode, which results in
repackaging and resigning of the modified code and, thus, in turn