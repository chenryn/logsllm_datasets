S
6,894
885
4,287
648
618
1,856
2
12
1,594
656
17
540
kies
o
o
C
776
68
198
58
86
339
20
57
8
0
0
3
e
g
Stora
174
10
170
8
19
48
0
0
7
0
0
3
L
R
U
51
0
44
10
13
175
0
0
2
1
0
1
Total (%)
7,130 (61)
930 (7.98)
4,330 (37)
686 (5.9)
665 (5.7)
1,956 (16.7)
22 (0.19)
68 (0.6)
1,598 (13.7)
656 (5.6)
17 (0.15)
543 (4.6)
9,122 (78)
1,236 (10.6)
314 (2.7)
290 (2.5)
Figure 2: Percentage (left) and absolute number (right) of
vulnerable domains per ranking bin.
the httpOnly flag. Our framework’s analysis of those domains re-
veals that 5,099 include at least one embedded 3rd party script (i.e.,
not isolated in an iframe) that runs in the 1st party’s origin and
has “permission” to read the user’s 1st party cookies. These are
fetched from 2,463 unique 3rd party domains. To make matters
worse, only 239 of those use the Subresource Integrity (SRI) fea-
ture [15] to prevent the manipulation of fetched scripts, and only
one domain protects all loaded scripts. Similarly to [31], we find
that all SRI-protected scripts are libraries (e.g., jquery). It is impor-
tant to emphasize that this attack explores the potential threat from
compromised or rogue 3rd parties, and that our numbers do not
reflect active attacks currently underway in the wild. While our
study’s focus is not on detecting malicious scripts actually stealing
users’ cookies, we consider this an interesting future direction.
We emphasize that the 5,680 domains are not necessarily vul-
nerable to session hijacking through XSS, since other prevention
mechanisms might be in place. For instance, Web Application Fire-
walls (WAFs) [38, 54] or Content Security Policies (CSP) [92] could
be deployed to mitigate XSS attacks which could also prevent cookie
stealing. Nonetheless, recent work has shown that even such de-
fense mechanisms can be bypassed [57]. As such, our findings
constitute an upper bound for web apps that are vulnerable to
cookie-stealing via XSS. Nonetheless, while adoption of httpOnly
is not as limited as in the past [95], it remains an important issue.
Auth combos. Table 2 breaks down the AuthCookies results
and reports the number of domains with the corresponding number
of authentication cookies and combinations. An interesting observa-
tion is that 435 of the domains that have more than one combination
contain at least one secure combination among them, yet remain
susceptible to attacks due to other combination(s) being exposed.
This highlights how the ever-increasing complexity in web apps
leads to authorization flaws. We also find that 76 domains contain
cookie combinations that are correctly detected by our approach
for which the algorithm from [64] returns incorrect results.
Popularity. We break down the vulnerable domains based on
their Alexa rank in Figure 2. In general, our framework detects
more vulnerable domains in the highest ranking bin. This can be
partially attributed to popular websites being more likely to support
account creation (we find twice as many such domains in the most
popular bin compared to the least popular one), while the process
succeeds for roughly 11 − 13% of domains across all bins. We also
break down the vulnerable websites based on their categories (e.g.,
online shopping) in the Appendix.
Privacy leakage. In Table 3, we break down the personal or
sensitive information that an attacker can acquire upon success-
fully hijacking a user’s cookies, as detected by our PrivacyAuditor
module. We also report the total number of domains leaking such
information, grouped per sensitive field (e.g., email) and also based
on the source of leakage (e.g., page source). While a domain might
appear in different columns of the same sensitive field, or different
rows of the same source of leakage, it is only counted once in the
corresponding totals. In general, we find that the page’s source is
the most common avenue of exposure, but passwords are typically
exposed through cookies. Furthermore, 59 out of the 68 hashed
passwords detected by our system are MD5 hashes, which do not
offer much protection against offline brute-forcing attacks. In prac-
tice, the attacker could potentially recover the password and obtain
full control over the victim’s account in those services; password
reuse [9, 69] can result in attackers accessing accounts in other
services as well. Apart from common identifiers like emails and
usernames, many domains expose highly sensitive data like home
addresses and phone numbers. Overall, an abundance of data is
exposed that can be used for doxxing [79], and a plethora of scams
including targeted phishing [48] and identity theft [21].
System performance. In Figure 3 we show the total time in
seconds required by each module in our framework. Since some
modules might fail for certain domains, the different CDFs have
been calculated using their corresponding totals. The total time
required for auditing websites for attacks (i.e., all modules up to
CookieAuditor) is denoted as Total Attack. The total time required
for the analysis including the execution of AuthCookies and Priva-
cyAuditor is denoted as Full Analysis. We find that our framework’s
performance is suitable for large-scale studies as half of the domains
can be completely audited within 5 minutes and 90% in less than 17
 0 20 40 60 80 1001-100K100K-200K200K-300K300K-400K400K-500K500K-600K600K-700K700K-800K800K-900K900K-1MVulnerable (%)Domain RankEavesdroppingJS cookie stealing 0 200 400 600 800 1000 1200 14001-100K100K-200K200K-300K300K-400K400K-500K500K-600K600K-700K700K-800K800K-900K900K-1MVulnerableDomain RankSession 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1961threat model. Next, we launch a new browser with different char-
acteristics (user agent etc.) on a different machine, in a different
network subnet, where we include the stolen cookies and visit the
website. We manually interact with the website to detect the extent
of access the attacker obtains. We do not set a time limit; instead
we opt for an exhaustive approach where we try to identify all user-
specific functionality that should be tested. We detail our findings
in the Appendix. For the Top-1K random subset, we get full account
access for seven domains (i.e., all tested operations succeeded), and
partial access for three domains. For the other random subset we
get full access in nine out of ten domains. Indicatively we can view
and modify account settings, preferences, shopping lists, orders
and subscriptions and post comments. In five of all the domains we
could also change the user’s password without knowledge of the
current password. For the manually selected popular domains, we
get full access in five domains, partial access in four.
This highlights a significant advantage of cookie-based account
hijacking over credential-based (e.g., phishing): additional fraud-
detection checks employed during login [24] (e.g., IP geo-location [71],
comparison of browser fingerprints [50]) are ommitted because the
cookies are part of a session that has already been verified as legiti-
mate (i.e, when the victim logged in). While certain attackers can
pass geo-location checks (e.g., using an IP address near the user’s
location [67]), deceiving browser-based security checks is signifi-
cantly more challenging. While spoofing the victim’s fingerprints
has been theorized [19] it has not been demonstrated in practice.
Surprisingly, throughout all our experiments we identified only one
domain (Cloudflare) where we could not access the victim’s account
from the attacker’s machine, indicating additional machine-specific
checks that we have not come across in any other domain.
5 DISCUSSION
Automated account creation. Our experimental evaluation re-
vealed that automatically creating accounts is a significant chal-
lenge. While our current implementation allowed us to audit orders-
of-magnitude more domains than prior manual studies [30, 77], we
plan to explore the adoption of more sophisticated heuristics that
automatically infer the predicates of account generation in a specific
web app and create corresponding inputs. Automatically detecting
and parsing error messages returned by the app can be used as
feedback for inferring which form fields’ format is violated. This,
however, is a challenging task as, again, web developers are not
constrained to a specific format or structure for returning such
messages. Furthermore, each form input variation requires a form
submission, which can lead to a significant impact to the overall
performance and also trigger anti-bot mechanisms. Certain manda-
tory resources can also prevent our system from completing the
process, e.g., an app may require a valid phone number in a specific
country. While attackers can leverage “shady” phone providers [86],
this remains an important obstacle for researchers.
Privacy leakage inference. Our system evaluates the leakage
of personal or sensitive user information by detecting specific iden-
tifiers. In practice, information can be implicitly leaked, e.g., per-
sonalized results in search engines or e-commerce systems can
reveal sensitive data (typically exposed through site-specific func-
tionality). As part of our future work, we plan to explore the use
Figure 3: Time required by each module of our system.
minutes. While certain domains in the long tail of the distribution
require considerably more time, this is typically due to latency is-
sues with their specific servers. While Webdriver crashes can affect
performance, our XDriver optimizations minimize their impact by
transparently recovering the browser’s state.
Popular domains. While our main goal is to automatically ex-
plore the feasibility of cookie hijacking at scale, popular domains
are of particular interest because they are used by hundreds of
millions of users and, thus, can have a greater impact if vulner-
able. Considering that our framework’s entire workflow is fully
automated and that app-agnostic account setup is extremely chal-
lenging, we opt to manually assist with the account setup for a
subset of the most popular domains. Specifically, we consider the
top 1K domains, where we identified 698 account-based websites.
Out of those, 95 were already fully handled by our framework. For
the rest, we manage to manually create accounts in 206 domains,
which we provided to our framework to complete the automated
auditing process. The remaining domains either protected their
login forms with reCAPTCHAs, detected the presence of our web-
driver, or requested information during signup that we were unable
to provide (e.g., phone numbers for SMS verification, valid SSN etc.).
Moreover, for 45 websites our Login Oracle could not disambiguate
between being logged in and logged out; when sending a HTTP
request without any cookies our account would still appear to be
logged in. In total, we audited 301 popular websites (the additional
206 domains were not included in our previously reported numbers,
thus, pushing our total analysis to over 25K domains).
We find that 149 are vulnerable to eavesdropping, 46 of which
were fully handled by our framework. Only 10 domains deploy
HSTS effectively, while another 30 (20.13%) use HSTS but remain
susceptible due to faulty deployment. For JS cookie stealing, 115
domains were found susceptible and 104 include at least one embed-
ded 3rd party script (from 266 domains) – only five make use of SRI.
Overall, 57.81% of the domains do not provide adequate defenses,
which is alarming considering their massive user base.
Hijacking validation. To manually validate our results and
ensure that an attacker can actually access victims’ accounts, we
conduct an exploratory experiment on domains that were fully
handled by our framework. We randomly select ten and hand-pick
another ten domains out of Alexa’s Top-1K, and randomly select
another ten from the remaining domains, and simulate cookie hi-
jacking attacks. We setup a browser instance where we log in the
website and capture all cookies that are exposed depending on the
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1 10 100 1000Domains (CDF)Time (sec)URL DiscoverySignupLoginSSOCookie AuditorAuth CookiesPrivacy AuditorTotal AttackFull AnalysisSession 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1962of user-action templates that are based on the website’s category
(e.g., search engine, e-commerce), intended to elicit personalized
results. Additionally, it is possible that some user information might
already be publicly available on the same or a different website and,
thus, the detected identifiers do not constitute actual leakage. While
leakage can be highly contextual (e.g., a user’s email address being
publicly available in general versus a local eavesdropper being able
to match that person to their email address) we consider this an
interesting challenge and plan to explore the feasibility of detection
schemes that disambiguate between public and private information.
Countermeasures, disclosure, ethics. Our framework discov-
ered flaws that are exposing millions of users to significant threat.
We emphasize that no user accounts were affected during our exper-
iments – we only used test accounts. It is also crucial that devel-
opers are informed of our findings and address them. While the
adoption of cookie security flags is more straightforward, correctly
deploying HTTPS and HSTS will likely be more challenging for
developers [32, 51–53]. For disclosure we leveraged the insight pro-
vided by prior work [58, 73, 84] and sent direct notifications to the
affected domains for which we could find a valid contact email
address. Specifically, we initially collected security.txt files [10],
that typically include such contact points. This method proved to
be the most ineffective, as such files are not widely adopted, i.e.,
only 23 domains had them. We then used an off-the-shelf email
harvester tool for search engines [8]. Next, we crawled the websites
starting from their home page and visiting all contact related URLs,
as well as the top 10 first level links. We also collected each domain’s
WHOIS record and searched for registered abuse addresses. We fil-
tered all collected email addresses to ensure that they belong to the
susceptible domain, so as to avoid sending our security-sensitive
findings to unrelated parties. Overall, this process yielded 5,373
email addresses which we used for notification. For the remaining
domains we sent our notification to standard aliases (security,
abuse, webmaster, info) [73, 84]. We also manually searched
for contact points for all domains we explicitly name in the paper
(apart from 2 that did not have a contact email or form). For the
notification process we used an institutional email address to in-
crease credibility and provided additional details and remediation
advice to all websites that responded. All the responses we received
acknowledged our findings, except one case where the developer
persistently misunderstood the technical aspects of cookie hijack-
ing. While we followed a best-effort approach to directly notify
affected domains, it is infeasible to do so for all of them. Thus, we
will also setup a notification service where developers can obtain
our reports after proving ownership of a given domain.
HSTS issue. During our experiments we uncovered an unex-
pected behavior in Chrome with HSTS preloading; we observed that
it did not work as expected in slightly older Chrome versions and
the initial request to a preloaded domain was, in fact, over HTTP.
After communication with the Chromium team they informed us
that their policy dictates that any Chrome version more than 70
days old does not enforce HSTS preloading because such hardcoded
information is considered stale. This has significant implications for
users that do not update their software on time, which is common
behavior [62, 88, 91]. To the best of our knowledge this issue with
HSTS has not been mentioned in prior studies.
Code sharing. Our browser automation tool will be made open