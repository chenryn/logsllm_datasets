latency of 10 ms and 40 ms respectively. The 10 ms latency
is to emulate the typical latency seen in Edge Computing
scenarios [14], while the 40 ms network latency could be seen
as the minimal network overhead between two availability
zones of the same region in the Amazon Web Services (AWS)
cloud [66]. We manually conﬁgured the randomization prob-
ability at each ISA-switching point, and ran each test case 5
times. The average value and the standard deviations are re-
ported in Figure 5. With a local network connection, Nginx on
HeterSec performs at only about 11% throughput compared to
the baseline. This is because internally an ISA-switch brings
some additional costs of cross machine communication. Al-
though the inter machine communication has been optimized
by using fast in-kernel message API, the time spent on inter
machine communication dominates the total request handing
time. However, if we consider a real network scenario such
as edge or cloud, HeterSec incurs a reasonable overhead. For
example, we only observe a 10%-20% performance overhead
depending on the frequency we trigger the migrations under
10 ms network latency (the edge computing scenario in Figure
5). At 100% ISA switch probability this equates to 5 switches
per request, or about 3800 ISA switches per second. When
testing on network designed to emulate the cloud (40 ms la-
tency), the throughput of Nginx shows a very small drop in
performance even with a 100% probability to switch ISAs (the
cloud scenario in Figure 5). Note that HeterSec kernel brings
minimal performance overhead to non-HeterSec processes.
For example, the vanilla Nginx performs 22357.5 req/s on
vanilla Linux kernel, whereas it performs 22273.8 req/s on
HeterSec kernel (∼0.37% overhead).
We observed similar results when running redis-benchmark
to measure the throughput of Redis SET instructions. As
shown in Figure 6, Redis performs about 30% throughput
when running on HeterSec compared with the native exe-
cution. However, the overhead drops to 15% and 2% when
running the benchmark over edge and cloud computing cases
respectively. We set the ISA switch points in a periodic job for
the Redis evaluation which resulted in about 20 ISA switches
per second, pegged to the server.hz value. Interestingly
enough, we saw a slight throughput improvement when we
increased the ISA-switching probability threshold from 80%
to 100%. This is likely due to the deterministic execution ﬂow
transfer avoiding destroying the branch prediction. The results
show that although the frequent ISA-switch is expensive, it is
feasible to use for server applications in real-world scenarios.
Next, we report the performance of two heterogeneous ISA
multi-version execution prototypes. As mentioned in Sec-
tion 3.4.2, the ptrace version multi-ISA MVX prototype is
used to ﬁnd out all the necessary system calls for simulation,
as it is easier to debug with an userspace MVX engine. The
MVX engine running in HeterSec kernels can achieve better
performance. In our experiment, both MVX prototypes use
the ARM64 node to launch the master variant, and ofﬂoad the
follower variant to the x86_64 node. The cost of MVX are
mostly from the program state synchronization in between
the two variants. For example, the master variant has to wait
the system call simulation to be ﬁnished on the follower side
in order to continue the execution (a.k.a., lock-step check).
We evaluated the two MVX prototypes with nbench, gzip
and Lighttpd web server. Gzip and Lighttpd are two I/O in-
tensive applications. In gzip test case, we randomly gener-
ate ﬁles in different size from /dev/urandom. We also used
ApacheBench to generate workloads for Lighttpd web server.
We run all the benchmarks with both kernel-based MVX and
ptrace-based MVX prototypes. Figure 7 shows the normalized
performance evaluation results using the vanilla application
436    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
  0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  120406080100Performance(Requests/s) NormalizedProbability of ISA−switch at each ISA−switching point Local Ethernet Edge Computing Scenario Cloud Computing Scenario  0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  120406080100Performance(SET/s) NormalizedProbability of ISA−switch at each ISA−switching point Local Ethernet Edge Computing Scenario Cloud Computing Scenariotion level [36], basic block level [13, 78], or even instruction
level [26]. Some latest research further show the feasibility
of ASLR at runtime, making the code layout re-randomized
for a given period of time [8,13,81]. HeterSec extends this re-
search line by exploring the feasibility of using heterogeneous
instruction set to diversify the program.
Multi-version execution is another concrete technique of
software diversity. Instead of randomizing a single code in-
stance, MVX engines run multiple variants of program in-
stances simultaneously [15, 38, 51, 57, 58, 72, 73, 83]. Those
variants are different in memory layout, so that a malicious in-
put might trigger the vulnerable code in one variant but likely
to fail on other variants. Such memory layout differences
could be non-overlapping memory map [38, 57, 83], reverse
stack growth [58], etc. Recently, researchers also proposed
to apply MVX inside Linux kernel, to detect kernel bug ex-
ploits [83]. DMON is a very recent and concurrent work using
distributed heterogeneous-ISA machines for multi-version ex-
ecution [73]. DMON shows that MVX with heterogeneous
ISA setting can achieve better effectiveness for advanced code
reuse attacks, such as the position-independent ROP [23, 73].
As we have compared in Section 2.2, DMON focuses on
a heterogeneous-ISA MVX engine only, whereas HeterSec
is proposed as a general framework. The multi-ISA MVX
engine is a showcase of the HeterSec application scenarios.
Another category of the related work includes the split-
interface systems [18, 19, 62, 75] and the multikernel OSes [4,
6, 7, 79]. The split-interface systems normally leverage two
compartments to separate and isolate program code execu-
tion or secret data access. For example, proxos [62] splits the
application execution into trusted and untrusted parts. The
trusted part of the execution is isolated in a separate private
VM, while the untrusted code can only communicate with
the trusted code through a proxy OS. Nested kernel [18] and
SecPod [75] split the OS kernels into isolated components for
enhanced kernel security. Isomeron [19] on the other hand
splits the code execution between two diversiﬁed variants. By
randomly “ﬂip-coin” selecting the next function to be exe-
cuted, Isomeron randomizes the execution path to mitigate
conventional code reuse attacks [19]. HeterSec shares the
same idea of splitting interface to secure application execu-
tion, but HeterSec further enhances the execution security by
split-executing code on two ISA-diversiﬁed nodes.
The multikernel OS treats a multi-core machine as a dis-
tributed network of independent cores. A number of sys-
tems leverage multiple OS kernels to manage the hetero-
geneous and multi-core machines in a divide and conquer
way [4, 6, 7, 79]. For example, Barrelﬁsh [7] runs multiple OS
kernels on top of a multi-core machine in order to make multi-
thread application performance scalable. Similarly, fos tackles
the scalability issues by factoring the OS into micro-kernel
components [79]. Popcorn Linux is a most similar work that
runs multikernel on heterogeneous hardware [4, 6]. Popcorn
Linux focuses on single-threaded HPC applications migra-
Figure 7: Relative performance of nbench, gzip, and Lighttpd
running on the HeterSec kernel-based MVX and the ptrace-
based MVX.
running on the ARM64 node as the baseline. For most of the
CPU and memory-intensive workloads, kernel-based MVX
and ptrace-based MVX have similar performance overheads.
This is because most of the system calls in computation-
intensive applications do not need to be simulated in the MVX
engine. For I/O-intensive applications, both MVX engines
process and check on descriptor related system calls such
as read/write(v). Overall, both multi-ISA MVX engines
introduce about 10% overhead for the gzip benchmark. Since
we duplicated the ﬁles on both nodes, there is no need to
transfer data between nodes. For the web server application,
the MVX engines have to simulate a number of network I/O
related system calls, including accept4, socket, sendfile
and recvfrom, etc. In general, the HeterSec kernel-based
MVX engine pulls down the Lighttpd throughput to about
50% of its native performance. However, that performance is
still better than the ptrace-based MVX engine (∼10x) and the
MVX engine in DMON (∼5.43x) [73].
5 Related Works
The ﬁrst category of related work is the various techniques for
software diversity [42]. An important assumption for a soft-
ware attack is the attacker could have the information of the
target system [16, 59, 60], or at least by chance to obtain such
information by, for example, brute forcing [10,59]. It makes at-
tacks easier if the code itself and the defense mechanisms are
static. Software diversity provides uncertainty for the target
system, which breaks the static nature of the target and thus
increases the cost of an attack. For example, one of the notable
software diversiﬁcation techniques is ASLR (for most cases,
in the form of code randomization) [3,8,13,26,36,63,78,81].
Previous research demonstrated the effectiveness of code ran-
domization at program module level [63], page level [3], func-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    437
  0%  10%  20%  30%  40%  50%  60%  70%  80%  90%  100%Numeric_sortString_sortBitfieldFP_emulationFourierAssignmentIDEAHuffmanNeural_netLU_decompositiongzip_5MBgzip_200MBLighttpdRelative Performance Ptrace−based MVX HeterSec Kernal−based MVXtion; on the other hand, HeterSec targets a not well explored
research area – the feasibility of securing an application exe-
cution with ISA diversity. Furthermore, server applications
and multi-threaded applications are supported with HeterSec.
6 Conclusion
In this paper, we explored the missed research space of secur-
ing application execution with ISA diversity. We described
the design and implementation of HeterSec, a framework to
improve application security with ISA heterogeneity. Heter-
Sec enables HeterSec processes to leverage the diversiﬁed
ISAs as an additional layer of dynamic defense. HeterSec
was built with several compiler and kernel extensions to fa-
cilitate processes running on heterogeneous hardware in a
security enhanced manner. The two security applications built
on HeterSec show that it is feasible to leverage the existing
heterogeneous hardware to improve application security.
The source code of HeterSec is publicly available as part of
the Popcorn Linux project at http://popcornlinux.org.
Acknowledgments
We would like to thank the anonymous reviewers for their
insightful comments. This work is supported in part by
grants received by Virginia Tech including that from the
US Ofﬁce of Naval Research (ONR) under grants N00014-
18-1-2022, N00014-16-1-2104, and N00014-16-1-2711, and
from NAVSEA/NEEC under grant N00174-16-C-0018. Kim’s
work at Virginia Tech (former afﬁliation) was supported by
ONR under grants N00014-16-1-2711 and N00014-18-1-
2022. Olivier’s work at Virginia Tech (former afﬁliation)
was supported by ONR under grants N00014-16-1-2104 and
N00014-18-1-2022. Lyerly’s work at Virginia Tech (former
afﬁliation) was supported in part by NAVSEA/NEEC under
grant N00174-16-C-0018.
This work is also supported by Electronics and Telecom-
munications Research Institute (ETRI) grant funded by the
Korean government (20ZS1310).
References
[1] ARM Limited (or its afﬁliates). ARM BIG.LITTLE.
https://www.arm.com/why-arm/technologies/
big-little, Accessed: 2020-07-08.
[2] Linux Kernel Address Space Layout Randomization.
http://lwn.net/Articles/569635/.
[4] Antonio Barbalace, Robert Lyerly, Christopher Jelesni-
anski, Anthony Carno, Ho-Ren Chuang, Vincent Legout,
and Binoy Ravindran. Breaking the boundaries in
heterogeneous-ISA datacenters. In ACM SIGPLAN No-
tices, volume 52, pages 645–659. ACM, 2017.
[5] Antonio Barbalace, Binoy Ravindran, and David Katz.
Popcorn: a replicated-kernel os based on linux.
In
Proceedings of the Linux Symposium, Ottawa, Canada,
2014.
[6] Antonio Barbalace, Marina Sadini, Saif Ansary, Christo-
pher Jelesnianski, Akshay Ravichandran, Cagil Kendir,
Alastair Murray, and Binoy Ravindran. Popcorn: Bridg-
ing the programmability gap in heterogeneous-isa plat-
forms. In Proceedings of the Tenth European Confer-
ence on Computer Systems, EuroSys ’15, New York, NY,
USA, 2015. Association for Computing Machinery.
[7] Baumann, Andrew and Barham, Paul and Dagand,
Pierre-Evariste and Harris, Tim and Isaacs, Rebecca
and Peter, Simon and Roscoe, Timothy and Schüpbach,
Adrian and Singhania, Akhilesh. The multikernel: a
new OS architecture for scalable multicore systems. In
Proceedings of the ACM SIGOPS 22nd symposium on
Operating systems principles, pages 29–44. ACM, 2009.
[8] David Bigelow, Thomas Hobson, Robert Rudd, William
Streilein, and Hamed Okhravi. Timely rerandomization
for mitigating memory disclosures. In Proceedings of
the 22nd ACM SIGSAC Conference on Computer and
Communications Security, pages 268–279. ACM, 2015.
[9] Nathan Binkert, Bradford Beckmann, Gabriel Black,
Steven K Reinhardt, Ali Saidi, Arkaprava Basu, Joel
Hestness, Derek R Hower, Tushar Krishna, Somayeh
Sardashti, et al. The gem5 simulator. ACM SIGARCH
Computer Architecture News, 39(2):1–7, 2011.
[10] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David
Mazieres, and Dan Boneh. Hacking Blind. In Security
and Privacy (SP), 2014 IEEE Symposium on, pages 227–
242. IEEE, 2014.
[11] Shekhar Borkar. Thousand core chips: a technology
perspective. In Proceedings of the 44th annual Design
Automation Conference, pages 746–749. ACM, 2007.
[12] BYTEmark benchmark. Linux/Unix nbench. http://
www.math.utah.edu/~mayer/linux/bmark.html,
Accessed: 2020-07-08.
[3] Michael Backes and Stefan Nürnberger. Oxymoron:
Making Fine-grained Memory Randomization Practical
by Allowing Code Sharing. Proc. 23rd Usenix Security
Sym, pages 433–447, 2014.
[13] Yue Chen, Zhi Wang, David Whalley, and Long Lu.
Remix: On-demand live randomization. In Proceedings
of the Sixth ACM Conference on Data and Application
Security and Privacy, pages 50–61. ACM, 2016.
438    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
[14] Sharon Choy, Bernard Wong, Gwendal Simon, and
Catherine Rosenberg. The brewing storm in cloud gam-
ing: A measurement study on cloud to end-user latency.
In Proceedings of the 11th annual workshop on network
and systems support for games, page 2. IEEE Press,
2012.
[15] Benjamin Cox, David Evans, Adrian Filipi, Jonathan
Rowanhill, Wei Hu, Jack Davidson, John Knight, Anh
Nguyen-Tuong, and Jason Hiser. N-variant systems: A
secretless framework for security through diversity. In
USENIX Security Symposium, pages 105–120, 2006.
[16] Stephen Crane, Christopher Liebchen, Andrei Homescu,
Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan
Brunthaler, and Michael Franz. Readactor: Practical
Code Randomization Resilient to Memory Disclosure.
In 36th IEEE Symposium on Security and Privacy (Oak-
land), May 2015.
[17] Daniel, P and Marco, Cesati and others. Understanding
the Linux kernel, 2007.
[18] Nathan Dautenhahn, Theodoros Kasampalis, Will Di-
etz, John Criswell, and Vikram Adve. Nested kernel:
An operating system architecture for intra-kernel privi-
lege separation. In Proceedings of the Twentieth Inter-
national Conference on Architectural Support for Pro-
gramming Languages and Operating Systems, pages
191–206. ACM, 2015.
[19] Lucas Davi, Christopher Liebchen, Ahmad-Reza
Sadeghi, Kevin Z Snow, and Fabian Monrose.
Iso-
meron: Code Randomization Resilient to (just-in-time)
Return-oriented Programming. Proc. 22nd Network
and Distributed Systems Security Sym.(NDSS), 2015.
[20] Matthew DeVuyst, Ashish Venkat, and Dean M Tullsen.
Execution migration in a heterogeneous-isa chip multi-
processor. In ACM SIGARCH Computer Architecture
News, volume 40, pages 261–272. ACM, 2012.
[21] Hadi Esmaeilzadeh, Emily Blem, Renee St Amant,
Karthikeyan Sankaralingam, and Doug Burger. Dark
silicon and the end of multicore scaling. In Computer
Architecture (ISCA), 2011 38th Annual International
Symposium on, pages 365–376. IEEE, 2011.
[22] Peter N Glaskowsky. NVIDIA’s Fermi: the ﬁrst com-
plete GPU computing architecture. White paper, 18,
2009.
[23] Enes Göktas, Benjamin Kollenda, Philipp Koppe, Erik
Bosman, Georgios Portokalidis, Thorsten Holz, Herbert