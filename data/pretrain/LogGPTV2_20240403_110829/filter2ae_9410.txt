# 技术分享：Ubuntu崩溃报告工具存在远程代码执行漏洞

## 译文声明
本文为翻译文章，原文来源：donncha.is。具体内容和含义请以原文为准。
- 翻译者：[pwn_360](http://bobao.360.cn/member/contribute?uid=2798962642)
- 预估稿费：260 RMB
- 投稿方式：发送邮件至 linwei#360.cn 或访问网页在线投稿

安全研究人员发现，Ubuntu 崩溃报告工具中存在一个远程代码执行漏洞，攻击者仅需一个恶意文件即可攻陷系统。该漏洞影响所有默认安装的 Ubuntu Linux 12.10 (Quantal) 及其后续版本。

根据 Donncha O’Cearbhaill 的研究，当用户打开一个特制的恶意文件时，该漏洞允许执行任意命令。此漏洞与 Ubuntu 默认文件格式所对应的文件处理程序有关。O'Cearbhaill 在 2016 年 12 月 9 日私下披露了这一漏洞，并于 12 月 14 日发布了补丁。完整的漏洞利用源代码可以在 GitHub 上找到：[https://github.com/DonnchaC/ubuntu-apport-exploitation](https://github.com/DonnchaC/ubuntu-apport-exploitation)。

这篇文章的灵感来源于 Chris Evan 关于 gstreamer 媒体库客户端文件格式解析漏洞的研究。我们将探索 Ubuntu 中其他默认文件处理程序可能存在的类似漏洞。由于我不是二进制开发专家，因此将重点放在不需要利用内存损坏的漏洞上。

### Linux 桌面环境中的文件和 URL 处理程序配置
在 GNOME 或 KDE 等桌面环境中，包含一系列已知的文件格式及其默认处理程序。打开文件时，桌面环境会首先确定文件类型，然后启动相应的应用程序。在 Ubuntu 中，这些默认应用程序列表存储在 `/usr/share/applications/` 文件夹下的 `.desktop` 文件中。每个特定的 MIME 类型（文件格式）都有一个对应的应用程序来处理它。

许多常用软件如图像查看器、媒体播放器、LibreOffice 和 Firefox 已经被广泛研究。我们将关注那些不常用的默认处理程序，以寻找潜在的安全漏洞。

GNOME 使用 `apport-gtk` 工具处理 `text/x-apport` MIME 类型。Ubuntu 根据 `/usr/share/mime/` 文件夹中的描述确定文件的 MIME 类型。通常，文件扩展名用于识别文件类型，但如果无法识别，则会使用魔数字节串进行匹配。

在这种情况下，Apport 程序支持 `.crash` 扩展名和一组特殊的魔数字节。如果文件扩展名无法识别，桌面环境会尝试匹配魔数字节。实验表明，只要文件以“ProblemType: ”开头，Ubuntu 就可以通过 `apport-gtk` 打开任何未知扩展名的文件。

### 对 Apport 进行审计
Ubuntu 在所有桌面版本中默认安装了 Apport 崩溃处理工具。它包括多个组件，用于捕获崩溃报告、显示给用户并上传到 Ubuntu 的问题跟踪服务器。在 Ubuntu Wiki 中可以找到这些组件的概述。

当系统检测到某个软件崩溃时，会调用 `/usr/share/apport/apport` 程序。为了最小化对系统性能的影响，Apport 仅记录基本信息，例如程序路径和核心转储镜像。这些基本信息会被保存在 `/var/crash/[executable_path].[uid].crash` 文件中。

GNOME 的 `update-notifier` 守护进程通过 inotify 监视 `/var/crash` 文件夹。一旦有新文件出现，`/usr/share/apport/apport-checkreports` 会立即被调用。如果这是一个崩溃报告文件，`apport-checkreports` 会调用 `/usr/share/apport/apport-gtk` 以图形界面显示给用户。`apport-gtk` 同时也是 `.crash` 文件的默认处理程序。

### Apport 崩溃报告格式
Apport 崩溃报告具有自定义的文件格式，在 Apport Wiki 页面中有详细描述。这种格式可以存储大量与崩溃相关的字段和当前系统状态。在崩溃发生时，最小的崩溃文件只包含必要的条目，如 `ProblemType`、`ExecutablePath` 和 `CoreDump`。

### 向崩溃文件中注入 Python 代码
Apport 根据不同软件生成的报告提交到不同的 Ubuntu Launchpad 项目。特殊的 hook 脚本包可以从 `/usr/share/apport/package-hooks/` 文件夹加载，以自定义文件内容和崩溃报告的发送目标。崩溃报告中的 `CrashDB` 字段也可以指定目标项目。

`CrashDB` 的配置存储在 `/etc/apport/crashdb.conf.d` 文件中。崩溃文件中的 `CrashDB` 字段可以用来从指定文件夹加载配置文件。然而，这里的代码存在问题：`CrashDB` 字段可以直接包含配置信息本身，而不仅仅是文件路径。如果 `CrashDB` 字段以 `{` 开头，那么 Apport 会将其视为 Python 代码片段，并使用 `eval()` 函数处理。这会导致可靠的代码执行。

这段有漏洞的代码是在 2012 年 8 月 22 日引入到 Apport revision 2464 中的。第一个包含此漏洞的 Apport 版本是 2.6.1，所有 Ubuntu 12.10 及其后续版本均受影响。

### 开发漏洞利用程序
以下是一个最小的崩溃报告文件示例，利用上述 `CrashDB` 漏洞执行任意代码并打开 Gnome 计算器：

```plaintext
ProblemType: Bug
CrashDB: { 'impl': 'memory', 'args': { 'exec': 'gnome-calculator' } }
```

该文件可以用 `.crash` 扩展名保存，或使用 Ubuntu 无法识别的其他扩展名。Apport 在显示需要提交的错误报告之前，通常会先读取崩溃文件的部分字段，但只有在用户确认提交报告后才会解释和执行 `CrashDB` 字段。但是，当崩溃报告中设置 `ProblemType: Bug` 时，`apport-gtk` 会切换到“简化 Bug”图形界面，直接导致 `CrashDB` 字段的解释和执行，无需用户交互。

如果崩溃报告中没有 `Stracktrace` 字段信息，Apport 会花费时间收集崩溃进程的信息，从而延迟 `CrashDB` 字段的执行。我们可以通过提供一个空的 `Stracktrace` 字段来绕过这个问题。

### 加载脚本时的路径遍历
在 Ubuntu 中，Apport 的 hook 脚本包安装在 `/usr/share/apport/package-hooks` 文件夹下。这些 Python hook 脚本基于软件包名称加载，允许软件包维护者从用户的计算机上收集有用的崩溃信息。然而，创建软件包 hook 文件时，崩溃文件中的 `package` 字段并未经过滤。

这里的代码允许攻击者遍历文件路径，并在系统 hook 目录 (`/usr/share/apport/general-hooks/` 或 `/usr/share/apport/package-hooks/`) 之外执行任意 Python 脚本。`_run_hook` 函数会将 hook 文件的内容作为 Python 代码执行。攻击者可以向用户下载的文件中植入恶意的 `.py` 文件和崩溃文件，以执行攻击代码。这个方案通过 Chromium 实现非常容易，因为它会自动下载文件而没有任何提示。

这个路径遍历漏洞在 2007 年 1 月 24 日被引入到 Apport 0.44 版本中，并首次在 Ubuntu 7.04 中使用。

### 利用 CrashDB 和 hook 注入漏洞提权（需要用户交互）
所有 UID 小于 500 的崩溃文件被认为是系统崩溃文件。当打开系统崩溃文件时，“apport-crashreports” 会使用 PolicyKit 提示用户，并使用 root 权限运行。

提示信息通常是“System program problem detected”，并不提供其他崩溃信息。如果使用 UID 小于 500 的崩溃文件利用这两个漏洞，并将崩溃文件放入 `/var/crash` 文件夹中，且用户接受了提示，代码将以 ROOT 权限执行。当然，这需要用户交互。在随机崩溃发生后，任何使用 Ubuntu 的人都会看到这个提权提示信息。

这种漏洞允许低权限应用程序跨越权限边界。例如，可以利用 SQL 注入漏洞通过 "INTO OUTFILE" 语句将恶意崩溃文件写入 `/var/crash` 目录。当桌面用户登录时，恶意崩溃文件将自动执行。

### 结论
上述所有漏洞已通知 Apport 维护人员，并在 2016 年 12 月 14 日提供了补丁。CrashDB 代码注入漏洞编号为 CVE-2016-9949，路径遍历漏洞编号为 CVE-2016-9950，另一个“重新启动”行为下的任意代码执行漏洞编号为 CVE-2016-9951。

### 参考原文
- 原文链接：[原文地址](http://donncha.is/)