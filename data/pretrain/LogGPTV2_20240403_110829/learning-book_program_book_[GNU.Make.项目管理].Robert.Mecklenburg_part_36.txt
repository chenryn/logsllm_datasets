filename =FILENAME
sub（/text/."out,filename）
printfilename*:*prereq
/^*include-program/（
generate_dependency(*$(EXAMPLES_DIR)/*$2）
---
## Page 231
makefile实例
221
/*mp_program\（/{
match（$0,/\（（.*）\）/,names）
generate_dependency(*$（ExAMPLES_DIR)/names[1])
)/ndno-apnout/
generate_dependency(*S（OUTpUT_DIR)/.$2)
/*mp_output\（/{
match（$0,/\（（.*)\）/，names）
generate_dependency(*S(OuTPUT_DIR)/*names[1])
/graphic fileref/{
match（$o,/"（.*)"/,out_file）
generate_dependency（out_file[1]);
此脚本会搜索如下的模式：
mp_program(ch01-hello/Makefile)
mp_output(ch01-he1lo/make.out)
（mp_program宏使用的是程序列表的形式，而mp_output宏使用的是程序输出的形式。）
此脚本会从源文件的名称与文件名参数产生出依存关系来。
最后，依存文件的产生按惯例是受到make的include语句的触发：
#S（call source-to-output,file-name)
define source-to-output
S(aub8tS(SOURCE_DIR),S(OUTPUT_DIR),$1)
endef
ALL_XML_SRC
:=S（wi1dcard S(SOURCE_DIR)/*.xm1)
DEPENDENCY_FILES:=S(cal1 source-to-output,$(subst
.Xml,.d,S(ALL_XML_SRC)))
-include S(DEPENDENCY_FILES)
endif
vpath 8.xm1$(SOURCE_DIR)
$（OUTPUT_DIR)/8.d:8.xmlS（make-depend）
$（make-depend）$<>$@
以上就是用来处理范例的完整代码。大多数复杂的主文件名，来自makefile依需要所实
际引人的源文件以及make和范例程序的实际输出。我想make应该会说“要么你去做，
要么给我闭嘴”（putuporshutup）。如果我相信make是如此的好用，那它应该能够
处理这个复杂的工作，而且，天啊，它的确可以。
---
## Page 232
222
第十一章
XML的预处理
即使让子孙后代认为我是一个俗不可耐的人，我也必须承认，我非常不喜欢XML。我觉
得它既笨拙且长。所以，当我发现自己的原稿必须以DocBook编写时，我找来了一些
能够协助我减轻痛苦的、较传统的工具。m4宏处理器与awk这两个工具对我的帮助非
常大。
m4非常适合用来处理DocBook与XML所存在的两个问题：避免XML的元长语法，以
及管理交互引I用中的XML标识符。例如，在DocBook中要强调一个单词，你必须这么
做：
not
而有了m4，我只要编写一个简单的宏，就可以这么做：
mp_em(not）
啊，感觉好多了。此外，我发现许多符号编排风格适合使用此工具，比如mp_variable
和mp_target。这让我能够选择一个不重要的格式，比如literal，并且稍后在产品部门
有意见的时候可以随时加以变更，而不用进行全局的搜索和替换。
我相信XML迷们可能会寄一堆电子邮件来告诉我，如何使用实体或之类的东西来达到
此目的，但是别忘了Unix就是希望你用手边的工具把事情做好，而且正如LarryWall
的口头禅“解决事情的方法不只一种”说得那样。此外，我害怕学太多有关XML的知
识会让我的脑袋坏掉？
m4的第二项工作是让XML标识符能够使用在交互引用中。每一章、节、范例以及表格
都会标上一个如下的标识符：
要引用某一章就必须使用这个标识符。从程序设计的观点来看这显然是一个问题。标识
符是一个复杂的常数，里头充满了各种编码。此外，标识符符号本身不代表任何意义。
我并不知道第七章第一节的内容在讲什么。使用m4，我可以避免重复的复杂文字，而且
可以提供较具意义的名字：
最重要的是，如果章、节有所调整，只要在一个文件中变更几个常数就可以进行更新的
动作。当一章里各节的顺序需要重新安排时，此项优点最为显著。如果不使用符号引用
的话，像这样的操作，可能需要跨越所有文件进行多次全局的搜索和替换操作。
---
## Page 233
makefile实例
223
下面是一些m4宏的范例（注2）：
m4_define(mp_tag',
$2')
m4_define(mp_lit',
mp_tag（literal,s1')*)
m4_define（mp_cmd',
（.（.s、pueuo）bedu、
m4_define(mp_target',mp_lit（$1）')
m4_define(mp_all',
mp_target(all)')
m4_define(mp_bash',
mp_cmd(bash)*)
m4_define(mp_ch_examples',
MPWM-CH-11')
m4_define(mp_se_book',
MPWM-CH-11.1')
m4_define(mp_ex_book_makefile',MPwM-CH-11-Ex-1')
其他的预处理工作，就是为了实现出一个引人的功能以加人之前所讨论到的范例文本。
范例文本中的跳格需要转换成空格（因为O'Reilly的DocBook转换程序无法处理跳格，
但是makefile中有许多跳格！），所以必须把它们包裹在[CDATA[...]]里以便保护特
殊的字符，最后还必须整理范例文本开头和结尾处的额外换行符号。我使用另一个名为
process-includes的小型awk程序来完成此事：
#！/usr/bin/awk-f
function expand_cdata(dir)
start_place =match($1,“include-*)
if（start_place>0)
prefix=substr（ $1,1,start_place -1）
)
else
end_place=match（S2,“（.*)s",tag）
if（end_place>0）
file=dir substr（$2,1,end_place-1)
else
command="expand·file
printf "$s>&33;&91;CDATA[",prefix
tail=0
注2：
mp前缀代表ManagingProjects（本书的标题）、macroprocessor（宏处理器）或make
pretty。任君选择。
---
## Page 234
224
第十
previous_line=*"
while（（command1getline 1ine）>0）
if（tail）
print previous_line;
tail=1
previous_line=1ine
）
printf *$s&93;&93:&62:&s\n*,previous_line,tag[1]
close(command)
)
/include-program/{
expand_cdata(*examples/)
next;
/include-output/(
expand_cdata(*out/)
next;
/*s/(
Find the current indentation.
offset=match（$o,*”)
Strip newline from tag.
printf $o
#Read the program...
tail=0
previous_line=*"
while（（getline line）>0）
if（1ine~"*)
{
gsub（/*/,"，1ine）
break
√
if（tail）
print previous_line
tail=1
previous_line =substr（line,offset +1）
printf*&sts\n,previous_line,line
next
---
## Page 235
makefile实例
225
{
print
在这个makefile中，我们将XML文件从源文件树复制到输出文件树、转换跳格符、扩
展宏以及处理引人文件：
process-pgm :=bin/process-includes
m4-macros:=text/macros.m4
#S（call process-includes,input-file,output-file)
移除跳格符、扩展宏以及处理引人文件
define process-includes
expand s11
$（process-pgm）>$2
endef
vpath .xml $(SOURCE_DIR)
$（OUTPUT_DIR)/$.xml:$.xm1 $（process-pgm）S（m4-macros）
S（call process-includes,$<,$@)
此处的模式规则指出了将源文件树的XML文件复制到输出文件树的方法。它还指出了，
如果宏或引I人文件处理器有所变动，应该重新产生输出文件树中的所有XML文件。
产生输出
到目前为止，我们尚未说明实际被编排过的任何文本，或者任何可以输出或显示的结果。
显然，一个非常重要的功能就是让makefile进行本书的编排工作。有两种格式是我感兴
趣的：HTML和PDF。
我首先会说明如何进行编排成HTML格式的工作。有一个好用的小程序xsltproc以及
它的辅助脚本xmlto可用来完成此工作。使用这两个工具，处理的过程相当简单：
#本书的输出格式
BOOK_XML_OUT
:=S(OUTPUT_DIR)/book.xml
BOOK_HTML_OUT
：=$（substxm1,html,S（BOOK_XML_OUT))
ALL_XML_SRC
：=S（wildcard S（SOURCE_DIR)/*.xm1)
ALL_XML_OUT
:=S(cal1 source-to-output,S(ALL_XML_SRC))
html—为本书产生所需要的输出格式
.PHONY:html
html:S（BOOK_HTML_OUT)
#show_html—产生一个html文件并加以显示
.PHONY:show_html
show_html:S（BOOK_HTML_OUT)
$（HTML_VIEWER)$（BOOK_HTML_OUT)
---
## Page 236
226
第十一章
#S（BOOK_HTML_OUT）—产生html文件。
$（BOOK_HTML_OUT):$(ALL_XML_OUT)S（OUTPUT_DIR)/validate Makefi1e
8.html--从xml输人产生html输出的模式规则。
8.html:8.xml
$（XMLTO)S(XMLTO_FLAGS）html-nochunks $<
此处的模式规则主要是用来将XML文件转换成HTML文件。本书的结构就放在一个名
为book.xml的顶层文件中，用来引I人每一章。BOOK_XML_OUT变量代表这个顶层文件，
BOOK_HTML_OUT则是这个顶层文件的HTML版本，我们会以它为工作目标，以它所包
含的XML文件为必要条件。为了方便起见，我们会设定两个假想工作目标htm1和
show_html，分别用来创建HTML文件以及通过当前的浏览器来显示它。
尽管说起来容易，但是PDF文件的产生却相当复杂。xsltproc程序可用来直接产生PDF
文件，但是我无法单独使用它。所有的工作是在具有Cygwin的Windows上进行的，而
且Cygwin版的xsltproc需要使用POSIX风格的路径。而我所使用的自定义版（custom
version）的DocBook以及原稿本身，所包含的是Windows风格的路径。我相信这个差
异将会让xsltproc发生我无法处理的问题。所以我选择使用xsltproc来产生XML编
排对象（formattingobject），然后使用Java程序FOP（http://xml.apache.org/fop）来产
生PDF文件。
因此，用来产生PDF文件的代码会有点长：
本书的输出格式
BOOK_XML_OUT
BOOK_FO_OUT
:=S（Subst xml,fo,S（BOOK_XML_OUT）)
BOOK_PDF_OUT:=$（Substxml,pdf，$（BOOK_XML_OUT))
ALL_XML_SRC
:=S（wi1dcard $（SOURCE_DIR)/*.xml）
ALL_XML_OUT
:= S（cal1 SOurce-to-output,S(ALL_XML_SRC))
pdf—为本书产生所需要的输出格式
.PHONY:pdf
pdf:$（BOOK_PDF_OUT)
#show_pdf-产生pdf文件并加以显示
.PHONY: show_pdf
show_pdf:$(BOOK_PDF_OUT)
$(kill-acroread)
$（PDF_VIEWER)S（BOOK_PDF_OUT）
#S（BOOK_PDF_OUT）-产生pdf文件
$（BOOK_PDF_OUT):$（BOOK_FO_OUT)Makefi1e
S（BOOK_FO_OUT）——产生fo中间输出文件