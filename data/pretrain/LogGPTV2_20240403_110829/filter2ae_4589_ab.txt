    libshella_3.0.0.0.so:75FFEA54 LDR             R2, [R3,#8]
    libshella_3.0.0.0.so:75FFEA58 LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFEA5C LDR             R3, [R3,#0x10]
    libshella_3.0.0.0.so:75FFEA60 ADD             R3, R2, R3
    libshella_3.0.0.0.so:75FFEA64 ADD             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEA68 ADD             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEA6C BIC             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEA70 BIC             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEA74 STR             R3, [R11,#var_24]
    libshella_3.0.0.0.so:75FFEA78 B               loc_75FFEAAC
    libshella_3.0.0.0.so:75FFEA7C ; ---------------------------------------------------------------------------    
    ;3.第一个if语句执行完跳转的地方
    ;var_10指向的值+1
    ;var_C指向的值+0x20
    libshella_3.0.0.0.so:75FFEA7C
    libshella_3.0.0.0.so:75FFEA7C loc_75FFEA7C                            ; CODE XREF: sub_75FFE944+D4j
    libshella_3.0.0.0.so:75FFEA7C                                         ; sub_75FFE944+E4j ...
    libshella_3.0.0.0.so:75FFEA7C LDR             R3, [R11,#var_10]
    libshella_3.0.0.0.so:75FFEA80 ADD             R3, R3, #1
    libshella_3.0.0.0.so:75FFEA84 STR             R3, [R11,#var_10]
    libshella_3.0.0.0.so:75FFEA88 LDR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFEA8C ADD             R3, R3, #0x20
    libshella_3.0.0.0.so:75FFEA90 STR             R3, [R11,#var_C]
    libshella_3.0.0.0.so:75FFEA94
    ;1.while开始位置：条件判断
    ;将变量var_28的值(libshella_3.0.0.0.so内存基址)赋值给R3
    ;将var_28+0x2C这个内存地址指向的值，即程序头表的数量复制给R3，读取长度为2字节。接着又赋给R2
    ;将变量var_10的值给R3
    ;判断：如果R2-R3没有借位，zbit位为1即R2>R3，向上跳转执行循环体
    libshella_3.0.0.0.so:75FFEA94 loc_75FFEA94                            ; CODE XREF: sub_75FFE944+88j
    libshella_3.0.0.0.so:75FFEA94 LDR             R3, [R11,#var_28]
    libshella_3.0.0.0.so:75FFEA98 LDRH            R3, [R3,#0x2C]
    libshella_3.0.0.0.so:75FFEA9C MOV             R2, R3
    libshella_3.0.0.0.so:75FFEAA0 LDR             R3, [R11,#var_10]
    libshella_3.0.0.0.so:75FFEAA4 CMP             R2, R3
    libshella_3.0.0.0.so:75FFEAA8 BHI             loc_75FFE9D0
### 逻辑移位
**伪代码**
    char var_11 = 0x2B;
    char var_12 = 0x99;
    char var_13 = 0x20;
    char var_14 = 0x15;
    var_30 = var_8; //libshella_3.0.0.0.so内存基址
    char var_29 = 0x91;
    char var_2A = 0x91;
    var_31  = 0x00; 
    var_38 = dword_76002008 >> 16;  //0x1000
    var_3C = dword_76002008 > 16; //0x2AB4
    var_40 = var_3C - var_38;   //0x1AB4
    mprotect(*(unkown *)var_30 + 0x1000, ((*(unkown *)var_30 / 0x1000)+1)*0x1000, 3);
  1. 变量赋值
  2. 给libshella_3.0.0.0.so内存基址往后偏移0x1000开始，长度为0x2000的内存页，赋可读可写属性
    ;1. 变量赋值
    ;修改变量var_14的高位字节为0x2B，接着将0x2B992015赋值给var_14
    ;0x2B异或、取逆，得到0xFFFFFF91，取低位字节0x91到var_2C的高位上,接着将0x91继续赋给var_2C高位得到0x91914EB0
    ;var_8 = var_30
    ;给var_34高位置0
    ;将特定偏移的数据dword_76002008的值右移16，0x1000存储到var_38
    ;将特定偏移的数据dword_76002008的值左移16，右移16，0x2AB4存到var_3C
    ;将var_3C-var_38的值，0x1AB4赋值给var_40
    ;R0 = *var_30 + *var_38
    ;R1 = ((*var_40 / 0x1000)+1)*0x1000，用来计算*var_30占用的内存页总大小，值为0x2000
    ;R2 = 3
    libshella_3.0.0.0.so:75FFEAAC loc_75FFEAAC                            ; CODE XREF: sub_75FFE944+134j
    libshella_3.0.0.0.so:75FFEAAC MOV             R3, #0x2B
    libshella_3.0.0.0.so:75FFEAB0 STRB            R3, [R11,#var_11]
    libshella_3.0.0.0.so:75FFEAB4 LDRB            R3, [R11,#var_11]
    libshella_3.0.0.0.so:75FFEAB8 EOR             R3, R3, #0x45
    libshella_3.0.0.0.so:75FFEABC MVN             R3, R3
    libshella_3.0.0.0.so:75FFEAC0 STRB            R3, [R11,#var_29]
    libshella_3.0.0.0.so:75FFEAC4 LDRB            R3, [R11,#var_29]
    libshella_3.0.0.0.so:75FFEAC8 STRB            R3, [R11,#var_2A]
    libshella_3.0.0.0.so:75FFEACC MOV             R3, #0xFFFFFF99
    libshella_3.0.0.0.so:75FFEAD0 STRB            R3, [R11,#var_12]
    libshella_3.0.0.0.so:75FFEAD4 MOV             R3, #0x20
    libshella_3.0.0.0.so:75FFEAD8 STRB            R3, [R11,#var_13]
    libshella_3.0.0.0.so:75FFEADC MOV             R3, #0x15
    libshella_3.0.0.0.so:75FFEAE0 STRB            R3, [R11,#var_14]
    libshella_3.0.0.0.so:75FFEAE4 LDR             R3, [R11,#var_8]
    libshella_3.0.0.0.so:75FFEAE8 STR             R3, [R11,#var_30]
    libshella_3.0.0.0.so:75FFEAEC MOV             R3, #0
    libshella_3.0.0.0.so:75FFEAF0 STRB            R3, [R11,#var_31]
    libshella_3.0.0.0.so:75FFEAF4 LDR             R3, =(dword_76002008 - 0x75FFEB00)
    libshella_3.0.0.0.so:75FFEAF8 ADD             R3, PC, R3 ; dword_76002008
    libshella_3.0.0.0.so:75FFEAFC LDR             R3, [R3]
    libshella_3.0.0.0.so:75FFEB00 MOV             R3, R3,LSR#16
    libshella_3.0.0.0.so:75FFEB04 STR             R3, [R11,#var_38]
    libshella_3.0.0.0.so:75FFEB08 LDR             R3, =(dword_76002008 - 0x75FFEB14)
    libshella_3.0.0.0.so:75FFEB0C ADD             R3, PC, R3 ; dword_76002008
    libshella_3.0.0.0.so:75FFEB10 LDR             R3, [R3]
    libshella_3.0.0.0.so:75FFEB14 MOV             R3, R3,LSL#16
    libshella_3.0.0.0.so:75FFEB18 MOV             R3, R3,LSR#16
    libshella_3.0.0.0.so:75FFEB1C STR             R3, [R11,#var_3C]
    libshella_3.0.0.0.so:75FFEB20 LDR             R2, [R11,#var_3C]
    libshella_3.0.0.0.so:75FFEB24 LDR             R3, [R11,#var_38]
    libshella_3.0.0.0.so:75FFEB28 RSB             R3, R3, R2
    libshella_3.0.0.0.so:75FFEB2C STR             R3, [R11,#var_40]
    libshella_3.0.0.0.so:75FFEB30 LDR             R3, [R11,#var_38]
    libshella_3.0.0.0.so:75FFEB34 LDR             R2, [R11,#var_30]
    libshella_3.0.0.0.so:75FFEB38 ADD             R2, R2, R3
    libshella_3.0.0.0.so:75FFEB3C LDR             R3, [R11,#var_40]
    libshella_3.0.0.0.so:75FFEB40 ADD             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEB44 ADD             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEB48 BIC             R3, R3, #0xFF0
    libshella_3.0.0.0.so:75FFEB4C BIC             R3, R3, #0xF
    libshella_3.0.0.0.so:75FFEB50 MOV             R0, R2
    libshella_3.0.0.0.so:75FFEB54 MOV             R1, R3
    libshella_3.0.0.0.so:75FFEB58 MOV             R2, #3
    libshella_3.0.0.0.so:75FFEB5C BL              mprotect_0
#### 解密
**伪代码**
    for(var_18=0x1000; var_18 <= var_3C; var_18++)
    {
        var_31 = *(_BYTE *)(var_30 + var_18);
        var_2A = (unsigned __int8)(((ar12-var_13) ^ var_18 + var_14) ^ var_11);
        *(_BYTE *)(var_30 + var_18) = *(_BYTE *)(var_30 + var_18) ^ (char)var_2A;
        *(_BYTE *)(var_30 + var_18) += (unsigned __int8)((var_13 &var_14) ^ var_12);
        var_11 += (unsigned __int8)(var_12 + var_13 - var_14) & var_31 & var_18;
        var_12 += (unsigned __int8)(var_18 + var_11) ^ var_31;
        var_13 ^= (unsigned __int8)(var_31-var11) ^ var_18;
        var_14 += (unsigned __int8)(var_18)-(var_31 +var_11);
        var_18++;
    }
    mprotect(var_38+var_30, (var_40/0x1000 + 1)*0x1000, 5);
    sub_B39E47E8(var_38+var_30, var_40);
    dword_AF7A5008 = var_8; //libshella_3.0.0.0.so内存基址
  1. for循环的初始化操作：var_18 = var_38 = 0x1000
  2. for循环的判断条件：var_18 <= var_3C（0x2AB4）
    1. ;初始化
    libshella_3.0.0.0.so:AF7A1B60 LDR             R3, [R11,#var_38]
    libshella_3.0.0.0.so:AF7A1B64 STR             R3, [R11,#var_18]
    libshella_3.0.0.0.so:AF7A1B68 B               loc_AF7A1D24
    libshella_3.0.0.0.so:AF7A1B6C ; ---------------------------------------------------------------------------    libshella_3.0.0.0.so:AF7A1B6C
    libshella_3.0.0.0.so:AF7A1B6C loc_AF7A1B6C                            ; CODE XREF: sub_AF7A1944+3ECj
    ;3. 解密开始
    ;var_30+var_18指向的值，取其低字节存到变量var_31(var_34的高字节)
    ;var_12减去var_13，得到，取其低八位值赋给R2，(unsigned __int8)(var12-var_13)
    ;var_18的值取低八位并且和R2进行异或，结果赋给R3，取R3低8位赋值给R2
    ;var_14的值加上R2取低八位接着赋给R2
    ;var_11的值和R2异或，取低八位，将值保存到var_2A
    ;var_30的值加上var_18的值保存到R3
    ;var_30的值加上var_18的值指向的1字节内存数据保存到R1
    ;var_2A的值和R1异或，取低八位，将数据保存到R3指向的那块内存中
    libshella_3.0.0.0.so:AF7A1B6C LDR             R3, [R11,#var_18]
    libshella_3.0.0.0.so:AF7A1B70 LDR             R2, [R11,#var_30]
    libshella_3.0.0.0.so:AF7A1B74 ADD             R3, R2, R3
    libshella_3.0.0.0.so:AF7A1B78 LDRB            R3, [R3]
    libshella_3.0.0.0.so:AF7A1B7C STRB            R3, [R11,#var_31]
    libshella_3.0.0.0.so:AF7A1B80 LDRB            R2, [R11,#var_12]
    libshella_3.0.0.0.so:AF7A1B84 LDRB            R3, [R11,#var_13]
    libshella_3.0.0.0.so:AF7A1B88 RSB             R3, R3, R2
    libshella_3.0.0.0.so:AF7A1B8C AND             R3, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1B90 AND             R2, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1B94 LDR             R3, [R11,#var_18]
    libshella_3.0.0.0.so:AF7A1B98 AND             R3, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1B9C EOR             R3, R2, R3
    libshella_3.0.0.0.so:AF7A1BA0 AND             R3, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1BA4 AND             R2, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1BA8 LDRB            R3, [R11,#var_14]
    libshella_3.0.0.0.so:AF7A1BAC ADD             R3, R2, R3
    libshella_3.0.0.0.so:AF7A1BB0 AND             R3, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1BB4 AND             R2, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1BB8 LDRB            R3, [R11,#var_11]
    libshella_3.0.0.0.so:AF7A1BBC EOR             R3, R2, R3
    libshella_3.0.0.0.so:AF7A1BC0 AND             R3, R3, #0xFF
    libshella_3.0.0.0.so:AF7A1BC4 STRB            R3, [R11,#var_2A]
    libshella_3.0.0.0.so:AF7A1BC8 LDR             R3, [R11,#var_18]
    libshella_3.0.0.0.so:AF7A1BCC LDR             R2, [R11,#var_30]
    libshella_3.0.0.0.so:AF7A1BD0 ADD             R3, R2, R3
    libshella_3.0.0.0.so:AF7A1BD4 LDR             R2, [R11,#var_18]