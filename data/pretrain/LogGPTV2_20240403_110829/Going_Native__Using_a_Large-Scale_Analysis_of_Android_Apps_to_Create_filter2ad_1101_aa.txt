title:Going Native: Using a Large-Scale Analysis of Android Apps to Create
a Practical Native-Code Sandboxing Policy
author:Vitor Monte Afonso and
Paulo L. de Geus and
Antonio Bianchi and
Yanick Fratantonio and
Christopher Kruegel and
Giovanni Vigna and
Adam Doup&apos;e and
Mario Polino
Going Native: Using a Large-Scale Analysis of
Android Apps to Create a Practical Native-Code
Sandboxing Policy
Vitor Afonso∗, Antonio Bianchi†, Yanick Fratantonio†, Adam Doup´e‡,
Mario Polino§, Paulo de Geus¶, Christopher Kruegel†, and Giovanni Vigna†
Email: PI:EMAIL
∗CAPES Foundation
†UC Santa Barbara
Email: {antoniob, yanick, chris, vigna}@cs.ucsb.edu
‡Arizona State University
Email: PI:EMAIL
§Politecnico di Milano
¶University of Campinas
Email: PI:EMAIL
Email: PI:EMAIL
Abstract—Current static analysis techniques for Android ap-
plications operate at the Java level—that is, they analyze either
the Java source code or the Dalvik bytecode. However, Android
allows developers to write code in C or C++ that is cross-compiled
to multiple binary architectures. Furthermore, the Java-written
components and the native code components (C or C++) can
interact.
Native code can access all of the Android APIs that the Java
code can access, as well as alter the Dalvik Virtual Machine,
thus rendering static analysis techniques for Java unsound or
misleading. In addition, malicious apps frequently hide their
malicious functionality in native code or use native code to launch
kernel exploits.
It is because of these security concerns that previous research
has proposed native code sandboxing, as well as mechanisms
to enforce security policies in the sandbox. However, it is not
clear whether the large-scale adoption of these mechanisms is
practical: is it possible to deﬁne a meaningful security policy
that can be imposed by a native code sandbox without breaking
app functionality?
In this paper, we perform an extensive analysis of the native
code usage in 1.2 million Android apps. We ﬁrst used static
analysis to identify a set of 446k apps potentially using native
code, and we then analyzed this set using dynamic analysis.
This analysis demonstrates that sandboxing native code with
no permissions is not ideal, as apps’ native code components
perform activities that require Android permissions. However,
our analysis provided very encouraging insights that make us
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23384
believe that sandboxing native code can be feasible and useful in
practice. In fact, it was possible to automatically generate a native
code sandboxing policy, which is derived from our analysis, that
limits many malicious behaviors while still allowing the correct
execution of the behavior witnessed during dynamic analysis for
99.77% of the benign apps in our dataset. The usage of our system
to generate policies would reduce the attack surface available to
native code and, as a further beneﬁt, it would also enable more
reliable static analysis of Java code.
I.
INTRODUCTION
Mobile operating systems allow third-party developers to
create applications (hereafter referred to as apps) that extend
the functionality of the mobile device. Apps span across all
categories of use: banking, socializing, entertainment, news,
health, sports, and travel.
Google’s Android operating system currently enjoys the
largest market share, currently at 84.7%, of all current smart-
phone operating systems [25]. The ofﬁcial app market for An-
droid, the Google Play Store, has around 1.4 million available
apps [2] (according to AppBrain, a third-party Google Play
Store tracking site) with over 50 billion app downloads [38].
Android apps are typically written in Java, and then
compiled to bytecode that runs on an Android-speciﬁc Java
virtual machine, called the Dalvik Virtual Machine (DVM).1
These apps can interact with the ﬁlesystem, the Android APIs
(to access phone features such as GPS location, call history,
microphone, or SMS messages), and even other apps.
The wealth of information stored on smartphones attracts
miscreants who want to steal the user’s information, send out
1In recent versions, the bytecode is instead compiled and executed by a
new runtime, called ART. For simplicity, in the rest of the paper we will only
refer to the DVM. However, everything we describe conceptually applies to
ART as well.
premium SMS messages, or even have the user’s device join
a botnet [10].
Static analysis of Android applications has been proposed
by various researchers to check the security properties of the
apps that the user installs [5], [7], [17], [18], [22], [23], [28],
[29], [39], [42]–[45].
All the proposed static analysis techniques for Android
apps have operated at the Java level—that is, these techniques
process either the Java source code or the Dalvik bytecode.
However, Android apps can also contain components written
in native code (C or C++) using the Android NDK [19]. Some
of the reasons why developers might use this feature, as stated
by the NDK documentation [19], are:
For certain types of apps, [native code] can be help-
ful so you can reuse existing code libraries written
in these languages, but most apps do not need the
Android NDK.
Typical good candidates for the NDK are CPU-
intensive workloads such as game engines, signal
processing, physics simulation, and so on.
Using the NDK, the C or C++ code will be compiled and
packaged with the app. Android provides an interface (JNI)
for Java code to call functions of native code and vice versa.
While attempting to allow native code in Android apps is
noble, there are serious security implications of allowing apps
to execute code outside the Java ecosystem.
The existence of native code severely complicates static
analysis of Android apps. First, to our knowledge, no static
analysis of Android apps attempts to statically analyze the
native code included in the app. Thus, malware authors can
include the malicious payload/behavior in a native code com-
ponent to evade detection. Furthermore, the native code in an
Android app has more capabilities than the Java code. This is
because the native code has direct access to the memory of
the running process, and, because of this access, can read and
modify the Dalvik Virtual Machine and its data.2 Effectively,
this means that the native code can completely modify and
change the behavior of the Java code—rendering all static
analysis of the Java code unsound.
In light of these security problems with native code usage
in Android applications, researchers have turned to sandboxing
mechanisms, which limit the interaction between the native
code and the Java code [8], [33], [35]. This follows the least-
privilege principle: The native code does not need full access
to the Java code and thus should be sandboxed.
A native code sandbox should be security-relevant and
usable with benign, real-world apps. These requirements result
in the following properties:
•
Least-Privilege: The native code of the app should
have access only to what is strictly required, thus
reducing the chances the native component could
extensively damage the system.
2Even if the Dalvik Virtual Machine memory is initially mapped as read-
only, a native code component can change the memory permission by using
the mprotect syscall.
•
•
•
Compartmentalization: The native code of the app
should communicate with the Java part only using spe-
ciﬁc, limited channels, so that the native component
cannot modify, interact with, or otherwise alter the
Java runtime and code in unexpected ways.
Usability: The restrictions enforced by the sandbox
must not prevent a signiﬁcant portion of benign apps
from functioning.
Performance: The sandbox implementation must not
impose a substantial performance overhead on apps.
Even though previous research has focused on the mech-
anism of native code sandbox enforcement [33], [35], to this
point no research has focused on how to generate a security
policy that a sandbox can enforce so that the policy is be both
practical (i.e., it would not break benign apps) and useful (i.e.,
it would limit malicious behaviors).
Sun and Tan [35], in their paper presenting the native code
sandboxing mechanism NativeGuard, state:
We decide to follow a heuristic approach and by
default grant no permission to the [sandboxed native
code] in NativeGuard. The approach is motivated
by the observation that it is rare for legal native
code to perform privileged operations, as it is a “bad
practice” according to the NDK.
Sun and Tan are correct that the NDK considers native code
performing privileged operations to be bad practice, however,
we need data to conﬁrm this intuition. We must know: what is
the native code in real-world apps doing? How do real-world
apps use native code? For instance, what if native code is
used to perform exactly the same actions as Java code? In this
case, it would not be possible to meaningfully constrain the
permission of native code components, and enforcing the least-
privilege principle would not grant any security beneﬁts. We
also need clariﬁcation as to how tightly coupled the communi-
cation is between the native code and the Java code. Enforcing
compartmentalization might break or negatively affect tightly-
coupled apps.
To answer these questions, we perform a large-scale anal-
ysis of real-world Android apps. Speciﬁcally, we look at how
apps use native code, both statically and dynamically. We
statically analyze 1,208,476 Android apps to see if they use
native code, then we dynamically analyze the 446,562 that
were determined to use native code. Our system is able to
monitor the dynamic execution of an app, while recording
activities performed by its native code components (e.g.,
invoked system calls, interactions between native and Java
components). From this analysis, we shed light on how real-
world Android apps use native code.
In addition, our dynamic analysis system can be used
to generate a native code sandboxing policy that allows for
normal execution of the native code behaviors observed during
the dynamic analysis of a set threshold of apps, while reducing
the attack surface and thus limiting many malicious behaviors
(e.g., root exploits) of malicious apps.
The main contributions of this paper are the following:
2
• We develop a tool to monitor the execution of native
components in Android applications and we use this
tool to perform the largest (in terms of number of apps
and detail of information acquired) study of native
code usage in Android.
• We systematically analyze the collected data, provid-
ing actionable insights into how benign apps use native
code. Moreover, we release the full raw data and we
make it available to the community [1].
Our results show that completely eliminating per-
missions of native code is not ideal, as this policy
would break, as a lower bound, 3,669 of the apps in
our dataset. However, we propose that our dynamic
analysis system can be used to derive a native code
sandboxing policy that limits many malicious behav-
iors, while allowing the normal execution of the native
code behaviors observed during the dynamic analysis
of a set threshold of apps (99.77% in our experiment).
•
II. BACKGROUND
To understand the analysis that we perform on Android
applications and our proposed policy, it is necessary to review
the Android security mechanisms, how native code is used in
Android, the damage that malicious native code can cause, and
the previously proposed native code sandboxing mechanisms.
A. Android Security Mechanisms
When apps are installed on an Android phone, they are
assigned a new user (UID) and groups (GIDs) based on the
permissions requested by the app in its manifest. Every app is
executed in a separate process, which is a child of Zygote, a
process started when the system is initialized. Moreover, inter-
process communication is done using intents which all ﬂow
through an Android system-level process called Binder [11].
On Android, some operations and resources are protected
by permissions. Apps must declare the permissions needed in
the manifest, and at installation time the requested permissions
are presented to the user, who decides to continue or cancel
the installation. Permissions are enforced app-wise using Linux
access-control mechanisms and by system services that check
if the app is allowed to access certain resources or perform the
requested operation [16].
B. Native Code
Native code in Android apps is deployed in the app as ELF
ﬁles, either executable ﬁles or shared libraries. There are four
ways in which the Java code of an Android app can execute
native code: Exec methods, Load methods, Native methods,
and Native activity.
Exec methods. Executable ﬁles
called from
Java by two methods, namely Runtime.exec and
ProcessBuilder.start. Hereinafter we refer to these
methods as Exec methods.
Load methods. Native code in shared libraries can be loaded
by the framework when a NativeActivity is declared in the
manifest, along with its library name, or by the app through
the following Java methods, which are hereinafter referred to as
Load methods: System.load, System.loadLibrary,
can be
3
Runtime.load, and Runtime.loadLibrary. Native
code in shared libraries can be invoked at
loading time,
through calls to native methods and through callbacks in
native activities. When a library is loaded, its _init and
JNI_OnLoad functions are called.
Native methods. Native methods are implemented in shared
libraries and declared in Java. When the Java method is called,
the framework executes the corresponding function in the
native component. This mapping is done by the Java Native
Interface (JNI) [21]. JNI also allows native code to interact
with the Java part to perform actions such as calling Java
methods and modifying Java ﬁelds.
Native activity. Native code is invoked in native activities
using activities’ callback functions, (e.g., onCreate and
onResume), if deﬁned in a native library.
C. Malicious Native Code
Malicious apps can use native code to hide malicious
actions from static analysis of the Java portion of the app.
These actions can be calls to methods in Java libraries, such
as sending SMS messages, or complex attacks that involve
exploiting the kernel or privileged processes to compromise
the entire OS. These root exploits are possible because native
code is allowed to directly call system calls. Another possible
way that attackers can directly call system calls to execute root
exploits is by exploiting vulnerabilities in native code used by
benign apps.
As previous research has shown [35], because native code
shares the same memory address space as the Dalvik Virtual
Machine, it can completely modify the behavior of the Java
code, rendering static analysis of the Java code fundamen-
tally unsound. For instance, malicious code can use functions
exported by libDVM.so to identify where the bytecode imple-
menting a speciﬁc Java method is placed in memory. At this
point, the native code can dynamically replace the method at
run time.
D. Native Code Sandboxing Mechanisms
Several approaches have been proposed to sandbox na-
tive code execution. For instance, NativeGuard [35] and Ro-
busta [33] move the execution of native code to a separate
process. Two complementary goals are obtained: (1) the native
code cannot tamper with the execution of the Java code and (2)
different security constraints can be applied to the execution
of the native code.
Communication between the Java code and the native code
is then ensured by modifying the JNI interface to make the two
processes communicate through an OS-provided communica-
tion channel (e.g., network sockets).
While moving native code to a separate process is a natural
mechanism to achieve the aforementioned goals (because it
relies on OS-provided security mechanisms, such as process
memory separation or process permissions), other solutions
are possible. For instance,
thread-level memory protection
(as proposed in Wedge [8]). However, applying this solution
in Android would require signiﬁcant modiﬁcations to the
underlying Linux kernel.
TABLE I.
RESULTS OF THE STATIC ANALYSIS.
Apps
267,158
42,086
288,493
242,380
221,515
446,562 At least one of the above
Native method
Native activity
Exec methods
Load methods
Type
ELF ﬁle
III. ANALYSIS INFRASTRUCTURE
We designed and implemented a system that dynamically
analyzes Android applications to study how native code is
used and to automatically generate a native code sandboxing
policy. Our analysis consists of an instrumented emulator, and
it records all events and operations executed from within native
code, such as invoked syscalls and native-to-Java communica-
tion. The dynamic instrumentation is completely generic, and
it allows the usage of any manual or automatic instrumentation
tool. The version of the Android system used was 4.3.
Since our goal was to obtain a comprehensive characteri-
zation of native code usage in real world applications, we used
a corpus of 1,208,476 distinct—different package names and
APK hashes—free Android apps that we have continuously
downloaded from the Google Play store from May 2012–
August 2014. The age of the apps varies throughout the time-
frame, as we currently do not download new versions of apps.
A. Static Preﬁltering
Performing dynamic analysis of all 1,208,476 apps by
running each app would take a considerable amount of time;
therefore, by using static analysis, we ﬁltered the apps that
had some indication of using native code. The characteristics
we looked for in the apps are the following: having a native
method, having a native activity, having a call to an Exec
method, having a call to a Load method, or having an ELF
ﬁle inside the APK.
We used the Androguard tool [12] as a basis for the static
analysis. To identify native methods we searched for methods
declared in the Dalvik bytecode with the modiﬁer3 “native.”
Native activities were identiﬁed by two means: (1) looking for
a NativeActivity in the manifest and (2) looking for classes
declared in the Dalvik bytecode that extend NativeActivity.
Finally, calls to Exec and Load methods were identiﬁed by
investigating method invocations in the bytecode.
Of the 1,208,476 apps statically analyzed, 446,562 apps
(37.0%) used at least one of the previously mentioned ways
of executing native code. Table I presents the number of apps
that use each of these characteristics.
B. Dynamic Analysis System
Now that we have identiﬁed which Android apps use native
code, we now want to understand how apps use native code.
types of
During the dynamic analysis we monitor several
3Modiﬁer here is an attribute of a method, similar to public. An