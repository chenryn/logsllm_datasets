0%
L
5120
Geth
8192
Parity
2048
Nethermind
4096
Besu
Aleth
2048
mempool tests: The measurement is set up with 1) a measure-
ment node M running the test and 2) a target node T running
the Ethereum client to be measured. For each test, node T ’s initial
state of mempool contains l future transactions and L − l pending
transactions.
We design the first set of tests to trigger transaction replacement
and measure R. Specifically, tx1 has an identical sender and nonce
with an existing transaction tx2 in mempool. In each unit test, Node
M sends tx1 of a certain Gas price to node T , and observes if node T
replaces tx2 by tx1. We run a series of unit tests with varying tx1’s
Gas prices, in order to observe the minimal Gas price that triggers
the replacement, from which we calculate and report R.
We design the second set of tests to trigger transaction eviction
and measure U and P. Specifically, the mempool contains L−l future
transactions and l pending transactions, among which there are u
transactions sent from the same account with future transaction
tx1. As before, in each unit test, node M sends to node T tx1 at a
Gas price higher than any transactions in node T ’s mempool. We
run a series of unit tests with varying l and u. We observe the
maximal value of u that triggers a successful eviction by tx1 and
report such value by U . We observe the minimal value of l that
triggers a successful eviction by tx1 and report such value by P.
Test results on Ethereum clients: We conduct the tests on two
local nodes: We first set up a local measurement node M running
tests on an instrumented Geth client and a local target node T .
The statically instrumented Geth client allows node M to bypass
local checks and to propagate future transactions to node T . We
307
run the two sets of tests against target node T running five dif-
ferent Ethereum clients: Geth (Go), OpenEthereum/Parity (Rust),
Nethermind (.net), Besu (Java) and Aleth (C++). Here, we discard
the Python client (i.e., Trinity) as the incomplete implementation.
The distribution of mainnet nodes running the five Ethereum clients
is presented in the second column of Table 3, where Geth (83%) and
Parity (15%) are the dominant clients on the mainnet.
The measurement results are reported in Table 3. The mempool
model and measurement results will guide the design of TopoShot’s
method and the configuration of the measurement on different
Ethereum clients. Noteworthy here is that Aleth’s and Nethermind’s
R values are both zero (0%), which renders our TopoShot unable to
work (as will be seen, it requires a non-zero R to enforce the isola-
tion property). Thus, TopoShot currently does not work with Aleth
and Nethermind clients. On the other hand, we deem a zero-value
R is a flawed setting that can be exploited to construct low-cost
denial of service or flooding. For instance, an attacker can send
multiple replacing transactions at almost the same Gas price, con-
suming network resources by propagating multiple transactions yet
without paying additional Ether. We sent bug reports to Ethereum
Foundation’s bug bounty program [5], and further updates, if any,
will be documented on a private link [2].
5.2 Measurement Primitive
We consider the basic system model consisting of a measurement
node M, target node A, target node B and the rest of Ethereum
network denoted by node(s) C. The measurement primitive’s goal
is to detect one link, that is, whether Node A and B are actively
connected in the Ethereum network. Note that this model assumes
a strongly connected Ethereum network without network partition.
Mechanism: We denote our measurement primitive by
measureOneLink(A, B, X, Y , Z, R, U), which
parameter-
ized by target nodes A and B, target nodes’ mempool behavior R/U
(recall Table 2) and X/Y/Z that will be described below. As depicted
in Figure 2a, the measurement primitive works in four steps:
are
2 Node M sends
1 Node M sends a pending transaction txC with Gas price Y
Gwei3 to A, and waits for X seconds (e.g., X = 10 in our study
as will be described) for txC to be propagated to other nodes
including node B. Setting Y at a low Gas price is intended to
slow down or even prevent the inclusion of txC in the next
block (recall Ethereum nodes decide which transactions to
be included in the next block based on Gas/Gas price).
to Node B Z future transactions
{txO1, txO2, ...txOZ } at Gas price (1 + R) · Y Gwei.
These future transactions are uniformly sent from Z
U
accounts (i.e., there are U future transactions sent from
each account). Immediately after that, Node M sends a
transaction txB at Gas price (1 − 0.5R) · Y Gwei to Node B.
Transaction txB has the same nonce with txC.
to Node A Z future transactions
{txO1, txO2, ...txOZ } which are at Gas price (1 + R)· Y Gwei
accounts. Immediately after that, Node M
and sent from Z
U
sends a transaction txA at Gas price (1 + 0.5R) · Y Gwei to
Node A. Transaction txA has the same nonce with txC.
3 Node M sends
3One Gwei equals 10−9 Ether.
TopoShot: Uncovering Ethereum’s Network Topology Leveraging Replacement Transactions
IMC ’21, November 2–4, 2021, Virtual Event, USA
(a) Workflow: Shaded are transactions in the nodes’ mempool. Step 2 would
evict txC and add txB on node B’s mempool, and Step 3 evicts txC and adds
txA on node A’s mempool.
(b) Snapshot right before Step 4
Figure 2: TopoShot’s measurement primitive: Running measureOneLink with Y = 0.1 Gwei, Z = 5120, R = 10%, U = 1
The purpose of the future transactions is to fill up the
mempool on Nodes A (and B), to evict txC there, and to make
room for txA (txB) of the same nonce to txC.
4 Node M checks if it receives txA from Node B. If so, it draws
the conclusion that Node A is a neighbor of Node B, as will
be analyzed in § 5.2.1.
During 2 , when Node B receives Z future transactions txO s,
its mempool becomes full. Based on the eviction policy in Table 3,
adding a new transaction to a full mempool triggers evicting the
transaction with the lowest Gas price. Assuming Gas price Y Gwei
is low enough (we will describe how to set Y next), transaction
txC at Y Gwei will be evicted on Node B. Then, without txC, trans-
action txB is stored in Node B’s mempool. In other words, Step 2
replaces txC with txB on Node B. Note that in the process, future
transactions {txO} are not propagated, thus C still stores txC.
Note that after the arrival of {txO} but before txB, there are
chances that certain Nodes C can propagate txC back to Node B,
which, if occurs, would invalidate the efforts of {txO} and leave
txB unable to replace (the re-propagated) txC on B. In TopoShot,
the actual chance of this event is very low and the reason is two-
fold: 1) 2 waits long enough (10 seconds) after 1 to start and 2)
txB is propagated immediately after {txO}. In addition, in our local
validation experiment (in § 6.1), we don’t observe the occurrence
of the event.
By a similar analysis, Step 3 can replace txC with txA on Node
A.
Now, we have established that after Steps 1 , 2 and 3 , Node A
stores txA, Node B stores txB and Nodes C store txC. The snapshot
of our measurement system at this timing is illustrated in Figure 2b.
We consider two cases: Case 1) A and B are directly connected.
In this case, A will propagate txA to B, which will replace txB
because of txA’s R (e.g., 10% for Geth) higher Gas price than txB.
In this case, A will also propagate txA to C, which however will not
replace txC as txA’s Gas price is lower than R (e.g., 10%) of txC’s
price. The property that txA is stored only on Node A and cannot
be propagated through Nodes C is called isolation. That is, txA is
isolated on Node A. Thus, after a sufficient delay for propagation
from A to B, M can receive txA from Node B.
Case 2) A and B are not connected. In this case, A propagates txA
only to Node C. As analyzed, txA cannot replace txC on Node C
because of insufficient Gas price. Also, Node C’s txC cannot replace
txB on Node B. Thus, txB stays on Node B, and M does not receive
txA from Node B.
To ensure correctness, TopoShot requires that the mempool on
the two measured nodes, namely nodes A and B, are full. This
condition holds quite commonly in Ethereum mainnet, as observed
Configuration of R/U : Parameters of the measureOneLink prim-
itive are configured as follows: On a target Ethereum client, pa-
rameters R/U will be set at the client’s value as in Table 3. Here,
note that Nethermind and Aleth are not measure-able by TopoShot
due to their zero-value R which is also flawed as explained before.
Besu has an infinite large value of U , and Geth has a fairly large
U . In these two cases, only one account is used to send the future
transactions {txO}. Geth/Parity have non-zero P, which are fairly
small compared with their mempool capability L. The working of
measureOneLink requires the following condition: The number of
pending transactions in the measured mempool should remain larger
than P in the entire process of measurement. We verify that this
condition holds on the mainnet for all Ethereum clients’ P and L.
Configuration of X: Parameter X, which is the time period that
Step 1 waits, is set to be large enough so that transaction txC
is propagated to all nodes in the network. In order to obtain a
proper value of X in an Ethereum network, we conduct a test by
running several local nodes (e.g., 11 nodes in our study) and joining
them to the Ethereum network. Among the 11 nodes, there are no
direct connections. During the test, we send a transaction through
one node, wait for X ′ seconds and observe the presence of the
transaction on the other 10 nodes. We conduct a series of such tests
with varying X ′es to obtain such a X ′ = X that with 99.9% chances,
the transaction is present on the 10 nodes after X seconds.
The four steps occur in order. That is, Step 1 occurs X seconds
before Step 2 , which finishes before Step 3 starts, which is before
Step 4 . Timing and ordering are essential to the success of our
measurement method, as is analyzed below.
5.2.1 Correctness Analysis. We analyze the correctness of the mea-
surement primitive (measureOneLink):
10 seconds after Step 1 , Transaction txC is propagated to the
entire Ethereum network and it is stored in all nodes’ mempools
including Nodes A and B.
308
ABtxA (0.105 Gwei)txC (0.1 Gwei)txB(0.095 Gwei) CMIsolation of txA & txBIMC ’21, November 2–4, 2021, Virtual Event, USA
Kai Li et al., Kai Li, Yuzhe Tang, Jiaqi Chen, Yibo Wang, and Xianghong Liu
in our measurement study (99% of the time during our mainnet
measurement, the measurement node’s mempool is full).
Configuration of Y/Z: Pending transactions like txC should stay
in the mempool of Nodes C, in such a way that they are not included
in the next block or be evicted. To do so, the Gas price of txC
should be low enough so that it will not be included in the next
block, and at the same time, be high enough to avoid eviction
by incoming transactions. To estimate a proper Gas price in the
presence of current transactions, we rank all pending transactions
in the mempool of Node M by their Gas prices, and use the median
Gas price for txC. In actual measurement studies, the value of Y
varies from testnets and at different times. We apply the estimation
method before every measurement study and obtain Y dynamically.
5.2.2 Cost Analysis. The cost of running measureOneLink comes
from the pending transactions sent (i.e., either txA or txC), assum-
ing their inclusion in the blockchain. In practice, whether these two
transactions are included is not deterministic and depends on the
state of the miners’ mempool. Also, note that the future transactions
txO sent during the measurement are guaranteed not to be included
in the testnets and mainnet, thus incurring no costs.
Improving Result Recall. Based on the above analysis, the
5.2.3
TopoShot guarantees that any tested connection is a true positive
(i.e., no false positives) but may miss the detection of a connection
(i.e., false negative may exist). In other words, the 100% result pre-
cision is guaranteed by the protocol but not for the recall. Note
that 100% precision/recall means no false positive/no true negative
in the measurement result. In the following, we present several
heuristics to improve the result recalls in practice.
A passive method to improve the result recall is to repeat the
measurements multiple times and use the union of the results. This
passive method has limited applicability if the false negative is
caused by the non-default setting on the remote Geth node being
measured. In the following, we propose a proactive method to
improve the recall.
Handling node-specific configurations by pre-processing:
In Ethereum networks, client configurations (e.g., on mempool) are
specific to nodes. This is evident in our field experience where the
mempool capacities (i.e., L) differ across nodes. Using the same value
of L when measuring different nodes can lead to incorrect results.
To solve the problem, we add a pre-processing phase: Before the
measurement, we can launch a speculative B′ node locally and use
it to connect all other nodes in the network. For each other node,
say A′, we then run TopoShot between A′ and B′. Because the local
node B′ is under our control and its actual neighbors can be known
(by sending peer_list RPC queries), we compare the measurement
result with the ground truth. If there is a false negative, it implies the
remote node A′ has some non-default setting on its node (e.g., use a
mempool larger than the default Z). We then increase the mempool
size in additional pre-processing measurements to discover a proper
setting of the mempool. The result of the pre-processing can help
guide the actual measurement to use a “right” parameter on the
connections involving node A′.
309
5.3 Parallel Measurement Framework
We previously described the primitive of measuring one connection
between a source and a sink node. To measure a network, a native
schedule is to serially run the pair-wise primitive over all possible
pairs, which however incurs a long measurement time in the case of
large networks and is not a scalable method. For time efficiency, we
propose a parallel schedule that decomposes the set of all possible
pairwise connections into subsets and measures all connections
within each subset in parallel. In the following, we first describe
the parallel measurement primitive (§ 5.3.1) and then the schedule
that measures the entire network in parallel by repeatedly using
the primitives (§ 5.3.2).
5.3.1 Parallel Measurement Primitive. We consider a pair of nodes
whose connectivity is measured consist of a source node and a sink
node. For instance, in Figure 2b, node A is a source node and node
B is a sink node. In a parallel measurement, we consider measuring
the connectivity between not one pair of source and sink nodes,
but multiple such pairs. Specifically, suppose there are p “source”
nodes A1, A2, ...Ak , ...Ap and q “sink” nodes B1, B2, ..., Bl , ..., Bq;
note k (l) is the index of a source (sink) node. In this bipartite graph,
there are a total of p · q possible edges from a source to a sink.
The objective here is to measure r specified edges out of the p · q
ones. We denote by sink(k, j) a sink node which is the j-th neighbor
of a source node Ak. Then, the edge between Ak and sink(k, j) is
“indexed” by (k, j). Initially, assume there are sufficient funds set up
in r Externally Owned Accounts (or EOAs).
p1 Node M sends a total of r transactions {txC(k ,l)} and prop-
agates them to the Ethereum network. Any two different
transactions are sent from different EOAs.
p2 To each Node Ak, Node M 1) first sends Z (e.g., 5120 for
Geth) future transactions txF ’s followed immediately by 2)
sending {..., txC(k−1,qk−1), txC(k +1,1), ...}. 3) It then sends
{txA(k ,1), ...txA(k ,qk)}. Here, txA(k ,i) spends the same ac-
count with txC(k ,i) and its Gas is priced at 1.05Y Gwei. After
p2 , txC(k ,i) on Node Ai is replaced by txA(k ,i), while other
txC’s stay.
It is noteworthy that after p2 , Node M checks whether
txA(k ,·) are actually stored on Node Ak. It proceeds only
if the checked condition holds. Node M carries out the check
by observing if txC(k ,·) is propagated from Node Ak before
waiting for a timeout.
p3 Node M sends to each Node Bl Z future transactions txF ’s
followed immediately by r transactions where the i-th trans-
action is a txB transaction (whose Gas is 95% of that of a txC
transaction) if the i-th edge’s sink is Node Bl , and otherwise,
is a txc.
p4 For edge connecting Ak and Bl , Node M checks if txA(k ,j)
(note that sink(k, j) = l) is present on Node Bl . If so, Ak and
Bl are neighbors.
Note that Ethereum clients, including both Geth and Parity, limit
the number of future transactions in their mempool. In our parallel
measurements, we ensure the group size is much smaller than the
limit of future transactions, which further ensures the measurement
correctness, since all measurement transactions will be admitted
and stored on the participant nodes.
TopoShot: Uncovering Ethereum’s Network Topology Leveraging Replacement Transactions
IMC ’21, November 2–4, 2021, Virtual Event, USA
(a) Network snapshot before Step p4
(b) Parallel-measurement schedule with an
example network of 8 nodes
Figure 3: TopoShot’s parallel measurement protocol; in Figure 3b, the four colors represent four measurePar iterations where
a rectangle with rounded angles is the selected nodes A’s in the measurement and the arcs are the collection of edges being
measured. For instance, the blue iteration is measurePar({n1, n2, n3}, {n4, n5, n6, n7, n8}, {}).
Example: We use an example to illustrate the parallel mea-
surement protocol. Among two sources A1, A2 and two sinks
B1, B2, assume it measures the connections on three edges, that is,
⟨A1, B1⟩, ⟨A2, B1⟩, ⟨A2, B2⟩. Figure 3a depicts the snapshot of exer-
cising our parallel measure method right after p3 .
Ensuring isolation: As in the case of measurement primitive,