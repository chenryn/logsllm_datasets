data terms. An o-set id has a base type τ . O-set names and
o-sets formed using an o-set id have the same base type as
the o-set id. The value of an o-set is a set of values in τ .
An o-set-deﬁnition credential
is similar
The head takes
to a role-
the
form
deﬁnition credential.
A.o(h1, . . . , hn),
in which o(h1, . . . , hn) is an o-set
name of base type τ . The body can be a value of base
type τ , another o-set B.o1(s1, . . . , sm) of base type τ ,
a linked o-set A.r1(t1, . . . , t‘).o1(s1, . . . , sm),
in which
r1(t1, . . . , t‘) is a role name and o1(s1, . . . , sm) is an o-set
name of base type τ , or an intersection of k o-sets of the
base type τ .
A credential in RT2 is either a role-deﬁnition creden-
tial or an o-set-deﬁnition credential. Credentials in RT2 are
more general that those in RT1 in the following two aspects.
• A variable of type τ can be constrained by dynamic
value sets of base type τ , i.e., roles or o-sets.
• The safety requirement on variables is relaxed. A vari-
able is safe if a) it appears in a role name or an o-set
name that appears in the body of the credential; or, b)
it is constrained by an o-set or a role; or c) it appears
in a role or o-set that constrains a variable. As will be
seen in section 4.1, this relaxed requirement sufﬁces to
guarantee tractability.
RT2’s extensions enable the following examples, which are
not expressible in RT1.
9
Example 5 Alpha allows members of a project team to
read documents of this project:
Alpha.fileAc(read,?F:Alpha.documents(?proj))
←−Alpha.team(?proj)
The variable ?proj is safe because it appears in the body,
and the variable ?F is safe because it is constrained by an
o-set.
Given “Alpha.documents(proj1) ←− fileA” and
“Alpha.team(proj1) ←− Bob”, one can conclude that
“Alpha.fileAc(read, fileA) ←− Bob”.
Example 6 Alpha allows the manager of the owner of a ﬁle
to access that ﬁle:
Alpha.read(?F)←−
Alpha.manager(?E:Alpha.owner(?F))
The variable ?E is safe because it appears in the body, and
the variable ?F is safe because it appears in a role that con-
strains the variable ?E.
and
“Alpha.manager(userB) ←− userC”, one can conclude
that “Alpha.read(file1) ←− userC”.
“Alpha.owner(file1) ←− userB”
Given
4.1 Translation to logic rules
An o-set-deﬁnition credential is translated into a logic
rule in exactly the same way as a role-deﬁnition credential.
We only need to extend the predicate isMember to take o-
sets and values of other types as arguments. For each con-
straint in which a variable ?x is constrained by A.O, add
isMember(?x, A.O) to the body of the rule.
Proposition 2 RT2 has the same computational complexity
as RT1. Given a set C of RT2 credentials, computing the
implications of C can be done in time O(M N v+2).
Proof. Because each constraint using a role or an o-set is
translated into a relational atom in the body, the relaxed
variable safety requirement sufﬁces to guarantee that each
variable in a rule appears in a relational atom in the body.
For any variable constrained by a role or an o-set, only
the (at most N0) same-type constants appearing on the right-
hand-side of some type-1 credentials need to be used to in-
stantiate the variable. The rest follows from the proof of
Proposition 1.
Note that an RT2 rule can contain more variables than an
RT1 rule due to the use of o-sets and roles as constraints.
5 RT T :
Supporting Threshold
and
Separation-of-Duty Policies
One can express simple threshold structures by using in-
tersections. For example, the policy that A says that an en-
tity has the attribute R if two out of B1, B2, B3 say so can
10
be represented by three credentials A.R←− B1.R ∩ B2.R,
A.R←− B2.R ∩ B3.R, and A.R←− B3.R ∩ B1.R. How-
ever, using intersections alone cannot express the policy that
A says that an entity has attribute R if two different enti-
ties having attribute R1 says so. Another potentially im-
portant policy allows something to happen if one entity of
role A.R1 and a different entity of role A.R2 both request
it. This is a common separation-of-duty policy; it cannot be
expressed by the threshold structures in Delegation Logic or
other previous trust-management systems.
To express policies like these, we introduce RT T . In-
stead of introducing an operator just for thresholds, we
introduce two more basic and more expressive operators.
These can be used to implement threshold, separation of
duty, and other policies.
More speciﬁcally, RT T adds the notion of manifold
roles, which generalizes the notion of roles. In contrast, we
call the roles in RTi single-element roles. A manifold role
has a value that is a set of what we call entity collections. An
entity collection is either an entity, which can be viewed as
a singleton set, or a set of two or more entities. This allows
us to view a single-element role as a special-case manifold
role whose value is a set of singletons. In the rest of this pa-
per, we extend the notion of roles to include both manifold
roles and single-element roles, and we continue to use R to
denote role name of this generalized notion of roles. RT T
introduces two new types of credentials:
• Type-5: A.R←− B1.R1 (cid:12) ··· (cid:12) Bk.Rk
In which R and the Ri’s are (single-element or
manifold) role names. This credential means:
members(A.R) ⊇ members(B1.R1 (cid:12) ··· (cid:12) Bk.Rk) =
{s1 ∪ ··· ∪ sk | si ∈ members(Bi.Ri) for 1 ≤ i ≤ k}.
Here, when si is an individual entity, say, D, it is
implicitly converted to the singleton {D}.
• Type-6: A.R←− B1.R1 ⊗ ··· ⊗ Bk.Rk
This credential means:
members(A.R) ⊇ members(B1.R1 ⊗ ··· ⊗ Bk.Rk) =
{s1 ∪ ··· ∪ sk | (si ∈ members(Bi.Ri) & si ∩ sj =
∅) for 1 ≤ i 6= j ≤ k}
Example 7 A says that an entity has attribute R if one
member of A.R1 and two different members of A.R2
all say so. This can be represented using the following
credentials:
A.R3←− A.R2 ⊗ A.R2, A.R4←− A.R1 (cid:12) A.R3,
A.R←− A.R4.R.
Suppose that in addition one has the following credentials:
A.R1←− B, A.R1←− E,
A.R2←− B, A.R2←− C, A.R2←− D.
Then one can conclude the following:
members(A.R1) ⊇ {B, E}
members(A.R2) ⊇ {B, C, D}
members(A.R3) ⊇ {{B, C},{B, D},{C, D}},
members(A.R4) ⊇ {{B, C},{B, D},{B, C, D},
{B, C, E},{B, D, E},{C, D, E}}.
Now suppose one further has the following credentials:
B.R←− B, B.R←− C,
C.R←− C, C.R←− D, C.R←− E,
D.R←− D, D.R←− E,
E.R←− E.
Then one can conclude that members(A.R) ⊇ {C, E},
but one cannot conclude members(A.R) ⊇ {B}
or
members(A.R) ⊇ {D}.
As noted in section 2.6, the ⊗ operator can be used to
enforce separation of duty (SoD) without requiring mutual
exclusion of roles. See section 6.2 for additional examples
of SoD.
In RT T , type 1 through 4 credentials are also generalized
in that a manifold role name can appear where a role name
is allowed, except when as a constraint to a variable.
Each role identiﬁer has a size. The size of a manifold
role id should be speciﬁed when the role id is declared in
an ADSD. A single-element role id always has size one. A
role name r(t1, . . . , th) has the same size as r, and we have
size(A.R) = size(R). This size of a role limits the max-
imum size of each of its member entity set. For example,
if size(A.R) = 2, then members(A.R) can never contain
{B1, B2, B3}.
For an RT T role-deﬁnition credential to be well-formed,
it has to satisfy the additional requirement that the size of its
head is always greater than or equal to the size of its body.
And the size of its body is deﬁned as follows:
size(D) = 1
size(A.R1.R2) = size(R2)
size(B1.R1 ∩ ··· ∩ Bk.Rk) = maxi=1..k size(Ri)
i=1..k size(Ri)
i=1..k size(Ri)
size(B1.R1 (cid:12) ··· (cid:12) Bk.Rk) =P
size(B1.R1 ⊗ ··· ⊗ Bk.Rk) =P
5.1 Translation into logic rules
We extend the predicate isMember in the output lan-
guage to allow the ﬁrst argument to be an entity collec-
tion, and to allow the second argument to be a manifold
role as well as a single-element role. Let t be the maxi-
mum size of all manifold roles in the system, we also intro-
duce 2(t − 1) new predicates set k and niset k for k = 2..t.
Each set k takes k + 1 entity collections as arguments, and
set k(s, s1, . . . , sk) is true if and only if s = s1 ∪ ··· ∪
sk; where when si is an entity, it is treated as a single-
element set. Each niset k is similar to set k, except that
niset k(s, s1, . . . , sk) is true if and only if s = s1 ∪ ··· ∪ sk
and for any 1 ≤ i 6= j ≤ k, si ∩ sj = ∅.
11
The translation for type 1, 2, and 4 credentials is the same
as that in section 3.3. The other three types are translated as
follows:
• From A.R←− A.R1.R2,
when size(R1) = 1, to
isMember(?z, A.R)←−
isMember(?x, A.R1),
isMember(?z, ?x.R2).
when size(R1) = k > 1, to
isMember(?z, A.R)←−
isMember(?x, A.R1),
isMember(?z, ?x1.R2),
··· ,
isMember(?z, ?xk.R2),
set k(?x, ?x1, . . . , ?xk).
• From A.R←− B1.R1 (cid:12) ··· (cid:12) Bk.Rk to
isMember(?z, A.R)←−
isMember(?z1, B1.R1),
··· ,
isMember(?zk, Bk.Rk),
set k(?z, ?z1, . . . , ?zk).
• From A.R←− B1.R1 ⊗ ··· ⊗ Bk.Rk to
isMember(?z, A.R)←−
isMember(?z1, B1.R1),
··· ,
isMember(?zk, Bk.Rk),
niset k(?z, ?z1, . . . , ?zk).
It is easy to see that this translation is an extension to
that in section 3.3. When a credential contains no manifold
roles, the resulting rule is the same.
Proposition 3 Given a set C of RT T credentials, let t be the
maximal size of all roles in C. Computing the implications
of C can be done in time O(M N v+2t).
rules
have
The
atoms
resulting
Proof.
like
set k(z, z1, . . . , zk) in the body;
these atoms are eval-
uated and removed during the grounding process, similar
to arithmetic atoms generated from constraints. Consider
a rule translated from a type-5 credential cred, the trans-
lation introduces new variables ?z, ?z1, . . . , ?zk. When
the values of variables ?z1, . . . , ?zk are ﬁxed, the value
of ?z is uniquely determined by set k(?z, ?z1, . . . , ?zk).
there are O(N s) entity collections
Given N entities,
of size ≤ s. And so for each i = 1..k,
there are
O(N size(Ri)) ways to instantiate ?zi. Therefore, there are
O(N size(R1)+···+size(Rk)) = O(N size(R)) = O(N t) ways
to instantiate ?z1, . . . , ?zk. The variables coming from
cred (there are at most v of them) can be instantiated in
O(N v) ways. So all together, the rule can be instantiated
in O(N v+t) ways. Similar arguments apply to type-6
credentials.
Consider a rule translated from a type-3 credential, the
translation introduces variables ?z, ?x, ?x1, . . . , ?xk. For
each of ?x1, . . . , ?xk, only the O(N) entities that are is-
suers of credentials in C need to be considered. And
when ?x1, . . . , ?xk are ﬁxed, ?x is uniquely determined by
set k(?x, ?x1, . . . , ?xk). Since k = size(R1) ≤ t, there are
O(N t) ways to instantiate ?x, ?x1, . . . , ?xk. And there are
O(N size(R2)) = O(N t) ways to instantiate z. So all to-
gether, a type-3 credential can be instantiated in O(N v+2t)
ways.
It is not hard to see that a type-1 credential can be instan-
tiated in O(N v) ways; a type-2 or type-4 credential can be
instantiated in O(N v+t) ways; and so the complexity result
follows.
6 RT D: Supporting Delegation of Role Acti-
vations
As discussed in section 2.7, RT D has the notion of del-
egation of role activations, which can be used to express
user-to-session and process-to-process delegation of capac-
ity. For example, that an entity D activates the role A.R
to use in a session B0 can be represented by a delegation
−−−−−−→ B0”. We call “D as A.R” a role
credential, “D D as A.R
activation. B0 can further delegate this role activation to B1
−−−−−−→ B1”. An entity
by issuing the credential, “B0
can issue multiple delegation credentials to another entity.
Also, several role activations can be delegated in one dele-
gation credential. This is viewed as a shorthand for multiple
delegation credentials.
D as A.R
A delegation credential can also contains a keyword
all−−→ B1” means that B0 is del-
“all”. For example, “B0
−−−−−→
D as all
egating all role activations it has to B1; and “B0
B1” means that B0 is delegating to B1 those of B0’s role
activations in which D is activating the roles.
A request
For example,
in RT D is represented by a delegation
that delegates from the requester to the re-
credential
quest.
that B1 requests to read fileA
in the capacity of “D as A.R” can be represented by: