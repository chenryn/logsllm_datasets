in particular the ability of servers to support a large number of operations and clients per second.
In OKMS, client time is approximately 0.4 msec for a wrap and 0.2 msec for an unwrap. For
the UOKMS system, performance is even better: a client can sustain over 41000/6000/14000 for
wrap/unwrap/update operations per second respectively, with a single-thread and single CPU core,
and server operations are only needed for unwrapping. We also demonstrate good throughput and
latency results from a prototype implementation of the (U)OKMS Server deployed to an Amazon
EC2 instance. We ﬁnd this implementation capable of answering over 30,000 requests per second
in both single-server and multi-server deployments. Finally, we discuss implementation experience
managing KmS keys in Hardware Security Modules (HSM).
4
1.1 Comparison to previous work
We are the ﬁrst to present a comprehensive updatable solution to the central problem of key
management in cloud-based (and other) storage systems that exploits the power of oblivious com-
putation, and the ﬁrst to develop a security model for such setting. Our motivation and modeling
bear similarities with recent models of Updatable Encryption (UE) [9, 10, 20, 37, 35], but also
has some signiﬁcant diﬀerences. Most prominent is the use of obliviousness as a way to address
potential vulnerabilities arising from a remote key management system, as opposed to one that is
collocated with the client as was asssumed in all the above works on updatable encryption. Other
novel features of our solution include unconditional hiding of data encryption keys and object iden-
tiﬁers from KmS, and building a distributed UOKMS service via a threshold implementation. Our
updatability solution is ciphertext-independent (namely, the update token is of size independent
from the number of ciphertexts and size of data to be updated) as in several prior UE schemes
[9, 20, 37, 35]. Among those, our scheme is the most eﬃcient, requiring a single short update value
∆ from the KmS server and a single exponentiation per object for the update operation, compared
e.g. to two exponentiations per ciphertext block in the schemes of [37, 35]. Our UOKMS scheme can
be extended to provide ciphertext indistinguishability and unlinkability similarly to e.g. [37, 35],
but it would inherit the ineﬃciency of such solution making it impractical in any large-scale data
storage deployment.3 Finally, our model and solution are the ﬁrst to support public key encryp-
tion, including CCA-like security in the setting of oblivious encryption. We elaborate further on
the relation to prior updatable encryption work in Section 3.2.
Updatable encryption is closely related to proxy re-encryption (PRE), in particular, the Diﬃe-
Hellman techniques at the center of our implementation directly relate to the PRE scheme of Blaze
et al. [7]. Recently, [18, 17] treat forward secrecy and post-corruption security in the context of PRE
for which they deﬁne evolutionary keys as in our context. However, the requirements of PRE, par-
ticularly as set forth in [17], are more stringent than needed in our case. These include generating
update values using the delegatee’s public key rather than on input its secret key, achieving unidirec-
tionality, supporting general DAG delegation graphs, ensuring ciphertext indistinguishability, and
more. As a result, they require more involved and less eﬃcient techniques; in particular, [18] builds
on pairing-based constructions and HIBE [14, 8] while [17] uses lattice-based fully-homomorphic
techniques from [11, 47]. On the other hand, in spite of their stronger properties, none of these
schemes support oblivious computation.
Our use of OPRF function can be seen as an “OPRF-as-a-service” application, a term coined
in [19]. We borrow the notion of updatable oblivious PRF from that work, but their application
was targeted to password veriﬁcation protocols, while ours is a general encrypted storage system.
(Moreover, the protocol of [19] is signiﬁcantly less eﬃcent as it uses groups with bilinear maps
to obtain the stronger notion of updatable “partially oblivious” PRF, which we do not require.)
OPRF’s are also used in “password-protected secret sharing” [28] which can implement distributed
password-secured storage but without the ability to update the master encryption key. Moreover,
both of these solutions are specialized for password-authenticated clients while UOKMS accommo-
dates any client-to-KMS or client-to-StS authentication mechanisms.
Comparison to U-PHE. The goals of UOKMS bear some similarity to Updatable Password-Hardened
Encryption (U-PHE) of [36]. In the U-PHE setting a server S stores encrypted data on behalf of its
clients. The encryption and decryption of data require S to hold the client’s password and involve an
interaction of S with an additional server R, called the rate limiter. In particular, an attacker who
learns S’s state (but not the stored client password), cannot decrypt client’s data without guessing
3 Several prior works, e.g. [37, 35], consider ciphertext unlinkability (over update periods) as a major design goal,
but achieve it at the cost of requiring O(n) exponentiations to update a ciphertext of length n. We believe that in
most practical settings, linkability would still be possible via metadata, object identiﬁers, etc., hence not worth the
high computational cost it entails.
5
Functions: OPRF F and symmetric authenticated encryption scheme Enc.
OPRF Keys: KmS stores a client-speciﬁc OPRF key kc for each client.
Encryption of object Obj by client C: C runs OPRF protocol with KmS where C inputs
object identiﬁer ObjId and KmS inputs key kc. C sets dek = Fkc(ObjId) and stores the pair
(ObjId, Encdek(Obj)) at storage server StS.
Decryption of encrypted object ObjId by client C: As in the encryption case, C interacts
with KmS to compute dek = Fkc (ObjId) and decrypts Obj using dek.
Veriﬁcation of correct computation of dek: Use a veriﬁable OPRF [28].
Figure 2: Oblivious KMS (OKMS)
the client’s password and interacting with the rate limiter R. The solution oﬀers veriﬁability and
updatability similarly to our case, and in terms of our UOKMS model one can think of S as the
storage server StS and R as the key management server KmS. However, in contrast to UOKMS,
in U-PHE the server S learns both the client’s decrypted message and the client’s password (in
particular, one relies on TLS for transmitting the password), while in UOKMS only the client en-
crypts and decrypts data and neither server learns it. Moreover, the U-PHE decryption protocol
is not oblivious, i.e. server R, i.e., KmS, can identify the decrypted ciphertext. Also, as in the case
of [19, 28] above, PHE is specialized to the password authentication case, while UOKMS is inde-
pendent of the means of authentication used by clients, allowing any form of client authentication
credentials. Additionally, the U-PHE scheme of [36] is less eﬃcient than our UOKMS, speciﬁcally
their encryption is interactive while ours is not, their decryption and update are both roughly twice
more expensive than ours, and a threshold implementation of the rate-limiter server of [36] would
be signiﬁcantly more expensive than our threshold KmS.
2 Updatable Oblivious KMS
We present our main scheme, UOKMS (for Updatable Oblivious KMS), that builds on the general
approach to Oblivious KMS described in the introduction and recalled next.
2.1 Oblivious Key Management System
Figure 2 speciﬁes the Oblivious KMS (OKMS) protocol that serves as a basis for our Updatable
scheme in the next section. OKMS is described and motivated in the Introduction as a much more
secure alternative to the wrapping-based approach (Fig. 1) in wide use today in storage systems,
particularly in large cloud deployments. When implemented with the DH-based OPRF scheme
dh-op from Fig. 3, one obtains an OKMS that is highly eﬃcient (see Sec. 6) and accommodates
extensions to veriﬁability and distributed implementation (Sec. 5). The security of the OKMS
scheme and its implementation using dh-op follows from the OPRF properties (in particular as
studied in [28, 29]). We do not formally analyze the OKMS scheme but rather do so in Sections 3
and 4 for its extension to the Updatable OKMS setting presented next. (A model and analysis of
OKMS can be obtained by specializing the UOKMS model to a single update period.)
6
Components: G: group of prime order q; H, H(cid:48): hash functions with ranges {0, 1}(cid:96) and G,
respectively, where (cid:96) is a security parameter.
PRF Fk Deﬁnition: For key k ←R Zq and x ∈ {0, 1}∗, deﬁne
Oblivious Fk Evaluation between client C and server S
Fk(x) = H(x, (H(cid:48)(x))k)
1. On input x, C picks r←RZq; sends a = (H(cid:48)(x))r to S.
2. S checks that the received a is in group G and if so it responds with b = ak.
3. C outputs Fk(x) = H(x, b1/r).
Figure 3: DH-based OPRF function dh-op [29]
r), and output ciphertext triple c = (ObjId, w, Encdek(Obj)).
Setting: Generator g of group G of prime order q; symmetric authenticated encryption scheme
Enc, Dec with keys of length security parameter (cid:96); hash function H : G → {0, 1}(cid:96).
Client keys: KMS server KmS stores a client-speciﬁc random key kc ∈ Zq for each client;
storage server StS stores certiﬁed public value yc = gkc for client C.
Encryption of object Obj: To encrypt Obj under key yc, pick r ←R Zq \{0}, set w = gr and
dek = H(yc
Decryption of ciphertext c = (ObjId, w, e): (1) C checks that w is valid, i.e., w ∈ G \ {1},
and aborts if not; (2) C sends u = wr(cid:48)
for r(cid:48) ←R Zq to KmS; (3) KmS checks if u ∈ G and if so
returns v = ukc to C;
(4) C outputs Obj = Decdek(e).
and
Key rotation and update: To change client’s key from kc to kc
y(cid:48)
c = gkc
c and replaces each ciphertext c = (ObjId, w, e) with
c(cid:48) = (ObjId, w(cid:48) = w∆, e), provided that w ∈ G. (Element w /∈ G indicates an invalid ciphertext
which can be removed.)
to StS. StS replaces yc with y(cid:48)
, KmS sends ∆ = kc/kc
(cid:48)
(cid:48)
(cid:48)
Figure 4: Updatable Oblivious KMS Scheme
2.2 Updatable OKMS
Key management systems are required, by regulations and best practices, to periodically update
client keys kc (an operation known as key rotation). The goal is to limit the negative eﬀects of
the compromise of a key kc to a shorter period of time and to as little data as possible. This is
particularly important for keys that protect data stored for long periods of time as it is common
in many cloud storage applications (anything from user photos to regulated ﬁnancial information).
Upon the rotation by the KMS server KmS of a key kc into a new key kc
, all ciphertexts protected
with kc and held by the storage server StS need to be updated too. The updated ciphertexts should
be decryptable by kc
but not by kc. The goal is that an attacker that learns kc but only sees
updated ciphertexts should not be able to learn anything about the encrypted data in the new
period (while kc
is unexposed). Similarly if the attacker has seen a ciphertext encrypted using
an unexposed kc and later learns kc
, it still should not learn anything from that ciphertext. This
provides both forward security (security against future exposures) and post-compromise security
(security against past exposures). Obviously, one also requires that the update process itself does
(cid:48)
(cid:48)
(cid:48)
(cid:48)
7
not reveal encrypted information to StS (e.g., decrypting and re-encrypting the data by StS would
not be considered secure).
In the traditional wrapping-based KMS of Fig. 1, such key rotation operation requires interaction
between the storage server StS and KMS server KmS where StS sends every stored wrap to KmS for
. This requires the transmission of all wrap values
unwrapping under kc and re-wrapping using kc
between StS and KmS, and the exposure of all dek values to KmS. In a large storage setting such
process can take very long time (particularly under the “lazy evaluation” practice where a wrap held
by StS is updated to kc
only when the application requires a regular unwrap operation for that
must be stored at KmS thus extending
object). During all this time the old and new keys kc, kc
the life and exposure period of these keys.
(cid:48)
(cid:48)
(cid:48)
(cid:48)
(cid:48)
In Fig. 4 we present an Updatable Oblivious KMS that adapts the OKMS scheme from the
previous section to the updatable setting. Using techniques from updatable encryption [9, 20, 37]
adapted to the oblivious setting, we achieve some desirable properties, both in terms of security
, KMS server KmS can
and performance. First, upon the change of key kc into a new key kc
produce a short token ∆ with which all the ciphertexts of client C can be updated by StS in a way
that achieves the above security properties. Second, the update operation is non-interactive: It
is performed locally by StS with the sole possession of ∆. Note that once KmS produces a new
and the corresponding update value ∆, KmS can immediately erase the old key kc, hence
key kc
reducing the risk of exposure to only one key at a time. Finally, the update operation at StS
only requires a single exponentiation per ciphertext independently of the ciphertext size, compared
to at least 2 exponenentiations per ciphertext in previous updatable encryption schemes (see also
footnote 3), leading to a fast update of all ciphertexts that were encrypted under kc. Thus, one
obtains a very eﬃcient update procedure that achieves better security than in the wrapping-based
KMS in many ways: dek keys are never exposed to StS or to KmS during updates; old keys can
be erased immediately upon rotation; the interaction between StS and KmS is minimal (only ∆ is
transmitted); and ∆ can be erased by StS as soon as it locally updates all ciphertexts.
The UOKMS scheme from Fig. 4 departs from the OKMS scheme of Fig. 2 in some important
ways. First, to allow for fast updates, ciphertexts are composed of two parts, a wrap and a sym-
metrically encrypted ciphertext that derives the encryption key from wrap. For updates, only wrap
is updated. Second, the encryption operation is non-interactive, that is, C (or anyone else) can
encrypt data locally without interacting with KmS provided that it possesses the equivalent of a
certiﬁed “public key” yc corresponding to kc (yc = gkc in our scheme). Decryption is only possible
via an oblivious interaction with KmS. As a “side eﬀect” of the above properties, the UOKMS