(cid:1)
(cid:19)
(cid:22)
(cid:18)
(cid:1)
(cid:16)
(cid:17)
(cid:14)
(cid:11)
(cid:2)
(cid:9)
(cid:13)
(cid:10)
(cid:4)
(cid:1)
(cid:23)(cid:1)
(cid:23)(cid:1)
(cid:13)(cid:7)(cid:19)(cid:15)(cid:8)(cid:4)(cid:15)(cid:20)(cid:3)(cid:18)(cid:3)(cid:14)(cid:5)(cid:1)(cid:3)(cid:11)(cid:3)(cid:9)(cid:19)(cid:15)(cid:8)(cid:15)(cid:1)(cid:12)(cid:6)(cid:1)(cid:16)(cid:7)(cid:5)(cid:1)(cid:5)(cid:14)(cid:14)(cid:12)(cid:14)(cid:1)(cid:1)
(cid:2)(cid:5)(cid:6)(cid:12)(cid:14)(cid:5)(cid:1)(cid:16)(cid:7)(cid:5)(cid:1)(cid:7)(cid:17)(cid:10)(cid:3)(cid:11)(cid:1)(cid:5)(cid:14)(cid:14)(cid:12)(cid:14)(cid:1)
(cid:25)(cid:23)(cid:23)(cid:1)
(cid:26)(cid:23)(cid:23)(cid:1)
(cid:27)(cid:23)(cid:23)(cid:1)
(cid:28)(cid:23)(cid:23)(cid:1)
(cid:24)(cid:23)(cid:23)(cid:23)(cid:1)
(cid:24)(cid:25)(cid:23)(cid:23)(cid:1)
(cid:24)(cid:28)(cid:23)(cid:23)(cid:1)
(cid:5)(cid:14)(cid:11)(cid:7)(cid:13)(cid:8)(cid:1)(cid:5)(cid:14)(cid:17)(cid:9)(cid:15)(cid:1)(cid:3)(cid:15)(cid:10)(cid:8)(cid:1)(cid:6)(cid:15)(cid:7)(cid:13)(cid:16)(cid:12)(cid:10)(cid:16)(cid:16)(cid:10)(cid:14)(cid:13)(cid:1)(cid:4)(cid:10)(cid:13)(cid:9)(cid:1)
(cid:24)(cid:26)(cid:23)(cid:23)(cid:1)
(cid:24)(cid:27)(cid:23)(cid:23)(cid:1)
(cid:25)(cid:23)(cid:23)(cid:23)(cid:1)
(cid:25)(cid:25)(cid:23)(cid:23)(cid:1)
(cid:25)(cid:26)(cid:23)(cid:23)(cid:1)
(cid:25)(cid:27)(cid:23)(cid:23)(cid:1)
(cid:25)(cid:28)(cid:23)(cid:23)(cid:1)
Figure 7: The system capacity overload state in case E (Section 7.1). Note that one line has been overloaded to 661% of it allowable current,
a situation that CPAC would prevent from reaching.
(cid:1)
(cid:16)
(cid:19)
(cid:15)
(cid:1)
(cid:12)
(cid:9)
(cid:6)
(cid:10)
(cid:13)
(cid:2)
(cid:6)
(cid:9)
(cid:7)
(cid:3)
(cid:1)
(cid:30)(cid:32)(cid:29)(cid:1)
(cid:30)(cid:31)(cid:29)(cid:1)
(cid:30)(cid:30)(cid:29)(cid:1)
(cid:30)(cid:29)(cid:29)(cid:1)
(cid:34)(cid:29)(cid:1)
(cid:33)(cid:29)(cid:1)
(cid:4)(cid:15)(cid:17)(cid:13)(cid:7)(cid:12)(cid:1)(cid:5)(cid:16)(cid:9)(cid:17)(cid:7)(cid:20)(cid:15)(cid:14)(cid:1)
(cid:2)(cid:10)(cid:9)(cid:17)(cid:1)(cid:19)(cid:11)(cid:9)(cid:1)(cid:5)(cid:16)(cid:9)(cid:17)(cid:7)(cid:19)(cid:15)(cid:17)(cid:27)(cid:18)(cid:1)(cid:2)(cid:8)(cid:20)(cid:15)(cid:14)(cid:1)
(cid:25)(cid:3)(cid:22)(cid:18)(cid:1)(cid:30)(cid:33)(cid:1)(cid:6)(cid:9)(cid:12)(cid:7)(cid:23)(cid:1)(cid:5)(cid:16)(cid:9)(cid:14)(cid:26)(cid:1)
(cid:4)(cid:14)(cid:11)(cid:12)(cid:6)(cid:8)(cid:1)(cid:4)(cid:12)(cid:5)(cid:12)(cid:6)(cid:1)
Figure 8: Southwest Blackout Prevention using CPAC. On evalu-
ating the effects of line current on bus 18 after opening the relay.
CPAC determines line would be overloaded and prevents the action.
Scenario Min
125.0
(a)
147.0
(b)
(c)
176.0
Avg Max Mdev
21.1
154.9
21.9
186.5
214.2
29.8
205.0
235.0
280.0
Table 1: Prolog Micro-Benchmark (us).
Scenario Min
90.909
(a)
94.787
(b)
(c)
90.909
Avg
96.871
97.711
96.693
Max
100.200
99.338
99.668
Mdev
3.974
1.949
3.856
Table 2: Domain 0 and instrumented taint (ms).
Scenario Min
30.961
(a)
30.933
(b)
(c)
29.979
Avg
31.376
31.571
30.442
Max Mdev
33.991
0.600
0.601
32.976
32.994
0.601
Table 3: EMS Macro-Benchmark (ms).
Opened 
Operator may open
Operator may not open
Figure 9: Columbian Blackout Prevention via CPAC. On evalu-
ating the effects of opening the critical relays after few relays are
opened. CPAC determines line would be overloaded and prevents
the action.
is due in large part to our optimized implementation, where we
compiled the logic into assembly using the gplc compiler. Table 2
shows the corresponding overhead for the domain 0 to launch taint
tracking within the PLC. Most taint information collection could be
done within 100 ms. As domain 0 is implemented as a standalone
kernel module with the lowest priority, we have minimized the im-
pact of domain 0 on other PLC tasks. On the EMS side, there are
30 power system variables in scenarios a-c that an operator may be
able to see based on policy. As Table 3 shows, CPAC’s EMS mod-
ules completes all these scenarios within 40 ms. Given the general
EMS OS overhead and transmission delays (e.g., the 5 minute time
requirements by NERC for EMS-side contingency analyses [46]),
CPAC’s overhead will be minimal to operators. Note that CPAC’s
EMS modules include the physics engine, the Modbus transport
library and the Prolog policy engine.
We measured scenarios d-f using the topology of the entire Pol-
ish power system, comprising over 2,700 buses. Table 4 shows
the general overhead of CPAC’s physics engine with these real-
world cases. The physics engine is able to ﬁnish the forward anal-
ysis within approximately 100 ms. The result was computed using
MATLAB and will likely be even faster if the engine is developed
in C/C++. Table 5 shows the overhead of the Prolog policy engine,
reasoning about 1,000 simultaneous variables. For the three cases,
the Prolog engine completed policy analysis in approximately 15
ms, due to our compilation of logic into native assembly. The over-
148
head of the full analysis (without the overhead of user operations
and network transmission delay) is within 150 ms (100 ms from
physics engine using MATLAB, 15 ms from Prolog policy engine,
30 ms from EMS).
7.3 Scalability: NERC-CIP N − x Compliance
The state-of-the-art NERC-CIP v5 standards9 protect the power
grids against single component malfunctions. However, extensive
research [23] has shown the insufﬁciency of single failure consider-
ation because of increasing complexity of existing smart grids, and
more importantly, the possibility of cyber attacks with (automated)
subsequent component exploitations. Up to now, guaranteed N − x
compliance has not been scalable or feasible in practice. The main
reason is that, to fully support N−x contingencies, existing systems
must analyze
i=1!N
x
∑
i" = N +
N(N − 1)
x!(N − x)!
+··· +
different contingencies that each require independent full solution
of the power system. Continuing along these lines, one could show
that for k simultaneous outages, O(Nx+1) power ﬂow solutions10
are required to process the contingency list. For practical power
systems, the number of lines tends to scale linearly with the num-
ber of buses B in the system (N ∈ [B,1.5· B]). N − x compliance
thus requires O(Bx+1) power ﬂow solutions. In the Polish system,
where B = 2,746, N −2 and N −3 compliance require > 3.7M and
> 3.4B contingency considerations, respectively. Figure 10 shows
9Available
Transition-Program.aspx
http://www.nerc.com/pa/CI/Pages/
10Intuitively, the time complexity of#N
i$ is O(Ni), and the geometric
series as the result of Equation 7 grows with the order to O(Nx+1).
at
2
N!
(7)
Scenario
(d)
(e)
(f)
Min
102.048
100.982
97.626
Avg
102.945
101.571
98.116
Max
104.413
102.4825
98.886
Mdev
0.653
0.644
0.285
Table 4: Physics engine Macro-Benchmark (ms).
Scenario Min
8.000
(d)
8.000
(e)
(f)
8.000
Avg
14.750
14.600
15.250
Max Mdev
2.175
19.000
2.080
17.000
20.000
1.600
Table 5: Prolog Macro-Benchmark (ms).
the results for different number of contingencies. Each contingency
takes approximately 2.4 seconds to complete, and power utilities
mostly run contingency analysis procedures every 5 minutes. Con-
sequently, traditional methods do not scale up to existing strict re-
quirements and complex grid infrastructures. Several recent efforts
attempt to provide N − 2 contingency analysis support [27, 67];
however, they are not exhaustive, and instead selectively choose
and analyze particular contingencies. Consequently, the previous
work may miss a contingency that may occur in practice, result-
ing in incorrect NERC-CIP compliance assurance. Additionally,
they do not consider multiple (more than two) subsets of contin-
gencies, i.e., they miss a combination of small contingencies that
collectively contribute to a large-scale power grid blackout. None of
the traditional solutions can handle this intractable search space.
CPAC takes an alternative approach that enables N−x contingency
analysis even in large-scale systems. Traditional contingency anal-
ysis techniques are ofﬂine, and need to complete their analysis be-
fore any incident occurs or is about to happen. CPAC’s policy en-
forcement framework instead takes a run-time approach analyzing
any sequence of incidents before it determines whether they violate
requirements. In case of a violation, CPAC denies the request and
prevents the system from entering an unsafe state.
8. RELATED WORK
Control system safety. Stouffer et al. [57] present a series of NIST
guideline security architectures for the industrial control systems
that cover supervisory control and data acquisition systems, dis-
tributed control systems, and PLCs. Such guidelines are also used
in the energy industry [60, 44]. It has, however, been argued that
compliance with these standards can lead to a false sense of secu-
rity [62, 48]. There have also been efforts to build novel security
mechanisms for control systems. Mohan et al. [43] introduced a
monitor that dynamically checks plant behavior safety. A simi-
lar approach using model based intrusion detection was proposed
in [24]. Goble [35] introduce mathematical analysis techniques to
quantitatively evaluate aspects of a control system such as safety
and reliability, including PLC devices. However, the proposed so-
lution focuses mainly on accidental failures and does not investi-
gate malicious actions.
Access control. Most of the control systems, nowadays, rely on
network access control [3], and host-based user authentication to
protect against unauthorized plant monitoring and control activi-
ties. Additionally, PLC and HMI vendors themselves have included
some rudimentary security measures into their solutions. Based on
market data by Schwartz et al.[52], we studied the security mea-
sures used by PLCs accounting for 74% of market share. This in-