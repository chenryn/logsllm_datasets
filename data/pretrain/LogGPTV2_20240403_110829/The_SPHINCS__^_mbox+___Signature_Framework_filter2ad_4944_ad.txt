thentication paths and uses Thk to reconstruct the public key. As
part of SPHINCS+, a FORS signature is never verified explicitly.
Rather, the resulting public key is used as a message, to be implicitly
checked together with a WOTS+ signature.
3.5 SPHINCS+
Given the components defined above, we now construct SPHINCS+.
The SPHINCS+ key pair. Almost all elements that make up an
SPHINCS+ key pair have been introduced implicitly, above. The
public key consists of two n-bit values: the root node of the top tree
in the hypertree, and a random public seed PK.seed. In addition,
the private key consists of two more n-bit random seeds: SK.seed,
to generate the WOTS+ and FORS secret keys, and SK.prf, used
below for the randomized message digest.
The SPHINCS+ signature. It should come as no surprise that the
signature consists of a FORS signature on a digest of the message, a
WOTS+ signature on the corresponding FORS public key, and a se-
ries of authentication paths and WOTS+ signatures to authenticate
that WOTS+ public key. To verify this chain of paths and signa-
tures, the verifier iteratively reconstructs the public keys and root
nodes until the root node at the top of the SPHINCS+ hypertree is
reached. Two points have not yet been addressed: the computation
of the message digest, and leaf selection. Here, SPHINCS+ differs
from the original SPHINCS in subtle but important details.
r0r1r2r3r4r5Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2136Table 1 summarizes the required calls to F, H, and PRF. The private
and public key consist of 4n and 2n bits, respectively. The signature
adds up to (h + k(log t + 1) + d · len + 1)n bits.
4 SECURITY EVALUATION
In this work we make an attempt to unify the security reductions
for hash-based signature schemes. We move one of the main dif-
ferences – the way hashing is done – out of the reduction for
the construction and hide it inside the notion of tweakable hash
functions. This allows us to focus on the actual difference in the
high-level construction here and discuss the difference in hashing
in the tweakable-hash-function section.
In this section, we prove the following Theorem. Note that F and
H are just renamings of Th for message lengths n and 2n. We only
treat F separately at one point as the length-preserving case needs
additional attention in the proof.
SPHINCS+ is pq-eu-cma secure if
Theorem 17. For parameters n, w, h, d, m, t, k as described above,
• Th (and thereby also F and H) is post-quantum single-function
multi-target-collision resistant for distinct tweaks (with tweak
advice),
• F is post-quantum single-function multi-target decisional sec-
ond-preimage resistant for distinct tweaks (with tweak advice),
• PRF and PRFmsg are post-quantum pseudorandom function
families, and
• Hmsg is post-quantum interleaved target subset resilient.
InSecpq-eu-cma(cid:0)SPHINCS+; ξ , qs
(cid:1)
≤ InSecpq-prf (PRF; ξ , q1) + InSecpq-prf(cid:0)PRFmsg; ξ , qs
(cid:1)
(cid:1) + InSecpq-sm-tcr (Th; ξ , q2)
+ InSecpq-itsr(cid:0)Hmsg; ξ , qs
+ 3 · InSecpq-sm-tcr (F; ξ , q3) + InSecpq-sm-dspr (F; ξ , q3) ,
More concretely,
where q1 < 2h+1(kt + len), q2 < 2h+2(w · len + 2kt), and q3 <
2h+1(kt + w · len).
For the definitions of pq-eu-cma and pq-prf we refer the reader
to Appendix A.
4.1 (Post-quantum) interleaved target subset
resilience.
Before we start with the proof, we need to define one new security
property for hash functions. The security of HORST, the few-time
signature scheme used in the original SPHINCS was based on the
notion of target subset-resilience. Here, we define a strengthening of
this notion called interleaved target subset resilience (itsr), which
captures the use of FORS in SPHINCS+.
The idea for itsr is that from a theoretical point of view, one can
think of the 2h FORS instances as a single huge HORS-style [42]
signature scheme. The secret key consists of 2h key sets, which in
turn each consist of k key subsets of t secret n-byte values. The
message digest function Hmsg maps a message to a key set (by
outputting the corresponding index) and a set of indexes such that
each index is used to select one secret value per key subset of the
selected key set.
the inability of an adversary
Formally, the security of this multi-instance FORS boils down to
• to learn secret values which were not disclosed before,
• to replace secret values by values of its choosing, and
• to find a message which is mapped to a key set and a set of
indexes such that the adversary has already seen all secret
values indicated by the indexes for that key set.
The former two points will be shown to follow from the properties
of F, H, and Th as well as those of PRF. The latter point is exactly
what itsr captures.
Definition 18 (pq-itsr). Let H : {0, 1}κ × {0, 1}α → {0, 1}m
be a keyed hash function. Further consider the mapping function
MAPh,k ,t : {0, 1}m → {0, 1}h × [0, t − 1]k which, for parameters
h, k, t, maps an m-bit string to a set of k indexes ((I, 1, J1), . . . ,
(I, k, Jk)), where I is chosen from [0, 2h − 1] and each Ji is chosen
from [0, t − 1]. Note that the same I is used for all tuples (I, i, Ji).
We define the success probability of any (quantum) adversary
A against itsr of H. Let G = MAPh,k ,t ◦ H. The definition uses
an oracle O(·) which on input an α-bit message Mi samples a key
Ki ←R {0, 1}κ and returns Ki and G(Ki , Mi). The adversary may
query this oracle with messages of its choosing.
(cid:104)(K, M) ← AO(·)(1n)
G(Kj , Mj) ∧ (K, M) (cid:60)(cid:8)(Kj , Mj)(cid:9)q
(cid:105)
,
j=1
where q denotes the number of oracle queries of A and the pairs
i =1 represent the responses of oracle O.
We define the pq-itsr insecurity of a keyed hash function against
q-query, time-ξ adversaries as the maximum advantage of any
quantum adversary A with running time ≤ ξ, that makes no more
than q queries:
InSecpq-itsr (H; ξ , q) = maxA SuccitsrH,q
(A) .
Succitsr
H,q (A) = Pr
s.t. G(K, M) ⊆ q
j =1
(cid:8)(Kj , Mj)(cid:9)q
Note that this is actually a weakening of the target subset re-
silience assumption used in the analysis of SPHINCS in the multi-
target setting. In the multi-target version of target subset resilience,
A was able to freely choose the common index I for its output.
In interleaved target subset resilience, I is determined by G and
input M. We assess the hardness of pq-itsr through a complexity
analysis of generic attacks against pq-itsr in Section 5.
4.2 Security reduction
The security reduction follows largely along the lines of the original
SPHINCS security reduction. The new security properties shift
certain details towards the analysis of the tweakable hash function
and the message-digest function. In the remainder of this section
we will prove Theorem 17.
Proof (of Theorem 17) . We want to bound the success proba-
bility of a (quantum) adversary A against the EU-CMA security of
SPHINCS+. Towards this end we use the following series of games.
We start with GAME.0 which is the EU-CMA experiment for
SPHINCS+(A)) as defined in Appendix A. Now con-
SPHINCS+ (ExpEU-CMA
sider a GAME.1 which is essentially GAME.0 but the experiment
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2137makes use of a SPHINCS+ version where all the outputs of PRF,
i.e., the WOTS+ and FORS secret-key elements, get replaced by
truly random values. Recall that in GAME.0 these were outputs of
PRF on input secret SK.seed and a unique address per generated
secret-key element.
Next, consider a game GAME.2, which is the same as GAME.1
but in the signing oracle PRFmsg(SK.prf, ·) is replaced by a truly
random function.
Afterwards, we consider GAME.3, which differs from GAME.2 in
that we are considering the game lost if an adversary outputs a valid
forgery (M, SIG) where the FORS signature part of SIG contains
only secret values which were contained in previous signatures
with that FORS key pair obtained by A via the signing oracle.
Finally, we consider game GAME.4, which differs from GAME.3
in that we are considering the game lost if an adversary outputs
a valid forgery (M, SIG) which (implicitly or explicitly) contains a
second preimage for an input to Th that was part of a signature
returned as a signing-query response. By implicitly we here refer
to a second preimage which is observed during the verification of
the signature, e.g., when computing a root node from a leaf and an
authentication path.
In the following we bound the differences in success probability
of any adversary and the success probability of an adversary in the
last game. The different numbers of queries refer to the quantities
in the theorem statement.
Claim 19.
Claim 20.
Analyzing this sequence of games leads to the following five
claims which we prove in Appendix D.
(cid:12)(cid:12)(cid:12)SuccGAME.1 (A) − SuccGAME.0 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-prf (PRF; ξ , q1) .
(cid:12)(cid:12)(cid:12)SuccGAME.2 (A) − SuccGAME.1 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-prf(cid:0)PRFmsg; ξ , qs
(cid:1) .
(cid:12)(cid:12)(cid:12)SuccGAME.3 (A) − SuccGAME.2 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-itsr(cid:0)Hmsg; ξ , qs
(cid:1) .
(cid:12)(cid:12)(cid:12)SuccGAME.4 (A) − SuccGAME.3 (A)(cid:12)(cid:12)(cid:12) ≤ InSecpq-sm-tcr (Th; ξ , q2) .
Claim 21.
Claim 22.
Claim 23.
SuccGAME.4 (A) ≤ 3 · InSecpq-sm-tcr (F; ξ , q3)
+ InSecpq-sm-dspr (F; ξ , q3) .
We combine the bounds from the claims to obtain the bound of
□
the theorem.
5 SECURITY LEVEL / SECURITY AGAINST
GENERIC ATTACKS
As shown in Theorem 17, the security reduction for Construction 6,
and the security arguments for specific instantiations in the last sec-
tion, the security of SPHINCS+ relies on properties of the concrete
instantiations of all the cryptographic functions and the way they
are used. In the following we assume that there are no structural at-
tacks against the used concrete instantiations of H1, H2, and H from
(cid:16)
1 −(cid:16)
X =
Table 2: Bounds for generic quantum and classical
attacks against used function properties. We added
conjectured bounds. We use
a superscript
1 − 1
1
2h
2hγ
dm-dspr(c)
(c)
1 − 1
t
dm-spr/ prf
(cid:1)(cid:16)
itsr
γ
.
γ
for
(cid:17)γ(cid:17)k(cid:0)qs
(cid:16) q+1
(cid:17)
(cid:16) (q+1)2
(cid:17)
2n
2n
(cid:17)qs−γ
(cid:16) q+1
(cid:17)
(cid:16) (q+1)2
2n
2n
(cid:17)
Θ
Θ
classical
Θ
quantum
Θ
Θ((q + 1)X)
Θ(cid:0)(q + 1)2X(cid:1)
Construction 6 and Construction 7 as well as for Hmsg, PRFmsg,
and PRF. We thus consider generic classical and quantum attacks
against dm-spr, PRF security, and itsr. Runtime of adversaries is
counted in terms of calls to the used functions. We summarize the
bounds in Table 2.
Generic attacks against dm-spr. To evaluate the complexity of
generic attacks against hash-function properties, the hash functions
are commonly modeled as random (keyed) functions. For random
functions there is no difference between dm-spr and multi-function
multi-target second-preimage resistance (mm-spr). Every key effec-
tively selects a new random (unkeyed) function, independent of the
key being random or not. Hence, the complexity of generic attacks
is the same for both notions. We formally show this in Appendix B.
In [33] it was shown that the success probability of any classical
q-query adversary against mm-spr of a random function with range
{0, 1}n (and hence also against dm-spr) is exactly (q + 1)/2n. For q-
query quantum adversaries the success probability is Θ((q +1)2/2n).
Note that these bounds are independent of the number of targets.
Generic attacks against dm-dspr. As argued above, for random
keyed functions there is no difference between the distinct-function
and multi-function cases. In [10] it is shown that the success proba-
bility of a quantum adversary against (single-target) dspr of an n-bit
function is O((q + 1)2/2n). Considering a classical adversary this
bound becomes O(q/2n). Moreover, the authors of [10] give a loose
reduction from dspr to dm-dspr (which they call T-DSPR). The
reduction loses exactly one over the number of targets. However,
as also discussed in [10], the best attack against DSPR the authors
could think of is executing a high-probability (second-)preimage
attack. Given that multi-function multi-target attacks do not give
an adversary any advantage over single-target attacks for PRE and
SPR, we conjecture that the same holds for DPSR. Hence, we use
the above bounds: O((q + 1)2/2n) for quantum and O((q + 1)/2n)
for non-quantum adversaries.
Generic attacks against prf security. The best generic attack
against the prf security of a keyed function is commonly believed
to be exhaustive search for the key. Hence, for a function with
key space {0, 1}n the success probability of a classical adversary
that evaluates the function on qk keys is bounded by (qk + 1)/2n.
For qk-query quantum adversaries the success probability of ex-
haustive search in an unstructured space with {0, 1}n elements
is Θ((qk + 1)2/2n) as implicitly shown in [33] (this can be seen
considering this as preimage search in a random function).
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2138Generic attacks against itsr. To evaluate the attack complex-
ity of generic attacks against interleaved target subset resilience
we again assume that the used hash function is a random keyed
function.
Recall the parameters h, k, and t = 2a, which define the following
process of choosing sets: generate independent uniformly random
integers I, J1, . . . , Jk, with I chosen from [0, 2h − 1] and each Ji cho-
sen from [0, t −1]; then define S = {(I, 1, J1),(I, 2, J2), . . . ,(I, k, Jk)}.
(In the context of SPHINCS+, S is a set of positions of FORS private-
key values revealed in a signature: I selects the FORS instance, and
Ji selects the position of the value revealed from the ith set inside
this FORS instance. To distinguish the number of queries to the
oracle from the itsr game from hash-function queries, we call the
former qs and the latter qh.)
The core combinatorial question here is the probability that
S0 ⊂ S1 ∪ · · · ∪ Sqs , where each Si is generated independently
by the above process. (In the context of SPHINCS+, this is the
probability that a new message digest selects FORS positions that
are covered by the positions already revealed in qs signatures.)
Write Sα as {(Iα , 1, Jα ,1),(Iα , 2, Jα ,2), . . . ,(Iα , k, Jα ,k)}.
For each α, the event Iα = I0 occurs with probability 1/2h,
and these events are independent. Consequently, for each γ ∈
{0, 1, . . . , qs}, the number of indexes α ∈ {1, 2, . . . , qs} such that
Define DarkSideγ as the conditional probability that (I0, i, J0,i) ∈
S1 ∪ · · · ∪ Sqs , given that the above number is γ. In other words,