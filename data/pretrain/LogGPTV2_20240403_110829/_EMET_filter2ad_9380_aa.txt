# 【技术分享】深入挖掘EMET

#### 译文声明
本文为翻译文章，原文来自安全客。译文仅供参考，具体内容及含义以原文为准。

上周，我们决定对微软提供的EMET库进行一次深入探究。该库旨在为无法源码编译的应用程序引入若干安全功能，并增加一层额外的保护，防止典型的库调用利用技术，阻止使用危险函数/组件，并增强一些利用缓解技术。

考虑到已有许多研究人员也在研究EMET，我们的目标是理清其结构和各组件之间的交互方式。本文将分享我们的一些研究成果。

## 大体框架
安装EMET 5.51（SHA1 (EMET Setup.msi) = 98f0cb46df42bdd5ff8b92f87cad728e9373fe97）后，我们发现了以下新文件：

- **程序文件**
  - EMET5.5
    - 部署
      - 分组政策文件
        - EMET.adml
        - EMET.admx
    - 保护配置文件
      - CertTrust.xml
      - Popular Software.xml
      - Recommended Software.xml
    - DevExpress.BonusSkins.v15.1.dll
    - DevExpress.Data.v15.1.dll
    - DevExpress.Images.v15.1.dll
    - DevExpress.Utils.v15.1.dll
    - DevExpress.XtraBars.v15.1.dll
    - DevExpress.XtraEditors.v15.1.dll
    - DevExpress.XtraLayout.v15.1.dll
    - DevExpress.XtraTreeList.v15.1.dll
    - EMET_Agent.exe
    - EMET_CE.dll
    - EMET_Conf.exe
    - EMET.dll
    - EMET_GUI.exe
    - EMET_Service.exe
    - EMET_Service.exe.config
    - EMET_User’sGuideLink.txt
    - EULA.rtf
    - HelperLib.DLL
    - Microsoft.GroupPolicy.Management.dll
    - MitigationInterface.DLL
    - PKIPinningSubsystem.DLL
    - Privacy Statement.rtf
    - ReportingSubsystem.DLL
    - SdbHelper.dll
    - TelemetrySubsystem.DLL
    - TrayIconSubsystem.DLL
  - Windows
    - AppPatch
      - EMET.dll
      - 定制
        - {f8c4cc07-6dc4-418f-b72b-304fcdb64052}.sdb

面对这些安装文件，你有以下几种选择：
1. **解压缩安装程序包**：显示所有文件，包括未安装的文件，但可能遗漏动态生成的文件。
2. **猜测安装目录**：简单但容易出错，因为文件可能存储在不同位置。
3. **使用镜像工具**：记录文件系统两种状态之间的所有变化，是最准确但数据量最大的方法。

我们选择了第三种方法，使用“InstallWatch Pro”作为截屏工具，记录所有创建、更改和删除的文件及注册表项。最相关的文件位于`C:\Program Files\EMET 5.5`和`C:\Windows\AppPatch`文件夹中。前者主要存储与EMET交互的应用程序，后者包含实际的EMET库（在64位系统中还有`EMET64.dll`）。操作系统使用此文件夹来存储所谓的SHIM库，应用程序加载器会在应用程序和操作系统API之间注入这种库，从而拦截大多数函数调用。因此，SHIM库可以透明地充当代理或筛选器。

## 配置工具
EMET提供了多个接口来配置受保护的应用程序：
1. **GUI工具** (`EMET_GUI.exe`)：使用.NET编写，无混淆处理，可轻松查看源码。它负责显示当前受保护的应用程序，并允许管理员添加、删除和配置现有的保护机制。
2. **命令行工具** (`EMET_Conf.exe`)：也使用.NET编写，提供命令行界面来配置EMET。
3. **分组策略**：通过部署子文件夹中的分组策略文件进行配置。

默认情况下，某些应用程序（如Microsoft IE浏览器、Java和Adobe）在首次安装时会受到EMET保护。用户可以通过GUI工具配置其他应用程序的保护。配置过程包括选择要保护的应用程序，更新Shim DB文件（`.sdb`），并创建相关注册表项。完成后，Windows操作系统会在检查Shim DB后将`EMET.dll`注入到受保护的应用程序中。此外，进程启动后，`EMET.dll`会查询注册表项以确定应用程序的保护设置并进行相应的检查。

有关EMET如何使用Shim DB和注册表项的更多信息，请参阅[HOW-EMET-WORKS] 和 [EMET-UNCOVERED]。

## 服务
第一个有趣的应用是 `EMET_Service.exe`，它以本地SYSTEM权限运行，并且所有用户都可以访问 `\pipe\EMET_Service` 命名管道。该服务主要用于生成代表EMET库的日志事件，并验证证书链是否包含固定的证书及其有效性。

与该服务交互需要使用XML格式的数据。EMET库将内容发送给服务，然后由服务解析并执行处理。由于XML解析可能存在安全风险，我们检查了所使用的解析器和配置。开发人员使用了 .NET 提供的 `System.Xml.XmlReader`，禁用了处理指令和文档支持，从而防止了大多数常见的XML攻击，但仍需防范特定漏洞攻击和拒绝服务攻击。

以下是三种不同类型的消息示例：
1. 由 `EMET_CE.dll` 触发的消息，用于验证EMET固定列表中的证书。消息包含十六进制编码的证书（证书/请求/链）：
   ```plaintext
   30820[...]
   30820[...]
   30820[...]
   ```

通过以上分析，我们希望读者能更好地理解EMET的结构和工作机制。