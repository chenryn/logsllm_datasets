if you need a monotonically increasing clock, see
.br clock_gettime (2).
.pp
macros for operating on
.i timeval
structures are described in
.br timeradd (3).
.pp
traditionally, the fields of
.i struct timeval
were of type
.ir long .
.\"
.ss c library/kernel differences
on some architectures, an implementation of
.br gettimeofday ()
is provided in the
.br vdso (7).
.\"
.ss the tz_dsttime field
on a non-linux kernel, with glibc, the
.i tz_dsttime
field of
.i struct timezone
will be set to a nonzero value by
.br gettimeofday ()
if the current timezone has ever had or will have a daylight saving
rule applied.
in this sense it exactly mirrors the meaning of
.br daylight (3)
for the current zone.
on linux, with glibc, the setting of the
.i tz_dsttime
field of
.i struct timezone
has never been used by
.br settimeofday ()
or
.br gettimeofday ().
.\" it has not
.\" been and will not be supported by libc or glibc.
.\" each and every occurrence of this field in the kernel source
.\" (other than the declaration) is a bug.
thus, the following is purely of historical interest.
.pp
on old systems, the field
.i tz_dsttime
contains a symbolic constant (values are given below)
that indicates in which part of the year daylight saving time
is in force.
(note: this value is constant throughout the year:
it does not indicate that dst is in force, it just selects an
algorithm.)
the daylight saving time algorithms defined are as follows:
.pp
.in +4n
.ex
\fbdst_none\fp     /* not on dst */
\fbdst_usa\fp      /* usa style dst */
\fbdst_aust\fp     /* australian style dst */
\fbdst_wet\fp      /* western european dst */
\fbdst_met\fp      /* middle european dst */
\fbdst_eet\fp      /* eastern european dst */
\fbdst_can\fp      /* canada */
\fbdst_gb\fp       /* great britain and eire */
\fbdst_rum\fp      /* romania */
\fbdst_tur\fp      /* turkey */
\fbdst_austalt\fp  /* australian style with shift in 1986 */
.ee
.in
.pp
of course it turned out that the period in which
daylight saving time is in force cannot be given
by a simple algorithm, one per country; indeed,
this period is determined by unpredictable political
decisions.
so this method of representing timezones
has been abandoned.
.sh see also
.br date (1),
.br adjtimex (2),
.br clock_gettime (2),
.br time (2),
.br ctime (3),
.br ftime (3),
.br timeradd (3),
.br capabilities (7),
.br time (7),
.br vdso (7),
.br hwclock (8)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 rickard e. faith (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th getgid 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
getgid, getegid \- get group identity
.sh synopsis
.nf
.b #include 
.pp
.b gid_t getgid(void);
.b gid_t getegid(void);
.fi
.sh description
.br getgid ()
returns the real group id of the calling process.
.pp
.br getegid ()
returns the effective group id of the calling process.
.sh errors
these functions are always successful
and never modify
.\" https://www.austingroupbugs.net/view.php?id=511
.\" 0000511: getuid and friends should not modify errno
.ir errno .
.sh conforming to
posix.1-2001, posix.1-2008, 4.3bsd.
.sh notes
the original linux
.br getgid ()
and
.br getegid ()
system calls supported only 16-bit group ids.
subsequently, linux 2.4 added
.br getgid32 ()
and
.br getegid32 (),
supporting 32-bit ids.
the glibc
.br getgid ()
and
.br getegid ()
wrapper functions transparently deal with the variations across kernel versions.
.pp
on alpha, instead of a pair of
.br getgid ()
and
.br getegid ()
system calls, a single
.br getxgid ()
system call is provided, which returns a pair of real and effective gids.
the glibc
.br getgid ()
and
.br getegid ()
wrapper functions transparently deal with this.
see
.br syscall (2)
for details regarding register mapping.
.sh see also
.br getresgid (2),
.br setgid (2),
.br setregid (2),
.br credentials (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/argz_add.3
.so man2/rename.2
.so man3/isalpha.3
.so man3/getprotoent_r.3
.so man2/uname.2
.\" copyright (c) 2008 linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pthread_getattr_np 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
pthread_getattr_np \- get attributes of created thread
.sh synopsis
.nf
.br "#define _gnu_source" "             /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int pthread_getattr_np(pthread_t " thread ", pthread_attr_t *" attr );
.pp
compile and link with \fi\-pthread\fp.
.fi
.sh description
the
.br pthread_getattr_np ()
function initializes the thread attributes object referred to by
.i attr
so that it contains actual attribute values describing the running thread
.ir thread .
.pp
the returned attribute values may differ from
the corresponding attribute values passed in the
.i attr
object that was used to create the thread using
.br pthread_create (3).
in particular, the following attributes may differ:
.ip * 2
the detach state, since a joinable thread may have detached itself
after creation;
.ip *
the stack size,
which the implementation may align to a suitable boundary.
.ip *
and the guard size,
which the implementation may round upward to a multiple of the page size,
or ignore (i.e., treat as 0),
if the application is allocating its own stack.
.pp
furthermore, if the stack address attribute was not set
in the thread attributes object used to create the thread,
then the returned thread attributes object will report the actual
stack address that the implementation selected for the thread.
.pp
when the thread attributes object returned by
.br pthread_getattr_np ()
is no longer required, it should be destroyed using
.br pthread_attr_destroy (3).
.sh return value
on success, this function returns 0;
on error, it returns a nonzero error number.
.sh errors
.tp
.b enomem
.\" can happen (but unlikely) while trying to allocate memory for cpuset
insufficient memory.
.pp
in addition, if
.i thread
refers to the main thread, then
.br pthread_getattr_np ()
can fail because of errors from various underlying calls:
.br fopen (3),
if
.ir /proc/self/maps
can't be opened;
and
.br getrlimit (2),
if the
.br rlimit_stack
resource limit is not supported.
.sh versions
this function is available in glibc since version 2.2.3.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br pthread_getattr_np ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
this function is a nonstandard gnu extension;
hence the suffix "_np" (nonportable) in the name.
.sh examples
the program below demonstrates the use of
.br pthread_getattr_np ().
the program creates a thread that then uses
.br pthread_getattr_np ()
to retrieve and display its guard size, stack address,
and stack size attributes.
command-line arguments can be used to set these attributes
to values other than the default when creating the thread.
the shell sessions below demonstrate the use of the program.
.pp
in the first run, on an x86-32 system,
a thread is created using default attributes:
.pp
.in +4n
.ex
.rb "$" " ulimit \-s" "      # no stack limit ==> default stack size is 2 mb"
unlimited
.rb "$" " ./a.out"
attributes of created thread:
        guard size          = 4096 bytes
        stack address       = 0x40196000 (eos = 0x40397000)
        stack size          = 0x201000 (2101248) bytes
.ee
.in
.pp
in the following run, we see that if a guard size is specified,
it is rounded up to the next multiple of the system page size
(4096 bytes on x86-32):
.pp
.in +4n
.ex
.rb "$" " ./a.out \-g 4097"
thread attributes object after initializations:
        guard size          = 4097 bytes
        stack address       = (nil)
        stack size          = 0x0 (0) bytes
attributes of created thread:
        guard size          = 8192 bytes
        stack address       = 0x40196000 (eos = 0x40397000)
        stack size          = 0x201000 (2101248) bytes
.ee
.in
.\".in +4n
.\".nf
.\"$ ./a.out \-s 0x8000
.\"thread attributes object after initializations:
.\"        guard size          = 4096 bytes
.\"        stack address       = 0xffff8000 (eos = (nil))
.\"        stack size          = 0x8000 (32768) bytes
.\"
.\"attributes of created thread:
.\"        guard size          = 4096 bytes
.\"        stack address       = 0x4001e000 (eos = 0x40026000)
.\"        stack size          = 0x8000 (32768) bytes
.\".fi
.\".in
.pp
in the last run, the program manually allocates a stack for the thread.
in this case, the guard size attribute is ignored.
.pp
.in +4n
.ex
.rb "$" " ./a.out \-g 4096 \-s 0x8000 \-a"
allocated thread stack at 0x804d000
thread attributes object after initializations:
        guard size          = 4096 bytes
        stack address       = 0x804d000 (eos = 0x8055000)
        stack size          = 0x8000 (32768) bytes
attributes of created thread:
        guard size          = 0 bytes
        stack address       = 0x804d000 (eos = 0x8055000)
        stack size          = 0x8000 (32768) bytes
.ee
.in
.ss program source
\&
.ex
#define _gnu_source     /* to get pthread_getattr_np() declaration */
#include 
#include 
#include 
#include 
#include 
#define handle_error_en(en, msg) \e
        do { errno = en; perror(msg); exit(exit_failure); } while (0)
static void
display_stack_related_attributes(pthread_attr_t *attr, char *prefix)
{
    int s;
    size_t stack_size, guard_size;
    void *stack_addr;
    s = pthread_attr_getguardsize(attr, &guard_size);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getguardsize");
    printf("%sguard size          = %zu bytes\en", prefix, guard_size);
    s = pthread_attr_getstack(attr, &stack_addr, &stack_size);
    if (s != 0)
        handle_error_en(s, "pthread_attr_getstack");
    printf("%sstack address       = %p", prefix, stack_addr);
    if (stack_size > 0)
        printf(" (eos = %p)", (char *) stack_addr + stack_size);
    printf("\en");
    printf("%sstack size          = %#zx (%zu) bytes\en",
            prefix, stack_size, stack_size);
}
static void
display_thread_attributes(pthread_t thread, char *prefix)
{
    int s;
    pthread_attr_t attr;
    s = pthread_getattr_np(thread, &attr);
    if (s != 0)
        handle_error_en(s, "pthread_getattr_np");
    display_stack_related_attributes(&attr, prefix);
    s = pthread_attr_destroy(&attr);
    if (s != 0)
        handle_error_en(s, "pthread_attr_destroy");
}
static void *           /* start function for thread we create */
thread_start(void *arg)
{
    printf("attributes of created thread:\en");
    display_thread_attributes(pthread_self(), "\et");
    exit(exit_success);         /* terminate all threads */
}
static void
usage(char *pname, char *msg)
{
    if (msg != null)
        fputs(msg, stderr);
    fprintf(stderr, "usage: %s [\-s stack\-size [\-a]]"
            " [\-g guard\-size]\en", pname);
    fprintf(stderr, "\et\et\-a means program should allocate stack\en");
    exit(exit_failure);
}
static pthread_attr_t *   /* get thread attributes from command line */
get_thread_attributes_from_cl(int argc, char *argv[],
                              pthread_attr_t *attrp)
{
    int s, opt, allocate_stack;
    size_t stack_size, guard_size;
    void *stack_addr;
    pthread_attr_t *ret_attrp = null;   /* set to attrp if we initialize
                                           a thread attributes object */
    allocate_stack = 0;
    stack_size = \-1;
    guard_size = \-1;
    while ((opt = getopt(argc, argv, "ag:s:")) != \-1) {
        switch (opt) {
        case \(aqa\(aq:   allocate_stack = 1;                     break;
        case \(aqg\(aq:   guard_size = strtoul(optarg, null, 0);  break;
        case \(aqs\(aq:   stack_size = strtoul(optarg, null, 0);  break;
        default:    usage(argv[0], null);
        }
    }
    if (allocate_stack && stack_size == \-1)
        usage(argv[0], "specifying \-a without \-s makes no sense\en");
    if (argc > optind)
        usage(argv[0], "extraneous command\-line arguments\en");
    if (stack_size >= 0 || guard_size > 0) {
        ret_attrp = attrp;
        s = pthread_attr_init(attrp);
        if (s != 0)
            handle_error_en(s, "pthread_attr_init");
    }
    if (stack_size >= 0) {
        if (!allocate_stack) {
            s = pthread_attr_setstacksize(attrp, stack_size);
            if (s != 0)
                handle_error_en(s, "pthread_attr_setstacksize");
        } else {
            s = posix_memalign(&stack_addr, sysconf(_sc_pagesize),
                               stack_size);
            if (s != 0)
                handle_error_en(s, "posix_memalign");
            printf("allocated thread stack at %p\en\en", stack_addr);
            s = pthread_attr_setstack(attrp, stack_addr, stack_size);
            if (s != 0)
                handle_error_en(s, "pthread_attr_setstacksize");
        }
    }
    if (guard_size >= 0) {
        s = pthread_attr_setguardsize(attrp, guard_size);
        if (s != 0)
            handle_error_en(s, "pthread_attr_setstacksize");
    }
    return ret_attrp;
}
int
main(int argc, char *argv[])
{
    int s;
    pthread_t thr;
    pthread_attr_t attr;
    pthread_attr_t *attrp = null;    /* set to &attr if we initialize
                                        a thread attributes object */
    attrp = get_thread_attributes_from_cl(argc, argv, &attr);
    if (attrp != null) {
        printf("thread attributes object after initializations:\en");
        display_stack_related_attributes(attrp, "\et");
        printf("\en");
    }
    s = pthread_create(&thr, attrp, &thread_start, null);
    if (s != 0)