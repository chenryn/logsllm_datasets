costs on a common architecture assuming 128-bit security and compare this against the RSA and elliptic
curve DSA signature schemes.
14
6.1 Analysis of Costs
Let gD be the cost of the length-doubling PRG and gT be the cost of the length-tripling PRG. We assume
the messages to be signed are l-bits.
Sahai-Waters [SW14] This scheme makes a single call to the puncturable PRF on an l-bit message. This
call traverses the GGM tree according to the message bits, requring l invocations of the length-doubling PRG.
The cost is therefore gD · l.
Adaptively secure scheme Our adaptively secure scheme calls the ﬁxed-length puncturable PRF once
on each of l inputs, where each input is λ + (cid:100)lg l(cid:101) + 1 bits. However each input has the same λ-bit suﬃx,
diﬀering only in the remaining bits. Therefore the GGM tree can be traversed to a depth of λ, before a
depth-ﬁrst search is performed to an additional (cid:100)lg l(cid:101) + 1 depth. Thus λ + 2l − 1 calls are made to the
length-doubling PRG. Additionally the scheme evaluates the variable-length puncturable PRF once on a
λ-bit input, outputting pipelined evaluations on each preﬁx. Therefore the modiﬁed GGM tree is traversed
to a depth of λ, requiring λ calls to the length-tripling PRG. Therefore the total cost is gD·(λ+2l−1)+gT ·λ.
6.2 Comparison of Signature Computation for 128-bit Security
To achieve a security level of 128 bits, we consider signatures on 256-bit messages. In practice such messages
are produced by application of a collision-resistant hash function, we disregard this cost here. For our
analysis we considered several diﬀerent candidates for the PRG. These include the SHA-256 cyptographic
hash function, the ChaCha stream cipher, the RC5 block cipher and AES-256 (software and hardware).
We compare this against the cost of elliptic curve DSA signatures. All primitives are implemented using
v1.0.1 of the OpenSSL library, excepting the ChaCha stream cipher which uses a C implementation available
here [Cha14]. The AES hardware implementation is based upon the Intel AES-NI instruction set which is
available via the EVP wrapper of the OpenSSL library. All timings were performed on a quad-core Intel
Xeon E3-1270 v2 workstation with 16Gb RAM, clocked @3.50GHz.
Primitives
SHA-256 : The SHA-256 compression function maps 512-bits to 256-bits.
ChaCha : The ChaCha stream cipher is seeded via a 256-bit key and 64-bit IV. It generates 512-bit
psuedorandom bits per update operation of the internal state.
AES (software only) : The AES-256 block cipher is seeded via a 256-bit key and 64-bit IV. It operates
AES (hardware accelerated) : The AES-256 block cipher is seeded via a 256-bit key and 64-bit IV. It
RC5 : The RC5 block cipher has a variable key/block size. The default implementation uses a 128-bit key
on 128-bit blocks.
operates on 128-bit blocks.
and operates on 64-bit blocks.
cost is 3400µs.
348µs.
RSA : The RSA algorithm (PKCS #1 v2.0) is used to generate signatures on a 3072-bit modulus. The
EC-DSA : The elliptic curve DSA algorithm is used to generate signatures on a 256-bit curve. The cost is
Length-doubling PRG
SHA-256 : The input is zero-padded to 512 bits. The SHA-256 compression function is then applied. The
cost of this routine is 0.52µs.
ChaCha : The input is zero-padded to 256 bits. We then extract the ﬁrst 256 bits of the 512 pseudorandom
bits produced by an update operation and xor these with the input.3 The cost to seed is 0.03µs. The
amortized invocation cost is 0.18µs.
3The remaining bits are cached for the next invocation.
15
AES (software only) : The input is extended to 256 bits. We then apply the AES cipher in CTR mode.
The cost to seed is 0.17µs. The invocation cost is 0.28µs.
AES (hardware accelerated) : The input is extended to 256 bits. We then apply the AES cipher in
CTR mode. The cost to seed is 0.16µs. The invocation cost is 0.08µs.
RC5 : The input is extended to 256 bits. We then apply the RC5 cipher in CTR mode. The cost to seed
is 1.11µs. The invocation cost is 0.36µs.
Length-tripling PRG
SHA-256 : The input is extended to 1024 bits. The SHA-256 compression function is then applied on each
512-bit block and the ﬁrst 384 bits of the output extracted. The cost of this routine is 1.04µs.
ChaCha : The input is zero-padded to 384 bits. We then extract the ﬁrst 384 bits of the 512 pseudorandom
bits produced by an update operation and xor these with the input.3 The cost to seed is 0.03µs. The
amortized invocation cost is 0.27µs.
AES (software only) : The input is extended to 384 bits. We then apply the AES cipher in CTR mode.
The cost to seed is 0.17µs. The invocation cost is 0.42µs.
AES (hardware accelerated) : The input is extended to 384 bits. We then apply the AES cipher in
CTR mode. The cost to seed is 0.16µs. The invocation cost is 0.12µs.
RC5 : The input is extended to 384 bits. We then apply the RC5 cipher in CTR mode. The cost to seed
is 1.11µs. The invocation cost is 0.54µs.
PRG
[SW14]
Adapt. scheme
RSA
EC-DSA
SHA-256 ChaCha AES AES (hardware) RC5
47
162
133
465
23
81
10
36
36
125
3400
348
Table 1: Signature cost on 256-bit messages. By PRG, we mean the appropriate choice of length-doubling
PRG or length-tripling PRG. All times given in microseconds.
Optimizations Exploiting the stream property of ChaCha and CTR mode of operation for the above
block ciphers allows some eﬃciency gains. In a call to the ﬁxed domain puncturable PRF, only one output
block need be computed at each level of the GGM tree, halving the invocation cost of the length-doubling
PRG. Likewise in a call to the variable-domain puncturable PRF, only two out of three output blocks need
be computed at each level of the modiﬁed GGM tree, reducing the invocation cost of the length-tripling
PRG by a factor of 2/3.
Pulling it Together Our measurements show some interesting features. For all pseudo random generator
candidates considered, signing in the Sahai-Waters scheme is signiﬁcantly faster than EC-DSA. Using the
AES (software) or ChaCha based solutions it is around ten to ﬁfteen times faster.
Our adaptively secure scheme adds an overhead of about 2.5, relative to the selectively secure Sahai-
Waters.
Finally, we note that our scheme is conducive to leveraging parallelism. In Appendix A we describe a
slight generalization to larger width GGM trees. For small increases in width it is feasible to utilize certain
PRG structures that allow for computing multiple bits of the PRG output in parallel.
Acknowledgements
We thank Amit Sahai for observing that a wider tree structure in tandem with a parallelizable PRG could
be conducive to leveraging parallelism.
16
References
[BGI+01]
[BGI14]
Boaz Barak, Oded Goldreich, Russell Impagliazzo, Steven Rudich, Amit Sahai, Salil Vadhan,
and Ke Yang. On the (im)possibility of obfuscating programs. In Lecture Notes in Computer
Science, pages 1–18. Springer-Verlag, 2001.
Elette Boyle, Shaﬁ Goldwasser, and Ioana Ivan. Functional signatures and pseudorandom
functions.
In Hugo Krawczyk, editor, Public-Key Cryptography PKC 2014, volume 8383 of
Lecture Notes in Computer Science, pages 501–519. Springer Berlin Heidelberg, 2014.
[BHJ+14]
Florian B¨ohl, Dennis Hofheinz, Tibor Jager, Jessica Koch, and Christoph Striecks. Conﬁned
guessing: New signatures from standard assumptions. Journal of Cryptology, pages 1–33, 2014.
[BSW11]
[BW13]
[Cha14]
Elette Boyle, Gil Segev, and Daniel Wichs. Fully leakage-resilient signatures. In Kenneth G.
Paterson, editor, Advances in Cryptology EUROCRYPT 2011, volume 6632 of Lecture Notes
in Computer Science, pages 89–108. Springer Berlin Heidelberg, 2011.
Dan Boneh and Brent Waters. Constrained pseudorandom functions and their applications.
Cryptology ePrint Archive, Report 2013/352, 2013. http://eprint.iacr.org/.
ChaCha stream cipher implementation, May 2014.
timings/estreambench/submissions/salsa20/chacha8/ref/chacha.c.
http://cr.yp.to/streamciphers/
[CHKP10] David Cash, Dennis Hofheinz, Eike Kiltz, and Chris Peikert. Bonsai trees, or how to delegate
a lattice basis. In Henri Gilbert, editor, Advances in Cryptology EUROCRYPT 2010, volume
6110 of Lecture Notes in Computer Science, pages 523–552. Springer Berlin Heidelberg, 2010.
[CK12]
[DH76]
[DN94]
[FS12]
Melissa Chase and Markulf Kohlweiss. A new hash-and-sign approach and structure-preserving
signatures from DLIN.
In Proceedings of the 8th International Conference on Security and
Cryptography for Networks, SCN’12, pages 131–148, Berlin, Heidelberg, 2012. Springer-Verlag.
Whitﬁeld Diﬃe and Martin E. Hellman. New directions in cryptography. IEEE Transactions
on Information Theory, 22(6):644–654, 1976.
Cynthia Dwork and Moni Naor. An eﬃcient existentially unforgeable signature scheme and
its applications.
In Proceedings of the 14th Annual International Cryptology Conference on
Advances in Cryptology, CRYPTO ’94, pages 234–246, London, UK, UK, 1994. Springer-Verlag.
Dario Fiore and Dominique Schr¨oder. Uniqueness is a diﬀerent story: Impossibility of veriﬁable
random functions from trapdoor permutations. In Proceedings of the 9th International Confer-
ence on Theory of Cryptography, TCC’12, pages 636–653, Berlin, Heidelberg, 2012. Springer-
Verlag.
[GGH+13a] Sanjam Garg, Craig Gentry, Shai Halevi, Mariana Raykova, Amit Sahai, and Brent Waters.
Candidate indistinguishability obfuscation and functional encryption for all circuits. Cryptology
ePrint Archive, Report 2013/451, 2013.
[GGH+13b] Sanjam Garg, Craig Gentry, Shai Halevi, Amit Sahai, and Brent Waters. Attribute-based
encryption for circuits from multilinear maps.
In Ran Canetti and JuanA. Garay, editors,
Advances in Cryptology CRYPTO 2013, volume 8043 of Lecture Notes in Computer Science,
pages 479–499. Springer Berlin Heidelberg, 2013.
[GGM86] Oded Goldreich, Shaﬁ Goldwasser, and Silvio Micali. How to construct random functions. J.
ACM, 33(4):792–807, August 1986.
17
[GGP10]
Rosario Gennaro, Craig Gentry, and Bryan Parno. Non-interactive veriﬁable computing: Out-
sourcing computation to untrusted workers. In Proceedings of the 30th Annual Conference on
Advances in Cryptology, CRYPTO’10, pages 465–482, Berlin, Heidelberg, 2010. Springer-Verlag.
[GMR88]
Shaﬁ Goldwasser, Silvio Micali, and Ronald L. Rivest. A digital signature scheme secure against
adaptive chosen-message attacks. SIAM J. Comput., 17(2):281–308, April 1988.
[Gol06]
[GVW13]
[HW09]
Oded Goldreich. Foundations of Cryptography: Volume 1. Cambridge University Press, New
York, NY, USA, 2006.
Sergey Gorbunov, Vinod Vaikuntanathan, and Hoeteck Wee. Attribute-based encryption for
circuits. In Proceedings of the 45th annual ACM symposium on Symposium on theory of com-
puting, STOC ’13, pages 545–554, New York, NY, USA, 2013. ACM.
Susan Hohenberger and Brent Waters. Short and stateless signatures from the RSA assumption.
In Shai Halevi, editor, Advances in Cryptology - CRYPTO 2009, volume 5677 of Lecture Notes
in Computer Science, pages 654–670. Springer Berlin Heidelberg, 2009.
[Knu81]
Donald E. Knuth. The Art of Computer Programming, Volume 2 (2nd Ed.): Seminumerical
Algorithms. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 1981.
[KPTZ13] Aggelos Kiayias, Stavros Papadopoulos, Nikos Triandopoulos, and Thomas Zacharias. Dele-
gatable pseudorandom functions and applications. In Proceedings of the 2013 ACM SIGSAC
Conference on Computer &#38; Communications Security, CCS ’13, pages 669–684, New York,
NY, USA, 2013. ACM.
[KR00]
[LW12]