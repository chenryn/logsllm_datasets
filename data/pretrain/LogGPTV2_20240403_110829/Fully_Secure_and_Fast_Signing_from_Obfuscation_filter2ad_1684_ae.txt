# Analysis and Comparison of Signature Schemes for 128-bit Security

## 6.1 Cost Analysis

Let \( g_D \) denote the cost of a length-doubling pseudorandom generator (PRG), and \( g_T \) the cost of a length-tripling PRG. We assume that the messages to be signed are \( l \)-bits long.

### Sahai-Waters [SW14] Scheme
This scheme makes a single call to the puncturable PRF on an \( l \)-bit message, which traverses the GGM tree according to the message bits, requiring \( l \) invocations of the length-doubling PRG. The total cost is therefore \( g_D \cdot l \).

### Adaptively Secure Scheme
Our adaptively secure scheme calls the fixed-length puncturable PRF once on each of \( l \) inputs, where each input is \( \lambda + \lfloor \log_2 l \rfloor + 1 \) bits. Each input has the same \( \lambda \)-bit suffix, differing only in the remaining bits. Therefore, the GGM tree can be traversed to a depth of \( \lambda \), before a depth-first search is performed to an additional \( \lfloor \log_2 l \rfloor + 1 \) depth. Thus, \( \lambda + 2l - 1 \) calls are made to the length-doubling PRG. Additionally, the scheme evaluates the variable-length puncturable PRF once on a \( \lambda \)-bit input, outputting pipelined evaluations on each prefix. This requires \( \lambda \) calls to the length-tripling PRG. The total cost is therefore \( g_D \cdot (\lambda + 2l - 1) + g_T \cdot \lambda \).

## 6.2 Comparison of Signature Computation for 128-bit Security

To achieve a security level of 128 bits, we consider signatures on 256-bit messages. In practice, such messages are produced by applying a collision-resistant hash function, but this cost is disregarded here. For our analysis, we considered several candidates for the PRG, including SHA-256, ChaCha stream cipher, RC5 block cipher, and AES-256 (both software and hardware implementations). We compare these against the cost of elliptic curve DSA (EC-DSA) signatures.

All primitives were implemented using OpenSSL v1.0.1, except for the ChaCha stream cipher, which uses a C implementation from [Cha14]. The AES hardware implementation is based on the Intel AES-NI instruction set, available via the EVP wrapper of the OpenSSL library. All timings were performed on a quad-core Intel Xeon E3-1270 v2 workstation with 16 GB RAM, clocked at 3.50 GHz.

### Primitives
- **SHA-256**: The SHA-256 compression function maps 512 bits to 256 bits.
- **ChaCha**: The ChaCha stream cipher is seeded with a 256-bit key and a 64-bit IV, generating 512-bit pseudorandom bits per update operation.
- **AES (software only)**: The AES-256 block cipher is seeded with a 256-bit key and a 64-bit IV, operating on 128-bit blocks.
- **AES (hardware accelerated)**: The AES-256 block cipher is seeded with a 256-bit key and a 64-bit IV, operating on 128-bit blocks.
- **RC5**: The RC5 block cipher has a variable key/block size. The default implementation uses a 128-bit key on 128-bit blocks.

### RSA and EC-DSA
- **RSA**: The RSA algorithm (PKCS #1 v2.0) generates signatures on a 3072-bit modulus. The cost is 3400 µs.
- **EC-DSA**: The elliptic curve DSA algorithm generates signatures on a 256-bit curve. The cost is 348 µs.

### Length-doubling PRG
- **SHA-256**: The input is zero-padded to 512 bits, and the SHA-256 compression function is applied. The cost is 0.52 µs.
- **ChaCha**: The input is zero-padded to 256 bits. The first 256 bits of the 512 pseudorandom bits produced by an update operation are extracted and XORed with the input. The seeding cost is 0.03 µs, and the amortized invocation cost is 0.18 µs.
- **AES (software only)**: The input is extended to 256 bits, and the AES cipher is applied in CTR mode. The seeding cost is 0.17 µs, and the invocation cost is 0.28 µs.
- **AES (hardware accelerated)**: The input is extended to 256 bits, and the AES cipher is applied in CTR mode. The seeding cost is 0.16 µs, and the invocation cost is 0.08 µs.
- **RC5**: The input is extended to 256 bits, and the RC5 cipher is applied in CTR mode. The seeding cost is 1.11 µs, and the invocation cost is 0.36 µs.

### Length-tripling PRG
- **SHA-256**: The input is extended to 1024 bits, and the SHA-256 compression function is applied on each 512-bit block, extracting the first 384 bits of the output. The cost is 1.04 µs.
- **ChaCha**: The input is zero-padded to 384 bits. The first 384 bits of the 512 pseudorandom bits produced by an update operation are extracted and XORed with the input. The seeding cost is 0.03 µs, and the amortized invocation cost is 0.27 µs.
- **AES (software only)**: The input is extended to 384 bits, and the AES cipher is applied in CTR mode. The seeding cost is 0.17 µs, and the invocation cost is 0.42 µs.
- **AES (hardware accelerated)**: The input is extended to 384 bits, and the AES cipher is applied in CTR mode. The seeding cost is 0.16 µs, and the invocation cost is 0.12 µs.
- **RC5**: The input is extended to 384 bits, and the RC5 cipher is applied in CTR mode. The seeding cost is 1.11 µs, and the invocation cost is 0.54 µs.

### Table of Signature Costs
| PRG           | [SW14] (µs) | Adapt. Scheme (µs) | RSA (µs) | EC-DSA (µs) |
|---------------|-------------|--------------------|----------|-------------|
| SHA-256       | 47          | 162                | 3400     | 348         |
| ChaCha        | 133         | 465                | 3400     | 348         |
| AES (software)| 23          | 81                 | 3400     | 348         |
| AES (hardware)| 10          | 36                 | 3400     | 348         |
| RC5           | 36          | 125                | 3400     | 348         |

### Optimizations
Exploiting the stream property of ChaCha and the CTR mode of operation for the block ciphers allows for efficiency gains. In a call to the fixed-domain puncturable PRF, only one output block needs to be computed at each level of the GGM tree, halving the invocation cost of the length-doubling PRG. Similarly, in a call to the variable-domain puncturable PRF, only two out of three output blocks need to be computed at each level of the modified GGM tree, reducing the invocation cost of the length-tripling PRG by a factor of \( \frac{2}{3} \).

### Summary
Our measurements show that signing in the Sahai-Waters scheme is significantly faster than EC-DSA for all PRG candidates. Using AES (software) or ChaCha-based solutions, it is around ten to fifteen times faster. Our adaptively secure scheme adds an overhead of about 2.5 relative to the selectively secure Sahai-Waters scheme. Finally, our scheme is conducive to leveraging parallelism, as described in Appendix A.

## Acknowledgements
We thank Amit Sahai for observing that a wider tree structure in tandem with a parallelizable PRG could be conducive to leveraging parallelism.

## References
[References section remains unchanged]

---

This version of the text is more structured and coherent, with clear headings and improved readability.