      wait(0) type(INVALID)  
Details of the structure being dumped may be found in src/include/storage/lock.h.  
This parameter is only available if the LOCK_DEBUG macro was defined when PostgreSQL was compiled.  
```  
编译时需要定义LOCK_DEBUG宏, 默认未定义, 修改如下文件, 解除/* #define LOCK_DEBUG */的注释.  
src/include/pg_config_manual.h  
```  
/*  
 * Enable debugging print statements for lock-related operations.  
 */  
#define LOCK_DEBUG  
```  
或者定义在src/Makefile.custom中 :   
```  
pgdev@db-172-16-3-150-> cat Makefile.custom   
CFLAGS+=-DLOCK_DEBUG  
CFLAGS+=-DBTREE_BUILD_STATS  
CFLAGS+=-DWAL_DEBUG  
```  
10\. trace_lwlocks (boolean)  
```  
If on, emit information about lightweight lock usage.   
Lightweight locks are intended primarily to provide mutual exclusion of access to shared-memory data structures.  
This parameter is only available if the LOCK_DEBUG macro was defined when PostgreSQL was compiled.  
```  
同上编译时需要定义LOCK_DEBUG宏, 默认未定义.  
11\. trace_userlocks (boolean)  
```  
If on, emit information about user lock usage. Output is the same as for trace_locks, only for advisory locks.  
This parameter is only available if the LOCK_DEBUG macro was defined when PostgreSQL was compiled.  
```  
同上编译时需要定义LOCK_DEBUG宏, 默认未定义.  
12\. trace_lock_oidmin (integer)  
```  
If set, do not trace locks for tables below this OID. (use to avoid output on system tables)  
This parameter is only available if the LOCK_DEBUG macro was defined when PostgreSQL was compiled.  
```  
13\. trace_lock_table (integer)  
```  
Unconditionally trace locks on this table (OID).  
This parameter is only available if the LOCK_DEBUG macro was defined when PostgreSQL was compiled.  
```  
同上编译时需要定义LOCK_DEBUG宏, 默认未定义.  
14\. debug_deadlocks (boolean)  
```  
If set, dumps information about all current locks when a deadlock timeout occurs.  
This parameter is only available if the LOCK_DEBUG macro was defined when PostgreSQL was compiled.  
```  
同上编译时需要定义LOCK_DEBUG宏, 默认未定义.  
15\. log_btree_build_stats (boolean)  
```  
If set, logs system resource usage statistics (memory and CPU) on various B-tree operations.  
This parameter is only available if the BTREE_BUILD_STATS macro was defined when PostgreSQL was compiled.  
```  
编译时需要定义BTREE_BUILD_STATS宏, 默认未定义.  
这个可以定义在src/Makefile.custom中 :   
```  
pgdev@db-172-16-3-150-> cat Makefile.custom   
CFLAGS+=-DLOCK_DEBUG  
CFLAGS+=-DBTREE_BUILD_STATS  
CFLAGS+=-DWAL_DEBUG  
```  
使用如下 :   
```  
digoal=# set log_btree_build_stats =on;  
SET  
```  
16\. wal_debug (boolean)  
```  
If on, emit WAL-related debugging output. This parameter is only available if the WAL_DEBUG macro was defined when PostgreSQL was compiled.  
```  
编译时需要定义WAL_DEBUG宏, 默认未定义, 修改如下文件, 解除/* #define WAL_DEBUG */的注释.  
src/include/pg_config_manual.h  
```  
/*  
 * Enable debugging print statements for WAL-related operations; see  
 * also the wal_debug GUC var.  
 */  
#define WAL_DEBUG  
```  
或者定义在src/Makefile.custom中 :   
```  
pgdev@db-172-16-3-150-> cat Makefile.custom   
CFLAGS+=-DLOCK_DEBUG  
CFLAGS+=-DBTREE_BUILD_STATS  
CFLAGS+=-DWAL_DEBUG  
```  
17\. zero_damaged_pages (boolean)  
```  
Detection of a damaged page header normally causes PostgreSQL to report an error, aborting the current transaction.   
Setting zero_damaged_pages to on causes the system to instead report a warning, zero out the damaged page in memory, and continue processing.   
This behavior will destroy data, namely all the rows on the damaged page.   
However, it does allow you to get past the error and retrieve rows from any undamaged pages that might be present in the table.   
It is useful for recovering data if corruption has occurred due to a hardware or software error.   
You should generally not set this on until you have given up hope of recovering data from the damaged pages of a table.   
Zeroed-out pages are not forced to disk so it is recommended to recreate the table or the index before turning this parameter off again.   
The default setting is off, and it can only be changed by a superuser.  
```  
在读取磁盘中的数据块信息时, 如果遇到头信息错误的块, 默认情况下将报错.  
打开这个参数后, 这些块将以0输出, 跳过从磁盘读取.   
因为PostgreSQL的row信息不会跨数据块存储, 所以使用zero_damaged_pages后, 即使有些数据块不能正常使用, 也能取到剩余的数据。  
索引的错误直接重建索引即可.  
## 编译举例  
```  
pgdev@db-172-16-3-150-> cd postgresql-9.3devel/  
pgdev@db-172-16-3-150-> cd src/  
pgdev@db-172-16-3-150-> vi Makefile.custom  
CFLAGS+=-DLOCK_DEBUG  
CFLAGS+=-DBTREE_BUILD_STATS  
CFLAGS+=-DWAL_DEBUG  
su - root  
pgdev@db-172-16-3-150-> cd postgresql-9.3devel/  
./configure --prefix=/home/pgdev/pgsql9.3 --with-pgport=9300 --with-perl --with-python --with-tcl --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --enable-cassert --with-wal-blocksize=16 --enable-debug && gmake world  
gmake install-world  
```  
## 注意  
1\. 跟踪和debug的参数, 如果要在当前会话看到效果, 一般建议修改以下 :   
VERBOSITY verbose 用于输出代码位置.  
```  
digoal=# set client_min_messages=DEBUG1; -- (DEBUG1直到DEBUG5)  
SET  
digoal=# \set VERBOSITY verbose  
```  
## 参考  
1\. http://www.postgresql.org/docs/9.2/static/runtime-config-developer.html  
2\. http://wiki.postgresql.org/wiki/Developer_FAQ  
3\. src/Makefile.global  
```  
##########################################################################  
#  
# Customization  
#  
# This includes your local customizations if Makefile.custom exists  
# in the source directory.  This file doesn't exist in the original  
# distribution so that it doesn't get overwritten when you upgrade.  
#  
# NOTE:  Makefile.custom is from the pre-Autoconf days of PostgreSQL.  
# You are liable to shoot yourself in the foot if you use it without  
# knowing exactly what you're doing.  The preferred (and more  
# reliable) method is to communicate what you want to do to the  
# configure script, and leave the makefiles alone.  
-include $(top_srcdir)/src/Makefile.custom  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")