algebraic structure of Schnorr/ECDSA signatures.
Failed Attempts. We illustrate the pitfalls of extending this
approach with the case of BLS signatures, where the signatures
are unique for a given message under a given key. In this
case, two colluding intermediate users Pi and Pi+1 can always
collude to generate the one and only valid σi on tx pay,i. This
means Pi and Pi+1 can release the lock at any time and
effectively steal v coins from P1. Similar problems persist
for non-unique signature where there is no way for a third
party (in our case the sender) to meaningfully and consistently
inject some randomness in the signing process to make the
signatures partial and at the same time veriﬁable.
One could think of setting up the locks backwards (starting
from Pn until P2) thereby preventing colluding users from
initiating the release phase like above. However, such a
backwards lock setup strategy suffers from a different issue:
Assume that locks up to the i-th one have been setup starting
from the n-th lock. If user Pn−1 and Pn collude and initiate
a release phase, the cascade follows until the i-th lock which
results in party Pi paying Pi+1 via tx pay,i. If the sender P1
aborts the lock phase now, an honest intermediate Pi loses v
coins and has effectively paid the receiver Pn.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
938
A Fairness Problem. In general, the source of difﬁculty in
designing PCNs seems to be rooted in enforcing fairness (a
weaker form of guaranteed output delivery) in the locking
protocol: We want to ensure that either all parties P1, . . . , Pn
learn a valid signature on the corresponding transaction, or
none does. This makes it especially tricky to design general
purpose solution for this problem, as fairness is notoriously
difﬁcult to achieve. Even using powerful cryptographic tools,
such as general-purpose multi-party computation (MPC), does
not seem to trivialize the problem since fairness for MPC is,
in general, impossible to achieve [27]. The aim of this work is
to evade this fairness barrier and to construct a PCN protocol
that is compatible with any signature scheme.
B. Our Contribution
The contributions of this work are summarized as follows.
Generic Solution. We construct the ﬁrst PCN protocol (Sec-
tion V-B) that is compatible with any signature scheme. The
signature scheme shall satisfy the notion of strong Existential
Unforgeability under Chosen Message Attacks (sEUF-CMA),
which is the de-facto deﬁnition of security for digital signatures.
Our scheme does not assume any scripting language for the
underlying blockchain, besides the ability to verify a signature
and the timestamp of a transaction. This enables, in principle,
interoperable payments across chains with any signature scheme
(unique, aggregatable, post-quantum secure, etc.). Our PCN
protocol also guarantees on-chain privacy for the users in the
payment path of the PCN, that is on par with the state of the art
proposals [2], [3]. To achieve this, we introduce and construct
lockable signatures (Section IV), a new cryptographic tool
which may be independent interest.
We wish to clarify that we view our generic protocol as
an initial feasibility result and it may not be efﬁcient enough
to be deployed in practice, due to the high costs associated
with the cryptographic machinery that are used. Apart from the
computational overhead, the price to pay for such a generality is
that of a slight increase in the number of on-chain transactions
per PC. Speciﬁcally, in the worst case, parties involved in
a payment in our PCN need to post 2 transactions on the
chain to close their channels, instead of 1 as in prior works.
Nevertheless, we believe that our approach sheds light on the
necessary assumptions needed to construct PCNs and can serve
as the blueprint to design efﬁcient protocols speciﬁc to many
signature schemes.
Efﬁcient Protocol for BLS. Following the blueprint of our
generic protocol, we construct the ﬁrst practically efﬁcient
PCN protocol fully compatible with the BLS signature scheme
(Section V-C), that has unique and aggregatable signatures.
Additionally, our BLS-based protocol also inherits the security
and privacy properties of our generic protocol. Prior to our
work, supporting PCNs for BLS signatures required complex
scripts like HTLCs whose disadvantages were discussed above.
Our protocol makes only a handful of calls to the basic
BLS algorithms, and does not require any heavy cryptographic
machinery. Our efﬁciency analysis (Section VI) shows that the
cost incurred by PCN users is minimal and the protocol can
be run on today’s low-end devices.
C. Related Work
As off-chain scalability solutions, Payment Channels and
Payment Channel Networks [1]–[4] have been proposed and
extensively studied. Typical proposals [1], [2] use special scripts
like HTLCs, that let a user get paid if he produces a pre-
image of a certain hash value before a speciﬁc time (payment
expiry time). While these protocols are also “universal” (i.e.
are compatible with any signature scheme), they fall short
in achieving the properties of scriptless scripts, due to their
reliance on special scripts and the syntactic difference between
standard an PCN transactions. Malavolta et al. [3] propose a
PCN protocol that does not rely on HTLC and offers better
on-chain privacy using a new tool called Anonymous Multi
Hop Locks (AMHL). However, their protocol is tailored for
transaction schemes that use Schnorr and ECDSA signatures.
Similar techniques were used by Esgin, Esroy and Erkin [13]
for a speciﬁc lattice based signature scheme, which is a variant
of [21]. Egger, Moreno-Sanchez and Maffei [4] propose a PCN
protocol compatible with a wide-variety of network topologies.
Unfortunately, they lack on-chain privacy of the parties involved
and also have increased number of transactions that go on-chain
per party in the worst case. As a result, in their proposal it is
easy to differentiate between PCN and non-PCN transactions,
which heavily affects the fungibility of the coins. Bolt [28] is
a payment channel protocol specially tailored for Zcash [11]
which uses zk-SNARKs [29]–[31]. A generalisation of PC with
complex conditional payments is a state channel [32]–[34] that
requires highly expressive scripting functionalities from the
underlying blockchain (like Ethereum) and are therefore not
scriptless. Other works in these settings study the notion of
non-source routing, where the payment is routed locally by each
intermediate node [35]. In contrast, our approach is inherently
tied to source routing.
Comparison with Adaptor Signatures. A related (stronger)
notion to lockable signatures is that of adaptor signatures [36].
Similarly to lockable signatures, adaptor signatures allow one
to compute a pre-signature (the analogue of the lock) with
respect to some NP-relation, and the witness of such a relation
can be then used to recover the full (valid) signature. However,
the crucial difference is that the pre-signature can be computed
without knowing the witness of the given relation, which makes
adaptor signatures a more versatile primitive then lockable
signatures. On the ﬂip side, adaptor signatures do not seem to
be easily realizable for signature schemes without algebraic
structure.
In summary, none of these proposals can simultaneously
(i) generically handle all signature schemes without using
special scripts, (ii) guarantee on-chain privacy and (iii) improve
fungibility of the coins, as they either rely on speciﬁc signature
schemes or leak information on-chain about the parties and
the payments made in the PCN.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
939
Fig. 1. Payment Setup phase of our PCN protocol. Transaction tx Setup,i
transfers (all or part of) the funds from 2-PCi to 3-PCi. While 2-PCi
needs Pi and Pi+1 to sign, 3-PCi requires additionally a special party
P0 to sign. Channel 3-PCi expires T times units earlier than 2-PCi,
meaning that after time ti − T , the funds from 3-PCi are essentially
transferred back to 2-PCi (which is in the control of Pi and Pi+1).
I I . T E C H N I C A L O V E RV I E W
In this section we give a brief overview of the techniques we
employ to construct a generic scriptless-script PCN protocol
compatible with any signature scheme. At the core of our
solution we have two main techniques: A local 3-party channel
(at the transaction layer) and lockable signatures, a new cryp-
tographic abstraction that we introduce (at the cryptographic
layer). We detail each of our technique individually ﬁrst, then
describe how they are put together in our PCN protocol. Finally,
we discuss how to construct a highly efﬁcient protocol for
the case of BLS signatures, bypassing the need for heavy
cryptographic machinery.
A. Transaction Layer: Local 3-Party Channel
Recall that the fairness problem arose in the lock phase
because of colluding neighbours Pi and Pi+1 in a payment
path (P1, . . . , Pn). Since Pi and Pi+1 share a payment channel,
collectively they possess all the information necessary to sign
any transaction. The way prior works [3] bypassed this obstacle,
was to allow the sender P1 to contribute to the randomness
of the lock ¯σi between Pi and Pi+1. The lock is carefully set
such that the input of the sender is hard to compute given the
lock, and the valid signature σi can only be recovered with the
help of the sender. We would like to mimic this approach but
by only making generic use of the signature scheme, without
relying on any particular feature of the signature scheme.
Local Channel. Our idea is to let parties locally convert their
2-party payment channels into a 3-party payment channel. As
shown in Figure 1, parties Pi and Pi+1 share a channel denoted
by 2-PCi (a public key shared between Pi and Pi+1), with a
capacity of v coins and channel expiry time ti. The sender in
this case plays the role of a special party P0 who, along with
Pi and Pi+1, generates a 3-party payment channel 3-PCi (a
public key shared between P0, Pi and Pi+1). To do this, Parties
Pi and Pi+1 generate a special setup transaction tx Setup,i that
sends v(cid:48) ≤ v coins from 2-PCi to 3-PCi, while the extra
amount v − v(cid:48) is sent to some channel between Pi and Pi+1
and is omitted for clarity. Transaction tx Setup,i expires at ti− T
(where T is a system parameter) and once tx Setup,i expires,
v(cid:48) coins are transferred back to 2-PCi, the 2-party channel
between Pi and Pi+1.
Notice that, to spend from 3-PCi, all of P0, Pi and Pi+1
have to agree and generate a signature together on the spending
transaction. This way the sender (P0) has an input on spending
from 3-PCi that is hard to compute by a coalition of Pi and
Pi+1. We stress that tx Setup,i is only kept locally by the parties
P0, Pi and Pi+1 and not posted on the chain, hence the name
local 3-party channel. An added advantage of this approach is
that intermediate parties need not lock all the (v) coins from
their payment channel for the purposes of PCN payments. They
can decide how many coins (v(cid:48) ≤ v) they want to lock for
payments in the form of a 3-party channel with the sender
P0. This way the remaining coins v − v(cid:48) are available for the
intermediate parties which they can use in any way they want.
The notion of a local 3-party channel is reminiscent of the
concept of virtual channels [37], however their purposes are very
different: A virtual channel allows two parties to exchange
coins via a (trustless) intermediary without communicating
with it for every payment. On the other hand, a local 3-party
channel requires (and enforces) the active interaction of all 3
participants.
Preventing Denial of Service Attacks. A malicious P0 (the
sender) could try a denial of service (DoS) attack, by refusing
to spend from 3-PCi, and locking Pi and Pi+1’s channel funds.
To prevent this, 3-PCi is set to expire before 2-PCi expires. So,
if P0 goes ofﬂine and 3-PCi expires at ti − T , the entire fund
of v coins is still available in 2-PCi up to time T , meaning that
parties Pi and Pi+1 can make payments using 2-PCi, before
2-PCi itself expires at time ti.
On-Chain Privacy. We remark that the creation of these
local channels happens completely off-chain and essentially
consists of the joint generation of a public key. On-chain
transactions from and to such a (shared) public key are identical
to any other payment of any other public key. Therefore,
our PCN transactions are indistinguishable from other regular
transactions on-chain.
B. Cryptographic Layer: Lockable Signatures
The one remaining piece of the puzzle for constructing a
generic PCN is the functionality of party Pi being able to
obtain a valid signature on a transaction, provided party Pi+1
releases a valid signature on another transaction. To capture this
functionality, we introduce the notion of lockable signatures, a
new cryptographic abstraction. Intuitively, lockable signatures
enable a user to generate a lock (cid:96)k using the Lock algorithm,
that hides a signature σ (the locked signature) with the help
of another signature ˜σ (the locking signature). Here σ is a
signature on a message m signed using the secret key sk,
while ˜σ is a signature on a message ˜m signed using the secret
key ˜sk. Note that the locked and the locking signatures may
even be from different signature schemes.
In terms of security we want that the lock (cid:96)k is hiding, which
intuitively says that no information about the locked signature
σ is revealed via the lock (if ˜σ is not revealed). We also want
a guarantee that, given a correctly generated lock (cid:96)k and the
valid signature ˜σ on the message ˜m under the public key ˜pk
(whose corresponding secret key is ˜sk), one should be able to
run a efﬁcient Unlock procedure that outputs σ. We refer to
this security notion as unlockability.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
940
Fig. 2. PCN protocol status after the payment lock phase. Sender P1 plays the role of the special parties P0 and Pn+1. Transaction tx pay,i
spends from tx Setup,i (Figure 1). Transaction tx pay,n inside the dotted box is an arbitrary message known to parties P0, Pn+1 and Pn. The
expiry times are for payments tx pay,i, i ∈ [n − 1]. The lock (cid:96)kn := σn, in the dotted box is just a regular signature on tx pay,n.
contract is conditioned on the ﬁnalization of another (possibly
independent) contract.
C. Putting Things Together
i
We give a simple and generic construction for lockable
signatures, where the lock is set as (cid:96)k := σ ⊕ H(˜σ), where H
is a hash function and the Unlock procedure simply computes
σ := (cid:96)k ⊕H(˜σ). The hash function H is modelled as a random
oracle in the security analysis.
BLS-Based Lockable Signatures. We also present a BLS-
based construction, where we have the two signatures as σ ←
ΠBLS.Sign(sk , m) and ˜σ ← ΠBLS.Sign( ˜sk , ˜m), where sk , ˜sk
are two independent secret keys and m, ˜m are two different
messages. The lock is simply computed as the aggregate of
the two signatures, (cid:96)k := σ · ˜σ = ΠBLS.Agg(σ, ˜σ) leveraging
the well-known properties of the scheme [38]. The Unlock
procedure on input a signature ˜σ simply computes σ := (cid:96)k /˜σ.
It is well known that extracting aggregated signatures is hard
(if no individual aggregated signature is already known). For
our purposes, we will need a slightly stronger property: We
want that is should be hard to extract an individual signature
from a chain of aggregate signatures (σ0 · σ1, σ1 · σ2, . . . ).
We show that extracting an individual signature from such a
chain of aggregates, is as hard as solving the computational
Difﬁe-Hellman (CDH) problem.
The reason why we introduce this special-purpose construc-
tion for BLS is that it allows anyone to verify that the lock
is well-formed, by simply checking the validity of the BLS
aggregate signature. I.e., BLS lockable signatures have a built-in
veriﬁcation to ensure unlockability of (potentially malformed)
locks. This feature will greatly increase the practicality of our
BLS-based protocol.
Applications of Lockable Signatures. To build up some
intuition on how we are going to use lockable signatures for
our main result, we provide a toy example for the applicability
of this primitive. Consider the scenario where we want a
transaction tx 0 to take place only if another transaction tx 1
is posted on the blockchain. We can then generate a lock
(cid:96)k on σ0 (a valid signature for tx 0) conditioned on σ1 (a
valid signature for tx 1). Publishing (cid:96)k guarantees that anyone
can recover a valid signature on tx 0 only if tx 1 appears on
the blockchain (and not before that). This can be naturally
extended to more complex scenarios where the ﬁnalization of a
We now show how to construct a PCN protocol using the
above tools. Our payment protocol starts with a one-time setup
phase that is run by the parties P1, . . . , Pn, before the payment
lock phase. In this phase, the sender P1 plays the role of
a special party P0 and creates a local 3-party channel 3-PCi
(using tx Setup,i) with parties Pi and Pi+1 for i ∈ {1, . . . , n−1},
as shown in Figure 2. To do this, parties P0, Pi and Pi+1 run an
MPC protocol that computes a shared public key pk i and each
party receives shares of the secret key sk i, namely sk (0)
, sk (i)
i
and sk (i+1)
, respectively. Here the shared public key pk i is
set as the 3-party channel 3-PCi.
for i ∈ {2, . . . , n}, run a MPC protocol that computes
(cid:96)ki−1 := σi−1 ⊕ H(σi) ← Lock(sk i−1, tx pay,i−1, sk i, tx pay,i)
and is returned to party Pi. Here, we have:
In the payment lock phase, parties P0, Pi−1, Pi and Pi+1,
• The keys sk i−1 and sk i are the shared secret key between
(P0, Pi−1, Pi) and (P0, Pi, Pi+1), respectively, established dur-