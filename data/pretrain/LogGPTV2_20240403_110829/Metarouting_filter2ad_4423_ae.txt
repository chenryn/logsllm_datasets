### Route Classification and Algebraic Transformation

When a route is received from a customer, it is classified as a provider route. The algebra used here is not M, but we can transform it into an M-algebra by applying the `fm` operator, resulting in:

\[
\begin{array}{c|ccc}
\oplus & C & R & P \\
\hline
C & C & \varnothing & \varnothing \\
R & \varnothing & R & \varnothing \\
P & \varnothing & \varnothing & P \\
\end{array}
\]

This table is similar to the standard customer/peer/provider rules. For example, \( C \oplus R = \varnothing \) can be interpreted as: a customer cannot send one of its peer routes to a provider (or a provider cannot accept a customer’s peer routes). Our table is more general than the rules in [6, 25] because \( r \oplus R = R \) and not \(\varnothing\).

### Implementation and Generalization

Our relationships can be implemented on a per-prefix basis, as the labels in our algebra are conditional/sequential "programs" over the labels \(\{c, r, p\}\) using the `prog` operator. Using the generic operators of RAML, we can easily obtain results that are more general than those in [6, 25] for a model of BGP that captures more detail of the actual protocol.

In the context of defining the routing algebra for EBGP (Figure 5), we only need this to be M for the entire expression to be SM. This means we do not have to assume there are no customer/provider cycles in the relationship graph, as done in [6]. Such cycles, although unusual, do not pose problems for convergence.

### Lifting to Monotonicity

Instead of forcing monotonicity, we can lift to monotonicity. Table 5 presents the \(\oplus\) table for `lm(2, lp(3))`, with labels and signatures renamed. This is similar to the scheme in [9] for modeling BGP with backup routes. That model required extensive correctness proofs, whereas we simply apply a generic operator. Our resulting algebra is more general and includes useful cases that are eliminated in [9].

For example, the rule \( c \oplus (1, P) = (2, C) \) means that a provider can take a route from a customer that the customer is getting from one of its providers, creating a "valley" in the AS path. The level number is increased, making the route less preferred. However, this could represent a potential revenue source for the customer or a viable emergency routing plan. This type of arrangement is difficult to implement in BGP today. If such transit is not appropriate in a given AS, filters can be applied to prevent it, using the `prog` operator for programmable labels.

### Combining Approaches

There is no reason to force a choice between these options; they can be combined into a locpref replacement:

\[
\text{class} : \text{fm(lp(3))} \quad \text{lclass} : \text{lm(k, lp(3))}
\]

This allows operators to combine these approaches as they see fit.

### Modeling IBGP

Due to space constraints, we do not model IBGP in this paper. However, the scoped product operator provides more structure than the current BGP design. In a RAML model of BGP, all IBGP elements reside in the second component of the scoped product and do not "leak into" the first component. Contrast this with the current BGP design, where elements like the ASPATH for confederations are hacked into the EBGP component, even though they are part of IBGP. With the scoped product, we would naturally define a new attribute for BGP confederation ASPATHs, and the length of this path could then be used in the EBGP route selection process. As with the MyIGP example, a new community set needs to be defined for IBGP, which is different from the EBGP community attribute, and this internal community set would automatically vanish at AS boundaries. This aligns closely with common practice among network operators, who make a sharp distinction between internal and external community values.

### Label Modalities

So far, the labels have been abstract objects associated with arcs between nodes. In real protocols, it matters how a label is attached to the network model, especially when two routers share an adjacency but reside in different administrative domains, requiring cooperation to construct labels.

One way to accomplish this using sequential labels is illustrated in Figure 6. Here, nodes N and M are in different administrative domains. We expect the label on the link from N to M to be constructed by both N and M, or more precisely, by information from the configuration of N and M. If \(\lambda_N\) can be constructed from information at N, and \(\lambda_M\) from information at M, then \((\lambda_N; \lambda_M) \oplus \sigma = \lambda_N \oplus (\lambda_M \oplus \sigma)\) represents the composition of these policies. \(\lambda_N\) represents an import policy at N, and \(\lambda_M\) represents an export policy at M.

### Four Major Label Modalities

Figure 7 illustrates the four major label modalities:
- **Local**: The receiver of the route attaches the label.
- **Peer**: The sender of the route attaches the label.
- **Local Nodal**: The label is local, but the same value must be used in all sessions.
- **Peer Nodal**: The sender uses the same AS number for all of its BGP sessions.

Other modalities include the constant modality (always use a fixed label) and the default modality (which label to use when one is not supplied by configuration).

### Discussion and Open Problems

We are currently implementing a metarouting prototype in the XORP system. Two distinct approaches are being implemented:
1. Hijacking BGP with additional (optional) attributes for updates, which are rich enough to describe routes for any routing algebras defined in RAML.
2. Allowing users to select not only the routing policy language but also mechanisms from a collection of link-state and path-vector implementations, binding these to routing adjacencies.

The routing algebra metalanguage (RAML) presented does not represent the only possible choice of base algebras and algebraic operators. Research questions include finding a natural set of base algebras and operators, and exploring RAML operators that preserve isotonicity properties required for generalized Dijkstra's algorithm. A deeper understanding of the semantics of routing policy metalanguages is needed to explore these and related questions.

### Abstraction and Lexicographic Preference

The RAML should include a means of abstraction over algebras with specified monotonicity properties. For example, BGP's policy component could be specified as:

\[
\text{BGPA(B : SM)} = \text{EBGPA} \otimes \text{B},
\]

where B is a variable ranging over all SM routing algebras, allowing each network to instantiate BGP with a different IBGP.

We have used lexicographic preference on products, but other approaches may be useful. For instance, comparing the algebra `add(1, n) ⊗ width(m)` with EIGRP's (default) policy, both use signatures of the form \(\langle d, b \rangle\), where \(d\) represents distance and \(b\) represents bandwidth, and \(\oplus\) is defined as:

\[
\langle d_1, b_1 \rangle \oplus \langle d_2, b_2 \rangle = \langle d_1 + d_2, \min(b_1, b_2) \rangle
\]

However, our definition uses lexical ordering, while EIGRP computes a derived weight \(d + k/b\). If the first component \(d\) is strictly greater than zero, the algebra is SM; if \(d\) can be zero, the algebra is only M. Extending RAML with product signatures based on polynomial expressions (as with EIGRP) is a possibility, but finding the right combination of polynomial operators that lend themselves to automatic derivation of monotonicity preservation properties is challenging.

### Routing Security and Other Extensions

Routing security is another possible extension to RAML. Security-related extensions to BGP, such as SBGP, are needed but are being integrated into monolithic protocol implementations with little reuse between protocols. Adding generic security-related operators to RAML in a way that guarantees certain security properties for routing is a potential area of research.

Algebraic frameworks other than [25] may provide foundations for other RAML-like languages. Left-associative algebras may be useful in modeling reservation-based and source-based routing protocols.

### Protocol-Level Operators

Applying RAML operators at the protocol level is necessary to model some protocols and protocol interactions. For example, if \( \text{RPA} = \langle A, MA \rangle \) and \( \text{RPB} = \langle B, MB \rangle \) are two routing protocols, the disjunction operator \(\vee\) extends naturally to the protocol level:

\[
\langle A, MA \rangle \vee \langle B, MB \rangle = \langle A \vee B, MA?MB \rangle
\]

The \(\text{?}\) suggests a consistent way to combine mechanisms. This combination can be thought of as defining a single protocol. To treat this in full detail, protocol instances, the FIB, and the FIB manager must be included in the formal model. The preference relation at the FIB-manager level models the administrative distance between routing protocols.

### Acknowledgements

Initial work for this paper was done while the first author was with Intel Research, and we thank Derek McAuley and David Tennenhouse for their support. We also thank Andrea Bittau, Steve Bellovin, Bob Briscoe, Randy Bush, Chikin (Sid) Chau, Jon Crowcroft, Nick Feamster, Wenjun Hu, Richard Mortier, Kengo Nagahashi, Matthew Roughan, Peter Sewell, Bruce Shepherd, Ben Strulo, Nigel Walker, and Gordon Wilfong for helpful comments on early drafts.

### References

[References listed as provided in the original text.]