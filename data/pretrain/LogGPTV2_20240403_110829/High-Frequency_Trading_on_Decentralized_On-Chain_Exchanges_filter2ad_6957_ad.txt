until block 9M (388 days of data). A gas price of 0 ETH
might indicate that the transaction belonged to the miner.
We ﬁnd that a transaction has an average gas price of
17.2 ± 10520.1 GWei. The median gas price is 10 Gwei
and the most frequently used gas price is 20 Gwei with
23, 759, 990 transactions (12.5%).
VII. Multiple Adversaries
Our prior analysis only considers the case of a sin-
gle adversary. In this section, we analyze the possible
implications of multiple attackers on the feasibility and
proﬁtability of sandwich attacks through simulations.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
437
Transaction Ordering Strategy
Miner Address
0xea674fdde714fd979de3edf0f56aa9716b898ec8
0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c
0x829bd824b016326a401d083b33d092293333a830
0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5
0xb2930b35844a230f00e51431acae96fe543a0347
0x04668ec2f57cc15c381b461b9fedab5d451c8f7f
0x2a65aca4d5fc5b5c859090a6c34d164135398226
0x2a5994b501e6a560e727b6c2de5d856396aadd38
0x005e288d713a5fb3d7c9cf1b43810a98688c7223
0x35f61dfb08ada13eba64bf156b80df3d5b3a738d
Empty Gas Price
400,546
423,103
275,013
210,061
110,079
42,405
25,569
31,543
27,926
28,214
9,434
16,329
7,727
259
0
7,130
1,021
1,170
1,097
435
Parity Default Unknown Total Blocks
604,662
568,683
284,660
269,830
129,475
49,792
37,733
32,718
29,053
28,717
171,428
93,903
1,900
59,141
19,271
257
10,892
5
30
68
23,254
35,348
20
369
125
0
251
0
0
0
TABLE IV: Classiﬁcation of the top 10 miners in Ethereum, in terms of the number of blocks mined between blocks
6, 627, 917 until 9M (388 days). We see that miners seem to switch among strategies. Moreover, 4 out of the ten miners
always seem to follow a known strategy. They either order their transactions by gas price or by using Parity’s default
strategy. We also note that the address 0xb293..0347 is the sole miner who did not mine any empty blocks.
Strategy
Empty Block
Order per Gas Price
Order per Parity Default
Unknown Ordering
Total
Number of Blocks
55, 545
1, 862, 800
384, 150
69, 589
2, 372, 084
Ratio
0.0234
0.7853
0.1620
0.0293
1.0000
TABLE V: Miner transaction ordering methodology be-
tween blocks 6, 627, 917 and 9M (388 days).
A. Extended Threat Model
We extend our threat model from Section III, to account
for additional attackers. For simplicity, we assume that all
adversaries have access to the same ﬁnancial resources,
internet connection, latency, and computational power.
We identify the following key parameters that impact the
outcome of the simulated game:
Number of Attackers: Intuitively, the more adversaries
are attacking a victim transaction TV , the harder this
endeavor becomes for each attacker. In the following,
we consider 2, 5, and 10 adversaries, which simulta-
neously attack a TV .
Attacker Strategy: Previous work [21] suggests two
transaction fee bidding strategies, namely an adaptive
(reactive counter-bidding) and a non-adaptive (blind
raising) adversarial strategy. We assume that all ad-
versaries follow the reactive counter-bidding strategy,
i.e. an adversary emits a higher transaction fee bid
once the adversary observes a competing transaction.
This strategy is not necessarily optimal, but it may
estimate a lower bound for the sandwich attack’s
front-running transaction cost.
We assume all adversaries are rational and attack with the
parameters determined by the strategy from Section V, i.e.
each adversary attempts to maximize its proﬁt by fully
exploiting the victim transaction’s allowed slippage.
For a two-player game, we show in Table VI, the
possible transaction permutations after the adversarial
transactions are mined. We show that the adversary who
manages to execute the ﬁrst front-running transaction
successfully “wins” the sandwich attack. This is because
the victim transaction fails if both A and O execute
the sandwich attack. If the other adversary is irrational
and insists to execute the attack (by e.g. disregarding
slippage protections), both adversaries lose, because both
adversarial front-running transactions fail (e.g. TA1 , TO1
, TV , TO2 , TA2 ).
B. Extended System Model
a) Network Layer: The speed at which an ad-
versarial transaction propagates within the blockchain
P2P network inﬂuences the number of reactive counter-
bids it receives and the time the transaction is mined.
Related works have extensively studied the asynchronous
nature of blockchain P2P propagation [24], [22], [29], [28].
The propagation is aﬀected by several factors, such as
the network topology, number of nodes, internet latency,
bandwidth, and network congestion, etc. In our work, we
assume that the adversary directly establishes a point-
to-point connection with the miner and the victim. Our
study thereby abstracts away the number of nodes in
the network, the network topology, intermediate devices
(replay nodes, routes, and switches) and TCP congestion
control. Equation 5 shows how we approximate transaction
propagation duration.
Propagation Duration = Transaction Size
Bandwidth +Latency (5)
To determine the distribution of transaction sizes, we
crawl raw transactions sent to the Uniswap DAI market
over 100, 000 consecutive blocks, starting from block 9M.
Our measurements suggest a mean transaction size of
426.27 ± 68.94 Bytes, which we use as parameters for
an assumed normal distribution of the adversarial and
victims’ transaction sizes. For the latency and bandwidth
distribution, we take the mean percentile statistics [37],
[28] and apply linear interpolation to estimate the under-
lying cumulative probability distribution (cf. Table VII).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
438
Transaction Execution Order (left to right) Winner
TA1 
TA1 
TO1 
TO1 
TO2 
TV 
TA2 
TV 
TV 
TA2 
TV  TO2 
TA2 
TO2 
TO2 
TA2 
TO1 
TO1 
TA1 
TA1 
O
O
A
A
Reward for Attacker A
Revenue − Fee(TA1) − Fee(TA2)
Revenue − Fee(TA1) − Fee(TA2)
−Fee(TA1) − Fee(TA2)
−Fee(TA1) − Fee(TA2)
Reward for Attacker O
−Fee(TO1) − Fee(TO2)
−Fee(TO1) − Fee(TO2)
Revenue − Fee(TO1) − Fee(TO2)
Revenue − Fee(TO1) − Fee(TO2)
TABLE VI: Adversarial payoﬀ for a two player game. Under the assumption that both players A and O are rational,
A “wins” the game if the front-running transaction TA1 is placed in front of TO1, regardless of the position of the
back-running transaction. A transaction that succeeds is denoted by , while a transaction that fails, is denoted by .
Pct % Latency
[28] Model
95.5
92
10
116
-
20
138
125
33
50
152
180
216
200
67
247
-
80
281
276
90
181
171
mean
std.
76
62
[37]
99
116
151
208
231
247
285
209
157
144.4
55.0
58.8
3.4
6.8
11.2
29.4
68.3
111.3
144.4
52.8
50.4
Provisioned Bandwidth
[28]
3.4
-
Model
11.2
29.4
68.3
-
TABLE VII: Latency and bandwidth statistics from our
model based on previous studies [37], [28].
b) Transaction Fees: The transaction gas price,
together with the degree of blockchain transaction conges-
tion (i.e. competing transactions that seek to be mined),
inﬂuences the pace at which a transaction is mined. In
our simulations, we sample the gas price of the victim
transaction from a normal distribution with a mean of
(8.76±61.18 GWei), measured at the Uniswap DAI market
from block 9M to 9.1M. We assume that the victim
pays a suﬃcient transaction fee for its transaction to be
mined in the next block. Empirical data suggests that
the Ethereum average block interval time is 13.5 ± 0.12
seconds [13]. Therefore, we sample the duration of the
victim’s transaction in the mempool from a uniform dis-
tribution between 0 to 30 seconds. When the network
is congested, transactions on Ethereum may stay in the
mempool for longer than 30 seconds, sometimes even tens
of minutes [13]. However, we avoid presenting our analysis
on longer pending duration, as our simulation results (cf.
Figure 11 and Figure 14) show that in the case of multiple
players, the adversarial transaction fee at 30 seconds is
likely to render the attack unproﬁtable.
c) Miner: We assume the miner order transactions
with descending gas prices to maximize their revenue (cf.
Section VI). Besides, the miners conﬁgure a price bump
percentage of 10% to replace an existing transaction from
the mempool. At the time of writing, Geth (used by 78.3%
of the clients) conﬁgures price bump percentage to 10%,
while Parity sets 12.5%.
C. Simulation Results
Figure 11 shows the expected proﬁt of an adversarial liq-
uidity taker (cf. Section IV) given 2, 5, and 10 adversaries,
on the Uniswap DAI market at block 9M. The slippage
of the victim transaction is ﬁxed at 0.5%. The minimum
proﬁtable victim input is 14.75 ETH (2, 197.30 USD).
We visualize the line where the expected revenue breaks
even with simulated transaction costs. The transaction
cost is calculated as the simulated gas price (cf. Figure 12)
times the total gas consumed by the adversarial transac-
tion. The gas consumption is randomly sampled from a
normal distribution with mean at 85, 488 ± 34, 782 (taken
from the Uniswap DAI market average gas consumption
from block 9M to 9.1M). We observe that the break-even
line grows exponentially until the victim transaction is
mined (which is in line with the assumption of a 10%
increase for each transaction price increase). We observe
that the more adversaries, the more competitive the attack
appears. For instance, our simulation suggests that the
sandwich attack is not proﬁtable after the victim transac-
tion remained pending on the P2P network for 27.7, 20.3,
16.3 seconds, given 2, 5 and 10 adversaries respectively,
when the victim V transacts 20 ETH for DAI. We refer
the interested reader to Figure 14 for a visualization of our
simulation when multiple providers attack a taker.
Our results suggest that having multiple attackers does,
in expectation, divide the total revenue among the adver-
saries, minus the transaction fee overhead. Speciﬁcally, we
ﬁnd that the presence of 2, 5 and 10 attackers respectively
reduce the expected proﬁtability of the attack by 51.0%,
81.4% and 91.5% (given the victim transacts 20 ETH to
DAI on Uniswap with a transaction pending on the P2P
layer for 10 seconds before being mined). Note that if the
blockchain is congested (i.e. TV remains pending for more
than 15 seconds), we observe that the break-even of the
attacker becomes harder to attain.
VIII. Related Work
Besides AMM DEX, other types of decentralised ex-
changes exist: limit order book based [5], [43], [39], auc-
tions [23], trusted hardware [12], payment channel [42].
Front-running, and high frequency trading is related to
the thoroughly studied problem of rushing adversaries to
double-spend not yet mined blockchain transactions [35].
Strategically placed and malicious blockchain network
nodes may control when and if miners receive transac-
tions, which can aﬀect the time at which a transaction
is executed within the blockchain [44],
[31].
[32],
[30],
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
439
(a) Two liquidity taker adversaries
(b) Five liquidity taker adversaries
(c) Ten liquidity taker adversaries
Fig. 11: Simulated sandwich attack by 2, 5 and 10 competing adversarial liquidity taker on a taker (Uniswap, block
9M, 0.3% fees, 0.5% unexpected slippage).
leverage modern technologies such as social media and
artiﬁcial intelligence. Such techniques may even be used
to trick HFT algorithms [9]. To counterbalance this inher-
ent trust, regulators conduct periodic and costly manual
audits of banks, brokers, and exchanges to unveil potential
misbehavior. This is a challenging task on DEX, given
weak identities, and missing regulations.
IX. Conclusion
In this paper, we have presented two versions of a sand-
wich attack, made possible by the deterministic nature
of an AMM DEX in combination with the time delay
inherent on on-chain exchanges. While the transparency
of DEXs is desirable, it can, however, put users assets
at a security risk and allow both liquidity providers and
liquidity takers to exploit unknowing traders through a