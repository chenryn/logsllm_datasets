title:Using Throughput-Centric Byzantine Broadcast to Tolerate Malicious
Majority in Blockchains
author:Ruomu Hou and
Haifeng Yu and
Prateek Saxena
7
1
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Using Throughput-Centric Byzantine Broadcast
to Tolerate Malicious Majority in Blockchains
Ruomu Hou
Haifeng Yu
Prateek Saxena
National University of Singapore
National University of Singapore
National University of Singapore
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Fault tolerance of a blockchain is often character-
ized by the fraction f of “adversarial power” that it can tolerate
in the system. Despite the fast progress in blockchain designs in
recent years, existing blockchain systems can still only tolerate f
below 0.5. Can practically usable blockchains tolerate a malicious
majority, i.e., f above 0.5?
This work presents a positive answer to this question. We ﬁrst
note that the well-known impossibility of byzantine consensus
for f above 0.5 does not carry over to blockchains. To tolerate
f above 0.5, we use byzantine broadcast, instead of byzantine
consensus, as the core of the blockchain. A major obstacle in
doing so, however, is that the resulting blockchain may have
extremely low throughput. To overcome this central technical
challenge, we propose a novel byzantine broadcast protocol
OVERLAYBB, that can tolerate f above 0.5 while achieving
good throughput. Using OVERLAYBB as the core, we present
the design, implementation, and evaluation of a novel Proof-of-
Stake blockchain called BCUBE. BCUBE can tolerate a malicious
majority, while achieving practically usable transaction through-
put and conﬁrmation latency in our experiments with 10000
nodes and under f = 0.7. To our knowledge, BCUBE is the ﬁrst
blockchain that can achieve such properties.
I. INTRODUCTION
Fault
tolerance is a property of central
importance in
modern distributed systems such as blockchains. Fault toler-
ance is often characterized by the fraction f of “adversarial
power” that a system can tolerate. Here the “adversarial
power” may correspond to i) malicious nodes in permissioned
blockchains, ii) adversarially-controlled computational power
in Proof-of-Work-based permissionless blockchains, or iii)
adversarially-controlled stake in Proof-of-Stake-based permis-
sionless blockchains. Bitcoin’s consensus protocol, invented
over a decade ago, can tolerate f below 1
2. While subsequent
blockchain systems (e.g., [1], [3], [7], [11], [16], [19], [21],
[33], [35]) have achieved signiﬁcantly better performance than
Bitcoin, all of them still can only tolerate f below 1
2, or
sometimes even lower. This is regardless of whether these
designs are for permissioned systems, or for permissionless
systems using Proof-of-Work/Proof-of-Stake.
There are growing desires, however, for blockchains to
tolerate f ≥ 1
2. For example, there have been double-spending
attacks on public blockchains, where malicious actors tem-
porarily control more than half of the adversarial power in
the network [12], [24], [27], [28]. Similarly,
it has been
highlighted that a few centralized miners control more than
half of the power in many Proof-of-Work and Proof-of-Stake
blockchains [20].
One reason why blockchains today cannot tolerate f ≥ 1
2 is
that they often build upon byzantine consensus [22]. Byzantine
consensus is a one-shot game — among other things,
it
requires that if honest nodes all have the same proposal for the
next block, then they must all decide on that block, instead of
on some adversarially-chosen block. Such requirement1 makes
it impossible to tolerate f ≥ 1
2. A blockchain, on the other
hand, is a continuous process where usually each block in
the distributed ledger is proposed by a random proposer. It
is acceptable for the block to be adversarially-chosen, if the
proposer happens to be malicious. Hence impossibility results
on byzantine consensus under f ≥ 1
2 do not necessarily carry
over to blockchains.
Byzantine broadcast. In our pursuit of blockchains that can
tolerate f ≥ 1
2, we have revisited various classical primitives.
We eventually focus on one such primitive — byzantine broad-
cast [6], [8], [9], [14], [25], [31], [32]. In byzantine broadcast,
there is a single publicly known broadcaster that broadcasts
an object (e.g., a block in blockchain) to all nodes. Some
of the nodes, including the broadcaster, may be malicious. A
byzantine broadcast protocol guarantees:
• All honest (i.e., non-malicious) nodes eventually output
the same object (i.e., agreement). This object is allowed
to be a special null object.
• If the broadcaster is honest, all honest nodes must output
the object broadcast by the broadcaster.
Byzantine broadcast is closely related to byzantine consensus,
but crucially differs from it — in particular, byzantine broad-
cast is solvable in synchronous systems for all f < 1. Starting
from now on, this paper will only be concerned with byzantine
broadcast protocols that can tolerate f ≥ 1
2.
While rarely mentioned in literature, byzantine broadcast
can be used [26] to build blockchains. In particular, if we
use a byzantine broadcast protocol that can tolerate f ≥ 1
2,
then the resulting blockchain will immediately be able to
tolerate f ≥ 1
2 as well. But at the same time, the resulting
blockchain’s throughput will also inherit from the throughput
of the byzantine broadcast protocol. This turns out to be the
major obstacle, because existing byzantine broadcast proto-
cols [6], [8], [9], [14], [25], [31], [32] seriously fall short of
providing acceptable throughput, as shown next.
1A similar requirement has led to the recent impossibility result in [10].
© 2022, Ruomu Hou. Under license to IEEE.
DOI 10.1109/SP46214.2022.00002
1263
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
Throughput of existing byzantine broadcast protocols. Let
us clearly deﬁne throughput. Imagine that each node has B
available bandwidth, as provided by the deployment environ-
ment. Under such a constraint, let x be the total number of bits
that a byzantine broadcast protocol can broadcast within a time
period y. We deﬁne the protocol’s throughput to be T = x/y,
and deﬁne the normalized throughput to be R = T/B. We
also call R as the throughput-to-bandwidth ratio or TTB
ratio. This ratio essentially serves to isolate the inherent
merit of the protocol from the goodness of the deployment
environment, since the throughput achievable by a protocol
naturally increases when deployed in a better environment
offering higher B. Obviously, R is always between 0 and 1,
and larger is better.
Existing byzantine broadcast protocols unfortunately have
rather low TTB ratios. This is perhaps not surprising, since
throughput or TTB ratio has not been explicitly considered
in prior research on byzantine broadcast.2 For example, the
Dolev-Strong protocol [8] and its variant [31] have R < 1
wf n
(see analysis in Section III), where n is the total number of
nodes and w is the degree of a node in the overlay network. For
n = 10000 and w = 40, the protocol has R < 3.6×10−6 when
f = 0.7. If every node has 20Mbps available bandwidth, then
the protocol’s throughput will be less than 0.072Kbps, even if
we ignore all other overheads in implementation. A blockchain
built upon such a protocol will also have a throughput of
less than 0.072Kbps, which is practically unusable. As an-
other example, in our experiments, the state-of-the-art design
recently proposed by Chan et al. [6] achieves a throughput of
only about 0.45Kbps under 20Mbps available bandwidth. See
Section III and IX for more discussions on existing protocols.
Our OVERLAYBB protocol. As the ﬁrst contribution of
this paper, we propose a novel byzantine broadcast protocol
called OVERLAYBB. OVERLAYBB is particularly suitable for
large-scale systems where nodes communicate via a multi-
hop overlay. OVERLAYBB achieves R = Θ( 1
w ), by using
fragmentation, proper delay/compensation in fragment prop-
agation, and other techniques. Here w is the degree of the
nodes in the overlay. For example, if the overlay is a random
graph, then w can be just O(log n). This Θ( 1
w ) TTB ratio
is signiﬁcantly better than existing protocols. (We show later
that OVERLAYBB achieves a throughput of roughly 163Kbps
under 20Mbps available bandwidth.)
From byzantine broadcast to blockchain. As the second
contribution of this paper, we present the design, implemen-