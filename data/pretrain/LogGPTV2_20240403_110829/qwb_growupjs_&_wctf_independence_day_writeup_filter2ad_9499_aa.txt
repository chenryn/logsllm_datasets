# qwb growupjs & wctf independence_day writeup
## qwb growupjs
### 漏洞分析
    diff --git a/src/compiler/machine-operator-reducer.cc b/src/compiler/machine-operator-reducer.cc
    index a6a8e87cf4..164ab44fab 100644
    --- a/src/compiler/machine-operator-reducer.cc
    +++ b/src/compiler/machine-operator-reducer.cc
    @@ -291,7 +291,7 @@ Reduction MachineOperatorReducer::Reduce(Node* node) {
           if (m.left().Is(kMaxUInt32)) return ReplaceBool(false);  // M  false
           if (m.right().Is(0)) return ReplaceBool(false);          // x  false
           if (m.IsFoldable()) {                                    // K  K
    -        return ReplaceBool(m.left().Value()  false
           if (m.left().IsWord32Sar() && m.right().HasValue()) {
patch如上，实际上是在MachineOperatorReducer的这个case中
    case IrOpcode::kUint32LessThan: {
          Uint32BinopMatcher m(node);
          if (m.left().Is(kMaxUInt32)) return ReplaceBool(false);  // M  false
          if (m.right().Is(0)) return ReplaceBool(false);          // x  false
          if (m.IsFoldable()) {                                    // K  K
            return ReplaceBool(m.left().Value()  false
          if (m.left().IsWord32Sar() && m.right().HasValue()) {
            Int32BinopMatcher mleft(m.left().node());
            if (mleft.right().HasValue()) {
              // (x >> K)  x > K)
              const uint32_t c = m.right().Value();
              const uint32_t k = mleft.right().Value() & 0x1F;
              if (c (kMaxInt >> k)) {
                node->ReplaceInput(0, mleft.left().node());
                node->ReplaceInput(1, Uint32Constant(c op());
        Type const index_type = TypeOf(node->InputAt(0));
        Type const length_type = TypeOf(node->InputAt(1));
        if (length_type.Is(Type::Unsigned31())) {
          if (index_type.Is(Type::Integral32OrMinusZero())) {
            // Map -0 to 0, and the values in the [-2^31,-1] range to the
            // [2^31,2^32-1] range, which will be considered out-of-bounds
            // as well, because the {length_type} is limited to Unsigned31.
            VisitBinop(node, UseInfo::TruncatingWord32(),
                       MachineRepresentation::kWord32);
            if (lower()) {
              CheckBoundsParameters::Mode mode =
                  CheckBoundsParameters::kDeoptOnOutOfBounds;
              if (lowering->poisoning_level_ ==
                      PoisoningMitigationLevel::kDontPoison &&
                  (index_type.IsNone() || length_type.IsNone() ||
                   (index_type.Min() >= 0.0 &&
                    index_type.Max() CheckedUint32Bounds(p.feedback(), mode));
            }
然后在Effect linearization中被Lower成Uint32LessThan。
    Node* EffectControlLinearizer::LowerCheckedUint32Bounds(Node* node,
                                                            Node* frame_state) {
      Node* index = node->InputAt(0);
      Node* limit = node->InputAt(1);
      const CheckBoundsParameters& params = CheckBoundsParametersOf(node->op());
      Node* check = __ Uint32LessThan(index, limit);
      switch (params.mode()) {
        case CheckBoundsParameters::kDeoptOnOutOfBounds:
          __ DeoptimizeIfNot(DeoptimizeReason::kOutOfBounds,
                             params.check_parameters().feedback(), check,
                             frame_state, IsSafetyCheck::kCriticalSafetyCheck);
          break;
        case CheckBoundsParameters::kAbortOnOutOfBounds: {
          auto if_abort = __ MakeDeferredLabel();
          auto done = __ MakeLabel();
          __ Branch(check, &done, &if_abort);
          __ Bind(&if_abort);
          __ Unreachable();
          __ Goto(&done);
          __ Bind(&done);
          break;
        }
      }
      return index;
    }
#### case 2
那么是不是把idx直接改成4，就可以越界读写一个element呢？  
事实上没那么简单，它们生成的IR完全不一样。
    function main() {
        let arr = [1.1, 2.2, 3.3, 4.4];
        let idx = 4;
        return arr[idx];
    }
    for (i = 0; i NewNode(
              simplified()->CheckBounds(VectorSlotPair()), index,
              jsgraph()->Constant(Smi::kMaxValue), effect, control);
        } else {
          // Check that the {index} is in the valid range for the {receiver}.
          index = effect =
              graph()->NewNode(simplified()->CheckBounds(VectorSlotPair()), index,
                               length, effect, control);
        }
然后还需要对index进行实际的check，也就是比较index是否小于array length，引入了一个NumberLessThan节点。
    // Check if we can return undefined for out-of-bounds loads.
          if (keyed_mode.load_mode() == LOAD_IGNORE_OUT_OF_BOUNDS &&
              CanTreatHoleAsUndefined(receiver_maps)) {
            Node* check =
                graph()->NewNode(simplified()->NumberLessThan(), index, length);
            Node* branch = graph()->NewNode(
                common()->Branch(BranchHint::kTrue,
                                 IsSafetyCheck::kCriticalSafetyCheck),
                check, control);
            Node* if_true = graph()->NewNode(common()->IfTrue(), branch);
            Node* etrue = effect;
            Node* vtrue;
            {
              // Perform the actual load
              vtrue = etrue =
                  graph()->NewNode(simplified()->LoadElement(element_access),
                                   elements, index, etrue, if_true);
然后这个节点在LoadElimination进行TyperNarrowingReducer的时候。
    switch (node->opcode()) {
        case IrOpcode::kNumberLessThan: {
          // TODO(turbofan) Reuse the logic from typer.cc (by integrating relational
          // comparisons with the operation typer).
          Type left_type = NodeProperties::GetType(node->InputAt(0));
          Type right_type = NodeProperties::GetType(node->InputAt(1));
          if (left_type.Is(Type::PlainNumber()) &&
              right_type.Is(Type::PlainNumber())) {
            if (left_type.Max() = right_type.Max()) {
              new_type = op_typer_.singleton_false();
            }
          }
          break;
        }
由于left_type即index的type信息被分析为(4,4)，right_type即array length的type信息被分析为（4,4)  
满足`else if (left_type.Min() >= right_type.Max())`  
所以kNumberLessThan的类型会被更新成false，然后在ConstantFoldingReducer时候
    Reduction ConstantFoldingReducer::Reduce(Node* node) {
      DisallowHeapAccess no_heap_access;
      // Check if the output type is a singleton.  In that case we already know the
      // result value and can simply replace the node if it's eliminable.
      if (!NodeProperties::IsConstant(node) && NodeProperties::IsTyped(node) &&
          node->op()->HasProperty(Operator::kEliminatable)) {
        // TODO(v8:5303): We must not eliminate FinishRegion here. This special
        // case can be removed once we have separate operators for value and
        // effect regions.
        if (node->opcode() == IrOpcode::kFinishRegion) return NoChange();
        // We can only constant-fold nodes here, that are known to not cause any
        // side-effect, may it be a JavaScript observable side-effect or a possible
        // eager deoptimization exit (i.e. {node} has an operator that doesn't have
        // the Operator::kNoDeopt property).
        Type upper = NodeProperties::GetType(node);
        if (!upper.IsNone()) {
          Node* replacement = nullptr;
          if (upper.IsHeapConstant()) {
            replacement = jsgraph()->Constant(upper.AsHeapConstant()->Ref());
被直接折叠成了false节点。  
最后只剩下了对Smi::kMaxValue的CheckBounds。  
然而这对我们来说毫无意义。  