= a ·(cid:6)
Assume that adversary A returned a valid solution to the k-
a·(cid:6)
sum problem. Denote r
=
j=1 cj · sk∗
∗ · (sk∗
k−1
+ sk ).
+ c
+ c
∗ ·
∗
∗
= H0(ha, m
) = H0(gs
, m
∗
), meaning σ is a valid signature for message m
k−1
j=1 ri. Then we have s
∗ · sk = r
) = H0(gr
It follows that c
PK −c
with respect to the aggregated public key PK .
,PK.
∗
, m
k−1
∗
∗
, s
Note that if h = 1 then Lk will contain elements that are
not sampled uniformly and independently. This happens with
probability 1/q. Therefore, the success probability of B is (1−
1/q) times that of A.
∗
∗
∗
∗
∗
∗
leaf node with public key pk∗
, and the adversary controls the
, pk}, and let
root node with keys pk , sk 1, sk 2. Let L = {pk∗
m be an arbitrary message. The adversary starts k − 1 con-
current signing oracle queries with the challenger, obtaining a
commitment ti for each i ∈ {1, . . . , k−1}, where i denotes an
index of the signing oracle query. Next, the adversary creates
lists L1, . . . , Lk. For each i ∈ {1, . . . , k − 1} the list Li is
) for distinct values of ¯ti ∈ G.
ﬁlled with H1(H0(¯ti, L, m), pk∗
The list Lk is ﬁlled with −H1(H0(
∗
) for
∗ (cid:9)= m. The
∗ ∈ {0, 1}∗
distinct messages m
adversary chooses the values for the challenge phase based on
the solution to the k-sum problem, and gets back responses
s1,i and s2,i for all i ∈ {1, . . . , k − 1}, where i denotes the
∗
be the message
number of a concurrent oracle query. Let m
(cid:5)
that corresponds to the element of Lk that is included in the
k−1
∗
solution to the k-sum problem. Let c
)
i=1 ti, L, m
(cid:6)
). Then adversary produces a forgery
and let v
∗·
k−1
∗
σ = (c
, s
i=1 sb,i + v
sk b for each b ∈ {1, 2}.
(cid:5)
such that m
∗
∗
2) for message m
k−1
i=1 ti, L, m
= H1(c
∗
1, s
, where s
∗
b =
= H0(
), pk
, pk
∗
∗
∗
∗
∗
4.3 Applicability to MuSig
The two-round version of MuSig [MPSW18a] can be at-
tacked in the same way as CoSi. Compared to CoSi, the main
change in MuSig is their use of a more complicated key
aggregation. This affects the above attack only syntactically,
so we omit the details. Our attack does not affect the updated
three-round version of MuSig [MPSW18b].
4.4 Applicability to BCJ
The attack against BCJ closely follows the attack against
CoSi. We consider a 2-node tree T , where the challenger
controls the leaf node. Let PK be the aggregated public key
of T , and let m be an arbitrary message. Let sk be the
secret key of the root node (controlled by the adversary).
The adversary starts k − 1 concurrent signing oracle queries
with the challenger, obtaining values t1,i and t2,i for all
i ∈ {1, . . . , k − 1}, where i denotes an index of the signing
oracle query. Next, the adversary creates lists L1, . . . , Lk. For
each i ∈ {1, . . . , k − 1} the list Li is ﬁlled with H0(t1,i ·
1 , t2,i · gα1
gα1
1 hα2
1, PK , m) for arbitrary distinct tuples
(α1, α2, r) ∈ Z3
k−1
k−1
∗
i=1 t1,i and ¯t
i=1 t2,i.
2 =
The list Lk is ﬁlled with −H0(¯t
∗
∗
∗
2, PK , m
1, ¯t
) for distinct
∗ (cid:9)= m. The adversary
such that m
messages m
chooses the values for the challenge phase based on the
solution to the k-sum problem, and gets back responses si for
all i ∈ {1, . . . , k−1}. Let m
∗
be the message that corresponds
to the element of Lk that is included in the solution to the
∗
∗
∗
∗
2, PK , m
1, ¯t
= H0(¯t
). Then the
k-sum problem, and let c
∗
∗
∗
∗
1, ¯t
= (¯t
adversary returns a forged signature σ
2, s
2 )
k−1
∗
∗
for m
2 are the sums
1 , γ
i=1 si + c
of the corresponding γ values returned by the challenger at
the end of the signing oracle queries.
2 hα2
2 gr
∗
q. Let ¯t
1 =
∗ ∈ {0, 1}∗
∗· sk and γ
, where s
∗
1 , γ
(cid:6)
(cid:5)
(cid:5)
, γ
=
∗
∗
∗
4.5 Applicability to MWLD
The attack is again similar to the attack on CoSi. We
consider a 2-node tree T , where the challenger controls the
4.6 Attack on RandHound
RandHound is a public-randomness generator introduced
in [SJKK+17]. The protocol allows a client to interact with
a set of RandHound servers to generate a random string.
It uses CoSi to ensure that the result is publicly veriﬁable.
Our attack against CoSi allows the client to forge a transcript
that serves as a third-party veriﬁable proof of the produced
randomness. Hence the client can maliciously claim to have
acquired randomness that is beneﬁcial to them.
In the RandHound protocol, the client communicates with
each of the servers directly. Let n denote the number of the
servers participating in the protocol. Then the protocol runs the
CoSi scheme for an (n + 1)-node tree T of depth 1 where the
client is the leader (i.e. is represented by the root node), and
each of the n servers is represented by a leaf node directly
connected to the root. Our attack against the RandHound
protocol will essentially run the CoSi attack against each of
the n servers.
In Section 4.2 we discussed that
the CoSi attack can
be extended to the case when the adversary controls only
the root node. This attack would immediately work against
RandHound if the protocol always used the same set of
servers. However,
the set of servers that participate in
RandHound may change in each separate execution of the
protocol. To circumvent this limitation, we now show that it
is possible to produce a forgery with respect to an arbitrary
set of servers in RandHound, even if they never produced a
joint signature. The attacker will run the CoSi attack against
each of the servers separately, and then construct a signature
with respect to all servers simultaneously. This will require the
adversary to open k − 1 concurrent signing queries to each of
the n servers, for a total of n· (k − 1) concurrent queries. The
adversary will then run a variant of the earlier CoSi attack n
times, each involving the k − 1 concurrent signing queries to
a single targeted server at a time.
The RandHound protocol uses the CoSi scheme to sign
messages that contain a unique session identiﬁer, along with
(cid:18)(cid:17)(cid:26)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:54 UTC from IEEE Xplore.  Restrictions apply. 
n
∗
∗
, s
1, . . . , pk∗
information about the subset of servers whose secret shares
will be used to compute shared randomness. In order to attack
RandHound, an adversary has to choose some ﬁxed message
∗
) for this message
and forge a valid signature σ = (c
m
} containing a
with respect to the set PK = {pk∗
public key for each of the n servers.
We now describe the attack. For each z ∈ {1, . . . , n} let
Tz be a 2-node tree where the adversary controls the root
node with a secret key sk, and the challenger is the z-th of n
servers controlling the leaf node with some secret key sk∗
z (the
client does not participate in the RandHound signature, but for
notational consistency here we assume otherwise). Adversary
, and for each z ∈ {1, . . . , n}
∗
chooses an arbitrary message m
concurrently runs a variant of the earlier CoSi attack in tree
Tz as follows:
k−1
∗
i=1 tz,i, m
• The adversary chooses mutually distinct messages
∗} and initiates k − 1
mz,1, . . . , mz,k−1 ∈ {0, 1}∗ \ {m
concurrent calls to the signing oracle, using mz,i,Tz as an
input to the oracle query, one for each i ∈ {1, . . . , k−1}.
• At the end of the commitment phase, adversary receives
a commitment tz,i = grz,i for each concurrent oracle
call i ∈ {1, . . . , k − 1}, where rz,i is not known to the
adversary.
• At the beginning of the challenge phase the adversary
chooses and distributes a malicious ¯tz,i that is used to
compute the challenge cz,i = H0(¯tz,i, mz,i) for each i ∈
{1, . . . , k − 1} (we show how to choose ¯tz,i’s below).
• During the response phase the adversary obtains from
Tz’s leaf node sz,i = rz,i + cz,i · sk∗
z for each i ∈
{1, . . . , k − 1}.
The adversary constructs the signature σ = (c
) for
(cid:6)
(cid:6)
∗
∗
∗
message m
where c
= H0(
=
∗ · sk. We now show how to choose the
k−1
i=1 sz,i + c
(cid:6)
(cid:6)
∗
¯tz,i’s such that σ is a valid signature for m
.
(cid:6)
(cid:6)
k−1
i=1 rz,i. By expanding the above, we get
(cid:6)
∗·sk.
i=1 cz,i·sk∗
k−1
∗
n
) and s
c
+
(cid:6)
for each z ∈
k−1
∗
z=1
Note that σ is a valid signature if
i=1 cz,i = c
∗ · (
{1, . . . , n}, which would give us s
sk∗
∗
z +
= r
sk ). So in order to produce a forgery, for each z ∈ {1, . . . , n}
the adversary needs to ﬁnd values ¯tz,i for all i ∈ {1, . . . , k−1}
k−1
i=1 H0(¯tz,i, mz,i) modulo the group order.
such that c
This can be reduced to a variant of the k-sum problem that
and k − 1 lists L1, . . . , Lk−1 of uniformly
∗
given a constant c
random elements, requires to ﬁnd x1 ∈ L1, . . . , xk−1 ∈ Lk−1
such that x1 + . . . + xk−1 ≡ c
mod q. Here list Li for
each i ∈ {1, . . . , k − 1} will contain outputs of H0(¯tz,i, mz,i)
for some distinct values of ¯tz,i. This problem can be solved
using the k-tree algorithm [Wag02] just as before, but ﬁnding
the solution requires more resources because we now lost one
degree of freedom (the choice of elements from the k-th list),
so each of the remaining lists will have to be populated with
a larger number of elements.
Let r
=
= H0(gr
n
∗
z=1
, m
) and s
(cid:6)
(cid:5)
(cid:5)
∗
∗
, s
n
z=1
∗
=
∗
= r
∗
+ c
n
z=1
∗
∗
z +c
n
z=1
∗
∗
5. A SECURE TWO-ROUND MULTI-SIGNATURE FROM BCJ
The metareduction in Section 3 shows that none of the
existing two-round multi-signature schemes (without pairings)
can be proved secure, raising the question whether such
Parent Pi
m
Children Ci
Signer Si

m
tj,1
{(tj,1, tj,2, PK j)}j∈Ci- (g2, h1, h2) ← H2(m)