mation access and processing behavior of software to identify
violations of policies that indicate suspicious behavior traits.
Panorama generalizes signature-based malware detection to
a behavior problem like SIGL does, but ultimately requires a
“behavior-signature” that limits its detection scope.
Polonium [13] and Marmite [70] detect malware through
large-scale graph mining on a machine-ﬁle graph. They com-
pute ﬁle reputation scores and identify malware as ﬁles with
low reputation. Mastino [64] improves upon Polonium and
introduces additional URL nodes to graph analysis, train-
ing classiﬁers for URLs and ﬁles. These approaches require
network- and system-level data from machines across the
Internet, which is unattainable in a typical enterprise. They
consider relationships between users (e.g., machines) and
ﬁles only, assuming that malicious ﬁles appear on few ma-
chines and on machines with low reputation. Such assump-
tions however, are no longer valid as recent supply chain
attacks leverage legitimate channels to distribute malware to a
large number of victim machines. Kwon et al. [45] proposed
a downloader-graph abstraction that describes relationships
between downloaders and payloads on 5 million end-point
workstations. Using hand-crafted graph features as strong
indicators of malicious activity, the authors constructed a
random forest model for malware detection. The approach
however, requires a large amount of data (e.g., features from
about 24 million distinct ﬁles) to achieve high accuracy and
any changes in malware delivery mechanisms that affect those
cherry-picked features are likely to invalidate the model.
Many other graph-based malware detection approaches
exist, with the majority focusing on characterizing malware
delivery networks [35, 69]. We omit discussions of those
approaches since SIGL targets local end-point protection with-
out knowledge of global malware networks. SIGL does not
rely on extracting indicators that signify typical cybercriminal
operations, but learns to generalize expected behavior of a
particular enterprise given easily-accessible audit information.
Nevertheless, a security-aware enterprise should leverage both
global and local information, complementing SIGL with ex-
isting global malware network analytic tools.
Provenance-Based Intrusion Detection. Frappuccino [28]
analyzes system-level provenance graphs to model the be-
havior of Platform-as-a-Service applications. It uses a dy-
namic sliding window algorithm to continuously monitor
and check if application instances conform to the learned
model. StreamSpot [48] uses a similar analytic framework.
Both systems featurize provenance graphs using a bag-of-
subtrees approach and apply clustering algorithms to iden-
tify outlier graphs. Compared to SIGL’s graph LSTM archi-
tecture, learning graphs using bag-of-subtrees is insufﬁcient
to capture the semantics of system evolution represented in
provenance graphs, due to its insensitivity to the event order.
This limitation (i.e., order-insensitivity) is well-understood
in NLP [72] and equally applicable in our domain. Cluster-
ing bag-of-subtrees is a reasonable step to perform outlier
detection, but it burdens cyberanalysts with labor-intensive
investigation, because even a single outlier often entails inves-
tigating a large provenance (sub)graph. SIGL lessens such a
burden by triaging abnormal process nodes within the graph.
Recently, Han et al. [27] designed a realtime anomaly de-
tection system that analyzes streaming provenance graphs
generated from system activity. It learns a dynamic execu-
tion model as the host system evolves, thus capturing behav-
ioral changes in the model. This learning approach makes it
suitable for detecting long-running persistent threats. Gao et
al. [22] designed a domain-speciﬁc query language, SAQL, to
analyze large-scale provenance data and use various anomaly
models to detect intrusions. To our best knowledge, SIGL is
the ﬁrst provenance-based anomaly detection system that se-
cures software installations without prior attack knowledge.
9 Conclusion
We present SIGL, a malware detection system that secures
software installation by analyzing the behavior of end-point
systems through software installation graphs. SIGL uses a
novel deep graph learning architecture to understand instal-
lation behavior and assist attack attribution. Our evaluation
results show that SIGL achieves high detection performance
using only a small amount of training data, while accurately
guiding human analysts to identify the cause of alarms. SIGL
is therefore a practical tool that can be deployed in any enter-
prise for effective and labor-saving malware detection.
Acknowledgments
We thank the anonymous reviewers and our shepherd Kon-
rad Rieck who helped improve the paper. This research was
supported in part by the US National Science Foundation
under grant NSF 14-50277. We acknowledge the support
of the Natural Sciences and Engineering Research Council
of Canada (NSERC). Cette recherche a été ﬁnancée par le
Conseil de recherches en sciences naturelles et en génie du
Canada (CRSNG). The views, opinions, and/or ﬁndings con-
tained in this paper are those of the authors and should not
be interpreted as representing the ofﬁcial views or policies,
either expressed or implied, of the sponsors.
References
[1] Deep graph library. https://www.dgl.ai.
2360    30th USENIX Security Symposium
USENIX Association
[2] Internet security threat report, 2019.
https://www.symantec.
com/security-center/threat-report?om_ext_cid=biz_vnty_
istr-24_multi_v10195.
[3] AN, J., AND CHO, S. Variational autoencoder based anomaly detection
using reconstruction probability. Special Lecture on IE (2015).
[4] ARNTZ, P. Threat spotlight: Crysis, aka dharma ransomware, causing
a crisis for businesses, 2019. https://blog.malwarebytes.com/threat-
analysis/2019/05/threat-spotlight-crysis-aka-dharma-ransomware-
causing-a-crisis-for-businesses/.
[5] AXELSSON, S. The base-rate fallacy and its implications for the
In Conference on Computer and
difﬁculty of intrusion detection.
Communications Security (1999), ACM.
[6] BELLISSIMO, A., BURGESS, J., AND FU, K. Secure software updates:
Disappointments and new challenges. In HotSec (2006).
[7] BERG, A., AHLBERG, J., AND FELSBERG, M. Unsupervised learning
of anomaly detection from contaminated image data using simultaneous
encoder training. arXiv preprint arXiv:1905.11034 (2019).
[8] CABALLERO, J., GRIER, C., KREIBICH, C., AND PAXSON, V. Mea-
suring pay-per-install: the commoditization of malware distribution. In
Security Symposium (2011), USENIX.
[9] CARAGEA, C., WU, J., CIOBANU, A., WILLIAMS, K., FERNÁNDEZ-
RAMÍREZ, J., CHEN, H.-H., WU, Z., AND GILES, L. Citeseer x: A
scholarly big dataset. In European Conference on Information Retrieval
(2014), Springer, pp. 311–322.
[10] CARATA, L., AKOUSH, S., BALAKRISHNAN, N., BYTHEWAY, T.,
SOHAN, R., SELTZER, M., AND HOPPER, A. A primer on provenance.
ACM Queue (2014).
[11] CHANDOLA, V., BANERJEE, A., AND KUMAR, V. Anomaly detection:
A survey. ACM computing surveys 41, 3 (2009), 15.
[12] CHANG, H., RONG, Y., XU, T., HUANG, W., ZHANG, H., CUI, P.,
ZHU, W., AND HUANG, J. A restricted black-box adversarial frame-
work towards attacking graph embedding models. In Conference on
Artiﬁcial Intelligence (2020), AAAI.
[13] CHAU, D. H. P., NACHENBERG, C., WILHELM, J., WRIGHT, A., AND
FALOUTSOS, C. Polonium: Tera-scale graph mining and inference
for malware detection. In International Conference on Data Mining
(2011), SIAM.
[14] CHECK POINT RESEARCH.
Naikon apt: Cyber espionage
https://research.checkpoint.com/2020/
reloaded, 2020.
naikon-apt-cyber-espionage-reloaded/.
[15] CLABURN, T. Dear planet earth: Patch webmin now – zero-day
exploit emerges for potential hijack hole in server control panel,
2019.
https://www.theregister.co.uk/2019/08/19/webmin_
project_zero_day_patch/.
[16] CROFFORD, C., AND MCKEE, D.
fami-
to avoid detection, analysis, 2017.
Ransomware
installers
lies use nsis
https://securingtomorrow.mcafee.com/other-blogs/mcafee-
labs/ransomware-families-use-nsis-installers-to-avoid-detection-
analysis/.
[17] DAI, Q., LI, Q., TANG, J., AND WANG, D. Adversarial network
embedding. In Conference on Artiﬁcial Intelligence (2018), AAAI.
[18] DONG, Y., CHAWLA, N. V., AND SWAMI, A. metapath2vec: Scalable
representation learning for heterogeneous networks. In International
Conference on Knowledge Discovery and Data Mining (2017), ACM.
[19] DU, M., LI, F., ZHENG, G., AND SRIKUMAR, V. Deeplog: Anomaly
detection and diagnosis from system logs through deep learning. In
Conference on Computer and Communications Security (2017), ACM.
https://filehippo.com/
Popular software, n.d.
[20] FILEHIPPO.
popular/.
[21] FIREEYE.
to
The numbers game: How many alerts is too
https://www2.fireeye.com/
many
StopTheNoise-IDC-Numbers-Game-Special-Report.html.
handle?, 2015.
system for real-time abnormal system behavior detection. In Security
Symposium (2018), USENIX.
[23] GEHANI, A., AND TARIQ, D. Spade: support for provenance audit-
ing in distributed environments. In Middleware Conference (2012),
ACM/IFIP/USENIX.
[24] GREAT, A. Operation shadowhammer, 2019. https://securelist.
com/operation-shadowhammer/89992/.
[25] GROVER, A., AND LESKOVEC, J. node2vec: Scalable feature learning
for networks. In International Conference on Knowledge Discovery
and Data Mining (2016), ACM.
[26] GUTHRIE, D., ALLISON, B., LIU, W., GUTHRIE, L., AND WILKS, Y.
A closer look at skip-gram modelling. In LREC (2006), pp. 1222–1225.
[27] HAN, X., PASQUIER, T., BATES, A., MICKENS, J., AND SELTZER, M.
Unicorn: Runtime provenance-based detector for advanced persistent
threats. In NDSS (2020).
[28] HAN, X., PASQUIER, T., RANJAN, T., GOLDSTEIN, M., AND
SELTZER, M. Frappuccino: fault-detection through runtime analy-
sis of provenance. In Workshop on Hot Topics in Cloud Computing
(2017), USENIX.
[29] HAN, X., PASQUIER, T., AND SELTZER, M. Provenance-based in-
trusion detection: Opportunities and challenges. In Workshop on the
Theory and Practice of Provenance (2018), USENIX.
[30] HARRIS, Z. S. Distributional structure. Word 10, 2-3 (1954), 146–162.
[31] HASSAN, W. U., GUO, S., LI, D., CHEN, Z., JEE, K., LI, Z., AND
BATES, A. Nodoze: Combatting threat alert fatigue with automated
provenance triage. In NDSS (2019).
[32] HOCHREITER, S., AND SCHMIDHUBER, J. Long short-term memory.
Neural Computation (1997).
[33] HOSSAIN, M. N., MILAJERDI, S. M., WANG, J., ESHETE, B.,
GJOMEMO, R., SEKAR, R., STOLLER, S. D., AND VENKATAKR-
ISHNAN, V. Sleuth: Real-time attack scenario reconstruction from cots
audit data. In Security Symposium (2017), USENIX, pp. 487–504.
[34] HU, Z., CHEN, T., CHANG, K.-W., AND SUN, Y. Few-shot rep-
arXiv preprint
resentation learning for out-of-vocabulary words.
arXiv:1907.00505 (2019).
[35] INVERNIZZI, L., MISKOVIC, S., TORRES, R., KRUEGEL, C., SAHA,
S., VIGNA, G., LEE, S.-J., AND MELLIA, M. Nazca: Detecting
malware distribution in large-scale networks. In NDSS (2014).
[36] JENKS, G. F. The data model concept in statistical mapping. Interna-
tional Yearbook of Cartography (1967).
[37] JIANG, B. Head/tail breaks: A new classiﬁcation scheme for data with
a heavy-tailed distribution. The Professional Geographer 65, 3 (2013),
482–494.
[38] KAPRAVELOS, A., SHOSHITAISHVILI, Y., COVA, M., KRUEGEL, C.,
AND VIGNA, G. Revolver: An automated approach to the detection of
evasive web-based malware. In Security Symposium (2013), USENIX.
[39] KHANDELWAL, S. Ccleaner attack timeline – here’s how hackers
infected 2.3 million pcs, 2018. https://thehackernews.com/2018/
04/ccleaner-malware-attack.html/.
[40] KHASAIA, L. Unpacking shade ransomware, 2017.
secrary.com/ReversingMalware/UnpackingShade/.
https://
[41] KHODAK, M., SAUNSHI, N., LIANG, Y., MA, T., STEWART, B., AND
ARORA, S. A la carte embedding: Cheap but effective induction of
semantic feature vectors. In Annual Meeting of the Association for
Computational Linguistics (2018), pp. 12–22.
[42] KHOSHNEVISAN, F., AND FAN, Z. Rsm-gan: A convolutional recur-
rent gan for anomaly detection in contaminated seasonal multivariate
time series. arXiv preprint arXiv:1911.07104 (2019).
[43] KING, S. T., AND CHEN, P. M. Backtracking intrusions. ACM SIGOPS
Operating Systems Review (2003).
[22] GAO, P., XIAO, X., LI, D., LI, Z., JEE, K., WU, Z., KIM, C. H.,
KULKARNI, S. R., AND MITTAL, P. Saql: A stream-based query
[44] KING, S. T., MAO, Z. M., LUCCHETTI, D. G., AND CHEN, P. M.
Enriching intrusion alerts through multi-host causality. In NDSS (2005).
USENIX Association
30th USENIX Security Symposium    2361
[45] KWON, B. J., MONDAL, J., JANG, J., BILGE, L., AND DUMITRA ¸S, T.
The dropper effect: Insights into malware distribution with downloader
graph analytics. In Conference on Computer and Communications
Security (2015), ACM.
[46] LEE, K. H., ZHANG, X., AND XU, D. High accuracy attack prove-
nance via binary-based execution partition. In NDSS (2013).
[47] MANDIANT. M-trends 2015: A view from the front lines threat
http://www2.fireeye.com/rs/fireye/images/
report, 2015.
rpt-m-trends-2015.pdf.
[48] MANZOOR, E., MILAJERDI, S. M., AND AKOGLU, L. Fast memory-
In
efﬁcient anomaly detection in streaming heterogeneous graphs.
International Conference on Knowledge Discovery and Data Mining
(2016), ACM.
[49] MANZOOR, E., MILAJERDI, S. M., AND AKOGLU, L. Streamspot
https://github.com/sbustreamspot/
datasets, 2016.
sbustreamspot-data.
[50] MCCALLUM, A. Cora dataset.
[51] MICRO, T. Dharma ransomware uses av tool to distract from
https://blog.trendmicro.com/trendlabs-
malicious activities, 2019.
security-intelligence/dharma-ransomware-uses-av-tool-to-distract-
from-malicious-activities/.
[52] MICROSOFT.
Ransomware
operators
malware
ing
https://www.microsoft.com/security/blog/2017/03/15/
operators-are-hiding-malware-deeper-in-installer-packages/.
installer
deeper
in
are
packages,
hid-
2017.
ransomware-
[53] MICROSOFT.
Ransom:win32/wadhrama.a!rsm, 2017.
http://www.microsoft.com/en-us/wdsi/threats/
malware-encyclopedia-description?Name=ransom:
win32/wadhrama.a!rsm&ThreatID=2147720056.
[54] MICROSOFT. About event tracing, 2018. https://docs.microsoft.
com/en-us/windows/win32/etw/about-event-tracing.
[55] MIKOLOV, T., SUTSKEVER, I., CHEN, K., CORRADO, G. S., AND
DEAN, J. Distributed representations of words and phrases and their
compositionality. In Advances in Neural Information Processing Sys-
tems (2013), pp. 3111–3119.
[56] MILAJERDI, S. M., GJOMEMO, R., ESHETE, B., SEKAR, R., AND
VENKATAKRISHNAN, V. Holmes: Real-time apt detection through
correlation of suspicious information ﬂows. In Symposium on Security
and Privacy (2019), IEEE.
[57] MISRA, S., TOURANI, R., AND MAJD, N. E. Secure content delivery
in information-centric networks: Design, implementation, and analyses.
In Workshop on Information-Centric Networking (2013), ACM.
[58] MUNISWAMY-REDDY, K.-K., HOLLAND, D. A., BRAUN, U., AND
SELTZER, M. I. Provenance-aware storage systems. In Annual Techni-
cal Conference (2006), USENIX, pp. 43–56.
[59] NEC CORPORATION.
Automated security intelligence (asi),
https://www.nec.com/en/global/techrep/journal/
2018.
g16/n01/160110.html.
[60] PASQUIER, T., HAN, X., GOLDSTEIN, M., MOYER, T., EYERS, D.,
SELTZER, M., AND BACON, J. Practical whole-system provenance
capture. In Symposium on Cloud Computing (2017), ACM, pp. 405–
418.
[61] PASQUIER, T., HAN, X., MOYER, T., BATES, A., HERMANT, O.,
EYERS, D., BACON, J., AND SELTZER, M. Runtime analysis of whole-
system provenance. In Conference on Computer and Communications
Security (2018), ACM.
[62] PENG, N., POON, H., QUIRK, C., TOUTANOVA, K., AND YIH, W.-T.
Cross-sentence n-ary relation extraction with graph lstms. Transactions
of the Association for Computational Linguistics 5 (2017), 101–115.
[63] PEROZZI, B., AL-RFOU, R., AND SKIENA, S. Deepwalk: Online
In International Conference on
learning of social representations.
Knowledge Discovery and Data Mining (2014), ACM, pp. 701–710.
[64] RAHBARINIA, B., BALDUZZI, M., AND PERDISCI, R. Real-time
detection of malware downloads via large-scale url- ﬁle- machine
[65]
graph mining. In Asia Conference on Computer and Communications
Security (2016), ACM, pp. 783–794.
ˇREH ˚U ˇREK, R., AND SOJKA, P. Software framework for topic mod-
elling with large corpora. In Workshop on New Challenges for NLP
Frameworks (2010), ELRA.
[66] RIJNETU, I. Security alert: Malware hides in script injection, by-
passing av detection, 2019. https://heimdalsecurity.com/blog/
security-alert-malware-script-injection/.
[67] SAMUEL, J., MATHEWSON, N., CAPPOS, J., AND DINGLEDINE, R.
Survivable key compromise in software update systems. In Conference
on Computer and Communications Security (2010), ACM, pp. 61–72.
[68] SHEN, Y., MARICONTI, E., VERVIER, P. A., AND STRINGHINI, G.
Tiresias: Predicting security events through deep learning. In Con-
ference on Computer and Communications Security (2018), ACM,
pp. 592–605.
[69] STRINGHINI, G., KRUEGEL, C., AND VIGNA, G. Shady paths: Lever-
aging surﬁng crowds to detect malicious web pages. In Conference on
Computer and Communications Security (2013), ACM, pp. 133–144.
[70] STRINGHINI, G., SHEN, Y., HAN, Y., AND ZHANG, X. Marmite:
spreading malicious ﬁle reputation through download graphs. In Annual
Computer Security Applications Conference (2017), ACM, pp. 91–102.
[71] SZE, W. K., AND SEKAR, R. Provenance-based integrity protection
for windows. In Annual Computer Security Applications Conference
(2015), ACM.
[72] TAI, K. S., SOCHER, R., AND MANNING, C. D. Improved semantic
representations from tree-structured long short-term memory networks.
arXiv preprint arXiv:1503.00075 (2015).
[73] TSAI, C.-F., HSU, Y.-F., LIN, C.-Y., AND LIN, W.-Y. Intrusion detec-
tion by machine learning: A review. Expert systems with applications
(2009).
[74] TWIST, J. Cyber threat report 17 sep-02 oct 2017.
[75] VAN KEMENADE, H. Top pypi packages, 2019. https://hugovk.
github.io/top-pypi-packages/.
[76] W3C. Prov-overview: an overview of the prov family of documents.
[77] WANG, B., AND GONG, N. Z. Attacking graph-based classiﬁcation
via manipulating the graph structure. In Conference on Computer and
Communications Security (2019), ACM.
[78] WANG, B., ZHANG, L., AND GONG, N. Z. Sybilscar: Sybil detec-
tion in online social networks via local rule based propagation. In
Conference on Computer Communications (2017), IEEE, pp. 1–9.
[79] WANG, F., KO, R., AND MICKENS, J. Riverbed: Enforcing user-
deﬁned privacy constraints in distributed web services. In NSDI (2019),
pp. 615–630.
[80] WANG, G., HAO, J., MA, J., AND HUANG, L. A new approach to
intrusion detection using artiﬁcial neural networks and fuzzy clustering.
Expert systems with applications 37, 9 (2010), 6225–6232.
[81] XU, K., YAO, D., MA, Q., AND CROWELL, A. Detecting infection
onset with behavior-based policies. In International Conference on
Network and System Security (2011), IEEE, pp. 57–64.
[82] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA, E.
Panorama: capturing system-wide information ﬂow for malware detec-
tion and analysis. In Conference on Computer and Communications
Security (2007), ACM, pp. 116–127.
[83] ZAREMBA, W., AND SUTSKEVER, I. Learning to execute. arXiv
preprint arXiv:1410.4615 (2014).
[84] ZÜGNER, D., AKBARNEJAD, A., AND GÜNNEMANN, S. Adversarial
attacks on neural networks for graph data. In International Conference
on Knowledge Discovery and Data Mining (2018), ACM, pp. 2847–
2856.
[85] ZÜGNER, D., AND GÜNNEMANN, S. Certiﬁable robustness and robust
training for graph convolutional networks. In International Conference
on Knowledge Discovery Data Mining (2019), ACM, pp. 246–256.
2362    30th USENIX Security Symposium
USENIX Association