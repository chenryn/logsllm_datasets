### Monitoring and Analyzing Software Behavior for Malware Detection

#### Introduction
To identify policy violations indicative of suspicious behavior, it is essential to monitor and analyze the access and processing behavior of software. Various systems have been developed to detect malware by leveraging different approaches, such as signature-based detection, large-scale graph mining, and provenance-based intrusion detection.

#### Signature-Based and Behavior-Based Detection
- **Panorama** generalizes signature-based malware detection to a behavior problem, similar to SIGL, but ultimately requires a "behavior-signature" that limits its detection scope.
- **Polonium [13]** and **Marmite [70]** use large-scale graph mining on machine-file graphs to compute file reputation scores and identify malware as files with low reputations.
- **Mastino [64]** improves upon Polonium by introducing additional URL nodes to the graph analysis, training classifiers for both URLs and files.

These approaches require network- and system-level data from machines across the Internet, which is often unattainable in a typical enterprise. They assume that malicious files appear on few machines and on machines with low reputations. However, these assumptions are no longer valid due to recent supply chain attacks that leverage legitimate channels to distribute malware to a large number of victim machines.

**Kwon et al. [45]** proposed a downloader-graph abstraction that describes relationships between downloaders and payloads on 5 million end-point workstations. Using hand-crafted graph features as strong indicators of malicious activity, they constructed a random forest model for malware detection. This approach, however, requires a large amount of data (e.g., features from about 24 million distinct files) to achieve high accuracy. Any changes in malware delivery mechanisms that affect these cherry-picked features can invalidate the model.

Many other graph-based malware detection approaches exist, with the majority focusing on characterizing malware delivery networks [35, 69]. We omit discussions of those approaches since SIGL targets local end-point protection without knowledge of global malware networks. SIGL does not rely on extracting indicators that signify typical cybercriminal operations but learns to generalize expected behavior of a particular enterprise given easily-accessible audit information. Nevertheless, a security-aware enterprise should leverage both global and local information, complementing SIGL with existing global malware network analytic tools.

#### Provenance-Based Intrusion Detection
- **Frappuccino [28]** analyzes system-level provenance graphs to model the behavior of Platform-as-a-Service applications using a dynamic sliding window algorithm to continuously monitor and check if application instances conform to the learned model.
- **StreamSpot [48]** uses a similar analytic framework, featurizing provenance graphs using a bag-of-subtrees approach and applying clustering algorithms to identify outlier graphs.

Compared to SIGL’s graph LSTM architecture, learning graphs using bag-of-subtrees is insufficient to capture the semantics of system evolution represented in provenance graphs, due to its insensitivity to event order. This limitation (i.e., order-insensitivity) is well-understood in NLP [72] and equally applicable in our domain. Clustering bag-of-subtrees is a reasonable step to perform outlier detection but burdens cyberanalysts with labor-intensive investigation, as even a single outlier often entails investigating a large provenance (sub)graph. SIGL lessens this burden by triaging abnormal process nodes within the graph.

**Han et al. [27]** designed a real-time anomaly detection system that analyzes streaming provenance graphs generated from system activity. It learns a dynamic execution model as the host system evolves, thus capturing behavioral changes in the model. This learning approach makes it suitable for detecting long-running persistent threats.

**Gao et al. [22]** designed a domain-specific query language, SAQL, to analyze large-scale provenance data and use various anomaly models to detect intrusions. To our best knowledge, SIGL is the first provenance-based anomaly detection system that secures software installations without prior attack knowledge.

#### Conclusion
We present SIGL, a malware detection system that secures software installation by analyzing the behavior of end-point systems through software installation graphs. SIGL uses a novel deep graph learning architecture to understand installation behavior and assist attack attribution. Our evaluation results show that SIGL achieves high detection performance using only a small amount of training data, while accurately guiding human analysts to identify the cause of alarms. SIGL is therefore a practical tool that can be deployed in any enterprise for effective and labor-saving malware detection.

#### Acknowledgments
We thank the anonymous reviewers and our shepherd Konrad Rieck who helped improve the paper. This research was supported in part by the US National Science Foundation under grant NSF 14-50277. We acknowledge the support of the Natural Sciences and Engineering Research Council of Canada (NSERC). Cette recherche a été financée par le Conseil de recherches en sciences naturelles et en génie du Canada (CRSNG). The views, opinions, and/or findings contained in this paper are those of the authors and should not be interpreted as representing the official views or policies, either expressed or implied, of the sponsors.

#### References
[References are listed as provided, with no changes made.]

---

This revised version aims to enhance clarity, coherence, and professionalism, making the text more accessible and informative for the reader.