### File Fuzzing and Advanced Techniques

File fuzzing is a powerful method for testing software against various file formats. Some fuzz-file databases can contain tens of millions of test files, which are used to test different versions of software. Advanced file fuzzing techniques rely on automatic file specification engines. These engines reverse-engineer the file structure and deploy fuzz tests accordingly. For example, the PROTOS Genome project, which has been ongoing since 2001, uses algorithms similar to those used in human genome research to map common structures and understand the internal logic.

When conducting file fuzzing, the first step is to analyze the file formats parsed by the application you wish to test. For instance, a standard web browser like Internet Explorer supports many image formats and their variants. Achieving full coverage with file fuzzing can be labor-intensive, so pregenerated test suites can provide a good starting point. The main challenge for quality assurance (QA) teams is determining when to stop fuzzing.

### Case Study: Fuzzing libpng

An interesting case study is the fuzzing of libpng, an open-source PNG image decoder used by applications such as Firefox, Opera, and Safari. In this case, we used a mutation-based approach and monitored the number of lines executed. We started with a single PNG file from the internet and created 100,000 fuzzed PNGs by randomly changing bytes. This resulted in approximately 10.7% code coverage. To evaluate the importance of the initial PNG, we repeated the process with four other PNGs. The results, shown in Table 9.2, indicate that the choice of the initial input significantly affects code coverage.

| **PNG** | **Code Coverage** |
|---------|-------------------|
| PNG 1   | 10.7%             |
| PNG 2   | 14.9%             |
| PNG 3   | 13.7%             |
| PNG 4   | 12.5%             |
| PNG 5   | 10.5%             |

Using a variety of initial files is crucial in mutation-based fuzzing because some files can achieve up to 50% more code coverage than others. When all 500,000 PNGs were combined, the overall code coverage was 17.4%, indicating that different PNGs exercise different parts of the code.

Next, we used a generational-based approach with SPIKEfile, which required writing a complete specification for the PNG file format and intelligently fuzzing each field. This produced 30,000 fuzzed PNGs and achieved 25.5% code coverage, roughly twice that of mutation-based fuzzing. No crashes were observed during this testing, though deep monitoring was not conducted.

### Web Application Fuzzing

Web application fuzzing simulates a browser that inputs malicious data into form fields, cookies, URLs, and other inputs, ignoring client-side validation. This type of fuzzing is popular due to the diverse developer community creating web applications. Most web designers use scripting languages and implement server-side scripts, leading to complex and user-tailored applications.

Web application fuzzing occurs at multiple layers. While some tools only test the highest layer with simple request-response test cases, others "spider" through websites to find individual targets like web forms and test them automatically. Some advanced tools can read server-side source code and test parameters left in scripts from older releases.

Real-life web fuzzing can be more complex, involving sequences of messages for business applications. For example, an e-commerce portal test might include logging in, adding items to a shopping cart, purchasing, and logging out. Model-based fuzzing is particularly useful here, and many security consultants have already conducted such tests.

### Browser Fuzzing

Browser fuzzing is primarily of interest to security researchers, as it can reveal vulnerabilities in widely used browsers. Browsers support a wide range of formats and can trigger local applications, making them easy targets for fuzzing. Example attack vectors include HTTP, HTML, JavaScript, ActiveX, XML, and media formats.

Browsers are also simple to instrument, as they run as stand-alone applications. A script can automatically start and kill the browser, requesting new test cases each time. Features like the "META REFRESH" tag can also be used to refresh pages automatically.

### Network Equipment Manufacturer Fuzzing

Fuzzing is critical for network equipment manufacturers, as updates can be difficult to deploy after release. Cisco Systems, for example, integrates fuzzing into their software development lifecycle.

#### Network Switch Fuzzing

Network switches and routers are critical devices in network deployments. They often run real-time operating systems like Windriver or QNX, posing challenges for on-device monitoring. Interfaces that can be fuzzed include router protocols, IP services, and proxy components. Common router protocols include BGP, OSPF, IS-IS, PIM-SM/DM, GRE, DVMRP, RSVP, VRRP, RIP, and MPLS/LDP.

#### Mobile Phone Fuzzing

Mobile phone fuzzing, especially for smartphones, is similar to fuzzing desktop workstations. The failure mode can be severe, such as flash-memory corruption. Challenges include the limited debugging capabilities of mobile operating systems like Symbian. However, the Symbian SDK allows running applications on standard workstations and fuzzing them at the API layer.

Interesting interfaces to fuzz in mobile phones include wireless (Bluetooth, WiFi, WiMAX), web browsers, email clients, VoIP clients, instant messaging, and media formats. One author found a vulnerability in Appleâ€™s iPhone using fuzzing techniques.

### Industrial Automation Fuzzing

Industrial control system equipment and software manufacturers face challenges in rigorously testing for security flaws. New vulnerabilities are often discovered after products are installed. The Achilles Vulnerability Assessment Project, launched by BCIT in 2003, aims to create a test platform for systematically stress-testing critical equipment and software.

SCADA fuzzing is unique due to the legacy infrastructures and the master-slave relationships in SCADA protocols. Key challenges include protocol diversity, ambiguity, access to test equipment, and performance constraints. The Achilles fuzzer suite includes storm-based test cases to discover and validate functional constraints and prevent false positives.

In summary, fuzzing is a versatile and essential technique for identifying security vulnerabilities across various types of software and hardware. By understanding the specific challenges and best practices for each domain, developers and security professionals can enhance the robustness and security of their systems.