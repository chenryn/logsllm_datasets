### Additional Benefit: Increased Resilience Against Denial-of-Service Attacks
By ensuring that alarms and reconfiguration commands can still reach their intended recipients, even in the presence of a flood of incoming packets, the system's resilience against denial-of-service (DoS) attacks is significantly enhanced. This is because critical messages do not have to compete for network access with the overwhelming traffic generated during a DoS attack.

### 4.2 Experimental Results
The experiments described in this section aim to provide an initial evaluation of the practicality and effectiveness of our proposed approach. Our primary focus is on in-depth, stateful, and application-level analysis of high-speed network traffic. For this purpose, we selected Snort as our reference sensor and enabled its packet reassembly and defragmentation features.

#### Traffic Data and Setup
We used traffic data from the MIT Lincoln Labs, which was part of the DARPA 1999 Intrusion Detection System (IDS) evaluation [5]. Specifically, we utilized the data from Tuesday of the fifth week. The traffic log was injected into a Gigabit link using `tcpreplay`. To simulate high-speed traffic, we increased the playback speed, assuming this would not affect the experiment's validity. We also assumed that the LL/MIT traffic is a reasonable approximation of real-world traffic, although this assumption has been debated. For the scope of our tests, we believe this assumption is reasonable.

#### Experiment 1: Offline Analysis
In the first experiment, we ran Snort on the `tcpdump` traffic log. The results showed 11,213 detections in 10 seconds with an offline throughput of 261 Mbps. The ruleset used included 961 rules.

#### Experiment 2: Single-Node Monitor
The second experiment involved running Snort on a single-node monitor, as depicted in Figure 2. In this setup, Snort reads directly from the network card. We measured the decrease in detection effectiveness as the traffic rate increased. The ruleset used included only the 18 rules that were triggered by the test data. The results, shown in Figure 3, indicate that performance degradation becomes significant at approximately 150 Mbps due to packet loss. This experiment identified the saturation point of the single-node setup.

#### Experiment 3: Increasing Number of Signatures
In the third experiment, we ran Snort in the same single-node setup with a constant traffic rate of 100 Mbps and an increasing number of signatures. The experiment started with the 18 signatures necessary to achieve maximum detection for the given data. As more signatures were added, the performance decreased, as shown in Figure 4. This experiment demonstrates that the single-node setup is limited by the number of signatures it can handle.

#### Experiments 4 and 5: Distributed Architecture
The fourth and fifth experiments repeated the previous two experiments using Snort sensors in the proposed distributed architecture. The results, presented in Figures 5 and 6, show that the distributed architecture offers higher throughput and is less sensitive to the number of signatures used. The drop in detection rate at high speeds, as seen in Figure 5, is due to packet loss in the scatterer, as the current network cards can handle up to about 170 Mbps.

### 5. Conclusion and Future Work
This paper presents the design, implementation, and experimental evaluation of a distributed network monitoring system. The system supports stateful, in-depth analysis of high-speed network traffic. The evaluation of the first prototype indicates that our approach is more scalable than the single-host monitor approach. However, the current results are preliminary, and a thorough evaluation will require testing in a real-world environment.

Future work will include a more detailed evaluation of the trade-offs in system configuration, the development of a dynamic load-balancing mechanism, and the use of hierarchically structured scatterers/slicers to achieve higher throughput levels.

### Acknowledgments
This research was supported by the Army Research Office under agreement DAAD19-01-1-0484 and by the Defense Advanced Research Projects Agency (DARPA) and Rome Laboratory, Air Force Materiel Command, USAF, under agreement F30602-97-1-0207. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright annotation.

The views and conclusions contained herein are those of the authors and should not be interpreted as representing the official policies or endorsements, either expressed or implied, of the Army Research Office, DARPA, Rome Laboratory, or the U.S. Government.

---

**References**
1. CISCO. CISCO Intrusion Detection System. Technical Information, Nov 2001.
2. S.T. Eckmann, G. Vigna, and R.A. Kemmerer. STATL: An Attack Language for State-based Intrusion Detection. In Proceedings of the ACM Workshop on Intrusion Detection Systems, Athens, Greece, November 2000.
3. NSS Group. Intrusion Detection and Vulnerability Assessment. Technical report, NSS, Oakwood House, Wennington, Cambridgeshire, UK, 2000.
4. ISS. BlackICE Sentry Gigabit. http://www.networkice.com/products/sentry_gigabit, November 2001.
5. MIT Lincoln Laboratory. DARPA Intrusion Detection Evaluation. http://www.ll.mit.edu/IST/ideval/, 1999.
6. V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In Proceedings of the 7th USENIX Security Symposium, San Antonio, TX, January 1998.
7. J. Pouzol and M. Ducassé. From Declarative Signatures to Misuse IDS. In W. Lee, L. M´e, and A. Wespi, editors, Proceedings of the RAID International Symposium, volume 2212 of LNCS, pages 1 – 21, Davis, CA, October 2001. Springer-Verlag.
8. M. Roesch. Writing Snort Rules: How To write Snort rules and keep your sanity. http://www.snort.org.
9. M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Proceedings of the USENIX LISA '99 Conference, November 1999.
10. R. Sekar, V. Guang, S. Verma, and T. Shanbhag. A High-performance Network Intrusion Detection System. In Proceedings of the 6th ACM Conference on Computer and Communications Security, November 1999.
11. Toplayer networks. http://www.toplayer.com, November 2001.
12. M. Undy. tcpreplay. Software Package, May 1999.