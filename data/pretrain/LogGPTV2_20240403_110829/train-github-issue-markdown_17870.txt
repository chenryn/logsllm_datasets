While its a neat feature, to load scripts as if they were in a web browser, in
the examples I've come across, I didn't see anything similar to the javascript
'integrity' attribute to ensure the remote source code matches the loaded
remote code.
Does Deno have such a feature? If so, disregard the rest - if not, my question
is as such:
Lets say some deno code (Package A) exists in the wild, that depends on deno
scripts from:
https://ahungry.com/deno-package.ts (this could be example.com, but I'm not
sure that does expire)
Unlike a central repository similar to npm (which has its own problems),
domain names are not permanent, and are time expired.
If ahungry.com was to expire, and a malicious actor then registered it, and
hosted a malicious deno-package.ts script on their remote end, a problem
arises - how does Deno ensure the user doesn't run this altered code?
If this is not the first time the user has executed Package A, perhaps its not
going to be an issue until the user runs the deno upgrade (remote packages)
command, at which point Deno could detect the TLS fingerprint of the remote is
now different.
But, for a first time user of Package A, that has never run 'deno' before, and
therefore has no hidden cache of deno packages - wouldn't it eagerly pull in
and execute this code?
NPM is not suspect to this same problem, unless they expired npm packages
yearly and were to allow anyone to claim other's slots after this time period
(which would seem ridiculous in the context of package hosting).