sĞƌŝĨǇ(cid:4666)(cid:1868)(cid:1863)(cid:1829)(cid:481) (cid:6)(cid:6)(cid:25)(cid:481) (cid:11)(cid:884)(cid:4667)
^ĞƌǀĞƌ,ĞůůŽ͗(cid:3) (cid:1870)(cid:1871) (cid:1370) (cid:836)(cid:4668)(cid:882)(cid:481)(cid:883)(cid:4669)(cid:1864)(cid:3)
нĂƌůǇĂƚĂ/ŶĚŝĐĂƚŝŽŶ
нĞǀĞů(cid:3)ϭ
(cid:266)(cid:266) >ĞǀĞů(cid:3)Ϯ
(cid:266)(cid:266)
>ĞǀĞů(cid:3)ϯ
/ŶŝƚŝĂů(cid:3)ĨƵůů(cid:3)ŚĂŶĚƐŚĂŬĞ
W^ 0
pired authentication type of each stage from the set of
supported properties AUTH, where M is the maximum stage
and authi indicates the authentication level in stage i > 0
indicates the session
. sid ∈ ({0, 1}∗ ∪ {⊥})M: sidi[⊥]
. cid ∈ ({0, 1}∗ ∪ {⊥})M: cidi[⊥] indicates the contributive
. K ∈ ({0, 1}∗ ∪ {⊥})M: Ki[⊥] indicates the established
. stkey ∈ {fresh, revealed}M: stkey,i[fresh] indicates the state
. tested ∈ {true, false}M: test indicator testedi[false], where
of the session key in stage i > 0
session key in stage i > 0
identiﬁer in stage i > 0
. auth ∈ AUTH ⊆ {unauth, unilateral, mutual}M: the as-
true means that Ki has been tested
By convention, if we add a partly speciﬁed tuple (label, U,
V , role, mode, lev, kidU , kidV , psidU,V,k, auth) to ListS, then
the other tuple entries are set to their default value. As labels
are unique, we write as a shorthand, e.g., label.sid for the
element sid in the tuple with label in ListS, and analogously
for other entries.
C. Adversary Model
We consider a probabilistic polynomial-time (PPT) adver-
sary A which controls the communication between all parties,
enabling interception, injection, and dropping of messages. As
in [22] and [19] we distinguish different levels of the following
three (orthogonal) security aspects of a multiple handshakes
protocol: forward secrecy, authentication, and key dependence.
Forward Secrecy. In our model, stage-j forward secrecy
indicates that the session keys Ki established at some stage
i ≥ j remain secure when the involved long-term secrets get
exposed, whereas keys at stages i < j become insecure.
Authentication. As above, we capture the authenticity
properties by a vector (auth1,··· , authM ) ∈ AUTH ⊆
{unauth, unilateral, mutual}M specifying for each stage i in
a session whether it is unauthenticated (authi = unauth),
unilaterally authenticated (authi = unilateral), or mutually
authenticated (authi = mutual). Moreover, we treat all au-
thenticity variants of a protocol concurrently in our model: we
allow concurrent executions of the different key exchange sub
protocols, simultaneously covering all potential unauthenticat-
ed, unilaterally, or mutually authenticated runs. Given that the
authenticity of keys is a strictly non-decreasing property with
progressing stage, we also use the following simpler notation:
. no authentication: the keys of all stages are unauthenti−
. stage-k unilateral authentication: the keys of stage i are
unauthenticated for i < k and unilaterally unauthenticated
for i ≥ k