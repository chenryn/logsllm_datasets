### Re-activating the LFM Session

1. **Re-activate the LFM session** as follows:
   ```shell
   [edit]
   user@host # activate protocols oam ethernet link-fault-management interface <interface-name>
   ```

2. **Commit the configuration**:
   ```shell
   [edit]
   user@host # commit
   ```

3. **Verify that the transmission of LFM keepalive packets is delegated from the PPM process to the hardware**. To ensure that inline transmission is enabled, use the following command:
   ```shell
   user@host> show oam ethernet link-fault-management detail
   ```

4. **Example Output**:
   ```plaintext
   Oct 18 02:05:05
   Interface: ge-0/0/0
   Status: Running, Discovery state: Active Send Local
   Transmit interval: 1000ms, PDU threshold: 3 frames, Hold time: 0ms
   Peer address: 00:00:00:00:00:00
   Flags:0x8
   OAM receive statistics:
     Information: 0, Event: 0, Variable request: 0, Variable response: 0
     Loopback control: 0, Organization specific: 0
   OAM flags receive statistics:
     Critical event: 0, Dying gasp: 0, Link fault: 0
   OAM transmit statistics:
     Information: 1, Event: 0, Variable request: 0, Variable response: 0
     Loopback control: 0, Organization specific: 0
   OAM received symbol error event information:
     Events: 0, Window: 0, Threshold: 0
     Errors in period: 0, Total errors: 0
   OAM received frame error event information:
     Events: 0, Window: 0, Threshold: 0
     Errors in period: 0, Total errors: 0
   OAM received frame period error event information:
     Events: 0, Window: 0, Threshold: 0
     Errors in period: 0, Total errors: 0
   OAM received frame seconds error event information:
     Events: 0, Window: 0, Threshold: 0
     Errors in period: 0, Total errors: 0
   OAM transmitted symbol error event information:
     Events: 0, Window: 0, Threshold: 1
     Errors in period: 0, Total errors: 0
   OAM current symbol error event information:
     Events: 0, Window: 0, Threshold: 1
     Errors in period: 0, Total errors: 0
   OAM transmitted frame error event information:
     Events: 0, Window: 0, Threshold: 1
     Errors in period: 0, Total errors: 0
   OAM current frame error event information:
     Events: 0, Window: 0, Threshold: 1
     Errors in period: 0, Total errors: 0
   Loopback tracking: Disabled, Loop status: Unknown
   Detect LOC: Disabled, LOC status: Unknown
   ```

   - **Note**: The OAM transmit statistics are not updated when inline transmission of LFM keepalive packets is enabled.

### Disabling Inline LFM

1. **Verify if any existing LFM session is online and active**.
2. **Deactivate the LFM session** and commit the changes.
3. **Disable inline LFM** by deleting the `hardware-assisted-keepalives` statement and commit the configuration.
4. **Reactivate the LFM session** and commit the configuration.

### Enabling Inline Mode of Performance Monitoring for Maximum Scaling

**Performance monitoring** is useful for analyzing network traffic patterns over time, helping to identify and address network issues before they become critical.

#### Default Behavior

By default, performance monitoring packets are processed by the CPU of a line-card, such as the Modular Port Concentrator (MPC). Enabling inline mode delegates the processing of protocol data units (PDUs) to the forwarding ASIC (hardware), reducing the load on the CPU and allowing for an increased number of performance monitoring sessions.

#### Configuration Steps

1. **Configure the network services mode**:
   ```shell
   [edit chassis]
   user@host# set network-services enhanced-ip
   ```

2. **Enable enhanced connectivity fault management mode**:
   ```shell
   [edit protocols oam ethernet connectivity-fault-management]
   user@host# set enhanced-cfm-mode
   ```

3. **Configure the enhanced iterator profile**:
   ```shell
   [edit protocols oam ethernet connectivity-fault-management performance-monitoring]
   user@host# set enhanced-sla-iterator measurement-interval <value>
   ```

4. **Enable inline performance monitoring**:
   ```shell
   [edit protocols oam ethernet connectivity-fault-management performance-monitoring]
   user@host# set hardware-assisted-pm
   ```

5. **(Optional) Enable inline transmission of CCMs**:
   ```shell
   [edit protocols oam ethernet connectivity-fault-management performance-monitoring]
   user@host# set hardware-assisted-keepalives enable
   ```

6. **Commit the configuration**:
   ```shell
   [edit protocols oam ethernet connectivity-fault-management performance-monitoring]
   user@host# commit
   ```

#### Supported Scaling Values

The scaling values for inline performance monitoring and inline transmission of continuity check messages (CCMs) are based on different cycle-time interval values. These values do not consider the load from other protocols, so actual scaling may vary depending on the system configuration.

**Tables**:
- Table 21: Scaling Values for CFM and PM (CCM Interval: 1 sec and PM Interval: 1 sec)
- Table 22: Scaling Values for CFM and PM (CCM Interval: 1 sec and PM Interval: 100 ms)
- Table 23: Scaling Values for CFM and PM (CCM Interval: 100 ms and PM Interval: 1 sec)
- Table 24: Scaling Values for CFM and PM (CCM Interval: 100 ms and PM Interval: 100 ms)

### SNMP Architecture and MIBs Overview

**SNMP (Simple Network Management Protocol)** is used for managing and monitoring network devices. A typical SNMP implementation includes three components:

1. **Network Management System (NMS)**: Hardware and software used to monitor and administer a network.
2. **Managed Device**: Any device on the network managed by the NMS, such as routers and switches.
3. **SNMP Agent**: The SNMP process on the managed device that communicates with the NMS, exchanging network management information and controlling access to the MIB.

#### SNMP MIBs

- **Standard MIBs**: Created by the IETF and documented in RFCs.
- **Enterprise-specific MIBs**: Developed and supported by specific equipment manufacturers.

#### SNMP Communication

- **Get, GetBulk, and GetNext requests**: The manager requests information from the agent.
- **Set requests**: The manager changes the value of a MIB object controlled by the agent.
- **Traps and Informs**: The agent sends notifications to the manager for significant events.

### SNMP Implementation in Junos OS

**Junos OS** supports SNMP using both standard and enterprise-specific MIBs. By default, SNMP is not enabled on Junos OS devices.

#### Key Components

- **Master SNMP Agent**: Manages the SNMP primary agent (snmpd).
- **Subagents**: Handle specific sets of MIBs.
- **Processes**: Share data with subagents when polled for SNMP data.

#### SNMP Versions

- **SNMPv1**: Initial implementation.
- **SNMPv2c**: Revised protocol with community strings for authentication.
- **SNMPv3**: Enhanced security with USM and VACM.

#### SNMP Communication Flow

When an NMS polls the primary agent, the primary agent either shares the data directly or delegates the request to the appropriate subagent, which then retrieves the data from the kernel or relevant process and returns it to the NMS.

### Related Documentation

- **Configure Continuity Check Messages**
- **Introduction to OAM Link Fault Management (LFM)**
- **SNMP Architecture and SNMP MIBs Overview**
- **Understand SNMP Implementation in Junos OS**
- **Configure SNMP in Junos OS**
- **Configure Options on Managed Devices for Better SNMP Response Time**
- **Enterprise Specific Utility MIB to Enhance SNMP Coverage**
- **Optimize the Network Management System Configuration for the Best Results**
- **Interfaces to Accept SNMP Requests**
- **Configure SNMP for Routing Instances**
- **Configure SNMP Remote Operations**
- **SNMP Traps**
- **SNMP Traps Supported by Junos OS**
- **Trace SNMP Activity**
- **Access Privileges for an SNMP Group**
- **Configure Local Engine ID on SNMPv3**
- **Configure SNMPv3**
- **Configure SNMPv3 Authentication Type and Encryption Type**
- **SNMPv3 Traps**
- **SNMPv3 Informs**
- **SNMP Communities**
- **MIB Views**
- **SNMP MIBs Supported by Junos OS and Junos OS Evolved**
- **Junos OS SNMP FAQs**