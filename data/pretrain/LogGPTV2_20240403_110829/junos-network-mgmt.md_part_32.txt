360
4. Re-activate the LFM session as follows:
[edit]
user@host # activate protocols oam ethernet link-fault-management interface interface-name
5. Commit the configuration.
[edit]
user@host # commit
6. Verify that the trasnmission of LFM keepalive packets is delegated from the ppm process to the
hardware. To verify that you have enabled inline transmission, issue the following command:
user@host> show oam ethernet link-fault-management detail
Oct 18 02:05:05
Interface: ge-0/0/0
Status: Running, Discovery state: Active Send Local
Transmit interval: 1000ms, PDU threshold: 3 frames, Hold time: 0ms
Peer address: 00:00:00:00:00:00
Flags:0x8
OAM receive statistics:
Information: 0, Event: 0, Variable request: 0, Variable response: 0
Loopback control: 0, Organization specific: 0
OAM flags receive statistics:
Critical event: 0, Dying gasp: 0, Link fault: 0
OAM transmit statistics:
Information: 1, Event: 0, Variable request: 0, Variable response: 0 = even after 10
seconds count is still 1
Loopback control: 0, Organization specific: 0
OAM received symbol error event information:
Events: 0, Window: 0, Threshold: 0
Errors in period: 0, Total errors: 0
OAM received frame error event information:
Events: 0, Window: 0, Threshold: 0
Errors in period: 0, Total errors: 0
OAM received frame period error event information:
Events: 0, Window: 0, Threshold: 0
Errors in period: 0, Total errors: 0
OAM received frame seconds error event information:
Events: 0, Window: 0, Threshold: 0
Errors in period: 0, Total errors: 0
361
OAM transmitted symbol error event information:
Events: 0, Window: 0, Threshold: 1
Errors in period: 0, Total errors: 0
OAM current symbol error event information:
Events: 0, Window: 0, Threshold: 1
Errors in period: 0, Total errors: 0
OAM transmitted frame error event information:
Events: 0, Window: 0, Threshold: 1
Errors in period: 0, Total errors: 0
OAM current frame error event information:
Events: 0, Window: 0, Threshold: 1
Errors in period: 0, Total errors: 0
Loopback tracking: Disabled, Loop status: Unknown
Detect LOC: Disabled, LOC status: Unknown
The OAM transmit statistics are not updated. When you enable inline transmission of LFM keepalive
packets, the OAM transmit statistics are not updated.
To disable inline LFM, verify if any existing established LFM session is online and active. Deactivate the
LFM session and commit. Disable inline LFM by deleting the hardware-assisted-keepalives statement and
commit. Then, reactivate LFM session and commit the configuration.
SEE ALSO
hardware-assisted-keepalives (lfm)
Enabling Inline Mode Of Performance Monitoring To Achieve Maximum Scaling
Performance monitoring is useful for studying the traffic pattern in a network over a period of time. It
helps to identify network problems before you are impacted by network defects.
By default, performance monitoring packets are handled by the CPU of a line-card, such as Modular Port
Concentrator (MPC). Enabling inline mode of performance monitoring delegates the processing of the
protocol data units (PDUs) to the forwarding ASIC (that is, to the hardware). By enabling inline mode of
performance monitoring, the load on the CPU of the line-card is reduced and you can configure an
increased number of performance monitoring sessions and achieve maximum scaling for service OAM
performance monitoring sessions. On MX Series routers, you can configure inline mode of performance
monitoring only if the network services mode on the router is configured to enhanced-ip and enhanced
connectivity fault management (enhanced-cfm-mode)) is configured.
By enabling inline mode of performance monitoring, you can achieve maximum scaling for performance
monitoring sessions. To achieve maximum scaling for performance monitoring sessions, you must enable
scaling of continuity check messages (CCMs) sessions. To enable scaling of CCM sessions, enable inline
362
transmission of continuity check messages. For more information on inline transmission of continuity
check messages, see "Enabling Inline Transmission of Continuity Check Messages for Maximum Scaling"
on page 356. To view the supported scaling values for CCM and PM, see "Supported Inline CCM and
Inline PM Scaling Values" on page 364.
Inline mode of performance monitoring is supported only for proactive mode of frame delay
measurement (Two-way Delay Measurements) and synthetic loss measurements (SLM)sessions.
Performance monitoring functions configured using the iterator profile (CFM)are referred to as proactive
performance monitoring. Inline mode of performance monitoring for frame loss measurement using
service frames (LM) is not supported.
NOTE: MPC3E (MX-MPC3E-3D) and MPC4E (MPC4E-3D-32XGE-SFPP and
MPC4E-3D-2CGE-8XGE) do not support inline mode of performance monitoring. User-defined
Data TLV is not supported if you have configured inline mode of performance monitoring. Also,
only 12 history records per PM sessions are supported.
We recommend that you enable inline mode of performance monitoring before you configure the
performance monitoring sessions as the change may interfere with the existing performance
monitoring sessions.
To enable inline mode of performance monitoring, perform the following steps:
1. In configuration mode, go to the [edit chassis] hierarchy level and configure the network services
mode of the router. The network service mode of the router must be configured as enhanced ip to
enable enhanced connectivity fault management (CFM) mode.
NOTE: If the network services mode is not enhanced-ip, and you have enabled enhanced CFM,
the following warning message is displayed:
[edit protocols oam ethernet] 'connectivity-fault-management' enhanced ip is not effective please
configure enhanced ip and give router reboot
[edit chassis]
user@host# set network-services enhanced-ip
2. In configuration mode, go to the [edit protocols oam ethernet connectivity-fault-management] hierarchy
level and enable enhanced connectivity fault management mode by using the enhanced-cfm-mode option.
[edit]
user@host# set protocols oam ethernet connectivity-fault-management enhanced-cfm-mode
363
3. In configuration mode, go to the [edit protocols oam ethernet connectivity-fault-management performance-
monitoring] hierarchy level. Configure the enhanced iterator profile by using the enhanced-sla-iterator
option and specify the measurement interval by using the measurement-interval option.
[edit]
user@host# edit protocols oam ethernet connectivity-fault-management performance-monitoring
enhanced-sla-iterator measurement-interval value
4. Enable inline performance monitoring.
NOTE: You can enable inline mode of performance monitoring for both the originator and the
responder of the service OAM performance monitoring sessions by using the hardware-assisted-
pm command.
[edit protocols oam ethernet connectivity-fault-management performance-monitoring]
user@host# set hardware-assisted-pm
5. (Optional) Enable inline transmission of CCMs to enable better scaling if inline transmission of CCMs
is not automatically enabled.
NOTE: You can achieve better scaling if both inline performance monitoring and inline
transmission of CCMs is enabled.
[edit protocols oam ethernet connectivity-fault-management performance-monitoring]
user@host# set hardware-assisted-keepalives enable
6. Commit the configuration.
[edit protocols oam ethernet connectivity-fault-management performance-monitoring]
user@host# commit
SEE ALSO
Enabling Enhanced Connectivity Fault Management Mode | 50
Network Services Mode Overview
364
hardware-assisted-pm
Supported Inline CCM and Inline PM Scaling Values
This topic lists the scaling values for inline mode of performance monitoring and inline transmission of
continuity check messages. The scaling values are based on the different cycle-time interval values. Each
table lists the maximum number of connectivity fault management (CFM) sessions and performance
monitoring (PM) sessions per line card and per chassis when you configure inline CCM, enhanced CFM,
and enhanced PM by using the hardware-assisted-keepalives, enhanced-cfm-mode, and hardware-assisted-pm
options.
NOTE: The scaling values do not consider the load from other protocols in the system and so the
actual realized scaling values for line card and chassis vary depending on other protocol
configurations and scaling in the system. We recommend that you configure DDoS for CFM.
Limit the number of CFM packets, that are sent to the CPU of the line card, to 3000. Limiting the
number of packets safeguards the CPU from scaled CFM configurations of various CFM protocol
events.
Table 21 on page 364 lists the maximum number of connectivity fault management (CFM) sessions and
performance monitoring (PM) sessions per line card and per chassis when you configure both the CCM
interval and the PM interval as 1 second.
Table 21: Scaling Values for CFM and PM (CCM Interval: 1 sec and PM Interval: 1 sec )
CFM Line Card Scale PM Line Card Scale CFM Chassis Scale PM Chassis Scale
4000 4500 16000 16000
6000 3750 16000 16000
7000 3375 16000 16000
8000 3000 16000 16000
Table 22 on page 365 lists the maximum number of connectivity fault management (CFM) sessions and
performance monitoring (PM) sessions per line card and per chassis when you configure the CCM
interval as 1 second and the PM interval as 100 milliseconds.
365
Table 22: Scaling Values for CFM and PM (CCM Interval: 1 sec and PM interval: 100 ms )
CFM Line Card Scale PM Line Card Scale CFM Chassis Scale PM Chassis Scale
4000 450 12000 4000
6000 375 12000 4000
7000 337 12000 4000
8000 300 12000 4000
Table 23 on page 365 lists the maximum number of connectivity fault management (CFM) sessions and
performance monitoring (PM) sessions per line card and per chassis when you configure the CCM
interval as 100 milliseconds and the PM interval as 1 second.
Table 23: Scaling Values for CFM and PM (CCM Interval: 100 ms and PM interval: 1 sec )
CFM Line Card Scale PM Line Card Scale CFM Chassis Scale PM Chassis Scale
4000 3000 8000 6000
3000 3750 8000 6000
2000 4500 8000 6000
1000 4500 8000 6000
Table 24 on page 365 lists the maximum number of connectivity fault management (CFM) sessions and
performance monitoring (PM) sessions per line card and per chassis when you configure both the CCM
interval and the PM interval as 100 milliseconds.
Table 24: Scaling Values for CFM and PM (CCM Interval: 100 ms and PM interval: 100 ms )
CFM Line Card Scale PM Line Card Scale CFM Chassis Scale PM Chassis Scale
4000 300 8000 3000
366
Table 24: Scaling Values for CFM and PM (CCM Interval: 100 ms and PM interval: 100 ms ) (Continued)
CFM Line Card Scale PM Line Card Scale CFM Chassis Scale PM Chassis Scale
3000 375 8000 3000
2000 450 8000 3000
1000 450 8000 3000
SEE ALSO
enhanced-cfm-mode
hardware-assisted-pm
RELATED DOCUMENTATION
Configure Continuity Check Messages | 107
Introduction to OAM Link Fault Management (LFM) | 132
3
PART
Network Monitoring by using SNMP
SNMP Architecture and SNMP MIBs Overview | 369
Understand SNMP Implementation in Junos OS | 371
Configure SNMP in Junos OS | 379
Configure Options on Managed Devices for Better SNMP Response Time | 399
Enterprise Specific Utility MIB to Enhance SNMP Coverage | 402
Optimize the Network Management System Configuration for the Best Results |
405
Interfaces to Accept SNMP Requests | 407
Configure SNMP for Routing Instances | 410
Configure SNMP Remote Operations | 432
SNMP Traps | 454
SNMP Traps Supported by Junos OS | 467
Trace SNMP Activity | 514
Access Privileges for an SNMP Group | 524
Configure Local Engine ID on SNMPv3 | 532
Configure SNMPv3 | 533
Configure SNMPv3 Authentication Type and Encryption Type | 540
SNMPv3 Traps | 543
SNMPv3 Informs | 550
SNMP Communities | 558
MIB Views | 572
SNMP MIBs Supported by Junos OS and Junos OS Evolved | 575
Junos OS SNMP FAQs | 656
369
SNMP Architecture and SNMP MIBs Overview
IN THIS SECTION
SNMP Architecture | 369
SNMP Architecture
A typical SNMP implementation includes three components:
• Network Management System (NMS)—A combination of hardware (devices) and software (the SNMP
manager) used to monitor and administer a network. The manager polls the devices on your network
as you specify for information about network connectivity, activity, and events.
• Managed device—A managed device (also called a network element) is any device on a network
managed by the NMS. Routers and switches are common examples of managed devices.
• SNMP agent—The SNMP agent is the SNMP process that resides on the managed device and
communicates with the NMS. The SNMP agent exchanges network management information with
the SNMP manager software running on an NMS, or host. The agent responds to requests for
information and actions from the manager. The agent also controls access to the agent’s MIB, the
collection of objects that can be viewed or changed by the SNMP manager.
This topic contains the following sections:
SNMP MIBs
You can store SNMP data in a highly structured, hierarchical format known as a Management
Information Base (MIB). A MIB defines managed objects in a network device.
The MIB structure is based on a tree structure and defines a grouping of objects into related sets. Each
object in the MIB is associated with an object identifier (OID), which names the object. The “leaf” in the
tree structure is the actual managed object instance, which represents a resource, event, or activity that
occurs in your network device.
MIBs are either standard or enterprise-specific. For more information, see Table 25 on page 370.
370
Table 25: Standard and Enterprise-specific MIBs
Standard MIBs Enterprise-specific MIBs
Created by the Internet Engineering Task Force (IETF) Developed and supported by a specific equipment
and documented in various RFCs. Depending on the manufacturer. If your network contains devices that
vendor, many standard MIBs are delivered with the have enterprise-specific MIBs, you must obtain them
NMS software. You can also download the standard from the manufacturer and compile them into your
MIBs from the IETF website, www.ietf.org, and network management software.
compile them into your NMS, if necessary.
For a list of standard supported MIBs, see Standard For a list of Juniper Networks enterprise-specific
SNMP MIBs Supported by Junos OS. supported MIBs, see Enterprise-Specific SNMP MIBs
Supported by Junos OS.
SNMP Manager and Agent Authentication and Communication
SNMP uses a basic form of authentication called community strings to control access between a
manager and remote agents. Community strings are administrative names used to group collections of
devices (and the agents running on them) into common management domains. If a manager and an agent
share the same community, they can talk to one another. Many people associate SNMP community
strings with passwords and keys because the jobs they do are similar. As a result, SNMP communities
are traditionally referred to as strings.
Communication between the agent and the manager occurs in one of the following forms:
• Get, GetBulk, and GetNext requests—The manager requests information from the agent; the agent returns
the information in a Get response message.
• Set requests—The manager changes the value of a MIB object controlled by the agent; the agent
indicates status in a Set response message.
• Traps notification—The agent sends traps to notify the manager of significant events that occur on the
network device.
SNMP Traps and Informs
Routers can send notifications to SNMP managers when significant events occur on a network device,
most often errors or failures. You can send SNMP notifications as traps or inform requests.
SNMP traps are unconfirmed notifications and SNMP informs are confirmed notifications.
SNMP traps are either standard or enterprise-specific. For more information, see Table 26 on page 371.
371
Table 26: Standard and Enterprise-specific Traps
Standard Traps Enterprise-specific Traps
Created by the IETF and documented in various RFCs. Developed and supported by a specific equipment
The standard traps are compiled into the network manufacturer. If your network contains devices that
management software. You can also download the have enterprise-specific traps, you must obtain them
standard traps from the IETF website, www.ietf.org. from the manufacturer and compile them into your
network management software.
For more information about standard traps supported For more information about enterprise-specific traps
by the Junos OS, see Standard SNMP Traps Supported supported by the Junos OS, see Enterprise-Specific
on Devices Running Junos OS. SNMP Traps Supported by Junos OS. For information
about system logging severity levels for SNMP traps,
see No Link Title.
With traps, the receiver does not send any acknowledgment when it receives a trap, and the sender
cannot determine if the trap was received. To increase reliability, SNMP informs are supported in
SNMPv3. An SNMP manager that receives an inform acknowledges the message with a response. For
information about SNMP informs, see No Link Title.
Understand SNMP Implementation in Junos OS
IN THIS SECTION
Loading MIB Files to a Network Management System | 375
Understand the Integrated Local Management Interface | 378
SNMP on Junos OS
On Junos OS, SNMP uses both standard (developed by the IETF and documented in RFCs) and Juniper
Networks enterprise-specific MIBs.
372
NOTE: By default, SNMP is not enabled on devices running Junos OS.
In Junos OS, the processes that maintain the SNMP management data include the following:
• A master SNMP agent resides on the managed device and is managed by the NMS, or host.
The Junos OS SNMP agent software consists of an SNMP primary agent (known as the SNMP
process, or snmpd). It resides on the managed device and is managed by the NMS or host.
• Various subagents that reside on different modules of Junos OS, such as the Routing Engine. The
master SNMP agent delegates all SNMP requests to the subagents. Each subagent is responsible for
the support of a specific set of MIBs.
• Junos OS processes that share data with the subagents when polled for SNMP data (for example,
interface-related MIBs).
The community string is the first level of management authentication implemented by the SNMP agent
in Junos OS.
See the following sections for more information.
Junos OS Support for SNMP Versions
The Junos OS supports the following versions of SNMP. For more information, see Table 27 on page
372.
Table 27: Junos OS Support for SNMP Versions
SNMP Versions Description
SNMPv1 The initial implementation of SNMP that defines the
architecture and framework for SNMP.
373
Table 27: Junos OS Support for SNMP Versions (Continued)
SNMP Versions Description
SNMPv2c The revised protocol, with improvements to
performance and manager-to-manager
communications. Specifically, SNMPv2c implements
community strings, which act as passwords when
determining who, what, and how the SNMP clients can
access the data in the SNMP agent. The community
string is contained in SNMP Get, GetBulk, GetNext, and
Set requests. The agent might require a different
community string for Get, GetBulk, and GetNext requests
(read-only access) than it does for Set requests (read-
write access).
SNMPv3 SNMPv3—The most up-to-date protocol focuses on
security. SNMPv3 defines a security model, a user-
based security model (USM), and a view-based access
control model (VACM). SNMPv3 USM provides data
integrity, data origin authentication, message replay
protection, and protection against disclosure of the
message payload. SNMPv3 VACM provides access
control to determine whether a specific type of access
(read or write) to the management information is
allowed.
In addition, the Junos OS SNMP agent software accepts IPv4 and IPv6 addresses for transport over IPv4
and IPv6. For IPv6, the Junos OS supports the following features:
• SNMP data over IPv6 networks
• IPv6-specific MIB data
• SNMP agents for IPv6
System Logging Severity Levels for SNMP Traps
For some traps, when a trap condition occurs, regardless of whether the SNMP agent sends a trap to an
NMS, the trap is logged if the system logging is configured to log an event with that system logging
severity level.
374
For more information about system logging severity levels for standard traps, see Standard SNMP Traps
Supported by Junos OS . For more information about system logging severity levels for enterprise-
specific traps, see Enterprise-Specific SNMP Traps Supported by Junos OS.
SNMP Communication Flow
When an NMS polls the primary agent for data, the primary agent immediately shares the data with the
NMS if the requested data is available from the primary agent or one of the subagents. However, if the
requested data does not belong to those categories that are maintained by the primary agent or the
subagents, the subagent polls the Junos OS kernel or the process that maintains that data. On receiving
the required data, the subagent passes the response back to the primary agent, which in turn passes it to
the NMS.
Figure 21 on page 374 shows the communication flow among the NMS, SNMP primary agent (snmpd),
SNMP subagents, Junos OS kernel, and the Packet Forwarding Engine.
Figure 21: SNMP Communication Flow
When a significant event, most often an error or a failure, occurs on a network device, the SNMP agent
sends notifications to the SNMP manager. The SNMP implementation in Junos OS supports two types
of notifications: traps and informs. Traps are unconfirmed notifications, whereas informs are confirmed