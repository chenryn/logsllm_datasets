pages 21–30, 2015.
[65] Statista.
Average monthly
outbound minutes.
https://www.statista.com/statistics/273902/
average-monthly-outbound-mobile-voice-
minutes-per-person-in-the-uk/, 2013.
[66] Y. Stylianou. Voice Transformation: A Survey.
In
IEEE International Conference on Acoustics, Speech and
Signal Processing, 2009.
[67] O. Tange et al. Gnu parallel-the command-line power
tool. ;login: The USENIX Magazine: Volume 36, Number
1, 2011.
[68] TrapCall. https://www.trapcall.com/, 2016.
[69] P. Traynor, P. McDaniel, and T. La Porta. Security for
Telecommunications Networks.
Number 978-0-387-
72441-6 in Advances in Information Security Series.
Springer, August 2008.
590    26th USENIX Security Symposium
USENIX Association
[70] G.-H. Tu, C.-Y. Li, C. Peng, Y. Li, and S. Lu. New
Security Threats Caused by IMS-based SMS Service in
4G LTE Networks. In Proceedings of the ACM SIGSAC
Conference on Computer and Communications Security,
2016.
[71] H. Tu, A. Doup´e, Z. Zhao, and G.-J. Ahn. SoK: Every-
one Hates Robocalls: A Survey of Techniques against
Telephone Spam. 2016 IEEE Symposium on Security and
Privacy (S&P), 2016.
[72] H. Tu, A. Doup´e, Z. Zhao, and G.-J. Ahn. Toward
Authenticated Caller ID Transmission: The Need for a
Standardized Authentication Scheme in Q.731.3 Calling
In Proceedings of the
Line Identiﬁcation Presentation.
ITU Kaleidoscope (ITU), Nov. 2016.
[73] D. Tynan.
The terror of
swatting:
tracking
down
law is
https://www.theguardian.com/technology/
2016/apr/15/swatting-law-teens-anonymous-
prank-call-police, Apr 2016.
high-tech
prank
how the
callers.
[74] Vassilis Prevelakis and Diomidis Spinellis. The Athens
Affair. IEEE Spectrum, June 2007.
[75] X. Wang and R. Zhang. VoIP Security: Vulnerabilities,
Exploits and Defenses. Elsevier Advances in Computers,
March 2011.
[76] A. Whitten and J. D. Tygar. Why Johnny Can’t Encrypt:
In 25th USENIX
A Usability Evaluation of PGP 5.0.
Security Symposium (USENIX Security 16), 1999.
[77] P. Zimmermann, A. Johnston, and J. Callas. RFC 6189
ZRTP: Media Path Key Agreement for Unicast Secure
RTP. Internet Engineering Task Force, 2011.
A RSH Digest Construction
In this appendix, we describe the construction of the RSH digest
used by AuthentiCall for channel binding and content integrity.
There are a number of constructions of speech digests, and
they all use the following basic process. First, they compute
derived features of speech. Second, they deﬁne a compression
function to turn the real-valued features into a bit string.
In
this paper, we use the construction of Jiao et al. [36], which
they call RSH. We chose this technique over others because it
provides good performance on speech at a low-bitrate, among
other properties. We note that the original work did not eval-
uate the critical case where an adversary can control the audio
being hashed. Our evaluation shows that RSH maintains audio
integrity in this crucial case. The construction also selects
audio probabilistically; we show in Appendix B that the digest
indeed protects all of the semantic content in the input audio.
Finally, to our knowledge we are the ﬁrst to use any robust
speech digest for an authentication and integrity scheme.
Figure 13 illustrates how RSH computes a 512-bit digest for
one second of audio. In the ﬁrst step of calculating a digest,
RSH computes the Line Spectral Frequencies (LSFs) of the
input audio. LSFs are used in speech compression algorithms
to represent the major frequency components of human voice,
which contain the majority of semantic information in speech.
Figure 13: This ﬁgure illustrates the digest construction
described in Section 5.1. Audio digests summarize call
content by taking one second of speech data, deriving
audio features from the data, and compressing blocks of
those features into a bit string.
That is, LSFs represent phonemes – the individual sound
units present in speech. While pitch is useful for speaker
recognition, LSFs are not a perfect representation of all of
the nuances of human voice. This is one reason why it is
sometimes difﬁcult for humans to conﬁdently recognize voices
over the phone. This means that the digest more accurately
represents semantic content rather than the speaker’s voice
characteristics. This is important because a number of tech-
niques are able to synthesize new speech that evades speaker
recognition from existing voice samples [38,66]. Finally, LSFs
are numerically stable and robust to quantization — meaning
that modest changes in input yield small changes in output. In
RSH, the input audio is grouped into 30ms frames with 25ms
audio overlap between frames, and 10 line spectral frequencies
are computed for each frame to create a matrix L.
The second phase of digest computation involves com-
pressing the large amount of information about the audio into
a digest. Because audio rarely changes on millisecond time
scales, the representation L is highly redundant. To compress
this redundant data, RSH uses the two-dimensional discrete
cosine transform (DCT). The DCT is related to the Fourier
is computationally efﬁcient, and is commonly
transform,
used in compression algorithms (e.g., JPEG, MP3).
RSH
computes the DCT over different sections of the matrix L
to produce the ﬁnal digest. RSH only uses ﬁrst eight DCT
coefﬁcients (corresponding to the highest energy components
and discarding high-frequency information).
The second phase of digest computation – the compression
function – uses the DCT algorithm in the computation of the
bitwise representation of the audio sample. The following
process generates 8 bits of a digest; it is repeated 64 times to
generate a 512-bit digest.
1. Obtain a window size w and two window start indexes l1
and l2 from the output of a keyed pseudorandom function.
2. Select from L two blocks of rows. These blocks B1 and
B2 contain all columns from l1 : l1 + w and l2 : l2 + w
respectively.
3. Compress these individual blocks into eight coefﬁcients
each using the DCT.
4. Set eight digest bits by whether the corresponding coefﬁ-
cients of the ﬁrst block (B1) are greater than the coefﬁcients
USENIX Association
26th USENIX Security Symposium    591
1 Second of Audior0,0r0,1r1,0r0,10…r200,0..…r200,10DCTDCT>888 Digest BitsIndexl1Indexl2Audio Features(once per second)Compression Function(64 times per second).Indexl1+wIndexl2+wMatrixLB1B2of the second block (B2).
We note that sections of audio are selected probabilistically;
we show in Appendix B that the probability that a section of
audio is not used in a digest is negligible.
An important consideration is to note that the digest is
keyed. By using a keyed pseudorandom function, repeated
phrases generate veriﬁable unique digests.
It also has the
advantage that it makes it difﬁcult to compute digests for
audio without knowledge of the key, which in AuthentiCall is
derived during the handshake for each call. In AuthentiCall,
digests themselves are also authenticated using an HMAC to
guarantee digest integrity in transit.
Digests of spoken audio are sent by both parties. The
verifying party computes the digest of the received audio, then
computes the hamming distance between the calculated and
received digests. Because degradation of audio over a phone
call is expected, digests will not match exactly. However, the
Hamming distance between two audio digests — or bit error
rate (BER) — is related to the amount of change in the audio.
By setting an appropriate threshold on BER, legitimate audio
can be distinguished from incorrect audio.
B Probabilistic Analysis of Robust Hash-
ing
AuthentiCall uses the RSH speech digest algorithm [36], which
probabilistically selects sections of audio for inclusion. The
initial research did not establish whether all audio was included
in every hash. In this appendix, we bound the probability that
one or more 5ms sections of audio (which are individual rows
in the matrix L) are not included. The analysis shows that it is
possible for a few milliseconds of audio to be excluded – less
than 25 milliseconds of audio. This is less than an individual
phoneme, could not change semantic meaning of the audio,
and losses of 25 milliseconds or more are common in audio
transmission and typically go unnoticed by users. Accordingly,
the digests effectively cover call content.
a
an
Fix
even
and ﬁx
integer N > 0,
block
width w ∈ [2..N/2]. Let r ∈ [1..N] be a row index of the
matrix L. We begin by computing the probability that in any
particular trial, the r-th row is not covered by at least one of the
two blocks B1,B2 used in the robust hashing algorithm. Recall
that the “top” row of B1 and B2 are randomly selected each trial.
Thus, let (cid:96)1, (cid:96)2 be uniform integers in the range [1..N + 1− w].
Let X (i)
be an indicator random variable for the event
r
that row f
is covered by at least one of these blocks in
the i-th trial. Then we observe that X (i)
r = 0 iff the event
r (cid:54)∈ [(cid:96)1..(cid:96)1 + w− 1]∧ r (cid:54)∈ [(cid:96)2..(cid:96)2 + w− 1] occurs. We have
(cid:104)
Pr
X (i)
r = 0
(cid:105)
= Pr [r (cid:54)∈ [(cid:96)1..(cid:96)1 + w− 1] ]·
Pr [r (cid:54)∈ [(cid:96)2..(cid:96)2 + w− 1] ]
= Pr [r (cid:54)∈ [(cid:96)1..(cid:96)1 + w− 1] ]
2
since (cid:96)1, (cid:96)2 are independent and identically distributed. There
are two cases to consider. When r ∈ [1..w− 1] we have
≤ e−2r/(N+1−w)
(cid:18)
1−
X (i)
r = 0
(cid:19)2
(cid:105)
(cid:104)
Pr
=
r
N + 1− w
(cid:19)2
w
N + 1− w
(cid:105)
because there are only r values for (cid:96)1 (resp. (cid:96)2) that cause
block B1 (resp. B2) to include the r-th row of L. When r ≥ w,
which is the common case when N (cid:29) w, we have
(cid:104)
(cid:105)
(cid:18)
1−
Pr
X (i)
r = 0
=
≤ e−2w/(N+1−w) .
(cid:104)
(cid:104)
X (i)
1 = 0
To build some intuition for these probabilities, take N = 200
and w = 51 (the average value if w were selected uniformly
from its range), Pr
≤ 0.98, i.e., the ﬁrst row is
almost certainly not covered in any particular trial. But this
quickly decreases as r grows, and when r = w (and beyond)
we have Pr
≤ 0.51. Keep in mind that the robust
hashing algorithm runs t = 64 independent trials, thus, deﬁning
i=1 X (i)
(cid:105)
the indicator Xr = 1 iff(cid:87)t
(cid:26) e−t(2r)/(N+1−w) when r < w
r = 1, we have
X (i)
r = 0
Pr [Xr = 0 ] ≤
e−t(2w)/(N+1−w) when r ≥ w
Thus Pr [X1 = 0 ] ≤ (0.98)64 ≈ 0.43, and for r ≥ w we have
Pr [Xr = 0 ] ≤ (0.51)64 ≈ 2−64. It is apparent that the ﬁrst few
rows of L are unlikely to be covered, but that the remaining
rows are covered in some trial with overwhelming probability.
the number of rows
covered across all t trials. Additionally, let W be a uniform
value in [2..N/2]. (Recall that in the robust hashing algorithm,
the parameter w is chosen this way for each trial.) By linearity
of expectation we have
let X = ∑N
Continuing,
r=1 Xr,
i.e.,
E[X |W = w] =
=
N
∑
r=1
N
∑
r=1
E[Xr |W = w]
Pr [Xr = 1 ]
= N −
= N −
≥ N −
N
(cid:32)w−1
(cid:32)w−1
∑
r=1
∑
r=1
∑
r=1
Pr [Xr = 0 ]
Pr [Xr = 0 ] +
N
∑
r=w
e−t(2r)/(N+1−w)
(cid:33)
Pr [Xr = 0 ]
(cid:33)
+ (N + 1− w)e−t(2w)/(N+1−w)
Again, when N = 200,w = 51,t = 64, we
have
E[X |W = 51] ≥ 198.4; on average, the number of rows missed
is less than two. Finally, we deﬁne f (w) = E[X |W = w]
and consider E[ f (W )], which is the average number of rows
covered over random choices of block width and block-starting
rows. When N = 200,t = 64 we have E[ f (W )] ≥ 195.4; thus
fewer than ﬁve rows are completely missed, on average, across
all trials. With overwhelming probability, it will be the ﬁrst
few rows that are missed. As we discussed at the beginning of
this section, this audio would could not affect the semantics of
the transmitted speech.
592    26th USENIX Security Symposium
USENIX Association