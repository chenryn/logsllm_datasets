grams or libraries [48], approximate keypresses through
CPU and cache activity [44], or exploit system ser-
vices leaking user input data [56].
In particular,
Zhang et al. [56] use information about other processes
from procfs on Linux to measure inter-keystroke tim-
ings and derive key sequences. Their proposed coun-
termeasures can be implemented with low costs and
prevent their attack completely. We, however, employ
Cache Template Attacks to ﬁnd and exploit leaking side-
channel information in shared libraries automatically in
order to spy on keyboard input.
Given root access to the system, it is trivial to write
a keylogger on Linux using /dev/input/event* de-
vices. Furthermore, the xinput tool can also be used to
write a keylogger on Linux, but root access is required to
install it. However, using our approach of Cache Tem-
plate Attacks only requires the unprivileged execution
of untrusted code as well as the capability of opening
the attacked binaries or shared libraries in a read-only
shared memory. In the exploitation phase one round of
Flush+Reload on a single address takes less than 100
nanoseconds. If we measure the average latency between
keypress and cache hit, we can determine the actual key-
press timing up to a few hundred nanoseconds. Com-
pared to the existing attacks mentioned above, our at-
tack is signiﬁcantly more accurate in terms of both event
detection (detection rates near 100%) and timing devia-
tions.
In all attacks presented in this section we compute
time-independent cache-hit ratios.
Attack on the GDK Library. Launching the Cache
Template proﬁling phase on different Linux applications
revealed thousands of addresses in different libraries, bi-
naries, and data ﬁles showing cache activity upon key-
presses. Subsequently, we targeted different keypress
events in order to ﬁnd addresses distinguishing the differ-
ent keys. Figure 3 shows the Cache Template of a mem-
ory area in the GDK library libgdk-3.so.0.1000.8,
a part of the GTK framework which is the default user-
interface framework on many Linux distributions.
Figure 3 shows several addresses that yield a cache
hit with a high accuracy if and only if a certain key is
904  24th USENIX Security Symposium 
USENIX Association
8
KEY
j k l m n o p q r
g h i
s
t u v w x y z
S
S
E
R
D
D
A
0x7c100
0x7c140
0x7c180
0x7c1c0
0x7c200
0x7c240
0x7c280
0x7c340
0x7c380
0x7c3c0
0x7c400
0x7c440
0x7c480
0x7c4c0
0x7c500
0x7c540
0x7c580
0x7c5c0
0x7c600
0x7c640
0x7c680
0x7c6c0
0x7c700
0x7c740
0x7c780
0x7c7c0
0x7c800
0x7c840
0x7c880
0x7c8c0
0x7c900
0x7c940
0x7c980
0x7c9c0
0x7ca00
0x7cb80
0x7cc40
0x7cc80
0x7ccc0
0x7cd00
0x7cd40
Figure 3: Excerpt of the GDK Cache Template. Dark
cells indicate key-address-pairs with high cache-hit ra-
tios.
pressed. For instance, every keypress on key n results in
cache hit on address 0x7c800, whereas the same address
reacts in only 0.5% of our tests on other keypresses. Fur-
thermore, we found a high cache-hit ratio on some ad-
dresses when a key is pressed (i.e., 0x6cd00 in libgdk),
the mouse is moved (i.e., 0x28760 in libgdk) or a mod-
iﬁer key is pressed (i.e., 0x72fc0 in libgdk). We also
proﬁled the range of keys a–f but it is omitted from Fig-
ure 3 because no high cache-hit ratios have been ob-
served for the shown addresses.
We use the spy tool described in Section 3.2 in order
to spy on events based on the Cache Template. We are
able to accurately determine the following sets of pressed
keys: {i},{ j},{n},{q},{v},{l,w},{u,z},{g,h,k,t}. That
is, we cannot distinguish between keys in the same set,
but keys in one set from keys in other sets. Similarly, we
can deduce whether a key is contained in none of these
sets.
Not as part of our attack, but in order to understand
how keyboard input is processed in the GDK library, we
analyzed the binary and the source code.
In general,
we found out that most of the addresses revealed in the
proﬁling phase point to code executed while processing
keyboard input. The address range discussed in this sec-
tion contains the array gdk_keysym_to_unicode_tab
which is used to translate key symbols to unicode special
characters. The library performs a binary search on this
array, which explains why we can identify certain keys
accurately, namely the leaf nodes in the binary search.
As the corresponding array is used for keyboard input
in all GDK user-interface components, including pass-
word ﬁelds, our spy tool works for all applications that
use the GDK library. This observation allows us to use
Cache Template Attacks to build powerful keyloggers
for GDK-based user interfaces automatically. Even if
we cannot distinguish all keys from each other, Cache
Template Attacks allow us to signiﬁcantly reduce the
complexity of cracking a password.
In this scenario,
we are able to identify 3 keys reliably, as well as the
total number of keypresses. Thus, in case of a lower-
case password we can reduce the entropy per character
from log2(26) = 4.7 to 4.0 bits. Attacking more than
3 addresses in order to identify more keys adds a sig-
niﬁcant amount of noise to the results, as it triggers the
prefetcher. First experiments demonstrated the feasibil-
ity of attacking the lock screen of Linux distributions.
However, further evaluation is necessary in order to reli-
ably determine the effectiveness of this approach.
Attack on GDK Key Remapping.
If an attacker has
additional knowledge about the attacked system or soft-
ware, more efﬁcient and more powerful attacks are pos-
sible. Inspired by Tannous et al. [48] who performed a
timing attack on GDK key remapping, we demonstrate a
more powerful attack on the GDK library, by examining
how the remapping of keys inﬂuences the sets of iden-
tiﬁable keypresses. The remapping functionality uses a
large key-translation table gdk_keys_by_keyval which
spreads over more than four pages.
Hence, we repeated the Cache Template Attack on the
GDK library with a small modiﬁcation. Before mea-
suring cache activity for an address during an event,
we remapped one key to the key code at that address,
retrieved from the gdk_keys_by_keyval table. We
found signiﬁcant cache activity for some address and
key-remapping combinations.
When proﬁling each key remapping for d = 0.8 sec-
onds, we measured cache activity in 52 cache-line-sized
memory regions.
In veriﬁcation scans, we found 0.2-
2.5% false positive cache hits in these memory regions.
Thus, we have found another highly accurate side chan-
nel for speciﬁc key remappings. The results are shown in
the F-score graph in Figure 4. High values allow accu-
rate detection of keypresses if the key is remapped to this
address. Thus, we ﬁnd more accurate results in terms of
timing in our automated attack than Tannous et al. [48].
We can only attack 8 addresses in the proﬁled mem-
ory area simultaneously, since it spreads over 4 pages
and we can only monitor 2 or 3 addresses without trig-
gering the prefetcher. Thus, we are able to remap any 8
USENIX Association  
24th USENIX Security Symposium  905
9
E
R
O
C
S
-
F
1
0.5
0
0x71000 0x72000 0x73000 0x74000
ADDRESS
Figure 4: Excerpt of the F-score plot for the address
range of the gdk keys by keyval table. High values
reveal addresses that can be exploited.
keys to these addresses and reliably distinguish them. In
combination with the 3 addresses of our previous results,
we are able to distinguish at least 11 keys and observe
the timestamp of any keystroke in the system based on
cache accesses simultaneously.
It is also possible to remap more than one key to the
same key code. Hence, it is possible to distinguish be-
tween groups of keys. If we consider a lower-case pass-
word again, we can now reduce the entropy per character
from log2(26) =4.7 to 1 .4 bits.
We also proﬁled keypresses on capslock and shift. Al-
though we were able to log keypresses on both keys, we
did not consider upper case or mixed case input. The
exploitation phase automatically generates a log ﬁle con-
taining the information observed through the cache side
channel. However, interpretation of these results, such as
deriving a program state from a sequence of events (shift
key pressed or capslock active) and the inﬂuence of the
program state on subsequent events is up to analysis of
the results after the attack has been performed.
Tannous et al. [48] also described a login-detection
mechanism in order to avoid remapping keys unless the
user types in a password ﬁeld. The spy program simply
watches /proc to see whether a login program is run-
ning. Then the keys are remapped. As soon as the user
pauses, the original key mappings are restored. The user
will then notice a password mismatch, but the next pass-
word entry will work as expected.
Our completely automated password keylogger is a
single binary which runs on the attacked system. It maps
the GDK library into its own address space and performs
the proﬁling phase. The proﬁling of each keypress re-
quires the simulation of the keypress into a hidden win-
dow. Furthermore, some events require the key remap-
ping we just described. Finally, the keylogger switches
into the exploit mode. As soon as a logon screen is de-
tected, for instance, after the screensaver was active or
the screen was locked, the keys are remapped and all key-
presses are logged into a ﬁle accessible by the attacker.
Thus, all steps from the deployment of the keylogger to
the ﬁnal log ﬁle are fully automated.
5.2 Attacks on other Linux Applications
We also found leakage of accurate keypress timings in
other libraries, such as the ncurses library (i.e., off-
set 0xbf90 in libncurses.so), and in ﬁles used to
cache generated data related to user text input, such as
/usr/lib/locale/locale-archive. The latter one is
used to translate keypresses into the current locale. It is
a generated ﬁle which differs on each system and which
changes more frequently than the attacked libraries. In
consequence, it is not possible to perform an ofﬂine at-
tack, i.e., to use a pre-generated Cache Template in the
exploitation phase on another system. Still, our concept
of Cache Template Attacks allows us to perform an on-
line attack, as proﬁling is fully automated by generat-
ing keystrokes through libxdo or comparable libraries.
Thus, keystroke side channels are found within a few sec-
onds of proﬁling. All keypress-timing side channels we
found have a high accuracy and a timing deviation of less
than 1 microsecond to the actual keypress.
In order to demonstrate Cache Template Attacks on a
low-frequency event which is only indirectly connected
to keypresses, we attacked sshd, trying to detect when
input is sent over an active ssh connection. The received
characters are unrelated to the local user input. When
proﬁling for a duration of d = 0.8 seconds per address,
we found 428 addresses showing cache activity when
a character was received. We veriﬁed these results for
some addresses manually. None of these checked ad-
dresses showed false positive hits within a veriﬁcation
period of 60 seconds. Thus, by exploiting the resulting
Cache Template matrix, we are able to gain accurate tim-
ings for the transmitted characters (signiﬁcantly less than
1 microsecond deviation to the transmission of the char-
acter). These timings can be used to derive the transmit-
ted letters as shown by Zhang et al. [56].
5.3 Attack on Windows User Interfaces
We also performed Cache Template Attacks on Win-
dows applications. The attack works on Windows using
MinGW identically to Linux. Even the implementation
is the same, except for the keystroke simulation which
is now performed using the Windows API instead of the
libxdo library, and the ﬁle under attack is mapped using
LoadLibrary instead of mmap. We performed our attack
on Windows 7 and Windows 8.1 systems with the same
results on three different platforms, namely Intel Core