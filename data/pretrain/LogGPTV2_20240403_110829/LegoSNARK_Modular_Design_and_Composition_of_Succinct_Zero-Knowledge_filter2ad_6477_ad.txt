Formalizing this idea requires to make explicit the commitment scheme associated to the SNARK,
as well as the commitment key that is part of the common reference string. In the next section we
discuss how many of the existing SNARK constructions satisfy this property. Later, in Section 3.5
we show that cc-SNARKs can be lifted to become full ﬂedged, composable, CP-SNARKs. These two
results together allow us to compose several existing SNARKs. We deﬁne commit-carrying SNARKs
as follows:
Deﬁnition 3.2 (cc-SNARK). A commit-carrying zkSNARKs for {Rλ}λ∈N is a tuple of algo-
rithms ccΠ = (KeyGen, Prove, VerProof, VerCommit) that work as follows and satisfy the notions of
completeness, succinctness, knowledge soundness, zero knowledge and binding as deﬁned below.
– KeyGen(R) → (ck, ek, vk): the key generation takes as input the security parameter λ and a relation
R ∈ Rλ, and outputs a common reference string that includes a commitment key, an evaluation
key and veriﬁcation key.
– Prove(ek, x, w) → (c, π; o): the proving algorithm takes as input an evaluation key, a statement
x and a witness w := (u, ω) such that the relation R(x, u, ω) holds, and it outputs a proof π, a
commitment c and opening o such that VerCommit(ck, c, u, o) = 1.
– VerProof(vk, x, c, π) → b: the veriﬁcation algorithm takes a veriﬁcation key, a statement x, a
commitment c, and either accepts (b = 1) or rejects (b = 0) the proof π.
– VerCommit(ck, c, u, o) → b: the commitment veriﬁcation algorithm takes as input a commitment
key, a commitment c, a message u and an opening o and accepts (b = 1) or rejects (b = 0).
cc-SNARKs can be seen as a less versatile version of CP-SNARKs (clearly, a CP-SNARK implies
a cc-SNARK). In a cc-SNARK the commitment key depends on the relation taken by KeyGen, and a
commitment is freshly created by the Prove algorithm and is tied to a single proof; in a CP-SNARK
the commitment key is independent of relations and commitments can also be created independently
and shared across diﬀerent proofs. Futhermore, in the literature, there are examples of schemes that
lie in between our notions of CP-SNARK and cc-SNARK; this is the case for commit and prove
SNARKs in which the commitment key is relation-dependent, e.g., [CFH+15, Vee17].
Completeness. For any λ ∈ N, R ∈ Rλ and (x, w) such that R(x, w) = 1, it holds
Pr(cid:0)(ck, ek, vk) ← KeyGen(R), (c, π; o) ← Prove(ek, x, w) : VerProof(vk, x, c, π)(cid:1) = 1
Succinctness. ccΠ is said succinct if the running time of VerProof is poly(λ) (λ +|x| + log |w|) and
the size of the proof is poly(λ)· (λ + log |w|).
Knowledge Soundness. Let RG be a relation generator such that RGλ ⊆ Rλ. ccΠ satisﬁes
knowledge soundness for RG and auxiliary input distribution Z, or ccKSND(RG,Z), if for every
(non-uniform) eﬃcient adversary A there exists a (non-uniform) eﬃcient extractor E such that
RG,Z,A,E = 1] = negl. We say that ccΠ is knowledge sound if there exist benign RG and Z
Pr[GameccKSND
such that ccΠ is ccKSND(RG,Z).
15
RG,Z,A,E → b ∈ {0, 1}
GameccKSND
(R, auxR) ← RG(1λ)
crs := (ck, ek, vk) ← KeyGen(R)
auxZ ← Z(R, auxR, crs)
b ← VerProof(vk, x, c, π) = 1 ∧ (VerCommit(ck, c, u, o) = 0 ∨ R(x, u, ω) = 0)
(x, c, π) ← A(R, crs, auxR, auxZ )
(u, o, ω) ← E(R, crs, auxR, auxZ )
Composable Zero-Knowledge. A scheme ccΠ has composable zero-knowledge for a relation
generator RG if for every adversary A there exists a simulator S = (Skg,Sprv) such that both
following conditions hold for all adversaries A:
Keys Indistinguishability.
Proof Indistinguishability.
Pr(cid:0)(R, auxR) ← RG(1λ), crs ← KeyGen(R) : A(crs, auxR) = 1(cid:1)
≈ Pr(cid:0)(R, auxR) ← RG(1λ), (crs, tdk) ← Skg(R) : A(crs, auxR) = 1(cid:1)
(cid:34)
(cid:34)
(R, auxR) ← RG(1λ), (crs, tdk) ← Skg(R), (c, π; o) ← Prove(ek, x, w)
A(crs, auxR, c, π) = 1 ∧ R(x, w) = 1
(R, auxR) ← RG(1λ), (crs, tdk) ← Skg(R), (c, π) ← Sprv(crs, tdk, x)
A(crs, auxR, c, π) = 1 ∧ R(x, w) = 1
:
(cid:35)
:
(cid:35)
∀(x, w) : Pr
≈ Pr
(cid:34)
Pr
Binding. For every polynomial-time adversary A the following probability is negl(λ):
(R, auxR) ← RG(1λ), crs := (ck, ek, vk) ← KeyGen(R)
(c, u, o, u(cid:48), o(cid:48)) ← A(R, crs, auxR)
:
VerCommit(ck, c, u(cid:48), o(cid:48)) ∧
VerCommit(ck, c, u, o) ∧ u (cid:54)= u(cid:48)
(cid:35)
Remark 3.2. While our deﬁnitions consider the case where the proof contains a commitment to a
portion u of the witness w = (u, ω), notice that this partition of the witness is arbitrary and thus
this notion also captures those constructions where the commitment is to the entire witness if one
thinks of a void ω.
cc-SNARKs with Weak Binding
Let us now deﬁne a weaker variant of cc-SNARKs that diﬀers from the one given in Deﬁnition 3.2
in that the underlying commitment scheme is not binding in the usual sense. Slightly more in detail,
we consider the case where the commitment refers to the whole witness (i.e., ω is an empty string)
and it is actually possible to ﬁnd collisions for a given commitment as long as these collisions are
among valid witnesses, or more precisely we require to be computationally infeasible to ﬁnd two
diﬀerent witnesses that validly open the commitment such that one falsiﬁes the relation and the
other one satisﬁes it. Worth noting that our generic compiler can also turn weak cc-SNARKs into
CP-SNARKs.
16
Deﬁnition 3.3 (cc-SNARKs with Weak Binding). We deﬁne cc-SNARKs with Weak Binding
as in Deﬁnition 3.2 with two exceptions: we assume that the scheme is deﬁned only for relations
such that Dω = ∅; we replace the binding property with the one below.
Weak Binding. ∀ polynomial-time adversary A and u (cid:54)= u(cid:48) the following probability is negl(λ):
(R, auxR) ← RG(1λ), crs := (ck, ek, vk) ← KG(R), (x, c, u, o, u(cid:48), o(cid:48), π) ← A(R, crs, auxR)
VerCommit(ck, c, u, o) ∧ VerCommit(ck, c, u(cid:48), o(cid:48)) ∧ VerProof(vk, x, c, π) ∧ ¬R(x, u) ∧ R(x, u(cid:48))
(cid:34)
(cid:35)
Pr
:
3.4 Existing CP-SNARKs and cc-SNARKs
In this section, we provide a summary of existing schemes that can be explained, with no or little
modiﬁcation, under our CP-SNARK and cc-SNARK notions. In fact, existing QAP-based schemes
[PHGR13, BCTV14, Gro16] are not fully binding but can satisfy our weak binding. In Appendix
H.5 we prove that [Gro16] is a weak cc-SNARK.
Existing CP-SNARKs. The following list is a summary. Details supporting the following claims
appear in Appendix H.
– Adaptive Pinocchio [Vee17] is a CP-SNARK for relations RQ(x, (uj)j∈[(cid:96)], ω) where RQ is a
quadratic arithmetic program (QAP), and the commitment scheme is the extended Pedersen
commitment of Groth [Gro10] in which the i-th basis of the commitment key is gxi for a random
x.
q
– The scheme in [Lip16][Section 4] is a CP-SNARK for Hadamard product relations Rhad(a, b, c)
, i.e. Rhad holds iﬀ ∀i ∈ [m] : ai · bi = ci. In this case the commitment scheme is a variant
over Z3m
of the extended Pedersen scheme where the ith basis of the commitment key is g(cid:96)i(x) for a random
x and (cid:96)i being the i-th Lagrange basis polynomial.
– zk-vSQL [ZGK+17b] is a CP-SNARK for relations R((uj)j∈[(cid:96)]) where R is an arithmetic circuit,
and the commitment is a polynomial commitment that, we observe (cf. Appendix H), can also be
explained as a variant of extended Pedersen.
Existing cc-SNARKs. Geppetto [CFH+15] is a commit-and-prove SNARK for QAP relations
RQ(x, u, ω), with a relation-dependent commitment key. This scheme immediately yields a cc-
SNARK where VerCommit is also a variant of extended Pedersen.
Existing Weak cc-SNARKs. There exist other schemes in the literature that ﬁt the cc-SNARK
syntax, but fail to satisfy the binding property. This is the case for some QAP-based schemes,
such as Pinocchio [PHGR13, BCTV14] or the eﬃcient SNARK of Groth [Gro16]. For the latter
[Gro16] we prove in Appendix H.5 that it is a weak cc-SNARK for QAP relations RQ(u) QAP.12
Worth noting that our generic compiler in the next section allows to turn also weak cc-SNARKs
into CP-SNARKs.
A New Eﬃcient cc-SNARK for QAPs. We show that the SNARK of [Gro16] can be modiﬁed
to obtain a cc-SNARK for QAP relations RQ(u, ω), where the witness portion committed in a
fully binding way can be chosen (see Appendix H.5). Compared to the other cc-SNARKs for QAPs
mentioned above, this scheme oﬀers nearly optimal eﬃciency (essentially due to the fact that we
start from [Gro16] whereas [CFH+15, Vee17] build on [PHGR13]).
12 Using similar ideas we believe that such a result also holds for the Pinocchio variant in [BCTV14].
17
3.5 Bootstrapping our Framework
A key requirement to apply the composition results of the LegoSNARK framework is to start from
CP-SNARKs that share the same commitment scheme. In practice this is not always the case (see
for example the discussion in the previous section). In this section we propose a solution to this
issue by giving a generic compiler for turning a cc-SNARK ccΠ for a family of relations {Rλ}λ∈N
into a CP-SNARK CP that supports the same relations and works for a given, global, commitment
scheme Com. Incidentally, since a CP-SNARK CP for commitment Com(cid:48) is also a cc-SNARK, our
compiler can also turn CP into a CP-SNARK for another commitment Com.
As noted in the introduction one could solve the interoperability problem if the cc-SNARK (or
even any SNARK) is suﬃciently expressive so as to encode the commitment veriﬁcation algorithm
VerCommit in its relations (e.g., as a circuit). This approach of letting the SNARK take care of
the commitment veriﬁcation however has two main drawbacks. First, recall that in our vision, the
cc-SNARK ccΠ may be a proof system for a specialized task, and thus may not be able to express
VerCommit in its language. Second, even if ccΠ is expressive enough, such encodings of VerCommit
(for various choices of schemes) are notoriously very expensive. Our approach to deal with this
issue is to propose a slightly diﬀerent methodology that shifts the problem of expressing a relation
about VerCommit from ccΠ to a CP-SNARK that is tailored to this problem. Our idea in brief:
linking a proof-dependent commitment c(cid:48) from ccΠ to a general-purpose commitment c from a
CP-SNARK. Speciﬁcally we rely on a CP-SNARK (from now on CPlink) able to prove that the two
commitments, c(cid:48) and c (actually a collection of cj) , open to the same value. In other words CPlink
is a minimal tool able to turn a ccΠ into a full ﬂedged CP-SNARK CP that supports some general
purpose commitment. The fact we require CP-SNARK to create a CP-SNARK is a curious aspect
of this approach. What we require however is less than what we get: we only need to start from a
simple scheme CPlink that handles a speciﬁc relation to create CP-SNARKs for disparate families of
relations. Since CPlink is a simple object we can obtain from it eﬃcient instantiations (as conﬁrmed
by our concrete construction proposed in Section 4.1).
Our cc-SNARK-lifting compiler. Let ccΠ be a cc-SNARK for a family of relations {Rλ}λ∈N
where, for every λ, R ∈ Rλ is over tuples in Dx×Du×Dω, and Du splits over (cid:96) subdomains (D1×···×
D(cid:96)) for some arity parameter (cid:96). Consider the commitment veriﬁcation algorithm ccΠ.VerCommit.
For any λ ∈ N and any ck(cid:48) ∈ {ccΠ.KeyGen(R)}R∈Rλ, we deﬁne the relation Rlink that has input
space Dlink
ω = Dlink
u = D1 × ··· × D(cid:96) and
Dlink
:= O(cid:48), where C(cid:48) and O(cid:48) are the commitment and opening space of the commitment of ccΠ.
For compactness we represent Rlink with (ck(cid:48),Dlink
x = C(cid:48), and witness space Dlink
ω ). Then, Rlink is deﬁned as follows:
such that Dlink
ω
u × Dlink
x ,Dlink
ω
Rlink(cid:0)xlink, (ulink
j
)j∈[(cid:96)], ωlink(cid:1) := ccΠ.VerCommit(ck(cid:48), xlink, (ulink
u ,Dlink
j
)j∈[(cid:96)], ωlink)
Let CPlink be a CP-SNARK for Com and a family of relations {Rlink
We remark that, above, xlink ∈ C(cid:48) is a commitment for ccΠ.VerCommit and ωlink ∈ O(cid:48) is its opening.
λ }λ∈N such that for every
λ ∈ N the relation Rlink deﬁned above is in Rlink
λ . In Table 2 we describe a CP-SNARK CP for
{Rλ}λ∈N that works by using ccΠ and CPlink.
The correctness of CP follows by that of the two schemes CPlink and ccΠ. The same holds for
succinctness. In the following theorem we state how knowledge soundness and zero-knowledge of
CP follow from the corresponding properties of CPlink and ccΠ. The formal statement appears in
Appendix B, and proofs appear in Appendix B.1 and B.2 respectively.
18
CP.Prove(ek, x, (cj, uj, oj)j∈[(cid:96)], ω) → π :=(cid:0)c(cid:48), πlink, π(cid:48)(cid:1)
CP.KeyGen(ck, R) → (ek, vk)
(ck(cid:48), ek(cid:48), vk(cid:48)) ← ccΠ.KeyGen(R)
Build Rlink from (ck(cid:48),Dlink
x ,Dlink
return(cid:0)(ck(cid:48), ek(cid:48), eklink), (vk(cid:48), vklink)(cid:1)
(eklink, vklink) ← CPlink.KeyGen(ck, Rlink) CP.VerProof(vk, x, (cj)j∈[(cid:96)], π) → {0, 1}
(c(cid:48), π(cid:48), o(cid:48)) ← ccΠ.Prove(ek(cid:48), x, (uj)j∈[(cid:96)]; ω); (xlink, ωlink) := (c(cid:48), o(cid:48))
πlink ← CPlink.Prove(eklink, xlink, (cj)j∈[(cid:96)], (uj)j∈[(cid:96)], (oj)j∈[(cid:96)], ωlink)
u ,Dlink
ω )
CPlink.VerProof(vklink, c(cid:48), (cj)j∈[(cid:96)], πlink) ∧ ccΠ.VerProof(vk(cid:48), x, c(cid:48), π(cid:48))
Figure 2: Generic Construction of CP from CPlink and ccΠ.
Theorem 3.2. If ccΠ is a zk-cc-SNARK (or a weak cc-SNARK) for {Rλ}λ∈N and CPlink is a
zk-CP-SNARK for {Rlink
λ }λ∈N, then the scheme CP in Figure 2 is a zk-CP-SNARK for {Rλ}λ∈N.
4 CP-SNARKs for Pedersen-like Commitments
In this section we propose two CP-SNARKs that work for any commitment scheme whose veriﬁcation
algorithm is the same as the extended Pedersen commitment (essentially a multi-exponentiation).
This class of commitments includes those underlying several existing SNARKs, such as all the ones
we mentioned in section 3.4. Notable, this also includes the “classical” extension of Pedersen whose
key is a set of random group elements, which can be sampled in a transparent way; in other words
no trusted setup is needed for this commitment key.13
For vectors committed in this way, we show two schemes. Our ﬁrst scheme (given in Section
4.1) allows to prove that another commitment, with the same veriﬁcation algorithm but diﬀerent
key, opens to the same vector. This is essentially an eﬃcient realization of the CPlink CP-SNARK
needed in our compiler of Section 3.5, and that works for cc-SNARKs whose underlying commitment
veriﬁcation has the same structure as Pedersen. Our second scheme (given in Section 4.2) instead
allows one to prove correctness of a linear function of the committed vector (i.e., that x = F · u).
In what follows we start by recalling facts and notation about bilinear groups and the Pedersen
commitment.
Bilinear Groups. A bilinear group generator BG(1λ) outputs (q, G1, G2, GT , e), where G1, G2, GT
are additive groups of prime order q, and e : G1 × G2 → GT is an eﬃciently computable, non-
degenerate, bilinear map. In this paper, we consider Type-3 groups where it is assumed there is no
eﬃciently computable isomorphism between G1 and G2. We use bracket notation of [EHK+13], i.e.,
for s ∈ {1, 2, T} and a ∈ Zq, we write [a]s to denote a · gs ∈ Gs, where gs is a ﬁxed generator of
Gs. From an element [a]s ∈ Gs and a scalar b it is possible to eﬃciently compute [ab] ∈ Gs. Also,
given elements [a]1 ∈ G1 and [b]2 ∈ G2, one can eﬃciently compute [a · b]T by using the pairing
e([a]1, [b]2), that we compactly denote with [a]1 · [b]2. Vectors and matrices are denoted in boldface.
We use the bracket notation also for matrix operations, i.e., [A]1 · [B]2 = [A · B]T . For a vector a
and for i < j we denote by a[i,j] its portion (ai, . . . aj).
13 The sampling of random group elements can be heuristically instantiated in the random oracle model by letting
these elements be the output of a suitable hash function. The main advantage of this hash-based instantiation is
that the commitment key has constant-size and no bound on the size of the vectors must be ﬁxed a priori.
19
1
from a distribution D, and output ck := [h]1;
Pedersen Vector Commitment. Let us recall the extended Pedersen commitment scheme for
vectors of size n. Here we consider an instantiation on a group G1.
Ped.Setup(1λ): sample [h]1 ← Gn+1
Ped.Commit([h]1, w) : sample o ←$ Zq and return (c, o) := ((o, w(cid:62)) · [h]1, o);