3）如果读者需要搭建一个Zend Server集群，并在每个Zend 集群节点（即 Cluster Node）
Zend Server5.5Docker官方镜像：docker pul1 zend/php-5.5-zend-server
ZendServer5.4Docker官方镜像：docker pul1zend/php-5.4-zend-server
2）如果需要使用特定版本的ZendServer，也可以选择直接下载此版本的镜像：
1）如果你对PHP和Zend Server的版本都有要求，可以在dockerrun命令中加
注意以下几点：
$sudo docker run php-zendserver
创建并运行单个Zend Server容器：
sudo
docker
run
-e MYSQL_PASSWORD=
MYSQLHOSTNAME=
D
-eMYSQL_DBNAME=zend php
MYSQL PORT=3306
-eMYSQL
---
## Page 159
者也可以如下文所示定制镜像。
镜像：
展性。
用的功能集合（Bundle）。同时，Symfony以依赖注人的方式给开发者提供了近乎无限的扩
提供模板系统，数据持久层，代码生成器，以及大量可复
PHPMVC开发框架。它以设计完善和性能优越著称。它
由于这种方式有一定局限性，对于需要执行已有 Symfony项目的用户并不实用，所以读
运行Symfony最简便的方法是去DockerHub直接搜索相关关键字并直接下载Symfony
使用DockerHub镜像
ENTRYPOINT[
#设置启动脚本
ADD./run.sh/tmp/run.sh
ADD./virtual-host.conf/etc/apache2/sites-enabled/0-virtual-host.conf
RUN DEBIAN_FRONTEND=noninteractive apt-get install
FROM teamrock/apache2:production
读者可以基于SSHD 镜像定制，也可以使用以下Dockerfile来定制镜像：
定制镜像
$ sudo docker pull teamrock/symfony2
或者
$ sudo docker pull gregory90/php-symfony
Symfony是一个优秀的以依赖注人为核心的全栈式
3.Symfony
4）每个 Zend Server的Docker容器至少需要1GB的可用内存。
#添加vhost配置
php5-intlphp5-mcryptphp5-apcu php5-curl php5-mysql
#获取Apache基础镜像
3）ZEND_LICENSE_KEY-ZEND_LICENSE_ORDER:使用已购买的许可证。
#添加安装脚本
MYSQL_USERNAME
MYSQL_PORT：MySQL监听的端口。
Server使用的数据库用户名密码（如果不存在将会新建）。
["/bin/bash","/tmp/run.sh"]
第13章编程语言145
po-sdud yotheut-sdud-
Symfony
---
## Page 160
使用SSH服务访问Phalcon容器。当然，读者也可以使用第三方Dockerfle来定制镜像：
是Phalcon项目的根目录。
Yaf也具有极高的性能，但是非全栈框架。
数都以PHP类的方式出现。Phalcon是一个松耦合的框架。
展编写，专门为高性能优化。无需学习和使用C语言，所有函
146第二部分实战案例
Phalcon是目前PHPMVC框架中性能最高的全栈框架，
使用DockerHub镜像
Phalcon是一个开源的、全堆栈的PHP5框架，使用C扩
PhalconPHP是一个使用C扩展开发的PHPWeb框架，
EXPOSE 80
ENV APACHE_PID_FILE/var/run/apache2/apache2.pid
ADD etc/apache2/sites-available/000-default.conf /etc/apache2/sites-
RUN apt-get clean
ENV DEBIAN_FRONTEND noninteractive
FROM szeist/phalcon
笔者推荐读者基于本书第10章使用的SSHD镜像来定制自定义镜像，这样可以方便地
定制镜像
此时Apache服务器会在TCP端口8080运行PhalconPHP框架。-v命令后的文件夹就
phalcon-apache2
$ sudo docker run -v/document/root/on/your/mahine:/var/www-p 8080:80 szeist/
创建并运行Phalcon镜像：
$sudodocker pullszeist/phalcon-apache2
安装DockerHub上的Phalcon镜像：
4.Phalcon
ENV
ENV DEBIAN_FRONTEND dialog
available/000-default.conf
APACHE_RUN_DIR /var/run/apache2
APACHE_LoCK_DIR/var/lock/apache2
APACHE_LOG_DIR /var/log/apache2
APACHE RUN_GROUP wwW-data
APACHE RUN USER wwW-data
a2enmod rewrite
提供高性能和低资源占用。
114
phalcon
BRU
---
## Page 161
GCC是GNU工具链的关键组件，遵循GNU GPL协议。
言，并支持交叉编译至多种指令集的处理器（TargetProcessor）。
言的编译器系统，它由GNU项目主持。GCC支持多种编程语
13.2.1
13.2
13.1.3相关资源
将C/C++代码运行在GCC容器内的最简方法，就是将GCC编译指令写入Dockerfile
GCC（GNUCompilerCollection）是一个开源的C/C++语
1.使用官方镜像
本节将介绍三款流行的C/C++开发环境：GCC、LLVM和Clang。
PhalconDockerfile:https://registry.hub.docker.com/u/szeist/phalcon-apache2/dockerfile/
PhalconDocker Hub镜像：https://registry.hub.docker.com/u/szeist/phalcon-apache2/
Phalcon框架官网：http://www.phalconphp.com/en/
Symfony 2Dockerfile:https://registry.hub.docker.com/u/gregory90/php-symfony/dockerfile/
Symfony2框架官网：http://symfony.com/
Zend Server 5.5Docker官方镜像：https://registry.hub.docker.com/u/zend/php-5.5-zend-server/
Zend Server 5.4Docker官方镜像：https://registry.hub.docker.com/u/zend/php-5.4-zend-server/
Zend ServerDocker官方镜像标签：https://registry.hub.docker.com_/php-zendserver/tags/manage/
Zend ServerDocker官方镜像：https://registry.hub.docker.com//php-zendserver/O
ZendServer官网：http://www.zend.com/en/products/server
Zend框架官网：http://framework.zend.com/
CakePHPDocker Hub镜像：https://registry.hub.docker.com/u/vcarl/cakephp/
CakePHP框架官网：http://cakephp.org/
PHP tutum Dockerile:https://registry.hub.docker.com/u/tutum/apache-php/dockerfle/
PHPtutum镜像：https://registry.hub.docker.com/u/tutum/apache-php/
PHPDocker官方镜像：https://registry.hub.docker.com/_/php/
PHP官网：http://php.net/
CMD["-D",
C/C++
GCC
"FOREGROUND"]
第13章编程语言147
HEEE
---
## Page 162
usr/src/myapp 文件夹。
-omyappmyapp.c.。GCC将会编译myapp.c代码，并将生成的可执行文件输出至/
的FROM指令中明确GCC版本号。
中，然后使用此Dockerfle构建自定义镜像，最后直接运行此镜像，即可启动程序。
148第二部分实战案例
如果项目已经编写好了Makefile，也可以在容器中直接执行make命令：
以上命令会将当前目录（"S（pwd）"）挂载到容器的/usr/src/myapp目录，并执行gcc
ho:oo ddexs/sn m-ddes/sn:(pmd)-w-un xyoop opns
如果只需要容器编译程序，而不需要运行它，可以使用如下命令：
创建并运行此容器，会编译并运行程序，输出HelloWorld：
$ sudo docker build -t my-gcc-app
CMD["./myapp"]
之后，在Dockerfle中，加人需要执行的 GCC 编译命令：
WORKDIR/usr/src/myapp
COPY./usr/src/myapp
如果对GCC的版本有要求，
$ sudo docker pull gcc
首先，从官方仓库获取GCC基础镜像：
intmain()
#include
/*Hello Worldprogram*/
假定在当前目录创建一个C语言源文件main.c，内容可能为：
omyappmyapp.c
HelloWorld
现在，
return0
printf("Hello World\n");
，就可以使用Dockerfile来构建镜像my-gcc-app:：
，可以在以上命令中加入镜像标签，并在下一步的Dockerfile
CKEE
9.81
---
## Page 163
Dockerfile:
运行容器即可。下面，笔者给出了基于buildpack-deps：wheezy镜像创建GCC镜像的
行。读者也可以使用DockerHub中提供的第三方Dockerfile，定制或修改后构建镜像，然后
VERSION.tar.bz2.sig"-o gcc.tar.bz2.sig\
VERSION.tar.bz2"
#下载需要的tar格式源码并解压安装
ENV GCC_VERSION 4.9.1
FROM buildpack-deps:wheezy
#https://registry.hub.docker.com/u/snormore/llvm/dockerfile/
读者可以基于本书第10章中使用的SSHD基础镜像来定制GCC镜像，构建后直接运
RUN
#https://gcc.gnu.org/mirrors.html
2.定制镜像
&&
apt-getupdate\
80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C
90AA470469D3965A87A5DCB494D03953902C9419
B3C42148A44E6983B3E4CC0793FA9B1AB75C61B8
B215C1633BCA0477615F1B35A5B3A004745C015A
8
&
R
&&
R
R
8
R
R
&&curl-SL
33C235A34C46AA3FFB293709A328C3A2C3C45C06
7F74F97C103468EE5D750B583AB00996FC26A641
apt-get purge -y --auto-remove curl gcc g++ wget
gpg --verify gcc.tar.bz2.sig\
make
/usr/src/gcc/configure
{rm*.tar.*1ltrue;}\
./contrib/download_prerequisites
cd/usr/src/gcc\
tar-xvf gcc.tar.bz2
-rf"sdir"\
-disable-multilib\
gcc.tar.bz2*
install-strip
-ogcc.tar.bz2\
"http://ftpmirror.gnu.org/gcc/gcc-$Gcc_vERsIoN/gcc-$GCc
"http://ftpmirror.gnu.org/gcc/gcc-$GCC_vERsIoN/gcc-$Gcc
-C
/usr/src/gcc --strip-components=1\
第13章编程语言149
MVL
lob
.8
口
口
---
## Page 164
初是Apple公司为了解决使用GCC编译Objective-C的问题，从头实现的一套编译器系统。
13.2.3
运行容器即可。
行。读者也可以使用DockerHub中提供的第三方Dockerfile，定制或修改后构建镜像，然后
Rust、Scala以及C#等众多语言。
Ada、D、Fortran、GLSL、Haskell、Java bytecode、Objective-C、Swift、Python、Ruby
期以及“闲置时期”的优化。它最早是以C/C++为对象，目前已经支持了包括ActionScript、
目是为了对任意编程语言实现的程序，利用虚拟技术，创造出编译时期、链结时期、运行时
C++实现，包含LLVM中介码（LLVMIR）、LLVM除错工具、LLVMC++标准库等。该项
13.2.2LLVM
吧
150第二部分实战案例
标（之一）就是超越GCC成为标准的C/C++编译器，它遵循LLVMBSD许可。Clang最
LLVM（LowLevelVirtualMachine）是一个起源于2000年的编译器基础建设项目，以
Clang有如下特性：
Clang是一个用C++实现、基于LLVM的C/C++/Objective C/Objective C++编译器，
口基于库的模块化设计，易于IDE集成及其他用途的重用。由于历史原因，GCC是一
口设计清晰简单，容易理解，易于扩展增强。与代码基础古老的GCC相比，学习曲线
口良好的GCC兼容性。
口诊断信息可读性强：Clang对于错误的语法不但有源码提示，还会在错误的调用和相
口内存占用小：Clang内存占用约是源码的1.3倍，而AppleGCC则超过10倍的内存
口快：通过编译OSX上几乎包含了所有C头文件的carbon.h的测试，包括预处理
读者可以基于本书第10章中使用的SSHD基础镜像来定制GCC镜像，构建后直接运
2.定制镜像
$sudodocker pullimiell/llvm
在DockerHub中已经有用户提供了LLVM的镜像，读者可以直接下载使用。
1.使用官方镜像
平缓。
个单一的可执行程序编译器，其内部完成了从预处理到最后代码生成的全部过程
关上下文上有更好提示。
使用。
生成（AbstractSyntaxTree）的时间，Clang比GCC4.0快2.5倍。
（Preprocess）、语法（lex）解析（parse）、语义分析（Semantic Analysis）、抽象语法树
Clang
其
---
## Page 165
网金融和电子商务项目中非常受欢迎。
再次编辑，即可运行在异构的JVM上。Java在大型互联网项目，特别是互联
应用的开发者“开发一次，到处运行”。
象的高级语言。Java的设计理念是尽可能地减少部署依赖，致力于允许Java
应用于企业级Web应用开发和移动应用开发。它是并发的，
13.3
Dockerfile文件：
的第三方镜像构建Clang容器。这里笔者以 ubuntu:trusty系统为例，下面给出了一个示例
Java是一种拥有跨平台、面向对象、泛型编程特点的编译型语言，广泛
#编译和安装LLVM/clang
ADD./opt/install-clang
RUN apt-get update && apt-get-y install cmake git build-essential vim python
#安装依赖包Setuppackages.
CMDbash
#确定默认的启动命令
ENV PATH/opt/1lvm/bin:$PATH
#设置环境变量
FROM
#https://registry.hub.docker.com/u/rsmmr/clang/dockerfile
如前文所说，读者可以基于SSHD镜像自定义Dockerfle。也可以使用DockerHub中
2.定制镜像
$sudo docker pull bowery/clang
在Docker Hub中已经有用户提供了Clang的镜像，
1.使用官方镜像
底层的支持，只使用tags分析或正则表达式匹配是很难达成的。
对于代码的操控能力。对于IDE而言，代码补全、重构是重要的功能，然而如果没有
AST信息可序列化。通过库的支持，程序能够获取到AST级别的信息，将大大增强
中间诸多信息都无法被其他程序重用。Clang将编译过程分成彼此分离的几个阶段
Java
ubuntu:trusty
，这就意味着Java的二进制编码不需要
：读者可以直接下载使用。
，基于类的面向对
第13章编程语言151
Java
---
## Page 166
镜像创建Java 镜像的Dockerfile文件，供读者参考：
种系统基础镜像（如Ubuntu）来定制Java镜像。此处笔者给出了基于dockerfile/ubuntu
java命令编译代码。生成的可执行文件将输出至当前目录下。
要执行的Java编译命令，例如：
骤如下：
Dockerile，然后使用此Dockerfle构建镜像，最后直接运行此镜像，即可启动程序。具体步
152第二部分实战案例
#使用Ubuntu基础镜像
将Java代码运行在Docker容器中的最简单方法，就是将Java编译指令直接写人
笔者建议用户基于第10章的SSHD镜像来自定义Dockerfile。当然，读者也可以基于各
2.定制镜像
以上命令会将当前目录（“S(pwd)”）挂载为容器的工作目录，并执行javacMain.
eddes/sddexsrsn(pmd)a---u yoop opns
如果只需要容器中编译Java程序，而不需要运行，则可以使用如下命令：
然后，运行此镜像即自动编译程序并执行：
使用此Dockerile构建镜像my-java-app：
WORKDIR /usr/src/myapp
然后，在本地新建一个空目录，在其中创建Dockerfile文件。在Dockerfile中，加人需
$sudo docker pulljava
首先，
1.使用官方镜像
$sudodocker build-tmy-java-app.
RUNjavacMain.java
COPY
https://github.com/dockerfile/java/tree/master/openjdk-7-jre
https://github.com/dockerfile/java
OpenJDK Java 7 JRE Dockerfile
./usr/src/myapp
，从官方仓库获取Java基础镜像：
---
## Page 167
框架。
以选择Python作为Restful API后端或者移动App后端的实现语言。
系统）都支持Python。Python非常适合敏捷Web开发的各种应用场景。在中小型团队中，可
Python的可移植性非常强，所有的当前主流操作系统（Windows2000+，所有Mac，类Unix
各种需要可编程接口的应用：无论是各种系统管理接口，还是各种需要交互式CLI的应用。
Python代码与C/C++代码之间可以方便地相互调用。Python还可以作为
类（classes）等高级特性。Python设计精良，语法简约，表达能力很强。
态类型（dynamic typing）高级数据结构（元组、列表、序列），以及
的动态脚本语言。它集成了模块（modules）、异常处理（exceptions）动
13.4.1
13.4
：下面，笔者将带领大家使用Docker部署Python环境，以及部署Python技术栈中的主流
Python是一种解释型的、带CLI交互接口的、面向对象的、开源
我们可以使用 Docker官方的Python镜像作为基础，在此之上进行必要的定制：
1.使用官方镜像