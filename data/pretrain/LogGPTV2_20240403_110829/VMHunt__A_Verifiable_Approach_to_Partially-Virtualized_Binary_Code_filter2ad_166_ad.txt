eration procedure can be represented as the following formula. The
symbol t is a 32-bit integer representing the time when invoking the
ransomware. k is the 128-bit key for AES encryption. k is generated
by the concatenation of four encoding operations on t.
k = [t ⊕ 0xabcd1234, shl(t
, 4) ,
t ∧ 0xdeadbeef,
t + 1]
Particularly, based on our analysis, the virtualization tool translates
the t + 1 operation to 10 instructions in the VM, which add and
subtract constants as follows.
t + 1 = t − 522959822 − 4 + 20 + 8 − 4 − 16 + 4
+ 522959846 − 522959866 + 522959835
We rebuild the control flow graph from the virtualized snippet
and the kernel as shown in Appendix Figure 10. The kernel is
significantly simple than the virtualized snippet. We also looked into
the VM implementation and verified that the VM is implemented
in threaded model. There is no explicit dispatch loop inside the
execution trace. What’s more, we find a fake dispatch loop iterating
872 times. Each time it fetches an integer from an array and jump to
different fake handlers based on the integer value. The fake handlers
are all junk code. Our kernel extraction effectively filter out all of
those redundant sections.
8.5 Unvirtualized Programs
The effectiveness of VMHunt could be hurt by too many false
positives. We are curious about whether VMHunt produces false
positives on benign programs without virtualization. Therefore, we
apply VMHunt to testbed programs with all virtualization options
turned off. The result shows that the virtualization boundary detec-
tion does report several false positives. For example, some function
calls happen to use all registers. Those false positives are filtered out
in the following process when the virtualized kernel is extracted. In
benign programs, the program snippet extracted is almost the same
as the original trace since they are not obfuscated. Only the true
virtualized kernel is significantly smaller than the original trace.
Table 5 shows the size of the snippets extracted in the boundary
detection and virtualized kernel detection in the experiment on
grep. The virtualization boundary detection report 7 snippets as
possible virtualization snippet, in which two of them (snippet 4
and 7) are real virtualization snippets. As shown in Table 5, in the
snippets without virtualization, the kernel is the majority part of
the snippet because there is only a few redundant code. In contrast,
in the virtualized snippets, only very few instructions constitute
the kernel because lots of instructions are redundant. Therefore, the
ratio between kernel and the snippet is a good metric to filter out
the false positives. In our experiment, we set 90% as the threshold
to distinguish true virtualization snippet.
Besides, another observation is that the true virtualized snippet
is significantly longer than the benign snippets, because the virtu-
alized snippet includes the whole execution of a VM. This feature
is also used for filtering out the false positives. In VMHunt, we set
the threshold for snippet length as 10,000. These thresholds work
perfectly in our experiment. As the final result, VMHunt accurately
recognizes all virtualized snippets and reports zero false positive.
8.6 Performance
Overall, there are two phases in VMHunt, trace logging and offline
analysis. The trace logging component is built upon Intel Pin [38],
a dynamic binary instrumentation tool. The overhead of the trace
logging is typically about 5X slow down. Table 6 show the execu-
tion time of every component in the offline phase. The boundary
detection time increases as the trace size increases. The total time
of analyzing one program is about 20 minutes. Since all testbed
programs are real-world programs rather than synthetic examples,
VMHunt’s performance is good for practical virtualization analysis.
Table 5: The number of instructions of the snippets ex-
tracted in the boundary detection and kernel detection in
the grep experiment. Snippet 4 and 7 are true virtualization
snippets. S is the virtualized snippet size. K is the kernel size.
Snippet
S
1
2
3
4
5
6
7
5,371
218
3,557
130,329
1,697
2,392
168,857
K
5,103
218
3,282
552
1,572
2,288
1061
K/S(%)
95.01
100.00
92.27
0.42
92.63
95.61
0.63
Table 6: VMHunt’s offline analysis performance. BD is
boundary detection. K-Extraction is kernel extraction.
MGSE is multiple granularity symbolic execution. The ex-
ecution time is measured in minutes.
Programs
grep
bzip2
aes
BD K-Extraction MGSE Total
7.2
17.3
17.7
9.3
21.3
10.9
22.1
md5sum 11.4
thttpd
14.7
24.5
28.7
16.9
sqlite
4.8
3.7
4.1
4.9
4.7
5.1
5.3
4.7
6.3
5.8
5.1
6.7
9 DISCUSSION
In this section, we discuss VMHunt’s limitations, possible coun-
termeasures, and future work. First, VMHunt bears with the same
incompleteness as any dynamic analysis: every time only one exe-
cution path can be sufficiently analyzed. The possible mitigation is
to automatically generate new inputs to explore uncovered paths
through concolic execution [42] or guided fuzz testing [28]. Second,
an attack to VMHunt’s trace logging is to fingerprint dynamic bi-
nary instrumentation environment and then exit exceptionally [49].
We can strengthen VMHunt by running malware in a transparent
environment [34, 84]. Our multiple granularity symbolic execution
is effective to defeat data encodings via bitwise operations, which
are quite common in commercial obfuscators. Attackers can mislead
the detection of VM context switch by inserting redundant context
switch instructions. We can defend this attack in two ways: 1) these
redundant instructions can be removed in the simplification proce-
dure; 2) we can check whether the switched context is actually used
in the kernel; if not, the context switch instructions are considered
to be redundant. Some work strengthens code obfuscation by diver-
sifying VM contexts and handler functions [35, 75, 76]. However,
VMHunt’s semantics-based simplification is able to deal with the
code mutation effects.
Theoretically, if the whole program is virtualized, VMHunt is
hard to locate it because no context switch occur in this case. How-
ever, We wish to reiterate that whole program virtualization rarely
happens in practice. First, existing virtualization technique cannot
correctly handle some common program structures and instruc-
tions, so whole program virtualization will result in compatibility
problems. Second, whole program virtualization translate the entire
program to VM instructions and interpret them during runtime,
which will cause significant slowdown.
In all of our tested VMs, context switch instructions save and
restore the content for all general registers, because the VM exe-
cution uses all of them. It is possible to customize a VM that only
uses some of the registers, so the context switch instructions would
only save and restore those used registers. This design will affect
our context switch instruction clustering. One possible solution
is to check whether only those saved registers are used between
the context switch instructions. In practice, we have not observed
any virtualization obfuscator using partial registers. Using partial
registers complicates the design of VM greatly. Especially, fewer
number of available registers lead to more register spilling, which
results in worse performance.
10 RELATED WORK
Deobfuscation of code virtualization. Code virtualization is one
of the strongest obfuscation available to malware authors, and thus
automatic deobfuscation methods can assist rapid understanding of
malicious code. As the decode-dispatch based emulator is the classic,
simple way to virtualize program code [63], a large portion of the
previous works focus on reverse engineering this class of code vir-
tualization [29, 30, 51, 55, 59]. A representative work, Rotalumé [59],
uses dynamic analysis to detect the central decode-dispatch loop
and then find the mappings between bytecode and related handler
functions, whose control flow graphs are constructed for malware
analysis. However, the latest commercial obfuscators have adopted
two improvements to evade detection: 1) threaded interpretation
in which the central decode-dispatch loop does not exist any more;
2) fake decode-dispatch loops to mislead loop search. In contrast,
VMHunt is a generic approach that reveals better resilience to these
evasions. Note that the obfuscated handler functions can be further
optimized to better understand their semantics [9, 10, 22, 37, 57],
and VMHunt’s simplification approach is orthogonal to them.
The approaches in the second category do not require the as-
sumption of emulator structure. Instead, they attempt to select the
execution instructions that have control/data dependencies with
original code semantics [19, 40, 67, 83]. For example, Kevin et al.
perform equational reasoning [18] to identify the instructions that
affect system call arguments. They treat such instructions as an
approximation to the original code [19]. BinSim [40] achieves the
similar results through an enhanced backward slicing. However,
they may disregard the protected code that do not affect observable
behaviors. Dynamic taint analysis is also applied to removing the
instructions related to the dispatcher structure [67, 83], but only
taint source dependent instructions can be kept. In comparison,
VMHunt’s slicing starts from multiple sources at VM boundary,
making the resulting instructions more complete.
Another difference is that the correctness testing is seldom done
by the previous deobfuscation work, while our simplification re-
sult is provable. We use a theorem prover to prove the simplified
code is semantically equivalent to the original code. Some work
only measured the similarity of control flow graphs (e.g., around
80% similarity) [59, 83] or x86 instruction opcode [19], but they
didn’t prove their deobfuscation result has the same behavior as
the original program.
Symbolic execution of binary code. Symbolic execution has
emerged as a fundamental technique for automatically analyzing bi-
nary code [3, 4, 72, 82]. Many laborious security analysis tasks, such
as control flow de-obfuscation [7, 41], exploit generation [2, 6, 12],
and cryptographic function detection [81], have been recast as a
set of constraint satisfaction problems. Then advanced Satisfiability
Modulo Theories (SMT) solvers are utilized to solve these con-
straints efficiently. To harness the full strength of SMT solvers, the
key is to accurately abstract domain-specific security analysis task
as verification constraints. VMHunt’s multiple granularity symbolic
execution reverts data encoding effects and produces concise con-
straints that could otherwise be hard to solve. VMHunt advances
the use of symbolic execution in obfuscated binary code analysis.
11 CONCLUSION
Code virtualization is one of the most advanced software obfus-
cation techniques. Because of the high performance penalty and
incomplete compatibility, code virtualization is mainly used to pro-
tect selected code segments. Existing virtualization deobfuscation
work are either ad hoc, designed for a specific emulator structure,
or assuming the scope of virtualized code is known to security ana-
lysts a priori. This paper presents a novel approach called VMHunt,
a generic approach to locate virtualization-obfuscated code and sim-
plify it. We consider the common virtual machine context switch
behavior as a general detection feature, and optimize the obscure
virtualized code through a semantics-based slicing and multiple
granularity symbolic execution. Our evaluation shows that VMHunt
can accurately identify the virtualized section and greatly simplify
it by several orders of magnitude. Our study demonstrates VMHunt
is an appealing complement to malware analysis.
ACKNOWLEDGMENTS
We thank the CCS anonymous reviewers and Heng Yin for their
valuable feedback. This research was supported in part by the Na-
tional Science Foundation (NSF) grants CNS-1652790, and the Office
of Naval Research (ONR) grants N00014-16-1-2265, N00014-16-1-
2912, and N00014-17-1-2894. Jiang Ming was also supported by the
University of Texas System STARs Program.
REFERENCES
[1] Shahid Alam, Issa Traore, and Ibrahim Sogukpinar. 2014. Current Trends and the
Future of Metamorphic Malware Detection. In Proceedings of the 7th International
Conference on Security of Information and Networks (SIN’14).
[2] Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, and David Brumley. 2011.
AEG: Automatic Exploit Generation on Source Code. In Proceedings of the 18th
Annual Network and Distributed System Security Symposium (NDSS’11).
[3] Sebastian Banescu, Christian Collberg, Vijay Ganesh, Zack Newsham, and Alexan-
der Pretschner. 2016. Code Obfuscation Against Symbolic Execution Attacks.
In Proceedings of the 32nd Annual Conference on Computer Security Applications
(ACSAC’16).
[4] Sebastian Banescu, Christian Collberg, and Alexander Pretschner. 2017. Pre-
dicting the Resilience of Obfuscated Code Against Symbolic Execution Attacks
via Machine Learning. In Proceedings of the 26th USENIX Conference on Security
Symposium (USENIX Security’17).
[5] Sebastian Banescu, Ciprian Lucaci, Benjamin Krämer, and Alexander Pretschner.
2016. VOT4CS: A Virtualization Obfuscation Tool for C#. In Proceedings of the
2016 ACM Workshop on Software PROtection (SPRO’16).
[6] Tiffany Bao, Ruoyu Wang, Yan Shoshitaishvili, and David Brumley. 2017. Your Ex-
ploit is Mine: Automatic Shellcode Transplant for Remote Exploits. In Proceedings
of the 38th IEEE Symposium on Security and Privacy (S&P’17).
[7] S. Bardin, R. David, and J. Y. Marion. 2017. Backward-Bounded DSE: Targeting
Infeasibility Questions on Obfuscated Codes. In Proceedings of the 38th IEEE
Symposium on Security and Privacy (S&P’17).
[8] James R. Bell. 1973. Threaded Code. Commun. ACM 16, 6 (1973).
[9] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. 2017.
Syntia: Synthesizing the Semantics of Obfuscated Code. In Proceedings of the 26th
USENIX Conference on Security Symposium (USENIX Security’17).
[10] Ian Blumenfeld, Roberta Faux, and Paul Li. 2013. SMT Solvers for Malware
Unpacking. In Proceedings of the 11th InternationalWorkshop on Satisfiability
Modulo Theories (SMT’13).
[11] David Brumley, Ivan Jager, Thanassis Avgerinos, and Edward J. Schwartz. 2011.
BAP: A Binary Analysis Platform. In Proceedings of the 23rd international confer-
ence on computer aided verification (CAV’11).
[12] D. Brumley, P. Poosankam, D. Song, and J. Zheng. 2008. Automatic Patch-Based
Exploit Generation is Possible: Techniques and Implications. In Proceedings of
the 2008 IEEE Symposium on Security and Privacy (S&P’08).
[13] Joshua Cazalas, J. Todd McDonald, Todd R. Andel, and Natalia Stakhanova. 2014.
Probing the Limits of Virtualized Software Protection. In Proceedings of the 4th
Program Protection and Reverse Engineering Workshop (PPREW’14).
[14] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S 2 E: A
Platform for In-vivo Multi-path Analysis of Software Systems. In Proceedings
of the 16th International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS’11).
[15] Christian Collberg. last reviewed, 10/01/2017. The Tigress C Diversifier/Obfusca-
tor. http://tigress.cs.arizona.edu/.
[16] Christian Collberg and Jasvir Nagra. 2009. Surreptitious Software: Obfuscation,
Watermarking, and Tamperproofing for Software Protection. Addison-Wesley
Professional, Chapter 4.4, 258ś276.
[17] C. Collberg, C. Thomborson, and D. Low. 1998. Manufacturing cheap, resilient,
and stealthy opaque constructs. In Proceedings of the 25th ACM SIGPLAN-SIGACT
Symposium on Principles of programming languages (POPL’98).
[18] Kevin Coogan and Saumya Debray. 2011. Equational Reasoning on x86 Assembly
Code. In Proceedings of the 11th IEEE International Working Conference on Source
Code Analysis and Manipulation (SCAM’11).
[19] Kevin Coogan, Gen Lu, and Saumya Debray. 2011. Deobfuscation of virtualization-
obfuscated software: a semantics-based approach. In Proceedings of the 18th ACM
Conference on Computer and Communications Security (CCS’11).
[20] Robin David, Sébastien Bardin, Thanh Dinh Ta, Laurent Mounier, Josselin Feist,
Marie-Laure Potet, and Jean-Yves Marion. 2016. BINSEC/SE: A Dynamic Symbolic
Execution Toolkit for Binary-Level Analysis. Proceedings of the 23rd IEEE Interna-
tional Conference on Software Analysis, Evolution, and Reengineering (SANER’16)
(2016).
[21] Brian Davis, Andrew Beatty, Kevin Casey, David Gregg, and John Waldron. 2003.
The Case for Virtual Register Machines. In Proceedings of the 2003 Workshop on
Interpreters, Virtual Machines and Emulators.
[22] Fabrice Desclaux and Camille Mougey. 2017. Miasm: Reverse Engineering Frame-
work. RECON.