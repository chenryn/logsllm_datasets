The &bof_pack function packs arguments in a way that is compatible with 
Beacon's internal data parser API. This script uses the customary &btask to 
log the action the user asked Beacon to perform. 
And, &beacon_inline_execute runs the BOF with its arguments. 
该脚本首先确定会话的体系结构。 x86 BOF 仅在 x86 Beacon 会话中运行。 
相反，x64 BOF 将仅在 x64 Beacon 会话中运行。 然后，此脚本将目标 BOF
读取到 Aggressor Script 变量中。 下一步是整理我们的论点。 ＆bof_pack 函
数以与 Beacon 的内部数据解析器 API 兼容的方式打包参数。 该脚本使用习惯
的＆btask 记录用户要求 Beacon 执行的操作。 并且，＆
beacon_inline_execute 使用其参数运行 BOF。 
The &beacon_inline_execute function accepts the Beacon ID as the first 
argument, a string containing the BOF content as a second argument, the 
entry point as its third argument, and the packed arguments as its fourth 
argument. The option to choose an entrypoint exists in case you choose to 
combine like-functionality into a single BOF. 
＆beacon_inline_execute 函数将信标 ID 作为第一个参数，将包含 BOF 内容的
字符串作为第二个参数，将入口点作为第三个参数，并将打包的参数作为第四
个参数。 如果您选择将类似功能组合到单个 BOF 中，则存在选择入口点的选
项。 
Here is the C program that corresponds to the above script: 
这是与上述脚本相对应的 C 程序： 
/* 
 * Compile with: 
 * x86_64-w64-mingw32-gcc -c hello.c -o hello.x64.o 
 * i686-w64-mingw32-gcc -c hello.c -o hello.x86.o 
 */ 
#include  
#include  
#include  
#include "beacon.h" 
void demo(char * args, int length) { 
datap  parser; 
char * str_arg; 
int    num_arg; 
BeaconDataParse(&parser, args, length); 
str_arg = BeaconDataExtract(&parser, NULL); 
num_arg = BeaconDataInt(&parser); 
BeaconPrintf(CALLBACK_OUTPUT, "Message is %s 
with %d arg", str_arg, num_arg); 
} 
The demo function is our entrypoint. We declare the datap structure on the 
stack. This is an empty and unintialized structure with state information for 
extracting arguments prepared with &bof_pack. BeaconDataParse initializes 
our parser. BeaconDataExtract extracts a length-prefixed binary blob from our 
arguments. Our pack function has options to pack binary blobs as zero-
terminated strings encoded to the session's default character set, a zero-
terminated wide-character string, or a binary blob without transformation. The 
BeaconDataInt extracts an integer that was packed into our arguments. 
BeaconPrintf is one way to format output and make it available to the 
operator. 
演示功能是我们的切入点。 我们在堆栈上声明 datap 结构。 这是一个空的且
未初始化的结构，带有状态信息，用于提取使用＆bof_pack 准备的参数。 
BeaconDataParse 初始化我们的解析器。 BeaconDataExtract 从我们的参数
中提取一个以长度为前缀的二进制 blob。 我们的 pack 函数具有将二进制 blob
打包为编码为会话的默认字符集的零终止字符串，零终止宽字符字符串或不进
行转换的二进制 blob 的选项。 BeaconDataInt 提取一个打包到我们的参数中
的整数。 BeaconPrintf 是格式化输出并将其提供给操作员的一种方法。 
BOF C API 
Data Parser API 
The Data Parser API extracts arguments packed with Aggressor 
Script's &bof_pack function. 
Data Parser API 提取与 Aggressor 脚本的＆bof_pack 函数一起打包的参数。 
char * BeaconDataExtract (datap * parser, int * size) 
Extract a length-prefixed binary blob. The size argument may be NULL. If 
an address is provided, size is populated with the number-of-bytes extracted. 
提取长度为前缀的二进制 Blob。 size 参数可以为 NULL。 如果提供了地
址，那么将使用提取的字节数填充大小。 
int BeaconDataInt (datap * parser) 
Extract a 4b integer 
提取一个 4b 整数 
int BeaconDataLength (datap * parser) 
Get the amount of data left to parse 
获取剩余要解析的数据量 
void BeaconDataParse (datap * parser, char * buffer, int size) 
Prepare a data parser to extract arguments from the specified buffer 
准备数据解析器以从指定的缓冲区中提取参数 
short BeaconDataShort (datap * parser) 
Extract a 2b integer 
提取 2b 整数 
Output API 
The Output API returns output to Cobalt Strike. 
Output API 将输出返回给 Cobalt Strike。 
void BeaconPrintf (int type, char * fmt, ...) 
Format and present output to the Beacon operator 
格式化并将输出呈现给 Beacon 运算符 
void BeaconOutput (int type, char * data, int len) 
Send output to the Beacon operator 
将输出发送到信标运算符 
Each of these functions accepts a type argument. This type determines how 
Cobalt Strike will process the output and what it will present the output as. 
The types are: 
这些函数中的每一个都接受类型参数。 此类型确定“钴击”如何处理输出以及将
输出呈现为什么形式。 类型是： 
CALLBACK_OUTPUT is generic output. Cobalt Strike will convert this output to 
UTF-16 (internally) using the target's default character set. 
CALLBACK_OUTPUT 是通用输出。 Cobalt Strike 将使用目标的默认字符集
将此输出转换为 UTF-16（内部）。 
CALLBACK_OUTPUT_OEM is generic output. Cobalt Strike will convert this 
output to UTF-16 (internally) using the target's OEM character set. You 
probably won't need this, unless you're dealing with output from cmd.exe. 
CALLBACK_OUTPUT_OEM 是通用输出。 Cobalt Strike 将使用目标的 OEM
字符集将此输出（内部）转换为 UTF-16。 除非您要处理 cmd.exe 的输出，否
则可能不需要它。 
CALLBACK_ERROR is a generic error message. 
CALLBACK_ERROR 是一般错误消息。 
CALLBACK_OUTPUT_UTF8 is generic output. Cobalt Strike will convert this 
output to UTF-16 (internally) from UTF-8. 
CALLBACK_OUTPUT_UTF8 是通用输出。 Cobalt Strike 会将输出转换为
UTF-8（内部）为 UTF-16。 
Format API 
The format API is used to build large or repeating output. 
格式 API 用于构建大型或重复输出。 
void BeaconFormatAlloc (formatp * obj, int maxsz) 
Allocate memory to format complex or large output 
分配内存以格式化复杂或大型输出 
void BeaconFormatAppend (formatp * obj, char * data, int len) 
Append data to this format object 
将数据附加到此格式对象 
void BeaconFormatFree (formatp * obj) 
Free the format object 
释放格式对象 
void BeaconFormatInt (formatp * obj, int val) 
Append a 4b integer (big endian) to this object 
在此对象上附加一个 4b 整数（大端） 
void BeaconFormatPrintf (formatp * obj, char * fmt, ...) 
Append a formatted string to this object 
将格式化的字符串附加到此对象 
void BeaconFormatReset (formatp * obj) 
Resets the format object to its default state (prior to re-use) 
将格式对象重置为其默认状态（重用之前） 
char * BeaconFormatToString (formatp * obj, int * size) 
Extract formatted data into a single string. Populate the passed in size 
variable with the length of this string. These parameters are suitable for use 
with the BeaconOutput function. 
将格式化的数据提取到单个字符串中。 使用此字符串的长度填充传入的
size 变量。 这些参数适合与 BeaconOutput 函数一起使用。 
Internal APIs 
The following functions manipulate the token used in the current Beacon 
context: 
以下功能可操纵当前信标上下文中使用的令牌： 
BOOL BeaconUseToken (HANDLE token) 
Apply the specified token as Beacon's current thread token. This will report 
the new token to the user too. Returns TRUE if successful. FALSE is not. 
将指定的令牌用作信标的当前线程令牌。 这也将向用户报告新令牌。 如果
成功，则返回 TRUE。 FALSE 不是。 
void BeaconRevertToken () 
Drop the current thread token. Use this over direct calls to RevertToSelf. 
This function cleans up other state information about the token. 
删除当前线程令牌。 将此用于直接调用 RevertToSelf。 此函数清除有关令
牌的其他状态信息。 
BOOL BeaconIsAdmIn () 
Returns TRUE if Beacon is in a high-integrity context 
如果信标处于高完整性上下文中，则返回 TRUE 
The following functions provide some access to Beacon's process injection 
capability: 
以下功能使您可以访问 Beacon 的过程注入功能： 
void BeaconGetSpawnTo (BOOL x86, char * buffer, int length) 
Populate the specified buffer with the x86 or x64 spawnto value configured 
for this Beacon session. 
使用为此 Beacon 会话配置的 x86 或 x64 spawnto 值填充指定的缓冲区。 
void BeaconInjectProcess (HANDLE hProc, int pid, char * payload, int 
payload_len, int payload_offset, char * arg, int arg_len) 
This function will inject the specified payload into an existing process. Use 
payload_offset to specify the offset within the payload to begin execution. The 
arg value is for arguments. arg may be NULL. 
此功能会将指定的有效负载注入到现有进程中。 使用 payload_offset 指定
有效负载内的偏移量以开始执行。 arg 值用于参数。 arg 可以为 NULL。 
void BeaconInjectTemporaryProcess (PROCESS_INFORMATION * pInfo, 
char * payload, int payload_len, int payload_offset, char * arg, int arg_len) 
This function will inject the specified payload into a temporary process that 
your BOF opted to launch. Use payload_offset to specify the offset within the 
payload to begin execution. The arg value is for arguments. arg may be 
NULL. 
此功能会将指定的有效负载注入 BOF 选择启动的临时进程中。 使用
payload_offset 指定有效负载内的偏移量以开始执行。 arg 值用于参数。 arg
可以为 NULL。 
void BeaconCleanupProcess (PROCESS_INFORMATION * pInfo) 
This function cleans up some handles that are often forgotten about. Call 
this when you're done interacting with the handles for a process. You don't 
need to wait for the process to exit or finish. 
此功能清除了一些经常被遗忘的句柄。 与流程的句柄交互完成后，请调用此
函数。 您无需等待进程退出或完成。 
The following function is a utility function: 
以下功能是实用程序功能： 
BOOL toWideChar (char * src, wchar_t * dst, int max) 
Convert the src string to a UTF16-LE wide-character string, using the 
target's default encoding. max is the size (in bytes!) of the destination buffer. 
使用目标的默认编码将 src 字符串转换为 UTF16-LE 宽字符字符串。 max
是目标缓冲区的大小（以字节为单位！）。 
https://youtu.be/gfYswA_Ronw