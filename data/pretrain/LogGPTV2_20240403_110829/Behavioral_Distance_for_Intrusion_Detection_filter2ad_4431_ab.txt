Assume that a sequence of system calls s is given in the form of a sequence
of system call phrases. Let prs(s) denote the number of system call phrases in
the sequence. Given two sequences s1 and s2, we deﬁne Ext(si, n) as the set of
sequences obtained by inserting n− prs(si) I/D phrases into si, at any locations
(i ∈ {1, 2}). n = f1(prs(s1), prs(s2)) is the length of the extended sequences after
inserting I/D phrases. In order to give more ﬂexibility in the phrase alignments,
f1() ensures that n > max(prs(s1), prs(s2)). (The deﬁnition of f1() used in our
experiments is shown in Section 3.6.)
We deﬁne the behavioral distance between two system call sequences s1 and
s2 as
Dist(s1, s2) = min
(cid:1)
(cid:1)
1,s
s
2
dist(s
(cid:3)
1,i, s
(cid:3)
2,i)
n(cid:2)
i=1
where
s
s
1 ∈ Ext(s1, n)
(cid:3)
2 ∈ Ext(s2, n)
(cid:3)
(cid:3)
(cid:3)
1,i is the ith phrase in s
1
(cid:3)
(cid:3)
2,i is the ith phrase in s
2.
(cid:3)
(cid:3)
The minimum is taken over all possible values of s
2. dist() is the entry
1 and s
in the distance table, which deﬁnes the distance between any two phrases from
the two replicas. (Section 3.3 discusses how we obtain the distance table. Here
we assume that the distance table is given.)
s
s
70
D. Gao, M.K. Reiter, and D. Song
For example, in the case where each phrase is of length one, the calculation
of Dist(s1, s2) from the example in Figure 2 may indicate that the minimum is
obtained when
1 = (cid:1)open1, read1, σ, write1, close1(cid:2)
(cid:3)
2 = (cid:1)open2, read2, idle2, write2, close2(cid:2).
(cid:3)
s
s
3.3 Learning the Distance Table
The calculation of behavioral distance shown in Section 3.2 assumes that the
distances between any two system call phrases are known. In this subsection,
we detail how we obtain the distance table by learning. To make the explana-
tions clearer, we assume that the two replicas are running Linux and Microsoft
Windows3 operating systems.
One way to obtain the distance table is to analyze the semantics of each
phrase and then manually assign the distances according to the similarity of the
semantics. There are several diﬃculties with this approach. First, this is labor
intensive. (Note that the set of system call phrases is likely to be diﬀerent for
diﬀerent programs.) Second, the information may not be available, e.g., most
system calls are not documented in Windows. Third, even if they are well doc-
umented, e.g., as in Linux, the distances obtained in this way will be general to
the operating system, and might not be able to capture any speciﬁc features of
the program running on the replicas.
Instead, we propose an automatic way for deriving the distance table by
learning. As pointed out in Section 1, our objective is to ﬁnd the correlation
between system call phrases by ﬁrst subjecting the server replicas to a battery
of well-formed (benign) requests and observing the system calls induced. We use
the pairs of system call sequences (i.e., system call sequences made by the two
replicas when processing the same request) in the training data to obtain the
distance table, which contains distances between any two system call phrases
observed in the training data. To do that, we ﬁrst initialize the distance table,
and then run a number of iterations to update the entries in the distance table.
The iterative process stops when the distance table converges, i.e., when the
distance values in the table change by only a small amount for a few consecutive
iterations. In each iteration, we calculate the behavioral distance between any
system call sequence pairs in the training data (using the modiﬁed distance
values from the previous iteration), and then use the results of the behavioral
distance calculation to update the distance table. We explain how we initialize
and update the distance table in the following two subsections.
Initializing the Distance Table. The initial distance values in the distance
table play an important role in the performance of the system. Improper values
3 System calls in Microsoft Windows are usually called native API or system services.
In this paper, however, we use the term “system call” for both Linux and Microsoft
Windows for simplicity.
Behavioral Distance for Intrusion Detection
71
might result in converging to a local minimum, or slower convergence. We in-
troduce two approaches to initialize these distances. We use the ﬁrst approach
to initialize entries in the distance table that involve system calls for which we
know the behavior, and use the second approach for the rest. Intuitively, distance
between phrases that perform similar tasks should be assigned a small value.
i
The First Approach. The ﬁrst approach to initialize these distances is by ana-
lyzing the semantics of individual system calls in Linux and Windows. We ﬁrst
assign similarity values to each pair of system calls in Linux and Windows. Let
CL and CW be the set of system calls in Linux and Windows, respectively. We
analyze each Linux system call and Windows system call and assign a value to
∈ CW for all
sim(cL
j ∈ {1, 2, . . . ,|CW|}. System calls that perform similar functions are assigned a
small similarity value. We then initialize the distances between two system call
phrases based on these similarity values.
∈ CL for all i ∈ {1, 2, . . . ,|CL|} and cW
j ), where cL
i , cW
Let P L and P W be the set of Linux system call phrases and Windows sys-
j ),
i , pW
∈ P W . (Let
j ) denote the initial distance.) We use len(p) to denote the number
tem call phrases observed, respectively. We would like to calculate dist(pL
i.e., the distance between two phrases where pL
i
dist0(pL
of system calls in a phrase p. dist0(pL
j ) can now be calculated as
∈ P L and pW
i , pW
i , pW
j
j
dist0(pL
j )
i , pW
(cid:3){sim(pL
i,k, pW
=f2
where
j,l) | k ∈ {1, 2, . . . , len(pL
i )}; l ∈ {1, 2, . . . , len(pW
j )}}(cid:4)
∈ CL
∈ CW
pL
i,k
pW
j,l
is the kth system call in phrase pL
i
is the lth system call in phrase pW
j .
Intuitively, if system calls in the two phrases have small similarity values with
each other, the distance between the two phrases should be low. (The deﬁnition
of f2() used in our experiments is shown in Section 3.6.)
The main diﬃculty of this approach is that Windows system calls are not well
documented. We have managed to obtain the system call IDs of 94 exported Win-
dows system calls with their function prototypes [19].4 We then assign distances
to these 94 Windows system calls and the Linux system calls by comparing their
semantics. Since we do not know the system call IDs and semantics of the rest of
the Windows system calls, we propose a second method to initialize the distance
table for phrases that involve the rest of the system calls.
The second approach. The second approach to initialize the distance between two
phrases is to use frequency information. Intuitively, if two system call phrases
perform similar tasks on two replicas, they will occur in the system call sequences
4 Nebbett [19] lists 95 exported Windows system calls, but we only managed to ﬁnd
94, which are not exactly the same as those listed by Nebbett.
72
D. Gao, M.K. Reiter, and D. Song
in the training data with similar frequencies. We obtain the frequency informa-
tion when the phrases are ﬁrst identiﬁed by a phrase extraction algorithm and
a phrase reduction algorithm; see Section 3.5. The phrase extraction algorithm
analyzes system call sequences from sample executions, and outputs a set of sys-
tem call phrases. The phrase reduction algorithm takes this result and outputs
a subset of the system call phrases that are necessary to “cover” the training
data, in the sense described below.
j
The phrase reduction algorithm runs a number of rounds to ﬁnd the mini-
mal subset of system call phrases identiﬁed by the phrase extraction algorithm
that can cover the training data. Each round in the phrase reduction algorithm
outputs one system call phrase that has the highest coverage (number of occur-
rences times length of the phrase) in the training data. After the phrase with the
highest coverage is found in each round, the system call sequences in the training
data are modiﬁed by removing all occurrences of that phrase. The phrase reduc-
i )
tion algorithm terminates when the training data becomes empty. Let cnt(pL
and cnt(pW
in the
training data when they are identiﬁed and removed by the phrase reduction al-
gorithm, and let cnt(P L) and cnt(P W ) denote the total number of occurrences
of all phrases. The frequency with which phrases pL
j are identiﬁed can
be calculated as cnt(pL
i )
j ) denote the number of occurrences of phrases pL
i and pW
j )
cnt(P L) and cnt(pW
cnt(P W ), respectively.
i and pW
The idea is that system call phrases identiﬁed with similar frequencies in the
training data are likely to perform the same task, and therefore will be assigned
a lower distance.
dist0(pL
i , pW
j ) = f3
(cid:5)
i )
cnt(pL
cnt(P L) ,
cnt(pW
j )
cnt(P W )
(cid:6)
.
f3() compares the frequencies with which phrases pL
j are identiﬁed and
assigns a distance accordingly. (The deﬁnition of f3() that we use in our experi-
ments is shown in Section 3.6.) Distances between a system call phrase and the
I/D phrase σ are assigned a constant. dist(σ, σ) is always zero.
i and pW
Iteratively Updating the Distance Table. In this subsection, we show how
we use the system call sequences in the training data to update the distance
table iteratively. We run a number of iterations. The distances are updated in
each iteration, and the process stops when the distance table converges, i.e.,
when the distance values in the table change by only a small amount in a few
consecutive iterations. In each iteration, we ﬁrst calculate the behavioral distance
between any pairs of system call sequences (i.e., system call sequences made by
the two replicas when processing the same request) in the training data, using
the updated distance values from the previous iteration, and then use the results
of the behavioral distance calculation to update the distance table.
Note that the result of the behavioral distance calculation not only gives the
minimum of the sum of distances over diﬀerent alignment schemes, but also the
particular alignment that results in the minimum. Thus, we analyze the result
Behavioral Distance for Intrusion Detection
73
of the behavioral distance calculation to ﬁnd out the frequencies with which two
phrases are aligned to each other, and use this frequency information to update
the corresponding value in the distance table.
i , pW
Let occz(pL
j are aligned
to each other in the results of the behavioral distance calculation in the zth
iteration. We then update dist(pL
j ) denote the total number of times that pL
i and pW
distz+1(pL
i , pW
j ) as
i , pW
(cid:3)
distz(pL
j ) = f4
i , pW
(cid:4)
j )
i , pW
j ) is, the smaller distz+1(pL
i , pW
j ), occz(pL
i , pW
.
Intuitively, the larger occz(pL
j ) should be.
(The deﬁnition of f4() used in our experiments is shown in Section 3.6.)
dist(pL
j ) are updated in the same way, and dist(σ, σ) = 0.
i , σ) and dist(σ, pW
After the distances are updated, we start the next iteration, where we cal-
culate the behavioral distances between system call sequences in the training
data using the new distance values. The process of behavioral distance calcu-
lation and distance table updating repeats until the distance table converges,
i.e., when the distance values in the table change by a small amount for a few
consecutive iterations.
3.4 Real-Time Monitoring
After obtaining the distance table by learning, we use the system for real-time
monitoring. Each request from a client is sent to both replicas, and such a request
results in a sequence of system calls made by each replica. We collect the two
system call sequences from both replicas in real time and calculate the behavioral
distance between the two sequences. If the behavioral distance is higher than a
threshold, an alarm is raised.
3.5 System Call Phrases
Before we start calculating the behavioral distance, we need to break a system
call sequence into system call phrases. System call phrases have been used in
intrusion/anomaly detection systems [37, 13]. Working on system call phrases
signiﬁcantly improves the performance of behavioral distance calculation, since
a relatively long system call sequence is recognized as a short sequence of system
call phrases.
We use the phrase extraction algorithm TEIRESIAS [23] and the phrase re-
duction algorithm in [37], which are also used in intrusion/anomaly detection
systems [37, 13], to extract system call phrases. The TEIRESIAS algorithm ana-
lyzes system call sequences from sample executions, and outputs a set of system
call phrases that are guaranteed to be maximal [23]. Maximal phrases (the num-
ber of occurrences of which will decrease if the phrases are extended to include
any additional system call) capture system calls that are made in a ﬁxed se-
quence, and therefore intuitively should conform to basic blocks/functions in