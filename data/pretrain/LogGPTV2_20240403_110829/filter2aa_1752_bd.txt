### 时间处理函数

#### `mktime()` 和 `tzset()`
`mktime()` 函数将一个表示本地时间的 `tm` 结构体转换为 `time_t` 类型的时间。`tzset()` 用于设置时区信息，通常在调用 `localtime()` 或 `mktime()` 之前调用。

```c
#include <time.h>

time_t mktime(struct tm *timeptr);
void tzset(void);
```

示例：
```c
struct tm t = {0};
t.tm_year = 2023 - 1900; // Year since 1900
t.tm_mon = 9;           // Month (0-11)
t.tm_mday = 1;          // Day of the month (1-31)
t.tm_hour = 12;         // Hour (0-23)
t.tm_min = 0;           // Minute (0-59)
t.tm_sec = 0;           // Second (0-59)

time_t t_time = mktime(&t);
if (t_time == -1) {
    perror("mktime");
}
```

#### `ctime()`
`ctime()` 函数将 `time_t` 类型的时间转换为可读的 ASCII 字符串格式。

```c
#include <time.h>

char *ctime(const time_t *timep);
char *ctime_r(const time_t *timep, char *buf);
```

示例：
```c
time_t t = time(NULL);
printf("The time a moment ago: %s", ctime(&t));
```

`ctime_r()` 是 `ctime()` 的线程安全版本，需要提供一个缓冲区 `buf` 来存储结果。

#### `asctime()`
`asctime()` 函数与 `ctime()` 类似，但接受 `tm` 结构体作为输入。

```c
char *asctime(const struct tm *timeptr);
char *asctime_r(const struct tm *timeptr, char *buf);
```

#### `gmtime()` 和 `localtime()`
`gmtime()` 将 `time_t` 类型的时间转换为 UTC 时间的 `tm` 结构体，而 `localtime()` 转换为本地时间。

```c
#include <time.h>

struct tm *gmtime(const time_t *timep);
struct tm *gmtime_r(const time_t *timep, struct tm *result);

struct tm *localtime(const time_t *timep);
struct tm *localtime_r(const time_t *timep, struct tm *result);
```

示例：
```c
time_t t = time(NULL);
struct tm *gmt = gmtime(&t);
struct tm *loc = localtime(&t);

if (gmt == NULL || loc == NULL) {
    perror("gmtime or localtime");
} else {
    printf("GMT: %s", asctime(gmt));
    printf("Local: %s", asctime(loc));
}
```

#### `difftime()`
`difftime()` 函数计算两个 `time_t` 类型时间之间的差值（以秒为单位）。

```c
#include <time.h>

double difftime(time_t time1, time_t time0);
```

示例：
```c
time_t t1, t2;
t1 = time(NULL);
sleep(5); // Sleep for 5 seconds
t2 = time(NULL);

double diff = difftime(t2, t1);
printf("Time difference: %.2f seconds\n", diff);
```

### 调校系统时钟
`adjtime()` 和 `adjtimex()` 函数用于调整系统时钟。

#### `adjtime()`
`adjtime()` 函数允许逐步调整系统时钟。

```c
#include <sys/time.h>

int adjtime(const struct timeval *delta, struct timeval *olddelta);
```

示例：
```c
struct timeval delta = { .tv_sec = 10, .tv_usec = 0 };
struct timeval olddelta;

if (adjtime(&delta, &olddelta) == -1) {
    perror("adjtime");
}
```

#### `adjtimex()`
`adjtimex()` 函数提供了更详细的时钟调整选项。

```c
#include <sys/timex.h>

int adjtimex(struct timex *txc);
```

示例：
```c
struct timex tx = { .modes = ADJ_OFFSET, .offset = 10000 };
if (adjtimex(&tx) == -1) {
    perror("adjtimex");
}
```

### 睡眠和等待
`sleep()`、`usleep()` 和 `nanosleep()` 函数用于让进程暂停执行一段时间。

#### `sleep()`
`sleep()` 函数使进程暂停指定的秒数。

```c
#include <unistd.h>

unsigned int sleep(unsigned int seconds);
```

示例：
```c
sleep(7); // Sleep for 7 seconds
```

#### `usleep()`
`usleep()` 函数使进程暂停指定的微秒数。

```c
#include <unistd.h>

int usleep(useconds_t usec);
```

示例：
```c
usleep(200); // Sleep for 200 microseconds
```

#### `nanosleep()`
`nanosleep()` 函数提供了更高精度的睡眠控制。

```c
#include <time.h>

int nanosleep(const struct timespec *req, struct timespec *rem);
```

示例：
```c
struct timespec req = { .tv_sec = 0, .tv_nsec = 200 };
if (nanosleep(&req, NULL) == -1) {
    perror("nanosleep");
}
```

### 定时器
定时器可以用于在指定时间后触发某个事件。

#### `alarm()`
`alarm()` 函数设置一个简单的闹钟，在指定的秒数后发送 `SIGALRM` 信号。

```c
#include <unistd.h>

unsigned int alarm(unsigned int seconds);
```

示例：
```c
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

void alarm_handler(int signum) {
    printf("Five seconds passed!\n");
}

int main() {
    signal(SIGALRM, alarm_handler);
    alarm(5); // Set an alarm for 5 seconds
    pause();  // Wait for the signal
    return 0;
}
```

通过这些函数，你可以有效地管理和操作时间相关的任务。