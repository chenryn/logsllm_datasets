a family of properties. For example, zero-sized allocations is
an umbrella denomination for calls to dynamic memory allo-
cation APIs such as the user-mode malloc, the kernel-mode
ExAllocatePool, dynamic array allocations via the new
operator, or object constructors taking an integer parameter
that is used to allocate an internal buffer used within this class
object.
Other interesting properties come from expected contracts of
special VARIANT object (recall the example from Section II).
The type names have been changed to avoid unintended
consequences of releasing such information. Such data struc-
tures holding run-time type information can be the source of
multiple security vulnerabilities if they are initialized or used
incorrectly.
Another interesting property (“Interface reference count-
ing”) arises from the need to enforce the usage of interfaces
in object-oriented programs. An interface can be seen as a
structure that holds a ﬁxed list of function pointers. Interfaces
are usually reference counted and released once their expected
life time has been reached. Our introductory example in
the overview section was taken from this class of security
vulnerabilities affecting object-oriented software.
The property of library path qualiﬁcation captures the intent
that no binary dependence should be loaded from an unknown
location under the threat of loading untrusted code (potentially
from a remote location if the path is in the UNC format
such as “\\remote\machine\untrusted.dll”). On the other
hand, a preceding call to a trusted path-retrieving API such
as GetSystemDirectory acts as a sanitizer, as it provides
a proof that such path is preﬁxed by a string of the form
“c : \windows\system32”.
B. Results
The result of checking those properties over the course
of a year is presented in Figure 9. We identiﬁed around 70
vulnerabilities in critical software components using a build
server equipped with 48 cores and 96GB of RAM to perform
this analysis. While the big number of cores signiﬁcantly
speeds up the intra-procedural analysis, the inter-procedural
does not currently beneﬁt from it due to the sequential im-
plementation. The “Check” time is the time to only check the
annotations intra-procedurally, including inferred annotations
if any. The “Inference” time is the time taken to perform the
inter-procedural annotation inference. We also report a few
other vulnerabilities for other properties later in this section
— we did not perform a thorough evaluation of times etc. for
these properties.
Each analyzed property corresponds to a class of security
vulnerability previously discovered and ﬁxed in the analyzed
code base via general distribution release of security bulletins.
We only applied a particular property checking to the code
bases that were affected by the property — this explains the
difference in code size for each experiment. While some of the
properties (e.g. Library path qualiﬁcation) affected all user-
mode code bases, others (such as the DOM property) only
affects the core browser engine. Other generic COM properties
such as the VARIANT initialization and type safety checking
41
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:10 UTC from IEEE Xplore.  Restrictions apply. 
Properties
Zero-sized allocations
Empty array construction
VARIANT initialization
VARIANT type safety
Interface reference counting
Library path validation
DOM information disclosure DOM accessors only returns success on successful completion.
Description
Dynamic memory allocations should never be of size 0.
There is always at least one element in new[] allocated arrays.
VARIANT structures should never be used without initialization.
VARIANT union ﬁelds should never be referenced without proper ﬁeld type value.
Interfaces should never be released without prior reference or initialization.
Dependencies modules should never be loaded without fully qualiﬁed path.
Fig. 8. Checked security properties
Properties
LOC
Procnum Bugs Check
Zero-sized allocations
Empty array constructor
VARIANT initialization
VARIANT type safety
Interface reference counting
Library path qualiﬁcation
DOM information disclosure
2.8M 58K
1.2M 3.1K
6.5M 196K
6.5M 196K
2M
11.2K
20M Millions
2.5M Hundreds
9
0
5
8
4
35
2
Fig. 9. Summary of results.
time
3h14
26m
5h03
5h03
2h26
5d
1h42
Inference
time
3h22
6m13
11h40
11h40
20h
N/A
N/A
and the interface reference counting were ran on a set of large
user-mode code bases making heavy use of such features. Two
properties affecting the VARIANT structures were checked
together on the same code-base, hence the check time and
inference time are the same for both.
Note that inference information is not available for two
properties:
the library path qualiﬁcation acted on tens of
millions of lines of code, a size for which inference is not
able to scale due to the sequential implementation. Likewise,
the DOM information disclosure property only affected class
accessors of the form CBrowserObj::get_attr totalizing
only a few hundred methods to check in just 8 different classes
for which the manual warning review process was fast enough
without inference.
In addition to the properties described in Figure 8, we
also uncovered security critical bugs from other checks. We
describe a couple of them next.
1) We also applied HAVOC (earlier version) to check
user-kernel pointer probing on the Windows application
APIs — to ensure that user-mode pointer should always
be validated by speciﬁc Probe* APIs before being
dereferenced in the kernel [20]. The effort on around
300KLOC revealed another 7 bugs that were ﬁxed.
These bugs are counted towards the 70 bugs that we
report.
2) We also discovered a set of errors during the translation
from C source ﬁles to the well-typed BoogiePL lan-
guage. One of the checked kernel driver was using the
following mechanism at multiple locations:
void fctelm() { (...) }
int syscall(int num) {
return ((*fctptrs[num])());
}
where syscall is a kernel entry-point returning an
integer error code to the unprivileged user, and fctelm
is a void-returning function, which is part of a function
pointer array fctptrs whose elements were supposed
to return an integer. Such unsafe function pointer ele-
ments in the array were possible at compilation time due
to the use of unsafe function pointer casts. Such defect
can result in information disclosure security vulnerabil-
ities since the return value (on the Pentium architecture,
held in the eax register) is uninitialized in the fctelm
function and used for another purpose (for example,
holding the pointer to sensitive kernel data structures).
We discovered around 30+ bugs in the driver that were
ﬁxed. These are in addition to the 70 bugs that were
found as variants of existing vulnerabilities.
C. Inter-procedural annotation inference
Inference is a useful technique to improve the checker’s
result when properties depend on the caller function context
and the results of callee functions.
Figure 10 shows the difference in number of false positives
when the user-guided annotation inference was used. Inter-
procedural analysis brings improvements in precision and
lessen the amount of false positives, but the impact varies by
the property. We found that for most sparse properties (such
as the API related properties where only small numbers of
checks are performed compared to the program size), the
number of warnings diminishes by 10% to 45% depending on
the checked property. A simple example of inference used to
check the zero allocation property used generated candidate
contracts of the form:
__cand_requires(param != 0)
__cand_ensures(__return != 0)
42
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:10 UTC from IEEE Xplore.  Restrictions apply. 
Properties
Zero-sized allocations
Empty array constructor
VARIANT initialization
VARIANT type safety
Interface reference counting
DOM information disclosure
Library path qualiﬁcation
Warnings Warnings
Warnings with inference
71
45
216
83
746
82
280
50
35
117
68
672 (3)
N/A
N/A
Improvement Candidates
29%
22%
45%
18%
10%
N/A
N/A
75162
4024
100924
100924
234K
N/A
N/A
Inferred
candidates
42160
446
770
770
1671
N/A
N/A
Fig. 10. Results of running annotation inference. “Candidates” denotes the number of candidate annotations and “Inferred candidates” is the number of
annotations that were inferred to hold.
int fct(int param) { ... }
D. Use of unsound modiﬁes clauses
for every function accepting integer parameters and integer
return values. Therefore, enforced preconditions of the form:
__requires(size != 0)
void* ExAllocatePool(unsigned int size);
can be checked with knowledge of the inferred (persisted)
constraints at function boundaries. In this case, the burden of
writing the candidate annotations before the checking phase
is performed is very small and provides a good payoff in
diminishing the number of false positives. We have applied this
methodology to multiple properties as indicated in Figure 10.
Properties such as “interface reference counting” are ones
for which inference is the most useful as the number of
pointers to be tracked within the target modules is generally
quite large. Such pointers can also sometimes passed between
modules, which limit the ability of inference to ﬁlter out
false positives. This is reﬂected in the false positive ratio of
Figure 10. In general, our experiments support the fact that
while inference does not sufﬁce to reach a perfect analysis
result, its use allow diminishing the burden of warning reviews
in an appreciable way for security auditors.
Annotation inference works best when the set of interme-
diate annotations can be concisely expressed using candidate
annotations that can be added with simple instrumentations. A
user starts with the property under check, inspects the warnings
from the checking and then devises a small set of candidates.
Annotation inference is performed and the new set of warnings
are noted and new candidates are added. The process remains
cost-effective up to a couple of iterations, beyond which the
auditor preferred to manually inspect the false alarms.
Cases where inference fails to diminish the number of
false positives include functions with aliasing between pointer
parameters for which no annotation can be synthesized without
introducing more complex conditional constraints. In other
cases, the annotations need to talk about type-states of deeply
nested ﬁelds of parameters, or global variables. While such
conditions can be encoded with modest manual effort for indi-
vidual functions, such a scheme will likely generate too many
candidate annotations for the modules under consideration.
In addition to using inference, we also performed an
evaluation with the use of modifies clauses, where extra
assumptions were added telling that the state of the heap did
not change when function calls are performed. This is an
unsound assumption but has the advantage of bringing down
the number of false positives drastically. For example, when
checking the interface reference counting property, enabling
this option brought the warning number down from 672 (after
using inter-procedural
inference) to 3, of which all were
valid vulnerabilities. We employed this unsound mechanism
for this particular property for two reasons: (1) the set of
alarms even after inference was very large, and (2) a random
sampling of the warnings revealed that state updates of the
interface pointers in callees was responsible for the false
alarms. No extra annotations were explicitly necessary for such
assumptions, as HAVOC-LITE provides an option through
the conﬁguration ﬁle. A similar decrease in warning numbers
is witnessed on other properties though this option is only
deemed necessary when the initial set of (false positive) alerts
is large enough to justify losing soundness.
E. Cost-effectiveness and warnings review
The cost-effectiveness of using an extended static checker
varies depending on each property. We found that security
properties related to API calls are generally sparse; only a few
calls are instrumented with assertions or candidates compared
to the total number of lines of code and procedures of the
analyzed modules. Checking ﬁeld dereference also came with
a reasonable return on investment as long as the number
of ﬁelds that were checked for dereferences remained small
enough. We found that
the number of false positives for
sparse properties (such as library path qualiﬁcation, zero-sized
allocations, VARIANT initialization or VARIANT type-safety)
was acceptable as we consistently found new vulnerabilities in
the reported warning list. Other denser properties (such as the
previous attempt of user kernel pointer probing) were harder
to check with only 5-10% of real vulnerabilities among the
total list of warnings. We explain this by the need to have
every single pointer dereference be instrumented, representing
tens of thousands of dereferences on medium sized modules.
Another interesting metric to measure the success of such
tool comes from the engineer feedback. We found that, on
43
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:10 UTC from IEEE Xplore.  Restrictions apply. 
average, a security expert can review between 25 and 50
warnings per day. For some properties involving very deep
inference and for which a function containing an alert has a
large number of callees, we found that it can take one to four
hours to review a single warning. This can also happen in case
of very complex control ﬂow that arises within or between
multiple components. Such cases often involve indirect call
sites via function pointers or virtual methods, including call-
backs that sometimes cross a domain boundary (i.e. user-mode
call-backs). For such instances of warnings, the help of a de-
bugger is often necessary to understand whether the discovered
vulnerable context is feasible, and more importantly, can be
controlled by the user. A bug may be benign from the security
perspective, if the variable values that can trigger the unsafe
behavior are not under the control of the user (for example,
the variables can be under control of a trusted third party
components on which the analysis was not performed).
Overall, we found that the use of HAVOC-LITE was cost-
effective compared to pure manual code review. A similar
analysis done purely in a manual fashion would have required
weeks if not months of work. The ability of static analysis to
focus on crucial control locations and speciﬁc data manipula-
tions was fundamental in this exercise. The ability to perform
inter-procedural inference brought down the warning number
consistently, saving hours of warning review to the analyst.
F. Found vulnerabilities
We now give a few examples of vulnerabilities that we were
able to identify using extended static checking, starting with
the interface reference counting vulnerability class.
1) Interface reference counting: The ﬁrst example (Fig-
ure 11) of found and ﬁxed vulnerability relates to the ref-
erence counting property of interfaces. The COM model
makes heavy use of interface pointers, in particular in object-
oriented projects like the browser where deep levels of in-
heritance are used and objects in different hierarchies share
some features. Those features are therefore implemented in
interfaces that classes can inherit without having to derive
from another class. The IUnknown interface serves as a
base interface for all other interface and class types (such
as CBrowserElement in this example) by implementing
three core methods called QueryInterface, AddRef and
Release. A call to QueryInterface accepts an interface
identiﬁer and returns an array of function pointers that repre-
sents the implementation of the desired interface. If no such
interface is available in the base object, QueryInterface
will return an error. Otherwise, it will return status code S_OK.
Note that QueryInterface also performs a call to AddRef
on the base class if the query is successful, so that the class
is not freed while the program still holds a reference onto
one of its interface. A critical safety property of such model
states that any pointer on a COM interface written to via a
call to QueryInterface should be released by a call to
ReleaseInterface after usage, except when the call to
QueryInterface failed (in that case, there is nothing to
release). The ReleaseInterface API is simply a wrapper
to the Release method that adds a wrapping check that
ensures that the interface pointer is not NULL (in that case,
the function is simply a NO OP).
HRESULT
IUnknown ∗
i f
h r ;
pUnk ;
( ! pElem ) {
h r = E INVALIDARG ;
goto End ;
}
h r = pElem−>Q u e r y I n t e r f a c e ( IID ExpectedType ,
1 CSomeElement : : add ( CBrowserElement ∗pElem ){
2
3
4
5
6
7