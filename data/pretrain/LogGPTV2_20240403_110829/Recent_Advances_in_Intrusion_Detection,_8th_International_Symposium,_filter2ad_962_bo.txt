213
contain signiﬁcantly diﬀerent instructions. For example, the system should han-
dle a block that contains a system call invocation diﬀerently from one that does
not. To represent information about basic blocks, a color is assigned to each node
in the control ﬂow graph. This color is derived from the instructions in each block.
The block coloring technique is used when identifying common substructures,
that is, two subgraphs (with k nodes) are isomorphic only if the vertices are
connected in the same way and the color of each vertex pair matches. Using
graph coloring, the characterization of an executable region can be signiﬁcantly
improved. This reduces the amount of graphs that are incorrectly considered
related and lowers the false positive rate.
4 Control Flow Graph Extraction
The initial task of our system is to construct a control ﬂow graph from a network
stream. This requires two steps. In the ﬁrst step, we perform a linear disassembly
of the byte stream to extract the machine instructions. In the second step, based
on this sequence of instructions, we use standard techniques to create a control
ﬂow graph.
One problem is that it is not known a priori where executable code regions
are located within a network stream or whether the stream contains executable
code at all. Thus, it is not immediately clear which parts of a stream should be
disassembled. The problem is exacerbated by the fact that for many instruction
set architectures, and in particular for the Intel x86 instruction set, most bit
combinations map to valid instructions. As a result, it is highly probable that
even a stream of random bytes could be disassembled into a valid instruction
sequence. This makes it very diﬃcult to reliably distinguish between valid code
areas and random bytes (or ASCII text) by checking only for the presence or
absence of valid instructions.
We address this problem by disassembling the entire byte stream ﬁrst and
deferring the identiﬁcation of “meaningful” code regions after the construction
of the CFG. This approach is motivated by the observation that the structure
(i.e., the CFG) of actual code diﬀers signiﬁcantly from the structure of random
instruction sequences. The CFG of actual code contains large clusters of closely
connected basic blocks, while the CFG of a random sequence usually contains
mostly single, isolated blocks or small clusters. The reason is that the disassembly
of non-code byte streams results in a number of invalid basic blocks that can be
removed from the CFG, causing it to break into many small fragments. A basic
block is considered invalid (i) if it contains one or more invalid instructions,
(ii) if it is on a path to an invalid block, or (iii) if it ends in a control transfer
instruction that jumps into the middle of another instruction.
As mentioned previously, we analyze connected components with at least
k nodes (i.e., k-subgraphs) to identify common subgraphs. Because random
instruction sequences usually produce subgraphs that have less than k nodes,
the vast majority of non-code regions are automatically excluded from further
analysis. Thus, we do not require an explicit and a priori division of the network
214
C. Kruegel et al.
Non-code
Code
Byte stream
Missed instruction
Actual instructions
Disassembler output
Synchronization point
Fig. 2. Linear disassembler misses the start of the ﬁrst valid instruction
stream into diﬀerent regions nor an oracle that can determine if a stream contains
a worm or not, as is required by the approach described in [15]. In Section 7, we
provide experimental data that supports the observation that code and non-code
regions can be diﬀerentiated based on the shape of the control ﬂows.
Another problem that arises when disassembling a network stream is that
there are many diﬀerent processor types that use completely diﬀerent formats
to encode instructions. In our current system, we focus on executable code for
Intel x86 only. This is motivated by the fact that the vast majority of vulner-
able machines on the Internet (which are the potential targets for a worm) are
equipped with Intel x86 compatible processors.
As we perform linear disassembly from the start (i.e., the ﬁrst byte) of a
stream, it is possible that the start of the ﬁrst valid instruction in that stream is
“missed”. As we mentioned before, it is probable that non-code regions can be
disassembled. If the last invalid instruction in the non-code region overlaps with
the ﬁrst valid instruction, the sequence of actual, valid instructions in the stream
and the output of the disassembler will be diﬀerent (i.e., de-synchronized). An
example of a missed ﬁrst instruction is presented in Figure 2. In this example,
an invalid instruction with a length of three bytes starts one byte before the ﬁrst
valid instruction, which is missed by two bytes.
We cannot expect that network ﬂows contain code that corresponds to a valid
executable (e.g., in the ELF or Windows PE format), and, in general, it is not
possible, to identify the ﬁrst valid instruction in a stream. Fortunately, two Intel
x86 instruction sequences that start at slightly diﬀerent addresses (i.e., shifted
by a few bytes) synchronize quickly, usually after a few (between one and three)
instructions. This phenomenon, called self-synchronizing disassembly, is caused
by the fact that Intel x86 instructions have a variable length and are usually
very short. Therefore, when the linear disassembler starts at an address that
does not correspond to a valid instruction, it can be expected to re-synchronize
with the sequence of valid instructions very quickly [10]. In the example shown
in Figure 2, the synchronization occurs after the ﬁrst missed instruction (shown
in gray). After the synchronization point, both the disassembler output and the
actual instruction stream are identical.
Another problem that may aﬀect the disassembly of a network stream is that
the stream could contain a malicious binary that is obfuscated with the aim of
confusing a linear disassembler [10]. In this case, we would have to replace our
Polymorphic Worm Detection Using Structural Information of Executables
215
linear disassembler component with one that can handle obfuscated binaries (for
example, the disassembler that we describe in [9]).
5 K-Subgraphs and Graph Coloring
Given a control ﬂow graph extracted from a network stream, the next task is
to generate connected subgraphs of this CFG that have exactly k nodes (k-
subgraphs).
The generation of k-subgraphs from the CFG is one of the main contributors
to the run-time cost of the analysis. Thus, we are interested in a very eﬃcient
algorithm even if this implies that not all subgraphs are constructed. A similar
decision was made by the authors in [19], who decided to calculate ﬁngerprints
only for a certain subset of all strings. The rationale behind their decision is
similar to ours. We assume that the number of subgraphs (or substrings, in their
case) that are shared by two worm samples is suﬃciently large that at least
one is generated by the analysis. The validity of this thesis is conﬁrmed by our
experimental detection results, which are presented in Section 7.
To produce k-subgraphs, our subgraph generation algorithm is invoked for
each basic block, one after another. The algorithm starts from the selected basic
block A and performs a depth-ﬁrst traversal of the graph. Using this depth-ﬁrst
traversal, a spanning tree is generated. That is, we remove edges from the graph
so that there is at most one path from the node A to all the other blocks in
the CFG. In practice, the depth-ﬁrst traversal can be terminated after a depth
of k because the size of the subgraph is limited to k nodes. A spanning tree
is needed because multiple paths between two nodes lead to the generation of
many redundant k-subgraphs in which the same set of nodes is connected via
diﬀerent edges. While it would be possible to detect and remove duplicates later,
the overhead to create and test these graphs is very high.
Once the spanning tree is built, we generate all possible k-node subtrees with
the selected basic block A as the root node. Note that all identiﬁed subgraphs
A
E
B
D
C
B
D
A
E
C
Control flow graph
Spanning tree
A
E
B
D
C
B
D
A
E
C
B
D
A
E
C
4-node subtrees
Fig. 3. Example for the operation of the subgraph generation process
216
C. Kruegel et al.
are used in their entirety, also including non-spanning-tree links. Consider the
graph shown in Figure 3. In this example, k is 4 and node A is the root node. In
the ﬁrst step, the spanning tree is generated. Then, the subtrees {A, B, D, E},
{A, B, C, D}, and {A, B, C, E} are identiﬁed. The removal of the edge from
C to E causes the omission of the redundant subgraph {A, B, C, E}.
5.1 Graph Fingerprinting
In order to quickly determine which k-subgraphs appear in network streams, it
is useful to be able to map each subgraph to a number (a ﬁngerprint) so that two
ﬁngerprints are equal only if the corresponding subgraphs are isomorphic. This
problem is known as canonical graph labeling [1]. The solution to this problem
requires that a graph is ﬁrst transformed into its canonical representation. Then,
the graph is associated with a number that uniquely identiﬁes the graph. Since
isomorphic graphs are transformed into an identical canonical representation,
they will also be assigned the same number.
The problem of ﬁnding the canonical form of a graph is as diﬃcult as the
graph isomorphism problem. There is no known polynomial algorithm for graph
isomorphism testing; nevertheless, the problem has also not been shown to be
NP-complete [20]. For many practical cases, however, the graph isomorphism test
can be performed eﬃciently and there exist polynomial solutions. In particular,
this is true for small graphs such as the ones that we have to process. We use
the Nauty library [12, 13], which is generally considered to provide the fastest
isomorphism testing routines, to generate the canonical representation of our
k-subgraphs. Nauty can handle vertex-colored directed graphs and is well suited
to our needs.
When the graph is in its canonical form, we use its adjacency matrix to assign
a unique number to it. The adjacency matrix of a graph is a matrix with rows
and columns labeled by graph vertices, with a 1 or 0 in position (vi, vj) according
to whether there is an edge from vi to vj or not. As our subgraphs contain a
ﬁxed number of vertices k, the size of the adjacency matrix is ﬁxed as well
(consisting of k2 bits). To derive a ﬁngerprint from the adjacency matrix, we
simply concatenate its rows and read the result as a single k2-bit value. This
value is unique for each distinct graph since each bit of the ﬁngerprint represents
exactly one possible edge. Consider the example in Figure 4 that shows a graph
B
A
D
C
A    B    C    D
A        0    1    1    0
B        0    0    0    1
C        0    0    0    1
D        1    0    0    0
0110 0001 0001 1000
4-node subgraph
Adjacency matrix
42-bit fingerprint
Fig. 4. Deriving a ﬁngerprint from a subgraph with 4 nodes
Polymorphic Worm Detection Using Structural Information of Executables
217
and its adjacency matrix. By concatenating the rows of the matrix, a single
16-bit ﬁngerprint can be derived.
5.2 Graph Coloring
One limitation of a technique that only uses structural information to iden-
tify similarities between executables is that the machine instructions that are
contained in basic blocks are completely ignored. The idea of graph coloring
addresses this shortcoming.
We devised a graph coloring technique that uses the instructions in a basic
block to select a color for the corresponding node in the control ﬂow graph. When
using colored nodes, the notion of common substructures has to be extended to
take into account color. That is, two subgraphs are considered isomorphic only
if the vertices in both graphs are connected in the same way and have the same
color. Including colors into the ﬁngerprinting process requires that the canonical
labeling procedure accounts for nodes of diﬀerent colors. Fortunately, the Nauty
routines directly provide the necessary functionality for this task. In addition,
the calculation of ﬁngerprints must be extended to account for colors. This is
done by ﬁrst appending the (numerical representation of the) color of a node to
its corresponding row in the adjacency matrix. Then, as before, all matrix rows
are concatenated to obtain the ﬁngerprint. No further modiﬁcations are required
to support colored graphs.
It is important that colors provide only a rough indication of the instruc-
tions in a basic block; they must not be too ﬁne-grained. Otherwise, an attacker
can easily evade detection by producing structurally similar executables with
instructions that result in diﬀerent colorings. For example, if the color of a basic
block changes when an add instruction is replaced by a semantically equivalent
sub (subtraction) instruction, the system could be evaded by worms that use
simple instruction substitution.
In our current system, we use 14-bit color values. Each bit corresponds to a
certain class of instructions. When one or more instructions of a certain class
appear in a basic block, the corresponding bit of the basic block’s color value is
set to 1. If no instruction of a certain class is present, the corresponding bit is 0.
Table 1 lists the 14 color classes that are used in our system. Note that it is
no longer possible to substitute an add with a sub instruction, as both are part
of the data transfer instruction class. However, in some cases, it might be pos-
sible to replace one instruction by an instruction in another class. For example,
the value of register %eax can be set to 0 both by a mov 0, %eax instruction
(which is in the data transfer class) or by a xor %eax, %eax instruction (which
is a logic instruction). While instruction substitution attacks cannot be com-
pletely prevented when using color classes, they are made much more diﬃcult
for an attacker. The reason is that there are less possibilities for ﬁnding seman-
tically equivalent instructions from diﬀerent classes. Furthermore, the possible
variations in color that can be generated with instructions from diﬀerent classes
is much less than the possible variations on the instruction level. In certain cases,
218
C. Kruegel et al.
Table 1. Color classes
Description
Class
Data Transfer mov instructions
Arithmetic
Logic
Test
Stack
Branch
Call
Class
String
incl. shift and rotate
Flags
incl. bit/byte operations LEA
Float
test and compare
Syscall
push and pop
conditional control ﬂow
Jump
Halt
function invocation
Description
x86 string operations
access of x86 ﬂag register
load eﬀective address
ﬂoating point operations
interrupt and system call
unconditional control ﬂow
stop instruction execution
it is even impossible to replace an instruction with a semantically equivalent one
(e.g., when invoking a software interrupt).
6 Worm Detection
Our algorithm to detect worms is very similar to the Earlybird approach pre-
sented in [19]. In the Earlybird system, the content of each network ﬂow is
processed, and all substrings of a certain length are extracted. Each substring
is used as an index into a table, called prevalence table, that keeps track of how
often that particular string has been seen in the past. In addition, for each string
entry in the prevalence table, a list of unique source-destination IP address pairs
is maintained. This list is searched and updated whenever a new substring is
entered. The basic idea is that sorting this table with respect to the substring
count and the size of the address lists will produce the set of likely worm traﬃc
samples. That is, frequently occurring substrings that appear in network traﬃc
between many hosts are an indication of worm-related activity. Moreover, these
substrings can be used directly as worm signatures.
The key diﬀerence between our system and previous work is the mechanism
used to index the prevalence table [17]. While Earlybird uses simple substrings,
we use the ﬁngerprints that are extracted from control ﬂow graphs. That is, we
identify worms by checking for frequently occurring executable regions that have
the same structure (i.e., the same ﬁngerprint).
This is accomplished by maintaining a set of network streams Si for each given
ﬁngerprint fi. Every set Si contains the distinct source-destination IP address
pairs for streams that contained fi. A ﬁngerprint is identiﬁed as corresponding
to worm code when the following conditions on Si are satisﬁed:
1. m, the number of distinct source-destination pairs contained in Si, meets or
exceeds a predeﬁned threshold M.
2. The number of distinct internal hosts appearing in Si is at least 2.
3. The number of distinct external hosts appearing in Si is at least 2.
The last two conditions are required to prevent false positives that would
otherwise occur when several clients inside the network download a certain exe-
cutable ﬁle from an external server, or when external clients download a binary
Polymorphic Worm Detection Using Structural Information of Executables
219
from an internal server. In both cases, the traﬃc patterns are diﬀerent from