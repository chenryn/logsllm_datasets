rm -f /lib/systemd/system/multi-user.target.wants/*;\
17
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \ 18
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
244 附录A 常见镜像
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;
VOLUME [ "/sys/fs/cgroup" ]
CMD ["/usr/sbin/init"]
该Dockerfile将fakesystemd删除，安装systemd服务，并删除一些可能引发冲突的文件。接着，
可以使用该Dockerfile构建镜像：
docker build --rm -t local/c7-systemd .
下面我们在此基础上集成一个httpd服务，具体的Dockerfile为：
FROM local/c7-systemd
RUN yum -y install httpd; yum clean all; systemctl enable httpd.service
EXPOSE 80
CMD ["/usr/sbin/init"]
然后构建镜像并启动容器：
docker build --rm -t local/c7-systemd-httpd
docker run --privileged -ti -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 80:80 local/c7-systemd-httpd
至此，我们就可以通过浏览器访问本地的80端口，并且可以使用httpd提供的服务。
A.2 数据库镜像
数据库是信息系统及互联网程序必不可少的服务，用于存储软件使用或者产生的数据。目前，
流行的数据库主要分为关系型数据库和非关系型数据库，前者以MySQL为代表，后者则有Redis、
MongoDB和PostgreSQL等。
A.2.1 MySQL
MySQL是一款非常流行的开源关系型数据库，具有体积小、速度快、开源等优点。关系型
数据库将数据保存在不同的表中，通过关系表将现实世界的关系进行建模。MySQL所使用的SQL
语言是访问数据库的最常用的标准化语言。
运行如下命令，即可启动官方的mysql容器：
$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=mysecretpassword -d mysql
如果其他应用需要使用它，则可以通过如下命令连接到some-mysql容器：
$ docker run --name some-app --link some-mysql:mysql -d application-that-uses-mysql
在mysql容器中，有几个环境变量需要注意，具体如下所示。
 MYSQL_ROOT_PASSWORD：这是一个必须设置的环境变量，它设置的是MySQL的root用户的密
码，上述例子中其值为mysecretpassword。
附录A 常见镜像 245
 MYSQL_USER和MYSQL_PASSWORD：这两个变量是可选变量，用于创建一个MySQL用户及其密 1
码。需要注意的是，这两个变量必须同时设置，缺任何一个，另一个都将无效。使用这
两个变量创建的用户将拥有MYSQL_DATABASE变量指定的数据库的所有权限。root用户无需
2
通过该变量设置。
 MYSQL_DATABASE：可选变量，用于指定创建数据库的名字。如果MYSQL_USER和MYSQL_PASSWORD
3
被设置，则该用户拥有该数据库的所有权限。
除了直接使用官方的镜像外，还可以通过Dockerfile来创建。Dockerfile的内容为： 4
FROM debian:wheezy
# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever 5
dependencies get added
RUN groupadd -r mysql && useradd -r -g mysql mysql
# FATAL ERROR: please install the following Perl modules before executing 6
/usr/local/mysql/scripts/mysql_install_db:
# File::Basename
# File::Copy 7
# Sys::Hostname
# Data::Dumper
RUN apt-get update && apt-get install -y perl --no-install-recommends && rm -rf /var/lib/apt/lists/* 9
# gpg: key 5072E1F5: public key "MySQL Release Engineering " imported
RUN apt-key adv --keyserver pool.sks-keyservers.net --recv-keys
A4A9406876FCBD3C456770C88C718D3B5072E1F5 8
ENV MYSQL_MAJOR 5.7
ENV MYSQL_VERSION 5.7.5-m15
RUN echo "deb http://repo.mysql.com/apt/debian/ wheezy mysql-${MYSQL_MAJOR}-dmr" >
10
/etc/apt/sources.list.d/mysql.list
# the "/var/lib/mysql" stuff here is because the mysql-server postinst doesn't have an explicit way
to disable the mysql_install_db codepath besides having a database already "configured" (ie, stuff in
10
/var/lib/mysql/mysql)
# also, we set debconf keys to make APT a little quieter
RUN { \
11
echo mysql-community-server mysql-community-server/data-dir select ''; \
echo mysql-community-server mysql-community-server/root-pass password ''; \
echo mysql-community-server mysql-community-server/re-root-pass password ''; \
13
echo mysql-community-server mysql-community-server/remove-test-db select false; \
} | debconf-set-selections \
&& apt-get update && apt-get install -y mysql-server="${MYSQL_VERSION}"* && rm -rf /var/lib/apt/lists/* \
&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql 14
# comment out a few problematic configuration values
RUN sed -Ei 's/^(bind-address|log)/#&/' /etc/mysql/my.cnf
VOLUME /var/lib/mysql 15
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 3306 16
CMD ["mysqld"]
保存好之后，使用docker build命令来创建镜像：
17
$ sudo docker build –t mysql:latest
18
至此，mysql镜像构建完毕。
246 附录A 常见镜像
A.2.2 Redis
Redis（全称是REmote DIctionary Server，远程字典服务器），是一款开源的使用ANSI C语言
编写、支持网络、可基于内存亦可持久化的日志型的键值数据库。为了提高存储效率，Redis将
数据存储在内存中，然后周期性地将数据更新到磁盘上，并在此基础上实现主从同步。
启动Redis容器：
$ docker run --name some-redis -d redis
镜像默认是对外暴露6379端口。也可以启动持久化存储：
$ docker run --name some-redis -d redis redis-server --appendonly yes
数据将会被放到VOLUME /data下，可以使用--volume-from连接数据容器或者使用-v、
docker/host/dir:/data进行映射。
其他容器可以通过如下命令连接到some-redis容器：
$ docker run --name some-app --link some-redis:redis -d application-that-uses-redis
或者是：
$ docker run -it --link some-redis:redis --rm redis sh -c 'exec redis-cli -h "$REDIS_PORT_6379_TCP_ADDR"
-p "$REDIS_PORT_6379_TCP_PORT"'
如果你想用自己的redis.conf配置文件，则可以通过如下命令：
docker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis
/usr/local/etc/redis/redis.conf
其中/myredis/conf/redis.conf是本地机器上的配置，它需要映射到容器内部。
当然，除了这种方法外，还可以使用Dockerfile构建一个新的Redis容器，其中Dockerfile的内
容为：
FROM redis
COPY redis.conf /usr/local/etc/redis/redis.conf
CMD [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
通过Dockerfile也可以构建和官方一样的Redis镜像。这里以2.8版本为例，其Dockerfile为：
FROM debian:wheezy
# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever
dependencies get added
RUN groupadd -r redis && useradd -r -g redis redis
RUN apt-get update \
&& apt-get install -y curl \
&& rm -rf /var/lib/apt/lists/*
# grab gosu for easy step-down from root
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
附录A 常见镜像 247
RUN curl -o /usr/local/bin/gosu -SL
1
"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture)" \
&& curl -o /usr/local/bin/gosu.asc -SL
"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture).asc" \
2
&& gpg --verify /usr/local/bin/gosu.asc \
&& rm /usr/local/bin/gosu.asc \
&& chmod +x /usr/local/bin/gosu
3
ENV REDIS_VERSION 2.8.19
ENV REDIS_DOWNLOAD_URL http://download.redis.io/releases/redis-2.8.19.tar.gz
ENV REDIS_DOWNLOAD_SHA1 3e362f4770ac2fdbdce58a5aa951c1967e0facc8
4
# for redis-sentinel see: http://redis.io/topics/sentinel
RUN buildDeps='gcc libc6-dev make'; \
set -x \
5
&& apt-get update && apt-get install -y $buildDeps --no-install-recommends \
&& rm -rf /var/lib/apt/lists/* \
&& mkdir -p /usr/src/redis \
6
&& curl -sSL "$REDIS_DOWNLOAD_URL" -o redis.tar.gz \
&& echo "$REDIS_DOWNLOAD_SHA1 *redis.tar.gz" | sha1sum -c - \
&& tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
7
&& rm redis.tar.gz \
&& make -C /usr/src/redis \
&& make -C /usr/src/redis install \
9
&& rm -r /usr/src/redis \
&& apt-get purge -y --auto-remove $buildDeps
RUN mkdir /data && chown redis:redis /data
8
VOLUME /data
WORKDIR /data
COPY docker-entrypoint.sh /entrypoint.sh
10
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 6379
CMD [ "redis-server" ]
10
A.2.3 MongoDB
11
MongoDB是目前非常流行的非关系型数据库（NoSQL），它的每一条记录都是一个Document
对象，非常适合大数据量、高并发、弱事务的互联网应用。特别是随着Web 2.0网站的兴起， 13
MongoDB不仅可以满足移动互联网的数据存储需求，其开箱即用的特性也大大降低了中小型网
站的运维成本，受到开发者的一致热捧。 14
要使用MongoDB，可以使用以下命令在后台启动：
15
$ docker run -d -p 27017:27017 --name mongodb dockerfile/mongodb
或者将其数据持久化到本地： 16
$ docker run -d -p 27017:27017 -v :/data/db --name mongodb dockerfile/mongodb
17
使用Dockerfile构建MongoDB镜像，其中Dockerfile的内容为：
FROM debian:wheezy 18
# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever
248 附录A 常见镜像
dependencies get added
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb
RUN apt-get update \
&& apt-get install -y curl numactl \
&& rm -rf /var/lib/apt/lists/*
# grab gosu for easy step-down from root
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg
--print-architecture)" \
&& curl -o /usr/local/bin/gosu.asc -SL
"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture).asc" \
&& gpg --verify /usr/local/bin/gosu.asc \
&& rm /usr/local/bin/gosu.asc \
&& chmod +x /usr/local/bin/gosu
ENV MONGO_RELEASE_FINGERPRINT BDC0DB28022D7DEA1490DC3E7085801C857FD301
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys $MONGO_RELEASE_FINGERPRINT
ENV MONGO_VERSION 3.0.0-rc6
RUN curl -SL "https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-$MONGO_VERSION.tgz" -o mongo.tgz \
&& curl -SL "https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-$MONGO_VERSION.tgz.sig" –o
mongo.tgz.sig \
&& gpg --verify mongo.tgz.sig \
&& tar -xvf mongo.tgz -C /usr/local --strip-components=1 \
&& rm mongo.tgz*
VOLUME /data/db
COPY docker-entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
EXPOSE 27017
CMD ["mongod"]
A.2.4 PostgreSQL
PostgreSQL，也常简称为Postgres，是一种对象-关系型数据库系统（ORDBMS）。它不仅支
持关系型数据库的各种功能，而且具备类、继承等对象数据库的特征，是目前功能最全、特性最
丰富的结构复杂的开源数据库系统，其本身的发展历程也见证了数据库理论和技术的发展历程。
PostgreSQL之初是作为教学数据库推出的，有很多先进的功能，但易用性不如MySQL。不过随着
8.x版本的推出，PostgreSQL越来越受到重视。
通过下面的命令可以启动一个postgre容器：
$ sudo docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
该容器默认对外开放5432端口。环境变量POSTGRES_PASSWORD用于为数据库的超级用户
postgres设置密码。其他应用可以通过如下方式连接到该容器：
$ sudo docker run --name some-app --link some-postgres:postgres -d application-that-uses-postgres
或者是：
$ sudo docker run -it --link some-postgres:postgres --rm postgres sh -c 'exec psql -h
"$POSTGRES_PORT_5432_TCP_ADDR" -p "$POSTGRES_PORT_5432_TCP_PORT" -U postgres'
附录A 常见镜像 249
下面是构建9.4版本的postgresql镜像的Dockerfile：
1
# vim:set ft=dockerfile:
FROM debian:wheezy 2
# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever
dependencies get added
RUN groupadd -r postgres && useradd -r -g postgres postgres 3
# grab gosu for easy step-down from root
RUN gpg --keyserver pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/* \ 4
&& curl -o /usr/local/bin/gosu –SL
"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture)" \
&& curl -o /usr/local/bin/gosu.asc -SL 5
"https://github.com/tianon/gosu/releases/download/1.2/gosu-$(dpkg --print-architecture).asc" \
&& gpg --verify /usr/local/bin/gosu.asc \
&& rm /usr/local/bin/gosu.asc \
6
&& chmod +x /usr/local/bin/gosu \
&& apt-get purge -y --auto-remove curl
# make the "en_US.UTF-8" locale so postgres will be utf-8 enabled by default
7