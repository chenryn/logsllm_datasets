企业往往是琐事滋生的温床。传统上，运维管理的理念要么过于盲目（“大家都很忙，效率很高！”），要么显得漠不关心（“你为何抱怨这些头疼的问题？我付工资就是让你动脑筋解决问题的。”）。此外，企业的组织结构复杂性往往导致琐事频发，并且妨碍了简化这种复杂性的努力。

在本讨论中，“企业”指的是那些历史悠久、成功积累大量遗产（包括文化、组织结构、流程和技术）的公司。这类企业从商业角度来看，通常拥有多个业务线，每条业务线都在不同的时代诞生或被收购，具有独特的背景和基本假设。从技术角度看，企业内部会发现多代平台和工具共存，有的是全新的，有的是老旧的，还有的正处于开发阶段；所有这些都需要相互连接，以确保为客户提供服务。

需要记住的是，在企业环境中，没有任何事情是孤立存在的。你的工作依赖于他人，他人的工作也依赖于你。在经典架构中，这些依赖关系明确而固定；而在现代架构中，尽管这些依赖关系可能更加动态且抽象，但它们依然存在。在人的层面上，激励机制、预算分配、政策制定、信仰体系以及文化规范等都交织在一起，贯穿整个企业的各个层面。

这种高度互联的状态使得减少企业中的琐事变得更具挑战性。通过简单的工程手段可以消除团队自己制造的一些琐碎问题，但如果这些问题源于组织其他部分的状况或系统，则解决起来就变得异常困难。除非团队能够跨越组织边界找到解决方案，否则很难控制由外部因素引起的琐事，这正是有经验的企业管理者所熟知的一个难题。

特别是当某些琐事完全或部分受制于团队自身时，情况尤为棘手。这种情况可能会将团队推向破产边缘，让琐事挤占掉所有的工程工作时间。这也是为什么许多系统管理员（SysAdmin）团队虽然改名为站点可靠性工程师（SRE）团队，却未能真正实现转型的原因之一——缺乏必要的工程化措施来支撑这一名称上的转变。

### 孤岛、队列与工单

一旦确定过度的琐事阻碍了企业向SRE模式转型，那么逻辑上就需要跨组织边界协作来有效应对琐事问题。然而，跨部门合作恰恰是企业IT领域面临的重大挑战之一。孤岛效应、请求队列及工单系统（后者通常是IT运营中最受重视的组成部分）的存在，进一步加剧了这一难题。

#### 孤岛现象

"孤岛"一词最初由Phil S. Ensor于1988年提出，用来描述Goodyear轮胎公司面临的一系列组织挑战。自此之后，精益生产和DevOps运动中频繁提及孤岛概念。值得注意的是，孤岛并不直接等同于特定的团队结构，而是指团队成员与其他群体脱节的工作方式。具体表现为：团队在一个独立于其他团队的环境中运作，处理不同类型的任务，遵循不同的激励机制或优先级安排（通常属于不同的管理层级）。几乎可以肯定地说，这样的团队正在孤岛中工作，并且会遇到诸如瓶颈、沟通障碍、工具不兼容等问题。

对于曾在大型企业工作过的人来说，这种场景应该相当熟悉。它是传统运维模式下特有的现象，在这种模式下，众多专业化的职能团队使用工单系统并通过项目管理来协调任务执行。

运维团队无法避免也不应容忍孤岛带来的负面影响。它通常是基于职能专业化进行人员划分的传统管理模式自然而然产生的结果，该模式鼓励员工关注内部优化而非跨部门协作。

#### 工单驱动的请求队列成本高昂

长期以来，为了应对因孤岛引起的问题，人们引入了请求队列作为管理跨部门交接的一种手段。表面上看，这种方法似乎能有序高效地处理跨组织边界的工作流。但实际上，深入分析后会发现，请求队列成为了企业资源浪费的主要源头之一。著名作家兼产品开发专家Donald G. Reinertsen列举了队列带来的诸多负面影响：

- **延长周期**：队列增加了完成任务所需的时间。
- **增加风险**：长时间等待使得原始需求发生变化的可能性增大。
- **提高变异性**：排队人数越多，等待时间越长，不确定性也随之增加。
- **额外开销**：维护队列需要额外的人力物力投入。
- **降低质量**：延迟反馈降低了最终产品的质量。
- **削弱动力**：长时间等待消磨了员工的积极性。

综上所述，尽管工单系统看似有助于管理复杂的跨部门交互，但实际上却带来了显著的成本负担。因此，在设计更高效的组织结构时，必须认真考虑如何克服这些挑战。