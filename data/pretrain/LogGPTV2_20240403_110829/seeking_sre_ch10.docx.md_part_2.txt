 企业是琐事的沃土。首先，当谈到琐事的概念时，传统的运维管理理念要么是盲目的（"每个人都看起来很忙。效率极高！"）或无动于衷（"你为什么抱怨这些头痛？我发工资就是要让你动脑子。"）其次，企业中组织的复杂性很高，这会产生琐事，并妨碍了减少这种复杂性的努力。
在本讨论中，让我们将"企业"定义为任何具有积累大量遗产（文化、组织、流程和技术）动机的历史成功的公司。
企业有一个明显的"外观"。从业务角度来看，将发现多个业务线，每个业务线都是在不同时代诞生的或获得的，具有独特的上下文和基本假设。从技术角度来看，你会发现多代平台和工具（有些是全新的、旧的和不断开发的、有些是孤立的）都需要连接在一起，为客户提供服务。
最好记住，企业中没有任何东西是孤立的。你所从事的工作取决于别人。别人在干什么取决于你。在经典体系结构中，这些依赖项是固定和明显的。在现代体系结构中，这些依赖关系通常是动态的和抽象的，但仍然存在。在人类层面，激励、预算、政策、信仰和文化规范都交织在企业的各个层面。
这种相互联系性使得消除企业中的琐事更具挑战性。通过简单的工程工作，可以消除团队自己制作的辛劳。但是，由于组织其他部门存在的条件或系统，所有琐事都带来了什么？除非团队能够跨组织边界实现解决方案，否则消除它属于团队无法控制的问题，任何具有企业经验的人都知道这一点并非易事。
部分或完全由团队控制的琐事尤其危险。它推动团队更接近破产门槛，在破产门槛上，琐事挤掉了所有工程工作。这是反模式的一个常见原因，SysAdmin
团队被重新命名为 SRE 团队，但缺少工程化来阻止新名称以外的转换。
# 孤岛、队列和工单
 在你确定过度的琐事会阻止企业转向 SRE
模型之后，从逻辑上讲，必须跨越组织边界来工作才能有效地控制琐事。但是，跨组织边界工作是企业
IT 中面临的巨大挑战之一。
跨组织边界工作很困难，因为孤岛效应、请求队列和工单系统（大概是 IT
运维中最受重视的系统）的存在。
## 路上的孤岛
    孤岛的比喻最初归因于 Phil S. Ensor，他在 1988
年开始使用孤岛这个词Ensor, Philip. S. (1988
Spring）。功能孤岛综合征。*Target*。Association for Manufacturing
Excellence描述他的雇主 Goodyear
轮胎面临的组织挑战。从那时起，精益制造运动和 DevOps
运动就讨论了孤岛的概念。有些人错误地认为"孤岛即团队"，但实际上，孤岛与组织结构没有多大关系。孤岛的想法实际上与团队在组织内的工作方式有关。
简单地说，当一个团体的成员以与其他团体（无论他们是否知道）脱节的方式工作时，一个群体被称为"在孤岛中工作"，如[#silos_describe_a\_way_of_disconnected_work](#silos_describe_a_way_of_disconnected_work)所示。发现孤岛时，查找团队在与其他组不同的环境中工作的情况，他们的工作来源与其他组不同（即不同的工作负荷），并且团队在不同的激励或优先级下工作（通常是不同管理链的一部分）。几乎可以肯定的是，该组在孤岛中工作，并遇到任意数量的症状：瓶颈、交接缓慢、沟通错误、工具不匹配、交付错误、过度的重复工作和冲突（通常是彼此排挤的类型）。
![孤岛描述了一种断开连接的工作方式，而不是特定的组织结构。](media/rId28.png){width="4.816053149606299in"
height="4.692307524059492in"}
孤岛描述了一种断开连接的工作方式，而不是特定的组织结构
如果曾在企业中工作过，你可能已认识到这种情况。有些人甚至会懊悔地将其描述为"事情总是这样运作"。它是经典运维模式的特有现象，在这种模式中，拥有大量由职能专业知识划分的专业团队，使用工单系统，并严重依赖项目管理来协调工作并推动其通过组织。
运维团队无法着手在孤岛中工作，也无法忍受孤岛的后果。它通常是传统管理理念的自然副产品，其基础是人的冲动，即根据职能专业化对人员进行排队，按照人际关系分组，然后激励他们向内看，优化。
有问题的移交（速度太慢、不正确、大量重工等）是最常引用的问题，可归因于孤岛效应。这是有道理的，因为只有当你需要来自孤岛外部的人的帮助（或孤岛外部的某个人需要获得你的帮助）时，孤岛才会成为问题。
记住，在企业中，没有什么是孤立的。做任何有意义的事情通常意味着信息和工作必须跨越一个或多个组织边界。
 当工作必须经过孤立的组之间时，会出了什么问题？它通常与不匹配有关（参见[#handoffs_between_silos_are_problematic_du](#handoffs_between_silos_are_problematic_du)）：
信息不匹配
:   移交双方当事人正在处理不同的信息，或者从不同的角度处理信息，导致错误和重复工作（即由于以前的错误而重复工作）。
流程不匹配
:   移交双方当事人都遵循不同的程序或流程，这些过程名义上是相同的，但采取不同的做法，并产生对方没有预料到的结果。在不同孤岛中发生的流程各部分之间的时序和节奏不匹配也会导致错误和重工的增加。
工具不匹配
:   当孤岛边界两侧的不同方使用不同工具或未设置为无缝连接的工具时，错误和重复工作会有所增加。当工作需要由一个人手动将信息和工件从一个工具移动到另一个工具时，延迟、方差和错误必然引入流程。
容量不匹配
:   当来自孤岛边界一侧的请求量或速率超过发送请求的容量时，就会出现瓶颈和延迟。请求级别通常超过或低于预期，这会产生连锁反应，中断组织其他部门的规划和工作流程。    
![由于不匹配，孤岛之间的交接存在问题。](media/rId29.png){width="4.816053149606299in"
height="3.1505008748906387in"}
由于不匹配，孤岛之间的交接存在问题
## 工单驱动的请求队列成本高昂
数十年来，处理由孤岛引起的移交问题的对策是插入请求队列来管理交接（常常是通过工单系统）。从表面上看，请求队列似乎是一种有序而高效的方法来管理跨越组织机构的工作。但是，如果深入查看，你会发现请求队列是任何企业经济浪费的主要来源。让我们看一下以下列表，由著名作家和产品开发专家 Donald
G. Reinertsen
创建，其中列出了队列的负面影响（另见[#queues_have_been_proved_to_be_economicall）：](#queues_have_been_proved_to_be_economicall)Reinertsen,
Donald G.（2009.*产品开发流程原则：第二代精益产品开发*。Redondo Beach,
CA: Celeritas Publishing.
更长的循环时间
:   队列会增加周期时间，因为到达大队列前面的时间比小队列长。即使是很小的延迟也会在复杂的相互依赖的系统中（如企业
    IT 组织）中呈指数级复合。
风险增加
:   队列会增加请求和服务之间的时间，这反过来又会增加原始请求上下文更改（争用条件）的可能性。如果确实出现问题，请求者现在处于与发出请求时不同的问题状态（通常正在处理其他问题）。
更具可变性
:   排队时间越长，等待的用户越多，可变性也就越大。这会导致较长的等待时间和更高的错误可能性。
更多开销
:   队列添加管理开销，用于管理队列、报告状态和处理异常。排队时间越长，这些开销成本以复合方式增长的就越多。
质量较低
:   因为延迟对流程上游人员的反馈，队列质量降低。反馈延迟会导致修复问题的成本高得多（例如，错误在更快发现时更容易修复），并且通常意味着在第一个负面反馈到来之前产生了类似来源的其他问题。
动力减少
:   排队会破坏动机和主动性，从而产生负面的心理影响。这是因为队列（尤其是较长的队列）消除了请求者工作结果的紧迫感和即时性。如果你没有感觉到影响，看不到结果，这是人类的天性，与工作消极地分离。
![事实证明，队列在经济上是昂贵的。](media/rId31.png){width="4.816053149606299in"
height="2.8795986439195103in"}
事实证明，队列在经济上是昂贵的
看看队列影响背后的科学，很难证明在组织中引入队列是合理的。心甘情愿地为组织注入更长的周期时间、较慢的反馈、更多的风险、更多的可变性、更多的开销、更低的质量和降低积极性是没有意义的。