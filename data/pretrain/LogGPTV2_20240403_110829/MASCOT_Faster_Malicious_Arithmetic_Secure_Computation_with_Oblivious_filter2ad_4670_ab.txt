our protocol still performs much faster.
2 Preliminaries
In this section, we describe the security model, introduce some important notation, deﬁne the
oblivious transfer primitive, and give a basic overview of the SPDZ protocol.
6
Security model. We prove our security statements in the universal composition (UC) framework
of Canetti [11], and assume familiarity with this. Our protocols work with n parties from the set
P = {P1, . . . , Pn}, and we consider security against malicious, static adversaries, i.e. corruption
may only take place before the protocols start, corrupting up to n − 1 parties. When we say
that a protocol Π securely implements a functionality F with statistical (resp. computational)
security parameter κ (resp. λ), our theorems guarantee that the advantage of any environment in
distinguishing the real and ideal executions is in O(2−κ) (resp. O(2−λ)). Here, κ and λ denote the
statistical and computational security parameters, respectively.
Notation. The protocols we present in this paper work in both Fp, for prime p = 2k + µ, and F
2k;
we introduce some notation to unify the two ﬁnite ﬁelds. First note that if k ≥ κ, for statistical
security parameter κ, and µ ∈ poly(k) then with overwhelming probability a random element of
Fp can be represented with k bits in {0, 1}, and likewise for any element of F
2k. Let F denote the
2k ∼= F2[X]/f(X) for some monic, irreducible
ﬁnite ﬁeld, which will be either Fp or F
polynomial f(X) of degree k. We use lower case letters to denote ﬁnite ﬁeld elements and bold
lower case letters for vectors in F, for any ﬁnite ﬁeld F. If x, y are vectors over F, then x∗y denotes
the component-wise products of the vectors. We denote by a $← A the uniform sampling of a from
a set A, and by [d] the set of integers {1, . . . , d}.
2k, and write F
Following notation often used in lattice-based cryptography, deﬁne the ‘gadget’ vector g con-
sisting of the powers of two (in Fp) or powers of X (in F
2k), so that
g = (1, g, g2, . . . , gk−1) ∈ Fk,
2k. Let g−1 : F → {0, 1}k be the ‘bit decomposition’ function
where g = 2 in Fp and g = X in F
that maps x ∈ F to a bit vector xB = g−1(x) ∈ {0, 1}k, such that xB can be mapped back to F by
taking the inner product (cid:104)g, g−1(x)(cid:105) = x. These basic tools allow us to easily switch between ﬁeld
elements and vectors of bits whilst remaining independent of the underlying ﬁnite ﬁeld.
Oblivious Transfer. Oblivious transfer (OT) is a protocol between a sender and a receiver,
where the sender transmits one of several messages to the receiver, whilst remaining oblivious to
which message was sent. All known constructions of OT require public-key cryptography, but in
1996, Beaver [5] introduced the concept of OT extensions, where cheap, symmetric primitives (often
available in consumer hardware) are used to produce many OTs from only a few. Ishai et al. [25]
later optimized this concept to the form that we will use in this paper.
Recently, Keller et al. [28] presented a simple consistency check that allows maliciously secure
OT extension at essentially no extra cost: the cost for a single OT on random strings is almost
that of computing two hash function evaluations and sending one string.
The ideal functionality for a single 1-out-of-2 oblivious transfer on k-bit strings is speciﬁed as
follows, along with the random OT variant, where the sender’s messages are sampled at random:
F 1,k
OT : ((s0, s1), b)
F 1,k
ROT : (⊥, b)
(cid:55)→ (⊥, sb)
(cid:55)→ ((r0, r1), rb),
where r0, r1
denote l sets of oblivious transfers on k-bit strings.
$← {0, 1}k, and b ∈ {0, 1} is the receiver’s input. We use the notation F l,k
OT,F l,k
ROT to
7
where each party Pi holds the random share x(i), the random MAC share m(i) and the ﬁxed MAC
key share ∆(i), such that the MAC relation m = x · ∆ holds, for
(cid:74)x(cid:75) = (x(1), . . . , x(n), m(1), . . . , m(n), ∆(1), . . . , ∆(n)),
x =(cid:88)
m(i), ∆ =(cid:88)
x(i), m =(cid:88)
∆(i)
i
2.1 The SPDZ Protocol
The online phase of SPDZ [16, 18] uses additive secret sharing over a ﬁnite ﬁeld, combined with
information-theoretic MACs to ensure active security. A secret value x ∈ F is represented by
i
i
When opening a shared value(cid:74)x(cid:75), parties ﬁrst broadcast their shares x(i) and compute x. To
over F.
ensure that x is correct, they then check the MAC by committing to and opening m(i)−x·∆(i), and
checking these shares sum up to zero. To increase eﬃciency when opening many values, a random
linear combination of the MACs can be checked instead.
The main task of the SPDZ preprocessing phase is to produce the following types of random,
authenticated shared values:
Input Pi: ((cid:74)r(cid:75), i) a random, shared value r, such that only party Pi knows the value r.
Triple: ((cid:74)a(cid:75),(cid:74)b(cid:75),(cid:74)c(cid:75)) for uniformly random a, b, with c = a · b.
In the online phase, parties interact and use the Input values to create shared representations of
their private inputs, and the Triple values to perform multiplications on secret-shared values. Note
that since the(cid:74)·(cid:75) representation is linear, additions and linear functions can be computed locally.
3 Correlated oblivious product evaluation
In this section we describe an arithmetic generalization of the passively secure OT extension of
Ishai et al. [25], which we call correlated oblivious product evaluation (COPE). This allows two
parties to obtain an additive sharing of the product x · ∆, where one party holds x ∈ F and the
other party holds ∆ ∈ F. The correlation, ∆, is ﬁxed at the start of the protocol, and then future
iterations create sharings for diﬀerent values of x.
Oblivious product evaluation. The key mechanism behind COPE is Gilboa’s method for
(possibly non-correlated) oblivious product evaluation, which is illustrated for Fp in Fig. 2, and
also used in our triple generation protocol later. The two parties run k sets of OTs on k-bit
$← F and the correlated value
strings, where in each OT the sender, PS, inputs a random value ti
ti + a, where a ∈ F is the sender’s input. The receiver inputs the bit decomposition of their input,
(b1, . . . , bk) ∈ {0, 1}k, and receives back either ti or ti + a, depending on the bit bi. Since the
sender’s correlation is computed over F, we have the relation
qi = ti + bi · a,
8
Figure 2: Two-party secret-shared multiplication in Fp using 1-out-of-2 OT
where qi is the receiver’s output in the i-th OT. Now both parties simply compute the inner product
of their values (qi)i, (−ti)i with the gadget vector g to obtain values q and t which form an additive
sharing of the product of the inputs, so that
q + t = a · b ∈ F.
Correlated OPE. To obtain COPE, where one party’s input is ﬁxed for many protocol runs,
we only need to perform the k OTs once, where the receiver, PB, inputs their bits of ∆ ∈ F and
the sender, PA, inputs k pairs of random λ-bit seeds (recall that λ is the computational security
parameter and k = (cid:98)log |F|(cid:99)). This is the Initialize phase of ΠCOPEe (Protocol 1).
After initialization, on each Extend call the parties expand the original seeds using a PRF to
create k bits of fresh random OTs, with the same receiver’s choice bits ∆B. Party PA now creates
a correlation between the two sets of PRF outputs using their input, x (step (b)). The masked
correlation is sent to PB, who uses this to adjust the PRF output accordingly; now both parties
have k correlated OTs on ﬁeld elements. These are then mapped into a single ﬁeld element by
taking the inner product of their outputs with the gadget vector g to obtain an additive sharing of
x · ∆ in steps 4–5.
Malicious behavior. Now consider what happens in ΠCOPEe if the parties do not follow the
protocol. Party PB ﬁxes their input ∆ at the start of the protocol, and sends no more messages
thereafter, so cannot possibly cheat. On the other hand, PA may use diﬀerent values of x in each
ui that is sent in step 2 of Extend. Suppose a corrupt PA uses xi to compute ui, for i ∈ [k], then
in step 4 we will instead have q = t + x ∗ ∆B, where x = (x1, . . . , xk), which then results in
t + q = (cid:104)g ∗ x, ∆B(cid:105)
We do not prevent this in our protocol, but instead model this behavior in the functionality FCOPEe
(Fig. 3).
The proof of the following theorem, showing that our protocol securely implements FCOPEe in
the FOT-hybrid model if F is a PRF, is given in Appendix A.
9
Protocol 1 The protocol ΠCOPEe: Oblivious correlated product evaluation with errors over the
ﬁnite ﬁeld F.
The protocol uses a PRF F : {0, 1}λ × {0, 1}λ → F and maintains a counter j := 0. After
initialization, Extend may be called multiple times.
Initialize: On input ∆ ∈ F from PB:
1: PA samples k pairs of seeds, {(ki
2: Both parties call F k,λ
i=1, each in {0, 1}λ.
1)}k
0, ki
OT with inputs {ki
1}i∈[k] from PA and ∆B = (∆0, . . . , ∆k−1) ∈ {0, 1}k
0, ki
from PB.
3: PB receives ki
∆i
Extend: On input x ∈ F from PA:
for i ∈ [k].
1: For each i = 1, . . . , k:
(a) Deﬁne
0 = F (ki
ti
0, j) ∈ F and ti
1 = F (ki
1, j) ∈ F
so PA knows (ti
(b) PA sends ui = ti
(c) PB computes
1) and PB knows ti
0, ti
∆i
0 − ti
1 + x to PB.
.
qi = ∆i · ui + ti
0 + ∆i · x
= ti
∆i
2: Store j := j + 1
3: Let q = (q1, . . . , qk) and t = (t1
0, . . . , tk
0). Note that
q = t + x · ∆B ∈ Fk.
4: PB outputs q = (cid:104)g, q(cid:105).
5: PA outputs t = −(cid:104)g, t(cid:105).
6: Now it holds that t + q = x · ∆ ∈ F.
Theorem 1. The protocol ΠCOPEe securely implements FCOPEe in the FOT-hybrid model with com-
putational security parameter λ, if F is a PRF.
Complexity. The communication complexity of a single iteration of our COPE protocol, after
the k base OTs in initialization, is k ﬁeld elements, for a total of k2 bits. The computation cost is
3k PRF evaluations and 8k ﬁnite ﬁeld operations between the two parties.
4 Authenticating and opening additive shares
In this section we show how to create authenticated SPDZ shares using COPE and securely open
linear combinations of these shares with a MAC checking procedure. The main challenge is to ensure
that an adversary who inputs errors in our COPE protocol cannot later open an authenticated share
to the incorrect value. We model these requirements in a single functionality, F(cid:74)·(cid:75) (Fig. 4), which
is independent of the details of the MAC scheme used and the underlying MAC keys. One can
10
Functionality FCOPEe
The functionality uses a ﬁnite ﬁeld F, of bit length k, and runs with with parties PA, PB and an adversary
A.
Initialize(F): Upon receiving ∆ ∈ F from PB, the functionality stores ∆. Let ∆B = g−1(∆).
Extend: Upon receiving x ∈ F from PA:
1: If PA is corrupt then receive t ∈ F and x ∈ Fk from A, and compute q such that
q + t = (cid:104)g ∗ x, ∆B(cid:105)
Otherwise, sample t $← F and compute q such that
q + t = x · ∆
2: If only PB is corrupt then receive q ∈ F from A and recompute t to satisfy the above. Output
t to PA and q to PB.
Figure 3: Correlated oblivious product evaluation with errors
Functionality F(cid:74)·(cid:75)
The functionality maintains a dictionary, Val, to keep track of the authenticated values. Entries of Val
lie in the (ﬁxed) ﬁnite ﬁeld F and cannot be changed, for simplicity.
Input: On receiving (Input, id1, . . . , idl, x1, . . . , xl, Pj) from party Pj and (Input, id1, . . . , idl, Pj) from all
other parties, where xi ∈ F, set Val[idi] ← xi for i = 1, . . . , l.
Linear comb.: On
receiving
(id1, . . . , idt) ⊆ Val.keys() and the
Val[id] ←(cid:80)t
i=1 Val[idi] · ci + c.
(LinComb, id, id1, . . . , idt, c1, . . . , ct, c)
from all
combination coeﬃcients
c1, . . . , ct, c
parties,
∈
where
F,
set
Open: On receiving (Open, id) from all parties, where id ∈ Val.keys(), send Val[id], wait for x from the
adversary, and output x to all parties.
Check: On receiving (Check, id1, . . . , idt, x1, . . . , xt) from every party Pi, wait for an input from the
adversary. If it inputs OK, and Val[idj] = xj for all j, return OK to all parties, otherwise return
⊥ and terminate.
Abort: On receiving Abort from the adversary, send ⊥ to all parties and terminate.
Figure 4: Functionality for authenticating, computing linear combinations of, and opening addi-
tively shared values
see this functionality as a generalization of veriﬁable secret sharing with the main diﬀerence that
it allows full-threshold corruption. We ﬁrst explain the mechanics of the functionality, and then
describe the protocols for implementing it.
Inputs are provided to the functionality with the Input command, which takes as input a list
of values x1, . . . , xl from one party and stores these along with the identiﬁers id1, . . . , idl. Linear
functions can then be computed on values that have been input using the LinComb command.
11
Protocol 2 MAC checking subprotocol
On input an opened value y, a MAC share m(i) and a MAC key share ∆(i) from party Pi, each Pi
does the following:
1: Compute σ(i) ← m(i) − y · ∆(i) and call FComm to commit to this and receive the handle τi.
2: Call FComm with (Open, τi) to open the commitments.
3: If σ(1) + ··· + σ(n) (cid:54)= 0, output ⊥ and abort, otherwise continue.
The Open command lets the adversary output inconsistent or incorrect values. However, if this
happened to honest parties, the Check command will reveal this.
4.1 Authentication using COPE
We ﬁrst consider a natural approach for one party to create an authenticated sharing of their
private inputs using the correlated oblivious product evaluation protocol, and describe why this is
not suﬃcient for active security on its own. We then show that an actively secure protocol can be
obtained by authenticating one extra random value and checking a random linear combination of
all MACs during the input phase. For ease of exposition, we restrict ourselves to the two-party
setting, and brieﬂy explain at the end how Π(cid:74)·(cid:75) (Protocol 3) extends this to n parties.
Suppose party P1 is honest and wishes to authenticate an input x ∈ F. P1 runs an instance of
FCOPEe with P2 and inputs x into the Extend command, whilst P2 inputs a MAC key share ∆(2).
P1 then receives t and Pj receives q such that q + t = x · ∆(2). P1 then deﬁnes the MAC share
m(1) = x · ∆(1) + t, and P2 deﬁnes the MAC share m(2) = q. Clearly, we have m(1) + m(2) = x · ∆,
as required.
To convert x into shares, P1 simply generates random additive shares x(1), x(2) and sends x(2)
to P2. Note that since the shares and MACs are linear, computing linear combinations on authen-
ticated values is straightforward. Parties can also add a constant by adjusting their MAC shares
accordingly, and choosing one party (say, P1) to adjust their share.
1 chooses x =
(1, . . . , 1, 0, . . . , 0) ∈ Fk, where this is 1 in the ﬁrst k/2 positions and 0 elsewhere, then the re-
lation between the MAC shares becomes:
1 , who can input a vector x into FCOPEe.
Now consider a corrupt P ∗
If P ∗
m(1) + m(2) = (cid:104)g ∗ (1, . . . , 1, 0, . . . , 0), ∆B(cid:105)
If P ∗