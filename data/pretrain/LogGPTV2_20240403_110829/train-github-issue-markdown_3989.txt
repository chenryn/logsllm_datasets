A user of my package BinningAnalysis.jl approached me yesterday with the
following peace of code.
    using BinningAnalysis
    mutable struct MyStruct
        x::LogBinner{Float64,32}
    end
    function run!(s::MyStruct)
        push!(s.x, rand())
    end
    s = MyStruct(LogBinner(Float64))
    run!(s)
His observation (which I can reproduce on both Julia 1.5 and 1.6) was that
`run!(s)` takes forever / hangs indefinitely. To investigate the issue I tried
`@code_warntype run!(s)` which also hung indefinitely. Just by inspection, I
realised that the underlying issue is that a third type parameter has recently
been added to the type `LogBinner`. Just by upgrading BinningAnalysis, the
type of the field `x` has subtly changed from concrete to abstract. If I
adjust the field's type appropriately, everything is fast again.
Reasons for filing this issue:
  1. While it is understood that using abstract types for fields is a performance gotcha, Julia shouldn't hang indefinitely here.
  2. The fact, that `LogBinner{Float64,32}` is abstract is very subtle / hard to realise for the user. Perhaps we should force users to specify all type parameters?