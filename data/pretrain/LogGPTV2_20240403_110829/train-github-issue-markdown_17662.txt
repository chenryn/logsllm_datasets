## üêõ Bug
torch.max seems to be acting differently on CPU/GPU for tensors with equal
elements, for example, with all 0 elements.
torch.max on CPU will return the last index while on GPU the first index.
## To Reproduce
Steps to reproduce the behavior:
    import torch
    print (torch.max(torch.zeros([1, 2001]).to(torch.device('cpu')), 1)[1])
    print (torch.max(torch.zeros([1, 2001]).to(torch.device('cuda:0')), 1)[1])
The result will be:
    tensor([2000])
    tensor([0], device='cuda:0')
On CPU it returns the index 2000, while on GPU 0.
## Expected behavior
Expected to return the same index on CPU/GPU, all last index or all first
index.
## Environment
The output of environment collection script:
PyTorch version: 1.4.0  
Is debug build: No  
CUDA used to build PyTorch: 10.1
OS: Ubuntu 18.04.4 LTS  
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0  
CMake version: version 3.13.3
Python version: 3.6  
Is CUDA available: Yes  
CUDA runtime version: 10.0.130  
GPU models and configuration: GPU 0: Tesla V100-SXM2-16GB  
Nvidia driver version: 440.33.01  
cuDNN version: Probably one of the following:  
/usr/local/cuda-10.1/targets/x86_64-linux/lib/libcudnn.so.7.6.5  
/usr/local/cuda-10.2/targets/x86_64-linux/lib/libcudnn.so.7.6.5
Versions of relevant libraries:  
[pip3] numpy==1.15.4  
[conda] blas 1.0 mkl  
[conda] cudatoolkit 10.1.243 h6bb024c_0  
[conda] mkl 2020.0 166  
[conda] mkl-service 2.3.0 py36he904b0f_0  
[conda] mkl_fft 1.0.15 py36ha843d7b_0  
[conda] mkl_random 1.1.0 py36hd6b4f25_0  
[conda] numpy 1.18.1 py36h4f9e942_0  
[conda] numpy-base 1.18.1 py36hde5b4d6_1  
[conda] numpydoc 0.9.2 py_0  
[conda] pytorch 1.4.0 py3.6_cuda10.1.243_cudnn7.6.3_0 pytorch  
[conda] torchvision 0.5.0 py36_cu101 pytorch