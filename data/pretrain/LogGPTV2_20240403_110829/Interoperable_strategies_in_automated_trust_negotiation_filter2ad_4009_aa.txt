title:Interoperable strategies in automated trust negotiation
author:Ting Yu and
Marianne Winslett and
Kent E. Seamons
Interoperable Strategies in Automated Trust Negotiation
Ting Yu
University of Illinois,
Urbana-Champaign
Marianne Winslett
University of Illinois,
Urbana-Champaign
PI:EMAIL
PI:EMAIL
Kent E. Seamons
Brigham Young University
PI:EMAIL
ABSTRACT
Automated trust negotiation is an approach to establishing
trust between strangers through the exchange of digital cre-
dentials and the use of access control policies that specify
what combinations of credentials a stranger must disclose
in order to gain access to each local service or credential.
We introduce the concept of a trust negotiation protocol,
which deﬁnes the ordering of messages and the type of in-
formation messages will contain. To carry out trust nego-
tiation, a party pairs its negotiation protocol with a trust
negotiation strategy that controls the exact content of the
messages, i.e., which credentials to disclose, when to dis-
close them, and when to terminate a negotiation. There are
a huge number of possible strategies for negotiating trust,
each with diﬀerent properties with respect to speed of nego-
tiations and caution in giving out credentials and policies.
In the autonomous world of the Internet, entities will want
the freedom to choose negotiation strategies that meet their
own goals, which means that two strangers who negotiate
trust will often not use the same strategy. To date, only a
tiny fraction of the space of possible negotiation strategies
has been explored, and no two of the strategies proposed
so far will interoperate. In this paper, we deﬁne a large set
of strategies called the disclosure tree strategy (DTS) fam-
ily. Then we prove that if two parties each choose strategies
from the DTS family, then they will be able to negotiate
trust as well as if they were both using the same strategy.
Further, they can change strategies at any point during ne-
gotiation. We also show that the DTS family is closed, i.e.,
any strategy that can interoperate with every strategy in
the DTS family must also be a member of the DTS family.
We also give examples of practical strategies that belong to
the DTS family and ﬁt within the TrustBuilder architecture
and protocol for trust negotiation.
1.
INTRODUCTION
With billions of users on the Internet, most interactions
will occur between strangers, i.e., entities that have no pre-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
existing relationship and may not share a common security
domain.
In order for strangers to conduct secure trans-
actions, a suﬃcient level of mutual trust must be estab-
lished. For this purpose, the identity of the participants
(e.g., their social security number, ﬁngerprint, institutional
tax ID) will often be irrelevant to determining whether or
not they should be trusted. Instead, the properties of the
participants, e.g., employment status, citizenship, group mem-
bership, will be most relevant. Traditional security ap-
proaches based on identity require a new client to pre-register
with the service, in order to obtain a local login, capability,
or credential before requesting service; but the same prob-
lem arises when the client needs to prove on-line that she
is eligible to register with the service. E-commerce needs a
more scalable approach that allows automatic on-line pre-
registration, or does away entirely with the need for pre-
registration. We believe that automated trust establishment
is such a solution.
With automated trust establishment, strangers establish
trust by exchanging digital credentials, the on-line analogues
of paper credentials that people carry in their wallets: digi-
tally signed assertions by a credential issuer about the cre-
dential owner. A credential is signed using the issuer’s pri-
vate key and can be veriﬁed using the issuer’s public key.
A credential describes one or more attributes of the owner,
using attribute name/value pairs to describe properties of
the owner asserted by the issuer. Each credential also con-
tains the public key of the credential owner. The owner
can use the corresponding private key to answer challenges
or otherwise demonstrate ownership of the credential. Dig-
ital credentials can be implemented using, e.g., X.509 [10]
certiﬁcates.
While some resources are freely accessible to all, many
require protection from unauthorized access. Access con-
trol policies can be used for a wide variety of “protected”
resources, such as services accessed through URLs, roles in
role-based access control systems, and capabilities in capability-
based systems. Since digital credentials themselves can con-
tain sensitive information, their disclosure will often also
be governed by access control policies. For example, sup-
pose that a landscape designer wishes to order plants from
Champaign Prairie Nursery (CPN). She ﬁlls out an order
form on the web, checking an order form box to indicate
that she wishes to be exempt from sales tax. Upon receipt
of the order, CPN will want to see a valid credit card or her
account credential issued by CPN, and a current reseller’s
license. The designer has no account with CPN, but she
does have a digital credit card. She is willing to show her
146reseller’s license to anyone, but she will only show her credit
card to members of the Better Business Bureau. Therefore,
when protected credentials are involved, a more complex
procedure needs to be adopted to establish trust through
negotiation.
2. RELATED WORK
Credential-based authentication and authorization systems
fall into three groups:
identity-based, property-based, and
capability-based. Originally, public key certiﬁcates, such as
X.509 [10] and PGP [17], simply bound keys to names, and
X.509 v.3 certiﬁcates later extended this binding to general
properties (attributes). Such certiﬁcates form the founda-
tion of identity-based systems, which authenticate an en-
tity’s identity or name and use it as the basis for authoriza-
tion. Identity is not a useful basis for our aim of establishing
trust among strangers.
Systems have emerged that use property-based credentials
to manage trust in decentralized, distributed systems [8, 11,
14]. Johnson et al. [11] use attribute certiﬁcates (property-
based credentials) and use-condition certiﬁcates (policy as-
sertions) for access control. Use-condition certiﬁcates enable
multiple, distributed stakeholders to share control over ac-
cess to resources. In their architecture, the policy evaluation
engine retrieves the certiﬁcates associated with a user to de-
termine if the use conditions are met. Their work could use
our approach to protect sensitive certiﬁcates.
The Trust Establishment Project at the IBM Haifa Re-
search Laboratory [8] has developed a system for establish-
ing trust between strangers according to policies that specify
constraints on the contents of public-key certiﬁcates. Servers
can use a collector to gather supporting credentials from is-
suer sites. Each credential contains a reference to the site
associated with the issuer. That site serves as the starting
point for a collector-controlled search for relevant support-
ing credentials. Security agents in our work could adopt the
collector feature, and we could use their policy deﬁnition
language. Their work could use our approach to protect
sensitive credentials and gradually establish trust.
Capability-based systems manage delegation of author-
ity for a particular application. Capability-based systems
are not designed for establishing trust between strangers,
since clients are assumed to possess credentials that repre-
sent authorization of speciﬁc actions with the application
server.
In the capability-based KeyNote system of Blaze
et al.
[2, 3], a credential describes the conditions under
which one principal authorizes actions requested by other
principals. KeyNote policies delegate authority on behalf
of the associated application to otherwise untrusted parties.
KeyNote credentials express delegation in terms of actions
that are relevant to a given application. KeyNote policies do
not interpret the meaning of credentials for the application.
This is unlike policies designed for use with property-based
credentials, which typically derive roles from credential at-
tributes. The IETF Simple Public Key Infrastructure [9]
uses a similar approach to that of KeyNote by embedding
authorization directly in certiﬁcates.
Bonatti et al.
[4] introduced a uniform framework and
model to regulate service access and information release over
the Internet. Their framework is composed of a language
with formal semantics and a policy ﬁltering mechanism. Our
work can be integrated with their framework.
sure of a user’s sensitive private information based on the
privacy practices of the server. Trust negotiation is gener-
alized to base disclosure on any server property of interest
to the client that can be represented in a credential. The
work on trust negotiation focuses on certiﬁed properties of
the credential holder while P3P is based on data submitted
by the client that are claims the client makes about itself.
Support for both kinds of information in trust negotiation
is warranted.
SSL [7], the predominant credential-exchange mechanism
in use on the web, and its successor TLS [5, 6] support
credentials exchange during client and server authentication.
In work not described in this paper, we have extended SSL
to serve as the substrate for private, secure trust negotiation.
The ﬁrst trust negotiation strategies proposed included a
naive strategy that discloses credentials as soon as they are
unlocked and discloses no policy information, as well as a
strategy that discloses credentials only after each party de-
termines that trust can be established, based on reviewing
the other party’s policies [14]. Yu et al.
[15] introduced a
new strategy that would succeed whenever success was pos-
sible and had certain eﬃciency guarantees. In [12], consid-
eration was given for sensitive policy information in several
strategies that established trust gradually through the intro-
duction of policy graphs. The fact that none of the strategies
proposed in this earlier work will interoperate demonstrates
the need for trust negotiation protocols and strategy families
to support interoperability between negotiation strategies.
3. TRUST NEGOTIATION
We establish trust incrementally by exchanging creden-
tials and requests for credentials, an iterative process known
as trust negotiation. While a trust negotiation protocol de-
ﬁnes the ordering of messages and the type of information
messages will contain, a trust negotiation strategy controls
the exact content of the messages, i.e., which credentials to
disclose, when to disclose them, and when to terminate a
negotiation. Figure 1 introduces our TrustBuilder architec-
ture for trust negotiation. Each participant in the negoti-
ation has an associated security agent (SA) that manages
the negotiation. The security agent mediates access to local
protected resources, i.e., services and credentials. We say a
credential or access control policy is disclosed if it has been
sent to the other party in the negotiation, and that a service
is disclosed if the other party is given access to it. Disclosure
of protected resources is governed by access control policies.
Once enough trust has been established that a particular
credential can be disclosed to the other party, a local ne-
gotiation strategy must determine whether the credential is
relevant to the current stage of the negotiation. Diﬀerent
negotiation strategies will use diﬀerent deﬁnitions of rele-
vance, involving tradeoﬀs between computational cost, the
length of the negotiation, and the number of disclosures.
It is clear that there are endless possible variations in
how to negotiate trust.
In this paper we characterize a
broad class of strategies (section 6) and design a strategy-
independent, language-independent trust negotiation proto-
col (section 5) that ensures their interoperability within the
TrustBuilder trust negotiation architecture.
4. ACCESS CONTROL POLICIES
The P3P standard [13] focuses on negotiating the disclo-
We assume that the information contained in access con-
147Local Site Security Agent
Remote Site Security Agent
Trust Negotiation
Middleware
Negotiation
Manager
Negotiation
Protocol
Access
Control
Policies
Disclosures
Access
Control
Policies
Trust Negotiation
Middleware
Negotiation
Manager
Negotiation
Protocol
Negotiation Strategy
Negotiation
Strategy
Protected
Resources
Services,
Credentials
Accesc control policies
Protected
Resources
Services,
Credentials
Accesc control policies
Negotiation Strategy
Negotiation
Strategy
Figure 1: An architecture for automated trust negotiation. A security agent that manages local protected
resources and their associated access control policies represents each negotiation participant. A access control
policy speciﬁes what resources the other party needs to disclose in order to gain access to a local resource,
as indicated by the dotted lines in the ﬁgure. Trust negotiation middleware enables negotiation strategy
interoperability.
trol policies (policies, for short) and credentials can be ex-
pressed as ﬁnite sets of statements in a language with a well-
deﬁned semantics. XML or logic programming languages
with appropriate semantics may be suitable in practice [8,
1]. For convenience, we assume that the language allows us
to describe the meaning of a set X of statements as the set
of all models that satisfy X, in the usual logic sense. We say
that X satisﬁes a set of statements P if and only if P is true
in all models of X. For purely practical reasons, we require
that the language be monotonic, i.e., if X satisﬁes policy P ,
then any superset of X will also satisfy P ; that way, once
a negotiation strategy has determined that the credentials
disclosed by a participant satisfy the policy of a resource,
the strategy knows that the same policy will be satisﬁed for
the rest of the negotiation.
In this paper, we will treat credentials and services as
propositional symbols. Each of these resources has one ac-
cess control policy, of the form C ← FC (C1, . . . , Ck), where
FC (C1, . . . , Ck) is a Boolean expression involving only cre-
dentials C1, . . . , Ck that the other party may possess, Boolean
constants true and f alse, the Boolean operators ∨ and ∧,
and parentheses as needed. Ci is satisﬁed if and only if the
other party has disclosed credential Ci. We assume that we
can distinguish between local and remote resources (by re-
naming propositional symbols as necessary). Resource C is
unlocked if its access control policy is satisﬁed by the set of
credentials disclosed by the other party. A resource is un-
protected if its policy is always satisﬁed. The denial policy
C ← f alse means that either the party does not possess C,
or else will not disclose C under any circumstances. A party
implicitly has a denial policy for each credential it does not
possess. If the disclosure of a set S of credentials satisﬁes
resource R’s policy, then we say S is a solution set for R.
Further, if none of S’s proper subsets is a solution set for
R, we say S is a minimal solution set for R. The size of a
policy is the number of symbol occurrences in it.
Given sequence G = (C1, . . . , Cn) of disclosures of pro-
tected resources, if each Ci is unlocked at the time it is
disclosed, then we say G is a safe disclosure sequence. The
goal of trust negotiation is to ﬁnd a safe disclosure sequence
where Cn = R, the resource to which access was originally
requested. When this happens, we say that trust negotia-
If Ci = Cj and 1 ≤ i < j ≤ n, then we
tion succeeds.
say G is redundant. Language monotonicity allows us to re-
move the later duplicates from a redundant safe disclosure
sequence and the resulting sequence is still safe. Figure 2
shows a safe disclosure sequence for the landscape designer’s
purchase from CPN (section 1). A more complex example
can be found in the full version of this paper [16]. Recall
that this example, and our algorithms that follow, rely on
lower levels of software to perform the functions associated
with disclosure of a credential: veriﬁcation of its contents,
checks for revocation as desired, checks of validity dates,
authentication of ownership, etc.
5. TRUSTBUILDER PROTOCOL AND STRAT-
EGY FAMILIES
Previous work has not explicitly proposed any trust ne-
gotiation protocols, instead deﬁning protocols implicitly by
the way each strategy works. This is one reason why no two
diﬀerent previously proposed strategies can interoperate –
their underlying protocols are totally diﬀerent.
We remedy this problem by deﬁning a simple protocol for
TrustBuilder. Formally, a message in the TrustBuilder pro-
tocol is a set {R1, . . . , Rk} where each Ri is a disclosure of a
local credential, a local policy, or a local resource. When a
message is the empty set ∅, we call it a failure message. To
guarantee the safety and timely termination of trust nego-
tiation no matter what policies and credentials the parties
possess, the TrustBuilder protocol requires the negotiation
strategies used with it to enforce the following three condi-
tions throughout negotiations:
1. If a message contains a denial policy disclosure C ←
148Landscape
Designer