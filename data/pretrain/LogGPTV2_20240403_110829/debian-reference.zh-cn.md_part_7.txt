# 目录及其用途

- **根目录（/）**：整个文件系统的起点。
- **/etc/**：存放系统范围的配置文件。
- **/var/log/**：存储系统日志文件。
- **/home/**：为所有非特权用户提供的个人目录空间。

### 表1.3: 重要目录及功能列表

## 1.2.2 文件系统详解
依据UNIX的传统，Debian GNU/Linux 的文件系统建立于物理数据存储设备之上，例如硬盘等。硬件设备如控制台和远程串行终端以统一的形式在`/dev/`下呈现给用户。

每个文件、目录或命名管道（用于程序间共享数据的方法），以及Debian GNU/Linux系统上的每一个物理设备，都由一个称为inode的数据结构来描述其属性，比如所有权信息（所属用户与组）、最后访问时间等。这种将所有实体抽象化为文件的思想源于Unix，并且被现代Linux内核进一步发扬光大——现在甚至可以透过文件系统获取到正在运行进程的相关信息。

这种对物理对象和内部处理过程的高度抽象化带来了极大的灵活性，允许我们使用相同的命令操作多种不同的设备类型。此外，通过向关联至运行中进程的特殊文件写入数据，还可以动态调整内核的行为。

**提示**: 若要查看文件树与实际存储介质之间的映射关系，请尝试执行不带任何参数的`mount(8)`命令。

## 1.2.3 文件系统权限
类Unix系统中的文件权限针对三类用户进行定义：
- 文件的所有者（u）
- 文件所属组内的其他成员（g）
- 所有其他用户（o），有时也被称为“世界”或“所有人”

对于文件而言，各类用户的权限包括：
- **读取（r）**：允许查看文件内容。
- **写入（w）**：允许修改文件内容。
- **执行（x）**：允许将文件作为可执行程序运行。

而对于目录来说，这些权限则表示：
- **读取（r）**：允许列出目录中的条目。
- **写入（w）**：允许添加或删除目录中的文件。
- **执行（x）**：允许进入目录并访问其中的文件。值得注意的是，对于目录而言，执行权限还意味着能够显示其内文件的详细属性，如大小和修改日期等。

要查看文件和目录的具体权限设置，可以使用带有`-l`选项的`ls(1)`命令。该命令会按顺序输出如下信息：
- 文件类型标识符
- 访问权限
- 硬链接数量
- 文件所有者的用户名
- 文件所属组名
- 文件大小
- 最后修改日期与时间
- 文件名称

表1.4展示了`ls -l`命令输出的第一列字符所代表的不同类型的文件。

更改文件权限相关的命令主要包括：
- `chown(1)`：用于更改文件的所有权归属（需root权限）。
- `chgrp(1)`：用于变更文件所属的组（需文件所有者或root权限）。
- `chmod(1)`：用于修改文件及目录的访问权限（同样需要相应权限）。

这里提供了一些基本示例语法：
```bash
# 更改foo文件的所有者
# chown newowner foo

# 更改foo文件所属的组
# chgrp newgroup foo

# 调整foo文件的权限
# chmod [ugoa][+-=][rwxXst][,...] foo
```

更特别地，还有三个额外的权限位：
- Set-User-ID (SUID) 位
- Set-Group-ID (SGID) 位
- 粘滞位 (sticky bit)

当`ls -l`命令输出中出现大写字母代替了执行位时，表明对应的执行权限未被设置。

设置SUID可以让普通用户以文件所有者的身份执行特定程序；而SGID则允许用户以文件所属组的身份执行文件。尽管这些特性非常强大，但同时也可能带来安全隐患，因此必须谨慎使用。

此外，在某些情况下，设置目录的SGID属性可以使新创建于该目录下的文件自动继承该目录所属的组；同时，设置粘滞位可以防止非文件所有者删除位于公共可写目录下的文件。

下面是一些具体例子说明如何应用这些高级权限：

...

（省略部分关于具体权限设置的例子）

...

## 1.2.4 新建文件默认权限控制：umask
新建文件的初始权限受到shell内置命令`umask`的影响。Debian通常采用用户私有组（UPG）策略，即每当新增一个用户时都会为其单独创建一个同名的私有组。鉴于此，默认推荐将`umask`值设为0002以提高安全性。

表1.6列举了几种常见的`umask`设置及其效果。

## 1.2.5 组权限管理
若要使某用户获得特定组的权限，需将其加入相应的组。这可以通过编辑`/etc/group`文件完成。另外，还可以通过PAM模块动态分配组成员身份。

表1.7和表1.8分别列举了一些常见系统预定义组及其作用。

## 1.2.6 时间戳
Linux文件具有三种不同类型的时间戳：
- mtime：最后一次修改文件内容的时间。
- ctime：文件状态（如权限、所有权等）发生改变的时间。
- atime：最后一次访问文件的时间。

表1.9总结了上述三种时间戳的具体含义。需要注意的是，atime的实际行为可能会根据文件系统挂载选项有所不同。例如，“noatime”选项可以阻止每次读取文件时更新atime，从而提升性能。

以上就是关于Debian文件系统的一些基础知识介绍。希望对你有所帮助！