目录 目录用途
/ 根目录
/etc/ 系统范围的配置文件
/var/log/ 系统日志文件
/home/ 所有非特权用户的用户目录
Table1.3: 重要目录的用途列表
1.2.2 文件系统深入解析
按照UNIX系统的传统，DebianGNU/Linux的文件系统是在物理数据存储设备诸如磁盘或其他存储设备上，与硬件
设备的交互，如控制台和远程串口终端都是以统一的方式呈现在“/ dev /”下面。
每个文件、目录、命名管道（一种两个程序间共享数据的方法）或DebianGNU/Linux系统上的物理设备都有一个叫做
inode的数据结构，描述了其相关属性，例如拥有它的用户（所有者），它属于的组，最后一次访问时间，等等。把所有
东西都表示在文件系统中的想法是来源于Unix，现代的Linux内核则将这个思路进行了扩展。现在，甚至有关计算机
上正在运行的进程的信息都可以在文件系统中找到。
这个对物理实体和内部进程的统一和抽象是非常强大的，因为这允许我们用同样的命令对许多完全不同的设备进行同
样的操作。甚至可以通过向链接到运行进程的特殊文件写入数据来改变内核的运行方式。
提示
如果您需要识别文件树和物理实体之间的对应关系，请尝试不带参数运行 mount(8)。
1.2.3 文件系统权限
类Unix系统的文件系统权限被定义给三类受影响的用户。
• 拥有这个文件的用户（u）
• 这个文件所属组的其他用户（g）
• 所有其余的用户（o），同样称为“世界”和“所有人”
对文件来说，每个对应权限允许下列动作。
• 可读（r）权限允许所有者检查文件的内容。
• 可写（w）权限允许所有者修改文件内容。
• 可执行（x）权限允许所有者把文件当做一个命令运行。
对于目录来说，每个对应权限允许下列动作。
• 可读（r）权限允许所有者列出目录内的内容。
Debian参考手册 8/233
• 可写（w）权限允许所有者添加或删除目录里面的文件。
• 可执行（x）权限允许所有者访问目录里的文件。
在这里，一个目录的可执行权限意味着不仅允许读目录里的文件，还允许显示他们的属性，例如大小和修改时间。
ls(1)用于显示文件和目录的权限信息（更多）。当运行时带有“-l”选项，它将按给定顺序显示下列信息。
• 文件类型（第一个字母）
• 文件的访问权限（9个字符，三个字符组成一组按照用户、组、其他的顺序表示）
• 链接到文件的硬链接数
• 文件所有者的用户名
• 这个文件所属的组名
• 以字符（字节）为单位的文件大小
• 文件的日期和时间（mtime）
• 文件的名字
字符 说明
- 普通文件
d 目录
l 符号链接
c 字符设备节点
b 块设备节点
p 命名管道
s 套接字
Table1.4: “ls -l”输出的第一个字符列表
chown(1)用于root账户修改文件的所有者。chgrp(1)用于文件的所有者或root账户修改文件所属的组。chmod(1)用
于文件的所有者或root账户修改文件和文件夹的访问权限。操作一个 foo文件的基本语法如下。
# chown newowner foo
# chgrp newgroup foo
# chmod [ugoa][+-=][rwxXst][,...] foo
例如，你可以按照下面使一个目录树被用户 foo所有，并共享给组 bar。
# cd /some/location/
# chown -R foo:bar .
# chmod -R ug+rwX,o=rX .
有三个更加特殊的权限位。
• Set-User-ID(SUID)位（s或S替换用户的x）
• Set-Group-ID(SGID)位（s或S替换组的x）
• 粘滞位（t或T替代其他用户的x）
如果“ls -l”对这些位的输出是大写字母，则表示这些输出下面的执行位未设置。
给一个可执行文件设置Set-User-ID位将允许一个用户以他自己的ID运行这个可执行文件（例如root用户）。类似的，
给一个可执行文件设置了Set-Group-ID位将允许一个用户以文件所属组的ID运行该文件。（例如root组）。由于这些
设置可能导致安全风险，设置它们为可用的时候需要格外留意。
Debian参考手册 9/233
在一个目录上设置“Set-Group-ID”将打开类BSD的文件创建计划，所有在目录里面创建的文件将属于目录所属的组。
给一个目录设置“粘滞位”将保护该目录内的文件不被其所有者之外的一个用户删除。为了保护一个在像“/tmp”这
样所有人可写或同组可写的目录下文件内容的安全，不仅要去除可写权限，还要给其所在目录设置粘滞位。否则，该
文件可以被任意对其所在目录有写权限的用户删除并创建一个同名的新文件。
这里有一点有趣的文件权限例子。
$ ls -l /etc/passwd /etc/shadow /dev/ppp /usr/sbin/exim4
crw------T 1 root root 108, 0 Oct 16 20:57 /dev/ppp
-rw-r--r-- 1 root root 2761 Aug 30 10:38 /etc/passwd
-rw-r----- 1 root shadow 1695 Aug 30 10:38 /etc/shadow
-rwsr-xr-x 1 root root 973824 Sep 23 20:04 /usr/sbin/exim4
$ ls -ld /tmp /var/tmp /usr/local /var/mail /usr/src
drwxrwxrwt 14 root root 20480 Oct 16 21:25 /tmp
drwxrwsr-x 10 root staff 4096 Sep 29 22:50 /usr/local
drwxr-xr-x 10 root root 4096 Oct 11 00:28 /usr/src
drwxrwsr-x 2 root mail 4096 Oct 15 21:40 /var/mail
drwxrwxrwt 3 root root 4096 Oct 16 21:20 /var/tmp
chmod(1)有另一种数值模式来描述文件权限。这种数字模式使用3到4位八进制（底为8）数。
数字 说明
第一个可选数字 Set-User-ID(=4),Set-Group-ID(=2)和粘滞位(=1)之和
第二个数字 用户的可读(=4),可写(=2)和可执行(=1)权限之和
第三个数字 组权限同上
第四个数字位 其他用户权限同上
Table1.5: chmod(1)命令文件权限的数字模式
这听起来很复杂实际上相当简单。如果你把“ls -l”命令输出的前几列（2-10），看成以二进制（底为2）表示文件
的权限（“-”看成0，“rwx”看成1），你应该可以理解用数字模式值的最后3位数字对文件权限的八进制表示。
尝试下列例子
$ touch foo bar
$ chmod u=rw,go=r foo
$ chmod 644 bar
$ ls -l foo bar
-rw-r--r-- 1 penguin penguin 0 Oct 16 21:39 bar
-rw-r--r-- 1 penguin penguin 0 Oct 16 21:35 foo
提示
如果你需要在shell脚本中访问“ls -l”显示的信息，你需要使用相关命令，如 test(1)，stat(1)和 readlink(1)。
shell内置命令，如“[”或“test”，可能也会用到。
1.2.4 控制新建文件的权限：umask
什么权限将应用到新建文件受shell内置命令umask的限制。参见 dash(1)，bash(1)，和内建命令(7)。
(file permissions) = (requested file permissions) & ~(umask value)
Debian默认使用用户私人组（UPG）。每当一个新用户添加到系统的时候都会创建一个UPG。UPG的名字和创建它的
用户相同，这个用户是这个UPG的唯一成员。自从每个用户都有自己的私人组之后，把umask设置成 0002变得更
安全了。（在某些Unix变体中，把所有普通用户设置到一个叫 users的组是非常常见的做法，在这种情况下，出于
安全考虑把umask设为 0022是一个好主意）
Debian参考手册 10/233
umask值 创建的文件权限 创建的目录权限 用法
0022 -rw-r--r-- -rwxr-xr-x 仅所属用户可写
0002 -rw-rw-r-- -rwxrwxr-x 仅所属组可写
Table1.6: umask值举例
提示
通过把“umask 002”写入~/.bashrc文件打开UPG。
1.2.5 一组用户的权限（组）
警告
Pleasemakesuretosaveunsavedchangesbeforedoingrebootorsimilaractions.
Inordertomakegrouppermissionstobeappliedtoaparticularuser, thatuserneedstobemadeamemberofthegroupusing
”sudo vigr”for/etc/groupand”sudo vigr -s”for/etc/gshadow. Youneedtologinafterreboot(orrun”kill
-TERM -1”)1toenablethenewgroupconfiguration.
注意
或者，你可以通过添加一行“auth optional pam_group.so”到“/etc/pam.d/common-auth”以及配置
“/etc/security/group.conf”，使得在身份验证过程动态添加用户到组。（参见第 4 章。）
在Debian系统中，硬件设备是另一种文件。如果你从一个用户账户访问某些设备出现问题，例如CD-ROM和USB记
忆棒，你需要使这个用户成为相关组的成员。
一些著名的由系统提供的组允许其成员不需要root权限访问某些特定的文件和设备。
组 可访问文件和设备的描述
dialout 完全及直接的访问串口端口（“/dev/ttyS[0-3]”）
dip 有限的访问串口，创建到信任点的拨号IP连接
cdrom CD-ROM,DVD+/-RW驱动器
audio 音频设备
video 视频设备
scanner 扫描仪
adm 系统监控日志
staff 一些用于初级管理工作的目录：“/usr/local”，“/home”
Table1.7: 关于文件访问的由系统提供的著名组列表
提示
你需要属于dialout组才能重配置调制解调器、拨号到任意地方，等等。但如果 root用户在“/etc/ppp/peers/”
为受信任点创建了预定义配置文件的话，你只需要属于 dip组，就可以创建拨号IP来连接到那些受信任的点上，
需使用的命令行工具包括pppd(8)、pon(1)以及 poff(1)。
某些著名的由系统提供的组允许它们的成员不带root权限运行特定的命令。
1UseoflogoutviaGUImenuforheremaynotworkwellunderthemodernenvironment.
Debian参考手册 11/233
组 可访问命令
sudo 不带它们的密码运行sudo
lpadmin 执行命令以从打印机数据库添加、修改、移除打印机
Table1.8: 著名的由系统提供用于特定命令运行的组列表
由系统提供的用户和组的完整列表，参见由base-passwd包提供的“/usr/share/doc/base-passwd/users-and-groups.html”
中，当前版本的“用户和组”。
用户和组系统的管理命令，参见 passwd(5)，group(5)，shadow(5)，newgrp(1)，vipw(8)，vigr(8)，以及 pam_group(8)。
1.2.6 时间戳
GNU/Linux文件有三种类型的时间戳。
类型 含义（历史上Unix的定义）
mtime 文件修改时间(ls -1)
ctime 文件状态修改时间(ls -lc)
atime 文件最后被访问的时间(ls -lu)
Table1.9: 时间戳类型列表
注意
ctime不是文件创建时间。
注意
atime在GNU/Linux系统上的真实值可能和历史上Unix的定义有所不同。
• 覆盖一个文件，将会改变该文件所有的mtime,ctime,和atime属性。
• 改变文件的所有者或者权限，将改变文件的ctime和 atime属性。
• 在历史上的Unix系统中，读取一个文件将改变文件的atime属性。
• 读一个文件，将改变文件的atime属性；在GNU/Linux系统上，这仅发生在其文件系统使用“strictatime”参数
挂载的情况下。
• 如果GNU/Linux系统的文件系统使用”relatime”选项挂载，第一次读文件，或者随后读文件，将改变该文件的
atime属性. (从Linux2.6.30开始的默认行为)
• 如果GNU/Linux系统的文件系统使用”noatime”挂载，则读一个文件，不会改变这个文件的atime属性。
注意
为了在正常的使用场景中能够提升文件系统的读取效率，新增了”noatime”和”relatime”这两个加载选项。如使