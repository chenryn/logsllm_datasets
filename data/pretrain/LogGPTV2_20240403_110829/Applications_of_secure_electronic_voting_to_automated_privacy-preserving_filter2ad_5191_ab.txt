ies the request to one of its friends chosen at random, which
becomes the cluster entrance of the next hop.
4.4 Weaknesses of Previous Design and Our
Motivations to Use Homomorphic Encryp-
tion
f
In the previous design, the gathered conﬁguration data
is in plain text. A curious entrance and exit can launch a
passive attack merely by sharing what they know to com-
promise privacy of the cluster as a unit. In this paper, we
use homomorphic encryption (Section 5) to encrypt each in-
dividual’s contribution, which robustly guarantees privacy
under the passive attacker model.
The previous design does not address compromised nodes.
In the real world, friends’ machines might be occasionally
compromised,
leading to active attacks against the FTN
protocol, in the forms of the troubleshooter attack and the
data injection attack (Section 3.2). Homomorphic encryp-
tion can be combined together with the clustering strategy
(Section 6) to mitigate the troubleshooter attack. We also
propose a further enhancement by forking the troubleshoot-
ing path, to make the troubleshooter attack less productive
(Section 11.2).
The previous design does not provide any protection for
the integrity of the troubleshooting result. A compromised
host may hence launch a data injection attack by contribut-
ing false conﬁguration information, leading to incorrect trou-
bleshooting results. The use of homomorphic encryption en-
ables veriﬁcation of data validity via zero knowledge proof
(ZKP), which together with our proposed multiple-branch
troubleshooting strategy largely reduces the risk of success-
ful data injection attacks (Section 11.3).
5. PRIVACY-PRESERVING DATA AGGRE-
GATION USING HOMOMORPHIC EN-
CRYPTION
We now present an encryption scheme for parameter ag-
gregation which provides robust guarantees of data privacy
through the use of secure electronic voting protocols. For
simplicity, we assume that the entry e takes on only two
possible values (e.g. 0 or 1) and that clustering is not used;
later we will explain how to remove these restrictions. Note
that this scenario is very similar to that of a secure elec-
tion: in both cases we want to generate an accurate tally of
the number of participants who voted 1, without revealing
who contributed a 1 and who contributed a 0. In order to
accomplish encrypted data collection, we employ a type of
homomorphic voting system with threshold decryption [2,
703]. The particular scheme we use is a simpliﬁed version of
the ElGamal based election scheme of Cramer, Gennaro,
and Schoenmakers [9]; this scheme was chosen over the oth-
ers because of its optimality with respect to communication
complexity. In this paper, we modify the CGS protocol so
that shares of the decryption key can be aggregated in par-
allel with the participant recruitment and data collection
steps. To our knowledge, this represents the ﬁrst threshold
decryption design which performs secret key sharing and
data aggregation simultaneously.
Let (G,·) be a mathematical group which is generated
by an element g ∈ G of ﬁnite order. Given a public key gs,
where s is secret, an ElGamal encryption E(m) of a message
m consists of a pair (gr, grs·gm), where r is chosen randomly
by the machine performing the encryption. A crucial prop-
erty of ElGamal encryption is that it is homomorphic: given
two encryptions
E(m1) = (gr1 , gr1s · gm1 )
E(m2) = (gr2 , gr2s · gm2 )
of m1 and m2 respectively, the encryption
E(m1 + m2) = (gr1+r2 , g(r1+r2)s · gm1+m2 )
of m1 + m2 can be computed by multiplying the compo-
nents of E(m1) and E(m2), without having to perform any
decryption. If one imagines that m1 and m2 represent vote
tallies, then the homomorphic property means that anyone
can add up encrypted votes, but only those who know the
secret key can decrypt the tally.
We now describe the procedure for performing parame-
ter aggregation within an FTN request. In order to avoid
concentrating the secret key in the hands of one party, we
mutate the secret key at each step of the random walk, as
described below. We assume that the group G and the gen-
erator g are global constants which are built into the FTN
client program.
5.1 Initialization phase
• The troubleshooter picks a pair of integers r0, s0 at
random and computes E(m) = (gr0 , gr0s0 · gm), where
m is the troubleshooter’s value for the entry, either 0
or 1.
• The troubleshooter stores the secret key s0, and for-
wards the encrypted value E(m) and the public key
gs0 to an available friend.
5.2 Random walk phase
• Assume that the i-th node on the request path re-
ceives a public key of the form gs0+s1+···+si−1 and an
encryption E(m) = (gr, gr(s0+s1+···+si−1) · gm) of m,
where m represents the number of votes for 1 which
have been accumulated so far in the random walk. For
convenience, write s for s0 + s1 + ··· + si−1.
• The node picks a new secret key si at random, and
computes the values
gs+si = gs · gsi
gr(s+si) · gm = (grs · gm) · grsi
The quantity E0(m) = (gr, gr(s+si) · gm) is now a valid
encryption of m under the new public key gs+si .
• The friend replaces the old public key gs with the new
public key gs+si , and replaces the old encrypted value
E(m) with the new encrypted value E0(m). Note that
E(m) and E0(m) both represent encryptions of the
same value, but under diﬀerent public keys.
• If the friend chooses to become a helper, then he forms
an encrypted message E0(mi) = (gri , gri(s+si) · gmi )
under the new public key where mi is his own value
for the entry and ri is chosen randomly, and uses the
homomorphic property to compute the encrypted tally
E0(m + mi) = (gr+ri , g(r+ri)(s+si) · gm+mi ).
• The new public key and the new encrypted tally are
forwarded to the next node. The secret key si is stored
for use during decryption.
5.3 Decryption phase
• The last hop has a public key of the form gs0+···+st
and an encrypted value E(m) = (gr, gr(s0+···+st) · gm)
representing the ﬁnal tally of the number of votes for
1. Since he owns the secret key st, he can compute
gs0+···+st−1 = (gs0+···+st )/gst
gr(s0+···+st−1) · gm =
(gr(s0+···+st) · gm)
grst
Note that (gr, gr(s0+···+st−1) · gm) is a valid encryption
of m under the public key gs0+···+st−1 .
• The last hop sends the encrypted value
(gr, gr(s0+···+st−1) · gm) to the previous hop.
• Proceeding inductively, the i-th node possesses a pub-
lic key of the form gs0+···+si and receives an encrypted
value E(m) = (gr, gr(s0+···+si) · gm), and sends the en-
crypted value (gr, gr(s0+···+si−1) · gm) to the previous
hop.
• The troubleshooter receives (gr, grs0·gm) from the ﬁrst
node, and recovers
gm = (grs0 · gm)/grs0
using the stored value of s0.
5.4 Tallying phase
• Since the tally m is guaranteed to be less than the
number of participants t in the FTN request (typi-
cally, under 256), the troubleshooter can ﬁnd m by
computing g0, g1, . . . , gt and stopping at the ﬁrst one
of these which matches gm.
√
in O(
te | j = 0, 1, . . . ,d√
as baby-step-giant-step:
• For very large values of t, the value of m can be found
t) time using the time-space tradeoﬀ known
form a table of values T =
{gjd√
te}, and compute gm/gi for
i = 0, 1, . . . ,d√
te, stopping at the ﬁrst value of i for
which gm/gi = gjd√
te appears in T . The value of m
will be i + jd√
te.
Readers who are familiar with the framework of [9] will
recognize the above scheme as an additive (t, t) threshold de-
cryption scheme where each FTN node is an election author-
ity. The main diﬀerence here is that we accumulate shares of
71the secret key dynamically during the random walk phase in-
stead of instantiating secret key shares statically during the
initialization phase. In principle, more general (t, n) thresh-
old decryption schemes such as [21] and [24] could provide
greater robustness against non-cooperative nodes, but this
does not help here since random walk path is historyless
and the return packet already needs the cooperation of ev-
ery FTN node in order to make its way back to the trou-
bleshooter. This reliance on honest behavior means that
the encryption scheme given here does not protect a user’s
privacy against active attacks such as the troubleshooter at-
tack. Instead, the purpose of the encryption is to protect
users from passive attacks where we assume the attackers
are curious friends who log and share whatever data they
acquire in the course of responding to a legitimate request,
but do not alter results or fabricate false data in any way.
In the passive attack model, [9, Theorem 2] combined with
the Diﬃe-Hellman assumption shows that no coalition can
gain any information about individual votes except for that
which is implied by the votes which are cast by the coalition
and the ﬁnal tally.
Another advantage of using homomorphic encryption is
that we can require the participants to give zero knowledge
proofs of data validity, in order to show that all protocol op-
erations are legitimate and that they are not manipulating
the tallies in any way. Since zero knowledge proofs inter-
act with the protocol elements described in the next few
sections, we defer discussion of the topic to Section 8.
6. CLUSTERING
In addition to protecting users against gossip attacks, the
cluster-based secure multi-party sum protocol of [15] pro-
vides some protection against troubleshooter attacks by lim-
iting the extent to which any single machine’s information
can be isolated. As we will see in this section, it is pos-
sible to combine the clustering enhancement together with
encrypted vote tallying without making any major changes
to either scheme.
The clustering procedure requires four steps:
1. Random share generation and distribution: Each clus-
ter member generates G− 1 random shares for its con-
tribution vector where G is the cluster size, and dis-
tributes each share to a distinct cluster member. The
shares are signed with the sender’s public key. Note
that these shares do not need to be encrypted, since
no proper subset of the shares reveals any information
about the value of the vector.
2. Cluster exit election: This step proceeds unchanged,
except that in addition to selecting a cluster exit, a
number of keyholders are also selected (typically, one
keyholder per cluster will suﬃce). The cluster entrance
broadcasts the ﬁrst component gr of the encrypted
message to each keyholder. Each keyholder in turn
generates a secret key si as in the basic aggregation
protocol, and unicasts the quantities gsi and grsi to
the cluster entrance. The cluster entrance then cal-
culates the new public key using the values gsi , and
broadcasts the new public key gs+si to the cluster,
where gs is the old public key it received from the pre-
vious hop.
3. Unicast subtotal to the cluster exit: Each cluster mem-
ber sums up all the shares it has received, encrypts
this sum with the new public key, and unicasts its en-
crypted subtotal to the cluster exit. In addition, the
cluster entrance modiﬁes the old encrypted total to
use the new public key, and adds the old total into
his subtotal using the homomorphic property before
sending the combined total to the cluster exit.
4. Exiting the cluster: The cluster exit uses the homo-
morphic property of the encryption scheme to sum up
the received subtotals from all participants, and then
sends this encrypted total along with the new pub-
lic key to the next recipient. All other aspects of the
protocol remain unchanged.
On the return trip, the encrypted result is relayed to each
keyholder and decrypted in the same manner as in Section 5.
7. DEALING WITH UNKNOWN
CARDINALITIES
We now consider the case where the set of possible val-
ues for the entry is unknown. As in [15], this problem can
be solved by using a hash function h to map the values
of the entry into a small numerical range 1, . . . , C. The
FTN nodes will then maintain the number of entry values
(m1, m2, . . . , mC ) that hash to each of the C values in the
troubleshooting request. In other words, the voting scheme
must maintain a vector of tallies instead of a single tally.
There are two ways that this can be achieved:
1. Pick a predetermined list of generators g1, g2, . . . , gC ,
and encode a vector m = (m1, . . . , mC ) as
E(m) = (gr, grs · CY
gmi
i
).
i=1
2. Encrypt each value mi separately, and transmit a list
of encryptions (E(m1), . . . , E(mC )) instead of a single
encryption.
QC
Option 1 increases the complexity of the tallying phase of
the protocol — instead of recovering a single value m given
gm, the troubleshooter now has to recover an entire vector
i=1 gmi
.
m = (m1, . . . , mC ) given only the single value
Assuming each coordinate mi has maximum size t, the re-
covery of m will take O(tC ) time using the naive brute-
force search method, or O(tC/2) if the baby-step-giant-step
method of Section 5 is used. For this reason, Option 1 can
only accommodate values of C up to about C = 4 before
the computational overheads become prohibitive.
i
Option 2 is less computationally taxing because the com-
putational overhead increases only linearly in C instead of
exponentially. However, the size of each packet also in-
creases by a factor of C under Option 2. Since we want to
keep bandwidth utilization to a minimum, we use a hybrid
scheme wherein we transmit a list of encryptions of length
C2 as in Option 2, but each element of that list in turn
encodes a short vector of length C1 as in Option 1. Even
a modest value of C1 such as 3 will reduce the bandwidth
overhead by a factor of 3.
In [15] the authors propose using a range of 96 values per
entry partitioned into six independent hashes of 16 values
72Veriﬁer
Prover
Veriﬁer
Prover
(x, y) = (gsi , grsi )
w ∈ Z chosen randomly
(a, b) = (gw, grw)
z = w + csi
a,b−→
c←− c ∈ Z chosen randomly
z−→
gz ?= axc
grz ?= byc
ş
If M = 1
w, r1, d1 ∈ Z
x = gr
y = grs · 1