:::
[]{#LVM_overview.html#idm140426106000960
.indexterm}[]{#LVM_overview.html#idm140426105999520
.indexterm}[]{#LVM_overview.html#idm140426105998080 .indexterm}
::: para
集群的逻辑卷管理器（CLVM）是 LVM
的一组集群扩展。这些扩展允许计算机集群使用 LVM 管理共享存储（例如：在
SAN 中）。CLVM 是弹性存储附加组件的一部分。
:::
::: para
是否应该使用 CLVM 取决于系统需要：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    如果系统中只有一个节点需要访问配置为逻辑卷的存储，则可以使用没有
    CLVM 扩展的
    LVM，同时那个节点创建的逻辑卷对那个节点来说均为本地卷。另外，如果要为只有访问该存储的单一节点永远处于活跃状态的故障转移使用集群的系统，也可以使用没有
    CLVM 扩展的 LVM。在不需要 CLVM 扩展的集群中配置逻辑卷时，可使用
    `LVM`{.literal}
    高可用资源代理配置系统。有关在集群中配置资源的详情，请查看*《高可用附加组件参考》。*
    :::
-   ::: para
    如果集群中有一个以上节点需要访问由活跃节点共享的存储，则必须使用
    CLVM。CLVM
    可允许用户在共享的存储中配置逻辑卷，方法是在配置逻辑卷时锁定对物理存储的访问。LVM
    使用集群的锁定服务管理共享存储。在需要 CLVM
    扩展的集群中配置逻辑卷时，可使用 `clvm`{.literal}
    资源代理配置您的系统。有关在集群中配置资源的详情，请查看*《高可用附加组件参考》。*
    :::
:::
[]{#LVM_overview.html#idm140426152526320 .indexterm}
::: para
要使用 CLVM，则必须让 High Availability Add-On 和 Resilient Storage
Add-On 软件处于运行状态，包括 `clvmd`{.command}
守护进程。`clvmd`{.command} 守护进程是 LVM
的主要集群扩展。`clvmd`{.command}
守护进程在每台集群计算机中运行，并在集群中分布 LVM
元数据更新，为每台集群计算机提供该逻辑卷的相同视图。
:::
::: para
[图 1.2 "CLVM 概述"](#LVM_overview.html#clvm_in_cluster){.xref}
演示集群中的 CLVM 概述。
:::
::: figure
[⁠]{#LVM_overview.html#clvm_in_cluster}
::: figure-contents
::: mediaobject
![CLVM 概述](images/overview/clvmoverview.png)
:::
:::
**图 1.2. CLVM 概述**
:::
::: para
在 Red Hat Enterprise Linux 7 中是通过 Pacemaker 管理集群。只有与
Pacemaker 集群联合使用，且必须将其配置为集群资源时方支持集群的 LVM
逻辑卷。有关在集群中配额配置 LVM 卷的详情，请查看 [第 3.1 节
"在集群中创建 LVM 卷"](#LVM_administration.html#cluster_setup){.xref}。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_overview.html#doc_organization}1.5. 文档概述 {.title}
:::
::: para
本文档的剩余部分包括以下各章：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [第 2 章 *LVM 组件*](#LVM_components.html){.xref} 论述组成 LVM
    逻辑卷的内容。
    :::
-   ::: para
    [第 3 章 *LVM 管理概述*](#LVM_administration.html){.xref}
    提供执行配置 LVM 逻辑卷的基本步骤概述。
    :::
-   ::: para
    [第 4 章 *使用 CLI 命令管理 LVM*](#LVM_CLI.html){.xref} 总结可与 CLI
    命令合用，创建和维护逻辑卷的独立管理任务。
    :::
-   ::: para
    [第 5 章 *LVM 配置示例*](#LVM_examples.html){.xref} 提供各种 LVM
    配置示例。
    :::
-   ::: para
    [第 6 章 *LVM 故障排除*](#troubleshooting.html){.xref} 提供解决各种
    LVM 问题的说明。
    :::
-   ::: para
    [附录 A, *设备映射器（Device Mapper）*](#device_mapper.html){.xref}
    论述 LVM 用来映射逻辑卷和物理卷的 Device Mapper。
    :::
-   ::: para
    [附录 B, *LVM 配置文件*](#config_file.html){.xref} 论述 LVM
    配置文件。
    :::
-   ::: para
    [附录 C, *LVM 对象标签*](#lvm_tags.html){.xref} 论述 LVM
    对象标签和主机标签。
    :::
-   ::: para
    [附录 D, *LVM 卷组元数据*](#lvm_metadata.html){.xref} 论述了 LVM
    卷组元数据，其中包括复制 LVM 卷组元数据的示例。
    :::
:::
:::
:::
[]{#LVM_components.html}
::: chapter
::: titlepage
# [⁠]{#LVM_components.html#LVM_components}第 2 章 LVM 组件 {.title}
:::
[]{#LVM_components.html#idm140426149592416 .indexterm}
::: para
本章论述了 LVM 逻辑卷组件。
:::
::: section
::: titlepage
# [⁠]{#LVM_components.html#physical_volumes}2.1. 物理卷 {.title}
:::
[]{#LVM_components.html#idm140426178166640
.indexterm}[]{#LVM_components.html#idm140426159494416
.indexterm}[]{#LVM_components.html#idm140426158893856 .indexterm}
::: para
LVM 逻辑卷的底层物理存储单元是一个块设备，比如一个分区或整个磁盘。要在
LVM
逻辑卷中使用该设备，则必须将该设备初始化为物理卷（PV）。将块设备初始化为物理卷会在该设备的起始扇区附近放置一个标签。
:::
::: para
默认情况下，LVM 标签是放在第二个 512
字节扇区。可以将标签放在最开始的四个扇区之一来覆盖这个默认设置。这样就允许在必要时
LVM 卷可与其他使用这些扇区的用户共同存在。
:::
::: para
LVM
标签可为物理设备提供正确的识别和设备排序，因为在引导系统时，设备可以任何顺序出现。LVM
标签在重新引导和整个集群中保持不变。
:::
::: para
LVM 标签可将该设备识别为 LVM
物理卷。它包含物理卷的随机唯一识别符（UUID）。它还以字节为单位记录块设备的大小，并记录
LVM 元数据在设备中的存储位置。
:::
::: para
LVM 元数据包含系统中 LVM
卷组的配置详情。默认情况下，卷组中的每个物理卷中都会在其元数据区域保留一个一样的元数据副本。LVM
元数据很小，并以 ASCII 格式保存。
:::
::: para
现在，LVM 允许在每个物理卷中保存 0、1 或者 2
个元数据副本。默认是保存一个副本。一旦设置了在物理卷中保存的元数据备份数目之后就无法再更改。第一个副本保存在设备的起始位置，紧挨着标签。如果有第二个副本，会将其放在设备的末尾。如果不小心写入了不同于想要写入的磁盘，从而覆盖了磁盘的起始部分，那么可以使用在设备末尾的元数据第二个副本恢复元数据。
:::
::: para
有关 LVM 元数据和更改元数据参数的详情请参考 [附录 D, *LVM
卷组元数据*](#lvm_metadata.html){.xref}。
:::
::: section
::: titlepage
## [⁠]{#LVM_components.html#pv_illustration}2.1.1. LVM 物理卷布局 {.title}
:::
[]{#LVM_components.html#idm140426157431888
.indexterm}[]{#LVM_components.html#idm140426160673664 .indexterm}
::: para
[图 2.1
"物理卷布局"](#LVM_components.html#physical_volume_layout){.xref} 显示
LVM 物理卷的布局。LVM
标签在第二个扇区，接下来是元数据区，之后是设备的可用空间。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在 Linux 内核（及整个文档）中，每个扇区的大小为 512K。
:::
:::
:::
::: figure
[⁠]{#LVM_components.html#physical_volume_layout}
::: figure-contents
::: mediaobject
![物理卷布局](images/components/physvol.png)
:::
:::
**图 2.1. 物理卷布局**
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_components.html#multiple_partitions}2.1.2. 一个磁盘中有多个分区 {.title}
:::
[]{#LVM_components.html#idm140426152535312 .indexterm}
::: para
LVM 允许在磁盘分区以外创建物理卷。Red Hat
通常建议创建可覆盖整张磁盘的单一分区，并将其标记为 LVM
物理卷，理由如下：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    方便管理
    :::
    ::: para
    如果每个真实磁盘只出现一次，那么在系统中追踪硬件就比较容易，这在磁盘失败时尤为突出。另外，单一磁盘中有多个物理卷可导致内核在引导时发出未知分区类型警告。
    :::
-   ::: para
    条带化性能
    :::
    ::: para
    LVM
    无法知道两个物理卷是否在同一物理磁盘中。如果要在两个物理卷处于同一物理磁盘中时创建条带逻辑卷，则条带可能位于同一磁盘的不同分区中。这样会降低性能而不是提升性能。
    :::
:::
::: para
虽然不建议这样做，但可能会在某种情况下需要将磁盘分为不同的 LVM
物理卷。例如：如果一个系统中有几张磁盘，在将现有系统迁移至 LVM
卷时，可能需要在分区间移动数据。另外，如果有一个非常大的磁盘，并想要有一个以上的卷组以便管理，则需要将该磁盘分区。如果磁盘中有一个以上的分区，同时那些分区处于同一卷组中，则在创建条带卷指定逻辑卷中所包含分区时要特别小心。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_components.html#volume_group_overview}2.2. 卷组 {.title}
:::
[]{#LVM_components.html#idm140426149196288
.indexterm}[]{#LVM_components.html#idm140426152150864 .indexterm}
::: para
物理卷合并为卷组（VG）。这样就创建了磁盘空间池，并可使用它分配逻辑卷。
:::
[]{#LVM_components.html#idm140426152148848 .indexterm}
::: para
在卷组中，可用来分配的磁盘空间被分为固定大小的单元，我们称之为扩展。扩展是可进行分配的最小空间单元。在物理卷中，扩展指的是物理扩展。
:::
::: para
逻辑卷会被分配成与物理卷扩展相同大小的逻辑扩展。因此卷组中逻辑卷的扩展大小都是一样的。卷组将逻辑扩展与物理扩展匹配。
:::
:::
::: section
::: titlepage
# [⁠]{#LVM_components.html#lv_overview}2.3. LVM 逻辑卷 {.title}
:::
[]{#LVM_components.html#idm140426146004688 .indexterm}
::: para
在 LVM 中是将卷组分为逻辑卷。以下小节论述了逻辑卷的不同类型。
:::
::: section
::: titlepage
## [⁠]{#LVM_components.html#linear_volumes}2.3.1. 线性卷 {.title}
:::
[]{#LVM_components.html#idm140426146001552 .indexterm}
::: para
线性卷是将一个或者多个物理卷整合为一个逻辑卷。例如：如果有两个 60GB
的磁盘，则可以创建一个 120GB 的逻辑卷。其物理存储是连续的。
:::
::: para
创建线性卷可按顺序为逻辑卷的区域分配物理扩展范围。例如：如 [图 2.2
"扩展映射"](#LVM_components.html#extent_mapping){.xref} 所述，逻辑扩展 1
到 99 可与一个物理卷对映，逻辑扩展 99 到 198
可与第二个物理卷对映。从应用程序的角度来看，就是有一个大小为 198
个扩展的设备。
:::
::: figure
[⁠]{#LVM_components.html#extent_mapping}
::: figure-contents
::: mediaobject
![扩展映射](images/components/extent-map.png)
:::
:::
**图 2.2. 扩展映射**
:::
::: para
组成逻辑卷的物理卷不一定要一样大小。[图 2.3
"物理卷大小不同的线性卷"](#LVM_components.html#uneven_pvs){.xref}