99.4
81.0
60.8
10.2
1.7
3.9
2.9
1.4
9.8
9.8
8.8
2.0
0.5
2.9
34.4
3.0
10.4
16.0
10.2
23.5
0.3
0.7
7.5
0.8
6.7
4.9
4.1
16.4
0.0
0.0
5.0
0.4
0.1
0.0
0.0
6.8
The overall fuzzing performance can be seen in Figure 4.
The bars represent the average number of executions per-
formed per second. The usual performance impact for KAFL
and REDQUEEN compared to LAF-INTEL and AFLFAST typ-
ically in the range of 25-50 %. This is due to the fact that
KAFL does not use the fast compiler-based instrumentation
and is working on binary code. Nonetheless, to the best of our
knowledge, REDQUEEN is by far the fastest binary-only fuzzer.
13
00:0000:1500:3000:4501:000200400600800ChecksumsRemovedKafl+dictKaflRedqueen00:0000:1500:3000:4501:00UnmodiﬁedTime(hh:mm)#BBsfoundarcxxﬁltnm-newreadelfsizestringsobjdumpas-new0.01000.02000.03000.04000.0executions/sRedqueenKafllaf-intelAFLFastTABLE VI: Percentage of the paths found by different encoding schemes.
VI. LIMITATIONS
Encoding
Zero Ext
Sign Ext
Plain
Mem
C-Str
ASCII
Plain
38.40 %
22.65 %
4.42 %
5.16 %
2.42 %
1.21 %
Reverse
6.82 %
6.61 %
11.64 %
-
-
-
Total
45.22 %
29.27 %
16.06 %
5.16 %
2.42 %
1.21 %
In one cases, REDQUEEN performs slightly better than KAFL.
While this result is counter-intuitive (after all, we perform
additional work), there is a good explanation for this behavior:
On real-world targets, the number of executions achieved per
second is heavily dependent on the inputs in the queue. If the
queue is ﬁlled with slow inputs, the performance drops. When
KAFL is unable to overcome a roadblock, the only new inputs
are inputs that perform more loop iterations. As it can be seen
in Figure 4, the impact of the REDQUEEN extension on the
number of executions per second is rather low and sometimes
it even increases the number of executions performed. Even
though the breakpoint based tracing is slow (often by a factor
of 50x or more), it hardly inﬂuences the fuzzing performance
as the REDQUEEN phase is only triggered once per input in
the queue. The measurements for the effectiveness are show in
Table V. All techniques are used by REDQUEEN on each input,
and the number of of new inputs found by each technique
are noted. It can be seen that input-to-state correspondence
based mutations are often ﬁnding as many, or more, new
inputs than the other phases while using signiﬁcantly less
time. This shows that our techniques are useful far beyond
the archetypical roadblocks: They help ﬁnding a signiﬁcant
number of paths faster than other mutation strategies. Lastly,
we evaluated the prevalence of different encoding schemes by
counting the percentage of paths found using each encoding
scheme. The results are shown in Table VI. It can be seen
that nearly all the improvements that we made are due to
what we consider one-to-one correspondences. Due to the last
two experiments, we consider input-to-state-based mutations a
highly general, effective, and efﬁcient scheme that can be used
to signiﬁcantly improve the performance of fuzzers.
G. High-Level Summary
After showing that we are able to substantially increase
the coverage produced on three large test corpora and to
ﬁnd novel bugs in both kernel- and user-space software, we
conclude that RQ 1. holds and input-to-state correspondence
based techniques are useful for fuzzing purposes. After com-
paring the results of state-of-the-art tools on the same test
to answer RQ 2.: we are able to
sets, we feel conﬁdent
outperform current symbolic execution and taint tracking based
approaches, represented by VUZZER, ANGORA, T-FUZZ and
KLEE, when measuring the ability to uncover new behaviour
and bugs. Lastly, we demonstrate that—even in a binary-only
scenario—our input-to-state correspondence based techniques
are powerful enough to compete with other approaches, even
if hash checks are removed for the competing tools and
they are provided with a proper dictionary. This answers
RQ 3. In summary, we feel conﬁdent that our input-to-state
correspondence method signiﬁcantly improves coverage-based
feedback fuzzing.
Our approach is applicable without access to the source
code and without knowledge of the environment. Yet, it out-
performs state-of-the-art fuzzers even when they have access to
the source code. However, this does not mean that more com-
plex approaches are useless. Instead, we strongly believe these
approaches are useful in certain cases where our approach does
not offer any advantages. We encountered some examples for
such cases while manually inspecting the different targets dis-
cussed in this paper: the PNG ﬁle format, contains compressed
data which the decoder decompresses during execution. In
some programs of the binutils test set, a string from the
input is used to index a hash map, returning an integer that is
used thereafter. Lastly, the base64 utility from the LAVA-M
data set applies base64 decoding. Our current implementation
does not provide an encoding scheme for base64. In all of
these cases the input does not correspond to the state after the
transformation took place. Therefore our approach is unable to
efﬁciently solve constraints that occur afterwards. We believe
that the ﬁrst two cases (compression and hash maps) are also
hard for concolic execution based approaches. Most concolic
engines cannot efﬁciently handle cases where one has to use
different paths to change values. In the case of base64, we
could easily add another encoder. However, as our evaluation
shows, these cases are rare. Consequently, tools that are able
to solve these cases struggle with more common problems,
such as path explosion or poor performance on complex, real-
world targets. We believe that it would be beneﬁcial to use our
lightweight approach as a ﬁrst step where possible, and than
solve the remaining challenges using complex approaches.
VII. CONCLUSION
In this paper, we presented and evaluated methods based
on input-to-state correspondence to improve fuzzing. We have
shown that it is possible to signiﬁcantly improve the coverage
in binary-only targets by solving magic-bytes comparisons and
checksum checks. While our approach is not as grounded in
formalism as other approaches based on symbolic execution
or taint
is very much in the
spirit of AFL: it is fast, lightweight, and—most importantly—
robust. Even if some parts of the program are very hard to
analyze, our approach remains applicable and effective in other
parts of the target. We believe that our work shows that we
can signiﬁcantly improve the performance of fuzzers without
falling back to fragile and complex methods.
tracking, we believe that
it
ACKNOWLEDGMENTS
This work was supported by Intel as part of the Intel
Collaborative Research Institute “Collaborative Autonomous
& Resilient Systems” (ICRI-CARS). The research leading
to these results has received funding from the European
Unions Horizon 2020 Research and Innovation Programme
under Grant Agreement No. 786669. The content of this
document reﬂect the views only of their authors. The European
Commission/Research Executive Agency are not responsible
for any use that may be made of the information it contains.
Finally, we would like to thank Ali Abbasi, Joel Frank, Emre
G¨uler and Christine Utz for their valuable feedback.
14
REFERENCES
[1] Announcing OSS-Fuzz: Continuous
software.
announcing-oss-fuzz-continuous-fuzzing.html.
source
https://testing.googleblog.com/2016/12/
fuzzing
open
for
[26]
[2] Circumventing fuzzing roadblocks with compiler
transformations.
https://lafintel.wordpress.com/. Accessed: 2018-08-07.
[3] Darpa challenge binaries on linux, os x, and windows.
https:
//github.com/trailofbits/cb-multios. Accessed: 2018-08-07.
[4] Peach. http://www.peachfuzzer.com/. Accessed: 2018-08-07.
[5] Project Triforce: Run AFL on Everything! https://www.nccgroup.
trust/us/about-us/newsroom-and-events/blog/2016/june/
project-triforce-run-afl-on-everything/.
[6] Security oriented fuzzer with powerful analysis options. https://
github.com/google/honggfuzz. Accessed: 2018-08-07.
[7] Andrea Arcuri and Lionel Briand. A hitchhiker’s guide to statistical tests
for assessing randomized algorithms in software engineering. Software
Testing, Veriﬁcation and Reliability, 24(3):219–250, 2014.
[8] Osbert Bastani, Rahul Sharma, Alex Aiken, and Percy Liang. Syn-
thesizing program input grammars. In ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI), 2017.
[9] Fabrice Bellard. Qemu, a fast and portable dynamic translator.
In
USENIX Annual Technical Conference, FREENIX Track, 2005.
[10] Marcel B¨ohme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-
In ACM Conference on
based greybox fuzzing as markov chain.
Computer and Communications Security (CCS), 2016.
[11] Derek Bruening, Evelyn Duesterwald, and Saman Amarasinghe. Design
and implementation of a dynamic optimization framework for windows.
In ACM Workshop on Feedback-Directed and Dynamic Optimization,
2001.
[12] Cristian Cadar, Daniel Dunbar, and Dawson R Engler. Klee: Unassisted
and automatic generation of high-coverage tests for complex systems
programs. In Symposium on Operating Systems Design and Implemen-
tation (OSDI), 2008.
[13] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David
Brumley. Unleashing Mayhem on Binary Code. In IEEE Symposium
on Security and Privacy, 2012.
[14] Sang Kil Cha, Maverick Woo, and David Brumley. Program-adaptive
mutational fuzzing. In IEEE Symposium on Security and Privacy, 2015.
[15] Buddhika Chamith, Bo Joel Svensson, Luke Dalessandro, and Ryan R.
Newton. Instruction punning: Lightweight instrumentation for x86-64.
In ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), 2017.
[16] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by principled
search. In IEEE Symposium on Security and Privacy, 2018.
[17] Brendan Dolan, Patrick Hulin, Engin Kirda, Tim Leek, Andrea Mam-
bretti, William Robertson, Frederick Ulrich, and Ryan Whelan. LAVA:
In IEEE Symposium on
large-scale automated vulnerability addition.
Security and Privacy, 2016.
[18] Will Drewry and Tavis Ormandy. Flayer: exposing application internals.
In USENIX Workshop on Offensive Technologies (WOOT), 2007.
[19] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu
In IEEE
Pei, and Zuoning Chen. Collaﬂ: Path sensitive fuzzing.
Symposium on Security and Privacy, 2018.
[20] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed
whitebox fuzzing. In International Conference on Software Engineering
(ICSE), 2009.
[21] Patrice Godefroid, Adam Kiezun, and Michael Y Levin. Grammar-
based whitebox fuzzing. In ACM SIGPLAN Conference on Program-
ming Language Design and Implementation (PLDI), 2008.
[22] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed
In ACM SIGPLAN Conference on Pro-
Automated Random Testing.
gramming Language Design and Implementation (PLDI), 2005.
[23] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. Automated
In Symposium on Network and Distributed
whitebox fuzz testing.
System Security (NDSS), 2008.
[24] Patrice Godefroid, Hila Peleg, and Rishabh Singh. Learn&fuzz: Ma-
chine learning for input fuzzing. Technical report, January 2017.
15
[25] Peter
Shin
Goodman.
GRR: Make
Fast
https://blog.trailofbits.com/2016/11/02/
Again.
shin-grr-make-fuzzing-fast-again/.
Istvan Haller, Asia Slowinska, Matthias Neugschwandtner, and Herbert
Bos. Dowsing for overﬂows: A guided fuzzer to ﬁnd buffer boundary
violations. In USENIX Security Symposium, 2013.
Fuzzing
[27] HyungSeok Han and Sang Kil Cha. Imf: Inferred model-based fuzzer.
In ACM Conference on Computer and Communications Security (CCS),
2017.
[28] Wookhyun Han, Byunggill Joe, Byoungyoung Lee, Chengyu Song,
and Insik Shin. Enhancing memory error detection for large-scale
applications and fuzz testing. In Symposium on Network and Distributed
System Security (NDSS), 2018.
[29] Aki Helin. A general-purpose fuzzer. https://gitlab.com/akihe/
radamsa. Accessed: 2018-08-07.
[30] Chin-Chia Hsu, Che-Yu Wu, Hsu-Chun Hsiao, and Shih-Kun Huang.
Instrim: Lightweight instrumentation for coverage-guided fuzzing.
In
Symposium on Network and Distributed System Security (NDSS), Work-
shop on Binary Analysis Research, 2018.
[31] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin,
Yang Liu, and Alwen Tiu. Steelix: Program-state Based Binary Fuzzing.
In Joint Meeting on Foundations of Software Engineering, 2017.
[32] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser,
Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazel-
wood. Pin: building customized program analysis tools with dynamic
In ACM SIGPLAN Conference on Programming
instrumentation.
Language Design and Implementation (PLDI), 2005.
[33] David Molnar, Xue Cong Li, and David Wagner. Dynamic Test
In
Generation to Find Integer Bugs in x86 Binary Linux Programs.
USENIX Security Symposium, 2009.
[34] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-fuzz: fuzzing by
program transformation. In IEEE Symposium on Security and Privacy,
2018.
[35] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano
Giuffrida, and Herbert Bos. VUzzer: Application-aware Evolutionary
In Symposium on Network and Distributed System Security
Fuzzing.
(NDSS), February 2017.
[36] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan M
Foote, David Warren, Gustavo Grieco, and David Brumley. Optimizing
seed selection for fuzzing. In USENIX Security Symposium, 2014.
[37] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian
Schinzel, and Thorsten Holz. kaﬂ: Hardware-assisted feedback fuzzing
for os kernels. In USENIX Security Symposium, 2017.
[38] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu
Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and
Giovanni Vigna. Driller: Augmenting fuzzing through selective sym-
In Symposium on Network and Distributed System
bolic execution.
Security (NDSS), 2016.
[39] Dmitry Vyukov.
gofuzz.
https://go-talks.appspot.com/
github.com/dvyukov/go-fuzz/slides/go-fuzz.slide#17.
[40] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. TaintScope: A
checksum-aware directed fuzzing tool for automatic software vulner-
ability detection. In IEEE Symposium on Security and Privacy, 2010.
[41] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and David Brumley.
In ACM Conference on
Scheduling black-box mutational fuzzing.
Computer and Communications Security (CCS), 2013.
[42] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo Kim. Design-
ing new operating primitives to improve fuzzing performance. In ACM
Conference on Computer and Communications Security (CCS), 2017.
aﬂ-fuzz: making up grammar with a dic-
[43] Michał Zalewski.
https://lcamtuf.blogspot.de/2015/01/
tionary in hand.
afl-fuzz-making-up-grammar-with.html. Accessed:2018-08-07.
[44] Michał Zalewski. american fuzzy lop. http://lcamtuf.coredump.
cx/afl/. Accessed: 2018-08-07.