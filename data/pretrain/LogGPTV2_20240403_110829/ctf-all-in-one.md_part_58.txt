602
4.1 Linux 内核调试
#include 
#include 
#include 
static int hello_init(void)
{
printk(KERN_ALERT "Hello module!\n");
return 0;
}
static void hello_exit(void)
{
printk(KERN_ALERT "Goodbye module!\n");
}
module_init(hello_init);
module_exit(hello_exit);
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("A simple module.");
Makefile 如下：
BUILDPATH := ~/kernelbuild/linux-4.16.3/
obj-m += hello.o
all:
make -C $(BUILDPATH) M=$(PWD) modules
clean:
make -C $(BUILDPATH) M=$(PWD) clean
编译模块并将 .ko 文件复制到 initramfs，然后重新打包：
603
4.1 Linux 内核调试
$ make && cp hello.ko ~/kernelbuild/busybox-1.28.3/initramfs
$ cd ~/kernelbuild/busybox-1.28.3/initramfs
$ find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../
initramfs.cpio.gz
最后重新启动 QEMU 即可：
# insmod hello.ko
[ 7.887392] hello: loading out-of-tree module taints kernel.
[ 7.892630] Hello module!
# lsmod
hello 16384 0 - Live 0xffffffffa0000000 (O)
# rmmod hello.ko
[ 24.523830] Goodbye module!
三个命令分别用于载入、列出和卸载模块。
再回到 gdb 中， add-symbol-file 添加模块的 .text 、 .data 和 .bss 段
的地址，这些地址在类似 /sys/kernel//sections 位置：
# cat /sys/module/hello/sections/.text
0x00000000fa16acc0
在这个例子中，只有 .text 段：
(gdb) add-symbol-file ~/kernelbuild/busybox-1.28.3/initramfs/hel
lo.ko 0x00000000fa16acc0
然后就可以对该模块进行调试了。
kdb
参考资料
KernelDebuggingTricks
604
4.1 Linux 内核调试
605
4.2 Linux 命令行技巧
4.2 Linux 命令行技巧
通配符
重定向输入字符
从可执行文件中提取 shellcode
查看进程虚拟地址空间
ASCII 表
nohup 和 &
cat -
通配符
* ：匹配任意字符
ls test*
? ：匹配任意单个字符
ls test?
[...] ：匹配括号内的任意单个字符
ls test[123]
[!...] ：匹配除括号内字符以外的单个字符
ls test[!123]
重定向输入字符
有时候我们需要在 shell 里输入键盘上没有对应的字符，如 0x1F ，就需要使用重
定向输入。下面是一个例子：
606
4.2 Linux 命令行技巧
#include
#include
void main() {
char data[8];
char str[8];
printf("请输入十六进制为 0x1f 的字符: ");
sprintf(str, "%c", 31);
scanf("%s", data);
if (!strcmp((const char *)data, (const char *)str)) {
printf("correct\n");
} else {
printf("wrong\n");
}
}
$ gcc test.c
$ ./a.out
请输入十六进制为 0x1f 的字符: 0x1f
wrong
$ echo -e "\x1f"
$ echo -e "\x1f" | ./a.out
请输入十六进制为 0x1f 的字符: correct
从可执行文件中提取 shellcode
for i in `objdump -d print_flag | tr '\t' ' ' | tr ' ' '\n' | eg
rep '^[0-9a-f]{2}$' ` ; do echo -n "\x$i" ; done
注意：在 objdump 中空字节可能会被删除。
查看进程虚拟地址空间
有时我们需要知道一个进程的虚拟地址空间是如何使用的，以确定栈是否是可执行
的。
607
4.2 Linux 命令行技巧
$ cat /proc//maps
下面我们分别来看看可执行栈和不可执行栈的不同：
$ cat hello.c
#include 
void main()
{
char buf[128];
scanf("hello, world: %s\n", buf);
}
$ gcc hello.c -o a.out1
$ ./a.out1 &
[1] 7403
$ cat /proc/7403/maps
555555554000-555555555000 r-xp 00000000 08:01 26389924
/home/firmy/a.out1
555555754000-555555755000 r--p 00000000 08:01 26389924
/home/firmy/a.out1
555555755000-555555756000 rw-p 00001000 08:01 26389924
/home/firmy/a.out1
555555756000-555555777000 rw-p 00000000 00:00 0
[heap]
7ffff7a33000-7ffff7bd0000 r-xp 00000000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7bd0000-7ffff7dcf000 ---p 0019d000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7dcf000-7ffff7dd3000 r--p 0019c000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7dd3000-7ffff7dd5000 rw-p 001a0000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7dd5000-7ffff7dd9000 rw-p 00000000 00:00 0
7ffff7dd9000-7ffff7dfc000 r-xp 00000000 08:01 21372338
/usr/lib/ld-2.25.so
7ffff7fbc000-7ffff7fbe000 rw-p 00000000 00:00 0
7ffff7ff8000-7ffff7ffa000 r--p 00000000 00:00 0
608
4.2 Linux 命令行技巧
[vvar]
7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0
[vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00023000 08:01 21372338
/usr/lib/ld-2.25.so
7ffff7ffd000-7ffff7ffe000 rw-p 00024000 08:01 21372338
/usr/lib/ld-2.25.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0
[stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0
[vsyscall]
[1]+ Stopped ./a.out1
$ gcc -z execstack hello.c -o a.out2
$ ./a.out2 &
[2] 7467
[firmy@manjaro ~]$ cat /proc/7467/maps
555555554000-555555555000 r-xp 00000000 08:01 26366643
/home/firmy/a.out2
555555754000-555555755000 r-xp 00000000 08:01 26366643
/home/firmy/a.out2
555555755000-555555756000 rwxp 00001000 08:01 26366643
/home/firmy/a.out2
555555756000-555555777000 rwxp 00000000 00:00 0
[heap]
7ffff7a33000-7ffff7bd0000 r-xp 00000000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7bd0000-7ffff7dcf000 ---p 0019d000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7dcf000-7ffff7dd3000 r-xp 0019c000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7dd3000-7ffff7dd5000 rwxp 001a0000 08:01 21372436
/usr/lib/libc-2.25.so
7ffff7dd5000-7ffff7dd9000 rwxp 00000000 00:00 0
7ffff7dd9000-7ffff7dfc000 r-xp 00000000 08:01 21372338
/usr/lib/ld-2.25.so
7ffff7fbc000-7ffff7fbe000 rwxp 00000000 00:00 0
609
4.2 Linux 命令行技巧
7ffff7ff8000-7ffff7ffa000 r--p 00000000 00:00 0
[vvar]
7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0
[vdso]
7ffff7ffc000-7ffff7ffd000 r-xp 00023000 08:01 21372338
/usr/lib/ld-2.25.so
7ffff7ffd000-7ffff7ffe000 rwxp 00024000 08:01 21372338
/usr/lib/ld-2.25.so
7ffff7ffe000-7ffff7fff000 rwxp 00000000 00:00 0
7ffffffde000-7ffffffff000 rwxp 00000000 00:00 0
[stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0
[vsyscall]
[2]+ Stopped ./a.out2
当使用 -z execstack 参数进行编译时，会关闭 Stack Protector 。我们可以
看到在 a.out1 中的 stack 是 rw 的，而 a.out2 中则是 rwx 的。
maps 文件有 6 列，分别为：
地址：库在进程里地址范围
权限：虚拟内存的权限，r=读，w=写,x=执行,s=共享,p=私有
偏移量：库在进程里地址偏移量
设备：映像文件的主设备号和次设备号，可以通过通过 cat
/proc/devices 查看设备号对应的设备名
节点：映像文件的节点号
路径: 映像文件的路径，经常同一个地址有两个地址范围，那是因为一段是
r-xp 为只读的代码段，一段是 rwxp 为可读写的数据段
除了 /proc//maps 之外，还有一些有用的设备和文件。
/proc/kcore 是 Linux 内核运行时的动态 core 文件。它是一个原始的内存
转储，以 ELF core 文件的形式呈现，可以使用 GDB 来调试和分析内核。
／boot/System.map 是一个特定内核的内核符号表。它是你当前运行的内核
的 System.map 的链接。
/proc/kallsyms 和 System.map 很类似，但它在 /proc 目录下，所以
是由内核维护的，并可以动态更新。
/proc/iomem 和 /proc//maps 类似，但它是用于系统内存的。如：
610
4.2 Linux 命令行技巧
# cat /proc/iomem | grep Kernel
01000000-01622d91 : Kernel code
01622d92-01b0ddff : Kernel data
01c56000-01d57fff : Kernel bss
ASCII 表
ASCII 表将键盘上的所有字符映射到固定的数字。有时候我们可能需要查看这张
表：
$ man ascii
Oct Dec Hex Char Oct Dec Hex
Char
────────────────────────────────────────────────────────────────
────────
000 0 00 NUL '\0' (null character) 100 64 40
@
001 1 01 SOH (start of heading) 101 65 41
A
002 2 02 STX (start of text) 102 66 42
B
003 3 03 ETX (end of text) 103 67 43
C
004 4 04 EOT (end of transmission) 104 68 44
D
005 5 05 ENQ (enquiry) 105 69 45
E
006 6 06 ACK (acknowledge) 106 70 46
F
007 7 07 BEL '\a' (bell) 107 71 47
G
010 8 08 BS '\b' (backspace) 110 72 48
H
011 9 09 HT '\t' (horizontal tab) 111 73 49
I
012 10 0A LF '\n' (new line) 112 74 4A
J
611
4.2 Linux 命令行技巧
013 11 0B VT '\v' (vertical tab) 113 75 4B
K
014 12 0C FF '\f' (form feed) 114 76 4C
L
015 13 0D CR '\r' (carriage ret) 115 77 4D
M
016 14 0E SO (shift out) 116 78 4E
N
017 15 0F SI (shift in) 117 79 4F
O
020 16 10 DLE (data link escape) 120 80 50
P
021 17 11 DC1 (device control 1) 121 81 51
Q
022 18 12 DC2 (device control 2) 122 82 52
R
023 19 13 DC3 (device control 3) 123 83 53
S
024 20 14 DC4 (device control 4) 124 84 54
T
025 21 15 NAK (negative ack.) 125 85 55
U
026 22 16 SYN (synchronous idle) 126 86 56
V
027 23 17 ETB (end of trans. blk) 127 87 57
W
030 24 18 CAN (cancel) 130 88 58
X
031 25 19 EM (end of medium) 131 89 59
Y
032 26 1A SUB (substitute) 132 90 5A
Z
033 27 1B ESC (escape) 133 91 5B
[
034 28 1C FS (file separator) 134 92 5C
\ '\\'
035 29 1D GS (group separator) 135 93 5D