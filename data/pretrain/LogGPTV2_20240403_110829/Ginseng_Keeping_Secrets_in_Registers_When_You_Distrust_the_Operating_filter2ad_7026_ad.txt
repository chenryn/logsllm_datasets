to the instruction when the exception occurs. When GService
is invoked through s_readV(), the service restores the saved
return address to return to the resume point of the sensitive
function ( 5 ).
2) Call site protection: Protecting sensitive data at a call
site is similar to using the secure stack on an exception. In
the call site protection, the Ginseng compiler does the most
of the job (III-C2) because the call site is known at compile
time. GService’s goal for the call site protection is to restore
sensitive data to the right call site, as instances of the same
function call can be recursive or concurrent.
The compiler-assigned call site identiﬁer helps GService
recognize which sensitive data belong to which call site, but it
is insufﬁcient because a call site called recursively or concur-
rently will have the same identiﬁer. If GService with no app
logic cannot distinguish those calls with the same identiﬁer, it
may restore wrong sensitive data after a call site. To support
recursive calls with thread-safety, the service employs two
techniques. It ﬁrst identiﬁes a call site by its identiﬁer and
stack pointer, which differs per thread. Second, GService uses
a LIFO-style storage to support recursive calls. As a result, it
restores the most recently saved sensitive registers ﬁrst when
recursive calls return with the same identiﬁer.
D. Control-ﬂow integrity (CFI)
Ginseng ensures CFI only when sensitive data are in reg-
isters, i.e., when calling a function with sensitive parameters,
8
returning a sensitive value, and restoring sensitive data from
the secure stack.
1) Function pointer and return: When a sensitive function
invokes another function through a function pointer and passes
sensitive data through parameters, the sensitive data in registers
for parameter passing are at risk. For example, in line 34 of
Figure 2, calling genCode() as a function pointer. Because
the address of a function is dynamically determined at runtime,
an attacker may tamper with the function pointer to access
sensitive data in registers. Similarly, when a function returns a
sensitive datum, an attacker may try to compromise the return
address. Direct function calls (not through function pointers)
are included in the code pages, e.g., line 27 in Figure 4; thus,
the code integrity of a sensitive function (IV-B) provides CFI
for them.
To provide the CFI with a function pointer, Ginseng treats
the pointer as sensitive and checks the integrity of the pointed
function. Within a sensitive function, the compiler promotes
a function pointer with sensitive parameters to a sensitive
variable. Once the callee’s address is loaded from memory
to a sensitive register, the address is no longer accessible to
the OS because it is a value in a sensitive register. When the
caller sends a request to GService to push sensitive registers
to the secure stack before a call site, the service checks the
callee’s integrity along with the call site protection (IV-C2).
The service moves sensitive data to registers for parameter
passing, only when the callee is sensitive and integral.
When a function returns a sensitive value to the caller,
s_exit() inserted by the compiler at the exit point (IV-A)
sends a request
to GService, which in turn checks the
returning-to function’s integrity.
Example: Figure 6 is disassembled code when compiling
Figure 2 after changing genCode of line 34 to a function
pointer. The hide/move encoding in x2 tells that register x14
is a function pointer. The forth argument of s_writeMoveV()
is 1 and indicates that the callee is pointed by a function
pointer. The service searches the very next branch instruction,
blr x14 in line 16, and checks whether the callee is a
sensitive function and integral at runtime.
2) Restoring sensitive data from the secure stack: GService
restores sensitive data from the secure stack after exception
handling and a call site, which can lead to leakage if the service
returns to a compromised function, not to an integral sensitive
function.
Since a compiler-assigned call site identiﬁer is coded in a
function body, an attacker may read an identiﬁer from a binary
ﬁle and try to illegally get sensitive data with the retrieved
identiﬁer. On an exception, however, GService always returns
to the saved resumption address of a sensitive function ( 5
in Figure 5); thus, an attack has no chance to break the CFI.
Thus, GService provides the CFI after a call site, by checking
whether the return address belongs to a sensitive function.
To provide CFI for a call site and restore sensitive data
only for the right call site, the service must identify who
requests the data to restore. GService ﬁnds the information on
the requester from two addresses in the exception link register
and the link register. The exception link register tells who sends
the request to the service, which must be s_readV(). The link
GService will not restore sensitive data unless requested via
s_readV(). Moreover, once the service loads sensitive data
for an exception, it always bypasses the kernel and returns to
the resume point.
An attacker can completely rewrite an insensitive function.
While this does not risk sensitive data, thanks to the code
integrity of sensitive functions, the attacker can jump into the
middle of a sensitive function as illustrated in Figure 7 by
compromising an insensitive function. At a , a compromised
control ﬂow jumps into a sensitive function that has not been
executed and calls s_read() to loads sensitive data from
the Secure world. In this case, GService has not checked the
code integrity nor created an fCB instance for the function;
it simply ignores ( b ) any requests from the function. If the
sensitive function’s code integrity is already checked, at c ,
the compromised control ﬂow can legitimately read sensitive
data using s_read() ( d ) in the sensitive function. However,
since the sensitive function’s code integrity is ensured (IV-B),
the read sensitive data will reside in registers and remain
inaccessible to the attacker.
What Ginseng cannot prevent
is replay attacks with
s_write(). These attacks may break the integrity of sensitive
data but cannot break conﬁdentiality. A hypothetical example
is that a function declares a nonce or salt as sensitive data
and updates it using the secure API. Because the jump c
in Figure 7 can legitimately read and write sensitive data,
this attack may overwrite the value. Thus, if a nonce or salt
is overwritten, a transaction will be ignored and the hashed
result will differ. However, the overwriting does not affect the
conﬁdentiality.
V.
IMPLEMENTATION
This section reports our ARM-based implementation of
Ginseng. The EL3 of TrustZone provides a higher privilege
than that of the OS. The direct communication between an app
and GService leverages the security violation (IV-A), which
is triggered by the app accessing Secure world memory and
captured by GService, therefore bypassing the OS. Finally, by
using EL2 as a trap relay point (IV-B), the service can trap
writings to the virtual memory control registers.
We modify the Linux kernel v4.9 to make the kernel page
table read-only and to relay page table modiﬁcations to GSer-
vice, in a way similar to TZ-RKP [4] and SPROBES [25]. In a
complete system, GService should verify that the modiﬁcations
do not map a sensitive function’s code pages to the kernel
address space, also similar to TZ-RKP. Because our current
prototype does not implement this veriﬁcation, the overhead
we report later does not include that of the veriﬁcation. The
veriﬁcation overhead, however, would be negligible for our
benchmarks: it is small [6] and happens rarely. The veriﬁcation
is necessary only when there is an update to the kernel page
table such as system booting and process creation.
A. Static Protection
For the static protection, we prototype Ginseng compiler
based on LLVM v6.0. The compiler allocates up to seven
registers x15-x9 for sensitive data. It can be easily extended
to support ﬂoating point values and more registers for sensitive
data.
Figure 7. Protection Against Compromised Insensitive Functions: the service
ignores the s_read() request from an unchecked sensitive function ( b )
without an fCB instance. One from a checked sensitive function ( d ) is served,
but Ginseng keeps the sensitive data from leaving registers and sanitizes the
data from registers at the exit point.
register tells who calls s_readV() to send the request. Thus,
only when the former address belongs to s_readV() and the
latter address belongs to a sensitive function with an fCB
instance, the service decrypts sensitive data from the secure
stack to sensitive registers. When checking the latter address,
the service translates the address to a physical address and then
compares it with the start address and size in an fCB instance
(IV-B).
E. Attack Surface Control & Analysis
We discussed how Ginseng protects sensitive data against
an attacker fabricating a call site identiﬁer and exploiting
control ﬂow, in IV-D. In this section, we further discuss how
Ginseng isolates GService from the existing software in the
Secure world, why the dynamic trapping is integral, why
(compromised) insensitive functions do not risk sensitive data,
and the limitation of Ginseng.
1) Make GService bullet-proof: Ginseng requires GService
to run in the Secure world, which is the TEE. An attacker
may try to exploit the service’s vulnerabilities to compromise
the TEE as demonstrated by previous attacks [36], [55], [63].
We take three measures to reduce the attack surface from
GService. First, we implement GService with a safe language,
speciﬁcally Rust, which is type and memory safe [7]. Second,
GService uses a statically allocated, private heap. These two
measures conﬁne GService’s memory accessibility and enforce
software fault isolation [70]. Finally, we minimize the use of
unsafe code, i.e., assembly code in GService for accessing
system registers. Given its small size, 190 SLOC in our
implementation, its correctness can be easily veriﬁed using
tools like Vale [9].
2) Attack Surface Analysis: Ginseng effectively prevents
the OS from compromising dynamic trapping by its design.
Because the higher privilege mode and code integrity forbid
the OS from inﬂuencing 2 , 4 , and 5 in Figure 5, the OS
may try to compromise 1 or 3 , instead. GService ensures the
higher privilege call before loading sensitive data (IV-A); thus,
whenever sensitive data are in registers, exception trapping
( 1 ) is always enabled. Ginseng does not assure 3 ; however,
it does not break data conﬁdentiality nor integrity because
9
KernelModeRichOperating SystemfCBfor [B]Code measurementignoredservedHigher PrivilegeModeGinseng ServiceUserModeApps_read()Secure WorldNormal WorlddbintegritycSensitive Function [B]s_read()reveal()Sensitive Function [A]aintegrityFigure 8.
Secure Input-to-App Data Path: when an app requests sensitive
user input, GService reads data from the dedicated input device (UART)
and delivers them to sensitive registers speciﬁed in s_read() bypassing
the OS. The service uses the dedicated LED as a secure input indicator by
turning it on only when the secure input device is being used.
Figure 9.
Overhead for Accessing the Secure Stack: the main source of
the overhead for the secure stack at a call site is to encrypt and decrypt
sensitive data and allocate a storage for them. On an exception, the four-time
world switching, encryption, and decryption imposes the additional overheads.
The standard deviations for a call site and exception are 0.66 K cycles and
1.03 K cycles at maximum, respectively.
B. Runtime Protection
GService: We prototype GService running on ARM
Trusted Firmware (ATF) v1.4. As designed, we implement
most of it in Rust. Instead of linking the Rust standard library,
we use linked_list_allocator [49] to implement its heap
with statically allocated memory. There are only 190 lines of
assembly code for accessing system registers such as the secure
conﬁguration register. We import SHA1 and AES assembly
implementations from the Google BoringSSL project and use
them as a cryptographic library. It helps reduce overhead by
using ARM’s cryptographic instructions with 128-bit vector
registers.
The Ginseng library implements the secure APIs that
GService exposes (Table II). Each API is implemented with
four lines of assembly code; it accesses a dedicated secure
address to trigger a security violation. The address range is
0xF400_0000-0xF400_5000 in the HiKey board. The library,
statically linked to the app, increases the binary size by 2.7 KB.
C. Secure User Input
To demonstrate Ginseng’s practicability, we implement a
secure input-to-app data path as illustrated in Figure 8, similar
to TrustUI [41] and TruZ-Droid [72]. This results in a ﬁrst-of-
its-kind system that protects sensitive data for its entire lifetime
on ARM-based systems without app logic in the TEE. We
map the addresses of UART2 and LED2 to the Secure world’s
address space in hikey_init_mmu_el3() of ATF and use
the devices as secure I/O. We also implement their device
drivers in the Secure world. If GService cannot ﬁnd a datum
matching with the identiﬁer of s_read(), the service turns
on LED2, receives input from UART2 and delivers it to the
sensitive register speciﬁed in s_read(). The drivers are also
implemented in Rust with inline assembly of 161 SLOC.
VI. EVALUATION
We evaluate Ginseng to answer the following questions.
• How much overhead does Ginseng impose to protect
sensitive data? How much does each design component
contribute?
• What is end-to-end performance overhead in practical
applications? How much does each design component
contribute to the overhead?
• How hard is it to apply Ginseng?
A. Microbenchmark
We report overheads due to the Ginseng interposition in
a sensitive function. In each benchmark, we conduct 1,000
iterations and measure CPU cycles using ARM’s performance
monitoring unit (PMU). We make PMU count cycles at all
exception levels in both Normal and Secure worlds through
the PMU ﬁlter register (PMCCFILTR_EL0). We reset and read
PMU from the user space to measure the overheads from an
application’s perspective, and theses operations take less than
10 cycles.
Overhead at entry and exit points: We ﬁrst report the
overhead at a sensitive function’s entry point. As mentioned
in IV-B, Ginseng compiler inserts a call to s_entry() at a
sensitive function’s entry point, and GService walks the kernel
page table, hashes the function code, and allocates an fCB
instance. The service does this only when a sensitive function
is ﬁrst executed; afterward, it references the fCB instance. We
evaluate the overhead with varying the function size from 64
to 4096 bytes The overhead at an initial visit to a function
is 11.81 M cycles. 96 % (11.33 M cycles) of the overhead is
due to the kernel page table walk and 0.12 % (13.92 K cycles)
is for hashing function code. The remaining cycles are for
instantiating an fCB instance. When the same function is re-
executed, the overhead becomes 2.95 K cycles, which is for
searching the fCB instance and checking whether the program
counter of the user space in ELR_EL3 is within the function’s
range. At an exit point of a sensitive function, the compiler
inserts a call to s_exit(). The overhead at an exit point is
3.10 K cycles as the work is simple such as sanitizing sensitive
registers and deactivating the exception redirection.
Overhead at a call site: Before calling a function within
a sensitive function, GService invoked by s_writeMoveV()
encrypts and saves sensitive registers to the secure stack, and
moves sensitive data to registers for parameter passing if used
10
Ginseng ServiceHigher Privilege ModeFunctionControl Block   [A]FunctionControl Block   [B]AppUser ModeSensitive Function [B]Kernel ModeSensitive Function [A]Ginseng LibraryRichOperating SystemSecure StackSensitiveContext[A]SensitiveContext[B]encryptedInsensitiveData and CodeNormal WorldSecure APIss_read()Secure WorldUARTDriverLEDDriver1234567Number of sensitive registers01020304050607080Latency (103 cycle)Exception: saving + restoringCall site: saving + restoringCall site: savingas parameters. After the call, GService invoked by s_readV()
decrypts and restores the registers. We plot the overhead to
protect sensitive data on a call site in Figure 9. The overhead to
save sensitive data starts from 22 K cycles and increases along
with the number of sensitive registers. The ﬁgures shows a
small jump from four to ﬁve sensitive registers. It is because
the vector implementation used for the storage increases its
capacity from four to eight when saving the ﬁfth elements.
Saving sensitive registers takes longer than restoration because
of the secure stack frame allocation. The overhead for restoring
registers starts from 10 K cycles and increases linearly along
the number of registers to be restored.
Overhead on an exception:
Exception redirection to
protect sensitive data imposes an overhead of 58-74 K cycles
depending on the number of sensitive registers, as shown in
Figure 9. Unlike the overhead at a call site, the overhead
does not jump when saving ﬁve registers because GService
preallocates the secure stack frame at a function’s entry point
not on an exception. For this benchmark, we use a synchronous
exception using the SVC instruction in our benchmark program.
Because it is impossible to time an interrupt in the user space,
we instead trigger a synchronous exception and measure the
overhead to handle the exception. We invoke the getppid()
system call using SVC as LMBench does for the null system
call benchmark and exclude the cycles for the OS to serve the
system call.
Overhead on s_read() and s_write(): A developer
uses the two APIs to read and write sensitive data from and to
GService. Both APIs impose the least overhead of 2.8 K cycles
in the microbenchmark as their roles are simple. In both APIs,
GService ﬁrst reads two addresses in the exception link register
and link register and identiﬁes the requester like in IV-D2. If
an fCB with the latter address is found, the service reads or
writes a sensitive datum and returns to the application.
B. Applications
We apply Ginseng to four practical apps to quantify the
engineering effort and measure end-to-end overhead. In their
original forms, these apps save their secrets in the memory