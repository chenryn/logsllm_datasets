---
## Page 112
我们可以看到文件所有者和用户组都得到读权限和写权限，而其他人只是得到读权限。其
他人没有得到写权限的原因是由掩码值决定的。重复我们的实验，这次自己设置掩码值：
[neglinuxbox -]$ rn foo.txt
[neglinuxbox -]$ unask 0000
[nedlinuxbox -]$ > foo.txt
[ne@linuxbox -]$ ls -1 foo.txt
rv-rv-rv-1 mene
0 2008-03-06 14:58 foo.txt
当掩码设置为0000（实质上是关掉它）之后，我们看到其他人能够读写文件。为了弄明白
这是怎么回事，我们需要看一下掩码的八进制形式。把掩码展开成二进制形式，然后与文件属
性相比较，看看有什么区别：
Original file mode
AI -I A.I a
Mask
000 000 000 010
Result
- rW- IW- I--
此刻先忽略掉开头的三个零（我们一会儿再讨论），注意掩码中若出现一个数字1，则删除
文件模式中和这个1在相同位置的属性，在这是指其他人的写权限。这就是掩码要完成的任
务。掩码的二进制形式中，出现数字1的位置，相应地关掉一个文件模式属性。看一下掩码
0022的作用：
Original file mode
- rw- rw- rw-
000 000 010 010
Result
 rw- [-- I-
又一次，二进制中数字1出现的位置，相对应的属性被删除。再试一下其它的掩码值（一
些带数字7的），习惯于掩码的工作原理。当你实验完成之后，要记得清理现场：
[ne@linuxbox -]$ rn foo.txt; umask 0002
大多数情况下，你不必修改掩码值，系统提供的默认掩码值就很好了。然而，在一些高安全
级别下，你要能控制掩码值。
111
---
## Page 113
一些特殊权限
虽然我们通常看到一个八进制的权限掩码用三位数字来表示，但是从技术层面上
来讲，用四位数字来表示它更确切些。为什么呢？因为除了读取、写入和执行权限
之外，还有其它较少用到的权限设置。
其中之一是setuid位（八进制4000）。当应用到一个可执行文件时，它把有效
用户ID从真正的用户（实际运行程序的用户）设置成程序所有者的ID。这种操作
通常会应用到一些由超级用户所拥有的程序。当一个普通用户运行一个程序，这个
程序由根用户（root）所有，并且设置了setuid位，这个程序运行时具有超级用户的
特权，这样程序就可以访问普通用户禁止访问的文件和目录。很明显，因为这会引
起安全方面的问题，所有可以设置setuid位的程序个数，必须控制在绝对小的范围
内。
第二个是setgid位（八进制2000），这个相似于setuid位，把有效用户组ID从
真正的用户组ID更改为文件所有者的组ID。如果设置了一个目录的setgid位，则
目录中新创建的文件具有这个目录用户组的所有权，而不是文件创建者所属用户组
的所有权。对于共享目录来说，当一个普通用户组中的成员，需要访问共享目录中
的所有文件，而不管文件所有者的主用户组时，那么设置setgid位很有用处。
第三个是sticky位（八进制1000）。这个继承于Unix，在Unix中，它可能把一
个可执行文件标志为“不可交换的”。在Linux中，会忽略文件的sticky位，但是
如果一个目录设置了sticky位，那么它能阻止用户删除或重命名文件，除非用户是
这个目录的所有者，或者是文件所有者，或是超级用户。这个经常用来控制访问共
享目录，比方说/tmp
这里有一些例子，使用chmod命令和符号表示法，来设置这些特殊的权限。首
先，授予一个程序setuid权限。
chmod u-+s program
下一步，授予一个目录setgid权限：
chsnod g+s dir
最后，授予一个目录sticky权限：
chsnod +f dir
当浏览ls命令的输出结果时，你可以确认这些特殊权限。这里有一些例子。首
先，一个程序被设置为setuid属性：
fu8r-2r-z
具有setgid属性的目录：
112
---
## Page 114
druzrusr-2
设置了sticky位的目录：
druzruzruf
10.6更改身份
在不同的时候，我们会发现很有必要具有另一个用户的身份。经常地，我们想要得到超级用户
特权，来执行一些管理任务，但是也有可能“变为”另一个普通用户，比如说测试一个帐号。有
三种方式，可以拥有多重身份：
1.注销系统并以其他用户身份重新登录系统。
2.使用su命令。
3.使用sudo命令。
我们将跳过第一种方法，因为我们知道怎样使用它，并且它缺乏其它两种方法的方便性。在
我们自己的shell会话中，su命令允许你假定为另一个用户的身份，以这个用户的ID启动一
个新的shell会话，或者是以这个用户的身份来发布一个命令。sudo命令允许一个管理员设置
一个叫做/etc/sudoers的配置文件，并且定义了一些具体命令，在假定的身份下，特殊用户可
以执行这些命令。选择使用哪个命令，很大程度上是由你使用的Linux发行版来决定的。你的
发行版可能这两个命令都包含，但系统配置可能会偏祖其中之一。我们先介绍su命令。
10.7su一以其他用户身份和组ID运行一个shell
su命令用来以另一个用户的身份来启动shell。这个命令语法看起来像这样：
su [[1]][user]
的shell环境，并且工作目录会更改到这个用户的家目录。这通常是我们所需要的。如果不指
定用户，那么就假定是超级用户。注意（不可思议地），选项“-1”可以缩写为"-"，这是经常用
到的形式。启动超级用户的shell，我们可以这样做：
113
---
## Page 115
[ne@linuxbox-]$su
Passvord:
[root@linuxbox -]#
按下回车符之后，shell提示我们输入超级用户的密码。如果密码输入正确，出现一个新的
shell提示符，这表明这个shell具有超级用户特权（提示符的末尾字符是“#”而不是"S"），并
且当前工作目录是超级用户的家目录（通常是/root）。一旦进入一个新的shell，我们能执行超
级用户所使用的命令。当工作完成后。输入“exit"，则返回到原来的shell：
[root@linuxbox -]#exit
[ne@linuxbox -]$
以这样的方式使用su命令，也可以只执行单个命令，而不是启动一个新的可交互的shell：
使用这种模式，命令传递到一个新shell中执行。把命令用单引号引起来很重要，因为我们
不想命令在我们的shell中展开，但需要在新shell中展开。
*/4oox/ [- s, 3- ns s[- xoqxnutou]
Passvord:
754 2007-08-11 03:19 /root/anaconda-ks.cfg
/root/Mail:
total 0
[neglinuxbox -]$
10.8sudo一以另一个用户身份执行命令
sudo命令在很多方面都相似于su命令，但是sudo还有一些非常重要的功能。管理员能够配
置sudo命令，从而允许一个普通用户以不同的身份（通常是超级用户），通过一种非常可控的
114
---
## Page 116
方式来执行命令。尤其是，只有一个用户可以执行一个或多个特殊命令时，（更体现了sudo命
令的方便性）。另一个重要差异是sudo命令不要求超级用户的密码。使用sudo命令时，用户
使用他/她自己的密码来认证。比如说，例如，sudo命令经过配置，允许我们运行一个虚构的
备份程序，叫做“backup_script”，这个程序要求超级用户权限。通过sudo命令，这个程序会
像这样运行：
[ne@linuxbox -]$ sudo backup_script
pzonsse
Systen Backup Starting.. .
按下回车键之后，shell提示我们输人我们的密码（不是超级用户的）。一旦认证完成，则执
行具体的命令。su和sudo之间的一个重要区别是sudo不会重新启动一个shell，也不会加载
另一个用户的shell运行环境。这意味者命令不必用单引号引起来。注意通过指定各种各样的
选项，这种行为可以被推翻。详细信息，阅读sudo手册页。
想知道sudo命令可以授予哪些权限，使用“-1选项，列出所有权限：
[neglinuxbox -]$ sudo -1]
User ne nay run the folloving commands on this host:
(ALL)ALL
Ubuntu 与j sudo
普通用户经常会遇到这样的问题，怎样完成某些需要超级用户权限的任务。这些
任务包括安装和更新软件，编辑系统配置文件，和访问设备。在Windows世界里，
这些任务是通过授予用户管理员权限来完成的。这允许用户执行这些任务。然而，
这也会导致用户所执行的程序拥有同样的能力。在大多数情况下，这是我们所期望
的，但是它也允许malware（恶意软件）。比方说电脑病毒，自由地支配计算机。
在Unix世界中，由于Unix是多用户系统，所以在普通用户和管理员之间总是
存在很大的差别。Unix采取的方法是只有在需要的时候，才授予普通用户超级用户
权限。这样，普遍会用到su和sudo命令。
几年前，大多数的Linux发行版都依赖于su命令，来达到目的°su命令不需要
sudo命令所要求的配置，su命令拥有一个root帐号，是Unix中的传统。但这会
115
---
## Page 117
引起问题。所有用户会企图以root用户帐号来操纵系统。事实上，一些用户专门以
root用户帐号来操作系统，因为这样做。的确消除了所有那些讨厌的“权限被拒绝”
的消息。你这样做就会使得Linux系统的安全性能被降低到和Windows系统相同
的级别。不是一个好主意。
当引进Ubuntu的时候，它的创作者们采取了不同的策略。默认情况下，Ubuntu
不允许用户登录到root帐号（因为不能为root帐号设置密码），而是使用sudo命
令授予普通用户超级用户权限。通过sudo命令，最初的用户可以拥有超级用户权
限，也可以授予随后的用户帐号相似的权力。
10.9chown一更改文件所有者和用户组
chown命令被用来更改文件或目录的所有者和用户组。使用这个命令需要超级用户权限。
chown命令的语法看起来像这样：
choun [ouner] [: [group]] file.-.
chown可以根据这个命令的第一个参数更改文件所有者和/或文件用户组。这里有一些例子：
参数
结果
bob
把文件所有者从当前属主更改为用户bob。
bob:users
把文件所有者改为用户bob，文件用户组改为用户组users°
admins
把文件用户组改为组admins，文件所有者不变。
bob:
文件所有者改为用户bob，文件用户组改为用户bob登录
系统时所属的用户组。
表10-6:chown参数实例
比方说，我们有两个用户，janet拥有超级用户访问权限，而tony没有。用户janet想要从
她的家目录复制一个文件到用户tony的家目录。因为用户janet想要tony能够编辑这个文件
janet把这个文件的所有者更改为tony：
116
---
## Page 118
[janet@linuxbox -]$ sudo cp nyfile.txt ~tony
:pzonssed
[janet@linuxbox -]$ sudo 1s -1 -tony/myfile.txt
rv-r--r-- 1 root root 8031 2008-0320 14:30 /hone/tony/myfile.txt
[janet@linuxbox -]$ sudo chovn tony: -tony/nyfile.txt
[janet@linuxbox -]$ sudo 1s -1 -tony/myfile.txt
这里，我们看到用户janet把文件从她的目录复制到tony的家目录。下一步，janet把文件
所有者从root（使用sudo命令的原因）改到tony。通过在第一个参数中使用末尾的“：”字符
janet同时把文件用户组改为tony登录系统时，所属的用户组，碰巧是用户组tony。
注意，第一次使用sudo命令之后，为什么（shell）没有提示janet输入她的密码？这是因
为，在大多数的配置中，sudo命令会相信你几分钟，直到计时结束。
10.10chgrp－更改用户组所有权
在旧版Unix系统中，chown命令只能更改文件所有权，而不是用户组所有权。为了达到目的，
使用一个独立的命令，chgrp来完成。除了限制多一点之外，chgrp命令与chown命令使用起
来很相似。
10.11练习使用权限
到目前为止，我们已经知道了权限这类东西是怎样工作的，现在是时候炫罐一下了。我们将展
示一个常见问题的解决方案，这个问题是如何设置一个共享目录。假想我们有两个用户，他们
分别是“bil”和“karen”。他们都有音乐CD收藏品，也愿意设置一个共享目录，在这个共享
目录中，他们分别以OggVorbis或MP3的格式来存储他们的音乐文件。通过sudo命令，用
户bill具有超级用户访问权限。
我们需要做的第一件事，是创建一个以bill和karen为成员的用户组。使用图形化的用户
管理工具，bill创建了一个叫做 music的用户组，并且把用户 bill 和karen 添加到用户组music
中：
117
---
## Page 119
New group
Basic Settings
Group name:
music
Group [D:
2001
Group Members
 william Shotts
 Guest Account
 root
Karen Shotts
xCancel
图3:用GNOME创建一个新的用户组
下一步，bill创建了存储音乐文件的目录：
[bil1@linuxbox -]$ sudo mitdir /usr/local/share/Music
:pzonssed
因为bill正在他的家目录之外操作文件，所以需要超级用户权限。这个目录创建之后，它
具有以下所有权和权限：
stsng/0zeqs/te3ot/xsn/ PT-sT $[- xoqxmuttotttq]
drvxr-xr-x 2 root root 4096 20080321 18:05 /usr/1ocal/share/Music
正如我们所见到的，这个目录由root用户拥有，并且具有权限755。为了使这个目录共享，
允许（用户karen）写入，bill需要更改目录用户组所有权和权限：
[bil1@linuxbox -]$ sudo choun :music /usr/local/share/Music
[bi11@linuxbox -]$ sudo chnod 775 /usr/local/share/Music
ssng/0zeus/te3ot/xsn/ PT-sT $[- xoqxmuttottq]
druxrvxr-x 2 root music 4096 2008-0321 18:05 /usr/local/share/Music
那么这是什么意思呢？它的意思是.现在我们拥有一个目录，/usr/local/share/Music，这个
目录由root用户拥有，并且允许用户组music读取和写入。用户组music有两个成员bill和
118
---
## Page 120
karen，这样bill 和karen能够在目录/usr/local/share/Music 中创建文件。其他用户能够列出
目录中的内容，但是不能在其中创建文件。
但是我们仍然会遇到问题。通过我们目前所拥有的权限，在Music目录中创建的文件，只
具有用户bill和karen的普通权限：
[bil1@linuxbox -]$ > /usr/local/share/Music/test_file
[bill@linuxbox -]$ 1s -1 /usr/local/share/Husic
rv-r--r--1 bi11
bi11
实际上，存在两个问题。第一个，系统中默认的掩码值是0022，这会禁止用户组成员编辑
属于同组成员的文件。如果共享目录中只包含文件，这就不是个问题，但是因为这个目录将会
存储音乐，通常音乐会按照艺术家和唱片的层次结构来组织分类。所以用户组成员需要在同组
其他成员创建的目录中创建文件和目录。我们将把用户bill和karen使用的掩码值改为0002。
第二个问题是，用户组成员创建的文件和目录的用户组，将会设置为用户的主要组，而不是
用户组music。通过设置此目录的setgid位来解决这个问题：
[bil1@linuxbox -]$ sudo chnod g+s /usr/local/share/Music
[bil10linuxbox -]$ 1s -1d /usr/local/share/Music
drvxrvsr-x 2 root nusic 4096 2008-0324 20:03 /usr/1ocal/share/Hus1c
现在测试一下，看看是否新的权限解决了这个问题。bill把他的掩码值设为0002，删除先
前的测试文件。并创建了一个新的测试文件和目录：
[bil1elinuxbox -]$ umask 0002
[bil1elinuxbox -]$ rm /usr/local/share/Music/test_fi1e
[bil1elinuxbox -]$ > /usr/local/share/Music/test_file
[bil1@linuxbox -]$ nkdir /usr/local/share/Music/test_dir
[bil10linuxbox -]$ 1s -1 /usr/local/share/Music
drwxrvsr-x 2 bi11music 4096 2008-03-24 20:24 test_dir