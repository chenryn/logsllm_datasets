# Hack the Legacy: Unveiling IBM i (AS/400)

## Presenter
Bart Kulach  
[LinkedIn Profile](https://nl.linkedin.com/in/bartkulach)  

**Disclaimer:** The views and opinions presented here are solely those of the author and do not necessarily represent those of his employer(s).

---

## Agenda
1. Introduction
2. Why Should We Care About Legacy Systems?
3. Evil Java?
4. Privilege Escalation – Let’s Jump!
5. Password Security and Hash Grabbing
6. Summary and Q&A

---

### 1. Introduction
- **About Me:** I’m Bart Kulach, and you can find me on LinkedIn.
- **Disclaimer:** The views and opinions presented here are solely those of the author and do not necessarily represent those of his employer(s).

**KEEP CALM and PWRDWNSYS *IMMED**

---

### 2. Why Should We Care About Legacy Systems?
Legacy systems, particularly IBM i (AS/400), are still prevalent and pose significant security risks:
- **Persistence:** They are difficult to replace and continue to process critical data.
- **Data Sensitivity:** These systems handle highly sensitive and valuable information.
- **Security Weaknesses:** Often less secure than modern front-ends, making them vulnerable to attacks.
- **Vulnerability:** More susceptible to exploitation than commonly thought.
- **Accessibility:** Easily accessible to potential intruders.
- **Ubiquity:** Found in all economic sectors.
- **Exploitation History:** Already exploited, as documented in "Hacking iSeries" by S. Carmel.

---

### 3. Evil Java?
IBM Toolbox for Java/JTOpen allows for remote system API calls and the use of built-in system commands, but it comes with several security concerns:
- **Remote System Access:** Enables remote API calls and system command usage.
- **Coding Flexibility:** Allows coding outside the AS/400 environment without requiring additional system authorities.
- **Poor Security Practices:** Generally poorly written, leading to inconsistent authorization handling.
- **Visibility Issues:** Inconsistent handling of object and data authorities, allowing for greater visibility.

**Demo: Evil Java – Visibility Example**

---

### 4. Privilege Escalation – Let’s Jump!
#### Part 1: Remote Profile Switching
- **Group Profiles:** Are you using a common group profile? Are your administrators also members of this group?
- **Authority Hardening:** Are your object and data authorities properly secured?
- **Monitoring:** Do you monitor profile handle swapping?
- **Steps:**
  1. Check the list of profiles you have access to.
  2. Grab a profile handle.
  3. Switch to the profile.
  4. Repeat until you achieve the desired access level.

**Demo: Remote Profile Switching**

#### Part 2: Nested Command Use
- **Exit Points/Programs:** Typically used to protect the system from specific SQL queries or system commands.
- **Commercial Software Vulnerabilities:** Many commercial protection software solutions have weaknesses that can be exploited.
- **Circumvention:** Nested commands (commands running commands) can often bypass these protections, especially when crossing environments (CL–PASE–DB2).
- **Example:**
  ```sql
  CALL QSYS.QCMDEXC('QSH CMD(''DB2 "select * from library.file" | Rfile -w /QSYS.LIB/QSYSPRT.FILE'')', 0000000077.00000)
  ```

**Demo: Nested Command Use**

---

### 5. Password Security and Hash Grabbing
- **API Usage:** IBM provides the QSYRUPWD API to extract password hashes.
- **Output Format:** The output format is proprietary and was unpublished until recently.
- **System Value:** Your QPWDLVL system value (0, 1, or 2) determines the type of hash you can obtain.
- **Privilege Requirements:** You need *SECADM (and ideally *ALLOBJ) privileges to use QSYRUPWD.

**Password Hash Structure:**
- **Offset (Dec)**: 0, Length (Chars): 16 – DES 56-bit encrypted password substitute (RFC2877)
- **Offset (Dec)**: 16, Length (Chars): 16 – DES 56-bit encrypted password substitute (RFC2877)
- **Offset (Dec)**: 32, Length (Chars): 32 – LM hash
- **Offset (Dec)**: 64, Length (Chars): 4 – No data
- **Offset (Dec)**: 68, Length (Chars): 40 – HMAC-SHA1 encrypted password token (RFC4777)?
- **Offset (Dec)**: 108, Length (Chars): 40 – HMAC-SHA1 encrypted password token (RFC4777)?
- **Offset (Dec)**: 148, Length (Chars): 6 – No data
- **Offset (Dec)**: 154, Length (Chars): 384 – Unknown (hash?) data

**Demo: Password Grabbing**

---

### 6. Summary and Q&A
- **Key Takeaways:**
  - Java is a significant security risk for AS/400.
  - Be skeptical about IBM security books.
  - Visit [www.hackthelegacy.org](http://www.hackthelegacy.org) for more information.

**Contact Information:**
- **Twitter:** @bartholozz
- **Website:** [www.hackthelegacy.org](http://www.hackthelegacy.org)

**Questions and Answers:**

---

Thank you for your attention!