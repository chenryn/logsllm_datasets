tigate ISP routing behaviors. IRR records the routing policies of some ASes.
First, we can learn that there are commonly three kinds of policies in the wild
as shown in Fig. 2, including preﬁx policy, destination AS policy, and neighbor
policy. The preﬁx policy is set for a speciﬁc destination preﬁx, the destination
AS policy (in short, destAS policy) is set for a speciﬁc destination AS, and the
neighbor policy is set for a speciﬁc neighbor AS. We can see that the preﬁx
policy is ﬁner than the destAS policy and the destAS policy is ﬁner than the
neighbor policy. 10038 ASes record their routing policies in the IRR database
(but maybe not all of their policies). We count the kinds of policies each AS set
and show the statistic in Fig. 3. We can see that not all ASes use a single kind of
222
T. Wu et al.
policies, and over 40% ASes set multiple kinds of policies. Therefore, it is of great
importance to capture routing behavior diversity when modeling routing policies.
Second, from IRR data, we can know how the ASes set local preferences for their
neighbors. We can ﬁnd that whether there exist violations of standard import
policy, e.g., set higher preference for peers than customers. The dataset of the
business relationship is obtained from CAIDA AS relationship database [26]. We
can also know whether the policy is ﬁner than the standard import policy, e.g.,
set diﬀerent preferences for neighbors with the same relationship. Third, some
ASes record their export policies in IRR data, e.g. to AS1 announce AS2. Thus
we can examine whether these export policies obey the valley-free rule to ﬁnd
violations of standard export policy.
Fig. 3. Routing behavior diversity
Figure 1(b) shows the result of our analysis of IRR data. Only 0.51% of
ASes violate standard export policies, while 20.65% of ASes violate standard
import policies. This result also indicates standard import policies are more
oversimpliﬁed than standard export policies. Besides, we ﬁnd that 46.68% of
ASes set ﬁner policies than standard policies. Therefore, standard policies are
too coarse-grained to capture ISP routing behaviors.
BGP Community. The third data source we choose is BGP community data.
What can BGP community data tell us? First, some ASes will tag the preference
set for their neighbors, e.g., AS1273 (Vodafone) tags a BGP community value
1273: 70 to a route, which represents AS1273 set preference of the route to 70.
We can investigate whether the ASes obey standard import policies when setting
preferences. Second, we can ﬁnd that whether the ASes set diﬀerent preferences
for neighbors with the same relationship. If an AS sets diﬀerent preferences for
neighbors with the same relationship, it means that the AS sets ﬁner policies
than standard policies.
Not all ASes tag BGP communities to routing data and we do not know the
semantics of all ASes’ community values. We get a semantic dictionary of 247
community values of 56 ASes. From BGP routing data, we observe the preference
communities of 17 ASes in these 56 ASes and show the statistic in Fig. 1(c). We
RouteInfer: Inferring Interdomain Paths
223
ﬁnd that 16 ASes (94.12%) violate standard import policies and set ﬁne-grained
policies. Only AS11537 obey the standard routing policies.
In conclusion, standard routing policy cannot model ISP routing behaviors
because the routing behaviors are diverse among diﬀerent ASes. Especially the
oversimpliﬁed standard import policies contribute to most of the errors in path
inference. These observations will guide our design in the next section.
4 Design of RouteInfer
4.1 Overview
Fig. 4. Overview of RouteInfer
In this section, we present a new path inference algorithm, RouteInfer, that is
designed to address the challenges discussed above. Figure 4 shows the overview
of RouteInfer, which consists of two key components: a 3-layer policy model
for capturing routing behavior diversity and a route decision model based on
learning to rank algorithm for predicting route decisions of ASes without inferred
policies. RouteInfer works in three steps as follows:
1. We construct an AS-routing map from BGP routing data, initialize policies
for each AS, and remove edge ASes with simple policies.
2. We extract preﬁx policies from BGP routing data and aggregate ﬁne-grained
policies into coarse-grained policies.
3. We train the route decision model for predicting route decisions for ASes
without inferred policies based on the routing behaviors which are inferred
from other ASes.
Next, we explain the design details and the beneﬁts of each step.
224
T. Wu et al.
4.2 Bootstrap AS-Routing Map
We start from building an AS-routing map based on public BGP data.
Quasi-Router. Muhlbauer et al. [15] have proven that many ASes choose mul-
tiple paths towards a given preﬁx due to hot potato routing, thus we should not
model each AS by a single entity. So we allow each AS to consist of multiple
quasi-routers which is similar to [15]. We initialize each AS with one quasi-router.
In the next step, we will add quasi-routers to capture the path diversity when
necessary.
Initial Policies. As mentioned in Sect. 3, compared with standard import poli-
cies, standard export policies do not induce too many errors in path inference
(this statement is also conﬁrmed with some prior observations [13,21]), thus we
use the valley-free rule as the export policy of each AS and leave import policies
for further inference. In the area of network security, AS-Rank [24] algorithm is
often used to infer the AS relationships, and AS relationships are used to infer
interdomain paths [5,7–9]. Therefore, we use the AS-Rank algorithm to infer
AS relationships. Besides, we extract all 3-tuples corresponding to three con-
secutive ASes in AS paths, e.g. for path AS1, AS2, AS3, AS4, we can get tuples
(AS1, AS2, AS3) and (AS2, AS3, AS4). A tuple (AS1, AS2, AS3) indicates that
AS2 announces AS3’s routes to AS1. If we ﬁnd AS2 violates the valley-free rule,
we will add export policy (to AS1 announce AS3) for AS2 as a supplement.
Besides, we initialize the import policies for each AS. First, all ASes will
set the same preference for all routes received from any neighbor. So ASes will
use the shortest path to decide which path to choose and use the smallest AS
number for the ﬁnal tie-break. Please notice that this is just a na¨ıve initial state
for ASes to decide the best paths toward a destination. In the next step, we will
extract import policies for ASes from BGP routing tables.
Remove Periphery ASes. A huge number of ASes in low tiers only have
simple behaviors. Removing these ASes from topology can improve our algorithm
eﬃciency and do not harm the performance. Many edge ASes only have one single
neighbor to access the rest of the Internet. We call them periphery ASes. It’s
unnecessary to infer policies of periphery ASes. Considering the AS topology is
an undirected graph, we remove all the leaf nodes iteratively until the graph
has no leaf node. Suppose AS a is a single-homed ASes with two single-homed
customers (AS b and AS c). In the ﬁrst iteration, AS b and AS c will be removed
because they are leaf nodes in AS graph. Then in the second iteration, AS a
will be removed because it becomes a leaf node after the ﬁrst iteration. After
removing periphery ASes, the number of ASes is reduced from 60,000 to 45,000.
4.3 Extract and Aggregate Policies
The goal of this step is to get import policies (i.e., preference rules) of ASes
and capture routing behavior diversity as much as possible. In the following, we
ﬁrst introduce how we extract preﬁx policies from observed AS paths. Next, we
RouteInfer: Inferring Interdomain Paths
225
introduce our approach of aggregating ﬁne-grained policies into coarse-grained
policies to get a 3-layer behavior model for capturing routing behavior diversity.
Fig. 5. Example of preﬁx policies extraction in one iteration
Extract Preﬁx Policies. Similar to Muhlbauer et al. [15], we use a heuristic
to extract the preﬁx policies of ASes iteratively. In each iteration of the heuris-
tic, we simulate route announcements and route decisions of ASes in the whole
AS-routing map and compare the simulated AS paths with observed paths. If
there exists a discrepancy, we will alter the AS-routing map by either adding
quasi-routers or adding routing policies. Adding quasi-routers is to capture inter-
domain path diversity and ensure an AS can choose multiple paths towards a
preﬁx. Adding policies is to ensure simulated paths are consistent with observed
paths.
Figure 5(a) shows an example of adding routing policies. The simple topology
consists of four ASes and pref ix1 belongs to AS4. The simulated path from
AS1 to pref ix1 is (AS1, AS2, AS4), but the actual path observed from BGP
data is (AS1, AS3, AS4). So we can add a preﬁx import policy for AS1, i.e.,
AS2>AS3 accept preﬁx1, trying to make the simulated path match the observed
path. Figure 5(b) shows an example of adding quasi-router. In this scenario, we
observe two diﬀerent paths from AS1 towards pref ix1. But AS1 only has one
quasi-router and the router chooses one path. So we add a quasi-router with
no policy for AS1, and add policies for this quasi-router to make the router
choose the other path towards pref ix1. After adding routing policies and quasi-
routers, we re-simulate route decisions and route announcements in the whole
AS-routing map. Similarly, we keep searching for mismatches between simulated
and observed paths and add quasi-routers or policies iteratively, until all observed
paths match with corresponding simulated paths.
Policy Aggregation. To capture the routing behavior diversity of ASes, we
propose a 3-layer policy model. Each AS’s routing policies consist of three layers,
including preﬁx policies, destAS policies, and neighbor policies. When we infer
an interdomain path, we will apply the ﬁnest policies which can be used to infer
the path. For example, if an AS a receive a route whose destination preﬁx is p1
from neighbor AS b and preﬁx p1 belongs to destination AS d. We ﬁrst check
whether AS a has the preﬁx policy set for preﬁx p1. If AS a has the policy, we
will apply this preﬁx policy to infer the path. Otherwise, we will check whether
AS a has the destAS policy set for destination AS d. If AS a has the policy, we
will apply this destAS policy to infer the path. Otherwise, we will check whether
226
T. Wu et al.
AS a has the neighbor policy set for neighbor AS b. If AS a has the policy, we
will apply this neighbor policy to infer the path. Otherwise, we have no policy
to infer paths and we will introduce our solution in Sect. 4.4.
To get destAS policies and neighbor policies, we use policy aggregation from
preﬁx policies that are inferred before. To be speciﬁc, policy aggregation is aggre-
gating ﬁne-grained policies to coarse-grained policies when there are no con-
ﬂicts. Conﬂicts mean preference ranking loops after aggregation. For example, if
we have three import policies as follows: AS1 > AS2 accept preﬁx1, AS2 > AS3
accept preﬁx2, AS3 > AS1 accept preﬁx3 (three preﬁxes belong to the same
AS). If we aggregate the three policies, we get a preference ranking loop which
is AS1 > AS2 > AS3 > AS1. Therefore, we cannot aggregate these three policies.
Preﬁx policies will ﬁrst be aggregated into destAS policies. Then, destAS policies
will be aggregated into neighbor policies.
Fig. 6. Example of policy aggregation
Figure 6 shows two examples of policy aggregation and also shows why we
need policy aggregation. Figure 6(a) depicts an example of aggregating preﬁx
policies to a destAS policy. We can infer two preﬁx policies of AS3303 which are
for preﬁx 67.46.48.0/20 and preﬁx 67.143.100.0/22. But when we want to infer
the route from AS3303 to preﬁx 67.142.208.0/20, we do not have routing policies
to match and we infer the path wrongly. However, we can aggregate the two preﬁx
policies to a destAS policy as shown in Fig. 6(a), since the two preﬁx policies are
both set for the preﬁxes belonging to AS6621 and there is no conﬂict between
the two preﬁx policies. Therefore, for any routes whose destination AS is 6621,
we know AS3303 prefers the routes received from AS3356 to the routes received
from AS174. Figure 6(b) depicts an example of aggregating destAS policies to a
neighbor policy. Similarly, we have two destAS policies whose destination ASes
are AS58224 and AS48551, but we cannot use these policies to infer the path
from AS49697 to AS4761. However, we can further aggregate destAS policies to
a neighbor policy. The neighbor policy tells us AS49697 will prefer the routes
received from AS61438 to the routes received from AS12586 no matter the
destination of the routes. Thus we can use this policy to infer the path from
AS49697 to AS4761.
RouteInfer: Inferring Interdomain Paths
227
Fig. 7. Average proportion of stranger
ASes
Fig. 8. Accuracy of using default policies to
predict route decisions
Challenge Caused by Incomplete Routing Data. After policy extraction
and aggregation, there is still a huge number of ASes whose policies we cannot
extract from public routing data due to incomplete routing data. Those ASes
are like strangers, we do not know their routing behaviors. So we call those ASes
stranger ASes. Figure 7 shows the average proportion of stranger ASes. First,
we randomly select 100,000 destination preﬁxes. For each preﬁx p, we count
the proportion of ASes which do not have any preﬁx policy towards p. We ﬁnd
99.36% ASes without the preﬁx policies towards a given preﬁx p on average.
Then, we randomly select 100,000 destination ASes, and for each destination AS
d, we ﬁnd the proportion of ASes which do not have any destAS policy towards
d. We ﬁnd 89.31% ASes without the destAS policies towards a given destination
AS d on average. Besides, we randomly select 100,000 destination preﬁxes and
try to infer the paths towards those preﬁxes. We ﬁnd about 77.63% ASes even
do not have any neighbor policy to infer the path.
Existing solutions for inferring paths involving stranger ASes are setting
default policies to those ASes. When inferring the path, if an AS has inferred
policies, then they use the policies to infer the path. If an AS does not have
inferred policies, then they use default policies to infer the path. Commonly
used default policies include choosing the shortest path [15] as the best path,
choosing the shortest valley-free path as the best path, and using standard poli-
cies [16,17] to select the best path. However, the accuracy of those solutions is
disappointing, which is only 15.8%, 43.23% and 28.86% respectively as shown in
Fig. 8.
4.4 Route Decision Model Based on Learning to Rank Algorithm
Millions of routing policies inferred in our 3-layer policy model allow us to use a
data-driven machine learning-based approach to train a model for predicting how
an AS select the best route among several candidate routes. In this subsection,
we propose a route decision model to predict route decisions of stranger ASes.
228
T. Wu et al.
Crucially, our algorithm integrates various node, link, and path attributes that
might help infer route decisions of ASes. We ﬁrst introduce our designed features
based on the understanding of actual route decisions. Second, we introduce the
design of our route decision model.
Feature Design. The AS which makes route decisions is called decision AS. The
ﬁrst AS in a candidate route is called next-hop AS. The process of route decisions
can be characterized by the following three types of features: (A) Properties of
the route; (B) Properties of the next-hop AS; (C) Properties between decision
AS and next-hop AS.
Path Length (Type A). This feature is based on best practices. Many ASes
prefer to choose the paths whose length is the shortest.
Tier of Next-Hop AS (Type B). This feature consists of two parts. One is
the degree of the next-hop AS. The other is the AS rank [27] of the next-hop AS.
In AS rank, ASes are ranked by their customer cone size, which is the number of
their direct and indirect customers. Those two attributes measure an AS’s tier
in the Internet. This feature folds in the following intuition: ASes may prefer
the routes received from high-tier ASes. For example, Anwar et al. [14] ﬁnd that
Cogent prefers the path received from Tier-1 AS. We explain the detail of this
intuition in Appendix C.
Business Relationship (Type C). This feature is based on the consensus that
route decision depends on economic interests. The business relationship between
the decision AS and the next-hop AS is the most related feature to reﬂect the
economic consideration. The data of the business relationship is from the ﬁrst
step of bootstrapping AS-routing map. Since it is a discrete variable, this feature
is encoded by one-hot vectors2.
Co-located IXP and Co-located Private Peering Facility (Type C).
Those two features are based on the intuition that if there are many co-located
IXPs or facilities between the decision AS and a neighbor AS, the decision AS
is likely to choose the route received from the neighbor AS as the best path.