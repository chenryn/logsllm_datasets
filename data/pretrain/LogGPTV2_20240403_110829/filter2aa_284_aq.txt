 Ticket Purchased, Thank you for your custom.
Sample 14.1
Measure
Description
Using a Secret Cookie
Remember that all cookies, even the secret ones, will be submitted with every request. All authentication tokens 
will be submitted regardless of whether or not the end-user was tricked into submitting the request. Further-
more, session identifiers are simply used by the application container to associate the request with a specific 
session object. The session identifier does not verify that the end-user intended to submit the request.
Table 21: Unsuccessful Countermeasures For Csrf Attacks
142
Password, transferring funds, purchasing, the application may not simply execute the request, but should re-
spond to the request with another request for the user’s password, or an out-of-band (i.e. two-factor) authen-
tication item.
Preventing CSRF
Checking if the request has a valid session cookie is not enough, the application needs to have a unique iden-
tifier assocaited with every HTTP request sent to the application. CSRF requests (from an attackers e-mail) will 
not have this valid unique identifier. The reason CSRF requests won’t have this unique request identifier is the 
unique ID is rendered as a hidden field, or within the URL, and is appended to the HTTP request once a link/
button press is selected. The attacker will have no knowledge of this unique ID, as it is random and rendered 
dynamically per link, per page.
Application logic to prevent CSRF then include:
1. A list of unique IDs is compiled prior to delivering the page to the user. The list contains all valid unique IDs
generated for all links on a given page. The unique ID could be derived from a secure random generator such 
as SecureRandom for J2EE and could be stored in the session or another centralized cache.
2. A unique ID is appended to each link/form on the requested page prior to being displayed to the user.
3. The application checks if the unique ID passed with the HTTP request is valid for a given request. If the
unique ID passed with the HTTP request is valid for a given request.
4. If the unique ID is not present, terminate the user session and display an error to the user.
General Recommendation: Synchronizer Token Pattern
In order to facilitate a “transparent but visible” CSRF solution, developers are encouraged to adopt the Syn-
chronizer Token Pattern http://www.corej2eepatterns.com/Design/PresoDesign.htm. The synchronizer 
token pattern requires the generating of random “challenge” tokens that are associated with the user’s current 
session. These challenge tokens are then inserted within the HTML forms and links associated with sensitive 
server-side operations. When the user wishes to invoke these sensitive operations, the HTTP request should 
include this challenge token. It is then the responsibility of the server application to verify the existence and 
correctness of this token. By including a challenge token with each request, the developer has a strong control 
to verify that the user actually intended to submit the desired requests. Inclusion of a required security token in 
HTTP requests associated with sensitive business functions helps mitigate CSRF attacks as successful exploita-
tion assumes the attacker knows the randomly generated token for the target victim’s session. This is analo-
gous to the attacker being able to guess the target victim’s session identifier. The following synopsis describes a 
general approach to incorporate challenge tokens within the request.
When a Web application formulates a request (by generating a link or form that causes a request when submitted or 
A8 - Cross-Site Request Forgery (CSRF)
Applications can be developed to only accept POST requests for the execution of business logic. The misconcep-
tion is that since the attacker cannot construct a malicious link, a CSRF attack cannot be executed. Unfortunate-
ly, this logic is incorrect. There are numerous methods in which an attacker can trick a victim into submitting a 
forged POST request, such as a simple form hosted in an attacker’s website with hidden values. This form can be 
triggered automatically by JavaScript or can be triggered by the victim who thinks the form will do something 
else.
Salt = ‘a0w8hsdfas8ls587uas87’
URL Rewriting
Multi-Step transactions are not an adequate prevention of CSRF. As long as an attacker can predict or deduce 
each step of the completed transaction, then CSRF is possible.
This might be seen as a useful CSRF prevention technique as the attacker cannot guess the victim’s session ID. 
However, the user’s credential is exposed over the URL.
Only Accepting POST Requests
143
clicked by the user), the application should include a hidden input parameter with a common name such as “CSRFTo-
ken”. The value of this token must be randomly generated such that it cannot be guessed by an attacker. Consider 
leveraging the java.security.SecureRandom class for Java applications to generate a sufficiently long random token. 
Alternative generation algorithms include the use of 256-bit BASE64 encoded hashes. Developers that choose this 
generation algorithm must make sure that there is randomness and uniqueness utilized in the data that is hashed to 
generate the random token.
Depending on the risk level of the product, it may only generate this token once for the current session. After initial 
generation of this token, the value is stored in the session and is utilized for each subsequent request until the session 
expires. When a request is issued by the end-user, the server-side component must verify the existence and validity of 
the token in the request as compared to the token found in the session. If the token was not found within the request 
or the value provided does not match the value within the session, then the request should be aborted, token should 
be reset and the event logged as a potential CSRF attack in progress.
To further enhance the security of this proposed design, consider randomizing the CSRF token parameter name and 
or value for each request. Implementing this approach results in the generation of per-request tokens as opposed to 
per-session tokens. Note, however, that this may result in usability concerns. For example, the “Back” button browser 
capability is often hindered as the previous page may contain a token that is no longer valid. Interaction with this 
previous page will result in a CSRF false positive security event at the server. Regardless of the approach taken, devel-
opers are encouraged to protect the CSRF token the same way they protect authenticated session identifiers, such 
as the use of SSLv3/TLS.
Disclosure of Token in URL
Many implementations of this control include the challenge token in GET (URL) requests as well as POST requests. 
This is often implemented as a result of sensitive server-side operations being invoked as a result of embedded links 
in the page or other general design patterns. These patterns are often implemented without knowledge of CSRF and 
an understanding of CSRF prevention design strategies. While this control does help mitigate the risk of CSRF attacks, 
the unique per-session token is being exposed for GET requests. CSRF tokens in GET requests are potentially leaked at 
several locations: browser history, HTTP log files, network appliances that make a point to log the first line of an HTTP 
request, and Referer headers if the protected site links to an external site.
In the latter case (leaked CSRF token due to the Referer header being parsed by a linked site), it is trivially easy for the 
linked site to launch a CSRF attack on the protected site, and they will be able to target this attack very effectively, 
since the Referer header tells them the site as well as the CSRF token. The attack could be run entirely from javascript, 
so that a simple addition of a script tag to the HTML of a site can launch an attack (whether on an originally malicious 
site or on a hacked site). This attack scenario is easy to prevent, the referer will be omitted if the origin of the request 
…
Sample 14.2
A8 - Cross-Site Request Forgery (CSRF)
144
is HTTPS. Therefore this attack does not affect web applications that are HTTPS only.
The ideal solution is to only include the CSRF token in POST requests and modify server-side actions that have state 
changing affect to only respond to POST requests. This is in fact what the RFC 2616 requires for GET requests. If sen-
sitive server-side actions are guaranteed to only ever respond to POST requests, then there is no need to include the 
token in GET requests.
Viewstate (ASP.NET)
ASP.NET has an option to maintain your ViewState. The ViewState indicates the status of a page when submitted to 
the server. The status is defined through a hidden field placed on each page with a  control. 
Viewstate can be used as a CSRF defense, as it is difficult for an attacker to forge a valid Viewstate. It is not impossible 
to forge a valid Viewstate since it is feasible that parameter values could be obtained or guessed by the attacker. 
However, if the current session ID is added to the ViewState, it then makes each Viewstate unique, and thus immune 
to CSRF.
To use the ViewStateUserKey property within the Viewstate to protect against spoofed post backs add the following 
in the OnInit virtual method of the page-derived class (This property must be set in the Page.Init event)
To key the Viewstate to an individual using a unique value of your choice use “(Page.ViewStateUserKey)”.  This must 
be applied in Page_Init because the key has to be provided to ASP.NET before Viewstate is loaded. This option has 
been available since ASP.NET 1.1.  However, there are limitations on this mechanism. Such as, ViewState MACs are only 
checked on POSTback, so any other application requests not using postbacks will happily allow CSRF.
Double Submit Cookies
Double submitting cookies is defined as sending a random value in both a cookie and as a request parameter, with 
the server verifying if the cookie value and request value are equal.
When a user authenticates to a site, the site should generate a (cryptographically strong) pseudorandom value and 
set it as a cookie on the user’s machine separate from the session id. The site does not have to save this value in any 
way. The site should then require every sensitive submission to include this random value as a hidden form value (or 
other request parameter) and also as a cookie value. An attacker cannot read any data sent from the server or modify 
cookie values, per the same-origin policy. This means that while an attacker can send any value he wants with a mali-
cious CSRF request, the attacker will be unable to modify or read the value stored in the cookie. Since the cookie value 
and the request parameter or form value must be the same, the attacker will be unable to successfully submit a form 
unless he is able to guess the random CSRF value.
Direct Web Remoting (DWR) Java library version 2.0 has CSRF protection built in as it implements the double cookie 
submission transparently.
The above CSRF prevents rely on the use of a unique token and the Same-Origin Policy to prevent CSRF by maintain-
ing a secret token to authenticate requests. The following methods can prevent CSRF by relying upon similar rules 
protected override OnInit(EventArgs e) {
     base.OnInit(e); 
     if (User.Identity.IsAuthenticated)
     ViewStateUserKey = Session.SessionID; }
Sample 14.3
A8 - Cross-Site Request Forgery (CSRF)
145
that CSRF exploits can never break.
Checking The Referer Header
Although it is trivial to spoof the referer header on your own browser, it is impossible to do so in a CSRF attack. Check-
ing the referer is a commonly used method of preventing CSRF on embedded network devices because it does 
not require a per-user state. This makes a referer a useful method of CSRF prevention when memory is scarce. This 
method of CSRF mitigation is also commonly used with unauthenticated requests, such as requests made prior to 
establishing a session state which is required to keep track of a synchronization token.
However, checking the referer is considered to be a weaker from of CSRF protection. For example, open redirect 
vulnerabilities can be used to exploit GET-based requests that are protected with a referer check and some organiza-
tions or browser tools remove referrer headers as a form of data protection. There are also common implementation 
mistakes with referer checks. For example if the CSRF attack originates from an HTTPS domain then the referer will be 
omitted. In this case the lack of a referer should be considered to be an attack when the request is performing a state 
change. Also note that the attacker has limited influence over the referer. For example, if the victim’s domain is “site.
com” then an attacker have the CSRF exploit originate from “site.com.attacker.com” which may fool a broken referer 
check implementation. XSS can be used to bypass a referer check.
In short, referer checking is a reasonable form of CSRF intrusion detection and prevention even though it is not a 
complete protection. Referer checking can detect some attacks but not stop all attacks. For example, if the HTTP 
referrer is from a different domain and you are expecting requests from your domain only, you can safely block that 
request.
Checking The Origin Header
The Origin HTTP Header standard was introduced as a method of defending against CSRF and other Cross-Domain 
attacks. Unlike the referer, the origin will be present in HTTP request that originates from an HTTPS URL. If the origin 
header is present, then it should be checked for consistency.
Challenge-Response
Challenge-Response is another defense option for CSRF. As mentioned before it is typically used when the func-
tionality being invoked is high risk.  While challenge-response is a very strong defense to CSRF (assuming proper 
implementation), it does impact user experience. For applications in need of high security, tokens (transparent) and 
challenge-response should be used on high risk functions.
The following are some examples of challenge-response options:
•  CAPTCHA
•  Re-Authentication (password)
•  One-time Token
No Cross-Site Scripting (XSS) Vulnerabilities
Cross-Site Scripting is not necessary for CSRF to work. However, any cross-site scripting vulnerability can be used to 
defeat token, Double-Submit cookie, referer and origin based CSRF defenses. This is because an XSS payload can 
simply read any page on the site using a XMLHttpRequest and obtain the generated token from the response, and in-
clude that token with a forged request. This technique is exactly how the MySpace (Samy) worm defeated MySpace’s 
anti CSRF defenses in 2005, which enabled the worm to propagate. XSS cannot defeat challenge-response defenses 
such as Captcha, re-authentication or one-time passwords. It is imperative that no XSS vulnerabilities are present to 
ensure that CSRF defenses can’t be circumvented.
A8 - Cross-Site Request Forgery (CSRF)
146
A9
147
A9 - Using Components with Known Vulnerabilities
Components, such as libraries, frameworks, and other software modules, almost always run with full privileg-
es. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. 
Applications using components with known vulnerabilities may undermine application defenses and enable 
a range of possible attacks and impacts.
15.1 Description
Today it would be rare for an application or software component to be developed without the re-use of some 
open source or paid-for library or framework.  This makes a lot of sense as these frameworks and libraries are 
already developed and working, and have had a good degree of testing applied.  However these third party 
components can also be a source of security vulnerabilities when an attacker finds a flaw in the components 
code, in fact this flaw has added attraction since the attacker knows the exploit will work on everyone who is 
using the component.
This issue has matured to such a state that flaws/exploits for popular frameworks, libraries and operating sys-
tems are sold on underground markets for large sums of money.
What to Review
There is really no code to review for this topic, unless your organization has taken it upon itself to review the code of 
the component (assuming its open source and not a closed source third party library), in which case the code review 
would be similar to any other audit review.  However code review can be used within the larger company-wide track-
ing or audit mechanisms that lets the organization know what third party code it is using.
Regardless of the size of company, the use of third party components, and their versions, should be tracked to en-
sure the organization can be alerted when any security vulnerabilities are flagged.  For smaller companies with 1 or 
2 products this tracking could be as easy as a spreadsheet or wiki page, however for larger companies with 100s of 
applications or products, the task of tracking developer use of third party frameworks and libraries is equally as large 
as the risk posed by those libraries.
If a company has 20 products and each of those products use 5 or 6 third party components (e.g. Apache web servers, 
OpenSSL crypto libraries, Java libraries for regex and DB interactions, etc.) that leaves the company with over 100 
external sources where security vulnerabilities can come from.  If the company suddenly hears of a heartbleed type 
vulnerability, it has to be able to react and upgrade those affected applications, or take other countermeasures, to 
protect itself and its customers.
Controlling the Ingredients
One method used by larger companies to limit their exposure to third party vulnerabilities is to control which librar-
ies can be used by their developers.  For example they could specify that developers should use a certain version of 
OpenSSL as the crypto library instead of other options.  
This allows management and risk controllers to know their risk profile to vulnerabilities on the market, if a bug ap-
pears in bouncycastle, they know they are not exposed (i.e. some developer didn’t use bouncycastle on one of the 
products, because it’s not on the list of crypto libraries to use).  On the other hand, if there is a bug in OpenSSL, all their 
eggs are in that basket and they need to upgrade immediately.
USING COMPONENTS WITH KNOWN 
VULNERABILITIES
A9
148
A9 - Using Components With Known Vulnerabilities
There will obviously be technical challenges to limiting the choices of third party components, and such a policy 
could be unpopular with developers who’ll want to use the latest and greatest framework, but the first step to secur-
ing a product is knowing what ingredients you’ve made it with.
How can such a policy be tracked or enforced?  At some point the library or framework, in the form of .dll/.so or as 
source code, will be integrated into the codeline.
Such integrations should be subject to code review, and as a task of this code review the reviewer can check:
1. The library is one that can be used in the product suite (or maybe is already used and the developer is simply 
unaware, in which case the review should be rejected and the original integration used)
2. Any tracking or auditing software (even a basic spread sheet) is updated to reflect that the product is using the 
third party library.  This allows for rapid remediation if a vulnerability appears, meaning the product will be patched. 
SledgeHammer to Crack a Nut
One last responsibility of the reviewer will be to ensure the correct third party library is being used for the function-
ality needed.  Many libraries come with vast amounts of functionality which may not be used.  For example, is the 
developer including a library to perform their regex’s, but which also will include other functionality not used/needed 
by the application?  This increases the attack surface of the application and can cause unexpected behavior when 
that extra code opens a port and communicates to the internet.
If the reviewer thinks too much functionality/code is being introduced they can advise to turn off non-used function-
ality, or better still find a way to not include that functionality in the product (e.g. by stripping out code, or hardcoding 
branches so unused functions are never used).
The OWASP project “OWASP Dependency Check” can provide a measure of automation for library checking 
(https://www.owasp.org/index.php/OWASP_Dependency_Check)
149
A10
150
Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to de-
termine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, 
or use forwards to access unauthorized pages.
16.1 Description
Unvalidated redirects and forwards are possible when a web application accepts untrusted input that could cause 
the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL 
input to a site, an attacker may successfully launch a phishing scam and steal user credentials.
As the server name in the modified link is identical to the original site, phishing attempts may have a more trust-
worthy appearance. Invalidated redirect and forward attacks can also be used to maliciously craft a URL that would 
pass the application’s access control check and then forward the attacker to privileged functions that they would 
normally not be able to access.
Redirects
Redirect functionality on a web site allows a user’s browser to be told to go to a different page on the site.  This can be 
done to improve user interface or track how users are navigating the site. 
To provide the redirect functionality a site may have a specific URL to perform the redirect:
• http://www.example.com/utility/redirect.cgi
This page will take a parameter (from URL or POST body) of ‘URL’ and will send back a message to the user’s browser 
to go to that page, for example:
• http://www.example.com/utility/redirect.cgi?URL=http://www.example.com/viewtxn.html
However this can be abused as an attacker can attempt to make a valid user click on a link that appears to be for 
www.example.com but which will invoke the redirect functionality on example.com to cause the users browser to go 
to a malicious site (one that could look like example.com and trick the user into entering sensitive or authentication 
information:
• http://www.example.com/utiltiy/redirect cgi?URL=http://attacker.com/fakelogin.html
Forwards
Forwards are similar to redirects however the new page is not retrieved by the users browser (as occurred with the 
redirect) but instead the server framework will obtain the forwarded page and return it to the users browser.  This is 
achieved by ‘forward’ commands within Java frameworks (e.g. Struts) or ‘Server.Transfer’ in .Net.  As the forward is per-
formed by the server framework itself, it limits the range of URLs the attacker can exploit to the current web site (i.e. 
attacker cannot ‘forward’ to attacker.com), however this attack can be used to bypass access controls.  For example, 
where a site sends the forwarded page in the response:
• If purchasing, forward to ‘purchase.do’
• If cancelling, forward to ‘cancelled.do’
This will then be passed as a parameter to the web site:
• http://www.example.com/txn/acceptpayment.html?FWD=purchase
UNVALIDATED REDIRECTS AND FORWARDS
A10
A10 - Unvalidated Redirects And Forwards
151
A10 - Unvalidated Redirects And Forwards
If instead an attacker used the forward to attempt to access to a different page within the web site, e.g. admin.do, then 
they may access pages that they are not authorized to view, because authorization is being applied on the ‘accept-
payment’ page, instead of the forwarded page.
What to Review
If any part of the URL being forwarded, or redirected, to is based on user input, then the site could be at risk. Ensure:
• All redirects/forwards are constructed based on a whitelist, or
• All redirtects/forwards use reletive paths to ensure they stay on the trusted site  
Redirects
The following examples demonstrate unsafe redirect and forward code. The following Java code receives the URL 
from the ‘url’ parameter and redirects to that URL.
The following PHP code obtains a URL from the query string and then redirects the user to that URL.
A similar example of C# .NET Vulnerable Code:
The above code is vulnerable to an attack if no validation or extra method controls are applied to verify the 
certainty of the URL. This vulnerability could be used as part of a phishing scam by redirecting users to a ma-
licious site. If user input has to be used as part of the URL to be used, then apply strict validation to the input, 
ensuring it cannot be used for purposes other than intended.
Note that vulnerable code does not need to explicitly call a ‘redirect’ function, but instead could directly modi-
fy the response to cause the client browser to go to the redirected page. Code to look for is shown in table 22.
response.sendRedirect(request.getParameter(“url”));
Sample 16.1
$redirect_url = $_GET[‘url’];
 header(“Location: “ . $redirect_url);
Sample 16.2
string url = request.QueryString[“url”];
 Response.Redirect(url);
Sample 16.3
152
Where an attacker has posted a redirecting URL on a forum, or sends in an e-mail, the web site can check the 
referer header to ensure the user is coming from a page within the site, although this countermeasure will not 
apply if the malicious URL is contained within the site itself.
Consider creating a whitelist of URLs or options that a redirect is allowed to go to, or deny the ability for the 
user input to determine the scheme or hostname of the redirect.  A site could also encode (or encrypt) the 
URL value to be redirected to such that an attacker cannot easily create a malicious URL parameter that, when 