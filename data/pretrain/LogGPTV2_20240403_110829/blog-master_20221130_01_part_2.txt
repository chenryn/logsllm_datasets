insert into ip2int8geo (f,t,province,city) select inet2int8(network(ip)), inet2int8(network(ip)) + 2^(32-masklen(ip)) - 1, province, city from ip2geo;    
INSERT 0 8617    
```    
3、创建from to 两个字段的combine索引    
```    
create index idx_2 on ip2int8geo (f,t);    
```    
4、创建获取随机IP INT8的函数用于测试    
```    
create or replace function genrandomipint8(int) returns int8 as $$    
  select f + ceil((t-f)*random()) from ip2int8geo where id=$1;     
$$ language sql strict;     
-- 这个是驱动列靠前的值, 搜索较快    
postgres=# select genrandomipint8(10);    
 genrandomipint8     
-----------------    
        16845351    
(1 row)    
-- 这个是驱动列靠后的值, 明显看出btree的大范围过滤    
postgres=# select genrandomipint8(8000);    
 genrandomipint8     
-----------------    
      3411550659    
(1 row)    
```    
```    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from ip2int8geo where f = 16845351;    
                                                        QUERY PLAN                                                            
--------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_2 on public.ip2int8geo  (cost=0.29..2.50 rows=1 width=44) (actual time=0.006..0.007 rows=1 loops=1)    
   Output: id, f, t, province, city    
   Index Cond: ((ip2int8geo.f = 16845351))    
   Buffers: shared hit=3    
 Planning:    
   Buffers: shared hit=3    
 Planning Time: 0.114 ms    
 Execution Time: 0.018 ms    
(8 rows)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from ip2int8geo where f = 3411550659;    
                                                          QUERY PLAN                                                              
------------------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_2 on public.ip2int8geo  (cost=0.29..167.31 rows=568 width=44) (actual time=0.438..0.440 rows=1 loops=1)    
   Output: id, f, t, province, city    
   Index Cond: ((ip2int8geo.f = '3411550659'::bigint))    
   Buffers: shared hit=33    
 Planning Time: 0.133 ms    
 Execution Time: 0.469 ms    
(6 rows)    
postgres=# select * from ip2int8geo where f = 3411550659;    
  id  |     f      |     t      |   province   |        city             
------+------------+------------+--------------+---------------------    
 8000 | 3411550208 | 3411558399 | 广东省深圳市 | 天威有线宽带(关内))    
(1 row)    
```    
5、创建一个函数, 用于作btree索引的压力测试    
```    
create or replace function test_getip2int8geo () returns setof ip2int8geo as $$    
declare    
  i int8;    
begin    
  i := genrandomipint8( ceil(random()*8617)::int );    
  return query select * from ip2int8geo where f = i;    
end;    
$$ language plpgsql strict;    
postgres=# select * from test_getip2int8geo();    
  id  |     f      |     t      | province |  city      
------+------------+------------+----------+--------    
 3798 | 1736744960 | 1736745983 | 台湾省   | 台北市    
(1 row)    
Time: 1.058 ms    
postgres=# select * from test_getip2int8geo();    
  id  |     f     |     t     | province |  city      
------+-----------+-----------+----------+--------    
 1385 | 771539968 | 771540991 | 北京市   | 鹏博士    
(1 row)    
Time: 0.615 ms    
```    
6、使用spgist索引, 数据不管靠前还是靠后, 扫描的数据块都差不多, 性能基本都一样.      
```    
postgres=# select * from ip2geo offset 7999 limit 1;    
       ip       |   province   |        city             
----------------+--------------+---------------------    
 203.88.32.0/19 | 广东省深圳市 | 天威有线宽带(关内))    
(1 row)    
postgres=# explain (analyze,verbose,timing,costs,buffers) select * FROM ip2geo where  ip >>= '203.88.45.200/19' ;    
                                                      QUERY PLAN                                                          
----------------------------------------------------------------------------------------------------------------------    
 Index Scan using idx_1 on public.ip2geo  (cost=0.15..4.60 rows=3 width=31) (actual time=0.031..0.031 rows=1 loops=1)    
   Output: ip, province, city    
   Index Cond: (ip2geo.ip >>= '203.88.45.200/19'::inet)    
   Buffers: shared hit=4    
 Planning Time: 0.066 ms    
 Execution Time: 0.046 ms    
(6 rows)    
postgres=# select * FROM ip2geo where  ip >>= '203.88.45.200/19' ;    
       ip       |   province   |        city             
----------------+--------------+---------------------    
 203.88.32.0/19 | 广东省深圳市 | 天威有线宽带(关内))    
(1 row)    
```    
记录越多, btree combine扫描过滤性越差, 与spgist索引的差距就会越大. 例如, 我们可以使用以下100万条测试case来证明这个结论.   
扫描的数据块数量相差上百倍.  
```  
create sequence seq INCREMENT by 1000;  
create table test (f int, t int);   
insert into test select n , n+999 from (select nextval('seq') n from generate_series(1,1000000) ) t ;  
postgres=#  select * from test limit 10;  
  f   |   t     
------+-------  
    1 |  1000  
 1001 |  2000  
 2001 |  3000  
 3001 |  4000  
 4001 |  5000  
 5001 |  6000  
 6001 |  7000  
 7001 |  8000  
 8001 |  9000  
 9001 | 10000  
(10 rows)  
postgres=# select min(f), max(t) from test;  
 min |    max       
-----+------------  
   1 | 1000000000  
(1 row)  
create index idx_test on test (f,t);  
explain (analyze,verbose,timing,costs,buffers) select * from test where f =500000000;  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from test where f =500000000;  
                                                             QUERY PLAN                                                                
-------------------------------------------------------------------------------------------------------------------------------------  
 Index Only Scan using idx_test on public.test  (cost=0.42..9021.81 rows=250000 width=8) (actual time=16.605..16.608 rows=1 loops=1)  
   Output: f, t  
   Index Cond: ((test.f = 500000000))  
   Heap Fetches: 0  
   Buffers: shared hit=1370  
 Planning Time: 0.098 ms  
 Execution Time: 16.629 ms  
(7 rows)  
create index idx_test_1 on test using spgist (int4range(f,t+1));  
or
create index idx_test_2 on test using gist (int4range(f,t+1));  
explain (analyze,verbose,timing,costs,buffers) select * from test where int4range(f,t+1) @> 500000000;  
vi t1.sql  
\set id random(1,1000000000)  
select * from test where f = :id;  
vi t2.sql  
\set id random(1,1000000000)  
select * from test where int4range(f,t+1) @> :id;
pgbench -M prepared -n -r -P 1 -f ./t1.sql -c 12 -j 12 -T 120  
pgbench -M prepared -n -r -P 1 -f ./t2.sql -c 12 -j 12 -T 120  
```  
https://gis.stackexchange.com/questions/374091/when-to-use-gist-and-when-to-use-sp-gist-index  
## 参考  
[《PostgreSQL 随机查询采样 - 既要真随机、又要高性能 - table sample方法》](../202105/20210527_01.md)    
[《如何获得IP地址对应的地理信息库, 实现智能DNS解析? 就近路由提升全球化部署业务的访问性能》](../202211/20221124_09.md)    
[《PostgreSQL Oracle 兼容性之 - DBMS_SQL(存储过程动态SQL中使用绑定变量-DB端prepare statement)》](../201803/20180323_02.md)    
[《PostgreSQL 黑科技 range 类型及 gist index 20x+ speedup than Mysql index combine query》](../201206/20120607_01.md)    
[《PostgreSQL 黑科技 range 类型及 gist index 助力物联网(IoT)》](../201205/20120517_01.md)    
[《PostgreSQL gist, spgist索引的原理、差别、应用场景》](../201906/20190604_03.md)  
[《PostgreSQL SP-GiST 索引原理》](../202011/20201128_01.md)  
[《PostgreSQL 黑科技 - 空间聚集存储, 内窥GIN, GiST, SP-GiST索引》](../201709/20170905_01.md)  
[《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)  
https://www.postgresql.org/docs/15/functions-net.html  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")