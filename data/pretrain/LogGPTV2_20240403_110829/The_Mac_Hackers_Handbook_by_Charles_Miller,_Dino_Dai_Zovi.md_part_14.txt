pydbg.suspend_all_threads()
pydbg.process_restore()
pydbg.write_process_memory(pydbg.context.Esp,
struct.pack(‘L’, value))
pydbg.resume_all_threads()
value = value + 1
else:
pydbg.bp_set(0x00001ffc,””, 0 )
return DBG_CONTINUE
dbg = pydbg()
9955336633cc0044..iinndddd 110000 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 101
# register a breakpoint handler function.
dbg.set_callback(EXCEPTION_BREAKPOINT, handler_breakpoint)
dbg.set_callback(EXCEPTION_ACCESS_VIOLATION, handler_badness)
dbg.attach(int(sys.argv[1]))
dbg.bp_set(0x00001fbc,”Entry to function print_hi”,0 )
dbg.bp_set(0x00001fbf,”The next instruction after entry”,1 )
dbg.debug_event_loop()
Take a closer look at this script. Again the script begins by importing PyDbg.
Next it defi nes an exception handler, which simply prints out the value of the
global variable value. The next function contains the meat of the script.
The function can take three actions, depending on the value of the program
counter at the moment the function is called. The fi rst action is for when
the function print_hi is entered. In that case the handler function takes a
memory snapshot of the process. This entails saving a copy of all the writ-
able memory regions as well as the current values of the context (registers)
for each of the threads.
The second action occurs after the execution of the instruction that follows
the taking of the snapshot. Keep in mind that this will be the fi rst instruc-
tion executed after the snapshot is restored. This sets a breakpoint at the fi rst
instruction that is executed after the print_hi function returns—that is, when
the function being fuzzed is complete.
The third action occurs at this breakpoint, after the print_hi function com-
pletes. At this point the function has executed completely and no problems have
been found, or else the program would not have gone this far. The script now
restores the snapshot and writes a new value for the argument to this func-
tion, stored on the stack. It then continues execution (from where the snapshot
occurred). Restoring the snapshot includes copying the stored memory regions
to where they were read from and returning the context to its previous state.
Finally, the script registers these functions for the appropriate exceptions,
attaches to the process in question, and sets breakpoints at the fi rst and second
instructions in the function. It then enters the event loop. Notice that you can’t
set the fi nal breakpoint for after print_hi completes before the fi rst snapshot
is taken. Otherwise you run into the strange situation where the breakpoint
is included in the snapshot (a 0xCC is in memory, but PyDbg may no longer
realize it is there). Setting the breakpoint dynamically, like this script does,
removes any possibility of the debugger getting confused with breakpoints
stored within the snapshot.
Here is what running the program and attaching with the PyDbg Script
looks like:
$ ./test5 2
hi
9955336633cc0044..iinndddd 110011 11//2255//0099 44::4400::4466 PPMM
102 Part II ■ Discovering Vulnerabilities
h
hi
hi?
hi??
hi???
hi????
hi????u
hi????u?
hi????u?
hi????u??
hi????u???
hi????u????
hi????u?????
hi????u??????
hi????u???????
hi????u????????
Bus error
In the window running the fuzzer, you simply see the following output:
Caused a fault with input 11
In this case you fuzzed with the simplest type, an integer, but you could have
done things more intelligently, such as by trying all the powers of 2, or large and
small values, or other possibilities. For other types, such as strings (char *), each
time you want to run the function being tested, you can allocate some space in the
process being tested, write the string to this new space, and replace the pointer
being passed to the function with a pointer to your new string.
Binary Code Coverage with Pai Mei
Another situation in which DTrace fails is when you want to perform actions
at hundreds (or thousands) of different places. It simply takes too long to acti-
vate that number of probes. An example of this is when you want to perform
actions at each basic block, such as when collecting code coverage in binaries.
For this, you would like to set a breakpoint at each basic block in a program.
Then, by observing which breakpoints were hit, you would know which basic
blocks were executed, and thus you would have your code-coverage informa-
tion without requiring source code.
Code coverage can be useful during testing because it helps indicate the sec-
tions of code that have not been tested. Code-coverage information has other
uses, as well. For example, when reverse-engineering a binary, you can isolate
the function for which various pieces of the executable are responsible. In this
manner, you are able to break up large binaries into smaller pieces that are more
manageable. This can be helpful when trying to fi gure out why a particular
9955336633cc0044..iinndddd 110022 11//2255//0099 44::4400::4466 PPMM
Chapter 4 ■ Tracing and Debugging 103
binary crashes on a given input. We’ll spend more time on reverse engineering
in this manner in Chapter 6, “Reverse Engineering.”
Pai Mei is a reverse-engineering framework built on top of PyDbg (Figure 4-1).
Since PyDbg now works on Mac OS X, we get Pai Mei for free. One of the most
useful Pai Mei modules is called pstalker, or Process Stalker. This module does
exactly what we have been discussing; it can set breakpoints at each function or
basic block and record which are hit when tested. We’ll walk through a complete
example of how to use this tool in Mac OS X.
Figure 4-1: An overview of the Pai Mei architecture
As an example of how you might use Pai Mei to isolate the portion of an
executable that performs a particular action, consider the Calculator program
that comes installed in Mac OS X. Suppose you wanted to know exactly which
basic blocks in the binary were responsible for the + button (that is to say, only
the basic blocks that are executed when the + button is pushed). One way to
fi nd this information would be to spend many hours (or days) statically reverse-
engineering the binary and associated libraries in an attempt to understand
exactly how the program works. Another approach is to use Pai Mei to get the
answer in a few minutes.
The fi rst thing you need to do to use Pai Mei is to tell it where all the basic
blocks from the binary begin—that is, where it should set the breakpoints. The
way to do this is through IDA Pro (http://www.hex-rays.com/idapro/) a com-
mercial disassembler. For over a year, IDA Pro has had excellent support for
Mach-O universal binaries. Unfortunately, IDA Pro runs only in Windows, so
you’ll need a computer with Windows or a virtual machine running Windows
for this step. Pai Mei works on individual libraries or binaries, so you’ll have to
9955336633cc0044..iinndddd 110033 11//2255//0099 44::4400::4466 PPMM
104 Part II ■ Discovering Vulnerabilities
decide which one to start with (you can include multiple ones, if you wish). The
following code uses otool to get a list of the shared libraries Calculator uses.
$ otool -L /Applications/Calculator.app/Contents/MacOS/Calculator
/Applications/Calculator.app/Contents/MacOS/Calculator:
/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa
(compatibility version 1.0.0, current version 12.0.0)
/System/Library/PrivateFrameworks/SpeechDictionary.framework/Versions/A/
SpeechDictionary (compatibility version 1.0.0, current version 1.0.0)
/System/Library/PrivateFrameworks/SpeechObjects.framework/Versions/A/
SpeechObjects (compatibility version 1.0.0, current version 1.0.0)
/System/Library/Frameworks/SystemConfiguration.framework/Versions/A/
SystemConfiguration (compatibility version 1.0.0, current version
204.0.0)
/System/Library/PrivateFrameworks/Calculate.framework/Versions/A/
Calculate (compatibility version 1.0.0, current version 1.0.0)
/System/Library/Frameworks/ApplicationServices.framework/Versions/A/
ApplicationServices (compatibility version 1.0.0, current version
34.0.0)
/usr/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version
1.0.0)
/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version
111.0.0)
/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version
227.0.0)
/System/Library/Frameworks/CoreFoundation.framework/Versions/A/
CoreFoundation (compatibility version 150.0.0, current version 476.0.0)
/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
(compatibility version 45.0.0, current version 949.0.0)
/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation
(compatibility version 300.0.0, current version 677.0.0)
Of these, the Framework called Calculate seems most promising, so select
that one. Grabbing that fi le, transferring it to a Windows computer with IDA
Pro, and dragging it onto the IDA Pro icon starts the disassembly.
Immediately, IDA Pro recognizes it is a universal binary and asks which archi-
tecture you want to examine; see Figure 4-2. Select Fat Mach-O File, 3. I386. After
a few seconds, IDA Pro will complete its disassembly. At this point you can take
advantage of an IDA Pro add-on called IDAPython (http://d-dome.net/idapy-
thon/) that allows Python scripts to be run within IDA Pro. Pai Mei comes with
one called pida_dump.py. Select File ➢ Python File ➢ pida_dump.py. It will ask
what level of analysis you require. For this project, choose basic blocks. Answer
no to the next two dialogues that concern API calls and RPC interfaces. Finally,
save the resulting fi le as Calculate.pida.
PIDA fi les are binary fi les that contain the information Pai Mei needs for a given
binary. Within Python, these contents can be accessed with the pida module:
9955336633cc0044..iinndddd 110044 11//2255//0099 44::4400::4477 PPMM
Chapter 4 ■ Tracing and Debugging 105
#!python
import pida
p = pida.load(“Calculator.pida”);
for f in p.nodes.values():
print “Function %s starts at %x and ends at %x” % (f.name,
f.ea_start, f.ea_end)
for bb in f.nodes.values():
print “ Basic block %x” % bb.ea_start
Figure 4-2: IDA Pro dissects the library.
Executing this script gives a list of the address of every basic block from the
Calculate shared library, and each function.
Function _memcpy starts at c203 and ends at c207
Basic block c203
Function _calc_yylex starts at 6605 and ends at 73ad
Basic block 7200
Basic block 7003
…
Now that you have the necessary PIDA fi le, it is time to fi re up Pai Mei and
get to work. Start it from the command line.
$ python PAIMEIconsole.pyw
Click on the PAIMEIpstalker icon. Pai Mei stores all of its information in a
MySQL database. Connect to it by selecting Connections ➢ MySQL Connect. Next,
load the PIDA fi le you created earlier by pressing the Add Module(s) button.
9955336633cc0044..iinndddd 110055 11//2255//0099 44::4400::4477 PPMM
106 Part II ■ Discovering Vulnerabilities
Now you need to create a couple of targets. The basic idea to discover what
code is exclusively related to the + button is fi rst to fi nd code that is not associ-
ated with the + button. Then record the code executed when you press the +
button, and remove any of the hits that were executed when you didn’t press
the + button. Pai Mei has exactly this functionality. Right-click on Available
Targets and select Add Target. Call it Calculator. Then right-click on that and
select Add Tag. Create two tags, one called not-plus-button and another called
plus-button-only. Right-click on not-plus-button and pick Use for Stalking. Then
press the Refresh Process List button and fi nd the Calculator process. Click the
radio button next to Basic for basic blocks. Uncheck the box marked Heavy. This
setting is if you wish to record the context at each breakpoint. You care only
about code coverage, so this is not necessary. Finally, press the Start Stalking
button. It should say something like
Setting 936 breakpoints on basic blocks in Calculate
Now start doing things within the Calculator application, except do not hit the
+ button. Do simple math, use the memory functions, and move the application
around. As you perform actions, you’ll see breakpoints being hit within the Pai
Mei GUI. The more breakpoints that are hit, the faster the application will go
as more and more of the breakpoints will already be hit (and removed). When
you can’t hit any more breakpoints, press the Stop Stalking button. Pai Mei will
export all those hits into the MySQL database. You’ll see something like the
following in the Pai Mei console window.
Exporting 208 hits to MySQL
Those are basic blocks that are not associated strictly with the + button in
calculator.
Now right-click the plus-button-only tag and pick Use for Stalking. Right
click the not-plus-button tag and pick Filter Tag. This means “don’t set any
breakpoints on any of the hits in this tag.” Therefore, any breakpoints hit will
necessarily only have to do with the + button. Press the Start Stalking button
again. In Calculator, do a simple addition. Press Stop Stalking. To see these hits
in the Pai Mei GUI, right-click on the plus-button-only tag and select Load Hits.
You screen will look something like Figure 4-3.
You’ll see that only four basic blocks were hit and they all seem to be in
the same function. We can export these results into IDA Pro and look at them
graphically. Right-click the plus-button-only tag again and select Export to IDA.
This will create an IDC fi le, which is a script that IDA Pro understands. Now,
back in IDA Pro, click File ➢ IDC File, and then select the fi le you just created.
All the basic blocks that Pai Mei found were executed are now colored in within
IDA Pro (see Figure 4-4). In this case, all the basic blocks executed are from
one function, named _functionAddDecimal. It looks like you found the code
responsible for the + button!
9955336633cc0044..iinndddd 110066 11//2255//0099 44::4400::4477 PPMM
Chapter 4 ■ Tracing and Debugging 107
Figure 4-3: The Pai Mei GUI displays the basic blocks associated with the + button.
Figure 4-4: IDA Pro displaying the basic blocks executed by the + button
9955336633cc0044..iinndddd 110077 11//2255//0099 44::4400::4477 PPMM
108 Part II ■ Discovering Vulnerabilities
iTunes Hates You
As discussed previously, iTunes has certain anti-debugging features built into it.
Namely, it is not possible to attach or trace to the process using GDB or DTrace.
Observe what happens if you try to attach to iTunes using GDB:
(gdb) attach 1149
Attaching to process 1149.
Segmentation fault
This is because iTunes issues the ptrace PT_DENY_ATTACH request when
it starts up and at other times within its lifetime. The man page for ptrace
explains:
PT_DENY_ATTACH
This request is the other operation used by the traced process; it allows a process
that is not currently being traced to deny future traces by its parent. All other
arguments are ignored. If the process is currently being traced, it will exit with
the exit status of ENOTSUP; otherwise, it sets a fl ag that denies future traces.
An attempt by the parent to trace a process which has set this fl ag will result in a
segmentation violation in the parent.
Trying to attach to iTunes with GDB (or any ptrace-like debugger) causes
it to die with a segmentation violation—how rude! Trying to run a DTrace
script against iTunes doesn’t crash, but doesn’t actually turn on the probes.
From DTrace’s perspective, absolutely nothing is happening within iTunes!
Presumably, this anti-debugging feature is to protect Apple’s DRM.
This mechanism is enforced in the kernel. Checking out the XNU source code
reveals the magic. You see in the fi le bsd/kern/mach_process.c the following
code for the ptrace system call.
if (uap->req == PT_DENY_ATTACH) {
proc_lock(p);
if (ISSET(p->p_lflag, P_LTRACED)) {
proc_unlock(p);
exit1(p, W_EXITCODE(ENOTSUP, 0), retval);
/* drop funnel before we return */
thread_exception_return();
/* NOTREACHED */
}
SET(p->p_lflag, P_LNOATTACH);
proc_unlock(p);
return(0);
}
9955336633cc0044..iinndddd 110088 11//2255//0099 44::4400::4477 PPMM
Chapter 4 ■ Tracing and Debugging 109
When a process issues the PT_DENY_ATTACH request, it exits if it is cur-
rently being traced; otherwise it sets the P_LNOATTACH fl ag for the process.
Later in the same function, if a process tries to attach to a process with the
P_LNOATTACH fl ag set, it segfaults.
if (uap->req == PT_ATTACH) {
…
if (ISSET(t->p_lflag, P_LNOATTACH)) {
psignal(p, SIGSEGV);
}
As for DTrace, the bsd/dev/dtrace/dtrace.c fi le shows what happens.
#if defined(__APPLE__)
/*
* If the thread on which this probe has fired belongs to a
process marked P_LNOATTACH
* then this enabling is not permitted to observe it. Move
along, nothing to see here.
*/
if (ISSET(current_proc()->p_lflag, P_LNOATTACH)) {
continue;
}
#endif /* __APPLE__ */
This comes from the dtrace_probe() function that the provider calls to fi re
a probe. If the process has set the P_LNOATTACH flag, DTrace doesn’t do
anything.