• One alert per record: alert messages must not be fragmented across records, and a record containing an
alert message must contain only that message.
Additional content types must stipulate appropriate rules for record boundaries.
Records are optionally padded and then protected using an AEAD scheme [32, Sections 5.2–5.4]. First,
the record R is encoded as a string X = R. fragment (cid:107)(cid:104)R.type(cid:105)8 (cid:107) ((cid:104)0(cid:105)8)p for some p ∈ N such that the
length of the ciphertext is less than 214 + 256 bytes. The padded record X is encrypted with associated
data ε (the empty string) and with a nonce N that we will deﬁne in a moment. The protected record is
deﬁned as
type struct { int opaque type, legacy record version, length,
str encrypted record } TLSCiphertext
14
where opaque type has a ﬁxed value (23), legacy record version has a ﬁxed value (771, or 0x0303 in hexadec-
imal), and length is the length of encrypted record in bytes. The nonce N is computed from a sequence
number seqn and an initialization vector IV [32, Section 5.3]; both the key K and IV are derived from a
shared secret [32, Sections 7.1–7.2] using an extract-and-expand key-derivation scheme [24]. The length of
the IV is determined from the permitted nonce lengths of the AEAD scheme.4 The nonce N is computed
as IV ⊕ (cid:104)seqn(cid:105)|IV |, where 0 ≤ seqn ≤ 264 − 1. Note that the client and server each uses a diﬀerent key and
IV for sending messages to the other; thus, each constitutes a unidirectional channel.
Usage limits, key changes, and protocol-level side-effects. The spec mandates that the key
be changed prior to the sequence number reaching its limit of 264 − 1 in order to prevent nonce reuse. It
also recommends that implementations keep track of how many bytes of plaintext have been encrypted and
decrypted with a single key and to change the key before the “safety limit” of the underlying AEAD scheme
has been reached.
As mentioned above, upon receipt of a message of unknown type, the receiver should send its peer an
unexpected message alert message. The alert stream is generally used to notify the recipient that the peer
is tearing down its connection and will no longer write to the channel. There are closure alerts and error
alerts [32, Section 6]. Both signal the tear down of the writer state, but they provide diﬀerent feedback.
The unexpected message alert is an example of the latter. Error alerts are also used to indicate things like
the ciphertext is inauthentic, or the record is malformed. An example of the former is close notify, which
indicates that the receiver should not expect any more data from the peer, but that no error occurred.
The key and IV change during the normal course of the protocol. An update is always a side eﬀect of the
handshake protocol. During transmission of application data, an update is signaled by a particular handshake
message described in [32, Section 4.6.3], which informs the receiver that the sender has reinitialized its state
and so must do so as well. The key change re-initializes the state of the sender and receiver with a fresh key
and IV (derived from the shared secret), and the sequence number is set to 0 [32, Section 5.3]. Therefore, no
sender or receiver state (that is, no state that pertains to the record layer) is held over after re-initialization
of the channel.
Observations about the standard. The standard deﬁnes some core functionalities, but leaves many design
choices up to the implementer; our analysis aims to establish what security the record layer provides given
this level of ﬂexibility. Our approach is shaped by two questions. First, which fully speciﬁed components
can be altered without impacting security? Second, which unspeciﬁed or partially speciﬁed components are
security critical? We begin with a couple of observations.
Record boundaries may leak the content type. The content type of each record is encrypted along
with the fragment. The intent, presumably, is to hide both the content and its type, but the record boundary
rules stipulated by the standard make hiding the type unachievable in general. Consider the one alert per
record rule, for example. The implementation is allowed to coalesce fragments of the same type, but a record
containing an alert must contain only that alert. Thus, the length of each record output by the sender may
(depending on the implementation) leak whether the record pertains to an alert or to application data. Of
course, the standard does permit implementations that hide the content type of each record, but this is quite
diﬀerent from mandating this property. The take away is that encrypting the content type does not imply its
indistinguishibility, since the record boundaries depend on it.
Associated data is unauthenticated. One aspect of the scheme that is precisely deﬁned is the for-
mat of the ciphertext transmitted on the wire. Each begins with a header composed of opaque type,
legacy record version, and length. The values of the ﬁrst two ﬁelds are ﬁxed by the spec, and the last
ﬁeld is crucial for correct operation, since it informs the receiver of how many bytes to read next. What
should the receiver do if the header is diﬀerent than speciﬁed? Changing the length ﬁeld bits should result
in the next ciphertext either being too short or too long, and so would be deemed inauthentic with over-
whelming probability. If opaque type or legacy record version is mangled, then it should be safe to proceed
since this does not aﬀect the inputs to decryption. However, doing so would be deemed an attack in our
ciphertext-integrity setting; changing these bits means the stream is out-of-sync, but since they are not au-
thenticated (encryption uses ε for associated data), the receiver would successfully decrypt. In fact, checking
the opaque type and legacy record version ﬁelds is left optional by the spec: implementations MAY check
4The scheme must specify limits for valid nonce lengths per RFC 5116 [25]. The maximum must be at least 8 bytes.
15
ExpprivAE,b(A) ExpintAE (A)
1 X ,Q ← ∅; K ←← K
res ←← AEnc res ← 0; AEnc,Dec
2
3 return res
Enc(N, A, M )
4 if N ∈ X return ⊥
5 C ← Enc N,A
K (M )
6
if b = 0 then C ←← {0, 1}λ(|M|)
7 Q ← Q ∪ {(N, A, C)}; X ← X ∪ {N}
8 return C
Dec(N, A, C)
9 M ← Dec N,A
10 if M (cid:54)= ⊥ and (N, A, C) (cid:54)∈ Q then res ← 1
11 return M
K (C)
Expmpriv-sM,(cid:96),b (A) Expsim-mstat
12 Env ← ε; (mx , dx ) ←← Init ( )
M,S,b
(A)
b(cid:48) ←← AMux
b(cid:48) ←← ADemux
1
1
13
14
15 return b(cid:48)
(var Env )
(var Env )
Mux(M0, sc0, M1, sc1)
16 L0 ← leak ((cid:96), M0, sc0)
17 L1 ← leak ((cid:96), M1, sc1)
18 if L0 (cid:54)= L1 then return (⊥,⊥)
19 (X, γ) ←← Mux SD (Mb, scb, var mx )
20 return (|X|, γ)
Demux(X)
21 if b = 1 then (∗,∗, γ) ←← Demux SD (X, var dx )
22 else γ ←← SA(|X|)
23 return γ
SD(I)
24 O ←← A2(I, var Env ); return O
left: security games PRIV and INT for AEAD scheme AE = (Enc , Dec , λ) with key space K. Right:
Figure 6:
security games mPRIV-S and SIM-mSTAT for partially speciﬁed stream multiplexer M = (Init , Mux , Demux ). The
former has an associated permitted leakage parameter (cid:96) ∈ {lensc, len, none}; procedure leak is as deﬁned in Figure 2.
these ﬁelds are correct and abort the connection if not [32, Section 5.2]. This presents us with a dilemma:
if we leave this choice up to the speciﬁcation details, then there is a trivial INT-CS attack, and so in order
to salvage security, we need to lift this “MAY” to a “MUST”.
This dilemma points to something rather strange about the record layer’s design: something that ought
not be security critical—in particular, the value of the delimiter bits—is security critical.
Indeed, this
observation motivates our partially speciﬁed viewpoint. To formalize the idea that the value of the delimeter
bits should not impact security, we simply let the speciﬁcation details choose these bits itself. This is safe
as long as the bits are authenticated and do not depend on sensitive values. We will formalize this idea in
our PSC in Section 5.3.
Remark. An alternative conclusion is that this vulnerability is only an artifact of our strong adversarial
model; mangling the delimiter bits should not aﬀect the inputs to decryption, and so does not constitute a
“real attack” on privacy or integrity in an intuitive sense. To this point we oﬀer a warning: this intuition
is correct only if down-stream handling of the plaintext is independent of the contents of these ﬁelds. Since
such behavior is beyond the scope of the TLS standard (and even our security model), these legacy ﬁelds
constitute an attack surface for implementations. The risk is not inconsiderable, as it is diﬃcult to predict
how systems will evolve to make use of TLS, and of these bits in particular. Indeed, they owe their very
existence to the need to maintain compatibility with older systems.
5.2 The building blocks
In this section we formalize the core components of the record layer; our aim is to sweep all but these
building blocks into the speciﬁcation details. The ﬁrst primitive, called a stream multiplexer, captures the
non-cryptographic functionality of the underlying channel. It transforms the data streams into a sequence
of channel fragments (i.e. records) such that for each stream context (i.e. content type), the output on
the receiver side is a preﬁx of the input on the sender side. TLS oﬀers a great deal of ﬂexibility with
respect to the stream multiplexer’s operation; the ﬂip side is that design choices here impact security of
the overall construction. (Recall the discussion of record boundaries in Section 5.1.) Thus, it will be useful
to consider stream multiplexers that are only partially speciﬁed. The remaining primitives are a scheme
16
for authenticated encryption with associated data and a method of generating nonces. These are the core
cryptographic functionalities and must be implemented correctly; as such, we will require these to be fully
speciﬁed.
Stream multiplexers. First, a partially speciﬁed stream-multiplexer is a triple M = (Init , Mux , Demux )
deﬁned as follows.
• Init ( ) (cid:55)→ (str mx , dx ). Generates the initial state of the stream multiplexer (used by the sender) and
demultiplexer (used by the receiver).
• Mux O(str M, sc, var str mx ) (cid:55)→ (str X, γ). Takes as input a plaintext fragment M , its stream con-
text sc, and the current state mx , and returns a channel fragment X and a status message γ.
• Demux O(str X, var str dx ) (cid:55)→ (str M, sc, γ). Takes a channel fragment X and the current state dx and
returns a plaintext fragment M , its stream context sc, and the status γ.
The speciﬁcation details are provided by the oracle O. Our intention is to capture only non-cryptographic
functionalities with stream multiplexers. (Of course, M may, in principal, use some sort of cryptographic
primitive, or even output encrypted records.) In order to facilitate a rigorous analysis of how design choices
here impact security of the channel overall, we formulate two security properties for partially speciﬁed
multiplexers. Both are deﬁned in Figure 6.
The mPRIV-S notion. The ﬁrst captures an adversary’s ability to discern information about the inputs
to Mux given (information about) its outputs. Like the PRIV-S game (Section 4.2), the mPRIV-S game is
parameterized by the permitted leakage (cid:96), one of lensc, len, or none (see Figure 2), and a challenge bit b. We
again formalize the adversary as a pair of algorithms (A1,A2). The ﬁrst, A1, is given an oracle Mux with
the same interface as Send in the PRIV-S game. The oracle invokes procedure Mux on inputs (Mb, scb)
(and with oracle access to SD for handling SD requests, which in turn invokes A2), and the adversary is
asked to guess b based on the outcome of its queries. Where the games diﬀer, however, is in the information
available to the adversary. Rather than return (X, γ) directly, the oracle returns γ and only the length of X.
This captures a much weaker property than usual indistinguishibility: rather than insisting (X, γ) not leak
anything beyond L = leak ((cid:96), M, sc), we insist only that (|X|, γ) not leak anything beyond L. Deﬁne the
advantage of A = (A1,A2) in attacking M in the mPRIV-S ((cid:96)) sense as
Advmpriv-sM,(cid:96)
(A) = 2 Pr
b
(cid:2) Expmpriv-sM,(cid:96),b (A) = b(cid:3) − 1 .
(t, q, µ) denote the maximum advantage of any t-time adversary making at most q queries
Let Advmpriv-sM,(cid:96)
to Mux with total bit-length at most µ.
The SIM-mSTAT notion. The second notion captures simulatability of the status message output
It is associated with a simulator S and a bit b. After initialization, the adversary is given
by Demux .
access to an oracle Demux. On input of X, if b = 1, then the oracle executes procedure Demux on input X
and returns the status message; otherwise it executes the simulator S on input |X| and with access to SD for
servicing SD requests. Deﬁne the advantage of A in attacking M in the SIM-mSTAT sense with simulator S
as
(cid:2) Expsim-mstat
M,S,b
(A) = b(cid:3) − 1 .
Advsim-mstat
M,S
(A) = 2 Pr
b
Let Advsim-mstat
with total bit-length at most µ.
M,S
(t, q, µ) denote the maximum advantage of any t-time adversary making q queries to Demux
AEAD schemes. We describe the syntax for authenticated encryption with associated data as prescribed
by the spec [25]. An AEAD scheme is a triple AE = (Enc , Dec , λ). The last element is a function λ : Z → Z
which describes the ciphertext length as a function of the plaintext length; we insist that λ is a bijection.
Algorithms Enc and Dec are both deterministic and have the following interfaces:
• Enc (str K, N, A, M ) (cid:55)→ str C. Maps a key K, nonce N , associated data A, and plaintext M to a
ciphertext C such that if C (cid:54)= ⊥, then |C| = λ(|M|) ≥ |M|.
• Dec (str K, N, A, C) (cid:55)→ str M . Maps K, N , A, and C to M such that if M (cid:54)= ⊥, then λ−1(|C|) = |M|.
17
We may denote the execution of Enc on (K, N, A, M ) by Enc N,A
K (M ). (Similarly for Dec .) We respec-
tively deﬁne the key, nonce, associated-data, and message space as the sets K,N ,A,M ⊆ {0, 1}∗ for
which Enc (K, N, A, M ) (cid:54)= ⊥ if and only if (K, N, A, M ) ∈ K × N × A × M; correctness requires that
Dec (K, K, N, A, Enc (K, N, A, M )) = M for every such (K, N, A, M ). (This condition implies that AE is
both correct and tidy in the sense of Namprempre, Rogaway, and Shrimpton [26].)
We will use standard notions of indistinguishibility under chosen-plaintext attack (PRIV) and integrity of
ciphertexts (INT) as deﬁned in Figure 6. As usual, the indistinguishibility game requires that the adversary
not repeat a nonce. The adversary for the PRIV and INT games is simply a randomized algorithm A( ) (cid:55)→
bool . that expects access to one or more oracles. To distinguish it from other adversaries in this paper, we
will refer to it as an AEAD adversary. Deﬁne the PRIV advantage of adversary A in attacking AE as
AdvprivAE (A) = 2 Pr
(cid:2) ExpprivAE,b(A) = b(cid:3) − 1
AdvintAE (A) = Pr(cid:2) ExpintAE (A) = 1(cid:3)