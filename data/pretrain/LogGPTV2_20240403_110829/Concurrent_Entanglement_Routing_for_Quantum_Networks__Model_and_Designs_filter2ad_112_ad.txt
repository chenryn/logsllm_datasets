13
14
15
16
17
18
19
20
21
22
23
p ← q .dequeue()
if W idt h(p , TQ) < widt h[p] then
// The width of p has changed
Update widt h[p] and re-insert p to q
continue
if W idt h(p , TQ) = 0 then
// Even the best path is unsatisfiable
break
LP ← LP + ⟨p , widt h[p]⟩
for ⟨n1, n2⟩ ∈ edges of p do
TQ[n1] ← TQ[n1] − widt h[p]
TQ[n2] ← TQ[n2] − widt h[p]
LC ← LC + widt h[p] unbound channels on ⟨n1, n2⟩
24 par t ial ← LP + (q as List)
25 for p ∈ par t ial do
26
Update TQ and LC as line 21-23, only on available edges
We propose segment-based path recovery for P4. On each node,
each major path given by P2 ⟨(v0 , v1 , · · · , vh), W ⟩ is divided into
⌈h/(k + 1)⌉ segments, each with width W : (v0 , v1 , · · · , vk +1), (vk +1 ,
vk +2 , · · · , v2k +2), · · · , (v⌈h/(k +1)−1⌉(k +1) , · · · , vh−1 , vh). The length of
the segments is set to k + 1 such that each node knows the states
of all links on the segment containing it, via the k-hop link states
received in P3. Then for segment (vi0 , vi1 , · · · , vik +1), each node
on it finds paths connecting the two ends, vi0 and vik +1 , using
successful links in the k-hop neighborhood.
An example is shown in Fig. 7. Assume k = 1, and thus each
node knows the link states of its 1-hop neighbors. The major path
69
Figure 8: Comparison of Q-PASS and Q-CAST
ACDEB is divided into two segments ACD and DEB, such that all
nodes on a single segment know this segment is successful or not. If
not, they will try to use a recovery path. In this example, A, C, and
D know link C-D fails. Hence, the recovery path AC′D′D is taken
by D. The distributed recovery path selection is consistent among
all nodes because recovery paths are found from local link states
known to all involved nodes, and the recovery paths are ordered
deterministically via the specified routing metric.
4.3 Q-CAST: Contention-free pAth Selection at
runTime
The offline algorithm in Q-PASS has two fundamental disadvan-
tages. 1) It has to compute candidate paths for n(n − 1)/2 pairs
because it does not know the runtime S-D pairs. 2) The candidate
paths exhibit a low utilization rate due to severe resource contention
among them. Q-CAST does not require any offline computation
and always finds the paths if only paths exist in the residual graph.
For example in Fig. 8(a), AB and A′B′ are two S-D pairs. The of-
fline algorithm of Q-PASS finds 25 paths for AB, passing by nodes
M1, · · · , M25. But a single path A′, M1, · · · , M25, B′ takes all avail-
able qubits on Mi , and thus in the residual graph, all 25 candidate
paths of AB fail, though paths AA′B and AB′B exist outside the
offline paths, which are correctly found and reserved by Q-CAST
online algorithm as shown in Fig. 8(b). Due to unpredictable com-
binations of S-D pairs and the resulting residual graphs, it is hard
to pre-calculate and store the paths for all S-D pair combinations.
4.3.1 Algorithm overview. Q-CAST does not require any offline
computation and follows the four-phase model in Fig. 2. Q-CAST
P1 and P3 are standard procedures similar to those of Q-PASS. The
inputs of Q-CAST P2 are the network topology and the S-D pairs. In
P2, Q-CAST selects major paths for each S-D pair, without resource
contention. Besides, contention-free recovery paths are also selected
in P2. P4 takes the major paths and recovery paths from P2 and the
link states from P3 to compute the swapping decisions.
4.3.2 P2 Algorithm of Q-CAST. The core task for Q-CAST P2 is
to find multiple paths based on the knowledge of S-D pairs, and
the paths should be contention-free on qubits and channels. Yen’s
algorithm [58] does not satisfy the requirements because its output
paths are highly overlapped. Note, Q-PASS uses Yen’s algorithm to
find offline paths because the resulting overlapped path naturally
provides small detours, serving as recovery paths for major paths.
We propose to search multiple contention-free paths for online S-D
pairs using a greedy algorithm, which runs as follows. Step 1) For
every S-D pair, it uses the Extended Dijkstra’s algorithm (described
(a)A-BandA’-B’aretwoS-Dpairs.Q-PASSofflinealgorithmoutputs25pathsforA-B:𝑨𝑴𝒊𝑩,𝒊∈{𝟏,𝟐,…,𝟐𝟓}.However,path𝑨’𝑴𝟏𝑴𝟐⋯𝑴𝟐𝟓𝑩’isbetterbymetricthan𝑨𝑴𝒊𝑩andreservesallqubitson𝑴𝒊.ThepairA-Bfailsduetonomoreofflinepaths.(b)Q-CASTalsoreservesallqubitson𝑴𝒊forpath𝑨’𝑴𝟏𝑴𝟐⋯𝑴𝟐𝟓𝑩’.However,intheresidualgraph,Q-CASTfindstwomorepathsforA-B:𝑨𝑩′𝑩andAA’B.Thesepathsareworsethan𝑨𝑴𝒊𝑩bymetric,thusnotrecordedintheofflineQ-PASS.…B’𝑀25𝑀2𝑀1A’BA…B’𝑀25𝑀2𝑀1A’BAConcurrent Entanglement Routing for Quantum Networks: Model and Designs
SIGCOMM ’20, August 10ś14, 2020, Virtual Event, NY, USA
later) to find the best path in terms of the routing metric EXT
(Equation2) between this pair. Step 2) Among the best paths of all S-
D pairs, it further selects the path with the highest EXT and reserve
the resources (qubits and channels) of this path, and the network
topology is updated to the residual graph by removing the reserved
resources. Steps 1) and 2) are repeated with the residual graph,
until no more path can be found, or the number of paths exceeds
200 ś a value limiting the number of paths to avoid unnecessary
computation. We call this algorithm as Greedy EDA (G-EDA).
The above process aims to maximize the network throughput
but does not consider fairness among S-D pairs. We will discuss
how to balance throughput and fairness in ğ 6, and this could also
be a future research topic.
The optimal routing metric. To find the optimal path under
the EXT metric in a quantum network, the classical Dijkstra’s algo-
rithm fails because it only finds the shortest path when the routing
metric is ‘additive’. Here, additive means the sum of the costs of all
edges on the path is exactly the cost of the whole path. Obviously,
the EXT Et computed by Equation 2 is not additive. We propose the
Extended Dijkstra’s algorithm (EDA) to find the best path between
any S-D pair for any non-additive but monotonic routing metric.
The resulting path gives the maximum evaluation value among
all possible paths between the S-D pair, with respect to a routing
metric function e. The input of e is a path ⟨p,W ⟩, and the output is
the path quality evaluation value.
Similar to the original Dijkstra algorithm, EDA also constructs an
optimal spanning tree rooted at the source node s. At the beginning,
the visited set only includes s. The evaluation value from s to an
unvisited node x is set as 0 or the evaluation value e(s, x) of the
edge (s, x) if s and x are neighbors. Each time, the node y with the
maximum evaluation value to s is added to the visited set and the
evaluation values from s to any other node x are updated if x and y
are neighbors. The algorithm stops when the destination is visited.
The pseudocode of EDA is shown in Alg. 2.
We skip the proof of the correctness of EDA due to space limit.
Its correctness rely on a fact that the evaluation function e of a
path ⟨p,W ⟩ should monotonically decrease when extending p to a
longer path p′ by adding another node at the end of p. Since we
use Et as the evaluation function, we explain the monotonicity
of Et without a strict proof. As the W -path p grows, W may stay
unchanged or decrease because the new edge may be narrower
than W . In addition, adding one more hop means more hops to be
transmitted. Neither of the above can increase Et .
Different from the original Dijkstra algorithm, updating the path
by adding one hop may cause a re-evaluation of the entire path,
rather than simply adding the cost of a link. To avoid expensive
recalculation for path updates, one optimization can be applied
when using Et as the evaluation function. If a (W , h)-path p grows
by one hop with width ⩾ W , then the width of the new path p′ stays
unchanged to be W . Hence, in the calculation of Et(p′) = qh+1 ·
W
i =1 i · P i
when calculating Et(p) can be
re-used, which significantly reduce the complexity by performing
just one iteration.
, the original values P i
h
h+1
Bound the path length. We set the upper-bound threshold
hm for the hopcount of major paths to ensure bounded searching
in EDA. During EDA, any path with hopcount larger than hm is
70
Algorithm 2: The Extended Dijkstra’s algorithm
Input: G = ⟨V , E , C⟩, e, ⟨sr c , dst ⟩
Output: The best path ⟨p , W ⟩
// Initialize empty states
1 E ← an array of nelements, all set to − ∞
2 pr ev ← an array of n elements, all set to null
3 visit ed ← an array of n elements, all set to false
4 widt h ← an array of n elements, all set to 0
5 q ← fibonacci-heap, highest E[·] first
// Initialize states of sr c
6 E[sr c] ← +∞
7 widt h[sr c] ← +∞
8 q .enqueue(sr c)
// Track the best path until dst
9 while q is not empty do
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
// Get the current best end node
u ← q .dequeue()
if visit ed[u] then continue
else visit ed[u] ← true
if u = dst then
⟨p , W ⟩ ← Construct path via pr ev and widt h
return ⟨p , W ⟩
// Expand one hop based on u
for v ∈ neighbors of u do
if visit ed[v] then continue
⟨p , W ⟩ ← Construct path via pr ev and widt h
E′ ← e(p , W )
if E[v] < E′ then
E[v] ← E
pr ev[v] ← u
widt h[v] ← W
q .reorder(v)
Figure 9: Example of Q-CAST recovery algorithm
ignored because it is unlikely to be a good path. The value of hm
can be determined at system initialization. For a new network G,
100 pairs of nodes are randomly selected. Then, multipath routing
is performed via G-EDA for each pair with hm = inf. Then hm
is set to equal the largest hopcount of the resulting paths whose
Et ⩾ 1.
Recovery paths. After finding the major paths via G-EDA, the
remaining qubits and channels can be utilized to construct recovery
paths, each of which ends at two nodes (denote as switch nodes) on
a single major path. The switch nodes should be no more than k
hops away on a major path, where k is the link state range, because
in P4, the two nodes should ensure consistent swapping decisions.
The recovery paths are found as following. For every node x on
a major path, we use EDA to find ⩽ R recovery paths between x
and y in the residual graph, where y is the 1-hop ahead node on the
ADEBC(a) In P2, The major path ACDEBand three recovery paths (in the order of being founded): AFC, EIB, and DGHB(b) In P4, the major path disconnects at AC and EB. Hence recovery paths AFC and EIB are taken. Gand Hstill swap along DGHB, but D swaps CDand DE, in favor of a smaller detour from the major path for higher ETXFGHADEBCFGHIISIGCOMM ’20, August 10ś14, 2020, Virtual Event, NY, USA
Shouqian Shi and Chen Qian
Figure 10: Example of Q-CAST recovery via exclusive-or
major path, and R is a small constant parameter. When all nodes
are processed, the algorithm will iterates further for the recovery
paths that covers l hops on the major path, for l = 2, 3, · · · , k. In
Fig. 9(a), the major path is ACDEB and three recovery paths are
found.
Every node will assign its qubits based on the reserved major
paths and recovery paths, without qubit/channel contention.
4.3.3 P4 Algorithm of Q-CAST. In P4, each node knows the ma-
jor paths, the recovery paths, and the k-hop link states. It then
makes the swapping decisions locally. The challenges for Q-PASS
P4 still present for Q-CAST P4: probabilistic link failures and non-
interactive communication between nodes.
We propose an exclusive-or (xor, ) based algorithm to recover
from potential link failures. We define the xor operator of two set
of edges E1, E2: E1  E2 = E1 ∪ E2 \ (E1 ∩ E2). As both ends (switch
nodes) of a recovery path pr are on a single major path, a segment
of the major path pm is covered by pr , where pm and pr form a
loop in the graph, called a recovery loop. Then, the link recovery
algorithm works as following. The major path list is traversed
from beginning to end. Each visited major path p is treated as W
separated 1-paths, where W is the width of p. For each separated
1-path, the set E collects the successful edges of it. K recovery paths
are found, and the edges of the recovery loops of the recovery
paths are collected as Ep1 , Ep2 , · · · , EpK , such that the S-D pair is
connected in the graph ⟨V , E  Ep1  Ep2  · · ·  EpK ⟩, where
V is the set of nodes on the major path and the K recovery paths. To
break the tie, shorter recovery paths are preferred because shorter
paths are more likely to succeed after swapping. The Q-CAST
recovery algorithm is different from that of Q-PASS because each
recovery path in Q-CAST is dedicated to a single major path, and
they are contention-free.
As an example, in Fig. 9, the major path disconnects at AC and
EB. Nodes F , G, and H swap along the recovery path no matter the
recovery path is used or not. As switch nodes, A and C recover the
broken edge AC by the recovery path AFC. Both D and E know
the two recovery paths covering EB, namely DGH B and EI B. The
shorter one EI B is used. D still swaps qubits on the major path and
E switches to the recovery path.
As another example, in Fig. 10, the major path disconnects at CD
and EB. Recovery paths AF E and DGH B are taken, because the xor
of the major path ACDEB and two recovery loops AF EDCA and
DGH BED connects A and B. Note the edge DE appears 3 times in
the xor and is used łreverselyž on the final path.
4.4 Time and space costs
We denote the number of S-D pairs as m, and the maximum width
of paths as Wm , which is determined by node capacities and edge
widths. We denote the maximum number of paths as Km in EDA.
The number of nodes is n. We summarize the results here and some
details can be found in the Appendix.
Figure 11: Visualized network