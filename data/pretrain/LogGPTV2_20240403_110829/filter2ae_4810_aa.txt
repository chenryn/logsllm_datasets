原文地址：
## 0x01 Introduction
一直以来，关于KDE KConfig漏洞存在很多争议，我决定公开这个问题（完全公开）。 有些人甚至决定写博客来分析这个漏洞，尽管我提供了非常详细的poc。  
这就是为什么在这篇文章中，我将详细讲述如何发现漏洞、什么导致我发现了这个漏洞，以及整个研究过程中的思考过程。  
首先，总结一下：低于5.61.0的KDE Frameworks
(kf5/kdelibs)易受到KConfig类中命令注入漏洞的攻击。该漏洞的利用可通过让远程用户查看特殊构造的配置文件来实现。唯一需要的交互就是在文件浏览器或者桌面上查看文件。当然了，这需要用户下载一个文件，但是隐藏该文件一点都不难。  
Bleepingcomputer上传的利用demo
## 0x02 Discovery
在发布完最后几个EA
Origin漏洞后，我很想回到Linux，关注Linux发行版特有的漏洞。我发现Origin客户端是使用Qt框架编写的，而KDE也同样使用Qt框架编写，所以我想要尝试研究一下这个问题。进而，我去研究了KDE。  
整个过程中的另一个重要因素是，我一直在自己的笔记本电脑上使用KDE ，对它足够熟悉可以很容易地绘制出攻击面。
### The first lightbulb moment
当时所做的大部分研究都是和我的一个好朋友分享的，他此前曾经帮助我解决了其他漏洞。谢天谢地，这使我可以轻松地和大家分享我的思考过程。  
由于我正在研究KDE，所以我决定先看看他们的默认图片浏览器（gwenview）。背后的想法是，“如果我可以在默认图片浏览器中发现漏洞，那应该是一个相对可靠的漏洞。”
当然，如果我们可以将payload放在图片中，在有人查看或打开图片时触发，那么事情就变得容易多了。  
当我意识到gwenview实际上会编译最近查看过的文件列表，并使用KConfig配置语法设置条目时，第一个灵光一现的时刻到了。
此刻我面临的是shell变量。这些变量的解释方式可能决定了我们能否实现命令执行。很明显，在`File1`中，它调用`$HOME/Pictures/kdelol.gif`并解析变量，否则gwenview如何确定文件位置呢？  
为了确认这些配置条目是否真正解释了shell变量/命令，我在Name2中加了些自己的输入。
在看完gwenview后发现。。。发现没什么不同？好吧，这很糟糕，所以我回到了配置文件看看是否有什么变化。结果是，gwenview在启动时会解析shell变量，因此为了解析最近文件，gwenview必须在配置文件更新后重新启动。  
一旦发生这种情况，命令将会执行。
正如你所看到的，`Name2`中的命令被解析，并解析了`$(whoami)`的输出。恢复为`Name1`的原因是因为我使用`File`复制了条目。这对我们目前来说还没有太大的影响，只要命令在执行，就足以使我们前进。  
最初，我并不知道$e是什么意思，所以我进行了必要的挖掘，找到了`KDE系统配置文件`文档。  
原来$e是用来告诉KDE允许shell扩展的。  
在这一点上，这根本不是一个漏洞或一个很突出的问题，不过这看起来确实很危险，我相信可以采取更多措施来滥用它。在发现KDE允许在其配置文件中进行shell扩展后，我向好朋友发了一条信息，详细说明了我所发现的东西。
这里我提出了一个想法，也许可以通过文件名实现内容注入类型的payload。不幸的是，我这样尝试了，KDE似乎可以正确解析新条目并通过增加一个额外的`$`来进行转义。无论哪种方式，如果你向某人发送了带有payload的文件，都显然很可疑。有点违背了目的。  
这一点上，我不确定应该如何利用这个问题，显然肯定存在某种方法，但这似乎是个坏主意。考虑到这一点，我厌倦了再次尝试相同的事情、阅读相同的文档，所以我休息了一段时间。
### The second lightbulb moment
最终我回到了KDE，浏览目录，在那里我需要看到隐藏文件（dotfiles）。我转到“控制>显示隐藏文件”，突然发现它在当前工作目录中创建了一个.directory文件。  
好吧，很有趣。因为不确定.directory文件是什么，我查看了内容。
    [Dolphin]
    Timestamp=2019,8,11,23,42,5
    Version=4
    [Settings]
    HiddenFilesShown=true
我注意到的第一件事是，它似乎与KDE对所有配置文件使用的语法一致。我立刻想到，这些条目是否可以被注入shell命令，因为目录打开时KConfig正在读取和处理.directory文件。  
我尝试使用shell命令注入version配置项，但是它一直被覆盖，好像行不通。  
现在我在想“嗯，也许KDE有一些现有的.directory文件，可以告诉我一些信息”。所以我找到了他们。
    zero@pwn$ locate *.directory
    /usr/share/desktop-directories/kf5-development-translation.directory
    /usr/share/desktop-directories/kf5-development-webdevelopment.directory
    /usr/share/desktop-directories/kf5-development.directory
    /usr/share/desktop-directories/kf5-editors.directory
    /usr/share/desktop-directories/kf5-edu-languages.directory
    /usr/share/desktop-directories/kf5-edu-mathematics.directory
    /usr/share/desktop-directories/kf5-edu-miscellaneous.directory
    [...]
举个例子，我们看下`kf5-development-translation.directory`的内容。  
kf5-development-translation.directory：
    [Desktop Entry]
    Type=Directory
    Name=Translation
    Name[af]=Vertaling
    [...]
    Icon=applications-development-translation
我注意到在[Desktop Entry]标签下，某些具有keys的条目被调用。例如，在name条目上的af键：  
`Name[af]=Vertaling`  
既然KConfig确实在检查条目中的keys，让我们尝试使用$e选项添加keys，就像上述配置文件一样。  
在这一点上，我真正感兴趣的另一件事是Icon条目。这里你可以选择设置当前目录或文件本身的图标。如果文件名为.directory，它将为其所在目录设置属性。如果文件名为payload.directory，那么只有payload.directory文件有图标，而不是父目录。为什么会是这样？我们马上讨论这点。  
这真的很吸引人，因为这意味着即使不打开文件也可以调用我们的Icon条目，只需要导航到某个目录即可调用。如果在这里使用$e注入命令...该死，那有点太简单了，是不是？  
当然，你已经知道了使用下面这个payload的结果了：  
payload.directory
    [Desktop Entry]
    Type=Directory
    Icon[$e]=$(echo${IFS}0>~/Desktop/zero.lol&)
演示视频：
## 0x03 Under the Hood
跟任何漏洞一样，访问代码可以使我们的生活变得轻松。充分理解我们的“利用方式”对最大限度发挥影响和写出高质量报告十分重要。  
目前，我已经确定了几件事情：  
1）问题实际上是KDE配置的一个设计缺陷  