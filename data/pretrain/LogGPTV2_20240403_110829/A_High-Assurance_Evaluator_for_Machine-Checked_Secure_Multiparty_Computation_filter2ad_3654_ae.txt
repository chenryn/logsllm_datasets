const n = 15.
op k = BSS.k.
op d = BSS.d.
op t = BSS.t.
type secret_t = ASS.secret_t.
type share_t = BSS.share_t.
type rand_t = ASS.rand_t * BSS.rand_t.
op share (r : rand_t) (s : secret_t) : (BSS.p_id_t * share_t) list =
let (ra,rb) = r in
let summands = ASS.share ra s in
BSS.share rb (map snd summands).
op reconstruct (ss : (BSS.p_id_t * share_t) list) : secret_t option =
let summands = BSS.reconstruct ss in
ASS.reconstruct (zip ASS.p_id_set (oget summands)).
clone import SecretSharingScheme as GradualSS with
...
end GradualSecretSharingScheme.
Fig. 22: Gradual secret sharing scheme (File name: Gradual.ec).
module GradualSS
...
val n : int
let k = 1
let d = n - 3
let t = d - 1
type p_id_t = int
val p_id_set : t list
type secret_t = t
type share_t = list
type rand_t = list t * (list (monomial list))
let share (r : rand_t) (s : secret_t) : list (BSS.p_id_t * share_t)=
(t * (t * (list (int * group))))
let (ra,rb) = r in
let summands = share ra s in
share rb (map snd summands)
let reconstruct (ss : list (p_id_t * share_t)) : option secret_t =
let summands = reconstruct ss in
reconstruct (zip p_id_set1 (oget summands))
Fig. 23: Gradual secret sharing scheme in WhyML.
the execution times in milliseconds. We also provide an individual comparison with the Charm unveriﬁed
implementation of the gradual secret sharing scheme in Table 2.
Our measurements were conducted on an x86-64 Intel Core i5 clocked at 2.4GHz with 256KB L2 cache per
core. The extracted code was compiled with ocamlopt version 4.05.0 and the tests were ran in isolation, using
the OCamlSys.time operator to read the execution time. We ran tests in batches of 100 runs each, noting the
median of the times recorded in the runs.
We found that the sharing operation is faster in our generated code while reconstruct performs better
in the Charm version. This may be justiﬁed by the veriﬁcation penalty induced by the veriﬁed polynomial
library (specially the polynomial interpolation) that only manifests itself in the reconstruction phase. In fact,
the share protocol does not make use of signiﬁcant polynomial operations (besides polynomial evaluation
24
let d1 : Z.t = Z.sub (Z.of_string "5") (Z.of_string "3")
let k : Z.t = d
let t : Z.t = Z.sub d Z.one
type p_id_t = Z.t
type secret_t = Z.t
type share_t = ((Z.t) * ((Z.t) * (Z.t * (Z.t list))) list) list
type rand_t = ((Z.t) list) * ((monomial list) list)
let share2 (r : ((Z.t) list) * ((monomial list) list)) (s : (Z.t)) : ((Z.t) * ((Z.t) * (Z.t * (Z.t
list))) list) list =
let (ra,rb) = r in
let summands = share ra s in
share1 rb (map snd summands)
let reconstruct2 (ss : ((Z.t) * ((Z.t) * (Z.t * (Z.t list))) list) list) : (Z.t) option =
let summands = reconstruct ss in
reconstruct1 (zip p_id_set1 (oget summands))
Fig. 24: Gradual secret sharing scheme in OCaml (File name: gradual.ml ).
Table 2: Performance Benchmark Table Gradual for extract gradual secret sharing and for Charm unveriﬁed
implementation for a 512 bit-size ﬁeld
Share Reconstruct
Charm
Extracted
6
n = 5
n = 15
23
n = 5 0.19
n = 5
1.5
0.3
2
0.6
6
that does not represent a major overhead in the execution time) and so its performance depends on the
performance of cyclic group and ﬁnite ﬁeld operations. Since these are implemented with the Zarith library 16
(an OCaml wrapper for GMP), we are able to achieve a good performance for it. This is not the case for the
reconstruction protocol, whose performance is greatly inﬂuenced by the performance of the polynomial library.
By relying on a unveriﬁed library, Charm delivers better results for polynomial operations, thus delivering
faster times for the reconstruct protocol.
Table 3: Performance Benchmark Table for Extracted Secret Sharing Implementation (times in ms)
Shamir
Passive
Malicious
Pedersen
Unforgeable
128 bits
256 bits
512 bits
1024 bits
n = 5 0.0200
n = 9 0.0458
n = 15 0.1249
n = 5 0.0229
n = 9 0.0978
n = 15 0.1853
n = 5 0.0290
n = 9 0.1255
n = 15 0.2610
n = 5 0.0588
n = 9 0.1866
n = 15 0.5989
0.0229
0.0332
0.0440
0.0870
0.1187
0.1814
0.3532
0.5302
0.7907
2.3797
3.6002
5.3811
Share Reconstruct Share Reconstruct Commit Verify
0.0566 0.0211
0.0941 0.0300
0.1571 0.0497
0.2468 0.0618
0.4410 0.0848
0.6432 0.1076
1.2448 0.2430
1.7492 0.2347
2.8111 0.2917
7.1856 1.2635
12.0770 1.3364
19.2705 1.5435
0.1546
0.4702
1.2102
0.5746
1.7046
4.8086
2.2661
7.3145
20.3639
15.0708
48.9167
135.1714
0.0523
0.2074
0.5783
0.0988
0.4433
0.9847
0.1722
0.7247
1.7041
0.3910
1.2866
3.6757
16 https://github.com/ocaml/Zarith
25
Table 4: Performance Benchmark Table for Extracted (P)MPC Implementation (times in ms). First column
is the ﬁeld size, the second is the number of parties.
Addition
Multiplication
Refresh
Recover
Passive
Malicious
Passive
Malicious
Passive
Malicious
Passive
Malicious
Total Per party Total Per party Total Per party Total Per party Total Per party Total Per party Total Per party Total Per party
128 bits
256 bits
512 bits
1024 bits
n = 5 0.0032
n = 9 0.0080
n = 15 0.0161
n = 5 0.0043
n = 9 0.0067
n = 15 0.0158
n = 5 0.0038
n = 9 0.0052
n = 15 0.0156
n = 5 0.0040
n = 9 0.0082
n = 15 0.0166
0.0006
0.0009
0.0011
0.0009
0.0007
0.0011
0.0008
0.0007
0.0010
0.0008
0.0009
0.0011
0.0071
0.0133
0.0399
0.0095
0.0220
0.0507
0.0125
0.0195
0.0805
0.0229
0.0651
0.1356
0.0014
0.0015
0.0027
0.0019
0.0024
0.0034
0.0025
0.0028
0.0054
0.0046
0.0072
0.0090
0.0790
0.4197
1.8872
0.1069
0.6038
2.7882
0.1359
0.3805
3.9201
0.2284
1.4559
7.6396
0.0158
0.0466
0.1258
0.0214
0.0671
0.1859
0.0272
0.0544
0.2613
0.0457
0.1618
0.5093
0.0756
0.3279
1.6393