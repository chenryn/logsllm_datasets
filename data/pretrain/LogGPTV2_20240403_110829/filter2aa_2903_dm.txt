### 13.7.4 全局断点及其局限性

在PVRStudio中，用户可以直接在源代码窗口设置断点，这种断点被称为全局断点。根据官方演示视频，当前版本的PVRStudio仅支持一个全局断点。一旦设置了新的全局断点，之前的断点将不再生效。这是一个显著的限制，希望未来版本能够改进这一功能。

### 13.8 本章小结

PowerVR 在SoC GPU领域享有盛誉，具有广泛的影响力。本章前半部分详细讨论了PVR GPU的硬件架构和软件指令，重点介绍了其独特的ALU流水线和指令组概念。此外，PVR GPU 的微内核设计也是其一大特色，这些灵活更新的微内核在PVR软件模型中扮演着关键角色。

本章后半部分介绍了PVR GPU 的调试工具，包括不同类型的断点、离线编译和反汇编工具，以及PVR-GDB。PVR GPU 提供了丰富的工具链，除了上述工具外，还有用于性能调优的PVRTune、用于图形调试的PVRMonitor（HUD模式，可将调试信息直接显示在3D画面上），以及基于事件追踪机制的PVRTrace等。

### 参考资料
1. PowerVR at 25: The story of a graphics revolution.
2. Imagination's PowerVR Rogue Architecture Explored by Ryan Smith on February 24, 2014 3:00 AM EST.
3. Job listings suggest Apple might take its chip making to the next level.
4. Apple Announces 2017 iPad 9.7-Inch: Entry Level iPad now at $329 by Ryan Smith on March 21, 2017 3:45 PM EST.
5. The mysteries of the GPU in Apple’s iPhone 7 are unlocked.
6. PowerVR Instruction Set Reference, PowerVR SDK REL_17.2@4910709a External Issue, Imagination Technologies Limited.
7. Imagination Releases Full ISA Documentation For PowerVR Rogue GPUs.
8. PowerVR Graphics - Latest Developments and Future Plans.
9. PVRStudio – the first IDE to allow GPU debugging on mobile platforms.

### 第14章 GPU综述

前五章分别介绍了五家公司的GPU，其中三家属于PC GPU阵营，两家属于SoC GPU阵营。本章将对这些GPU进行简要总结和比较，分为两部分：第一部分将对各家GPU进行横向比较，并介绍GPU领域的挑战和发展趋势；第二部分将简要介绍本书未覆盖的GPU，并推荐一些学习资源。

#### 14.1 比较

从开发者角度出发，本节将对前五章所介绍的五家GPU进行简单比较。比较依据主要来自作者的个人观察，没有系统评测或大量数据支持，因此可能存在偏颇与错误，恳请读者批评指正。

##### 14.1.1 开放性

在开放性方面，英特尔位居榜首，其公开的技术文档和源代码数量远超其他四家公司之和。通过搜索引擎输入“intel gpu prm”，可以找到大量的GPU手册。第11章曾详细介绍过这些文档，并多次引用。尽管英特尔公开的GPU文档数量庞大（例如4000多页的PDF），但内容详尽且易于获取。此外，英特尔还公开了多个GPU编译器的源代码，如Beignet、NEO、CM 和 IGC。

AMD也较早公开了指令集手册，并在GitHub上开源了多个项目。如果按开放性排序，依次为AMD、IMG、Nvidia 和 ARM。

##### 14.1.2 工具链

在开发工具链方面，Nvidia处于领先地位。Nsight、nvprof、nvvp、nvcc、cuda-gdb、nvdisasm 和 ptxas 等工具功能强大且稳定。例如，Nsight（Windows 版）不仅稳定，还支持多个调试会话，而Linux下的 cuda-gdb 虽然稳定但只支持一个会话。AMD 的 GPU 断点功能较为稳定，并在同一会话中支持 CPU 和 GPU 断点。相比之下，Intel GT 调试器的 GPU 断点功能不稳定，PVR GDB 仅支持一个全局断点，Mali GPU 的断点支持可能仍在开发中。

工具链的长期稳定性也很重要。在这方面，Nvidia表现出色，其CUDA Toolkit提供了一站式服务，安装包超过1G，包含驱动程序和各种开发工具。AMD的开发工具变化频繁，曾经使用Stream SDK，后来改为APP SDK，目前似乎在推广Open64 SDK和编译器以及ROCm（均不支持Windows平台）。总体而言，工具链方面的排序为：Nvidia、AMD、Intel、IMG 和 ARM。

##### 14.1.3 开发者文档

开发者文档对于吸引和保留开发者至关重要。安装CUDA工具集后，可以在doc目录下找到html和pdf格式的50多个文档。这些文档定期更新，质量较高。相比之下，其他公司的文档难以达到同样的水平。开发者文档方面的排序为：Nvidia、Intel、AMD、IMG 和 ARM。

#### 14.2 主要矛盾

与CPU相比，GPU软硬件的复杂度更高。本节将探讨GPU领域的基本问题和主要矛盾。

##### 14.2.1 专用性和通用性

在GPU硬件方面，如何平衡专用逻辑和通用逻辑的比例是一个基本问题。专用逻辑通常由固定功能单元实现，如3D加速流水线和视频编解码流水线，具有速度快但功能单一的特点。通用逻辑则指微处理器形式的通用执行引擎，灵活性高但速度较慢。实际产品中，通常根据市场定位来寻找合适的平衡点。

例如，Nvidia GPU在通用化方面领先，但仍保留一定比例的纹理处理单元以保证传统3D应用的速度。

##### 14.2.2 强硬件和弱软件

GPU硬件不断进步，但在软件方面仍存在较大不足。由于历史原因，GPU在以CPU为核心的计算机架构中处于设备地位，需要依赖CPU上的驱动程序和软件栈进行任务调度和资源管理。这种做法效率低下，增加了GPU程序的开发、调试和优化难度，限制了GPU的发展。

#### 14.3 发展趋势

GPU相对年轻，回顾CPU发展历程，最终只有少数几家厂商存活下来。同样，GPU未来也将经历适者生存的过程。顺应发展潮流的公司更有可能成为强者。

##### 14.3.1 从固定功能单元到通用执行引擎

硬件方面，统一结构的执行引擎逐渐取代固定功能的硬件加速流水线。这种方式具有良好的伸缩性和通用性，容易满足不同应用需求。英特尔的G965（Gen4）和Nvidia的G80是早期采用统一化设计的产品，Mali T600系列也在2010年采用了类似设计。

##### 14.3.2 从向量指令到标量指令

在指令集方面，GPU领域曾流行VLIW和SIMD类型的向量指令，但其灵活性较差。标量指令每次只操作单个数据，但灵活性更高。例如，Nvidia G80使用标量指令，而英特尔G965使用向量指令。AMD GPU同时支持标量和向量指令，但硬件结构复杂，对编译器要求较高。Mali GPU从Bifrost架构开始改用标量指令。

##### 14.3.3 从指令并行到线程并行

高并行能力是GPU的核心优势。向量指令依赖被计算数据和编译器，存在局限性。线程级别的并行是大势所趋。Nvidia的PTX指令集和WARP技术是典型的线程级别并行，编程简单且易于理解。AMD GPU也较早采用了线程并行的执行模型，引入了“波阵”（wavefront）的概念。

从以上三个趋势来看，Nvidia走在最前面，AMD紧随其后，其他厂商有的在追赶，有的还在探索。

#### 14.4 其他GPU

除了本书介绍的GPU外，市场上还有很多其他GPU。本节简要介绍几种重要的GPU。

##### 14.4.1 Adreno

Adreno是高通骁龙SoC中的GPU。Adreno源于ATI针对移动市场的Imageon SoC，2009年高通收购Imageon后将其改名为Adreno。第一代Adreno使用固定功能流水线设计，第二代开始采用统一化设计，第三代改为标量指令集。Linux内核源代码树中包含了Adreno GPU的开源驱动程序。

##### 14.4.2 VideoCore

VideoCore是博通公司SoC中的GPU，广泛应用于树莓派单板电脑。2014年，博通发布了关于第四代VideoCore（Video Core IV）的完整文档。VideoCore内部由4路SIMD流水线组成一个QPU（Quad Processor Unit）。Linux内核源代码树中包含了VideoCore GPU的开源驱动程序。

##### 14.4.3 图芯GPU

图芯（Vivante）成立于2004年，最初的产品是支持DirectX的PC GPU。2007年转向SoC GPU领域，并改名为Vivante，在中国有多处研发中心。瑞芯微的RK2918 SoC芯片中使用了图芯GPU。Linux内核源代码树中包含了开源版本的图芯GPU驱动程序。