调用栈等，因为与其他介绍过的调试器大同小异，所以本书不做详细介
绍了。
13.7.4 全局断点和局限性
在PVRStudio中，用户可以直接在源代码窗口设置断点，这样的断
点被赋予一个特定的名字，叫作全局断点。根据官方的演示视频，目前
版本只支持一个全局断点。设置一个新的全局断点之后，旧的就不会再
命中。这是一个较大的局限性，或许将来版本可以有所改进。
13.8 本章小结
在SoC GPU领域，PowerVR是很响亮的名字，具有很大的影响力。
本章前半部分比较详细地讨论了PVR GPU的硬件结构和软件指令，重点
介绍了很有特色的ALU流水线和指令组概念。PVR GPU的另一大特色
是微内核，可以灵活更新的微内核在PVR软件模型中扮演着重要角色。
本章后半部分介绍了PVR GPU 的调试设施，包括不同类型的断点，离
线编译和反汇编的工具，以及PVR-GDB。
PVR GPU的工具链很丰富，除了本章介绍的工具之外，还有用于调
优的PVRTune，用于图形调试的PVRMonitor（HUD模式，可以把调试
信息直接显示在3D画面上），以及基于事件追踪机制的PVRTrace等。
参考资料
[1] PowerVR at 25 : The story of a graphics revolution.
[2] Imagination's PowerVR Rogue Architecture Explored by Ryan
Smith on February 24, 2014 3:00 AM EST.
[3] Job listings suggest Apple might take its chip making to the next
level.
[4] Apple Announces 2017 iPad 9.7-Inch: Entry Level iPad now at
$329 by Ryan Smith on March 21, 2017 3:45 PM EST.
[5] The mysteries of the GPU in Apple’s iPhone 7 are unlocked.
[6] PowerVR Instruction Set Reference, PowerVR SDK
REL_17.2@4910709a External Issue, Imagination Technologies Limited.
[7] Imagination Releases Full ISA Documentation For PowerVR
Rogue GPUs.
[8] PowerVR Graphics - Latest Developments and Future Plans.
[9] PVRStudio – the first IDE to allow GPU debugging on mobile
platforms.
第14章 GPU综述
前面5章分别介绍了5家公司的GPU，其中三家属于PC GPU阵营，
两家属于SoC GPU阵营。本章将做一个简要的总结和比较，分两部分。
前半部分首先对各家GPU做简单的横向比较，然后介绍GPU领域的主要
挑战和发展趋势。后半部分首先简单介绍本书前面没有覆盖的GPU，然
后推荐一些了解学习GPU的资料和工具。
14.1 比较
从GPU开发者的角度，本节对前面介绍的5家GPU做简单比较。比
较的范围就是前面5章所介绍的5家公司，比较的依据完全来自作者的个
人印象，没有系统的评测，也没有大量的数据。当然，这样做很可能存
在偏颇与错误，恳请读者批评与指正。
14.1.1 开放性
在开放性方面，英特尔稳坐第一把交椅，它开放的技术文档和源代
码轻松超过其他4家的总和。
在搜索引擎中输入“intel gpu prm”，在搜索结果中会出现大量的
GPU手册。第11章曾专门介绍过这些文档，也曾反复引用。
在与从事GPU应用开发的一个同行聊天时，曾谈到过这些PRM，他
说：“太长了，没法读。”诚然如此，英特尔公开的GPU文档让人看不过
来，一个4000多页的PDF就让人不知所措，让你只能嫌多，难以嫌少。
除了排山倒海般的PRM，英特尔还气势如虹地公开了大量的源代
码。单GPU程序的编译器，就公开了4个：Beignet、NEO、CM和IGC。
CM是C for Media的缩写，曾经是只提供给少数合作伙伴的神秘武器。
IGC是Intel Graphic Compiler的缩写，其中包含了大量不可明言的奥秘。
AMD很早就公开了指令集手册，GitHub上也开源了多个项目。
如果一定要给其他4家排个顺序，那么就是AMD、IMG、Nvidia和
ARM。
14.1.2 工具链
在开发工具链方面，Nvidia排名首位。Nsight、nvprof、nvvp、
nvcc、cuda-gdb、nvdisasm、ptxas都功能强大，并且质量稳定。
以GPU断点功能为例，Nsight（Windows版本）不仅很稳定，还支
持多个调试会话，Linux下的cuda-gdb也很稳定，但是只支持一个会话。
AMD的GPU断点功能也比较稳定，并且在同一个会话里支持CPU断点
和GPU断点。英特尔GT调试器的GPU断点功能很不稳定。PVR GDB有
断点支持，但只支持一个全局断点。Mali GPU的断点支持可能在开发
中，未曾闻之。
工具链的长久稳定也是很重要的。在这方面，Nvidia也做得比较
好，始终是一套核心的CUDA Toolkit，超过1G的安装包，装好就几乎
全有了，一站式服务，里面甚至包含了几百兆字节的驱动程序，如果发
现驱动不合适就立马升级驱动。AMD的开发工具变换最频繁，曾经使
用Stream SDK，后来改名为APP SDK，目前似乎在推名为Open64的
SDK和编译器，以及GitHub上的ROCm（Open64和ROCm都不支持
Windows平台）。
概而言之，在工具链方面的排序是：Nvidia、AMD、英特尔、IMG
和ARM。
14.1.3 开发者文档
网上广泛流传着一段关于鲍尔默的视频，他手舞足蹈，口中反复念
着一个单词，Developers、Developers、Developers……对于操作系统来
说，开发者何其重要。对于GPU来说，又何尝不是呢？
如何留住老的开发者并吸引新的开发者呢？开发者文档是写给开发
者的书信，其重要性不言而喻。
安装CUDA工具集后，在doc目录下包含两个子目录：html和pdf，
写给开发者的 50 多个文档以两种格式分别存放其中。大多数文档的开
头都有下面这样的版本标识。
TRM-06710-001 _vRelease Version | July 2017
这说明这些文档是得到认真维护和更新的。
当然，关键的还是文档内容。读CUDA的文档，经常有读当年
Win32经典文档的感觉。读其他几家公司的文档时，很难找到这种感
觉。
后面4位的排序为：英特尔、AMD、IMG和ARM。
14.2 主要矛盾
与CPU硬件和CPU上面的软件相比，GPU软硬件的复杂度都提升了
一个级别。本节简要探讨GPU领域的基本问题和主要矛盾，仍是一家之
言，谨供参考。
14.2.1 专用性和通用性
在GPU的硬件方面，如何平衡专用逻辑和通用逻辑的比例是个基本
问题。专用逻辑的典型代表是固定功能单元，比如3D加速流水线和视
频编解码流水线。通用逻辑是指微处理器形式的通用执行引擎。
正如前面章节所介绍的，一般来说，固定功能单元具有速度快的优
点，但是功能单一，使用率可能很低。通用执行引擎的优点是功能灵
活，用途广泛，但是一般速度达不到固定单元那么高。
在实际的GPU产品中，通常根据产品的市场定位来寻找一个比较好
的平衡点，既保证一定比例的固定功能单元，以保证关键应用的性能，
又要努力增加通用执行引擎的数量，增加通用性，满足多样化的应用需
求。
举例来说，Nvidia GPU在通用化方面一直是很领先的，但是其内部
仍保留一定比例的纹理处理单元，以确保传统3D应用的速度需要。
14.2.2 强硬件和弱软件
GPU硬件不断发展，越来越强大，但是软件方面还非常弱。正如第
8章所描述的，由于历史原因，在以CPU为核心的计算机架构中，GPU
处于设备地位。换句话来说，在软件方面，目前GPU还不独立，需要有
庞大的驱动程序和软件栈运行在CPU上，任务调度和资源管理等很多重
要事务都要依赖CPU。这种做法不但效率很低，而且导致开发、调试和
优化GPU程序的难度也非常高，这当然也限制了GPU的发展。
14.3 发展趋势
与CPU相比，GPU还很年轻。回顾CPU的发展历程，当年也曾有很
多家相互竞争，群雄逐鹿，但是发展到今天，只剩下几家了。我想，
GPU的未来也将是这样，适者生存，强者淘汰弱者。谁能成为强者呢？
这个问题不那么好回答。一般来说，顺应发展潮流的更有可能成为强
者。发展潮流是怎么样的呢？本书略陈己见，读者不必认真。
14.3.1 从固定功能单元到通用执行引擎
在硬件方面，使用统一结构的执行引擎来取代固定功能的硬件加速
流水线是一个普遍的趋势。这样做的好处有很多。一方面是伸缩性好，
很容易通过增加实例数量来调整并行度；另一方面是通用性好，灵活度
高，容易满足不同应用的需求。
英特尔的G965（Gen4）和Nvidia的G80是引领统一化设计方向的两
个开路先锋，两款产品都是在2006年推出。2010年10月，Midgard架构
的Mali T600系列推出，标志着Mali GPU也走上了统一化设计的方向，
比英特尔和Nvidia晚了4年。一方面，这印证了统一化的设计方法是广
泛适用的，是潮流所向；另一方面，这也符合SoC GPU跟随PC GPU发
展的规律。
14.3.2 从向量指令到标量指令
在指令集方面，GPU领域曾经流行超长指令字（VLIW）和SIMD类
型的向量指令。向量指令的特点是可以直接操作向量，一条指令可以并
行计算很多个元素。
但是向量指令具有一个很大的缺点，就是不灵活。对于3D渲染等
图形任务，向量指令比较合适，很容易找到可以同时计算的数据。但是
对于快速排序等通用计算任务，向量指令就显得很笨拙。
标量指令每次只操作单个数据，但是具有灵活性高的优点。
不妨再以英特尔G965和Nvidia G80来看这个问题，G80使用的是标
量指令，G965使用的是向量指令。这两个产品和它们的后代命运迥
异，指令集方面的根本差异或许是导致命运不同的重要技术因素。
在这个问题上，AMD GPU的做法可能是非常明智的，既有标量指
令，又有向量指令，适合标量的用标量指令，适合向量的用向量指令，
表面看起来让人拍手叫绝。但其实，这样做导致硬件结构比较复杂，对
编译器也有要求，不知道AMD的这种做法能坚持多久。
Mali GPU在Bifrost架构之前，使用的都是向量指令，但是从Bifrost
开始，改为标量指令，时间是2016年，比G80晚了10年。这再次印证了
SoC GPU跟随PC GPU发展的规律。
14.3.3 从指令并行到线程并行
高并行能力是GPU的生存之本。向量指令是在指令级别并行，高度
依赖被计算数据和编译器，存在很大的局限性。
那么应该如何做并行呢？本书认为线程级别并行是大势所趋。
Nvidia的PTX指令集和WARP技术是典型的线程级别并行，让一批线程
以同样的步调并行执行算核函数。在软件方面，这样做编程简单，容易
理解，而且编译器也简单。在硬件方面，也只要设计简单的执行流水
线，每个流水线只要处理单个元素。
AMD GPU也较早就采用了线程并行的执行模型，发明了一个新的
术语——波阵（wavefront）来代替WARP。
从以上三个趋势来看，Nvidia是走在最前面的，AMD紧随其后，其
他几家有的在追赶，有的还懵懵懂懂。
14.4 其他GPU
如前所述，GPU市场还处在群雄争霸的阶段。除了本书前面介绍的
GPU外，还有很多种GPU，以这样或者那样的方式存在和发展着。本节
简要介绍几种其他GPU。
14.4.1 Adreno
2007年11月，高通推出名为骁龙（Snapdragon）的SoC。今天，很
多品牌的智能手机内部使用了骁龙芯片，比如小米、HTC、三星等。
骁龙芯片内部的CPU是ARM架构，其中的GPU叫Adreno。
Adreno源于ATI针对移动市场开发的Imageon SoC。2006年AMD收
购ATI后，在2009年把Imageon产品线出售给了高通。高通收购Imageon
后，将其中的GPU改名为Adreno。
第一代Adreno使用的是固定功能流水线设计。从第二代开始使用统
一化设计，其中包含多个统一结构的着色器。Adreno内部也具有一些低
功耗的特征，比如基于图块渲染和早期深度测试等。第二代Adreno使用
的是超长指令集，与之前介绍过的Terascale类似。第三代开始改为使用
标量指令集。
在Linux内核源代码树中，gpu/drm/msm目录下包含了Adreno GPU
的开源驱动程序，里面包含了寄存器定义等大量底层信息。
14.4.2 VideoCore
在著名的树莓派单板电脑中，使用的是博通（Broadcom）公司的
SoC，其内部的CPU是ARM架构，GPU名叫VideoCore。
2014年2月28日，在树莓派两周年的仪式上，博通公司宣布开发一
份完整的文档。这份文档是针对第四代VideoCore（称为Video Core
IV）的，文档有一百多页，比较详细地介绍了Video Core IV的硬件结构
和指令集[1]。
根据公开的文档，在Video Core内部由4路SIMD流水线组成一个片
区（slice），称为一个QPU（Quad Processor Unit），如图14-1所示。
图14-1 VideoCore GPU结构框图
Linux内核源代码树的gpu/drm/vc4子目录下有VideoCore GPU的开源
驱动，里面包含了很多与硬件相关的信息。
14.4.3 图芯GPU
图芯（Vivante）公司成立于2004年，原名为GiQuila，最初的产品
是支持DirectX的PC GPU。2007年转向SoC GPU领域，并改名为
Vivante，在中国有多处研发中心，中文名为图芯。在瑞芯微的RK2918
SoC芯片中，使用了图芯GPU。
在Linux内核源代码树的gpu/drm/etnaviv子目录下包含了开源版本的