50 https://github.com/4B5F5F4B/Exploits/tree/master/Chrome/CVE-2014-1736 
25 
4.1.3 Use-after-free bugs 
Since C++ is not garbage collected, vulnerability classes such as use-after-free bugs can 
occur. The following pattern demonstrates the underlying problem: 
01: unsigned char *pData = malloc(0x20); 
02: use_data(pData); 
03: free(pData); 
04: // Other code 
05: use_data(pData); // Use-After-Free 
In line 5 the data is accessed although it has already been freed. If another allocation 
happens between the free (line 3) and the use (line 5) an attacker may control the content 
of the pData buffer. 
One approach to deal with these vulnerabilities is the implementation of reference counting 
objects. They are implemented by smart pointers based on the RAII (Resource acquisition 
is initialization) design pattern and are available since C++11. They use an internal counter 
to track the number of hold references. When the scope of a smart pointer ends, the 
destructor is called which decrements the number of hold references. When the value 
reaches zero the data is freed. If used correctly, this technique would solve the problem of 
use-after-free bugs and not reclaimed memory. However, this concept leads to a problem 
with circular references because such objects would never be freed. To solve this problem 
a weak pointer can be used which does not increment the reference count. C++11 
implements both pointers with the types shared_ptr and weak_ptr. The incorrect usage of 
these types or accessing a raw pointer of a smart pointer can lead to use-after-free 
vulnerabilities. 
To hamper exploitation of these attacks, browser-developers hardened their heap 
implementations. For example, the PartitionAlloc heap from Chromium separates objects on 
different heaps. Microsoft Edge implemented delayed frees and MemGC 51. Apple Safari 
uses the concept of isolated heaps 52. 
51 https://securityintelligence.com/memgc-use-after-free-exploit-mitigation-in-edge-and-ie-on-windows-10/ 
52 https://labs.f-secure.com/archive/some-brief-notes-on-webkit-heap-hardening/ 
26 
Examples: 
Chromium issue 936448, CVE-2019-5786 (exploited in-the-wild) – FileReader Use-
After-Free race condition 
01: // The PoC is simplified and can't be started stand-alone 
02: const string_size = 128 * 1024 * 1024; 
03: let contents = String.prototype.repeat.call('Z', string_size); 
04: let f = new File([contents], "text.txt"); 
05: function force_gc() { 
06:     try { var failure = new WebAssembly.Memory({initial: 32767}); } catch(e) { } 
07: } 
08: reader = new FileReader(); 
09: reader.onprogress = function(evt) { 
10:         force_gc(); // Make heap layout reliable and prevent out-of-memory crashes 
11:         let res = evt.target.result; 
12:         if (res.byteLength != f.size) { return; } 
13:         lastlast = last;    
14:         last = res; 
15: } 
16: reader.onloadend = function(evt) { 
17: 
last = 0, lastlast = 0; 
18: 
try { 
19:      // trigger the FREE 
20:      myWorker.postMessage([last], [last, lastlast]); 
21:     } catch(e) { 
22:        // The free was successful if an exception with this message happens 
23:        if (e.message.includes('ArrayBuffer at index 1 could not be transferred')) { 
24:           // lastlast is now a dangling pointer 
25: } } } 
26: reader.readAsArrayBuffer(f); 
The root cause of the vulnerability can be found in the implementation of callback invocations 
of a FileReader object. Lines 2, 3, 4, 8 and 26 create a FileReader object which reads from 
a large in-memory string. The read operation is performed asynchronous and callbacks can 
be configured which report the current progress or that loading finished. The onprogress 
callback can access the current result buffer via evt.target.result, as shown in line 11. 
Typically, the passed buffer is always different because the passed buffer is created via a 
slice operation which creates a copy of the current buffer. 
However, when all bytes were already read, the code just returns a smart pointer to the result 
buffer. Sometimes it can occur that the onprogress callback gets invoked multiple times 
when the reading already finished which means that the callback receives multiple times a 
reference to the same buffer. One of these references can be used to neuter the associated 
buffer object, which means that the buffer gets freed. Then, the second reference can be 
used as a dangling pointer to access the freed memory. 
References to the last two passed buffers are stored in the last and lastlast variables in lines 
13 and 14. The array buffer of last is neutered in line 20 via a call to postMessage. This call 
transfers the buffer to a JavaScript Worker which takes over the ownership. This leads to a 
free call of the array buffer. After that, the lastlast variable can be used to still access the 
buffer and therefore access freed memory. 
The invocation of garbage collection in line 10 would not be required, however, it helps to 
obtain a more reliable heap layout and to prevent out-of-memory errors. The above code 
27 
must be executed several times to trigger the bug because of a race condition. The 
onprogress callback must be called multiple times after reading finished which just happens 
occasionally. 
The vulnerability was exploited in-the-wild and was discovered by Googles Threat Analysis 
Group. Exodus Intelligence published a blog post 53 with further exploitation details. An 
exploit is available at 54. 
Generalization for variation analysis: 
• 
The code from line 6 can be used to trigger garbage collection. 
• 
A postMessage call, as shown in line 20, can be used to neuter array buffers. A fuzzer 
should add this code at random locations to free an array buffer. 
• 
A fuzzer should save callback arguments within global variables and access them 
later. It is important that arguments from different invocations are stored, as shown 
with the last and lastlast variables. 
• 
A fuzzer must know that the onprogress callback argument evt has a target.result 
property. This requires a comprehensive grammar definition. 
Firefox bug 1510114, CVE-2018-18500 – Use-After-Free while parsing custom HTML 
elements 
01: // This PoC is simplified and cannot be started independently 
02:  
03:  
04: var delay_xhr = new XMLHttpRequest(); 
05: delay_xhr.open('GET', '/delay.xml', false); // 3rd arg: async := false 
06: class CustomImageElement extends HTMLImageElement { 
07:     constructor() { 
08:         super(); 
09:         gc(); 
 // Invoke garbage collection 
10:         location.replace("about:blank");    // Trigger abort of document loading 
11:         delay_xhr.send(null); 
12:         // variable >mHandles 
17:  
18:  
Custom elements support the possibility to create sub types of HTML elements. A new class 
which extends an HTML element can be created with a custom constructor. When such 
custom elements are used, the defined constructor gets invoked during HTML tree 
construction. The HTML tree construction phase is implemented in C++ code which stores 
a pointer to the parser in a local variable. The problem occurs when the custom constructors 
performs an operation which frees the parser object. This can be done by aborting the 
document load by setting the location to about:blank which drops a reference to parser as 
53 https://blog.exodusintel.com/2019/03/20/cve-2019-5786-analysis-and-exploitation/ 
54 https://github.com/exodusintel/CVE-2019-5786 
28 
shown in line 10. However, since other references are still pointing to the parser object, the 
object is not immediately freed. The pointer stored in the local variable in the HTML tree 
construction code is therefore not yet a dangling pointer. These other references are later 
dropped during asynchronous tasks. 
To trigger the vulnerability, the parser object must be freed before the custom constructor 
returns. Since JavaScript code is in general not blocking, the asynchronous tasks would not 
be executed before the return occurs and therefore the vulnerability would not be triggered 
because there are still references to the parser object. 
Synchronous XMLHTTPRequests are an exception and can block JavaScript code 
execution. Performing such a request results in the processing of the event loop until the 
request finishes and therefore in the execution of the asynchronous tasks which drop all 
other references to the parser object. This is done in lines 5 and 11.  
After aborting the document load, JavaScript code cannot be executed anymore. However, 
further JavaScript execution is required to exploit the vulnerability. To solve this problem the 
vulnerability can be loaded inside an iframe which means code can still be executed from 
the main frame. 
A detailed analysis of the vulnerability is available at 55. An exploit is available at 56. 
Generalization for variation analysis: 
• 
The document load can be aborted by setting the current location to about:blank 
which can trigger vulnerabilities. However, adding this code too often is 
counterproductive because other generated code may not get executed. This 
operation should therefore mainly be used inside iframed code. 
• 
Making a synchronous XMLHTTPRequests results in the processing of the event 
loop and such code should therefore be added at random locations during fuzzing. 
• 
The fuzzer should be capable of generating custom HTML elements. 
Firefox bug 1499861, CVE-2018-18492 – Use-After-Free in select element 
01: div = document.createElement("div"); 
02: opt = document.createElement("option"); 
03: div.appendChild(opt); 
04: div.addEventListener("DOMNodeRemoved", function () {  
05:             sel = 0;  
06:             FuzzingFunctions.garbageCollect(); 
07:             FuzzingFunctions.cycleCollect(); 
08:             FuzzingFunctions.garbageCollect(); 
09:             FuzzingFunctions.cycleCollect(); 
10:       }); 
11: sel = document.createElement("select"); 
12: sel.options[0] = opt; 
The code creates a div and an option element and appends opt to div. Next, line 4 adds an 
55 https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-
analysis-and-exploitation/ 
56 https://github.com/sophoslabs/CVE-2018-18500 
29 
event listener which fires as soon as opt gets removed from div. Such a removal can be 
triggered by creating a select element and setting its options to opt as done by line 12. This 
means that opt must be removed from its parent which triggers the event listener from line 
4. In the event listener the sel variable is set to zero which removes the last hold reference 
to sel resulting in a free of the select element. To trigger garbage collection helper functions 
are used in line 6 to 9. These helper functions can be enabled in Firefox by compiling a build 
with the --enable-fuzzing flag. When the code from line 12 continues execution, after the 
event listener executed, the sel element is already freed, resulting in a use-after-free 
vulnerability. 
Instead of the helper functions from line 6 to 9 the following code can be used: 
new ArrayBuffer(0xfffffff); 
alert(); 
The large array buffer results in memory pressure which triggers garbage collection and the 
alert() call blocks the execution resulting in the processing of pending asynchronous tasks. 
A more in-depth analysis of the vulnerability can be found at 57. 
Generalization for variation analysis: 
• 
The fuzzer should make use of helper functions to trigger garbage collection and 
other heap-related operations at random locations. 
• 
The alert function can be used as an alternative to the previously mentioned 
synchronize XMLHttpRequest. However, it has similar drawbacks. 
• 
The fuzzer should focus on fuzzing code in event handlers. 
• 
Setting a variable to zero in an event handler, like done in line 5, to remove the last 
hold reference, can result in use-after-free vulnerabilities.  
Firefox bug 1321066, CVE-2016-9079 (Tor browser 0day) – Use-After-Free in SVG 
animations 
01:  
02:      
03:     Click to crash 
04:      
05:          
06:          
07:      
08:      
09:          
10:      
11:  
The code creates an animation with a start time after its end time which leads to a use-after-
free condition. Line 5 defines the ia animation with the end field set to 50 seconds. Line 6 
defines a new animation with begin set to 60 seconds, but end is set to the end value from 
the ic element. The ic element is defined in line 9 which has its end set to ia.end which is 50 
57 https://www.zerodayinitiative.com/blog/2019/7/1/the-left-branch-less-travelled-a-story-of-a-mozilla-firefox-
use-after-free-vulnerability 
30 
seconds as per line 5. In line 6 an animation is therefore created which begins after 60 
seconds, but which ends already after 50 seconds. When the end time is reached, the 
associated object is freed, however, the start code still gets executed which leads to a use-
after-free vulnerability. 
According to Forbes 58 the exploit was developed by Exodus Intelligence and leaked to the 
public or was used by a customer of them. In 2013, the FBI used CVE-2013-1690 against 
users of the freedom hosting hidden service from the Tor network to attack visitors of the 
4pedo board, a child pornography website. The used payload shared similarities with the 
payload from CVE-2016-9079 which lead to the suspicion that the exploit was used by the 
FBI. An exploit for CVE-2016-9079 was sent via email 59 to an admin of obscured files, a 
private file hosting service in the dark web. The target of the attack was the GiftBox website 
which distributed child pornography 60. 
Mozilla Firefox published in their blog the following statement: “[…] If this exploit was in fact 
developed and deployed by a government agency, the fact that it has been published and 
can now be used by anyone to attack Firefox users is a clear demonstration of how 
supposedly limited government hacking can become a threat to the broader Web.” 61 
Exploits for the vulnerability are available at 62 and at 63. 
Generalization for variation analysis: 
• 
Finding similar vulnerabilities requires a deep understanding of all HTML and SVG 
elements including their possible attribute values. For example, to find the shown 
PoC, the fuzzer would need to know that the begin and the end values of an animate 
element can be set to strings such as 50s. Moreover, that the value can reference 
other elements by using the otherElement.end syntax. 
• 
The fuzzers ability to find such classic vulnerabilities in the render engine has a 
strong correlation to the used grammar. Improving the grammar should therefore be 
prioritized. However, improving a grammar is a time-consuming and error prone task. 
58 https://www.forbes.com/sites/thomasbrewster/2016/12/02/exodus-intel-the-company-that-exposed-tor-for-
cops-child-porn-bust 
59 https://bugzilla.mozilla.org/show_bug.cgi?id=1321066 
60 https://www.forbes.com/sites/thomasbrewster/2016/12/02/exodus-intel-the-company-that-exposed-tor-for-
cops-child-porn-bust 
61 https://blog.mozilla.org/security/2016/11/30/fixing-an-svg-animation-vulnerability/ 
62 https://www.exploit-db.com/exploits/41151 
63 https://github.com/rh0dev/expdev/blob/master/CVE-2017-5375_ASM.JS_JIT-Spray/CVE-2016-
9079_Firefox_50.0.1_DEP_ASLR_Bypass.html 
31 
4.2 Classic vulnerabilities in the JavaScript engine 
The JavaScript engine has become one of the main attack targets in recent years. This has 
several reasons: 
• 
It is a simple fuzzing target because it does not require a GUI and therefore achieves 
high fuzzing speeds like several hundred executions per second. Concepts like a fork-
server or in-memory fuzzing can be applied which increases performance significantly. 
• 
The engine can be started as a standalone binary which means debugging is simple and 
fast. Attaching a debugger to a full browser binary on the other hand can take several 
minutes or even hours. 
• 
JavaScript is a complex language which results in a big attack surface and therefore in 
a lot of vulnerabilities. Its implementation is especially complex because JavaScript is 
loosely typed but it must achieve high execution speed together with low memory usage. 