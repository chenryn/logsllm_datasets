    语句来进行互斥锁的例子（摘要）。
    ``` 代码无行号
    try {
      synchronized(this) {  // 互斥锁
        name = req.getParameter("name");
        Thread.sleep(3000); // 等待 3 秒（模拟耗时的处理）
        out.print(escapeHTML(name));  // 显示用户名
      }
    } catch (InterruptedException e) {
      out.println(e);
    }
    ```
    第 2 行中的 `synchronized(this)` 的意思就是给 Servlet
    的实例加上互斥锁。加上了 `synchronized` 语句后，该 Servlet 的
    `synchronized` 代码块内便只允许一个线程执行。也就是说，赋值给变量
    `name` 后就不会再被其他线程改写了。
    这里我们将此时各请求的处理依然以时间轴的形式进行整理，如下图所示。
    ![{%}](Image00183.jpg)
    **图 4-126 加上互斥锁后的内部处理**
    由上图可知，在进行 `"yamada"` 的处理时，`"tanaka"`
    的处理暂时停止并处于待机状态。
    这会造成应用程序的性能底下。如果对这个 Servlet
    同时发出多个请求，那么就会出现需等待请求数 ×3
    秒的时间，因此也就很容易招致妨害 Servlet 的攻击（DoS 漏洞）。
    鉴于这种情况，建议大家尽量不要使用互斥锁，也就是说不要使用共享资源。如果非用不可，就应当在设计上多下功夫，使互斥锁的耗时尽可能短一些。详情请参考并行处理或多线程编程的参考书。
#### **总结**
本节讲述了因对共享资源的互斥锁处理不完善而造成的问题。常见的互斥锁的形式为数据库中的锁（乐观锁和悲观锁），除此之外，在共享变量或文件时也需要用到互斥锁。
尽量不使用共享资源也能够提高应用的性能，而如果用到了共享资源，就需要在设计中下工夫以将互斥锁的处理时间压缩至最短。
#### **参考：Java Servlet 的其他注意点**
Servlet 的实例变量也能够像下面这样在 JSP 中定义。
``` 代码无行号
```
由于使用这种方式定义的变量也是在各请求间共享的，因此也需要加上互斥锁。但考虑到通常情况下并没有必要在
JSP 中定义实例变量，因此不推荐使用这种方法。
另外，由于实现 `SingleThreadModel` 接口的 Servlet
类能够保证在单线程下运作，因此可以不对 Servler
的实例变量上锁。虽然以前有时也会使用这种方法作为对策，但是在 Servlet2.4
版本以后，随着 `SingleThreadModel`
接口被弃用（Deprecated）[74]{.注释编号}
，今后也就不再推荐使用这种方法了。
[74]{.注释编号下} SingleThreadModel
的文档：
（英语）。
\
# **第 5 章 典型安全功能** {#text00000.html#nav_point_59 line-num="0 1"}
> 本书中把应用程序里用来加强系统安全程度的功能称为安全功能。如果由于安全功能里面存在的设计不足，而导致系统安全性不够强的话，虽然这不能算作狭义上的安全隐患，但也会使系统存在被外界攻击的风险。与之相反，如果在安全功能上下足功夫的话，则可以防止由于用户不小心或者错误操作等导致的意外，从而提高系统的安全性。作为典型的安全功能，本章将会涉及以下内容，详述系统会受到什么样的潜在威胁，以及针对这些威胁应该在设计上采取何种对策。
>
> -   认证（Authentication）
>
> -   授权（Authorization）
>
> -   账号管理
>
> -   日志（Log）管理
## **5.1 认证** {#text00000.html#nav_point_60 line-num="9 10"}
认证是指通过某些方法验证系统用户身份的行为。Web
应用程序里使用的认证方法除了在第 3 章里已经介绍过的 HTTP
认证之外，还有使用 HTML Form 的用户名和密码的认证方式，以及利用客户端的
SSL 证书的认证方式等。本书将主要针对 HTML Form 认证进行说明。
这一节将从以下几个方面来说明当认证功能存在漏洞时将会面临的威胁以及可以采取的对策：
-   登录（Login）功能
-   针对暴力破解攻击的对策
-   密码的保存方式
-   自动登录
-   登录表单（Form）
-   错误消息
-   退出登录功能
### **5.1.1 登录功能** {#text00000.html#nav_point_61 line-num="23 24"}
用户登录功能可以称为是认证处理中的核心，即通过对照用户输入的
ID、密码是否和数据库一致，若信息一致即认证成功。本书中把这种用户本人合法性验证的功能称为登录功能。
登录功能通常是通过执行类似下面的 SQL 语句，从数据库中检索满足用户 ID
和密码条件的记录，如果找到了相应的用户记录，就可以认为是登录成功了。
``` {.代码无行号 line-num="29 30"}
SELECT * FROM usermaster WHERE id=? AND password=?
```
#### **针对登录功能的攻击** {line-num="31 32"}
如果攻击者成功攻破了登录功能，就可以伪装成正常用户使用系统了。本书中将把这种攻击称为非法登录。认证功能的攻击有如下几种比较典型的案例。
-   **通过 SQL 注入攻击来跳过登录功能**
    如果登录页面存在 SQL
    注入漏洞，攻击者即使不知道用户的密码，也可以利用漏洞，跳过登录功能从而成功登录。关于
    SQL 注入的内容在 4.4.1 节已经介绍过了，本章不会再进行更深入的讨论。
-   **通过 SQL 注入攻击获取用户密码**
    同样，如果应用中存在 SQL 注入漏洞，则保存在数据库中的用户 ID
    或者密码有可能被盗取。攻击者一旦拿到了这些用户的 ID
    和密码，就可能冒充用户登录。
    不过即使攻击者利用 SQL
    注入漏洞盗取了用户的密码，我们也有办法让攻击者无法利用这些数据进行攻击。具体对策我们将在
    5.1.3 节中说明。
-   **在登录页面进行暴力破解**
    还有一种攻击方法是在登录页面不断地尝试使用各种用户 ID
    和密码的组合来进行登录，具体方法包括暴力破解和字典破解等。
    暴力破解（Brute Force
    Attack）使用的方法是利用所有的字符组合作为密码来进行尝试。
    字典破解是事先准备一个"字典"，其中都是常被用户作为密码使用的字符组合，然后按顺序尝试字典里保存的密码组合（见图
    5-1）。
    ![{%}](Image00184.jpg)
    **图 5-1 反复尝试各种用户 ID 和密码组合进行攻击**
    不管利用上面哪种攻击方法，都需要尝试大量的用户 ID
    或者密码组合，所以我们可以在登录功能中检测这种攻击并采取相应的预防措施，具体内容将会在
    5.1.2 节中详细说明。
-   **通过社会化攻击得到用户密码**
    社会化攻击（也称为社会化工程攻击，Social
    Hacking），指的是并不对计算机或者软件发起攻击，而是通过对欺骗用户，获取重要信息的攻击方法。典型的方法比如冒充领导或者服务器管理员给用户打电话，欺骗用户说"由于某项业务需要，请告知密码"，从而骗取用户的密码的行为。
    此外，还有一种攻击方法是通过偷窥用户在输入密码时的页面或者键盘敲打来盗取密码，叫作
    Shoulder Hack，这也是社会化攻击的一种。
    Shoulder Hack
    如果从字面意思来看的话有从用户背后探头窥视的意思，但是实际上即使不用伸出头，如果采用其他方法能窥视到的话，也能得到用户的密码。在本书中，我们将把通过偷窥得到用户密码的攻击行为统一称为
    Shoulder Hack。应对 Shoulder Hack
    攻击，可以采取遮盖密码输入框等方法，详细的内容请参考 5.1.5 节。
    从 Web 应用程序本身来说，对于 Shoulder Hack
    以外的其他社会化攻击就显得无能为力了。我们可以通过对员工、用户进行教育强化的方法来应对攻击，但这超出了本书的范围，就不在这里详述了。
-   **通过钓鱼方法获取密码**
    钓鱼（Phishing）是指通过搭建和真实网站非常相像的山寨网站，诱骗用户输入密码等来获取个人信息的方法。这也是社会化工程（Social
    Engineering）的一种。在国外，频繁报道了大规模的钓鱼事件，在日本也报道过用户在山寨
    Yahoo!JAPAN 和银行等钓鱼网站上受骗的案例。
    预防钓鱼本首先是用户需要提高警惕，同时作为 Web
    网站也应采取相应对策，我们将在 7.2 节里说明。
#### **登录功能被破解后的影响** {line-num="71 72"}
如果攻击者攻破了 Web
应用程序以他人名义非法登录，那么攻击者就拥有并且可使用用户的所有权限，比如阅读信息、修改、删除以及购物、转账、发帖等。
非法登录带来的破坏性与会话劫持是一样的，如果密码被攻击者知道了，有一些需要密码再次输入确认的功能都能被攻击者恶意使用（会话劫持则不能达到此目的）。
另外，会话劫持攻击一般都是被动攻击，攻击时需要用户发起某些活动，攻击者才能参与进来。而非法登录是一种主动攻击，不需要用户的参与。因此非法登录会对更多的用户产生影响。
综上所述，非法登录的影响比远超于会话劫持，属于重大安全隐患，需要制定万全的对策。
#### **如何防止非法登录** {line-num="81 82"}
在使用表单认证（或者叫密码认证）的应用里，为了防止非法登录，需要做到以下两点。
-   确保系统不存在 SQL 注入等安全性 Bug
-   使用难以猜测的密码
下面依次对这两点进行说明。
-   **确保系统中不存在 SQL 注入等安全性 Bug**
    用户登录功能容易存在的安全隐患有以下几种 [1]{.注释编号} ：
    （A）SQL 注入（4.4.1 节）
    （B）固定会话 ID（4.6.4 节）
    （C）Cookie 的安全属性设置不完善（4.8.2 节）
    （D）自由重定向漏洞（4.7.1 节）
    （E）HTTP 消息头注入（4.7.2 节）
    （A）的 SQL
    注入漏洞之所以容易发生，是因为在一般的用户登录实现中都需要利用 SQL
    在数据库中进行用户名密码比对。
    （B）和（C）是用户登录认证后，在 Cookie 里保存会话 ID
    时存在安全问题时所带来的安全隐患。
    （D）和（E）虽然和用户认证没有直接关系，但是用户登录后，多数应用需要跳转到登录前的页面，结果导致登录功能经常出现此类安全隐患。
    下面介绍一下有关密码预测难度的问题。
-   **设置难以猜测的密码**
    密码认证的前提是"知道此密码的人只有合法用户"。基于这个前提，可以判断"只要某个人知道了密码，即可认为他就是合法用户"，但是如果其他人可以推测出此密码，那这个前提就不存在了。
    所以，最基本的是我们需要确保用户的密码不能被其他人猜测到。比如在 4.6
    节里提到的那样，如果使用类似密码学级别的伪随机数生成器的话，基本可以生成不能被猜测到的密码。
    但是密码是需要用户自己输入的，程序生成的随机密码不容易记住，输入也很麻烦，所以实际上用户更多的是选择即好记也方便输入的字符串作为密码。
    一般来说，用户使用便捷性（好记、输入方便）和系统安全强度（猜测的困难程度）如图
    5-2
    那样成反比关系。如果用户能在选择密码时能深思熟虑的话，应该可以选出密码安全度高，又能兼顾到用户使用方便性的密码。
    ![{%}](Image00185.jpg)
    **图 5-2 密码的使用便捷性和安全强度的关系**
-   **密码的字符种类和长度要求**
    在设置一个不易被他人猜到的密码时，最基本的要素就是密码所使用的字符种类以及密码的长度。因为字符种类和密码长度决定了可以作为密码使用的字符串的总数量。
    密码组合总数 = 字符种类的总数 \^ 密码位数
    这里"\^"是幂乘运算符。字符种类的数量指的是可以使用的字符的总数量，比如只用数字就是
    10，只用小写英文字母就是 26 个等。表 5-1
    显示的是根据可使用的字符种类及密码长度得到的各种可能的密码组合的总数。
    **表 5-1 密码总数**
      --------------------------------- ------------ ------------ ------------
      字符种类数量                      4 位         6 位         8 位
      10 种（数字）                     1 万         100 万       1 亿
      26 种（小写英文字母）             约 46 万     约 3 亿      约 2000 亿
      62 种（大小写英文加数字）         约 1500 万   约 570 亿    约 220 兆
      94 种（字母、数字加上各种符号）   约 7800 万   约 6900 亿   约 6100 兆
      --------------------------------- ------------ ------------ ------------
    从上面的表中可以看出，字符种类和密码位数即使只是稍微增加某一项的值，密码组合的总数都将会大幅增加。
-   **密码的使用现状**
    然而现实中用户使用的密码并没有表 5-1
    说明的那样多，其原因就是用户更愿意使用好记和好输入的密码。也就是说，用户更倾向于使用如图
    5-2 中右下角所显示的密码类型。
    媒体已经报道了很多能佐证这种倾向的统计数据，我们介绍其中的一些报道
    [2]{.注释编号}