之前简单学了一波ret2dl_runtime_resolve的操作，但是没有认真记下笔记，只懂了大概的原理流程，到现在要回忆起具体的细节又想不起来orz，果然以我这老人家的记性不通过码字是记不牢的，因此这里再认真深入复现一次原理
# 原理
拿一个自己写的c来测试一波：
    #include 
    void say()
    {
        char buf[20];
        puts("input your name:");
        read(0,&buf,120);
        printf("hello,%s\n",buf);
        //return 0;
    }
    int main()
    {
        puts("hello word!");
        say();
        exit(0);
    }
我这里编译成64位的程序来测试
可以看到，程序一开始会先运行puts函数，打印出hello Word
上gdb进行动态调试
我们用si跟进call puts@plt里面去，会走到0x400500的puts plt表中去，我们可以看到plt中的内容则是几条指令
jmp 到 0x601018的地方去，这里其实就是got表
而我们可以看到，got表里面存的却是puts的plt表的第二条指令：
`0x400506  push 0`
因此又回到plt表继续执行push 0操作
`0x40050b  jmp 0x4004f0`
接着又push了0x601008的内容到栈顶
而0x601008正是GOT[1]，也就是push
GOT[1]了，接着就jmp到GOT[2]，而GOT[2]的内容正是_dl_runtime_resolve函数的真实地址
    GOT表的内容
    GOT[0]--> 0x601000:0x0000000000600e28 ->.dynamic的地址
    GOT[1]--> 0x601008:0x00007ffff7ffe168 ->link_map 此处包含链接器的标识信息
    GOT[2]--> 0x601010:0x00007ffff7dee870 ->_dl_runtime_resolve 动态链接器中的入口点
    GOT[3]--> 0x601018:0x0000000000400506 -> 
    。。。。
实际上，就是执行了`_dl_runtime_resolve(link_map,
reloc_arg)`，通过这个神奇的函数，就能够把函数的真实地址写到got表，以后plt一执行之前的jmp的时候，就可以直接拿到真实的地址了，到这里，其实就可以解释动态链接中是如何调用函数的了，通过这个也可以对动态延迟绑定技术有进一步的理解。
这里有一张图非常清晰的显示了函数第一次调用和第二次调用的流程：
继续，我们来看一下这个link_map里面有个什么
可以看到link_map中有个.dynamic的地址 ，到这里就要介绍一波这些花里胡哨的段了
.dynamic，动态节一般保存了 ELF 文件的如下信息
  * 依赖于哪些动态库
  * 动态符号节信息
  * 动态字符串节信息
动态节的结构是这样的
    typedef struct {
        Elf32_Sword     d_tag;
        union {
            Elf32_Word  d_val;
            Elf32_Addr  d_ptr;
        } d_un;
    } Elf32_Dyn;
    extern Elf32_Dyn_DYNAMIC[];
用readelf -d ./main可以打印出程序的动态节的内容
    Dynamic section at offset 0xe28 contains 24 entries:
      标记              类型                 名称/值
     0x0000000000000001 (NEEDED)             共享库：[libc.so.6]
     0x000000000000000c (INIT)               0x4004d0
     0x000000000000000d (FINI)               0x400774
     0x0000000000000019 (INIT_ARRAY)         0x600e10
     0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)
     0x000000000000001a (FINI_ARRAY)         0x600e18
     0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)
     0x000000006ffffef5 (GNU_HASH)           0x400298
     0x0000000000000005 (STRTAB)             0x400378  
     0x0000000000000006 (SYMTAB)             0x4002b8
     0x000000000000000a (STRSZ)              105 (bytes)
     0x000000000000000b (SYMENT)             24 (bytes)
     0x0000000000000015 (DEBUG)              0x0
     0x0000000000000003 (PLTGOT)             0x601000
     0x0000000000000002 (PLTRELSZ)           144 (bytes)
     0x0000000000000014 (PLTREL)             RELA
     0x0000000000000017 (JMPREL)             0x400440
     0x0000000000000007 (RELA)               0x400428
     0x0000000000000008 (RELASZ)             24 (bytes)
     0x0000000000000009 (RELAENT)            24 (bytes)
     0x000000006ffffffe (VERNEED)            0x4003f8
     0x000000006fffffff (VERNEEDNUM)         1
     0x000000006ffffff0 (VERSYM)             0x4003e2
     0x0000000000000000 (NULL)               0x0
我们这里需要关注的是这些：
    0x0000000000000005 (STRTAB)             0x400378  
     0x0000000000000006 (SYMTAB)             0x4002b8
     0x0000000000000017 (JMPREL)             0x400440
STRTAB, SYMTAB, JMPREL分别指向.dynstr, .dynsym, .rel.plt节段
这里解释一下，动态符号表 (.dynsym) 用来保存与动态链接相关的导入导出符号，不包括模块内部的符号。而 .symtab 则保存所有符号，包括
.dynsym 中的符号，因此一般来说，.symtab的内容多一点
需要注意的是 `.dynsym` 是运行时所需的，ELF 文件中 export/import 的符号信息全在这里。但是`.symtab`
节中存储的信息是编译时的符号信息，用 `strip` 工具会被删除掉。
`.dynstr`节包含了动态链接的字符串。这个节以`\x00`作为开始和结尾，中间每个字符串也以`\x00`间隔。
我们主要关注动态符号.dynsym中的两个成员
  * st_name， 该成员保存着动态符号在 .dynstr 表（动态字符串表）中的偏移。
  * st_value，如果这个符号被导出，这个符号保存着对应的虚拟地址。
.rel.plt 包含了需要重定位的函数的信息，使用如下的结构，需要区分的是`.rel.plt`节是用于函数重定位，`.rel.dyn`节是用于变量重定位
    typedef struct {
        Elf32_Addr        r_offset;
        Elf32_Word       r_info;
    } Elf32_Rel;
    //32 位程序只使用 Elf32_Rel
    //64 位程序只使用 Elf32_Rela
    typedef struct {
        Elf32_Addr     r_offset;
        Elf32_Word    r_info;
        Elf32_Sword    r_addend;
    } Elf32_Rela;
r_offset：指向对应got表的指针  
r_info：r_info>>8后得到一个下标，对应此导入符号在.dynsym中的下标
介绍完以上，我们再回到这里：
_dl_runtime_resolve(link_map, reloc_arg)
这里的link_map就是GOT[1]
这里的reloc_arg就是函数在.rel.plt中的偏移，就是之前push 0
也就是说puts函数在.rel.plt中的偏移是0，我们用readelf -r main 发现的确如此
接着就需要分析_dl_runtime_resolve(link_map, reloc_arg)到底干了什么，我们gdb跟进，发现在
_dl_runtime_resolve中又调用了 _dl_fixup函数
这个函数就是绑定真实地址到got的核心操作所在了
这里直接贴一个大佬对 _dl_fixup 函数的分析
    _dl_fixup(struct link_map *l, ElfW(Word) reloc_arg)
    {
        // 首先通过参数reloc_arg计算重定位入口，这里的JMPREL即.rel.plt，reloc_offset即reloc_arg
        const PLTREL *const reloc = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);
        // 然后通过reloc->r_info找到.dynsym中对应的条目
        const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];
        // 这里还会检查reloc->r_info的最低位是不是R_386_JUMP_SLOT=7
        assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);
        // 接着通过strtab+sym->st_name找到符号表字符串，result为libc基地址
        result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope, version, ELF_RTYPE_CLASS_PLT, flags, NULL);
        // value为libc基址加上要解析函数的偏移地址，也即实际地址
        value = DL_FIXUP_MAKE_VALUE (result, sym ? (LOOKUP_VALUE_ADDRESS (result) + sym->st_value) : 0);