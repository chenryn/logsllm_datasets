我在我自己的服务器上托管了这些设置，并完全按照它们在现实生活中实现的方式进行。为了测试这种方法，我选择了Shadow
Daemon，因为它的开源，低规则维护性质。此外，它很容易设置，因此移植代码作为插件工作并不是太困难。
#### 学习阶段
我写了一个小的python脚本，它从学习阶段开始，一个接一个地重复发送正常和恶意请求，每次请求之间的时间延迟为2秒。
共使用了200个请求，其中一百个包含正常请求，另一半包含恶意字符串。学习阶段非常清楚地表明了这种方法的有效性。
传递和阻止/拒绝请求的一些示例是：
你可能会注意到，在请求被阻止的情况下，某些请求越过了标记边界。这可能是由于互联网连接遭受数据包丢失或网络拥塞。但是，可以清楚地注意到，任何一方都没有跨越绝对边界的请求。
#### 攻击阶段
实际测试的时间。在此阶段，将收集一组最常见的恶意payload，以便针对目标进行测试。现在，这里的想法是通过逐渐将不同的混淆案例添加到各种上下文的查询字符串来生成多态payload的序列。
多态payload的工作完全相同的方式相同恶意payload（语义相同），但语法不同/混淆以便防火墙正则表达式无法检测到它。我们将在另一篇文章中讨论有关此主题的更多内容，但现在让我们举一个小例子：
现在，一系列此类请求将发送到托管WAF的服务器，并记录响应时间。为了进一步验证实验的声明，记录了响应状态代码和块页面。正确识别的恶意请求将导致403状态以及作为响应内容的阻止。
在反向代理设置上，结果非常符合预期。标记和传递的请求之间的最小时间间隔为53.2
ms。结果表明，在96.4％的案例中，我们能够正确区分被阻止和被传递的请求。因此，我们可以有把握地说，我们的这种拓扑方法的准确性和可靠性足够高，可以断言任何攻击者只需要几次重复即可达到完美的测量条件。
在服务器驻留设置（基于插件）的情况下，我实际上并不期望结果具有如此独特的结果，但是我惊讶地发现该方法在反向代理拓扑的情况下工作得很好。
我在这个设置中注意到值得注意的是，阻塞和传递请求（58.8 ms）之间的总体时序差异大于先前的拓扑（53.2 ms）。此拓扑获得的结果可视化如下：
因此，我们可以有把握地说，我们的定时攻击在95％以上的案例中明确区分了被阻止和通过的请求。我的实验的简短摘要如下：
#### 方法的缺点
这种方法的主要缺点是任何攻击者都需要发送大量请求来查找WAF规则集中的漏洞。除此之外，我们还将网络噪声/抖动问题作为一个重大障碍，导致测量结果不稳定。
我们可以添加到此列表中的另一个因素是服务器负载，它可以是加法或乘法，具体取决于服务器处理请求的性质。
现代精心布置的WAF通常实现一种安全机制，当WAF在请求中检测到恶意字符串时，客户端的IP无限地/在有限时间内被阻止。这极大地限制了这种方法的能力。
我们可以。但是我们可以用另一种技术解决这个问题。
#### 解决方案
这种问题的显而易见的解决方案是在合理的时间内执行越来越多的测试，直到我们获得平均结果，从而排除具有大响应时间的剩余查询。
此外，由于网络噪声严格来说是非负的，这实际上是由于我们的攻击向量的性质，即测试布尔值。在WAF阻止客户端的IP地址的情况下，IP轮换攻击以及跨站点定时攻击非常有效地绕过了阻止IP的丑陋场景。在许多情况下，在连续请求之间设置时间延迟也会有所帮助。
#### 放大攻击
那么我们怎么能放大这个攻击向量呢？让我们来看看：
**1.选择更长的URL路径：** 当从服务器查询资源时，它由服务器CPU处理，不同的组件一起累积（例如图像，CSS等），然后通过响应提供给我们。
因此，我们可以选择一个URL路径，其响应内容是所有其他URL路径中最长的（例如，对于博客站点，我们可以选择具有最大图像数量的文章），从而导致服务器CPU上的更多负载。服务器处理请求所花费的时间越多，攻击的有效性就越大。
**2.拒绝服务攻击：**
其次，我们可以将该过程与各种拒绝服务攻击相结合，例如提交具有大量查询的搜索框，发送具有大内容的POST请求，哈希冲突攻击（HashDoS）等。指纹识别所花费的时间越长，噪声的影响就越小。
**3.跨站点规则指纹识别：**
最后，我们可以通过跨站点请求伪造（CSRF）攻击来链接我们的指纹识别过程，这需要攻击者将用户引诱到他可以嵌入一些HTML和JavaScript来为用户进行测量并为他记录结果的站点。例子如下：
在上面显示的代码中，我们创建了一个不可见的img标记。就在我们将payload复制到图像的URI之前，我们开始记录时间。由于图像无效，浏览器将触发onerror事件处理程序，并且当时间记录停止时将执行相关功能，并且将弹出具有记录时间的警报框。
这种方法有三个主要优点：
  1. 首先，攻击者的身份仍然隐藏起来。由于多个用户将使用WAF向服务器发送请求，因此几乎无法区分谁是这背后的实际角色。
  1. 这种方法绝对超越了阻止IP地址的WAF作为计数器安全措施的影响。
  1. 此外，特别重要的是声明该方法仅在基于时间的攻击时可靠地工作。有时SOP（同源策略）可能会限制从其他来源读取页面内容。因此，在这种情况下，可能无法使用存储侧通道观察阻塞并指纹WAF。
### 结论
所以我们总结一下。此攻击媒介突出了基于时间的侧通道攻击在网络上的有效性，以及WAF开发人员编写防弹规则集的重要性。
在我的这个小小的努力中，我在ShadowD WAF规则集中发现了几个绕道和漏洞，在我的下一篇文章中，我将写到我发现的bypassing!