### Requirement: Fulfillment of Security Invariants (SIs)
- **Requirement**: The state `k` must fulfill all security invariants (SIs).
- **Condition**: For any operation `op`, the preconditions must imply the postconditions.
- **Condition**: The current state `k` must fulfill all preconditions for the operation `op`.
- **Postcondition**: If the operation `op` takes place, the resulting state `result.0` must be a valid and secure state.
  - Ensures: `IsSecureState(result.0) ∧ IsSecureOps(k, result.0)`
- **Property**: The resulting state `result.0` must fulfill all security invariants (SIs).

### Operation Postconditions
- **DrvReadOp**:
  - If `op.DrvReadOp?` is true, then:
    - `var k', d : | DrvRead_PostConditions(k, op.drv_sid, op.read_objs, op.tds_dst_src, op.fds_dst_src, op.dos_dst_src, k', d);`
- **DevReadOp**:
  - If `op.DevReadOp?` is true, then:
    - `var k', d : | DevRead_PostConditions(k, op.dev_sid, op.read_objs, op.tds_dst_src, op.fds_dst_src, op.dos_dst_src, k', d);`
- **DevWriteOp**:
  - If `op.DevWriteOp?` is true, then:
    - `var k', d : | DevWrite_PostConditions(k, op.dev_sid, op.td_id_val_map, op.fd_id_val_map, op.do_id_val_map, k', d);`
- **EmptyPartitionCreateOp**:
  - If `op.EmptyPartitionCreateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **DevActivateOp**:
  - If `op.DevActivateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **DrvActivateOp**:
  - If `op.DrvActivateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **DrvDeactivateOp**:
  - If `op.DrvDeactivateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **EmptyPartitionDestroyOp**:
  - If `op.EmptyPartitionDestroyOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **ExternalObjsDeactivateOp**:
  - If `op.ExternalObjsDeactivateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **ExternalObjsActivateOp**:
  - If `op.ExternalObjsActivateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **DevDeactivateOp**:
  - If `op.DevDeactivateOp?` is true, then:
    - `var k', d : | Common_PostConditions(k, k', d);`
- **DrvWriteOp**:
  - If `op.DrvWriteOp?` is true, then:
    - `var k', d : | DrvWrite_PostConditions(k, op.drv_sid, op.td_id_val_map, op.fd_id_val_map, op.do_id_val_map, k', d);`

### Axioms, State Invariants, and Transition Constraints for I/O Separation Model

#### Axioms
1. **Ax1**: All transfer descriptors (TDs) have a finite range of values.
2. **Ax2**: Only active subjects can issue transfers to objects.
3. **Ax3**: Hardcoded TDs cannot be accessed by drivers.
4. **Ax4**: A device performs a transfer to an object only if the device can issue a transfer.
5. **Ax5**: The set of all subjects and objects are known a priori; i.e., in either active or inactive state.

#### State Invariants
1. Drivers and devices must have different subject IDs.
2. The set of subjects must not be empty.
3. TDs, FDs, and DOs must have different object IDs.
4. The set of objects must not be empty.
5. Each device’s TDs must include its hardcoded TD.
6. No two subjects associate (own) the same object.
7. Objects associated with any subjects must exist in the system states’ objects.
8. No hardcoded TDs define direct transfers to a TD with both read and write access modes.
9. Hardcoded TDs do not reference any hardcoded TDs.
10. Objects referenced in a device’s hardcoded TD must be associated with the device.
11. Arbitrary sets of TDs in the system state have finite ranges.
12. Only hardcoded TDs and active objects have values.
13. The partition IDs of the system state do not include NULL.
14. (SI1) For any TD state of a transitive closure in a system state, if a TD can be read by an active device, then objects referenced in that TD (i) must be in the same partition as its referenced objects, and (ii) must not be hardcoded TDs.
15. All objects associated with a subject must be in the same partition with the subject.
16. Active subjects and objects must belong to existing partitions.

#### Transition Constraints
1. IDs of objects and hardcoded TDs associated with subjects must be immutable in transitions.
2. (TC1) Only hardcoded TDs can be reused in a new partition with non-NULL partition IDs.
3. Hardcoded TDs’ values must be immutable in transitions.

### Computing Transitive Closure
- **Definition**: The transitive closure of a TD state is the set of all reachable TD states from that state via TD writes.
- **Implementation**:
  - Uses two mutually recursive functions.
  - The first function discovers all direct TD writes that can be issued by a device in one TD state, using a breadth-first search (BFS) algorithm starting from the device’s hardcoded TD.
  - The second function constructs and traverses a graph of TD states with the BFS algorithm, outputting all potential states that enable I/O transfers.
  - The computation always terminates due to the finiteness of the set of TDs and each TD having a finite set of values.

### Operation Mappings
#### Table I: Concrete Model to I/O Separation Model
- **DrvWrite**: DM RedDrvWrite, DM GreenDrvWrite
- **DevWrite**: DM RedDevWrite, DM GreenDevWrite
- **DrvRead**: DM RedDrvRead, DM GreenDrvRead
- **DevRead**: DM DevRead
- **EmptyPartitionCreate**: DM EmptyPartitionCreate
- **EmptyPartitionDestroy**: DM EmptyPartitionDestroy
- **DrvDeactivate**: DM GreenDrvDeactivate
- **DevDeactivate**: DM DevDeactivate
- **DrvActivate**: DM DrvActivateToGreenPartition, DM DrvActivateToRedPartition
- **DevActivate**: DM DevActivate
- **ExternalObjsActivate**: DM ExternalObjsActivateToGreenPartition, DM ExternalObjsActivateToRedPartition
- **ExternalObjsDeactivate**: DM GreenExternalObjsDeactivate, DM RedExternalObjsDeactivate

#### Table II: Concrete Model to Correct WK Design
- **DrvRead**: WSD OSDrvRead, WSD WimpDrvRead
- **DevRead**: WSD DevRead
- **DrvWrite**: WSD OSDrvWrite, WSD WimpDrvWrite
- **DevWrite**: WSD OSDevWrite, WSD WimpDevWrite
- **EmptyPartitionCreate**: WKD EmptyPartitionCreate
- **EmptyPartitionDestroy**: WKD EmptyPartitionDestroy
- **DevActivate**: WSD DevActivate
- **DevDeactivate**: WSD DevDeactivate
- **DrvDeactivate**: WKD GreenDrvDeactivate
- **ExternalObjsActivate**: WKD ExternalObjsActivateToGreenPartition, WKD ExternalObjsActivateToRedPartition
- **DrvActivate**: WKD DrvActivateToGreenPartition
- **ExternalObjsDeactivate**: WKD GreenExternalObjsDeactivate, WKD RedExternalObjsDeactivate
- **MultiDevs ReturnOS**: WKD MultiDevs ReturnOS

#### Table III: WK Design to Implementation
- **EmptyPartitionCreate/Destroy**: WK EmptyPartitionCreate/Destroy
- **DrvActivateToGreenPartition**: WimpDrv Activate
- **DrvDeactivate**: WimpDrv Deactivate
- **DevActivate/Deactivate**: USBPDev Activate/Deactivate, EEHCI Activate/Deactivate
- **ExternalObjsActivateToGreenPartition**: USBTD slot allocate 1slot, USBTD slot submit and verify qtd32/qh32
- **ExternalObjsDeactivate**: USBTD slot deallocate 1slot
- **DrvWrite**: WimpDrv Write eEHCI Config/Status/USBTDReg
- **DrvRead**: WimpDrv Read eEHCI Config/Status/USBTDReg
- **Direct I/O Accesses**: WSM OSDrvRead ByPAddr/PIO/ObjIDs, WSM OSDevRead ByPAddr/PIO, etc.

### Axioms for WK Implementation
- **Arithmetic and Bit-Oriented Operations**: 37 axioms.
- **Valid Mappings**: 50 axioms asserting the validity of mappings from implementation to design.
- **Hardware Properties**: 9 axioms on hardware properties of OS devices, USB host controllers, peripheral devices, and IDSes.
- **Memory Layout**: 7 axioms on the memory layout of WK code, stack, and globals.
- **ID Mappings**: 1 axiom on the validity of ID mappings of USB TDs.
- **I/O Access Validity**: 1 axiom on the validity of I/O accesses.

This structured and detailed approach ensures clarity and professionalism in the documentation of the I/O separation model and its related components.