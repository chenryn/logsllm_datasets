title:SANE: A Protection Architecture for Enterprise Networks
author:Mart&apos;ın Casado and
Tal Garfinkel and
Aditya Akella and
Michael J. Freedman and
Dan Boneh and
Nick McKeown
SANE: A Protection Architecture for Enterprise Networks
Martin Casado, Tal Garﬁnkel, Aditya Akella, Michael J. Freedman
Dan Boneh, Nick McKeown, Scott Shenker
{casado,talg,mfreed,dabo,nickm}@cs.stanford.edu
PI:EMAIL, PI:EMAIL
Abstract
Connectivity in today’s enterprise networks is regulated
by a combination of complex routing and bridging poli-
cies, along with various interdiction mechanisms such as
ACLs, packet ﬁlters, and other middleboxes that attempt
to retroﬁt access control onto an otherwise permissive
network architecture. This leads to enterprise networks
that are inﬂexible, fragile, and difﬁcult to manage.
To address these limitations, we offer SANE, a pro-
tection architecture for enterprise networks. SANE de-
ﬁnes a single protection layer that governs all connec-
tivity within the enterprise. All routing and access con-
trol decisions are made by a logically-centralized server
that grants access to services by handing out capabilities
(encrypted source routes) according to declarative access
control policies (e.g., “Alice can access http server foo”).
Capabilities are enforced at each switch, which are sim-
ple and only minimally trusted. SANE offers strong at-
tack resistance and containment in the face of compro-
mise, yet is practical for everyday use. Our prototype im-
plementation shows that SANE could be deployed in cur-
rent networks with only a few modiﬁcations, and it can
easily scale to networks of tens of thousands of nodes.
1 Introduction
The Internet architecture was born in a far more innocent
era, when there was little need to consider how to defend
against malicious attacks. Moreover, many of the Inter-
net’s primary design goals, such as universal connectiv-
ity and decentralized control, which were so critical to its
success, are at odds with making it secure.
Worms, malware, and sophisticated attackers mean
that security can no longer be ignored. This is particu-
larly true for enterprise networks, where it is unaccept-
able to lose data, expose private information, or lose sys-
tem availability. And so security measures have been
retroﬁtted to enterprise networks via many mechanisms,
including router ACLs, ﬁrewalls, NATs, and other mid-
dleboxes, along with complex link-layer technologies
such as VLANs.
Despite years of experience and experimentation,
these mechanisms are far from ideal. They require a
signiﬁcant amount of conﬁguration and oversight [43],
are often limited in the range of policies they can en-
force [45], and produce networks that are complex [49]
and brittle [50]. Moreover, even with these techniques,
security within the enterprise remains notoriously poor.
Worms routinely cause signiﬁcant losses in productiv-
ity [9] and potential for data loss [29, 34]. Attacks re-
sulting in theft of intellectual property and other sensitive
information are similarly common [19].
The long and largely unsuccessful struggle to protect
enterprise networks convinced us to start over with a
clean slate, with security as a fundamental design goal.
The result is our Secure Architecture for the Networked
Enterprise (SANE). The central design goals for our ar-
chitecture are as follows:
• Allow natural policies that are simple yet power-
ful. We seek an architecture that supports natural
policies that are independent of the topology and
the equipment used, e.g., “Allow everyone in group
sales to connect to the http server hosting documen-
tation.” This is in contrast to policies today that are
typically expressed in terms of topology-dependent
ACLs in ﬁrewalls. Through high-level policies, our
goal is to provide access control that is restrictive
(i.e., provides least privilege access to resources),
yet ﬂexible, so the network does not become unus-
able.
• Enforcement should be at the link layer, to prevent
lower layers from undermining it. In contrast, it is
common in today’s networks for network-layer ac-
cess controls (e.g., ACLs in ﬁrewalls) to be under-
mined by more permissive connectivity at the link
layer (e.g., Ethernet and VLANs).
USENIX Association
Security ’06: 15th USENIX Security Symposium
137
• Hide information about topology and services from
those without permission to see them. Once an at-
tacker has compromised an end host, the usual next
step is to map out the network’s topology—to iden-
tify ﬁrewalls, critical servers, and the location of
end hosts—and to identify end hosts and services
that can be compromised. Our goal is to hide all
such information to embrace the principle of least
knowledge.
• Have only one trusted component. Today’s net-
works trust multiple components, such as ﬁrewalls,
switches, routers, DNS, and authentication services
(e.g., Kerberos, AD, and Radius). The compromise
of any one component can wreak havoc on the en-
tire enterprise. Our goal is to rely on a central (yet
potentially replicated) trusted entity where all pol-
icy is centrally deﬁned and executed.
SANE achieves these goals by providing a single pro-
tection layer that resides between the Ethernet and IP
layer, similar to the place that VLANs occupy. All con-
nectivity is granted by handing out capabilities. A ca-
pability is an encrypted source route between any two
communicating end points.
Source routes are constructed by a logically-
centralized Domain Controller (DC) with a complete
view of the network topology. By granting access using
a global vantage point, the DC can implement policies
in a topology-independent manner. This is in contrast to
today’s networks: the rules in ﬁrewalls and other mid-
dleboxes have implicit dependencies on topology, which
become more complex as the network and policies grow
(e.g. VLAN tagging and ﬁrewall rules) [14, 47].
By default, hosts can only route to the DC. Users must
ﬁrst authenticate themselves with the DC before they can
request a capability to access services and end hosts. Ac-
cess control policies are speciﬁed in terms of services
and principals, e.g., “users in group martins-friends can
access martin’s streaming-audio server”.
At ﬁrst glance, our approach may seem draconian: All
communication requires the permission of a central ad-
ministrator. In practice, the administrator is free to im-
plement a wide variety of policies that vary from strict
to relaxed and differ among users and services. The key
here is that SANE allows the easy implementation and
enforcement of a simply expressed rule.
Our approach might also seem dependent on a sin-
gle point-of-failure (the DC) and not able to route trafﬁc
around failures (because of static source routes). How-
ever, as we will argue, we can use standard replication
techniques, such as multiple DCs and redundant source
routes, to make the network reliable and quick to recover
from failures.
The remainder of the paper is organized as follows. In
Section 2, we further argue why current security mech-
anisms for the enterprise are insufﬁcient and why the
SANE approach is feasible. Section 3 presents a detailed
design of SANE. We will see that by delegating access
control and routing to a central controller, we can reduce
the complexity of the forwarding elements (switches)
and the degree to which we must trust them. We also
show how a speciﬁc implementation of SANE could be
deployed in current networks with only a few modiﬁ-
cations (even though SANE is a radical departure from
traditional network design). Section 4 covers SANE’s
resistance to a strong attack model.
In Section 5, we
present and evaluate a prototype software implementa-
tion of SANE, and Section 6 demonstrates that SANE
can easily scale to networks of tens of thousands of nodes
and does not signiﬁcantly impact user-perceived latency.
We present related work in Section 7 and conclude in
Section 8.
2 What’s Wrong with Existing Tech-
niques?
Complexity of Mechanism. A typical enterprise net-
work today uses several mechanisms simultaneously to
protect its network: VLANs, ACLs, ﬁrewalls, NATs, and
so on. The security policy is distributed among the boxes
that implement these mechanisms, making it difﬁcult to
correctly implement an enterprise-wide security policy.
Conﬁguration is complex (for example, routing proto-
cols often require thousands of lines of policy conﬁgura-
tion [50]), making the security fragile. Furthermore, the
conﬁguration is often dependent on network topology,
and is based on addresses and physical ports, rather than
on authenticated end-points. When the topology changes
or hosts move, the conﬁguration frequently breaks, re-
quires careful repair [50], and possibly undermines its
security policies.
A common response is to put all security policy in one
box and at a choke-point in the network, for example, in
a ﬁrewall at the network’s entry and exit point. If an at-
tacker makes it through the ﬁrewall, they have unfettered
access to the whole network.
Another way to address this complexity is to enforce
protection on the end host via distributed ﬁrewalls [14].
While reasonable, this has the down-side of placing all
trust in the end hosts. End host ﬁrewalls can be disabled
or bypassed, leaving the network unprotected, and they
offer no containment of malicious infrastructure, e.g., a
compromised NIDS [8].
Our new architecture allows simple high-level policies
to be expressed centrally. Policies are enforced by a sin-
gle ﬁne-grain mechanism within the network.
138
Security ’06: 15th USENIX Security Symposium
USENIX Association
2
Proliferation of Trust. Today’s networks provide a
fertile environment for the skilled attacker. Switches
and routers must correctly export link state, calculate
routes, and perform ﬁltering; yet over time, these mech-
anisms have become more complex, with new vulnera-
bilities discovered at an alarming rate [8, 10, 7, 11]. If
compromised, an attacker can often take down the net-
work [32, 48] or redirect trafﬁc to permit eavesdropping,
trafﬁc analysis, and man-in-the-middle attacks.
Our new architecture replaces all these mechanisms
with simple, minimally-trusted forwarding elements, re-
ducing the number of trusted (and conﬁgured) compo-
nents to just one centrally-managed controller. Our goal
is to minimize the trusted computing base.
Proliferation of Information. A further resource for an
attacker is the proliferation of information on the net-
work layout of today’s enterprises. This knowledge is
valuable for helping to identify sensitive servers, ﬁre-
walls, and IDS systems, which can be exploited for com-
promise or denial of service. Topology information is
easy to gather: switches and routers keep track of the net-
work topology (e.g., the OSPF topology database) and
broadcast it periodically in plain-text. Likewise, host
enumeration (e.g., ping and ARP scans), port scanning,
traceroutes, and SNMP can easily reveal the existence
of, and the route to, hosts. Today it is common for net-
work operators to ﬁlter ICMP and change default SNMP
passphrases to limit the amount of information available
to an intruder.
Our new architecture hides both the network structure,
as well as the location of critical services and hosts, from
all unauthorized network entities. Minimal information
is made available as needed for correct function and for
fault diagnosis.
2.1 Threat Environment
SANE seeks to provide protection robust enough for
demanding threat environments—government and mili-
tary networks, ﬁnancial institutions, or demanding busi-
ness settings—yet ﬂexible enough for everyday use. We
assume a robust threat environment with both insider
(authenticated users or switches) and outsider threats
(e.g., an unauthenticated attacker plugging into a net-
work jack). This attacker may be sophisticated, capable
of compromising infrastructure components and exploit-
ing protocol weaknesses. Consequently, we assume at-
tacks can originate from any network element, such as
end hosts, switches, or ﬁrewalls.
SANE prevents outsiders from originating any trafﬁc
except to the DC, while preventing malicious end hosts
from either sending trafﬁc anywhere that has not been ex-
plicitly authorized, or, if authorized, subjecting the net-
work to a denial-of-service attack which cannot be sub-
sequently disabled.
SANE makes a best effort attempt to maintain avail-
ability in the face of malicious switches; however, we do
not attempt to achieve full network-layer Byzantine fault
tolerance [38]. In a normal SANE network, little can be
done in the face of a malicious DC, however, we discuss
strategies for dealing with this and other threats in §4.
2.2 What’s Special about the Enterprise?
We can exploit several properties of enterprise networks
to make them more secure. First, enterprise networks are
often carefully engineered and centrally administered,
making it practical (and desirable) to implement policies
in a central location.1
Second, most machines in enterprise networks are
clients that typically contact a predictable handful of
local services (e.g., mail servers, printers, ﬁle servers,
source repositories, HTTP proxies, or ssh gateways).
Therefore, we can grant relatively little privilege to
clients using simple declarative access control policies;
in our system we adopt a policy interface similar to that
of a distributed ﬁle system.
Third, in an enterprise network, we can assume that
hosts and principals are authenticated; this is already
common today, given widely deployed directory services
such as LDAP and Active Directories. This allows us to
express policies in terms of meaningful entities, such as
hosts and users, instead of weakly bound end-point iden-
tiﬁers such as IP and MAC addresses.
Finally, enterprise networks—when compared to the
Internet at large—can quickly adopt a new protection ar-
chitecture. “Fork-lift” upgrades of entire networks are
not uncommon, and new networks are regularly built
from scratch. Further, there is a signiﬁcant willingness
to adopt new security technologies due to the high cost
of security failures.
3 System Architecture
SANE ensures that network security policies are en-
forced during all end host communication at the link
layer, as shown in Figure 1. This section describes two
versions of the SANE architecture. First, we present a
clean-slate approach, in which every network component
is modiﬁed to support SANE. Later, we describe a ver-
sion of SANE that can inter-operate with unmodiﬁed end
hosts running standard IP stacks.
3.1 Domain Controller
The Domain Controller (DC) is the central component
of a SANE network. It is responsible for authenticating
USENIX Association
Security ’06: 15th USENIX Security Symposium
139
3
Figure 1: The SANE Service Model: By default, SANE only
allows hosts to communicate with the Domain Controller (DC).
To obtain further connectivity they must take the following
steps: (0) Principals authenticate to the DC and establish a se-
cure channel for future communication. (1) Server B publishes
service under a unique name B.http in the Network Service Di-
rectory. (2) For a client A to get permission to access B.http, it
obtains a capability for the service. (3) Client A can now com-