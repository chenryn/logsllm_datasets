POSTGRES INGRES
Figure5.2
PlantreesforsecondaryindexscansinPOSTGRESandINGRES
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
to sort the result ofasecondaryscan,orit mayjoin theresultwitharelation otherthanthecorresponding
indexed relation. Figure 5.3 illustrates these two situations. Examples where this generality is advanta-
geouswillbediscussedinthenextsubsection.
Another disadvantage of testing our optimizer against INGRES’s is that INGRES is a conventional
database system that does not support user-defined operators and access methods or nested-attribute
queries. Asaresult,wecouldonlyteststandardoperators,accessmethods,andqueries. Fortunately,this
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
.
.
.
.
.
.
Join-dname
sortname
indexscan scan
indexscan
EMPINDEX DEPT
EMPINDEX
(dept)
(dept)
Figure5.3
OtherprocessingstrategiesusingsecondaryindicesinINGRES
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
43
drawbackwasinsignificant. InPOSTGRES,costsarecomputedusingformulasaswellasoperatorselec-
tivities. The latter is supplied by the user. Inother words,it is aparameter that is notinherentwithin the
optimizer and thus cannot be manipulated or tuned (except by the user who supplied the routines). Con-
sequently, provided selectivities relevant to a single operator and storage structure are accurate, one of
eachwassufficient fortesting purposes. It would havebeennice to illustrate the generality ofouroptim-
izer by using non-standard operators in our tests, but even standard operators and access methods in
POSTGRES are implemented as if they were user-defined. Thus, no generality was lost in using a con-
ventionaloperatorandaccessmethodinourtests.
The single operator and access method used were the equality operator, since it is a mergesortable
operator, and an ISAM storage structure [HELD75a]. To build an ISAM storage structure, tuples must
first be sorted into data pages. Then, a multi-level directory is constructed indicating the high key value
storedwithineachpage. Suchastructureprovidesquickaccesswhenusedwiththefollowingoperators:
=,,and‡ .
The directory is analogous to the internal nodes of a B-tree except that once it has been built, the direc-
tory remains static. Therefore, when a data page is filled, rather than splitting nodes to maintain a bal-
anced tree, overflow pages are created and linked to the filled data page. If a large number of overflow
pages are created, finding a tuple within a page requires an inefficient linear search through the primary
pageaswell asits overflowpages. So, given achoice betweenanISAMstoragestructure andaB-tree, a
userwould probably chooseaB-tree. However,wecould not useB-treesin ourtestsbecausetheversion
of INGRES that we used only supported ISAM and hash access methods. Forced to choose between the
two, we chose ISAM because there is a greater overhead associated with searching through an ISAM
directory,makingthemmoreinterestingthanhashtables.
Using an ISAM access method does have its disadvantages, though. Although tuples in an ISAM
structure are initially sorted when the structure is built, the tuples are not maintained in sort order. As a
result, we could not test the POSTGRES optimizer feature that takes advantage of access methods like
44
B-trees to eliminate sort steps required to orderauser-specifiedsort result ortuples foramerge-sortjoin.
However, although merge-sorting on a tuple by tuple basis is not possible, a variation of merge-sort can
be performed on a page by page basis since the range of values within each page is known. INGRES, in
fact, does this. In contrast, the POSTGRES optimizer does not, and as a result, differences arose in our
performance tests. We chose not to account for partial index sorts because few access methods have this
unusual characteristic. Moreover, as already alluded to, users will likely opt for access methods like B-
trees, which always maintain their records in sort order. In other words, this feature would probably not
be employed very often, had we implemented it. This should be kept in mind when differences arise
betweenPOSTGRESandINGRESplansinthenextsubsection.
With respectto nested-attribute queries,not being able to test these either is also ofminimal impor-
tance. As discussed in section 3.5, relations materialized from queries embedded within data fields will
generally besmall, andasaresult, the cost ofexecuting anysubplan correspondingto anested portionof
a querywill also besmall. Therefore,it is less important if the true optimal subplan is not selected while
optimizing thisportionofaquery.
In testing the optimizer, we used version 2.1 of INGRES running on a VAX 11/780. To simulate
the INGRES optimizer as closely as possible, we had to determine values for two system-dependent
parameters that affect cost estimations. One of these is the page size used by the database. This is
requiredbecausein estimating the cost ofasort, the optimizer mustdetermine thenumberofpagesoccu-
pied by the tuples to besorted. By multiplyingthe number oftuples in anINGRESrelation by the width
ofatuple (including spaceforinternal pagepointers)anddividing bythenumberofpagesintherelation,
itturnsoutthatINGRESuses2Kpages.
Determining a value for the second parameter, W, which relates I/O to CPU cost, was less straight-
forward. Assuming that it takes 30 milliseconds and about 2000 instructions of operating system over-
head to read an I/O page, while manipulating a tuple only consumes about 200 CPU instructions, W is in
the range of 0.03 to 0.1 [DEWI84]. For the queries used in our tests, using various values within this
45
range did not affect the plan choice except in a few situations where a merge-sort join was chosen over
nested iteration. This occurred when W was close to 0.03, a value that apparently minimized the cost of
CPU-intensive tasks like sorting. In these situations, the INGRES optimizer always selected a nested
iteration join. Thus, to insure compatibility with INGRES plans, we assigned W the value 0.065, arbi-
trarilychoosingavalueinthemiddleofouroriginalrange.
5.2. TestsPerformed
For testing purposes, we used the following three relations: EMP, DEPT, and WATER. Schemas
and relevant statistics forthese relation areshownin figure5.4. First, weranthe following fourtwo-way
joinqueriesonEMPandDEPT:
A: retrieve(EMP.name,EMP.age,DEPT.all)where
EMP.dept=DEPT.dname
B: retrieve(EMP.name,EMP.age,DEPT.dname,DEPT.budget)where
EMP.dept=DEPT.dnameand
DEPT.floor=1
C: retrieve(EMP.age,EMP.dname,DEPT.floor,DEPT.budget)where
EMP.dept=DEPT.dnameand
EMP.name=‘‘Diamond’’
D: retrieve(EMP.age,DEPT.dname,DEPT.budget)where
EMP.dept=DEPT.dnameand
DEPT.floor=1and
EMP.name=‘‘Diamond’’
To illustrate that the optimizer chooses appropriate strategies under varying conditions, we ran the four
queries for non-indexed relations as well as relations with primary and secondary indices defined on
relevant attributes. Indices were selected so as to illustrate the combined effects of relation sizes, distri-
bution of values, and secondary index overhead in determining a query’s optimal plan. The results of
running queries A-D using various indices are shown in table 5.1. For the fourteen executions shown,
when indices were defined, in all but one case both POSTGRES and INGRES made similar decisions as
to whetherornottheindicesshouldbeused,andexceptincaseswhereINGREStookadvantageofapar-
46
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
RELATIONS:
EMP(name=c10,salary=i4,manager=c10,age=i4,dept=c10)
#pages:600(unindexed)
#tuples:30,000
#distinctvaluesinname:30,000
#distinctvaluesindept=1000
DEPT(dname=c10,floor=i4,budget=i4)
#pages:10(unindexed),14(primaryISAMindexonfloor)
#tuples:1000
#distinctvaluesindname:1000
#distinctvaluesinfloor:9
WATER(cid=i4,floor=i4)
#pages:1(unindexed)
#tuples:50
#distinctvaluesincid:9
#distinctvaluesinfloor:9
SECONDARYINDICES:
EMPINDEX(ISAMondept):
#pages:253
#tuples:30,000
DEPTINDEX(ISAMonfloor):
#pages:8
#tuples:1000
DEPTINDEX(ISAMondept):
#pages:11
#tuples:1000
Figure5.4
Schemasandstatisticsfortestrelations
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
47
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
A: retrieve(EMP.name,EMP.age,DEPT.all)where
EMP.dept=DEPT.dname
B: retrieve(EMP.name,EMP.age,DEPT.dname,DEPT.budget)where
EMP.dept=DEPT.dnameand
DEPT.floor=1
C: retrieve(EMP.age,EMP.dname,DEPT.floor,DEPT.budget)where
EMP.dept=DEPT.dnameand
EMP.name=‘‘Diamond’’
D: retrieve(EMP.age,DEPT.dname,DEPT.budget)where
EMP.dept=DEPT.dnameand
DEPT.floor=1and
EMP.name=‘‘Diamond’’
iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
iic iiiiiiiiiiiiiiiiiiSiitiioiiraiigiieiiiiSiitriiuiiciituiiriieiiiiiiiiiiiiiiiiiiiiiic iiiiQiiuiieiiriiyiiAiiiiiiciiiiQiiuiieiiriiyiiBiiiiiiciiiiQiiuiieiiriiyiiCiiiiiiciiiiQiiuiieiiriiyiiDiiiic
c c c c c c
iiiiiiiiiiiiinioiiinidiiiceisiiiiiiiiiiiiiiiPiliaini(iai)i†iiiiPiliaini(iai)iiiiPiliaini(ici)iiiiPilianii(ici)i
c c c c c c
ic iiisiecioinidiairiyiiinidieixioiniiDiEiPiiTi(iflioioiri)iiiic iiiiiiiiiiciiPiliaini(iai)iiciiiiiiiiiiciiiiiiiiic
ic iiiipiriimiairiyiiinidieixioiniiDiEiiPiTi(iflioioiri)iiiiic iiiiiiiiiiciiPiliaini(ibi)iiciiiiiiiiiiciiPilianii(idi)ic
ic iiisieicioinidiairyiiinidieixiioiniEiiMiPii(idieipit)iiiiic iiPilianii(ici)iiciiiiiiiiiiciiPiliaini(iei)iiciiiiiiiiic
c c c c c c
primaryindexonDEPT(floor)& Plan(b) Plan(g)
c c c c c c
iiisieicoinidiairiyiiinidieixioiniiDiEiiPiTi(idiniaimiie)iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
c c c c c c
ic iiisieicioinidiairyiiinidieixiioiniEiiMiPii(idieipit)iiiiic iiPiliaini(if)iiiciiiiiiiiiiciiPiliaini(ici)iiciiiiiiiiic
c secondaryindexonDEPT(dname)& c Plan(f) c c c c
icc iiisieicioinidiairyiiinidieixiioiniEiiMiPii(idieipit)iiiiicc iiiiiiiiiicciiiiiiiiiicciiiiiiiiiicciiiiiiiiicc
†Seefigure5.5
Table5.1
ResultsofexecutingqueriesA-Dusingvariousstoragestructures
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
48
MS-dname Join-dname MS-dname Join-dname
sort sort sort sort sort sort sort sort
dname dept dname dept dname dept dname dept
scan scan scan scan indexscan scan indexscan scan
DEPT EMP DEPT EMP DEPT EMP DEPT EMP
(floor) (floor)
(a) (b)
NL Join-dname NL Join-dname
sort sort
scan scan scan dept scan indexscan indexscan dept
EMP DEPT DEPT EMP DEPT DEPT
(floor) (floor)
scan scan
EMP EMP
(c) (d)
NL Join-tid
scan
Join-dept
scan indexscan DEPT NL Join-tid
EMP DEPT
sort indexscan
scan
using sort
dept DEPTINDEX
scan indexscan EMP
DEPTINDEX tidp
(dname)
DEPT EMP
(dname) scan
using
EMP
Join-dname
EMPINDEX
(e)
(dept)
sort
indexscan
NL Join-dname dname
EMPINDEX
(dept)
sort
scan
scan indexscan indexscan dept
DEPT
EMP DEPT DEPT
using (floor)
scan
DEPTINDEX
EMP
(dname)
(f)
(g)
MS=merge-sort
NL=nestloop
Figure5.5
ComparisonofselectedPOSTGRESandINGRESplans
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
tialISAMsort,bothselectedequivalentjoinstrategies.
49
Figure 5.5 gives apictorial representation ofthe sevendifferentcorrespondingplantreesmentioned
in table 5.1. For each pair, the POSTGRES tree is shown on the left while the INGRES tree is on the
right. Bothpairsofplans(a)and(b)correspondtomerge-sortjoins,andbothplan(b)’sscanDEPTusing
a primary index defined on ‘‘floor.’’ In plans (c) and (d), POSTGRES uses nested iteration, scanning
EMPfirstbecausethehighlyrestrictiveclause,
EMP.name=‘‘Diamond,’’