### 计算机语言的通天塔

目前已知的编程语言有数百种，而且新的语言还在不断涌现。其中许多语言被设计用于特定的应用领域，有些甚至从未超出项目小组的使用范围。类似地，大型技术公司在其发展过程中也推出了新的编程语言。例如，C语言——一种通用编程语言的先驱——起源于20世纪70年代初的AT&T贝尔实验室；而Java，现在主要用于Android应用程序开发，则诞生于上世纪90年代的Sun Microsystems。

如今，不同之处在于，公司通过拥抱新语言来实现特定商业目标的同时，还建立了一个忠实的开发者群体，这些开发者紧密绑定在公司的平台上。这种双重策略最早可以追溯到Sun对Java的推广，当时该公司试图通过Java挑战微软在PC桌面领域的主导地位（尽管最终未能如愿，但Java还是在企业中间件系统中找到了自己的位置，直到Google将其应用于Android平台）。

从这个角度来看，苹果推出Swift的目的就非常明确：它旨在简化iOS应用开发过程，并取代Objective-C。虽然这确实为开发者提供了一种更简便的解决方案，但也要求他们学习一门仅限于苹果生态系统内的新语言。

### 大公司为何重复造轮子

“不要重复造轮子”是大多数程序员遵循的原则，但大公司似乎并不完全认同这一点。那么，为什么它们不简单地修改现有的语言以适应新需求呢？

答案很简单：因为这些公司有能力这么做。创建一种新语言可能技术上具有挑战性，但并不需要太多资源。真正的难点在于为其提供支持，包括软件基础设施（如共享代码库、API、编译器等）以及赢得开发者的青睐，而这正是大公司的强项。

另一个原因是，现有语言往往难以融入现代复杂的代码框架。以Facebook为例，该公司发明了Hack，这是一种基于PHP的超集语言，旨在提高Web开发中的代码稳定性。Hack通过在程序运行前强制进行类型检查来确保数据的一致性，从而避免潜在错误。据Facebook Hack团队的核心成员Julien Verlaguet透露，尽管尝试过用其他现有语言改进效率，但由于与PHP的兼容性问题，最终决定自行开发Hack。

### 谁说了算？

公司和开发者之间存在一种微妙的关系。虽然公司可以根据自身需要创造语言，但如果开发者不愿意使用，这些努力将付诸东流。此外，对于开发者而言，掌握多种语言并非难事，特别是当这些语言之间存在相似之处时（比如，如果你已经熟悉Java，那么学习Ruby或Perl就会相对容易）。然而，对于某些人来说，被迫学习新语言可能会增加负担并分散注意力，尤其是在跨平台项目中。

自由设计师Jack Watson-Hamblin认为，像苹果这样频繁推出新语言的做法会割裂开发者社区，并减慢整体开发进度。“如果我正在开发一个简单的跨平台应用程序，我不希望被迫学习四种不同的语言。”他说道。相反，开源社区因其灵活性和适应性而更具优势。

当然，也有充分的理由支持大公司推出新语言，如苹果的Swift或Facebook的Hack。Verlaguet总结道：“虽然不断追赶新技术令人沮丧，但这也意味着我们拥有了更多解决问题的工具。试想一下，如果全世界的程序员都只使用同一种语言，那将多么乏味。”