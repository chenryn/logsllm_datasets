---
## Page 77
### 58 Linux程序设计
#### 2.5 Shell程序设计示例

到目前为止，我们已经学习了Shell作为程序设计语言的主要功能。现在，我们将把这些知识整合起来，编写一个具有实际用途的示例程序。

我们将利用本书中学到的知识逐步开发一个管理CD唱片的数据库软件。首先从Shell脚本开始，以后再用C语言重写，并逐步添加数据库等新功能。接下来，让我们动手吧。

##### 2.5.1 工作需求

我们将设计并编写一个管理CD唱片的程序。假设我们收集了大量的CD唱片。因为我们正在学习UNIX程序设计，所以实现一个电子化的唱片目录是一个很好的实践项目。

在初始阶段，至少应该能够保存每张CD唱片的基本信息，如唱片名称、音乐类型、歌手或作曲家的名字等。我们还想增加一些简单的曲目信息。

我们希望能够以每张唱片为单位进行检索，暂时不考虑曲目的详细信息。

为了让这个应用程序更加完整，我们还希望能够在应用程序中对唱片信息进行输入、修改和删除。

##### 2.5.2 设计

由于我们需要对数据进行修改、检索和显示这三项操作，采用一个简单的菜单是合适的做法。我们的数据都是文本形式的，因此如果收集的CD唱片数量不多，使用几个简单的文本文件就足够了。将数据保存在文本文件中可以使应用程序更简单，如果需要更改操作要求，文本文件也比其他类型的文件更容易处理。至少我们可以使用编辑器手动输入或删除数据，而不需要编写专门的程序。

在数据存储方面，我们需要做出一个重要决策：是否使用一个文件？如果使用一个文件，它应该采用什么格式？除了曲目信息，大多数信息在每张CD唱片上只出现一次（暂不考虑某些CD唱片上有多个作曲家或歌手的情况），而几乎所有CD唱片都有多个曲目。

是否需要限制每张CD唱片的曲目数量？这似乎是一个不合理且不必要的限制，所以我们决定不限制曲目数量。

如果我们不对曲目的数量设置上限，有以下几种选择：
- 使用一个文件，其中一行保存“标题”信息，随后的n行保存该CD唱片的曲目信息。
- 每张CD唱片的所有信息都保存在一行上，直到信息全部保存完毕。
- 将标题信息和曲目信息分开，分别保存在不同的文件中。

只有第三个选项能够灵活地修改文件格式，如果将来想将数据库转换为关系数据库形式（请参阅第7章内容），肯定需要修改文件格式，因此我们选择第三个选项。

下一个决策是确定要在文件中包含哪些信息。

我们决定，对于每张CD唱片，保存以下信息：
- CD唱片的目录编号。
- 标题。
- 音乐风格（古典、摇滚、流行、爵士等）。
- 作曲家或歌手。

对于每个曲目，保存以下信息：
- 曲目编号。
- 歌名或曲名。

为了将这两个文件“关联”起来，我们需要将曲目信息与CD唱片的其他信息联系起来。我们选择使用CD唱片的目录编号，因为它对每张CD唱片来说是唯一的，在“标题”文件中只出现一次，在“曲目”文件中也只出现一次。

以下是“标题”文件的示例（见表2-14）：

| 目录编号 | 标题      | 音乐风格   | 作曲家/歌手 |
|----------|-----------|------------|-------------|
| CD123    | Cool sax  | 爵士       | Bix         |
| CD234    | Classic violin | 古典     | Bach        |
| CD345    | Hit99     | 流行       | Various     |

以下是相应的“曲目”文件示例（见表2-15）：

| 目录编号 | 曲目编号 | 歌名/曲名      |
|----------|----------|----------------|
| CD123    | 1        | Soene jazz     |
| CD123    | 2        | More jazz      |
| CD345    | 1        | Dizzy          |
| CD234    | 1        | Sotata in D minor |

文件通常对应多行数据。

最后一个决策是如何分隔这些数据项。在关系数据库中，固定长度的数据域比较常见，但有时并不方便。另一种常见的方法是使用逗号，我们在本例中选择这种方法（即CSV文件）。

在后面的“动手试试”部分，为了便于理解，我们将列出将会用到的函数。

```sh
get_return()
get_confirm()
set_menu_choice()
insert_title()
add_record_tracks()
insert_track()
```

---
## Page 79
### 60 Linux程序设计
#### 动手试试：CD唱片管理程序

1. 这个脚本程序的第一行是确保其可以作为脚本执行的语句 `#!/bin/sh`，随后是一些版权信息。如下所示：

```sh
#!/bin/sh
# Very simple example shell script for managing a CD collection.
# Copyright (C) 1996-99 Wrox Press.
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation: either version 2 of the License, or (at your
# option) any later version.
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.
```

2. 初始化变量，包括“标题”文件、“曲目”文件和临时文件。然后设置“Ctrl-C”键陷阱，以便在用户中断脚本运行时删除临时文件。

```sh
Menu_choice=""
Current_cd=""
Tracks_file="tracks.cdb"
Title_file="title.cdb"
Temp_file="/tmp/cdb.$$"
```

3. 开始定义函数。因为脚本将从文件的第一行开始执行，这样做可以让它在调用任何函数之前知道每个函数的定义情况。

为了避免在多个地方重复编写相同的代码，最初的两个函数是简单的工具性函数。

```sh
get_return() {
    echo -e 'Press return \c'
    read x
}

get_confirm() {
    while true
    do
        read x
        case "$x" in
            [Yy]|[Yy][Ee][Ss])
                return 0;;
            [Nn]|[Nn][Oo])
                echo "Cancelled"
                echo
                return 1;;
            *)
                echo "Please answer yes or no."
                ;;
        esac
    done
}
```

4. 下面是主菜单函数 `set_menu_choice`。菜单内容是动态变化的，如果用户已经选中某张CD唱片，主菜单会多出几个选项。

请注意，“echo -e”命令可能不能移植到某些shell中。

```sh
set_menu_choice() {
    echo "Options :-"
    clear
    echo
    echo "a) Add new CD"
    if [ -n "$current_cd" ]; then
        echo "c) Count the CDs and tracks in the catalog"
        echo "l) List tracks on $current_cd"
        echo "r) Remove $current_cd"
        echo "u) Update track information for $current_cd"
    fi
    echo "q) Quit"
    echo
    echo -e "Please enter choice then press return \c"
    read menu_choice
}
```

5. 两个简短的函数 `insert_title` 和 `insert_track` 用于向数据库文件中添加数据。虽然有些人不喜欢这种单行函数，但在其他函数中使用它们时会因为意义明确而便于理解。

这两个小函数之后是较大的 `add_record_tracks` 函数，后者会用到它们。该函数使用模板匹配确保没有输入逗号（因为我们把逗号用作数据域之间的分隔符），并在用户输入曲目时递增当前曲目的编号。

```sh
insert_title() {
    echo "$*" >> "$title_file"
    return
}

insert_track() {
    echo "$*" >> "$tracks_file"
    return
}

add_record_tracks() {
    echo "Enter track information for this CD"
    echo "When no more tracks, enter q"
    cdtrack=1
    while :
    do
        echo -e "Track $cdtrack, track title? \c"
        read tmp
        cdttitle="${tmp#,}"
        if [ "$tmp" != "$cdttitle" ]; then
            echo "Sorry, no commas allowed"
            continue
        fi
        if [ -n "$cdttitle" ]; then
            if [ "$cdttitle" != "q" ]; then
                insert_track "$cdcatnum,$cdtrack,$cdttitle"
                cdtrack=$((cdtrack + 1))
            else
                break
            fi
        fi
    done
}
```

6. `add_records` 函数用于输入新的CD唱片的标题信息。

```sh
add_records() {
    # 提示输入基本信息
    echo -e "Enter catalog name \c"
    read tmp
    cdcatnum="${tmp#,}"
    echo -e "Enter title \c"
    read tmp
    cdtitle="${tmp#,}"
    echo -e "Enter type \c"
    read tmp
    cdtype="${tmp#,}"
    echo -e "Enter artist/composer \c"
    read tmp
    cdac="${tmp#,}"

    # 确认是否要输入信息
    echo "About to add new entry"
    echo "$cdcatnum $cdtitle $cdtype $cdac"
    if get_confirm; then
        insert_title "$cdcatnum,$cdtitle,$cdtype,$cdac"
        add_record_tracks
    else
        remove_records
    fi
    return
}
```

加入Java编程群：524621833
---

通过以上优化，文本变得更加清晰、连贯和专业。希望这对你的工作有所帮助！