    If the impact of the information you found isn’t particularly critical, you can explore ways to escalate the vulnerability by chaining it with other security issues. For example, if you can leak internal IP addresses within the target’s network, you can use them to pivot into the network during an SSRF exploit. Alternatively, if you can pinpoint the exact software version numbers the application is running, see if any CVEs are related to the software version that can help you achieve RCE.
    如果你发现的信息的影响并不特别严重，你可以探索通过将其与其他安全问题链接起来来升级漏洞的方法。例如，如果你可以泄漏目标网络内部的IP地址，你可以在SSRF漏洞利用期间使用它们来进入网络。或者，如果你可以确定应用程序正在运行的确切软件版本号，请查看是否有与软件版本相关的CVE，这些CVE可以帮助你实现RCE。
    Finding Your First Information Disclosure!
    Now that you understand the common types of information leaks and how to find them, follow the steps discussed in this chapter to find your first information disclosure:
    既然你了解了信息泄漏的常见类型和如何找到它们，请按照本章中讨论的步骤查找您的第一个信息披露：
     Look for software version numbers and configuration information by using the recon techniques presented in
      Chapter 5
     .
     Start searching for exposed configuration files, database files, and other sensitive files uploaded to the production server that aren’t protected properly. Techniques you can use include path traversal, scraping the Wayback Machine or paste dump sites, and looking for files in exposed
      .git
     directories.
     Find information in the application’s public files, such as its HTML and JavaScript source code, by
      grep
     ping the file with keywords.
     Consider the impact of the information you find before reporting it, and explore ways to escalate its impact.
     Draft your first information disclosure report and send it over to the bug bounty program!
Part IV
      Expert Techniques
22
      Conducting Code Reviews
    You’ll sometimes come across the source code of an application you’re attacking. For example, you might be able to extract JavaScript code from a web application, find scripts stored on servers during the recon process, or obtain Java source code from an Android application. If so, you are in luck! Reviewing code is one of the best ways to find vulnerabilities in applications.
    攻击应用程序时，有时您会遇到源代码。例如，您可能能够从Web应用程序中提取JavaScript代码，在侦察过程中找到存储在服务器上的脚本，或从Android应用程序中获取Java源代码。如果是这样，你就很幸运了！审查代码是发现应用程序漏洞的最佳方法之一。
    Instead of testing applications by trying different payloads and attacks, you can locate insecure programming directly by looking for bugs in an application’s source code. Source code review not only is a faster way of finding vulnerabilities, but also helps you learn how to program safely in the future, because you’ll observe the mistakes of others.
    不必通过尝试不同的有效载荷和攻击来测试应用程序，你可以直接查找应用程序源代码中的漏洞来定位不安全的编程。源代码审查不仅可以更快地发现漏洞，还可以帮助你学习如何在未来安全编程，因为你会观察到别人犯的错误。
    By learning how vulnerabilities manifest themselves in source code, you can develop an intuition about how and why vulnerabilities happen. Learning to conduct source code reviews will eventually help you become a better hacker.
    通过学习漏洞如何在源代码中显现，你可以培养出对漏洞出现原因与方式的直觉。学习进行源代码审阅也会帮助你变得更好的黑客。
    This chapter introduces strategies that will help you get started reviewing code. We’ll cover what you should look for and walk through example exercises to get your feet wet.
    本章介绍了一些策略，可以帮助你开始审查代码。我们将讨论你应该寻找什么，并通过实例练习来帮助你上手。
    Remember that, most of the time, you don’t have to be a master programmer to conduct a code review in a particular language. As long as you understand one programming language, you can apply your intuition to review a wide variety of software written in different languages. But understanding the target’s particular language and architecture will allow you to spot more nuanced bugs.
    记住，大多数情况下，你不必成为某种语言的大师程序员才能进行代码审查。只要你理解一种编程语言，就可以运用自己的直觉来审查用不同语言编写的各种软件。但是，了解目标语言和架构将使您能够发现更为微妙的缺陷。
       Note
      If you are interested in learning more about code reviews beyond the strategies mentioned in this chapter, the OWASP Code Review Guide (
       https://owasp.org/www-project-code-review-guide/
      ) is a comprehensive resource to reference.
      如果你对本章节提到的代码审查策略以外的内容感兴趣，OWASP代码审查指南(https://owasp.org/www-project-code-review-guide/)是一个详尽的参考资源。
    White-Box vs. Black-Box Testing
    You might have heard people in the cybersecurity industry mention black-box and white-box testing.
     Black-box testing
    is testing the software from the outside in. Like a real-life attacker, these testers have little understanding of the application’s internal logic. In contrast, in
     gray-box testing
    , the tester has limited knowledge of the application’s internals. In a
     white-box review
    , the tester gets full access to the software’s source code and documentation.
    你可能听过电脑安全行业的人提到黑盒和白盒测试。黑盒测试是从外部测试软件。像真正的攻击者一样，这些测试人员几乎不了解应用程序的内部逻辑。相比之下，灰盒测试，测试人员了解应用程序的部分内部逻辑。在白盒测试中，测试人员可以完全访问软件的源代码和文档。
    Usually, bug bounty hunting is a black-box process, since you don’t have access to an application’s source code. But if you can identify the open source components of the application or find its source code, you can convert your hunting to a more advantageous gray-box or white-box test.
    通常，漏洞赏金狩猎是一个黑盒过程，因为你无法访问应用程序的源代码。但如果你能识别应用程序的开源组件或找到其源代码，你就可以将你的狩猎转化为更具优势的灰盒或白盒测试。
    The Fast Approach: grep Is Your Best Friend
    There are several ways to go about hunting for vulnerabilities in source code, depending on how thorough you want to be. We’ll begin with what I call the “I’ll take what I can get” strategy. It works great if you want to maximize the number of bugs found in a short time. These techniques are speedy and often lead to the discovery of some of the most severe vulnerabilities, but they tend to leave out the more subtle bugs.
    有几种方法可以猎取源代码中的漏洞，根据你想要多么彻底。我们将从我所谓的“我会拿到什么就用什么”策略开始。如果您想在短时间内最大化发现错误数量，则该策略非常有效。这些技术速度很快，通常会导致发现一些最严重的漏洞，但它们往往会忽略更微妙的漏洞。
    Dangerous Patterns
    Using the
     grep
    command, look for specific functions, strings, keywords, and coding patterns that are known to be dangerous. For example, the use of the
     eval()
    function in PHP can indicate a possible code injection vulnerability.
    使用grep命令，查找已知为危险的特定函数、字符串、关键字和编码模式。例如，PHP中使用eval()函数可能会暴露代码注入漏洞。
    To see how, imagine you search for
     eval()
    and pull up the following code snippet:
    想要了解，可以想象一下您搜索eval（）并拉出以下代码片段：
hook)) eval($this->hook);
    }
  }
  [...]
2 $user_data = unserialize($_COOKIE['data']);
  [...]
?>
    In this example,
     $_COOKIE['data']
     2
    retrieves a user cookie named
     data
    . The
     eval()
    function
     1
    executes the PHP code represented by the string passed in. Put together, this piece of code takes a user cookie named
     data
    and unserializes it. The application also defines a class named
     UserFunction
    , which runs
     eval()
    on the string stored in the instance’s
     $hook
    property when unserialized.
    在这个例子中，$_COOKIE ['data']会检索名为data的用户Cookie。eval ()函数会执行传入的字符串所代表的PHP代码。将它们放在一起，这段代码会获取名为data的用户Cookie并对其进行反序列化。此应用程序还定义了一个名为UserFunction的类，当反序列化时会对实例的$hook属性中存储的字符串运行eval()。
    This code contains an insecure deserialization vulnerability, leading to an RCE. That’s because the application takes user input from a user’s cookie and plugs it directly into an
     unserialize()
    function. As a result, users can make
     unserialize()
    initiate any class the application has access to by constructing a serialized object and passing it into the
     data
    cookie.
    该代码包含一个不安全的反序列化漏洞，导致远程代码执行。这是因为应用程序从用户的cookie中获取用户输入，并直接插入到一个反序列化（unserialize）函数中。因此，用户可以使用构造的序列化对象将unserialize()引发应用程序可以访问的任何类。
    You can achieve RCE by using this deserialization flaw because it passes a user-provided object into
     unserialize()
    , and the
     UserFunction
    class runs
     eval()
    on user-provided input, which means users can make the application execute arbitrary user code. To exploit this RCE, you simply have to set your
     data
    cookie to a serialized
     UserFunction
    object with the
     hook
    property set to whatever PHP code you want. You can generate the serialized object by using the following bit of code:
    使用此反序列化漏洞您可以实现RCE，因为它会将用户提供的对象传递到unserialize()函数中，而UserFunction类在用户提供的输入上运行eval()函数，这意味着用户可以让应用程序执行任意用户代码。要利用这个RCE，您只需将数据cookie设置为序列化的UserFunction对象，并将钩子属性设置为您想要的任何PHP代码。您可以使用以下代码生成序列化的对象:
    Passing the resulting string into the
     data
    cookie will cause the code
     phpinfo();
    to be executed. This example is taken from OWASP’s PHP object injection guide at
     https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection
    . You can learn more about insecure deserialization vulnerabilities in
     Chapter 14
    .
    将生成的字符串传递到数据cookie中将导致执行phpinfo（）代码。该示例取自OWASP的PHP对象注入指南，网址为https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection。您可以在第14章中了解有关不安全反序列化漏洞的更多信息。
    When you are just starting out reviewing a piece of source code, focus on the search for dangerous functions used on user-controlled
    data.
     Table 22-1
    lists a few examples of dangerous functions to look out for. The presence of these functions does not guarantee a vulnerability, but can alert you to possible vulnerabilities.
    当您刚开始审查源代码时，重点关注对用户控制的数据使用的危险函数的搜索。表22-1列出了一些要注意的危险函数的示例。这些函数的存在并不保证漏洞的存在，但可以提醒您可能存在漏洞。
       Table 22-1
      : Potentially Vulnerable Functions
      表22-1：可能有漏洞的功能
         Language
         Function
         Possible vulnerability
        PHP
         eval()
        ,
         assert()
        ,
         system()
        ,
         exec()
        ,
         shell_exec()
        ,
         passthru()
        ,
         popen()
        , backticks
         (`
         CODE
         `)
        ,
         include()
        ,
         require()
        RCE if used on unsanitized user input.
         eval()
        and
         assert()
        execute PHP code in its input, while
         system()
        ,
         exec()
        ,
         shell_exec()
        ,
         passthru()
        ,
         popen()
        , and backticks execute system commands.
         include()
        and
         require()
        can be used to execute PHP code by feeding the function a URL to a remote PHP script.
        PHP
         unserialize()
        Insecure deserialization if used on unsanitized user input.
        Python
         eval()
        ,
         exec()