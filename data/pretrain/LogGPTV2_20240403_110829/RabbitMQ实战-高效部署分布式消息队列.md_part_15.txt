## Page 102
80
第4章解决Rabbit相关问题：编码与模式
■critical_notify是回调函数。你订阅了critical队列，当消息接
收到以后，就会调用该方法。当Pika库在该订阅上收到消息后会调用
critical_notify函数，传人消息的信道、消息头、消息体和消息方法。
■queue="critical”明确指定了你想要从哪个队列获取消息。
·no_ack=False告诉RabbitMQ你想要显示确认收到的消息。这会让Rabbit
暂停从队列发送新的消息过来，直到你收到的最后一条消息处理完成并发送
确认消息为止。
■consumer_tag是一个标识符，它会在你用channel=conn_broker.channel（)
创建的AMQP信道上唯一标志此订阅。当你想要取消订阅时，你需要将该
消费者标记传给RabbitMQ。
一旦你建立了消费者订阅，则只需调用channel.start_consuming（）函数来
启动消费者监听消息。你可能注意到了你为订阅指定的回调函数（critical_notify
和rate_limit_notify）尚未定义。让我们继续，在下列清单中明确其中一个回
调函数。
def critical_notify(channel,method,header,body):
"""Sends CRITICAL alerts to administrators via e-mail."""
从JSON
EMAIL_RECIPS = ["PI:EMAIL",]
格式解码
将email传
肖息
message = json.loads(body)
输到SMTP
服务器
Send_mail(EMAIL_RECIPS,"CRITICAL ALERT", meSSage)
print ("Sent alert via e-mail!Alert Text:%s“+\
"Recipients:&s"）(str(message),str(EMAIL_RECIPS))
确认消息
channel.basic_ack(delivery_tag=method.delivery_tag)
当消费者回调函数被调用时，Pika会传人消息相关的四个参数：
■channel一和Rabbit通信的信道对象。如果同时有多个信道打开的话，这
里会是其中关联到接收到消息的订阅的信道。
■method一—一个方法帧对象。携带了关联订阅的消费者标记以及投递标记。
■header一表示AMQP消息头的对象。它们会携带可选的消息元数据。
■body一实际消息内容。
在critical_notify中，首先要做的事情是检查content_type头。由于告
---
## Page 103
4.2发后即忘模型
81
警信息是JSON编码的，因此你要检查内容类型以确保是“application/json”。
虽然content_type是可选的，但是当你想要在生产者和消费者的通信中编码信
息的话，它还是很重要的。在验证了content type后，你就可以把消息体从 JSON 解
码为文本，然后构造一封包含告警内容的邮件给OpsTeam（ops.team@ourcompany
com）。一旦邮件告警成功发送后，你会发送一个确认消息给RabbitMQ，说明你已
经接收到了消息。确认消息非常重要，因为RabbitMQ会直到你确认最后一条收到
的消息后，才会发送新的消息给你。通过将消息确认放置在最后一步，你就能确保
如果消费者崩溃了的话，RabbitMQ也会将该消息分发给另一个消费者。
通过对消费者所有部分的解释，让我们看看将所有这些放在一块儿的完整代码，
具体如下所示。
清单4.5完整的告警消费者代码—alert_consumer.py
import json, smtplib
importpika
def send_mail(recipients, subject，message):
"""E-mail generator for received alerts."""
headers=（"From:&s\r\nTo:\r\nDate:\r\n"+\
"Subject:8s\r\n\r\n")%("PI:EMAIL"
subject)
Smtp_server = smtplib.SMTP()
smtp_server.connect("mail.ourcompany.com",25)
smtp_server.sendmail("PI:EMAIL",
recipients,
headers + str(message))
smtp_server.close()
通知处
def critical_notify(channel,method,header,body):
<理程序
"""Sends CRITICAL alerts to administrators via e-mail."" 
将消息从
JSON解
EMAIL_RECIPS = ["PI:EMAIL",]
将邮件
码
message = json.loads (body)
传输到
SMTP
Send_mail(EMAIL_RECIPS,"CRITICAL ALERT",meSSage)
<服务器
print（"Sent alert via e-mail! Alert Text:%s"+\
"Recipients: %s") % (str(message), str(EMAIL_RECIPS))
确认
消息
channel.basic_ack(delivery_tag=method.delivery_tag)
def rate_limit_notify(channel,method,header,body):
"""Sends the message to the administrators via e-mail."""
EMAIL_RECIPS = ["PI:EMAIL",]
将消息从
JSON解码
message = json.loads (body)
---
## Page 104
82
第4章解决Rabbit相关问题：编码与模式
#(f-asc_1o) Transmit e-mail to SMTP server
Send_mail(EMAIL_RECIPS, "RATE LIMIT ALERT!"， meSSage)
print（"Sent alertvia e-mail! Alert Text:%s"+\
"Recipients:%s"）%(str(message)，str(EMAIL_RECIPS))
channel.basic_ack(delivery_tag=method.delivery_tag)
代理服务
确认
器设置
uew==aueu<
消息
AMQP_SERVER = "localhost"
AMQP_USER ="alert_user"
AMQP_PASS="alertme"
AMQP_VHOST = "/"
建立到代
AMQP_EXCHANGE ="alerts"
理的连接
服务器
LD
creds_broker=pika.PlainCredentials(AMQP_USER,AMQP_PASS)
conn_params = pika.ConnectionParameters(AMQP_SERVER,
virtual_host = AMQP_VHOST,
credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()
声明交
channel.exchange_declare(exchange=AMQP_EXCHANGE,
<换器
type="topic",
构造队列，并
auto_delete=False)
绑定到topic交
换器
channel.queue_declare(queue="critical",auto_delete=False)
channel.queue_bind(queue="critical"
exchange="alerts",
routing_key="critical.*")
channel.queue_declare(queue="rate_limit",auto_delete=False)
channel.queue_bind(queue="rate_limit",
exchange="alerts",
routing_key="*.rate_limit")
设置告警
channel.basic_consume( critical_notify,
处理程序
queue="critical",
no_ack=False,
consumer_tag="critical")
channel.basic_consume( rate_limit_notify,
queue="rate_limit",
no_ack=False,
consumer_tag="rate_limit")
print"Ready for alerts!"
channel.start_consuming()
你现在拥有了一个优雅的消费者实现。它会简单地通过操作消息标记，针对不
同的组将告警AMQP消息转换成email告警。添加额外的告警类型和传输方法也很
简单。所有你要做的就是创建消费者回调函数以提供新的告警处理方法，并将其连
接到新告警类型的绑定规则队列。如果没有消息给消费者处理的话，消费者就没什
么用了。因此，让我们看看消费者是如何处理告警的。
---
## Page 105
4.2发后即忘模型
83
在开始本节的时候，我们的目标是为现有的程序简化产生告警的过程。如果你
看一下下列清单的话，就会发现：虽然消费者花费了90行代码来处理告警，但是
告警的产生只用了20行代码。
清单4.6告警生成示例-alert_producer.py
import json, pika
from optparse import OptionParser
读取命令
行参数
opt_parser = OptionParser()
opt_parser.add_option("-r",
"--routing-key",
dest="routing_key",
help="Routing key for message"+\
"(e.g. myalert.im)")
opt_parser.add_option("-m",
"--message",
dest="message",
建立到
args = opt_parser.parse_args() [0]
服务器
creds_broker = pika.PlainCredentials("alert_user","alertme")
的连接
conn_params =pika.ConnectionParameters("localhost",
virtual_host="/",
credentials = creds_broker)
conn_broker=pika.BlockingConnection(conn_params)
将告警
channel =conn_broker.channel()
消息发
<送给服
msg = json.dumps(args.message)
务器
msg_props = pika.BasicProperties()
msg_props.content_type = "application/json"
msg_props.durable = False
channel.basic_publish(body=msg,
exchange="alerts",
properties=msg_props,
routing_key=args.routing_key)
print（"Sentmessage%s taggedwithrouting key'%s'to"+
"exchange'/'."）%（json.dumps(args.message),
args.routing_key)
可以从命令行运行该样例生产者，使用任何你想要的内容和路由标记来生成
告警信息。该程序中的第一部分简单地从命令行获取了消息和路由键。你连接上了
RabbitMQ服务器，和在告警消费者中使用的方式一样。当发布消息的时候，事情
才变得有趣起来：
msg = json.dumps(args.message)
---
## Page 106
84
第4章解决Rabbit相关问题：编码与模式
msg_props = pika.BasicProperties()
msg_props.content_type = "application/json"
msg_props.durable = False
channel.basic_publish(body=msg,
exchange="alerts",
properties=msg_props,
routing_key=args.routing_key)
总共五行代码就创建了告警信息并标记了合适的路由键（即critical，
mywebapp）。在你将告警消息的内容用JSON解码之后，就创建了一个名为msg_
props的BasicProperties对象。该对象可以用来设置AMQP 消息的可选内容
类型头；同时，如果需要的话可以设置消息的持久化属性。最后，只需一行代码你
就能将消息发往告警（alerts）交换器，并通过路由键来归类告警的类型。由于消
息的路由键无法匹配任何绑定规则就会被去弃，因此你可以为那些尚不支持的告警
类型用路由键来进行标记。一旦你支持了这些告警类型之后，任何拥有这些路由键
的告警信息将会路由到正确的消费者上。关于消费者最后有一点值得注意的是你传
给 channel.basic_publish的block_on_flow_control 标记。这告诉 Pika,
如果RabbitMQ流程控制机制需要停止发布的话，它需要暂缓从basic_publish
返回。当RabbitMQ告知Pika可以继续的时候，它最终会返回，并允许继续发布。
这使得生产者和RabbitMQ合作得很顺利，因此如果Rabbit变得不堪重负时，它会
的话，需要确保block_on_flow_control设置成了false。
在短短100行代码中，你的Web应用以灵活和可扩展的方式发送告警，并在之
后异步地传输给接收者。当你需要传输信息并快速处理但又无须知道处理结果的时
候，你也体会到了发后即忘的消息通信模式是多么的有益。举例来说，你可以轻而
易举地扩展告警消费者，添加一个额外的处理器，使用*.*的模式将所有告警记录
到数据库中。不过发后即忘的消息通信模式不仅仅只是告警和日志记录这些用途而
已。让我们看一个需要在消息内容上执行CPU密集型处理的例子，以及RabbitMQ
如何帮助你转到异步操作上去的。
4.2.2并行处理
假设你开始运行自己的社交网络，并刚刚开发了一个闪亮的新功能：图片上传。
---
## Page 107
4.2发后即忘模型
85
了增进用户之间的互动，当用户联系人中的某位上传了新的照片的时候，你想要通
知他们的朋友。新功能发布后的一周，市场部的同事走到你的办公桌前要求你给用
户一些积分，作为上传照片的奖励，以鼓励他们继续上传照片并在网站上保持活跃。
你同意添加几行代码，并将一个奖励系统和上传照片处理程序挂钩。虽然看起来有
点令人讨厌，但是它能如期工作使得老板对结果非常满意。
下个月带宽账单到了，那个运营部同事非常生气，因为带宽使用翻了整整一倍。