Proof sketch:
Because R(t1, ta) > Ratk, intuitively the
tincb of ﬂow with average rate of R(t1, ta) must be shorter
than the t′
incb.
Assume a ﬂow f ′ with rate Ratk will violate T Hh(t) over
incb of ﬂow with rate of Ratk. That is, tincb  ρ
n+1 ), the minimum number of counters
− 1, and the upper bound on the incubation period
is
can be lowered signiﬁcantly by adding a few counters. The
details will be discussed in Section 4.6.
Ratk
ρ
4.5 Tradeoff Analysis
We discuss three tradeoﬀs in EARDet: (1) memory con-
sumption (i.e., the number of counters) vs. the rate gap, (2)
the rate gap and burst gap, and (3) the rate gap and the
upper bound on the incubation time.
First, since the rate gap can be expressed as γh/γℓ >
RN F N /γℓ = ρ/γℓ
n+1 , we can see that the rate gap decreases
with increasing n. Second, Equation (2) shows that the min-
imum rate gap γh/γℓ is mainly inﬂuenced by βh/βℓ, namely
the burst gap, and the minimum rate gap decreases as the
burst gap increases. Finally, Theorem 7 shows that a large
burst gap results in a long incubation period. Hence, a small
rate gap results in a big burst gap, and a high incubation
period.
4.6 How To Engineer The Detector
To engineer our detector, we ﬁrst identify parameters
that are often known or given in a priori. Usually, users
want a detector for a speciﬁc link capacity, ρ, to protect
small ﬂows which comply with the low-bandwidth threshold:
T Hℓ(t) = γℓ t + βℓ, and to detect attack ﬂows that violate
the high-bandwidth threshold: T Hh(t) = γht + βh. How-
ever, as discussed in Section 4.5, there is a tradeoﬀ between
the rate gap and burst gap, so their requirements cannot be
both fulﬁlled. Thus, we choose to satisfy the rate require-
ment of γh, and then set βh according to γh because it is
more important to limit the ﬂow rate than the burst size.
Furthermore, since we want to minimize the incubation pe-
riod of large ﬂows, there is an upper bound of the incubation
period, tupincb.
We set βh = α + 2βT H and γh > ρ
n+1 to guarantee no
FNℓ according to Theorem 4. Since βT H = βℓ + β∆, we only
need to decide the number of counters n and β∆. Hence, the
problem can be simpliﬁed as follows. Given ρ, γℓ, βℓ, γh,
α, and tupincb, we aim to calculate n and β∆ such that the
parameters satisfy the constraints in Theorems 4, 6 and 7.
The detailed solution and analysis are in Appendix A. The
detailed analysis shows that the tunable parameters depend
on only the thresholds and are independent of the input
traﬃc.
5. EVALUATION
To evaluate EARDet, we compare EARDet with two
closely related proposals, which we refer to as FMF [17] and
AMF [16]. Both of our theoretical comparison and trace-
based simulations demonstrate that EARDet performs bet-
ter than prior work in terms of both exactness7 outside an
ambiguity region and eﬃciency. The simulation results us-
ing real and synthetic traﬃc traces are consistent with the
analysis in the theoretical evaluation.
5.1 Theoretical Comparison
Multistage ﬁlters.
Fixed-window-based Multistage Fil-
ters (FMF) identify large ﬂows in a ﬁxed measurement in-
terval. A FMF consists of parallel stages, each of which
is an array of counters initialized to zeros at the beginning
of a measurement interval. Each stage is assigned a hash
function that maps a packet’s ﬂow identiﬁer to a counter in
the stage. For each incoming packet, its ﬂow identiﬁer is
hashed to one counter in each hash stage, and the counter
value increments by the size of the packet. A ﬂow is consid-
ered a large ﬂow if all of its corresponding counters exceed
a pre-speciﬁed threshold.
Arbitrary-window-based Multistage Filters (AMF) identify
large ﬂows over arbitrary windows. To work in the arbitrary
window model, AMF replaces each counter in FMF with a
leaky bucket of a bucket size u and a drain rate r. A ﬂow
is considered a large ﬂow if the corresponding leaky buckets
are all violated.
Performance Comparison.
Table 2 presents a numer-
ical comparison of EARDet, FMF and AMF, where the
high-bandwidth rate is 1% of the link capacity, and the low-
bandwidth rate is 0.1% of link capacity. The results of FMF
and AMF are derived based on the authors’ original analysis
7The comparison in this section uses our deﬁnition of exact-
ness.
217Table 2: A numerical example given the require-
ments in Section 4.6. γh is 1% of the link capacity,
and γℓ is 0.1% of link capacity.
FPs rate
0
no guarantee / ≤ 0.04∗
no guarantee / ≤ 0.04
FNℓ rate
0
0∗
0
Scheme
EARDet
FMF
AMF
# of counters
101
101/1000
101/2000
∗FMF’s results are derived in the landmark window model, and
thus FMF’s FPs and FNℓ rates may be higher in the arbitrary
window model.
Table 3: Summary of comparison of three schemes.
Scheme
EARDet
FMF
AMF
FPs
no
yes
yes
FNℓ Memory
no
yes
no
low
high
high
Input Traﬃc
independent
dependent
dependent
that assumes a speciﬁc number of active ﬂows for the input
traﬃc.
EARDet outperforms the other two approaches in sev-
eral aspects: 1) EARDet guarantees no false detection of
small ﬂows, whereas it is unclear how FMF and AMF can
achieve this property. Even with ten times or more extra
storage, FMF and AMF still have error rates as high as
0.04. 2) Both EARDet and AMF can detect all large ﬂows.
However, FMF has FNℓ on bursty ﬂows. 3) EARDet re-
quires much less memory compared with multistage ﬁlters.
4) EARDet’s performance is independent of the input traf-
ﬁc, because the error rate is always zero. On the contrary, to
keep the same false positive rate, multistage ﬁlters require
more stages as the number of active ﬂows increases. Table 3
summarizes the comparison, which suggests that EARDet
is exact outside an ambiguity region and more eﬃcient than
prior works.
Although EARDet presents several advantages compared
with multistage ﬁlters, EARDet cannot estimate the size of
a detected ﬂow, which multistage ﬁlters achieve.
5.2 Experiment Settings
Datasets.
Table 4 summarizes the characteristics of
the two datasets used in the experiments. The Federico
II dataset contains traces collected at the TCP port 80 of
a 200 Mbps link [3, 12, 13]. The CAIDA dataset contains
anonymized passive traﬃc traces from CAIDA’s equinix-
sanjose monitors on 10 Gbps backbone links [2]. For each
dataset, we use the ﬁrst 30 seconds for the experiments.
We deﬁne ﬂows based on the source and destination IP ad-
dresses.
Dataset
Federico II
CAIDA
Table 4: Dataset Information.
of
link
Link ca-
pacity
200M bps
10Gbps
Avg
rate
1.85M B/s
279.65M B/s 2517099
#
ﬂows
2911
Avg ﬂow
size
19.9KB
3.3KB
and compare EARDet with FMF and AMF in the face of
common attacks.
In particular, we generate attack ﬂows using two simple
strategies—ﬂooding attacks and Shrew DoS attacks [22,25]—
and then mix real traces with artiﬁcially generated attack
ﬂows to simulate an attack environment. In a ﬂooding at-
tack, the adversary sends high-rate ﬂows with a speciﬁed
rate γlarge (e.g. γh). Each high-rate ﬂow is generated as fol-
lows. We randomly choose a 1-second time slot within the
30-second stream as the ﬁrst second of the ﬂow. Starting
from that second, we randomly generate γlarge/packetSize
packets in each 1-second interval to make the ﬂow size in
each interval equal to that speciﬁed rate.
In this experi-
ment, we set the packet size to 1518 bytes, the maximum
packet size. In a Shrew attack, the attacker sends periodic
bursts in an attempt to cut oﬀ TCP traﬃc by exploiting
TCP’s congestion control mechanism. To generate a bursty
ﬂow with a period T , burst duration L, and bursty ﬂow rate
γburst, we randomly choose a time point from [0, 29) sec-
ond as the start time, and then randomly generate γburst · L
packets in each L-length burst that occurs every T seconds.
We then evaluate (1) how many malicious large ﬂows can
evade detection, and (2) how many small benign ﬂows are
falsely caught because of these coexisting attack ﬂows.
We conﬁgure EARDet based on the guidelines in Section
4.6, such that it can detect large ﬂows violating T Hh(t) =
γh t + βh, where γh = 0.01ρ, and βh = 2βT H + α. βT H will
be calculated according to our technical report [37]. We also
consider small ﬂows that comply with T Hℓ(t) = γℓ t + βℓ,
where βℓ = 6072 bytes and γℓ = 0.01ρ. Also, we require
tupincb to be smaller than 1 second. Table 5 summarizes
the value of each parameter used in our experiments. In a
“non-congested link” setting, a ﬁxed number of attack ﬂows
are mixed with the real trace. We also consider a “congested
link” setting, where we ﬁll the link with attack ﬂows, for the
small dataset (i.e., the Federico II dataset) only. We leave
it as future work to scale our attack ﬂow generation tool to
work for larger datasets.
To conﬁgure the two multistage ﬁlters (FMF and AMF),
we set FMF’s window size to 1 second, number of stages
d = 2, number of counters in each stage b = 250, thresh-
old of FMF T = γh · 1 second, threshold of AMF u = βh,
and drain rate r = γh. We are also interested in the perfor-
mance of FMF and AMF when their memory is as small as
EARDet’s. Hence, we run additional experiments in which
the number of counters in each stage is 55. The details of
these values are shown in the Table 6.
For each experiment environment, we design two sets of
experiments to test the performance of these three ﬁlters
in the presence of ﬂooding attacks and Shrew attacks. We
repeat each experiment for 10 times and present the aver-
age. In the case of ﬂooding attacks, we randomly generate
k1 attack ﬂows for each attack rate. In the case of Shrew
attacks, we randomly generate k2 bursty ﬂows with 1.2 ∗ γh
burst rate and 1-second period for each burst duration L.
We set k1 = k2 = 50 for the non-congested link setting, and
set the k1 and k2 as large as possible to congest the link in
the congested-link setting.
Attack scenarios.
As stated in the theoretical analysis
in Section 5.1, EARDet is exact outside an ambiguity region
and eﬃcient comparing to prior algorithms. The theoretical
analysis focuses on the worst-case behaviors. To investigate
how EARDet performs in reality, we conduct experiments
Table 6: Multistage Filter Parameters.
Dataset
Federico II
CAIDA
b ∗ d
55 ∗ 2, 250 ∗ 2
55 ∗ 2, 250 ∗ 2
T
u
r
250KB
250KB/s
12.5M B 15.4KB 12.5M B/s
15.5KB
218Dataset
Federico II
CAIDA
γh
βh
γℓ
βℓ
ρ
α
link status
250KB/s
12.5M B/s
15.5KB
25KB/s
15.4KB 1.25M B/s
6072B
25M B/s
6072B 1.25GB/s
1518B congested/non-congested
1518B
non-congested
n
βT H
6991B 107
6925B 100
tupincb
0.8370s
0.1242s
Table 5: Parameters of Experiment Environment.
Detection Probability Under Large Rate Flow Attack
Detection Probability Under Shrew Attack
y
t
i
l
i
b
a
b
o
r
P
  1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
  0
0.5
1
1.5
y
t
i
l
i
b
a
b
o
r
P
  1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
EARDet in congested link
FMF in congested link
AMF in congested link
EARDet in non−congested link
FMF in non−congested link
AMF in non−congested link
γ
atk
γ
EARDet in congested link
FMF in congested link
AMF in congested link
EARDet in non−congested link
FMF in non−congested link
AMF in non−congested link