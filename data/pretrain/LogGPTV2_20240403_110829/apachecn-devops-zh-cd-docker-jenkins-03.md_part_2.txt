                stage("Hello") {
                     steps {
                          echo 'Hello World'
                     }
                }
           }
      }
```
5.  点击保存。
6.  单击立即构建。
我们应该在构建历史下看到#1。如果我们点击它，然后点击控制台输出，我们将看到来自管道构建的日志。
![](img/28b3c9dd-cd74-4912-a9af-b7b3a7724347.png)
我们刚刚看到了第一个例子，它的成功输出意味着 Jenkins 安装正确。现在，让我们转到稍微高级一点的 Jenkins 配置。
We will describe more on the pipeline syntax in [Chapter 4](04.html), *Continuous Integration Pipeline*.
# Jenkins 建筑
hello world 的工作几乎在任何时间内完成。然而，管道通常更复杂，并且花费时间在诸如从互联网下载文件、编译源代码或运行测试等任务上。一次构建可能需要几分钟到几小时。
在常见的场景中，也有许多并发管道。通常，整个团队，甚至整个组织都使用相同的 Jenkins 实例。如何确保构建快速而顺利地运行？
# 主人和奴隶
Jenkins 比看起来更快地超载。即使是小型(微型)服务，构建也需要几分钟。这意味着一个频繁提交的团队很容易杀死 Jenkins 实例。
因此，除非项目真的很小，否则 Jenkins 根本不应该执行构建，而是将它们委托给从属(代理)实例。准确地说，我们目前运行的 Jenkins 被称为 Jenkins 大师，它可以委托给 Jenkins 代理。
让我们看看呈现主从交互的图表:
![](img/1d28685d-ac8c-474b-9052-ed0f1e340e33.png)
在分布式构建环境中，Jenkins 大师负责:
*   接收构建触发器(例如，在提交到 GitHub 之后)
*   发送通知(例如，在构建失败后发送的电子邮件或 HipChat 消息)
*   处理 HTTP 请求(与客户端的交互)
*   管理构建环境(编排从机上的作业执行)
构建代理是一台处理构建开始后发生的所有事情的机器。
由于主人和奴隶的责任不同，他们有不同的环境要求:
*   **Master** :这通常是(除非项目真的很小)一台专用机，RAM 从小项目的 200 MB 到大型单主项目的 70GB 以上。
*   **Slave** :没有通用的要求(除了它应该能够执行单个构建的事实，例如，如果项目是一个需要 100 GB RAM 的巨大整体，那么从机需要满足这些需求)。
代理也应该尽可能通用。例如，如果我们有不同的项目:一个在 Java 中，一个在 Python 中，一个在 Ruby 中，那么如果每个代理都可以构建这些项目中的任何一个，那将是完美的。在这种情况下，代理可以互换，这有助于优化资源的使用。
If agents cannot be generic enough to match all projects, then it's possible to label (tag) agents and projects, so that the given build would be executed on a given type of agent.
# 可量测性
我们可以使用 Jenkins 从机来平衡负载，并扩展 Jenkins 基础设施。这样的过程称为水平缩放。另一种可能性是只使用一个主节点并增加其机器的资源。这个过程叫做垂直缩放。让我们仔细看看这两个概念。
# 垂直缩放
垂直扩展意味着，当主机的负载增加时，更多的资源被应用到主机上。因此，当新项目出现在我们的组织中时，我们会购买更多的内存，添加 CPU 内核，并扩展硬盘驱动器。这听起来像是一个不可行的解决方案；然而，它经常被使用，即使是知名组织也是如此。在超高效的硬件上拥有一个单独的 Jenkins 主机有一个非常强大的优势:维护。任何升级、脚本、安全设置、角色分配或插件安装都只能在一个地方完成。
# 水平缩放
水平扩展意味着，当一个组织发展壮大时，会启动更多的主实例。这需要为团队智能分配实例，在极端情况下，每个团队都可以有自己的 Jenkins 大师。在这种情况下，甚至有可能不需要奴隶。
缺点是跨项目集成可能很难自动化，团队的一部分开发时间花在了 Jenkins 维护上。然而，水平缩放有一些显著的优点:
*   主机在硬件方面不需要特别
*   不同的团队可以有不同的 Jenkins 设置(例如，不同的插件集)
*   如果实例是他们自己的，团队通常感觉更好，与 Jenkins 一起工作效率更高
*   如果一个主实例停机，不会影响整个组织
*   基础设施可以分为标准的和关键任务的
*   一些维护方面可以简化，例如，五人小组可以重复使用相同的 Jenkins 密码，因此我们可以跳过角色和安全设置(当然，这只有在公司网络防火墙良好的情况下才有可能)
# 测试和生产实例
除了缩放方法，还有一个问题:如何测试 Jenkins 升级、新插件或管道定义？Jenkins 对整个公司至关重要。它保证软件的质量，并(在持续交付的情况下)部署到生产服务器。这就是为什么它需要高度可用，所以它肯定不是为了测试。这意味着应该总是有两个相同的 Jenkins 基础设施的实例:测试和生产。
Test environment should always be as similar as possible to the production, so it also requires the similar number of agents attached.
# 示例架构
我们已经知道应该有从设备(可能有多个)主设备，并且所有的东西都应该复制到测试和生产环境中。然而，完整的画面会是什么样子呢？
幸运的是，有很多公司发布了他们如何使用 Jenkins 以及他们创建了什么样的架构。很难衡量他们中是否有更多的人喜欢垂直或水平缩放，但范围从只有一个主实例到每个团队有一个主实例。
让我们看看网飞的例子，了解 Jenkins 基础设施的完整情况(他们在 2012 年旧金山 Jenkins 用户大会上将其作为**计划的基础设施**进行了分享):
![](img/df2ac293-dafb-433e-8d17-f0f7ff006e6a.png)
它们有测试和生产主实例，每个实例都有一个从机和额外的临时从机的轮询。总共，它每天服务大约 2000 个构建。还要注意，他们基础设施的一部分托管在 AWS 上，一部分在他们自己的服务器上。
根据组织的类型，我们至少应该对 Jenkins 基础架构的样子有一个大致的了解。
现在让我们把重点放在设置代理的实际方面。
# 配置代理
我们已经看到了什么是代理以及何时可以使用它们。但是，如何设置代理并让它与主服务器通信呢？让我们从问题的第二部分开始，描述主机和代理之间的通信协议。
# 通信协议
为了让主机和代理进行通信，必须建立双向连接。
有不同的启动方式:
*   **SSH** :主机使用标准的 SSH 协议连接到从机。Jenkins 内置了一个 SSH 客户端，所以唯一的要求是在从机上配置 SSHD 服务器。这是最方便和稳定的方法，因为它使用标准的 Unix 机制。
*   **Java Web Start** :在每个代理机上启动 Java 应用，并在 Jenkins 从应用和主 Java 应用之间建立 TCP 连接。如果代理位于防火墙网络内部，并且主服务器无法发起连接，则通常会使用这种方法。
*   **Windows 服务**:主机在远程机器上注册一个代理作为 Windows 服务。不建议使用这种方法，因为设置很复杂，而且图形界面的使用也有限制。
如果我们知道通信协议，让我们看看如何使用它们来设置代理。
# 设置代理
在底层，代理总是使用上述协议之一与 Jenkins 主机通信。然而，在更高的层次上，我们可以通过各种方式将奴隶附加到主人身上。差异涉及两个方面:
*   **静态对动态**:最简单的选择就是在 Jenkins 主中永久添加从机。这种解决方案的缺点是，如果我们需要更多(或更少)的从节点，我们总是需要手动更改一些东西。一个更好的选择是在需要时动态配置从机。
*   **特定与通用**:代理可以是特定的(例如，基于 Java 7 的项目的不同代理和 Java 8 的不同代理)或通用的(代理充当 Docker 主机，管道构建在 Docker 容器内)。
这些差异导致了代理配置的四种常见策略:
*   常驻代理人
*   永久 Docker 代理人
*   Jenkins 蜂群智能体
*   动态配置的 Docker 代理
让我们检查每个解决方案。
# 常驻代理人
我们从最简单的选项开始，即永久添加特定的代理节点。这可以完全通过 Jenkins 网络界面完成。
# 配置永久代理
在 Jenkins 主界面中，当我们打开“管理 Jenkins”，然后打开“管理节点”时，我们可以查看所有连接的代理。然后，通过单击新节点，给它一个名称，并使用确定按钮进行确认，我们应该最终看到代理的设置页面:
![](img/8cc335f3-a054-4fe9-851d-a08de74aa7cc.png)
让我们浏览一下需要填充的参数:
*   **名称**:这是代理的唯一名称
*   **描述**:这是任何人类可读的代理描述
*   **#个执行器**:这是可以在从机上运行的并发构建数
*   **远程根目录**:这是从机上的专用目录，代理可以用来运行构建作业(例如`/var/jenkins`)；最重要的数据被传输回主机，所以目录并不重要
*   **标签**:这包括只匹配特定构建的标签(标签相同)，例如，只匹配基于 Java 8 的项目
*   **用法**:这是决定代理应该只用于匹配的标签(例如，只用于验收测试版本)还是任何版本的选项
*   **发射方式**:包括以下内容:
    *   **通过 Java Web Star 启动代理** t:这里由代理建立连接；可以下载 JAR 文件以及如何在从机上运行它的说明
    *   **通过在主机上执行命令来启动代理**:这是在主机上运行的自定义命令，用于启动从机；在大多数情况下，它将发送 Java Web Start JAR 应用，并在从机上启动它(例如，`ssh  java -jar ~/bin/slave.jar`)
    *   **通过 SSH 启动从代理:**这里，主代理将使用 SSH 协议连接到从代理
    *   **让 Jenkins 作为 Windows 服务控制这个 Windows 从机**:这里，主机将启动一个内置在 Windows 中的远程管理设施
*   **可用性**:这是决定代理是应该一直开机，还是在一定条件下主机应该让其离线的选项