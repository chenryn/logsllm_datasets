  All browsers present bypassable certificate warnings for invalid 
certificates,  as  depicted  in  Figure  1(a)  for  instance.  In  Firefox  3 
and 3.5, it takes respectively 4 and 3 clicks to bypass an invalid 
certificate while other browsers require only 1 click. Compared to 
Firefox  3,  Firefox  3.5  revamped  the  certificate  warning  by 
specifying the untrusted connection with non-technical words. 
  In IE, another SSL warning dialog, as depicted in Figure 1(c), is 
triggered  when  mixed  content  is  found.  Mixed  content  is  any 
content (e.g. images, javascript) embedded in a HTTPS webpage 
and  such  content  is  served  over  HTTP  or  invalid  HTTPS.  To 
conserve space, we omit a similar warning present in IE 7. 
2.3  HTTPS Security Indicators 
  Concerning certificate validity, all browsers cohesively display 
a  padlock  icon  for  valid  HTTPS  connections.  When  compared 
with the case after an invalid certificate is bypassed, IE replaces 
the padlock with a red error badge and changes the color of the 
location  bar  from  green  to  red;  Firefox  and  Safari  do  nothing 
different; Chrome replaces the padlock with a yellow exclamation 
mark, changes the color of the location bar from yellow to white 
and replaces the green protocol with a red https:// and a line 
crossing it; and Opera replaces the padlock with a question mark. 
For HTTP connections, location bars of all browsers are in white. 
  For mixed content, IE removes the padlock if mixed content is 
accepted;  Firefox  adds  a  red  exclamation  mark  on  top  of  the 
padlock for any mixed content except images. In Safari, Chrome 
and  Opera,  neither  security  warnings  nor 
indicators  are 
implemented. 
2.4  Users’ Legitimacy Judgment 
  Given  all  security  clues  mentioned  in  Section  2.2–2.3,  it  is 
essential  to  know  if  they  can  effectively  assist  users  to  make 
proper  legitimacy  judgment.  In  [9],  it  surveyed  what  clues  had 
drawn users’ attention. Out of 22 participants, 23% of them were 
aware of only security indicators claimed within website content, 
36%  of  them  were  aware  of  domains  additionally,  9%  of  them 
were aware of the HTTPS protocol in addition, 23% of them were 
also aware of the padlock icon, and 9% of them paid attention to 
everything  including  the  certificate  validity.  In  [8],  its  results 
corroborate  other  findings  in  a  way  that  100%  of  surveyed 
participants  entered  password  without  noticing  the  HTTPS 
protocol was replaced  with HTTP. In other usability studies, we 
find that the certificate bypassing rate of IE7 was 53% in 2007 [8] 
and 95% in 2009 [7]; and that of Firefox 3 was 58% in 2009 [7]. 
  Based  on  these  findings,  it  is  hesitated  if  the  current  SSL 
deployment using security warnings and indicators can effectively 
prevent  majority  of  users  from  reaching  compromised  websites. 
SSLock  is  thus  proposed  to  rule  out  users  from  performing 
security-critical legitimacy judgment. 
3.  A STUDY OF REAL-WORLD ATTACKS 
  We  formulate three recent browser attacks to demonstrate that 
the  current  SSL  deployment  fails  to  protect  users  adequately.  A 
common feature of these attacks is that they attempt to exploit the 
security  warnings  and  indicators.  Here  we  assume  typical  users 
bypass security warnings and ignore security indicators in online 
activities  as  discussed  in  Section  2.4.  On  the  other  hand,  we 
assume  legitimate  servers  always  employ  valid  certificates  and 
attackers cannot break into legitimate servers to gain access to any 
private keys nor protected content.  
3.1  Exploiting Certificate Warnings 
We illustrate two attacks that exploit certificate  warnings. The 
first attack is a dynamic pharming attack in which an attacker is 
required to manipulate DNS responses of a victim. 
Attack 1 (Dynamic pharming attack): An example of dynamic 
pharming  attack  [16]  is  depicted  in  Figure  2(a).  (1)  An  attacker 
first resolves the DNS query of secure.gmail.com as his own 
IP  (6.6.6.6)  for  a  victim.  (2)  The  victim’s  browser  then  visits 
https://secure.gmail.com,  the  pharmer  tries  to  return  over 
HTTPS  some  HTML  containing  trojan  Javascript  (JS)  and  an 
iframe  referencing  Gmail’s  home  page.  (3)  However,  since  the 
pharmer’s certificate is invalid, a certificate warning is prompted 
and  bypassed  by  the  victim  allowing  the  HTML  to  reach  the 
browser.  (4)  The  attacker  then  updates  the  DNS  entry  of 
secure.gmail.com  to  the  legitimate  IP  (1.2.3.4)  of  Gmail’s 
server and denies any more connections from the victim. (5) This 
causes  the  victim’s  browser  to  renew  its  DNS  record  of 
secure.gmail.com, and (6) load Gmail’s legitimate home page 
in  the  iframe.  (7)  The  trojan  JS  can  start  spying  on  victim’s 
session with the legitimate server. 
206Figure 2: Illustration of (a) dynamic pharming attack, (b) deceptive captive portal attack, and (c) SSLStrip attack. 
  The second attack is a deceiving captive portal attack where a 
captive  portal  is  an  authentication  approach  that  redirects  any 
connections  to  a  designated  portal  to  ask  for  credentials  before 
granting  Internet  connectivity.  However,  it  is  vulnerable  to 
redirect  also  SSL  traffic.  We  performed  an  experiment  showing 
that such vulnerability is present in one of the devices developed 
by  Aruba,  the  second  largest  commercial  provider  which  hosts 
more  than  2000  hotspots  in  our  locality  as  well  as  leading 
commercial providers in Singapore and Australia. Therefore, it is 
threatening 
that  any  commercial  providers  and  attackers 
controlling wireless access points can easily mount the following 
attack2. 
Attack  2  (Deceptive  captive  portal  attack):  As  depicted  in 
Figure  2(b),  an  attacker  can  setup  a  wireless  access  point  (AP) 
which impersonates SSID, MAC address and a captive portal as if 
the  AP  is  operated  by  a  well-known  commercial  provider.  (1) 
When  a  victim  connects  to  the  attacker’s  AP 3  and  visits 
https://secure.gmail.com,  (2)  the  AP  responds  with  its 
portal  certificate  in  which  the  common  name  mismatches  the 
current domain name. (3) A certificate  warning is thus triggered 
and bypassed by an Internet-hungry victim. (4) The AP serves a 
captive  portal  that  deceptively  caches  a  trojan  JS  file  at 
https://secure.gmail.com/embedded.js  which  will  later 
be  embedded  in  a  legitimate  Gmail’s  webpage.  (5)  Without 
noticing  any  difference  in  the  deceptive  portal,  the  victim 
authenticates  herself  as  she  did  in  the  well-known  provider’s 
portal. After that, she is redirected to the legitimate Gmail’s server. 
(6) The embedded JS which is just cached then sniffs at sensitive 
HTTPS content in Gmail. 
3.2  Exploiting SSL Protocol and Indicator 
  A user who never bypasses certificate warnings is however still 
susceptible to SSLStrip attack that exploits users’ unawareness on 
the SSL protocol and security indicator [3]. 
2 It  is  also  vulnerable  for  any  other  (physical)  connections  that 
employ captive portals as the means of authentication. 
3 The captive redirection can happen at any instant when a laptop 
switches to another Wi-Fi provider owing to better connection 
quality for instance. 
Attack  3  (SSLStrip):  In  a  SSLStrip  attack  illustrated  in  Figure 
2(c),  an  attacker  begins  by  setting  up  a  man-in-the-middle 
environment.  (1)  Consider  a  victim  visits  secure.gmail.com, 
victim’s browser binds the connection with HTTP by default. (2) 
The  attacker’s  server  honestly  forwards  the  first  request  to  the 
legitimate  Gmail’s  server  that  (3)  returns  a  redirection  header 
suggesting  navigation  to  https://secure.gmail.com.  (4) 
However, before forwarding this and subsequent responses to the 
victim,  the  attacker  alters  them  by  replacing  https://  with 
http:// for any URLs. In addition, the attacker serves a favicon 
[21] which looks exactly like the padlock icon. (5) Unfortunately, 
the  victim,  who  is  misled  by  the  fake  padlock,  overlooks  the 
protocol  being  used  and  thinks  that  “the  HTTP  connection  is 
secure”.  She  then  authenticates  herself  such  that  her  credentials 
are sent through the attacker over HTTP in plaintext. 
4.  SPECIFICATION 
  The protection is split into core and extended specification. The 
former  is  generic  to  all  SSL  applications  unless  otherwise 
specified  while  the  latter  is useful  only  for  browsers.  In  the  last 
subsection, we narrate how SSLock works. 
4.1  Core Specification 
  SSLock  is  a  generic  mechanism  to  strictly  enforce  SSLock-
protection in SSLock-protected domains. 
SSLock-protected domains: We propose two acceptable formats: 
(a)  secure  as  a  top-level  domain  (TLD)  –  Examples  include 
www.gmail.secure  and  gmail.secure.  This 
format 
enforces protection for all subdomains and breaks no existing 
services. Since an introduction of a new top-level domain may 
involve  significant  time,  costs  and  difficulties,  therefore  we 
propose the format (b) below. 
(b)  secure  as  a  subdomain  –  www.secure.gmail.com, 
secure.www.gmail.com  and  secure.gmail.com  are 
some  examples.  For  TLDs  other  than  dotcom,  examples 
include  secure.gmail.net,  secure.gmail.co.uk  and 
secure.gmail.us.  This  format  will  break  some  existing 
services, so we provide a compatibility study in Section 5.2. 
SSLock-protection: The enhanced protection is specified below: 
  Use  a  corresponding  SSL  protocol  and  its  default  port  if 
unspecified  (e.g. port  443  for HTTPS  websites,  port  465  for 
207 
SMTP over SSL) to initiate SSL negotiation with the SSLock-
protected domain. 
If a failure occurs or an invalid certificate is supplied during 
the  negotiation,  the  connection  is  denied  without  overriding 
opportunities. In other words, a valid certificate is a must. 
(Browser-specific)  Mixed  content  is  also  denied  without 
exceptions.  As  a  result,  embedded  content  inherits  the  two 
specifications above regardless of what domain it is served. 
Table  1:  HTTP  response  header SSLock-Candidates  placed 
in secure.gmail.com to advocate client-side redirection. 
SSLock-Candidates: gmail.com, www.gmail.com 
Table  2:  The  core  implementation  realizing  the  client-side 
redirection 
in 
Javascript, which is also favored by Firefox. 
for  unprotected  domains.  It 
is  written 
4.2  Extended Specification for Browsers 
  It is insufficient to protect services hosted only in the SSLock-
protected  domains  in  browsers.  Extending  SSLock-protection 
across other subdomains like the popular subdomain www is thus a 
must.  This  can  be  achieved  by  adding  a  cacheable  redirection 
response header to redirect browsers from an unprotected domain 
to  a  SSLock-protected  one 4 .  However  any  plaintext  caching 
solutions  could  possibly  compromise  privacy,  all  browsers 
provide  options  for  users  to  clear  the  cache  which  in  turn 
neutralize the protection. 
  We thus extend the protection by proposing a privacy-enhanced 
client-side redirection which facilitates long-lasting storage. 
4.2.1  Specification 
  As shown in Table 1, the client-side redirection is controlled by 
a  HTTP  response  header  SSLock-Candidates  placed 
in 
SSLock-protected domains. The header allows a service provider 
to whitelist some unprotected subdomains given that they deviate 
with  the  protected  one  by  only  1  domain  level.  For  instance, 
(www.)gmail.com  is  accepted  for  SSLock-protected  domain 
secure.gmail.com.  Intrinsically,  legitimacy  of  the  whitelist  is 
guaranteed by SSLock-protection in which the header is found. 
  Opt-in: An unprotected domain has to be listed in the header. 
To  denote  wildcard  redirection,  an  asterisk  *  affecting  all 
preceding subdomains is used. For instance, if *.gmail.com 
is specified in the response header from secure.gmail.com, 
a  browser  will 
to 
(what.ever.)secure.gmail.com. 
  Opt-out: A withdrawing domain has to be first deleted from 
the  whitelist.  A  browser  that  has  previously  cached  such  a 
domain  will  check  if  it  is  still  listed  in  the  header  after 
completing  the  corresponding  client-side  redirection.  If  the 
domain is no longer found in the list, then the protection will 
be neutralized for subsequent browser sessions. 
(what.ever.)gmail.com 
redirect 
4.2.2  Implementation 
To realize the client-side redirection, we first introduce a set of 
key-value  pairs  referred  as  the  Candidate  List  (CL)  stored  in 
browsers. For each pair of record, the key is generated by hashing 
the  domain  with  a  strong  one-way  and  properly-salted  hash 
function while the value is the domain level to be replaced with 
the  word  “secure”  that  triggers  SSLock-protection.  Identical  to 
the  common  notation,  for  a  domain  l.www.gmail.com,  the 
domain level is respectively 1 for top-level domain (i.e. com), 2 
for  the  second-level  (i.e. gmail), 3  for  the  third-level  (i.e. www) 