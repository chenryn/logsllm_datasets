### 1. 浏览器中的证书警告

所有浏览器在遇到无效证书时都会显示可绕过的证书警告，如图1(a)所示。在Firefox 3和Firefox 3.5中，分别需要4次和3次点击才能绕过无效证书，而其他浏览器只需1次点击即可。与Firefox 3相比，Firefox 3.5通过使用非技术性语言详细说明了不受信任的连接，从而改进了证书警告。

在Internet Explorer (IE)中，当检测到混合内容时，会触发另一个SSL警告对话框，如图1(c)所示。混合内容是指嵌入HTTPS网页中的任何内容（例如图像、JavaScript），这些内容通过HTTP或无效的HTTPS提供。为了节省空间，我们省略了IE 7中类似的警告。

### 2. HTTPS安全指示符

关于证书的有效性，所有浏览器在有效HTTPS连接时都一致显示一个锁形图标。当用户绕过无效证书后，IE将锁形图标替换为红色错误徽章，并将地址栏颜色从绿色变为红色；Firefox和Safari没有任何变化；Chrome将锁形图标替换为黄色感叹号，将地址栏颜色从黄色变为白色，并将绿色协议替换为带有一条横线的红色`https://`；Opera将锁形图标替换为问号。对于HTTP连接，所有浏览器的地址栏都是白色的。

对于混合内容，如果用户接受混合内容，IE会移除锁形图标；Firefox会在锁形图标上添加一个红色感叹号，除了图像外的所有混合内容都会如此处理。而在Safari、Chrome和Opera中，没有实现任何安全警告或指示符。

### 3. 用户的合法性判断

根据第2.2-2.3节提到的所有安全线索，了解它们是否能有效地帮助用户做出正确的合法性判断是至关重要的。在[9]的研究中，调查了哪些线索引起了用户的注意。在22名参与者中，23%的人只注意到网站内容中声明的安全指示符，36%的人还注意到了域名，9%的人还注意到了HTTPS协议，23%的人也注意到了锁形图标，9%的人注意到了所有内容，包括证书的有效性。在[8]的研究中，结果表明，100%的受访者在输入密码时没有注意到HTTPS协议被替换成了HTTP。在其他可用性研究中，我们发现IE7在2007年的证书绕过率为53% [8]，在2009年为95% [7]；Firefox 3在2009年的证书绕过率为58% [7]。

基于这些发现，当前使用安全警告和指示符的SSL部署能否有效防止大多数用户访问受攻击的网站仍存疑虑。因此，提出了SSLock来排除用户在进行关键合法性判断时的误判。

### 4. 实际攻击案例研究

我们通过三个近期的浏览器攻击案例来证明当前的SSL部署未能充分保护用户。这些攻击的一个共同特点是试图利用安全警告和指示符。这里假设典型用户在在线活动中会绕过安全警告并忽略安全指示符，如第2.4节所述。另一方面，我们假设合法服务器始终使用有效证书，且攻击者无法入侵合法服务器以获取任何私钥或受保护的内容。

#### 4.1 利用证书警告

我们展示了两种利用证书警告的攻击方式。第一种是动态药房攻击，攻击者需要操纵受害者的DNS响应。

**攻击1（动态药房攻击）**：如图2(a)所示，动态药房攻击[16]的过程如下：
1. 攻击者首先将`secure.gmail.com`的DNS查询解析为其自己的IP地址（例如6.6.6.6）。
2. 受害者的浏览器访问`https://secure.gmail.com`，攻击者尝试通过HTTPS返回包含特洛伊木马JavaScript (JS) 和引用Gmail主页的iframe的HTML。
3. 由于攻击者的证书无效，会弹出证书警告，受害者绕过后允许HTML到达浏览器。
4. 攻击者随后将`secure.gmail.com`的DNS条目更新为Gmail服务器的合法IP地址（例如1.2.3.4），并拒绝来自受害者的更多连接。
5. 这导致受害者的浏览器重新刷新`secure.gmail.com`的DNS记录，并加载Gmail的合法主页到iframe中。
6. 特洛伊JS开始监视受害者的合法服务器会话。

第二种是欺骗性的捕获门户攻击，其中捕获门户是一种认证方法，它将任何连接重定向到指定的门户以请求凭据，然后才授予互联网连接。然而，这种机制容易被利用来重定向SSL流量。我们在实验中发现，Aruba公司（第二大商业提供商）开发的一种设备存在此漏洞，该公司在本地拥有超过2000个热点，在新加坡和澳大利亚也是主要的商业提供商。因此，任何商业提供商和控制无线接入点的攻击者都可以轻松实施以下攻击。

**攻击2（欺骗性捕获门户攻击）**：如图2(b)所示，攻击者可以设置一个无线接入点 (AP)，冒充SSID、MAC地址和捕获门户，使其看起来像是由知名商业提供商运营的。
1. 当受害者连接到攻击者的AP并访问`https://secure.gmail.com`时，
2. AP响应其门户证书，其中通用名称与当前域名不匹配。
3. 弹出证书警告，饥饿的受害者绕过后继续操作。
4. AP提供一个捕获门户，该门户缓存了一个特洛伊JS文件（例如`https://secure.gmail.com/embedded.js`），稍后将其嵌入到合法的Gmail网页中。
5. 受害者在未注意到任何差异的情况下，像在知名提供商的门户中一样进行身份验证。之后，她被重定向到合法的Gmail服务器。
6. 缓存的JS文件开始嗅探Gmail中的敏感HTTPS内容。

#### 4.2 利用SSL协议和指示符

即使用户从未绕过证书警告，他们仍然可能受到SSLStrip攻击的影响，该攻击利用用户对SSL协议和安全指示符的不了解[3]。

**攻击3（SSLStrip）**：如图2(c)所示，在SSLStrip攻击中，攻击者首先设置中间人环境。
1. 假设受害者访问`secure.gmail.com`，受害者的浏览器默认使用HTTP绑定连接。
2. 攻击者的服务器诚实地将第一个请求转发到合法的Gmail服务器，该服务器
3. 返回一个重定向头，建议导航到`https://secure.gmail.com`。
4. 然而，在将此响应及后续响应转发给受害者之前，攻击者通过将`https://`替换为`http://`来修改URL。此外，攻击者提供一个看起来与锁形图标完全相同的favicon。
5. 不幸的是，受害者被假锁形图标误导，忽略了正在使用的协议，认为“HTTP连接是安全的”。她随后进行身份验证，导致其凭据通过HTTP以明文形式发送给攻击者。

### 5. 规范

保护分为核心规范和扩展规范。前者适用于所有SSL应用程序，除非另有规定；后者仅对浏览器有用。在最后一节中，我们将描述SSLock的工作原理。

#### 5.1 核心规范

SSLock是一种通用机制，用于严格强制SSLock-保护域中的SSLock-保护。

**SSLock-保护域**：我们提出两种可接受的格式：
1. **作为顶级域 (TLD) 的 secure** - 例如 `www.gmail.secure` 和 `gmail.secure`。这种格式对所有子域强制保护，并且不会破坏现有服务。由于引入新的顶级域可能涉及大量时间和成本，因此我们提出以下格式。
2. **作为子域的 secure** - 例如 `www.secure.gmail.com`、`secure.www.gmail.com` 和 `secure.gmail.com`。对于非 `.com` 的顶级域，示例包括 `secure.gmail.net`、`secure.gmail.co.uk` 和 `secure.gmail.us`。这种格式可能会破坏一些现有服务，因此我们在第5.2节中提供了兼容性研究。

**SSLock-保护**：增强的保护规定如下：
- 使用相应的SSL协议及其默认端口（例如，HTTPS网站的端口443，SMTP over SSL的端口465）与SSLock-保护域进行SSL协商。
- 如果协商过程中出现故障或提供了无效证书，则拒绝连接且不允许覆盖。换句话说，有效的证书是必须的。
- （浏览器特定）混合内容也不允许例外。因此，无论嵌入内容来自哪个域，都继承上述两个规范。

表1：放置在`secure.gmail.com`中的HTTP响应头`SSLock-Candidates`，用于倡导客户端重定向。

| SSLock-Candidates | gmail.com, www.gmail.com |
|-------------------|---------------------------|

表2：实现客户端重定向的核心实现，使用JavaScript编写，Firefox也支持。

#### 5.2 浏览器的扩展规范

仅保护托管在SSLock-保护域中的服务是不够的。因此，必须将SSLock-保护扩展到其他子域，如流行的子域`www`。这可以通过添加一个可缓存的重定向响应头来实现，将浏览器从不受保护的域重定向到SSLock-保护的域。然而，任何纯文本缓存解决方案都可能危及隐私，所有浏览器都提供选项让用户清除缓存，从而中和保护。

因此，我们通过提出一种增强隐私的客户端重定向来扩展保护，以促进持久存储。

##### 5.2.1 规范

如表1所示，客户端重定向由放置在SSLock-保护域中的HTTP响应头`SSLock-Candidates`控制。该头部允许服务提供商将某些不受保护的子域列入白名单，前提是它们与受保护的域仅相差一级域名。例如，`(www.)gmail.com` 被接受为SSLock-保护域`secure.gmail.com`。本质上，白名单的合法性由找到该头部的SSLock-保护保证。

- **选择加入**：不受保护的域必须列在头部中。要表示通配符重定向，使用影响所有前导子域的星号*。例如，如果`*.gmail.com`在`secure.gmail.com`的响应头中指定，则浏览器将重定向到`(what.ever.)secure.gmail.com`。
- **选择退出**：撤回的域必须先从白名单中删除。先前缓存了该域的浏览器将在完成相应的客户端重定向后检查该域是否仍在列表中。如果该域不再出现在列表中，则后续浏览器会话中的保护将被中和。

表1：放置在`secure.gmail.com`中的HTTP响应头`SSLock-Candidates`，用于倡导客户端重定向。

| SSLock-Candidates | gmail.com, www.gmail.com |
|-------------------|---------------------------|

表2：实现客户端重定向的核心实现，使用JavaScript编写，Firefox也支持。

##### 5.2.2 实现

为了实现客户端重定向，我们首先引入一组键值对，称为候选列表 (CL)，存储在浏览器中。对于每条记录，键是通过强单向哈希函数生成的域名哈希值，值是要替换为触发SSLock-保护的单词“secure”的域名级别。类似于常见表示法，对于域名`l.www.gmail.com`，顶级域（即`.com`）的域级别为1，第二级（即`gmail`）为2，第三级（即`www`）为3。