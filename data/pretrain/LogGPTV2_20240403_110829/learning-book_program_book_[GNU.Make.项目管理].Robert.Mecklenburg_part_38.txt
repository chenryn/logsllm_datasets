#catch them early.and hand them over to scripts/kconfig/Makefile
#It is allowed to specify more targets when calling make,including
#mixing*config targets and build targets.
#Forexample'makeoldconfigal1'.
#Detect when mixed targets is specified,and make a second invocation
of make so .config is not included in this case either （for *config）.
no-dot-config-targets:= clean mrproper distclean\
cscopeTAGStags help$docscheck
---
## Page 243
makefile实例
233
config-targets :=0
mixed-targets:=0
dot-config
:=1
后会对config-targets、mixed-targets和dot-config等变量进行初始化的动作。
如果命令行上指定了任何的编译工作目标，dot-config变量的值会被设成1。最后，如
果同时指定配置和编译工作目标，mixed-targets变量的值会被设成1。
用来设定dot-config的代码如下所示：
ifneq （S(filter S（no-dot-config-targets),$(MAKECMDGOALs）),)
ifeg （S（fi1ter-out $(no-dot-config-targets),S（MAKECMDGOALS)),）
dot-config:=0
endif
endif
如果MAKECMDGOALS中包含配置工作目标，filter表达式的求值结果就是非空值。如
果filter表达式的求值结果为非空值，ifneg的部分就为“真”。这段代码很难看得
懂，因为它包含了两次否定的意思。如果MAKECMDGOALS中只包含配置工作目标，则
ifeg表达式的值为“真”。所以，如果MAKECMDGOALS中包含配置工作目标而且只有配
置工作目标，dot-config将会被设成0。如果能够改用如下较长的实现方式，将可让
这两个条件表达式所代表的意义较为清楚：
config-target-list:=clean mrproper distclean\
config-target-goal := S(filter $（config-target-list),$（MAKECMDGOALS)）
build-target-goal := $（filter-out S(config-target-1ist),$(MAKECMDGOALS))
ifdef config-target-goal
ifndef build-target-goal
dot-config:=0
endif
endif
ifdef形式被用来取代ifneq，因为空值得变量会被视为未定义，不过你必须小心，以
避免让一个变量只包含空格所构成的字符串（这会使得它被视为已定义过）。
config-targets和mixed-targets变量被设定在下一段代码中：
ifeq（S（KBUILD_EXTMOD).)
ifneq （S（filter config &config.S（MAKECMDGOALS)),)
config-targets :=1
ifneq （S（filter-out config &config,S(MAKECMDGOALS)),)
mixed-targets :=1
endif
endif
endif
---
## Page 244
234
第十一章
当所进行的是外部模块的编译动作，而不是一般的编译动作时，KBUILD_EXTMOD将会被
设成非空值。如果MAKECMDGOALS所包含的工作目标具有config后缀，则第一个
ifneg的求值结果为“真”。
一旦变量被设定之后，它们会被使用在一个“具有4个分支的if-else”链中。这段代
码已经过浓缩与缩排，以便把它的结构强调出来：
ifeq (S(mixed-targets),1)
#We're called with mixed targets (*config and build targets）.
#Handle them one by one.
$::FORCE
$（Q)S（MAKE)-C $（srCtree）KBUILD_SRC=$@
else
ifeq (s(config-targets),1)
#in scripts/kconfig to make the*config target
sconfig: scripts_basic FORCE
S（Q)$(MAKE)$（build)=scripts/kconfig $9
else
Build targets only-this includes vmlinux,arch specific targets,clean
#targets and others.In general all targets except *config targets.
ifeg (S(dot-config),1)
#In this section,we need .config
#Read in dependencies to all Kconfig*files,make sure to run
#oldconfig if changes are detected.
-include.config.cmd
include.config
#If.config needs tobe updated,it will be done via the dependency
that autoconf has on.config.
#To avoid any implicit rule to kick in,define an empty command
.config:;
#If .config is newer than include/linux/autoconf.h,someone tinkered
#with it and forgot to run make oldconfig
include/linux/autoconf.h:.config
$（Q)S(MAKE)-f $（srctree)/Makefile silentoldconfig
else
#Dummy target needed,because used as prerequisite
include/1inux/autoconf.h:;
endif
include S(srctree)/arch/S(ARCH)/Makefile
….此处有许多make的代码..
endif #ifeq （S（config-targets),1)
endif #ifeq （S（mixed-targets),1)
第一个分支ifeqg（S（mixed-targets），1），用来处理混用（mixed）的命令行参数。只
有这个分支里的工作目标完全采用通用的模式规则，因此你看不到处理工作目标的特定
---
## Page 245
makefile实例
235
规则（这些规则位于另一个条件分支中），每个工作目标只会调用模式规则一次。这就
是具有配置工作目标和编译工作目标的命令行如何被分开成较简单的命令行的方法。通
用模式规则的命令行将会为每个工作目标递归调用make，这使得相同的逻辑可以应用
在每个工作目标上。FORCE必要条件用来取代.PHONY，因为如下的模式规则：
$：:FORCE
是无法被声明成，PHONY的。所以可行方法似乎就是固定使用FORCE以维持其一致性。
当命令行上只有一个配置工作目标时，会调用if-else链的第二个分支ifeq（S（config-
targets），1）。在这个分支中，主要的工作目标是模式规则&config（其他的工作目标
已被省略）。它的脚本会为每个工作目标在scripts/kconfig子目录中递归地调用make。
奇怪的s（build）结构就定义在makefile的末端：
#Shorthand for S(Q)S(MAKE)-f scripts/Makefile.build obj=dir
#"Usage:
#$（Q）S（MAKE）$（build）=dir
build:=-fs（ifS(KBUILD_SRC),S（srctree)/)scripts/Makefile.build obj
如果设定了KBUILD_SRC，-f选项就会对scripts组件的makefile使用完整的路径，否则
只会使用相对路径。接着，obj变量会被设定成等号的右边部分。
第三个分支ifeq（$（dot-config），1），用来处理需要引l人两个自动产生的配置文件
（.config和.config.cmd）的编译工作目标。最后一个分支只是用来为autoconf.h引l人一
个假想工作目标，让它能够被作为一个必要条件来用，即使它不存在。
的指示进行的。
控制命令是否被输出
内核的makefile使用了一个新颖的技术，用来控制命令被输出的详细程度。每个重要的
工作都会有verbose（详细模式）和quiet（安静模式）两个版本。verbose的版本就是让
命令以自然的方式执行，并将它存人名为cmd_action的变量中。quiet的版本是一个
用来描述动作的简短信息，并且将它存人名为quiet_cmd_action的变量中。举例来说，
如下的命令可用来产生emacs标记：
quiet_Cmd_TAGS=MAKE $@
cmd_TAGS=$(all-sources)|etags-
此类命令将会通过cmd函数来执行：
#If quiet is set,only print short version of command
---
## Page 246
236
第十一章
cmd=@S（if $（S（quiet）cmd_S（1)),\
echo$（$（quiet）cmd_s（1))&&）$（cmd_S（1)）
如果想要调用编译emacs标记的命令，makefile必须包含如下的规则：
TAGS:
$(ca11 cmd,TAGS)
注意cmd函数开头的@，所以此函数只会输出来自echo命令的信息。在标准模式中，
quiet变量是空的，而且if所测试的表达式s（S（quiet）cmd_s（1）），会被扩展成
$（cmd_TAGS）。因为这个变量是空的，所以整个函数会被扩展成：
echo'S（all-sources)1etags -'&& S（all-sources)Ietags-
如果需要使用quiet的版本，则quiet变量的值为quiet_，而且函数会被扩展成：
echoMAKE $@'&&S（all-sources)Ietags-
这个变量还可以被设定成silent_。因为并不存在silent_cmd_TAGS命令，所以此值
将会使得cmd函数不输出任何内容。
是否输出命令的管理有时会变得比较复杂，特别是如果命令中包含单引号。为解决此类
问题，makefile包含了如下的代码：
$（if $（S（quiet）cmd_$（1)),echos（subst,\,$（S（quiet)cmd_$（1)))':)
让它们能够被正确地输出。
至于较小的命令（没有必要自找麻烦去建立cmd_和quiet_cmd_变量）则会被前置
$（Q），它的值可能是空的或是@：
ifeq (S(KBUILD_VERBOSE),1)
quiet=
Q=
else
quiet=quiet_.
Q=@
endif
#If the user is running make -s （silent mode),suppress echoing of
commands
ifneq （S（findstring s,$(MAKEFLAGS)),)
quiet=silent.
endif
---
## Page 247
makefile实例
237
用户自定义函数
内核的makefile中定义了一些函数，我们在此处只讨论最重要的几个。以下所举的例子
已经重新编排成较具可读性的形式。
check_gcc函数（译注1）用来选择一个gcc命令行选项。
#$(call check_gcc,preferred-option,alternate-option)
check_gcc=
-xc/dev/nul1>/dev/null2>&1;
then
echo *s(1)*;
else
echo"s（2)";
fi:)
此函数的作用，就是以较优选的命令行选项在一个空的输人文件上调用gcc。输出文件、
标准输出以及标准错误文件都会被丢弃。如果gcc命令执行成功，这表示较优选的命令
行选项对此结构来说是有效的，于是它会被此函数返回：否则，表示此选项是无效的，
于是此函数会返回替代的选项。你可以在arch/i386/Makefile文件中看到如下的例子：
#prevent gcc from keeping the stack 16 byte aligned
CFLAGS += $(cal1 check_gcc,-mpreferred-stack-boundary=2,)
if_changed_dep函数用来产生依存信息，它所用到的技术值得我们加以了解。
execute the commandand alsopostprocess generated
#.d dependencies file
if_changed_dep=
S(if
$(strip S?
S（filter-out FORCE $（wildcard s~).S~)
$（fiiter-out $（cmd_s（1)),s（cmd_$@))
$（filter-out $（cmd_$@）,$（cmd_s（1)))),
@set-e;
S（if $（$（quiet）cmd_S（1)),
1
echo$（subst,\',$（$（quiet）cmd_s（1）))';）
s（cmd_s（1)）;
scripts/basic/fixdep
$（depfile)
$@
'$（subst ss.s$ss,S(subst','\'',s（cmd_s（1))))
>S（@D)/.S(@F).tmp;
rm -f s（depfile);
mV-f $（@D)/.S(@F).tmp $(@D)/.S（@F).cmd)
译注1：这个函数已经停用、现在使用的是cc-option。
---
## Page 248
238
第十一章
此函数由一个if子句组成。它的测试细节相当难懂，不过很显然，如果依存文件应该
被重新产生，它就是非空值。标准的依存信息与文件的时间戳的改变有关。内核编译系
统还会为此项工作加人另一个技巧：使用了一个变化极大的编译器选项来控制各个组件
的结构和行为。为了确定命令行选项在编译期间适当发生了作用，makefile被实现成：
如果用于特定工作目标的命令行选项有所变化，相应的文件就会被重新编译。让我们来
看看这是如何办到的。
基本上，用来编译内核中每个文件的命令，会被存放在一个.cmd文件里。当有一个编译
动作被执行时，make会读取这个.cmd文件，并且比较当前的编译命令与上一次的命令。
如果有所不同，就会重新产生.cmd依存文件，这会使得目标文件被重新编译。.cmd文
举例来说，文件arch/i386/kernel/cpu/mtrr/if.c会产生如下的依存文件（经过删减）：
cmd_arch/i386/kerne1/cpu/mtrr/if.o:=gcc-Wp,-MD -;if.c
deps_arch/i386/kernel/cpu/mtrr/if.o:=\
arch/i386/kernel/cpu/mtrr/if.c\
arch/i386/kernel/cpu/mtrr/if.o:S(deps_arch/i386/kerne1/cpu/mtrr/if.o)
$(deps_arch/i386/kerne1/cpu/mtrr/if.o):
让我们回到if_changed_dep函数，送给strip的第一个参数，就是时间戳在工作目
标（的时间戳）之后的所有必要条件--如果有的话。送给strip的第二个参数，就
是非文件与空工作目标FORCE的所有必要条件。比较难理解的是最后两个filter-out
调用：
$（filter-out $（cmd_s（1)),s（cmd_s@))
$（filter-out $（cmd_s@),$(cmd_s(1)))
如果命令行选项有所改变，这两个调用或其中之一将会被扩展成非空字符串。宏
S（cmd_S（1））是当前的命令，而s（cmd_S@）将会是之前的命令，例如你刚才所看到
的cmd_arch/i386/kernel/cpu/mtrr/if.o变量。如果新的命令中包含额外的选项，
则第一个filter-out将会是空的，而第二个将会被扩展成新的选项。如果新的命令
中包含了较少的选项，则第一个命令将会包含被删除的函数，而第二个命令将会是个空
的。请注意，因为filter-out的参数可以是一串单词（每个单词会被视为独立的模式），
所以选项的次序可以改变，而且filter-out仍然可以准确区分出被新增或被删除的选
项。做得相当漂亮。
样可避免多行脚本在问题发生时破坏文件。对于简单的脚本，你可以使用另一个方法来
达到此效果，那就是用&&而不是分号来连接每条语句。