# 三、构建映像
在前一章中，我们详细解释了映像和容器处理，以及它的内务处理技术和技巧。除此之外，我们还描述了在 Docker 容器上安装软件包的标准过程，然后将容器转换为映像，以备将来使用和操作。本章与前几章有很大不同，包含在本书中是为了清楚地描述如何使用`Dockerfile`构建 Docker 映像，这是构建高可用性 Docker 映像的标准方式。利用`Dockerfile`是为软件开发社区构建强大映像的最有效方式。
我们将在本章中讨论以下主题:
*   Docker 的集成映像构建系统
*   `Dockerfile`语法的快速概述
*   `Dockerfile`建造说明
*   Docker 映像管理概述
## Docker 的集成映像构建系统
Docker 映像是容器的基本构件。这些映像可能是非常基本的操作环境，例如`busybox`或`ubuntu`，正如我们在前面几章对 Docker 进行实验时发现的那样。或者，映像可以为企业和云信息技术环境创建高级应用栈。正如我们在上一章中讨论的，我们可以通过从基础映像启动容器来手动创建映像，安装所有必需的应用，进行必要的配置文件更改，然后将容器作为映像提交。
作为一个更好的选择，我们可以求助于使用`Dockerfile`制作映像的自动化方法，这是一个基于文本的构建脚本，它包含一个序列中的特殊指令，用于从基础映像构建正确且相关的映像。`Dockerfile`中的顺序指令可以包括选择基本映像、安装所需的应用、添加配置和数据文件、自动运行服务以及将这些服务暴露给外部世界。因此，基于`Dockerfile`的自动构建系统显著简化了映像构建过程。它还在组织构建指令和可视化整个构建过程方面提供了很大的灵活性。
Docker 引擎在`docker build`子命令的帮助下紧密集成了这个构建过程。在 Docker 的客户端-服务器范例中，Docker 服务器(或守护进程)负责完整的构建过程，Docker 命令行界面负责传递构建上下文，包括将`Dockerfile`传递给守护进程。
为了让`Dockerfile`集成构建系统有一个潜行高峰，我们将在这一节为大家介绍一个基本的`Dockerfile`。然后，我们将解释将该`Dockerfile`转换为映像的步骤，然后从该映像启动容器。我们的`Dockerfile`由两条指令组成，如下图所示:
```
$ cat Dockerfile
FROM busybox:latest
CMD echo Hello World!!  
```
我们将对这两个指令进行如下讨论:
*   第一个指令是选择基础映像选择。在这个例子中，我们选择`busybox:latest`映像。
*   第二条指令是执行`CMD`命令，指令容器执行`echo Hello World!!`。
现在，让我们通过沿着`Dockerfile`的路径调用`docker build`来使用前面的`Dockerfile`生成一个 Docker 映像。在我们的示例中，我们将从存储`Dockerfile`的目录中调用`docker build`子命令，路径将由以下命令指定:
```
$ sudo docker build .  
```
发出上述命令后，`build`流程将从向守护程序发送构建上下文开始，然后显示如下所示的文本:
```
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM busybox:latest  
```
`build`过程将继续，完成后，将显示以下内容:
```
Successfully built 0a2abe57c325  
```
在前面的例子中，映像是用`0a2abe57c325`映像标识构建的。让我们使用这个映像来使用`docker run`子命令启动一个容器，如下所示:
```
$ sudo docker run 0a2abe57c325
Hello World!!  
```
很酷，不是吗？用很少的努力，我们已经能够制作一个以`busybox`为基础映像的映像，并且我们已经能够扩展该映像以产生`Hello World!!`。这是一个简单的应用，但是企业级映像也可以使用相同的技术来实现。
现在，让我们使用`docker images`子命令查看映像细节，如下所示:
```
$ sudo docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
  0a2abe57c325 2 hours ago 1.11 MB  
```
在这里，你可能会惊讶地看到映像(`REPOSITORY`)和`TAG`的名称已经被列为``。这是因为我们在构建该映像时没有指定任何映像或任何`TAG`名称。您可以使用`docker tag`子命令指定映像名称和可选的`TAG`名称，如下所示:
```
$ sudo docker tag 0a2abe57c325 busyboxplus  
```
另一种方法是使用`docker build`子命令的`-t`选项，在`build`时间内用映像名称构建映像，如下所示:
```
$ sudo docker build -t busyboxplus .  
```
由于`Dockerfile`中的指令没有变化，Docker 引擎将高效地重用具有`0a2abe57c325` ID 的旧映像，并将映像名称更新为`busyboxplus`。默认情况下，构建系统应用`latest`作为标签名称。可以通过在映像名称后面指定标签名称来修改此行为，方法是在它们之间放置一个`:`分隔符。这意味着，`:`是修改行为的正确语法，其中``是映像的名称，``是标签的名称。
我们再一次使用`docker images`子命令查看映像细节，您会注意到映像(存储库)名称为`busyboxplus`，标签名称为`latest`:
```
$ sudo docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
busyboxplus latest 0a2abe57c325 2 hours ago 
2.433 MB  
```
使用映像名称构建映像始终是推荐的最佳做法。
体验过`Dockerfile`的魔力后，我们将向您介绍`Dockerfile`的语法或格式，并在后续章节中解释十几条`Dockerfile`指令。
By default, the `docker build` subcommand uses `Dockerfile` located at the build context. However, with the `-f` option, the `docker build` subcommand allows us to specify an alternate `Dockerfile` at a different path or name.
## Dockerfile 语法的快速概述
在本节中，我们将解释`Dockerfile`的语法或格式。一个`Dockerfile`由指令、注释、解析器指令和空行组成，如下所示:
```
# Comment 
INSTRUCTION arguments 
```
`Dockerfile`的指令行由两部分组成，其中指令行以`INSTRUCTION`本身开始，后面是指令的参数。`INSTRUCTION`在任何情况下都可以写，换句话说就是不区分大小写。然而，标准的做法或惯例是使用*大写*以便与论据区分开来。我们再来看一下前面例子中`Dockerfile`的内容:
```
FROM busybox:latest 
CMD echo Hello World!! 
```
这里，`FROM`是以`busybox:latest`为自变量的指令，`CMD`是以`echo Hello World!!`为自变量的指令。
### 注释行
`Dockerfile`中的注释行必须以`#`符号开始。指令后的`#`符号被认为是一个论证。如果`#`符号前面有一个空格，那么`docker build`系统将认为这是一个未知的指令并跳过该行。现在，借助一个示例来理解前面的案例，以便更好地理解注释行:
*   有效的`Dockerfile`注释行始终以`#`符号作为行的第一个字符开始:
```
      # This is my first Dockerfile comment 
```
*   `#`符号可以是参数的一部分:
```
      CMD echo ### Welcome to Docker ### 
```
*   如果`#`符号前面有一个空格，那么构建系统会将其视为未知指令:
```
      # this is an invalid comment line 
```
`docker build`系统会忽略`Dockerfile`中的任何空行，因此鼓励`Dockerfile`的作者添加注释和空行，以大幅提高`Dockerfile`的可读性。
### 解析器指令
顾名思义，解析器指令指示`Dockerfile`解析器处理指令中指定的`Dockerfile`的内容。解析器指令是可选的，必须位于`Dockerfile`的顶部。目前，转义是唯一受支持的指令。
我们使用转义字符来转义一行中的字符，或者将一行扩展到多行。在类似 UNIX 的平台上，`\`是转义字符，而在 Windows 上，`\`是目录路径分隔符，```是转义字符。默认情况下，`Dockerfile`解析器认为`\`是转义字符，您可以在 Windows 上使用转义解析器指令覆盖它，如下所示:
```
# escape=` 
```
## 文件构建指令
到目前为止，我们已经研究了集成构建系统、`Dockerfile`语法和样本生命周期，其中我们讨论了如何利用样本`Dockerfile`生成映像，以及容器如何从映像中分离出来。在这一节中，我们将介绍`Dockerfile`指令，它们的语法，以及一些合适的例子。
### “从”指令
`FROM`指令是最重要的指令，是`Dockerfile`的第一条有效指令。它为构建过程设置基础映像。随后的说明将使用这个基本映像并在它的基础上构建。Docker 构建系统允许您灵活地使用任何人构建的映像。您还可以通过添加更精确和实用的功能来扩展它们。默认情况下，Docker 构建系统在 Docker 主机中查找映像。然而，如果在 Docker 主机中没有找到该映像，那么 Docker 构建系统将从公开可用的 Docker 集线器注册表中提取该映像。如果在 Docker 主机和 Docker 集线器注册表中找不到指定的映像，Docker 构建系统将返回错误。
`FROM`指令具有以下语法:
```
FROM [:|@] 
```
在前面的代码语句中，请注意以下几点:
*   ``:这是将用作基础映像的映像的名称。
*   ``或``:两个``和``都是可选属性，您可以使用标签属性或摘要属性来限定特定的 Docker 映像版本。如果标签和摘要都不存在，默认情况下会使用`latest`标签。
以下是带有`centos`映像名称的`FROM`指令示例:
```
FROM centos 
```
在前面的示例中，Docker 构建系统将隐式默认为`latest`标签，因为标签和摘要都没有显式添加到映像名称中。下面是带有`ubuntu`映像名称和`16.04`标签限定符的`FROM`指令的另一个示例:
```
FROM ubuntu:16.04 
```
接下来是带有`ubuntu`映像名称和摘要限定符的`FROM`指令的经典示例:
```
FROM ubuntu@sha256:8e2324f2288c26e1393b63e680ee7844202391414dbd48497e9a4fd997cd3cbf 
```
Docker 允许在单个`Dockerfile`中有多个`FROM`指令，以便创建多个映像。Docker 构建系统将提取`FROM`指令中指定的所有映像。Docker 不提供任何机制来命名借助多个`FROM`指令生成的单个映像。我们强烈反对在单个`Dockerfile`中使用多个`FROM`指令，因为可能会出现破坏性冲突。
### 维护的指令
`MAINTAINER`指令是`Dockerfile`的信息指令。这种指令功能使作者能够在映像中设置细节。Docker 对在`Dockerfile`中放置`MAINTAINER`指令没有任何限制。但是，强烈建议您将其放在`FROM`指令之后。
以下是`MAINTAINER`指令的语法，其中``可以是任何文本。但是，强烈建议您使用如下代码语法所示的映像、作者姓名和电子邮件地址:
```
MAINTAINER  