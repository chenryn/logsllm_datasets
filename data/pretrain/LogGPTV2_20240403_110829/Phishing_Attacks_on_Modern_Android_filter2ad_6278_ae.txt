### Password Manager and Verified Domain Names

To initiate the process, a password manager requests credentials. Subsequently, the password manager invokes `getVerifiedDomainNames()`, passing the received `Intent` as an argument. The sequence of operations performed by our API is illustrated in Figure 4.

1. **Retrieve Sender's Package Name**: The API first extracts the sender’s package name from the `Intent`.
2. **Extract Client’s App Signing Key**: Using the package name, the API retrieves the client’s app signing key.
3. **Extract Domain Names from Manifest**: The API then extracts the list of domain names from the client’s manifest file. This list should be specified according to the standard App Link Verification [29] and Digital Asset Links [19] protocols.
4. **Download and Verify DAL Files**: For each domain name, the API downloads the associated Digital Asset Links (DAL) file (`assetlinks.json`) and verifies that the requesting app (identified by its package name and the hash of its app signing key) is listed in it.
5. **Return Verified Domain Names**: The API returns the list of all domain names that pass the security checks. With these verified domain names, the password manager can safely query its internal database for associated credentials and send them back to the requesting client.

#### Sequence Diagram: `getVerifiedDomainNames()` API

```
Client
Credential Provider
Package Manager
Website
startActivityForResult(intent, ...)
getVerifiedDomainNames(Intent) : URL
getVerifiedDomainNames(Intent) : URL
(1) getPackageName(Intent) : String
packageName
(2) getSignature(String) : Signature
clientSignature
(3) getAssetStatements(String) : URL
targetWebsite
(4) downloadAssetLink(URL) : File
assetLinksJson
(5) checkAndGetDomain(String, Signature, File)
verifiedDomainName
queryDB(URL) : Credential
verifiedCredentials
onActivityResults(..., intentWithCredentials)
Figure 4: getVerifiedDomainNames() API sequence diagram
```

### Avoiding Side-Channel Vulnerabilities

We have observed that the current OpenYOLO client implementation exposes apps to side-channel attacks. Specifically, the current implementation uses a `Broadcast Intent` to request credentials from the credential provider, making other apps aware of the request. A malicious app can exploit this side-channel to infer that the user is about to log in to a specific account, which can facilitate phishing attacks [8, 9, 38]. Even though side channels are not necessary for phishing attacks [4], they do make such attacks easier.

To mitigate this, we recommend that the communication between the client and the credential provider remain confidential. Each client should have access to a configurable list of trusted password manager apps (e.g., Dashlane, LastPass). This list could be stored as pairs of package names and hashes of signing keys, similar to how browsers handle trusted certificates.

### Practicality of Adoption

Regardless of the proposed API, we were interested in assessing the ecosystem's readiness in terms of the information required to build a secure app-to-web mapping. Given that the current standard is Digital Asset Links (DAL), we analyzed the adoption rate by querying a dataset of domain names for their related `assetlinks.json` files. Our dataset included 8,821 domain names extracted from password managers, ensuring that these domain names host at least one page with a login form.

Surprisingly, only 8% (710/8,821) of the domain names hosted an associated DAL file, and only 2% (178/8,821) specified an Android app in accordance with Google documentation [23]. This low adoption rate is concerning, as password managers would face compatibility issues in securely implementing their solutions even if they were fully aware of the discussed problems. Google Smart Lock has addressed these issues by not relying on a fully automatic technique (developers need to manually fill out a Google form) and by supporting app-to-web sync only when a secure mapping exists. We argue that other password managers should follow a similar approach and warn users about potential problems when a secure app-to-web association cannot be established.

### Related Work

Phishing is a well-known problem that has received significant attention from the security community. In the context of mobile devices, several works have focused on task hijacking [9, 16, 38] and UI confusion [4, 8]. Our work builds on these insights, demonstrating how features implemented for convenience can make mobile phishing attacks more practical. Unlike previous assumptions, we do not require a malicious app to be already running on the victim’s device, and the user is not even required to type their credentials. Some works have proposed defense mechanisms for mobile phishing [8, 17], but these have not been widely adopted due to the invasive framework modifications they require. Another research direction is the automatic identification of app widgets that contain sensitive user information [7, 30, 36].

In the browser context, phishing has been extensively studied [10, 13, 32], with protection mechanisms often implemented as blacklists [27]. Tapjacking (also called clickjacking) is another class of UI-related attacks, where an attacker abuses the overlay system to lure users into performing security-sensitive operations [18, 37, 44]. Accessibility services can also be abused to bypass user interaction and perform UI-related attacks [5, 6, 18, 31, 34, 35, 43]. These attacks differ from phishing, as they focus on luring users to perform sensitive operations rather than leaking their credentials.

Recent works have focused on the security analysis of browser-based password managers [33, 42], finding that some are exploitable, allowing attackers to leak user credentials. Our work, however, focuses on mobile password managers and aims to uncover systemic design issues rather than classic implementation bugs.

Silver et al. [40] demonstrated several attacks aimed at retrieving passwords from in-browser password managers by exploiting their autofill policies. Prior works have shown how combining visible and hidden fields can trigger password managers to autofill, providing sensitive information to the attacker [11, 12]. This is similar to our experiment with hidden password `EditText` widgets.

For the security of Android password managers, Fahl et al. [15] is one of the few works in the area. They studied 21 popular password managers and found that some push users to "copy" their passwords to the clipboard, which has security implications. Modern mechanisms like accessibility and Autofill Service do not use the clipboard, but our paper shows that even these mechanisms are affected by security problems.

### Conclusions

In this paper, we conducted a security assessment of two recent Android features introduced for convenience. The number of design issues and vulnerable heuristics identified in leading password managers suggests that these insights are not well-understood by the community. The possibility of abusing Instant apps and hidden fields makes these attacks more problematic and practical. We believe that our proposed API would prevent such problems and force password managers to critically think about the challenges. While a technical solution exists, we believe that the entire community must push for change, which this paper hopes to inspire.

### Disclosure and Acknowledgments

We have responsibly disclosed our findings to the security teams of the affected password managers. We acknowledge their quick and professional handling of the matter. The affected vendors are in the process of deploying countermeasures. We also acknowledge Betty Sebright, whose work continues to motivate our research.

### References

[1] 2018. 1Password. https://1password.com/. (2018).
[2] 2018. Dashlane. https://www.dashlane.com/. (2018).
[3] 2018. LastPass. https://www.lastpass.com/. (2018).
[4] Efthimios Alepis and Constantinos Patsakis. 2017. Trapped by the UI: The Android Case. In RAID.
...
[44] Longfei Wu, Benjamin Brandt, Xiaojiang Du, and Bo Ji. 2016. Analysis of click-jacking attacks and an effective defense scheme for Android devices. 2016 IEEE Conference on Communications and Network Security (CNS) (2016), 55–63.