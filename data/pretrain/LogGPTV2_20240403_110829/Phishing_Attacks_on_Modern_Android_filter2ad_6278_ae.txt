password manager to request credentials. Then, the password man-
ager can invoke getVerifiedDomainNames(), passing the received
Intent as argument. At this point, our API performs a number of
steps, whose sequence diagram is depicted in Figure 4. First, it re-
trieves the sender’s package name from the Intent. The package
name is used to extract the client’s app signing key. Then, getVeri-
fiedDomainNames() extracts from the client’s manifest file the list
of domain names the app claims to have access to (this list should
Client
Credential Provider
Package Manager
Website
startActivityForResult(intent, ...)
getVerifiedDomainNames(Intent) : URL
getVerifiedDomainNames(Intent) : URL
(1) getPackageName(Intent) : String
packageName
(2) getSignature(String) : Signature
clientSignature
(3) getAssetStatements(String) : URL
targetWebsite
(4) downloadAssetLink(URL) : File
assetLinksJson
(5) checkAndGetDomain(String, Signature, File)
verifiedDomainName
queryDB(URL) : Credential
verifiedCredentials
onActivityResults(..., intentWithCredentials)
Figure 4: getVerifiedDomainNames() API sequence diagram
be specified according to the standard App Link Verification [29]
and Digital Asset Links [19] protocols). The API internally down-
loads, for each of these domain names, the associated DAL file
(assetlinks.json) and it verifies that the requesting app (package
name + hash of the app signing key) is listed in it. The API includes
in its return value to the password manager the list of all domain
names that satisfy such security checks. Given these domain names,
the PM can then safely query its internal database for associated
credentials and send them back to the requesting client.
Avoiding side-channel vulnerabilities. We have noticed that
the current OpenYOLO client implementation opens apps to side
channel attacks. In particular, the current implementation sends a
Broadcast Intent to request credentials from the credential provider,
thereby making all other apps aware of such request. A malicious
app can use this side-channel to infer that the user is about to login
in a specific account: this information can be used for the attacker
to know when to spawn its spoofed phishing UI [8, 9, 38]. Even if
side channels are not required to mount phishing attacks [4], they
do make them easier. For this reason, we argue that the communi-
cation between the client and the credential provider must remain
confidential—not only the content, but even the mere fact that this
communication is taking place. To this end, we believe that each
client should have access to a (configurable) list of trusted password
managers apps (e.g., Dashlane, LastPass, ...), so that explicit intents
can be used instead of broadcast intents. This list could be stored as
pairs of package names and hash of signing keys. This is analogous
to what browsers do with trusted certificates.
Practicality of adoption. Independently from the API we pro-
pose, we were interested in determining how ready the ecosystem
is in terms of information required to build a secure app-to-web
mapping. Given that the current standard is DAL, we set to ana-
lyze the adoption rate by querying a dataset of domain names for
their related assetlinks.json DAL file. As a dataset, we considered
all domain names from all mapping we extracted from the pass-
word managers we have inspected. This list is constituted by 8,821
domain names. Note that since they are extracted from password
managers, we know that these domain names host at least one page
with a login form, thus making them relevant to our analysis.
To our surprise, only 8% (710/8,821) of them host an associated
DAL file, and only 2% (178/8,821) specify an Android app in ac-
cordance with Google documentation [23]. This low adoption rate
is worrisome: password managers would have compatibility prob-
lems in securely implementing their solution even if they were fully
aware of the problems discussed in this paper. Google Smart Lock
has addressed these problems by not relying on a fully automatic
technique (developers need to manually fill a Google form) and by
supporting app-to-web sync only when a secure mapping exists.
We argue that the rest of password managers should follow a simi-
lar approach and warn the user about potential problems when a
secure app-to-web association cannot be established.
9 RELATED WORK
Phishing is a well-known problem and it has received the atten-
tion of the security community for several years. In the realm of
mobile devices, there have been a number of works focusing on
task hijacking [9, 16, 38], and UI confusion [4, 8]. We built on the
insights provided by these works and we have shown how features
implemented for convenience can make mobile phishing attacks
significantly more practical than what previously thought: we do
not assume a malicious app is already running on the victim’s de-
vice and, for the first time, the user is not even required to type her
credentials. Few works also proposed defense mechanisms for mo-
bile phishing [8, 17], which are unfortunately not finding adoption
due to the invasive framework modifications they require. Another
interesting research direction is the automatic identification of app
widgets that contain user’s sensitive info [7, 30, 36].
The problem of phishing has also been extensively studied in the
browser context [10, 13, 32]. In this context, protection mechanisms
are usually implemented in forms of blacklist [27].
Another class of UI-related attacks is tapjacking (also called click-
jacking). Some works have shown how an attacker can abuse the
overlay system to lure users into unknowingly perform security-
sensitive operations [18, 37, 44]. Other works show how accessibil-
ity service can be abused to bypass user interaction and perform
UI-related attacks [5, 6, 18, 31, 34, 35, 43]. These are very powerful
attacks, but they differ from phishing: they are about luring a user
to perform a sensitive operation, while phishing focuses on luring
them to leak their credentials.
A few recent works have focused on the security analysis of
browser password managers [33, 42]. In those works, the authors
conduct a security analysis of popular web-based password man-
agers, and some of them were found exploitable, allowing an at-
tacker to leak user credentials. The root-causes of the vulnerabilities
were ranging from logic and authorization mistakes to traditional
web vulnerabilities like CSRF and XSS. Our work, instead, focuses
on mobile password managers. We also note that we have not fo-
cused on identifying classic implementation bugs, but we aimed at
uncovering systemic design issues.
Silver et al. show several attacks aimed at retrieving passwords
from in-browser PMs, by exploiting their autofill policies [40]; the
most powerful attack they uncovered does not require any human
intervention and it allows to automatically auto-complete password
fields. Several prior works show how combining innocuous visi-
ble fields and sensitive invisible fields trigger PMs to autofill, and,
consequently, provide sensitive information to the attacker [11, 12].
This is similar to our experiment with hidden password EditText
widgets.
For what concern the security of Android password managers,
the work by Fahl et al. is one of the few in the area [15]: in this
paper, the authors studied 21 popular password managers and show
how password managers would somehow push users to “copy” their
passwords to their clipboard: this has security implications since the
device clipboard can be accessed by any app installed on the user’s
device. Interestingly, we note that password managers using a11y
or Autofill Service are not affected by these problems: passwords
shared via these “modern” features do not go through the clipboard.
However, our paper, unfortunately, shows that even these modern
mechanisms are affected by security problems as well.
10 CONCLUSIONS
In this paper, we carried out a security assessment of two recent
Android features, originally introduced in the name of convenience.
The number of design issues and the variety of vulnerable heuris-
tics that we have identified in leading password managers suggest
that the insights offered in this paper are not well-understood by
the community. The possibility of abusing Instant apps and hidden
fields make these attacks even more problematic and practical. We
believe that our proposed API would prevent this class of prob-
lems from being introduced and, at the very least, would force
password managers developers to critically think about the various
challenges. That being said, although a technical solution certainly
exists, we believe that password managers developers cannot solve
this problem alone, but there is the need of a push from the entire
community, which this paper hopes to inspire.
DISCLOSURE AND ACKNOWLEDGMENTS
We have responsibly disclosed our findings to the security teams of
the password managers we found vulnerable. We would like to ac-
knowledge their quick and professional handling of the matter. The
affected vendors are in the process of deploying countermeasures.
We would also like to acknowledge Betty Sebright: despite the pass-
ing of time, she and her team are still a significant motivating factor
for our research.
REFERENCES
[1] 2018. 1Password. https://1password.com/. (2018).
[2] 2018. Dashlane. https://www.dashlane.com/. (2018).
[3] 2018. LastPass. https://www.lastpass.com/. (2018).
[4] Efthimios Alepis and Constantinos Patsakis. 2017. Trapped by the UI: The
Android Case. In RAID.
[5] Yair Amit. 2016.
ble to Accessibility Clickjacking Exploits.
95-4-android-devices-susceptible-accessibility-clickjacking-exploits/. (2016).
95.4 Percent of All Android Devices Are Suscepti-
https://www.skycure.com/blog/
[6] Yair Amit. 2016. “Accessibility Clickjacking” — The Next Evolution in Android
Malware that Impacts More Than 500 Million Devices. https://www.skycure.
com/blog/accessibility-clickjacking/. (2016).
[7] Benjamin Andow, Akhil Acharya, Dengfeng Li, William Enck, Kapil Singh, and
Tao Xie. 2017. UiRef: analysis of sensitive user inputs in Android applications. In
WISEC.
[8] Antonio Bianchi, Jacopo Corbetta, Luca Invernizzi, Yanick Fratantonio, Christo-
pher Kruegel, and Giovanni Vigna. 2015. What the App is That? Deception and
Countermeasures in the Android User Interface. In Proc. of the IEEE Symposium
on Security and Privacy.
[9] Qi Alfred Chen, Zhiyun Qian, and Z Morley Mao. 2014. Peeking Into Your App
Without Actually Seeing It: UI State Inference and Novel Android Attacks. In
Proc. of the USENIX Security Symposium.
[10] N. Chou, R. Ledesma, Y. Teraguchi, D. Boneh, and J. C. Mitchell. 2004. Client-
side defense against web-based identity theft. In Proceedings of the 11th Annual
Network and Distributed System Security Symposium (NDSS).
[11] Mark Coppock. 2017.
and giving away your secrets.
browser-bug-can-fill-in-personal-information-in-hidden-fields/. (2017).
Your browser might be filling in hidden fields
https://www.digitaltrends.com/computing/
[12] Joost de Valk. 2013. Why you should not use autocomplete. https://yoast.com/
autocomplete-security/. (2013).
[13] Rachna Dhamija and J. D. Tygar. 2005. The Battle Against Phishing: Dynamic
Security Skins. In Proceedings of the Symposium On Usable Privacy and Security
(SOUPS). ACM, New York, NY, USA, 77–88. https://doi.org/10.1145/1073001.
1073009
[14] Artyom Dogtiev. 2018. Facebook Revenue and Usage Statistics. http://www.
businessofapps.com/data/facebook-statistics/. (2018).
[15] Sascha Fahl, Marian Harbach, Marten Oltrogge, Thomas Muders, and Matthew
Smith. 2013. Hey, You, Get Off of My Clipboard. In International Conference on
Financial Cryptography and Data Security. Springer.
[16] Adrienne Porter Felt and David Wagner. 2011. Phishing on Mobile Devices. In
Proc. of IEEE Workshop on Web 2.0 Security & Privacy (W2SP).
[17] Earlence Fernandes, Qi Alfred Chen, Justin Paupore, Georg Essl, J Alex Halder-
man, Z Morley Mao, and Atul Prakash. 2016. Android UI Deception Revisited:
Attacks and Defenses. In Proc. of Financial Cryptography and Data Security (FC).
[18] Yanick Fratantonio, Chenxiong Qian, Pak Chung, and Wenke Lee. 2017. Cloak
and Dagger: From Two Permissions to Complete Control of the UI Feedback
Loop. In Proceedings of the IEEE Symposium on Security and Privacy (S&P).
[19] Google. 2017.
Digital Asset Links.
digital-asset-links/v1/getting-started. (2017).
https://developers.google.com/
[20] Google. 2017.
OpenYOLO for Android.
https://openid.net/specs/
[21] Google. 2018. Accessiblity Service. https://developer.android.com/guide/topics/
[22] Google. 2018. Autofill Framework. https://developer.android.com/guide/topics/
openyolo-android-03.html. (2017).
ui/accessibility/services. (2018).
text/autofill. (2018).
[23] Google. 2018.
Enable automatic sign-in across apps and websites.
https://developers.google.com/identity/smartlock-passwords/android/
associate-apps-and-sites/. (2018).
[24] Google. 2018. Google Smart Lock. https://get.google.com/smartlock/. (2018).
[25] Google. 2018. Google Smart Lock - Associate apps and sites. https://developers.
google.com/identity/smartlock-passwords/android/associate-apps-and-sites.
(2018).
[26] Google. 2018. Keeper. https://keepersecurity.com/. (2018).
[27] Google. 2018. Safe Browsing. http://www.google.com/transparencyreport/
safebrowsing/. (2018).
[28] Google. 2018. Smart Lock for Passwords affiliation form. https://docs.google.
com/forms/d/e/1FAIpQLSc3FCn8ccGpgXd1jtLBVRlNJ6EhWQK50hNO5jT_
9nuqHI79pg/viewform. (2018).
[29] Google. 2018. Verify Android App Links. https://developer.android.com/training/
app-links/verify-site-associations/. (2018).
[30] Jianjun Huang, Zhichun Li, Xusheng Xiao, Zhenyu Wu, Kangjie Lu, Xiangyu
Zhang, and Guofei Jiang. 2015. SUPOR: Precise and Scalable Sensitive User Input
Detection for Android Apps. In USENIX Security Symposium.
[31] Yeongjin Jang, Chengyu Song, Simon P Chung, Tielei Wang, and Wenke Lee.
2014. A11y Attacks: Exploiting Accessibility in Operating Systems. In Proc. of
the Conference on Computer and Communications Security (CCS).
[32] E. Kirda and C. Kruegel. 2005. Protecting users against phishing attacks with
AntiPhish. In Proceedings of the Computer Software and Applications Conference
(COMPSAC), Vol. 1. 517–524 Vol. 2. https://doi.org/10.1109/COMPSAC.2005.126
[33] Zhiwei Li, Warren He, Devdatta Akhawe, and Dawn Song. 2014. The Emperor’s
New Password Manager: Security Analysis of Web-based Password Managers..
In USENIX Security Symposium. 465–479.
[34] Lookout. 2015.
install whatever apps it wants.
shedun-trojanized-adware/. (2015).
Trojanized adware family abuses accessibility service to
https://blog.lookout.com/blog/2015/11/19/
[35] Spandas Lui. 2016.
droid’s Beefed Up Security.
accessibility-service-helps-malware-bypass-androids-beefed-up-security/.
(2016).
Accessibility Service Helps Malware Bypass An-
http://www.lifehacker.com.au/2016/05/
[36] Yuhong Nan, Min Yang, Zhemin Yang, Shunfan Zhou, Guofei Gu, and Xiaofeng
Wang. 2015. UIPicker: User-Input Privacy Identification in Mobile Applications.
In USENIX Security Symposium.
[37] Marcus Niemietz and Jörg Schwenk. 2012. UI Redressing Attacks on Android
devices. Black Hat Abu Dhabi (2012).
[38] Chuangang Ren, Yulong Zhang, Hui Xue, Tao Wei, and Peng Liu. 2015. Towards
Discovering and Understanding Task Hijacking in Android. In Proc. of USENIX
Security Symposium.
[39] Ricardo MartÃŋn RodrÃŋguez. 2013. How to take advantage of Chrome aut-
ofill feature to get sensitive information. https://blog.elevenpaths.com/2013/10/
how-to-take-advantage-of-chrome.html. (2013).
[40] David Silver, Suman Jana, Dan Boneh, Eric Yawei Chen, and Collin Jackson.
2014. Password Managers: Attacks and Defenses. In USENIX Security Symposium.
449–464.
[41] Statista. 2018.
phones from 2009 to 2018.
global-mobile-phone-website-traffic-share/. (2018).
Percentage of all global web pages served to mobile
https://www.statista.com/statistics/241462/
[42] Ben Stock and Martin Johns. 2014. Protecting Users Against XSS-based Pass-
word Manager Abuse. In Proceedings of the 9th ACM symposium on Information,
computer and communications security. ACM, 183–194.
Malware may
bypass
accessibility
http://www.symantec.com/connect/blogs/malware-may-abuse-android-s-
accessibility-service-bypass-security- enhancements. (2016).
abuse AndroidâĂŹs
enhancements.
[43] Dinesh Venkatesan.
[44] Longfei Wu, Benjamin Brandt, Xiaojiang Du, and Bo Ji. 2016. Analysis of click-
jacking attacks and an effective defense scheme for Android devices. 2016 IEEE
Conference on Communications and Network Security (CNS) (2016), 55–63.
security
service
2016.
to