title:SODA: A System for Cyber Deception Orchestration and Automation
author:Md Sajidul Islam Sajid and
Jinpeng Wei and
Basel Abdeen and
Ehab Al-Shaer and
Md. Mazharul Islam and
Walter Diong and
Latifur Khan
SODA: A System for Cyber Deception Orchestration and
Automation
Md Sajidul Islam Sajid*, Jinpeng Wei*, Basel Abdeen†, Ehab Al-Shaer‡, Md Mazharul Islam*,
Walter Diong‡, Latifur Khan†∗
*University of North Carolina at Charlotte, Charlotte, NC 28223
†University of Texas at Dallas, Richardson, TX 75080
‡Carnegie Mellon University, Pittsburgh, PA 15213
*{msajid,jwei8,mislam7}@uncc.edu,{basel.abdeen,lkhan}@utdallas.edu,{ehabalshaer,walterd}@cmu.edu
ABSTRACT
Active Cyber Deception (ACD) has emerged as an effective proactive
cyber defense technique that can mislead adversaries by presenting
falsified data and allow opportunities for engaging with them to
learn novel attack techniques. Adversaries often implement their
attack techniques within malware and use it as the medium to steal
valuable information. Comprehensive malware analysis is required
to understand the malware behaviors at technical and tactical lev-
els to create the honey resources and appropriate ploys that can
leverage this behavior and mislead malware and APT adversaries.
This paper presents SODA, a cyber deception orchestration system
that analyzes real-world malware, discovers attack techniques, cre-
ates Deception Playbooks, a set of deception actions, and finally
orchestrates the environment to deceive malware. SODA extracts
Malicious Sub-graphs (MSGs) consisting of WinAPIs from real-
world malware and maps them to MITRE ATT&CK techniques.
This MSG-to-MITRE mapping describes how ATT&CK techniques
are implemented in malware and, as a result, guides the construc-
tion of appropriate deception actions. We conducted comprehen-
sive evaluations on SODA with 255 recent malware samples to
demonstrate end-to-end deception effectiveness. We observed an
average accuracy of 95% in deceiving the malware with negligible
overhead for specified deception goals and strategies. Furthermore,
our approach successfully extracted MSGs with a 97% recall and
our MSG-to-MITRE mapping achieved a top-1 accuracy of 88.75%.
More importantly, SODA can serve as a general purpose malware
deception factory to automatically produce customized deception
playbooks against arbitrary malware.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation.
∗Partial source code and demo can be found at: https://github.com/sajid36/soda-
orchestration-engine
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485918
KEYWORDS
Active Cyber Deception, Active Cyber Defense, Malware Analysis,
Text Mining, Threat Intelligence and NLP;
ACM Reference Format:
Md Sajidul Islam Sajid*, Jinpeng Wei*, Basel Abdeen†, Ehab Al-Shaer‡, Md
Mazharul Islam*, Walter Diong‡, Latifur Khan†. 2021. SODA: A System
for Cyber Deception Orchestration and Automation. In Annual Computer
Security Applications Conference (ACSAC ’21), December 6–10, 2021, Virtual
Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/
3485832.3485918
1 INTRODUCTION
Active cyber deception (ACD) has evolved as an effective and com-
plementary defense technique for overcoming the limitations of con-
ventional detect-then-prevent approaches. The basic idea of ACD
is to mask or falsify actual system configurations (e.g., keyboard
layout, IP address, and registry values) deliberately and actively
to create doubt and ambiguity in the adversary’s mind. Therefore,
ACD thwarts the adversary’s perception of the victim system and
decision-making processes. The current state of the art in cyber
deception relies primarily on designing and implementing high-
interaction decoy systems comprised of fake files, user accounts,
credentials, and other elements. However, the purpose of cyber
deception is beyond catching attackers in a controlled environment
[25, 37, 41, 46] rather it offers a broader spectrum of advantages.
An effective cyber deception can achieve 4D goals: (1) deflect ad-
versaries to false targets, (2) distort adversaries’ perception about
the environment, (3) deplete adversaries’ resources and (4) discover
adversaries’ motives, tactics and techniques [13].
Although cyber deception has been applied successfully in nu-
merous settings, existing deception approaches lack agility, robust-
ness, and automation. Furthermore, these approaches fall behind
with static deployment, configurations and easily distinguishable
from the real systems [21], which skilled attackers can quickly dis-
cover and circumvent [16, 26, 43, 45]. Existing deception techniques
are largely intended to thwart attackers at a certain stage of the kill-
chain phase. For example, some well-known deception techniques
use honeypots [17, 21, 41], honeyfiles [15, 44, 46], honeypatches
[18], honeybugs [38] and decoys [24] to mislead attackers during
the collection and credential access phase. On the other hand, others
employ malicious traffic redirection [31] to deter attackers during
the command and control phase. Only a few approaches consider
every kill chain phase [23, 24, 28]; however, they can not provide
customized deception plans to their users to create their own de-
ceptive playbook based on requirements. Network randomization
[12] and moving target defense [27, 29, 30] are other well-known
675ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sajid, et al.
deception strategies. Although these techniques have successfully
deceived the adversaries, they are limited to a certain phase of the
kill chain.
This paper addresses these limitations by introducing an au-
tonomous cyber deception system called SODA that provides de-
ception as a service and orchestrates a deceptive environment at
run-time. First, SODA automatically analyzes malware and extracts
malicious sub-graphs from the execution traces. A malicious sub-
graph (MSG) represents a sequence of WinAPI calls that work
together to perform a malicious task. Next, SODA maps these ex-
tracted MSGs to the MITRE ATT&CK framework to determine
the malware’s behaviors at the kill chain tactical level. Later, this
knowledge base is utilized to create the Deception Playbook, a set
of deception course-of-actions to be performed to deceive specified
malicious behavior with a given deception goal and strategy. Users
can weaponize their systems using these pre-built deception play-
book profiles or can create their own. Based on deception playbook
profile selection/creation, SODA provides deception as a service
where orchestration is performed automatically.
SODA advances the state of the art (e.g., [44]) by providing auto-
mated and dynamic orchestration. Dynamic orchestration requires
understanding the context of the malware execution and deploy-
ing corresponding deception ploys at run time. Furthermore, re-
searchers can utilize our extracted MSGs to develop better malware
detection systems by incorporating them as detection rules, and
the MSG-to-MITRE mapping approach bridges the gap between
malware traces and the MITRE ATT&CK framework. We imple-
mented and evaluated SODA with recent malware, primarily with
Information Stealers, Ransomware, and Remote Access Trojans
(RATs). We have experimentally confirmed the feasibility, accuracy
and scalability of our approach. Specifically, we make the following
contributions:
• We propose a dynamic security orchestration, automation,
and deception system, SODA, enabling users to orchestrate
deception ploys with appropriate strategies and goals dy-
namically.
• We propose an automated MSG extraction and MSG-to-
MITRE mapping, allowing SODA to understand malware be-
haviors at the run time to activate relevant deception ploys.
• We propose an embedded deception technique based on
API hooking, allowing SODA to execute deception ploys in
real-time.
• We evaluated SODA with recent malware to determine the
accuracy and the scalability of our approach. We observed
an accuracy of 95% in deceiving malware with negligible
overhead and deployment time. Furthermore, our approach
successfully extracted MSGs with a 97% recall value and
MSG-to-MITRE achieved a top-1 accuracy of 88.75%.
The remainder of the paper is organized as follows: In Section 2,
we discuss the threat model and assumptions. Section 3 explains
how MSG extraction and MSG-to-MITRE mapping are used to
develop deception playbooks offline. Section 4 presents how SODA
provides deception as a service in real-time. The outcomes of the
evaluation are presented in Section 5. Related work is discussed
in Section 6. Finally, limitations, future work and conclusions are
presented in Section 7.
Figure 1: Deception Playbook Creation
Figure 2: Our implemented approach that automates the
template code generation process (Rectangular shapes indi-
cate agents (scripts) capable of processing, while parallelo-
grams indicate input/output data for respective agents. In
terms of coloring, white color indicates existing tools (e.g.,
Cuckoo Monitor) and grey color indicates modules/agents
that we developed).
2 THREAT MODEL AND ASSUMPTIONS
We assume that the user of SODA has sufficiently representative
malware repositories in each major malware type (e.g., RATs, ran-
somware, and InfoStealers) to extract enough number of MSGs
(malicious sub-graphs), which in turn facilitate the creation of ef-
fective deception ploys against that malware type. Users can easily
obtain a repository of malware samples from public malware shar-
ing sites (such as VirusTotal [8] and MalShare [7]), which provide
both malware samples and their labels that can be used to infer
malware type. We assume that when the end user selects a pre-built
deception profile in real time, she anticipates the types of attacks
(e.g., ransomware) that the deception profile is designed for. If the
end user doesn’t know what type of malware will attack, she can
select deception ploys for all types of malicious behaviors (e.g.,
encryption and information stealing) and benefit from the built-in
deception ploy(s) whenever the malware invokes the correspond-
ing MSGs. As discussed in Section 4, we can make these kinds of
custom-built deception profiles free of errors.
3 DECEPTION PLAYBOOK CREATION
A single malware can possess multiple malicious behaviors. Each
of these malicious behaviors can be deceived in multiple ways
ATT&CK TechniqueBehaviorDescriptionMalware RepositoryAPI CallTracerMalwareExecutionTracesMSGExtractorMSG-to-BehaviorMappingMapped MSGsMSGExtractionMSG-to-BehaviorMappingDeception Playbook SynthesisDeception PlaybookCreationMSDN APIDescriptions of theMSGsDeceptionPloyCreationStrategies4D GoalsDeceptionFactoryEnd-PointDLLHoneyFactoryScriptsMalwareBehaviorsPloy 1Ploy 2Ploy 3Profile 1Ploy 4Ploy 5Ploy 6Profile 2.......Cuckoo MonitorPlugins (EXE, DLL files)OutputSandbox(API Call Tracer)Malware SamplesgExtractorList of UniqueWinAPIsTemplate Code GeneratorInputRead API definition fromMSDNGenerate Template Codes676SODA: A System for Cyber Deception Orchestration and Automation
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
depending on different deception goals and strategies. For instance,
suppose a malicious behavior of a malware is to steal a credential
file. In that instance, one way to deceive the malware is to provide
honey credentials in the form of honeyfile. Another way would be
to pretend the credential file doesn’t exist on the system. Each of
the actions is referred to as a Deception Ploy. Therefore, Deception
Ploys or simply ploys are the actions we can perform to deceive
malicious behaviors with given strategies and deception goals. If
a malware (m1) consists of behaviors: B1, B2 and B3 and T1, T2
and T3 are the ploys to deceive these behaviors respectively, then
Deception Playbook of m1, DP(m1) = {T1,T2,T3}. Therefore, we
can say, Deception Playbook is a set of deception ploys designed to
deceive a set of particular malicious behaviors.
The Deception Playbook Creation phase aims to create Decep-
tion Playbooks for given malware and store them so that if the
same/similar malware compromises our system in the future, we
can deceive it using the stored Deception Playbooks. The Deception
Playbook Creation phase can be divided into three parts: Malicious
Sub-graphs (MSGs) Extraction, MSG-to-MITRE Mapping and Decep-
tion Playbook Synthesis. Firstly, we extract MSGs from real-world
malware. Secondly, we map these extracted MSGs to MITRE tech-
niques as well as to our defined malicious behaviors. As MSGs are
the low-level implementation details of the malware, they might be
complicated or ambiguous for those who are not experts or familiar
with WinAPIs. Behaviors are the high-level description of the mal-
ware actions or capabilities. We perform MSG-to-MITRE mapping
to assist the users to understand what and how the malware is try-
ing to do malicious action and how the deception mechanism will
work against that action. Finally, in the Deception Playbook Syn-
thesis, we create deception ploys for different malware behaviors.
Then, we create and store Deception Playbook from the deception
techniques. Finally, we implement the Deception Factory, which
includes developing hooks, REST APIs and creating HoneyFactories
(HF) to perform the actions defined within Deception Playbooks.
The whole procedure of this phase is depicted in Figure 1 and
explained in the following sections.
3.1 Malicious Sub-graphs (MSG) Extraction
Malware has to call a sequence of WinAPIs to achieve a particular
malicious objective/goal/behavior. If each WinAPI in this sequence
is represented as a node and the data flow between the two WinAPIs
is represented as an edge, then this WinAPI sequence can be pre-
sented as a graph. These graphs are defined as malicious subgraphs
(MSGs). It is necessary to identify these MSGs from malware traces
to understand malware execution flow. These execution flows will
lead us to design an accurate deception plan. To extract MSGs, we
need an environment where we can run thousands of malware
and collect their execution traces. We build the API Call Tracer by
customizing Cuckoo Sandbox [3] and automating the process of
uploading malware, collecting traces, and extracting MSGs.
3.1.1 API Call Tracer. We use the sandbox technique to collect
malware execution traces. As MSGs are the first building block of
our system, our MSG extraction needs to be comprehensive, i.e., we
want our API Call Tracer to log all possible WinAPIs with all pa-
rameter values in the ideal scenario. Unfortunately, that will impact
the performance of both the API Call Tracer and the MSG Extractor.
Therefore, we choose the middle ground where the API Call Tracer
will have the maximum WinAPI coverage with a reasonable per-
formance overhead. Hence, we select only those WinAPIs that are
significant among the malware. To find the significant WinAPIs, we
leveraged gExtractor [15], which is a dynamic analysis tool that can
report all WinAPIs that are invoked by a given piece of malware.
We ran 1,000 representative malware samples using gExtractor and
identified 516 unique WinAPIs. Therefore, we decide to accommo-
date these 516 WinAPIs with all parameter values in the API Call
Tracer.
Our API Call Tracer is based on the Cuckoo sandbox, which
supports custom-defined APIs and parameters monitoring [2]. It
takes as input template codes for each WinAPIs to be monitored
and outputs a few plugin files (EXE and DLL files). However, we
still need to write the template codes for each WinAPI that we
want to monitor, which is non-trivial work. Therefore, we auto-
mated the process of template code generation. [2] provides rules
on how to generate template codes based on WinAPI definition
and monitoring criteria; we automate this code generation process
by implementing these rules as scripts. First, we provide a list of
WinAPIs to be monitored to our tool. For each WinAPI, our tool
visits the corresponding MSDN website, retrieves the WinAPI def-
inition. Now using the scripts and retrieved definitions, our tool
generates the necessary template codes. Our procedure to generate
template codes are depicted in Figure 2.
3.1.2 MSG Extractor. Once we run malware samples in the API
Call Tracer and collect traces, the next step is to use them for MSG
extraction. MSG extractor extracts MSGs from traces where node
denotes WinAPI and edge indicates the data flow between APIs.
Figure 3 shows an example trace generated through the API Call
Tracer. Please note, the traces depicted in Figure 3 are not sequen-
tial, rather picked from three different places of a single log file in
order to illustrate how the graph generation and extraction work.
From lines 1 to 3, one can see that the malware opens a registry
and performs a query and closes the registry once the query fin-
ishes. On lines 5 to 8, we can see the malware is listing out all
the running processes. On lines 10 to 16, the malware scans and
harvests credentials from the Google Chrome browser. In Figure 4,
G1, G2, and G3 are three API call graphs from lines 1 to 3, lines 5 to
8, and lines 10 to 16 in Figure 3, respectively. As demonstrated in
Figure 4, API calls are used to construct the node of a graph and the
arguments/parameters are utilized to connect two API calls based
on dependencies. For example, for lines 1 to 3, graph G1 is created
where nodes are labeled as RegOpenKey, RegQueryValue and Reg-
CloseKey, respectively. The value 0x000000bc of key_handle is used
to connect these three nodes. However, graphs can be created using
multiple dependencies too. For example, for lines 10 to 16, graph
G3 is formed where the first two nodes, FindFirstFile and CreateFile,
are connected using the filepath. However, the later six nodes are
connected using the handle value of 0x000000dc. If a WinAPI call is
followed by the same WinAPI call with the same parameter values,
the MSG extractor considers these multiple calls as one and gener-
ates only one node. In the case of G2, Process32Next is followed by
multiple Process32Next calls with the same parameter values; thus,
the MSG extractor omits the following calls and creates only one
677ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Sajid, et al.
Figure 3: Execution trace of a malware sample generate in Cuckoo Sandbox (N.B. The size of the parameter“Buffer" is large
hence denoted as “FileContent" instead of the original content)
Figure 5: MITRE techniques and APIs vector representation
extraction.
Figure 4: MSG generation from malware traces
Process32Next node. The MSG extractor extracts all these possible
malicious sub-graphs and stores them for MSG classification.
3.2 MSG Classifier
MSGs are low-level implementation of the malware, which needs
to be mapped to a higher-level representation, such as MITRE
ATT&CK techniques, so that we can identify the adversary’s ac-
tions and intentions. MSGs’ mapping to MITRE ATT&CK tech-
niques provides insight into the malware’s behaviors and goals,
thus enabling us to design deception ploys strategically.
MITRE ATT&CK is a publicly accessible, structured knowledge
base consist of adversary tactics and techniques that illustrate the
attack lifecycle of the adversary. Each MITRE ATT&CK technique
has a description that describes why the technique is executed,