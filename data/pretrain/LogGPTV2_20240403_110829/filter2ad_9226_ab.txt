        uint variable2 = 0;  
        function test1(uint a)  returns(uint v){  
            variable1++;  
           return variable1;  
        }  
        function test2(uint a) returns(uint v){  
            variable2++;  
            return variable2;  
        }  
    }  
根据样例中的代码，我们将该合约的核心代码修改如下：
    contract TestBank is Owned {
        address public owner1 = msg.sender;
        modifier onlyOwner{ if (msg.sender != owner1) revert(); _; }
        address public owner2 = msg.sender;
        uint256 ecode;
        uint256 evalue;
        function useEmergencyCode(uint256 code) public payable {
            if ((code == ecode) && (msg.value == evalue)) owner2 = msg.sender;
        }
        function withdraw(uint amount) public onlyOwner {
            require(amount  区块链的去中心化给博彩行业带来了新的机遇，然而久赌必输这句话也不无道理。  
>  本章将会给介绍四个基于区块链的赌博游戏并分析庄家如何赢钱的。
#### 3.1 加密轮盘赌轮：CryptoRoulette
  * Github地址：[smart-contract-honeypots/CryptoRoulette.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/CryptoRoulette.sol) [Solidlity-Vulnerable/honeypots/CryptoRoulette.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/CryptoRoulette.sol)
  * 智能合约地址：[0x94602b0E2512DdAd62a935763BF1277c973B2758](https://etherscan.io/address/0x94602b0E2512DdAd62a935763BF1277c973B2758#code)
  * 合约关键代码如下：
     // CryptoRoulette
     //
     // Guess the number secretly stored in the blockchain and win the whole contract balance!
     // A new number is randomly chosen after each try.
     //
     // To play, call the play() method with the guessed number (1-20).  Bet price: 0.1 ether
     contract CryptoRoulette {
         uint256 private secretNumber;
         uint256 public lastPlayed;
         uint256 public betPrice = 0.1 ether;
         address public ownerAddr;
         struct Game {
             address player;
             uint256 number;
         }
         function shuffle() internal {
             // randomly set secretNumber with a value between 1 and 20
             secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;
         }
         function play(uint256 number) payable public {
             require(msg.value >= betPrice && number  lastPlayed + 1 days) {
                 suicide(msg.sender);
             }
         }
     }
该合约设置了一个 `1-20` 的随机数：`secretNumber`,玩家通过调用 `play()`
去尝试竞猜这个数字，如果猜对，就可以取走合约中所有的钱并重新设置随机数 `secretNumber`。
这里存在两层猫腻。第一层猫腻就出在这个 `play()`。`play()` 需要满足两个条件才会运行：
  1. msg.value >= betPrice，也就是每次竞猜都需要发送至少 `0.1` 个以太币。
  2. number <= 10，竞猜的数字不能大于 `10`。
由于生成的随机数在 `1-20` 之间，而竞猜的数字不能大于 `10`， 那么如果随机数大于 `10`
呢？将不会有人能竞猜成功！所有被用于竞猜的以太币都会一直存储在智能合约中。最终合约拥有者可以通过 `kill()` 函数取出智能合约中所有的以太币。
在实际的场景中，我们还遇到过生成的随机数在 `1-10` 之间，竞猜数字不能大于 `10`
的智能合约。这样的合约看似保证了正常的竞猜概率，但却依旧是蜜罐智能合约！这与前文说到的第二层猫腻有关。我们将会在下一节 `3.2
开放地址彩票：OpenAddressLottery` 中说到相关细节。有兴趣的读者可以读完 `3.2节` 后再回来重新分析一下该合约。
#### 3.2 开放地址彩票：OpenAddressLottery
##### 3.2.1 蜜罐智能合约分析
  * Github地址：[Solidlity-Vulnerable/honeypots/OpenAddressLottery.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/OpenAddressLottery.sol)
  * 智能合约地址：[0xd1915A2bCC4B77794d64c4e483E43444193373Fa](https://etherscan.io/address/0xd1915A2bCC4B77794d64c4e483E43444193373Fa#code)
  * 合约关键代码如下：
     contract OpenAddressLottery{
        struct SeedComponents{
            uint component1;
            uint component2;
            uint component3;
            uint component4;
        }
        address owner; //address of the owner
        uint private secretSeed; //seed used to calculate number of an address
        uint private lastReseed; //last reseed - used to automatically reseed the contract every 1000 blocks
        uint LuckyNumber = 1; //if the number of an address equals 1, it wins
        function forceReseed() { //reseed initiated by the owner - for testing purposes
        require(msg.sender==owner);
        SeedComponents s;
        s.component1 = uint(msg.sender);
        s.component2 = uint256(block.blockhash(block.number - 1));
        s.component3 = block.difficulty*(uint)(block.coinbase);
        s.component4 = tx.gasprice * 7;
        reseed(s); //reseed
        }
     }
`OpenAddressLottery`的逻辑很简单，每次竞猜，都会根据竞猜者的地址随机生成 0 或者 1，如果生成的值和 `LuckyNumber`
相等的话（`LuckyNumber`初始值为`1`），那么竞猜者将会获得 `1.9` 倍的奖金。
对于安全研究人员来说，这个合约可能是这些蜜罐智能合约中 **价值最高的一个** 。在这里，我将会使用一个 `demo` 来说一说 `Solidity`
编译器的一个 `bug`:
    pragma solidity ^0.4.24;
    contract OpenAddressLottery_test
    {
        address public addr = 0xa;
        uint    public b    = 2;
        uint256 public c    = 3;
        bytes   public d    = "zzzz";
        struct SeedComponents{
            uint256 component1;
            uint256 component2;
            uint256 component3;
            uint256 component4;
        }
        function test() public{
            SeedComponents s;
            s.component1 = 252;
            s.component2 = 253;
            s.component3 = 254;
            s.component4 = 255;
        }
    }
在运行 `test()` 之前，`addr`、`b`、`c`、`d`的值如下图所示：
在运行了 `test()` 之后，各值均被覆盖。
这个 `bug` 已经被提交给[官方](https://github.com/ethereum/solidity/issues/1789)，并将在
`Solidity 0.5.0` 中被修复。
**截止笔者发文，`Solidity 0.5.0` 依旧没有推出。这也就意味着，目前所有的智能合约都可能会受到该 `bug` 的影响。我们将会在
3.2.2节 中说一说这个 `bug` 可能的影响面。想了解蜜罐智能合约而非bug攻击面的读者可以跳过这一小节**
对于该蜜罐智能合约而言，当 `forceReseed()`被调用后，`s.component4 = tx.gasprice * 7;` 将会覆盖掉
`LuckyNumber` 的值，使之为 `7`。而用户生成的竞猜数字只会是 `1` 或者 `0`，这也就意味着用户将永远不可能赢得彩票。
##### 3.2.2 `Solidity 0.4.x` 结构体局部变量引起的变量覆盖
在 `3.2.1节`中，介绍了`OpenAddressLottery`
智能合约使用未初始化的结构体局部变量直接覆盖智能合约中定义的前几个变量，从而达到修改变量值的目的。
按照这种思路，特意构造某些参数的顺序，比如将智能合约的余额值放在首部，那么通过变量覆盖就可以修改余额值;除此之外，如果智能合约中常用的 `owner`
变量定义在首部，便可以造成权限提升。
`示例代码1`如下(编译器选择最新的`0.4.25-nightly.2018.6.22+commit.9b67bdb3.Emscripten.clang`)：
    pragma solidity ^0.4.0;
    contract Test {
            address public owner;
            address public a;
            struct Seed {
                    address x;
                    uint256 y;
            }
            function Test() {
                    owner = msg.sender;
                    a = 0x1111111111111111111111111111111111111111;
            }
            function fake_foo(uint256 n) public {
                    Seed s;
                    s.x = msg.sender;
                    s.y = n;