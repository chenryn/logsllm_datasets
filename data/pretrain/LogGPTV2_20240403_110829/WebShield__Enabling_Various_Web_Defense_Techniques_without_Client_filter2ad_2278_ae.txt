First, we measure the time difference between when a user
presses the button to start the game and when the game
is started. Next, we measure the time difference between
when a user moves a mouse and when the visual effect is
shown on the screen. Third, time delay is the time differ-
ence between when the user drops a piece and when the
piece is shown on the screen. Lastly, how long it takes for
the game’s end to be shown when someone has four con-
nected pieces, It is generally acceptable that delays under
200ms are tolerable for an interactive application [15]; As
shown in table 3, the delay incurred in our case is much
smaller. Therefore, we believe our scheme is good for even
high interactive web applications.
6.6 Scalability
WebShield is designed to be used in an enterprise net-
work such as a company, a government agency or a uni-
versity. We consider the sandbox creation speed and sand-
box memory usage for the scalability of WebShield. Sand-
box creation speed will inﬂuence how many new users that
that can be supported in a short amount of time because a
new sandbox is created for each new user. This depends
on the startup time of a sandbox, which is 0.035 seconds
per sandbox in our system. The total number of sandboxes
will inﬂuence the total amount users we can support because
each sandbox will take a certain amount of memory. In our
system, one sandbox takes 100MB and one page takes 10-
25MB. We use a sample of one day of trafﬁc in Northwest-
ern university to observe the scalability of our system.
At Northwestern university, there are 39 new web users
on average in one second and at most 82 new web users in
one second. With our sandbox creation speed, 28 sandboxes
Exploit Description
Behavior Monitor
Signature Detection
1
2
3
4
5
6
7
8
CVE-2009-0945: SVG null-pointer dereference
CVE-2009-1690: Use-after-free vulnerability
CVE-2009-1698: Incorrectly parsing attr()
CVE-2009-1700: Local ﬁle theft
Y
Y
N
Y
WebKit Bug 19588:Crash doing open on destroyed window Y
Cross-site scripting across frames
Opening an arbitrary amount of windows
Parsing arbitrarily large integer
Y
N
Y
N
Y
Y
Y
N
Y
Y
Y
False Positive
0/500
1/500
Table 4. Exploit Description and Detection Results(Y means Can Detect, N means the Opposite)
are created per second. Using the maximum amount of new
users, we need 3 computers to support that number of new
users. For some margin, no more than ﬁve computers are
needed to sustain the new user rate.
From our measurement, we ﬁnd Northwestern Univer-
sity has 2720 live web users on average, and each user vis-
its ﬁve websites per minute on average. We assume we use
16GB memory machines to support users. Assuming the
OS uses 2GB of the memory, one sandbox uses 100MB of
memory, and ﬁve webpages count for about 100MB, each
machine can sustain 70 users(sandboxes). Thus, we will
need 39 machines for a middle size enterprise network such
as the campus network of Northwestern university.
Sandbox creation speed is not a big problem for our sys-
tem because we use process-level sandboxes, but sandbox
memory usage is the system bottleneck. However, we be-
lieve less than 40 machines are moderate for an enterprise
network.
6.7 Drive(cid:173)By(cid:173)Download Evaluation
To demonstrate the usefulness of WebShield, we also
evaluate the detection accuracy of two detection engines
when pluging them in WebShield framework.
As there is no good source of publicly available or pop-
ular WebKit exploits, several exploits were written target-
ing both real, reported vulnerabilities (such as those with a
CVE number) and fake one that were introduced into the
WebKit engine by modifying its code. With the four real
and four fake exploits, listed in Table 4, targeting cross-site
scripting, denial of service, and other kinds of attacks, the
detection engine was evaluated on its success in detecting
the exploits.
There are two components to the detection engine: the
behavior monitor and the signature engine. The behavior
monitor keeps track of potentially suspicious behavior such
as ﬁle accesses, new processes, and browser termination.
The signature engine resides inside the web browser and
uses regular expressions along with signatures to detect sus-
picious webpages. When either or both of the components
report something, the webpage is considered to have an ex-
ploit.
The results of the evaluation are in Table 4. As seen
in the table, the behavior monitor and the signature engine
both detected several of the exploits. Though each compo-
nent by itself was not able to detect all the exploits, consid-
ering the results from both components led to a full cover-
age of the exploits.
To test for false positives,
the detection engine was
tested on the index pages of the top 500 websites listed on
Alexa [1], which are supposedly benign. The procedure
to evaluate the effectiveness of the engine on the exploits
was also used on these top ranked pages to determine if any
of these were incorrectly determined to be malicious web-
pages. As seen in Table 4, the behavior monitor did not con-
sider any of those pages suspicious and the signature engine
considered only one of those pages as malicious. Further-
more, the signature engine may be improved by using better,
more accurate signatures.
7 Related Work
7.1 Web Attack Defense Techniques
Host-based approaches: Many techniques have been
proposed for defending web attacks. The majority of
them are host-based approaches which require browser or
client-side modiﬁcation [12, 14, 16, 17, 19, 26, 30, 34, 36].
Several research efforts propose to modify the client
browser architecture for better security protection [16, 17,
32, 35]. At a high level,
they propose to use proper
sandboxes to isolate different instances (browser modules,
browser tabs, principals etc.), which require browser modi-
ﬁcation. Their design can be easily deployed in our shadow
browsers, which will help improve the security of web
users. WebShield is different in that it is not a new browser
architecture, but rather a framework for deploying security
defense techniques without client modiﬁcation.
There are also many works proposed for different
types of web attacks. HoneyMonkey [36] requires a BHO
(browser helper object) and VM monitors for behavior-
based drive-by-download detection. Barth et al. propose
to add an origin header for preventing cross site request
forgery [14].
In [12], a reference monitor is proposed
to solve cross origin JavaScript capability leaks. Both
DSI [26] and JavaScript Taint [34] require taint checking in
JavaScript engines to prevent cross side scripting attacks.
All these cases require client side deployment. WebShield
can help deploy them at a middlebox without client side
modiﬁcation.
Middlebox Approaches: Middlebox approaches are an
alternative to host based approached for web defense. Exist-
ing middleboxes focus on drive-by-download attack detec-
tion. SpyProxy [23] and BrowserShield [31] are two such
examples. We have compared with these two in Section 2.1.
Malicious URI Labeling: Many industrial vendors, such
as Google [28], McAfee [6], and BlueCoat [2], attempt
to statically label URIs as either benign or malicious us-
ing [36] or similar approaches. Two major problems exist
with this approach. First, similar to SpyProxy, the detec-
tion is static, and thus can easily be bypassed with non-
determinism or user inputs. Second, attackers can leverage
URI polymorphism to make URI based detection harder.
We believe that WebShield and URI labeling approaches
can potentially be combined together. The URI labeling can
increase efﬁciency while our approach can improve the ac-
curacy.
7.2 Remote Browsing
OBML) in a middlebox before transferring it to the Opera
Mini client on smartphones. Opera Mini is designed for
a totally different purpose and requires client-side modiﬁ-
cations. Ripley [20] executes JavaScript at the client and
server sides in parallel in order to validate the correctness
of the application. Their goal is different from ours in that
they aim to prevent malicious users from tampering with
the web application logic. Co-browsing [21] also investi-
gates different options for synchronizing two different web
browser instances. Due to an entirely different goal they
choose a quite different approach by synchronizing the in-
puts to JavaScript functions. We also need to synchronize
the shadow browser with the client browser. However, be-
cause we want to prohibit JavaScript execution on the client
side, we choose a different way for synchronization.
8 Discussion
Privacy Issues: Similar to many security checking de-
vices, WebShield needs to check the content related to
users, primarily the webpages visited by users. We believe
WebShield does not raise more privacy issues than tradi-
tional network based intrusion detection/prevention systems
(NIPSes), which are currently deployed by most enterprise
networks. Similar to NIPSes, WebShield examines the user
related content through automated programs and ﬁlters out
the attacks automatically. Therefore, we believe deploying
WebShield in enterprise networks will not bring new pri-
vacy issues.
Dealing with User Scripts: Bookmarklets and Grease-
monkey [3] allow the user to run custom JavaScript on a
webpage to do some tasks or change the appearance of the
webpage. Since these tools interact with the page’s DOM in
some way, and our approach keeps the original DOM intact,
the behavior of user scripts remains unchanged.
Malkhi et al. [22] propose to run Java Applets in a re-
mote playground and proxy the visual effect back to client
browsers. FlashProxy [25] aims to rewrite Flash to an
AJAX JavaScript program to display the same visual effect
without requiring ﬂash support on client browsers. Our ap-
proach is similar to their in philosophy; it works by sending
the visual effect in the form of DOM updates back to client
browsers. However, to design a proxy for the visual effects
of webpages has its own challenges, such as the aforemen-
tioned object coherence problem. Moreover, by incorporat-
ing these two approaches, we can have a more complete de-
sign which can even handle mobile code in plug-ins. Opera
Mini [7] is one of the most widely deployed systems that
have browsers inside middleboxes. Opera Mini partially
renders a webpage and convert to a internal format (e.g.,
Dealing with Multiple Brands and Versions of Browsers:
Different users may favor different browsers. A deployed
system should support all major brands of browsers. There-
fore, WebShield need to have shadow browsers of major
brands of browsers, such as IE, Firefox and Chrome. Most
modules of shadow browsers are independent from the ac-
tual browser. The browser dependent module is mainly a
DOM monitor which can access DOM nodes and events
with they are created.
Note that only the most recent versions of browsers need
to be supported in the shadow browser collection. Known
vulnerabilities are detected by policy-based engines, which
check the DOM updates and cannot be bypassed regard-
less of whether the versions of shadow browsers and client
browsers match exactly. Behavior engines are mainly used
to detect zero day vulnerabilities. It is very rare to have zero
day vulnerabilities only in an older version but not in the
current version of browsers. We therefore need to support
only recent versions of a handful of major browsers.
Limitations: One major limitation of our approach is: if
the event triggered DOM updates happen too frequently, our
remote execution potentially cannot keep up with updating
the webpage on time. Given the RTT of enterprise is low,
only extremely high event streams will cause such prob-
lems. We examined top 100 sites from Alexa. None of them
triggered such high event streams. Therefore, we believe for
most web pages our scheme will not have a problem.
Moreover, our current implementation does not intercept
the HTTPS protocol. Currently, some commercial NIPSes
have already done that.
In theory, if the enterprise can
get the users’ private keys, or the enterprise fakes the web
server’s key in the middle, this can be done. Therefore, we
can work in a similar way as these NIPSes for HTTPS.
Our current prototype offers limited protection against
malicious plugin content. All the attacks which target data-
only plugins such as video codecs, can be detected accu-
rately using WebShield since the data will be examined in
the shadow browser. Both policy and behavior based ap-
proaches can work in such cases. However, some plugins
such as Flash have their own script languages. With scripts,
an attacker can potentially hide they malicious intent from
shadow browsers by using non-determinism or user input.
To counter this type of attacks, we need to intercept the
ﬂash content in a way similar to what we do for the web-
pages. Flash rewriting has been used by FlashProxy [25] in
the past, though for a different purpose. it is possible to ex-
tend their technique to transfer visual effects of Flash back
to the client browser and run ActionScript (Flash scripts)
inside shadow browsers. Although in theory there are a lot
of different plugins, the popular ones are limited. Covering
popular plugins can already protect most web users. It is
our future work to design scalable solutions for supporting
a large number of plugins.
9 Conclusion
Detecting attacks in dynamic webpages has been a
great challenge, especially when the web content is non-
deterministic. Existing host-based solutions suffer from
deployment problems due to slow user adoption, while
the current middlebox approaches can only accommodate
certain limited security protection mechanisms.
In this
paper, aiming to design a general middlebox framework
that can enable different security protection mechanisms,
we developed four design principles and, based on them,
designed WebShield, a general secure proxy with shadow
browsers.
In WebShield, we ensure no untrusted scripts
can be run on client browsers, and thus close the door
for attacks that employ non-determinism or user input to
bypass detection. This way, we can ﬁlter out malicious
parts of a web page while rendering the rest of the page
at the user-side. Evaluation shows that WebShield can be
applied to an enterprise network to prevent attacks, even
those with non-deterministic behavior or involving user
interaction, and protect the end-user browsers from both
known and unknown vulnerabilities.
10 Acknowledgements
We would like to thank Shamiq Islam for his con-
tribution in the early stage of this project. This work
was supported by US NSF CNS-0831508, China NSFC
(60625201, 60873250, 61073171), China 973 project
(2007CB310701),
and Tsinghua University Initiative
Scientiﬁc Research Program. Opinions, ﬁndings, and
conclusions are those of the authors and do not necessarily
reﬂect the views of the funding sources.
References
[1] Alexa Top Sites.
http://www.alexa.com/
topsites/global.
[2] Blue Coat Secure Web Gateway.
http://www.
bluecoat.com.
[3] Greasemokey Add-on for Firefox. https://addons.
mozilla.org/en-US/firefox/addon/748/.
[4] JavaScript Games. http://javascript.internet.
com/games/.
[5] JSON. http://json.org/.
[6] McAFee SiteAdvisor. http://www.siteadvisor.
com/.
[7] Opera Mini.
http://en.wikipedia.org/wiki/
Opera_Mini.
[8] Research:
1.3 million malicious ads viewed daily.
http://www.zdnet.com/blog/security/
research-13-million-malicious-ads-viewed-daily/
6466.
[9] TC. http://pupa.da.ru/tc/.
[10] The Webkit Open Source Project. http://webkit.
org/.
[11] W3C Document Object Model. http://www.w3.org/
DOM/.
[12] A. Barth, U. Berkeley, J. Weinberger, and D. Song. Cross-
Origin JavaScript Capability Leaks: Detection, Exploita-
tion, and Defense. In Proc. of USENIX Security Symposium,
August 2009.
[13] A. Barth, J. Caballero, and D. Song. Secure content sniff-
ing for web browsers, or how to stop papers from reviewing
themselves.
In Proc of IEEE Symposium on Security and
Privacy, 2009.
[14] A. Barth, C. Jackson, and J. C. Mitchell. Robust Defenses
for Cross-Site Request Forgery. In Proc of USENIX Security
Symposium, 2009.
[36] Y.-M. Wang, D. Beck, X. Jiang, and R. Roussev. Automated
web patrol with strider honeymonkeys: Finding web sites
that exploit browser vulnerabilities. In Proc. of NDSS, 2006.
[15] M. Claypool and K. Claypool. Latency and player actions
in online games. Commun. ACM, 49(11):40–45, 2006.
[16] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen.
A safety-oriented platform for web applications. In Proc of
IEEE Symposium on Security and Privacy, 2006.
[17] C. Grier, S. Tang, and S. King. Secure web browsing with
the OP web browser. In Proc. of IEEE Symposium on Secu-
rity and Privacy, 2008.
[18] R. Hansen. Xss (cross site scripting) cheat sheet esp: for
ﬁlter evasion, 2008. http://ha.ckers.org/xss.
html.
[19] J. Howell, C. Jackson, H. J. Wang, and X. Fan. Mashupos:
operating system abstractions for client mashups. In HotOS,
2007.
[20] B. L. K.Vikram, Abhishek Prateek. Ripley: Automatically
securing web 2.0 applications through replicated execution.
In CCS, 2009.
[21] D. Lowet and D. Goergen. Co-browsing dynamic web
pages. In Proc of WWW, 2009.
[22] D. Malkhi and M. K. Reiter. Secure execution of java ap-
plets using a remote playground. IEEE Trans. on Software
Engineering, 26(12), 2000.
[23] A. Moshchuk, T. Bragin, D. Deville, S. D. Gribble, and
H. M. Levy. Spyproxy: execution-based detection of ma-
licious web content. In USENIX Security, 2007.
[24] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy.
A crawler-based study of spyware on the web. In Proc. of
NDSS, 2006.
[25] A. Moshchuk, S. D. Gribble, and H. M. Levy. Flashproxy:
transparently enabling rich web content via remote execu-
tion. In Proc. of ACM MobiSys, 2008.
[26] Y. Nadji, P. Saxena, and D. Song. Document structure in-
In
tegrity: A robust basis for cross-site scripting defense.
Proc. of NDSS, 2009.
[27] NSA. SELinux. http://www.nsa.gov/research/
selinux/.
[28] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose.
All your iframes point to us. In USENIX Security, 2008.
[29] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and
N. Modadugu. The ghost in the browser: analysis of web-
based malware. In USENIX HotBots, 2007.
[30] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle: A
In
defense against heap-spraying code injection attacks.
USENIX Security, 2009.
[31] C. Reis, J. Dunagan, H. Wang, O. Dubrovsky, and S. Es-
meir. Browsershield: Vulnerability-driven ﬁltering of dy-
namic html. In Proc. of OSDI, 2006.
[32] C. Reis and S. D. Gribble. Isolating web programs in modern
browser architectures. In Proc. of Eurosys, 2009.
[33] M. Ter Louw and V. Venkatakrishnan. Blueprint: Precise
browser-neutral prevention of cross-site scripting attacks. In
Proc. of IEEE Symposium on Security and Privacy, 2009.
[34] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel,
and G. Vigna. Cross-site scripting prevention with dynamic
data tainting and static analysis. In Proc. of NDSS, 2007.
[35] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choud-
hury, and H. Venter. The multi-principal os construction of
the gazelle web browser. In Usenix Security, 2009.