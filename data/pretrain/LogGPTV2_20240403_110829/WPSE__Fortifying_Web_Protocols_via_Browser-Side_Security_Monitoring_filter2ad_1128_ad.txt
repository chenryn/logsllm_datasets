### Achieving Security Guarantees with a Compromised Client

To achieve the same security guarantees in the presence of a compromised client (e.g., due to XSS attacks), our monitor ensures that all attacks, which would not occur with an ideally behaving client, are mitigated. These security guarantees are limited to the specific protocol run and its associated secrets. For instance, the monitor can ensure the secure execution of the OAuth 2.0 protocol, even if scripts are compromised, leading to successful authentication and session cookie setting. However, the monitor cannot prevent the leakage of this session cookie by a malicious script after the protocol run is complete. Therefore, additional security measures, such as the HttpOnly attribute for cookies, or extending the protocol specification to include subsequent application steps, may be necessary.

### Formal Analysis and Theorem Overview

Our theoretical framework is based on the applied pi calculus [37], a widely used process calculus for the formal analysis of cryptographic protocols, supported by automated verifiers like ProVerif [10]. Bansal et al. [6] have recently demonstrated how ProVerif can be leveraged for the analysis of web protocol specifications, including OAuth.

**Figure 4: Visual Description of Theorem 1**

We provide an overview of the theorem in Figure 4. We assume that the protocol specification has already been proven secure in a setting where the browser-side application is well-behaved and follows the protocol (Sorig). Our theorem states that this security carries over to a setting (Snew) where the browser-side application is under the attacker's control (e.g., due to XSS attacks or code bugs), but the communication between the browser and other protocol parties is mediated by our monitor.

- **Sorig**: Includes a browser B and an uncompromised application App, exchanging messages via private (green) channels bain, baout. Communication between the browser B and the network N occurs via public (red) channels bsin, bsout, observable and infiltratable by the network attacker.
- **Snew**: The application is compromised: channel bain for requests from the application to the browser is made public, allowing arbitrary requests by the attacker. Channel baout, modeling responses from the browser to the app, leaks all messages, indicating that the compromised application might leak these secrets. The compromised application can communicate with the network attacker, who can use the learned information to attack the protocol.

**Theorem 1 (Monitor Correctness)**: Let processes App, N, B, and M be defined in Sorig, and let P be a property on execution traces against a network attacker. Assume the following conditions hold:

1. **(H1)**: Sorig satisfies P.
2. **(H2)**: The set of requests/responses on bsin, bsout allowed by M is a subset of those produced by Sorig.
3. **(H3)**: M does not leak any secrets (i.e., messages initially unknown to the attacker) on baout.

Then it also holds that:

- **(C)**: Snew satisfies P.

**Assumptions**:
- **(H1)**: The process in Sorig satisfies a certain trace property, modeled by requiring that each partial execution trace of Sorig in parallel with an arbitrary network attacker satisfies the trace predicate P.
- **(H2)**: The requests/responses allowed by the monitor M on channels bsin, bsout are a subset of those possibly performed by Sorig, ensuring the monitor allows the intended protocol flow and filters out deviating messages.
- **(H3)**: The monitor M does not leak any secrets with its outputs on channel baout, ensuring that the attacker's knowledge does not increase.

These assumptions ensure that the monitored browser behaves as the ideal protocol participant in Sorig towards the network and prevent the attacker from gaining additional knowledge via a compromised application that could enable attacks over the network.

### Discussion

Our formal result is significant for several reasons:
1. It allows us to establish formal security guarantees in a stronger attacker model by checking semantic conditions on the monitor, without re-proving the protocol's security with the monitor in place.
2. The theorem demonstrates that enforcing the three security properties identified in Section 2 (compliance with the intended protocol flow, data integrity, and message secrecy) is sufficient to protect web protocols from a large class of browser-side bugs and vulnerabilities.
3. The hypotheses of the theorem are usually easy to check. For example, in the case of OAuth, the formal analysis in [6] confirms (H1). The automaton in Figure 2 ensures (H2) by only allowing the intended protocol flow, and (H3) is validated as no secrets can leak.

### Related Work

#### Analysis of Web Protocols
- Gross et al. [22] highlighted the differences between web protocols and traditional cryptographic protocols, presenting a model of web browsers and applying it to password-based authentication.
- Armando et al. [4] analyzed the SAML protocol and a variant implemented by Google, exposing an authentication attack.
- Akhawe et al. [2] developed a core model of the web infrastructure using the Alloy framework, finding a login CSRF attack in the WebAuth protocol.
- Bansal et al. [6] successfully applied the WebSpi library for ProVerif to find attacks in existing web protocols, including OAuth 2.0 and cloud storage protocols.
- Fett et al. [19] developed a comprehensive model of the web infrastructure and applied it to the analysis of various web protocols, including BrowserID, SPRESSO, and OAuth 2.0.

#### Security Automata
- Schneider [40] introduced security automata, which can stop program execution when a policy violation is detected.
- Ligatti et al. [29] extended security automata to include edit automata, which can suppress and insert individual program actions.
- Yu et al. [49] used edit automata to express security policies for JavaScript code.
- Guha et al. [24] used finite state automata to encode web security policies, focusing on Ajax applications and server-side proxies.

#### Browser-Side Defenses
- Our work extends web browsers with stronger security policies, specifically targeting web protocols.
- Information flow control in web browsers is a hot topic, with proposals like CSP and HSTS.
- Academic proposals include Allowed Referrer Lists, SessionShield, Zan, CS-Fire, Serene, CookiExt, SessInt, and Michrome.
- JavaScript security policies are a popular research area, as summarized by Bielova [9].

### Conclusion

We presented WPSE, a browser-side security monitor designed to address the security challenges of web protocols. Our work includes a thorough review of known attacks and extensive experimental analysis, revealing several undocumented security vulnerabilities in existing OAuth 2.0 implementations. We also discovered a new attack on the Google implementation of SAML 2.0 by formalizing its specification in WPSE.

In terms of compatibility, WPSE works seamlessly on many existing websites, with minor issues caused by custom implementations deviating from the OAuth 2.0 specification. Future work will extend the analysis to cover active attacks and improve usability with more graceful error handling and descriptive warning messages.

### Acknowledgments

This work was partially supported by the European Research Council (ERC) under the Horizon 2020 research grant, Netidee, the Austrian Research Promotion Agency, and the MIUR project ADAPT, among others.

### References

[1] M. Abadi and R. M. Needham. Prudent Engineering Practice for Cryptographic Protocols. IEEE Transactions on Software Engineering, 22(1):6–15, 1996.

[2] D. Akhawe, A. Barth, P. E. Lam, J. C. Mitchell, and D. Song. Towards a Formal Foundation of Web Security. In Proceedings of the 23rd IEEE Computer Security Foundations Symposium (CSF 2010), pages 290–304, 2010.

[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, G. Pellegrino, and A. Sorniotti. An Authentication Flaw in Browser-Based Single Sign-On protocols: Impact and Remediations. Computers & Security, 33:41–58, 2013.

[4] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L. Tobarra. Formal Analysis of SAML 2.0 Web Browser Single Sign-On: Breaking the SAML-Based Single Sign-On for Google Apps. In Proceedings of the 6th ACM Workshop on Formal Methods in Security Engineering (FMSE 2008), pages 1–10, 2008.

[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Keys to the Cloud: Formal Analysis and Concrete Attacks on Encrypted Web Storage. In Proceedings of the 2nd International Conference on Principles of Security and Trust (POST 2013), pages 126–146, 2013.

[6] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Discovering Concrete Attacks on Website Authorization by Formal Analysis. Journal of Computer Security, 22(4):601–657, 2014.

[7] L. Bauer, S. Cai, L. Jia, T. Passaro, M. Stroucken, and Y. Tian. Run-time Monitoring and Formal Analysis of Information Flows in Chromium. In Proceedings of the 22nd Network and Distributed System Security Symposium (NDSS 2015), 2015.

[8] A. Bichhawat, V. Rajani, D. Garg, and C. Hammer. Information Flow Control in WebKit’s JavaScript Bytecode. In Proceedings of the 3rd International Conference on Principles of Security and Trust (POST 2014), pages 159–178, 2014.

[9] N. Bielova. Survey on JavaScript Security Policies and their Enforcement Mechanisms in a Web Browser. Journal of Logic and Algebraic Programming, 82(8):243–262, 2013.

[10] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In Proceedings of the 14th IEEE Computer Security Foundations Workshop (CSFW 2001), pages 82–96, 2001.