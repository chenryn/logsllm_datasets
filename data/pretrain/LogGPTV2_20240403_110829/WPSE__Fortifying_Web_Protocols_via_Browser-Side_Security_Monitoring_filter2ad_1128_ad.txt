achieve the same security guarantees given a corrupted
client (e.g., due to XSS attacks). More precisely this
means that all attacks that will not occur in the presence
of an ideally behaving client can be ﬁxed by our moni-
tor. Of course, these security guarantees only span the
run of the protocol that is proven secure and its protocol-
speciﬁc secrets. So the monitor can e.g., ensure that the
Figure 4: Visual description of Theorem 1
OAuth 2.0 protocol is securely executed in the presence
of compromised scripts which might result in successful
authentication and the setting of a session cookie. How-
ever, the monitor cannot prevent that this session cookie
is leaked by a malicious script after the protocol run is
over. So other security techniques (e.g., the HttpOnly
attribute for cookies) have to be in place or the protocol
speciﬁcation can in principle be extended to include the
subsequent application steps (e.g., we can protect session
cookies like we do for access tokens).
Our theory is elaborated within the applied pi calcu-
lus [37], a popular process calculus for the formal anal-
ysis of cryptographic protocols, which is supported by
various automated cryptographic protocol veriﬁers, such
as ProVerif [10]. Bansal et al. [6] have recently presented
a technique to leverage ProVerif for the analysis of web
protocol speciﬁcations, including OAuth.
We give an overview on the theorem in Figure 4. We
assume that the protocol speciﬁcation has already been
proven secure in a setting where the browser-side appli-
cation is well-behaved and, in particular, follows the pro-
tocol speciﬁcation (Sorig). Intuitively, our theorem says
that security carries over to a setting (Snew) where the
browser-side application is totally under the control of
the attacker (e.g., because of XSS attacks or a simple bug
in the code) but the communication between the browser
and the other protocol parties is mediated by our monitor.
Speciﬁcally, Sorig includes a browser B and an uncom-
promised application App, which exchange messages via
private (green) communication channels bain,baout. The
communication between the browser B and the network
N is performed via the public (red) channels bsin,bsout
that can be observed and inﬁltrated by the network at-
tacker. Snew shows the setting in which the application
is compromised: channel bain for requests from the ap-
plication to the browser is made public, modeling that
USENIX Association
27th USENIX Security Symposium    1503
arbitrary requests can be performed on it by the attacker.
In addition, we assume the channel baout modeling the
responses from the browser to the app to leak all mes-
sages and consequently modeling that the compromised
application might leak these secrets. Indeed, the com-
promised application can communicate with the network
attacker, which can in turn use the learned information to
attack the protocol.
We state a simpliﬁed version of the correctness theo-
rem as follows:
Theorem 1 (Monitor Correctness). Let processes App,
N, B and M as deﬁned in Sorig and P be a property on
execution traces against a network attacker. Assume that
the following conditions hold:
(H1) Sorig (cid:15) P
(H2) M ↓ bsin,bsout (cid:52) Sorig ↓ bsin,bsout
(‘the set of
requests/responses on bsin,bsout allowed by M are a
subset of those produced by Sorig’)
(‘Sorig satisﬁes P’)
(H3) M does not leak any secrets (i.e., messages initially
unknown to the attacker) on baout
Then it also holds that:
(C) Snew (cid:15) P
(‘Snew satisﬁes P’).
Assumption (H1) states that the process as shown in
Sorig satisﬁes a certain trace property. In the applied pi
calculus, this is modeled by requiring that each partial
execution trace of Sorig in parallel with an arbitrary net-
work attacker satisﬁes the trace predicate P. Assump-
tion (H2) states that the requests/responses allowed by
the monitor M on the channels bsin, bsout, which model
the communication between the browser and the net-
work, are a subset of those possibly performed by the
process Sorig. Intuitively, this means that the monitor al-
lows for the intended protocol ﬂow, ﬁltering out mes-
sages deviating from it. Formally this is captured by
projecting the execution traces of the corresponding pro-
cesses to those components that model the input and out-
put behavior on bsin and bsout and by requiring that for
every such execution trace of M there is a correspond-
ing one for Sorig. Finally, assumption (H3) states that the
monitor M should not leak any secrets with its outputs
on channel baout. In applied pi calculus this is captured
by requiring that the outputs of M on channel baout do
not to contain any information that increases the attacker
knowledge.
Together these assumptions ensure that the monitored
browser behaves as the ideal protocol participant in Sorig
towards the network and additionally assure that an at-
tacker cannot gain any additional knowledge via a com-
promised application that could enable her to perform at-
tacks against the protocol over the network. Formally,
this is captured in conclusion (C) that requires the partial
execution traces of Snew to satisfy the trace predicate P.
6.1 Discussion
Our formal result is interesting for various reasons. First,
it allows us to establish formal security guarantees in
a stronger attacker model by checking certain semantic
conditions on the monitor, without having to prove from
scratch the security of the protocol with the monitor in
place on the browser-side. Second, the theorem demon-
strates that enforcing the three security properties identi-
ﬁed in Section 2 does indeed sufﬁce to protect web proto-
cols from a large class of bugs and vulnerabilities on the
browser side: (H2) captures the compliance with the in-
tended protocol ﬂow as well as data integrity, while (H3)
characterizes the secrecy of messages.
Finally, the three hypotheses of the theorem are usu-
ally extremely easy to check. For instance, let us con-
sider the OAuth protocol. As previously mentioned, this
has been formally analyzed in [6], so (H1) holds true.
In particular, the intended protocol ﬂow is directly deriv-
able from the applied pi calculus speciﬁcation. The au-
tomaton in Figure 2 only allows for the intended pro-
tocol ﬂow, which is clearly contained in the execution
traces analyzed in [6]. Hence (H2) holds true as well.
Finally, the only secrets in the protocol speciﬁcation are
those subject to the conﬁdentiality policy in the automa-
ton in Figure 2: as previously mentioned, these are re-
placed by placeholders, which are then passed to the web
application. Hence no secret can ever leak, which vali-
dates (H3).
7 Related Work
7.1 Analysis of Web Protocols
The ﬁrst paper to highlight the differences between web
protocols and traditional cryptographic protocols is due
to Gross et al. [22]. The paper presented a model of web
browsers, based on a formalism reminiscent of input/out-
put automata, and applied it to the analysis of password-
based authentication, a key ingredient of most browser-
based protocols. The model was later used to formally
assess the security of the WSFPI protocol [23].
Traditional protocol veriﬁcation tools have been suc-
cessfully applied to ﬁnd attacks in protocol speciﬁca-
tions. For instance, Armando et al. analyzed both the
SAML protocol and a variant of the protocol imple-
mented by Google using the SATMC model-checker [4].
Their analysis exposed an attack against the authenti-
cation goals of the Google implementation. Follow-up
work by the same group used a more accurate model to
ﬁnd an authentication ﬂaw also in the original SAML
1504    27th USENIX Security Symposium
USENIX Association
speciﬁcation [3]. Akhawe et al. used the Alloy frame-
work to develop a core model of the web infrastructure,
geared towards attack ﬁnding [2]. The paper studied the
security of the WebAuth authentication protocol among
other case studies, ﬁnding a login CSRF attack against
it. The WebSpi library for ProVerif by Bansal et al. has
been successfully applied to ﬁnd attacks against exist-
ing web protocols, including OAuth 2.0 [6] and cloud
storage protocols [5]. Fett et al. developed the most
comprehensive model of the web infrastructure avail-
able to date and fruitfully applied it to the analysis of
a number of web protocols, including BrowserID [17],
SPRESSO [18] and OAuth 2.0 [19].
Protocol analysis techniques are useful to verify the
security of protocols, but they assume websites are cor-
rectly implemented and do not depart from the speciﬁca-
tion, hence many security researchers performed empiri-
cal security assessments of existing web protocol imple-
mentations, ﬁnding dangerous attacks in the wild. Pro-
tocols which deserved attention by the research commu-
nity include SAML [41], OAuth 2.0 [43, 27] and OpenID
Connect [28]. Automated tools for ﬁnding vulnerabili-
ties in web protocol implementations have also been pro-
posed by security researchers [46, 50, 48, 31]. None of
these works, however, presented a technique to protect
users accessing vulnerable websites in their browsers.
7.2 Security Automata
The use of ﬁnite state automata for security enforcement
is certainly not new. The pioneering work in the area is
due to Schneider [40], which ﬁrst introduced a formal-
ization of security automata and studied their expressive
power in terms of a class of enforceable policies. Secu-
rity automata can only stop a program execution when a
policy violation is detected; later work by Ligatti et al.
extended the class of security automata to also include
edit automata, which can suppress and insert individual
program actions [29]. Edit automata have been applied
to the web security setting by Yu et al., who used them
to express security policies for JavaScript code [49]. The
focus of their paper, however, is not on web protocols and
is only limited to JavaScript, because input/output oper-
ations which are not JavaScript-initiated are not exposed
to their security monitor.
Guha et al.
also used ﬁnite state automata to en-
code web security policies [24]. Their approach is based
on three steps: ﬁrst, they apply a static analysis for
JavaScript to construct the control ﬂow graph of an Ajax
application to protect and then they use it to synthesize a
request graph, which summarizes the expected input/out-
put behavior of the application. Finally, they use the re-
quest graph to instruct a server-side proxy, which per-
forms a dynamic monitoring of browser requests to pre-
vent observable violations to the expected control ﬂow.
The security enforcement can thus be seen as the com-
putation of a ﬁnite state automaton built from the request
graph. Their technique, however, is only limited to Ajax
applications and operates at the server side, rather than at
the browser side.
7.3 Browser-Side Defenses
The present paper positions itself in the popular research
line of extending web browsers with stronger security
policies. To the best of our knowledge, this is the ﬁrst
work which explicitly focuses on web protocols, but a
number of other proposals on browser-side security are
worth mentioning. Enforcing information ﬂow policies
in web browsers is a hot topic nowadays and a few
fairly sophisticated proposals have been published as of
now [21, 26, 8, 36, 7]. Information ﬂow control can be
used to provide conﬁdentiality and integrity guarantees
for browser-controlled data, but it cannot be directly used
to detect deviations from expected web protocol execu-
tions, which instead are naturally captured by security
automata. Combining our approach with browser-based
information ﬂow control can improve its practicality, be-
cause a more precise information ﬂow tracking would
certainly help a more permissive security enforcement.
A number of browser changes and extensions have
been proposed to improve web session security, both
from the industry and the academia. Widely deployed
industrial proposals include Content Security Policy
(CSP) and HTTP Strict Transport Security (HSTS). No-
table proposals from the academia include Allowed Re-
ferrer Lists [16], SessionShield [32], Zan [44], CS-
Fire [38], Serene [39], CookiExt [11], SessInt [12] and
Michrome [13]. Moreover, JavaScript security policies
are a very popular research line in their own right: we
refer to the survey by Bielova [9] for a good overview
of existing techniques. None of these works, however,
tackles web protocols.
8 Conclusion
We presented WPSE, the ﬁrst browser-side security mon-
itor designed to address the security challenges of web
protocols, and we showed that the security policies en-
forceable by WPSE sufﬁce to prevent a large number of
real-world attacks. Our work encompasses a thorough
review of well-known attacks reported in the literature
and an extensive experimental analysis performed in the
wild, which exposed several undocumented security vul-
nerabilities ﬁxable by WPSE in existing OAuth 2.0 im-
plementations. We also discovered a new attack on the
Google implementation of SAML 2.0 by formalizing its
speciﬁcation in WPSE.
In terms of compatibility, we
USENIX Association
27th USENIX Security Symposium    1505
showed that WPSE works ﬂawlessly on many existing
websites, with the few compatibility issues being caused
by custom implementations deviating from the OAuth
2.0 speciﬁcation, one of which introducing a critical vul-
nerability. In the end, we conclude that the browser-side
security monitoring of web protocols is both useful for
security and feasible in practice.
As to future work, we observe that our current as-
sessment of WPSE in the wild only covers two speciﬁc
classes of vulnerabilities, which can be discovered just
by navigating the tested websites: extending the analy-
sis to cover active attacks (in an ethical manner) is an
interesting direction to get a better picture of the cur-
rent state of the OAuth 2.0 deployment. We would also
like to improve the usability of WPSE by implementing
a more graceful error handling procedure: e.g., when an
error occurs, we could give users the possibility to pro-
ceed just as it routinely happens with invalid HTTPS cer-
tiﬁcates. Using more descriptive warning messages may
also be useful for web developers that are visiting their
websites with WPSE so that they can understand the is-
sue and provide the appropriate ﬁxes to the server side
code. Finally, we plan to identify automated techniques
to synthesize protocol speciﬁcations for WPSE starting
from observable browser behaviours in order to make it
easier to adopt our security monitor in an industrial set-
ting.
Acknowledgments. This work has been partially sup-
ported by the European Research Council (ERC) un-
der the European Unions Horizon 2020 research (grant
agreement No 771527-BROWSEC), by Netidee through
the project EtherTrust
(grant agreement 2158), by
the Austrian Research Promotion Agency through the
Bridge-1 project PR4DLT (grant agreement 13808694)
and COMET K1 SBA. The paper also acknowledges
support from the MIUR project ADAPT and by CINI
Cybersecurity National Laboratory within the project
FilieraSicura: Securing the Supply Chain of Domestic
Critical Infrastructures from Cyber Attacks funded by
CISCO Systems Inc. and Leonardo SpA.
References
[1] M. Abadi and R. M. Needham. Prudent Engineer-
IEEE
ing Practice for Cryptographic Protocols.
Transactions on Software Engineering, 22(1):6–15,
1996.
[2] D. Akhawe, A. Barth, P. E. Lam, J. C. Mitchell,
and D. Song. Towards a Formal Foundation of
In Proceedings of the 23rd IEEE
Web Security.
Computer Security Foundations Symposium (CSF
2010), pages 290–304, 2010.
[3] A. Armando, R. Carbone, L. Compagna, J. Cu´ellar,
G. Pellegrino, and A. Sorniotti. An Authentication
Flaw in Browser-Based Single Sign-On protocols:
Impact and Remediations. Computers & Security,
33:41–58, 2013.
[4] A. Armando, R. Carbone, L. Compagna, J. Cu´ellar,
and M. L. Tobarra. Formal Analysis of SAML
2.0 Web Browser Single Sign-On: Breaking the
SAML-Based Single Sign-On for Google Apps. In
Proceedings of the 6th ACM Workshop on Formal
Methods in Security Engineering (FMSE 2008),
pages 1–10, 2008.
[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and
S. Maffeis. Keys to the Cloud: Formal Analysis
and Concrete Attacks on Encrypted Web Storage.
In Proceedings of the 2nd International Conference
on Principles of Security and Trust (POST 2013),
pages 126–146, 2013.
[6] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and
S. Maffeis. Discovering Concrete Attacks on Web-
site Authorization by Formal Analysis. Journal of
Computer Security, 22(4):601–657, 2014.
[7] L. Bauer, S. Cai, L. Jia, T. Passaro, M. Stroucken,
and Y. Tian. Run-time Monitoring and Formal
Analysis of Information Flows in Chromium.
In
Proceedings of the 22nd Network and Distributed
System Security Symposium (NDSS 2015), 2015.
[8] A. Bichhawat, V. Rajani, D. Garg, and C. Hammer.
Information Flow Control in WebKit’s JavaScript
Bytecode. In Proceedings of the 3rd International
Conference on Principles of Security and Trust
(POST 2014), pages 159–178, 2014.
[9] N. Bielova. Survey on JavaScript Security Poli-
cies and their Enforcement Mechanisms in a Web
Browser. Journal of Logic and Algebraic Program-
ming, 82(8):243–262, 2013.
[10] B. Blanchet. An Efﬁcient Cryptographic Protocol
In Proceedings
Veriﬁer Based on Prolog Rules.
of the 14th IEEE Computer Security Foundations