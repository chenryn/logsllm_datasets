### Memory Management and System Call Analysis in the Linux Kernel

#### Overview
In the context of heap management, objects are often placed on the stack and then migrated to the slab. A shortage of spray objects can impact the effectiveness of heap spraying techniques, which are often used in exploiting Use-After-Free (UAF) and double-free vulnerabilities. The Linux kernel we analyzed has 314 system calls, with 257 of them being relevant to the kernel image we built.

#### Analysis Methods
We employed both static and dynamic analysis methods to evaluate the performance of our tool, SLAKE, under different call graph strategies: prototype-matching and KINT-based.

| **Category** | **Prototype-Matching Call Graph** | **KINT-Based Call Graph** |
|--------------|-----------------------------------|--------------------------|
| **# of v/s** | Number of victim and spray objects identified by static analysis | 39/0 | 23/0 |
| **avg. syscall #** | Average number of syscalls that can potentially reach a site of interest | 257 | 257 |
| **# of alloc/free/deref** | Number of syscalls for allocation, freeing, or dereferencing function pointers | 15/3/5 | 16/5/6 |
| **avg. time (min)** | Average time spent by dynamic analysis to find each syscall | 46 | 3 |

#### Detailed Analysis
The following table provides a breakdown of the essential parts and their respective metrics:

| **Module** | **# of v/s (Static)** | **avg. syscall #** | **# of alloc/free/deref** | **avg. time (min) (Dynamic)** |
|------------|-----------------------|--------------------|---------------------------|-------------------------------|
| AIO        | 39/0                  | 257                | 15/3/5                    | 46                            |
| ASSOCIATIVE_ARRAY | 3/0              | 257                | 1/0/0                     | 23                            |
| BLOCK      | 1/0                   | 257                | 1/1/1                     | 5                             |
| CGROUPS    | 0/0                   | -                  | -                         | -                             |
| EPOLL      | 1/0                   | 257                | 1/1/1                     | 11                            |
| EXT4_FS    | 3/0                   | 257                | 0/0/0                     | -                             |
| FILE_LOCKING | 8/0                 | 257                | 1/0/0                     | 5                             |
| FS_POSIX_ACL | 1/0                 | 257                | 0/0/0                     | 18                            |
| FSNOTIFY   | 1/0                   | 257                | 1/0/0                     | 73                            |
| INET       | 13/1                  | 257                | 0/0/0                     | 34                            |
| IP_MROUTE  | 1/0                   | 257                | 0/0/0                     | -                             |
| IPV6       | 6/0                   | 257                | 0/0/0                     | -                             |
| ISO9660_FS | 0/0                   | -                  | -                         | -                             |
| FAT_FS     | 0/0                   | -                  | -                         | -                             |
| JBD2       | 2/0                   | 257                | 1/0/0                     | 23                            |
| KEYS       | 5/2                   | 257                | 3/0/3                     | 33                            |
| NET        | 13/0                  | 257                | 4/1/0                     | 28                            |
| NETLABEL   | 1/0                   | 257                | 1/0/0                     | 41                            |
| PID_NS     | 1/0                   | 257                | 1/0/0                     | 14                            |
| POSIX_TIMERS | 2/0                | 257                | 1/0/0                     | 64                            |
| PROC_FS    | 1/0                   | 257                | 1/0/0                     | 16                            |
| SECCOMP    | 3/0                   | 257                | 1/0/0                     | 39                            |
| SECURITY_SELINUX | 1/0             | 257                | 1/0/0                     | 48                            |
| SND_HRTIMER | 2/0                 | 257                | 1/0/0                     | 56                            |
| SND_SEQUENCER | 1/0               | 257                | 1/0/0                     | 23                            |
| SND_TIMER  | 3/0                   | 257                | 2/0/0                     | 50                            |
| SYSVIPC    | 2/0                   | 257                | 1/0/0                     | 6                             |
| TIMERFD    | 1/0                   | 257                | 1/0/0                     | 26                            |
| TTY        | 1/0                   | 257                | 1/0/0                     | 31                            |
| USB_MON    | 1/0                   | 257                | 1/0/0                     | 1                             |
| UTS_NS     | 2/1                   | 257                | 3/3/3                     | 68                            |
| **Total**  | 124/4                 | 257                | 46/9/11                   | 46                            |

#### Types of Kernel Objects Identified
SLAKE identifies various types of kernel objects, categorized as "public" and "additional." Public objects are those that have been used in known exploits, while additional objects are those that have not yet been exploited publicly.

- **Public Victims**: file, subprocess_info, ccid, seq_file, tty_struct, ip_mc_socklist, key, sock
- **Spray Objects**: load_msg, SyS_add_key()

- **Additional Victims**: seq_operations, perf_event_context, linux_binprm, vmap_area, kioctx_table, kioctx, assoc_array_edit, cgroup_namespace, ext4_allocation_context, ip_options_rcu, ip_mc_list, ip_sf_socklist, request_key_auth, pid_namespace, k_itimer, avc_node, sk_security_struct, snd_seq_timer, timerfd_ctx, tty_ldisc, tty_file_private
- **Spray Objects**: ip_options_get_from_user(), keyctl_update_key()

#### Comparison with Manual Efforts
To evaluate the effectiveness of SLAKE, we compared its results with manually identified objects from public exploits. For 27 test cases, we identified all objects used in these exploits and compared them with the ones identified by SLAKE. The results show that SLAKE successfully identifies all 10 public objects and additional objects that have not been used in known exploits.

| **CVE-ID** | **N/A[47]** | **2010-2959** | **2018-6555** | **2017-1000112** | **2017-2636** | **2014-2851** | **2015-3636** | **2016-0728** | **2016-10150** | **2016-4557** | **2016-6187** | **2016-8655** | **2017-10661** | **2017-15649** | **2017-17052** | **2017-17053** | **2017-6074** | **2017-7184** | **2017-7308** | **2017-8824** | **2017-8890** | **2018-10840** | **2018-12714** | **2018-16880** |
|------------|-------------|---------------|---------------|------------------|---------------|---------------|---------------|---------------|----------------|---------------|---------------|---------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|

This comparison demonstrates that SLAKE is effective in identifying kernel objects for exploitation, even in complex and dynamic environments where manual analysis is impractical.