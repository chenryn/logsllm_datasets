### 3.1 SP-GiST

SP-GiST (Space-Partitioned GiST) is an extensible indexing framework that supports a wide variety of space-partitioning trees, including disk-based variants of tries, quadtrees, and kd-trees. This framework provides a set of internal methods common to all space-partitioning trees, such as `Insert()`, `Search()`, and `Delete()`. These internal methods are the core of SP-GiST and are consistent across all SP-GiST-based index structures.

Another crucial external method in SP-GiST is the `Consistent()` method, which specifies how to navigate through the index tree. The `Consistent()` method is invoked by the internal methods (`Insert()` and `Search()`) to guide the tree navigation. In Table 1, we illustrate the instantiation of a dictionary trie and a kd-tree using SP-GiST. From a developer's perspective, coding these external methods is all that is required.

SP-GiST also provides a default clustering technique that maps index nodes into disk pages, based on [12]. This technique is proven to generate minimum-height trees.

#### Table 1: Instantiation of the Trie and Kd-Tree Using SP-GiST

| Parameter | Trie | Kd-Tree |
| --- | --- | --- |
| PathShrink | TreeShrink | NeverShrink |
| NodeShrink | True | False |
| BucketSize | B | 1 |
| NoOfSpacePartitions | 27 | 2 |
| NodePredicate | letter or blank | "left", "right", or blank |
| KeyType | String | Point |
| Consistent(E, q, level) | If (q[level] == E.letter) OR (E.letter == blank AND level > length(q)) Return True, else Return False | If (level is odd AND q.x satisfies E.p.x) OR (level is even AND q.y satisfies E.p.y) Return True, else Return False |
| PickSplit(P, level) | Find a common prefix among words in P. Update level = level + length of the common prefix. Let P predicate = the common prefix. Partition the data strings in P according to the character values at position "level". If any data string has length < level, insert data string in Partition "blank". If any of the partitions is still overfull, return True, else return False. | Put the old point in a child node with predicate "blank". Put the new point in a child node with predicate "left" or "right". Return False. |

### 4 Implementation Issues

In this section, we discuss the implementation issues involved in realizing SP-GiST within PostgreSQL. We start with an overview of the main extensible features of PostgreSQL, followed by the details of implementing SP-GiST.

#### 4.1 PostgreSQL Extensibility

PostgreSQL is an open-source object-relational database management system known for its extensibility. Most of its functionalities are table-driven, and information about available data types, access methods, operators, etc., is stored in system catalog tables. PostgreSQL allows users to define new operators, operator classes, and interface routines, which can be implemented as dynamically loadable modules, such as shared libraries.

- **Defining New Operators**: When defining a new operator, you specify the data types it works on and a set of properties that the query optimizer can use.
- **Defining New Operator Classes**: Operator classes link access methods with data types and operators. They also allow users to define support functions used by the access method for internal operations.
- **Defining New Interface Routines**: Each access method in PostgreSQL has a set of associated functions. For SP-GiST, these functions include `spgistgettuple()`, `spgistinsert()`, `spgistbeginscan()`, `spgistrescan()`, `spgistendscan()`, `spgistmarkpos()`, `spgistrestrpos()`, `spgistbuild()`, `spgistbulkdelete()`, and `spgistcostestimate()`.

#### 4.2 Realizing SP-GiST Inside PostgreSQL

To realize SP-GiST inside PostgreSQL, we extend the existing access methods to include the family of space-partitioning trees, such as the kd-tree, trie, quadtree, and their variants. The following steps outline the implementation process:

- **pg_am Catalog Table Entry for SP-GiST**: A new row is inserted into the `pg_am` table to introduce SP-GiST as a new access method. The `pg_am` table stores information about available access methods. The entry for SP-GiST is shown in Table 2.

  | Column Name | Column Description | SP-GiST Function/Value |
  | --- | --- | --- |
  | amname | Name of the access method | SP GiST |
  | amowner | User ID of the owner | 0 |
  | amstrategies | Max number of operator strategies for this access method | 20 |
  | amsupport | Max number of support functions for this access method | 20 |
  | amorderstrategy | Strategy number for entries ordering | 0 |
  | amcanunique | Support unique index flag | FALSE |
  | amcanmulticol | Support multicolumn flag | FALSE |
  | amindexnulls | Support null entries flag | FALSE |
  | amconcurrent | Support concurrent update flag | TRUE |
  | amgettuple | "Next valid tuple" function | spgistgettuple |
  | aminsert | "Insert this tuple" function | spgistinsert |
  | ambeginscan | "Start new scan" function | spgistbeginscan |
  | amrescan | "Restart this scan" function | spgistrescan |
  | amendscan | "End this scan" function | spgistendscan |
  | ammarkpos | "Mark current scan position" function | spgistmarkpos |
  | amrestrpos | "Restore marked scan position" function | spgistrestrpos |
  | ambuild | "Build new index" function | spgistbuild |
  | ambulkdelete | Bulk-delete function | spgistbulkdelete |
  | amvacuumcleanup | Post-VACUUM cleanup function | - |
  | amcostestimate | Function to estimate cost of an index scan | spgistcostestimate |

- **Realization of SP-GiST Internal Methods**: The internal methods of SP-GiST, such as `spgistgettuple()`, `spgistinsert()`, etc., are implemented as dynamically loadable modules. These methods are portable and do not require recompiling PostgreSQL’s code.

- **Definition of SP-GiST Operators**: Different SP-GiST index structures have different sets of operators (external methods). For example, the trie index structure defines the operators `=`, `?=`, and `#=` to support equality, prefix, and regular expression queries, respectively. The kd-tree defines `@` and `∧` for equality and range queries. The suffix tree defines `@=` for substring match queries. The nearest-neighbor search (NN search) is defined as the operator `@@`.

- **Realization of SP-GiST External Methods**: The SP-GiST external methods and interface parameters capture the differences among various types of SP-GiST index structures. These methods are implemented using the access methods’ support functions, which are provided within the definition of the operator classes.

- **Cost Estimation**: The cost of an SP-GiST index scan is estimated using the `spgistcostestimate()` function. This function uses generic cost estimate functions provided by PostgreSQL. Four cost parameters are estimated:
  1. **Index Selectivity**: The estimated fraction of the underlying table rows that will be retrieved during the index scan.
  2. **Index Correlation**: Set to 0 because there is no correlation between the index order and the underlying table order.
  3. **Index Startup Cost**: The CPU cost of evaluating complex expressions that are arguments to the index.
  4. **Index Total Cost**: The sum of the startup cost and the disk I/O cost, which depends on the index selectivity and size.

- **Operator Definitions**: An example of operator definitions is given in Table 4. Each operator is linked to a procedure that performs the operator’s functionality, such as `trieword_equal()`, `kdpoint_equal()`, etc. Other properties, such as the commutator clause, can also be defined.

  | Operator | Trie | Kd-Tree |
  | --- | --- | --- |
  | Equality Operator `=` | `CREATE OPERATOR = (leftarg = VARCHAR, rightarg = VARCHAR, procedure = trieword_equal, commutator = =, restrict = eqsel);` | `CREATE OPERATOR @ (leftarg = POINT, rightarg = POINT, procedure = kdpoint_equal, commutator = @, restrict = eqsel);` |
  | Prefix Match Operator `?=` | `CREATE OPERATOR ?= (leftarg = VARCHAR, rightarg = VARCHAR, procedure = trieword_prefix, commutator = =, restrict = likesel);` | - |
  | Inside Operator `∧` | - | `CREATE OPERATOR ∧ (leftarg = POINT, rightarg = BOX, procedure = kdpoint_inside, commutator = @, restrict = contsel);` |

- **Query Types and Semantics**: The semantics of various query types, such as equality, prefix, regular expression, substring, range, and nearest-neighbor (NN) queries, are given in Table 3.

  | Query Type | Query Semantic |
  | --- | --- |
  | Equality Query | Return the keys that exactly match the query predicate. |
  | Prefix Query | Return the keys that have a prefix matching the query predicate. |
  | Regular Expression Query | Return the keys that match the query regular expression predicate. |
  | Substring Query | Return the keys that have a substring matching the query predicate. |
  | Range Query | Return the keys that are within the query predicate range. |
  | NN Query | Return the keys sorted based on their distances from the query predicate. |

This structured approach ensures that SP-GiST is seamlessly integrated into PostgreSQL, providing a flexible and efficient indexing solution for a wide range of applications.