 0 50 100 150 200 25064 B128 B512 B1024 B1500 BiMIX91 %70 %96 %67 %98 %68 %97 %80 %100 %94 %93 %72 %Throughput (Kpps)Baselinew/o Authenticationw/ Authentication 0 0.2 0.4 0.6 0.8 1 760 780 800 820 840 860CDFGoodput (Mbps)Baselinew/o Authenticationw/ Authentication 0 0.2 0.4 0.6 0.8 1 740 760 780 800 820 840 860 880Throughput including headerCDFThroughput (Mbps)Baselinew/o Authenticationw/ AuthenticationA. NAT Devices
Multiple hosts connected through a NAT device appear as
a single host to the TP. Internal NAT devices hardly pose a
problem since the hosts under that NAT device are all subject to
the same subnet and therefore belong to a single network zone.
Network operators establish a security policy on the translated
IP address, such that TPs are able to authenticate the zone
transit requests from/to a host under the internal NAT device.
However, an external NAT device located in an external
network, e.g., carrier grade NAT, could affect the TP’s secure
tunneling ability. The translated TP’s IP address would cause
a MAC veriﬁcation failure—recall that each symmetric key
binds to the triplet including TPs’ IP addresses as described in
§IV-C. This, however, can be addressed by enforcing TPs to
use their public IP addresses to derive the symmetric keys. The
keys are still secure since the ﬁrst-level key from which the
pairwise keys are derived is exchanged with the CA-certiﬁed
public keys. Discovering the translated TP address is also not
a problem thanks to the controller informing senders about the
recipient TP’s address (see, Protocol 3 in Figure 3).
A potential operational failure is where multiple TPs are
behind the same NAT device. This would lead to TPs having
identical keys from the view of remote TPs. One possible
solution would be to use a unique TP identiﬁer instead. Since
all such TPs would be under one administrative domain,
assigning unique TP identiﬁers upon bootstrapping is feasible.
Then, the TPs convey their identiﬁers in the AT header ﬁeld
alongside the destination zone ID. This might slightly increase
the size of the header, but does not degrade the security of the
underlying authentication.
B. Tunneling Granularity
Secure tunneling can be realized in different granularities:
i) site-to-site tunneling, ii) zone-to-zone tunneling, and iii) site-
to-zone tunneling. In the following we motivate our design
choice of site-to-zone tunneling in MONDRIAN.
Similar to IPSec VPN, site-to-site tunneling provides strong
guarantees on communication security and privacy for two
tunnel endpoints. However, from a ﬂexibility and manageabil-
ity standpoint, having a site-to-site tunneling architecture is
not ideal. Every tunnel endpoint needs to share a key with
every other endpoint with which it wishes to exchange data.
This adds state to the endpoints that needs to be updated and
synchronized. Adding a new site requires an update on all the
other sites that wish to communicate with the new site. Then,
yet another layer of security middleboxes (e.g., ﬁrewalls) are
required to perform zone transition authentication since keys
are do not designate a speciﬁc zone.
An alternative way of providing authentication is to use
one key per zone. In this model, the TP would sign the data
on behalf of the zones. In case of a zone transition, the TP
would perform the transition and then use the key of the
source/receiver zone pair. This approach has the beneﬁt that
sender and receiver are decoupled, as in principle any site
that contains a given zone is able to decrypt data destined
for that zone. Adding a new site would be as easy as fetching
the right keys for the zones used in this site. This process
is independent of all the other sites. However, a receiver TP
needs to be able to fetch the right keys for the zones, which
means the zone transition information must be visible, and
thus an attacker could potentially learn the zone structure of
the observed network. Also, a separate key per zone pair does
not scale well as the number of zones can grow over 1000 in
large networks.
Driven by these considerations, we designed the new
concept of site-to-zone tunneling, which represents a middle
ground combining the advantages of the two approaches, the
notion of secure tunneling and zone transition authentication.
The symmetric keys are distinguishable depending on the des-
tination zone, while at the same time the zone-to-zone security
policies are not being exposed. Thanks to the ﬂexible and
scalable key derivation scheme introduced by PISKES [56], the
key establishment does not expand state, while still providing
unique symmetric keys per zone.
C. Distributed Controllers
To avoid single-point-of-failure,
logically centralized
control-planes built on physically distributed instances are
commonly being used. The most common approaches to real-
ize distributed controllers can be broadly categorized into hor-
izontal distribution [5], [41] and hierarchical distribution [23],
[68]. Independent of which distribution architecture is used,
we discuss location, coordination, and migration aspects of
distributed controllers.
Location. The notion of a logically centralized control-plane
offers ﬂexibility in network design and management. A key
design choice is placement of the (distributed) controllers,
which could impact performance, reliability, and management
scalability of a given network. There is comprehensive research
on the controller placement problem considering practical is-
sues from control latency to reliability, from cost-optimization
to load balancing, etc [10], [24], [71]. Among those, we are
mainly interested in the latency performance indicator; that
is the latency between a controller and regional forwarding
devices.
The best latency is achieved when each branch site has its
own controller. By a placement near local TPs, the controller
minimizes the TP-controller latency for the zone transition
authorization protocol, allowing instant feedback for packet
forwarding—we note that inter-controller communication for
global coordination is commonly not latency sensitive. For
the sake of control-plane security, the controller resides in
a restricted zone to which only the local TPs and remote
controllers can access. Although the per-site controller offers
the best performance regarding policy enforcement for the
data-plane, there might be a cost-efﬁciency problem for a
large-scale network with thousands of branches.
Alternatively, we consider a sparse distribution model, e.g.,
on edge-cloud systems. Similar to today’s cloud services, net-
work operators running geographically distributed data centers
can instantiate multiple controllers at
the central point of
regional branches. The control-plane latency overhead would
be relatively high compared to a dense deployment model—if
the data center edges are geographically diverse, the overhead
could be minimized—but, in terms of cost-optimization and
management scalability, this would be a more viable approach.
12
Coordination. It is important to keep consistency across the
distributed controllers. Inconsistency in security policy might
grant hosts with a low security clearance unauthorized access
to restricted zones, resulting in leakage. With this in mind,
we consider a consensus algorithm with strong consistency
guarantees [47], [50], [58], where the security policy is dy-
namically shared/replicated across the distributed controller
instances, ensuring consistent policy enforcement toward the
data-plane devices. There are numerous open-source projects,
such as Consul [9], Apache ZooKeeper [2], and ETCD [17]
available.
TP Migration. To beneﬁt from the distributed controller envi-
ronment, a dynamic controller discovery process also becomes
important. That is, TPs should be able to search a cluster
of best candidates, diagnose the performances in terms of
control latency, and seamlessly migrate to the best controller.
To this end, we consider a two-step migration process: i) TP-
driven control channel initialization, and ii) controller-driven
TP migration.
TPs are responsible for establishing the ﬁrst control plane
channel with a controller. For example, a new TP (T Pnew)
has been conﬁgured to contact an initial controller acting
as a ﬁrst rendezvous point. The initial information contains
the controller’s IP address (C), the corresponding zone ID
(ZC), and the TP’s IP address behind which the controller
resides (T PC). If the controller is located in a remote site
(i.e., T Pnew (cid:54)= T PC), T Pnew should connect with C through
T PC. Otherwise, e.g., C is within the same LAN or in a public
network, T Pnew can directly send C a request for control-
plane channel establishment.
Once the TP joined the network, the controller then initiates
a migration process to ﬁnd the best controller (Cbest) for
T Pnew. Upon a migration request broadcast by C, other
controllers measure the possible latency to T Pnew and re-
ply back the results. Then, C elects Cbest considering the
latency measurements and the current load balance, and sends
T Pnew a RoleChange() request containing Cbest, ZCbest,
and T PCbest. Finally, T Pnew swaps the best controller by
establishing a new channel with Cbest. The migration process
is also applied when changes in the network are detected.
D. Distributed TPs
Network zoning with a TP may create another single-
point-of-failure. From a reliability perspective, ﬂattening and
connecting all the zones with a TP could potentially eliminate
redundancy for connectivity between zones. From a security
perspective, the centralized TP—instead of several distributed
security middelboxes—is a clearer target for adversaries.
However, both these concerns can be addressed by op-
erating multiple TPs with advanced multipath-enabled layer-
2 protocols (e.g., SPB and TRILL). This network design
provides load balancing and enhanced resilience against a TP
or link failure. If a TP is unable to continue data transmission,
the underlying protocol redirects ﬂows to another TP, ensuring
continuous communication for end hosts [6]. TPs do not keep
state, and therefore the TP conversion can be seamless and no
state migration is required.
For defense in depth, zones can be nested, resulting in a
hierarchical structure. MONDRIAN enables a hierarchical zone
structure by employing nested TPs that are only accessible
from upper-layer TPs, ensuring access control at multiple
levels. In addition, MONDRIAN can coexist with other security
middleboxes: for high-security zones, network operators can
consider positioning additional security solutions behind a TP,
facilitating a multitude of defense options.
E. Nonce Reset
The same nonce must never be used twice with the same
key, otherwise the security of the cipher signiﬁcantly decreases.
In theory it is easy to create nonces that fulﬁll this requirement.
One can simply use a counter which is increased for every
invocation of the AEAD algorithm. In real systems this is
not so easy to achieve since machines can crash and lose
their state, speciﬁcally their nonce counter. We consider the
following techniques to approach the problem.
•
•
•
Purely random nonce: All bits of the nonce are used
for randomness. Using this technique the probability
of a nonce clash is very low. Still,
there are no
guarantees even if the system does not crash.
Counter paired with random sequence: This technique
divides the nonce into a counter and a randomized
part. The random part is initialized after every restart
and the counter is increased for every packet that is
sent. After a crash, the counter starts from zero with
the random part being initialized to a new random
value. In case of a nonce clash, all subsequent nonces
clash as well.
Reset points: This technique uses all bits of the nonce
for a counter and simultaneously deﬁnes speciﬁc reset
points which are stored on non-volatile memory (NV-
memory). The counter is incremented in memory and
the next reset point is written to the NV-memory once
the current reset point is passed. If a crash occurs, the
counter restarts from the latest reset point.
F.
Incremental Deployability
A new networking technology must satisfy the follow-
ing requirements to be incrementally deployable: First, the
new technology should require minimum changes on the
network stack, especially of the end hosts. Except for security-
concerned users, most users are not interested in updating
their system, hampering incremental deployability. Second, it
should provide early adopters an instantaneous incentive, and
third, the incentive should be valid even in partial deployment.
MONDRIAN satisﬁes these requirements, providing seamless
incremental deployment capabilities. We outline here three
incremental deployment strategies: a gateway deployment, a
middlebox deployment, and software deployment.
Gateway Deployment. We consider a gateway deployment
scenario that does not require changes from end hosts nor
the local network infrastructure. The network operator deploys
MONDRIAN using a gateway, which performs the required
packet authentication and authorization operations. MON-
DRIAN takes a supportive role by complementing already
installed lines of defense such as ﬁrewalls, IPS, and IDS. For
instance, trafﬁc can be pre-ﬁltered by TPs before it reaches
ﬁrewalls located deeper inside the network. This deployment
13
scenario leaves the enterprise’s network intact while providing
the security properties of MONDRIAN. The simple deployment
already provides early adopters a clear incentive; secure and
strong policy enforcement of zone translation with a ﬂexible
zone migration and dynamic access control.
Middlebox Deployment. MONDRIAN can also be used as a
single, all-in-one solution providing packet ﬁltering, tunneling,
and routing within one middlebox device. We envision the
middlebox to be positioned alongside the routers inside the
network, serving a few hundred hosts. Such a deployment is
especially interesting for small branch sites with much simpler
network layouts. Here, MONDRIAN can drastically reduce the
number of devices that need to be maintained.
Software Deployment. Given that working-from-home be-
comes a new normal in modern society, enterprises should
allow their employees secure access from home to their net-
work. We envision a software-based TP as a viable deployment
option for such home users. Similar to VPN tools, the TP runs
on the user machine and acts as a virtual gateway, performing
secure tunneling and zone translation to interconnect with
information systems in the enterprise network.
IX. RELATED WORK
The majority of literature in network zoning has focused
on security enforcement architecture using middleboxes such
as ﬁrewalls, IPS, and IDS. Conventional security middleboxes
deﬁne restricted zones and ﬁlter unwanted trafﬁc at the entry
points of protected zones [7]. As information systems and the
corresponding network functions get more complicated, the
notion of distributed security systems has been introduced in
the late 1990’s [4]. Early approaches to protect only internal
information systems from external threats have further evolved
to mitigate sophisticated threats, for example insider attacks,
rule tampering, application-level proxies, and denial-of-service
attacks [38]. Later, with emerging network virtualization tech-
nologies and cloud computing environments, virtual ﬁrewalls
and collaborative security enforcement kept getting attention
from both academia and the industry [34], [69].
Secure network design with advanced technologies com-
plicates network conﬁguration and management. Notable ef-
forts to simplifying the complexity involve automation tools
enabling “top-down” network provisioning [64], [63]. For
instance, PRESTO [16] constructs a router-native conﬁguration
by using conﬁglets, conﬁguration snippets that encode a high-
level service description into the device-vendor-speciﬁc lan-
guage. Later, SDN further simpliﬁed the network conﬁguration
and management via logically centralized control and network
programmability [35], [44].
Despite the numerous research efforts, network zoning
with security middleboxes has challenges with respect
to
performance—the iMIX throughput degrades by 40 - 75% on
commodity products [29]—and misconﬁgurations [18], [67],
[70]. With MONDRIAN, we address the challenges by leverag-
ing a cryptographic-based policy enforcement and centralized
policy orchestration, achieving scalable, effective, and cost-
efﬁcient network zoning.
Network isolation through network segmentation is another
essential element of network zoning. To logically segment
the physical network, network virtualization technologies are
heavily used in today’s Internet, in particular large enterprise
networks and cloud computing environments. VLAN [28] is
the most frequently used network segmentation technique. It
logically segments a physical LAN into up to 4094 virtual
LANs by tagging the layer 2 header with a unique VLAN
identiﬁer (VID). Later, Virtual eXtensible LAN (VXLAN) [36]
has been introduced for better scalability;
it expands the
number of virtual LANs to up to 16 million by leveraging a 24-
bit identiﬁer. SPB [27] and Trill [1], [48] are layer 2 routing
protocols enabling multi-path communication among virtual
LANs within the same physical LAN. Although security is an
important property in network segmentation, unfortunately it
has not been treated as a major concern—without protection
in membership or access control. To isolate each segment, the
use of a large number of security middleboxes is necessary,
thus increasing operational costs and management complexity.
As the closest related work, SVLAN [33] is an archi-
tecture enhancing security in network isolation by enforcing