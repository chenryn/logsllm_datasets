``` literallayout
# lvconvert --merge vg00/lvol1_snap
```
您可以在命令行中指定多个快照，或者您可以使用 LVM
对象标签指定要合并到其各自原始卷的快照。在下面的示例中，逻辑卷
`vg00/lvol1`{.literal}、`vg00/lvol2`{.literal}和 `vg00/lvol3`{.literal}
都使用标签 `@some_tag`{.literal}
进行标记。下面的命令按顺序合并所有三个卷的快照逻辑卷：
`vg00/lvol1`{.literal}，然后是 `vg00/lvol2`{.literal}，然后是
`vg00/lvol3`{.literal}。如果使用 `--background`{.literal}
选项，则会同时进行所有快照逻辑卷合并。
``` literallayout
# lvconvert --merge @some_tag
```
有关 `lvconvert --merge`{.literal} 命令的详情请参考
`lvconvert`{.literal}(8)man page。
:::
:::
[]{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes}第 12 章 创建和管理精简配置的逻辑卷（精简卷） {.title}
:::
逻辑卷可以使用精简模式置备。这可让您创建大于可用扩展的逻辑卷。
::: section
::: titlepage
# []{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#con_thin-volumes_thinly-provisioned-logical-volumes}精简配置的逻辑卷（精简卷） {.title}
:::
逻辑卷可以使用精简模式置备。这可让您创建大于可用扩展的逻辑卷。使用精简配置，您可以管理一个空闲空间的存储池，称为精简池，可在应用程序需要时将其分配给任意数量的设备。然后，当应用程序实际写入逻辑卷时，您可以创建可绑定到精简池的设备以便以后分配。可在需要时动态扩展精简池，以便有效分配存储空间。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
不支持集群中跨节点的精简卷。精简池及其所有精简卷必须只在一个集群节点中单独激活。
:::
通过使用精简配置，存储管理员可过量使用物理存储，从而避免购买额外的存储。例如：如果
10 个用户为每个应用程序请求一个 100GB
文件系统，存储管理员可以为每个用户创建一个 100GB
文件系统，但其后端的实际存储可以小于这个大小，它在需要时才使用实际的存储。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用精简配置时，存储管理员务必要监控存储池，并在其被完全占用时添加更多容量。
:::
要确定可以使用所有可用空间，LVM
支持数据丢弃功能。这允许重复使用丢弃文件或其他块范围使用的空间。
有关创建精简卷的详情，请参考
[创建精简置备的逻辑卷](#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-volumes_thinly-provisioned-logical-volumes "创建精简配置的逻辑卷"){.link}。
精简卷支持新的复制时写入（COW）快照逻辑卷部署，这将允许很多虚拟设备在精简池中共享相同数据。有关精简快照卷的详情，请参考
[精简配置的快照卷](#logical_volumes-configuring-and-managing-logical-volumes.html#thin-snapshot-volumes_lvm-logical-volumes "精简配置的快照卷"){.link}。
:::
::: section
::: titlepage
# []{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-volumes_thinly-provisioned-logical-volumes}创建精简配置的逻辑卷 {.title}
:::
这个过程提供了创建和增长精简置备逻辑卷的基本命令概述。有关 LVM
精简配置的详情，以及使用带精简置备逻辑卷的 LVM 命令和工具的信息，请参考
`lvmthin`{.literal}(7)手册页。
要创建精简卷，请执行以下任务：
::: orderedlist
1.  使用 `vgcreate`{.literal} 命令创建卷组。
2.  使用 `lvcreate`{.literal} 命令创建精简池。
3.  使用 `lvcreate`{.literal} 命令在精简池中创建精简卷。
:::
您可以使用 `lvcreate`{.literal} 命令的 `-T`{.literal} （或
`--thin`{.literal}）选项来创建精简池或精简卷。您还可以使用
`lvcreate`{.literal} 命令的 `-T`{.literal}
选项创建精简池和一个精简卷，并使用单个命令同时在那个池中创建精简卷。
以下命令使用 `lvcreate`{.literal} 选项在卷组 `vg001`{.literal}
中创建名为 `mythinpool`{.literal} 的精简池，大小为
100M。`-T`{.literal}请注意：由于您要创建物理空间池，您必须指定池的大小。`lvcreate`{.literal}
命令的 `-T`{.literal}
选项没有使用参数，它会假定要从命令指定的其他选项中创建设备类型。
``` literallayout
# lvcreate -L 100M -T vg001/mythinpool
  Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
  Logical volume "mythinpool" created.
# lvs
  LV         VG    Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  mythinpool vg001 twi-a-tz-- 100.00m             0.00   10.84
```
以下命令使用 `lvcreate`{.literal} 命令的 `-T`{.literal} 选项在精简池
`vg001/mythinpool`{.literal} 中创建一个名为 `thinvolume`{.literal}
的精简卷。请注意：在这种情况下，您要指定虚拟大小，并且您要为容量大于包含它的卷指定虚拟大小。
``` literallayout
# lvcreate -V 1G -T vg001/mythinpool -n thinvolume
  WARNING: Sum of all thin volume sizes (1.00 GiB) exceeds the size of thin pool vg001/mythinpool (100.00 MiB).
  WARNING: You have not turned on protection against thin pools running out of space.
  WARNING: Set activation/thin_pool_autoextend_threshold below 100 to trigger automatic extension of thin pools before they get full.
  Logical volume "thinvolume" created.
# lvs
  LV          VG       Attr     LSize   Pool       Origin Data%  Move Log Copy%  Convert
  mythinpool  vg001    twi-a-tz 100.00m                     0.00
  thinvolume  vg001    Vwi-a-tz   1.00g mythinpool          0.00
```
以下命令使用 `lvcreate`{.literal} 命令的 `-T`{.literal}
选项创建一个精简池，并在那个池中创建一个精简卷（为 `lvcreate`{.literal}
命令指定大小和虚拟大小参数）。这个命令在卷组 `vg001`{.literal}
中创建一个名为 `mythinpool`{.literal} 的精简池，它还在该池中创建名为
`thinvolume`{.literal} 的精简卷。
``` literallayout
# lvcreate -L 100M -T vg001/mythinpool -V 1G -n thinvolume
  Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
  WARNING: Sum of all thin volume sizes (1.00 GiB) exceeds the size of thin pool vg001/mythinpool (100.00 MiB).
  WARNING: You have not turned on protection against thin pools running out of space.
  WARNING: Set activation/thin_pool_autoextend_threshold below 100 to trigger automatic extension of thin pools before they get full.
  Logical volume "thinvolume" created.
# lvs
  LV         VG    Attr       LSize   Pool       Origin Data%  Meta%  Move Log Cpy%Sync Convert
  mythinpool vg001 twi-aotz-- 100.00m                   0.00   10.94
  thinvolume vg001 Vwi-a-tz--   1.00g mythinpool        0.00
```
您还可以通过指定 `lvcreate`{.literal} 命令的 `--thinpool`{.literal}
参数来创建精简池。与 `-T`{.literal} 选项不同，`--thinpool`{.literal}
参数需要一个参数，即您要创建的精简池逻辑卷名称。以下示例指定了
`lvcreate`{.literal} 命令的 `--thinpool`{.literal} 参数在卷组
`vg001`{.literal} 中创建一个名为 `mythinpool`{.literal} 的精简池，大小为
100M:
``` literallayout
# lvcreate -L 100M --thinpool mythinpool vg001
  Thin pool volume with chunk size 64.00 KiB can address at most 15.81 TiB of data.
  Logical volume "mythinpool" created.
# lvs
  LV         VG    Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  mythinpool vg001 twi-a-tz-- 100.00m             0.00   10.84
```
使用以下条件来使用块大小：
::: itemizedlist
-   较小的块需要更多元数据并会影响到性能，但可以更好地利用快照。
-   较大的块需要较少的元数据操作，但快照的空间利用率较小。
:::
默认情况下，`lvm2`{.literal} 从 64KiB
块大小开始，并在精简池元数据设备大小超过 128MiB
时增加其值，这使得元数据保持尽量小。然而，这可能会导致一些大的块值，这使快照使用效率较低。在这种情况下，使用小的块和大的元数据是一个更好的选择。
如果卷数据的大小在 TiB 的范围内，使用 \~15.8GiB
作为元数据大小（它是支持的最大值），并根据要求设置块大小。但请注意，如果您需要扩展卷的数据大小且具有小的块，则无法增大元数据大小。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
红帽不推荐设置小于默认值的块。如果块太小，且您的卷空间不足用于元数据，则该卷将无法创建数据。监控逻辑卷以确保扩展，或在元数据卷完全满前创建更多存储。确保设置了足够大的块的精简池，使其不会超出元数据的空间。
:::
创建池时支持条带。以下命令在卷组 `vg001`{.literal} 中创建了名为
`pool`{.literal} 的 100M 精简池，其中有两个 64 kB 条，且块大小为 256
kB。它还创建一个 1T 精简卷, `vg00/thin_lv`{.literal}。
``` literallayout
# lvcreate -i 2 -I 64 -c 256 -L 100M -T vg00/pool -V 1T --name thin_lv
```
您可以使用 `lvextend`{.literal}
命令扩展精简卷的大小。但是您无法缩小精简池的大小。
以下命令调整了一个已存在的精简池大小，其大小为 100M，这样就扩展为 100M。
``` literallayout
# lvextend -L+100M vg001/mythinpool
  Extending logical volume mythinpool to 200.00 MiB
  Logical volume mythinpool successfully resized
# lvs
  LV           VG       Attr     LSize   Pool     Origin Data%  Move Log Copy%  Convert
  mythinpool   vg001    twi-a-tz 200.00m                   0.00
  thinvolume   vg001    Vwi-a-tz   1.00g mythinpool          0.00
```
和其他类型的逻辑卷一样，您可以使用 `lvrename`{.literal} 重新命名卷，使用
`lvremove`{.literal} 删除卷，使用 `lvs`{.literal} 和
`lvdisplay`{.literal} 命令显示该卷的信息。
默认情况下，`lvcreate`{.literal}
命令根据公式设置精简池元数据逻辑卷的大小(Pool_LV_size / Pool_LV_size \*
64)。如果您有大量快照，或者您的精简池中有小的块，因此以后会大量增加精简池的大小，您可能需要用
`lvcreate`{.literal} 命令的 `--poolmetadatasize`{.literal}
参数来增加精简池的元数据卷的默认值。精简池元数据逻辑卷所支持的值在 2MiB
到 16GiB 之间。
您可以使用 `lvconvert`{.literal} 命令的 `--thinpool`{.literal}
参数将现有逻辑卷转换成精简池卷。当您将现有逻辑卷转换成精简池卷时，必须结合使用
`--poolmetadata`{.literal} 参数和 `lvconvert`{.literal} 的
`--thinpool`{.literal} 参数将现有逻辑卷转换为精简池卷的元数据卷。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
将逻辑卷转换成精简池卷或者精简池元数据卷会破坏逻辑卷的内容，因为在这种情况下，`lvconvert`{.literal}
不会保留设备的内容，而是覆盖其内容。
:::
下面的例子将卷组 `vg001`{.literal} 中现有逻辑卷 `lv1`{.literal}
转换为精简池卷，并将卷组 `vg001`{.literal} 中现有逻辑卷 `lv2`{.literal}
转换为那个精简池卷的元数据卷。
``` literallayout
# lvconvert --thinpool vg001/lv1 --poolmetadata vg001/lv2
  Converted vg001/lv1 to thin pool.
```
:::
::: section
::: titlepage
# []{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#thin-snapshot-volumes_thinly-provisioned-logical-volumes}精简配置的快照卷 {.title}
:::
Red Hat Enterprise Linux
支持精简配置的快照卷。精简快照卷允许将很多虚拟设备保存在同一个数据卷中。这简化了管理过程，并允许在快照卷间共享数据。
除了所有 LVM
快照卷以及所有精简卷一样，集群的节点不支持精简快照卷。快照卷必须在一个集群节点中完全激活。
精简快照卷提供以下优点：
::: itemizedlist
-   当有相同原始卷的多个快照时，精简快照卷就可以减少磁盘用量。
-   如果同一来源有多个快照，对原始卷的写入会导致 COW
    操作保留数据。增加原始卷的快照数量应该不会造成很大的性能下降。
-   精简快照卷可用于另一个快照的逻辑卷来源。这将可以实现任意深度的递归快照（一个快照的快照的快照...​）。
-   精简逻辑卷的快照也创建一个精简逻辑卷。在要求 COW
    操作前，或直到快照已写入前，并不会消耗数据空间。
-   精简快照卷不需要使用原始卷激活，因此当原始快照卷有很多不活跃时，用户可能只激活原始卷。
-   当您删除精简置备快照卷的原始卷时，该原始卷的每个快照都会变为独立的精简置备卷。这意味着，您不需要将快照与原始卷合并，而不必选择删除原始卷，然后使用该独立卷作为新快照的原始卷创建新置备快照。
:::
虽然使用精简快照卷有很多优点，但在有些情况下，旧的 LVM
快照卷功能可能更适合您的需要：
::: itemizedlist
-   您不能更改精简池的块大小。如果精简池的块大小较大（例如：
    1MB）,且您需要一个短期存在的快照且使用大块的效率不高时，可以选择使用旧的快照功能。
-   您不能限制精简快照卷的大小 ;
    如果需要，快照将使用精简池中所有空间。这可能不适用于您的需要。
:::
一般说来，在决定使用什么快照格式时，您应该考虑具体的要求。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在使用精简配置时，存储管理员务必要监控存储池，并在其被完全占用时添加更多容量。有关配置和显示精简配置的快照卷信息的详情，请参考
[创建精简配置的快照卷](#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-snapshot-volumes_thinly-provisioned-logical-volumes "创建精简配置的快照卷"){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_thinly-provisioned-logical-volumes_configuring-and-managing-logical-volumes.html#creating-thinly-provisioned-snapshot-volumes_thinly-provisioned-logical-volumes}创建精简配置的快照卷 {.title}
:::
Red Hat Enterprise Linux 支持精简配置的快照卷。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本节概述您用来创建和增加精简置备快照卷的基本命令。有关 LVM
精简配置的详情，以及使用带精简置备逻辑卷的 LVM 命令和工具的信息，请参考
`lvmthin`{.literal}(7)手册页。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在创建精简快照卷时，您不用指定卷的大小。如果指定了 size
参数，则创建的快照不会是一个精简快照卷，也不会使用精简池来存储数据。例如：
`lvcreate -s vg/thinvolume -L10M`{.literal}
命令将无法创建精简快照，即使原始卷是一个精简卷。
:::
可为精简配置的原始卷创建精简快照，也可针对不是精简置备的原始卷创建精简快照。
您可以使用 `--name`{.literal} 命令的 `lvcreate`{.literal}
选项为快照卷指定名称。下面的命令创建了名为
`mysnapshot1`{.literal}的精简置备逻辑卷 `vg001/thinvolume`{.literal}
的精简置备快照卷。
``` literallayout
# lvcreate -s --name mysnapshot1 vg001/thinvolume
  Logical volume "mysnapshot1" created
# lvs
  LV          VG       Attr     LSize   Pool       Origin     Data%  Move Log Copy%  Convert
  mysnapshot1 vg001    Vwi-a-tz   1.00g mythinpool thinvolume   0.00