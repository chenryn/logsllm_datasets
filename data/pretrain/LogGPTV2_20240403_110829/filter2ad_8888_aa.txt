本文由 [@D0g3](https://www.d0g3.cn/about) 编写
i-SOON_CTF_2021 部分题目环境/源码后续将在Github开源  
[项目地址](https://github.com/D0g3-Lab/)
# RE
## sign_in
考点：smc+花指令+数组内异或+W型的栅栏加密(比较难看)+魔改xxtea。
32位程序，无壳，打开发现是无法吃到食物的贪吃蛇游戏，ida打开，shift 12可以看到一些关键字符串，但是无法交叉引用。
定位到main函数，发现sub_40100F函数有花，点进去看看。  
去花后，发现就是对0x401D10地址开始的后0x256个字节进行异或0x37解密。  
所以两个方法，一是直接动调自解密，二是直接idapython还原静态分析，实际上动调会更好，确保堆栈平衡的情况下在0x401D10直接set
ip动调分析，下面也给一个idapython还原脚本。
    import idc
        st = 0x401D10
        i = 0
        while st 
        #include
        #include
        #include
        #include
        #include
        void decrypt(unsigned int *code ,unsigned int *key ,unsigned int n)
        {
            unsigned int next,end,sum;
            unsigned int rounds,e,delta=0x44336730+77;
            int i;
            rounds=6+52/n;
            sum=rounds*delta;    
            next=code[0];//设置next为code的第一个 
            do
            {
                e=(sum>>2)&3;
                for(i=n-1;i>0;i--)//解密最后一个到第二个
                {
                    end=code[i-1];
                    code[i]-=(( (end>>5^next>3^end>5^next>3^end=0;i--)
            {
                flag[i]^=flag[(i+1)%32];
            }
            printf("%s",flag);
        }
        //Th4_1mp0rtant_th2n9_is_t0_le@rn!
## virus
考点：傀儡进程(pe映像切换)，双线程异或，12宫密码部分矩阵加密，sm4。
ida打开，发现先是读取了一个资源，然后进行异或解密，后面就是傀儡进程的代码了，所以实际上，我们需要分析的是这个资源文件。
两种方法提取文件，ida动调dump出来，resource hacker软件提取出来，然后解密，得到flag.exe。
    #include
        #include
        int main(void){
            FILE *p;
            char v[0x3104d]={0};
            int i;
            p=fopen("LOCALIZATION.bin","rb");
            fread(&v, 1, 0x3104d, p);
            for(i=0;i里面7分钟左右的部分。
我看了各位师傅的wp后，发现很大一部分都是用的爆破，也在预期之类，因为4个字节确实可以爆破，但实际上这个算法的加密就是解密，可以实验一下，多循环几次，就可以得到我们输入的内容，最终可以得到初始key为'_shy'。
所以解题就比较简单了。得到sm4的key，然后用python库，或者直接网站解，或者直接，把密文反着弄，然后用exe中的sm4部分跑一下，都可解。
    import sm4
        key = sm4.SM4Key(bytes.fromhex("68677f4e555b4e777b65785b4c726f6f"))
        s =key.decrypt(bytes.fromhex("5C89EEF56FC54492DBE3AE9CB54F4AF4E7A35E0FFC93FC766CFB29E0162FA567"))
        x=[6,7]
        for i in range(32):
            print(chr(s[i]^x[i%2]),end="")
        #Ho3_I_Exp3cTed_n0_pY_1n_the_Ctf!
## mazeeee
﻿IDA打开后初步分析为迷宫问题，经过判断后为10 _15_ 5的三维迷宫,需要求出路径，操作规则如下：
> xyz坐标系  
>  ‘w’：x+=2  
>  ‘s’：x-=1  
>  ‘d’：y+=2  
>  ‘a’：y-=1  
>  ‘W’：z+=1  
>  'S'：z-=1
简单写一个bfs或dfs即可得到路径，这里给出bfs脚本
    #include 
    using namespace std;
    char mp[20][20][20];  
    bool vis[20][20][20]; 
    int L, R, C;               
    int m_l[6] = {0, 0, 0, 0, 1, -1};        
    int m_r[6] = {+2, -1, 0, 0, 0, 0}; 
    int m_c[6] = {0, 0, -1, +2, 0, 0};
    char x[6]={'w','s','a','d','W','S'};
    struct position
    {
        int l, r, c; 
        string s;
    }start, End;       
    queue  q;
    bool check(int l,int r,int c)
    {
        if(l >= 0 && l = 0 && r = 0 && c > mp[i][j][k];
                    vis[i][j][k] = 0;   
                    if (mp[i][j][k] == 'S')
                    {   
                        start.l = i;
                        start.r = j;
                        start.c = k;
                    }
                    if (mp[i][j][k] == 'E')
                    {   
                        End.l = i;
                        End.r = j;
                        End.c = k;
                    }
                }
        bfs();   
        return 0;
    }
    //dWWwwdddWWaawwddsssSaw
得到路径为：dWWwwdddWWaawwddsssSaw
继续可以进行动态调试分析，可知需要将得到的路径的与已知数组进行异或才能得到flag（注意，已知数组的长度为路径长度的两倍，因此需要将路径进行循环异或），但是该数组并不能通过动态调试获取。只能通过查看该数组的交叉引用来获取。  
一个关于位运算的解密，直接用脚本求解即可
    for(int i = 0; i < 22; i++)
            key[i] = (k[i] & 0x1F) | (k[(i + 1) % 22] & 0xE0);
得到key数组后直接异或解密得到flag
    **********************W3lc0me_t0_The_Maze!!}
此题显然到这里还没有结束，我们通过得到的flag和IDA可以看出：  
提示前面应该还有一段flag，此时查看Strings可以发现base64的字母表以及一串base64加密后的字符串  
直接base64解密发现是乱码，因为base64的字母表在主函数中被修改过  
简单的换位加密，得到修改后的base64字母表直接解密即可
**_D0g3{Y0u^Can=So1ve_it!W3lc0me_t0_The_Maze!!}_**
## localhost:2333
flag: d0g3{Go1aN9_vM_1S_VERY_e@$Y!!}
**题目描述**
看看2333端口
**题目制作过程**
题目使用golang编写，程序内部在本地2333端口开了一个服务，程序需要在浏览器访问localhost:2333才能进行输入，由于go语言本身可以恢复符号表，所以将虚拟机指令函数全部命名成`sub_x`，为了逆向难度，在编译程序时没有采用`//go:noinline`方式编译，所以反编译出来的代码会比较抽象
    //寄存器结构
    type register struct {
        eax uint8
        ebx uint8
        ecx uint8
        edx uint8
        eip uint32
    }
    // 指令函数对应，每个函数后缀对应OPCODE
    // push
    func (reg *register) sub_0 () {}
    // pop
    func (reg *register) sub_1 (){}
    // xor
    func (reg *register) sub_2 (){}
    // sub
    func (reg *register) sub_3 (){}
    // add
    func (reg *register) sub_4() {}
    // or
    func (reg *register) sub_5 () {}
    // shl
    func (reg *register) sub_6() {}
    // shr
    func (reg *register) sub_7() {}
    // mov
    func (reg *register) sub_8() {}
    // 寄存器选择函数，返回一个寄存器指针
    func (reg *register)selectReg(optionReg uint8) (regPtr *uint8){
        var retVal *uint8
        switch optionReg {
        case 1:
            retVal = &((*reg).eax)