exploits the CAN arbitration mechanism which establishes
transmission priority based on message identiﬁers, i.e., the
lower the ID value, the higher the priority. Thus, continuously
sending frames with the highest priority would prohibit any
legit transmissions. Another attack approach reported in [24]
and [21] is to manipulate CAN transmissions directly at the
physical layer to prevent correct generation and interpretation
of CAN symbols. This type of attack can be used to com-
pletely block CAN communication or can be even targeting
speciﬁc messages or nodes [21]. Several lines of work have
proposed solutions for some types of DoS attacks. The work
in [6] introduces a mechanism used to detect and prevent a
USENIX Association
30th USENIX Security Symposium    4261
DoS attack by resetting the targeted ECU and preventing it to
reach the Bus-Off state. ID-hopping is efﬁcient in preventing
DoS attacks targeted to speciﬁc messages. However, none
of these related works can help against a generalized DoS
attacks that prevents all CAN transmissions by ﬂooding the
bus with a high-priority ID.
Countermeasures such as disconnecting adversarial seg-
ments of the bus are to the best of our knowledge yet un-
explored. Interestingly however, the idea of using relays to
disconnect sections of the CAN bus was previously employed
by several works for fault detection and recovery on CAN [25].
More recently, similar topologies with relays were studied in
the context of fault diagnosis by [32] and [33]. Note however
that these works are using basic relays to simulate broken
wires. The pairwise 2-pole-relay-resistor structure from our
setup (detailed later in Figure 3) is unique to CANARY and
to the best of our knowledge has not been proposed elsewhere.
Another approach proposed for fault isolation is the use of an
active star topology where all nodes are connected to a central
node. This node acts as a router which isolates trafﬁc from
nodes found to be faulty or ones transmitting other IDs than
they are supposed to according to a routing table [23].
There is also a large body of works that addresses intru-
sion detection systems (IDS) on CAN. Our work does not
rely on a speciﬁc IDS, we use Bloom ﬁlters [3] because of
their compact representation. The use of Bloom ﬁlters in
the context of CAN buses has been also explored in [12].
There are of course many other solutions and any of them can
be integrated in the IDS from the current proposal. Several
works have focused on basic aspects of CAN trafﬁc to detect
intrusions such as the frequency of frame arrival time [28],
the Hamming distance between frames [10] the entropy of
CAN frames [22], [18] or timing characteristics of a remote
frame [17]. Other works have focused on physical characteris-
tics such as clock skews [7] or voltage levels [8]. Some recent
overviews on existing proposals for securing the CAN bus
can be found in [1] and [4].
4 Proposed framework: modiﬁed CAN topol-
ogy and the defense mechanism
This section provides the description of the modiﬁed topology
that stays at the core of our experimental setting and provides
an overview of the proposed solution.
4.1 Modiﬁed CAN-bus topology
We begin with providing an overview of the new network
architecture in Figure 2. The network topology shows relays
placed next to each node and the Bus Guardian recording traf-
ﬁc to the left and right sides of the network. Upon detecting
an intrusion, the Bus Guardian will trigger the relays to locate
the intruder, isolate it to the left or to the right side of the
network, and then it will ﬁlter and redirect trafﬁc from one
Figure 2: Brief schematic of the network topology, relay place-
ment, Bus Guardian and an adversary near ECU2.
side of the network to the other. We also suggest potential ad-
versarial presence near ECU2. By triggering the relays to the
left or right of the ECU, the adversary can be isolated to the
left or to the right of the network, and incoming trafﬁc ﬁltered
and redirected to the side which is free of the adversary. The
adversary can be also cut-off from the network by triggering
both the left and right relays that surround him but by doing
this, one may also remove a legitimate ECU, such as ECU2,
which is undesired. Consequently, isolating the intruder suc-
cessively to the left and right sides of the network, ﬁltering
incoming trafﬁc and redirecting it is the preferred solution.
Figure 3 shows the relay placement around a single node,
i.e., ECUi. There is one relay on the CAN-Low line, i.e., Rlow,i,
and one on the CAN-High wire, i.e., Rhigh,i. The relays will
be triggered at the same time such that the impedance at the
end of the line remains 120Ω when the relays simultaneously
switch from position (1) to position (2) effectively closing the
bus after ECUi. The effects of relay switching on normal bus
operation are discussed later in the experimental section. In
brief, the time to switch the relays from our setup is around
5ms which may result in a brief disturbance of the bus. Since
the time that a frame spends on the bus is around 200µs for
a 500Kbps bus (a commonly employed speed), and applica-
tions usually work at a 50% bus-load, an average of a dozen
frames may be occurring on the bus during this 5ms interval.
Since each sender will get a transmission error in such circum-
stances (due to the existing error control mechanisms on the
CAN bus) and will automatically attempt to re-send the frame,
the number of lost frames is actually zero. This is later proved
in our experiments. Nonetheless, the 5ms switching time was
achieved with some off-the-shelf JQC-3F-5VDC relays that
required no special adaptations for our setup. If needed, for
more demanding applications, much faster relays are available
that can operate well beyond the 1ms range and which can
ensure that bus disturbances will last for at most the period
of a single CAN frame, i.e., ≈ 200µs for the 500Kbps CAN.
Figure 3 extends this graphical depiction by showing the re-
lay placement in case of the ﬁve nodes from our setup. By
switching any pair of relays Ri =,i = 1..n
the bus is cut after ECUi, effectively splitting the bus into two
distinct sub-networks, while the Bus Guardian can still route
trafﬁc from one side to the other.
4262    30th USENIX Security Symposium
USENIX Association
(i)
(ii)
Figure 3: Relay placement near a single node (i) and detailed schematic with relays near ﬁve nodes and a Bus Guardian (ii)
4.2 Adversary types and countermeasures
Based on the exact intruder location, we envision three types
of adversaries against CANARY’s defense mechanism:
• Type (I) adversaries are the easiest to address. They are
adversaries that tap the bus, or compromise a unit, at a loca-
tion which can be completely isolated. Trafﬁc redirection
from the left and right sides of the bus may be needed, if
the adversary is between two relays in the middle of the
bus. This can be done at 0% frame loss as shown later in
the experiments. A Type (I) adversary is shown in Figure 4
(i) which depicts a compromised ECU5 that is isolated by
R5. If the compromised unit is non-essential, e.g., an OBD
diagnosis tool or an Android head unit, this case does not
require trafﬁc redirection.
• Type (II) adversaries will tap the bus in the vicinity of
a controller located at the end of the bus. In this case the
relays will disconnect the adversary from the bus along with
the legitimate node, e.g., R1 in Figure 4 (ii). Trafﬁc will be
redirected from both sides (and ﬁltered when coming from
the adversary side). The worst damage that the adversary
could inﬂict is to cause a DoS with no recoverable trafﬁc
from its bus segment, but the rest of the network remains
unaffected. A practical example may be a compromised
peripheral, e.g., a controller of some vehicle body element
(mirrors, windows, etc.) that may be isolated at the cost of
losing the functionalities nearby but without affecting the
rest of the vehicle functionalities (doors, ignition, etc.).
• Type (III) adversaries are the most dangerous. They tap the
bus near an ECU in the center of the bus making it impos-
sible to isolate the adversary between two relays without
the legitimate ECU (which in this case we assume to carry
some essential functionalities). Trafﬁc has to be redirected
from both sides (and ﬁltered) but the adversary may cause a
full DoS on the side where it was isolated. Since we cannot
afford to drop the functionalities on either sides (to the left
or right of the adversary) nor on the legitimate ECU nearby,
trafﬁc has to be load-balanced between the left and right
sides, e.g., this is done by alternatively triggering relays
R2 and R3 in Figure 4 (iii). Worst case, the adversary can
cause a full DoS on the side where it is isolated, but due to
the load-balancing, the DoS will be halved on both sides of
the network and only the nearby ECU will be continuously
affected. A practical example could be a compromised le-
gitimate ECU located at a key position on the bus.
(i) complete intruder isolation
(ii) intruder isolated with some legitimate ECUs
(iii) intruder load-balanced to the left/right of the network
Figure 4: The three types of intruder locations along relays
and the corresponding defense mechanisms in CANARY
USENIX Association
30th USENIX Security Symposium    4263
ECUi120  120  (1)(2)(1)(2)Rhigh,iRlow,iRiBrieﬂy: Type (I) adversaries can be fully isolated at no cost
for legitimate nodes, Type (II) adversaries can be isolated
while possibly losing communication with some (hopefully
non-essential) ECUs and Type (III) adversaries cannot be
fully isolated but have to be load-balanced to the left and right
sides of the network. Other variations can be imagined. For
example, depending on speciﬁc implementation details, if the
functionalities of ECU3 from Figure 4 are non-essential (iii),
the Type (III) adversary in the middle of the bus may be also
cut along with ECU3 while trafﬁc is redirected between the
left and right sides. Ultimately, in case of a complete DoS it
may be even preferable to isolate the adversary along with
ECU3 by cutting their bus segment. Such a decision however,
depends on the speciﬁc functionalities that the ECU is imple-
menting, for the exposition in this work we cannot delve into
such details. For a crisper image, Figure 4 mostly depicts ex-
ternal adversaries, but as stated in the text, the adversary may
be a compromised unit as well. As expected, since Type (III)
adversaries are the hardest to address we focus most of our
work on this type of adversary and the load-balanced defense
mechanism. Type (I) and (II) adversaries can be addressed by
immediate simpliﬁcations.
4.3 Overview of Bus Guardian activities
We provide a short overview of the actions of the Bus
Guardian in the ﬂowchart from Figure 5. The actions of the
Bus Guardian begin by recording and ﬁltering trafﬁc to de-
tect intrusions. Once the intrusion is detected, the intruder
is located by Algorithm 1 and then it is isolated, trafﬁc ﬁl-
tered/redirected according to Algorithm 2.
To detect intrusions, in the trafﬁc ﬁltering block from Fig-
ure 5, we suggest three types of simple and efﬁcient mech-
anisms that can be used: (1) Bloom ﬁlters to detect frames
with IDs that are unknown to the bus, i.e., fuzzing attacks,
(2) a possible extension with counting Bloom ﬁlters, i.e., to
spot replay attacks, and (3) monitoring for the arrival rate of
frames on the bus λ which is a good indicator for DoS attacks.
CAN deployments inside cars usually work at a 50% effec-
tive busload which corresponds to an arrival rate of λ ≈ 2000
frames per second. If the busload peaks well over 50% for
extended periods of time, e.g., several milliseconds or beyond,
it may be a good indicator that a DoS attack is taking place.
Since the ﬁltering mechanism that we further use requires
speciﬁc computations on each packet, in order to save com-
putational it may be preferable to use the arrival rate of the
packets for activating the ﬁlters. Determining the current rate
λ requires only to count packets in a speciﬁc window, e.g.,
100ms, and a deeper inspection of the packets can be triggered
only when needed. On the high-end controller that we used,
the computations required by the ﬁlters were easily handled
and consequently in all the experiments that follow we detect
intrusions based on any single packet that is not part of the
trace (regardless of the current bus rate λ which we suggest as
an option for implementation on low-end controllers). In our
application we use a regular Bloom ﬁlter to detect unknown
IDs and a secondary Bloom ﬁlter to detect multiple occur-
rences of the same same frame during small time intervals,
i.e., replay attacks. Finally, any existing IDS can be incor-
porated inside CANARY’s Bus Guardian. The main focus
of this work and our primary contribution are the intruder
isolation and load balancing mechanisms which have never
been addressed before and which are the only mechanisms
proposed so far that can alleviate DoS attacks.
Figure 5: Flowchart of the Bus Guardian actions
The Bloom ﬁlter [3] is an array of m bits that is modiﬁed
by the output of k hash functions. For each message that the
ﬁlter learns, each of the k hash functions selects an index 1..m
in the ﬁlter and the corresponding bit is set to 1. This happens
during the training phase. Later, to check that a message is
recognized by the ﬁlter, the k indexes are veriﬁed and the
message is recognized if and only if all their corresponding
bits in the ﬁlter are set to 1. This structure can be naturally ex-
tended to count for multiple occurrences of the same object by
replacing the bits inside the ﬁlter with counters, i.e., counting
Bloom ﬁlters. A survey on various types of Bloom ﬁlters is
available in [27]. We calibrated a set of regular Bloom ﬁlters
and tested their efﬁciency on a CAN trace collected from a
real-world vehicle (more details on this data can be found in
the experimental section). Half of the messages were turned
into adversarial injections with randomized IDs that are not
present in the legitimate trace. None of the genuine frames are
misclassiﬁed, this is the expected behavior for Bloom ﬁlters
which have a zero false negative rate. From our implementa-
tion we determined that a ﬁlter size of 512-1024 bits provides
excellent classiﬁcation results with a false positive rate well
below 0.1%. Storing 100 IDs would require at least 1100 bits
(considering 11-bit IDs) and almost three times as much if
29-bit IDs are used, thus the 512-1024 bits provide a more
compact representation (the size of the Bloom ﬁlter does not
increase with the size of the IDs). We choose to rely on the
4264    30th USENIX Security Symposium
USENIX Association
non-cryptographic hash function MurMur1 which is very fast,
i.e., it requires 0.572µs for one computation on our controller.
This kind of functions are recommended for hash tables that
do not require cryptographic security, making them ideal for
Bloom ﬁltering. To ﬁlter one message, the computational time
peaked at 2.86µs when k = 7 and 3.89µs when k = 10.
Intruder localization agorithms
4.4
Having a mechanism for ﬁltering frames in place, we can
proceed to the intruder localization algorithm once the mali-
cious frames are reported. As expected, the intruder localiza-
tion algorithm performs a binary search on the network by
disconnecting parts of it and analyzing incoming trafﬁc on
the left and right sides of the network. While an algorithm
that successively disconnects each segment of the network is
straight-forward to implement, its disadvantage is that it will
fully disconnect segments of the bus, causing losses among
legitimate frames, until the intruder is located. Also, if the
adversary taps the bus near an honest node, then the algorithm
will isolate the adversary along with the legitimate node which
is undesired. An adversary may even exploit this algorithm
by sending intrusion frames to mislead it and cut legitimate
segments of the bus.
To circumvent these issues, Algorithm 1 uses only the re-
lays from one side of each node. This way, it preserves all
the network trafﬁc to the left and to the right of the bus, the
trafﬁc can be ﬁltered and redirected. The algorithm starts by
setting the left index l = 1, the right index r = n and loops
until the left l and right r indexes are next to each other. At
each step it disconnects only the relays in the middle, i.e., the
relays at index index = (cid:98)(l + r)/2(cid:99). Then it repeatedly ﬁlters
cur − tcur) > T . If needed, in
trafﬁc for time T , i.e., until (t(cid:48)