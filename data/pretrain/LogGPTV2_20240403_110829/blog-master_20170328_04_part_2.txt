![pic](20170328_04_pic_006.jpg)    
5\. A和B没有任何空间交集    
```    
ST_Disjoint — Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.    
boolean ST_Disjoint( geometry A , geometry B );    
```    
6\. A和B有空间相交, 与ST_Disjoint相反    
```    
ST_Intersects — Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they don't (they are Disjoint).     
For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)  -- geography类型允许0.00001 meters的误差    
boolean ST_Intersects( geometry geomA , geometry geomB );    
boolean ST_Intersects( geography geogA , geography geogB );    
```    
7\. A和B有空间相交，但是A或B都不会完全包含对方。即一定有一部分在对方的外面。    
```    
ST_Overlaps — Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.    
boolean ST_Overlaps(geometry A, geometry B);    
```    
![pic](20170328_04_pic_007.jpg)    
8\. 返回A和B在指定几何计算特性样式下的运算结果，或者,判断两个几何体是否符合指定的几何特性。    
```    
ST_Relate — Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.    
boolean ST_Relate(geometry geomA, geometry geomB, text intersectionMatrixPattern);    
text ST_Relate(geometry geomA, geometry geomB);    
text ST_Relate(geometry geomA, geometry geomB, integer BoundaryNodeRule);    
```    
http://postgis.net/docs/manual-2.3/ST_Relate.html    
运算样式如下    
https://en.wikipedia.org/wiki/DE-9IM    
![pic](20170328_04_pic_009.jpg)    
9\. 判断A几何特性是否包含B几何特性    
```    
ST_RelateMatch — Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2    
boolean ST_RelateMatch(text intersectionMatrix, text intersectionMatrixPattern);    
SELECT ST_RelateMatch('101202FFF', 'TTTTTTFFF') ;    
-- result --    
t    
--example of common intersection matrix patterns and example matrices    
-- comparing relationships of involving one invalid geometry and ( a line and polygon that intersect at interior and boundary)    
SELECT mat.name, pat.name, ST_RelateMatch(mat.val, pat.val) As satisfied    
    FROM    
        ( VALUES ('Equality', 'T1FF1FFF1'),    
                ('Overlaps', 'T*T***T**'),    
                ('Within', 'T*F**F***'),    
                ('Disjoint', 'FF*FF****') As pat(name,val)    
        CROSS JOIN    
            (	VALUES ('Self intersections (invalid)', '111111111'),    
                    ('IE2_BI1_BB0_BE1_EI1_EE2', 'FF2101102'),    
                    ('IB1_IE1_BB0_BE0_EI2_EI1_EE2', 'F11F00212')    
            ) As mat(name,val);    
```    
10\. A和B至少有1个公共点，但是他们的内部没有相交。    
```    
ST_Touches — Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.    
boolean ST_Touches(geometry g1, geometry g2);    
```    
![pic](20170328_04_pic_010.jpg)    
11\. A完全在B里面    
```    
ST_Within — Returns true if the geometry A is completely inside geometry B    
boolean ST_Within(geometry A, geometry B);    
```    
![pic](20170328_04_pic_011.jpg)    
### 如何实现本文的视觉挖掘?  
几何特性如下，A为存储的multipoint(或者单点)，B为我们输入的条件线段。  
那么应该具备如下特性:  
1\. A 和 B 有公共点，但是他们的内部不存在相交。  
或者  
2\. A 完全在B里面。  
或者  
3\. A 和 B 内部相交。  
### 转换为SQL  
1\. 点击1号店铺在2到100次之间的用户有哪些？  
```  
select * from test1 where      
(  
st_touches( ST_LineFromText('LINESTRING(1 2, 1 100)'), feeds )  
or  
st_within( feeds, ST_LineFromText('LINESTRING(1 2, 1 100)') )  
or
st_crosses( feeds, ST_LineFromText('LINESTRING(1 2, 1 100)') )
)  
;   
 userid |                                                 feeds                                                    
--------+--------------------------------------------------------------------------------------------------------  
      2 | 0104000000010000000101000000000000000000F03F0000000000005940  
      5 | 0104000000020000000101000000000000000000F03F0000000000005940010100000000000000000000400000000000005940  
(2 rows)  
执行计划  
 Bitmap Heap Scan on public.test1  (cost=12.41..17.95 rows=1 width=40) (actual time=0.166..0.209 rows=2 loops=1)
   Output: userid, feeds
   Recheck Cond: (('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry && test1.feeds) OR ('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry ~ test1.feeds) OR (test1.feeds && '010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry))    -- 这个实现需要重新检查
   Filter: ((('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry && test1.feeds) AND _st_touches('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry, test1.feeds)) OR (('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry ~ test1.feeds) AND _st_contains('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry, test1.feeds)) OR ((test1.feeds && '010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry) AND _st_crosses(test1.feeds, '010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry)))   -- 重新检测过滤的条件
   Heap Blocks: exact=1
   Buffers: shared hit=4
   ->  BitmapOr  (cost=8.28..8.28 rows=1 width=0) (actual time=0.020..0.020 rows=0 loops=1)  
         Buffers: shared hit=2  
         ->  Bitmap Index Scan on idx_test1_feeds  (cost=0.00..4.14 rows=1 width=0) (actual time=0.015..0.015 rows=2 loops=1)  
               Index Cond: ('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry && test1.feeds)  -- 这里可能会有大量符合条件的记录  
               Buffers: shared hit=1  
         ->  Bitmap Index Scan on idx_test1_feeds  (cost=0.00..4.14 rows=1 width=0) (actual time=0.004..0.004 rows=1 loops=1)  
               Index Cond: ('010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry ~ test1.feeds)   -- 针对单个点的  ~ — Returns TRUE if A's bounding box contains B's.  
               Buffers: shared hit=1  
         ->  Bitmap Index Scan on idx_test1_feeds  (cost=0.00..4.14 rows=1 width=0) (actual time=0.003..0.003 rows=2 loops=1)
               Index Cond: (test1.feeds && '010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry)
               Buffers: shared hit=1
```  
## 性能优化  
不管是multipoint还是linestring，理论上视觉判断是很好判断的，但是目前postgis没有对这个简单的视觉判断加直接的索引过滤，需要使用st_touches和st_within两个来判断，而且multipoint会转换为linestring，这样的话相交的概率就大大增加了。  
优化方法，每个用户，每个店铺对应一条记录，店铺和访问次数可以使用一个point来表示。  
通过st_within来判断即可，可以走索引。  
当然这么做，和存两个标量字段的效率就差不多了。   
## 小结      
PostGIS在民用、科研、军工等各个领域都有应用，贯穿测绘、宇航局、气象、视觉、导航、物流、物联网等等各个行业。      
几乎所有的视觉或地图类的框架也将PostGIS作为默认组件来支持。      
http://postgis.net/docs/manual-2.3/      
实际上有很多应用可以往视觉处理方面靠，比如本文提到的根据店铺的访问次数圈人的场景，如果将其存储为multipoint，那么圈人的动作就可以转换为视觉处理，求相交。      
通过PostGIS的空间索引，这种应用完全可以做到毫秒级的响应。      
让我们一起迎接实时营销的毫秒时代。      
同时我们也可以开脑洞想象一下，是不是还有很多解不了的问题，可以用视觉处理来解决呢？      
## 参考          
[《OpenGIS Implementation Standard for Geographic information - Simple feature access - Part 2: SQL option》](20170328_04_pdf_001.pdf)    
http://postgis.net/docs/manual-2.3/        
http://pointclouds.org/      
http://postgis.net/docs/manual-2.3/ST_MPointFromText.html          
http://postgis.net/docs/manual-2.3/ST_GeomFromText.html          
http://postgis.net/docs/manual-2.3/ST_MakeLine.html        
http://postgis.net/docs/manual-2.3/ST_MLineFromText.html        
[《恭迎万亿级营销(圈人)潇洒的迈入毫秒时代 - 万亿user_tags级实时推荐系统数据库设计》](../201612/20161225_01.md)          
[《基于 阿里云 RDS PostgreSQL 打造实时用户画像推荐系统》](../201610/20161021_01.md)        
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")