}else {
dp[] [j] = dp[i] [j1] 11  dp[i1] [j] 11  dp[≤] [j2] ;
上
return dp[m] [n];
7.8股票交易
股票交易类问题通常可以用动态规划来解决。对于稍微复杂一些的股票交易类问题，比如需
要冷却时间或者交易费用，则可以用通过动态规划实现的状态机来解决。
121.Best Time to Buy and Sell Stock (Easy)
题目描述
给定一段时间内每天的股票价格，已知你只可以买卖各一次，求最大的收益。
输人输出样例
输人一个一维整数数组，表示每天的股票价格：输出一个整数，表示最大的收益。
---
## Page 65
7.8股票交易
60/143 
Input: [7,1,5,3,6,4]
Output: 5
在这个样例中，最大的利润为在第二天价格为1时买入，在第五天价格为6时卖出。
题解
我们可以遍历一遍数组，在每一个位置i时，记录i位置之前所有价格中的最低价格，然后
将当前的价格作为售出价格，查看当前收益是不是最大收益即可。
int maxProfit(vector& prices) {
int sell = 0, buy = INT_MIN;
for (int i = 0; i & prices) {
int days = prices.size();
if(days= days){
return maxProfitUnlimited(prices);
vector buy(k + 1, INT_MIN) , se11(k + 1, 0);
for (int i = 0; i  prices) {
int maxProfit = 0;
for (int  - 1; i  prices[i-1]){
maxProfit += prices[] - prices[i-1];
return maxProfit;
309.Best Time to Buy and Sell Stock with Cooldown (Medium)
题目描述
给定一段时间内每天的股票价格，已知每次卖出之后必须冷却一天，且每次只能拥有一支股
票，求最大的收益。
输人输出样例
输人一个一维整数数组，表示每天的股票价格：输出一个整数，表示最大的收益。
Input: [1,2,3,0,2]
Output: 3
在这个样例中，最大的利润获取操作是买人、卖出、冷却、买人、卖出。
题解
我们可以使用状态机来解决这类复杂的状态转移间题，通过建立多个状态以及它们的转移方
式，我们可以很容易地推导出各个状态的转移方程。如图所示，我们可以建立四个状态来表示带
有冷却的股票交易，以及它们的之间的转移方式。
---
## Page 67
7.9练习
62/143
price
s2
Ang
+ price
Sell
+ price
S1
图7.4:题目309-状态机状态转移
int maxProfit(vector& prices) {
int n = prices.size() ;
if (n == 0) {
return 0;
vector buy(n), sel1(n), s1(n) , s2(n);
[0] saotxd- - [o]nq - [0]8
se11[0] - s2[0] - 0;
for （int  = 1; i  k, 邢么 T(n) = O(f(n))
通过主定理我们可以知道，归并排序属于第二种情况，且时间复杂度为O(nlogn)。其他的分
治问题也可以通过主定理求得时间复杂度，
另外，自上面下的分治可以和memoization结合，避免重复遍历相同的子问题。如果方便推
导，也可以换用自下而上的动态规划方法求解。
8.2表达式问题
241.Different Ways to Add Parentheses (Medium)
题目描述
给定一个只包含加、减和乘法的数学表达式，求通过加括号可以得到多少种不同的结果。
输人输出样例
输入是一个字符中，表示数学表达式；输出是一个数组，存储所有不同的加括号结果。
---
## Page 70
8.2表达式问题
65/143 -
Input: "2-1-1"
Output: [0, 2]
在这个样例中，有两种加括号结果：（(2-1)-1)=0和(2-(1-1))=2
题解
利用分治思想，我们可以把加括号转化为，对于每个运算符号，先执行处理两侧的数学表达
式，再处理此运算符号。注意边界情况，即字符中内无运算符号，只有数字。
vector vays;
for (int i = 0; i  left = diffWaysToCompute(input.substr(0, i));
vector right = diffWaysToCompute (input.substr(i + 1)) ;
for （const int & 1: left){
for （const int & r: right){
svitch (c) {
case *+′: vays.push_back(1 + r); break;
case -: uays-push_back(1 - r); break;
case **′: vays.push_back(1 ▪ r); break;
if (ways.empty ()) vays push_back(stoi(input));
return vays;
我们发现，某些被divide的子字符中可能重复出现多次，因此我们可以用memoization来去
重。或者与其我们从上到下用分治处理+memoization，不如直接从下到上用动态规划处理。
vector diffWaysToCompute(string input){
vector data;
vector ops;
int num = 0;
 = do xeq
istringstream ss(input + "+*);
while (ss >> num &k ss >> op) {
data. push_back (num) ;
:(do）xoeqgsnd-sdo
int n = data.size();
vector>>
dp(n, vector>(n, vector()));
for (int i = 0; i = 0; --j){
if (i == j) {
dp[j] [i] -push_back(data [i]) ;
}else {
for (int k = j; k  prime(n, true);
intcount=n-2;//去掉不是质数的1
for (int i = 2; i  prime(n, true);
inti-3，sqrtn=eqrt（n），count-n/2；//偶数一定不是质数
while（i<=sqrtn）《//最小质因子一定小于等于开方数
for（intj=i·i；j<n;j+=2▪i）{//造免偶数和重复遍历