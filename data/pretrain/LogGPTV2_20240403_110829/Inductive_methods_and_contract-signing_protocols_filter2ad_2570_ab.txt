(P CSO(pd, R, T ), P CSR(pd, O, T )). T on receiving the re-
solve request, checks if it has ever answered a request for
pd that it received before on the R−T channel. If it has,
it will not send back anything, otherwise it checks if it has
aborted or resolved pd before. If it has been aborted or re-
solved before then it sends the stored decision on the R−T
channel. If it has neither aborted nor resolved the protocol,
it converts the P CS to T P−SigO(pd), T P−SigR(pd) and
sends it on the R−T channel. It raises its resolved ﬂag for
pd and stores the resolution.
O’s resolve subprotocol is similar.
Definition 2.1. A participant(either O or R) is said to
have a valid contract if it has either sigO(pd) or T P−sigO(pd),
and either sigR(pd) or T P−sigR(pd).
The authors of the original protocol [10] claimed several
properties, including fairness and abuse-freeness. We discuss
these properties in sections 5 and 6.
2.3 Differences from the original protocol
In the original protocol [10], the resolve request consisted
of the requesting party’s signature on the contract and the
private contract signature of the other party.
In [15], the
authors showed that an accidently corrupt T may lead to
loss of fairness. They suggested a ﬁx in which the resolve
request consisted of private contract signatures of both the
parties. We take this ﬁxed protocol as our reference point
and discuss our diﬀerences.
We discuss brieﬂy the diﬀerences in our protocol from the
versions of the GJM protocol as deﬁned in [10, 15]:
1) We assume perfect cryptography, while in [10], the cryp-
tographic primitives, are deﬁned in terms of probabilistic
polynomial time computations.
2) We assume write-protected and transparent channels be-
tween the participants and T , instead of private channels.
3) We explicitly include the identities of the parties involved
in the contract in every message that is being sent. This is
in accordance with the well-established practice of including
the participants’ identities in each step of a cryptographic
protocol. Also, now each contract includes a globally unique
identiﬁer. In the previous two versions, there was no such
identiﬁer. We did this because both [10, 15] allow the fol-
lowing scenario:
O and R try to sign a contract with contract text m and
trusted third party, T . O sends P CSO(m, R, T ) intended for
R. The intruder, henceforth called I listens on the channel
between O and R.
O → R : me1=P CSO(m, R, T )
I intercepts it. R times out waiting for a reply, and quits.
O asks T for an abort token, who not having an entry for
the contract before, issues the abort token.
O → T : ma1=sigO(abort, m, O, R, T )
T → O : ma2=sigT (sigO(abort, m, O, R, T ))
Now, suppose O and R decide to sign m again with T as
the trusted third party. They start by using the exchange
protocol.
O → R : me1=P CSO(m, R, T )
R → O : me2=P CSR(m, O, T )
O → R : me3=sigO(m)
R → O : me4=sigR(m)
I intercepts.
O does not receive sigR(m) and times out. Then O asks T
for a resolution, which having an abort token in its database
for this (m, O, R, T ) sends the abort token to O. Hence
R has a valid contract and O only an abort token, thus
violating fairness.
4) The protocol as presented in [10] seems to allow T to
be contacted multiple times by each party. This seems to
violate an optimistic setting since a malicious participant
could contact T multiple times forcing it to do expensive
database searches. We revise the protocol so that T acts on
only one request from each participant for each run of the
protocol. This should be suﬃcient because according to the
protocol deﬁnition each participant is allowed to contact T
only once. O may contact it for an abort or a resolve. R
may contact it for a resolve.
1783. MULTISET-REWRITING FORMALISM
The protocol formalism we use is multiset-rewriting with
existential quantiﬁcation, MSR, as described in [3]. We out-
line it here only brieﬂy. Its syntax involves terms, facts and
rules. If one wants to represent a system in this notation,
one begins by choosing a vocabulary, or ﬁrst-order signa-
ture. This is a standard notion from many-sorted algebra or
ﬁrst-order logic. As usual, the terms over a signature are the
well-formed expressions produced by applying functions to
arguments of the correct sort. A fact is a ﬁrst-order atomic
formula over the chosen signature, without free variables.
This means that a fact is the result of applying a predicate
symbol to ground terms of the correct sorts. A state is a
multiset of facts (all over the same signature).
(cid:2)
A state transition is a rule written using two multisets of
ﬁrst-order atomic formulas, and existential quantiﬁcation,
in the syntactic form
F1, . . . , Fk −→ ∃x1 . . .∃xj.G1, . . . , Gn. The meaning of this
rule is that if some state S contains facts obtained by a
ground substitution σ from ﬁrst-order atomic formulas F1, . . .
Fk, then one possible next state is the state S
that is
similar to S, but with facts obtained by σ from F1, . . . Fk
removed and facts obtained by σ from G1, . . . Gm added,
where x1 . . . xj are replaced by new symbols. If there are free
variables in the rule F1, . . . , Fk −→ ∃x1 . . .∃xj.G1, . . . , Gn,
these are treated as universally quantiﬁed throughout the
In an application of a rule, these variables may be
rule.
replaced by any ground terms.
As an example, consider the state, {P (f (a)), P (b)}, and
rule, ( P (x) −→ ∃z. Q(f (x), z) ). A possible next state is ob-
tained by instantiating the rule to P (f (a)) −→ ∃z. Q(f (f (a))
, z). Applying this rule, we choose a new value, c, for z and
replace P (f (a)) by Q(f (f (a)), c). This gives us the state
{Q(f (f (a)), c), P (b)}.
As presented in [3], a protocol theory consists of three
parts: a bounded phase describing protocol initialization
that distributes keys or establishes other shared informa-
tion, a role generation theory that designates possibly mul-
tiple roles that each principal may play in a protocol (such as
initiator, responder, client, or server), and a disjoint union of
bounded subtheories that each characterize a possible role,
and which ensure that each role is ﬁnite. Looping is pre-
vented by certain technical conditions discussed in [3].
In our protocols, the participants would be identiﬁed with
their private digital signature and the corresponding pub-
lic veriﬁcation keys. Usually a digital signature on a mes-
sage is a pair consisting of a message and the signature on
the message. The signature is used to verify the person
who is supposed to have generated it.
In our formalism
a message x, signed with a private key ks is denoted by
sig(kv, x) where kv is the corresponding public veriﬁcation
key. This notation, allows us to model the veriﬁcation by
pattern matching. So, for example a protocol participant,
A, who is waiting for a message signed under a key whose
public veriﬁcation key is kv when presented with a mes-
sage, sig(kv, x) on the network would accept it. This rule
expressed as A(kv), N (sig(kv, x)) → A(kv, sig(kv, x)) would
abstract away the veriﬁcation process. This veriﬁcation by
pattern matching is similar to the encryption by pattern
matching as presented in [3].
Given a participant O with public veriﬁcation key ko, a
participant R with public veriﬁcation key kr and a trusted
third party, T with public veriﬁcation key kt, P CSO(m, R, T )
will be denoted by P CS(ko, m, kr, kt). F akeSignR(m, O, T )
by F akeSign(kr, m, ko, kt) and T P−SigO(m) by tsig(kt, ko,
m).
4. PROTOCOL DEFINITION IN MSR
We now discuss the precise deﬁnition of the protocol in
MSR. For the sake of convenience, we use some abbrevia-
tions:
pd =, me1 = PCS (ko, pd , kr , kt ), me2 =
PCS (kr , pd , ko, kt ),me3 = sig(ko, pd ), me4 = sig(kr , pd ),
ma1 = sigO (abort, pd ), mr1 =, ab tok =
sig(kt , ma1 ), and res cn =.
pd identiﬁes the protocol instance. mei is the i−th mes-
sage of the exchange protocol. ma1 is the abort request,
ab tok is the abort token, mr1 is the resolve request and
res cn is the resolution from T .
We assume an initial ﬁnite set(not a multiset) of facts, Σ.
Σ contains many KP (ks , kv ) predicates. A KP (ks , kv ) pred-
icate identiﬁes a protocol participant, whose private/public
key pair is (ks, kv). Honest participants amongst these will
be identiﬁed by HonestGuy(ks , kv ) predicates and weakly
dishonest participants will be identiﬁed by WDisHonestGuy
(ks , kv ). Strongly dishonest participants would be identiﬁed
by BadKey(ks , kv ) predicates. Both keys in the BadKey
predicate are known to the intruder. Σ also contains TTP
(kts , kt ) predicates which identiﬁes trusted third parties with
private/public signing key pairs (kts, kt). Furthermore, the
key pairs amongst the KP and TTP predicates are pairwise
disjoint. The publicly announced veriﬁcation keys of the
participants are denoted by AnnK(kv) predicates and the
publicly announced veriﬁcation keys of trusted third parties
are denoted by AnnT (kt) predicates.
Σ also contains contract(m) predicates which identiﬁes
contract texts. We further assume that the intruder knows
all these contract texts.
The MSR deﬁnition consists of a role generation, protocol
theories of O,R,T and the intruder theory.
4.1 Role Generation Theory
The role generation theory consists of a single rule:
KP (kos, ko),KP (krs, kr), TTP (kts, kt), contract(m) →
∃n.O0(pd), R0(pd), T0(pd), KP (kos, ko), KP (krs, kr),
TTP (kts, kt), contract(m), M (n)
This rule shall be henceforth referred to as RG. In the role
generation theory, two principals with key pairs (kos, ks)
and (kor, kr) agree upon a contract text m, identity of the
trusted third party kt, and a globally unique identiﬁer, n.
The uniqueness of n is guaranteed because existential quan-
tiﬁcation means generation of a fresh value. The trusted
third party’s state is initialized to T0(pd). The state T0(pd)
should be thought of as the state of T in which T has never
heard about pd and hence has no entry for it in its database.
This intuition makes sense because of the freshness of n, T
could not have heard of pd before this rule is applied. This
rule abstracts away the agreement of contract text, identity
of T and the globally unique identiﬁer. The predicate M
indicates the intruder’s memory. Now the participants are
ready to commence the protocol.
4.2 Protocol Theory
The protocol theory for O is shown in Table 1.
179Protocol Theory for O:
O0(pd) → O1(pd, me1), N1(me1)
O1(pd, me1) → Oab?(pd, me1, ma1), Rn1(kt, ko, ma1)
O1(pd, me1), N2(me2) → O2(pd, me1, me2)
O2(pd, me1, me2) → O3(pd, me1, me2, me3), N3(me3)
O1 :
Oab?:
O2 :
O3 :
Ores? : O3(pd, me1, me2, me3) → Ores?(pd, me1, me2, me3, mr1), Rn3(kt, ko, mr1)
Ocom : O3(pd, me1, me2, me3), N4(me4) → Ocom(pd, me1, me2, me3, me4)
Oab1 : Oab?(pd, me1, ma1), Rn2(kt, ko, ab tok) → Oab1(pd, me1, ma1, ab tok)
Ores1 : Oab?(pd, me1, ma1), Rn2(kt, ko, res cn) → Ores1(pd, me1, ma1, res cn)
Oab2 : Ores?(pd, me1, me2, me3, mr1), Rn4(kt, ko, ab tok) → Oab2(pd, me1, me2, me3, mr1, ab tok)
Ores2 : Ores?(pd, me1, me2, me3, mr1), Rn4(kt, ko, res cn) → Ores2(pd, me1, me2, me3, mr1, res cn)
Additional Protocol theory for weakly dishonest O:
O : WDisHonestGuy(kos, ko), Oi(pd,−), Nj(x) → WDisHonestGuy(kos, ko), O(pd,−, x)
Table 1: Protocol theory for O and weakly dishonest O
In the protocol deﬁnition, O has 10 states. The numbered
states O0, O1, O2, O3 denotes O’s state during the exchange
subprotocol execution. O0 is the state of O at the start of
the protocol. O1 corresponds to the state in which it has
sent me1, O2 corresponds to the state in which it has re-
ceived me2, O3 to the state in which it has sent me3. Ocom
corresponds to a state in which it has received me4. Oab?
corresponds to the state in which O has issued an abort re-
quest to T and Oab1 corresponds to the state in which it has
an abort token for this request and Ores1 corresponds to the
state in which it receives a resolution for this request. Ores?
corresponds to the state in which O has issued a resolve re-
quest to T and Oab2 and Ores2 correspond to the states in
which it has received an abort token or a resolution, respec-
tively for this request.
The network between O and R is modeled by Ni predi-
cates. The write-protected transparent channel between O
and T is modeled by Rni(kt, ko,−) predicates.
A weakly dishonest O, in addition to all of the above
states, may accept any messages from the network in any
of the 10 states and take no further part in the protocol.
We have given the templates of the rules that allow us to
model weakly dishonest O. The template O allows O
in state i ∈ {0, 1, 2, 3, ab?, res?, ab1,
ab2, res1, res2} to accept a message from the network state
j, 1 ≤ j ≤ 4 and go into the state O and remember
what was learned before. So, for example one rule that gets
instantiated by the use of this template is O0(pd), N1(x) →
O(pd, x).
As mentioned before, a strongly dishonest O is modeled
by a BadKey(ks, kv) predicate. Both ks, kv are known to
the intruder.
The protocol theory of T is given in Table 2, for R in
Table 3 and the intruder theory is given in table 4.
5. FAIRNESS
Definition 5.1. Any state that is reached from the initial
set of facts, Σ by the application of zero or more transition
rules in the role generation theory and the theories of O, R,
T and I is called a reachable conﬁguration.
We now state fairness in our formalism. Concurrent runs
of the protocol are modeled by diﬀerent instantiations of
the role generation theory. We show that each instance in
concurrent runs is fair and hence the protocol is fair. Assume
that in conﬁguration S0, two principals O and R, whose
private/public key pairs are (kos, ko), and (krs, kr), agree to
sign a contract with contractual text m, and a trusted third
party, T whose private/public key pair is (kts, kt) by using
rule RG. A fresh globally unique identiﬁer, n gets generated
and we have a new protocol instance identiﬁed by pd =
 Let the resulting conﬁguration be S1. For
the rest of the section, unless otherwise stated, reachable
conﬁgurations would mean conﬁgurations reachable from S1.
Assume O is honest and R strongly dishonest. By Oi(pd,−)
we mean O in its i−th state with ﬁrst argument as pd.
Definition 5.2. Let pd =  identify a
protocol instance. For all reachable S, an honest O has com-
pleted pd in S if Oi(pd,−) ∈ S for i ∈ {ab1, ab2, res1, res2,
com}. An honest O has an abort token for pd in S if Oi(pd,
−) ∈ S for i ∈ {ab1, ab2}. An honest O has a valid contract