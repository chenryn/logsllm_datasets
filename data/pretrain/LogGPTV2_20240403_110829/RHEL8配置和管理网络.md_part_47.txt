    `0`{.literal}。否则，它会输出 `no`{.literal}，退出状态为
    `1`{.literal}。
-   要启用锁定，以 `root`{.literal} 身份输入以下命令：
    ``` literallayout
    # firewall-cmd --lockdown-on
    ```
-   要禁用锁定，以 `root`{.literal} 身份使用以下命令：
    ``` literallayout
    # firewall-cmd --lockdown-off
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-lockdown-allow-list-options-with-the-command-line-client_configuring-firewall-lockdown}使用 CLI 配置锁定允许列表选项 {.title}
:::
锁定允许名单中可以包含命令、安全上下文、用户和用户
ID。如果允许列表中的命令条目以星号\"\*\"结尾，则以该命令开头的所有命令行都将匹配。如果没有
\"\*\"，那么包括参数的绝对命令必须匹配。
::: itemizedlist
-   上下文是正在运行的应用程序或服务的安全（SELinux）上下文。要获得正在运行的应用程序的上下文，请使用以下命令：
    ``` screen
    $ ps -e --context
    ```
    该命令返回所有正在运行的应用程序。通过
    [**[grep]{.application}**]{.strong}
    工具管道输出以便获取您感兴趣的应用程序。例如：
    ``` screen
    $ ps -e --context | grep example_program
    ```
-   要列出允许列表中的所有命令行，以 `root`{.literal} 身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-commands
    ```
-   [*要在允许列表中添加命令*]{.emphasis} command，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
-   [*要从允许列表中删除命令命令*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
-   要查询 command [*命令是否在允许列表中*]{.emphasis}，以
    `root`{.literal} 身份输入以下命令：
    ``` screen
    # firewall-cmd --query-lockdown-whitelist-command='/usr/bin/python3 -Es /usr/bin/command'
    ```
    如果为 true，该命令会输出 `yes`{.literal}，退出状态为
    `0`{.literal}。否则，它会输出 `no`{.literal}，退出状态为
    `1`{.literal}。
-   要列出允许列表中的所有安全上下文，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-contexts
    ```
-   [*要在允许列表中添加上下文 context*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-context=context
    ```
-   [*要从允许列表中删除上下文 context*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-context=context
    ```
-   [*要查询上下文上下文是否在允许列表中*]{.emphasis}，以
    `root`{.literal} 身份输入以下命令：
    ``` screen
    # firewall-cmd --query-lockdown-whitelist-context=context
    ```
    如果为 true，则输出 `yes`{.literal}，退出状态为
    `0`{.literal}，否则输出 `no`{.literal}，退出状态为 `1`{.literal}。
-   要列出允许列表中的所有用户 ID，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-uids
    ```
-   要在允许列表中添加用户 [*IDuid*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-uid=uid
    ```
-   要从允许列表中删除用户 [*IDuid*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-uid=uid
    ```
-   要查询用户 ID [*uid*]{.emphasis} 是否在 allowlist
    中，请输入以下命令：
    ``` screen
    $ firewall-cmd --query-lockdown-whitelist-uid=uid
    ```
    如果为 true，则输出 `yes`{.literal}，退出状态为
    `0`{.literal}，否则输出 `no`{.literal}，退出状态为 `1`{.literal}。
-   要列出允许列表中的所有用户名，以 `root`{.literal} 身份输入以下命令：
    ``` screen
    # firewall-cmd --list-lockdown-whitelist-users
    ```
-   要在允许列表中添加用户名 [*user*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --add-lockdown-whitelist-user=user
    ```
-   要从允许列表中删除用户名 [*user*]{.emphasis}，以 `root`{.literal}
    身份输入以下命令：
    ``` screen
    # firewall-cmd --remove-lockdown-whitelist-user=user
    ```
-   要查询用户名 [*user*]{.emphasis} 是否在 allowlist
    中，请输入以下命令：
    ``` screen
    $ firewall-cmd --query-lockdown-whitelist-user=user
    ```
    如果为 true，则输出 `yes`{.literal}，退出状态为
    `0`{.literal}，否则输出 `no`{.literal}，退出状态为 `1`{.literal}。
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-lockdown-allow-list-options-with-configuration-files_configuring-firewall-lockdown}使用配置文件配置锁定的 allowlist 选项 {.title}
:::
默认 allowlist 配置文件包含 `NetworkManager`{.literal} 上下文和
`libvirt`{.literal} 默认上下文。用户 ID 0 也位于列表中。
``` screen
```
以下是一个允许名单配置文件示例，为 `firewall-cmd`{.literal}
工具程序启用所有命令，对于一个名为 [*user*]{.emphasis}，用户 ID 为
`815`{.literal} 的用户：
``` screen
```
这个示例显示 `user id`{.literal} 和
`user name`{.literal}，但只需要一个选项。Python
是程序解释器，它位于命令行的前面。您还可以使用特定的命令，例如：
``` literallayout
/usr/bin/python3 /bin/firewall-cmd --lockdown-on
```
在这个示例中，只允许 `--lockdown-on`{.literal} 命令。
在 Red Hat Enterprise Linux 中，所有工具都放在 `/usr/bin/`{.literal}
目录中，`/bin/`{.literal} 目录被符号链接到 `/usr/bin/`{.literal}
目录。换句话说，虽然作为 `root`{.literal} 输入 `firewall-cmd`{.literal}
的路径时，可能会解析为 `/bin/firewall-cmd`{.literal}，但现在可以使用
`/usr/bin/firewall-cmd`{.literal}。所有新脚本都应该使用新位置。但请注意，如果以
`root`{.literal} 身份运行的脚本被写入来使用
`/bin/firewall-cmd`{.literal}
路径，则必须在允许列表中添加该命令路径，除了通常用于非`root`{.literal}
用户的 `/usr/bin/firewall-cmd`{.literal} 路径外。
一个命令的 name 属性末尾的 `*`{.literal}
意味着，所有以这个字符串开头的命令都匹配。如果没有
`*`{.literal}，包括参数的绝对命令必须匹配。
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#related-information-using-and-configuring-firewalld}相关信息 {.title}
:::
以下资源提供了关于 `firewalld`{.literal} 的更多信息。
### []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#installed_documentation}安装的文档
::: itemizedlist
-   `firewalld(1)`{.literal} man page - 描述了 `firewalld`{.literal}
    的命令选项。
-   `firewalld.conf(5)`{.literal} man page - 包含配置
    `firewalld`{.literal} 的信息。
-   `firewall-cmd(1)`{.literal} man page - 描述 `firewalld`{.literal}
    命令行客户端的命令选项。
-   `firewall-config(1)`{.literal} man page - 描述了
    [**[firewall-config]{.application}**]{.strong} 工具的设置。
-   `firewall-offline-cmd(1)`{.literal} man page - 描述
    `firewalld`{.literal} 离线命令行客户端的命令选项。
-   `firewalld.icmptype(5)`{.literal} man page - 描述了用于
    `ICMP`{.literal} 过滤的 XML 配置文件。
-   `firewalld.ipset(5)`{.literal} man page - 描述了
    `firewalld`{.literal} `IP`{.literal} 组件的 XML 配置文件。
-   `firewalld.service(5)`{.literal} man page - 描述了 [**[firewalld
    服务]{.application}**]{.strong} 的 XML 配置文件。
-   `firewalld.zone(5)`{.literal} man page - 描述了用于
    `firewalld`{.literal} 区配置的 XML 配置文件。
-   `firewalld.direct(5)`{.literal} man page - 描述了
    `firewalld`{.literal} 直接接口配置文件。
-   `firewalld.lockdown-whitelist(5)`{.literal} man page - 描述了
    `firewalld`{.literal} 锁定 allowlist 配置文件。
-   `firewalld.richlanguage(5)`{.literal} man page - 描述了
    `firewalld`{.literal} 丰富的语言规则语法。
-   `firewalld.zones(5)`{.literal} man page -
    介绍了区的一般信息以及如何配置它们。
-   `firewalld.dbus(5)`{.literal} man page - 描述了
    `firewalld`{.literal} 的 `D-Bus`{.literal} 接口。
:::
### []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#online_documentation}在线文档
::: itemizedlist
-   [http://www.firewalld.org/](http://www.firewalld.org/){.link} -
    `firewalld`{.literal} 主页。
:::
:::
:::
[]{#getting-started-with-nftables_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#getting-started-with-nftables_configuring-and-managing-networking}第 47 章 nftables 入门 {.title}
:::
`nftables`{.literal} 框架提供数据包分类功能，它是
`iptables`{.literal}、`ip6tables`{.literal}、`arptables`{.literal}、`ebtables`{.literal}
和 `ipset`{.literal}
工具的指定后继设备。与之前的数据包过滤工具相比，它在方便、特性和性能方面提供了大量改进，最重要的是：
::: itemizedlist
-   内置查找表而不是线性处理
-   `IPv4`{.literal} 和 `IPv6`{.literal} 协议都使用同一个框架
-   规则会以一个整体被应用，而不是分为抓取、更新和存储完整的规则集的步骤
-   支持在规则集（`nftrace`{.literal}）中进行调试和追踪，并监控追踪事件（在
    `nft`{.literal} 工具中）
-   更加一致和压缩的语法，没有特定协议的扩展
-   用于第三方应用程序的 Netlink API
:::
和 `iptables`{.literal}类似， `nftables`{.literal}
使用表来存储链。链包含执行动作的独立规则。`nft`{.literal}
工具替换了之前数据包过滤框架中的所有工具。`libnftnl`{.literal}
库可用于通过 `libmnl`{.literal} 库与 `nftables`{.literal} Netlink API
进行底层交互。
要显示规则集更改的影响，请使用 `nft list ruleset`{.literal}
命令。这些工具将表、链、规则、集合和其他对象添加到 `nftables`{.literal}
规则集中，请注意，`nftables`{.literal} 规则集操作（如
`nft flush ruleset`{.literal}
命令）可能会影响使用以前独立的旧命令安装的规则集。
::: section
::: titlepage
# []{#getting-started-with-nftables_configuring-and-managing-networking.html#assembly_migrating-from-iptables-to-nftables_getting-started-with-nftables}从 iptables 迁移到 nftables {.title}
:::
如果您的防火墙配置仍然使用 `iptables`{.literal} 规则，您可以将
`iptables`{.literal} 规则迁移到 `nftables`{.literal}。
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#when-to-use-firewalld-nftables-or-iptables_assembly_migrating-from-iptables-to-nftables}使用 firewalld、nftables 或者 iptables 时 {.title}
:::
以下是您应该使用以下工具之一的概述：
::: itemizedlist
-   `firewalld`{.literal}: 将 `firewalld`{.literal}
    工具用于简单的防火墙用例。实用程序易于使用，并涵盖这些情况下的典型用例。
-   `nftables`{.literal}: 使用 `nftables`{.literal}
    实用程序设置复杂和性能关键的防火墙，例如为整个网络设置。
-   `iptables`{.literal}: Red Hat Enterprise Linux 中的
    `iptables`{.literal} 工具使用 `nf_tables`{.literal} 内核 API 而不是
    `legacy`{.literal} 后端。`nf_tables`{.literal} API
    提供向后兼容，使用 `iptables`{.literal} 命令的脚本仍可在 Red Hat
    Enterprise Linux 中使用。对于新的防火墙脚本，红帽建议使用
    `nftables`{.literal}。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要避免不同的防火墙服务相互影响，在 RHEL
主机中只有一个服务，并禁用其他服务。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_configuring-and-managing-networking.html#converting-iptables-rules-to-nftables-rules_assembly_migrating-from-iptables-to-nftables}将 iptables 规则转换为 nftables 规则 {.title}
:::