# DoubleX: Statically Detecting Vulnerable Data Flows in Browser Extensions at Scale

**Authors:** Aurore Fass, Dolière Francis Somé, Michael Backes, and Ben Stock  
**Affiliation:** CISPA Helmholtz Center for Information Security  
**Email:** {aurore.fass, doliere.some, backes, stock}@cispa.de

## Abstract
Browser extensions are widely used to enhance users' browsing experience. By design, they have access to security- and privacy-critical APIs that web applications typically cannot. Although web pages and extensions are isolated, they can communicate through messages. A vulnerable extension can receive messages from another extension or a web page controlled by an attacker, potentially elevating the attacker's privileges to the capabilities of the extension. This can lead to security threats such as universal cross-site scripting (XSS) or sensitive user data exfiltration.

To automatically detect such security and privacy threats in benign but buggy extensions, we propose DoubleX, a static analyzer. DoubleX constructs an Extension Dependence Graph (EDG), which abstracts extension code with control and data flows, pointer analysis, and models message interactions within and outside the extension. This graph is then used to track and detect suspicious data flows between external actors and sensitive APIs in browser extensions.

We evaluated DoubleX on 154,484 Chrome extensions, flagging 278 extensions as having suspicious data flows. We verified that 89% of these flows can be influenced by external actors. Based on our threat model, we demonstrated exploitability for 184 extensions. Additionally, DoubleX accurately detected almost 93% of known flaws in a labeled set of vulnerable extensions.

## CCS Concepts
- **Security and Privacy → Web Application Security; Browser Security**

## Keywords
Web Security, Browser Extension, JavaScript, Vulnerability Detection, Static Analysis, Data Flow Analysis

## ACM Reference Format
Aurore Fass, Dolière Francis Somé, Michael Backes, and Ben Stock. 2021. DoubleX: Statically Detecting Vulnerable Data Flows in Browser Extensions at Scale. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3484745

## Introduction
The web has become a popular ecosystem used by billions of people daily. To extend their browser functionality, users install browser extensions. For the most popular desktop browser, Chrome, there are nearly 200,000 extensions, totaling over 1.2 billion installs. While some extensions merely customize the user interface, others perform more critical tasks, such as ad-blocking, which requires modifying web page content or intercepting network requests. To achieve this, extensions have privileged capabilities, including downloading arbitrary files and accessing cross-domain data.

Given their elevated privileges, extensions attract attackers. Google engineers actively work to detect and remove malicious extensions from the store. However, malicious extensions represent only a fraction of the extensions that may lead to security or privacy issues. An attacker can also abuse vulnerable extensions to elevate their privileges. By leveraging an extension's communication channels, an attacker can send payloads tailored to exploit its vulnerabilities, leading to threats such as universal XSS or sensitive user data exfiltration.

Previous works on vulnerable extensions have been either purely formal, specific to deprecated infrastructures, or based on manual analysis. EmPoWeb, a previous work, focuses on analyzing extensions' susceptibility to attacks through external messages but yields a high number of false alarms. We currently lack a precise analyzer to perform large-scale analysis and limit the number of falsely reported extensions.

In this paper, we introduce DoubleX, a static analyzer that relies on advanced data flow analysis to accurately track data from and toward security- and privacy-critical APIs in extensions. Specifically, we propose a semantic abstraction of extension code, including control and data flows, and pointer analysis. DoubleX models interactions between extension components with a message flow, resulting in an Extension Dependence Graph (EDG). DoubleX leverages the EDG to detect external messages and flag them as attacker-controllable, while collecting security- and privacy-critical APIs. It performs a data flow analysis to identify any path between external actors and these sensitive APIs, summarizing its findings in fine-grained reports.

We analyzed 154,484 Chrome extensions, flagging 278 as having externally controllable data flows or exfiltrating sensitive user information. We verified that 89% of the data flows can be influenced by an attacker, highlighting DoubleX's precision. We detected 184 extensions (with 209 vulnerabilities) that are exploitable under our threat model, leading to, e.g., arbitrary code execution in any website. DoubleX accurately flagged 92.64% of known vulnerabilities in a ground-truth set. Additionally, DoubleX is fast, analyzing 93% of our extension set in less than 20 seconds per extension, with a median time of 2.5 seconds, making it practical for large-scale analysis.

### Contributions
- **Introduction of DoubleX**: A static analyzer for large-scale analysis of browser extensions.
- **Extension Dependence Graph (EDG)**: A semantic abstraction of extension code, including control and data flows, and pointer analysis, modeling message interactions.
- **Data Flow Analysis**: Tracking data from and toward security- and privacy-critical APIs in browser extensions.
- **Large-Scale Analysis**: Identification of 184 vulnerable extensions, with high precision (89% verified dangerous data flows) and recall (92.64% detection of known vulnerabilities).
- **Public Availability**: DoubleX is publicly available for reproducibility, follow-up work, and practical detection of suspicious external data flows in specific APIs of browser extensions.

## 2. Browser Extensions
Browser extensions are third-party programs that users can install to extend their browser functionality. They can add features like ad-blocking or better integration with shopping sites. In this section, we present the extension architecture, focusing on security mechanisms and message-passing APIs.

### 2.1 Architecture and Security Considerations
Extensions have access to privileged APIs and features, unlike JavaScript in web pages, which is restricted by the Same-Origin Policy (SOP). Extensions can access arbitrary cross-domain data in the logged-in context of the user’s browser and inject code into any document. To limit risks, extensions only have access to permissions explicitly declared in their manifest.json, such as reading/writing user data, storing/retrieving data, downloading files, or accessing browsing history.

An extension is divided into four main components:
- **Background Page/Scripts**: Implements the core logic, running independently of web pages or browser windows.
- **Content Scripts**: Injected to run alongside web applications, using standard DOM APIs and accessing localStorage.
- **UI Pages**: Enable users to customize the extension's behavior.
- **Web Accessible Resources (WARs)**: Scripts executed on every page, with full extension capabilities.

### 2.2 Message Passing in Extensions
Extensions use message passing to communicate with web pages and other extensions. We present the communication channels between a web page and each extension component, within an extension, and between two extensions.

- **Web Page - Content Script**: Communicate via `postMessage` and `addEventListener` or `onmessage`.
- **Content Script - Background Page**: Use one-time requests (`runtime.sendMessage`) or long-lived connections (`runtime.connect`).
- **Web Page - Background Page**: Direct communication for Chromium-based extensions, requiring specific URLs in the manifest and initiated by the web application.
- **UI Pages and WARs**: Use the same APIs as the background page for communication.
- **Extension A - Extension B**: Communication enabled by default with all extensions, or restricted by declaring allowed extension IDs in the manifest.

## 3. Threat Model
Browser extensions can interact with web pages and other extensions. Malicious actors can send specific messages to a vulnerable extension, exploiting its flaws. Given the elevated privileges of extensions, attackers could gain the following capabilities:
- **Code Execution**: Execute arbitrary code in the extension or content script context, e.g., through `eval`.
- **Data Exfiltration**: Extract sensitive user data.
- **Universal XSS**: Execute code in any website, even without a vulnerability in the site itself.

By leveraging these capabilities, attackers can cause significant security and privacy threats.