this, it monitors and rewrites sensitive bytes escaping to
the network and the local ﬁle system. Our work adopts a
different strategy to instrument secret-redaction support
into programs, resulting in applications that can proac-
tively respond to attacks by self-censoring their address
spaces with minimal overhead.
Pointer taintedness.
In security contexts, many cate-
gories of widely exploited, memory-overwrite vulnera-
bilities (e.g., format string, memory corruption, buffer
overﬂow) have been recognized as detectable by dynamic
taint-checking on pointer dereferences [7, 8, 15, 16, 28].
Hookﬁnder [47] employs data and pointer tainting se-
mantics in a full-system emulation approach to identify
malware hooking behaviors in victim systems. Other
systems follow a similar technique to capture system-
wide information-ﬂow and detect privacy-breaching mal-
ware [19, 48].
With this high practical utility come numerous theo-
retical and practical challenges for effective pointer taint-
ing [17, 27, 43]. On the theoretical side, there are varied
views of how to interpret a pointer’s label. (Does it ex-
press a property of the pointer value, the values it points
to, values read or stored by dereferencing the pointer, or
all three?) Different taint tracking application contexts
solicit differing interpretations, and the differing interpre-
tations lead to differing taint-tracking methodologies. Our
contributions include a pointer tainting methodology that
is conducive to tracking in-memory secrets.
domain (program process redaction), such channels are
largely irrelevant, since attackers may only exﬁltrate in-
formation after redaction, which leaves no secrets for the
attacker to glean, directly or indirectly.
6.2 Process Memory Redaction
Our research introduces live process memory image san-
itization as a new problem domain for information ﬂow
analysis. Process memory redaction raises unique chal-
lenges relative to prior information ﬂow applications. It
is exceptionally sensitive to over-tainting and label creep,
since it must preserve process execution (e.g., for process
debugging, continued service availability, or attacker de-
ception); it demands exceptionally high performance; and
its security applications prominently involve large, low-
level, legacy codes, which are the most frequent victims
of cyber-attacks. Future work should expand the search
for solutions to this difﬁcult problem to consider the suit-
ability of other information ﬂow technologies, such as
static type-based analyses.
6.3 Language Compatibility
While our implementation targets one particularly ubiq-
uitous source language (C/C++), our general approach
is applicable to other similarly low-level languages, as
well as scripting languages whose interpreters are im-
plemented in C (e.g., PHP, Bash). Such languages are
common choices for implementing web services, and tar-
geting them is therefore a natural next step for the web
security thrust of our research.
7 Related Work
Dynamic tracking of in-memory secrets. Dynamic
taint-tracking lends itself as a natural technique for track-
ing secrets in software. It has been applied to study sensi-
tive data lifetime (i.e., propagation and duration in mem-
ory) in commodity applications [10, 11], analyze spyware
behavior [19, 48], and impede the propagation of secrets
to unauthorized sinks [21, 23, 49].
TaintBochs [10] uses whole-system simulation to un-
derstand secret propagation patterns in several large,
widely deployed applications, including Apache, and im-
plements secure deallocation [11] to reduce the risk of
exposure of in-memory secrets. Panorama [48] builds a
system-level information-ﬂow graph using process emula-
tion to identify malicious software tampering with infor-
mation that was not intended for their consumption. Egele
et al. [19] also utilize whole-system dynamic tainting to
analyze spyware behavior in web browser components.
While valuable, the performance impact of whole-system
analyses—often on the order of 2000% [10, 19, 48]—
remains a signiﬁcant obstacle, rendering such approaches
On the practical side, imprudent pointer tainting of-
ten leads to taint explosion in the form of over-tainting
or label-creep [40, 43]. This can impair the feasibility
of the analysis and increase the likelihood of crashes
in programs that implement data-rewriting policies [49].
To help overcome this, sophisticated strategies involving
pointer injection (PI) analysis have been proposed [16,28].
PI uses a taint bit to track the ﬂow of legitimate pointers
and another bit to track the ﬂow of untrusted data, disal-
lowing dereferences of tainted values that do not have a
corresponding pointer tainted. Our approach uses static
typing information in lieu of PI bits to achieve lower run-
time overheads and broader compatibility with low-level
legacy code.
Application-level instrumentation. Much of the prior
work on dynamic taint analysis has employed dynamic
USENIX Association  
24th USENIX Security Symposium  157
13
binary instrumentation (DBI) frameworks [9,13,29,33,38,
49] to enforce taint-tracking policies on software. These
approaches do not require application recompilation, nor
do they depend on source code information.
However, despite many optimization advances over the
years, dynamic instrumentation still suffers from signif-
icant performance overheads, and therefore cannot sup-
port high-performance applications, such as the redaction
speeds required for attacker-deceiving honey-patching of
production server code. Our work beneﬁts from research
advances on static-instrumented, dynamic data ﬂow anal-
ysis [6, 18, 30, 46] to achieve both high performance and
high accuracy by leveraging LLVM’s compilation infras-
tructure to instrument taint-propagating code into server
code binaries.
8 Conclusion
PC2S signiﬁcantly improves the feasibility of dynamic
taint-tracking for low-level legacy code that stores secrets
in graph data structures. To ease the programmer’s an-
notation burden and avoid taint explosions suffered by
prior approaches, it introduces a novel pointer-combine se-
mantics that resists taint over-propagation through graph
edges. Our LLVM implementation extends C/C++ with
declarative type qualiﬁers for secrets, and instruments
programs with taint-tracking capabilities at compile-time.
The new infrastructure is applied to realize efﬁcient,
precise honey-patching of production web servers for at-
tacker deception. The deceptive servers self-redact their
address spaces in response to intrusions, affording defend-
ers a new tool for attacker monitoring and disinformation.
9 Acknowledgments
The research reported herein was supported in part
by AFOSR Award FA9550-14-1-0173, NSF CAREER
Award #1054629, and ONR Award N00014-14-1-0030.
Any opinions, recommendations, or conclusions ex-
pressed are those of the authors and not necessarily of the
AFOSR, NSF, or ONR.
References
[1] APACHE. Apache HTTP server project. http://httpd.apache.org,
2014.
[2] ARAUJO, F., HAMLEN, K. W., BIEDERMANN, S., AND KATZEN-
BEISSER, S. From patches to honey-patches: Lightweight attacker
misdirection, deception, and disinformation. In Proc. ACM Conf.
Computer and Communications Security (CCS) (2014), pp. 942–
953.
[3] ATTARIYAN, M., AND FLINN, J. Automating conﬁguration
troubleshooting with dynamic information ﬂow analysis. In Proc.
USENIX Sym. Operating Systems Design and Implementation
(OSDI) (2010), pp. 1–11.
[4] BAUER, L., CAI, S., JIA, L., PASSARO, T., STROUCKEN, M.,
AND TIAN, Y. Run-time monitoring and formal analysis of in-
formation ﬂows in Chromium. In Proc. Annual Network & Dis-
tributed System Security Sym. (NDSS) (2015).
[5] BOSMAN, E., SLOWINSKA, A., AND BOS, H. Minemu: The
world’s fastest taint tracker. In Proc. Int. Sym. Recent Advances in
Intrusion Detection (RAID) (2011), pp. 1–20.
[6] CHANG, W., STREIFF, B., AND LIN, C. Efﬁcient and extensible
security enforcement using dynamic data ﬂow analysis. In Proc.
ACM Conf. Computer and Communications Security (CCS) (2008),
pp. 39–50.
[7] CHEN, S., PATTABIRAMAN, K., KALBARCZYK, Z., AND IYER,
R. K. Formal reasoning of various categories of widely exploited
security vulnerabilities by pointer taintedness semantics. In Proc.
IFIP TC11 Int. Conf. Information Security (SEC) (2004), pp. 83–
100.
[8] CHEN, S., XU, J., NAKKA, N., KALBARCZYK, Z., AND IYER,
R. K. Defeating memory corruption attacks via pointer taintedness
detection. In Proc. Int. Conf. Dependable Systems and Networks
(DSN) (2005), pp. 378–387.
[9] CHENG, W., ZHAO, Q., YU, B., AND HIROSHIGE, S. Taint-
Trace: Efﬁcient ﬂow tracing with dynamic binary rewriting. In
Proc. IEEE Sym. Computers and Communications (ISCC) (2006),
pp. 749–754.
[10] CHOW, J., PFAFF, B., GARFINKEL, T., CHRISTOPHER, K., AND
ROSENBLUM, M. Understanding data lifetime via whole system
simulation. In Proc. USENIX Security Symposium (2004), pp. 321–
336.
[11] CHOW, J., PFAFF, B., GARFINKEL, T., AND ROSENBLUM,
M. Shredding your garbage: Reducing data lifetime through
secure deallocation. In Proc. USENIX Security Symposium (2005),
pp. 331–346.
[12] CLANG. clang.llvm.org. http://clang.llvm.org.
[13] CLAUSE, J., LI, W., AND ORSO, A. Dytan: A generic dynamic
taint analysis framework. In Proc. ACM/SIGSOFT Int. Sym. Soft-
ware Testing and Analysis (ISSTA) (2007), pp. 196–206.
[14] COX, L. P., GILBERT, P., LAWLER, G., PISTOL, V., RAZEEN,
A., WU, B., AND CHEEMALAPATI, S. Spandex: Secure password
tracking for Android. In Proc. USENIX Security Sym. (2014).
[15] DALTON, M., KANNAN, H., AND KOZYRAKIS, C. Raksha: A
ﬂexible information ﬂow architecture for software security. In
Proc. Int. Sym. Computer Architecture (ISCA) (2007), pp. 482–
493.
[16] DALTON, M., KANNAN, H., AND KOZYRAKIS, C. Real-world
buffer overﬂow protection for userspace & kernelspace. In Proc.
USENIX Security Symposium (2008), pp. 395–410.
[17] DALTON, M., KANNAN, H., AND KOZYRAKIS, C. Tainting is
not pointless. ACM/SIGOPS Operating Systems Review (OSR) 44,
2 (2010), 88–92.
[18] DFSAN. Clang DataFlowSanitizer. http://clang.llvm.org/docs/
DataFlowSanitizer.html.
[19] EGELE, M., KRUEGEL, C., KIRDA, E., YIN, H., AND SONG, D.
Dynamic spyware analysis. In Proc. USENIX Annual Technical
Conf. (ATC) (2007), pp. 233–246.
[20] EGELE, M., SCHOLTE, T., KIRDA, E., AND KRUEGEL, C. A
survey on automated dynamic malware-analysis techniques and
tools. ACM Computing Surveys (CSUR) 44, 2 (2012), 1–42.
[21] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. N. TaintDroid: An informa-
tion ﬂow tracking system for real-time privacy monitoring on
smartphones. Communications of the ACM (CACM) 57, 3 (2014),
99–106.
[22] EPIGRAPHIC SURVEY, THE ORIENTAL INSTITUTE OF THE UNI-
VERSITY OF CHICAGO, Ed. Reliefs and Inscriptions at Luxor
Temple, vol. 1–2 of The University of Chicago Oriental Institute
158  24th USENIX Security Symposium 
USENIX Association
14
[39] SAMPSON, A. Quala: Type qualiﬁers for LLVM/Clang. https:
//github.com/sampsyo/quala, 2014.
[40] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. All you
ever wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In Proc.
IEEE Sym. Security & Privacy (S&P) (2010), pp. 317–331.
[41] SEREBRYANY, K., BRUENING, D., POTAPENKO, A., AND
VYUKOV, D. AddressSanitizer: A fast address sanity checker. In
Proc. USENIX Annual Technical Conf. (ATC) (2012), pp. 309–318.
[42] SEZER, E. C., NING, P., KIL, C., AND XU, J. Memsherlock: An
automated debugger for unknown memory corruption vulnerabili-
ties. In Proc. ACM Conf. Computer and Communications Security
(CCS) (2007), pp. 562–572.
[43] SLOWINSKA, A., AND BOS, H. Pointless tainting?: Evaluating
the practicality of pointer tainting. In Proc. ACM SIGOPS/EuroSys
European Conf. Computer Systems (EuroSys) (2009), pp. 61–74.
[44] SOUDERS, S. High Performance Web Sites: Essential Knowledge
for Front-End Engineers. O’Reilly, 2007.
[45] SUH, G. E., LEE, J. W., ZHANG, D., AND DEVADAS, S. Secure
program execution via dynamic information ﬂow tracking. In Proc.
Int. Conf. Architectural Support for Programming Languages and
Operating Systems (ASPLOS) (2004), pp. 85–96.
[46] XU, W., BHATKAR, S., AND SEKAR, R. Taint-enhanced policy
enforcement: A practical approach to defeat a wide range of
attacks. In Proc. USENIX Security Symposium (2006).
[47] YIN, H., LIANG, Z., AND SONG, D. HookFinder: Identifying
and understanding malware hooking behaviors. In Proc. Annual
Network & Distributed System Security Sym. (NDSS) (2008).
[48] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA,
E. Panorama: Capturing system-wide information ﬂow for mal-
ware detection and analysis. In Proc. ACM Conf. Computer and
Communications Security (CCS) (2007), pp. 116–127.
[49] ZHU, D. Y., JUNG, J., SONG, D., KOHNO, T., AND WETHER-
ALL, D. TaintEraser: Protecting sensitive data leaks using
application-level taint tracking. ACM SIGOPS Operating Sys-
tems Review (OSR) 45, 1 (2011), 142–154.
Publications. Oriental Institute of the University of Chicago,
Chicago, 1994, 1998.
[23] GIBLER, C., CRUSSELL, J., ERICKSON, J., AND CHEN, H.
AndroidLeaks: Automatically detecting potential privacy leaks in
Android applications on a large scale. In Proc. Int. Conf. Trust
and Trustworthy Computing (TRUST) (2012), pp. 291–307.
[24] GU, A. B., LI, X., LI, G., CHAMPION, CHEN, Z., QIN, F., AND
XUAN, D. D2Taint: Differentiated and dynamic information ﬂow
tracking on smartphones for numerous data sources. In Proc. IEEE
Conf. Computer Communications (INFOCOM) (2013), pp. 791–
799.
[25] HO, A., FETTERMAN, M., CLARK, C., WARFIELD, A., AND
HAND, S. Practical taint-based protection using demand emula-
tion. In Proc. ACM SIGOPS/EuroSys European Conf. Computer
Systems (EuroSys) (2006), pp. 29–41.
[26] JIM, T., MORRISETT, J. G., GROSSMAN, D., HICKS, M. W.,
CHENEY, J., AND WANG, Y. Cyclone: A safe dialect of C. In
Proc. USENIX Annual Technical Conf. (ATC) (2002), pp. 275–288.
[27] KANG, M. G., MCCAMANT, S., POOSANKAM, P., AND SONG,
D. DTA++: Dynamic taint analysis with targeted control-ﬂow
propagation.
In Proc. Annual Network & Distributed System
Security Sym. (NDSS) (2011).
[28] KATSUNUMA, S., KURITA, H., SHIOYA, R., SHIMIZU, K., IRIE,
H., GOSHIMA, M., AND SAKAI, S. Base address recognition
with data ﬂow tracking for injection attack detection. In Proc.
Paciﬁc Rim Int. Sym. Dependable Computing (PRDC) (2006),
pp. 165–172.
[29] KEMERLIS, V. P., PORTOKALIDIS, G.,
JEE, K., AND
KEROMYTIS, A. D. Libdft: Practical dynamic data ﬂow track-
ing for commodity systems.
In Proc. Conf. Virtual Execution
Environments (VEE) (2012), pp. 121–132.
[30] LAM, L. C., AND CHIUEH, T. A general dynamic information
ﬂow tracking framework for security applications. In Proc. Annual
Computer Security Applications Conf. (ACSAC) (2006), pp. 463–
472.
[31] LATTNER, C., AND ADVE, V. S. LLVM: A compilation
framework for lifelong program analysis & transformation. In
Proc. IEEE/ACM Int. Sym. Code Generation and Optimization:
Feedback-directed and Runtime Optimization (CGO) (2004),
pp. 75–88.
[32] NETCRAFT. Web surver survey. http://news.netcraft.com/archives/
category/web-server-survey, January 2015.
[33] NEWSOME, J., AND SONG, D. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of exploits
on commodity software. In Proc. Annual Network & Distributed
System Security Sym. (NDSS) (2005).
[34] NGUYEN-TUONG, A., GUARNIERI, S., GREENE, D., AND
EVANS, D. Automatically hardening web applications using pre-
cise tainting. In Proc. IFIP TC11 Int. Conf. Information Security
(SEC) (2005), pp. 372–382.
[35] OHLOH. Apache HTTP server statistics. http://www.ohloh.net/p/
apache.
[36] PAPAGIANNIS, I., MIGLIAVACCA, M., AND PIETZUCH, P. PHP
Aspis: Using partial taint tracking to protect against injection
attacks. In Proc. USENIX Conf. Web Application Development
(WebApps) (2011).
[37] PORTOKALIDIS, G., SLOWINSKA, A., AND BOS, H. Argos:
An emulator for ﬁngerprinting zero-day attacks. In Proc. ACM
SIGOPS/EuroSys European Conf. Computer Systems (EuroSys)
(2006), pp. 15–27.
[38] QIN, F., WANG, C., LI, Z., KIM, H., ZHOU, Y., AND WU, Y.
LIFT: A low-overhead practical information ﬂow tracking system
for detecting security attacks. In Proc. Int. Sym. Microarchitecture
(MICRO) (2006), pp. 135–148.
USENIX Association  
24th USENIX Security Symposium  159
15