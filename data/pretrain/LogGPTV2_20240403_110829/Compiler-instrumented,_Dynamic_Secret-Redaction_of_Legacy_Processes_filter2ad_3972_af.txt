### Introduction

This system monitors and rewrites sensitive bytes that are being transmitted to the network or stored on the local file system. Our approach employs a different strategy for instrumenting secret-redaction support into programs, resulting in applications that can proactively self-censor their address spaces with minimal overhead.

### Pointer Taintedness

In security contexts, many categories of widely exploited memory-overwrite vulnerabilities (e.g., format string, memory corruption, buffer overflow) have been recognized as detectable through dynamic taint-checking on pointer dereferences [7, 8, 15, 16, 28]. For instance, HookFinder [47] uses data and pointer tainting semantics in a full-system emulation to identify malware hooking behaviors in victim systems. Other systems follow a similar technique to capture system-wide information flow and detect privacy-breaching malware [19, 48].

Despite its high practical utility, effective pointer tainting presents numerous theoretical and practical challenges [17, 27, 43]. Theoretically, there are varied interpretations of a pointer's label. Does it express a property of the pointer value, the values it points to, the values read or stored by dereferencing the pointer, or all three? Different taint tracking application contexts require different interpretations, leading to varying taint-tracking methodologies. Our contributions include a pointer tainting methodology that is well-suited for tracking in-memory secrets.

### Process Memory Redaction

Our research introduces live process memory image sanitization as a new problem domain for information flow analysis. This task presents unique challenges compared to prior information flow applications. It is highly sensitive to over-tainting and label creep, as it must preserve process execution (e.g., for debugging, continued service availability, or attacker deception). It also demands exceptionally high performance and is frequently applied to large, low-level, legacy codes, which are common targets of cyber-attacks. Future work should explore the suitability of other information flow technologies, such as static type-based analyses, to address this challenging problem.

### Language Compatibility

While our implementation targets C/C++, a particularly ubiquitous source language, our general approach is applicable to other low-level languages and scripting languages whose interpreters are implemented in C (e.g., PHP, Bash). These languages are commonly used for web services, making them a natural next step for the web security focus of our research.

### Related Work

#### Dynamic Tracking of In-Memory Secrets

Dynamic taint-tracking is a natural technique for tracking secrets in software. It has been applied to study sensitive data lifetime in commodity applications [10, 11], analyze spyware behavior [19, 48], and impede the propagation of secrets to unauthorized sinks [21, 23, 49].

TaintBochs [10] uses whole-system simulation to understand secret propagation patterns in large, widely deployed applications like Apache and implements secure deallocation [11] to reduce the risk of exposure of in-memory secrets. Panorama [48] builds a system-level information-flow graph using process emulation to identify malicious software tampering with unintended information. Egele et al. [19] also use whole-system dynamic tainting to analyze spyware behavior in web browser components.

However, the performance impact of whole-system analyses, often on the order of 2000% [10, 19, 48], remains a significant obstacle, rendering such approaches impractical for many applications.

#### Practical Challenges of Pointer Tainting

On the practical side, imprudent pointer tainting often leads to taint explosion in the form of over-tainting or label-creep [40, 43]. This can impair the feasibility of the analysis and increase the likelihood of crashes in programs that implement data-rewriting policies [49]. To address this, sophisticated strategies involving pointer injection (PI) analysis have been proposed [16, 28]. PI uses a taint bit to track the flow of legitimate pointers and another bit to track the flow of untrusted data, disallowing dereferences of tainted values without a corresponding pointer taint. Our approach uses static typing information instead of PI bits to achieve lower runtime overheads and broader compatibility with low-level legacy code.

#### Application-Level Instrumentation

Much of the prior work on dynamic taint analysis has employed dynamic binary instrumentation (DBI) frameworks [9, 13, 29, 33, 38, 49] to enforce taint-tracking policies on software. These approaches do not require application recompilation or source code information. However, despite many optimization advances, dynamic instrumentation still suffers from significant performance overheads, making it unsuitable for high-performance applications, such as the redaction speeds required for attacker-deceiving honey-patching of production server code.

Our work benefits from research advances in static-instrumented, dynamic data flow analysis [6, 18, 30, 46] to achieve both high performance and high accuracy. We leverage LLVMâ€™s compilation infrastructure to instrument taint-propagating code into server code binaries.

### Conclusion

PC2S significantly improves the feasibility of dynamic taint-tracking for low-level legacy code that stores secrets in graph data structures. To ease the programmer's annotation burden and avoid taint explosions, it introduces a novel pointer-combine semantics that resists taint over-propagation through graph edges. Our LLVM implementation extends C/C++ with declarative type qualifiers for secrets and instruments programs with taint-tracking capabilities at compile-time.

The new infrastructure is applied to realize efficient, precise honey-patching of production web servers for attacker deception. The deceptive servers self-redact their address spaces in response to intrusions, providing defenders with a new tool for monitoring and disinformation.

### Acknowledgments

This research was supported in part by AFOSR Award FA9550-14-1-0173, NSF CAREER Award #1054629, and ONR Award N00014-14-1-0030. Any opinions, recommendations, or conclusions expressed are those of the authors and not necessarily of the AFOSR, NSF, or ONR.

### References

[References listed here]

---

This version of the text is more coherent and professional, with improved clarity and structure.