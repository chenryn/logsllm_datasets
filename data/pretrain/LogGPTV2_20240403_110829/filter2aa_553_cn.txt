足哪个条件就拷贝到何处）拷贝至target中。因此，如果source中的字符数小
于n，则拷贝整个字符串，包括空字符。但是，strncpy()拷贝字符串的长度不
会超过n，如果拷贝到第n个字符时还未拷贝完整个源字符串，就不会拷贝空
字符。所以，拷贝的副本中不一定有空字符。鉴于此，该程序把 n 设置为比
目标数组大小少1（TARGSIZE-1），然后把数组最后一个元素设置为空字
符：
strncpy(qwords[i], temp, TARGSIZE - 1);
qwords[i][TARGSIZE - 1] = '\0';
这样做确保储存的是一个字符串。如果目标空间能容纳源字符串的副
本，那么从源字符串拷贝的空字符便是该副本的结尾；如果目标空间装不下
副本，则把副本最后一个元素设置为空字符。
11.5.6 sprintf()函数
sprintf()函数声明在stdio.h中，而不是在string.h中。该函数和printf()类
816
似，但是它是把数据写入字符串，而不是打印在显示器上。因此，该函数可
以把多个元素组合成一个字符串。sprintf()的第1个参数是目标字符串的地
址。其余参数和printf()相同，即格式字符串和待写入项的列表。
程序清单11.28中的程序用printf()把3个项（两个字符串和一个数字）组
合成一个字符串。注意， sprintf()的用法和printf()相同，只不过sprintf()把组
合后的字符串储存在数组formal中而不是显示在屏幕上。
程序清单11.28 format.c程序
/* format.c -- 格式化字符串 */
#include 
#define MAX 20
char * s_gets(char * st, int n);
int main(void)
{
char first[MAX];
char last[MAX];
char formal[2 * MAX + 10];
double prize;
puts("Enter your first name:");
s_gets(first, MAX);
puts("Enter your last name:");
817
s_gets(last, MAX);
puts("Enter your prize money:");
scanf("%lf", &prize);
sprintf(formal, "%s, %-19s: $%6.2f\n", last, first, prize);
puts(formal);
return 0;
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
while (st[i] != '\n' && st[i] != '\0')
i++;
if (st[i] == '\n')
st[i] = '\0';
else
818
while (getchar() != '\n')
continue;
}
return ret_val;
}
下面是该程序的运行示例：
Enter your first name:
Annie
Enter your last name:
von Wurstkasse
Enter your prize money:
25000
von Wurstkasse, Annie        : $25000.00
sprintf()函数获取输入，并将其格式化为标准形式，然后把格式化后的
字符串储存在formal中。
11.5.7 其他字符串函数
ANSI 
C库有20多个用于处理字符串的函数，下面总结了一些常用的函
数。
char *strcpy(char * restrict s1, const char * restrict s2);
该函数把s2指向的字符串（包括空字符）拷贝至s1指向的位置，返回值
819
是s1。
char *strncpy(char * restrict s1, const char * restrict s2, size_t n);
该函数把s2指向的字符串拷贝至s1指向的位置，拷贝的字符数不超过
n，其返回值是s1。该函数不会拷贝空字符后面的字符，如果源字符串的字
符少于n个，目标字符串就以拷贝的空字符结尾；如果源字符串有n个或超过
n个字符，就不拷贝空字符。
char *strcat(char * restrict s1, const char * restrict s2);
该函数把s2指向的字符串拷贝至s1指向的字符串末尾。s2字符串的第1
个字符将覆盖s1字符串末尾的空字符。该函数返回s1。
char *strncat(char * restrict s1, const char * restrict s2, size_t n);
该函数把s2字符串中的n个字符拷贝至s1字符串末尾。s2字符串的第1个
字符将覆盖s1字符串末尾的空字符。不会拷贝s2字符串中空字符和其后的字
符，并在拷贝字符的末尾添加一个空字符。该函数返回s1。
int strcmp(const char * s1, const char * s2);
如果s1字符串在机器排序序列中位于s2字符串的后面，该函数返回一个
正数；如果两个字符串相等，则返回0；如果s1字符串在机器排序序列中位
于s2字符串的前面，则返回一个负数。
int strncmp(const char * s1, const char * s2, size_t n);
该函数的作用和strcmp()类似，不同的是，该函数在比较n个字符后或遇
到第1个空字符时停止比较。
char *strchr(const char * s, int c);
如果s字符串中包含c字符，该函数返回指向s字符串首位置的指针（末
尾的空字符也是字符串的一部分，所以在查找范围内）；如果在字符串s中
820
未找到c字符，该函数则返回空指针。
char *strpbrk(const char * s1, const char * s2);如果 s1 字符中包含 s2 字符
串中的任意字符，该函数返回指向 s1 字符串首位置的指针；如果在s1字符
串中未找到任何s2字符串中的字符，则返回空字符。
char *strrchr(const char * s, int c);该函数返回s字符串中c字符的最后一次
出现的位置（末尾的空字符也是字符串的一部分，所以在查找范围内）。如
果未找到c字符，则返回空指针。
char *strstr(const char * s1, const char * s2);
该函数返回指向s1字符串中s2字符串出现的首位置。如果在s1中没有找
到s2，则返回空指针。
size_t strlen(const char * s);
该函数返回s字符串中的字符数，不包括末尾的空字符。
请注意，那些使用const关键字的函数原型表明，函数不会更改字符
串。例如，下面的函数原型：
char *strcpy(char * restrict s1, const char * restrict s2);
表明不能更改s2指向的字符串，至少不能在strcpy()函数中更改。但是可
以更改s1指向的字符串。这样做很合理，因为s1是目标字符串，要改变，而
s2是源字符串，不能更改。
关键字restrict将在第12章中介绍，该关键字限制了函数参数的用法。例
如，不能把字符串拷贝给本身。
第5章中讨论过，size_t类型是sizeof运算符返回的类型。C规定sizeof运
算符返回一个整数类型，但是并未指定是哪种整数类型，所以size_t在一个
系统中可以是unsigned int，而在另一个系统中可以是 unsigned long。string.h
头文件针对特定系统定义了 size_t，或者参考其他有 size_t定义的头文件。
821
前面提到过，参考资料V中列出了string.h系列的所有函数。除提供ANSI
标准要求的函数外，许多实现还提供一些其他函数。应查看你所使用的C实
现文档，了解可以使用哪些函数。
我们来看一下其中一个函数的简单用法。前面学过的fgets()读入一行输
入时，在目标字符串的末尾添加换行符。我们自定义的s_gets()函数通过
while循环检测换行符。其实，这里可以用strchr()代替s_gets()。首先，使用
strchr()查找换行符（如果有的话）。如果该函数发现了换行符，将返回该换
行符的地址，然后便可用空字符替换该位置上的换行符：
char line[80];
char * find;
fgets(line, 80, stdin);
find = strchr(line, '\n'); // 查找换行符
if (find)           // 如果没找到换行符，返回NULL
*find = '\0';     // 把该处的字符替换为空字符
如果strchr()未找到换行符，fgets()在达到行末尾之前就达到了它能读取
的最大字符数。可以像在s_gets()中那样，给if添加一个else来处理这种情
况。
接下来，我们看一个处理字符串的完整程序。
822
11.6 字符串示例：字符串排序
我们来处理一个按字母表顺序排序字符串的实际问题。准备名单表、创
建索引和许多其他情况下都会用到字符串排序。该程序主要是用 strcmp()函
数来确定两个字符串的顺序。一般的做法是读取字符串函数、排序字符串并
打印出来。之前，我们设计了一个读取字符串的方案，该程序就用到这个方
案。打印字符串没问题。程序使用标准的排序算法，稍后解释。我们使用了
一个小技巧，看看读者是否能明白。程序清单11.29演示了这个程序。
程序清单11.29 sort_str.c程序
/* sort_str.c -- 读入字符串，并排序字符串 */
#include 
#include 
#define SIZE 81    /* 限制字符串长度，包括 \0 */
#define LIM 20    /* 可读入的最多行数 */
#define HALT ""    /* 空字符串停止输入 */
void stsrt(char *strings [], int num); /* 字符串排序函数 */
char * s_gets(char * st, int n);
int main(void)
{
char input[LIM][SIZE];   /* 储存输入的数组    */
char *ptstr[LIM];     /* 内含指针变量的数组  */
int ct = 0;        /* 输入计数      */
823
int k;           /* 输出计数      */
printf("Input up to %d lines, and I will sort them.\n", LIM);
printf("To stop, press the Enter key at a line's start.\n");
while (ct  0)
{
temp = strings[top];
strings[top] = strings[seek];
strings[seek] = temp;
}
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
while (st[i] != '\n' && st[i] != '\0')
i++;
825
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
我们用一首童谣来测试该程序：
Input up to 20 lines, and I will sort them.
To stop, press the Enter key at a line's start.
O that I was where I would be,
Then would I be where I am not;
But where I am I must be,
And where I would be I can not.
Here's the sorted list:
And where I would be I can not.
But where I am I must be,
O that I was where I would be,
826
Then would I be where I am not;
看来经过排序后，这首童谣的内容未受影响。
11.6.1 排序指针而非字符串
该程序的巧妙之处在于排序的是指向字符串的指针，而不是字符串本
身。我们来分析一下具体怎么做。最初，ptrst[0]被设置为input[0]，ptrst[1]
被设置为input[1]，以此类推。这意味着指针ptrst[i]指向数组input[i]的首字
符。每个input[i]都是一个内含81个元素的数组，每个ptrst[i]都是一个单独的
变量。排序过程把ptrst重新排列，并未改变input。例如，如果按字母顺序
input[1]在intput[0]前面，程序便交换指向它们的指针（即ptrst[0]指向input[1]
的开始，而ptrst[1]指向input[0]的开始）。这样做比用strcpy()交换两个input
字符串的内容简单得多，而且还保留了input数组中的原始顺序。图11.6从另
一个视角演示了这一过程。
827
图11.6 排序字符串指针
11.6.2 选择排序算法
我们采用选择排序算法（selection sort algorithm）来排序指针。具体做
法是，利用for循环依次把每个元素与首元素比较。如果待比较的元素在当
前首元素的前面，则交换两者。循环结束时，首元素包含的指针指向机器排
序序列最靠前的字符串。然后外层for循环重复这一过程，这次从input的第2
个元素开始。当内层循环执行完毕时，ptrst中的第2个元素指向排在第2的字
符串。这一过程持续到所有元素都已排序完毕。
828
现在来进一步分析选择排序的过程。下面是排序过程的伪代码：
for n = 首元素至 n = 倒数第2个元素,
找出剩余元素中的最大值，并将其放在第n个元素中
具体过程如下。首先，从n = 0开始，遍历整个数组找出最大值元素，那
该元素与第1个元素交换；然后设置n = 1，遍历除第1个元素以外的其他元
素，在其余元素中找出最大值元素，把该元素与第2个元素交换；重复这一