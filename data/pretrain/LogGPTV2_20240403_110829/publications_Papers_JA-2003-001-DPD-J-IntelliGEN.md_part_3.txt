Whenataskisreadytoexecute,ataskscheduleractivatesanassociatedtaskmanager.
The task manager oversees the execution of the task itself. Figure 4 presents a view of
theORBWork’sdistributedscheduler.Notethatschedulingcomponentsandtheassociated
tasksandtaskmanagersaredistributedamongfourdifferenthosts.Theassignmentofthese
componentstohostscanbemodifiedatruntime.
TASK TASK HOST 4
HOST 1 Manager
TASK TASK
Scheduler Scheduler
TASK TASK TASK
Scheduler Scheduler Scheduler
HOST 3
MT aA nS aK ger MT aA nS aK ger
TASK TASK
HOST 2
Figure4. ORBWorksdistributedscheduler.
54 KOCHUTETAL.
Thepartitioningofvariouscomponents(scheduler’slayout),includingtaskschedulers,
taskmanagersandtasks,amongtheparticipatinghostsisflexible.AnORBWorkadminis-
tratormaymoveanyofthecomponentsfromonehosttoanother.Inthefullydistributed
layout,itispossibletoplacealloftheworkflowcomponentsondifferenthosts.
Eachtaskschedulerprovidesawell-constrainedsubsetoftheHTTPprotocol,andthus
implements a lightweight, local Web server. This enables an ORBWork administrator to
interact directly with a selected task scheduler and modify its scheduling specifications
from a common Web browser. It also enables the end-user to access workflow instances
residingonthetask’sworklist.Thissetupnaturallysupportsamobileuser.
TheORBWorkscheduleranditssupportingcomponentshavebeendesignedinsucha
waythattheenactmentservicecanbeusedtosupportavarietyofdynamicchangesbothto
theworkflowschemaandtotheindividualworkflowinstances.Theworkflowadministrator
caneasilymodifytheworkflowschemaatruntimebyacquiringnewinformationfromthe
workflowrepository,orevenbymodifyingthespecificationbydirectinteractionwiththe
scheduler.
WedividethedynamicchangesinORBWorkintotwocategories:primitivechangesand
composite changes. A primitive change is composed of “atomic” changes that can only
beappliedtoaprocessdefinitiontotallyornotappliedatall(e.g.,addingasynchronous
transitionbetweentwotasks).Acompositechangeiscomposedofasequenceofprimitive
changesthatdescribeacomplicatedprocessdefinitionchange(e.g.,addingataskbetween
twoexistingtaskscanbeachievedbyapplyingasequenceofprimitivechangesaswewill
see in the following sections). Primitive changes can be further divided into immediate
changesandincrementalchanges.Immediatechangesarechangesthatcanbeintroduced
into workflow run-time in one step without losing the correctness and consistency of the
workflow. In the context of ORBWork run-time, one step means reloading the necessary
processdefinitionfiles.Ontheotherhand,therearesituationswhenwecannotapplythe
changestoaparticulartaskin“oneshot”.Considerthatwewanttochangetheinput/output
dependenciesofatask,whereseveralworkflowinstancesarependingonthistask(waiting
fornecessarytransitionsfromthepredecessortasksinordertoinvokethetask).Ifwejust
update the task specifications without taking care of all these already existing workflow
instances, they may work incorrectly. Incremental changes address that problem. Such
changesareintroducedintotheworkflowenactmentsystemstepbystepandguaranteethe
correctnessandconsistencyofthewholeworkflowsystem.Inpractice,mostoftheprimitive
changesinaworkflowsystemareincremental.
Anotherveryimportantissueofimplementingadynamicworkflowsystemishowshould
differentversionsofaworkflow/taskschematheworkflowenactmentsystemsupport.We
saythataparticulartaskisinastablestateifallinput/outputdependencies,input/output
parametersoftheworkflowinstancesresidingonthattaskscheduler,arethesame.Consider
thefollowingscenario:Aworkflowsystemisnormallyrunningandwithseveralinstances
working simultaneously. The workflow administrator decides to do some changes to the
input dependencies of a task and several instances are under the control of this task’s
scheduler. From the earlier discussion, we know that some instances should still use the
oldinputdependencyschemawhilenewinstancesshouldusethenewversionoftheinput
dependencies.Atsometime,thetaskschedulermaybeschedulingtwoworkflowinstances
INTELLIGEN:ADISTRIBUTEDWORKFLOWSYSTEM 55
withdifferentinputdependencies.Insuchacase,thetaskisunstable.Moreover,ifwetry
tochangetheinputdependenciesofthatunstabletask,thetaskschedulerwillfinallyhave
threedifferentversionsofinputdependencies.Iftheadministratorkeepsmakingchanges,
thetaskschedulermayhavefour,five,sixormoreinputdependencyversions.Inourcurrent
implementation,weonlyallowtwoversionsofaprocessdefinitiontoexistfortheworkflow
instancesresidingonaparticulartask.
Anadditionalissueworthmentioninghereishowtosuspendthetaskscheduler.When
dynamicchangesareintroducedtoaparticulartask,wewillforcetheORBWorkruntime
to suspend that task scheduler. In our implementation, we divide the suspend operation
into three different types: suspend input transition; suspend output transition; suspend
both input/output transitions. After applying the “suspend input transition” operation, no
workflowinstanceisallowedto“flow”tothistaskbymakingatransitioncallonthistask’s
scheduler.Similarly,the“suspendoutputtransition”operationkeepsanyexistingworkflow
instanceonthattaskfrommakingatransitioncalltoasuccessortask’sscheduler.Thethird
suspendoperationisthecombinationoftheprevioustwo.
Adetaileddescriptionofpossiblechangesandhowtheyareimplementedisdescribed
in[18].ThetypesofdynamicmodificationscurrentlyofferedinORBWorkarepresented
inTable1.However,sometimesapredefinedscheduleoftasksmayneedtobealteredfor
just a single workflow instance, without introducing permanent changes to the workflow
schema.TheORBWorkprocessmanagerallowstheper-instancechangesofsimilartypesas
describedabove,butonlythoseassociatedwithasingleinstance,ratherthanwiththewhole
workflow schema. The changes cease to exist, once the instance completes. Theoretical
aspectsofintroducingdynamicchangestoworkflowsystemsareexaminedin[1].
2.5.1. Support for scalability and fault tolerance. The fully distributed architecture of
ORBWork yields significant benefits in the area of scalability. As mentioned, all of the
workflow components of a designed and deployed workflow (this includes individual
task schedulers, task managers, and task programs) may be distributed to different hosts.
However, in practice it may be sufficient to deploy groups of less frequently used task
scheduler/manager/programs to the same host. At the same time, heavily utilized tasks
may be spread out across a number of available workflow hosts, allowing for better load
sharing.
ThefeaturesofORBWorkdesignedtohandledynamicworkflowsarealsoveryusefulin
supportingscalability.Asloadincreases,anORBWorkadministratormayelecttomovea
portionofthecurrentlyrunningworkflowtoahost(orhosts)thatbecomeavailableforusein
theworkflow.Themigrationcanbeperformedatthetimethedeployedworkflowisrunning.
Simply, the workflow administrator may suspend and shutdown a given task scheduler
and transfer it to a new host. Because of the way task schedulers locate their successors,
the predecessors of the moved task scheduler will not notice the changed location of the
task.Iftheassociatedtaskmustbeexecutedonaspecifichost(forexampleitisalegacy
application),theassociatedtaskmanagermaybeleftinplace,whileonlythescheduleris
transferred.
Inthecasethatagroupoftaskschedulersisdeployedtothesamehost,theORBWork
administratorhastheoptiontocombinethemintoasingle“master”scheduler.Suchamaster
56 KOCHUTETAL.
Table1. TypesofdynamicmodificationsavailableinORBWork.
Changetype Changetype Afterthechange
ANDtoORJoin Incremental Asinglepredecessortasksneedstobecompletedinordertoexecute
agiventask
ORtoANDJoin Immediate Allofthepredecessortasksneedtobecompletedinordertoexecute
agiventask
ANDtoORSplit Immediate Asinglesuccessortaskwillbeactivatedafteragiventaskcompletes
ORtoANDSplit Immediate Allsuccessortaskswillbeactivatedafteragiventaskcompletes
AddAND Incremental Onemoretaskwillbeactivatedafteragiventaskcompletes
Transition
AddOR Immediate Onemoretaskmaybeactivatedafteragiventaskcompletes
Transition
DeleteTransition Incremental Agiventransitionwillnotbeattempted(eitherANDorOR)
AddObject Incremental Onemoredataobjectwillbetransferredalongagiventransition
Transfer
DeleteObject Incremental Adataobjectwillnotbetransferredalongagiventransition
Transfer
Parameter Incremental Anincomingdataobjectwillbeassignedtoadifferentparameter
MappingChange ofagiventask
ParameterType Incremental Agiventaskwillacceptanewdataobjecttypeforagivenparameter
Change
TaskTypeChange Incremental Adifferenttasktype(e.g.automaticinsteadofhuman)willbeinvoked
TaskInvocation Composite Adifferenttaskwillbeinvoked(butwithinthesametasktype)
Change
InsertionofaTask Composite Anewtaskwillbeperformed,ifenabled
DeletionofaTask Composite Agiventaskwillnotbeperformed
schedulercontrolsanumberofindividualtaskschedulersthatsharethesameheavyweight
process.Thisallowstheadministratortocontroltheutilizationoftheparticipatinghosteven
further, while having many individual operating system-level processes (task schedulers)
couldpotentiallyburdenthehostsystem.
The distributed design of ORBWork offers no single point of failure for an ongoing
workflow instance. Since the individual task schedulers cooperate in the scheduling of
workflowinstances,afailureofasingleschedulerdoesnotbringthewholesystemdown,
andotherexistingworkflowinstancesmaycontinueexecution.
The error handling and recovery framework for ORBWork [84] has also been defined
inascalablemanner.Allerrorsareorganizedintoerrorclasshierarchies,partitioningthe
recoverymechanismacrosslocalhosts,encapsulatingandhandlingerrorsandfailuresas
closetothepointoforiginationaspossible,andminimizingthedependenceonlow-level
operating system-specific functionality of the local computer systems. Complementary
workonexceptionhandling,especiallyonfindingalternativestodealwithexceptions,is
describedin[55].
INTELLIGEN:ADISTRIBUTEDWORKFLOWSYSTEM 57
3. Discoveringprotein-proteininteractions
With the completion of the sequencing of the human genome and that of other model
systemsamajornewdirectionhasbeenthecharacterizationoftheproteome,thecollection
ofallproteinsinthecell,tofigureoutwhatcellsaredoingbesidesdatastorage.Thegenetic
blueprint is here. The genome is known. What functions does the genome encode and
programthroughtheCentralDogma?
Onenewdirectionistoidentifyalloftheproteinsproducedbythegeneticblueprint.In
thiswayweobtainatasklistfortheorganism.Thisefforthasledinanumberofdirections
because in many ways protein structure is much richer than that of DNA. One direction
is simply to isolate and characterize all the proteins in the cell. Isolating proteins allows
biochemiststoexaminetheirfunction.
From here several directions can be chosen. One direction has been identifying the
structuresofallproteinsinthecell[77].High-throughputmethodsforobtainingmolecular
structuresonallproteinsarebeingdeveloped.Thesemolecularstructuresprovidevaluable
insightsintohowproteinscarryouttheirtasks.Proteins,unlikeDNA,haveavastrepertoire
ofstructurestocarryoutthediversityoffunctions.
Oncetheproteinsareidentifiedandcharacterized,asecondinterestishowtheyassemble
into the molecular machines that carry out the work in the cell. Some of these larger
cooperativestructuresincellhavenameslikethetranscriptosome,splicesome,proteasome,
ribosome,cytoskeleton,mitochondrion,circadianclock,spindle,andMAPkinasecascades
tocarryoutbasicprocessesinthecellliketranscription,RNAsplicing,translation,energy
metabolism,celldivision,andsignaling[82].
Identifyingalloftheprotein-proteininteractionsisfundamentaltosearchingforconnec-
tionsrelevanttoaparticularprocess,suchasthelinkqa-1Sp/qa-1Fpinthebiologicalcircuit
offigure1.Knowingwhichproteinsworktogetherispartofspecifyingthebiologicalcircuit
describingaparticularbiologicalprocess.Thecollectionofprotein-proteininteractionscan
bevisualizedasamap,inwhichproteinsarethenodesandtheedgesaretheinteractions
(figure 5). A protein-protein interaction network or map then represents a search grid on
whichbiologicalcircuitsareconstructed.Themaptellstheresearcherwhatconnectionshe
orshemayneedtoconsiderinthecircuit.
Figure5. Protein-proteininteractionmapofS.cerevisiaefrom[44]visualizedasa“proteinmobile”.
58 KOCHUTETAL.
We refer to this Calder-like visualization of a protein-protein interaction map as a
“proteinmobile”.Thegoalofthispaperistodescribeadistributedautomatedworkflowto
generatethisproteinmobileaccessibleovertheWeb[26,52].Theexampleshownispartof
theprotein-proteininteractionmapfortheyeastS.cerevisiae[44].Eightcompositesteps
comprisetheworkflowtogeneratesuchamap.
Step1(GetGenes). Ineukaryoticsystemslikehumansamajorcomplicationisidentifying
allofthegenesthatproducetheproteins.Thecomplicationisthatgenesineukaryotes
containregionsofDNAcalledintrons,whicharenottranscribed.Theintronsarecutout
ofprimarytranscripttoformmaturetranscript.AgeneticistcanisolatealltheRNAsina
cellandreversetheprocessoftranscriptionwiththeenzymereversetranscriptasetomake
complementaryDNAsorcDNAsthatidentifycorrectlywhatDNAsequenceisultimately
usedtomakeaprotein.ThesecDNAscanbeusedtocreatealibraryofclonescalleda
cDNAlibrary.Thefirststepintheprocessofidentifyingallprotein-proteininteractions
istomakealargecDNAlibrarythatcontainsmostofthegenesintheorganismwiththe
intronsconvenientlysplicedout.Ultimately,thiscDNAlibrarycanbeusedtomakethe
proteinsneededtotestforinteractionsamongthem.
The main limitation of this strategy to get to the DNA sequence encoding a protein
is that cDNA libraries typically do not have all of the genes. Alternative strategies are
resortedto.Oneoftheseiscomputational.Alargecloneissequenced,andalgorithms
forgeneidentificationareutilizedbasedonthegrammarofDNAtoidentifygenes[52].
Thenthegenesareextracteddirectlyfromtheclonebyatechniqueknownaspolymerase
chain reaction, a way to amplify a specific region of DNA from a DNA source like a
clone.