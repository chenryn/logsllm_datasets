**作者：Ke Liu @ 腾讯玄武实验室**  
**来源：**
_本文详细分析了 Adobe Acrobat Reader / Pro DC 中近期修复的安全漏洞 CVE-2019-8014 。有趣的是，Adobe
在六年前修复了一个类似的漏洞 CVE-2013-2729 ，正是由于对该漏洞的修复不够完善，才使得 CVE-2019-8014
遗留了长达六年之久。本文同时讨论了如何为此类漏洞编写利用代码。_
## 0x01. 漏洞简介
Adobe 在八月份为 Adobe Acrobat and Reader 发布了安全公告
[APSB19-41](https://helpx.adobe.com/security/products/acrobat/apsb19-41.html)
，和往常一样，这次更新修复了大量漏洞。当笔者在
[ZDI](https://www.zerodayinitiative.com/advisories/published/)
上查看对应的漏洞公告时，目光迅速被
[ZDI-19-725](https://www.zerodayinitiative.com/advisories/ZDI-19-725/) /
[CVE-2019-8014](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-8014)
所吸引，因为模块 `AcroForm` 中 Bitmap 解析相关的漏洞非常少见。该漏洞在 ZDI 上的部分公告信息如下：
> Adobe Acrobat Pro DC AcroForm Bitmap File Parsing Heap-based Buffer Overflow
> Remote Code Execution Vulnerability
>
> The specific flaw exists within the parsing of run length encoding in BMP
> images. The issue results from the lack of proper validation of the length
> of user-supplied data prior to copying it to a fixed-length, heap-based
> buffer. An attacker can leverage this vulnerability to execute code in the
> context of the current process.
看描述这和六年之前修复的漏洞 [CVE-2013-2729](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2729) 非常相似——都和 **XFA Bitmap Run Length
Encoding** 解析有关！实际上，两个漏洞之间确实有着千丝万缕的联系，本文将详细分析漏洞的原理以及两者之间的关系。
漏洞 CVE-2019-8014 在 ZDI 上的致谢信息为 `ktkitty (https://ktkitty.github.io)` 。
## 0x02. 环境搭建
根据官方公告
[APSB19-41](https://helpx.adobe.com/security/products/acrobat/apsb19-41.html)
的描述，该漏洞影响 `2019.012.20035` 以及更早版本的 Adobe Acrobat and Reader ，而不受影响的最新版本号为
`2019.012.20036` 。本文基于前者进行漏洞分析、基于后者进行补丁分析。
安装 Adobe Acrobat Reader DC `2019.012.20035` 的步骤如下：
  * 下载并安装 `2019.012.20034` ([下载链接](ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220034/))
  * 升级到 `2019.012.20035` ([下载链接](ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220035/))
安装 Adobe Acrobat Reader DC `2019.012.20036` 的步骤如下：
  * 下载并安装 `2019.012.20036` ([下载链接](ftp://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220036/))
在调试环境中安装好软件后，记得禁用更新服务 _Adobe Acrobat Update Service_ 或者直接断开网络连接，防止 Adobe
Acrobat Reader DC 自动更新。
## 0x03. 位图简介
在进行漏洞分析之前，先简单介绍一下位图的结构。如果你对位图已经非常熟悉，那么可以直接跳过本小节内容。
### 3.1 相关结构
通常来说，位图文件由以下四部分构成：
  1. Bitmap File Header
  2. Bitmap Info Header
  3. RGBQUAD Array
  4. Bitmap Data
#### 3.1.1 BITMAP FILE HEADER
结构体 **BITMAPFILEHEADER** 的定义如下：
    typedef struct tagBITMAPFILEHEADER {
      WORD  bfType;         // 文件标记 'BM'
      DWORD bfSize;         // 位图文件的大小
      WORD  bfReserved1;    // 保留字段 0
      WORD  bfReserved2;    // 保留字段 0
      DWORD bfOffBits;      // 位图数据在文件中的偏移值
    } BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#### 3.1.2 BITMAP INFO HEADER
结构体 **BITMAPINFOHEADER** 的定义如下：
    typedef struct tagBITMAPINFOHEADER {
      DWORD biSize;             // 结构体的大小
      LONG  biWidth;            // 位图宽度
      LONG  biHeight;           // 位图高度
      WORD  biPlanes;           // 必须为 1
      WORD  biBitCount;         // 每个像素所占用的位数
      DWORD biCompression;      // 压缩算法
      DWORD biSizeImage;        // 数据大小
      LONG  biXPelsPerMeter;    // 水平分辨率
      LONG  biYPelsPerMeter;    // 垂直分辨率
      DWORD biClrUsed;          // 色彩索引数
      DWORD biClrImportant;     // 必须的色彩索引数
    } BITMAPINFOHEADER, *PBITMAPINFOHEADER;
这里成员 `biCompression` 指明了位图所使用的压缩算法，部分压缩算法的定义如下：
    #define BI_RGB  0  // 未使用压缩算法
    #define BI_RLE8 1  // RLE8 压缩算法
    #define BI_RLE4 2  // RLE4 压缩算法
    // 其他压缩算法...
#### 3.1.3 RGBQUAD ARRAY
结构体 **RGBQUAD** 描述一个像素的色彩组成，其定义如下：
    typedef struct tagRGBQUAD {
      BYTE rgbBlue;
      BYTE rgbGreen;
      BYTE rgbRed;
      BYTE rgbReserved;
    } RGBQUAD;
**RGBQUAD Array** 代表了一张色彩表，位图数据在解析之后可以是一个索引，索引在数组中对应的值便是该像素的色彩表示。该数组的长度取决于结构体
**BITMAPINFOHEADER** 中的 `biBitCount` 和 `biClrUsed` 成员的值。
#### 3.1.4 BITMAP DATA
位图的位数据，该部分数据的表现形式取决于位图所使用的压缩算法。
有一点需要注意的是：位图数据是从左下角往右上角方向进行填充的，即位图数据中解析出来的第一个像素的色彩，应当填充到位图的左下角
[[wikipedia](https://en.wikipedia.org/wiki/BMP_file_format#Pixel_array_\(bitmap_data\))]，随后依次填充当前行的像素，当前行填充完毕之后，往上移动一个像素继续以行位单位进行填充，直到位图填充完毕。
### 3.2 RLE 编码
位图支持两种类型的 RLE（ **Run Length Encoding**
）压缩算法：[RLE4](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/73b57f24-6d78-4eeb-9c06-8f892d88f1ab) 和
[RLE8](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/b64d0c0b-bb80-4b53-8382-f38f264eb685) 。
#### 3.2.1 RLE8 编码
RLE8 压缩算法用于压缩 8 位位图（即每个像素占用 1 字节空间）。RLE8 压缩后的数据可以处于 **编码模式（Encoded Mode）** 和
**绝对模式（Absolute Mode）** 中的任意一种（两种模式在同一个位图中可以同时出现）。
**编码模式** 包含两字节数据：
  * 如果第一个字节不为零，其含义为第二个字节需要重复的次数
  * 如果第一个字节为零，那么第二个字节的可能含义如下
  * 0x00 表示当前行已经结束
  * 0x01 表示位图解析完毕
  * 0x02 表示接下来的两个字节 `(deltaX, deltaY)` 为当前坐标 `(x, y)` 需要移动的距离
在 **绝对模式** 中，第一个字节为零，第二个字节位于区间 `[0x03, 0xFF]` 。第二个字节表示接下来特定数量的字节是未压缩的数据（数据量需要按
`WORD` 对齐）。
下面为 RLE8 压缩之后的数据：
    [03 04] [05 06] [00 03 45 56 67] [02 78] [00 02 05 01]
    [02 78] [00 00] [09 1E] [00 01]
下面为解压之后的数据：
    04 04 04
    06 06 06 06 06
    45 56 67
    78 78
    move current position 5 right and 1 up
    78 78
    end of line
    1E 1E 1E 1E 1E 1E 1E 1E 1E
    end of RLE bitmap
#### 3.2.2 RLE4 编码
RLE4 压缩算法用于压缩 4 位位图（即每个像素占用半字节空间）。RLE4 压缩后的数据可以处于 **编码模式（Encoded Mode）** 和
**绝对模式（Absolute Mode）** 中的任意一种（两种模式在同一个位图中可以同时出现）。
**编码模式** 包含两字节数据：
  * 如果第一个字节不为零，其含义为第二个字节展开后得到的像素个数
  * 第二个字节代表了两个像素的色彩索引
  * 高 4 位代表第一个像素的色彩索引
  * 低 4 位代表第二个像素的色彩索引
  * 二者依次交替重复，直到得到第一个字节指定的像素个数
  * 如果第一个字节为零，那么第二个字节的可能含义如下
  * 0x00 表示当前行已经结束
  * 0x01 表示位图解析完毕
  * 0x02 表示接下来的两个字节 `(deltaX, deltaY)` 为当前坐标 `(x, y)` 需要移动的距离
在 **绝对模式** 中，第一个字节为零，第二个字节位于区间 `[0x03, 0xFF]` 。第二个字节表示接下来特定数量的 **半字节**
是未压缩的数据（数据量需要按 `WORD` 对齐）。
下面为 RLE4 压缩之后的数据：
    [03 04] [05 06] [00 06 45 56 67 00] [04 78] [00 02 05 01]
    [04 78] [00 00] [09 1E] [00 01]
下面为解压之后的数据：
    0 4 0
    0 6 0 6 0
    4 5 5 6 6 7
    7 8 7 8
    move current position 5 right and 1 up
    7 8 7 8
    end of line
    1 E 1 E 1 E 1 E 1
    end of RLE bitmap
## 0x04. 漏洞分析
### 4.1 代码定位
根据 ZDI 网站上的公告信息，可知漏洞位于 **AcroForm** 模块。该模块是 Adobe Acrobat Reader DC 中负责处理 [XFA
表单](https://en.wikipedia.org/wiki/XFA) 的插件，其路径如下：
    %PROGRAMFILES(X86)%\Adobe\Acrobat Reader DC\Reader\plug_ins\AcroForm.api
通常来说，借助 [BinDiff](https://www.zynamics.com/bindiff.html)
进行补丁对比分析可以快速定位到有漏洞的函数，但如果新旧版本的二进制文件变动比较大的话就不太好处理了，模块 `AcroForm.api`
的情况便是如此：通过对比发现有大量函数进行了改动，一个一个去看显然不太现实。
笔者用于定位漏洞函数的方法如下（以 `2019.012.20035` 为例）：
  1. 在 `IDA` 中搜索字符串 `PNG` ，在 `.rdata:20F9A374` 找到一处定义
  2. 对 `20F9A374` 进行交叉引用查找，定位到函数 `sub_20CF3A3F`
  3. 很显然函数 `sub_20CF3A3F` 负责判断图片的类型（从这里也可以看出 XFA 表单所支持的图片格式类型）
  4. 对 `sub_20CF3A3F` 进行交叉引用查找，定位到函数 `sub_20CF4BE8`
  5. 函数 `sub_20CF4BE8` 根据图片的类型调用不同的处理函数
  6. 函数 `sub_20CF4870`（跳转自 `sub_20CF3E5F`）负责处理 `BMP` 位图
在 BinDiff 的结果中可以看到，函数 `sub_20CF3E5F` 中确实有几个基本块发生了变动，比如 `20CF440F`
处的基本块的变动情况如下：
    // 20CF440F in AcroForm 2019.012.20035
    if ( v131 >= v26 || (unsigned __int8)v127 + v43 > v123 )
      goto LABEL_170;
    // 20CF501F in AcroForm 2019.012.20036
    v56 = (unsigned __int8)v130 + v43;
    if ( v134 >= v26 || v56 > v126 || v56 = height || (unsigned __int8)cmd + xpos > width )
              goto LABEL_170;                       // CxxThrowException
            index = 0;
            if ( (_BYTE)cmd )
            {
              do
              {
                line = (_BYTE *)fn_get_scanline(v1[3], ypos);
                line[xpos++] = BYTE1(cmd);
                ++index;
              }
              while ( index = height || dst_xpos  width )  // 整数溢出检查
                goto LABEL_170;         // CxxThrowException
              index = 0;
              if ( BYTE1(cmd) )
              {
                do
                {
                  fn_read_bytes(v1[2], &value, 1u);
                  line = (_BYTE *)fn_get_scanline(v1[3], ypos);
                  line[xpos++] = value;
                  count = BYTE1(cmd);