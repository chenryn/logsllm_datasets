i
f
i
t
o
N
Figure 7. The effect of client model size in attributes on 
the rate of notification forwarding.
calculations (TCP Relay). Figure 6(b) shows that these costs
are governed by the total number of output events that must
be produced by the dispatcher. The measured rate of output
events  shown  in  Figure  6(b)  is  nearly  constant  for  a  given
feature  set  (attributes  in  address  and  other  parameters)
regardless  of  branching  factor  (number  of  Pongers).  Thus,
the primary determination of throughput is the size of the set
of  potential  receivers.  The  cost  is  not  comparable  at  ten
Ponger nodes because of domination by the cost of Java gar-
bage collection and other system activities occuring coinci-
dentally.
6.2.2. Effect of client model size on performance. 
The size of client models, i.e., the number of attributes in the
exposed address, has a significant impact on system perfor-
mance. A client-model’s size is measured by the number of
attributes in its address. This is proportional to half the size
Worst-case Notification Throughput 
with Branching Factor
Worst-Case Notification Output 
Rate with Branching Factor
/
c
e
S
s
n
o
i
t
a
c
i
f
i
t
o
N
180
165
55
200
150
100
50
0
94
38
12
45
21
4.8
SN
TCP Relay
Forw ard
Only
10
50
100
Child Nodes
(a)
/
c
e
S
s
n
o
i
t
a
c
i
f
i
t
o
N
t
u
p
t
u
O
5000
4000
3000
2000
4700
4500
SN
1800
1650
1900
2100
TCP Relay
Forw ard
Only
1000
550
0
600
480
10
50
100
Child Nodes
(b)
Figure 6. (a) Worst-case event throughput with forwarding-set size; (b) Worst case event forwarding rate with 
forwarding-set size.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:41 UTC from IEEE Xplore.  Restrictions apply. 
Roundtrip Ping-Pong time over Time
Roundtrip Ping-Pong time over Time
4000
3000
2000
1000
s
d
n
o
c
e
s
i
l
l
i
m
0
0
)
s
d
n
o
c
e
s
i
l
l
i
m
(
g
o
L
4
3
2
1
0
50
100
150
200
250
0
50
100
150
200
250
seconds
seconds
Figure 8. Round-trip Ping/Pong-pair message time with Selective Notification.
of  the  default  filters  generated  for  intentional  addressing.
Figure 7 shows how the output notification rate of Selective
Notification varies with the size of the attribute model. This
experiment was performed with 60 second message persis-
tence, 10 second filter coagulation, and 50 Ponger applica-
tions.  The  second  data  point 
(5  model  attributes)
corresponds roughly to the size of the attribute models in the
experiment from which data was collected in Figure 6.
6.2.3. Round-trip message time. Our 
experiments
recorded  round-trip  message  time  for  ping  and  pong  mes-
sage pairs. Figure 8 shows ping-pong time over the course
of an experiment in linear and logarithmic scale. The data is
from an experiment with 50 Pongers, with attribute changes
every  ten  seconds  and  notification  persistence  of  60  sec-
onds. Ten messages were input to the dispatcher per second,
so that the system was not processor-saturated. The experi-
ment was run for 200 seconds. Average round-trip time was
220 milliseconds, with a standard deviation of 430 millisec-
onds.  Deviation  occurs  from  persistent  notification  time-
outs,  filter  coagulation,  clusters  client  model  changes,  and
Java  garbage  collection.  Under  the  worst  case  example  of
these conditions, round-trip time may be as high as three or
four seconds.
6.3 A Model of scale
From these experiments, it is clear that the throughput
of Selective Notification depends heavily on the number of
clients and dispatchers connected to a dispatcher, and on the
size of client models. Less important but still significant are
the rates of client attribute (model) changes. Using the mea-
surements from the previous section for a dispatcher operat-
ing in controlled conditions, we can estimate the maximum
throughput  potential  of  Selective  Notification  in  large  dis-
tributed applications.
A  hierarchy  of  Selective  Notification  dispatchers  is
needed to reach large numbers of clients. Consider a system
with a million clients. Such a system could be served by a
three-level  tree  of  dispatchers  if  the  branching  factor  was
100.  Figure  9  shows  the  estimated  notification  worst-case
throughput  and  worst-case  delivery  time  for  variations  in
dispatcher-tree  branching  factor  and  resource  dedication.
We  consider  dedicated  dispatcher  networks  (labelled  with
solid shapes) in which the dispatchers use all computational
resources,  and  peer  dispatcher  networks  (labelled  with
shape outlines) in which the dispatchers use one tenth of the
resources while clients use the remainder.
Using our current implementation, a dedicated dispatcher
tree with a branching factor of one thousand can support a
notification  every  three  seconds  and  deliver  events  in  four
seconds  to  a  million  elements.  With  a  branching  factor  of
ten, a peer dispatcher tree can support four notifications per
second delivered in 60 seconds. Dedicated dispatchers at the
)
c
e
s
/
s
e
t
o
n
(
t
u
p
h
g
u
o
r
h
T
g
o
l
2
1.5
1
0.5
0
0
- 0.5
-1
-1.5
- 2
20
40
60
80
10d
100d
1000d
10p
100p
1000p
worst case delivery (sec)
Figure 9. Performance design space for varying 
dispatcher-tree branching factors and for dedicated or 
peer-hosted dispatchers.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:41 UTC from IEEE Xplore.  Restrictions apply. 
higher levels of the tree and peer dispatchers at lower levels
can  provide  intermediate  results  for  both  notification  rate
and throughput. 10,100 dedicated dispatchers at the base of
the tree with a branching factor of 100 followed by peer dis-
patchers with a branching factor of ten to the clients would
result  in  four  notifications  per  second  throughput  with  24
second delivery time.
7. Conclusions
We  have  introduced  a  comprehensive  and  symmetric
approach to communication between managing entities and
managed entities that has immediate utility in dealing with
security attacks and other traumas that require rapid recon-
figuration  of  large  networked  information  systems.  Our
experimental  assessment  of  our  implementation  suggests
that  the  approach  scales  and  provides  acceptable  perfor-
mance.  It  might  be  possible  to  cope  with  worm  attacks  in
very  large  networks  through  rapid,  targeted  event  dissemi-
nation as illustrated in Section 4.
While additional properties in management relationships
are  necessary  to  implement  loosely  coupled  management,
symmetric  decoupled  communication  can  serve  as  a  back-
bone  for  potential  architectures.  These  systems  will  allow
flexible,  dynamic,  and  run-time  management  relationships
to  reflect  and change  with system  and  manager state.  As a
result, traditional management structures, such as hierarchy,
may be applicable to very large and dynamic systems. This
includes  application  to  interface  with  more  widely  distrib-
uted and cooperative forms of management.
8. Acknowledgements
It  is  a  pleasure  to  acknowledge  many  helpful  discus-
sions about this work and about the Siena software system
with  Antonio  Carzaniga,  Alex  Wolf,  and  Dennis  Heimbig-
ner.  This  work  was  supported  in  part  by  the  Defense
Advanced  Research  Projects  Agency  under  grant  N66001-
00-8945 (SPAWAR) and the Air Force Research Laboratory
under grant F30602-01-1-0503. The views and conclusions
contained  in  this  document  are  those  of  the  authors  and
should  not  be  interpreted  as  necessarily  representing  the
official  policies  or  endorsements,  either  expressed  or
implied, of DARPA, the Air Force, or the U.S. Government.
References
[1] W. Adjie-Winoto, E. Schwartz, H. Balakrishnan, and J. Lilley.
“The  design  and  implementation  of  an  intentional  naming
system.” Operating  Systems Review, Vol. 34 No. 5, pp 186-
2001, December 1999.
[2] A. Carzaniga, D. Rosenblum, A. Wolf. “Design and Evalua-
tion of a Wide-Area Event Notification Service.” ACM Trans-
actions  on  Computer  Systems,  Vol.  19,  No.  3,  pp.  332-383,
August 2001.
[3] A.  Carzaniga,  A.  Wolf.  “Content-based  Networking:  A  New
Communication Infrastructure.” NSF Workshop  on an Infra-
structure  for  Mobile  and  Wireless  Systems.  In  conjunction
with  the  IEEE  International  Conference  on  Computer  Com-
munications and Networks, Scotsdale AZ, October, 2001.
[4] G. Cugola.  E. Di Nitto, A. Fuggetta. “The JEDI event-based
infrastructure  and  its  application  to  the  development  of  the
OPSS WFMS.” IEEE Transactions on Software Engineering,
Volume: 27 Issue: 9, pp 827 -850, September 2001.
[5] P. Eugster, P. Felber, R. Guerraoui, A. Kermarrec. “The Many
Faces  of  Publish/Subscribe.”  Microsoft  Research  Technical
Report EPFL, DSC ID:2000104, January 2001.
[6] B.  Gerkey,  M.  Mataric.  “Murdoch:  Publish/Subscribe  Task
Allocation for Heterogeneous Agents.” Fourth ACM Interna-
tional Conference on Autonomous Agents, Barcelona, Spain,
June 2000.
[7] R.S.  Hall,  D.  Heimbigner,  A.L.  Wolf.  “A  Cooperative
Approach  to  Support  Software  Deployment  Using  the  Soft-
ware  Dock.”  IEEE/ACM  International  Conference  on  Soft-
ware Engineering, Los Angeles CA. May 1999.
[8] D.  Heimbigner.  “Adapting  publish/subscribe  middleware  to
achieve  Gnutella-like  functionality.”  Eighth  Annual  Work-
shop  on  Selected  Areas  in  Cryptography,  pp  176-181,  Tor-
onto, Canada, 2001.
[9] C. Intanagonwiwat, R. Govindan, D. Estrin. “Directed Diffu-
sion:  A  Scalable  and  Robust  Communication  Paradigm  for
Sensor Networks.” ACM International Conference on Mobile
Computing and Networking, Boston MA. August 2000.
[10] J.  Martin-Flatin,  S.  Znaty,  J.  Hubaux.  “A  Survey  of  Distrib-
uted Network and Systems Management Paradigms.” Journal
of Network and Systems Management, Vol.7, No. 1, pp 9-22.
1999
[11] N. Skarmeas, K.L. Clark. “Content based routing as the basis
for intra-agent communication.” Fifth International Workshop
on  Intelligent  Agents(V):  Agent  Theories,  Languages,  and
Architectures, Paris, France, July 1998.
[12] W. Vogels, C. Re, R. van Renesse, K. Birman. “A Collabora-
tive  Infrastructure  for  Scalable  and  Robust  News  Delivery.”
IEEE  Workshop  on  Resource  Sharing  in  Massively  Distrib-
uted Systems, Vienna, Austria, July 2002.
[13] R. van Renesse, K. Birman. “Scalable Management and Data
Mining  Using  Astrolabe.”  First  International  Workshop  on
Peer-to-Peer  Systems.  Cambridge,  Massachusetts.  March
2002.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:41 UTC from IEEE Xplore.  Restrictions apply.