Subverting Trust in Windows
Matt Graeber
Introduction
In the context of computer security, what is trust? Is it an implicit feeling of safety offered by modern
security solutions that alert to the presence of malicious code and/or actions? Is trust something that
must be explicitly acquired through careful evaluation of the software required to accomplish work in an
enterprise? In reality, there is no single correct answer. Trust is inherently subjective. What is important
is that each organization carefully consider what it means to place trust in technology. Organizations
that have a mature definition of trust should also question the means by which trust is validated by
security solutions and operating systems.
Now that the wheels are turning in your head about what trust means to you, excluding code reviews
involving manual human intervention, what are the technical means by which trust is validated? This is
obviously a much more difficult question to answer and one that you may not have even asked yourself.
The intent of this whitepaper is to shine a light on how trust decisions are made by Microsoft Windows.
By demonstrating how trust can be subverted in Windows, you will hopefully be motivated to more
frequently ask yourself what trust means to you - an extremely important and underappreciated
concept in security.
Beyond just the validation of the source and integrity of signed code, code signing and trust validation
are also critical malware classification components for many security products (e.g. anti-virus and EDR
solutions). Proper trust validation also serves as an enforcement component of most application
whitelisting solutions (AppLocker, Device Guard, etc.). Subverting the trust architecture of Windows, in
many cases, is also likely to subvert the efficacy of security products.
- 1 -
The Windows User Mode Trust Architecture
The means by which executable code is attested to originate from a particular vendor is achieved with
Authenticode digital signatures. Within user mode, the APIs through which the trust of signed code is
validated in user mode are WinVerifyTrust and WinVerifyTrustEx (which is simply a wrapper for
WinVerifyTrust with a more well-defined function prototype).
As the footprint of Windows has grown over time, there has been a need to extend the signing and trust
architecture to support additional file and binary blob formats. Depending on the file/blob specification,
signatures may need to be stored in different formats and trust should be validated in a fashion specific
to the technology. For example, digital signatures are stored in the PE file format in one particular one
way in a binary format. PowerShell scripts, on the other hand, are text files that can be signed, so their
signature, understandably, needs to be stored differently. Additionally, when signing code, hashes of the
code to be signed (typically referred to as the Authenticode hash) need to be computed and the way this
is performed is different depending on the file/blob format. Regarding trust validation of digital
signatures, the method in which the trust of a device driver is established versus that of an HTTPS
certificate will, understandably, be different.
Considering the need to support digital signatures on unique formats and to perform trust validation in
unique manners, Microsoft designed an extensible architecture to support just that. The subject
interface package (SIP) architecture was designed to support the creation, retrieval, and hash
calculation/validation of digital signatures. The validation of trust of signed code is performed using
trust providers. Both the trust provider and SIP architectures are completely abstracted away from a
software developer performing code signing and/or trust validation through the use of WinVerifyTrust
and various other exported functions in both wintrust.dll and crypt32.dll. As of this writing, there is no
evidence that documentation of this architecture has been extended to third party software developers
that might want to support signing infrastructure for their specific file formats. One possible reason this
may have not occurred is because any file, regardless of format, can technically be “signed” through the
usage of catalog signing - a file format containing a list of file hashes that can then be Authenticode
signed. Do note that validation of catalog files can only occur if the “CryptSvc” service is running.
Aside from various Windows SDK header files and the occasional MSDN documentation for exported
wintrust.dll and crypt32.dll functions, trust providers and SIPs are not documented. Due to the
complexity involved in 3rd-party implementation however, Microsoft likely intentionally chose to not
document these architectures. This whitepaper serves to document the trust provider and SIP
architectures while also explaining the ways in which they can be abused by an attacker as a means of
subverting trust, and optionally, gaining code execution in the context of processes that perform trust
validation.
Additional topics covered briefly in this whitepaper will be the extensibility of the CryptoAPI in general
to include cryptographic encoding/decoding, certificate management, etc. Microsoft couldn’t possibly
anticipate future cryptographic requirements so they designed a fully extensible architecture
- 2 -
(presumably dating back the early 90s) to accommodate the needs of the present and the future.
Unfortunately, it’s this very extensibility that permits an attacker (with elevated privileges) to hijack
existing functionality.
Determining What Files Can Be Signed
How does one know what executable file types can be signed? A naïve approach might be to look at the
file properties of a potentially signed file and look at the “Digital Signatures” tab.
The "Digital Signatures" tab indicates the presence of an embedded Authenticode signature.
While this method may confirm that some file types can be signed, as is the case in the image above for
ise.psm1 (a PowerShell script module file), this is far from a systematic method of performing signable
file type enumeration. Signature support for file types is implemented as part of a subject interface
package (SIP) - the architecture responsible for the creation, retrieval, and hash calculation/validation of
- 3 -
digital signatures. For example, in the image above, it can be seen that PowerShell script modules can be
signed. How does the Explorer UI know that PowerShell code can be signed in the first place?
Here is a portion of the embedded signature in ise.psm1:
# SIG # Begin signature block
# MIIXXAYJKoZIhvcNAQcCoIIXTTCCF0kCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUv0M9fHFPOaghmrZBoun/tqPG
# zE6gghIxMIIEYDCCA0ygAwIBAgIKLqsR3FD/XJ3LwDAJBgUrDgMCHQUAMHAxKzAp
# BgNVBAsTIkNvcHlyaWdodCAoYykgMTk5NyBNaWNyb3NvZnQgQ29ycC4xHjAcBgNV
# BAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEhMB8GA1UEAxMYTWljcm9zb2Z0IFJv
# b3QgQXV0aG9yaXR5MB4XDTA3MDgyMjIyMzEwMloXDTEyMDgyNTA3MDAwMFoweTEL
# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEjMCEGA1UEAxMaTWlj
# cm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
# ggEKAoIBAQC3eX3WXbNFOag0rDHa+SU1SXfA+x+ex0Vx79FG6NSMw2tMUmL0mQLD
# TdhJbC8kPmW/ziO3C0i3f3XdRb2qjw5QxSUr8qDnDSMf0UEk+mKZzxlFpZNKH5nN
# sy8iw0otfG/ZFR47jDkQOd29KfRmOy0BMv/+J0imtWwBh5z7urJjf4L5XKCBhIWO
# sPK4lKPPOKZQhRcnh07dMPYAPfTG+T2BvobtbDmnLjT2tC6vCn1ikXhmnJhzDYav
…
# HNHPPQanI9HpDNBxWrVzcH6zIV1vBHSeB/tFtZpOI+beHjx7X3d1cyCg5lfERzyQ
# 3jJyjSbMMbz8Pj/1meM0rlWQ/ZnYYiQAtJYqUN3ctT21Uu3ZVVnw46A8voTnSRMd
# 5mVFLFMeFyJkWgsyqLroBTm4U/G+gZ2BB0ImzSbSfIo=
# SIG # End signature block
This is how signatures happen to be stored in PowerShell code (MOF files being an exception). To
complicate matters, every file type that can be signed has its signature stored in a unique fashion. For
example, the PE Authenticode specification explains how signatures are stored and validated in PE files
(e.g. EXE, DLL, SYS, etc.).
One of the functions used to discover the SIP associated with a particular file type is the
CryptSIPRetrieveSubjectGuid function in crypt32.dll (most frequently called indirectly via
WinVerifyTrust). Given a filename and optional handle, CryptSIPRetrieveSubjectGuid returns a GUID that
represents the SIP that can handle retrieving an embedded Authenticode signature. The function
roughly works as follows:
1. Based on file magic values, it tries to determine if the file is a PE, catalog file, CTL, or cabinet file.
If it is any of these file types, it returns the following respective SIP GUID:
• C689AAB8-8E78-11D0-8C47-00C04FC295EE - PE
• DE351A43-8E59-11D0-8C47-00C04FC295EE - Catalog
• 9BA61D3F-E73A-11D0-8CD2-00C04FC295EE - CTL
• C689AABA-8E78-11D0-8C47-00C04FC295EE - Cabinet
2. If the file doesn’t match any of the previous file types, it will call CryptEnumOIDFunction, passing
it a function name of “CryptSIPDllIsMyFileType” and “CryptSIPDllIsMyFileType2”. These
functions correspond to a lookup of the following registry keys, respectively:
- 4 -
• HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\Enco
dingType 0\CryptSIPDllIsMyFileType\
• HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\Enco
dingType 0\CryptSIPDllIsMyFileType2\
As CryptEnumOIDFunction enumerates each SIP GUID registry subkey, it will call the export function
from the DLL listed in the “FuncName” and “Dll” registry values.
The function prototype for “CryptSIPDllIsMyFileType” is documented here and the function prototype
for “CryptSIPDllIsMyFileType2” is documented here. If implemented, “CryptSIPDllIsMyFileType”
functions are first called and if one of its functions returns “TRUE”, the SIP GUID that handles signatures
is returned. In practice (on Windows 10, at least), no SIPs implement “CryptSIPDllIsMyFileType” so
“CryptSIPDllIsMyFileType2” functions are then called to attempt to resolve the handling SIP. For
example, PowerShell (SIP GUID: 603BCC1F-4B59-4E08-B724-D2C6297EF351) implements
CryptSIPDllIsMyFileType2 as pwrshsip!PsIsMyFileType. Upon disassembling, decompiling, and cleaning
up the output, here is a representation of the PsIsMyFileType function in C for illustration purposes:
#define CRYPT_SUBJTYPE_POWERSHELL_IMAGE \
{ 0x603BCC1F, \
0x4B59, \
0x4E08, \
{ 0xB7, 0x24, 0xD2, 0xC6, 0x29, 0x7E, 0xF3, 0x51 } \
}
BOOL WINAPI PsIsMyFileType(IN WCHAR *pwszFileName, OUT GUID *pgSubject) {
BOOL bResult;
WCHAR *SupportedExtensions[7];
WCHAR *Extension;
GUID PowerShellSIPGUID = CRYPT_SUBJTYPE_POWERSHELL_IMAGE;
SupportedExtensions[0] = L"ps1";
SupportedExtensions[1] = L"ps1xml";
SupportedExtensions[2] = L"psc1";
SupportedExtensions[3] = L"psd1";
SupportedExtensions[4] = L"psm1";
SupportedExtensions[5] = L"cdxml";
SupportedExtensions[6] = L"mof";
bResult = FALSE;
if (pwszFileName && pgSubject) {
Extension = wcsrchr(pwszFileName, '.');
if (Extension) {
Extension++;
for (int i = 0; i < 7; i++) {
if (!_wcsicmp(Extension, SupportedExtensions[i])) {
bResult = TRUE;
memcpy(pgSubject, &PowerShellSIPGUID, sizeof(GUID));
break;
}
- 5 -
}
}
}
else {
SetLastError(ERROR_INVALID_PARAMETER);
}
return bResult;
}
As can be seen in the C code, if any file has any of the above extensions, then the PowerShell SIP will be
used as the SIP for code signing purposes. “CryptSIPDllIsMyFileType2” need not just inspect file
extensions though. The SIP could also optionally open a file handle and inspect magic values in the file to
make the correct file/blob SIP handler determination.
Other supported SIP file type handler functions are as follows (non-exhaustive list):
1. 000C10F1-0000-0000-C000-000000000046
C:\Windows\System32\MSISIP.DLL
MsiSIPIsMyTypeOfFile
2. 06C9E010-38CE-11D4-A2A3-00104BD35090
C:\Windows\System32\wshext.dll
IsFileSupportedName
3. 0AC5DF4B-CE07-4DE2-B76E-23C839A09FD1
C:\Windows\System32\AppxSip.dll
AppxSipIsFileSupportedName
4. 0F5F58B3-AADE-4B9A-A434-95742D92ECEB
C:\Windows\System32\AppxSip.dll
AppxBundleSipIsFileSupportedName
5. 1629F04E-2799-4DB5-8FE5-ACE10F17EBAB
C:\Windows\System32\wshext.dll
IsFileSupportedName
6. 1A610570-38CE-11D4-A2A3-00104BD35090
C:\Windows\System32\wshext.dll
IsFileSupportedName
7. 5598CFF1-68DB-4340-B57F-1CACF88C9A51
C:\Windows\System32\AppxSip.dll
P7xSipIsFileSupportedName
8. 603BCC1F-4B59-4E08-B724-D2C6297EF351
C:\Windows\System32\WindowsPowerShell\v1.0\pwrshsip.dll
PsIsMyFileType
9. 9F3053C5-439D-4BF7-8A77-04F0450A1D9F
C:\Windows\System32\EsdSip.dll
- 6 -
EsdSipIsMyFileType
10. CF78C6DE-64A2-4799-B506-89ADFF5D16D6
C:\Windows\System32\AppxSip.dll
EappxSipIsFileSupportedName
11. D1D04F0C-9ABA-430D-B0E4-D7E96ACCE66C
C:\Windows\System32\AppxSip.dll
EappxBundleSipIsFileSupportedName
It may be a valuable exercise for the reader to reverse some of the above functions to see what types of
file and/or binary blobs Windows supports for code signing.
Once the software that needs to retrieve a signature obtains the GUID for the SIP, it can then proceed to
extract the certificate.
File Signature Retrieval and Hash Validation
Once the SIP responsible for handling signing for a particular file/binary blob format is identified via its
respective GUID identifier, WinVerifyTrust will then know how to obtain the digital signature from the
file in question and validate its computed hash against the signed hash embedded within the digital
signature. To achieve this, WinVerifyTrust calls the following functions in the registry:
SIP signature retrieval function location:
● HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingTy
pe 0\CryptSIPDllGetSignedDataMsg\{SIP Guid}
○ Dll
○ FuncName
SIP hash validation function:
● HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingTy
pe 0\CryptSIPDllVerifyIndirectData\{SIP Guid}
○ Dll
○ FuncName
The function prototypes for CryptSIPDllGetSignedDataMsg and CryptSIPDllVerifyIndirectData are both
documented in MSDN as well as within mssip.h in the Windows SDK.
SIP signature retrieval function prototype:
BOOL WINAPI CryptSIPGetSignedDataMsg(
IN SIP_SUBJECTINFO *pSubjectInfo,
OUT DWORD *pdwEncodingType,
IN DWORD dwIndex,
IN OUT DWORD *pcbSignedDataMsg,
OUT BYTE *pbSignedDataMsg);
- 7 -
SIP hash validation function:
BOOL WINAPI CryptSIPVerifyIndirectData(
IN SIP_SUBJECTINFO *pSubjectInfo,
IN SIP_INDIRECT_DATA *pIndirectData);
The arguments supplied to these functions are populated by the calling trust provider (more details on
the trust provider architecture in sections to follow). When CryptSIPGetSignedDataMsg is called, the SIP
will extract the encoded digital signature (a CERT_SIGNED_CONTENT_INFO structure most often ASN.1
PKCS_7_ASN_ENCODING and X509_ASN_ENCODING encoded) and return it via the “pbSignedDataMsg”
parameter. The CERT_SIGNED_CONTENT_INFO content consists of the signing certificate (including its
issuing chain), the algorithm used to hash and sign the file, and the signed hash of the file. The calling
trust provider then decodes the digital signature, extracts the hash algorithm and signed hash value and
passes them to CryptSIPVerifyIndirectData. After the Authenticode hash is computed and compared
against the signed hash, if they match, CryptSIPVerifyIndirectData returns TRUE. Otherwise, it returns
FALSE and WinVerifyTrust will return an error indicating that there was a hash mismatch.
CryptSIPVerifyIndirectData is one of the most important digital signature validation functions as it is
what would indicate an error if an attacker simply applied an existing, legitimate digital signature to
their malware - a technique employed in the wild.
Here’s an example of what a hash mismatch would look like on a malware sample with a legitimate
Authenticode signature applied to it:
Example of a hash mismatch error being displayed on an unsigned file with a Microsoft Authenticode signature applied to it
(note identical SignerCertificate thumbprint values)
- 8 -
An unsigned file fails to validate when it has an Authenticode signature from a signed file applied to it. This is by design.
Trust Provider Architecture
Up to this point, the basic architecture of SIPs has been discussed. As should now be understood, SIPs
are only responsible for digital signature application, retrieval, and hash calculation/validation. The
presence of a digital signature applied to a file is meaningless unless certain criteria are actually
validated. This is where trust providers come into play - they validate trust based on a combination of
parameters specified by the caller to WinVerifyTrust in addition to criteria built into the desired trust
provider.
Like SIPs, trust providers are also uniquely identified by GUIDs. As of Windows 10, the following trust
providers are present:
- 9 -
A7F4C378-21BE-494e-BA0F-BB12C5D208C5 UNKNOWN .NET VERIFIER
7801EBD0-CF4B-11D0-851F-0060979387EA CERT_CERTIFICATE_ACTION_VERIFY
6078065B-8F22-4B13-BD9B-5B762776F386 CONFIG_CI_ACTION_VERIFY
D41E4F1F-A407-11D1-8BC9-00C04FA30A41 COR_POLICY_LOCKDOWN_CHECK
D41E4F1D-A407-11D1-8BC9-00C04FA30A41 COR_POLICY_PROVIDER_DOWNLOAD
31D1ADC1-D329-11D1-8ED8-0080C76516C6 COREE_POLICY_PROVIDER
F750E6C3-38EE-11D1-85E5-00C04FC295EE DRIVER_ACTION_VERIFY
573E31F8-AABA-11D0-8CCB-00C04FC295EE HTTPSPROV_ACTION
5555C2CD-17FB-11d1-85C4-00C04FC295EE OFFICESIGN_ACTION_VERIFY
64B9D180-8DA2-11CF-8736-00AA00A485EB WIN_SPUB_ACTION_PUBLISHED_SOFTWARE
C6B2E8D0-E005-11CF-A134-00C04FD7BF43 WIN_SPUB_ACTION_PUBLISHED_SOFTWARE_NOB