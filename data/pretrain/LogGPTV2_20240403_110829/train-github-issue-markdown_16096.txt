#### Code Sample, a copy-pastable example if possible
    data_frame.groupby(pd.TimeGrouper('D', convention='start', key=time_column)).count()
    data_frame.groupby([pd.TimeGrouper('D', convention='start', key=time_column)]).count()
give below two different outputs
                location  price  profit  type
    time                                     
    2017-07-23         1      1       1     1
    2017-07-24         0      0       0     0
    2017-07-25         1      1       1     1
    2017-07-26         1      1       1     1
    2017-07-27         3      3       3     3
    2017-07-28         6      6       6     6
                location  price  profit  type
    time                                     
    2017-07-23         1      1       1     1
    2017-07-25         1      1       1     1
    2017-07-26         1      1       1     1
    2017-07-27         3      3       3     3
    2017-07-28         6      6       6     6
#### Problem description
The origin data frame doesn't contain a record in 2017-07-24, you can see if I
use time grouper with convention='start' lonely, the 2017-07-24 item has been
filled, but if by group list, that item hasn't been filled
#### Output of `pd.show_versions()`
## INSTALLED VERSIONS
commit: None  
python: 2.7.10.final.0  
python-bits: 64  
OS: Darwin  
OS-release: 16.7.0  
machine: x86_64  
processor: i386  
byteorder: little  
LC_ALL: None  
LANG: None  
LOCALE: None.None
pandas: 0.20.3  
pytest: None  
pip: 9.0.1  
setuptools: 36.2.0  
Cython: None  
numpy: 1.13.1  
scipy: 0.19.1  
xarray: None  
IPython: None  
sphinx: None  
patsy: None  
dateutil: 2.6.1  
pytz: 2017.2  
blosc: None  
bottleneck: None  
tables: None  
numexpr: None  
feather: None  
matplotlib: None  
openpyxl: None  
xlrd: None  
xlwt: None  
xlsxwriter: None  
lxml: None  
bs4: None  
html5lib: 0.9999999  
sqlalchemy: None  
pymysql: None  
psycopg2: None  
jinja2: None  
s3fs: None  
pandas_gbq: None  
pandas_datareader: None