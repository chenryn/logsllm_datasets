### Sanitization and Benchmarking

In § D.5, the sanitization process resulted in 720 distinct bytecodes. Among these, 100 contracts were labeled as trivially non-reentrant because they did not contain any potentially reentering instructions. Additionally, 2 contracts were out of the scope of our analysis due to the presence of at least one DELEGATECALL or CALLCODE instruction, and thus were immediately classified as potentially vulnerable. We have made this sanitized benchmark, including both bytecode and source code (where available), accessible to the community [6]. For 13 contracts, we were unable to reconstruct the control flow graph, leaving us with 605 distinct contracts for our experiments.

### Experimental Setup

We conducted three different experiments to evaluate eThor's performance for the single-entrancy property:
1. Without performing any Horn clause folding.
2. Using each of the two Horn clause folding variants described in § 4.

The primary goal of this experimental setup was not only to compare eThor with ZEUS but also to demonstrate how eThor's modular structure allows it to flexibly benefit from different optimization techniques provided by the HoRSt compiler. In the comparison with ZEUS, we considered the combined results of the three experiments (contracts solvable using any of the applied transformations). For the exhaustive folding, we only included instances where the SMT-LIB output could be generated within 15 minutes. All experiments were conducted on a Google Cloud Server with 24 cores at 2.8 GHz and 150 GiB of RAM, executing up to 30 queries simultaneously, each with a 10-minute timeout. This setup allowed us to obtain results for all but 20 contracts.

### Precision Assessment

To assess the precision of our tool, we compared the results with those of [34]. Given the existing unsoundness claims about [34] in the literature [24, 47], we manually reassessed the ground truth provided by [34] for all contracts labeled insecure by at least one of the tools. Due to the challenging and time-consuming nature of this task, especially when no Solidity source code is available, we excluded contracts with more than 6000 bytecodes for which we could not obtain the source code. This left us with 712 contracts for which we assessed the ground truth.

Surprisingly, we found numerous contracts labeled as non-reentrant by [34] that, upon single-contract analysis, were definitely reentrant according to the definition of reentrancy given in Definition 2.1 and the informal definition provided in [34] itself. We attribute this discrepancy to [34]'s syntactical treatment of the call directive at the Solidity level, which is insufficient to catch all possible reentrancies. To improve comparability, we slightly updated our abstract semantics to account for calls that can be deemed secure following the same argument (i.e., a small gas budget prevents reentrancy).

### Comparison with ZEUS

For achieving a termination rate comparable to [34] (95.4% vs. 98.3%), we needed to run our tool with a substantially higher timeout (10-minute query timeout vs. 1-minute contract timeout for ZEUS). This difference can be attributed to the fact that our analysis works on less structured bytecode, in contrast to the simplified high-level representation used by [34]. Additional overhead is due to the use of sound abstractions at the bytecode level and our different experimental setup, which did not allow for the same level of parallelization. The soundness claim of [34] is challenged by the experimentally assessed sensitivity of only 11.4%.

### Performance Metrics

The performance metrics are summarized in Table 1. The total number of contracts in the dataset and the number of contracts on which the respective tool terminated are denoted as total/terminated. True/false positives (tp/fp) and true/false negatives (tn/fn) are also provided.

| Measure | Definition | eThor | [34] |
|---------|------------|-------|------|
| Termination | terminated/total | 95.4 | 98.3 |
| Sensitivity | tp/(tp + fn) | 100 | 11.4 |
| Specificity | tn/(tn + fp) | 80 | 99.8 |
| F-measure | 2 * (spec * sens / (spec + sens)) | 88.9 | 20.4 |

### Horn Clause Folding

Our experimental evaluation shows that while both forms of Horn clause folding improve the termination rate, the results of the different foldings are not directly comparable. Figure 12 illustrates the (lowest) termination times for queries that terminated within 200 seconds during the large-scale experiment. The different colors indicate the type of optimization (no, linear, or exhaustive folding) that was fastest to solve the corresponding query. The distribution of the dots shows that for simpler contracts, exhaustive folding (blue) dominates, while for more complex contracts, linear folding (green) often performs better. Interestingly, for a few instances, even applying no folding at all (red) led to the fastest termination, likely due to special heuristics in z3.

### Related Work and Discussion

In recent years, there has been significant work on the automatic analysis of Ethereum smart contracts, which can be classified into dynamic and static analysis approaches. Examples of dynamic approaches include the work by Grossmann et al. [26] on effectively callback freedom. Static analysis tools like Securify [48], ZEUS [34], EtherTrust [24], and NeuCheck [37] make soundness claims but often lack formal proofs and rigorous validation.

### Conclusion

We presented eThor, the first automated tool implementing a sound static analysis technique for EVM bytecode. eThor abstracts the semantics of EVM bytecode into a set of Horn clauses and expresses security and functional properties in terms of reachability queries solved using z3. To ensure long-term maintenance and facilitate future refinements, we designed HoRSt, a development framework for Horn-clause-based static analysis tools. We successfully evaluated eThor against the official Ethereum test suite and conducted a large-scale evaluation, demonstrating its practicality and superior performance compared to ZEUS.

### Future Work

Future research directions include extending eThor and HoRSt to handle relational properties, refining the analysis for multi-contract settings, and enhancing the precision of abstractions for calls. We also plan to extend the scope of HoRSt to make the specification of the static analysis accessible to proof assistants and explore the automated generation of static analysis patterns from the concrete semantics specification.

### Acknowledgments

This work was partially supported by the European Research Council (ERC) under the European Union’s Horizon 2020 research (grant agreement 771527-BROWSEC); the Austrian Science Fund (FWF) through the projects PROFET (grant agreement P31621) and W1255-N23; the Austrian Research Promotion Agency (FFG) through the Bridge-1 project PR4DLT (grant agreement 13808694) and the COMET K1 SBA; and the Internet Foundation Austria (IPA) through the netidee project EtherTrust (Call 12, project 2158).

### References

[1] 2016. The DAO Smart Contract. Available at http://etherscan.io/address/0xbb9bc244d798123fde783fcc1c72d3bb8c189413#code.

[2] 2017. The Parity Wallet Breach, 30 million ether reported stolen. Available at https://www.coindesk.com/30-million-ether-reported-stolen-parity-wallet-breach/.

[3] 2017. The Parity Wallet Vulnerability. Available at https://paritytech.io/blog/.

[4] 2019. SafeMath library source. https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol.

[5] 2019. Solidity. https://solidity.readthedocs.io/.

[6] 2020. eThor: source code, build, and evaluation artifacts. https://secpriv.wien/ethor.

[7] 2020. evm-cfg-builder. https://github.com/crytic/evm_cfg_builder.

[8] 2020. SMT-LIB. Available at http://smtlib.cs.uiowa.edu/language.shtml.

[9] Chandra Adhikari. 2017. Secure Framework for Healthcare Data Management Using Ethereum-based Blockchain Technology. (2017).

[10] Elvira Albert, Pablo Gordillo, Benjamin Livshits, Albert Rubio, and Ilya Sergey. 2018. Ethir: A framework for high-level analysis of Ethereum bytecode. In International Symposium on Automated Technology for Verification and Analysis. Springer, 513–520.

[11] Sidney Amani, Myriam Bégel, Maksym Bortin, and Mark Staples. 2018. Towards Verifying Ethereum Smart Contract Bytecode in Isabelle/HOL. CPP. ACM. To appear (2018).

[12] Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. 2017. A Survey of Attacks on Ethereum Smart Contracts (SoK). In International Conference on Principles of Security and Trust. Springer, 164–186.

[13] Asaph Azaria, Ariel Ekblaw, Thiago Vieira, and Andrew Lippman. 2016. Medrec: Using Blockchain for Medical Data Access and Permission Management. In Open.