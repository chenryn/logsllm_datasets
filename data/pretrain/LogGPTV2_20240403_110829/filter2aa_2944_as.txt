API request
X-CSRF-Token=xyz...
xyz...
Cookie
Cookie
Token store
Session: xyz...
Set-Cookie: csrfToken=abc...
csrfToken = SHA-256(xyz...)
= abc..
Cookie
Cookie
The csrfToken cookie is
ignored by the server
. . . so the request
will be blocked.
Malicious
client
Figure 4.12
In the hash-based double-submit cookie pattern, the anti-CSRF token is computed 
as a secure hash of the session cookie. As before, a malicious client is unable to guess the correct 
value. However, they are now also prevented from overwriting the CSRF cookie because they 
cannot compute the hash of the session cookie.
133
Preventing Cross-Site Request Forgery attacks
you will use the SHA-256 hash function. SHA-256 is considered by most cryptogra-
phers to be a secure hash function.
DEFINITION
SHA-256 is a cryptographically secure hash function designed by
the US National Security Agency that produces a 256-bit (32-byte) output
value. SHA-256 is one variant of the SHA-2 family of secure hash algorithms
specified in the Secure Hash Standard (https://doi.org/10.6028/NIST.FIPS
.180-4), which replaced the older SHA-1 standard (which is no longer consid-
ered secure). SHA-2 specifies several other variants that produce different
output sizes, such as SHA-384 and SHA-512. There is also now a newer SHA-3
standard (selected through an open international competition), with variants
named SHA3-256, SHA3-384, and so on, but SHA-2 is still considered secure
and is widely implemented.
4.4.3
Double-submit cookies for the Natter API
To protect the Natter API, you will implement hash-based double-submit cookies as
described in the last section. First, you should update the CookieTokenStore create
method to return the SHA-256 hash of the session cookie as the token ID, rather than
the real value. Java’s MessageDigest class (in the java.security package) imple-
ments a number of cryptographic hash functions, and SHA-256 is implemented by all
current Java environments. Because SHA-256 returns a byte array and the token ID
should be a String, you can Base64-encode the result to generate a string that is safe
to store in a cookie or header. It is common to use the URL-safe variant of Base64 in
web APIs, because it can be used almost anywhere in a HTTP request without addi-
tional encoding, so that is what you will use here. Listing 4.10 shows a simplified inter-
face to the standard Java Base64 encoding and decoding libraries implementing the
URL-safe variant. Create a new file named Base64url.java inside the src/main/java/
com/manning/apisecurityinaction/token folder with the contents of the listing.
package com.manning.apisecurityinaction.token;
import java.util.Base64;
public class Base64url {
    private static final Base64.Encoder encoder =      
            Base64.getUrlEncoder().withoutPadding();   
    private static final Base64.Decoder decoder =      
            Base64.getUrlDecoder();                    
    public static String encode(byte[] data) {      
        return encoder.encodeToString(data);        
    }                                               
    public static byte[] decode(String encoded) {   
        return decoder.decode(encoded);             
    }                                               
}
Listing 4.10
URL-safe Base64 encoding
Define static 
instances of the 
encoder and 
decoder objects.
Define simple 
encode and 
decode methods.
134
CHAPTER 4
Session cookie authentication
The most important part of the changes is to enforce that the CSRF token supplied by
the client in a header matches the SHA-256 hash of the session cookie. You can per-
form this check in the CookieTokenStore read method by comparing the tokenId
argument provided to the computed hash value. One subtle detail is that you should
compare the computed value against the provided value using a constant-time equal-
ity function to avoid timing attacks that would allow an attacker to recover the CSRF
token value just by observing how long it takes your API to compare the provided
value to the computed value. Java provides the MessageDigest.isEqual method to
compare two byte-arrays for equality in constant time,2 which you can use as follows to
compare the provided token ID with the computed hash:
var provided = Base64.getUrlDecoder().decode(tokenId);
var computed = sha256(session.id());
if (!MessageDigest.isEqual(computed, provided)) {
    return Optional.empty();
}
2 In older versions of Java, MessageDigest.isEqual wasn’t constant-time and you may find old articles about
this such as https://codahale.com/a-lesson-in-timing-attacks/. This has been fixed in Java for a decade now
so you should just use MessageDigest.isEqual rather than writing your own equality method.
Timing attacks
A timing attack works by measuring tiny differences in the time it takes a computer
to process different inputs to work out some information about a secret value that
the attacker does not know. Timing attacks can measure even very small differences
in the time it takes to perform a computation, even when carried out over the internet.
The classic paper Remote Timing Attacks are Practical by David Brumley and Dan
Boneh of Stanford (2005; https://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf)
demonstrated that timing attacks are practical for attacking computers on the same
local network, and the techniques have been developed since then. Recent research
shows you can remotely measure timing differences as low as 100 nanoseconds over
the internet (https://papers.mathyvanhoef.com/usenix2020.pdf).
Consider what would happen if you used the normal String equals method to com-
pare the hash of the session ID with the anti-CSRF token received in a header. In
most programming languages, including Java, string equality is implemented with a
loop that terminates as soon as the first non-matching character is found. This
means that the code takes very slightly longer to match if the first two characters
match than if only a single character matches. A sophisticated attacker can measure
even this tiny difference in timing. They can then simply keep sending guesses for
the anti-CSRF token. First, they try every possible value for the first character (64 pos-
sibilities because we are using base64-encoding) and pick the value that took slightly
longer to respond. Then they do the same for the second character, and then the
third, and so on. By finding the character that takes slightly longer to respond at each
step, they can slowly recover the entire anti-CSRF token using time only proportional
135
Preventing Cross-Site Request Forgery attacks
To update the implementation, open CookieTokenStore.java in your editor and update
the code to match listing 4.11. The new parts are highlighted in bold. Save the file
when you are happy with the changes.
package com.manning.apisecurityinaction.token;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.util.*;
import spark.Request;
public class CookieTokenStore implements TokenStore {
    @Override
    public String create(Request request, Token token) {
        var session = request.session(false);
        if (session != null) {
            session.invalidate();
        }
        session = request.session(true);
        session.attribute("username", token.username);
        session.attribute("expiry", token.expiry);
        session.attribute("attrs", token.attributes);
to its length, rather than needing to try every possible value. For a 10-character Base64-
encoded string, this changes the number of guesses needed from around 6410 (over
1 quintillion possibilities) to just 640. Of course, this attack needs many more requests
to be able to accurately measure such small timing differences (typically many thou-
sands of requests per character), but the attacks are improving all the time.
The solution to such timing attacks is to ensure that all code that performs compar-
isons or lookups using secret values take a constant amount of time regardless of
the value of the user input that is supplied. To compare two strings for equality, you
can use a loop that does not terminate early when it finds a wrong value. The follow-
ing code uses bitwise XOR (^) and OR (|) operators to check if two strings are equal.
The value of c will only be zero at the end if every single character was identical.
if (a.length != b.length) return false;
int c = 0;
for (int i = 0; i  read(Request request, String tokenId) {
        var session = request.session(false);
        if (session == null) {
            return Optional.empty();
        }
        var provided = Base64url.decode(tokenId);    
        var computed = sha256(session.id());         
        if (!MessageDigest.isEqual(computed, provided)) {    
            return Optional.empty();                         
        }
        var token = new Token(session.attribute("expiry"),
                session.attribute("username"));
        token.attributes.putAll(session.attribute("attrs"));
        return Optional.of(token);
    }
    static byte[] sha256(String tokenId) {
        try {
            var sha256 = MessageDigest.getInstance("SHA-256");   
            return sha256.digest(                                
                tokenId.getBytes(StandardCharsets.UTF_8));       
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e);
        }
    }
}
The TokenController already returns the token ID to the client in the JSON body of
the response to the login endpoint. This will now return the SHA-256 hashed version,
because that is what the CookieTokenStore returns. This has an added security bene-
fit that the real session ID is now never exposed to JavaScript, even in that response.
While you could alter the TokenController to set the CSRF token as a cookie directly,
it is better to leave this up to the client. A JavaScript client can set the cookie after
login just as easily as the API can, and as you will see in chapter 5, there are alternatives
to cookies for storing these tokens. The server doesn’t care where the client stores the
CSRF token, so long as the client can find it again after page reloads and redirects and
so on.
 The final step is to update the TokenController token validation method to look
for the CSRF token in the X-CSRF-Token header on every request. If the header is not
present, then the request should be treated as unauthenticated. Otherwise, you can
pass the CSRF token down to the CookieTokenStore as the tokenId parameter as
Return the SHA-256 hash 
of the session cookie, 
Base64url-encoded.
Decode the supplied 
token ID and compare 
it to the SHA-256 of 
the session.
If the CSRF token 
doesn’t match the 
session hash, then 
reject the request.
Use the Java 
MessageDigest 
class to hash 
the session ID.
137
Preventing Cross-Site Request Forgery attacks
shown in listing 4.12. If the header isn’t present, then return without validating the
cookie. Together with the hash check inside the CookieTokenStore, this ensures that
requests without a valid CSRF token, or with an invalid one, will be treated as if they
didn’t have a session cookie at all and will be rejected if authentication is required. To
make the changes, open TokenController.java in your editor and update the validate-
Token method to match listing 4.12.
public void validateToken(Request request, Response response) {
    var tokenId = request.headers("X-CSRF-Token");          
    if (tokenId == null) return;                            
    tokenStore.read(request, tokenId).ifPresent(token -> {   
        if (now().isBefore(token.expiry)) {
            request.attribute("subject", token.username);
            token.attributes.forEach(request::attribute);
        }
    });
}
TRYING IT OUT
If you restart the API, you can try out some requests to see the CSRF protections in
action. First, create a test user as before:
$ curl -H 'Content-Type: application/json' \
  -d '{"username":"test","password":"password"}' \
  https://localhost:4567/users
{"username":"test"}
You can then login to create a new session. Notice how the token returned in the
JSON is now different to the session ID in the cookie.
$ curl -i -c /tmp/cookies -u test:password \
  -H 'Content-Type: application/json' \
  -X POST https://localhost:4567/sessions
HTTP/1.1 201 Created
Date: Mon, 20 May 2019 16:07:42 GMT
Set-Cookie: 
JSESSIONID=node01n8sqv9to4rpk11gp105zdmrhd0.node0;Path=/;Secure;HttpOnly    
…
{"token":"gB7CiKkxx0FFsR4lhV9hsvA1nyT7Nw5YkJw_ysMm6ic"}                      
If you send the correct X-CSRF-Token header, then requests succeed as expected:
$ curl -i -b /tmp/cookies -H 'Content-Type: application/json' \
  -H 'X-CSRF-Token: gB7CiKkxx0FFsR4lhV9hsvA1nyT7Nw5YkJw_ysMm6ic' \
  -d '{"name":"test space","owner":"test"}' \
  https://localhost:4567/spaces
HTTP/1.1 201 Created
…
{"name":"test space","uri":"/spaces/1"}
Listing 4.12
The updated token validation method
Read the CSRF token from 
the X-CSRF-Token header.
Pass the CSRF 
token to the 
TokenStore as the 
tokenId parameter.
The session ID in the cookie
is different to the hashed
one in the JSON body.
138
CHAPTER 4
Session cookie authentication
If you leave out the X-CSRF-Token header, then requests are rejected as if they were
unauthenticated:
$ curl -i -b /tmp/cookies -H 'Content-Type: application/json' \
  -d '{"name":"test space","owner":"test"}' \
   https://localhost:4567/spaces
HTTP/1.1 401 Unauthorized
…
4.5
Building the Natter login UI
Now that you’ve got session-based login working from the command line, it’s time to
build a web UI to handle login. In this section, you’ll put together a simple login UI,
much like the existing Create Space UI that you created earlier, as shown in figure 4.13.
When the API returns a 401 response, indicating that the user requires authentica-
tion, the Natter UI will redirect to the login UI. The login UI will then submit the
username and password to the API login endpoint to get a session cookie, set the anti-
CSRF token as a second cookie, and then redirect back to the main Natter UI.
 While it is possible to intercept the 401 response from the API in JavaScript, it is
not possible to stop the browser popping up the ugly default login box when it
receives a WWW-Authenticate header prompting it for Basic authentication creden-
tials. To get around this, you can simply remove that header from the response when
the user is not authenticated. Open the UserController.java file in your editor and
update the requireAuthentication method to omit this header on the response. The
Pop quiz
4
Given a cookie set by https:/ /api.example.com:8443 with the attribute Same-
Site=strict, which of the following web pages will be able to make API calls to
api.example.com with the cookie included? (There may be more than one correct
answer.)
a
http:/ /www .example.com/test
b
https:/ /other.com:8443/test
c
https:/ /www .example.com:8443/test
d
https:/ /www .example.org:8443/test
e
https:/ /api.example.com:8443/test
5
What problem with traditional double-submit cookies is solved by the hash-based
approach described in section 4.4.2?
a
Insufficient crypto magic.
b
Browsers may reject the second cookie.
c
An attacker may be able to overwrite the second cookie.
d
An attacker may be able to guess the second cookie value.
e
An attacker can exploit a timing attack to discover the second cookie value.
The answers are at the end of the chapter.
139
Building the Natter login UI
new implementation is shown in listing 4.13. Save the file when you are happy with
the change.
public void requireAuthentication(Request request, Response response) {
    if (request.attribute("subject") == null) {
        halt(401);     
    }
}
Technically, sending a 401 response and not including a WWW-Authenticate header is
in violation of the HTTP standard (see https://tools.ietf.org/html/rfc7235#section-3.1
for the details), but the pattern is now widespread. There is no standard HTTP auth
scheme for session cookies that could be used. In the next chapter, you will learn
about the Bearer auth scheme used by OAuth2.0, which is becoming widely adopted
for this purpose.
 The HTML for the login page is very similar to the existing HTML for the Create
Space page that you created earlier. As before, it has a simple form with two input
fields for the username and password, with some simple CSS to style it. Use an input
with type="password" to ensure that the browser hides the password from anybody
watching over the user’s shoulder. To create the new page, navigate to src/main/
resources/public and create a new file named login.html. Type the contents of list-
ing 4.14 into the new file and click save. You’ll need to rebuild and restart the API
for the new page to become available, but first you need to implement the JavaScript
login logic.
    Natter!
Login
    Username:                  
    Password:                      