# [Activism](anticolonialism.md)
* New: Add song for Gaza.
    [We Will Not Go Down (Song for Gaza Palestine) - Michael Heart](https://yewtu.be/watch?v=dlfhoU66s4Y)
# Life Management
## Task Management
### [Org Mode](orgmode.md)
* New: [Code blocks syntax.](orgmode.md#code-blocks)
    Org offers two ways to structure source code in Org documents: in a source code block, and directly inline. Both specifications are shown below.
    A source code block conforms to this structure:
    ```org
    ```
    You need to use snippets for this to be usable.
    An inline code block conforms to this structure:
    ```org
    src_{}
    ```
    or
    ```org
    src_[]{}
    ```
    Where:
    - `#+NAME: `: (Optional) Names the source block so it can be called, like a function, from other source blocks or inline code to evaluate or to capture the results. Code from other blocks, other files.
    - `#+BEGIN_SRC’ … ‘#+END_SRC`: (Mandatory) They mark the start and end of a block that Org requires.
    - ``: (Mandatory) It is the identifier of the source code language in the block. See [Languages](https://orgmode.org/worg/org-contrib/babel/languages/index.html) for identifiers of supported languages.
    - ``: (Optional) Switches provide finer control of the code execution, export, and format.
    - ``: (Optional) Heading arguments control many aspects of evaluation, export and tangling of code blocks. Using Org’s properties feature, header arguments can be selectively applied to the entire buffer or specific subtrees of the Org document.
    - ``: Source code in the dialect of the specified language identifier.
* New: [Narrow/Widen to subtree.](orgmode.md#narrow/widen-to-subtree)
    It's [not yet supported](https://github.com/nvim-orgmode/orgmode/issues/200) to focus or zoom on one task.
* New: [Interesting things to investigate.](orgmode.md#interesting-things-to-investigate)
    - [org-bullets.nvim](https://github.com/akinsho/org-bullets.nvim): Show org mode bullets as UTF-8 characters.
    - [headlines.nvim](https://github.com/lukas-reineke/headlines.nvim): Add few highlight options for code blocks and headlines.
    - [Sniprun](https://github.com/michaelb/sniprun): A neovim plugin to run lines/blocs of code (independently of the rest of the file), supporting multiples languages.
    - [Python library: Org-rw](https://github.com/kenkeiras/org-rw)
    - [List of plugins](https://github.com/topics/orgmode-nvim)
## Knowledge Management
### [Spaced Repetition](spaced_repetition.md)
* New: Introduce spaced repetition references.
    - https://collegeinfogeek.com/spaced-repetition-memory-technique/
    - [The leitner box](https://www.youtube.com/watch?v=uvF1XuseZFE)
## [Game Theory](game_theory.md)
* New: Add the evolution of trust game theory game.
    [Evolution of trust](https://ncase.me/trust/)
    Game theory shows us the three things we need for the evolution of trust:
    - Repeat interactions: Trust keeps a relationship going, but you need the knowledge of possible future repeat interactions before trust can evolve
    - Possible win-wins: You must be playing a non-zero-sum game, a game where it's at least possible that both players can be better off -- a win-win.
    - Low miscommunication: If the level of miscommunication is too high, trust breaks down. But when there's a little bit of miscommunication, it pays to be more forgiving
# DevOps
## Continuous Integration
### [Shellcheck](shellcheck.md)
* New: Introduce shellcheck.
    [Shellcheck](https://www.shellcheck.net/) is a linting tool to finds bugs in your shell scripts.
    **[Installation](https://github.com/koalaman/shellcheck#installing)**
    ```bash
    apt-get install shellcheck
    ```
    **Errors**
    **[SC2143: Use `grep -q` instead of comparing output with `[ -n .. ]`.](https://www.shellcheck.net/wiki/SC2143)**
    Problematic code:
    ```bash
    if [ "$(find . | grep 'IMG[0-9]')" ]
    then
      echo "Images found"
    fi
    ```
    Correct code:
    ```bash
    if find . | grep -q 'IMG[0-9]'
    then
      echo "Images found"
    fi
    ```
    Rationale:
    The problematic code has to iterate the entire directory and read all matching lines into memory before making a decision.
    The correct code is cleaner and stops at the first matching line, avoiding both iterating the rest of the directory and reading data into memory.
## Storage
### [OpenZFS](zfs.md)
* New: [Mount a dataset that is encrypted.](zfs.md#mount-a-dataset-that-is-encrypted)
    If your dataset is encrypted using a key file you need to:
    - Mount the device that has your keys
    - Import the pool without loading the key because you want to override the keylocation attribute with zfs load-key. Without the -l option, any encrypted datasets won't be mounted, which is what you want.
    - Load the key(s) for the dataset(s)
    - Mount the dataset(s).
    ```bash
    zpool import rpool    # without the `-l` option!
    zfs load-key -L file:///path/to/keyfile rpool
    zfs mount rpool
    ```
* New: [Umount a pool.](zfs.md#umount-a-pool)
    ```bash
    zpool export pool-name
    ```
* Correction: [Improve the Repair a DEGRADED pool instructions.](zfs.md#repair-a-degraded-pool)
    First you need to make sure that it is in fact a problem of the disk. Check the `dmesg` to see if there are any traces of reading errors, or SATA cable errors.
    A friend suggested to mark the disk as healthy and do a resilver on the same disk. If the error is reproduced in the next days, then replace the disk. A safer approach is to resilver on a new disk, analyze the disk when it's not connected to the pool, and if you feel it's safe then save it as a cold spare.
## Monitoring
### [Loki](loki.md)
* New: Introduce loki.
    [Loki](https://grafana.com/docs/loki/latest/) is a set of components that can be composed into a fully featured logging stack.
    Unlike other logging systems, Loki is built around the idea of only indexing metadata about your logs: labels (just like Prometheus labels). Log data itself is then compressed and stored in chunks in object stores such as Amazon Simple Storage Service (S3) or Google Cloud Storage (GCS), or even locally on the filesystem.
    A small index and highly compressed chunks simplifies the operation and significantly lowers the cost of Loki.
## Authentication
### [Authentik](authentik.md)
* New: [Troubleshoot I can't log in to authentik.](authentik.md#i-can't-log-in-to-authentik)
    In case you can't login anymore, perhaps due to an incorrectly configured stage or a failed flow import, you can create a recovery key.
    To create the key, run the following command:
    ```bash
    docker run --it authentik bash
    ak create_recovery_key 1 akadmin
    ```
    This will output a link, that can be used to instantly gain access to authentik as the user specified above. The link is valid for amount of years specified above, in this case, 1 year.
# Operating Systems
## Linux
### [Linux Snippets](linux_snippets.md)
* New: [Wipe a disk.](linux_snippets.md#wipe-a-disk)
    Overwrite it many times [with badblocks](hard_drive_health.md#check-the-health-of-a-disk-with-badblocks).
    ```bash
    badblocks -wsv -b 4096 /dev/sde | tee disk_wipe_log.txt
    ```
* New: [Impose load on a system to stress it.](linux_snippets.md#impose-load-on-a-system-to-stress-it)
    ```bash
    sudo apt-get install stress
    stress --cpu 2
    ```
    That will fill up the usage of 2 cpus. To run 1 vm stressor using 1GB of virtual memory for 60s, enter:
    ```bash
    stress --vm 1 --vm-bytes 1G --vm-keep -t 60s
    ```
    You can also stress io with `--io 4`, for example to spawn 4 workers.
* New: [Get the latest tag of a git repository.](linux_snippets.md#get-the-latest-tag-of-a-git-repository)
    ```bash
    git describe --tags --abbrev=0
    ```
* New: [Configure gpg-agent cache ttl.](linux_snippets.md#configure-gpg-agent-cache-ttl)
    The user configuration (in `~/.gnupg/gpg-agent.conf`) can only define the default and maximum caching duration; it can't be disabled.
    The `default-cache-ttl` option sets the timeout (in seconds) after the last GnuPG activity (so it resets if you use it), the `max-cache-ttl` option set the timespan (in seconds) it caches after entering your password. The default value is 600 seconds (10 minutes) for `default-cache-ttl` and 7200 seconds (2 hours) for max-cache-ttl.
    ```
    default-cache-ttl 21600
    max-cache-ttl 21600
    ```
    For this change to take effect, you need to end the session by restarting `gpg-agent`.
    ```bash
    gpgconf --kill gpg-agent
    gpg-agent --daemon --use-standard-socket
    ```
* New: [Get return code of failing find exec.](linux_snippets.md#get-return-code-of-failing-find-exec)