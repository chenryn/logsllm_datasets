matches quickly and easily. The “lightgrep” scanner from the bulk extractor utility
will be leveraged to this end. Bulk extractor also supports an implementation of the
“FindAES” tool mentioned previously in the form of an “aes” scanner, and was
used for session key scanning2.
Windows 10 was also selected as the initial target system, in part for the
same reason that it was selected as the analysis platform. In addition to being the
latest release, and Microsoft intends for it to be a “universal” operating system
across devices (Warren, 2015). This is evident not only from statements by the
company, but actions like o↵ering free upgrades from previous versions of Windows
(Microsoft, 2015f) and announcing plans to upgrade one billion devices to Windows
10 (Myerson, 2015). In brief testing, Windows 10 also prefers ephemeral cipher
suites when using RDP. The free upgrades, universal deployment strategy, and
2although Volatility may also be used for AES key scanning, employing the same technique as
bulk extractor, bulk extractor was selected as it does not require interpretation and loading of any
address space, but treats all inputs as bitstreams
51
preference for PFS connections make it an ideal candidate system to maximize the
impact of the research going forward.
The systems were virtualized atop the open-source VirtualBox platform.
VirtualBox supports the required capabilities for testing, namely snapshots and the
use of pipes which can be connected between hosts to simulate a serial connection.
This support will signiﬁcantly ease the burden of Kernel debugging in Windows,
which requires an external OS attached to the debuggee through a serial connection.
A logical diagram of the analysis infrastructure and list of exact tools with
versions can be found in Figure 3.2 and Table 3.1 respectively.
Figure 3.2. Analysis infrastructure logical diagram
52
Table 3.1. Analysis infrastructure
Tool
Version
Author
VirtualBox
5.0.14
Oracle
Windows 10
10.0.10586
Microsoft
Python
2.7
Python Software Foundation
WinDbg
10.0.10586.567
Microsoft
radare2
w32-0.10.1
PI:EMAIL
Volatility
2.5
Volatility Foundation
Rekall
1.4.1
Google
HxD
1.7.7.0
Ma¨el H¨orz
cvdump
14.00.23611
Microsoft
bulk extractor
1.5.2
Simon Garfunkel
Kali Linux
2016.1
O↵ensive Security
Wireshark
2.0.2
Wireshark Foundation
FreeRDP
2.0.0-dev (git 2a3e999)
The FreeRDP Team
sslkeylog
N/A
Peter Wu
3.0.5 Measure of Success
The deﬁning criterion for success was the implementation of a repeatable,
reliable, and possibly automated method for identiﬁcation and extraction of
artifacts that enabled the decryption of arbitrary connections. For connections
53
employing PFS, this would involve extraction of either the pre-master key, master
key, or ephemeral private key and association with a unique identiﬁer for a given
connection. Even if this goal is not achieved, there are still valuable forensic
artifacts that may be extracted, which could constitute contribution to the
community. Extraction of public keys, timestamps, and connection identiﬁers that
may outlive or compliment other sources used for enumerating prior connections
from memory could be forensically signiﬁcant.
3.1 Summary
This chapter provided the methodology and technical implementation that
will be employed in the research. It discussed the design decisions that led to the
choice of methodology and instrumentation, and infused the information gleaned in
the literature review to do so. Chapter Four will describe the results achieved
through application of this methodology, and any anecdotal ﬁndings or deviations
from what has been described.
54
CHAPTER 4. RESULTS & DISCUSSION
A variety of outcomes were obtained through application of the steps
discussed in Chapter Three and through adaptations that deviated from the
anticipated methodology. This section discusses those outcomes, roughly segmented
in alignment with the steps that appeared in the methodology. A brief summary of
the most salient ﬁndings is as follows:
• Master key structures were identiﬁed and mapped to the session ID (but not
the client/server random), allowing successful decryption of TLS connections
• Other opaquely documented TLS structures were identiﬁed and documented
• Time constants alluded to in the Checkoway paper were identiﬁed and
explained
• Methodical evolutions that are applicable to future endeavors were developed
and employed
For clarity, the remainder of the results will be explained and illustrated in
the context of a single client/server memory pair and complimentary packet
capture. This facilitates understanding the chain of discovery events and ﬂows more
naturally. Similarly, most examples/ﬁgures, when applicable, are related through
the lens of WinDbg, allowing more consistent and lucid explanations.
4.1 Staging and Execution
The testing environment was established as shown in Figure 3.2 from
Chapter Three. Various RDP connections were made between hosts during the
analysis, and the hosts were rebooted periodically. The hosts were allowed access to
the Internet, for the sake of broadening the number of possible artifacts that could
55
be found. These additional artifacts result from connections instigated by
autonomous tasks Windows engages in like checking for updates.
The focus of the research was on the exploration and development of a
technique to extract the artifacts. Future work will focus on rigorous scientiﬁc
testing of the methods to further validate the provenance and accuracy of the
ﬁndings. Even so, as will be illustrated, most conclusions are derived not only from
direct observation, but from the mechanics that are used to implement TLS in
Windows (the DLLs, Functions, and default variables) and the Microsoft’s
documentation thereof, adding weight beyond simply experimental observation.
Below are a list of sources and connection parameters from one experimental
run that will be used to frame the discussion of the rest of the results. These typify
the evidentiary items and artifacts used for other experimental runs. The hope is
that discussion of these parameters will portray the relationships of artifacts and
logic employed to arrive at conclusions more clearly. The data sources analyzed in a
given run include those below, and the public values of a single RDP connection
established appear in Figure 4.1
• Network capture from client of bidirectional RDP session
• LSASS user-mode process dump of the server
• LSASS user-mode process dump of the client
• VMEM of server directly after LSASS dump creation
• VMEM of client directly after LSASS dump creation
56
Figure 4.1. Example connection parameters in Wireshark
4.2 Heuristic Scanning for AES keys
Bulk extractor scans yielded AES keys on both client and server, but not
common keys between the two. It was expected that AES keys would be returned
due to the aforementioned role that LSASS plays in encrypting secrets for locally
authenticated users. Despite no cross-system matches, there were keys on each
individual host that appeared multiple times.
57
The lack of an overt match does not preclude the possibility that the
matching AES session keys do reside in memory. It simply means that a valid key
schedule was not identiﬁed between the two using the algorithm employed by
bulk extractor. It is conceivable that the session key was transferred to the
requesting process and then destroyed within the LSASS process. Considering the
presence of other key schedules, the lack of a valid schedule for a session keys that
does exist seems somewhat unlikely as it would point to an inconsistent
implementation. The absence of a match led to the identiﬁed keys schedules being
inspected manually.
Manual inspection involved viewing context surrounding the keys in a hex
editor for possible clues as to whether or not they may relate to an TLS connection.
If the keys were allocated in close temporal proximity to other connection
parameters, there may be adjacency to those parameters on the heap for instance.
The keys were examined sequentially from the lowest match address to the
highest. In the sample above, both AES-128 and AES-256 keys were returned. The
scope of the search could have been restricted to only AES-128 keys (based on the
cipher suite) for eﬃciency; however, the limited number of keys meant that
examining the additional keys was not burdensome and actually provided a valuable
anti-pattern (e.g. what values exist around all AES keys found and are therefore
dis-interesting in the context of a search for TLS-speciﬁc artifacts).
The examination led to several relevant discoveries. The majority of the ﬁrst
keys were preﬁxed with the magic dword values “RUUU” and “KSSM” if rendered
in ASCII. These numeric values are stored Little Endian, and so when considered as
strings they would be “UUUR” and “MSSK” respectively. The two strings appear
in the source code for credential extraction tools like Mimikatz in relation to
Microsoft’s bcrypt module (Delphy, 2016b).
The interesting point, however, was when keys appeared that did not have
“RUUU” preﬁxing them, but maintained a similar structure (including “MSSK”).
These keys appeared to have a magic dword with the value of “3lss” or “ssl3” in Big
58
Endian. This was an immediate indicator that they could be related to SSL. As
anticipated earlier, the ﬁrst key preceded by the “ssl3” tag was located near
connection artifacts such as the unicode text “Microsoft SSL Protocol Provider,”
what appears to be a session ID, connection parameters, and URLs. Some of this
context can be viewed in Figure 4.2.
48 80 31 e7 5e 00 00 00-98 5b 24 e7 5e 00 00 00
H.1.^....[$.^...
04 00 00 00 00 c2 02 0c-00 08 00 00 28 c0 00 00
............(...
18 00 00 00 80 01 00 00-10 00 00 00 10 00 00 00
................
00 00 00 00 00 00 00 00-01 00 00 00 00 00 00 00
................
01 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00
................
00 00 00 00 00 00 00 00-b0 e5 2d e7 5e 00 00 00
..........-.^...
20 00 00 00 6f 23 00 00-a0 21 aa c4 8d 15 54 45
...o#...!....TE
24 c1 45 4e 4e c0 1d 5a-db 30 5d 8d 9d 57 ab 2b
$.ENN..Z.0]..W.+
99 1d d5 97 00 00 00 00-00 00 00 00 00 00 00 00
................
00 00 00 00 00 00 00 00-00 00 00 00 05 00 00 00
................
00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00
................
ff ff ff ff 00 00 00 00-00 00 00 00 00 00 00 00
................
09 00 00 00 40 00 00 00-40 00 00 00 00 00 00 00
....@...@.......
4d 00 69 00 63 00 72 00-6f 00 73 00 6f 00 66 00
M.i.c.r.o.s.o.f.
74 00 20 00 53 00 53 00-4c 00 20 00 50 00 72 00
t. .S.S.L. .P.r.
6f 00 74 00 6f 00 63 00-6f 00 6c 00 20 00 50 00
o.t.o.c.o.l. .P.
72 00 6f 00 76 00 69 00-64 00 65 00 72 00 00 00
r.o.v.i.d.e.r...
02 00 00 00 80 02 00 00-7c 02 00 00 00 00 00 00
........|.......
7c 02 00 00 33 6c 73 73-03 03 00 00 28 c0 00 00
|...3lss....(...
01 00 00 00 30 02 00 00-30 00 00 00 31 de 5f 96
....0...0...1._.
80 e3 a4 10 fc 78 f1 cf-c5 de e6 dd 7d 63 7b ab
.....x......}c{.
c0 68 c5 b3 cf 1d c4 7b-17 1b 01 ad 60 00 c8 f2
.h.....{....‘...
8c d5 3b be 6a 42 49 d0-a7 9f 2c bc 30 02 00 00
..;.jBI...,.0...
4b 53 53 4d 02 00 01 00-01 00 00 00 10 00 00 00
KSSM............
00 01 00 00 20 00 00 00-4c 2a 57 5a 12 c3 f4 e2
.... ...L*WZ....
15 31 48 4d ff 9f ab 34-aa 54 91 28 cc 9e 6f 5f
.1HM...4.T.(..o_
4e a9 b3 d1 f9 29 8c 8d-00 00 00 00 4c 2a 57 5a
N....)......L*WZ
12 c3 f4 e2 15 31 48 4d-ff 9f ab 34 aa 54 91 28
.....1HM...4.T.(
cc 9e 6f 5f 4e a9 b3 d1-f9 29 8c 8d e8 4e 0a c3
..o_N....)...N..
fa 8d fe 21 ef bc b6 6c-10 23 1d 58 60 72 35 42
...!...l.#.X‘r5B
ac ec 5a 1d e2 45 e9 cc-1b 6c 65 41 ba 03 89 6c
..Z..E...leA...l
Figure 4.2. ssl3 tag to AES artifact adjacency
59
Searching for the dword “MSSK” with WinDbg led to hits both in writable
space and in a loaded module (as expected for a static magic value). Resolving the
nearest symbols to the magic values within the module led to both insight into the
meaning of MSSK and a tactic that will be employed repeatedly later. All of the
symbols were found in the “bcryptprimitives” module and were related to
“MSCrypt” keys. The most interesting symbol name resolved was
“bcryptprimitives!validateMSCryptSymmKey.” This was a pivotal revelation for the
analysis: assumption about a structure can be veriﬁed to some degree by looking for
a “validate” functions related to that structure. The validate functions encountered
were fairly simple, as can be seen by the disassembly of the
“bcryptprimitives!validateMSCryptSymmKey” in Figure 4.3.
0:000> uf
bcryptprimitives!validateMSCryptSymmKey
bcryptprimitives!validateMSCryptSymmKey:
00007ffa‘436a79ac 33c0
xor
eax,eax
00007ffa‘436a79ae 4885c9
test
rcx,rcx
00007ffa‘436a79b1 740b
je
bcryptprimitives!validateMSCryptSymmKey+0x12 (00007ffa‘436
a79be)
Branch
bcryptprimitives!validateMSCryptSymmKey+0x7:
00007ffa‘436a79b3 8179044b53534d
cmp
dword ptr [rcx+4],4D53534Bh // ascii ’MSSK’
00007ffa‘436a79ba 480f45c8
cmovne
rcx,rax