title:SPRESSO: A Secure, Privacy-Respecting Single Sign-On System for
the Web
author:Daniel Fett and
Ralf K&quot;usters and
Guido Schmitz
SPRESSO: A Secure, Privacy-Respecting
Single Sign-On System for the Web
Daniel Fett
University of Trier, Germany
PI:EMAIL
Ralf Küsters
University of Trier, Germany
PI:EMAIL
Guido Schmitz
University of Trier, Germany
PI:EMAIL
ABSTRACT
Single sign-on (SSO) systems, such as OpenID and OAuth, allow
web sites, so-called relying parties (RPs), to delegate user authen-
tication to identity providers (IdPs), such as Facebook or Google.
These systems are very popular, as they provide a convenient means
for users to log in at RPs and move much of the burden of user
authentication from RPs to IdPs.
There is, however, a downside to current systems, as they do not
respect users’ privacy: IdPs learn at which RP a user logs in. With
one exception, namely Mozilla’s BrowserID system (a.k.a. Mozilla
Persona), current SSO systems were not even designed with user
privacy in mind. Unfortunately, recently discovered attacks, which
exploit design ﬂaws of BrowserID, show that BrowserID does not
provide user privacy either.
In this paper, we therefore propose the ﬁrst privacy-respecting
SSO system for the web, called SPRESSO (for Secure Privacy-
REspecting Single Sign-On). The system is easy to use, decen-
tralized, and platform independent. It is based solely on standard
HTML5 and web features and uses no browser extensions, plug-ins,
or other executables.
Existing SSO systems and the numerous attacks on such systems
illustrate that the design of secure SSO systems is highly non-trivial.
We therefore also carry out a formal analysis of SPRESSO based
on an expressive model of the web in order to formally prove that
SPRESSO enjoys strong authentication and privacy properties.
INTRODUCTION
1.
Web-based Single Sign-On (SSO) systems allow a user to iden-
tify herself to a so-called relying party (RP), which provides some
service, using an identity that is managed by an identity provider
(IdP), such as Facebook or Google.
If an RP uses an SSO sys-
tem, a user does not need a password to log in at the RP. Instead,
she is authenticated by the IdP, which exchanges some data with
the RP so that the RP is convinced of the user’s identity. When
logged in at the IdP already, a user can even log in at the RP by one
click without providing any password. This makes SSO systems
very attractive for users. These systems are also very convenient
for RPs as much of the burden of user authentication, including,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813726.
for example, the handling of user passwords and lost passwords, is
shifted to the IdPs. This is why SSO systems are very popular and
widely used on the web. Over the last years, many different SSO
systems have been developed, with OpenID [13] (used by Google,
Yahoo, AOL, and Wordpress, for example) and OAuth [14] (used
by Twitter, Facebook, PayPal, Microsoft, GitHub, and LinkedIn,
for example) being the most prominent of such systems; other SSO
systems include SAML/Shibboleth, CAS, and WebAuth.
There is, however, a downside to these systems: with one ex-
ception, none of the existing SSO systems have been designed to
respect users’ privacy. That is, the IdP always knows at which RP
the user logs in, and hence, which services the user uses. In fact,
exchanging user data between IdPs and RPs directly in every login
process is a key part of the protocols in OpenID and OAuth, for
example, and thus, IdPs can easily track users.
The ﬁrst system so far which was designed with the intent to
respect users’ privacy was the BrowserID system [18, 19], which is
a relatively new system developed by Mozilla and is also known by
its marketing name Persona.
Unfortunately, in [11] severe attacks against BrowserID were
discovered, which show that the privacy of BrowserID is completely
broken: these attacks allow malicious IdPs and in some versions of
the attacks even arbitrary parties to check the login status of users
at any RP with little effort (see Section 2.1 for some more details
on these attacks). Even worse, these attacks exploit design ﬂaws
of BrowserID that, as discussed in [11], cannot be ﬁxed without
a major redesign of the system, and essentially require building a
new system. As further discussed in Section 2.4, besides the lack
of privacy there are also other issues that motivate the design of a
new system.
The goal of this work is therefore to design the (ﬁrst) SSO sys-
tem which respects users’ privacy in the sense described above,
i.e., IdPs (even completely malicious ones) should not be able to
track at which RPs users log in. Moreover, the history of SSO
systems shows that it is highly non-trivial to design secure SSO
systems, not only w.r.t. privacy requirements, but even w.r.t. au-
thentication requirements. Attacks easily go unnoticed and in fact
numerous attacks on SSO systems, including attacks on OAuth,
OpenID, Google ID, Facebook Connect, SAML, and BrowserID
have been uncovered which compromise the security of many ser-
vices and users at once [4–6, 20, 21, 24–27]. Besides designing
and implementing a privacy-respecting SSO system, we therefore
also carry out a formal security analysis of the system based on
an expressive model of the web infrastructure in order to provide
formal security guarantees. More speciﬁcally, the contributions of
our work are as follows.
Contributions of this Paper. In this work, we propose the system
SPRESSO (for Secure Privacy-REspecting Single Sign-On). This
1358is the ﬁrst SSO system which respects user’s privacy. The system
allows users to log in to RPs with their email addresses. A user is
authenticated to an RP by the IdP hosting the user’s email address.
This is done in such a way that the IdP does not learn at which RP
the user wants to log in.
Besides strong authentication and privacy guarantees (see also be-
low), SPRESSO is designed in such a way that it can be used across
browsers, platforms, and devices. For this purpose, SPRESSO is
based solely on standard HTML5 and web features and uses no
browser extensions, plug-ins, or browser-independent executables.
Moreover, as further discussed in Section 2.1, SPRESSO is de-
signed as an open and decentralized system. For example, in con-
trast to OAuth, SPRESSO does not require any prior coordination
or setup between RPs and IdPs: users can log in at any RP with any
email address with SPRESSO support.
We formally prove that SPRESSO enjoys strong authentication
and privacy properties. Our analysis is based on an expressive
Dolev-Yao style model of the web infrastructure [10]. This web
model is designed independently of a speciﬁc web application and
closely mimics published (de-facto) standards and speciﬁcations
for the web, for instance, the HTTP/1.1 and HTML5 standards and
associated (proposed) standards. It is the most comprehensive web
model to date. Among others, HTTP(S) requests and responses,
including several headers, such as cookie, location, strict transport
security (STS), and origin headers, are modeled. The model of
web browsers captures the concepts of windows, documents, and
iframes, including the complex navigation rules, as well as new
technologies, such as web storage and cross-document messaging
(postMessages). JavaScript is modeled in an abstract way by so-
called scripting processes which can be sent around and, among
others, can create iframes and initiate XMLHTTPRequests (XHRs).
Browsers may be corrupted dynamically by the adversary.
So far, this web model has been employed to analyze trace-based
properties only, namely, authentication properties.
In this work,
we formulate, for the ﬁrst time, strong indistinguishability/privacy
properties for web applications. Our general deﬁnition is not tai-
lored to a speciﬁc web application, and hence, should be useful
beyond our analysis of SPRESSO. These properties require that an
adversary should not be able to distinguish two given systems. In
order to formulate these properties we slightly modify and extend
the web model.
Finally, we formalize SPRESSO in the web model and formally
state and prove strong authentication and privacy properties for
SPRESSO. The authentication properties we prove are central to
any SSO system, where our formulation of these properties follows
the one in [10]. As for the privacy property, we prove that a mali-
cious IdP cannot distinguish whether an honest user logs in at one
RP or another. The analysis we carry out in this work is also in-
teresting by itself, as web applications have rarely been analyzed
based on an expressive web model (see Section 8).
Structure of this Paper. In Section 2, we describe our system and
discuss and motivate design choices. We then, in Section 3, brieﬂy
recall the general web model from [10] and explain the modiﬁca-
tions and extensions we made. The mentioned strong but general
deﬁnition of indistinguishability/privacy for web applications is pre-
sented in Section 4. In Section 5, we provide the formal model of
SPRESSO, based on which we state and analyze privacy and au-
thentication of SPRESSO in Sections 6 and 7, respectively. Further
related work is discussed in Section 8. We conclude in Section 9.
All details and proofs are available in our technical report [12]. An
online demo and the source code of SPRESSO are available at [22].
2. DESCRIPTION OF SPRESSO
In this section, we ﬁrst brieﬂy describe the main features of
SPRESSO. We then provide a detailed description of the system
in Section 2.2, with further implementation details given in Sec-
tion 2.3. To provide additional intuition and motivation for the
design of SPRESSO, in Section 2.4 we discuss potential attacks
against SPRESSO and why they are prevented.
2.1 Main Features
SPRESSO enjoys the following key features:
Strong Authentication and Privacy. SPRESSO is designed to
satisfy strong authentication and privacy properties.
Authentication is the most fundamental security property of an
SSO system. That is, i) an adversary should not be able to log in to
an RP, and hence, use the service of the RP, as an honest user, and
ii) an adversary should not be able to log in the browser of an honest
user under an adversary’s identity (identity injection). Depending
on the service provided by the RP, a violation of ii) could allow
the adversary to track an honest user or to obtain user secrets. We
note that in the past, attacks on authentication have been found
in almost all deployed SSO systems (e.g., OAuth, OpenID, and
BrowserID [10, 11, 21, 23, 24, 26, 27]).
While authentication assumes the involved RP and IdP to be
honest, privacy is concerned with malicious IdPs. This property
requires that (malicious) IdPs should not be able to track at which
RPs speciﬁc users log in. As already mentioned, so far, except for
BrowserID, no other SSO system was designed to provide privacy.
(In fact, exchanging user data between IdPs and RPs directly is a
key part of the protocols in OpenID and OAuth, for example, and
hence, in such protocols, IdPs can easily track at which RP a user
logs in.) However, BrowserID failed to provide privacy: As shown
in [11], a subtle attack allowed IdPs (and in some versions of the
attack even arbitrary parties) to check the login status of users at
any RP. More speciﬁcally, by running a malicious JavaScript within
the user’s browser, an IdP can, for any RP, check whether the user is
logged in at that RP by triggering the (automatic) login process and
testing whether a certain iframe is created during this process or not.
The (non-)existence of this iframe immediately reveals the user’s
login status. Hence, a malicious IdP can track at which RP a user is
logged in. As we discuss in [11], this could not be ﬁxed without a
major redesign of BrowserID. Our work could be considered such a
major redesign. While SPRESSO shares some basic concepts with
BrowserID, SPRESSO is, however, not based on BrowserID, but a
new system built from scratch (see the discussion in Section 2.4).
The above shows that the design of a secure SSO system is
non-trivial and that attacks are very easy to overlook. As already
mentioned in the introduction, we therefore not only designed and
implemented SPRESSO to meet strong authentication and privacy
properties, but also perform a formal analysis of SPRESSO in an
expressive model of the web infrastructure in order to show that
SPRESSO in fact meets these properties.
An Open and Decentralized System. We created SPRESSO as a
decentralized, open system. In SPRESSO, users are identiﬁed by
their email addresses, and email providers certify the users’ authen-
ticity. Compared to OpenID, users do not need to learn a new, com-
plicated identiﬁer — an approach similar to that of BrowserID. But
unlike in BrowserID, there is no central authority in SPRESSO (see
also the discussion in Section 2.4). In contrast to OAuth, SPRESSO
does not require any prior coordination or setup between RPs and
IdPs: Users can log in at any RP with any email address with
SPRESSO support. For email addresses lacking SPRESSO sup-
port, a seamless fallback can be provided, as discussed later.
1359RPdoc
RP
IdP
FWD
2
user enters email address
user enters email address
and clicks “login”
and clicks “login”
1 GET /
3 POST /startLogin
email
4 GET /.well-known/spresso-info
5
rpNonce ← N
rpNonce ← N
iaKey ← N
iaKey ← N
tagKey ← N
tagKey ← N
loginSessionToken ← N
loginSessionToken ← N
6 tag = encs((cid:104)RPDomain,rpNonce(cid:105),tagKey)
tag = encs((cid:104)RPDomain,rpNonce(cid:105),tagKey)
7 HTTP Response
tagKey, FWDDomain, loginSessionToken
8 open
loginSessionToken
RPRedirDoc
9 GET redirPath
loginSessionToken
10 HTTP Response
RPRedirDoc, email, tag, FWDDomain, iaKey
11
Redirect to IdPdoc with email, tag,
FWDDomain, iaKey in the URL
Redirect to IdPdoc with email, tag,
FWDDomain, iaKey in the URL
fragment identiﬁer
fragment identiﬁer
12 GET /.well-known/spresso-login
13 user enters secret
user enters secret
14 POST /loginxhr
secret, email, tag, FWDDomain
17 HTTP Response
ia