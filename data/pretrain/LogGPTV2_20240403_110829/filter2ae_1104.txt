**Author: LoRexxar'@Knownsec 404 Team**

**Chinese Version:**

On March 13, 2019, the RIPS team published an article titled [WordPress CSRF to RCE](https://blog.ripstech.com/2019/wordpress-csrf-to-rce/ "WordPress CSRF to RCE"), which primarily discusses a Cross-Site Scripting (XSS) vulnerability in WordPress 5.1.1. Let's delve into the details.

## About WordPress Defense

As early as October 25, 2017, I wrote [an article](https://lorexxar.cn/2017/10/25/wordpress/ "an article") on the security mechanisms of WordPress, focusing on its core **Nonce security mechanism**. To defend against Cross-Site Request Forgery (CSRF) attacks, WordPress introduced the Nonce mechanism, which is calculated based on the user ID, token, and operation attribute. In summary, the **Nonce value is unique to both the user and the operation**. Different users will have different Nonce values for the same operation, and the same user will have different Nonce values for different operations. Additionally, the same user performing the same operation on different sites will also have different Nonce values. This provides a robust defense for WordPress's back-end security.

In the view of the WordPress core development team, each super admin should be responsible for maintaining the security of their own website and account. Consequently, a WordPress super admin can directly modify the back-end plugin template to inject code without any comment filtering.

Thus, under the WordPress defense system, the primary focus of security vulnerabilities is how to bypass the Nonce mechanism and obtain super admin privileges, allowing actions that could threaten the site even under non-super admin privileges.

## About the CSRF to RCE Vulnerability

I previously mentioned a unique mechanism in WordPress's comments area, where the comments of a super admin are not filtered, but there is still a Nonce value: `_wp_unfiltered_html_comment`. Certain special functions, such as [Trackbacks and Pingbacks](https://make.wordpress.org/support/user-manual/building-your-wordpress-community/trackbacks-and-pingbacks/ "Trackbacks and Pingbacks"), are affected by this value. Therefore, in the comments area, the Nonce does not directly block the request but instead processes it through a set of logic.

In `/wp-includes/comment.php` at line 3245:
```php
if ( current_user_can( 'unfiltered_html' ) ) {
    if ( wp_create_nonce( 'unfiltered-html-comment' )!=$_POST['_wp_unfiltered_html_comment'] ) {
        kses_remove_filters(); // start with a clean slate
        kses_init_filters(); // set up the filters
    }
}
```
Simplified in pseudo-code:
```plaintext
if (has_permission):
    if (nonce_is_correct):
        wp_filter_post_kses()  # No filtering, retains the full comment
    else:
        wp_filter_kses()  # Only allows whitelisted tags, e.g., <a>
```

The key issue is finding an input point in the `wp_filter_kses` whitelist that can cause XSS. This vulnerability exists in the `rel` attribute processing of the `<a>` tag.

In `/wp-includes/formatting.php` at line 3025:
![Image](https://images.seebug.org/content/images/2019/03/fbecb12a-a975-4ab2-85d9-6f00afabbe8a.png-w331s)

Here, the entire tag is processed without additional escaping and is completed by concatenating double quotes. If we construct a comment like this:
```html
<a href="javascript:alert('XSS')">please click me</a>
```
The attributes in the original link will be extracted and wrapped in double quotes:
```html
<a href="javascript:alert('XSS')" rel="noopener noreferrer">please click me</a>
```
This constructs a malicious link, and arbitrary JavaScript can be executed when the admin hovers over the comment.

Finally, after executing arbitrary JavaScript, the attacker can directly modify the back-end template to perform malicious operations under admin privileges. In my previous article, I detailed various ways to exploit XSS for further malicious activities.

Upon closer examination, the attacker needs to trick the super admin into clicking a malicious link, then manually hover over the comment or keep the page open for a while. The entire attack is likely to succeed under these conditions.

If we evaluate the vulnerability under WordPress's security standards, the only part that can be considered a vulnerability is the WordPress XSS that bypasses the Nonce mechanism. While it seems to have favorable exploitation conditions, plugin security remains the most significant problem in WordPress security.

## Vulnerability Requirements

- WordPress commit
- Use a browser where the super admin is logged in to open the page, submit the comment, and execute the corresponding JavaScript when hovering over the comment.
![Image](https://images.seebug.org/content/images/2019/03/3ea885ea-5471-49c9-a97d-539d9645cb0e.png-w331s)

## Analyzing the Vulnerability from the Patch

As previously mentioned, the entire vulnerability can be seen as a WordPress XSS that bypasses the Nonce mechanism. From the vulnerability patch, we can reanalyze several key points. So far, there have been two commits to fix this issue.

- The first commit addresses the XSS vulnerability that should not exist.
  ![Image](https://images.seebug.org/content/images/2019/03/990e84b5-a9e5-4b2b-b326-dd1372671f63.png-w331s)
  `esc_attr` is a built-in filter function in WordPress designed to handle potential XSS in attributes.

- The second commit is more interesting and seems like a partial fix. It may have been rushed, and the patch was updated first.
  ![Image](https://images.seebug.org/content/images/2019/03/42a1f3a2-cb8a-4cce-8759-177a8c36487d.png-w331s)
  We need to follow the `wp_filter_kses` function to understand the commit, leading us to `/wp-includes/kses.php` at line 1039.
  ![Image](https://images.seebug.org/content/images/2019/03/81c607dc-e12d-4b0f-9fe0-9664b610d488.png-w331s)
  Here, `pre_comment_content` is more like a type of request, and the allowed tags and attributes can be obtained from `wp_kses_allowed_html`.
  `/wp-includes/kses.php` at line 829:
  ![Image](https://images.seebug.org/content/images/2019/03/5591a8b0-29ad-4493-9f62-a1e0736a8d5e.png-w331s)
  There is no specific setting yet, so in the current version, if the Nonce is not set and the comment filtering function is the same as for other users, the vulnerability is fixed from another angle.

## Conclusion

After analyzing the entire vulnerability, it is evident that it resembles a stored XSS vulnerability disclosed in CMS. The existence of such an exploitation chain is due to WordPress's flawed security awareness.

## About Knownsec & 404 Team

Beijing Knownsec Information Technology Co., Ltd. was founded by a group of high-profile international security experts. It has over a hundred top-tier security talents nationwide, forming the core security research team. Knownsec provides long-term, internationally advanced network security solutions for governments and enterprises.

Knownsec specializes in integrated network attack and defense technologies and product R&D under new circumstances. It offers visualization solutions that meet world-class security technology standards and enhances the security monitoring, alert, and defense capabilities of customer networks with industry-leading capabilities in cloud computing and big data processing. The company's technical strength is highly recognized by the State Ministry of Public Security, the Central Government Procurement Center, the Ministry of Industry and Information Technology (MIIT), China National Vulnerability Database of Information Security (CNNVD), the Central Bank, the Hong Kong Jockey Club, Microsoft, Zhejiang Satellite TV, and other well-known clients.

The 404 Team, the core security team of Knownsec, is dedicated to researching security vulnerabilities and offensive and defensive technologies in fields such as Web, IoT, industrial control, and blockchain. The 404 Team has submitted vulnerability research to many well-known vendors, including Microsoft, Apple, Adobe, Tencent, Alibaba, and Baidu, and has received high praise in the industry.

Some of the most well-known contributions of the Knownsec 404 Team include:
- [KCon Hacking Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference")
- [Seebug Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability Database")
- [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/ "ZoomEye Cyberspace Search Engine")

* * *