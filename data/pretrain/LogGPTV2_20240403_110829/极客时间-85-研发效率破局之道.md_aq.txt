## 成功推行代码审查的两个关键原则
### 代码审查原则一：互相尊重代码审查是两个开发者之间的技术交流，双方都要谨记互相尊重的原则。**从代码作者的角度来看**，审查者要花费时间去阅读他并不熟悉的代码，来帮助你提高，应该尽量为审查者提供方便。比如，提高提交说明的质量，就是对审查者最基本的尊重。还有，如果你的代码都没有进行自测就提交审查，你觉得审查者心里会怎么想呢？又比如，如果你提交的一个审查有一万行代码，让审查者怎么看呢？所以，代码作者一定要提审查者着想，帮助审查者能够比较轻松地完成审查。这里还有一些细节性的问题：1.  注意描述文字的格式。比如，使用 Markdown 格式书写，在 GitHub、GitLab    等工具上就会比较美观。这些格式方面的问题，可能有的开发者会觉得麻烦而不屑于去做。但实际上，这样的细节，会让审查者更愿意也更容易去阅读你的提交说明，提高代码审查的效率。这也是对审查者的尊重。2.  在描述测试情况的时候，尽量提供真实的输出，如果是 UI    改动的话，最好能够提供截屏。提交说明只支持文字，但你可以把图片上传到其他地方，然后提供链接。这样审查者可以更直观的看到修改效果，对审查效率的提高有非常大的帮助。3.  如果需要审查者特别注意某一方面，要明确指出。如果有些代码过于复杂，可以主动找审查者当面讨论。**从审查者的角度来看**，在提出建议的时候，一定要考虑代码作者的感受。最重要的一点是，不要用一些主观标准来评判别人的代码。在 Facebook的时候，我团队里有一个同事对一些技术的细节特别坚持己见。本来两个实现方式的效果差不多，设计也各有优劣，但他要求作者一定要按照他的思路来实现。同时，他的语言能力特别强，常常在讨论里面长篇大论地写他的理由，让代码作者非常头痛，降低了大家的研发效能。最后还是大家都在绩效考评时给他提意见，他才改了一些。尊重代码作者的做法，还有：1.  在打回提交的时候，一定要礼貌地描述原因。2.  审查要尽量及时，如果不能及时审查要告知作者。这些都只是互相尊重的一些具体实践。在做代码审查时，我建议你随时记得要互相尊重，多为对方考虑。只有这样，代码审查才能顺畅。
### 代码审查原则二：基于讨论代码审查常常出现问题的一个地方是，在审查过程中因为意见不同而产生争执甚至争吵，所以一定记住**代码审查的目的是讨论，而不是评判**，作为管理者一定要在团队中强调这个原则。讨论的心态，有助于放下不必要的自尊心，从而顺利地进行技术交流，提高审查效率。另外，讨论的心态也能促进大家提早发出审查，从而尽早发现结构设计方面的问题。在 Facebook时，我们常常会发出一些目的只是讨论的代码审查，讨论之后会抛弃这个提交，然后重新发出新的代码，效果非常不错。另外，我还有一些关于讨论的建议：-   审查者切记不要说教，说教容易让人反感，不是讨论的好方法。-   审查者提意见即可，不一定要提供解决方法。我曾经见过一个团队要求提出问题必须给出对应的答案，结果是大家都不愿提问题了。-   想办法增加讨论的有趣性。在 Facebook    做代码审查的时候，我们常使用图片进行讨论，用有趣的方式表达自己的意见。这样做有两个好处，一是容易被对方接受，二是开发工作比较枯燥，我们应该主动找点乐趣，你说对不对？比如说，如果觉得代码提交太大，审查者就可能会贴一张有很多星球的图片。星球按由小到大小到的顺序排成一行，最左边的是地球，右边是木星，再右边是太阳。天体越来越大，最右边一个超级大，但是标签上写的不是星球的名字，而是"你的代码提交"。大概是这样一幅图：![](Images/c3aa69c81c38d1d45f0fa499ef966444.png){savepage-src="https://static001.geekbang.org/resource/image/3c/18/3c23ac9dad6688618b8328fc789d7618.jpg"}以上就是两个文化相关的原则。互相尊重和基于讨论。只有这样，才能实现代码作者和审查者的双赢：代码作者的代码质量得到提高，代码审查者能顺畅审查代码。
## 小结几乎所有的开发团队都适合使用工具进行代码审查。无论团队大小如何，都可以通过合适的代码审查进行高性价比的讨论。在今天的这篇文章中，我针对代码审查的引入、推进，以及文化原则三个方面，给出了一些建议。在引入阶段，我有三个建议：1.  团队统一思想，代码审查是有效工作的一部分，应该计算到工作量里面；2.  选择合适的试点团队；3.  让机器审查和人工审查结合，使得人工审查更聚焦。在推进实施的阶段，我推荐提高提交的原子性，以及重视使用提交说明两个关键操作。最后，我建议通过互相尊重和基于讨论这两个原则，从文化的角度固化团队的代码审查实践。这三个方面的建议，是我基于 Facebook 的经验总结得出的，是 Facebook高效代码审查的重要原则和方法，可以帮助你在团队中推动高效代码审查。同时，这三个方面的措施也分别对应了在一个团队引入、推进、深化代码审查的步骤。希望对你在团队中引入代码审查的具体过程有一定的借鉴作用。
## 思考题1.  你见过或者经历过推行代码审查的成功或者失败案例吗？你觉得成功或失败的原因是什么呢？2.  上面提到 GitHub、GitLab、Gerrit 都是用 Git    分支来存储被审核的代码。只有 Phabricator    使用数据库存储。你知道为什么吗？（提示：Phabricator    里没有"Git"这三个字母。）感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎你把这篇文章分享给更多的朋友一起阅读。我们下期再见！![](Images/6476358e731920fbc927e278bae473aa.png){savepage-src="https://static001.geekbang.org/resource/image/ec/d8/ece1747e3a8f96aa76a8e57c94de94d8.jpg"}
# 14 \| 质量与速度的均衡：让"唯快不破"快得更持久你好，我是葛俊。今天，我来和你聊聊团队可持续性的快速开发，怎样才能让"唯快不破"快得更持久。最近几年，一提到开发，很多人想到的都是"天下武功，唯快不破"。也就是说，开发过程越快越好，越快越有竞争力。这的确是软件开发，尤其是互联网行业软件开发的不二法则。也正如我在前面文章中多次提到的，快速开发可以快速得到用户反馈，更快地验证用户价值假设。无疑，这是高效开发的重要原则。因此，我们在实际工作中，往往会为了快而选择各种"捷径"。比如：-   要开发已有功能的一个相似功能，因为时间很紧就先 copy &    paste，保证功能按时上线。-   需要在一个函数里增加功能，这个函数已经有 800 行了，加上新功能后会有    1000 行。重构这个函数是来不及了，先把功能加上去再说。说是"捷径"，是因为这些都不是最优解，有点儿投机取巧。它们的确能让我们在短期内保证快速交付，满足业务发展需求。但如果没有任何补救措施的话，时间长了我们就再也快不起来了。比如，"Copy &Paste"方式的编程，会导致后续添加功能时，需要在很多地方做类似修改，工作量大且容易出错。再比如，无视函数变大的操作，会导致后续的修改、调试异常困难。这些问题都会成为开发工作中的**技术债**，也就是**在开发产品或者功能的过程中，没有使用最佳的实现方法而引入的技术问题**。无疑，这些技术问题会为将来的产品维护和开发带来额外开销。只有正确地处理技术债，才能让我们的研发持续地快下去。``{=html}接下来，我们就来看看技术债的成因、影响，以及对应的处理方法。
## 技术债的成因从成因来看，技术债的引入包括主动和被动两种。-   主动引入，即开发人员知道某一个实现会产生技术债，但仍采用这样的实现。最常见的情况是，由于业务压力，在时间和资源受限的情况下不得不牺牲质量。-   被动引入，即不是开发人员主动引入的技术债。常见的情况有两种：一是，产品不断演化，技术不断发展，原来的设计、实现落伍了；二是，开发团队的能力和水平有限，没有采用好的开发方法、实践。所以说，技术债是无法避免的，我们要做的就是明确它的影响、处理好它。
## 技术债有哪些影响？提到技术债，我们想到的往往是它的坏处，比如难以维护、难以增加新功能等，但实际上它也有巨大好处。关于技术债的好处，我们可以对应着金融领域的经济债务来理解。我们都知道，经济债务最明显的好处在于，可以帮助我们完成很多本来不可能完成的任务，比如贷款买房。相应的，技术债可以在短期内帮我们快速完成业务开发，满足用户需求，就类似房贷的作用。但跟经济债务一样，技术债也需要偿还，也会产生利息，而且是利滚利。也就是说，每一步累积的技术债都会叠加起来，为开发增加越来越大的难度。长期来看，如果一直借债不还，开发新功能会越来越慢，产品维护越来越难，甚至是无法维护必须推到重来，就像还不上房贷房子被银行收回一样。那么，技术债务应该如何处理、如何偿还呢？
## 处理技术债的基本原则是什么？在我看来，处理技术债的基本原则有以下两个方面。**第一方面，要利用技术债的好处，必要时要大胆"举债前行"**。也就是说，在机会出现时，使用最快的方式完成业务服务用户，抢占市场先机，"不要在意那些细节"。一个具体的例子是，RethinkDB 在与 MongoDB的竞争中失利。在技术上，RethinDB 比 MongoDB 更追求完美，但比 MongoDB发布稳定版本晚了三年，错过了 NoSQL 的黄金时机，最终在 2017 年 1月份宣布破产。在这个过程中，他们没有充分利用技术债抢占市场，应该是竞争失败的一个重要原因。文章中我放了两个链接供你阅读参考，你可以了解一下RethinkDB 公司的人以及外部用户对他们的失败进行的反思[文章1](http://www.defmacro.org/2017/01/18/why-rethinkdb-failed.html)、[文章2](https://news.ycombinator.com/item?id=13421608)。**第二个方面，要控制技术债，在适当的时候偿还适当部分的技术债。**在我看来，国内大部分公司的业务驱动做得比较好，大都能够比较充分地利用技术债的好处，但在技术债的管控方面，通常做得不太够，具体来说就是常常有大量技术债堆积，给业务长期发展带来巨大阻碍。所以在下面的内容中，我会与你详细讲述应该怎样控制技术债。