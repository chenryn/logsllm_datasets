pacity
Compute packet’s virtual start time using
ﬁnish time of last packet in that ﬂow.
Track number of changes in announced
TTL for each domain
Update best path’s utilization/id if we see a
better path.
Update best path utilization alone if it
changes.
Update:
Whether we are marking or not.
Time for next mark.
Number of marks so far.
Time at which min. queueing delay will
exceed target.
CONGA [21]
CoDel [51]
Most ex-
pressive
atom
Write
RAW
PRAW
PRAW
10, 9
6, 2
3, 3
IfElseRAW 4, 2
7, 1
Sub
Nested
7, 3
Nested
Nested
4, 2
6,3
# of stages,
max.
atom-
s/stage
4, 3
Ingress
or
Egress
Pipeline?
Either
Domino
LOC
P4
LOC
29
35
37
23
18
26
36
29
27
104
192
107
75
70
95
147
87
119
Either
Ingress
Egress
Either
Egress
Ingress
Ingress
Ingress
Pairs
4, 2
Ingress
32
89
Doesn’t
map
15, 3
Egress
57
271
Table 3: Data-plane algorithms
gorithms, but may not meet timing and occupies more area.
To illustrate this effect, we design a containment hierarchy
(Table 4) of stateful atoms, where each atom can express
all stateful operations that its predecessor can. These atoms
start out with the simplest stateful capability: the ability to
read or write state alone. They then move on to the abil-
ity to read, add, and write back state atomically (RAW), a
predicated version of the same (PRAW), and so on. When
synthesized to a 32-nm standard-cell library, all our stateful
atoms meet timing at 1 GHz. However, the atom’s area and
minimum end-to-end propagation delay increases with the
atom’s complexity (Table 4).
The compiler targets. We design seven Banzai machines as
compiler targets. A single Banzai machine has 600 atoms.
1. 300 are stateless atoms of the single stateless atom type
from Table 4.
2. 300 are stateful atoms of one of the seven stateful atom
types from Table 4 (Read/Write through Pairs).
These 300 stateless and stateful atoms are laid out physically
as 10 stateless and stateful atoms per pipeline stage and 30
pipeline stages. While the number 300 and the pipeline lay-
out are arbitrary, they are sufﬁcient for all examples in Ta-
ble 3, and incur modest area overhead as we show next.
We estimate the area overhead of these seven targets rela-
tive to a 200 mm2 chip [40], which is at the lower end of chip
sizes today. For this, we multiply the individual atom areas
from Table 4 by 300 for both the stateless and stateful atoms.
For 300 atoms, the area overhead is 0.2 % for the stateless
atom and 0.9 % for the Pairs atom, the largest among our
stateful atoms. The area overhead combining both stateless
and stateful atoms for all our targets is at most 1.1%—a mod-
est price for the programmability it provides.
5.3 Compiling Domino programs to Ban-
zai machines
We now consider every target from Table 47, and every
data-plane algorithm from Table 3 to determine if the algo-
rithm can run at line rate on a particular Banzai machine.
We say an algorithm can run at line rate on a Banzai ma-
chine if every codelet within the data-plane algorithm can be
mapped (§4.3) to either the stateful or stateless atoms pro-
vided by the Banzai machine. Because our stateful atoms
7Because every target is uniquely identiﬁed by its stateful
atom type, we use the two interchangeably.
24
Atom
Description
Stateless
Read/Write
ReadAddWrite
(RAW)
Predicated ReadAd-
dWrite (PRAW)
ReadAd-
IfElse
dWrite
(IfElseRAW)
Subtract (Sub)
Nested Ifs (Nested)
Paired
(Pairs)
updates
Arithmetic, logic, relational,
and conditional operations
on packet/constant operands
Read/Write packet ﬁeld/-
constant
into single state
variable.
Add packet ﬁeld/constant to
state variable (OR) Write
packet ﬁeld/constant
into
state variable.
Execute RAW on state vari-
able only if a predicate is
true, else leave unchanged.
Two separate RAWs: one
each for when a predicate is
true or false.
Same as IfElseRAW, but
also allow subtracting a
packet ﬁeld/constant.
Same as Sub, but with an ad-
ditional level of nesting that
provides 4-way predication.
Same as Nested, but allow
updates to a pair of state
variables, where predicates
can use both state variables.
Table 4: Atom areas and minimum critical-path delays in
a 32-nm standard-cell library. All atoms meet timing at 1
GHz. Each of the seven compiler targets contains 300 in-
stances of one of the seven stateful atoms (Read/Write to
Pairs) and 300 instances of the single stateless atom.
are arranged in a containment hierarchy, we list the most ex-
pressive stateful atom/target required for each data-plane al-
gorithm in Table 3.
As Table 3 shows, the choice of stateful atom determines
what algorithms can run on a switch. For instance, with only
the ability to read or write state, only the Bloom Filter algo-
rithm can run at line rate, because it only requires the ability
to test and set membership bits. Adding the ability to in-
crement state (the RAW atom) permits Heavy Hitters to run
at line rate, because it employs a count-min sketch that is
incremented on each packet.
5.4 Lessons for programmable switches
Atoms with a single state variable support many algo-
rithms. The algorithms from Bloom Filter through DNS
TTL Change Tracking in Table 3 can run at line rate using
the Nested Ifs atom that modiﬁes a single state variable.
But, some algorithms modify a pair of state variables
atomically. An example is CONGA, whose code is given
below:
if (p.util < best_path_util[p.src]) {
best_path_util[p.src] = p.util;
best_path[p.src] = p.path_id;
} else if (p.path_id == best_path[p.src]) {
best_path_util[p.src] = p.util;
}
25
Area
(µm2)
at
1
GHz
1384
Min.
de-
lay
(ps)
387
250
176
431
316
791
393
985
392
1522
409
3597
580
5997
606
Here, best_path (the path id of the best path for a particu-
lar destination) is updated conditioned on best_path_util
(the utilization of the best path to that destination)8 and vice
versa. These two state variables cannot be separated into
different stages and still guarantee a packet transaction’s se-
mantics. The Pairs atom, where the update to a state variable
is conditioned on a predicate of a pair of state variables, al-
lows CONGA to run at line rate.
There will always be algorithms that cannot sustain line
rate. While the targets and their atoms in Table 4 are sufﬁ-
cient for several data-plane algorithms, there are algorithms
that they can’t run at line rate. An example is CoDel, which
cannot be implemented because it requires a square root op-
eration that isn’t provided by any of our targets. One possi-
bility is a look-up table abstraction that allows us to approx-
imate such mathematical functions. However, regardless of
what set of atoms we design for a particular target, there will
always be algorithms that cannot run at line rate.
Atom design is constrained by timing, not area. Atoms
are affected by two factors: their area and their timing, i.e.,
the minimum delay on the critical path of the atom’s com-
binational circuit. For the few hundred atoms that we re-
quire, atom area is insigniﬁcant (< 2%) relative to chip area.
Further, even for future atoms that are larger, area may be
controlled by provisioning fewer atom instances.
However, atom timing is critical. Table 4 shows a 3.4x
range in minimum critical-path delay between the simplest
and the most complex atoms. This increase can be explained
by looking at the simpliﬁed circuit diagrams for the ﬁrst
three atoms (Table 5), which show an increase in circuit
depth with atom complexity.
Because the clock frequency of a circuit is at least as small
as the reciprocal of this minimum critical-path delay, a more
complex atom results in a lower clock frequency and a lower
line rate. Although all our atoms have a minimum critical-
path delay under 1 ns (1 GHz), it is easy to extend them with
functionality that violates timing at 1 GHz.
In summary, for a switch designer, the minimum delay on
the critical path of atoms is the most important metric to op-
timize. The most programmable line-rate switches will have
the highest density of useful stateful functionality squeezed
into a critical path budget of 1 clock cycle.
Compilers can be used to design instruction sets. De-
signing an instruction set for a programmable substrate is
a chicken-and-egg problem: the choice of instructions de-
termines which algorithms can execute on that target, while
the choice of algorithms dictates what instructions are re-
quired in the target. Indeed, other programmable substrates
(GPUs, CPUs, DSPs) go through an iterative process to de-
sign a good instruction set.
A compiler can aid this process. To show how, we de-
scribe how we designed the stateful atoms in Table 4. We
pick a data-plane algorithm, partially execute the Domino
8p.src is the address of the host originating this message,
and hence the destination for the host receiving it and exe-
cuting CONGA.
Atom
Circuit
Read/Write
ReadAddWrite
(RAW)
Min.
de-
lay
(ps)
176
316
393
don’t permit sharing state between atoms and use atom tem-
plates to limit computations that can happen at line rate.
Programmable data planes. Eden [25] provides a pro-
grammable data plane using commodity switches by pro-
gramming end hosts alone. Domino targets programmable
switches that provide more ﬂexibility relative to an end-
host-only solution. For instance, Domino allows us to pro-
gram in-network congestion control and AQM schemes,
which are beyond Eden’s capabilities. Tiny Packet Programs
(TPP) [42] allow end hosts to embed small programs in
packet headers, which are then executed by the switch. TPPs
use a restricted instruction set to facilitate switch execution;
we show that switch instructions must and can be substan-
tially richer (Table 4) for stateful data-plane algorithms.
Software routers [35, 46] and network processors [14] are
ﬂexible, but at least 10×–100× slower than programmable
switches [19, 3]. FPGA-based platforms like the Corsa
DP 6440 [1], which supports an aggregate capacity of
640 Gbit/s, are faster, but still 5×–10× slower than pro-
grammable switches [3, 19].