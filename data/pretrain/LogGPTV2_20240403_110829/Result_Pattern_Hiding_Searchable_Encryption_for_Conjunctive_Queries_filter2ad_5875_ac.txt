an index vector x, and the master secret key msk and outputs
the ciphertext c associated with (x, µ).
• HVE.Query(s, c): takes a ciphertext c corresponding to the
index vector x and a decryption key s corresponding to the
(x) = 1.
predicate vector v, and outputs the message µ if P HVE
We say that a symmetric-key HVE is correct [6] if for all security pa-
rameters λ, all (µ, x) ∈ M × Σm and all predicate vectors v, after se-
quentially running HVE.Setup(λ) to get msk, HVE.KeyGen(msk, v ∈
Σm∗ ) to get s, and HVE.Enc(msk, µ ∈ M, x ∈ Σm) to get c, if
P HVE
v
(x) = 1, then HVE.Query(s, c) = µ, otherwise
Pr[HVE.Query(s, c) =⊥] = 1 − negl(λ).
v
The next step is to formally define the notion of semantic se-
curity for symmetric-key HVE against PPT adversaries. The def-
initions are presented in the simulation-setting, which naturally
subsumes the traditional security definitions for HVE in the indis-
tinguishability setting. Prior to presenting the formal definition, we
present two auxiliary definitions that constitute the trivial leakage
from any symmetric-key HVE scheme. Given a predicate vector
v = (v1, . . . , vm) ∈ Σm∗ , its wildcard pattern α(v) is a vector of the
same size as the predicate vector v, which is 1 if vj (cid:44) ∗, and 0 oth-
erwise. Also, given a predicate vector v ∈ Σm∗ and an index vector
x ∈ Σ, the decryption pattern β(v, x) is a boolean value such that
(x) = 1, and 0 otherwise. With these definitions
β(v, x) = 1 if P HVE
in place, we now define the real and simulation experiments for a
symmetric-key HVE scheme.
v
The Real Experiment. The real experiment for a symmetric-key
HVE scheme involves a challenger and a stateful PPT adversary A,
who interact as follows:
• Setup phase: During this phase the adversary A chooses
an attribute vector x ∈ Σm and gives it to the challenger.
In response, the challenger runs HVE.Setup(λ) and outputs
msk and message space M. M is given to the adversary.
• Query phase 1: The adversary A adaptively chooses pred-
icate vectors vj, for j ∈ [q1]. The challenger then uses vj
and msk to run HVE.KeyGen, and responds with the corre-
sponding decryption keys sj.
• Challenge phase: The adversary A outputs a message µ ∈
M. The challenger runs HVE.Enc using msk, x and µ and
obtains the ciphertext c, which is given to A.
• Query phase 2: The adversary runs a protocol identical to
Query phase 1 and receives sj for q1 + 1 ≤ j ≤ q2.
Let rA denote the internal random bits used by A during the real
experiment. We use the term ViewA,Real to denote the ensemble
(M, c, {vj}j∈[q2], rA), which is essentially the view of the adver-
sary A in the real experiment described above.
The Simulation Experiment. The simulation experiment for a
symmetric-key HVE scheme involves a stateful PPT simulator S
and a stateful PPT adversary A, who interact as follows:
• Setup phase: During this phase the adversary A chooses
an attribute vector x ∈ Σm. In response, the simulator S
provides A with the message space M. Note that S does
not receive the actual attribute vector x.
• Query phase 1: The adversary adaptively chooses predicate
vectors vj, for j ∈ [q1]. For each such predicate, the simu-
lator S only receives as input the wildcard pattern α(vj)
and the decryption pattern β(vj , x). It responds with the
corresponding decryption keys sj.
• Challenge phase: The adversary A outputs a message µ ∈
M. The simulator S responds with the challenge ciphertext
c corresponding to x, µ.
• Query phase 2: The adversary runs a protocol identical to
Query phase 1 and receives sj for q1 + 1 ≤ j ≤ q2.
Again, let rA denote the internal random bits used by A during
the simulation experiment. We use the term ViewA,Sim to denote
the ensemble (M, c, {vj}j∈[q2], rA), which is essentially the view
of the adversary A in the simulation experiment described above.
We define the advantage of a PPT distinguisher D in distin-
guishing the real and simulation experiments described above as
AdvHVED,A(λ) = | Pr[D(ViewA,Real) = 1] − Pr[D(ViewA,Sim) = 1]|.
A symmetric-key HVE scheme is said to be selectively simulation-
secure if for all such PPT distinguishers D and PPT adversaries A,
the function AdvHVED,A(λ) is a negligible in λ.
3 LIGHTWEIGHT SYMMETRIC-KEY HIDDEN
VECTOR ENCRYPTION
In this section, we propose a novel HVE scheme in the symmetric-
key setting, referred to as SHVE, that entirely avoids the use of pair-
ings. Our construction is predicate-only (implying that the payload
message is “True” by default) and is amenable to parallel imple-
mentations for high performance. At the same time, it guarantees
selective simulation-security against probabilistic polynomial-time
adversaries for a single ciphertext query and an unbounded number
of decryption key queries.
3.1 Detailed SHVE Construction
We now present the details of our proposed SHVE construction.
Let Σ be a finite set of attributes and ∗ be a wildcard symbol (“don’t
care” value) not in Σ. Define Σ∗ = Σ ∪ {∗}. In our framework,
Σ is typically a finite field Zp, where p is a prime. We define a
family of predicates PSHVE : Σm −→ {0, 1} as follows. For each
v = (v1, . . . , vm) ∈ Σm∗ , there exists a predicate P SHVE
∈ PSHVE,
such that for x = (x1, . . . , xm) ∈ Σm, we have:
(cid:26) 1 ∀ 1 ≤ i ≤ m (vi = xi or vi = ∗),
v
P SHVE
v
(x) =
0
otherwise.
In other words, the vector x matches v in all the coordinates that
are not the wildcard character ∗. The parameter m is referred to as
the width of the SHVE.
Our construction uses a pseudorandom function (PRF) F0 : {0, 1}λ
×{0, 1}λ+log λ −→ {0, 1}λ+log λ and an IND-CPA secure symmetric
encryption scheme (Sym.Enc, Sym.Dec) with both the key-space
and the plaintext-space being {0, 1}λ+log λ, where λ is a security
parameter. The details of the construction are as follows:
• SHVE.Setup(1λ): On input the security parameter λ, the
$←− {0, 1}λ. It then de-
algorithm uniformly samples msk
fines the payload message space M = {‘True’}, and outputs
(msk,M).
• SHVE.KeyGen(msk, v ∈ Σm∗ ): On input a predicate vector
v = (v1, . . . , vm) and the master secret key msk, we denote
by S = {lj ∈ [m] | vlj
(cid:44) ∗} the set of all locations in v that do
not contain wildcard characters. Let these locations be l1 <
$←− {0, 1}λ+log λ
l2 < . . . < l|S |. The algorithm samples K
and sets the following:
d0 = ⊕j∈[|S |]
F0(msk, vlj ||lj)(cid:17) ⊕ K ,
K , 0λ+log λ(cid:17)
(cid:16)
d1 = Sym.Enc(cid:16)
.
The algorithm finally outputs the decryption key:
s = (d0, d1, S) .
• SHVE.Enc(msk, µ = ‘True’, x ∈ Σm): On input a message µ,
an index vector x = (x1, . . . , xm) and the master secret key
msk, this algorithm sets cl = F0(msk, xl ||l), for each l ∈ [m],
and outputs the ciphertext:
c = ({cl}l ∈[m]).
• SHVE.Query(s, c): The query algorithm takes as input a
ciphertext c and a decryption key s, and parses them as:
c =
s = (d0, d1, S) .
,
(cid:17)
(cid:16){cl}l ∈[m]
(cid:17) ⊕ d0.
(cid:16)⊕j∈[|S |]clj
′ =
K
where S = {l1, l2, . . . , l|S |}. The algorithm computes the
following:
Next the decryption algorithm computes:
′ = Sym.Dec(cid:0)K
µ
, d1(cid:1) .
′
If µ′ = 0λ+log λ, the decryption algorithm outputs ‘True’ else
it outputs ⊥.
The correctness of the aforementioned scheme may be verified as
follows. Let c = ({cl}l ∈[m]) be a ciphertext corresponding to an
index vector x = (x1, . . . , xm), and let s = (d0, d1, S) be a decryption
key corresponding to predicate vector v = (v1, . . . , vm). Let S =
{l1, l2, . . . , l|S |}. We consider the following scenarios:
for each j ∈ [|S|]. In
= F0(msk, vlj ||lj) for each j ∈ [|S|].
• If P SHVE
other words, we have clj
This now immediately leads to the following relation:
(x) = 1, we must have vlj
= xlj
v
(cid:16)⊕j∈[|S |]clj
(cid:17) ⊕ d0 = K ,
′ =
′ = Sym.Dec(K , d1)
K
µ
= 0λ+log λ .
v
(cid:44) xlj
(x) = 0, we must have vlj
, for some j ∈
• If P SHVE
[|S|]. This in turn implies that for some j ∈ [|S|], clj
(cid:44)
F0(msk, vlj ||lj), and hence, during decryption, K′ (cid:44) K. This
ensures that except with negligible probability, we have
µ′ (cid:44) 0λ+log λ, and the decryption algorithm returns the
failure symbol ⊥.
This establishes the correctness of the SHVE scheme. Quite evi-
dently, in our construction, the key-generation and query algo-
rithms operate only on the secret-key/ciphertext components listed
in the subset S, which correspond to the non-wildcard entries in the
predicate vector. The speed-up achieved as a result of this property
is particularly evident in applications where a majority of the pred-
icate vectors have only sparsely distributed non-wildcard entries.
As it turns out, our SSE construction, presented in the following
section, presents precisely such an application scenario.
3.2 Security of SHVE
We now state the following theorem for the security of our SHVE
construction:
Theorem 2. Our predicate-only SHVE construction is selectively
simulation-secure in the ideal cipher model as per the security defini-
tions presented in Sec. 2.4.
Proof. The proof is given in Appendix B.
□
4 HXT CONSTRUCTION
We now give the main construction of our SSE protocol and then
prove its correctness and analyse its security.
4.1 Hidden Cross Tags (HXT) Protocol
Our SSE protocol HXT uses (for security parameter λ) (i) a cyclic
group G with prime order p and generator g, for which the DDH
assumption holds (Def. 2), (ii) a symmetric-key HVE (see Sec. 2.4),
for which we use (for the rest of the paper) SHVE presented in
previous section, (iii) a symmetric key encryption scheme Sym
with key space {0, 1}λ (Def. 4), (iv) a Bloom filter BF with length m
Initialise T ← ∅ indexed by keywords W.
Select key κS for PRF F.
Select keys κI , κZ , κX for PRF Fp.
Select hash functions {Hj}1≤j ≤k for BF.
Run HVE.Setup(1λ) to get msk.
Initialise EDB← {}.
for w ∈ W do
Initialise t ← {}.
Compute κe ← F(κS , w).
for id ∈ DB(w) do
Set a counter c ← 1.
Compute xid ← Fp(κI , id).
Compute zw ← Fp(κZ , w||c); yc ← xid · z−1
w .
Compute ec ← Sym.Enc(κe , id).
Append (yc , ec) to t and set c ← c + 1.
Algorithm 1 : SE.EDBSetup
Input: 1λ , DB
Output: mk, param, EDB
1: function SE.EDBSetup(1λ , DB)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
end for
Set T[w] ← t.
end for
end for
κT ), EDB = (EDB(1), EDB(2)).
35: end function
end for
Compute c ← HVE.Enc(msk, µ = ‘True’, BF).
Let EDB(2) = c.
return param = ({Hj}k
j=1), mk = (msk, κS , κI , κZ , κX ,
end for