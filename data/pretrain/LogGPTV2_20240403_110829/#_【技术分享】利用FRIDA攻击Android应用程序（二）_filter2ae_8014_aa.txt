# 【技术分享】利用FRIDA攻击Android应用程序（二）
|
##### 译文声明
本文是翻译文章，文章来源：codemetrix.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
稿费：190RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**传送门**
[**【技术分享】利用FRIDA攻击Android应用程序（一）**
****](http://bobao.360.cn/learning/detail/3641.html)
在[本系列文章的第一篇](http://bobao.360.cn/learning/detail/3641.html)中，我们已经对Frida的原理进行了详细的介绍，现在，我们将演示如何通过Frida搞定crackme问题。有了第一篇的内容作为基础，理论上讲这应该不是什么难事。如果你想亲自动手完成本文介绍的实验的话，请下载
[OWASP Uncrackable Crackme Level 1](https://github.com/OWASP/owasp-mstg/blob/master/OMTG-Files/02_Crackmes/List_of_Crackmes.md)
([APK](https://github.com/OWASP/owasp-mstg/blob/master/OMTG-Files/02_Crackmes/01_Android/Level_01/UnCrackable-Level1.apk))
[BytecodeViewer](http://bytecodeviewer.com/)
[dex2jar](https://github.com/pxb1988/dex2jar)
当然，这里假定您已在计算机上成功地安装了Frida（版本9.1.16或更高版本），并在（已经获得root权限的）设备上启动了相应服务器的二进制代码。我们这里将在模拟器中使用Android
7.1.1 ARM映像。
然后，请在您的设备上安装Uncrackable Crackme Level 1应用程序：
    adb install sg.vantagepoint.uncrackable1.apk
安装完成后，从模拟器的菜单（右下角的橙色图标）启动它：
一旦启动应用程序，您就会注意到它不太乐意在已经获取root权限的设备上运行：
如果单击“OK”，应用程序会立即退出。嗯，不太友好啊。看起来我们无法通过这种方法来搞定crackme。真是这样吗？让我们看看到底怎么回事，同时考察一下这个应用程序的内部运行机制。
现在，使用dex2jar将apk转换为jar文件：
    michael@sixtyseven:/opt/dex2jar/dex2jar-2.0$ ./d2j-dex2jar.sh -o /home/michael/UnCrackable-Level1.jar /home/michael/UnCrackable-Level1.apk 
    dex2jar /home/michael/UnCrackable-Level1.apk -> /home/michael/UnCrackable-Level1.jar
然后，将其加载到BytecodeViewer（或其他支持Java的反汇编器）中。你也可以尝试直接加载到BytecodeViewer中，或直接提取classes.dex，但是试了一下好像此路不通，所以我才提前使用dex2jar完成相应的转换。
为了使用CFR解码器，需要在BytecodeViewer中依次选择View-> Pane1-> CFR->
Java。如果你想将反编译器的结果与Smali反汇编（通常比反编译稍微准确一些）进行比较的话，可以将Pane2设置为Smali代码。
下面是CFR解码器针对应用程序的MainActivity的输出结果：
    package sg.vantagepoint.uncrackable1;
    import android.app.Activity;
    import android.app.AlertDialog;
    import android.content.Context;
    import android.content.DialogInterface;
    import android.os.Bundle;
    import android.text.Editable;
    import android.view.View;
    import android.widget.EditText;
    import sg.vantagepoint.uncrackable1.a;
    import sg.vantagepoint.uncrackable1.b;
    import sg.vantagepoint.uncrackable1.c;
    public class MainActivity
    extends Activity {
        private void a(String string) {
            AlertDialog alertDialog = new AlertDialog.Builder((Context)this).create();
            alertDialog.setTitle((CharSequence)string);
            alertDialog.setMessage((CharSequence)"This in unacceptable. The app is now going to exit.");
            alertDialog.setButton(-3, (CharSequence)"OK", (DialogInterface.OnClickListener)new b(this));
            alertDialog.show();
        }
        protected void onCreate(Bundle bundle) {
            if (sg.vantagepoint.a.c.a() || sg.vantagepoint.a.c.b() || sg.vantagepoint.a.c.c()) {
                this.a("Root detected!"); //This is the message we are looking for
            }
            if (sg.vantagepoint.a.b.a((Context)this.getApplicationContext())) {
                this.a("App is debuggable!");
            }
            super.onCreate(bundle);
            this.setContentView(2130903040);
        }
        public void verify(View object) {
            object = ((EditText)this.findViewById(2131230720)).getText().toString();
            AlertDialog alertDialog = new AlertDialog.Builder((Context)this).create();
            if (a.a((String)object)) {
                alertDialog.setTitle((CharSequence)"Success!");
                alertDialog.setMessage((CharSequence)"This is the correct secret.");
            } else {
                alertDialog.setTitle((CharSequence)"Nope...");
                alertDialog.setMessage((CharSequence)"That's not it. Try again.");
            }
            alertDialog.setButton(-3, (CharSequence)"OK", (DialogInterface.OnClickListener)new c(this));
            alertDialog.show();
        }
    }
通过查看其他反编译的类文件，我们发现它是一个小应用程序，并且貌似可以通过逆向解密例程和字符串修改例程来解决这个crackme问题。然而，既然有神器Frida在手，自然会有更方便的手段可供我们选择。首先，让我们看看这个应用程序是在哪里检查设备是否已获取root权限的。在“Root
detected”消息上面，我们可以看到：
    if (sg.vantagepoint.a.c.a() || sg.vantagepoint.a.c.b() || sg.vantagepoint.a.c.c())
如果你查看sg.vantagepoint.a.c类的话，你就会发现与root权限有关的各种检查：
    public static boolean a()
        {
            String[] a = System.getenv("PATH").split(":");
            int i = a.length;
            int i0 = 0;
            while(true)
            {
                boolean b = false;
                if (i0 >= i)
                {
                    b = false;
                }
                else
                {
                    if (!new java.io.File(a[i0], "su").exists())
                    {
                        i0 = i0 + 1;
                        continue;
                    }
                    b = true;
                }
                return b;
            }
        }
        public static boolean b()
        {
            String s = android.os.Build.TAGS;
            if (s != null && s.contains((CharSequence)(Object)"test-keys"))
            {
                return true;
            }
            return false;
        }
        public static boolean c()
        {
            String[] a = new String[7];
            a[0] = "/system/app/Superuser.apk";
            a[1] = "/system/xbin/daemonsu";
            a[2] = "/system/etc/init.d/99SuperSUDaemon";
            a[3] = "/system/bin/.ext/.su";
            a[4] = "/system/etc/.has_su_daemon";
            a[5] = "/system/etc/.installed_su_daemon";
            a[6] = "/dev/com.koushikdutta.superuser.daemon/";
            int i = a.length;
            int i0 = 0;
            while(i0 < i)
            {
                if (new java.io.File(a[i0]).exists())
                {
                    return true;
                }
                i0 = i0 + 1;
            }
            return false;
        }