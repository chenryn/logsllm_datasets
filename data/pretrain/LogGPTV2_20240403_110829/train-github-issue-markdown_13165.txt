by **peter.polakovic** :
    When working with large images I found, that windows port doesn't free large chunks of
    memory.
    The following code
    package main
    import "fmt"
    import "runtime"
    func main() {
      for i:=0; i<10; i++ {
        a := make([]byte, 5000000)
        if a == nil { }
        a = nil    
        runtime.GC()
        fmt.Println(i, runtime.MemStats.Alloc, runtime.MemStats.Sys, runtime.MemStats.HeapObjects)
      }
      fmt.Println()
      for i:=0; i<10; i++ {
        a := make([]byte, 20000000)
        if a == nil { }
        a = nil    
        runtime.GC()
        fmt.Println(i, runtime.MemStats.Alloc, runtime.MemStats.Sys, runtime.MemStats.HeapObjects)
      }  
    }
    produces the following output
    0 5176576 8887420 422
    1 5213848 14564476 433
    2 5213848 14564476 433
    3 5213848 14564476 433
    4 5213848 14564476 433
    5 5213848 14564476 433
    6 5213848 14564476 433
    7 5213848 14564476 433
    8 5213848 14564476 433
    9 5213848 14564476 433
    0 20250336 37125244 436
    1 40288024 59686012 442
    2 60325656 82246780 444
    3 80363288 104807548 446
    4 100400920 127368316 448
    5 100437784 149929084 449
    6 120438552 149929084 450
    7 120475416 172489852 451
    8 140476184 172489852 452
    9 140513048 195050620 453
    On OS X port first part of output seems similar to second one (allocated memory and
    number of heap objects is the same in each iteration).
    The same result when using runtime.Malloc() and runtime.Free().
    I'm using binary distribution of release.r57.1 on Windows7 (32 bit).