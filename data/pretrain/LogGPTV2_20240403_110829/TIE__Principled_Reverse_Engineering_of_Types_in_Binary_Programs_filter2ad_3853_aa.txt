title:TIE: Principled Reverse Engineering of Types in Binary Programs
author:JongHyup Lee and
Thanassis Avgerinos and
David Brumley
TIE: Principled Reverse Engineering of Types in Binary Programs
JongHyup Lee, Thanassis Avgerinos, and David Brumley
Carnegie Mellon University
{jonglee, thanassis, dbrumley}@cmu.edu
Abstract
A recurring problem in security is reverse engineering
binary code to recover high-level language data abstrac-
tions and types. High-level programming languages have
data abstractions such as buffers, structures, and local vari-
ables that all help programmers and program analyses rea-
son about programs in a scalable manner. During compi-
lation, these abstractions are removed as code is translated
down to operations on registers and one globally addressed
memory region. Reverse engineering consists of “undoing”
the compilation to recover high-level information so that
programmers, security professionals, and analyses can all
more easily reason about the binary code.
In this paper we develop novel techniques for reverse
engineering data type abstractions from binary programs.
At the heart of our approach is a novel type reconstruction
system based upon binary code analysis. Our techniques
and system can be applied as part of both static or dynamic
analysis, thus are extensible to a large number of security
settings. Our results on 87 programs show that TIE is both
more accurate and more precise at recovering high-level
types than existing mechanisms.
1 Introduction
Reverse engineering binary programs to recover high-
level program data abstractions is a recurring step in many
security applications and settings. For example, fuzzing,
COTS software understanding, and binary program analy-
sis all beneﬁt from the ability to recover abstractions such
as buffers, structures, unions, pointers, and local variables,
as well as their types. Reverse engineering is necessary be-
cause these abstractions are removed, and potentially com-
pletely obliterated, as code is translated down to operations
on registers and one globally addressed memory region.
Reverse engineering data abstractions involves two
tasks. The ﬁrst task is variable recovery, which identiﬁes
high-level variables from the low-level code. For example,
consider reverse engineering the binary code shown in Fig-
ure 1(b) (where source operands come ﬁrst), compiled from
the C code in Figure 1(a). In the ﬁrst step, variable recov-
ery should infer that (at least) two parameters are passed
and that the function has one local variable. We recover the
information in the typical way by looking at typical access
patterns, e.g., there are two parameters because parameters
are accessed via ebp offsets and there are two unique such
offsets (0xc and 0x8).
The type recovery task, which gives a high-level type to
each variable, is more challenging. Type recovery is chal-
lenging because high-level types are typically thrown away
by the compiler early on in the compilation process. Within
the compiled code itself we have byte-addressable memory
and registers. For example, if a variable is put into eax, it
is easy to conclude that it is of a type compatible with 32-bit
register, but difﬁcult to infer high-level types such as signed
integers, pointers, unions, and structures.
Current solutions to type recovery take either a dynamic
approach, which results in poor program coverage, or use
unprincipled heuristics, which often given incorrect results.
Current static-based tools typically employ some knowl-
edge about well-known function prototypes to infer param-
eters, and then use proprietary heuristics that seem to guess
the type of remaining variables such as locals. For exam-
ple, staple security tools such as the IDA-Pro disassem-
bler [2] use proprietary heuristics that are often widely inac-
curate, e.g., Figure 1(e) shows that Hex-rays infers both the
unsigned int and unsigned int * as int. For
example, the Hex-rays default action seems to be to report
an identiﬁed variable as a signed integer.
The research community has developed more principled
algorithms such as the REWARDS system [12], but has lim-
ited their focus to a single path executed using dynamic
analysis. The focus on dynamic analysis is due to the per-
ceived difﬁculty of general type inference over programs
with control ﬂow [12]. In this line of work types are inferred
by propagating information from executed “type sinks”,
which are calls to functions with known type signatures. For
example, if a program calls strlen with argument a, we
unsigned int foo(char *buf,
unsigned int *out)
{
unsigned int c;
c = 0;
if (buf) {
*out = strlen(buf);
}
if (*out) {
c = *out - 1;
}
return c;
}
%ebp
%esp,%ebp
$0x28,%esp
$0x0,-0xc(%ebp)
$0x0,0x8(%ebp)
8048442 
0x8(%ebp),%eax
%eax,(%esp)
804831c 
0xc(%ebp),%edx
%eax,(%edx)
0xc(%ebp),%eax
(%eax),%eax
%eax,%eax
8048456 
0xc(%ebp),%eax
(%eax),%eax
$0x1,%eax
%eax,-0xc(%ebp)
-0xc(%ebp),%eax
push
mov
sub
movl
cmpl
je
mov
mov
call
mov
mov
mov
mov
test
je
mov
mov
sub
mov
mov
leave
ret
%ebp
%esp,%ebp
$0x18,%esp
$0x0,-0x4(%ebp)
$0x0,0x8(%ebp)
0x0000000008048402
0x8(%ebp),%eax
%eax,(%esp)
0x00000000080482d8
%eax,%edx
0xc(%ebp),%eax
%edx,(%eax)
0xc(%ebp),%eax
(%eax),%eax
%eax,%eax
0x0000000008048416
0xc(%ebp),%eax
(%eax),%eax
$0x1,%eax
%eax,-0x4(%ebp)
-0x4(%ebp),%eax
push
mov
sub
movl
cmpl
je
mov
mov
call
mov
mov
mov
mov
mov
test
je
mov
mov
sub
mov
mov
leave
ret
%ebp
%esp,%ebp
$0x18,%esp
$0x0,-0x4(%ebp)
$0x0,0x8(%ebp)
0x0000000008048402
0xc(%ebp),%eax
(%eax),%eax
%eax,%eax
0x0000000008048416
-0x4(%ebp),%eax
push
mov
sub
movl
cmpl
je
mov
mov
test
je
mov
leave
ret
(a) Source code
(b) Disassembled code
(c) Trace1 (buf = “test”, *out
= 1)
(d) Trace2 (buf = Null, *out =
0)
Variable
Hex-Rays REWARDS(Trace1) REWARDS(Trace2)
buf (char*)
out (unsigned int*)
c (unsigned int)
char *
int
int
char *
unsigned int *
unsigned int
(e) Inferred types
32-bit data
pointer
32-bit data
TIE
char *
unsigned int *
unsigned int
Figure 1. Example of binary programs and inferred types.
can infer that a has type const char * from strlen’s
type signature. If the program then executes a = b, we can
infer b has the same type.
Unfortunately, dynamic analysis systems such as RE-
WARDS are fundamentally limited because they cannot
handle control ﬂow. As a result, these approaches cannot
be generalized to static analysis, e.g., as commonly encoun-
tered in practice. Further, these approaches cannot be gener-
alized over multiple dynamic runs since that would require
control ﬂow analysis, which by deﬁnition is a static analy-
sis. For example, Figure 1(c,d,e) shows the output of RE-
WARDS on two inputs, which results in two different and
incompatible sets of results which dynamic systems alone
cannot resolve.
In this paper, we propose a principled inference-based
approach to data abstraction reverse engineering. The goal
of our approach is to reverse engineering as much as we can
infer from the binary code, but never more by simply guess-
ing. Our techniques handle control ﬂow, thus can be applied
in both static and dynamic analysis settings. We implement
our techniques in a system called TIE (Type Inference on
Executables).
The core of TIE is a novel type reconstruction approach
based upon binary code analysis for typing recovered vari-
ables. At a high level, type reconstruction (sometimes
called type inference) uses hints provided by how code is
used to infer what type it must be. For example, if the
signed ﬂag is checked after an arithmetic operation, we can
infer both operands are signed integers. Type reconstruction
builds a set of formulas based upon these hints. The formu-
las are solved to infer a speciﬁc type for variables that is
consistent with the way the code is actually used. Our im-
plementation can perform both intra- and inter-procedural
analysis. Figure 1 shows TIE’s approach correctly infering
the types of the running example.
We evaluate TIE against two state-of-the-art compet-
ing approaches: the Hex-rays decompiler [2] and the RE-
WARDS [12] system. We propose two metrics for reverse
engineering algorithms: how conservative they are at giving
a type the correct term, and how precise they are in that we
want terms to be typed with as speciﬁc a type as possible.
We show TIE is signiﬁcantly more conservative and precise
than previous approaches on a test suite of 87 programs.
Contributions. Speciﬁcally, our contributions are:
• A novel type inference system for reverse engineering
high-level types given only the low-level code. The
process of type inference is well-deﬁned and rooted
in type reconstruction theory.
In addition, our type-
inference approach is based upon how the binary code
is actually used, which leads to a more conservative
type (the inferred type is less often completely incor-
rect) and more precise (the inferred type is speciﬁc to
the original source code type).
• An end-to-end system approach that takes in binary
code and outputs C types. All our techniques handle
control ﬂow, thus can be applied in both the static and
dynamic setting unlike previously demonstrated work.
• We evaluate our approach on 87 programs from
coreutils. We evaluate our approach against RE-
WARDS [12] and the Hex-rays decompiler. We show
that TIE is more conservative and up to 45% more
precise than existing approaches. We note that pre-
vious work has considered a type-inference approach
impractical [12]; our results challenge that notion.
2 Background
In this section we review background material in sub-
typing, typing judgements, and lattice theory used by TIE.
A more extensive explanation of subtyping can be found in
programming language textbooks such as Pierce [17].
Inference Rules. We specify typing rules as inference rules
of the form:
P1 P2
... Pn
C
The top of the inference rule bar is the premises P1, P2,
etc. If all premises on top of the bar are satisﬁed, then we
can conclude the statements below the bar C. If there are