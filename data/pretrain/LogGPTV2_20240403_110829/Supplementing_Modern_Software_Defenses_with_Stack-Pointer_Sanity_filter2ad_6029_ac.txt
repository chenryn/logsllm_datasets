where SPI property is not violated, it reduces the total number of
gadgets available to COOP and is likely to impact practicability of
the attack.
6 EVALUATION
Prototype and Test set. We developed a prototype codenamed
SPIglass based on LLVM compiler infrastructure. Though SPIglass
works specifically for 32 and 64 bit Intel x86 architectures, it can be
ported to other stack-based architectures with minimal changes.
We evaluated SPIglass for runtime and memory overhead for
different values of alignment on C and C++ benchmarks from SPEC
CPU2006. Although SPI as a property is independent of the program-
ming language, our implementation targets the LLVM compilerâ€™s
clang front-end, and therefore floating point benchmarks written
in FORTRAN are excluded. We also report findings from our exper-
iments on stack utilization, specifically stack frame distribution for
Firefox 49.0a1, OpenSSL 1.1.0, Binutils 2.26, and Coreutils 8.25 to
provide insights on optimal alignment size. All of our experiments
were conducted on systems with quad-core Intel Core i7-4790 @
3.60GHz, with 16GB RAM, and running Ubuntu 14.04LTS.
6.1 Runtime Overhead
Overhead imposed by SPIglass for different values of alignment for
SPEC CPU2006 Integer and Floating point benchmarks is presented
in Table 1, and the mean overhead for the benchmarks is depicted
in Figure 6. On the one hand, larger alignment increases security
because larger objects can be accommodated without a need to
partition. But on the other hand, larger alignment could result in
a higher performance overhead. An alignment of 2048 results in
overhead double that of 512 despite no significant change in code.
This is due to the cache misses in the hardware that occur from
the large offsets in stack access. In the case of benchmark program
xalancbmk (an XML processor), the maximum alignment value is
n=128 bytes. Higher values of alignment require an increase in the
default stack space allocated to the process. This is because the
execute() function in xalancbmk recurses through all nodes in
the DOM tree, and runs out of stack memory for higher values of
alignment. This limitation was overcome by altering an OS-level
configuration to increase the default stack space for the process.
Further, we found dealII, sphinx3, perlbench, and omnetpp
imposed high overhead at 128-byte alignment. The root cause for
this counterintuitive behavior was that a significant fraction of
frames in these programs were (1) greater than 128 bytes in size
(458648, 17126 and 136367 frames for namd, dealII, and sphinx3
respectively were 2048 bytes or larger), and (2) belonged to func-
tions that executed frequently. This resulted in high overhead due
to partitioning. Our results show that 256-byte alignment provides
the best performance. On average, SPIglass introduces a low perfor-
mance overhead of 5.1% across all benchmarks. Excluding programs
that require modifying stack space limit like xalancbmk, overhead
imposed by SPIglass is only 4.0%.
6.2 Memory Overhead
Memory overhead is presented in Table 3. We implemented a Pin-
tool [21] that monitors the stack utilization by each process in the
benchmark programs and reports the maximum stack size used. The
122Table 1: Percentage runtime overhead for the SPEC CPU2006
programs when compared to vanilla LLVM 3.7.0 for differ-
ent alignment values. For xalancbmk, * indicates that the
default stack size limit was increased to 512MB to allow for
recursion.
libquantum
h264ref
omnetpp
bzip2
mcf
gobmk
hmmer
sjeng
Program 2048
4.6
perlbench
1.2
5.2
1.9
0.2
2.2
1.2
1.3
13.4
5.6
28.0*
2.8
0.6
25.0
7.4
10.4
2.1
2.3
milc
namd
dealII
soplex
povray
lbm
sphinx3
astar
xalancbmk
1024
4.5
1.0
6.2
2.3
0.1
2.1
1.6
1.6
10.6
4.6
25.8*
4.0
0.5
27.3
6.4
8.1
1.6
1.7
512
0.6
0.0
1.6
0.1
0.1
2.8
0.0
0.0
6.7
1.1
22.0*
0.0
0.0
24.9
6.0
7.4
0.2
1.0
256
3.7
0.0
0.0
0.0
0.0
0.1
0.0
0.0
4.1
1.5
21.5*
3.0
0.0
26.6
0.0
7.1
0.0
0.0
128
8.1
0.1
2.5
0.0
0.0
2.5
1.1
0.0
6.7
3.7
24.0
0.8
2.6
28.4
0.2
6.9
0.3
5.5
CINT
FP
Figure 6: Mean performance overhead for SPEC CPU2006
benchmark for alignments of 128, 256, 512, 1024 and 2048
bytes.
Table 2: SP-update instructions in Metasploit exploits for
vulnerabilities reported between 2013 and 2016.
Instruction
xchg eax, esp
pop esp
mov esp, src
sub esp, offset
CVE
2014-0983, 2014-0307, 2013-3897, 2013-2551,
2013-3918, 2013-3893, 2013-3184, 2013-3163,
2013-3482, 2015-2433
2013-3205, 2013-3906
2013-2492, 2013-0753, 2013-5331, 2012-0439,
2012-594, 2012-0198, 2012-0284, 2013-3205,
2012-0779, 2013-3918, 2014-0322, 2013-1609,
2014-2364, 2014-0783, 2013-3482, 2013-3906,
2013-5447, 2014-0983, 2014-4076
2013-1347, 2013-3184, 2013-3163, 2014-2299,
2013-2343, 2013-1892, 2013-5019, 2014-3913,
2013-4800, 2014-0307, 2013-0753, 2013-3897,
2013-5331, 2013-1347, 2013-3205, 2013-2370,
2013-2551, 2013-3918, 2014-0322, 2013-0025,
2013-1017, 2013-3893, 2013-1690, 2013-3163,
2014-2364, 2014-0783, 2014-0782, 2014-3888,
2014-0784, 2013-4988, 2013-3482, 2013-3906
Table 3: SPIglass SPEC CPU2006 memory overhead for dif-
ferent alignments.
Benchmark
perlbench
bzip2
mcf
gobmk
hmmer
sjeng
libquantum
h264ref
omnetpp
astar
xalancbmk
milc
namd
dealII
soplex
povray
lbm
sphinx3
Mean
Total Peak Stack Size Overhead (%)
128
2048
46.0
2.5
6.1
209.3
60.7
2120.4
3.9
454.7
8.2
208.0
11.8
0.8
0.0
669.9
0.5
8.1
0.2
9.1
3.3
209.1
1968.0
73.0
12.1
414.1
1.5
23.9
30.6
345.9
21.8
550.2
322.9
26.5
10.2
221.9
0.1
6.6
590.4
17.6
1024
24.0
98.9
1020.9
181.2
143.9
5.1
296.4
4.4
4.3
105.3
934.2
163.3
18.2
155.2
257.4
125.3
116.3
2.3
279.7
512
24.0
40.0
470.9
58.7
42.9
1.8
103.1
1.9
4.3
42.4
417.0
44.7
16.9
70.0
126.0
56.1
43.9
0.6
122.3
256
5.2
14.8