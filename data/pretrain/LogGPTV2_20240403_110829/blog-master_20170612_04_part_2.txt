```  
create index idx_tbl_label_combin on tbl_label using gin (to_array(c1,c6));   
当列的类型不一致时，可以转换为一致的，然后建立表达式索引，类型转换可能需要使用immutable函数，如果没有则需要自建immutable转换函数，也很简单  
postgres=# create index idx_tbl_label_combin1 on tbl_label using gin (to_array('c1:'||c1,'c6:'||c6));   
```  
3、如何命中数组表达式索引  
查询条件与索引中的表达式一致，即可命中。  
例子  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from tbl_label where to_array(c1,c6) && array[1,2];  
                                                              QUERY PLAN                                                                
--------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.tbl_label  (cost=840.56..86397.30 rows=99750 width=80) (actual time=0.777..4.030 rows=2254 loops=1)  
   Output: uid, c1, c2, c3, c4, c5, c6  
   Recheck Cond: (ARRAY[tbl_label.c1, tbl_label.c6] && '{1,2}'::integer[])  
   Heap Blocks: exact=2242  
   Buffers: shared hit=2251  
   ->  Bitmap Index Scan on idx_tbl_label_combin  (cost=0.00..815.62 rows=99750 width=0) (actual time=0.465..0.465 rows=2254 loops=1)  
         Index Cond: (ARRAY[tbl_label.c1, tbl_label.c6] && '{1,2}'::integer[])  
         Buffers: shared hit=9  
 Planning time: 0.361 ms  
 Execution time: 4.176 ms  
(10 rows)  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from tbl_label where to_array('c1:'||c1,'c6:'||c6) && array['c1:1'];  
                                                              QUERY PLAN                                                                 
---------------------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.tbl_label  (cost=422.00..54015.43 rows=50000 width=80) (actual time=0.331..1.888 rows=1021 loops=1)  
   Output: uid, c1, c2, c3, c4, c5, c6  
   Recheck Cond: (ARRAY[('c1:'::text || (tbl_label.c1)::text), ('c6:'::text || (tbl_label.c6)::text)] && '{c1:1}'::text[])  
   Heap Blocks: exact=1019  
   Buffers: shared hit=1024  
   ->  Bitmap Index Scan on idx_tbl_label_combin1  (cost=0.00..409.50 rows=50000 width=0) (actual time=0.195..0.195 rows=1021 loops=1)  
         Index Cond: (ARRAY[('c1:'::text || (tbl_label.c1)::text), ('c6:'::text || (tbl_label.c6)::text)] && '{c1:1}'::text[])  
         Buffers: shared hit=5  
 Planning time: 0.173 ms  
 Execution time: 1.972 ms  
(10 rows)  
```  
## 小结  
1、什么时候选择btree  
btree索引适合选择性好的列（n_distinct很大，或者=-1），唯一值比例越高越适合btree。  
2、什么时候选择gin  
与btree相反，选择性越差，采用GIN索引效率越高。  
另外GIN的倒排特性，还特别适合多值类型的元素组合查询，例如数组、全文检索类型、TOKEN类型、等等。  
同时GIN索引接口是开放的，用户可以根据数据特征，自定义GIN索引。支持更多的数据类型，例如图像特征值相似查询，文本的相似度查询等。  
3、什么时候选择gist  
GIST是PG的一种通用索引接口，适合各种数据类型，特别适合异构的类型，例如几何类型，空间类型，范围类型等。  
GIST索引的原理可参考  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
4、什么时候选择hash  
如何用好只有等值查询，并且被索引的列长度很长，可能超过数据库block的1/3时，建议使用hash索引。 PG 10 hash索引会产生WAL，确保了可靠性，同时支持流复制。  
PG 10 以前的版本，不建议使用hash index，crash后需要rebuild，不支持流复制。  
5、什么时候选择brin  
当数据与堆存储线性相关性很好时，可以采用BRIN索引。  
BRIN是块级索引，存储每个（或者每一段连续的）数据块的原子信息（最大值，最小值，平均值，空值比例，COUNT等）。  
特别适合范围扫描。  
### 不同的索引方法支持什么类型的查询？  
1、btree  
适合排序、>=, , < 等查询。  
2、HASH  
适合=查询。  
3、GIN  
不同的数据类型，适应不同的查询需求。  
例如数组类型，适合 相交，包含等。  
4、GIST  
不同的数据类型，适应不同的查询需求。  
例如空间类型，适合，距离排序，KNN，包含，相交，左，右等。  
5、BRIN  
适合范围查询，=查询。  
### 如何优化索引效率  
前面的方法告诉你应该如何选择索引，但是没有提索引本身的优化，实际上数据分布会影响索引的效率。  
例如  
[《索引顺序扫描引发的堆扫描IO放大背后的统计学原理与解决办法 - PostgreSQL index scan enlarge heap page scans when index and column correlation small.》](../201404/20140426_01.md)    
因此，根据索引的扫描特点，对数据进行重分布，可以大幅度优化索引查询的效率。  
例如bitmap index scan（按BLOCK ID顺序读取）就是PostgreSQL用于减少离散IO的手段。  
1、btree数据分布优化  
线性相关越好，扫描或返回多条数据的效率越高。  
2、hash数据分布优化  
线性相关越好，扫描或返回多条数据的效率越高。  
3、gin数据分布优化  
如果是普通类型，则线性相关越好，扫描或返回多条数据的效率越高。  
如果是多值类型（如数组、全文检索、TOKENs），则元素越集中（元素聚类分析，横坐标为行号，纵坐标为元素值，数据分布越集中），效率越高。  
元素集中通常不好实现，但是我们可以有集中方法来聚集数据，1. 根据元素的出现频率进行排序重组，当用户搜索高频词时，扫描的块更少，减少IO放大。2. 根据（被搜索元素的次数*命中条数）的值进行排序，按排在最前的元素进行聚集，逐级聚集。     
(以上方法可能比较烧脑，下次发一篇文档专门讲GIN的数据重组优化)   
[《索引扫描优化之 - GIN数据重组优化(按元素聚合) 想象在玩多阶魔方》](../201706/20170612_05.md)    
4、gist数据分布优化  
如果是普通类型，则线性相关越好，扫描或返回多条数据的效率越高。  
如果是空间类型，则元素越集中（例如数据按geohash连续分布），效率越高。  
5、brin数据分布优化  
线性相关越好，扫描或返回多条数据的效率越高。  
6、多列复合索引数据分布优化  
对于多列符合索引，则看索引的类型，要求与前面一样。  
增加一个，多个列的线性相关性越好，性能越好。  
多列线性相关性计算方法如下  
[《PostgreSQL 计算 任意类型 字段之间的线性相关性》](../201604/20160403_01.md)    
数据分布还有一个好处，对于列存储，可以大幅提升压缩比  
[《一个简单算法可以帮助物联网,金融 用户 节约98%的数据存储成本 (PostgreSQL,Greenplum帮你做到)》](../201604/20160404_01.md)    
## 参考  
[《阿里云RDS for PostgreSQL varbitx插件与实时画像应用场景介绍》](../201705/20170502_01.md)    
[《多字段，任意组合条件查询(0建模) - 毫秒级实时圈人 最佳实践》](../201706/20170607_02.md)    
[《PostgreSQL GIN 单列聚集索引 应用》](../201702/20170221_01.md)    
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树 (GIN)》](../201702/20170205_01.md)    
[《PostgreSQL GIN索引实现原理》](../201702/20170204_01.md)    
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
[《PostgreSQL 9.3 pg_trgm imporve support multi-bytes char and gist,gin index for reg-exp search》](../201305/20130516_01.md)    
[《万亿级营销(圈人)迈入毫秒时代 - 万亿user_tags级实时推荐系统数据库设计》](../201612/20161225_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")