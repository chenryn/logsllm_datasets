i:Integer;
Begin
For i = 0 to n − 1 Do
If |t(Tk, x)| > 1
Return Tk;
End If
End For
Return Tn;
End
Figure 3: Algorithm 1
following deﬁnition formalizes the notion of a set of database
states that is actually returned.
Deﬁnition 2. Given a database with a domain D, a sub-
domain D, and a candidate disclosure schema T = (T1, T2,
. . . , Tn) over D, an instance set function t of a true database
state x is a mapping t : T × D → 2D deﬁned by:
t(Ti, x) = D ∩ si
j
such that si
set.
j ∈ Ti and x ∈ si
j . We call t(Ti, x) an instance
Given the true database state x = 22040 in Example 1 and
the candidate schema sequence T = (T1, T2, . . . , T6) such
that Ti discloses the ﬁrst 6 − i digits of the true database
state x, the schema T1 and T2, T3 and T4, and T5 and T6
generate the instance sets shown in Figure 2(a), 2(b), and
2(c), respectively.
Intuitively, given a problem setting (D, D, T ) and a true
database state x in D, an algorithm of data disclosure will
output one disclosure schema in T . Such an algorithm de-
ﬁnes a deterministic disclosure function (DDF).
Deﬁnition 3. A deterministic disclosure function (DDF)
A over T is a mapping A : D → T .
Consider a variant of the“traditional” disclosure algorithm
given in Figure 3. If it is used for Example 1, Algorithm 1
will deﬁne a DDF A1 shown in Table 2. As a result, if the
d ∈ D A1(d)
22030
22031
22040
23000
24000
T2
T2
T3
T5
T5
Table 2: The DDF A1
true database state is x = 22040, Algorithm 1 will return
T3.
Intuitively, the schema T3 carries the information that the
ﬁrst three digits of x is 220. Note that the instance set
function t gives an instance set associated with a database
state x.
In Example 1, the instance set associated with
x = 22040 is t(T3, 22040) = {22030, 22031, 22040}.
If an adversary did not know the algorithm and the dis-
closure schema sequence, the information in the instance
set would be all the adversary could infer from the disclosed
data. The knowledge of the algorithm, however, provides an
adversary additional information that can be used to further
restrict the set of choices in the instance set. More specif-
ically, because a DDF A over T returns Ti as output, i.e.,
A(x) = Ti, the adversary will know that the true database
state x must be in A−1(Ti). This consideration gives rise to
the notion of the disclosure set.
Deﬁnition 4. The disclosure set DS of a database state
x by a DDF A is a function DS : A × D → 2D, where A
denotes the set of all DDFs over T , deﬁned by:
DS(A, x) = t(A(x), x) ∩ A−1(A(x))
Intuitively, the disclosure set DS(A, x) is all the adversary
can infer about the true database state. That is, adversary
knows that (1) x ∈ DS(A, x) and (2) DS(A, x) is the min-
imal set that satisﬁes (1) (i.e., the adversary cannot infer
that x is in any proper subset of DS(A, x)).
In Example 1, from the disclosed information that the
ﬁrst three digits of x is 220, the adversary knows that x ∈
{22030, 22031, 22040}. Moreover, because T3 is returned,
she also knows that x ∈ A−1
1 (T3) = {22040}. Thus, the
adversary can determine the true database state x = 22040
from the disclosure set DS(A1, x):
DS(A1, 22040) = t(T3, 22040) ∩ A−1
1 (T3) = {22040}
We assume that there is a safety predicate p : 2D →
{true, f alse}. Intuitively, to satisfy a safety property in the
information disclosure problem means to satisfy the predi-
cate p on the disclosure set of a database state x.
In Example 1, the safety predicate p(D′) = true if |D′| >
1. If a set satisﬁes this safety predicate p, so does any su-
perset. In such cases, we say that the safety predicate p is
set-monotonic:
Deﬁnition 5. A safety predicate p is said to be set-monotonic
if
∀D′ ⊆ D′′, p(D′) =⇒ p(D′′)
Not all safety properties are set-monotonic. For exam-
ple, as we discuss later in Section 4, the entropy l-diversity
property is not.
Deﬁnition 6. Given a problem setting (D, D, T ) and a
safety predicate p, a DDF A is said to be p-safe if
∀x ∈ D, p(DS(A, x)) = true
A deterministic algorithm is said to be p-safe if the DDF it
deﬁnes is p-safe.
Note that Algorithm 1, which is a representative of tradi-
tional disclosure algorithms, is not p-safe for p(D′) : |D′| >
1. This is exactly the problem we intuitively described in
the patient information example in Section 1.
Since we are interested in maximizing data utility, we
would like to choose a disclosure schema which appears as
early as possible in the candidate schema sequence.
Deﬁnition 7. Given two DDFs A and A′, we say that A′
is locally better than A, denoted as A′ ≺ A, if:
∀x ∈ D, (A′(x)  1) is set-monotonic and easy-split.
Note that, A′
1 binds the output disclosure schema of 22030
and 22031 with 22040 and therefore protects 22040 from
being disclosed. This is not the case for the DDF A1 in
Table 2 (Section 2) computed by a “traditional” disclosure
algorithm.
t[D] ← Tn;
If p(D′ ∩ si
End If
End For
End If
End For
T ′; //element of T
End For
If D′ 6= φ do
For i = 1 to n do //iterate schemas
For j = 1 to ni do //iterate elements in a schema
j) do
C ← D′ ∩ si
j;
T ′ ← Ti;
t[C] ← Ti;
D′ ← D′ \ C;
01.Input: T ,D,p,n;
02.Output: t; //output DDF, represented by an array on D
03.Var: D′,D∗,C; //subset of D
04.
05.Begin
06.
07. D′ ← D;
T ′ ← Tn;
08.
09. C ← D;
10.
11.
12.
13.
14.
15.
16.
17.
18.
19.
20.
21.
22.
23.
24.
25.
26.
27.
28.
29.
30.
31.
32.
33.
34.
35.
36.
37.
38.
39. Return t[D];
40.End.
If ∃ at-large-split D∗ of (D′ ∪ C, C)
If D′ ∪ C \ D∗ ⊆ si
j do
t[D′ ∪ C \ D∗] ← Ti;
If D′ ∪ C ⊆ si
j do
t[D′ ∪ C] ← Ti;
For i = 1 to n do
For j = 1 to ni do
For i = 1 to n do
For j = 1 to ni do
End For
Else
End If
End For
End For
End If
End If
Figure 6: Algorithm 3
Also, because p is set-monotonic, we have
∀d ∈ D, p(DS(t, d)) = true
Thus, t[D] is p-safe. For p-optimality, observe from Algorithm 3
the following property for any t′[D] such that t′[D] ≺ t[D]:
if t′[D] is p-safe, then the Algorithm 3 returns t′[D] instead
of t[D]. Therefore, t[D] is p-optimal.
Finally, it is easy to see from Algorithm 3 that its com-
plexity is O(mn), which completes the proof.
To illustrate Algorithm 3, we use the previous Example 1
again. Note that this example satisﬁes the conditions of
Algorithm 3. The output DDF A′′
1 is shown in Table 4.
Note that a p-optimal DDF is not unique. Both A′
1 gener-
1 generated by Algorithm 3 are
ated by Algorithm 2 and A′′
p-optimal DDFs.
The situation illustrated in Figure 5 would not arise if the
following property is satisﬁed, which can be used to further
simplify Algorithm 3.
Figure 5: A none Tn-safe example
3.2 Forward Traversal Algorithms
Note that, in many cases the assumption that T is set-
monotonic is not satisﬁed. Unfortunately, Algorithm 2, which
is based on backward traversal of T , would not necessarily