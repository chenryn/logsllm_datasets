i
, v(0)
j
] ← 1, I′(1)[u(1)
i
, v(1)
j
] ← 1
# Reserve row and column indices for new keywords and files being added in the future
10: Call DOD-DSSE .Assign(null, Tx) multiple times until all values in all N slots in Tx are ﬁlled, for each x ∈{ w, f}
# Encrypt every row of data structuresI ′(0) and I′(1)
11: for each server Sb ∈{ S0, S1} do
12:
13: return (K, Tw, Tf , I(0), I(1))
I(b)[i,∗] ← DOD-DSSE .Enc(I′(b)[i,∗], i, b, K) for each row i ∈{ 1, . . . ,2 N}
# The client sendsI (0) to S0, I(1) to S1 and keeps (K, Tw, Tf ) secret
# Generate search and update queries
Algorithm 3 id ← DOD-DSSE .Access(op, x,S, K, T w, Tf )
1: ({u(b)
2: for each j ∈{ w, f} do
j }j∈{w,f},b∈{0,1},β ) ← DOD-DSSE .CreateQueries(H(x))
,#u(b)
j
# Retrieve from each server 2 columns or 2 rows depending on indexj
for each server Sb ∈{ S0, S1} do
j ) from Sb
j ) from Sb
uj ← Read(u(b)
I(b)
I(b)
"uj ← Read(#u(b)
# Decrypt retrieved row and column
I′(b)
uj ← DOD-DSSE .Dec(I(β)
uj , u(β)
,β , K)
I′(¬b)
"uj ← DOD-DSSE .Dec(I(¬β)
"uj
j
Extract column index from I′(β)
8: if op = search then
9:
10: else
11:
Update list of keywords in I′(β)
j
,¬β, K )
,#u(¬β)
uw as id ← (y1, . . . , yl), where I′(β)
uf and key in Tf , Tw corresponding with the ﬁle being updated
uw [yk] = 1 for each yk ∈{ 1, . . . , 2N} \ Tf .Lβ, 1 ≤ k ≤ l
5:
6:
7:
8:
9:
3:
4:
5:
6:
7:
13:
14:
15:
16:
19:
20:
21:
to preserve keyword-ﬁle relations with changes at steps 13, 14
) respectively to preserve keyword-ﬁle relation consistency in both servers
12: for each j ∈{ w, f} do
# Update new address of non-dummy column and row data in the other server
j
,β , u(¬β)
Tj ← DOD-DSSE .UpdateT(Tj, u(β)
Tj ← DOD-DSSE .UpdateT(Tj,#u(¬β)
,¬β,#u(β)
uj and I′(¬β)
"uj
uj , (I′(¬β)
) based on I′(β)
"uj
Update cell values in I′(β)
Create (I′(¬β)
, I′(¬β)
uj
uj
)
j
j
j
)
# Increase all counter values in global counter arrays
17: C(b)[i] ← C(b)[i] + 1 for each b ∈{ 0, 1} and i ∈{ 1, . . . ,2 N}
18: for each j ∈{ w, f} do
for each server Sb ∈{ S0, S1} do
# Re-encrypt retrieved data with newly updated counters
ˆI(b)
uj ← DOD-DSSE .Enc(I′(b)
# Write re-encrypted data back to corresponding serverS b
uj ), Write(#u(b)
Write(u(b)
"uj ← DOD-DSSE .Enc(I′(b)
"uj
, ˆI(b)
"uj
, b, K), ˆI(b)
uj , u(b)
) toS b
, ˆI(b)
j
j
j
22: return id
, b, K)
j
,#u(b)
307
Subroutine 1 (u(0)
Assign hash x of an item to a random address in each server, and
store assigned addresses in the hash table T :
x , T ) ← DOD-DSSE .Assign(x, T )
x , u(1)
# Pick a random address from dummy set in each server
3:
$← T.Lb
1: for each b ∈{ 0, 1} do
u(b)
2:
x
T.Lb ← T.Lb \ {u(b)
x }
$←{ 0, 1}
4: bx
5: T.insert!x,⟨u(0)
6: return (u(0)
x , u(1)
x , bx⟩"
x , u(1)
x , T )
# Randomly assign server ID for x
# Store assigned info of x in hash table
Subroutine 2 (U,β ) ← CreateQueries(x)
Generate search and update queries given an actual item x to be
accessed, where x can be a keyword w or ﬁle f :
# Get hash table entry for x and its info
1: jx ← Tx.get(x)
2: β ← Tx[jx].bx
3: u(β)
x ← Tx[jx].u(β)
# Select a random non-dummy row/column index u(β)
¯x .
# Ifx is w then ¯x is f and vice-versa
x
¯x
4: u(β)
5: for each j ∈{ w, f} do
$←{ 1, . . . ,2N } \T ¯x.Lβ
# Select a random non-dummy index from server S¬β
u(¬β)
j
# Randomly select dummy row & column indices in S0, S1
for each b ∈{ 0, 1} do
$←{ 1, . . . ,2 N} \T j.L¬β
#u(b)
$← Tj.Lb
j
9: return (U,β ), where U = {u(b)
j ,#u(b)
j }j∈{w,f},b∈{0,1}
6:
7:
8:
Subroutine 3 I′u ← DOD-DSSE .Dec(Iu, u, b, K)
Decrypt a row/column Iu using its address u, server ID b, and
master key K = (k0, k1):
1: if u is a row index then
2:
3:
4:
τ (b)
u ← KDF(kb||u)
for j = 1 . . . ,2N do
I′u[j] ←E .Dec
τ (b)
u
(Iu[j], j||C(b)[j])
# ifu is a column index
5: else
6:
7:
8:
for i = 1 . . . ,2N do
τ (b)
i ← KDF(kb||i)
I′u[i] ←E .Dec
τ (b)
i
9: return I′
(Iu[i], u||C(b)[u])
Subroutine 4 T ← DOD-DSSE .UpdateT(T, qIdx , b,nIdx )
Update item’s address on server S¬b by nIdx using its address
qidx on server Sb for hash table lookup:
# Get hash table entry for qIdx in Sb
# Update hash table with new entry nIdx and server b
1: jx ← T.lookup(qIdx, b)
2: oIdx ← T [j].u(¬b)
3: T [jx].u(¬b)
x ← nIdx
4: T [jx].bx ←¬ b
x
# Remove nIdx from dummy setT. L¬b and add oIdx to it
5: T.L¬b ← T.L¬b ∪{ oIdx} \ {nIdx}
6: return T
4.3 Security Analysis
Let (−→σ0,−→σ1) be a query sequence of length q sent to
servers (S0, S1) respectively. By Deﬁnition 1, access patterns
⟨AP0(−→σ0), AP1(−→σ1)⟩ observed by (S0, S1), respectively, are:
AP0 = {access(x(0)
AP1 = {access(x(1)
), . . . ,access( x0
q)}
), . . . ,access( x(1)
q )},
1 ), . . . ,access( x(0)
1 ), . . . ,access( x(1)
i
i
(1)
j,ti, ˆI(b)
j,ti, I(b)
i ) = ({read(u(b)
uj,ti )},{write(u(b)
access(x(b)
uj,ti )}) , for
j ∈{ w, f}, 1 ≤ t ≤ 2 , b ∈{ 0, 1} and 1 ≤ i ≤ q per-
forming read-then-write operations on the server Sb, given
a DOD-DSSE .Access operation opi (Algorithm 3) at step i.
Each address-data tuple (u(b)
uj,ti ) comprises a random
row or column address and an IND-CPA encryption output,
respectively.
j,ti, I(b)
R e m a r k 1. Due to the properties of the square inci-
dence matrix data structure, rows and columns intersect each
other and have the same length. For each actual operation,
DOD-DSSE performs a search query and an update query
to each server Sb. This prevents Sb from determining (i) if
the actual intention of the client is to search or to update,
and (ii) which data-address tuple corresponds with search or
update query. These properties prevent Sb from separately
forming search and update patterns as shown in Section 1.1.
R e m a r k 2. Data items associated with search and up-
date queries are located in two independent address spaces
(i.e., row index vs. column index) and, therefore, their access
operations are independent from each other. For the sake of
brevity, we only analyze the security of search queries. The
same analysis can be applied to update queries. From now
on, whenever we say data Iux of the query x at address ux,
we mean the row data corresponding with the search query
along with its row index.
According to the unlinkability deﬁnition (Deﬁnition 3)
and DOD-DSSE access scheme in Algorithm 3, we deﬁne in
Deﬁnition 5 the unlinkability property of a data item which
is read from server S¬b, and its new representation is then
written to Sb under Sb’s view. We then show in Lemma 1
that any access patterns observed by servers (S0, S1) in our
scheme are unlinkable to each other by Deﬁnition 5 under
Assumption 1. Finally, we prove that DOD-DSSE achieves
our main security notion (Deﬁnition 4) in Theorem 1.
x , I(b)
ux ̸= I(b)
D e f i n i t i o n 5. Let (u(b)
ux ) represent an item x in
a set I (b) of N distinct data items on server Sb such that
x ̸= u(b)
x′ and I(b)
u(b)
ux′ for each x′, x ∈I (b) and x ̸= x′.
x′′ , ˆI(b)
(#u(b)
) ∈ APb (as in (1)) is a new representation of an
"ux′′
arbitrary data item x′′ ∈D , which has just been accessed on
x′′ , ˆI(b)
server S¬b. In DOD-DSSE , (#u(b)
) is unlinkable to I (b)
"ux′′
x′′ , ˆI(b)
if and only if the probability that (#u(b)
) represents the
"ux′′
ux ) for each x ∈I (b) is 1
N .
L e m m a 1. Under Assumption 1, any access patterns ob-
served by Sb and S¬b as in (1) are unlinkable with each other
by Deﬁnition 3.
same item with any tuples (u(b)
x , I(b)
P ro o f . For each DOD-DSSE operation xi (Algorithm
3), server Sb observes that two address-data tuples are ac-
cessed per search query simultaneously. One of them is to
308
u ),
i
read while the other is to write data being read from S¬b. The
data from all accessed addresses are IND-CPA re-encrypted
with new counters before being written back (Algorithm 3,
steps 17, 20) so that it is computationally indistinguishable
for Sb to determine which address is being read or written.
To begin with, we show that access(x(b)
i ) is unlinkable to
access(x(¬b)
) as follows:
u
We ﬁrst analyze the address-data tuple denoted as (u(b), I(b)
u is decrypted into I′(b)
which is read and observed by Sb. I(b)
u
and then is IND-CPA re-encrypted with a new counter before
being written to S¬b (steps 17, 20). I′ is assigned by the
client to a new random index selected from a set of dummy
addresses in S¬b as u(¬b) $← Tw.L¬b, which is independent
from u(b). Under Assumption 1, Sb does not have a view on
S¬b and vice versa. So, Sb does not know if I′ is assigned
to which u(¬b) in S¬b and under which new encryption form
ˆI. Therefore, (u(b), I(b)
u ) can represent the same item with
any address-data tuples (u(¬b), I(¬b)
) in S¬b with the same
probability of 1
N , where N is the number of items in S¬b.
By Deﬁnition 5, (u(b), I(b)
u ) is unlinkable to any items in S¬b
from Sb’s view. Considering the S¬b’s view, S¬b also does
not know which address-data tuple (u(b), I(b)
u ) was read from
Sb under Assumption 1. Meanwhile, ˆI is a IND-CPA encryp-
tion so that it looks random-uniform to all other data in S¬b.
Moreover, the address associating with ˆI is selected randomly
from the set of dummy addresses L¬b with |L¬b|= N . It is
oblivious for S¬b to link ˆI to any item which will be queried
subsequently. Notice that to achieve this obliviousness, it is
mandatory to always keep |L¬b| = N . Once the new IND-
CPA encryption form ˆI of an item is written to new address
u(¬b) in S¬b, its old address in S¬b will be set to dummy and
included to L¬b by the client (Subroutine 4, steps 2, 5).
We next consider search address-data tuple denoted as
(#u(b), ˆI(b)
Finally, we show that if each pair (access(x(b)
i ) is also unlinkable to others access(x(¬b)
"u ) which is written to Sb under Sb’s view. This tuple
is the new representation of an arbitrary item which has just
been queried from S¬b. As DOD-DSSE access operations
on servers Sb and S¬b are symmetric, meaning that Sb can
act as S¬b in the aforementioned analysis and vice versa.
Therefore, the same analysis is applied to this case.
i ), access(x(¬b)
))
is pairwise unlinkable to each other, for all 1 ≤ i ≤ q, then