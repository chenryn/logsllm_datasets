Each server:
S1. Receive ρi = ρi1 ··· ρir, a bitstring of length r.
S2. Let Bj be the jth b-bit block of the database for 1 ≤ j ≤ r.
S3. Compute Ri to be the XOR of all the Bj for which ρij = 1.
S4. Return Ri to the client.
Client:
C1. Receive R1, . . . , Rℓ.
C2. Compute B = R1 ⊕ ··· ⊕ Rℓ.
Figure 1. The PIR protocol from Chor et al. [4] used by the Pynchon Gate [11].
2.2. The only restriction on S is that I have at least ℓ ele-
ments, though we will see later that it sometimes beneﬁts us
to choose substantially larger I. We take ℓ random elements
of I as the indices in the Shamir secret sharing, and use
them to produce the ρi. An important property of Shamir
indices is that our usual intuitions about polynomials over
ﬁelds, such as distinct degree t polynomials agreeing on at
most t points, continue to hold in a ring setting provided we
restrict our attention to indices selected from I.
Similarly to eβ, in the Pynchon Gate protocol we can
consider the ρi to be vectors of length r over F2, and the
Ri and Bj to be vectors of length b over F2. In this case,
we see that the computation of Ri in step S3 is the same as
computing Ric = P ρijBjc over F2 for 1 ≤ c ≤ b. When
we move to a larger structure S, the servers perform this
same computation, but over S.
The secret recovery is more complicated than that of
the Pynchon Gate, not only since recovering a secret from
Shamir shares is more complicated than recovering from a
simple (ℓ−1)-private ℓ-way XOR scheme, but also since we
will need to handle Byzantine servers. The recovery scheme
will use the following function Γ: Given a structure S, a list
of ℓ indices [α1, . . . , αℓ] in S, a list of ℓ values [R1, . . . , Rℓ]
in S∪{⊥}, and a polynomial φ over S, let Γ(φ) be the subset
of {1, . . . , ℓ} such that φ(αi) = Ri for i ∈ Γ(φ). Note that
we keep S and the lists αi and Ri implicit in the notation
for convenience.
The resulting PIR protocol is shown in Figure 2. It uses
two subroutines, EASYRECOVER and HARDRECOVER,
which are shown in Figure 3. An important fact about
these subroutines is that EASYRECOVER is just a less com-
putationally expensive method to get the same answer as
HARDRECOVER, but it only works some of the time:
Fact 1. If EASYRECOVER returns a non-empty set on a
given input, then HARDRECOVER will return the same set
on that same input.
Proof. HARDRECOVER ﬁnds all polynomials φ of degree
at most t for which |Γ(φ)| ≥ h, where h = k − v is
the desired minimum number of honest (non-Byzantine)
servers. EASYRECOVER is a less expensive procedure to
perform the same calculation, in the event that there is ex-
actly one such polynomial. EASYRECOVER selects t + 1 of
the servers at random, and optimistically assumes that all of
those servers returned the correct answer. It calculates the
φ uniquely determined by those servers’ answers, and sees
how many other servers gave answers consistent with that
polynomial. The key is that if fewer than h − t servers dis-
agreed, then there can be no other polynomial φ′ for which
|Γ(φ′)| ≥ h: φ′ would have to agree with φ on more than t
points of I, and so φ′ = φ.
Parameters:
ℓ: number of servers
t: the desired privacy level; that is, the number of servers that can collude without learning
anything about the query
n: size of the database (in bits)
b: size of each block (in bits)
w: size of each word within a block (in bits)
S: either a ﬁeld or a ring Zpq such that |S| ≥ 2w (so that each word can be represented by an element of S)
I: a set of Shamir indices from S such that |I| ≥ ℓ
r: number of blocks = n/b
s: number of words per block = b/w
Calculate:
Client (querying for block number β):
P1. Choose ℓ random distinct indices α1, . . . , αℓ from I.
P2. Choose r random polynomials f1, . . . , fr of degree t. The coefﬁcients of each
polynomial should be random elements of S, except for the constant terms.
The constant term of fj should be δjβ.
P3. Compute ρi = [f1(αi), . . . , fr(αi)] for 1 ≤ i ≤ ℓ.
P4. Send ρi to server number i, for 1 ≤ i ≤ ℓ.
Each (honest) server:
S1. Receive ρi = [ρi1, . . . , ρir], a vector of r elements of S.
S2. Let Wjc be the cth w-bit word of the jth b-bit block of the database, interpreted as a member of S.
S3. Compute Ric = X1≤j≤r
S4. Return [Ri1, . . . , Ris] to the client.
ρijWjc for 1 ≤ c ≤ s.
Client:
C1. Receive [R11, . . . , R1s], . . . , [Rℓ1, . . . , Rℓs] from the ℓ servers.
If server j does not respond at all, set Rjc =⊥ for each 1 ≤ c ≤ s.
Let γ1, . . . , γk be the numbers of the k servers which did respond.
Let G = {γ1, . . . , γk} and H = {(G, ǫ)}.
C2. If k ≤ t, abort with the error “not enough servers replied”.
C3. Select h (the minimum number of honest servers) from the range √kt  t)
H: a nonempty set of pairs (G, σ) where G is a set of at least h server numbers,
and σ is the portion of the requested block recovered so far, assuming that
the servers in G were the honest ones. Each σ will have the same length.
No two of the G will have more than t elements in common.
[R1, . . . , Rℓ]: t-private ℓ-way purported shares of a w-bit word that had been encoded as a member
of S. It must not be the case that Rj =⊥ for any j in any of the G in H.
[α1, . . . , αℓ]: the indices used for the secret sharing
Either: (1) a set H′ of the same form as H, above, but with each σ being w bits longer
than those in the input, or (2) the empty set
EASYRECOVER(S, w, t, h, H, [R1, . . . , Rℓ], [α1, . . . , αℓ]):
E1. Set H′ ← {}.
E2. For each (G, σ) ∈ H:
E3.
E4.
E5.
E6.
E7.
E8. Return H′.
/* Optimistically hope the rest of the servers are honest */
Select a random subset I ⊆ G of size t + 1.
Use Lagrange interpolation to ﬁnd the unique polynomial φ over S of degree t
for which φ(αj ) = Rj for each j ∈ I.
Let W be the w-bit representation of φ(0), or ⊥ if there is no such representation.
If |G ∩ Γ(φ)| ≥ h and |G\Γ(φ)|  t, and
at least h > √kt servers respond honestly, then the algo-
rithm in Figure 2 will return a set H, one of whose elements
is the pair (Gh, Bβ), where Gh is the set of the server num-
bers that responded honestly, and Bβ is the correct block
from the database.
Proof sketch. (See Appendix A for the complete proof.) As
above, the h honest servers return their shares of the s words
of the βth block of the database. However, k − h additional
servers return arbitrary values. Depending on the values of
h, k and t, there may no longer be a unique block deter-
mined by h of the k received shares, but when h > √kt
we can use the algorithm of [7] to ﬁnd a list of all possi-
ble blocks in polynomial time. In the next section, we will
see a number of ways to recover the correct block from this
list.
3.2. Correctness of the protocol without
3.4. List-decoding
Byzantine servers
In this section, we show that this protocol returns the
correct block B from the database when no server responds
incorrectly (but some may not respond at all), so long as
enough servers do respond.
Theorem 1. If k of the ℓ servers respond, there are no
Byzantine servers, and k > t, then the algorithm in Fig-
ure 2 will return a set H containing the single pair (G, B),
where G is the set of the k server numbers that responded,
and B is the correct block Bβ from the database.
Proof sketch. (See Appendix A for the complete proof.)
The important observation is that if ℓ vectors ρ1, . . . , ρℓ
are t-private ℓ-way secret shares of a vector ~v of length r,
and ~w is any vector of length r, then the ℓ dot products
ρ1 · ~w, . . . , ρℓ · ~w are t-private ℓ-way secret shares of the
scalar ~v · ~w.
In this protocol, each server has its share ρi of ~v = eβ.
Also, for each c from 1 to s (where s is the number of words
per block), each server constructs the vector ~wc, which is
the vector of length r (the number of blocks) whose jth el-
ement is the cth word of the jth block of the database. Then
each server’s returned value Ric = ρi · ~wc will be its share
of eβ · ~wc, which is just the cth word of the βth block of
the database. Since the client receives more than t of these
results, it can uniquely reconstruct each of the words of the
βth block of the database, and concatenating them repro-
duces the desired block.
3.3. Correctness in the presence of Byzan-
tine servers
The algorithm of Figure 2 is an example of a list-
decoding algorithm; that is, under some circumstances, it
may output a list of more than one data block, and we must
provide some way for the client to determine which is the
correct block. On the one hand, the potential to list-decode
is one source of the improvements in the privacy and robust-
ness parameters of the protocol of this section over that of
previous work such as Beimel and Stahl [2]. On the other
hand, we need to be able to recover the correct database
block.
The source of the list-decoding is that, in the presence of
many Byzantine servers, there may be more than one poly-
nomial φ such that |Γ(φ)| ≥ h. (Recall that Γ(φ) is the set
of server numbers which returned replies consistent with the
polynomial φ.) There are a number of ways to handle this
and recover the unique correct result.
The simplest way to handle list-decoding is simply to
choose your parameters such that there cannot be more than
one such φ.
2 , then there is exactly one polynomial φ
Fact 2. If h > k+t
of degree at most t for which |Γ(φ)| ≥ h.
is φ0, so that
Proof. Suppose the correct polynomial
|Γ(φ0)| ≥ h, since all h honest servers will respond cor-
rectly. Now suppose it is the case that |Γ(φ)| ≥ h for some
φ. It is always the case that |Γ(φ0) ∩ Γ(φ)| = |Γ(φ0)| +
|Γ(φ)| − |Γ(φ0) ∪ Γ(φ)|. But since |Γ(φ0) ∪ Γ(φ)| ≤ k (as
only k servers responded), we have that |Γ(φ0) ∩ Γ(φ)| ≥
h + h − k > (k + t) − k = t. So φ0 and φ agree on more
than t points of I, and are therefore equal.
We will now look at the effect of Byzantine servers on
the correctness of this protocol.
Therefore, if h > k+t
2 , we will never have to handle
more than one possible polynomial. However, we may like
to be able to use lower values of h. The following fact shows
how to handle values of h > k/2.
result is always at least as good, and almost always strictly
better:
Fact 3. If the Byzantine servers are unable to see the com-
munication between the client and the honest servers (which
should be the case, as it is important for privacy), and
h > k/2, then by choosing the index set I to be sufﬁciently
large, we can make the probability that the algorithm of
Figure 2 outputs more than one block arbitrarily small.
Proof sketch. (See Appendix A for the complete proof.)
Suppose the algorithm of Figure 2 outputs more than one
block. Then it must be the case that the Byzantine servers
were able to provide responses such that there is an incor-
rect polynomial φ of degree t which agrees with at least
h of the k total responses. Since there are at most k − h
Byzantine servers, and k − h  √kt ≥ k/2.
Finally, in the event that t < k
Also recall that the size of the index set I can be chosen to
be |S| − 1 (if S is a ﬁeld) or min(p, q) − 1 (if S is Zpq).
4 and we want to allow for
k/2 or more Byzantine servers, we can just use the usual
techniques (such as those of [9]) to add redundancy to the
words of the database, so that the list decoding can be con-
verted to unique decoding. Note that this will slightly in-
crease the size of the database. This redundancy could be in
the form of digital signatures from the database creator, for
example. In a situation where there is for some reason no
such independent creator, allowing a majority of responding
servers to be Byzantine may not make sense; in that case, it
is not clear what it means for a block to be “correct” when
more than half of the servers are storing a different block.
3.5. Comparison to previous results
Privacy and robustness. The authors of [2] show that t-
private v-Byzantine-robust k-out-of-ℓ PIR protocols exist
for v ≤ t < k
3 . We have demonstrated such a protocol for
0 < t < k and v < k − ⌊
withstand at least three times as many servers colluding to
determine the client’s query, and when the privacy level t is
the same (for some 0 < t < k
3 ), our protocol tolerates up to
√kt⌋. Our protocol can therefore
k −⌊√kt⌋− 1 Byzantine servers, while that of [2] tolerates
up to t. We now show that in these comparable cases, our
Theorem 3. For integers k, t such that 0 < t < k
k − ⌊√kt⌋ − 1 ≥ t, with equality if and only if (t, k) =
(1, 4).
Proof. We equivalently prove that k−⌊√kt⌋−1−t