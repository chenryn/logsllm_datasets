We presented FLOWDIST, a purely application-level dynamic
information ﬂow analysis for common distributed systems. To
enable a practical solution to computing full information ﬂow
paths in large-scale systems, FLOWDIST overcomes multiple
technical challenges via a multi-staged reﬁnement-based
analysis methodology. This methodology itself is applicable
beyond information ﬂow analysis and distributed systems.
Extensive evaluation of FLOWDIST and its two alternative
designs showed that our approach scaled well to large-scale
distributed systems with generally small run-time overhead.
We also demonstrated its capabilities in discovering known
and new vulnerabilities in diverse real-world systems, and its
superiority over state-of-the-art peer techniques.
Acknowledgments
We thank the anonymous reviewers for constructive comments
and our shepherd Engin Kirda for very helpful guidance. This
work was supported by NSF through grant CCF-1936522.
References
[1] CVE-2005-3280. https://tinyurl.com/hu78vzm8.
[2] CVE-2014-0085. https://tinyurl.com/jm5zwtr2.
[3] CVE-2014-0193. https://tinyurl.com/2w74bk9x.
[4] CVE-2014-3488. https://tinyurl.com/5byw35dj.
[5] CVE-2015-2156. https://tinyurl.com/3ukzwy5r.
[6] CVE-2015-3254. https://tinyurl.com/3hpbvhr2.
[7] CVE-2016-4970. https://tinyurl.com/kmr3vb8v.
[8] CVE-2018-8012. https://tinyurl.com/7s2ass7b.
[9] CVE-2019-17572. https://tinyurl.com/w37a4bcy.
[10] Netty/8869. https://tinyurl.com/ydsjj685.
[11] Netty/9112. http://github.com/netty/netty/issues/9112.
[12] Netty/9229. http://github.com/netty/netty/issues/9229.
[13] Netty/9243. http://github.com/netty/netty/issues/9243.
[14] Netty/9291. http://github.com/netty/netty/issues/9291.
[15] Netty/9362. http://github.com/netty/netty/issues/9362.
[16] Voldemort/101. https://tinyurl.com/2s4pr4w.
[17] Voldemort/352. https://tinyurl.com/n56mc9n3.
[18] Voldemort/377. https://tinyurl.com/drrht5j4.
[19] Voldemort/378. https://tinyurl.com/84y9s73w.
[20] Voldemort/381. https://tinyurl.com/j45xkzry.
[21] Voldemort/387. https://tinyurl.com/38fvrw27.
[22] xSocket/21. https://sourceforge.net/p/xsocket/bugs/21/.
[23] ZooKeeper/2569. https://tinyurl.com/y669z2av.
[24] RainingSockets. https://tinyurl.com/566hetmd, 2004.
[25] ADEN. https://tinyurl.com/h5wrhaka, 2013.
[26] MultiChat. https://tinyurl.com/nfdbwkxb, 2015.
[27] NioEcho. https://tinyurl.com/bwu5psvh, 2015.
[28] Open Chord. https://tinyurl.com/a33zm9ec, 2015.
[29] Voldemort. https://github.com/voldemort, 2015.
[30] ZooKeeper. https://zookeeper.apache.org/, 2015.
[31] CVE. https://cve.mitre.org/, 2018.
[32] CVE-2018-8012. https://tinyurl.com/ymhej5jh, 2018.
[33] Thrift. https://thrift.apache.org/, 2018.
[34] xSocket. http://xsocket.org/, 2018.
[35] DataFlowSanitizer. https://tinyurl.com/7mv5hprs, 2019.
[36] HyperSQL. http://hsqldb.org/, 2020.
[37] Netty. https://netty.io/index.html, 2020.
[38] RocketMQ. https://rocketmq.apache.org/, 2020.
[39] Hiralal Agrawal and Joseph R Horgan. Dynamic program slicing. In
PLDI, pages 246–256, 1990.
[40] Abdullah Mujawib Alashjaee, Salahaldeen Duraibi, and Jia Song.
Dynamic taint analysis tools: A review. IJCSS, 13(6):231, 2019.
[41] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden,
Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau,
and Patrick McDaniel.
FlowDroid: Precise context, ﬂow, ﬁeld,
object-sensitive and lifecycle-aware taint analysis for Android apps.
In PLDI, pages 259–269, 2014.
[42] Mohammadreza Ashouri and Christoph Kreitz. Hybrid taint ﬂow
analysis in Scala. In SSCI, pages 657–663, 2019.
2108    30th USENIX Security Symposium
USENIX Association
[43] Thomas H Austin and Cormac Flanagan. Efﬁcient purely-dynamic
information ﬂow analysis. In PLAS, pages 113–124, 2009.
[44] Thomas H Austin and Cormac Flanagan.
Permissive dynamic
information ﬂow analysis. In PLAS, pages 1–12, 2010.
[45] Subarno Banerjee, David Devecsery, Peter M Chen, and Satish
Narayanasamy. Iodine: Fast dynamic taint tracking using rollback-free
optimistic hybrid analysis. In S&P, pages 490–504, 2019.
[46] Soubhagya Sankar Barpanda and Durga Prasad Mohapatra. Dynamic
IET Software,
slicing of distributed object-oriented programs.
5(5):425–433, 2011.
[47] Jonathan Bell and Gail Kaiser. Phosphor: Illuminating dynamic data
ﬂow in commodity JVMs. In OOPSLA, pages 83–101, 2014.
[48] Haipeng Cai. Hybrid program dependence approximation for effective
dynamic impact prediction. TSE, 44(4):334–364, 2018.
[49] Haipeng Cai and Xiaoqin Fu. D2ABS: A framework for dynamic
dependence analysis of distributed programs. Technical report, 2019.
[50] Haipeng Cai and John Jenkins. Leveraging historical versions of
Android apps for efﬁcient and precise taint analysis. In MSR, pages
265–269, 2018.
[51] Haipeng Cai and Raul Santelices. Diver: Precise dynamic impact
In ASE, pages
analysis using dependence-based trace pruning.
343–348, 2014.
[52] Haipeng Cai, Raul Santelices, and Douglas Thain. DiaPro: Unifying
dynamic impact analyses for improved and variable cost-effectiveness.
TOSEM, 25(2):1–50, 2016.
[53] Haipeng Cai and Douglas Thain. DistIA: A cost-effective dynamic
impact analysis for distributed programs. In ASE, pages 344–355,
2016.
[54] Stefano Calzavara, Ilya Grishchenko, and Matteo Maffei. HornDroid:
Practical and sound static analysis of Android applications by SMT
solving. In EuroS&P, pages 47–62, 2016.
[55] Jingde Cheng. Dependence analysis of parallel and distributed
programs and its applications. In Advances in Parallel and Distributed
Computing, pages 370–377, 1997.
[56] Winnie Cheng, Dan RK Ports, David Schultz, Victoria Popic, Aaron
Blankstein, James Cowling, Dorothy Curtis, Liuba Shrira, and Barbara
Liskov. Abstractions for usable information ﬂow control in Aeolus.
In USENIX ATC, pages 139–151, 2012.
[57] Winnie Cheng, Qin Zhao, Bei Yu, and Scott Hiroshige. TaintTrace:
Efﬁcient ﬂow tracing with dynamic binary rewriting. In ICC, pages
749–754, 2006.
[58] Georgios Chinis, Polyvios Pratikakis, Sotiris Ioannidis, and Elias
information ﬂow for legacy web
Athanasopoulos.
applications. In OOPSLA, pages 17–28, 2013.
Practical
[59] Jim Chow, Ben Pfaff, Tal Garﬁnkel, Kevin Christopher, and Mendel
Rosenblum. Understanding data lifetime via whole system simulation.
In USENIX Security, pages 321–336, 2004.
[60] James Clause, Wanchun Li, and Alessandro Orso. Dytan: A generic
dynamic taint analysis framework. In ISSTA, pages 196–206, 2007.
[61] George Coulouris, Jean Dollimore, Tim Kindberg, and Gordon
Blair. Distributed Systems: Concepts and Design. Addison-Wesley
Publishing Company, 5th edition, 2011.
[62] Jedidiah R Crandall and Frederic T Chong. Minos: Control data attack
prevention orthogonal to memory model. In MICRO, pages 221–232,
2004.
[63] Evelyn Duesterwald, Rajiv Gupta, and M Soffa. Distributed slicing
and partial re-execution for distributed programs. In Languages and
Compilers for Parallel Computing, pages 497–511. 1993.
[64] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar,
Byung-Gon Chun, Landon P Cox, Jaeyeon Jung, Patrick McDaniel,
and Anmol N Sheth. TaintDroid: An information-ﬂow tracking system
for realtime privacy monitoring on smartphones. TOCS, 32(2):5, 2014.
https://
[65] Xiaoqin Fu and Haipeng Cai.
FlowDist Artifact.
bitbucket.org/wsucailab/flowdist.
[66] Xiaoqin Fu and Haipeng Cai. A dynamic taint analyzer for distributed
systems. In FSE, pages 1115–1119, 2019.
[67] Xiaoqin Fu and Haipeng Cai. Measuring interprocess communications
in distributed systems. In ICPC, pages 323–334, 2019.
[68] Xiaoqin Fu and Haipeng Cai. Scaling application-level dynamic taint
analysis to enterprise-scale distributed systems. In ICSE Companion,
pages 270–271, 2020.
[69] Xiaoqin Fu, Haipeng Cai, and Li Li. Dads: dynamic slicing
continuously-running distributed programs with budget constraints.
In FSE, pages 1566–1570, 2020.
[70] Xiaoqin Fu, Haipeng Cai, Wen Li, and Li Li. Seads: Scalable and
cost-effective dynamic dependence analysis of distributed systems via
reinforcement learning. TOSEM, 30(1):1–45, 2020.
[71] Dennis Giffhorn and Christian Hammer. Precise slicing of concurrent
programs. Automated Software Engineering, 16(2):197–234, 2009.
[72] Mehran Goli, Muhammad Hassan, Daniel Große, and Rolf Drechsler.
Security validation of VP-based SoCs using dynamic information ﬂow
tracking. it-Information Technology, 61(1):45–58, 2019.
[73] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham,
Nguyen Nguyen, and Martin C Rinard. Information-ﬂow analysis of
Android applications in DroidSafe. In NDSS, 2015.
[74] Diganta Goswami and Rajib Mall. Dynamic Slicing of Concurrent
Programs. In HiPC, pages 15–26. 2000.
[75] Jürgen Graf, Martin Hecker, and Martin Mohr. Using JOANA for
information ﬂow control in Java programs - a practical guide.
In
Working Conference on Programming Languages, pages 123–138,
2013.
[76] Christophe Hauser, Frédéric Tronel, Colin Fidge, and Ludovic Mé.
Intrusion detection in distributed systems, an approach based on taint
marking. In ICC, pages 1962–1967, 2013.
[77] Susan Horwitz, Thomas Reps, and David Binkley. Interprocedural
slicing using dependence graphs. TOPLAS, 12(1):26–60, 1990.
[78] Daniel Jackson and Martin Rinard. Software analysis: A roadmap. In
ICSE, pages 133–145, 2000.
[79] Jianyu Jiang, Shixiong Zhao, Danish Alsayed, Yuexuan Wang,
Heming Cui, Feng Liang, and Zhaoquan Gu. Kakute: A precise,
uniﬁed information ﬂow analysis system for big-data security. In
ACSAC, pages 79–90, 2017.
[80] Mariam Kamkar and Patrik Krajina. Dynamic slicing of distributed
programs. In ICSM, pages 222–229, 1995.
[81] Min Gyung Kang, Stephen McCamant, Pongsin Poosankam, and
DTA++: dynamic taint analysis with targeted
Dawn Song.
control-ﬂow propagation. In NDSS, 2011.
[82] Rezwana Karim, Frank Tip, Alena Sochurkova, and Koushik Sen.
Platform-independent dynamic taint analysis for JavaScript. TSE,
46(12):1364–1379, 2018.
[83] Vasileios P Kemerlis, Georgios Portokalidis, Kangkook Jee, and
Angelos D Keromytis. libdft: Practical dynamic data ﬂow tracking
for commodity systems. In VEE, pages 121–132, 2012.
[84] Dave King, Boniface Hicks, Michael Hicks, and Trent Jaeger. Implicit
ﬂows: Can’t live with ‘em, can’t live without ‘em. In ICISSP, pages
56–70, 2008.
[85] Bogdan Korel and Roger Ferguson. Dynamic slicing of distributed
programs. Applied Math. and Computer Science, 2(2):199–215, 1992.
USENIX Association
30th USENIX Security Symposium    2109
[86] Elisavet Kozyri, Owen Arden, Andrew C Myers, and Fred B Schneider.
JRIF: reactive information ﬂow control for Java. In Foundations of
Security, Protocols, and Equational Reasoning, pages 70–88. 2019.
[87] Patrick Lam, Eric Bodden, Ondrej Lhoták, and Laurie Hendren. The
Soot framework for Java program analysis: a retrospective. In CETUS,
volume 15, 2011.
[88] Li Li, Alexandre Bartel, Tegawendé F Bissyandé, Jacques Klein, Yves
Le Traon, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Damien
Octeau, and Patrick McDaniel. IccTA: Detecting inter-component
privacy leaks in Android apps. In ICSE, pages 280–291, 2015.
[89] Haopeng Liu, Guangpu Li, Jeffrey F Lukman, Jiaxin Li, Shan
Lu, Haryadi S Gunawi, and Chen Tian. DCatch: Automatically
detecting distributed concurrency bugs in cloud systems. ASPLOS,
45(1):677–691, 2017.
[90] Jed Liu, Michael D George, Krishnaprasad Vikram, Xin Qi, Lucas
Waye, and Andrew C Myers. Fabric: A platform for secure distributed
computation and storage. In SOSP, pages 321–334, 2009.
[91] Benjamin Livshits, Manu Sridharan, Yannis Smaragdakis, Ondˇrej
Lhoták, J Nelson Amaral, Bor-Yuh Evan Chang, Samuel Z Guyer,
Uday P Khedker, Anders Møller, and Dimitrios Vardoulakis.
In
defense of soundiness: A manifesto. CACM, 58(2):44–46, 2015.
[92] Florian D Loch, Martin Johns, Martin Hecker, Martin Mohr, and
Gregor Snelting. Hybrid taint analysis for Java EE. In SAC, pages
1716–1725, 2020.
[93] Wes Masri and Andy Podgurski. Application-based anomaly intrusion
detection with dynamic information ﬂow analysis. Computers &
Security, 27(5-6):176–187, 2008.
[94] Wes Masri and Andy Podgurski. Algorithms and tool support for
dynamic information ﬂow analysis. IST, 51(2):385–404, 2009.
[95] Wes Masri, Andy Podgurski, and David Leon. Detecting and
debugging insecure information ﬂows. In ISSRE, pages 198–209,
2004.
[96] Jiang Ming, Dinghao Wu, Gaoyao Xiao, Jun Wang, and Peng Liu.
TaintPipe: Pipelined symbolic taint analysis. In USENIX Security,
pages 65–80, 2015.
[97] Durga P Mohapatra, Rajeev Kumar, Rajib Mall, DS Kumar, and
Mayank Bhasin. Distributed dynamic slicing of Java programs. JSS,
79(12):1661–1678, 2006.
[98] Gero Mühl, Ludger Fiege, and Peter Pietzuch.
Distributed
Event-Based Systems. Springer Science & Business Media, 2006.
[99] Andrew C Myers. JFlow: Practical mostly-static information ﬂow
control. In POPL, pages 228–241, 1999.
[100] Mangala Gowri Nanda and S Ramesh. Slicing concurrent programs.
In ISSTA, pages 180–190, 2000.
[101] James Newsome and Dawn Xiaodong Song. Dynamic taint analysis
for automatic detection, analysis, and signature generation of exploits
on commodity software. In NDSS, volume 5, pages 1–17, 2005.
[102] Burcu Kulahcioglu Ozkan, Rupak Majumdar, and Simin Oraee. Trace
aware random testing for distributed systems. Proceedings of ACM
on Programming Languages, 3(OOPSLA):1–29, 2019.
[103] Vasilis Pappas, Vasileios P Kemerlis, Angeliki Zavou, Michalis
Polychronakis, and Angelos D Keromytis. CloudFence: Data ﬂow
tracking as a cloud service. In RAID, pages 411–431, 2013.
[104] Manoj Plakal, Daniel J Sorin, Anne E Condon, and Mark D Hill.
Lamport clocks: Verifying a directory cache-coherence protocol. In
SPAA, pages 67–76, 1998.
[105] Kyle Pullicino. Jif: Language-based Information-ﬂow Security in
Java. arXiv preprint arXiv:1412.8639, 2014.
[106] Feng Qin, Cheng Wang, Zhenmin Li, Ho-seop Kim, Yuanyuan Zhou,
and Youfeng Wu. LIFT: A low-overhead practical information ﬂow
In MICRO, pages
tracking system for detecting security attacks.
135–148, 2006.
[107] Venkatesh Prasad Ranganath and John Hatcliff. Slicing concurrent
java programs using Indus and Kaveri. STTT, 9(5-6):489–504, 2007.
[108] Bruno PS Rocha, Mauro Conti, Sandro Etalle, and Bruno
Crispo. Hybrid static-runtime information ﬂow and declassiﬁcation
enforcement. TIFS, 8(8):1294–1305, 2013.
[109] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. All
you ever wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In S&P, pages
317–331, 2010.
[110] Omar Sefraoui, Mohammed Aissaoui, and Mohsine Eleuldj.
OpenStack: Toward an open-source solution for cloud computing.
International Journal of Computer Applications, 55(3):38–42, 2012.
[111] Venkatesh Gauri Shankar, Gaurav Somani, Manoj Singh Gaur, Vijay
Laxmi, and Mauro Conti. AndroTaint: An efﬁcient Android malware
In ISEA Asia
detection framework using dynamic taint analysis.
security and privacy, pages 1–13, 2017.
[112] Mariana Sharp and Atanas Rountev.
Static analysis of object
references in RMI-based Java software. TSE, 32(9):664–681, 2006.
[113] Dongdong She, Yizheng Chen, Abhishek Shah, Baishakhi Ray, and
Suman Jana. Neutaint: Efﬁcient dynamic taint analysis with neural
networks. In S&P, pages 1527–1543, 2020.
[114] Paritosh Shroff, Scott Smith, and Mark Thober. Dynamic dependency
monitoring to secure information ﬂow. In CSF, pages 203–217, 2007.
[115] G Edward Suh, Jae W Lee, David Zhang, and Srinivas Devadas.
Secure program execution via dynamic information ﬂow tracking.
In ASPLOS, pages 85–96, 2004.
[116] Yuqiong Sun, Giuseppe Petracca, Xinyang Ge, and Trent Jaeger.
Pileus: Protecting user resources from vulnerable cloud services. In
ACSAC, pages 52–64, 2016.
[117] Xinran Wang, Yoon-Chan Jhi, Sencun Zhu, and Peng Liu. STILL:
Exploit code detection via static taint and initialization analyses. In
ACSAC, pages 289–298, 2008.
[118] Fengguo Wei, Sankardas Roy, and Xinming Ou. Amandroid: A precise
and general inter-component data ﬂow analysis framework for security
vetting of Android apps. In CCS, pages 1329–1341, 2014.
[119] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and
Engin Kirda. Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In CCS, pages 116–127, 2007.
[120] Wei You, Bin Liang, Wenchang Shi, Peng Wang, and Xiangyu Zhang.
TaintMan: An ART-compatible dynamic taint analysis framework on
unmodiﬁed and non-rooted Android devices. TDSC, 17(1):209–222,
2017.
[121] Xinhao Yuan and Junfeng Yang. Effective concurrency testing for
distributed systems. In ASPLOS, pages 1141–1156, 2020.
[122] Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave,
Justin Ma, Murphy McCauly, Michael J Franklin, Scott Shenker, and
Ion Stoica. Resilient distributed datasets: A fault-tolerant abstraction
for in-memory cluster computing. In NSDI, pages 15–28, 2012.
[123] Angeliki Zavou. Information Flow Auditing In the Cloud. PhD thesis,
Columbia University, 2015.
[124] Angeliki Zavou, Georgios Portokalidis, and Angelos D Keromytis.
Taint-Exchange: a generic system for cross-process and cross-host
taint tracking. In IWSEC, pages 113–128, 2011.
[125] David Yu Zhu, Jaeyeon Jung, Dawn Song, Tadayoshi Kohno, and
David Wetherall. TaintEraser: Protecting sensitive data leaks using
application-level taint tracking. ACM SIGOPS Operating Systems
Review, 45(1):142–154, 2011.
2110    30th USENIX Security Symposium
USENIX Association