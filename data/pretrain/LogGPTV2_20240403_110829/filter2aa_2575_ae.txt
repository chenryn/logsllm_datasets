NET.EXE, or c:\windows\system32\net.exe from its internal list. It will only match net.exe. 
www.cobaltstrike.com/
/
47/
x86 Beacon can only spoof arguments in x86 child processes. Likewise, x64 Beacon can only 
spoof arguments in x64 child processes. 
The real arguments are written to the memory space that holds the fake arguments. If the real 
arguments are longer than the fake arguments, the command launch will fail. 
7.8 Blocking DLLs in Child Processes 
Use blockdlls start to ask Beacon to launch child processes with a binary signature policy that 
blocks non-Microsoft DLLs from the process space. Use blockdlls stop to disable this behavior. 
This feature requires Windows 10. 
7.9 Upload and Download Files 
The download command will download the requested file. You do not need to provide quotes 
around a filename with spaces in it. Beacon is built for low and slow exfiltration of data. During 
each check-in, Beacon will download a fixed chunk of each file its tasked to get. The size of this 
chunk depends on Beacon’s current data channel. The HTTP and HTTPS channels pull data in 
512KB chunks. 
Type downloads to see a list of file downloads in progress for the current Beacon. Use the 
cancel command, followed by a filename, to cancel a download that’s in progress. You may use 
wildcards with your cancel command to cancel multiple file downloads at once. 
Go to View -> Downloads in Cobalt Strike to see the files that your team has downloaded so far. 
Only completed downloads will show up in this tab. Downloaded files are stored on the team 
server. To bring files back to your system, highlight them here, and press Sync Files. Cobalt 
Strike will then download the selected files to a folder of your choosing on your system. 
The upload command will upload a file to the host.  
When you upload a file, you will sometimes want to update its timestamps to make it blend in 
with other files in the same folder. Use the timestomp command to do this. The timestomp 
command will match the Modified, Accessed, and Created times of one file to another file. 
7.10 File Browser 
Beacon’s File Browser is an opportunity to explore the files on a compromised system. Go to 
[Beacon] -> Explore -> File Browser to open it. 
The file browser will request a listing for the current working directory of Beacon. When this 
result arrives, the file browser will populate. 
The left-hand side of the file browser is a tree which organizes the known drives and folders into 
one view. The right-hand side of the file browser shows the contents of the current folder.  
www.cobaltstrike.com/
/
48/
Figure 35. File Browser 
Each file browser caches the folder listings it receives. A colored folder indicates the folder’s 
contents are in this file browser’s cache. You may navigate to cached folders without generating 
a new file listing request. Press Refresh to ask Beacon to update the contents of the current 
folder. 
A dark-grey folder means the folder’s contents are not in this file browser’s cache. Click on a 
folder in the tree to have Beacon generate a task to list the contents of this folder (and update its 
cache). Double-click on a dark-grey folder in the right-hand side current folder view to do the 
same. 
To go up a folder, press the folder button next to the file path above the right-hand side folder 
details view. If the parent folder is in this file browser’s cache, you will see the results 
immediately. If the parent folder is not in the file browser’s cache, the browser will generate a 
task to list the contents of the parent folder. 
Right-click a file to download or delete it.  
To see which drives are available, press List Drives.  
7.11 File System Commands 
You may prefer to browse and manipulate the file system from the Beacon console. You can do 
this too. Use the ls command to list files in the current directory. Use mkdir to make a directory. 
rm will remove a file or folder. cp copies a file to a destination. mv moves a file. 
7.12 The Windows Registry 
Use reg_query [x86|x64] [HIVE\path\to\key] to query a specific key in the registry. This 
command will print the values within that key and a list of any subkeys. The x86/x64 option is 
required and forces Beacon to use the WOW64 (x86) or native view of the registry. reg_query 
[x86|x64] [HIVE\path\to\key] [value] will query a specific value within a registry key. 
www.cobaltstrike.com/
/
49/
7.13 Keystrokes and Screenshots 
Beacon’s tools to log keystrokes and take screenshots are designed to inject into another process 
and report their results to your Beacon.  
To start the keystroke logger, use keylogger pid to inject into an x86 process. Use keylogger pid 
x64 to inject into an x64 process. Explorer.exe is a good candidate for this tool. Use keylogger 
by itself to inject the keystroke logger into a temporary process. The keystroke logger will 
monitor keystrokes from the injected process and report them to Beacon until the process 
terminates or you kill the keystroke logger post-exploitation job. 
Be aware that multiple keystroke loggers may conflict with each other. Use only one keystroke 
logger per desktop session. 
To take a screenshot, use screenshot pid to inject the screenshot tool into an x86 process. Use 
screenshot pid x64 to inject into an x64 process. Again, explorer.exe is a good candidate for this 
tool. This variant of the screenshot command will take one screenshot and exit. screenshot, by 
itself, will inject the screenshot tool into a temporary process. Use screenshot pid architecture 
time to ask the screenshot tool to run for some number of seconds and report a screenshot each 
time Beacon checks in. This is a handy way to watch a user’s desktop. 
When Beacon receives new screenshots or keystrokes, it will post a message to the Beacon 
console. The screenshot and keystroke information is not available through the Beacon console 
though. Go to View -> Keystrokes to see logged keystrokes across all of your Beacon sessions. 
Go to View -> Screenshots to browse through screenshots from all of your Beacon sessions. 
Both of these dialogs update as new information comes in. These dialogs make it easy for one 
operator to monitor keystrokes and screenshots on all of your Beacon sessions. 
7.14 Post-Exploitation Jobs 
Several Beacon features run as jobs in another process (e.g., the keystroke logger and screenshot 
tool). These jobs run in the background and report their output when it’s available. Use the jobs 
command to see which jobs are running in your Beacon. Use jobkill [job number] to kill a job. 
7.15 The Process Browser 
The Process Browser does the obvious; it tasks a Beacon to show a list of processes and shows 
this information to you. The left-hand side shows the processes organized into a tree. The current 
process for your Beacon is highlighted yellow. 
The right-hand side shows the process details. The Process Browser is also a convenient place to 
impersonate a token from another process, deploy the screenshot tool, or deploy the keystroke 
logger. Highlight one or more processes and press the appropriate button at the bottom of the tab. 
www.cobaltstrike.com/
/
50/
Figure 36. Process Browser 
If you highlight multiple Beacons and task them to show processes, Cobalt Strike will show a 
Process Browser that also states which host the process comes from. This variant of the Process 
Browser is a convenient way to deploy Beacon’s post-exploitation tools to multiple systems at 
once. Simply sort by process name, highlight the interesting processes on your target systems, 
and press the Screenshot or Log Keystrokes button to deploy these tools to all highlighted 
systems. 
7.16 Desktop Control 
To interact with a desktop on a target host, go to [beacon] -> Explore -> Desktop (VNC). This 
will stage a VNC server into the memory of the current process and tunnel the connection 
through Beacon.  
When the VNC server is ready, Cobalt Strike will open a tab labeled Desktop HOST@PID.  
You may also use Beacon’s desktop command to inject a VNC server into a specific process. 
Use desktop pid architecture low|high. The last parameter let’s you specify a quality for the 
VNC session. 
www.cobaltstrike.com/
/
51/
Figure 37. Cobalt Strike Desktop Viewer 
The bottom of the desktop tab has several buttons. These are: 
Refresh the screen 
View only 
Decrease Zoom 
Increase Zoom 
Zoom to 100% 
Adjust Zoom to Fit Tab 
Send Ctrl+Escape 
Lock the Ctrl key 
Lock the Alt key 
If you can’t type in a Desktop tab, check the state of the Ctrl and Alt buttons. When either 
button is pressed, all of your keystrokes are sent with the Ctrl or Alt modifier. Press the Ctrl or 
Alt button to turn off this behavior. Make sure View only isn’t pressed either. To prevent you 
from accidentally moving the mouse, View only is pressed by default. 
www.cobaltstrike.com/
/
52/
7.17 Privilege Escalation 
Some post-exploitation commands require system administrator-level rights. Beacon includes 
several options to help you elevate your access.  
Elevate with an Exploit 
Type elevate to list privilege escalation exploits registered with Cobalt Strike. Run elevate 
[exploit] [listener] to attempt to elevate with a specific exploit. You may also launch one of these 
exploits through [beacon] -> Access -> Elevate. 
Use runasadmin, by itself, to list command elevator exploits registered with Cobalt Strike. Run 
runasadmin [exploit] [command + args] to attempt to run the specified command in an elevated 
context.  
Cobalt Strike separates command elevator exploits and session-yielding exploits because some 
attacks are a natural opportunity to spawn a session. Other attacks yield a “run this command” 
primitive. Spawning a session from a “run this command” primitive puts a lot of weaponization 
decisions (not always favorable) in the hands of your tool developer. With runasadmin, it’s your 
choice to drop an executable to disk and run it, to run a PowerShell one-liner, or to weaken the 
target in some way. 
If you’d like to use a PowerShell one-liner to spawn a session, go to [session] -> Access -> One-
liner. This dialog will setup a localhost-only webserver within your Beacon session to host a 
payload stage and return a PowerShell command to download and run this payload stage. This 
webserver is one-use only. Once it’s connected to once, it will clean itself up and stop serving 
your payload. If you run a TCP or SMB Beacon with this tool, you will need to use connect or 
link to assume control of the payload manually. Also, be aware that if you try to use an x64 
payload—this will fail if the x86 PowerShell is in your $PATH. 
Figure 38. PowerShell One-liner 
Cobalt Strike does not have many built-in elevate options. Exploit development is not a focus of 
the work at Strategic Cyber LLC. It is easy to integrate privilege escalation exploits via Cobalt 
Strike’s Aggressor Script programming language though. To see what this looks like, download 
the Elevate Kit. The Elevate Kit is an Aggressor Script that integrates several open source 
privilege escalation exploits into Cobalt Strike. https://github.com/rsmudge/ElevateKit 
www.cobaltstrike.com/
/
53/
Elevate with Known Credentials 
Use runas [DOMAIN\user] [password] [command] to run a command as another user using 
their credentials. The runas command will not return any output. You may use runas from a non-
privileged context though. 
Use spawnas [DOMAIN\user] [password] [listener] to spawn a session as another user using 
their credentials. This command spawns a temporary process and injects your payload stage into 
it. You may also go to [beacon] -> Access -> Spawn As to run this command as well. 
With both of these commands, be aware that credentials for a non-SID 500 account will spawn a 
payload in a medium integrity context. You will need to use Bypass UAC to elevate to a high 
integrity context. Also, be aware, that you should run these commands from a working folder 
that the specified account can read.  
Get SYSTEM 
Use getsystem to impersonate a token for the SYSTEM account. This level of access may allow 
you to perform privileged actions that are not possible as an Administrator user. 
Another way to get SYSTEM is to create a service that runs a payload. The elevate svc-exe 
[listener] command does this. It will drop an executable that runs a payload, create a service to 
run it, assume control of the payload, and cleanup the service and executable. 
UAC Bypass 
Microsoft introduced User Account Control (UAC) in Windows Vista and refined it in Windows 
7. UAC works a lot like sudo in UNIX. Day-to-day a user works with normal privileges. When 
the user needs to perform a privileged action—the system asks if they would like to elevate their 
rights.  
Cobalt Strike ships with a few UAC bypass attacks. These attacks will not work if the current 
user is not an Administrator. To check if the current user is in the Administrators group, use run 
whoami /groups. 
elevate uac-token-duplication [listener] will spawn a temporary process with elevated rights 
and inject a payload stage into it. This attack uses a UAC-loophole that allows a non-elevated 
process to launch an arbitrary process with a token stolen from an elevated process. This 
loophole requires the attack to remove several rights assigned to the elevated token. The abilities 
of your new session will reflect these restricted rights. If Always Notify is at its highest setting, 
this attack requires that an elevated process is already running in the current desktop session (as 
the same user). This attack works on Windows 7 and Windows 10 prior to the November 2018 
update. 
runasadmin uac-token-duplication [command] is the same attack described above, but this 
variant runs a command of your choosing in an elevated context. 
runasadmin uac-cmstplua [command] will attempt to bypass UAC and run a command in an 
elevated context. This attack relies on a COM object that automatically elevates from certain 
process contexts (Microsoft signed, lives in c:\windows\*). 
www.cobaltstrike.com/
/
54/
Privileges 
Type getprivs to enable the privileges assigned to your current access token. 
7.18 Mimikatz 
Beacon integrates mimikatz. Use the mimikatz command to pass any command to mimikatz’s 
command dispatcher. For example, mimikatz standard::coffee will give you a cup of coffee. 
Beacon will take care to inject a mimikatz instance that matches the native architecture of your 
target. 
Some mimikatz commands must run as SYSTEM to work. Prefix a command with a ! to force 
mimikatz to elevate to SYSTEM before it runs your command. For example, mimikatz 
!lsa::cache will recover salted password hashes cached by the system. 
Once in awhile, you may need to run a mimikatz command with Beacon’s current access token. 
Prefix a command with a @ to force mimikatz to impersonate Beacon’s current access token. For 
example, mimikatz @lsadump::dcsync will run the dcsync command in mimikatz with 
Beacon’s current access token. 
7.19 Credential and Hash Harvesting 
To dump hashes, go to [beacon] -> Access -> Dump Hashes. You may also use the hashdump 
command from the Beacon console. These commands will spawn a job that injects into LSASS 
and dumps the password hashes for local users on the current system.  
The logonpasswords command will use mimikatz to recover plaintext passwords and hashes for 
users who are logged on to the current system. The logonpasswords command is the same as 
[beacon] -> Access -> Run Mimikatz. 
Use dcsync [DOMAIN.FQDN] to pull password hashes for all accounts from a domain 
controller. This technique uses Windows APIs built to sync information between domain 
controllers. It requires a domain administrator trust relationship. Beacon uses mimikatz to 
execute this technique. Use dcsync [DOMAIN.FQDN] [DOMAIN\user], if you want a specific 
password hash. 
Credentials dumped with these commands are collected by Cobalt Strike and stored in the 
credentials data model. Go to View -> Credentials to pull up the credentials on the current team 
server. 
7.20 Port Scanning 
Beacon has a built in port scanner. Use portscan [targets] [ports] [discovery method] to start the 
port scanner job. You may specify a comma-separated list of target ranges. The same goes for 
ports as well. For example, portscan 172.16.48.0/24 1-1024,8080 will scan hosts 172.16.48.0 
through 172.16.48.255 on ports 1 to 1024 and 8080. 
There are three target discovery options. The arp method uses an ARP request to discover if a 
host is alive or not. The icmp method sends an ICMP echo request to check if a target is alive. 
The none option tells the portscan tool to assume that all hosts are alive. 
www.cobaltstrike.com/
/
55/
The port scanner will run, in between Beacon check ins. When it has results to report, it will send 
them to the Beacon console. Cobalt Strike will process this information and update the targets 
model with the discovered hosts. 
7.21 Network and Host Enumeration 
Beacon’s net module provides tools to interrogate and discover targets in a Windows active 
directory network. Use the net dclist command to find the domain controller for the domain the 
target is joined to. Use the net view command to find targets on the domain the target is joined 
to. Both of these commands populate the targets model as well. The net computers command 
finds targets by querying computer account groups on a Domain Controller. 
The commands in Beacon’s net module are built on top of the Windows Network Enumeration 
APIs. Most of these commands are direct replacements for many of the built-in net commands in 
Windows. There are also a few unique capabilities here as well. For example, use net localgroup 
\\TARGET to list the groups on another system. Use net localgroup \\TARGET group name to 
list the members of a group on another system. These commands are great during lateral 
movement when you have to find who is a local admin on another system. 
Use help net to get a list of all the commands in Beacon’s net module. Use help net command 
to get help for each individual command. 
7.22 Trust Relationships  
The heart of Windows single sign-on is the access token. When a user logs onto a Windows host, 
an access token is generated. This token contains information about the user and their rights. The 
access token also holds information needed to authenticate the current user to another system on 
the network. Impersonate or generate a token and Windows will use its information to 
authenticate to a network resource for you. 
Use steal_token [process id] to impersonate a token from an existing process. If you’d like to 
see which processes are running use ps. The getuid command will print your current token. Use 
rev2self to revert back to your original token. 
If you know credentials for a user; use make_token [DOMAIN\user] [password] to generate a 
token that passes these credentials. This token is a copy of your current token with modified 
single sign-on information. It will show your current username. This is expected behavior. 
Use mimikatz to pass-the-hash with Beacon. The Beacon command pth [DOMAIN\user] [ntlm 
hash] will create and impersonate an access token to pass the specified hash. 
Beacon’s Make Token dialog ([beacon] -> Access -> Make Token) is a front-end for these 
commands. It will present the contents of the credential model and it will use the right command 
to turn the selected credential entry into an access token. 
Kerberos Tickets 
Use kerberos_ticket_use [/path/to/ticket] to inject a Kerberos ticket into the current session. 
This will allow Beacon to interact with remote systems using the rights in this ticket. Try this 
with a Golden Ticket generated by mimikatz 2.0. 
www.cobaltstrike.com/
/
56/
Use kerberos_ticket_purge to clear any kerberos tickets associated with your session. 
7.23 Lateral Movement 
Once you have a token for a domain admin or a domain user who is a local admin on a target, 
you may abuse this trust relationship to get control of the target. Cobalt Strike’s Beacon has 
several built-in options for lateral movement. 
Type jump to list lateral movement options registered with Cobalt Strike. Run jump [module] 
[target] [listener] to attempt to run a payload on a remote target. 
Jump Module 
Arch 
   Description 
psexec 
x86 
Use a service to run a Service EXE artifact 
psexec64 
x64 
Use a service to run a Service EXE artifact 
psexec_psh 
x86 
Use a service to run a PowerShell one-liner 
winrm 
x86 
Run a PowerShell script via WinRM 
winrm64 
x64 
Run a PowerShell script via WinRM 
Run remote-exec, by itself, to list remote execution modules registered with Cobalt Strike. Use 
remote-exec [module] [target] [command + args] to attempt to run the specified command on 