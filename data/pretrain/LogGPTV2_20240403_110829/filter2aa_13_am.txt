授权页面如图9-3所示。
图9-3 通知栏管理授权页面
存在的风险：与辅助功能一样，申请这个权限之后用户设备的通知栏消息就会被它接管，如果通知栏有敏感消息的话，对用户来说是很危险的。
9.4 VPN开发权限
Android 4.0之后增加了VPN功能，开发者可以使用VpnService来开发VPN相关的功能。在使用的过程中，需要申请权限，如下所示：
在代码中直接打开相应的Intent跳转到授权页面：
授权页面如图9-4所示。
图9-4 VPN授权页面
开发场景：Android中VPN软件开发，可以免root管理设备中的应用联网。
存在的风险：如果申请了这个权限，就代表这个设备的网络访问消息会被申请者接管，网络访问消息的重要性不言而喻。
9.5 本章小结
本章主要介绍了Android中一些常用的特殊权限，现在的开发者可以利用这些权限开发出体验很好的产品，但是也会有一些潜在的风险。所以在开发过程中如果用到这几个权限的话，还是需要慎重。设备使用者在遇到这些权限安全提示的时候也要额外警惕！
第10章 Android中的run-as命令
Android中有一个run-as命令，这个命令的作用是可以用root身份运行命令，但是它有一个限制，就是必须携带指定应用包名参数，而且这个应用是debug模式的，也就是说，如果在开发中想看自己应用的沙盒数据，在设备没有root的情况下，可以使用这个命令进行查看。本章将分析这个命令及使用方法。
10.1 命令分析和使用
以前想看一个应用的沙盒数据（/data/data/xxx/目录内容），一般都是选择root之后去查看对应的数据库、XML等数据。但是如果没有root了也想看这些数据，怎么办呢？Android中提供了一个命令，那就是run-as，不过这个命令有一个缺陷，就是只有debug模式应用才能被查看。
命令的用法很简单：run-as[packagename]。其中packagename就是想查看的应用的包名，运行命令之后，就直接进入指定应用的目录：/data/data/packagename/。
现在稍微了解了Android中有这个命令可以查看debug应用的沙盒数据，但直接运行会遇到问题，运行结果如下所示：
为什么这个命令会报错呢？遇到这个情况有两种方式解决：一种是网上查资料，一种是自己去看源代码。为了问题解决的高效性，就去看源码吧。Android中的命令一般都在/system/bin和/system/xbin目录下，这些命令的源码都是放在Android源码目录/system/core/下，如图10-1所示。
图10-1 run-as命令源码的位置
run-as的源码如图10-2所示。
图10-2 run-as源码分析（一）
看到这里，原来run-as命令运行是有很多限制的。下面分别介绍。
第一个限制：运行的uid限制
运行命令的用户id只能是shell和root用户。下面可以验证一下，使用system的uid运行命令：
这里用于测试的设备已经root了。看到使用su可以随意设定uid，这里将uid变成了system，再运行run-as发现报错了，符合预期吧？
第二个限制：应用的安装必须合法
这里再仔细看看get_package_info这个函数的源码，它位于run-as.c同目录下的package.c，如图10-3所示。
这里通过map_file函数来获取PACKAGES_LIST_FILE文件的buffer内容，再来看一下PACKAGES_LIST_FILE的定义：
图10-3 run-as源码分析（二）
导出这个文件，查看内容：
这个文件记录所有安装应用的信息：包名，用户id（uid），是否为debug模式，对应的数据目录，是否是release版，组id（gid）。这里发现demo.systemapi应用是debug模式的。一般正式App都是非debug模式。
通过读取这些信息就可以构造出一个PackageInfo了，如图10-4所示。
图10-4 run-as源码分析（三）
注意，这里看到了packages.list文件是存储安装包的简略信息，和它同一目录下还有一个重要文件packages.xml，可以导出来看看，如下所示：
这里记录了安装应用的详细信息，还有一个重要信息就是应用的安装来源，有些App可以做到这点就是通过这个信息来获取的，还有签名信息、权限等。
当然可以使用Android中的dumpsys packageinfo命令来查看指定应用的详细信息，如下所示：
第三个限制：应用的uid必须合法
对于查看的应用的uid也是有相应限制的，如下所示：
这里AID_APP的定义在Android源码目录\system\core\include\private\android_filesystem_config.h下。
定义了一些uid信息，例如：
·AID_ROOT对应的是root用户，uid=0。
·AID_SYSTEM对应的是system用户，uid=1000。
·AID_SHELL对应的是shell用户，uid=2000。
可以看到，root用户的权限＞system用户的权限＞shell用户的权限＞第三方应用的权限。
不过这里所说的权限只是针对一些情况，不是全部。Android中有些API会做uid限制，即使用反射机制也是访问失败的，比如，一个API限制只能uid=1000的用户即system用户才能调用，那么这时你是root用户也是没办法的，不过可以使用su进行降权。
这三个用户的id最好记住，算是常识，如下代码有详细定义：
再往下看，第三方应用uid的定义如下所示：
这里的AID_APP是10000，安装的应用的uid都是从10000开始的，所以uid都是大于10000的，代码中做了一层uid的合法性判断限制。
注意：一般查看应用的uid时，得到最后的整数+10000就是应用的uid，比如demo.systemapi的uid就是：10000+100=10100。
如下代码可以获取到应用的uid：
这可以验证，查看上面提到的packages.list文件中的信息，如下所示：
第四个限制：应用是否为debug模式
之前说过，run-as有一个最大的限制就是查看应用的数据时，应用必须是debug模式的，所以在开发程序的时候千万要保证一点，就是debug包不能外泄，不然数据就等于外泄了。
言归正传，源码看得差不多了，看一下问题，在运行run-as的时候遇到的问题如下所示：
问题就出在如下代码上：
再看get_package_info函数：
再看map_file函数：
终于找到原因了，原来是/data/system/packages.list文件的读取权限是AID_SYSTEM，查看一下如下代码：
问题找到了，尝试使用su升级权限再查看一下，如下所示：
可惜的是，这样明显是不行的，原因很简单，run-as有限制，本身这个命令只能是root和shell用户才可以访问。这里也可以看到，shell用户也不比system用户权限低，所以要视情况而定来看root、system、shell这三个用户的权限范围。
那么再使用root用户去尝试一下，如下所示：
这是可以的，因为run-as的权限验证通过了。
从上面的几个限制可以看到，首先root的uid限制可以放行，然后是debug模式可以放行，packages.list文件的访问权限是system，但是这对于root用户来说没有限制，因为在文件的读取权限上root可以操作任何文件，demo.systemapi的uid可以放行。
注意：这里运行完run-as命令之后，进入/data/data/demo.systemapi目录下，看到变成了sh命令，#变成$了，这其实是run-as在启动一个shell程序，可以查看run-as的源码：
到这里就分析完了为什么运行run-as命令失败，失败的原因也找到了，解决的办法也有了，但是还是需要root，这貌似和开始说的有点出入，因为本身run-as命令就是可以在非root设备上查看debug模式下应用的沙盒数据，那现在root了，还有什么意义呢？其实不是的，run-as命令很特殊。找到一个没有root的设备，然后运行run-as命令，结果如下所示：
也是可以运行成功的，而且这个设备没有root。但是在上面已经root的设备上运行run-as却报错，为什么呢？下面就开始本章的主要内容，即为何没有root，run-as命令还能运行成功，进入指定的应用目录下。
是这样的：开始的时候为了讲解run-as源码和一些前提知识，做了一件事，就是修改了run-as命令的权限，如下所示：
查看run-as命令的本来权限是：
然后修改了它的权限chmod 0755 run-as，变成
这个操作是为了开始本章内容。
下面把run-as权限改回原来的值，然后再运行run-as，如下所示：
10.2 Linux中的setuid和setgid概念
那么问题来了，为何改了一个权限，就会导致run-as运行报错了呢？修改的命令是：
修改之后的权限是：
和修改之前只有一个区别，就是x变成了s，是怎么回事呢？
这就引出了本节的话题：关于Linux中的setuid和setgid问题。Linux中的setuid和setgid是什么呢？Android中有哪些场景会用到它们呢？下面来一一讲解。
1.Linux中的setuid和setgid概念
Linux/Unix下的可执行文件一旦被设置了setuid标记，使用该可执行程序的进程就将拥有该执行文件的所有者权限。普通用户执行这个命令，可使自己升级为root权限。
设置setuid的方法是：chmod 4755 program或chmod u+s program（setuid只对文件有效）。
设置setgid的方法是：chmod 2755 dir或chmod g+s dir（setgid只对目录有效）。
同时设置setuid、setgid的方法是：chmod 6755 program被设置粘着位，chmod 1777 file或chmod o+t file（粘着位只对文件有效）当一个目录被设置为“粘着位”（用chmod a+t），则该目录下的文件只能由以下人员删除：
·超级管理员
·该目录的所有者
·该文件的所有者
也就是说，即便该目录是任何人都可以写，但也只有文件的属主才可以删除文件。那么如何使用chmod命令修改文件的权限，和这两个函数有什么关系呢？修改文件权限的命令是chmod，后面跟字母组合或者数字组合。
注意：Android中的toolbox对chmod命令做了限制，chmod只能使用数字代替字母来修改文件的权限，看下面例子：
这里使用字母组合方式来修改文件权限报错了：Bad mode，因为Google自带的toolbox中chmod语法不支持+x、-x。
2.chmod命令的用法和参数详解
知道Linux中的文件权限构造之后，可以使用ll命令查看一个文件，格式类似下面这样：
下面解析一下这个格式所表示的意思。
这种表示方法一共有10位：
第9位表示文件类型，可以为p、d、l、s、c、b和-：
·p表示命名管道文件
·d表示目录文件
·l表示符号连接文件
·s表示socket文件
·c表示字符设备文件
·b表示块设备文件
·-表示普通文件
第8～6位、5～3位、2～0位分别表示文件所有者的权限、同组用户的权限、其他用户的权限，其形式为rwx：
·r表示可读，可以读出文件的内容，对应的数字是4。
·w表示可写，可以修改文件的内容，对应的数字是2。
·x表示可执行，可运行这个程序，对应的数字是1。
那么，可以知道rwx的组合就是7=1+2+4。