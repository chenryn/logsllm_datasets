### 4. Scheduling and Response Mechanism

As illustrated in Figure 3(d), at this stage, node A will still send a reply message to node E, which includes a reasonably long sleep time, such as 2 seconds.

Node A will then schedule the remaining two gangs as usual, with the only exception being that the round duration is now set to 600 seconds. Consequently, gang {B, C} will wake up at times 3000, 3600, 4200, etc., while gang {F, G} will wake up at times 2700, 3300, 3900, etc. This scheduling ensures that node A continues to receive probes every 300 seconds.

### 5. Performance Evaluation

In this section, we first define a simplified sensor failure model, followed by an overview of the simulation model and setup. We then evaluate R-Sentry's performance against PEAS in terms of scalability, energy efficiency, service availability, coverage recoverability, and fault tolerance.

#### 5.1. Sensor Failure Model

To model the reality that random node failures are common in sensor networks, we introduce a catastrophic failure model into our simulations. This coarse-grained model assumes that a certain percentage of live (but not necessarily active) sensor nodes "die" due to external catastrophic events, such as natural disasters. By "dying," we mean that the node ceases to function entirely as an electronic device, even though it is possible that not all components within the node are affected by the event.

The failure model is characterized by two parameters:
1. **Failure Period (fp)**: The mean time between consecutive external catastrophic events, with intervals following an exponential distribution.
2. **Failure Percentage (f%)**: The mean percentage of live nodes affected by a particular event. The actual percentage of affected nodes during a catastrophic event is a random number between 0 and 2f%.

#### 5.2. Overview of PEAS

In this study, we compare R-Sentry's performance with PEAS [16], a well-recognized fault-tolerant energy-conserving protocol for sensor networks. Before presenting the detailed simulation results, we provide a brief description of PEAS.

Like R-Sentry, PEAS assumes that at any given time, only a subset of nodes remain active, while the others go to sleep and periodically wake up to probe the health of the active node(s). However, PEAS allows redundant nodes to independently wake up without coordinating their schedules, resulting in a coarser granularity of fault tolerance. PEAS ensures that there is at least one active node within the probing range of every redundant node.

An active node controls the wake-up frequencies of the redundant nodes using the parameter \(\lambda_d\), the desired probing rate. Upon receiving a probing message, the active node replies with \(\lambda_d\) and the observed actual probing rate \(\beta\). The probing node then calculates its new probing rate as \(\lambda_{new} = \lambda_{old} \cdot \frac{\lambda_d}{\beta}\). The probing node generates its new sleep interval \(t_s\) following the probability density function \(f(t_s) = \lambda_{new} e^{-\lambda_{new} t_s}\).

We note that in PEAS, the parameter \(\frac{1}{\lambda_d}\) is similar to \(\tau\) in R-Sentry, both denoting the desired recovery time from the application's perspective. We use these notations interchangeably when presenting the results.

#### 5.3. Simulation Model and Settings

We have implemented both R-Sentry and PEAS on our own simulator, USenSim, a discrete event-driven simulator designed for large-scale sensor networks. To achieve the network scale we envision, i.e., with thousands of nodes, USenSim assumes a constant transmission delay between nodes and serialized transmissions among nodes competing for the channel, similar to the approach in [11]. We believe this simplified network model does not hinder the validation and effectiveness of our algorithm, as our work is orthogonal to the underlying layers.

Unless specified, the simulation setup involves 600 sensor nodes uniformly randomly deployed in a 50x50m² square, with each grid being a 1x1m² square. The initial energy of a sensor node is uniformly distributed between 50 and 60 Joules, allowing the node to function for approximately 4000 to 5000 seconds in idle listening mode. Every 50 seconds, each active node transmits a packet containing collected data to the sink, located at the center of the field with a persistent power supply. Neighbor nodes within a 15m distance constitute the Sensing Range Set (SRS). Due to high redundancy, a gang size of 1 is sufficient in the simulations.

For PEAS-specific parameters, we tested various values and chose the following settings, which produced the best results: probing range \(R_p = 3m\), desired probing rate \(\lambda_d = 0.02\), initial probing rate \(\lambda_s = 0.02\), and \(k = 32\). We emphasize that we used a small probing range for PEAS to ensure all grid points are covered, as PEAS does not explicitly require full coverage. The network/energy parameters used in our simulations are summarized in Table 4, and these values were taken from PEAS [16].

#### 5.4. Performance Metrics

- **Coverage Ratio**: The percentage of grid points covered at any given time. Both R-Sentry and PEAS aim to maintain a high coverage ratio throughout their lifetimes.
- **Network Lifetime (\(\alpha\))**: The duration the network lasts until the coverage ratio drops below \(\alpha\) and never recovers. This metric measures the protocol’s ability to preserve coverage and recover from node failures.
- **Coverage Loss Time**: The duration from when a grid point loses coverage to when it recovers. The average coverage loss time reflects how quickly a failed active node can be replaced by redundant nodes.
- **Packet Delivery Ratio**: The ratio of packets received by the sink to the number of packets sent out by the active nodes over a specific time window. This metric indicates the network's connectivity.

#### 5.5. Performance Results

**Service Availability**: The primary goal of this study is to provide uninterrupted services throughout the sensor network's lifetime. Figures 4(a) and 4(b) show the evolution of the coverage ratio over time for both schemes. In this experiment, \(\tau = 50\) seconds for both schemes. We observe that R-Sentry maintains a 95% coverage ratio until 2.5 x 10³ seconds, while PEAS's coverage ratio drops below 90% after 2.5 x 10³ seconds. This is because R-Sentry can quickly replace a failed active node with a gang, whereas PEAS does not guarantee that an awake redundant node can fully replace the active node.

This hypothesis is further confirmed by examining the time series of the percentage of active nodes in both cases. R-Sentry maintains a steady number of active nodes, ensuring a high coverage ratio, while in PEAS, the number of active nodes decreases over time due to oversleeping. The drop in the number of active nodes in PEAS around 5000 seconds is attributed to the failure of most initial active nodes. We did not observe a similar drop in R-Sentry, as it can quickly recover from failures.

**Algorithm Controllability**: Controllability is a valuable feature, as it allows the performance of an algorithm to be easily tuned to match application requirements. In this set of experiments, we varied \(\tau\) and collected the corresponding average coverage loss time, as shown in Figure 4(c). R-Sentry demonstrates good controllability: for any given \(\tau\) value, the resulting average coverage loss time is always below \(\tau\) and often slightly higher than \(\tau/2\). PEAS, however, fails to achieve this, as the delivered coverage loss time does not correlate well with the desirable coverage loss time.

Thanks to its capability to maintain a high coverage ratio and low coverage loss time, R-Sentry can effectively provide reliable and continuous service in sensor networks.