File: os-example-2.py
import os
import stat, time
infile = "samples/sample.jpg"
outfile = "out.jpg"
# copy contents
fi = open(infile, "rb")
fo = open(outfile, "wb")
while 1:
s = fi.read(10000)
if not s:
break fo.write(s)
fi.close() fo.close()
# copy mode
and timestamp
st =
os.stat(infile) os.chmod(outfile, stat.S_IMODE(st[stat.ST_MODE]))
os.utime(outfile, (st[stat.ST_ATIME], st[stat.ST_MTIME]))
print "original",
" =
>" print "mode",
oct(stat.S_IMODE(st[stat.ST_MODE]))
print
"atime",
time.ctime(st[stat.ST_ATIME])
print "mtime", time.ctime(st[stat.ST_MTIME]) print "copy",
" =
>" st=
os.stat(outfile)
print "mode",
oct(stat.S_IMODE(st[stat.ST_MODE]))
print
"atime", time.ctime(st[stat.ST_ATIME]) print
"mtime", time.ctime(st[stat.ST_MTIME]) 
original =>
mode 0666
atime Thu Oct 14 15:15:50 1999
mtime Mon Nov 13 15:42:36 1995
copy =
>
mode 0666
atime Thu Oct 14 15:15:50 1999
mtime Mon Nov 13 15:42:36 1995
1.4.4. 处理进程
system 函数在当前进程下执行一个新命令, 并等待它完成, 如 Example 1-34
所示.
1.4.4.1. Example 1-34. 使用 os 执行操作系统命令
File: os-example-8.py
import os
if os.name == "nt":
command =
"dir" else:
command = "ls
-l"
os.system(command) 
-rwxrw-r-- 1 effbot effbot 76 Oct 9 14:17 README
-rwxrw-r-- 1 effbot effbot 1727 Oct 7 19:00
SimpleAsyncHTTP.py
-rwxrw-r-- 1 effbot effbot 314 Oct 7 20:29 aifc-example-1.py
-rwxrw-r-- 1 effbot effbot 259 Oct 7 20:38
anydbm-example-1.py
...
命令通过操作系统的标准 shell 执行, 并返回 shell 的退出状态. 需要注意
的是在 Windows 95/98 下, shell 通常是 command.com , 它的推出状态总是
0.
由于 11os.system11 直接将命令传递给 shell , 所以如果你不检查传入参数
的时候会很危险 (比如命令 os.system("viewer %s" % file) , 将 file 变量
设置为 "sample.jpg; rm -rf $HOME" .... ). 如果不确定参数的安全性, 那么
最好使用 exec 或 spawn 代替(稍后介绍).
exec 函数会使用新进程替换当前进程(或者说是"转到进程"). 在 Example
1-35 中, 字符串 "goodbye" 永远不会被打印.
1.4.4.2. Example 1-35. 使用 os 模块启动新进程
File: os-exec-example-1.py
import os
import sys
program = "python"
arguments = ["hello.py"]
print os.execvp(program, (program,) + tuple(arguments))
print "goodbye"
hello again, and welcome to the show
Python 提供了很多表现不同的 exec 函数. Example 1-35 使用的是 execvp 函
数, 它会从标准路径搜索执行程序, 把第二个参数(元组)作为单独的参数传递
给程序, 并使用当前的环境变量来运行程序. 其他七个同类型函数请参阅
Python Library Reference .
在 Unix 环境下, 你可以通过组合使用 exec , fork 以及 wait 函数来从当前
程序调用另一个程序, 如 Example 1-36 所示. fork 函数复制当前进程, wait
函数会等待一个子进程执行结束.
1.4.4.3. Example 1-36. 使用 os 模块调用其他程序 (Unix)
File: os-exec-example-2.py
import os
import sys
def run(program, *args):
pid = os.fork()
if not pid:
os.execvp(program, (program,) + args)
return os.wait()[0]
run("python", "hello.py")
print "goodbye"
hello again, and welcome to the show
goodbye
fork 函数在子进程返回中返回 0 (这个进程首先从 fork 返回值), 在父进程
中返回一个非 0 的进程标识符(子进程的 PID ). 也就是说, 只有当我们处于
子进程的时候 "not pid " 才为真.
fork 和 wait 函数在 Windows 上是不可用的, 但是你可以使用 spawn 函数,
如 Example 1-37 所示. 不过, spawn 不会沿着路径搜索可执行文件, 你必须自
己处理好这些.
1.4.4.4. Example 1-37. 使用 os 模块调用其他程序 (Windows)
File: os-spawn-example-1.py
import os
import string
def run(program, *args):
# find executable
for path in string.split(os.environ["PATH"], os.pathsep):
file = os.path.join(path, program) + ".exe"
try:
return os.spawnv(os.P_WAIT, file, (file,) + args)
except os.error:
pass
raise os.error, "cannot find executable"
run("python", "hello.py")
print "goodbye"
hello again, and welcome to the show
goodbye
spawn 函数还可用于在后台运行一个程序. Example 1-38 给 run 函数添加了一
个可选的 mode 参数; 当设置为 os.P_NOWAIT 时, 这个脚本不会等待子程序结
束, 默认值 os.P_WAIT 时 spawn 会等待子进程结束.
其它的标志常量还有 os.P_OVERLAY ,它使得 spawn 的行为和 exec 类似, 以
及 os.P_DETACH , 它在后台运行子进程, 与当前控制台和键盘焦点隔离.
1.4.4.5. Example 1-38. 使用 os 模块在后台执行程序 (Windows)
File: os-spawn-example-2.py
import os
import string
def run(program, *args, **kw):
# find executable
mode = kw.get("mode", os.P_WAIT)
for path in string.split(os.environ["PATH"], os.pathsep):
file = os.path.join(path, program) + ".exe"
try:
return os.spawnv(mode, file, (file,) + args)
except os.error:
pass
raise os.error, "cannot find executable"
run("python", "hello.py", mode=os.P_NOWAIT)
print "goodbye"
goodbye
hello again, and welcome to the show
Example 1-39 提供了一个在 Unix 和 Windows 平台上通用的 spawn 方法.
1.4.4.6. Example 1-39. 使用 spawn 或 fork/exec 调用其他程序
File: os-spawn-example-3.py
import os
import string
if os.name in ("nt", "dos"):
exefile = ".exe"
else:
exefile = ""
def spawn(program, *args):
try:
# possible 2.0 shortcut!
return os.spawnvp(program, (program,) + args)
except AttributeError:
pass
try:
spawnv =
os.spawnv except
AttributeError: # assume it's unix
pid =
os.fork() if
not pid: os.execvp(program,
(program,)
+ args) return os.wait()[0]
else: # got spawnv but
no spawnp:
go
look
for an
executable for
path in string.split(os.environ["PATH"], os.pathsep):
file =
os.path.join(path, program) +
exefile try: return spawnv(os.P_WAIT, file,
(file,)
+ args) except os.error: pass raise
IOError, "cannot
find
executable" # # try
it out!
spawn("python", "hello.py")
print "goodbye" 
hello again, and welcome to the show
goodbye
Example 1-39 首先尝试调用 spawnvp 函数. 如果该函数不存在 (一些版本/平
台没有这个函数), 它将继续查找一个名为 spawnv 的函数并且开始查找程序路
径. 作为最后的选择, 它会调用 exec 和 fork 函数完成工作.
1.4.5. 处理守护进程(Daemon Processes)
Unix 系统中, 你可以使用 fork 函数把当前进程转入后台(一个"守护者
/daemon"). 一般来说, 你需要派生(fork off)一个当前进程的副本, 然后终止
原进程, 如 Example 1-40 所示.
1.4.5.1. Example 1-40. 使用 os 模块使脚本作为守护执行 (Unix)
File: os-example-14.py
import os
import time
pid =
os.fork() if
pid: os._exit(0)
# kill original print
"daemon started" time.sleep(10)
print
"daemon terminated" 
需要创建一个真正的后台程序稍微有点复杂, 首先调用 setpgrp 函数创建一个
"进程组首领/process group leader". 否则, 向无关进程组发送的信号(同时)
会引起守护进程的问题:
os.setpgrp()
为了确保守护进程创建的文件能够获得程序指定的 mode flags(权限模式标
记?), 最好删除 user mode mask:
os.umask(0)
然后, 你应该重定向 stdout/stderr 文件, 而不能只是简单地关闭它们(如果
你的程序需要 stdout 或 stderr 写入内容的时候, 可能会出现意想不到的问
题).
class NullDevice:
def write(self, s):
pass
sys.stdin.close()
sys.stdout =
NullDevice()
sys.stderr =
NullDevice()
换言之, 由于 Python 的 print 和 C 中的 printf/fprintf 在设备(device)
没有连接后不会关闭你的程序, 此时守护进程中的 sys.stdout.write() 会抛
出一个 IOError 异常, 而你的程序依然在后台运行的很好....
另外, 先前例子中的 _exit 函数会终止当前进程. 而 sys.exit 不同, 如果调
用者(caller) 捕获了 SystemExit 异常, 程序仍然会继续执行. 如 Example
1-41 所示.
1.4.5.2. Example 1-41. 使用 os 模块终止当前进程
File: os-example-9.py
import os
import sys
try:
sys.exit(1)
except SystemExit, value:
print "caught exit(%s)" % value
try:
os._exit(2)
except SystemExit, value:
print "caught exit(%s)" % value
print "bye!"
caught exit(1)
1.5. os.path 模块
os.path 模块包含了各种处理长文件名(路径名)的函数. 先导入 (import) os
模块, 然后就可以以 os.path 访问该模块.
1.5.1. 处理文件名
os.path 模块包含了许多与平台无关的处理长文件名的函数. 也就是说, 你不
需要处理前后斜杠, 冒号等. 我们可以看看 Example 1-42 中的样例代码.
1.5.1.1. Example 1-42. 使用 os.path 模块处理文件名
File: os-path-example-1.py
import os
filename = "my/little/pony"
print "using", os.name, "..."
print "split", "=>", os.path.split(filename)
print "splitext", "=>", os.path.splitext(filename)
print "dirname", "=>", os.path.dirname(filename)
print "basename", "=>", os.path.basename(filename)
print "join",
" =
>", os.path.join(os.path.dirname(filename),
os.path.basename(filename))
using nt ...
split => ('my/little', 'pony')
splitext => ('my/little/pony', '')
dirname = > my/little
basename =
> pony
join =
> my/little\pony
注意这里的 split 只分割出最后一项(不带斜杠).
os.path 模块中还有许多函数允许你简单快速地获知文件名的一些特征，如
Example 1-43 所示。
1.5.1.2. Example 1-43. 使用 os.path 模块检查文件名的特征
File: os-path-example-2.py
import os
FILES = (
os.curdir,
"/",
"file",
"/file",
"samples",
"samples/sample.jpg",
"directory/file",
"../directory/file",
"/directory/file"
)
for file in FILES:
print file, "=>",
if os.path.exists(file):
print "EXISTS",
if os.path.isabs(file):
print "ISABS",
if os.path.isdir(file):
print "ISDIR",
if os.path.isfile(file):
print "ISFILE",
if os.path.islink(file):
print "ISLINK",
if os.path.ismount(file):
print "ISMOUNT",
print
. => EXISTS ISDIR
/ => EXISTS ISABS ISDIR ISMOUNT
file =>
/file => ISABS
samples => EXISTS ISDIR
samples/sample.jpg => EXISTS ISFILE
directory/file =>
../directory/file =>
/directory/file => ISABS
expanduser 函数以与大部分Unix shell相同的方式处理用户名快捷符号(~, 不