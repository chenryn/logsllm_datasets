    int bpf_delete_elem(int fd, const void* key)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
        };
        return bpf(BPF_MAP_DELETE_ELEM, &attr, sizeof(attr));
    }
成功的话返回0, 如果对应元素不存在那么会返回-1, 并且`errno`会被设置为`ENOENT`
###  BPF_MAP_GET_NEXT_KEY
`BPF_MAP_GET_NEXT_KEY`命令用于在fd引用的映射中根据`key`查找对应元素, 并设置`next_key`指向下一个元素的键
    int bpf_get_next_key(int fd, const void* key, void* next_key)
    {
        union bpf_attr attr = {
            .map_fd = fd,
            .key = ptr_to_u64(key),
            .next_key = ptr_to_u64(next_key),
        };
        return bpf(BPF_MAP_GET_NEXT_KEY, &attr, sizeof(attr));
    }
如果`key`被找到了, 那么会返回0并设置指针`netx_pointer`指向下一个元素的键. 如果`key`没找到,
会返回0并设置`next_pointer`指向映射中第一个元素的键. 如果`key`就是最后一个元素呀了, 那么会返回-1,
并设置`errno`为`ENOENT`. `errno`其他可能的值为`ENOMEM, EFAULT, EPERM, EINVAL`.
这个方法可用于迭代map中所有的元素
###  close(map_fd)
删除`map_fd`引用的映射. 当创建映射的用户进程退出时, 所有的映射都会被自动删除
## eBPF映射的种类
支持下列映射种类
###  BPF_MAP_TYPE_HASH
Hash-table映射有如下特征
  * 映射由用户空间的程序创建和删除. 用户空间的程序和eBPF程序都可以进行查找, 更新, 删除操作
  * 内核负责键值对的分配和释放工作
  * 当到达`max_entries`数量极限时, 助手函数`map_update_elem()`无法插入新的元素, (这保证了eBPF不会耗尽内存)
  * `map_update_elem()`会自动替换已经存在的元素
Hash-table映射对于查找的速度优化过
###  BPF_MAP_TYPE_ARRAY
数组映射有如下特征
  * 为了最快的超找速度优化过. 在未来, 验证器或者JIT编译器可能会识别使用常量键的`lookup()`操作并将其有优化为常量指针. 既然指针和`value_size`在eBPF生存期间都是常数, 也有可能把一个非常量键优化为直接的指针运算(类似于C数组中的基址寻址). 换而言之, `array_map_lookup_elem()`可能会被验证器或者JIT编译器内联, 同时保留从用户空间的并发访问能力
  * 在初始化时, 所有的数组元素都被预先分配并0初始化
  * 映射的键就是数组的下标, 必须是4字节的
  * `map_delete_elem()`以`EINVAL`错误失败,因为数组中的元素不能被删除
  * `map_update_elem()`会以非原子的方式替换一个元素. 想要原子更新的话应该使用hash-table映射. 但是有一个可用于数组的特殊情况: 内建的原子函数`__sync_fetch_and_add()`可用于32或者64位的原子计数器上. 例如: 如果值代表一个单独的计数器, 可以被用在整个值自身, 如果一个结构体包含多个计数器,此函数可以被用在单独的计数器上. 这对于事件的聚合和统计来说十分有用
数组映射有如下用途
  * 作为全局的eBPF变量: 只有一个元素, 键为0的数组. value是全局变量的集合, eBPF程序可使用这些变量保存时间的状态
  * 聚合追踪事件到一组固定的桶中
  * 统计网络事件, 例如数据包的数量和大小
###  BPF_MAP_TYPE_PROG_ARRAY
一个程序数组映射是一种特殊的数组映射, 其映射的值只包含引用其他eBPF程序的文件描述符.
因此`key_size`和`value_size`都必须被指定为四字节(数组映射的index为4字节, 文件描述符为4字节).
此映射助手函数`bpf_tail_call()`结合使用
这意味着一个带有程序数组映射的eBPF程序可以从kernel一侧调用`void bpf_tail_call(void *context, void
*prog_map, unsigned int index);` 因而用程序数组中一个给定程序替换自己的程序执行流.
程序数组可以被当做一种切换到其他eBPF程序的跳表(jump-table), 被调用的程序会继续使用同一个栈. 当跳转到一个新程序时,
他再也不会返回到原来的老程序
如果用给的index在程序数组中没有发现eBPF程序(因为对应槽中没有一个有效的文件描述符, 或者index越界, 或者达到32层嵌套的限制),
会继续执行当前eBPF程序. 这部分(跳转指令后面)可用于默认情况的错误处理
程序数组映射在追踪或者网络中很有用, 可用于在自己的子程序中处理单个系统调用或者协议(原eBPF作为任务分配器, 根据每种情况调用对应的eBPF子程序).
此方法有助于性能改善, 并有可能突破单个eBPF程序的指令数量限制. 在动态环境下,
一个用户空间的守护进程可能在运行时间用更新版本的程序自动替换单个子程序, 以改变整个程序的行为. 比如在全局策略改版的情况下
## 加载eBPF程序
`BPF_PROG_LOAD`命令用于在内核中装载eBPF程序, 返回一个与eBPF程序关联的文件描述符
    char bpf_log_buf[LOG_BUF_SIZE];
    int bpf_prog_load(enum bpf_prog_type type, const struct bpf_insn* insns, int insn_cnt, const char* license)
    {
        union bpf_attr attr = {
            .prog_type = type,
            .insns = ptr_to_u64(insns),
            .insn_cnt = insn_cnt,
            .license = ptr_to_u64(license),
            .log_buf = ptr_to_u64(bpf_log_buf),
            .log_size = LOG_BUF_SIZE,
            .log_level = 1,
        };
        return bpf(BPF_PROG_LOAD, &attr, sizeof(attr));
    }
`prog_type`是下列可用程序类型之一
    enum bpf_prog_type {
        BPF_PROG_TYPE_UNSPEC, /* Reserve 0 as invalid program type */
        BPF_PROG_TYPE_SOCKET_FILTER,
        BPF_PROG_TYPE_KPROBE,
        BPF_PROG_TYPE_SCHED_CLS,
        BPF_PROG_TYPE_SCHED_ACT,
        BPF_PROG_TYPE_TRACEPOINT,
        BPF_PROG_TYPE_XDP,
        BPF_PROG_TYPE_PERF_EVENT,
        BPF_PROG_TYPE_CGROUP_SKB,
        BPF_PROG_TYPE_CGROUP_SOCK,
        BPF_PROG_TYPE_LWT_IN,
        BPF_PROG_TYPE_LWT_OUT,
        BPF_PROG_TYPE_LWT_XMIT,
        BPF_PROG_TYPE_SOCK_OPS,
        BPF_PROG_TYPE_SK_SKB,
        BPF_PROG_TYPE_CGROUP_DEVICE,
        BPF_PROG_TYPE_SK_MSG,
        BPF_PROG_TYPE_RAW_TRACEPOINT,
        BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
        BPF_PROG_TYPE_LWT_SEG6LOCAL,
        BPF_PROG_TYPE_LIRC_MODE2,
        BPF_PROG_TYPE_SK_REUSEPORT,
        BPF_PROG_TYPE_FLOW_DISSECTOR,
        /* See /usr/include/linux/bpf.h for the full list. */
    };
eBPF程序类型的细节在后面, `bpf_attr`剩余区域按照如下设置
  * `insns`是`struct bpf_insn`指令组成的数组
  * `insn_cnt`是`insns`中指令的个数
  * `license`是许可字符串, 为了与标志为`gpl_only`的助手函数匹配必须设置GPL
  * `log_buf`是一个调用者分配的缓冲区, 内核中的验证器可以在里面保存验证的log信息. 这个log信息由多行字符串组成, 目的是让程序作者明白为什么验证器认为这个程序是不安全的(相当于编译器的日志), 随着验证器的发展, 输出格式可能会改变
  * `log_size`是`log_buf`的缓冲区大小, 要是缓冲区不足以保存全部的验证器日志, 那么会返回-1, 并把`errno`设置为`ENOSPC`
  * `log_level`是验证器日志的详细级别, 00表示验证器不会提供日志, 在这种情况下`log_buf`必须是空指针, `log_size`必须是0
对返回的文件描述符调用`close()`会卸载eBPF程序
映射可以被eBPF程序访问, 并被用于在eBPF程序之间, 在eBPF与用户程序之间交换数据. 例如, eBPF程序可以处理各种时间(kprobe,
packet)并保存他们的数据到映射中, 并且用户空间的程序可以从映射中获取数据. 反过来用户空间的程序可以把映射当做一种配置机制,
用eBPF程序检查过的值填充映射, 可以根据值动态的改变程序的行为
## eBPF程序种类
eBPF程序的种类决定了能调用哪些内核助手函数. 程序的种类也决定了程序的输入-`struct
bpf_context`的格式(也就是首次运行时传递给eBPF程序的一些数据)
例如, 作为socket过滤程序一个追踪程序不一定有一组相同的助手函数(可能都有的通用助手函数). 类似的,
一个追踪程序的输入(context)是一些寄存器值的集合, 对于socket过滤器来说是一个网络数据包
对于特定类型的eBPF程序可用函数集合未来可能会增加
下列程序类型是支持的
  * `BPF_PROG_TYPE_SOCKET_FILTER`, 目前, `BPF_PROG_TYPE_SOCKET_FILTER`其可用函数集合如下 
    * `bpf_map_lookup_elem(map_fd, void *key)`: 在map_fd中寻找key
    * `bpf_map_update_elem(map_fd, void *key, void *value)`: 更新key或者value
    * `bpf_map_delete_elem(map_fd, void *key)`在map_fd中删除一个键
    * `bpf_context`参数是一个指向`struct __sk_buff`(网络数据包缓冲区)的指针
  * `BPF_PROG_TYPE_KPROBE`
  * `BPF_PROG_TYPE_SCHED_CLS`
  * `BPF_PROG_TYPE_SCHED_ACT`
## 事件
一但一个程序被加载, 他就可以附加到一个事件上. 各种内核子系统都有不同的方式去做到这一点
从linux3.19开始, 如下调用会把程序`prog_fd`附加到先前通过socket()创建的套接字`sockfd`上
    setsockopt(sockfd, SOL_SOCKET, SO_ATTACH_BPF, &prog_fd, sizeof(prog_fd));
自从linux4.1开始, 如下调用会把`prog_fd`指向的eBPF程序附加到一个perf事件描述符`event_fd`,
这个描述符先前由`perf_event_open()`创建
    ioctl(event_fd, PERF_EVENT_IOC_SET_BPF, prog_fd);
## 返回值
对于一次成功的调用, 返回值取决于操作
  * `BPF_MAP_CREATE`: 返回与eBPF映射关联的文件描述符
  * `BPF_PROG_LOAD`: 返回与eBPF程序关联的文件描述符
  * 其他命令: 0
如果发生错误就返回-1, errno设置为错误原因
## 其他相关笔记
在linux4.4之前, 所有的bpf()命令都要求调用者有`CAP_SYS_ADMIN`的能力, 从linux4.4开始,
非特权用户可以创建受限的`BPF_PROG_TYPE_SOCKET_FILTER`类型的程序和相关的映射. 然后他们不能在映射里面保存内核指针,
现在只能使用如下助手函数
  * get_random()
  * get_smp_processer_id()
  * tail_call())
  * ktime_get_ns()
非特权访问可以通过向`/proc/sys/kernel/unprivileged_bpf_disabled`写入1来阻止
eBPF对象(映射和程序)可以在进程之间共享, 例如, 在fork()之后, 子进程会继承同一个指向eBPF对象的文件描述符.另外,
引用eBPF对象的文件描述符也可以通过UNIX domin socket传递.
引用eBPF对象的文件描述符也通过普通的方式使用`dup(2)`和类似的调用进行复制. 一个eBPF对象只在所有的文件描述符引用都关闭之后才会被析构
eBPF程序可以使用受限的C语音写, 然后被编译成eBPF字节码. 在受限的C语音中, 很多特性都被删去了, 例如: 循环, 全局变量, 可变参函数,
浮点数, 传递一个结构体作为函数参数. 内核源码的`samples/bpf/*_kern.c`文件中有些eBPF程序的样例
为了更好的性能, 内核包含一个能翻译eBPF字节码为本地机器指令的及时编译器(JIT, just-in-time compiler).
在linux4.15之前的内核, 这个JIT编译器是被默认禁止的,
但可以通过向`/proc/sys/net/core/bpf_jit_enable`写入一个整数字符串来控制其行为
  * 0: 禁用JIT编译器(默认的)
  * 1: 正常的编译
  * 2: 调试模式. 生成的指令会以十六进制的性质被复制到内核log中, 这个字节码可以通过内核源码树中`tools/net/bpf_jit_disasm.c`来进行反编译
从4.15开始, 内核可以用`CONFIG_BPF_JIT_ALWAYS_ON`选项进行配置, 在这种情况下, JIT编译器总是会开启,
并且`bpf_jit_enable`也初始化为1并且不可改变. (内核配置选项可以缓解潜在的针对BPF解释器的攻击)
eBPF的JIT编译器目前对下列架构可用
        *  x86-64 (since Linux 3.18; cBPF since Linux 3.0);
       *  ARM32 (since Linux 3.18; cBPF since Linux 3.4);
       *  SPARC 32 (since Linux 3.18; cBPF since Linux 3.5);
       *  ARM-64 (since Linux 3.18);
       *  s390 (since Linux 4.1; cBPF since Linux 3.7);
       *  PowerPC 64 (since Linux 4.8; cBPF since Linux 3.1);
       *  SPARC 64 (since Linux 4.12);
       *  x86-32 (since Linux 4.18);
       *  MIPS 64 (since Linux 4.18; cBPF since Linux 3.16);
       *  riscv (since Linux 5.1).
## 代码样例
为了更加直观, 我不引入内核源码树中的`bpf_help.h`, 也不使用loader, 以更加直观的展示BPF的用法
###  数组映射的使用
    //gcc ./bpf.c -o bpf
    #include 
    #include   //为了exit()函数
    #include     //为了uint64_t等标准类型的定义
    #include     //为了错误处理
    #include     //位于/usr/include/linux/bpf.h, 包含BPF系统调用的一些常量, 以及一些结构体的定义
    #include     //为了syscall()
    //类型转换, 减少warning, 也可以不要
    #define ptr_to_u64(x) ((uint64_t)x)
    //对于系统调用的包装, __NR_bpf就是bpf对应的系统调用号, 一切BPF相关操作都通过这个系统调用与内核交互
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)