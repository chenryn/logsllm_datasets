### 4. Example Use Case: Information Exfiltration

For example, this technique could be used for exfiltrating information from a compromised domain (on a tab executing malicious JavaScript). By leveraging Web Workers, which are background threads that run independently of the user interface, we can transfer information across different origins without affecting the user experience or generating noticeable network traffic.

### 5. Discussion

We have demonstrated how shared event loops in browsers can lead to timing side-channel attacks and presented several such attacks on Chrome. We communicated our findings to the Chromium security team, who decided not to take immediate action. Nevertheless, our results highlight fundamental security issues in the event-driven architecture of browsers that need to be addressed.

#### 5.1 Beyond Chrome

Our analysis focuses on Chrome because it is the most widely used browser and was the first to implement a multi-process architecture. However, similar side-channel vulnerabilities are likely to exist in other browsers, as they all follow the same event-driven paradigm and use similar architectures.

For instance, recent versions of Firefox with multi-process support (Electrolysis or e10s) also rely on a privileged browser process and multiple content processes. Unlike Chrome, each content process in Firefox acts as a pool of threads for different origins, each with its own message queue. Despite this architectural difference, our tests using LoopScan on Firefox version 55 show that congestion on both event loops is observable across origins and tabs.

Specifically, we applied the monitoring technique described in Section 3.1.2 to a micro-benchmark with a set of 30 pages, each with 15 traces. We achieved a recognition rate of 49%, which is lower than the recognition rate achieved on Chrome for a set of 500 pages. A fair comparison between the two architectures would require a better understanding of Firefox’s policy for mapping sites to threads and events to loops.

#### 5.2 Countermeasures

The attacks described in this paper rely on two capabilities of the adversary: (1) the ability to post tasks into the event loop's queue at a high frequency, and (2) the ability to accurately measure the corresponding time differences.

**Rate Limiting:** An obvious approach to counter (1) is to impose a limit on the rate at which tasks can be posted into an event loop. Unfortunately, rate limiting can penalize performance, especially for asynchronous code. At the renderer level, one possible solution is to use an "accumulate and serve" policy, where the event loop accumulates incoming jobs for a period T and then processes them in batches. This limits the amount of information leaked while maintaining high amortized throughput. At the host process level, where resource fetching is a primary concern, setting any processing rate bound is not acceptable. Here, it may be more reasonable to monitor the IPC activity of all renderers and penalize or flag those exhibiting anomalous behavior.

**Reduce Clock Resolution:** To counter (2), one approach is to limit the resolution of available clocks. While browser vendors have already implemented this to mitigate other timing channels, modern browsers have many methods to measure time without explicit clocks. For example, some recent exploits use high-resolution timers built on top of SharedArrayBuffers. The current resolution of `performance.now` is limited to 5 µs, which makes microarchitectural timing attacks difficult but does not prevent the detection of JavaScript events.

**Full Isolation:** As discussed in Section 2.2, Chrome's multi-process architecture aims to use a different renderer for different origins, except in some corner cases. The "Site Isolation Project" is an ongoing effort to ensure a complete process-per-site-instance policy, providing cross-process navigations, cross-process JavaScript interactions, and out-of-process iframes without inducing too much overhead. One open question is how to handle the system's process limit, such as which sites should have isolation preference or which heuristic for process reuse should be used. A recent proposal, "IsolateMe," allows developers to request isolation from other web content, though it does not provide a firm guarantee.

**CPU Throttling:** Chrome v55 introduced an API to limit the CPU usage of background pages and throttle tasks when they exceed this limit. This affects background tabs trying to spy on the renderer's main thread but still allows spying on (and from) any iframe and popup, as well as on the I/O thread of the host process through shared workers. Background tabs with audio activity are not affected, as they are always marked as foreground. Since Chrome v57, pages (or tabs) are only subjected to throttling after 10 seconds in the background, which is too long to prevent the attacks described in this paper.

### 6. Related Work

Timing attacks on web browsers date back to Felten and Schneider [13], who used the browser cache to obtain information about a user's browsing history. More recently, so-called cross-site timing attacks [10, 35] have exploited the fact that the browser attaches cookies to all requests, even when they are performed across origins. The presence or absence of these cookies can be determined by timing measurements, revealing information about the user's state on arbitrary sites. A special case is cross-site search attacks [14], which circumvent the same-origin policy to extract sensitive information by measuring the time it takes for the browser to receive responses to search queries.

Other classes of browser-based timing attacks exploit timing differences in rendering operations [24, 33, 5] or use the browser as an entry point for JavaScript that exploits timing channels of underlying hardware, such as caches [26, 16], DRAM buffers [17], or CPU contention [9]. Of these approaches, [9] is related to our work in that it identifies web pages across browser tabs based on the timing of JavaScript and a classifier using dynamic time warping. However, because the attack relies on CPU contention as a channel, it requires putting heavy load on all cores for monitoring. In contrast, our attack exploits the browser's event loop as a channel, which can be monitored by enqueuing one event at a time, making it stealthy and more independent of the execution platform.

To the best of our knowledge, we are the first to mount side-channel attacks that exploit the event-driven architecture of web browsers. Our work is inspired by a proof-of-concept attack [36] that steals a secret from a cross-origin web application by using the single-threaded nature of JavaScript. We identify Chrome's event-driven architecture as the root cause of this attack and show how this observation generalizes in three different attacks against two different event loops in Chrome.

Finally, a central difference between classical site fingerprinting [28, 19, 34, 12] approaches and our page identification attack is the adversary model: First, our adversary only requires their page to be opened in the victim's browser. Second, instead of traffic patterns in the victim's network, our adversary observes only time delays in the event queues of the victim's browser. We believe that our preliminary results, with up to 76% recognition rate using one single sample for training in a closed-world with 500 pages, can be significantly improved by developing domain-specific classification techniques.

### 7. Conclusions

In this paper, we demonstrate that shared event loops in Chrome are vulnerable to side-channel attacks, where a spy process monitors the loop usage pattern of other processes by enqueuing tasks and measuring the time it takes for them to be dispatched. We systematically study how this channel can be used for different purposes, such as web page identification, user behavior detection, and covert communication.

### Acknowledgments

We thank Thorsten Holz, Andreas Rossberg, Carmela Troncoso, and the anonymous reviewers for their helpful comments. We thank Javier Prieto for his help with the data analysis. This work was supported by Ramón y Cajal grant RYC-2014-16766, Spanish projects TIN2012-39391-C04-01 StrongSoft and TIN2015-70713-R DEDETIS, and Madrid regional project S2013/ICE-2731 N-GREENS.

### References

[1] Covert channels in the SOP. https://github.com/cgvwzq/sop-covert-channels. Accessed: 2017-02-16.
[2] HTML Living Standard. https://html.spec.whatwg.org/. Accessed: 2017-05-24.
[3] Understanding about:tracing results. https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/trace-event-reading. Accessed: 2017-02-16.
[4] Isolation explainer. https://wicg.github.io/isolation/explainer.html, 2016. Accessed: 2017-05-24.
[5] ANDRYSCO, M., KOHLBRENNER, D., MOWERY, K., JHALA, R., LERNER, S., AND SHACHAM, H. On subnormal floating point and abnormal timing. In SSP (2015), IEEE.
[6] BARTH, A., JACKSON, C., REIS, C., TEAM, T., ET AL. The security architecture of the Chromium browser. http://www.adambarth.com/papers/2008/barthjackson-reis.pdf, 2008.
[7] BERNDT, D. J., AND CLIFFORD, J. Using dynamic time warping to find patterns in time series. In KDD workshop (1994), AAAI Press.
[8] BERNSTEIN, D. Cache-timing attacks on AES. https://cr.yp.to/antiforgery/cachetiming-20050414.pdf, 2005.
[9] BOOTH, J. M. Not so incognito: Exploiting resource-based side channels in JavaScript engines. http://nrs.harvard.edu/urn-3:HUL.InstRepos:17417578, 2015.
[10] BORTZ, A., AND BONEH, D. Exposing private information by timing web applications. In WWW (2007), ACM.
[11] BOSMAN, E., RAZAVI, K., BOS, H., AND GIUFFRIDA, C. Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector. In SSP (2016), IEEE.
[12] DYER, K. P., COULL, S. E., RISTENPART, T., AND SHRIMPTON, T. Peek-a-Boo, I Still See You: Why Efficient Traffic Analysis Countermeasures Fail. In SSP (2012), IEEE.
[13] FELTEN, E. W., AND SCHNEIDER, M. A. Timing attacks on web privacy. In CCS (2000), ACM.
[14] GELERNTER, N., AND HERZBERG, A. Cross-Site Search Attacks. In CCS (2015), ACM.
[15] GIORGINO, T. Computing and visualizing dynamic time warping alignments in R: The dtw package. JSS 31, 7 (2009), 1–24.
[16] GRAS, B., RAZAVI, K., BOSMAN, E., BOS, H., AND GIUFFRIDA, C. ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS (2017), The Internet Society.
[17] GRUSS, D., MAURICE, C., AND MANGARD, S. Rowhammer.js: A remote software-induced fault attack in JavaScript. In DIMVA (2016), Springer.
[18] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache template attacks: Automating attacks on inclusive last-level caches. In USENIX Security (2015), USENIX Association.
[19] HAYES, J., AND DANEZIS, G. k-fingerprinting: A Robust Scalable Website Fingerprinting Technique. In USENIX Security (2016), USENIX Association.
[20] HOGYE, M. A., HUGHES, C. T., SARFATY, J. M., AND WOLF, J. D. Analysis of the feasibility of keystroke timing attacks over SSH connections. http://www.cs.virginia.edu/~evans/cs588-fall2001/projects/reports/team4.pdf, 2001.
[21] JANA, S., AND SHMATIKOV, V. Memento: Learning secrets from process footprints. In SSP (2012), IEEE.
[22] KADLOOR, S., KIYAVASH, N., AND VENKITASUBRAMANIAM, P. Mitigating timing side channel in shared schedulers. IEEE/ACM Trans. Netw. 24, 3 (2016), 1562–1573.
[23] KOHLBRENNER, D., AND SHACHAM, H. Trusted Browsers for Uncertain Times. In USENIX Security (2016), USENIX Association.
[24] KOTCHER, R., PEI, Y., JUMDE, P., AND JACKSON, C. Cross-origin pixel stealing: timing attacks using CSS filters. In CCS (2013), ACM.
[25] LAMPSON, B. W. A note on the confinement problem. Communications of the ACM 16, 10 (1973), 613–615.
[26] OREN, Y., KEMERLIS, V. P., SETHUMADHAVAN, S., AND KEROMYTIS, A. D. The Spy in the Sandbox: Practical Cache Attacks in JavaScript and Their Implications. In CCS (2015), ACM.
[27] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache attacks and countermeasures: the case of AES. In CT-RSA (2006), Springer.
[28] PANCHENKO, A., LANZE, F., PENNEKAMP, J., ENGEL, T., ZINNEN, A., HENZE, M., AND WEHRLE, K. Website fingerprinting at internet scale. In NDSS (2016), The Internet Society.
[29] PEDERSEN, M. V., AND ASKAROV, A. From Trash to Treasure: Timing-sensitive Garbage Collection. In SSP (2017), IEEE.
[30] REIS, C., AND GRIBBLE, S. D. Isolating web programs in modern browser architectures. In EuroSys (2009), ACM.
[31] SAKURAI, Y., FALOUTSOS, C., AND YAMAMURO, M. Stream monitoring under the time warping distance. In ICDE (2007), IEEE.
[32] SONG, D. X., WAGNER, D., AND TIAN, X. Timing Analysis of Keystrokes and Timing Attacks on SSH. In USENIX Security (2001), USENIX Association.
[33] STONE, P. Pixel perfect timing attacks with HTML5 (white paper). https://www.contextis.com/documents/2/Browser_Timing_Attacks.pdf, 2013.
[34] SUN, Q., SIMON, D. R., WANG, Y.-M., RUSSELL, W., PADMANABHAN, V. N., AND QIU, L. Statistical identification of encrypted web browsing traffic. In SSP (2002), IEEE.
[35] VAN GOETHEM, T., JOOSEN, W., AND NIKIFORAKIS, N. The Clock is Still Ticking: Timing Attacks in the Modern Web. In CCS (2015), ACM.
[36] VELA, E. Matryoshka: Timing attacks against JavaScript applications in browsers. http://sirdarckcat.blogspot.com.es/2014/05/matryoshka-web-application-timing.html, 2013.
[37] YAROM, Y., AND FALKNER, K. FLUSH+RELOAD: A high resolution, low noise, L3 cache side-channel attack. In USENIX Security Symposium (2014).
[38] ZHANG, K., AND WANG, X. Peeping Tom in the neighborhood: Keystroke eavesdropping on multi-user systems. In USENIX Security (2009), USENIX Association.
[39] ZHANG, T., ZHANG, Y., AND LEE, R. B. CloudRadar: A Real-Time Side-Channel Attack Detection System in Clouds. In RAID (2016), Springer.