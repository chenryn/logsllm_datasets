title:EnFuzz: Ensemble Fuzzing with Seed Synchronization among Diverse Fuzzers
author:Yuanliang Chen and
Yu Jiang and
Fuchen Ma and
Jie Liang and
Mingzhe Wang and
Chijin Zhou and
Xun Jiao and
Zhuo Su
EnFuzz: Ensemble Fuzzing with Seed 
Synchronization among Diverse Fuzzers
Yuanliang Chen, Yu Jiang, Fuchen Ma, Jie Liang, Mingzhe Wang, and Chijin Zhou, 
Tsinghua University; Xun Jiao, Villanova University; Zhuo Su, Tsinghua University
https://www.usenix.org/conference/usenixsecurity19/presentation/chen-yuanliang
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.EnFuzz: Ensemble Fuzzing with Seed Synchronization among Diverse Fuzzers
Yuanliang Chen1, Yu Jiang1∗, Fuchen Ma1, Jie Liang1, Mingzhe Wang1, Chijin Zhou1, Xun Jiao2, Zhuo Su1
1School of Software, Tsinghua University, KLISS
2Department of Electrical and Computer Engineering, Villanova University
Abstract
Fuzzing is widely used for vulnerability detection. There are
various kinds of fuzzers with different fuzzing strategies, and
most of them perform well on their targets. However, in in-
dustrial practice, it is found that the performance of those
well-designed fuzzing strategies is challenged by the com-
plexity and diversity of real-world applications. In this paper,
we systematically study an ensemble fuzzing approach. First,
we deﬁne the diversity of base fuzzers in three heuristics: di-
versity of coverage information granularity, diversity of input
generation strategy and diversity of seed selection and muta-
tion strategy. Based on those heuristics, we choose several of
the most recent base fuzzers that are as diverse as possible,
and propose a globally asynchronous and locally synchronous
(GALS) based seed synchronization mechanism to seamlessly
ensemble those base fuzzers and obtain better performance.
For evaluation, we implement EnFuzz based on several widely
used fuzzers such as QSYM and FairFuzz, and then we test
them on LAVA-M and Google’s fuzzing-test-suite, which
consists of 24 widely used real-world applications. This ex-
periment indicates that, under the same constraints for re-
sources, these base fuzzers perform differently on different
applications, while EnFuzz always outperforms other fuzzers
in terms of path coverage, branch coverage and bug discovery.
Furthermore, EnFuzz found 60 new vulnerabilities in several
well-fuzzed projects such as libpng and libjpeg, and 44 new
CVEs were assigned.
1 Introduction
Fuzzing is one of the most popular software testing tech-
niques for bug and vulnerability detection. There are many
fuzzers for academic and industrial usage. The key idea of
fuzzing is to generate plenty of inputs to execute the tar-
get application and monitor for any anomalies. While each
fuzzer develops its own speciﬁc fuzzing strategy to gener-
ate inputs, there are in general two main types of strategies.
One is a generation-based strategy which uses the speciﬁ-
cation of input format, e.g. grammar, to generate complex
inputs. For example, IFuzzer [33] takes a context-free gram-
mar as speciﬁcation to generate parse trees for code fragments.
Radamsa [22] reads sample ﬁles of valid data and generates in-
teresting different outputs from them. The other main strategy
is a mutation-based strategy. This approach generates new in-
puts by mutating the existing seeds (good inputs contributing
to improving the coverage). Recently, mutation-based fuzzers
are proposed to use coverage information of target programs
to further improve effectiveness for bug detection. For exam-
ple, libFuzzer [10] mutates seeds by utilizing the Sanitizer-
Coverage [11] instrumentation to track block coverage, while
AFL [39] mutates seeds by using static instrumentation to
track edge coverage.
Based on the above mentioned two fuzzers, researchers
have performed many optimizations. For example, AFLFast
[16] improves the fuzzing strategy of AFL by selecting seeds
that exercise low-frequency paths for additional mutations,
and FairFuzz [26] optimizes AFL’s mutation algorithm to
prioritize seeds that hit rare branches. AFLGo [15] assigns
more mutation times to the seeds closer to target locations.
QSYM [38] uses a practical concolic execution engine to
solve complex branches of AFL. All of these optimized
fuzzers outperform AFL on their target applications and have
already detected a large number of software bugs and security
vulnerabilities.
However, when we apply these optimized fuzzers to some
real-world applications, these fuzzing strategies are incon-
sistent in their performance, their effectiveness on different
applications varies accordingly. For example, in our evalu-
ation on 24 real-world applications, AFLFast and FairFuzz
perform better than AFL on 19 applications, while AFL per-
forms better on the other 5 applications. Compared with AFL,
libFuzzer performs better on 17 applications but worse on the
other 7 applications. For the parallel mode of fuzzing which is
widely-used in industry, AFLFast and FairFuzz only detected
73.5% and 88.2% of the unique bugs of AFL. These results
show that the performance of existing fuzzers is challenged
by the complexity and diversity of real-world applications.
For a given real-world application, we cannot evaluate which
fuzzer is better unless we spend signiﬁcant time analyzing
them or running each of these fuzzers one by one. This would
waste a lot of human and computing resources [25]. This
indicates that many of the current fuzzing strategies have a
lack of robustness — the property of being strong and stable
consistently in constitution. For industrial practice, more ro-
bust fuzzing strategies are desired when applied across a large
number of different applications.
USENIX Association
28th USENIX Security Symposium    1967
In this paper, we systematically study the performance of
an ensemble fuzzing approach. First, we deﬁne the diver-
sity of base fuzzers focusing on three heuristics: diversity of
coverage information granularity, diversity of input genera-
tion strategy, as well as diversity of seed mutation and selec-
tion strategy. Then, we implement an ensemble architecture
with a global asynchronous and local synchronous(GALS)
based seed synchronization mechanism to integrate these base
fuzzers effectively. To enhance cooperation among differ-
ent base fuzzers, the mechanism synchronizes interesting
seeds(i.e., test cases covering new paths or triggering new
crashes) periodically to all fuzzers running on the same target
application. At the same time, it maintains a global coverage
map to help collect those interesting seeds asynchronously
from each base fuzzer.
For evaluation, we implement a prototype of EnFuzz, based
on several high-performance base fuzzers, including AFL,
AFLFast, FairFuzz, QSYM, libFuzzer and Radamsa. All
fuzzers are repeatedly tested on two widely used bench-
marks — LAVA-M and Google’s fuzzer-test-suite, following
the kernel rules of evaluating fuzzing guideline [25]. The av-
erage number of paths executed, branches covered and unique
crashes discovered are used as metrics. The results demon-
strate that, with the same resource usage, the base fuzzers per-
form differently on different applications, while EnFuzz con-
sistently and effectively improves the fuzzing performance.
For example, there are many cases where the original AFL
performs better on some real-world applications than the two
optimized fuzzers FairFuzz and AFLFast. In all cases, the
ensemble fuzzing always outperforms all other base fuzzers.
Speciﬁcally, on Google’s fuzzer-test-suite consisting of
real-world applications with a code base of 80K-220K
LOCs, compared with AFL, AFLFast, FairFuzz, QSYM, lib-
Fuzzer and Radamsa, EnFuzz discovers 76.4%, 140%, 100%,
81.8%, 66.7% and 93.5% more unique bugs, executes 42.4%,
61.2%, 45.8%, 66.4%, 29.5% and 44.2% more paths and cov-
ers 15.5%, 17.8%, 12.9%, 26.1%, 19.9% and 14.8% more
branches respectively. For the result on LAVA-M consisting
of applications with a code base of 2K-4K LOCs, it outper-
forms each base fuzzer as well. For further evaluation on more
widely used and several well-fuzzed open-source projects
such as Libpng and jpeg, EnFuzz ﬁnds 60 new real vulnera-
bilities, 44 of which are security-critical vulnerabilities and
registered as new CVEs. However, other base fuzzers only
detect 35 new vulnerabilities at most.
This paper makes the following main contributions:
1. While many earlier works have mentioned the possibility
of using ensemble fuzzing, we are among the ﬁrst to
systematically investigate the practical ensemble fuzzing
strategies and the effectiveness of ensemble fuzzing of
various fuzzers. We evaluate the performance of typical
fuzzers through a detailed empirical study. We deﬁne the
diversity of base fuzzers and study the effects of diversity
on their performance.
2. We implement a concrete ensemble approach with seed
synchronization to improve the performance of existing
fuzzers. EnFuzz shows a more robust fuzzing practice
across diverse real world applications. The prototype1
is also scalable and open-source so as to integrate other
fuzzers.
3. We apply EnFuzz to fuzz several well-fuzzed projects
such as libpng and libjpeg from GitHub, and several
commercial products such as libiec61850 from Cisco.
Within 24 hours, 60 new security vulnerabilities were
found and 44 new CVEs were assigned, while other base
fuzzers only detected 35 new vulnerabilities at most.
EnFuzz has already been deployed in industrial practice,
and more new CVEs are being reported1.
The rest of this paper is organized as follows: Section 2 in-
troduces related work. Section 3 illustrates ensemble fuzzing
by a simple example. Section 4 elaborates ensemble fuzzing,
including the base fuzzer selection and ensemble architecture
design. Section 5 presents the implementation and evalua-
tion of EnFuzz. Section 6 discusses the potential threats of
EnFuzz, and we conclude in section 7. The appendix shows
some empirical evaluations and observations.
2 Related Work
Here below, we introduce the work related to generation-
based fuzzing, mutation-based fuzzing, fuzzing in practice
and the main differences between these projects. After that
we summarize the inspirations and introduce our work.
2.1 Generation-based Fuzzing
Generation-based fuzzing generates a massive number of test
cases according to the speciﬁcation of input format, e.g. a
grammar. To fuzz the target applications that require inputs
in complex format, the speciﬁcations used are crucial. There
are many types of speciﬁcations. Input model and context-
free grammar are the two most common types. Model-based
fuzzers [1,20,34] follow a model of protocol. Hence, they are
able to ﬁnd more complex bugs by creating complex inter-
actions with the target applications. Peach [20] is one of the
most popular model-based fuzzers with both generation and
mutation abilities. It develops two key models: the data model
determines the format of complex inputs and the state model
describes the concrete method for cooperating with fuzzing
targets. By integrating fuzzing with models of data and state,
Peach works effectively. Skyﬁre [34] ﬁrst learns a context-
sensitive grammar model, and then it generates massive inputs
based on this model.
Some other popular fuzzers [21, 24, 31, 33, 37] generate
inputs based on context free grammar. P Godefroid [21] en-
hances the whitebox fuzzing of complex structured-input
applications by using symbolic execution, which directly
generates grammar-based constraints whose satisﬁability is
examined using a custom grammar-based constraint solver.
Csmith [37] is designed for fuzzing C-compilers. It gener-
ates plenty of random C programs in the C99 standard as
the inputs. This tool can be used to generate C programs ex-
ploring a typical combination of C-language features while
1https://github.com/enfuzz/enfuzz
1968    28th USENIX Security Symposium
USENIX Association
being free of undeﬁned and unspeciﬁed behaviors. LAVA [31]
generates effective test suites for the Java virtual machine by
specifying production grammars. IFuzzer [33] ﬁrst constructs
parse trees based on a language’s context-free grammar, then
it generates new code fragments according to these parse
trees. Radamsa [22] is a widely used generation-based fuzzer.
It works by reading sample ﬁles of valid data and generat-
ing interestingly different outputs from them. Radamsa is an
extreme "black-box" fuzzer, it needs no information about
the program nor the format of the data. One can pair it with
coverage analysis during testing to improve the quality of the
sample set during a continuous fuzzing test.
2.2 Mutation-based Fuzzing
Mutation-based fuzzers [2, 17, 23] mutate existing test cases
to generate new test cases without any input grammar or in-
put model speciﬁcation. Traditional mutation-based fuzzers
such as zzuf [23] mutate the test cases by ﬂipping random
bits with a predeﬁned ratio. In contrast, the mutation ratio
of SYMFUZZ [17] is assigned dynamically. To detect bit
dependencies of the input, it leverages white-box symbolic
analysis on an execution trace, then it dynamically computes
an optimal mutation ratio according to these dependencies.
Furthermore, BFF [2] integrates machine learning with evolu-
tionary computation techniques to reassign the mutation ratio
dynamically.
Other popular AFL family tools [15, 16, 26, 39] apply var-
ious strategies to boost the fuzzing process. AFLFast [16]
regards the process of target application as a Markov chain. A
path-frequency based power schedule is responsible for com-
puting the times of random mutation for each seed. As with
AFLFast, AFLGo [15] also proposes a simulated annealing-
based power schedule, which helps fuzz the target code. Fair-
Fuzz [26] mainly focuses on the mutation algorithm. It only
mutates seeds that hit rare branches and it strives to ensure
that the mutant seeds hit the rarest one. (Wen Xu et.al.) [36]
propose several new primitives , speeding up AFL by 6.1 to
28.9 times. Unlike AFL family tools which track the hit count
of each edge, libFuzzer [10] and honggfuzz [5] utilize the
SanitizerCoverage instrumentation method provided by the
Clang compiler. To track block coverage, they track the hit
count of each block as a guide to mutate the seeds during
fuzzing. SlowFuzz [30] prioritizes seeds that use more com-
puter resources (e.g., CPU, memory and energy), increasing
the probability of triggering algorithmic complexity vulnera-
bilities. Furthermore, some fuzzers use concolic executors for
hybrid fuzzing. Both Driller [32] and QSYM use mutation-
based fuzzers to avoid path exploration of symbolic execu-
tion, while concolic execution is selectively used to drive
execution across the paths that are guarded by narrow-ranged
constraints.
2.3 Cluster and Parallel Fuzzing in Industry
Fuzzing has become a popular vulnerability discovery solu-
tion in industry [28] and has already found a large number
of dangerous bugs and security vulnerabilities across a wide
range of systems so far. For example, Google’s OSS-Fuzz [4]
platform has found more than 1000 bugs in 5 months with
thousands of virtual machines [9]. ClusterFuzz is the dis-
tributed fuzzing infrastructure behind OSS-Fuzz, and auto-
matically executes libFuzzer powered fuzzer tests on scale
[12, 13]. Initially built for fuzzing Chrome at scale, Cluster-
Fuzz integrates multiple distributed libFuzzer processes, and
performs effectively with corpus synchronization. Cluster-
Fuzz mainly runs multiple identical instances of libFuzzer
on distributed system for one target application. There is no
diversity between these fuzzing instances.
In industrial practice, many existing fuzzers also provide a
parallel mode, and they work well with some synchronization
mechisms. For example, each instance of AFL in parallel
mode will periodically re-scan the top-level sync directory
for any test cases found by other fuzzers [3, 7]. libFuzzer in
parallel will also use multiple fuzzing engines to exchange
the corpora [6]. These parallel mode can effectively improve
the performance of fuzzer. In fact, the parallel mode can be
seen as a special example of ensemble fuzzing which uses
multiple same base fuzzers. However, all these base fuzzers
have a lack of diversity when using the same fuzzing strategy.
2.3.1 Main Differences
Unlike the previous works, we are not proposing a new con-
crete generation-based or mutation-based fuzzing strategy.
Nor do we run multiple identical fuzzers with multiple cores
or machines. Instead, inspired by the seed synchronization
of ClusterFuzz and AFL in parallel mode, we systemati-
cally study the possibility of the ensemble fuzzing of diverse
fuzzers mentioned in the earlier works. Referred to the kernel
descriptions of the evaluating fuzzing guidelines [25], we em-
pirically evaluate most state-of-the-art fuzzers, and identify
some valuable results, especially for their performance varia-
tion across different real applications. To generate a stronger
ensemble fuzzer, we choose multiple base fuzzers that are as
diverse as possible based on three heuristics. We then imple-
ment an ensemble approach with global asynchronous and
local synchronous based seed synchronization.
3 Motivating Example
To investigate the effectiveness of ensemble fuzzing, we use a
simple example in Figure 1 which takes two strings as input,
and crashes when one of the two strings is “Magic Str” and
the other string is “Magic Num”.
Many existing fuzzing strategies tend to be designed with
certain preferences. Suppose that we have two different
fuzzers f uzzer1 and f uzzer2: f uzzer1 is good at solving the
"Magic Str" problem, so it is better for reaching targets T1
and T3, but fails to reach targets T2 and T4. f uzzer2 is good
at solving the "Magic Num" problem so it is better for reach-
ing targets T2 and T6, but fails to reach targets T1 and T5.
If we use these two fuzzers separately, we can only cover
one path and two branches. At the same time, if we use them
simultaneously and ensemble their ﬁnal fuzzing results with-
out seed synchronization, we can cover two paths and four
branches. However, if we ensemble these two fuzzers with
some synchronization mechanisms throughout the fuzzing
process, then, once f uzzer1 reaches T1, it synchronizes the
USENIX Association
28th USENIX Security Symposium    1969
ful ensemble fuzzers rely on two key points: (1) the ﬁrst
is to select base fuzzers with great diversity (as yet to be
well-deﬁned); (2) the second is a concrete synchronization
mechanism to enhance effective cooperation among those
base fuzzers.
4 Ensemble Fuzzing
For an ensemble fuzzing, we need to construct a set of base
fuzzers and seamlessly combine them to test the same tar-
get application together. The overview of this approach is
presented in Figure 2. When a target application is prepared
for fuzzing, we ﬁrst choose several existing fuzzers as base
fuzzers. The existing fuzzing strategies of any single fuzzer
are usually designed with preferences. In real practice, these
preferences vary greatly across different applications. They
can be helpful in some applications, but may be less effec-
tive on other applications. Therefore, choosing base fuzzers
with more diversity can lead to better ensemble performance.
After the base fuzzer selection, we integrate fuzzers with the
globally asynchronous and locally synchronous based seed
synchronization mechanism so as to monitor the fuzzing sta-
tus of these base fuzzers and share interesting seeds among
them. Finally, we collect crash and coverage information and
feed this information into the fuzzing report.
Figure 1: Motivating example of ensemble fuzzing with seed
synchronization.
seed that can cover T1 to f uzzer2. As a result, then, with the
help of this synchronized seed, f uzzer2 can also reach T1,
and because of its ability to solve the "Magic Num" prob-
lem, f uzzer2 can further reach T4. Similarly, with the help
of the seed input synchronized by f uzzer2, f uzzer1 can also
further reach T2 and T5. Accordingly, all four paths and all
six branches can be covered through this ensemble approach.
Table 1: covered paths of each fuzzing option
Tool
fuzzer1
fuzzer2
ensemble fuzzer1 and fuzzer2
without seed synchronization
ensemble fuzzer1 and fuzzer2
with seed synchronization
T1-
T3
(cid:88)
(cid:88)
(cid:88)
T1-
T4
T2-
T5
T2-
T6
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
The ensemble approach in this motivating example works
based on the following two hypotheses: (1) f uzzer1 and
f uzzer2 expert in different domains; (2) the interesting seeds
can be synchronized to all base fuzzers in a timely way. To
satisfy the above hypotheses as much as possible, success-
Figure 2: The overview of ensemble fuzzing consists of base
fuzzer selection and ensemble architecture design. The base
fuzzer selection contains the diversity heuristic deﬁnition,
and the architecture design includes the seed synchronization
mechanism as well as ﬁnal fuzzing report.
1970    28th USENIX Security Symposium
USENIX Association
voidcrash(char*A,char*B){if(A =="Magic Str"){=>T1if(B =="Magic Num"){bug();=>T4}else{normal();=>T3}}elseif(A =="Magic Num"){=>T2if(B =="Magic Str"){bug();=>T5}else{normal();=>T6}}}T1T2T3T4T5T6Base Fuzzers Selection...Seed Synchronization MechanismBaseFuzzerBaseFuzzerBaseFuzzerBaseFuzzerResultgenerateResultResultResultgenerategenerategeneratemonitormonitormonitormonitormonitorseed is interesting?NSeed synchronizationYintegrate together...Final Fuzzing ReportGlobal CoverageDe-duplicate and triageStatistical ResultsTargetApplication123kk3214.1 Base Fuzzer Selection
The ﬁrst step in ensemble fuzzing is to select a set of base
fuzzers. These fuzzers can be generation-based fuzzers, e.g.
Peach and Radamsa, or mutation-based fuzzers, e.g. libFuzzer
and AFL. We can randomly choose some base fuzzers, but
selecting base fuzzers with well-deﬁned diversity improves
the performance of an ensemble fuzzer.
We classify the diversity of base fuzzers according to three
heuristics: seed mutation and selection strategy diversity,
coverage information granularity diversity, inputs generation
strategy diversity. The diversity heuristics are as follows:
1. Seed mutation and selection strategy based heuristic:
the diversity of base fuzzers can be determined by the
variability of seed mutation strategies and seed selection
strategies. For example, AFLFast selects seeds that exer-
cise low-frequency paths and mutates them more times,
FairFuzz strives to ensure that the mutant seeds hit the
rarest branches.
2. Coverage information granularity based heuristic: many
base fuzzers determine interesting inputs by tracking
different coverage information. Hence, the coverage in-
formation is critical, and different kinds of coverage
granularity tracked by fuzzers enhances diversity. For ex-
ample, libFuzzer guides seed mutation by tracking block
coverage while AFL tracks edge coverage.
3. Input generation strategy based heuristic: fuzzers with
different input generation strategies are suitable for dif-
ferent tasks. For example, generation-based fuzzers use
the speciﬁcation of input format to generate test cases,
while the mutation-based fuzzers mutate initial seeds by
tracking code coverage. So the generation-based fuzzers
such as Radamsa perform better on complex format in-
puts and the mutation-based fuzzers such as AFL prefer
complex logic processing.
Based on these three basic heuristics, we should be able to
select a diverse set of base fuzzers with large diversity. It is
our intuition that the diversity between the fuzzers following
in two different heuristics is usually larger than the fuzzers
that follows in the same heuristic. So, the diversity among
the AFL family tools should be the least, while the diversity
between Radamsa and AFL, between Libfuzzer and AFL, and
between QSYM and AFL is should be greater. In this paper,
we select base fuzzers manually based on the above heuristics.
the base fuzzers will be dynamically selected according to the
real-time coverage information.
4.2 Ensemble Architecture Design
After choosing base fuzzers, we need to implement a suit-
able architecture to integrate them together. As presented
in Figure 2, inspired by the seed synchronization of AFL in
parallel mode, one core mechanism is designed — the glob-
ally asynchronous and locally synchronous (GALS) based
seed synchronization mechanism. The main idea is to identify
the interesting seeds (seeds that can cover new paths or new
branches or can detect new unique crashes) from different
base fuzzers asynchronously and share those interesting seeds
synchronously among all fuzzing processes.
Figure 3: The data structure of global asynchronous and local
synchronous based seed synchronization mechanism.
ALGORITHM 1: Action of local base fuzzer
:Local seed pool of base fuzzer queue
Input
1 repeat
2
3
4
5
foreach seed s of the queue do
s(cid:48) = Mutate(s);
Cover = Run(s’);
// if seeds s(cid:48) causes new crash or have new
// coverage, then store it in own seed pool and
// push it to the global seed pool asynchronously;
if Cover.causeCrash() then
else if Cover.haveNewCoverage() then
crashes.push(s’);
queue.push(s(cid:48));
GlobalSeedPool.push(s(cid:48));
queue.push(s(cid:48));
GlobalSeedPool.push(s(cid:48));
6
7
8
9
10
11
12
13
14
15 until timeout or abort-signal;
Output :Global crashing seeds crashes
end
end
This seed synchronization mechanism employs a global-
local style data structure as shown in Figure 3. The local seed
queue is maintained by each base fuzzer, while the global pool
is maintained by the monitor for sharing interesting seeds
among all base fuzzers. In ensemble fuzzing, the union of
these base fuzzers’ results is needed to identify interesting
seeds during the whole fuzzing process. Accordingly, the
global coverage map is designed, and any new paths or new
branches covered by the interesting seeds will be added into
this global map. This global map can not only help decide
which seeds to be synchronized, but also help de-duplicate
and triage the results. Furthermore, to output the ﬁnal fuzzing
report after completing all fuzzing jobs, any interesting seeds
which contribute to triggering unique crashes will be stored