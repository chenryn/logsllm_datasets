### 2、添加多级分片字段  
支持hash和interval分片  
add_dimension()  
Required Arguments  
Name	|Description  
---|---  
main_table	|Identifier of hypertable to add the dimension to.  
column_name	|Name of the column to partition by.  
Optional Arguments  
Name	|Description  
---|---  
number_partitions	|Number of hash partitions to use on column_name. Must be > 0.  
interval_length	|Interval that each chunk covers. Must be > 0.  
partitioning_func	|The function to use for calculating a value's partition (see create_hypertable instructions).  
### 3、删除分片  
删除指定 时间点、多久 之前的分片  
drop_chunks()  
Required Arguments  
Name	|Description  
---|---  
older_than	|Timestamp of cut-off point for data to be dropped, i.e., anything older than this should be removed.  
Optional Arguments  
Name	|Description  
---|---  
table_name	|Hypertable name from which to drop chunks. If not supplied, all hypertables are affected.  
schema_name	|Schema name of the hypertable from which to drop chunks. Defaults to public.  
cascade	|Boolean on whether to CASCADE the drop on chunks, therefore removing dependent objects on chunks to be removed. Defaults to FALSE.  
### 4、设置分片时间区间  
set_chunk_time_interval()  
Required Arguments  
Name	|Description  
---|---  
main_table	|Identifier of hypertable to update interval for.  
chunk_time_interval	|Interval in event time that each new chunk covers. Must be > 0.  
### 5、分析函数 - 第一条  
first()  
Required Arguments  
Name	|Description  
---|---  
value	|The value to return (anyelement)  
time	|The timestamp to use for comparison (TIMESTAMP/TIMESTAMPTZ or integer type)  
例如，查找所有传感器的最早上传的温度值。  
```  
SELECT device_id, first(temp, time)  
  FROM metrics  
  GROUP BY device_id;  
```  
使用递归亦可实现：  
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
### 6、分析函数 - 最后一条  
last()  
Required Arguments  
Name	|Description  
---|---  
value	|The value to return (anyelement)  
time	|The timestamp to use for comparison (TIMESTAMP/TIMESTAMPTZ or integer type)  
例如，查找每5分钟时间区间内，每个传感器的最新温度值  
```  
SELECT device_id, time_bucket('5 minutes', time) as interval,  
  last(temp, time)  
  FROM metrics  
  WHERE time > now () - interval '1 day'  
  GROUP BY device_id, interval  
  ORDER BY interval DESC;  
```  
使用递归亦可实现：  
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
### 7、分析函数 - 柱状图  
histogram()  
Required Arguments  
Name	|Description  
---|---  
value	|A set of values to partition into a histogram  
min	|The histogram’s lower bound used in bucketing  
max	|The histogram’s upper bound used in bucketing  
nbuckets	|The integer value for the number of histogram buckets (partitions)  
例如，  
电池电量20到60，均分为5个BUCKET区间，返回5+2个值的数组（表示每个bucket区间的记录数），头尾分为别为边界外的记录数有多少。  
```  
SELECT device_id, histogram(battery_level, 20, 60, 5)  
  FROM readings  
  GROUP BY device_id  
  LIMIT 10;  
 device_id  |          histogram  
------------+------------------------------  
 demo000000 | {0,0,0,7,215,206,572}  
 demo000001 | {0,12,173,112,99,145,459}  
 demo000002 | {0,0,187,167,68,229,349}  
 demo000003 | {197,209,127,221,106,112,28}  
 demo000004 | {0,0,0,0,0,39,961}  
 demo000005 | {12,225,171,122,233,80,157}  
 demo000006 | {0,78,176,170,8,40,528}  
 demo000007 | {0,0,0,126,239,245,390}  
 demo000008 | {0,0,311,345,116,228,0}  
 demo000009 | {295,92,105,50,8,8,442}  
```  
### 8、分析函数 - 时间区间  
类似date_trunc，但是更强大，可以用任意interval进行时间截断。方便用户使用。  
time_bucket()  
Required Arguments  
Name	|Description  
---|---  
bucket_width	|A PostgreSQL time interval for how long each bucket is (interval)  
time	|The timestamp to bucket (timestamp/timestamptz/date)  
Optional Arguments  
Name	|Description  
---|---  
offset	|The time interval to offset all buckets by (interval)  
### 9、数据概貌查看函数 - 时序表概貌  
hypertable_relation_size_pretty()  
```  
SELECT * FROM hypertable_relation_size_pretty('conditions');  
 table_size | index_size | toast_size | total_size  
------------+------------+------------+------------  
 1171 MB    | 1608 MB    | 176 kB     | 2779 MB  
```  
### 10、数据概貌查看函数 - 分片大小  
chunk_relation_size_pretty()  
```  
SELECT * FROM chunk_relation_size_pretty('conditions');  
                chunk_table                 | table_size | index_size | total_size  
---------------------------------------------+------------+------------+------------  
 "_timescaledb_internal"."_hyper_1_1_chunk"  | 28 MB      | 36 MB      | 64 MB  
 "_timescaledb_internal"."_hyper_1_2_chunk"  | 57 MB      | 78 MB      | 134 MB  
 ...  
```  
### 11、数据概貌查看函数 - 索引大小  
indexes_relation_size_pretty()  
```  
SELECT * FROM indexes_relation_size_pretty('conditions');  
             index_name_              | total_size  
--------------------------------------+------------  
 public.conditions_device_id_time_idx | 1143 MB  
 public.conditions_time_idx           | 465 MB  
```  
### 12、导出时序元数据  
https://raw.githubusercontent.com/timescale/timescaledb/master/scripts/dump_meta_data.sql  
```  
psql [your connect flags] -d your_timescale_db  dumpfile.txt  
```  
## 小结  
timescaleDB是一个非常好用的时序数据处理插件，隐藏了分片逻辑（对用户透明），同时提供了大量的API函数接口，以及性能优化。在时序场景使用很赞。  
结合PostGIS插件，PostgreSQL在时空处理这块，如虎添翼。  
## 参考  
[《PostgreSQL 按需切片的实现(TimescaleDB插件自动切片功能的plpgsql schemaless实现)》](../201711/20171102_02.md)    
[《时序数据库有哪些特点? TimescaleDB时序数据库介绍》](../201704/20170409_05.md)    
[《PostgreSQL on Linux 最佳部署手册》](../201611/20161121_01.md)    
http://docs.timescale.com/v0.8/tutorials/tutorial-hello-nyc  
http://docs.timescale.com/v0.8/introduction  
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")