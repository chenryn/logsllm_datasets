### Effects of Measurement Method

Figure 14 compares the results of FixSched and Attack experiments for Firefox and Chrome on the same chart. The data demonstrates that FixSched experiments accurately represent recognizability under actual attack conditions, although they are used primarily for scalability. Not only are the distributions similar, but the pages with high recognizability in FixSched also exhibit high recognizability in the Attack scenario (though this is not explicitly shown on the chart). Figure 15 presents the Attack results for all three browsers.

Recognizability appears higher in Attack experiments due to the use of a smaller ambiguity set. A smaller set reduces the maximum similarity between any target page and the "best" false positive from the ambiguity set, thereby lowering the threshold required by the matching algorithm to avoid false positives. Consequently, some memprints that match the page signature in Attack experiments no longer match in FixSched experiments, which use larger ambiguity sets and thus higher matching thresholds.

### Recognizability Results for Chrome and Firefox

Figure 13 shows the results for Chrome and Firefox. Up to 75% of distinguishable pages have a recognizability above 20%, meaning at least one out of every five visits produces a recognizable memprint. For a quarter of the pages, every visit produces a recognizable memprint with no false positives. Figures 11 and 12 indicate that if a non-negligible false positive rate is acceptable, the recognition rate is much higher.

### Impact of Concurrent Workload

The presence of other processes running concurrently with the victim and the attacker does not reduce the efficacy of the attack. These processes slow down both the victim's memory allocations and the attacker's measurements, but the patterns measured by the attacker remain largely unchanged. Figure 16 illustrates the results of our attack when a CPU- and I/O-intensive workload, such as the PostMark benchmark, is running concurrently. PostMark simulates an email, network news, and e-commerce client, executing in a loop with 100,000 file-system transactions per iteration, causing a 36% CPU load. In this case, the concurrent workload slows the browser process more than the attack process, allowing the latter to obtain more measurements and resulting in a better memprint match.

### Effects of Measurement Rate

Figure 17 shows that even if the attack process decreases the rate at which it measures the memory footprint of the browser process, resulting in smaller memprints, the recognition rates remain high for distinguishable pages. Figure 18 indicates that the Linux CPU cheat, used to decrease the reported CPU usage and hide measurement activity, does not significantly affect the accuracy of the attack.

### Variations of the Basic Attack

Algorithm 1 has several variations. For example, matching can ignore total footprint sizes and focus solely on the sequence of deltas or changes caused by allocating and de-allocating large images. These variations work well for certain pages and browsers. For instance, Firefox allocates a large buffer to process a big image, uncompresses the image into this buffer, and then frees the buffer after rendering. If the buffer is larger than 4MB, de-allocation immediately returns memory to the OS, a change observable by the attacker. This variation of the matching algorithm tends to perform well in recognizing pages with many large, high-resolution images, such as the front pages of many adult sites (see Table II).

### Advanced Attacks

In Section VI, we demonstrated how to use the dynamics of memory usage to recognize pages browsed by the victim. We now show how to combine these methods with secondary side channels to infer more private information. All attacks in this section work against all tested browsers, but each figure only shows the results for a particular browser.

#### Inferring the State of Web Sessions

Most changes in the browser’s footprint occur while a page is being loaded and rendered. The footprint then remains stable until the user requests a new page. For example, Figure 19 shows changes in the footprint as the user enters a search query, views the results, and clicks on a link. The increments and the size of the stable footprints vary depending on the page within the site, potentially leaking sensitive information.

Figures 20 and 21 illustrate that a successful login into Google Health and OkCupid (a dating site) results in a significant increase in the footprint, as profile pages tend to use more JavaScript than login pages. The attacker can infer whether the victim is a member of the site. Paid users of OkCupid do not see ads, while free users see Flash advertisements. The Flash plugin runs as a separate process, allowing the attacker to determine the victim's membership status.

When the victim views medical records from Google Health, a new PDF reader process appears. The file name in its command-line arguments (available via proc on Linux, but not Android) reveals the victim’s username. Figure 22 shows that the attacker can infer the medical condition the victim is interested in by measuring the increase in the browser’s memory footprint after clicking on a link from webmd.com.

#### Disambiguating Similar Memprints

Secondary side channels can help disambiguate pages that otherwise have similar memprints. For example, google.com and google.de use the same template, resulting in very similar memprints. Figure 23 shows how they can be distinguished by their duration if the browser is located in the US.

Once the attack process is running concurrently with the browser, it can directly observe which shared libraries are used by the browser. Figure 24 shows that if the matching algorithm considers changes in the size of shared memory in addition to changes in the main footprint (DRS), the recognition rate improves for moderately stable pages. Other useful side channels include timing of DNS resolutions, command-line arguments of various processes, etc.

### Exploiting CPU Scheduling Statistics

Zhang and Wang showed that the ESP (stack pointer) value revealed by proc leaks information about keystroke timings [20]. Their attack is unlikely to work on Android because Dalvik-based Android applications, such as the MMS app, are highly nondeterministic. To illustrate that any accounting information about a process can leak its secrets, we show how to use scheduling statistics for keystroke sniffing. Unlike ESP, these statistics are used by top and are available in all versions of Unix. Zhang and Wang mention the possibility that the number of interrupts can be used for keystroke sniffing but do not describe a concrete attack. The interrupt count is global, not process-specific, making the feasibility of this attack uncertain. Scheduling statistics, on the other hand, provide a more robust, process-specific channel.

In Linux, the number of context switches made by a process can be found in /proc//schedstat, offering a reliable method for keystroke sniffing.