     Ring parameters for enp1s0:
     Pre-set maximums:
     RX:             4080
     RX Mini:        0
     RX Jumbo:       16320
     TX:             255
     Current hardware settings:
     RX:             255
     RX Mini:        0
     RX Jumbo:       0
     TX:             255
    ```
2.  如果 `Pre-set maximums`{.literal} 部分中的值大于
    `Current hardware settings`{.literal} 部分，请提高 RX 环缓冲：
    ::: itemizedlist
    -   要临时将 `enp1s0`{.literal} 设备的 RX 环缓冲改为
        `4080`{.literal}，请输入：
        ``` literallayout
        # ethtool -G enp1s0 rx 4080
        ```
    -   要永久更改 RX 环缓冲，请创建一个 NetworkManager 分配程序脚本。
        详情请查看[如何使 NIC ethtool
        设置持久（引导时自动应用）文章](https://access.redhat.com/solutions/2127401){.link}并创建一个分配程序脚本。
    :::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
根据您的网卡使用的驱动，环缓冲的改变会很快中断网络连接。
:::
::: itemizedlist
**其它资源**
-   有关满足丢弃不需要数据包的原因的统计信息，请参阅 [[*RHEL7 文章
    ifconfig 和 ip
    命令报告数据包丢弃*]{.emphasis}](https://access.redhat.com/solutions/2073223){.link}。
-   [[*我是否应该关注 0.05%
    数据包的丢弃率？*]{.emphasis}](https://access.redhat.com/solutions/742043){.link}
-   `ethtool(8)`{.literal} man page。
:::
:::
:::
[]{#testing-basic-network-settings_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#testing-basic-network-settings_configuring-and-managing-networking.html#testing-basic-network-settings_configuring-and-managing-networking}第 41 章 测试基本网络设置 {.title}
:::
这部分论述了如何执行基本网络测试。
::: section
::: titlepage
# []{#testing-basic-network-settings_configuring-and-managing-networking.html#using-the-ping-utility-to-verify-the-ip-connection-to-other-hosts_testing-basic-network-settings}使用 ping 程序验证 IP 到其他主机的连接 {.title}
:::
`ping`{.literal} 实用程序将 ICMP
数据包发送到远程主机。您可以使用此功能来测试 IP
与不同主机的连接是否正常工作。
::: itemizedlist
**流程**
-   将主机的 IP 地址放在同一子网中，如您的默认网关：
    ``` literallayout
    # ping 192.0.2.3
    ```
    如果命令失败，请验证默认网关设置。
-   在远程子网中指定主机的 IP 地址：
    ``` literallayout
    # ping 198.162.3.1
    ```
:::
如果命令失败，请验证默认网关设置，并确保网关在连接的网络间转发数据包。
:::
::: section
::: titlepage
# []{#testing-basic-network-settings_configuring-and-managing-networking.html#using-the-host-utility-to-verify-name-resolution_testing-basic-network-settings}使用 host 实用程序验证名称解析 {.title}
:::
这个步骤描述了如何在 Red Hat Enterprise Linux 中验证名称解析。
::: itemizedlist
**流程**
-   使用 `host`{.literal} 实用程序验证名称解析是否正常工作。例如：要将
    `client.example.com`{.literal} 主机名解析为 IP 地址，请输入：
    ``` literallayout
    # host client.example.com
    ```
:::
如果命令返回错误，如 `connection timed out`{.literal} 或
`no servers could be reached`{.literal}，请验证您的 DNS 设置。
:::
:::
[]{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#introduction-to-networkmanager-debugging_configuring-and-managing-networking}第 42 章 网络管理器调试介绍 {.title}
:::
提高所有或某些域的日志级别有助于记录 NetworkManager
执行的更多操作详情。管理员可以使用这些信息排除问题。NetworkManager
提供不同的级别和域来生成日志信息。`/etc/NetworkManager/NetworkManager.conf`{.literal}
文件是 NetworkManager 的主要配置文件。日志存储在日志中。
本节提供有关为 NetworkManager
启用调试日志以及使用不同日志级别和域配置日志量的信息。
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#debugging-levels-and-domains_introduction-to-networkmanager-debugging}调试级别和域 {.title}
:::
您可以使用 `levels`{.literal} 和 `domains`{.literal} 参数来管理
NetworkManager
的调试。这个级别定义了详细程度，而域定义了记录给定的严重性日志的消息类别(`level`{.literal})。
::: informaltable
  日志级别            描述
  ------------------- -----------------------------------------
  `OFF`{.literal}     不记录任何有关 NetworkManager 的信息
  `ERR`{.literal}     仅记录严重错误
  `WARN`{.literal}    记录可以反映操作的警告信息
  `INFO`{.literal}    记录各种有助于跟踪状态和操作的信息
  `DEBUG`{.literal}   为调试启用详细日志记录
  `TRACE`{.literal}   启用比 `DEBUG`{.literal} 级更详细的日志
:::
请注意，后续的级别记录来自以前级别的所有信息。例如，将日志级别设置为
`INFO`{.literal} 也会记录 `ERR`{.literal} 和 `WARN`{.literal}
日志级别中包含的信息。
::: itemizedlist
**其它资源**
-   有关 `domains`{.literal} 的详情，请参考
    `NetworkManager.conf(5)`{.literal} man page。
:::
:::
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#setting-the-networkmanager-log-level_introduction-to-networkmanager-debugging}设置 NetworkManager 日志级别 {.title}
:::
默认情况下，所有日志域都被设置为记录 `INFO`{.literal}
日志级别。在收集调试日志前禁用速率限制。使用速率限制时，如果短时间内有太多信息，`systemd-journald`{.literal}
会丢弃信息。这会在日志级别为 `TRACE`{.literal} 时发生。
此流程禁用速率限制，并为所有（ALL）域启用记录调试日志。
::: orderedlist
**流程**
1.  要禁用速率限制，编辑 `/etc/systemd/journald.conf`{.literal}
    文件，取消 `[Journal]`{.literal} 部分中的 `RateLimitBurst`{.literal}
    参数的注释，并将其值设置为 `0`{.literal} ：
    ``` literallayout
    RateLimitBurst=0
    ```
2.  重启 `systemd-journald`{.literal} 服务。
    ``` literallayout
    # systemctl restart systemd-journald
    ```
3.  使用以下内容创建
    `/etc/NetworkManager/conf.d/95-nm-debug.conf`{.literal} 文件：
    ``` literallayout
    [logging]
    domains=ALL:DEBUG
    ```
    `domains`{.literal} 参数可以包含多个用逗号分开的
    `domain:level`{.literal} 对。
4.  重启 NetworkManager 服务。
    ``` literallayout
    # systemctl restart NetworkManager
    ```
:::
:::
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#temporarily-setting-log-levels-at-run-time-using-nmcli_introduction-to-networkmanager-debugging}在运行时使用 nmcli 临时设置日志级别 {.title}
:::
您可以使用
`nmcli`{.literal}在运行时更改日志级别。但是，红帽建议使用配置文件启用调试并重启
NetworkManager。使用 `.conf`{.literal} 文件更新调试 `levels`{.literal}
和 `domains`{.literal} 有助于调试引导问题，并从初始状态捕获所有日志。
::: orderedlist
**流程**
1.  可选：显示当前的日志设置：
    ``` literallayout
    # nmcli general logging
      LEVEL  DOMAINS
      INFO   PLATFORM,RFKILL,ETHER,WIFI,BT,MB,DHCP4,DHCP6,PPP,WIFI_SCAN,IP4,IP6,A
    UTOIP4,DNS,VPN,SHARING,SUPPLICANT,AGENTS,SETTINGS,SUSPEND,CORE,DEVICE,OLPC,
    WIMAX,INFINIBAND,FIREWALL,ADSL,BOND,VLAN,BRIDGE,DBUS_PROPS,TEAM,CONCHECK,DC
    B,DISPATCH
    ```
2.  要修改日志级别和域，请使用以下选项：
    ::: itemizedlist
    -   要将所有域的日志级别设置为相同的 `LEVEL`{.literal}，请输入：
        ``` literallayout
        # nmcli general logging level LEVEL domains ALL
        ```
    -   要更改特定域的级别，请输入：
        ``` literallayout
        # nmcli general logging level LEVEL domains DOMAINS
        ```
        请注意，使用这个命令更新日志级别会禁用所有其他域的日志功能。
    -   要更改特定域的级别并保持其它域的级别，请输入：
        ``` literallayout
        # nmcli general logging level KEEP domains DOMAIN:LEVEL,DOMAIN:LEVEL
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#introduction-to-networkmanager-debugging_configuring-and-managing-networking.html#viewing-networkmanager-logs_introduction-to-networkmanager-debugging}查看 NetworkManager 日志 {.title}
:::
您可以查看 NetworkManager 日志进行故障排除。
::: itemizedlist
**流程**
-   要查看日志，请输入：
    ``` literallayout
    # journalctl -u NetworkManager -b
    ```
:::
::: itemizedlist
**其它资源**
-   `NetworkManager.conf(5)`{.literal} man page。
-   `journalctl`{.literal} man page。
:::
:::
:::
[]{#capturing-network-packets_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#capturing-network-packets_configuring-and-managing-networking.html#capturing-network-packets_configuring-and-managing-networking}第 43 章 捕获网络数据包 {.title}
:::
要调试网络问题和通讯，您可以捕获网络数据包。以下部分提供有关捕获网络数据包的步骤和附加信息。
::: section
::: titlepage
# []{#capturing-network-packets_configuring-and-managing-networking.html#using-xdpdump-to-capture-network-packets-including-packets-dropped-by-xdp-programs_capturing-network-packets}使用 xdpdump 捕获包括 XDP 程序丢弃的数据包在内的网络数据包 {.title}
:::
`xdpdump`{.literal} 工具捕获网络数据包。与 `tcpdump`{.literal}
实用程序不同，`xdpdump`{.literal} 为这个任务使用扩展的 Berkeley Packet
Filter（eBPF）程序。这可让 `xdpdump`{.literal} 同时捕获由 Express Data
Path（XDP）程序丢弃的数据包。用户空间工具（如
`tcpdump`{.literal}）无法捕获这些被丢弃的软件包，以及 XDP
程序修改的原始数据包。
您可以使用 `xdpdump`{.literal} 来调试已经附加到接口中的 XDP
程序。因此，实用程序可以在 XDP
程序启动和完成后捕获数据包。在后者的情况下，`xdpdump`{.literal} 也捕获了
XDP 操作。默认情况下，`xdpdump`{.literal} 会在 XDP
程序条目中捕获传入的数据包。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在 AMD 和 Intel 64 位以外的构架中，`xdpdump`{.literal}
工具只作为技术预览提供。红帽产品服务级别协议（SLA）不支持技术预览功能，且其功能可能并不完善，因此红帽不建议在生产环境中使用它们。这些预览可让用户早期访问将来的产品功能，让用户在开发过程中测试并提供反馈意见。
如需有关
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview){.link}
的信息，请参阅红帽客户门户网站中的技术预览功能支持范围。
:::
请注意，`xdpdump`{.literal} 没有数据包过滤或解码功能。但是您可以将它与
`tcpdump`{.literal} 结合使用来解码数据包。