the domain name:
if (msg.origin.indexOf(".example.com") != -1) { ... }
As should be evident, this comparison will not only match sites within
example.com but will also happily accept messages from www.example.com
.bunnyoutlet.com. In all likelihood, you will stumble upon code like this more
than once in your journeys. Such is life!
NOTE Recent tweaks to HTML5 extended the postMessage(...) API to incorporate somewhat
overengineered “ports” and “channels,” which are meant to facilitate stream-oriented
communications between websites. Browser support for these features is currently very
limited and their practical utility is unclear, but from the security standpoint, they do
not appear to be of any special concern.
Interactions with Browser Credentials
As we are wrapping up the overview of the DOM-based same-origin policy, it
is important to note that it is in no way synchronized with ambient creden-
tials, SSL state, network context, or many other potentially security-relevant
parameters tracked by the browser. Any two windows or frames opened in a
browser will remain same-origin with each other even if the user logs out
from one account and logs into another, if the page switches from using a
good HTTPS certificate to a bad one, and so on.
This lack of synchronization can contribute to the exploitability of other
security bugs. For example, several sites do not protect their login forms against
cross-site request forgery, permitting any third-party site to simply submit a
username and a password and log the user into an attacker-controlled account.
This may seem harmless at first, but when the content loaded in the browser
before and after this operation is considered same-origin, the impact of nor-
mally ignored “self-inflicted” cross-site scripting vulnerabilities (i.e., ones
where the owner of a particular account can target only himself) is suddenly
Content Isolation Logic 145
much greater than it would previously appear. In the most basic scenario, the
attacker may first open and keep a frame pointing to a sensitive page on the
targeted site (e.g., http://www.fuzzybunnies.com/address_book.php) and then log
the victim into the attacker-controlled account to execute self-XSS in an
unrelated component of fuzzybunnies.com. Despite the change of HTTP cre-
dentials, the code injected in that latter step will have unconstrained access
to the previously loaded frame, permitting data theft.
Same-Origin Policy for XMLHttpRequest
The XMLHttpRequest API, mentioned in this book on several prior occasions,
gives JavaScript programs the ability to issue almost unconstrained HTTP
requests to the server from which the host document originated, and read
back response headers and the document body. The ability to do so would
not be particularly significant were it not for the fact that the mechanism
leverages the existing browser HTTP stack and its amenities, including ambi-
ent credentials, caching mechanisms, keep-alive sessions, and so on.
A simple and fairly self-explanatory use of a synchronous XMLHttpRequest
could be as follows:
var x = new XMLHttpRequest();
x.open("POST", "/some_script.cgi", false);
x.setRequestHeader("X-Random-Header", "Hi mom!");
x.send("...POST payload here...");
alert(x.responseText);
Asynchronous requests are very similar but are executed without block-
ing the JavaScript engine or the browser. The request is issued in the back-
ground, and an event handler is called upon completion instead.
As originally envisioned, the ability to issue HTTP requests via this API
and to read back the data is governed by a near-verbatim copy of the same-
origin policy with two minor and seemingly random tweaks. First, the document
.domain setting has no effect on this mechanism, and the destination URL
specified for XMLHttpRequest.open(...) must always match the true origin of the
document. Second, in this context, port number is taken into account in Inter-
net Explorer versions prior to 9, even though this browser ignores it elsewhere.
The fact that XMLHttpRequest gives the user an unprecedented level of
control over the HTTP headers in a request can actually be advantageous to
security. For example, inserting a custom HTTP header, such as X-Coming-
From: same-origin, is a very simple way to verify that a particular request is not
coming from a third-party domain, because no other site should be able to
insert a custom header into a browser-issued request. This assurance is not
very strong, because no specification says that the implicit restriction on cross-
domain headers can’t change;* nevertheless, when it comes to web security,
such assumptions are often just something you have to learn to live with.
Control over the structure of an HTTP request can also be a burden,
though, because inserting certain types of headers may change the meaning
of a request to the destination server, or to the proxies, without the browser
146 Chapter 9
realizing it. For example, specifying an incorrect Content-Length value may
allow an attacker to smuggle a second request into a keep-alive HTTP session
maintained by the browser, as shown here.
var x = new XMLHttpRequest();
x.open("POST", "http://www.example.com/", false);
// This overrides the browser-computed Content-Length header:
x.setRequestHeader("Content-Length", "7");
// The server will assume that this payload ends after the first
// seven characters, and that the remaining part is a separate
// HTTP request.
x.send(
"Gotcha!\n" +
"GET /evil_response.html HTTP/1.1\n" +
"Host: www.bunnyoutlet.com\n\n"
);
If this happens, the response to that second, injected request may be mis-
interpreted by the browser later, possibly poisoning the cache or injecting con-
tent into another website. This problem is especially pronounced if an HTTP
proxy is in use and all HTTP requests are sent through a shared channel.
Because of this risk, and following a lot of trial and error, modern brows-
ers blacklist a selection of HTTP headers and request methods. This is done
with relatively little consistency: While Referer, Content-Length, and Host are
universally banned, the handling of headers such as User-Agent, Cookie, Origin,
or If-Modified-Since varies from one browser to another. Similarly, the TRACE
method is blocked everywhere, because of the unanticipated risk it posed to
httponly cookies—but the CONNECT method is permitted in Firefox, despite
carrying a vague risk of messing with HTTP proxies.
Naturally, implementing these blacklists has proven to be an entertain-
ing exercise on its own. Strictly for your amusement, consider the following
cases that worked in some browsers as little as three years ago:1
XMLHttpRequest.setRequestHeader("X-Harmless", "1\nOwned: Gotcha");
or
XMLHttpRequest.setRequestHeader("Content-Length: 123 ", "");
or simply
XMLHttpRequest.open("GET\thttp://evil.com\tHTTP/1.0\n\n", "/", false);
* In fact, many plug-ins had problems in this area in the past. Most notably, Adobe Flash permitted
arbitrary cross-domain HTTP headers until 2008, at which point its security model underwent a
substantial overhaul. Until 2011, the same plug-in suffered from a long-lived implementation
bug that caused it to resend any custom headers to an unrelated server following an attacker-
supplied HTTP 307 redirect code. Both of these problems are fixed now, but discovery-to-patch
time proved troubling.
Content Isolation Logic 147
NOTE Cross-Origin Resource Sharing2 (CORS) is a proposed extension to
XMLHttpRequest that permits HTTP requests to be issued across domains and
thenread back if a particular response header appears in the returned data. The mech-
anism changes the semantics of the API discussed in this session by allowing certain
“vanilla” cross-domain requests, meant to be no different from regular navigation, to be
issued via XMLHttpRequest.open(...) with no additional checks; more elaborate
requests require an OPTIONS-based preflight request first. CORS is already available
in some browsers, but it is opposed by Microsoft engineers, who pursued a competing
XDomainRequest approach in Internet Explorer 8 and 9. Because the outcome of
this conflict is unclear, a detailed discussion of CORS is reserved for Chapter 16, which
provides a more systematic overview of upcoming and experimental mechanisms.
Same-Origin Policy for Web Storage
Web storage is a simple database solution first implemented by Mozilla engi-
neers in Firefox 1.5 and eventually embraced by the HTML5 specification.3 It
is available in all current browsers but not in Internet Explorer 6 or 7.
Following several dubious iterations, the current design relies on two
simple JavaScript objects: localStorage and sessionStorage. Both objects offer an
identical, simple API for creating, retrieving, and deleting name-value pairs
in a browser-managed database. For example:
localStorage.setItem("message", "Hi mom!");
alert(localStorage.getItem("message"));
localstorage.removeItem("message");
The localStorage object implements a persistent, origin-specific storage that
survives browser shutdowns, while sessionStorage is expected to be bound to the
current browser window and provide a temporary caching mechanism that is
destroyed at the end of a browsing session. While the specification says that
both localStorage and sessionStorage should be associated with an SOP-like ori-
gin (the protocol-host-port tuple), implementations in some browsers do not
follow this advice, introducing potential security bugs. Most notably, in Inter-
net Explorer 8, the protocol is not taken into account when computing the
origin, putting HTTP and HTTPS pages within a shared context. This design
makes it very unsafe for HTTPS sites to store or read back sensitive data
through this API. (This problem is corrected in Internet Explorer 9, but
there appears to be no plan to backport the fix.)
In Firefox, on the other hand, the localStorage behaves correctly, but the
sessionStorage interface does not. HTTP and HTTPS use a shared storage con-
text, and although a check is implemented to prevent HTTP content from
reading keys created by HTTPS scripts, there is a serious loophole: Any key
first created over HTTP, and then updated over HTTPS, will remain visible
to nonencrypted pages. This bug, originally reported in 2009,4 will eventually
be resolved, but when is not clear.
148 Chapter 9
Security Policy for Cookies
We discussed the semantics of HTTP cookies in Chapter 3, but that discus-
sion left out one important detail: the security rules that must be imple-
mented to protect cookies belonging to one site from being tampered with
by unrelated pages. This topic is particularly interesting because the approach
taken here predates the same-origin policy and interacts with it in a number
of unexpected ways.
Cookies are meant to be scoped to domains, and they can’t be limited
easily to just a single hostname value. The domain parameter provided with
acookie may simply match the current hostname (such as foo.example.com),
but this will not prevent the cookie from being sent to any eventual sub-
domains, such as bar.foo.example.com. A qualified right-hand fragment of the
hostname, such as example.com, can be specified to request a broader scope,
however.
Amusingly, the original RFCs imply that Netscape engineers wanted to
allow exact host-scoped cookies, but they did not follow their own advice.
The syntax devised for this purpose was not recognized by the descendants
ofNetscape Navigator (or by any other implementation for that matter). To
a limited extent, setting host-scoped cookies is possible in some browsers by
completely omitting the domain parameter, but this method will have no
effect in Internet Explorer.
Table 9-3 illustrates cookie-setting behavior in some distinctive cases.
Table 9-3: A Sample of Cookie-Setting Behaviors
Cookie set at foo.example.com, Scope of the resulting cookie
domain parameter is:
Non–IE browsers Internet Explorer
(value omitted) foo.example.com (exact) *.foo.example.com
bar.foo.example.com Cookie not set: domain more specific than origin
foo.example.com *.foo.example.com
baz.example.com Cookie not set: domain mismatch
example.com *.example.com
ample.com Cookie not set: domain mismatch
.com Cookie not set: domain too broad, security risk
The only other true cookie-scoping parameter is the path prefix: Any
cookie can be set with a specified path value. This instructs the browser to send
the cookie back only on requests to matching directories; a cookie scoped to
domain of example.com and path of /some/path/ will be included on a request to
http://foo.example.com/some/path/subdirectory/hello_world.txt
This mechanism can be deceptive. URL paths are not taken into account
during same-origin policy checks and, therefore, do not form a useful secu-
rity boundary. Regardless of how cookies work, JavaScript code can simply hop
between any URLs on a single host at will and inject malicious payloads into
Content Isolation Logic 149
such targets, abusing any functionality protected with path-bound cookies.
(Several security books and white papers recommend path scoping as a secu-
rity measure to this day. In most cases, this advice is dead wrong.)
Other than the true scoping features (which, along with cookie name,
constitute a tuple that uniquely identifies every cookie), web servers can also
output cookies with two special, independently operated flags: httponly and
secure. The first, httponly, prevents access to the cookie via the document.cookie
API in the hope of making it more difficult to simply copy a user’s credentials
after successfully injecting a malicious script on a page. The second, secure,
stops the cookie from being submitted on requests over unencrypted proto-
cols, which makes it possible to build HTTPS services that are resistant to
active attacks.*
The pitfall of these mechanisms is that they protect data only against
reading and not against overwriting. For example, it is still possible for Java-
Script code delivered over HTTP to simply overflow the per-domain cookie
jar and then set a new cookie without the secure flag.† Because the Cookie
header sent by the browser provides no metadata about the origin of a partic-
ular cookie or its scope, such a trick is very difficult to detect. A prominent
consequence of this behavior is that the common “stateless” way of prevent-
ing cross-site request forgery vulnerabilities by simultaneously storing a secret
token in a client-side cookie and in a hidden form field, and then comparing
the two, is not particularly safe for HTTPS websites. See if you can figure
outwhy!
NOTE Speaking of destructive interference, until 2010, httponly cookies also clashed with
XMLHttpRequest. The authors of that API simply have not given any special
thought to whether the XMLHttpRequest.getResponseHeader(...) function
should be able to inspect server-supplied Set-Cookie values flagged as httponly—
with predictable results.
Impact of Cookies on the Same-Origin Policy
The same-origin policy has some undesirable impact on the security of cookies
(specifically, on the path-scoping mechanism), but the opposite interaction
is more common and more problematic. The difficulty is that HTTP cookies
often function as credentials, and in such cases, the ability to obtain them is
roughly equivalent to finding a way to bypass SOP. Quite simply, with the right
set of cookies, an attacker could use her own browser to interact with the tar-
get site on behalf of the victim; same-origin policy is taken out of the picture,
and all bets are off.
* It does not matter that https://webmail.example.com/ is offered only over HTTPS. If it uses a cookie
that is not locked to encrypted protocols, the attacker may simply wait until the victim navigates
to http://www.fuzzybunnies.com/, silently inject a frame pointing to http://webmail.example.com/ on
that page, and then intercept the resulting TCP handshake. The browser will then send all the
webmail.example.com cookies over an unencrypted channel, and at this point the game is essen-
tially over.
† Even if this possibility is prevented by separating the jars for httponly and normal cookies,
multiple identically named but differently scoped cookies must be allowed to coexist, and they
will be sent together on any matching requests. They will be not accompanied by any useful
metadata, and their ordering will be undefined and browser specific.
150 Chapter 9
Because of this property, any discrepancies between the two security mech-
anisms can lead to trouble for the more restrictive one. For example, the rela-
tively promiscuous domain-scoping rules used by HTTP cookies mean that it is
not possible to isolate fully the sensitive content hosted on webmail.example.com
from the less trusted HTML present on blog.example.com. Even if the owners of
the webmail application scope their cookies tightly (usually at the expense of
complicating the sign-on process), any attacker who finds a script injection
vulnerability on the blogging site can simply overflow the per-domain cookie
jar, drop the current credentials, and set his own *.example.com cookies. These
injected cookies will be sent to webmail.example.com on all subsequent requests
and will be largely indistinguishable from the real ones.
This trick may seem harmless until you realize that such an action may
effectively log the victim into a bogus account and that, as a result, certain
actions (such as sending email) may be unintentionally recorded within that
account and leaked to the attacker before any foul play is noticed. If webmail
sounds too exotic, consider doing the same on Amazon or Netflix: Your casual
product searches may be revealed to the attacker before you notice anything
unusual about the site. (On top of this, many websites are simply not prepared
to handle malicious payloads in injected cookies, and unexpected inputs may
lead to XSS or similar bugs.)
The antics of HTTP cookies also make it very difficult to secure encrypted
traffic against network-level attackers. A secure cookie set by https://webmail
.example.com/ can still be clobbered and replaced by a made-up value set by a
spoofed page at http://webmail.example.com/, even if there is no actual web ser-
vice listening on port 80 on the target host.
Problems with Domain Restrictions
The misguided notion of allowing domain-level cookies also poses problems
for browser vendors and is a continuing source of misery. The key question is
how to reliably prevent example.com from setting a cookie for *.com and avoid
having this cookie unexpectedly sent to every other destination on theInternet.
Several simple solutions come to mind, but they fall apart when you have
to account for country-level TLDs: example.com.pl must be prevented from set-
ting a *.com.pl cookie, too. Realizing this, the original Netscape cookie speci-
fication provided the following advice:
Only hosts within the specified domain can set a cookie for a domain
and domains must have at least two (2) or three (3) periods in them
to prevent domains of the form: “.com”, “.edu”, and “va.us”.
Any domain that fails within one of the seven special top level
domains listed below only requires two periods. Any other domain
requires at least three. The seven special top level domains are:
“COM”, “EDU”, “NET”, “ORG”, “GOV”, “MIL”, and “INT”.
Alas, the three-period rule makes sense only for country-level registrars
that mirror the top-level hierarchy (example.co.uk) but not for the just as pop-
ulous group of countries that accept direct registrations (example.fr). In fact,
there are places where both approaches are allowed; for example, both
example.jp and example.co.jp are perfectly fine.
Content Isolation Logic 151
Because of the out-of-touch nature of this advice, most browsers dis-
regarded it and instead implemented a patchwork of conditional expressions
that only led to more trouble. (In one case, for over a decade, you could actu-