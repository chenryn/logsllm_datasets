the path from client to guard and again on the path from exit to des-
tination. We consider this an uninteresting case; for the remainder
of this section, we omit ASes which contain clients, or destinations
for a given client and activity, from the set of adversaries.
For each behavior, we use TorPS to conduct 50000 Monte Carlo
simulations of three months of client activity spanning the period
from January 2013 to March 2013. We use the output of these
simulations to model multiple clients.
Client Location.
TorPS simulated output paths are client ag-
nostic; Tor currently makes no changes to path selection behavior
based on client attributes (doing so could unintentionally decrease
the safety of its users). However, since the path between client
and guard is required to analyze exposure to network-level adver-
saries, we must place the clients somewhere within the network.
We assign clients to the ﬁve most popular3 client ASes (AS3320,
AS3209, AS3269, AS13184, and AS6805) as identiﬁed by Edman
and Syverson in 2009 [15], noting that similar techniques have been
used recently by papers investigating Tor network security [44].
The ﬁve ASes include four from Germany and one from Italy. We
then analyze the client-to-guard path ﬁve times for each sample
stream from our Monte Carlo simulations, once for each of the
client origins.
6.2.2 Network Adversaries
We consider three types of network adversaries: autonomous
systems, Internet exchange points, and Internet exchange point or-
ganizations. A network connection often transits multiple ASes
as it moves from source to destination; a network operator inter-
ested in deanonymizing Tor trafﬁc need only have the trafﬁc transit
through its domain of control once on each side of the path.
IXPs represent points where ASes interconnect; trafﬁc between
multiple ASes may ﬂow through a single IXP. In this position, IXPs
may have signiﬁcant ability to deanonymize Tor users.
As an extension of our IXP analysis, we also consider the sit-
uation in which a single organization may control multiple IXPs.
Manually comparing IXP descriptions from the IXP Mapping Project
and company websites for IXPs, we identify 19 IXP organizations
which collectively administer 90 distinct IXPs. To identify the or-
ganizations which are able to compromise client streams we per-
form the same procedure as for individual IXPs, replacing IXP
identiﬁers with organization identiﬁers where possible. We include
IXPs for which we have no identiﬁed organization as standalone
organizations.
6.2.3 Analysis
We begin our analysis by identifying a set of speciﬁc adversar-
ial entities for each combination of client behavior and client ori-
gin. Previous work has often considered the ability of network ad-
versaries to compromise Tor circuits independently, reporting that
a large percentage of circuits can be deanonymized by some AS.
3We exclude Chinese ASes, since Tor has subsequently been
blocked in China.
Adv. Type
AS
AS
AS
IXP
IXP Org.
ID
3356
1299
6939
286
DE-CIX DE-CIX
Description
Level 3 Communications
TeliaNet Global
Hurricane Electric
DE-CIX Frankfurt
Comp. %
0.5%
0.5%
0.4%
0.1%
0.1%
Table 4: Identiﬁed Adversarial Entities for clients originating in AS3320
using BitTorrent. Comp. % gives the probability that that entity will com-
promise any given stream.
While this is a useful metric for system operators who are con-
cerned with the security of Tor in the aggregate, it is not credible
to consider the set of all independent ASes as potential adversaries
from the user perspective. We identify distinct adversarial enti-
ties speciﬁc to each simulated user origin and behavior. By focus-
ing our analysis on the ability of these entities to compromise user
streams, we are able to produce security metrics which are more
relevant to an end user of Tor.
To identify candidate entities, we aggregate all streams over all
client samples originating from a given client location. We then
compute the client-side and destination-side paths, and count the
number of streams in which a given adversarial entity (AS, IXP, or
IXP organization) exists on both sides. We then select the entity
which compromises the largest number of streams to understand
the extent to which a strong adversary affects user security. Table 4
shows a sampling of the identiﬁed adversarial entities for BitTor-
rent users originating from AS3320.
Our simulation results show that there is signiﬁcant variation in
the ability of network adversaries to compromise Tor users depend-
ing on where the user is located, but that on the whole network
adversaries present a signiﬁcant potential threat. While we run ex-
periments for all selected client origins (as described in Section
6.2.1), we display only the best and worst cases in our results for
readability. We measure best and worst as the client origin with the
smallest and largest area under the curve, respectively, in their CDF
of time to compromise.
Against an AS-level adversary (Figure 4a), our results show com-
promise is highly likely in the worst case scenario regardless of user
behavior. 45.9%, 64.9%, and 76.4% of Typical, IRC, and BitTor-
rent samples use a compromised stream within one day. At least
one stream is compromised within the three month period for over
98% of samples. The best case client origins fare signiﬁcantly bet-
ter, but retain signiﬁcant exposure to AS adversaries: IRC users are
exposed within 44 days at the median. Although more than 50%
of BitTorrent and Typical users evade compromise for the entire 90
day period, a signiﬁcant proportion of them, 38% and 44% respec-
tively, still use compromised streams.
IXPs (Figure 4b) and IXP organizations (Figure 4c) appear sim-
ilar to the AS adversary in the worst case, but signiﬁcantly less of
a threat in the best case. Fewer than 20% of clients use a stream
that could be compromised within three months. This difference is
not terribly surprising: while IXPs represent high-degree connec-
tion points through the network, 80% of the network links do not
traverse IXPs. Thus, the worst case likely indicates a situation in
which the client’s outbound path to a guard transits through an IXP
while the best case traverses non-IXP links.
While IXPs and IXP organizations are generally similar, it is
clear from the Typical user model that those concerned about the
ability of IXPs to compromise Tor streams should consider organi-
zations rather than individual IXP locations: in the best case stan-
dalone IXPs are able to compromise just 3.7% of samples within 30
days, while organizations compromise 12.4% in the same period.
344(a) Time to ﬁrst stream compromised by
AS adversary.
(b) Time to ﬁrst stream compromised by
IXP adversary.
(c) Time to ﬁrst stream compromised by
IXP Org. adversary.
(d) Varying time to ﬁrst compromise as an AS adversary controls more
entities.
(e) Fraction of streams compromised by
AS adversary.
Figure 4: Network adversary analysis. “best” and “worst” indicate the client origin from the top ﬁve ASes from [15] with the smallest and largest area under
the curve, respectively. “N Adversaries” indicates an adversary that controls the top N AS entities.
We additionally consider how adversary strength affects the like-
lihood of stream compromise. We consider adversaries of varying
strength by adjusting the number of entities they control from one
to three. Thus, our weakest adversary controls the top adversarial
entity of that type and the strongest controls the top three adver-
sarial entities. Figure 4d shows how the time to ﬁrst compromised
stream drops as an adversary controls more of the top adversarial
AS entities for each behavior model. Here we consider only the
best case since just one AS entity is already able to compromise a
signiﬁcant fraction of samples in the worst case. The addition of
even one more AS entity causes the number of samples compro-
mised within 30 days to jump 156%, 65.8%, and 122% for Bit-
Torrent, IRC, and Typical users. The amount of “ground” that two
ASes can cover is signiﬁcantly higher than the amount that one can
cover.
In addition to the speed of compromise, we are equally interested
in the probability that the adversary compromises any given stream.
Figure 4e shows the fraction of streams that an AS adversary con-
trolling the top entity compromises given a particular user activity.
The probability of compromising each stream is quite low even in
the worst case: 0.6%, 5.1% and 1.6% at the median for BitTorrent,
IRC and Typical users respectively. As with the relay adversary,
however, the compromises happen in higher-rate bursts during the
period in which trafﬁc to a guard is observable.
Discussion.
At a high level, the network adversary analysis
shows that – in contrast to the relay model – client behavior which
results in low diversity of client destinations is most likely to result
in a compromise. For example, a single AS adversary can compro-
mise 50% of clients using IRC within 44 days, even under the most
optimistic client placement. By contrast, fewer than half of Typical
clients are compromised within the entire period, and BitTorrent
users have even lower compromise rates. This effect is attributable
to simple probability: as the set of destinations which the adversary
must cover narrows it becomes more likely that the user picked at
the same time a destination and guard that the adversary is near.
An implication is that to the extent that Tor clients seek to evade a
network adversary that can optimally position himself, they should
go to a diverse set of destinations and should use as many different
paths as possible.
It is also notable that a large number of clients encounter com-
promised streams very quickly followed by a steep decline in the
rate. Figure 4e shows that the overall per-stream compromise rate
is relatively low, so this phenomenon is somewhat surprising. Just
as in the case of a relay adversary, this result is partly attributable to
how guard selection interacts with relay selection. Given the initial
set of guards, the path between the client and entry guard is rela-
tively ﬁxed. If the adversarial entity exists on the guard side of the
path, then it need only wait until it appears on the exit side. How-
ever, if the entity does not exist on any of the paths from a client
to it chosen guards, it will not compromise any streams until new
guards are selected. This results in a relative plateau after initial
compromises (disturbed only by minor guard as churn nodes leave
the network or hibernate) until 30 days have passed and new guards
begin to be selected.
Finally, while IXPs have a distinctly lower likelihood of com-
promising client trafﬁc, it should be noted that the complexity of
performing trafﬁc correlation at an IXP is likely to be signiﬁcantly
lower than at an AS. ASes may span large regions and trafﬁc may
not pass through the same routers on the forward and return path,
while IXPs by their very nature are geographically concentrated.
345This may make it easier for a single rogue agent at an IXP to per-
form trafﬁc analysis than it is to organize a concerted AS-wide ef-
fort. Tor users evaluating the ability of network adversaries to com-
promise their communications should consider this factor; IXPs
may represent a lower overall threat proﬁle, but have fewer obsta-
cles to effecting a coordinated trafﬁc analysis attack.
7. ALTERNATIVE PATH SELECTION
This paper has thus far focused on Tor’s path selection proto-
col and has outlined severe security implications. Unsurprisingly,
path selection algorithms also have a large impact on Tor’s per-
formance because they directly affect how client load is balanced
among the available relay resources and therefore how congested
relays become. Researchers have investigated and proposed sev-
eral improvements to Tor’s current path selection algorithm. This
section explores the security implications of the most effective of
these proposals to both inform the adoption of these changes by The
Tor Project and to show how future work can apply our methods to
provide accurate security assessments of new proposals.
7.1 Congestion Awareness
Based on the results of Wacek et al. [44], the most effective
proposed improvements to path selection is the “instant response”
mode of Congestion-Aware Tor (CAT) by Wang et al. [45]. The
main idea in CAT is that clients create a local view of circuit con-
gestion through opportunistic and active measurements of circuit
round trip times (RTTs). Circuits that are or become too con-
gested are ignored or dropped, respectively. To accomplish this,
CAT collects ﬁve RTT measurements at circuit construction time
before the circuit is used. When a pre-built circuit is needed, the
client chooses the circuit with the lowest average circuit conges-
tion, where circuit congestion for each of the RTT measurements is
computed by subtracting the minimum RTT ever measured on that
circuit. While using the circuit, the client continues to opportunis-
tically measure circuit RTTs using existing Tor protocol cells. If
the mean of the last 5 congestion measurements is greater than 0.5
seconds, the client stops using that circuit for new streams.4
7.2 Methodology
As CAT only slightly modiﬁes Tor’s original path selection algo-
rithm, our methodology for evaluating CAT’s security is largely the
same as described in Section 5. However, we made several changes
to TorPS to incorporate the new selection algorithm. In addition to
implementing the instant response mode of CAT, we also needed
a source for relay congestion over our analysis period. Although
TorPS uses historical data collected from The Tor Project in order
to build paths, data about relay congestion has not been collected
historically.
Without available data about relay congestion in the live Tor net-
work, we created relay-speciﬁc congestion models as follows. We
created a virtual Tor network using Shadow [25] following a stan-
dard Tor network modeling approach [26]. As Shadow runs the
real Tor software, we maximize ﬁdelity to Tor protocols. We then
implemented the CAT extensions in Tor5 and instrumented Shadow
to collect ﬁne-grained timing information for packets as they travel
between the virtual nodes and through the circuit. This timing in-
formation allows us to precisely isolate congestion due to network,
kernel, or application latency, giving us a unique view of conges-
tion at each relay over time.
4Although unspeciﬁed by Wang et al. [45], we assume the circuit is
marked dirty and destroyed only when exiting streams are ﬁnished.
5Our CAT implementation is based on Tor stable version 0.2.3.25.
(a) Time to ﬁrst compromised guard and exit.
(b) Fraction of streams with compromised guard and exit.
Figure 5: Empirical distribution of security metrics, 10/2012 – 3/2013, 83.3
MiB/s malicious guard and 16.7 MiB/s malicious exit, Tor vs Congestion-
aware Tor (CAT) path selection, “typical" user model.
Running thousands of Tor nodes simultaneously is time consum-
ing, and therefore it is not feasible to gather congestion data for the
6-month analysis period that we require. Instead, we ran several
short identical pairs of experiments with different seeds, and use
the Kolmogorov-Smirnov (K-S) test statistic as a distance metric
between each resulting pair of relay-speciﬁc congestion traces. We
lengthen and repeat the experiment to increase our sample size un-
til the median K-S distance of all relay trace pairs is below ﬁve
percent, increasing our conﬁdence in the consistency of congestion
produced in our virtual network.
We create congestion proﬁles by smoothing each relay conges-
tion trace by binning the values. We assign each simulated re-
lay the proﬁle with the closest consensus bandwidth weight to its