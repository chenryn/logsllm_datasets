Although such instructions are rare (apr_atomic_casptr()
is called three times in the Apache HTTPD source code), they act
as sink hubs that spread imprecision due to this over-conservative
aliasing assumption.
Cascading Imprecision: The struct pointer casts and integer to
pointer conversions are the root sources of the imprecision. One
consequence of the imprecision is that the DSA algorithm may gen-
erate artiﬁcial forward edges (calls) for indirect call sites.
Although initially such artiﬁcial forward edges may not directly
correspond to attack gadgets in the Apache HTTPD, they introduce
artiﬁcial recursions to the call graph. Because maintaining context
sensitivity for recursions is undecidable, the DSA algorithm has to
conservatively give up context sensitivity for the function calls be-
tween functions inside a recursive cycle (even they are artiﬁcially
recursive due to the analysis imprecision). This loss of context sen-
sitivity further introduces imprecision in ﬁeld sensitivity because of
type mismatch via unrealizable information propagation paths.
In our Apache HTTPD example, this cascading effect contin-
ues until the DSA algorithm reaches an (imprecise) ﬁx-point on the
analysis results. As a result, 51.3% of the abstract struct objects
the DSA algorithm tracks are merged into single abstract variables
(i.e., the loss of ﬁeld sensitivity); we observed a phenomenal ar-
tiﬁcial recursion cycle that contains 110 functions (i.e., due to the
loss of context sensitivity). Some of this imprecision may be at-
tributed to changes in LLVM IR metadata since version 1.9. Previ-
ous versions relied on type annotations that used to persist from the
llvm-gcc front-end into the LLVM IR metadata that are no longer
available. LLVM DSA prior to version 1.9 used a set of type-based
heuristics to improve the accuracy of the analysis. Aggressive use
of type-based heuristics is unsound and could introduce false neg-
atives (opening up another possible set of attacks).
3.3 Unsound Analysis with Annotations
To maintain soundness guarantees, existing pointer analysis al-
gorithms conservatively over-approximate results. For example,
sound pointer analysis algorithms conservatively assume that two
pointers may alias or an indirect call site may call a function when
analyzing hard-to-analyze C idioms or code design patterns.
One way to improve the security of ﬁne-grained CFI is to gen-
erate CFGs using pointer analysis algorithms that relax sound-
ness guarantees. Unsound pointer analysis can avoid such over-
conservative assumptions and generate restrictive CFGs that may
stop attacks based on ACICS gadgets. One consequence of apply-
ing unsound analysis, however, is that a restrictive CFG may cause
undesirable false positives that interfere with legitimate program
operation.
Our experiments show that developers adopt design patterns that
improve modularity and maintainability at the cost of adding pro-
gram analysis complexity. One way to improve pointer-analysis
precision, is to rely on programmers to provide annotations that
help the underlying analysis navigate hard-to-analyze code seg-
ments. One promising research direction is the design of an an-
notation system that improves the underlying pointer analysis with
minimal developer involvement.
4. ACICS DISCOVERY TOOL
We next discuss how to automate the discovery of ACICS gad-
gets using the ACICS Discovery Tool (ADT). To help discover can-
didate ICS/target function pairs (ACICS gadgets), ADT dynami-
cally instruments applications using the GDB 7.0+ reverse debug-
ging framework. For each candidate ACICS gadget, ADT runs a
backward data-ﬂow analysis that discovers the location of the ICS
function pointer (and its arguments) in memory. Once a candidate
pair is identiﬁed, ADT automatically corrupts the forward edge
pointer and its arguments to verify that remote code execution can
be achieved. Below, we describe ADT’s approach in detail.
4.1 Approach
As input, ADT takes a target program, a list of candidate indirect
call sites (ICS), sample inputs that exercise the desired program
functionality (and the list of ICS), and the address of a candidate
target function inside the target program. For each ICS location,
ADT performs the following steps (illustrated in Figure 5):
2. Backward Dataﬂow Analysis: Once execution reaches the
ICS location, ADT performs a backward reaching-deﬁnition
dataﬂow analysis (see Section 4.2) from the registers con-
taining the target function address and its arguments to the
memory locations that hold their values.
3. Determine Last Write IP: Next, ADT needs to identify pro-
gram locations that can be used to corrupt the ICS function
pointer and its values. To do this, ADT restarts the debugger
and instruments the memory addresses, identiﬁed in the pre-
vious step, to record the code locations (i.e., the instruction
pointer) that perform memory writes to these locations. To
differentiate memory writes that occur in loops, ADT main-
tains a write counter. Using this information, ADT can de-
termine the ideal program location to corrupt the ICS target
and its arguments such as to minimize possible interference.
4. Corrupt Function Pointers and Arguments: At this point,
ADT is able to restart the debugger and halt the program at
the ideal point identiﬁed in the previous step. Then ADT
redirects the ICS function pointer and its arguments to the
target function. Additionally, by tracking every statement
executed until the target ICS is reached, a lower bound of the
liveness of the ACICS can be reported.
The liveness of an ACICS allows us to reason about its
exploitability;
if the liveness persists across the program
lifecycle, the ICS can be attacked by almost any memory
read/write vulnerability, regardless of where it occurs tem-
porarily. On the other hand, an ACICS whose liveness is
contained in a single function is signiﬁcantly less exploitable.
5. ACICS validation: Finally, ADT validates the ACICS gad-
get by verifying that the target function is reached, the argu-
ment values match the values in the corruption step and ul-
timately verifying that the target function can exercise func-
tionality equivalent to remote code execution (e.g., create a
ﬁle, launch a process, etc.).
Input
Input
: The target ICS instruction icsinst.
: Prev, a function that returns the previous instruction (or NULL if not
available) before a given instruction.
Output: The memory address that stores the call target or NULL if failed
r ←− i
1 if icsinst is the form of “call REG[i]” then
2
3 else
4
return NULL
5 inst ←− Prev (icsinst)
6 while inst (cid:54)= N U LL do
if inst modiﬁes REG[r] then
if inst is the form of “REG[r] = a ∗ REG[i] + c” then
r ←− i
7
8
9
10
11
if inst is the form of “REG[r] = ∗(a ∗ REG[i] + c)” then
return a × regv (i) + b
inst ←− Prev (inst)
12
13 return NULL
Figure 6: Backward dataﬂow analysis to identify the target
address
1. Reach ICS: ADT instruments program execution, using the
GDB framework, with the ability to perform reverse exe-
cution analysis once program execution reaches a candidate
ICS location. Speciﬁcally, ADT adds a breakpoint which en-
ables the process recording functionality at the entry to the
function enclosing the ICS location.
4.2 Backward Dataﬂow
Figure 6 presents ADT’s backward dataﬂow analysis algorithm.
The goal of this analysis to perform a backward reaching deﬁnition
analysis from the register values that hold the target function and
its arguments to corruptible memory locations. For example, in
Figure 5: ACICS Discovery Tool
Figure 5, the dataﬂow algorithm called on input x would produce
the address of r.handler. This is done by iteratively stepping
back in time (reverse debugging) and examining any instruction
that modiﬁes the register which originally contained the function
pointer. We assume that the instructions involved in the dataﬂow of
the target function can be represented as the composition of linear
functions and dereferences, and report a dataﬂow error if this does
not hold. Once a function which dereferences a memory location is
discovered, linear function models are used to compute the source
address of the forward edge.
ADT contains several additional checks, such as an assertion to
ensure that the forward edge pointer value at the ICS matches the
value observed at the computed source memory address which is
the output of the backward dataﬂow procedure. The typical use
case discovered by the backward analysis is the lookup of a member
element from a struct pointer; such as x->y; additional levels of
indirection such as x->y->z are currently not supported.
4.3 Discussion
ADT was not designed to discover all possible ACICS gadgets
but rather as a tool to facilitate the construction of proof-of-concept
exploits. Speciﬁcally, ADT under-reports the number of ACICS
gadgets for the following reasons. First, the backward dataﬂow
analysis does not support multi-level argument redirection. Sec-
ond, ADT assumes deterministic execution; non-deterministic be-
havior will result in under-reporting ACICS gadgets (i.e., it may
miss ACICS gadgets but it will not report incorrect results). Third,
ADT does not consider possible ACICS gadgets caused by unin-
tentional arguments–pointers left in registers from previous func-
tion calls which might become relevant again if a function pointer
were changed to point at a higher function of higher arity. Finally,
we acknowledge that increasing the distance from ACICS gadget
to target system calls may introduce more opportunities for failure
due to argument clobbering. Our results show that in practice this is
not a problem. Software engineering techniques such as refactoring
make this less of a problem in large, well engineered software.
5. EVALUATION
We evaluate Control Jujutsu using two proof-of-concept exploits
against two popular web servers Apache and Nginx. We assume
Total ICS
Exercised in HTTP GET request
Exercised during startup
Unexercised
172
20
45
121
Table 1: Indirect Call Sites Dynamic Analysis
Number of ICS dynamically encountered
Detected forward edge pointer on the heap/global
Automatically corrupted forward edges
Automatically corrupted forward edges + arguments
51
34
34
3
Table 2: Automatic Corruption Analysis
that the servers are protected using ﬁne-grained CFI (unlimited
tags), to enforce only intended control transfers on the forward-
edge (i.e,. indirect calls/jumps), and a shadow stack to protect the
backward-edge (i.e. returns). For the forward edge, the CFG is
constructed using the state-of-the-art DSA [31] pointer analysis al-
gorithm. To protect the backward edge, we assume a shadow stack
implementation.
Suitable ICS:
For each exploit, we evaluate the availability of ACICS gadgets
by measuring 1) the number of suitable indirect call sites and 2)
the number of target functions that can be used together to launch
remote code execution attacks.
5.1 Apache HTTPD 2.4.12
5.1.1
Our evaluation of the unoptimized Apache binary shows that the
server contains 172 indirect call sites (ICS). We limit our evaluation
to the core binary and omit reporting potential ICS target in other
Apache modules, such as the Apache Portable Runtime (APR) and
APR-util libraries. From these 172 sites, we want to ﬁnd a subset of
sites 1) which are exercised when the program processes a request
and 2) whose forward edge pointer and arguments can be success-
fully corrupted by our ADT tool without crashing the program.
We run our ADT tool described in Section 4 on each of the 172
sites. We use a test script program that sends simple HTTP GET
call*x(y)r.xyzr.abcr.handlerr.lenHEAPx = r->handlery = r->lenvalid_target_1(y)valid_target_2(y)valid_target_3(y)malicious(y)(2) Backward dataﬂowanalysis (3) Determine Last Write IP(4) Corrupt Function Pointer and Arguments(5) ACICS Validation(1) Reach ICSrequests to drive our experiments. There are 51 sites exercised in
our experiments. The remaining 121 sites do not satisfy our re-
quirement, because they are either inside speciﬁc modules that are
not enabled by default or depend on speciﬁc functionalities that a
simple HTTP GET request does not exercise.
Table 1 presents the classiﬁcation results of ICS exercised during
different execution stages of Apache. In order to detect whether
an ICS is exercised during the HTTP GET request life cycle or the
startup, we vary when the test script is called in our tool. Our results
show that there are 20 sites exercised during an HTTP GET request
life cycle and 45 sites exercised during startup. Note that some of
sites exercised during startup are also exercised by an HTTP GET
request .
We use our ADT tool to detect the location of the forward edge
pointer and arguments of each of the exercised 51 ICS and to cor-
rupt these values. Table 2 presents our experimental results. Of the
51 ICS that are exercised dynamically in our experiments, our tool
successfully corrupt forward edge pointers for 34 ICS. For 3 ICS
our tool successfully corrupted both the forward edge pointers and
the arguments.
Code patterns inside Apache facilitate our attack. We discovered
that 108 of the total 172 ICS listed are in the Apache binary, but
generated from the APR library’s “hook” system, which allows a
function to register a function pointer for a callback at a later time.
For all of the ICS generated by the APR hooks, the forward edge
pointers are stored inside the global struct _hooks inside APR (see
Section 2, Figures 1 and 4). This hook structure persists across the
lifetime of the Apache worker process, which is ideal for our attack.
Additionally, almost all of the hook functions have argument that
are pointers to objects visible across the entire request lifecycle,
such as the ubiquitous request_rec* r argument. This is also
ideal for corruption purposes.
In our Apache exploit example in Section 2, we use the ICS in-
side ap_run_dirwalk_stat(), the function meets all of our
requirements and it is exercised during every HTTP GET request.
While our evaluation focuses on unoptimized binaries to facilitate
the construction of our proof-of-concept attacks, we also veriﬁed
that the target ACICS gadget is still present in LLVM -02 level of
optimizations. We believe that optimizations such as inlining will
not signiﬁcantly reduce the number of available gadgets.
5.1.2 Target Functions:
We run a script that searches the Apache source code for system
calls that we can use to trigger behaviors equivalent to RCE such
as exec() and system(). For each function in Apache, the
script measures the distance between the function and a function
that contains such system calls.
Table 3 presents the results. The farther away a target func-
tion is in the CallGraph, the harder it generally is to use it in the
payload. At the same time, more viable functions become avail-
able. Related work has found similar results for the Windows
platform [20]. Our example Apache exploit in Section 2 uses
piped_log_spawn(), which is two calls away from the sys-
tem call.
Direct calls to system calls
1 call away
2 calls away
4
13
31
Table 3: Target Functions Count Based on CallGraph distance
5.2 Nginx 1.7.11
Our analysis for Nginx mirrors the analysis we performed for
Apache source code. We used the ACICS Discovery Tool (ADT)
described in Section 4 and performed manual analysis to ﬁnd the
most suitable indirect call site and target function to demonstrate
our attack.
5.2.1
Our analysis on the unoptimized Nginx binary shows that there
are 314 ICS in Nginx. We run our ADT tool on each of the 314
ICS in a way similar to our Apache experiments. Table 4 presents
the classiﬁcation results of ICS based on different execution stages
and Table 5 presents the corruption experiment results.
Suitable ICS:
Our results show that there are 36 ICS exercised during our Ng-
inx experiments and 27 of these ICS are exercised during an HTTP
GET request lifecycle after Nginx startup. Of the 36 exercised ICS,
our ADT tool successfully corrupted the forward edge pointers and
arguments for 4 ICS.
Total ICS
Exercised in HTTP GET request
Exercised during startup
Unexercised
314
27
18
278
Table 4: Indirect Call Sites Dynamic Analysis
Number of ICS dyanmically encountered
Detected forward edge pointer on the heap/global
Automatically corrupted forward edges
Automatically corrupted forward edges + arguments
36
7
7
4
Table 5: Automatic Corruption Analysis
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21