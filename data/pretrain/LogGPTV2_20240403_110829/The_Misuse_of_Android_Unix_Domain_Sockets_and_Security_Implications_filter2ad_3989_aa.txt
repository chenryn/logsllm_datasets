title:The Misuse of Android Unix Domain Sockets and Security Implications
author:Yuru Shao and
Jason Ott and
Yunhan Jack Jia and
Zhiyun Qian and
Zhuoqing Morley Mao
The Misuse of Android Unix Domain Sockets and Security
Implications
Yuru Shaoy, Jason Ott(cid:3), Yunhan Jack Jiay, Zhiyun Qian(cid:3), Z. Morley Maoy
yUniversity of Michigan, (cid:3)University of California, Riverside
{yurushao, jackjia, zmao}@umich.edu, PI:EMAIL, PI:EMAIL
ABSTRACT
In this work, we conduct the (cid:12)rst systematic study in un-
derstanding the security properties of the usage of Unix do-
main sockets by both Android apps and system daemons
as an IPC (Inter-process Communication) mechanism, espe-
cially for cross-layer communications between the Java and
native layers. We propose a tool called SInspector to ex-
pose potential security vulnerabilities in using Unix domain
sockets through the process of identifying socket addresses,
detecting authentication checks, and performing data (cid:13)ow
analysis. Our in-depth analysis revealed some serious vul-
nerabilities in popular apps and system daemons, such as
root privilege escalation and arbitrary (cid:12)le access. Based
on our (cid:12)ndings, we propose countermeasures and improved
practices for utilizing Unix domain sockets on Android.
1.
INTRODUCTION
Inter-process communication (IPC) is one of the most fun-
damental features provided by modern operating systems.
IPC makes it possible for diﬀerent processes to cooperate,
enriching the functionalities an operating system can oﬀer to
end users. In the context of Android, one of the most popu-
lar mobile operating systems to date, to support communica-
tions between diﬀerent apps and interactions between diﬀer-
ent components of the same app, it provides a set of easy-to-
use, Android-speci(cid:12)c IPC mechanisms, primarily including
Intents, Binder, and Messenger [4, 11]. However, Android
IPCs are meanwhile signi(cid:12)cant attack vectors that can be
leveraged to carry out attacks such as confused deputy and
man-in-the-middle [23, 15, 17, 19].
While Android relies upon a tailored Linux environment,
it still inherits a subset of traditional/native Linux IPCs
(which are distinct from Android IPCs), such as signals,
Netlink sockets, and Unix domain sockets.
In fact, they
are heavily utilized by the native layer of the Android run-
time. Exposed Linux IPC channels, if not properly pro-
tected, could be abused by adversaries to exploit vulnerabil-
ities within privileged system daemons and the kernel. Sev-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c⃝ 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978297
eral vulnerabilities (e.g., CVE-2011-1823, CVE-2011-3918,
and CVE-2015-6841) have already been reported. Vendor
customizations make things worse, as they expose additional
Linux IPC channels: CVE-2013-4777 and CVE-2013-5933.
Nevertheless, unlike Android IPCs, the use of Linux IPCs
on Android has not yet been systematically studied.
In addition to the Android system, apps also have access
to the Linux IPCs implemented within Android. Among
them, Unix domain sockets are the only one apps can easily
make use of: signals are not capable of carrying data and
not suitable for bidirectional communications; Netlink sock-
ets are geared for communications across the kernel space
and the user space. The Android software development kit
(SDK) provides developers Java APIs for using Unix do-
main sockets. Meanwhile, Android’s native development
kit (NDK) also provides native APIs for accessing low-level
Linux features, including Unix domain sockets. Unix do-
main sockets are also known as local sockets, a term which
we use interchangeably. They are completely diﬀerent from
the \local socket" in ScreenMilker [25], which refers to a TCP
socket used for local IPC instead of network communication.
Many developers use Unix domain sockets in their apps,
despite the fact that Google’s best practices encourage them
to use Android IPCs [4]. The reason being Android IPCs are
not suited to support communications between an app’s Java
and native processes/threads. While there are APIs avail-
able in SDK, no such API exists in the native layer [7]. As
a result, developers must resort to using Unix domain sock-
ets to realize cross-layer IPC. Furthermore, some developers
port existing Linux programs and libraries, which already
utilize Unix domain sockets, to the Android platform.
Android IPCs are well documented on the oﬃcial devel-
oper website, replete with training materials and examples.
This helps educate developers on best practices and secure
implementations. However, there is little documentation
about Unix domain sockets, leaving developers to use them
as they see (cid:12)t | this may result in vulnerable implemen-
tations. Moreover, using Unix domain sockets securely re-
quires expertise in both Linux’s and Android’s security mod-
els, which developers may not have.
Motivated by the above facts, we undertake the (cid:12)rst sys-
tematic study focusing on the use of Unix domain sockets
on Android. We present SInspector, a tool for automatically
vetting apps and system daemons with the goal of discover-
ing potential misuse of Unix domain sockets. Given a set of
apps, SInspector (cid:12)rst identi(cid:12)es ones that use Unix domain
sockets based on API signatures and permissions. SInspec-
tor then (cid:12)lters out apps that use Unix domain sockets se-
curely and thus are not vulnerable. We develop several tech-
niques to achieve this, such as socket address analysis and
authentication check detection. For system daemons, SIn-
spector collects runtime information to assist static analysis.
SInspector reports potentially vulnerable apps and system
daemons for manual examination. We also categorize Unix
domain socket usage, any security measures employed by
existing apps and system daemons, and common mistakes
made by developers. From this study, we suggest counter-
measures in regard to OS-level changes and secure Unix do-
main socket IPC for both app and system developers.
In
this work, we do not consider network sockets, as local IPC
is not their common usage.
We (cid:12)nd that only 26.8% apps and 15% system daemons in
our dataset enforce proper security checks in order to pre-
vent attacks exploiting Unix domain socket channels. All
apps using a particular Unix domain socket namespace are
vulnerable to at least DoS attacks. We uncover a number
of serious vulnerabilities in apps. For example, we are able
to gain root privilege by exploiting a popular root manage-
ment tool, as well as grant/deny any other app’s root ac-
cess, without any user awareness. Moreover, we discover
vulnerabilities with customizations on LG phones and dae-
mons implemented by Qualcomm. These vulnerabilities al-
low us to factory reset the device, toggle the SIM card, and
modify system date and time. Attack demos can be found
on our project website https://sites.google.com/site/
unixdomainsocketstudy.
In summary, we make the following contributions:
(cid:15) We develop SInspector for analyzing apps and system
daemons to discover potential vulnerabilities they ex-
pose through Unix domain socket channels. We over-
come challenges in identifying socket addresses, detect-
ing authentication checks, and performing data (cid:13)ow
analysis on native code.
(cid:15) Using SInspector, we perform the (cid:12)rst study of Unix
domain sockets on Android, including the categoriza-
tion of usage, existing security measures being en-
forced, and common (cid:13)aws and security implications.
We analyze 14,644 apps and 60 system daemons, (cid:12)nd-
ing that 45 apps, as well as 9 system daemons, have
vulnerabilities, some of which are very serious.
(cid:15) We conduct an in-depth analysis on vulnerable apps
and daemons that fail to properly protect Unix domain
socket channels, and suggest countermeasures and bet-
ter practices for utilizing Unix domain sockets.
2. BACKGROUND
We provide the necessary background to understand the
security vulnerabilities in how Android Unix domain sockets
are used in apps and system daemons.
2.1 Android Security Model
The Android platform consists of multiple layers. One of
Android’s design goals is to provide a secure platform so that
\[S]ecurity-savvy developers can easily work with and rely on
(cid:13)exible security controls. Developers less familiar with secu-
rity practices will be protected by safe defaults." [3] Android
apps are isolated and run in their own process. They com-
municate with peer apps through secure, Android-speci(cid:12)c
IPCs (Binder, Intents, etc). These Android IPC mecha-
nisms, as documented by Google, are the preferred IPC
mechanisms as they \allow you to verify the identity of the
application connecting to your IPC and set security policy
for each IPC mechanism." [4]
However, Unix domain sockets undermine the goals of An-
droid’s security philosophy. They are unable to achieve the
same guarantees as well as the Android IPCs. In particular,
according to our analysis, Android APIs for using Unix do-
main sockets expose unprotected socket channels by default.
2.2 Unix Domain Sockets
A Unix domain socket is a data communications endpoint
for exchanging data between processes executing within the
same host operating system. It supports transmission of a
reliable stream of bytes (SOCK_STREAM, similar to TCP). In
addition, it supports ordered and reliable transmission of
datagrams (SOCK_SEQPACKET), or unordered and unreliable
transmission of datagrams (SOCK_DGRAM, similar to UDP).
Unix domain sockets diﬀer from Internet sockets in that
(1) rather than using an underlying network protocol, all
communication occurs entirely within the operating system
kernel; and (2) servers listen on addresses in Unix domain
socket namespaces, instead of IP addresses with port num-
bers. Traditionally, there are two Unix domain socket ad-
dress namespaces, as shown in Table 1.
Table 1: Unix domain socket namespaces.
Namespace
FILESYSTEM
ABSTRACT
Has socket
Security enforcement
(cid:12)le
YES
NO
SELinux File permission
YES
YES
YES
N/A
FILESYSTEM. An address in this namespace is asso-
ciated with a (cid:12)le on the (cid:12)lesystem. When the server binds
to an address (pathname), a socket (cid:12)le is automatically cre-
ated. Socket (cid:12)le permissions are enforced through Linux’s
discretionary access control (DAC) system. The server must
have privilege to create the (cid:12)le with the given pathname,
otherwise binding fails. Other processes who want to com-
municate with the server must have read/write privileges for
the socket (cid:12)le. By setting permissions of the socket (cid:12)le prop-
erly, the server can prevent unauthorized connections. The
Android framework introduces a new namespace called RE-
SERVED, which is in essence a sub-namespace of FILESYS-
TEM. Socket (cid:12)les are located under a particular directory,
/dev/socket/, reserved for system use.
ABSTRACT. This namespace is completely indepen-
dent of the (cid:12)lesystem. No (cid:12)le permissions can be applied
to sockets under this namespace.
In native code, an AB-
STRACT socket address is distinguished from a FILESYS-
TEM socket by setting sun_path[0] to a null byte ‘\0’.
The Android framework provides APIs for using Unix do-
main sockets from both Java code and native code. These
APIs use ABSTRACT as the default namespace, unless de-
velopers explicitly specify a preferred namespace. All Unix
domain socket addresses are publicly accessible from (cid:12)le
/proc/net/unix/.
SELinux supports (cid:12)ne-grained access
control for both FILESYSTEM and ABSTRACT sockets,
so does SEAndroid. Compared to FILESYSTEM sockets,
ABSTRACT sockets are less secure as DAC does not ap-
ply. However, they are more reliable; communication over a
Table 2: Types of attacks malware can carry out by exploiting Unix domain sockets.
Role
Prerequisite(s)
Attacks
Malicous Server
1) Start running ahead of the real server
2) Client has no/weak authentication of server
Data Leakage/Injection, DoS
Malicous Client
Server has no/weak authentication of client
Privilege Escalation, Data Leakage/Injection, DoS
FILESYSTEM socket could be interrupted if the socket (cid:12)le
is somehow deleted.
2.3 Threat Model and Assumptions
Unix domain sockets are designed for local communica-
tions only, which means the client and server processes must
be on the same host OS. Therefore, they are inaccessible for
remote network-based attackers. Our threat model assumes
a malicious app that attempts to exploit exposed Unix do-
main socket channels is installed on the user device. This is
realistic since calling Unix domain socket APIs only requires
the INTERNET permission, which is so commonly used [2] that
the attacker can easily repackage malicious payloads into
popular apps and redistribute them. The attacker may also
build a standalone exploit app which evades anti-malware
products due to its perceived low privilege.
We summarize attacks malware can launch in Table 2. It
is able to impersonate either a client or a server to talk to the
reciprocal host. A rogue Unix domain socket server could
obtain sensitive data from clients or feed clients fake data
to impact client functionality. A mock Unix domain socket
client could access server data or leverage the server as a
confused deputy [24]. In general, we classify a Unix domain
socket as vulnerable if the server accepts valid commands
through its socket channel without performing any authen-
tication or similarly a client connects to a server without
properly authenticating the server. This allows a nefarious
user to retrieve sensitive information or access otherwise re-
stricted resources through the Unix domain socket server/-
client it communicates with. Moreover, an ABSTRACT ad-
dress can only be bound to by one thread/process. Apps us-
ing ABSTRACT namespace are vulnerable to DoS because
their addresses could be occupied by the malware.
3. DESIGN AND IMPLEMENTATION
The goal of SInspector is to examine the use of Unix do-
main socket in apps and system daemons, and identify those
that are most likely vulnerable for validation. In this section,
we describe our design and implementation of SInspector.
An ideal solution is to analyze all program paths in a pro-
gram starting from the point of accepting a Unix domain
socket connection, and then identify whether critical func-
tions (end points) can be invoked without encountering any
security checks. However, it is not practical for us to de(cid:12)ne
a comprehensive list of end points and use dependencies be-
tween entry and end points to reason whether an app is vul-
nerable. First of all, apps may contain native libraries/exe-