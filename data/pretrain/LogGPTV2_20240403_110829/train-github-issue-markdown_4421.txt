Right now, https://golang.org/src/net/http/pprof/pprof.go?s=6283:6333#L197 has
a
    func Index(w http.ResponseWriter, r *http.Request)
which only works if the path on which it is serving is exactly
`/debug/pprof/`.
This is weakly documented, and also a little inconvenient, as handling other
paths may be desirable. In particular, its behaviour if you _do_ assume that
it can be hosted on other paths is that every profile you try to get returns
the index page.
It would be nice to fix this so that it supports arbitrary path prefixes. The
ways that occur to me to implement this are:
  1. Rather than extracting the expected path suffix up-front and looking it up in the profiles map, iterating over the available profiles and checking whether they are a suffix of the requested path (possibly the longest suffix). This is a little less efficient (O(1) profile lookup becomes O(|available profiles|), but the number of profiles should be small and this handler shouldn't be hit too often or on many critical paths.
  2. Introduce a function which takes the path prefix and returns a handler suitable for that prefix. It preserves the current performance characteristics, but leaves the old slightly-broken method there for backwards compatibility, at the cost of requiring duplication of the prefix specification (both in the Handle call and in the Index-creator-func), and generally feeling slightly ugly.
I'm inclined towards implementing the first; does anyone have any strong
opinions?