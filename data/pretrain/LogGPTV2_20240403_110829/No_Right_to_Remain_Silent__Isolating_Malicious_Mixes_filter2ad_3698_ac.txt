the client chooses another cascade from the set of available
cascades and sends future packets and loop messages using
the new route. For an illustration of loop packets and the
isolation process, see Figure 2.
When a client asks an honest mix to prove that it received
and correctly forwarded a packet, the mix presents the rele-
vant receipt. However, if a mix did not receive this packet,
it attests to that by returning an appropriate signed response
to the client. If a loop message did not complete the loop
because a malicious mix dropped it and did not send a re-
ceipt back, the honest preceding mix would have already dis-
connected from the misbehaving mix. Thus, the honest mix
can present the appropriate disconnection receipt it received
from the directory authorities as an explanation for why the
message was not forwarded (see Figure 2c).
The malicious mix can attempt the following actions, in
order to perform an active attack.
Naive dropping. A mix which simply drops a loop packet
after sending a receipt to the previous mix can be detected as
malicious beyond doubt. When the client that originated the
dropped loop packet queries the preceding mix, it presents
the receipt received from the malicious mix, proving that the
packet was delivered correctly to the malicious node. How-
ever, the malicious mix is unable to produce a similar receipt,
showing that the packet was received by the subsequent mix,
or a receipt from the directories proving that it reported dis-
connection from the subsequent mix. The malicious mix
may simply not respond at all to the query. However, the
client will still report to the directories, along with the proofs
from the previous and following mixes, allowing the direc-
tories to resolve the incident (contacting the suspected mix
themselves to avoid any possible ‘framing’) (see Figure 2b).
Blaming the neighbors. Malicious mixes performing active
dropping attacks would prefer to avoid complete exclusion.
One option is to drop the packet, and not send a receipt to
the previous mix. However, this causes the preceding mix to
disconnect from the malicious one at the end.
Alternatively, the corrupt mix may drop the packet after
it generates an appropriate receipt. To avoid the risk of its
detection as a corrupt mix, which would happen if it was
a loop message, the corrupt mix may disconnect from the
subsequent mix - again losing a link. Therefore, a corrupt
mix that drops a packet either loses a link, or risks being
exposed (by loop message) and removed from the network.
Delaying packets. A malicious mix can also delay a packet
instead of dropping it, so that the honest subsequent mix will
drop that packet. However, the honest subsequent mix still
sends a receipt back for that packet, which the malicious mix
should acknowledge. If the malicious mix acknowledges the
receipt, the malicious mix is exposed when the client per-
forms the isolation process. The client can obtain a signed
receipt proving that the malicious mix received the packet
on time, and also the acknowledged receipt from the honest
mix that dropped the delayed packet. The latter contains the
round number when the packet was dropped, which proves
the malicious mix delayed the packet and therefore should be
excluded. Otherwise, if the malicious mix refuses to sign the
receipt, the honest mix disconnects from the malicious one.
Therefore, the delaying attack also causes the mix to either
lose a link or to be expelled from the system.
The combination of packet receipts, link disconnection
notices, the isolation process and loop messages, forces ma-
licious mixes to immediately lose links when they perform
active attacks. Failure to respond to the preceding mix or to
record a disconnection notice about the subsequent mix in
a timely manner creates potentially incriminating evidence,
that would lead to a complete exclusion of the mix from
the system. This prevents malicious mixes from silently at-
tacking the system and blaming honest mixes when they are
queried in the isolation mechanism. The mere threat of loop
messages forces malicious mixes to drop a link with an hon-
est mix for each message they wish to suppress, or risk ex-
posure.
4.4 Handling missing receipts
Malicious mixes might attempt to circumvent the protocol
by refusing to cooperate in the isolation procedure. Poten-
tially, this could prevent clients from obtaining the necessary
proofs about problematic links, thus preventing them from
convincing directory authorities about problematic links. If
malicious mixes refuse to cooperate, clients contact a direc-
tory authority and ask it to perform the isolation process on
their behalf. Clients can prove to the directory authorities
that the loop packet was indeed sent to the cascade using the
receipt from the ﬁrst mix. If all mixes cooperate with the
directory authority, it is able to isolate and disconnect the
problematic link. Otherwise, if malicious mixes do not co-
operate with the directory authority, it excludes those mixes
from the system.
We note that a malicious client may trick the directory au-
thorities into performing the isolation process on its behalf
repeatedly, against honest mixes. In that case, directory au-
thorities conclude that the mix is honest, since the mix can
provide either a receipt for the message forwarded or a dis-
connection notice. However, this is wasteful for both direc-
USENIX Association
28th USENIX Security Symposium    1847
tory authorities and mixes. Since clients do not have to be
anonymous vis-a-vis directory authorities, they may record
false reports and eventually exclude abusive clients. Further-
more, the clients have to send proofs from the following mix
of not having received the packet, which cannot be done if
there was no mix failure.
Malicious entry mix. If a ﬁrst mix does not send a receipt,
the client could have simply chosen another cascade; how-
ever, this allows malicious mixes to divert trafﬁc from cas-
cades which are not fully malicious, without being penal-
ized, increasing the probability that clients would select other
fully malicious cascades instead. To avoid that, in Miranda,
clients force the ﬁrst mix to provide a receipt, by relaying the
packet via a trusted witness. A witness is just another mix
that relays the packet to the misbehaving ﬁrst mix. Now, the
misbehaving node can no longer refuse to produce a receipt,
because the packet arrives from a mix, which allows the iso-
lation process to take place. Note that since a witness sends
messages on behalf of clients, the witness relays messages
without the ω constraint (as if it was a client).
If the witness itself is malicious, it may also refuse to pro-
duce a receipt (otherwise, it loses a link). In that case, the
client can simply choose another witness; in fact, if desired,
clients can even send via multiple witnesses concurrently to
reduce this risk - the entry mix can easily detect the ‘dupli-
cate’ and handle only one message. This prevents malicious
mixes from excluding semi-honest cascades without losing
a link. Moreover, although the refused clients cannot prove
to others that they were rejected, they can learn about ma-
licious mixes and can avoid all future cascades that contain
them, including fully malicious cascades, which makes such
attacks imprudent.
5 Inter-Epoch Process
In this section, we discuss the inter-epoch operations, tak-
ing place toward the end of an epoch; upon its termination,
we move to a new epoch. The inter-epoch process selects a
new random set of cascades to be used in the coming epoch,
avoiding the links reported by the mixes, as well as any mixes
detected as corrupt.
Until the inter-epoch terminates and the mixes move to the
new epoch, the mixes continue with the intra-epoch process
as before; the only difference is that newly detected failures,
would be ‘buffered’ and handled only in the following run of
the inter-epoch process, to avoid changing the inputs to the
inter-epoch process after it has begun.
The inter-epoch process consists of the following steps.
5.1 Filtering Faulty Mixes
Directory authorities share amongst
themselves the evi-
dences they received and use them to agree on the set of
faulty links and mixes. The evidences consist of the reports
of faulty links from mixes, clients or authorities perform-
ing the isolation process. The directory authorities exchange
all new evidences of faulty links and mixes, i.e., not yet
considered in the previous inter-epoch computation process.
Every directory can validate each evidence it received and
broadcast it to all other directories. Since we assume major-
ity of honest directories and synchronous operation, we can
use known broadcast/consensus protocols, and after a small
number of rounds, all honest directory authorities have ex-
actly the same set of faulty links.
Note, that only links connected to (one or two) faulty
mixes are ever disconnected. Hence, any mix which has
more than thresh links disconnected must be faulty (due to
the assumption that thresh > nm), and hence the directories
exclude that mix completely and immediately. Since the di-
rectory authorities share exactly the same set of faulty links,
it follows that they also agree on exactly the same set of
faulty mixes. We call this exclusion process a simple ma-
licious mix ﬁltering step. In Section 6, we discuss more ad-
vanced ﬁltering techniques, based on community detection.
Simple malicious mix ﬁltering technique. To perform the
simple malicious mix ﬁltering, each directory authority can
build a graph that represents the connectivity between mixes.
Namely, consider an undirected graph G = (V,E) where the
vertices map to the mixes in the system (V = M), and an
edge (Mi,Mj) ∈ E means that the link between mixes Mi
and Mj was not dropped by either mix. Let G = (V,E) be
the complement graph of G and let DegG(Mi) denote the de-
gree of the vertex Mi in graph G. In the beginning, before
any reports of faults have arrived at the directory authorities,
G is a complete graph and G is an empty graph. As time
goes by, G becomes sparser as a result of the links being
dropped, and proportionally, G becomes more dense. The
ﬁltering mechanism removes all mixes that lost thresh links
or more, i.e., {Mi | ∀Mi ∈ G : DegG(Mi) ≥ thresh}, where
thresh = nm + 1. The ﬁltering mechanism checks the degree
DegG(Mi) in graph G, since the degree in G represents how
many links Mi lost. We emphasize that when such malicious
mix is detected and removed, the number of malicious mixes
in the system is decreased by one (nm = nm − 1) and propor-
tionally so does thresh (thresh = thresh − 1). As a result,
whenever the mechanism removes a malicious mix it repeats
the mechanism once again, to see whether new malicious
mixes can be detected according to the new thresh value. An
illustration of this process is depicted in Figure 3.
5.2 Cascades Selection Protocol
After all directory authorities have the same view of the
mixes and their links, they select and publish a (single) set of
cascades, to be used by all clients during the coming epoch.
To allow clients to easily conﬁrm that they use the correct set
of cascades, the directory authorities collectively sign the set
1848    28th USENIX Security Symposium
USENIX Association
Graph G
Graph G (thresh = nm + 1)
Graph G
M1
M2
M1
M2
Detected
Remove M2
M1
Detected
Remove M1
Deg(M1) < thresh(= 3)
Deg(M2) ≥ thresh(= 3)
Deg(M1) ≥ thresh(= 2)
Figure 3: An illustration of the simple malicious mix ﬁltering (without community detection).
that they determined for each epoch, using a threshold signa-
ture scheme [46, 25]. Hence, each client can simply retrieve
the set from any directory authority and validate that it is the
correct set (using a single signature-validation operation).
The cascades selection protocol allows all directory au-
thorities to agree on a random set of cascades for the up-
coming epoch. The input to this protocol, for each directory
authority, includes the set of mixes M, the desired number
of cascades to be generated nc, the length of cascades (cid:96) and
the set of faulty links FL ⊂ M×M. For simplicity, M, nc
and (cid:96) are ﬁxed throughout the execution.
The goal of all directory authorities is to select the same
set of cascades C ⊆ M(cid:96), where C is uniformly chosen from
all sets of cascades of length (cid:96), limited to those which satisfy
the selected legitimate cascade predicates, which deﬁne a
set of constraints for building a cascade. In [34], we describe
several possible legitimate cascade predicates, and discuss
their differences.
Given a speciﬁc legitimate cascade predicate, the proto-
col selects the same set of cascades for all directory author-
ities, chosen uniformly at random among all cascades sat-
isfying this predicate. This is somewhat challenging, since
sampling is normally a random process, which is unlikely
to result in exactly the same results in all directory author-
ities. One way of ensuring correct sampling and the same
output, is for the set of directories to compute the sampling
process jointly, using a multi-party secure function evalua-
tion process, e.g., [26]. However, this is a computationally-
expensive process, and therefore, we present a much more
efﬁcient alternative. Speciﬁcally, all directories run exactly
the same sampling algorithm and for each sampled cascade
validate it using exactly the same legitimate cascade predi-
cate. To ensure that the results obtained by all honest direc-
tory authorities are identical, it remains to ensure that they
use the same random bits as the seed of the algorithm. To
achieve this, while preventing the faulty directory authorities
from biasing the choice of the seed bits, we can use a coin-
tossing protocol, e.g., [7], among the directory authorities5.
5Note, that we only need to generate a small number of bits (security
parameter), from which we can generate as many bits as necessary using a
pseudo-random generator.
6 Community-based Attacker Detection
So far, the discussion focused on the core behaviour of Mi-
randa and presented what Miranda can do and how it is
done. Interestingly, Miranda’s mechanisms open a doorway
for advanced techniques, which can signiﬁcantly improve the
detection of malicious mixes.
In this section, we discuss
several techniques that can leverage Miranda’s faulty links
identiﬁcation into a powerful tool against malicious adver-
saries. Among others, we use community detection tech-
niques. Community detection has been used in previous
works to achieve Sybil detection based on social or intro-
duction graphs [16, 17]. However, we assume that the prob-
lem of Sybil attacks is solved through other means, such as
admission control or resource constraints. Encouragingly,
many other techniques can be employed; yet, we hope that
the following algorithms will be also useful in other applica-
tions where applicable, e.g., where community detection is
needed.
We begin with the following observation.
Observation 1. For every two mixes Mi,Mj that have an
edge in (Mi,Mj) ∈ E, at least one of them is a malicious mix.
Observation 1 stems directly from our assumption that
honest mixes never fail. Therefore, a dropped link must
be between either an honest mix and a malicious mix or
between two malicious mixes. Following this observation,
one possible strategy is aggressive pair removal, i.e., remove
both mixes, if one or both of them report failure of the link
connecting them. This strategy seems to provide some bene-
ﬁts - the adversary seems to ‘lose more’, however it comes at
an excess cost of possible exclusion of honest nodes. There-
fore, we focus on less aggressive techniques that exclude ma-
licious mixes without excluding also honest ones.
Threshold Detection Algorithm. Since the aggressive re-
moval of both mixes connected by the failed link from G is
not efﬁcient, we adopt the idea of virtual removal of the con-
ﬂicting pair. By virtually we mean that virtually removed
mixes are not classiﬁed as malicious and they are only re-
moved from G for the duration of the algorithm’s execution,
and not from G nor M. We present the Threshold Detec-
USENIX Association
28th USENIX Security Symposium    1849
M5
M4
M3
M1
M2
M5
M4
M3
M1
M2
Detected
(a) Graph G, the simple malicious
mix ﬁltering technique cannot
detect M2 because
DegG (M2) = 2 < 3 = thresh.
(b) An execution of the
T hresholdDetection on the same G graph
virtually removes M1 and M5 which
decreases thresh, resulting in