ct = ((M, ρ), C, C0,{Cτ,1, Cτ,2, Cτ,3}τ∈[(cid:96)])
• Decrypt (sk, ct) → m:
constants {ωi ∈ Zp}i∈I such that(cid:80)
Firstly, the decryption algo-
rithm calculates the set of rows in M that provide a share to
attributes in S, i.e. I = {i : ρ(i) ∈ S}. Then it computes the
i∈I ωi (cid:126)Mi = (1, 0, . . . , 0),
where (cid:126)Mi is the i-th row of the matrix M . These constants
exist if the set S is an authorized set of the policy (c.f. Sec.
2.2).
Then it calculates
(cid:81)
B =
e(C0, K0)
i∈I (e(Ci,1, K1)e(Ci,2, Kτ,2)e(Ci,3, Kτ,3))ωi
where τ is the index of the attribute ρ(i) in S (it depends
on i). The algorithm outputs m = C/B.
If the attribute set S of the secret key is
authorized, we have that(cid:80)
Correctness:
i∈I ωiλi = s. Therefore:
e(g, g)αse(g, w)rs
i∈I e(g, w)rωiλi e(g, v)rtiωi e(g, uρ(i)h)−rτ tiωi
·
(cid:81)
(cid:81)
e(g, w)r(cid:80)
B =
=
1
i∈I e(g, uρ(i)h)rτ tiωi e(g, v)−rtiωi
e(g, g)αse(g, w)rs
i∈I ωiλi
= e(g, g)αs
4.2 Proof of Selective Security
We will prove the following theorem regarding the selec-
tive security of our CP-ABE scheme:
Theorem 4.1. If the q-1 assumption holds then all PPT
adversaries with a challenge matrix of size (cid:96) × n, where
(cid:96), n ≤ q, have a negligible advantage in selectively breaking
our scheme.
467Proof. To prove the theorem we will assume that there exists
a PPT attacker A with a challenge matrix that satisﬁes the
restriction, which has a non negligible advantage AdvA in
selectively breaking our scheme. Using this attacker we will
build a PPT simulator B that attacks the q-1 assumption
with a non negligible advantage.
Initialization: B receives the given terms from the as-
sumption and a challenge policy (M∗, ρ∗) from A. We have
that M∗ is an (cid:96)×n matrix, where (cid:96), n ≤ q, and ρ∗ : [(cid:96)] → Zp.
Setup: The simulator B has to provide A the public pa-
rameters of the system. In order to do that it implicitly sets
the master secret key of the scheme to be α = aq+1 + ˜α,
where a, q are set in the assumption and ˜α $← Zp is a known
to B random exponent. Notice that this way α is correctly
distributed and a is information-theoretically hidden from
A. Then B picks the random exponents ˜v, ˜u, ˜h $← Zp and
using the assumption gives to A the following public param-
eters:
g = g
u = g ˜u ·(cid:81)
h = g˜h ·(cid:81)
v = g ˜v ·(cid:81)
w = ga
(j,k)∈[(cid:96),n]
(j,k)∈[(cid:96),n]
gak/b2
j
gak/b2
j
(cid:16)
(cid:16)
(cid:16)
j,k
(cid:17)M∗
(cid:17)−ρ∗(j)M∗
(cid:17)M∗
j,k
j,k
(j,k)∈[(cid:96),n]
e(g, g)α = e(ga, gaq
gak/bj
) · e(g, g) ˜α
The term w is properly distributed in A’s view because the
term e(g, g)α hides the exponent a information-theoretically.
The terms v, u, h are also properly distributed due to ˜v, ˜u, ˜h,
respectively. Notice that all terms can be calculated by the
simulator using suitable terms from the assumption and the
challenge policy given by A.
As one can see, the “attribute layer”, which consists of the
terms u, h, is made up of terms whose exponents have b2
i in
the denominator, the “binder term” v has bi, and the “secret
sharing layer” w has only one power of a. This scaling of the
powers of bi will allow our simulator to properly simulate all
terms.
for an attribute set S =(cid:8)A1, A2, . . . , A|S|(cid:9) received by A.
Query phases 1 and 2: Now the simulator has to pro-
duce secret keys for non authorized sets of attributes re-
quested by A. In both phases the treatment is the same.
We describe here the way B works in order to create a key
Since S is non authorized for (M∗, ρ∗), there exists a vec-
p such that w1 = −1 and
tor (cid:126)w = (w1, w2, . . . , wn)
i , (cid:126)w(cid:105) = 0 for all i ∈ I = {i|i ∈ [(cid:96)] ∧ ρ∗(i) ∈ S} (c.f. Sec.
(cid:104) (cid:126)M∗
2.2). The simulator calculates (cid:126)w using linear algebra. Then
it picks ˜r $← Zp and implicitly sets
(cid:62) ∈ Zn
r = ˜r + w1aq + w2aq−1 + . . . + wnaq+1−n = ˜r +
wiaq+1−i
(cid:88)
i∈[n]
This is properly distributed due to ˜r. Then using the
suitable terms from the assumption it calculates:
gwiaq+2−i
g ˜αga˜r (cid:89)
gaq+2−i(cid:17)wi
(cid:16)
(cid:16)
gaq+1−i(cid:17)wi
i∈[n]
K0 = gαwr = gaq+1
n(cid:89)
K1 = gr = g ˜r (cid:89)
= g ˜α (ga)˜r
i=2
i∈[n]
Additionally, for all τ ∈ [|S|] it has to compute the terms
Kτ,2 = grτ and Kτ,3 = (uAτ h)rτ v−r. The common part
v−r for these terms is the following:
−˜r
v
g
= v
j,k/bj
i∈[n]
(j,k)∈[(cid:96),n]
gakM∗
g ˜v (cid:89)
−(cid:80)
gaq+1−i(cid:17)−˜vwi · (cid:89)
(cid:16)
−˜r (cid:89)
gaq+1−i(cid:17)−˜vwi · (cid:89)
(cid:16)
−˜r (cid:89)
(cid:123)(cid:122)
(cid:124)
· (cid:89)
= Φ · (cid:89)
(i,j)∈[n,(cid:96)]
j,iaq+1/bj
−wiM∗
−(cid:104) (cid:126)w, (cid:126)M∗
(i,j,k)∈
[n,(cid:96),n]
j (cid:105)aq+1/bj = Φ · (cid:89)
[n,(cid:96),n],i(cid:54)=k
(i,j,k)∈
i∈[n]
= v
g
g
Φ
j∈[(cid:96)]
i∈[n] wiaq+1−i
−wiM∗
j,kaq+1+k−i/bj
(cid:18)
aq+1+k−i
bj
g
(cid:19)−wiM∗
j,k
(cid:125)
−(cid:104) (cid:126)w, (cid:126)M∗
j (cid:105)aq+1/bj
g
j∈[(cid:96)]
ρ∗(j) /∈S
The Φ part can be calculated by the simulator using the
assumption, while the second part has to be canceled by the
(uAτ h)rτ part. So for every attribute Aτ ∈ S the simulator
sets implicitly
rτ = ˜rτ + r · (cid:88)
= ˜rτ + ˜r · (cid:88)
i(cid:48)∈[(cid:96)]
ρ∗(i(cid:48)) /∈S
i(cid:48)∈[(cid:96)]
ρ∗(i(cid:48)) /∈S
bi(cid:48)
Aτ − ρ∗(i(cid:48))
bi(cid:48)
Aτ − ρ∗(i(cid:48))
+
(cid:88)
(i,i(cid:48))∈[n,(cid:96)]
ρ∗(i(cid:48)) /∈S
wibi(cid:48) aq+1−i
Aτ − ρ∗(i(cid:48))
where ˜rτ
$← Zp and therefore rτ is properly distributed.
The use of the bi’s in the numerators of the fractions is ex-
plained by the “layer” intuition presented before. Namely,
these bi will cancel with the b2
i denominators in the “at-
tribute layer” and provide a cancellation for the unknown
part of v−r.
Also, notice that rτ is well-deﬁned only for attributes
in the speciﬁc unauthorized set S or unrelated attributes
(outside the policy), since the sum is over the i(cid:48) such that
ρ∗(i(cid:48)) /∈ S. Therefore, for all Aτ ∈ S or Aτ /∈ ρ∗([(cid:96)]), the
denominators Aτ − ρ∗(i(cid:48)) are non zero. If the simulator tries
to include more attributes of the policy in the key (and pos-
sibly make a key for an authorized set), he would have to
divide by zero (see Figure 1). Namely, the set of secret keys
is partitioned in two sets: the unauthorized, which the simu-
lator can create using the above method, and the authorized,
which the simulator cannot create.
468ρ∗([(cid:96)])
Zp
S
Figure 1: The simulator can not create the compo-
nents for attributes in the gray area.
After some algebraic manipulations, the (uAτ h)rτ part of
j,kbi(cid:48) ak/(Aτ −ρ∗(i(cid:48)))b2
j
Cτ,2 =
g(Aτ −ρ∗(j))wiM∗
j,kbi(cid:48) aq+1+k−i/(Aτ −ρ∗(i(cid:48)))b2
j
g(Aτ −ρ∗(j))wiM∗
j,ibj aq+1+i−i/(Aτ −ρ∗(j))b2
j
Kτ,3 is computed as:
(uAτ h)˜rτ · (Kτ,2/g ˜rτ )˜uAτ +˜h
g ˜r(Aτ −ρ∗(j))M∗
·
ρ∗(i(cid:48)) /∈S
(i(cid:48),j,k)∈[(cid:96),(cid:96),n]
· (cid:89)
(cid:89)
= Ψ · (cid:89)
= Ψ · (cid:89)
ρ∗(i(cid:48)) /∈S
(i,i(cid:48),j,k)∈[n,(cid:96),(cid:96),n]
(i,j)∈[n,(cid:96)]
ρ∗(j) /∈S
j∈[(cid:96)]
ρ∗(j) /∈S
(cid:104) (cid:126)w, (cid:126)M∗
j (cid:105)aq+1/bj
g
where Ψ includes the remaining terms of the product. The
Ψ and Kτ,2 terms can be calculated using the suitable terms
of our assumption. The second part of (uAτ h)rτ cancels ex-
actly with the problematic part of v−r. Therefore the sim-
ulator can calculate Kτ,2 and Kτ,3 for all Aτ ∈ S and hand
over the secret key sk = (S, K0, K1,{Kτ,2, Kτ,3}τ∈[|S|]) to
the attacker A.
Challenge: The attacker will output a pair of messages
In this phase the simulator
(m0, m1) of the same length.
ﬂips a random coin b $← {0, 1} and constructs
C = mb · T · e(g, gs) ˜α
and
C0 = gs
where T is the challenge term and gs the corresponding
term of the assumption.
The simulator sets implicitly (cid:126)y = (s, sa + ˜y2, sa2 + ˜y3,
$← Zp. We see that
. . ., san−1 + ˜yn)(cid:62), where ˜y2, ˜y3, . . . , ˜yn
the secret s and the vector (cid:126)y are properly distributed, since
s was information theoretically hidden from A and the ˜yi’s
are picked uniformly at random. As a result, since (cid:126)λ = M∗(cid:126)y
we have that
λτ =
∗
τ,isai−1 +
M
∗
τ,i ˜yi =
M
∗
τ,isai−1 + ˜λτ
M
for each row τ ∈ [(cid:96)].
Notice that the terms ˜λτ = (cid:80)n
i=2
i=2 M∗
τ,i ˜yi are known to
the simulator. For each row the simulator B sets implicitly
tτ = −sbτ . This is properly distributed as well, because the