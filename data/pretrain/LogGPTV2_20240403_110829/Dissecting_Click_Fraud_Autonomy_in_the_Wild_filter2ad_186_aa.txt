title:Dissecting Click Fraud Autonomy in the Wild
author:Tong Zhu and
Yan Meng and
Haotian Hu and
Xiaokuan Zhang and
Minhui Xue and
Haojin Zhu
Dissecting Click Fraud Autonomy in the Wild
Tong Zhu
Yan Meng
Haotian Hu
PI:EMAIL
Shanghai Jiao Tong University
PI:EMAIL
Shanghai Jiao Tong University
PI:EMAIL
Shanghai Jiao Tong University
Xiaokuan Zhang
PI:EMAIL
The Ohio State University
Minhui Xue
PI:EMAIL
The University of Adelaide
Haojin Zhu∗
PI:EMAIL
Shanghai Jiao Tong University
ABSTRACT
Although the use of pay-per-click mechanisms stimulates the pros-
perity of the mobile advertisement network, fraudulent ad clicks
result in huge financial losses for advertisers. Extensive studies iden-
tify click fraud according to click/traffic patterns based on dynamic
analysis. However, in this study, we identify a novel click fraud,
named humanoid attack, which can circumvent existing detection
schemes by generating fraudulent clicks with similar patterns to
normal clicks. We implement the first tool ClickScanner to detect
humanoid attacks on Android apps based on static analysis and
variational AutoEncoders (VAEs) with limited knowledge of fraudu-
lent examples. We define novel features to characterize the patterns
of humanoid attacks in the apps’ bytecode level. ClickScanner
builds a data dependency graph (DDG) based on static analysis
to extract these key features and form a feature vector. We then
propose a classification model only trained on benign datasets to
overcome the limited knowledge of humanoid attacks.
We leverage ClickScanner to conduct the first large-scale mea-
surement on app markets (i.e., 120,000 apps from Google Play and
Huawei AppGallery) and reveal several unprecedented phenom-
ena. First, even for the top-rated 20,000 apps, ClickScanner still
identifies 157 apps as fraudulent, which shows the prevalence of
humanoid attacks. Second, it is observed that the ad SDK-based
attack (i.e., the fraudulent codes are in the third-party ad SDKs)
is now a dominant attack approach. Third, the manner of attack
is notably different across apps of various categories and popular-
ities. Finally, we notice there are several existing variants of the
humanoid attack. Additionally, our measurements demonstrate
the proposed ClickScanner is accurate and time-efficient (i.e., the
detection overhead is only 15.35% of those of existing schemes).
CCS CONCEPTS
• Security and privacy → Software security engineering;
∗Haojin Zhu (PI:EMAIL) is the corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484546
KEYWORDS
Click Fraud; Static Analysis; Variational AutoEncoders; Humanoid
Attack
ACM Reference Format:
Tong Zhu, Yan Meng, Haotian Hu, Xiaokuan Zhang, Minhui Xue, and Haojin
Zhu. 2021. Dissecting Click Fraud Autonomy in the Wild. In Proceedings of
the 2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 16 pages. https://doi.org/10.1145/3460120.3484546
1 INTRODUCTION
The mobile advertisement (ad) market has grown rapidly over the
past decades with the unprecedented popularity of smartphones.
To motivate the app developer to embed the advertisers’ ads in their
apps, the pay-per-click (PPC) mechanism is widely deployed, in
which the advertiser pays the developer according to the number
of times the embedded ads have been clicked by users [17, 48].
However, the PPC mechanism also encounters the increasing
threat of click fraud [10]. By adopting the strategy of click fraud,
the unscrupulous developer generates “fake” ad click events that
do not originate from real users to obtain extra payment from
the ad network. For instance, an attacker can embed malicious
code on fraudulent apps or third-party SDKs leveraged by other
unsuspecting app developers to trigger the ad clicks automatically
in the background without any human involvement. It is estimated
that advertisers have lost 42 billion USD of ad budget globally in
2019 due to fraudulent activities committed via online, mobile, and
in-app advertising [43].
To defend against click fraud, both academia and industry have
proposed a series of dynamic analysis based approaches to distin-
guish fraudulent clicks from the legitimate clicks. These approaches
fall into the following two categories: user-side [8, 9, 19, 20, 28, 41]
and ad network-side approaches [11, 14, 32, 47, 49, 50]. (1) The user-
side approaches rely on installing an additional patch or ad SDK
on the user’s device. The legitimacy of ad clicks is determined by
checking whether the click pattern meets a certain rule. (2) The ad
network-side schemes determine whether an app performs fraudu-
lent clicks based on statistical information (e.g., timing patterns) of
the clicks through traffic analysis. These existing detection schemes
either require users to install patches on their smartphones, which
is not user-friendly, or require the ad network to collect traffic data
from thousands of apps, which is less scalable. Moreover, both ap-
proaches use dynamic analysis, which is not complete since they
do not cover all feasible program paths. Furthermore, the effec-
tiveness of these dynamic analysis based approaches relies on the
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea271assumption that fraudulent click patterns are distinguishable from
those of real users. Therefore, it is natural to raise the following
question: Is there a smart attacker who can simulate a real human’s
clicks patterns and bypass existing click fraud detection?
In this study, we answer the above question by identifying emerg-
ing automated click fraud, named humanoid attack. In this paper,
we define humanoid attack as a kind of click fraud that has almost
the same click and traffic patterns as normal clicks. Specifically,
the fraudulent applications could randomize the click coordinates/-
time interval, or even follow the legitimate actions of a real user
to generate the clicking traffic, rendering the fake click sequences
to be indistinguishable from legitimate ones even if the ad traffic
is monitored. Some fraudulent applications will also receive the
fake click’s configuration from a remote server and avoid detection
adaptively and locally. To date, the detection of humanoid attacks
via large-scale static analysis has received little attention. Therefore
it is crucial to understand and mitigate humanoid attacks.
A large-scale static analysis of humanoid attacks imposes the
following technical challenges. 1) How can we capture the fraud-
ulent behavior patterns at the bytecode level by defining a set of
novel features to distinguish the codes triggering false clicks from
the codes generating legitimate clicks? 2) Based on the proposed
features, how can we build a novel system that can automatically
extract these features and accurately identify the fraudulent apps
while considering very few positive samples in practice?
To address these challenges, we propose ClickScanner, a light-
weight and effective static analysis framework to automatically
detect humanoid attacks. First, our work starts from a prelimi-
nary study that aims to investigate what features can be adopted
to identify humanoid attacks. To achieve this, we build a simple
prototype based on Soot [45] to investigate the working logic be-
hind the suspicious fraudulent apps, which likely manipulate the
MotionEvent object to generate fake, yet indistinguishable click
sequences. Second, through the preliminary vetting results of pro-
totypes and careful manual checking of suspicious apps’ working
behaviors and bytecodes, we identify 50 apps conducting legiti-
mate clicks and 50 apps conducting humanoid attacks as the seed
apps for accuracy tests and feature definition.1 Our study reveals
that the humanoid attack mainly utilizes the combination of the
following four strategies to obfuscate its fake clicks and avoid detec-
tion: 1) simulating the human clicks by randomizing the coordinates;
2) making the trigger condition of the fake clicks unpredictable by
randomizing the triggering time; 3) generating the fake clicks by
following the legitimate actions of real people; 4) predefining fake
click’s execution logic in code, receiving the click’s coordinates and
trigger condition from a remote server, and avoiding the detection
adaptively and locally. Third, after characterizing the working logic
of humanoid attacks, to achieve light-weight detection, we pro-
pose a novel data dependency graph (DDG) to extract key features
related to the humanoid attack. From the generated graph, a light-
weight feature vector with 7 dimensions is obtained. Finally, to
overcome the issue of the lack of positive examples of humanoid
1In order to add as many benign examples as possible to the dataset for training, we
not only collect legitimate clicks on the view with the ad but also with other content.
If there is no special emphasis in the latter part, the benign datasets will include
legitimate clicks on views of other content. The fraudulent datasets are all fake clicks
on the ad view.
attacks, we exploit variational AutoEncoders (VAEs) to build a
robust classifier to perform one-class classification, which flags the
fraudulent apps by the reconstruction error between the input and
output with limited knowledge of positive examples.
We utilize ClickScanner to conduct the first large-scale mea-
surement on the humanoid attack. The main results and contri-
butions of our measurements are shown as follows.
• Designing ClickScanner to dissect the humanoid attack.
We identify an novel pattern of automated click fraud, named
humanoid attack, and design and implement the first tool to
detect such an attack based on static analysis and VAEs with
limited knowledge of fraudulent examples.
• Effectiveness of ClickScanner. We apply ClickScanner in
the wild on 20,000 top-rated apps from Google Play and Huawei
AppGallery to demonstrate that it can indeed scale to markets.
We identify a total of 157 fraudulent apps out of the 20,000 apps
with a high precision rate of 94.6%. Some of them are popular,
with billions of downloads. In terms of time overhead, the aver-
age detection time of ClickScanner is 18.42 seconds, which is
only 15.35% of the best case within four popular dynamic anal-
ysis based schemes (i.e., FraudDetective [20], FraudDroid [14],
MadFraud [11], DECAF [28], and AdSherlock [8]). We compare
the performance of ClickScanner with 65 existing detection en-
gines (e.g., Kaspersky [24], McAfee [29]) from VirusTotal [46]. We
show that 115 fraudulent apps out of the detected 157 fraudulent
apps can bypass all employed engines, which demonstrates that
our ClickScanner outperforms existing detection engines. We
further apply ClickScanner on 100,000 apps randomly selected
from Google Play.2 In total, 584 apps are marked as fraudulent.
We also find the difference in the behavior of humanoid attacks
between popular and niche apps as shown in Section 5.4. Over-
all, the experimental results demonstrate that ClickScanner is
effective and efficient in detecting the humanoid attack.
• Novel findings are identified by ClickScanner. A measure-
ment study demonstrates the following interesting findings: 1)
The humanoid attack distribution among app categories are no-
tably different across different app markets (i.e., Google Play and
Huawei AppGallery), indicating attackers and users in different
regions have different biases towards mobile ads. 2) Instead of
changing the local codes of apps, the proportion of ad SDK-based
attacks (i.e., the fraudulent codes are in the third-party ad SDKs)
has increased from 14% in June 2018 to 83% in August 2020, in-
dicating that the SDK based attack is now dominant. 3) The ad
SDK-based attacks undergo a decrease after July 2020, which
is possibly due to the strict security policies of app markets as
shown in Section 5.3.2. 4) More sophisticated click fraud other
than coordinated or timing randomization attacks is identified
by ClickScanner, and the details are shown in Section 6.
2 PRELIMINARIES
2.1 Mobile Advertising Ecosystem
A typical mobile advertising ecosystem consists of four compo-
nents: the advertiser, user, ad network, and developer. As shown
in Fig. 1, the ad network serves as the intermediary among the
2Due to the lower number of available apps, we skip this measurement on the Huawei
App Gallery.
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea272object filled with a subset of motion values (e.g., click coordinates
(𝑋∗, 𝑌∗)) which are carefully fabricated. Since the MotionEvent
object can be constructed arbitrarily by the attackers, from the
view of the ad network, the fake click has the same format as a
normal one.
2.3 Existing Click Fraud Detection Schemes
Extensive click fraud detection schemes could be divided into two
categories and their insights and limitations are shown below:
• User-side detection. These schemes install an additional patch
or SDK on users’ devices to check the click pattern generated on
users’ devices. One of the most recent works is AdSherlock [8]
which is based on the insight that: 1) “bots-driven fraudulent
clicks” can be detected because the properties are inconsistent
between human clicks while remaining the same for bots-driven
clicks, and 2) the “in-app fraudulent clicks” can be detected be-
cause the in-app clicks do not generate any motion events. How-
ever, there are many click fraud apps that can generate motion
events that simulate the properties of a human’s click through
the MotionEvent.obtain() method [4], and AdSherlock failed
to consider this kind of click fraud. Another recent work is Fraud-
Detective [20], which generates the causal relationships between
user inputs and observed fraudulent activity. However, FraudDe-
tective requires a large time overhead and cannot cover all of the
app’s functionalities, which makes it difficult for FraudDetective
to trigger and identify the humanoid attack discovered in this
paper.
• Ad network-side detection. These schemes analyze the ad re-
quests at the ad network server. The most recent work is Click-
tok [32], which argues that unusual click-stream traffic is often
simple reuse of legitimate data traffic. Thus, they try to detect
click fraud by recognizing patterns that repeat themselves in the
same click-stream of ads. However, to date, a large amount of
click fraud does not rely on legitimate click data streams, and
attackers can also carefully construct data streams similar to the
pattern of legitimate click data streams to fool detectors as shown
in Section 3.
Furthermore, most of the above schemes are based on dynamic
analysis or traffic analysis, and therefore incur limitations. These
tools cannot cover all feasible program paths, and are thus not ef-
fective and impractical to deploy in the app market. These schemes
also rely on the hypothesis that the patterns generated by click
fraud and real clicks are distinctly different, which may not hold
true when facing humanoid attacks.
3 MOTIVATING EXAMPLE AND INSIGHT
3.1 Preliminary Study on Humanoid Attack
While the community struggles to properly address traditional click
fraud based on dynamic and traffic analysis, deception techniques
used by attackers continue to evolve. To characterize humanoid
attacks, we conduct a preliminary study to collect several fraud-
ulent apps towards further building ClickScanner. We took a
straw-man strategy that the first humanoid attack event was
spotted and discussed on a security panel inside a company. As
researchers in collaboration with the company, we tried to explore
Figure 1: Overview of the mobile advertising ecosystem.
(a) The normal click’s mechanism.