You’ll learn exactly what these keywords mean and how to use them in the next sec-
tions of this chapter. For a full list of keywords, consult the Nim manual, available at
http://nim-lang.org/docs/manual.html#lexical-analysis-identifiers-keywords. 
2.1.2
Indentation
Many programmers indent their code to make the program’s structure more apparent.
In most programming languages, this isn’t a requirement and serves only as an aid to
human readers of the code. In those languages, keywords and punctuation are often
used to delimit code blocks. In Nim, just like in Python, the indentation itself is used.
 Let’s look at a simple example to demonstrate the difference. The following three
code samples written in C, Ruby, and Nim all do the same thing. But note the differ-
ent ways in which code blocks are delimited.
1 According to the TIOBE Index for December 2016, www.tiobe.com/index.php/content/paperinfo/
tpci/index.html.
Licensed to   
24
CHAPTER 2
Getting started
if (42 >= 0) {
printf("42 is greater than 0");
}
if 42 >= 0
puts "42 is greater than 0"
end
if 42 >= 0:
echo "42 is greater than 0"
As you can see, C uses curly brackets to delimit a block of code, Ruby uses the keyword
end, and Nim uses indentation. Nim also uses the colon character on the line that pre-
cedes the start of the indentation. This is required for the if statement and for many
others. But as you continue learning about Nim, you’ll see that the colon isn’t
required for all statements that start an indented code block.
 Note also the use of the semicolon in listing 2.1. This is required at the end of each
line in some programming languages (mostly the C family). It tells the compiler
where a line of code ends. This means that a single statement can span multiple lines,
or multiple statements can be on the same line. In C, you’d achieve both like this:
printf("The output is: %d",
0);
printf("Hello"); printf("World");
In Nim, the semicolon is optional and can be used to write two statements on a single
line. Spanning a single statement over multiple lines is a bit more complex—you can
only split up a statement after punctuation, and the next line must be indented.
Here’s an example:
echo("Output: ",
5)
echo(5 +
5)
echo(5
+ 5)
echo(5 +
5)
Because indentation is important in Nim, you need to be consistent in its style. The
convention states that all Nim code should be indented by two spaces. The Nim com-
piler currently disallows tabs because the inevitable mixing of spaces and tabs can have
detrimental effects, especially in a whitespace-significant programming language. 
Listing 2.1
C
Listing 2.2
Ruby
Listing 2.3
Nim
Both of these statements are correct because they’ve been split 
after the punctuation and the next line has been indented.
This statement has been incorrectly 
split before the punctuation.
This statement has not been correctly 
indented after the split.
Licensed to   
25
Nim basics
2.1.3
Comments
Comments in code are important because they allow you to add additional meaning
to pieces of code. Comments in Nim are written using the hash character (#). Any-
thing following it will be a comment until the start of a new line. A multiline comment
can be created with #[ and ]#, and code can also be disabled by using when false:.
Here’s an example:
# Single-line comment
#[
Multiline comment
]#
when false:
echo("Commented-out code")
The first of the two types of multiline comment can be used to comment out both text
and code, whereas the latter should only be used to comment out code. The compiler
will still parse the code and ensure that it’s syntactically valid, but it won’t be included
in the resulting program. This is because the compiler checks when statements at com-
pile time. 
2.2
Nim basics
Now that you have a basic understanding of Nim’s syntax, you have a good foundation
for learning some of the semantics of Nim. In this section, you’ll learn some of the
essentials that every Nim programmer uses on a daily basis. You’ll learn about the
most commonly used static types, the details of mutable and immutable variables, and
how to separate commonly used code into standalone units by defining procedures.
2.2.1
Basic types
Nim is a statically typed programming language. This means that each identifier in
Nim has a type associated with it at compile time. When you compile your Nim pro-
gram, the compiler ensures that your code is type safe. If it isn’t, compilation termi-
nates and the compiler outputs an error. This is in contrast to dynamically typed
programming languages, such as Ruby, that will only ensure that your code is type safe
at runtime.
 By convention, type names start with an uppercase letter. Built-in types don’t follow
this convention, so it’s easy for you to distinguish between built-in types and user-
defined types by checking the first letter of the name. Nim supports many built-in
types, including ones for dealing with the C foreign function interface (FFI). I don’t
cover all of them here, but they will be covered later in this book.
FOREIGN FUNCTION INTERFACE
The foreign function interface (FFI) is what
allows you to use libraries written in other programming languages. Nim
includes types that are native to C and C++, allowing libraries written in those
languages to be used.
Licensed to   
26
CHAPTER 2
Getting started
Most of the built-in types are defined in the system module, which is imported auto-
matically into your source code. When referring to these types in your code, you can
qualify them with the module name (for example, system.int), but doing so isn’t
necessary. See table 2.1 for a list of the basic types defined in the system module.
MODULES
Modules are imported using the import keyword. You’ll learn
more about modules later in this book.
INTEGER
The integer type represents numerical data without a fractional component; that is,
whole numbers. The amount of data this type can store is finite, so there are multiple
versions of it in Nim, each suited to different size requirements. The main integer
type in Nim is int. It’s the integer type you should be using most in your Nim pro-
grams. See table 2.2 for a list of integer types.
Table 2.1
Basic types
Type
Description and uses
int
The integer type is the type used for whole numbers; for example, 52.
float
The float is the type used for numbers with a decimal point; for example, 2.5.
string
The string type is used to store multiple characters. String literals are created 
by placing multiple characters inside double quotes: "Nim is awesome".
bool
The Boolean type stores one of two values, either true or false.
char
The character type stores a single ASCII character. Character literals are created 
by placing a character inside single quotes; for example, 'A'.
Table 2.2
Integer types
Type
Size
Range
Description
int
Architecture-dependent. 
32-bit on 32-bit systems, 
64-bit on 64-bit systems.
32-bit: -2,147,483,648 to 
2,147,483,647 
64-bit: -9,223,372,036,854,
775,808 to 9,223,372,036,
854,775,807
Generic signed two’s com-
plement integer. Generally, 
you should be using this 
integer type in most 
programs.
int8
int16
int32
int64
8-bit 
16-bit 
32-bit 
64-bit
-128 to 127
-32,768 to 32,767
-2,147,483,648 to 2,147,483,647
-9,223,372,036,854,775,808 to 
9,223,372,036,854,775,807
Signed two’s complement 
integer. These types can be 
used if you want to be 
explicit about the size 
requirements of your data.
uint
Architecture-dependent. 
32-bit on 32-bit systems, 
64-bit on 64-bit systems.
32-bit: 0 to 4,294,967,295
64-bit: 0 to 18,446,744,
073,709,551,615
Generic unsigned integer.
Licensed to   
27
Nim basics
An integer literal in Nim can be represented using decimal, octal, hexadecimal, or
binary notation.
let decimal = 42
let hex = 0x42
let octal = 0o42
let binary = 0b101010
Listing 2.4 defines four integer variables and assigns a different integer literal to each
of them, using the four different integer-literal formats.
 You’ll note that the type isn’t specified for any of the defined variables. The Nim
compiler will infer the correct type based on the integer literal that’s specified. In this
case, all variables will have the type int.
 The compiler determines which integer type to use by looking at the size of the
integer literal. The type is int64 if the integer literal exceeds the 32-bit range; other-
wise, it’s int. But what if you want to use a specific integer type for your variable?
There are multiple ways to accomplish this:
let a: int16 = 42
let b = 42'i8
INTEGER SIZE
Explicitly using a small integer type such as int8 may result in
a compile-time or, in some cases, a runtime error. Take a look at the ranges in
table 2.2 to see what size of integer can fit into which integer type. You should
be careful not to attempt to assign an integer that’s bigger or smaller than the
type can hold.
Nim supports type suffixes for all integer types, both signed and unsigned. The format
is 'iX, where X is the size of the signed integer, and 'uX, where X is the size of the
unsigned integer.2
uint8
uint16
uint32
uint64
8-bit 
16-bit 
32-bit 
64-bit
0 to 2550 
0 to 65,5350 
0 to  4,294,967,2950 
0 to 18,446,744,073,709,551,615
Unsigned integer. These 
types can be used if you 
want to be explicit about 
the size requirements of 
your data.
Listing 2.4
Integer literals
2 See the Nim manual for more on numerical constants: http://nim-lang.org/docs/manual.html#lexical-
analysis-numerical-constants.
Table 2.2
Integer types (continued)
Type
Size
Range
Description
int16
Uses a type suffix to specify the type of the integer literal
Licensed to   
28
CHAPTER 2
Getting started
FLOATING-POINT
The floating-point type represents an approximation of numerical data with a frac-
tional component. The main floating-point type in Nim is float, and its size depends
on the platform.
let a = 1'f32
let b = 1.0e19
The compiler will implicitly use the float type for floating-point literals.
 You can specify the type of the literal using a type suffix. There are two type suf-
fixes for floats that correspond to the available floating-point types: 'f32 for float32
and 'f64 for float64.
 Exponents can also be specified after the number. Variable b in the preceding list-
ing will be equal to 1x1019 (1 times 10 to the power of 19). 
BOOLEAN
The Boolean type represents one of two values: usually a true or false value. In Nim,
the Boolean type is called bool.
let a = false
let b = true
The false and true values of a Boolean must begin with a lowercase letter. 
CHARACTER
The character type represents a single character. In Nim, the character type is called
char. It can’t represent UTF-8 characters but instead encodes ASCII characters.
Because of this, char is really just a number.
 A character literal in Nim is a single character enclosed in quotes. The character
may also be an escape sequence introduced by a backward slash (\). Some common
character-escape sequences are listed in table 2.3.
let a = 'A'
let b = '\109'
let c = '\x79'
UNICODE
The unicode module contains a Rune type that can hold any uni-
code character.
NEWLINE ESCAPE SEQUENCE
The newline escape sequence \n isn’t allowed in
a character literal as it may be composed of multiple characters on some plat-
forms. On Windows, it’s \r\l (carriage return followed by line feed),whereas
on Linux it’s just \l (line feed). Specify the character you want explicitly,
such as '\r' to get a carriage return, or use a string. 
Listing 2.5
Float literals
Listing 2.6
Boolean literals
Listing 2.7
Character literals
Licensed to   
29
Nim basics
STRING
The string type represents a sequence of characters. In Nim, the string type is called
string. It’s a list of characters terminated by '\0'.
 The string type also stores its length. A string in Nim can store UTF-8 text, but the
unicode module should be used for processing it, such as when you want to change
the case of UTF-8 characters in a string.
 There are multiple ways to define string literals, such as this:
let text = "The book title is \"Nim in Action\""
When defining string literals this way, certain characters must be escaped in them. For
instance, the double-quote character (") should be escaped as \" and the backward-
slash character (\) as \\. String literals support the same character-escape sequences
that character literals support; see table 2.3 for a good list of the common ones. One
major additional escape sequence that string literals support is \n, which produces a
newline; the actual characters that are produced depend on the platform.
 The need to escape some characters makes some things tedious to write. One
example is Windows file paths:
let filepath = "C:\\Program Files\\Nim"
Nim supports raw string literals that don’t require escape sequences. Apart from the
double-quote character ("), which still needs to be escaped as "", any character
placed in a raw string literal will be stored verbatim in the string. A raw string literal is
a string literal preceded by an r:
let filepath = r"C:\Program Files\Nim"
It’s also possible to specify multiline strings using triple-quoted string literals:
let multiLine = """foo
bar
baz
"""
echo multiLine
Escape sequence
Result
\r, \c
Carriage return
\l
Line feed
\t
Tab
\\
Backslash
\'
Apostrophe
\"
Quotation mark
Table 2.3
Common 
character-escape 
sequences
Licensed to   
30
CHAPTER 2
Getting started
The output for the preceding code looks like this:
foo
bar
baz
Triple-quoted string literals are enclosed between three double-quote characters, and
these string literals may contain any characters, including the double-quote character,
without any escape sequences. The only exception is that your string literal may not
repeat the double-quote character three times. There’s no way to include three double-
quote characters in a triple-quoted string literal.
 The indentation added to the string literal defining the multiLine variable causes
leading whitespace to appear at the start of each line. This can be easily fixed by the
use of the unindent procedure. It lives in the strutils module, so you must first
import it:
import strutils
let multiLine = """foo
bar
baz
"""
echo multiLine.unindent
This will produce the following output:
foo
bar
baz
2.2.2
Defining variables and other storage
Storage in Nim is defined using three different keywords. In addition to the let key-
word, which you saw in the previous section, you can also define storage using const
and var.
let number = 10
By using the let keyword, you’ll be creating what’s known as an immutable variable—a
variable that can only be assigned to once. In this case, a new immutable variable
named number is created, and the identifier number is bound to the value 10. If you
attempt to assign a different value to this variable, your program won’t compile, as in
the following numbers.nim example:
let number = 10
number = 4000
The preceding code will produce the following output when compiled:
numbers.nim(2, 1) Error: 'number' cannot be assigned to
Licensed to   
31
Nim basics
Nim also supports mutable variables using the keyword var. Use these if you intend on
changing the value of a variable. The previous example can be fixed by replacing the
let keyword with the var keyword:
var number = 10
number = 4000
In both examples, the compiler will infer the type of the number variable based on the
value assigned to it. In this case, number will be an int. You can specify the type explic-
itly by writing the type after the variable name and separating it with a colon character
(:). By doing this, you can omit the assignment, which is useful when you don’t want
to assign a value to the variable when defining it.
var number: int
IMMUTABLE VARIABLES
Immutable variables must be assigned a value when
they’re defined because their values can’t change. This includes both const
and let defined storage.
A variable’s initial value will always be binary zero. This will manifest in different ways,
depending on the type. For example, by default, integers will be 0 and strings will be
nil. nil is a special value that signifies the lack of a value for any reference type. You’ll
learn more about this later.
 The type of a variable can’t change. For example, assigning a string to an int vari-
able will result in a compile-time error, as in this typeMismatch.nim example:
var number = 10
number = "error"
Here’s the error output:
typeMismatch.nim(2, 10) Error: type mismatch: got (string) but expected 'int'
Nim also supports constants. Because the value of a constant is also immutable, con-
stants are similar to immutable variables defined using let. But a Nim constant differs
in one important way: its value must be computable at compile time.
proc fillString(): string =
result = ""
echo("Generating string")
for i in 0 .. 4:
result.add($i)
const count = fillString()
PROCEDURES
Don’t worry about not understanding the details of procedures
in Nim yet. You’ll be introduced to them shortly.
Listing 2.8
Constant example
This will be initialized to 0.
The $ is a commonly used 
operator in Nim that converts 