# SROP攻击原理及例题解析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近阅读了有关SROP的知识，让我对SROP攻击有了一定理解，但总觉得参考材料中给出的例题解释还是不够详细，需要做进一步解释，才好让更多小伙伴理解SROP的具体攻击原理。所以，这篇文章我想向大家详细介绍一下SROP的具体攻击原理，也想同时结合着一道CTF题目，从静态分析到动态跟踪，让大家对SROP有一个实战级的认识，顺带展示频繁交互的动态调试大概是怎样的。首先，先放三条我啃过的背景知识，各位小伙伴可以尝试直接去看，也可先看我的这篇文章对SROP攻击思路的整理，互为补足：
[1\. SROP exploit](https://xz.aliyun.com/t/5240)
[2\. Sigreturn Oriented Programming (SROP)
Attack攻击原理](https://www.freebuf.com/articles/system/articles/network/87447.html)
[3\. CTF wiki SROP](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/)
本文建立于上述三篇文章之上，着重梳理两个方面内容：1. SROP背景知识及攻击路线。 2. 结合例题进行实操演示讲解。废话不多说，开讲：
SROP全称为Sigreturn Oriented Programming，其攻击核心为通过伪造一个‘Signal
Frame’（以下简称sigFrame）在栈上，同时触发sigreturn系统调用，让内核为我们恢复一个sigFrame所描述的进程，如一个shell、一个wrtie系统调用打印栈地址等，同时通过对sigFrame中rsp和rip的修改，连接多个sigFrame，可通过多次触发sigreturn系统调用，依次恢复多个sigFrame，实现不同的功能，构成SROP攻击。一个sigFrame可理解为一个进程被挂起时，用于保存进程的数据结构，当进程恢复时，通过触发sigreturn来恢复sigFrame，从而恢复一个进程。
SROP漏洞之所以能构成利用，是因为内核挂起某进程时保存的sigFrame和内核恢复某进程还原sigFrame的两个sigFrame，通过对栈指针寄存器sp的控制，不一致，从而还原出一个攻击者想要的进程。
以上为关于SROP的总的介绍，看不懂没关系，下面开始一点点讲解：
首先一个进程P从接收到一个signal到恢复进程P执行，正常情况下会经历如下过程：
1\.
进程P接收到发来的signal，内核为其保存上下文为sigFrame，然后被内核挂起。其中sigFrame的顶部8字节（64位机器字长）或4字节（32位机器字长），会被内核设置为rt_sigreturn。rt_sigreturn为sigFrame顶部第一个机器字长区域的名称，其内容为sigreturn系统调用代码的地址，简单说，rt_sigreturn处的内容指向sigreturn系统调用代码。当后续恢复时，栈指针寄存器sp会直接指向sigFrame的顶部。sigFrame结构如下图：
如上为64位机器字长机器的sigFrame结构，可见其头8字节为rt_sigreturn，指向着sigreturn系统调用代码。
2\. 用户态的Signal Handler函数出马，对进程P接收到的signal进行处理，具体怎么处理的我们不用关系，和SROP攻击无关。
3\. 当Signal
Handler函数处理完signal后，栈指针寄存器sp（64位是rsp，32位是esp）会指向进程P之前保存的sigFrame的栈顶，即rt_sigreturn所在的位置。
4\. Signal
Handler函数最后一个指令是ret，会将3中栈指针寄存器sp指向的rt_sigreturn中的内容，“pop”给指令寄存器ip（64位是rip，32位是eip，这里用pop是想说此时sp也会加一个机器字长，即指向rt_sigreturn内存地址加一个机器字长的位置，根据上图，64位sp此时应指向uc_flags），此时指令寄存器ip处在sigreturn系统调用代码的位置，触发sigreturn系统调用。这样，sigreturn会根据sigFrame中的内容将进程P恢复原状，让P继续执行。
以上，一切看着都挺好的，但是 2014 年 Vrije Universiteit Amsterdam 的 Erik Bosman
指出，是否可以在进程P的sigFrame被sigreturn系统调用恢复前，做点手脚，让sigreturn恢复一个攻击者伪造的sigFrame，然后出发sigreturn调用，从而恢复出另外一个恶意进程出来。
事实证明，这种想法是可以做到的，我们接着聊。明确两点：
1\. sigFrame是完全在用户空间的，进程P可读可写，这就有了攻击者动手脚的空间。
2\.
就是SROP漏洞最根本的，内核对进程P挂起时保存的sigFrame以及恢复时还原的sigFrame没有做任何关联，也就给了攻击者通过伪造sigFrame的方式，让sigreturn系统调用恢复出一个恶意进程的机会。
我们首先伪造sigFrame如下：
1\. 使其中rax=59（execve的系统调用号，rax寄存器既用来保存返回值，也用来保存系统调用号，这个我们后面细说）。
2\. 使其中rdi设置成“/bin/sh”的地址（这个地址可以是攻击者传到栈上的地址，一般是首先泄露栈地址，然后手动加一个offset找到binsh）。
3\. 使其中rip设置成syscall的内存地址。
4\. 最后将sigFrame栈顶的rt_sigreturn手动设置成sigreturn系统调用代码地址。
此时signal
handler执行完毕，栈指针寄存器sp指向这个伪sigFrame栈顶的rt_sigreturn（这个如何让sp指到我们伪造的sigFrame上因题而异，我们看下面例题讲解时再详细讨论），当signal
handler执行ret指令时，会触发sigreturn系统调用代码。
当sigreturn系统调用执行完毕后，我们伪造的sigFrame也被sigreturn恢复完成，按照我们上面伪sigFrame内部构造，可知sigreturn会恢复出一个shell进程。
总结一下攻击成功的前提是：
1\. 可以通过栈溢出控制栈上的内容（从我体会过的两道示例来看，srop题目的特征是让在栈上溢出很多字节）。
2\. 需要知道栈地址，从而知道如传入的“/bin/sh”字符串的地址。
3\. 需要知道syscall的地址。
4\. 需要知道sigreturn的内存地址。
简单解释一下上面的总结，能控制栈上内容是为了传入我们通过pwntools伪造的sigFrame；知道“/bin/sh”字符串的地址、syscall的地址、sigreturn的内存地址是为了填写到伪sigFrame的相应位置，从而让sigreturn系统调用恢复。
我们从刚刚伪造的恢复成execve系统调用的sigFrame，至让sigreturn触发了一次错误恢复，虽然getshell了，但仅仅是理论上的。做题场景往往还要构造更多sigFrame，首先把栈地址打出来，再触发execve
getshell，但是我们通过伪造sigFrame触发的一次syscall后，控制流就不受控了，怎么办呢？
1\. 对伪造的sigFrame中栈指针寄存器sp进行控制即可。
2\. 将伪造的sigFrame中指令寄存器ip的地址由原来的syscall的地址控制成“syscall；ret” gadget的地址即可。
这样触发伪sigFrame中构造的syscall之后，还会执行一个ret指令，将rsp指向的栈顶处的内容弹到rip中，此时让rsp指向下一个伪造的sigFrame栈顶，这样弹栈时，rip就会是下一个sigFrame
rt_sigreturn的内容，从而再来一次sigreturn系统调用，去恢复下一个伪造的sigFrame，实现相应功能。基本流程如下：
上图中注意部署好rt_sigreturn、rsp、rip这三个位置，rsp指向下一个sigFrame的栈顶，sip指向“syscall; ret”
gadget 的地址（即图片中的 &{syscall; ret}）。
这样通过对rsp的控制，实现了sigFrame链接起来，实现连续系统调用，具体系统调用功能，通过控制rax的值来指定（后面详细探讨），形成SROP攻击。
还有件事，就是我们需要找到两个gadget，一个是sigreturn的地址，一个是syscall; ret的地址。
1\.
sigreturn的地址的话，一般是被动调用的，内核在为进程P保存上下文为sigFrame时，会将sigreturn的地址写在sigFrame的栈顶称为rt_sigreturn。所以系统中会有专用代码调用sigreturn。结论是某些系统可直接在固定地址找到sigreturn代码段，而其他系统尤其开了ASLR后不太容易找到，具体参见开头给出的第二个链接。下面做题的时候，我们再具体分析这个问题。
2\. syscall; ret这个gadget的地址，也是一样某在些系统可直接在固定地址找到，而其他系统尤其开了ASLR后不太容易找到。具体做题再看。
还有件事，sigreturn这个地址不一定是必须的，因为：我们将rax设置为15，在触发syscall，效果和sigreturn一模一样，所以找sigreturn
gadget地址的问题，转变为对rax寄存器的控制。但因为rax既用来放系统调用号也用来放函数的返回值，所以比如可以通过read函数读入字节的数量这个返回值来控制rax的值，从而指定系统调用号。
OK，到这估计大家还是没有对SROP有实操级的认识，接下来我先对[参考链接1](https://xz.aliyun.com/t/5240)中给出的示例进行对sigreturn进行介绍，然后对[参考链接3](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/)中给出的例题进行调试讲解。（这篇文章还真是不短，汗）
以下代码和题目都引自上面三个参考链接，我自己的内容是在对引用内容特定的代码部分进行讲解补充调试，以帮助读者更好理解SROP，这里首先感谢三个参考链接的作者小伙伴的材料，让我理解了SROP。
首先看参考链接1作者给出的示例C代码：
    // compiled:
    // gcc -g -c -fno-stack-protector srop.c -o srop.o
    // ld -e main srop.o -o srop
    char global_buf[0x200];
    int main()
    {
        asm(// 读取最多 200 字节
            "mov $0, %%rax\n" // sys_read
            "mov $0, %%rdi\n" // fd
            "lea %0, %%rsi\n" // buf   # 这个%0是c内嵌汇编的占位符，代表第44行的global_buf. 所以传入的字符会直接写到global_buf上
            "mov $0x200, %%rdx\n" // count
            "syscall\n"
            // 读取字节数小于 ucontext_t结构体则直接 exit
            "cmp $0xf8, %%rax\n"
            "jb exit\n"
            // 进行恢复上下文
            "mov $0, %%rdi\n"
            "mov %%rsi, %%rsp\n"  // 执行完read操作，让rsp指到global_buf上.因为在这上面我们要写sigFrame，触发sigreturn来恢复这个sigFrame从而getshell.  sigFrame的构造pwntools已经给我们准备好了，详见exp.py
            "mov $15, %%rax\n" // sys_rt_sigaction
            "syscall\n"
            "jmp exit\n"
            /* split */
            "nop\n"
            "nop\n"
            // syscall 的 symbol，便于查找
            "syscall:\n"
            "syscall\n"
            "jmp exit\n"
            // 退出程序
            "exit:\n"
            "mov $60, %%rax\n"
            "mov $0, %%rsi\n"
            "syscall\n"         
            :
            : "m" (global_buf)
            :
            );
    }
这个程序思路很简单，整体流程就是读取你的输入，如果大小大于一个sigFrame（ucontext_t结构体）的大小，就直接执行sigreturn（rt_sigreturn）系统调用，如果不是，就直接退出。接下来一段一段讲解这个C代码（直接能看懂的同学可以略过下面解释）：
    // compiled:
    // gcc -g -c -fno-stack-protector srop.c -o srop.o
    // ld -e main srop.o -o srop
    这个是编译语句，按着执行就能得到srop这个可执行程序，它是没有依赖和栈保护的。
    char global_buf[0x200];
    这个是全局变量，存放read进来的字符串，同时也是我们传入伪造sigFrame的地方。 
        asm(// 读取最多 200 字节
            "mov $0, %%rax\n" // sys_read
            "mov $0, %%rdi\n" // fd
            "lea %0, %%rsi\n" // buf   # 这个%0是c内嵌汇编的占位符，代表第44行的global_buf. 所以传入的字符会直接写到global_buf上
            "mov $0x200, %%rdx\n" // count
            "syscall\n"
            // 读取字节数小于 ucontext_t结构体则直接 exit
            "cmp $0xf8, %%rax\n"
            "jb exit\n"
以上为C语言内嵌汇编，主要是AT&T风格，汇编前四行：
第一行”mov $0, %%rax\n”是让rax值为0，因为read函数的系统调用号为0
第二行”mov $0, %%rdi\n”是让rdi为0，代表标准输入流
第三行”lea %0,
%%rsi\n”中%0是c内嵌汇编语法，代表后面的global_buf，这样read从标准输入流得到的字节会写在global_buf上
第四行”mov $0x200, %%rdx\n”代表读入字节数量上限
第五行触发syscall，执行read调用，读取标准输入流传入的字节。
第六、七行传入的字节数与sigFrame大小（0xf8）比较，小于就退出，不小于就继续往下执行
            // 进行恢复上下文
            "mov $0, %%rdi\n"
            "mov %%rsi, %%rsp\n"  // 执行完read操作，让rsp指到global_buf上.因为在这上面我们要写sigFrame，触发sigreturn来恢复这个sigFrame从而getshell.  sigFrame的构造pwntools已经给我们准备好了，详见exp.py
            "mov $15, %%rax\n" // sys_rt_sigaction
            "syscall\n"