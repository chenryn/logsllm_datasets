本文为翻译文章，原链接为：
原repo为：
这篇文章是为了成为JAVA开发者去往安全的一个入门指南。很多计算机安全里的论点和攻击依赖于一些不熟悉的技术（例如计算机体系结构，asm等）的深入了解。有时这会有点压力。我们将会看到一些安全漏洞和攻击利用可以使用简单的JAVA代码执行远程代码执行漏洞。
首先我们将会回顾一些相关的JAVA特性（多态，序列化和反射）。然后我们将深入演示使用这些功能执行特定的JAVA安全漏洞。最后我们将讨论如何将你的JAVA代码更加安全。
## JAVA特性回顾
### 多态
多态或者“一个接口，多个实现”这都是作为面向对象语言的重要特性。JAVA通过接口，抽象类和具体类来支持这种特性。
java.util.Map接口是一个不错的案例。一个类必须实现这个接口才能成为一个Map。JAVA标准库也包含了一些类似的实现接口，像java.util.HashMap或它的线程安全的等同类java.util.concurrent.ConcurrentHashMap。再一次的重申，一个接口多个实现。
我们甚至可以写出自己的Map实现。
    public class IntegerToStringMap implements Map { ... }
如果我们发现IntegerToStringMap具有我们想要重用的功能，那么我们可以扩展它以进行更多的Map实现。
    public class AnotherMap extends IntegerToStringMap { ... }
    public class YetAnotherMap extends IntegerToStringMap { ... }
如果我们想防止这种扩展行为呢？JAVA允许使用关键字final来停止对该类的继续扩展。
    public final class IntegerToStringMap implements Map { ... }
这将使得AnotherMap和YetAnotherMap停止被JAVA编译器或JVM接受。
如果使用多态类？继续以Map为例，JAVA中的多态允许我们写如下的代码：
    void useMap(Map m) { ... }
    IntegerToStringMap map1 = new IntegerToStringMap();
    HashMap map2 = new HashMap<>();
    useMap(map1);
    useMap(map2);
这非常有用因为我们在写userMap()方法的使用根本不会在意哪个Map接口被实现了。
### 序列化
序列化是将结构化数据（JAVA中的对象）转换为字节数组的行为。然后程序能够通过逆转的过程恢复结构化数据（反序列化）。由于序列化很常见，因此有一些标准技术可以提供帮助。JAVA中可以通过java.io.Serializable接口和java.io.ObjectOutputStream类核java.io.ObjectInputStream类即可实现序列化机制。
如果你像如下创建一些实现Serializable的接口的类：
    public class Example implements Serializable {
        private Integer attribute;
        public Example(Integer attribute) { this.attribute = attribute; }
        public Integer getAttribute() { return attribute; }
    }
那么它可以进行如下的序列化和反序列化：
    // serialization
    Example example1 = new Example(1);
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    new ObjectOutputStream(byteStream).writeObject(example1);
    byte[] bytes = byteStream.toByteArray();
    // deserialization
    ObjectInputStream stream = new ObjectInputStream(new ByteArrayInputStream(bytes));
    Example example2 = (Example) stream.readObject();
在如上的代码中，将尝试对整个对象example1进行序列化。对象中的所有内容都必须是实现了Serializable类型或者基本类型（long，byte[]等）。该Example类有一个单一的Integer数据字段。Integer实现了Serializable，并且Integer包含了一个int字段。所以这种情况下的example1对象是可以被成功序列化的。
### 反射
反射是这个教程中最难的了。这是一个比较高级的功能集但在JAVA应用中不是很常用。我记得Mark Reinhold和Alex
Buckley在他们使用Java反射API的情况下向Java开发人员询问是否使用过，大部分他们都是没举手的。
在一个demo服务器代码中反射是不需要的。但是我们将会使用反射创建一个利用代码。
反射是一种元变成，它允许你在运行时获取有关程序的信息甚至修改程序的每个部分。一种简单使用反射的方法是来获取你的程序的相关注释信息。假设我们有如下的注解定义和使用方法。
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE)
    public @interface CustomAnnotation {
        public String value() default "";
    }
    @CustomAnnotation("Hello")
    public class TestClass { ... }
那么你将会使用如下代码来获取处于运行时的TestClass注释信息
    CustomAnnotation annotation = TestClass.class.getAnnotation(CustomAnnotation.class);
    if (null != annotation){
        String annotationValue = annotation.value();
    }
通常来说，你可以通过反射API做一些更厉害的事。另一个我们稍后会演示的样例会在运行时实现一个接口。这里是你如何通过java.util.Collection来实现一个反射。
    Collection dummyCollection = (Collection) Proxy.newProxyInstance(
           Main.class.getClassLoader(), new Class[]{Collection.class}, 
           (proxy, method, args) -> {
               // perform custom actions for the method that was called
               return null;
           }
    );
上面的代码片段中的dummy的Lambda实现了java.lang.reflect.InvocationHandler接口。它是每个方法在做调用时都会调用的代码，它必须决定如何处理每个不同方法的调用。
## 远程代码执行Demo
## 服务器设置
这个demo是建立在一个web服务器上，它可以接受且反序列化submission类。这个submission类没什么特别的，如下是com.cisco.amp.server.Submission的片段代码。
    public class Submission implements Serializable {
        private final Collection values;
        public Submission(Collection values) {
            this.values = values;
        }
        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            for (String entry : values) {
                sb.append(entry);
                sb.append("\n");
            }
            return sb.toString();
        }
    }
这个类实现了Serializable接口以允许Submission类对象可以在网络上进行传输。所以这个服务器可以通过HTTP请求来接受字节流然后序列化成Submission实例对象。这个com.cisco.amp.server.SubmissionController中的submit()方法写了如下的代码：
    @PostMapping("/submit")
    public String submit(HttpServletRequest requestEntity) throws IOException, ClassNotFoundException {
        byte[] bytes = IOUtils.toByteArray(requestEntity.getInputStream());
        ObjectInputStream stream = new ObjectInputStream(new ByteArrayInputStream(bytes));
        Submission submission = (Submission) stream.readObject();
        return submission.toString();
    }
在真实的应用中一定很多复杂的逻辑，这里是非常简单的。我们反序列化了输入字节，对这个对象做了一些操作（样例中是toString）并且返回了HTTP响应包。
但是这个很小的服务端代码足够引起一个漏洞。问题是在于没有验证用户输入，我们直接拿了用户传入的字节然后期望是我们想要的那个东西，也就是一个Submission的实例对象。
### 利用加强
我们将会建立一个客户端用来向服务器发送攻击利用代码。我们的目标是让服务器启动计算器这个应用，这是个经典案例。这个想法是你可以让计算器执行的话，就意味着你可以执行任意程序。例如，执行一些可以对攻击者有用的远程shell的应用。
通过构造一个特殊的submission对象，我们应该可以滥用固有的信任。这就是多态和反射发挥作用的地方。我们将通过使用这两个特性欺骗服务器执行我们的代码。
### 多态攻击利用（尝试）
首先，注意到Submission类有一个Collection\成员。因为Collection是一个接口。实际上它并不关心Collection是什么类型实现，任何实现都可以。这有一定道理，因为结果是一样的。ArrayList\，HashSet\或其他一些Collection接口的实现导致的结果都一样。如果不是一个正常的Collection接口实现呢？如果一个攻击者提交了一个带有一些自定义操作的Collection呢？这确实是他们要做的。