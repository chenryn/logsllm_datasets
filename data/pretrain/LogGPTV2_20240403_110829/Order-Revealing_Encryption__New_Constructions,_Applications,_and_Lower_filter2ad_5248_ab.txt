that it occurs with overwhelming probability if the complement of the event occurs with negligible
probability. For two bit strings x, y ∈ {0, 1}∗, we write x(cid:107)y to denote the concatenation of x and y.
c≈ D2 to denote that D1 and D2 are computationally
indistinguishable (i.e., no eﬃcient adversary can distinguish D1 from D2 except with negligible
s≈ D2 if D1 and D2 are statistically indistinguishable (i.e., the statistical
probability). We write D1
distance between D1 and D2 is negligible). Finally, we write D1 ≡ D2 to denote that D1 and D2 are
identical distributions.
We also review the standard deﬁnition of pseudorandom functions (PRFs) [GGM86]. A function
F : K × X → Y is a secure PRF if no eﬃcient adversary can distinguish (except perhaps with
negligible probability) the outputs (on arbitrary points chosen adaptively by the adversary) of F (k,·)
r←− K from that of a truly random function f (·) from X to Y. Similarly, a
for a randomly chosen k
function F : K × X → X is a secure pseudorandom permutation (PRP) if for all k ∈ K, F (k,·) is a
permutation on X and no eﬃcient adversary can distinguish the outputs of F (k,·) where k
r←− K
from the outputs of π(·) where π is a random permutation on X .
2.1 Order-Revealing Encryption
An order-revealing encryption (ORE) scheme [BLR+15, CLWW16] is a tuple of three algorithms Π =
(ORE.Setup, ORE.Encrypt, ORE.Compare) deﬁned over a well-ordered domain D with the following
properties:
• ORE.Setup(1λ) → sk: On input a security parameter λ, the setup algorithm outputs a secret
key sk.
• ORE.Encrypt(sk, m) → ct: On input a secret key sk and a message m ∈ D, the encryption
algorithm outputs a ciphertext ct.
• ORE.Compare(ct1, ct2) → b: On input two ciphertexts ct1, ct2, the compare algorithm outputs
a bit b ∈ {0, 1}.
Correctness. We say an ORE scheme over a well-ordered domain D is correct if for sk ←
ORE.Setup(1λ) and all messages m1, m2 ∈ D,
Pr[ORE.Compare(ct1, ct2) = 1(m1  mj.
3 ORE for Small Domains
The order-revealing encryption in [CLWW16] reveals a signiﬁcant amount of information, namely,
the index of the ﬁrst bit position that diﬀers between two encrypted plaintexts. In this work, we
show how to construct an ORE scheme that only leaks the ﬁrst block that diﬀers, where a block is a
collection of one or more bits. For instance, we can construct an ORE scheme that only reveals the
ﬁrst byte that diﬀers between two encrypted plaintexts, and nothing more.
The starting point for our construction is a “small-domain” ORE scheme with best-possible
simulation security. The limitation is that the length of the ciphertexts in our ORE scheme grows
7
linearly with the size of the message space, hence the restriction to small (polynomially-sized)
domains. We show in Section 4 how to extend our small-domain ORE to obtain an order-revealing
encryption scheme over large domains (i.e., exponentially-sized) that leaks strictly less information
compared to the scheme by Chenette et al. [CLWW16].
As described in Section 1.1, we give our ORE construction in the left/right framework where we
decompose the ORE.Encrypt function into two separate functions: ORE.EncryptL and ORE.EncryptR.
We refer to them as the “left encryption” and “right encryption” functions, respectively. Our
particular construction has the property that only “left ciphertexts” can be compared with “right
ciphertexts.” Note that this is without loss of generality and we can recover the usual notion of
ORE by simply deﬁning the output of ORE.Encrypt(sk, m) to be the tuple (ORE.EncryptL(sk, m),
ORE.EncryptR(sk, m)).
3.1 Small-Domain ORE Construction
We begin with a high-level overview of our construction. Our scheme is deﬁned with respect to a
plaintext space [N ] where N = poly(λ). First, we associate each element x ∈ [N ] in the domain
with an encryption key kx. A (right) ciphertext for a value y ∈ [N ] consists of N encryptions of
the comparison output cmp(x, y) between y and every element x ∈ [N ] in the domain, where the
value cmp(x, y) is encrypted under kx. The left encryption of a value x is simply the encryption
key kx. Given kx and an encryption of cmp(x, y) under kx, the evaluator can decrypt and learn the
comparison bit cmp(x, y). The values of the other comparison bits are hidden by semantic security
of the encryption scheme. Note, however, that we still need a way for the evaluator to determine
which of the N ciphertexts is encrypted under kx without learning the value of x. To ensure this,
we sample a random permutation π on the domain [N ] during setup. The components in the right
ciphertexts are then permuted according to π and the left encryption of x includes the permuted
position π(x). Given π(x), the evaluator learns which component in the right ciphertext to decrypt,
but learns nothing about x. Finally, to show simulation security, we require a “non-committing”
encryption scheme, and for this, we rely on a random oracle [BR93].5
Construction. Let [N ] be the message space. Let F : {0, 1}λ × {0, 1}λ → {0, 1}λ be a secure PRF
and H : {0, 1}λ × {0, 1}λ → Z3 be a hash function (modeled as a random oracle in the security
proof). Let cmp be the comparison function from Remark 2.3. Our ORE scheme Π(s)
ore is deﬁned as
follows:
• ORE.Setup(1λ). The setup algorithm samples a PRF key k
random permutation π : [N ] → [N ]. The secret key sk is the pair (k, π).
r←− {0, 1}λ for F , and a uniformly
• ORE.EncryptL(sk, x). Write sk as (k, π). The left encryption algorithm computes and returns
the tuple ctL = (F (k, π(x)), π(x)).
• ORE.EncryptR(sk, y). Write sk as (k, π). First, the right encryption algorithm samples a
random nonce r
r←− {0, 1}λ. Then, for each i ∈ [N ], it computes the value
vi = cmp(π−1(i), y) + H(F (k, i), r)
Finally, it outputs the ciphertext ctR = (r, v1, v2 . . . , vN ).
(mod 3).
5We believe we can replace the random oracle with a PRF if we aim to prove an indistinguishability notion of security
for our construction. For simplicity of presentation in this paper, we work with a simulation-based deﬁnition and
prove security in the random oracle model.
8
• ORE.Compare(ctL, ctR). The compare algorithm ﬁrst parses
ctL = (k(cid:48), h)
and ctR = (r, v1, v2, . . . , vN ),
and then outputs the result vh − H(k(cid:48), r) (mod 3).
Correctness. Let sk = (k, π) ← ORE.Setup(1λ), and take any x, y ∈ [N ]. Let ct(x)
ORE.EncryptL(sk, x) and and ct(y)
following:
L = (k(cid:48), h) ←
R = (r, v1, . . . , vN ) ← ORE.EncryptR(sk, y), Then, we have the
ORE.Compare(ct(x)
L , ct(y)
R ) = vh − H(k(cid:48), r)
= cmp(π−1(h), y) + H(F (k, h), r) − H(k(cid:48), r)
= cmp(π−1(π(x)), y) + H(F (k, π(x)), r) − H(F (k, π(x)), r)
= cmp(x, y) ∈ Z3,
Note that cmp(x, y) provides the same amount of information as 1(x  y. With this modiﬁcation, the
right ciphertexts in our scheme have length N rather than (cid:100)N log2 3(cid:101).
Remark 3.2 (Beyond Comparisons). By substituting an arbitrary bivariate function f (x, y) for
the comparison function cmp in our construction, we obtain an encryption scheme where any two
ciphertexts ct(x) and ct(y) encrypting messages x and y, respectively, reveal f (x, y). Moreover,
by the security argument given in the proof of Theorem 3.3, we have that ct(x) and ct(y) reveal
nothing more than the function value f (x, y) and the equality predicate x ?= y. Note that equality is
revealed in our construction since the left ciphertexts are deterministic. Our construction can thus
be viewed as a general-purpose property-preserving encryption for two-input functionalities [PR12]
(cid:1),
L , ct(x)
R
L
R
9
or a two-input functional encryption scheme [GGG+14, BLR+15] that leaks equality. Because the
length of the ciphertexts in our construction grow linearly in the size of the domain, our construction
is limited to functions over a polynomially-sized domain. However, in contrast to other schemes that
rely on primitives such as indistinguishability obfuscation [GGG+14], multilinear maps [BLR+15],
or pairings [KLM+16], our construction has the appealing property that it relies only on symmetric
primitives, namely, PRFs.
Security. We now state our main security theorem for this section. We give the proof in
Appendix A.
Theorem 3.3. The ORE scheme Π(s)
Remark 2.3 assuming that F is a secure PRF and H is modeled as a random oracle.
ore is secure with the best-possible leakage function Lcmp from
4 Domain Extension: A Large-Domain ORE
Although our small-domain ORE construction from Section 3 achieves the strongest possible notion
of security for ORE, it is limited to polynomially-sized message spaces. In this section, we show how
to construct an eﬃcient ORE scheme for large domains which achieves provably stronger security
guarantees than all existing eﬃcient ORE constructions for large domains. Our construction can be
viewed as a composition of our small-domain ORE construction together with the ORE scheme by
Chenette et al. [CLWW16].
Intuitively, we can view the techniques used in the Chenette et al. construction as a domain-
extension mechanism for ORE. In particular, their construction can be viewed as a general transfor-
mation that takes as input a k-bit ORE scheme and outputs an kn-bit ORE scheme, with ciphertext
expansion that grows linearly in n and a slight reduction in security (that degrades with n). Under
this lens, the Chenette et al. construction can be viewed as taking a 1-bit ORE scheme (with
best-possible security) and extending it to an n-bit ORE scheme. In this work, we apply this general
domain-extension technique to our small-domain ORE from Section 3, and show how we can start
with a d-bit ORE and extend it to a dn-bit ORE. By varying the parameters n and d, we obtain a
performance-security tradeoﬀ. At a high level, our composed construction implements encryption via
several parallel (preﬁx-dependent) instances of the small-domain ORE scheme Π(s)
ore from Section 3,
one for each block of the plaintext. Using the techniques of Chenette et al. [CLWW16], a blinding
factor is derived from the preﬁx of each block and used to mask the Π(s)
ore ciphertexts for that block.
We give the precise leakage of our construction in Theorem 4.1.
Construction. Fix a security parameter λ ∈ N, a message space size N > 0, and integers d, n > 0
such that dn ≥ N . Let F : {0, 1}λ × [N ] → {0, 1}λ be a secure PRF on variable-length inputs,6
H : {0, 1}λ×{0, 1}λ → Z3 be a hash function (modeled as a random oracle), and π : {0, 1}λ×[d] → [d]
be a secure PRP. For a d-ary string x = x1x2 ··· xn, let x|i = x1x2 ··· xi denote the d-ary string
representing the ﬁrst i digits of x (i.e., the length-i preﬁx of x), and let x|0 be the empty preﬁx. We
deﬁne our ORE scheme Πore = (ORE.Setup, ORE.EncryptL, ORE.EncryptR, ORE.Compare) as follows.
r←− {0, 1}λ. The master secret
• ORE.Setup(1λ). The setup algorithm samples PRF keys k1, k2
key is sk = (k1, k2).
6The Chenette et al. ORE construction also used a PRF on variable-length inputs. We refer to their construc-
tion [CLWW16, §3] for one possible way of constructing a PRF on variable-length inputs from a standard PRF.
10
• ORE.EncryptL(sk, x). Let sk = (k1, k2). For each i ∈ [n], the left encryption algorithm
ﬁrst computes ˜x = π(F (k2, x|i−1), xi) and then sets ui = (F (k1, x|i−1(cid:107)˜x), ˜x). It returns the