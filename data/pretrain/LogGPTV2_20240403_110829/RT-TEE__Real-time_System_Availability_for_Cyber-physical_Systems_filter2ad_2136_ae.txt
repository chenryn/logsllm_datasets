cle, and compared that to the reference state. The deviation
between observed state and reference state is quantiﬁed using
integral absolute error (IAE), a widely used stability metric
in control systems. Shown in Fig. 9 and Table III are the
measurements during the test ﬂight. The control deviation
introduced by RT-TEE is within 13%, and can be further
reduced by tuning the scheduling of the attitude controller.
Shown in Fig. 9a and Fig. 9b, the performance under stabilized
system after the short period of convergence is comparable to
the baseline. The control performance for rover and plane can
be found in Appendix. E.
Macro-benchmarks on Real-life Copter: We measured the
average execution time of 27 ArduCopter task executions over
100 times when ﬂying an actual quadcopter with RT-TEE. The
average execution time of each real-time task in ArduCopter
reﬂects the overall runtime overhead generated by RT-TEE
components, such as secure timer interrupt handler, world
TABLE III: Control Deviation of ArduCopter with RT-TEE
Control Var
∆ X-axis pos.
∆ Y-axis pos.
∆ X-axis vel.
∆ Y-axis vel.
∆ X-axis accel.
∆ Y-axis accel.
Baseline without TEE
Average
2.029
5.917
0.009
0.020
0.008
0.012
Max
2.627
8.043
0.277
0.766
0.091
0.230
RT-TEE
Average
2.138
6.643
0.010
0.023
0.009
0.013
Max
2.944
9.047
0.300
0.790
0.084
0.250
Avg Overhead %
5.37
12.27
11.11
12.75
12.50
8.33
scheduling, secure task scheduling, I/O reference monitor,
and debloated driver. To measure task execution time in
ArduCopter, we instrumented each real-time task to record
task start time and end time to calculate the runtime. To
minimize time recording overhead, we stored all the data
into pre-allocated memory and exported them when a copter
mission ﬁnished. As shown in Fig. 10, none of real-time tasks
exceeding their max execution time, demonstrating means
the runtime overhead generated by RT-TEE components is
acceptable in ArduCopter.
Fig. 10: Runtime Overhead with RT-TEE and Baseline without TEE
Defense Case Study: Fig. 11a and Fig. 11b shows the defense
effectiveness of RT-TEE quantitatively under the same setting
as the time warping attack introduced earlier in the motivation,
between baseline TEE (such as OP-TEE) and RT-TEE. It can
be observed that under the protection of RT-TEE, the absolute
pose error remains very small even after the attack is launched.
(a) Trajectories
(b) Absolute Pose Error
Fig. 11: Time Warping Attack on Baseline and RT-TEE
VII. SECURITY ANALYSIS
A. Real-time Computational Availability – R1, R2, R3
Computation Availability – R1: The availability guarantee
on a processor is through the use of non-bypassable timers.
On ARM platforms, this is the secure physical timer, which
is not modiﬁable by the non-secure OS. When the timer
triggers, the secure world regains the non-interruptable control
on the processor. Similar primitives are also available on other
hardware platforms [30], [28], [35].
Physical Passage of Time – R2: Physical world interaction
requires accurate timing on sensing and actuation. Malicious
modiﬁcation to time can lead to inaccurate perceptions. Physi-
cal passage of time can be obtained from the generic timer on
ARM or the trusted timer on RISC-V. Neither of these timers
is not modiﬁable by software.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
11362
05000100001500020000Controlloop0.00.20.40.6Vel.deviation(m/s)Baseline without TEERT-TEE05000100001500020000Control loop0.000.250.500.751.001.25Accel. deviation (m/s2)Baseline without TEERT-TEEMax Execution Time9.998.2617.424.41.440.8260.690.43635.90.6960.8261.990.4731.364.893.040.5140.8310.7561.1315.75.990.29221.50.9070.2490.369.7820.222.639.91.2611.010.587420.7130.7262.730.4242.97.062.570.5150.7850.3441.5815.64.30.25821.70.8820.4780.71313075200120505050751001009075909010050507575501805505075100100100Time (μs)1101001×103rc_loopthrottle_loopupdate_gpsupdate_batt_compassread_aux_allarm_motors_checkauto_disarm_checkauto_trimupdate_altituderun_nav_updatesupdate_throttle_hoverthree_hz_loopbarometer_accumulateupdate_notifyekf_checkcheck_vibrationgpsglitch_checklandinggear_updatestandby_updatelost_vehicle_updategcs_update_receivegcs_update_sendins_periodicscheduler_update_loggingcompass_cal_updateaccel_cal_updatetemp_calibration_updateLaunch Time Warping AttackLaunch Time Warping AttackReal-time Computational Availability – R3: From the
computation perspective, real-time implies that secure safety-
critical tasks have appropriate allocation of processor time
to meet their corresponding deadlines. In RT-TEE, this is
accomplished using a real-time hierarchical scheduler which
enforces the real-time scheduling policy. For all
types of
real-time schedulers, including hierarchical scheduler, when
schedulability analysis [43], [33] yields a solution that satisﬁes
the scheduling constraints, all the tasks are guaranteed to meet
their deadlines as long as the scheduling policy is strictly
enforced. In other words, individual processes should get their
slices of CPU at the right time for the right duration. Using
the secure timer, the scheduler can ensure that tasks are given
the opportunity to run at the right time. Using an accurate
accounting of physical time, RT-TEE ensures that processes
(malicious or benign) cannot occupy the processor beyond its
allocated budget, thereby enforcing the scheduling policy to
provide real-time availability.
Robustness against Adaptive Attacker: Since the task sched-
ule is often public, an adversary may attempt to occupy the
processor to prevent secure task from running. However, both
the runtime budget and the priority are strictly enforced by
the scheduler. An adversary may also attempt to block the I/O
to cause priority inversion, but that is prevented by bounded
priority inversion in the temporal I/O reference monitor.
B. Real-time I/O Availability Protection – R3
I/O Availability – R1: I/O availability in CPS implies access
to functional sensors and actuators. The assurance of I/O
availability in RT-TEE is based on the use of an I/O refer-
ence monitor which mediates over all accesses to the secure
peripherals. Based on the I/O access control policy, adversarial
interactions with the peripherals are prevented to maintain
functional software and hardware states of the peripherals.
RT-TEE supports different types of I/O access policies. The
simplest policy we used in the prototype states that only
secure tasks can access secure peripherals. For the rest of
the discussion, the focus will be on ensuring the complete
mediation such that the policy can be enforced. There are
two ways that a non-secure OS can access the peripherals,
directly manipulating the MMIO registers and compromising
the driver software to manipulate the device. Direct access
to the MMIO registers is prevented using the hardware prim-
itive for resource isolation [28], [30], [15], e.g., TZASC in
ARM [15]. Drivers remain a key challenge, especially when
our design excludes the feature-rich instance from the TCB.
Debloated drivers replay known interactions. Therefore, an
adversary can only inﬂuence what template to replay after the
I/O reference monitor approves the I/O transaction request.
The ﬁxed-length inputs for the templates are also placed on
the predetermined position of the data, minimizing the attack
surface. For untrusted sandboxed drivers, the main challenge
is the mechanism to conﬁne its behavior with the peripheral.
This is accomplished by trapping all the hardware interaction
instructions to the I/O reference monitor. Based on the I/O
security policy, the reference monitor can either allow or deny
access. In the case when the peripheral is a bus controller,
the I/O reference monitor can also be used to further restrict
which device on the bus a process can interact with.
Real-time I/O Availability – R3: For I/O operations to be
real-time, each request has to be prioritized according to the
process priority. However, some of the low level I/O operations
cannot be easily preempted and can lead to priority inversion,
blocking the secure tasks. In RT-TEE, priority inversion is
minimized and bounded. It is minimized by keeping multiple
priority queues of all the I/O requests such that they are
processed in the correct order. To bound the priority inversion,
the temporal I/O reference monitor inspects each I/O request
to determine if it exceeds the volume or size of the legitimate
requests. The reference monitor will also use the scheduler to
specify a timeout for each I/O operation, thereby bounding the
priority inversion time.
Preventing DoS by Shutdown – R4: There are two mech-
anisms to shutdown or restart the system. One way is to
manipulate power management registers. This is prevented
using the I/O reference monitor. Another way is suspending
the CPU by executing WFI or WFE instructions. However, the
non-bypassable secure timer will always wake up the processor
at the time scheduling events occur, thwarting the attack.
Preventing Physical Component Damage – R4: An ad-
versary can send unsafe actuation commands to permanently
damage physical parts. This can be prevented using the I/O
reference monitor via value range speciﬁcation.
C. TCB Minimization and Platform Security
TCB Analysis – R5: RT-TEE adds several components in the
TCB, as listed in Table IV. The hierarchical scheduler includes
both the world scheduler,
the secure scheduler, and task
structure as well context switching code. However, only rate
monotonic scheduling algorithm is included in the TCB. The
debloated driver pushes almost all the logic to data. Therefore,
the replayer requires around 13 lines of well crafted C code to
replay from memory, with only four types of recordings. The
temporal reference monitor includes basic request data parsing
about the I/O request, priority queue, and dispatcher to invoke
the corresponding driver entry point. We leverage the existing
queue structure and sorting algorithm to minimize TCB. For
the spatial reference monitor, our current policy only involves
range checking. We push all the policy logic to data and have a
few C LOC to check data ranges instead. To support DMA and
IRQ on the drivers, we also need to add 88 lines of assembly
and C code on top of existing IRQ handlers. Lastly, since
our sandbox does not emulate any functionality, it does not
permit control ﬂow outside the sandbox except returning to
the dispatcher in I/O reference monitor. The only TCB are a
TABLE IV: TCB Sizes of Components in RT-TEE
Component
Sched.
LoC C/Asm 820/100
Replayer
13/2
Refer.
Monitor
37/0
S Interrupt
Handler
12/76
Sandb.
32/0
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:11:09 UTC from IEEE Xplore.  Restrictions apply. 
12363
few lines of C code to reuse RT-TEE thread management and
OP-TEE memory management to setup the execution context.
Defense against Time Warping Attack: Time warp attack
exploits the DVFS to present a false sense of execution
on secure tasks. It represents a new class of attacks that
exploit performance interference. Even though access to DVFS
can be prevented using the I/O reference monitor, complete
performance isolation on all shared resources remains an open
research question. To verify the defense, we launched the
attack and were prevented by the I/O reference monitor.
Additional Security Analysis: Analysis on process isolation,
side-channel, and sandbox isolation is available in Appendix F.
VIII. RELATED WORK
TEE on Embedded Processors: Existing work on embedded
TEE has three categories, novel TEE hardware architectures,
hardening TEE environments, and the applications of TEE.
1) Recognizing the limitations on existing commodity TEEs,
there are works focusing on novel TEE hardware architec-
tures [17], [28], [30], [18], [52], [53], [35], [54], [55], [27],
[40], [36], [41]. Particularly, [28], [30], [27] are designed
to provide hardware primitives to bootstrap availability. RT-
TEE is complementary in that our work aims to build on top
of the HAL provided by these novel hardware designs. RT-
TEE addresses key challenges regarding effective use of the
primitives in scheduler and driver software system designs. 2)
To improve the security of existing TEEs, there are also works
hardening the TEE environments [56], [57], [58], [59], [60],
[61], [62]. [59] is a closely related concurrent work in which
Guo et al. proposed to drive peripherals using recordings.
However, our work addresses additional challenges in real-
time, availability, bus, and rich features. 3) Recognizing the
beneﬁts of TEE, there are works that leverage TEE to harden
non-secure environments [20], [63], [64], [65], [66], [67].
RT-TEE is complementary in that it can provide additional
protections, such as availability and protected I/O. While
there is rich literature on TEE,
their focus is mostly on
conﬁdentiality and integrity. Recently, there are new novel
hardware designs to bootstrap availability; however, the TCB
complexity on both the scheduling and I/O subsystems have
not been explored in the context of availability. We believe RT-
TEE is complementary to existing works, addressing important
challenges for the wider adaption of TEE in CPS.
Real-time Scheduling and Security: Real-time scheduling
is one of the most active areas in cyber-physical systems.
Hierarchical scheduling has been used in hypervisors to enable
more optimal utilization between isolated containers [68].
There has also been some work in repurposing TrustZone as
a hypervisor [45], [69], [44] and putting the entire safety-
critical operating system into a secure world to achieve per-
formance isolation. There are also recent works in applying
microkernel [34] and microhypervisor [70] to provide timing
control. RT-TEE is complementary to the existing works in
that it focuses on solving TCB minimization and secure I/O
in addition to real-time scheduling.
CPS and Embedded System Hardening: Existing work on
improving CPS resiliency generally falls into two categories,
the control approach [71] and the system approach [72], [66],
[73], [12], [11], [74], [64], [75], [13], [76]. The I/O reference
monitor in RT-TEE is inspired by [13], [76]; however, RT-
TEE is a prevention system rather than a detection system and
additionally ensures availability. RT-TEE is complementary
to these system hardening techniques, providing a previously
unexplored security attribute: availability.
IX. LIMITATIONS AND DISCUSSIONS
Hardware Abstraction for Resource Isolation: Many mod-
ern embedded TEE architectures [17], [28], [30], [18], [35],
[54], including the upcoming ARM CCA [54], support full
system resource isolation, including both processor and I/O.
Though the concrete mechanism and conﬁguration are often
SoC-dependent, RT-TEE builds on top of a common abstrac-
tion of availability primitives and is capable of supporting
these new platforms through individual HAL implementations.
Driver Transformation and Exception Handling: One of the
key trade-offs in driver debloating is simplicity for security.
In predictable CPS, this is effective, as demonstrated in our
drone prototype. However, there are also limitations. First,
error handling is removed. In CPS platforms, this is acceptable
since most of the error handling functions just probe the sensor
again. If necessary, a sensor initialization template can also
be added to support recovery. Second, there might be drivers
with many features leading to an explosion of templates. A
sandboxed driver can be used along with the debloated driver
to mitigate the tension in RT-TEE.
X. CONCLUSION
In this paper we present RT-TEE, a real-time trusted ex-