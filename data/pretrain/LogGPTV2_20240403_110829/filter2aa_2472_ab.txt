构建 
构建工具和环境由专
人负责维护，并使用权
限隔离 
3 
定义结构化构建脚
本，实现模块级共享
复用和统一维护 
构建环境配置实现标准
化，有独立的构建集群，
单次构建控制在小时级 
明确定义构建计划和规
则，实现代码提交触发
构建和定期自动执行构
建 
构建工具和环境由专
门团队维护，并细分团
队人员职责 
4 
实现构建服务化，可
按需提供接口和用
户界面用于可视化
构建编排 
优化构建速度，实现增量
化构建和模块化构建，单
次构建控制在分钟级，如
可采用分布式构建集群、
构建缓存等技术 
分级构建计划，实现按
需构建并达到资源和速
度的有效平衡 
构建系统服务化提供
更多用户使用，构建不
再局限于专业团队进
行 
5 
5 
持续优化的构建服
务平台，持续改进服
务易用性 
持续改进构建性能，实现
构建资源共享和动态按需
分配回收，如搭建基于云
服务虚拟化和容器化的分
布式构建集群 
同上 
将构建能力赋予全部
团队成员，并按需触发
构建实现快速反馈 
7.2 持续集成 
持续集成是软件工程领域中的一种最佳实践，即鼓励研发人员频繁的向主干分支提交代码，频率为
至少每天一次。每次提交都触发完整的编译构建和自动化测试流程，缩短反馈周期，出现问题第一时间
进行修复，从而保证软件代码质量，减少大规模代码合并的冲突和问题，让软件随时处于可发布状态。 
级
别 
集成服务 
集成频率 
集成方式 
反馈周期 
1 
没有搭建持续集成
服务，团队成员缺乏
对持续集成的理解 
长期本地开发代码集成
频率几周或者几月一次 
代码集成作为软件交付
流程中的一个独立阶段 
每次集成伴随大量的问题
和冲突，集成期间主干分
支长期不可用 
2 
搭建统一的持续集
成服务并对系统进
行日常维护和管理 
采用团队定期统一集成
的策略，代码集成频率
几天或者几周一次 
在部分分支上进行每天
多次的定时构建 
集成问题反馈和解决需要
半天或者更长时间 
3 
组建专门的持续集
成团队，负责优化持
续集成系统和服务 
研发人员至少每天向代
码主干集成一次 
每次代码提交触发自动
化构建，构建问题通过自
动分析精准推送相关人
员处理 
集成问题反馈和解决可以
在几个小时内完成 
4 
持续集成嵌入每个
研发团队日常活动，
实现持续集成系统
服务化和自助化 
研发人员每天多次向代
码主干集成，每次集成
代价较低 
每次代码提交构建触发
自动化测试和静态代码
检查，测试问题自动上报
变更管理系统，测试结果
作为版本质量标准要求，
如：采取质量门禁等方式
强化主干代码质量 
集成问题反馈和解决控制
在 30 分钟以内完成 
5 
持续优化和改进团
队持续集成服务，实
现组织交付能力提
升 
任何变更（代码，配置，
环境）都会触发完整的
持续集成流程 
实现持续集成分级和自
动化测试分级，满足不同
模块和集成阶段的差异
化需求 
集成问题反馈和解决控制
在 10 分钟以内完成 
8 测试管理 
测试管理是指一个过程，通过该过程，所有与测试相关的过程、方法被定义。在产品投入生产性运
行之前，验证产品的需求，尽可能地发现并排除软件中的缺陷，从而提高软件的质量。 
测试管理又可以分为测试分层策略、代码质量管理、自动化测试等多个维度表述。 
6 
8.1 测试分层策略 
测试分层策略是建立一种分层的测试体系，把测试作为一个整体来规划和执行，融入到持续交付的
各个阶段中，达到质量防护的目的。 
级别 
分层方法 
分层策略 
测试时机 
1 
只进行用户/业务级的 UI 测
试 
尚未建立测试分层策略，测试不分
层 
测试在软件交付过程中在开发完
成后才介入 
2 
采用接口/服务级测试对模
块/服务进行覆盖全面的接
口测试；采用代码级测试对
核心模块的函数或类方法
进行单元测试；对系统进行
基本的性能测试 
测试开始分层，但对测试分层策略
缺乏系统的规划，对用户/业务级测
试、接口/服务级、代码级测试分布
比例由高到低，各层测试缺乏有效
的设计 
测试在持续交付过程中的介入时
间提前到开发的集成阶段，接口/
服务级测试在模块的接口开发完 
成后进行 
3 
采用代码级测试对模块的
函数或类方法进行覆盖全
面的单元测试；系统全面的
进行性能、容量、稳定性、
可靠性、易用性、兼容性、
安全性等非功能性测试 
对测试分层策略进行系统的规划，
用户/业务级、接口/服务级、代码级
测试分布比例由低到高，充分设计；
对非功能性测试进行全面系统的设
计 
测试在持续交付过程中的介入时 
间提前到开发的编码阶段，代码
级测试在模块的函数或类方法开
发完成后进行 
4 
采用测试驱动开发的方式
进行代码级、接口级测试；
采用探索性测试方法对需
求进行深入挖掘测试 
测试分层策略的各层测试具有交叉
互补性 
代码级测试在模块的函数或类
方法开发过程中同步进行和完
成；接口/服务级测试在模块的
接口开发过程中同步进行和完 
成 
5 
采用验收测试驱动开发的
方式进行用户/业务级的 UI 
测试 
定期验证测试分层策略，是否完整、
有效，持续优化策略 
在需求阶段进行用户/业务级测
试设计，在需求特性开发、交付 
整个过程中同步进行并完成测
试 
8.2 代码质量管理 
代码质量管理是在软件研发过程中保证代码质量的一种机制，当代码变更后，可以对代码质量进行
检查、分析,给出结论和改进建议，对代码质量数据进行管理，并可以对代码质量进行追溯。 
级
别 
质量规约 
检查策略 
检查方式 
反馈处理 
1 
代码质量检查无任
何规约 
代码质量检查无针对检
查范围、质量门限等相 
关的策略 
代码质量检查采用人工
方式进行评审 
对代码质量检查结果处理
不及时，遗留大量技术债 
2 
代码质量检查具备
代码质量检查有针对检
代码质量检查采用自动
对代码质量检查结果给出
7 
基本规约，但还缺乏
完整性和有效性 
查范围、质量门限的策
略，对代码规范、错误
和圈复杂度、重复度等
质量指标进行检查分析 
化结合手工方式进行 
反馈，根据反馈进行处理，
对遗留的部分技术债缺乏
跟踪和管理，导致遗漏 
3 
代码质量检查具备
完整、有效和强制执 
行的规约 
代码质量检查将安全漏
洞检查、合规检查纳入 
到检查范围 
代码质量检查完全自动 
化，不需要手工干预 
根据代码质量检查结果反
馈及时处理，技术债仍有
短期遗留，但进行有效的 
跟踪、管理和处理 
4 
代码质量检查规约
根据需要可进行扩 
展和定制 
代码质量检查针对检查
范围、质量门限的策略
可根据需要灵活调整 
对代码质量检查发现的 
部分问题自动提出修改
建议，支持可视化 
将检查结果强制作为版本
质量标准要求，根据代码
质 量 检 查 提 出 的 修 改 建
议，对问题及时处理，在
研发阶段主动解决技术债 
5 
定期验证代码质量 
规约的完整性和有
效性，持续优化 
定期验证代码质量 
策略的完整性和有效 
性，持续优化 
具备企业级的代码质量
管理平台，以服务的形式 
提供对代码质量的检查、
分析 
对代码质量数据进行统一
管理，可有效追溯并对代
码质量进行有效度量 
8.3 自动化测试 
自动化测试是把以人为驱动的测试行为转化为机器执行的一种过程，在预设条件下运行系统或应用
程序，执行测试并评估测试结果，以达到节省人力、时间或硬件资源，提高测试效率和准确性。 
级
别 
自动化设计 
自动化开发 
自动化执行 
自动化分析 
1 
未采用自动化方式
测试，纯手工测试 
尚未对自动化测试脚本
进行开发和管理，手工
测试 
手 工 测 试 执 行 效 率 低
下，以周级为单位 
手工对测试结果进行分
析判断，错误高，可信度
低 
2 
尚未对测试用例中
自动化部分进行规
划和设计，覆盖不完
整 
对自动化测试脚本进行
开发和本地管理 
对用户/业务级测试采用 
自动化测试，自动化测试
的执行效率不高，以天级
为单位 
对自动化测试结果具备一
定的自动判断能力，存在
一定的误报，可信度不足 
3 
根据需求、接口和代