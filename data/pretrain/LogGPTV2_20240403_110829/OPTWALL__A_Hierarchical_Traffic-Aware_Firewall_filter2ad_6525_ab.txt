Semantic integrity of the original rule set can be achieved,
during the rule set partitioning process, by computing ﬁlters
that represent accurately and completely the rule subsets. Fur-
thermore, packet processing must follow the same semantics
speciﬁed by the ﬁlters resulting from the partitioning process.
If the rules are split and re-ordered, in order to optimize
operational cost, the process of re-enforcing the original rule
semantics must be achieved with reduced overheard.
C. Hierarchical Structure Building
The process of building the hierarchical structure described
previously is accomplished using three basic stages: pre-
processing, ordering, and splitting. In the following, we dis-
cuss the basic operations carried out at each of these design
stages.
The pre-processing stage takes as its input the original
list based rule set and produces an optimized rule set. This
optimized rule set consists of fully disjoint and concise rules,
where all rule redundancies and dependencies are removed
[3]. The fact
the rules in the rule set are mutually
disjoint provides OPTWALL with full ﬂexibility to re-order
the rules and divide them into rule subsets, without violating
the semantics of the original rule set.
that
In the pre-ordering stage, rules are re-ordered such that the
highest cost rules are moved to the top of the rule set. As
stated previously, the cost of a rule is based upon the size of
the rule and the amount of trafﬁc processed by that rule, as
indicated by its hit count. By re-ordering rules the overall cost
of processing trafﬁc is reduced.
The goal of the splitting stage is to produce a partition of the
original rule set into a set of mutually disjoint rule subsets.
This process involves taking the pre-processed rule set and
dividing it into rule subsets, each of which is deﬁned by a
ﬁlter. Each ﬁlter is a series of disjoint tuples that fully cover
its corresponding rule subset.
To partition the original rule set, OPTWALL uses a multi-
step process, whereby it initially splits the original rule set
into two subsets. It then recursively runs this splitting process
on the subsets produced by the previous stage to generate the
next level of the hierarchical structure. This splitting process
continues until the overall processing cost overshadows the
beneﬁt gained by further splitting the current subsets. When
this occurs, the splitting process terminates and the previous
level is selected as the feasible optimal depth of the hierarchi-
cal structure.
The efﬁciency of the partitioning process strongly depends
on the way the rule subsets are produced at different levels
of the hierarchy. Several strategies to produce feasible rule
set splitting can be used. These strategies are discussed in
SectionV.
The produced hierarchical structure is then converted to a
series of IP-table rule subsets. It is to be noted that most list
based ﬁrewalls, such as Linux ipchains, support the ability to
forward packets from one list to another for further processing.
Consequently, the OPTWALL hierarchical structure can be
used to augment the ﬁltering capabilities of list based ﬁrewalls.
D. Hierarchical Structure Maintenance
The hierarchical structure is built to reﬂect the current trafﬁc
pattern and rule sets. As the trafﬁc pattern and rule sets change,
the hierarchical structure must be updated to maintain its
balance. To detect changes, OPTWALL monitors the trafﬁc
logs in real-time and adjusts the hit counts. OPTWALL asserts
that changes have occurred if the difference between the old
and updated hit counts of any rule exceeds a predetermined
threshold. This threshold, a tunable parameter, is determined
based on the trafﬁc characteristics and the policy set under
consideration.
If the need to balance the hierarchical structure rises,
OPTWALL uses the existing trafﬁc logs to update the cost
of rules in the rule subsets, including rules which have been
added to reﬂect a new security policy. OPTWALL then uses
re-ordering, re-splitting, and promoting to re-establish the
balance of a hierarchical structure.
Re-ordering consists of re-prioritizing the rule subsets at
the deepest level of the hierarchical structure. This process
is necessary to take into consideration the impact of trafﬁc
variations on the hit count of rules in a given rule set. Re-
ordering is triggered when a the different between the current
and previous hit counts of a given rule exceeds the threshold.
Re-splitting is invoked when a sub-hierarchical structure
becomes out of balance, due to trafﬁc variations. A sub-
hierarchical structure is considered to be out-of-balance if the
average packet processing cost exceeds a predeﬁned threshold.
This process can occur at any level, including the root of the
hierarchical structure. When sub-hierarchical structure is out
of balance, splitting is applied to the original rule subset that
generated this sub-hierarchical structure. In some cases, it is
not possible to produce a more balanced hierarchical structure,
in which case the level is marked as currently optimal and the
threshold for the intermediate levels are increased.
Promoting aims at reducing the overhead of packet pro-
cessing at different levels of the hierarchy. The need for rule
promotion occurs when a single rule hit count increases dra-
matically and exceeds its predeﬁned threshold. This scenario
is likely to occur during anomalous trafﬁc behavior, typically
observed during Denial-of-Service (DoS) attacks. To mitigate
the impact of DoS attacks and drastically reduce the cost
of processing trafﬁc generated by these attacks, the rule is
promoted to a level above the ﬁlters. Depending on the rule’s
priority, promotion may continue recursively until it reaches
its appropriate priority level. In the extreme case, the rule
may be moved all the way up to the root of the hierarchical
structure. This promotion is temporary and the rule, as it
never removed from the rule subsets. The reason behind the
temporary promotion stems from the transitory nature of DoS
attacks. Once the trafﬁc has returned to its normal levels, the
Original Ruleset
Remove Duplicate
Rules and 
Compress
Create Disjoint
Rule Set
Re−order Rules
Based Upon Cost
Function
Central Authority
Trigger
Re−Split
Trigger
Rule Promotion
(DoS)
Monitor Cost
At Children
Child Process
g
o
l
s
y
S
g
n
i
r
o
t
i
n
o
M
Feed Cost
Data Back
Split Capital Rules
Into Two Sets And
Produce Two Filters
That Describe Each
Subset
Install Rule Set On
Two Children And
Install Filters On
Parent
m
e
t
s
y
S
H
S
S
l
l
a
C
Install Rule Set
Monitor Cost
Re−order Rule
Locally
Fig. 3: OPTWALL: Architecture
promoted rule can be removed from the higher levels.
The automatized interaction between the levels (parent-child
modules) of OPTWALL is illustrated in Figure 3. Each level,
starting from the root, acts as a central authority to a lower
level in the hierarchy.
V. OPTWALL Splitting Design Approaches
The efﬁciency of the splitting process, in terms of packet
processing overhead, strongly impacts the performance of the
ﬁrewall. In this section, we ﬁrst describe the splitting process
and discuss various solutions proposed for splitting the rule
set. In this paper we describe a rule with single attribute value
as a tuple. We will use the tuple set as the input to our splitting
process.
The output of the splitting operation are two ﬁlters and their
corresponding tuple subsets. The ﬁlters and tuple subsets are
semantically similar to that of a single list based tuple set. The
process of splitting relies upon three basic functions MATCH(),
DISTANCE(), and WIDEN(). All three function are available
on the ﬁlter object and all accept a single argument of a tuple.
The MATCH() function checks to see if a tuple is covered
by the ﬁlter. The source and destination IP addresses are
compared to the range speciﬁed in the ﬁlter. Similarly the
port number is compared to the port range speciﬁed in the
ﬁlter. The protocol type is matched to a list of protocol types
the ﬁlter evaluates upon. This function returns true if the tuple
matches the tuple and false otherwise.
The DISTANCE() function calculates the distance between
a given tuple and the ﬁlter. If the ﬁlter matches the tuple
then the value returned by this function is 0. Otherwise, this
function returns a positive number between 0 and 1, not
inclusive. The distance is based on the entire tuple.
To calculate the distance between two IP addresses we look
at the numerical distance between them is considered. If the
IP addresses represent ranges, the distance function based on
the distance between the two furthest points within the ranges
is calculated. A similar procedure is used to calculate the
distance between ports or port ranges. The protocol distance is
set to 0 if the protocol already exists in the protocol list for the
ﬁlter. Otherwise the distance is set to 1. All the distances are
then normalized to the maximum values of their respective
ﬁelds. The summation of this normalized values are then
weighted and re-normalized to produce a value between 0 or
1.
The WIDEN() function is used to expand a ﬁlter such that
it matches the given tuple. This is achieved by expanding the
IP range, port range, and protocols. A function calculates the
cost of the tuple based on trafﬁc characteristics and other tuple
properties.
The driver of the splitting process is the search for a set
of ﬁlters, which covers the the hierarchical structure without
violating the semantic integrity of the original ruleset, in order
to improve the operational cost of the ﬁrewall. Ideally, optimal
splitting ensures that, at the end of the partitioning process, all
subsets has equal cost. Consequently, when an optimal split is
achieved, the average processing cost of each packet is reduced
by half of its original cost. An optimal strategy for performing
a cost-balanced split of the original set of rules is to use two
sub-lists and alternatively place the rules in each list, starting
with the highest cost rule, until the set of rules is exhausted.
While this strategy is optimal, it is not always feasible. This
due to the fact fact that each rule subset produced at each stage
of the splitting process must have a mutually disjoint set of
ﬁlters. Computing such ﬁlters may not be always achievable.
The next subsection focuses on the issues related to the
design of splitting the tuple set into hierarchical tuple subsets.
First, an optimal solution is presented and its applicability in a
real ﬁrewall setting is discussed. A variety of heuristics, which
achieve near optimal solutions with reduced overhead, are then
presented.
A. Optimal Approach
The optimal splitting approach is based on an A* search
strategy. Achieving an optimal partition is possible since the
computes the optimal cost of the remaining unassigned tuples
percentage. This enables the search to converge to ﬁlters of a
nearly optimal solution at a much faster rate.
cost can be calculated cumulatively for any partition as it is
ﬁxed and does not vary with the tuple priority. The basic steps
of the Optimal Solution are depicted in Algorithm 1.
The functiong determines the cost of the conﬁguration
in the current state. The functionh, on the other hand,
if placed in either of the subsets. The functionhax
betweenhax andhi is lower than a speciﬁed error
worst case time complexity is of the order of2
calculates the maximum cost of the remaining tuples. This
can be used as a guideline to terminate the computation of the
ﬁlters if the cost beneﬁt resulting from this new ﬁlters does
not improve on the gains of the previous conﬁguration.
Another mechanism, which is used to reduce the overhead
incurred by the search of the feasible optimal solution, is to
prune the search space. This is triggered when the difference
Even though a feasible optimal solution can be obtained, the
, where N is
the number of tuples. As the number of tuples becomes large
searching for such a solution leads to a ﬁrewall bottleneck.
Another shortcoming of the optimal solution is that the mem-
ory requirement can also become prohibitive as the number
of tuples becomes very large. To address these drawbacks a
set of heuristics are proposed. These heuristics converge to a
nearly optimal solution, while maintaining a time complexity
linear in the number of tuples.
B. Heuristic Solution
The heuristic solutions proposed are local greedy search
solutions aimed at determining a set of ﬁlters and splitting
the list based tuple set into two tuple subsets. Each tuple
of the list based set is disjoint from the other. This aids
the performance and effectiveness of the approach to split
the tuples into smaller tuple subsets. As mentioned in [6]
application of greedy scheme works best when the tuples
are all disjoint from one another. In other words, making
tuples disjoint from each other enables full ﬂexibility for tuple
splitting and re-ordering based on trafﬁc characteristics.
Depending on the choice of the initial ﬁlters, ﬁve different
variations of the Greedy Heuristic are proposed. The ﬁrst
variation of the Greed Heuristic is to deterministically assign
the highest priority tuples as the initial ﬁlters. This heuristic is
referred to as Hit count-Hit count Heuristic. The idea behind
choosing the highest ranked tuples as the initial ﬁlters is to
assign the highest costing tuples into different tuple subsets in
order to arrive at a cost balanced solution. The main steps of
the algorithm is described in Algorithm 2.
The next variation of the Greedy Heuristic is to assign one
initial ﬁlter as the highest costing tuple and the next initial
ﬁlter as one amongst the rest of the tuples which is at a
maximum distance from the highest cost tuple. The distance is
calculated using the DISTANCE function as stated previously.
This variation of the Greedy Heuristic is referred to as the Hit
count-Max distance Heuristic.
The third variant of the Greedy Heuristic uses a randomly
Algorithm 1 Optimal Solution
tuples
INPUT:
ALGORITHM
gi; = cost of ia and ib after adding tuple n to
list ih = current cost of optimally placing the remaining
i; =gi; +h
fi ea, ia = ﬁlter and tuples for list A
fi eb, ib = ﬁlter and tuples for list B
a
k = stack ordered with least cost on top
	 e[℄ - List of tuples sorted by cost
	e =0, ia =;, ib =;
	eT	 e =	 e[
	e℄
while
	e then
a
k:add
fi ea.widen(currentTuple), ia.add(currentTuple)
iffi ea\fi eb=
then =
iffi ea.widen(
	eT	 e)\fi eb6=
 then
a
k:add
fi eb.widen(currentTuple), ib.add(currentTuple)
iffi ea\fi eb=
then =
	e
	eT	 e =	 e[
	e℄
end while
OUTPUT:
stack.pop()
stack.pop()
end if
end if
end if
then
end if
else