there are a large number of automated tools that are constantly scanning for
these scripts in an attempt to exploit them.  Because of this, there is a high risk of
compromise if any of these files remain installed on a web server.  The severity
of this vulnerability is rated as medium-high.  A successful exploit against one of
these scripts has the potential to give an attacker full access to the web site.
The net risk is therefore medium-high (3.5).
Testing Procedure/Compliance Criteria: Use Nessus to scan the site.  First,
from a command prompt, update the collection of installed Nessus plug-ins to the
most recent set by typing nessus-update-plugins.  Next, launch Nessus and
log in.  In the “Plugins” tab, select only the “CGI abuses” category of plug-ins.
While the other categories contain very useful scans, they are outside of the
scope of this audit.  For an audit with a wider scope, one would most likely want
to enable almost all of these; the “dangerous plug-ins” option should obviously be
used with extreme caution if production servers are being scanned, as these
tests have the capacity to crash a server if they are successful.  
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
22
Next, go to the “Target Selection” tab, and enter the IP address of the web site.
Then, click the “Start the Scan” button to begin testing.
One should always save a copy of the scan results when the scan is completed,
for inclusion in the audit report.  Analyze these results, keeping an eye out for
items that Nessus categorized as a security hole, with a severity of high, serious,
or medium severity.  Based on my personal experience, Nessus—as with many
vulnerability scanners—often gives false positives.  If possible, verify any findings
that Nessus gives.  For example, if Nessus reports a security vulnerability be-
cause the site is running a version of the Foobar application older than version
1.5, query that application directly to determine what version it is.  If there is any
doubt or confusion as to whether a finding is a false positive or not, one should
attempt to find further information on exploiting the vulnerability.  In most cases,
web server vulnerabilities such as these can be triggered simply by entering a
specially crafted URL into any web browser.  Check online for further details for
the specific vulnerability in question.
If Nessus finds any high, serious, or medium severity issues that are not false
positives, the site fails this test.  Low severity issues should be brought to the
attention of the site owner, but do not cause the site to fail this test on their own.
If Nessus gives only warnings, no findings at all, or if all the higher-severity find-
ings were determined to be false positive, the site passes this test.
Test nature: Objective
Evidence: To be determined
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
23
Findings: To be determined
2.6 Test Backup Procedures
Checklist Item Number: 006
Checklist Item Name: Test Backup Procedures
Reference: After searching web pages and archived Usenet posts, I was unable
to find any worthwhile references on backup strategies and recommendations
specifically for web sites.  These will have to be based on my personal experi-
ences.
For backups of the MySQL database, there is far more information available.
The 
most 
direct 
reference 
is 
in 
the 
MySQL 
manual 
itself:
http://dev.mysql.com/doc/mysql/en/mysqldump.html is the documentation for the
mysqldump program, which is designed for automated extraction of all data from
a MySQL database.
Risk: This test addresses many of the vulnerabilities listed in section 1.2.3 of this
document.  For example, any vulnerability in which an attacker could compro-
mise the data stored in the database or modify the pages on the site would cause
the site owner to respond by attempting to restore from backups.  In those cases,
having a good backup would allow easy recovery.  This test is most important for
vulnerability number three, however, in which the web hosting company suffers a
catastrophic loss.  In most cases the web hosting company would have their own
backups, which could be used in the case of a web page defacement, for exam-
ple.  The site owner’s backups would simply be another option.  However, the
site owner should have at least one local backup of all his PHP code, HTML files,
and database contents, in the event that the web hosting company loses all
backups, for whatever reason.
The likelihood of exposure to this vulnerability is considered low.  As discussed
above, these are secondary backups, which supplement the backups being per-
formed by the hosting company.  However, the severity of impact is high.  If the
web host does lose all backups and current data, the web site would be severely
crippled.  All code would need to be re-written, all users would need to re-
register, and all data in the database would need to be re-entered.  Because so
much of the content is supplied by visitors to the site, it would be impossible to
exactly recreate it all.
The net risk is therefore medium (3).
Testing Procedure/Compliance Criteria: There are two separate components
of this test.  First, interview the site owner, and find out what the backup proce
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
24
dure is, if any.  Ensure that there are frequent backups performed.  The fre-
quency of backups is a subjective area, and depends on the needs of the site
and the site owner.  Since the web host already performs their own regular back-
ups, the site owner’s backups are an extra level of protection.  Considering the
size of this site, weekly backups may be sufficient.  Anything less often would be
difficult to justify, and more often—for example, daily or every other day—would
be preferred.  The backups must consist of all HTML, PHP, and CSS files used in
the web site, as well as the database contents.  If the backup is incomplete in
any way, the site fails this test.  If the auditor’s assessment is that the backup is
complete and performed regularly enough for the needs of the site, it passes this
initial portion of the test.
Following this initial assessment, the auditor should actually test the backup, with
the site owner’s cooperation.  Have the owner remove all files from the develop-
ment/staging server, and delete the database (for example, rm –rf
/var/www/site to delete the files, and DROP DATABASE database-name
from within the MySQL console to delete the database.)  Verify that the site is no
longer available by attempting to view the site hosted on this development server
via a web browser.  Then have the owner restore both the files and the database
contents.  Verify that the site has been restored by again attempting to view the
site via a web browser.  Verify that the content in the database and the version of
the code are as recent as the backup date indicates they should be.  If the site
was successfully restored, it passes this portion of the test.  If the data is out of
date, or cannot be fully restored from backups, the site fails this portion of the
test.
If both of these components—the subjective assessment of the backup strategy
and the test of the backups—are passed, the site passes this test.  If either or
both fail, the site fails this test.
In most audits, documented backup and recovery procedures would be exam-
ined.  However, as this site is a one-person operation, it is a special case.  I do
not believe that documented backup and recovery procedures are a requirement
in this situation.
Test nature: Both objective and subjective.  The first phase of the test is partially
subjective, as the auditor has to determine what a reasonable backup strategy is
for this application.  The second phase of the test is objective.
Evidence: To be determined
Findings: To be determined
2.7 Unsafe Hidden Form Elements
Checklist Item Number: 007
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
25
Checklist Item Name: Unsafe Hidden Form Elements
Reference: OWASP Guide to Building Secure Web Applications and Web Serv-
ices, pages 46-47.
Risk: This test addresses vulnerability number 13 in section 1.2.3 of this docu-
ment.  The exposure of this vulnerability is rated as medium-high.  This is a
common mistake in programming web applications, and even though it is well-
known, many sites are still making this mistake today.  And because it is a well-
known issue, it is a vulnerability that many people can easily exploit.  The sever-
ity of impact is also rated as medium-high.  In the worst case scenario, the appli-
cation may allow an attacker to give themselves administrative rights to the web
application, allowing them to read, change, or delete any or all items in the data-
base.
The net risk of this vulnerability is therefore serious (4).
Testing Procedure/Compliance Criteria: In this test, we will use wget21 to copy
all files from the web site so we can search them. To mirror the site with wget,
use the following command:
wget –m http://web.site.address
This will copy all pages from the site to the current directory, preserving as many
of the original attributes as possible.  Next, we need to search the resulting
pages for any hidden form fields.  These fields will all say type=”hidden” in
the HTML form input options.  The quotation marks are technically required, but
browsers will accept the option without the quotation marks, so we are not guar-
anteed that they will be there.  Therefore, the auditor needs to search for both
type=hidden and type=”hidden” in all pages retrieved by wget.
The method used for searching all files depends on the operating system in use.
On Unix-like operating systems (e.g., Linux, FreeBSD), use the grep tool.  This
tool is also available for Windows for those auditors who wish to use it.  Alterna-
tively, the built-in “find file” functionality in Windows will allow you to search the
contents of all files in that directory for the string.  The exact method depends on
the version of Windows in use, but is generally along the lines of Start > Find >
Files and Folders to bring up the find file dialog box.  The option to search in files
may be on that screen, or may be in other options; again, it depends on the ver-
sion of Windows in use.
21 http://www.gnu.org/software/wget/wget.html
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
26
If any web pages are found containing hidden form elements, additional assess-
ment is required.  If the hidden form elements are simply items that were entered
by the user in another form, or otherwise supplied by the client, then changing
them does not give the attacker any advantage. However, if the hidden elements
contain any field that the user should not be able to change, the site may be vul-
nerable.  Whether it is or not depends on if the application does further validation
of these inputs or not, and if the hidden elements control any valuable variables
(for example, user ID, or access level.)
To test possibly vulnerable forms further, the “Show Hiddens” bookmarklet22 is
recommended.  By making this bookmarklet available in your web browser, one
click on it exposes all hidden fields to you on the web page as user-editable
fields.  The auditor should attempt to change the values in these elements and
discover if any changes cause insecure behavior.  If so, the site fails this test.
If there are hidden elements that cannot be determined to be vulnerable, but
which should not be user-editable, the site may pass this test, but the site owner
should receive a warning about using such hidden elements.
If there are hidden elements, but they only contain data that was supplied by the
user or which the user should be able to edit, the site passes this test.  The web
developer may wish to consider storing such data in session variables rather
than hidden form elements, however.
If there are no hidden elements found in form fields, the web site passes this test.
Test nature: Objective
Evidence: To be determined
Findings: To be determined
2.8 Ensure Directory Browsing Settings Are Correct
Checklist Item Number: 008
Checklist Item Name: Ensure Directory Browsing Settings Are Correct
Reference: I could not find any direct references to the security implications of
this configuration setting, so this is based on personal experience.  However, one
useful reference on the actual configuration for this item in Apache is the docu-
mentation for the autoindex module in Apache:
22 http://www.squarefree.com/bookmarklets/forms.html#show_hiddens
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
27
http://httpd.apache.org/docs/mod/mod_autoindex.html
Risk: This test addresses vulnerability number 18 in section 1.2.3 of this docu-
ment.  This vulnerability can allow a site visitor to explore directory contents in
cases where the default index page (e.g., index.html or index.php) is not avail-
able.  If auto-indexing is enabled when a user requests a directory with no default
index page, Apache will automatically generate a listing of all files in that direc-
tory.  This can expose unwanted files and information to the user.  The degree of
exposure is medium-low; most web hosting companies disable automatic index-
ing by default because of the security issues.  The severity is medium.
The risk is therefore medium-low (2.5).
Testing Procedure/Compliance Criteria: Find all directory paths used on the
site.  This could be based on the directories that wget created during its mirror of
the site in checklist item 007, but if possible it should be based on actual direc-
tory listings of the web site provided by the site owner.  It is likely that some paths
used internally in the PHP code may be accessible from a web browser even if
they are never mentioned within the HTML pages.
To test each directory, simply use a web browser to go to that directory on the
site.  For example, if the site directory listing shows a ‘testing’ subdirectory, point
the web browser to http://www.site.name/testing/ and see what is returned.  If all
directories give either a legitimate web page or an error page, then the site
passes this test.
If directory browsing is enabled for some directories, the auditor must then inter-
view the site owner.  It is possible that this was intentional in some instances,
and the owner fully understands the risks and knows what files are revealed this
way.  While not a best practice from a web design point of view, this would not be
a security issue if done intentionally; the security vulnerability here is due to acci-
dental exposure of files.  If directory browsing is enabled and the site owner has
done this on purpose, the site can pass this test.  However, if automatic indexing
should not have been enabled, and the site owner was not aware of the files be-
ing disclosed due to this setting, the site would fail this test.
Test nature: Objective
Evidence: To be determined
Findings: To be determined
2.9 Attempt to Brute Force Administrative Account
Checklist Item Number: 009
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
28
Checklist Item Name: Attempt to Brute Force Administrative Account
Reference: OWASP Guide to Building Secure Web Applications and Web Serv-
ices, pages 19-20.
Brutus: http://www.hoobie.net/brutus/
“Strong Passwords a Must For Web Apps”, ZDNet UK:
http://insight.zdnet.co.uk/hardware/servers/0,39020445,2132449,00.htm
Risk: This test is against vulnerability number 11 in section 1.2.3 of this docu-
ment.  If the username and password to an administrative account can be brute
forced, then the attacker would have full access to read, change, or delete any or
all entries in the database.  The exposure of this vulnerability is medium.  User-
names of some existing accounts can be seen by the public on the web site, as
they are listed with the user’s reviews on the site.  This gives an attacker a start-
ing point of usernames to attempt.  In addition, there are many web site pass-
word-guessing applications available.  The severity of impact of this attack is
medium-high.  In the worst case scenario, if an attacker does retrieve a valid
username and password for an account with administrator-level access, they
could change or delete all entries in the database.
The risk of therefore medium-high (3.5).
Testing Procedure/Compliance Criteria: Launch Brutus (see reference section for
URL).  Enter the URL of the login page in the “target” field.  This web application
uses a form on the page login.php for logins, so set the “type” option to “HTTP
(Form)”.  Under “HTTP Form options”, set the method to POST.  Click on “modify
sequence.”  On this screen, Brutus will analyze the login form to find the correct