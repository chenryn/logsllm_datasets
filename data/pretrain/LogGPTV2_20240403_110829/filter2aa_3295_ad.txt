### Automated Tools and Web Server Vulnerabilities

A significant number of automated tools continuously scan for vulnerable scripts on web servers, aiming to exploit them. If these scripts remain installed, the risk of a security breach is high. The severity of this vulnerability is rated as medium-high. A successful exploit could provide an attacker with full access to the website, resulting in a medium-high (3.5) net risk.

#### Testing Procedure/Compliance Criteria

1. **Update Nessus Plugins:**
   - From the command prompt, update the Nessus plugins to the latest version by running `nessus-update-plugins`.

2. **Launch and Configure Nessus:**
   - Launch Nessus and log in.
   - In the "Plugins" tab, select only the "CGI abuses" category. Other categories, while useful, are outside the scope of this audit. For broader audits, additional categories can be enabled, but use the "dangerous plugins" option with extreme caution, especially on production servers, as they can cause server crashes if successful.

3. **Target Selection:**
   - Go to the "Target Selection" tab and enter the IP address of the website.
   - Click the "Start the Scan" button to begin testing.

4. **Analyze Results:**
   - Save a copy of the scan results for the audit report.
   - Analyze the results, focusing on items categorized as high, serious, or medium severity.
   - Verify any findings, as Nessus and other vulnerability scanners often produce false positives. For example, if Nessus reports a security vulnerability due to an outdated version of the Foobar application, directly query the application to confirm the version.
   - For any uncertain findings, seek further information on the specific vulnerability. Many web server vulnerabilities can be triggered by entering a specially crafted URL into a web browser.

5. **Determine Test Outcome:**
   - If Nessus finds any high, serious, or medium severity issues that are not false positives, the site fails the test.
   - Low severity issues should be reported to the site owner but do not cause the site to fail the test.
   - If Nessus gives only warnings, no findings, or all higher-severity findings are determined to be false positives, the site passes the test.

**Test Nature:** Objective  
**Evidence:** To be determined  
**Findings:** To be determined

---

### Backup Procedures

#### Checklist Item Number: 006
#### Checklist Item Name: Test Backup Procedures

**Reference:**
- After extensive research, I found limited references on backup strategies specifically for websites. These recommendations are based on personal experience.
- For MySQL database backups, the most direct reference is the MySQL manual: [MySQL Dump Documentation](http://dev.mysql.com/doc/mysql/en/mysqldump.html).

**Risk:**
- This test addresses several vulnerabilities listed in section 1.2.3, particularly where an attacker could compromise the database or modify site pages. Good backups enable easy recovery.
- The primary risk is a catastrophic loss by the web hosting company. While the hosting company typically has its own backups, the site owner should maintain at least one local backup of PHP code, HTML files, and database contents.
- The likelihood of exposure is low, but the severity of impact is high. If the web host loses all backups and current data, the site would need to be rebuilt from scratch, including re-registering users and re-entering data.

**Net Risk:** Medium (3)

#### Testing Procedure/Compliance Criteria

1. **Interview Site Owner:**
   - Determine the backup procedure, ensuring frequent backups. Weekly backups may be sufficient, but daily or every other day is preferred.
   - Backups must include all HTML, PHP, CSS files, and database contents. Incomplete backups result in a test failure.

2. **Test Backup Restoration:**
   - With the site owner's cooperation, remove all files from the development/staging server and delete the database.
   - Verify the site is no longer available via a web browser.
   - Restore both the files and the database contents.
   - Verify the site has been restored and the content is up-to-date. If the data is out of date or cannot be fully restored, the site fails this portion of the test.

**Test Nature:** Both objective and subjective. The first phase involves determining a reasonable backup strategy, while the second phase is objective.

**Evidence:** To be determined  
**Findings:** To be determined

---

### Unsafe Hidden Form Elements

#### Checklist Item Number: 007
#### Checklist Item Name: Unsafe Hidden Form Elements

**Reference:**
- OWASP Guide to Building Secure Web Applications and Web Services, pages 46-47.

**Risk:**
- This test addresses vulnerability number 13 in section 1.2.3. The exposure is medium-high, and the severity of impact is also medium-high. Exploiting hidden form elements can allow an attacker to gain administrative rights, enabling them to read, change, or delete database entries.

**Net Risk:** Serious (4)

#### Testing Procedure/Compliance Criteria

1. **Mirror the Website:**
   - Use `wget` to mirror the website: `wget –m http://web.site.address`.

2. **Search for Hidden Form Fields:**
   - Search the mirrored pages for hidden form fields using `type=hidden` and `type="hidden"`.
   - On Unix-like systems, use `grep`. On Windows, use the built-in "Find File" functionality.

3. **Assess Hidden Elements:**
   - If hidden form elements are found, assess whether they contain user-supplied data or critical information.
   - Use the "Show Hiddens" bookmarklet to make hidden fields editable and test for insecure behavior.
   - If changing hidden fields causes insecure behavior, the site fails the test.
   - If hidden elements contain non-critical data, the site passes, but the owner should be warned about using such elements.

**Test Nature:** Objective  
**Evidence:** To be determined  
**Findings:** To be determined

---

### Ensure Directory Browsing Settings Are Correct

#### Checklist Item Number: 008
#### Checklist Item Name: Ensure Directory Browsing Settings Are Correct

**Reference:**
- Based on personal experience. Useful reference: [Apache Autoindex Module Documentation](http://httpd.apache.org/docs/mod/mod_autoindex.html).

**Risk:**
- This test addresses vulnerability number 18 in section 1.2.3. If auto-indexing is enabled, a visitor can explore directory contents, exposing unwanted files and information.
- The degree of exposure is medium-low, and the severity is medium. Most web hosting companies disable auto-indexing by default.

**Net Risk:** Medium-Low (2.5)

#### Testing Procedure/Compliance Criteria

1. **Identify Directory Paths:**
   - Use the directories created by `wget` during the previous test or obtain a directory listing from the site owner.

2. **Test Each Directory:**
   - Access each directory using a web browser (e.g., `http://www.site.name/testing/`).
   - If all directories return a legitimate web page or an error page, the site passes the test.

3. **Interview Site Owner:**
   - If directory browsing is enabled, interview the site owner to determine if it was intentional. If so, the site passes. If not, the site fails.

**Test Nature:** Objective  
**Evidence:** To be determined  
**Findings:** To be determined

---

### Attempt to Brute Force Administrative Account

#### Checklist Item Number: 009
#### Checklist Item Name: Attempt to Brute Force Administrative Account

**Reference:**
- OWASP Guide to Building Secure Web Applications and Web Services, pages 19-20.
- Brutus: [Brutus Tool](http://www.hoobie.net/brutus/)
- ZDNet UK: [Strong Passwords a Must For Web Apps](http://insight.zdnet.co.uk/hardware/servers/0,39020445,2132449,00.htm)

**Risk:**
- This test addresses vulnerability number 11 in section 1.2.3. If an administrative account can be brute-forced, the attacker gains full access to the database.
- The exposure is medium, and the severity of impact is medium-high. Usernames are publicly visible, and many password-guessing tools are available.

**Net Risk:** Medium-High (3.5)

#### Testing Procedure/Compliance Criteria

1. **Launch and Configure Brutus:**
   - Launch Brutus and enter the URL of the login page in the "target" field.
   - Set the "type" option to "HTTP (Form)" and the method to POST.
   - Click "modify sequence" and let Brutus analyze the login form.

**Test Nature:** Objective  
**Evidence:** To be determined  
**Findings:** To be determined

---

**Author Information:**
- © SANS Institute 2004, Author retains full rights.
- Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
- As part of GIAC practical repository.
- Herschel Gelman SANS GSNA Practical Assignment
- Version 3.1 — Option 1