### 使用 Subversion 进行增量 MySQL 备份

我们的 MySQL 数据库服务器托管了数十个数据库，每个数据库的转储文件大小从 1 MB 到约 100 MB 不等。目前，我们使用 `mysqldump` 命令，并通过 shell 脚本和 crontab 定时任务来执行备份。这种方法一直运行良好，唯一的缺点是存储这些转储文件需要大量的磁盘空间。

由于 MySQL 数据库转储文件是文本文件，我考虑将其存储在版本控制系统中，例如 Subversion。据我所知，Subversion 在每次提交时只存储文件的差异（delta）。

**问题：**
1. 这种方法是否推荐？
2. 是否存在需要注意的问题？

### 回答

#### 推荐的方法
虽然将 MySQL 转储文件存储在 Subversion 中是一种可能的解决方案，但并不一定是最佳选择。以下是一些需要考虑的因素：

1. **性能问题**：
   - Subversion 的 delta 存储机制确实可以减少存储需求，但它也会增加备份和恢复的时间。特别是对于大型文件，Subversion 的性能可能会受到影响。
   - 每次提交时，Subversion 需要计算并存储文件的差异，这会增加处理时间。

2. **数据完整性**：
   - Subversion 主要设计用于源代码管理，而不是大数据文件的备份。因此，它可能无法提供与专门备份工具相同的数据完整性和可靠性。
   - 如果数据库非常大或经常变化，Subversion 可能无法高效地处理大量小文件和频繁的提交。

3. **替代方案**：
   - **MySQL 二进制日志增量备份**：MySQL 支持使用二进制日志进行增量备份。具体步骤如下：
     1. 启用二进制日志：启动 MySQL 服务器时，使用 `--log-bin` 选项启用二进制日志。
     2. 执行全量备份：使用 `mysqldump` 或其他工具执行全量备份。
     3. 旋转二进制日志：在需要进行增量备份时，使用 `FLUSH LOGS` 命令旋转二进制日志。
     4. 复制二进制日志：将自上次全量或增量备份以来的所有二进制日志文件复制到备份位置。
     5. 恢复时应用二进制日志：在恢复时，按照 MySQL 文档中的说明应用这些二进制日志。

#### 具体步骤
1. **启用二进制日志**：
   ```sql
   [mysqld]
   log-bin=mysql-bin
   ```

2. **执行全量备份**：
   ```sh
   mysqldump --all-databases --master-data=2 > full_backup.sql
   ```

3. **旋转二进制日志**：
   ```sh
   mysql -e "FLUSH LOGS;"
   ```

4. **复制二进制日志**：
   ```sh
   cp /path/to/mysql-bin.* /backup/location/
   ```

5. **恢复时应用二进制日志**：
   ```sh
   mysql < full_backup.sql
   mysqlbinlog /backup/location/mysql-bin.* | mysql
   ```

### 总结
虽然将 MySQL 转储文件存储在 Subversion 中可以减少存储需求，但考虑到性能和数据完整性，建议使用 MySQL 二进制日志进行增量备份。这种方法更加可靠且专为数据库备份设计。