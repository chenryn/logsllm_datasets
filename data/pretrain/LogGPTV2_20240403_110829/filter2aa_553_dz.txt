1284
接下来，声明在stdarg.h中的va_list类型代表一种用于储存形参对应的形
参列表中省略号部分的数据对象。变参函数的定义起始部分类似下面这样：
double sum(int lim,...)
{
va_list ap;  //声明一个储存参数的对象
在该例中，lim是parmN形参，它表明变参列表中参数的数量。
然后，该函数将使用定义在stdarg.h中的va_start()宏，把参数列表拷贝到
va_list类型的变量中。该宏有两个参数：va_list类型的变量和parmN形参。
接着上面的例子讨论，va_list类型的变量是ap，parmN形参是lim。所以，应
这样调用它：
va_start(ap, lim); // 把ap初始化为参数列表
下一步是访问参数列表的内容，这涉及使用另一个宏va_arg()。该宏接
受两个参数：一个va_list类型的变量和一个类型名。第1次调用va_arg()时，
它返回参数列表的第1项；第2次调用时返回第2项，以此类推。表示类型的
参数指定了返回值的类型。例如，如果参数列表中的第1个参数是double类
型，第2个参数是int类型，可以这样做：
double tic;
int toc;
...
tic = va_arg(ap, double); // 检索第1个参数
toc = va_arg(ap, int);   //检索第2个参数
注意，传入的参数类型必须与宏参数的类型相匹配。如果第1个参数是
1285
10.0，上面tic那行代码可以正常工作。但是如果参数是10，这行代码可能会
出错。这里不会像赋值那样把double类型自动转换成int类型。
最后，要使用va_end()宏完成清理工作。例如，释放动态分配用于储存
参数的内存。该宏接受一个va_list类型的变量：
va_end(ap); // 清理工作
调用va_end(ap)后，只有用va_start重新初始化ap后，才能使用变量ap。
因为va_arg()不提供退回之前参数的方法，所以有必要保存va_list类型
变量的副本。C99新增了一个宏用于处理这种情况：va_copy()。该宏接受两
个va_list类型的变量作为参数，它把第2个参数拷贝给第1个参数：
va_list ap;
va_list apcopy;
double
double tic;
int toc;
...
va_start(ap, lim);     // 把ap初始化为一个参数列表
va_copy(apcopy, ap);    // 把apcopy作为ap的副本
tic = va_arg(ap, double); // 检索第1个参数
toc = va_arg(ap, int);   // 检索第2个参数
此时，即使删除了ap，也可以从apcopy中检索两个参数。
1286
程序清单 16.21 中的程序示例中演示了如何创建这样的函数，该函数对
可变参数求和。sum()的第 1个参数是待求和项的数目。
程序清单16.21 varargs.c程序
//varargs.c -- use variable number of arguments
#include 
#include 
double sum(int, ...);
int main(void)
{
double s, t;
s = sum(3, 1.1, 2.5, 13.3);
t = sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1);
printf("return value for "
"sum(3, 1.1, 2.5, 13.3):       %g\n", s);
printf("return value for "
"sum(6, 1.1, 2.1, 13.1, 4.1, 5.1, 6.1): %g\n", t);
return 0;
}
double sum(int lim, ...)
1287
{
va_list ap;           // 声明一个对象储存参数
double tot = 0;
int i;
va_start(ap, lim);     // 把ap初始化为参数列表
for (i = 0; i 
int main(int argc, char argv[])
{
printf("The square root of %f is %f\n", argv[1],sqrt(argv[1]) );
}
13.假设 scores 是内含 1000 个 int 类型元素的数组，要按降序排序该数
组中的值。假设你使用qsort()和comp()比较函数。
a.如何正确调用qsort()？
b.如何正确定义comp()？
14.假设data1是内含100个double类型元素的数组，data2是内含300个
double类型元素的数组。
a.编写memcpy()的函数调用，把data2中的前100个元素拷贝到data1中。
b.编写memcpy()的函数调用，把data2中的后100个元素拷贝到data1中。
1293
16.18 编程练习
1.开发一个包含你需要的预处理器定义的头文件。
2.两数的调和平均数这样计算：先得到两数的倒数，然后计算两个倒数
的平均值，最后取计算结果的倒数。使用#define指令定义一个宏“函数”，执
行该运算。编写一个简单的程序测试该宏。
3.极坐标用向量的模（即向量的长度）和向量相对x轴逆时针旋转的角
度来描述该向量。直角坐标用向量的x轴和y轴的坐标来描述该向量（见图
16.3）。编写一个程序，读取向量的模和角度（单位：度），然后显示x轴
和y轴的坐标。相关方程如下：
x = r*cos A y = r*sin A
需要一个函数来完成转换，该函数接受一个包含极坐标的结构，并返回
一个包含直角坐标的结构（或返回指向该结构的指针）。
图16.3 直角坐标和极坐标
4.ANSI库这样描述clock()函数的特性：
1294
#include 
clock_t clock (void);
这里，clock_t是定义在time.h中的类型。该函数返回处理器时间，其单
位取决于实现（如果处理器时间不可用或无法表示，该函数将返回-1）。然
而，CLOCKS_PER_SEC（也定义在time.h中）是每秒处理器时间单位的数
量。因此，两个 clock()返回值的差值除以 CLOCKS_PER_SEC得到两次调用
之间经过的秒数。在进行除法运算之前，把值的类型强制转换成double类
型，可以将时间精确到小数点以后。编写一个函数，接受一个double类型的
参数表示时间延迟数，然后在这段时间运行一个循环。编写一个简单的程序
测试该函数。
5.编写一个函数接受这些参数：内含int类型元素的数组名、数组的大小
和一个代表选取次数的值。该函数从数组中随机选择指定数量的元素，并打
印它们。每个元素只能选择一次（模拟抽奖数字或挑选陪审团成员）。另
外，如果你的实现有time()（第12章讨论过）或类似的函数，可在srand()中
使用这个函数的输出来初始化随机数生成器rand()。编写一个简单的程序测
试该函数。
6.修改程序清单16.17，使用struct 
names元素（在程序清单16.17后面的
讨论中定义过），而不是double类型的数组。使用较少的元素，并用选定的
名字显式初始化数组。
7.下面是使用变参函数的一个程序段：
#include 
#include 
#include 
void show_array(const double ar[], int n);
1295
double * new_d_array(int n, ...);
int main()
{
double * p1;
double * p2;
p1 = new_d_array(5, 1.2, 2.3, 3.4, 4.5, 5.6);
p2 = new_d_array(4, 100.0, 20.00, 8.08, -1890.0);
show_array(p1, 5);
show_array(p2, 4);
free(p1);
free(p2);
return 0;
}
new_d_array()函数接受一个int类型的参数和double类型的参数。该函数
返回一个指针，指向由malloc()分配的内存块。int类型的参数指定了动态数
组中的元素个数，double类型的值用于初始化元素（第1个值赋给第1个元
素，以此类推）。编写show_array()和new_d_array()函数的代码，完成这个
程序。
1296
第17章高级数据表示
本章介绍以下内容：
函数：进一步学习malloc()
使用C表示不同类型的数据
新的算法，从概念上增强开发程序的能力
抽象数据类型（ADT）
学习计算机语言和学习音乐、木工或工程学一样。首先，要学会使用工
具：学习如何演奏音阶、如何使用锤子等，然后解决各种问题，如降落、滑
行以及平衡物体之类。到目前为止，读者一直在本书中学习和练习各种编程
技能，如创建变量、结构、函数等。然而，如果想提高到更高层次时，工具
是次要的，真正的挑战是设计和创建一个项目。本章将重点介绍这个更高的
层次，教会读者如何把项目看作一个整体。本章涉及的内容可能比较难，但
是这些内容非常有价值，将帮助读者从编程新手成长为老手。
我们先从程序设计的关键部分，即程序表示数据的方式开始。通常，程
序开发最重要的部分是找到程序中表示数据的好方法。正确地表示数据可以
更容易地编写程序其余部分。到目前为止，读者应该很熟悉C的内置类型：
简单变量、数组、指针、结构和联合。
然而，找出正确的数据表示不仅仅是选择一种数据类型，还要考虑必须
进行哪些操作。也就是说，必须确定如何储存数据，并且为数据类型定义有
效的操作。例如，C实现通常把int类型和指针类型都储存为整数，但是这两
种类型的有效操作不相同。例如，两个整数可以相乘，但是两个指针不能相
乘；可以用*运算符解引用指针，但是对整数这样做毫无意义。C 语言为它
的基本类型都定义了有效的操作。但是，当你要设记数据表示的方案时，你
可能需要自己定义有效操作。在C语言中，可以把所需的操作设计成C函数
1297
来表示。简而言之，设计一种数据类型包括设计如何储存该数据类型和设计
一系列管理该数据的函数。
本章还会介绍一些算法（algorithm），即操控数据的方法。作为一名程
序员，应该掌握这些可以反复解决类似问题的处理方法。
本章将进一步研究设计数据类型的过程，这是一个把算法和数据表示相
匹配的过程。期间会用到一些常见的数据形式，如队列、列表和二叉树。
本章还将介绍抽象数据类型（ADT）的概念。抽象数据类型以面向问题
而不是面向语言的方式，把解决问题的方法和数据表示结合起来。设计一个
ADT后，可以在不同的环境中复用。理解ADT可以为将来学习面向对象程序
设计（OOP）以及C++语言做好准备。
1298
17.1 研究数据表示
我们先从数据开始。假设要创建一个地址簿程序。应该使用什么数据形
式储存信息？由于储存的每一项都包含多种信息，用结构来表示每一项很合
适。如何表示多个项？是否用标准的结构数组？还是动态数组？还是一些其
他形式？各项是否按字母顺序排列？是否要按照邮政编码（或地区编码）查
找各项？需要执行的行为将影响如何储存信息？简而言之，在开始编写代码