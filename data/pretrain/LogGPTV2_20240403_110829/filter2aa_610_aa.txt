# Debugging and Reversing ALPC

## Contents
- Introduction & Disclaimer
- Environment Preparation
  - Local Kernel Debugging
  - Remote Kernel Debugging
  - Setting up Symbols
- Getting Off The Ground
  - Listing ALPC Functions
  - Analyzing and Organizing ALPC Functions

## Introduction & Disclaimer
This post serves as a supplement to my exploration of the internal workings of ALPC, which I have documented in "Offensive Windows IPC Internals 3: ALPC." While preparing this blog, I realized that a follow-up post detailing the debugging steps I used to verify and discover ALPC behavior could be valuable for beginners in reverse engineering and debugging.

Although the techniques and methods described here are practical and useful, they are not the only resources and tools I used to delve into ALPC. It is important to acknowledge the significant contributions of other researchers, such as Alex Ionescu, who have extensively documented and reversed ALPC internals. This disclaimer is to recognize their work and to clarify that the techniques below are effective but were made possible by the efforts of others.

Additionally, I am not an experienced reverse engineer, and this blog post is not intended as a comprehensive guide on how to become one. Instead, it is a "use Windows debugging to explore a topic and navigate through it" type of post.

## Environment Preparation
To follow the steps outlined in this post, you need to set up a kernel debugging environment. If you already have one, you can skip to the "Getting Off The Ground" section. Otherwise, you have two basic options:

### Local Live Kernel Debugging
- **Requirements**: A single test machine (virtual VM).
- **Steps**:
  1. Start your testing machine or VM.
  2. Install WinDbg from the Windows SDK if not already installed. Alternatively, you can use the WinDbg Preview from the Microsoft Store.
  3. Open PowerShell with administrative privileges and run the following command to enable local kernel debugging:
     ```powershell
     bcdedit /debug on
     bcdedit /dbgsettings local
     ```
  4. Reboot your machine.
  5. Open WinDbg and enter local kernel debugging mode by running:
     ```powershell
     .\windbg.exe -kl
     ```
     Alternatively, you can open the WinDbg GUI, go to `File > Kernel Debug (Ctrl+K) > Local (Tab) > Ok`.

### Customized Layout
I prefer to have my debugging windows positioned and aligned in a specific way, and I also use a dark theme. You can customize your layout by opening WinDbg, positioning the windows, changing the colors under `View > Options > Colors`, and saving the workspace via `File > Save Workspace to File`. To open WinDbg with your customized workspace, use:
```powershell
.\windbg.exe -WF .WEW -kl
```

### Remote Kernel Debugging
- **Requirements**: Two test machines (VMs) — one as the debuggee and one as the debugger.
- **Steps**:
  1. Start your first testing machine or VM (debuggee).
  2. Install `kdnet.exe` from the Windows SDK if not already installed.
  3. Open PowerShell with administrative privileges and run:
     ```powershell
     cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\" && .\kdnet.exe
     ```
     Use *51111 as the port number. This command will provide further instructions.
  4. Start your second testing machine or VM (debugger).
  5. Install WinDbg from the Windows SDK if not already installed. Alternatively, use the WinDbg Preview from the Microsoft Store.
  6. Run the following command to start WinDbg and attach it to the debuggee:
     ```powershell
     cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\" && .\windbg.exe -k net:port=51111,key=...
     ```
     The exact command will be provided by `kdnet.exe`.
  7. Reboot the debuggee machine. The debugger will connect during the boot process.

### Setting Up Symbols
After setting up WinDbg, configure it to pull debugging symbols from Microsoft’s official symbol server. Run the following commands within WinDbg:
```powershell
.sympath srv*https://msdl.microsoft.com/download/symbols
```
You can check your current symbol path with:
```powershell
.sympath
```

## Getting Off The Ground
If we know nothing about ALPC, we can start by using a methodology based on reversing, making assumptions, testing, and verifying/falsifying these assumptions to build our understanding of ALPC.

### Listing ALPC Functions
We can start by resolving function calls that contain the name “ALPC” using WinDbg. The command is:
```powershell
x *!*Alpc*
```
This command resolves all functions containing “Alpc” in their names within all loaded modules.

### Analyzing and Organizing ALPC Functions
Copy the resolved functions into an editor (e.g., Visual Studio Code) and sort them by name to get a sense of which Alpc functions exist in which modules. For example, in `ntdll.dll`, we find functions like `ntdll!AlpcRegisterCompletionList` and `ntdll!NtAlpcCreateResourceReserve`.

#### Function Types in `ntdll`
- **No-component functions**: e.g., `ntdll!AlpcRegisterCompletionList`
- **Nt-component functions**: e.g., `ntdll!NtAlpcCreateResourceReserve`
- **Zw-component functions**: e.g., `ntdll!ZwAlpcCreateResourceReserve`
- **Tp-component functions**: e.g., `ntdll!TppAllocAlpcCompletion`

Since Nt and Zw functions call the same kernel functions, we can ignore the Zw functions. Similarly, we can ignore Tp functions if we are not familiar with the thread pool manager. This leaves us with a smaller set of potentially interesting functions.

By analyzing and organizing these functions, we can create a rough mapping of which parts of the OS are concerned with ALPC and which modules and function names sound familiar or interesting.

This initial step helps us identify key areas to focus on and provides a foundation for further exploration and analysis.