在我们的监控网络中所有设备的网络流量都是通过桥接接口br0传递的，我们可以直接通过wireshark来嗅探该接口的网络流量。我们这里选择使用tshark，它相当于是命令行界面的wireshark。接下来，我们将监听接口br0，并将所有监听到的流量数据写入到一份文件中（output.pcap）。
    $ tshark -i br0 -w ./output.pcap -P
一般来说，我们还需要拦截流量，因此我们还需要设置一些iptables规则来将HTTP/1.1和HTTPS流量重定向到我们的拦截代理（BurpSuite）。关于其他协议的设置方法，请参考这份【[文档](http://www.tldp.org/HOWTO/TransparentProxy-6.html)】。
第一条规则将会拦截端口80和443的所有tcp包（HTTP和HTTPS），并将数据发送给BurpSuite。
    $ iptables -t nat -A PREROUTING -i br0 -p tcp --dport 80 -j DNAT --to-destination burpip:burp_http_port $ iptables -t nat -A PREROUTING -i br0 -p tcp --dport 443 -j DNAT --to-destination burpip:burp_https_port
第二条规则将确保响应信息在发送到客户端之前先经过我们的Kali Linux。
    $ iptables -t nat -A POSTROUTING -o eth0 -s 172.16.0.0/12 -d burpip -j MASQUERADE
第三条规则其实并不是必须的，这条规则将确保Kali路由能够正确地将数据包发送给BurpSuite。
    $ iptables -A FORWARD -s 172.16.0.0/12 -d burpip -i br0 -o eth0 -p tcp --dport burp_http_port -j ACCEPT $ iptables -A FORWARD -s 172.16.0.0/12 -d burpip -i br0 -o eth0 -p tcp --dport burp_https_port -j ACCEPT
接下来，我们要将BurpSuite配置成一个透明代理。打开BurpSuite，点击Proxy标签，然后选择Options菜单，然后点击Add按钮。
对于HTTP流量，我们要给BurpSuite绑定80端口，然后勾选All interfaces选项。
接下来我们跳转到Request handling标签页，然后勾选Support invisible
proxying选项。这一步操作是必须的，勾选之后客户端将不会感受到BurpSuite的存在。
对于HTTPS流量，我们需要给BurpSuite绑定端口443，然后勾选All interfaces。
然后点击Request handling标签，按照如下图所示的方法进行设置。
**自动化**
为了方便起见，我们应该尽可能地实现自动化。你可以在我的[
**GitHub主页**](https://github.com/koenbuyens/kalirouter/blob/master/monitor.sh)
找到相关的[ **配置文件**](https://github.com/koenbuyens/kalirouter/tree/master/conf)
以及[ **脚本**](https://github.com/koenbuyens/kalirouter/blob/master/monitor.sh) 。
首先，从github获取Kalirouter的项目源码：
    $ git clone https://github.com/koenbuyens/kalirouter.git
安装相关的依赖组件：
    apt-get install dnsmasq hostapd bridge-utils
插入USB适配器，然后使用命令iptables -a找出适配器的名字和MAC地址。
告诉network-manager服务我们将通过添加适配器MAC地址来接管相关接口，并运行命令/etc/init.d/networking
restart来重启网络服务。/etc/NetworkManager/NetworkManager.conf文件的修改内容如下所示。
    [keyfile] unmanaged-devices=mac:d8:eb:97:b6:ce:12;mac:56:6b:a2:90:c4:b9
修改hostapd.conf文件，将其指向正确的无线网络接口（默认为wlan0）。
修改monitor.sh脚本中的接口变量，将其指向正确的接口。其中的WIRELESS_MONITOR_INTERFACE,
WIRED_MONITOR_INTERFACE和
INTERNET_INTERFACE分别对应的是USB无线网卡、USB有线网卡和Kali的VMWare接口。默认为wlan0、eth1和eth0。
修改monitor.sh脚本中的代理变量，将其指向BurpSuite的IP地址以及端口，其中PROXYBOX, PROXYBOX_HTTP_PORT和
PROXYBOX_HTTPS_PORT分别对应的是IP地址、HTTP端口和HTTPS端口，默认为172.16.0.1、80和443。
运行下列命令执行脚本文件：
    $ ./monitor.sh
输出数据保存在dumps/output.pcap文件中，你可以通过按下Ctrl+C来停止监控网络流量。
拦截嵌入式设备、移动应用和Windows应用程序的通信数据
运行了我们的监控脚本之后，我们就可以开始监控目标设备的网络流量了。
**嵌入式设备**
我们用一台嵌入式设备连接到了我们的监控网络中，然后让设备开始正常运行。如下图所示，我们的嵌入式设备（10.0.0.38）正在通过UDP与一个内网移动应用进行通信（192.168.1.230）。
**移动应用**
在开始监控移动应用之前，我们必须先设置好相关的信任证书。
1\. 通过点击Proxy标签页中的Import/export CA certificate选项导出BurpSuite证书。
2\. 通过选择Certificate in DER format选项将证书导出为DER文件。
对于安卓端应用来说，我们先要添加信任证书。
1\. 进入安卓系统的安全设置中。
2\. 然后从SD卡安装证书。
3\. 选择证书。
4\. 命名证书。
导入证书之后，我们就可以开始监听应用程序的网络数据了。
1\. 让移动设备连接到我们的监控网络之中，密码是我们在hostapd配置文件中设置的密码。
2\. 然后运行应用程序，下面给出的例子是Amtrak应用程序。
3\. 我们可以在BurpSuite中看到监听到的安卓应用HTTPS流量。
4\. 我们可以观察到wireshark记录下的所有的流量（图例为Facebook App）。
**Windows应用程序**
1.让我们的Windows设备连接到我们的监控网络之中。
2\. 导入Windows证书，详细步骤请参考这份【[文档](https://parsiya.net/blog/2016-02-21-installing-burp-certificate-authority-in-windows-certificate-store/)】。
3\. 开启需要监控的应用程序，我们这里直接选择Web浏览器。
4\. BurpSuite和Wireshark都将接收到所有的网络流量。
**总结**
Kalirouter可以帮助我们将Kali
Linux设备转换成一个能够拦截网络流量的代理路由器，对该项目感兴趣的同学可以访问Kalirouter的GitHub主页获取详细信息【[传送门](https://github.com/koenbuyens/kalirouter/blob/master/monitor.sh)】。注：同学们还可以在树莓派上使用Kalirouter。
**参考资料**