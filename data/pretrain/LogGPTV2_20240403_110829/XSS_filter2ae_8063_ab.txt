        ?>
        你搜索的关键词是：
          var searchQuery = '';
          document.write("搜索结果为：" + searchQuery + "");
上面的代码运用了php中的一个strtolower()函数，将字符串转为小写，但是我们可以利用大小写绕过
    xxxxx?q=alert(1)
发现成功弹窗
#### 2.拼接绕过
**0x01. eval**
**0x02. top**
**0x03. window**
**0x04. self**
**0x05. parent**
**0x06. frames**
#### 3.函数替换
以上只是利用``标签进行举例，也可以在别的标签中使用
比如``
比如``
所以说我们知道这些函数替换就可以
#### 4.嵌套绕过
这就要牵扯到上面提到的XSS的攻击对象了
这个就是利用原理进行绕过的
    ript>alert('Evi1s7')ript>
#### 5.赋值绕过
提供几个payload
     #在网页没有嵌套框架时才有效。
### 2.编码绕过
#### **1.html实体编码转义**
当我们的可控点为单个标签属性时，可以使用 html 实体编码。
    test
payload:
    aaa
**十进制绕过**
    aaa
**十六进制绕过** (如果题目过滤了分号，这里其实也可以把分号删去)
    aaa
**填充0**
    aaa
#### **2.url编码绕过**
需要注入点存在href属性或者src属性，才可以利用url编码转义
（注意在url解析过程中，不能对协议类型进行任何的编码操作）
    Evi1s7
    #
    Evi1s7
    Evi1s7
##### 这里顺便介绍一下href属性和src属性配合JavaScript中的标签的意思：
###### **1.src属性**
总的来说，`src`属性通常用于指定外部资源的URL，让浏览器从指定的URL中获取资源并加载它们。
0x01:``标签
`src`属性用于指定引入外部JavaScript文件的URL
0x02:.``标签
`src`属性用于指定要显示的图像的URL
0x03:``标签
`src`属性用于指定要嵌入的另一个文档的URL。
0x04:``和``标签
`src`属性用于指定要播放的音频或视频的URL
###### **2.href属性**
总的来说，`href`属性通常用于指定链接目标的URL或外部资源的URL，以及用于指定基准URL或图像地图中区域的URL。
0x01:``标签
`href`属性用于指定链接目标的URL。
    Link Text
0x02:``标签
`href`属性用于指定外部样式表的URL。
0x03:``标签
`href`属性用于指定基准URL，所有相对URL都将以该URL为基础。
    Link Text
0x04:``标签
`href`属性用于指定图像地图中区域的URL。
### 3.空格绕过
在html的标签中的不同位置的空格绕过方式不是一样的
A位置： /，/123/，%09，%0A，%0C，%0D，%20
B位置：%09，%0A，%0C，%0D，%20
C位置：%0B，/**/ （如果加了双引号，则可以填充 %09，%0A，%0C，%0D，%20）
D位置：%09，%0A，%0C，%0D，%20，//，>
### 4.()绕过
**1.利用反引号**
**2.throw绕过**
### 5.单引号过滤
1.可以利用斜杠替换
2.利用反引号替换
### 6.alert过滤绕过
**1.利用其他JavaScript的函数替换**
prompt()
confirm()
console.log()
document.write()
**2.利用编码绕过**
    #alert(1)
    aaa
    #alert(1)
### 7.长度限制
可以利用拆分法
    a=a+'
    a=a+'rt>Evi1s7")'
利用eval()函数将字符串解析为可执行的代码，从而进行拼接
    document.write("Evi1s7")
### 8.分号绕过
当只过滤了分号时，可以利用花括号进行语句隔离
### 9.绕过CSP
#### CSP概念
    CSP指的是Content Security Policy，即内容安全策略。它是一种安全机制，用于保护网站免受跨站脚本攻击（XSS攻击）、数据盗取等Web攻击的影响。
    CSP指令可以在HTTP响应头中设置，也可以在HTML文档中使用meta标签设置。
    通过CSP，网站管理员可以告诉浏览器哪些资源可以加载到页面中，例如可以信任哪些来源的JavaScript、CSS、图片等资源。这样，浏览器就只会加载来自这些受信任来源的资源，从而减少了被恶意脚本攻击的风险。
#### CSP的分类
1. **Content-Security-Policy** :当我们配置好并且启用之后，不符合我们设置的CSP的外部资源会被直接拦截
2. **Content-Security-Policy-Report-Only** ：这个配置好之后只能记录违反限制的行为，并不能进行拦截(这里也是一个漏洞)，但是当我们和report-uri选项配合时可以进行拦截违法行为。
#### CSP的结构
CSP由一组指令组成，每个指令用于指定允许加载的资源类型和来源，一个CSP头由多组CSP策略组成，中间由分号分隔。
  1. 指令关键字：指令关键字用于标识指令类型，例如`default-src`、`script-src`、`style-src`等。
  2. 指令值：指令值用于指定允许加载资源的来源，可以是一个或多个来源，多个来源之间用空格分隔。来源可以是URL、域名、IP地址或通配符等。
  3. 指令选项：指令选项用于指定一些特殊行为，例如`'self'`选项用于指定资源只能从同一域名加载，`'unsafe-inline'`选项用于允许内联脚本等。
  4. 指令策略：指令策略用于指定如何处理不符合CSP策略的请求，可以选择`'allow'`、`'block'`、`'report'`等选项，每一组策略包含一个策略指令和一个内容源列表。
示例CSP策略
    Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' example.com; img-src * data:; report-uri /csp-report
  1. Content-Security-Policy是CSP的header字段
  2. `default-src`指令用于限制默认允许加载的资源类型和来源，这里指定只允许从同一域名加载资源。
  3. `script-src`指令用于限制JavaScript脚本的来源，这里指定允许从同一域名加载和允许内联脚本，并允许从`example.com`域名加载。
  4. `img-src`指令用于限制图片的来源，这里指定允许从任何来源加载图片和data URI。