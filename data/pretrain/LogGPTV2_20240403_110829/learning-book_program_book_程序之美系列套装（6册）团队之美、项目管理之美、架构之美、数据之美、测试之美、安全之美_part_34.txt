展，很容易产生不一致的意见，在那些特定的项目上一般不会取得
很多进展。
Jenny：这真是非常有趣。我们在本书中访谈过的另外儿个人也提出
过将复用作为一个目标的想法，也认为复用本身有时候实际上会成
为一个障碍。
Peter：是的，我就是这个意思。
184
---
## Page 186
Jenny：让我觉得有趣的是人们把复用吹嘘成很多项目的远大目标。
我曾参加过很多团队，也听到过很多团队的言论，他们设计的整个
软件包都是为了复用。这种情况在过去的五六年间尤为明显。这样
的事情似乎在整个业界都存在。
按照你的经验，即使是像你们那样严格的要求，当目标是为了可复
用的软件时，你们在交付多层次抽象的软件时遇到过困难吗？
Peter：我们遇到过。这是我们20多年来一直尝试做的事情。说实在
的，我不知道我们做的是否还正确。
常常发生的事情是，你最初的动机不仅仅是构建可复用的软件，而
且是构建某种可复用的平台。这种情况也存在于我们使用的硬件、
各种太空电子部件中。
然后你把一帮聪明人找到一起，对于什么是最好的工作方式，那些
聪明人一般是不会达成一致意见的，所以他们辩论、讨论并取得
一
些进展。但是最终发生的事情是某个项目需要使用那个系统或必须
使用那个系统，于是这个系统突然之间就专门用于那个项目了。
现在有了一个真正可用的系统，从这个角度来看，你并始取得一些
进步了，但是系统现在归到那个项目所拥有了，所以也失去了复用
性，而且那个项目也不会拿出经费来帮助下一个项目。他们需要利
用项目经费来完成自己的项目，尽可能做好自己的项目。
这确实很滩处理。说实在的，在JPL，我从未看到有人能够完成一
个可以复用的平台。
Andrew：你认为是否会发生这样的情况，在一个共同的、大家都理
解的将宇宙飞船送到星期轨道的目标完成之后，目标就变得不再清
晰？你认为缺少清晰目标会让团队的凝聚力减弱吗？
Peter：是的。你进入了哲学上的讨论，一旦倒退到抽象中——你也
可以认为是上开到抽象中，一旦进入那种抽象的思考，就很难把方
向调整止确了。
当你有一个具体目标时——“我们必须把这些功能拼在一起，必须
在这个日期之前完成，否则我们将错过发射时间窗”，人们都会按
照你的要求去做。他们会说：“嗯，这并不是我很喜欢的完成方
式，不过这样做是可行了，这样就很好了。”
185
---
## Page 187
当你准备做一些可复用的东西时，你就会不知道什么是“很好”了。
这种想法很自然，因为你想要努力找出的是最好的解决方案，而不
仅仅是很好的解决方案。但是正如你说的，那样很容易对实际完成
的工作形成阻碍。
Andrew：听起来你们陷入了一种你刚才谈到过的分歧陷阱中，只是
在这种情况中不再有王牌可以使用：“我们必须完成任务。我们的
发射时间窗就在这三个星期，如果我们在接下来的六个月一直都有
分歧，我们就要错过发射时间窗了。”这张主牌已经不存在了，大
家会产生分歧，情况会陷入僵局。
Peter：确实如此。我们在JPL还遇到一个问题，是我们业务中所独
有的，那就是我们的任务都是独一无二的。我还没有看到两个完全
相同的任务，甚至都算不上很相似。
我的意思是，虽然你看到火星探路者（MarsPathfinder）、火星探测
漫游者（MER）和正在开发中的火星科学实验室都是火星漫游者，
但是在每个飞行任务中，采用的硬件都是非常独特的，到达火星的
方法不同，其中的仪器包也不同。
我们面临的情况是，技术的发展超出了我们所在的生命周期的步
伐。一个任务从概念到发射需要3～5年。技术前进的步伐大概也具
有同样的速度一—实际上，如果看看计算机更新换代的速度，你会
发现技术前进的步伐甚至还要更快一些。
结果就是，即使我们能够达成一致意见，在特定的硬件上使用某种
语言并发某个平台，但是到我们为第一个飞行任务做好准备的时
候，技术已经向前发展了。这样，提出一个标准的并且可复用的平
台就越发困难了。
我们还在不断尝试，有一些聪明人还在考虑并努力搞清楚需要做些
什么。可能到了某一天，有了可以插拔的架构，我们最终会提出一
些适用面更厂的东西。
Jenny：你刚才在谈到测试团队的时候让我想到了一个问题。我和
Andrew都很喜欢的一个敏捷并发的主旨是把质量的责任放到并发人
员身上，他们要对自已的代码做单元测试并通过持续集成，这样会
更容易监控代码中所做的更改。我想知道，你们也在使用这些技术
吗？
186
---
## Page 188
Peter：我不知道这里有谁在使用敏捷开发。
Jenny：本质上不是敏捷开发，而是一些由开发人员自己完成的、与
质量关系更为密切的活动。
Peter：是的，我们希望开发人员在把代码提交集成之前能够自已进
行单元测试。
我们一般不做持续集成。更多的是，我们分析当前周期需要的需求
和设计，然后开发那些模块，进行单元测试，最后再合到一起，
Andrew：我对集成测试有一个问题。你刚才说的话让我想起来我第
一次读到集成时，那时我还是第一次学习软件工程。
如果你们不是在软件中发明集成这个未语的人，也是20世纪八九十
业工作的人来说，项目中的每个系统都是软件系统，集成仅仅意味
着把模块集成在一起。但我认为当你说到集成时，你使用的是这个
单词原始的意思，含义更厂，你们把软件的开发和硬件的开发也集
成在了一起。如果你回头看看“单元”这个术语的含义（我说的是“单
元测试"中的单元）也有特定的含义。你所说的“集成”是那个含义
吗？在一个更大范围的系统中，你把软件和硬件部件都集成起来？
Peter：是的。有两种层次的集成。我们开发独立的软件模块或单
元，这是非常小的部分，一个人或儿个人就足以实现并测试它们。
这些模块或单元接着会进入到软件集成中。我们把它们放到一起，
把它们链接到一起，然后做一些软件集成测试，比如在我们之前提
到过的SoftSim测试平台上做一些测试，如果我们有硬件测试床，那
么还可以在硬件测试床中做测试。
然后，当软件集成完毕并准备交付的时候，由软件经理宣布完成，
接下来送到硬件测试床进行认证。然后就进入飞行器了。
任务的一个阶段叫做ATLO（AssemblyTestandLaunchOperations
集成测试和发射操作）。这也称为阶段D，这个字母只是为了标识
项目生命周期中特定的时间。这个阶段从交付硬件做集成测试开
始，虽然我们想在净室中完成集成，但是我们的集成可以说在工厂
的地板上进行的。
187
---
## Page 189
硬件放到一起，然后又集成到一起。在把足够多的硬件集成在一起
后，就可以把软件上传到太空电子系统了，然后就可以并始测试并
确保：a）软件正确地指挥了硬件：b）在指挥硬件的时候，硬件能
够正常工作。
我们在地面上尽量多地做测试。典型情况下，在把软件交付给发射
场之前要运行9～12个月。那是我们的ATLO阶段。当一个新的软件
构建版本准备好之后，它会进入到硬件测试床，然后进入到
ATLO，与飞行器和那里的其他测试一起做集成测试，这样我们就
有了几个层次的集成。
Andrew：这样，我猜想有人在第一次听到你说“我们不做持续集成”
时不清楚是为什么，刚才这些话应当解释清楚这个问题了。我认为
可以这样说，如果你的集成过程包含了净室，可能就不需要自动集
成了。
Peter：对。我们没有自动集成。我看到在我们四个业务伙伴中有些
人想要这么做，例如，对当天检入配置管理系统的每一种东西都在
夜间做一次构建。他们这样做的原因是要确保构建的整个系统没有
被所做的更改破坏掉。
接下来的过程是在一些指定点或在每个人都同意的时候，我们指定
某个特定构建版本可以用于集成，整个过程又可以前进了。
我所理解的集成测试是，你们在使用这种方式时，任何人都可以说
“我的模块已经准备好了”，然后开始在上面工作了。我们确实做不
到。如果那样做，相互之间需要更好的协调。
Andrew：人们非常喜欢持续集成或自动集成过程的一个原因是它非
常有效，强制实施了一定的质量级别。人们不用花费太多的时间彼
此协调来构建软件，他们可以相信软件具备一定程度的质量，因为
他们可以通过系统来确保构建没有错误，通过了单元测试等。由于
你前面概括的原因，你们无法做那种程度的自动化。但是有其他方
法来让你的过程效率更高些吗？有没有方法确保代码的质量总是很
高的？
Peter：我们有时候所做的事情是并行地运行那些周期，所以在集成
阶段的是第二个构建版本，在设计阶段的是第三个构建版本。你让
人们同时在不同的生命周期阶段从事系统各个方面的工作。
188
---
## Page 190
是的，我们非常希望人们交付高质量的、做过单元测试的代码。不
仅如此，还必须遵守编码标准。代码注释必须好。他们必须交付与
编码相关的文档，描述编码应当完成什么样的工作，当前版本处理
的是哪些问题报告，哪些问题报告还没有解决。我们跟踪所有在集
成和测试阶段发现的缺陷，我们必须在发射之前处理完所有这些缺
陷。
在NASA还有一个部门叫做独立确认和验证部门，位于西弗吉尼亚
的费尔蒙特，这个部门独立地审计我们的过程和我们的代码，帮助
我们找出残留的问题、缺陷、需求和问题。
Jenny：就像是外部的sQA组？
Peter：对，就像是一个外部的SQA组。在JPL有独立的SQA，不向
项目管理部门报告，而是向我们的SQA组织报告。除此之外，我们
还有一个外部的SQA，是由NASA提供的。
Jenny：过程听起来非常透明。人们编写代码。他们编写与代码相关
的文档。他们自已进行多个层次的评审，然后又与团队进行多个层
次的评审，对吗？
Peter：对。
Jenny：为了在开发过程中尽早地发现缺陷，这样做听起来是一个非
常好的方法。但是我有一个问题，我在职业生涯中注意到有很多开
发人员对于其他人查看他们的代码是非常抵触的，甚至当别人对代
码有负面评价或在找到缺陷时，他们也非常抵触。你觉得你们的文
化和这种情况有所不同吗？
Peter：我觉得和你说的情况不一样。和我一起的开发人员对于别人
评审他们的代码并指出可能存在的问题都是相当配合的。实际上，
我们对放到宇宙飞船上每一个模块都会进行评审和代码走查。
当然，在工作上会存在一定的自负。人们不喜欢别人挑剔他们的代
码，但是另一方面，如果这确实是一个问题，我还从来没有听说过
有谁不愿意承认问题并进行修复的。实际上，很多时候，如果你说
“这里有一个并发的缺陷，可能会有潜在的死锁问题”时他们会非常
高兴，然后会说：“噢，是的，我觉得是这样。我们必须修复。”这
方面并不存在什么问题。
189
---
## Page 191
Jenny：在测试人员和开发人员之间的关系是什么？在这里，他们的
关系好吗？
Peter：我认为一般来说是好的。在某些情况中，测试人员和开发人
员实际上是同一个人。我们并不总是有独立的测试。我们有对测试
结果独立的评审。所以，测试人员要做他们的单元测试。我们有单