title:On-board credentials with open provisioning
author:Kari Kostiainen and
Jan-Erik Ekberg and
N. Asokan and
Aarne Rantala
On-board Credentials with Open Provisioning
Kari Kostiainen
Nokia Research Center
Helsinki, Finland
PI:EMAIL
Jan-Erik Ekberg
Nokia Research Center
Helsinki, Finland
PI:EMAIL
N. Asokan
Nokia Research Center
Helsinki, Finland
PI:EMAIL
Aarne Rantala
Technical Research Center
Espoo, Finland
aarne.rantala@vtt.ﬁ
ABSTRACT
Securely storing and using credentials is critical for ensuring
the security of many modern distributed applications. Ex-
isting approaches to address this problem fall short. User
memorizable passwords are ﬂexible and cheap, but they suf-
fer from bad usability and low security. On the other hand,
dedicated hardware tokens provide high levels of security,
but the logistics of manufacturing and provisioning such to-
kens are expensive, which makes them unattractive for most
service providers. A new approach to address the problem
has become possible due to the fact that several types of
general-purpose secure hardware, like TPM and M-shield,
are becoming widely deployed. These platforms enable, to
diﬀerent degrees, a strongly isolated secure environment. In
this paper, we describe how we use general-purpose secure
hardware to develop an architecture for credentials which
we call On-board Credentials (ObCs). ObCs combine the
ﬂexibility of virtual credentials with the higher levels of pro-
tection due to the use of secure hardware. A distinguishing
feature of the ObC architecture is that it is open:
it al-
lows anyone to design and deploy new credential algorithms
to ObC-capable devices without approval from the device
manufacturer or any other third party. The primary con-
tribution of this paper is showing and solving the technical
challenges in achieving openness while avoiding additional
costs (by making use of already deployed secure hardware)
and without compromising security (e.g., ensuring strong
isolation). Our proposed architecture is designed with the
constraints of existing secure hardware in mind and has been
prototyped on several diﬀerent platforms including mobile
devices based on M-Shield secure hardware.
Categories and Subject Descriptors
D.4.6 [Software]: Operating Systems—Security and Pro-
tection; K.6.5 [Computing Milieux]: Management of Com-
puting and Information Systems—Security and Protection
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’09, March 10-12, 2009, Sydney, NSW, Australia.
Copyright 2009 ACM ACM 978-1-60558-394-5/09/03 ...$5.00.
General Terms
Security
Keywords
Trusted computing, credentials, secure hardware, provision-
ing protocols
1.
INTRODUCTION
Cryptographic protocols play an essential role in protect-
ing distributed applications like access to enterprise net-
works, on-line banking, and access to other web-based ser-
vices in general. These protocols make use of credentials,
consisting of items of secret data, like keys, and associated
algorithms that apply cryptographic transforms to the secret
data. Secure installation, storage and usage of credentials
is critical for ensuring the security of the applications that
rely on them.
Existing approaches to address this problem fall short.
The most prevalent approach currently used for user au-
thentication is based on user passwords and requires users
to memorize passwords. This suﬀers from bad usability and
is vulnerable to phishing. Although various identity man-
agement systems supporting Single Sign-On would minimize
the number of passwords a user has to remember, it is un-
likely that all the services a user wants to use would rely
on the same trust domain. In other words, a user will need
to be able to authenticate to many diﬀerent trust domains.
“Password managers”, such as those found in popular web
browsers, ease the usability problem somewhat, but are open
to software attacks, like Trojans that steal passwords.
At the other extreme, dedicated hardware tokens pro-
vide high levels of security. The most widespread exam-
ple of a hardware security token is the smart card contain-
ing the subscriber identity module (SIM) used for authenti-
cating access to Global System for Mobile Communications
(GSM) cellular networks. However, the logistics of manu-
facturing and provisioning hardware tokens are expensive,
which makes it unattractive for most service providers to is-
sue their own hardware tokens. Although multi-application
smart cards exist, and can support diﬀerent credentials on
the same card, they are not in widespread use with cre-
dentials from multiple sources. This is primarily because
applications have to be authorized with respect to a ﬁnite
set of trust domains (e.g., the smart card issuer’s domain)
pre-loaded on the card. Although sometimes such restric-
tions are policy decisions, in some cases, they are crucial
104to the security of the system. An example of the latter is
the case of JavaCards that do not have a bytecode veriﬁer.
The consequence of such restrictions, technical or otherwise,
is that a service provider who wants to use an existing in-
stalled base of multi-application smart cards has to obtain
permission from the card-issuer in order to deploy new cre-
dentials to them. Such procedural obstacles, in turn, makes
it unattractive for service providers to share the hardware
tokens issued by others. This has led to a situation that
in practice, users end up having to carry several diﬀerent
hardware tokens to authenticate to diﬀerent services.
Thus, on the one hand we have a cheap, ﬂexible but not
very secure software-only solutions like password managers,
and on the other hand we have more secure, but expensive,
inﬂexible, and usually dedicated solutions like hardware to-
kens.
In the last decade or so, several types of general-purpose
secure hardware have been incorporated into end user de-
vices and are starting to be widely deployed. These in-
clude Trusted Platform Modules (TPM) [20] and Mobile
Trusted Modules (MTM) [7] speciﬁed by the Trusted Com-
puting Group and other platforms like M-Shield [17] and
ARM TrustZone [1]. All these platforms enable, to diﬀerent
degrees, a strongly isolated secure environment, consisting
of secure storage, and in some cases supporting secure exe-
cution where processing and memory are isolated from the
rest of the system. TPMs are already available on many
high-end personal computers. Several mid-range and high-
end Nokia phones utilize hardware security features based
on the M-Shield platform.
In this paper, we ﬁrst describe how we use such general-
purpose secure hardware to develop an architecture for cre-
dentials which we call “On-board Credentials” (ObCs) and
then focus on secure provisioning of ObCs. ObCs combine
the ﬂexibility of virtual credentials with the higher levels of
protection due to the use of secure hardware.
Our contribution in this paper is to deﬁne an architecture
for credentials that is simultaneously
• inexpensive to deploy, by making use of existing general-
purpose secure hardware rather than designing and
provisioning new hardware tokens,
• open, so as to allow any service provider to provision
new credential secrets as well as new credential algo-
rithms to a user’s device without having to co-ordinate
with or obtain permission from any third party, and
• secure enough such that the credentials are protected
from software and hardware attacks to the extent per-
mitted by the underlying secure hardware.
We begin by describing our assumptions about the un-
derlying secure environment and the requirements for an
open credential architecture. We then give an overview of
the ObC architecture followed by a more detailed descrip-
tion of the provisioning architecture which allows anyone to
design and deploy credential algorithms without any third-
party screening or approval, while still protecting malicious
credential algorithms from stealing other credentials on the
same device. After that, we brieﬂy describe our current im-
plementation. We conclude with an informal security anal-
ysis and a short review of current and related work.
2. ASSUMPTIONS AND REQUIREMENTS
2.1 Assumptions
We assume the availability of a general-purpose secure en-
vironment with the following features:
• Isolated secure execution environment: It must be pos-
sible to execute trusted code in a strongly isolated fash-
ion from untrusted code executing on the same device.
Preferably the secure execution environment
– is supported by the secure hardware itself so that
it is isolated even from the general-purpose oper-
ating system on the device, and
– can use on-chip runtime memory, because in con-
temporary computing platforms, and especially
mobile ones, externally located memory and un-
protected memory buses are a commonly used at-
tack vector for breaking the isolation of programs
and their data.
• Secure storage: It must be possible for trusted code to
securely store persistent data so that their conﬁdential-
ity and integrity can be assured. It is not necessary to
store all sensitive data within the secure environment
itself. Typically, if a unique, device-speciﬁc secret is
available only in the secure execution environment, it
can be used to protect data which can be stored in
untrusted external storage. Persistent data must also
be protected against roll-back attacks. This can be
achieved, for example, by using device-speciﬁc trusted
counters or a secure clock reference.
• Integrity of secure environment: Secure storage natu-
rally implies that there must be a way to ensure the
integrity of the secure environment so that persistently
stored data is accessible only by the secure environ-
ment. Additionally, a remote party may want to ei-
ther send some conﬁdential data to trusted software
executing in the secure environment or may want a
proof that a certain computation was actually carried
out within the secure environment. Both of these re-
quire the means to ensure the integrity of the secure
environment. This can be achieved using secure boot
(only authorized software is allowed to be loaded dur-
ing the secure environment boot process) or authen-
ticated boot (any software can be loaded during the
boot process, but a secure record of the loaded soft-
ware is retained and can be used for access control or
reporting).
2.2 Example Secure Environments
M-Shield: Texas Instruments’ M-Shield is an example of
a general-purpose secure environment that meets these as-
sumptions. M-Shield is a security architecture available for
the OMAP platform used in mobile devices. It has a secure
environment consisting of a small amount of on-chip ROM
and RAM, as well as one-time programmable memory where
unique device key(s) can be maintained. All of these are only
accessible in a secure execution environment implemented as
a special “secure processor mode” of the main CPU. This se-
cure processor mode could be viewed as a Ring -1 privilege
level. Special trusted applications, called “protected appli-
cations” (PAs), are the only software permitted to run in the
105secure environment. Ordinary software, including the device
operating system, is therefore isolated from the secure envi-
ronment. M-Shield supports secure boot so that only autho-
rized software (device OS as well as protected applications)
can be run on the device. For more detailed information on
M-Shield, see [17]. M-Shield-like secure environments can
be built on top of the ARM TrustZone architecture as well.
TPM: TPMs [20] are usually separate hardware modules
with their own processor. They enable secure storage (in
the form of sealed data that can be bound to a speciﬁc con-
ﬁguration) and authenticated boot. A TPM only allows a
set of predeﬁned cryptographic algorithms to be executed
within the TPM itself; it does not provide an execution en-
vironment for arbitrary code within the TPM. Thus a TPM-
based secure environment has to rely on the operating sys-
tem to provide secure execution. This provides a lower level
of isolation than in the case of environments like M-Shield
because the entire operating system kernel becomes part of
the trusted computing base. Dynamic root of trust for mea-
surement (DRTM) technology for TPMs as implemented by
Intel and AMD processors can be used along the lines de-
scribed in [14] to minimize the part of the operating system
that needs to be trusted. Nevertheless the secure execu-
tion environment has to use the main memory as its run-
time memory and is vulnerable to attacks on main memory
[10], unlike in the case of M-Shield-like secure environments
where secure execution can use on-chip memory.
Hypervisor: A hypervisor can also be used to provide
an isolated secure execution environment along the lines de-
scribed in [8]: the normal device operating system and other
untrusted software will run as one guest of the hypervisor
while the secure execution environment can run as a separate
guest. The hypervisor can be combined with TPM-enabled
authenticated boot. Again, the level of isolation of secure
execution is lower than in M-Shield-like secure environments
because of the use of main memory.
As we noted already, Nokia phone models using hard-
ware security features of the M-Shield platform already ex-
ist. Hence, this has been the primary target environment
for our implementation of the ObC architecture although
it can, and has been, implemented on top of other secure
environments such as an oﬀ-the-shelf, TPM-enabled Linux
PC and a virtualized environment on a Nokia N800 Internet
Tablet using a commercial secure hypervisor (see [6]).
2.3 Terminology
Before we go on to describe the requirements, let us ﬁx
some terminology. As we mentioned in Section 1, our objec-
tive is to design an inexpensive, open, and secure platform
for credentials by leveraging on-board secure environments.
A credential consists of credential secrets such as keys, and
an algorithm that operates on these secrets known as a cre-
dential program.
In the context of ObC architecture, we
sometimes refer to credential programs as ObC programs
and credential secrets as ObC secrets. We refer to a real-
ization of the ObC architecture as an ObC system. We will
explain other terminology as they are introduced.
2.4 Requirements
Our initial goal is to minimize the cost of implementing
and deploying an ObC system. To achieve this, we re-use ex-
isting secure environments like M-Shield hardware security
features rather than design a new one. The design should
therefore take the constraints of the existing secure environ-
ments into account. For example, in secure environments
with on-chip memory, the amount of memory available for
an ObC system is very small: as little as ten(s) of kilobytes
of RAM, and ROM sizes limited to hundreds of kilobytes
at most. Thus, our ﬁrst requirement is that an ObC sys-
tem should have a minimal code and memory footprint. Al-
though not every secure environment would have such strin-
gent resource limitations, we still chose to consider the mini-
mal footprint requirement rather than design diﬀerent types
of ObC architectures for diﬀerent secure environments.
The second goal is to keep the system open:
it should
be possible for anyone to develop and deploy new ObC pro-
grams or provision secrets to existing ObC programs without
having to obtain the permission of the device manufacturer
or any other third party. Yet, such openness must not com-
promise the third goal of a secure ObC system. Recall that
credential programs will execute in the secure environment.
An ObC system must therefore be designed so that a ma-
licious or errant credential program cannot harm or abuse
the resources in the secure environment. This leads to two
requirements: the design must ensure the protection of
• sensitive data of the secure environment, such as device-
speciﬁc keys, should be isolated from credential pro-
grams, and
• resources, such as memory and CPU time, consumed
by credential programs must be controlled.
Similarly, an entity relying on one credential program does
not necessarily trust other credential programs. Thus, a fur-
ther requirement is that credential programs must be iso-
lated from one another both during run-time and in their
access to persistent data.
By default, this last requirement implies that a creden-
tial program will not be able to access persistent data of
another credential program. However, there are situations
where such sharing of persistent data is essential. For exam-
ple, when a new version of a credential program is installed,
it should be able to have access to the same data as its pre-
decessors (programs with lower version numbers). Also, the
need to minimize the footprint of an ObC system imposes
constraints on the size of credential programs or their data,
implying that the intended credential functionality may need
to be split between two or more programs. Because of such
cases, the ObC architecture must provide a way to deﬁne
a group of programs that can share access to conﬁdential
persistent data.
Finally, we have two requirements on provisioning. First,
an issuer of credentials needs a way to encrypt the credential
secrets so that they are accessible only to a speciﬁc group
of credential programs on one or more speciﬁc devices. This