例如下图：
可见传入的是两个参数代表一个string，返回了三个数据代表一个[]byte。
### Ⅴ. 字典map
字典实现比较复杂，不过在逆向中会涉及到的内容很简单，字典操作常见的会转换为如下函数，一般fastrand和makemap连用返回一个map，它为一个指针，读字典时使用mapaccess1和mapaccess2，后者是使用,ok语法时生成的函数，runtime里还有很多以2结尾的函数代表同样的含义，后文不再赘述。写字典时会使用mapassign函数，它返回一个地址，将value写入该地址，另外还比较常见的是对字典进行遍历，会使用mapiterinit和mapiternext配合：
    func fastrand() uint32
    func makemap(mapType *byte, hint int, mapbuf *any) (hmap map[any]any)
    func mapaccess1(mapType *byte, hmap map[any]any, key *any) (val *any)
    func mapaccess2(mapType *byte, hmap map[any]any, key *any) (val *any, pres bool)
    func mapassign(mapType *byte, hmap map[any]any, key *any) (val *any)
    func mapiterinit(mapType *byte, hmap map[any]any, hiter *any)
    func mapiternext(hiter *any)
事实上更常见的是上面这些函数的同类函数，它们的后缀代表了对特定类型的优化，例如如下代码，它首先调用makemap_small创建了一个小字典并将其指针存于栈上，之后调用mapassign_faststr传入一个字符串键并获取一个槽，之后将数据写入返回的槽地址里，这里就是一个创建字典并赋值的过程：
如下是访问字典里数据的情况，调用mapaccess1_fast32传入了一个32位的数字作为键：
可以看到mapaccess和mapassign的第一个参数代表字典的类型，因此能很容易知道字典操作参数和返回值的类型。
### Ⅵ. 结构体struct
类似于C语言，Go的结构体也是由其他类型组成的复合结构，它里面域的顺序也是定义的顺序，里面的数据对齐规则和C一致不过我们可以直接从其类型信息获得，不必自己算。在分析结构体变量时必须要了解结构体的类型结构了，其定义如下：
    type rtype struct {    size       uintptr  // 该类型对象实例的大小    ptrdata    uintptr  // number of bytes in the type that can contain pointers    hash       uint32   // hash of type; avoids computation in hash tables    tflag      tflag    // extra type information flags    align      uint8    // alignment of variable with this type    fieldAlign uint8    // alignment of struct field with this type    kind       uint8    // enumeration for C    alg        *typeAlg // algorithm table    gcdata     *byte    // garbage collection data    str        nameOff  // 名称    ptrToThis  typeOff  // 指向该类型的指针，如该类为Person，代码中使用到*Person时，后者也是一种新的类型，它是指针但是所指对象属于Person类，后者的类型位置存于此处}
    type structField struct {    name        name    // 属性名称    typ         *rtype  // 该域的类型    offsetEmbed uintptr // 该属性在对象中的偏移左移一位后与是否是嵌入类型的或，即offsetEmbed>>1得到该属性在对象中的偏移}
    type structType struct {    rtype    pkgPath name            // 包名    fields  []structField   // 域数组}
    type uncommonType struct {    pkgPath nameOff // 包路径    mcount  uint16  // 方法数    xcount  uint16  // 导出的方法数    moff    uint32  // 方法数组的偏移，方法表也是有需的，先导出方法后私有方法，而其内部按名称字符串排序    _       uint32  // unused}
    type structTypeUncommon struct {    structType    u uncommonType}
如下为macaron的Context结构体的类型信息，可见它的实例对象占了0x90字节，这实际上会和下面fields中对象所占空间对应：
通过macaron_Context_struct_fields可转到每个域的定义，可见其域名称域类型，偏移等：
结构体类型作为自定义类型除了域之外，方法也很重要，这部分在后文会提到。
### Ⅶ. 接口 interface
接口和反射息息相关，接口对象会包含实例对象类型信息与数据信息。这里需要分清几个概念，一般我们是定义一种接口类型，再定义一种数据类型，并且在这种数据类型上实现一些方法，Go使用了类似鸭子类型，只要定义的数据类型实现了某个接口定义的
** _*全部*_**
方法则认为实现了该接口。前面提到的两个是类型，在程序运行过程中对应的是类型的实例对象，一般是将实例对象赋值给某接口，这可以发生在两个阶段，此处主要关注运行时阶段，这里在汇编上会看到如下函数：
    // Type to empty-interface conversion.
    func convT2E(typ *byte, elem *any) (ret any)
    // Type to non-empty-interface conversion.
    func convT2I(tab *byte, elem *any) (ret any)
如上转换后的结果就是接口类型的实例对象，此处先看第二个函数，它生成的对象数据结构如下，其中itab结构体包含接口类型，转换为接口前的实例对象的类型，以及接口的函数表等，而word是指向原对象数据的指针，逆向时主要关注word字段和itab的fun字段，fun字段是函数指针数组，它里元素的顺序并非接口内定义的顺序，而是名称字符串排序，因此对照源码分析时需要先排序才能根据偏移确定实际调用的函数：
    type nonEmptyInterface struct {
        // see ../runtime/iface.c:/Itab
        itab *struct {                          
            ityp   *rtype                       // 代表的接口的类型，静态static interface type
            typ    *rtype                       // 对象实例真实的类型，运行时确定dynamic concrete type
            link   unsafe.Pointer               
            bad    int32
            unused int32
            fun    [100000]unsafe.Pointer       // 方法表，具体大小由接口定义确定
        }
        word unsafe.Pointer
    }
这是旧版Go的实现，在较新的版本中此结构定义如下，在新版中它的起始位置偏移是0x18，因此我们可以直接通过调用偏移减0x18除以8获取调用的是第几个方法：
    type nonEmptyInterface struct {
        // see ../runtime/iface.go:/Itab
        itab *struct {
            ityp *rtype // static interface type
            typ  *rtype // dynamic concrete type
            hash uint32 // copy of typ.hash
            _    [4]byte
            fun  [100000]unsafe.Pointer // method table
        }
        word unsafe.Pointer
    }
上面讲的是第二个函数的作用，解释第一个函数需要引入一种特殊的接口，即空接口，由于这种接口未定义任何方法，那么可以认为所有对象都实现了该接口，因此它可以作为所有对象的容器，在底层它和其他接口也拥有不同的数据结构，空接口的对象数据结构如下：
    // emptyInterface is the header for an interface{} value.
    type emptyInterface struct {
      typ  *rtype               // 对象实例真实的类型指针
      word unsafe.Pointer           // 对象实例的数据指针
    }
可见空接口两个域刚好指明原始对象的类型和数据域，而且所有接口对象是占用两个个机器字，另外常见的接口函数如下：
    // Non-empty-interface to non-empty-interface conversion.
    func convI2I(typ *byte, elem any) (ret any)
    // interface type assertions x.(T)
    func assertE2I(typ *byte, iface any) (ret any)
    func assertI2I(typ *byte, iface any) (ret any)
例如存在如下汇编代码：
可以知道convI2I的结果是第一行所指定接口类型对应的接口对象，在最后一行它调用了itab+30h处的函数，根据计算可知是字母序后的第 **
_*4*_** 个函数，这里可以直接查看接口的类型定义，获知第四个函数：
## 三、语法特性
### Ⅰ. 新建对象
Go不是面向对象的，此处将Go的变量当做对象来描述。函数调用栈作为一种结构简单的数据结构可以轻易高效的管理局部变量并实现垃圾回收，因此新建对象也优先使用指令在栈上分配空间，当指针需要逃逸或者动态创建时会在堆区创建对象，这里涉及make和new两个关键词，不过在汇编层面它们分别对应着makechan，makemap，makeslice与newobject，由于本文没有介绍channel故不提它，剩下的makemap和newobject上文已经提了，还剩makeslice，它的定义如下：
func makeslice(et *_type, len, cap int) unsafe.Pointer
如下，调用make([]uint8, 5,10)创建一个slice后，会生成此代码：
### Ⅱ. 函数与方法
#### 1.栈空间
栈可以分为两个区域，在栈底部存放局部变量，栈顶部做函数调用相关的参数与返回值传递，因此在分析时不能对顶部的var命名，因为它不特指某具体变量而是随时在变化的，错误的命名容易造成混淆，如下图，0xE60距0xEC0足够远，因此此处很大概率是局部变量可重命名，而0xEB8距栈顶很近，很大概率是用于传参的，不要重命名：
#### 2.变参
类似Python的一般变参实际被转换为一个tuple，Go变参也被转换为了一个slice，因此一个变参在汇编级别占3个参数位，如下代码：
    func VarArgDemo(args ...int) (sum int) {}
    func main() {
      VarArgDemo(1, 2, 3)
    }
它会被编译为如下形式：
这里先将1,2,3保存到rsp+80h+var_30开始的位置，然后将其首地址，长度(3)，容量(3)放到栈上，之后调用VarArgDeme函数。
#### 3.匿名函数
匿名函数通常会以外部函数名_funcX来命名，除此之外和普通函数没什么不同，只是需要注意若使用了外部变量，即形成闭包时，这些变量会以引用形式传入，如在os/exec/exec.go中如下代码：
    go func() {
                select {
                case <-c.ctx.Done():
                    c.Process.Kill()
                case <-c.waitDone:
                }