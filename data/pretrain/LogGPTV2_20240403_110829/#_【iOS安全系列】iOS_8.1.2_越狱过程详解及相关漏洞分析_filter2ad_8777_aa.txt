# 【iOS安全系列】iOS 8.1.2 越狱过程详解及相关漏洞分析

## 译文声明
本文为翻译文章，原文来源：360安全播报。译文仅供参考，具体内容和含义以原文为准。

本文主要介绍了以下内容：
1. 对越狱的理解；
2. iOS 8.1.2 越狱工具的工作过程；
3. 越狱过程中使用的漏洞；
4. 每个漏洞的利用方法。

希望通过这篇文章让大家了解越狱的过程、所需漏洞类型及一些利用技巧。

## 什么是越狱
越狱是指破坏 iOS 系统的某些保护机制，从而允许用户执行原本受限的操作。越狱后可以进行的操作包括：
- 安装任意签名的应用程序（普通应用和系统应用）；
- 安装 SSH；
- 添加命令行程序；
- 添加 Daemon；
- 任意添加或删除文件；
- 获取任意 Mach Task；
- 伪造 Entitlements；
- 使内存页同时具有可写和可执行属性等。

从技术层面来看，越狱破坏了以下保护机制：
1. 代码签名机制；
2. 内存页保护机制（W+X）；
3. 磁盘分区保护（/dev/disk0s1s1）；
4. Rootless 保护机制，主要用于保护系统的完整性。

因此，越狱中的“狱”指的是上述保护机制，而越狱则是指破坏这些保护机制的过程。

## 确定目标
越狱过程实际上是对 iOS 系统的攻击过程。在发起攻击之前，需要确定具体的攻击目标。虽然整体目标是 iOS 系统，但我们需要更具体的目标来引导攻击过程。通过找到负责相关保护机制的系统部分，我们可以确定最终的攻击目标，例如：
1. 内核、amfid 和 libmiss.dylib：三者共同实现代码签名；
2. 内核：对内存页属性的保护完全在内核中实现；
3. 获取 root 权限：重新挂载磁盘分区需要 root 权限。

在攻击最终目标之前，我们还会遇到一些障碍（系统有多道防线），这些障碍可以作为阶段目标。不同的攻击路径会遇到不同的阶段目标，但通过 USB 发起的攻击首先需要突破沙盒。

## 攻击概述
对于通过 USB 发起的攻击，首先要解决的问题是如何突破沙盒。这里的沙盒不仅指由 Sandbox.kext 约束的进程行为，而是广义上的概念，比如整个 iOS 可以被视为一个沙盒。默认情况下，沙盒只开启了几个服务：

![图1: 沙盒开启的服务](http://nirvan.360.cn/blog/wp-content/uploads/2016/01/iOSJB812-ServiceList.png)

iOS 8.1.2 的越狱工具利用 Mobile Backup 的漏洞 (CVE-2015-1087) 和 AFC 的漏洞 (CVE-2014-4480) 来突破沙盒，然后利用 Image Mounter 的漏洞 (CVE-2015-1062) 为用户空间的任意代码执行创造条件。为了在用户空间执行任意代码，需要解决代码签名验证问题，越狱工具利用 dyld 的漏洞 (CVE-2014-4455) 解决了让 afmid 加载假的 libmiss.dylib 的问题，从而绕过了代码签名。

接下来，越狱工具通过一个辅助工具（具有 root 权限）来执行 Untether。Untether 的主要工作内容是重新挂载磁盘的只读分区到可写状态，并将 /var/mobile/Media 中的 Payload 拷贝到系统的相关目录。随后，Untether 主要攻击内核，主要有两种方式：

### 方式一
1. 利用内核漏洞 (CVE-2014-4491) 获取内核的起始地址和 KASLR 的 Slide；
2. 结合内核漏洞 (CVE-2014-4496) 和 IOHIDFamily 的漏洞 (CVE-2014-4487) 实现内核空间任意代码执行和内核写；
3. 利用 Kernel Patch Finder 找到上述提到的保护机制的代码点以及一些 ROP Gadgets，构造 ROP Chain 来 Patch 内核。

### 方式二
1. 利用内核漏洞 (CVE-2014-4496) 获取 KASLR 的 Slide；
2. 利用 IOHIDFamily 的漏洞 (CVE-2014-4487) 构造一个内核任意大小读的利用，读取某个已知对象的虚函数表，进而计算出内核加载的基地址；
3. 与方式一相同，相当于方式二可以少利用一个漏洞。

以上是对整个越狱过程的大致描述，接下来将详细介绍越狱攻击的具体过程。

## 攻击过程

### 一、突破沙盒

#### 相关漏洞
- **CVE-2014-4480**
  - **AppleFileConduit – Fixed in iOS 8.1.3**
  - 影响设备：iPhone 4s 及以后，iPod touch (第5代) 及以后，iPad 2 及以后
  - 影响：恶意构造的 afc 命令可能允许访问受保护的文件系统部分
  - 描述：AFC 中存在符号链接机制的漏洞。此问题通过增加额外的路径检查得到解决。
  - CVE-ID: **CVE-2014-4480** - TaiG Jailbreak Team

- **CVE-2015-1087**
  - **Backup – Fixed in iOS 8.3**
  - 影响设备：iPhone 4s 及以后，iPod touch (第5代) 及以后，iPad 2 及以后
  - 影响：攻击者可能通过备份系统访问受限的文件系统区域
  - 描述：备份系统中存在相对路径评估逻辑的问题。此问题通过改进路径评估得到解决。
  - CVE-ID: **CVE-2015-1087** - TaiG Jailbreak Team

#### 准备目录结构
利用 AFC 服务创建目录、文件和软链接：
1. 创建目录：
   - PublicStaging/cache/mmap
   - __proteas_ex__/a/b/c
   - __proteas_ex__/var/mobile/Media/PublicStaging/cache
   - __proteas_mx__/a/b/c/d/e/f/g
   - __proteas_mx__/private/var

2. 创建空文件：
   - __proteas_ex__/var/mobile/Media/PublicStaging/cache/mmap
   - __proteas_mx__/private/var/run

3. 创建软链接：
   - __proteas_ex__/a/b/c/c -> ../../../var/mobile/Media/PublicStaging/cache/mmap
   - __proteas_mx__/a/b/c/d/e/f/g/c -> ../../../../../../../private/var/run

![](http://nirvan.360.cn/blog/wp-content/uploads/2016/01/iOSJB812-CreateDirLog.png)
图2: 创建目录的日志

在修补后的设备上（如 iOS 8.3），创建上述目录结构时 AFC 会报错：
```
afcd[395] :
AFCFileLine="1540"
AFCFileName="server.c"
AFCCode="-402636793"
NSDescription="Request path cannot contain dots: ../../../var/mobile/Media/PublicStaging/cache/mmap"
AFCVersion="232.5"
```

#### 触发备份恢复
查看触发备份恢复的结果：
```
iPhone5s:~ root# ls -al /var/run/mobile_image_mounter
lrwxr-xr-x 1 mobile mobile 50 Jun 26 17:29 /var/run/mobile_image_mounter -> ../../../var/mobile/Media/PublicStaging/cache/mmap
```

在挂载 DDI 时会生成一些临时目录，利用备份恢复的漏洞，这个临时目录被暴露到 Media 的子目录中，从而为利用 DDI 的漏洞创造条件。

```
1848 BackupAgent Chowned /private/var/.backup.i/var/Keychains
1848 BackupAgent Created dir /private/var/.backup.i/var/Managed Preferences
1848 BackupAgent Created dir /private/var/.backup.i/var/Managed Preferences/mobile
1848 BackupAgent Chowned /private/var/.backup.i/var/Managed Preferences/mobile
1848 BackupAgent Created dir /private/var/.backup.i/var/MobileDevice
1848 BackupAgent Created dir /private/var/.backup.i/var/MobileDevice/ProvisioningProfiles
1848 BackupAgent Chowned /private/var/.backup.i/var/MobileDevice/ProvisioningProfiles
1848 BackupAgent Created dir /private/var/.backup.i/var/mobile/Media
1848 BackupAgent Created dir /private/var/.backup.i/var/mobile/Media/PhotoData
1848 BackupAgent Renamed /private/var/mobile/Media/__proteas_mx__/a/b/c/d/e/f/g/c /private/var/.backup.i/var/mobile/Media/PhotoData/c
1848 BackupAgent Chowned /private/var/run
1848 BackupAgent Chowned /private/var/run
1848 Renamed /private/var/mobile/Media/__proteas_ex__/a/b/c/c /private/var/run/mobile_image_mounter
1848 Chowned /private/var/mobile/Media/PublicStaging/cache/mmap
```

关于 CVE-2015-1087，苹果的说明非常简单，但在编写 PoC 时需要注意以下几点：
1. 如果使用 libimobiledevice 编写利用，需要重写 `mobilebackup_client_new` 以便控制版本号交换，否则无法启动 BackupAgent。
2. 需要根据 Mobile Backup 协议构造恶意 Payload (PList 数据)，从而使 BackupAgent 创建上述链接。
3. 使用 `mobilebackup_send` 发送 PList，使用 `mobilebackup_receive` 接收响应，并判断是否执行成功。

为了方便调试，提供一个打印 PList 内容的函数：
```c
void debug_plist(plist_t plist) {
    if (!plist) {
        printf("[-] debug_plist: plist handle is NULL\n");
        return;
    }
    char *buffer = NULL;
    uint32_t length = 0;
    plist_to_xml(plist, &buffer, &length);
    if (length == 0) {
        printf("[-] debug_plist: length is zero\n");
        return;
    }
    char *cstr = (char *)malloc(length + 1);
    memset(cstr, 0, length + 1);
    memcpy(cstr, buffer, length);
    printf("[+] DEBUG PLIST:\n");
    printf("--------------------------------------------\n");
    printf("%s\n", cstr);
    printf("--------------------------------------------\n");
    free(buffer);
    free(cstr);
}
```

至此，通过对上述两个漏洞的利用，将 Image Mounter 在挂载 dmg 时的临时目录暴露到了 `/var/mobile/Media/PublicStaging/cache/mmap`，为下一步利用 DDI 的漏洞做好了准备。

### 二、利用 DDI 的漏洞

#### 相关漏洞