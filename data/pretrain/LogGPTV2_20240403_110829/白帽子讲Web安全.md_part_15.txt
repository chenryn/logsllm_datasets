test
对于浏览器来说，htmlparser会优先于JavaScript Parser执行，所以解析过程是，
被HtmlEncode的字符先被解码，然后执行JavaScript事件。
因此，经过htmlparser解析后相当于：
test
成功在onclick事件中注入了XSS代码！
第一次弹框：
执行第一个alert
第二次弹框：
执行第二个alert
导致XSS攻击发生的原因，是由于没有分清楚输出变量的语境！因此并非在模板引
擎中使用了auto-escape就万事大吉了，XSS的防御需要区分情况对待。
3.3.4 正确地防御XSS
为了更好地设计XSS防御方案，需要认清XSS产生的本质原因。
XSS的本质还是一种“HTML注入”，用户的数据被当成了HTML代码一部分来执行，
从而混淆了原本的语义，产生了新的语义。
如果网站使用了MVC架构，那么XSS就发生在View层——在应用拼接变量到HTML
页面时产生。所以在用户提交数据处进行输入检查的方案，其实并不是在真正发生攻击
的地方做防御。
想要根治XSS问题，可以列出所有XSS可能发生的场景，再一一解决。
下面将用变量“$var”表示用户数据，它将被填充入HTML代码中。可能存在以下场
景。在HTML标签中输出
$var
$var
所有在标签中输出的变量，如果未做任何处理，都能导致直接产生XSS。
在这种场景下，XSS的利用方式一般是构造一个标签，或者是任何能够产
生脚本执行的方式。比如：
或者
防御方法是对变量使用HtmlEncode。在HTML属性中输出
在标签中输出时，首先应该确保输出的变量在引号中：
攻击者需要先闭合引号才能实施XSS攻击：
防御时使用JavascriptEncode。
在事件中输出
在事件中输出和在标签中输出类似：
test
可能的攻击方法：
test
在防御时需要使用JavascriptEncode。在CSS中输出
在CSS和style、style attribute中形成XSS的方式非常多样化，参考下面几个XSS的
例子。
XSS
所以，一般来说，尽可能禁止用户可控制的变量在“标签”、“HTML标签的
style属性”以及“CSS文件”中输出。如果一定有这样的需求，则推荐使用OWASP ESAPI
中的encodeForCSS()函数。
String safe =
ESAPI.encoder().encodeForCSS( request.getPara
meter( "input" ) );
其实现原理类似于ESAPI.encoder().encode-ForJavaScript()函数，除了字母、数字
外的所有字符都被编码成十六进制形式“\uHH”。在地址中输出
在地址中输出也比较复杂。一般来说，在URL的path（路径）或者search（参数）
中输出，使用URLEncode即可。URLEncode会将字符转换为“%HH”形式，比如空格就
是“%20”，“test
可能的攻击方法：
test
经过URLEncode后，变成了：
test
但是还有一种情况，就是整个URL能够被用户完全控制。这时URL的Protocal和
Host部分是不能够使用URLEncode的，否则会改变URL的语义。
一个URL的组成如下：
[Protocal][Host][Path][Search][Hash]
例如：
https://www.evil.com/a/b/c/test?abc=123#ssss
[Protocal] = "https://"
[Host] = "www.evil.com"
[Path] = "/a/b/c/test"
[Search] = "?abc=123"
[Hash] = "#ssss"
在Protocal 与Host中，如果使用严格的UR-LEncode函数，则会把“://”、“.”等都编码
掉。
对于如下的输出方式：
test
攻击者可能会构造伪协议实施攻击：
test
除了“javascript”作为伪协议可以执行代码外，还有“vbscript”、“dataURI”等伪协议
可能导致脚本执行。“dataURI”这个伪协议是Mozilla所支持的，能够将一段代码写在
URL里。如下例：
test
这段代码的意思是，以text/html的格式加载编码为base64的数据，加载完成后实际
上是：
点击标签的链接，将导致执行脚本。
执行恶意脚本
由此可见，如果用户能够完全控制URL，则可以执行脚本的方式有很多。如何解决
这种情况呢？
一般来说，如果变量是整个URL，则应该先检查变量是否以“http”开头（如果不是
则自动添加），以保证不会出现伪协议类的XSS攻击。
test
在此之后，再对变量进行URLEncode，即可保证不会有此类的XSS发生了。
OWASP ESAPI中有一个URLEncode的实现（此API未解决伪协议的问题）：
String safe =
ESAPI.encoder().encodeForURL( request.getPara
meter( "input" ) );
3.3.5 处理富文本
有些时候，网站需要允许用户提交一些自定义的HTML代码，称之为“富文本”。比
如一个用户在论坛里发帖，帖子的内容里要有图片、视频，表格等，这些“富文本”的效
果都需要通过HTML代码来实现。
如何区分安全的“富文本”和有攻击性的XSS呢？
在处理富文本时，还是要回到“输入检查”的思路上来。“输入检查”的主要问题是，
在检查时还不知道变量的输出语境。但用户提交的“富文本”数据，其语义是完整的
HTML代码，在输出时也不会拼凑到某个标签的属性中。因此可以特殊情况特殊处理。
在上一节中，列出了所有在HTML中可能执行脚本的地方。而一个优秀的“XSS
Filter”，也应该能够找出HTML代码中所有可能执行脚本的地方。
HTML是一种结构化的语言，比较好分析。通过htmlparser可以解析出HTML代码的
标签、标签属性和事件。
在过滤富文本时，“事件”应该被严格禁止，因为“富文本”的展示需求里不应该包
括“事件”这种动态效果。而一些危险的标签，比如、、、
等，也是应该严格禁止的。
在标签的选择上，应该使用白名单，避免使用黑名单。比如，只允许、
、等比较“安全”的标签存在。“白名单原则”不仅仅用于标签的选择，同样应
该用于属性与事件的选择。
在富文本过滤中，处理CSS也是一件麻烦的事情。如果允许用户自定义CSS、
style，则也可能导致XSS攻击。因此尽可能地禁止用户自定义CSS与style。
如果一定要允许用户自定义样式，则只能像过滤“富文本”一样过滤“CSS”。这需要
一个CSSParser对样式进行智能分析，检查其中是否包含危险代码。
有一些比较成熟的开源项目，实现了对富文本的XSS检查。
Anti-Samy是OWASP上的一个开源项目，也是目前最好的XSS Filter。最早它是基
于Java的，现在已经扩展到.NET等语言。
import org.owasp.validator.html.*;
Policy policy =
Policy.getInstance(POLICY_FILE_LOCATION);
AntiSamy as = new AntiSamy();
CleanResults cr = as.scan(dirtyInput,
policy);
MyUserDAO.storeUserProfile(cr.getCleanHTML())
; // some custom function
在PHP中，可以使用另外一个广受好评的开源项目：HTMLPurify。
3.3.6 防御DOM Based XSS
DOM Based XSS是一种比较特别的XSS漏洞，前文提到的几种防御方法都不太适
用，需要特别对待。
DOM Based XSS是如何形成的呢？回头看看这个例子：
function test(){
var str =
document.getElementById("text").value;
document.getElementById("t").innerHTML =
"testLink";
}
在button的onclick事件中，执行了test()函数，而该函数中最关键的一句是：
document.getElementById("t").innerHTML = "testLink";
将HTML代码写入了DOM节点，最后导致了XSS的发生。
事实上，DOM Based XSS是从JavaScript中输出数据到HTML页面里。而前文提到
的方法都是针对“从服务器应用直接输出到HTML页面”的XSS漏洞，因此并不适用于
DOM Based XSS。
看看下面这个例子：
var x="$var";
document.write("test");
变量“$var”输出在标签内，可是最后又被document.write输出到HTML页面
中。
假设为了保护“$var”直接在标签内产生XSS，服务器端对其进行了
javascriptEscape。可是，$var在document.write时，仍然能够产生XSS，如下所示：
var x="\x20\x27onclick\x3dalert\x281\x29\x3b
\x2f\x2f\x27";
document.write("test");
页面渲染之后的实际结果如下：
页面渲染后的HTML代码效果
XSS攻击成功：
执行恶意代码
其原因在于，第一次执行javascriptEscape后，只保护了：
var x = "$var";
但是当document.write输出数据到HTML页面时，浏览器重新渲染了页面。在
标签执行时，已经对变量x进行了解码，其后docu-ment.write再运行时，其参数
就变成了：
test
XSS因此而产生。
那是不是因为对“$var”用错了编码函数呢？如果改成HtmlEncode会怎么样？继续看
下面这个例子：
var
x="1&#x22;&#x29;&#x3b;alert&#x28;2&#x29;&#x3b
;&#x2f;&#x2f;&#x22;";
document.write("test");
服务器把变量HtmlEncode后再输出到中，然后变量x作为onclick事件的一
个函数参数被document.write到了HTML页面里。
页面渲染后的HTML代码效果
onclick事件执行了两次“alert”，第二次是被XSS注入的。
执行恶意代码
那幺正确的防御方法是什么呢？
首先，在“$var”输出到时，应该执行一次javascriptEncode；其次，在docu-
ment.write输出到HTML页面时，要分具体情况看待：如果是输出到事件或者脚本，则
要再做一次javascriptEncode；如果是输出到HTML内容或者属性，则要做一次
HtmlEncode。
也就是说，从JavaScript输出到HTML页面，也相当于一次XSS输出的过程，需要
分语境使用不同的编码函数。
DOM based XSS的防御
会触发DOM Based XSS的地方有很多，以下几个地方是JavaScript输出到HTML页
面的必经之路。
document.write()