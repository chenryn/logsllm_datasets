# Initialization
```c
do_init:
    r9
    r10
    r11
    r4
```

# Test Key State
```c
// V number of cycles
// 1
// 1
// 1
// V number of cycles
// 1
// 1
// 2
}
key_state = new_key_state;
```

# Return the Number of Characters to be Entered by the User
```c
return (PIN_LEN - pin_idx);
```

# Intel SGX SDK Binary Search Implementation
In this appendix, we provide the full C source code of the `bsearch` function from the trusted in-enclave libc in the official Intel SGX Linux SDK v2.1.2 (located at `linux-sgx/sdk/tlibc/stdlib/bsearch.c`).

For completeness, we also provide a disassembled version of this function, as compiled with LLVM/Clang v3.7.0.

## Keypad Polling Function
```assembly
poll_keypad:
    push r4
    mov r1, r4
    push r11
    push r10
    push r9
    tst &init
```

## Copyright Notice
```
/*
 * (c) 1990 Regents of the University of California. All rights reserved.
 */
```

## Binary Search Function
```c
#include <stdlib.h>

/*
 * Perform a binary search.
 * The code below is a bit sneaky. After a comparison fails, we divide the work in half,
 * either left or right. If lim is even, we simply halve it. If lim is odd, moving right
 * involves halving lim by moving either left or right. For example, when lim is 5, we look
 * at item 2, so we change lim to 2. If lim is 3, we look at item 2 and then move to item 3.
 * This time, moving the base up one item past p: if lim is 5, we change base to item 3 and
 * make lim 2, so we will look at items 3 and 4. If lim is 4, we shrink it by one before
 * halving, obtaining 1, so we have to make it 2, so that we will only look at items 3 and 4.
 */

void *bsearch(const void *key, const void *base0, size_t nmemb, size_t size, int (*compar)(const void *, const void *)) {
    const char *base = (const char *)base0;
    int cmp;
    const void *p;

    for (size_t lim = nmemb; lim != 0; lim >>= 1) {
        p = base + (lim >> 1) * size;
        cmp = (*compar)(key, p);
        if (cmp == 0)
            return (void *)p;
        else if (cmp > 0) {
            base = (char *)p + size;
            lim--;
        } else {
            // Move left
        }
    }
    return NULL;
}
```

## Disassembled Version of `bsearch` (compiled with gcc v5.4.0)
```assembly
bsearch:
    push %r15
    push %r14
    push %r13
    push %r12
    push %rbp
    push %rbx
    sub $0x18, %rsp
    test %rdx, %rdx
    mov %rdi, 0x8(%rsp)
    mov %rsi, %r12
    mov %rdx, %rbx
    mov %rcx, %rbp
    mov %r8, %r13
    jmp 2f

1:  sub $0x1, %rbx
    lea (%r14, %rbp, 1), %r12
    shr %rbx
    test %rbx, %rbx
    je 3f

2:  mov %rbx, %r15
    mov 0x8(%rsp), %rdi
    shr %r15
    mov %r15, %rdx
    imul %rbp, %rdx
    lea (%r12, %rdx, 1), %r14
    mov %r14, %rsi
    callq *%r13
    cmp $0x0, %eax
    je 4f
    jg 1b
    mov %r15, %rbx
    test %rbx, %rbx
    jne 2b

3:  add $0x18, %rsp
    xor %eax, %eax
    pop %rbx
    pop %rbp
    pop %r12
    pop %r13
    pop %r14
    pop %r15
    retq

4:  add $0x18, %rsp
    mov %r14, %rax
    pop %rbx
    pop %rbp
    pop %r12
    pop %r13
    pop %r14
    pop %r15
    retq
```

## Integer Comparison Function
```c
int int_comp(const void *p1, const void *p2) {
    int a = *(const int *)p1;
    int b = *(const int *)p2;

    if (a == b)
        return 0;
    else if (a > b)
        return 1;
    else
        return -1;
}
```

## Disassembled Version of `int_comp`
```assembly
int_comp:
    xor %eax, %eax
    mov (%rsi), %edx
    cmp %edx, (%rdi)
    je 1f
    setg %al
    movzbl %al, %eax
    lea -0x1(%rax, %rax, 1), %eax
1:  retq
```

This document provides the source code and disassembled versions of the `bsearch` and `int_comp` functions used in the macrobenchmark evaluation of Section 5.3.