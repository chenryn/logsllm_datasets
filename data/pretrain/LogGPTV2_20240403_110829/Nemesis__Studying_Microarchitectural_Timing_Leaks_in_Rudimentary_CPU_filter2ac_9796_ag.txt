4f
# do_init
r9
r10
r11
r4
# test key state
# V no . of cycles
# 1
# 1
# 1
# V no . of cycles
# 1
# 1
# 2
}
k e y _ s t a t e = n e w _ k e y _ s t a t e ;
/ ∗ R e t u r n t h e number o f
t o be e n t e r e d by t h e u s e r .
r e t u r n ( PIN_LEN − p i n _ i d x ) ;
∗ /
c h a r a c t e r s
C INTEL SGX SDK BINARY SEARCH
IMPLEMENTATION
In this appendix, we provide the full C source code of the bsearch
function from the trusted in-enclave libc in the official Intel SGX
Linux SDK v2.1.2 (linux-sgx/sdk/tlibc/stdlib/bsearch.c).
s t i l l
}
For completeness, we also provide a disassembled version of this
function, as compiled with LLVM/Clang v3.7.0.
poll_keypad :
push
mov
push
push
push
tst
r4
r1 , r4
r11
r10
r9
& init
/ ∗
∗ C o p y r i g h t
∗ o f C a l i f o r n i a . A l l
∗ /
( c ) 1 9 9 0 R e g e n t s o f
t h e U n i v e r s i t y
r i g h t s
r e s e r v e d .
# i n c l u d e 
/ ∗
∗ P e r f o r m a b i n a r y s e a r c h .
∗
∗ The c o d e below i s a b i t
∗
c o m p a r i s o n f a i l s , we d i v i d e
s n e a k y .
A f t e r a
t h e work i n h a l f
l e f t o r
s i m p l y i n v o l v e s h a l v i n g
r i g h t .
l i m i s
I f
e . g . , when l i m i s 5 we l o o k a t
l i m :
s o we c h a n g e l i m t o 2 s o t h a t we w i l l
i t e m 2 ,
l i m i s
even ,
l o o k
t h e same
l i m i s odd , moving r i g h t a g a i n
I f
I f
i t e m s 0 & 1 .
i n v o l v e s h a l v i n g lim ,
∗ by moving e i t h e r
∗ odd , moving
l e f t
∗
∗
∗ a t
∗ a p p l i e s .
∗
∗ b a s e up one i t e m p a s t p :
∗ we c h a n g e b a s e
∗
∗
∗ one b e f o r e h a l v i n g :
∗
∗
∗ w i l l o n l y l o o k a t
∗ /
t h a t we w i l l
i s
s t i l l
l i m 3 ,
l o o k e d a t
i t e m 2 ,
i t e m 3 .
t h i s
t i m e moving t h e
e . g . , when l i m i s 5
t o i t e m 3 and make l i m 2 so
i t e m s 3 and 4 .
even , however , we have t o s h r i n k
l o o k a t
I f
l i m
i t by
e . g . , when l i m i s
4 , we
t h e n h a l v e , o b t a i n i n g 1 ,
s o we h ave t o make
s o t h a t we
v o i d ∗
b s e a r c h ( c o n s t v o i d ∗ key ,
s i z e _ t
s i z e _ t nmemb ,
i n t
c o n s t v o i d ∗ base0 ,
s i z e ,
( ∗ compar ) ( c o n s t v o i d ∗ ,
c o n s t v o i d ∗ ) )
{
}
c o n s t c h a r
l i m ;
s i z e _ t
∗ base = ( c o n s t c h a r
∗ ) b a s e0 ;
i n t cmp ;
c o n s t v o i d ∗ p ;
l i m >>= 1 )
s i z e ;
{
f o r
( l i m = nmemb ;
l i m ! = 0 ;
p = base + ( l i m >> 1 )
∗
cmp = ( ∗ compar ) ( key , p ) ;
i f
( cmp == 0 )
r e t u r n ( ( v o i d ∗ ) p ) ;
( cmp > 0 )
base = ( c h a r
lim −−;
/ ∗
e l s e move
l e f t
∗ /
{
i f
}
}
r e t u r n ( NULL ) ;
/ ∗ key > p : move r i g h t
∗ ) p + s i z e ;
∗ /
Since Nemesis-type IRQ latency attacks exploit information leak-
age at an instruction-level granularity, we also provide a disassem-
bled version of this function, as compiled with gcc v5.4.0.
bsearch :
push
push
push
push
push
push
sub
test
mov
je
mov
mov
mov
% r15
% r14
% r13
% r12
% rbp
% rbx
$0x18 ,% rsp
% rdx ,% rdx
% rdi ,0 x8 (% rsp )
3f
% rsi ,% r12
% rdx ,% rbx
% rcx ,% rbp
mov
jmp
%r8 ,% r13
2f
/* base = ( char *) p + size ; lim - -; */
1: sub
lea
shr
test
je
$0x1 ,% rbx
(% r14 ,% rbp ,1) ,% r12
% rbx
% rbx ,% rbx
3f
/* for ( lim = nmemb ; lim != 0; lim >>= 1) */
2: mov
mov
shr
mov
imul
lea
mov
callq
cmp
je
jg
mov
test
jne
% rbx ,% r15
0 x8 (% rsp ) ,% rdi
% r15
% r15 ,% rdx
% rbp ,% rdx
(% r12 ,% rdx ,1) ,% r14
% r14 ,% rsi
*% r13
$0x0 ,% eax
4f
1b
% r15 ,% rbx
% rbx ,% rbx
2b
# cmp == 0
# cmp > 0
# else move left
/* return ( NULL ); */
3: add
$0x18 ,% rsp
% eax ,% eax
xor
% rbx
pop
% rbp
pop
pop
% r12
% r13
pop
% r14
pop
pop
% r15
retq
/* return (( void *) p); */
4: add
mov
pop
pop
pop
pop
pop
pop
retq
$0x18 ,% rsp
% r14 ,% rax
% rbx
% rbp
% r12
% r13
% r14
% r15
For completeness, we finally list the source code and dissassemly
of the integer comparison function we used in the macrobenchmark
evaluation of Section 5.3.
int_comp ( c o n s t v o i d ∗ p1 ,
c o n s t v o i d ∗ p2 )
i n t
{
i n t a = ∗ ( ( i n t ∗ ) p1 ) , b = ∗ ( ( i n t ∗ ) p2 ) ;
i f
( a == b )
r e t u r n 0 ;
e l s e
i f
( a > b )
r e t u r n 1 ;
e l s e
r e t u r n −1;
}
int_comp :
% eax , % eax
(% rsi ), % edx
% edx , (% rdi )
xor
mov
cmp
je 1f
setg
movzbl %al ,% eax
lea
% al
-0 x1 (% rax ,% rax ,1) ,% eax
1: retq