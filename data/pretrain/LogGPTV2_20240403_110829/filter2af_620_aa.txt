文章来源：
* * *
让我们接着上节的内容，继续探讨。建议读者先阅读第一部分，这将有助于理解本节的内容。
### 服务端攻击
#### 请求错误路由
**例子2**
这是关于Nginx的一个“bug”，准确的说它只是Nignx正常工作导致的（因此不会被修复）。
首先，服务器配置的规则为`location
/to_app`，即`/to_app`是作为后面添加字符的前缀。因此，`/to_app`,`/to_app/`,`/to_app_anything`（包括特殊符号）都可以通过该规则。并且，`/to_app`后面的字符将被提取并与`proxy_pass`联合（解析）起来。  
Nginx处理完`/to_app_anything`后，其转发（到后端服务器）的请求格式为`http://server/any_path/_anything`。
    location /to_app {
    proxy_pass http://server/any_path/;
    }
如果将这些特性结合起来，可以发现我们可以遍历后端服务器的所有位置。只需发送这样的请求：
    GET /to_app../other_path HTTP/1.1
解释：首先`/to_app`与Nginx规则相匹配，然后Nginx提取出`../other_path`，再与`proxy_pass`的`/any_path/`相结合，最终转发的请求为：`http://server/any_path/../other_path`。当后端服务器解析完毕后，我们就能够进入想要的目录。
**例子3**
在上篇文章开头，我已经介绍了反向代理服务器会根据主机头来转发请求至后端。
这里我使用Haproxy来举个例子。我将Haproxy配置为所有主机头为`example1`的请求都将转发至名为`example1_backend` –
`192.168.78.1:9999`的后端服务器。
    frontend http-in
    acl host_example1 hdr(host) -i example1.com
    use_backend example1_backend if host_example1
    backend example1_backend
    server server1 192.168.78.1:9999 maxconn 32
对于这样的配置，攻击者似乎无法再访问后端的其他服务器？其实不然，攻击者可以轻易突破防线。因为Haproxy 不支持`Absolute
URI`（上篇文章中介绍过了），然而大部分web服务器都支持此协议。当Haproxy 收到包含`Absolute
URI`的请求时，它不会对`Absolute URI`做任何处理，直接转发至后端。因此，我们可以发送以下请求来访问其他后端服务器。
    GET http://unsafe-value/path/ HTTP/1.1
    Host: example1.com
那么，我们可以通过反向代理来访问其后端的任意服务器？其实在大多数情况下(Nginx, Haproxy,
Varnish)，这并不能轻松实现，但是Apache（某些版本）则可以。Apache从`ProxyPass`“解析”提取主机值，因此我们可以发送类似`GET
@evil.com
HTTP/1.1`的请求，Apache将其视为`http://PI:EMAIL`，然后请求`evil.com`（你知道的，这可以导致SSRF攻击）。[这里](https://www.contextis.com/blog/server-technologies-reverse-proxy-bypass)有一个此类攻击的例子。
### 客户端攻击
其实你再回过头细想方向代理的特性，你会发现只要与响应相关，就会有潜在的客户端攻击向量。由于浏览器在发送请求前通常会做一些处理，因此这类攻击有一些额外的限制，这将导致服务器会有非预期的表现。
#### 浏览器处理
在一次客户端攻击中，攻击者需要强制受害者浏览器发送一个特殊的请求，然后服务器做出响应。但是，浏览器会遵循一些规范来处理路径，然后再发送请求。
**浏览器会解析该URL（例如抛弃fragment部分），对某些必要的符号进行URL编码处理（或许不会），然后在使路径变得规范化**
。因此，我们要想实施这种攻击，我们只能发送一个“有效”的请求。该请求必须切合这三个组件（浏览器，反向代理，后端服务器）。
当然，不同浏览器的实现（请求）存在差异，再加上一些特性上的区别，可以使我们找到一个切合点：
  * 例如，Chrome和IE不会解码`%2f`，因此它们将不对`/path/anything/..%2f../`这样的路径做规范化处理。
  * 在规范化处理之前，老版本的Firefox不做URL解码，但现在它和Chrome有类似的工作方式。
  * Safari不对路径做URL解码处理，因此我们可以强制（浏览器）原封不动地发送`/path/%2e%2e/another_path/`。
  * 说起IE，它还是一如既往的奇特。如果主机头为本地地址，那么它不会对路径做任何处理。
#### 滥用标头修改功能
对于反向代理服务器来说，增添，删除和修改后端请求中的标头是一项基本功能。有些情况在，这比修改后端本身简单的多。有时，反向代理会添加一些重要的安全标头。作为攻击者的我们，想要利用这些规则来使反向代理服务器做出错误的响应（通过滥用后端位置标头），从而攻击其他用户。
假如我们使用Nginx作为代理，Tomcat作为后端。Tomcat默认设置了`X-Frame-Options:
deny`标头，所以浏览器无法将其嵌入frame中。由于某些原因，Tomcat
web应用的一个组件（`/iframe_safe/`）必须通过iframe访问，因此Nginx配置中删除了`X-Frame-Options`标头。然而，为了服务器为了防范`clickjacking`（点击劫持）攻击，做了`iframe_safe`设置：