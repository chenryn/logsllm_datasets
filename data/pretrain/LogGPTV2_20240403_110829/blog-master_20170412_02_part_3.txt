```  
DECLARE  
user_id integer;  
quantity numeric(5);  
url varchar;  
myrow tablename%ROWTYPE;  
myfield tablename.columnname%TYPE;  
arow RECORD;  
quantity integer DEFAULT 32;  
url varchar := 'http://mysite.com';  
user_id CONSTANT integer := 10;  
```  
参数使用的例子，可以使用位置参数，或者别名。  
```  
CREATE FUNCTION instr(varchar, integer) RETURNS integer AS $$  
DECLARE  
    v_string ALIAS FOR $1;  
    index ALIAS FOR $2;  
BEGIN  
    -- some computations using v_string and index here  
END;  
$$ LANGUAGE plpgsql;  
CREATE FUNCTION concat_selected_fields(in_t sometablename) RETURNS text AS $$  
BEGIN  
    RETURN in_t.f1 || in_t.f3 || in_t.f5 || in_t.f7;  
END;  
$$ LANGUAGE plpgsql;  
```  
基本表达式  
赋值  
```  
variable { := | = } expression;  
```  
执行无结果调用  
```  
PERFORM query;  
```  
通常被用来判断是否有记录，例如  
```  
PERFORM 1 from tbl where xxx limit 1;  
if found then  
  xxx  
else  
  xxx  
end if;  
```  
执行返回单行的表达式或QUERY，并将结果存入变量。  
```  
SELECT select_expressions INTO [STRICT] target FROM ...;  
INSERT ... RETURNING expressions INTO [STRICT] target;  
UPDATE ... RETURNING expressions INTO [STRICT] target;  
DELETE ... RETURNING expressions INTO [STRICT] target;  
```  
将结果存入变量时，如果没有结果被存入，或者存入的结果超过1条，可以这样来判断  
If STRICT is not specified in the INTO clause, then target will be set to the first row returned by the query, or to nulls if the query returned no rows.  
```  
SELECT * INTO myrec FROM emp WHERE empname = myname;  
IF NOT FOUND THEN  
    RAISE EXCEPTION 'employee % not found', myname;  
END IF;  
```  
If the STRICT option is specified, the query must return exactly one row or a run-time error will be reported,   
either NO_DATA_FOUND (no rows) or TOO_MANY_ROWS (more than one row).  
```  
BEGIN  
    SELECT * INTO STRICT myrec FROM emp WHERE empname = myname;  
    EXCEPTION  
        WHEN NO_DATA_FOUND THEN  
            RAISE EXCEPTION 'employee % not found', myname;  
        WHEN TOO_MANY_ROWS THEN  
            RAISE EXCEPTION 'employee % not unique', myname;  
END;  
```  
执行动态SQL  
```  
EXECUTE command-string [ INTO [STRICT] target ] [ USING expression [, ... ] ];  
```  
例子  
```  
EXECUTE 'SELECT count(*) FROM mytable WHERE inserted_by = $1 AND inserted  0  
    LOOP  
        -- can do some processing here  
        RETURN NEXT r; -- return current row of SELECT  
    END LOOP;  
    RETURN;  
END  
$BODY$  
LANGUAGE plpgsql;  
SELECT * FROM get_all_foo();  
```  
条件控制  
```  
IF and CASE statements let you execute alternative commands based on certain conditions. PL/pgSQL has three forms of IF:  
IF ... THEN ... END IF  
IF ... THEN ... ELSE ... END IF  
IF ... THEN ... ELSIF ... THEN ... ELSE ... END IF  
and two forms of CASE:  
CASE ... WHEN ... THEN ... ELSE ... END CASE  
CASE WHEN ... THEN ... ELSE ... END CASE  
```  
循环  
```  
[ > ]  
LOOP  
    statements  
END LOOP [ label ];  
```  
```  
EXIT [ label ] [ WHEN boolean-expression ];  
```  
例子  
```  
LOOP  
    -- some computations  
    IF count > 0 THEN  
        EXIT;  -- exit loop  
    END IF;  
END LOOP;  
LOOP  
    -- some computations  
    EXIT WHEN count > 0;  -- same result as previous example  
END LOOP;  
>  
BEGIN  
    -- some computations  
    IF stocks > 100000 THEN  
        EXIT ablock;  -- causes exit from the BEGIN block  
    END IF;  
    -- computations here will be skipped when stocks > 100000  
END;  
```  
for 循环  
```  
[ > ]  
FOR target IN EXECUTE text_expression [ USING expression [, ... ] ] LOOP  
    statements  
END LOOP [ label ];  
```  
数组循环  
```  
[ > ]  
FOREACH target [ SLICE number ] IN ARRAY expression LOOP  
    statements  
END LOOP [ label ];  
```  
例子  
```  
CREATE FUNCTION sum(int[]) RETURNS int8 AS $$  
DECLARE  
  s int8 := 0;  
  x int;  
BEGIN  
  FOREACH x IN ARRAY $1  
  LOOP  
    s := s + x;  
  END LOOP;  
  RETURN s;  
END;  
$$ LANGUAGE plpgsql;  
```  
异常捕获  
```  
[ > ]  
[ DECLARE  
    declarations ]  
BEGIN  
    statements  
EXCEPTION  
    WHEN condition [ OR condition ... ] THEN  
        handler_statements  
    [ WHEN condition [ OR condition ... ] THEN  
          handler_statements  
      ... ]  
END;  
```  
例子  
```  
WHEN division_by_zero THEN ...  
WHEN SQLSTATE '22012' THEN ...  
```  
```  
INSERT INTO mytab(firstname, lastname) VALUES('Tom', 'Jones');  
BEGIN  
    UPDATE mytab SET firstname = 'Joe' WHERE lastname = 'Jones';  
    x := x + 1;  
    y := x / 0;  
EXCEPTION  
    WHEN division_by_zero THEN  
        RAISE NOTICE 'caught division_by_zero';  
        RETURN x;  
END;  
CREATE TABLE db (a INT PRIMARY KEY, b TEXT);  
CREATE FUNCTION merge_db(key INT, data TEXT) RETURNS VOID AS  
$$  
BEGIN  
    LOOP  
        -- first try to update the key  
        UPDATE db SET b = data WHERE a = key;  
        IF found THEN  
            RETURN;  
        END IF;  
        -- not there, so try to insert the key  
        -- if someone else inserts the same key concurrently,  
        -- we could get a unique-key failure  
        BEGIN  
            INSERT INTO db(a,b) VALUES (key, data);  
            RETURN;  
        EXCEPTION WHEN unique_violation THEN  
            -- Do nothing, and loop to try the UPDATE again.  
        END;  
    END LOOP;  
END;  
$$  
LANGUAGE plpgsql;  
SELECT merge_db(1, 'david');  
SELECT merge_db(1, 'dennis');  
```  
捕获异常，输出异常结构指定属性  
```  
GET STACKED DIAGNOSTICS variable { = | := } item [ , ... ];  
```  
异常结构变量如下  
![pic](20170412_02_pic_090.jpg)  
例子  
```  
DECLARE  
  text_var1 text;  
  text_var2 text;  
  text_var3 text;  
BEGIN  
  -- some processing which might cause an exception  
  ...  
EXCEPTION WHEN OTHERS THEN  
  GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,  
                          text_var2 = PG_EXCEPTION_DETAIL,  
                          text_var3 = PG_EXCEPTION_HINT;  
END;  
```  
输出异常位置(PG_CONTEXT)  
```  
CREATE OR REPLACE FUNCTION outer_func() RETURNS integer AS $$  
BEGIN  
  RETURN inner_func();  
END;  
$$ LANGUAGE plpgsql;  
CREATE OR REPLACE FUNCTION inner_func() RETURNS integer AS $$  
DECLARE  
  stack text;  
BEGIN  
  GET DIAGNOSTICS stack = PG_CONTEXT;  
  RAISE NOTICE E'--- Call Stack ---\n%', stack;  
  RETURN 1;  
END;  
$$ LANGUAGE plpgsql;  
SELECT outer_func();  
NOTICE:  --- Call Stack ---  
PL/pgSQL function inner_func() line 5 at GET DIAGNOSTICS  
PL/pgSQL function outer_func() line 3 at RETURN  
CONTEXT:  PL/pgSQL function outer_func() line 3 at RETURN  
 outer_func  
 ------------  
           1  
(1 row)  
```  
#### 游标  
声明游标变量   
```  
name [ [ NO ] SCROLL ] CURSOR [ ( arguments ) ] FOR query;  
```  
例子  
```  
DECLARE  
    curs1 refcursor;  
    curs2 CURSOR FOR SELECT * FROM tenk1;  
    curs3 CURSOR (key integer) FOR SELECT * FROM tenk1 WHERE unique1 = key;  
```  
打开游标例子1, 普通QUERY  
```  
OPEN unbound_cursorvar [ [ NO ] SCROLL ] FOR query;  
OPEN curs1 FOR SELECT * FROM foo WHERE key = mykey;  
```  
打开游标例子2, 动态QUERY  
```  
OPEN unbound_cursorvar [ [ NO ] SCROLL ] FOR EXECUTE query_string  
                                     [ USING expression [, ... ] ];  
OPEN curs1 FOR EXECUTE format('SELECT * FROM %I WHERE col1 = $1',tabname) USING keyvalue;  
```  
打开bound游标  
```  
OPEN bound_cursorvar [ ( [ argument_name := ] argument_value [, ...] ) ];  
例子  
OPEN curs2;  
OPEN curs3(42);  
OPEN curs3(key := 42);  
DECLARE  
    key integer;  
    curs4 CURSOR FOR SELECT * FROM tenk1 WHERE unique1 = key;  
BEGIN  
    key := 42;  
    OPEN curs4;  
```  
使用游标  
获取数据  
```  