It is portable across
multiple architectures and operating systems. Its runtime
overhead is small due to clever uses of hardware features
(e.g., segment protection on x86-32). It reports an average
of 5% overhead on SPEC2000 for memory and jump protec-
tion (on x86-32). We next highlight a few technical aspects
of NaCl that are the most relevant for the discussion of Ro-
busta.
Sandboxing unsafe instructions. The NaCl address space
is separated into a non-writable code region and a non-
executable data region. NaCl disallows memory reads/writes
outside of the data region and control transfers outside of the
code region. This is achieved by segment protection or by
inserting instructions for masking addresses before memory
and control-transfer instructions. NaCl also enforces every
jump target to be jump aligned, following Pittsﬁeld [18].
The restrictions ensure NaCl binaries can be reliably dis-
assembled for static veriﬁcation and ensure that inserted
dynamic checks cannot be bypassed.
Trampolines and springboards. Trampolines are the
only ways through which untrusted code can escape the
sandbox. The NaCl runtime sets up system-call trampo-
lines during the loading of NaCl binaries and relies on OS
page protection to make the trampoline code immutable.
Springboards allow crossings in the opposite direction, from
trusted code to untrusted code.
NaCl toolchain. NaCl provides a modiﬁed GNU toolchain
for generating NaCl-compliant binaries and also provides
proﬁling and debugging support. System calls in generated
binary code are redirected to their corresponding trampo-
lines (at ﬁxed addresses and are immutable).
A separate veriﬁer. NaCl ships with a small veriﬁer for
validating the safety of NaCl binaries. The veriﬁer disassem-
bles NaCl binaries and uses static analysis to rule out unsafe
instructions. The separation between the NaCl toolchain
and the veriﬁer reduces the size of the TCB; only the ver-
iﬁer needs to be trusted, and it is much smaller than the
toolchain.
4.2 Secure dynamic linking/loading
A native library is dynamically loaded into the JVM after
its associated Java class is loaded by a class loader. Before a
native method is invoked for the ﬁrst time, the JVM dynam-
ically resolves the symbol that represents the native method
to an address in a native library.
NaCl supports only statically linked libraries. The NaCl
address space layout does not support dynamic linking/load-
ing because its code and data regions have no room for load-
ing extra libraries and also because its security conﬁguration
requires all code to be known before execution.
Robusta generalizes NaCl to support dynamic linking/load-
ing in two steps. First, it adopts a new address space lay-
out that accommodates library code and data. Second, it
extends NaCl’s veriﬁcation scheme to ensure the safety of
dynamically loaded code.
Address space layout. The prototype implementation of
Robusta adopted Seaborn’s suggestion [25] for a new layout
of the NaCl address space on Linux/x86-32. The layout is
shown in Fig. 4. This is a Harvard-style architecture, where
code and data are in separate regions. The x86 segment
registers cs and ds point to the beginning of the code and
the data region, respectively. Therefore, an address is inter-
preted diﬀerently depending on whether it is used as a code
or a data address. To avoid confusion, the layout does not
allow code and data pages to be mapped at the same ad-
dress. This is why, for example, (D1) in the code region and
(C1) in the data region are left unmapped. One downside
of this memory layout is that it wastes some memory.
The address-space layout is compatible with PIC (position-
independent code). PIC is used by dynamically loaded li-
braries in Linux and stipulates that the relative oﬀset be-
tween code and data segments of a library should be con-
stant. To see why the layout accommodates PIC, assume
the beginning address of library 1’s code is cs:x, and the
beginning address of library 1’s data is ds:y. As long as the
oﬀset between x and y is kept unchanged, PIC is supported.
204(64k)
(64k)
(LC)
(LD)
(C0)
(D0)
(C1)
(D1)
(C2)
(D2)
code region (cs)
Unmapped page
|
Trampolines
|
ld.so code
|
Unmapped
|
Application code
|
Unmapped
|
Library 1 code
|
Unmapped
|
Library 2 code
Unmapped
|
Unmapped gap for expansion |
|
|
end of cs
(64k)
(64k)
(LC)
(LD)
(C0)
(D0)
(C1)
(D1)
(C2)
(D2)
data region (ds)
Unmapped
|
Unmapped
|
Unmapped
|
ld.so data
|
Unmapped
|
Application data
|
Unmapped
|
Library 1 data
|
Unmapped
Library 2 data
|
Unmapped gap for expansion |
|
Heap
Unmapped gap
|
end of ds
Stack
Figure 4: A layout of the NaCl address space for dynamic linking/loading.
That is, PIC code is oblivious to how hardware segments are
conﬁgured.
Finally, note that the dynamic linker/loader (ld.so in
Linux) is loaded into the address space to allow for possible
dlopen and dlsym requests from a NaCl application.
Secure dynamic loading. There are three main security
concerns for dynamically loaded code:
• Dynamic loading inserts into the code region new un-
trusted code, which must be veriﬁed before it can be
safely executed.
• Library images may be changed by an adversary after
veriﬁcation. Precautionary measures must be taken to
ensure that the code to be executed is the same as the
one that was veriﬁed.
• Loading code into memory is not an atomic operation.
When one thread is loading a dynamic library, other
malicious threads could take advantage of a partially
loaded library and carry out an attack.
To address these concerns, Robusta adopts a novel solu-
tion based on the Non-eXecutable (NX) bit of page pro-
tection. The NX-bit support is available in mainstream pro-
cessors including Intel and AMD processors. Most operating
systems now support the NX-bit (see [2] for a survey).
Access permissions for memory pages include readable,
writable, and executable. Unmapped pages in the NaCl
address space are memory protected to be unreadable, un-
writable, and unexecutable. This prevents any access to
unmapped pages.
In Robusta, the process of loading a dynamic library through
dlopen is as follows:
(1) The dlopen request for a library is sent to ld.so, the
dynamic linker/loader. ld.so invokes the system call
mmap to map a segment of the library’s image into the
NaCl address space.
(2) A mmap system call is redirected through the trampoline
mechanism of NaCl to a trusted mmap wrapper. The
wrapper checks to see if the requested region has been
occupied. If so, it reports failure to ld.so, which will
request another memory region to perform the memory
mapping.
(3) If the requested region, called R hereafter, is not occu-
pied and if the segment to be mapped in the library is
a code segment, the wrapper will ﬁrst make R writable
(but it remains unreadable and unexecutable) and will
copy the segment into R. Since R is not executable,
other threads cannot execute partially copied code.
(4) The wrapper marks R as readable, but unwritable and
unexecutable. It then invokes NaCl’s veriﬁer to check
the safety of the newly copied code. R is made readable
so that the veriﬁer can read the code for veriﬁcation.
Moreover, future changes to the library’s image do not
invalidate the veriﬁcation result since the veriﬁcation is
performed on the code that was copied in.
(5) Finally, if the veriﬁcation succeeds, R is marked as read-
able and executable, but unwritable. That is, R is not
executable until this stage, which prevents any code
from being executed before it is veriﬁed.
4.3 Incorporating NaCl into the JVM
Robusta is constructed as an intermediate layer between
the JVM and NaCl. Hooks are added to the JVM so that
whenever the JVM needs to interact with native code, execu-
tion transfers to the Robusta layer, which fulﬁlls the required
operation. We next discuss how Robusta functions.
JVM initialization. When the JVM starts, Robusta con-
structs a NaCl sandbox.
It reserves a memory region for
the NaCl address space and sets up a code and a data re-
gion. Page protection is conﬁgured so that the code region
is readable and executable, and the data region is readable
and writable.
Trusted trampolines are installed in the code region. These
trampolines include system-call trampolines and JNI tram-
polines, as well as a special trampoline called OutOfJail,
which is invoked when native code ﬁnishes execution.
Finally, the initialization of the sandbox loads the dy-
namic linker/loader (ld.so) into the NaCl address space. It
also loads a utility module, named dlWrappers, which pro-
vides a gateway for Robusta to access services housed within
the sandbox (see the following discussion). The dynamic
linker/loader and the utility module are not in the TCB be-
cause they are in the sandbox and the only way out of the
sandbox is through known safe exits (i.e., trampolines).
Only one sandbox is constructed for all native code be-
cause we are mainly concerned with protecting the JVM
205from native code. However, there are situations where iso-
lating one native library from another is desired (e.g., when
napplets are downloaded from multiple websites that have
diﬀering trust levels). We believe it is straightforward to
extend Robusta with support for multiple sandboxes.
Loading a native library and symbol resolution. When
the JVM decides to load a native sandboxed library, Robusta
checks if the security policy allows the operation (see Sec. 5).
If so, it invokes dlopen_wrapper in the utility module. The
wrapper then calls the actual dlopen method implemented
by the dynamic linker/loader, and propagates the resulting
handle back to the JVM through calling OutOfJail.3 Dy-
namic symbol resolution within sandboxed native libraries
follows a similar pattern.
A service routine called
dlsym_wrapper invokes dlsym in the dynamic linker/loader
to resolve the symbol’s address, and propagates the resulting
address back to the JVM through OutOfJail.
Calling in and returning. When the JVM invokes a na-
tive method (e.g., as a result of executing an invokespecial
bytecode instruction), Robusta copies parameters from the
Java stack to the native stack in the sandbox and invokes
method_dispatch in the utility module with the address of
the native method as a parameter. method_dispatch then
invokes the native method and collects the return value be-
fore calling OutOfJail.
After a context switch outside of the sandbox through
OutOfJail, Robusta needs to continue the execution of the
JVM. It cannot trust native code for remembering the re-
turn information, including the return address and the reg-
ister state of the JVM. Instead, trusted code outside of the
sandbox uses setjmp for saving the state and longjmp for
restoring the state.
Through the JNI, native code can call Java methods. This
can result in a complicated “ping-pong” behavior between
Java and native methods. For example, suppose a Java
method mj calls a native method mc. The method mc may
call a second Java method m′
j in turn may
call a second native method m′
c, and so on. The result-
ing call stack is a collection of interlaced Java and native
frames. To cope with the ping-pong behavior, Robusta as-
sociates the return information with a native frame so that
when a native frame is popped from the stack the return
information for that frame is used to continue the execution
of the JVM.
j. The method m′
Multiple Java threads.
In the case of multiple Java
threads, each Java thread begins life outside the sandbox
and may pass freely in and out each time it makes a native
call. Therefore, it is possible that multiple Java threads may
be inside the sandbox concurrently. To this end, Robusta
associates a natp structure with a Java thread.4 Since each
thread needs its own stack area while it is in the sandbox,
the natp structure remembers the location of that stack.
Other per-thread information is also in the natp structure.
Lazy allocation of stacks. Each Java thread needs a na-
tive stack in the sandbox. However, not all Java threads
use native methods. Robusta avoids performance penalties
3The wrapper is not strictly necessary, but provides a
convenient way of stringing together calls to dlopen and
OutOfJail.
4The natp structure is used by NaCl to store per-thread
information; Robusta piggybacks on it to store extra infor-
mation.
during Java thread creation by delaying the allocation of a
native stack until the ﬁrst time a thread attempts to en-
ter the sandbox. To create the stack, Robusta calls the
allocate_stack wrapper within the sandbox.
It in turn
calls malloc to reserve a block of memory for the stack.
4.4 Sandboxing JNI calls
As we have discussed, abusive JNI calls may cause in-
tegrity and conﬁdentiality violations. We next explain how
Robusta prevents abusive JNI calls.
The JNI interface pointer. Native methods access JNI
functions through an interface pointer. The interface pointer
points to a location that references a function table, as the
following diagram (Fig 11.3 [17]) displays:
For example, the C syntax “(*env)->f(...)” invokes a
JNI function f through the interface pointer env. Robusta
cannot pass the real interface pointer to native code be-
cause all of the functions in the table are outside the sand-
box (the only way to exit the sandbox is through tram-
polines). Robusta’s solution is to duplicate the interface
pointer structure in the sandbox except that the table of
JNI functions contains pointers to JNI trampolines. Ro-
busta then passes the duplicate structure’s location as a fake
JNI interface pointer to native code. When native code in-
vokes “(*env)->f(...)”, the control is transferred to the
JNI trampoline for f, which jumps outside of the sandbox
and invokes a trusted wrapper. The wrapper calls the real
interface function through the real interface pointer. In this
design, native code still uses the same syntax for invoking a
JNI function. Furthermore, the wrapper provides a natural
place for inserting safety checks that prevent abusive JNI