### Languages and RDF Schemas

When a schema defines a new class, the resource representing that class must have an `rdf:type` property with the value `rdfs:Class`. Any entity described by RDF expressions is referred to as a resource and is considered an instance of the class `rdfs:Resource`. Other key elements of RDFS are illustrated in Figure 9 and described below.

**Figure 9. Relationships between the concepts of RDF Schema**

- **rdfs:Datatype**: This class defines the allowed data types.
- **rdfs:Literal**: This class includes literal values such as strings and integers.
- **rdfs:subClassOf**: A transitive property that specifies a subset-superset relationship between classes.
- **rdfs:subPropertyOf**: An instance of `rdf:Property` used to specify that one property is a specialization of another.
- **rdfs:comment**: A human-readable description of a resource.
- **rdfs:label**: A human-readable version of a resource name, which can only be a string literal.
- **rdfs:seeAlso**: Specifies a resource that might provide additional information about the subject resource.
- **rdfs:isDefinedBy**: A subproperty of `rdfs:seeAlso` indicating the resource defining the subject resource.
- **rdfs:member**: A super-property of all container membership properties.
- **rdfs:range**: Indicates the classes that the values of a property must be members of.
- **rdfs:domain**: Indicates the classes on whose members a property can be used.
- **rdfs:Container**: A collection of resources.
- **rdfs:ContainerMembershipProperty**: A class used to state that a resource is a member of a container.

### Ontologies

An ontology is an agreed-upon vocabulary that provides a set of well-founded constructs to build meaningful higher-level knowledge for specifying the semantics of terminology systems in a well-defined and unambiguous manner. For a specific domain, an ontology represents a richer language for providing more complex constraints on the types of resources and their properties. Compared to a taxonomy, ontologies enhance the semantics of terms by providing richer relationships between the terms of a vocabulary. Ontologies are usually expressed in a logic-based language, allowing detailed and meaningful distinctions among classes, properties, and relations. They can be used to increase communication between humans and computers. The three major uses of ontologies (Jasper and Uschold, 1999) are:

- To assist in communication between humans.
- To achieve interoperability and communication among software systems.
- To improve the design and quality of software systems.

In the previous sections, we established that RDF/S was one of the base models and syntax for the Semantic Web. On top of the RDF/S layer, more powerful languages can be defined to describe semantics. The most prominent markup language for publishing and sharing data using ontologies on the Internet is the Web Ontology Language (OWL 2004). OWL is a vocabulary extension of RDF, derived from the DAML+OIL language (DAML 2001), with the objective of facilitating better machine interpretability of Web content than that supported by XML and RDF. OWL adds a layer of expressive power to RDF/S, providing mechanisms for defining complex conceptual structures and formally describing the semantics of classes and properties used in Web resources, typically using a logical formalism known as Description Logic (DL 2005).

### Limitations of RDF/S

To identify the extensions needed, let's analyze some limitations of RDF/S:

1. **Equivalence Between Properties**: RDF/S cannot express equivalence between properties, which is important for expressing the equivalence of ontological concepts developed by separate working groups.
2. **Uniqueness and Cardinality of Properties**: RDF/S lacks the capability to express the uniqueness and cardinality of properties. In some cases, it may be necessary to specify that a particular property value can have only one value in a particular class instance.
3. **Closed Set of Values**: RDF/S can express the values of a particular property but cannot express that this is a closed set. For example, an enumeration for the values of gender should have only two values: male and female.
4. **Disjointedness**: RDF/S cannot express disjointedness. For example, while it is possible to express that John is a male and Julie is a female, there is no way to say that John is not a female and Julie is not a male.
5. **Unions and Intersections of Classes**: RDF/S cannot express the concept of unions and intersections of classes, which allows the creation of new classes composed of other classes. For example, the class "staff" might be the union of the classes "CEO," "manager," and "clerk," or the intersection of the classes "person" and "organization employee."

### Example of RDF/S Limitations

Consider the sentence: "There are three people responsible for the Web resource 'Jorge Cardoso Home Page' created on July 23, 2005: Web designer, editor, and graphic designer. Each has distinct roles and responsibilities."

Using RDF/S, we could model this statement as follows:

```xml
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:S="http://hr.org/2005/01/14/hr#">
  <S:WebPage rdf:about="Jorge Cardoso Home Page">
    <S:creator>
      <S:Person rdf:about="Jorge Cardoso"/>
    </S:creator>
    <S:creationDate>2005-07-23</S:creationDate>
    <S:responsiblePersons rdf:parseType="Resource">
      <rdf:Bag>
        <rdf:li rdf:resource="Web designer"/>
        <rdf:li rdf:resource="Editor"/>
        <rdf:li rdf:resource="Graphic designer"/>
      </rdf:Bag>
    </S:responsiblePersons>
  </S:WebPage>
</rdf:RDF>
```

In this example, we use the bag container model. RDF containers are restricted to three components: bags, sequences, and alternatives. Bags are unordered lists of resources or literals, sequences are ordered lists, and alternatives represent a list of resources or literals that serve as alternatives for a single property value.

Using any of the three different relationships in RDF, we can explain the information about the resources, but we cannot explain the second part of our statement, i.e., "Each has distinct roles and responsibilities."

Using OWL, we can represent the knowledge associated with the second part of our statement as follows:

```xml
<owl:AllDifferent>
  <owl:distinctMembers rdf:parseType="Collection">
    <rdf:Description rdf:about="Web designer"/>
    <rdf:Description rdf:about="Editor"/>
    <rdf:Description rdf:about="Graphic designer"/>
  </owl:distinctMembers>
</owl:AllDifferent>
```

The `owl:AllDifferent` element is a built-in OWL class, and the property `owl:distinctMembers` links an instance of `owl:AllDifferent` to a list of individuals, indicating that the individuals in the list are all different from each other. This OWL representation can express that the three administrators (Web designer, Editor, and Graphic designer) have distinct roles, which cannot be expressed using RDF, RDFS, or XML.

### Logic, Proof, and Trust

The purpose of this layer is to provide features similar to those found in First Order Logic (FOL). The idea is to state any logical principle and allow the computer to reason by inference using these principles. For example, a university may decide that if a student has a GPA higher than 3.8, then they will receive a merit scholarship. A logic program can use this rule to make a simple deduction: "David has a GPA of 3.9, therefore he will be a recipient of a merit scholarship."

**Inference Engines (Reasoners)**: These are software applications that derive new facts or associations from existing information. Inference and inference rules allow for deriving new data from known data, enabling the addition of new pieces of knowledge based on previous ones. By creating a model of the information and relationships, reasoners can draw logical conclusions based on the model. The use of inference engines in the Semantic Web allows applications to inquire why a particular conclusion has been reached, i.e., semantic applications can provide proof of their conclusions. Proof traces or explains the steps involved in logical reasoning.

For example, with OWL, it is possible to make inferences based on the associations represented in the models, primarily inferring transitive relationships. Many inference engines are available, such as:

- **Jena Reasoner**: Jena includes a generic rule-based inference engine together with configured rule sets for RDFS and OWL. It is an open-source Java framework for writing Semantic Web applications developed by HP Labs.
- **Jess**: Jess is a Java software tool that can "reason" using knowledge supplied in the form of declarative rules. It has a small footprint and is one of the fastest rule engines available, developed at Carnegie Mellon University.
- **SWI-Prolog Semantic Web Library**: Prolog is a natural language for working with RDF and OWL. The developers of SWI-Prolog have created a toolkit for creating and editing RDF and OWL applications, as well as a reasoning package.
- **FaCT++**: This system is a Description Logic reasoner, a re-implementation of the FaCT reasoner, allowing reasoning with the OWL language.

**Trust Layer**: This is the top layer of the Semantic Web architecture, providing authentication of identity and evidence of the trustworthiness of data and services. While the other layers of the Semantic Web stack have received significant attention, research in the trust layer is still limited. The idea is to allow people to ask questions concerning the trustworthiness of the information on the Web. Possible scenarios include making statements like, "I trust all information from http://dme.uma.pt/jcardoso, but I don't trust anything from http://www.internetsite.com."

### Applications of the Semantic Web

Although the Semantic Web is still in its early stages, there are already applications and tools that use this conceptual approach to build Semantic Web-based systems. This section presents the state of the art in applications that use semantics and ontologies, ranging from semantic Web services, semantic integration of tourism information sources, and semantic digital libraries to the development of bioinformatics ontologies.

**Semantic Web Services**: Web services are modular, self-describing, self-contained applications accessible over the Internet. Currently, Web services are described using the Web Services Description Language (WSDL), which provides operational information. Although WSDL does not contain semantic descriptions, it specifies the structure of message components using XML Schema constructs. One solution to create semantic Web services is by mapping concepts in a Web service description (WSDL specification) to ontological concepts. The WSDL elements that can be marked up with metadata include operations, messages, and preconditions and effects, as all elements are explicitly declared in a WSDL description.

**Semantic Tourism Information Systems**: Dynamic packaging technology helps online travel customers build and book vacations by combining elements such as flights, hotels, car rentals, local tours, and tickets to theatre and sporting events. The package is handled seamlessly as one transaction, requiring only one payment from the consumer, hiding the pricing of individual components. The travel industry has focused on developing open specification messages, based on XML, to ensure interoperability between industry segments. For example, the OpenTravel Alliance (OTA) is an organization pioneering the development and use of specifications that support e-business among all segments of the travel industry. It has produced more than 140 XML-based specifications for the travel industry.

However, XML-based specifications, such as OTA schema, are not sufficiently expressive to guarantee automatic exchange and processing of information for dynamic applications. A more appropriate solution is to use technologies from the Semantic Web, such as ontologies, to deploy a common language for tourism-related terminology and a mechanism for promoting seamless information exchange across all travel industry segments. Ontologies are key elements enabling the shift from purely syntactic to semantic interoperability. An ontology can be defined as explicit, formal descriptions of concepts and their relationships within a certain universe of discourse, along with a shared vocabulary to refer to these concepts. With respect to an ontology, a particular user group commits to, the semantics of data provided by the data sources to be integrated can be made explicit. Ontologies can be applied to the area of dynamic packaging to explicitly connect data and information from tourism information systems to their definitions and contexts in machine-processable form.

**Semantic Digital Libraries**: Libraries are a key component of the information infrastructure.