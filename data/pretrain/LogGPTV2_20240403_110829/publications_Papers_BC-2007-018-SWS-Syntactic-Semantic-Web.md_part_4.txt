languages. When a schema defines a new class, the resource representing that class
must have an rdf:type property whose value is the resource rdfs:Class. Anything
described by RDF expressions is called a resource and is considered to be an instance of
the class rdfs:Resource. Other elements of RDFS are illustrated in Figure 9 and
described bellow.
Figure 9. Relationships between the concepts of RDF Schema
• rdfs:Datatype is the class of data types and defines the allowed data types.
• rdfs:Literal is the class of literal values such as strings and integers.
• rdfs:subClassOf is a transitive property that specifies a subset-superset relation
between classes.
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 15
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
• rdfs:subPropertyOf is an instance of rdf:Property used to specify that one
property is a specialization of another.
• rdfs:comment is a human-readable description of a resource.
• rdfs:label is a human-readable version of a resource name and it can only be a
string literal.
• rdfs:seeAlso specifies a resource that might provide additional information about
the subject resource.
• rdfs:isDefinedBy is a subproperty of rdfs:seeAlso and indicates the resource
defining the subject resource.
• rdfs:member is a super-property of all the container membership properties
• rdfs:range indicates the classes that the values of a property must be members
of.
• rdfs:domain indicates the classes on whose member a property can be used.
• rdfs:Container is a collection of resources.
• rdfs:ContainerMemberShipProperty is a class that is used to state that a resource
is a member of a container.
5.5 Ontologies
An ontology is an agreed vocabulary that provides a set of well-founded constructs to
build meaningful higher level knowledge for specifying the semantics of terminology
systems in a well defined and unambiguous manner. For a particular domain, an
ontology represents a richer language for providing more complex constraints on the
types of resources and their properties. Compared to a taxonomy, ontologies enhance
the semantics of terms by providing richer relationships between the terms of a
vocabulary. Ontologies are usually expressed in a logic-based language, so that detailed
and meaningful distinctions can be made among the classes, properties, and relations.
Ontologies can be used to increase communication either between humans and
computers. The three major uses of ontologies (Jasper and Uschold 1999) are:
• To assist in communication between humans.
• To achieve interoperability and communication among software systems.
• To improve the design and the quality of software systems.
In the previous sections, we have established that RDF/S was one of the base models
and syntax for the semantic Web. On the top of the RDF/S layer it is possible to define
more powerful languages to describe semantics. The most prominent markup language
for publishing and sharing data using ontologies on the Internet is the Web Ontology
Language (OWL 2004). Web Ontology Language (OWL) is a vocabulary extension of
RDF and is derived from the DAML+OIL language (DAML 2001), with the objective
of facilitating a better machine interpretability of Web content than that supported by
XML and RDF. OWL adds a layer of expressive power to RDF/S, providing powerful
mechanisms for defining complex conceptual structures, and formally describes the
semantics of classes and properties used in Web resources using, most commonly, a
logical formalism known as Description Logic (DL 2005).
Let’s analyze some of the limitations of RDF/S to identify the extensions that are
needed:
1. RDF/S cannot express equivalence between properties. This is important to be
able to express the equivalence of ontological concepts developed by separate
working groups.
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 16
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
2. RDF/S does not have the capability of expressing the uniqueness and the
cardinality of properties. In some cases, it may be necessary to express that a
particular property value may have only one value in a particular class instance.
3. RDF/S can express the values of a particular property but cannot express that
this is a closed set. For example, an enumeration for the values for the gender of
a person should have only two values: male and female.
4. RDF/S cannot express disjointedness. For example, the gender of a person can
be male or female. While it is possible in RDF/S to express that John is a male
and Julie a female, there is no way of saying that John is not a female and Julie
is not a male.
5. RDF/S cannot express the concept of unions and intersections of classes. This
allows the creation of new classes that are composed of other classes. For
example, the class “staff” might be the union of the classes “CEO”, “manager”
and “clerk”. The class “staff” may also be described as the intersection of the
classes “person” and “organization employee”.
Let us see a more detailed example of RDF/S limitations. Consider the sentence:
“There are three people responsible for the Web resource ‘Jorge Cardoso
Home Page’ created in 23 July 2005: Web designer, editor, and graphic
designer. Each has distinct roles and responsibilities.”
Using RDF/S we could try to model this statement in the following way:
xmlns:S = " http://hr.org/2005/01/14/hr#">
 Jorge Cardoso Home Page 
 Jorge Cardoso 
 2005-07-23 
In this example we have used the bag container model. In RDF, the container model
is restricted to three components: bags, sequence, and alternative. Bags are an unordered
list of resources or literals. A sequence is an ordered list of resources or literals. Finally,
alternative is a list of resources or literals that represent alternatives for the (single)
value of a property.
Using any of the three different relationships in RDF, we are only able to explain the
information about the resources, but we cannot explain the second part of our statement,
i.e. “Each has distinct roles and responsibilities.“
Using OWL, we can represent the knowledge associated with the second part of our
statement as shown bellow.
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 17
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
The owl:AllDifferent element is a built-in OWL class, for which the property
owl:distinctMembers is defined, which links an instance of owl:AllDifferent to a list of
individuals. The intended meaning of such a statement is that the individuals in the list
are all different from each other. This OWL representation can express that the three
administrators (Web designer, Editor, and Graphic designer) have distinct roles. Such
semantics cannot be expressed using RDF, RDFS, or XML.
5.6 Logic, Proof, and Trust
The purpose of this layer is to provide similar features to the ones that can be found in
First Order Logic (FOL). The idea is to state any logical principle and allow the
computer to reason by inference using these principles. For example, a university may
decide that if a student has a GPA higher than 3.8, then he will receive a merit
scholarship. A logic program can use this rule to make a simple deduction: “David has a
GPA of 3.9, therefore he will be a recipient of a merit scholarship.”
Inference engines, also called reasoners, are software applications that derive new
facts or associations from existing information. Inference and inference rules allow for
deriving new data from data that is already known. Thus, new pieces of knowledge can
be added based on previous ones. By creating a model of the information and
relationships, we enable reasoners to draw logical conclusions based on the model. The
use of inference engines in the semantic Web allows applications to inquire why a
particular conclusion has been reached, i.e. semantic applications can give proof of their
conclusions. Proof traces or explains the steps involved in logical reasoning.
For example, with OWL it is possible to make inferences based on the associations
represented in the models, which primarily means inferring transitive relationships.
Nowadays, many inference engines are available. For instance:
• Jena reasoner – Jena includes a generic rule based inference engine together with
configured rule sets for RDFS and for OWL. It is an open source Java framework
for writing semantic Web applications developed by HP Labs (Jena 2005).
• Jess – Using Jess (Gandon and Sadeh 2003) it is possible to build Java software
that has the capacity to “reason” using knowledge supplied in the form of
declarative rules. Jess has a small footprint and it is one of the fastest rule engines
available. It was developed at Carnegie Melon University.
• SWI-Prolog Semantic Web Library – Prolog is a natural language for working
with RDF and OWL. The developers of SWI-Prolog have created a toolkit for
creating and editing RDF and OWL applications, as well as a reasoning package
(Wielemaker 2005).
• FaCT++ – This system is a Description Logic reasoner, which is a re-
implementation of the FaCT reasoner. It allows reasoning with the OWL
language (FaCT 2005).
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 18
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
Trust is the top layer of the Semantic Web architecture. This layer provides
authentication of identity and evidence of the trustworthiness of data and services.
While the other layers of the semantic Web stack have received a fair amount of
attention, no significant research has been carried out in the context of this layer. The
idea is to allow people to ask questions concerning the trustworthiness of the
information on the Web. Possible scenarios for the trust layer include the possibility to
make statements such as “I trust all information from http://dme.uma.pt/jcardoso, but I
don’t trust anything from http://www.internetsite.com”.
6 Applications of the semantic Web
Even though the Semantic Web is still in its infancy, there are already applications and
tools that use this conceptual approach to build semantic Web based systems. The
intention of this section is to present the state of the art of the applications that use
semantics and ontologies. We describe various applications ranging from the use of
semantic Web services, semantic integration of tourism information sources, and
semantic digital libraries to the development of bioinformatics ontologies.
Semantic Web services. Web services are modular, self-describing, self-contained
applications that are accessible over the Internet (Curbera, Nagy et al. 2001). Currently,
Web services are described using the Web Services Description Language (Chinnici,
Gudgin et al. 2003), which provide operational information. Although the Web Services
Description Language (WSDL) does not contain semantic descriptions, it specifies the
structure of message components using XML Schema constructs. One solution to create
semantic Web services is by mapping concepts in a Web service description (WSDL
specification) to ontological concepts. The WSDL elements that can be marked up with
metadata are operations, messages, and preconditions and effects, since all the elements
are explicitly declared in a WSDL description.
Semantic Tourism Information Systems: Dynamic packaging technology helps online
travel customers to build and book vacations. It can be described as the ability for a
customer to put together elements of a (vacation) trip including flights, hotels, car
rentals, local tours and tickets to theatre and sporting events. The package that is created
is handled seamlessly as one transaction and requires only one payment from the
consumer, hiding the pricing of individual components. So far, the travel industry has
concentrated its efforts on developing open specification messages, based on XML, to
ensure that messages can flow between industry segments as easily as within. For
example, the OpenTravel Alliance (OTA 2004) is an organization pioneering the
development and use of specifications that support e-business among all segments of
the travel industry. It has produced more than 140 XML-based specifications for the
travel industry.
The development of open specification messages based on XML, such as OTA
schema, to ensure the interoperability between trading partners and working groups is
not sufficiently expressive to guarantee an automatic exchange and processing of
information to develop dynamic applications. A more appropriate solution is to use
technologies from the semantic Web, such as ontologies, to deploy common language
for tourism-related terminology and a mechanism for promoting the seamless exchange
of information across all travel industry segments. Ontologies are the key elements
enabling the shift from a purely syntactic to a semantic interoperability. An ontology
can be defined as the explicit, formal descriptions of concepts and their relationships
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 19
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
that exist in a certain universe of discourse, together with a shared vocabulary to refer to
these concepts. With respect to an ontology a particular user group commits to, the
semantics of data provided by the data sources to be integrated can be made explicit.
Ontologies can be applied to the area of dynamic packaging to explicitly connect data
and information from tourism information systems to its definition and context in
machine-processable form.
Semantic digital libraries. Libraries are a key component of the information