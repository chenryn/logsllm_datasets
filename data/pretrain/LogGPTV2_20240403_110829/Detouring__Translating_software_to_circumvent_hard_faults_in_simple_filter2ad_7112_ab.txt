registers is faulty, the Detour will tolerate the fault but 
it will necessarily break the ABI and will thus require 
recompilation of all software, including libraries. 
Most  single  faults  in  the  register  ﬁle  (e.g.,  faulty 
SRAM cell) will render a single register unusable, but 
certain faults could also disable multiple registers. For 
example, a coupling fault (short circuit) could cause a 
bit of one register to always equal a bit in another regis-
ter  or  a  fault  in  the  wordline  decoder  could  cause 
accesses to both register K and register K+1 to access 
register K+1. In the case of multiple broken registers,
as with a single faulty register, we can provide Detours 
by not allocating any of the faulty registers. However, 
the performance of the resulting software may suffer if 
too few registers are usable. Faults that break all avail-
5
e
d
o
C
O
l
a
n
g
i
r
i
foo:
bar:
l.addi  r1,r1,-4
l.sw    0(r1),r2
l.addi  r2,r1,4
l.mul   r11,r3,r4
l.lwz   r2,0(r1)
l.jr      r9
l.addi  r1,r1,4
l.addi  r1,r1,-4
l.sw    0(r1),r2
l.addi  r2,r1,4
l.addi  r4,r0,11        
l.mul   r11,r3,r4
l.lwz   r2,0(r1)
l.jr    r9
l.addi  r1,r1,4
e
d
o
C
d
e
r
u
o
t
e
D
foo:
l.addi  r1,r1,-4
l.sw    0(r1),r2
l.addi  r2,r1,4
l.mul   r11,r3,r4
l.jmp   L100
l.lwz   r2,0(r1)
L100:
bar:
l.jr      r9
l.addi  r1,r1,4
l.addi  r1,r1,-4
l.sw    0(r1),r2
l.jmp   L101
l.addi  r2,r1,4
L101:
l.addi  r4,r0,11        
l.mul   r11,r3,r4
l.lwz   r2,0(r1)
l.jr    r9
l.addi  r1,r1,4
jmp
jmp
Addresses mapping to faulty set
Figure 4.
Detour for I-Cache Faults
able  registers,  including  faults  in  sense  amps  and  bit 
lines, cannot be tolerated by this approach. 
4.3.  Instruction Cache Detours
The fault model for the instruction cache (I-cache) is 
quite similar to that of the register ﬁle, because they are 
both SRAM storage structures. A fault can either lead 
to one faulty block, multiple faulty blocks, or a situa-
tion in which the entire I-cache is unusable. 
As with the register ﬁle, we have developed Detours 
for those faults that do not disable the entire I-cache. 
The key to the I-cache Detours is to pad the code such 
that  faulty  blocks  in  the  I-cache  are  not  used  (see 
Figure
4).  This  padding  is  performed  by  the  linker, 
which avoids addresses that map to a faulty cache set 
when  placing  instructions.  To  keep  the  core  from 
touching faulty sets, the linker inserts an unconditional 
jump  right  before  each  potentially  faulty  block.  To 
determine  which  instructions  will  map  into  the  faulty 
cache lines, the linker must control where the code is 
loaded into memory. In most formats for binary execut-
ables, such as ELF and COFF, sufﬁcient control is pro-
vided through speciﬁcation of alignment constraints.
4.4.  Operand Bypass Network Detours
Pipelined  microprocessors  bypass  the  result  of  an 
instruction to consumer instructions that are in earlier 
stages  of  the  pipeline.  The  operand  bypass  network 
consists of the wires and multiplexors that provide this 
capability, and faults could occur in this hardware. The 
OR1200 has two bypassing paths: from Execute (EX) 
to Execute and from Writeback (WB) to Execute.
We  provide  Detours  by  scheduling  instructions  and 
inserting  NOPs  into  the  code  such  that  faulty  bypass 
paths  are  not  exercised.  The  NOPs  degrade  perfor-
Before
bf FOO # branch on condition flag
nop # delay slot
After
movhi rX, hi(FALLTHROUGH#K)
ori rX, rX, lo(FALLTHROUGH#K)
addi rY, rX, FOO-FALLTHROUGH#K
cmov rY, rY, rX
jr rY
nop # delay slot
FOO_RETURN#K:
Figure 5.
Conditional Branch Emulation
mance, with respect to a fault-free processor, but they 
ensure correct execution. 
It  is  possible  that  forwarding  works  for  one  of  the 
two  operands  (left  or  right)  but  not  the  other.  In  this 
case, we could provide a Detour for associative instruc-
tions  by  simply  switching  the  operands.  We  have  not 
yet implemented this feature.
some  decoder  faults  may  cause  only  one  control  sig-
nals for certain operation to get corrupted (e.g., oper-
and  routing  for  all  multiply  instructions).  Many  of 
these  faults  can  be  tolerated  with  Detours  we  have 
already described, because they allow us to avoid the 
affected operations. Second, some pipeline latch faults 
can be tolerated with previously described Detours. An 
example would be a fault in the latch holding a register 
identiﬁer;  a  fault  in  the  most-signiﬁcant  bit  could  be 
tolerated by conﬁguring our register Detour to allocate 
only half of the available registers.
4.7.  Combining Multiple Detours
If the processor has multiple hard faults, we can use 
multiple Detours. In general, Detours compose. How-
ever, if a given Detour uses hardware that is also faulty, 
then Detouring will not work. For example, the 16x16 
and 16x8 multiplier Detours use the shifter and adder. 
If  either  the  adder  or  shifter  is  faulty,  these  Detours 
cannot be used to tolerate multiplier faults.
4.5.  Jump/Branch Detour
4.8.  Faults Currently Without Detours
RISC  processors  typically  support  three  types  of 
jumps or branches: conditional direct branches, uncon-
ditional  direct  jumps,  and  unconditional  register-indi-
rect jumps. We can emulate unconditional direct jumps 
by loading the target address into a register and using a 
register indirect jump for the control transfer. On sys-
tems that support conditional moves or predication, we 
can  emulate  conditional  branches  similarly,  as  shown 
in Figure
Register-indirect jumps can be replaced with a deci-
sion  tree  implemented  using  conditional  branches,  in 
some cases (e.g., switch statements). However, a gen-
eral  Detour  would  require  self-modifying  code  that 
patches an unconditional jump before every invocation, 
similar  to  the  trampolines  used  previously  in  runtime 
binary  patching  [4].  The  effectiveness  of  this  Detour 
depends highly on the speciﬁc processor and the imple-
mentation of its memory system. 
5.
As we show in Section
6, the set of Detours we have 
presented is capable of covering roughly 42.5% of the 
possible  hard  faults  in  the  OR1200  core  (excluding 
caches).  We  now  discuss  the  reasons  why  our  set  of 
Detours does not cover the remaining 57.5%.
Feasible Future Work. The  biggest  potential 
for 
future Detours does not lie within the core, but within 
the data cache. The D-cache is by far the single largest 
structure  currently  without  a  Detour.  Our  attempts  at 
providing a Detour for the D-cache using only compi-
lation changes have been unsuccessful so far. All of our 
attempts  required  speciﬁc  hardware  support,  such  as 
the ability to enable and disable the data cache quickly 
under user control or the presence of instructions to pin 
or  invalidate  cache  lines.  In  future  work,  we  plan  to 
investigate  mechanisms  that  can  avoid  faulty  data 
cache  sets  by  using  a  combination  of  changes  in  the 
compiler, OS, and memory allocation routines.
4.6.  Coincidental Detours
Some of the Detours we have already described can 
also  be  used  to  tolerate  hard  faults  in  portions  of  the 
core other than their intended targets. We refer to such 
Detours as Coincidental Detours, and we now provide 
two examples.
First,  faults  in  the  instruction  decoding  logic  can 
manifest  themselves  in  many  ways.  Some  faults  may 
hopelessly  corrupt  decoder  outputs—pipeline  control 
signals, opcode, operand identiﬁers, etc.—in a way that 
cannot be efﬁciently tolerated with a Detour. However, 
Within the core, there are some faults for which we 
believe efﬁcient Detours exist, but we have not yet had 
time to implement them. Examples are faults in the PC 
generation  logic  (branches  and  jumps)  and  certain 
faults in the instruction decoding logic; a decoder fault 
that corrupts the immediate ﬁeld could be tolerated by 
a Detour that uses an instruction to ﬁx the immediate. 
Unacceptable Performance. There are other faults for 
which Detours exist but they would be too detrimental 
to performance. As mentioned earlier, the majority of 
faults in an adder cannot be efﬁciently tolerated. 
6
Impossible. A  large  portion  of  the  processor  core  is 
not salvageable using recompilation, because it is com-
pletely outside software control. Notable examples are 
the  exception  generation  circuitry,  most  pipeline  con-
trol  logic,  instruction  fetch  unit,  and  portions  of  the 
datapath not used for bypassing. This logic puts a fun-
damental  upper  bound  on  Detours  error  coverage. 
Determining  its  portion  of  the  total  logic  is  difﬁcult, 
but we estimate it to be at least 40%-45%. 
5.  Compiler Implementation Details
For our evaluation, we implemented Detouring in the 
1
OpenRISC  [10]  backend  of  GCC  3.4.4  [21].  Table
provides a list of the Detours implemented in the com-
6. We did not implement 
piler and evaluated in Section
all  Detours  described  in  Section
4,  because  it  is  not 
cost-effective, in terms of development effort, to create 
Detours that cover only a negligible fraction of possi-
ble  faults  or  incur  prohibitive  performance  penalties. 
However, we presented them in Section
4 because they 
may be useful for other cores. 
The exact compiler changes required and the compi-
lation stage during which they are executed depend on 
the  Detour.  Detours  for  general  purpose  registers, 
described in Section
4.2, are implemented by modify-
ing  register  deﬁnitions  such  that  broken  registers  are 
never  used  by  the  compiler.  Operand  bypass  Detours 
(Section
4.4)  are  realized  during  instruction  schedul-
ing.  They  are  implemented  by  either  re-ordering  the 
Table 1. Summary of Implemented Detours
name
faulty 
functionality
mul_AxB multiplication
mul_shift multiplication
div
sext
shl/shr/shift
division
sign extension
left/right/both 
shifting
K_regs
K general pur-
pose registers
icache_K K blocks in  
link_reg
exbyp
wbbyp
I-cache
link reg (r9)
bypass from 
EX to EX
bypass from 
WB to EX
short description
use fault-free AxB multi-
plication
use shifts and additions
use shifts and subtractions
use shifts and masks
use shr/shl/table to com-
pute shift amount, then 
multiply
do not allocate K faulty 
registers
pad code to avoid using 
faulty I-cache blocks
use other reg for linking
insert NOP to avoid this 
operand bypassing
insert NOP to avoid this 
operand bypassing
7
code or, if that fails, inserting NOPs during a ﬁnal code 
organization pass before assembly code is output. 
Functional  unit  and  branch  Detours  (Sections  4.1
and  4.5)  are  inserted  into  the  code  in  three  separate 
places. First, complex Detours, such as multiplication, 
are added to the GCC library (libgcc), which is linked 
to every compiled program by default. Second, shorter 
Detours, such as constant shifts, are inserted during the 
translation  from  a  parse  tree  to  RTL.  Third,  simple 
Detours,  such  as  the  link  register  Detour,  are  created 
during the translation from RTL to assembly language. 
Finally,  the  I-Cache  Detour  is  implemented  in  the 
linker as described in Section
4.3.
All Detours are controlled using command line ﬂags 
during the compiler invocation. Our modiﬁcations have 
no impact on code generation unless they are explicitly 
enabled using these ﬂags.
6.  Experimental Evaluation
The ultimate goal of our experimental evaluation is 
to determine how much Detouring improves the chip’s 
aggregate throughput in the presence of hard faults. 
To  better  understand  the  throughput  results  (pre-
6.3), we ﬁrst evaluate the fault cover-
6.1)  and  the 
sented in Section
age  of  this  set  of  Detours  (Section
performance of a core with each Detour (Section
6.2).
6.1.  Fault Coverage
To  test  Detouring’s  fault  coverage,  we  combined 
analytical evaluation with error injection experiments. 
For  SRAM  structures,  such  as  the  register  ﬁle  and  I-
cache, which have a regular well-known structure, we 
analytically  determined  the  percentage  of  repairable 
faults.  For  all  other  hardware,  we  performed  5000 
experiments  in  which  we  injected  a  different  single 
hard fault in the structural, gate-level Verilog design of 
the  OR1200  core.  The  OR1200  consists  of  roughly 
25000 gates, excluding the register ﬁle. Each hard fault 
caused  the  output  of  one  randomly-chosen  gate  to  be 
stuck-at either zero or one, and the effect of each single 
fault  can  propagate  to  numerous  downstream  latches. 
For  each  injected  hard  fault,  we  ran  a  diagnosis 
microbenchmark  that  compares  the  outcome  of  rou-
tines  that  use  Detourable  hardware  to  routines  imple-
mented  with  the  corresponding  Detour.  A  Detour  is 
considered  successful  if  (a)  the  corresponding  hard-
ware causes failures, (b) the Detour works correctly for 
all inputs, and (c) all tests not related to the Detour or 
the Detoured hardware also succeed. 
Core Coverage. We  observe  that  Detouring  covers 
42.5% of the possible hard faults in the processor core
(including the register ﬁle but excluding caches). The 
9
3
.
2
2
9
.
3
8
7
0
1
.
2
8
.
1
7
6
.
1
e
m
i
t
n
u
R
d
e
z
i
l
a
m
r
o
N
1.4
1.2
1.0
0.8
m
m
m
div
s
e
xt
s
hl
s
h
r
s
hift
s
m
ld
s
m
st
ul_
ul_
1
6
x
1
6
ul_
s
1
6
x
8
hift
max
3rd quart
median
1st quart
min
1
6
re
g
s
ic
a
c
ic
a
c
ic
a
c
ic
a
c
ic
a
h
e
1
h
e
2