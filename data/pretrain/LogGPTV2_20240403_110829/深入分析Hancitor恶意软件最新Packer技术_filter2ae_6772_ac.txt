例如，密钥流值的前四个字节为0x58, 0x58, 0xF2和0xEA。首先将他们拼接成0xEAF25858。然后进行模运算:
    0xEAF25858 % 0x5C36 = 0x5200
此结果会作为第二个双字S盒的索引。接下来找到索引所指向的值并将其存储到第三块内存区域，每次偏移量加4。最后，他会交换在第二块内存区域找到的值与在第二个S盒中根据索引找到的值。  
在本次示例中，第三块内存区域的首个双字值为0x5200。所以它将第二块内存区域偏移量为0x5200处的值与计数值进行交换，即为0x5C35（4字节递减）。偏移量为0x5C35处的值也就变成了0x5200。  
此过程一直持续到外循环结束，一旦完成，它将分配另一个内存区域，用于存放从主程序地址为0x401000处开始向后0x5C36个字节的内容。  
好的，如果你坚持看到了这里。我想传达的就是，上述所有内容就是在创建一个详细的双字偏移量表，用作索引，定义了如何将数据还原回去，也是最终下面要发生的事情。  
对于在新内存区域内的每一个字节，也就是地址范围从0x401000-0x406C36复制过来的数据。它会从0x401000开始迭代，每一个加上其相应的双字值，然后复制该字节。提醒一下，在此复制过去的数据与最初调用三次memcpy()移动的数据相同。  
如前所述，第三个内存区域的首个双字内容是0x5200，且0x401000处的第一个字节是0x8B，因此在0x406200（0x401000 +
0x5200）处其值为0x8B。没有改变任何字节值，这是在标准的RC4算法中所实现的，只是将他们重新排列成他们各自的顺序。  
为了帮助理解上述内容，下面给出上述算法的python版本。为了节省空间，我将数据删除了，可以在[Github](https://github.com/pan-unit42/public_tools/blob/master/hancitor/hancitor_offsetgen.py)上找到完整版。
    def sbox1init():
        return [x for x in range(0, 0x100)]
    def sbox2init():
        return [x for x in range(0, 0x5C36)]
    def rc4ksa(sbox1, key):
        oldValue = 0x0
        for counter in range(0, len(sbox1)):
            addValue = key[counter % len(key)]
            fnlValue = (oldValue + addValue + sbox1[counter]) % 0x100
            sbox1[fnlValue], sbox1[counter] = sbox1[counter], sbox1[fnlValue]
            oldValue = fnlValue
        return sbox1
    def offsetGen(sbox1, sbox2):
        offsetTable = []
        innerCount = 1
        oldValue = 0x0
        for counter in range(len(sbox2), 0, -1):
            fnlValue = ""
            for x in range(0, 4):
                innerIdx = innerCount % len(sbox1)
                oldValue = (sbox1[innerIdx] + oldValue) % 0x100
                addValue = (sbox1[oldValue] + sbox1[innerIdx]) % 0x100
                sbox1[innerIdx], sbox1[oldValue] = sbox1[oldValue], sbox1[innerIdx]
                fnlValue = "%02X" % sbox1[addValue] + fnlValue
                innerCount += 1
            fnlValue = int(fnlValue, 16) % counter
            offsetTable.append(sbox2[fnlValue])
            sbox2[fnlValue], sbox2[counter-1] = sbox2[counter-1], sbox2[fnlValue]
        return offsetTable
    def unshuffle(data, offsetTable):
        unshuffle = [0x0] * len(offsetTable)
        data = [data[x:x+2] for x in range(0, len(data), 2)]
        for counter, entry in enumerate(offsetTable):
            unshuffle[entry] = chr(int(data[counter], 16))
        return "".join(unshuffle)
    key = [0x82, 0xEF, 0x3D, 0x3C, 0x5D, 0x53, 0xC8, 0xE8, 0x51, 0x8D, 0xFB, 0xD9, 0xD0, 0x23, 0x1B, 0x14]
    data = ""
    offsetTable = offsetGen(rc4ksa(sbox1init(), key), sbox2init())
    data = unshuffle(data, offsetTable)
大功告成，在完成整个脱壳算法后，你就会在Hancitor恶意软件中看到熟悉的字符串了。
## 十、Hancitor
在执行回主程序之前，他们通过调用OutputDebugStringA()函数来检查程序是否处于被调试状态。在检查通过后，他就会开始执行在0x404000处的代码。  
我不会再花费太多时间在Hancitor的各种功能上了，因为实在是太多。下面这些是本次特定样本实现的功能。
>   * 获取操作系统版本
>   * 获取适配器地址
>   * 获取 Windows目录
>   * 获取音量信息
>   * 利用api[.]ipify[.]org检查外网IP
>
在完成收集它所需要的信息后，会根据你的计算机架构是x86还是x64，按照以下格式，通过POST发往Hancitor的C2网址。
按照参数内容将收集到的信息填充后，变成如下形式:
## 十一、C2地址
回到我深入研究这个问题的原因，是因为我在过去的俩年里一直在维护一个[Hancitor decoder](https://github.com/pan-unit42/public_tools/blob/master/hancitor/h_decrypt.py)。对于每一种其新出现的变种，我都试着找到一种方法来找到Hancitor的C2网址，以便对其快速识别并加以防范。对于本文中的变种，即使经过了上述所有的脱壳过程，我依然没有找到其C2网址。  
为了解决这一问题，我们必须进一步深入研究代码。在脱壳得到的shelllcode的0x402b51处，我们发现了其调用了一系列Windows解密函数，用来解密一组加密数据。将其解密得到了Hancitor的C2
URL’s。
>   * CryptAcquireContextA
>   * CryptCreasteHash
>   * CryptHashData
>   * CryptDeriveKey
>   * CryptDecrypt
>   * CryptDestroyHash
>   * CryptDestroyKey
>
在这里使用的算法是SHA1以及RC4加密。它使用一个8字节的值（0xAAE8678C261EC5DB）来派发SHA1密钥，然后解密0x2000字节内容。
上述解密出的内容第一部分是与攻击日期相关的代码。在本次示例中，日期为1月24日。随后是三个Hancitor C2网址。
## 十二、总结
在Hancitor不断发展的过程中，他们一直都在坚持一个相当严格的模板。本次的示例实际上很大程度上地偏离了他们之前的模板。我们也只是在他们回退回使用其他或者更老变种之前的这一场攻击中看到其应用本次示例。这可能是由于它的加壳方式被更加频繁地检测了出来或者由于一些其他原因导致其感染率降低，从而使得他们不再采用这种方法了。无论如何，最重要的还是继续跟踪其攻击行为记录他们所使用的新技术、策略。
## 十三、IOCs
**Hancitor Gates**
>   * hxxp://naveundpa[.]com/ls5/forum[.]php
>   * hxxp://undronride[.]ru/ls5/forum[.]php
>   * hxxp://dingparjushis[.]ru/ls5/forum[.]php
>
**User-Agent**
>   * Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like
> Gecko
>