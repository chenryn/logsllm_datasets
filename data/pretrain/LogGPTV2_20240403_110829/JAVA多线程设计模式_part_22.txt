publie String tostringi) l
public void execute() {
public Request(String name, int number) {
private static final Random random = new Random();
private final int number;//请求编号
private final String name;
System.out.println(Thread.currentThread().getName{)
this.number = number;
this.name = name;
try 
catch (InterruptedException e){
lcatch (InterruptedException e) {
 Thread.sleep(random.nextInc(loo0)l;
表示工作请求的Request类（Request.java）
Thread.sleep(random.nextInt (l000));
channel.putRequest(request];
Worker Thread-
1/委托者
等到工作来，来了就工作
+
8章
---
## Page 220
数组的大小由 thread 定义：
WorkerThread 的数组。构造器会初始化threadPool，并建立出WorkerThread的实例，
Suspension Pattern（第3 章）。
取出请求时，
队列的方式存储请求。要将请求放进队列里，必须使用 putRequest 方法，要从队列
Channel 类
（第5章），而 putRequest 方法'j takeRequest 方法的实现上，还用到了Guarded
startWorkers方法川来启动所有的I人线程。
工人线程各白命名成Worker-0、Worker-1、Worker-2、.…。
Channel类拥有requestQueue 字段，用来接受、传送工作请求。这个字段会
public class Channel {
Channel类（List 8-4）可用来接受，
List 8-4
public Channel(int threads) （
private final WorkerThread[] threadPool;
private int count; 
private int tail;
private final Request[] requestQueue;
private static final int. MAX_REQUEsT = 100;
private
for （int i = O: i = requestQueue.length) {
for (int i = 0; i < threadPool.length; i++) ↑
returr. request;
notifyAll();
count--;
head = (head + l)  requestQueue.length;
Request
notifyAll();
count++;
tail = (tail + l)  requestQueue.length;
requestQueue[tail] = request;
try l
try l
threadPool[i].start{};
catch (1nterruptedException e)
catch (InterruptedException e) {
wait();
 waiti) 
request = requestQueue[head]:
Worker Thread-
一等到工作来，来了就工作
算8
205
---
## Page 222
是Worker-3执行的，No.2则是 Worker-2执行的。
Alice 送出的请求 No.0 虽然是 Worker-0 执行的，但同样是 Alice所送出的 No.1，却
WorkerThread，会分担执行 Alice、Bubby、Chris 等3个 ClientThread 传来的请
让白己进行。WorkerThread并不知道请求具体的内容（显示字符串的工作），
要启动新的线程。
程。但在Worker Thread Patterm 中，工人线程会不断地重复执行新工作，所以不需
Request 实例，并调用execute 方法”
式做到的：
206
求。
WorkerThread的字段只有一个channel（Chaunel 的实例），用来获取工作请求
上人线程不会理会请求是谁送出的，只管执行收到的请求。
送出请求的ClientThread与执行诸求的 WorkerThread之间并没有固定的关系。
Thread-Per-Message Pattern（第7章）中，是在每次执行工作的时候启动新的线
1人线程启动后，就会永远不停地持续工作。也就是说不断重复“获取新的
●使用 takeRequest 方法，从 Channel 的实例获取1个 Request 的实例；
执行范例程序，可得到类似图8-3的结果。Worker-0～Worker-4等5个
public class WcrkerThread extends Thread {
·调用这个实例的execute 方法。
List 8-5
public void run()
public Workerrhread(String name, Channel channel) (
private final Channel channel;
while (true){
:(aweu} radns
this.channel = channel;
request.execute();
Request reguest = channel.takeRequest (l;
工人线程 WorkerThread （WorkerThread.java)
---
## Page 223
据。范例程序中，Request 参与者是Request 类。
Request（请求）参易者
WorkerThread 类.
工作结束以后，会去拿取下·个 Request 参与者。范例程序中，Worker 参与者是
范例程序中，Channel 参与者是Channel类。
Channel（通路）参与者
参与者是ClientThread 类。
Client（委托人）参局者
Worker（工人）泰易者
Worker 参与者会从 Channel 参与者获取 Request 参与者，并执行这份【作。当
Worker Thread Pattern 的所有参与者
Request 参与者用来表示I作。Request 参与者会存放执行这份工作所需要的数
Channel参与者会从Client 参与者获取 Request 参与者，传给 Worker 参与者。
Clicnt 参与者会建立 Request 参与者，传给Channel 参与者。范例程序中，Client
Worker Thread Pattern 的类图如图 8-4和时序图如图 8-5所示。
Worker Thread Pattem 的所有参与者如下：
(CTRL+C 结束程序)
Worker-2 executes [ Request from Alice No.2 ]
Worker-l executes
Worker-l executes
Worker-4 executes
Worker-3 executes
Worker-2 executes
Worker-l executes
Worker-0 executes I Request. from Alice No.0 ]
I Request from Bobby No.0 ]
[Request
Reolest
 Request
Request
Request
from Bobby No.2 1
from Chris No.0]
from
from Bobby No.1 1
from Alice No.1 ]
图8-3执行范例
Worker Thread-
1 Chris No.l ]
Worker-2执行Alice的请求No.2
Worker-1执行Bobby的请求No.2
Worker-1 执行Chris的请求No.1
Worker-1执行Bobby的请求No.0
Worker-O执行Alice的请求No.O
Worker-4执行Bobby的请求No.1
Worker-3执行Alice的请求No.
Worker-2执行chris的请求No.0
一等到工作来，来了就工作
8章
0
---
## Page 224
00
channel
ClientThroad
Re
uc的实例：
图
图 8-4 Worker Thread Pattern 的类图
Crea
 Puts request #
图 8-5Worker Thread Pattern 的时序图
execute
argumentB
takeReguest
putReguest
threadpool
requestqueue
rgunentA
Requ+4t
Chtnel
Contains 
Takes
Creates and pools?
取得Request的实例·语用
requ
execute
---
## Page 225
了--些超过 Worker 参与者处理能力的工作时，Channel 参与者中的 Request 参与者
完成工作时，Channel 里“堆放的”Request 参与者理应不会大幅增加。但如果进来
 Request 参与者的数量
性变化：
必要配合软件实际的需要，调整Worker参与者的数量。
Worker参与者既不上作，只会占用内存，提高承载量，会增加消耗的资源。所以有
参与者数量比同时间的工作量来的多，有些 Worker 参与者也派不上用场。多余的
实例。
的构造器参数threads就是设置1.人线程数量，会建立出threads 个WorkerThread的
Worker 参岛者的数量
服务量）的控制。
控制承载量
资源再利用也作为主题之一：
如果可以把工作交给其他线程，自己就可以继续前进到下一个亡作。这是
启动线程是繁重的操作
Worker 参与者的数量，并不--定要在程序启动时决定，也可以像下面这样机动
扩展思考方向的提示
Channel 参与者中存放了Request 参与者。当Worker 参与者能不断--件接一件
提高Worker参与者的数量，可以提高并发处理的工作量。但如果准备的Worker
就如范例程序所示，Worker参与者的数量可以自由的设置。范例程序中，Channel
Worker Thread 还有--个主题。就是承载量（capacity：容量、同时可以提供的
可是，启动线程是很花费时间的工作。所以，Worker Thread 将重复使用线程、
·最先从某个一定量的Worker参与者开始：
如果可以把自已的工作交给别人做，
当I作量增加时，增加Worker参与者：
相反地，工作减少时（也就是待命中的 Worker 参与者增加时），就结束掉--
些Worker参与者：
不过增加太多会用完内存，所以到达某个上限要停止增加：
Worker Thread
：自己就可以去做其他事情。线程也一样。
一等到工作来，来了就工作
潮8草
209
---
## Page 226
完
控制实行顺序
时间，invocation 可以继续白己前进，这样能提高程序的响应性。
操作也会受到牵累。但如果将invocation与execution事先分离，即使execution花
提高响应性
的分离，也是Command Pattem（参考附录E[GoF][Yukioi]）的主题：
的操作则叫做 execution（动词是 execute）。Worker Thread Pattern 与 Thread-Per-Message
方法”的部分。
参与者，进行实际的操作，这个部分，对普通的调用方法来说，可以对应到“执行
操作则大致对应到“传给Channcl参与者”
法”的操作。“评估自变量”的操作对应到“建立Request参与者”，“启动方法”的
M
方法的启动与执行分F。启动方法的操作叫做invocation（动词是invoke），执行方法
Channel参与者。这个部分，对普通的调用方法来说，就是“评估自变量、启动方
用方法”有仆么不同，
invocation 与 execution 的分离
Pattern（第5章）山现过的课题。
参与者的处理速度差。可是，如果存储太多Request，也会占用大量的内存资源。所
的 putRequest 里的线程wait‘了：
参与者的 Client 参与者反而需要停下来等待了。以范例程序米说，就是 Channel类
可能就会塞满。当 Channel参与者被塞满时，要传送新的 Request 参与者给 Channel
另一-方面，Worker 参与者会进行I作。使用从Channel参与者拿来的 Request
Clieat 参与者会送出I:作的请求：上作的内容以 Request 的形式包装起来，传给
如果 invocation与 execution 无法分离，
那么，我们要讨论的是，分离invocation与 execution这件事又具有什么意义。
增加Channel参与者可存放的 Request参与者数，可缓冲Client参与者与Worker
但，
如果invocation与jexecution无法分离，一旦 invoke 出来，就必须直接把它execute
就会马上继续执行。普通的调用方法操作中，启动与执行是密不可分的。
普通的调川方法操作，“启动方法”与“执行方法”是连续进行的。当方法一调
接下来我们在这里尝试比较Worker Thread Patterm 的“工作请求”，与普通的“调
如果将 invocation与j execution 分离，execute 的顺序就可以与 invoke 的次
，execution 很花时间时，invocation的
---
## Page 227
调用execute力法而已。
多态的 Request 参与者
式，再传给 invokeLater：
invokeLater方法，就可说是这个实例。将想要进行的工作包装成Runnabie 对象的形
[GoF][LYuki01]）中的 Command 参与者。这--章的进阶说明中将要说明的 Swing 的
至存进文件耻。而这样－-个 Runnable 对象可以经过多次传来传去，最后传到某台计
方法。但Runnable接口的使用方式不止这一种。
对象传进Thread类的构造器里，这个新启动的线程，就会调用 Runnable对象的run
将它传给Channel参与者，“这件.工作拜托你啰”。
也就是说，建立·-个实现Rumnable接口的类的实例，作为表达工作内容的对象，并
Runnable接口的意义
算机的某条线程，才真正交付执行。
对象”
两部计算机上执行：相当于Request 参与者的对象，可通过网络传送到另一台计算机。
分散处理的第一步
来，就可以做到重复execute，
execution取消”的功能。
可取消和可重复执行
传递 Request 参!与者给 Worker 参与者的顺序。
序无关。也就是说，
范例程序,ClientThread所传给Channel的，是Request的实例。但WorkerThread
这时，Runnable 接口就可以看作是GoF的CommandPattern（参考附录
我们曾经在”启动线程"的地方学过使用Runnable接［的方法。只要将Rumnable
也就是说，如果我们建立 Request 类的子类，并将它的实例传给 Channel,
Runnable对象，可以作为方法的自变量传递、堆到队列里、通过网络传递、甚
java.lang.Runnable 接[,常常用来作为 Worker Thread Pattern 的 Request 参与者。
若能分离 invocation 与execution，就有办法做到“虽然invocation 了，但将
，我们可以对 Request 参与者设立优先性，控制 Channel 参与者
WorkerThread-———等到工作来，来了就工作
8营
---
## Page 228
范围就变成单线程，而可以省略共享互斥的必要了。在本章的进阶说明会再详述。
在Producer-Consumer Patterm 时所说的，只有-条工人线程的话，I人线程处理的
只有一条Worker参与者
法而已。
改。即使增加工作的种类，Worker 参与者都只是调用 Request 参与者的 exccute
的Request 参与者，增加上作的种类，Channel 参与名与Worker参与者都不需要修
种类。
是使用了多态（polymorphism）的特征。
孔
WorkerThread 也能止确调用这个实例的execute 方法。以面向对象的用词来说，就
如果上人线程（Worker 参与者）只有一条，会发生什么情况呢？如同我们曾
执行上作时所需要的信息，都定义在 Request 参与者里，所以即使建立出多态
Request类用来表示工作，我们增加一个Request类的子类，就可以增加上作的
图8-6 是建立多态的 Request 参与者时的类图。
：也就是我们可以建立出多态的（polymorphic）Request 参与者。
channeE
Cli+nt
Crealest
Creales,
execute
argumentA
Concret*R+qu*st1
图 8-6
Puls request
exerute
requesrdueue
4++nb+y
tteta
Contains +
T电t
execute
xauaunb
argument?
Creales and pcolss
Executes
channel
Horker
---
## Page 229
作后，可以前进到其他工作：
是共享线程，也不表示同时将多件“作交给－-条I人线程进行。所以描述成工人线
Flyweight Pattern（参考附录 E[GoFJIYuki01])
Pattern.
FuturePattern（第9章）
Pattern 的 Command 参与者。
了 Command Patterm. Worker Thread Pattern 的 Request 参与者，可对应到 Command
Command Pattern（参考附录 E [GoFJIYuki01])
程。但线程并不是每次重新启动，而是事先启动着，以工人线程的形式等待工作。