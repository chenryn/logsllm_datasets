2E) UI Manager: The UI Manager services an interface,
that displays Athena application‘s results and provides an
interaction mechanism.
3) Athena Off-The-Shelf Strategies: As
an anomaly
detection framework, Athena provides a set of off-the-shelf
strategies including network features, detection algorithms,
and reactions.
Fig. 3. An overview of the Athena system architectural components. The
Athena framework is composed of the extensible southbound element, the
uniﬁed northbound element, and the Athena application instantiation layer.
1B) Feature Generator: The Feature Generator examines
incoming control messages to derive Athena features, which
we enumerate in Table I, and the internal status of control plane
to extract important behavioral features from the control plane
(e.g., tracking ﬂow origins). The Feature Generator maintains
hash tables to track the status of the previous features for gen-
erating Variation and network status for maintaining message
State. The Feature Generator includes a garbage collector to
periodically remove outdated entries. It also attaches additional
meta information (e.g., timestamp). We discuss the details of
Athena features in Section III-A3.
1C) Attack Detector: The Attack Detector uses detection
algorithms to ﬁnd potential network threats. The detector
generates detection models according to requests from the
Detector Manager in the Athena NB, and analyzes generated
features from the Feature Generator. It is designed to operate
live or in batch mode. When it receives a request related
to one or more tasks, it translates the request to functions
and performs jobs with a single and a distributed manner
according to the type of job. For example, while in learning
mode, the Attack Detector distributes jobs to the computing
cluster to provide a scalable analysis environment. For a small
dataset, it handles the request on a single instance to reduce
communication overhead.
1D) Attack Reactor: The Attack Reactor enforces mitiga-
tion strategies to the data plane. When it receives mitigation
strategies from the Detector Manager, it translates requests to
network management messages to be sent to the data plane
through the Athena Proxy.
2) The Athena Northbound (NB) Element: The Athena
Northbound element exports Northbound APIs, which allow
application developers to utilize Athena’s functionalities for
an anomaly detection, providing scalability as well as SDN
4
SDN StackSDNSwitchesAthenaApplicationsLink Flooding Attacks Detector…AthenaFrameworkSouthbound (Extensible APIs)Southbound InterfaceAthena Southbound APILarge-scale DDoS DetectorSDN Application Behavior AnalyzerFeature Mgmt ManagerReaction ManagerUI ManagerDetector ManagerNorthbound (Uniﬁed APIs)Resource Manager…DB Cluster…Computing ClusterThird partiesAttack DetectorUser-deﬁned algorithmsML lib nML lib nML lib nK-MeansSDN ControllersAthena ProxyFeature GeneratorUser-deﬁned featuresML lib nML lib nML lib nFlowAttack Reactor User-deﬁnedreactionsML lib nML lib nML lib nQuarantine…Consolidated Anomaly DetectorsAthena Northbound APIFig. 4. The format of a single Athena feature: The gray box represents index
ﬁelds, the white box is for feature ﬁelds.
3A) Athena Features:
In total, Athena exposes over 100
network monitoring features to the NB API. The full list of
network features is available at SDNSecurity.org [11]. The
types of features are enumerated in Table I. Protocol-centric
features are directly derived from OpenFlow control messages,
such as packet count from ﬂow statistics. Combination features
refer to combined features derived from pre-deﬁned formulas,
such as the features in [10], and include more meaningful
information regarding SDN-speciﬁc features. For example,
Flow Utilization represents how much trafﬁc a ﬂow delivers
to its associated output port. The Stateful ﬁeld represents the
features including states of indicator operations. For example,
Pair Flow Ratio represents how many ﬂows manifest active
two-way connection between a sender and a receiver.
Athena‘s feature format
is illustrated in Figure 4. The
feature format consists of the index ﬁelds and the feature
ﬁelds. The index ﬁelds include the Index, which contains
information about feature‘s origins (e.g., Switch ID, port
ID) including indicators (e.g., OpenFlow match ﬁelds), and
Meta Data that represents additional information such as a
timestamp and semantics of the control plane associated with
the feature (e.g., Flow origins). The feature ﬁelds are appended
after the index ﬁelds to represent an actual behavior of the
network.
3B) Athena Detection Algorithms: Athena provides a
set of detection algorithms that allow its applications to ﬁnd
potential network threats and problems. The algorithms include
ﬁve categories, which are described in Table IV. Currently,
Athena supports 11 machine learning algorithms hosted on a
computing cluster to perform scalable analyses.
3C) Athena Reactions: Athena Reactions manage the
data plane according to changes of the network status. After
detecting a network threat, the applications hosted by Athena
may choose to invoke a mitigation strategy. Athena currently
supports two types of mitigation actions: Block, which blocks
certain hosts; and Quarantine, which isolates suspicious
hosts to user-deﬁned destinations.
IV. THE ATHENA DEVELOPMENT ENVIRONMENT
The Athena development environment (DE) exports a set of
high-level APIs that allow operators to design and implement
a scalable network anomaly detector in a manner that abstracts
both the SDN version dependencies and infrastructure-speciﬁc
conﬁguration details. Here we discuss Athena’s northbound
APIs and outline the steps involved in implementing various
anomaly detection services.
A. Athena Northbound API
The Northbound (NB) API is conﬁguration-based. Devel-
opers use it by conﬁguring parameters to execute anomaly
detection tasks. For example, one can generate a detec-
tion model by deﬁning a set of 1) detection parameters,
such as “TCP_PORT==80 && time==1 day”; 2) de-
tection features, such as “sampling (20%), default
normalization”; and 3) a preferred detection algorithm,
such as “K-means, k==5”.
Athena currently supports eight core functions described
in Table II, and several pre-deﬁned parameters, described
in Table III. RequestFeatures is a monitoring API that
retrieves desired Athena features using the query interface. For
example, a developer may create a query that requests “flow
utilization per network application”,
“unstable ports during a 1-day temporal
window” and “top 10 congested links”. Athena
currently supports the query operators described in Table IV.
The ManageMonitor API uses queries to turn monitoring
on/off for speciﬁc network features.
As
a
for
creating
for
commonly
provide
ValidateFeatures
detection-related API, we
and
validation. The APIs
the
detection
GenerateDetectionModel
large-scale
models,
feature
receive
a
query to retrieve a desired feature set, and apply the
Preprocessor, which transforms the features before use.
GenerateDetectionModel deﬁnes a detection algorithm
with its parameters (e.g., K of the K-Means algorithm),
and generates a detection model. The model
is used by
ValidateFeatures to validate target
features, and it
produces results that summarize the validation task. Athena
generates a detection model during the learning phase when
a machine-learning (ML) algorithm is employed, and exports
a pre-deﬁned model without a learning phase when using
other algorithms (e.g., threshold-based detection). Table IV
describes the supported functions of the Preprocessor and
ML algorithms.
Athena provides APIs
that allow an application to
handle network features
in an online manner. First,
AddEventHandler enables analysis applications to receive
Athena features dynamically. Applications register an event
handler with a user-deﬁned query. The manager then dynami-
cally evaluates whether an incoming feature satisﬁes the query,
and if so it forwards the feature to the applications. For exam-
ple, an application may pass the query “IP_DST==server
address && Port==80”. The event handler is also used
for live validation by AddOnlineValidator. This allows
an operator to deﬁne an operational mode for speciﬁc anomaly
detection tasks (e.g., A stand-alone mode, and a distributed
mode). ShowResults represents the results as a visualized
to Athena’s
graph, providing operators with direct
results. The Reactor enforces mitigation strategies to the
data plane according to requests of the application with
queries, such as “IP_SRC in {suspicious hosts}”
and invokes response functions described in Table IV.
insight
B. Athena Application
Figure 5 illustrates the steps involved in designing and
implementing an anomaly detector. Developers select off-the-
shelf strategies (e.g., network features, detection algorithms,
and reactions) to perform anomaly detection tasks. Based on
these selections, they use supported NB APIs to construct a
consolidated anomaly detector, including the selected network
feature generation, model creation with ﬁne-grained ﬁltered
5
IndexStateful (+Variation)Protocol-centricCombinationMeta dataFunction
RequestFeatures(q)
ManageMonitor(q, o)
GenerateDetectionModel(q, f, a)
ValidateFeatures(q, f, m)
AddEventHandler(q)
AddOnlineValidator(f, m, e)
Reactor(q, r)
ShowResults(r’)
THE Athena CORE NORTHBOUND API.
TABLE II.
Description
Request a set of Athena features with user-deﬁned constraints including feature re-organization.
Turn on/off a network monitoring including a feature generation.
Generate an anomaly detection model according to an user-deﬁned algorithm and features.
Validate a set of Athena features with a generated detection model.
Register an event handler to retrieve features from Athena according to user-deﬁned constraints.
Register an online validator to examine an incoming feature in an online manner.
Enforce an action to the data plane.
Display the results from Athena with a graphical interface.
TABLE III.
PARAMETERS OF THE Athena NORTHBOUND API.
Parameter
Query (q)
Preprocessor (f )
Algorithm (a)
Model (m)
Results (r’)
Event handler (e)
Reactions (r)
Operations (o)
TABLE IV.
Query (q)
Arithmetic
Relationship
Options
Preprocessor (f)
Weighting
Sampling
Normalization
Marking
Algorithm (a)
Boosting
Classiﬁcation
Clustering
Regression
Simple
Reactions (r)
Block
Quarantine
Operations (o)
True
False
Description
Uniﬁed query to retrieve Athena features with
constraints.
Preprocessing statement to re-design features.
Description of an algorithm including parameters
of the algorithm.
Generated detection model.
Results of a validation or a feature request.
Event handler to receive online Athena events.
Reactions for handling suspicious hosts.
Flags for a network monitoring per features.
AN ENUMERATION OF SUPPORTED FUNCTIONS PER
PARAMETER.
Operators
>, >=, ==, !=, <=, <
and, or
Sorting, Aggregation, Limiting
Description
Emphasize certain features
Select a subset from entire features
Standardize the range of independent variables
Mark a set of entry labeled as malicious entry
Supported algorithms
Gradient Boosted Tree
Decision Tree, Logistic Regression, Naive Bayes,
Random Forest, SVM
Gaussian Mixture, K-Means
Lasso, Linear, Ridge
Threshold
Description
Block target hosts
Isolate hosts in honeynets
Description
Turn on network monitoring
Turn off network monitoring
network features, feature validation with a large-scale dataset,
run-time threat detection logic, a dynamic threat mitigation
policy, and results from GUI/CLI generation.
Athena automatically performs the anomaly detection task,
including task integration with the external DB cluster and
computing cluster. It reports (intermediate) results to the ap-
plication while performing anomaly detection. The application
updates internal status and conﬁgures new Athena hosted
anomaly tasks based on the results. Furthermore, Athena pro-
vides a GUI/CLI interface that allows the operator to receive
alerts and manage the Athena application in a centralized
manner.
V. ATHENA USE CASES
To illustrate the utility of the Athena framework, we present
multiple sample anomaly detection applications. Due to space
6
Fig. 5.
SDN stack with Athena.
Implementing a general purpose anomaly detector across a distributed
limitations, we only show the pseudocode for the DDoS
Detector (scenario #1).
TABLE V.
A LIST OF POSSIBLE FLOW-RELATED FEATURES TO DETECT
DDOS ATTACK. THE (*) STAR NOTATION INDICATES THE PREFIX OR
POSTFIX OF THE Athena FEATURES.
Characteristic
Unidirectional trafﬁc
Trafﬁc volume pattern
Duration of ﬂow
Possible features
PAIR_FLOW, PAIR_FLOW_RATIO
PACKET_COUNT, BYTE_COUNT,
BYTE_PER_PACKET,
PACKET_PER_DURATION,
BYTE_PER_DURATION
DURATION_SEC, DURATION_N_SEC
A. Scenario 1: A Large-scale DDoS Attack Detector
One strength of the Athena framework is its ability to create
scalable network anomaly detection services across large and
physically distributed network environments. To demonstrate
this scalability, we implement a large-network DDoS attack
detection application using Athena’s northbound APIs. Since
Athena automatically collects all of the network features across
the SDN data plane by default, an operator may deploy Athena
on the network to automatically gather the features necessary
to drive our detector. Here, we discuss DDoS model creation,
feature validation, and summarize our test results.
Creating the DDoS Detection Model: Detection model
creation begins with a deﬁnition of the desired network fea-
tures for use during the training phase. The developer sets
Athena ApplicationNetwork EventsAthena FrameworkConsolidated executorJobs/Results…DB Cluster…Computing ClusterFeatures (Large)K-MeansThresholdAlgorithm pool…QuarantineBlockReaction pool…Pair_FlowThroughputFeature pool…MonitorDetectorReactorSelect featuresSelect algorithmsSelect reactions1. Conﬁgure2. Results3. ReconﬁgureAthena GUI/CLI InterfaceReactionControl InformationSDN ControllerSDN ControllerSDN ControllerApplication 1 A pseudo-code illustration of an Athena-based
DDoS attack detection application.
/* Define the features to be trained */
q_train = GenerateQuery (constraints of features);
/* Define data pre-processing */
f = GeneratePreprocessor (Normalization,
Weight for certain features,
Marking malicious entries,
...);
/* Register the features used in the algorithm */
f.addAll(candidate features);
/* Define an algorithm with parameters */
a = GenerateAlgorithm (a detection algorithm);
/* Generate a detection model */
m = GenerateDetectionModel (q_train, f, a);
/* Define the features to be tested */
q_test = GenerateQuery (constraints of features);
Fig. 6.
information are excluded after cluster #2.
Output of the DDoS detector application. The details of cluster
/* Test the features */
r’ = ValidateFeatures(q_test, f, m);
/* Show results with CLI interface */
ShowResults(r’);
TABLE VI.
Category
Switch
Link
Controller
Feature
Algorithm
A COMPARISON OF THE TEST ENVIRONMENT.
[10]
3 OF switches
3 links
1 instance
6-tuples
SOM
18 OF switches
(6 physical, 12 OVS)
Athena
48 links
3 instances
10-tuples
K-Means
the data preprocessing parameters to normalize the features
that capture the characteristics of a DDoS attack described in
Table V. These features are set by the f.addAll() utility
API. Here, we conﬁgure Weight for emphasizing certain
network features, and Marking for annotating malicious
entries 2.
Algorithm represents a detection model, and it is con-
ﬁgured with a machine learning algorithm and its parameters
(e.g., we may choose K-Means with k = 5, and 20 iterations).
Developers then invoke GenerateDetectionModel to
create the detection model, and Athena distributes the ML
detection tasks to compute worker nodes. After job completion,
the application receives the detection model. These steps are
outlined in the pseudocode.