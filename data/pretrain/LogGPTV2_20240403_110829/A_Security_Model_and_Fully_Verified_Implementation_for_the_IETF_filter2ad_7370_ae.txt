time. Naive implementations ﬁrst decrypt LN , then
truncate the rest of the mask to LN .
•
•
Interestingly, Bellare et al. [11] propose another construction
called HN2 (shown in Figure 13 in §A) that uses a block cipher
(or pseudo-random permutation) instead of a PRF and an XOR.
The idea of this construction is to encrypt with the block cipher
the concatenation of the packet number and AEAD ciphertext.
We propose a variant of QPE based on HN2 in Figure 6.
This variant makes it much more difﬁcult for an adversary to
selectively ﬂip bits in the packet number. The security proof
is also simpler, as the collision term is accounted for by the
idealization of the PRP.
IV. VERIFIED CORRECTNESS AND SECURITY
We contribute a reference implementation of the QUIC
record layer and support it with machine-checked proofs of
its intended functional and security properties, as described
in §III. Our veriﬁed speciﬁcation, code, and proofs are done
within the F(cid:2) proof assistant.
A. F(cid:2) (review) and Initial QUIC Deﬁnitions
F(cid:2) is a language in the tradition of ML, equipped with
dependent types and an effect system, which allows program-
mers to prove properties of their code. A popular ﬂavor is
proofs by reﬁnement, wherein a complex implementation is
shown to be functionally equivalent to a more concise, crisper
speciﬁcation. F(cid:2) relies on a weakest precondition calculus to
construct proof obligations that can then be discharged using
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
a mixture of automated (via Z3 [26], an SMT solver), semi-
automated (via user tactics), and manual proofs.
To execute an F(cid:2) program it must be extracted to OCaml
or F#. If the run-time portions of a program ﬁt within Low(cid:2), a
low-level subset of F(cid:2), then the program can also be compiled
to portable C code via a dedicated compiler, KreMLin [45].
This allows programmers to rely on the full power of F(cid:2)
for proofs and speciﬁcations, knowing that they are erased
at extraction-time: only executable chunks of code need to
be in Low(cid:2). The Low(cid:2) methodology has been successfully
used by the HACL(cid:2) cryptographic library [55], the EverCrypt
cryptographic provider [44],
the EverParse veriﬁed parser
library [46] and several others. We illustrate below some
basic F(cid:2) concepts, using truncation and recovery of packet
numbers as an example of how to author speciﬁcations in F(cid:2). A
subsequent section (§IV-D) dwells on Low(cid:2) implementations.
Truncated packet numbers occupy 1 to 4 bytes, depending
on the user’s choice. Packet numbers, once decoded and
recovered, are in the range [0; 262). The truncated-number
length is included in the header as a two-bit integer, while
packet numbers mandate a 62-bit integer. Both are deﬁned as
reﬁnements of natural integers that capture their range:
type nat2 = n:nat{n < 4}
type nat62 = n:nat{n < pow2 62}
One can deﬁne the upper bound on the value of a truncated
packet number (named below “npn” for “network packet
number”) given the length of its encoding in bytes. To this end,
we deﬁne bound_npn, a function of a single argument pn_len,
using a let-binding.
let bound_npn (pn_len: nat2) =pow2 (8 ∗ (pn_len + 1))
Using these deﬁnitions, we deﬁne truncation as a function of
the target length (in bytes) and the full packet number:
let truncate_pn (pn_len: nat2) (pn: nat62):
npn:nat{ npn < bound_npn pn_len } =pn % bound_npn pn_len
Undoing the truncation for incoming headers is more in-
volved, since it is clearly not injective. Hence, QUIC uses
an expansion operation whose correctness is guaranteed when
the packet number to recover is within a window of width
bound_npn pn_len centered on the maximal packet number re-
ceived so far. We express it in F(cid:2) via the following predicate:
let in_window (pn_len:nat2) (max_pn:nat62) (pn:nat62) =
let h = bound_npn pn_len in
(max_pn+1 < h/2 ∧ pn < h) ∨
(max_pn+1 ≥ pow2 62 − h/2 ∧ pn ≥ pow2 62 − h) ∨
(max_pn+1 − h/2 < pn ∧ pn ≤ max_pn+1 + h/2)
The ﬁrst and second clauses of the disjunction shift the window
when it under- or overﬂows the interval [0, 262). Proving the
correctness of packet number expansion revealed two errors in
the IETF reference implementation [36, Appendix A]: an off-
by-one in the third case, and an overﬂow in the second case.
Both are ﬁxed in draft 24 following our report. Below, we
give the types of the patched function and its veriﬁed inverse
property, which ensures it returns the full packet number if it
is within the window.
val expand_pn : pn_len:nat2 →
max_pn:nat{max_pn+1 < pow2 62} →
npn:nat{npn < bound_npn pn_len} →
pn:nat62{in_window pn_len max_pn pn}
val lemma_parse_pn_correct : pn_len:nat2 →
max_pn:nat{max_pn+1 < pow2 62} → pn:nat62 →
Lemma (requires in_window pn_len max_pn pn)
(ensures expand_pn pn_len max_pn (truncate_pn pn_len pn) =pn)
As expressed by the precondition of lemma_parse_pn_correct,
the sender must choose the value of pn_len carefully for the
predicate in_window pn_len max_pn pn to hold, which in turn en-
sures npn will expand to the intended packet number. However,
the sender cannot predict the exact value of max_pn, which is
the highest packet number received by the receiver. She can
only know a range for this number: it must be greater than
the last acknowledged packet number last_min, and lower than
the last sent packet number last_max. To be certain that the
chosen pn_len will always lead to the intended expanded packet
number pn, the sender must therefore ensure that for any value
max_pn∈[last_min,last_max],
in_window pn_len max_pn pn holds.
This condition can be checked by the following function:
let in_all_windows (pn_len:nat2) (last_min last_max pn:nat62) :bool =
let h = bound_npn pn_len in
(pow2 62 − h ≤ pn || last_max+2 − h/2 ≤ pn) &&
(pn ≤ h−1 ||pn ≤ last_min+1 + h/2)
We prove that this function has the intended behavior. The
sender then simply has to pick the shortest pn_len that passes
this check. Doing so yields a function with the following
signature
val decide_pn (last_min last_max pn:nat62)) : Pure (option nat2)
(requires last_min ≤ last_max)
(ensures (function None →
∀ (pn_len:nat2). ¬ (in_all_windows pn_len last_min last_max pn)
| Some pn_len →
in_all_windows pn_len last_min last_max pn ∧
(∀ (pn_len’:nat2{pn_len’ <pn_len}).
¬ (in_all_windows pn_len’ last_min last_max pn))))
whose post-condition expresses that it returns the optimal (i.e.
shortest) possible pn_len. Note that there might not always exist
a suitable one, for instance if the range [last_min, last_max] is
too wide, in which case the function returns None.
B. F(cid:2) Speciﬁcation of Packet Encryption
We outline the remainder of our speciﬁcation in a bottom-
up fashion, starting with parsers and serializers and leading to
a high-level speciﬁcation of packet encryption and decryption.
Parsing For parsing and serializing, we use and extend the
EverParse framework [46]. EverParse is an existing combina-
tor library for specifying, generating, and extracting veriﬁed
parsers and serializers, written in F(cid:2)/Low(cid:2). EverParse focuses
on binary formats like those of QUIC, and extracts to zero-
copy validators and serializers in C.
For this work, we extended EverParse with a notion of bit
ﬁelds, which it previously lacked. This allowed us to express
the variable-length encoding used by the QUIC spec within
EverParse. We also expressed packet-number truncation and
recovery using EverParse, which yielded a more concise and
efﬁcient proof of correctness.
We expressed the rest of packet-header parsing and se-
rializing using EverParse combinators, yielding an automatic
proof (i) of parser correctness, i.e., the parser and serializer
are inverses of each other, and (ii) of injectivity, ensuring
there is at most one possible binary representation of QUIC
headers, given the packet number window and the choice of
lengths of connection identiﬁers for short packets. To prove the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
1170
uniqueness of the binary representation, we needed to impose
a minimum-length restriction on the representation of variable-
length integers.
From Wire Formats to Abstract Headers Parsers and
serializers operate on sequences of bytes (using the F(cid:2) type
bytes), as well as vlbytes min max, an EverParse reﬁnement
of bytes of variable length (cid:3) such that min ≤ (cid:3) ≤ max,
used below to represent connection IDs. At the boundary of
EverParse-based speciﬁcations, we abstract over raw bytes and
switch to high-level, structured values, using an inductive type
with separate cases for long and short headers (reﬂecting the
header format of Figure 3):
type header =
| MLong: version: U32.t →
dcid: vlbytes 0 20→ scid: vlbytes 0 20→
spec: long_header_speciﬁcs → header
| MShort:
spin: bool → key_phase: bool → dcid: vlbytes 0 20→
packet_number_length: packet_number_length_t →
packet_number: uint62_t → header
The type long_header_speciﬁcs, elided here, contains the en-
coded packet-number length, the truncated packet number, and
the payload length, with a special case for retry packets. The
remainder of our QUIC speciﬁcations, including formatting,
parsing, as well as the correctness and injectivity lemmas rely
on the high-level header type. We discuss our proof of the
correctness of conversion between high-level and low-level
header representations in §IV-C.
Side-channel-Resistant Header Protection Leveraging the
type above, we specify header protection, using a
header
custom-built F(cid:2) library of speciﬁcation helpers for manipulat-
ing byte sequences with binary operators. Further speciﬁcation
reﬁnements are needed. For packet-number masking, we reﬁne
the initial speciﬁcation into a more operational one that avoids
a common implementation pitfall that results in a side-channel
leak. We then verify the low-level implementation against the
side-channel-free speciﬁcation.
More precisely, our low-level implementation hides the
packet number and the packet number length under abstract
types for secret values, meaning that code cannot branch or
access memory based on those values. Instead, for header
parsing and protection removal, we ﬁrst parse the public part
of the header, without the packet number, with the protected
bits of the ﬁrst byte uninterpreted, so that parsing does not
depend on the packet number or its length. Then, we hide those
bits so as to remove their protection through constant-time
masks. Then we both unprotect and read the packet number
in a constant-time way by masking the ﬁrst 4 bytes next to
the public header (which start with the packet number) with a
mask value computed in a constant-time way, proving that we
only modify the packet number during protection removal. Fi-
nally, we expand the packet number using secret comparisons,
constant-size masks and multiplications. Appendix B gives a
ﬂavor of such constant-time operations. The obtained expanded
packet number is still secret, and we respect data abstraction
throughout our implementation to ensure constant-time exe-
cution. Our initial speciﬁcation does not reﬂect constant-time
aspects, which makes the functional correctness proof of our
implementation nontrivial.
Agile Cryptography The QUIC speciﬁcation inherits a large
body of cryptographic primitives mandated by the TLS 1.3
standard: HKDF expansion and derivation, AEAD, and the
underlying block ciphers for the packet-number mask.
Rather than rewrite this very substantial amount of speciﬁ-
cation, we reuse EverCrypt [44], an existing cryptographic li-
brary written in F(cid:2)/Low(cid:2). EverCrypt speciﬁes and implements
all major cipher suites and algorithms, including HKDF for
SHA2 and all major variants of AEAD (ChachaPoly, AES128-
GCM, AES256-GCM).
Importantly, EverCrypt offers agile, abstract speciﬁcations,
meaning that our QUIC speciﬁcation is by construction para-
metric over the algorithms chosen by the TLS negotiation.
Lemmas such as lemma_encrypt_correct (§IV-C) are parameter-
ized over the encryption algorithm (“ea”), and so is our entire
proof. This means our results hold for any existing or future
AEAD algorithm in EverCrypt.
EverCrypt uses a simple model for side-channel resistance
where any data of type bytes is secret; our QUIC spec uses
information-ﬂow labels instead to distinguish plain texts and
cipher texts. We omit these technicalities.
C. Functional Correctness Properties
We have proven F(cid:2) lemmas showing that our speciﬁcation
(and hence, our veriﬁed implementation described in §IV-D)
of the draft 30 speciﬁcation has the expected properties,
including:
1) correctness of packet-number decoding (§IV-A);
2) correctness and injectivity of header parsing;
3) correctness of header and payload decryption for packets.
We elaborate on the latter two proofs below. In the process
of developing these proofs, we uncovered several issues with
the current IETF draft. For example, as described in §IV-A,
while specifying packet-number recovery, we discovered that
the QUIC draft omits an overﬂow condition on the window
size. We also demonstrated that the whole QUIC speciﬁcation
is parameterized over destination connection ID lengths, mean-
ing that non-malleability depends on proper authentication
of connection IDs. We have proposed simple ﬁxes, notably
embedding the length LN of the truncated packet number into
the AEAD nonce (§III-D).
Header Parsing Proofs First, header parsing is correct,
meaning that parse_header inverts format_header.
val lemma_header_parsing_correct: ... → Lemma
(parse_header cid_len last
(format_header (append h c)) = Success h c))
For safety reasons [46], parsers should also be injective (up
to failure). The parse_header function enjoys this property but
only for a given connection-ID length.
val lemma_header_parsing_safe: ... → Lemma (requires ... ∧
parse_header cid_len last b1 = parse_header cid_len last b2)
(ensures parse_header cid_len last b1 = Failure ∨ b1 = b2)
Encryption Correctness Based on our parsing correctness
lemma, we can prove the correctness of packet encryption.
Our proof is based on an intermediate lemma about header
encryption, and uses the idempotence property of XOR and
the functional correctness lemma of EverCrypt’s speciﬁcation
of AEAD.
1171
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
val lemma_encrypt_correct:
a:ea (∗ the AE algorithm negotiated by TLS ∗) →
k:lbytes (ae_keysize a) (∗ the main key for this AE algorithm ∗) →
siv: lbytes 12 (∗ a static IV for this AE algorithm ∗) →
hpk: lbytes (ae_keysize a) (∗ the header key for this AE algorithm ∗) →
h: header
cid_len: nat {cid_len ≤ 20 ∧ (MShort? h ⇒ cid_len = dcid_len h)} →
last: nat{last+1 < pow2 62 } →
p: pbytes’ (is_retry h) { has_payload_length h ⇒
Lemma (requires is_retry h ∨ in_window (pn_length h − 1) last (pn h))
(ensures decrypt a k siv hpk last cid_len
U64.v (payload_length h) ==length p + AEAD.tag_length a } →
(∗ Note the condition on the CID length below ∗) →
(encrypt a k siv hpk h p) =OK h p )
The ﬁnal lemma is rather verbose due to the number of
parameters and conditions, but merely states that decrypt inverts
encrypt. It explicitly inherits all
limitations of previously-
deﬁned functions: the window condition for packet-number
decoding, and the need to provide the correct length of the
connection ID.
D. Low-Level Record-Layer Implementation
We now brieﬂy describe the low-level implementation of
our QUIC record layer, leveraging both the EverCrypt and
EverParse libraries. We follow the proof by reﬁnement method-
ology (§IV-A) and show that our Low(cid:2) implementation is
functionally equivalent to the speciﬁcation above (§IV-B). By
virtue of being written in Low(cid:2), the code is also memory-safe
and these guarantees carry over to the extracted C code [45].
§VI reports code statistics and performance.
Overview Verifying code in Low(cid:2) differs greatly from au-
thoring speciﬁcations (§IV-B). First, all computations must be
performed on machine integers, meaning that computations
such as in_window must be rewritten to avoid overﬂowing
or underﬂowing intermediary sub-expressions — a common
source of pitfalls in unveriﬁed code. Second, all sequence-
manipulating code must be rewritten to use arrays allocated in
memory. This requires reasoning about liveness, disjointness
and spatial placement of allocations, to prevent runtime errors
(e.g. use-after-free, out-of-bounds access).
Parsers Our speciﬁcation of message formats is expressed
using the EverParse library. Just like for speciﬁcations, we
have extended EverParse’s low-level parsers and serializers
with our new features (bounded integers; bitﬁelds), and we
have written low-level, zero-copy parsers and serializers for
QUIC message formats directly using the EverParse library.