# LCTF2018 wp by whitzard
做的基本都是rev/misc，欢迎交流qq:859630472
## Reverse
### 拿去签到吧朋友
放出来的第一道reverse，说是签到`This is the simplest reverse problem`，实际上却比较恶心…  
首先题目有反调`sub_401323`，把`ida`等字符串替换掉即可。  
然后可以看到`sub_401451`对`sub_401E79`做了异或，不过异或完了函数也还是不对，于是先看main函数逻辑：
    scanf("%s");
      if ( strlen(&input) != 36 )
      {
        print("error\n", (unsigned int)&input);
        exit(0);
      }
      root = 0;
      for ( i = 0; i = 0:
            t = a
            a = bit_xor(b, e(a, j), 32)
            b = t
            j-=1
        x = switch_rev(a+b, swt_0, 64)
        return x
    out=''
    for i in range(0, 36, 8):
        x = fin_bits[i*8:(i+8)*8]
        res = dec_8bytes(x)
        out+=hex(int(''.join(map(str,res)),2))[2:-1].decode('hex')
    l=[0,1,14,12,17,18,19,27,28,2,15,20,31,29,30,16,13,5]
    flag = ''
    for i in l:
        flag+=out[i]
    # second part
    l=[19,18,5,7,17,1,0,20,6,29,28,27,15,16,4,3,2,32]
    x=[0x7C, 0x81, 0x61, 0x99, 0x67, 0x9B, 0x14, 0xEA, 0x68, 0x87, 0x10, 0xEC, 0x16, 0xF9, 0x07, 0xF2, 0x0F, 0xF3, 0x03, 0xF4, 0x33, 0xCF, 0x27, 0xC6, 0x26, 0xC3, 0x3D, 0xD0, 0x2C, 0xD2, 0x23, 0xDE, 0x28, 0xD1, 0x01, 0xE6]
    for i in range(len(x)):
        for j in[0,2,4,6]:
            x[i] ^= 1 
    #include 
    #include 
    using namespace std;
    int main()
    {
        unsigned char data[119] = {
            0xCE, 0x35, 0x95, 0x6C, 0xCA, 0x77, 0x84, 0xB8, 0xE7, 0xE7, 0xC5, 0xB1, 0x0D, 0xAC, 0x40, 0x4B, 
            0x80, 0x3A, 0x83, 0x25, 0x6D, 0xC0, 0xB0, 0xBA, 0x44, 0x97, 0x23, 0x28, 0x81, 0x50, 0xE0, 0x1B, 
            0x76, 0x9F, 0x6B, 0xE1, 0xA4, 0xE3, 0x71, 0x3B, 0x20, 0xA4, 0x10, 0x70, 0x19, 0x1E, 0x6D, 0x35, 
            0x6D, 0xAB, 0x3B, 0x22, 0x5A, 0xFA, 0x4A, 0x0C, 0x39, 0x3B, 0xD8, 0x04, 0x21, 0xAC, 0x68, 0x09, 
            0x6C, 0x57, 0x03, 0x69, 0x14, 0xDA, 0x81, 0x80, 0x9D, 0xA6, 0x9E, 0x60, 0x4A, 0x5D, 0xB6, 0xF9, 
            0x25, 0x20, 0x76, 0x38, 0x5B, 0x0D, 0x68, 0xF0, 0x30, 0x3F, 0xA1, 0x2D, 0x2C, 0x6E, 0xA9, 0x57, 
            0x45, 0x5B, 0x8F, 0xC5, 0x0F, 0x71, 0xF3, 0xF3, 0x99, 0xBD, 0x35, 0x59, 0x94, 0x7F, 0xA0, 0x5D, 
            0xA0, 0x76, 0xD7, 0xA1, 0x71, 0xF3, 0x04
        };
        for(int i = 1152; i < 4300; i++)
        {
            srand(i);
            for(int j=0; j<119;j++)
            {
                unsigned char r = rand() & 0xff;
                unsigned char result = r^data[j];
                if(j==0)
                    if(result != 0x55)
                        break;
                    else
                        printf("\n%d\n", i);
                printf("%2x ",result);
            }
        }
    }
其中有一个55 89开头的看起来很像一个正常函数（里面有几段00 00 00），替换掉原函数重新反编译：
    int *sub_401E79()
    {
      int *result; // eax
      signed int j; // [esp+0h] [ebp-10h]
      int i; // [esp+4h] [ebp-Ch]
      result = (int *)&loc_401E88;
      for ( i = 0; i <= 35; ++i )
      {
        for ( j = 0; j <= 6; j += 2 )
          byte_40B610[i] ^= 1 << (j + i % 2);
        result = &i;
      }
      return result;
    }
可以看到就是对后序遍历的序列做了个简单的变换。  
之后`sub_401ef0`函数会对变换后的值进行比较，然后`sub_401f3c`函数会判断剩下部分字符在序列中的位置，于是可以还原flag剩下的部分。
运行之前的脚本，得到flag：`LCTF{this-RevlrSE=^V1@Y+)fAxyzXZ234}`