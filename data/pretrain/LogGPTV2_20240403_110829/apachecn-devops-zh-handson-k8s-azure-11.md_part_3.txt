    ![Accessing the frontend service using the curl command](img/B17338_11_21.jpg)
    图 11.21:访问通过内部负载平衡器公开的服务
5.  AKS created an internal load balancer to expose this service. You can see this load balancer in the Azure portal as well. To see this internal load balancer, start by searching for load balancer in the Azure search bar, as shown in *Figure 11.22*:
    ![Searching for load balancer in the Azure search bar](img/B17338_11_22.jpg)
    图 11.22:通过 Azure 门户导航到负载平衡器
6.  In the resulting pane, you should see two load balancers, as shown in *Figure 11.23*:
    ![Output showing two load balancers, one called kubernetes the other called Kubernetes-internal](img/B17338_11_23.jpg)
    图 11.23:默认目录中的负载平衡器列表
7.  Click on the kubernetes-internal load balancer. This will take you to a pane similar to *Figure 11.24*:
    ![Overview of the kubernetes-internal load balancer. The private IP address is the same address used earlier to connect to the frontend service](img/B17338_11_24.jpg)
    图 11.24:内部负载平衡器的细节
    在这里，您可以看到这个内部负载平衡器的细节。正如您在截图中的高亮部分所看到的，您看到的与 **kubectl** 命令的输出相同的 IP 是在负载平衡器上配置的。
8.  This concludes the example of using an internal load balancer. You can now delete the service using the internal load balancer by applying the following command:
    kubectl delete -f 前端-服务-内部. yaml
    kubectl delete -f 不带服务的留言簿. yaml
    这将删除留言簿应用和服务。删除服务时，Kubernetes 中的服务以及 Azure 中的内部负载平衡器都将被删除。这是因为一旦集群中不再有需要内部负载平衡器的服务，AKS 就会删除该内部负载平衡器。
在本节中，您使用内部负载平衡器部署了一个 Kubernetes 服务。这使您能够创建不暴露在互联网上的服务。但是，在某些情况下，您需要向互联网公开一项服务，但需要确保只有可信方才能连接到该服务。在下一节中，您将了解如何在 AKS 中创建使用网络安全组来限制入站流量的服务。
### 使用网络安全组保护工作负载网络
到目前为止，您已经在 Kubernetes 中公开了多个服务。您已经使用 Kubernetes 中的服务对象以及入口公开了它们。但是，除了上一节，您从未通过部署内部负载平衡器来限制对应用的访问。这意味着应用总是可以公开访问的。在下面的示例中，您将在 Kubernetes 集群上创建一个具有公共 IP 的服务，但是您将使用 AKS 配置的 NSG 来限制对它的访问。
1.  As the example application in this section, you will again use the guestbook application. As in the previous section, the front-end service configuration has been moved to a separate file. For this example, you'll start by using the **front-end-service.yaml** file to create the service, and later update that using the **front-end-service-secured.yaml** file.
    让我们从按原样部署应用开始，不进行任何 NSG 配置，应用以下命令:
    kubectl apply -f 不带服务的留言簿. yaml
    忽必烈应用 f 前端服务。yaml
    然后，使用以下命令获取前端服务的 IP 地址:
    忽必烈得到服务-w
    这将创建类似于图 11.25 的输出。获得公共 IP 后，按 *Ctrl + C* 即可退出命令:
    ![Fetching the front-end service’s IP address](img/B17338_11_25.jpg)
    图 11.25:获取前端服务的 IP 地址
    现在，您可以使用浏览器和虚拟机本身连接到该服务。如果您使用浏览器连接，您应该会看到类似于*图 11.26* 的输出:
    ![Accessing the guestbook application using the external IP](img/B17338_11_26.jpg)
    图 11.26:通过网络浏览器访问留言簿应用
2.  You can also connect to this application using the command line. To do this, use the following command:
    卷曲
    这将返回类似于图 11.27 的输出:
    ![Connecting to the guestbook application using the command line](img/B17338_11_27.jpg)
    图 11.27:使用命令行连接到留言簿应用
3.  Let's now configure additional security on the front-end service by only allowing your browser to connect to the application. For this, you will require the public IP address you are using right now. If you don't know this, you can browse to [https://www.whatismyip.com/](https://www.whatismyip.com/) to get your IP address, as shown in *Figure 11.28*:
    ![Using https://www.whatismyip.com/ to get your IP address](img/B17338_11_28.jpg)
    图 11.28:获取自己的公共 IP 地址
    为了保护前端服务，您将编辑**前端服务保护. yaml** 文件。这是该特定文件中的代码:
    1 堆叠版本:v1
    2 种:服务
    3 元数据:
    4 名称:前端
    5 个标签:
    6 应用:留言簿
    7 层:前端
    8 规格:
    9 类型:负载平衡器
    10 个端口:
    11 端口:80
    12 选择器:
    13 应用:留言簿
    14 层:前端
    15 负载平衡源范围:
    16 -
    该文件与您在本书前面创建的服务非常相似。但是，在第 15 行和第 16 行，您现在可以看到 **loadBalancerSourceRanges** 和添加您自己的公共 IP 地址的选项。您可以在此提供多个公共 IP 地址或范围；每个地址或范围前都会有一个破折号。如果您希望输入一个单独的 IP 地址而不是一个范围，请将 **/32** 附加到该 IP 地址。您需要这样做，因为 Kubernetes 期望 IP 范围，一个范围 **/32** 等于一个单一的 IP 地址。
    要在此文件中编辑或添加您自己的 IP 地址，请使用以下命令:
    vi 前端服务安全. yaml
    在生成的应用中，使用箭头键导航到底线，点击 *i* 按钮进入**插入**模式，移除占位符，添加您的 IP 地址，然后添加 **/32** 。要关闭并保存文件，点击 *Esc* 键，输入 **:wq！**写入并关闭文件，最后点击*进入*。*如图 11.29* 所示:
    ![Editing the front-end-service-secured.yaml file by adding your own IP](img/B17338_11_29.jpg)
    图 11.29:带有 IP 地址的前端服务安全的. yaml 文件示例
4.  You can update the exiting service that was deployed before using the following command:
    kubectl apply -f 前端-service-secured.yaml
    这将导致 AKS 更新链接到此群集的 NSG，只允许来自您的公共 IP 地址的流量。您可以通过再次浏览服务的 IP 地址来确认这一点，您应该会看到留言簿应用。但是，如果您从虚拟机重试之前的命令，您应该会看到它最终超时:
    卷曲
    这将在 2 分钟后超时，输出类似于*图 11.30* :
    ![The connection from within the VM times out](img/B17338_11_30.jpg)
    图 11.30:虚拟机内部的连接超时
5.  You can verify the NSG configuration in Azure itself as well. To verify this, look for Network security groups via the Azure search bar, as shown in *Figure 11.31*:
    ![Searching for network security group in the Azure search bar](img/B17338_11_31.jpg)
    图 11.31:通过 Azure 门户导航到网络安全组
6.  In the resulting pane, you should see two NSGs. Select the one whose name starts with aks-agentpool, as shown in *Figure 11.32*:
    ![Selecting the desired NSG from the NSG page](img/B17338_11_32.jpg)
    图 11.32:选择 aks 代理池 NSG
7.  In the resulting detailed view of that NSG, you should see a rule that allows traffic from your IP address to the service's public IP address, as you can see in *Figure 11.33*:
    ![The NSG contains a rule that allows traffic only from the public IP defined earlier](img/B17338_11_33.jpg)
    图 11.33:NSG 包含一个规则，只允许来自前面定义的公共 IP 的流量
    注意这个规则是如何被 AKS 创建和管理的；你不必自己创造这个。
8.  Here, we've concluded this example. Let's clean up the deployment, the VM, and the private cluster. From within the VM, delete the application using the following command:
    kubectl delete -f 不带服务的留言簿. yaml
    kubectl delete -f 前端-service-secured.yaml
    然后，使用**退出**命令退出虚拟机。这会让你回到云壳。在这里，您可以删除私有集群和用于连接到该集群的虚拟机:
    az 组删除-n rg-handsonaks-vm -y
    az aks 删除-g rg-handonaks-n handonaks-y
通过向 Kubernetes 服务添加额外的配置，您可以限制谁能够连接到您的服务。您能够确认只有被允许连接到该服务的公共 IP 能够连接到该服务。不是来自此公共 IP 地址的连接超时。
这是保护所谓的南北流量的一个示例，南北流量是指从外部到集群的流量。您还可以为东西向流量添加额外的保护，这意味着您集群内的流量。为此，您将在 Kubernetes 中使用名为网络策略的功能。您将在下一节中这样做。
### 使用网络策略保护工作负载网络
在前一节中，您让 Kubernetes 在 Azure 中配置一个 NSG 来保护南北流量。这是限制网络流量进入您的公共服务的良好做法。在大多数情况下，您还需要保护东西向的流量，这意味着您的 Pod 之间的流量。这样，您可以确保如果潜在的攻击者能够访问您的应用的一部分，他们连接到应用的其他部分或不同应用的能力将会受到限制。这也被称为防止横向移动。
为了保护 pods 之间的流量，Kubernetes 有一个称为网络策略的功能。网络策略可用于保护从外部到您的 Pod 、从您的 Pod 到外部的流量，以及 Pod 之间的流量。由于您已经了解了一种保护从外部到 pod 的流量的方法，在本节中，您将学习如何使用网络策略来保护 pod 到 pod 的流量。
在 AKS 中，网络策略是在集群创建时需要在集群上配置的东西(在撰写本文时是这样的)。如果您的群集启用了网络策略，您可以在群集上创建新的网络策略对象。当没有选择某个 pod 的网络策略时，进出该 pod 的所有流量都是允许的。当您将网络策略应用于 pod 时，根据配置的不同，除了该网络策略允许的流量之外，去往和/或来自该 pod 的所有流量都会被阻止。
让我们试试这个:
1.  Start by creating a new cluster with network policies enabled. In this example, you'll create a cluster with Azure network policies enabled. You can create this new cluster using the following command:
    az aks 创建\
    -资源-组 rg-hand onaks \
    -名称 handsonaks \
    -启用-管理-身份\
    -节点数 2 \
    -节点虚拟机大小标准 _DS2_v2 \
    -生成-ssh-密钥\
    -网络-插件 azure \
    -网络-策略 azure
2.  Once the cluster is created, make sure to refresh the credentials to get access to the cluster. You can do this using the following command:
    az aks get-credentials-g rg-hand onaks-n hand onaks
    这将提示您覆盖现有凭据。在两个提示中输入 *y* 即可确认，如图*图 11.34* :
    ![Refresh the credentials by overwriting them to get access to the cluster](img/B17338_11_34.jpg)
    图 11.34:获取新集群的凭据
3.  For this example, you will test connections between two web servers in a pod running **nginx**. The code for these has been provided in the **web-server-a.yaml** and **web-server-b.yaml** files. This is the code for **web-server-a.yaml**:
    1 堆叠版本:v1
    2 个孩子:Pod
    3 元数据:
    4 名称:网络服务器-a
    5 个标签:
    6 应用:网络服务器
    7 环境:甲