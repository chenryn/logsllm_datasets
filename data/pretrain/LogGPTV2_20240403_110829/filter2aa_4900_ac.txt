.B "FUNCTIONS 函数"
章节)。
.SH 注释(COMMENTS)
在非交互的 shell 中或者使用内建命令
.B shopt
启用了
.B interactive_comments
选项的交互的 shell 中，以
.B #
起始的词使得这个词和所有同一行上所有剩余的字符都被忽略。没有启用
.B interactive_comments
选项的交互式 shell 不允许出现注释。这个选项在交互式 shell 中是默认启用的
(参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。
.SH 引用(QUOTING)
引用 \fIQuoting\fP 用来去掉特定字符或词的特殊意义。引用可以用来禁止对特殊字符的处理，
阻止保留字被识别，还用来阻止参数的扩展。
.PP
上面在
.SM
.B DEFINITIONS 定义
中列出的每个元字符 \fImetacharacters\fP 对于 shell 都有特殊意义。如果要表达它的本义，必须引用它。
.PP
在使用命令行历史扩展功能时，\fIhistory expansion\fP 字符，通常是 \fB!\fP，必须被引用，才不会进行历史扩展。
.PP
有三种引用机制：转义字符
.IR "(escape character)" ,
单引号和双引号。
.PP
一个未被引用的反斜杠 (\fB\e\fP) 是转义字符
.IR "escape character" 。
它保留其后下一个字符的字面意义，除非那是一个新行符。
如果 \fB\e\fP 和新行符成对出现，并且反斜杠自身没有被引用，那么 \fB\e\fP
被视为续行标志 (意思是，它被从输入流中删除并忽略了)。
.PP
将字符放在单引号之中，将保留引用中所有字符的字面意义。单引号不能包含在单引号引用之中，即使前面加上了反斜杠。
.PP
将字符放在双引号中，同样保留所有字符的字面意义，例外的情况是
.BR $ ,
.BR ` ,
和
.BR \e 。
字符
.B $
和
.B `
在双引号中仍然具有特殊意义。反斜杠只有后面是下列字符时才有特殊意义：
.BR $ ,
.BR ` ,
\^\fB"\fP\^,
.BR \e ,
或
.BR  .
双引号可以包含在双引号引用中，但要在前面加上一个反斜杠。
.PP
特殊的参数
.B *
和
.B @
在双引号中有特殊意义(参见下面的
.SM
.B PARAMETERS 参数
章节)。
.PP
形式为 \fB$\fP'\fIstring\fP' 的词会被特殊处理。它被扩展为 \fIstring\fP，其中的反斜杠转义字符
被替换为 ANSI C 标准中规定的字符。反斜杠转义序列，如果存在的话，将做如下转换：
.RS
.PD 0
.TP
.B \ea
alert (bell) 响铃
.TP
.B \eb
backspace 回退
.TP
.B \ee
an escape character 字符 Esc
.TP   
.B \ef
form feed 进纸
.TP  
.B \en
new line 新行符
.TP     
.B \er
carriage return 回车
.TP
.B \et
horizontal tab 水平跳格
.TP   
.B \ev
vertical tab 竖直跳格
.TP
.B \e\e
backslash 反斜杠
.TP
.B \e'
single quote 单引号
.TP   
.B \e\fInnn\fP
一个八比特字符，它的值是八进制值 \fInnn\fP (一到三个数字)。
.TP
.B \ex\fIHH\fP
一个八比特字符，它的值是十六进制值 \fIHH\fP (一到两个十六进制数字)。
.TP
.B \ec\fIx\fP
一个 ctrl-\fIx\fP 字符
.PD
.RE
.LP
扩展结果是单引号引用的，就好像 $ 符号不存在一样。
.PP
双引号引用字符串前面加上一个 \fB$\fP 符号将使得这个字符串被根据当前语言环境 (locale) 来翻译。
如果当前语言环境是 \fBC\fP 或者 \fBPOSIX\fP，这个符号将被忽略。
如果这个字符串被翻译并替换了，那么替换结果是双引号引用的。
.SH 参数(PARAMETERS)
一个参数
.I parameter
是一个储存值的实体。它可以是一个名称
.IR name ,
一个数字或者是下面
.BR "Special Parameters 特殊参数"
章节中列出的特殊字符之一。从 shell 的角度来看，一个变量
.I variable
是一个由名称
.IR name 
代表的参数。一个变量有一个值 \fIvalue\fP 以及零个或多个属性 \fIattibutes\fP。属性可以使用内建命令
.B declare
来设置(参见下面
.SM
.BR "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节中对
.B declare
的描述)。
.PP
如果给一个参数赋值，那么它就被定义了。空字符串是有效的值。一旦一个变量被定义了，它只能用内建命令
.B unset
来取消(参见下面
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节).
.PP
一个变量
.I variable
可以用这样的语句形式来赋值：
.RS
.PP
\fIname\fP=[\fIvalue\fP]
.RE
.PP
如果没有给出值
.I value，
变量就被赋为空字符串。所有值
.I values
都经过了波浪线扩展，参数和变量扩展，命令替换，算术扩展和引用的删除(参见下面的
.SM
.B EXPANSION 扩展
章节)。如果变量设置了
.B integer 整数
属性，那么值
.I value
将进行算术扩展，即使没有应用 $((...)) 扩展 (参见下面的
.SM
.B "Arithmetic Expansion 算术扩展"
章节)。
不会进行词的拆分，除非是下面
.BR "Special Parameters 特殊参数"
中提到的 \fB"$@"\fP。
不会进行路径的扩展。赋值语句也出现在下列内建命令中，作为它们的参数：
.BR declare ,
.BR typeset ,
.BR export ,
.BR readonly ,
和
.B local
。
.SS Positional Parameters 位置参数
.PP
位置参数
.I positional parameter
是以一或多个数字代表的参数，除了 0。位置参数是在 shell 启动时，根据它的参数来赋值的，
也可以用内建命令
.B set
来重新赋值。位置参数不能用赋值语句来赋值。在一个 shell 函数被执行的时候，位置参数会被暂时地替换掉
(参见下面的
.SM
.B FUNCTIONS 函数
章节)。
.PP
当位置参数由两个以上的数字构成时，它必须放在括号内 (参见下面的
.SM
.B EXPANSION 扩展
章节)。
.SS Special Parameters 特殊参数
.PP
shell 对一些参数做特殊处理。这些参数只能被引用而不能被赋值。
.PD 0
.TP
.B *
扩展为位置参数，从 1 开始。如果扩展发生在双引号中，它扩展为一个词，值是各个参数，以特殊变量
.SM
.B IFS
的第一个字符分隔。也就是说，"\fB$*\fP" 等价于
"\fB$1\fP\fIc\fP\fB$2\fP\fIc\fP\fB...\fP"，这里
.I c
是变量
.SM
.B IFS
的第一个字符。如果没有设置
.SM
.B IFS，
那么参数将用空格分隔。
.SM
.B IFS
.TP
.B @
扩展为位置参数，从 1 开始。如果扩展发生在双引号中，每个参数都将扩展为一个词。也就是说，
"\fB$@\fP" 等价于
"\fB$1\fP" "\fB$2\fP" ...
如果位置参数不存在，"\fB$@\fP" 和
.B $@
扩展为空 (即，它们被删除了)。
.TP
.B #
扩展为位置参数的个数，以十进制表示。
.TP
.B ?
扩展为最近执行的前台管道的状态。
.TP
.B \-
扩展为当前选项标志。标志是在启动时或以内建命令
.B set
指定的，或者是 shell 自身设置的 (例如选项
.B \-i
)。
.TP
.B $
扩展为 shell 的进程 ID。在一个 () 子 shell 中，它扩展为当前 shell 的
进程 ID 而不是子 shell 的。
.TP
.B !
扩展为最近一次执行的后台 (异步) 命令的进程号。
.TP
.B 0
扩展为 shell 或者 shell 脚本的名称。这个变量是在 shell 初始化时设置的。如果
.B bash
是执行脚本文件时启动的，
.B $0
将设置为那个文件的名称。如果
.B bash
启动时的参数包含
.B \-c，
那么
.B $0
被设置为启动命令行被执行后的第一个参数，如果有的话。否则，它被设置为用来启动
.BR bash 
的文件名，就是参数 0。
.TP
.B _
shell 启动时，设置为 shell 或参数中被执行的 shell 脚本的绝对路径名。
然后，在扩展时扩展为上一个命令的最后一个参数。它也被设置为被执行的每个命令的文件全名并且
被设置到这个命令执行的环境当中。当检查邮件时，这个参数保存着正在检查的邮件文件的名称。
.PD
.SS Shell Variables 变量
.PP
shell 定义了下列变量：
.PP
.PD 0
.TP
.B BASH
扩展为用来启动当前
.BR bash 
实例的文件全名。
.TP
.B BASH_VERSINFO
一个只读数组变量，成员保存着当前 
.BR bash 
实例的版本信息。赋予数组元素的值是如下这些：
.sp .5
.RS
.PD 0
.TP 24
.B BASH_VERSINFO[\fR0\fP]
主版本号 (\fIrelease\fP).
.TP
.B BASH_VERSINFO[\fR1\fP]
次版本号 (\fIversion\fP).
.TP
.B BASH_VERSINFO[\fR2\fP]
补丁版本
.TP
.B BASH_VERSINFO[\fR3\fP]
编译信息
.TP
.B BASH_VERSINFO[\fR4\fP]
发布时的状态 (例如, \fIbeta1\fP).
.TP
.B BASH_VERSINFO[\fR5\fP]
\fBMACHTYPE\fP 平台类型
.PD
.RE
.TP
.B BASH_VERSION
扩展为一个字符串，描述了这个
.BR bash .
实例的版本。
.TP
.B COMP_CWORD
\fB${COMP_WORDS}\fP 的索引，指向当前光标位置所在的词。
这个变量只有在被可编程补全功能 (参见下面的 \fBProgrammable Completion\fP 章节) 调用的 shell 函数中才可用。
.TP
.B COMP_LINE
当前命令行。这个变量只有在被命令补全功能调用的 shell 函数和外部命令中才可用。
.TP
.B COMP_POINT
相对于当前命令起始处的当前光标位置。如果当前光标位置是当前命令的末端，
它的值就和 \fB${#COMP_LINE}\fP 相等。
这个变量只有在被命令补全功能调用的 shell 函数和外部命令中才可用。
.TP
.B COMP_WORDS
一个数组变量 (参见下面的 \fBArrays\fP(数组)一节)，由当前命令行的各个单词构成。
这个变量只有在被命令补全功能调用的 shell 函数中才可用。
.TP
.B DIRSTACK
一个数组变量，包含当前目录栈的内容。栈中的目录排列的顺序就是用内建命令
.B dirs
显示时的顺序。对这个数组变量的成员赋值可以用来修改栈中已有的目录，但是要添加和删除目录就必须使用
内建命令
.B pushd
和
.B popd。
对它赋值不会改变当前目录。如果取消了
.SM
.B DIRSTACK
的定义，它就失去了它的特殊意义，即使后来重新定义它。
.TP
.B EUID
扩展为当前用户的有效用户 ID。它在 shell 启动时设置。它是只读的。
.TP
.B FUNCNAME
当前执行的 shell 函数名。这个变量只有在执行一个 shell 函数时存在。向
.SM
.B FUNCNAME
赋值没有效果并且返回一个错误。如果取消了
.SM
.B FUNCNAME