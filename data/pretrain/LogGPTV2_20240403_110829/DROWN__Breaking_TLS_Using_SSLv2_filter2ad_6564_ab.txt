USENIX Association  
25th USENIX Security Symposium  691
3
SSLv2 ClientSSLv2 ClientSSLv2ServerSSLv2ServerClientHello: csC, rCClientMasterKey: cs,mkclear , encpk(mksecret )(Client-) FinishedServerVerify(Server-) Finishedmaster_key = mkclear || mksecret ServerHello: cert, csS, rS client then sends ChangeCipherSpec and Finished
messages. The Finished message authenticates all pre-
vious handshake messages using the derived keys. The
server responds with its own ChangeCipherSpec and
Finished messages.
The two main details relevant to our attacks are:
• The premaster secret is always 48 bytes long, inde-
pendent of the chosen cipher suite. This is also true
for export cipher suites.
• After receiving the ClientKeyExchange message,
the server waits for the ClientFinished message,
in order to authenticate the client.
2.3 Bleichenbacher’s attack
Bleichenbacher’s attack is a padding oracle attack—it
exploits the fact that RSA ciphertexts should decrypt to
PKCS#1 v1.5-compliant plaintexts. If an implementation
receives an RSA ciphertext that decrypts to an invalid
PKCS#1 v1.5 plaintext, it might naturally leak this infor-
mation via an error message, by closing the connection,
or by taking longer to process the error condition. This
behavior can leak information about the plaintext that can
be modeled as a cryptographic oracle for the decryption
process. Bleichenbacher [8] demonstrated how such an
oracle could be exploited to decrypt RSA ciphertexts.
Algorithm. In the simplest attack scenario, the attacker
has a valid PKCS#1 v1.5 ciphertext c0 that they wish to
decrypt to discover the message m0. They have no access
to the private RSA key, but instead have access to an
oracle O that will decrypt a ciphertext c and inform the
attacker whether the most significant two bytes match the
required value for a correct PKCS#1 v1.5 padding:
if m = cd mod N starts with 0x00 02
otherwise.
O(c) =(cid:31)1
If the oracle answers with 1, the attacker knows that
2B ≤ m ≤ 3B− 1, where B = 28((cid:31)m−2). The attacker can
take advantage of RSA malleability to generate new can-
didate ciphertexts for any s:
0
c = (c0 · se) mod N = (m0 · s)e mod N
The attacker queries the oracle with c. If the oracle re-
sponds with 0, the attacker increments s and repeats the
previous step. Otherwise, the attacker learns that for
some r, 2B ≤ m0s− rN < 3B. This allows the attacker to
reduce the range of possible solutions to:
3B + rN
2B + rN
s
≤ m0 <
s
The attacker proceeds by refining guesses for s and r
values and successively decreasing the size of the interval
containing m0. At some point the interval will contain a
single valid value, m0. Bleichenbacher’s original paper
describes this process in further detail [8].
4
Countermeasures. In order to protect against this attack,
the decrypter must not leak information about the PKCS#1
v1.5 validity of the ciphertext. The ciphertext does not
decrypt to a valid message, so the decrypter generates a
fake plaintext and continues the protocol with this decoy.
The attacker should not be able to distinguish the resulting
computation from a correctly decrypted ciphertext.
In the case of SSL/TLS, the server generates a ran-
dom premaster secret to continue the handshake if the
decrypted ciphertext is invalid. The client will not pos-
sess the session key to send a valid ClientFinished
message and the connection will terminate.
3 Breaking TLS with SSLv2
In this section, we describe our cross-protocol DROWN
attack that uses an SSLv2 server as an oracle to efficiently
decrypt TLS connections. The attacker learns the session
key for targeted TLS connections but does not learn the
server’s private RSA key. We first describe our techniques
using a generic SSLv2 oracle. In Section 4.1, we show
how a protocol flaw in SSLv2 can be used to construct
such an oracle, and describe our general DROWN attack.
In Section 5, we show how an implementation flaw in
common versions of OpenSSL leads to a more powerful
oracle and describe our efficient special DROWN attack.
We consider a server accepting TLS connections from
clients. The connections are established using a secure,
state-of-the-art TLS version (1.0–1.2) and a TLS_RSA ci-
pher suite with a private key unknown to the attacker.
The same RSA public key as the TLS connections is
also used for SSLv2. For simplicity, our presentation will
refer to the servers accepting TLS and SSLv2 connections
as the same entity.
Our attacker is able to passively eavesdrop on traffic
between the client and server and record RSA-based TLS
traffic. The attacker may or may not be also required
to perform active man-in-the-middle interference, as ex-
plained below.
The attacker can expect to decrypt one out of 1,000
intercepted TLS connections in our attack for typical pa-
rameters. This is a devastating threat in many scenarios.
For example, a decrypted TLS connection might reveal
a client’s HTTP cookie or plaintext password, and an at-
tacker would only need to successfully decrypt a single
ciphertext to compromise the client’s account. In order
to collect 1,000 TLS connections, the attacker might sim-
ply wait patiently until sufficiently many connections are
recorded. A less patient attacker might use man-in-the-
middle interference, as in the BEAST attack [14].
3.1 A generic SSLv2 oracle
Our attacks make use of an oracle that can be queried on
a ciphertext and leaks information about the decrypted
plaintext; this abstractly models the information gained
692  25th USENIX Security Symposium 
USENIX Association
from an SSLv2 server’s behavior. Our SSLv2 oracles re-
veal many bytes of plaintext, enabling an efficient attack.
Our cryptographic oracle O has the following function-
ality: O decrypts an RSA ciphertext c and responds with
ciphertext validity based on the decrypted message m.
The ciphertext is valid only if m starts with 0x00 02 fol-
lowed by non-null padding bytes, a delimiter byte 0x00,
and a master_key mksecret of correct byte length (cid:31)k. We
call such a ciphertext SSLv2 conformant.
All of the SSLv2 padding oracles we instantiate give
the attacker similar information about a PKCS#1 v1.5
conformant SSLv2 ciphertext:
O(c) =(cid:31)mksecret
0
if cd mod N = 00||02||PS||00||mksecret
otherwise.
That is, the oracle O(c) will return the decrypted message
mksecret if it is queried on a PKCS#1 v1.5 conformant
SSLv2 ciphertext c corresponding to a correctly PKCS#1
v1.5 padded encryption of mksecret. The attacker then
learns (cid:31)k + 3 bytes of m = cd mod N: the first two bytes
are 00||02, and the last (cid:31)k + 1 bytes are 00||mksecret. The
length (cid:31)k of mksecret varies based on the cipher suite used
to instantiate the oracle. For export-grade cipher suites
such as SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5, k
will be 5 bytes, so the attacker learns 8 bytes of m.
3.2 DROWN attack template
Our attacker will use an SSLv2 oracle O to decrypt a
TLS ClientKeyExchange. The behavior of O poses two
problems for the attacker. First, a TLS key exchange ci-
phertext decrypts to a 48-byte premaster secret. But since
no SSLv2 cipher suites have 48-byte key strengths, this
means that a valid TLS ciphertext is invalid to our oracle
O. In order to apply Bleichenbacher’s attack, the attacker
must transform the TLS ciphertext into a valid SSLv2 key
exchange message. Second, O is very restrictive, since
it strictly checks the length of the unpadded message.
According to Bardou et al. [4], Bleichenbacher’s attack
would require 12 million queries to such an oracle.1
Our attacker overcomes these problems by following
this generic attack flow:
0. The attacker collects many encrypted TLS RSA key
exchange messages.
1. The attacker converts one of the intercepted TLS
ciphertexts containing a 48-byte premaster secret to
an RSA PKCS#1 v1.5 encoded ciphertext valid to
the SSLv2 oracle O.
2. Once the attacker has obtained a valid SSLv2 RSA
ciphertext, they can continue with a modified version
of Bleichenbacher’s attack, and decrypt the message
after many more oracle queries.
1See Table 1 in [4]. The oracle is denoted with the term FFF.
3. The attacker then transforms the decrypted plaintext
back into the original plaintext, which is one of the
collected TLS handshakes.
We describe the algorithmic improvements we use to
make each of these steps efficient below.
3.2.1 Finding an SSLv2 conformant ciphertext
The first step for the attacker is to transform the original
TLS ClientKeyExchange message c0 from a TLS con-
formant ciphertext into an SSLv2 conformant ciphertext.
For this task, we rely on the concept of trimmers, which
were introduced by Bardou et al. [4]. Assume that the mes-
d mod N is divisible by a small number t. In
sage m0 = c0
that case, m0 ·t−1 mod N simply equals the natural num-
ber m0/t. If we choose u ≈ t, and multiply the original
message by u·t−1, the resulting number will lie near the
original message: m0 ≈ m0/t · u.
This method gives a good chance of generating a new
SSLv2 conformant message. Let c0 be an intercepted
TLS conformant RSA ciphertext, and let m0 = cd
0 mod N
be the plaintext. We select a multiplier s = u/t mod N =
ut−1 mod N where u and t are coprime, compute the value
c1 = c0se mod N, and query O(c1). We will receive a
response if m1 = m0 · u/t is SSLv2 conformant.
As an example, let us assume a 2048-bit RSA cipher-
text with (cid:31)k = 5, and consider the fraction u = 7,t = 8.
The probability that c0 · u/t will be SSLv2 conformant is
1/7,774, so we expect to make 7,774 oracle queries be-
fore obtaining a positive response from O. Appendix A.1
gives more details on computing these probabilities.
3.2.2 Shifting known plaintext bytes
Once we have obtained an SSLv2 conformant ciphertext
c1, the oracle has also revealed the (cid:31)k + 1 least significant
bytes (mksecret together with the delimiter byte 0x00) and
two most significant 0x00 02 bytes of the SSLv2 confor-
mant message m1. We would like to rotate these known
bytes around to the right, so that we have a large block
of contiguous known most significant bytes of plaintext.
In this section, we show that this can be accomplished
by multiplying by some shift 2−r mod N. In other words,
given an SSLv2 conformant ciphertext c1 = me
1 mod N,
we can efficiently generate an SSLv2 conformant cipher-
text c2 = me
2 mod N where m2 = s· m1 · 2−r mod N and
we know several most significant bytes of m2.
Let R = 28(k+1) and B = 28((cid:31)m−2). Abusing notation
slightly, let the integer m1 = 2· B + PS· R + mksecret be
the plaintext satisfying me
1 = c1 mod N. At this stage, the
(cid:31)k-byte integer mksecret is known and the (cid:31)m − (cid:31)k − 3-byte
integer PS is not.
Let ˜m1 = 2· B + mksecret be the known components of
m1, so m1 = ˜m1 + PS· R. We can use this to compute a
new plaintext for which we know many most significant
USENIX Association  
25th USENIX Security Symposium  693
5
bytes. Consider the value:
m1 · R−1 mod N = ˜m1 · R−1 + PS mod N.
The value of PS is unknown and consists of (cid:30)m − (cid:30)k − 3
bytes. This means that the known value ˜m1 · R−1 shares
most of its (cid:30)k + 3 most significant bytes with m1 · R−1.
Furthermore, we can iterate this process by finding a
new multiplier s such that m2 = s· m1 · R−1 mod N is also
SSLv2 conformant. A randomly chosen s < 230 will work
with probability 2−25.4. We can take use the bytes we have
already learned about m1 to efficiently compute such an s
with only 678 oracle queries in expectation for a 2048-bit
RSA modulus. Appendix A.3 gives more details.
3.2.3 Adapted Bleichenbacher iteration
It is feasible for all of our oracles to use the previous
technique to entirely recover a plaintext message. How-
ever, for our SSLv2 protocol oracle it is cheaper after a
few iterations to continue using Bleichenbacher’s original
attack. We can apply the original algorithm proposed by
Bleichenbacher as described in Section 2.3.
Each step obtains a message that starts with the required
0x00 02 bytes after two queries in expectation. Since we
know the value of the (cid:30)k + 1 least significant bytes after
multiplying by any integer, we can query the oracle only
on multipliers that cause the ((cid:30)k + 1)st least significant
byte to be zero. However, we cannot ensure that the
padding string is entirely nonzero; for a 2048-bit modulus
this will hold with probability 0.37.
For a 2048-bit modulus, the total expected number of
queries when using this technique to fully decrypt the
plaintext is 2048∗ 2/0.37 ≈ 11,000.
4 General DROWN
In this section, we describe how to use any correct SSLv2
implementation accepting export-grade cipher suites as a
padding oracle. We then show how to adapt the techniques
described in Section 3.2 to decrypt TLS RSA ciphertexts.
4.1 The SSLv2 export padding oracle
SSLv2 is vulnerable to a direct message side channel
vulnerability exposing a Bleichenbacher oracle to the
attacker. The vulnerability follows from three prop-
erties of SSLv2.
the server immediately re-
sponds with a ServerVerify message after receiving the
ClientMasterKey message, which includes the RSA ci-
phertext, without waiting for the ClientFinished mes-
sage that proves the client knows the RSA plaintext. Sec-
ond, when choosing 40-bit export RC2 or RC4 as the sym-
metric cipher, only 5 bytes of the master_key (mksecret)
are sent encrypted using RSA, and the remaining 11 bytes
are sent in cleartext. Third, a server implementation that
correctly implements the anti-Bleichenbacher counter-
measure and receives an RSA key exchange message with
invalid padding will generate a random premaster secret
First,
Figure 2: SSLv2-based Bleichenbacher attack on TLS.
An attacker passively collects RSA ciphertexts from a
TLS 1.2 handshake, and then performs oracle queries
against a server that supports SSLv2 with the same public
key to decrypt the TLS ciphertext.
and carry out the rest of the TLS handshake using this
randomly generated key material.
This allows an attacker to deduce the validity of RSA
ciphertexts in the following manner:
1. The attacker sends a ClientMasterKey message,
which contains an RSA ciphertext c0 and any
choice of 11 clear key bytes for mkclear. The
server responds with a ServerVerify message,
which contains the challenge encrypted using the
server_write_key.
the 5 bytes of
2. The attacker performs an exhaustive search over
the possible values of
the
master_key mksecret, computes the correspond-
ing server_write_key, and checks whether the
ServerVerify message decrypts to challenge.
One value should pass this check; call it mk0. Re-
call that if the RSA plaintext was valid, mk0 is the