 AwsvpcConfiguration:
 SecurityGroups:
 - !Ref ApplicationSecurityGroup
 Subnets:
            - !Ref PrivateSubnet
      LoadBalancers:
        - ContainerName: todobackend
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationServiceTargetGroup
 # The Role property has been removed
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
...
...
```
Configuring ECS services to use task networking
在前面的示例中，名为`NetworkConfiguration`的新属性被添加到 ECS 服务定义中。每当您启用任务网络时，此属性都是必需的，您可以看到您需要配置与将由 ECS 创建的 ENI 相关联的子网和安全组。请注意，您引用了本章前面创建的`PrivateSubnet`资源，这确保了您的容器网络接口不会直接从互联网到达。一个不太明显的变化是`Role`属性被删除了——每当您使用一个使用 ECS 任务网络的 ECS 服务时，AWS 会自动配置 ECS 角色，如果您试图设置该角色，将会引发一个错误。
# 为任务网络配置支持资源
如果您回顾一下前面的示例，您会注意到您引用了一个名为`ApplicationSecurityGroup`的新安全组，它需要添加到您的模板中，如下例所示:
```
...
...
 ApplicationSecurityGroup:
Type: AWS::EC2::SecurityGroup
 Properties:
 GroupDescription: !Sub ${AWS::StackName} Application Security Group
 VpcId: !Ref VpcId
 SecurityGroupEgress:
 - IpProtocol: udp
 FromPort: 53
 ToPort: 53
 CidrIp: 0.0.0.0/0
 - IpProtocol: tcp
 FromPort: 443
 ToPort: 443
 CidrIp: 0.0.0.0/0
  ...
  ...
  ApplicationLoadBalancerToApplicationIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
 FromPort: 8000
 ToPort: 8000
 GroupId: !Ref ApplicationSecurityGroup
      SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
  ApplicationLoadBalancerToApplicationEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
 FromPort: 8000
 ToPort: 8000
      GroupId: !Ref ApplicationLoadBalancerSecurityGroup
 DestinationSecurityGroupId: !Ref ApplicationSecurityGroup
  ...
  ...
  ApplicationToApplicationDatabaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      GroupId: !Ref ApplicationDatabaseSecurityGroup
 SourceSecurityGroupId: !Ref ApplicationSecurityGroup
  ApplicationToApplicationDatabaseEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
GroupId: !Ref ApplicationSecurityGroup
      DestinationSecurityGroupId: !Ref ApplicationDatabaseSecurityGroup
...
...
```
Configuring security groups for task networking
在前面的示例中，您首先创建了一个安全组，其中包含一个允许出站 DNS 和 HTTPS 流量的出口规则集，这是允许容器中的入口点脚本与 AWS 机密管理器 API 通信所必需的。请注意，您需要修改现有的`AWS::EC2::SecurityGroupIngress`和`AWS::EC2::SecurityGroupEgress`资源，它们之前允许在应用负载平衡器/应用数据库和应用自动缩放组实例之间进行访问。您可以看到，对于`ApplicationLoadBalancerToApplicationEgress`和`ApplicationLoadBalancerToApplicationEgress`资源，端口范围已经从`32768`的短暂端口范围减少到`60999`到仅端口`8000`，这导致了更安全的配置。此外，ECS 容器实例控制平面(与`ApplicationAutoscalingSecurityGroup`资源相关联)现在不能再访问您的应用数据库(现在只有您的应用可以这样做)，这同样更加安全。
There's one problem with the current modifications to the todobackend stack, which is that you have not updated your `MigrateTaskDefinition` to use task networking. The main reason I am not doing this is because it would require your ECS container instances to support more elastic network interfaces than what the free tier t2.micros supports, and also would require the ECS Task Runner custom resource to be updated to support running ad-hoc ECS tasks. Of course if you want to use ECS task networking in a production environment, you would need to address such concerns, however for the purposes of providing a basic understanding of ECS task networking, I have chosen not to do this. This does mean if you make any change that requires the migrate task to be run, it will fail with the configuration changes of the previous example, however, once this chapter is complete, you will revert your todobackend stack configuration to not use ECS task networking to ensure you can complete the remaining chapters.
最后，您需要对模板进行最后一项更改，即修改与您的 ECS 服务相关联的应用负载平衡器目标组。当您的 ECS 服务运行以`awsvpc`网络模式运行的任务时，您必须将目标组类型从默认的`instance`更改为`ip`值，如下例所示，因为您的 ECS 任务现在有了自己唯一的 IP 地址:
```
Resources:
 ...
 ...
 ApplicationServiceTargetGroup:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties:
       Protocol: HTTP
       Port: 8000
       VpcId: !Ref VpcId
       TargetType: ip
       TargetGroupAttributes:
         - Key: deregistration_delay.timeout_seconds
           Value: 30
 ...
 ...
```
Updated application-load-balancer target group target type
# 部署和测试 ECS 任务网络
您现在可以部署您的更改，并验证 ECS 任务网络是否正常工作。如果运行`aws cloudformation deploy`命令，会发生以下情况:
*   将创建应用任务定义的新版本，该版本是为 ECS 任务网络配置的。
*   ECS 服务配置将检测到这些更改，并尝试部署新版本以及 ECS 服务配置更改。ECS 将动态地将新的 ENI 连接到专用子网，并将这个 ENI 分配给`ApplicationService`资源的新 ECS 任务。
部署完成后，您应该验证您的应用是否仍在工作，完成后，您可以浏览到 ECS 控制台，单击您的 ECS 服务，并选择为该服务运行的当前任务。
以下屏幕截图显示了 ECS 任务屏幕:
![](img/08553c56-6741-4783-b651-bb2a69b13d8b.png)
ECS task in task networking mode
如您所见，任务的网络模式现在是`awsvpc`，并且已经从您在本章前面创建的专用子网中动态分配了一个 ENI。如果您单击 ENI 标识链接，您将能够验证连接到 ENI 的安全组，并检查 ENI 是否已连接到您的一个 ECS 容器实例。
此时，您应该将本章中所做的最后一组更改提交给 ECS 任务网络分支，签出主分支，并重新部署您的云信息栈。这将恢复本章中所做的所有更改，将栈恢复到上一章结束时的状态。这是必需的，因为我们不想升级到更大的实例类型来容纳`MigrateTaskDefinition`资源和我们将在后面章节测试的未来自动扩展场景:
```
> git commit -a -m "Add ECS task networking resources"
 [ecs-task-networking 7e995cb] Add ECS task networking resources
 2 files changed, 37 insertions(+), 10 deletions(-)
> git checkout master
Switched to branch 'master'
> aws cloudformation deploy --template-file stack.yml --stack-name todobackend \
 --parameter-overrides $(cat dev.cfg) --capabilities CAPABILITY_NAMED_IAM
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
```
Reverting the todobackend-aws repository
# 摘要
在本章中，您学习了如何使用 ECS 任务网络来增加 Docker 应用的网络隔离和安全性。ECS 任务联网将默认的现成 Docker 桥和 NAT 网络配置更改为每个 ECS 任务接收自己的专用弹性网络接口或 ENI 的模式。这意味着您的 Docker 应用被分配了自己的专用安全组，并且可以通过其发布的端口直接访问，这避免了实现可能影响性能并需要更宽松的安全规则才能工作的功能(如动态端口映射)的需要。然而，ECS 任务联网也有其自身的一系列挑战和限制，包括更复杂的网络拓扑以适应当前仅私有 IP 地址的限制，以及每个 ENI 只能运行一个 ECS 任务的能力。
ECS 任务网络目前不支持公共 IP 地址，这意味着如果您的任务需要出站互联网连接，则必须提供 NAT 网关或 HTTP 代理。NAT 网关是由 AWS 提供的托管服务，您学习了如何配置用于 ECS 任务的专用子网，以及如何配置专用路由表以将互联网流量路由到您在预先存在的公共子网之一中创建的 NAT 网关。
您了解到，配置 ECS 任务网络需要您在 ECS 任务定义中指定 awsvpc 网络模式，并且您需要向 ECS 服务添加网络配置，该配置指定您的 ECS 任务将连接到的子网以及将应用的安全组。如果您的应用由应用负载平衡器提供服务，您还需要确保链接到您的 ECS 服务的目标组的目标类型配置为`ip`，而不是默认的`instance`目标类型。如果要将这些更改应用于现有环境，您可能还需要更新附加到资源(如负载平衡器和数据库)的安全组，因为您的 ECS 任务不再与应用于 ECS 容器实例级别的安全组相关联，并且有自己的专用安全组。
在接下来的两章中，您将学习如何处理 ECS 的一些更具挑战性的操作方面，包括管理 ECS 容器实例的生命周期和自动扩展 ECS 集群。
# 问题
1.  对/错:默认的 Docker 网络配置使用 iptables 来执行网络地址转换。
2.  您有一个应用，它形成应用级集群，并使用 EC2 元数据来发现运行您的应用的其他主机的 IP 地址。当您使用 ECS 运行您的应用时，您注意到您的应用使用的是`172.16.x.x/16`地址，但是您的 EC2 实例配置的是`172.31.x.x/16`地址。哪些 Docker 网络模式可以帮助解决这个问题？
3.  对/错:您的电子控制系统任务定义中`NetworkMode`的`host`值启用电子控制系统任务联网。
4.  您可以为 ECS 任务定义启用 ECS 任务网络，但是您的应用负载平衡器无法再到达您的应用。您检查附加到 ECS 容器实例的安全组的规则，并确认您的负载平衡器被允许访问您的应用。您如何解决这个问题？
5.  您可以为 ECS 任务定义启用 ECS 任务网络，但是您的容器在启动时会出现错误，无法到达位于互联网上的位置。您如何解决这个问题？
6.  t2.micro 实例上最多可以运行多少个 ENi？
7.  在 t2.micro 实例上，您可以在任务网络模式下运行的 ECS 任务的最大数量是多少？
8.  在 t2.micro 实例上，在任务网络模式下可以运行的最大容器数量是多少？
9.  启用 ECS 任务网络模式后，您会收到一个部署错误，指示目标组有一个目标类型实例，这与 awsvpc 网络模式不兼容。你如何解决这个问题？
10.  启用 ECS 任务网络模式后，您会收到一个部署错误，指出您无法为需要服务链接角色的服务指定 IAM 角色。你如何解决这个问题？
# 进一步阅读
您可以查看以下链接，了解有关本章所涵盖主题的更多信息:
*   Docker 网络概述:[https://docs.docker.com/network/](https://docs.docker.com/network/)
*   使用 awsvpc 进行任务联网网络模式:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/task-Networking . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
*   引擎盖下:亚马逊 ecs 的任务联网:[https://AWS . Amazon . com/blogs/compute/引擎盖下-亚马逊 ECS 的任务联网/](https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/)
*   EC2 实例类型的最大网络接口数:[https://docs . AWS . Amazon . com/AWSEC2/latest/user guide/using-Eni . html # availablepereni](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)
*   NAT 网关:[https://docs . AWS . Amazon . com/Amazon PC/latest/user guide/VPC-NAT-gateway . html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html)
*   CloudFormation NAT 网关资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-ec2-natgateway . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html)
*   CloudFormation EC2 弹性 IP 地址资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-properties-EC2-EIP . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html)
*   CloudFormation EC2 子网资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-EC2-Subnet . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html)
*   CloudFormation EC2 子网路由表关联资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-EC2-子网-路由表-assoc.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html)
*   CloudFormation EC2 路由表资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-EC2-路由表. html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html)
*   CloudFormation EC2 路由资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-EC2-Route . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html)
*   为亚马逊 ECS 使用服务链接角色:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/use-Service-link-Roles . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)