最近刷题的时候碰见的SSTI越来越多，就从Flask基础开始，学习一下Flask模块里面涉及的漏洞以及SSTI相关的知识进行一下总结，学习过程发现好多文章介绍SSTI的时候没有详细介绍过Flask基础的东西，导致对SSTI最初的了解有些困难，所以这里结合几个师傅写的系统总结一下Flask下SSTI漏洞的学习过程：
## Flask基础：
### Flask的安装：
    之前说过在python中安装外部插件时，使用的是pip包管理工具，这里也不例外，而且安装步骤很简单，直接输入指令：
    pip3 install flask
    注意，flask项目框架的运行，需要将app.py文件和flask扩展包在统一路径下
### Flask的测试：
    直接写一个测试脚本flask_test.py来测试flask框架是否运行正常：
    -*- coding: UTF-8 -*- 
    from flask import Flask
    app = Flask(__name__)   #创建一个flask实例
    @app.route('/')         #路由规则，即符合规则的url请求将会触发此函数
    def flask_test():
        return 'Flask Test Successful!'
    if __name__ == '__main__':  #如果是已主程序的方式启动（不是以导入模块的方式），则运行flask实例 
        app.run()               #app.run(debug=True)，即可开启debug模式
在终端运行：python
flask_test.py，即开启了一个访问地址为
### 代码解析：
  * 第一句用于指定编码格式，这是为了防止出现中文乱码而做的处理，第二句则是从flask框架中引入Flask类到当前应用中的方法：
  * 使用引入的Flask类创建一个flask实例，传入参数是此实例的唯一标示，就相当于启动了一个服务器服务，用于处理后续的处理：
    -*- coding: UTF-8 -*- 
    from flask import Flask
    app = Flask(__name__)       #创建一个flask实例
#### route路由 **:**
  * 服务器对于网络请求的识别，都是通过解析该网络请求的url地址和所携带的参数来完成的，这里也不例外，此处我们看到代码中的这句语句，它被称为路由，它的作用就是对网络请求进行筛选，每个route对应这一类请求类型：
  * route中所带的参数是一个字符串类型，它的内容就对应它要响应的标示，例如此处字符串为‘/’，表明当网络访问地址为“
    @app.route('/')
    def flask_test():
        return 'Flask Test Successful!'
  * 当然，我们也可以用route来监听带参数的url，例如：
    @app.route('/name/')
    def flask_test(name):
        return name + ',Flask Test Successful!'
  * 那么访问地址为： Test Successful!
#### main入口:
  * 当.py文件被直接运行时，`if __name__ == '__main__'`之下的代码块将被运行；当.py文件以模块形式被导入时，if name == ‘main‘之下的代码块不被运行。如果你经常以cmd方式运行自己写的python小脚本，那么不需要这个东西，但是如果需要做一个稍微大一点的python开发，写 if name ==’main__’ 是一个良好的习惯，大一点的python脚本要分开几个文件来写，一个文件要使用另一个文件，也就是模块，此时这个if就会起到作用不会运行而是类似于文件包含来使用。
    if __name__ == '__main__':
        app.debug = True
        app.run()
  * 测试的时候，我们可以使用debug，方便调试，增加一句
    app.debug = True
    app.run(debug=True)
  * 这样我们修改代码的时候直接保存，网页刷新就可以了，如果不加debug，那么每次修改代码都要运行一次程序，并且把前一个程序关闭。否则会被前一个程序覆盖。这会让操作系统监听所有公网 IP,此时便可以在公网上看到自己的web。
    app.run(host='0.0.0.0')
#### Debug：
  * flask编写的程序和php不一样，每一次变动都需要重启服务器来执行变更，就显得很麻烦，为了应对这种问题，flask中的debug模式可以在不影响服务器运行下，执行更新每一次的变更
  * debug=True
  * 只需要在app.run原基础上加上debug.True，或者直接app.debug=True
    from flask import Flask
    app = Flask(__name__)
    @app.route('/')
    def index():
        return 'Hello,world'
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
        # app.run('127.0.0.1','8080',debug=Ture)
#### 识别传入的参数:
  * 给url添加可以传入变量的地方，只需要在route中的路径后面添加标记，然后使用def接收，代码解释下
    from flask import Flask
    app = Flask(__name__)
    @app.route('/')
    def index():
        return 'Hello,vfree'
    @app.route('/user/')
    def user(username):
        return 'username：{0}'.format(username)
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
  * 看到第二个route出，其中加了/，这就是传入参数的接口，其中username相当于一个变量，将username放进def user()中，然后用format带入username
#### HTTP方法：
GET方法和POST方法
    from urllib import request
    from flask import Flask,request
    app = Flask(__name__)
    @app.route('/method',methods = ['GET','POST'])
    def method():
        if request.method == 'GET':
            return '现在的方法是GET'
        elif request.method == 'POST':
            return '现在的方法是POST'
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
仔细分析上面的代码，会发现多了一个request和methods
request主要是用于在判断时，获取当前页面的方法，如果直接打开URL，就会显示GET方法，如果使用POST，就会显示POST方法
  * route中，methods要有s，并且方法用[ ] 括起来，其次就是方法要大写，不能小写
  * request和requests不一样，request是包含在flask中的，而requests是请求网页的，不能混淆
  * 方法要大写，否则就会报错
**GET方法** :
  * 用`request.args.get('参数名')`来接收从url栏中传入的参数，其中参数名是自定义的，比如定义了tss，那么在url栏中只能填入tss=xxxxx
**POST方法:**
  * 和GET方法获取传入的值截然不同，POST方法用`request.form['参数名']`获取传入的参数值，和GET方法所介绍地一样，预定获取什么参数名就会获取传入地参数名中地参数
#### Redirect重定向:
这个关键字在flask中用于重定向，需要配合url_for使用，url_for使用于构造url，比如常见的用法就是在登陆页面，输入正确的账号密码后，重定向到另外一个页面中，接下来，请看代码演示:
    import time
    from flask import Flask,request,redirect,url_for
    app = Flask(__name__)
    @app.route('/login',methods = ['GET','POST'])
    def login():
        username = 'admin' # 定义username
        password =  'admin' # 定义password
        user = request.args.get('username') # 获取传入的用户名
        passwd = request.form['passwd']  # 获取传入的密码
        if user == username and passwd == password:  # 判断用户名和密码是否和预定义的一样
            return redirect(url_for('login_s'))  # 如果一样，则通过redirect和url_for重定向到login_s中
        else:
            return 'username or password error' # 错误则返回用户名或者密码错误
    @app.route('/login_s',methods = ['GET']) # 定义一个新的页面login_s
    def login_s():
            return '登录成功' # 返回登陆成功
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
  * Redirect和url_for也需要导入模块
  * url_for用于定义一个url，可以包含同文件下的其他路径，也可以包含外部文件
### 模板渲染：
单调的html看起来是枯燥乏味的，一个好看的html文件是有不同样式的文件组成的，因此，为了让模板看起来更好看，我们就需要对模板进行渲染，模板渲染需要注意一点，py文件和外部文件要放在同一个文件夹下，并且放置外部文件的文件夹名，要重命名为templates
#### render_template：
>
> 根据上面的文件夹规则，我们在templates创建了一个index.html，然后再py文件中定义好需要渲染的内容，使用字典格式(请看下面的代码例子)，一切准备就绪后，使用render_template将数据渲染过去index.html，如果有多个参数，请使用形参的形式传出，如下flask_tss.py文件代码所示，有三个参数，那么就用**contents传过去，contents是自定义的，这样子，参数值就会一个不落地传到index.html
>
> index.html文件中，需要使用格式为 `{{ 参数名 }}`接受参数值，比如`username:vfree`html文件中就是用`{{
> username }}`，注意，html文件获取参数一定要填入传过来的参数名
flask_tss.py文件：
    from importlib.resources import contents
    import time
    from flask import Flask,request,redirect,url_for,render_template
    app = Flask(__name__)
    @app.route('/')
    def index():
        contents = {
            'username':'vFREE',
            'year':'20',
            'Country':'China'
        }
        return render_template('index.html',**contents)
    if __name__ == '__main__':
        app.debug = True
        app.run('127.0.0.1','8080')
templates文件夹下的index.html
    Hello,{{username}}
    {{year}}
    {{Country}}
#### render_template_string:
这个使用于渲染字符串的一个函数，此函数可以将html代码变成字符串，
然后使用render_template_string(xxx)将文件渲染输出，这个可以用于没有外部文件的情况，直接再同文件下，定义好html代码，然后直接就可以渲染，render_template_string和render_template都是渲染，但是前者是字符串，后者是外部文件
注意：render_template和render_template_string都需要导入才可以使用
读取文件绕过：
    from flask import Flask,request,render_template_string
    app = Flask(__name__)
    @app.route("/")
    def index():
        return 'GET /view?filename=app.py'
    @app.route("/view")
    def viewFile():
        filename = request.args.get('filename')
        if("flag" in filename):
            return "WAF"
        if("cgroup" in filename):
            return "WAF"
        if("self" in filename):
            return "WAF"
        try:
            with open(filename, 'r') as f:
                templates='''
                文件存在
                {}
                '''.format(f.read())
                return render_template_string(templates)
        except Exception as e:
            templates='''
            文件不存在
            文件不存在
            '''
            return render_template_string(templates)
    if __name__ == "__main__":