{"destination.ip": {"dashed_name": "destination-ip", "description": "IP address of the destination (IPv4 or IPv6).", "flat_name": "destination.ip", "level": "core", "name": "ip", "normalize": [], "short": "IP address of the destination.", "type": "ip"}}
{"destination.mac": {"dashed_name": "destination-mac", "description": "MAC address of the destination.\nThe notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.", "example": "00-00-5E-00-53-23", "flat_name": "destination.mac", "ignore_above": 1024, "level": "core", "name": "mac", "normalize": [], "pattern": "^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$", "short": "MAC address of the destination."}}
{"destination.nat.ip": {"dashed_name": "destination-nat-ip", "description": "Translated ip of destination based NAT sessions (e.g. internet to private DMZ)\nTypically used with load balancers, firewalls, or routers.", "flat_name": "destination.nat.ip", "level": "extended", "name": "nat.ip", "normalize": [], "short": "Destination NAT ip", "type": "ip"}}
{"destination.nat.port": {"dashed_name": "destination-nat-port", "description": "Port the source session is translated to by NAT Device.\nTypically used with load balancers, firewalls, or routers.", "flat_name": "destination.nat.port", "format": "string", "level": "extended", "name": "nat.port", "normalize": [], "short": "Destination NAT Port", "type": "long"}}
{"destination.packets": {"dashed_name": "destination-packets", "description": "Packets sent from the destination to the source.", "example": 12, "flat_name": "destination.packets", "level": "core", "name": "packets", "normalize": [], "short": "Packets sent from the destination to the source.", "type": "long"}}
{"destination.port": {"dashed_name": "destination-port", "description": "Port of the destination.", "flat_name": "destination.port", "format": "string", "level": "core", "name": "port", "normalize": [], "short": "Port of the destination.", "type": "long"}}
{"destination.registered_domain": {"dashed_name": "destination-registered-domain", "description": "The highest registered destination domain, stripped of the subdomain.\nFor example, the registered domain for \"foo.example.com\" is \"example.com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as \"co.uk\".", "example": "example.com", "flat_name": "destination.registered_domain", "ignore_above": 1024, "level": "extended", "name": "registered_domain", "normalize": [], "short": "The highest registered destination domain, stripped of the subdomain."}}
{"destination.subdomain": {"dashed_name": "destination-subdomain", "description": "The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.\nFor example the subdomain portion of \"www.east.mydomain.co.uk\" is \"east\". If the domain has multiple levels of subdomain, such as \"sub2.sub1.example.com\", the subdomain field should contain \"sub2.sub1\", with no trailing period.", "example": "east", "flat_name": "destination.subdomain", "ignore_above": 1024, "level": "extended", "name": "subdomain", "normalize": [], "short": "The subdomain of the domain."}}
{"destination.top_level_domain": {"dashed_name": "destination-top-level-domain", "description": "The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is \"com\".\nThis value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as \"co.uk\".", "example": "co.uk", "flat_name": "destination.top_level_domain", "ignore_above": 1024, "level": "extended", "name": "top_level_domain", "normalize": [], "short": "The effective top level domain (com, org, net, co.uk)."}}
{"destination.user.domain": {"dashed_name": "destination-user-domain", "description": "Name of the directory the user is a member of.\nFor example, an LDAP or Active Directory domain name.", "flat_name": "destination.user.domain", "ignore_above": 1024, "level": "extended", "name": "domain", "normalize": [], "original_fieldset": "user", "short": "Name of the directory the user is a member of."}}
{"destination.user.email": {"dashed_name": "destination-user-email", "description": "User email address.", "flat_name": "destination.user.email", "ignore_above": 1024, "level": "extended", "name": "email", "normalize": [], "original_fieldset": "user", "short": "User email address."}}
{"destination.user.full_name": {"dashed_name": "destination-user-full-name", "description": "User's full name, if available.", "example": "Albert Einstein", "flat_name": "destination.user.full_name", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "destination.user.full_name.text", "name": "text", "type": "match_only_text"}], "name": "full_name", "normalize": [], "original_fieldset": "user", "short": "User's full name, if available."}}
{"destination.user.group.domain": {"dashed_name": "destination-user-group-domain", "description": "Name of the directory the group is a member of.\nFor example, an LDAP or Active Directory domain name.", "flat_name": "destination.user.group.domain", "ignore_above": 1024, "level": "extended", "name": "domain", "normalize": [], "original_fieldset": "group", "short": "Name of the directory the group is a member of."}}
{"destination.user.group.id": {"dashed_name": "destination-user-group-id", "description": "Unique identifier for the group on the system/platform.", "flat_name": "destination.user.group.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "group", "short": "Unique identifier for the group on the system/platform."}}
{"destination.user.group.name": {"dashed_name": "destination-user-group-name", "description": "Name of the group.", "flat_name": "destination.user.group.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "group", "short": "Name of the group."}}
{"destination.user.hash": {"dashed_name": "destination-user-hash", "description": "Unique user hash to correlate information for a user in anonymized form.\nUseful if `user.id` or `user.name` contain confidential information and cannot be used.", "flat_name": "destination.user.hash", "ignore_above": 1024, "level": "extended", "name": "hash", "normalize": [], "original_fieldset": "user", "short": "Unique user hash to correlate information for a user in anonymized form."}}
{"destination.user.id": {"dashed_name": "destination-user-id", "description": "Unique identifier of the user.", "example": "S-1-5-21-202424912787-2692429404-2351956786-1000", "flat_name": "destination.user.id", "ignore_above": 1024, "level": "core", "name": "id", "normalize": [], "original_fieldset": "user", "short": "Unique identifier of the user."}}
{"destination.user.name": {"dashed_name": "destination-user-name", "description": "Short name or login of the user.", "example": "a.einstein", "flat_name": "destination.user.name", "ignore_above": 1024, "level": "core", "multi_fields": [{"flat_name": "destination.user.name.text", "name": "text", "type": "match_only_text"}], "name": "name", "normalize": [], "original_fieldset": "user", "short": "Short name or login of the user."}}
{"destination.user.roles": {"dashed_name": "destination-user-roles", "description": "Array of user roles at the time of the event.", "example": "[\"kibana_admin\", \"reporting_user\"]", "flat_name": "destination.user.roles", "ignore_above": 1024, "level": "extended", "name": "roles", "normalize": ["array"], "original_fieldset": "user", "short": "Array of user roles at the time of the event."}}
{"device.id": {"dashed_name": "device-id", "description": "The unique identifier of a device. The identifier must not change across application sessions but stay fixed for an instance of a (mobile) device. \nOn iOS, this value must be equal to the vendor identifier (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android, this value must be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application.\nFor GDPR and data protection law reasons this identifier should not carry information that would allow to identify a user.", "example": "00000000-54b3-e7c7-0000-000046bffd97", "flat_name": "device.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "short": "The unique identifier of a device."}}
{"device.manufacturer": {"dashed_name": "device-manufacturer", "description": "The vendor name of the device manufacturer.", "example": "Samsung", "flat_name": "device.manufacturer", "ignore_above": 1024, "level": "extended", "name": "manufacturer", "normalize": [], "short": "The vendor name of the device manufacturer."}}
{"device.model.identifier": {"dashed_name": "device-model-identifier", "description": "The machine readable identifier of the device model.", "example": "SM-G920F", "flat_name": "device.model.identifier", "ignore_above": 1024, "level": "extended", "name": "model.identifier", "normalize": [], "short": "The machine readable identifier of the device model."}}
{"device.model.name": {"dashed_name": "device-model-name", "description": "The human readable marketing name of the device model.", "example": "Samsung Galaxy S6", "flat_name": "device.model.name", "ignore_above": 1024, "level": "extended", "name": "model.name", "normalize": [], "short": "The human readable marketing name of the device model."}}
{"dll.code_signature.digest_algorithm": {"dashed_name": "dll-code-signature-digest-algorithm", "description": "The hashing algorithm used to sign the process.\nThis value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.", "example": "sha256", "flat_name": "dll.code_signature.digest_algorithm", "ignore_above": 1024, "level": "extended", "name": "digest_algorithm", "normalize": [], "original_fieldset": "code_signature", "short": "Hashing algorithm used to sign the process."}}
{"dll.code_signature.exists": {"dashed_name": "dll-code-signature-exists", "description": "Boolean to capture if a signature is present.", "example": "true", "flat_name": "dll.code_signature.exists", "level": "core", "name": "exists", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if a signature is present.", "type": "boolean"}}
{"dll.code_signature.signing_id": {"dashed_name": "dll-code-signature-signing-id", "description": "The identifier used to sign the process.\nThis is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.", "example": "com.apple.xpc.proxy", "flat_name": "dll.code_signature.signing_id", "ignore_above": 1024, "level": "extended", "name": "signing_id", "normalize": [], "original_fieldset": "code_signature", "short": "The identifier used to sign the process."}}
{"dll.code_signature.status": {"dashed_name": "dll-code-signature-status", "description": "Additional information about the certificate status.\nThis is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.", "example": "ERROR_UNTRUSTED_ROOT", "flat_name": "dll.code_signature.status", "ignore_above": 1024, "level": "extended", "name": "status", "normalize": [], "original_fieldset": "code_signature", "short": "Additional information about the certificate status."}}
{"dll.code_signature.subject_name": {"dashed_name": "dll-code-signature-subject-name", "description": "Subject name of the code signer", "example": "Microsoft Corporation", "flat_name": "dll.code_signature.subject_name", "ignore_above": 1024, "level": "core", "name": "subject_name", "normalize": [], "original_fieldset": "code_signature", "short": "Subject name of the code signer"}}
{"dll.code_signature.team_id": {"dashed_name": "dll-code-signature-team-id", "description": "The team identifier used to sign the process.\nThis is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.", "example": "EQHXZ8M8AV", "flat_name": "dll.code_signature.team_id", "ignore_above": 1024, "level": "extended", "name": "team_id", "normalize": [], "original_fieldset": "code_signature", "short": "The team identifier used to sign the process."}}
{"dll.code_signature.timestamp": {"dashed_name": "dll-code-signature-timestamp", "description": "Date and time when the code signature was generated and signed.", "example": "2021-01-01T12:10:30Z", "flat_name": "dll.code_signature.timestamp", "level": "extended", "name": "timestamp", "normalize": [], "original_fieldset": "code_signature", "short": "When the signature was generated and signed.", "type": "date"}}
{"dll.code_signature.trusted": {"dashed_name": "dll-code-signature-trusted", "description": "Stores the trust status of the certificate chain.\nValidating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.", "example": "true", "flat_name": "dll.code_signature.trusted", "level": "extended", "name": "trusted", "normalize": [], "original_fieldset": "code_signature", "short": "Stores the trust status of the certificate chain.", "type": "boolean"}}
{"dll.code_signature.valid": {"dashed_name": "dll-code-signature-valid", "description": "Boolean to capture if the digital signature is verified against the binary content.\nLeave unpopulated if a certificate was unchecked.", "example": "true", "flat_name": "dll.code_signature.valid", "level": "extended", "name": "valid", "normalize": [], "original_fieldset": "code_signature", "short": "Boolean to capture if the digital signature is verified against the binary content.", "type": "boolean"}}
{"dll.hash.md5": {"dashed_name": "dll-hash-md5", "description": "MD5 hash.", "flat_name": "dll.hash.md5", "ignore_above": 1024, "level": "extended", "name": "md5", "normalize": [], "original_fieldset": "hash", "short": "MD5 hash."}}
{"dll.hash.sha1": {"dashed_name": "dll-hash-sha1", "description": "SHA1 hash.", "flat_name": "dll.hash.sha1", "ignore_above": 1024, "level": "extended", "name": "sha1", "normalize": [], "original_fieldset": "hash", "short": "SHA1 hash."}}
{"dll.hash.sha256": {"dashed_name": "dll-hash-sha256", "description": "SHA256 hash.", "flat_name": "dll.hash.sha256", "ignore_above": 1024, "level": "extended", "name": "sha256", "normalize": [], "original_fieldset": "hash", "short": "SHA256 hash."}}
{"dll.hash.sha384": {"dashed_name": "dll-hash-sha384", "description": "SHA384 hash.", "flat_name": "dll.hash.sha384", "ignore_above": 1024, "level": "extended", "name": "sha384", "normalize": [], "original_fieldset": "hash", "short": "SHA384 hash."}}