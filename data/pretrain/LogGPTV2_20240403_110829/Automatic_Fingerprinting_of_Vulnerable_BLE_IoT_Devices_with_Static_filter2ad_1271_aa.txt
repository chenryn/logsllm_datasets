title:Automatic Fingerprinting of Vulnerable BLE IoT Devices with Static
UUIDs from Mobile Apps
author:Chaoshun Zuo and
Haohuang Wen and
Zhiqiang Lin and
Yinqian Zhang
Automatic Fingerprinting of Vulnerable BLE IoT Devices with
Static UUIDs from Mobile Apps
Chaoshun Zuo
PI:EMAIL
The Ohio State University
Columbus, OH
Zhiqiang Lin
PI:EMAIL
The Ohio State University
Columbus, OH
Haohuang Wen
PI:EMAIL
The Ohio State University
Columbus, OH
Yinqian Zhang
PI:EMAIL
The Ohio State University
Columbus, OH
ABSTRACT
Being an easy-to-deploy and cost-effective low power wireless solu-
tion, Bluetooth Low Energy (BLE) has been widely used by Internet-
of-Things (IoT) devices. In a typical IoT scenario, an IoT device first
needs to be connected with its companion mobile app which serves
as a gateway for its Internet access. To establish a connection, a
device first broadcasts advertisement packets with UUIDs to nearby
smartphone apps. Leveraging these UUIDs, a companion app is able
to identify the device, pairs and bonds with it, and allows further
data communication. However, we show that there is a fundamental
flaw in the current design and implementation of the communi-
cation protocols between a BLE device and its companion mobile
app, which allows an attacker to precisely fingerprint a BLE device
with static UUIDs from the apps. Meanwhile, we also discover that
many BLE IoT devices adopt “Just Works” pairing, allowing attack-
ers to actively connect with these devices if there is no app-level
authentication. Even worse, this vulnerability can also be directly
uncovered from mobile apps. Furthermore, we also identify that
there is an alarming number of vulnerable app-level authentication
apps, which means the devices connected by these apps can be
directly controlled by attackers. To raise the public awareness of
BLE IoT device fingerprinting and also uncover these vulnerable
BLE IoT devices before attackers, we develop an automated mobile
app analysis tool BleScope and evaluate it with all of the free BLE
IoT apps in Google Play store. Our tool has identified 1,757 vulner-
able mobile apps in total. We also performed a field test in a 1.28
square miles region, and identified 5, 822 real BLE devices, among
them 5, 509 (94.6%) are fingerprintable by attackers, and 431 (7.4%)
are vulnerable to unauthorized access. We have made responsible
disclosures to the corresponding app developers, and also reported
the fingerprinting issues to the Bluetooth Special Interest Group.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354240
CCS CONCEPTS
• Security and privacy → Embedded systems security; Se-
curity protocols; Mobile and wireless security; Software re-
verse engineering; Privacy protections; Access control; Mobile
platform security.
KEYWORDS
Bluetooth low energy, device fingerprinting, mobile app analysis,
IoT security
ACM Reference Format:
Chaoshun Zuo, Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. 2019.
Automatic Fingerprinting of Vulnerable BLE IoT Devices with Static UUIDs
from Mobile Apps. In 2019 ACM SIGSAC Conference on Computer and Com-
munications Security (CCS ’19), November 11–15, 2019, London, United King-
dom. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3319535.
3354240
1 INTRODUCTION
Over the past few years, we have witnessed a huge increase in
the number of the Internet-of-Things (IoT) devices (e.g., sensors,
and actuators) running in various areas such as transportation,
healthcare, and smart homes. For an IoT device to be really useful
and intelligent, it has to be connected to the Internet. There are
three practical ways to do so today: using a cellular network, WiFi,
or other radio technology such as Bluetooth. Connecting directly
using a cellular network would be too costly. While it is cheaper to
use WiFi technology, it would be too energy-consuming. Therefore,
an easy-to-deploy, cost-effective, and low power solution is a key
requirement for IoT devices, especially for smaller ones.
Among all the radio technologies, Bluetooth Low Energy (BLE)
stands out and has been increasingly used by the IoT devices. It is
well suited for applications with small amounts of data transferring
as well as devices that require extremely low power consumption.
For instance, with BLE, an IoT device is even able to run for years
on a coin-cell battery. This is particularly appealing for industries
such as sports, healthcare, fitness, retail, and home entertainment.
In fact, many apps today have been built atop BLE connected IoT
devices in these application scenarios such as computer gaming,
fitness tracking, and indoor positioning.
Since there is a large amount of private information (e.g., health
information in the wearable devices) collected by BLE IoT devices,
there have been many attacks against them and their apps. For
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1469example, it has been discovered that BLE communication is subject
to man-in-the-middle (MITM) attack [17]. BLE credentials can be
sniffed [30, 42]. BLE devices can be penetrated [13]. Both mobile
apps and BLE devices can be spoofed [27, 29]. In addition, the
connection between BLE devices and mobile apps can be reused
by unauthorized co-located apps [31]. These vulnerabilities were
caused by a number of reasons such as a lack of secure pairing (e.g.,
via “Just Works” pairing protocol) or (weak) traffic encryption (e.g.,
no public key exchange in BLE v4.0 and v4.1 [30]) between devices
and apps.
While the recent development of BLE IoT devices has started
to involve authentication between devices and apps where users
need to enter credentials to connect with the IoT devices, in this
work we discover that many BLE IoT devices and mobile apps today
actually do not properly implement the app-level authentication. In
particular, we find that a great number of BLE IoT devices use “Just
Works” for pairing (no invocation of app-device bonding at all) ,
which allows any nearby attackers to arbitrarily connect to them
and possibly compromise device data and user privacy. Second,
even though they have app-level authentication, some of the imple-
mentations are flawed and the credentials can be directly extracted.
With such vulnerable BLE IoT devices and apps, malicious attack-
ers can easily break into the defense of these weakly authenticated
IoT devices and access the privacy-sensitive data in them. While
there could be still a number of challenges, such as how to identify
the vulnerable devices from various BLE peripherals around them,
we fortunately discovered that the universally unique identifier
(UUID) from the advertisement packets broadcast by the BLE de-
vices can fingerprint a BLE device and these broadcast packets are
not encrypted at all. In addition, these UUIDs can be obtained from
not only the BLE traffic but also the IoT companion mobile apps.
Astonishingly, UUID-based fingerprinting is universal and hard
to defeat. It comes from the fundamental design flaw requiring BLE
advertisement packets to contain predetermined UUIDs that must
be known to the nearby mobile apps otherwise the apps will not
be able to discover the BLE devices. Therefore, as demonstrated
in this paper, if attackers can first scan all mobile apps in an app
store, such as Google Play, to find all possible UUIDs, they can
fingerprint all BLE devices statically. Then with the fingerprinted
UUIDs, they can sniff all nearby advertisement packets in the field
(e.g., a metropolitan area such as New York City) to locate these
devices based on the fingerprinted UUIDs, thereby leading to a
serious privacy attack. If mobile apps also tell them that the device
uses “Just Works”, or has weak or no authentications, then the
attackers can directly exploit these BLE devices.
To validate our discovery and raise the public awareness, in
this paper, we develop an automatic tool BleScope to scan the
vulnerable BLE devices directly from mobile apps in Google Play.
Not all BLE devices are of our focus. Instead, we particularly focus
on the devices that are vulnerable to device UUID fingerprinting
(privacy attack), eavesdropping (including both passive and active),
and unauthorized access. Our key objective is to identify these
devices directly from mobile apps. With automated binary analysis
techniques such as backward slicing [26] and value-set analysis [12],
we have implemented BleScope to automatically scan mobile apps
to directly recognize the UUIDs, and identify insecure bonding
(such as “Just Works”) and vulnerable app-level authentications.
We have tested BleScope with all of the free Bluetooth apps in
Google Play, in which our tool discovered 168, 093 UUIDs (13, 566
unique ones) as well as 1, 757 vulnerable apps.
While typically BLE signals can only travel up to 100 meters,
with special receiver adapters and amplifiers, an attacker can sniff
the BLE signals up to 1,000 meters [8]. In this work, we have actually
built such a long range passive BLE sniffer with a Raspberry-PI and
a special BLE Antenna, and used it to detect real world instances
of these insecure BLE IoT devices. In a small area of 1.28 square
miles, our sniffer identified 5, 822 BLE devices, among which 5, 509
(94.6%) of them are fingerprintable based on the UUIDs extracted
from mobile apps. We also located 431 vulnerable devices, including
369 eavesdroppable devices and 342 unauthorizable access devices
in this area.
Contributions. In short, we make the following contributions:
• We are the first to discover that vulnerable BLE IoT devices
can be directly identified and fingerprinted due to the use of
pre-determined static UUIDs in both mobile apps and BLE
devices for BLE advertisement.
• We have implemented an automatic tool BleScope using
binary code analysis to directly scan mobile apps to harvest
UUIDs and meanwhile detect insecure IoT devices such as
those vulnerable to eavesdropping or completely taken over.
• We have tested our tool with 18, 166 BLE mobile apps from
Google Play store, and found 168, 093 UUIDs (13, 566 unique
ones) and 1, 757 vulnerable BLE IoT apps.
• We also present a set of countermeasures against the at-
tacks from three dimensions: channel-level protection, app-
level protection, and protocol-level protection (with dynamic
UUID generation).
Roadmap. The rest of this paper is organized as follows. We pro-
vide necessary background related to Bluetooth Low Energy and its
security in §2. Next, we describe the threat models and define the
analysis scope in §3. Then, we present an overview of BleScope
in §4, detail the design and implementations in §5, and present
the evaluation results in §6. In addition, we provide a set of coun-
termeasures against our attack in §7. Next, we discuss limitations
and future work in §8, followed by related works in §9. Finally, we
conclude in §10.
2 BACKGROUND
2.1 Bluetooth Low Energy
Bluetooth Low Energy (BLE), also known as Bluetooth 4.0, is a wire-
less network technology designed for devices consuming extremely
low energy, and is ubiquitous in our daily lives. It has been widely
deployed in various platforms including desktops, mobile smart-
phones, and IoT devices for various applications such as health care,
entertainment, and smart home. Figure 1 provides an overview of
the important procedures within the BLE workflow, which includes
(I) Connection, (II) Pairing and Bonding, and (III) Communication.
(I) Connection. When a BLE peripheral device wishes to establish
a connection, it will first constantly broadcast its advertisement
packets to indicate its willingness. The time interval between the
advertisement packets ranges from 20ms to 10.24 seconds, in step of
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1470Figure 2: Illustration of GATT hierarchy.
Figure 1: Bluetooth Low Energy workflow.
0.625ms, with an optional random delay ranging from 0ms to 10ms
added to avoid collisions [4]. Note that BLE advertising is one of the
most important aspects of BLE, and is mandatory for connection
between two BLE devices before communicating with each other.
During broadcast stage, all recipients within the range can scan
and receive all the advertised packets, and then decide to initiate a
connection with it. The peripheral that broadcasts advertisement
packets is called “slave”, while the other that scans for packets and
actively initiates the connection is called “master”. For example, in a
typical IoT scenario, a peripheral IoT device (e.g., a wearable device)
will broadcast packets to indicate its presence so that a companion
mobile app can scan for it and establish a connection.
(II) Pairing and Bonding. Right after the connection is estab-
lished, the master and the slave will start a pairing process, which
aims at establishing a secure channel by negotiating an encryption
key for communication. In general, they first exchange their pairing
features (e.g., input and output capabilities such as keyboard and
display) to decide which pairing protocol should be adopted. There
are usually four pairing protocols, including “Just Works”, “Passkey
Entry”, “Numeric Comparison” and “Out of Band (OOB)” [2]. For
example, “Passkey Entry” requires a user to enter a password to the
peripheral so input capability is required on the slave device. Next,
the key exchange process starts on the two devices to negotiate a
long term key based on the protocol. As for “Just Works”, it is the
only choice when the previous protocols are not applicable. After
the pairing process, a long term key (LTK) will be generated for
data encryption between the two devices. The bonding process will
store the LTK for later communication to make sure the established
channel is encrypted.
(III) Communication. After pairing and bonding, the master and
the slave are able to exchange data. The structure of data strictly
follows the Generic Attribute Profile (GATT) [7], which typically
has a hierarchical structure as illustrated in Figure 2.
A BLE device usually provides several services each of which
represents a specific property. Each service involves a number of
characteristics that store the actual values for the property. Ad-
ditionally, several descriptors are defined in a characteristic for
description purpose. Considering a heart rate monitor as an exam-
ple, it provides services including heart rate, battery, and device
information, as illustrated in Figure 2. For the heart rate service,
characteristics are defined for various properties such as heart rate
measurement and body sensor location, which contain the actual
values of heart rate and location [40]. There are two ways for a
master device to know the provided services and characteristics
from the slave. First, the master can browse the service list from the
advertisement packets, which is optionally defined. Second, a mas-
ter can request for a list of supported services and characteristics
after the connection is established.
UUID. A key ingredient in BLE world is the universally unique
identifier, short as UUID, which is a hexadecimal string used to
identify a specific BLE attribute including service, characteristic,
and descriptor. In general, BLE UUIDs can be categorized into two
types: standard ones and customized ones. The standard UUIDs
are defined and documented by the Bluetooth SIG [3], which share
a common base and use a 16-bit invariant to uniquely identify
themselves. The customized UUIDs are arbitrarily generated and
are vendor-specific. Note that the customized UUIDs cannot collide
with the standard ones on the common base [39].
The UUIDs are involved in the BLE packets along with their
indicated attributes such as services and characteristics if there is
any. They can be harvested either from the advertisement packets or
data packets after the connection is established. Also, interestingly,
for a mobile app to connect with a particular BLE device, it needs
to know the UUIDs of the device (which will be checked against
the ones in the advertisement packet). Therefore, UUID can also be
extracted from the BLE IoT mobile apps.
2. Scan1. Broadcast3. Connection requestSlaveMasterConnection4. Exchange pairing feature5. Authentication & key generation6. Key distributionPairing and BondingCommunicationWrite value on characteristicRead value on characteristicService ACharacteristic ADescriptorCharacteristic BDescriptorService BServicename: Heart rateuuid: 00000000-006a-746c-6165…characteristics: name: Heart rate measurementuuid: 00000002-006a-746c-6165…descriptors: […]name: Body sensor locationuuid: 00000004-006a-746c-6165…descriptors: […]Servicename: Batteryuuid: 180Fcharacteristics: […]… Characteristic CSession 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom14712.2 The Security of BLE
Since BLE data is transferred over the air, it is important to protect
the communication channel between the BLE slave and master. To
this end, BLE supports link layer encryption which is transparent to
the applications. However, the exchange of the cryptographic keys
for both encryption and authentication significantly varies depend-
ing on the user interfaces (e.g., keyboards, displays) provided by the
BLE devices, and how the BLE devices and mobile apps are paired.
For instance, a great number of IoT devices do not have any user
interface such as keyboard that allows external input so that some
pairing protocols such as “Numeric Comparison” and “Passkey
Entry” are not available. Also, “OOB” is not always practical since
not all devices contain Near Field Communication (NFC). Therefore,
many of the IoT devices today use “Just Works” pairing, which can
be insecure since they may be vulnerable to Man-In-The-Middle
(MITM) attack. Note that, technically “Just Works” is just a special
model of “Passkey Entry”, in which the passkey is a hardcoded PIN