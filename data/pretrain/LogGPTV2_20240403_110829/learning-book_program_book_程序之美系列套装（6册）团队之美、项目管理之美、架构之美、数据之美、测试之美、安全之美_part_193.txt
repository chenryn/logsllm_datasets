引起任何严重的问题，但是，有一个问题值得提一下：从非特权程
序到特权程序的转换是基于程序入口点在PEP表中的位置及环境寄
存器中priv位的值。在早期，这种利用就十分明显。如果你可以让
一个特权程序通过一个指针返回一个值并让这个程序以priv位的值
被设置的方式重写栈上保存的环境寄存器，这个进程可以依赖那个
程序的返回值保持特权。这是可调用程序的职责：检查它们的指针
参数以确保它们没有任何寻址异常，而且它们返回的值仅适用于用
户环境。程序setlooptimer（设置watchdog定时器并任意地返回原
值）中一个缺陷使变为SUPER.SUPER（root用户，拥有255、255
或-1的ID）成为可能。
proc make ^me^super main:
begin
1089
---
## Page 1091
int.ToS='S': -top of stack address
call setlooptimer (&2017): -set a timer value
call setlooptimer (0, @ros[4]) : -reset,return old value to
saved E reg
pcb[mypid.].pcbprocaid: =-1: -dick in my PCB and
make me super
end:
对setlooptimer的第二次调用把原值%2017返回给栈中保存的环境寄
存器的内容，尤其是设置priv位，这使这个进程处于特权状态。理
论上，这个值可能会缩减到%2016，但是，这没有任何区别（这是
保存的RP区域，不能恢复）。这个程序然后在它自己的进程控制块
（PCB）中使用相对SG的寻址来修改用户信息。mypid是返回当前
进程的PID的一个函数，而最后的8位（）是PIN，用作为
PCB表中的索引。
当然，这个缺陷很快就修复了，但是它显示了这种方式的一个缺
点：它依赖程序员去检查传给可调用程序的参数。在这个架构的整
个生命周期中，又重新出现了这样的问题。
8.9.7文件访问安全
Tandem文件访问安全的方式类似于UNIX的方式，但是，用户可以
只属于单个组，那是用户名的一部分。因此，我的用户名
SUPPORT.GREG（用数字写成20，102）表示我只属于SUPPORT组
（20），而在那个组内我的用户ID是102。这些字段的每一个都是8
位长，所以，完整的用户ID正好一个字。如果我要成为另一个组的
成员，我将需要另一个用户ID，可能会有一个不同的数字一例如，
用户ID为255，17的SUPER.GREG。
（o）（o）
用户（all）对这个文件的访问权限。然而，不像UNIX，这些位以
不同的方式进行组织：四个权限是read、write、execute和purge。
purge是Tandem对delete的称呼，这是必需的，因为目录不具有它们
自身的安全设置。
1090
---
## Page 1092
对于每一种访问模式，都可以选择允许谁使用它们：
Owner意味着只有这个文件的拥有者。
Group意味着同一组中的任何人。
All意味着所有人。
所有这些都只涉及文件所在的同一个系统。对于网络，还引入了另
一组模式来控制其他系统的用户的访问：
User意味着只有具有与该文件拥有者相同的用户名和组编号的用
户。
Class意味着具有和该文件拥有者相同的组编号的任何人。
Network意味着任何人，任何地方。
对于设备没有任何安全性，用户进程必须自已进行控制。前者在网
络环境中尤其是一个缺点。在1989年初的一个安全性讨论会上，仅
仅通过在这个系统控制台上放置一个假的提示符，我能够演示偷到
一个位于美国库珀蒂诺管理区域中部的TSII系统上的
SUPER.SUPER（root）的口令。那时候我在德国的杜塞尔多夫。
8.10轶闻趣事
回到21世纪早期，很容易忘记用计算机进行工作的乐趣。Tandem是
一个有趣的公司，而且这个公司关心它的职员。在1974年末的一个
星期五，在这个系统的开发初期，几个创始人最终使这个软件运行
在硬件上了；在这之前，这个软件一直在模拟器上进行并发。你可
以想象那个激动的场面。故事开始了，一个副总裁出去并带回来一
箱啤酒，然后，所有人都围坐在啤酒箱周围，庆祝并讨论将来。他
们讨论的一件事是应该每周一次喝一箱啤酒，就这样，Tandem的啤
酒会诞生了。它真的延续到了20世纪90年代，然后它变得逐渐不适
宜，最后取消了。
Tandem提出了许多口号和文字游戏，当然，“Tandem"这个名字本身
就是其中的一个。那时候，我们拥有印着像"Sonice,sonice,we doit
twice（非常好，非常好，我们做了两遍）”、“There'sno stopping
us（没有什么可以使我们停下来）”和“Tandemusersdoitwith
1091
---
## Page 1093
mirrors（Tandem用户用镜像完成了任务）”这样口号的T恤衫。当
然，当有好奇心特别强烈的人问起时，标准答案是“这是为了防止
其中一个出现故障”。
最后的口号不仅仅是俏皮话。它深深地影响我们的思考进程。在
1977年5月，从Tandem最初的五个星期培训回来后，我难过地发现
我的猫逃走了。在确定它不会回来后，我出去并又领了两只新猫。
不久之后我意识到这是成功洗脑的结果。即使在今天，我仍然讨厌
重启计算机，除非绝对不能避免。
8.11端
就预期的目标而言，T/16是一款非常成功的机器（美国的ATM一度
有超过80%由Tandem系统控制），但是当然也存在缺点。有些缺点
（例如，比常规系统更高的成本）是不可避免的。另一些缺点对于
设计者来说不是那么显而易见的。
8.11.1性能
当增加硬件时性能获得接近线性的提高，Tandem有理由对此感到自
豪。引用了随后的TXP系统的Hors和Chou（1985）展示了一个FOX
集群如何能够从2个处理器线性地扩展到32个处理器。
Bartlet（1982）展示了它的擎端：消息系统的性能限制了系统的速
度（即使是小系统）。没有附加数据的单个消息需要花2毫秒来传
输，在每个方向上都有2000个字节数据的消息需要花4.6毫秒（相同
的CPU）到7.0毫秒（不同的CPU）。这是单个I/O操作的开销，即使
在当时，这也显得很慢。对一个磁盘文件的连续I/O请求之间的延迟
如此长，以致它们直到数据传输到了磁盘头才会发生，这意味着磁
盘每转一周才能满足一个请求。一个从磁盘中连续读取2KB数据并
进行处理的程序（例如，类似于grep）将只能获得120KB/s的吞吐
量。较小的I/O能力（例如512字节）可能使吞吐量受制于软盘的速
度。
8.11.2硬件限制
正如名字"Tandem/16"所示，设计者有一个16位的头脑。在20世纪70
年代中期，这相当典型，但是，事实是“真的”计算机拥有32位的
字。随着时间的推移，后续的机器会解决其中的很多问题。在1981
年，Tandem通过一个向上兼容的指令集及少量硬件限制引入了
1092
---
## Page 1094
NonStopⅡI系统。在接下来的10年里，许多兼容但更快的机器引入了
进来。没有一个特别快，但它们对于在线交易处理已经足够快了。
另外，操作系统也进行了重写以解决比较紧道的问题，而且，随着
时间的推移还进行了额外的改进。这些改进包括：
引入了一个31位的寻址模式以给用户进程“无限的"存储空间。这个
模式使用字节地址，但是，它没有移除栈大小和代码跨越32KB边界
的限制，因为老的指令格式仍然保留着。
增加了硬件虚拟内存映像的数量。T/16只有4个，用于代码空间和
数据空间。TNS/ⅡI，正如它的名字一样，总共拥有16个内存映像，
这意味着处理器可以直接寻址到2MB而不必使用内存管理器。这些
映像之一用作为类似于转换旁视缓冲以处理31位扩展地址。
GuardianII，与TNS/ⅡI一起发布的Guardian新版本，也展示了系统库
和用户库空间，它们把进程可用的总空间增加到了384KB。尽管如
此，随后，通过段切换（segment switching），库空间的数量从2个
（系统和用户）增加到多达62个（系统和用户各31个）。在任何时
候只有一个用户库和系统库映射可以是活动的。
消息队列的大小被证实是一个问题。监视器进程每隔一定间隔把状
态信息发送给需要它们的每个进程。如果这些进程不读取信息，非
常多的资源（LCB和消息缓冲）会用于复写消息。为了解决这个问
题，GuardianIf引人了这样一个进程：保持这些状态信息的单个副
本并当其收到提醒时把消息发送给一个进程。
8.11.3错过的机会
T/16是一台革命性的机器，除此之外，它还提供了当时其他机器很
少拥有的一个环境。不过说到底，妨碍的正是这些小事情。例如，
设备无关性是操作系统最持久的目标之一，Tandem为实现这个目标
提供了很大的帮助。不过，由于命名问题和几乎不必要的不相容
性，它们失去了全部的潜力。为什么进程间通信不可能使用读取的
方式？为什么进程名和设备名在格式上必须区分？为什么在第九个
字节需要一个#符号？
8.11.4分裂的大脑
一个比较严重的问题在于探测错误的基本方式。当只有一个组件出
故障时这种方式工作得很好，即使两个组件出故障，这种方式通常
1093
---
## Page 1095
也工作得相当好。但是，如果两个处理器间总线都出故障，那会发
生什么呢？每个CPU都假定另一个已经出故障并接管IO设备一不是
一次，而是会持续不断。这样的情况确实出现过，但很幸运，非常
少，它们通常导致在两个CPU之间共享的磁盘数据完全损坏。
8.12后继者
从1990年开始，许多因素导致Tandem的销售出现滑坡：
计算机硬件总体正变得更可靠，这减小了Tandem的优势。
计算机硬件的速度提高了许多，从而突出了架构的一些基本性能极
限。
在20世纪90年代，T/16处理器架构被基于MIPS的解决方案所替代，
虽然剩下的许多架构仍然在使用。另一方面，性能上的差异仍然很
大，以致即使到了2000年，Tandem仍然一直使用MIPS处理器来模拟
T/16指令。其中的理由之一是Tandem的大多数系统级软件仍然用与
T/16架构紧密相连的TAL语言编写。把源代码移植到C的提议由于高
昂的费用而被否决了。
对于这样一个革命性的系统，Tandem/16对行业和现代计算机的设
计只产生了极小的影响。很多功能现在很容易用到一镜像磁盘、网
络文件系统、客户端-服务器模式或热插拔硬件。但是，很难看到其
中存在由Tandem引领的功能。这可能是因为T/16与大部分系统差异
很大，当然，还因为把它并发出来的纯商业环境的改变。
8.13延伸阅读
在Hewlett-Packard的网站上有许多论文；从位于
http://www.hpl.hp.com/techreports/tandem/的Tandem技术报告开始看
起。尤其是：
Bartlett,Joel."A NonStop Kernel,"June
jumpid=reg_R1002_USEN.（关于操作系统环境的更多信息。）
Bartlett,Joel,et al."Fault tolerance in Tandem computer systems，"May
1990.http://www.hpl.hp.com/techreports/tandem/TR-90.5.html.（描述硬
件的细节。）
1094
---
## Page 1096
Gray,Jim."The cost of messages,"March
1988.http://www.hpl.hp.com/techreports/tandem/TR-88.4.html.（从理论
视角描述性能问题。）