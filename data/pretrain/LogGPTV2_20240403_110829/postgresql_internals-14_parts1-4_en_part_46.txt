uesthathavemadeitintothehashtable.
Thenthehashtableiscleared,andeachofthepartitionssavedintotemporaryfiles
atthepreviousstageisscannedandprocessedjustlikeanyothersetofrows.Ifthe
hashtablestillexceedstheallocatedmemory,therowsthataresubjecttooverflow
willbepartitionedagainandwrittentodiskforfurtherprocessing.
Toavoidexcessive/,thetwo-passhashjoinalgorithmmovessintothefirst
batch. Aggregation,however,doesnotrequirethisoptimization: thoserowsthat
fit the allocated memory will not be split into partitions, and s are likely to
occurearlyenoughtogetinto.
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT DISTINCT flight_id FROM ticket_flights;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
HashAggregate (actual rows=150588 loops=1)
Group Key: flight_id
Batches: 5 Memory Usage: 4145kB Disk Usage: 98184kB
−> Seq Scan on ticket_flights (actual rows=8391852 loops=1)
(4 rows)
Inthisexample,thenumberofdistinctsisrelativelyhigh,sothehashtabledoes
notfittheallocatedmemory. Ittakesfivebatchestoperformthequery: onefor
theinitialdatasetandfourforthepartitionswrittentodisk.
1 backend/executor/nodeAgg.c,hash_choose_num_partitionsfunction
439
23
Sorting and Merging
23.1 Merge Joins
Amergejoinprocessesdatasetssortedbythejoinkeyandreturnstheresultthat
issortedinasimilarway.Inputsetsmaycomepre-sortedfollowinganindexscan;
otherwise,theexecutorhastosortthembeforetheactualmergebegins.1
Merging Sorted Sets
Let’stakealookatanexampleofamergejoin;itisrepresentedintheexecution
planbytheMergeJoinnode:2
=> EXPLAIN (costs off) SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
ORDER BY t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Merge Join
Merge Cond: (t.ticket_no = tf.ticket_no)
−> Index Scan using tickets_pkey on tickets t
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(4 rows)
Theoptimizerprefersthisjoinmethodbecauseitreturnsasortedresult,asdefined
bytheclause. Whenchoosingaplan,theoptimizernotesthesortorder
ofthedatasetsanddoesnotperformanysortingunlessitisreallyrequired. For
1 backend/optimizer/path/joinpath.c,generate_mergejoin_pathsfunction
2 backend/executor/nodeMergejoin.c
440
23.1 MergeJoins
example,ifthedatasetproducedbyamergejoinalreadyhasanappropriatesort
order,itcanbeusedinthesubsequentmergejoinasis:
=> EXPLAIN (costs off) SELECT *
FROM tickets t
JOIN ticket_flights tf ON t.ticket_no = tf.ticket_no
JOIN boarding_passes bp ON bp.ticket_no = tf.ticket_no
AND bp.flight_id = tf.flight_id
ORDER BY t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Merge Join
Merge Cond: (tf.ticket_no = t.ticket_no)
−> Merge Join
Merge Cond: ((tf.ticket_no = bp.ticket_no) AND (tf.flight_...
−> Index Scan using ticket_flights_pkey on ticket_flights tf
−> Index Scan using boarding_passes_pkey on boarding_passe...
−> Index Scan using tickets_pkey on tickets t
(7 rows)
The first tables to be joined are ticket_flights and boarding_passes; both of them
haveacompositeprimarykey(ticket_no,flight_id),andtheresultissortedbythese
twocolumns.Theproducedsetofrowsisthenjoinedwiththeticketstable,which
issortedbytheticket_nocolumn.
Thejoinrequiresonlyonepassoverbothdatasetsanddoesnottakeanyadditional
memory. It uses two pointers to the current rows (which are originally the first
ones)oftheinnerandoutersets.
Ifthekeysofthecurrentrowsdonotmatch,oneofthepointers(thatreferences
therowwiththesmallerkey)isgoingtobeadvancedtothenextrowuntilitfinds
amatch. Thejoinedrowsarereturnedtotheuppernode,andthepointerofthe
innersetisadvancedbyoneplace. Theoperationcontinuesuntiloneofthesets
isover.
Thisalgorithmcopeswithduplicatesoftheinnerset,buttheoutersetcancontain
them too. Therefore, the algorithm has to be improved: if the key remains the
same after the outer pointer is advanced,the inner pointer gets back to the first
matchingrow. Thus,eachrowoftheoutersetwillbematchedtoalltherowsof
theinnersetwiththesamekey.1
1 backend/executor/nodeMergejoin.c,ExecMergeJoinfunction
441
Chapter23 SortingandMerging
Fortheouterjoin,thealgorithmisfurthertweakedabit,butitisstillbasedonthe
sameprinciple.
Mergejoinconditionscanuseonlytheequalityoperator,whichmeansthatonly
equi-joinsaresupported(althoughsupportforotherconditiontypesiscurrently
underwaytoo).1
Costestimation. Let’stakeacloserlookatthepreviousexample:
=> EXPLAIN SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
ORDER BY t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Merge Join (cost=0.99..822334.21 rows=8391852 width=136)
Merge Cond: (t.ticket_no = tf.ticket_no)
−> Index Scan using tickets_pkey on tickets t
(cost=0.43..139110.29 rows=2949857 width=104)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..570951.13 rows=8391852 width=32)
(6 rows)
Thestartupcostofthejoinincludesatleastthestartupcostsofallthechildnodes.
Ingeneral,itmayberequiredtoscansomefractionoftheouterorinnersetbefore
thefirstmatchisfound. Itispossibletoestimatethisfractionbycomparing(based
p. onthehistogram)thesmallestjoinkeysinthetwosets.2 Butinthisparticularcase,
therangeofticketnumbersisthesameinbothtables.
Thetotalcostcomprisesthecostoffetchingthedatafromthechildnodesandthe
computationcost.
Sincethejoinalgorithmstopsassoonasoneofthesetsisover(unlesstheouter
joinisperformed,ofcourse),theothersetmaybescannedonlypartially. Toesti-
matethesizeofthescannedpart,wecancomparethemaximalkeyvaluesinthe
twosets.Inthisexample,bothsetswillbereadinfull,sothetotalcostofthejoin
includesthesumofthetotalcostsofbothchildnodes.
1 Forexample,seecommitfest.postgresql.org/33/3160
2 backend/utils/adt/selfuncs.c,mergejoinscanselfunction
442
23.1 MergeJoins
Moreover, if there are any duplicates, some of the rows of the inner set may be
scannedseveraltimes.Theestimatednumberofrepeatscansequalsthedifference
betweenthecardinalitiesofthejoinresultandtheinnerset.1 Inthisquery,these
cardinalitiesarethesame,whichmeansthatthesetscontainnoduplicates.
Thealgorithmcomparesjoinkeysofthetwosets. Thecostofonecomparisonis
estimatedatthecpu_operator_cost value,whiletheestimatednumberofcompar- 0.0025
isons can be taken as the sum of rows of both sets (increased by the number of
repeatreadscausedbyduplicates). Theprocessingcostofeachrowincludedinto
theresultisestimatedatthecpu_tuple_costvalue,asusual. 0.01
Thus,inthisexamplethecostofthejoinisestimatedasfollows:2
=> SELECT 0.43 + 0.56 AS startup,
round((
139110.29 + 570951.13 +
current_setting('cpu_tuple_cost')::real * 8391852 +
current_setting('cpu_operator_cost')::real * (2949857 + 8391852)
)::numeric, 2) AS total;
startup | total
−−−−−−−−−+−−−−−−−−−−−
0.99 | 822334.21
(1 row)
Parallel Mode v..
Althoughthemergejoinhasnoparallelflavor,itcanstillbeusedinparallelplans.3
The outer set can be scanned by several workers in parallel, but the inner set is
alwaysscannedbyeachworkerinfull.
Sincetheparallelhashjoinisalmostalwayscheaper,Iwillturnitoffforawhile: p.
=> SET enable_hashjoin = off;
Hereisanexampleofaparallelplanthatusesamergejoin:
1 backend/optimizer/path/costsize.c,final_cost_mergejoinfunction
2 backend/optimizer/path/costsize.c,initial_cost_mergejoin&final_cost_mergejoinfunctions
3 backend/optimizer/path/joinpath.c,consider_parallel_mergejoinfunction
443
Chapter23 SortingandMerging
=> EXPLAIN (costs off)
SELECT count(*), sum(tf.amount)
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Finalize Aggregate
−> Gather
Workers Planned: 2
−> Partial Aggregate
−> Merge Join
Merge Cond: (tf.ticket_no = t.ticket_no)
−> Parallel Index Scan using ticket_flights_pkey o...
−> Index Only Scan using tickets_pkey on tickets t
(8 rows)
Fullandrightoutermergejoinsarenotallowedinparallelplans.
Modifications
Themergejoinalgorithmcanbeusedwithanytypesofjoins.Theonlyrestriction
isthatjoinconditionsoffullandrightouterjoinsmustcontainmerge-compatible
expressions(“outer-columnequalsinner-column”or“columnequalsconstant”).1 In-
nerandleftouterjoinssimplyfilterthejoinresultbyirrelevantconditions,butfor
fullandrightjoinssuchfilteringisinapplicable.
Hereisanexampleofafulljointhatusesthemergealgorithm:
=> EXPLAIN (costs off) SELECT *
FROM tickets t
FULL JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
ORDER BY t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Sort
Sort Key: t.ticket_no
−> Merge Full Join
Merge Cond: (t.ticket_no = tf.ticket_no)
−> Index Scan using tickets_pkey on tickets t
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(6 rows)
1 backend/optimizer/path/joinpath.c,select_mergejoin_clausesfunction
444
23.2 Sorting
Innerandleftmergejoinspreservethesortorder. Fullandrightouterjoins,how-
ever,cannot guarantee it because  values can be wedged in between the or-
deredvaluesoftheouterset,whichbreaksthesortorder.1 Torestoretherequired
order,theplannerintroducestheSortnodehere. Naturally,itincreasesthecost
oftheplan,makingthehashjoinmoreattractive,sotheplannerhasselectedthis
planonlybecausehashjoinsarecurrentlydisabled.
But the next example cannot do without a hash join: the nested loop does not
allow full joins at all, while merging cannot be used because of an unsupported
joincondition.Sothehashjoinisusedregardlessoftheenable_hashjoinparameter
value:
=> EXPLAIN (costs off) SELECT *
FROM tickets t
FULL JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
AND tf.amount > 0
ORDER BY t.ticket_no;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Sort
Sort Key: t.ticket_no
−> Hash Full Join
Hash Cond: (tf.ticket_no = t.ticket_no)
Join Filter: (tf.amount > '0'::numeric)
−> Seq Scan on ticket_flights tf
−> Hash
−> Seq Scan on tickets t
(8 rows)
Let’srestoretheabilitytousehashjoinsthatwehavepreviouslydisabled:
=> RESET enable_hashjoin;
23.2 Sorting
Ifoneofthesets(orpossiblybothofthem)isnotsortedbythejoinkey,itmustbe
reorderedbeforethejoinoperationbegins. Thissortingoperationisrepresented
intheplanbytheSortnode:2
1 backend/optimizer/path/pathkeys.c,build_join_pathkeysfunction
2 backend/executor/nodeSort.c
445
Chapter23 SortingandMerging
=> EXPLAIN (costs off)
SELECT * FROM flights f
JOIN airports_data dep ON f.departure_airport = dep.airport_code
ORDER BY dep.airport_code;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Merge Join
Merge Cond: (f.departure_airport = dep.airport_code)
−> Sort
Sort Key: f.departure_airport
−> Seq Scan on flights f
−> Sort
Sort Key: dep.airport_code
−> Seq Scan on airports_data dep
(8 rows)
Suchsortingcanalsobeappliedoutsidethecontextofjoinsiftheclause
isspecified,bothinaregularqueryandwithinawindowfunction:
=> EXPLAIN (costs off)
SELECT flight_id,
row_number() OVER (PARTITION BY flight_no ORDER BY flight_id)
FROM flights f;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
WindowAgg
−> Sort
Sort Key: flight_no, flight_id
−> Seq Scan on flights f
(4 rows)
HeretheWindowAggnode1 computesawindowfunctiononthedatasetthathas
beenpre-sortedbytheSortnode.
Theplannerhas severalsort methodsin itstoolbox. The examplethat Ihaveal-
readyshownusestwoofthem(SortMethod).Thesedetailscanbedisplayedbythe
command,asusual:
=> EXPLAIN (analyze,costs off,timing off,summary off)
SELECT * FROM flights f
JOIN airports_data dep ON f.departure_airport = dep.airport_code
ORDER BY dep.airport_code;
1 backend/executor/nodeWindowAgg.c
446
23.2 Sorting
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Merge Join (actual rows=214867 loops=1)
Merge Cond: (f.departure_airport = dep.airport_code)
−> Sort (actual rows=214867 loops=1)
Sort Key: f.departure_airport
Sort Method: external merge Disk: 17136kB
−> Seq Scan on flights f (actual rows=214867 loops=1)
−> Sort (actual rows=104 loops=1)
Sort Key: dep.airport_code
Sort Method: quicksort Memory: 52kB
−> Seq Scan on airports_data dep (actual rows=104 loops=1)
(10 rows)
Quicksort
Ifthedatasettobesortedfitsthework_memchunk,theclassicquicksortmethodis 4MB
applied. Thisalgorithmisdescribedinalltextbooks,soIamnotgoingtoexplain
ithere.
Asfortheimplementation,sortingisperformedbyadedicatedcomponent1 that
choosesthemostsuitablealgorithmdependingontheamountofavailablemem-
oryandsomeotherfactors.
Costestimation. Let’stakealookathowasmalltableissorted.Inthiscase,sort-
ingisperformedinmemoryusingthequicksortalgorithm:
=> EXPLAIN SELECT *
FROM airports_data
ORDER BY airport_code;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Sort (cost=7.52..7.78 rows=104 width=145)
Sort Key: airport_code
−> Seq Scan on airports_data (cost=0.00..4.04 rows=104 width=...
(3 rows)