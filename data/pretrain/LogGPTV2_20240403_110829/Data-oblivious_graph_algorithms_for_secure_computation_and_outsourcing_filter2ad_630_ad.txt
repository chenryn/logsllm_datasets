tently. Reveal the location of s after the permutation,
but keep the location of t protected.
5. Execute SSSD shortest path algorithm on the graph
deﬁned by M(cid:48) using source s and destination [t]. Be-
cause our algorithms in Section 3 were deﬁned for un-
weighted graphs, we need to introduce changes to work
with weighted graphs and also preserve information
about the capacity of each edge on the path. For that
reason, for the purposes of the BFS algorithm, node u
is considered to be adjacent to node v if the capacity
of the edge (v, u) is positive, i.e., M(cid:48)
v,u > 0. In addi-
tion, when updating vector C in step 4 of Algorithm 1
with parent and distance from the source information,
we also preserve information about the capacity of the
edge from the parent to the current node using matrix
M(cid:48). This information is stored in ﬁeld Ci.capacity and
is updated together with Ci.parent and Ci.dist. That
is, we execute:
1. for i = 1 to |V | do
v,i]
2.
> 0) · ([Ci.color] ?= white)
[cond] = ([M(cid:48)
?
[Ci.color] = [cond]·gray +(1−[cond])·[Ci.color]
[Ci.parent] = [cond]· v + (1− [cond])· [Ci.parent]
[Ci.dist] = [cond]([Cv.dist] + 1) + (1 − [cond]) ·
v,i] + (1 − [cond]) ·
[Ci.capacity] = [cond][M(cid:48)
[Ci.dist]
3.
4.
5.
6.
[Ci.capacity]
To preserve edge capacity in the reconstructed path P ,
we also introduce changes to Algorithm 2. In particu-
lar, instead of storing a single node [w] in P , we now
store a tuple of the form (cid:104)[v1], [v2], [v3], [c](cid:105). Here [v1]
is the same as previously stored, i.e., the ﬁrst elements
of the stored tuples form a path in the graph padded
in the beginning with fake nodes to be of length |V |.
Nodes v2 and v3 represent an edge, and c is capacity.
In almost all cases, v1 = v2 and (v3, v2) is the edge
on the path of capacity c, i.e., v3 is stored as the ﬁrst
element of the preceding tuple. The only time when
this does not hold is during special cases when the
source or no path symbol ⊥ has been reached during
path computation. In those cases, we set v1 to s or ⊥,
but the edge (v3, v2) is between two fake nodes, and
c is the capacity of that edge in M(cid:48) when v1 = s and
c = 0 when v1 =⊥. Setting the capacity in such a way
will allow us to ensure that the capacity of the path
is computed correctly. For reasons that will soon be-
come apparent, we also set [v2] = [v1], [v3] = [t], and
[c] = 0 in the last iteration of path reconstruction (i.e.,
the ﬁrst tuple on the path). The path reconstruction
algorithm becomes:
(a) Initialize the path P to empty and set [v] = [v(cid:48)] =
[t]. Randomly choose a fake node as before and
store it in [u].
(b) Repeat |V | − 1 times:
i. Scan vector C to retrieve parent and edge ca-
pacity information and compute data to be
added to the path by executing the following:
[cond] = ([v] ?= i)
[w] = [cond][Ci.parent] + (1 − [cond])[w]
[c] = [cond][Ci.capacity] + (1 − [cond])[c]
1. [w] = 0
2. [c] = 0
3. for i = 1 to 2|V | − 1 do
4.
5.
6.
7. [cond] = (v(cid:48) ?=⊥)
8. [v1] = [v(cid:48)]
9. [v2] = [v]
10. [v3] = [w]
11. [c] = (1 − [cond])[c]
12. [cond1] = ([w] ?= s)
13. [cond2] = ([w] ?=⊥)
14. [cond] = [cond1] + [cond2] − [cond1][cond2]
15. [v(cid:48)] = [w]
16. [v] = [cond] · [u] + (1 − [cond])[w]
where, as before u, is a randomly selected
fake node. The purpose of v(cid:48) here is simply
to store node information from the previous
round (in case v is set to u, while we need to
remember w as well).
ii. Prepend (cid:104)[v1], [v2], [v3], [c](cid:105) to P .
(c) Set [v1] = [v(cid:48)], [v2] = [v(cid:48)], [v3] = [t], and [c] = [0]
and prepend (cid:104)[v1], [v2], [v3], [c](cid:105) to P .
6. Compute the residual capacity [cf ] of the path in P .
Oblivious execution of this step is not diﬃcult:
1. [cf ] = [cmax]
2. for i = 2 to |V | do
3.
4.
[cond] = ([Pi.capacity]
[cf ] = [cond] · [Pi.capacity] + (1 − [cond])[cf ]
?
< [cf ])
Here Pi is the ith element of the path P . Note that
the ﬁrst tuple on the path is ignored as its capacity is
always 0, i.e., only |V |− 1 edges are used in computing
the path’s capacity.
7. To be able to update the residual network M(cid:48) and ﬂow
function L, we obliviously rotate the entries in the path
P to have the ﬁrst record contain an edge that leaves
the source s. This will allow us to proceed with one
edge of P at a time updating cells of M(cid:48) and L in the
next step.
When there is no path between s and t, vertex s does
not appear in P . To hide this information, we re-
place ⊥ with s in tuple (cid:104)[t], [t], [⊥], [0](cid:105).1 This does
not aﬀect correctness of the algorithm. We also ignore
the preceding record (of the form (cid:104)[s], [v2], [v3], [c](cid:105) or
(cid:104)[⊥], [v2], [v3], [c](cid:105)), i.e., process only |V | − 1 edges.
A simple way of performing oblivious rotation of the
tuples in P is as follows:
1. for i = 1 to |V | − 1 do
[cond] = ([Pi.v3] ?= s)
2.
3.
[temp] = [P1]
for j = 1 to |V | − 1 do
4.
[Pj] = [cond][Pj] + (1 − [cond])[Pj+1]
5.
[P|V |] = [cond][P|V |] + (1 − [cond])[temp]
6.
7. remove P1 from P
For simplicity of exposition, we use assignment [x] =
[Pi] to indicate that the entire tuple at the ith position
of P is stored in variable x (where the value of i is
known, while the content of values at Pi is not).
After rotating the elements of P in this manner, we
have that P stores a path from s to t padded at the
end with fake nodes and edges between them (and if no
path exists, there will be a path in P , but its capacity
is 0, which means that the residual network will not
be modiﬁed). Note that there is an edge leaving t of
capacity 0 (i.e., the ﬁrst element of P prior to its ro-
tation) which correctly forms the path and transitions
to a fake node (after which all nodes on the path are
fake). Figure 2 demonstrates how P is formed before
and after path rotation for two cases: (i) when a path
from s to t is present and (ii) when there is no path
from s to t. Notation vi refers to an original node of
the graph, and notation fi is used for fake graph nodes.
8. Update residual network M(cid:48) and ﬂow function L. Now
because we use random labeling of vertices in the graph,
we can update M(cid:48) and L by revealing the path infor-
mation (i.e., open edges (v3, v2) in each element of P )
and update the corresponding cells of M(cid:48) and L with
(still protected) path capacity information. We, how-
ever, already revealed a certain sequence of nodes dur-
ing BFS computation, and to ensure that there is no
correlation between memory accesses during BFS and
1This step can be performed at the time of forming the
tuples in P , but for clarity of presentation we choose to
form the path correctly in step 5.
=⇒
P1 = (cid:104)f3, f3, t, 0(cid:105)
P1 = (cid:104)v2, v2, s, c3(cid:105)
P2 = (cid:104)f2, f2, f3, c5(cid:105)
P2 = (cid:104)v1, v1, v2, c2(cid:105)
P3 = (cid:104)s, f1, f2, c4(cid:105)
P3 = (cid:104)t, t, v1, c1(cid:105)
P4 = (cid:104)v2, v2, s, c3(cid:105)
P4 = (cid:104)f3, f3, t, 0(cid:105)
P5 = (cid:104)v1, v1, v2, c2(cid:105)
P5 = (cid:104)f2, f2, f3, c5(cid:105)
P6 = (cid:104)t, t, v1, c1(cid:105)
(a) Existing path before and after path rotation
P1 = (cid:104)f5, f5, t, 0(cid:105)
P1 = (cid:104)t, t, s, 0(cid:105)
P2 = (cid:104)f4, f4, f5, c4(cid:105)
P2 = (cid:104)f5, f5, t, 0(cid:105)
P3 = (cid:104)f3, f3, f4, c3(cid:105)
P3 = (cid:104)f4, f4, f5, c4(cid:105)
P4 = (cid:104)f2, f2, f3, c2(cid:105)
P4 = (cid:104)f3, f3, f4, c3(cid:105)
P5 = (cid:104)⊥, f1, f2, c1(cid:105)
P5 = (cid:104)f2, f2, f3, c2(cid:105)
P6 = (cid:104)t, t,⊥, 0(cid:105)
(b) Unreachable destination before and after
path rotation
=⇒
Figure 2: Example of path computation for |V | = 6.
during residual network update, we need to randomly
shuﬄe the nodes again. This time, in addition to per-
muting the rows and columns of M(cid:48) and L, as well as
vector F , we also need to map each node v contained
in path P to its permuted index π(v). A simple way
of accomplishing this is to scan the (cid:104)i, [π(i)](cid:105) pairs for
each v in P and replace v with π(i) when v = i. That
is, for each node v included in P , we execute:
1. for i = 1 to 2|V | − 1 do
2.
3.
[cond] = ([v] ?= i)
[π(v)] = [cond][π(i)] + (1 − [cond])[π(v)]
It is important that the location of t is not known
after the random permutation in each iteration and
the nodes on any given path do not repeat. The cells
of M(cid:48) and L are then updated as follows:
1. for i = 1 to |V | − 1 do
open v3 and v2 in Pi
2.
[Lv3,v2 ] = [Lv3,v2 ] + [cf ]
3.
[Lv2,v3 ] = −[Lv3,v2 ]
4.
v3,v2 ] − [cf ]
[M(cid:48)
5.
[M(cid:48)
v2,v3 ] + [cf ]
6.
v3,v2 ] = [M(cid:48)
v2,v3 ] = [M(cid:48)
ﬂow as the total ﬂow(cid:80)|V |
At the end of the computation we output the maximum
i=1[Ls,i] leaving the source node s.
If the ﬂow information is desired with respect to the original
node labeling, the algorithm can maintain the composition
of random permutations used at each iteration.
4.3 Analysis
4.3.1 Complexity analysis
To show that our algorithm runs in O(|V |3|E| log(|V |))
time, we analyze the complexities of each step of it. In the
algorithm, steps 1, 2, 5, and 7 take O(|V |2) time, while the
complexity of step 6 is O(|V |) and that of steps 4 and 8 is
O(|V |2 log(|V |)). Because steps 4–8 are repeated O(|V ||E|)
times, we obtain the overall complexity as claimed. Our
complexity is higher by a factor log(|V |) than that of Edmonds-
Karp’s algorithm when the adjacency matrix is used or the
graph is dense with |E| = O(|V |2). It also outperforms any
solution that combines the Edmonds-Karp algorithm with
ORAM when |E| = Ω(|V |2/ log(|V |)).
Security analysis
4.3.2
We show the security of the maximum-ﬂow algorithm as
before using Deﬁnition 1.
Theorem 3. The maximum-ﬂow algorithm is data-oblivious.
Proof. As before, we analyze each major operation in
the algorithm with input G = (V, E), s, and t. In steps 1
and 2, we perform identical operations and touch exactly
the same locations for all inputs with |V | nodes and there-
fore the steps are data-oblivious. Step 3 is merely an itera-
tor with the same number of iterations for all graphs with
|V | nodes and |E| edges, so we proceed directly to step 4.
Step 4 only executes a data-oblivious shuﬄe operation and
is therefore oblivious. Step 5 calls BFS and SSSD shortest
path algorithms with small changes to preserve edge capac-
ity information. These algorithms have been shown to be
data-oblivious in Theorems 1 and 2, respectively. Step 6
performs identical operations and accesses the same mem-
ory locations for all graphs with |V | nodes and is therefore
data-oblivious.
In step 7, the algorithm rotates the path,
once again executing identical operations for all inputs and
accessing the same memory locations. Lastly, in step 8,
we execute the same operations for all graphs, but accessed
memory locations diﬀer. Our algorithm crucially relies on
two facts to achieve data-obliviousness: (i) the vertices are
randomly permuted prior to any access is made and (ii) all
updates follow a path of size |V |, which always starts with
the source s and has no repeated nodes on it. This means
that, besides for the ﬁrst accessed node s, all other memory
accesses are random and cannot be distinguished from ac-
cesses used for a randomly generated input graph. Lastly,
because the algorithm proceeds in iterations, we ensure that
every time a subset of memory locations is accessed (i.e.,
during BFS and when updating the residual network), the
nodes are randomly permuted right before that operations.
This ensures that all accesses cannot be distinguished from
a random sequence of vertex accesses.
5. MINIMUM SPANNING TREE
Given the already developed techniques, it is not diﬃcult
to design an oblivious algorithm for computing the minimum
spanning tree that runs in O(|V |2) time (unless the node la-
beling reveals information about the structure of the graph).
Our algorithm uses the structure of Prim’s algorithm, and
we start by describing background information.
5.1 Background
On input connected undirected weighted graph G = (V, E),
Prim’s algorithm initializes the spanning tree T = (V (cid:48), E(cid:48))
to a single arbitrary vertex from V and no edges. Then
(cid:54)= V , the algorithm selects an edge (v, u) with
until V (cid:48)
the minimum weight such that v ∈ V (cid:48) and u (cid:54)∈ V (cid:48) and
sets V (cid:48) = V (cid:48) ∪ {u} and E(cid:48) = E(cid:48) ∪ {(v, u)}. The com-
plexity of this algorithm depends on the graph representa-
tion and data structures used. Using the adjacency ma-
trix, the algorithm runs in O(|V |2) time; using the adja-
cency list, the algorithm’s performance is O(|E| log(|V |)) or
O(|E| + |V | log(|V |)) if a binary heap or Fibonacci heap is
used, respectively.
5.2 Oblivious algorithm
In order to compute a minimum spanning tree obliviously
without incurring a large amount of additional overhead,
we maintain a vector with candidate nodes to potentially be
added to the tree T and select one of them which has an edge
with the minimum weight connecting it to T . The vector is