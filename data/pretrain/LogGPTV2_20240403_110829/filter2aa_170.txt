Cisco Talos 
Mahdi Namazifar, PhD 
DETECTING RANDOM STRINGS; 
A LANGUAGE BASED APPROACH 
!  Given an arbitrary string, decide whether the string is a random 
sequence of characters 
!  Disclaimer 1: This work does not address strings that are random 
sequences of dictionary words 
!  Disclaimer 2: The current parameters of the code are tuned for 
strings with length 8 or more 
PROBLEM DEFINITION 
!  Detecting domain names that are generated by Domain 
Generation Algorithms (DGA) 
!  Many have studied this problem: 
!  Papers such as: 
!  S. Yadav, A. Reddy, A.L.N. Reddy, and S. Ranjan, "Detecting Algorithmically Generated 
Malicious Domain Names", IMC’10, November 1–3, 2010, Melbourne, Australia. 
!  J. Raghurama, D.J. Millera, and G. Kesidis, "Unsupervised, low latency anomaly detection of 
algorithmically generated domain names by generative probabilistic modeling", Journal of 
Advanced Research, Vol. 5, Issue 4, pp. 423–433. 
!  … 
!  Bayesian network approaches 
!  Random Forrest classifiers 
!  … 
MOTIVATION AND BACKGROUND 
!  Gather as many dictionaries as you can 
!  Look up substrings of a given string in the dictionaries 
!  Based on  
!  number of dictionary hits  
!  length of substrings that were in a dictionary 
!  number of different languages needed to cover the substrings 
define a randomness score. 
!  Used the score to determine whether the string is random 
OUR APPROACH; THE BIG PICTURE 
“MEGA” DICTIONARY 
Afrikaans 
English* 
Hungarian 
Malay 
Scottish Gaelic 
Tsonga 
Akan 
Esperanto** 
Indonesian 
Mandarin 
Slovene 
Tswana 
Albanian 
Estonian 
Interlingua** 
Māori 
Southern Ndebele 
Turkish 
Bulgarian 
Faroese 
Italian 
Norwegian* 
Southern Sotho 
Ukrainian 
Catalan* 
French* 
Kinyarwanda 
Occitan 
Spanish* 
Venda 
Chichewa 
Frisian 
Kurdish 
Polish 
Swahili 
Vietnamese 
Croatian 
Gaeilge 
Latin 
Portuguese* 
Swati 
Welsh 
Czech 
Galician 
Latvian 
Romanian 
Swedish 
Xhosa 
Danish 
German* 
Lithuanian 
Russian* 
Tagalog 
Zulu 
Dutch 
Greek 
Malagasy 
Saraiki 
Tetum 
“MEGA” DICTIONARY – LANGUAGES" 
"    Source: OpenOffice and others 
*     Different versions of the language 
**  Constructed language 
!  US 1990 census data: 
!  Female names 
!  Male names 
!  Surnames 
!  Dictionary of Scrabble words 
!  Alexa 1000 domain names 
!  Numbers 
!  Dictionary of texting acronyms 
!  “yolo”, “wyd”, “ttyt” 
“MEGA” DICTIONARY – OTHER 
!  Slugify to deal with accents, special characters, etc. 
!  Mandarin, Japanese, … 
!   
!  Pinyin: “geng3 quan3” 
!  The following words are added to the dictionary: 
!  “geng3quan3” 
!  “gengquan” 
!  Russian and Ukrainian 
!  Use “koi8-r” decoding 
!  “i” and “y” are used interchangeably 
!  … 
SPECIAL TREATMENT 
!  The word “book” appears in multiple different dictionaries 
!  English, Polish, Dutch 
!  Run Map-Reduce to find all the dictionaries that a word appears in 
!  As a result every entry of the “mega” dictionary looks like 
!  “suis”, ['ad', 'nl', 'af', 'ms', 'ca', 'fr’] 
!  Each element of the list is a 2-letter code indicating a dictionary 
!  Some special dictionaries: 
!  ‘ee’: English dictionary with ~360K words (simple English) 
!  ‘ad’: English dictionary (including Scrabble words) with over 1.5M words (elaborate English) 
SAME WORD MULTIPLE DICTIONARIES 
!  A Python dictionary of str to list of str  
!  “suis”: ['ad', 'nl', 'af', 'ms', 'ca', 'fr’] 
!  Lookup time complexity O(1) for average case 
!  Currently contains over 11.7M entries 
MEGA DICTIONARY 
!  Traversing the string 
!  From left: 
!  “mystring”                        “mystring” 
!  “mystring”                        “ystring” 
!  “mystring”                        “string” 
!  “mystring”                        “tring” 
!  “mystring”                        “ring” 
!  “mystring”                        “ing” 
!  From right: 
!  “mystring”                        “mystring” 
!  “mystring”                        “mystrin” 
!  “mystring”                        “mystri” 
!  “mystring”                        “mystr” 
!  “mystring”                        “myst” 
!  “mystring”                        “mys”  
LOOKING UP SUBSTRINGS 
!  Traversing and looking up (simple English) 
!  From left: 
! 
“goodtobethere”  
 “goodtobethere” 
 No 
! 
“goodtobethere”  
 “oodtobethere”  
 No 
! 
“goodtobethere”  
 “odtobethere”
 No 
! 
“goodtobethere”  
 “dtobethere”
 No 
! 
“goodtobethere”  
 “tobethere”
 No 
! 
“goodtobethere”  
 “obethere”
 No 
! 
“goodtobethere”  
 “bethere”
 No 
! 
“goodtobethere”  
 “ethere”
 Yes! 
! 
“goodtob”
 “goodtob”
 No 
! 
“goodtob”
 “oodtob”
 No 
! 
“goodtob”
 “odtob”
 No 
! 
“goodtob”
 “dtob”
 No 
! 
“goodtob”
 “tob”
 Yes! 
! 
“good”
 “good”
 Yes! 
 [“ethere”, “tob”, “good”] 
LOOKING UP SUBSTRINGS  
(SIMPLE ENGLISH) 
! 
Traversing and looking up (simple English) 
! 
From right: 
! 
“goodtobethere”  
 “goodtobethere” 
 No 
! 
“goodtobethere”  
 “goodtobether”  
 No 
! 
“goodtobethere”  
 “goodtobethe”
 No 
! 
“goodtobethere”  
 “goodtobeth”
 No 
! 
“goodtobethere”  
 “goodtobet”
 No 
! 
“goodtobethere”  
 “goodtobe”
 No 
! 
“goodtobethere”  
 “goodtob”
 No 
! 
“goodtobethere”  
 “goodto”
 No 
! 
“goodtobethere”  
 “goodt”
 No 
! 
“goodtobethere”  
 “good”
 Yes! 
! 
“tobethere”
 “tobethere”
 No 
! 
“tobethere”
 “tobether”
 No 
! 
“tobethere”
 “tobethe”
 No 
! 
“tobethere”
 “tobeth”
 No 
! 
“tobethere”
 “tobet”
 No 
! 
“tobethere”
 “tobe”
 Yes! 
! 
“there”
 “there”
 Yes! 
 [“good”, “tobe”, “there”] 
LOOKING UP SUBSTRINGS  
(SIMPLE ENGLISH) 
!  [“ethere”, “tob”, “good”]
 min length: 3 
!   [“good”, “tobe”, “there”]  
 min length: 4   
         [“good”, “tobe”, “there”]   
PICKING BETWEEN TWO SETS  
!  floatingbarmalapascua.com 
!  Registered on: June 23, 2013 
!  Substrings found: 
!  “floating”: ['de', 'ee', 'it', 'ad'] 
!  “barma”: ['sk', 'sq', 'gs', 'cs', 'pt'] 
!  “lapas”: ['gs', 'gl', 'oc', 'af', 'hi', 'lt'] 
!  “cua”: ['vi', 'en', 'id', 'gl', 'ca', 'gs', 'bg', 'sq'] 
!  How to find minimal set of dictionaries that has non-empty 
intersections with all the dictionary lists above? 
LOOKING UP FOR MORE LANGUAGES 
!  Collection    of subsets of a finite set    
!  A hitting set for   , i.e., a subset           such that     contains at 
least one element from each subset in     
!  Find minimum cardinality hitting set,  
!  Bad news: MHS is NP hard 
!  Good news: our sets are small enough that we use a greedy 
algorithm 
MINIMUM HITTING SET PROBLEM 
S' ⊂ S
C
C
S
C
S'
S'
! 
From each subset, pick an element and put them together into a set 
! 
Find all possible sets built this way 
! 
Take the ones with minimum cardinality 
! 
Disclaimer: there are more efficient algorithms for this problem, but this one is good enough 
for us 
! 
Back to our example: 
! 
Substrings found: 
! 
“floating”: ['de', 'ee', 'it', 'ad'] 
! 
“barma”: ['sk', 'sq', 'gs', 'cs', 'pt'] 
! 
“lapas”: ['gs', 'gl', 'oc', 'af', 'hi', 'lt'] 
! 
“cua”: ['vi', 'en', 'id', 'gl', 'ca', 'gs', 'bg', 'sq’] 
! 
Minimum hitting sets: 
 ['de', 'gs'], ['ee', 'gs'], ['gs', 'it'], ['gs', 'ad'] 
! 
At least 2 dictionaries are needed to cover the words 
MINIMUM HITTING SET; GREEDY 
ALGORITHM 
!  Factors: 
!  Minimum hitting set number 
!  Length of the string 
!  Sum of length of words found in the string 
!  Number of words longer than 3 letter 
!  These factors along with parameters that are tuned are used 
to give scores for: 
!  Randomness with regards to a “simple” English dictionary 
!  Randomness with regards to a “comprehensive” English dictionary 
!  Randomness with regards to “all” languages 
NON-RANDOMNESS SCORE 
!  Sequence of alternating vowels and consonants. 
!  Example: “symebitop”, “cusabifik”, “figih-avow”, … 
!  Is “_” or “-” present in the string? 
!  These characters indicate some sort of separation that could be used  
!  Example: “ugg-outlet-store-online”, “free-android-claims” 
!  Punycode: 
!  xn--t8j0gd4151ac8betyjq5g 
!   
OTHER CONSIDERATIONS 
!  False negative: 
!  We use 9 Domain Generation Algorithms to generate random strings 
!  We see how many of them are missed by our algorithm 
RESULT 
Algorithm name 
biscuit 
caphaw 
cryptolocker 
expiro 
ramdo 
tinba 
zbot 
zeus-1 
zeus-2 
Number of samples 
2,500 
10,000 
1,000 
23,500 
5,000 
1,000 
1,000 
1,000 
1,000 
Number of missed 
9 
26 
11 
5 
19 
19 
1 
3 
0 
Missed percentage 
0.36% 
0.26% 
1.10% 
0.02% 
0.38% 
1.90% 
0.10% 
0.30% 
0.00% 
Some of missed samples 
ﬁbnﬂqi'
wppobrup'
uspsjkvlorars'
frenek5eben'
wsaomesoewesgcaw'
htneeliioves'
bcbaadee236'
sotdeprctuwhnyvgnbibdeil'
tmaystbz'
rudocrs9'
rpgsuesaBqor'
fweru5ferin'
skosmeeceiawicyo'
lmmmpcutenil'
pbicmdipnjeudhencikcmyt'
ihrblutpiq'
isikocmg'
edendmipxxpin'
fwenu5ferin'
uoygomesgsugueaq'
mutuummfmmhd'
mnpobcyeuvofeaaimtsaepuctoh'
naoh6srb'
0bunkkho'
pltctuskgdrlet'
frolek5oder'
myoseamsysmoogog'
dpthshyuﬁxy'
7uebsquk'
phsixbpt'
dbasgilajayet'
ﬂores5ezer'
cemwimmigcikaamu'
xwlobbymhgry'
!  False positive: 
!  Take Alexa 10,000 domains 
!  Filter out strings shorter than 8 characters 
!  Left with 5400 domain names. 
!  I run them through my code 
!  here are the ones that my code detected as random 
RESULTS 
lmebxwbsno'
bezuzyteczna'
thiruFuvcd'
123sdfsdfsdfsd'
lavoixdunord'
3a6aayer'
fmdwbsfxf0'
plsdrct2'
andhrajyothy'
canlidizihd1'
abckj123'
muryouav'
nguoiduaHn'
mazika2day'
hosyusokuhou'
przegladsportowy'
follovvme'
masqforo'
fullvehdﬁlmizle'
plsdrct1'
addic7ed'
1c5bitrix'
anige5sokuhouvip'
xxeronetxx'
akb48matomemory'
3djuegos'
phununet'
thqafawe3lom'
donya5e5eqtesad'
ikih0ofu'
thaqafnafsak'
srv2trking'
vecteezy'
turkcealtyazi'
adstrckr'
avmuryou'
nsdfsﬁ1q8asdasdzz'
iiasdomk1m9812m4z3'
thiruFuvcd'
esrvadspix'
isif5life'
ig84adp2'