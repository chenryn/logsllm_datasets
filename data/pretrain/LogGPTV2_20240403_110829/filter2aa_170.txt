# Detecting Random Strings: A Language-Based Approach

## Author
Mahdi Namazifar, PhD  
Cisco Talos

## Problem Definition
The objective is to determine whether a given string is a random sequence of characters. This work specifically targets the detection of domain names generated by Domain Generation Algorithms (DGA). The current implementation is optimized for strings with a length of 8 or more characters.

### Disclaimer
1. This research does not address strings that are random sequences of dictionary words.
2. The parameters of the code are tuned for strings with a length of 8 or more characters.

## Background and Motivation
Previous studies on DGA-generated domain detection include:
- S. Yadav et al., "Detecting Algorithmically Generated Malicious Domain Names", IMC’10, November 1–3, 2010, Melbourne, Australia.
- J. Raghurama et al., "Unsupervised, low latency anomaly detection of algorithmically generated domain names by generative probabilistic modeling", Journal of Advanced Research, Vol. 5, Issue 4, pp. 423–433.
- Bayesian network approaches
- Random Forest classifiers

Our approach involves creating a comprehensive "mega" dictionary by aggregating multiple language dictionaries and other sources. We then use this dictionary to evaluate the randomness of a given string based on the number of dictionary hits, the length of substrings found in the dictionary, and the number of different languages needed to cover the substrings.

## Our Approach: The Big Picture
### Mega Dictionary
The mega dictionary includes a wide range of languages and specialized word lists:
- **Languages**: Afrikaans, English, Hungarian, Malay, Scottish Gaelic, Tsonga, Akan, Esperanto, Indonesian, Mandarin, Slovene, Tswana, Albanian, Estonian, Interlingua, Māori, Southern Ndebele, Turkish, Bulgarian, Faroese, Italian, Norwegian, Southern Sotho, Ukrainian, Catalan, French, Kinyarwanda, Occitan, Spanish, Venda, Chichewa, Frisian, Kurdish, Polish, Swahili, Vietnamese, Croatian, Gaeilge, Latin, Portuguese, Swati, Welsh, Czech, Galician, Latvian, Romanian, Swedish, Xhosa, Danish, German, Lithuanian, Russian, Tagalog, Zulu, Dutch, Greek, Malagasy, Saraiki, Tetum.
- **Specialized Lists**: US 1990 census data (female names, male names, surnames), Scrabble words, Alexa 1000 domain names, numbers, texting acronyms (e.g., "yolo", "wyd", "ttyt").

### Special Treatment
- **Slugify**: To handle accents and special characters, we use slugification techniques. For example, in Mandarin, "geng3 quan3" is added to the dictionary as "geng3quan3" and "gengquan".
- **Russian and Ukrainian**: We use "koi8-r" decoding, where "i" and "y" are used interchangeably.

### Substring Lookup
We traverse the string from both left and right, looking up substrings in the mega dictionary. For example, for the string "goodtobethere":
- From left: ["ethere", "tob", "good"]
- From right: ["good", "tobe", "there"]

### Minimum Hitting Set Problem
To find the minimal set of dictionaries that have non-empty intersections with all the dictionary lists, we solve the Minimum Hitting Set problem. This is an NP-hard problem, but we use a greedy algorithm for our small sets.

### Non-Randomness Score
We calculate a non-randomness score based on several factors:
- Minimum hitting set number
- Length of the string
- Sum of the lengths of words found in the string
- Number of words longer than 3 letters

### Other Considerations
- **Alternating Vowels and Consonants**: Sequences like "symebitop" and "cusabifik" are considered non-random.
- **Separation Characters**: Presence of "_" or "-" indicates some form of separation, e.g., "ugg-outlet-store-online".
- **Punycode**: Detection of Punycode-encoded strings, e.g., "xn--t8j0gd4151ac8betyjq5g".

## Results
### False Negatives
We tested our algorithm using 9 different Domain Generation Algorithms (DGA) to generate random strings. The results are as follows:

| Algorithm Name | Number of Samples | Number of Missed | Missed Percentage |
|----------------|-------------------|------------------|-------------------|
| biscuit        | 2,500             | 9                | 0.36%             |
| caphaw         | 10,000            | 26               | 0.26%             |
| cryptolocker   | 1,000             | 11               | 1.10%             |
| expiro         | 23,500            | 5                | 0.02%             |
| ramdo          | 5,000             | 19               | 0.38%             |
| tinba          | 1,000             | 19               | 1.90%             |
| zbot           | 1,000             | 1                | 0.10%             |
| zeus-1         | 1,000             | 3                | 0.30%             |
| zeus-2         | 1,000             | 0                | 0.00%             |

### False Positives
We also tested our algorithm on the top 10,000 Alexa domains, filtering out strings shorter than 8 characters. Out of the remaining 5,400 domain names, the following were incorrectly detected as random:

- lmebxwbsno
- bezuzyteczna
- thiruFuvcd
- 123sdfsdfsdfsd
- lavoixdunord
- 3a6aayer
- fmdwbsfxf0
- plsdrct2
- andhrajyothy
- canlidizihd1
- abckj123
- muryouav
- nguoiduaHn
- mazika2day
- hosyusokuhou
- przegladsportowy
- follovvme
- masqforo
- fullvehdﬁlmizle
- plsdrct1
- addic7ed
- 1c5bitrix
- anige5sokuhouvip
- xeronetxx
- akb48matomemory
- 3djuegos
- phununet
- thqafawe3lom
- donya5e5eqtesad
- ikih0ofu
- thaqafnafsak
- srv2trking
- vecteezy
- turkcealtyazi
- adstrckr
- avmuryou
- nsdfsﬁ1q8asdasdzz
- iiasdomk1m9812m4z3
- thiruFuvcd
- esrvadspix
- isif5life
- ig84adp2

This comprehensive approach provides a robust method for detecting random strings, particularly those generated by DGAs, while minimizing false negatives and positives.