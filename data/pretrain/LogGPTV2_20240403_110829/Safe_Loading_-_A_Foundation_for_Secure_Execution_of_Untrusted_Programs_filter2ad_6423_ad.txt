of the sandbox, enabling security right from the start.
F. Changes to the regular sandbox
The safe sandbox in Figure 3 is based on the libdetox [37]
open-source project. Changes to the original implementation
are an API for the secure loader, an alternate sandbox stack
for functions in the sandbox domain, and a new shadow
stack to store information about the application stack in the
sandbox domain.
The sandbox uses the secure loader to lookup information
on the different sections. The sandbox uses this information
to decide if code is in an executable section of a shared
object or in some other region. The same information is used
to implement PLT inlining as described in Section VI-D.
Our sandbox uses speciﬁc entry and exit trampolines to
simplify the transition between the application domain and
the sandbox domain. The entry trampoline handles the tran-
sition from translated application code to privileged sandbox
code. The application stack remains unchanged, registers
are spilled to a thread-local storage area in the sandbox
domain and the stack is swapped to a sandbox stack. Code
running in the sandbox domain uses the sandbox stack to
store local information. The exit trampoline returns from the
sandbox domain to the application domain. The trampoline
restores registers, switches back to the application stack, and
continues the execution of the translated code.
Events that trigger a switch from the application domain
to the sandbox domain are:
Lookup misses in the mapping table: if an indirect con-
trol ﬂow transfer cannot be resolved with the inlined
assembler code (e.g., a quick lookup in the ﬁrst entry of
the mapping hash table) then the control ﬂow transfer
code escalates to the sandbox domain and requests a
slow-path lookup.
Untranslated code: if
translated application code
branches to untranslated code an exception is triggered
and the sandbox either translates the untranslated code
and continues execution or faults.
the
Signals and exceptions: the sandbox installs special han-
dlers to catch all signals and exceptions. These handlers
check the signal or exception, resolve the original
instruction pointer8, check if the signal or exception
is legit, and pass the information to the application.
System calls: system calls trigger a switch to the sandbox
domain. A handler copies the arguments of the system
8The kernel passes an instruction pointer to the code cache that must
be resolved to a pointer in the application domain before the signal or
exception is passed to the application.
27
into the sandbox domain. If an argument
is a
call
pointer to a data structure then only the pointer is
copied. The handler then checks the combination of
system call and parameters using a per-application
policy. The system call is evaluated in the sandbox
domain to protect from time of check to time of use
attacks by concurrent threads.
The shadow stack protects the application from return-
oriented programming attacks. The basic concept of the
shadow stack keeps information about the application stack
frames in the sandbox domain. The shadow stack uses triples
of pointers of return instruction pointer, translated return
instruction pointer, and stored application stack pointer.
The original
libdetox implementation uses only pairs of
pointers of return instruction pointer and translated return
instruction pointer. The advantage of using triples is that
the stack can be resynchronized if there is a mismatch. If
the last translated function removed multiple stack frames
(e.g., through exception handling) then the reauthentication
method can pop stack frames on the shadow stack until the
application stack pointer matches the stored stack pointer on
the shadow stack, resynchronizing the shadow stack with the
application stack.
G. Implementation alternatives
We discuss two implementation alternatives that offer a
similar security concept
to the combination of a secure
loader with a sandbox. The ﬁrst alternative uses static
recompilation. All
libraries are compiled to a statically
linked binary, guards are added during the recompilation,
and the loader is no longer needed. This approach has
several drawbacks: (i) there is no second protection domain;
exploits can get control of the user-space and then execute
arbitrary system calls, (ii) static recompilation is limited to
statically known targets and code locations (e.g., handling
of dynamic jump-tables for switch statements), (iii) a secure
static runtime environment must restrict the ISA and the dy-
namic control ﬂow transfer instructions to limit the dynamic
options of the IA32 ISA.
A second alternative implements a sandbox without
changing the loader. The sandbox is hidden from the ap-
plication using loader tricks that alter the data structures
of the loader, or the sandbox is added as a binary blob
and injected into the process image by an external process.
This implementation approach has the disadvantage that it
is hard to hide the sandbox from the loader/application
and to remove all traces from the sandbox in the loader
data structures. A second disadvantage is that loader code
is translated as well, especially when new symbols are
resolved. This disadvantage leaves the loader black box
problem unsolved.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
VII. EVALUATION AND DISCUSSION
This section evaluates and discusses the implementation
prototype of the secure execution platform to demonstrate
its practicability. The evaluation shows a performance eval-
uation for the SPEC CPU benchmarks and discusses limita-
tions of the current implementation.
A. SPEC CPU benchmarks
We use the SPEC CPU2006 benchmarks version 1.0.1 to
evaluate the performance and feasibility of our prototype
implementation. The SPEC benchmarks are run on an Intel
Xeon E5520 CPU at 2.27GHz on Ubuntu Jaunty with gcc
version 4.3.3 on a x64 kernel with 32bit support. We evaluate
a subset of the SPEC CPU 2006 benchmarks. The missing
C++ benchmarks did not compile with the gcc 4.3.3 due
to changes of the C++ header ﬁles; the missing fortran
benchmarks did not
link due to library problems under
64bit. These missing SPEC CPU 2006 benchmarks run if the
source ﬁles (for C++ based benchmarks) or the Makeﬁle (for
fortran based benchmarks) are patched. This section only
reports on the unmodiﬁed SPEC CPU2006 benchmarks.
Table II displays the number of relocations per benchmark
run and the number of loaded DSOs for a subset of the SPEC
CPU2006 benchmarks. The total number of relocations
is low (between 1,381 and 1,597 relocations) for all the
evaluated SPEC CPU 2006 benchmarks.
Table III shows the overhead of the secure loader com-
pared to the standard loader. The performance of the secure
loader is competitive to the standard loader. Comparing the
columns of the secure loader to the secure loader with
memory protection illustrates that the overhead of the secure
loader to protect all writable sections except .data and
.bss is negligible. The cost for protecting the memory
pages that contain the loader data for each shared object
is amortized during the runtime of the program.
Benchmark
400.perlbench
401.bzip2
403.gcc
429.mcf
445.gobmk
456.hmmer
464.h264ref
435.gromacs
470.lbm
Relocations
1,447
1,368
1,437
1,381
1,422
1,431
1,423
1,597
1,377
DSOs
3
2
3
3
3
3
3
5
3
Runs
3
6
9
1
5
2
3
1
1
Table II
PER BENCHMARK AVERAGE NUMBER OF RELOCATIONS, LOADED
DSOS, AND NUMBER OF BINARIES EXECUTED IN A BENCHMARK RUN
FOR A SUBSET OF THE SPEC BENCHMARKS.
The last column displays the overhead of TRuE (including
secure loader, memory protection from Section VI-C and full
sandboxing of all application code). Most programs have
low overhead and safe execution is feasible. Running all
28
Benchmark
400.perlbench
401.bzip2
403.gcc
429.mcf
445.gobmk
456.hmmer
458.sjeng
464.h264ref
473.astar
433.milc
434.zeusmp
445.gromacs
436.cactusADM
444.namd
450.soplex
459.GemsFDTD
470.lbm
482.sphinx3
462.libquantum
Average
SL+mprot
-0.2%
-0.1%
-0.9%
-0.1%
0.0%
0.0%
0.0%
-0.3%
0.0%
0.0%
0.3%
0.0%
0.8%
0.0%
-0.2%
-0.2%
0.1%
0.1%
0.0%
0.0%
TRuE
85%
4.9%
38%
0.5%
32%
5.3%
58%
41%
8.3%
3.7%
-0.5%
0.8%
0.6%
1.1%
8.4%
3.0%
0.2%
0.5%
2.2%
15%
SL
-0.3%
-0.1%
-0.9%
-0.1%
0.0%
0.0%
0.0%
-0.3%
0.1%
-0.1%
0.0%
0.0%
0.2%
0.0%
-0.2%
-0.2%
0.0%
0.1%
0.0%
-0.1%
Table III
PER BENCHMARK AVERAGE OVERHEAD COMPARED TO THE STANDARD
LOADER. THE COLUMNS ARE THE SECURE LOADER, SECURE LOADER
PLUS MEMORY PROTECTION (SECTION VI-C), AND TRUE: SECURE
LOADER, MEMORY PROTECTION AND FULL SANDBOXING OF ALL CODE.
application code in a sandbox and checking all control ﬂow
transfers results in additional overhead between 0.5% and
85% for the SPEC benchmarks compared to the standard
loader. The overhead results mostly from binary translation
(i.e., the execution of indirect control ﬂow transfers) and
only little overhead is induced through the additional secu-
rity checks.
Benchmarks with a very high number of indirect control
ﬂow transfers (these transfers incur a runtime check in
the sandbox) have higher overhead (e.g., 400.perlbench,
403.gcc, or 464.h264ref). Every executed indirect control
ﬂow transfer needs a runtime lookup in the mapping table of
the BT. The BT implementation reduces the cost of runtime
through caching of source target pairs, fast paths for often
executed targets, and other optimizations. Nevertheless they
are the biggest factor in the overall overhead.
The average overhead for all evaluated benchmarks is
15% which is tolerable for the combination of safe loading
and sandboxing. The overhead of TRuE for individual
benchmarks is comparable to the sandboxing overhead of
libdetox [37].
B. OpenOfﬁce 3.2.1
We measured OpenOfﬁce startup as a stress test and
worst-performance metric, 145 DSOs are loaded, relocated,
and executed with very low code reuse. OpenOfﬁce was run
on an Intel Core i7 CPU at 3.07GHz on Ubuntu Maverick.
OpenOfﬁce 3.2.1 executes 265,067 relocations during the
startup phase and loads 145 individual shared objects. The
secure loader imposes an overhead of 44% for OpenOfﬁce
and 77% overhead for the additional memory protection. If
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:47:59 UTC from IEEE Xplore.  Restrictions apply. 
the full protection sandbox and the secure loader are used in
combination then the start-up of OpenOfﬁce is slowed down
by 188%.
The overhead for OpenOfﬁce results from additional
checks that are carried out whenever a new shared object
is loaded and all relocation entries need to be resolved.
The OpenOfﬁce startup sequence is evaluated as a worst-
case scenario. Code is rarely reused and a huge number of
references between objects need to be resolved. The over-
head for the secure loader comes from less efﬁcient loading
and symbol resolving. The additional overhead between the
secure loader and the secure loader plus memory protection
comes from the additional mprotect system calls used to
protect all runtime sections except .data, .bss, .tdata,
and .tbss.
native
sandbox
sandbox ovhd.
standard loader
178,336 kB
256,156 kB
(43.6%)
secure loader
208,312 kB
289,569 kB
(39.0%)
loader ovhd.
(16.8%)
(13.0%)
OPENOFFICE MEMORY CONSUMPTION SHOWING THE MEMORY
OVERHEAD OF THE SECURE LOADER AND THE SANDBOX.
Table IV
Table IV shows OpenOfﬁce memory consumption as
given by ps -o vsz,command. The secure loader con-
sumes between 13.0% and 16.8% more memory than the
standard loader. The standard loader uses malloc and
free to allocate memory. The secure loader does not use
any external libraries and relies on direct mmap calls and
a less-efﬁcient internal memory management system. The
secure loader memory overhead can be reduced with a more
efﬁcient memory management system.
Sandboxing results in 39.0% to 43.6% memory overhead
the
due to the internal data structures of the sandbox,
mapping cache, and the code cache for translated application
code. An overhead of 77,820 kB to 81,257 kB to sandbox
large applications like OpenOfﬁce is both tolerable and
feasible.
C. Discussion of TRuE’s security features
TRuE combines a sandbox that enables the execution of
untrusted code with a secure loader. The secure loader can
load and relocate unmodiﬁed binaries and shared libraries
that are then executed under the control of the sandbox.
The sandbox uses the internal information of the secure
loader to optimize the code layout of the internal cache.
TRuE protects unmodiﬁed binary applications from code-
based attack vectors and enables a safe foundation to execute
applications that use shared libraries.
TRuE splits the user-space into two execution domains,
the privileged sandbox domain that controls an application
and the application domain that executes translated appli-
cation code. The secure loader starts and initializes the
29
sandbox before the application binary is opened. The loader
then loads and relocates the application and all libraries.
Any application code is executed under the control of the
sandbox.
The sandbox ensures that no untranslated code is ex-
ecuted. The memory layout of the sandbox ensures that
no code-injection attacks are possible. All memory regions
are either executable or writable, but never executable and
writable. The security guards that are woven into the trans-
lated code ensure that any direct or indirect control ﬂow
transfers only redirect control ﬂow to already known and