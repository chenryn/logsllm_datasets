5. Keeping aside the usefulness of our naming mechanism for
collaboration purpose, the mechanism is even useful in stand
alone access control setups. For example, i) to design new
security ordering on top of the existing one, ii) to handle re-
quirements that are contradictory/exceptional in underlying
access control model – to deﬁne private roles, over-riding hi-
erarchy in RBAC [31, 44].
5. RELATED WORK
RBAC [35] (Role-based access control) was introduced in 1996
as a solution to the shortcomings of MAC [6] (mandatory access
control) and DAC (discretionary access control) [26] frameworks.
RBAC [18] became a de facto standard in large organizations with
a large number of users and resources to be managed. RBAC pro-
vided a systematic way to organize users and resources.
It does
so by mapping users to organizational roles and permissions over
resources to the set of organizational roles [18]. Subsequently, the
trend of globalization and interdependence of large organizations
necessitated introduction of a family of frameworks [41, 42, 14] on
top of the RBAC framework.
The ﬁrst of these three models – TMAC [41] (team based access
control) introduced the notion of “team” to refer to a group of col-
laborating users acting in various roles and provided a way to as-
sign permissions to the “team”. TBAC [42] (task based access con-
trol) was introduced to synchronize access permissions with on-
going tasks and workﬂow instances spanning across organizations.
CBAC [14] (coalition based access control) was introduced to cap-
ture the notion of “coalition” of organizations working for common
task. There were also similarly motivated works [4, 23] on these
lines, independent of RBAC framework.
The access control decisions in the RBAC family frameworks (i.e.,
TMAC, TBAC, CBAC) are based on set membership queries, as
discussed in Section 1. That is, when these models try to address
collaborations in a distributed environment they need to rely on a
mechanism that communicates internal state of collaborating do-
mains to all collaborators or a mediator if the collaborations are
mediator facilitated. This essentially turns the whole environment
into an on-line environment. These models facilitate collaboration
across domains that have RBAC as their underlying access control
model.
Interoperability of access control frameworks becomes a hindrance
when domains with heterogeneous access control frameworks need
to collaborate. Bonatti, Sapino and Subrahmanian [10] points out
that even with frameworks of same type the collaborators may not
use the same security orderings. Furthermore, collaborative en-
vironments also need a mechanism to authenticate and authorize
requests originating from collaborating domain. SAML/XACML
[37, 17] (Security Assertion Markup Language/eXtensible Access
Control Markup Language) is a methodology to perform and con-
vey inter-domain authentication and authorization. The naming
scheme is canonical and the setup is on-line in nature. Also, to
ascertain the properties like authenticity of assertions and their non-
repudiation needs integration of a PKI. In [30] other shortcom-
ings of XACML are discussed. X-RBAC [22] gives a XML-based
speciﬁcation language for multi-domain environments’ policy-
speciﬁcation needs. X-GTRBAC [7] is a XML-based administra-
tion model for multi-domain environment that aims at enabling ad-
ministration of RBAC policies in the presence of constraints with
support for conﬂict resolution.
7. REFERENCES
[1] M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. A
calculus for access control in distributed systems. ACM
Trans. Program. Lang. Syst., 15(4):706–734, 1993.
The reliance on a PKI is compelling in a collaborative environment
formed of independent autonomous administrative domains, since
the inter-domain communications also require non-repudiation.
Acknowledging this real need for realizing multi-domain collab-
orations, several innovative approaches [29, 11, 43, 39, 21, 15,
9, 28] have been proposed. These proposals are based on X.509
type of PKI. X.509 is a centralized PKI and intended for identiﬁ-
cation [16]. Therefore schemes based on X.509 type of PKI use
digital certiﬁcates and its extensions to securely authenticate users
in distributed environment and then take authorization decisions.
SPKI/SDSI [13] was proposed to address the shortcomings of tradi-
tional X.509 type of PKI. SPKI/SDSI uses two different certiﬁcates
– name and authorization certiﬁcates. Authorization certiﬁcates are
introduced to communicate authorizations in distributed environ-
ment securely. However, X.509 is the most widely deployed and
used PKI in real world.
SPKI/SDSI is a very ﬂexible and expressive framework for achiev-
ing authentication and authorization in a distributed environment.
An overlay mechanism similar to ours proposed in this paper can
also be achieved using SPKI/SDSI except the feature of privacy to
collaborators. SPKI/SDSI also has a tag() ﬁeld in its authorization
certiﬁcates (equivalent to the freedom of composing chameleon-
hash-message and commitment-message under our mechanism)
where developers can introduce constructs as per their require-
ments.
6. CONCLUSION
We have introduced a name and an authorization deﬁnition scheme
based on chameleon hash functions. We have shown how to in-
terlink names and utilize this facility to form overlays for collab-
oration. With a comprehensive scenario we have explained how
collaborators build bridges to accommodate each others’ users and
resources. We have also seen how the context of a collaboration
is captured and its relation to other concurrent collaborations of
collaborators. The use of chameleon signatures as a collaboration
agreement provides privacy to the collaborators. Overlays provide
an ease of understanding and manageability to administrators in
charge of setups. Overlays also reorganize heterogeneous collab-
orating setups into new security orderings that are acceptable to
collaborators. We also have made a case through our implementa-
tion results for computational heterogeneity among collaborators,
whereby choosing an appropriate scheme the computational load
can be shifted to a peer collaborator.
The facility of name interlinking and reliance of collaborators on
each others name bindings, like SPKI/SDSI, leads towards a ﬂex-
ible and expressive trust management system with additional ben-
eﬁts of privacy. Usefulness of our mechanism for realizing incom-
plete contracts is worth investigating.
Incomplete contracts is a
practical way of signing contracts (most of real world contracts fall
under this category) where all the minor details of obligations are
not enlisted or cannot be explicitly speciﬁed. The property of hav-
ing a ﬁxed hash value (say, of a contract document) and then ﬁnding
collisions for this hash value while keeping the signature over the
ﬁxed hash value intact, is complementary for realizing incomplete
contracts.
[2] X. Ao and N. H. Minsky. Flexible regulation of distributed
coalitions. In ESORICS ’03, 8th European Symposium on
Research in Computer Security, volume 2808 of Lecture
Notes in Computer Science, pages 39–60. Springer, 2003.
[3] G. Ateniese, D. H. Chou, B. de Medeiros, and G. Tsudik.
Sanitizable signatures. In ESORICS ’05: Proceedings of the
10th European Symposium on Research in Computer
Security, volume LNCS (3679), pages 159–177.
Springer-Verlag, 2005.
[4] V. Atluri and W.-K. Huang. An authorization model for
workﬂows. In ESORICS ’96: Proceedings of the 4th
European Symposium on Research in Computer Security,
volume LNCS (1146), pages 44–64. Springer-Verlag, 1996.
[5] M. authors. Implementation code (Blinded, as per
submission instructions), 2005. http://.
[6] D. Bell and L. Lapadula. Secure computer systems:
Mathematical foundations and model. Technical Report
M74-244, Mitre Corp, Bedford, Mass, 1975.
[7] R. Bhatti, B. Shaﬁq, E. Bertino, A. Ghafoor, and J. B. D.
Joshi. X-GTRBAC admin: A decentralized administration
model for enterprise-wide access control. ACM Transactions
on Information and System Security (TISSEC),
8(4):388–423, 2005.
[8] C. Bidan and V. Issarny. Dealing with multi-policy security
in large open distributed systems. In ESORICS ’98:
Proceedings of the 5th European Symposium on Research in
Computer Security, pages 51–66. Springer-Verlag, 1998.
Lecture Notes In Computer Science; Vol. 1485.
[9] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. Keromytis.
The KeyNote Trust-Management System Version 2. RFC
2704, Internet Engineering Task Force, 1999.
[10] P. A. Bonatti, M. L. Sapino, and V. S. Subrahmanian.
Merging heterogenous security orderings. Journal of
Computer Security, 5(1):3–29, 1997.
[11] D. W. Chadwick and A. Otenko. The permis x.509 role based
privilege management infrastructure. In SACMAT ’02:
Proceedings of the seventh ACM symposium on Access
control models and technologies, pages 135–140. ACM
Press, 2002.
[12] X. Chen, F. Zhang, and K. Kim. Chameleon hashing without
key exposure. In ISC ’04: Information Security, 7th
International Conference, volume LNCS (3225), pages
87–98. Springer-Verlag, 2004.
[13] D. Clarke, J.-E. Elien, C. Ellison, M. Fredette, A. Morcos,
and R. Rivest. Certiﬁcate chain discovery in SPKI/SDSI.
Journal of Computer Security, 9(4):285–322, 2001.
[14] E. Cohen, R. K. Thomas, W. Winsborough, and D. Shands.
Models for coalition-based access control (CBAC). In
SACMAT ’02: Proceedings of the seventh ACM symposium
on Access control models and technologies, pages 97–106.
ACM Press, 2002.
[15] G. Denker, J. Millen, and Y. Miyake. Cross-domain access
control via PKI. In POLICY ’02: Proceedings of the 3rd
International Workshop on Policies for Distributed Systems
and Networks, page 202. IEEE Computer Society, 2002.
[16] C. Ellison. Improvements on conventional PKI wisdom. In
First annual PKI Research Workshop, 2002.
http://www.cs.dartmouth.edu/ pki02/Ellison/paper.pdf.
[17] eXtensible Access Control Markup Language (XACML 2.0).
[33] V. Patil and R. K. Shyamasundar. Towards a ﬂexible access
OASIS Standard,
http://www.oasis-open.org/committees/xacml/, 2005.
[18] D. F. Ferraiolo, R. S. Sandhu, S. I. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST standard for role-based
access control. ACM Transactions on Information and
System Security, 4(3):224–274, 2001.
[19] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman. Protection in
operating systems. Commun. ACM, 19(8):461–471, 1976.
[20] A. Herzberg, Y. Mass, J. Michaeli, Y. Ravid, and D. Naor.
Access control meets public key infrastructure, or: Assigning
roles to strangers. In S&P ’00: Proceedings of the IEEE
Symposium on Security and Privacy, pages 2–14. IEEE
Computer Society, 2000.
[21] D. Jonscher and K. R. Dittrich. Argos – conﬁgurable access
control system for interoperable environments. In
Proceedings of the ninth annual IFIP TC11 WG11.3 working
conference on Database security IX : status and prospects,
pages 43–60, London, UK, UK, 1996. Chapman & Hall, Ltd.
[22] J. B. D. Joshi, R. Bhatti, E. Bertino, and A. Ghafoor.
Access-control language for multidomain environments.
IEEE Internet Computing, 8(6):40–50, 2004.
[23] M. H. Kang, J. S. Park, and J. N. Froscher. Access control
mechanisms for inter-organizational workﬂow. In SACMAT
’01: Proceedings of the sixth ACM symposium on Access
control models and technologies, pages 66–74. ACM Press,
2001.
[24] H. Khurana, V. Gligor, and J. Linn. Reasoning about joint
administration of access policies for coalition resources. In
ICDCS ’02: Proceedings of the 22 nd International
Conference on Distributed Computing Systems (ICDCS’02),
page 429. IEEE Computer Society, 2002.
[25] H. Krawczyk and T. Rabin. Chameleon hashing and
signatures. In NDSS ’00: Proceedings of the ISOC
Symposium on Network and Distributed System Security,
pages 143–154, 2000.
[26] B. W. Lampson. Protection. ACM SIGOPS Operating
Systems Review, 8(1):18–24, 1974.
control mechanism for e-transactions. In EGCDMAS ’04:
International Workshop on Electronic Government, and
Commerce: Design, Modeling, Analysis and Security, pages
66–81. INSTICC, 2004.
[34] R. Sandhu. Role activation hierarchies. In RBAC ’98:
Proceedings of the third ACM workshop on Role-based
access control, pages 33–40. ACM Press, 1998.
[35] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E.
Youman. Role-based access control models. IEEE Computer,
29(2):38–47, 1996.
[36] B. Schneier. Applied Cryptography, Second Ed. John Wiley
and Sons, 1996.
[37] Security Assertion Markup Language (SAML V2.0). OASIS
Standard, http://www.oasis-open.org/committees/security/,
2005.
[38] A. Shamir and Y. Tauman. Improved online/ofﬂine signature
schemes. CRYPTO ’01: Proceedings of the 21st Annual
International Cryptology Conference on Advances in
Cryptology, Springer-Verlag, LNCS(2139):355–367, 2001.
[39] D. Shands, R. Yee, J. Jacobs, and E. J. Sebes. Secure virtual
enclaves: Supporting coalition use of distributed application
technologies. ACM Trans. Inf. Syst. Secur., 4(2):103–133,
2001.
[40] M. Shehab, E. Bertino, and A. Ghafoor. Secure collaboration
in mediator-free environments. In CCS ’05: Proceedings of
the 12th ACM conference on Computer and communications
security, pages 58–67. ACM Press, 2005.
[41] R. K. Thomas. Team-based access control (TMAC): a
primitive for applying role-based access controls in
collaborative environments. In RBAC ’97: Proceedings of the
second ACM workshop on Role-based access control, pages
13–19. ACM Press, 1997.
[42] R. K. Thomas and R. S. Sandhu. Task-based authorization
controls (TBAC): A family of models for active and
enterprise-oriented autorization management. In Proceedings
of the IFIP TC11 WG11.3 Eleventh International Conference
on Database Securty XI, pages 166–181, 1998.
[27] N. Li. Local names in SPKI/SDSI. In CSFW ’00:
[43] M. Thompson, W. Johnston, S. Mudumbai, G. Hoo,
K. Jackson, and A. Essiari. Certiﬁcate-based access control
for widely distributed resources. In ”SEC ’99: Proceedings
of the 8th USENIX Security Symposium”, pages 215–228.
USENIX, 1999.
[44] X. Zhang, S. Oh, and R. Sandhu. PBDM: a ﬂexible
delegation model in RBAC. In SACMAT ’03: Proceedings of
the eighth ACM symposium on Access control models and
technologies, pages 149–157. ACM Press, 2003.
Proceedings of The 13th Computer Security Foundations
Workshop, pages 2–15. IEEE Computer Society Press, 2000.
[28] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a
role-based trust-management framework. In SP ’02:
Proceedings of the 2002 IEEE Symposium on Security and
Privacy, pages 114–130. IEEE Computer Society, 2002.
[29] J. Linn and M. Nystr¨om. Attribute certiﬁcation: an enabling
technology for delegation and role-based controls in
distributed environments. In RBAC ’99: Proceedings of the
fourth ACM workshop on Role-based access control, pages
121–130. ACM Press, 1999.
[30] P. Mazzoleni, E. Bertino, B. Crispo, and S. Sivasubramanian.
XACML policy integration algorithms: not to be confused
with XACML policy combination algorithms! In SACMAT
’06: Proceedings of the eleventh ACM symposium on Access
control models and technologies, pages 219–227. ACM
Press, 2006.
[31] J. D. Moffett. Control principles and role hierarchies. In
RBAC ’98: Proceedings of the third ACM workshop on
Role-based access control, pages 63–69. ACM Press, 1998.
[32] NIST. Secure Hash Standard (SHS). Federal Information
Processing Standards Publication 180-1, April 1995.
APPENDIX
A. DELEGATION
Consider Figure 6(c), where collaboration between domain A and
domain B, i.e., A •T1 B is denoted by A . A is a new virtual do-
main which can forge new collaborations further. To do so, either
A or B has to control this virtual domain in order to construct an
overlay for further collaborations arising out of A . Let us assume
A is controlling this new virtual domain and made responsible to
handle further collaborations of A . To make this happen, B need
to delegate rights over its shared resources for A •T1 B to A. We
introduce a delegation construct “Also-honor” for this purpose, see
Figure 8. This a way to inform resources of B to accept proofs that
contains authorization commitments issued by A.
MBr :=
Name
PERMS
Validity
Also-honor
PRMS (ROLE.Manager) - PRMS.Update
:= KB CID244
:=
:= TRUE (TASK.T1)
:= KA
Figure 8: Delegating authorization
One can also think of an additional construct to specify the status
of further delegation by subjects.
Security violations arising out of this delegation facility are not ad-
dressed within the mechanism. However, the mechanism proposed
in [40] can be used to check the violations in respective collaborat-
ing domains.