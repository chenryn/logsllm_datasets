### 5. Utility of the Naming Mechanism

Beyond its utility for collaboration, our naming mechanism is also valuable in standalone access control setups. For example, it can be used to:
- Design new security orderings on top of existing ones.
- Handle requirements that are contradictory or exceptional in the underlying access control model, such as defining private roles and overriding hierarchies in Role-Based Access Control (RBAC) [31, 44].

### 5. Related Work

Role-Based Access Control (RBAC) was introduced in 1996 [35] as a solution to the limitations of Mandatory Access Control (MAC) [6] and Discretionary Access Control (DAC) [26] frameworks. RBAC [18] became the de facto standard in large organizations with numerous users and resources, providing a systematic way to organize users and resources by mapping them to organizational roles and permissions [18]. The trend of globalization and interdependence among large organizations necessitated the introduction of a family of frameworks [41, 42, 14] built on top of the RBAC framework.

The first of these models, Team-Based Access Control (TMAC) [41], introduced the concept of "team" to refer to a group of collaborating users acting in various roles and provided a way to assign permissions to the team. Task-Based Access Control (TBAC) [42] was introduced to synchronize access permissions with ongoing tasks and workflow instances across organizations. Coalition-Based Access Control (CBAC) [14] was designed to capture the notion of a "coalition" of organizations working on a common task. Other works [4, 23] were similarly motivated, independent of the RBAC framework.

Access control decisions in the RBAC family frameworks (i.e., TMAC, TBAC, CBAC) are based on set membership queries, as discussed in Section 1. In distributed environments, these models need to rely on a mechanism that communicates the internal state of collaborating domains to all collaborators or a mediator if the collaborations are mediator-facilitated. This turns the environment into an online one, facilitating collaboration across domains with RBAC as their underlying access control model.

Interoperability of access control frameworks becomes a challenge when domains with heterogeneous access control frameworks need to collaborate. Bonatti, Sapino, and Subrahmanian [10] point out that even with frameworks of the same type, collaborators may not use the same security orderings. Additionally, collaborative environments require a mechanism to authenticate and authorize requests from collaborating domains. Security Assertion Markup Language (SAML) and eXtensible Access Control Markup Language (XACML) [37, 17] provide a methodology for inter-domain authentication and authorization. The setup is online, and ensuring properties like authenticity and non-repudiation requires integration with a Public Key Infrastructure (PKI). Other shortcomings of XACML are discussed in [30]. X-RBAC [22] offers an XML-based specification language for multi-domain policy specification, while X-GTRBAC [7] is an XML-based administration model for multi-domain environments that supports conflict resolution and constraints.

### 7. References

[1] M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. A calculus for access control in distributed systems. ACM Trans. Program. Lang. Syst., 15(4):706–734, 1993.

The reliance on a PKI is essential in a collaborative environment formed of independent autonomous administrative domains, as inter-domain communications also require non-repudiation. Several innovative approaches [29, 11, 43, 39, 21, 15, 9, 28] have been proposed to address this need. These proposals are based on X.509-type PKIs, which are centralized and intended for identification [16]. Schemes based on X.509 use digital certificates and extensions to securely authenticate users in distributed environments and make authorization decisions. SPKI/SDSI [13] was proposed to address the shortcomings of traditional X.509 PKIs, using two different types of certificates: name and authorization. Authorization certificates securely communicate authorizations in distributed environments. However, X.509 remains the most widely deployed and used PKI in the real world.

SPKI/SDSI is a flexible and expressive framework for achieving authentication and authorization in distributed environments. An overlay mechanism similar to ours can be achieved using SPKI/SDSI, except for the feature of privacy to collaborators. SPKI/SDSI also has a `tag` field in its authorization certificates, where developers can introduce constructs as per their requirements.

### 6. Conclusion

We have introduced a name and authorization definition scheme based on chameleon hash functions. We have shown how to interlink names and utilize this facility to form overlays for collaboration. Through a comprehensive scenario, we have explained how collaborators build bridges to accommodate each other's users and resources. We have also demonstrated how the context of a collaboration is captured and its relation to other concurrent collaborations of collaborators. The use of chameleon signatures as a collaboration agreement provides privacy to the collaborators. Overlays provide ease of understanding and manageability to administrators in charge of setups and reorganize heterogeneous collaborating setups into new security orderings acceptable to collaborators. Our implementation results highlight the computational heterogeneity among collaborators, allowing the computational load to be shifted to a peer collaborator.

The facility of name interlinking and reliance on each other's name bindings, like SPKI/SDSI, leads to a flexible and expressive trust management system with additional benefits of privacy. The usefulness of our mechanism for realizing incomplete contracts, where minor details of obligations are not explicitly specified, is worth investigating. The property of having a fixed hash value (e.g., of a contract document) and finding collisions for this hash value while keeping the signature over the fixed hash value intact, is complementary for realizing incomplete contracts.

### Appendix A: Delegation

Consider Figure 6(c), where the collaboration between domain A and domain B, denoted as A •T1 B, is represented by A. A is a new virtual domain that can forge further collaborations. To do so, either A or B must control this virtual domain to construct an overlay for further collaborations arising from A. Assume A controls this new virtual domain and is responsible for handling further collaborations. To enable this, B needs to delegate rights over its shared resources for A •T1 B to A. We introduce a delegation construct "Also-honor" for this purpose, as shown in Figure 8. This construct informs B's resources to accept proofs containing authorization commitments issued by A.

```plaintext
MBr :=
Name
PERMS
Validity
Also-honor
PRMS (ROLE.Manager) - PRMS.Update
:= KB CID244
:=
:= TRUE (TASK.T1)
:= KA
```

Figure 8: Delegating authorization

One can also consider an additional construct to specify the status of further delegation by subjects. Security violations arising from this delegation facility are not addressed within the mechanism, but the method proposed in [40] can be used to check for violations in respective collaborating domains.