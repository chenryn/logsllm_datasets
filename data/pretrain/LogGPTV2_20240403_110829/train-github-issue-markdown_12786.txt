##### System information (version)
  * OpenCV => 4.0.0
  * Operating System / Platform => Windows7
  * Compiler => VS
##### Detailed description
In `haarfeatures.cpp` in OpenCV I see the following implementation for V & J
Haar features:
     void CvHaarEvaluator::generateFeatures()
    {
        int mode = ((const CvHaarFeatureParams*)((CvFeatureParams*)featureParams))->mode;
        int offset = winSize.width + 1;
        for( int x = 0; x ((int)y) : _sum.ptr((int)y);
        float ret = rect[0].weight * (img[fastRect[0].p0] - img[fastRect[0].p1] - img[fastRect[0].p2] + img[fastRect[0].p3] ) +
            rect[1].weight * (img[fastRect[1].p0] - img[fastRect[1].p1] - img[fastRect[1].p2] + img[fastRect[1].p3] );
        if( rect[2].weight != 0.0f )
            ret += rect[2].weight * (img[fastRect[2].p0] - img[fastRect[2].p1] - img[fastRect[2].p2] + img[fastRect[2].p3] );
        return ret;
    }
For haar_x2 the configuration is:
![enter image description
here](https://camo.githubusercontent.com/18ba84726d5c264f90bf84d9cfcef257c697025614a113887e45b31faa5fef17/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f75533657482e706e67)
so the first rectangle `(x, y, dx*2, dy)` represents the sum A+B (with weight
-1)  
and the second rectangle `(x+dx, y, dx, dy)` represents just B (with weight
+2)  
summing up with weights gives -(A + B) + 2 * B = B - A as it should. the same
holds for haar_y2
for x2_y2 the configuration is:
![enter image description
here](https://camo.githubusercontent.com/6ba309f087983faec533564c207fd37c575528b8202d21cf968e087276a07cc4/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f7a577a4b6f2e706e67)
Here the first rectangle `(x, y, dx*2, dy*2)` represents (A + B + C + D),  
the second rectangle `(x, y, dx, dy)` represents A  
and the third rectangle `(x+dx, y+dy, dx, dy)` represents D  
so with weights we get -(A + B + C + D) + 2 * A + 2 * D = A + D - (B + C)  
as we should.
**But** for haar_x3 (and y3) the configuration is:
![enter image description
here](https://camo.githubusercontent.com/8d9d2f203079e424c1bf05b14ce9d400425ebaa89472341ff3b65cc9ab17472b/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f326679476c2e706e67)
so the first rectangle `(x, y, dx*3, dy)` represents (A + B + C)  
and the second rectangle `(x+dx, y, dx, dy)` represents B.
Now, with weights we get -(A + B + C) + **3*B** = 2 * B - (A + C)  
while the V & J paper states that
> "A three rectangle feature computes the sum within two outside  
>  rectangles substracted from the sum in the center rectangle"
![enter image description
here](https://camo.githubusercontent.com/efa665a761f5f9e528568181c1f5d08b2495654ceaeb50f017c5978ac60f8432/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f48666677352e706e67)
**I read this as B - (A + C) and not 2 * B - (A + C)!.**
Am I missing something here? or is this a bug? can anyone confirm this?
##### Steps to reproduce