is observed by several
main assumption of COV
researchers through the Internet measurements [28]. We do
not belabor that subject. The other simpliﬁcations and ap-
proximations regarding the rate control of TFRC (basic versus
comprehensive) or in computing the gap between
might have some impact on the correctness of
and
the analysis. We show in this section that despite these simpli-
ﬁcations and approximations, our analysis is very consistent
with the experimental results. Second, our analysis shows only
relative bounds and inequality, but does not quantify these
bounds. Thus, it is hard to ﬁnd out whether the sending rate
gap caused by the factors identiﬁed in Section V has a major
impact on the actual throughput difference between TCP and
TFRC. Relating the results from Sections V-A and V-B back
to those from Section IV, we also verify our conjecture that the
loss event rate difference (caused by sending rate difference)
can amplify the sending rate difference deﬁned by the bounds.
For all ns experiments, we have TFRC set its RTO value in the
same way as the standard-conformant TCP in order to eliminate
the effect of different RTO estimation techniques on the perfor-
mance of TFRC. In Section VI, we study how different network
860
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 15, NO. 4, AUGUST 2007
Fig. 6. Per-ﬂow throughput ratio plotted over average loss event rate p. p =
1=^ and p
= 1=E[]. L = 8. All the ratios are computed with respect to
normalized TFRC throughput.
Fig. 8. Average throughput difference ratio of TCP and TFRC. All the ratios
are computed with respect to normalized TFRC throughput.
Fig. 7. Same graph as Fig. 6, but with L = 16. Note that the difference between
f (E[1=^]) and f (1=E[]) is smaller as L increases, but the difference between
TFRC throughput and f (E[1=^]) does not change much.
delay estimation techniques inﬂuence the throughput difference
between TCP and TFRC. This section focuses on the effect of
TFRC rate control and the equation.
cussed in Section II,
In the simulation, we measure
; as dis-
). We measure
at each instance of loss
events and in the end of each run, dividing the total by the total
number of loss events.
by summing the sample of
by taking
(
and
, and that of
Figs. 6 and 7 show the difference ratio of
and
TFRC throughput
.
In the simulation runs that produced Fig. 6, we set the loss event
to 8 and in Figs. 7–16. The
interval averaging window size
line on 0 indicates the normalized TFRC throughput. The other
curves are created by least square line ﬁtting. From the ﬁgures,
is a lower bound
we can see that under low loss rates,
to TFRC throughput but very closely tracks TFRC throughput,
while under high loss rates, it becomes a tighter upper bound to
. As the loss rate increases, the
TFRC throughput than
gap between
increases, conﬁrming
. Note that under
that the gap is inversely proportional to
(Fig. 7), the gap has signiﬁcantly decreased from that
, implying that the gap is positively proportional to
under
the variance in . Another important point to note is that the gap
also increases along
between TFRC throughput and
with the loss event rate. We conjecture that this is likely due to
the convexity of
and
.
Fig. 9. Difference ratio of TCP-friendly equation f (p
) and TCP throughput.
Fig. 8 shows the throughput difference ratio of TCP and
TFRC as we vary . As
increases, we observe that the ratio
reduces. But the differences are small. One of the reasons to the
phenomenon is, as explained in Section V-B, that although the
and
reduced variance reduces the difference between
, it does not affect the difference between
and TFRC throughput. But the difference ratio of TCP and
TFRC shown in Fig. 8 is much larger than that of
and TFRC throughput shown in Figs. 6 and 7. This indicates
that there must be other, but more inﬂuential, factors (including
the loss event rate difference) affecting this gap between TCP
and TFRC.
In search for the other reasons for the gap between TCP and
TFRC, we ﬁrst look at how faithful the TCP equation in (1) is in
predicting actual TCP throughput. Fig. 9 shows the throughput
and TCP obtained from the simula-
difference ratio of
tion runs in Fig. 6. The results are interesting since the equation
itself shows signiﬁcant discrepancy from TCP throughput. As
the loss event rate increases, the difference ratio increases—sim-
ilar to the patterns in Figs. 6 and 7. However, since under high
loss event rates, TCP shows smaller throughput than the equa-
tion and so does TFRC, this discrepancy must, in fact, reduce
the throughput difference between TCP and TFRC. However,
Fig. 8 shows it does not; in fact, the throughput difference ratio
increases as the loss event rate increases. It is also interesting to
note that, the loss event rate of TCP does not increase beyond
0.11 while that of TFRC increases up to 0.16. This implies that
TCP and TFRC ﬂows are experiencing different loss event rates
even under the same conditions. Thus, Figs. 6 and 9 are not di-
RHEE AND XU: LIMITATIONS OF EQUATION-BASED CONGESTION CONTROL
861
Fig. 10. Average throughput difference ratio with respect to TFRC throughput.
Fig. 12. RTO values of TCP (standard), Linux TCP, and TFRC connections to
28 different PlanetLab sites.
VI. IMPACT OF RTO ESTIMATION
s
where
TFRC RFC [10] recommends a different RTO estimation
technique from TCP’s. TFRC sets RTO to be four times a
of RTT samples. TCP [20] sets its
weighted moving average
is a weighted moving
RTO to be
average of the variance in RTT samples. This difference could
potentially cause TFRC’s RTO value to be much smaller than
TCP’s under a short delay network, and much larger under a
long delay network. For instance, under a 10-ms RTT path,
TFRC can have 40-ms RTO while a standard conformant TCP
has 1-s RTO. Under a 500-ms RTT path, TFRC can have
2-s RTO while TCP having about 1 s. We acknowledge that
many commercial implementations of TCP often use a smaller
minimum RTO value than 1 s. However, no matter how this
minimum value is set, since TFRC sets its RTO differently from
TCP, its RTO value can potentially signiﬁcantly differ from
TCP. Fig. 12 shows the RTO values obtained from TFRC and
TCP sessions from our site to 28 different sites in the PlanetLab
[21]. We use the Linux TCP stack for the measurement (the
values are taken directly from the kernel). Since the Linux TCP
stack uses a much smaller minimum RTO value (200 ms) than
1 s, its RTO value tends to follow the actual RTT values when
the delays become larger than 200 ms. TFRC RTO is much
larger than Linux’s RTO over long delay sites. We also plot the
values for TCP standard (1 s in our measurement); the TFRC
values are much smaller over low delay sites and larger over
long delay sites.
and
Fig. 13 compares
with different RTT and RTO values.
For this, we rewrite the function in (1) to be of a form
.2 We examine a case for a 10-ms RTT network
, and examine
by comparing
a case for a 500-ms RTT network by comparing
and
. Note that in both cases, TCP sets its RTO
close to 1 s. Fig. 13 shows their corresponding difference ratios.
Under low loss rates, differing RTO values do not affect sending
rates very much. But as the loss rate increases, the difference
can
ratio increases. For a 10-ms network,
give a feedback of around 18 times larger throughput estimate
under 15% loss. In a 500-ms
than a regular TCP
can give a feedback of around a two times
network,
.
smaller throughput estimate than a regular TCP
Fig. 11. Average difference ratio of p
and p measured in the same runs
as in Fig. 8. The ﬁgure shows that TFRC tends to have higher loss rates than
TCP and the difference increases as the loss event rate increases.
rectly comparable as the two types of ﬂows see different loss
event rates.
and
the average throughput difference ratios for TCP,
For direct comparison, we compute in each run of simulation
,
, each with respect to the average TFRC
throughput. Fig. 10 plots the results over the packet loss rate
observed by a ping trafﬁc in each simulation run (because
and TFRC
loss event rates cannot be used to compare
throughput). All the data points over the same packet loss rate
value are from the same run. From this ﬁgure, we observe that
the TCP equation is, in fact, reasonably accurate compared
to the actual difference between TFRC and TCP. This can be
and the TFRC
seen from that the difference ratio of
and the TFRC
throughput is much smaller than that of
throughput. Although there exists some signiﬁcant gap caused
by the convexity of the equation and the compounding effect of
),
piecewise loss interval calculations (i.e.,
, which
there exists a bigger gap between
is directly attributable to disparate loss event rates observed
over the loss
by TFRC and TCP. Fig. 11 plots
event rate observed by TFRC in the experiment for Fig. 8.
Clearly, the variance does not affect the average loss events.
More important, the ratio increases as the loss event rate in-
creases. These results conﬁrm our conjecture that the relatively
small sending rate difference delineated by the bounds among
) gets ampliﬁed
versus
and
and
,
and
(
by the loss event rate difference.
2We are overloading F ; it is also for a different purpose in Section IV.
862
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 15, NO. 4, AUGUST 2007
Fig. 13. Graph compares the value of the equation f (p) when they have dif-
ferent RTO values. f (p) is rewritten to be F (p; t
is the
is the RTO. For instance, F (p; 0:01; 0:04) is the TFRC
round-trip time and t
equation with RTT 10 ms and RTO 40 ms. The functions with RTO 1 s are those
following the TCP standard and the others follow the TFRC RFC.
; t ) where t
Fig. 14. Throughput difference ratio of TFRC and TCP under various delay
networks. In these experiments, TFRC sets its RTO in the same way as recom-
mended by the TFRC RFC. The curve lines are from least line ﬁtting.
However, the actual sending rates of TFRC also depend on
the other factors identiﬁed in the earlier sections. We study
how RTO values can inﬂuence the actual TFRC throughput by
simulation, below.
Fig. 14 shows the throughput difference ratios of TFRC and
TCP from simulation under various delay networks from 10 to
500 ms. In this simulation, we use the same setup as discussed in
Section III, but vary the network delays. In addition, we follow
the recommendation of the TFRC and TCP RFCs in setting
their corresponding RTO values. In general, Fig. 14 shows a
completely different pattern from Fig. 13. Clearly visible from
the ﬁgure is that in the 10- and 500-ms networks, the absolute
throughput difference ratios are much higher than those pre-
dicted in Fig. 13, especially under a low loss event rate region for
the 10-ms network, and under a high loss event rate region for
the 500-ms networks. In contrast, simulation runs over the other
delay networks tend to show less throughput difference ratios
than the predicted. In addition, the throughput difference ratios
from all runs tend to reduce (i.e., the TCP throughput gets larger
than the TFRC throughput) as the loss event rate increases.
Fig. 15. Loss event rate difference ratio of TFRC and TCP in the same exper-
iments as in Fig. 14.
A plausible explanation for the above phenomena can be
made using R1, R4, and R5. In a low-delay network such as the
10-ms network, the feedback sending rate of TFRC [calculated
using (1) which takes smaller RTO values than TCP] makes
TFRC send at a higher sending rate than TCP. When the
sending rate difference ratio of TFRC and TCP becomes higher
to satisfy the condition for R5 in Theorem 4.1, R5 triggers
TFRC to see a lower loss event rate than TCP. This further
widens the sending rate difference ratio. For instance, around
5% loss event rate, the feedback sending rate difference ratio
is around 8.5 (in Fig. 13). This has translated into more than
20 in the actual throughput difference ratio (in Fig. 14) while
the loss event rate difference ratio of TFRC and TCP reaches
. The other delay networks does not make the sending
rate difference “sufﬁciently” high to trigger R5, which explains
why they do not show as high throughput difference ratios
as the 10-ms network. The throughput difference ratio does
not grow indeﬁnitely because the effect of R1 forces a slow
responsive ﬂow, such as TFRC, to experience more loss events
than TCP. Furthermore, the effect of R1 increases as the loss
event rate increases (as shown in Fig. 4). This is the reason why,
as the loss event rate increases, the loss event rate difference
ratio of TFRC and TCP increases in Fig. 15 and accordingly,
the throughput difference ratio of TFRC and TCP reduces in
Fig. 14. The 500-ms network shows a compounding effect of
R1 and R4 under high loss event rates. In such a high delay
network, the RTO values of TFRC are larger than those of TCP,
and they make the feedback sending rate of TFRC to be smaller
than the actual TCP sending rate, especially under medium to
high loss event rates [where RTO has an increasingly higher
impact according to (1)]. Accordingly, the TFRC source sends
at a lower sending rate than TCP. When the sending rate is
sufﬁciently lower than TCP’s, R4 triggers TFRC to see a lower
loss event rate than TCP, which happens under high loss event
rate regions in Fig. 15. As the loss event rate increases, the
effect of R4 is compounded with that of R1 to increase the loss
event rate difference ratio (up to 0.5) and moves the throughput
) further into the
difference ratio of TFRC and TCP (up to
negative region. These results conﬁrm that the loss event rate
difference (caused by some combinations of R1, R4, and R5)
RHEE AND XU: LIMITATIONS OF EQUATION-BASED CONGESTION CONTROL
863
can greatly amplify the initial sending rate difference caused
by factors including different RTO values.
As we pointed out in the introduction, the issue with RTO es-
timation is not fundamental, but an artifact of policy. Therefore,
it may be easily ﬁxed by adopting a different policy. Our work
indicates that any policy decision that changes the sending rate
of TFRC to deviate from that of TCP must be done with a great
care because sending rate difference can be greatly ampliﬁed by
loss event rate difference.
may correct the throughput drop under high loss conditions,
and this is consistent with our second design guideline. How-
ever, this method suffers from the effect that it also increases
the throughput under low loss conditions, and hence may in-
troduce some throughput difference under low loss conditions.
Therefore, we need to be careful in choosing the scale factor
since too large sending rate difference, especially, over low loss
conditions might trigger loss event difference as discussed in
Section IV.
VII. HEURISTICS TO MITIGATE THROUGHPUT DIFFERENCE