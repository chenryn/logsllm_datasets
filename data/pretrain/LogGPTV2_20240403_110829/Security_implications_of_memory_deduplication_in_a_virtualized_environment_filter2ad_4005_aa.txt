title:Security implications of memory deduplication in a virtualized environment
author:Jidong Xiao and
Zhang Xu and
Hai Huang and
Haining Wang
Security Implications of Memory Deduplication in a Virtualized
Environment
Jidong Xiao∗, Zhang Xu∗, Hai Huang†, Haining Wang∗
∗The College of William and Mary, Williamsburg, Virginia, USA
†IBM T. J. Watson Research Center, Hawthorne, New York, USA
Abstract— Memory deduplication has been widely used in
various commodity hypervisors. By merging identical memory
contents, it allows more virtual machines to run concurrently
on top of a hypervisor. However, while this technique improves
memory efﬁciency, it has a large impact on system security. In
particular, memory deduplication is usually implemented using
a variant of copy-on-write techniques, for which, writing to a
shared page would incur a longer access time than those non-
shared. In this paper, we investigate the security implication of
memory deduplication from the perspectives of both attackers
and defenders. On one hand, using the artifact above, we
demonstrate two new attacks to create a covert channel and
detect virtualization, respectively. On the other hand, we also
show that memory deduplication can be leveraged to safeguard
Linux kernel integrity.
I. INTRODUCTION
Memory deduplication is a technique implemented in
various commercial and open source hypervisors, including
VMWare ESX, Xen, and Linux KVM. The key idea is,
if multiple memory pages have the same content, then the
hypervisor only needs to keep one copy for these so-called
deduplicated pages. And later, if one of the deduplicated
pages is modiﬁed, a copy-on-write (COW) technique is used.
In other words,
the page will be copied, and the write
operation will take effect on the copied page. This allows a
signiﬁcant amount of memory space to be saved when there
are many identical pages.
However, this technique can also expose unexpected se-
curity vulnerabilities. Due to the extra copy operation, a
write to a deduplicated page and a normal page (non-
deduplicated page) will incur different access times. There-
fore, in a virtualized environment where both an attacker’s
virtual machine (VM) and a victim’s VM might co-exist
on the same host machine, the attacker can obtain memory
information from its neighboring VM [1], [2]. For example,
the attacker can detect whether a given page is located in the
memory of a neighboring VM by loading the same page into
its own memory, waiting for some time until the memory
deduplication takes effect, and then writing to that page, i.e.,
the one that has been loaded into its own memory. If the page
is deduplicated, writing to it would take longer than writing
to a normal page. Consequently, the attacker is able to know
whether the page also exists in a neighboring VM, resulting
in information leakage.
In this paper, exploiting this artifact of memory dedupli-
cation, we demonstrate two new attacks to create a covert
channel
in a virtualized environment and detect virtual-
ization, respectively. Meanwhile, we observe that memory
deduplication can also be used for defense purposes. More
speciﬁcally, we leverage memory deduplication to detect
the existence of kernel rootkits in a timely manner with
negligible overhead. The major contributions of this work
are summarized as follows:
• From an attacker’s perspective, we develop a reliable
covert channel
to transfer information between two
virtual machines. We validate the feasibility and effec-
tiveness of using this covert channel for information
leakage. Our experimental results show that the new
covert channel can reach nearly 100% accuracy, and
even in a system under high computation and memory
pressure, it can still achieve a reasonable transfer rate.
Furthermore, following the same approach, we also
present a virtualization detection technique that does
not depend on any speciﬁc instruction or guest OS,
and it is applicable to detect various virtual machine
monitors such as VMWare ESX server, Xen, and Linux
KVM.
• From a defender’s perspective, we propose a simple and
novel technique to ensure kernel runtime integrity. Our
technique, as a virtualization-based defense solution,
works in almost real time, and more importantly, it
does not require any understanding of the target OS
kernel. Thus, it mitigates the “semantic gap” issue that
commonly exists on most virtual machine introspection
tools [3], [4], [5]. Simply monitoring a memory statistic
provided by Linux kernel, it can detect any modiﬁca-
tion against the read-only data of Linux kernel. Our
experimental results show that the defense technique is
able to effectively detect those rootkits that modify the
system call table.
We run our experiments on top of Linux/KVM with Ker-
nel Samepage Merging (KSM) implemented as a loadable
kernel module1. KSM is originally designed to combine
identical virtual machine memory pages into one copy, but
now it is able to merge any identical application mem-
ory pages. Although our experiments are performed on
Linux/KVM with KSM, we believe that the security implica-
tions being identiﬁed would also apply to other mainstream
commercial hypervisors, including VMWare ESX server,
which has implemented a content-based memory sharing
scheme [6], and Xen, which has incorporated memory page
sharing as an important feature in Xen 4.0 [7]. In this paper,
we use the term memory deduplication and page sharing
interchangeably.
The remainder of the paper is organized as follows.
Section II details the design of covert channel and virtual-
ization detection. Section III describes our solution to detect
kernel read-only data modiﬁcation. Section IV presents
our experiment results. Section V discusses some related
issues. Section VI surveys related work. Finally, Section VII
concludes the paper.
II. OFFENSE TECHNIQUES
In this section, we ﬁrst describe the construction of
the covert channel in a virtualized environment, and then
we present how to detect virtualization based on memory
deduplication.
A. Covert Channel Construction
To achieve high resource utilization, public cloud
providers such as RackSpace and Amazon EC2 often co-
locate users and have them share resources. Inevitably,
virtual machines belonging to different users are often placed
on the same physical machine with users having very little
control over the placement decisions. As Ristenpart et al. [8]
have demonstrated, such physical co-location gives attackers
a vantage point to perform malicious activities, such as
covert channel attacks.
1) Working Mechanism: Preventing unauthorized disclo-
sure of information is one of the major tasks in computer
security. While it might be relatively easy to prevent in-
formation disclosure in open channels by using encryption,
it is hard to detect and eliminate covert channels. Covert
channels were ﬁrst deﬁned by Lampson in 1973 as a com-
munication channel designed for information leakage [9].
Typically, a covert channel allows two isolated entities to
communicate with each other. It consists of a sender and
a receiver. In a cloud environment, both entities are virtual
machines running on the same physical machine. The sender
(of information) is generally the victim of the attack, and
we assume that the sender has been compromised by the
attacker,
is under the attacker’s control. To
bypass traditional monitoring techniques and remain hidden
as long as possible, the sender encodes the information the
therefore,
it
1Linux has implemented kernel samepage merging(KSM) since kernel
2.6.32.
attacker is interested in and injects “signals” onto a covert
channel. The receiver is a virtual machine launched by the
attacker to be a co-resident with the sender VM. The receiver
will probe the covert channel and decode the “signals”. In
this way, the information on the victim machine can be
leaked while minimizing the chance of the attacker being
disclosed. Existing works have exploited various shared
hardware resources to build a covert channel in virtualization
environments, such as L2 cache [10]. However, the existing
techniques are not robust against environment noises.
Here we develop a covert channel based on memory
deduplication, which can achieve strong resistance to en-
vironment noises and still ensure a high bit rate. Figure
1 illustrates the framework of our covert channel. In the
ﬁrst step, the sender and receiver load a certain amount of
memory with identical content. This can be easily done by
having both the sender and receiver opening and reading
the same ﬁle. Next, the sender encodes the information,
e.g., writing to certain pages so that the contents of these
pages are different from those launched by the receiver.
Once the pages are modiﬁed, the sender and receiver sleep
and wait for the system to merge these pages. Finally, the
receiver should write to all memory pages used by the covert
channel and record the write access time. The copy-on-write
mechanism makes writing to shared pages cost more time
than those that are not. Thus, the receiver can easily identify
those modiﬁed pages. With the knowledge of which pages
are modiﬁed, the receiver can decode the information. This
is basically how the sender and receiver communicate via
the memory deduplication covert channel.
The encoding mechanism is further detailed as follows.
Since we can detect memory deduplication at the granularity
of a page, we make each page represent one bit of infor-
mation. At the sender side, an unmodiﬁed page indicates
a 0 and a modiﬁed page denotes a 1. For instance, as
shown in Figure 1, if we want to transmit 001011 through
the covert channel, after the sender and receiver both read
six identical pages, the sender should modify the 3rd, 5th,
and 6th pages. After sleeping for a period of time, the
receiver will write to these six pages and record access time.
Since pages 1, 2, and 4 remain unchanged, the memory
deduplication mechanism should have merged them with
their counterparts. By contrast, pages 3, 5 and 6 have been
modiﬁed by the sender, and hence they are not deduplicated.
Thus, the receiver can ﬁnd that it takes much more time
(according to our observation, at least six times more) to
write to pages 1, 2, and 4 than to pages 3, 5, and 6. At
the receiver side, a long access time indicates a 0 and a
short access time denotes a 1. Therefore, in our example the
receiver can easily infer that the sender is sending 001011.
2) Design Space: To make the covert channel practical
and maximize the transfer rate, we need to address the
following two questions: (1) how to identify an optimal
waiting time for memory deduplication mechanism to kick
Figure 1. Covert Channel Overview
in? and (2) how to select an appropriate memory size to
build the covert channel?
the sender and the receiver is interfered. Even worse, some
hypervisors (e.g., Xen) have the mechanism of core migra-
tion. In other words, VMs will be periodically migrated to
different physical processors, which leads to a complete ﬂush
of the L2 cache and a failure of the covert channel. On
the contrary, our covert channel will not be “coincidentally”
destroyed. Although theoretically it is possible that there are
other pages in the system happen to be identical to ours, by
properly designing the contents to be loaded into memory,
we can ensure that the likelihood of such interference is
astronomically small. Thus, only if we modify these pages,
will the deduplication be canceled. Moreover, our channel
is based on write access rather than read access. Compared
with read access, write access is affected far less by cache
mechanisms. Thus, our channel is even less sensitive to
environment perturbations. Furthermore, before writing a
page, we can always read it ﬁrst, which can help us eliminate
the inﬂuence of swapping.
B. Virtualization Detection
In recent years, a large number of virtualization-based
defense mechanisms have been proposed. Virtualization is
leveraged by various techniques to monitor, analyze, and
thwart malicious attacks. Therefore, from an attacker’s per-
spective, it is crucial to detect the use of virtualization in the
target environment as it would allow the attacker to poten-
tially circumvent such defense mechanisms by dynamically
adapting the behavior of malicious code.
We found that the artifacts of memory deduplication can
be used for this purpose. Here is an example illustrating how
this can be done. First, we load a ﬁle into memory, write
to all the pages, and record write access time (t1). Next,
we load the same ﬁle into memory twice, in other words,
When the sender and receiver load contents into memory,
the system does not
immediately merge identical pages
because it is usually done as a background task. In our
covert channel, we run two C programs on the sender side
and the receiver side, respectively. After page loading and
information encoding, the programs on both sides should
sleep for a while so that the memory deduplication mecha-
nism has sufﬁcient time to complete its work. The length of
this sleeping time depends on the current load of the system
as well as the memory size used for building the covert
channel. Obviously, the heavier the load, the more slowly
memory deduplication would complete.
Meanwhile, increasing the size of the memory used to
build the covert channel has dual effect. On one hand, a
larger piece of memory can carry more information, i.e.,
the covert channel can transfer more information during
one transmission. On the other hand, more memory usage
implies that KSM has more memory pages to scan and
merge, which can prolong the required time to complete
one transmission. Moreover, if the used memory is too large,
the reliability of the covert channel starts to degrade and the
covert channel could be easily detected. Note that the bit rate
of the covert channel is the ratio between the information
of being delivered during one transmission and the time to
complete the transmission. The impact of the memory size
on the bit rate is detailed in Section 4.1.
One advantage of our covert channel is that it is robust