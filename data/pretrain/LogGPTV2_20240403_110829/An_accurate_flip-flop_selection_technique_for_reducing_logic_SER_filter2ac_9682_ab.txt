l~il~1______
L ~
J
:1
Data
C1
D1
D2
Clock
____I
Figure 4. Timing diagram for time shifted
clock SET detection.
Figure 6. Timing diagram for time shifted data
SET detection.
Data
I - - - - - r - - - - - - a
Error
Clock ----'---------'
1 for (each fault injected)
2 if (error)
3
4
5
if (case C) r strike in last stage of logic */
compute set p r set of all outputs flipped */
scoreJnc = 1/cardinality(P)
increment counter for each member of P by scoreJnc
else if (case F) r strike in an intermediate stage */
compute set Sr set of flipflops which propagated error */
scoreJnc = 1/ cardinality(S)
Increment counter for each member of S by score_Inc
6
7
8
9
10
11
12 sort counters in descending order
Figure 5. SET detection with time shifted data
inputs.
Figure 7. Selection heuristic pseudo-code.
depending on the characteristics of its timing paths. Time
shifting the clock inputs is not an optimal solution for a cir(cid:173)
cuit with a large number of short or zero delay paths as a
significant amount of delay padding would be required. In
contrast, a circuit with balanced paths could potentially suf(cid:173)
fer a great deal of delay overhead (in tenns of the minimum
clock period achievable) ifthe data inputs were time shifted.
For the purposes of this work, all detectors applied used
time shifted data inputs, but we believe our results would
be applicable for either approach.
4. Flipflop Selection
In this section we present our heuristic for selecting flip(cid:173)
flops to augment with soft error detectors. Prior to statisti(cid:173)
cal fault injection, each flipflop in the circuit is allocated a
counter. This counter represents the overall contribution (of
the corresponding flip-fop) to the circuit failure rate. The
pseudo-code for our proposed selection heuristic is shown
in Figure 7. Referencing the fault model shown in Figure
2, an error is defined as a particle strike which results in ei(cid:173)
ther outcome C (a SET occurring in the last stage of logic
and subsequently altering the value ofcaptured by an output
flipflop) or outcome F (a SET occurring in an intermediate
stage and propagating to an output flipflop).
An example of outcome C (represented by lines 3-6 in
Figure 7) is shown in Figure 8.
In the last stage, gate A
is affected by a SET, which subsequently causes outputs 4
and 5 to capture altered values. Let the set P (referenced in
line 4 of Figure 7) represent all of the flip-flops that store
an incorrect transient value. Because the transient in this
case occurred in the last stage of logic, all flip-flops in the
set P must be protected to remove this error. Lines 5-6 in
the pseudo-code record the role of each flipflop in caus(cid:173)
ing the error by incrementing the corresponding counters
by (l/cardinality(P)). In this case, the counters for flip-flops
4 and 5 are each incremented by 112. The reason that each
counter is incremented by (1 1 cardinality(P)) is to attach
extra weight (in terms of error contribution) to cases where
a smaller number of flip-flops capture altered values.
Consider the alternative example shown in Figure 9. In
this case, gate A is again affected by a SET, but due to dif(cid:173)
ferent input stimulus, only output 6 in its fanout cone cap(cid:173)
tures an erroneous value. In this example set P only has one
member, meaning that the counter for flipflop 6 is incre(cid:173)
mented by 1. Updating counters in this manner ensures that
1-4244-2398-9/08/$20.00 ©2008 IEEE
131
DSN 2008: Hill et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Figure 8. Example of SET in final pipeline
stage.
Figure 9. Alternate example of SET in final
pipeline stage.
flipflop 6 is credited with having a more significant impact
on the overall error rate than flip-flops 4 and 5. If only one
flipflop can be protected, flipflop 6 is the correct choice as
that would eliminate the error in Figure 9. If either flipflop
4 or 5 was protected, the error in Figure 8 would still exist.
An example of outcome F (represented by lines 7-10 in
Figure 7) is shown in Figure 10. In this example, a SET is
formed at the output of gate B, resulting in transient values
being captured by the flip-flops 1 and 3. The incorrect value
stored by flipflop I eventually propagates to output flipflop
5. Let the set P again represent all flip-flops that store in(cid:173)
correct values (in this case flipflop 1, 2, and 5), and let set S
(referenced in line 8) represent flip-flops that in addition to
capturing a transient value, are responsible for propagating
incorrect values to circuit outputs. For this injected fault,
only flipflop 2 belongs to set S (flipflop I does not propa(cid:173)
gate it's bad value, and flipflop 5 does not capture a transient
value). In this case, only the flip-flops in set S (in this case
flipflop I) need to be protected in order to prevent this error.
Set S is computed by back propagating from all corrupted
outputs. The counter for each flipflop belonging to set S is
then incremented appropriately.
Following fault injection each counter contains (for its
corresponding flipflop) the overall contribution to the cir(cid:173)
cuit error rate. The value stored by each counter represents
the number of times (across the fault injection campaign)
a flip-flop is responsible for either directly causing an er(cid:173)
ror by capturing a transient value (output flip-flops in the
last stage) or indirectly causing an error by capturing a tran(cid:173)
sient value and logically propagating that value to a circuit
output (flip-flops in intermediate stages). A counter with a
high value implies that the associated flipflop is more likely
to capture and/or logically propagate a transient value, and
thus would be an ideal candidate for protection. Sorting
these counters (performed on line 12 of Figure 7) creates
a list of flip-flops ranked according how much of an over(cid:173)
all benefit could be obtained by augmenting a particular se(cid:173)
quential element with a soft error detector.
By first normalizing and plotting these counter values, a
cumulative density function is created, allowing a logic de(cid:173)
signer to reason about the theoretical maximum of soft error
protection that can be achieved by protecting some subset of
flip-flops. The ranking technique presented in this work is
unique in that in addition to identifying which flip-flops are
the most likely to capture and propagate transient values,
our ranking also gives an accurate quantitative estimate of
how much protecting each flipflop impacts the overall er(cid:173)
ror rate. Our heuristic implicitly assumes that the addition
of a soft error detector will catch all SETs which propagate
In reality, the fraction of SETs that can be
to that node.
detected at a particular node is dependent on the skew be(cid:173)
tween flipflop data input samples. The effect of this skew
parameter and verification of our technique is discussed in
more detail in Section 6.
Cumulative density functions (in terms of error cover(cid:173)
age) are shown in Figures 11 and 12, corresponding to 4
stage pipelined integer and floating point multipliers, re(cid:173)
spectively. Error coverage is defined as the number of out(cid:173)
put errors in the baseline (unprotected) case that are caught
by SET detectors. For example, in Figure 11 protecting
20% of the flipflops can yield (in the best case) 60% error
coverage. From these figures it is clear that a significantly
smaller fraction of the flip-flops are responsible for prop(cid:173)
agating the majority of error in the floating point unit, as
evidenced by the sharper rise in displayed error coverage.
This can be attributed to the unit's lack of structural regu(cid:173)
larity, compared to that of the integer multiplier.
5. Infrastructure
5.1 Simulator
The error modeling framework developed for this study
is a combination of circuit and gate level simulation. When
performing fault simulation, a trade-off must be made be(cid:173)
tween accuracy and speed.
Ideally to get the most accu(cid:173)
rate results, simulation must be done at the lowest level of
1-4244-2398-9/08/$20.00 ©2008 IEEE
132
DSN 2008: Hill et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Figure 10. Example of SET in intermediate
pipeline stage.
Figure 13. NAND structure used for SET
waveform characterization.
1.20
1.00 +------------------=_--------!
t 0.80
i 0.60 +---~'---------------------;
10 .4O+ - - - f - - - - - - - - - - - - - - - - i
0.040
0.035 + - - - - - - - - - - - - - -
0.030 + - - \ - - - - - - - - - - - - - - - - - .
~ 0.025I 0.020
O.015+---~---------_
0.20 + -+ - - - - - - - - - - - - - - - - ;
0.010 + - - - - - " " " " " " " - - - - - - - - - -
0.20
0.40
0.60
0.80
1.00
frKtIon of mponop. proIiIdIId
0.005 t----------==---~=~
0.000 + - - - - - - - , - - - - , - - -_ , - - - - , - -_
20
40
60
80
100
120
charge apo.led by _lIdng pIIrtlcte (fC)
Figure 11. Multiplier Error Coverage CDF.
Figure 14. Charge deposition PDF. From [5].
1.20
1.00 + - - - - - - - : : := - - - - - - - - - - -
0.80
0.60 + - - - l - - - - - - - - - - - - - - -1
r
i 0.40 ++ - - - - - - - - - - - - - - -1
0.20 -+1 - - - - - - - - - - - - - - - - - - - - - ;
0.20
0.40
0.60
0.80
1.00
fraction of tltp-nop. protltdltd
Figure 12. Floating Point Multiplier Error Cov(cid:173)
erage CDF.
abstraction, using tools like SPICE. Unfortunately, tools at
this level are too slow to be able to evaluate a circuit of
a practical size. At the other extreme, while cycle accu(cid:173)
rate simulators typically used in architectural studies can
be used to model performance of large systems, and even
relative comparisons regarding the vulnerability of storage
structures [8], details about gate level structure are often not
available at this level of abstraction.
With these concerns in mind, our simulation infrastruc(cid:173)
In order to obtain information
ture consists of two parts.
about the waveform characteristics of SETs, particle strikes
on combinational logic gates were simulated in SPICE us(cid:173)
ing the 65 nm predictive technology model [2]. Strike
events were simulated by first modeling two gates in se(cid:173)
quence, injecting a pulse of current at the internal node con(cid:173)
necting the the gates and observing the voltage transient at
the output, as described in [5]. Specifically we were inter(cid:173)
ested in the duration of the resulting SET, or the amount of
time the output voltage was above Vdd/2. An illustration of
this setup is shown in Figure 13. The shape of the injected
pulse was modeled by a time-dependent exponential func(cid:173)
tion, as described by [11]. The function used is shown in
Equation 2.
I(t) == QIT * JtlT * exp(-tiT)
(2)
Qand T refer to the amount of charge deposited, and the
time constant for charge collection, respectively. The pri(cid:173)
mary goal for this portion of the infrastructure was to map
the charge deposition probability distribution function given
in [5] to a second function which quantifies the relationship
between SET duration and charge deposition. Figure 14
and Figure 15 show the charge probability density and SET
duration functions, respectively. These functions are used
to drive the gate level component of our simulation frame-
1-4244-2398-9/08/$20.00 ©2008 IEEE
133
DSN 2008: Hill et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:55 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
200
180
160
140
120
100
80
60
40
20
o
20
------~
~
/
/
I
I
I
I
I
40
60
80
100
120
charge depoan.d by striking particle (te)
Figure 15. SET duration mapping function.
work.
The second component of our infrastructures is an event
driven gate-level simulator. This simulator uses 7-valued
logic to simulate the propagation of transients through
pipelined circuits. The simulator keeps track of the the