### 4. Flipflop Selection

In this section, we present our heuristic for selecting flip-flops to augment with soft error detectors. Before performing statistical fault injection, each flip-flop in the circuit is assigned a counter. This counter represents the overall contribution of the corresponding flip-flop to the circuit's failure rate. The pseudo-code for our proposed selection heuristic is shown in Figure 7.

#### Fault Model and Error Definition
Referring to the fault model in Figure 2, an error is defined as a particle strike that results in either:
- **Outcome C**: A Single Event Transient (SET) occurring in the last stage of logic, which subsequently alters the value captured by an output flip-flop.
- **Outcome F**: A SET occurring in an intermediate stage and propagating to an output flip-flop.

#### Example of Outcome C
An example of outcome C is illustrated in Figure 8. In this scenario, gate A is affected by a SET, causing outputs 4 and 5 to capture altered values. Let set P (referenced in line 4 of Figure 7) represent all flip-flops that store incorrect transient values. Since the transient occurred in the last stage of logic, all flip-flops in set P must be protected to remove this error. Lines 5-6 in the pseudo-code increment the counters for each flip-flop in set P by \( \frac{1}{\text{cardinality}(P)} \). In this case, the counters for flip-flops 4 and 5 are each incremented by \( \frac{1}{2} \).

The reason for incrementing each counter by \( \frac{1}{\text{cardinality}(P)} \) is to assign extra weight to cases where fewer flip-flops capture altered values. For instance, in the alternative example shown in Figure 9, gate A is again affected by a SET, but only output 6 in its fanout cone captures an erroneous value. Here, set P has only one member, so the counter for flip-flop 6 is incremented by 1. This ensures that flip-flop 6 is credited with a more significant impact on the overall error rate compared to flip-flops 4 and 5.

#### Example of Outcome F
An example of outcome F is shown in Figure 10. In this case, a SET is formed at the output of gate B, resulting in transient values being captured by flip-flops 1 and 3. The incorrect value stored by flip-flop 1 eventually propagates to output flip-flop 5. Set P represents all flip-flops that store incorrect values (flip-flops 1, 2, and 5), and set S (referenced in line 8) represents flip-flops that, in addition to capturing a transient value, are responsible for propagating incorrect values to circuit outputs. For this injected fault, only flip-flop 2 belongs to set S. Therefore, only the flip-flops in set S (in this case, flip-flop 2) need to be protected to prevent this error.

Set S is computed by back-propagating from all corrupted outputs. The counter for each flip-flop in set S is then incremented appropriately.

#### Counter Values and Ranking
After fault injection, each counter contains the overall contribution of the corresponding flip-flop to the circuit's error rate. A high counter value indicates that the associated flip-flop is more likely to capture and/or propagate a transient value, making it an ideal candidate for protection. Sorting these counters (performed on line 12 of Figure 7) creates a list of flip-flops ranked by their potential benefit if augmented with a soft error detector.

By normalizing and plotting these counter values, a cumulative density function (CDF) is created, allowing a logic designer to reason about the theoretical maximum of soft error protection that can be achieved by protecting a subset of flip-flops. Our ranking technique not only identifies which flip-flops are most likely to capture and propagate transient values but also provides an accurate quantitative estimate of how much protecting each flip-flop impacts the overall error rate.

#### Cumulative Density Functions
Cumulative density functions (in terms of error coverage) are shown in Figures 11 and 12 for a 4-stage pipelined integer multiplier and a floating-point multiplier, respectively. Error coverage is defined as the number of output errors in the baseline (unprotected) case that are caught by SET detectors. For example, in Figure 11, protecting 20% of the flip-flops can yield up to 60% error coverage. These figures indicate that a significantly smaller fraction of flip-flops are responsible for propagating the majority of errors in the floating-point unit, as evidenced by the sharper rise in displayed error coverage. This can be attributed to the unit's lack of structural regularity compared to the integer multiplier.

### 5. Infrastructure

#### 5.1 Simulator
The error modeling framework developed for this study combines circuit and gate-level simulation. When performing fault simulation, a trade-off must be made between accuracy and speed. Ideally, the most accurate results are obtained through low-level simulation using tools like SPICE. However, such tools are too slow for practical-sized circuits. On the other hand, cycle-accurate simulators typically used in architectural studies can model large systems but often lack detailed gate-level information.

To address these concerns, our simulation infrastructure consists of two parts:

1. **SPICE Simulation for SET Waveform Characterization**:
   - Particle strikes on combinational logic gates were simulated in SPICE using the 65 nm predictive technology model [2].
   - Strike events were modeled by simulating two gates in sequence, injecting a pulse of current at the internal node connecting the gates, and observing the voltage transient at the output [5].
   - The shape of the injected pulse was modeled by a time-dependent exponential function [11], as shown in Equation 2:
     \[
     I(t) = \frac{Q}{T} \cdot \frac{t}{T} \cdot \exp\left(-\frac{t}{T}\right)
     \]
     where \( Q \) and \( T \) refer to the amount of charge deposited and the time constant for charge collection, respectively.
   - The primary goal was to map the charge deposition probability distribution function [5] to a function quantifying the relationship between SET duration and charge deposition. Figures 14 and 15 show the charge probability density and SET duration functions, respectively.

2. **Event-Driven Gate-Level Simulator**:
   - This simulator uses 7-valued logic to simulate the propagation of transients through pipelined circuits.
   - The simulator keeps track of the state of each flip-flop and updates the counters based on the fault injection results.

These components together provide a comprehensive framework for evaluating and mitigating soft errors in digital circuits.