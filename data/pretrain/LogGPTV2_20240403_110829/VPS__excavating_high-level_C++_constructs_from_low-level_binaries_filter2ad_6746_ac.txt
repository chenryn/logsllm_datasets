other call instructions pass the first argument via the stack (stdcall
calling convention) [15]. This is not the case for Windows x86-
64 and Linux (x86 and x86-64). On these architectures, the thisptr
is passed as the first argument in the platformâ€™s standard calling
convention (Microsoft x64, cdecl and System V AMD64 ABI, respec-
tively). While Elsabagh et al. [14], who work on Linux x86, did not
report false positives, our evaluation does show false positives in
the same application set. We contacted the authors, but they could
not help us find an explanation for these differing outcomes and
could not give us access to the source code to allow us to reproduce
the results.
4.3.2 Virtual Callsite Verification. Because a single false positive
can break our approach, the next phase in our static analysis verifies
the virtual callsite candidates. Basically, we perform a data-flow
analysis in which we track whether a vtblptr is used at a virtual
callsite candidate. If the candidate uses the vtblptr to determine the
call target, we consider it as verified. However, a data-flow graph
alone is not sufficient to verify this connection. The control flow
and actual usage of the vtblptr have also to be considered. Figure 3
depicts an overview of the analysis process. The following describes
our analysis in detail.
Data-Flow Graphs. First, our analysis tracks the data flow back-
wards with the help of SSA form starting from all vtable references
in the code (which create the vtblptr). The data flow is tracked
over function boundaries when argument registers or the return
value register RAX are involved. This means the tracking is done
interprocedurally. The same data-flow tracking is done for the call
target of each virtual callsite candidate. As Figure 3a shows, we
obtain data-flow graphs showing the source of the data used by the
vtable-referencing instructions and the virtual callsite candidates.
Whenever a data-flow graph for a virtual callsite candidate has
the same data source as a vtable-referencing instruction, we group
them together as depicted in Figure 3b.
Control-Flow Path. Virtual callsite candidates and vtable-referen-
cing instructions that share the same data source represent a possi-
ble connection between a created vtblptr and a corresponding vcall.
However, this connection alone does not give any information on
whether the vtblptr is actually used at the virtual callsite candidate.
To verify this, we have to check if a control-flow path exists that
starts at the data-source instruction, visits the vtable-referencing
instruction, and ends at the vcall instruction. For this, our anal-
ysis searches all possible data-flow paths through the graph that
start at a data-source instruction and end in a vtable-referencing
instruction. Additionally, all data-flow paths through the graph are
identified that start at a data-source instruction and end at a virtual
callsite candidate. Then, they are split into common and unique
parts as Figure 3c depicts.
Next, our analysis tries to transform these data-flow paths into a
control-flow path by translating each data-flow node into the basic
block that contains the corresponding instruction (see Figure 3d).
With the help of the Control-Flow Graph (CFG), our analysis then
searches for a path from basic block to basic block until it reaches
the final block as Figure 3e shows. Eventually, if a path exists, the
algorithm finds a possible control-flow path that starts from the
data-source instruction, visits the vtable-referencing instruction,
and ends at the vcall instruction.
Symbolic Execution. As a last step, we symbolically execute the
obtained control-flow paths to track the flow of the vtblptr through
the binary. When an instruction writes a vtable into the memory
state, we replace that vtblptr with a symbolic value. To keep the
analysis scalable to large real-world applications, our symbolic
execution simply executes basic blocks without checking whether
branches can actually be taken in a concrete execution. If a basic
block contains a call instruction that is not part of our original data-
flow path, we simply execute a return instruction immediately after
the call instead of symbolically executing the called function. When
the symbolic execution reaches the vcall instruction, we check the
obtained memory state to verify that the vtblptr is used for the call
103Figure 3: Data-flow and control-flow analysis of our vcall verification phase. Step a) shows the data-flow graph in SSA form,
with the starting node in gray (data source). Step b) combines the data-flow graphs of a). Step c) divides the paths through the
data-flow graph into three components. Step d) shows the basic blocks corresponding to the data-flow paths. Step e) shows a
path through the CFG containing all previously identified basic blocks.
target. If so, we conclude that the vcall candidate is in fact a vcall
and consider it a verified vcall.
In addition to explicit vtable-referencing instructions, this analy-
sis phase checks implicit vtable references as well. In case the earlier
backward data-flow analysis shows that a vcall target stems from
the first argument register, we check whether the calling function is
a known virtual function (by checking whether the function resides
in any previously identified vtable). If it is, we add a special virtual
function node to the data-flow graph. We then search for a path
from this virtual function node to the vcall instruction. If a path is
found, we apply the steps described previously for transforming
the data-flow path to a control-flow path. For such paths, before
starting the symbolic execution, we add an artificial memory object
containing the vtblptr and place the thisptr in the first argument
register. This way, we simulate an implicit use of the vtable through
the initialized object.
We perform the whole vcall verification analysis in an iterative
manner. When the data-flow tracking step stops at an indirect call
instruction, we repeat it as soon as our analysis has verified the
indirect call as a vcall and has therefore found corresponding vtables
for resolving the target. The same applies to data-flow tracking
that stops at the beginning of a virtual function (because no caller
is known). As soon as we can determine a corresponding vcall
instruction, we repeat the analysis. The analysis continues until we
reach a fixed point where the analysis fails to find any new results.
4.3.3 Dynamic Profiling. Our approach includes a dynamic pro-
filing phase that further refines the vcall verification. During this
phase, we execute the application with instrumentation code added
to all virtual callsite candidates (only the vcall candidates, not the
already verified vcalls). Whenever the execution reaches a vcall,
the instrumentation code verifies that the first argument contains
a valid thisptr. To verify this, we check if the first element of the
object the thisptr points to contains a valid pointer to a known
vtable (vtblptr). If it does, we consider the vcall verified. Otherwise,
we regard the vcall as a false positive of the static analysis and
discard it.
Because this phase only instruments vcall candidates identified
by the static analysis described in Section 4.3.1, it is safe to assume
the dependency between first argument and call instruction target.
Hence, the above dynamic profiling check is sufficient to remove
false positives seen during the profiling run, given that the odds
of finding a C-style indirect callsite with such a distinctive pattern
that uses C++ objects is extremely unlikely. We did not encounter
any such case during our comprehensive evaluation. Also note, that
only this dynamic analysis step discards vcall candidates as false
positives. Vcalls that could not be verified by the static analysis
0x4e call [rax_21+0x10]0x42 mov rax_21, [rbx_7-0xd0]0x21 mov [rbx_7-0xd0], vtblptr0x10 mov rbp_5, rsp_0 Vcall Data Flow0x10 mov rbp_5, rsp_0Vtable Data Flow0x4e call [rax_21+0x10]0x32 mov rax_21, [rbx_7-0xd0]0x21 mov [rbx_7-0xd0], vtblptr0x10 mov rbp_5, rsp_0Combined Data Flow0x13 mov rbx_7, rbp_50x13 mov rbx_7, rbp_50x13 mov rbx_7, rbp_5Common Data Flow Patha)b)0x10 mov rbp_5, rsp_00x13 mov rbx_7, rbp_50x21 mov [rbx_7-0xd0], vtblptr0x4e call [rax_21+0x10]0x32 mov rax_21, [rbx_7-0xd0]Vtable Data Flow PathVcall Data Flow Pathc)Basic Block 10x10 mov rbp, rsp0x13 mov rbx, rbp[...]Basic Block 20x21 [rbx-0xd0], vtblptr[...][...][...]Basic Block 4[...][...]0x4e call [rax+0x10]Basic Block 3[...][...]0x32 mov rax, [rbx-0xd0]Common Basic BlocksVtable Basic BlocksVcall Basic Blocksd)e)Control Flow PathBasic Block 1Basic Block 2Basic Block 3Basic BlockBasic BlockBasic Block 4Basic BlockBasic BlockBasic Block104(or not reached during this dynamic profiling) are still considered
vcall candidates since the reason for the failed verification can be
missing information (e.g., analysis gaps through indirect control-
flow transfers).
5 INSTRUMENTATION APPROACH
vps protects virtual callsites against control-flow hijacking attacks
by instrumenting the application using the results from the analysis
phase. We instrument two parts of the program: Object Initialization
and Destruction and Virtual Callsites. The following describes how
both kinds of instrumentation work.
5.1 Object Initialization and Destruction
We use the data collected in Section 4.2 to instrument object initial-
ization, specifically the instruction that writes the vtblptr into the
object. When an object is created, the instrumentation code stores
a key-value pair that uses the memory address of the object as the
key and maps it to the vtblptr, which is the associated value. To
prevent tampering with this mapping, we store it in a safe memory
region.
Recall that during the creation of a C++ object whose class inher-
its from another class, the initialization code first writes the vtblptr
of the base class into the object, which is then overwritten by the
vtblptr of the derived class. Our approach is agnostic to inheritance
and simply overwrites the vtblptr in the same order (because each
vtblptr write instruction is instrumented).
Similarly, our approach is agnostic to multiple inheritance, be-
cause object initialization sites use the address where the vtblptr
is written as the object address. As explained in Section 2.3, at a
virtual callsite the thisptr points to the address of the object the
used vtblptr resides in. For a sub-vtable, this is not the beginning
of the object, but an offset somewhere in the object (in our running
example in Figure 1 offset 0x10). Because this is exactly the ad-
dress that our approach uses as the key for the safe memory region,
our approach works for multiple inheritance without any special
handling.
Since this instrumentation only focuses on vtblptr write instruc-
tions, it is also agnostic to object initialization and destruction.
Hence, we do not have to differentiate between constructor and
destructor and can use it for both.
Moreover, despite the fact that we ignore object deletion, our ap-
proach does not suffer from consistency problems. This is because,
when an object is deleted and its released memory is reused for a
new C++ object, the instrumentation code for the initialization of
this new object automatically overwrites the old value in the safe
memory region with the current vtblptr.
5.2 Virtual Callsites
Because a single false positive virtual callsite can break the appli-
cation, we designed the vcall instrumentation code such that it
can detect false positives and filter them out. In doing so, the vcall
instrumentation continuously refines the previous analysis results.
The vcall instrumentation consists of two components, described
next: Analysis Instrumentation and Security Instrumentation.
5.2.1 Analysis Instrumentation. We add analysis instrumentation
code to all vcall candidates that we were unable to verify during
our static vcall verification and dynamic profiling analysis. For
verified vcall sites, we only add security instrumentation and omit
the analysis code.
Before executing a vcall candidate, the analysis instrumentation
performs the same check as the dynamic profiling phase described
in Section 4.3.3. If the check fails, meaning that this is not a vcall but
a regular C-style indirect call, we remove all instrumentation from
the call site. If the check succeeds, we replace the analysis instru-
mentation with the more lightweight security instrumentation for
verified virtual callsites described in Section 5.2.2, and immediately
run the security instrumentation code.
Through our use of adaptive instrumentation, our approach is
able to cope with false positives and further refine the analysis
results during runtime. By caching the refined results on disk, we
can reuse these in later runs of the same application, improving
vpsâ€™s performance over time. Furthermore, caching also improves
the security of our adaptive instrumentation as we discuss in Sec-
tion 8.2.
Because the analysis instrumentation verifies all remaining vcall
candidates for false positives at runtime, the static vcall verification
from Section 4.3.2 and the dynamic profiling from Section 4.3.3 can
be omitted. Omitting these steps does not affect the correctness
of our approach, although we recommend using them for optimal
performance.
Security Instrumentation. We protect verified vcall sites against
5.2.2
control-flow hijacking by adding security instrumentation code that
runs before allowing the vcall. The instrumentation uses the thisptr
in the first argument register to retrieve the vtblptr stored for this
object in the safe memory region. To decide whether to allow the
vcall, the instrumentation code compares the vtblptr from the safe
memory region with the one stored in the actual object used in the
vcall. If they are the same, the instrumentation allows the vcall. If
not, we terminate with an alert.
6 IMPLEMENTATION
Based on the approach from Section 4, we integrated our static
analysis into the open source Marx framework [33]. This framework
provides a basic symbolic execution based on the VEX-IR from the
Valgrind project [13] and data structures needed for C++ binary
analysis. It is written in C++ and targets Linux x86-64 (amd64)
binaries. To support integration of our approach into the Marx
framework, we added support for SSA and a generic data-flow
tracking algorithm.
Because the VEX-IR supports multiple architectures, the frame-
work is easily extendable to these. The same is true for our approach,
which is mostly independent from the underlying architecture (Sec-
tion 4). To balance precision and scalability, the symbolic execution
emulates only a subset of the 64-bit VEX instructions that suits our
focus on vtable-centered data-flow tracking in real-world applica-
tions.
We use IDAPython [23] for vtable identification and CFG extrac-
tion. Additionally, we use instruction data provided by IDA Pro to
support the SSA transformation, and use Protocol Buffers [21] to
export the results in a programming languageâ€“agnostic format. We
implement dynamic profiling with Pin [29]. We build the runtime
105component of vps on top of Dyninst v9.3.2 [4]. Dyninst is responsi-
ble for installing vtblptr write and (candidate) virtual callsite hooks.
We inject these wrappers into the target programâ€™s address space
by preloading a shared library.
To set up the safe memory region, our preloaded library maps
the lower half of the address space as a safe region at load time;
this is straightforward for position-independent executables as
their segments are mapped exclusively in the upper half of the
address space by default. To compute safe addresses, we subtract
64 TB2 from the addresses used by vtblptr writes or virtual calls. To
thwart value probing attacks in the safe region, we (i) mark all safe
region pages as inaccessible by default and make them accessible on
demand, and (ii) use a fixed offset chosen randomly at load time for
writes to the safe region. To achieve the latter, we write a random
value to the gs register and use it as the offset for all accesses to the
safe region. To mark pages as readable/writable on demand, we use
a custom segfault handler that uses mprotect to allow accesses
from our library. This means that when a vtblptr is written into the
safe memory region and the page is not yet accessible, our segfault
handler checks if the write access is done by our library and makes
the page accessible if it is. Otherwise, a probing attack is detected
and execution is stopped. The page remains accessible which speeds
up further vtblptr writes to it.
We omit an evaluation of potential optimizations already ex-
plored in prior work [7, 28], such as avoiding Dyninstâ€™s penalties
for (re)storing unclobbered live registers or removing trampoline
code left over after nopping out analysis instrumentation code. Sim-
ilarly, we do not implement hash-based safe region compression
that would reduce virtual and physical memory usage and allow
increased entropy in the safe region, nor do we use Intel MPK [10]
to further secure the safe region. Since we focus on the exact anal-
ysis of binary applications and the subsequent instrumentation, we
consider these optimizations orthogonal to our work.
7 EVALUATION
In this section, we evaluate vps in terms of performance and ac-
curacy. We focus our evaluation on MySQL, Node.js, MongoDB,
and the fifteen C++ benchmarks found in SPEC CPU2006 and
CPU2017 [39, 40]. Even though our approach is able to handle
proprietary software, we evaluate it on open source software since
otherwise we are not able to generate a ground truth to compare
against.
7.1 Virtual Callsite Identification Accuracy
In order to measure the accuracy of the protection of vps, we evalu-
ate the accuracy of the vcall identification analysis. The results show
that vps, although a binary-only approach, can almost reach the
same degree of protection as a source based approach. Compared to
the state-of-the-art binary-only approach Marx, it identifies more
vcalls with fewer false-positives. As applications for our evaluation,
we use the C++ programs of SPEC CPU2006 and SPEC CPU2017
that contain virtual callsites, as well as the MySQL server binary
(5.7.21), the Node.js binary (8.10.0), and the MongoDB binary (3.2.4).
We used the default optimization levels (O2 for CPU 2006, O3 for all
2Linux x86-64 provides 47 bits for user space mappings, and 247 = 128 TB.
2545
2546
2547
Vector us[dim];
for (unsigned int i=0; i<dim; ++i)
us[i].reinit (dof_handler.n_dofs());
Figure 4: Source code snippets from grid_generator.cc
where VTV fails to identify a virtual callsite.
others). The analysis was performed on Ubuntu 16.04 LTS running
on an Intel Core i7-2600 CPU with 32 GB of RAM.
VTV. In order to gain a ground truth of virtual callsites, we use
VTV [43] and compare against our analysis results. Since VTV
leverages source code information, its results are usually used as
ground truth for binary-only approaches focusing on C++ virtual
callsites. All programs except MongoDB are compiled with GCC
8.1.0. MongoDB crashed during compilation and had to be compiled
with the older version GCC 4.9.3. Unfortunately, compiling 450.so-
plex results in a crash and it is therefore omitted. Table 2 shows the
results of our vcall accuracy evaluation.
Overall, we observe that the analysis of vps is capable of identi-
fying the vast majority of virtual callsites in the binary. This ranges
from 91.7% (510.parest_r) to all vcalls detected (several benchmarks).
Our average recall is 97.8% on SPEC CPU2006 and 97.4% on SPEC
CPU2017. With the exception of one outlier (526.blender_r with
precision 68.3%) we have a low number of false positives, with
precision ranging from 87.0% (447.dealII) to no false positives at all
(several benchmarks). The results are similar for large real-world
applications with a recall ranging from 91.8% (MongoDB) to 97.6%
(MySQL) and a precision ranging from 97.2% (Node.js) to 99.7%
(MongoDB). The high recall rate shows that our binary-only ap-
proach is able to protect almost as many virtual callsites as VTV
does and hence provides comparable security as this source-based
approach. However, it still misses some vcalls which may leave an
attacker with a small room to perform an attack under the right
circumstances. The precision rates show that although we have a
low false positive identification rate, we still have some.
In order to cope with the problem of false positive identifica-
tions, we verify vcalls before we actually instrument them with
our security check. The static analysis verification is able to verify
37.9% in the best case (526.blender_r) and in the worst case none.
On average we verified 20.4% on SPEC CPU2006 and 18.3% on SPEC
CPU2017. For large applications, the best verification rate is 12.2%
(Node.js) and the worst 3.1% (MongoDB). Dynamic verification (see
Section 4.3.3) considerably improves verification performance, veri-
fying 35.1% and 25.9% for SPEC CPU2006 and 2017. Unfortunately,
we were not able to execute 510.parest_r, MySQL and MongoDB
with VTV. The applications crashed with an error message stating
that VTV was unable to verify a vtable pointer (i.e., a false posi-
tive). Hence, the only large real-world application with dynamic
verification Node.js verified 20.2% of the vcalls.
A manual analysis of the missed virtual callsites (false negatives)
reveals two possibilities for a miss: the data flow was too complex
to be handled correctly by our implementation, or the described
pattern in Section 4.3.1 was not used. The former can be fixed by
improving the implemented algorithm that is used for finding the
described pattern. In the latter, the vtblptr is extracted from the
object, however, a newly-created stack object is used as thisptr for
106Table 2: Results of our vcall accuracy evaluation. For each application this table shows (i) the code size, time needed for the
static analysis (hh:mm:ss) and the ground truth generated by VTV; (ii) static vcall identification, depicting the number of indi-
rect call instructions identified as vcall that are true positives and false positives as well as recall and precision; (iii) static vcall
verification results, listing the number of verified vcall instructions, verified vcalls in percentage and verified false positives;