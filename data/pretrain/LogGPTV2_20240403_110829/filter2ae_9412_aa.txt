**作者：Strawberry@ QAX A-TEAM  
原文链接：**
sudo 的全称是“superuserdo”，它是Linux系统管理指令，允许用户在不需要切换环境的前提下以其它用户的权限运行应用程序或命令，通常是以
root 用户身份运行命令，以减少 root 用户的登录和管理时间，同时提高安全性。
sudo的存在可以使用户以root权限执行命令而不必知道root用户的密码，还可以通过策略给予用户部分权限。但sudo中如果出现漏洞，可能会使获取部分权限或没有sudo权限的用户提升至root权限。近日，苹果公司的研究员
Joe Vennix 在 sudo 中再次发现了一个重要漏洞，可导致低权限用户或恶意程序以管理员（根）权限在 Linux 或 macOS
系统上执行任意命令。奇安信CERT漏洞监测平台显示，该漏洞热度从2月4号起迅速上升，占据2月第一周漏洞热度排行榜第一位。sudo在去年10月份被曝出的漏洞也是由Vennix发现的，该漏洞为sudo安全策略绕过漏洞，可导致恶意用户或程序在目标
Linux 系统上以 root
身份执行命令。该漏洞在去年10月份的热度也很高。然后再早一些就是17年5月30日曝出的sudo本地提权漏洞，本地攻击者可利用该漏洞覆盖文件系统上的任何文件，从而获取root权限。下面来回顾一下这些漏洞：
漏洞编号 | 漏洞危害 | 漏洞类型 | POC公开 | 需要密码 | 常规配置 | 利用难度  
---|---|---|---|---|---|---  
CVE-2019-18634 | 权限提升 | 缓冲区溢出 | 是 | 否 | 否 | 低  
CVE-2019-14287 | 权限提升 | 策略绕过 | 是 | 是 | 否 | 中  
CVE-2017-100036 | 任意文件读写&&权限提升 | 逻辑缺陷 | 是 | 是 | 是 | 中  
# CVE-2019-18634 sudo pwfeedback 本地提权漏洞
## 漏洞简讯
近日，苹果公司的研究员 Joe Vennix 在 sudo
中再次发现了一个重要漏洞，该漏洞依赖于某种特定配置，可导致低权限用户或恶意程序以管理员（根）权限在 Linux 或 macOS 系统上执行任意命令。
Vennix指出，只有sudoers 配置文件中设置了“pwfeedback”选项时，才能利用该漏洞；当用户在终端输入密码时， pwfeedback
功能会给出一个可视的反馈即星号 (*)。
需要注意的是，pwfeedback功能在 sudo 或很多其它包的上游版本中并非默认启用。然而，某些 Linux 发行版本，如 Linux Mint 和
Elementary OS， 在 sudoers 文件中默认启用了该功能。
此外，当启用 pwfeedback 功能时，任何用户都可利用该漏洞，无 sudo 许可的用户也不例外。
## 影响范围
Linux Mint 和 Elementary OS系统以及其它Linux、macOS系统下配置了pwfeedback选项的以下sudo版本受此漏洞影响：
1.7.1  mov    BYTE PTR [r15], dl
       0x560a0dc9029b  add    r15, 0x1
       0x560a0dc9029f  mov    QWORD PTR [rsp+0x8], r14
       0x560a0dc902a4  sub    r14, 0x1
       0x560a0dc902a8  test   r14, r14
       0x560a0dc902ab  jne    0x560a0dc90188 
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── source:./tgetpass.c+334 ────
        329         }
        330         continue;
        331         }
        332         ignore_result(write(fd, "*", 1));
        333     }
     →  334     *cp++ = c;
        335      }
        336      *cp = '\0';
        337      if (feedback) {
        338     /* erase stars */
        339     while (cp > buf) {
    ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
    [#0] Id 1, Name: "sudo", stopped 0x560a0dc90298 in getln (), reason: SIGSEGV
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
    [#0] 0x560a0dc90298 → getln(fd=0x0, buf=0x560a0de9b2c0  'A'  buf) {
                if (write(fd, "\b \b", 3) == -1)
                break;
                --cp;
            }
            left = bufsiz;
            continue;
            } else if (c == sudo_term_erase) {
            if (cp > buf) {
                if (write(fd, "\b \b", 3) == -1)
                break;
                --cp;
                left++;
            }
            continue;
            }
            ignore_result(write(fd, "*", 1));
        }
        *cp++ = c;
        }
    ...
if语句中的feedback和pwfeedback选项是否开启相关，假设没有开启，会依次从用户输入中读取一个字节c，然后执行*cp++ =
c，cp指向了buf，这样就会将用户输入的密码依次写入buf，由于left控制循环次数，left为bufsiz，大小为0x100（如下所示），所以最多只能复制0xFF字节（最后一位为\x00），因此未开启pwfeedback选项的程序不会溢出。
    text:000000000001EEEC                 mov     eax, [rbp+input]
    text:000000000001EEF2                 mov     ecx, edx        ; feedback
    text:000000000001EEF4                 mov     edx, 100h       ; bufsiz
    text:000000000001EEF9                 lea     rsi, buf_5295   ; buf
    text:000000000001EF00                 mov     edi, eax        ; fd
    text:000000000001EF02                 call    getln
注意到sudo_term_kill这个条件判断，如果程序开启了pwfeedback选项，会先比较读入的c是否等于sudo_term_kill，经过调试可知这个值为0。所以POC中每100个A后面跟的\x00作用就在这里了，可以使程序进入这个流程，由于fd为单向管道，所以write(fd,
"\b \b", 3) 总是返回-1，这样就会直接跳出循环，因而cp还是指向之前的地方。紧接着执行重要的两句是left =
bufsiz和continue，可以将left重新置为0x100，然后跳出本次循环。因而只要在小于0xFF的数据之间连接\x00就可以不断向buf中写入数据，超出buf范围，直到访问到不可读内存触发异常。
        if (feedback) {
            if (c == sudo_term_kill) {
            while (cp > buf) {
                if (write(fd, "\b \b", 3) == -1)
                break;
                --cp;
            }
            left = bufsiz;
            continue;
            }
1.8.26 至1.8.30
版本的sudo加入了sudo_term_eof的条件判断，如果读取的字符为\x00就结束循环，这使得\x00这个桥梁不再起作用。
        if (feedback) {
            if (c == sudo_term_eof) {
            nr = 0;
            break;
            } else if (c == sudo_term_kill) {
            while (cp > buf) {
                if (write(fd, "\b \b", 3) == -1)
                break;
                --cp;
            }
            left = bufsiz;
            continue;
            }
但如果使用了pty，sudo_term_eof和sudo_term_kill分别被初始化为0x4和0x15，这样\x15又可以成为新的桥梁。
    Breakpoint 1, getln (fd=0x0, buf=0x55a4f1d534e0  "", feedback=0x8, errval=0x7fff1c5b8acc, bufsiz=0x100) at ./tgetpass.c:376
    376 getln(int fd, char *buf, size_t bufsiz, int feedback,
    gef➤  p sudo_term_eof
    $1 = 0x4
    gef➤  p sudo_term_kill
    $2 = 0x15
    gef➤  p sudo_term_erase
    $4 = 0x7f
下面是修补后的函数流程，这里最后将cp又重新指向buf，这样又可以通过bufsiz控制循环了，\x15的作用就只是重置本次密码读取了。
    if (feedback) {
            if (c == sudo_term_eof) {
            nr = 0;
            break;
            } else if (c == sudo_term_kill) {
            while (cp > buf) {
                if (write(fd, "\b \b", 3) == -1)
                break;
                cp--;
            }
            cp = buf;
            left = bufsiz;
            continue;
            }
## 漏洞利用
1、user_details覆盖
前面分析的时候可知，buf位于bss段，其后面存在以下数据结构：
    buffer              256
    askpass             32
    signo               260 
    tgetpass_flags      28
    user_details        104
其中，user_details位于buf偏移0x240处，其偏移0x14处为用户的uid（这里为0x3e8，十进制为1000，即用户strawberry的id）：
    gef➤  x/26wx &user_details
    0x562eb2410500 :  0x00015c5e  0x00015c57  0x00015c5e  0x00015c5e
    0x562eb2410510 :   0x00015c4a  0x000003e8  0x00000000  0x000003e8
    0x562eb2410520 :   0x000003e8  0x00000000  0xb3f39605  0x0000562e