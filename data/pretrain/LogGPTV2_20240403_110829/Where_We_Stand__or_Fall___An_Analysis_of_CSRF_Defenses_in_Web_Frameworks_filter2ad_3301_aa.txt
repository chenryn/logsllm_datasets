title:Where We Stand (or Fall): An Analysis of CSRF Defenses in Web Frameworks
author:Xhelal Likaj and
Soheil Khodayari and
Giancarlo Pellegrino
Where We Stand (or Fall): An Analysis of CSRF Defenses in Web
Xhelal Likaj
Saarland University
Saarbruecken, Germany
PI:EMAIL
CISPA Helmholtz Center for
Information Security
Saarbruecken, Germany
Frameworks
Soheil Khodayari
soheil.khodayari@cispa.saarland
Giancarlo Pellegrino
CISPA Helmholtz Center for
Information Security
Saarbruecken, Germany
gpellegrino@cispa.saarland
ABSTRACT
Cross-Site Request Forgery (CSRF) is among the oldest web vul-
nerabilities that, despite its popularity and severity, it is still an
understudied security problem. In this paper, we undertake one
of the first security evaluations of CSRF defense as implemented
by popular web frameworks, with the overarching goal to identify
additional explanations to the occurrences of such an old vulner-
ability. Starting from a review of existing literature, we identify
16 CSRF defenses and 18 potential threats agains them. Then, we
evaluate the source code of the 44 most popular web frameworks
across five languages (i.e., JavaScript, Python, Java, PHP, and C#)
covering about 5.5 million LoCs, intending to determine the imple-
mented defenses and their exposure to the identified threats. We
also quantify the quality of web frameworks’ documentation, look-
ing for incomplete, misleading, or insufficient information required
by developers to use the implemented CSRF defenses correctly.
Our study uncovers a rather complex landscape, suggesting that
while implementations of CSRF defenses exist, their correct and
secure use depends on developers’ awareness and expertise about
CSRF attacks. More than a third of the frameworks require devel-
opers to write code to use the defense, modify the configuration
to enable CSRF defenses, or look for an external library as CSRF
defenses are not built-in. Even when using defenses, developers
need to be aware and address a diversity of additional security risks.
In total, we identified 157 security risks in 37 frameworks, of which
17 are directly exploitable to mount a CSRF attack, leveraging imple-
mentation mistakes, cryptography-related flaws, cookie integrity,
and leakage of CSRF tokens—including three critical vulnerabili-
ties in CakePHP, Vert.x-Web, and Play. The developers’ feedback
indicate that, for a significant fraction of risks, frameworks have
divergent expectations about who is responsible for addressing
them. Finally, the documentation analysis reveals several inadequa-
cies, including not mentioning the implemented defense, and not
showing code examples for correct use.
CCS CONCEPTS
• Security and privacy → Web application security;
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
RAID ’21, October 6–8, 2021, San Sebastian, Spain
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9058-3/21/10...$15.00
https://doi.org/10.1145/3471621.3471846
KEYWORDS
CSRF, Defenses, Web Frameworks
ACM Reference Format:
Xhelal Likaj, Soheil Khodayari, and Giancarlo Pellegrino. 2021. Where We
Stand (or Fall): An Analysis of CSRF Defenses in Web Frameworks. In 24th
International Symposium on Research in Attacks, Intrusions and Defenses
(RAID ’21), October 6–8, 2021, San Sebastian, Spain. ACM, New York, NY,
USA, 16 pages. https://doi.org/10.1145/3471621.3471846
1 INTRODUCTION
Cross-Site Request Forgery (CSRF) is among the oldest web vul-
nerabilities, consistently ranked as one of the top ten threats to
web applications [88]. Successful CSRF exploitations could cause re-
mote code execution [111], user accounts take-over [85, 87, 90, 122],
or compromise of database integrity—to name only a few in-
stances. Developers can protect web applications from CSRF at-
tacks by implementing one of the many client-side and server-
side defense mechanisms proposed by the research community
(e.g., [99, 104, 112, 114, 124, 126, 133, 134]). Alternatively, develop-
ers can use off-the-shelf CSRF defenses as implemented by web
frameworks, such as the ones provided by popular frameworks
like Django for Python, Spring for Java, and ASP.NET for C#. Web
frameworks are key components for developing web applications,
providing convenient and powerful abstractions to separate low-
level functionalities, e.g., databases and web page generation, from
the application’s logic. However, such a convenience comes at a
great cost: a vulnerability in the framework will negatively affect
the security of many web applications.
CSRF vulnerabilities are a major concern for web applica-
tions, with a steep increasing number of reported instances ev-
ery year [58]. Yet, this class of vulnerabilities have received
a marginal attention by the research community, where most
of the previous effort focused largely on defense mechanisms
(e.g., [99, 104, 112, 114, 124, 126, 133, 134]) and vulnerability de-
tection (e.g., [101, 122, 129]. To date, we know none-to-little about
the security of the CSRF defense implementations and their suscep-
tibility against improper use.
In this paper, we undertake, to the best of our knowledge, the
first security evaluation of CSRF defense as implemented by popular
web frameworks, comprehensively and systematically covering the
source code, defenses’ design, documentation, and the operational
aspects, with the overarching goal to identify additional explana-
tions to the steady increase of such an old vulnerability. Starting
with a thorough review of academic and non-academic literature,
we enumerate existing CSRF defenses and threats against them,
identifying 16 distinct defenses and 18 potential threats. Then, we
370RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xhelal Likaj, Soheil Khodayari, and Giancarlo Pellegrino
evaluate the source code of the 44 most popular web frameworks
across the top five programming languages for web applications
(i.e., JavaScript, Python, Java, PHP, and C#) covering about 5.5 mil-
lion LoCs, intending to determine the implemented defenses and
their exposure to the identified threats. Finally, we also quantify the
quality of web frameworks’ documentation, looking for incomplete,
misleading, or insufficient information required by developers to
implement and use the implemented CSRF defenses correctly.
Insights—Our study uncovers a complex landscape, suggesting
that while implementations of CSRF defenses exist, their correct and
secure implementation depends on developers’ awareness about
CSRF attacks, threats to CSRF defenses, and specific behaviors of
the implementations.
Insight #1: Almost all frameworks offer a CSRF defense—either
built-in or via external libraries, with the majority enforcing a
token-based protection mechanism, one of the most robust CSRF
defenses. For example, over 53% and 41% of the frameworks use
double submit cookies and synchronizer tokens to mitigate CSRF
attacks, respectively. Also, all frameworks (except Li3) use robust
CPRNG for token generation. Even more promising, almost half
of the frameworks (i.e., 19) enforce a defense-in-depth mechanism
by applying two or more layers of defenses in sequence. For exam-
ple, we observe that ten frameworks enable SameSite cookies by
default—a promising defense-in-depth mechanism which can miti-
gate a number of CSRF attacks. Similarly, we observed that seven
frameworks give state to the double submit cookie that is stateless
in nature, making it immune to cookie tossing and jar overflow
attacks. Finally, we noticed that frameworks offer defenses that can
protect web applications from attackers with stronger capabilities
than web attackers. For example, the cryptographic operations con-
ducted in most frameworks use secure algorithms, sufficiently long
tokens, or encryption that makes a CSRF attack even more difficult.
Insight #2: In total, 11 frameworks provide an enabled-by-default
defense. In all other frameworks, developers need to write glue
code to enable and use frameworks’ defenses correctly. More specif-
ically, more than a third of the frameworks (36%, i.e., 16 out of
44) do not provide any built-in defense—including popular ones
such as Express, Flask, and Spring—requiring developers to search
for external libraries or alternatively implement their defense. In
most of these cases (i.e., 11 out of 16 frameworks), the frameworks’
documentation suggests an external CSRF library, whereas, for the
remaining ones (i.e., five out of 16 frameworks), it does not. Even
if the vast majority of frameworks (67%, i.e., 28 out of 44) provide
built-in defenses, all frameworks require developers to know the
CSRF defense operations, the correct sequence of operations, and
the security-sensitive server-side endpoint that need to be protected.
Finally, for 17 of these 28 frameworks, developers need to enable
CSRF defenses explicitly as they are disabled by default.
Insight #3: Implemented defenses—either built-in or via external
libraries—can contain vulnerabilities or implement weak solutions.
The deployment of robust defenses requires developers to be aware
of additional threats that can weaken or even defeat CSRF defenses
and their ability to develop or configure ad-hoc solutions. In total,
we identified 157 distinct security risks in all but four frameworks
(Falcon, Web2py, Apache Wicket, and Falcon), of which 17 are di-
rectly exploitable, affecting the building blocks of token-based CSRF
defenses—the most widely implemented defense—such as token
generation, transportation, and validation. In general, while token-
based defenses use robust generation algorithms (i.e., cryptographi-
cally secure pseudorandom number generators, cryptographic algo-
rithms, and implementations), the randomness of tokens is sub-par.
Furthermore, if tokens leak, virtually all implemented defenses are
exposed to token replay attacks as they reuse tokens across multiple
requests. Only one framework implements a per-request unique
token, rendering replay hard in practice. Also, we identified and
already reported three critical vulnerabilities in CakePHP, Vert.x-
Web, and Play, leading to a complete CSRF defense bypass. Finally,
both our security analyses and developers’ feedback reveal that, for
a considerable fraction of security risks, frameworks’ developers
have divergent expectations from applications’ developers about
their responsibility for addressing the risks.
Insight #4: Lastly, the documentation of most of the frameworks
with a CSRF defense is inadequate. For example, the documentation
does not explain the implemented defense name or any kind of
description (16 out of 39 frameworks with a defense), does not show
the correct use via code examples (seven out of 39 frameworks),
nor adequately describe the API calls and the configuration space
of the CSRF defense (eight out of 39 frameworks).
Contributions—To summarize, this paper makes the following
contributions:
• We conduct, to the best of our knowledge, the first security
evaluation of CSRF defenses as implemented by popular web
frameworks.
• We conduct an exhaustive review of the existing proposed
defenses and potential threats, identifying 16 defenses and
18 security threats.
• We identify 44 popular web frameworks across the most
popular programming languages for web applications (i.e.,
JavaScript, Python, Java, PHP, and C#). We evaluate 5.5 mil-
lion LoCs, to identify implemented defenses and their expo-
sure to the 18 security threats.
• We discovered 157 distinct security risks in 37 popular web
frameworks, of which 17 are directly exploitable and three
severe instances that can lead to a complete defense bypass
in CakePHP, Vert.x-Web, and Play.
• We ranked the documentation of the web frameworks
against six quality attributes, and show that documenta-
tion is largely inadequate and poorly supports developers in
building robust defenses.
2 PROBLEM STATEMENT
2.1 Cross-Site Request Forgery (CSRF)
In a CSRF attack, an adversary tricks a victim’s web browser into
sending an authenticated HTTP request to a vulnerable web ap-
plication in order to execute a state-changing operation, with-
out the victim’s consent or awareness. Targets of CSRF attacks
can be, for example, changing user account privileges or creden-
tials [85, 87, 90, 101], remote execution of arbitrary code [111, 122],
or illicit money transfer [122, 134]. A CSRF attack typically com-
prises of two phases: preparation and attack. During the prepara-
tion phase, the malicious code is added to the attacker-controlled
371Where We Stand (or Fall): An Analysis of CSRF Defenses in Web Frameworks
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Figure 1: The workflow of a CSRF attack.
website, whose aim is to submit a correct (i.e., with all expected pa-
rameters) cross-origin HTTP request to the target web application
(e.g., bank.com). This can be achieved with a variety of methods,
e.g., with a script tag, self-submitting HTML form, other HTML
tags with the src attribute, or the JavaScript Fetch API [41]. In
the attack phase, the attacker lures an authenticated victim into
visiting the attack page (step one). Then, the malicious code in the
attack page tricks the victim’s browser into sending a cross-origin
HTTP request to the target web application (step two). The browser
complies with the Same-Origin Policy (SOP) for cookies and auto-
matically includes the authentication header (e.g., HTTP session
cookies) in the outgoing request [81, 104]. Finally, the cross-origin
request triggers a state-changing operation (e.g., a money transfer),
which the vulnerable server will execute due to the session cookies’
presence. Figure 1 exemplifies the steps of this attack.
2.2 Research Questions
Despite the popularity of CSRF attacks, little has been done to
understand how CSRF defenses are implemented and the hurdles
when using them in practice. This paper takes the first step in this
direction and explores the security of CSRF implementations of
web frameworks to shed some light on possible causes and factors
hampering web applications’ security. More specifically, we aim to
answer the following questions:
RQ1: Available CSRF Defenses—Over the past decades, we have
seen a plethora of different ideas to protect from CSRF attacks. Still,
we lack a comprehensive survey and categorization of proposed
defenses. More importantly, we know little about the ones that are
used in practice by web applications.
RQ2: Security of Existing Defenses—Prior work has mostly fo-
cused on proposing new defenses or devising new CSRF detection
techniques (e.g., [101, 122, 129]). Yet, we do not know what are com-
mon mistakes introduced by developers when implementing CSRF
defenses. The second question of this paper intends to answer that
question by reviewing the source code of popular web frameworks
and libraries against attacks targeting both CSRF defenses or other
components whose compromisation might weaken them.
RQ3: Developers’ Challenges—Even when frameworks imple-
ment robust CSRF defenses, their incorrect use can also severely
impact web applications’ security. Incorrect use may stem from
under-documented APIs, missing or misleading documentation,
wrong or missing code examples, and insecure defaults and con-
figuration (see, e.g., [96, 107, 120, 121, 132]). Our third question
intends to explore the extent to which the implementations of CSRF
defenses might induce web developers in implementing insecure
web applications.
3 METHODOLOGY
To answer our research questions presented in Section 2.2, we de-
compose our study into five main steps, organizing it into prepara-
tory steps and analysis.
Preparatory Steps. The preparatory steps (i) identify relevant
frameworks used by developers (Section 3.1), (ii) survey academic
and non-academic literature to enumerate and classify proposed
CSRF defenses (Section 3.2), and (iii) review existing literature
to create a comprehensive list of threats against CSRF defenses
(Section 3.3).
Analysis. Our analysis combines manual code review and dynamic
testing (Section 3.4), and documentation review (Section 3.5). Dur-
ing code review and dynamic testing, we identify defenses used in
practice and their robustness against our list of threats, answering
to RQ1 and RQ2. Then, to review the documentation, we define
measurable quality criteria of the web framework documentation,
and rank frameworks accordingly.
3.1 Identification of Popular Web Frameworks
In this paper, we focus on analyzing CSRF defenses in web frame-
works. To find popular frameworks, we first identify the top five
web programming languages from GitHub’s 2019 Octoverse re-
port [42], i.e. JS, Python, Java, PHP, and C# (ordered). Then, for
each language, we identify the top 10 web frameworks. As a first
step, we compiled a large list of frameworks for each language
using numerous web resources. Then, we quantitatively measure
the popularity of all identified frameworks based on these criteria
(ordered by importance): the number of uses by other GitHub repos-
itories (GitHub Used By), download statistics in package managers
of each language (e.g., npm [61] for JS), number of relevant ques-
tions in Stack Overflow [77], and the number of GitHub watches,
stars, and forks. Accordingly, we pick the top 10 frameworks for
each language. For C# and JS, we only identified five and nine web
frameworks, respectively. Thus, our testbed contains a total of 44
web frameworks (see Table 5 in Appendix A).
Finally, for frameworks that do not offer any built-in CSRF de-
fense, we searched in their documentation for official indication on
how to protect against CSRF, e.g., by importing external libraries.
We label these libraries official. If we do not find any official indica-
tion, we search on developer communities, such as Stack Overflow,
to find the library to use. We label these libraries unofficial. In to-
tal, we considered 13 libraries (11 official, and two unofficial). The
complete list of libraries is provided in Table 6 of Appendix A.
3.2 Survey of CSRF Defenses
As the second step of our study, we compile a comprehensive list of
defenses by reviewing the academic works (i.e., [3, 63, 74, 92, 95, 99–
101, 104, 112–115, 119, 122–124, 126–128, 128, 129, 131, 133, 134])
and non-academic resources [3, 63, 74, 82]. Then, by dissecting CSRF
attacks, we identify four distinct categories of vulnerable behaviors
that when removed, a CSRF attack is no longer successful. In total,
we identify 16 distinct defenses, each addressing one of the four
vulnerable behaviors. We present each defense in §4.
372RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xhelal Likaj, Soheil Khodayari, and Giancarlo Pellegrino
3.3 Threat Analysis
We identified possible threats against CSRF defenses by systemat-
ically reviewing academic literature (i.e., [99, 100, 104–106, 109,
110, 114, 118, 126, 129, 130, 133, 134]), OWASP security best-
practices [63], the National Vulnerability Database (NVD) [58], and
web frameworks’ GitHub issues. Of these, we consider in-scope
those threats that can be exploited by a web attacker and a network
attacker. We note that both attacker models are consistent with
prior work in the area of CSRF defenses [99] and attacks [106]. How-
ever, we observe that the network attacker is, in general, stronger
than a web attacker, and many attacks may be considered out of
scope for CSRF defenses, i.e., network-level MITM. In this paper, we
consider a weak form of the network attacker, e.g., an attacker that
can leverage compromised DNS servers and unprotected wireless
networks to control the victim users’ network connections.
Once we identified relevant threats, we grouped them into four
main categories: (i) threats affecting the generation of CSRF tokens,
(ii) ways an attacker can obtain a valid CSRF token, (iii) as token-
based defenses can rely on cookies, e.g., double submit cookie,
we have threats against cookie integrity, and (iv) finally, we have
threats affecting the CSRF validation of HTTP requests. In total,
we identified 18 distinct threats which we present in §5.
3.4 Analysis of the Code
To the best of our knowledge, there is no single program analysis
technique that satisfies three requirements: (1) analyze programs
written in multiple programming languages; (2) analyze partial
programs such as frameworks and libraries; (3) detect the threats
we identified in §5. Accordingly, in this work, we defined a manual
methodology that combines code review, dynamic testing, and a
strict evaluation protocol.
Code Review. Manual code review is the first technique we used
to analyze the security of each framework. First, we reviewed the
documentation and API specifications. We observed that the docu-
mentation is rarely useful in practice. In Section 7.2, we present an
in-depth evaluation of the documentation. Given the insufficient
documentation, we searched for all CSRF-related GitHub issues in
the framework’s repository to gain insight into corner cases and
design decisions.
Next, we reviewed the source code using two strategies. In the
first review strategy, we examined the code to expand our under-
standing of frameworks, architectures, and modules. We loaded the
source code in an IDE (IntelliJ for Java, VS Enterprise for C#, and
VS Code for Python, PHP, and JavaScript), and then reviewed the
CSRF-related source code files, following control-flow insensitive
navigation. We noted possible entry points for the execution, con-
figuration files, and parameters. In total, with the first strategy, we
reviewed 5,585,275 LoC, containing 575,182 of JavaScript, 509,400
of Python, 1,915,669 of Java, 1,062,917 of PHP, and 1,522,104 of C#.
Then, we evaluated the workflow of CSRF defenses. Specifically,
we prepared a list of sensitive functions, e.g., token generation,
leveraging the snippets and APIs from the documentation. Then,
we located functions in the code and traced the program execu-
tion following a forward control and data-flow sensitive inspection.
During the inspection, we collected sensitive functions that could
be abused by an attacker, e.g., cryptographic functions. With the
second strategy, we reviewed 14,696 of LoC, including 1,632 of
JavaScript, 2,164 of Python, 3,661 of PHP, 3,773 of Java, and 3,466
of C#.
Manual Dynamic Testing. During our review, frameworks like
Meteor, Vaadin, and Tornado were particularly challenging to ana-
lyze due to their complex, poorly-modularized source code. There-
fore, we also performed dynamic testing as part of our evaluation
for all frameworks. We built a basic web application for each frame-
work, equipped it with a simple HTML form for a state-changing
HTTP request, and monitored the execution using debuggers and
breakpoints to ensure that our code review did not miss alternative
executions.
Threats Prioritization. Our evaluation requires to test a large
number of threats, which is demanding. Therefore, we prioritized
our analysis and examined all threats against the top five frame-
works for each language, for a total of 25 frameworks. For the re-
maining 19 frameworks, we only focused on a subset of threats that
does not require a special testing environment but can be inferred
directly from the source code review (e.g., implementation mistakes,
cookie tossing, replay attacks, or BREACH). Furthermore, in this
paper, we focus only on the default settings of each framework as
it is infeasible to study every possible configuration setting.
3.5 Analysis of the Documentation
Documentation is pivotal for the correct use of CSRF defenses.
After retrieving the documentations, we defined six quality criteria
that the documentation of CSRF defenses should have, and ranked
frameworks accordingly.
Defense Name or Description. The documentation should name
and describe the implemented CSRF defense so that developers can
properly apply and evaluate its enforcement.
API Specs. Using CSRF defenses may require the use of API func-
tions, and the documentation should provide developers with an
adequate description of their functionalities.
Configuration. The implemented CSRF defense may need con-
figuration parameters, e.g., the secret key for encrypted tokens.
Accordingly, the documentation should adequately describe the
configuration parameters of the CSRF defense.
Code Example. Descriptive text may not be sufficient to convey
the correct use of defenses. Often documentation includes snippets
of code to illustrate the correct use.
Cryptographic Guarantees. Some CSRF defenses rely on crypto-
graphic algorithms whose security depends on known weaknesses
of the algorithms or weak secrets. Ideally, documentation should
mention the names of used algorithms and default parameters, e.g.,
key length and entropy.
General Security Considerations. The documentation should
describe known behaviors that can weaken the security guarantees,
and provide general security considerations when not protecting
state-changing operations against CSRF attacks.
4 SURVEY OF CSRF DEFENSES
In this section, we answer RQ1 by surveying existing literature on
CSRF defenses following our methodology of Section 3.2. In total,
373Where We Stand (or Fall): An Analysis of CSRF Defenses in Web Frameworks
RAID ’21, October 6–8, 2021, San Sebastian, Spain
we identified 16 distinct defense mechanisms, each addressing one
of the four vulnerable behaviors. Table 1 summarizes the identified
defenses. The rest of this section details the defenses in four distinct
categories.
4.1 Origin Checks
A distinctive feature of CSRF attacks is that the request’s origin
differs from the origin of the target. One of the first defenses con-
sists of checking the origin of an HTTP request. For example, the
server-side of the web application can check the HTTP request
Referer and Origin headers [99, 114, 129]. Another defense relies
on browsers complying with the Cross-Origin Resource Sharing
(CORS) [99, 129]. When performing a cross-origin request (COR),
browsers can send a so-called pre-flight request, whose goal is to
check whether the COR complies with the CORS policy of the
server-side before sending the actual COR request. However, pre-
flight requests are issued only for non-simple requests. A web
application can enforce these requests by requiring a custom HTTP
request header [63] with each state-changing request and rejecting
requests that lack this header.
4.2 Request Unguessability
Another distinctive feature of CSRF attacks is that an attacker can
guess all parameters of a request, except for cookies. The second
strategy of defense is the addition of unguessable parameters, often
called CSRF tokens. For example, a popular CSRF defense is the
Synchronizer Token Pattern (Plain Token) [126] which generates
random tokens. This generated token is stored on the server-side
and tied to the user session. For each incoming sensitive request,
the server compares the token in the user session against the to-
ken in the request. Alternatively, the server-side can avoid storing
tokens and check their validity with the aid of cryptographic primi-
tives. For example, the Encryption-based Token Pattern (Encrypted
Token) [63] and HMAC-based Token Pattern (HMAC Token) [63]
use encryption and HMAC codes to protect a token containing a
timestamp and a user session identifier. The server accepts requests
if two conditions hold. First, the server decrypts the token correctly
or checks whether the HMAC code is correct. Second, the server
verifies that the timestamp is valid and that the session identifier is
of the user submitting the request. Instead of using cryptographic
primitives, servers can submit a pseudo-random value both as a
request parameter and as a cookie. The server will accept the re-
quest only if the two values match. An example of such a defense
is the Double Submit Cookie [134]. A variant of it is the Triple
Submit Cookie [133], which suggests using a random cookie name
to prevent attackers from writing cookies in specific scenarios such
as XSS or cookie tossing attack.
Another approach is Cookie-less User Session management [55,
82] which relies on the localStorage APIs [83] to store user ses-
sions. This defense could be effective since, unlike cookies, the
browser does not automatically attach the values stored in web
storage to HTTP requests.
4.3 Same-Origin Policy for Cookies
A behavior that is exploited by CSRF attacks is the compliance
with SOP for cookies. When the user visits the malicious page, the
malicious code will send a request to the target web application
and the user’s browser will include the cookies in this request.
Over the past years, we have seen many defenses suggesting to
modify this behavior of the browser, e.g., via proxies (e.g., [104,
114]), browser extensions (e.g., [112, 119, 123, 124]), or both [115].
Instead of relying on third-party components, SameSite attribute
for cookies [128, 131] can be used. This attribute allows developers
to choose among three policies (Strict, Lax, None) specifying when
cookies should be included in cross-origin requests. An alternative
approach that can be implemented by web applications is to limit
the life span of session cookies, forcing frequent log out events [74].
4.4 User Intention
Finally, another crucial feature of CSRF attacks is that web appli-
cations cannot determine whether a request is the result of the
users’ intention. Inferring the user intention is not a trivial prob-
lem to solve and existing solutions require the user itself to per-
form additional steps before accepting a request. Examples of these
defenses are user Re-authentication [63], One-time Token [63],
solving (re)CAPTCHA challenges [63], and Multi-browser naviga-
tion [3, 63, 100].
5 THREAT MODELING
In our review, we focused on four categories of threats: (1) threats af-
fecting the way CSRF defenses generate tokens; (2) threats that can
leak the CSRF token; (3) threats against cookie integrity; (4) threats
affecting the CSRF validation of requests. In total, we identified 18
distinct threats across all four categories, as presented in Table 1.
The rest of this section presents the identified threats. For brevity,
we discuss the threats in more coarse-grained groupings and mark
each individual threat in italic. Also, for each threat, we provide
the references to past vulnerabilities that affected CSRF protections
or real-world web applications. We use reports from HackerOne
(hereafter H1) [43], and CVEs from MITRE [57].
5.1 Token Generation
This section presents the first category of threats against the gener-
ation of CSRF tokens.
Weak Generators. An insecure randomness vulnerability occurs
when developers generate predictable tokens, e.g. as in the recent
CVE-2021-26296 [38]. Other example can be found in practice, such
as hashing used identifiers [46] or the timestamp [69], or using the
time to initialize a pseudo-random number generator (PRNG) [5, 53].
A more robust approach consists of using a cryptographically-
secure PRNG (CSPRNG) [4] together with a secret key. Another
common threat is caused when using vulnerable cryptographic li-
braries, as in CVEs 2013-2213 [7] and 2015-4056 [11]. We relied
on the official documentation of each PRNG [54, 56, 60, 66, 71] to
evaluate whether they were secure.
Insufficient Randomness. Even with robust cryptographic func-
tions, developers can still introduce vulnerabilities by specifying
short tokens that do not protect sufficiently against brute-forcing,
i.e., insufficient token randomness [64]. Threats can also originate
when generating insufficiently long secret keys for signature and
374RAID ’21, October 6–8, 2021, San Sebastian, Spain
Xhelal Likaj, Soheil Khodayari, and Giancarlo Pellegrino
Table 1: Overview of CSRF defenses and threats. The left part summarizes our survey of CSRF defenses. The right part shows
the mapping between each defense and potential threats.
encryption, i.e., insufficient key randomness. Examples of insuffi-
cient randomness vulnerabilities are CVEs 2012-1598 [6], and 2021-
23127 [37].
5.2 CSRF Token Leakage and Abuse
The second category of threats that we considered targets the ex-
change of the token between the client and server. This category
includes attacks where the adversary can exploit weaknesses that
allow leaking the token.
Side-channel Attacks. An attacker can leak the tokens through
side-channels using attacks like BREACH [106], which affects ap-
plications that use data compression such as gzip or DEFLATE
in HTTP responses. Here, an attacker could trick user’s browser
into submitting multiple requests and observe length variations
due to compression and leak the token. Examples of BREACH vul-
nerabilities are CVE 2015-2206 [9] and 2014-9720 [10]. Another
side-channel can originate from the way applications compare to-
kens. For example, default string comparison functions such as
strcmp stop the comparison at the first mismatching character,
allowing an external observer to monitor the time increase be-
tween comparisons, revealing the correct character. Examples of
such a vulnerability are CVEs 2015-6728 [12], 2015-8125 [13], 2015-
8623 [14], 2016-10535 [16], and 2018-1000119 [25].
Cross-Domain Referrer Leakage. When transmitting the to-
ken to the client, developers can use hidden HTML input forms,
JavaScript variables, or custom request headers. However, devel-
opers should consider not including tokens as URL parameters as
they can be leaked. For example, URLs may appear in the Referer
HTTP header, disclosing tokens to external websites. Examples of
these vulnerabilities are H1 report nos. 342693 [44] and 787160 [48],
and CVEs 2016-5739 [18] and 2019-15515 [31].
CORS Misconfiguration. Attackers can also exploit server-side
misconfigurations to leak the CSRF tokens. For example, an over-
permissive CORS policy [2, 102] that sets Access-Control-Allow-
Origin (ACAO) HTTP header to reflect the request’s origin and
Access-Control-Allow-Credentials (ACAC) to true, allow at-
tackers to read responses’ body of cross-origin requests, which is
forbidden by default browsers’ policies. Accordingly, the attacker
could send a cross-origin request to fetch a page with the CSRF
token and use it in a CSRF attack. Examples of these vulnerabilities
are H1 report nos. 975983 [49], 577969 [47], and 426147 [45] or
2015-9243 [15] and CVEs 2016-10549 [17].
5.3 Cookie Integrity
Token-based CSRF defenses, such as Double and Triple Submit
cookie, rely on cookies which an attacker may try to corrupt. For
example, if the attacker controls a subdomain of the target web
application, the attacker can set or overwrite cookies of the parent
domain with attacker-specified values [116], known as cookie toss-