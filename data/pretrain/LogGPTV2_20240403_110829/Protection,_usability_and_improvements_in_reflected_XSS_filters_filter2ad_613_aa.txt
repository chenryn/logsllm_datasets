# Title: Protection, Usability, and Improvements in Reflected XSS Filters

## Authors
- Riccardo Pelizzi, Stony Brook University (riccardo.pelizzi@stonybrook.edu)
- R. Sekar, Stony Brook University (r.sekar@stonybrook.edu)

## Abstract
Cross-Site Scripting (XSS) attacks have become one of the most prevalent security threats on the web. Consequently, major browsers now include or support filters to protect against reflected XSS attacks. In this paper, we analyze two popular open-source XSS filters: XSSAuditor for Google Chrome and NoScript for Firefox. We identify their weaknesses and introduce a new browser-resident defense called XSSFilt. Unlike previous defenses that focus on detecting entire script injections, XSSFilt can also detect partial script injections, where malicious parameter values alter existing scripts. Our evaluation shows that a significant fraction of sites vulnerable to reflected XSS can be exploited using partial injections. Additionally, XSSFilt uses approximate string matching, making it more robust for websites with custom input sanitizations. We provide a detailed experimental comparison of the three filters in terms of usability and protection.

## Categories and Subject Descriptors
D.4.6 [Security and Protection]: Information Flow Controls

## 1. Introduction
Cross-site scripting (XSS) is one of the most serious threats on the web. It is listed as the fourth most dangerous software error by CWE/SANS Top-25 and the second most critical risk by OWASP. In 2011, XSS accounted for 14.7% of all reported CVE vulnerabilities.

The prevalence and severity of XSS attacks have led to extensive research into XSS defenses. Many efforts have focused on server-side detection and prevention, but these approaches are limited by the complex HTML parsing logic of modern browsers. Hybrid approaches combining client-side and server-side defenses have been developed, but client-side protections are particularly important for reflected XSS, where the output of a vulnerable server includes malicious script content from a request.

### 1.1 Limitations of Existing Filters
While XSSAuditor and NoScript are effective, they have limitations:
- **XSSAuditor**:
  - Focuses on whole script injections, missing partial script injections.
  - Uses exact string matching, which may fail with application-specific sanitizations.
- **NoScript**:
  - Sanitizes outgoing requests, leading to false positives.
  - Relies on complex regular expressions, making maintenance difficult.
  - Can disrupt user experience by altering request parameters.

### 1.2 Overview of XSSFilt and Contributions
We present XSSFilt, a new client-side XSS defense that addresses the above limitations. The contributions of this paper are:
- **Architecture**: XSSFilt uses approximate string matching to handle application-specific sanitizations.
- **Detection Policies**: XSSFilt detects both whole and partial script injections.
- **Security Analysis**: We discuss potential attacks on XSSFilt and ensure its design can defend against them.
- **Experimental Evaluation**: We compare XSSFilt, XSSAuditor, and NoScript in terms of protection and usability. Our results show:
  - Partial script injections account for 8% of 400 vulnerabilities from xssed.com and 18% of 10K vulnerabilities discovered using our tool.
  - Dynamic scripts generated from input parameters are common, appearing in over 9% of web pages.
  - Approximate string matching reduces false negatives five-fold compared to exact matching.
  - False positives from XSSFilt are often indicators of underlying XSS vulnerabilities, while NoScript's false positives are benign.

## 2. Background on XSS Attacks
An XSS attack involves a vulnerable website, a legitimate user, and an attacker. The attacker's goal is to perform sensitive operations using the user's credentials. The attack typically involves three steps:
1. The attacker delivers a malicious payload to the vulnerable site.
2. The payload is used to generate a victim page sent to the user's browser.
3. If the site is vulnerable, the user's browser executes the injected code.

In a reflected XSS attack, the attacker lures the user to a malicious page or link, causing the browser to submit a request with attacker-chosen parameters. If the site echoes these parameters without proper sanitization, the attacker's code executes in the response page.

## 3. XSSFilt Overview
XSSFilt operates during the sequence of events from request submission to page loading. The steps are illustrated in Figure 2 and described below:
1. The browser submits a request to a web site.
2. The request is processed, and the response is received.
3. XSSFilt intercepts the response and checks for script content.
4. If a potential injection is detected, XSSFilt applies approximate string matching to determine if the content is malicious.
5. If malicious content is found, XSSFilt sanitizes the response before rendering the page.

This approach ensures that XSSFilt can effectively detect and mitigate both whole and partial script injections, providing robust protection against reflected XSS attacks.