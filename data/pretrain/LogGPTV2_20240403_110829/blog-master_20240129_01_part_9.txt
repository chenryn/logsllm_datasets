BELLE开源中文对话大模型:    
- BELLE是一个基于LLaMA二次预训练和调优的中文大语言模型，由链家开发。    
MOSS开源对话语言模型:    
- MOSS开源对话语言模型来自复旦大学OpenLMLab项目，具有指令遵循能力、多轮对话能力、规避有害请求能力。    
元语功能型对话大模型V2:    
- 元语功能型对话大模型V2是一个支持中英双语的功能型对话语言大模型,由元语智能提供。V2版本使用了和V1版本相同的技术方案，在微调数据、人类反馈强化学习、思维链等方面进行了优化。    
BiLLa开源推理能力增强模型:    
- BiLLa是一种改良的开源LLaMA模型，特色在于增强中文推理能力。    
5\.2、embeddings,     
通用文本向量:    
- 基于LLM底座的统一向量化模型，面向全球多个主流语种，提供高水准的向量服务，帮助用户将文本数据快速转换为高质量的向量数据。    
ONE-PEACE多模态向量表征:    
- ONE-PEACE是一个通用的图文音多模态向量表征模型，支持将图像，语音等多模态数据高效转换成Embedding向量。在语义分割、音文检索、音频分类和视觉定位几个任务都达到了新SOTA表现，在视频分类、图像分类图文检索、以及多模态经典benchmark也都取得了比较领先的结果。    
5\.3、audio,    
Sambert语音合成:    
- 提供SAMBERT+NSFGAN深度神经网络算法与传统领域知识深度结合的文字转语音服务，兼具读音准确，韵律自然，声音还原度高，表现力强的特点。    
Paraformer语音识别;    
- 达摩院新一代非自回归端到端语音识别框架，可支持音频文件、实时音频流的识别，具有高精度和高效率的优势，可用于客服通话、会议记录、直播字幕等场景。    
6、通义千问模型的API:    
https://help.aliyun.com/zh/dashscope/developer-reference/api-details     
调用举例:    
6\.1、通过curl调用api. 请把以下API-KEY代替成你申请的api-key.      
```    
curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation' --header 'Authorization: Bearer API-KEY' --header 'Content-Type: application/json' --data '{    
    "model": "qwen-turbo",    
    "input":{    
        "messages":[          
            {    
                "role": "system",    
                "content": "你是达摩院的生活助手机器人。"    
            },    
            {    
                "role": "user",    
                "content": "请将这句话翻译成英文: 你好，哪个公园距离我最近？"    
            }    
        ]    
    },    
    "parameters": {    
    }    
}'    
```    
```    
{"output":{"finish_reason":"stop","text":"Hello, which park is closest to me?"},"usage":{"output_tokens":9,"input_tokens":50},"request_id":"697063a4-a144-9c17-8b6c-bc26895c1ea4"}    
```    
```    
curl --location 'https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation' --header 'Authorization: Bearer API-KEY' --header 'Content-Type: application/json' --data '{    
    "model": "qwen-turbo",    
    "input":{    
        "messages":[          
            {    
                "role": "system",    
                "content": "你是达摩院的生活助手机器人。"    
            },    
            {    
                "role": "user",    
                "content": "你好，哪个公园距离我最近？"    
            }    
        ]    
    },    
    "parameters": {    
    }    
}'    
```    
```    
{"output":{"finish_reason":"stop","text":"你好！你可以查看你的地图，或者我可以为你提供附近公园的信息。你想查看哪个地区的公园？"},"usage":{"output_tokens":39,"input_tokens":39},"request_id":"c877aa58-883b-9942-97a5-576d3098e697"}    
```    
6\.2、通过python调用api:     
安装python sdk:    
- https://help.aliyun.com/zh/dashscope/developer-reference/install-dashscope-sdk  
```  
sudo apt-get install -y pip  
pip install dashscope  
```  
创建一个保存api key的文件:    
请把以下API-KEY代替成你申请的api-key.       
```    
mkdir ~/.dashscope    
echo "API-KEY" > ~/.dashscope/api_key    
chmod 500 ~/.dashscope/api_key    
```    
然后编辑一个python文件    
```    
vi a.py    
```    
```    
#coding:utf-8    
from http import HTTPStatus    
from dashscope import Generation    
def call_with_messages():    
    messages = [{'role': 'system', 'content': '你是达摩院的生活助手机器人。'},     
                {'role': 'user', 'content': '如何做西红柿鸡蛋？'}]    
    gen = Generation()    
    response = gen.call(    
        Generation.Models.qwen_turbo,    
        messages=messages,    
        result_format='message', # set the result is message format.    
    )    
    if response.status_code == HTTPStatus.OK:       
        print(response)      
    else:    
        print('Request id: %s, Status code: %s, error code: %s, error message: %s'%(    
            response.request_id, response.status_code,     
            response.code, response.message    
        ))         
if __name__ == '__main__':    
    call_with_messages()    
```    
调用结果如下:    
```    
root@c4012a5576b6:~# python3 a.py    
{"status_code": 200, "request_id": "00a5f4f2-d05b-9829-b938-de6e6376ef51", "code": "", "message": "", "output": {"text": null, "finish_reason": null, "choices": [{"finish_reason": "stop", "message": {"role": "assistant", "content": "做西红柿鸡蛋的步骤如下：\n\n材料：\n- 西红柿 2 个\n- 鸡蛋 3 个\n- 葱 适量\n- 蒜 适量\n- 盐 适量\n- 生抽 适量\n- 白胡椒粉 适量\n- 糖 适量\n- 水淀粉 适量\n\n步骤：\n1. 西红柿去皮，切成小块，鸡蛋打散，葱切末，蒜切片。\n2. 锅中放油，倒入葱末和蒜片炒香。\n3. 加入西红柿块，翻炒至软烂。\n4. 加入适量的盐、生抽、白胡椒粉和糖，继续翻炒均匀。\n5. 倒入适量的水，煮开后转小火炖煮 10 分钟左右。\n6. 鸡蛋液倒入锅中，煮至凝固后翻面，再煮至另一面凝固即可。\n7. 最后加入适量的水淀粉，翻炒均匀即可出锅。\n\n注意事项：\n- 西红柿去皮时可以用刀划十字，然后放入开水中烫一下，皮就很容易去掉了。\n- 煮西红柿鸡蛋时，要注意小火慢炖，以免西红柿的营养成分流失。\n- 鸡蛋液倒入锅中时要快速翻面，以免蛋液凝固后不易翻面。"}}]}, "usage": {"input_tokens": 35, "output_tokens": 328}}    
```    
7、通用文本向量的API:    
https://help.aliyun.com/zh/dashscope/developer-reference/text-embedding-quick-start    
调用举例:    
```    
vi b.py    
```    
```    
#coding:utf-8    
import dashscope    
from http import HTTPStatus    
from dashscope import TextEmbedding    
def embed_with_list_of_str():    
    resp = TextEmbedding.call(    
        model=TextEmbedding.Models.text_embedding_v1,    
        # 最多支持25条，每条最长支持2048tokens    
        input=['风急天高猿啸哀', '渚清沙白鸟飞回', '无边落木萧萧下', '不尽长江滚滚来'])    
    if resp.status_code == HTTPStatus.OK:    
        print(resp)    
    else:    
        print(resp)    
if __name__ == '__main__':    
    embed_with_list_of_str()    
```    
调用结果如下:    
```    
# python3 b.py    
{    
    "status_code": 200, // 200 indicate success otherwise failed.    
    "request_id": "fd564688-43f7-9595-b986-737c38874a40", // The request id.    
    "code": "", // If failed, the error code.    
    "message": "", // If failed, the error message.    
    "output": {    
        "embeddings": [ // embeddings    
            {    
                "embedding": [ // one embedding output    
                    -3.8450357913970947, ...,    
                    3.2640624046325684    
                ],    
                "text_index": 0 // the input index.    
            }    
        ]    
    },    
    "usage": {    
        "total_tokens": 3 // the request tokens.    
    }    
}    
```    
二、通过plpython 让PolarDB|PostgreSQL 内置AI能力        
传统数据库的数据库内置编程语言的支持比较受限, 通常只支持SQL接口. 无法直接使用通义千问大模型+文本向量化模型的能力.    
PolarDB|PostgreSQL 数据库内置支持开放的编程语言接口, 例如python, lua, rust, go, java, perl, tcl, c, ... 等等.     
PolarDB|PostgreSQL 通过内置的编程接口, 可以实现数据库端算法能力的升级, 将算法和数据尽量靠近, 避免了大数据分析场景move data(移动数据)带来的性能损耗.     
连接到数据库shell, 创建plpython3u插件, 让你的PolarDB|PostgreSQL支持python3编写数据库函数和存储过程.     
```  
psql   
create extension plpython3u;  
```  
1、创建aigc函数, 让数据库具备了ai能力.    
```    
create or replace function aigc (sys text, u text) returns jsonb as $$    
#coding:utf-8    
from http import HTTPStatus    
from dashscope import Generation    
messages = [{'role': 'system', 'content': sys},     
            {'role': 'user', 'content': u}]    
gen = Generation()    
response = gen.call(    
    Generation.Models.qwen_turbo,    
    messages=messages,    
    result_format='message', # set the result is message format.    
)    
if response.status_code == HTTPStatus.OK:       
    return (response)     
else:    
    return('Request id: %s, Status code: %s, error code: %s, error message: %s'%(    
        response.request_id, response.status_code,     
        response.code, response.message    
    ))         
$$ language plpython3u strict;    
```    
调用举例    
```    
postgres=# select * from aigc ('你是达摩院的AI机器人', '请介绍一下PolarDB数据库');    

aigc | {"code": "", "usage": {"input_tokens": 27, "output_tokens": 107}, "output": {"text": null, "choices": [{"message": {"role": "assistant", "content": "PolarDB是阿里巴巴达摩院自主研发的大规模分布式数据库，具有高性能、高可用、高安全等特点。它采用了多种技术手段，如分布式存储、分布式计算、数据分片、熔断和降级策略等，可以支持大规模的互联网应用场景，如搜索引擎、推荐系统、金融服务等。"}, "finish_reason": "stop"}], "finish_reason": null}, "message": "", "request_id": "fd9cce79-6c48-9a9d-85f3-ff1a75bdd480", "status_code": 200}    
```    
2、创建embeddings函数, 将文本转换为高维向量.    
```    
create or replace function embeddings (v text[]) returns jsonb as $$    
#coding:utf-8    
import dashscope    
from http import HTTPStatus    
from dashscope import TextEmbedding    
resp = TextEmbedding.call(    
    model=TextEmbedding.Models.text_embedding_v1,    
    # 最多支持25条，每条最长支持2048tokens    
    # 返回的向量维度: 1536   
    input=v)    
if resp.status_code == HTTPStatus.OK:    
    return(resp)    
else:    
    return(resp)    
$$ language plpython3u strict;    
```   
返回一个字符串的vector  
```  