to split or concatenate messages going back to the client. If that would be the case, the attacker
would have further control over the response pipeline and the messages delivered to the
victims.
Any response which is generated after a HEAD request is expected not to have a
message-body. For this reason, any proxy/client receiving a response to a HEAD request must
ignore any length headers and consider the body to be empty (0 length).
The RFC states that a response to a HEAD request must be the same as one intended for a
GET request of the same resource. Also, if the message-length header is present, it indicates
only what would have been the length of the equivalent GET request.
RFC7231: “Responses to the HEAD request method never include a message body because
the associated response header fields (e.g., Transfer-Encoding, Content-Length, etc.), if
present, indicate only what their values would have been if the request method had been GET”
In most Web Applications, it is rather common to see HEAD responses with content-length
header in static resources (such as HTML static documents). This is also true when Web
Caches store a resource which is then requested through a HEAD message.
HTTP Method Confusion
As the length of a HEAD response is determined by the request associated, it is important for
proxies to match ingoing and outgoing messages correctly. If this fails, the response
content-length would be considered, which might contain a non-zero value.
As already explained in the previous section, using HTTP Smuggling, it is possible to inject
extra messages in the response queue. This can desynchronize the response pipeline, causing
proxies to mismatch the relationship between inbound and outbound messages.
If the attacker would smuggle a HEAD request, the pipeline desynchronization could cause the
response to be associated with another method request. And as any other method uses length
headers to determine the bounds of messages, the proxy would think that the response body is
the first N bytes of the next response, where N is the value of the Content-Length.
Response Concatenation
HTTP Method Confusion technique can be leveraged to obtain a new set of response payloads
and vulnerabilities. As the HEAD response will consume the first bytes of the following
message, the attacker can smuggle multiple responses and build the body using them.
Notice the close connection directive in the last smuggled request. This is not accidental, and
will be useful to discard any left-over suffix bytes of a request/response that will produce a Bad
Request message.
Figure 10. 1) The attacker sends 2 smuggled requests, the first being a HEAD message. The Proxy forwards 2 “GET
'' requests. The victim’s message is not processed as the previous request contained a close directive.
Figure 11. The client receives the smuggled responses concatenated, using the first (HEAD) response as headers,
and the second response message as the body.
As the second smuggled response full length (headers+body) might be greater than the HEAD
response Content-Length, only the first N bytes will be used as the body. The rest will be
discarded because of the close directive which will also be included in the second response (a
close connection request must always produce a close connection response).
Notice that the amount of bytes that will be concatenated to the HEAD response depends on the
Content-Length header of the message.
An attacker needs to concatenate enough responses so that the total size of all injected
payloads (headers+body) match the value of the HEAD Content-Length.
HTTP Response Scripting
Reflected Header Scripting
Response concatenation technique allows attackers to send multiple concatenated responses
to the victim. These responses can be chosen arbitrarily, and the headers will be used as part of
the body, formatted with the media-type specified by the HEAD response.
If the first HEAD response has the Content-Type directive set to HTML, the headers of the next
concatenated messages will be parsed as part of an HTML document. So, if any of these
headers is vulnerable to unescaped content reflection, an attacker could use it to build an XSS
payload which will be parsed as javascript and executed at the victim’s browser.
As an example, suppose there is an endpoint which redirects users to any resource in the Web
Application domain. To do so, the value of a parameter is reflected, without escaping any other
character than the line break, in the response Location header.
If the location’s domain is fixed this does not present a vulnerability. Open redirections and
response splitting are not possible.
This scenario can be found in most Web Applications in the wild.
An attacker could leverage this feature to build a malicious response containing an XSS using
the Location header as part of an HTML body:
If a victim request is pipelined by the proxy after the malicious payload, the client will receive the
following response, which will pop an XSS alert box:
The same attack could be performed if the XSS occurs in the body of the redirect response,
which, in other cases, would not be exploitable.
Content-Type confusion & Security bypass
Some media types, like text/plain or application/json, could be considered protected against
cross site scripting attacks, as scripts are not executed by the browser. Because of this, many
Web Applications allow users to reflect unescaped data in responses with “safe” Content-Type
header.
Until now, there was not much to do to successfully exploit this kind of data reflection, apart from
MIME type sniffing attacks which are not very effective in practice.
However, using response concatenation, the Content-Type of a smuggled message could be
ignored if its headers are part of the response body. This can be achieved the same way as the
previous example, where a HEAD response is used to set the Content-Type to “text/html”.
Notice that response concatenation can also be used to bypass security related headers, such
as Content-Security-Policy or the old X-XSS-Protection. These headers are also part of the
body, so the browser ignores the directives.
Session Hijack: stealing HttpOnly Cookies
It should be clear by now that, if the Content-Length value from the HEAD response is large
enough, multiple requests could be concatenated into one. This technique can be leveraged to
build a new set of payloads to exploit known vulnerabilities that were not available before.
Even though response desync allows an attacker to hijack victim responses, in practice this
technique might not be reliable enough. Most proxy-server connections are quite sensitive,
meaning that they might be close for a number of reasons. In particular, many proxies do not
store responses, and close the connection if a complete response is received when no request
was issued. This can be solved by sending multiple requests in a small period of time, expecting
that the request is received just before an orphan response is received.
Still, it is unlikely to receive a hijacked request in a congested network, as the probability of
obtaining a particular response will be divided by the amount of HTTP clients.
For this reason, it was useful to find a malicious request that could be reliable enough to hijack
victim requests, which would include HttpOnly headers not accessible through javascript.
The only thing required to perform this attack is an endpoint with unescaped reflected content
and a HEAD response with a non-zero Content-Length header. As mentioned before, these are
easy to meet conditions that can be found on most Web Applications.
The attack consists of 3 smuggled requests.
1.
A HEAD request whose response contains a non-zero Content-Length and an HTML
media type header.
2.
A request whose response contains unescaped reflected data, in order to build the XSS.
3.
A request (can be the previous one) whose response contains reflected content,
unescaped or not.
The idea is to obtain a response containing a reflected XSS (red), but also a reflection of the
victim’s request (blue).
After being concatenated, the last smuggled request will look as follows:
Figure 12. The attacker smuggles 3 requests. The proxy will see them as one isolated message, but the server will
split them in 4, concatenating the last with the victim’s message.
Figure 13. The backend server returns 4 isolated responses. The proxy forwards the first to the attacker, but
concatenates the others using the content-length header from the HEAD response.
The resulting responses will contain both a javascript, which will be executed by the client’s
browser, and the victim’s original request, including HttpOnly session cookies.
As the victim’s request is part of the response body, the javascript could easily be used to hijack
user’s sessions, by sending the cookies to an attacker’s controlled server.
Notice that the Content-Length value of the HEAD response is 310.
Arbitrary Cache Poisoning
Apart from the Content-Length and Content-Type headers, an attacker can leverage another
HTTP directive contained in a HEAD response: the Cache-Control.
As defined in the HTTP/1.1 Caching RFC-7234, the Cache-Control header is used to specify
directives that MUST be used by web caches to determine whether a response should be
stored for a specific key (in most cases an endpoint and some other headers such as the host
and user-agent).
This means that, if a response contains a Cache-Control header with a max-age value greater
than zero, this message should be stored for the specified time and all subsequent requests to
the same resource must obtain the same response.
Using this knowledge, and combining it with a Response Scripting attack using a HEAD
response, an attacker could be able to find a response containing this mentioned header. If the
response to the HEAD request also contains a content-length value greater than zero (as
indicated by the RFC), then the resulting concatenated response will be stored for the next
request arriving to the Proxy.
And, as the attacker can also send pipelined requests recognized by the proxy, it is possible to
control the poisoned endpoint, and therefore modify the response behaviour for any arbitrary
URL selected by the malicious user.
Figure 14. The attacker sends two pipelined requests to the Proxy. The first will contain the smuggled HEAD request
and the second will be used to select the poisoned endpoint.
When both requests arrive at the Proxy, they will be splitted in two and forwarded to the
backend. In that moment, the smuggled requests will also get splitted and 4 isolated responses
will be generated.
Figure 15. The proxy believes that only two GET requests were issued. The backend will instead see 4 isolated
requests and will generate 4 responses, including one (red) to a HEAD request.
When the responses arrive to the proxy, the first not smuggled response (blue) will be sent back
to the attacker for the first GET request.
However, the HEAD response will be concatenated with the following smuggled one, as the
proxy will think that this message corresponds again to a GET request. But in this case, the
response will also be stored in the Web Cache, as it contains a Cache-Control header indicating
that this message should be cached.
Figure 16. The proxy will forward the malicious response to the attacker, but will also store it in the web cache for the
selected endpoint.
And finally, when a victim sends a request for the same resource, the proxy will not forward the
message to the backend. Instead, it will look for the response in the cache and retrieve the
stored malicious payload.
Figure 17. The proxy will respond with the stored response to the victim’s request.
Using this technique, an attacker will be able to poison any application endpoint, even those that
do not exist and would in other cases return a 404 status code.
And this can be done by sending a single request, and without depending on any client’s
interaction or limitations.
The same concepts can be used to produce Web Cache Deception, but in this case the victim’s
response with sensitive data will be stored in the cache.
HTTP Splitting: Arbitrary Response Injection
Previous sections explained how HEAD responses allow an attacker to concatenate multiple
responses using response smuggling. But, even though concatenation can produce useful
attacks, it is also possible to use HEAD messages to split malicious responses.
Instead of looking for responses that could fit inside the HEAD body, an attacker could also use
a request which response can be splitted by the proxy.
Consider a response reflecting a parameter in its body. If the break-line character is not
escaped, the reflected data could be used to build the headers of a response.
If a HEAD response contains a fixed Content-Length, any response coming after it will be sliced
at the Nth byte, where N is the value of the length header. The first N bytes will be concatenated
to the response, but the rest of the message will be considered another isolated response.
As the attacker knows the value of N in advance, by observing the response to the HEAD
request, the slicing position is also predictable.
Figure 14. The smuggled response is splitted by the Proxy, as the Content-Length header is smaller than the
message body. The extra bytes are controlled by the attacker and build a new malicious response.
Considering an imaginary HEAD response with a Content-Length value equal to 50, the
following payload would cause the victim to receive an attacker-controlled response.
Conclusions
Until today, HTTP Smuggling was seen as a hard to solve issue present in many proxies and
backend servers. Almost no HTTP parser proved to be immune to this vulnerability.
Still, when assigning a criticity to the flaw, most vendors determined that HTTP Desync is not as
severe as it might look. Even if researchers were able to prove to have control over the request
pipeline, it was not possible to demonstrate that this issue could compromise any Web
Application just by itself. As other WEB vulnerabilities were required to successfully exploit a
system, it was not easy to argue about low/medium CVSS scores assigned to Desync
advisories.
This caused researchers to focus their attention on bug bounty programs, instead of reporting
directly to the HTTP proxy/server vendor.
However, the techniques described in this paper can be used to fully compromise the Integrity,
Confidentiality and Availability of any Web Application vulnerable to HTTP Desynchronization
(HTTP Smuggling or HTTP Splitting).
What's more, all these attacks can be performed without the need of extra vulnerabilities being
chained, simplifying the exploitation and increasing the reliability of known attacks.
For this reason, this research concludes that a review of the HTTP Desyn CVSS v3.1 general
scoring should be applied to most Smuggling advisories, reflecting the criticality of real possible
attacks.
References
RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1
https://tools.ietf.org/html/rfc2616
RFC 7230: Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing
https://datatracker.ietf.org/doc/html/rfc7230
CHAIM LINHART, AMIT KLEIN, RONEN HELED, STEVE ORRIN: HTTP Request Smuggling
https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf
James Kettle: HTTP Desync Attacks: Request Smuggling Reborn
https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn
https://portswigger.net/research/http-desync-attacks-what-happened-next
Amit Klein: HTTP Request Smuggling in 2020
https://i.blackhat.com/USA-20/Wednesday/us-20-Klein-HTTP-Request-Smuggling-In-2020-New-
Variants-New-Defenses-And-New-Challenges.pdf