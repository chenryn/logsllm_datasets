### Network Pivoting and Privilege Escalation

An attacker may use a compromised target to pivot, or move between connected networks. This action amplifies the attacker's network visibility, allowing them to target hosts that are not directly reachable from the initial attack machine.

#### Investigating Port Bindings
We can investigate port bindings to determine if a running service is only available on the loopback address, rather than on a routable one. Examining a privileged program or service listening on the loopback interface could expand our attack surface and increase the likelihood of a successful privilege escalation attack.

#### Listing TCP/IP Configuration
Depending on the version of Linux, we can list the TCP/IP configuration of every network adapter using either `ifconfig` or `ip`. While `ifconfig` displays detailed interface statistics, `ip` provides a more compact version of the same information. Both commands accept the `-a` flag to display all available information.

```bash
joe@debian-privesc:~$ ip a
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: ens192:  mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:50:56:8a:b9:fc brd ff:ff:ff:ff:ff:ff
    inet 192.168.50.214/24 brd 192.168.50.255 scope global ens192
       valid_lft forever preferred_lft forever
    inet6 fe80::250:56ff:fe8a:b9fc/64 scope link
       valid_lft forever preferred_lft forever
3: ens224:  mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 00:50:56:8a:72:64 brd ff:ff:ff:ff:ff:ff
    inet 172.16.60.214/24 brd 172.16.60.255 scope global ens224
       valid_lft forever preferred_lft forever
    inet6 fe80::250:56ff:fe8a:7264/64 scope link
       valid_lft forever preferred_lft forever
```

Based on the output above, the Linux client is connected to multiple networks.

#### Displaying Network Routing Tables
We can display network routing tables using either `route` or `routel`, depending on the Linux distribution and version. Both commands provide similar information.

```bash
joe@debian-privesc:~$ route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         192.168.50.254  0.0.0.0         UG    100    0        0 ens192
172.16.60.0     0.0.0.0         255.255.255.0   U     0      0        0 ens224
192.168.50.0    0.0.0.0         255.255.255.0   U     0      0        0 ens192
127.0.0.0       0.0.0.0         255.0.0.0       U     0      0        0 lo
```

#### Listing Active Network Connections and Listening Ports
We can display active network connections and listening ports using either `netstat` or `ss`. Both commands accept the same arguments. For example, we can list all connections with `-a`, avoid hostname resolution (which may stall the command execution) with `-n`, and list the process name the connection belongs to with `-p`.

```bash
joe@debian-privesc:~$ ss -anp
Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port
nl UNCONN 0 0 0:461 *
nl UNCONN 0 0 0:323 *
nl UNCONN 0 0 0:457 *
...
udp UNCONN 0 0 [::]:47620 [::]:*
tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:*
tcp LISTEN 0 5 127.0.0.1:631 0.0.0.0:*
tcp ESTAB 0 36 s 192.168.50.214:22 192.168.118.2:32890
tcp LISTEN 0 128 *:80 *:*
tcp LISTEN 0 128 [::]:22 [::]:*
tcp LISTEN 0 5 [::1]:631 [::]:*
```

The output lists various listening ports and active sessions, including our own active SSH connection and its listening socket.

### Firewall Rules and Cron Jobs

#### Enumerating Firewall Rules
During the remote exploitation phase of an assessment, we are primarily interested in the firewall's state, profile, and rules. This information can also be useful during privilege escalation. For example, if a network service is not remotely accessible because it is blocked by the firewall, it is generally accessible locally via the loopback interface. Interacting with these services locally may allow us to exploit them to escalate our privileges on the local system.

On Linux-based systems, root privileges are required to list firewall rules with `iptables`. However, depending on the firewall configuration, we may be able to gather information about the rules as a standard user.

For example, the `iptables-persistent` package on Debian Linux saves firewall rules in specific files under `/etc/iptables` by default. These files are used by the system to restore netfilter rules at boot time. These files often have weak permissions, allowing them to be read by any local user on the target system.

```bash
joe@debian-privesc:~$ cat /etc/iptables/rules.v4
# Generated by xtables-save v1.8.2 on Thu Aug 18 12:53:22 2022
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -p tcp -m tcp --dport 1999 -j ACCEPT
COMMIT
# Completed on Thu Aug 18 12:53:22 2022
```

Since this file is read-only by any users other than root, we can inspect its contents. We notice a non-default rule that explicitly allows the destination port 1999. This configuration detail should be noted for further investigation.

#### Examining Scheduled Tasks
Systems acting as servers often periodically execute various automated, scheduled tasks. When these systems are misconfigured, or the user-created files are left with insecure permissions, we can modify these files to be executed by the scheduling system at a high privilege level.

The Linux-based job scheduler is known as `cron`. Scheduled tasks are listed under the `/etc/cron.*` directories, where `*` represents the frequency at which the task will run. For example, tasks that will be run daily can be found under `/etc/cron.daily`.

```bash
joe@debian-privesc:~$ ls -lah /etc/cron*
-rw-r--r-- 1 root root 1.1K Oct 11 2019 /etc/crontab
/etc/cron.d:
total 24K
drwxr-xr-x 2 root root 4.0K Aug 16 04:25 .
drwxr-xr-x 120 root root 12K Aug 18 12:37 ..
-rw-r--r-- 1 root root 102 Oct 11 2019 .placeholder
-rw-r--r-- 1 root root 285 May 19 2019 anacron
/etc/cron.daily:
total 60K
drwxr-xr-x 2 root root 4.0K Aug 18 09:05 .
drwxr-xr-x 120 root root 12K Aug 18 12:37 ..
-rw-r--r-- 1 root root 102 Oct 11 2019 .placeholder
-rwxr-xr-x 1 root root 311 May 19 2019 0anacron
-rwxr-xr-x 1 root root 539 Aug 8 2020 apache2
-rwxr-xr-x 1 root root 1.5K Dec 7 2020 apt-compat
...
```

Listing the directory contents, we notice several tasks scheduled to run daily.

System administrators often add their own scheduled tasks in the `/etc/crontab` file. These tasks should be inspected carefully for insecure file permissions, as most jobs in this file will run as root. To view the current userâ€™s scheduled jobs, we can run `crontab` followed by the `-l` parameter.

```bash
joe@debian-privesc:~$ crontab -l
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').
#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h dom mon dow command
```

In the above output, only the commented instructions are present, meaning no cron job has been configured for the user `joe`. However, if we try to run the same command with the `sudo` prefix, we discover that a backup script is scheduled to run every minute.

```bash
joe@debian-privesc:~$ sudo crontab -l
[sudo] password for joe:
# Edit this file to introduce tasks to be run by cron.
...
# m h dom mon dow command
* * * * * /bin/bash /home/joe/.scripts/nuser_backups.sh
```

Listing cron jobs using `sudo` reveals jobs run by the root user. In this example, it shows a backup script running as root. If this file has weak permissions, we may be able to leverage it to escalate our privileges.

As we will learn later in this module, the `joe` user has been granted specific `sudo` permission only to list cron jobs running as the root user. This permission alone cannot be abused to obtain a root shell.

### Searching for Exploits

At some point, we may need to leverage an exploit to escalate our local privileges. Our search for a working exploit begins with the enumeration of all installed applications, noting the version of each. We can use this information to search for a matching exploit.

Manually searching for this information could be very time-consuming and ineffective, so we will learn how to automate this process in the next section. However, we should know how to manually query installed packages to corroborate information obtained during previous enumeration steps.

Linux-based systems use a variety of package managers. For example, Debian-based Linux distributions, like the one in our lab, use `dpkg`, while Red Hat-based systems use `rpm`.

To list applications installed by `dpkg` on our Debian system, we can use `dpkg -l`.

```bash
joe@debian-privesc:~$ dpkg -l
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name Version Architecture Description
+++-=====================================-
============================================-============-
===============================================================================
ii accountsservice 0.6.45-2 amd64 query and manipulate user account information
ii acl 2.2.53-4 amd64 access control list - utilities
ii adduser 3.118 all add and remove users and groups
ii adwaita-icon-theme 3.30.1-1 all default icon theme of GNOME
ii aisleriot 1:3.22.7-2 ...
```

This output provides a comprehensive list of installed packages, which we can use to search for potential vulnerabilities.