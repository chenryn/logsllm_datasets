to propagate to the application outputs, the error propagation
must corrupt at least one register. Thus, NVBitFI models faults
in terms of their eventual effect on registers.
Speciﬁcally, our transient fault models the effect of a
transient fault as corrupting a single destination register of
a single dynamic instruction. Furthermore, we model the bit-
level corruption as either a single or double bit-ﬂip, random
corruption, or a zeroing effect. Although the errors from realis-
tic faults will likely have more complicated manifestations, we
offer these fault model options as a generalizable fault model.
Errors may manifest across multiple registers if the fault
affects persistent microarchitectural state. Also, bit-level error
patterns are likely dependent on the opcode and instruction
inputs. Because these more realistic error effects are difﬁcult to
generalize in a parameterized fault model, we offer a simpler,
but more generalizable fault model. Future directions include
targeting a speciﬁed thread, more complex bit patterns, the
use of fault models with a greater number of more complex
parameters as well as a fault dictionary that is parameterized
based on opcodes, input registers, and other state.
Permanent fault model. NVBitFI also supports a perma-
nent fault model, which assumes that the fault affects all
dynamic instances of an instruction type. For example, a
permanent fault in an ALU would affect the results of all
ADD instructions. The NVBitFI permanent fault model takes
a simplistic approach to specifying the effects of this type
of fault model, with the destination registers of all dynamic
instances of a particular opcode being corrupted with the same
bit-ﬂip XOR mask.
Table III shows the parameters for permanent faults. The
list of parameters is simpler than for transient faults because
the dynamic instruction to inject does not need to be speciﬁed.
Rather, the opcode is speciﬁed, and all dynamic instructions
with that opcode are injected. Because the permanent fault
model is mapped to a physical location on the GPU, the SM
and lane parameters indicate which SM and which hardware
lane to target for injection. All threads that execute in the target
SM and lane are considered for injection.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:22 UTC from IEEE Xplore.  Restrictions apply. 
287
As with transient faults, we focus on a simple permanent
fault model in order to present a generalizable fault model.
We realize that realistic permanent faults likely have error
effects that are not always dependent on the execution of
speciﬁc opcodes. Some permanent fault models may be easy
to specify. For example, a stuck-at fault on the output of a
register ﬁle could be emulated as a corruption of the nth
bit of every read of the register ﬁle. A fault in an ALU
could corrupt the result of multiple opcodes that utilize that
ALU. Future work includes determining which specialized
permanent fault models represent faults that users are likely
to ﬁnd interesting. Also, a fault dictionary approach could
be utilized, especially if that fault dictionary is derived from
circuit and microarchitectural simulation. We discuss more
sophisticated permanent fault models in Section V, but our
current model allows analysis of a fault that repeatedly creates
errors.
C. NVBit
The profiler.so and injector.so libraries are built
using NVBit [9]. NVBit is a dynamic binary instrumentation
framework for NVIDIA GPUs that provides a convenient API
for instruction inspection, callbacks to CUDA driver APIs, and
injection of arbitrary CUDA functions into any application
before kernel launch. NVBit allows instrumentation tools to
be created for CUDA programs without requiring the tool
writer to have detailed knowledge of the underlying GPU
architecture.
By leveraging NVBit, the same tool without recompilation
can be used to inject faults into any CUDA executable,
which simpliﬁes usage of the fault
injector. The dynamic
library is attached to a CUDA process using the LD_PRELOAD
environment variable.
As each dynamic kernel is launched, NVBit will determine
if that kernel must be instrumented. If so, the kernel is instru-
mented and built with just-in-time compilation. That kernel is
cached so that a subsequent launch uses the cached compiled
version. A kernel
that does not need to be instrumented
is executed with no modiﬁcation. This mechanism allows
selective and fast instrumentation.
IV. TOOL EVALUATION
NVBitFI has been applied successfully to a large, com-
mercial autonomous vehicle software (AV) application [22].
This complex application uses many dynamic libraries from
several software packages. Thus, fault
injection tools that
require source code recompilation would struggle to manage
the source across these multiple packages. A fault injection
tool based on cuda-gdb would not require recompilation or
management of source code. However, cuda-gdb is a general
debugger that is not designed speciﬁcally for fault injection
and therefore must maintain a large amount of state for each
dynamic kernel. This additional state management imposes a
signiﬁcant performance penalty. Because the AV application is
a real-time system, the performance overhead from cuda-gdb
would have triggered real-time assertions in the application.
SPECACCEL OPENACC 1.2 BENCHMARK PROGRAMS.
TABLE IV
Description
Thermodynamics
Computational ﬂuid dynamics,
Lattice Boltzmann Method
Medicine
Molecular dynamics
Large-eddy simulation,
atmospheric turbulence
Embarrassingly parallel
Program
303.ostencil
304.olbm
314.omriq
350.md
351.palm
Conjugate gradient
Seismic wave modeling
Scalar Penta-diagonal solver
Scalar Penta-diagonal solver
352.ep
353.clvrleaf Weather
354.cg
355.seismic
356.sp
357.csp
359.miniGhost Finite difference
Fluid mechanics
360.ilbdc
Weather
363.swim
Block Tri-diagonal solver
370.bt
for 3D PDE
Static Dynamic
kernels
kernels
101
2
3
900
2
3
100
7
116
22
16
71
69
26
1
22
50
2
53
7,050
187
12,528
2,027
3,502
27,692
26,890
8,010
1,000
11,999
10,069
POSSIBLE ERROR PROPAGATION OUTCOMES.
TABLE V
Outcome
SDC
DUE
Masked
Potential DUE
Symptom
Standard output is different
Output ﬁle is different
Timeout, indicating a hang (Monitor detection)
Process crash (OS detection)
Non-zero exit status (Application detection)
Application-speciﬁc check failed
No difference detected
(SDC or Masked) with CUDA error
(SDC or Masked) with dmesg error
Among the fault injection tools that we are aware of, NVBitFI
is the only tool that allows fault-injection based evaluation of
such a large, real-time system.
This section uses the SpecACCEL OpenACC v1.2 bench-
mark [23] to illustrate how NVBitFI can be used to measure
error propagation outcomes and associated injection perfor-
mance overheads. We use the 15 OpenACC applications that
are derived from a range of high-performance computing
applications, as shown in Table IV. We inject faults into an
NVIDIA Titan V GPU as part of a system with an AMD
EPYC 7402P 24-Core Processor and 256 GB of memory.
A. Outcome Determination
For each application, we add an SDC checking script to
determine if an SDC has occurred. The determination of what
constitutes an SDC is both application and user dependent, so
SDC checking scripts must always be provided by the user.
The SDC checking script should reference a saved, golden ver-
sion of the standard output and any ﬁles created without fault
injection. The SpecACCEL package conveniently includes a
program-speciﬁc checking script with each program, which we
use to determine if an SDC has occurred.
The possible outcomes of NVBitFI injections are listed in
Table V. SDC outcomes are due to any one of the following
conditions: the standard output differs from the golden output,
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:22 UTC from IEEE Xplore.  Restrictions apply. 
288
the output ﬁle contents differ from the golden ﬁle contents, or
an application-speciﬁc check (e.g., an assertion) failed. DUE
outcomes are due to hangs, crashes, and non-zero exit status. If
the application passes the SDC check, then the error is masked.
In some cases, a potential DUE can be declared despite
symptoms of an SDC or a masked outcome if a non-handled
anomaly is recorded by the system. One common anomaly is a
non-fatal CUDA message, usually involving a memory access
violation. For example, a GPU error that causes a misaligned
or non-mapped memory access would normally cause a fatal
error for CPU code. However, a similar error on a GPU causes
early termination of the current kernel but is otherwise non-
fatal to the process unless the CPU code explicitly checks for
the error at the end of the kernel. In such cases, the GPU
detected the error, but CPU code did not check for it. We
consider these cases to be potential DUEs because the program
code could be modiﬁed to check for and handle the error. In
our following results, we count potential DUEs as either SDC
or masked.
We conducted a fault
injection campaign targeting the
SpecACCEL OpenACC v1.2 applications using NVBitFI. Sec-
tion IV-B discusses the SDC, DUE, and masked outcomes,
and Section IV-C shows the overheads incurred by both the
proﬁling and injection steps.
B. Benchmark Fault Injection Outcomes
We conducted three types of fault injection experiments on
each of the 15 SpecACCEL programs: (1) transient faults with
exact proﬁling, (2) transient faults with approximate proﬁling,
and (3) permanent faults. For each transient fault experiment,
we injected 100 faults for each program. For the permanent
fault experiment, we injected one fault for each opcode. We
classiﬁed the outcomes of each run based on the criteria in
Section IV-A. The speciﬁc insights we wanted to analyze
with these experiments include (1) the differences (between
exact and approximate proﬁling and (2) the manifestation of
permanent faults. More injected faults are necessary to tighten
the conﬁdence interval for all results [24], [25]. While we show
experiments with 100 injections as an example (100 injections
provide results with 90% conﬁdence intervals and ±8% error
margins), 1000 injections are necessary to obtain results with
95% conﬁdence intervals and ±3% error margins.
Exact versus approximate proﬁling. As described in
Section III-A, approximate proﬁling is a faster method for
proﬁling but may result in a proﬁle that does not completely
match a proﬁle from exact proﬁling. Figure 2 compares the
error propagation outcomes for exact and approximate proﬁl-
ing. The ﬁgure shows that although the results do not match
completely for exact and approximate proﬁling, the results for
most of the programs appear quite similar. The SDC, DUE,
and masked differences are 32.5% versus 37.9%, 4.2% versus
4.5%, and 63.3% versus 57.6%, respectively. These results
suggest that approximate proﬁling produces results that are
sufﬁciently similar to exact proﬁling to provide sufﬁcient fault
injection ﬁdelity. However, the similarity between approximate
and exact proﬁling depends on the application. The NVBitFI
Exact vs. Approximate Profiling
for Transient Fault Injection Results 
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
s
e
m
o
c
t
u
O
l
a
t
o
T
f
o
e
g
a
t
n
e
c
r
e
P
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
t
c
a
x
E
x
o
r
p
p
A
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
t
c
a
x
E
x
o
r
p
p
A
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
x
o
r
p
p
A
t
c
a
x
E
x
o
r
p
p
A
t
c
a
x
E
l
m
b
o
4
0
3
.
l
i
c
n
e
t
s
o
3
0
3
.
q
i
r
.
m
o
4
1
3
.
d
m
0
5
3
l
m
a
p
1
5
3
.
p
e
.
2
5
3
f
a
e
l
r
v
l
c
.
3
5
3
g
c
.
4
5
3
c
i
m
s
i
e
s
.
5
5
3
p
s
.
6
5
3
p
s
c
.
7
5
3
SDC
DUE Masked
i
t
s
o
h
G