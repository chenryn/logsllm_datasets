1. We noticed that GSB’s infrastructure was restricting large-
sized data packets from being shipped out of their network
hosting their crawlers. For example, we were unable to ship
a 50 KB sized packet from our client code running in the
crawlers’ browsers to our servers. This was a peculiar re-
striction that we did not notice with any other crawler ven-
dor. As an attacker can easily abuse such properties for eva-
sion, we recommend GSB to re-consider such restrictions.
2. Further, we noticed that while all other crawlers take at
least a couple of seconds to execute our ﬁngerprinting
scripts, GSB’s crawlers were able to do this in less than
30 milliseconds. Our preliminary manual testing with
many popular web browsers also showed that it takes at
least two seconds to execute this code. Attackers can thus
use such timing discrepancies to detect the presence of
a powerful JavaScript execution framework and trigger
their cloaking logic. We did not need to include these
timing-based side channels in our cloaking logic as we
were already able to handle GSB and other crawlers by
capitalizing on their limited ﬁngerprint diversity.
C Evolution of Security Crawlers
As mentioned previously, PhishPrint is a crawler eval-
uation framework with an alternate non-phishing based
design that can conduct the evaluation of security crawlers
against many cloaking attacks that were done by prior works.
In order to demonstrate this, we use the proﬁling data we
obtained from crawlers during our 70-day study. Using this
data, we attempt to repeat the measurements made by authors
of PhishFarm [37]. This way we can study how the crawlers
have evolved from the time of their study to ours.
PhishFarm studied the effectiveness of four user agent-
based cloaking vectors (called as Filters B, C, D and F) and
1 blocklist-based cloaking vector (called Filter E) against
ﬁve crawlers. Four of those crawlers overlap with our work:
APWG, GSB, SmartScreen and PhishTank. So, we consider
these four crawlers here. Filter B serves malicious trafﬁc to
only mobile user agents. Filters C and D serve malicious
trafﬁc to US and non-US based clients that use Desktop GSB
browsers (Chrome, Firefox or Safari). Filter F is equivalent to
the JS execution anomaly vector (as it is tied to a JS onload
event execution). We were unable to report about Filter E as it
uses a speciﬁc .htaccess ﬁle for blocklisting for which we
do not have any access. Also, Filter A is a control ﬁlter and
can hence be ignored here. By analyzing the HTTP headers
and IP addresses in our collected proﬁling data, we were able
to gauge how well the crawlers would have defended against
ﬁlters: B, C, D and F if they were deployed in our reported
URLs.
Table 8 shows the results. The CVD scores for the four
vectors are shown in the four columns. The scores are shown
as fractions here in order to enable direct comparison with
results from [37] which reported the scores on a scale of 0
to 1. In the PhishFarm study, it was reported that except for
Filter B, all the other ﬁlters would be defended against by one
USENIX Association
30th USENIX Security Symposium    3791
Crawler
Mobile
APWG
GSB
SmartScreen
PhishTank
(B)
1.000
0.000
0.000
0.992
Desktop - GSB
US
(C)
0.942
0.347
0.001
0.998
Desktop GSB
Non-US
(D)
Real
Browser
(F)
0.690
0.741
0.075
0.998
1.000
0.914
0.989
1.000
Table 8: CVD scores for the cloaking vectors studied in [37]
of the crawlers. Further, it was mentioned that after the study,
improvements have been made for defending against Filter B
as well. Our study conﬁrms these results. Compared to their
study, both APWG and PhishTank have massively improved
with respect to Filters B, C and D thus indicating that they
have begun to use mobile user agents as well as GSB-based
desktop user-agents worldwide. However, unfortunately,
SmartScreen and GSB still do not adequately scan from
mobile user agents. Further, SmartScreen continues to
perform badly on both ﬁlters C and D. We investigated this
and found that this is because they mostly used IE-based web
browser agents which the ﬁlter explicitly avoids.
D Browser Fingerprinting Code
We provide below the JavaScript code snippets for Canvas,
WebGL and Font Fingerprinting that we adapted from
AmIUnique for proﬁling the crawlers.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
1
2
3
4
5
6
7
8
9
10
11
12
function generate_canvas_data () {
try {
var canvas = document.createElement ('canvas');
canvas.height = 60;
canvas.width = 400;
var canvasContext = canvas.getContext ('2d');
canvas.style.display = 'inline';
canvasContext.textBaseline = 'alphabetic';
canvasContext.fillStyle = '# f60';
canvasContext.fillRect (125 , 1, 62 , 20) ;
canvasContext.fillStyle = '#069';
canvasContext.font = '11 pt no-real-font-123';
canvasContext.fillText
(" Cwm fjordbank glyphs vext quiz , \ uD83D \ uDE03 " , 2, 15) ;
canvasContext.fillStyle = 'rgba (102 , 204 , 0, 0.7)';
canvasContext.font = '18 pt Arial';
canvasContext.fillText
(" Cwm fjordbank glyphs vext quiz , \ uD83D \ uDE03 " , 4, 45) ;
canvasData = canvas.toDataURL () ;
return canvasData;
} catch (e) {
canvasData = 'Not supported';
return canvasData;
}
}
Listing 1: Canvas Fingerprinting Code
function generate_web_gl_data () {
try {
var gl = canvas.getContext
('webgl') || canvas.getContext ('experimental-webgl');
var vShaderTemplate = 'attribute vec2
attrVertex;varying vec2 varyinTexCoordinate;uniform vec2
uniformOffset;void main () { varyinTexCoordinate=attrVertex
+ uniformOffset;gl_Position=vec4 ( attrVertex ,0 ,1) ;}';
var fShaderTemplate = 'precision
mediump float;varying vec2 varyinTexCoordinate;void
main () { gl_FragColor=vec4 ( varyinTexCoordinate ,0 ,1) ;}';
var vertexPosBuffer = gl.createBuffer () ;
gl.bindBuffer ( gl.ARRAY_BUFFER , vertexPosBuffer );
var vertices = new Float32Array
([ -.2 , -.9 , 0, .4 , -.26 , 0, 0, .732134444 , 0]) ;
gl.bufferData ( gl.ARRAY_BUFFER , vertices , gl.STATIC_DRAW );
vertexPosBuffer.itemSize = 3;
vertexPosBuffer.numItems = 3;
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
var program = gl.createProgram () ;
var vshader = gl.createShader ( gl.VERTEX_SHADER );
gl.shaderSource ( vshader , vShaderTemplate );
gl.compileShader ( vshader );
var fshader = gl.createShader ( gl.FRAGMENT_SHADER );
gl.shaderSource ( fshader , fShaderTemplate );
gl.compileShader ( fshader );
gl.attachShader ( program , vshader );
gl.attachShader ( program , fshader );
gl.linkProgram ( program );
gl.useProgram ( program );
program.vertexPosAttrib
= gl.getAttribLocation ( program , 'attrVertex');
program.offsetUniform
= gl.getUniformLocation ( program , 'uniformOffset');
gl.enableVertexAttribArray ( program.vertexPosArray );
gl.vertexAttribPointer ( program.vertexPosAttrib
, vertexPosBuffer.itemSize , gl.FLOAT , !1 , 0, 0) ;
gl.uniform2f ( program.offsetUniform , 1, 1) ;
gl.drawArrays ( gl.TRIANGLE_STRIP , 0, vertexPosBuffer.numItems );
if ( gl.canvas != null) {
return gl.canvas.toDataURL () ;
}
else {
return 'Not supported';
}
} catch (e) {
return 'Not supported';
}
}
Listing 2: WebGL Fingerprinting Code
function get_font_list () {
var baseFonts = ['serif', 'sans-serif', 'monospace'];
// Below is a test font list containing 1043 fonts.
var testFonts = ['. Aqua Kana', '. Helvetica LT MM', .... 'ori1Uni'];
var testSize = '72 px';
var testChar = 'A';
var h = document.getElementById ('font');
// Get the width of the text by creating a span
var s = document.createElement ('span');
s.style.fontSize = testSize;
s.innerText = testChar;
var defaultFonts = {};
for (var indexBaseFonts in baseFonts ) {
baseFont = baseFonts [ indexBaseFonts ];
s.style.fontFamily = baseFont;
if (h) {
h.appendChild (s);
defaultFonts [ baseFont ] = {};
defaultFonts [ baseFont ]['offsetWidth'] = s.offsetWidth;
defaultFonts [ baseFont ]['offsetHeight'] = s.offsetHeight;
h.removeChild (s);
}
}
fontsDetected = {};
for (var indexFont in testFonts ) {
font = fonts [ indexFont ];
detected = false;
fontStyle = '"' + font + '"';
for (var indexBaseFonts in baseFonts ) {
baseFont = baseFonts [ indexBaseFonts ];
// Append base font at the end of test font for fallback
s.style.fontFamily = fontStyle + ',' + baseFont;
if (h) {
h.appendChild (s);
var match = s.offsetWidth != defaultFonts
[ baseFont ]['offsetWidth'] || s.offsetHeight
!= defaultFonts [ baseFont ]['offsetHeight'];
h.removeChild (s);
detected = detected || match;
if ( detected ) {
break;
}
}
}
fontsDetected [ font ] = detected;
}
return fontsDetected;
}
Listing 3: Font List Fingerprinting Code
3792    30th USENIX Security Symposium
USENIX Association