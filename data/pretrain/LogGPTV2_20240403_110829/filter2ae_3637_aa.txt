[TOC]
# 漏洞说明
    There is a buffer overflow vulnerability in the router's web server. While processing the `ssid` parameter for a POST request, the value is directly used in a sprintf call to a local variable placed on the stack, which overrides the return address of the function, causing a buffer overflow.
POST方式传递ssid参数内容导致溢出。
固件和poc：：
# IDA分析
1，由于shift+F12快捷方式有些字符串搜索不出来，可以用如下方法
小技巧：
    ALT + T 搜索字符串
    CTRL + T 重复上一个搜索
    ALT + B 二进制字节序列方式搜索
    CTRL + B 重复上一个搜索
    类推...
2，根据ssid字符串定位到form_fast_setting_wifi_set函数。（或者找到strcpy函数然后通过x交叉引用的方法也能很快定位到form_fast_setting_wifi_set函数）
漏洞产生点：程序获取ssid参数后，没有经过检查就直接使用strcpy函数复制到栈变量中。
注意：这里有个细节：第一次的strcpy如果要溢出到返回地址，会覆盖第二次的strcpy的src（因为在同一个栈中造成数据被覆盖重叠，导致如果src起始地址可能是无效指针，第二次strcpy流程将不会按计划控制，下图说明），但并不会影响第一次的strcpy，所以，解决方案可以选择在libc中选择一个可读有效执行的地址覆盖src指针（任何一个保证不包含\x00的地址都行）。
想办法构造poc去执行system(cmd)。
# qemu user级调试
1，安装qemu-user-static：
    sudo apt install qemu-user-static
2,qemu用户模式启动程序（当前目录处于squashfs-root/ ）：
    cp $(which qemu-arm-static) ./
    sudo chroot ./ ./qemu-arm-static ./bin/httpd
启动时程序需要做一些程序修复工作：
    修复工作：程序流程卡死在某条指令处，可通过一些方法，改变流程使程序不影响主体功能的情况下运行起来。一般可以Hook函数，或则patch某些位置打上补丁。
启动时会遇到如下情况：
3，在IDA中根据出现的字符串搜索，通过X交叉引用的方法定位到程序停止的位置处。
程序是走了线路②的流程，然后提示上面报错内容，我们通过分析直接patch掉①处的循环，和②处的逻辑，程序即可继续正常执行下。（patch掉check_network函数和ConnectCfm函数的返回值为1即可）
可利用IDA插件keypatch完成。
    安装方法：
    [可能还得自己安装依赖库]https://github.com/keystone-engine/keypatch
    [安装详细方法]https://www.chinapyg.com/thread-138385-1-1.html
4，path后的程序直接替换原来的httpd，重新执行命令启动：
我这里因为我早已经构建了br0网卡，所以直接成功了。
未搭建网卡的可能遇见网络配置问题：
类似这种无法识别到网卡分配IP
    Connect to server failed.
    connect: No such file or directory
    Connect to server failed.
    connect: No such file or directory
    Connect to server failed.
    [httpd][debug]----------------------------webs.c,157
    Unsupported setsockopt level=1 optname=13
    httpd listen ip = 255.255.255.255 port = 80
参考：[https://xz.aliyun.com/t/7357?spm=5176.12901015.0.i12901015.65db525cQBSuI3&accounttraceid=1d7f8f3f083842dba12fa62662c34665asfk](https://xz.aliyun.com/t/7357?spm=5176.12901015.0.i12901015.65db525cQBSuI3&accounttraceid=1d7f8f3f083842dba12fa62662c34665asfk)
原因导致主要是如下函数导致的，由于是产商自己写的函数，无法通过源码分析具体功能，只能大致推测出功能，（后面可以在调试中看到读取了br0网卡）：
    v2 = getLanIfName();
    if ( getIfIp(v2, &v15) 
[可以仔细看看qemu虚拟机是如何实现网络交互通信的]
6，然后启动就能成功把http程序跑起来了。
# 用户模式下测试
我用的方式是手工通过bp改包的方式验证，也能通过脚本执行验证（下面qemu-system系统模式下会演示），用户模式下由于Libc基址容易出现问题（即使关了ASLR里面也看运气，真玄学），所以此处手工进行验证。
`不过有一篇文章可以参考下如何解决qemu-user用户模式下解决libc问题。`
1，访问web界面，程序已经跑起来了，只是缺少某些配置文件导致access error：
2，测试正常情况下，存在溢出位置处的目录  
3，给ssid传入垃圾数据。
4，程序崩溃，验证成功，此处存在溢出
# 用户模式下qemu+gdb调试
想看看异常退出发生了什么，可以进行调试看看。
1，调式 启动执行程序
    sudo chroot ./ ./qemu-arm-static -g 1234 ./bin/httpd
2，gdb远程连接
    gdb-multiarch -q ./bin/httpd
    set architecture arm    
    tar remote 127.0.0.1:1234   #我的IDA是在虚拟机本地的，你也可以和外面主机连，只要ping的通就可以   
    c   #c之后程序才会执行挂起