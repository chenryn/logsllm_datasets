### 作者：Skay@QAX A-TEAM  
### 原文链接：[原文链接]

## 一、调试环境
在尝试了几种常规的调试方法后，均未成功。随后发现`conf`目录下存在`jvm.config`文件，由于我们的启动脚本为`start-micro-quickstart`，因此将范围锁定在以下几个配置文件中。

最初的一个错误是修改了`D:\java\druid\druid run\apache-druid-0.20.0\conf\druid\single-server\micro-quickstart\router\runtime.properties`中的8888端口，该端口恰好也是我们的Web服务端口。尽管某些断点可以停住，但未能找到漏洞触发点。后来，在Smi1e师傅的指导下，意识到之前的修改有误。在此特别感谢Smi1e师傅的帮助！

## 二、漏洞分析
目前关于此漏洞的分析文章主要来自阿里云。接下来，我们将通过阅读理解的方式深入探讨。

### 1. 定位JavaScriptDimFilter
阿里云的文章一开始就提到了关键类`JavaScriptDimFilter`。由于对Java相关的JavaScript知识了解较少，看到`fasterxml`时首先想到的是反序列化问题。

Druid支持在运行时动态注入JavaScript，并且这些脚本不会在沙箱环境中执行，因此具有完全访问权限。默认情况下，JavaScript功能是禁用的。但在开发或受保护的生产环境中，可以通过设置`druid.javascript.enabled = true`来启用。这是漏洞的关键点之一，稍后会进一步讨论。

### 2. 关于JsonCreator注解、JsonProperty注解及CreatorProperty类型
文章中提到了两个注解和一个参数类型，这里需要补充一些Jackson的知识。

- **@JsonCreator**
  - 该注解用于指定对象反序列化时使用的构造函数或工厂方法。如果默认构造函数无法满足需求，或者需要在构造对象时执行特殊逻辑，可以使用此注解。它通常与`@JsonProperty`一起使用。
- **@JsonProperty**
  - 此注解作用于属性上，用于将属性名称序列化为另一个自定义的名称。例如，在Java中我们通常使用驼峰命名法，而在数据库设计中则可能使用下划线连接方式，这时就可以通过`@JsonProperty`进行映射。

回到`JavaScriptDimFilter`的构造函数，它是用`@JsonCreator`修饰的，这意味着在反序列化时，Jackson会调用这个构造方法。此外，`dimension`、`function`、`extractionFn` 和 `filterTuning` 都有`@JsonProperty`注解修饰，因此会被封装为`CreatorProperty`类型。而对于没有被标记`@JsonProperty`的`config`参数，则会创建一个名为`""`的`CreatorProperty`。

这里提出了一个问题：Jackson是如何将`org.apache.druid.js.JavaScriptConfig`注入到其中的？稍后回答。

### 3. Jackson解析用户输入

#### (1) Jersey的初始配置注入部分
- **HTTP Server**：采用Jersey框架，所有配置信息由Guice框架在启动时绑定注入。例如，`JavaScriptConfig`在初始化时会读取配置文件中的`druid.javascript.enabled`并将其绑定到`JavaScriptConfig`的`enabled`字段。这部分是非本地用户可控的。

#### (2) Jackson获取对应的`creatorProperty(JavaScriptConfig)`
文中直接定位到了`com.fasterxml.jackson.databind.deser.BeanDeserializer#_deserializeUsingPropertyBased`方法。该方法会根据JSON字符串中的键名查找对应的`creatorProperty`。具体实现是通过`findCreatorProperty`方法在`_propertyLookup`这个`HashMap`中查找键名对应的属性。对于没有用`@JsonProperty`注解修饰的`JavaScriptConfig`，其键名为`""`。如果JSON字符串中的键也为`""`，就能匹配上并取出`JavaScriptConfig`对应的`creatorProperty`。

#### (3) 反序列化相应参数
拿到对应的`creatorProperty`之后，就会根据类型将用户输入的JSON字符串中的键值反序列化为相应的参数。

#### (4) 触发漏洞
最后的漏洞利用点是当`config`为`true`时，绕过了对`config`的检查，从而执行JavaScript代码。

## 三、总结
该漏洞主要是利用了Jackson解析特性（解析name为`""`时），将值绑定到`JavaScriptDimFilter`对象的`config`参数上，导致`JavaScriptDimFilter`中的`function`属性中的JavaScript代码被执行。

## 四、补丁分析
最新版本的payload会报错，官方修复了这个问题。修复后的`this._propertyLookup`哈希表中只剩下了四个条目，直接去掉了`""`对应的解析，从而阻断了`JavaScriptConfig`对应的`creatorProperty`生成，使得后续链路中断，无法打开JavaScript执行开关。

实际上，还需要进一步跟踪Jackson的具体执行逻辑来了解具体的修复细节，但由于递归调用较为复杂，暂时先到这里。

## 五、参考链接
感谢Litch1 和 Smi1e 指点！