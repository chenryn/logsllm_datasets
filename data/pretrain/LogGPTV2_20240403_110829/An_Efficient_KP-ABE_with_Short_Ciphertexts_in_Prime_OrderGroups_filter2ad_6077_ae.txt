(cid:48)
1 · (νc0
(cid:48)
−a1·κ·yw·a2 , E0 = E
0 · νa1a2κ,
(cid:48)
˜h0+...+cn ˜hn+yw·cT ag)a1a2κ, cT ag.
This implicitly sets gt = gt(cid:48) · νa1a2κ where t(cid:48) is a ran-
domization parameter of a normal key. It should be noted
that tags in the challenge ciphertext and the key elements
of Axθ of the kth key are not correlated because of n-wise
independence. Hence, all tags in the challenge ciphertext
and the kth key are randomly distributed and do not corre-
late to each other. Therefore, if T equals to νc1+c2 , B has
properly simulated Gamek,θ−1. Otherwise, it has simulated
2
Gamek,θ, also properly.
Lemma 3.
(Semi-functional Security) Suppose there
exists a PPT algorithm A to distinguish between Gameq,Θq
and GameF inal with a non-negligible advantage . Then, we
can build an algorithm B breaking DBDH with the advan-
tage, , using A.
Proof: B takes (g, gc1 , gc2 , gc3 , T ) as an instance from DBDH.
It will simulate either Gameq,Θq or GameF inal based on the
value of T .
Setup: The algorithm selects a1, b, yv, yv1 , yv2 , yw, h0, ..., hn
from Zp, and sets
ga2 = gc2 , v = gyv , v1 = gyv1 , v2 = gyv2 , w = gyw ,
{ghi ; i ∈ [0, n]}
Then, it publishes the public parameters as follows
g, gb, gb·a1 , gb·a2 = (gc2 )b, w, gh0 , ..., ghn ,
1 , τ b
a1 , τ2 = (gc2 )yv2 , τ b
2 , e(g, g)α·a1b = e(gc1 , gc2 )a1b.
τ1 = v1
This implicitly sets α = c1 · c2 and a2 = c2. In this setting,
the simulator does not know M SK since it does not know
α.
Init: Before it generates any private key, B requests to the
adversary a target set of attributes S∗ which will be used to
generate the challenge ciphertext.
Phase I and II: For generating a semi-functional key, B ran-
domly selects (cid:126)µ1 from Zp such that Ax · (cid:126)µ1 = 0 for all x such
that ρ(x) ∈ S∗ and the ﬁrst coordinate of (cid:126)µ1 equals to 1.
This exists because S∗ does not satisfy an access structure of
the semi-functional key. Also, it generate a random vector
(cid:126)µ2 of which the ﬁrst coordinate equals to 0. It implicitly sets
α · (cid:126)µ = α · (cid:126)µ1 + (cid:126)µ2. For each x ∈ [m], it randomly generates
z1,x, z2,x, r1,x, r2,x, {kT agj,x;∀j ∈ [n]} from Zp.
Then, for normal type rows (i.e. ∀x s.t. ρ(x) ∈ S∗), it sets
D1,x = gAxµ2·a1 vrx , D2,x = g
−Axµ2 vrx
1 gz1,x ,
D3,x = (gb)
−z1,x , D4,x = vrx
D6,x = gr2,x·b, D7,x = gr1,x ,
2 gz2,x , D5,x = (gb)
−z2,x ,
{Kj,x = (hjh
−ρ(x)j
0
wkT agj,x )r1,x , kT agj,x; j ∈ [n]}
For the rest semi-functional rows, it randomly generate γ(cid:48)
x
for each x such that ρ(x) /∈ S∗. It sets
−γ(cid:48)
D1,x = gAxµ2·a1 (gc2 )
−Axµ2 (gc2 )
x vrx
−γ(cid:48)
x·a1 vrx ,
D2,x = g
1 gz1,x , D3,x = (gb)
−z1,x ,
Table 3: The Size of PK, SK and CT (bits)
Param AC16 [3] Ours Ours/AC16
d.159
PK d.201
d.224
d.159
SK d.201
d.224
d.159
CT d.1201
d.224
8,586
10,854
12,096
66,780
84,420
94,080
4,770
6,030
6,720
6,360
8,040
8,960
45,812
57,908
64,532
3,975
5,025
5,600
0.74
0.69
0.83
D4,x = vrx
2 gz2,x (gc1 )a1Axµ1 ga1·γ(cid:48)
x , D5,x = (gb)
−z2,x ,
D6,x = gr2,x·b, D7,x = gr1,x ,
{Kj,x = (hjh
−ρ(x)j
0
wkT agj,x )r1,x , kT agj,x; j ∈ [n]}
This implicitly sets γx = c1Axµ1 + γ(cid:48)
x.
Challenge: When A requests the challenge ciphertext for S∗
with two message M0 and M1, ﬁrst, B randomly selects β
from {0, 1}. It, then, randomly generates s1, κ and t from
Zp and sets s2 = c3 and κ = −c3 + κ(cid:48).
It, also, sets the
challenge ciphertext as follow.
C = MβT a1b, C1 = gbs1 (gc3 )b, C2 = gba1s1 , C3 = ga1s1 ,
1 (gc3 )yv (gc2 )yv2·κ(cid:48)
C4 = (gc2 )b·κ(cid:48)
, C5 = (gc2 )κ(cid:48)
, C6 = τ s1
,
C7 = τ s1·b
1
(gc3 )yv·b(gc2 )yv2·κ(cid:48)bw
−t,
E0 = gt, E1 = (hc0
0 hc1
1 ...hcn
n wcT ag)t
If T equals to gc1c2c3 , B has properly simulated Gameq,Θq .
Otherwise, a random will be added in Mβ, and it has simu-
2
lated GameF inal, also properly.
4.
IMPLEMENTATION AND BENCHMARK
We implement our scheme using PBC library [30]. We
mainly compare our scheme to Agrawal and Chase’s scheme
[3]. To compare the eﬃciency of our scheme, we convert our
scheme to asymmetric groups (Appendix 1) since Agrawal
and Chase’s construction is based only on asymmetric groups.
It should be noted that our scheme naturally extended to
asymmetric groups since it is constructed in symmetric groups,
but the other way around does not trivially hold. Our im-
plementation is executed on VirtualBox [1]. We allocate
4GB memory and 2 CPUs (Intel R(cid:13) CoreTMi7-4600U CPU @
2.10GHz x 2) to Ubuntu 16.04 LTS (64 bits).
We evaluate our scheme with the elliptic curves introduced
by Miyaji, Nakabayashi and Takano (MNT) with various
ﬁeld sizes (159, 201 and 224 bits) [31]. We are using a simple
policy “(A AND B) OR (E OR F)” for the ciphertext. A
user has four attributes (“A”, “B”, “C”, “D”). Therefore,
it can decrypt the ciphertext using attributes “A” and “B”.
The maximum number of attributes per a ciphertext is set
as ﬁve (n=5). We ignore the time to compute LSSS for
our policy. It is precomputed outside the implementation.
The time to compute LSSS also may be negligible in a real
application since the other operations such as pairings and
exponentiations over groups are much slower.
831Table 4: Comparison of pairing and exponentiation
Setup
KeyGen
Encrypt
Decrypt
AC16 [3]
Ours
2(n+6)(E1+E2)+P
(11+n)E1+(9+n)E2+P
(4nk+10k+8)E2
(2n+18)E1+ET
(6+6m)P +2mnE1
+2mET
(3n+13)kE2
(n+13)E1+ET
9P +(n+8)mE2
n: the maximum number of attributes per a ciphertext.
m: the number of attributes used for decryption.
k: the number of attributes that a user has.
E1: Exponentiation over G1, E2: Exponentiation over G2
ET : Exponentiation over GT
P : Pairing e : G1 × G2 → GT
Table 5: The Excution Time (ms)
Setup
KeyGen
Encrypt
Decrypt
Param AC16 [3] Ours Ours/AC16
d.159
d.201
d.224
d.159
d.201
d.224
d.159
d.201
d.224
d.159
d.201
d.224
266.5
344.1
439.4
407.4
526.7
671.2
16.8
22.9
29.7
105.6
137.3
176.5.7
91.6
118
145.3
416.2
538.2
670.6
10.6
14.5
18.1
89.6
117.7
145
0.34
0.34
0.33
1.02
1.02
1.00
0.63
0.63
0.61
0.85
0.86
0.82
The eﬃciency gap between ours and Agrawal and Chase’s
scheme increases as the maximum number of attributes per
a ciphertext n increases. Our scheme can save up 50 percent
of PK and 41 percent of SK if n is big enough. However,
even if we set n to be small, parameters of our scheme are
much shorter than those of Agrawal and Chase’s scheme.
Table 3 compares the sizes of keys and ciphertexts between
our scheme and Agrawal and Chase’s scheme when n is only
ﬁve. The column Param means the ﬁeld sizes of MNT.
We provide Tables 4 and 5 to show the theoretical and ex-
perimental improvements of our scheme. Table 4 shows the
number of operations to run Setup, KeyGen, Encrypt and De-
crypt of our scheme is signiﬁcantly less than those of Agrawal
and Chase’s scheme. We additionally provide the average
execution times of those algorithms in Table 5. On running
each algorithm 100 times, our scheme is faster Agrawal and
Chase’s scheme. In particular, compared with Agrawal and
Chase’s scheme, the Encrypt and Decrypt of our scheme is
reduced the execution times more than 35 percent and 14
percent, respectively. The time for Setup of our scheme is
much faster than that of Agrawal and Chase’s scheme. It
only takes 34 percent of their scheme.
5. CONCLUSION
In this paper, we provided a semi-adaptively secure KP-
ABE scheme in prime order groups. We achieved an eﬃcient
KP-ABE scheme with short ciphertexts. Our KP-ABE with
short ciphertexts shows additional desirable properties such
as supporting a large attribute universe and multi-use of
attributes under the standard assumption. In addition, it
has more eﬃcient features than the previous best scheme
from both time and space perspectives. We leave a question
on how to achieve all those properties in an adaptively secure
KP-ABE as an open problem.
Acknowledgments
Jongkil Kim is supported by Australia-India Strategic Re-
search Fund (AISRF).
6. REFERENCES
[1] VirtualBox. https://www.virtualbox.org/. Accessed:
2016-11-04.
[2] M. Abdalla and R. D. Prisco, editors. Security and
Cryptography for Networks - 9th International
Conference, SCN 2014, Amalﬁ, Italy, September 3-5,
2014. Proceedings, volume 8642 of Lecture Notes in
Computer Science. Springer, 2014.
[3] S. Agrawal and M. Chase. A study of pair encodings:
Predicate encryption in prime order groups. In
E. Kushilevitz and T. Malkin, editors, TCC, volume
9563 of LNCS, pages 259–288. Springer, 2016.
[4] N. Attrapadung. Dual system encryption via doubly
selective security: Framework, fully secure functional
encryption for regular languages, and more. In P. Q.
Nguyen and E. Oswald, editors, EUROCRYPT,
volume 8441 of Lecture Notes in Computer Science,
pages 557–577. Springer, 2014.
[5] N. Attrapadung. Dual system encryption framework
in prime-order groups. IACR Cryptology ePrint
Archive, 2015:390, 2015.
[6] N. Attrapadung and B. Libert. Functional encryption
for inner product: Achieving constant-size ciphertexts
with adaptive security or support for negation. In
P. Q. Nguyen and D. Pointcheval, editors, Public Key
Cryptography - PKC 2010, 13th International
Conference on Practice and Theory in Public Key
Cryptography, Paris, France, May 26-28, 2010.
Proceedings, volume 6056 of Lecture Notes in
Computer Science, pages 384–402. Springer, 2010.
[7] N. Attrapadung, B. Libert, and E. de Panaﬁeu.
Expressive key-policy attribute-based encryption with
constant-size ciphertexts. In Catalano et al. [12], pages
90–108.
[8] A. Beimel. Secure schemes for secret sharing and key
distribution. PhD thesis, PhD thesis, Israel Institute of
Technology, Technion, Haifa, Israel, 1996.
[9] D. Boneh and X. Boyen. Eﬃcient selective-id secure
identity-based encryption without random oracles. In
C. Cachin and J. Camenisch, editors, EUROCRYPT,
volume 3027 of Lecture Notes in Computer Science,
pages 223–238. Springer, 2004.
[10] D. Boneh, X. Boyen, and E.-J. Goh. Hierarchical
identity based encryption with constant size
ciphertext. In Cramer [17], pages 440–456.
[11] X. Boyen and B. Waters. Anonymous hierarchical
identity-based encryption (without random oracles).
In C. Dwork, editor, Advances in Cryptology -
CRYPTO 2006, 26th Annual International Cryptology
Conference, Santa Barbara, California, USA, August
20-24, 2006, Proceedings, volume 4117 of Lecture
Notes in Computer Science, pages 290–307. Springer,
2006.
[12] D. Catalano, N. Fazio, R. Gennaro, and A. Nicolosi,
editors. Public Key Cryptography - PKC 2011 - 14th