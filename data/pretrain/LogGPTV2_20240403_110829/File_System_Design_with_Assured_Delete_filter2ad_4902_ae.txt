puter, there is the danger that it could become compro-
mised, and divulge the master class secrets. Therefore,
it might be desirable to structure the file system so that
the keys are kept in a tamper-resistant coprocessor. To
recover from a disaster, G and the backup of the keys is
input into the secure coprocessor, which recovers the
class keys  (with the help of  ephemerizers). Let’s call
this trusted portion the KM (key manager).
The  KM  needs  no  permanent  state,  so  if  the  KM
fails, a new one can be substituted, and its database of
keys can be recovered from G, backup tapes, and inter-
action with ephemerizers.
The  file  system  communicates  securely  with  the
KM, either because of physical proximity, or through
an  established  security  association,  and  requests
decryption,  either  of  the  file  key  when  the  file  is
opened, or even the data (assuming a high bandwidth
path between the KM and the file system.)
The  KM  could  be  a  cryptographic  accelerator  card
attached to the file system, or it could be a free-stand-
ing machine in a data center, and it could act on behalf
of multiple file systems. It could also contain a hard-
ware random number generator, with which it might be
able to generate better file encryption keys than the file
system built on a general purpose machine.
7. Blind Decryption Functions
In  this  section  we  present  three  blind  decryption
functions. The first two use public keys for encryption,
so only decryption needs to be blinded. The third one
uses secret functions for both encryption and decryp-
tion,  so  encryption  (as  well  as  decryption)  requires
blinded interaction with the ephemerizer.
7.1  RSA Keys
This form is almost identical to blind signatures with
an RSA key [6]. The ephemerizer’s public RSA key is
(e,n). We assume all arithmetic is done mod n, so for
readability, we leave out “mod n”.
The file system encrypts M using the ephemerizer’s
public key by computing Me.
The  file  system,  FS,  gets  the  ephemerizer,  KM,  to
blindly decrypt Me, (i.e., retrieve M) by doing the fol-
lowing:
1. FS chooses random R
2. FS computes Re.
3. FS computes Me * Re and sends that to KM
4. KM raises Me * R to d to obtain Med * Red = M *
R.
5. FS divides by R to obtain M.
The file system never writes R onto nonvolatile stor-
age.
7.2  Blind encryption/decryption with a Diffie-
Hellman public key
This form of blind decryption does not have a similar
blind signature scheme, and it works with any Diffie-
Hellman  group,  including  ECC.  Assume  that  the
ephemerizer  has  a  public  Diffie-Hellman  key,  gx,
where the group G, including g and the order of G, is
known. The private key is x. 
To encrypt message M with the ephemerizer’s public
key, the file system performs the following:
1. FS  chooses  random  y,  and  computes  gy  and  gxy.
This is done by raising the publicly known base g
to y, and the ephemerizer’s public Diffie-Hellman
key gx to y.
2. FS uses gxy as a secret key to encrypt M, obtaining
{M}gxy. FS saves {M}gxy and gy, and discards y
and gxy.
To retrieve M, the FS asks the ephemerizer to blindly
decrypt {M}gxy by doing the following:
1. FS knows {M}gxy and gy.
2. FS chooses random z, and compute’s z’s exponen-
tiative inverse z-1. (What we refer to as exponenti-
ative inverse is more conventionally known as z’s
multiplicative inverse modulo the order of G.)
3. FS computes (gy)z , sends gyz to ephemerizer.
4. Ephemerizer applies its private key (x) and sends
5. FS raises  gxyz to z-1 to obtain gxy, with which it
to FS: gxyz 
can decrypt {M}gxy.
7.3  Blind encryption/decryption with a secret 
encryption function
This form of blind decryption does not have a similar
blind signature scheme (and couldn’t, because there is
no public key with which to validate a signature). We
use exponentiation mod p, a blinded version of Hell-
man-Pohlig [15]. Instead of a public key, the ephemer-
izer  has  two  secret  numbers,  x  and  x-1,  which  are
exponentiative inverses mod p. “Encrypt” will be done
by  exponentiating  with  x,  “decrypt”  with  x-1.  Blind
encryption  in  this  scheme,  as  with  blind  decryption,
requires the involvement of the ephemerizer. 
Blind  encryption  requires  authentication  of  the
ephemerizer. Unlike the other schemes, where the pub-
lic  encryption  key  is  certified  by  the  ephemerizer’s
long-term key (so there is implicit authentication of the
ephemerizer), in this scheme there is no certified public
key, so  authentication must be done explicitly during
the encryption request. The risks of asking for encryp-
tion from the wrong party are:
(cid:127) denial  of  service;  there  is  no  way  of  knowing
whether the encryption worked
(cid:127) using something that does not throw away keys
Authentication  of  the  ephemerizer  can  be  done
through  any  number  of  conventional  ways,  for
instance, using SSL.
To get the ephemerizer to blindly encrypt M:
1. Alice  chooses  random  z,  and  its  exponentiative
inverse z-1.
2. She  computes  Mz,  sends  it  to  the  ephemerizer,
with the request to “encrypt”.
3. The ephemerizer applies x and returns Mxz
4. Alice applies z-1 to obtain Mx.
To get the ephemerizer to blindly decrypt Mx:
1. Alice  chooses  random  y,  and  its  exponentiative
inverse y-1.
2. She  computes  Mxy,  sends  it  to  the  ephemerizer,
with the request to “decrypt”.
3. The ephemerizer applies x-1 and returns My
4. Alice applies y-1 to obtain M.
8. Conclusions
We presented three schemes for supporting assured
delete; time-based, custom classes, and individual file
on-demand.  These  schemes  can  be  combined.  In  the
same file system, some files can be stored with expira-
tion times, others in a class with a custom keys, others
that  can  be  deleted  individually,  on-demand,  in  an
assured  manner,  and  still  others  that  have  no  assured
deletion properties, so that even if deleted, they would
be  recoverable  as  long  as  they  still  exist  on  backup
media.
The  schemes  can  also  be  nested,  e.g.,  by  having  a
directory encrypted with a custom key, and individual
files in that directory also having expiration dates. 
For data with the securely deletable property, the file
system employs the services of remote ephemerizers,
whose sole purpose is to create, certify, advertise, and
manage  ephemeral  keys,  and  to  perform  decryptions
with  ephemeral  keys  upon  request.  A  file  is  recover-
able if and only if someone has the encrypted file, the
overall file system secret G, and a quorum of ephemer-
izers  still  retain  the  key  associated  with  that  class  of
file.
We  achieve  robustness  without  any  copying  of
ephemeral  keys  by  using  multiple 
independent
ephemerizers  with  independent  keys.  This  makes  an
ephemerizer sufficiently inexpensive, and easy to man-
age, that organizations might choose to run all or some
of the ephemerizers they depend on themselves.
The  communication  with  the  ephemerizer  is  done
through “blind decryption”, and the ephemerizer gains
no  information  from  this  exchange.  Therefore  the
ephemerizer can be a relatively untrusted third party, as
can the organization that manages the non-volatile stor-
age. Even if the ephemerizers and the storage organiza-
tion collude, they will not be able to read the data. The
cryptographic algorithm used for the public keys of the
ephemerizer needs to be resilient to chosen ciphertext
attack.
In all our variants, the only time it is necessary for a
file  system  to  communicate  with  an  ephemerizer  is
after  the  file  system  reboots.  The  ephemerizers  will
need to do one decryption to unlock all the time-based-
expiration  files  on  the  file  system,  one  decryption  to
unlock  all  the  on-demand-deletable  files  on  the  file
system, and one decryption for each file class with a
custom key.
Thus there is minimal performance overhead of our
scheme  beyond  simple  encrypted  storage.  There  are
cryptographic accelerators that can be used in the file
system that will work at disk speeds. And other than an
initial network-based interaction with a ephemerizer to
recover the set of file system master keys for file sys-
tem  classes,  there  is  no  further  interaction  with  the
ephemerizers after the file system boots.
This system assumes the file system is trusted to read
the data. If this is not a desired property, then an addi-
tional level of encryption can be done at the user level,
while the assured delete is still done at the file system
level.
Even if end-to-end encryption is layered over the file
system, doing ephemerization at the file system level,
as  we  do  in  this  paper,  achieves  great  performance
advantages.
9. Bibliography
1. Anderson, R., “Two remarks on public-key cryptology”,
Invited lecture, Fourth ACM Conference on Computer
and Communications Security, April, 1997.
2. Ateniese,  M.,  Fu,  K.,  “Improved  Proxy  re-encryption
schemes with applications to secure distributed stor-
age”, NDSS 2005.
3. Blaze,  M.,  “A  cryptographic  file  system  for  Unix”,
CCS, 1993.
4. Boneh, D., and Lipton, R., “A Revocable Backup Sys-
tem”, Usenix Security Symposium, 1996.
5. Camp, L. J. (1997, February). Web security & privacy:
An American perspective. ACM SIGCAS CEPC ’97
(Computer Ethics: Philosophical Inquiry).
6. Chaum,  D.,  “Blind  signatures  for  Untraceable  pay-
ments”, Advances in Cryptology - proceedings of
Crypto 82, 1983.
7. G. Di Crescenzo, N. Ferguson, R. Impagliazzo, and M.
Jakobsson, "How To Forget a Secret.", STACS '99.
LNCS 1563. Springer-Verlag, 1999. pp. 500--509. 
8. Damiano, E., De Capitani di Vimercati, S., Foresti, S.,
Jajodia, S., Paraboschi S., Samarati, P., “Key Manage-
ment for Multi-user Encrypted Databases”, Stora-
geSS’05, 2005.
9. Diffie, W., and Hellman, M., “New directions in cryp-
tography”, IEEE Transcations on Information Theory”,
1976.
10. Dingledine, R., Mathewson, N., Syverson, P. “Tor: The
Second-Generation Onion Router”. Usenix Security
Symposium, 2004.
11. Disappearing,  Inc.,  web  site:  http://www.specimen-
box.com/di/ab/hwdi.html
12. Fu,  K.,  “Group  sharing  and  random  access  in  crypto-
graphic storage file systems.” Master’s thesis, MIT,
1999.
13. Goh, E., Shacham, H., Modadugu, N., and Boneh, D., 
“SiRiUS: Security Remote Untrusted Storage”, NDSS,
2003.
14. Gutman, P, “Secure Deletion of Data from Magnetic and
Solid-State Memory”, Usenix Security Symposium,
1996.
15. Hellman,  M,  and  Pohlig,  S.,  U.S.  Patent  4,424,414,
1984.
16. Kallahala, M., Swaminathan, R., Fu, K., “Plutus: Scal-
able Secure File Sharing on Untrusted Storage”,
FAST03, Usenix Conference on File and Storage Tech-
nologies, 2003.
17. Kher, V., Kim, Y., “Securing Distributed Storage: Chal-
lenges, Techniques, and Systems”, StorageSS’05, 2005.
18. Naor,  M.,  and  Yung,  M.,  “Public-Key  Cryptosystems
Provably Secure Against Chosen Ciphertext Attacks”,
22nd Annual ACM Symposium on Theory of Comput-
ing, 1990.
19. Network  Computing  Reports,  “Tape  Encryption
Devices: Host-based vs. Appliance”, Nov 24, 2005.
20. Peterson,  Z.,  Burns,  R.,  Herring,  J.,  Stubblefield,  A.,
Rubin, A., “Secure Deletion for a Versioning File Sys-
tem”, FAST ‘05: 4th Usenix Conference on File and
Storage Technology, 2005.
21. Perlman,  R.,  “The  Ephemerizer:  Making  Data  Disap-
pear”, Journal of Information System Security, 2005. 
22. Perlman,  R.,  “Secure  Deletion  of  Data”,  3rd  Interna-
tional IEEE Security in Storage Workshop, 1995.
23. Rivest, R., Shamir, A., and Adleman, L., “A method for
obtaining digital signatures and public-key cryptosys-
tems”, Communications of the ACM, 1978.
24. Russinovich,  M.,  Solomon,  D.,  “Microsoft  Windows
Internals 4th Edition”, 2005.
25. A.  Shamir,  ``How  to  share  a  secret'',  CACM,  Vol.  22,
Nov. 1979.