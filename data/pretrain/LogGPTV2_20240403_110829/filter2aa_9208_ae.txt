variables, not set them.  If you want to test whether you can write,
either use file tests or try setting a dummy hash entry inside an \f(CW\*(C`eval\*(C'\fR,
which will trap the error.
.Sp
Note that functions such as \f(CW\*(C`keys\*(C'\fR and \f(CW\*(C`values\*(C'\fR may return huge lists
when used on large \s-1DBM\s0 files.  You may prefer to use the \f(CW\*(C`each\*(C'\fR
function to iterate over large \s-1DBM\s0 files.  Example:
.Sp
.Vb 6
\&    # print out history file offsets
\&    dbmopen(%HIST,'/usr/lib/news/history',0666);
\&    while (($key,$val) = each %HIST) {
\&        print $key, ' = ', unpack('L',$val), "\en";
\&    }
\&    dbmclose(%HIST);
.Ve
.Sp
See also AnyDBM_File for a more general description of the pros and
cons of the various dbm approaches, as well as DB_File for a particularly
rich implementation.
.Sp
You can control which \s-1DBM\s0 library you use by loading that library
before you call \fIdbmopen()\fR:
.Sp
.Vb 3
\&    use DB_File;
\&    dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.db")
\&        or die "Can't open netscape history file: $!";
.Ve
.IP "defined \s-1EXPR\s0" 8
.IX Item "defined EXPR"
.PD 0
.IP "defined" 8
.IX Item "defined"
.PD
Returns a Boolean value telling whether \s-1EXPR\s0 has a value other than
the undefined value \f(CW\*(C`undef\*(C'\fR.  If \s-1EXPR\s0 is not present, \f(CW$_\fR will be
checked.
.Sp
Many operations return \f(CW\*(C`undef\*(C'\fR to indicate failure, end of file,
system error, uninitialized variable, and other exceptional
conditions.  This function allows you to distinguish \f(CW\*(C`undef\*(C'\fR from
other values.  (A simple Boolean test will not distinguish among
\&\f(CW\*(C`undef\*(C'\fR, zero, the empty string, and \f(CW"0"\fR, which are all equally
false.)  Note that since \f(CW\*(C`undef\*(C'\fR is a valid scalar, its presence
doesn't \fInecessarily\fR indicate an exceptional condition: \f(CW\*(C`pop\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR when its argument is an empty array, \fIor\fR when the
element to return happens to be \f(CW\*(C`undef\*(C'\fR.
.Sp
You may also use \f(CW\*(C`defined(&func)\*(C'\fR to check whether subroutine \f(CW&func\fR
has ever been defined.  The return value is unaffected by any forward
declarations of \f(CW&func\fR.  Note that a subroutine which is not defined
may still be callable: its package may have an \f(CW\*(C`AUTOLOAD\*(C'\fR method that
makes it spring into existence the first time that it is called \*(-- see
perlsub.
.Sp
Use of \f(CW\*(C`defined\*(C'\fR on aggregates (hashes and arrays) is deprecated.  It
used to report whether memory for that aggregate has ever been
allocated.  This behavior may disappear in future versions of Perl.
You should instead use a simple test for size:
.Sp
.Vb 2
\&    if (@an_array) { print "has array elements\en" }
\&    if (%a_hash)   { print "has hash members\en"   }
.Ve
.Sp
When used on a hash element, it tells you whether the value is defined,
not whether the key exists in the hash.  Use \*(L"exists\*(R" for the latter
purpose.
.Sp
Examples:
.Sp
.Vb 6
\&    print if defined $switch{'D'};
\&    print "$val\en" while defined($val = pop(@ary));
\&    die "Can't readlink $sym: $!"
\&        unless defined($value = readlink $sym);
\&    sub foo { defined &$bar ? &$bar(@_) : die "No bar"; }
\&    $debugging = 0 unless defined $debugging;
.Ve
.Sp
Note:  Many folks tend to overuse \f(CW\*(C`defined\*(C'\fR, and then are surprised to
discover that the number \f(CW0\fR and \f(CW""\fR (the zero-length string) are, in fact,
defined values.  For example, if you say
.Sp
.Vb 1
\&    "ab" =~ /a(.*)b/;
.Ve
.Sp
The pattern match succeeds, and \f(CW$1\fR is defined, despite the fact that it
matched \*(L"nothing\*(R".  But it didn't really match nothing\*(--rather, it
matched something that happened to be zero characters long.  This is all
very above-board and honest.  When a function returns an undefined value,
it's an admission that it couldn't give you an honest answer.  So you
should use \f(CW\*(C`defined\*(C'\fR only when you're questioning the integrity of what
you're trying to do.  At other times, a simple comparison to \f(CW0\fR or \f(CW""\fR is
what you want.
.Sp
See also \*(L"undef\*(R", \*(L"exists\*(R", \*(L"ref\*(R".
.IP "delete \s-1EXPR\s0" 8
.IX Item "delete EXPR"
Given an expression that specifies a hash element, array element, hash slice,
or array slice, deletes the specified element(s) from the hash or array.
In the case of an array, if the array elements happen to be at the end,
the size of the array will shrink to the highest element that tests
true for \fIexists()\fR (or 0 if no such element exists).
.Sp
Returns each element so deleted or the undefined value if there was no such
element.  Deleting from \f(CW$ENV{}\fR modifies the environment.  Deleting from
a hash tied to a \s-1DBM\s0 file deletes the entry from the \s-1DBM\s0 file.  Deleting
from a \f(CW\*(C`tie\*(C'\fRd hash or array may not necessarily return anything.
.Sp
Deleting an array element effectively returns that position of the array
to its initial, uninitialized state.  Subsequently testing for the same
element with \fIexists()\fR will return false.  Note that deleting array
elements in the middle of an array will not shift the index of the ones
after them down\*(--use \fIsplice()\fR for that.  See \*(L"exists\*(R".
.Sp
The following (inefficiently) deletes all the values of \f(CW%HASH\fR and \f(CW@ARRAY:\fR
.Sp
.Vb 3
\&    foreach $key (keys %HASH) {
\&        delete $HASH{$key};
\&    }
.Ve
.Sp
.Vb 3
\&    foreach $index (0 .. $#ARRAY) {
\&        delete $ARRAY[$index];
\&    }
.Ve
.Sp
And so do these:
.Sp
.Vb 1
\&    delete @HASH{keys %HASH};
.Ve
.Sp
.Vb 1
\&    delete @ARRAY[0 .. $#ARRAY];
.Ve
.Sp
But both of these are slower than just assigning the empty list
or undefining \f(CW%HASH\fR or \f(CW@ARRAY:\fR
.Sp
.Vb 2
\&    %HASH = ();         # completely empty %HASH
\&    undef %HASH;        # forget %HASH ever existed
.Ve
.Sp
.Vb 2
\&    @ARRAY = ();        # completely empty @ARRAY
\&    undef @ARRAY;       # forget @ARRAY ever existed
.Ve
.Sp
Note that the \s-1EXPR\s0 can be arbitrarily complicated as long as the final
operation is a hash element, array element,  hash slice, or array slice
lookup:
.Sp
.Vb 2
\&    delete $ref->[$x][$y]{$key};
\&    delete @{$ref->[$x][$y]}{$key1, $key2, @morekeys};
.Ve
.Sp
.Vb 2
\&    delete $ref->[$x][$y][$index];
\&    delete @{$ref->[$x][$y]}[$index1, $index2, @moreindices];
.Ve
.IP "die \s-1LIST\s0" 8
.IX Item "die LIST"
Outside an \f(CW\*(C`eval\*(C'\fR, prints the value of \s-1LIST\s0 to \f(CW\*(C`STDERR\*(C'\fR and
exits with the current value of \f(CW$!\fR (errno).  If \f(CW$!\fR is \f(CW0\fR,
exits with the value of \f(CW\*(C`($? >> 8)\*(C'\fR (backtick `command`
status).  If \f(CW\*(C`($? >> 8)\*(C'\fR is \f(CW0\fR, exits with \f(CW255\fR.  Inside
an \f(CW\*(C`eval(),\*(C'\fR the error message is stuffed into \f(CW$@\fR and the
\&\f(CW\*(C`eval\*(C'\fR is terminated with the undefined value.  This makes
\&\f(CW\*(C`die\*(C'\fR the way to raise an exception.
.Sp
Equivalent examples:
.Sp
.Vb 2
\&    die "Can't cd to spool: $!\en" unless chdir '/usr/spool/news';
\&    chdir '/usr/spool/news' or die "Can't cd to spool: $!\en"
.Ve
.Sp
If the last element of \s-1LIST\s0 does not end in a newline, the current
script line number and input line number (if any) are also printed,
and a newline is supplied.  Note that the \*(L"input line number\*(R" (also
known as \*(L"chunk\*(R") is subject to whatever notion of \*(L"line\*(R" happens to
be currently in effect, and is also available as the special variable
\&\f(CW$.\fR.  See \*(L"$/\*(R" in perlvar and \*(L"$.\*(R" in perlvar.
.Sp
Hint: sometimes appending \f(CW", stopped"\fR to your message will cause it
to make better sense when the string \f(CW"at foo line 123"\fR is appended.
Suppose you are running script \*(L"canasta\*(R".
.Sp
.Vb 2
\&    die "/etc/games is no good";
\&    die "/etc/games is no good, stopped";
.Ve
.Sp
produce, respectively
.Sp
.Vb 2
\&    /etc/games is no good at canasta line 123.
\&    /etc/games is no good, stopped at canasta line 123.
.Ve
.Sp
See also \fIexit()\fR, \fIwarn()\fR, and the Carp module.
.Sp
If \s-1LIST\s0 is empty and \f(CW$@\fR already contains a value (typically from a
previous eval) that value is reused after appending \f(CW"\et...propagated"\fR.
This is useful for propagating exceptions:
.Sp
.Vb 2
\&    eval { ... };
\&    die unless $@ =~ /Expected exception/;
.Ve
.Sp
If \s-1LIST\s0 is empty and \f(CW$@\fR contains an object reference that has a
\&\f(CW\*(C`PROPAGATE\*(C'\fR method, that method will be called with additional file
and line number parameters.  The return value replaces the value in
\&\f(CW$@\fR.  ie. as if \f(CW\*(C`$@ = eval { $@\->PROPAGATE(_\|_FILE_\|_, _\|_LINE_\|_) };\*(C'\fR
were called.
.Sp
If \f(CW$@\fR is empty then the string \f(CW"Died"\fR is used.
.Sp
\&\fIdie()\fR can also be called with a reference argument.  If this happens to be
trapped within an \fIeval()\fR, $@ contains the reference.  This behavior permits
a more elaborate exception handling implementation using objects that
maintain arbitrary state about the nature of the exception.  Such a scheme
is sometimes preferable to matching particular string values of $@ using
regular expressions.  Here's an example:
.Sp
.Vb 9
\&    eval { ... ; die Some::Module::Exception->new( FOO => "bar" ) };
\&    if ($@) {
\&        if (ref($@) && UNIVERSAL::isa($@,"Some::Module::Exception")) {
\&            # handle Some::Module::Exception
\&        }
\&        else {
\&            # handle all other possible exceptions
\&        }
\&    }
.Ve
.Sp
Because perl will stringify uncaught exception messages before displaying
them, you may want to overload stringification operations on such custom
exception objects.  See overload for details about that.
.Sp
You can arrange for a callback to be run just before the \f(CW\*(C`die\*(C'\fR
does its deed, by setting the \f(CW$SIG{_\|_DIE_\|_}\fR hook.  The associated
handler will be called with the error text and can change the error
message, if it sees fit, by calling \f(CW\*(C`die\*(C'\fR again.  See
\&\*(L"$SIG{expr}\*(R" in perlvar for details on setting \f(CW%SIG\fR entries, and
\&\*(L"eval \s-1BLOCK\s0\*(R" for some examples.  Although this feature was meant
to be run only right before your program was to exit, this is not
currently the case\*(--the \f(CW$SIG{_\|_DIE_\|_}\fR hook is currently called
even inside \fIeval()\fRed blocks/strings!  If one wants the hook to do
nothing in such situations, put
.Sp
.Vb 1
\&        die @_ if $^S;
.Ve
.Sp
as the first line of the handler (see \*(L"$^S\*(R" in perlvar).  Because