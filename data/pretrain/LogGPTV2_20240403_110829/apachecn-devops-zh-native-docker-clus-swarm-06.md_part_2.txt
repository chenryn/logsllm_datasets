--env MYSQL_ROOT_PASSWORD=dockerswarm \
mysql:5.6
```
我们希望从集线器中拉出 MySQL 5.6，调用服务(稍后可通过指向其 VIP 的解析名称访问)`mysql`，为清晰起见将副本设置为一个，公开端口`3306`，指定专用网络 WordPress 和根密码，在我们的例子中是`dockerswarm`:
![Connecting services: A WordPress example](img/image_06_013.jpg)
有必要在几秒钟后从集线器中拉出 MySQL 映像，我们可以检查并看到，在我们的情况下，一个`mysql`容器被下载并放置在`node-1`上(实际上，如果没有不同的指定，大师们可以运行容器)，贵宾是 WordPress 网络上的`10.255.0.2`。我们可以通过以下命令获得这些信息:
```
docker service inspect mysql -f "{{ .Endpoint.VirtualIPs }}"
```
![Connecting services: A WordPress example](img/image_06_014.jpg)
我们现在有一个正在运行的 MySQL，我们只需要启动它并将其连接到 WordPress。
## 群体调度策略
恰好我们启动了一个服务，Swarm 安排容器在`node-1`上运行。Swarm 模式(截至目前，在编写 Docker 1.12 和 1.13-dev 时)只有一种可能的策略:传播。Spread 计算每个主机上的容器数量，并尝试将新创建的容器放置在负载较轻的主机(即容器较少的主机)上。尽管这一天只有一种传播策略可用，但 Swarm 提供了一些选项，允许我们以良好的精度过滤任务将在其上启动的主机。
这些选项被称为**约束**，当用`--constraint`实例化服务时，可以作为可选参数传递。
我们现在想启动 WordPress。我们决定在三个工人上而不是在主节点上强制执行三个容器，所以我们指定了一个约束。
约束是`--constraint` `node.KEY == VALUE`或`--constraint` `node.KEY != VALUE`的形式，有几种变体。操作员可以按节点 id、角色和主机名进行筛选。更有趣的是，正如我们在[第 5 章](04.html "Chapter 4. Creating a Production-Grade Swarm")、*管理集群*中看到的，可以通过`docker node update --label-add`命令将其添加到节点属性中来指定自定义标签。
| **键** | **表示** | **例** |
| `node.id` | 节点的标识 | `node.id == 3tqtddj8wfyd1dl92o1l1bniq` |
| `node.role` | 节点角色(经理、工作人员) | `node.role != manager` |
| `node.hostname` | 节点主机名 | `node.hostname == node-1` |
| `node.labels` | 标签 | `node.labels.type == database` |
## 现在，文字出版社
这里我们要对所有工人开始`wordpress`，所以我们说约束是`node.role != manager`(或者`node.role == worker`)。同样，我们调用服务，只需`wordpress,`将副本因子设置为`3`，暴露端口`80,`并对 WordPress 说 mysql 位于主机 MySQL 上(这在 Swarm 内部解决，指向 MySQL VIP):
```
docker service create \
--constraint 'node.role != manager' \
--name wordpress \
--replicas 3 \
-p 80:80 \
--network wordpress \
--env WORDPRESS_DB_HOST=mysql \
--env WORDPRESS_DB_USER=root \
--env WORDPRESS_DB_PASSWORD=dockerswarm \
wordpress
```
![Now, WordPress](img/image_06_015.jpg)
一段时间后，我们需要下载 WordPress 映像给工人，这样我们就可以检查是否一切正常。
![Now, WordPress](img/image_06_016.jpg)
我们现在连接到端口`80`上的一个主机，我们受到 WordPress 安装程序的欢迎。
![Now, WordPress](img/image_06_017.jpg)
在浏览器中执行几个步骤(如选择管理员用户名和密码)后，WordPress 就准备好了:
![Now, WordPress](img/image_06_018.jpg)
# 坞员复合与 Swarm 模式
许多开发人员喜欢使用 Compose 来建模他们的应用，例如类似于 WordPress 的应用。我们也这样做，并认为这是描述和管理 Docker 上的微服务的一种极好的方式。然而，在撰写本书时，在 Compose 中还没有对 Docker Swarm 模式的支持，所有容器都被安排在当前节点上。为了跨集群部署应用，我们需要使用栈的新捆绑特性。
在撰写本文时，栈仅在实验中可用，但我们在这里展示它们只是为了让您体验在 Docker 上部署微服务在(不远的)将来会是什么样子。
# 引入 Docker 栈
对于 Docker 来说，栈将是打包由多个容器制作的应用的标准方式。考虑一下超级膨胀的 WordPress 例子:你至少需要一个网络服务器和一个数据库。
开发人员通常通过创建 YAML 来用 Compose 描述这些应用，如图所示:
```
version: '2'
services:
  db:
    image: mysql:5.6
    volumes:
      - "./.data/db:/var/lib/mysql"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: dockerswarm
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    links:
      - db
    ports:
      - "8000:80"
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_PASSWORD: wordpress
```
然后，他们使用如下命令启动该应用:
```
docker-compose --rm -d --file docker-compose.yml up.
```
在这里，`mysql`和`wordpress`容器作为守护程序在开发人员连接的主机上被调度、拉取和启动。从 Docker 1.12 开始(1.12 中的实验)，将有可能将`mysql + wordpress`打包在单个文件包中，称为**分布式应用捆绑包** ( **DAB** )。
## 分布式应用包
所以，代替`docker-compose up`命令，你将运行:
```
docker-compose --file docker-compose.yml bundle -o wordpress.dab
```
该命令将输出另一个 JSON，称为`wordpress.dab`，这将是部署 Swarm 上 Compose 描述为 Swarm 服务的服务的起点。
本例中`wordpress.dab`的内容类似于:
```
{
 "Services": {
 "db": {
 "Env": [
 "MYSQL_ROOT_PASSWORD=dockerswarm",
 "MYSQL_PASSWORD=wordpress",
 "MYSQL_USER=wordpress",
 "MYSQL_DATABASE=wordpress"
 ],
 "Image": 
          "mysql@sha256:e9b0bc4b8f18429479b74b07f4
          d515f2ac14da77c146201a885c5d7619028f4d",
 "Networks": [
 "default"
 ]
 },
 "wordpress": {
 "Env": [
 "WORDPRESS_DB_HOST=db:3306",
 "WORDPRESS_DB_PASSWORD=wordpress"
 ],
 "Image": 
          "wordpress@sha256:10f68e4f1f13655b15a5d0415
          3fe0a454ea5e14bcb38b0695f0b9e3e920a1c97",
 "Networks": [
 "default"
 ],
 "Ports": [
 {
 "Port": 80,
 "Protocol": "tcp"
 }
 ]
 }
 },
 "Version": "0.1"
```
## Docker 部署
从生成的`wordpress.dab`文件开始，当连接到 Swarm 管理器时，开发人员可以用 deploy 命令启动栈:
```
docker deploy --file wordpress.dab wordpress1
```
现在，您将拥有两个名为`wordpress1_wordpress`和`wordpress1_db`的服务，按照惯例遵循 Compose 的语法传统。
![Docker deploy](img/image_06_019.jpg)