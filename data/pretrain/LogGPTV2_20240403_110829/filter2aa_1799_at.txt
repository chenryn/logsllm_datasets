make things easy, the standard function call processor ABI (application binary interface) is maintained 
across the boundary—for example, arguments are placed on the stack on x86, and RCX (technically R10 
due to the behavior of syscall
calls that occurred through int 0x2e, the iret instruction restores the processor state based on the 
syscall and sysenter, though, the processor once again leverages 
the MSRs and hardcoded registers we saw on entry, through specialized instructions called sysret and 
sysexit
I 
The Stack Segment (SS) is loaded from bits 48 to 63 in STAR, which Windows sets to 0x0023
(KGDT_R3_DATA).
I 
The Code Segment (CS) is loaded from bits 48 to 63 in STAR plus 0x10, which gives us 0x0033
(KGDT64_R3_CODE).
I 
The Instruction Pointer (RIP) is loaded from RCX.
I 
I 
kernel-space values.
Therefore, just like for system call entry, the exit mechanics must also clean up some processor state. 
Namely, RSP is restored to the Rsp
the entry code we analyzed, similar to all the other saved registers. RCX register is loaded from the 
saved Rip, R11 is loaded from EFlags, and the swapgs instruction is used right before issuing the sysret 
from the trap frame before the sysret instruction. Equivalent actions are taken on for sysexit and 
eret). Additionally, if CET is enabled, just like in the entry path, the shadow 
stack must correctly be synchronized on the exit path.
EXPERIMENT: Locating the system service dispatcher 
As mentioned, x64 system calls occur based on a series of MSRs, which you can use the rdmsr 
KGDT_R0_CODE (0x0010) 
and KGDT64_R3_DATA (0x0023).
lkd> rdmsr c0000081 
msr[c0000081] = 00230010`00000000
EXPERIMENT: Locating the system service dispatcher 
As mentioned, x64 system calls occur based on a series of MSRs, which you can use the rdmsr
KGDT_R0_CODE (0x0010) 
KGDT_R0_CODE (0x0010) 
KGDT_R0_CODE
and KGDT64_R3_DATA (0x0023).
lkd> rdmsr c0000081
msr[c0000081] = 00230010`00000000
CHAPTER 8 System mechanisms
95
Next, you can investigate LSTAR, and then use the ln
KiSystemCall64KiSystemCall64Shadow (for 
those that do):
lkd> rdmsr c0000082 
msr[c0000082] = fffff804`7ebd3740 
lkd> ln fffff804`7ebd3740 
(fffff804`7ebd3740)   nt!KiSystemCall64
lkd> rdmsr c0000084 
msr[c0000084] = 00000000`00004700
x86 system calls occur through sysenter, which uses a different set of MSRs, including 0x176, 
which stores the 32-bit system call handler:
lkd> rdmsr 176 
msr[176] = 00000000'8208c9c0 
lkd> ln 00000000'8208c9c0 
(8208c9c0)   nt!KiFastCallEntry
the int 0x2e handler registered in the IDT with the !idt 2e debugger command:
lkd> !idt 2e 
Dumping IDT: fffff8047af03000 
2e:
fffff8047ebd3040 nt!KiSystemService
You can disassemble the KiSystemService or KiSystemCall64 routine with the u 
nt!KiSystemService+0x227: 
fffff804`7ebd3267 4883c408        add     rsp,8 
fffff804`7ebd326b 0faee8          lfence 
fffff804`7ebd326e 65c604255308000000 mov   byte ptr gs:[853h],0 
fffff804`7ebd3277 e904070000      jmp     nt!KiSystemServiceUser (fffff804`7ebd3980)
while the MSR handler will fall in
nt!KiSystemCall64+0x227: 
fffff804`7ebd3970 4883c408        add     rsp,8 
fffff804`7ebd3974 0faee8          lfence 
fffff804`7ebd3977 65c604255308000000 mov   byte ptr gs:[853h],0 
nt!KiSystemServiceUser: 
fffff804`7ebd3980 c645ab02        mov     byte ptr [rbp-55h],2
This shows you that eventually both code paths arrive in KiSystemServiceUser, which then does 
most common actions across all processors, as discussed in the next section.
Next, you can investigate LSTAR, and then use the ln
KiSystemCall64
KiSystemCall64
KiSystemCall64
KiSystemCall64Shadow (for 
KiSystemCall64Shadow (for 
KiSystemCall64Shadow
those that do):
lkd> rdmsr c0000082
msr[c0000082] = fffff804`7ebd3740
lkd> ln fffff804`7ebd3740
(fffff804`7ebd3740)   nt!KiSystemCall64
lkd> rdmsr c0000084
msr[c0000084] = 00000000`00004700
x86 system calls occur through sysenter, which uses a different set of MSRs, including 0x176, 
sysenter, which uses a different set of MSRs, including 0x176, 
sysenter
which stores the 32-bit system call handler:
lkd> rdmsr 176
msr[176] = 00000000'8208c9c0
lkd> ln 00000000'8208c9c0
(8208c9c0)   nt!KiFastCallEntry
the int 0x2e handler registered in the IDT with the !idt 2e debugger command:
lkd> !idt 2e
Dumping IDT: fffff8047af03000
2e:
fffff8047ebd3040 nt!KiSystemService
You can disassemble the KiSystemService or KiSystemCall64 routine with the u 
nt!KiSystemService+0x227:
fffff804`7ebd3267 4883c408        add     rsp,8
fffff804`7ebd326b 0faee8          lfence
fffff804`7ebd326e 65c604255308000000 mov   byte ptr gs:[853h],0
fffff804`7ebd3277 e904070000      jmp     nt!KiSystemServiceUser (fffff804`7ebd3980)
while the MSR handler will fall in
nt!KiSystemCall64+0x227:
fffff804`7ebd3970 4883c408        add     rsp,8
fffff804`7ebd3974 0faee8          lfence
fffff804`7ebd3977 65c604255308000000 mov   byte ptr gs:[853h],0
nt!KiSystemServiceUser:
fffff804`7ebd3980 c645ab02        mov     byte ptr [rbp-55h],2
This shows you that eventually both code paths arrive in KiSystemServiceUser, which then does 
KiSystemServiceUser, which then does 
KiSystemServiceUser
most common actions across all processors, as discussed in the next section.
96 
CHAPTER 8 System mechanisms
Nonarchitectural system service dispatching
-
tion in the system service dispatch table. On x86 systems, this table is like the interrupt dispatch table 
described earlier in the chapter except that each entry contains a pointer to a system service rather 
than to an interrupt-handling routine. On other platforms, including 32-bit ARM and ARM64, the table 
is implemented slightly differently; instead of containing pointers to the system service, it contains 
offsets relative to the table itself. This addressing mechanism is more suited to the x64 and ARM64 
application binary interface (ABI) and instruction-encoding format, and the RISC nature of ARM pro-
cessors in general.
Note System service numbers frequently change between OS releases. Not only does 
Microsoft occasionally add or remove system services, but the table is also often random-
Regardless of architecture, the system service dispatcher performs a few common actions on 
all platforms:
I 
I 
If this thread belongs to a pico process, forward to the system call pico provider routine
(see Chapter 3, Part 1, for more information on pico providers).
I 
If this thread is an UMS scheduled thread, call KiUmsCallEntry to synchronize with the pri-
UmsPerformingSyscall 
I 
FirstArgument 
the system call number in SystemCallNumber.
I 
Call the shared user/kernel system call handler (KiSystemServiceStart), which sets the TrapFrame
I 
Enable interrupt delivery.
can be interrupted. The next step is to select the correct system call table and potentially upgrade the 
thread to a GUI thread, details of which will be based on the GuiThread and RestrictedGuiThread 
-
GdiBatchCount
stack. This is needed to avoid having each system call manually copy the arguments (which would 
as the kernel is accessing them. This operation is done within a special code block that is recognized 
by the exception handlers as being associated to user stack copying, ensuring that the kernel does not 
CHAPTER 8 System mechanisms
97
crash in the case that an attacker, or incorrectly written program, is messing with the user stack. Since 
system calls can take an arbitrary number of arguments (well, almost), you see in the next section how 
the kernel knows how many to copy.
Note that this argument copying is shallow: If any of the arguments passed to a system service 
points to a buffer in user space, it must be probed for safe accessibility before kernel-mode code can 
read and/or write from it. If the buffer will be accessed multiple times, it may also need to be captured, 
or copied, into a local kernel buffer. The responsibility of this probe and capture operation lies with each 
individual system call and is not performed by the handler. However, one of the key operations that the 
system call dispatcher must perform is to set the previous mode of the thread. This value corresponds 
to either KernelMode or UserMode and must be synchronized whenever the current thread executes 
a trap, identifying the privilege level of the incoming exception, trap, or system call. This will allow the 
system call, using ExGetPreviousMode, to correctly handle user versus kernel callers. 
system call tracing is enabled, the appropriate entry/exit callbacks are called around the system call. 
Alternatively, if ETW tracing is enabled but not DTrace, the appropriate ETW events are logged around 
-
KeSystemCalls variable in the PRCB, which 
is exposed as a performance counter that you can track in the Performance & Reliability Monitor.
At this point, system call dispatching is complete, and the opposite steps will then be taken as part 
of system call exit. These steps will restore and copy user-mode state as appropriate, handle user-mode 
APC delivery as needed, address side-channel mitigations around various architectural buffers, and 
eventually return with one of the CPU instructions relevant for this platform.
Kernel-issued system call dispatching
Because system calls can be performed both by user-mode code and kernel mode, any pointers, 
handles, and behaviors should be treated as if coming from user mode—which is clearly not correct.
To solve this, the kernel exports specialized Zw versions of these calls—that is, instead of 
NtCreateFile, the kernel exports ZwCreateFile. Additionally, because Zw functions must be manually 
exported by the kernel, only the ones that Microsoft wishes to expose for third-party use are present. 
ZwCreateUserProcess is not exported by name because kernel drivers are not expected to 
launch user applications. These exported APIs are not actually simple aliases or wrappers around the Nt 
versions. Instead, they are “trampolines” to the appropriate Nt system call, which use the same system 
call-dispatching mechanism.
Like KiSystemCall64 does, they too build a fake hardware trap frame (pushing on the stack the 
data that the CPU would generate after an interrupt coming from kernel mode), and they also disable 
interrupts, just like a trap would. On x64 systems, for example, the KGDT64_R0_CODE (0x0010) selec-
tor is pushed as CS, and the current kernel stack as RSP. Each of the trampolines places the system call 
number in the appropriate register (for example, EAX on x86 and x64), and then calls KiServiceInternal, 
which saves additional data in the trap frame, reads the current previous mode, stores it in the trap 
frame, and then sets the previous mode to KernelMode (this is an important difference).
98 
CHAPTER 8 System mechanisms
User-issued system call dispatching
As was already introduced in Chapter 1 of Part 1, the system service dispatch instructions for Windows 
executive services exist in the system library Ntdll.dll. Subsystem DLLs call functions in Ntdll to 
implement their documented functions. The exception is Windows USER and GDI functions, includ-
WriteFileWriteFile 
for more information on API redirection), which in turn calls the WriteFile
NtWriteFile function in Ntdll.dll, which in turn executes the appropriate instruction to cause a system 
service trap, passing the system service number representing NtWriteFile. 
The system service dispatcher in Ntoskrnl.exe (in this example, KiSystemService) then calls the real 
NtWriteFile-
tions, the system service dispatch calls the function in the loadable kernel-mode part of the Windows 
either Win32kbase.sys or Win32kfull.sys on Desktop systems, Win32kmin.sys on Windows 10X systems, 
or Dxgkrnl.sys if this was a DirectX call.
Call WriteFile(…)
Windows
application
Windows kernel APIs
Call NtWriteFile
Return to caller
WriteFile in
Kernelbase.dll
Call NtWriteFile
Dismiss trap
KiSystemService
in Ntoskrnl.exe
Do the operation
Return to caller
NtWriteFile in
Ntoskrnl.exe
Windows-
specific
Used by all
subsystems
Return to caller
NtWriteFile in
Ntdll.dll
Call BitBlt(…)
Application
Windows USER, GDI
or DirectX APIs
Call NtGdiBitBlt
Return to caller
Gdi32.dll
or User32.dll
Windows-
specific
Windows-
specific
User mode
Kernel mode
Return to caller
NtGdiBitBlt in
Win32u.dll
Software trap
Call NtGdiBitBlt
Routine
Dismiss trap
KiSystemService
in Ntoskrnl.exe
If not filtered call
NtGdiBitBlt
Return to caller
Service entry point
in Win32k.sys
Do the operation
Return to caller
NtGdiBitBlt in
Win32kfull.sys
Software trap
FIGURE 8-26 System service dispatching.
CHAPTER 8 System mechanisms
99
System call security
Since the kernel has the mechanisms that it needs for correctly synchronizing the previous mode for 
system call operations, each system call service can rely on this value as part of processing. We previ-
probe
buffer of any sort. By probe, we mean the following:
1.
Making sure that the address is below MmUserProbeAddress
2. 
Making sure that the address is aligned to a boundary matching how the caller intends to access
its data—for example, 2 bytes for Unicode characters, 8 bytes for a 64-bit pointer, and so on.
3.
If the buffer is meant to be used for output, making sure that, at the time the system call begins,
it is actually writable.
Note that output buffers could become invalid or read-only at any future point in time, and the 
system call must always access them using SEH, which we described earlier in this chapter, to avoid 
they will likely be imminently used anyway, SEH must be used to ensure they can be safely read. SEH 
must still be taken.
UserMode calls, and all 
that a system call must perform, however, because some other dangerous situations can arise:
I 
The caller may have supplied a handle to an object. The kernel normally bypasses all security
access checks when referencing objects, and it also has full access to kernel handles (which we
describe later in the “Object Manager” section of this chapter), whereas user-mode code does
not. The previous mode is used to inform the Object Manager that it should still perform access
checks because the request came from user space.
I 
OBJ_FORCE_ACCESS_CHECK need