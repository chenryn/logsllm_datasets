C
C
Bob (master)
B
Alice shares KL with Bob and not with Charlie
Bob shares KL with Alice and not with Charlie
Connection request as Bob
Accept connection with Bob
CM = rand(16)
Auth
RS = HL(KL, CM , BTADDS)
Session key negotiation and secure link activation
Charlie impersonates Bob (the master)
Fig. 2: BIAS master impersonation attack on Bluetooth legacy
authentication procedure. Charlie establishes a connection with
Alice pretending to be Bob. Charlie sends CM to Alice, gets RS
from Alice. As the Bluetooth standard does not mandate to use
the legacy authentication procedure mutually while establishing
a secure connection, Alice does not have to authenticate that
Charlie knows KL.
A. BIAS Attacks on Legacy Secure Connections
Anytime Alice (slave) and Bob (master) want to establish
a secure connection they use a procedure to authenticate KL,
and the standard deﬁnes such procedure as legacy authen-
tication procedure [6, p. 558]. The procedure is described
in Figure 10 and works as follows. The master computes
and sends CM to the slave. The slave computes the response
RS = HL(KL, CM , BTADDS), and sends it to the master.
The master then computes a response using the same function
with the same inputs, and compares it against RS. If the values
are equal, then the master concludes that he is sharing the
same KL with the slave.
The legacy authentication procedure provides unilateral
authentication. When Alice and Bob are pairing such procedure
is used two times to achieve mutual authentication, i.e., Alice
authenticates Bob and then Bob authenticates Alice. A central
issue is that the Bluetooth standard does not require to use
the legacy authentication procedure mutually during secure
connection establishment, see [6, p. 559] and [6, p. 1671]. From
our experiments, presented in Section VII, we conﬁrm that all
Legacy Secure Connections devices that we tested are using
the legacy authentication procedure unilaterally during secure
connection establishment as only the master authenticates the
slave. Thus, if Charlie can impersonate the master, then he can
complete secure connection establishment without having to
authenticate to the slave.
Charlie impersonates Bob (master), and completes the secure
connection establishment with Alice as described in Figure 2.
Connection request to Alice
Slot oﬀset
Role switch request as Alice
Accepted role switch
Charlie is the master
Accept connection as Alice
CM = rand(16)
Switch
Auth
RS = HL(KL, CM , BTADDS)
Session key negotiation and secure link activation
Charlie impersonates Alice (the slave)
Fig. 3: BIAS slave impersonation attack on Bluetooth legacy
authentication procedure. Bob requests a connection to Charlie
who is impersonating Alice, and Charlie requests a role switch
before accepting the connection request. Bob accepts the
role switch and becomes the network slave (prover). Charlie,
the network master (veriﬁer), sends CM to Bob, and Bob
authenticates to Charlie by sending him RS. Bob does not have
to authenticate that Charlie knows KL.
Charlie requests a connection to Alice pretending to be Bob,
and Alice accepts the connection. Charlie connects as Bob
by forging Bob’s addresses and capabilities that are public.
Charlie sends CM to Alice, and Alice computes RS based
on KL, CM , and BTADDS, and sends RS to Charlie. Then,
Charlie completes the session key negotiation and secure link
activation as Bob, without having to prove he owns KL to
Alice.
Charlie can also impersonate the slave by maliciously taking
advantage of Bluetooth’s role switch procedure. Bluetooth
uses a master slave medium access protocol, to keep the
master and the slave synchronized. The standard speciﬁes
that the master and slave roles can be switched anytime after
baseband paging is completed [6, p. 595]. This is problematic
because Charlie can use this to impersonate the slave device by
initiating a role switch and become the master (veriﬁer) before
the unilateral authentication procedure is started, and then
complete the secure connection establishment without having
to authenticate. In our experiments we are able to reliably
perform this adversarial role switch for all except one of our
tested devices (more details in Section VII). This feature of
Bluetooth was never investigated in a security context, and is
thus an entirely novel attack technique.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
552
Charlie impersonates Alice (slave), and completes the secure
connection establishment with Bob as in Figure 3. Bob requests
a connection to Charlie (posing as Alice). Charlie sends a slot
offset synchronization packet and then a role switch request to
Bob. The role switch procedure is not authenticated, but Bob
has to accept the request to be standard compliant. Charlie (the
new master), accepts the connection and immediately starts the
unilateral legacy authentication procedure by sending CM to
Bob. Bob authenticates to Charlie by sending him RS. Then,
Charlie completes the session key negotiation and secure link
activation as Alice, without having to authenticate KL to Bob.
In summary, Charlie is capable of impersonating both the
master and slave for every possible usage of unilateral legacy
authentication. The root problems are that the speciﬁcation of
Bluetooth Legacy Secure Connections does not mandate mutual
authentication for secure connection establishment and that role
switch is allowed anytime after baseband paging. From our
experiments we see that the legacy authentication procedure is
used mutually while pairing, e.g., Alice authenticates to Bob
ﬁrst and then Bob authenticates to Alice. This does not protect
against our impersonation attacks, as they are conducted during
secure connection establishment and not during pairing.
B. BIAS Downgrade Attacks on Secure Connections
In this section we describe how Charlie can impersonate
Secure Connections devices using standard compliant down-
grade attacks. Secure Connections uses stronger cryptographic
primitives than Legacy Security Connections, and is considered
the most secure way to pair and establish secure connections.
All Secure Connections devices that we test are vulnerable to
our downgrade attacks (see Section VII).
Secure Connections provides a mutual authentication pro-
cedure, known in the standard as the secure authentication
procedure [6, p. 559]. The procedure is described in Figure 11
and works as follows. Alice (slave) and Bob (master) exchange
CS and CM in no particular order. Both then compute
RM(cid:2)RS = HS(KL, BTADDM , BTADDS, CM , CS),
Alice (slave)
A
Charlie (master)
C
Alice shares KL with Bob and not with Charlie
Alice and Bob support Secure Connections
Secure Connections not supported
Secure Connections supported
Downgrade to Legacy Secure Connections
Connection request as Bob
Accept connection with Bob
CM = rand(16)
Auth
RS = HL(KL, CM , BTADDS)
Session key negotiation and secure link activation
Charlie impersonates Bob (the master)
Fig. 4: BIAS master impersonation downgrade attack on
Bluetooth secure authentication procedure. Secure connection
establishment, including feature exchange, is neither encrypted
nor integrity protected. During feature exchange Charlie, as
Bob, declares that Secure Connections is not supported and
Alice declares that Secure Connections is supported. The secure
connection establishment is downgraded to Legacy Secure
Connections. Charlie establishes a connection with Alice as
Bob. Charlie, sends CM to Alice, and gets RS from Alice.
Charlie starts the session key negotiation without having to
authenticate to Alice.
using the HS() hash function. The Bluetooth standard is not
quite clear regarding the order of the responses. In [6, p. 559]
the slave should send RS ﬁrst, but in [6, p. 1673] the master
sends RM ﬁrst. In our experiments, the slave always sends RS
ﬁrst and we adopt this convention. After the mutual computation
of the responses, Alice sends RS to Bob and Bob sends RM
to Alice. Alice and Bob verify that the responses that they get
match the ones that they compute. If the both veriﬁcations are
successful then KL is mutually authenticated.
Our BIAS attack on Secure Connections is enabled by
a downgrade vulnerability in the speciﬁcation of Secure
Connections. In particular, the Bluetooth standard does not
require two devices that used Secure Connections for pairing
to always use Secure Connections for secure connection
establishment, and does not protect the negotiation of Secure
Connections. In other words, Alice and Bob, even if they
support and they already paired using Secure Connections, can
establish secure connections using Legacy Secure Connections.
Charlie takes advantage of these vulnerabilities to pretend
that the impersonated device (either Alice or Bob) does not
support Secure Connections to downgrade secure connection
establishment with the victim to Legacy Secure Connections. As
a result of the downgrade, Charlie and the victim use the legacy
authentication procedure rather than the secure authentication
procedure, and Charlie can bypass secure connection establish-
ment authentication as in IV-A. In the following paragraphs
we describe the master and slave downgrade attacks on Secure
Connections in detail.
Assuming that Alice and Bob have already paired and they
support Secure Connections, then Charlie impersonates Bob
(master) as described in Figure 4. During the feature exchange
phase Charlie, pretending to be Bob, tells Alice that Secure
Connections is not supported. Even if Alice tells Charlie
that she does support Secure Connections, secure connection
establishment is downgraded to Legacy Secure Connections.
Then, Charlie establishes a connection with Alice as Bob.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
553
Charlie (slave)
C
Bob (master)
B
Alice (slave)
A
Charlie (master)
C
Bob shares KL with Alice and not with Charlie
Alice shares KL with Bob and not with Charlie
Alice and Bob support Secure Connections
Secure Connections supported
Secure Connections not supported
Downgrade to Legacy Secure Connections
Connection request to Alice
Slot oﬀset
Role switch request as Alice
Accepted role switch
Charlie is the master
Accept connection as Alice
CM = rand(16)
Alice and Bob support Secure Connections
Connection request as Bob
Accept connection with Bob
CM = rand(16)
CS = rand(16)
RS
Role switch request
Accepted role switch
Auth
Switch
Switch
Charlie is the slave, Alice expects RS from Bob
RS (reﬂected)
Session key negotiation and secure link activation
Auth
RS = HL(KL, CM , BTADDS)
Charlie impersonates Bob (the master)
Session key negotiation and secure link activation
Charlie impersonates Alice (the slave)
Fig. 5: BIAS slave impersonation downgrade attack on
Bluetooth secure authentication procedure. Secure connection
establishment, including feature exchange, is neither encrypted
nor integrity protected. During feature exchange Charlie, as
Alice, declares that Secure Connections is not supported
and Bob declares that Secure Connections is supported. The
secure connection establishment is downgraded to Legacy
Secure Connections. Bob establishes a connection with Charlie.
Charlie, sends CM to Bob, and gets RS from Bob. Charlie
starts the session key negotiation without having to authenticate
to Bob.
Charlie, being the only veriﬁer, performs unilateral legacy
authentication, and he establishes a secure connection without
having to authenticate to Alice.
Charlie impersonates Alice (slave) as described in Figure 5.
During the feature exchange phase, Bob tells Alice that he
supports Secure Connections. Charlie as Alice, tells Bob that
he does not support Secure Connections. The secure connection
establishment is downgraded to Legacy Secure Connections.
Bob sends a connection request to Alice and Charlie performs
a role switch and becomes the master, before accepting the
connection request. Charlie, being the only veriﬁer, performs
unilateral legacy authentication, and he establishes a secure
connection without having to authenticate to Bob.
Fig. 6: BIAS master impersonation reﬂection attack on Blue-
tooth secure authentication procedure. Charlie establishes a
connection with Alice, pretending to be Bob. Charlie sends
CM to Alice, and Alice sends CS to Charlie. Alice computes
RM and RS and sends RS to Charlie. Charlie performs a
role switch, Alice becomes the master and expects RS from
Charlie. Charlie reﬂects RS to Alice and completes the secure
authentication procedure without possessing KL.
V. BIAS REFLECTION ATTACKS ON SECURE CONNECTIONS
We now present another (alternative) way to attack Secure
Connections authentication using reﬂection attacks. In a reﬂec-
tion attack, the attacker tricks the victim into answering his own
challenge and giving the response to the attacker. The attacker
then authenticates to the victim by reﬂecting (sending back)
the response. We note that while we interpret the standard as
not protecting against reﬂection attacks, we do not present an
implementation as part of this work.
Our reﬂection attacks assume that Charlie is able to switch
role during the secure authentication procedure after receiving a
response from the remote victim. The Bluetooth standard allows
role switching anytime after baseband paging [6, p. 595], but
it is not clear about the possibility to role switch in the middle
of an authentication procedure. In the rest of this section we
describe what would happen if this is the case. In the following,
we assume that the slave always sends R ﬁrst as in [6, p. 559].
Figure 6 describes how Charlie reﬂects RS back to Alice
(slave), while impersonating Bob (master). Charlie sends
a connection request to Alice pretending to be Bob, and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:45 UTC from IEEE Xplore.  Restrictions apply. 
554
Charlie (slave)
C
Bob (master)
B
Bob shares KL with Alice and not with Charlie
Alice and Bob support Secure Connections
Connection request to Alice
Slot oﬀset
Role switch request as Alice
Accepted role switch
Charlie is the master
Accept connection
CS = rand(16)
CM = rand(16)
RS
Role switch request
Accepted role switch
Auth
Charlie is the slave, Bob expects RS from Alice
RS (reﬂected)
Session key negotiation and secure link activation
Charlie impersonates Alice (the slave)
Fig. 7: BIAS slave impersonation reﬂection attack on Bluetooth
secure authentication procedure. Bob sends a connection
request to Alice. Charlie, who impersonates Alice, requests
a role switch before accepting the connection request. Bob
accepts the role switch and Charlie becomes the master and
connects with Bob. Charlie sends CM to Bob, and Bob sends
CS to Charlie. Bob computes RM and RS and sends RS to
Charlie. Charlie becomes the slave by performing another
role switch, reﬂects RS to Bob and completes the secure
authentication procedure without possessing KL.
Alice accepts the connection. Charlie sends CM to Alice,
and Alice sends CS to Charlie. The values and the ordering
of the challenges do not inﬂuence the effectiveness of our
attacks. Alice computes RM and RS using HS as described
in Section IV-B, but Charlie cannot compute such responses
because he does not know KL. Right after Alice sends RS to
Charlie, Charlie sends a role switch request to Alice, Alice
accepts the role switch and Charlie becomes the new slave.
Now Alice, the new master, expects RS from Charlie, thus