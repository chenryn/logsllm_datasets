# 谈谈Office Moniker类漏洞和公式编辑器类漏洞
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在近几年出现的诸多office漏洞中，有两类漏洞是很值得谈谈的，第一类是Moniker导致的逻辑漏洞，第二类是公式编辑器漏洞。
对于第一类漏洞，其重点在于攻击者和微软安全团队之间的攻防过程，了解这类漏洞攻防过程对威胁追踪与研究较有益处：
  1. 第一回合：CVE-2017-0199，用URL Moniker加载远程HTA文件实现远程代码执行；
  2. 第二回合：CVE-2017-8570，用CompositeMoniker、FileMoniker、NewMoniker、scriptletfile实现远程代码执行；
  3. 第三回合：CVE-2017-8759，用office文档加载.Net组件漏洞，实现远程代码执行；
  4. 第四回合：CVE-2018-8174，用office文档加载IE VBScript组件漏洞，实现远程代码执行；
  5. 第五回合：CVE-2020-0674，用office文档加载IE JavaScript组件漏洞，实现远程代码执行。
对于第二类漏洞，其难点在于对相似漏洞之间的区分。从CVE-2017-11882开始，到CVE-2018-0802，再到CVE-2018-0798，三个都是非常相似的漏洞，在静态层面不容易区分，本文将分享一个在动态层面区分它们的方法。
下面跟随笔者一起来看一下这两类漏洞。
## Moniker类漏洞
###  第一回合：CVE-2017-0199
2017年4月7日，著名office漏洞研究员李海飞发布了一篇在野0day攻击预警，首度披露了CVE-2017-0199漏洞的在野攻击。随后，2017年4月11日和12日，FireEye连发两篇文章，披露了他们捕获到的CVE-2017-0199漏洞样本细节。后续的披露表明这几篇文章中披露的漏洞是一种借助URL
Moniker特性加载远程hta文件的新型漏洞，这是一个由于开发者对office文件加载机制设计不合理导致的逻辑漏洞，且要求触发环境安装IE10/IE11。漏洞触发过程不需要用户交互，但在触发的过程中会弹出一个对话框，不点击或者点击任意该对话框的按钮都不影响执行过程，对话框样式如下：
该漏洞的发现者之一李海飞曾经在Syscan360 2017会议上做过题为《Moniker Magic: Running Scripts Directly
in Microsoft Office》的演讲，里面详细介绍了CVE-2017-0199的细节，包括：
  1. 微软在CVE-2017-0199的补丁中修复了两个漏洞，分别是被在野利用的RTF URL Moniker加载远程HTA文件的远程代码执行漏洞，和李海飞独立发现的PPSX Script Moniker远程代码执行漏洞；
  2. office安全团队在这两个漏洞的基础上设计了一类针对Moniker的黑名单机制，禁用了一些他们觉得不安全的Moniker。
Moniker本身是office的一个特性，可以用来链接一些本地或远程对象，其本身不属于漏洞，漏洞发生在office软件对远程链接的文件的执行策略上。譬如，如果远程加载的是一个Excel文件，直接打开没问题；但如果加载的是HTA文件和Script这类脚本文件时，直接执行就存在问题了，导致了漏洞。
###  第二回合：CVE-2017-8570
在对CVE-2017-0199补丁的研究过程中，李海飞发现（上面也已经提到）：
  * office安全团队在这CVE-2017-0199的补丁中设计了一类针对Moniker的黑名单机制，禁用了一些他们觉得不安全的Moniker。
于是他开始寻找那些还没有被禁用的Moniker，尝试用那些没有被禁用的Moniker构造出另一个逻辑漏洞，结果确实找到一个，即CVE-2017-8570。
在CVE-2017-0199中，用到的Moniker是下面这两个：
    3050F4D8-98B5-11CF-BB82-00AA00BDCE0B // htafile
    06290BD3-48AA-11D2-8432-006008C3FBFC // scriptlet(or ScriptMoniker)
而在CVE-2017-8570中，用到的Moniker是下面这几个：
    00000309-0000-0000-C000-000000000046 // CompositeMoniker
    00000303-0000-0000-C000-000000000046 // FileMoniker
    ECABAFC6-7F19-11D2-978E-0000F8757E2A // NewMoniker
    06290BD2-48AA-11D2-8432-006008C3FBFC // scriptletfile(or ScripletFactory)
可以看到CVE-2017-8570利用未被加入黑名单的Moniker绕过了CVE-2017-0199的补丁。
不过，许多分析过CVE-2017-8570的读者可能会观察到一个奇怪的现象：漏洞中触发时script脚本中的代码会被执行两次。这是为什么呢？原来，在这个漏洞的触发逻辑中，会涉及到wwlib.dll库中的一个函数调用，该函数内部会顺序调用ole32!CDefLink::BindToSource和ole32!CDefLink::Update两个函数，如下（以office
2010为例）：
而这两个函数最终都会调用kernel32!CreateProcessW创建进程，所以script脚本中的代码会被执行两次。其中ole32!CDefLink::BindToSource创建进程的栈回溯如下：
    0:000> k 50
    ChildEBP RetAddr  
    0013a5b4 729cd2f5 kernel32!CreateProcessW
    0013a63c 729cd5f7 wshom!CreateNewProcessW+0x6f
    0013a69c 76da3e75 wshom!CWshShell::Exec+0x19a
    0013a6bc 76da3cef OLEAUT32!DispCallFunc+0x165
    0013a74c 729d0267 OLEAUT32!CTypeInfo2::Invoke+0x23f
    ...cut...
    0013ae9c 7705b5dc comsvcs!CNewMoniker::BindToObject+0x14f
    0013aed0 770c3cc6 ole32!CCompositeMoniker::BindToObject+0x105 [d:\w7rtm\com\ole32\com\moniker2\ccompmon.cxx @ 1104]
    0013af3c 68ee87ce ole32!CDefLink::BindToSource+0x1bf [d:\w7rtm\com\ole32\ole232\stdimpl\deflink.cpp @ 4637]
    0013af80 68a61429 wwlib!wdGetApplicationObject+0x69230 // 第一处调用
    0013b010 68a23b2c wwlib!DllGetLCID+0x4753b3
    ...cut...
而ole32!CDefLink::Update创建进程的栈回溯如下：
    0:000> k 50
    ChildEBP RetAddr  
    0013a57c 729cd2f5 kernel32!CreateProcessW
    0013a604 729cd5f7 wshom!CreateNewProcessW+0x6f
    0013a664 76da3e75 wshom!CWshShell::Exec+0x19a
    0013a684 76da3cef OLEAUT32!DispCallFunc+0x165
    0013a714 729d0267 OLEAUT32!CTypeInfo2::Invoke+0x23f
    ...cut...
    0013ae68 7705b5dc comsvcs!CNewMoniker::BindToObject+0x14f
    0013ae9c 770c3c55 ole32!CCompositeMoniker::BindToObject+0x105 [d:\w7rtm\com\ole32\com\moniker2\ccompmon.cxx @ 1104]
    0013af08 7710f7ee ole32!CDefLink::BindToSource+0x14e [d:\w7rtm\com\ole32\ole232\stdimpl\deflink.cpp @ 4611]
    0013af30 7710f42a ole32!CDefLink::Update+0x62 [d:\w7rtm\com\ole32\ole232\stdimpl\deflink.cpp @ 5347]
    0013af44 68ee8830 ole32!CDefLink::Update+0x33 [d:\w7rtm\com\ole32\ole232\stdimpl\deflink.cpp @ 2695]
    0013af80 68a61429 wwlib!wdGetApplicationObject+0x69292 // 第二处调用 
    0013b010 68a23b2c wwlib!DllGetLCID+0x4753b3
    ...cut...
###  第三回合：CVE-2017-8759
在CVE-2017-8570漏洞被修复后，累计有如下这些Moniker被加入黑名单：
    3050F4D8-98B5-11CF-BB82-00AA00BDCE0B // htafile
    06290BD3-48AA-11D2-8432-006008C3FBFC // scriptlet(or ScriptMoniker)
    00000309-0000-0000-C000-000000000046 // CompositeMoniker
    00000303-0000-0000-C000-000000000046 // FileMoniker
    ECABAFC6-7F19-11D2-978E-0000F8757E2A // NewMoniker
    06290BD2-48AA-11D2-8432-006008C3FBFC // scriptletfile(or ScripletFactory)
在前面几个Moniker不能使用之后，攻击者又注意到了下面这个Moniker：
    ecabb0c7-7f19-11d2-978e-0000f8757e2a // SOAPMoniker
SOAP
Moniker可以用来加载一个远程的SOAP配置文件，当Word进程远程加载这个配置文件时，.Net组件会被加载用来解析对应的配置文件，并按照配置自动生成一个C#文件，再自动将该C#文件编译得到一个动态链接库并执行。攻击者借助.Net
SOAP
WSDL模块中的一个代码注入漏洞（CVE-2015-8759），将恶意脚本代码注入到了待编译的C#文件中，从而让编译得到的动态链接库包含恶意代码并自动执行。
从CVE-2017-8759开始，攻击者开始借助office组件与其他Windows组件之间的交互进行攻击。.Net的漏洞本身不属于office的范围，却可以借助office文档进行触发，这种攻击方式当时给笔者留下了深刻的印象。
###  第四回合：CVE-2018-8174
CVE-2017-8759被修复后，Moniker黑名单又得到了更新：
    3050F4D8-98B5-11CF-BB82-00AA00BDCE0B // htafile
    06290BD3-48AA-11D2-8432-006008C3FBFC // scriptlet(or ScriptMoniker)
    00000309-0000-0000-C000-000000000046 // CompositeMoniker
    00000303-0000-0000-C000-000000000046 // FileMoniker
    ECABAFC6-7F19-11D2-978E-0000F8757E2A // NewMoniker
    06290BD2-48AA-11D2-8432-006008C3FBFC // scriptletfile(or ScripletFactory)
    ecabb0c7-7f19-11d2-978e-0000f8757e2a // SOAPMoniker
在上面这些Moniker都不可用之后，攻击者又想出了一种新的攻击方式：借助URL