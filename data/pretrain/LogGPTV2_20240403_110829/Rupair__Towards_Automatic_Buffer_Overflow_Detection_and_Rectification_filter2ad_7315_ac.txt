the semantic equivalence of the rectified programs with the original
ones, Rupair makes use of two strategies to validate the rectified
programs: regression and trace validation.
Regression. For the rectified programs, Rupair performs regres-
sion testing using the test cases distributed with each programs.
Although it’s well known that regression is incomplete, it is a well
established and effective method for program testing, and Rupair’s
experiment results have shown this strategy is quite effective in
practice.
Trace validation. Rupair also borrows the idea of trace validation
from fuzzing [69] to check the equivalence between the rectified
programs and the original ones. To be specific, Rupair records the
execution traces by inserting random numbers into the head of each
basic block in the programs’ control-flow graphs. After running the
programs, Rupair collects and compares the two execution traces
for equivalence. Although this strategy is more complicated and
requires more engineering efforts to implement, it’s more powerful
than the regression-based strategy as two programs with same
outputs may take different execution traces.
Translation validation [60] is a more powerful approach to prove
program equivalence, which is successful to prove the semantic
equivalence of compiler optimizations. However, as program rec-
tification described in this work does alter program semantics for
the buggy programs, the translation validation technique can not
be used in this scenario.
3.7 Rectified Program Generation
After buffer overflows are identified and rectified, Rupair generates
as outputs the rectified programs, along with rectification reports
to the Rust developers.
817Rupair: Towards Automatic Buffer Overflow Detection and Rectification for Rust
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Table 1: A Micro Benchmark of Ground Truth in the Data Set
Checked &
Fixed?
Yes
Address
Santinizer
No
Pattern
Safe → Unsafe
Safe → Unsafe
Safe → Unsafe
No
Yes
CVE or programs
CVE-2018-1000810
App
rust
RUSTSEC-2017-0004
base64
bfa13247
redox-ralloc
fe905ed1
array-mul
array-sum
binary-search
find-duplicate
find-median
sorted-array-merge
redox-relibc
NA
NA
NA
NA
NA
NA
Patching Time Description
2018-09
2017-05
2018-06
2019-02
NA
NA
NA
NA
NA
NA
Creates a vector by repeating a
slice n times.
Calculate the base64 encoded
string size, including padding.
Allocate fresh space that the
space is allocated through a BRK
call to the kernel.
Allocate space.
Array and num multiplication.
Two array sum.
Binary search algorithm.
Find the number of duplicates in
the array.
Looking for the median number
of two positive sequences.
Combine two ordered arrays.
Unsafe → Unsafe Yes
Safe → Unsafe
Yes
Safe → Unsafe
Yes
Safe → Unsafe
Yes
Safe → Unsafe
Yes
Safe → Unsafe
Safe → Unsafe
Yes
Yes
No
No
No
No
No
No
No
No
No
Rectified program generation. As Rupair is designed to be a
source-level rectification tool, it generates Rust source code for
programs that are rectifiable.
Rectification report generation. Together with the rectified Rust
programs, Rupair also generates a rectified report to the develop-
ers. For the successfully rectified programs, Rupair generates a
summary containing the detailed description of the rectified pro-
gram fragments. For buggy programs that automated rectification
may have side effects, Rupair records them as "Unrectifiable" and
reports suggestions to the developers for further manual inspection
and rectification.
4 EXPERIMENTS AND RESULTS
In this section, we evaluate the effectiveness and efficiency of RU-
PAIR. Specifically, we aim to answer the following research ques-
tions:
RQ1: Effectiveness. As Rupair is proposed to automatically fix
buffer overflow bugs in Rust programs, is it effective in fixing such
vulnerabilities in Rust programs and real-world CVEs?
RQ2: Scalability. As Rupair is designed to automatically detect
and fix buffer overflow vulnerabilities, how scalable is it and does
it identify or fix previously undiscovered buffer overflow bugs in
real-world Rust projects?
RQ3: Correctness. As Rupair is designed to automatically fix
insecure Rust programs, how accurate is Rupair in fixing these bugs
and assuring the functionality consistency between the rectified
programs and the original ones?
RQ4: Cost. As Rupair is introduced to help Rust developers gen-
erate secure programs and may instrument the insecure source
code, what’s the performance of Rupair? Does Rupair introduce
additional cost to the rectified programs?
4.1 Experimental Setup
We execute the latest Rust compiler version 1.51.0. All experiments
and measurements are performed on a server with one 4 physical
Intel i7 core (8 hyperthread) CPU and 8 GB of RAM running Ubuntu
18.04.
4.2 Data Sets
We select Rust projects to build data sets. There are three principals
guiding our creation of data sets.
First, to testify the effectiveness and correctness of Rupair, we
need to build a benchmark of ground truth. We built a micro bench-
mark of ground truth consisting of 10 buggy Rust programs as
shown in Table 1. These test cases are created in two different ways:
1) we included all 4 known buggy programs from the public CVEs
into our data set (the first 4 rows); and 2) we manually developed 6
other buggy Rust programs. It should be noted that the sole purpose
of these micro benchmarks is to testify Rupair’s effectiveness, not
performance or cost, so the size of these benchmarks is irrelevant.
Second, to testify the scalability, performance and cost of Rupair,
we aim to conduct experiments on real-world Rust projects. We
systematically collected publicly available and open source Rust
projects. In order to cover as many Rust usage scenarios as possible,
we aim to include as many domains in our study as possible. As a re-
sult, we collected Rust projects from 8 different domains: databases,
operating systems, gaming, image processing, cryptocurrency, se-
curity tools, system tools, and Web. These domains cover the most
important usage scenarios of Rust. Furthermore, in each of above
domains, we select as many representative Rust projects as possible.
However, as with any open ecosystem, there exists a long-tail of
projects in Rust that are small, largely unused or unmaintained.
Therefore, we perform experiments on the more popular projects
in our data set. As we download these Rust projects from both
the central Rust repository and GitHub, we measure popularity by
having the higher downloads or GitHub stars.
818ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Baojian Hua, Wanrong Ouyang, Chengman Jiang, Qiliang Fan, and Zhizhong Pan
Table 2: 36 Real-world Rust Projects in the Data Set
Domains
Database
Operating System
Gaming
Image Processing
Cryptocurrency
Security tools
System tools
Web
# Projects
4
3
4
3
5
4
7
6
LOC in Rust
Avg.
114238.0
71014.0
57313.0
14171.7
171778.2
11621.2
7920.9
39989.6
Min
7139
13396
11410
9370
2351
2154
1223
14723
The selected domains and projects are presented in Table 2. For
each of the 8 domains included, we give the numbers of selected
projects in the corresponding domain, the sizes of these projects
(measured by lines of source code), the numbers of Rust source files,
and the GitHub stars.
In total, there are 36 projects, with 3 to 7 projects in each selected
domains, respectively. These projects are selected based on their
importance and popularity in the corresponding domain, according
to the aforementioned data set selection criteria.
4.3 RQ1: Effectiveness
To answer RQ1, we first evaluated Rupair against the micro bench-
marks in the data set (i.e., the ground truth). In total, Rupair success-
fully identified 9 buffer overflow vulnerabilities in 10 benchmarks,
and Rupair successfully generates a rectified patch for each of the
9 benchmark (the 6th row in Table 1). The only program Rupair
failed to analyze is RUSTSEC-2017-0004. A further investigation
reveals that this program contains a function call, thus Rupair is
unable to analyze due to its intra-procedural design decision (as
discussed in Section 3.3). For such rare cases, Rupair constructs a
report and sends to Rust developers for further manual inspection
and rectification.
In order to verify whether Rupair has actually fixed the insecure
code for each test case in this benchmark, we used the following
strategies to conduct verification. First, we applied the state-of-the-
art techniques, i.e., program analysis tools, to analyze these Rust
programs and compare with Rupair.
To be specific, we used AddressSanitizer [11], a fast and widely-
used memory error detector, to scan these benchmarks. As the last
row in Table 1 shows, the AddressSanitizer failed to detect any vul-
nerabilities in these benchmarks. We further analyzed the results
and investigated the root causes. The AddressSanitizer used instru-
mentation to insert specific range checking code to the programs
being analyzed, and linked the programs with prebuilt shared li-
braries. However, as the prebuilt AddressSanitizer libraries only
check a program against concrete inputs, thus it is unable to iden-
tify potential buffer overflow if the concrete inputs are in range. On
the other hand, Rupair checks the array index symbolically using
SMT solvers, it can identify potential overflows by constructing
counterexamples.
Second, we extracted the semantics of the patch generated au-
tomatically by Rupair against the patch submitted for the CVE
vulnerability or the original correct program that we manually
Max
258379
174924
182129
20976
336798
28460
22681
66384
Files of Rust
Avg. Min Max
316.5
661
676
307.0
671
225.5
66
52.0
583.0
1338
174
73.5
94
36.7
144.8
225
35
117
49
37
6
9
4
68
GitHub Stars
Avg.
4075.0
1810.7
2587.0
1565.3
6520.0
1729.5
5171.4
22820.0
Min Max
1100
9200
2800
432
6400