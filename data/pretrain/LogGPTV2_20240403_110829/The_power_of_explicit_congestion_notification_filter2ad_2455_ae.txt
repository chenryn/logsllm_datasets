parameters according to the recommendation from [15], where the
reference-targeted queuing delay is set to 5 ms.
For our experimental workload, we utilize the TPC-W [5] bench-
mark to represent an e-commerce workload characterizing an on-
line bookstore site that serves dynamic web content; hence, it re-
quires access to a database server. Thus, the server pool in our sce-
nario consists of a web-server and a database tier. At the web tier,
we use a cluster of Apache web servers [4] and dynamic content
coded using PHP scripts [3] at the application layer. Access to the
4 GB database tier is provided by a MySQL server [1]. The work-
load for TPC-W is generated by a client emulator which generates
the requests speciﬁed in TPC-W.
At the client pool, the client emulator opens persistent HTTP
connections to the web servers and sends a sequence of requests
for the dynamic content. The mean time between the openings of
two successive connections, together with the number of clients,
deﬁnes the request arrival rate at the web-server tier. However,
since each request for dynamic content can consist of several em-
bedded queries, access to the database server may become the sys-
tem bottleneck. Because we are interested in isolating and explor-
ing network-based effects, we proceed as follows.
Initially, we limit the network capacity between the client and
server pools to 100 Mbps. Next, we set the number of clients and
the mean time between their arrivals such that the resulting average
network throughput, in the direction of servers to clients, becomes
15 Mbps. At the same time, we verify that this request rate does not
create a bottleneck at the database server. Finally, we limit the rate
between the two pools to 10 Mbps, which enables us to explore the
impact of RED∗ and ECN+ on end-to-end performance.
)
%
(
y
t
i
l
i
b
a
b
o
r
p
e
v
i
t
a
u
m
m
u
C
l
100
90
80
70
60
50
40
30
20
10
0
Uncongested network
RED*, no ECN
RED*, with ECN
RED*, with ECN+
0
0.2 0.4 0.6 0.8
1
1.2 1.4 1.6 1.8
2
Response time (sec)
Figure 11: Testbed Experiments: CDF Proﬁles
Figure 11 depicts the user-experienced response-time proﬁles in
different scenarios. The curve labeled “uncongested network” de-
picts the response times for the 100 Mbps scenario. The curve la-
beled “RED∗, no ECN” depicts the response time proﬁle in the
10 Mbps scenario, in which RED∗ is applied but the endpoints do
not support ECN. The third curve, labeled ”RED∗, with ECN,”
shows the response-time proﬁle in the 10 Mbps scenario where we
conﬁgure both client and server machines with ECN. Finally, we
patch all web servers from the cluster with ECN+, and label the
corresponding curve “RED∗, with ECN+.” While Figure 11 shows
a clear improvement of ECN over the non-ECN scenario, and ECN+
over the ECN scenario, the impact on throughput is even more dra-
matic: the normalized throughput is 44% in the scenario without
ECN; 56% in the ECN scenario, and as much as 99% in the ECN+
scenario. Below, we explain in detail the key reasons for such sig-
niﬁcant performance differences.
1
0.1
0.01
0.001
.
b
a
b
o
r
p
.
m
m
u
c
.
l
m
e
p
m
o
C
0.0001
0.01
Uncongested network
RED*, no ECN
RED*, with ECN
RED*, with ECN+
0.1
1
10
100
1000
Response time (sec)
Figure 12: Testbed Experiments: CCDF Proﬁles
Figure 12 depicts the complementary cumulative distribution
function (CCDF), 1− P r[X ≤ x], of response times for the above
four scenarios. The smaller the tail of the distribution is, the smaller
the mean response time, and the better the performance of a par-
ticular scheme. Certainly, the uncongested scenario shows superior
performance. On the contrary, RED∗ without ECN has the heaviest
tail, which indicates that a large number of web responses experi-
ence multiple successive timeouts such that the mean response time
becomes 26 sec. At the same time, because most of the ﬂows spend
time in long exponential backoffs, they are unable to successfully
utilize the available bandwidth; therefore, the normalized through-
put is as low as 44%. Next, the presence of ECN in TCP data pack-
ets improves both the mean response time, which now becomes
4.5 sec, and the throughput, which increases to 56%. However, the
key point from the ﬁgure is the large performance improvement of
ECN+ over ECN. In the ECN+ scenario, the presence of ECN in
both data and SYN ACK packets reduces the mean response time to
approximately 500 ms, while the normalized throughput becomes
as high as 99%. Most important, Figure 12 indicates that ECN+
does not achieve performance improvements by sacriﬁcing system
stability. On the contrary, TCP endpoint control still applies ex-
ponential backoff, and some ﬂows necessarily experience multiple
timeouts due to extremely heavy congestion, as shown in Figure
12. However, despite these circumstances, ECN+ avoids a large
number of unnecessary timeouts; when compared to the existing
ECN speciﬁcation, ECN+ shifts the system closer to an ideal op-
erating point: web-servers manage to successfully serve approxi-
mately 50% more requests, the network throughput improves by
more than 40%, and the average client-experienced response time
improves by nearly an order of magnitude.
8. DISCUSSION AND RELATED WORK
ECN+ extends the existing ECN speciﬁcation by enabling mark-
ing, instead of dropping, server-generated TCP control packets. In
this section, we discuss whether it is possible to achieve the same
performance simply by giving priority to TCP control packets at
routers. We also compare the ECN+ approach with AQM algo-
rithms that give preferential treatment to short ﬂows.
The ﬁrst question is whether it is possible to achieve similar ef-
fects simply by giving priority to TCP control packets at routers.
Giving priority to TCP SYN packets is certainly not an acceptable
option, because it opens the door to TCP SYN ﬂood attacks. On
the contrary, giving priority to SYN ACK packets at routers would
certainly not have the same impact on performance. While the use
of ECN in control packets certainly is important, this functionality
alone is not sufﬁcient to achieve desirable performance without an
AQM algorithm at the router, the use of ECN in the TCP data plane,
and the ECN-enabled end-point congestion control. In this paper,
we showed that all of these mechanisms are essential to achieve
improved performance.
Next, because ECN+ achieves the largest performance improve-
ments in web-based scenarios, where short ﬂows are dominant, we
compare the ECN+ approach with AQM schemes and architec-
tures that give preferential treatment to short ﬂows. Guo and Matta
[18] use different marking/dropping functions at the routers and a
packet classiﬁer at the network edge to distinguish between long-
and short-lived TCP ﬂows. While implementing such classiﬁers in
the Internet is indeed a challenging task, we nevertheless note that
ECN+ is orthogonal to the above solution, and the two could be
used together.
Similarly, Le et al. [24] propose an AQM scheme which gives a
strict priority to short ﬂows, while it applies congestion control only
to long ﬂows. The scheme distinguishes short from long ﬂows by
tracking the number of packets that have been seen recently from
each ﬂow at the router. There are several drawbacks of such an
approach. First, giving a strict priority to short ﬂows invokes a fun-
damental vulnerability to malicious clients that can chop their ﬁles
into small pieces in order to improve performance or perform a DoS
attack. Second, this approach also creates the possibility of stabil-
ity problems in environments that consist of only short ﬂows (e.g.,
the above dynamic web content experiment). If all ﬂows are given
priority during congestion, high packet loss ratios are generated,
causing end-to-end delay characteristic to degrade.
Finally, while we demonstrated that ECN+ does not have any
of the above drawbacks, we note that it also impacts a much more
general set of scenarios and problems. First, it addresses a generic
weakness of TCP’s connection-setup mechanism in which the loss
of a single control packet generates long exponential backoffs.
While this is certainly of particular importance in environments
dominated by short-lived ﬂows, it also impacts the fairness among
long-lived ﬂows (not shown in the paper), because newly arriving
ﬂows can enter the system without waiting long initial timeouts.
Second, ECN+ is a generic addition to ECN functionality; its im-
pact is not limited to any particular AQM scheme - it systematically
improves all ECN-enabled AQM algorithms.
9. CONCLUSIONS
This paper re-investigated the importance of ECN in light of re-
cent measurements that reveal an extremely poor usage of this op-
tion in today’s Internet. We discovered a fundamental drawback of
the current ECN speciﬁcation, and showed that the use of ECN in-
dications in TCP control packets can address an inherent weakness
of TCP’s handshake mechanism. A loss of a single control packet
can dramatically degrade system performance, primarily due to the
highly skewed distribution of Internet ﬂow-sizes. While the use
of ECN bits in TCP SYN packets can potentially reinforce a well-
known server vulnerability to DoS attacks launched by malicious
clients, we showed that no such obstacle exists for the use of ECN
bits in server-generated control packets. Moreover, we argued that
such an approach (i) is more important, because the congestion is
much more likely to arise in the direction from the server to the
client; (ii) does not induce a challenge for system stability, because
TCP’s exponential-backoff mechanisms are used; and (iii) is easy
to deploy, because it requires minimal changes to servers only.
In order to deploy the above innovation at servers, and more im-
portantly, to initiate a high-scale deployment of ECN in the Inter-
net, we argued that it is necessary to provide a set of novel incen-
tives that address particular needs of network providers and end-
points. On a case study of the web, we produced a set of such
incentives and showed that (i) web-servers that apply the above in-
novation can serve approximately 50% more requests, while the
average response times experienced by their clients improves by
nearly an order of magnitude; (ii) ECN systematically improves
the performance of all investigated AQM schemes (RED, REM,
and PI); (iii) web clients that apply ECN can experience the above
performance beneﬁts instantly, independent of the actual number
and rate at which others adopt the option.
In an attempt to fully understand the importance of ECN, en-
riched with the above innovation, we studied the ECN functional-
ity in isolation from traditional randomization and control-theory-
based AQM mechanisms. Our ﬁndings are as follows.
(i) For
web-only trafﬁc mixes, ECN dominantly impacts web response-
times due to the large number of short-lived ﬂows, such that even
a generic AQM scheme with ECN support outperforms non-ECN-
enabled AQM algorithms; hence, applying ECN in such environ-
ments is a more important factor than which AQM algorithm is
applied; (ii) for general trafﬁc mixes, the superiority of ECN over
other AQM mechanisms largely holds for high-speed backbone
routers; this is because such trafﬁc mixes give rise to only moderate
queuing lengths in high-speed environments, despite possibly high
utilization levels; (iii) for general trafﬁc mixes at the network edge,
randomization and control-theoretic mechanisms are essential to
achieve high throughput; while this is a well-established result for
persistently-congested scenarios, we showed that the same holds
for less-persistent congestion levels.
Acknowledgments
The author is grateful to Supranamaya Ranjan (Rice University) for
his help with the testbed experiments, and Michele Garetto (Rice
University) for discussions about the queuing model. The author
also thanks the anonymous reviewers as well as his shepherd, Bruce
Davie (CISCO), whose comments helped improve this paper.
10. REFERENCES
[1] MySQL Database Server. http://www.mysql.com.
[2] NISTNET: Network Emulation Package.
http://snad.ncsl.nist.gov/itg/nistnet/.
[3] PHP Scripting Language. http://www.php.net.
[4] The Apache Software Foundation. http://www.apache.org.
[5] TPC-W: Transaction Processing Council.
http://www.tpc.org.
[6] M. Allman, S. Floyd, and C. Partridge. Increasing TCP’s
initial window, 1998. Internet RFC 2414.
[7] G. Appenzeller, I. Keslassy, and N. McKeown. Sizing router
buffers. In Proceedings of ACM SIGCOMM ’04, Portland,
Oregon, Sept. 2004.
[8] S. Athuraliya, V. Li, S. Low, and Q. Yin. REM: Active queue
management. IEEE Network, 15(3):48–53, May 2001.
[9] F. Campos, F. Smith, and K. Jeffay. Generating realistic TCP
workloads. Technical report, 2004.
[10] M. Christiansen, K. Jeffay, D. Ott, and F. Smith. Tuning
RED for web trafﬁc. IEEE/ACM Transactions on
Networking, 9(3):249–264, 2001.
[11] A. Feldmann, A. Gilbert, P. Huang, and W. Willinger.
Dynamics of IP trafﬁc: A study of the role of variability and
the impact of control. In Proceedings of ACM SIGCOMM
’99, Vancouver, British Columbia, Sept. 1999.
[12] S. Floyd. TCP and explicit congestion notiﬁcation. ACM
Computer Comm. Review, 24(5):10–23, 1994.
[13] S. Floyd. Implementing ECN in TCP, 1998.
http://www.icir.org/ﬂoyd/ECN-TCP.txt.
[14] S. Floyd. Inappropriate TCP resets considered harmful, Aug.
2002. Internet RFC 3360.
[15] S. Floyd, R. Gummadi, and S. Shenker. Adaptive RED: An
algorithm for increasing the robustness of RED’s active
queue manegement. Technical report, Aug. 2001.
[16] S. Floyd and V. Jacobson. Random early detection gateways
for congestion avoidance. IEEE/ACM Transactions on
Networking, 1(4):397–413, 1993.
[17] M. Garetto and D. Towsley. Modeling, simulation and
measurements of queuing delay under long-tail Internet
trafﬁc. In Proceedings of ACM SIGMETRICS ’03, San
Diego, CA, June 2003.
[18] L. Guo and I. Matta. The war between mice and elephants. In
Proceedings of IEEE ICNP ’01, Riverside, CA, Nov. 2001.
[19] C. Hollot, V. Misra, W. Gong, and D. Towsley. On designing
improved controllers for AQM routers supporting TCP ﬂows.
In Proceedings of IEEE INFOCOM ’01, Anchorage, Alaska,
June 2001.
[20] D. Katabi, M. Handley, and C. Rohrs. Congestion control for
high bandwidth-delay product networks. In Proceedings of
ACM SIGCOMM ’02, Pittsburgh, PA, Aug. 2002.
[21] S. Kunniyur and R. Srikant. Analysis and design of an
adaptive virtual queue (AQM) algorithm for active queue
manegement. IEEE/ACM Transactions on Networking,
12(2):286–299, 2004.
[22] A. Kuzmanovic. The power of explicit congestion
notiﬁcation (extended version). Northwestern University
Technical Report, May 2005.
[23] L. Le, J. Aikat, K. Jeffay, and F. Smith. The effects of active
queue management on web performance. In Proceedings of
ACM SIGCOMM ’03, Karlsruhe, Germany, Aug. 2003.
[24] L. Le, J. Aikat, K. Jeffay, and F. Smith. Differential
congestion notiﬁcation: Taming the elephants. In
Proceedings of IEEE ICNP ’04, Berlin, Germany, Oct. 2004.
[25] R. Mahajan, S. Floyd, and D. Wetherall. Controlling
high-bandwidth ﬂows at the congested router. In Proceedings
of IEEE ICNP ’01, Riverside, CA, Nov. 2001.
[26] M. May, J. Bolot, C. Diot, and B. Lyles. Reasons not to
deploy RED. In Proc. of IWQoS ’99, London, UK, 1999.
[27] A. Medina, J. Padhye, and S. Floyd. Measuring the
evoluation of transport protocols in the Internet. Technical
report, 2004.
[28] J. Padhye and S. Floyd. Identifying the TCP behavior of web
servers. In Proceedings of ACM SIGCOMM ’01, San Diego,
CA, Aug. 2001.
[29] V. Paxson and M. Allman. Computing TCP’s retransmission
timer, Nov. 2000. Internet RFC 2988.
[30] K. Ramakrishnan and S. Floyd. A proposal to add explicit
congestion notiﬁcation to IP, Jan. 1999. Internet RFC 2481.
[31] K. Ramakrishnan and S. Floyd. The addition of explicit
congestion notiﬁcation to IP, Sept. 2001. Internet RFC 3168.
[32] K. Ramakrishnan and R. Jain. A binary feedback scheme for
congestion avoidance in computer networks. ACM
Transactions on Comp. Sys., 8(2):158–181, May 1990.
[33] F. Smith, F. Campos, K. Jeffay, and D. Ott. What TCP/IP
protocol headers can tell us about the web. In Proceedings of
ACM SIGMETRICS ’01, Cambridge, MA, June 2001.