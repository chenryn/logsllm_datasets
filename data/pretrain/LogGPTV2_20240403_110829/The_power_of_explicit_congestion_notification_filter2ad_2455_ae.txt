### Parameters and Experimental Setup

The parameters for our experiment are based on the recommendations from [15], with a reference-targeted queuing delay set to 5 ms. For the experimental workload, we use the TPC-W [5] benchmark, which simulates an e-commerce workload, specifically an online bookstore that serves dynamic web content. This setup requires access to a database server, so our server pool consists of a web-server tier and a database tier.

- **Web Tier**: We employ a cluster of Apache web servers [4] and dynamic content generated using PHP scripts [3].
- **Database Tier**: A MySQL server [1] provides access to a 4 GB database.
- **Workload Generation**: The TPC-W workload is generated by a client emulator, which sends requests as specified in the TPC-W benchmark.

### Client Pool Configuration

At the client pool, the client emulator establishes persistent HTTP connections to the web servers and sends a sequence of requests for dynamic content. The mean time between the openings of two successive connections, combined with the number of clients, defines the request arrival rate at the web-server tier. However, since each request for dynamic content can involve several embedded queries, the database server may become a bottleneck. To isolate and explore network-based effects, we proceed as follows:

1. **Initial Network Capacity**: We limit the network capacity between the client and server pools to 100 Mbps.
2. **Request Rate Setting**: We set the number of clients and the mean time between their arrivals such that the resulting average network throughput, in the direction from servers to clients, becomes 15 Mbps. We ensure this request rate does not create a bottleneck at the database server.
3. **Further Limitation**: Finally, we reduce the rate between the two pools to 10 Mbps, allowing us to explore the impact of RED* and ECN+ on end-to-end performance.

### Testbed Experiments: CDF Profiles

Figure 11 illustrates the user-experienced response-time profiles in different scenarios:
- **Uncongested Network (100 Mbps)**: Response times for the 100 Mbps scenario.
- **RED*, no ECN (10 Mbps)**: Response time profile in the 10 Mbps scenario with RED* applied but without ECN support at the endpoints.
- **RED*, with ECN (10 Mbps)**: Response-time profile in the 10 Mbps scenario with both client and server machines configured with ECN.
- **RED*, with ECN+ (10 Mbps)**: Response-time profile in the 10 Mbps scenario with all web servers patched with ECN+.

Figure 11 shows a clear improvement in response times with ECN over the non-ECN scenario, and further improvement with ECN+. The normalized throughput also improves significantly: 44% in the non-ECN scenario, 56% in the ECN scenario, and 99% in the ECN+ scenario.

### Testbed Experiments: CCDF Profiles

Figure 12 depicts the complementary cumulative distribution function (CCDF) of response times for the four scenarios. The smaller the tail of the distribution, the better the performance. The uncongested scenario shows superior performance, while RED* without ECN has the heaviest tail, indicating multiple successive timeouts and a mean response time of 26 seconds. The presence of ECN in TCP data packets improves the mean response time to 4.5 seconds and increases throughput to 56%. The key improvement is seen with ECN+, where the mean response time is reduced to approximately 500 ms and the normalized throughput reaches 99%.

### Discussion and Related Work

**ECN+** extends the existing ECN specification by enabling marking, instead of dropping, server-generated TCP control packets. We discuss whether similar performance can be achieved by giving priority to TCP control packets at routers and compare ECN+ with AQM algorithms that give preferential treatment to short flows.

- **Priority to TCP Control Packets**: Giving priority to TCP SYN packets is not acceptable due to the risk of TCP SYN flood attacks. Prioritizing SYN ACK packets at routers would not have the same impact on performance.
- **Comparison with AQM Schemes**: ECN+ is orthogonal to solutions like those proposed by Guo and Matta [18] and Le et al. [24], which prioritize short flows. ECN+ addresses a generic weakness of TCP’s connection-setup mechanism and systematically improves all ECN-enabled AQM algorithms.

### Conclusions

This paper re-investigates the importance of ECN in light of recent measurements showing poor usage in today’s Internet. We discovered a fundamental drawback of the current ECN specification and showed that using ECN indications in TCP control packets can address inherent weaknesses in TCP’s handshake mechanism. ECN+ is more important because congestion is more likely in the direction from the server to the client, does not compromise system stability, and is easy to deploy with minimal changes to servers.

To deploy ECN+ and initiate large-scale ECN deployment, we provide incentives that address the needs of network providers and endpoints. Our case study on the web shows that web-servers applying ECN+ can serve approximately 50% more requests with improved average response times, and ECN systematically improves the performance of all investigated AQM schemes (RED, REM, and PI).

### Acknowledgments

The author thanks Supranamaya Ranjan (Rice University) for help with testbed experiments and Michele Garetto (Rice University) for discussions about the queuing model. The author also thanks the anonymous reviewers and Bruce Davie (CISCO) for their valuable comments.

### References

[1] MySQL Database Server. http://www.mysql.com.
[2] NISTNET: Network Emulation Package. http://snad.ncsl.nist.gov/itg/nistnet/.
[3] PHP Scripting Language. http://www.php.net.
[4] The Apache Software Foundation. http://www.apache.org.
[5] TPC-W: Transaction Processing Council. http://www.tpc.org.
...
[33] F. Smith, F. Campos, K. Jeffay, and D. Ott. What TCP/IP protocol headers can tell us about the web. In Proceedings of ACM SIGMETRICS ’01, Cambridge, MA, June 2001.