# 一、Docker 和容器要领
容器是我们多年来见过的最具变革性的技术之一。科技公司、企业和最终用户都采用它来处理日常工作负载。越来越多的**普通现成** ( **COTS** )应用正在从传统安装转变为完全容器化的部署。随着如此大的技术转变，信息技术领域的任何人都必须了解容器。
在本章中，我们将介绍容器解决的问题。在介绍了为什么容器很重要之后，我们将介绍引发现代容器狂潮的运行时 Docker。本章结束时，您将了解如何安装 Docker 以及如何使用最常见的 Docker CLI 命令。
在本章中，我们将涵盖以下主题:
*   理解容器化的需求
*   理解 Docker
*   安装 Docker
*   使用 Docker 命令行界面
我们开始吧！
# 技术要求
本章有以下技术要求:
*   一台 Ubuntu 18.04 服务器，内存至少为 4 GB，但建议为 8 GB
您可以通过访问以下 GitHub 存储库来访问本章的代码:[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)。
# 了解容器化的需求
你可能在办公室或学校经历过这样的对话:
**开发者** : *“新应用来了。它经历了几周的测试，你是第一个获得新版本的人。”*
*…..过了一会儿…*
**用户** : *“没用。当我单击提交按钮时，它会显示一个关于缺少依赖项的错误。”*
**开发者** : *“太奇怪了；它在我的机器上运行良好。”*
这是开发人员在交付应用时可能遇到的最令人沮丧的事情之一。通常，潜移默化出现的问题与开发人员机器上的库有关，但它不包含在包的分发中。解决这个问题的一个简单方法是将所有的库都包含在这个版本中，但是如果这个版本包含一个新的库来覆盖旧的版本，这可能是不同的应用所需要的呢？
开发人员需要考虑他们的新版本，以及与用户工作站上任何现有软件的任何潜在冲突。这通常会变成一种谨慎的平衡行为，需要更大的部署团队在不同的系统配置上测试应用。它还可能导致开发人员的额外返工，或者在某些极端情况下，与现有应用完全不兼容。
多年来，有各种各样的尝试来简化应用交付。首先是解决方案，如 **VMware** 的 **Thinapp** ，虚拟化 san 应用(不要与虚拟化操作系统混淆)。它允许您将应用及其依赖项打包成一个可执行包。这种打包消除了应用的依赖关系与另一个应用的依赖关系相冲突的问题，因为该应用是在一个独立的包中。这种提供的应用隔离不仅消除了依赖性问题，还提供了增强的安全级别，并减轻了操作系统迁移的负担。
在阅读本书之前，您可能听说过应用流，也可能没有听说过。这听起来像是对“它在我的机器上工作”问题的一个很好的解决方案。不过，它没有像预期的那样起飞有很多原因。首先，大多数产品都是需要大量投资的付费解决方案。除了许可之外，他们还需要一台“干净的电脑”，这意味着对于您想要虚拟化的每一个应用，您都需要从一个基本系统开始。您要创建的包使用基本安装和初始系统快照后添加的任何内容之间的差异。这些差异随后被打包到您的分发文件中，该文件可以在任何工作站上执行。
我们提到了应用虚拟化，以强调多年来“它在我的机器上工作”等应用问题有不同的解决方案。像 **Thinapp** 这样的产品只是解决问题的一次尝试。其他尝试包括在运行 **Citrix** 或**远程桌面**、 **Linux 容器**甚至**虚拟机**的服务器上运行应用。
## 介绍 Docker
行业甚至终端用户都需要更简单、更便宜的东西——进入 Docker 容器。容器不是新技术；多年来，它们一直以各种形式使用。Docker 所做的是让普通开发人员可以访问它们。
Docker 给大众带来了一个抽象层。它很容易使用，并且在创建包之前不需要每个应用都有一台干净的电脑，从而为依赖性问题提供了一个解决方案，但最吸引人的是，它是免费的。Docker 成为 GitHub 上许多项目的标准，团队通常会创建一个 Docker 容器并将 Docker 映像或 **Dockerfile** 分发给团队成员，提供一个标准的测试或开发环境。最终用户的采用最终将 Docker 带入企业，并最终使其成为今天的标准。
虽然有很多关于 Docker 的书，但这本书侧重于 Docker 用于与容器交互的基本主题。这本书将重点介绍在尝试使用本地 Kubernetes 环境时需要了解的内容。Docker 有着悠久而有趣的历史，它是如何演变成我们今天使用的标准容器映像格式的。我们鼓励您阅读有关该公司的信息，以及他们如何开创了我们今天所知的容器世界。
虽然我们的重点不是由内而外地教授 Docker，但我们认为，那些对 Docker 不熟悉的人将受益于一般容器概念的快速入门。如果你有一些 Docker 的经验，并且理解诸如短暂和无状态的术语，请继续到安装 Docker 部分。
# 了解 Docker
这本书是在假设你对 Docker 和容器概念有一些基本了解的情况下创作的。我们意识到，过去可能不是每个人都玩过 Docker 或 containers，所以我们想展示一个关于容器概念和使用 Docker 的速成课程。
重要说明
如果您是容器新手，我们建议阅读 Docker 网站上的文档，了解更多信息:[https://docs.docker.com/](https://docs.docker.com/)。
## 容器是短暂的
首先要理解的主题是容器映像是短暂的。
对于那些不熟悉 Docker 的人来说，短暂这个词意味着短暂。根据设计，容器可以在任何时候被销毁，并且在没有用户交互的情况下被恢复。在前面的例子中，有人以交互方式向 web 服务器添加文件。这些添加的文件只是临时的，因为基本映像中不包含这些文件。
这意味着，一旦容器被创建并运行，一旦容器从 Docker 主机中移除或销毁，对映像*所做的任何更改都不会保存。让我们看一个例子:*
1.  您在没有任何基础的 **HTML** 页面的情况下，在您的主机上使用 **NGINX** 启动一个运行网络服务器的容器。
2.  使用 Docker 命令，执行`copy`命令将一些网络文件复制到容器的文件系统中。
3.  为了测试复制是否成功，您浏览该网站并确认它提供了正确的网页。
4.  对结果感到满意，您停止容器并将其从主机中移除。那天晚些时候，你想给一个同事看这个网站，你启动了你的 NGINX 容器。您再次浏览网站，但是当网站打开时，您会收到一个 404 错误(找不到页面错误)。
在您停止并从主机移除容器之前，您上传的文件发生了什么变化？
容器重启后找不到你的网页的原因是因为所有容器都是**短暂的**。
每次容器初始启动时，基本容器映像中包含的内容就是所有内容。您在容器中所做的任何更改都是短暂的。
如果您需要向现有映像添加永久文件，您将需要重建包含文件的映像,或者，正如我们将在本章后面的*持久数据*一节中解释的，您可以在容器中装入一个 Docker 卷。在这一点上，要理解的主要概念是容器是短暂的。
但是等等！你可能会想，*“如果容器是短暂的，我是如何向服务器添加网页的？”*。短暂只是意味着改变不会被保存；它不会阻止您对正在运行的容器进行更改。
对正在运行的容器所做的任何更改都将被写入一个临时层，称为**容器层**，它是本地主机文件系统上的一个目录。Docker 存储驱动程序负责处理使用容器层的请求。该位置将存储容器文件系统中的任何更改，以便当您将 HTML 页面添加到容器中时，它们将存储在本地主机上。容器层与正在运行的映像的容器标识相关联，它将保留在主机系统上，直到通过使用命令行界面或运行 Docker 清理作业将容器从 Docker 中删除。
如果容器是短暂的，并且无法写入映像，那么如何修改容器中的数据？Docker 使用映像分层来创建多个链接层，这些链接层显示为单个文件系统。
## Docker 映像
在高级别，Docker 映像是映像层的集合，每个映像层都有一个包含该层元数据的 JSON 文件。所有这些都组合在一起，创建一个运行中的应用，当容器映像启动时，您可以与之交互。
您可以在 https://github.com/moby/moby/blob/master/img/spec/v1.md 的 Docker GitHub 上阅读更多关于映像内容的信息。
## 映像层
正如我们在上一节中提到的一样，一个正在运行的容器使用一个位于基础映像层“顶部”的容器层，如下图所示:
![Figure 1.1 – Docker image layers ](img/Fig_1.1_B15514.jpg)
图 1.1–Docker 映像层
无法写入映像层，因为它们处于只读状态，但临时容器层处于可写状态。您添加到容器中的任何数据都存储在该层中，只要容器运行，这些数据就会被保留。
为了有效地处理多个层，Docker 实现了写时复制，这意味着如果一个文件已经存在，它将不会被创建。但是，如果需要当前映像中不存在的文件，则会写入该文件。在容器世界中，如果一个文件存在于较低的层中，它上面的层不需要包含它。例如，如果层 1 中有一个名为`/opt/nginx/index.html`的文件，则层 2 在其层中不需要相同的文件。
这解释了系统如何处理存在或不存在的文件，但是被修改的文件怎么办？有时，您需要“替换”位于较低层的文件。您可能需要在构建映像或临时修复运行中的容器问题时这样做。写时复制系统知道如何处理这些问题。由于映像是从上到下读取的，因此容器只使用最高层的文件。如果您的系统在第 1 层中有一个`/opt/nginx/index.html`文件，并且您修改并保存了该文件，运行的容器将在容器层中存储新文件。由于容器层是最顶层，因此`index.html`的新副本将总是先于映像层中的旧版本被读取。
## 持久数据
我们将在 [*第二章*](02.html#_idTextAnchor044)*中讨论如何使用持久磁盘使用 Docker Data* 。现在，我们将只提供一个简单的介绍。
仅限于短暂的容器将严重限制 Docker 的用例。很有可能您会有一些需要持久存储的用例，或者在您停止容器时会保留的数据。
这看起来像是我们在反驳我们之前的说法，即容器是短暂的，但这仍然是事实。将数据存储在容器映像图层中时，基础映像不会改变。当容器从主机中移除时，容器层也将被移除。如果使用相同的映像来启动新的容器，则会创建一个新的容器映像层。因此，容器是短暂的，但是通过向容器添加 Docker 卷，您可以将数据存储在容器之外，从而获得数据持久性。
Docker 通过几个方法提供持久性，我们将在 [*第 2 章*](02.html#_idTextAnchor044)*中更详细地讨论使用 Docker 数据*，但是现在，要知道 Docker 确实提供了一种方法来持久化您的数据。
## 访问在容器中运行的服务
我们将在 [*第三章*](03.html#_idTextAnchor062)*了解 Docker Networking* 中讲述如何暴露容器。现在，我们将只提供一个简单的介绍。
与物理机或虚拟机不同，容器不直接连接到网络。当容器需要发送或接收流量时，它通过 Docker 主机系统使用桥接的 **NAT 网络**连接。这意味着当您运行一个容器并且您想要接收传入的流量请求时，您需要公开您想要接收流量的每个容器的端口。在基于 Linux 的系统上，`iptables`具有将流量转发给 Docker 守护程序的规则，Docker 守护程序将为每个容器的指定端口提供服务。
基本容器和 Docker 的介绍到此结束。在下一节中，我们将解释如何在主机上安装 Docker。
# 安装 Docker
本书中的实践练习将要求你有一个工作的 Docker 主持人。您可以按照本书中的步骤操作，也可以在`chapter1`目录下执行位于本书 GitHub 存储库中的脚本，该目录名为`install-docker.sh`。
如今，您可以在几乎所有硬件平台上安装 Docker。Docker 的每个版本在每个平台上的行为和外观都是相同的，这使得需要开发跨平台应用的人很容易开发和使用 Docker。通过使不同平台之间的函数和命令相同，开发人员不需要学习不同的容器运行时来运行映像。
以下是 Docker 的可用平台表。如您所见，有多种操作系统和多种 CPU 架构的安装:
![Figure 1.2 – Available Docker platforms ](img/Fig_1.2_B15514.jpg)
图 1.2–可用的 Docker 平台
重要说明
使用一种体系结构创建的映像不能在不同的体系结构上运行。这意味着您不能创建基于 x86 硬件的映像，并期望该映像在运行 ARM 处理器的树莓 Pi 上运行。还需要注意的是，虽然您可以在 Windows 机器上运行 Linux 容器，但不能在 Linux 机器上运行 Windows 容器。
用于安装 Docker 的安装程序因平台而异。幸运的是，Docker 在他们的网站上记录了许多安装过程:[https://docs.docker.com/install/](https://docs.docker.com/install/)。
在本章中，我们将在 Ubuntu 18.04 系统上安装 Docker。如果您没有安装 Ubuntu 的机器，您仍然可以阅读安装步骤，因为每个步骤都将被解释，并且不需要您有一个运行的系统来理解这个过程。如果您有不同的 Linux 安装，您可以使用 Docker 网站上的[https://docs.docker.com/](https://docs.docker.com/)概述的安装程序。为 CentOS、Debian、Fedora、Ubuntu 提供了步骤，其他 Linux 发行版也有通用步骤。
## 准备安装 Docker
在我们开始安装之前，我们需要考虑使用什么存储驱动。存储驱动程序提供了联合文件系统，它管理容器的层以及如何访问容器的可写层。
在大多数安装中，您不需要更改默认存储驱动程序，因为将选择默认选项。如果您运行的是至少 4.0 版或以上的 Linux 内核，您的 Docker 安装将使用`overlay2`存储驱动程序；早期的内核将安装`AUFS`存储驱动程序。
作为参考，Docker 与`overlay2`和`AUFS`驱动程序一起支持`devicemapper`、`btrfs`、`zfs`和`vfs`存储驱动程序。然而，这些在新系统中很少使用，在此仅作为参考。
如果您想了解每个存储驱动程序，请查看以下 Docker 网页，其中详细介绍了每个驱动程序及其用例:[https://docs . Docker . com/storage/storage driver/select-storage-driver/](https://docs.docker.com/storage/storagedriver/select-storage-driver/)。
现在您已经了解了存储驱动程序的要求，下一步是选择安装方法。您可以使用三种方法之一安装 Docker: