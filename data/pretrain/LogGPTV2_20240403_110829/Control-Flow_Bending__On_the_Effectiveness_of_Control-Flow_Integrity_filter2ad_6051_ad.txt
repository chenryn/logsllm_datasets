yes
no
yes
yes
?
?
CFI without shadow stack
Info.
leakage
Conﬁned code
execution
Arbitrary code
execution
write
write
printf
printf
dispatcher
dispatcher
dispatcher
printf
printf
printf
printf
printf
dispatcher
dispatcher
printf
dispatcher
dispatcher
dispatcher
Arbitrary
write
yes
no
yes
yes
?
?
CFI with shadow stack
Info.
leakage
Conﬁned code
execution
write
write
printf
printf
write
write
no
write
printf
write
printf
printf
Arbitrary code
execution
no
write
printf
write
no
no
Table 2: The results of our evaluation of the 6 binaries. The 2nd and 6th columns indicate whether the vulnerability we
examined allows an attacker to control memory. The other columns indicate which attack goals would be achievable,
assuming the attacker controls memory. A “no” indicates that we were not able to achieve that attack goal; anything
else indicates it is achievable, and indicates the attack technique we used to achieve the goal. A “?” indicates we were
not able to reproduce the exploit.
life exploits on vulnerable programs, both with and with-
out a shadow stack. We split our evaluation into two
parts. First, we show that attackers can indeed obtain
arbitrary control over memory given actual vulnerabili-
ties. Second, we show that given a program where the
attacker controls memory at one point in time, it is pos-
sible to mount a control-ﬂow bending attack. Our results
are summarized in Table 2.
Our examples are all evaluated on a Debian 5 system
running the binaries in x86 64-bit mode. We chose 64-
bit mode because most modern systems are running as
64-bit, and attacks are more difﬁcult on 64-bit due to the
increased number of registers (data is loaded off of the
stack less often).
We do not implement fully-precise static CFI. Instead,
for each of our attacks, we manually verify that each
indirect control-ﬂow transfer is valid by checking that
the edge taken occurs during normal program execution.
Because of this, we do not need to handle dynamically
linked libraries specially: we manually check those too.
7.1 Control over memory
The threat model we deﬁned earlier allows the attacker
to control memory at a single point in time. We argue
that this level of control is achievable with most vulnera-
bilities, by analyzing four different binaries.
7.1.1 Nginx stack buffer overﬂow
We examined the vulnerability in CVE-2013-2028 [19]:
a signedness bug in the chunked decoding component of
nginx. We found it is possible to write arbitrary values
to arbitrary locations, even when nginx is protected by
fully-precise static CFI with a shadow stack, by modi-
fying internal data structures to perform a control-ﬂow
bending attack.
The vulnerability occurs when an attacker supplies a
large claimed buffer size, overﬂowing an integer and trig-
gering a stack-based buffer overﬂow. An attacker can
exploit this by redirecting control ﬂow down a path that
would never occur during normal execution. The Server
Side Includes (SSI) module contains a call to memcpy()
where all three arguments can be controlled by the at-
tacker. We can arrange memory so after memcpy() com-
pletes, the process will not crash and will continue ac-
cepting requests. This allows us to send multiple requests
and set memory to be exactly to the attacker’s choosing.
Under benign usage, this memcpy() method is called
during the parsing of a SSI ﬁle. The stack overﬂow al-
lows us to control the stack and overwrite the pointer to
the request state (which is passed on the stack) to point
to a forged request structure, constructed to contain a
partially-completed SSI structure. This lets us re-direct
control ﬂow to this memcpy() call. We are able to con-
trol its source and length arguments easily because they
point to data on the heap which we control. The desti-
nation buffer is not typically under our control: it is ob-
tained by the result of a call to nginx’s memory allocator.
However, we can cause the allocator to return a pointer
to an arbitrary location by controlling the internal data
structures of the memory allocator.
7.1.2 Apache off by one error
We examined an off-by-one vulnerability in Apache’s
handling of URL parameters [11]. We found that it is no
longer exploitable in practice, when Apache is protected
with CFI.
The speciﬁc error overwrites a single extra word on
the stack; however, this word is not under the attacker’s
control. Instead, the word is a pointer to a string on the
heap, and the string on the heap is under the attacker’s
control. This is a very contrived exploit, and it was not
exploitable on the majority of systems in the ﬁrst place
due to the word on the stack not containing any mean-
ingful data. However, on some systems the overwrit-
ten word contained a pointer to a data structure which
170  24th USENIX Security Symposium 
USENIX Association
10
contains function pointers. Later, one of these function
pointers would be invoked, allowing for a ROP attack.
When Apache is protected with CFI, the attacker is not
able to meaningfully modify the function pointers, and
therefore cannot actually gain anything. CFI is effective
in this instance because the attacker never obtains control
of the machine in the ﬁrst place.
7.1.3 Smbclient printf vulnerability
We examined a format string vulnerability in smb-
client [26]. Since we already fully control the format
string of a printf() statement, we can trivially control
all of memory with printf-oriented programming.
7.1.4 Wireshark stack buffer overﬂow
A vulnerability in Wireshark’s parsing of mpeg ﬁles al-
lows an attacker to supply a large packet and overﬂow a
stack buffer. We identify a method of creating a repeat-
able arbitrary write given this vulnerability even in the
presence of a shadow stack.
occurs
in
The
vulnerability
the
packet_list_dissect_and_cache_record function
where a ﬁxed-size buffer is created on the stack. An
attacker can use an integer overﬂow to create a buffer
of an arbitrary size larger than the allocated space. This
allows for a stack buffer overﬂow.
We achieve an arbitrary write even in the presence of
a shadow stack by identifying an arbitrary write in the
packet_list_change_record function. Normally,
this would not be good enough, as this only writes a
single memory location. However, an attacker can loop
this write due to the fact that the GTK library method
gtk_tree_view_column_cell_set_cell_data,
which is on the call stack, already contains a loop that
iterates an attacker-controllable number of times. These
two taken together give full control over memory.
7.1.5 Xpdf & Mysql
For two of our six case studies, we were unable to re-
produce the public exploit, and as such could not test if
memory writes are possible from the vulnerability.
7.2 Exploitation assuming memory control
We now demonstrate that an attacker who can control
memory at one point in time can achieve all three goals
listed in Section 3, including the ability to issue attacker-
desired system calls. (Our assumption is well-founded:
in the prior section we showed this is possible.) Prior
work has already shown that if arbitrary writes are possi-
ble (e.g., through a vulnerability) then data-only attacks
are realistic [8]. We show that control-ﬂow bending at-
tacks that are not data-only attacks are also possible.
7.2.1 Evaluation of nginx
Assuming the attacker can perform arbitrary writes, we
show that the attacker can read arbitrary ﬁles off of the
server and relay them to the client, read arbitrary mem-
ory out of the server, and execute an arbitrary program
with arbitrary arguments. The ﬁrst two attack goals can
be achieved even with a shadow stack; our third attack
only works if there is no shadow stack. Nginx is the only
binary which is not exploitable by printf-oriented pro-
gramming, because nginx rewrote their own version of
printf() and removed “%n”.
An attacker can read any ﬁle that nginx has access
to and cause their contents to be written to the out-
put socket, using a purely non-control-data attack. For
brevity, we do not describe this attack in detail: prior
work has described that these types of exploits are possi-
ble.
Our second attack can be thought of as a more
controlled version of the recent Heartbleed vulnerabil-
ity [21], allowing the attacker to read from an arbitrary
address and dump it to the attacker. The response han-
dling in nginx has two main phases. First, it handles the
header of the request and in the process initializes many
structs. Then, it parses and handles the body of the re-
quest, using these structs. Since the vulnerability in ng-
inx occurs during the parsing of the request body, we use
our control over memory to create a forged struct that
was not actually created during the initialization phase.
In particular, we initialize the postpone_filter mod-
ule data structure (which is not used under normal exe-
cution) with an internally-inconsistent state. This causes
the module to read data from an arbitrary address of an
arbitrary length and copy it to the response body.
Our ﬁnal attack allows us to invoke execve() with
arbitrary arguments, if fully-precise static CFI is used
without a shadow stack. We use memcpy() as a dis-
patcher function to return into ngx sprintf() and then
again into ngx exec new binary(), which later on
calls execve(). By controlling its arguments, the at-
tacker gets arbitrary code execution.
In contrast, when there is a shadow stack, we believe
it is impossible for an attacker to trigger invocation of
execve() due to privilege separation provided by fully-
precise static CFI. The master process spawns children
via execve(), but it is only ever called there — there is
no code path that leads to execve() from any code point
that is reachable within a child process. Thus, in this case
CFI effectively provides a form of privilege separation
for free, if used with a shadow stack.
USENIX Association  
24th USENIX Security Symposium  171
11
7.2.2 Evaluation of apache
On Apache the attacker can invoke execve() with ar-
bitrary arguments. Other attacks similar to those on ng-
inx are possible; we omit them for brevity. When there
is no shadow stack, we can run arbitrary code by using
strcat() as a dispatcher gadget to return to a function
which later invokes execve() under compilations which
link the Windows main method. When there is a shadow
stack, we found a loop that checks, for each module, if
the module needs to be executed for the current request.
By modifying the conditions on this loop we can cause
mod cgi to execute an arbitrary shell command under
any compilation. Observe that this attack involves over-
writing a function pointer, although to a valid target.
7.2.3 Evaluation of smbclient
Smbclient contains an interpreter that accepts commands
from the user and sends them to a Samba ﬁleserver. An
attacker who controls memory can drive the interpreter to
send any action she desired to the ﬁleserver. This allows
an attacker to perform any action on the Samba ﬁlesys-