ApossibleexecutionplanforthequeryinExample3isshownin
calsubexpressions(line2). Thisfunctioncanbeimplementedin Figure14.TheBroadcastoperatormanagesdataexchangebetween
multipleways. Oneexampleisusingthetablesignaturesmethod theshowntwoactiveprocesses(cf.Section3.1).
in[11,14]. TheoutputofDetectMatches()isasetM thatis Typically, a CTEProducer has multiple CTEConsumers execut-
composedofgroupsofmatchingsubexpressionsinexpr in. ingbothinthesameprocess,aswellasinotherprocesses.Theex-
After M is computed, the algorithm visits groups in M with ecutionengineallowsCTEConsumerstoreadtuplesfromCTEPro-
morethanonemember. Foreachsuchgroupm,aCTEProduceris ducersinbothofthesescenarios.Additionally,whenmultiplepro-
createdandtheidofthecreatedCTEisassignedtom.id(lines3- cessesareinvolved,theexecutionengineprovidesasynchroniza-
6). ThealgorithmthencallsInsertCTEConsumers(),which tionmechanismtoensuretheconsumercanwaitfortheproducerto
recursively visits subexpressions, replacing each common subex- havetuples. CTEProducerandCTEConsumersidentifyeachother
pressionwithitscorrespondingCTEConsumer. Finally,aCTEAn- usingthecommonCTEId.Inaddition,eachCTEProducerisanno-
chor is inserted above the least common ancestor (LCA) of each tatedwith thenumberof consumersinthe sameprocess, as well
groupofcommonsubexpressions(lines9-12).Figure13(b)shows as in different processes. These are used in the synchronization
theoutputexpressionafterprocessingthequeryinExample10. protocolbetweenconsumersandproducers.
Notethatthisisonlyonepossiblealgorithm.Othermethodscan InGPDB,aprocessthatcontainsaCTEConsumerexecutesade-
bealsousedtoidentifysimilar(butnon-identical)subexpressions. pendencycheckbeforeitbeginsexecutinganyoftheoperatorsas-
Inthiscontext,severalviewmatchingtechniquescanbeleveraged signedtoit.Usingasynchronizationprotocol,itwaitsforacknowl-
byourframework,aswediscussinSection2. edgementfromtheproducerthatallthetupleshavebeenproduced
andarereadytoberead. Aprocessthatdoesnotcontainanycon-
sumersexecutesnormally. Ifanyproducersexistinaprocess,that
9. EXECUTION
producernotifiesalltheconsumersonceallthetuplesareavailable.
In MPP databases, different parts of a query plan can execute Thesynchronizationprotocolensuresthatnonotificationsarelost,
indifferentprocesses,bothwithinasinglehost,andacrossdiffer- regardlessoftheorderproducersandconsumersreachthesynchro-
ent hosts. In a shared-nothing MPP architecture such as GPDB, nizationpoint.
processes within the same host share a common filesystem, and Theresultsofaproduceroperatorareexplicitlymaterializedin
processesindifferenthostscommunicatethroughanetwork. The aTupleStore,adatastructureimplementinganiteratoroverasetof
plansproducedbyOrcarequireCTEConsumerstoreadtuplesfrom tuples. TheTupleStoreforaCTEProducercanbestoredinmem-
CTEProducerswithinthesamehost(bothfromthesameprocess, ory or on disk, depending on the size of the data, the amount of
1713
cessors at 3.33GHz, 48GB RAM and twelve 600GB SAS drives
8+;,+4?# 89),+48:)'#
/01234567#
1)@-+8:)'# 10.2 ComparingOrcaagainstthePlanner
/&*+A7#
D,%:+CC#DE#
B,%)4:)C*# Setting ExecutionTime
Orca 32,951.82sec
89),+48:)'/01234567#
Planner 57,176.04sec
D,%:+CC#DF#
Table1:Totalexecutiontime
Figure14:GPDBExecutionPlanforExample3
Table1showsthetotalexecutiontimeoftheentireworkloadus-
ingbothOrcaandPlanner. Orcareducedthetotalexecutiontime
memoryavailableandtheplanrequirementsontheCTEProducer.
by 43%. Figure 15 shows the relative performance improvement
When all the consumers of a particular CTEProducer are located
ofeachqueryasaresultofusingOrca. Theimprovementiscom-
in the same process, consumers can directly read the contents of
puted as a percentage of the execution time when using Planner,
theTupleStorefromtheproducer. Iftheamountofdatafitsinthe
sothatanimprovementof10%meansaqueryfinishesin90%of
operatormemory,theTupleStoreisstoredinmemory,resultingin
thetime,whenusingOrca. TheX-axisistheexecutiontimewith
additionalperformancegains. Ifatleastoneconsumerislocated
Planner in logarithmic scale. One can see that across the board,
inadifferentprocess, thentheTupleStoreisstoredondisk. The
Orcaspeedsuptheexecutiontimebothforshort-runningandlong-
CTEConsumerreceivesthefilenameandthenotificationwhenthe
running queries. 80% of the queries exhibited performance im-
tuplesareondisk,thenproceedstoreadthetuplesfromdisk.
provement.Thisimprovementisduetoavoidingunnecessaryinlin-
AnadditionaloptimizationapplieswhentheCTEProducergen-
ingofCTEs,andthusavoidingre-executingcommonexpressions,
eratessortedtuples.IftheoperatorontopoftheproducerisaSort
aswellastheeffectiveCTEoptimizationsdiscussedearlier.
operator,explicitmaterializationoftheresultsisavoided.TheSort
operatoralreadymaterializesitsresultsinaTupleStore. ThisTu-
)'#$%
pleStoreissharedwiththeconsumersdirectly. )##$%
(#$%
The execution of plans with CTEs can be further improved by *)('"'&%$#"!
"#$%
lazily executing the CTEProducer only when the first CTECon- &#$%
sumerrequestsit. IftheCTEProducerandCTEConsumersarein '#$%
#$%
the same process, a mechanism to jump between executing dif- !'#$%
ferentparts ofthe planisneeded. Ifthey reside indifferent pro- !&#$%
!"#$%
cesses,morecoordinationbetweenprocessesisrequired,bothfor )% )#% )##% )###% )####%
flowcontrolandforefficientlysendingtuplesbetweenprocesseson +,'-./%(*01"'*23'-4*
thesamehost. TheCTEProducermustalsobeabletospilltodisk Figure15:PerformanceofOrcavs.Planner
whenconsumersrequestdataatdifferentrates. Thecostofsuch
planscannotbeestimatedatoptimizationtime,sinceitisbaseden-
Therearesomeinstances,however,whereOrca’splanisjustas
tirelyontheexecutionflow;thecostestimatescanvarydepending
good as the plan generated by Planner. This is usually the case
onwhethertheCTEProducerexecutesinmemory,spillstodiskor
when the overhead of materializing and reading the CTE outputs
is not executed altogether. We plan to investigate such improve-
fromdiskisroughlyequaltothetimesavedfromthemultipleexe-
mentsaspartoffuturedevelopment.
cutionsoftheCTEexpressioninthePlanner’splan.Lastly,forare
somequeriestheperformancedegradedwithOrca.Weinvestigated
10. EXPERIMENTS thesecasesandfoundoutthattheyarecausedbyOrcapickinga
In this section, we present our experimental evaluation. Sec- suboptimal plan primarily due to imperfect tuning of cost model
tion10.1outlinesourexperimentalsetup. Section10.2compares parametersandcardinalitymisestimation.
the performance of Orca-generated plans against plans generated 10.3 Cost-basedInlining
byGPDB’slegacyqueryoptimizer,referredtoasPlanner,which
alwaysinlinesCTEs.Section10.3outlinestheimportanceofcost- Next, we evaluate the effect of our cost-based CTE inlining
based CTE inlining, as opposed to always inline CTEs or never methodbyexecutingourworkloadusingthefollowingsettings:
inlineCTEs. Wedonotexperimentallycompareourapproachto
1. BasicCTEoptimization,wherewedisableCTEinliningas
thetechniquesproposedbyotherdatabasesystems.Ingeneral,this
wellaspushingdownpredicatesintotheCTEProducer.
wasinfeasiblebecausemanyofthesesystemsaretightlycoupled
2. InliningisenforcedforallCTEs.
with their respective optimization/execution frameworks that are
3. Cost-basedinlining,withalltheoptimizationsenabled.This
considerably different from GPDB and Orca. We highlight the
isOrca’sdefaultsetting.
similarities and differences between our approach and other ap-
proachesinSection2. Thegoalofthisexperimentistodemonstratethatthecost-based
inlininggeneratesbetterplanbyapplyingbothprinciples(purein-
10.1 Setup
lining,andbasicCTEoptimization)inacost-basedmannerrather
Theexperimentswereconductedonaclusterofeightnodescon- than applying only one of principles as a heuristic choice. Fig-
nectedwith10GbpsEthernet. EachnodehasdualIntelXeonpro- ure16showsthedifferenceinperformanceamongthesesettings.
1714
10000"
Basic"CTE"op6miza6on" Inline"all"CTEs" Cost>based"inlining"
))ces()emiT)no&ucexE
1000"
100"
10"
1"
01" 02" 04" 05a" 11" 14a" 18" 18a" 22" 22a" 23" 24" 27" 30" 31" 36a" 39" 47" 51" 51a" 58" 59" 64" 67" 67a" 70" 70a" 74" 75" 80a" 83" 86a" 95" 97"
TPC2DS)Queries)
Figure16:PerformanceComparison:BasicCTEOptimization(NoInlining)vs.InliningOnlyApproachvsCost-basedCTEApproach(uses
inliningandCTEoptimizationtechniques)
)!"# )!"# PartitionedTablesinMPPSystems.InSIGMOD,pages
(!"# (!"# 373–384,2014. *)('"'&%$#"! *)('"'&%$#"!
'!"# '!"# [3] C.Bear,A.Lamb,andN.Tran.TheVerticaDatabase:SQL
RDBMSforManagingBigData.InMBDS,2012.
&!"# &!"#
[4] S.Bellamkonda,R.Ahmed,A.Witkowski,A.Amor,
%!"# %!"#
M.Za¨ıt,andC.C.Lin.EnhancedSubqueryOptimizationsin
$!"# $!"#
Oracle.PVLDB,2(2):1366–1377,2009.
!"# !"#
%# (#(*#%%#&!#&&#&)*#($#()#(+#(,#)!#)+#+!*+#+*#+,#,!#,!*#,&#,)*#-+# '#$$#&*#+'#+(# [5] L.Chang,Z.Wang,T.Ma,L.Jian,L.Ma,A.Goldshuv,
+,-./0*12'$3'4* +,-./0*12'$3'4*
L.Lonergan,J.Cohen,C.Welton,G.Sherry,and
(a) (b)
M.Bhandarkar.HAWQ:AMassivelyParallelProcessing
SQLEngineinHadoop.InSIGMOD,pages1223–1234,
Figure 17: Effect of individual CTE optimizations: (a) inlining
2014.
CTEs with a single consumer (b) pushing predicates down into
[6] J.GoldsteinandP.Larson.OptimizingQueriessing
CTEproducer
MaterializedViews:APractical,ScalableSolution.In
SIGMOD,pages331–342,2001.
The vertical axis represents the execution time in log scale. We [7] G.Graefe.TheCascadesFrameworkforQuery
observedthatfor14outofthe48TPC-DSqueriesthedifference Optimization.IEEEDataEng.Bull.,18(3),1995.
inexecutiontimebetweenthethreedifferentsettingswaslessthan [8] L.L.PerezandC.M.Jermaine.History-awarequery
10%andhenceignoredinFigure16. Intheremaining34queries, optimizationwithmaterializedintermediateviews.InData
weobservedthatifwepickedinliningasaheuristicitcanresulton Engineering(ICDE),2014IEEE30thInternational
anaverage44%performanceregressionandintheworstcasea4x Conferenceon,pages520–531.IEEE,2014.
regressionasisthecaseforquery14a. ApurelyinliningCTEap- [9] Pivotal.GreenplumDatabase.
proachdeliversnotableperformancegainsonlyinscenarioswhere http://www.pivotal.io/big-data/pivotal-
theinlinedCTEishighlyselective,namelyqueries11and31where greenplum-database,2013.
theinlinedsubqueryhasacardinalityofafewhundredtuples. In [10] S.Shankar,R.Nehme,J.Aguilar-Saborit,A.Chung,
thesetwocases,onlyusingthebasicCTEoptimizationcancausea M.Elhemali,A.Halverson,E.Robinson,M.S.
2xregression. Thecost-basedinliningapproachcapturesthebest Subramanian,D.DeWitt,andC.Galindo-Legaria.Query
of both worlds. Inlining is favored when there is only one con- OptimizationinMicrosoftSQLServerPDW.InSIGMOD,
sumer(asshowninFigure17(a)),ortheCTEischeapenoughto pages767–776,2012.
re-execute. Additionally,thecost-basedapproachfavorsnoinlin- [11] Y.N.Silva,P.Larson,andJ.Zhou.ExploitingCommon
ingwhenitisexpensivetoexecutetheCTEexpressionrepeatedly. SubexpressionsforCloudQueryProcessing.InICDE,pages
Thishybridapproachalongwiththebenefitsofpushingpredicates 1337–1348,2012.
downintotheCTEproducer(asinFigure17(b))savesupto55%
[12] M.A.Soliman,L.Antova,V.Raghavan,A.El-Helw,Z.Gu,
oftheexecutiontimewithnegligibleoptimizationoverhead.
E.Shen,G.C.Caragea,C.Garcia-Alvarado,F.Rahman,
M.Petropoulos,F.Waas,S.Narayanan,K.Krikellas,and
11. SUMMARY
R.Baldwin.Orca:AModularQueryOptimizerArchitecture
This paper presents a comprehensive framework for the repre- forBigData.InSIGMOD,pages337–348,2014.
sentation,optimizationandexecutionofCTEs.Ourworkconsider- [13] TPC.TPC-DSBenchmark.
ablyextendstheoptimizer’sinfrastructureandaddressesmultiple http://www.tpc.org/tpcds.
challenges pertinent to distributed query processing in MPP sys- [14] J.Zhou,P.Larson,J.C.Freytag,andW.Lehner.Efficient
tems. Wedemonstratetheefficiencyofourtechniquesusingstan- ExploitationofSimilarSubexpressionsforQuery
darddecisionsupportbenchmark. Processing.InSIGMOD,pages533–544,2007.
[15] J.Zhou,P.-A˚.Larson,andR.Chaiken.Incorporating
12. REFERENCES
PartitioningandParallelPlansintotheSCOPEOptimizer.In
[1] PostgreSQL.http://www.postgresql.org. ICDE,pages1060–1071,2010.
[2] L.Antova,A.El-Helw,M.A.Soliman,Z.Gu,
M.Petropoulos,andF.Waas.OptimizingQueriesover
1715