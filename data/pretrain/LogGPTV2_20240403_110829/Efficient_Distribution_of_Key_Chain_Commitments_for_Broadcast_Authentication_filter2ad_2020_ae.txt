c
a
P
120
100
80
60
40
20
0
t
e
k
c
a
P
a
t
a
D
e
g
a
r
e
v
A
l
y
a
e
D
n
o
i
t
a
c
i
t
n
e
h
t
u
A
)
s
d
n
o
c
e
s
(
12
10
8
6
4
2
0
0
20
40
60
80
100
0
0.2
0.4
0.6
0.8
1
%Forged CDM Packets
Channel Loss Rate
(a) Percentage of authenticated data packets
(b) Average data packet authentication delay
Figure 5. Experimental results under di(cid:11)erent channel loss rate and percentage of forged CDM packets. As-
suming 3 data packet bu(cid:11)ers, 39 CDM bu(cid:11)ers and (cid:12)xed data rate (100 data packets=minute).
metric cryptography to distribute initial parameters
to the sensor nodes individually. The drawback of this
solution is its high communication overhead when the
number of sensor nodes is large.
Perrig et al. proposed to use an earlier key chain to
distribute the commitments of next one [12]. Multi-
ple early TESLA packets are used to tolerate packet
loss. However, since reliable distribution of later com-
mitment cannot be fully guaranteed, if all the packets
used to distribute commitments are lost (e.g., due to
temporary network partition), a receiver cannot re-
cover the commitment of the later key chain. As a
result, the sender and the receivers will have to re-
peat the costly bootstrap process.
In contrast, our
multi-level commitment distribution scheme allows a
receiver to recover the key chains even if all the com-
mitment distribution messages during one high-level
time interval are lost, due to the connection between
the higher- and lower-level keys.
(cid:22)TESLA and our proposed scheme do not assume
tamper-resistant hardware, and do not guarantee the
con(cid:12)dentiality of the broadcast packets. Based on the
assumption of tamper-resistant hardware, Basagni et
al. presented a key management scheme to periodi-
cally update the symmetric keys shared by all sen-
sor nodes [2]. With this key shared among all sen-
sor nodes, authenticated broadcast can be easily im-
plemented. However, this scheme cannot prevent a
(compromised) sensor node from sending forged mes-
sages if an attacker can reuse the tamper-resistant
hardware.
6. Conclusion and Future Work
In this paper, we presented a multi-level key chain
scheme to e(cid:14)ciently distribute the key chain com-
mitments for the broadcast authentication scheme
named (cid:22)TESLA. By using pre-determination and
broadcast, our scheme removed (cid:22)TESLA’s require-
ment of a unicast-based distribution of initial key
chain commitments, which introduces high communi-
cation overhead in large distributed sensor networks.
We also proposed several techniques, including peri-
odic broadcast of commitment distribution messages
and random selection strategies, to improve the sur-
vivability of our scheme and defeat some DOS at-
tacks. Our experiments and analysis showed that the
resulting scheme satis(cid:12)es several nice properties, in-
cluding low overhead, tolerance of message loss, scal-
ability to large networks, and resistance to replay at-
tacks as well as some known DOS attacks.
The limitation of our scheme is that when a sensor
node doesn’t get a commitment during a time inter-
val, it must wait for a long period of time to recover
from this failure. We will seek solutions to this prob-
lem in our future research. In addition, we will study
broadcast authentication involving multiple base sta-
tions and the implementation of our scheme in real
sensor networks.
7. Acknowledgement
The authors would like to thank the anonymous
reviewers for their valuable comments.
References
[1] R. Anderson, F. Bergadano, B. Crispo, J.-H. Lee,
C. Manifavas, and R. Needham. A new family of
authentication protocols. In Operating Systems Re-
view, October 1998.
[2] S. Basagni, K. Herrin, D. Bruschi, and E. Rosti. Se-
cure pebblenets.
In Proceedings of ACM Interna-
tional Symposium on Mobile ad hoc networking and
computing, pages 156{163, 2001.
[3] F. Bergadano, D. Cavagnino, and B. Crispo. Indi-
vidual single source authentication on the mbone. In
ICME 2000, August 2000.
[4] B. Briscoe. Flames: Fast, loss-tolerant authentica-
tion of multicast stream. Technical report, BT Re-
search, 2000.
[5] R. Canetti, J. Garay, G. Itkis, D. Micciancio,
M. Naor, and B. Pinkas. Multicast security: A
taxonomy and some e(cid:14)cient constructions.
In In-
focom’99, 1999.
[6] D. Carman, P. Kruus, and B.J.Matt. Constrains and
approaches for distributed sensor network security.
Technical report, NAI Labs, 2000.
[7] S. Cheung. An e(cid:14)cient message authentication
scheme for link state routing. In 13th Annual Com-
puter Security Applications conference, San Diego,
Calif, December 1997.
[8] R. Gennaro and P. Rohatgi. How to sign digital
streams. Technical report, IBM T.J.Watson Re-
search Center, 1997.
[9] A. Perrig. The biba one-time signature and broad-
cast authentication protocol. In Proceedings of the
ACM Conference on Computer and Communications
Security, November 2001.
[10] A. Perrig, R. Canetti, D. Song, and D. Tygar. E(cid:14)-
cient authentication and signing of multicast streams
over lossy channels. In Proc. of IEEE Security and
Privacy Symposium, May 2000.
[11] A. Perrig, R. Canetti, D. Song, and D. Tygar. E(cid:14)-
cient and secure source authentication for multicast.
In Proceedings of Network and Distributed System
Security Symposium, February 2001.
[12] A. Perrig and J. T. D. S. R. Canetti, Briscoe.
TESLA: Multicast source authentication transform.
IRTF draft, draft-irtf-smug-tesla-00.txt, November
2000.
[13] A. Perrig, R. Szewczyk, V. Wen, D. Culler, and
J. Tygar. Spins: Security protocols for sensor net-
works.
In Proceedings of Seventh Annual Interna-
tional Conference on Mobile Computing and Net-
works, July 2001.
[14] R. Rivest. The rc5 encryption algorithm.
In Pro-
ceedings of the 1st International Workshop on Fast
Software Encryption, volume 809, pages 86{96, 1994.
[15] P. Rohatgi. A compact and fast hybrid signature
scheme for multicat packet authentication.
In 6th
ACM Conference on Computer and Communications
Security, November 1999.
[16] F. Stajano and R. Anderson. The resurrecting duck-
ling: security issues for ad hoc networks. In Proc.
of Security Protocols: 7th International Workshop,
pages 172{194, 1999.
[17] U.S. National Institute of Standards and Technology.
DES modes of operation. Federal Information Pro-
cessing Standards Publication 81 (FIPS PUB 4-3),
December 1980.
[18] C. Wong and S. S. Lam. Digital signatures for (cid:13)ows
and multicasts. In Proc. IEEE ICNP’98, 1998.
A. A Detailed Description of Scheme IV
Initialization
During the initialization phase, all the sensor nodes
synchronize their clocks with the base station. (Al-
ternatively, the base station and all the sensor nodes
may synchronize their clocks with a time service.) In
addition, the base station generates the following pa-
rameters: (1) the initial random key Kn for the high-
level key chain; (2) a sequence of keys Ki = F0(Ki+1)
in the high-level key chain, where i = 0; 1; :::; n (cid:0) 1,
and F0 is a pseudo random function; (3) the duration
(cid:1)0 of each time interval for the high-level key chain;
(4) the starting time T1 for the high-level key chain;
(5) duration (cid:1)1 of the low-level time intervals; (6)
the disclosure lag d for the low-level key chains; (7)
the the maximum clock discrepancy (cid:14)M ax during the
life time of the sensor network.
A constraint for these parameters is that (cid:1)1 (cid:2) d +
(cid:14)M ax < the duration of the time interval for the high-
level key chain. Otherwise, the disclosure of a high-
level key may disclose a low-level key that should not
be disclosed.
The base station distributes the following parame-
ters to the sensor nodes: (1) K0, (2) (cid:1)0, (3) T1, (4)
(cid:1)1, (5) d, and (6) (cid:14)M ax. Here we predetermine all the
parameters for the low-level key chains except for the
commitments. Alternatively, we may allow the base
station to dynamically choose these parameters and
distribute them to the sensors in the commitment dis-
tribution messages. In this case, the authentication
procedure below should be changed slightly.
Note that the initialization phase does not intro-
duce signi(cid:12)cantly more overhead than the original
(cid:22)TESLA. In the original (cid:22)TESLA, it is at least neces-
sary to distribute the master keys to the sensor nodes
so that the base station shares some common keying
material with each sensor node. The aforementioned
parameters can be distributed to the sensor nodes
along with the master keys.
Broadcast of Commitment Distribution Mes-
sages
When the base station needs to broadcast authen-
ticated messages to the sensors, it generates param-
4. For each copy c of CDMi(cid:0)1, S authenticates
c by verifying its MAC with Ki(cid:0)1 disclosed in
CDMi. If this veri(cid:12)cation fails, S discards c and
continues the veri(cid:12)cation for the next copy of
CDMi(cid:0)1. Otherwise, S discards all the other
copies of CDMi(cid:0)1 and makes c the authenticated
copy of CDMi(cid:0)1.
5. If S has an authenticated copy of CDMi(cid:0)1, it
then further authenticates Ki+1;0 enclosed in
CDMi by verifying that applying H to Ki+1;0
results in H(Ki+1;0) included in CDMi(cid:0)1.
If
this veri(cid:12)cation fails, S simply drops the copy of
CDMi and stops. Otherwise, S saves H(Ki+1;0).
6. S uses the random selection strategy discussed
in 3.4 to decide whether to save the current copy
of CDMi or not. (Note that if the current step is
being executed, all the copies of CDMi(cid:0)1 should
have been discarded.) Further assume the cur-
rent copy of CDMi is the jth copy. If j < m,
S still has free bu(cid:11)ers available, and S saves it
in one of the empty bu(cid:11)ers. Otherwise, S keeps
this copy with the probability m=j, and places
it in a randomly selected bu(cid:11)er (among the m
occupied bu(cid:11)ers).
Note that the immediate authentication of Ki+1;0
in CDMi does not imply the authentication of CDMi
itself. An attacker can replace H(Ki+2;0) in CDMi
and still have the resulting message pass the veri-
(cid:12)cation. Thus, S has to use the random selection
strategy to save the copies of CDMi.
Broadcast and Authentication of Normal Mes-
sages
Broadcast and authentication of normal messages
are performed in the same way as in the extended
TESLA [11], except for the distribution of the key
chain commitments, which is handled in the distribu-
tion and authentication of commitment distribution
messages.
eters for each low-level key chain in a similar way to
TESLA and (cid:22)TESLA [10, 11, 13]. Assume the base
station decides to divide each time interval Ii into m
smaller intervals, denoted Ii;1, Ii;2, ..., Ii;m. The base
station generates the low-level key chain by comput-
ing Ki;m = F01(Ki+1), and Ki;j = F1(Ki;j+1), where
j = 0; 1; :::; m (cid:0) 1 and F1 is a pseudo random func-
tion. Thus, the base station has the low-level key
chain hKi;0i. The base station distributes the rele-
vant information about the low-level key chain hKi;0i
in CDMi(cid:0)1 during the time interval Ii(cid:0)1, and the im-
age of this information under a pseudo random func-
tion H in CDMi(cid:0)2 during Ii(cid:0)2.
Each commitment distribution message CDMi
contains the index of the high-level time interval, the
commitment of the low-level key chain hKi+1;0i, the
image under H of the commitment of hKi+2;0i, and
the high-level authentication key Ki(cid:0)1.
BS
!
S
:
CDMi
=
ijKi+1;0jH(Ki+2;0)jM ACK 0
i
(ijKi+1;0jH(Ki+2;0))jKi(cid:0)1.
The base station randomly chooses F (cid:2) (cid:1)0 points
during each time interval Ii, and broadcasts CDMi
at these time points.
Optionally, the base station may distribute K1;0
and H(K2;0) to the sensors during the initialization
phase so that the sensors can use the low-level key
chain hK1;0i in the time interval I1 and authenticate
K2;0 upon receiving CDM1.
Authentication of Commitment Distribution
Messages
Assume that a sensor node S has m + 1 bu(cid:11)ers for
commitment distribution messages. When S receives
a copy of CDMi at time ti during the time interval
Ii, it processes this message according to the following
procedure.
1. S checks the security condition for CDMi, i.e.,
ti + (cid:14)M ax < Ti+1. S discards the packet and
stops if the security condition is not held.
2. If S has an authenticated copy of CDMi(cid:0)1, S
must have received a previous copy of CDMi and
saved Ki(cid:0)1 and H(Ki+1;0). Check whether the
Ki(cid:0)1 and H(Ki+1;0) in the current CDMi are
the same as those saved copies. If yes, go to step
6. Otherwise, S discards the message and stops.
3. S authenticates Ki(cid:0)1 against a previously dis-
closed key Kj by verifying that Ki(cid:0)1 =
F i(cid:0)1(cid:0)j(Kj). (Note that Kj always exists since
K0 was distributed to each sensor node during
initialization.) If this veri(cid:12)cation fails, S discards
the message and stops. Otherwise, S replaces Kj
with Ki(cid:0)1.