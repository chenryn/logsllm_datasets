    public static @Nullable User getById(String id, boolean create) {  
                return getOrCreate(id, id, create);  
            }
代码段2: Hudson.model.User.java
注意前面的`true`参数这里叫做`create`。  
`User.java`模块中的`getOrCreate`会调用另一个`getOrCreate`函数，但增加了另一个`getUnsanitizedLegacyConfigFileFor`返回的参数：
    … User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create) {  
          return getOrCreate(id, fullName, create, getUnsanitizedLegacyConfigFileFor(id));  
    }
代码段3: Hudson.model.User.java
看起来有一些Jenkins遗留文件系统被用来填充用户的数据库。进一步分析发现两个与遗留数据库相关的兄弟函数：
    private static final File getConfigFileFor(String id) {  
            return new File(getRootDir(), idStrategy().filenameOf(id) +"/config.xml");  
        }  
        private static File getUnsanitizedLegacyConfigFileFor(String id) {  
            return new File(getRootDir(), idStrategy().legacyFilenameOf(id) + "/config.xml");  
        }
代码段4: Hudson.model.User.java
第一个函数：`getConfigFileFor(id)`，获取Jenkins的用户数据库目录 (`JENKINS_HOME/users`)
，加入一些形式的`username (id)`，返回含有`JENKINS_HOME/users/{username}/config.xml`  
的文件名。
第二个函数与第一个函数作用相同，但是从`idStrategy().legacyFilenameof()`中获取用户名。  
`legacyFilenameof()`函数并不会修改用户名字符串，而`getConfigFileFor()`使用的`filenameOf()`函数会将用户名字符串进行处理以防止用户名被作为目录名或其他预留名的不安全使用。
然后，Jenkins代码会调用`getOrCreate()`函数。
    private static @Nullable User getOrCreate(@Nonnull String id, @Nonnull String fullName, boolean create, File unsanitizedLegacyConfigFile) {  
            String idkey = idStrategy().keyFor(id);  
            byNameLock.readLock().lock();  
            User u;  
            try {  
                u = AllUsers.byName().get(idkey);  
            } finally {  
                byNameLock.readLock().unlock();  
            }  
            final File configFile = getConfigFileFor(id);  
            if (unsanitizedLegacyConfigFile.exists() && !unsanitizedLegacyConfigFile.equals(configFile)) {  
                File ancestor = unsanitizedLegacyConfigFile.getParentFile();  
                if (!configFile.exists()) {  
                    try {  
                        Files.createDirectory(configFile.getParentFile().toPath());  
                        Files.move(unsanitizedLegacyConfigFile.toPath(), configFile.toPath());  
                        LOGGER.log(Level.INFO, "Migrated user record from {0} to {1}", new Object[] {unsanitizedLegacyConfigFile, configFile});  
                    } catch (IOException | InvalidPathException e) {  
                        LOGGER.log(  
                                Level.WARNING,  
                                String.format("Failed to migrate user record from %s to %s", unsanitizedLegacyConfigFile, configFile),  
                                e);  
                    }  
                }  
                // Don't clean up ancestors with other children; the directories should be cleaned up when the last child  
                // is migrated  
                File tmp = ancestor;  
                try {  
                    while (!ancestor.equals(getRootDir())) {  
                        try (DirectoryStream stream = Files.newDirectoryStream(ancestor.toPath())) {  
                            if (!stream.iterator().hasNext()) {  
                                tmp = ancestor;  
                                ancestor = tmp.getParentFile();  
                                Files.deleteIfExists(tmp.toPath());  
                            } else {  
                                break;  
                            }  
                        }  
                    }  
                } catch (IOException | InvalidPathException e) {  
                    if (LOGGER.isLoggable(Level.FINE)) {  
                        LOGGER.log(Level.FINE, "Could not delete " + tmp + " when cleaning up legacy user directories", e);  
                    }
代码段5: Hudson.model.User.java
函数会将字符串`unsanitizedLegacyConfigFile`作为一个参数，调用`getConfigFileFor(id)`来计算处理过的用户名目录。处理是指从用户名中移除恶意数据来预防潜在的安全问题。
如第14-19行代码，如果：  
（1） 有未处理过的遗留文件存在；  
（2） 遗留的配置文件与处理过的配置文件不相同；  
（3） 硬盘中不存在处理过的配置文件
Jenkins就会为用户创建一个新的处理过的目录。未处理过的遗留配置文件就会被移动到新创建的目录，代码段5的第18行就创建了一个新目录，第19行将未处理的配置文件移动到新目录中。
# 如何利用该逻辑？
含有Jenkins
安全网关的JENKINS_HOME目录中有一个`config.xml`文件，可以尝试检查该代码，查看是否可以让Jenkins从硬盘中移除主配置文件。
首先查看代码流图，然后进行分析：
用用户名`..`来检查流图。需要准备一个含有用户名`..`和任意密码的格式为`username:password`的base64字符串：
    “..:ANYPASSWORD” = Li46QU5ZUEFTU1dPUkQ=”
然后用CURL发送:
    Curl JenkinsURL –H “Authorization: Basic Li46QU5ZUEFTU1dPUkQ=”
Jenkins代码就会计算未处理的configFile：  
`/JENKINS_HOME/users/../config.xml`  
但是这等价于  
`/JENKINS_HOME/config.xml`  
该文件是存在的，因为它是Jenkins的主配置文件，因此通过了test #1。
处理过的Jenkins不允许用户名中出现`..`，因为存在路径遍历问题。所以Jenkins将每个`..`用字符`$002e`来替代了。因此处理过的配置文件被计算为：  
`/JENKINS_HOME/users/$002e$002e/config.xml`
很明显，处理过的配置文件与未处理过的配置文件是不同的，因此通过了test #2。
第3个测试是检查处理过的文件是否存在，研究任意认为没有Jenkins安装过程中会用`$002e$002e`这样的用户名，因此通过了test #3。
Jenkins的含有关于主安全网关描述的主配置文件`config.xml`已经从`JENKINS_HOME`目录中移除了。
代码段1表明Jenkins在认证用户，比如比较API token。因为研究人员提供的用户名与Jenkins用户数据库中的用户名不匹配，`Curl GET
HTTP`命令就会一直报错。可以看出，Jenkins主配置文件已经从Jenkins主目录中移除了。
代码段5流图
# 主配置文件移除之后呢？
Jenkins
master软件是在Java虚拟机缓存内存中运行的。也就是说当Jenkins服务器运行时，所有的文件都会读取到Java缓存中。当其中有文件被移除后，并不会马上改变Jenkins的安全状态。因为Jenkins必须重启，才能使对`config.xml`文件的修改生效。
因此，攻击者只需要等Jenkins服务器重启就可以了。
# CVE-2018-1999043: 使Java虚拟机奔溃
代码段2中的`User.java`模块函数`User.getById()`是用相同的用户名和参数`（true）`来调用的。分析发现该参数是`create`，看起来可以在不需要经过Jenkins认证的情况下就可以在
Jenkins Java cache中创建新用户。
每个用户在Java虚拟机内存中都有一定数量的空间，如果用户名比较长，那么该空间的数也会增长。因此，使用含有长用户名的Curl
命令就可以让Java虚拟机因为可用内存太少而本科，迫使Jenkins管理员重启Jenkins服务器。
# 总结
据上所述，首先将含有重要Jenkins 安全配置的`config.xml`文件从`JENKINS_HOME`移动到新目录，然后通过过长的用户名来使Java
虚拟机奔溃，然后等Jenkins重启后就运行在`Security Disabled`模式了。该模式下不需要认证，任何访问Jenkins
master的都拥有管理员权限。
通过从`JENKINS_HOME/users/$002e$002e/`目录读取`config.xml`文件，并对Jenkins文件系统中的文件做必要的修改，攻击者可以将之前移动的`config.xml`复制回原来的文件。
这样，Jenkins master就会恢复之前的安全配置了，没有人会注意到Jenkins master转变为原来的security
disabled的情况。因此攻击活动也不会被发现。