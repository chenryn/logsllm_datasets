## Page 382
用下，你将需要一些方法来将字符串分别转化成整数、关键字符号以及一个值的列表。
些方法，使得define-url-function可以用来将字符串查询参数转化成Lisp对象。在当前的应
29.4
的播放列表。
成：一个用于浏览歌曲数据库，一个用于查看和管理单个播放列表，最后一个用来列出所有可用
MP3数据库和操作播放列表了。这个接口将由3个通过define-url-function定义的主函数构
-个:after方法。
后一首歌曲，要么从播放列表的起始处开始。因此，你应该在广义函数（setf repeat）上定义
的结尾，同时repeat从:song改变成:all。在这种情况下，你希望可以继续播放，要么重复最
况下作为改变repeat的结果来更新current-song，即当current-idx位于一个非空播放列表
要做任何额外的操作，它的值只在maybe-move-to-next-song中用到。不过，你需要在一种情
但在开始编写这三个函数之前，你还需要先写出它们将用到的一些助手函数和HTML宏。
现在有了你需要的所有底层支持。其余的代码将只是提供一个基于Web的用户接口来浏览
{defmethod
你需要支持的最后一个操作是设置播放列表的重复模式。多数时候，在设置repeat时不需
(defun songs-for-album (playlist album)
(defun shuffled-album-names (playlist)
(defun shuffle-by-album (playlist)
(if(and
(select
(shuffle-table
(let
(shuffle-table (songs-table playlist)))
查询参数类型
(update-current-if-necessary playlist)))
:order-by :track))
where
:from (songs-table playlist)
{ecase value
:distinct t)))
:from (songs-table playlist)
:columns :album
select
(setf (songs-table playlist) new-table)))
(:none)
(:song (setf (current-idx playlist) (1- (table-size (songs-table playlist)))))
(do-rows (song (songs-for-album playlist
:all
((new-table (make-playlist
(insert-row song new-table)))
(at-end-p playlist) (not (empty-p playlist)))
(setf repeat) :after (value (playlist playlist))
(setf (current-idx playlist) 0)))
www.TopSage.com
-table)))
(column-value album-row :album)))
29.4
查询参数类型
365
---
## Page 383
定义转换方法。
可以定义你自己的宏with-safe-io-syntax，它将其主体Lisp形式包装在一个将*READ-EVAL*
自网络的数据，必然希望关掉读取器的一个特性，即不需要在读取过程中对任意Lisp代码求值！‘
确保所有可能影响打印器和读取器的变量都被设置在它们的标准值上。不过，由于你打算读取来
用来从上述编码的字符串中进行baSe64解码，然后再把结果传给READ-FROM-STRING。你需要把
对象，先用WRITE-TO-STRING将其转化成可读的字符串，然后再对其进行Base 64编码；另一个
它们可以为你做Base 64的编码和解码，因此你要做的就只是编写一对函数：---个用来编码Lisp
发送的二进制数据的编码方式。AllegroServe带有两个函数base64-encode和base64-decode,
与其试图引入你自己的转义方法，不如直接使用Base 64，它通常是一种用来保护通过电子邮件
嵌入到一个INPUT元素的值属性时可能带来问题的字符。因此，你需要以某种方式转义这些字符。
符串中写入数据，以及从字符串中读取数据，除非字符串的打印表示中可能含有引号，和其他在
字段中的值，并且在它提交回来以后还要解析它，因此可以使用任何你认为方便的编码方式。你
面来显示表单，其中含有一个隐含字段，其值是一个字符串的列表。由于你要负责生成这个隐含
366
①读取器支持一种语法“#”，它使接下来的S-表达式在读取期被求值。这在源代码中偶尔会有用，但显然会在你读
最终，你可以使用这些函数来定义string->type上的方法，为查询参数类型base64-list
然后编码和解码函数就很容易写了。
(defmacro with-safe-io-syntax (&body body)
最后一个string->type方法稍微复杂一些。出于我即将谈到的一些原因，你会需要生成页
前两个方法很简单。
(defun base64->obj (string)
(defun obj->base64 (obj)
(defmethod string->type ((type (eql 'keyword)) value)
(defmethod string->type ((type (eql 'integer)) value)
这样一来读取器在遇到“#”时就会报错。
取不可信任的数据时打开了一个巨大的安全漏洞。不过，你可以通过将*READ-EVAL*设置为NIL来关闭该语法，
(ignore-errors
(base64-encode (with-safe-io-syntax (write-to-string obj))))
(and (plusp (length value)) (intern (string-upcase value) :keyword)))
(with-standard-io-syntax
(with-safe-io-syntax (read-from-string (base64-decode string)))))
flet
第29章实践：MP3浏览器
，@body）))
nil))
www.TopSage.com
---
## Page 384
&attributes参数，它使任何收集到一个列表中并绑定到&attributes参数上的属性可被宏作为正
page，但却可能仍然需要标准的页头和页脚。该宏如下所示：
browser-page宏的函数。其次，可以看出你以后编写的某个页面将不会使用:mp3-browser-
在开发过程中可以重定义这些函数并立即观察其效果，而不需要重新编译那些使用了:mp3-
从一个定义了应用中页面基本结构的HTML宏开始。
29.5样板HTML
常S-表达式HTML形式来解析。它看起来像下面这样：
让生成HTML中表的单行更加容易。它使用了FOO的一个特性（我将在第31章里提到），即一个
接下来需要定义一个HTML宏和助手函数，以便让应用中的不同页面获得一-致的外观。可以
一些较小的HTML宏和助手函数自动化了其他一些常用的模式。HTML宏：table-row可以
出于两个理由，应该将standard-header和standard-footer定义成单独的函数。首先,
(defun standard-footer ()
(defunstandard-header()
(defparameter *r* 25)
(Kpoq Apoqs ((atata xapeau) atata Kaxs)) abed-xasmoq-edu: oxoew-twsu-autrap)
(defmethod string->type ((type (eql 'base-64-list)) value)
(html
(html
{:html
（let
(:hr)
((:P
(if (listp obj) obj nil)))
(:head
:body
((nsss rasmo1a-edu, Jaxu: usso/axah ads: "aaausatas: taa: yut:)
(:title ,title)
(standard-footer))))
@body
(when ,header (html (:hl :class "title" ,header)))
(standard-header)
((obj (base64->obj value)))
(:a
{:a :href (link "/browse" 
:class "toolbar")
:a
:a
:a
:a
:a
:href
 :href
:href
:href
1 :href
:href
:href
(link
(link
(link
link
(link
{link
1i
ink
“ /playlist")
"/browse"
"/browse"
/browse
www.TopSage.com
:what
:what
" [ ("saxua 1i ("axua eum:
:what
:what
what
"playlist")
"artist")
"genre"
"album")
artist'
:random *r*)
"All artists")
albums")
29.5样板HTML
"Random artists") "J "
"Random genres") "} "
367
---
## Page 385
该用户的播放列表中。该函数如下所示：
而且，浏览页面里还带有一个“Addall”按钮，
正在浏览风格，其中的项“Blues”包含的链接可浏览所有带有Blues风格的专辑、艺术家和歌曲。
列表的链接。否则，每个项都带有链接，可以让用户浏览其他分类所列出的项。例如，如果用户
配项的一个随机子集。当用户在单个歌曲的层面上浏览时，歌曲的标题是一个添加该歌曲到播放
特定风格、艺术家或专辑的数据库项。为了增加奇遇的可能性，你还可以提供一种方式来选择匹
么类型的东西，并提供他们感兴趣的数据库元素的查询条件。它将给你一种方式来查询匹配一个
29.6
一个函数来启动这个MP3浏览器应用。它将在完成其他工作的同时顺便发布这个文件。
态的，最简单的方法就是用publish-file发布一个静态文件。
需要的话还可以重写它。
form-urlencoede封装在你自己的函数中，就将有风险的代码隔离在了一个函数里，将来如果
被重命名。另一方面，使用这个没有导出的函数可以让你立刻完成手头的工作。通过将encode-
NET.ASERVE导出的名字，encode-form-urlencoded将来有可能消失或在你不知道的情况下
开的函数。一方面，这种做法并不是很好。由于名字encode-form-urlencoded并非是
form-urlencoded上的函数，函数encode-form-urlencoded是来自AllegroServe的一个非公
替换为
构造出一个查询字符串，并确保所有的特殊字符都被正确地转义。例如，你可以将下面的写法
368
第一个URL函数将生成一个用来浏览MP3数据库的页面。查询参数将告诉它用户正在浏览什
最后，你需要：mp3-browser-page用到的CSS样式表mp3-browser.css。由于它并非是动
一个示例样式表在本书Web站点上与本章配套的源代码放在了一起。你将在本章结尾处定义
(defunurlencode（string)
为了编码用于URL的键和值，你用到了助手函数urlencode，这是一个包装在函数encode-
该函数如下所示：
(:a:href (link “browse":what "artist":genre “Rhythm & Blues")"Artists")
另一个link函数用来生成可用作A元素的HREF属性的应用内部URL，
(define-html-macro :table-row (&attributes attrs &rest values)
(net.aserve::encode-form-urlencoded string))
(defun link(target &rest attributes)
(html
浏览页
(:attribute
第29章实践：MP3浏览器
www.TopSage.com
，可将匹配页面中所给条件的每一首歌曲都添加到
，它可从一组键值对中
---
## Page 386
种方式来渲染用于：song的行，而用另一种方式来渲染其他类型的行。
这是由do-rows循环来做的，然后把每行的渲染工作交给list-item-for-page。该函数以一
数。这也是在必要时你选择匹配行的一个随机子集的地方。
所有的重活儿，其中values-for-page多数时候负责根据what的值来向select传递正确的参
艺术家或专辑名来浏览时，你将只想选择给定分类中不同的值。数据库函数select完成了几乎
按歌曲来浏览时，这时what参数为：song，你需要从数据库中选择完成的行。但是当用户按风格、
(defun list-item-for-page (what row)