### Re-establishing Trust in Compromised Systems: Recovering from Rootkits that Trojan the System Call Table

**Authors:**
- Julian B. Grizzard
- John G. Levine
- Henry L. Owen
- {grizzard, levine, owen}@ece.gatech.edu
- School of Electrical and Computer Engineering
- Georgia Institute of Technology
- Atlanta, Georgia 30332â€“0250, USA

**Abstract:**
We introduce the concept of re-establishing trust in compromised systems, with a specific focus on recovering from kernel-level rootkits. An attacker who has compromised a system often installs a set of tools, known as a rootkit, which breaks trust in the system and provides the attacker with additional functionalities. One type of rootkit is a kernel-level rootkit, which patches running kernel code with untrusted code. Specifically, current kernel-level rootkits replace trusted system calls with trojaned system calls. Our approach to recover from these types of rootkits involves extracting the system call table from a known-good kernel image and reinstalling it into the running kernel. We also discuss future generation rootkits and address how to recover from them.

**1. Introduction**

Modern computer systems are vulnerable to a wide variety of attacks. As attackers develop methods to exploit these vulnerabilities, a large number of systems are compromised. These compromises are costly for individuals, companies, governments, and other organizations, leading to data breaches, downtime, administrative overhead, and recovery efforts. The number of new vulnerabilities discovered each year continues to grow, suggesting that system compromises will remain a significant problem in the foreseeable future.

While much work has been done on preventing and detecting system compromises, they continue to be a persistent issue. To date, there has been limited research on methods for recovering from system compromises. Conventional wisdom suggests wiping the system clean, reinstalling, and patching with the latest updates.

In this paper, we explore alternative methods for recovering from system compromises. In certain scenarios, it may not be feasible or desirable to shut down the system for a fresh installation. We focus on kernel-level rootkit modifications and present tools to recover from such rootkits. Our work is primarily based on the Linux kernel and Red Hat Linux distribution, but the results should be applicable to other operating systems, especially those on the x86 architecture.

We specifically address one of the most common tactics used by modern kernel-level rootkits: trojaning the system call table. When the system call table is trojaned, even known good system binaries will not report accurate information about the system. Our approach to recover from such attacks involves inserting a trusted system call table from a known good kernel image into the running kernel. This method restores control to the system administrator and is the first step in recovering from a root compromise where a kernel-level rootkit has been installed.

Future generations of kernel-level rootkits may target other types of kernel code instead of the system call table. We discuss potential directions for future rootkits and alternative kernel penetration techniques. Our recovery approach of bootstrapping trusted code into the kernel may also be useful for recovering from future generation rootkits.

**1.1 Definition of Compromised System**

A system is considered compromised when an attacker gains some level of permissions on the system. If the attacker gains root access, the compromise is a root-level compromise. With root-level privileges, the attacker can change any state within the system, effectively owning it. The attacker can modify the system so that trusted reporting processes no longer provide accurate information. Restoring some level of trust is necessary before relying on any reported information, depending on how trust was broken.

- **Compromised System:** An attacker has gained some level of privileges on the system and can read or modify some portion of the system's state.
- **Root-level Compromised System:** An attacker has gained unlimited access to the system, allowing them to read or modify any state within the system, thus breaking trust in the system.

**1.2 Definition of Rootkit**

A rootkit can be considered a form of a Trojan Horse. Once an attacker has compromised a system, they often use a rootkit to covertly retain access. A rootkit can include utilities to allow the attacker to maintain access, hide processes and activities, and break trust in local system reporting and querying functions.

- **User-level Rootkit:** Alters operating system tools at the user level, typically by adding or modifying system binaries.
- **Kernel-level Rootkit:** Alters or inserts kernel-space executing code, such as system calls.

**1.3 Definition of Trust**

Trust in a computer system can be defined as the level to which a user believes the system executes as specified and does nothing else. If a compromise occurs, the user's trust in the system is significantly reduced. For example, a rootkit might cause file listing commands to hide certain files, thus not executing as specified.

**1.4 Overview and Organization**

The rest of the paper is organized as follows:
- **Section 2:** Discusses the problem of kernel-level rootkits and previous work.
- **Section 3:** Analyzes current generation rootkits that modify the system call table.
- **Section 4:** Describes our approach for recovering from current generation rootkits.
- **Section 5:** Presents results of applying our techniques to real-world rootkits.
- **Section 6:** Examines future generation rootkits in terms of their penetration techniques and kernel targets, and discusses a concept to strengthen our algorithm.
- **Section 7:** Concludes with a discussion of our findings and future work.

**2. Motivation**

With the proliferation of exploits targeting today's computer systems, attackers can compromise multiple systems. Once a system is compromised, the attacker often installs a rootkit to retain access, even if the original security hole is patched. We set up a Red Hat 6.2 system on the Georgia Tech honeynet, and within days, an attacker had compromised the system and installed a kernel-level rootkit.

If a system administrator notices a compromise, they will take immediate action to block the attacker. However, a rootkit can hide the attacker's activities, files, and backdoor entry points, breaking trust in system reporting facilities (e.g., /bin/ls, /usr/bin/top, /sbin/lsmod). While a user-level rootkit can be mitigated by using known good utilities, a kernel-level rootkit replaces running kernel code, making it more challenging to restore trust without a complete reinstallation.

**2.1 Related Work**

Thimbleby, Anderson, and Cairns developed a mathematical framework to model Trojans and viruses, discussing recursive infections that lead to the idea behind kernel-level rootkits. Recent research has focused on characterizing rootkits by determining the differences between a baseline system and a compromised system.

Government organizations, such as the National Infrastructure Security Co-ordination Centre for the United Kingdom, have published reports on Trojans and rootkits, discussing detection, remediation, and prevention. Other work has been conducted towards detecting and preventing kernel-level rootkits, including the use of file system integrity checkers like Tripwire and various open-source tools like chkrootkit, kerncheck, CheckIDT, and Saint Michael.

**2.2 Broader Scope**

Intrusion prevention and detection have not sufficiently slowed the growth of computer compromises. Research is shifting towards intrusion tolerance, with a focus on repair and recovery. In this paper, we explore recovering from system compromises, particularly in scenarios where traditional reinstallation is undesirable, such as in military systems, enterprise servers, or large clusters of machines.

We are also motivated by the need for forensic analysis on compromised systems. Gathering evidence for legal purposes and understanding the attack to prevent future incidents is crucial. Much of the evidence in a compromised system may only be resident in memory, so it must be recovered before powering off the machine. Restoring trust is essential to retrieve accurate information.

While our work focuses on recovering operating system structures, the most damaging part of a compromise is often the data, such as passwords, credit card numbers, and keys. Our work does not solve the problem of data compromise but is a step in that direction. We envision self-healing systems that automatically detect and halt attacker activity to minimize damage.

**3. Analysis of Current Generation Kernel-Level Rootkits**

Kernel-level rootkits modify or insert code that runs in kernel mode. These rootkits may include user-level components but must have some functionality at the kernel level. Based on our experience, we classify kernel-level rootkits by two characteristics: Penetration into the kernel and Modification of the system call table.

**3.1 Penetration**

We classify current generation kernel-level rootkits into two types based on their technique for modifying kernel code:
- **Module:** Enters malicious code into the kernel via a loadable kernel module (LKM), which hides itself from system reporting facilities.
- **User:** Patches running kernel code with malicious code from a user-space process, often accessing kernel memory through /dev/kmem.

**3.2 Modification**

We also classify rootkits based on how they modify the system call table:
- **Entry Redirection:** Redirects individual system calls within the system call table.
- **Entry Overwrite:** Overwrites individual system call code.
- **Table Redirection:** Redirects the entire system call table.

**Figure 1(a):** Shows how a kernel-level rootkit can redirect individual system calls within the system call table. The sys_fork system call is unmodified, but system calls number three and four point to trojaned system calls.

**Figure 1(c):** Represents kernel memory after a rootkit with Entry Overwrite has been installed. The sys_read and sys_write system calls have been overwritten, but the system call table itself is unaltered.

**Figure 1(b):** Depicts kernel memory after a rootkit with Table Redirection has been installed. The Interrupt Descriptor Table (IDT) points to a trojaned system call table.

**Kernel Memory:**
- **sys_fork:** Unmodified
- **sys_read, sys_write:** Redirected or Overwritten

This classification helps in understanding the behavior and impact of different types of kernel-level rootkits.