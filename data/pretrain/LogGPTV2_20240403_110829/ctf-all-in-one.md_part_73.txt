5.2.1 Pin
action, AFUNPTR funptr, ...)
BBL
VOID LEVEL_PINCLIENT::BBL_InsertCall(BBL bbl, IPOINT
action, AFUNPTR funptr, ...)
其中 funptr 为用户自定义的分析函数，函数参数与 ... 参数列表传入的参数
个数相同，参数列表以 IARG_END 标记结束。
Pin 在 CTF 中的应用
由于程序具有循环、分支等结构，每次运行时执行的指令数量不一定相同，于是我
们可是使用 Pin 来统计执行指令的数量，从而对程序进行分析。特别是对一些使用
特殊指令集和虚拟机，或者运用了反调试等技术的程序来说，相对于静态分析去死
磕，动态插桩技术是一个比较好的选择。
我们先举一个例子，源码如下：
#include
#include
void main() {
char pwd[] = "abc123";
char str[128];
int flag = 1;
scanf("%s", str);
for (int i=0; i y+10) {
ERROR;
}
}
}
int main() {
x = sym_input();
y = sym_input();
testme(x, y);
return 0;
}
这段代码的执行树如下图所示，图中的三条路径分别可以被输入 {x = 0, y = 1}、{x
= 2, y = 1} 和 {x = 30, y = 15} 触发：
763
5.3 符号执行
符号执行中维护了符号状态 σ 和符号路径约束 PC，其中 σ 表示变量到符号表达式
的映射，PC 是符号表示的不含量词的一阶表达式。在符号执行的初始化阶段，σ
被初始化为空映射，而 PC 被初始化为 true，并随着符号执行的过程不断变化。在
对程序的某一路径分支进行符号执行的终点，把 PC 输入约束求解器以获得求解。
如果程序把生成的具体值作为输入执行，它将会和符号执行运行在同一路径，并且
以同一种方式结束。
例如上面的程序中 σ 和 PC 变化过程如下：
开始： σ = NULL PC = true
第6行： σ = x->x0, y->y0, z->2y0 PC = true
遇到if(e)then{}else{}：σ = x->x0, y->y0 then分支：PC = PC∧σ(e)
else分支：PC' = PC∧¬σ(e)
于是我们发现，在符号执行中，对于分析过程所遇到的程序中带有条件的控制转移
语句，可以利用变量的符号表达式将控制转移语句中的条件转化为对符号取值的约
束，通过分析约束是否满足来判断程序的某条路径是否可行。这样的过程也叫作路
764
5.3 符号执行
径的可行性分析，它是符号执行的关键部分，我们常常将符号取值约束的求解问题
转化为一阶逻辑的可满足性问题，从而使用可满足性模理论（SMT）求解器对约束
进行求解。
检测程序漏洞
程序中变量的取值可以被表示为符号值和常量组成的计算表达式，而一些程序漏洞
可以表现为某些相关变量的取值不满足相应的约束，这时通过判断表示变量取值的
表达式是否可以满足相应的约束，就可以判断程序是否存在相应的漏洞。
使用符号执行检测程序漏洞的原理如下图所示：
举个数组越界的例子：
int a[10];
scanf("%d", &i);
if (i > 0) {
if (i > 10)
i = i % 10;
a[i] = 1;
}
首先，将表示程序输入的变量 i 用符号 x 表示其取值，通过分别对 if 条件语句的两
条分支进行分析，可以发现在赋值语句 a[i] = 1 处，当 x 的取值大于 0、小于 10
时，变量 i 的取值为 x，当 x 的取值大于 10 时，变量 i 的取值为 x % 10。通过分析
765
5.3 符号执行
约束 (x>10∨x10∨x%1010 的可满足
性，可以发现漏洞的约束是不可满足的，于是认为漏洞不存在。
构造测试用例
在符号执行的分析过程中，可以不断地获得程序可能执行路径上对程序输入的约
束，在分析停止时，利用获得的对程序输入的一系列限制条件，构造满足限制条件
的程序输入作为测试用例。
在模拟程序执行并收集路径条件的过程中，如果同时收集可引起程序异常的符号取
值的限制条件，并将异常条件和路径条件一起考虑，精心构造满足条件的测试用例
作为程序的输入，那么在使用这样的输入的情况下，程序很可能在运行时出现异
常。
方法实现
使用符号执行技术进行漏洞分析，首先对程序代码进行基本的解析，获得程序代码
的中间表示。由于符号执行过程常常是路径敏感的分析过程，在代码解析之后，常
常需要构建描述程序路径的控制流图和调用图等。漏洞分析分析的过程主要包括符
号执行和约束求解两个部分，并交替执行。通过使用符号执行，将变量的取值表示
为符号和常量的计算表达式，将路径条件和程序存在漏洞的条件表示为符号取值的
约束。约束求解过程一方面判断路径条件是否可满足，根据判断结果对分析的路径
进行取舍，另一方面检查程序存在漏洞的条件是否可以满足。符号执行的过程常常
需要利用一定的漏洞分析规则，这些规则描述了在什么情况下需要引入符号，以及
在什么情况下程序可能存在漏洞等信息。
正向的符号执行
正向的符号执行用于全面地对程序代码进行分析，可分为过程内分析和过程间分
析。
过程内分析逐句地地过程内的程序语句进行分析：
声明语句分析
通过声明语句，变量被分配到一定大小的存储空间，在检测缓冲区溢出漏
洞时，需要记录这些存储空间的大小。
分析声明语句的另一个目的是发现程序中的全局变量，记录全局变量的作
766
5.3 符号执行
用范围，这将有助于过程间分析。
赋值语句分析
将赋值变量的取值表示为符号和常量的表达式。
在检查程序漏洞时，常常对数组下标进行检查，判断对数组元素的访问是
否存在越界。
对于和指针变量有关的赋值语句，不仅需要考虑指针变量本身的取值，还
需要考虑其指向的内容。
控制转移语句分析
将路径条件表示为符号取值的约束并进行求解，可以判断路径是否可行，
进而对待分析的路径进行取舍。
调用语句分析
一些过程调用语句会进入符号，在分析过程中，将表示程序输入的变量的
取值用符号表示，而程序可以通过过程调用接收程序的输入。对于指针变
量，命令行参数同样使用符号表示其取值。
通过过程调用语句，变量被分配的存储空间的大小常常是在分析时所需要
记录的。
对于一些关键的过程调用，需要对其使用情况进行检查，如 strcpy，需要
检查参数以判断是否存在缓冲区溢出。
对于一些库函数或者系统调用等非程序代码实现的过程，用摘要描述所关
心的分析过程和结果，可以避免重复分析。
过程间分析常常需要考虑按照怎样的顺序分析程序语句，如深度优先遍历和广度优
先遍历。另外在进行分析时，需要先确定一个分析的起始点，可以是程序入口点、