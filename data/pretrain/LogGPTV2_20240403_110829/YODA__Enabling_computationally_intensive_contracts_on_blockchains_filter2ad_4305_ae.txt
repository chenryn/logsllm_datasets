k grows unboundedly with k, it follows
that for large sized ITs, and some ﬁnite round i, the number of
√
strong indices grows unboundedly w.h.p. Since the root values
at these strong indices are not known w.h.p. (except for trivial
CICs where storage does not change over indices) the ﬁnal
seed also cannot be known w.h.p.
The next result shows that the probability of occurrence of
any particular seed value is vanishingly small assuming the
roots at different strong indices are mutually independent.
Theorem VII.7. Let the probability mass distribution of the
root at all strongly unmatched indices in round i be upper
bounded by 1 − λ for some λ > 0. Let the last segment of
the CIC be of size 2k. Then as k → ∞ the probability mass
function of the seed at the end of RICEi is negligible assuming
an ideal hash function, and that the root at different unmatched
indices are mutually independent.
Proof Sketch: Let j ∈ [1 : X] denote the X strongly
unmatched indices, and rj and sj the corresponding root and
seed. Since the hash function is ideal, it maps unique inputs
to unique outputs.
Thus P (hash(sj||rj)) = P (sj, rj) = P (sj)P (rj). The
assumption.
last
strong
We
that
unmatched index,
and hence
P (s1) = 1. Denoting seedX+1 as the ﬁnal seed, we have
j max P (rootj) ≤ (1 − λ)X.
k w.h.p. as k → ∞ we have
equality is due
s1,
assume
is known to the node
P (seedX+1) =(cid:81)
j P (rj) ≤(cid:81)
independence
the ﬁrst
to the
seed
the
√
at
Since X is larger than
P (sX+1) → 0.
Remark: The roots of indices “far apart” being independent
is not unrealistic, except for trivial CICs. Strong unmatched
indices are in different segments and hence except for neigh-
boring indices, they are separated by whole segments, and
hence we conjecture that the independence assumption is a
good approximation in practice. We also conjecture that the
same result holds for weaker assumptions than stated in the
theorem and leave the proof for future work.
C. Free-loading attack
We now analyze a free-loading attack where a quasi-honest
node skips computation of the CIC by using information
available on the blockchain and/or state information of Ψ(σ, τ )
from previous rounds received from an adversary §IV. We
consider the best case scenario for the free-loading node where
it knows the correct root of the digest w.h.p. but has to
guess the seed. We analyze the case where Byzantine nodes
have maximum fraction fmax in SP and all submit the same
incorrect root with the same seed in order to maximize the
probability of MIRACLE selecting their solution, and where
quasi-honest nodes do not collude.
Denote the proﬁle where all quasi-honest nodes execute the
CIC as −→a and the proﬁle where only a single quasi-honest
node ni free-loads as −→a −i. With −→a the analysis of MIRACLE
with honest and Byzantine nodes holds. Hence quasi-honest
nodes win reward R with probability 1 − β, and lose their
deposits D with probability β. The cost of computing the CIC
is c1. Hence the utility for ni with this proﬁle is
Ui(−→a ) = (1 − β)R − βD − c1
(13)
Let γ be the probability of ni guessing the correct seed while
free-loading. If it guesses the correct seed then its probabilities
of winning a reward and losing its deposit are (1−β) and β as
11
above. If it guesses the wrong seed then it loses its deposit. We
denote by c2 the cost of bandwidth consumed for downloading
intermediate storage of previous rounds from an adversary
and analyzing them to predict the seed. Then the utility
From (13) and (14) we obtain Ui(−→a ) − Ui(−→a −i) > 0 iff
Ui(−→a −i) = γ((1 − β)R − βD) − (1 − γ)D − c2
(14)
≈ c1 − c2
(15)
R + D >
c1 − c2
(1 − β)(1 − γ)
where the last approximation is due to the fact that γ is
vanishingly small in practice and β is a design parameter
chosen to be small. Since R > c1, that is the reward must
be more than the cost of computation, we see that (15) is true.
Hence proﬁle −→a is a Nash equilibrium [19].
D. Collusion Attack
We now consider the case where a group C of ES nodes
collude to submit a common seed. We assume they know the
correct root w.h.p, that Byzantine nodes all submit the same
incorrect root with the same seed in order to maximize the
probability of MIRACLE selecting their solution, and that all
other quasi-honest nodes execute the CIC correctly. Since |ES|
is random, nodes in C cannot be entirely sure if |C| is larger
than th1|ES| or less than th2|ES|. Suppose |C| > th1|ES|
with probability γ1 and |C| < th2|ES| with probability γ2. The
computation cost of colluding requires solution of ZK-proofs
since nodes need to prove they belong to ES without revealing
their Denote the associated costs by c3 and this proﬁle by
−→a −C.
In case the Byzantine nodes win MIRACLE, C lose their
deposits. In case the correct root is selected by MIRACLE, C
win a reward with probability γ1, and lose their deposits with
probability γ2. Hence utility for node ni ∈ C
(16)
In case γ1 = 1, Ui(−→a ) is a -Nash equilibrium [22] with
 = c3 − c1. In this special case, if the c3 is larger than the
CIC computation cost itself, the nodes are better off being
honest. Note that higher |C| increases γ1, but also increases c3
because of more ZK proofs, and related communication costs.
Ui(−→a −C) = γ1((1 − β)R − βD) − γ2D − c3
E. Meeting the Requirements.
We here summarize how various mechanisms in YODA meet
the goals listed in §I. Most requirements are met due to MIRA-
CLE. For all fmax < 0.50, MIRACLEterminates and thus off-
chain execution of a CIC also Terminates. MIRACLE allows
a system parameter β which is the probability of accepting a
incorrect solution, thus achieving Validity with tunable high
probability. Agreement on off-chain CIC execution trivially
follows from the safety guarantees of the blockchain. Recall
in YODA, to initiate the reward mechanism process ES nodes
need to submit the correct storage root in the blockchain and
the miners verify it before its inclusion ensuring Availability
of the post-execution state σ∗.
Since YODA never requires the blockchain to verify the CIC
execution on-chain, YODA is Oblivious. YODA requires ES
to be much smaller than naive approaches discussed in §III
thus making YODA Efﬁcient. MIRACLE is Adaptive to the
fraction of Byzantine nodes in SP, and terminates earlier the
smaller this is §III. For appropriate choice of th1, th2 in §VI
YODA ensures weak-Fairness.
12
F. Stronger Adversary Scenarios with Rational Nodes
We now discuss how YODA may perform if we replace
quasi-honest nodes by rational nodes and also allow stronger
adversaries. Unlike quasi-honest nodes, rational nodes are
not conservative (ref. §II-A) towards Byzantine nodes. The
stronger adversary is allowed to try to reveal information about
the current round to a rational node, and not just information
about past rounds.
Consider the case where an adversary A is actively providing
information about the root at intermediate RICE indices for the
current round. Recall from RICE §VII-B that for each round
we will have a large number of strong unmatched indices with
large probability, and thus for all such unmatched indices, a
rational node N , has to obtain the root from A. How will
A convince N about the correctness of the states at these
intermediate points? One mechanism is that A commits its
digest in the current round and gives a zk-Proof to N about
it. A challenge for N is that it does not know whether A
is Byzantine or rational. Even if we consider that rational
nodes commit correct digest, when A is Byzantine then its
commitment could be false.
Consider the case where two or more rational nodes in an
ES want to collaborate to generate the correct digest. Consider
one rational node NR interacting with another node NU which
might potentially be Byzantine. First, both nodes must prove
that they belong to ES. Ruling out a non-Interactive zk-Proof,
NR and NU have to produce an interactive zk-Proof, and
this may be vulnerable to DoS attacks. Once the proofs are
established, one strategy could be to split the execution among
them. This situation again boils down to trusting the result
claimed by NU about its execution.
Finally we discuss pragmatic concerns related to a collusion
attack. In our utility analysis we considered the case where
all nodes in the colluding set C are all quasi-honest but in
practice it will possibly contain Byzantine nodes as well. This
will possibly lower the probability γ1 of successful collusion.
Since the success of the collusion attack depends on |ES|,
imperfect knowledge of |ES| during the commitment phase of
RICE lowers γ1 even more. Interestingly even with knowledge
of |ES| prior to collusion and |C| ≥ th1|ES|, the success truly
depends on the behavior of Byzantine nodes in C.
VIII.
IMPLEMENTATION AND EVALUATION
To experimentally evaluate the scalability of YODA, we
have implemented a prototype which includes all parts of
YODA except SP selection, on top of the popular Ethereum
geth client version 1.8.7 and evaluate them in a private
network. The SP selection procedure is independent of CIC
transaction gas limits and hence does not impact scalability.
Our implementation consists of ∼500 lines of code (LOC) in
Solidity (for the Master Contract and sample CICs) and ∼2000
LOC in python on top of the interface for the modiﬁed client
whose task is detailed below.
Experimental Environment. We use 8 physical machines
each with a 2.80 × 8 GHz intel Core-i7 processor with 8GB
RAM and running Ubuntu 17.10 to simulate 16 off-chain
clients. Each client emulates 100 YODA nodes thus making
M = |SP| = 1600. Since off-chain CIC execution requires
considerable computations resources, we restrict the number of
clients per machine to two. All these 16 clients are connected
to an Ethereum network created using geth which we consider
n
i
(
i
)
s
d
n
o
c
e
s
wsrc
wbuf
wsr
240
220
200
180
160
140
120
100
80
60
40
20
0
Gas Usage (multiples of 5.3), |ES| = 40
Figure 3: Measured CIC execution time with
varying gas usage.
e
m
T
107
106
108
109
1010
)
s
d
n
o
c
e
s
n
i
(
e
m
T
i
120
100
80
60
40
20
1
wsrc
wbuf
wsr
2
16
# Parallel CICs, |ES| = 40
4
8
Figure 4: Average digest commit
increasing number of parallel ITs.
time with
β = 10−10 (Theo.)
β = 10−10 (Expt.)
β = 10−6 (Theo.)
β = 10−6 (Expt.)
8
7
6
5
4
3
2
1
s
d
n
u
o
r
#
d
e
t
c
e
p
x
E
0
0.2
0.25
0.30
0.35
0.40
0.45
fmax
Figure 5: Change in Expected number of rounds
vs. fmax for |SP| = 1600, q = 0.125.
to be the blockchain network. The blockchain runs on Proof
of Authority in geth which is a developer mode option in
the Ethereum private network to keep the block mining time
ﬁxed. A separate physical machine with similar speciﬁcations
handles transactions and mines blocks. To achieve a required
|ES| we allow a single client to execute an IT only once
and submit commitments for multiple SP nodes based on how
many of its nodes are selected by Sortition. For each execution
we regulate q to achieve an appropriately sized ES.
Executing CICs in the EVM. To execute ITs off-chain, each
client in our system runs a modiﬁed EVM supported with an
implementation of RICE. This EVM provides the interface
for off-chain execution of a CIC. The clients deploy the
contract in their local EVM whenever a CIC is created on the
blockchain. When a IT is broadcast on-chain, clients download
the transaction and execute them locally in the EVM based on
the sortition result. After execution each client broadcasts a
transaction containing the digest for each of its ES nodes. An
identical mechanism is used to reveal the commitment.
A. Scalability of CICs.
We start with a CIC containing a parameterizable function
called Compute() with parameter η which sets the amount
of gas to be used. Internally Compute() runs iterations
modifying a CIC state variable after performing arithmetic
operations. We start Compute() with gas usage 5.3 × 106
and increase this by a factor of 10 rising up to 5.3 × 1010.
Note that each Ethereum block can only accommodate up to
8M gas in 15 seconds (avg. block generation time) at the time
of writing and hence we conclude that its maximum gas usage
per second is 5.3 × 105.
Varying Gas Usage. In Figure 3 we plot the average of mea-
sured time from the start of the round up to the commitment
(S1-S2) as a red line and the range of values as error bars.
Observe that the average time remains constant at about 20
secs till gas usage of 5.3 × 108 after which it increases to
about 30 secs for 5.3 × 109 and to about 100 secs after that.
The total submission time includes off-chain computation time
and in addition Ethereum on-chain delays, such as the time for
a transaction to be included in a block on-chain. Clearly for
gas 5.3× 109 or less the on-chain delays dominate after which
off-chain delays dominate.
We also plot a bar graph depicting the windows for com-
mitting the storage root wsrc, the buffer period wbuf , and the
window to reveal the storage root value wsr. Among the three