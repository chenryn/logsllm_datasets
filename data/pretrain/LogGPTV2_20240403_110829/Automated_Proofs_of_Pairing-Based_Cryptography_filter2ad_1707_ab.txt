Figure 2: Signature for expressions.
acle deﬁnitions. In assertions, we support event expressions
ev ∈ Exprev, which are also deﬁned in Figure 3. The quantiﬁ-
cations range over the parameters used in adversary queries.
For example, the assertion assert(∀c ∈ QDec1 . c (cid:54)= c∗) ex-
presses that c∗ is a ciphertext that has not been queried to
the decryption oracle Dec1. We use osym(G) to denote all
oracle symbols occuring in a game G and asym(G) to de-
note all adversary symbols occuring in a game G. We say a
game G is well-formed if it is well-typed, does not contain
free variable occurences, all oracle and adversary symbols
are distinct, and all binders bind distinct variables. To sim-
plify the presentation, we allow for at most one exceptional
value in random samplings. This restriction can be lifted,
but care must be taken to ensure that the types are large
enough such that the support of the resulting distribution is
not empty.
We say a tuple S = (I,{δo}o∈osym(G),{AA}A∈asym(G)) is
a G-setting if I is an interpretation, δ is an indexed set of
query bounds for oracle symbols occuring in G, and A is an
indexed set of adversaries for adversary symbols occuring
in G. Given such a setting, we can execute G as follows:
1. Compute generators of the groups Gi by random sam-
pling or by applying the bilinear maps and isomor-
phisms to generators that have already been computed.
2. For each oracle o occuring in G, we initialize a counter
variable co with zero and a query set variable Qo with
the empty set.
3. For a let binding let x = e, we evaluate the expression e
using the operations deﬁned by I and store the result
in the variable x.
4. For a random sampling x ←$ t\ a, we evaluate a denot-
ing the result with b, uniformly sample from the set
I(t) \ {b} (where I(t) is set of values of type t), and
store the result in the variable x.
5. For an assertion assert(ev), we evaluate ev and abort
if the result is false.
asym(G) =
if G = G[no := f ]
asym(G, A) \ {A} if G = G[A := A]
6. For an adversary call y ← A(e) with (cid:126)O, we evaluate e
and call the adversary AA with the result as input.
The adversary is provided with access to the imple-
mentations of the oracles (cid:126)O. We allow the adversary
procedures AA to share state.
The oracles are implemented as follows:
1. If co ≥ δo, then ⊥ is returned. Otherwise, the counter
co is increased, the query parameters are stored in Qo,
and the oracle body is executed.
2. Guards are treated similar to assertions, but instead
of aborting, the value ⊥ is returned to the adversary
and execution continues normally.
To perform reductions, we want to be able to state that a
game G(B) is equivalent to a game G(cid:48)(A), capturing a cryp-
tographic assumption, when the adversary A is instantiated
in a certain way. Usually, A is instantiated with a simula-
tor that simulates G to the original adversary B and uses
B’s output to break the assumption. Additionally, we might
want to express the oracle bounds for A in G(cid:48) in terms of
oracle bounds for B in G.
To achieve this, we extend our syntax and semantics to
support the instantiation of adversaries and oracle bounds.
We extend the syntax of games as follows. A game G is
either an uninstantiated game G as deﬁned before, a game
G[no := f ] where the bound for calls to o is instantiated
by the polynomial f over oracle bounds, a game G[A := A]
where the adversary symbol A is instantiated with the adver-
sary deﬁnition A. Here, A is deﬁned in some language that
extends our language of games, e.g., the probabilistic pro-
gramming language PWhile [8] used in EasyCrypt. We allow
such adversary deﬁnitions A to include calls to unspeciﬁed
adversary procedures identiﬁed by adversary symbols B. To
prevent cyclic deﬁnitions, we assume that o /∈ osym(f ) and
A /∈ asym(A). We extend asym to return only uninstanti-
ated adversary symbols:
(cid:26) asym(G)
1158O ::= o(x) = { (cid:126)oc; return e} oracle deﬁnition
oc
gc
::= c
|
guard(b)
ordinary command
guard for b ∈ ExprB
::= c
|
|
assert(ev)
y ← A(x) with (cid:126)O
ordinary command
assertion for ev ∈ Exprev
adversary call with oracles
GBB =
2 ∗ P3)e);
i∗ ← A1();
1 : c, d, h ←$ Fq; let P =(gc, gd, gh);
2 :
3 : b ←$ B; e ←$ Fq; let C =(ge, (P i∗
let K0 = ˆe(P1, P2)e; K1 ←$ Gt;
4 :
5 : b(cid:48) ← A2(P, C, (b?K0 : K1)) with
PrivKey(i) = {
guard(i (cid:54)= i∗);
r ←$ Fq;
return (g(c∗d+r∗(d∗i+h)), gr)
5.1 :
5.2 :
5.3 :
};
c
::= let x = e
|
x ←$ t \ a
let binding
sample unif. from t \ {a}
ev
b
∃ b1, . . . , bk. e
∀ b1, . . . , bk. e
::= e
|
|
::= x ∈ Qo
expression
there exist queries
for all queries
x ranges over queries
Figure 3: Grammars for oracle deﬁnitions and
games.
Similarly, we extend osym to return only uninstantiated or-
acle symbols:
(cid:26) osym(G, f ) \ {o} if G = G[no := f ]
osym(G)
if G = G[A := A]
osym(G) =
The deﬁnition of G-setting remains unchanged, but uses the
extended versions of asym and osym. The instantiated or-
acle bounds and the instantiated adversaries are then com-
puted from the bound polynomials and adversary deﬁnitions
by using δ and A for the occuring oracle and adversary sym-
bols.
3.4 Security experiments and judgments
A security experiment SE is a pair [ G : ev ] of a game
G and an event expression ev. We say a security experi-
ment is well-formed if G; assert(ev) is well-formed. We use
PrS[ G : ev ] to denote the probability that the execution
of G in the setting S terminates without aborting and ev
evaluates to true in the ﬁnal memory.
We use the following grammar to deﬁne the set PExpr of
probability expressions:
P, P (cid:48)
::= 0
|
|
|
|
|
|
P + P (cid:48)
no × P
1/|t|
[ G : ev ]succ
[ G : ev ]adv
[ G : ev ][ G(cid:48) : ev(cid:48) ] distinguishing prob.
zero
addition
security loss
collision bound
success prob.
advantage prob.
We call the subscripts succ, adv, and [ G(cid:48) : c(cid:48) ] probabil-
ity tags. We say S = (I, δ,A) is a P -setting if dom(δ) =
osym(P ) and dom(A) = asym(P ). Given such a P -setting S,
we deﬁne the probability function probS(P ) that assigns
GDBDH
β
=
a, b, c ←$ Fq; t ←$ Fq
b ← B(ga, gb, gc, ˆe(g, g)a b c
[β=1]
[β=0]
ˆe(g, g)t
[β=1]
)
Figure 4: Game for IND-sID-CPA security of the
Boneh-Boyen-IBKEM and game for DBDH assump-
tion. The overlined expressions only occur for β = 0
(resp. β = 1).
probabilities to probability expressions as follows:
probS(P ) =
0
probS(P1) + probS(P2)
δo probS(P1)
1/|I(t)|
PrS[ SE ]
PrS[ SE ] − 1
| PrS[ SE ] − PrS[ SE(cid:48) ]|
2
if P = 0
if P = P1 + P2
if P = no × P1
if P = 1/|t|
if P = [ SE ]succ
if P = [ SE ]adv
if P = [ SE ]SE(cid:48)
A probability judgment J is a pair P (cid:22) P (cid:48) of probability
expressions. A judgment P (cid:22) P (cid:48) is valid if
1. asym(P (cid:48)) ⊆ asym(P ),
2. osym(P (cid:48)) ⊆ osym(P ), and
3. for all P -settings S, it holds that probS(P ) ≤ probS(P (cid:48)).
Conditions (1) and (2) ensure that all adversary and oracle
symbols that occur only in P (cid:48) must be instantiated.
Example 1. For the games given in Figure 4, we can ex-
press the probability associated to the IND-sID-CPA secu-
rity of the Boneh-Boyen-IBKEM as [ GBB : b = b(cid:48) ]adv and we
can express the DBDH assumption as
[ GDBDH
0
: b ][ GDBDH
1
: b ] .
We consider the key encapsulation mechanism (KEM) vari-
ant of the Boneh-Boyen identity-based encryption scheme [14]
to simplify the presentation of our example. The game GBB
proceeds as follows.
In line 1, the master secret key and
the public parameters are computed. In line 2, the adver-
sary must choose the challenge identity.
In lines 3 and 4
the challenge encapsulation C, the corresponding session
key K0, and a random session key K1 are computed.
In
line 5 the adversary is called and must guess if he received
the real or a random session key. He is provided with access
to the PrivKey-oracle that returns the private key for the
1159given identity, which is computed in lines 5.2 and 5.3. The
guard in line 5.1 denies queries for the challenge identity.
We would like to prove the probability judgment
[ GBB : b = b
(cid:48)
]adv (cid:22) [ GDBDH
0
[B := B] : b ][ GDBDH
1
[B:=B] : b ]
for some adversary deﬁnition B that can use A1 and A2.
The judgment formalizes that the IND-sID-CPA advantage
for all adversaries A1 and A2 instantiating A1 and A2 can
be upper-bounded by the DBDH distinguishing probability
for B (using A1 and A2).
In the next section, we will present a logic that allows us
to prove the validity of such judgments P (cid:22) P (cid:48). The logic
takes a probability expression P and during proof construc-
tion, the bound P (cid:48) and the oracle polynomials and adversary
deﬁnitions for reductions are synthesized. Our logic captures
concrete security [11] since we explicitly relate adversaries
and bounds in P and P (cid:48).
4. CORE LOGIC
In this section, we present our core logic. We focus on
a subset of rules that is suﬃcient for proofs that do not
require advanced techniques such as hybrid arguments or
equivalence up to failure. We ﬁrst present these core rules.
Then, we formalize and prove soundness of the logic. Finally,
we present algorithms for checking contextual equivalence of
expressions. We will present high-level rules derived from
the core rules in Section 5 and the remaining core rules in
Section 6.
4.1 Core rules
Our logic relates probability judgments and consist of
rules of the form
P1 (cid:22) 1
. . . Pk (cid:22) k
P (cid:22) 
where the Pi and P are probability expressions, the i are
metavariables, and  is a probability expression built over