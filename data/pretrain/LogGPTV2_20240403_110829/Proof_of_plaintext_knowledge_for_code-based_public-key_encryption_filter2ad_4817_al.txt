i
1RF(1)
1RF(1)
i+1(τ|i+1) + M∗
(τ|i)
i+1(τ|i+1) + M∗
i+1(τ|i+1)
Figure 3.5: Games G2.i (for 0 ≤ i ≤ λ),G2.i.1, G2.i.2 and G2.i.3 (for 0 ≤ i ≤ λ − 1) for the proof
of Lemma 14. For all τ ∈ {0, 1}λ, we denote by τ|i the i-bit preﬁx of τ. In each procedure,
the components inside a solid (dotted, gray) frame are only present in the games marked by a
solid (dotted, gray) frame.
3.1 Multi-ciphertext PCA-secure KEM
55
Lemma 15: From game G2.i to game G2.i.1
For all 0 ≤ i ≤ λ−1, there exists an adversary B2.i.0 such that T(B2.i.0) ≈ T(A)+(QEnc +
QDec) · poly(λ) and
|AdvG2.i(A) − AdvG2.i.1(A)| ≤ 2 · AdvUk(p)-mddh
G,B2.i.0
(λ) +
2
p − 1
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
Proof of Lemma 15. To go from G2.i to G2.i.1, we switch the distribution of the vectors [y]
sampled by EncO, using the QEnc-fold U3k,k(p)-MDDH assumption.
We introduce an intermediate game G2.i.0 where EncO(τ) is computed as in G2.i.1 if τi+1 = 0,
and as in G2.i if τi+1 = 1. The public key pk, and the oracle DecO are as in G2.i.1. We build
adversaries B′
2.i.0) ≈ T(A) + (QEnc + QDec) · poly(λ)
with poly(λ) independent of T(A), and
Claim 1: |AdvG2.i(A) − AdvG2.i.0(A)| ≤ Adv
Claim 2: |AdvG2.i.0(A) − AdvG2.i.1(A)| ≤ Adv
2.i.0 such that T(B′
QEnc-U3k,k(p)-mddh
G,B′′
QEnc-U3k,k(p)-mddh
G,B′
2.i.0) ≈ T(B′′
2.i.0 and B′′
2.i.0
(λ).
(λ).
2.i.0
This implies the lemma by Corollary 1 (Uk(p)-MDDH ⇒ QEnc-fold U3k,k(p)-MDDH).
Let us prove Claim 1. Upon receiving a challenge (G, [M0] ∈ G3k×k, [H] := [h1| . . .|hQEnc] ∈
G3k×QEnc) for the QEnc-fold U3k,k(p)-MDDH assumption with respect to M0 ←R U3k,k(p), B′
does as follows:
pk: B′
2.i.0 picks M ←R U3k,k, k1,0, . . . , kλ,1 ←R Z3k
For each τ queried to EncO or DecO, it computes on the ﬂy RFi(τ|i) and k′
M⊥RFi(τ|i), where kτ := Pλ
j=1 kj,τj , RFi : {0, 1}i → Z2k
denotes the i-bit preﬁx of τ (see Figure 3.5). Note that B′
from M.
p , and computes pk as described in Figure 3.5.
τ := kτ +
is a random function, and τ|i
p
2.i.0 can compute eﬃciently M⊥
2.i.0
EncO: To simulate the oracle EncO(τ) on its j’th query, for j = 1, . . . , QEnc, B′
2.i.0 computes
[y] as follows:
if τi+1 = 0 :
if τi+1 = 1 :
p; [y] := [Mr + hj]
r ←R Zk
[y] ←R G3k
This way, B′
in G2.i when [hj] ←R G3k.
2.i.0 simulates EncO as in G2.i.0 when [hj] := [M0r0] with r0 ←R Zk
p, and as
DecO: Finally, B′
2.i.0 simulates DecO as described in Figure 3.5.
QEnc-U3k,k(p)-mddh
Therefore, |AdvG2.i(A) − AdvG2.i.0(A)| ≤ Adv
G,B′
To prove Claim 2, we build an adversary B′′
2.i.0 against the QEnc-fold U3k,k(p)-MDDH as-
sumption with respect to a matrix M1 ←R U3k,k(p), independent from M0, similarly than
B′
2.i.0.
(λ).
2.i.0
Lemma 16: From game G2.i.1 to game G2.i.2
56
Chapter 3. Tightly CCA-Secure Encryption without Pairings
For all 0 ≤ i ≤ λ − 1,
|AdvG2.i.1(A) − AdvG2.i.2(A)| ≤
where QDec is the number of times A queries DecO.
2QDec + 2k
p
,
Proof of Lemma 16. In G2.i.2, we decompose Span(M⊥) into two subspaces Span(M∗
Span(M∗
τ which lie in Span(M∗
argue that G2.i.1 and G2.i.2 are statistically close, we use a Cramer-Shoup argument [CS03].
1), and we increase the entropy of the components of k′
0) and
0). To
Let us ﬁrst explain how the matrices M∗
p , (MkM0kM1) forms a basis of Z3k
least 1 − 2k
Ker(cid:0)(MkM1)⊤(cid:1) ⊕ Ker(cid:0)(MkM0)⊤(cid:1). We pick uniformly M∗
Ker(cid:0)(MkM1)⊤(cid:1) and Ker(cid:0)(MkM0)⊤(cid:1), respectively (see Figure 3). This way, for all τ ∈ {0, 1}λ,
1 are sampled. Note that with probability at
p . Therefore, we have Span(M⊥) = Ker(M⊤) =
that generate
we can write
1 in Z3k×k
0 and M∗
0 and M∗
p
M⊥RFi(τ|i) := M∗
0RF(0)
i (τ|i),
p are independent random functions.
i (τ|i) + M∗
1RF(1)
where RF(0)
, RF(1)
We deﬁne RF(0)
i
i
: {0, 1}i → Zk
i+1 : {0, 1}i+1 → Zk
p as follows:
RF(0)
i+1(τ|i+1) :=
RF(0)
RF(0)
i (τ|i)
i (τ|i) + RF′(0)
i (τ|i)
if τi+1 = 0
if τi+1 = 1
where RF′(0)
a random function.
: {0, 1}i → Zk
i
p is a random function independent from RF(0)
i
. This way, RF(0)
i+1 is
We show that the outputs of EncO and DecO are statistically close in G2.i.1 and G2.i.2. We
decompose the proof in two cases (delimited with (cid:4)): the queries with a tag τ ∈ {0, 1}λ such
that τi+1 = 0, and the queries with a tag τ such that τi+1 = 1.
Queries with τi+1 = 0:
i
in G2.i.1, whereas it uses the random function RF(0)
The only diﬀerence between G2.i.1 and G2.i.2 is that k′
RF(0)
by deﬁnition of RF(0)
and the outputs of EncO and DecO are identically distributed. (cid:4)
i+1, for all τ ∈ {0, 1}λ such that τi+1 = 0, k′
τ is computed using the random function
i+1 in G2.i.2 (see Figure 3.5). Therefore,
τ is the same in G2.i.1 and G2.i.2,
Queries with τi+1 = 1:
Observe that for all y ∈ Span(M, M1) and all τ ∈ {0, 1}λ such that τi+1 = 1,
G2.i.2
}|
0RF(0)
i (τ|i) + M∗
1RF(1)
i (τ|i) + M∗
0RF′(0)
z
y⊤(cid:16)kτ + M∗
= y⊤(cid:16)kτ + M∗
z
y⊤ ·(cid:16)kτ + M∗
=
{
i (τ|i)(cid:17)
{z
0RF′(0)
=0
i (τ|i)
}
i (τ|i)(cid:17) + y⊤M∗
{
i (τ|i)(cid:17)
|
0RF(0)
i (τ|i) + M∗
1RF(1)
0RF(0)
i (τ|i) + M∗
1RF(1)
G2.i.1
}|
where the second equality uses the fact that M⊤M∗
0 = M⊤
1M∗
0 = 0 and thus y⊤M∗
0 = 0.
This means that:
• the output of EncO on any input τ such that τi+1 = 1 is identically distributed in G2.i.1
and G2.i.2;
3.1 Multi-ciphertext PCA-secure KEM
57
same in G2.i.1 and G2.i.2.
• the output of DecO on any input (τ, [y],cK) where τi+1 = 1, and y ∈ Span(M, M1) is the
Henceforth, we focus on the ill-formed queries to DecO, namely those corresponding to τi+1 =
1, and y /∈ Span(M, M1). We introduce intermediate games G2.i.1.j, and G′
2.i.1.j for j =
0, . . . , QDec, deﬁned as follows:
• G2.i.1.j: DecO is as in G2.i.1 except that for the ﬁrst j times it is queried, it outputs 0 to
any ill-formed query. EncO is as in G2.i.2.
• G′
2.i.1.j: DecO as in G2.i.2 except that for the ﬁrst j times it is queried, it outputs 0 to
any ill-formed query. EncO is as in G2.i.2.
We show that:
G2.i.1 ≡ G2.i.1.0 ≈s G2.i.1.1 ≈s . . . ≈s G2.i.1.QDec ≡ G′
2.i.1.QDec ≈s G′
2.i.1.QDec−1 ≈s . . . ≈s G′
2.i.1.0 ≡ G2.i.2
where we denote statistical closeness with ≈s and statistical equality with ≡.
It suﬃces to show that for all j = 0, . . . , QDec − 1:
Claim 1: in G2.i.1.j, if the j +1-st query is ill-formed, then DecO outputs 0 with overwhelming
probability 1 − 1/q (this implies G2.i.1.j ≈s G2.i.1.j+1, with statistical diﬀerence 1/q);
Claim 2: in G′
2.i.1.j, if the j +1-st query is ill-formed, then DecO outputs 0 with overwhelming
probability 1 − 1/q (this implies G′
2.i.1.j ≈s G′
2.i.1.j+1, with statistical diﬀerence 1/q)
where the probabilities are taken over the random coins used to generate pk.
Let us prove Claim 1.
1RF(1)
0RF(0)
i (τ|i) + M∗
Recall that in G2.i.1.j, on its j + 1-st query, DecO(τ, [y],cK) computes K := [y⊤k′
τ := (cid:0)kτ + M∗
k′
formed, then K is completely hidden from A, up to its j + 1-st query to DecO. The reason
is that the vector ki+1,1 in sk contains some entropy that is hidden from A. This entropy is
“released" on the j + 1-st query to DecO if it is ill-formed. More formally, we use the fact that
the vector ki+1,1 ←R Z3k
p , and
w ←R Zk
i (τ|i)(cid:1) (see Figure 3.5). We prove that if (τ, [y],cK) is ill-
p. We show that w is completely hidden from A, up to its j + 1-st query to DecO.
p is identically distributed as ki+1,1 + M∗
0w, where ki+1,1 ←R Z3k
τ ], where
• The public key pk does not leak any information about w, since
M⊤(ki+1,1 + M∗
0w ) = M⊤ki+1,1.
This is because M⊤M∗
0 = 0.
• The outputs of EncO also hide w.
– For τ such that τi+1 = 0, k′
– For τ such that τi+1 = 1, and for any y ∈ Span(M, M1), we have:
τ is independent of ki+1,1, and therefore, so does EncO(τ).
y⊤(k′
τ + M∗
0w ) = y⊤k′
τ
(3.2)
since M⊤M∗
0 = M⊤
1M∗
0 = 0, which implies y⊤M∗
0 = 0.
• The ﬁrst j outputs of DecO also hide w.
– For τ such that τi+1 = 0, k′
τ is independent of ki+1,1, and therefore, so does
DecO([y], τ,cK).
– For τ such that τi+1 = 1 and y ∈ Span(M, M1), the fact that DecO(τ, [y],cK) is
independent of w follows readily from Equation (3.2).
58
Chapter 3. Tightly CCA-Secure Encryption without Pairings
– For τ such that τi+1 = 1 and y /∈ Span(M, M1), that is, for an ill-formed query,
DecO outputs 0, independently of w, by deﬁnition of G2.i.1.j.
τ + M∗
K = [y⊤(k′
0w)] = [y⊤k′
This proves that w is uniformly random from A’s viewpoint.
Finally, because the j + 1-st query (τ, [y],cK) is ill-formed, we have τi+1 = 1, and y /∈
Span(M, M1), which implies that y⊤M∗
0 6= 0. Therefore, the value
τ + y⊤M∗
w]
0
| {z }
computed by DecO is uniformly random over G from A’s viewpoint. Thus, with probability