### Detecting Ongoing Side-Channel Attacks

The primary objective is to detect ongoing side-channel attacks against specific applications by monitoring, for example, the CPU usage of currently executing applications. App Guardian operates on the assumption that if the CPU usage of an application increases while a protected application is running, it may be performing a side-channel attack. Upon detecting such a suspicious application, it will be terminated.

App Guardian, developed in 2015, relies on `getRunningTasks()` and `/proc/<pid>/statm` to detect ongoing side-channel attacks. However, both resources are no longer available starting from Android N (Android 7). Consequently, in its current form, App Guardian does not provide protection against side-channel attacks on recent Android versions. Additionally, Diao et al. [12] noted that App Guardian fails to prevent attacks exploiting `/proc/interrupts` on Android 5.1.1. Therefore, App Guardian must be updated for more recent Android versions, which could be a tedious task required for each new Android release.

### Restricting Access to procfs Resources

Although Android has been hardened, our investigations indicate that more stringent restrictions for procfs interfaces are necessary. The attack surface has been reduced by continuously restricting access to per-process information (e.g., `/proc/<pid>/`) starting from Android M (Android 6) and by limiting access to global interrupt information (`/proc/interrupts`) in Android O (Android 8). However, ProcHarvester has identified several new information leaks that remain publicly accessible, as they are still considered harmless. ProcHarvester allows for a more systematic investigation of such information leaks, which is particularly valuable for OS designers and developers. For instance, although Android O restricts access to `/proc/vmstat`, ProcHarvester revealed that the same information is now available in `/proc/meminfo`. Thus, ProcHarvester is a crucial tool for automatically identifying and eliminating procfs information leaks in upcoming Android versions before their release.

### Evaluation of Countermeasures

ProcHarvester can also be used to automatically evaluate newly proposed countermeasures. If countermeasures do not restrict access to a resource but instead aim to protect it, for example, through noise injection [32] or by releasing more coarse-grained information [38], ProcHarvester enables developers to assess the effectiveness of these countermeasures at a larger scale.

### Limitations

ProcHarvester successfully identified many new procfs leaks that allow inferring application launches, visited websites, and keyboard gestures, as well as already known information leaks. For example, profiling app starts with ProcHarvester revealed the information leaks exploited by Diao et al. [12] to infer application launches. This demonstrates the effectiveness of the ProcHarvester framework. Moreover, the generic design of ProcHarvester can be adapted and extended to support the profiling of other events of interest. We have also shown that information leaks identified by ProcHarvester can be successfully exploited in subsequent side-channel attacks.

However, if ProcHarvester does not identify information leaks, it does not necessarily mean the system is secure and does not leak any information through procfs. By using the dynamic time warping approach, we can systematically analyze procfs resources, but this does not guarantee that an attacker cannot extract more targeted and specialized features that can be exploited.

Additionally, ProcHarvester currently only considers procfs resources that are frequently updated during the profiling of events. It does not consider static information published via the procfs. For example, Chen et al. [7] mentioned that app starts can also be inferred by monitoring `/proc/net/tcp6`, which contains destination IP addresses. This information, however, is static during the profiling and is currently ignored by ProcHarvester.

### Performance

ProcHarvester is an analysis tool designed to identify side-channel information leaks automatically. We did not optimize the Android app for stealthy attacks or battery consumption, nor did we optimize the backend analysis. The DTW-based approach scales quadratically with the number of events, as each trace is compared to all other traces to determine the inference accuracy.

For example, on an Intel Broadwell 2 GHz with 8 GB of RAM, the analysis takes 2–3 minutes for a set of 20 apps and 14 procfs resources. For a set of 100 apps and 14 procfs resources, the analysis takes 49 minutes. We did not optimize the DTW implementation, as our goal was to propose an analysis tool rather than a high-performance attack.

### Conclusion

In this paper, we introduced ProcHarvester, a technique to scan the entire procfs for information leaks in a fully automated manner. Based on the identified information leaks for application starts, we demonstrated an attack that significantly outperforms state-of-the-art application inference attacks. Furthermore, we showed how ProcHarvester automatically identifies information leaks for other events of interest, such as visited websites and keyboard gestures. Our investigations reveal that the threat of procfs information leaks is pervasive, and we identified several new side-channel leaks on Android 7 and the only procfs information leaks on the recently released Android 8.

Most importantly, ProcHarvester advances the investigation of procfs information leaks. The insights gained from using ProcHarvester assist OS designers and developers in detecting possible side-channel attacks resulting from information published via the procfs. We hope that future operating systems will be less susceptible to procfs-based attacks based on these insights.

### Acknowledgments

This project received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation program (grant agreement No 681402).

### References

[References listed as provided, with minor formatting adjustments for consistency and clarity.]

### Considered Android Applications on Android 7

Table 14 shows the 100 apps used in the evaluation of app cold start detection in Section 4. Precision and recall are determined based on 10 samples for each application. For comparison, we aimed to use the set of 100 apps used by Diao et al. [12]. However, only 65 of these apps were available at the time of writing, so we replaced the remaining 35 apps with common apps from the Google Play store.

| Package Name | Precision | Recall |
|--------------|-----------|--------|
| air.com.hoimi.MathxMath | 90% | 100% |
| air.com.hypah.io.slither | 90% | 100% |
| ... | ... | ... |
| com.whatsapp | 100% | 100% |

[Continued table with the full list of 100 apps and their respective precision and recall values.]