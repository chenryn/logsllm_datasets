idea is to detect ongoing side-channel attacks against specific ap-
plications by observing, for example, the CPU usage of currently
executing applications. Thereby, App Guardian assumes that if the
CPU usage of an application increases while an application to be
protected is executed, this application might perform a side-channel
attack. If such a suspicious application is detected, it will be stopped.
App Guardian [31] has been developed in 2015 and it relies
on getRunningTasks() as well as /proc//statm to detect
ongoing side-channel attacks. Both resources are not available any-
more since Android N (Android 7) and, thus, in its current form
App Guardian does not protect against side-channel attacks on re-
cent Android versions. Similarly, Diao et al. [12] observed that App
Guardian does not prevent attacks exploiting /proc/interrupts
on Android 5.1.1. Hence, App Guardian must inevitably be updated
for more recent Android versions, which might become a tedious
task required for each new Android version.
Restrict Access to procfs Resources. Although Android has al-
ready been hardened, our investigations show that more rigorous
restrictions for procfs interfaces are essential. The attack surface
has already been reduced by continuously restricting access to per-
process information (e.g., /proc//) starting from Android M
(Android 6) and also by restricting access to global interrupt infor-
mation (/proc/interrupts) in Android O (Android 8). However,
by relying on ProcHarvester we identified several new informa-
tion leaks that are still publicly available, as they are still considered
harmless. ProcHarvester allows to investigate such information
leaks more systematically, which is especially interesting for OS de-
signers and OS developers. For instance, although the new Android
O (Android 8) restricts access to /proc/vmstat, ProcHarvester
automatically revealed that the same information is now available
in /proc/meminfo. Hence, ProcHarvester constitutes a tool for
automatically identifying information leaks and is essential for
the elimination of procfs information leaks in upcoming Android
versions before they are released.
Evaluation of Countermeasures. ProcHarvester can also be
used to automatically evaluate newly proposed countermeasures.
Especially if countermeasures do not restrict access to a resource but
try to protect it, for example, by means of noise injection [32] or by
releasing more coarse-grained information [38], ProcHarvester
allows developers to automatically evaluate the effectiveness of a
proposed countermeasure at a larger scale.
7.2 Limitations
Among many new procfs leaks that allow to infer application
launches, visited websites, and keyboard gestures, ProcHarvester
also successfully identified already known information leaks auto-
matically. For example, profiling app starts with ProcHarvester
revealed the information leaks already exploited by Diao et al. [12]
in order to infer application launches. This demonstrates the effec-
tiveness of the proposed ProcHarvester framework. In addition,
the generic design of ProcHarvester can be adapted and extended
to support the profiling of other events of interest as well. We also
demonstrated that information leaks identified by ProcHarvester
can be successfully exploited in subsequent side-channel attacks.
A crucial point, however, is that if ProcHarvester does not
identify information leaks, it does not necessarily mean that the
system is secure and does not leak any information through the
procfs. By relying on the generic approach of dynamic time warping,
we are able to systematically analyze procfs resources automatically
but this does not guarantee that an attacker cannot extract more
targeted and specialized features that can be exploited.
Besides, ProcHarvester currently only considers procfs re-
sources that are frequently updated during the profiling of events.
This means that it does not consider static information published
via the procfs. For example, Chen et al. [7] mentioned that app starts
can also be inferred by monitoring /proc/net/tcp6, which con-
tains destination IP addresses. This information, however, is static
during the profiling and is currently ignored by ProcHarvester.
7.3 Performance
ProcHarvester represents an analysis tool that allows identifying
side-channel information leaks automatically. Thus, we neither
optimized the Android app in terms of a stealthy attack that aims to
reduce the battery consumption, nor did we optimize the analysis
in the backend. The DTW-based approach scales quadratically with
the number of events since each trace is compared to all other traces
in order to determine the inference accuracy.
For example, on an Intel Broadwell 2 GHz with 8 GB of RAM,
the analysis takes 2–3 minutes for a set of 20 apps and 14 procfs re-
sources. For a set of 100 apps and 14 procfs resources, this approach
takes 49 minutes. Again, we did not optimize the DTW implementa-
tion as we did not intend to implement a high-performance attack,
but to propose an analysis tool that allows identifying information
leaks that can be exploited to launch side-channel attacks.
8 CONCLUSION
In this paper we introduced ProcHarvester, a technique to scan
the entire procfs for information leaks in a fully automated fashion.
Based on the identified information leaks for application starts, we
demonstrated an attack that significantly outperforms state-of-the-
art application inference attacks. Furthermore, we demonstrated
how ProcHarvester automatically identifies information leaks for
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
R. Spreitzer, F. Kirchengast, D. Gruss, and S. Mangard
other events of interest such as visited websites and keyboard ges-
tures. Our investigations show that the threat of procfs information
leaks is omnipresent, and we identified several new side-channel
leaks on Android 7 as well as the only procfs information leaks on
the recently released Android 8.
Most importantly, ProcHarvester advances the investigation of
procfs information leaks. The information gained by using ProcHar-
vester assists OS designers and OS developers in detecting possible
side-channel attacks resulting from information published via the
procfs. Based on these insights, we hope that future operating sys-
tems will be less susceptible to procfs-based attacks.
ACKNOWLEDGMENTS
This project has received funding from the European Research
Council (ERC) under the European Union’s Horizon 2020 research
and innovation programme (grant agreement No 681402).
REFERENCES
[1] Android Developers. 2015. Android 6.0 Changes. https://developer.android.
com/about/versions/marshmallow/android-6.0-changes.html. (2015). Accessed:
August 2017.
[2] Android Developers. n. d.. Android Debug Bridge (ADB). https://developer.
android.com/studio/command-line/adb.html. (n. d.). Accessed: August 2017.
[3] Android Developers. n. d.. monkeyrunner. https://developer.android.com/studio/
test/monkeyrunner/index.html. (n. d.). Accessed: August 2017.
[4] Android Open Source Project. n. d.. Security-Enhanced Linux in Android. https:
//source.android.com/security/selinux/. (n. d.). Accessed: August 2017.
[5] Adam J. Aviv, Benjamin Sapp, Matt Blaze, and Jonathan M. Smith. 2012. Prac-
ticality of Accelerometer Side Channels on Smartphones. In Annual Computer
Security Applications Conference – ACSAC 2012. ACM, 41–50.
[6] Liang Cai and Hao Chen. 2011. TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion. In USENIX Workshop on Hot Topics in Security –
HotSec. USENIX Association.
[7] Qi Alfred Chen, Zhiyun Qian, and Zhuoqing Morley Mao. 2014. Peeking into Your
App without Actually Seeing It: UI State Inference and Novel Android Attacks.
In USENIX Security Symposium 2014. USENIX Association, 1037–1052.
[8] Maximilian Christ, Andreas W. Kempa-Liehr, and Michael Feindt. 2016. Dis-
tributed and Parallel Time Series Feature Extraction for Industrial Big Data
Applications. arXiv ePrint Archive, Report 1610.07717 (2016).
[9] Anupam Das, Nikita Borisov, and Matthew Caesar. 2014. Do You Hear What I
Hear?: Fingerprinting Smart Devices Through Embedded Acoustic Components.
In Conference on Computer and Communications Security – CCS 2014. ACM, 441–
452.
[10] Anupam Das, Nikita Borisov, and Matthew Caesar. 2016. Tracking Mobile Web
Users Through Motion Sensors: Attacks and Defenses. In Network and Distributed
System Security Symposium – NDSS 2016. The Internet Society.
[11] Sanorita Dey, Nirupam Roy, Wenyuan Xu, Romit Roy Choudhury, and Srihari
Nelakuditi. 2014. AccelPrint: Imperfections of Accelerometers Make Smartphones
Trackable. In Network and Distributed System Security Symposium – NDSS 2014.
The Internet Society.
[12] Wenrui Diao, Xiangyu Liu, Zhou Li, and Kehuan Zhang. 2016. No Pardon for
the Interruption: New Inference Attacks on Android Through Interrupt Timing
Analysis. In IEEE Symposium on Security and Privacy – S&P 2016. IEEE Computer
Society, 414–432.
[13] Jun Han, Emmanuel Owusu, Le T. Nguyen, Adrian Perrig, and Joy Zhang. 2012.
ACComplice: Location Inference Using Accelerometers on Smartphones. In In-
ternational Conference on Communication Systems and Networks – COMSNETS
2012. IEEE, 1–9.
[14] Suman Jana and Vitaly Shmatikov. 2012. Memento: Learning Secrets from Process
Footprints. In IEEE Symposium on Security and Privacy – S&P 2012. IEEE Computer
Society, 143–157.
[15] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan
Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In USENIX
Security Symposium 2016. USENIX Association, 549–564.
[16] Maryam Mehrnezhad, Ehsan Toreini, Siamak Fayyaz Shahandashti, and Feng
Hao. 2016. TouchSignatures: Identification of User Touch Actions and PINs Based
on Mobile Sensor Data via JavaScript. J. Inf. Sec. Appl. 26 (2016), 23–38.
[17] Yan Michalevsky, Dan Boneh, and Gabi Nakibly. 2014. Gyrophone: Recognizing
Speech from Gyroscope Signals. In USENIX Security Symposium 2014. USENIX
Association, 1053–1067.
[18] Yan Michalevsky, Aaron Schulman, Gunaa Arumugam Veerapandian, Dan Boneh,
and Gabi Nakibly. 2015. PowerSpy: Location Tracking Using Mobile Device Power
Analysis. In USENIX Security Symposium 2015. USENIX Association, 785–800.
[19] Emiliano Miluzzo, Alexander Varshavsky, Suhrid Balakrishnan, and Romit Roy
Choudhury. 2012. Tapprints: Your Finger Taps Have Fingerprints. In Mobile
Systems – MobiSys 2012. ACM, 323–336.
[20] Meinard Müller. 2007. Dynamic Time Warping. Springer, 69–84. https://doi.org/
10.1007/978-3-540-74048-3
[21] Sashank Narain, Triet D. Vo-Huu, Kenneth Block, and Guevara Noubir. 2016.
Inferring User Routes and Locations Using Zero-Permission Mobile Sensors. In
IEEE Symposium on Security and Privacy – S&P 2016. IEEE Computer Society,
397–413.
[22] Emmanuel Owusu, Jun Han, Sauvik Das, Adrian Perrig, and Joy Zhang. 2012.
ACCessory: Password Inference Using Accelerometers on Smartphones. In Mobile
Computing Systems and Applications – HotMobile 2012. ACM, 9.
[23] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M.
Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cour-
napeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-Learn: Machine
Learning in Python. Journal of Machine Learning Research 12 (2011), 2825–2830.
[24] Laurent Simon, Wenduan Xu, and Ross Anderson. 2016. Don’t Interrupt Me While
I Type: Inferring Text Entered Through Gesture Typing on Android Keyboards.
PoPETs 2016 (2016), 136–154.
[25] Raphael Spreitzer. 2014. PIN Skimming: Exploiting the Ambient-Light Sensor
in Mobile Devices. In Security and Privacy in Smartphones & Mobile Devices –
SPSM@CCS. ACM, 51–62.
[26] Raphael Spreitzer and Benoît Gérard. 2014. Towards More Practical Time-Driven
Cache Attacks. In Information Security Theory and Practice – WISTP 2014 (LNCS),
Vol. 8501. Springer, 24–39.
[27] Raphael Spreitzer, Simone Griesmayr, Thomas Korak, and Stefan Mangard. 2016.
Exploiting Data-Usage Statistics for Website Fingerprinting Attacks on Android.
In Security and Privacy in Wireless and Mobile Networks – WISEC 2016. ACM,
49–60.
[28] Raphael Spreitzer, Veelasha Moonsamy, Thomas Korak, and Stefan Mangard.
2018. Systematic Classification of Side-Channel Attacks: A Case Study for Mobile
Devices. IEEE Communications Surveys and Tutorials 20 (2018), 465–488.
[29] Raphael Spreitzer and Thomas Plos. 2013. Cache-Access Pattern Attack on
Disaligned AES T-Tables. In Constructive Side-Channel Analysis and Secure Design
– COSADE 2013 (LNCS), Vol. 7864. Springer, 200–214.
[30] Raphael Spreitzer and Thomas Plos. 2013. On the Applicability of Time-Driven
Cache Attacks on Mobile Devices. In Network and System Security – NSS 2013
(LNCS), Vol. 7873. Springer, 656–662.
[31] System Security Lab, Indiana University. 2015. App Guardian. https://play.google.
com/store/apps/details?id=edu.iub.seclab.appguardian. (2015). Accessed: August
2017.
[32] Qiuyu Xiao, Michael K. Reiter, and Yinqian Zhang. 2015. Mitigating Storage Side
Channels Using Statistical Privacy Mechanisms. In Conference on Computer and
Communications Security – CCS 2015. ACM, 1582–1594.
[33] Zhi Xu, Kun Bai, and Sencun Zhu. 2012. TapLogger: Inferring User Inputs on
Smartphone Touchscreens Using On-Board Motion Sensors. In Security and
Privacy in Wireless and Mobile Networks – WISEC 2012. ACM, 113–124.
[34] Lin Yan, Yao Guo, Xiangqun Chen, and Hong Mei. 2015. A Study on Power Side
Channels on Mobile Devices. In Symposium of Internetware – Internetware 2015.
ACM, 30–38.
[35] Kehuan Zhang and XiaoFeng Wang. 2009. Peeping Tom in the Neighborhood:
Keystroke Eavesdropping on Multi-User Systems. In USENIX Security Symposium
2009. USENIX Association, 17–32.
[36] Nan Zhang, Kan Yuan, Muhammad Naveed, Xiao-yong Zhou, and XiaoFeng
Wang. 2015. Leave Me Alone: App-Level Protection against Runtime Information
Gathering on Android. In IEEE Symposium on Security and Privacy – S&P 2015.
IEEE Computer Society, 915–930.
[37] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. 2016. Return-Oriented Flush-
Reload Side Channels on ARM and Their Implications for Android Devices. In
Conference on Computer and Communications Security – CCS 2016. ACM, 858–870.
[38] Xiao-yong Zhou, Soteris Demetriou, Dongjing He, Muhammad Naveed, Xiaorui
Pan, XiaoFeng Wang, Carl A. Gunter, and Klara Nahrstedt. 2013. Identity, Loca-
tion, Disease and More: Inferring Your Secrets From Android Public Resources.
In Conference on Computer and Communications Security – CCS 2013. ACM, 1017–
1028.
[39] Zhe Zhou, Wenrui Diao, Xiangyu Liu, and Kehuan Zhang. 2014. Acoustic Finger-
printing Revisited: Generate Stable Device ID Stealthily with Inaudible Sound. In
Conference on Computer and Communications Security – CCS 2014. ACM, 429–440.
ProcHarvester
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
A CONSIDERED ANDROID APPLICATIONS
ON ANDROID 7
Table 14 shows the 100 apps used in the evaluation of app cold start
detection in Section 4. Precision and recall are determined based on
10 samples for each application. For comparison reasons, we aimed
to rely on the set of 100 apps used by Diao et al. [12]. However,
only 65 of these apps have been available at the time of writing this
paper and, thus, we replaced the remaining 35 apps with common
apps from the Google Play store.
Table 14: Applications used for app inference evaluation.
Evaluation is based on 10 samples per app.
Package name
air.com.hoimi.MathxMath
air.com.hypah.io.slither
at.DiTronic.androidgroup.randomgallery
bbc.mobile.news.ww
cmb.pb
cn.etouch.ecalendar.longshi2
com.Kingdee.Express
com.Slack
com.aastocks.dzh
com.airbnb.android
com.ajnsnewmedia.kitchenstories
com.amazon.mShop.android.shopping
com.android.chrome
com.android.vending
com.antutu.ABenchMark
com.baidu.baidutranslate
com.baidu.searchbox
com.bankofamerica.cashpromobile
com.booking
com.chase.sig.android
com.citrix.saas.gotowebinar
com.cnn.mobile.android.phone
com.coolmobilesolution.fastscannerfree
com.csst.ecdict
com.dewmobile.kuaiya.play
com.douban.frodo
com.dropbox.android
com.ebay.mobile
com.facebook.katana
com.facebook.orca
com.facebook.pages.app
com.facebook.work
com.google.android.apps.docs
com.google.android.apps.photos
com.google.android.deskclock
com.google.android.gm
com.google.android.keep
com.google.android.music
com.google.android.street
com.google.android.youtube
com.groupon.redemption
com.healthagen.iTriage
com.hket.android.ctjobs
Precision Recall
90%
100%
90%
80%
90%
90%
100%
80%
100%
90%
90%
100%
100%
100%
100%
80%
100%
100%
100%
90%
100%
100%
100%
100%
100%
100%
90%
100%
100%
80%
80%
100%
100%
90%
100%
100%
100%
100%
100%
100%
90%
90%
60%
Continued on next column
90%
100%
100%
100%
90%
90%
91%
100%
100%
100%
100%
77%
91%
100%
100%
100%
100%
100%
91%
100%
77%
100%
100%
83%
91%
100%
100%
100%
77%
100%
100%
100%
83%
100%
100%
100%
100%
100%
100%
100%
90%
100%
86%
Continued from previous column
Package name
com.hse28.hse28_2
com.htsu.hsbcpersonalbanking
com.imdb.mobile
com.indeed.android.jobsearch
com.instagram.android
com.intsig.BCRLite
com.intsig.camscanner
com.isis_papyrus.raiffeisen_pay_eyewdg
com.jobmarket.android
com.jobsdb
com.king.candycrushsaga
com.kpmoney.android
com.lenovo.anyshare.gps
com.linkedin.android.jobs.jobseeker
com.magisto
com.malangstudio.alarmmon
com.medscape.android
com.microsoft.hyperlapsemobile
com.microsoft.rdc.android
com.miniclip.agar.io
com.mmg.theoverlander
com.mobisystems.office
com.money.on
com.mt.mtxx.mtxx
com.mtel.androidbea
com.mysugr.android.companion
com.netflix.mediaclient
com.nianticlabs.pokemongo
com.nuthon.centaline
com.openrice.android
com.paypal.android.p2pmobile
com.priceline.android.negotiator
com.roidapp.photogrid
com.sankuai.movie
com.scb.breezebanking.hk
com.skype.raider
com.smartwho.SmartAllCurrencyConverter
com.smule.singandroid
com.snapchat.android
com.sometimeswefly.littlealchemy
com.spotify.music
com.surpax.ledflashlight.panel
com.ted.android
com.tinder
com.tripadvisor.tripadvisor
com.twitter.android
com.whatsapp