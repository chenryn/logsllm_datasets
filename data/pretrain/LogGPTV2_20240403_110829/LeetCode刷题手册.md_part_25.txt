fmt.Printf("i = %v start = %v c = %v\n", i, start, c) 
c = append(c, nums[i])
return 
*res = append(*res, b)
copy(b，c)
b := make([]int, len(c))
 continue 
---
## Page 206
解题思路
给定一个只包含数字的非空字符串，请计算解码方法的总数。
一条包含字母A-Z的消息通过以下方式进行了编码：
题目大意
 Example 2: 
Example 1: 
 Given a non-empty string containing only digits, determine the total number of ways to decode 
mapping:
A message containing letters from A-z is being encoded to numbers using the following 
题目
91. Decode Ways
·这题思路也是 DP。dp[n］ 代表翻译长度为 n 个字符的字符串的方法总数。由于题目中的数字可
Explanation: It could be decoded as "Bz" (2 26), "vF" (22 6), or "BBF" (2 2 
'z'
Output: 3
Input: "226"
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Output: 2
Input: "12"
'A'
'A'
法，dp[0］ = 1。dp[1] 需要考虑原字符串是否是 0 开头的，如果是 0开头的，dp[1] = 0，如
能出现O，0不能翻译成任何字母，所以出现要跳过。dp[O] 代表空字符串，只有一种翻译方
 -> 26
->26
V
-V
>
2
2
L
---
## Page 207
Example:
Note: 1 ≤ m ≤ n ≤ length of list.
 Reverse a linked list from position m to n. Do it in one-pass.
题目
92. Reverse Linked List Il
代码
func numDecodings(s string) int {
import （
package leetcode 
return dp[len(s)]
}else { 
if len(s) == 0 {
if s[:1] == "0" {
dp[0] = 1 
dp := make([]int, len(s)+1)
"strconv'
9);dp[i] += dp[i-2] （当 10 ≤ s[i-2 ：i] ≤ 26)]。最终结果是 dp[n] 。
for i := 2; i = 10 && lastNum = 1 && lastNum 4->3->2->5->NULL
Input: 1->2->3->4->5->NULL,m = 2, n = 4 
* Definition for singly-linked list.
for i := O; i = n { 
if pre.Next == nil {
for count := O; pre.Next != nil && count  end { 
 type TreeNode struct {
 Definition for a binary tree node.
 return []*TreeNode{}
right = generateBsTree(i+l, end)
left = generateBsTree(start, i-1)
return tree
tree = append(tree, nil)
for_
root := &TreeNode{val: i, Left: l, Right: r} 
Right *TreeNode
Left *TreeNode
Val int 
tree = append(tree, root)
1 := range left { 
-,r := range right {
[]*TreeNode{}
---
## Page 214
代码
解题思路
给定一个整数 n，求以1 ..n 为节点组成的二叉搜索树有多少种？
题目大意
●所以状态转移方程是dp[i]= dp[0]* dp[n-1]+ dp[1]* dp[n-2]+.+ dp[n-1] *
·给出 n，要求利用 1-n 这些数字组成二叉排序树，
Given n = 3, there are a total of 5 unique BST's:
func numTrees(n int) int
package leetcode
根节点把树分成左右，不需要再关心左右两边数字的大小，只需要关心数字的个数。
注意，由于二叉排序树本身的性质，
Explanation:
Output: 5 
Input: 3 
dp := make([]int, n+l)
dp[O]，最终要求的结果是 dp[n］。
return dp[n] 
for i := 2; i  min && isvalidbst(root.Left, min, v) &&
v := float64(root.Val) 
* Definition for a binary tree node.
inorder(root.Left, arr)
for i := l; i = arr[i] {
 return false
Right *TreeNode
 Val int 
Left *TreeNode
---
## Page 217
Follow up:
Example 2: 
Example 1:
Recover the tree without changing its structure.
Two elements of a binary search tree (BST) are swapped by mistake.
题目
99. Recover Binary Search Tree
● Could you devise a constant space solution? 
● A solution using O(n) space is pretty straight forward.
Output: [2,1,4,null,null,3]
Input: [3,1,4,null,null,2] 
Output: [3,1,null,null,2]
Input: [1,3,null,null,2] 
---
## Page 218
代码
解题思路
二叉搜索树中的两个节点被错误地交换。请在不改变其结构的情况下，恢复这棵树。
题目大意
*TreeNode,*TreeNode） {
package leetcode
·在二叉搜索树中，有2个结点的值出错了，要求修复这两个结点。
func recoverTree(root *TreeNode) {
prev, targetl, target2 = inorderTraverse(root.Left, prev, targetl, target2)
if root == nil { 
var prev, targetl, target2 *TreeNode 
if prev != nil && prev.val > root.val {
 type TreeNode struct { 
 Definition for a binary tree node.
不是交换这两个结点相应的指针指向。
中如果出现了前一次遍历的结点的值大于此次根节点的值，这就出现了出错结点了，记录下来。继
这一题按照先根遍历1次就可以找到这两个出问题的结点，因为先访问根节点，然后左孩子，右
 return prev, targetl, target2