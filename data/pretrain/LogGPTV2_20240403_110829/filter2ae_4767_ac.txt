        *a4 = *(_QWORD *)(pool_ptr1 + 0x10);
    if ( a5 )
        *a5 = *(_DWORD *)(pool_ptr1 + 0x18);
    if ( a6 )
        *a6 = *(_QWORD *)(pool_ptr1 + 0x20);
    if ( a7 )
        *a7 = *(_QWORD *)(pool_ptr1 + 0x28);
    if ( a8 )
        *a8 = *(_QWORD *)(pool_ptr1 + 0x30);
    if ( a9 )
        *a9 = *(_DWORD *)(pool_ptr1 + 0x38);
    if ( a10 )
        *a10 = *(_QWORD *)(pool_ptr1 + 0x40);
    if ( a11 )
        *a11 = *(_QWORD *)(pool_ptr1 + 0x48);
    if ( a12 )
        *a12 = *(_DWORD *)(pool_ptr1 + 0x50);
    if ( a13 )
        *a13 = *(_QWORD *)(pool_ptr1 + 0x58);
    if ( a14 )
        *a14 = *(_QWORD *)(pool_ptr1 + 0x60);
    return 0i64;
返回到cng!ConfigurationFunctionIoHandler函数后，由于输入缓冲区的第二个四字节0x10400被截断为0x400，就会执行到这样的分支
    if ( a1 == 0x400 )
            return BCryptSetContextFunctionProperty(
                     dwTable,    //*a3=*(_DWORD *)(pool_ptr1 + 8)
                     pszContext, //*a4=*(_QWORD *)(pool_ptr1 + 0x10)
                     dwInterface,//*a5=*(_DWORD *)(pool_ptr1 + 0x18)
                     pszFunction,//*a6=*(_QWORD *)(pool_ptr1 + 0x20)
                     pszProperty,//*a8=*(_QWORD *)(pool_ptr1 + 0x30)
                     cbValue,    //*a12=*(_DWORD *)(pool_ptr1 + 0x50)
                     pbValue);   //*a13=*(_QWORD *)(pool_ptr1 + 0x58)
## cng!BCryptSetContextFunctionProperty
跟进cng!BCryptSetContextFunctionProperty函数，继续分析此函数，cng!ValidateTableId所在的分支无法满足条件，利用cbValue和pbValue的值初始化DestinationString，利用此DestinationString调用cng!CfgReg_Acquire
    NTSTATUS __stdcall BCryptSetContextFunctionProperty(
            ULONG dwTable,                          // pool_ptr1_off_8
            LPCWSTR pszContext,                     // pool_ptr1_off_10
            ULONG dwInterface,                      // pool_ptr1_off_18
            LPCWSTR pszFunction,                    // pool_ptr1_off_20
            LPCWSTR pszProperty,                    // pool_ptr1_off_30
            ULONG cbValue,                          // pool_ptr1_off_50
            PUCHAR pbValue)                         // pool_ptr1_off_58
    {
      ...
      *(_QWORD *)&DestinationString.Length = 0i64;
      v36 = 0;
      v34 = 0;
      v35 = 0;
      v37 = 0i64;
      v38 = 0i64;
      v39 = 0i64;
      DestinationString.Buffer = 0i64;
      v42 = 0i64;
      if ( !ValidateTableId(dwTable)                // dwTable = 1, false
        || !(unsigned int)ValidateInterfaceId(dwInterface, 0)// dwInterface=3, false
        || !v13                                     // pszFunction, false
        || *v13 == (_WORD)v12                       // *pszFunction != 0, false 
        || !pszProperty                             // pszProperty, false
        || *pszProperty == (_WORD)v12 )             // *pszProperty != 0, false
      {
        v16 = 0x57;
    LABEL_36:
        if ( !v10 )
          goto LABEL_38;
        goto LABEL_37;
      }
      if ( cbValue && pbValue )                     // true
      {
        *(_QWORD *)&DestinationString.Length = pbValue;
        LODWORD(DestinationString.Buffer) = cbValue;
        HIDWORD(DestinationString.Buffer) = cbValue;
        LODWORD(v42) = v12;
      }
      v14 = CfgReg_Acquire(v11, dwTable, 0x3001Fi64);
      ...
    }
## cng!CfgReg_Acquire
进一步跟进cng!CfgReg_Acquire，发现cng!VerifyRegistryAccess函数尝试对System\CurrentControlSet\Control\Cryptography\Configuration\Local注册表项执行操作，cng!VerifyRegistryAccess内部调用cng!KeRegOpenKey尝试打开注册表表项
根据cng!VerifyRegistryAccess的返回值为5得知打开失败，函数将5返回给cng!BCryptSetContextFunctionProperty
紧接着在cng!BCryptSetContextFunctionProperty的执行流程大体如下，分别使用pool1_ptr+0x100、pool1_ptr+0x200、pool1_ptr+0x400处的字符初始化三个新的UnicodeString
    ...
    v14 = CfgReg_Acquire(v11, dwTable, 0x3001Fi64);// v14 = 5
    v16 = v14;
    if ( v14 )
    {
        v17 = v14 == 5; // v17 = true
        goto LABEL_43;
    }
    ...
    LABEL_43:
        if ( !v17 )
          goto LABEL_49;
      }
      *(_QWORD *)&DestinationString.Length = 0i64;
      DestinationString.Buffer = 0i64;
      *(_QWORD *)&v40.Length = 0i64;
      v40.Buffer = 0i64;
      *(_QWORD *)&v43.Length = 0i64;
      v43.Buffer = 0i64;
      RtlInitUnicodeString(&DestinationString, pszContext);// pool_ptr1_off_10
      RtlInitUnicodeString(&v40, pszFunction); // pool_ptr1_off_20
      RtlInitUnicodeString(&v43, pszProperty); // pool_ptr1_off_30
## cng!CfgAdtReportFunctionPropertyModification
在初始化三个UnicodeString后，进入下面的分支调用cng!CfgAdtReportFunctionPropertyModification函数
在调试器中查看一下函数的参数，最少有10个，IDA反编译出来的结果中有11个
从上图中可以看到，在rsp+40的位置存储了0x2aab，这个数值来自于pool_ptr1 +
0x50的位置，查看一下寄存器r14w的数据来源，可以看到函数序言部分将pool_ptr1 + 0x50处的值赋给r14d
cng!CfgAdtReportFunctionPropertyModification函数内部调用最终的漏洞函数cng!CfgAdtpFormatPropertyBlock，调试器中查看一下cng!CfgAdtpFormatPropertyBlock的参数，可以看到第二个参数来自于cng!CfgAdtReportFunctionPropertyModification的第九个参数，数值为0x2aab
## cng!CfgAdtpFormatPropertyBlock
由于漏洞原理在开篇提及，此处就对一些关键位置查看下。查看一下cng!BCryptAlloc的参数，果然溢出为2
调用完该函数申请到的池块大小为0x20字节
然而循环的次数为0x2aab次，每次向池块中写入6字节，最终就会覆写到相邻的内存，最终导致BSOD
    NOTE: The trap frame does not contain all registers.
    Some register values may be zeroed or incorrect.
    rax=0000000000000030 rbx=0000000000000000 rcx=ffffda02a29ff000
    rdx=ffffda02a29fe610 rsi=0000000000000000 rdi=0000000000000000
    rip=fffff80063ae2904 rsp=ffffd7804ace5f20 rbp=0000000000002aab
     r8=0000000000002903  r9=0000000000000002 r10=fffff80063b1ce70
    r11=0000000000000002 r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei pl zr ac po nc
    cng!CfgAdtpFormatPropertyBlock+0x88:
    fffff800`63ae2904 668901          mov     word ptr [rcx],ax ds:ffffda02`a29ff000=????
    Resetting default scope
    STACK_TEXT:  
    ffffd780`4ace5348 fffff800`62cadef2     : ffffda02`a29ff000 00000000`00000003 ffffd780`4ace54b0 fffff800`62b292f0 : nt!DbgBreakPointWithStatus
    ffffd780`4ace5350 fffff800`62cad5e7     : fffff800`00000003 ffffd780`4ace54b0 fffff800`62bdc3f0 ffffd780`4ace59f0 : nt!KiBugCheckDebugBreak+0x12
    ffffd780`4ace53b0 fffff800`62bc7de7     : fffff800`62e694f8 fffff800`62cd7a45 ffffda02`a29ff000 ffffda02`a29ff000 : nt!KeBugCheck2+0x947
    ffffd780`4ace5ab0 fffff800`62c0d19e     : 00000000`00000050 ffffda02`a29ff000 00000000`00000002 ffffd780`4ace5d90 : nt!KeBugCheckEx+0x107
    ffffd780`4ace5af0 fffff800`62a9a59f     : fffff800`62a05000 00000000`00000002 00000000`00000000 ffffda02`a29ff000 : nt!MiSystemFault+0x19dcee
    ffffd780`4ace5bf0 fffff800`62bd5d5e     : 00000000`00000000 00000000`00000000 ffffda02`a2f84000 00000000`00000fff : nt!MmAccessFault+0x34f
    ffffd780`4ace5d90 fffff800`63ae2904     : ffffd780`4ace5fe0 ffffd780`4ace6508 ffffda02`a2f84000 ffff062f`1ac23f52 : nt!KiPageFault+0x35e
    ffffd780`4ace5f20 fffff800`63ae224e     : 00000000`00000000 ffffd780`4ace6050 ffffda02`a2f84000 00000000`00000001 : cng!CfgAdtpFormatPropertyBlock+0x88
    ffffd780`4ace5f50 fffff800`63ae0282     : 00000000`00000005 ffffd780`4ace6720 ffffda02`a2f84000 ffffda02`a2f83200 : cng!CfgAdtReportFunctionPropertyOperation+0x23e
    ffffd780`4ace6470 fffff800`63ac9580     : ffffd780`4ace6720 ffffda02`a2f83100 ffffd780`4ace65f0 ffffda02`a2f83200 : cng!BCryptSetContextFunctionProperty+0x3a2
    ffffd780`4ace6570 fffff800`63a92e86     : 00000000`00003aab 00000000`00000008 00000000`00003aab ffffda02`a2f7f000 : cng!_ConfigurationFunctionIoHandler+0x3bd5c
    ffffd780`4ace6660 fffff800`63a92d22     : 00000000`00003aab fffff800`62a5c339 ffffda02`a2f82fe0 00000000`00000004 : cng!ConfigFunctionIoHandler+0x4e
    ffffd780`4ace66a0 fffff800`63a91567     : 00000000`00000000 fffff800`00003aab 00000000`00000000 00000000`00010400 : cng!ConfigIoHandler_Safeguarded+0xd2
    ffffd780`4ace6710 fffff800`63a8e0ea     : 00000000`00000000 ffffda02`a2295ed0 ffffda02`a2295e00 00000000`00000000 : cng!CngDeviceControl+0x97
    ffffd780`4ace67e0 fffff800`62a314e9     : ffffda02`a2295e00 00000000`00000000 00000000`00000002 00000000`00000001 : cng!CngDispatch+0x8a
    ffffd780`4ace6820 fffff800`62fd6a55     : ffffd780`4ace6b80 ffffda02`a2295e00 00000000`00000001 ffffda02`a2a34820 : nt!IofCallDriver+0x59
    ffffd780`4ace6860 fffff800`62fd6860     : 00000000`00000000 ffffd780`4ace6b80 ffffda02`a2295e00 ffffd780`4ace6b80 : nt!IopSynchronousServiceTail+0x1a5
    ffffd780`4ace6900 fffff800`62fd5c36     : 000002e2`391a3000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!IopXxxControlFile+0xc10
    ffffd780`4ace6a20 fffff800`62bd9558     : 00000000`00000000 00000000`00000000 00000000`00000000 000000fa`99aff5e8 : nt!NtDeviceIoControlFile+0x56
    ffffd780`4ace6a90 00007ffc`3233c1a4     : 00007ffc`2fe7eaa7 00000000`00000000 0000ed39`9d02f136 00000000`00000000 : nt!KiSystemServiceCopyEnd+0x28
    000000fa`99aff918 00007ffc`2fe7eaa7     : 00000000`00000000 0000ed39`9d02f136 00000000`00000000 000000fa`99aff940 : ntdll!NtDeviceIoControlFile+0x14
    000000fa`99aff920 00007ffc`32016430     : 00000000`00390400 00000000`00000024 00007ff7`98f322b8 000000fa`99aff9e8 : KERNELBASE!DeviceIoControl+0x67
    000000fa`99aff990 00007ff7`98f311fb     : 000002e2`391a13c0 000002e2`391970a0 00000000`00000000 00000000`00000000 : KERNEL32!DeviceIoControlImplementation+0x80
    000000fa`99aff9e0 000002e2`391a13c0     : 000002e2`391970a0 00000000`00000000 00000000`00000000 000000fa`99affa20 : poc+0x11fb
    000000fa`99aff9e8 000002e2`391970a0     : 00000000`00000000 00000000`00000000 000000fa`99affa20 00000010`00000008 : 0x000002e2`391a13c0
    000000fa`99aff9f0 00000000`00000000     : 00000000`00000000 000000fa`99affa20 00000010`00000008 000000fa`99affa28 : 0x000002e2`391970a0
# 补丁分析
对比一下补丁前后的文件变化，可以看到只有cng!CfgAdtpFormatPropertyBlock函数发生了变化
查看一下函数的前后变化，发现补丁后函数调用cng!RtlUShortMult函数对传进来的size进行了处理，然后再传给cng!BCryptAlloc函数申请池空间
cng!RtlUShortMult函数十分简短，就是对size * 6的结果进行溢出判断(与0xffff比较)
    __int64 __fastcall RtlUShortMult(unsigned __int16 a1, __int64 a2, unsigned __int16 *a3)
    {
      unsigned int v3; // ecx
      unsigned __int16 v4; // dx
      v3 = 6 * a1;
      if ( v3 > 0xFFFF )
        v4 = 0xFFFF;
      else
        v4 = v3;
      *a3 = v4;
      return v3 > 0xFFFF ? 0xC0000095 : 0;
    }
# 参考链接
  * 
  * 
  * 