of individual models, such as extended (cid:27)nite-state machines that
(cid:27)re transitions when certain input conditions hold [13]. However,
de(cid:27)ning new modeling languages may not scale well, as a new
language is required as soon as new aspects need to be included.
4 DEEMON: OVERVIEW
To overcome the challenges of Section 3, we developed Deemon1,
an application-agnostic, automated framework designed to be used
by developers and security analysts during the security testing
1Source code and documentation of Deemon can be downloaded here https://github.
com/tgianko/deemon
Figure 2: Overview of the detection phase of Deemon.
phase of the software development life-cycle. The current version
of Deemon supports PHP-based web applications that use MySQL
databases, and it can be easily extended to support other languages
and databases. The key features of Deemon that allow for addressing
our challenges are the following:
• Deemon infers models from program execution observa-
tions capturing state transitions and data (cid:30)ow information
(Challenges C1 & C3).
• Deemon uses property graphs to represent these models.
This provides a uniform and reusable representation and
de(cid:27)nes precise relationships between models by the means
of labeled edges (Challenge C6).
• Deemon leverages a programmatic access to the property
graph via graph traversals to identify security-relevant
state changes (Challenge C2).
• Deemon augments the execution environment of a web
application and then reproduces a set of user actions to
observe server-side program execution (Challenge C4).
• Deemon relies on virtualized environments to test web ap-
plications. This enables full control of the web application
by taking and restoring snapshots (Challenge C5);
Deemon takes as input a set of user actions and an application
container of the web application under test. Deemon operates in
phases: instrumentation and detection. In the (cid:27)rst phase, Deemon
modi(cid:27)es the application container to insert sensors for the extrac-
tion of network traces, server-side program execution traces, and
sequence of database operations. In the second phase, Deemon auto-
matically reproduces user actions, infers a model from the resulting
traces, and tests the web application to detect aCSRF vulnerabilities.
4.1 Preparation
Deemon is meant to support developers and security analysts. In
this section, we brie(cid:30)y present the tool as seen by a user.
Inputs—The inputs of Deemon are a set of user actions and an
application container of the web application under test.
User Actions: The (cid:27)rst input is a set of user action sequences (see
Figure 2.a) that are provided by the tester. User actions are artifacts
commonly used in security testing [30] and there is a plethora of au-
tomated tools to create them via web browsers and use them when
testing web applications [30]. A user action is performed on the UI
of the web application. For example, a user action can be a mouse
click, a key stroke, or an HTML form submission. The sequence of
actions represent a web application functionality. For example, con-
sider the operation of resetting user credentials. The user actions
trace contains the following actions: load index.php page, click on
change credential link, type new username and password, and click
submit. Input traces can also be actions of a privilegded user, e.g.,
website administrator, when changing the website con(cid:27)guration
from the administrator panel.
Application Container: The second input of Deemon is an applica-
tion container of the web application under test. An application
container consists of a runtime environment with software, de-
pendencies and con(cid:27)guration. Web application containers contain
the web application (binary or source code), database server, and
application con(cid:27)guration. Containers are convenient tools as they
allow the deployment of ready-to-use web applications. Nowadays
application containers are gaining momentum and are becoming a
popular means to distribute and deploy web applications.
Outputs—Deemon returns a vulnerability report, listing state-chang-
ing HTTP requests that can be used to perform aCSRF attacks.
4.2 Instrumentation
Given an application container, Deemon automatically installs sen-
sors to monitor the program execution. For example, for PHP-based
web applications, Deemon adds and enables the Xdebug [35] module
of the PHP interpreter, an extension that generates full function call
trees. Furthermore, Deemon installs a local HTTP proxy to intercept
HTTP messages exchanged between the server and the browser.
4.3 Detection
The core function of Deemon is the detection of aCSRF vulnerabili-
ties. The main steps are shown in Figure 2 and are all automated. The
detection begins by reproducing the user actions against a running
instance of the web application (Figure 2.a). The sensors installed
during the instrumentation produce execution traces that include
network traces and function call traces (Figure 2.b). Deemon runs
this step twice to observe, for example, sources of non-determinism
such as generation of pseudo-random data items. Each run is called
session. From these traces, Deemon infers a model which is the com-
position of simpler models, e.g., (cid:27)nite-state machine and data (cid:30)ow
model with data type information (Figure 2.c). Then, Deemon uses
model queries to mine both security tests and an oracle (Figure 2.d),
and runs them against the web application (Figure 2.e). Finally, it
evaluates test results against the oracle to detect CSRF vulnerabili-
ties (Figure 2.f).
...User Actions Trace...Network Trace...Function Call Tracea1a2an...User ActionsUser Actions Replay(a)Dynamic Traces Generation(b)Tier 1Tier 2Tier 3xZxxZxxYZZZBuilding a Model (c)Web ApplicationModel Mining(d)TestsOraclet1t2tm...oTest Execution(e)?Test Result(f)XAutomated Steps...DB QueriesWeb Applicationc1cm...5 MODELING
The overall goal of our modeling approach is to create a repre-
sentation of a web application that can address challenges C1-3
and C6. Challenge C1 requires obtaining an adequate model that
allows determining when a change of state occurs. We address this
challenge by building a (cid:27)nite-state machine (FSM) from execution
traces captured by our probes. Challenge C2 consists in determin-
ing which state transitions are security-relevant. We observe that
security-relevant transitions are likely to occur less frequently than
other transitions. From this observation, we derive state invari-
ants based on frequency. Challenge C3 consists in determining the
relationship between request parameters and state transitions. In
particular, we are interested in identifying two types of HTTP pa-
rameters: parameters carrying unguessable tokens and parameters
carrying user input. We address this challenge by using a data (cid:30)ow
model (DFM) with types (see [41]). The DFM represents a state as
a set of variables and can capture the propagation of data items
from HTTP requests to the SQL query. Each data item can have
syntactic types, e.g., string, integer, boolean, and semantic types,
e.g., constant, unique, user input. We use types to identify tokens
and user-generated inputs. Finally, we need a representation for
our models that can support (i) the creation of a model with in-
ference algorithms and (ii) the identi(cid:27)cation of security-relevant
transitions. To address this challenge, i.e., C6, we map models into
labeled property graphs and use graph traversals to query them.
This section details the building blocks of our modeling approach.
In Section 5.1, we present property graphs, the mapping of models to
graphs, and elementary graph traversals. In Section 5.2, we present
the construction of a property graph.
5.1 Labeled Property Graph
A labeled property graph is a directed graph in which nodes and
edges can have labels and a set of key-value properties. An example
of a labeled property graph is shown below.
k1:v1
n1:L(cid:48)
e1:R(cid:48)
k2:v2
n3:L(cid:48)(cid:48)
e2:R(cid:48)
e3:R(cid:48)(cid:48)
n2:L(cid:48)
e4
This example shows three nodes. Nodes n1 and n3 have one property
each, i.e., k1 = v1 for n1 and k2 = v2 for n3. Nodes have labels. For
example, nodes n1 and n2 are labeled with L(cid:48) whereas node n3 is
labeled with L(cid:48)(cid:48). Edges are also labeled. The edges e1 and e2 are
labeled R(cid:48), and edge e3 is labeled R(cid:48)(cid:48).
5.1.1 Mapping Models to Property Graphs. We now present
the mapping of traces, FSM and DFM to a property graph. Figure 3
shows the operation of updating the user password as a property
graph. This example covers the logic and data tiers of a web appli-
cation. For the sake of readability, user actions are not shown.
Traces and Parse Trees—In our approach, traces and parse trees
are important artifacts that are used throughout the analysis. First,
traces and parse trees are the input of the inference algorithms to
generate FSMs and DFMs. Second, traces are used to derive state
invariants, e.g., the number of distinct HTTP requests triggering the
same state transition. Third, parse trees are used for the generation
of tests to detect aCSRF vulnerabilities. Accordingly, we decided to
include them in the property graph.
A trace is a sequence of events observed by our sensors, e.g.,
HTTP messages or SQL queries. We represent an event with a
node of label Event. We chain events using edges with label next.
Parse trees represent the content of a trace event. For example, with
reference to Figure 3.d, the event e(cid:48) is the following HTTP request:
HTTP /1.1
POST / change_pwd . php
Host : bank . com
Cookie : SESSION = X4a
Content - Length : 15
Content - Type : application /x - www - form - urlencoded
password = pwnd
We parse HTTP requests and store the resulting parse tree in the
property graph. An example of a parse tree for the example is
shown in Figure 3.c.i. For simplicity, Figure 3.c.i does not show
the Host, Content-Type, and Content-Length HTTP headers. We
map parse trees into a property graph as follows. Parse trees have
three labels: Root, NTerm, and Term. The Root node label is used for
the root of a parse tree. The NTerm node is used for non-terminal
nodes of the parse tree, whereas Term is for the terminal nodes.
Nodes are connected using the child edge label.
Finite State Machines—We use FSMs to represent program states
and transitions between states. Our goal is the identi(cid:27)cation of
state transitions triggered by an HTTP request. Accordingly, we use
HTTP requests as the symbols accepted by a transition. However, in
our model, HTTP requests are represented as nodes, and property
graphs do not support edges between a node, e.g., an HTTP request,
and an edge, e.g., a transition. As a result, we model a transition
between two states as nodes with three edges. The (cid:27)rst edge is
directed to the node representing the accepted HTTP request. The
second edge is from the initial state of the transition to the transition
node. The third edge is directed to the new state. The mapping of
FSM elements to nodes, edges, and labels is shown in Table 1.
Data(cid:30)ow Information and Types—To determine the relation-
ship between request parameters and state changing operations,
we use data(cid:30)ow models (DFMs) with types as presented by Wang
et al. [41]. The data (cid:30)ow model was originally designed to enrich
HTTP request parameters with abstract types such as syntactic
and semantic tables. Consider an HTTP request with a parame-
ter password=pwnd with the value pwnd provided by the user. The
DFM associates the parameter password with a syntactic label, e.g.,
string, and semantic labels, for example, user-generated (UG). In
our graph, we represent a DFM as a set of variables. A variable is a
node graph with a name (e.g., parameter name), a value (e.g., param-
eter value), and a type (e.g., semantic and syntactic type). Variables
can carry the same data item. In these cases, we say that there is
a propagation of data values. The rules that determine whether a
propagation exists are presented in Section 5.2.
An example of a DFM is shown in Figure 3.a. This DFM comprises
four variables, two for HTTP request parameters, i.e., session cookie
and password parameter, and two for the SQL WHERE and SET
clauses. Each variable has a type. For example, variable v1 has
semantic type SU, which means that the value is di(cid:29)erent for each
r
e
i
T
c
i
g
o
L
)
i
(
propag.
propag.
r
e
i
T
a
t
a
D
)
i
i
(
v1 = X4a
syn_type: string
sem_type: SU
v2 = pwnd
syn_type: string
sem_type: UG
v3 = X4a
syn_type: string
sem_type: SU
v4 = pwnd
syn_type: string
sem_type: UG
Data(cid:30)ow Models
(a)
accepts
tr(q1, x(cid:48)(cid:48)) = q2
trans
q0
tr(q0, x(cid:48)) = q1
has
to
q1
trans
to
to
q2
trans
tr(q1, x(cid:48)(cid:48)(cid:48)) = q2
parses
...
HTTPReq
POST
child
res
hdr.-list
body
e(cid:48)
next
e(cid:48)(cid:48)
next
e(cid:48)(cid:48)(cid:48)
...
child
SESSION
X4a
password
pwnd
causes
has
has
has
/change_pwd.php
source
SQL-QUERY
parses
...
UPDATE
child
trgt-table
SET
set-cl.-list
WHERE
cond.
c(cid:48)
next
c(cid:48)(cid:48)
...
Finite-State Machines
sink
(b)
users
password =
pwnd
sid
=
X4a
Parse Trees
(c)
Traces
(d)
Figure 3: Excerpt of property graphs for a model showing two tiers (logic and data).
user session, whereas varuable v2 has type UG. We represent the
propagation of data items with a source, a propagation chain and
a sink. For this, we use three types of edges, source, propag., and
sink. Figure 3 shows the complete propagation chain for the pwnd
data item. Finally, DFM variables are linked to FSM states with
has edges. This link determines the relationship between request
parameters and state-changing operations.
5.1.2 Relationships. The elements of our graph have rela-
tionships. Consider, for example, a parse tree that represents the
HTTP request causing a state transition. Our framework de(cid:27)nes a
set of relationships between these elements. We now brie(cid:30)y present
these relationships. The mapping of these relationships into a prop-
erty graph is shown in Table 2.
Data(cid:30)ow Information—This relationship connects a DFM to a
FSM, or a DFM to a parse tree. In the (cid:27)rst case, the variable can be
used to determine the state of a FSM. We model this relationship
with an edge from a state to a variable. In the second case, a variable
carries values from a source, e.g., HTTP parameters, or values used
to create a query.