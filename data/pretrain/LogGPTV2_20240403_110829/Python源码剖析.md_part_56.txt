].dict
一深度探索动态语言核心技术
t.zetnpowtasn,
'sys"]
量351
---
## Page 382
Python源码剖析
14.2.3
352
的模拟结构图。
构，方便了类的管理和维护，也方便了用户的使用。图14-11显示了我们对xmlpackage
最终组织成了一个树形的结构，从而为最初散乱的class建立起了一种结构，通过这种结
典型的例子是Python标准库中的xml的package。在这个package中，多个module、package
的机制。当然，更进一步，多个较小的package又可以聚合成一个较大的package，一个
package中。如果说module是一种管理class函数的机制，那么package就是一种管理module
供的package机制与module机制是类似的，逻辑上相关联的一些module应该聚合到一个
我们知道，逻辑上相关联的一些class应该经常聚合到一个module中，同样地，Python提
时，确实返回了已经被缓存在全局module集合中的usermodule2。
次直接引入usermodule2，从3个id操作的结果可以看到，第二次直接引入usermodule2
虚拟机只需要将全局module集合中缓存的那个modul对象返回即可，如图1410所示。
全局module集合，这样做有一个好处，即如果程序的另一点再次import这个module，Python
usermodule2是否会影响到全局的module集合，即sys.modules呢？图149显示，确实，
到了各个module自身所维护的那个dict对象。那么在usermodulel.py中加载的
全局module集合受到了影响。
上一层的名字空间，而只是影响到了各个module自身的名字空间，更准确地说，是影响
>>
第14章Python模块的动态加载机制
在module的基础上，Python又提供了一种管理module的机制，这就是package机制。
再从usermodulel中接引入了usermodule2后，我们在当前的loca1名字空间中再一
实际上，所有的import动作，不论是发生在什么时间、发生在什么地方，都会影响到
我们发现，在usermodulel.py和usermodule2.py中进行的import动作并没有影响到
import package
Lmport sys
深度探索动态语言核心技术
usermodule2"
图14-10从系统module缓存中import同一个module
13860912
13860912
13860912
图14-9sys.modules中的usermodule2
id(usermodule2)
import usermodule2
id(sys.modules[usermodule2'])
id(usermodulel.usermodule2)
import usermodulel
from
"c:\Python25\Lib\idlelib\usermodule2.py'>
---
## Page 383
所示。
聚合成一个package的具体实现。
甚至是用c扩展的dll文件。而对于package，Python使用了文件夹来实现它，可以说，
一个package，很简单，就是创建一个文件夹，再在文件夹下创建一个py文件，如图14-12
我们尝试了两种方式，结果Pyton虚拟机都不认账，抛出了异常，说是找不到A或
下面我们来对packageA中的tankmodule进行import操作，如图14-13所示。
我们从一个最简单的例子开始对package的动态加载机制进行研究，首先，需要建立
在Python中，module是由一个单独的文件来实现的，可以是py文件，或者pye文件，
Node
minidom
ImportError:
Tracehack (most recent call last):
>
ImportError: No module named A.tank
Traceback
>>>
File
importA
import
importA.tank
Attr
import A.tank
文件夹
地址C：\Python25\Lib\idlelib\A
图14-13对packageA进行import动作
oxmibuilder
dom
图14-12
Oidlel1b
图14-11
Icons
No module named
OA
无效的package的目录结构
edxe
parser
xmlpackage的结构
xml
14.2Python中import机制的黑盒探测
Python源码剖析
X
linel,
haridler
A
tank
sax
in
in 
omireader
一深度探索动态语言核心技术
Locator
package
module
353
---
## Page 384
Python源码剖析
354
有一个tankmoqule，那么这两个符号都能加载进来，通过A.tank和 B.tank分别进行
sys.modules这个Pyhon系统的module集中营中，我们也看到了A的身影。
僵硬，package也可以像module一样被加载，行为和module其实是一样的，所以在
起加载进来了，可以看到，在Python中，module和package之间的区别实际并不是那么
中，有一些有趣的现象。虽然我们加载的只是A中的tankmodule，但实际上却连A也一
package。即使这个文件中什么内容也没有，Python虚拟机也认为这是一个合法的package。
文件夹中有一个特殊的_init_py文件，Pyhon虚拟机才会认为这个文件夹是一个合法的
A.tank。这就很奇怪了，A和A.tank远在天边，
好，
13861104
KeyError:
Traceback (most recent call last):
>>id(sys.modules['tank'])
对于tank的访问必须通过A.tank来实现，这样有一个好处，比如在packageB中也
13861104
13861008
13861008
在图14-15中我们看到，这一次的动态加载机制确实成功了。在图14-15显示的结果
File
(）TP>> iaport A.tank
import A.airplane
airplane,
图14-18加载A.aireplane失败
file
1ine1,in
---
## Page 387
importa的结果，其中a是A.tank中的一个整数对象。
Aimporttank中，Python虚拟机则引入了符号“tank”，并将其映射到了moduleA.tank。
package A和module A.tank动态加载到了Python的sys.modules集合中，不同之处只是
A主mporttank”。图1419展示了使用from的结果。
module中的某个部分，我们来见识一下，图1420显示了动态加载语句：fromA.tank
个module都加载并引入到当前名字空间中。而王rom与mport的结合则能精确地操纵
些对象暴露到当前名字空间中，在这之前的所有例子中，我们要么不加载，要加载就将整
import A.tank中，Python虚拟机引l入了符号“a”，并将其映射到moduleA；而在from
在于当import的动作要结束时，Python会在当前的local名字空间中引入什么符号。在
当前的1ocal名字空间中，通过from和import的联手，能够完美地完成这个任务：“from
的1ocal名字空间中。
当前的1ocal名字空间引入了A，而我们希望的符号“tank”则在A的属性中，不在当前
前，我们讨论了一种方法，即：importA.tank。从图14-15所示的结果中可以看到，在
一层的探索之后，我们发现，其实这种方式的本质是与importA.tank一样的，都是将
对于from和import的结合，还有一种更精妙的用法，即仅仅将某个module中的一
显然，我们希望更方便一些，即能够直接将符号“tank”及其对应的module引入到
果然，Pyhon虚拟机直接将符号“tank”引入到了当前名字空间，但是当进行了更深
>>dir()
>>>sys.modules['A.tank'
Tracehack（most ecentcall last):
sys.modules['tank*]
sys.modulea['tank"]
import ays
图14-19直接将package中的module引入当前local名字空间
fromc:\Python25\Lib\idlelib\A\tank.pye'>
1ine 1,in 
14.2Python中import机制的黑盒探测
Python源码剖析
一深度探索动态语言核心技术
357
---
## Page 388
Python源码剖析
14.2.5
358
引入到当前名字空间中，如图1421所示。
A.tank.a这样的module存在。
tank一样，A.tank也被加载到了内存中，在后面的操作结果中我们清晰地看到了这一点。
packageA已经被加载到了内存中，同样我们可以推测，和importA.tank、fromAimport
我们还看到，所引l入的符号“a”确实只是A.tankmodule中的一个对象，并没有
KeyError:
>>>from A.tankimporta
第14章
在前面的讨论中，我们关注的焦点实际上是“Python虚拟机将哪个module动态加载
最后，Pyhon还为我们提供了一种机制，允许将一个module中的所有对象一次性地
符号重命名
从fromA.tankimporta的输出结果我们其实已经可以看到一些线索了，看上去
>>sys.modules[A.tank']
KeyError:tank"
Traceback (most recent call last):
>>>sys.modules[tank']
>>dir()
Hello Import A
File
File
>>>dir(）
Hello ImportA
>>>from A.tankimport
sys.modules["
sys.modules[A']