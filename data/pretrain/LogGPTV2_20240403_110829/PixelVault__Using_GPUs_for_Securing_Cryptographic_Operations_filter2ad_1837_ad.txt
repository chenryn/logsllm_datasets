hence their contents can be exposed to adversaries. To rule out this
possibility, we explicitly declare as many registers as the underly-
ing hardware device provides. The number of declared registers
serves as a heuristic for the compiler to decide when to spill reg-
isters during the compilation of the PTX code. By supplying the
--ptxas-options=’-v’ ﬂag to the nvcc compiler, we are
explicitly notiﬁed if any spilling has occurred.
It would also be possible that registers could be spilled in global
device memory when a context switch between different warps oc-
curs. In contrast to CPUs, however, GPUs are non-preemptive pro-
cessors, and thus the contents of GPU registers are never saved (in
order to be restored later and continue running where it previously
left off). Still, thread warps can be switched, e.g., when a warp is
waiting for memory I/O another warp can be scheduled for running.
According to NVIDIA, no state is saved when context switching
between thread warps occurs, for performance reasons [36]. This
is actually the reason that a large number of registers reduces the
amount of thread parallelism.
6.2 Performance Analysis
We now assess the performance of PixelVault in comparison to
the standard CPU implementation (OpenSSL [5]). Our base sys-
tem consists of two Intel Xeon E5520 Quad-core CPUs (2.27GHz,
8192KB L3-cache), 12GB of RAM, and a GeForce GTX480.
Table 3 shows the throughput of RSA on a single CPU core, on
the GPU as reported by Harrison and Waldron [25], and using our
PixelVault implementation. We evaluate PixelVault with and with-
out the KeyStore structure. When the KeyStore structure is dis-
abled, only a single RSA key is loaded on the registers (appropriate
for simple setups that use only a single RSA key). We observe
that the GPU performance is low when the number of messages is
small, regardless of whether the KeyStore is used or not. With only
one ciphertext message per invocation, the GPU has a throughput
about two orders of magnitude worse compared to the CPU imple-
mentation. However, given enough parallelism, the GPU achieves
a much higher throughput than the CPU. PixelVault has almost the
same performance with the vanilla GPU-based RSA implementa-
GPU
PixelVault
PixelVault (w/ KeyStore)
CPU
1
16
64
128
1024
4096
Number of Messages
Number of Messages
(a) Encryption.
)
)
s
s
/
/
t
t
i
i
b
b
G
G
(
(
t
t
u
u
p
p
h
h
g
g
u
u
o
o
r
r
h
h
T
T
)
)
s
s
/
/
t
t
i
i
b
b
G
G
(
(
t
t
u
u
p
p
h
h
g
g
u
u
o
o
r
r
h
h
T
T
3
3
2
2
1
1
0
0
6
6
5
5
4
4
3
3
2
2
1
1
0
0
1
16
64
128
1024
4096
Number of Messages
Number of Messages
(b) Decryption.
Figure 7: Sustained throughput for 128-bit AES-CBC.
tion, as the autonomous execution of the GPU does not add any
extra overhead. Enabling the KeyStore adds a small overhead—
ranging between 1–15%—to the overall PixelVault performance.
This is due to the copying of each key from the KeyStore array to
the registers and its decryption. The RSA key is decrypted using
the AES implementation that offers execution times proportionally
smaller compared to the RSA implementation. In addition, a signif-
icant part of the overall time is spent on PCIe transfers, and thus the
overhead introduced by the KeyStore mechanism is ameliorated.
We note that the implementation of the RSA algorithm is based
on the work of Harrison and Waldron [25]. Further optimizations
have been proposed since then, which could boost performance
even further. For example, Jang et al. [30] report that with 16 mes-
sages, the performance of the GPU is equal to that of the CPU, in
contrast to our implementation which needs about 110 messages to
match the CPU performance. We are currently working on inte-
grating these optimizations into our prototype implementation.
Figure 7 shows the performance of AES-CBC on a single CPU
core (horizontal line), as well as on the GPU and using PixelVault
(bars). We ﬁx the message size to 16KB, the largest size sup-
ported by SSL, and increase the number of messages from 1 to
4096. The encryption mode of AES (Figure 7(a)) cannot be paral-
lelized at the block level, and thus a sufﬁcient number of messages
is required to sustain acceptable performance. When using a single
message, AES-enc achieves 17.4 Mbit/s, which gradually increases
to 273.6 Mbit/s when processing 16 messages, and 3.4 Gbit/s for
4096 messages. Again, PixelVault achieves almost the same per-
formance as the default GPU-based AES implementation. How-
ever, the performance decreases to 3 Gbit/s when the KeyStore is
enabled, yielding a 13% decrease. The size of the AES keys is pro-
portionally smaller compared to the size of the messages (indica-
tively, 16 bytes for AES-128), hence the copying and decryption of
each key is quick, compared to the ciphering operations that fol-
low. The CPU implementation achieves 1.1 Gbit/s and 1.2 Gbit/s
for encryption and decryption, respectively, on a single CPU core.
In contrast, the decryption mode of AES ((Figure 7(b))) can be
parallelized at the block level and achieves 753.2 Mbit/s even when
processing a single message at a time. The peak performance of
AES-dec is 5.5 Gbit/s when processing 4096 messages at once. The
KeyStore adds a 20% overhead, limiting performance to 4.5 Gbit/s.
Modes that can be parallelized at the block level, such as CTR, have
a similar performance behaviour.
7. DISCUSSION AND LIMITATIONS
Dedicated GPU execution. PixelVault requires a dedicated GPU
that is used exclusively for protecting secret keys and carrying out
cryptographic operations. As a result, the GPU cannot be used
by other programs or the OS for other purposes, e.g., for graph-
ics rendering or general-purpose computations. Fortunately, recent
advances in CPU architectures show that current CPU chips are al-
ready equipped with integrated graphics processors, e.g., the AMD
APU [31] or the Intel HD Graphics [20]. In such cases, the inte-
grated GPU can be used for performing any graphics-related oper-
ation; otherwise, a second, separate, GPU should be acquired and
placed on a different PCIe slot. As PixelVault is mostly tailored to
server applications, which typically run on headless machines, the
requirement of a dedicated GPU is not a limiting factor.
Portability. Our design is based on current GPU architectures that
maintain (primarily) two basic properties: (i) non-preemptiveness
and (ii) on-chip memory operation only. These two properties are
available to all ofﬁcial CUDA-enabled NVIDIA models (released
after 2006 and onwards). We note though that our design may be
generalized to other computational devices as well, as long as they
maintain the same properties.
Misusing PixelVault for encrypting/decrypting messages. Pix-
elVault cannot verify whether a request for an operation has been
received from a benign or a malicious user. As a result, an attacker
who has compromised the base system could leverage PixelVault
to encrypt and decrypt messages. Still, the adversary cannot steal
any key stored in PixelVault.
Generation of secret keys or key pairs at run-time. Many ser-
vices require the creation of session keys or key pairs at run-time.
For example, SSL-enabled services create a new secret key after
the client has veriﬁed the server’s certiﬁcate. Although the leak-
age of session keys is not considered as critical as the leakage of
secret keys, creating secret keys or key pairs in a secure way is def-
initely a desirable functionality. PixelVault can easily provide this
functionality by generating new keys in the on-chip memory, and
securely storing them in the KeyStore structure. The service that
requested the keys can refer to each generated key by its unique
ID that is returned by PixelVault, and easily use them to encrypt or
decrypt messages. We plan to implement this functionality in the
near future.
TPMs. Trusted Platform Modules (TPMs) provide security-critical
functions, such as secure storage and attestation of platform state
and identities, and are mainly used to authenticate the base platform
during the bootstrapping phase or generating hardware-protected
key pairs. However, due to their limited storage space (the PC
TPM speciﬁcation mandates only 1,280 bytes of NVRAM [8]),
their limited support of cryptographic algorithms (current version
supports only RSA, SHA1, and HMAC) [8], and their low perfor-
mance (about 1.4 SSL handshakes per second [1]), they are not ap-
propriate for carrying out intensive and continuous cryptographic
operations, such handling a server’s many concurrent TLS connec-
tions [1]. In contrast, PixelVault provides a fully programmable, se-
cure, and fast framework for performing cryptographic operations,
while ensuring that no secret or private key will leak even when the
base system is fully compromised.
Denial-of-Service Attacks. Adversaries who have compromised
the base system can easily disrupt the operation of PixelVault. For
example, they can easily delete or modify input or output data by
accessing the shared page-locked memory region, kill or suspend
the execution of PixelVault, or terminate the interconnection of the
GPU with the base system by sending a PCIe reset. As the main
purpose of PixelVault is to protect secret keys, defending against
these attacks is out of the scope of this work.
GPU Kernel Execution Timeouts. Due to the non-preemptive
execution of GPUs, most operating systems use kernel execution
timeouts to prevent system hangs when the GPU is also used for
display rendering. Hence, any operation that is executed on a GPU
with a display for more than a few seconds will be killed to ensure
proper display rendering. PixelVault requires a dedicated GPU,
hence we explicitly disable the kernel execution timeout through
the graphics driver interface, to ensure that it will never terminate.
An attacker might be able to terminate PixelVault’s kernel by set-
ting this timeout. However, this will only result in a DoS attack,
similar to those described in the previous paragraph—no key will
be leaked, given that GPU registers are erased upon termination.
Side-channel Attacks.
It has been demonstrated that software
side-channel attacks are possible based on inter-process leakage
through the state of the memory cache of the CPU [22, 59]. These
attacks allow an unprivileged process to attack other processes that
run concurrently on the same processor, despite partitioning meth-
ods such as memory protection, sandboxing, and virtualization.
Certain types of these attacks can be quite powerful, as they rely on
merely monitoring the cache effects of cryptographic operations.
PixelVault raises the bar against cache-based attacks, since only
one kernel occupies the GPU at a time; no other GPU kernel can be
executed in parallel to monitor the behavior of the cache.
In addition, timing attacks enable an attacker to extract secrets
by observing the time it takes for a system to respond to various
queries [11,14,35]. Although defending against this type of attacks
is out of the scope of this work, a possible approach to enhance
PixelVault against them is to implement all sensitive operations so
that they consume a constant number of cycles, irrespectively of
any combination of key and data, so as to make any timing based
analysis hard [28].
Cold-boot Attacks. It has been demonstrated that keys can be ex-
tracted by freezing memory chips and inspecting their contents [23],
an attack widely known as cold boot attack. It is hard to assess
whether cold boot attacks are applicable on GPUs. We speculate
that this might be possible, as graphics cards can be removed with
the same ease as RAM DIMMs. PixelVault, however, is not vul-
nerable to cold boot attacks, because nothing sensitive is stored in
DRAM—keys are only exposed in registers.
8. RELATED WORK
Many research works have focused on the implementation of
cryptographic operations using GPUs [24, 25, 30]. Their data par-
allel architecture makes them attractive for the implementation of
both symmetric and asymmetric cryptographic algorithms. The
majority of these approaches has focused extensively on the imple-
mentation of widely-used cryptographic algorithms, such as AES
and RSA. Cook et al. [18] describe an implementation of AES on
an NVIDIA GeForce3 card, which provides little programmability.
Szerwinski et al. [58] describe implementations of 1024 and 2048-