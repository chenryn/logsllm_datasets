plore different nodes such that several promising and
non-promising candidates are known. On the other hand,
it has to follow more promising candidates to ﬁnd deeper
expressions. As described in Section 2.3, the UCT (cf.
Equation 1) provides a good balance between exploitation
and exploration for many MCTS applications.
However, we observed that it does not work for our use
case: if we set the exploration constant C to a higher value
(focus on exploration), it does not ﬁnd deeper expressions;
if we set C to a lower value, MCTS gets lost in deep
expressions. To solve this problem, we use an adaption
of UCT that is known as Simulated Annealing UCT (SA-
UCT) [47]. The main idea of SA-UCT is to use the
characteristics of Simulated Annealing (cf. Section 2.4)
and apply it to UCT. SA-UCT is obtained by replacing
the exploration constant C by a variable T with
T = C
N − i
N ,
(2)
where N is the maximum number of MCTS iterations
and i the current iteration. Then, SA-UCT is deﬁned as
(cid:115)
X j + T
lnn
n j
.
(3)
T decreases over time, since N−i
N converges to 0 for
increasing values of i. As a result, MCTS places the
emphasis on exploration in the beginning; the more T
decreases, the more the focus shifts to exploitation.
4.2 Grammar
Game states are represented by sentential forms of a
context-free grammar that describes valid expressions
of our high-level abstraction. We introduce a terminal
symbol for each input (which corresponds to a variable
that stores this input) and each valid operator (e. g., ad-
dition or multiplication). For every data type that can be
computed we introduce one non-terminal symbol (in our
running example, we only use a single non-terminal value
U that represents an unsigned integer). The production
rules describe how we can derive expressions in our high-
level description. Since the sentential forms represent
partial expressions, we will use the term expression to
denote the (partial) expression that is represented by a
given sentential form. Sentences of the grammar are ﬁnal
states in the game since they do not allow any further
moves (derivations). They represent expressions that can
be evaluated. We represent expressions in Reverse Polish
Notation (RPN).
Example 2. The grammar in our previous example has
two input symbols V = {a,b}, since each I/O sample has
two inputs. If the grammar supports addition and mul-
tiplication O = {+,∗}, there are four production rules:
R = {U → U U + | U U ∗ | a | b}. An unsigned integer
expression U can be mapped to an addition or multipli-
cation of two such expressions or a variable. The ﬁnal
grammar is ({U},Σ = V ∪ O,R,U).
Synthesis Grammar. Our grammar
to synthesize expressions
mantics of bit-vector
arithmetic,
that
represent
is designed
the se-
especially for
USENIX Association
26th USENIX Security Symposium    649
+
*
U3
U1
U2
Figure 6: The left-most U in U3 U2 U1 ∗ + is the top-
most-right-most non-terminal in the abstract syntax tree.
(The indices are provided for illustrative purposes only.)
Figure 5: An MCTS tree for program synthesis that grows
towards the most-promising node b a +, the right-most
leaf in layer 3.
For every data type (U8,
the x86 architecture.
U16, U32 and U64), we deﬁne the set of operations
O = {+,−,∗,/s,/,%s,%,∧,∨,⊕,(cid:28),(cid:29),(cid:29)a,−1,¬,
as
sign_ext, zero_ext, extract, ++, 1}, where the
operations are binary addition, subtraction, multiplication,
signed/unsigned division, signed/unsigned remainder,
bitwise and/or/xor, logical left shift, logical/arithmetic
right shift as well as unary minus and complement.
The unary operations sign_ext and zero_ext extend
smaller data types to signed/unsigned larger data types.
Conversely,
the unary operator extract transforms
larger data types into smaller data types by extracting the
respective least signiﬁcant bits. Since the x86 architecture
allows register concatenation (e. g., for division), we
employ the binary operator ++ to concatenate two
expressions of the same data type. Finally, to synthesize
expressions such as increment and decrement, we use the
constant 1 as niladic operator. The input set V consists
of |V| = n variables, where n represents the number of
inputs.
Tree Structure. The sentential form U is the root node
of the MCTS tree. Its child nodes are other expressions
that are produced by applying the production rules to a
single non-terminal symbol of the parent. The expression
depth (referred to as layer) is equivalent to the number of
derivation steps, as depicted in Figure 5.
Example 3. The root node U is an expression of layer 0.
Its children are a, b, U U +, and U U ∗, where a and b are
terminal expressions of layer 1. Assuming that the right-
most U in an expression is replaced, the children of U U +
are U b +, U a +, U U U + +, and U U U ∗ +. To obtain
the layer 3 expression b a +, the following derivation
steps are applied: U ⇒ U U + ⇒ U a + ⇒ b a +.
To direct the search towards outer expressions, we re-
place the top-most-right-most non-terminal. If we, in-
stead, substitute always the right-most non-terminal only,
then the search would be guided towards most-promising
subexpressions. If the expression is too nested, the syn-
thesizer would ﬁnd the partial subexpression but not the
whole expression. The top-most-right-most derivation is
illustrated in Figure 6, which shows the abstract syntax
tree (AST) of an expression.
Example 4. The expression (U + (U ∗U)) is represented
as U U U ∗ +. If we successively replace the right-most
U, the algorithm is unlikely to ﬁnd expressions such as
((a + b) + (b∗ (b∗ a))), since it is directed into the subex-
pression with the multiplication. Instead, replacing the
top-most-right-most non-terminal directs the search to the
top-most addition and then explores the subexpressions.
4.3 Random Playout
One of the key concepts of MCTS are random playouts.
They are used to determine the outcome of a node; this
outcome is represented by a reward.
In the ﬁrst step,
we randomly apply production rules to the current node,
until we obtain a terminal expression. To avoid inﬁnite
derivations, we set a maximum playout depth. This max-
imum playout depth deﬁnes how often a non-terminal
symbol can be mapped to rules that contain non-terminal
symbols; at the latest we reached the maximum, we map
non-terminals only to terminal expressions. This happens
in a top-most-right-most manner. Afterwards, we evaluate
the expression for all inputs from the I/O samples.
Example 5. Assuming a maximum playout depth of 2
and the expression U U ∗, the ﬁrst top-most-right-most U
is randomly substituted with U U ∗, the second one with
U U +. After that, the remaining non-terminal symbols
are randomly replaced with variables: U U ∗ ⇒ U U U ∗
∗ ⇒ U U + U U ∗ ∗ ⇒ ··· ⇒ a a + b a ∗ ∗. A random
playout for U U + is a b b + +.
For the I/O sample (2,2) → 4, we evaluate g(2,2) = 0
for g(a,b) = ((a +a)∗ (b∗a)) mod (28) and h(2,2) = 6
for h(a,b) = (a + (b + b)) mod 28.
We set terminal nodes to inactive after their evaluation,
since they already are end states of the game; there is
no possibility to improve the node’s reward by random
playouts. As a result, MCTS will not take these nodes
650    26th USENIX Security Symposium
USENIX Association
UUU*UU+Ub+UUU++Ua+UU*a+ba+UUU*+abinto account in further iterations. The node’s reward is
the similarity of the evaluated expressions and the out-
puts from the I/O samples. We describe in the following
section how to measure the similarity to the outputs.
4.4 Measuring Similarity of Outputs
To measure the similarity of two outputs, we compare val-
ues with different metrics: arithmetic distance, Hamming
distance, count leading zeros, count trailing zeros, count
leading ones and count trailing ones. While the numeric
distance is a reliable metric for arithmetic operations, it
does not work well with overﬂows and bitwise operations
(e. g., xor and shifts). In turn, the Hamming distance ad-
dresses these operations since it states in how many bits
two values differ. Finally, the leading/trailing zeros/ones
are strong indicators that two values are in the same range.
We scale each result between a value of 0 and 1. Since the
different metrics compensate each other, we set the total
similarity reward to the average reward of all metrics.
Example 6. Considering I/O pair (2,2) → 4, the out-
put similarities for g and h (as deﬁned in Example 5)
are similarity(4,0) and similarity(4,6). Limiting to the
metrics of Hamming distance and count leading ze-
ros (clz), we obtain hamming(4,0) = hamming(4,6) =
0.67, clz(4,0) = 0 and clz(4,6) = 1.0. Therefore, the
average similarities are similarity(4,0) = 0.335 and
similarity(4,6) = 0.835. Related to the random play-
outs, the evaluated node U U + has a higher reward
than U U ∗.
During a random playout, we calculate the similarity
for all I/O samples. The ﬁnal node reward is the average
score of all similarity rewards. A reward of 1 ﬁnishes pro-
gram synthesis, since the evaluated expression produces
exactly the outputs from the I/O samples.
4.5 Backpropagation
After obtaining a score by random playout, we do the
following for the selected node and all its parents, up to
the root: (1) We update the node’s average reward. This
reward is averaged based on the node’s and its successors’
total number of random playouts. (2) If the node is fully
expanded and its children are all inactive, we set the node
to inactive. (3) Finally, we set the current node to its
parent node.
4.6 Expression Simpliﬁcation
Since MCTS performs a stochastic search, synthesized ex-
pressions are not necessary in their shortest form. There-
fore, we apply some basic standard expression simpliﬁ-
cation rules. For example, if the synthesizer constructs
integer values as ((1 (cid:28) 1) (cid:28) (1 + (1 (cid:28) 1))), we can
reduce them to the value 16.
4.7 Algorithm Conﬁguration
Two main factors deﬁne the algorithm’s success that can-
not be inﬂuenced by the user: the number of input vari-
ables and the complexity (e. g., depth) of the expression
to synthesize. Contrary, there exist four parameters that
can be conﬁgured by a user to improve the effectiveness
and speed: the initial SA-UCT value, the number of I/O
samples, the maximum number of MCTS iterations and
the maximum playout depth.
The SA-UCT parameter T conﬁgures the trade-off be-
tween exploration and exploitation and depends on the
maximum number of MCTS iterations; if the maximum
number of MCTS iterations is low, the algorithm focuses
on exploiting promising candidates within a small period
of time. The same holds for small initial values of T .
A large number of variables or a higher expression
depth requires more MCTS iterations. Besides the maxi-
mum number of MCTS iterations, the maximum playout
depth provides more accuracy since it is more probable
to hit deeper expressions or more inﬂuencing variables
with deeper playouts. On the other hands, deeper playouts
have an impact on the execution time.
Since random playouts are performed for every node
and for every I/O pair, the number of I/O samples has a
signiﬁcant impact on the execution time. In addition, it
effects the number of false positives, since there are less
expressions that have the same I/O behavior for a larger
number of I/O samples. Finally, the MCTS synthesis is
more precise since the different node rewards are expected
to be informative.
Since the search space for ﬁnding good algorithm con-
ﬁgurations for different complexity classes is large, we
approximate an optimal solution by Simulated Annealing.
We present the details and results in Section 6.1.
5
Implementation
We implemented a prototype implementation of our ap-
proach in our tool Syntia, which is written in Python. For
trace generation and random sampling, we use the Uni-
corn Engine [43], a CPU emulator framework. To analyze
assembly code (e. g., trace dissection), we utilize the dis-
assembler framework Capstone [42]. Furthermore, we
use the SMT solver Z3 [36] for expression simpliﬁcation.
Initially, Syntia expects a memory dump, a start and
an end address as input. Then, it emulates the program
and outputs the instruction trace. Then, the user has the
opportunity to deﬁne its own rules for trace dissection;
otherwise, Syntia dissects the trace at indirect control
USENIX Association
26th USENIX Security Symposium    651
Table 1: Initial Simulated Annealing conﬁguration and
the parameter’s lower/upper bounds.
parameter
SA-UCT
# MCTS iterations
# I/O samples
playout depth
initial
1.0
2,000
30
1
lower bound
0.7
500
10
0
upper bound
2.0
50,000
60
2
transfers. Additionally, the user has to decide if regis-
ter and/or memory locations are used as inputs/outputs
and how many I/O pairs shall be sampled. Syntia traces
register and memory modiﬁcations in each trace window,
derives the inputs and outputs and generates I/O pairs by
random sampling. The last step can be parallelized for
each trace window. Finally, the user deﬁnes the synthe-
sis parameters. Syntia creates a synthesis tasks for each
(trace window, output) pair. The synthesis tasks are per-
formed in parallel. The synthesis results are simpliﬁed by
Z3’s term-rewriting engine.
6 Experimental Evaluation
In the following, we evaluate our approach in three areas
of application. The experiments have been evaluated on a
machine with two Intel Xeon E5-2667 CPUs (in total, 12
cores and 24 threads) and 96 GiB of memory. However,
we never have used more than 32 GiB of memory even
though parallel I/O sampling for many trace windows can
be memory intensive; synthesis itself never used more
than 6 GiB of memory.
6.1 Parameter Choice
As described in Section 4.7, we approximate an optimal