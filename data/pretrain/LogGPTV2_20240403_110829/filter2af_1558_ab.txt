> along.[link](https://www.youtube.com/watch?v=3CN65ccfllU&list=PLJ_vkrXdcgH-> lYlRV8O-kef2zWvoy79yP&index=4)
## 题解
基本的用私钥登录服务器的教程, 按照教程一步步做, 连上服务器就能看到flag.
一键脚本:
    ssh PI:EMAIL 'exit'|grep pico
    # picoCTF{who_n33ds_p4ssw0rds_38dj21}
# what base is this? (200pts)
## 题目
To be successful on your mission, you must be able read data represented in
different ways, such as hexadecimal or binary. Can you get the flag from this
program to prove you are ready? Connect with `nc 2018shell2.picoctf.com
15853`.
> Hints:  
>  (1) I hear python is a good means (among many) to convert things. (2) It
> might help to have multiple windows open
## 题解
连上之后就是给一系列的不同进制的数据, 然后按要求转换之后给答案.
我们可以用python的[pwntools](http://docs.pwntools.com/en/stable/)库与程序交互,
`re`模块完成字符串查找, python 本身进行进制转换, 给出一键脚本如下
    #coding:utf-8
    from pwn import *
    import re
    context.log_level = 'error'
    sh = remote('2018shell2.picoctf.com', 15853)
    msg1 = sh.recv()
    t1 = re.findall('([01]{8})', msg1)
    t1 = ''.join(map(lambda x:chr(int(x,2)), t1))
    sh.sendline(t1)
    msg2 = sh.recv()
    t2 = re.findall('([0-9a-f]{8,})', msg2)
    sh.sendline(t2[0].decode('hex'))
    msg3 = sh.recv()
    t3 = re.findall("(\d{3})", msg3)
    t3 = ''.join(map(lambda x:chr(int(x, 8)), t3))
    sh.sendline(t3)
    print re.findall('(picoCTF{.*})', sh.recv())[0]
    # picoCTF{delusions_about_finding_values_3cc386de}
# you can't see me (200pts)
## 题目
'...reading transmission... Y.O.U. .C.A.N.'.T. .S.E.E. .M.E. ...transmission
ended...' Maybe something lies in /problems/you-can-t-see-me_3_1a39ec6c80b3f3a18610074f68acfe69.
> Hints:  
>  (1) What command can see/read files? (2) What's in the manual page of ls?
## 题解
进入到目录之后, `ls -al`发现有隐藏文件`.`, 其实后面还有两个空白字符, 在服务器上可以用`tab`键补全就可以查看到了, 这里给个一键脚本:
    ssh -q PI:EMAIL "cat  /problems/you-can-t-see-me_3_1a39ec6c80b3f3a18610074f68acfe69/.\ \ "
# absolutely relative (250pts)
## 题目
In a filesystem, everything is relative ¯_(ツ)_/¯. Can you find a way to get a
flag from this [program
[1]](https://2018shell2.picoctf.com/static/94e0cff2fa6fb11f5c85edccb8144415/absolutely-relative) ? You can find it in /problems/absolutely-relative_4_bef88c36784b44d2585bb4d2dbe074bd on the shell server. [Source
[2]](https://2018shell2.picoctf.com/static/94e0cff2fa6fb11f5c85edccb8144415/absolutely-relative.c) .
> Hints:  
>  (1) Do you have to run the program in the same directory? (⊙.☉)7 (2) Ever
> used a text editor? Check out the program 'nano'
## 题解
给了C源码
    #include 
    #include 
    #define yes_len 3
    const char *yes = "yes";
    int main()
    {
        char flag[99];
        char permission[10];
        int i;
        FILE * file;
        file = fopen("/problems/absolutely-relative_4_bef88c36784b44d2585bb4d2dbe074bd/flag.txt" , "r");
        if (file) {
            while (fscanf(file, "%s", flag)!=EOF)
            fclose(file);
        }   
        file = fopen( "./permission.txt" , "r");
        if (file) {
            for (i = 0; i  Hints:  
>  (1) Maybe you can split the stdout and stderr output?
## 题解
本题考查linux的标准输出、标准错误流, 我们可以利用`>`将两种流重定向到其他地方, 从而分离流的内容, 得到flag.
    echo 'Please may I have the flag?'|./in-out-error 1>/dev/null
发现打印出很多一样的flag
# learn gdb (300pts)
## 题目
Using a debugging tool will be extremely useful on your missions. Can you run
this [program
[1]](https://2018shell2.picoctf.com/static/58c2e42eecc19e464af2c0dac8da7a77/run)
in gdb and find the flag? You can find the file in /problems/learn-gdb_0_716957192e537ac769f0975c74b34194 on the shell server.
> Hints:  
>  (1) Try setting breakpoints in gdb (2) Try and find a point in the program
> after the flag has been read into memory to break on (3) Where is the flag
> being written in memory?
## 题解
主要考察gdb的基本使用. 我们先用gdb打开程序, `disassemble main`查看`main`函数的汇编代码
    # gdb -q run
    gef➤  disassemble main
    Dump of assembler code for function main:
       0x00000000004008c9 : push   rbp
       0x00000000004008ca : mov    rbp,rsp
       0x00000000004008cd : sub    rsp,0x10
       0x00000000004008d1 : mov    DWORD PTR [rbp-0x4],edi
       0x00000000004008d4 :    mov    QWORD PTR [rbp-0x10],rsi
       0x00000000004008d8 :    mov    rax,QWORD PTR [rip+0x200af9]        # 0x6013d8 
       0x00000000004008df :    mov    ecx,0x0
       0x00000000004008e4 :    mov    edx,0x2
       0x00000000004008e9 :    mov    esi,0x0
       0x00000000004008ee :    mov    rdi,rax
       0x00000000004008f1 :    call   0x400650 
       0x00000000004008f6 :    mov    edi,0x4009d0
       0x00000000004008fb :    call   0x400600 
       0x0000000000400900 :    mov    eax,0x0
       0x0000000000400905 :    call   0x400786 
       0x000000000040090a :    mov    edi,0x400a08
       0x000000000040090f :    call   0x400600 
       0x0000000000400914 :    mov    eax,0x0
       0x0000000000400919 :    leave  
       0x000000000040091a :    ret    
    End of assembler dump.
容易发现解密flag的函数是在`0x0000000000400905`, 我们可以在下一条指令下一个断点
    gef➤  b *0x000000000040090a
    Breakpoint 1 at 0x40090a
跑起来, 在断点出断下来之后, 根据题目打印信息提示获取`flag_buf`全局变量的值即可.
    gef➤  x (char *)flag_buf
    0x602260:   "picoCTF{gDb_iS_sUp3r_u53fuL_a6c61d82}"
# roulette (350pts)
## 题目
This Online [Roulette
[1]](https://2018shell2.picoctf.com/static/191a3b6cb7dd34093f5d660ffa07b570/roulette)
Service is in Beta. Can you find a way to win $1,000,000,000 and get the flag?
[Source
[2]](https://2018shell2.picoctf.com/static/191a3b6cb7dd34093f5d660ffa07b570/roulette.c)
. Connect with nc `2018shell2.picoctf.com 25443`
> Hints:  
>  (1) There are 2 bugs!
## 题解
题目是一个模拟赌场小程序, 提示有两个bug, 经过审计源代码可以发现两个bug分别是:
  1. 伪随机问题  
在`main`函数发现我们的初始`cash`是通过`get_rand`函数获得的, 看一下`get_rand`
        long get_rand() {
    long seed;
    FILE *f = fopen("/dev/urandom", "r");
    fread(&seed, sizeof(seed), 1, f);
    fclose(f);
    seed = seed % 5000;
    if (seed < 0) seed = seed * -1;
    srand(seed); // bug1
    return seed;
    }
发现在获取到一个随机数之后, 直接作为随机数种子, 并且返回. 也就是说我们得到的初始`cash`就是伪随机发生器的种子,
这意味着我们可以知道每次要猜的值是多少.这里也给出随机数生成代码:
  2. 逻辑漏洞+长整型溢出  
程序中的`get_long`函数用户获取用户输入的一个`long`数字, 并且判断有没有溢出, 看下源码: