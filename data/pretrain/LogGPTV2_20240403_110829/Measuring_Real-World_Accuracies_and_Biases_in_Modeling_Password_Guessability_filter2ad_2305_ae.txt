References
[1] The “web2” ﬁle of english words. http://www.bee-man.us/
computer/grep/grep.htm#web2, 2004.
[2] BONNEAU, J. The Gawker hack: How a million passwords
were lost. Light Blue Touchpaper Blog, December 2010. http:
//www.lightbluetouchpaper.org/2010/12/15/the-
gawker-hack-how-a-million-passwords-were-lost/.
[3] BONNEAU,
J.
anonymized corpus of 70 million passwords.
Symp. Security & Privacy (2012).
The science of guessing: Analyzing an
In Proc. IEEE
[4] BONNEAU, J.
Statistical metrics for individual password
strength. In Proc. WPS (2012).
[5] BONNEAU, J., HERLEY, C., VAN OORSCHOT, P. C., AND STA-
JANO, F. The quest to replace passwords: A framework for
comparative evaluation of Web authentication schemes. In Proc.
IEEE Symp. Security & Privacy (2012).
[6] BONNEAU, J., AND XU, R. Of contrase˜nas, sysmawt, and m`ımˇa:
In Proc. W2SP
Character encoding issues for web passwords.
(2012).
[7] BRODKIN, J. 10 (or so) of the worst passwords exposed by the
LinkedIn hack. Ars Technica, June 2012.
[8] BURR, W. E., DODSON, D. F., AND POLK, W. T. Electronic
authentication guideline. Tech. rep., NIST, 2006.
[9] CARNEGIE MELLON UNIVERSITY. Password guessability ser-
vice. https://pgs.ece.cmu.edu, 2015.
[10] CASTELLUCCIA, C., D ¨URMUTH, M., AND PERITO, D. Adap-
In Proc.
tive password-strength meters from Markov models.
NDSS (2012).
[11] CHOU, H.-C., LEE, H.-C., YU, H.-J., LAI, F.-P., HUANG, K.-
H., AND HSUEH, C.-W. Password cracking based on learned
patterns from disclosed passwords. IJICIC (2013).
[12] CHRYSANTHOU, Y. Modern password cracking: A hands-on
approach to creating an optimised and versatile attack. Master’s
thesis, Royal Holloway, University of London, 2013.
[13] CURLYBOI.
Hashtopus.
manual.html, 2009-.
http://hashtopus.nech.me/
[14] DAS, A., BONNEAU, J., CAESAR, M., BORISOV, N., AND
WANG, X. The tangled web of password reuse. In Proc. NDSS
(2014).
[15] DE CARN ´E DE CARNAVALET, X., AND MANNAN, M. From
very weak to very strong: Analyzing password-strength meters.
In Proc. NDSS (2014).
[16] DELL’AMICO, M., MICHIARDI, P., AND ROUDIER, Y. Pass-
In Proc. INFOCOM
word strength: An empirical analysis.
(2010).
[17] DEV, J. A. Usage of botnets for high speed md5 hash cracking.
In INTECH (2013).
[18] D ¨URMUTH, M., ANGELSTORF, F., CASTELLUCCIA, C., PER-
ITO, D., AND CHAABANE, A. OMEN: Faster password guessing
using an ordered markov enumerator. In Proc. ESSoS (2015).
[19] D ¨URMUTH, M., CHAABANE, A., PERITO, D., AND CASTEL-
LUCCIA, C. When privacy meets security: Leveraging personal
information for password cracking. CoRR (2013).
[20] FAHL, S., HARBACH, M., ACAR, Y., AND SMITH, M. On The
Ecological Validity of a Password Study. In Proc. SOUPS (2013).
[21] FORGET, A., CHIASSON, S., VAN OORSCHOT, P., AND BID-
DLE, R. Improving text passwords through persuasion. In Proc.
SOUPS (2008).
[22] GOODIN, D. Hackers expose 453,000 credentials allegedly taken
from Yahoo service. Ars Technica, July 2012.
[23] GOODIN, D. Anatomy of a hack: How crackers ransack pass-
words like “qeadzcwrsfxv1331”. Ars Technica, May 2013.
[24] GOODIN, D.
“thereisnofatebutwhatwemake”-turbo-charged
cracking comes to long passwords. Ars Technica, August 2013.
[25] GOODIN, D. Meet wordhound, the tool that puts a personal touch
on password cracking. Ars Technica, August 2014.
[26] GOOGLE.
Web 1T 5-gram version 1, 2006.
http:
//www.ldc.upenn.edu/Catalog/CatalogEntry.jsp?
catalogId=LDC2006T13.
[27] HAIBLE. gperf. https://www.gnu.org/software/gperf/,
2010-.
[28] HAQUE, S. T., WRIGHT, M., AND SCIELZO, S. A study of
user password strategy for multiple accounts. In Proc. CODASPY
(2013).
[29] IMPERVA.
Consumer password worst practices, 2010.
http://www.imperva.com/docs/WP_Consumer_
Password_Worst_Practices.pdf.
USENIX Association  
24th USENIX Security Symposium  477
15
[30] INSIDEPRO. PasswordsPro. http://www.insidepro.com/
eng/passwordspro.shtml, 2003-.
[31] KELLEY, P. G., KOMANDURI, S., MAZUREK, M. L., SHAY,
R., VIDAS, T., BAUER, L., CHRISTIN, N., CRANOR, L. F.,
AND LOPEZ, J. Guess again (and again and again): Measuring
password strength by simulating password-cracking algorithms.
In Proc. IEEE Symp. Security & Privacy (2012).
[32] KOMANDURI, S. Modeling the adversary to evaluate password
strengh with limited samples. PhD thesis, Carnegie Mellon Uni-
versity, 2015.
[33] KOMANDURI, S., SHAY, R., CRANOR, L. F., HERLEY, C., AND
SCHECHTER, S. Telepathwords: Preventing weak passwords by
reading users’ minds. In Proc. USENIX Security (2014).
[34] KOMANDURI, S., SHAY, R., KELLEY, P. G., MAZUREK, M. L.,
BAUER, L., CHRISTIN, N., CRANOR, L. F., AND EGELMAN,
S. Of passwords and people: Measuring the effect of password-
composition policies. In Proc. CHI (2011).
[35] KORELOGIC. ”Crack Me If You Can” - DEFCON 2010. http:
//contest-2010.korelogic.com/rules.html, 2010-.
[36] KORELOGIC. ”Crack Me If You Can” - DEFCON 2013. http:
//contest-2013.korelogic.com, 2010-.
[37] KORELOGIC.
KoreLogic Blog,
2014. https://blog.korelogic.com/blog/2014/04/04/
pathwell_topologies.
topologies.
Pathwell
[38] KORELOGIC. ”Analytical Solutions: Password Recovery Ser-
http://contest-2010.korelogic.com/prs.html,
vice.
2015.
[39] LOVE, D. Apple on iCloud breach:
It’s not our fault hack-
ers guessed celebrity passwords. International Business Times,
September 2014.
[40] MA, J., YANG, W., LUO, M., AND LI, N. A study of probabilis-
tic password models. In Proc. IEEE Symp. Security & Privacy
(2014).
[41] MARECHAL, S.
Automatic wordlist mangling rule gen-
http://www.openwall.
eration. Openwall Blog, 2012.
com/presentations/Passwords12-Mangling-Rules-
Generation/.
[42] MAZUREK, M. L., KOMANDURI, S., VIDAS, T., BAUER, L.,
CHRISTIN, N., CRANOR, L. F., KELLEY, P. G., SHAY, R., AND
UR, B. Measuring password guessability for an entire university.
In Proc. CCS (2013).
[43] MORRIS, R., AND THOMPSON, K. Password security: A case
history. CACM 22, 11 (1979).
[44] MWR INFOSECURITY. MWR InfoSecurity, 2014. https://
www.mwrinfosecurity.com/.
[45] NARAYANAN, A., AND SHMATIKOV, V. Fast dictionary attacks
on passwords using time-space tradeoff. In Proc. CCS (2005).
[46] OPENWALL. Wordlists. http://download.openwall.net/
pub/wordlists/, 2015.
[47] PERCIVAL, C. Stronger key derivation via sequential memory-
hard function. In Proc. BSD Conference (2009).
[48] PERLROTH, N. Adobe hacking attack was bigger than previously
thought. The New York Times Bits Blog, October 2013.
[49] PESLYAK, A. John the Ripper. http://www.openwall.com/
john/, 1996-.
[50] PESLYAK, A. John the Ripper. http://www.openwall.com/
john/doc/MODES.shtml, 1996-.
[51] PHDAYS. “Hash Runner”– Positive Hack Days. http://2013.
phdays.com/program/contests/, 2013.
[52] PROVOS, N., AND MAZIERES, D. A future-adaptable password
scheme. In Proc. USENIX (1999).
[53] RAO, A., JHA, B., AND KINI, G. Effect of grammar on security
of long passwords. In Proc. CODASPY (2013).
[54] SCHNEIER, B. MySpace passwords aren’t so dumb. Wired, De-
cember 2012.
[55] SCOWL.
Spell checker oriented word lists.
wordlist.sourceforge.net, 2015.
http://
[56] SHAY, R., KOMANDURI, S., DURITY, A. L., HUH, P. S.,
MAZUREK, M. L., SEGRETI, S. M., UR, B., BAUER, L., CRA-
NOR, L. F., AND CHRISTIN, N. Can long passwords be secure
and usable? In Proc. CHI (2014).
[57] STEUBE, J. Hashcat. https://hashcat.net/oclhashcat/,
2009-.
[58] STEUBE, J. Mask Attack. https://hashcat.net/wiki/
doku.php?id=mask_attack, 2009-.
[59] STEUBE, J. Rule-based Attack.
https://hashcat.net/
wiki/doku.php?id=rule_based_attack, 2009-.
[60] STOBERT, E., AND BIDDLE, R. The password life cycle: User
behaviour in managing passwords. In Proc. SOUPS (2014).
[61] STRICTURE GROUP. Password auditing services. http://
stricture-group.com/services/password-audits.htm.
June
2012. http://blog.spiderlabs.com/2012/06/eharmony-
password-dump-analysis.html.
eHarmony password dump analysis,
[62] TRUSTWAVE.
[63] TRUSTWAVE. 2014 business password analysis. Password Re-
search, 2014.
[64] TRUSTWAVE SPIDERLABS.
SpiderLabs/KoreLogic-Rules.
https://github.com/SpiderLabs/KoreLogic-Rules,
2012.
[65] UR, B., KELLY, P. G., KOMANDURI, S., LEE, J., MAASS, M.,
MAZUREK, M., PASSARO, T., SHAY, R., VIDAS, T., BAUER,
L., CHRISTIN, N., AND CRANOR, L. F. How does your pass-
word measure up? The effect of strength meters on password
creation. In Proc. USENIX Security (August 2012).
[66] UR, B., NOMA, F., BEES, J., SEGRETI, S. M., SHAY, R.,
BAUER, L., CHRISTIN, N., AND CRANOR, L. F. “i added ‘!’
at the end to make it secure”: Observing password creation in the
lab. In Proc. SOUPS (2015).
[67] VANCE, A.
If your password is 123456, just make it hackme.
New York Times, 2010.
[68] VERAS, R., COLLINS, C., AND THORPE, J. On the semantic
patterns of passwords and their security impact. In Proc. NDSS
(2014).
[69] WEIR, M., AGGARWAL, S., COLLINS, M., AND STERN, H.
Testing metrics for password creation policies by attacking large
sets of revealed passwords. In Proc. CCS (2010).
[70] WEIR, M., AGGARWAL, S., MEDEIROS, B. D., AND GLODEK,
B. Password cracking using probabilistic context-free grammars.
In Proc. IEEE Symp. Security & Privacy (2009).
[71] YAZDI, S. H. Analyzing password strength and efﬁcient pass-
word cracking. Master’s thesis, The Florida State University,
2011.
[72] ZHANG, Y., MONROSE, F., AND REITER, M. K. The security
of modern password expiration: An algorithmic framework and
empirical analysis. In Proc. CCS (2010).
478  24th USENIX Security Symposium 
USENIX Association
16
60%
40%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
105
107
109
1011
1013
Guesses
(a) Basic
101
103
20%
0%
30%
d
e
s
s
e
u
g
t
20%
n
e
c
r
e
P
10%
0%
20%
101
103
105
107
Guesses
109
1011
(b) Complex
PCFG−CV
PCFG
PCFG−noCV
PCFG−2009
PCFG
PCFG−noCV
PCFG−CV
PCFG−2009
PCFG−CV
PCFG
PCFG−noCV
PCFG−2009
15%
10%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
5%
0%
30%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
10%
101
103
105
107
Guesses
109
1011
1013
1015
(c) LongBasic
PCFG−noCV
PCFG
PCFG−CV
PCFG−2009
A Appendix
80%
We provide additional measurements of how guessing
approaches perform in different conﬁgurations. To sup-
port the ecological validity of our study, we also repeat
analyses from the body of the paper on password sets
leaked from RockYou and Yahoo. We provide these de-
tails in hopes of encouraging greater accuracy and repro-
ducibility across measurements of password guessability.
A.1 Alternate PCFG Conﬁgurations
We tested four different PCFG conﬁgurations. As in the
body of the paper, PCFG represents Komanduri’s im-
plementation of PCFG [32], which assigns letter strings
probabilities based on their frequency in the training data
and assigns unseen strings a non-zero probability. For
consistency across approaches, we prepend all policy-
compliant elements of the training data in lieu of en-
abling Komanduri’s similar hybrid structures [32].
PCFG−noCV is the same as PCFG, but without
the training data prepended. PCFG−CV is equiva-
lent to PCFG−noCV except for using two-fold cross-
validation. In each fold, we used half of the test pass-
words as additional training data, with a total weighting
equal to the generic training data, as recommended by
Kelley et al. [31]. PCFG−2009 is our approximation
of the original 2009 Weir et al. algorithm [70] in which
alphabetic strings are assigned uniform probability and
unseen terminals are a probability of zero.
As shown in Figure 15, prepending the training data
and performing cross-validation both usually result in
more efﬁcient guessing, particularly for Long and Long-
Basic passwords. All three other conﬁgurations outper-
form the original PCFG−2009 implementation.
Figure 16 shows the guessability of the 350 passwords
comprised only of digits across the Basic and LongBasic
sets. Similar to the results for passwords of other com-
mon characteristics (Section 4.3.2), approaches differed.
Of particular note is PCFG−2009, which plateaued at
around 50% of such passwords guessed in fewer than
through 1014
10 million guesses.
guesses, it would never guess another password of this
type because of the way it assigns probabilities.
Idiosyncratically,
A.2 Alternate JTR Conﬁgurations
We next separately analyze the sets of JTR mangling
rules we combined in the body of the paper. JTR stock
represents the 23 default rules that come with JTR.
JTR SpiderLabs represents 5,146 rules published by
KoreLogic during the 2010 DEF CON “Crack Me If You
Can” password-cracking contest [35], later reordered for
guessing efﬁciency by Trustwave Spiderlabs [64].
0%
101
103
105
107
Guesses
109
1011
1013
1015
(d) LongComplex
Figure 15: The guessing efﬁciency of the different PCFG
conﬁgurations we tested.
75%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
50%
25%
Hashcat
PCFG
JTR
Markov
PCFG−2009
0%
101
103
105
107
Guesses
109
1011
1013
1015
Figure 16: Guessing efﬁciency for the 350 Basic and
LongBasic passwords composed entirely of digits.
USENIX Association  
24th USENIX Security Symposium  479
17
As described in Section 3.3, our standard JTR conﬁg-
uration used JTR stock followed by JTR SpiderLabs. In
isolation (Figure 17), JTR stock rules were far more ef-
ﬁcient on a guess-by-guess basis than JTR SpiderLabs.
Unfortunately, however, they quickly ran out of guesses.
We exhausted JTR stock in making fewer than 109
guesses for Basic passwords. More crucially, we made
fewer than 105 guesses that were valid Complex pass-
words before exhausting these rules. Thus, any analysis
of passwords that uses only the stock rules will vastly
underestimate the guessability of passwords that contain
(or are required to have) many different character classes.
The sharp jumps in the proportion of Complex and
LongComplex passwords guessed by JTR SpiderLabs
result from one group of 13 rules. These rules capitalize
the ﬁrst letter, append digits, append special characters,
and append both digits and special characters.
A.3 Alternate Hashcat Conﬁgurations
We tested eight Hashcat conﬁgurations and chose the one