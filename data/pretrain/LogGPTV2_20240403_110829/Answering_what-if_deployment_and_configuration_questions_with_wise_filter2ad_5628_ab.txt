ables x1 and x5 remains unchanged in the input distribution, and
WISE needs to update only the distribution of the descendants of
x2 to maintain consistency. WISE constrains the input distribution
by intelligently re-sampling and re-weighing the dataset using the
causal structure as a guideline (see Section 5.4).
x4
x3
x2
y
In general, correlation does not imply causation. Causal in-
terpretation of association or correlation requires that the dataset
is independent of the outcome variable (see the Counterfactual
Model [20, 25]). A biased dataset can result in false or missing
causal assertions; for example, we could falsely infer that a treat-
ment is effective if, by coincidence, the dataset is such that more pa-
tients that are treated are healthy that the ones that are not treated.
We can make the correct inference if we assign the patients ran-
domly to the treatment because then the dataset would be indepen-
dent of the outcome. Fortunately, because many computer network-
ing phenomena are fundamentally similar throughout the Internet,
we can assume that the datasets are unbiased. Still, frivolous rela-
tionships might arise; we address this further in Section 5.2.
3. Facilitating Scenario Speciﬁcation: WISE presents the net-
work designers with an easy-to-use interface in the form of a
scenario speciﬁcation language called WISE-Scenario Language
(WSL). The designers can typically specify the baseline setup as
well as the hypothetical values for the scenario in 3-4 lines of WSL.
WSL allows the designers to evaluate a scenario for an arbitrary
subset of customers. WSL also provides a useful set of built-in
operators that facilitate scenario speciﬁcation as relative changes to
the existing values of variables or as new values from scratch. With
WSL, the designers are completely shielded from the complexity
of dependencies among the variables, because WISE automatically
updates the dependent variables. We detail WSL and the process of
scenario speciﬁcation and evaluation in Sections 5.3 and 5.4.
4. Estimating Response-Time Distribution: Datasets for typi-
cal CDN deployments and what-if scenarios span a large multi-
dimensional space. While non-parametric function estimation is a
standard application in the machine learning literature, the compu-
tational requirements for accurately estimating a function spanning
such a large space can be astronomical. To address this, WISE esti-
mates the function in a piece-wise manner, and also structures the
processing so that it is amenable to parallel processing. WISE also
uses the dependency structure to reduce the number of variables
that form the input to the regression function. Sections 5.5 and 5.6
provide more detail.
5. WISE SYSTEM
5.1 Feature Selection
Traditional machine-learning applications use various model se-
lection criteria, e.g., Akaike Information Criterion (AIC), Mallow’s
Cp Test, or k-fold cross-validation [25], for determining appropri-
ate subset of covariates for a learning problem. WISE forgoes the
traditional model selection techniques in favor of simple pair-wise
independence testing, because at times these techniques can ignore
variables that might have interpretive value for the designer.
WISE uses simple pair-wise independence tests on all the vari-
ables in the dataset with the response-time variable, and discards all
variables that it deems independent of the response-time variable.
For each categorical variable (variables that do not have numeric
meanings) in the dataset, such as, country of origin of a request, or
AS number, WISE obtains the conditional distributions of response
time for each categorical value, and discards the variable if all the
conditional distributions of response time are statistically similar.
To test this, we use Two-sample Kolmogorov-Smirnov (KS) good-
ness of ﬁt test with a signiﬁcance level of 10%.
For real-valued variables, WISE ﬁrst tests for correlation with
the response-time variable, and retains a variable if the correlation
coefﬁcient is greater than 10%. Unfortunately, for continuous vari-
ables, lack of correlation does not imply independence, so we can-
not outright discard a variable if we observe small correlation. A
typical example of such a variable in a dataset is the timestamp of
the Web transaction, where the correlation may cancel out over a
diurnal cycle. For such cases, we divide the range of the variable
in question into small buckets and treat each bucket as a category.
We then apply the same techniques as we do for the categorical
variables to determine whether the variable is independent. There
is still a possibility that we may discard a variable that is relevant,
but this outcome is less likely if sufﬁciently small buckets are used.
The bucket size depends on the variable in question; for instance,
we use one-hour buckets for the time-stamp variable in the datasets.
5.2 Learning the Causal Structure
To learn the causal structure, WISE ﬁrst learns the undirected
graph and then uses a set of rules to orient the edges.
Learning the Undirected Graph: Recall that in a Causal Bayesian
1: WCD (V, W0, ∆)
/*Notation
V: set of all variables
W0: set of no-cause variables
∆: maximum allowable cardinality for separators
a ⊥ b: Variable a is independent of variable b */
Remove all edges (a, b) if a ⊥ b
2: Make a complete Graph on V
3:
4: W = W0
5:
6:
for c = 1 to ∆ /*prune in the order of increasing cardinality*/
LocalPrune (c)
1: LocalPrune (c)
/*Try to separate neighbors of frontier variables W*/
∀w ∈ W
∀z ∈ N (w) /*neighbors of w*/
if ∃x ⊆ N (z)\w : |x| ≤ c, z ⊥ w|x
then /*found separator node(s)*/
Swz = x /*assign the separating nodes*/
Remove the edge (w, z)
Remove edges (w′, z), for all the nodes w′ ∈ W
that are also on path from w to nodes in W0
/*Update the new frontier variables*/
W = W ∪ x
2:
3:
4:
5:
6:
7:
8:
Figure 3: WISE Causal Discovery (WCD) algorithm.
Network (CBN), a variable, when conditioned on its parents, is in-
dependent of all other variables, except its descendants. Further
an optimal CBN requires ﬁnding the smallest possible set of par-
ents for each node that satisfy this condition. Thus by deﬁnition,
variables a and b in the CBN have an edge between them, if and
only if, there is a subset of separating variables, Sab, such that a
is independent of b given Sab. This, in the general case, requires
searching all the possible O(2n) combinations of the n variables in
the dataset
WISE-Causal Discovery Algorithm (WCD) (Figure 3) uses a
heuristic to guide the search of separating variables when we have
prior knowledge of a subset of variables that are “not caused” by
any other variables in the dataset, or that are determined by fac-
tors outside our system model (we refer to these variables as the
no-cause variables). Further, WCD does not perform exhaustive
search for separating variables, thus forgoing optimality for lower
complexity.
WCD starts with a fully connected undirected graph on the vari-
ables and removes the edges among variables that are clearly inde-
pendent. WCD then progressively ﬁnds separating nodes between
a restricted set of variables (that we call frontier variables), and
the rest of the variables in the dataset, in the order of increasing
cardinality of allowable separating variables. Initially the frontier
variables comprise only the no-cause variables. As WCD discovers
separating variables, it adds them to the set of frontier variables.
The algorithm terminates when it has explored separation sets up
to the maximum allowed cardinality ∆ ≤ n, resulting in a worse
case complexity of O(2∆). This termination condition means that
certain variables that are separable are not separated: this does not
result in false dependencies but potentially transitive dependencies
may be considered direct dependencies. This sub-optimality does
not affect the accuracy of the scenario datasets that WISE prepares,
but it reduces the efﬁciency because it leaves the graph to be denser
and the nodes having larger in-degree.
In the cases where the set of no-cause variables is unknown,
WISE relies on the PC-algorithm [23], which also performs search
for separating nodes in the order of increasing cardinality among
all pair of variables, but not using the frontier variables.
Orienting the Edges: WISE orients the edges and attempts to de-
tect latent variables using the following simple rules, well known
in the literature; we reproduce the rules here for convenience and
refer the reader to [20] for further details.
1. Add outgoing edges from the no-cause variables.
2. If node c has nonadjacent neighbors a and b, and c ∈ Sab,
then orient edges a → c ← b (unmarked edges).
3. For all nonadjacent nodes, a, b with a common neighbor c, if
there is an edge from a to c, but not from b to c, then add a
marked edge c ∗→ b.
4. If a and b are adjacent and there is directed path of only
marked edges from a to b, then add a → b
In the resulting graph, any unmarked, bi-directed, or undirected
edges signify possible latent variables and ambiguity in causal
structure. In particular, a → b means either a really causes b or
there is a common latent cause L causing both a and b. Similarly,
a ↔ b, signiﬁes a deﬁnite common latent cause, and undirected
edge between a and b implies either a causes b, b causes a, or a
common latent cause in the underlying model.
Addressing False Causal Relationships: False or missing causal
relationships can occur if the population in the dataset is not in-
dependent of the outcome variables. Unfortunately, because WISE
relies on passive datasets this is a fundamental limitation that can-
not be avoided. However, we expect that because the basic prin-
ciples of computer networks are similar across the Internet, and
the service providers use essentially the same versions of software
throughout their networks, the bias in the dataset that would sig-
niﬁcantly affect the causal interpretation is not common. If such
biases do exist, they will likely be among datasets from different
geographical deployment regions. To catch such biases, we rec-
ommend using a training dataset with WISE that is obtained from
different geographical locations. We can infer causal structure for
each geographical region separately; if the learned structure is dif-
ferent, the differences must be carefully examined in light of the
knowledge of systems internal working.
Lastly, while WISE depends on the CBN for preparing the sce-
nario dataset, it is not necessary that the CBN is learned automati-
cally from the dataset; the CBN can be supplied, entirely, or in part
by a designer who is well-versed with the system.
5.3 Specifying the “What-If” Scenarios
Figure 4 shows the grammar for WISE-Speciﬁcation Language
(WSL). A scenario speciﬁcation with WSL comprises a use-
statement, followed by optional scenario update-statements.
The use-statement speciﬁes a condition that describes the subset
of present network for which the designer is interested in evaluat-
ing the scenario. This statement provides a powerful interface to
the designer for choosing the baseline scenario: depending on the
features available in the dataset, the designer can specify a subset of
network based on location of clients (such as country, network ad-
dress, or AS number), the location of servers, properties of service
sessions, or a combination of these attributes.
The update-statements allow the designer to specify what-if val-
ues for various variables for the service session properties. Each
scenario statement begins with either the INTERVENE, or the AS-
SUME keyword and allows conditional modiﬁcation of exactly one
variable in the dataset.
When the statement begins with the INTERVENE keyword,
WISE ﬁrst updates the value of the variable in question. WISE then
uses the causal dependency structure to make the dataset consistent
scenario = use_stmt {update_stmt};
use_stmt = "USE" ("*" | condition_stmt);
update_stmt = ("ASSUME"|"INTERVENE") (set_directive |
setdist_directive) [condition_stmt];
set_directive = "SET" ["RADIAL"* | "FIXED"]
var set_op value;
setdist_directive = "SETDIST" feature
dist_name([param])| "FILE" filename);
condition_clause = "WHERE" condition;
condition = simple_cond | compound_cond;
simple_cond = compare_clause | (simple_cond);
compound_cond = (simple_cond ("AND"|"OR")
(simple_cond|compound_cond));
compare_clause = (var rel_op value) | member_test;
member_test = feature "IN" (value {,value});
set_op = "+=" | "-=" | "*=" | "\=" | "=";
rel_op = "=" | "<>" | "==" | "";
var = a variable from the dataset;
Figure 4: Grammar for WISE Speciﬁcation Language (WSL).
with the underlying dependencies. For this WISE uses a process
called Statistical Intervention Effect Evaluation (Section 5.4).
Advanced designers can override the intelligent update behavior
by using the ASSUME keyword in the update statement. In this
case WISE updates the distribution of the variable speciﬁed in the
statement but does not attempt to ensure that the distribution of the
dependent variables are correspondingly updated. WISE allows this
functionality for cases where the designers believe that the scenario
that they wish to evaluate involves changes to the underlying invari-
ant laws that govern the system. Examples of scenario speciﬁcation
with WSL will follow in Section 7.
5.4 Preparing Representative Distribution for
the “What-If” Scenarios
This section describes how WISE uses the dataset, the causal
structure, and the scenario speciﬁcation from the designer to pre-
pare a meaningful dataset for the what-if scenario.
WISE ﬁrst ﬁlters the global dataset for the entries that match the
conditions speciﬁed in the use-statement of the scenario speciﬁca-
tion to create the baseline dataset. WISE then executes the update-
statements, one statement at a time, to change the baseline dataset.
To ensure consistency among variables after every INTERVENE
update statement, WISE employs a process called Statistical Inter-
vention Effect Evaluation; the process is described below.
Let us denote the action requested on a variable xi in the update-
statement as set(xi). We refer to xi as the intervened variable. Let
us also denote the set of variables that are children of xi in the CBN
for the dataset as C(xi). Then the statistical intervention effect eval-
uation process states that the new distribution of children of xi is
given as: Pr{C(xi)|set(xi)}. The intuition is that because the par-
ent node in a CBN has a causal effect on its descendent nodes, we
expect that a change in the value of the parent variable must cause
a change in the value of the children. Further, the new distribution
of children variables would be one that we would expect to observe
under the changed values of the parent variable.
To apply this process, WISE conditions the global dataset on the
new value of the intervened variable, set(xi), and the existing val-
ues of the all the other parents of the children of the intervened
variable, P(C(xi)), in the baseline dataset to obtain an empirical
distribution. WISE then assigns the children a random value from
this distribution. WISE thus obtains a subset of the global dataset in
which the distribution of C(xi) is consistent with the action set(xi)
as well as the underlying dependencies.
Because the causal effect cascades to all the decedents of xi,
WISE repeats this process recursively, considering C(xi) as the in-
tervened variables and updating the distributions of C(C(xi)), and
so on, until all the descendants of xi (except the target variable) are
updated. WISE cannot update the distribution of a descendant of xi
until the distribution of all of its ancestors that are descendant of
xi has been updated. WISE thus carefully orders the sequence of
the updates by traversing the CBN DAG breadth-ﬁrst, beginning at
node xi.
WISE sequentially repeats this process for each statement in the
scenario speciﬁcation. The updated dataset produced after each
statement serves as the input dataset for the next statement. Once
all the statements are executed, the dataset is the representative joint
distribution variables for the entire what-if scenario.
When the causal structure has ambiguities, WISE proceeds as
follows. When the edge between two variables is undirected, WISE
maintains the consistency by always updating the distribution of
one if the distribution of the other is updated. For latent variables
case, WISE assumes an imaginary variable, with directed edges to
variables a and b and uses the resulting structure to traverse the
graph while preparing the input distribution.
5.5 Estimating Response Time Distribution
Finding the new distribution of response time is also a case of
intervention effect evaluation process. We use a non-parametric
regression method to estimate the expected response-time distribu-
tion, instead of assigning a random value from the constrained em-
pirical distribution as in the previous section, because the designers
are interested in the expected values of the response time for each
request. In particular, we use a standard Kernel Regression (KR)
method, with a radial basis Kernel function (see [24, 26] for de-
tails) to estimate the response time for each request in the dataset.
To address the computational complexity, WISE applies the KR in
a piece-wise manner; the details follow in the next section.