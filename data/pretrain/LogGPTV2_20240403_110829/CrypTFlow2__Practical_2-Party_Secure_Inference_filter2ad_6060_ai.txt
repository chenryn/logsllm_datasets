[59] Adi Shamir. 1979. How to Share a Secret. Commun. ACM 22, 11 (1979), 612–613.
Microsoft Research, Redmond, WA.
https://doi.org/10.1145/359168.359176
[60] N.P. Smart and F. Vercauteren. 2011. Fully Homomorphic SIMD Operations.
Cryptology ePrint Archive, Report 2011/133. http://eprint.iacr.org/2011/133.
[61] Sameer Wagh, Divya Gupta, and Nishanth Chandran. 2019. SecureNN: 3-Party
Secure Computation for Neural Network Training. PoPETs 2019, 3 (2019), 26–49.
[62] Xiao Wang, Alex J. Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient
MultiParty computation toolkit. https://github.com/emp-toolkit.
[63] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended
Abstract). In 27th Annual Symposium on Foundations of Computer Science, Toronto,
Canada, 27-29 October 1986. IEEE Computer Society, 162–167. https://doi.org/10.
1109/SFCS.1986.25
[64] Wenting Zheng, Raluca Ada Popa, Joseph E. Gonzalez, and Ion Stoica. 2019.
Helen: Maliciously Secure Coopetitive Learning for Linear Models. In 2019 IEEE
Symposium on Security and Privacy, S&P 2019, San Francisco, CA, USA, May 19-23,
2019. 724–738.
[65] Xiaoyong Zhu, George Iordanescu, Ilia Karmanov, and Mazen Zawaideh.
2018. https://blogs.technet.microsoft.com/machinelearning/2018/03/07/using-
microsoft-ai-to-build-a-lung-disease-prediction-model-using-chest-x-ray-
images/
A SUPPORTING PROTOCOLS
Here, we describe supporting protocols that our main protocols
rely on.
A.1 Protocol for regular FAND
Regular FAND can be realized using bit-triples [8], which are
of the form (⟨𝑑⟩𝐵
𝑏 ), where 𝑏 ∈ {0, 1} and 𝑑 ∧ 𝑒 = 𝑓 .
(cid:1)-OT2, the parties can generate two bit-
Using an instance of(cid:0)16
, ⟨𝑓 ⟩𝐵
, ⟨𝑒⟩𝐵
1
triples [25]. We describe this protocol for generating the first triple,
and from there, it will be easy to see how to also get the second
𝑏
𝑏
14
MUX:
𝑏 and ⟨𝑐⟩𝐵
𝑏 .
𝑏 s.t. 𝑧 = 𝑎 if 𝑐 = 1, else 𝑧 = 0.
Algorithm 6 Multiplexer, Π𝑛
Input: For 𝑏 ∈ {0, 1}, 𝑃𝑏 holds ⟨𝑎⟩𝑛
Output: For 𝑏 ∈ {0, 1}, 𝑃𝑏 learns ⟨𝑧⟩𝑛
1: For 𝑏 ∈ {0, 1}, 𝑃𝑏 picks 𝑟𝑏
$← Z𝑛.
0 = 0, (𝑠0, 𝑠1) = (−𝑟0,−𝑟0 + ⟨𝑎⟩𝑛
2: 𝑃0 sets 𝑠0, 𝑠1 as follows: If ⟨𝑐⟩𝐵
0 ).
Else, (𝑠0, 𝑠1) = (−𝑟0 + ⟨𝑎⟩𝑛
0 ,−𝑟0).
1
with inputs (𝑠0, 𝑠1) and 𝑃1 is the receiver with input ⟨𝑐⟩𝐵
𝑃1’s output be 𝑥1.
Else, (𝑡0, 𝑡1) = (−𝑟1 + ⟨𝑎⟩𝑛
with inputs (𝑡0, 𝑡1) and 𝑃0 is the receiver with input ⟨𝑐⟩𝐵
𝑃0’s output be 𝑥0.
3: 𝑃0 & 𝑃1 invoke an instance of(cid:0)2
5: 𝑃0 & 𝑃1 invoke an instance of(cid:0)2
(cid:1)-OT𝜂 where 𝑃0 is the sender
(cid:1)-OT𝜂 where 𝑃1 is the sender
4: 𝑃1 sets 𝑡0, 𝑡1 as follows: If ⟨𝑐⟩𝐵
1 ,−𝑟1).
1
1 . Let
1 = 0, (𝑡0, 𝑡1) = (−𝑟1,−𝑟1 + ⟨𝑎⟩𝑛
1 ).
0 . Let
6: For 𝑏 ∈ {0, 1}, 𝑃𝑏 outputs ⟨𝑧⟩𝑛
𝑏 = 𝑟𝑏 + 𝑥𝑏.
𝑏
1
1
1
1
1 ||⟨𝑒⟩𝐵
, ⟨𝑒⟩𝐵
𝑏
1
1 = ⟨𝑓 ⟩𝐵
triple using the same OT instance. The parties start by sampling
$← {0, 1} for 𝑏 ∈ {0, 1}. 𝑃1 sets the first
random shares ⟨𝑑⟩𝐵
1 , while the other two
bits are used for the second triple. 𝑃0 samples a random bit 𝑟 and
where 𝑖 ∈ {0, 1}4, 𝑃0 uses the first two bits 𝑖1||𝑖2 of 𝑖 to compute
𝑟⊕((𝑖1⊕⟨𝑑⟩𝐵
0 )), and sets it as the first bit of the message,
while reserving the second bit for the other triple. Finally, 𝑃0 sets
⟨𝑓 ⟩𝐵
1 .
It is easy to see correctness by noting that ⟨𝑓 ⟩𝐵
0 ⊕ (𝑑 ∧ 𝑒),
and since ⟨𝑓 ⟩𝐵
0 is uniformly random, security follows directly in
(cid:1)-OT2 as ⟨𝑑⟩𝐵
two bits of its input to(cid:0)16
(cid:1)-OT2 as follows: for the 𝑖-th message,
sets its input messages to(cid:0)16
(cid:1)-OT2 as ⟨𝑓 ⟩𝐵
0 = 𝑟, and 𝑃1 sets the first bit of the output of(cid:0)16
the(cid:0)16
(cid:1)-OT2-hybrid.
(cid:1)-OT2,
The communication of this protocol is the same as that of(cid:0)16
0 )∧(𝑖2⊕⟨𝑒⟩𝐵
which is 2𝜆 + 16 · 2 bits. Since we generate two bit-triples using this
protocol, the amortized cost per triple is 𝜆 + 16 bits, which is 144
for 𝜆 = 128.
A.2 Protocol for correlated FAND
Correlated triples are two sets of bit triples (⟨𝑑⟩𝐵
𝑏 , ⟨𝑓 ⟩𝐵
𝑏 )
(cid:0)16
(cid:1)-OT2 invocation to generate two regular triples, where the 4
and (⟨𝑑′⟩𝐵
𝑏 ), for 𝑏 ∈ {0, 1}, such that 𝑒 = 𝑒′, 𝑑 ∧ 𝑒 = 𝑓 ,
and 𝑑′ ∧ 𝑒′ = 𝑓 ′. The protocol from Appendix A.1 required a
(cid:0)8
(cid:1)-OT2 because 𝑒 = 𝑒′, and thus, 3 bits suffice to represent 𝑃1’s
1
bits of 𝑃1’s input were its shares of 𝑑, 𝑒, 𝑑′, and 𝑒′. However, when
generating correlated triples, we can instead use an instance of
(cid:1)-OT2,
The communication of this protocol is equal to that of(cid:0)8
1
input. Correctness and security follow in a similar way as in the
case of regular FAND (see Appendix A.1).
which costs 2𝜆+8·2 bits. Thus, we get an amortized communication
of 𝜆 + 8 bits per correlated triple.
A.3 Protocol for Multiplexer
𝑏 , ⟨𝑓 ′⟩𝐵
𝑏 , ⟨𝑒′⟩𝐵
𝑏 , ⟨𝑒⟩𝐵
We describe our protocol for realizing F 𝑛
First we argue correctness. Let 𝑐 = Reconst𝐵(⟨𝑐⟩𝐵
0 ⊕ ⟨𝑐⟩𝐵
(cid:1)-OT𝜂, 𝑥1 = −𝑟0+𝑐 ·⟨𝑎⟩𝑛
1 . By correctness of(cid:0)2
MUX in Algorithm 6.
0 , ⟨𝑐⟩𝐵
1 ) =
0 . Similarly,
1 ) = 𝑧0 + 𝑧1 = 𝑐 · 𝑎.
1 . Hence, Reconst𝑛(⟨𝑧⟩𝑛
⟨𝑐⟩𝐵
𝑥0 = −𝑟1 + 𝑐 · ⟨𝑎⟩𝑛
0 , ⟨𝑧⟩𝑛
1
1
B2A:
Algorithm 7 Boolean to Arithmetic, Π𝑛
Input: 𝑃0, 𝑃1 hold ⟨𝑐⟩𝐵
Output: 𝑃0, 𝑃1 learn ⟨𝑑⟩𝑛
1: 𝑃0 & 𝑃1 invoke an instance of(cid:0)2
0 and ⟨𝑐⟩𝐵
0 and ⟨𝑑⟩𝑛
1
1 , respectively, where 𝑐 ∈ {0, 1}.
(cid:1)-COT𝜂 where 𝑃0 is the sender
1 , respectively, s.t. 𝑑 = 𝑐.
with correlation function 𝑓 (𝑥) = 𝑥 + ⟨𝑐⟩𝐵
with input ⟨𝑐⟩𝐵
learns 𝑦1.
0 and 𝑃1 is the receiver
1 . Party 𝑃0 learns 𝑥 and sets 𝑦0 = 𝑛 − 𝑥 and 𝑃1
2: For 𝑏 ∈ {0, 1}, 𝑃𝑏 computes ⟨𝑑⟩𝑛
𝑏 = ⟨𝑐⟩𝐵
𝑏 − 2 · 𝑦𝑏.
Algorithm 8 ℓ-bit integer ReLU, Πint,ℓ
ReLU:
Input: 𝑃0, 𝑃1 hold ⟨𝑎⟩𝐿
0 and ⟨𝑎⟩𝐿
Output: 𝑃0, 𝑃1 get ⟨ReLU(𝑎)⟩𝐿
1: For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes F int,ℓ
1 , respectively.
0 and ⟨ReLU(𝑎)⟩𝐿
1 .
𝑏 to learn
𝑏 and ⟨𝑦⟩𝐵
𝑏 to
DReLU with input ⟨𝑎⟩𝐿
MUX with inputs ⟨𝑎⟩𝐿
𝑏 = ⟨𝑧⟩𝐿
𝑏 .
(cid:1)-OT𝜂-hybrid. Communication com-
output ⟨𝑦⟩𝐵
𝑏 .
2: For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes F 𝐿
𝑏 and sets ⟨ReLU(𝑎)⟩𝐿
Security trivially follows in(cid:0)2
learn ⟨𝑧⟩𝐿
plexity is 2(𝜆 + 2𝜂).
A.4 Protocol for B2A
1
1 − 2⟨𝑐⟩𝐵
B2A formally in Algo-
0 , ⟨𝑑⟩𝑛
1 )
1 . By correctness of(cid:0)2
1 . Security follows from the security of(cid:0)2
We describe our protocol for realizing F 𝑛
rithm 7. For correctness, we need to show that 𝑑 = Reconst𝐿(⟨𝑑⟩𝑛
0 ⟨𝑐⟩𝐵
0 + ⟨𝑐⟩𝐵
= ⟨𝑐⟩𝐵
⟨𝑐⟩𝐵
1 − 2𝑥 −
0 = ⟨𝑐⟩𝐵
1 . Using this, ⟨𝑑⟩𝑛
0 ⟨𝑐⟩𝐵
0 ⟨𝑐⟩𝐵
2⟨𝑐⟩𝐵
munication required is 𝜆 + 𝜂 bits.
B PROTOCOL FOR ReLU
(cid:1)-COT𝜂, 𝑦1 = 𝑥 +
(cid:1)-COT𝜂 and com-
1
1 = ⟨𝑐⟩𝐵
0 + 2𝑥 and ⟨𝑑⟩𝑛
1
MUX. F int,ℓ
DReLU and F 𝐿
MILL, which requires 𝜆(ℓ − 1) + 13 1
We describe our ReLU protocol for the case where the input and
output shares are over Z𝐿 in Algorithm 8, and note that the case
of Z𝑛 follows similarly. It is easy to see that the correctness and
, F 𝐿
MUX)−hybrid.
security of the protocol follow in the (F int,ℓ
DReLU
Communication complexity. We first look at the complexity of Πint,ℓ
ReLU,
which involves a call to F int,ℓ
DReLU has the same
communication as F ℓ−1
2 (ℓ − 1) −
2𝜆 − 22 bits if we assume 𝑚 = 4 and 𝑚 | (ℓ − 1), and exclude
optimization (3.1.1) in the general expression from Section 3.1.2.
MUX incurs a cost of 2𝜆 + 4ℓ bits, bringing the total cost to 𝜆ℓ +
F 𝐿
2 bits, which can be rewritten as < 𝜆ℓ + 18ℓ. We get
2 ℓ − 𝜆 − 35 1
17 1
our best communication for ℓ = 32 (with all the optimizations) by
taking 𝑚 = 7 for the Π31
DReLU, which gives
us a total communication of 3298 bits.
Now, we look at the complexity of Πring,𝑛
ReLU , which makes calls to
MUX. The cost of F ring,𝑛
F ring,𝑛
DReLU and F 𝑛
1
2 𝜆(𝜂 +1)+27(𝜂 +1)−4𝜆−44 bits for 2 invocations of F 𝜂+1
3
MILL, where
𝑃1’s input is the same in both invocations and the same assumptions
are made as for the expression of F ℓ−1
MUX is
2 𝜆(𝜂 + 1) + 31𝜂 − 13, which
2𝜆 + 4𝜂 bits, and thus, the total cost is 3
DReLU is 2𝜆+4 bits for(cid:0)4
MILL above. The cost of F 𝑛
MILL invocation inside Πint,32
(cid:1)-OT1, plus
15
1{𝑎0 ≥ 𝑛′}
1{𝑎1 ≥ 𝑛′}
1{𝑎𝑢 ≥ 𝑛′} 𝑤 𝑐1
𝑐0
0 𝐴′
0
-1 𝐴′
1
0 𝐴′
1