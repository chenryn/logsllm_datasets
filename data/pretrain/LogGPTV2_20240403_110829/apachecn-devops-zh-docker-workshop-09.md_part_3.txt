    78         'ENGINE': 'django.db.backends.postgresql',
    79         'NAME': 'postgres',
    80         'USER': 'postgres',
    81         'PASSWORD': 'docker',
    82         'HOST': 'db',
    83         'PORT': 5432,
    84     }
    85 }
    ```
    这一步的完整代码可以在[https://packt.live/2DWP9ov](https://packt.live/2DWP9ov)找到。
9.  在我们的`settings.py`文件的*第 28 行*处，我们还需要添加我们将要用作`ALLOWED_HOSTS`配置的 IP 地址。我们将把我们的应用配置为可以从 IP 地址`0.0.0.0`访问。在*第 28 行*对设置文件进行相关更改，使其看起来像下面的代码:
    ```
     27 
     28 ALLOWED_HOSTS = ["0.0.0.0"]
    ```
10.  Now test to see whether your basic project is working as expected. From the command line, deploy your services to Swarm with the `stack deploy` command. In the following command, specify the `docker-compose.yml` file to use with the `--compose-file` option and name the stack `test_swarm`:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
    该命令应该设置群网络、数据库和 web 服务:
    ```
    Creating network test_swarm_default
    Creating service test_swarm_db
    Creating service test_swarm_web
    ```
11.  Run the `docker service ls` command, and you should be able to see the status for both the `test_swarm_db` and `test_swarm_web` services:
    ```
    docker service ls
    ```
    如您在以下输出中所见，它们都显示了`1/1`的`REPLICAS`值:
    ```
    ID     NAME            MODE        REPLICAS  IMAGE
      PORTS
    dsr.   test_swarm_db   replicated  1/1       postgres
    kq3\.   test_swarm_web  replicated  1/1       swarm_web:latest
      *:8000.
    ```
12.  If your work has been successful, test it by opening a web browser and going to `http://0.0.0.0:8000`. If everything has worked, you should see the following Django test page displayed on your web browser:
    ![Figure 9.2: Deploying a service to Swarm with Docker Compose file ](img/B15021_09_02.jpg)
    图 9.2:使用 Docker 编写文件将服务部署到 Swarm
13.  To view the stacks currently running on your system, use the `stack ls` command:
    ```
    docker stack ls
    ```
    您应该会看到以下输出，其中显示了两个运行在`test_swarm`名称下的服务:
    ```
    NAME                SERVICES            ORCHESTRATOR
    test_swarm          2                   Swarm
    ```
14.  Use the `stack ps` command with the name of your swarm to view the services running and check whether there are any issues:
    ```
    docker stack ps test_swarm
    ```
    `ID`、`DESIRED STATE`和`ERROR`列不包括在以下减少的输出中。此外，可以看到`test_swarm_web.1`和`test_swarm_db.1`服务正在运行:
    ```
    NAME                IMAGE               NODE
      CURRENT STATE
    test_swarm_web.1    swarm_web:latest    docker-desktop
      Running
    test_swarm_db.1     postgres:latest     docker-desktop
      Running
    ```
15.  Just as you were able to start up all your services at once with the `deploy` command, you can stop the services all at once, as well. Use the `stack rm` command with the name of your swarm to stop all of your services from running and remove the stack:
    ```
    docker stack rm test_swarm
    ```
    请注意，所有服务都将在以下输出中停止:
    ```
    Removing service test_swarm_db
    Removing service test_swarm_web
    Removing network test_swarm_default
    ```
16.  You still want to perform some extra work on your swarm as part of this exercise, but first, make a minor change to the `compose` file. Open the `docker-compose.yml` file with your text editor and add the following lines to your web service to now have two replica web services created when deployed to the swarm:
    ```
    22     deploy:
    23       replicas: 2
    ```
    完整的`docker-compose.yml`文件应该如下所示:
    ```
    version: '3.3'
    services:
      db:
        image: postgres
        ports:
          - 5432:5432
        environment:
          - POSTGRES_PASSWORD=docker
      web:
        build: .
        image: swarm_web:latest
        command: python manage.py runserver 0.0.0.0:8000
        volumes:
          - .:/application
        ports:
          - 8000:8000
        environment:
          - PGPASSWORD=docker
        deploy:
          replicas: 2
        depends_on:
          - db
    ```
17.  使用您之前在*步骤 8* 中所做的相同命令，使用您所做的更改再次部署群。即使`test_swarm`栈仍在运行，它也会记录并对服务进行相关的更改:
    ```
    docker stack deploy --compose-file docker-compose.yml test_swarm
    ```
18.  Run the `docker ps` command as follows:
    ```
    docker ps | awk '{print $1 "\t" $2 }'
    ```
    在此处显示的输出中，仅打印前两列。您现在可以看到有两个`swarm_web`服务正在运行:
    ```
    CONTAINER         ID
    2f6eb92414e6      swarm_web:latest
    e9241c352e12      swarm_web:latest
    d5e6ece8a9bf      postgres:latest
    ```
19.  要在不停止服务的情况下将新版本的`swarm_web`服务部署到您的群中，首先，为我们的网络服务构建一个新的 Docker 映像。不要对映像进行任何更改，但这次使用`patch1`标签标记映像，以演示服务运行时的更改:
    ```
    docker build . -t swarm_web:patch1
    ```
20.  To perform a rolling update, use the `service update` command, providing details of the image you wish to update to and the service name. Run the following command, which uses the image you have just created with the `patch1` tag, on the `test_swarm_web` service:
    ```
    docker service update --image swarm_web:patch1 test_swarm_web
    ```
    Swarm 将管理更新，以确保在将更新应用于其余映像之前，其中一个服务始终在运行:
    ```
    image swarm_web:patch1 could not be accessed on a registry 
    to record its digest. Each node will access 
    swarm_web:patch1 independently, possibly leading to different 
    nodes running different versions of the image.
    test_swarm_web
    overall progress: 2 out of 2 tasks 
    1/2: running   [=========================================>]
    2/2: running   [=========================================>]
    verify: Service converged
    ```
    注意
    您会注意到输出显示映像在存储库中不可用。由于我们只有一个节点运行我们的群，更新将使用在该节点上构建的映像。在现实场景中，我们需要将这个映像推送到我们所有节点都可以访问的中央存储库，这样他们就可以提取它。
21.  Run the `docker ps` command given here, which pipes its output to an `awk` command to only print the first two columns of `CONTAINER` and `ID`:
    ```
    docker ps | awk '{print $1 "\t" $2 }'
    ```
    该命令将返回如下输出:
    ```
    CONTAINER         ID
    ef4107b35e09      swarm_web:patch1
    d3b03d8219dd      swarm_web:patch1
    d5e6ece8a9bf      postgres:latest
    ```
22.  如果您想控制滚动更新的发生方式，该怎么办？运行以下命令对您的`test_swarm_web`服务执行新的滚动更新。恢复您为部署带有`latest`标签的映像所做的更改，但这一次，请确保在执行更新时有`30`秒的延迟，因为这将使您的 web 服务在第二次更新运行前有额外的时间启动:
    ```
    docker service update --update-delay 30s --image swarm_web:latest test_swarm_web
    ```
23.  Run the `docker ps` command again:
    ```
    docker ps | awk '{print $1 "\t" $2 }'
    ```
    请注意，在您执行滚动更新后，容器现在再次运行`swarm_web:latest`映像:
    ```
    CONTAINER         ID
    414e62f6eb92      swarm_web:latest
    352e12e9241c      swarm_web:latest
    d5e6ece8a9bf      postgres:latest
    ```
到目前为止，您应该已经看到了使用集群的好处，尤其是当我们开始使用 Docker Compose 扩展我们的应用时。在本练习中，我们演示了如何使用 Docker Compose 轻松地在集群上部署和管理一组服务，并使用滚动更新来升级服务。
本章的下一节将进一步扩展您的知识，展示如何使用 Swarm 来管理您的环境中使用的配置和机密值。
# 用 Docker Swarm 管理机密和配置
到目前为止，在本章中，我们已经观察到 Docker Swarm 在编排我们的服务和应用方面的熟练程度。它还提供了允许我们在环境中定义配置并使用这些值的功能。为什么我们需要这个功能呢？
首先，我们存储诸如机密等细节的方式并不十分安全，尤其是当我们在我们的`docker-compose.yml`文件中以纯文本形式键入它们或者将它们作为我们构建的 Docker 映像的一部分时。对于我们的机密，Swarm 允许我们存储加密值，然后由我们的服务使用。
其次，通过使用这些功能，我们可以开始远离在`Dockerfile`中设置配置。这意味着我们可以创建和构建一个容器映像。然后，我们可以在任何环境下运行我们的应用，无论是笔记本电脑上的开发系统还是测试环境。我们还可以在生产环境中运行应用，在生产环境中，我们为它分配一个单独的配置或机密值，以便在该环境中使用。
创建一个 Swarm `config`很简单，尤其是如果你已经有一个现有的文件要使用。下面的代码展示了如何通过提供我们的`config_name`和我们的`configuration_file`的名称，使用`config create`命令创建一个新的`config`:
```
docker config create   
```
该命令创建一个`config`存储为集群的一部分，并且对集群中的所有节点可用。要查看系统和群集上的可用配置，请使用`config`命令运行`ls`选项:
```
docker config ls
```
您也可以使用`config inspect`命令查看配置中的详细信息。请确保您使用的是`--pretty`选项，因为输出是一个很长的 JSON 输出，没有它几乎无法读取:
```
docker config inspect --pretty 
```
在 Swarm 中使用机密提供了一种安全的方法，可以在我们的环境中以加密状态创建和存储敏感信息，例如用户名和密码，以便我们的服务可以使用这些信息。
要创建仅保存单个值(如用户名或密码)的机密，我们可以简单地从命令行创建机密，在命令行中，我们将机密值导入`secret create`命令。下面的示例命令提供了一个如何做到这一点的示例。创建机密时，请记住命名它:
```
echo "" | docker secret create  –
```
你可以从文件中得到一个机密。例如，假设您希望将证书文件设置为机密。下面的命令显示了如何使用`secret create`命令，通过提供机密的名称和您需要从中创建机密的文件名来实现这一点:
```
docker secret create   
```
一旦创建，你的机密将在你的群中运行的所有节点上可用。正如您可以查看您的`config`一样，您可以使用`secret ls`命令查看群中所有可用机密的列表:
```
docker secret ls
```
我们可以看到 Swarm 为我们提供了在编排中实现配置和机密的灵活选项，而不需要将其设置为 Docker 映像的一部分。
下面的练习将演示如何在当前的 Docker Swarm 环境中使用配置和机密。
## 练习 9.03:在你的群中实现配置和机密
在本练习中，您将进一步扩展您的 Docker Swarm 环境。您将向您的环境添加一个服务，该服务将帮助 NGINX 在进入您的 web 服务之前通过代理路由请求。您将使用传统方法进行设置，然后使用`config`和`secret`功能作为环境的一部分，观察它们在 Swarm 中的操作，并帮助用户更高效地部署和配置服务: