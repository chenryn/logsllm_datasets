title:Now You See Me: Hide and Seek in Physical Address Space
author:Ning Zhang and
Kun Sun and
Wenjing Lou and
Yiwei Thomas Hou and
Sushil Jajodia
Now You See Me: Hide and Seek in Physical Address
Space
Ning Zhang
Kun Sun
Wenjing Lou
Virginia Polytechnic Institute
College of William and Mary
Virginia Polytechnic Institute
and State University
Blacksburg, VA, USA
PI:EMAIL
Williamsburg, VA, USA
PI:EMAIL
and State University
Blacksburg, VA, USA
PI:EMAIL
Y. Thomas Hou
Sushil Jajodia
Virginia Polytechnic Institute
George Mason University
and State University
Blacksburg, VA, USA
PI:EMAIL
Fairfax, VA, USA
PI:EMAIL
ABSTRACT
With the growing complexity of computing systems, memory based
forensic techniques are becoming instrumental in digital investiga-
tions. Digital forensic examiners can unravel what happened on a
system by acquiring and inspecting in-memory data. Meanwhile,
attackers have developed numerous anti-forensic mechanisms to
defeat existing memory forensic techniques by manipulation of sys-
tem software such as OS kernel. To counter anti-forensic tech-
niques, some recent researches suggest that memory acquisition
process can be trusted if the acquisition module has not been tam-
pered with and all the operations are performed without relying on
any untrusted software including the operating system.
However, in this paper, we show that it is possible for malware to
bypass the current state-of-art trusted memory acquisition module
by manipulating the physical address space layout, which is shared
between physical memory and I/O devices on x86 platforms. This
fundamental design on x86 platform enables an attacker to build an
OS agnostic anti-forensic system. Base on this ﬁnding, we propose
Hidden in I/O Space (HIveS) which manipulates CPU registers to
alter such physical address layout. The system uses a novel I/O
Shadowing technique to lock a memory region named HIveS mem-
ory into I/O address space, so all operation requests to the HIveS
memory will be redirected to the I/O bus instead of the memory
controller. To access the HIveS memory, the attacker unlocks the
memory by mapping it back into the memory address space. Two
novel techniques, Blackbox Write and TLB Camouﬂage, are devel-
oped to further protect the unlocked HIveS memory against mem-
ory forensics while allowing attackers to access it. A HIveS pro-
totype is built and tested against a set of memory acquisition tools
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714600.
for both Windows and Linux running on x86 platform. Lastly, we
propose potential countermeasures to detect and mitigate HIveS.
Categories and Subject Descriptors
D.2.11 [Software Engineering]: [Software Architectures - Infor-
mation hiding]; K.6.5 [Management of Computing and Informa-
tion Systems]: [Security and Protection - Invasive software]
General Terms
Design, System
Keywords
Digital Forensics; Memory Acquisition; System Security; Rootkits
1.
INTRODUCTION
Digital forensics is the science on collecting and presenting dig-
ital evidence. With the ever increasing use of computing systems
in our daily life, computers and networks have become not only the
personal portal to instant information, but also a platform that crim-
inals exploit to commit crimes. Digital forensics is now one of the
services sought at the very beginning of all types of investigation -
criminal, civil, and corporate [7, 13].
Disk forensic methods and tools have matured in the past two
decades, offering comprehensive capabilities to extract and visual-
ize artifacts from nonvolatile storage images. With the prevalence
of memory hiding techniques and the need to evade disk forensic,
adversaries are starting to hide the presence of malicious code and
data only in the memory [8, 16, 15]. To tackle this problem, foren-
sic examiners are increasingly relying on live memory forensics to
uncover the malicious contents in the memory [7].
There are two general memory acquisition approaches: software
based approach and hardware based approach. Software based so-
lutions rely on a trusted memory acquisition module in the operat-
ing system to acquire the memory through the processor [35, 21].
Hardware based solutions often utilize dedicated I/O devices, such
as network interface card, to capture physical memory image via di-
rect memory access (DMA) [10, 28, 39] with the processor totally
bypassed. Some hardware based approaches use the remanence of
physical memory to extract sensitive data from memory module in
systems that are powered off for a short time [11, 18].
To counter live memory forensics, attackers have developed a
number of anti-forensic techniques to sabotage the memory acqui-
sition process [19]. Current anti-forensic techniques against soft-
ware based memory acquisition rely on manipulating the software
used in the memory acquisition process. Some examples include
modifying the acquisition module or the OS kernel [20, 34, 15],
hooking operating system APIs [32], or installing a thin hypervisor
on the ﬂy [29]. Based on this observation, Stüttgen et al. recently
suggested that the memory acquisition process can be trusted with
two conditions. The ﬁrst one is that the acquisition module has not
been tampered with, and the second one states all the operations
are performed without relying on the operating system or any other
untrusted software [35]. However, in this paper, we show that this
assumption is not true by presenting Hidden in I/O Space (HIveS),
an operating system (OS) agnostic anti-forensic mechanism, that is
capable of evading the most updated software based memory foren-
sics tools.
Physical address space on x86 platform is shared between phys-
ical memory and I/O devices. Memory access to a physical address
gets directed to either the memory controller or the I/O bus based
on where it is located in the address space layout. This physical ad-
dress layout is also what memory forensics tools use to understand
where the physical memory regions are located. Memory forensic
tools obtain this layout information by interacting with operating
system or BIOS, and they assume this layout is correct and updated.
We show that this condition can be easily violated by presenting
HIveS. HIveS alters the machine physical address layout while the
system is in operational state by modifying registers in the proces-
sor. With this mispresented address layout, HIveS can conceal a
memory region called HIveS memory from being observed and ac-
quired by memory forensics tools.
The basic idea is to map (or lock) the HIveS memory into the
I/O space, so that any operation on the physical memory address
will be redirected to the I/O bus instead of the memory controller.
When the HIveS memory is locked, its memory contents cannot be
accessed by any processor, including the one(s) controlled by the
attacker. When the attacker wants to access the HIveS memory,
she would ﬁrst unlock the memory region by mapping it back into
the memory address space. To protect the unlocked HIveS mem-
ory against memory forensics, we propose two novel techniques,
Blackbox Write and TLB Camouﬂage. Blackbox Write enables
only write access to the HIveS memory by creating asymmetric
read and write destinations between the memory space and the I/O
space. TLB Camouﬂage exploits TLB cache incoherency among
multi-core processors to ensure exclusive read and write access for
a single processor core to the HIveS memory.
HIveS is operating system agnostic, since it only changes the
system hardware conﬁgurations. We build a prototype of HIveS
on an x86 desktop with an AMD FX processor running both Win-
dows and Linux. Since HIveS conceals the presence of malware
without changing any system software including BIOS, hypervisor
or OS kernel, it can effectively defeat the most updated software
based memory acquisition tools on both Windows and Linux. Fur-
thermore, we extend HIveS with a number of existing anti-forensic
techniques, such as RAM-less encryption and Cache based I/O stor-
age, to defeat hardware based memory acquisition approaches.
We propose several countermeasures for detecting and mitigat-
ing HIveS. One seemingly simple solution is to directly inspect the
CPU registers that may have been manipulated by HIveS. However,
since legitimate peripheral device drivers may also change the same
set of CPU registers, it remains a challenge to distinguish normal
conﬁgurations from malicious usages, and maybe impossible with-
out crashing the system on some hardware platforms.
To summarize, we make the following contributions.
• We present HIveS, a system that exploits hardware features
in x86 platform to subvert the foundation of memory acqui-
sition. HIveS is an OS agnostic anti-forensic mechanism
that can defeat memory forensic techniques by concealing
the HIveS memory in the I/O space.
• We develop two novel techniques to enable covert operations
on the unlocked HIveS memory against memory forensics.
Blackbox Write grants only the write privilege to the HIveS
memory, and TLB Camouﬂage can grant malicious users ex-
clusive read and write access to the HIveS memory.
• A prototype of HIveS is built on the x86 platform to demon-
strate its capability on concealing the HIveS memory against
a number of most updated memory forensics tools on both
Windows and Linux.
• We propose potential countermeasures to detect and mitigate
HIveS. As an arms race, we show that HIveS can be en-
hanced to further evade hardware based memory acquisition
solutions.
The remainder of the paper is organized as follows. Section 2
describes some background knowledge on x86 memory address
space. We present the HIveS framework in Section 3 and discuss
its extensions in Section 4. A prototype implementation is detailed
in Section 5. We propose potential countermeasures in Section 6.
Section 8 discusses the related works. Finally, we conclude the
paper in Section 9.
2. BACKGROUND
The entire range of memory addresses accessible by x86 pro-
cessors is often referred to as physical address space. Contrary
to popular believes, the length of such address space usually does
not equal to the amount of actual physical memory installed on the
platform. This is because some of the address is mapped to the
bus for I/O devices, instead of dynamic random access memory
(DRAM). A typical memory layout of systems with AMD proces-
sors is shown in Figure 1, where the shaded areas are backed by
DRAM, and the areas without shade are backed by I/O devices.
This memory layout is used by the Memory Map Unit (MMU)
to route memory requests from the processor to either DRAM or
memory-mapped I/O (MMIO).
The memory setting of an x86 system is initialized by the BIOS
at hardware reset and parsed by the operating system during the
system bootstrap [9]. The layout is conﬁgured via several con-
ﬁguration registers in the North Bridge (NB) and the processor.
DRAM Base/Limit register pair is among the earliest ones conﬁg-
ured by the BIOS. They deﬁne the ranges of physical address space
3. HIVES FRAMEWORK
In the ongoing battle between attackers and digital forensics ex-
aminers, memory acquisition is becoming an important technique
for evidence collection. From the perspective of an attacker, we
design HIveS, an anti-forensic system.
It is capable of evading
acquisition by software based memory forensics tools on a desig-
nated range of physical memory chosen by the attacker. We call
this range of memory HIveS memory. It can be used by attackers to
store malicious code or sensitive data.
A high level block diagram of the HIveS system is shown in
Figure 2. For simplicity, we show a generic x86 multi-core archi-
tecture with one processor consisting of two cores. Each processor
core has its own cache and TLB.
When a processor core needs to access the DRAM memory, it
sends a request to the north bridge. The MUX inside the north
bridge is responsible of forwarding the memory request to either
the DRAM controller or the south bridge based on the physical
address layout. This layout was initialized by the BIOS, then fur-
ther deﬁned by the operating system using model-speciﬁc registers
(MSRs) including the top of memory (TOM) registers and the I/O
range registers (IORRs). When the physical address is mapped to
the I/O space, the request is forwarded to the south bridge. When
the physical address falls in the DRAM range, the memory request
goes through the DRAM controller to the physical memory.
HIveS has two states, locked and unlocked. When it is in the
locked state, the HIveS memory is completely inaccessible to any
processor core. This is because all access attempts are forwarded
to the I/O space once HIveS is locked. While the system remains in
this state, even the malicious core (e.g., Core 1 in Figure 2) cannot
access the HIveS memory. When the attacker needs to access the
HIveS memory, she can set HIveS to unlocked state, where only the
malicious core can access the HIveS memory, and memory requests
from all other cores are redirected to another DRAM region. Lastly,
since HIveS relies only on hardware conﬁgurations to conceal the
HIveS memory, it is OS agnostic. Moreover, it leaves no trace in
memory. Unlike some of the current rootkits that modiﬁes kernel
data structures or operating system APIs, HIveS cannot be detected
by checking the integrity of the OS.
3.1
Inaccessibility in the Locked State
Considering the use case of a password stealing rootkit, whose
goal is to steal passwords and store them quietly in some place be-
fore an opportunity to exﬁltrate, there is no need for the rootkit to
read from or write to the memory where the stolen passwords are
stored until it is ready to transmit. HIveS is designed to an anti-
forensic tool, so we develop a novel I/O Shadowing technique to
block all processor cores from accessing the HIveS memory. The
basic idea of I/O shadowing is to dynamically manipulate the con-
ﬁguration of a memory range so that even if it is backed by the
DRAM in the physical address space, any read/write request will
be redirected to the I/O space. The real contents in the DRAM
memory are shadowed by the memory-mapped I/O (MMIO).