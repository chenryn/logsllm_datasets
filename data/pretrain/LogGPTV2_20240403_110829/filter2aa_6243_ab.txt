.Sp
以及符号的子引用
.Sp
.Vb 2
\&    &{$foo}(@args);
\&    $foo->(@args);
.Ve
.Sp
不会被检查是否被污染。这要求额外的小心，除非你希望外部数据影响你的控制流。除非你小心地限制这些符号值是什么，人们可以从 Perl 代码外部调用函数，类似 POSIX::system，来运行任意外部代码。
.PP
为了效率原因，Perl 对数据是否已被污染持保守的看法。如果一个表达式包含污染的数据，任何子表达式都被认为污染的，即使自表达式的值与污染的数据无关
.PP
由于污染与每个标量值相关，一个数组或散列的元素可以只有一部分被污染。散列的键永远不会被污染。
.PP
例如：
.PP
.Vb 8
\&    $arg = shift;               # $arg 是污染的
\&    $hid = $arg, 'bar';         # $hid 也是污染的
\&    $line = <>;                 # 污染的
\&    $line = ;            # 仍旧是污染的
\&    open FOO, "/home/me/bar" or die $!;
\&    $line = ;              # 还是污染的
\&    $path = $ENV{'PATH'};       # 污染的, 但是请看下面
\&    $data = 'abc';              # 非污染的
.Ve
.PP
.Vb 5
\&    system "echo $arg";         # 不安全的
\&    system "/bin/echo", $arg;   # 认为不安全
\&                                # (Perl 不知道 /bin/echo)
\&    system "echo $hid";         # 不安全的
\&    system "echo $data";        # 如果PATH被设定，那么才是安全的
.Ve
.PP
.Vb 1
\&    $path = $ENV{'PATH'};       # $path 现在是污染的
.Ve
.PP
.Vb 2
\&    $ENV{'PATH'} = '/bin:/usr/bin';
\&    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};
.Ve
.PP
.Vb 2
\&    $path = $ENV{'PATH'};       # $path 现在不是污染的
\&    system "echo $data";        # 现在是安全的!
.Ve
.PP
.Vb 2
\&    open(FOO, " $arg");        # Not OK - 试图去写
.Ve
.PP
.Vb 3
\&    open(FOO,"echo $arg|");     # Not OK
\&    open(FOO,"-|")
\&        or exec 'echo', $arg;   # 同样 not OK
.Ve
.PP
.Vb 1
\&    $shout = `echo $arg`;       # 不安全的, $shout 现在是污染的
.Ve
.PP
.Vb 2
\&    unlink $data, $arg;         # 不安全的
\&    umask $arg;                 # 不安全的
.Ve
.PP
.Vb 3
\&    exec "echo $arg";           # 不安全的
\&    exec "echo", $arg;          # 不安全的
\&    exec "sh", '-c', $arg;      # 非常不安全！
.Ve
.PP
.Vb 2
\&    @files = ;             # 不安全的 (使用 readdir() 或其他)
\&    @files = glob('*.c');       # 不安全的 (使用 readdir() 或其他)
.Ve
.PP
.Vb 4
\&    # In Perl releases older than 5.6.0 the  and glob('*.c') would
\&    # have used an external program to do the filename expansion; but in
\&    # either case the result is tainted since the list of filenames comes
\&    # from outside of the program.
.Ve
.PP
.Vb 2
\&    $bad = ($arg, 23);          # $bad will be tainted
\&    $arg, `true`;               # Insecure (although it isn't really)
.Ve
.PP
如果你试图做一些不安全的事情，你会得到类似"Insecure dependency"或"Insecure $ENV{PATH}"的致命错误。
.Sh "Laundering and Detecting Tainted Data 清洗和检测污染数据"
.IX Subsection "Laundering and Detecting Tainted Data"
测试一个变量是否含有污染的数据，谁的用法会引发一条"Insecure dependency"信息，在你附近的CPAN镜像查找Taint.pm模块，它应该在1997年左右就可以得到 。或者你可以用is_tainted()函数。
.PP
.Vb 3
\&    sub is_tainted {
\&        return ! eval { eval("#" . substr(join("", @_), 0, 0)); 1 };
\&    }
.Ve
.PP
此函数利用了“表达式中任何一部分存在的污染数据致使整个表达式都被污染”。操作员测试每个参数是否被污染会使效率低下。相反，稍稍高效且稳定的方法是，只要一个表达式中任何一部分存取一个被污染的值，那么这个表达式被认为是被污染的。
.PP
但是仅仅测试数据是否被污染还不够。有时你必须清除数据的污染。唯一的通过污染机制的方法是引用正则表达式中的一个子模式。Perl假定如果你用$1, $2等等引用一个子串，那么你就知道你在做什么。也就是说你必须思考而不是盲目的解除污染，或者违抗整个机制。校验变量是否只含有好的字符（已知的好的字符）比检查它是否含有坏的字符要好。是因为很可能就把意料之外的坏字符漏掉。
.PP
下面的例子是一个检查数据中是否只含有单词（字母、数字、下划线）、连字符、'@'符号或者是'.'。
.PP
.Vb 5
\&    if ($data =~ /^([-\e@\ew.]+)$/) {
\&        $data = $1;                     # $data now untainted
\&    } else {
\&        die "Bad data in '$data'";      # log this somewhere
\&    }
.Ve
.PP
这完全没有问题，因为/\w+/通常不匹配shell中的字符、'.'、破折号、亦或任何对于shell有特殊含义的字符。使用/.+/从理论上讲会不安全，因为它匹配任何字符，而Perl将不再检查它们。我们的经验是当你解除污染时，必须对匹配模式极其的小心。使用正则表达式清洗数据是解除污染的唯一机制，除非你使用下面才详细叙述的派生一个特权被降低的字进程的方法。
.PP
如果程序中使用了use locale，那么上面的例子将不会解除$data的污染，因为\w匹配的字符是由locale决定的。Perl认为locale的定义是不可信的，因为它们包含程序之外 的数据。如果你在写一个locale-aware的程序，并且想使用包含\w的正则表达式清洗数据，那么请在同一块内的表达式之前加上no locale。参见perllocale/SECURITY以获 得更多的信息。
.ie n .Sh ""#!"行的开关"
.el .Sh "``#!''行的开关"
.IX Subsection "Switches On the #! Line"
当你使脚本程序可执行，就是可以像命令一样让它们工作时，系统会把"#!"行的开关传递给Perl。Perl检查setuid（或setgid）程序的任何和"#!"行开关匹配的命令行开关。一些Unix或Unix-like系统环境强制在"#!"行使用一个开关，所以你也许必须用类似-wU的开关而不是-w -U。（这个问题只出现在支持#!、setuid、setgid脚本的Unix或Unix-like系统环境中）
.ie n .Sh "Taint mode and @INC"
.el .Sh "Taint mode and \f(CW@INC\fP"
.IX Subsection "Taint mode and @INC"
When the taint mode (\f(CW\*(C`\-T\*(C'\fR) is in effect, the \*(L".\*(R" directory is removed
from \f(CW@INC\fR, and the environment variables \f(CW\*(C`PERL5LIB\*(C'\fR and \f(CW\*(C`PERLLIB\*(C'\fR
are ignored by Perl. You can still adjust \f(CW@INC\fR from outside the
program by using the \f(CW\*(C`\-I\*(C'\fR command line option as explained in
perlrun. The two environment variables are ignored because
they are obscured, and a user running a program could be unaware that
they are set, whereas the \f(CW\*(C`\-I\*(C'\fR option is clearly visible and
therefore permitted.
.PP
Another way to modify \f(CW@INC\fR without modifying the program, is to use
the \f(CW\*(C`lib\*(C'\fR pragma, e.g.:
.PP
.Vb 1
\&  perl -Mlib=/foo program
.Ve
.PP
The benefit of using \f(CW\*(C`\-Mlib=/foo\*(C'\fR over \f(CW\*(C`\-I/foo\*(C'\fR, is that the former
will automagically remove any duplicated directories, while the later
will not.
.Sh "Cleaning Up Your Path 清理路径"
.IX Subsection "Cleaning Up Your Path"
对于"Insecure $ENV{PATH}"这样的信息，你必须把$ENV{PATH}设置为已知的，并且路径中的任何目录都对于非本用户或非本组成员不可写。你也许会在即使路径名是完全合法的情况下收到那条信息表示非常惊讶。当你没有提供程序一个完整的路径时，它不会被引起；相反，若你从未设置PATH环境变量，或者你没有把它设置安全，它就会被引起。因为Perl不能保证可疑的可执行程序是不是它本身将执行其他的依赖于PATH的程序，它确定是你设定的PATH。
.PP
PATH不是唯一可能导致问题的变量。因为一些shell会使用IFS，CDPATH，ENV和BASH_ENV，Perl在开始子进程时检查它们是否也为空或者未污染。你也许会在你的set-id和污染检测模式下的脚本程序中加入这些东西：