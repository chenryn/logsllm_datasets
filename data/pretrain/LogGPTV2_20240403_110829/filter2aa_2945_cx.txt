The ViewModel provides access to customer information through the
Current property, but currently, it does not supply a way to navigate between
customers. You can implement methods that increment and decrement the
currentCustomer variable so that the Current property retrieves different
customers, but you should do so in a manner that does not tie the view to the
ViewModel. The most commonly accepted technique is to use the Command
pattern. In this pattern, the ViewModel exposes methods in the form of
commands that the view can invoke. The trick is to avoid explicitly
referencing these methods by name in the code for the view. To do this,
Download from finelybook PI:EMAIL
975
XAML makes it possible for you to declaratively bind commands to the
actions triggered by controls in the UI, as you will see in the exercises in the
next section.
Adding commands to a ViewModel
The XAML markup that binds the action of a control to a command requires
that commands exposed by a ViewModel implement the ICommand
interface. This interface defines the following items:
CanExecute This method returns a Boolean value indicating whether
the command can run. Using this method, a ViewModel can enable or
disable a command depending on the context. For example, a
command that fetches the next customer from a list should be able to
run only if there is a next customer to fetch; if there are no more
customers, the command should be disabled.
Execute This method runs when the command is invoked.
CanExecuteChanged This event is triggered when the state of the
ViewModel changes. Under these circumstances, commands that could
previously run might now be disabled and vice versa. For example, if
the UI invokes a command that fetches the next customer from a list, if
that customer is the last customer, then subsequent calls to CanExecute
should return false. In these circumstances, the CanExecuteChanged
event should fire to indicate that the command has been disabled.
In the next exercise, you will create a generic class that implements the
ICommand interface.
Implement the Command class
1. In Visual Studio, right-click the Customers project, point to Add, and
then click Class.
2. In the Add New Item - Customers dialog box, select the Class template.
In the Name box, type Command.cs, and then click Add.
3. In the Code and Text Editor window displaying the Command.cs file,
add the following using directive to the list at the top of the file:
using System.Windows.Input;
Download from finelybook PI:EMAIL
976
The ICommand interface is defined in this namespace.
4. Make the Command class public and specify that it implements the
ICommand interface, as follows in bold:
Click here to view code image
public class Command : ICommand
{
}
5. Add the following private fields to the Command class:
Click here to view code image
public class Command : ICommand
{
    private Action methodToExecute = null;
    private Func methodToDetectCanExecute = null;
}
The Action and Func types are briefly described in Chapter 20,
“Decoupling application logic and handling events.” The Action type is
a delegate that you can use to reference a method that takes no
parameters and does not return a value, and the Func type is also a
delegate that can reference a method that takes no parameters but returns
a value of the type specified by the type parameter T. In this class, you
will use the methodToExecute field to reference the code that the
Command object will run when it is invoked by the view. The
methodToDetectCanExecute field will be used to reference the method
that detects whether the command can run (it may be disabled for some
reason, depending on the state of the app or the data).
6. Add a constructor to the Command class. This constructor should take
two parameters: an Action object and a Func object. Assign these
parameters to the methodToExecute and methodToDetectCanExecute
fields, as shown here in bold:
Click here to view code image
public Command : ICommand
{
    ...
    public Command(Action methodToExecute, Func
methodToDetectCanExecute)
    {
Download from finelybook PI:EMAIL
977
        this.methodToExecute = methodToExecute;
        this.methodToDetectCanExecute =
methodToDetectCanExecute;
    }
}
The ViewModel will create an instance of this class for each command.
The ViewModel will supply the method to run the command and the
method to detect whether the command should be enabled when it calls
the constructor.
7. Implement the Execute and CanExecute methods of the Command class
by using the methods referenced by the methodToExecute and
methodToDetectCanExecute fields, as follows:
Click here to view code image
public Command : ICommand
{
    ...
    public Command(Action methodToExecute,
         Func methodToDetectCanExecute)
    {
        ...
    }
    public void Execute(object parameter)
    {
        this.methodToExecute();
    }
    public bool CanExecute(object parameter)
    {
        if (this.methodToDetectCanExecute == null)
        {
            return true;
        }
        else
        {
            return this.methodToDetectCanExecute();
        }
    }
}
Notice that if the ViewModel provides a null reference for the
methodToDetectCanExecute parameter of the constructor, the default
action is to assume that the command can run, and the CanExecute
method returns true.
Download from finelybook PI:EMAIL
978
8. Add the public CanExecuteChanged event to the Command class:
Click here to view code image
public Command : ICommand
{
    ...
    public bool CanExecute(object parameter)
    {
        ...
    }
    public event EventHandler CanExecuteChanged;
}
When you bind a command to a control, the control automatically
subscribes to this event. This event should be raised by the Command
object if the state of the ViewModel is updated and the value returned by
the CanExecute method changes. The simplest strategy is to use a timer
to raise the CanExecuteChanged event once a second or so. The control
can then invoke CanExecute to determine whether the command can
still be executed and take steps to enable or disable itself depending on
the result.
9. Add the using directive shown next to the list at the top of the file:
using Windows.UI.Xaml;
10. Add the following field shown in bold to the Command class above the
constructor:
Click here to view code image
public class Command : ICommand
{
    ...
    private Func methodToDetectCanExecute = null;
    private DispatcherTimer canExecuteChangedEventTimer = null;
    public Command(Action methodToExecute, Func
methodToDetectCanExecute)
    {
        ...
    }
}
The DispatcherTimer class, defined in the Windows.UI.Xaml
namespace, implements a timer that can raise an event at specified
Download from finelybook PI:EMAIL
979
intervals. You will use the canExecuteChangedEventTimer field to
trigger the CanExecuteChanged event at one-second intervals.
11. Add the canExecuteChangedEventTimer_Tick method shown in bold in
the following code to the end of the Command class:
Click here to view code image
public class Command : ICommand
{
    ...
    public event EventHandler CanExecuteChanged;
    void canExecuteChangedEventTimer_Tick(object sender, object
e)
    {
        if (this.CanExecuteChanged != null)
        {
            this.CanExecuteChanged(this, EventArgs.Empty);
        }
    }
}
This method simply raises the CanExecuteChanged event if at least one
control is bound to the command. Strictly speaking, this method should
also check whether the state of the object has changed before raising the
event. However, you will set the timer interval to a lengthy period (in
processing terms) to minimize any inefficiencies in not checking for a
change in state.
12. In the Command constructor, add the following statements shown in
bold.
Click here to view code image
public class Command : ICommand
{
    ...
    public Command(Action methodToExecute, Func
methodToDetectCanExecute)
    {
        this.methodToExecute = methodToExecute;
        this.methodToDetectCanExecute =
methodToDetectCanExecute;
        this.canExecuteChangedEventTimer = new
DispatcherTimer();
        this.canExecuteChangedEventTimer.Tick +=
Download from finelybook PI:EMAIL
980
            canExecuteChangedEventTimer_Tick;
        this.canExecuteChangedEventTimer.Interval = new
TimeSpan(0, 0, 1);
        this.canExecuteChangedEventTimer.Start();
    }
    ...
}
This code initiates the DispatcherTimer object and sets the interval for
timer events to one second before it starts the timer running.
13. On the Build menu, click Build Solution and ensure that your app builds
without errors.
You can now use the Command class to add commands to the ViewModel
class. In the next exercise, you will define commands to enable a user to
move between customers in the view.
Add NextCustomer and PreviousCustomer commands to the ViewModel
class
1. In Visual Studio, open the ViewModel.cs file in the Code and Text
Editor window.
2. Add the following using directive to the top of the file and modify the
definition of the ViewModel class to implement the
INotifyPropertyChanged interface.
Click here to view code image
...
using System.ComponentModel;
namespace Customers
{
    public class ViewModel : INotifyPropertyChanged
    {
        ...
    }
}
3. Add the PropertyChanged event and OnPropertyChanged method to the
end of the ViewModel class. This is the same code that you included in
the Customer class.
Click here to view code image
Download from finelybook PI:EMAIL
981
public class ViewModel : INotifyPropertyChanged
{
    ...
    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string
propertyName)
    {
        if (PropertyChanged != null)
        {
            PropertyChanged(this,
                new PropertyChangedEventArgs(propertyName));
        }
    }
}
Remember that the view references data through the Current property in
the data-binding expressions for the various controls that it contains.
When the ViewModel class moves to a different customer, it must raise
the PropertyChanged event to notify the view that the data to be
displayed has changed.
4. Add the following fields and properties to the ViewModel class
immediately after the constructor:
Click here to view code image
public class ViewModel : INotifyPropertyChanged
{
    ...
    public ViewModel()
    {
        ...
    }
    private bool _isAtStart;
    public bool IsAtStart
    {
        get => this._isAtStart;
        set
        {
            this._isAtStart = value;
            this.OnPropertyChanged(nameof(IsAtStart));
        }
    }
    private bool _isAtEnd;
    public bool IsAtEnd
    {
        get => this._isAtEnd;
Download from finelybook PI:EMAIL
982
        set
        {
            this._isAtEnd = value;
            this.OnPropertyChanged(nameof(IsAtEnd));
        }
    }
    ...
}
You will use these two properties to track the state of the ViewModel.
The IsAtStart property will be set to true when the currentCustomer
field in the ViewModel is positioned at the start of the customers
collection, and the IsAtEnd property will be set to true when the
ViewModel is positioned at the end of the customers collection.
5. Modify the constructor to set the IsAtStart and IsAtEnd properties, as
shown here in bold.:
Click here to view code image
public ViewModel()
{
    this.currentCustomer = 0;
    this.IsAtStart = true;
    this.IsAtEnd = false;
    this.customers = new List
    {
        ...
    };
}
6. After the Current property, add the Next and Previous private methods
shown in bold to the ViewModel class:
Click here to view code image
public class ViewModel : INotifyPropertyChanged
{
    ...
    public Customer Current
    {
        ...
    }
    private void Next()
    {
        if (this.customers.Count - 1 > this.currentCustomer)
        {
            this.currentCustomer++;
Download from finelybook PI:EMAIL
983
            this.OnPropertyChanged(nameof(Current));
            this.IsAtStart = false;
            this.IsAtEnd = (this.customers.Count - 1 ==
this.currentCustomer);
        }
    }
    private void Previous()
    {
        if (this.currentCustomer > 0)
        {
            this.currentCustomer--;
            this.OnPropertyChanged(nameof(Current));
            this.IsAtEnd = false;
            this.IsAtStart = (this.currentCustomer == 0);
        }
    }
    ...
}
Note The Count property returns the number of items in a
collection, but remember that the items in a collection are
numbered from 0 to Count - 1.
These methods update the currentCustomer variable to refer to the next
(or previous) customer in the customers list. Notice that these methods
maintain the values for the IsAtStart and IsAtEnd properties and indicate
that the current customer has changed by raising the PropertyChanged
event for the Current property. These methods are private because they
should not be accessible from outside the ViewModel class. External
classes will run these methods by using commands, which you will add
in the following steps.
7. Add the NextCustomer and PreviousCustomer automatic properties to
the ViewModel class, as shown here in bold:
Click here to view code image
public class ViewModel : INotifyPropertyChanged
{
    private List customers;
Download from finelybook PI:EMAIL
984
    private int currentCustomer;
    public Command NextCustomer { get; private set; }
    public Command PreviousCustomer { get; private set; }
    ...
}
The view will bind to these Command objects so that the user can
navigate between customers.
8. In the ViewModel constructor, set the NextCustomer and
PreviousCustomer properties to refer to new Command objects, as
follows:
Click here to view code image
public ViewModel()
{
    this.currentCustomer = 0;
    this.IsAtStart = true;
    this.IsAtEnd = false;
    this.NextCustomer = new Command(this.Next, () =>
        this.customers.Count > 1 && !this.IsAtEnd);
    this.PreviousCustomer = new Command(this.Previous, () =>
        this.customers.Count > 0 && !this.IsAtStart);
    this.customers = new List
    {
            ...
    };
}
The NextCustomer Command specifies the Next method as the operation
to perform when the Execute method is invoked. The lambda expression
() => { return this.customers.Count > 1 && !this.IsAtEnd; } is specified
as the function to call when the CanExecute method runs.
This expression returns true as long as the customers list contains more
than one customer and the ViewModel is not positioned on the final
customer in this list. The PreviousCustomer Command follows the same
pattern: it invokes the Previous method to retrieve the previous customer
from the list, and the CanExecute method references the expression ()
=> { return this.customers.Count > 0 && !this.IsAtStart; }, which
returns true as long as the customers list contains at least one customer
and the ViewModel is not positioned on the first customer in this list.
9. On the Build menu, click Build Solution and verify that your app still
Download from finelybook PI:EMAIL
985
builds without errors.
Now that you have added the NextCustomer and PreviousCustomer
commands to the ViewModel, you can bind these commands to buttons in the
view. When the user clicks a button, the appropriate command will run.
Microsoft publishes guidelines for adding buttons to views in UWP apps,
and the general recommendation is that buttons that invoke commands should
be placed on a command bar. UWP apps provide two command bars: one
appears at the top of the form and the other at the bottom. Buttons that
navigate through an app or data are commonly placed on the top command
bar, and this is the approach that you will adopt in the next exercise.
Note You can find the Microsoft guidelines for implementing command
bars at http://msdn.microsoft.com/library/windows/apps/hh465302.aspx.
Add Next and Previous buttons to the Customers form
1. Open the MainPage.xaml file in the Design View window.
2. Scroll to the bottom of the XAML pane and add the following markup
shown in bold, immediately after the final  tag but before the
closing  tag:
Click here to view code image
...