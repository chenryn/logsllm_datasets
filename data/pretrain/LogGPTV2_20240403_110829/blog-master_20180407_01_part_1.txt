## PostgreSQL 11 preview - MERGE 语法支持与CTE内支持，兼容SQL:2016 , 兼容 Oracle
### 作者                                                                       
digoal                                                                       
### 日期                                                                       
2018-04-07                                                                   
### 标签                                                                       
PostgreSQL , MERGE , CTE , trigger , rule        
----                                                                       
## 背景     
PostgreSQL 11 支持了merge 语法，兼容SQL 2016标准。并且支持用于CTE语法中。  
merge 语法常用于合并数据（将 某个源表、values表达式、QUERY、临时表等 合并到某个目标表中）。  
例如，将源表的变更日志，合并到物化视图中。  
PostgreSQL 除了使用insert into on conflict，如今又多了merge语法的支持（可以更好的支持OLAP的数据批量合并场景）。    
## 语法  
https://www.postgresql.org/docs/devel/static/sql-merge.html  
```  
[ WITH with_query [, ...] ]  
MERGE INTO target_table_name [ [ AS ] target_alias ]  
USING data_source  
ON join_condition  
when_clause [...]  
where data_source is  
{ source_table_name |  
  ( source_query )  
}  
[ [ AS ] source_alias ]  
and when_clause is  
{ WHEN MATCHED [ AND condition ] THEN { merge_update | merge_delete } |  
  WHEN NOT MATCHED [ AND condition ] THEN { merge_insert | DO NOTHING }  
}  
and merge_insert is  
INSERT [( column_name [, ...] )]  
[ OVERRIDING { SYSTEM | USER } VALUE ]  
{ VALUES ( { expression | DEFAULT } [, ...] ) | DEFAULT VALUES }  
and merge_update is  
UPDATE SET { column_name = { expression | DEFAULT } |  
             ( column_name [, ...] ) = ( { expression | DEFAULT } [, ...] )  
           } [, ...]  
and merge_delete is  
DELETE  
```  
### 返回  
```  
MERGE total-count  
```  
### 目标表触发器可能被触发  
触发规则详见  
https://www.postgresql.org/docs/devel/static/sql-merge.html  
### 目标表规则不会被触发  
如果JOIN过程中，匹配到多行，根据SQL标准定义来处理，目前是这样的，如果是更新的话，多行匹配（目标表的某单行，被源表或源数据的多行匹配到）会导致报错。  
### 一些例子  
1、Perform maintenance on CustomerAccounts based upon new Transactions.  
```  
MERGE INTO CustomerAccount CA  -- 目标表  
USING RecentTransactions T  -- 源可以是表、query、(values (),(),....) as alias表达式 等  
ON T.CustomerId = CA.CustomerId  -- JOIN 条件  
WHEN MATCHED THEN  -- 记录匹配，可以引用使用源于目标中的字段  
  UPDATE SET Balance = Balance + TransactionValue  
WHEN NOT MATCHED THEN  -- 记录未匹配，只能引用源字段  
  INSERT (CustomerId, Balance)  
  VALUES (T.CustomerId, T.TransactionValue);  
```  
2、notice that this would be exactly equivalent to the following statement because the MATCHED result does not change during execution  
```  
MERGE INTO CustomerAccount CA  
USING (Select CustomerId, TransactionValue From RecentTransactions) AS T  
ON CA.CustomerId = T.CustomerId  
WHEN NOT MATCHED THEN  
  INSERT (CustomerId, Balance)  
  VALUES (T.CustomerId, T.TransactionValue)  
WHEN MATCHED THEN  
  UPDATE SET Balance = Balance + TransactionValue;  
```  
3、Attempt to insert a new stock item along with the quantity of stock. If the item already exists, instead update the stock count of the existing item. Don't allow entries that have zero stock.  
```  
MERGE INTO wines w  
USING wine_stock_changes s  -- 源可以是临时表  
ON s.winename = w.winename  
WHEN NOT MATCHED AND s.stock_delta > 0 THEN  
  INSERT VALUES(s.winename, s.stock_delta)  
WHEN MATCHED AND w.stock + s.stock_delta > 0 THEN  
  UPDATE SET stock = w.stock + s.stock_delta;  
WHEN MATCHED THEN  
  DELETE;  
```  
The wine_stock_changes table might be, for example, a temporary table recently loaded into the database.  
4、回归测试中的例子  
```  
+-- WITH referenced by MERGE statement  
+CREATE TABLE m AS SELECT i AS k, (i || ' v')::text v FROM generate_series(1, 16, 3) i;  
+ALTER TABLE m ADD UNIQUE (k);  
+WITH RECURSIVE cte_basic AS (SELECT 1 a, 'cte_basic val' b)  
+MERGE INTO m USING (select 0 k, 'merge source SubPlan' v) o ON m.k=o.k  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || ' merge update' FROM cte_basic WHERE cte_basic.a = m.k LIMIT 1)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.k, o.v);  
+ERROR:  WITH RECURSIVE is not supported for MERGE statement  
+-- Basic:  
+WITH cte_basic AS (SELECT 1 a, 'cte_basic val' b)  
+MERGE INTO m USING (select 0 k, 'merge source SubPlan' v) o ON m.k=o.k  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || ' merge update' FROM cte_basic WHERE cte_basic.a = m.k LIMIT 1)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.k, o.v);  
+-- Examine  
+SELECT * FROM m where k = 0;  
+ k |          v             
+---+----------------------  
+ 0 | merge source SubPlan  
+(1 row)  
+  
+-- See EXPLAIN output for same query:  
+EXPLAIN (VERBOSE, COSTS OFF)  
+WITH cte_basic AS (SELECT 1 a, 'cte_basic val' b)  
+MERGE INTO m USING (select 0 k, 'merge source SubPlan' v) o ON m.k=o.k  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || ' merge update' FROM cte_basic WHERE cte_basic.a = m.k LIMIT 1)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.k, o.v);  
+                            QUERY PLAN                               
+-------------------------------------------------------------------  
+ Merge on public.m  
+   CTE cte_basic  
+     ->  Result  
+           Output: 1, 'cte_basic val'::text  
+   ->  Hash Right Join  
+         Output: o.k, o.v, o.*, m_1.ctid  
+         Hash Cond: (m_1.k = o.k)  
+         ->  Seq Scan on public.m m_1  
+               Output: m_1.ctid, m_1.k  
+         ->  Hash  
+               Output: o.k, o.v, o.*  
+               ->  Subquery Scan on o  
+                     Output: o.k, o.v, o.*  
+                     ->  Result  
+                           Output: 0, 'merge source SubPlan'::text  
+   SubPlan 2  
+     ->  Limit  
+           Output: ((cte_basic.b || ' merge update'::text))  
+           ->  CTE Scan on cte_basic  
+                 Output: (cte_basic.b || ' merge update'::text)  
+                 Filter: (cte_basic.a = m.k)  
+(21 rows)  
+  
+-- InitPlan  
+WITH cte_init AS (SELECT 1 a, 'cte_init val' b)  
+MERGE INTO m USING (select 1 k, 'merge source InitPlan' v) o ON m.k=o.k  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || ' merge update' FROM cte_init WHERE a = 1 LIMIT 1)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.k, o.v);  
+-- Examine  
+SELECT * FROM m where k = 1;  
+ k |             v               
+---+---------------------------  
+ 1 | cte_init val merge update  
+(1 row)  
+  
+-- See EXPLAIN output for same query:  
+EXPLAIN (VERBOSE, COSTS OFF)  
+WITH cte_init AS (SELECT 1 a, 'cte_init val' b)  
+MERGE INTO m USING (select 1 k, 'merge source InitPlan' v) o ON m.k=o.k  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || ' merge update' FROM cte_init WHERE a = 1 LIMIT 1)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.k, o.v);  
+                             QUERY PLAN                               
+--------------------------------------------------------------------  
+ Merge on public.m  
+   CTE cte_init  
+     ->  Result  
+           Output: 1, 'cte_init val'::text  
+   InitPlan 2 (returns $1)  
+     ->  Limit  
+           Output: ((cte_init.b || ' merge update'::text))  
+           ->  CTE Scan on cte_init  
+                 Output: (cte_init.b || ' merge update'::text)  
+                 Filter: (cte_init.a = 1)  
+   ->  Hash Right Join  
+         Output: o.k, o.v, o.*, m_1.ctid  
+         Hash Cond: (m_1.k = o.k)  
+         ->  Seq Scan on public.m m_1  
+               Output: m_1.ctid, m_1.k  
+         ->  Hash  
+               Output: o.k, o.v, o.*  
+               ->  Subquery Scan on o  
+                     Output: o.k, o.v, o.*  
+                     ->  Result  
+                           Output: 1, 'merge source InitPlan'::text  
+(21 rows)  
+  
+-- MERGE source comes from CTE:  
+WITH merge_source_cte AS (SELECT 15 a, 'merge_source_cte val' b)  
+MERGE INTO m USING (select * from merge_source_cte) o ON m.k=o.a  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || merge_source_cte.*::text || ' merge update' FROM merge_source_cte WHERE a = 15)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.a, o.b || (SELECT merge_source_cte.*::text || ' merge insert' FROM merge_source_cte));  
+-- Examine  
+SELECT * FROM m where k = 15;  
+ k  |                              v                                 
+----+--------------------------------------------------------------  
+ 15 | merge_source_cte val(15,"merge_source_cte val") merge insert  
+(1 row)  
+  
+-- See EXPLAIN output for same query:  
+EXPLAIN (VERBOSE, COSTS OFF)  
+WITH merge_source_cte AS (SELECT 15 a, 'merge_source_cte val' b)  
+MERGE INTO m USING (select * from merge_source_cte) o ON m.k=o.a  
+WHEN MATCHED THEN UPDATE SET v = (SELECT b || merge_source_cte.*::text || ' merge update' FROM merge_source_cte WHERE a = 15)  
+WHEN NOT MATCHED THEN INSERT VALUES(o.a, o.b || (SELECT merge_source_cte.*::text || ' merge insert' FROM merge_source_cte));  
+                                                  QUERY PLAN                                                     
+---------------------------------------------------------------------------------------------------------------  
+ Merge on public.m  
+   CTE merge_source_cte  
+     ->  Result  
+           Output: 15, 'merge_source_cte val'::text  
+   InitPlan 2 (returns $1)  
+     ->  CTE Scan on merge_source_cte merge_source_cte_1  
+           Output: ((merge_source_cte_1.b || (merge_source_cte_1.*)::text) || ' merge update'::text)  
+           Filter: (merge_source_cte_1.a = 15)  
+   InitPlan 3 (returns $2)  
+     ->  CTE Scan on merge_source_cte merge_source_cte_2  
+           Output: ((merge_source_cte_2.*)::text || ' merge insert'::text)  
+   ->  Hash Right Join  
+         Output: merge_source_cte.a, merge_source_cte.b, ROW(merge_source_cte.a, merge_source_cte.b), m_1.ctid  
+         Hash Cond: (m_1.k = merge_source_cte.a)  
+         ->  Seq Scan on public.m m_1  
+               Output: m_1.ctid, m_1.k  
+         ->  Hash  
+               Output: merge_source_cte.a, merge_source_cte.b  
+               ->  CTE Scan on merge_source_cte  
+                     Output: merge_source_cte.a, merge_source_cte.b  
+(20 rows)  
+  
+DROP TABLE m;  
```  
5、个人测试例子  
目标表触发器  
```  
create or replace function tg() returns trigger as $$  
declare  
begin  
  raise notice '%', new;  
  return null;  
end;  
$$ language plpgsql strict;  
```  
目标表  
```  
create table t1(id int primary key, info text, crt_time timestamp);  
```  
源表  
```  
create table t2(id int primary key, info text, crt_time timestamp);  
```  