[`MountPoint`{.literal}]{.term}
:   指定要挂载 GFS2 文件系统的目录。
:::
`-o option`{.literal} 参数由 GFS2 特定选项或可接受的标准 Linux
`mount -o`{.literal} 选项组成，或者两者的组合。多个 `option`{.literal}
参数可使用逗号分开，没有空格。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`mount`{.literal} 命令是一个 Linux 系统命令。除了使用这部分论述的 GFS2
具体选项外，您还可以使用其它标准 `mount`{.literal} 命令选项（例如：
`-r`{.literal}）。有关其它 Linux `mount`{.literal} 命令选项的详情请参考
Linux `mount`{.literal} man page。
:::
下表描述了在挂载时可传递给 GFS2 的可用 GFS2 `-o option`{.literal} 值。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
这个表格包含了只用于本地文件系统选项的描述。但请注意，红帽不支持将 GFS2
作为单节点文件系统使用。红帽将继续支持单节点 GFS2
文件系统来挂载群集文件系统的快照（例如，用于备份目的）。
:::
::: table
[]{#assembly_creating-mounting-gfs2-configuring-gfs2-file-systems.html#tb-table-gfs2-mount}
**表 3.2. GFS2 特定挂载选项**
::: table-contents
+----------------------------------+----------------------------------+
| 选项                             | 描述                             |
+:=================================+:=================================+
| `acl`{.literal}                  | 允许控制文件                     |
|                                  | ACL。如果挂载文件系统时没有使用  |
|                                  | `acl`{.literal}                  |
|                                  | 挂载选项，用户可以查看 ACL（使用 |
|                                  | `getfacl`{.liter                 |
|                                  | al}）,但不允许对其进行设置（使用 |
|                                  | `setfacl`{.literal}）。          |
+----------------------------------+----------------------------------+
| `dat                             | 当设置了                         |
| a=[ordered|writeback]`{.literal} | `data=ordered`{.literal}         |
|                                  | 时，被交易修改                   |
|                                  | 的用户数据会在交易被提交到磁盘前 |
|                                  | 被写入磁盘。这样可让用户在崩溃后 |
|                                  | 的文件中看到未初始化的块。当设置 |
|                                  | `data=writeback`{.literal}       |
|                                  | 模式时，用户数据会在磁盘         |
|                                  | 被禁用后随时写入磁盘。这不提供与 |
|                                  | `ordered`{.literal}              |
|                                  | 模式                             |
|                                  | 相同的一致性保证，但对于某些工作 |
|                                  | 负载，这应该稍微快一些。默认值为 |
|                                  | `ordered`{.literal} 模式。       |
+----------------------------------+----------------------------------+
| `ignore_local_fs`{.literal}      | 强制 GFS2                        |
|                                  | 将文件系统视为                   |
| `Caution:`{.literal} 在共享 GFS2 | 多主机文件系统。默认情况下，使用 |
| 文件系统时，不应该使用这个选项。 | `lock_nolock`{.literal}          |
|                                  | 会自动打开                       |
|                                  | `localflocks`{.literal} 标记。   |
+----------------------------------+----------------------------------+
| `localflocks`{.literal}          | 告诉 GFS2 让                     |
|                                  | VFS（虚拟文件系统）层完成所有    |
| `Caution:`{.literal} 在共享 GFS2 | flock 和 fcntl                   |
| 文件系统时，不应该使用这个选项。 | 操作。`localflocks`{.literal}    |
|                                  | 标志由                           |
|                                  | `                                |
|                                  | lock_nolock`{.literal}自动打开。 |
+----------------------------------+----------------------------------+
| `lockproto=`{.li                 | 允许用户指定文件系               |
| teral}`LockModuleName`{.literal} | 统要使用的锁定协议。如果没有指定 |
|                                  | `Loc                             |
|                                  | kModuleName`{.literal}，则会从文 |
|                                  | 件系统超级块中读取锁定协议名称。 |
+----------------------------------+----------------------------------+
| `locktable=`{.l                  | 允许                             |
| iteral}`LockTableName`{.literal} | 用户指定文件系统要使用的锁定表。 |
+----------------------------------+----------------------------------+
| `q                               | 为文件系                         |
| uota=[off/account/on]`{.literal} | 统打开或者关闭配额。将配额设定为 |
|                                  | `account`{.literal}              |
|                                  | 状态可让文件系统正确维护每个     |
|                                  | UID/GID                          |
|                                  | 使用量                           |
|                                  | 统计，忽略限制和警告值。默认值为 |
|                                  | `off`{.literal}。                |
+----------------------------------+----------------------------------+
| `                                | 当指定了                         |
| errors=panic|withdraw`{.literal} | `errors=panic`{.                 |
|                                  | literal}，文件系统错误会导致内核 |
|                                  | panic。当指定了                  |
|                                  | `errors=withdraw`{.literal}，文  |
|                                  | 件系统错误将导致系统从文件系统中 |
|                                  | 退出，且使其无法访问直到重启为止 |
|                                  | ;                                |
|                                  | 在某                             |
|                                  | 些情况下，系统可能仍然可以运行。 |
+----------------------------------+----------------------------------+
| `discard/nodiscard`{.literal}    | 导致 GFS2 为释放的块生成         |
|                                  | \"discard\" I/O                  |
|                                  | 请求。它们可供合适的             |
|                                  | 硬件用于实施精简配置和类似方案。 |
+----------------------------------+----------------------------------+
| `barrier/nobarrier`{.literal}    | 导致 GFS2 在清除日志时发送 I/O   |
|                                  | 屏蔽。默认值为                   |
|                                  | `o                               |
|                                  | n`{.literal}。如果基础设备不支持 |
|                                  | I/O 屏蔽，则会自动打开这个选项   |
|                                  | `off`{.literal}。强烈建议在 GFS2 |
|                                  | 中使用 I/O                       |
|                                  | 屏蔽，除非块设备被设计为无法丢   |
|                                  | 失写入缓存内容（例如，如果它位于 |
|                                  | UPS 中或没有写入缓存）。         |
+----------------------------------+----------------------------------+
| `quota_quantum=secs`{.literal}   | 在将更改的配额信息写             |
|                                  | 入配额文件前将其保存在某个节点的 |
|                                  | 秒数。这是设置此参数的首选方法。 |
|                                  | 该数值是一个大于零的整数。默认为 |
|                                  | 60                               |
|                                  | 秒。设定为较短的间隔会让配额信   |
|                                  | 息更快地更新，且降低了用户超过其 |
|                                  | 配额的情况出现。较长的间隔可让文 |
|                                  | 件系统操作更迅速有效地包括配额。 |
+----------------------------------+----------------------------------+
| `statfs_quantum=secs`{.literal}  | 将 `statfs_quantum`{.literal}    |
|                                  | 设置为 0 是将 `statfs`{.literal} |
|                                  | 慢版本设置的首选方法。默认值为   |
|                                  | 30 秒，它会设置                  |
|                                  | `statfs`{.literal} 更改与 master |
|                                  | `statfs`{.literal}               |
|                                  | 文件同步前的最长时间             |
|                                  | 。可将该值调整为更迅速、不准确的 |
|                                  | `statfs`{.literal}               |
|                                  | 值或者                           |
|                                  | 更慢的准确值。当将这个选项设置为 |
|                                  | 0 时，`statfs`{.literal}         |
|                                  | 将始终报告真实值。               |
+----------------------------------+----------------------------------+
| `statfs_percent=value`{.literal} | 在同步到 master                  |
|                                  | `statfs`{.literal} 文件前，根据  |
|                                  | `statfs`{.literal}               |
|                                  | 信息的最大百分比变化提供一个绑   |
|                                  | 定，即使时间期限还没有过期。如果 |
|                                  | `statfs_quantum`{.literal}       |
|                                  | 的设置是                         |
|                                  | 0，那么这个设置将被忽略。        |
+----------------------------------+----------------------------------+
:::
:::
:::
::: section
::: titlepage
## []{#assembly_creating-mounting-gfs2-configuring-gfs2-file-systems.html#unmounting_a_gfs2_file_system}卸载 GFS2 文件系统 {.title}
:::
在系统关闭时卸载文件系统时，系统将无法了解手动挂载而不是通过 Pacemaker
自动挂载的 GFS2 文件系统。因此，GFS2 资源代理将不会卸载 GFS2
文件系统。关闭 GFS2
资源代理后，标准关闭进程会杀死所有剩余的用户进程，包括集群基础结构，并尝试卸载该文件系统。没有集群基础结构则卸载将失败，同时该系统会挂起。
要防止卸载 GFS2 文件系统时系统停滞，您应该进行以下操作之一：
::: itemizedlist
-   总是使用 Pacemaker 管理 GFS2 文件系统。
-   如果使用 `mount`{.literal} 命令手动挂载了 GFS2
    文件系统，请确定在重启或者关闭该系统前手动使用 `umount`{.literal}
    命令卸载该文件系统。
:::
如果在这些情况下关闭系统的过程中卸载文件系统时停滞，请执行硬件重启。这不太会出现丢失任何数据的情况，因为文件系统在关闭进程早期是同步的。
可使用 `umount`{.literal} 命令卸载 GFS2 文件系统。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`umount`{.literal} 命令是一个 Linux 系统命令。有关这个命令的详情请参考
Linux `umount`{.literal} 命令 man page。
:::
使用
``` literallayout
umount MountPoint
```
::: variablelist
[`MountPoint`{.literal}]{.term}
:   指定当前挂载 GFS2 文件系统的目录。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_creating-mounting-gfs2-configuring-gfs2-file-systems.html#proc_backing-up-a-gfs2-filesystem-creating-mounting-gfs2}备份 GFS2 文件系统 {.title}
:::
无论您的文件系统大小如何，在出现紧急事件时常规备份 GFS2
文件系统是很重要的。很多系统管理员会觉得很安全，因为他们使用了
RAID、多路径、镜像、快照和其它冗余形式对系统进行保护。但是，这些安全措施并不一定是完全足够的。
创建备份的过程可能会有问题，因为备份节点或节点集合通常涉及按顺序读取整个文件系统。如果从单一节点完成此操作，该节点将在缓存中保留所有信息，直到群集里的其他节点开始请求锁定为止。在集群运行时运行这种备份程序会对性能造成负面影响。
完成备份后丢弃缓存可减少其他节点重新拥有其集群锁定/缓存所需的时间。但这不是个理想情况，因为其他节点在备份过程开始前已停止缓存它们缓存的数据。您可以在备份完成后使用以下命令丢弃缓存：
``` literallayout
echo -n 3 > /proc/sys/vm/drop_caches
```
如果集群中的每个节点都备份了自己的文件，以便在节点间分割该任务，则速度会更快。您可以使用在节点特定目录中使用
`rsync`{.literal} 命令的脚本完成此操作。
红帽建议通过在 SAN 中创建硬件快照生成 GFS2
备份，向另一个系统中显示快照并进行备份。备份系统应该使用
`-o lockproto=lock_nolock`{.literal} 挂载快照，因为它不会位于集群中。
:::
::: section
::: titlepage
# []{#assembly_creating-mounting-gfs2-configuring-gfs2-file-systems.html#proc_suspending-activity-on-a-gfs2-filesystem-creating-mounting-gfs2}在 GFS2 文件系统中挂起动作 {.title}
:::
您可以使用 `dmsetup suspend`{.literal}
命令挂起对文件系统的写入操作。暂停写入活动允许使用基于硬件的设备快照将文件系统捕获为一致状态。`dmsetup resume`{.literal}
命令终止挂起。
在 GFS2 文件系统中暂停动作的命令格式如下。
``` literallayout
dmsetup suspend MountPoint
```
这个示例会挂起对文件系统 `/mygfs2`{.literal}的写入。
``` literallayout
# dmsetup suspend /mygfs2
```
GFS2 文件系统中终止活动的命令格式如下。
``` literallayout
dmsetup resume MountPoint
```
这个示例终止了对文件系统 `/mygfs2`{.literal}的写入操作的挂起。
``` literallayout
# dmsetup resume /mygfs2
```
:::
::: section
::: titlepage
# []{#assembly_creating-mounting-gfs2-configuring-gfs2-file-systems.html#proc_growing-gfs2-filesystem-creating-mounting-gfs2}增大 GFS2 文件系统 {.title}
:::
`gfs2_grow`{.literal} 命令用于在扩展文件系统所在设备后扩展 GFS2
文件系统。在现有 GFS2 文件系统中运行 `gfs2_grow`{.literal}
命令会使用新初始化的 GFS2
文件系统扩展填充文件系统当前末尾与设备末尾之间的所有剩余空间。然后，集群中的所有节点都可以使用添加的额外存储空间。