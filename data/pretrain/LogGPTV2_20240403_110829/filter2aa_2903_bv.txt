为了确保CPU检测到的硬件错误能够被有效记录和分析，有必要建立一种机制来报告这些错误。由于错误通常发生在CPU内部或前端总线层面，相较于运行在其上的软件，CPU自身拥有更多关于错误原因的信息。因此，按照“谁掌握最多信息，谁负责”的原则，CPU应承担起收集并记录错误及其相关信息的责任。

然而，CPU直接读写的是寄存器或内存这样的临时存储介质，这意味着一旦计算机重启，其中保存的数据将会丢失。为了解决这个问题，需要软件协同工作。具体而言，当CPU遇到错误时，它首先收集必要的信息并将它们存储在特定的寄存器或内存区域中；随后，通过触发异常的方式将控制权移交给软件；最后，由软件将这些关键信息转移到外部永久性存储设备（如硬盘）上进行长期保存。这就是IA-32处理器架构下的机器检查（Machine Check）机制的基本运作方式。

### 早期发展与演变
奔腾处理器是最早引入这一机制的产品之一。之后发布的P6及奔腾4系列进一步强化了这项功能，并将其正式纳入到了IA-32架构规范之中，形成了所谓的机器检查架构（MCA, Machine Check Architecture）。利用CPUID指令可以查询处理器对于MCA的支持状况：EDX寄存器中的第14位(MCA)和第7位(MCE)分别指示是否支持机器检查架构以及是否实现了机器检查异常功能。

### 奔腾处理器的机器检查机制
奔腾处理器采用了一种称为内部错误检测的方法来实现其机器检查功能，主要包括以下几个组件：
- **MCAR (Machine Check Address Register)** 和 **MCTR (Machine Check Type Register)**：用于记录发生错误时的相关地址和类型。
- **#MC (Machine Check Exception)**：这是一种向系统软件通报错误发生的异常处理机制，可以通过设置CR4寄存器中的MCE标志来启用或禁用。
- 硬件信号接口：例如APCHK#、PCHK#等，用于通知主板芯片组或其他外部组件有关错误的情况。

### MCA 的扩展与发展
从奔腾之后的P6至更现代的处理器型号，MCA得到了显著改进，不仅能够识别更多种类的故障情况（如FSB事务错误、ECC校验失败等），而且增加了新的寄存器以支持更加详细的错误日志记录。这些增强包括但不限于增加全局配置寄存器(IA32_MCG×××)以及针对不同硬件模块的多组错误报告寄存器(bank)。

#### 全局寄存器介绍
- **IA32_MCG_CAP**：提供了关于当前MCA实现细节的信息，比如可用的错误报告寄存器数量等。
- **IA32_MCG_STATUS**：在发生机器检查异常时提供处理器状态概览。
- **IA32_MCG_CTL**：允许用户启用或关闭特定类型的异常报告。

#### 错误报告寄存器详解
每个bank都包含四个主要组成部分：
- **控制寄存器**：决定哪些类型的错误会被报告。
- **状态寄存器**：给出错误的具体性质。
- **地址寄存器**：指出错误发生的确切位置。
- **附加信息寄存器**：提供更多上下文信息以便于诊断。

综上所述，通过对机器检查机制的持续优化和完善，现代处理器已经能够非常有效地捕捉并记录各种潜在问题，从而帮助开发者更快地定位并修复硬件缺陷。