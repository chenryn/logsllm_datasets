该有一种机制来报告CPU检测到的硬件错误，以供调试分析时使用。
那么如何让CPU来报告硬件错误呢？因为错误发生在CPU内部或前
端总线一级，所以CPU比其上运行的软件更清楚错误的原因，按照“谁
拥有最多知识，谁就承担职责”的原则，CPU应该负责记录下发生的错
误及发生错误时的相关信息。但是CPU只能直接读写寄存器或内存这些
临时性存储器，计算机一旦重新启动，记录在这些地方的信息就会丢
失。所以要解决这个问题还必须有软件的配合。于是，一种很自然的方
法是，CPU先收集好要记录的信息，并把它们存储到特定的寄存器或内
存区域中，然后通过产生异常的方式把控制权交给软件，接下来软件将
这些信息写到外部存储器（如硬盘）上永久记录下来。这便是IA-32处
理器（泛指Intel 64和IA-32处理器）的机器检查（Machine Check）机制
的基本原理。
最早引入机器检查机制的IA-32处理器是奔腾处理器，其后推出的
P6和奔腾4系列处理器进一步强化了该功能，并将其纳入IA-32架构规
范，称为机器检查架构（Machine Check Architecture，MCA）。
通过CPUID指令可以检查处理器对机器检查机制的支持情况，EDX
寄存器的MCA（位14）和MCE（位7）分别表示处理器是否实现了机器
检查架构和机器检查异常。
下面便从奔腾处理器的机器检查异常（MCE）入手，按照由简到繁
的顺序介绍MCA的工作原理和使用方法。
6.1 奔腾处理器的机器检查机制
奔腾处理器的机器检查（MC）机制又称为内部错误检测（internal
error detection），其主要设施如下。
用以记录错误的机器检查地址寄存器（Machine Check Address
Register，MCAR），以及机器检查类型寄存器（Machine Check
Type Register，MCTR）。二者在IA-32手册中的名字分别为
P5_MC_ADDR和P5_MC_TYPE。
用以向系统软件汇报机器检查错误的机器检查异常（Machine
Check Exception，简称#MC），以及CR4寄存器中的MCE标志
（CR4[MCE]，位6），通过MCE标志可以启用或禁止机器检查异
常。机器检查异常的向量号是18，通常操作系统会设置异常处理例
程来处理该异常。
用以向系统芯片组报告错误的管脚信号，包括报告地址校验错误的
APCHK#信号、数据校验错误的PCHK#信号和内部奇偶或冗余
（Functional Redundancy Check）校验的IERR#信号。
用以接收芯片组报告的总线错误的BUSCHK#信号。
下面我们来介绍以上设施的用法。
为了校验地址和数据，奔腾处理器配备了8个数据校验信号（pin）
DP[7:0]（每一位对应于64位数据总线的一个字节）和1个地址校验信号
AP（Address Parity）。如果CPU检测到地址信号奇偶校验错误，那么它
就会置起（assert）APCHK#信号（因为低电平有效，所以置低），通知
系统有错误发生。对于该类错误，奔腾处理器将错误处理的任务交给了
主板上的系统芯片组。
如果CPU当从内存中读数据时检测到数据信号奇偶校验错误，它就
会置起PCHK#信号，通知系统有错误发生，同时如果PEN#（Parity
Enable）信号有效，那么CPU会将这一次总线周期（bus cycle）的地址
写入机器检查地址寄存器MCAR中，并将这次总线周期的类型参数记录
在寄存器检查类型寄存器MCTR中。此外，如果CR4寄存器中的MCE标
志（bit 6）为1，那么CPU会产生机器检查异常，目的是向系统软件报
告有错误发生。然后CPU会转去执行机器检查异常处理例程（通常是操
作系统的一部分）。异常处理例程可以通过读取MCAR和MCTR寄存器
的内容了解发生错误的地址和错误类型，并采取进一步的措施。
P5_MC_ADDR和P5_MC_TYPE都是64位的MSR，可以通过RDMSR
来访问。P5_MC_ADDR用于存放失败总线周期的物理地址，
P5_MC_TYPE用于存放失败总线周期的类型。P5_MC_TYPE只使用了
低5位，位布局如图6-1所示。
图6-1 P5_MC_TYPE寄存器
CHK位为1，表示P5_MC_ADDR和P5_MC_TYPE中包含有效的数
据。使用RDMSR读取寄存器后，该位会自动复位为0。W/R、D/C和
M/IO位用来表示当错误发生时W/R#、D/C#和M/IO#信号（均为奔腾处
理器的管脚信号）的值，这些信号值代表了总线周期的类型：读或写、
数据或代码、访问内存或IO。LOCK位表示当时LOCK#信号是否有效。
除了奇偶校验错误，当CPU检测到BUSCHK#信号（输入信号）被
置起时（通常是芯片组在一个总线周期结束时设置此信号，表示该总线
周期没有成功完成），它也会将当时的总线周期地址和类型详细记录到
P5_MC_ADDR和P5_MC_TYPE寄存器中。在记录后，如果CR4[MCE]
为1，即允许机器检查异常，那么CPU便会产生一个机器检查异常。
综上所述，奔腾处理器的MCA机制能够记录的机器检查错误有以
下两种。
读周期（read cycle）中的数据奇偶校验错误。
没有成功完成的总线周期，也就是系统内存控制器（MCH）通过
BUSCHK#信号向CPU报告的失败总线周期。
6.2 MCA
奔腾之后的P6和奔腾4系列处理器对奔腾引入的机器检查机制做了
改进和增强，并将其纳入IA-32架构规范，称为机器检查架构（Machine
Check Architecture，MCA）。
6.2.1 概览
首先，与奔腾处理器的架构相比，扩展后的MCA可以报告更多类
型的错误，如下所示。
前端总线（FSB）上的总线事务错误（transaction error）。
内部高速缓存或FSB上的ECC错误，不论是可纠正的ECC还是不可
纠正的ECC。
FSB上或内部的奇偶校验错误。
内部高速缓存或TLB中的存储错误。TLB（Translation Lookaside
Buffer）位于CPU内部，用于缓存页面表，以减少在将虚拟内存地
址转化为物理内存地址时对内存的访问次数。
从实现方面看，仍然可以将MCA的设施概括为机器检查异常和机
器检查寄存器两个方面。机器检查异常的工作方式与奔腾相比没什么变
化。变化很大的是机器检查寄存器，其数量明显增加了，除了一套全局
控制寄存器（IA32MCG×××）外，还有多组与不同硬件单元相对应的错
误报告寄存器（见图6-2）。
图6-2 机器检查架构的寄存器
每组错误报告寄存器称为一个bank，包含一个控制寄存器
（IA32_MCi_CTL MSR）、一个状态寄存器（IA32_MCi_STATUS
MSR）、一个地址寄存器（IA32_MCi_ADDR MSR）和一个附加信息寄
存器（IA32_MCi_MISC MSR）。因为这些寄存器都是MSR（64位），
所以可以通过RDMSR指令来访问。IA-32架构规定第一个错误报告寄存
器（IA32_MC0_CTL_MSR）的MSR地址总是400H，因此系统软件可以
很方便地遍历所有的错误报告寄存器。错误报告寄存器的具体组数因
CPU型号不同而有所不同——P6有5组，P4有4组。具体组数是记录在机
器检查全局寄存器IA32_MCG_CAP中的。
6.2.2 MCA的全局寄存器
下面我们来详细认识一下MCA的每个全局寄存器。
（1）IA32_MCG_CAP寄存器：只读寄存器，用以描述MCA的具体
实现情况，包含以下位域（见图6-3）。
图6-3 IA32_MCG_CAP MSR
Count（位0～7）：错误报告寄存器组数。
MCG_CTL_P（Control MSR Present）（位8）：用以表示是否实现
了IA32_MCG_CTL寄存器，如果实现，则为1，否则为0。
MCG_EXT_P（Extended MSR Present）（位9）：用以表示是否实
现了扩展的机器检查状态寄存器（从地址180H开始的MSR）。如
果实现，则为1，否则为0。
MCG_CMCI_P（Corrected MC error counting/signaling extension
present）（位10）：如果此位为1，代表具有根据已纠正错误数量
报告中断（CMCI）的能力。
MCG_TES_P（threshold-based error status present）（位11）：如果
此位为1，代表IA32_MCi_STATUS寄存器的位56：53的含义是符合
架构标准的（不然就是CPU型号相关的），其中位54：53用于报告
基于阈值的错误状态，位56：55是保留的。
MCG_EXT_CNT（Extended MSR Count）（位16～23）：用以表示
扩展的机器检查状态寄存器的数量（从地址180H开始的MSR寄存
器）。仅当MCG_EXT_P位为1时才有意义。
MCG_SER_P（software error recovery support present）（位24）：
如果此位为1，代表处理器支持软件方式的错误恢复，
IA32_MCi_STATUS寄存器的位56：55用来通知是否有尚未纠正的
可恢复错误，以及是否需要软件来采取纠正动作。
MCG_EMC_P（Enhanced Machine Check Capability）（位25）：如
果此位为1，代表处理器支持增强的机器检查能力，可以优先通知
固件（firmware）。
MCG_ELOG_P（extended error logging）（位26）：当此位为1时，
如果处理器检查到错误，可以先调用平台固件，让固件以ACPI格
式记录错误日志，以弥补MSR记录能力的不足。
P6处理器的MCG_CAP寄存器和以上介绍的IA32_MCG_CAP寄存器
在0～8位的含义相同，9～63位保留。
举例来说，使用RW-Everything工具访问作者正在使用的Intel Core
i5-2540M CPU，读到的IA32_MCG_CAP寄存器（编号0x179）的值为
0x00000C08，其含义如下。
有8组错误报告寄存器。
没有实现IA32_MCG_CTL寄存器。
没有实现扩展的机器检查状态寄存器。
具有根据已纠正错误数量报告异常的能力。
具有基于阈值报告错误状态的能力。
（2）IA32_MCG_STATUS寄存器：当机器检查异常发生时，该寄
存器用以描述处理器的状态，包含以下位域（见图6-4）。
图6-4 IA32_MCG_STATUS寄存器
RIPV（Restart IP Valid）（位0）：表示是否可以安全地从异常发
生时压入栈中的指令指针处重新开始执行。1表示可以，0表示不可
以。
EIPV（Error IP Valid）（位1）：该位为1表示异常发生时压入栈中
的指令指针与导致异常的错误直接关联，该位为0表示二者可能无
关。
MCIP（Machine Check In Progress）（位2）：该位为1表示已经产
生了机器检查异常。软件可以设置或清除这个标记。当该位为1
时，如果再有机器检查异常发生，那么CPU会进入关机
（shutdown）状态（停止执行指令，直到收到NMI中断、SMI中
断、硬件复位或INIT#信号）。
LMCE_S（Local Machine Check Exception Signaled）（位3）：该
位为1表示当前的机器检查事件只报告给了这个逻辑处理器。
（3）IA32_MCG_CTL寄存器：该寄存器用来启用或禁止机器检查
异常报告功能。IA-32手册没有明确定义每个位对应的具体机器异常内
容，只是说全部写为1会启用所有异常报告，全部写为0会禁止所有异常
报告。该寄存器只有当IA32_MCG_CAP的MCG_CTL_P位为1时才存
在。
6.2.3 MCA的错误报告寄存器
下面介绍MCA的各组错误报告寄存器的工作方式。每组错误报告
寄存器都包含一个控制寄存器（IA32_MCi_CTL MSR）、一个状态寄存
器（IA32_MCi_STATUS MSR）、一个地址寄存器（IA32_MCi_ADDR
MSR）和一个附加信息寄存器（IA32_MCi_MISC MSR）。
IA32_MCi_CTL（控制寄存器，P6称为MCi_CTL）寄存器的各个位
分别用来启用或禁止报告与其对应的错误。因为MSR寄存器有64位，所
以该寄存器最多可以控制64种错误的报告与否。该寄存器的实际使用位
数与处理器及其所对应的硬件单元有关。当修改这个寄存器时，处理器
仅修改已经被使用的各个位。另外，P6处理器仅允许向控制寄存器写全
1或全0，并且建议只有BIOS代码才能使用MC0_CTL寄存器。
IA32_MCi_STATUS（状态寄存器，P6称为MCi_STATUS）用来表
示错误的具体信息。其各个位的布局如图6-5所示。
MCA Error Code（位0～15）：MCA错误代码，定义方式我们将在
下文介绍。该错误代码的含义对于所有IA-32处理器都是一致的。
图6-5 IA32_MCi_STATUS寄存器
Model-Specific Error Code（位16～31）：型号相关的错误代码。与
处理器型号有关的错误代码。该错误代码的含义会因处理器的型号
不同而可能不同，IA-32手册卷3B的附录E中列出了各种型号处理器
的错误码定义。
Other Information（位32～56）：错误相关信息。该信息与处理器
型号有关。
PCC（Processor Context Corrupt）（位57）：如果为1，则表示处理
器的状态可能已经被发生的错误所破坏，不能安全地恢复执行。如
果为0，则表示发生的错误没有影响处理器的状态。
ADDRV（MCi_ADDR register valid）（位58）：如果为1，则表示
IA32_MCi_ADDR寄存器中包含有效的错误发生地址。如果为0，
则表示IA32_MCi_ADDR寄存器不存在或不包含有效的地址信息。
MISCV（MCi_MISC register valid）（位59）：如果为1，则表示
IA32_MCi_MISC寄存器中包含有效的错误相关信息。如果为0，则
表示IA32_MCi_MISC寄存器不存在或不包含有效的附加信息。
EN（Error enabled）（位60）：表示IA32_MCi_CTL寄存器中的相
应位是否启用该错误。
UC（Uncorrected error）（位61）：如果为1，则表示处理器没有或
不能纠正错误情况。如果为0，则表示处理器能够纠正错误情况。
OVER（Error overflow）（位62）：如果为1，则表示当上一个错误