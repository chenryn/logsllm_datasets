THE JOP ROCKET: A SUPREMELY 
WICKED TOOL FOR JOP GADGET 
DISCOVERY, OR WHAT TO DO IF 
ROP IS TOO EASY
Dr. Bramwell Brizendine
Dr. Joshua Stroschein
DEF CON 27
August 9, 2019
DR. BRAMWELL BRIZENDINE
• Assistant Professor of Computer and Cyber Sciences 
at Dakota State University.
• Creator of the JOP ROCKET.
• Interests: Software exploitation, reverse engineering, 
malware analysis, offensive security.
• Education:
– 2019: Ph.D in Cyber Operations
– 2016: M.S. in Applied Computer Science
– 2014: M.S. in Information Assurance
• Contact:
– PI:EMAIL
DR. JOSH STROSCHEIN
• Assistant Professor of Cyber Security and Network & 
Security Administration at Dakota State University
• Teaches undergraduate and graduate courses in 
cyber security with a focus on malware analysis, 
reverse engineering, and software exploitation.
• Regular trainer at many venues, such as DerbyCon, 
Hack-in-The-Box, BlackHat USA, and ToorCon.
• Education:
– 2017: D.S. Cyber Security
– 2014: M.S. Information Assurance
• Contact: 
– PI:EMAIL
ACKNOWLEDGEMENT
• Austin Babcock
– Undergraduate research assistant at Dakota State 
University.
– Cyber Operations student.
– Created JOP exploit chain for demo.
– Contact:
• PI:EMAIL
• Contact Austin with internship or job opportunities, etc.
• Dr. Jared DeMott of VDA Labs
– Member of Ph.D. dissertation committee.
WHAT WE ARE GOING TO TALK ABOUT?
• Remember ROP? 
– Let’s try something a little bit different.
• Introduction to Jump-Oriented Programming.
• Getting to know the JOP ROCKET.
• Some finer points of JOP exploit development.
• See the magic of JOP in action.
THE JOP 
ROCKET: DID WE 
INVENT JOP?
▪ Certainly not. 
▪ The literature provides us with examples of 
JOP going back a decade: Bletsch; Chen, et 
al.; Erdődi; Checkoway and Shacham
▪ For those interested in JOP though, 
there was a somewhat serious problem: 
lack of tools to facilitate usage.
▪ There also really isn’t much practical 
information on doing JOP in Windows.
You can download the JOP ROCKET from Github:
https://github.com/Bw3ll/JOP_ROCKET
JOP CREATES A SIDE 
DOOR
If there are ROP 
heuristics in place 
that make ROP 
detection too 
challenging, JOP 
may be a way 
around these.
Just 
another 
way to 
bypass 
mitigations 
and make it 
so we can 
reach 
executable 
shellcode.
• Let’s not get ahead of ourselves here.
– JOP is only one category of code-reuse 
attacks.
–
Older precursor to ROP.
•
Alexander Peslyak (1997)
–
Linux; not too relevant on Windows.
–
Result of Schacham’s work (2007).
•
Borrowed chunks of code.
–
ROP extends beyond ret2libc
•
Anything and everything versus just 
setting up function calls.
–
A gadget comprised of an instruction 
ending in RET.
–
A sequence of different gadgets that 
collectively allows for more complex 
actions to take place.
–
Stack pivot, setting up Windows API calls, 
etc.
–
Mona 
•
By Corelan Team, Peter Van Eeckhoutte.
•
Outstanding Python script that integrates 
flawlessly with WinDbg or Immunity.
•
Allows for discovery of ROP gadgets and many 
exploit related tasks.
–
ROPgadget
•
By Jonathan Salwan.
•
Allows for discovery of ROP gadgets.
•
Python script, supporting ELF, PE, Mach-O 
format on x86, x64, ARM64, PowerPC, SPARC, 
and MIPS.
•
Runs on command line, using Capstone 
disassembly engine.
Grab lines of 
instructions 
from process 
memory and 
glue them 
together.
This talk won’t teach you how to 
do ROP. It is probably a good idea 
to understand it before getting too 
deep into JOP.
•
EXAMPLE OF ROP CHAIN FROM MONA
The RET’s in 
effect act as our 
glue, chaining 
gadgets together.
– Instead of using ROP gadgets to order control flow, JMP and CALL instructions 
perform that role.
•
Put another way, JOP is ROP without RET’s.
–
Stack is not available to use for control flow generally, but can be used to prepare 
Windows API calls.
–
Using a dispatcher  gadget and dispatch table, by Bletsch, et al. (2011)
•
JOP ROCKET uses this approach. ☺
•
Uses a dispatcher gadget and dispatch table to direct control flow
•
Can still use the stack to load values
–
Bring Your Own Pop Jump (BYOPJ)  by Checkoway and Shacham (2010)
•
POP X* / JMP X* gadget
–
Some may lead just to a RET, although that need not be the case.
•
This is essentially return-oriented programming without returns
–
Doesn’t need dispatcher gadget. 
–
The JMP [REG] just goes to a RET, so very similar to ROP
–
Can’t use CALL [REG]
•
Chen, Ying, Mao, and Xie’s extensions to work by Checkoway and Shacham (2011)
–
Uses combinational gadget for system calls & control gadget to set jump register.
–
Combinational gadget will simply call/jmp to a gadget that ends in RET.
JOP DISPATCHER 
GADGET PARADIGM
• Dispatcher gadget
–
DG is instrument of change, moving 
forwards or backwards in the 
dispatch table.
–
DG should be short and sweet, ideally 
two or three instructions.
–
DG will  predictably modify the 
register holding address to dispatch 
table and then JMP or CALL to the 
dereferenced location.
•
ADD or SUB are best.
• Dispatch table
–
Each entry in dispatch table leads to 
addresses of functional gadgets.
•
May consist of padding between 
addresses.
–
NOPs or what is functionally 
equivalent.
• Functional gadgets
–
Gadgets that terminate in JMP or 
CALL to a register containing address 
of dispatcher gadget.
–
These are most like normal ROP 
gadgets.
–
These allow us to set up registers or 
the stack for Windows API calls.
•
Can then allow us to call Windows 
API’s to bypass DEP or other 
mitigations--and more!
• Windows API Functions
–
You can prepare stack for calls to 
Windows API functions.
–
Will go out of JOP after call, but can 
redirect control flow back to 
dispatcher gadget, to keep on 
jopping.
DISPATCHER 
GADGET
Big picture?
There is a loop going 
from dispatcher 
gadget, to the current 
entry in the dispatch 
table, to its associated 
functional gadget, back 
to the DG, which 
moves to the next 
location in the 
dispatch table.
JOP: Control Flow
Dispatcher Gadget:
ADD EDI,0xC; JMP DWORD PTR [EDI];
WHY JOP IS 
NOT MUCH 
USED
• One person claimed in 2015 JOP had 
never been used in the wild.
– Wrong! It has been, but only very rarely.
• Lack of proper tooling to find JOP 
gadgets.
– Not really feasible to do JOP if you don’t 
consider opcode-splitting.
– This tool changes that.
• JOP is much trickier and less well 
understood.
– ROP is easier, well documented, with 
publicly available tools. 
– No reason to use JOP if ROP suffices.
•
Enhanced difficulty and paucity of 
gadgets makes it tougher.
• Difficulty in finding JOP gadgets
– Very non-trivial, given lack of available 
tools with needed functionality.
•
Must use a multitude of other tools o write 
your own.
•
Other tools not set up to easily find 
unintended instructions for JOP
•
JOP ROCKET changes the above. ☺
– Would be very time-consuming, tedious 
to do this as a manual process without 
tools, requiring more expertise.
•
ROP algorithm vs. JOP algorithm
–
Finding the terminating indirect jumps and 
indirect calls and diassembling backwards 
to discover all intended and unintended 
without ROCKET is very UGLY.
•
ROP tools don’t really support JOP.
–
They have placeholders for future support.
• JOP is a good deal more complex.
– Folks just don’t know how.
– Using ROP and the stack to manage 
control flow is simple.
•
With JOP, you must supply that 
functionality yourself via DG and DT.
– With JOP you must pay attention to 
registers used for dispatcher gadget, 
dispatch table, and getting gadgets 
arguments onto the stack.
•
A lot more in motion that could go 
wrong.
–
Maintaining order amid chaos.
•
Makes finding right gadgets very
challenging at times.
• Need that sacrosanct dispatcher 
gadget.
– They are scarce.
•
No dispatcher gadget, no JOP. 
– DG can tie up a register from future 
use.
•
Tough if it is a very commonly used 
register.
– You could do the POP X/JMP X style of 
JOP, but that is more similar to ROP.
WHY JOP IS NOT 
MUCH USED
THE MORE YOU KNOW
• So if you are sitting at this talk, you probably know some about 
ROP and are maybe a master. 
– A lot of those principles can apply to JOP.
•
Similar ROP techniques can work in JOP.
•
The challenge is you have a lot fewer gadgets generally.
• If you wanted to, you could switch between ROP and JOP--if 
there were no particular reason you were trying to avoid ROP.
– Will take some appropriate setup and adjustments.
•
• Jump-Oriented 
Programming Reversing 
Open Cyber Knowledge 
Expert Tool 
– Dedicated to the memory  of 
rocket cats who made  the 
ultimate sacrifice.
THE JOP ROCKET
• Jump-Oriented Programming 
Reversing Open Cyber 
Knowledge Expert Tool 
– Inspired by so-called rocket cats 
from the 1300’s, who helped subvert 
defenses of a well-defended castle.
•
The feline adversary with his payload 
would inevitably find a way in past 
secure defenses.
– JOP ROCKET is similar in that it allows 
attacks to bypass  systems that may be 
well-defended against ROP.
•
Side door to ROP heuristics.
– Grew out of doctoral dissertation 
research by Bramwell
– Sophisticated tool with a lot of 
functionality devoted to its tasks.
– Python script with dependencies 
intended to be run on executables.
•
Static analysis;  does not target active 
processes.
– Will scan an executable and all 
modules.
– Interactive command line UI.
•
Brief keyboard shortcuts.
•
Can also take file as arg with a “get 
everything” option.
THE JOP ROCKET - ITS FEATURES
• Features
– Provides tremendous 
flexibility for how it 
discovers both functional 
gadgets and dispatcher 
gadgets.
•
User can customize how 
these are found as need be.
Provides dozens of categories 
of classifications for gadgets 
based on operations they 
perform.
•
E.g. MOV [REG], [REG], ADD, 
SUB, etc.
•
Can specify which REG it 
goes to or which REG it 
affects.
–
Can allow user to be very 
granular about results 
sought; no needle in a 
haystack.
– Searches and finds 
“everything” with all 
classifications performed 
simultaneously.
•
Once it is done, it is ready 
to print results to files 
“instantly.”
–
If you change how 
gadgets are formed 
though, rescanning may 
be necessary. 
– Uses opcode-splitting to 
discover all unintended 
gadgets.
•
JOP really isn’t possible 
without this. ☺
– Static analysis tool to 
scan image executable 
and all associated 
modules.
THE JOP ROCKET - ITS CONTRIBUTIONS
–
Not available in previous tools
–
New logic to find other types of DG.
•
Rarely found or useful
–
Some generated via opcode-splitting.
–
Helps avoid getting bogged down by irrelevant, useless 