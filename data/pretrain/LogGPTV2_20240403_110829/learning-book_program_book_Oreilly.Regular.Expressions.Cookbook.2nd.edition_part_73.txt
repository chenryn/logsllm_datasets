Again, PCRE must be compiled with UTF-8 support. In PHP, rum on UTF-8 support
with the /u pattern modifier.
Notice that in the second character class, all of the Letter subcategories (Ll, Lu, Lt, Lo,
and Lm) have been combined into their base category using  escape sequence if only
one letter is used within. We’ve taken advantage of this in the following regex by using
\pL\pM> instead of / .。s\v][/._5\p\]
538 I Chapter 9: Markup and Data Fermats
---
## Page 555
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Following is another, even shorter way to accomplish the same thing. Instead of using
rwo separate character classes, it uses negative lookahead to forbid a digit as the initial
character. This ban applies to the first matched character only, even though the (+)
quantifier after the character class lets the regex match an unlimited number of
characters:
?!\d)[^\s"′/]+
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
See Also
 John Cowan, one of the editors of the XML 1.1 specification, explains which characters
are forbidden in XML 1.1 names and why in a blog post at http:/recycledknowledge
blogspo.com/2008/02/which-characters-are-excladed-in-xml.htl
The document *Background to Changes in XML 1.0, 5th Edition? at http://www.w.3
org/XML/2008/02/xml10_5th_edizio_background.hzl discusses the rationale for
backporting XML 1.1’s name rules to XML 1.0, Fifth Edition.
Recipe 9.1 shows how to match XML-style tags while balancing trade-offs including
tolerance for invalid markup.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.7 explains
how to match Unicode characters. Recipe 2.12 explains repetition.
9.5ConvertPlainTexttoHTMLbyAddingandTags
Problem
Given a plain text string, such as a multiline value submitted via a form, you want to
convert it to an HTML fragment to display within a web page. Paragraphs, separated
breaks should be replaced with  tags.
by two line breaks in a row, should be surrounded with .·. Additional line
Solution
This problem can be solved in four simple steps In most programming languages, only
the middle rwo steps benefit from regular expressions.
6E5 1 s6eI pur  fuppv fq1w1Ho 1xa1uRld uauo S'6
---
## Page 556
Step 1: Replace HTML special characters with named character references
As we're converting plain text to HTML., the first step is to convert the three special
HTML characters &,  to named character references (see Table 9-3). Otherwise,
the resulting markup could lead to unintended results when displayed in a web browser.
Tabile 9-3. HTML. special character substitations
Searchfor
Replace with
8
c8anp; 79
(0)
81t;*
(>)
c8gt;#
Ampersands (&) must be replaced first, since you'll be adding more ampersands to the
subject string as part of the named character references.
Step 2: Replace alline breaks with 
Search for:
u\|u\\
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
\R
Regex options: None
Regexflarers: PCRE 7, Perl 5.10
Replace with:
Replacement text flavors: .NET, Java, JavaScript, Perl, PHP, Python, Ruby
Step 3: Replace double  tags with 
Search for:
\s*
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Replace with:
Replacement text flavors: .NET, Java, JavaScript, Perl, PHP, Python, Ruby
Step 4: Wrap the entire string with *
This step is a simple string concatenation, and doesn’t require regular expressions.
540 I Chapter 9: Marlkup and Data Fermats
---
## Page 557
Example JavaScript solution
Tying all four steps together, we'll create a JavaScript function called htnlFronPlain
Text( ). This function accepts a string, processes it using the steps we’ve just described,
then rerurns the new HTML sring:
function htnlFronPlainText(subject) {
// Step 1 (plain text searches)
subject = subject.replace(/&/g,
"8anp;*)
replace(/");
// Step 3
subject = subject.replace(/\s*/g, "*);
// Step 4
。 + a{qns + , = ↓a{qns
return subject;
// Run some tests...
htmlFromPlainText(*Test.");
//->“Test."
/ ->"Test."
htmlFromPlainText(°Test. \n");
htmlFromPlainText(*Test \n\n°);
sa1 "Test1.Test2.*
htmlFromPlainText(*Test1.\n\nTest2.*); // -> *Test1.Test2,*
htmlFromPlainText(°");
// -> “81t; AT&amp;T &gt;"
Several examples are included at the end of the code snippet that show the output when
this function is applied to various subject strings. If JavaScript is foreign to you, note
that the /g modifier appended to each of the regexliterals causes the replace() method
to replace all occurrences of the patterm, rather than just the first. The \n metasequence
in the example subject strings inserts a line feed character (ASCII position Ox0A) in a
JavaScript string literal.
Discussion
Step 1: Replace HTML special characters with named character references
The easiest way to complete this step is to use three discrete search-and-replace
operations (see Table 9-3, shown earlier, for the list of replacements). JavaScript always
uses regular expressions for global search-and-replace operations, but in other pro-
gramming languages you will typically get better performance from simple plain-text
substitutions.
[S  s6e1 pur fuppy fqw1Hexa uRla uau) 5'6
---
## Page 558
Step 2: Replace allline breaks with 
In this step, we use the regular expression  before adding paragraph tags in the next step keeps
things simpler overall. It also makes it easy to add whitespace between your
 tags in later substirutions, if you want to keep your HTML code readable.
If you prefer to use XHTML-style singleton tags, use α instead of  as
01  dans u uoissaadxa neqnsau au1 1anje on paau osle 1nox Buns suauaeqdaa nok
match this change.
Step 3: Replace double  tags with 
Two line breaks in a row indicate the end of one paragraph and the start of another, so
our replacement text for this step is a closing  tag followed by an opening . If
the subject text contains only one paragraph (i.e., rwo line breaks never appear in a
row), no substitutions will be made. Step 2 already replaced any of several line break
types (leaving behind only  tags), so this step could be handled with a plain text
substitution. However, using a regex here makes it easy to take things one step further
and ignore whitespace that appears between line breaks. Any extra space characters
won’t be rendered in an HTML document anyway.
If you're generating XHTML and therefore replaced line breaks with αs instead
of α, you'll need to adjust the regex for this step to (\s*.
Step 4: Wrap the entire string with -
1e Be1   ppe o1 paou no moN sqdeu8eued uaamuq dnaeu poppe fauu  da1s
the very beginning of the subject string, and a closing  at the very end. That com-
pletes the process, whether there were 1 or 100 paragraphs in the text.
SeeAlso
Recipe 4.10 includes more information about Perl and PCRE’s √R token, and shows
how to manually match the additional, esoteric line separators that are supported by
\R).
Recipe 9.6 demonstrates how to decode XML-style named and numbered character
references.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
classes. Recipe 2.8 explains altemation. Recipe 2.12 explains repetition.
542 | Chapter 9: Markup and Data Fermats
---
## Page 559
9.6DecodeXMLEntities
Problem
You want to convert all character entities defined by the XML standard to their corre
sponding literal characters, The conversion should handle named character references
(such as &amp;, &lt;, and &quot;) as well as numeric character references (be they in
decimal notation as &#0931; or &#931;, or in hexadecimal notation as &#x03A3;,
3#x3A3; , or &#x3a3;).
Solution
Regular expression
&(?:#([0-9]+)[#x([0-9a-fA-F]+)1). HTML includes many more named entities that aren’t covered here.8 If
8. HTMI. 4.01 defines 252 named entities. HTML.5 has more than 2,000.
544 | Chapter 9: Markup and Data Fermats
---