title:SmartRE: an architecture for coordinated network-wide redundancy elimination
author:Ashok Anand and
Vyas Sekar and
Aditya Akella
SmartRE: An Architecture for Coordinated
Network-wide Redundancy Elimination
Ashok Anand∗, Vyas Sekar† and Aditya Akella∗
∗University of Wisconsin-Madison, †Carnegie Mellon University
{ashok,akella}@cs.wisc.edu, PI:EMAIL
ABSTRACT
Application-independent Redundancy Elimination (RE), or identi-
fying and removing repeated content from network transfers, has
been used with great success for improving network performance
on enterprise access links. Recently, there is growing interest for
supporting RE as a network-wide service. Such a network-wide
RE service beneﬁts ISPs by reducing link loads and increasing the
effective network capacity to better accommodate the increasing
number of bandwidth-intensive applications. Further, a network-
wide RE service democratizes the beneﬁts of RE to all end-to-end
trafﬁc and improves application performance by increasing through-
put and reducing latencies.
While the vision of a network-wide RE service is appealing, re-
alizing it in practice is challenging. In particular, extending single-
vantage-point RE solutions designed for enterprise access links to
the network-wide case is inefﬁcient and/or requires modifying rout-
ing policies. We present SmartRE, a practical and efﬁcient archi-
tecture for network-wide RE. We show that SmartRE can enable
more effective utilization of the available resources at network de-
vices, and thus can magnify the overall beneﬁts of network-wide
RE. We prototype our algorithms using Click and test our frame-
work extensively using several real and synthetic traces.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network Opera-
tions—Network management
General Terms
Algorithms, Design, Management
Keywords
Redundancy Elimination, Caching
1.
INTRODUCTION
Redundancy Elimination (RE) for network transfers has gained
a lot of traction in recent years. RE is widely used by data centers
and enterprise networks to improve their effective network capac-
ity, to reduce their wide-area footprint, and to improve end-to-end
application performance. The importance of RE is reﬂected in the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’09, August 17–21, 2009, Barcelona, Spain.
Copyright 2009 ACM 978-1-60558-594-9/09/08 ...$10.00.
emergence of a huge market for RE solutions (e.g., [4, 3, 2, 8, 5])
and their rapidly growing adoption [6, 9].
The success of such deployments has motivated researchers, equip-
ment vendors, and ISPs to explore the potential of network-wide
RE. For example, Anand et al. [12] have recently shown the ben-
eﬁts of supporting RE as a primitive IP-layer service on network
routers.
In similar vein, network equipment vendors have high-
lighted network-wide support for content caching and duplicate
suppression as a key focus area in their future development ef-
forts [3, 2]. Broadly speaking, these efforts argue for deploying RE
at multiple points across a large network and using it as a generic
service which is transparent to end-to-end applications.
This vision of network-wide RE is promising for two reasons.
First, a network-wide deployment spreads the beneﬁts of RE to all
end-to-end applications, as opposed to just beneﬁting transfers on
the individual links of enterprises. Second, it beneﬁts ISPs by im-
proving their effective network capacity and allowing them to better
accommodate the increasing number of bandwidth intensive mul-
timedia and ﬁle-sharing applications we see today, and by giving
them better control over trafﬁc engineering operations [12].
While RE has been well-studied in the context of point deploy-
ments (e.g., enterprise WAN access links), there has been little
work on how best to design network-wide RE. Thus, the promise of
network-wide RE remains unfulﬁlled. In this paper, we study how
to build an effective and practical network-wide RE architecture.
We start by observing that a network-wide RE architecture should
meet three key requirements:
(1) Resource-awareness: RE involves resource-intensive oper-
ations such as indexing content, looking up content ﬁngerprints and
compressing data, and reconstructing the original content from lo-
cally stored information. An ideal approach must explicitly ac-
count for the resource constraints on network elements in perform-
ing these RE functions. These constraints arise mainly from (a)
throughput bounds which depend on the number of memory oper-
ations possible per second and (b) memory capacity which limits
the amount of data that can be cached for RE purposes. Naive
approaches that do not account for these constraints, such as the
strawman framework of Anand et al. [12], offer sub-optimal per-
formance. In contrast, using the limited resources available at each
node intelligently can offer close to the best possible beneﬁts.
(2) Network-wide goals: The architecture should allow network
operators to specify network-wide goals such as increasing overall
efﬁciency (e.g., improving the network throughput) or to achieve
speciﬁc trafﬁc engineering goals (e.g., alleviating congested hotspots).
(3) Flexibility: The architecture must be incrementally adopt-
able providing beneﬁts even under partial deployment, and must
supplement, not replace, current network operations such as exist-
ing routing and network management practices.
87We present the design, implementation, and evaluation of SmartRE,
an architecture for network-wide RE that meets the above require-
ments. In SmartRE, redundancy elimination is performed in a co-
ordinated fashion by multiple devices. SmartRE uses the available
resources on RE devices efﬁciently and naturally accommodates
several network-wide objectives.
In describing SmartRE, we focus largely on packet-level RE in
ISP networks [12], where RE devices on routers cache packet pay-
loads and strip duplicate strings from individual packets. However,
we believe that our design can apply to other deployment scenarios,
e.g., in multi-hop wireless networks and datacenters.
In SmartRE, a packet can potentially be reconstructed or de-
coded several hops downstream from the location where it was
compressed or encoded. In this respect, SmartRE represents a sig-
niﬁcant departure from packet-level RE designs proposed in prior
solutions [29, 12], where each compressed packet is reconstructed
at the immediate downstream router. Further, SmartRE uses a network-
wide coordinated approach for intelligently allocating encoding and
decoding responsibilities across network elements.
In general, encoding incurs greater overhead than decoding. Thus,
SmartRE allocates encoding to ingress routers to avoid overload-
ing interior routers that operate at higher line-rates and thus have
stricter resource constraints. Since the number of edge routers is
large, a large number of encoded packets are introduced into the
network. Interior routers in SmartRE perform less expensive de-
coding actions. Decoding is performed in a coordinated fashion
with each interior router responsible for storing and reconstructing
a fraction of the encoded packets on a path. We use hash-based
sampling techniques [31] to facilitate coordination across interior
routers while incurring negligible overhead.
When allocating encoding and decoding responsibilities across
a network, SmartRE takes into account the memory capacity and
packet processing throughput at each RE device along with the
prevailing trafﬁc conditions, and conﬁgures the actions of differ-
ent devices so as to best meet an operator-speciﬁed network-wide
goal. This ensures that no device is overwhelmed and that RE is
used optimally to meet the network’s objectives.
The duplicate removal and reconstruction logic in SmartRE can
be implemented in high-speed two-port switches or middleboxes,
which can then be deployed across speciﬁc ISP links. These enable
incremental adoption in an ISP network. We develop prototypes of
the two-port switches in the Click modular router [21]. Using real
packet traces, we ﬁnd that the prototypes can perform duplicate
removal at 2.2 Gbps and reconstruction at 8 Gbps.
We conduct an in-depth evaluation of SmartRE as applied to IP-
layer RE in ISP networks using controlled simulations based on
synthetic and real packet traces over several real and inferred ISP
topologies. Across a range of topologies and trafﬁc patterns, the
performance of SmartRE is 4-5× better than naively extending a
single-vantage point RE solution to the network-wide case. Further,
and more signiﬁcantly, SmartRE achieves 80-90% of the absolute
network footprint reduction of the optimal possible case where RE
devices are not limited by any throughput or capacity constraints.
We also evaluate partial deployment scenarios and ﬁnd that en-
abling SmartRE on a small set of strategically selected routers can
offer signiﬁcant network-wide beneﬁts.
2. RELATED WORK AND BACKGROUND
We start by describing prior work on removing duplicate data
from network links, ranging from full object-based approaches to
partial packet-based ones. We then present details of packet-level
RE and describe prior work on enabling packet-level RE as a router
service across ISP networks that forms a key focus in our work.
2.1 Related Work
Object-level caching: Several systems in the past have explored
how to remove duplicate data from network links. “Classical” ap-
proaches such as Web caches work at the object level, serving pop-
ular HTTP objects locally [32]. In similar spirit, CDNs and peer-
to-peer caches [7, 1] perform object-level duplicate removal.
Protocol-independent RE mechanisms: In recent years, a class
of application- and protocol-independent techniques have been de-
veloped which can remove redundant strings from any trafﬁc ﬂow.
Starting with the pioneering work of Spring et al. [29], several com-
mercial vendors have introduced “WAN optimizers” which remove
duplicate content from network transfers. Many of these prod-
ucts [4, 2, 8, 5] work at the level of chunks inside objects and we
refer to them as chunk-level approaches. In contrast, both Spring et
al. [29] and Anand et al. [12] adopt techniques which are similar at
the high level but operate at a packet-level.
Content-based naming for RE: Content-based naming has emerged
as an alternative to enhance web caching (e.g., [19, 26]), content
distribution (e.g., [30, 23, 22]), and distributed ﬁle systems (e.g., [11]).
These approaches use ﬁngerprinting mechanisms [24] similar to
packet-level RE to identify addressable chunks. However, these
approaches require modiﬁcations to end-systems to fully realize
the beneﬁts of RE. Network-based, protocol-independent RE ap-
proaches are transparent to end-systems and offers the beneﬁts of
RE to end-systems that are not content-aware.
2.2 Packet-level RE Explained
The central idea of packet-level RE is to remove strings in pack-
ets that have appeared in earlier packets. To perform RE across a
single link, the upstream device stores (in memory) packets it has
transferred on the link over a certain period of time. Packet con-
tents are indexed using ﬁngerprints which essentially form content-
based hooks pointing to content in random locations within the
packet. For each incoming packet, the upstream RE device checks
if the packet’s ﬁngerprints have appeared in earlier in-memory pack-
ets. Each matching ﬁngerprint indicates a certain region of partial
overlap between the incoming packet and some earlier packet. The
matching packets are compared to identify the maximal region of
overlap. Such overlapping regions are removed from the incoming
packet and a shim is inserted to tell the downstream device how
to decode the packet using its local memory. A packet can carry
multiple shims, each potentially matching a different in-memory
packet. Decoding is simple: the downstream device uses the shim
in the encoded packet to retrieve the matching packet(s), and ﬁlls in
the corresponding missing byte range(s). Chunk-level approaches
work similarly.
2.3 Network-wide RE
Why packet-level RE: Both packet- and chunk-level RE are ag-
nostic to application protocols and can be implemented as generic
network services that need not understand the semantics of spe-
ciﬁc applications. Prior studies have shown that both approaches
are signiﬁcantly better than caching entire objects [29]. However,
chunk-level approaches require terminating TCP connections and
partially reconstructing objects before applying compression. This
interferes with the end-to-end semantics of connections and also
imposes high overhead on the RE devices since they must maintain
per-ﬂow state. Packet-level approaches do not interfere with end-
to-end semantics of connections, and where technology permits,
can be transparently supported in routers or middleboxes.
Extending packet-level RE to a network: Since packet-level RE
brings signiﬁcant compression beneﬁts while operating in a trans-
parent and application-agnostic fashion, Anand et al advocate its
88use as a router primitive for network-wide RE [12]. In their pro-
posal, each router in an ISP network maintains a cache of recently
forwarded packets. Upstream routers on a link use the cache to
identify common content with new incoming packets and strip these
redundant bytes on the ﬂy. Downstream routers reconstruct pack-
ets from their local cache. This process repeats in a hop-by-hop
fashion along a network path inside an ISP. Anand et al. evaluate
an ideal, unconstrained setting where they assume memory oper-
ations take negligible time and that the caches on each router are
inﬁnite. Under this model, they show that network-wide RE could
offer signiﬁcant beneﬁts in terms of reducing overall network load
and absorbing sudden trafﬁc overload in situations such as ﬂash
crowds. The central goal of our paper is to design a practical archi-
tecture that can achieve these beneﬁts when RE elements operate
within realistic throughput and memory capacity constraints.
The hop-by-hop approach proposed by Anand et al. is a naive
approach because it takes a very link-local view of RE and does
not account for constraints of the RE devices.
In the next sec-
tion, we discuss why this naive approach offers poor performance
in practice and show how smarter caching and coordination can of-
fer vastly improved beneﬁts.
3. BENEFITS OF COORDINATION
We start by describing the practical limits on the throughput of
the two packet-level RE primitives, namely, encoding and decod-
ing. Then, we present qualitative examples highlighting the bene-
ﬁts arising from assigning encoding and decoding responsibilities
across a collection of routers in an intelligent, coordinated fashion.
In particular, we show how this: (1) leads to efﬁcient memory us-
age, (2) ensures RE-related tasks can be performed at full capacity,
and (3) enables incremental deployment. We contrast this against a
naive approach that does not account for resource constraints.
In this section, we assume a hypothetical intelligent, coordinated
approach. This has two implications. First, we have the ﬂexibility
to specify where a packet should be cached along a routing path.
In particular, this allows us to split caching responsibilities along a
path. This is in contrast to the hop-by-hop approach, where each
packet is explicitly cached at every hop along the path. For ex-
ample, if packets p1, . . . , p4 traverse a path I, R1, . . . , R4, we can
specify that each pi is cached at (and only at) Ri. Second, we as-
sume that RE devices that are separated by multiple hops in the net-
work can either implicitly or explicitly maintain a consistent view
of each other’s caches. This means that an encoded packet can po-
tentially be decoded several hops downstream from the point where
it was encoded. In the above example, this means that I can encode
packet p4 with respect to p3 and R3 is responsible for decoding
it. Again, in the hop-by-hop approach, this would not be possible;
each packet would have to be encoded and decoded per-link.
3.1 Encoding and Decoding Throughput
Standalone throughput: The main bottleneck affecting the pro-
cessing throughput of packet-level RE operations is memory ac-
cess. Encoding a packet requires multiple memory accesses and is
much slower than decoding. To see why, suppose that the mem-
ory hardware can support R random memory accesses per second.
For modern DRAMs, the random access latency is 50ns, hence
R = 2 × 107. Suppose that each packet has at most k matches,
and that we compute F ﬁngerprints for each packet.
(Note that
since the number of matches can never be more than the number
of ﬁngerprints that were computed, k ≤ F .) Typical values are
F = 10 and k = 3 [12].
The encoding throughput for a standalone RE device is at most
R/F packets per second. This is because each packet, whether it
Packet arrival order: A,B,C,D,A,B,C,D
Ingress can cache 4 pkts
Routers cache 1 packet
Legend:
RE Device
Packet store
Savings from RE
Hop-by-hop Redundancy Elimination
Coordinated Redundancy Elimination
I
R1
R2
R3
R4
I
R1
R2
R3
R4
after
pkt 4
after 
pkt 8
A, B, C, D
B, C, D, A
C, D, A, B
D, A, B, C
A, B, C, D
D
A
B
C
D
D
A