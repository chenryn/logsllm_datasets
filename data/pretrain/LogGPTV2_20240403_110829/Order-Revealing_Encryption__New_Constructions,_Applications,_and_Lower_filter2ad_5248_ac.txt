ciphertext ctL = (u1, . . . , un).
• ORE.EncryptR(sk, y). Let sk = (k1, k2). First, the right encryption algorithm uniformly samples
r←− {0, 1}λ. Then, for each i ∈ [n] and j ∈ [d], letting j∗ = π−1(F (k2, y|i−1), j), it
a nonce r
computes
zi,j = cmp(j∗, yi) + H(F (k1, y|i−1(cid:107)j), r)
(mod 3).
It then deﬁnes the tuple vi = (zi,1, . . . , zi,d) and outputs the ciphertext ctR = (r, v1, v2 . . . , vn).
• ORE.Compare(ctL, ctR). The compare algorithm ﬁrst parses
ctL = (u1, . . . , un)
where for each i ∈ [n], we write ui = (k(cid:48)
index i for which zi,hi − H(k(cid:48)
z(cid:96),h(cid:96) − H(k(cid:48)
(cid:96), r) (mod 3).
and ctR = (r, v1, v2, . . . , vn),
i, hi) and vi = (zi,1, . . . , zi,d). Then, let (cid:96) be the smallest
i, r) (cid:54)= 0 (mod 3). If no such (cid:96) exists, output 0. Otherwise, output
Correctness. Let sk = (k1, k2) ← ORE.Setup(1λ) and take any x, y ∈ [N ]. Let ct(x)
ORE.EncryptL(sk, x) and ct(y)
bility, ORE.Compare(ct(x)
L , ct(y)
L ←
R ← ORE.EncryptR(sk, y). We show that with overwhelming proba-
R ) = cmp(x, y).
Let x = x1 ··· xn and y = y1 ··· yn. Let ct(x)
R = (r, v1, . . . , vn), ui =
i, hi) and vi = (zi,1, . . . , zi,d) for all i ∈ [n]. Next, let i∗ ∈ [n] be the ﬁrst index i where xi (cid:54)= yi. If
(k(cid:48)
x = y, set i∗ = n + 1. Then, if x (cid:54)= y, we have that cmp(x, y) = cmp(xi∗, yi∗) By deﬁnition, for all
(cid:96) < i∗, x|(cid:96) = y|(cid:96), and so setting κ(cid:96) = F (k2, x|(cid:96)) = F (k2, y|(cid:96)), we have that
π−1(κ(cid:96)−1, h(cid:96)) = π−1(κ(cid:96)−1, π(κ(cid:96)−1, x(cid:96))) = x(cid:96).
L = (u1, . . . , un) and ct(y)
By deﬁnition of zi,j, we have that for all (cid:96) ≤ i∗
z(cid:96),h(cid:96) = cmp(π−1(κ(cid:96)−1, h(cid:96)), y(cid:96)) + H(F (k1, y|(cid:96)−1(cid:107)h(cid:96)), r)
= cmp(x(cid:96), y(cid:96)) + H(F (k1, x|(cid:96)−1(cid:107)h(cid:96)), r)
= cmp(x(cid:96), y(cid:96)) + H(k(cid:48)
(cid:96), r).
(cid:96), r) = cmp(x(cid:96), y(cid:96)) = 0, and for (cid:96) = i∗, z(cid:96),h(cid:96) −H(k(cid:48)
(cid:96), r) = cmp(xi∗, yi∗).
(cid:96), r) = 0, in which case the comparison algorithm
Thus, for all (cid:96) < i∗, z(cid:96),h(cid:96) −H(k(cid:48)
If x = y, then i∗ = n+1 and for all (cid:96) ∈ [n], z(cid:96),h(cid:96)−H(k(cid:48)
correctly outputs 0. Otherwise, the comparison algorithm outputs cmp(xi∗, yi∗) = cmp(x, y).
Security. Before stating our security theorem, we ﬁrst specify our leakage function L(d)
blk. Each
ciphertext block in our ORE scheme is essentially a ciphertext for the underlying small-domain ORE,
and the comparison operation proceeds block-by-block. Intuitively then, since our small-domain
ORE scheme leaks nothing except the ordering (Theorem 3.3), the additional leakage of our new
ORE scheme is the index of the ﬁrst block that diﬀers between two ciphertexts. In particular, for
messages x = x1x2 ··· xn and y = y1y2 ··· yn written in base d, we deﬁne the ﬁrst diﬀering block
diﬀ(x, y) to be the ﬁrst index i ∈ [n] such that xj = yj for all j < i and xi (cid:54)= yi. If x = y,
function ind(d)
11
we deﬁne ind(d)
given by
diﬀ(x, y) to be n + 1. Then, our leakage function L(d)
blk for our extended ORE scheme is
L(d)
blk(m1, . . . , mt) = {(i, j, blk(mi, mj)) | 1 ≤ i < j ≤ t} ,
where blk(mi, mj) = (cmp(mi, mj), ind(d)
diﬀ(mi, mj)). In general, we refer to the parameter d as the
arity (or base) of the plaintext space, which grows exponentially in the length (in bits) of the block.
We now state our main security theorem.
Theorem 4.1. The ORE scheme Πore is secure with leakage function Lblk assuming that F is a
secure PRF and H is modeled as a random oracle.
The proof of Theorem 4.1 can be viewed as a composition of the security proof for our underlying
small-domain ORE (Theorem 3.3) and the security proof of the Chenette et al. scheme [CLWW16,
Theorem 3.2]. We give the proof in Appendix B.
Space usage. Ciphertexts in our new ORE scheme consist essentially of n ciphertexts for our
small-domain ORE scheme (with domain size d). More concretely, a left ciphertext in our new
scheme consists of n(λ + (cid:100)log d(cid:101)) bits and a right ciphertext consists of λ + n(cid:100)d log2 3(cid:101) bits. Since
the size of the plaintext space N satisﬁes N ≤ dn, ciphertext size in our new ORE scheme grow as
O((λ + d) logd N ).
Non-uniform block sizes. In practice, some bits of the plaintext may be more sensitive than
others. Leaking information about these bits is less desirable than leaking information about less
sensitive bits. To accommodate the diﬀerent sensitivities, we can use diﬀerent input bases (e.g.,
use larger blocks for more sensitive bits) for the diﬀerent blocks of the ciphertext. The leakage in
the resulting scheme is still the index of the ﬁrst (variable-sized) block that diﬀers between two
messages. Correctness is unchanged.
5 Encrypted Range Queries
In this section, we formally deﬁne the properties of a client-server protocol for range queries over
an encrypted database. In our model, a client stores an encrypted database on the server. The
client can update the database (e.g., by adding or removing records) and issue range queries against
the database. In a range query, the client speciﬁes a numeric interval and the server responds by
returning all ciphertexts whose underlying messages fall within that interval.
Although our deﬁnitions are stated in terms of numeric intervals, our methods are broadly
applicable to more general settings—in particular, to any well-ordered domain such as English
names. For example, when the database consists of encrypted alphanumeric strings, range queries
can be used for both exact-keyword as well as preﬁxed-based search.
Our security deﬁnitions are adapted from existing deﬁnitions for searchable symmetric encryption
(SSE) [CGKO06, CK10]. We survey some of the work on SSE in Section 8. In our deﬁnitions we
consider both the online and oﬄine settings. In the online setting, the adversary sits on the server
and sees both the encrypted database as well as the client’s queries, while in the oﬄine setting, the
adversary just obtains a dump of the server’s encrypted database. By showing that in the oﬄine
setting, the server’s encrypted database provides semantic security, we can argue that our new
range query scheme provides robustness against the kinds of oﬄine inference attacks considered by
Naveed et al. [NKW15].
12
After formally deﬁning the security requirements for a range query protocol, we give a construction
based on our ORE scheme Πore from Section 4. Our protocol not only satisﬁes our security properties,
but also has several additional appealing properties such as sublinear query time (in the size of the
database) and optimal round complexity.
Our proposed protocol is easily extensible to the multi-client setting where many clients are
interacting with the server. Each authorized client is simply given the secret key needed to query
and update the database.
5.1 Range Query Schemes
We begin with a formal deﬁnition of a range query scheme, followed by our notions of online and
oﬄine security. We describe a range query scheme in terms of a set of algorithms, where each
algorithm is a single-round protocol between the client and the server. In each protocol, the client is
always stateless, but the server is stateful—in particular, the server’s state represents the information
stored on the server needed to eﬃciently respond to the client’s queries, including the encrypted
database itself.
Initially, the client runs a setup procedure that takes as input a plaintext database D of values
and outputs a secret key sk and some token t representing the encrypted database. The token t
is given to the server, and the server outputs some initial state st. Then, for each query (range
query, insert query, delete query), the client uses the secret key sk to derive a token t representing
its query, and sends t to the server. This token contains a masked version of the client’s input for
the query. On input a query token t, the server processes the query and updates its internal state.
In a range query, the server also returns a response r, which the client uses to learn the answer to
the range query.
More formally, let D ∈ [N ]M represent a (possibly empty) database consisting of M ≥ 0 values,
each in the range [N ]. A range query scheme Πrq = (RQ.Setup, RQ.Range, RQ.Insert, RQ.Delete)
consists of a tuple of algorithms deﬁned as follows:
• RQ.Setup(1λ, D) → (t, st). The setup algorithm between the client and server proceeds as
follows:
– Client(1λ, D) → (sk, t). The client, on input the security parameter λ and database D,
produces a key sk which is kept secret, and a token t which is sent to the server.
– Server(t) → st. The server takes as input the token t and outputs an initial state st.
• RQ.Range(sk, q, st) → (t, st(cid:48)). The range query algorithm between the client and server
proceeds as follows:
– Client(sk, q = (x, y)) → t. The client, on input the secret key sk and a query q for the
range [x, y], produces a token t which is sent to the server.
– Server(st, t) → (st(cid:48), r). The server takes as input its current state st and the token t and
produces an updated state st(cid:48), along with a response r, which is sent to the client.
– Client(sk, r) → S. The client, on input the secret key sk and the response r from the
server, obtains a subset S of entries which represent the answer to the range query.
• RQ.Insert(sk, q, st) → (t, st(cid:48)). The insert algorithm between the client and server proceeds as
follows:
13
– Client(sk, q = x) → t. The client, on input the secret key sk and a query q representing
an insertion of the value x, produces a token t which is sent to the server.
– Server(st, t) → (st(cid:48), r). The server takes as input its current state st and the token t and
produces an updated state st(cid:48).
• RQ.Delete(sk, q, st) → (t, st(cid:48)). The delete algorithm between the client and server proceeds as
follows:
– Client(sk, q = x) → t. The client, on input the secret key sk and a query q representing a
deletion of the value x, produces a token t which is sent to the server.
– Server(st, t) → (st(cid:48), r). The server takes as input its current state st and the token t and
produces an updated state st(cid:48).
We now deﬁne the correctness and security properties of a range query scheme. At a high level, we
say that a range query scheme is correct if for all range queries (x, y) the client makes, it obtains the
set of entries in the database D (taking into account any insertion and deletion queries occurring
before the range query) that lie in the interval [x, y].
Correctness. Fix a security parameter λ, positive integers x, y, N, M where x ≤ y ∈ [N ], a
database D ∈ [N ]M and a sequence of (cid:96) insertion, deletion, and range queries q1, . . . , q(cid:96)−1. Let
q(cid:96) = (x, y) be a range query. Let (st(cid:96), r) ← Server(st(cid:96)−1, Client(sk, q(cid:96))) and S ← Client(sk, r), where
st(cid:96)−1 is the server’s state after processing queries q1, . . . , q(cid:96)−1. Let D0 = D, D1, . . . , D(cid:96) be the
eﬀective database elements after each query—that is, for all i ∈ [(cid:96)], Di = Di−1 if qi is a range query,
Di = Di−1 ∪ {x} if qi−1 is an insertion query for x, and Di = Di−1 \ {x} if qi−1 is a deletion query
for x. We say a range query scheme Πrq = (RQ.Setup, RQ.Range, RQ.Insert, RQ.Delete) is correct
if for all security parameters λ, integers N, M, x, y, databases D ∈ [N ]M and sequence of queries
q1, . . . , q(cid:96), we have that the client’s response S satisﬁes S = D(cid:96) ∩ [x, y].
Security. Our ﬁrst notion of security is online security, which models the information revealed to
a malicious server in the range query protocol. Here, the adversary sees both the contents of the
server’s state (i.e., the encrypted database) as well as the client’s queries. We give a simulation-based
deﬁnition with respect to a concrete leakage function that operates over the plaintext values in the
database and the queries. Our deﬁnition is adapted from the standard paradigm used to deﬁne
security in searchable symmetric encryption schemes [CGKO06, CK10].
Deﬁnition 5.1 (Online Security). For all databases D and sequences of (cid:96) queries q1, . . . , q(cid:96), deﬁne
the sequence of states st0, . . . , st(cid:96) and tokens t0, . . . , t(cid:96) where (t0, st0) ← RQ.Setup(1λ, D), and for
each i ∈ [(cid:96)], (ti, sti) is the output of the ith query on input sk, qi, and sti−1. A range query scheme
is online secure with respect to a leakage function L if for every eﬃcient adversary A, there exists a
simulator S where
(cid:12)(cid:12) Pr[A(1λ, st0, . . . , st(cid:96), t0, . . . , t(cid:96)) = 1] − Pr[S(1λ,L(D, q1, . . . , q(cid:96))) = 1](cid:12)(cid:12) = negl(λ).
We also deﬁne an “oﬄine” notion of security for a range query scheme. The oﬄine setting
models scenarios where the adversary obtains a dump of the contents of the server (i.e., the server’s
state), but does not observe any queries made by the client. Against oﬄine adversaries, we require
the much stronger property that the only thing leaked by the encrypted database is the size of the
encrypted database. This is the best-possible leakage.
14
Deﬁnition 5.2 (Oﬄine Security). For all databases D and sequences of (cid:96) queries q1, . . . , q(cid:96), deﬁne
the sequence of states st0, . . . , st(cid:96) and tokens t0, . . . , t(cid:96) as in Deﬁnition 5.1 Let |st(cid:96)| be the bit-length
of st(cid:96). A range query scheme is oﬄine secure if for all eﬃcient adversaries A, there exists an eﬃcient
simulator S where
(cid:12)(cid:12)(cid:12)Pr[A(1λ, st(cid:96)) = 1] − Pr[S(1λ,|st(cid:96)|) = 1]
(cid:12)(cid:12)(cid:12) = negl(λ).
The importance of oﬄine security. Although oﬄine security is strictly weaker than online
security, it captures the real-world scenario where an attacker breaks into a server and exﬁltrates
any data the server has stored on disk. While companies are often able to detect and protect against
active online corruption of their servers, the question remains what happens after the fact when the
attacker has also exﬁltrated the database for oﬄine analysis. Of course, the ideal solution to this
problem is an encrypted database system that provides strong online security guarantees. However,
existing systems with strong online security typically require redesigning the database management
system and implementing elaborate cryptographic protocols for querying [CJJ+14, FJK+15], or
leverage heavy, less practical tools such as fully homomorphic encryption [Gen09] or oblivious
RAMs [GO96]. On the ﬂip side, an OPE-based solution yields a scheme that does not provide
oﬄine security in our model; this is one reason why OPE and other PPE-based encrypted database
schemes are vulnerable to inference attacks. This is true even if we use an (interactive) OPE scheme
with best-possible security; the ability to directly compare ciphertexts is suﬃcient to carry out the
inference attacks. Thus, there is an interesting intermediate ground where we build systems that
achieve decent online security, while still providing strong oﬄine security guarantees to be robust
against inference attacks.
5.2 An Eﬃcient Range Query Scheme
We now describe how to build an eﬃcient range query scheme using our ORE construction from
Section 4. At a high level, the server’s encrypted database consists of right ciphertexts for each
value, stored in sorted order. The tokens t for each query consist of a left encryption of the query
value. This allows the server to use the ORE comparison algorithm to perform binary search over
the encrypted ciphertexts in the database. Thus, the server is able to answer queries eﬃciently and
maintain the database in sorted order (during updates). To answer a range query, the server performs
binary search to ﬁnd the lower and upper boundaries in the encrypted database corresponding
to its query and returns all ciphertexts lying within those bounds. The client then decrypts the
ciphertexts to learn the response.
More formally, we deﬁne our range query scheme Πrq = (RQ.Setup, RQ.Range, RQ.Insert, RQ.Delete)
as follows:
• RQ.Setup(1λ, D) → (t, st). The setup algorithm between the client and server proceeds as
follows:
– Client(1λ, D) → (sk, t). The client, on input the security parameter λ and database D,
generates a secret key sk ← ORE.Setup(1λ). Then, the client sorts the database D, and
for each sequential element xi ∈ D, the client computes cti ← ORE.EncryptR(sk, xi), and
sends the token t = (ct1, . . . , ctM ) to the server.
– Server(t) → st. The server simply sets st = t.
15
• RQ.Range(sk, q, st) → (t, st(cid:48)). The range query algorithm between the client and server
proceeds as follows:
– Client(sk, q = (x, y)) → t. The client, on input the secret key sk and a query repre-
senting a range query for the range [x, y], produces the token t = (ORE.EncryptL(sk, x),
ORE.EncryptL(sk, y)) which is sent to the server.
– Server(st, t) → (st(cid:48), r). The server takes as input its current state st = (ct1, . . . , ctM(cid:48)) for
some integer M(cid:48), and the token t = (ctx, cty). Using ORE.Compare, it performs a binary