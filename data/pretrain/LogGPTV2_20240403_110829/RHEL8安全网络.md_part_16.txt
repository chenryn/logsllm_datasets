``` literallayout
/usr/bin/python3 /bin/firewall-cmd --lockdown-on
```
在该示例中，只允许 `--lockdown-on`{.literal} 命令。
在 Red Hat Enterprise Linux 中，所有工具都放在 `/usr/bin/`{.literal}
目录中，`/bin/`{.literal} 目录被符号链接到 `/usr/bin/`{.literal}
目录。换句话说，尽管以 `root`{.literal} 身份输入的
`firewall-cmd`{.literal} 的路径可能会被解析为
`/bin/firewall-cmd`{.literal}，但现在 `/usr/bin/firewall-cmd`{.literal}
可以使用。所有新脚本都应该使用新位置。但请注意，如果以 `root`{.literal}
身份运行的脚本被写为使用 `/bin/firewall-cmd`{.literal}
路径，那么除了通常只用于非`root`{.literal} 用户的
`/usr/bin/firewall-cmd`{.literal}
路径外，还必须在允许列表中添加该命令的路径。
命令的 name 属性末尾的 `*`{.literal}
表示所有以这个字符串开头的命令都匹配。如果没有
`*`{.literal}，则包括参数的绝对命令必须匹配。
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_securing-networks.html#_additional_resources_3}其它资源 {.title}
:::
::: itemizedlist
-   `firewalld(1)`{.literal} 书册页
-   `firewalld.conf(5)`{.literal} 手册页
-   `firewall-cmd(1)`{.literal} 手册页
-   `firewall-config(1)`{.literal} 手册页
-   `firewall-offline-cmd(1)`{.literal} 手册页
-   `firewalld.icmptype(5)`{.literal} 手册页
-   `firewalld.ipset(5)`{.literal} 手册页
-   `firewalld.service(5)`{.literal} 手册页
-   `firewalld.zone(5)`{.literal} 手册页
-   `firewalld.direct(5)`{.literal} 手册页
-   `firewalld.lockdown-whitelist(5)`{.literal}
-   `firewalld.richlanguage(5)`{.literal}
-   `firewalld.zones(5)`{.literal} 手册页
-   `firewalld.dbus(5)`{.literal} 手册页
:::
:::
:::
[]{#getting-started-with-nftables_securing-networks.html}
::: chapter
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#getting-started-with-nftables_securing-networks}第 7 章 nftables 入门 {.title}
:::
`nftables`{.literal} 框架提供了数据包分类功能。最显著的功能是：
::: itemizedlist
-   内置查找表而不是线性处理
-   `IPv4`{.literal} 和 `IPv6`{.literal} 使用同一个协议框架
-   规则会以一个整体被应用，而不是分为抓取、更新和存储完整的规则集的步骤
-   支持在规则集(`nftrace`{.literal})和监控追踪事件（`nft`{.literal}）中调试和追踪
-   更加一致和压缩的语法，没有特定协议的扩展
-   用于第三方应用程序的 Netlink API
:::
`nftables`{.literal}
框架使用表来存储链。链包含执行动作的独立规则。`libnftnl`{.literal}
库可用于通过 `libmnl`{.literal} 库与 `nftables`{.literal} Netlink API
进行低级交互。
要显示规则集变化的影响，请使用 `nft list ruleset`{.literal}
命令。由于这些工具将表、链、规则、集合和其他对象添加到
`nftables`{.literal} 规则集中，请注意， `nftables`{.literal}
规则集操作（如 `nft flush ruleset`{.literal}
命令）可能会影响使用之前独立的旧命令安装的规则集。
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#assembly_migrating-from-iptables-to-nftables_getting-started-with-nftables}从 iptables 迁移到 nftables {.title}
:::
如果您的防火墙配置仍然使用 `iptables`{.literal} 规则，您可以将
`iptables`{.literal} 规则迁移到 `nftables`{.literal}。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#when-to-use-firewalld-nftables-or-iptables_assembly_migrating-from-iptables-to-nftables}使用 firewalld、nftables 或者 iptables 时 {.title}
:::
以下是您应该使用以下工具之一的概述：
::: itemizedlist
-   `firewalld`{.literal} ：将 `firewalld`{.literal}
    工具用于简单的防火墙用例。此工具易于使用，并涵盖了这些场景的典型用例。
-   `nftables`{.literal} ：使用 `nftables`{.literal}
    工具来设置复杂和性能关键的防火墙，如整个网络。
-   `iptables`{.literal} ：Red Hat Enterprise Linux 上的
    `iptables`{.literal} 工具使用 `nf_tables`{.literal} 内核 API 而不是
    `传统的`{.literal} 后端。The `nf_tables`{.literal} API
    提供向后兼容性，因此使用 `iptables`{.literal} 命令的脚本仍可在 Red
    Hat Enterprise Linux 上工作。对于新的防火墙脚本，红帽建议使用
    `nftables`{.literal}。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
要避免不同的防火墙服务相互影响，在 RHEL
主机中只有一个服务，并禁用其他服务。
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#converting-iptables-rules-to-nftables-rules_assembly_migrating-from-iptables-to-nftables}将 iptables 规则转换为 nftables 规则 {.title}
:::
Red Hat Enterprise Linux 提供了 `iptables-translate`{.literal} 和
`ip6tables-translate`{.literal} 工具，可以将现有的 `iptables`{.literal}
或 `ip6tables`{.literal} 规则转换为 `nftables`{.literal} 的等效规则。
请注意，一些扩展可能缺少响应的转换支持。如果存在这样的扩展，工具会打印以
`#`{.literal} 符号为前缀的未转换的规则。例如：
``` screen
# iptables-translate -A INPUT -j CHECKSUM --checksum-fill
nft # -A INPUT -j CHECKSUM --checksum-fill
```
此外，用户可以使用 `iptables-restore-translate`{.literal} 和
`ip6tables-restore-translate`{.literal}
工具来转换规则的转储。请注意，在此之前，用户可以使用
`iptables-save`{.literal} 或 `ip6tables-save`{.literal}
命令来打印当前规则的转储。例如：
``` screen
# iptables-save >/tmp/iptables.dump
# iptables-restore-translate -f /tmp/iptables.dump
# Translated by iptables-restore-translate v1.8.0 on Wed Oct 17 17:00:13 2018
add table ip nat
...
```
如需更多信息，以及可能的选项和值列表，请输入
`iptables-translate --help`{.literal} 命令。
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#ref_comparison-of-common-iptables-and-nftables-commands_assembly_migrating-from-iptables-to-nftables}常见的 iptables 和 nftables 命令的比较 {.title}
:::
以下是常见的 `iptables`{.literal} 和 `nftables`{.literal} 命令的比较：
::: itemizedlist
-   列出所有规则：
    ::: informaltable
      iptables                    nftables
      --------------------------- ------------------------------
      `iptables-save`{.literal}   `nft list ruleset`{.literal}
    :::
-   列出某个表和链：
    ::: informaltable
      iptables                                    nftables
      ------------------------------------------- ----------------------------------------------
      `iptables -L`{.literal}                     `nft list table ip filter`{.literal}
      `iptables -L INPUT`{.literal}               `nft list chain ip filter INPUT`{.literal}
      `iptables -t nat -L PREROUTING`{.literal}   `nft list chain ip nat PREROUTING`{.literal}
    :::
    `nft`{.literal}
    命令不会预先创建表和链。只有当用户手动创建它们时它们才会存在。
    ::: title
    **示例：列出 firewalld 生成的规则**
    :::
    ``` literallayout
    # nft list table inet firewalld
    # nft list table ip firewalld
    # nft list table ip6 firewalld
    ```
:::
:::
:::
::: section
::: titlepage
# []{#getting-started-with-nftables_securing-networks.html#writing-and-executing-nftables-scripts_getting-started-with-nftables}编写和执行 nftables 脚本 {.title}
:::
`nftables`{.literal}
框架提供了一个原生脚本环境，与使用shell脚本来维护防火墙规则相比，它带来了一个主要好处：执行脚本是原子的。这意味着，系统会应用整个脚本，或者在出现错误时防止执行。这样可保证防火墙始终处于一致状态。
另外，`nftables`{.literal} 脚本环境使管理员能够：
::: itemizedlist
-   添加评论
-   定义变量
-   包含其他规则集文件
:::
本节介绍了如何使用这些功能，以及如何创建和执行 `nftables`{.literal}
脚本。
安装 `nftables`{.literal} 软件包时，Red Hat Enterprise Linux 会在
`/etc/nftables/`{.literal} 目录中自动创建 `*.nft`{.literal}
脚本。这些脚本包含为不同目的创建表和空链的命令。
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#supported-nftables-script-formats_writing-and-executing-nftables-scripts}支持的 nftables 脚本格式 {.title}
:::
`nftables`{.literal} 脚本环境支持以下格式的脚本：
::: itemizedlist
-   您可以以与 `nft list ruleset`{.literal}
    命令相同的格式来编写脚本，显示规则集：
    ``` literallayout
    #!/usr/sbin/nft -f
    # Flush the rule set
    flush ruleset
    table inet example_table {
      chain example_chain {
        # Chain for incoming packets that drops all packets that
        # are not explicitly allowed by any rule in this chain
        type filter hook input priority 0; policy drop;
        # Accept connections to port 22 (ssh)
        tcp dport ssh accept
      }
    }
    ```
-   你可以对命令使用与 `nft`{.literal} 命令相同的语法：
    ``` literallayout
    #!/usr/sbin/nft -f
    # Flush the rule set
    flush ruleset
    # Create a table
    add table inet example_table
    # Create a chain for incoming packets that drops all packets
    # that are not explicitly allowed by any rule in this chain
    add chain inet example_table example_chain { type filter hook input priority 0 ; policy drop ; }
    # Add a rule that accepts connections to port 22 (ssh)
    add rule inet example_table example_chain tcp dport ssh accept
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-nftables_securing-networks.html#running-nftables-scripts_writing-and-executing-nftables-scripts}运行 nftables 脚本 {.title}
:::
您可以通过将其传给 `nft`{.literal} 工具或直接执行脚本来运行
`nftables`{.literal} 脚本。
::: itemizedlist
**先决条件**
-   本节的流程假设您在 `/etc/nftables/example_firewall.nft`{.literal}
    文件中存储了 `nftables`{.literal} 脚本。
:::
::: itemizedlist
**流程**
-   要通过将其传给 `nft`{.literal} 工具来运行 `nftables`{.literal}
    脚本，请输入：
    ``` literallayout
    # nft -f /etc/nftables/example_firewall.nft
    ```
-   要直接运行 `nftables`{.literal} 脚本：
    ::: orderedlist
    1.  只需要执行一次的步骤：
        ::: orderedlist
        1.  确保脚本以以下 shebang 序列开头：
            ``` literallayout
            #!/usr/sbin/nft -f
            ```
            ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 重要 {.title}
            如果省略了 `-f`{.literal} 参数，`nft`{.literal}
            工具不会读取脚本，并显示：
            `Error: syntax error, unexpected newline, expecting string`{.literal}。
            :::
        2.  可选：将脚本的所有者设为 `root`{.literal} ：
            ``` literallayout
            # chown root /etc/nftables/example_firewall.nft
            ```
        3.  使脚本可以被其所有者执行：
            ``` literallayout
            # chmod u+x /etc/nftables/example_firewall.nft
            ```
        :::
    2.  运行脚本：
        ``` literallayout
        # /etc/nftables/example_firewall.nft
        ```
        如果没有输出结果，系统将成功执行该脚本。
    :::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
即使 `nft`{.literal}
成功执行了脚本，在脚本中错误放置的规则、缺少参数或其他问题都可能导致防火墙的行为不符合预期。
:::