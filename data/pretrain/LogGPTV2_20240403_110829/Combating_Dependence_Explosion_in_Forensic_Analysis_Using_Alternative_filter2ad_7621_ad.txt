released [3] by DARPA, while the rest may be available on request.
In its choice of attacks, the red team was guided by what they
considered were emerging stealthy APT techniques. But they were
less concerned about data completeness. For instance, audit data
collection typically began long after many background services
had been started. As a result, they were unable to track provenance
through such services. Moreover, some of the red team attacks
relied on rootkits or malicious kernel modules that had been present
on the victim system prior to audit data collection. We believe that
similar gaps are unavoidable in real-world systems, and hence the
red team data enables a realistic evaluation that wouldn’t have been
possible, had we created the data on our own.
Data from DARPA TC Engagement 3
In our evaluation, we used the datasets from the TRACE and
CADETS teams in the DARPA TC program [3]. TRACE data,
henceforth called L-3 dataset, is derived from Linux audit data.
CADETS data, called F-3 dataset, is derived from FreeBSD DTrace
[4] data. More details about these datasets is shown in Table IV.
According to the ground truth provided, there were four attacks
that (mostly) succeeded in L-3, plus several failed attempts. There
were five attacks in F-3, of which four were repetitions of the same
attack. The last attack, which also appeared in L-3, is a web-site
password stealing attack that lures the user to a phishing web site.
There are no subsequent effects on the victim’s machine or network.
As a result, this attack is not visible in the system-call audit data,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
1146
S:scp -t ./ccleanerO:~/ccleanerCRTWRS:./ccleanerLDEXES:scp -r /home/admin/* PI:EMAIL:./backup/RDSUCLNO:~/8675309O:~/883929418855.tmpCRTWRRMO:~/9006492568O:~/883929418855.tknO:~/024543832898O:~/2124894608CRTWRS:dbus-launch --autolaunch 67c5ab56bd0c88de0302473d5bb380e2 --binary-syntax --close-stderrCLNO:~/8675309.tknWRCRTRDRDO:/var/lib/dbus/machine-idRDO:PipeRDRDWRSUCLNS://bin/dbus-daemon --fork --print-pid 5 --print-address 7 --sessionCLNO:/sys/devices/system/cpu/onlineRDO:/etc/drircRDO:/home/admin/*RDO:/usr/bin/dbus-launchEXERDO:/etc/passwdRDO:PipeRDWRSUO:/bin/dbus-daemonEXEO:/usr/share/dbus-1/services/org.xfce.FileManager.serviceRDData- Duration
set
(hh:mm)
# of
events
L-3
263:05
714 M
F-3
263:28
21 M
L-4
15:28
36.5 M
F-4
11:53
37.2 M
Short attack
name
Firefox
backdoor
Browser
extension
Executable
attachment
Malicious
HTTP request
User-level
rootkit
CCleaner
ransomware
Recon w/
Metasploit
Kernel
malware
Dropbear
Trojan
Recon w/
Rootkit
Attack name used in ground truth and short description of attack
Firefox backdoor w/ Drakon in-memory: Firefox is exploited by a malicious web site to execute
an in-memory payload. This provides a remote console for the attacker (Fig. 7).
Browser extension w/ Drakon dropper: Exploit the victim system using a preexisting malicious
Firefox browser extension, drop and execute a malicious file on disk (Fig. 12).
Phishing e-mail w/ executable attachment: A malicious executable file was sent as an email-
attachment, which, after opening, established a connection to the attacker’s machine.
Nginx backdoor w/ Drakon in-memory (4 instances): Attacker exploits Nginx server using
a malicious HTTP request. Nginx then downloads and executes several malicious files (Fig. 8).
Azazel: Using a preexisting user-level rootkit, the attacker connected to the system
using a remote shell and ran reconnaissance commands. (Fig. 13)
VNC attack: Motivating example discussed in Section II (Fig. 3).
Metasploit: Malware was downloaded and executed using Metasploit, giving the attacker
remote access. Attacker ran various reconnaissance commands using this capability (Fig. 9).
Firefox Drakon: In-memory exploit works with a preexisting malicious kernel module for
privilege escalation. This allowed the attacker to compromise the sshd server (Fig. 10).
Dropbear SSH: Using a pre-installed Trojan ssh server, the attacker logged into the victim,
ran multiple reconnaissance commands and exfiltrated the results.
Micro APT: The attacker uploaded two rootkits using scp to the target systems separately,
executed them, gained root privilege and ran multiple recon commands (Fig. 11).
Table IV: Attacks contained in our datasets. L-3 and F-3 are from the 3rd DARPA TC red team engagement, while L-4 and F-4 are from the 4th engagement.
)
s
e
d
o
n
f
o
r
e
b
m
u
n
(
E
Z
I
S
H
P
A
R
G
105
104
103
102
101
13,100
6,500
21,700
Naive forward propagation
Using Tag Decay
59,967
3,100
2,300
3,600
1,988
315
470
288
334
24
44
95
39
11
11
14
15
Firefox
Backdoor
Browser
Extension
Executable
Attachment
User-Level
Rootkit
CCleaner
Ransomware
Recon w/
Metasploit
Kernel
Malware
Malicious
HTTP Req.
Dropbear
Trojan
Recon w/
Rootkit
Fig. 4: Reduction in scenario graph size achieved using tag attenuation and decay. The average size reduction is 35 times, and no relevant nodes were dropped.
which just shows the user visiting a web site — a perfectly normal
activity. So we have omitted this attack from our analysis, and
show only the remaining attacks in Table IV.
Data from DARPA TC Engagement 4
The L-4 and F-4 datasets shown in Table IV are from the 4th red
team engagements involving a pair of Ubuntu Linux and a pair of
FreeBSD systems that interact with each other. While the attacks
themselves were more stealthy than Engagement 3, and involved at-
tacks that spanned multiple hosts, the adversarial team chose to work
in a serial fashion, focusing on just a single operating system on
each day of the engagement. As a result, the datasets were shorter.
B. Effectiveness of Tag Attenuation and Decay
Parameter Selection. Our method is characterized by the rates of
attenuation and decay for benign and suspect environment subjects.
Values of these four parameters (ab, db, ae and de) can be chosen
based on a high-level understanding of how they affect alarms. For
instance, consider a benign subject s1 reads a file f1 with integrity
0.0 and writes to file f2, which is then read by another benign
subject s2 that then writes to f3, which, in turn, is read by a benign
s3 that then writes to f4. If we set ab = 0.2, then it is easy to see that
f2 and f3 will have low integrity (specifically, integrity of 0.2 and
0.4 respectively), but f4 will have a high integrity. In other words,
this choice of ab limits low integrity data from propagating beyond
two subject-to-object hops. This seems like a sensible choice: it is
extremely unlikely that one can craft malicious data f1 that will
first exploit a vulnerability in s1 to compromise it, and cause it
to produce another malicious file f2, which, in turn, exploits a
vulnerability in the second benign subject s2, causing it to produce
another malicious file f3 that in turn contains an exploit for s3. For
suspect environment subjects, we set ae = 0.1 to reflect the fact
that attackers have more control over suspect environment subjects.
We can use a similar process for choosing the decay rate
parameter db. When a benign subject consumes malicious input, it
usually takes a very short time for the exploit to succeed or fail, say,
50 to 200 milliseconds. Accordingly, we could set the half-life of db
to be a slightly above this threshold, at 0.25 seconds. Note that in this
context, half-life is the duration in which the difference between the
current data tag and its quiescent value will be halved. For instance,
if a benign subject starts with an integrity of 0.15, in 0.25 seconds
its integrity will increase to 0.45. (Recall that we use 0.75 as the qui-
escent data tag value for benign subjects.) For suspect environment
subjects, we use double this value, i.e., de = 0.5 seconds.
We validate the above analysis-driven selection of decay and
attenuation parameters using three sets of experiments below.
1147
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:08 UTC from IEEE Xplore.  Restrictions apply. 
FileExec
Dataset
L-3
L-4
F-3
F-4
Average
Base
479
53
19
38
Ours
1.31x
18.33x
1x
9.5x
3.89x
MemExec
Base
Ours
1.45M 13.96x
337K
16.73x
N/A
N/A
N/A
N/A
15.28x
ChPerm
Base
9
66
1.81K
1.82K
Ours
1.41x
22.45x
1.86x
2.65x
3.53x
Corrupt
Base
Ours
184K 10.53x
32K
13.68x
6.4K
1.91x
166K 16.85x
8.25x
CDL
Base
Ours
13.4K
40.36x
1.88K
15.95x
41.03K 94.19x
53.90K
4.84x
23.28x
Escalate
Base
959
211
113
243
Ours
1.54x
1.92x
21.98x
4.52x
4.14x
Total Alarms
Base
Ours
1.65M 11.54x
371K
16.45x
11.32x
49.4K
7.85x
222K
11.40x
Table V: Alarm reduction due to tag attenuation and decay, with ab = 0.2, db = 0.25, ae = 0.1, de = 0.5. The last two columns show the reduction across all alarm
types, while the others break it down by alarm type. “Base” columns show the alarms generated by SLEUTH [30], while “Ours” show the reduction achieved by MORSE.
TC Engagement 3 (L-3 and F-3)
TC Engagement 4 (L-4 and F-4)
a = 0