From what has been explained, it can be seen that the salt value and the original 
password have been integrated with one another to result in a password that meets 
the strong password criteria. The resultant password, p%as@sw&or0d3U+, can now be 
hashed and stored in the password database.
The process of salt generation and placement for this particular example is 
summarized in Figure 4-2.
86
Chapter 4 
 password-Based authentiCation
password
Salt Insertion: 
p%as@sw&or0d3U+
No special characters.
No numbers.
H(p%as@sw&or0d3U+)
Salt: %@&03U+
Hash Value Stored
Salt Placement 
Pattern: 10101010
Figure 4-2.  Example of Salt Generation and Placement Algorithm
 Is It Secure?
Now comes an important question. Does the dynamic salt generation and placement 
method, explained earlier, provide better security than the existing methods? In order to 
answer this question, a simple analysis can be given as follows.
Although a rainbow table is readily accessible, a hash value is visible, and a salt value 
is known to an attacker, the way that the salt value is inserted into the password is still 
unknown. Furthermore, each password is associated with a different salt value, based 
on its quality. The way the salt is inserted into each password is also different. Thus, 
compromising the password with the use of rainbow table has become much more 
difficult.
In addition, it is believed that even though the attacker gets hold of the source 
code, the salt placement pattern will still be unknown. This is because the pattern 
is determined by the original plaintext password. This implies that the only way the 
87
Chapter 4 
 password-Based authentiCation
attacker can find out the salt placement pattern is by knowing the original password, 
which is not stored anywhere. Thus, it is not possible for the attacker to figure out what 
the salt placement pattern is. Hence, the password should still be secure.
Further analysis on the security of the dynamic salt generation and placement has 
also been studied by comparing the attack tolerance between this method and the 
other existing password storage methods, including the no-salt or hash-only method, 
multiple-hash-iteration method, fixed salt method (the same salt and position are used 
for all passwords), and dynamic salt method (different salts concatenated to different 
passwords).
The analysis was done on 50 different passwords – 25 were weak and the other 25 
were stronger. Examples of the weaker passwords were 123456, password, and qwerty. 
On the other hand, the stronger passwords included Jul1eLovesK3v1n, ILov3MyPi@no,  
and Doct0rH0use. The password cracking tool called hashcat was used to try to 
compromise the passwords. It turned out that using the dynamic salt generation and 
placement method, explained previously, was the most secure since no attack was 
successfully carried out on any of the passwords, weak or strong. Comparing this with 
other password storage methods, the attack success rates were between 24 and 92%, 
depending on what the original password was.
On the whole, the dynamic salt generation and placement scheme for password 
storage is another method that should be in consideration when security is to be 
achieved in storing passwords.
 Grid-Based Passwords
Passwords do not only come in text, number, and special character formats. Due to the 
issues that traditional passwords have faced over the years, another variety of passwords 
has gained its popularity. This is known as a grid-based password, which simply means 
using components within a matrix as passwords. One common example is graphical 
passwords.
Graphical passwords basically use pictures within a given grid. Graphical password 
mechanisms have been designed as an alternative to traditional passwords. This is 
based on the fact that humans can remember pictures better than text. In the context of 
security, if the number of pictures used as passwords is sufficiently large, the password 
space can become larger than that of textual passwords. This can lead to a better 
resistance to brute-force attacks.
88
Chapter 4 
 password-Based authentiCation
Principally, a graphical password is an authentication mechanism that works by 
having users select a correct set of images, sometimes in a specific order, or by asking 
users to reproduce something that they have created earlier.
From this definition, and since graphical passwords are just an example of grid- 
based passwords, grid-based passwords can be divided into two categories. They are 
recognition-based and recall-based systems.
 Recognition-Based Systems
Recognition-based systems are also known as cognometric systems or searchmetric 
systems. They require that users memorize a set of images, text, or numbers during 
password creation or registration and then they must be able to identify their selected 
elements among others during the login stage.
The very first system in this category was produced in the year 2000 and is called the 
Deja Vu system, which works by asking the user to select a number of random images 
generated by the program. The user will then be asked to identify their preselected 
images in order to be authenticated. An example of the Deja Vu graphical password 
scheme can be seen in Figure 4-3.
My Password:
Figure 4-3.  Deja Vu System
89
Chapter 4 
 password-Based authentiCation
Let us get into the detail of Deja Vu. In the test system (originally done by the 
creator), a panel of 25 images was displayed, while the user must identify 5 images that 
matched their preselected ones. In theory, the password space or the number of all 
possible passwords for this 25-image panel can be calculated as 
æ
ç
è
N
M
ö
÷  for N images in a 
ø
panel and M images to be selected by the user. For example, in the Deja Vu test system, 
the password space is 
æ
ç
è
25
5
ö
÷ =
ø
53 130 216
,
»
, which was claimed by the creators to be 
resistant to dictionary attacks. One other advantage of this scheme is the resistance to 
social engineering attacks. This is because the images are generated randomly by the 
program, which makes it difficult for users to share with or even describe the images 
to others. However, there are a couple of obvious potential problems. The first is that 
the choices of the images could be predictable since users may select the images that 
include their favorite colors. The second is, of course, the risk of shoulder surfing where 
an attacker can observe and memorize the images selected by the users. As a result, 
many researchers have stepped away from this traditional recognition-based system to a 
position recognition-based system instead.
Position recognition-based systems have a similar setting to the traditional 
recognition-based systems in that users are still provided with a grid. However, with this 
type of recognition-based systems, users have to memorize the position of their chosen 
cells rather than the elements they have selected. One of the most famous examples of 
this type of system is PassLogic, which requires users to select a pattern in the grid of 
random numbers during the registration or password choosing phase. A typical process 
of creating a password is shown in Figure 4-4.
2
1
5
7
9
3
0
9
4
1
5
9
2
5
3
6
4
8
7
8
1
83
59
Registered or First Time Password: 20289
Figure 4-4.  A Typical Registration Stage of a Position Recognition-Based System
90
Chapter 4 
 password-Based authentiCation
Figure 4-4 shows that when a user is presented with a grid filled with random 
numbers, they select a number of cells of any pattern. In this case, a diagonal pattern is 
chosen, as displayed on the right-hand side of the figure. Therefore, for the registration 
purpose, the user’s password is created from the numbers lined in the selected pattern, 
which is 20289, in this particular example.
When the same user tries to log in, they are also presented with a grid of the same 
size, but with a different random number in each cell. As their login credential, the user 
simply enters the numbers following their unique cell positions or pattern in relation to 
the grid. Following on from the same example, the pattern will be the diagonal pattern, 
from the top left-hand corner to the bottom right-hand corner. This is illustrated in 
Figure 4-5.
9
5
0
1
0
3
4
2
5
3
6
2
6
7
4
8
1
8
2
5
0
7
9
3
8
Login or Second Time Password: 94628
Figure 4-5.  A Typical Login Stage of a Position Recognition-Based System
It can be seen that when logging in, the same user enters the numbers that lie in 
accordance with the registered pattern. In this particular example, the diagonal pattern 
is used. Therefore, the login password is 94628.
On the whole, the position recognition-based authentication system asks users to 
create a secret pattern by choosing a number of positions in a given grid of any size. 
When logging in, the users can create a password by simply following the same pattern 
or path. As long as the pattern remains unknown to other people, the authentication 
system is said to still be secure.
The position recognition-based system, as seen from its unique process, provides 
users with one major advantage, which can be explained as follows. Each time a grid is 
presented to the users, the numbers in the grid are changed. This means that whenever 
the users log in, their password changes every time. Hence, a one-time password or 
91
Chapter 4 
 password-Based authentiCation
OTP is generated using this authentication method, which makes it less likely that 
an adversary will be able to guess the actual password. Even though the position 
recognition-based authentication system appears to offer a certain level of security, it 
is appealing to study this type of mechanism in more detail, especially in the context of 
security.
 Security Analysis
With a grid-based authentication method, specifically the position recognition-based 
system, it is thought that its security depends on the size of the grid. In other words, 
a larger grid would provide more combinations of possible patterns or passwords. 
Therefore, it is less prone to a brute-force attack.
Let us examine the security of the position recognition-based system in more detail. 
The security is analyzed in two folds. The first is the examination of the number of 
possible cell selection combinations (at least eight cells), together with the number of 
possible numerical passwords from the selected eight cells. Numerical passwords are 
considered to make it consistent with the previous PassLogic example. This part of the 
analysis is called theoretical strength analysis. The second is the investigation of how 
users would actually choose their secret pattern in a given grid of various sizes. This part 
of the analysis is called the practical strength analysis.
From the preceding explanation, the strength or security of a grid is said to be 
depended on the number of possible combinations of numbers or positions. Therefore, 
the strength of a grid GridStrength can be computed from the following equation:
Grid
Strength
=
!
n
-(
r n r
!
) +
!
r
10
(4.1)
where n is the total number of cells in a grid,
r is the number of cells that users choose (at least eight), and
10r is the number of possible numerical combinations from the selected r cells.
Note that the numerical value within each cell is between 0 and 9, so there are ten 
possible numbers.
In order to illustrate the security of a grid, let us assume grid sizes of 30 cells, 60 
cells, 90 cells, 120 cells, 150 cells, and 180 cells. Let us first analyze the theoretical 
strength of the grid of those sizes, with an assumption that the number of cells that a 
92
Chapter 4 
 password-Based authentiCation
user selects is eight (as eight is the recommended length of a traditional password). 
Using Equation 4.1, it is possible to quantitatively show the theoretical strength of a 
grid of each size as follows.
Table 4-4 shows that the strength or security of a grid increases as the grid gets larger. 
This represents the fact that larger grids can withstand a brute-force attack than smaller 
ones, in theory.
Table 4-4.  Theoretical Strength of Each Grid to Withstand Brute Force
Grid Size
Strength
(Number of Cells)
(Number of Possible Combinations)
30
60
90
120
150
180
5, 852, 925 + 108
2, 558, 620, 845 + 108