Fuzzit: A Mobile Fuzzing Tool 
Kevin Mahaffey  
John Hering 
Anthony Lineberry 
Flexilis – http://www.flexilis.com 
Introduction to Fuzzit 
Fuzzit is a tool designed to find vulnerabilities in mobile devices.  It implements a testing technique that 
most readers will be familiar with called fuzzing.  In short, fuzzing aims to trigger software faults by 
automatically‐generating and injecting unusual, unexpected, or out‐of‐specification input into a system.  
Such input typically includes malformed data structures/formats in both expected and unexpected 
system states.  In a fuzzing system, there are four major components that contribute its overall 
effectiveness: a generation system, a state management system, an injection system, and a result 
analysis system.  As we will discuss below, Fuzzit  was written from the ground up to address the 
problems faced when auditing mobile devices and mobile‐specific protocols. 
Why did we need to write something new? 
Although currently available fuzzers are fine for most uses, we believe that mobile is a unique enough 
problem domain that existing tools would require significant changes to address the problems we face 
in fuzzing mobile devices.  We also wanted to share a few fuzzing techniques that we've found to be 
successful over the years. 
Fuzzit is built to address the problems with fuzzing mobile devices. 
Most importantly, the attack surface of a mobile device has significantly more breadth than that of a 
typical PC or server.  We cannot solely focus on protocols that are borne over the TCP/IP, as mobile 
devices implement additional protocol stacks such as Bluetooth, WAP, and NFC.  A mobile fuzzing 
system must be flexible enough to support not only the generation of data for various protocols and file 
formats, but also the state management and injection requirements for those protocols and files.   
Fuzzit is designed with a generic core that performs functionality common to various protocols and file 
formats. The framework is designed to prefer configuration over customization.  For example, when 
generating integers as part of a file type or format, Fuzzit uses an IntElement.  By default, an instance of 
IntElement generates a 1‐byte unsigned integer.  If a 3 byte little‐endian integer was needed to fuzz a 
given protocol, instead of building a new element (e.g. LE32IntElement) you can simply configure an 
IntElement to act as desired by sending has_length(3) and has_endianness(:little) to it.  To minimize 
configuration, the framework uses intelligent defaults wherever possible.  The default IntElement (1 
byte) will generate fuzz values that match the configuration of that element ("\x00", "\xff", "\x7f", 
"\x80", etc.).  The 3‐byte little‐endian integer element by default will generate fuzz values that match its 
configuration ("\x00\x00\x00", "\xff\xff\xff", "\xff\xff\x7f", "\x00\x00\x80", etc.).    
Fuzzing wireless protocol stacks such as Bluetooth, WAP, NFC, and Wi‐Fi is usually best performed in 
communication with physical hardware, rather than a simulated or emulated environment. This means 
that Fuzzit must be able to interface with a radio to communicate with the device under test.  The Fuzzit 
generation system makes no assumptions about radio‐specific injection, state management, or result 
analysis systems.  The generation system can simply be asked to create PDUs (protocol data units) that 
use supplied session or connection context information (e.g. dynamic channel numbers, sequence 
identifiers, port numbers).  Furthermore, the generation system is built to generate and parse "good" 
PDUs for use in setup, teardown, and state management from the same data structure definitions used 
to generate fuzzed PDUs.  More on the re‐use of data structure definitions is discussed below.  
When fuzzing wireless protocols on mobile devices, we often have no access or limited access to the 
device under test.  In order to adequately categorize the results from a fuzzer's test case, we must either 
be able analyze data returned from a device or perform additional checks on the device (e.g. ping, 
current state determination) to decide if any sort of fault occurred.  Needless to say, this process is a lot 
more complicated than attaching a debugger to a local process.  Fuzzit is designed to allow easy 
implementation of arbitrary result analysis systems without requiring modification to the fuzzer's other 
systems.  This modularity promotes the building generic result analysis systems that can be used to fuzz 
many different types of software on a given platform or many different types of platforms implementing 
a given protocol (e.g. a gdbserver‐based result analysis system for Android devices, a Bluetooth 
disconnection reason analysis tool for use on multiple platforms). 
To fuzz protocols and file formats that cannot be accessed remotely or are difficult to adequately access 
remotely, we need programmatic access to a device.  Specifically, we need an agent on the device that 
can implement injection and result reporting.  Because no single agent can run on all mobile platforms, 
we need multiple agents with a common interface to the fuzzer's host so that we can maximally re‐use 
code between platforms.  Fuzzit supplies an agent communication protocol that allows a host to send 
test cases against one or more physical or emulated devices simultaneously.   
Each mobile platform tends to have peculiarities that require customizations for a fuzzing system to 
adequately target it.  For example, analyzing Bluetooth disconnection event reasons (e.g. baseband 
timeout, remote radio explicitly closed connection) that reliably identify software faults on one platform 
often provides no insight on another.  In developing earlier fuzzers that have targeted mobile devices, 
we've had to change substantial amounts of code to accommodate for peculiarities of one system or 
another because of assumptions that were baked in from the start.  Fuzzit is written to be loosely 
coupled so that we can isolate changes required for a specific platform to only those components that 
are affected by the peculiarities. That way, the core components do not assume behavior of a specific 
device and remain unchanged. 
Perhaps most relevant to someone performing a security audit, mobile protocols are evil.  Under the 
banner of maximizing efficiency, robustness, and flexibility, such protocols liberally add complexity.  
Mobile protocols often use complex data structures, curious encoding methods, and well‐arrowed state 
graphs.  In order to be able to create a fuzzer in a timely manner, a generation system for mobile 
protocols must be VERY flexible and allow a large amount of customization on a per‐protocol basis 
without significant amounts of new code.  Fuzzit is written to allow pre‐defined functionality to be 
extended dynamically without having to write new core elements.  For example, if a protocol serialized 
an arbitrary length integer by reserving the most significant bit of each byte as a continuation field, 
IntElement could generate this field by being sent the following: 
encodes_with do |instance, value, context|  
  out = "" 
  i = 0 
  while (value>>(7*i)) > 0 do 
    out>(7*i) & 0x7f) | (i == 0 ? 0 : 0x80)) 
    i += 1 
  end 
  out.reverse1 
end 
Mobile protocols also make frequent use of non‐octet aligned fields, requiring the generation system to 
be able to fuzz bitwise elements. Fuzzit implements bitwise support by allowing elements to declare that 
they represent an arbitrary number of bits.  Serialization to a byte stream is taken care of by a BitBlock 
which can be extended to support arbitrary bit/byte ordering conventions. 
It is important to note that having a strong generation system can tempt the author of a fuzzer to err on 
the side of implementing a given protocol rather than building a tool to break it.  Fuzzit cannot supplant 
creative insight into how to break software.  When implementing a fuzzer with Fuzzit, one must take 
care to include fuzzed values that break the structure of a protocol in addition to fuzzing invalid values in 
a valid structure.  For example, in the above example of an arbitrarily length integer field, the exemplary 
encoder does not allow the creation of a field with no final byte.  Because Fuzzit allows custom encoders 
as well as custom fuzzed values, a value for a particular element may be defined so as to include 
arbitrary encoder parameters.  An example value might be [0xdecaf, :no_terminator] with the 
encoder defined so as to respond to the :no_terminator parameter appropriately. 
What else is new? 
Besides addressing the major issues we've found with fuzzing mobile devices, Fuzzit implements a few 
other fuzzing concepts that we've found to be successful over the years.  Even though Fuzzit has been 
built for mobile, we believe it to be an excellent general purpose fuzzer as well. 
In fuzzing, and testing in general, there is a tradeoff between time required to run a suite of tests and 
the depth of conditions tested.  The depth of conditions has two degrees of freedom.  First, the author 
of a fuzzer may choose how many different variations a given element (e.g. integer, string, length field) 
has.  The number of variations is fairly straightforward, as most fuzzers simply define a corpus of known 
integers, strings, etc. that are likely to cause errors.  Second, the fuzzing framework must choose which 
variation of each element in a data structure to test in each test case.  One approach is to build a set of 
test cases by specifying a known good PDU or file that fuzzes one element at a time in each test case.  In 
the case of fuzzing an HTTP GET request, this could mean taking a valid request and manipulating a 
single delimiter or string at a time in each test case.  This approach has the advantage of a small number 
of test cases for each test definition, but is likely not to find bugs that rely on two or more invalid inputs.  
Another approach is to use a Cartesian product, where a test case for all possible combinations of 
element variations is generated.  This approach has the advantage of covering a wide range of the input 
space, but, when fuzzing a complex data structure that has many elements needing to be fuzzed, the 
1 Ruby automatically returns the result of the last evaluation from a method, so an explicit return is unnecessary. 
number of test cases is likely to explode.  Fuzzit takes a hybrid of these two approaches by iteratively 
testing an increasing number elements being fuzzed at a time, with all other elements taking expected 
(i.e. good) values.  It first tests one element being fuzzed at a time, then two, three, etc.  The assertion 
here is that there are diminishing returns as more elements fuzzed simultaneously.  This combinatorial 