CHAPTER 1.
INTRODUCTION
control to deﬁne access. A common approach is to use the content of a XML
document itself in access control rules to deﬁne access. An XML document
consists of elements that are organized in a tree structure. These elements
have a name and can optionally have text content and attributes that further
specify the element.
We can use the tree structure of the XML documents to deﬁne subtrees
which are allowed or denied to access. Consider a set of equally structured
XML documents, which have a root element Patent application. This root
element has two children elements, namely Description and Main part.
The ﬁrst element contains a public description of the patent application,
whereas the second elements contains the conﬁdential content of the patent
application. Both elements can have children elements themselves, which
contain the actual content of these parts. In this example, we could allow
access to the subtree starting at the element Description and deny access to
the subtree of Main part. In addition to this, we can specify objects more
precisely if we also use attribute values in conditions.
In addition to the
previous example, assume that the Patent application has an attribute
granted, which is either set to true or false.
If the attribute is set to
true, the patent application is granted and no longer conﬁdential, otherwise
it is not granted and still conﬁdential. Next, we can formulate access control
rules that use attribute values. Thus, we can now specify that access to
the main part of a patent application is only denied when the corresponding
attribute granted is set to false. In this example, we raise usability since,
we remove the unnecessary restriction that granted patent application cannot
be accessed.
Summing up, the content of an XML document is a very useful aspect
to be used in access control rules. As a consequence, many approaches
[BF02, DdVPS02, MTK03, GB02] deﬁne access to parts of XML document
depending on the content of the document itself, e.g., attribute values, tag
names or text content. Although the approach of using the content allows
to express complex conditions on the content of an XML document, certain
policies cannot be expressed. This regards all policies that depend on infor-
mation which is not contained in the XML document. This information is
referred to as context information and is used to describe the situation or
the document parts more precisely. Common types of context information
are location and time, e.g., in [BGBJ05] access can be deﬁned depending on
time, the model described in [BCDP05] allows to deﬁne access depending on
location, whereas [Han07] considers both time, location and additional ap-
sects. With that information access to certain documents can be restricted
to speciﬁc locations or speciﬁc times, e.g., sensitive documents can only be
accessed within the company building and within the oﬃce hours. Besides
1.1. MOTIVATION
7
time and location there are many other kinds context information, e.g., the
team to which the current user [Tho97] belongs or the situation [BEE07],
which is deﬁned by properties of the network connection and the proximity
of other detectable devices. Many, kinds of context information require sen-
sor hardware to capture the context information. For example, the location
of human users can be measured using the Global Positioning System [PS96]
and nearby persons can be detected with cameras and image recognition.
All the context information described above helps to characterize the
situation of the access or the accessed object more precisely. These char-
acteristics can be used in access control rules to deﬁne more precisely what
is allowed and denied. Some of this context information is more useful and
other context information can be less useful for security or usability. For
example, the room temperature, which is a speciﬁc context information, is
not relevant for most of the scenarios.
However, there is another type of context information that can be very
helpful for both security and usability. We think that the information about
how a document was created is very useful for access control, because the way
how the content was created can contain many important aspects, which can
be used in access control rules. We refer to all information concerning how a
document was created as the history. We will give two motivating examples
of aspects of the history, which can be important for access control.
Reconsider the example with the patent application from above. There,
we used the location of a document part within a document to deﬁne access
to it. In todays business world the concept of reusing existing information
is very important, because it is ineﬃcient to recreate document parts that
have been already created elsewhere. Therefore, document parts are copied
between diﬀerent documents. As a consequence, in addition to the current
location of a document part, it is also very helpful to know from where it
was copied, in case it was not created from scratch. For example, assume
that a part of the main part of the patent application is copied to another
document. In that case, the current location of that copied document part is
not so relevant, but it is very important to know from where it was copied. It
would be very useful to deﬁne an access control rule that states “deny access
to all document parts that are copied from the main part of a pending patent
application”.
The history can contain many useful aspects that help to specify ob-
jects in access control rules. Another such aspect is the knowledge of who
has created a speciﬁc document part. In addition to the knowledge which
individual person has created a speciﬁc part, it can be helpful to know in
which job function the subject was active in. This knowledge helps to fur-
ther characterize a document part. In some cases, it might not be relevant
8
CHAPTER 1.
INTRODUCTION
where a speciﬁc document part is located, but by whom it was created or
modiﬁed. For example, assume that some documents are created by subjects
with diﬀerently ranked job positions, e.g, junior researcher and senior
researcher. In this example, junior researchers develop suggestions and se-
nior researchers make the ﬁnal modiﬁcations. In this example, it is required
that after a senior researcher has modiﬁed a part of a document, the junior
researches must be denied to make further modiﬁcations. Similar processes
occur in many scenarios, where subjects in a higher job position have the
authority to declare something as ﬁnal.
Above, we illustrated that history information is important and helpful
for access control. In addition to the content of a document, the information
how this content was created helps to determine its protection requirements
and ﬁnally to deﬁne access to it. To the authors knowledge there is no model
aiming at history-based access control. Therefore, the goal of this thesis is
to develop such a model. Due to the wide usage and importance of XML, we
will develop a model for history based access control for XML documents.
Within this thesis, we will also discuss which parts of the history must be
considered and how they can be used within access control.
1.2 Structure of this Thesis
The remainder of this thesis is organized as follows: In Chapter 2, we pro-
vide background information about three technologies used in this thesis.
The ﬁrst of these technologies is access control, which is the main topic of
this thesis. We explain the basic concepts of access control and give an
overview of common models for access control. The second technology is the
extensible markup language (XML), which is the format of the documents
on that we focus in this thesis. We present details about XML itself as well
as information on related technologies. The third technology is about the
concepts deﬁned by the Trusted Computing Group, which we use as a part
of our security architecture. In Chapter 3, we present a scenario to illustrate
several challenges for an access control model for XML documents. Next,
we extract several individual requirements for our access control model from
these challenges. After this, we describe our model for access control for XML
documents that we have developed based on the requirements in Chapter 4.
Since, we have speciﬁed our model on an abstract level, we must design a
system architecture that supports our model in Chapter 5 to apply the model
in a real world scenario. In Chapter 6, we ﬁrst perform a risk analysis for our
previously deﬁned architecture and then describe security mechanisms that
reduce that kind of risks. After this, we give details on the implementation of
1.2. STRUCTURE OF THIS THESIS
9
our system architecture in Chapter 7. We use this prototype to demonstrate
feasibility of our approach. Moreover, we present the result of a performance
evaluation of the implementation. Next, we present related work in three
diﬀerent areas in Chapter 8. We explain previous work on access control,
on enforcement mechanisms and on integrity reporting. Finally, we conclude
and point out future work in Chapter 9.
10
CHAPTER 1.
INTRODUCTION
Chapter 2
Background
In this chapter, we provide background information for the technologies used
in this thesis. In Section 2.1, we give an introduction to access control and
present some common models which are helpful to understand our model
presented in Chapter 4. Next, in Section 2.2, we give details to the Extensible
Markup Language (XML), which we use to represent the documents and the
corresponding metadata of our model in Chapter 4. We present information
to the XML Path Language (XPath) in Section 2.2.5, which is the language to
deﬁne the applicable objects of the access control rules of our model. Finally,
in Section 2.3, we present details on the mechanisms deﬁned by the Trusted
Computing Group (TCG), which we use as part of our security architecture
in Chapter 6.
2.1 Access Control
In this section, we give an introduction to access control. For this purpose
we ﬁrst explain access control in general and then we continue with the
description of some common models for access control.
The purpose of access control is to limit the actions or operations
that a legitimate user of a computer system can perform. [SS94]
Subjects are the more general concept of users to describe the active
components of a system. A subject can either be a human user, a process
that acts own behalf of a human user or an autonomous process acting on its
on behalf, e.g., a software agent or a maintenance process of the operating
system.
Subject perform their operations on objects, which are the passive com-
ponents of a system and can be any kind of resource of the system, e.g., a ﬁle,
11
12
CHAPTER 2. BACKGROUND
a network socket, a data base entry or a variable in a program. Objects can
be modeled in diﬀerent granularities. This granularity deﬁnes what is the
smallest data unit an object can represent. For example, if a directory is the
smallest unit an object can represent, we regard that as a coarse granularity.
In contrast to this, if parts of ﬁles are treated as the objects of the system,
we call this a ﬁne granularity.
Depending on the kind of objects, there can be diﬀerent modes of access.
A mode describes what kind of access is performed. Common modes of
access are read, write and execute. But if the object is a variable in a
program, possible access modes can be update, decrement or increment. In
many systems, access modes are also referred to as operations or as access
attributes.
Independent of the way subjects, objects and access modes are modeled,
access can be deﬁned in three diﬀerent ways. One option is to deﬁne what
is allowed and to assume that access to not speciﬁed objects is denied. This
concept is referred to as having positive permissions. The next option is to
deﬁne what is denied and assume that the not speciﬁed objects are allowed
to be accessed, which is referred to as having negative permissions. The third
option is to combine both concepts and deﬁne both what is allowed and what
is denied. Conﬂicts can occur if a speciﬁc access is both allowed and denied.
To solve this problem, a conﬂict resolution strategy must be deﬁned. The
simplest of such strategies is to deﬁne that either deny overrides allow or vice
versa. More complicated strategies use priorities to deﬁne which statement
takes precedence.
Moreover, there are two diﬀerent overall strategies for access control mod-
els in which way access is deﬁned. The ﬁrst strategy is Discretionary Access
Control (DAC), which is deﬁned by the Trusted Computer System Evaluation
Criteria (TCSEC) [Uni85] as follows:
A means of restricting access to objects based on the identity of
subjects and/or groups to which they belong. The controls are
discretionary in the sense that a subject with a certain access
permission is capable of passing that permission (perhaps indi-
rectly) on to any other subject (unless restrained by mandatory
access control).
Systems or models that use DAC have in common that permissions are
deﬁned for individual objects and individual subjects. The deﬁnition is usu-
ally performed manually. In most cases, the owner of an object deﬁnes these
permissions. In most cases, the owner is the subject that has created the
corresponding object. As a consequence there is only one owner. The owner
2.1. ACCESS CONTROL
13
also deﬁnes permissions of other subjects on his objects.
In [Uni85], the
concept of an owner is not mentioned. Therefore, DAC does not necessarily
imply that permissions are deﬁned by the owner of an object. Although,
most DAC system do so. This is why the term DAC and the owner concept
are often used synonymously.
Systems based on DAC have the disadvantage that permissions are not
necessarily deﬁned in a systematical way. Each subject may apply its own
strategy and it is in the responsibility of that subject that these permissions
are set up correctly, which means that only subjects which are supposed
to access an object actually have the permissions to do so. While DAC is
convenient in scenarios, where users manage objects, for which they are the
only person that is responsible, e.g., a user managing his private ﬁles on
his home computer or a self-employed individual editing his own business
documents.
In scenarios, where users manage objects on which they are
legally restricted in their usage, e.g., employees of a an enterprise handling
conﬁdential enterprise documents, DAC is not an appropriate choice.
In
these scenarios, it is more advisable to use MAC, which we describe next.
The opposed strategy to DAC is MAC, which is short for Mandatory
Access Control . MAC is deﬁned in [Uni85] as follows:
A means of restricting access to objects based on the sensitivity
(as represented by a label) of the information contained in the
objects and the formal authorization (i.e., clearance) of subjects
to access information of such sensitivity.
In systems using MAC, permissions are derived from the properties of
an object with the use of rules. These properties can be represented by a
label that is attached as meta data to the object or they can be properties of
the object itself, i.e., its content. Subjects are treated in the same manner.
Instead of deﬁning or deriving permissions for individual subjects, subjects
are grouped by their properties, e.g., by their clearance or by their function
within the organization. It depends on the system whether the subjects still
have limited options to deﬁne permissions. Im some models, the least restric-
tive permissions are deﬁned automatically by the system and the subject has
the choice to make permissions more restrictive.
Next, we continue with the description of some common models for access
control. We start with the most basic and oldest model, which is the access
matrix model [Lam71, GD72]. This model is also a a basis for the model
described in Section 2.1.3.
14
CHAPTER 2. BACKGROUND
2.1.1 Access Matrix Model
In the Access Matrix model [Lam69, Lam71, GD72], access is deﬁned with
the help of a matrix. Since this matrix can change over time, we denote it
with the index t for a speciﬁc point in time as Mt. The objects Ot, for which
access should be deﬁned, deﬁne the columns of the matrix. Analogously,
the subjects St deﬁne the rows of the matrix. The resulting matrix has the
dimensions |St| × |Ot|. Each entry of the matrix, denoted as Mt(s, o) =
{r1, . . . , rn}, deﬁnes the access rights of the subject s for the object o.
An example of such a matrix is illustrated in Figure 2.1. The illustrated
matrix deﬁnes the access rights of three users to four diﬀerent ﬁles. In this
case, User 1 is allowed to read ﬁles 1, 2 and 4 and to write ﬁle 1. User 2 is
allowed to read ﬁles 2 and 3 and to write ﬁle 3. Finally, User 3 is allowed
to read ﬁles 2, 3 and 4 and to write ﬁles 3 and 4.
File 1
File 2
File 3
File 4
read
User 1 write, read read
User 2
User 3
write, read read
read
write, read write, read
Figure 2.1: Example of an access matrix
There are two diﬀerent types of models using access matrices: Models
with a access matrix, where the matrix can change over time and models
with a matrix, where the initially deﬁned matrix does not change. In the
ﬁrst case, additional operations are used to modify the matrix. In [HRU76],
Harrison, Ruzzo and and Ullman deﬁne six primitive operations for that
purpose. The operation enter adds new rights, whereas delete removes
rights. The operations create subject and delete subject are used to
create and delete subjects. Similarly, the operations create object and
delete object are used to create and delete objects.
While the Access Matrix model is a simple model, it still oﬀers the possi-