Fig. 2: FraudDetective architecture: A workﬂow overview of dynamic Android app testing.
originates from actual user interactions, thereby addressing the
ﬁrst challenge. Each stack trace consists of executed callees
with their classes, denoting which class modules are responsible
for implementing each callee. Note that this stack trace helps
auditors pinpoint in-app modules that explicitly conduct ad
fraud, thereby addressing the second challenge.
FraudDetective is capable of supporting various user in-
teractions to increase its testing coverage. Unlike MAdFraud
and MAdLife, full stack traces untangle the testing strategy
with user interaction from ad fraud detection policies, thereby
addressing the third challenge. In response to the ﬁnal challenge,
FraudDetective uses actual Android mobile devices with a
modiﬁed AOSP image to minimize possible false negatives.
IV. FRAUDDETECTIVE OVERVIEW
FraudDetective is an automated dynamic testing framework
that (1) crawls Android apps from a given app market, (2)
schedules an analysis task that speciﬁes a list of apps to vet,
(3) executes apps in accordance with a speciﬁed testing strategy
on real mobile devices with a revised Android Open Source
Project (AOSP) framework, (4) collects tagged execution logs
via ADB Logcat [8], and (5) identiﬁes ad fraud activities from
the collected logs.
Figure 2 depicts the architecture of FraudDetective and
provides a workﬂow overview of identifying ad fraud cases. It
starts by crawling Android Package Kits (APKs) from Google
Play Store. We implement an APK crawler that harvests APKs
and writes them into the APK storage.
FraudDetective employs the Task Scheduler module with
a web administrator page. A FraudDetective user schedules
an analysis task via this web interface. This analysis task
speciﬁes a list of mobile apps stored in the APK storage
and a dynamic testing duration. Then, the Task Scheduler
dispatches a speciﬁed task to an available analysis worker in
which dynamic testing actually occurs. This producer-consumer
architecture is implemented via a message queue framework,
RabbitMQ, which distributes tasks among different hosts via
network channels.
An analysis worker refers to a host machine connected
to Android mobile devices or Android emulators. For each
connected mobile device or emulator, an analysis worker
instantiates a testing process that (1) fetches APKs in the
analysis task, (2) executes APKs and interacts with them via
generating user interactions, and (3) collects tagged execution
Logcat logs [8]. Note that each Android device runs a revised
AOSP, which leaves speciﬁed tags for ad fraud-related execution
logs. These marks play an important role in pruning unnecessary
logs for storage at the log database. The revised AOSP logic
leaves a tag when a target app invokes HTTP(S) outgoing
request APIs or Intents. Furthermore,
the revised AOSP
framework also leaves logs of actual parameter values and
stack traces, which enable FraudDetective to compute full
stack traces for observed suspicious behaviors. Each full stack
trace holds causality information, indicating whether a user
initiates each observed behavior. That is, this revised AOSP
plays the role of emitting Android internal information to an
analysis worker, which helps identify which user actions and
libraries have committed ad fraud.
FraudDetective supports analyzing apps in parallel
to
facilitate detection. The Task Scheduler is able to control
multiple analysis workers, and each worker is able to control
heterogeneous Android mobile devices. For the prototype of
FraudDetective, we used eight Android Pixel 2 devices.
Finally, the ad fraud detector module veriﬁes the stored
full stack traces for each task and reports identiﬁed ad fraud
activities as well as the in-app modules responsible for invoking
the identiﬁed fraud activities.
V. DESIGN
We deﬁne an ad fraud activity that FraudDetective aims
to detect (§V-A) and describe how FraudDetective computes
a full stack trace (F ST ) for each observed fraud activity,
a sequential list of multiple stack traces leading to the ad
fraud activity (§V-B). The section then describes how we
augmented an AOSP to compute such F ST s (§V-C) and how
FraudDetective precisely detects ad fraud, given an F ST and
its corresponding ad fraud activity (§V-D). Lastly, we describe
the testing policy employed by FraudDetective to trigger ad
fraud activities (§V-E).
A. Ad fraud activity
FraudDetective is designed to detect an ad fraud activity,
which is a sensitive Android API invocation with a param-
eter invoking ad fraud without
involving user interaction.
invocation of new URL(adClickUrl)
Consider
the
4
4. Collect logcatLogDBAd fraud ReportAd fraud Detect5. Detect ad fraudAppStoreAPKCrawlerAPKDB1. Crawl APKsInternetTouch RecordTouch RecordTouch Record…HTTP RecordHTTP RecordIntent Record…Web InterfaceTaskAnalysisWorker2. Schedule analysis taskAnalysisWorkerTask Scheduler…3. Execute target apps……APK Crawler…Pixel2DeviceAPK CrawlerTestingProcess #1APK FetcherLog CollectionApp EventGenerator…Sink method name
android.app.Activity.startActivity()
android.app.ContextImpl.startActivity()
android.app.Fragment.startActivity()
android.content.ContextWrapper.startActivity()
java.net.HttpURLConnection()
org.apache.http.client.methods.HttpRequestBase.setURI()
android.webkit.Webview.loadUrl()
android.webkit.Webview.reload()
android.webkit.Webview.goForward()
android.webkit.Webview.pageUp()
android.webkit.Webview.pageDown()
com.android.webview.chromium.
WebViewContentsClientAdapter.onLoadResource()
invoke ad fraud
TABLE I: Sensitive Android APIs that
activities.
.openConnection() triggered without user interaction.
Because it sends a click URL request
to an ad service
without explicit user interaction, FraudDetective considers this
invocation to be an ad fraud activity. Similarly, a non-user-
initiated invocation of the startActivity [7] API with
an Intent value that invokes other apps with URLs is also
considered to be an ad fraud activity.
To precisely detect ad fraud activities, it is crucial to check
for the existence of user interaction that causes the ad fraud
activities. For this, we designed FraudDetective to emit ad fraud
candidates for sensitive API invocations and to compute a full
stack trace (F ST ) for each candidate, which helps determine
the existence of user interaction.
Formally, an ad fraud candidate is an executed invocation
statement that calls one of the predeﬁned sensitive Android
APIs with an actual parameter indicating ad fraud. Note that
this candidate does not model whether a genuine user input
triggers this invocation. In this paper, we abbreviate an ad fraud
candidate and a conﬁrmed ad fraud activity as an F C and an
F , respectively.
By deﬁnition, the computation of an F C requires a list of
sensitive Android APIs and actual parameters for each API
invoking ad fraud. In this paper, we focus on identifying ad
fraud that involves transmissions of click URL requests and
invocations of other apps via cross-app Intents.
Sensitive Android APIs. Table I shows a list of 12 sensitive
Android APIs that FraudDetective monitors. Four of them
involve Android Intent invocations, while six of them instantiate
WebView instances. To compile the list, we investigated
Android API references [3], [4] as well as 15 mature apps
and checked which APIs have been used for sending click
URL HTTP(S) requests to ad services.
Argument patterns. FraudDetective requires the speciﬁcation
of the click URL patterns used in the invocations of the sensitive
Android APIs in Table I. We conducted a preliminary study to
generalize common click URL patterns. We ﬁrst searched for ad
SDKs of which SDK descriptions and source code are available
from the Internet, thereby collecting 20 ad SDKs. Among
them, we identiﬁed click URL patterns from the descriptions
of ﬁve ad SDKs, namely, Adjust, AppsFlyer, Kochava, Tune,
and LinkMine [2], [55]. For seven other ad SDKs, namely,
AppLovin [18], Facebook [35], Unity Ads [76], AdMob [40],
MoPub [60], TNKFactory [75], and Cauly [20], we integrated
each ad library with our testing app and observed click URL
patterns by clicking banner and full-screen ads.
From the collected click URLs of these 12 ad networks,
we devised click URL patterns. We implemented regular
expressions that (1) check for the existence of at least one /click,
/clk, or /aclk token in a given URL path and (2) check whether
the number of URL parameters is over eight. Furthermore, it
checks whether the domain of a given URL is among the ad
networks listed in EasyList [34] or NoTracking [62].
We acknowledge that our approach is a heuristic based on a
limited number of ad SDKs. However, note that FraudDetective
is able to accept arbitrary URL patterns that auditors want to
monitor. Once a URL pattern is secured, FraudDetective is able
to report an app module that sends URLs matching the given
pattern. One possible way of identifying unknown click URLs
is to leverage a machine learning classiﬁer, which MAdFraud
deploys when identifying click URLs. However, this approach
suffers from false positives and negatives depending on the
collected training instances. Instead, we focus on devising a
regular expression that gives no false positives.
We further speciﬁed F Cs to be invocations of cross-app
Intents that call other apps. Instead of focusing on a limited
number of popular apps, including YouTube, Google Play Store,
and major browsers, we designed FraudDetective to detect apps
that invoke other apps besides themselves.
Note that FraudDetective leverages a revised AOSP (§V-C)
to leave an F C in Logcat execution logs. From each F C,
FraudDetective also extracts (1) the source class of an invoked
statement F C as well as (2) the F ST that shows all the
methods used (and their classes) to reach the F C from a
program entry. This additional information helps FraudDetective
determine (1) whether an F C originates from a hosting app
or one of its libraries and (2) what user interactions trigger the
F C, thus pruning false positives of ad fraud (§V-D).
B. Full stack trace
For each F C, there exists an F ST from a program entry
to the invocation of a sensitive Android API. We model a full
stack trace F ST as the sequence of all the preceding transitive
callers of its F C from a program entry. Therefore, each F ST
contains all the callees to reach its F C from its entry point, and
the last element of the F ST is the invocation statement calling
a sensitive Android API with an actual parameter indicating
ad fraud.
Note that an F ST can be one stack trace (ST ) reaching an
F C or merged multiple ST s to reach an F C from a program
entry point. For instance, when a target app uses a new thread to
invoke an F C, the stack trace at the invocation of the F C does
not contain an original program entry. Thus, FraudDetective
should connect such fragmented ST s to compute a complete
F ST . Section V-C provides further relevant details.
By design, an F ST captures how a user input invokes its
corresponding event handler. For example, the left-hand side of
Figure 3 shows an F ST that is a single ST from the program
entry, com.android.internals.os.ZygoteInit.ma
5
identify source classes in which F Cs occur. To this end, we
augmented the AOSP 8.1 (Android Oreo) and revised 793
LoC in the original AOSP as well as the Chromium Android
WebView library.
Ad fraud candidates. As Table I shows, we revised eight
Android APIs that send HTTP(S) requests, thus leaving tagged
execution logs that list called methods with destination URL
addresses. We also revised four Intent methods to leave an actual
Intent parameter upon their invocation. Thus, an Android device
with the revised AOSP leaves an F C in Logcat logs. For each
F C, the revised AOSP also emits its corresponding F ST . This
F ST is a sequential list of fragmented ST s, each of which
is a stack trace of callees. Thus, the last callee of a previous
stack trace is responsible for invoking the ﬁrst callee of the
next stack trace in this F ST . The ad fraud detector module
harnesses these computed F ST s to prune F Cs originating
from genuine user inputs.
Connecting fragmented STs. We conducted a preliminary
study to identify which cases fragment a complete F ST
into multiple ST s. We investigated three ad libraries, namely,
MoPub [60], Cauly [20], and AppLovin [18]. We observed
four cases that require connecting fragmented ST s: (1) an F C
invoked in a new thread separated from a main app thread;
(2) an F C invoked in a thread in the thread pool managed
by Android concurrent queues; (3) an F C invoked by an
android.os.Handler class exchanging a message among
threads; and (4) an F C invoked in a Chromium WebView
instance of which the logic is implemented in a separate external
library and not a part of the AOSP.
Figure 4 depicts the ﬁrst three cases of simpliﬁed example
code required to link fragmented ST s. In the ﬁrst case, we
observed that
two ad libraries create a new thread upon
a user interaction and send ad requests within this new
thread. For instance, an OnClick event handler invokes
a new thread, and this new thread executes an F C that
invokes a sensitive Android API. At this point, the ST of
the F C via new Exception().getStackTrace() does
not capture the OnClick event handler accepting a user touch
event. To compute a non-fragmented F ST , we revised the
java.lang.Thread class in the AOSP. The revised AOSP
remembers a ST that instantiates a new thread, thus enabling
the mapping of each new thread to its parent ST in which
this thread was created. We also implemented a global hash
table that maps a given thread ID (TID) to its parent ST . We
revised java.lang.Thread.start() so that when a new
thread starts, its parent thread propagates the current ST to
this child thread, and the child thread stores the delivered ST
with its current TID in the hash table before it starts. Therefore,
FraudDetective connects the ST of an F C in a new thread to
the ST of its parent thread.
We also observed that several ad libraries recycle an
existing thread in a thread pool instead of creating a new
thread. This engineering practice makes the previous ap-
proach ineffective because of this type of augmented system
method, such as java.lang.Thread.start(), cannot
link a parent
thread in which a user event happens to
another recycled thread in which the F C occurs. However,
these libraries do use an Android concurrent queue, such
as java.util.concurrent.SynchronousQueue,
to
wake inactive threads in a thread pool. Thus, we revised
Fig. 3: Examples of two stack traces: One triggered by a
genuine user touch and the other triggered by a forged touch
event.
touch. On the other hand,
in, to the touch screen motion event handler, android
.view.View.dispatchTouchEvent. Because all the in-
voked methods that precede dispatchTouchEvent be-
this F ST is triggered
long to Android system classes,
by an authentic user
the
F ST in the right-hand ﬁgure shows several classes be-
longing to Library C, a third-party ad library that pre-
cedes the invocation of dispatchTouchEvent. This
means that the touch event handler is forcibly invoked by
com.libraryc.ServiceHandler.click1 in this ad
library, which denotes an ad fraud full stack trace (AF ST ).
When a touch event occurs, the event is delivered from
an Android Activity to a View instance by dispatch-
TouchEvent. This dispatchTouchEvent is a controller
that decides how to route touch events [11], [12], [72].
Speciﬁcally, the dispatchTouchEvent processes 16 types
of user action events, including touch, drag, move, button
press, and scroll. Note that the Android OS always invokes
this dispatchTouchEvent when the aforementioned user
actions occur in any Android Activity windows [72]. Therefore,
unforged stack traces leading to this dispatchTouchEvent
invocation hold only Android internal classes, not developer-
deﬁned classes.
We leveraged this hierarchical call pattern to identify
genuine user touch events. For each F C and its F ST , FraudDe-
tective checks for the presence of user- deﬁned code in the F ST
that precedes the invocation of a dispatchTouchEvent.
If found, FraudDetective labels this F ST as an (AF ST ), and
its F C becomes an F . The presence of an AF ST indicates
the occurrence of an F .
When FraudDetective computes an F ST , this F ST con-
tains all the ST s in which the F ST involves a user interaction,
such as touch and drag. If the F ST does not involve any user
input, the F ST only captures the last ST —the one closest to
the F C. That is, FraudDetective focuses on tracking F ST s that
involve user interaction via using dispatchTouchEvent.
Note that an AF ST is a key technical component that
contributes to FraudDetective identifying the causal relation-
ships between user inputs and ad fraud activities as well as
pinpointing the source classes of observed ad fraud activities,
which MAdLife and MAdFraud [21], [25] did not address.
C. Augmenting an AOSP
The objective of augmenting an AOSP is three-fold: (1) to
leave Logcat execution logs indicating F Cs, (2) to connect
fragmented ST s generating a complete F ST , and (3) to
6
Ad WebViewcom.android.internal.os.ZygoteInit.main…android.view.InputEventReceiver.dispatchInputEventandroid.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent…android.view.View.dispatchTouchEventExecution TraceUserinteractionGenuine click eventAd WebViewcom.android.internal.os.ZygoteInit.main…com.libraryc.ServiceHandler.handleMessageJava.lang.Thread.startcom.libraryc.JobTask.runcom.libraryc.ServiceHandler.click1…android.view.View.dispatchTouchEventExecution TraceClick occurby fraud codeFraud click eventFig. 4: Pseudo-code examples of ST connections via AOSP modiﬁcation.
concurrent queue classes to propagate the ST of a parent
thread that sends a wake-up signal to a recipient thread that
accepts this signal. We created a wrapper class for elements in
the concurrent queues. This wrapper class has an element ﬁeld
that references the original element and another ﬁeld that stores
the ST information. The functions that move and change queue
elements, such as dequeue, enqueue, comparator, heap, indexing,
and remove, have been revised to use the wrapper class instead
of that of the original element; this process enables each element
to correspond to the ST of the thread that enqueues the element.
Therefore, when a thread that performs the enqueuing of an
element is different from the thread that conducts the dequeuing
of the element, the ST is delivered to the dequeuing thread.