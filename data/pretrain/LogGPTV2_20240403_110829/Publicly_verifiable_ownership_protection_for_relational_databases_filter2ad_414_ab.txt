tive types of data besides memory addresses: integer numeric, real
numeric, character, and Boolean. Regardless of its type, a data item
is represented in computer systems as a bit string. The MSB of the
bit string is the leftmost digit, which has the greatest weight. In a
signed numeric format (integer or real), the MSB can be the sign
bit, indicating whether the data item is negative or not1. If the sign
bit is not chosen (or there is no sign bit), the MSB can be the high
order bit (next to the sign bit; in ﬂoating point format, it is the left-
most bit of exponent). For character or Boolean data, any bit can
be an MSB and we simply choose the leftmost one.
We assume that watermark bits generated from selected MSBs
are randomly distributed; that is, each MSB has the same prob-
ability of 1/2 to be 1 or 0. This randomness is important in our
robustness analysis (see Section 4). If this is not the case, then we
randomize the MSBs by XOR’ing them with random mask bits. For
the MSB of the j-th attribute of tuple r, the corresponding mask bit
is the j-th bit of hash value h(K|r.P ) if j ≤ , where  is the bit-
length of hash output. In general, if (k − 1) < j ≤ k, the mask
bit is the (j − (k − 1))-th bit of hash value hk(K|r.P ). Since the
hash value is computed from the unique primary key, the mask bit
is random; thus, the MSB after masking is random. The random-
ized MSBs are then used in watermark generation and detection in
our scheme.
2.4 Discussion on Relations without Primary
Keys
Most watermarking schemes (e.g., [1, 20, 26, 2]) for relational
databases, including ours, depend critically on the primary key at-
tribute in the watermarking process. In the case that there is no
primary key attribute, or that the primary key attribute is destroyed
in malicious attacks, one can turn to other attributes and construct
a virtual primary key that will be used instead of the primary key in
the watermarking process. The virtual primary key is constructed
by combining the most signiﬁcant bits of some selected attributes.
The actual attributes that are used to construct the virtual primary
key differ from tuple to tuple, and the selection of the attributes is
based on a key that could be the watermark key in the context of
this paper. The reader is referred to [19] for more details on the
construction of a virtual primary key.
Since the virtual primary key is constructed from the MSBs of
selected attributes, it is difﬁcult to destroy the virtual primary key
through value modiﬁcation or attribute deletion. However, unlike
a real primary key, the virtual primary key may not be unique for
each tuple; consequently, there could be multiple tuples in both R
and W sharing the same value of the primary key. In watermark
detection, the exact mapping between pairs of these tuples needs
1In most commonly used storage formats, the sign bit is 1 for a
negative number and 0 for a non-negative number.
to be recovered (see line 4 in algorithm 2). This can be done as
follows. For each tuple r ∈ R with primary key r.P , compute
a tuple t the same way as in watermark generation, then choose
a tuple t ∈ W such that t is the most close (e.g., in terms of
Hamming distance) to t among the multiple tuples in W that share
the same primary key r.P . The number of tuples sharing the same
primary key value (i.e., the severity of the duplicate problem) can
be minimized, as shown in the above-mentioned work [19].
3. PUBLIC OWNERSHIP PROOF
We now investigate how to publicly prove ownership as many
times as necessary. If the watermark key K is kept secret with the
owner, the ownership proof can be done secretly; however, it can
be done only once in public since the key has to be revealed to the
public during this process.
The problem of public ownership proof was originally raised in
the multimedia context [15] (see section 5 for details); it has not
been studied in the literature of database watermarking. We note
that the requirements for watermarking relational data are different
from those for watermarking multimedia data. The former must be
robust against typical database alterations or attacks such as tuple
insertion, deletion, and value modiﬁcation, while the latter should
be robust against multimedia operations such as compression and
transformation. An additional requirement for watermarking rela-
tional data is that a watermarked relation should be updated easily
and incrementally.
Public ownership proof in our scheme is achieved by combining
watermark detection with a certiﬁcate.
3.1 Watermark Certiﬁcate
DEFINITION 3.1. A watermark certiﬁcate C of relation R is
a tuple ID, K, h(W ), h(R), T, DB-CA, Sig, where ID is the
identity of the owner of R, K is the owner’s watermark key, W
is the public watermark, T is the validity information, DB-CA is
the trusted authority who signs the certiﬁcate by generating a sig-
nature Sig.
Similar to the identity certiﬁcate [16] in PKI (or attribute cer-
tiﬁcate [10] in PMI), which strongly binds a public key (a set of
attributes) to its owner with a validity period, the watermark cer-
tiﬁcate strongly binds a watermark key, a watermark, and a DB
relation to its owner’s ID with validity information. The validity
information is a triple T = Torigin, Tstart, Tend indicating the
original time Torigin when the DB relation is ﬁrst certiﬁed, the
starting time Tstart, and the ending time Tend of this certiﬁcate in
the current binding. When the DB relation is certiﬁed for the ﬁrst
time, Torigin should be the same as Tstart. Compared with the
identity certiﬁcate or attribute certiﬁcate, the watermark certiﬁcate
not only has a validity period deﬁned by Tstart and Tend, but also
contains the original time Torigin. The original time will be useful
in thwarting possible attacks that confuse ownership proof.
A comparison of the watermark certiﬁcate with the traditional
identity certiﬁcate is illustrated in Figure 1. The two kinds of cer-
tiﬁcates share a similar structure except that the public key infor-
mation in the identity certiﬁcate is replaced by the watermark key,
watermark hash, and database hash in the watermark certiﬁcate.
In traditional identity certiﬁcate, the subject’s public key is paired
with a private key known only to the subject. In the case of damage
or loss of the private key (e.g., due to collision attacks), the identity
certiﬁcate needs to be revoked before the expiration of the certiﬁ-
cate. In the watermark certiﬁcate, since there is no private key asso-
ciated with the public watermark key, it seems that there is no need
Identity Certificate
Version
Serial Number
Signature Algorithm
Issuer
Validity Period
Subject
Subject Public Key Info
Signature
Watermark Certificate
Version
Serial Number
Signature Algorithm
DB-CA
Validity Info T
DB owner ID
Watermark Key K
Watermark Hash h(W)
DB hash h(R)
Signature Sig
Figure 1: Relation between watermark and identity certiﬁcate
of certiﬁcate revocation. Nonetheless, certiﬁcate revocation and re-
certiﬁcation may be needed in the case of identity change, owner-
ship change, DB-CA signature compromise, and database update.
The role of DB-CA is similar to that of the traditional CA in PKI
in terms of authentication of an applicant’s identity. The differences
are: (i) it binds the applicant’s ID to the watermark key, watermark,
and watermarked data; and (ii) it conﬁrms the original time when
the watermarked data was ﬁrst certiﬁed. The original time is es-
pecially useful in the case of recertiﬁcation so as to thwart false
claims of ownership by a pirate. This is addressed in the following
subsection.
3.2 Public Veriﬁability
While the watermark detection process can be performed by any-
one, voluntarily or in delegation, who has access to the public wa-
termark and watermark key, the ownership is proven by further
checking the corresponding watermark certiﬁcate. This involves
checking (i) if the watermark certiﬁcate has been revoked (see the
next subsection for details); (ii) if the watermark key and (the hash
of) the watermark used in watermark detection are the same as
those listed in the watermark certiﬁcate; (iii) if the signature is cor-
rectly signed by the DB-CA stipulated in the watermark certiﬁcate
(this is done in traditional PKI and may involve checking the DB-
CA’s public key certiﬁcate, a chain of CA’s certiﬁcates, and a cer-
tiﬁcate revocation list); and (iv) the similarity of suspicious data
R to the original data R as published by the owner of watermark
certiﬁcate. If all are proven, the ownership of the suspicious data
is publicly claimed to belong to the owner of the watermark certiﬁ-
cate for the time period stipulated in the certiﬁcate. The original
time that the data was certiﬁed is also indicated in the certiﬁcate.
The last requirement is optional, depending on whether data
frame-up attack is of concern.
In a data frame-up attack, an at-
tacker modiﬁes the watermarked data as much as possible while
leaving the watermarked bits (i.e., MSBs of selected values) un-
touched. Note that in our scheme, an attacker can pinpoint the wa-
termarked bits since the watermark key, watermark, and watermark
algorithm are all public. Since the ownership is publicly veriﬁable,
such “frame-up” data may cause confusion and damage to the le-
gitimate ownership.
The data frame-up attack has not been discussed before, even
though it is also possible in secret key based schemes. For exam-
ple, in Agrawal and Kiernan’s watermarking scheme [1], the wa-
termark information is embedded in one of ξ least signiﬁcant bits
of some selected values. Data frame-up attack is possible if an at-
tacker modiﬁes all signiﬁcant bits except the last ξ least signiﬁcant
bits in each value. However, this attack is less serious in secret key

based schemes because the owner of watermarked data may choose
not to claim the ownership for “frame-up” data. In our scheme, this
attack is thwarted by requiring that the suspicious data is similar
enough to the original data (the authenticity of the original data R
can be checked with h(R) in the watermark certiﬁcate).
The rationale is that when an attacker forges a low quality data
R with the MSBs given in the public watermark W , such R will
be signiﬁcantly different from the original R due to its low quality.
The similarity between R and R may be measured, for example,
by the portion of signiﬁcant bits that match for each pair of values
in R and R whose watermarked MSBs match. The similarity may
also be measured in terms of the usefulness of data, such as the
difference of individual values, means, and variances.
3.3 Certiﬁcate Management
Once publicly proven based on a valid watermark certiﬁcate,
the ownership of watermarked data is established for the owner
of the certiﬁcate. The current ownership is valid for a time pe-
riod [Tstart, Tend] stipulated in the certiﬁcate. The original time
Torigin when the data was ﬁrst certiﬁed is also indicated in the cer-
tiﬁcate.
The use of original time is to thwart additive attack. Additive at-
tack is a common type of attacks to watermarking schemes in which
an attacker simply generates another watermark for watermarked
data so as to confuse ownership proof. The additional watermark
can be generated using a watermark key that is derived from the
attacker’s ID. It is also possible for the attacker to obtain a valid
watermark certiﬁcate for this additional watermark.
We solve this problem by comparing the original time Torigin
in the certiﬁcate of real owner with the original time T origin in the
certiﬁcate of the attacker. We assume that the owner of data will
not make the data available to potential attackers unless the data is
watermarked and a valid watermark certiﬁcate is obtained. There-
fore, one always has Torigin < T origin by which the legitimate
ownership can be proven in the case of an ownership dispute. After
this, the attacker’s valid certiﬁcate should be ofﬁcially revoked.
Besides revocation upon losing an ownership dispute, a certiﬁ-
cate may be revoked before its expiration based on the following
reasons: (1) identity change; (2) ownership change; (3) validity
period change; (4) DB-CA compromise; and (5) database update.
When the owner of a valid certiﬁcate changes his identity, he needs
to revoke the certiﬁcate and, at the same time, apply for a new
certiﬁcate to replace the old one. Upon the owner’s request, the
DB-CA will grant a new validity period [Tstart, Tend] according
to its policy while keeping the original time Torigin unchanged in
the new certiﬁcate. The case of ownership change is handled in a
similar manner, except that the DB-CA needs to authenticate the
new owner and ensure the ownership change is granted by the old
owner. In both cases, a new watermark key and a new watermark
may be derived and included in the new certiﬁcate.
Sometimes the owner wants to prolong or shorten the validity pe-
riod of his certiﬁcate. In this case, the watermark certiﬁcate needs
to be re-certiﬁed with a new validity period. The watermark key or
watermark does not need to change in the recertiﬁcation process.
In our scheme, the DB-CA is trusted, similar to the CA in tradi-
tional PKI. A traditional PKI certiﬁcate would need to be revoked
for a variety of reasons, including key compromise and CA com-
promise. Since a watermark key is not paired with a private key
in our scheme, there is no scenario of watermark key compromise.
However, there is a possibility of DB-CA compromise if any of the
following happens: (i) DB-CA’s signature is no longer safe (e.g.,
due to advanced collision attacks); (ii) DB-CA loses its signature
key; (iii) DB-CA ceases its operation or business; or (iv) any CA
who certiﬁes the DB-CA’s public key is compromised (the public
key is used to verify the DB-CA’s signature in our scheme).
In
the case of DB-CA compromise, all related watermark certiﬁcates
must be revoked and re-examined by a valid DB-CA and recertiﬁed
with new validity periods but unchanged original times.
Due to the similarity between the watermark certiﬁcate and the
traditional identity certiﬁcate, many existing standards and mecha-
nisms regarding certiﬁcate management, such as certiﬁcation path
constraints and CRL distribution points, can be borrowed from PKI
with appropriate adaptations. For simplicity and convenience, the
functionality of a DB-CA may be performed by a CA in traditional
PKI.
3.4 Efﬁcient Revocation of Watermark Cer-
tiﬁcate
Micali proposed an efﬁcient public key certiﬁcate revocation scheme
[23] called CRS (for certiﬁcate revocation status). Compared with
the CRL-based solution, CRS substantially reduces the cost of man-
agement of certiﬁcates in traditional PKI. This scheme can easily
be adapted to our scheme for efﬁcient revocation of watermark cer-
tiﬁcates.
As pointed out in [23], the costs of running a PKI are stagger-
ing and most of the costs are due to CRL transmission. The major
reason is that each time a user queries the status of a single certiﬁ-
cate, he needs to query a directory, an agent receiving certiﬁcate
information from a CA and handling user queries about it, and the
directory sends him the whole CRL list that has been most recently
signed by the CA. Since the CRL list tends to be very long and
transmitted very often, the CRL solution is extremely expensive. In
CRS, however, the directory responds to a user’s query by sending
a 100-bit value only, instead of the whole CRL. The 100-bit value
is employed by the user to verify whether the relative certiﬁcate is
valid or has been revoked.
In our watermarking scheme, the DB-CA selects a secret 100-bit
value Y0 for a watermark certiﬁcate, and recursively applies on it
a one-way function F 365 times, assuming that the validity period
of the certiﬁcate is a normal year. The DB-CA then includes the
100-bit value Y365 = F 365(Y0) in the watermark certiﬁcate C =
ID, K, h(W ), h(R), T, DB-CA, Y365, Sig.
Assume that the current day is the i-th day in the validity period
of the certiﬁcate. The DB-CA generates a 100-bit value Y365−i =
F 365−i(Y0) and gets it published through the directory. It is the DB
owner’s responsibility to obtain Y365−i from the directory and pub-
lish it together with the watermark certiﬁcate C. Anyone can verify
the validity of the certiﬁcate by checking whether F i(Y365−i) =
Y365, where i is the number of days since the start of the validity
period (i.e., Tstart in T ). If this is the case, the certiﬁcate is valid;
otherwise, it has been revoked before the i-th day, in which case
the DB-CA did not get Y365−i published. Note that Y365−i cannot
be computed from previously released Y365−j (j < i) due to the
one-way property of function F .
In this scheme, the DB owner needs to query the directory and
update Y365−i every day. To make the transition from Y365−i to
Y364−i smooth, one more hour may be granted for the validity pe-
riod of Y365−i (i.e., 25 hours). To avoid high query load at certain
hours, the validity period of Y365−i should start at a different time
each day for a different certiﬁcate. A policy stating this may also
be included in the watermark certiﬁcate.
Note that Micali’s original scheme requires a CA to (i) sign an-
other 100-bit value besides Y365−i to explicitly indicate a certiﬁ-
cate being revoked; and (ii) sign a updated list indicating all and
only the series numbers of issued and not-yet-expired certiﬁcates.
The signed value and list are sent to the directory so that any user

query can be answered by the directory. In our scheme, it is the DB
owner’s responsibility (for his own beneﬁt, namely anti-piracy) to
query the directory and publish the updated Y365−i online together
with DB, watermark, and certiﬁcate. A user who wants to verify
the certiﬁcate will obtain the validity information from the owner
rather than from the directory. This separation of duty simpliﬁes
the scheme and clariﬁes the responsibility of the DB owner.
It is relatively straightforward to analyze the communication cost
of our scheme as compared with the CRL based solution. The
analysis is very similar to that given in [23] for comparing CRS