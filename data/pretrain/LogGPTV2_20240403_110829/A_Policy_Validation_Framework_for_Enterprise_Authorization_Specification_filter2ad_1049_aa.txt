title:A Policy Validation Framework for Enterprise Authorization Specification
author:Ramaswamy Chandramouli
A Policy Validation Framework for Enterprise Authorization Specification 
National Institute of Standards and Technology, Gaithersburg, MD, USA 
Ramaswamy Chandramouli
 (PI:EMAIL)
Abstract
The 
of
enterprise
validation 
authorization
specification  for  conformance  to enterprise security
policies  requires  an  out-of-band  framework  in many
situations  since  the  enforcing  access  control  mechanism
does not provide this feature.  In  this  paper  we  describe
one such framework. The framework uses XML to encode 
the enterprise authorization  specification,  XML  Schema
to  specify  the  underlying access  control  model  (which  in 
our case is the Role-based Access control Model (RBAC))
the  policy
and  Schematron 
constraints.  The  conformance  of
the XML-encoded
enterprise  authorization  specification  to  the  structure of
the RBAC model (specified through XML Schema) as well
as the policy  constaints  (specified  through  Schematron)
are verified through a Schematron Validator tool.
to  encode 
language 
1.  Introduction 
An access control  mechanism  provided  by  or  within 
any  software  (e.g.  operating  system,  DBMS  etc)  is  the 
executable  module  for  controlling  access  to resources
under the control of  the  software.  Every  access  control 
mechanism  provides  a  structural  framework called the
access control model for specifying access restrictions for
resources.  An  access  control  model  is  based  on  certain
concepts  involved  in  interaction  with  resources.  These
concepts  can  be  broadly  described  as  being  made  up  of 
entities  (e.g.,  subject,  object, operations, permission or
right, user, role,  label,  group  etc)  and  relations  (the
combination  of  an  object  and  operation defines a
permission)  that  describe  the nature of association
between entities.  The  deployment  of  an  access  control 
model
is  called  a 
configuration.  The  configuration  of  an  access  control 
model for a  given  enterprise contains  instances  of  model
entities for that enterprise (e.g., role instances like Teller,
Loan  Officer  for  a  commercial  bank  environment) and
hence 
the  Enterprise Authorization
Specification. The safety of a configuration is defined as 
for  an  enterprise  environment 
results 
in 
the  state  where  the  configuration  does  not violate
enterprise access control/authorization policies. To verify 
the  safety  of  the  configuration  therefore  requires  that the
policies  be  expressed  using  access  control model entities
and  relations.  In  other  words  there  should not be any
policy  violations  by  the  instances  of  the  model  entities
and model
relations  for  the  enterprise.  A  common
approach adopted to meet this requirement is to augment
the  access  control  model  with  expressions
called
constraints.
There  are  however  many practical  limitations  in
ensuring  that  the  enterprise  authorization  specification  is 
safe (does not violate policy constraints). The first one is
the  limitation  of  the  underlying  access  control  model.
Since policies  are  specified  using  model  entities  and
relations,  it  should  be  obvious  to  many  practitioners  that
some  access  control  models  are  more amenable for
expression  of  complex  enterprise  policies  than  others.  In 
general,  higher  the  level  of abstraction of model entities
more  is  the  policy  definition  capabilities  of  the model.
Secondly,  even  if  the  underlying  access  control  model
does provide  policy  definition  capabilities,  the  access 
control  mechanism  may  not provide
for
the  different  types  of  constraints
specification of all
needed  to  capture  those  policy  requirements.  The  above
two  limitations  point  the  need  for an out-of-band
approach  (independent  of access  control  mechanism  and 
the  underlying  software  platform) to represent enterprise
authorization  specification  and  validate  it  for satisfaction
of enterprise policy constraints.
features
In this paper we provide one such approach. We have
represented the enterprise authorization specification for a 
commercial bank enterprise  in  XML.  The  authorization
specification  is  based  on  the  role-based  access control
model  (RBAC)  [1].  The  RBAC  model  itself  is  specified
using  XML  Schema  [4].  The  RBAC  XML Schema
specification  is  then  augmented  with policy constraints
using  the  Schematron  constraint  specification  language
[9]. The XML document  containing  the  bank-enterprise
authorization  specification  is  then  validated  using the
Schematron Validation Tool [12].
The organization of the rest of the paper is as follows.
In Section 2 we provide  an  overview  of  the  various
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
the
the  XML  encoding  of 
components in our policy validation framework as well as
the rationale  for  their  choice.  Section  3  describes  the
specification  of  the  RBAC  model  using XML Schema
language. Since RBAC  model  standards  [10]  provide
taxonomy of  models  (as  opposed  to  a  single  RBAC
model)  as  well  as  well  as  choice  of  features  to  suit the
enterprise  environment,  we  will  call  our  customized
RBAC  model  for  our  bank  environment as Bank-RBAC
model. We will refer to the specification of Bank-RBAC
model in XML Schema  as  Bank-RBAC  XML  Schema
and 
bank-enterprise
authorization  specification  based  on  the  RBAC XML
Schema as  Bank-Authorization  XML  Data.  Section  4 
provides  a  sample  encoding  in  XML  of  bank-enterprise
authorization 
specification.  Section  5  deals with
constraints that  could  be  specified  using  the  XML-
Schema language features.  These  cover  all  Bank-RBAC
model’s  model-specific  constraints  as  well  as  some
rudimentary  application-domain  constraints.  In  section 6
we point out the limitations of the XML Schema features
for  specification  of  complex policy (domain-specific)
constraints. We  then  illustrate  the  use  of  Schematron
language for expressing  those  domain  constraints  within
our Bank-RBAC  XML  Schema  document  with  several
examples. We briefly describe related work in section 7 
and  in  section  8  we  explain  the  scope  for  extending our
current  framework  to  enhance  the  capabilities  of  access 
control mechanism to enforce dynamic policy constraints.
of  products  such  as  Database  Management Systems,
Workflow  systems  and  Enterprise  Security Management
systems [18].  A brief description of RBAC Models is as
follows.
The  Role-based  Access  Control  Model  (RBAC)
provides  a  generalized  approach  for  representation  of 
many  types  of  access  control  policies  (each  describable 
only  using  a  specific  access  control  model) through the
abstraction  concept  of  roles. Many RBAC models have
been proposed in the research literature [2] and the NIST 
RBAC standard provides  taxonomy  of  RBAC  models
[10]. The RBAC reference model in the standard has four 
main entities – users, roles, privileges and sessions. Roles
generally represent organizational functions (e.g. Teller in
a  bank).  Users  are  assigned  to  roles and privileges are
assigned to roles as well. Users derive all their privileges
by virtue  of  their  role  memberships.  Users  interact  with
the  system  through  sessions  and  roles  are  assigned  to
particular  sessions  as  well.  Now  the interactions among
these four entities  of  the  RBAC  model  results  in  the
following relations:
(a) Role-Inheritance relation (RH) 
(b) User-Role relation (UA) 
(c) Privilege-Role relation (PA) 
(d) User-Session relation (US) 
(e) Role-Session relation (RS). 
A schematic  diagram  of  our  reference  RBAC  model  is
given in Fig 1. 
2.  Policy 
Validation
Framework
RH
Components
A 
framework 
tool-based
validation of enterprise authorization specification should
have the following components:
for  programmatic  or 
.
users
UA
PA
roles
privileges
(a) Choice  of  the  underlying  access  control model
and a language for its specification
(b) A language for encoding enterprise authorization
specification based on the access control model
(c) A language for specifying policy requirements as
constraints based on the access control model
US
RS
(d) A tool or API for programmatic validation of the
enterprise 
for
conformance  to  model  specifications  and  policy
constraints.
authorization 
specification
Sessions
Constraints
Figure 1
2.1  Choice  of  Access  Control  model and its
specification
Our motivation for choosing RBAC as the underlying
access control model for the bank-enterprise authorization 
specification is that it is a sufficiently abstract model with
configurations  capable  of  expressing varied types of
policies  such  as  least  privilege  and  separation of duties.
RBAC has been widely implemented for different types
The Bank-RBAC model  that  we  have  chosen  for 
illustration in our policy validation framework is based on
the  RBAC  reference  model  described above but without
the session entity and its two associated relations US and
RS. We have excluded the session entity since session is a 
platform-dependent  artifact. For  example,  a  DBMS 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
session has a different set of parameters than a O/S login
session like Telnet. We have also excluded the constraint
from the model specification per se since constraint needs
a different set of enforcement mechanisms than the simple
set  of  cardinality  and  participation  restrictions  associated
with  binary  relations.  To  summarize  our  Bank-RBAC
model  consists  of  users,  roles  and  privileges  as  entities
and the following relations – Role Inheritance (RH), user-
role relation (UA) and privilege-role relation (PA). 
Our language for Bank-RBAC model specification is
XML  Schema  [4]  since  it provides constructs
for
specifying binary relations and hierarchical structures (the
basic structural relationships of the RBAC model). XML
Schema is one of the languages under the XML standard
that  is  used  for  describing  the  structure of information
within  an  XML  document.  Our  choice of XML Schema
over the other meta-data language DTD is due to the fact
that  XML  Schema  supports  specification  of  cardinality 
and participation  restrictions  as  well  as  rich  data  types
(like enumerated data types). Further we need a means to 
augment the specification of the Bank-RBAC model with
policy  constraints.  The  XML  Schema language enables
this feature as well  by  allowing  the  embedding  of 
constraints 
special
“annotation”  tag.  We  have  made  use  of  this  feature by
embedding  our  policy  constraints  specified  using the
Schematron 
the XML-Schema
representation of our Bank-enterprise RBAC model.
language  [9]  within 
languages  under  a
in  other 
2.2  A  Language 
Authorization Specifications 
for Encoding Enterprise
Our choice of XML Schema for Bank-RBAC model
automatically provides XML as  the  choice  for  encoding
enterprise authorization  information.  An  advantage  of 
encoding a  structured 
information  (such  as  bank-
enterprise  authorization  specification)  in  XML  is  that
there are special types  of  software  called  XML  Parsers 
that could be  used  to  extract  information  from  XML
documents  based  on  its  associated  structure  (that
is
specified  through  XML  Schema document). These XML
Parsers  are  based  on  standard application programming
interfaces  such  as  Document  Object  Model  (DOM)  [5].
These parser libraries implemented in various procedural
languages  enable  an  application  program written in the
corresponding  procedural  language  to  create, maintain
and  retrieve  XML  encoded  data. With an API
for
extracting  information,  a  program  could  be  written to
properly interpret the contents of the validated enterprise
authorization  specification  (encoded  in  XML), and map
them  to  the  native  access control  structures  in  the  access 
control mechanisms present in heterogeneous application
systems within the enterprise.