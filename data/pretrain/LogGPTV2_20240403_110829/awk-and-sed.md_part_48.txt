Total
0:00:000:13:58
Recv
第十三章
2:23:47
42:09:49
XmitRecv Xmit
->
-V
-V
-V
脚本的汇总
2
0
2
7
0
---
## Page 354
输出：
输入：
下面是输入和输出的（短小的）样本。
当）。这里对输入的数据没有做彻底的智能检测。用法为：
数组）（注：英文原文为wonders of associative arrays，此处疑为翻译不
加更多的带宽收费或速率收费，相应的表可以被简单地扩展（奇妙的是相关的
的收费标准时，可以在顶层很容易的实现修改（这已经实现过一次）。如果增
户打电话的费用收集到一个报告中。这个程序还可用于当英国电话公司改变它
这个程序的目的是尽量减少呼叫者需要输入的信息量，而且可以用来将每个用
反馈的时间的账单。这只计算了打电话的费用，而没有计算固定的费用。
用一个秒表（旧的便宜的数字型的）、一本书和一支笔，来计算由我的awk脚本
用于计算一个单元的时间长度。第三个字段是通话的时间长度。它们可以是
这个程序的输入有四个字段，第一个是日期（不用），
就得对整个单元付费。
带宽的费用（和距离有关）和速率的费用（和一天的时间有关）。通话一开始
数量来计算的（本地电话不是免费的）。
由Nick Holloway提供
phonebi ll
访问来自于日志文件的每行数据；以及一个ED过程，在其中生成输出的报告。
样。它的组成中包含一个BEGIN过程，在其中定义变量；包含一个主体，在其中
这个程序的结构包括三个部分，和我们在第七章“编写awk脚本”中所强调的一
有助于立刻识别出它们的用处。
“ss”、“mm:ss”或“hh:mm:ss”格式。第四个字段是呼叫者的名字。我们使
01/06 L/c 30:50 Nick
29/05 L/c 1:00:00 Dale
29/05 b/p 5:35 Nick
phonebill [fi le.]
QQ群：
I—跟踪电话的使用情况
50192241
372
，一个“单元”的持续时间长度依赖于
第十三章
第二个是“带宽/速率”
脚本的汇总
---
## Page 355
下面是phonebill的程序列表：
#
#
# Date Type/Rate Length Name
# 地点：University of Warwick
# Awk 脚本在电话中的使用，计算每个人的话费
#!/bin/awk -f 
BEGIN\
Total: 25 units @ 5.06 pence per unit = $1.26
Summary for Nick:
Summary for Dale:
#-一
#
#日
#
#
#
#
#--
日期：27 January 1989
以及单元的个数，而且“units”是每个用户所有单元的总的累加结果
入数据的行。
信息被保存在两个数组中，都用姓名做索引。第一个“summary”包含输
按“typc/rate”索引
费用信息保存在数组“c”中
名字："Fred"－ one word (unique)
""s.‘ss:w..‘ss:w:.·
带宽/速率："bb/r"(e.g.L/c)
日期："dd/mm"－ one word 
条目的格式如下所示
作者： N.Holloway (alfie@cs. warwick.ac.uk)
#----
格式：
 01/06 L/c 30:50 6 units
 29/05 b/p 5:35 19 units
 29/05 L/c 1:00:00 11 units 
#［不能将0作为值输入］
#--－对于每个单元在不同带宽/速率下的每秒费用列表
pence_per_unit *= 1. 15 # 增加 15%
pence_per_unit = 4.40 
#--－每个单元的费用
一一一-
QQ群：
50192241
- 373
）#每个单元4.4便士
第十三章
脚本的汇总
---
## Page 356
END
spu=c［$2］ #查找要负但的带宽
c ["G/c"] = 2.15; c ["G/s"] = 2.15; 
else 
QQ群：
["F/c"] =
["E/c"] =
["D/c"]
["C/c"] =
["B/c"] =
["A2/c"]=
["A/c"] =
["m/c"]
["b/c"] =
["b1/c"]=
["a/c"] = 96 ; c ["a/s"] = 34.3; c ["a/p"] = 25.7;
["L/c"] = 330 ; c ["L/s"] = 85. 0; c ["L/p"] = 60.0;
n= split（$3，t，""）#计算以秒为单位的长度
summary [ $4 ］] = summary ［ $4 ］ "\n\t"\ 
units［$4 ］+=u #在最后将出信息保存到输出中
else 
if（int（u）==u）#舍入到的下一个单元
for （i = 1; i  50) overfiftycount+=1; 
if(size > 20 && size  10 && size  0 && size <= 10)
if(size == 0) zercount+=1;
size = $1 + 0; 
QQ群：
count,total）
一检查邮箱的大小
50192241
377
）tencount+=1;
第十三章
脚本的汇总
---
## Page 360
下面是nawk过滤器adj的语法：
adj—调整文本文件的行
实例时保持了其断行和缩进的段落格式。这个程序和BSD fmt程序是相似的。
由Norman Joseph提供
在以上过程中，Morgan使用一系列条件，来收集对每个用户的邮箱大小的分配
程序更容易理解。
同时，用这个表达式作为模式可以清楚的表示这个过程是如何被访问的，使得
这个管理程序和第七章中的filenum程序类似。他处理ls命令的输出结果。
程序mailavg的注意事项：
（因为作者使用它的程序在发送邮件之前将邮件消息格式化，我们再把它作为
统计。
法我编写了adj.awk。并同时用shell脚本实现了adj。
是几个单调乏味的工作，可以用程序来很好的完成。
档进行连接或断行，已得到一个好看的右边界。因此我对自己说，
始增加或删除行时则看上去很混乱。所以最后我花费了很多时间对我的文
改（尤其是要发送到网站的）。因此在开始就调整好的信或邮件，在我开
一个我很喜欢的nawk程序，我将它发送出去。
0ver 50 27
S
/usr/mail has 47 mailboxes using 5116 blocks,
（IMHO）处理像这个这样简单的文本。因此，抱着加深自己nawk能力的想
1-1013
ize Count
istribution:
现在，