3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
notifications,” in 25th USENIX Security Symposium (USENIX Security 16).
USENIX Association, 2016.
[45] Hybridauth, “Hybridauth social login php library,” 2021. [Online]. Available:
https://hybridauth.github.io/
[46] D. Fett, R. K¨usters, and G. Schmitz, “The web sso standard openid connect:
In-depth formal security analysis and security guidelines,” in 2017 IEEE 30th
Computer Security Foundations Symposium (CSF).
IEEE, 2017, pp. 189–202.
[47] R. Yang, G. Li, W. C. Lau, K. Zhang, and P. Hu, “Model-based security
testing: An empirical study on oauth 2.0 implementations,” in Proceedings
of ASIACCS 2016. ACM, May 2016, pp. 651–662.
[48] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and
J. S. Dong, “Authscan: Automatic extraction of web authentication protocols
from implementations.” in Proceedings of NDSS 2013, Feb. 2013.
[49] A. Sudhodanan, A. Armando, R. Carbone, L. Compagna et al., “Attack patterns
for black-box security testing of multi-party web applications.” in NDSS, 2016.
[50] Y. Cao, Y. Shoshitaishvili, K. Borgolte, C. Kruegel, G. Vigna, and Y. Chen,
“Protecting Web Single Sign-on against Relying Party Impersonation Attacks
through a Bi-directional Secure Channel with Authentication,” in Proceedings
of the 17th International Symposium on Research in Attacks, Intrusions and
Defense, ser. RAID. Springer, September 2014.
[51] D. Kumar, Z. Wang, M. Hyder, J. Dickinson, G. Beck, D. Adrian, J. Mason,
Z. Durumeric, J. A. Halderman, and M. Bailey, “Tracking certificate
misissuance in the wild,” in 2018 IEEE Symposium on Security and Privacy
(SP).
[52] D. Kaloper-Merˇsinjak, H. Mehnert, A. Madhavapeddy, and P. Sewell,
“Not-quite-so-broken {TLS}: Lessons in re-engineering a security protocol
specification and implementation,” in 24th {USENIX} Security Symposium
({USENIX} Security 15), 2015, pp. 223–238.
IEEE, 2018, pp. 785–798.
[53] S. Calzavara, R. Focardi, M. Nemec, A. Rabitti, and M. Squarcina, “Postcards
from the post-http world: Amplification of https vulnerabilities in the web
ecosystem,” in 2019 IEEE Symposium on Security and Privacy (SP).
IEEE,
2019, pp. 281–298.
[54] A. P. Felt, R. Barnes, A. King, C. Palmer, C. Bentzel, and P. Tabriz,
“Measuring https adoption on the web,” in 26th {USENIX} Security
Symposium ({USENIX} Security 17), 2017, pp. 1323–1338.
[55] L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc, “Csp is dead, long
live csp! on the insecurity of whitelists and the future of content security
policy,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security, 2016, pp. 1376–1387.
APPENDIX
Here we include more details about our framework and provide
additional analysis and findings from our large-scale study.
A. Web Accessibility API
In §III-B, we discussed how we leveraged Chromium’s Web
Accessibility API to obtain the accessibility tree, which is a tree
of objects resembling the HTML elements and used by assistive
technologies to facilitate website interactions for users with
disabilities. Listing 1 depicts an HTML code segment for a login
page, which contains two text boxes for the username and password,
a submit button, and Facebook’s SSO button. For brevity, we do not
include the entire HTML code in this sample. Listing 2 illustrates
the accessibility tree obtained from Chromium’s Web Accessibility
API upon visiting the page. We modified Puppeteer’s accessibility
API to also include the node information that is not included in
the accessibility tree to map each object back to its DOM element.
Note that the accessibility tree only contains simplified information,
which includes a subset of HTML elements that are deemed to be
useful (e.g., it does not include the hidden input element). For
the purpose of SSO detection, we apply a set of regular expressions
on the accessibility tree values to find potential candidates for
SSO buttons, and username and password fields related to our test
workflows. For instance, in Listing 2, the last node is a candidate
for Facebook’s SSO button that can initiate the login process.
1788
Listing 1: A sample HTML code for a login page.
Login Form
Email
Password
Login
Listing 2: A sample output of accessibility tree obtained from Web
Accessibility API
{
"role": "WebArea",
"name": "",
"children": [
{
"role": "heading",
"name": "Login Form",
"level": 3
"role": "text",
"name": "Email"
"role": "textbox",
"name": "",
"required": true,
"invalid": "true"
"role": "text",
"name": "Password"
"role": "textbox",
"name": "",
"required": true,
"invalid": "true"
"role": "button",
"name": "Login"
"role": "Iframe",
"name": "fb:login_button Facebook Social Plugin"
},
{
},
{
},
{
},
{
},
{
},
{
}
]
}
B. Relationship between RPs and IdP
In §IV-A we discussed the subtle distinction between IdP-side
applications (i.e., App IDs) and RPs; each IdP-side application can
belong to a website called an RP, or provide a service to different
websites by positioning itself between the IdP and the websites
and form a one-to-many relationship. Figure 9 visualizes the
one-to-many relationship between the IdP, IdP-side applications and
websites in our data. The green nodes are the IdP-side applications
that likely belong to the same organization (based on domain
names) and red nodes are the IdP-side applications with different
domains from the websites. Table III presents an example of a
shared App ID between seven websites, where three of the websites
have errors. We also discussed the negative implication of such
one-to-many relationship particularly for the ones that are not
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 10: Permission distribution of apps in Business Tools.
Fig. 9: One-to-many relationship between the App IDs (red,green)
and websites (grey). Websites with the same App ID are connected
to an intermediate node which is colored based on whether the con-
nected websites have the same (green) or different (red) second-level
domains. The blue node represents the Identity Provider (Facebook).
TABLE III: Example of application that is shared between seven
websites and not configured correctly on three of them.
Fig. 11: Permission distribution of apps in Applications.
App ID
1140740696088074
1140740696088074
1140740696088074
1140740696088074
1140740696088074
1140740696088074
1140740696088074
Rank
883
3753
8077
8328
11844
19929
53896
Domain
Login URL
Error
www.jotform.com/signup/
jotformeu.com/signup
www.jotform.us/signup
www.jotform.me/signup
jotform.com
jotformeu.com
jotform.us
jotform.me
jotformpro.com www.jotformpro.com/signup
jotform.co
jotformz.com
www.jotform.co/signup
www.jotformz.com/signup
Redirect URI not whitelisted
Redirect URI not whitelisted
Redirect URI not whitelisted
TABLE IV: Permission combination frequencies in applications.
Permission Combinations
public profile, email
public profile
public profile, user friends, email
public profile, email, user birthday
Applications
1,325
54
29
9
managed by the same organizations (red nodes): apart from the
obvious privacy implications, the potential misconfigurations in the
IdP-side applications can indirectly propagate to the websites and its
impact is multiplied by the number of websites connected to them.
C. App Permissions
The majority of the collected Facebook applications discussed
in §IV-A belong to the applications category, and Figure 11
illustrates their SSO permission distribution. A handful of collected
applications in our data belonged to the business_tools
category where the applications can request different permissions for
managing pages and groups in addition to typical permissions such
as public_profile, email and user_posts. Figure 10
illustrates the permission distributions for apps in the busi-
ness_tools category. We note that public_profile and
email are requested more frequently in both categories, which
is intuitive since they provide basic personal information about the
users. In contrast, user_posts is requested less frequently in
both categories, which may indicate that either apps are not interested
in interacting with users’ posts or requesting such permissions
may generate negative feedback from users and decrease the
adoption rate. Additional exploration is needed for understanding
the underlying cause, since this falls out of the scope of our study.
1789
Fig. 12: Counts of accepted/rejected cookies per rank for the first
and the last day (40).
D. Cookie Rejection Ratio
In §IV-B, we studied the impact of cookie expiration over
time in RPs. Figure 12 shows the number of RPs that accepted or
rejected cookies per their rank, in the first day after login and 40
days later. As can be observed, both popular (i.e., highly ranked)
and unpopular RPs accepted cookies even 40 days after login.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
100101102103Frequencyuser_postsuser_hometownuser_age_rangeuser_linkuser_likesuser_photosuser_genderuser_locationuser_birthdayuser_friendsemailpublic_profilePermission1 - 10k10k - 20k20k - 30k30k - 40k40k - 50k50k - 60k60k - 70k70k - 80k80k - 90k90k - 100kRank050100150200250Count2021-02-14RejectedAccepted1 - 10k10k - 20k20k - 30k30k - 40k40k - 50k50k - 60k60k - 70k70k - 80k80k - 90k90k - 100kRank2021-03-26RejectedAcceptedFig. 13: Dev-mode switched on/off during 50 days.
E. Development Mode
In §IV-A we discussed how enabling the development mode
essentially renders an RP inaccessible. By observing and measuring
how often the IdP-side apps disabled and enabled the development
mode over 50 days, we illustrated the importance of interacting with
the RPs for accurately measuring SSO related features. Figure 13
shows how frequently IdP-side apps switched development mode
on/off over the span of 50 days.
F. Ransom-style Example
Here, we provide an instance of a ransom-style attack on
connpass. An attacker can log into connpass using the IdP’s
hijacked session, de-link the user’s IdP from connpass after
adding her own email address and setting a password or linking an-
other IdP (e.g., Twitter). As a result of the de-linking and re-linking,
the user will not be able to access their RP account since there is no
other viable authentication path for them. Had the RP followed the
policy and merged the accounts, the user would have had another
path (e.g., over email) to take back control of their account.
G. Countermeasures
Extension for user awareness. As mentioned in §V, we have
developed a Chrome extension that informs users visiting an RP
about a subset of the issues detected by our system, which can
be inferred by visiting the website and without conducting our
entire black-box auditing workflow. For instance, if the access
tokens of RPs that use Facebook’s official SDK are automatically
and frequently validated and whether their redirection traffic is
protected [10]. By checking for the presence of SDKs, we display
a set of preferred IdPs to the user to choose from, based on
whether they are using the official SDKs. Our extension uses the
chrome.debugger API to get a copy of the accessibility tree
and looks for potential IdPs. We also pre-load and instrument the
well-know IdP SDKs (i.e., Facebook, Apple, and Google) to track
whether they are used by the page. Upon detecting the IdPs, we
check for the presence of the SDKs, and for Facebook we also
check whether it has been initialized. For the compliance tests that
can’t be done in a live setting (e.g., merge tests), our extension could
incorporate IdPs’ transparency reports to help users make more
informed decisions. While our prototype’s functionality is limited
due to the inherently complex nature of our framework’s auditing
process, we hope that our work motivates major IdPs and leads to
stricter RP-compliance requirements being enforced.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:04 UTC from IEEE Xplore.  Restrictions apply. 
1790
Dev-mode OnDev-mode OffOverall01234Count01020304050Day02468Dev-mode OffDev-mode On