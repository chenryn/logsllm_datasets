   "cs", "ds", "es", "fs", "gs"  
};
RegNames
 数组通常在文件reg.cpp 中声明。这个文件也是样本处理器模块声明 LPH
 的地方，它可以静态声明 RegNames
 。寄存器枚举在一个头文件中声明，通常这个文件以处理器名称命名（这里可能为 x86.hpp），如下所示：
enum x86_regs {  
   r_eax, r_ebx, r_ecx, r_edx, r_edi, r_esi, r_ebp, r_esp,  
   r_ax, r_bx, r_cx, r_dx, r_di, r_si, r_bp, r_sp,  
   r_al, r_ah, r_bl, r_bh,  r_cl, r_ch, r_dl, r_dh,  
   r_cs, r_ds, r_es, r_fs, r_gs  
};
一定要维护寄存器名称数组与相关联的常量集合之间的正确对应关系。在格式化指令操作数时，寄存器名称数组与枚举的寄存器常量共同作用，使处理器模块能够迅速查询寄存器名称。这两个数据声明用于初始化 LPH
 中的其他字段：
int   regsNum;            // total number of registers  
  char  **regNames;         // array of register names
通常，这两个字段分别使用 qnumber（RegNames）
 和RegNames
 进行初始化，这里的 qnumber
 是一个宏，它在 pro.h中定义，用于计算一个静态分配的数组的元素数量。
无论是否使用段寄存器，IDA 处理器模块总是需要指定与段寄存器有关的信息。由于 x86 使用了段寄存器，前面的例子配置起来相当简单。段寄存器使用 processor_t
 中的下列字段配置：
➊ // Segment register information (use virtual CS and DS registers if  
  // your processor doesn't have segment registers):  
    int   regFirstSreg;        // number of first segment register  
    int   regLastSreg;         // number of last segment register  
    int   segreg_size;         // size of a segment register in bytes  
➋ // If your processor does not use segment registers, You should define  
   // 2 virtual segment registers for CS and DS.  
   // Let's call them rVcs and rVds.  
     int   regCodeSreg;         // number of CS register  
     int   regDataSreg;         // number of DS register
要初始化我们假定的 x86 处理器模块，需要按如下顺序对前面的 5 个字段进行初始化：
r_cs, r_gs, 2, r_cs, r_ds
请注意➊和➋处有关段寄存器的注释。即使处理器并不使用段寄存器，IDA 总是需要有关段寄存器的信息。回到 Python 示例，在设置寄存器对应关系时，我们几乎没有什么工作要做，因为Python 解释器采用的是一个基于栈的体系结构，它并不使用寄存器，但我们仍然需要处理段寄存器问题。典型的处理方法是虚构最小的一组段寄存器的名称和枚举常量值（代码和数据）。基本上，我们虚构段寄存器，只是因为 IDA 需要它们。但是，即使IDA 需要它们，我们绝没有义务使用它们，因此，在处理器模块中，我们完全忽略它们。对于Python 处理器，我们做如下处理：
//in reg.cpp  
static char *RegNames = { "cs", "ds" };  
//in python.hpp  
enum py_registers { rVcs, rVds };
声明就绪后，我们可以回过头来使用下面的值初始化 LPH
 中的相应字段：
rVcs, rVds, 0, rVcs, rVds
在开始执行 Python 处理器的任何行为之前，都应花一些时间了解与初始化 LPH
 结构体有关的一些简单知识。processor_t
 的前5 个字段如下所示：
int version; // should be IDP_INTERFACE_VERSION  
int id;     // IDP id, a PLFM_xxx value or self assigned > 0x8000  
ulong flag; // Processor features, bitwise OR of PR_xxx values  
int cnbits; // Number of bits in a byte for code segments (usually 8)  
int dnbits; // Number of bits in a byte for data segments (usually 8)
这里的version
 字段看起来有些眼熟，因为插件和加载器模块也使用了这个字段。对于自定义处理器模块来说，id
 字段必须是一个大于0x8000的、自分配的值。flag
 字段以在idp.hpp中定义的PR_
 xxx 标志组合描述处理器模块的各种特点。对于Python 处理器，我们仅指定PR_RNAMESOK
 和PRN_DEC
 ，前者允许将寄存器名称用作位置名称（因为我们没有寄存器，这不会造成问题），后者将默认的数字显示格式设置为十进制。剩下的两个字段 cnbits
 和dnbits
 分别设置为8 。
19.3.3 分析器
现在，我们已经在 LPH
 结构体中填入了足够的信息，可以开始考虑处理器模块将要执行的第一个组件——分析器。在处理器模块示例中，分析器通常由 ana.cpp文件中的一个名为 ana
 （你可以使用任何你喜欢的名称）的函数实现。这个函数的原型非常简单，如下所示：
int idaapi ana(void); //analyze one instruction and return the instruction length
你必须用一个指向分析器函数的指针初始化 LPH
 对象的u_ana
 成员。分析器的工作包括分析单条指令，用与指令有关的信息填充全局变量 cmd
 ，返回指令的长度。分析器不得对数据库进行任何修改。
变量cmd
 是insn_t
 对象的一个全局实例。在 ua.hpp 中定义的 insn_t
 类用于描述数据库中的单条指令。它的声明如下所示：
     class insn_t {  
     public:  
       ea_t cs; // Current segment base paragraph. Set by kernel  
       ea_t ip; // Virtual address of instruction (within segment). Set by kernel  
       ea_t ea; // Linear address of the instruction. Set by kernel  
➊     uint16 itype; // instruction enum value (not opcode!). Proc sets this in ana  
➋     uint16 size;  // Size of instruction in bytes. Proc sets this in ana  
       union {       // processor dependent field. Proc may set this  
         uint16 auxpref;  
         struct {  
           uchar low;  
           uchar high;  
         } auxpref_chars;  
       };  
       char segpref;     // processor dependent field.  Proc may set this  
       char insnpref;    // processor dependent field.  Proc may set this  
➌     op_t Operands[6]; // instruction operand info.  Proc sets this in  
       char flags;       // instruction flags.  Proc may set this  
     };
在调用分析器函数之前，IDA 内核（IDA 的核心）会使用指令的分段的线性地址填充 cmd
 对象的前3 个字段。之后，再由分析器填充其他字段。需要分析器填充的主要字段为 itype
 （➊）、size
 （➋）和 Operands
 （➌）。itype
 字段必须设置为前面讨论的一个枚举指令类型值。size
 字段必须设置为指令的总大小，并且应用作指令的返回值。如果无法解析指令，分析器应返回 0。最后，一条指令最多只能有 6 个操作数，分析器应填充与指令使用的每个操作数有关的信息。
分析器函数通常使用一个分支语句来实现。第一步，分析器通常会从指令流中请求一个或几个（取决于处理器）字节，并将它们作为分支测试变量。SDK 提供特殊的函数供分析器使用，以从指令流中获取字节。这些函数如下所示：
//read one byte from current instruction location  
uchar ua_next_byte(void);  
//read two bytes from current instruction location  
ushort ua_next_word(void);  
//read four bytes from current instruction location  
ulong ua_next_long(void);  
//read eight bytes from current instruction location  
ulonglong ua_next_qword(void);
其中的current instruction location
 （当前指令位置）是 cmd.ip 文件中的初始值。每次调用一个ua_next_xxx
 函数，都会产生一个副作用，即cmd.size
 的大小会根据被调用的 ua_next_xxx
 函数所请求的字节数量（1、2、4 或8）递增。获取的字节必须充分解码，以在itype
 字段中分配适当的指令类型枚举值，决定指令所需的任何操作数的数量和类型，然后决定指令的总长度。在解码的过程中，需要用到其他指令字节，直到从指令流中获取整条指令。只要你使用ua_next_xxx
 函数，cmd.size
 将自动更新，因而你不必跟踪你已经从给定指令中获取了多少个字节。从宏观角度看，分析器有点类似于现有 CPU 所使用的指令提取和指令解码阶段。在现实生活中，对使用固定长度的指令的处理器进行指令解码会更加容易，RISC体系结构即是如此。而对使用可变长度的指令的处理器进行指令解码则会更加困难，如 x86 处理器。
使用获取到的字节，分析器必须为指令使用的每一个操作数初始化cmd.Operands
 数组中的一个元素。指令操作数使用在 ua.hpp 中定义的 op_t
 类的实例表示，如下所示：
class op_t {  
 public:  
   char n;  // number of operand (0,1,2).  Kernel sets this do not change!  
   optype_t type; // type of operand.  Set in ana, See ua.hpp for values  
   // offset of operand relative to instruction start  
   char offb;  //Proc sets this in ana, set to 0 if unknown  
   // offset to second part of operand (if present) relative to instruction  
 start  
   char offo;  //Proc sets this in ana, set to 0 if unknown  
   uchar flags; //Proc sets this in ana.  See ua.hpp for possible values  
   char dtyp; // Specifies operand datatype. Set in ana. See ua.hpp for values 
   // The following unions keep other information about the operand  
   union {  
     uint16 reg;    // number of register for type o_reg  
     uint16 phrase; // number of register phrase for types o_phrase and o_displ  
                    // define numbers of phrases as you like  
   };  
   union {          // value of operand for type o_imm or  
     uval_t value;  // outer displacement (o_displ+OF_OUTER_DISP)  
     struct {       // Convenience access to halves of value  
        uint16 low;  