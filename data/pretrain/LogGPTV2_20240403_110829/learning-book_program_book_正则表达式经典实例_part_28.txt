内容，或者按照你的想法对正则表达式匹配的原始字符事做任何事情。
解决方案
C#
如果只是做一次性的快速检查，你可以使用如下的静态调用：
int matchstart, matchlength = -1;
Match matchResult = Regex.Match(subjectString, @"\d+") ;
if (matchResult.Success) {
matchstart = matchResult.Index;
matchlength = matchResult.Length;
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
int matchstart,matchlength = -1;
+pe)xabay mou=aoxabaxabo
Match matchResult = regexObj.Match(subjectString).Value;
if (matchResult.Success) {
matchstart = matchResult.Index;
matchlength = matchResult.Length;
→
VB.NET
如果只是做一次性的快速检查，你可以使用如下的静态调用：
Dim MatchStart = -1
Dim MatchLength = -1
Dim MatchResult =Regex.Match(SubjectString,"\d+")
If MatchResult.Success Then
MatchStart = MatchResult.Index
MatchLength = MatchResult.Length
End If
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
Dim MatchStart = -1
Dim MatchLength =-1
Dim RegexObj As New Regex ("\d+")
132
第3章
www.TopSage.com
---
## Page 149
Dim MatchResult = Regex,Match(SubjectString,"\d+")
If MatchResult.Success Then
MatchStart = MatchResult.Index
MatchLength = MatchResult,Length
End If
Java
int matchStart,matchLength = -1;
Pattern regex = Pattern.compile("\\d+");
Matcher regexMatcher = regex.matcher(subjectString);
if (regexMatcher.find()){
matchStart = regexMatcher.start();
matchLength = regexMatcher.end()-matchStart;
JavaScript
var matchstart = -1;
var matchlength = -1;
var match =/\d+/.exec(subject);
if (match){
matchstart = match.index;
matchlength = match[0].length;
PHP
if (preg_match('/\d+/`，$subject，$groups,PREG_OFFSET_CAPTURE)）{
$matchstart = Sgroups[0]{1];
$matchlength = strlen($groups[0][0]);
Perl
if （$subject =~m/\d+/g）{
$matchlength = length($&);
$matchstart = length($^);
1
Python
如果只是做一次性的快速检查，你可以使用如下的全局函数：
matchobj = re.search(r"\d+"，subject)
if matchobj:
matchstart = matchobj.start()
matchlength = matchobj.end() -matchstart
使用正则表达式编程
133
www.TopSage.com
---
## Page 150
要想重复使用同一个正则表达式，就需要使用一个编译过的对象：
reobj = re.compile(r"\d+")
matchobj = reobj.search(subject)
if matchobj :
matchstart = matchobj.start()
matchlength = matchobj.end() - matchstart
Ruby
你可以使用=～操作符和它的变量$&：
if subject =~/regex pattern/
matchstart = $~.begin()
matchlength =$~.end()-matchstart
end
另外，也可以使用一个Regexp对象来调用match方法：
matchobj = /regex pattern/.match(subject)
if matchobj
matchstart = matchobj.begin()
matchlength = matchobj.end() - matchstart
end
讨论
.NET
要想得到匹配的位置和长度，我们可以使用在上一个实例中讲过的同一个Regex.MatchO
方法。这次，我们使用的是Regex.Match(返回的Match对象的Index和Length两个
属性。
符开始的，那么Index就是0。如果匹配是从字符事中的第二个字符开始的，那么Index
就是1。Index的最大值是目标字符串的长度。只有在正则式在字符串的结尾找到-一个
长度为0的匹配时，才会出现这种情况。例如，只包含字符串结尾定位符的正则式Z
总是会匹配到字符串的末尾。
Length指的是匹配到的字符数量。一个合法的匹配也有可能长度为0。例如，只包含
单词边界\b的正则表达式总是会在字符串中第一个单词的开始处找到一个长度为0
的匹配。
如果匹配失败，那么Regex.MatchO还是会返回一个Match对象。它的Index和Length
属性的值都是0。这些值在一个成功的匹配中也可能出现。包含字符串起始定位符心A）
的正则表达式就会在字符事的并始处找到一个长度为0的匹配。因此，你不能依赖
134第3章
www.TopSage.com
---
## Page 151
Match.Index或Match.Length来决定匹配尝试是否成功。判断匹配是否成功应当使用
Match.Success。
Java
要想得到匹配的位置和长度，可以调用在前一个实例中讲过的Matcher.findO。当findO
返回true的时候，不用任何参数调用Matcher.startO就可以获得正则匹配的第一个字符
的位置索引。不用任何参数调用endO则可以得到该匹配之后的第一个字符的位置索引。
把结束位置减去起始位置就可以得到匹配的长度，它的值也可能是0。如果你在调用
findO之前调用startO或者endO，那么就会得到一个IllegalStateException例外。
JavaScript
使用一个regexp对象调用execO方法，可以得到一个关于匹配详细信息的数组。这
个数组中会包含几个属性。index属性会保存正则匹配在自标字符事中的开始位置。
如果匹配是从字符串的开头开始，那么index的值是0。数组中的0号元素中保存
的是整个正则匹配的一个字符事。使用这个字符事的length属性，就可以知道匹配
的长度。
如果正则表达式不能匹配这个字符串，那么regexp.execO会返回null。
不要使用execO返回的数组中的lastIndex属性来确定匹配的终止位置。在一个严格的
JavaScript实现中，lastIndex根本不会在返回的数组中出现，而只会出现在regexp对象
中。你同样也不应当使用regexp.lastIndex。由于不同浏览器之间的区别，它也是不可靠
的（实例3.11中会介绍更多的细节）。正确的做法是，你应当把match.index和
match[O].length加起来确定正则匹配的结束位置。
PHP
上一个实例中讲解了如何能够通过给preg_match(传递第三个参数来得到正则表达式
匹配到的文本。你可以向这个函数传递-一个常量PREG_OFFSET_CAPTURE作为第四
个参数以获得匹配的位置。如果preg_matchO的返回值是1，这个参数就会改变在第三
个参数中保存的内容。
当你没有使用第四个参数，或者是把它设置为0的时候，传递给第三个参数的变量会
获得一个字符串数组。当你把PREG_OFFSET_CAPTURE作为第四个参数的时候，该
变量会获得一个数组的数组。在外层数组的第一个元素中依然是整个匹配（参见上一
个实例中的讲解），而后面数组元素中依然是不同的捕获分组（参见下一个实例）。但
是，在每个元素中保存的不仅仅是正则式或捕获分组匹配到的文本的一个字符串，数
组每个元素会实际上是包含两个值的一个数组：这两个值分别是匹配到的文本，以及
匹配在字符串中的位置。
使用正则表达式编程135
www.TopSage.com
---
## Page 152
要得到关于整个匹配的详细信息，第0个元素的第0个子元素会告诉我们正则式匹配
到的文本。我们把它传递给strlenO函数就可以计算它的长度。第0个元素的第1个子
元素会保存一个整数，代表匹配在目标字符事中的起始位置。
Perl
要得到匹配的长度，我们只需要计算保存整个正则表达式匹配的变量$&的长度。要
得到匹配的开始位置，我们可以计算保存在正则匹配之前的字符事中文本的变量$的
长度。
Python
MatchObject的startO方法会返回在字符串中正则表达式匹配开始的位置。endO方法则
会返回在匹配之后的第一个字符的位置。当找到一个长度为0的正则表达式匹配的时
候，这两个方法会返回相同的值。
可以通过给start(和endO提供一个参数来获取正则表达式中的某个捕获分组匹配到的
文本范围。调用start（1）可以得到第-个捕获分组的开始位置，而调用end(2）会得到第
二个分组的结束位置，以此类推。Python最多支持99个捕获分组。第0个分组是整个
正则表达式匹配。如果使用一个比正则表达式中的捕获分组个数还大的数（最大不能
超过99），那么就会造成startO和endO产生一个IndexError例外。如果分组编号是合法
的，但是分组并不参与正则匹配，那么startO和endO都会为该分组返回-1。
如果想要在一个二元组中保存起始和终止位置，那么应该使用匹配对象来调用spanO
方法。
Ruby
实例3.5使用$~操作符来查找字符串中的第一个正则匹配。这个操作符的一个副作用
都是一个局部变量。这意味着你可以使用该变量的内容，置到当前方法退出，或者直
到你下次在方法中使用=～操作符，在此过程中也不必担心另外一个线程或你的线程中
的另外一个方法会修改这个变量。
如果想要得到多个正则匹配的详细信息，那么可以使用一个Regexp对象调用matchO
方法。这个方法会接受自标字符事作为它的唯一参数。当找到匹配时，它会返回一个
MatchData实例，否则返回nil。它还会把变量=～赋值为同一个MatchObject实例，但
并不会修改保存在其他变量中的MatchObject实例。
MatchData对象保存关于一个正则表达式匹配的所有详细信息。实例3.7和3.9会讲解
如何获得正则表达式和捕获分组匹配到的文本。
beginO方法会返回正则匹配在自标字符事中的并始位置。endO会返回在正则匹配之后
136第3章
www.TopSage.com
---
## Page 153
的第一个字符的位置。offsetO会返回包含起始和结束位置的一个数组。这三个方法都
可以接受-一个参数。传0给它们的话就可以得到整个正则匹配的位置，而传一个正整
数给它们，就可以得到相应的捕获分组的位置。例如，begin（1）会返回第一个捕获分组
的起始位置。
不要试图使用lengthO或sizeO获得匹配的长度。这两个方法都会返回从MatchData得到
的数组中的元素个数，这会在实例3.9中加以讲解。
参见
实例3.5和3.9。
3.9获取匹配文本的一部分
问题描述
在实例3.7中，用一个正则表达式来匹配目标文本中的一个子串，但是在这个问题中，
我们想要匹配的只是该子串的一部分。如果想把需要的部分分离出来，就应该在你的
正则表达式中添加一个捕获分组（参见实例2.9）。
例如，正则表达式(http://([a-z0-9.-]+)会在字符串Pleasevisithttp://www.regexcookbook.com
for moreinformation中匹配到http://www.regexcookbook.com。在第一个捕获分组中的
正则部分匹配到的是www.regexcookbook.com，而你想要把第一个捕获分组捕获到的域
名保存到一个字符串变量中。
我们用这个简单的正则表达式来解释捕获分组的概念。在第7章中，还可以找到用来
匹配URL的更加精确的正则表达式。
解决方案
#
如果只是做一次性的快速检查，你可以使用如下的静态调用：
string resultString = Regex.Match(subjectString,
"http://([a-z0-9.-]+)").Groups[1].Value
要想重复使用同一个正则式，那么就需要构造一个Regex对象：
（(+[-'6-0z-e])//:du)xabay mau =qoxabax xaba
string resultString = regexObj.Match(subjectString).Groups[1].Value;
VB.NET
如果只是做一次性的快速检查，你可以使用如下的静态调用：
使用正则表达式编程
137
www.TopSage.com
---