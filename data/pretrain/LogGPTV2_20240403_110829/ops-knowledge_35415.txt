User: 请编写一个脚本，能够自动化执行数据库备份和恢复操作。
Assistant: 首先，需要确定所使用的数据库管理系统以及备份和恢复策略。以下是一个使用 MySQL 数据库的简单备份和恢复脚本：

备份脚本：

```bash
#!/bin/bash

# 定义数据库的用户名和密码
DB_USER="your_username"
DB_PASS="your_password"

# 定义备份目录和文件名
BACKUP_DIR="/var/backups/mysql"
BACKUP_FILE="backup_$(date +%F).sql"

# 创建备份目录
mkdir -p "$BACKUP_DIR"

# 备份数据库
mysqldump -u $DB_USER -p$DB_PASS --all-databases > "$BACKUP_DIR/$BACKUP_FILE"

# 压缩备份文件
gzip "$BACKUP_DIR/$BACKUP_FILE"

# 删除7天之前的备份文件
find "$BACKUP_DIR" -name "*.gz" -mtime +7 -delete

# 输出备份完成信息
echo "Backup completed: $BACKUP_DIR/$BACKUP_FILE.gz"
```

该脚本会将所有数据库备份到指定的目录，并将文件名添加当前日期。备份文件会自动压缩，并删除7天前的备份。可以将此脚本添加到计划任务中，以便每天自动运行备份操作。

恢复脚本：

```bash
#!/bin/bash

# 定义数据库的用户名和密码
DB_USER="your_username"
DB_PASS="your_password"

# 定义备份文件路径
BACKUP_FILE="/var/backups/mysql/backup_2019-12-01.sql.gz"

# 解压备份文件
gunzip "$BACKUP_FILE"

# 恢复数据库
mysql -u $DB_USER -p$DB_PASS < "${BACKUP_FILE%.gz}"

# 删除解压后的备份文件
rm "${BACKUP_FILE%.gz}"

# 输出恢复完成信息
echo "Restoration completed."
```

该脚本将从指定的备份文件中恢复所有数据库。请注意，此脚本并不检查数据库是否已经存在或是否需要进行更改或删除。运行此脚本时应小心。同样，可以将此脚本添加到计划任务中，以便每天自动运行恢复操作。