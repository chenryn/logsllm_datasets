# SELinux, Firewall, and Configuration for `httpd`

SELinux messages are logged into `/var/log/audit/audit.log`, not `/var/log/messages`. 

### Important SELinux Contexts

- **httpd_sys_content_t**: For general files and directories to be served by `httpd`.
- **httpd_sys_script_exec_t**: For scripts (e.g., CGI) to be executed by the web server.
- **public_content_t**: For files that are to be shared with other SELinux-protected services.

### Firewall and SELinux for `httpd`

#### Very Secure File Transfer Protocol Daemon (`vsftpd`)

`vsftpd` is Red Hat's preferred FTP daemon. The "Very Secure" descriptor refers to the daemon, not the protocol.

- **RHCSA Objectives**: Enabling a default configuration.
- **RHCE Objectives**: Securely configuring anonymous access.

### Installation and Basic Configuration

**Package**: `vsftpd`

**Install**:
```bash
# yum -y install vsftpd
```

**Start and Configure Persistence**:
```bash
# systemctl start vsftpd
# systemctl enable vsftpd
```

In the default configuration, anonymous downloads are allowed from `/pub` (as shown to the client) and are placed in `/var/ftp/pub/` (as viewed on the server). Additionally, system users can log in using their username and password and access their home directories with read/write permissions. No anonymous uploads are permitted by default.

### FTP Documentation

- **Man Pages**:
  - `vsftpd.conf(5)`
  - `ftpd_selinux(8)`

### Investigate SELinux Implications for FTP

- **Find SELinux Filesystem contexts**:
  ```bash
  # semanage fcontext -l | grep "ftp"
  ```
- **Find SELinux port contexts**:
  ```bash
  # semanage port -l | grep "ftp"
  ```
- **Find SELinux booleans**:
  ```bash
  # semanage boolean -l | grep ftp
  ```

### Investigate Firewall Implications for FTP

- **Find ports that may need to be opened for FTP**:
  ```bash
  # grep ftp /etc/services
  ```

### Configuring a Secure "Drop-box" for Anonymous Uploads

1. **Create an upload directory** owned by `root.ftp` with 730 permissions:
   ```bash
   cd /var/ftp
   mkdir incoming
   chgrp ftp incoming
   chmod 730 incoming
   ```

2. **Modify SELinux**:
   - Set context of `public_content_rw_t` on the upload directory:
     ```bash
     semanage fcontext -a -t public_content_rw_t '/var/ftp/incoming(/.*)?'
     restorecon -rvv /var/ftp/
     ```
   - Enable the `allow_ftp_anon_write` boolean:
     ```bash
     setsebool -P allow_ftpd_anon_write on
     ```

3. **Modify `/etc/vsftpd/vsftpd.conf`**:
   ```ini
   anonymous_enable=YES
   local_enable=NO
   write_enable=YES
   anon_upload_enable=YES
   chown_uploads=YES
   chown_username=daemon
   anon_umask=077
   ```

4. **Modify iptables for inbound FTP**:
   - In `/etc/sysconfig/iptables-config`:
     ```ini
     IPTABLES_MODULES="nf_conntrack_ftp nf_nat_ftp"
     ```
   - Set rules:
     ```bash
     # iptables -A INPUT -p tcp --dport 21 -j ACCEPT
     # iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
     ```

## Session 10: NFS and Samba

### Network File System (NFS)

**Available Versions**:
- **NFS v2**: Original public NFS.
- **NFS v3**: Extensions and enhancements to v2.
- **NFS v4**: Complete redesign, Red Hat default, preferred except where backward compatibility is required.

### Packages

- **Group**: `nfs-file-server`
- **Packages**:
  - `nfs-utils`
  - `nfs4-acl-tools`

**Man Pages**:
- `showmount(8)`: Show mount information for an NFS server.
- `exportfs(8)`: Maintain table of exported NFS file systems.
- `exports(5)`: NFS server export table.
- `nfs(5)`: `fstab` format and options for the `nfs` and `nfs4` file systems.
- `nfs4_acl(5)`: NFSv4 Access Control Lists.
- `nfs4_editfacl(1)`: Manipulate NFSv4 file/directory access control lists.

### Configuration

- **`/etc/sysconfig/nfs`**: Used to restrict or allow various versions of the protocol and specify ports for firewall purposes.
- **`/etc/exports`**: Used to define the directories to be exported, the clients permitted to access them, and the mount options.

### Configuring an NFS Server

**Service**:
```bash
# systemctl start nfs
# systemctl enable nfs
```

**`/etc/exports` Example**:
```ini
/home 192.168.0.0/24(rw,root_squash) server1.example.com(rw,no_root_squash)
/pub *(ro,root_squash)
```
- **Note**: There should be no space between the host or subnet and the options defined in parentheses. Adding a space will result in a global export.

### User Mapping and Root Squashing

- **Commands**:
  - `exportfs`: Command to make exported directories immediately accessible to clients.
    - `-a`: Checks `/etc/exports` and exports any directories that are there but not yet exported.
    - `-u`: Unexports a previously exported filesystem.
  - `showmount -e`: Shows exports that would be available to your machine.

### Firewall Considerations

- **SELinux Considerations**:
  - **Man Pages**:
    - `nfs_selinux(8)`: Security Enhanced Linux Policy for NFS.
    - `nfsd_selinux(8)`: Security Enhanced Linux Policy for the `nfsd` processes.

### Mounting

- **Command**:
  ```bash
  mount nfsserv:/home /mnt/homes
  ```

### Automounter

- **Automatically mounts a directory when it is accessed and unmounts it after a specified idle time**.
- **Controlled by the `autofs` service**.
- **Master Configuration File**: `/etc/auto.master`
- **Sub Configuration Files**: Usually called `/etc/auto.*`

**Example**:
- **`/etc/auto.master`**:
  ```ini
  /misc    /etc/auto.misc
  /data    /etc/auto.data
  ```
- **`/etc/auto.data`**:
  ```ini
  pictures       -rw,soft,intr    nfs.example.com:/export/pics
  mp3s           -ro              /dev/sdd1
  ```

### Understanding Automount

- You must access the destination directory for it to automount.
- If nothing is automounted and you run `ls /data`, no files will be listed.
- If you run `ls /data/mp3s`, the system will mount the local partition `/dev/sdd1`.

### Samba

Samba is a project providing software capable of utilizing the SMB (Server Message Block) and CIFS (Common Internet File System) protocols to interoperate with systems using MS-Windows-style file and printer sharing.

- **Linux systems can use Samba to**:
  - Act as a client to SMB/CIFS servers.
  - Provide file and printer sharing services to clients.
  - Provide domain controller functionality in a limited subset of possible configurations.

### Accessing SMB/CIFS Shares

- **Graphically, using Nautilus**:
  - Use **Places | Connect to Server**, choose `Windows share` as the **Service Type** and provide the required credentials.
- **Occasional, FTP-like access from the command line**:
  ```bash
  smbclient //server/share/ -U username -W [domain or workgroup]
  ```
- **Through filesystem mounts**:
  ```bash
  mount -t cifs //server1/tmp /mnt/share -o credentials=/root/credentials
  ```
- **`/etc/fstab` entry**:
  ```ini
  //server/share /mnt/point cifs credentials=/root/credentials 0 0
  ```
- **Credentials File contents**:
  ```ini
  user=
  pass=
  domain=
  ```

### Samba Packages

- **Packages**:
  - `samba`
  - `samba-client`
  - `samba-common`
  - `samba-winbind`
  - `samba-domainjoin-gui` (Optional Repository)

### SELinux

- **SELinux notes** are at the top of the config file (`/etc/samba/smb.conf`) and the man page `samba_selinux(8)`.
- **SELinux Port Settings for Samba**:
  ```bash
  # semanage port -l | grep smb
  smbd_port_t                    tcp      137-139, 445
  ```
- **SELinux Booleans for Samba**:
  ```bash
  # semanage boolean -l | grep "smb\|samba"
  ```
- **SELinux fcontexts for Samba**:
  ```bash
  # semanage fcontext -l | grep "smb\|samba"
  ```

### Services

- **Start and Enable**:
  ```bash
  # systemctl start smb
  # systemctl enable smb
  ```

### `/etc/samba/smb.conf` (Global)

- **workgroup**: Specifies a shared Windows Workgroup or Domain name.
- **server string**: Provides a description of the server.
- **netbios name**: Specifies a name for the server for implementations where NetBIOS is still used.
- **Interfaces**: Used to bind the service only to particular network adapters or IP addresses.
- **Hosts Allow**: Used for host-based access control.

### `/etc/samba/smb.conf` Security Types

- **security**: Establishes the security model for the server.
  - **user**: Indicates that user credentials are held on the local server.
  - **share**: Indicates that credentials are not kept globally on an individual basis. All who report membership in the same workgroup are permitted access to the server and user authentication is configured in the share settings.
  - **domain**: Used when the Samba Server has been added to a Windows NT Domain. User access is authenticated through a primary or secondary domain controller.
  - **server**: User access is authenticated through a peer server that is not a domain controller.
  - **ads**: User access is authenticated through an Active Directory controller. Kerberos must be installed and configured to authenticate this machine's membership in the Domain.

### Samba Users and Passwords

- When the security model is set to `user`, local Samba users and passwords must be created. Typically, these accounts use the same user names as those configured on the local system. Use the `smbpasswd` command:
  ```bash
  # smbpasswd -a winuser
  ```

### `/etc/samba/smb.conf` (Shares)

- **Example**:
  ```ini
  [public]
    comment = Public Share
    path = /var/ftp/public
    browsable = yes
    writable = yes
  ```
  - **Path must have appropriate filesystem permissions**.

### Testing Configuration

- **Syntax of the `smb.conf` file can be tested before restarting the service**:
  ```bash
  # testparm
  ```

### Samba Firewalling Considerations

- **Samba uses TCP port 445**.
- **For backwards compatibility, UDP ports 137 and 138 and TCP port 139 may also need to be opened**.

### HowTo: Enable Home Directory Sharing via Samba

1. **Install the appropriate packages**.
2. **Start and enable the service**.
3. **Configure the workgroup name in `smb.conf`**.
4. **Create the required Samba users and passwords**.
5. **Enable the SELinux boolean permitting home directory access**.
6. **Configure the firewall**.
7. **Restart the service**.
8. **Test from another system**.

### HowTo: Configure a Group Share

1. **Create the appropriate group if required**.
2. **Create a collaborative directory**.
3. **Set the SELinux contexts on the shared directory**.
4. **Define the share in `smb.conf`**:
   - **Set the following values**:
     ```ini
     valid users = @groupname
     writable = yes
     ```
     - **Ensure that the directory permissions are 2770**.
   - **Or, to allow broader read-only permission**:
     ```ini
     writable = no
     write list = @groupname
     ```
     - **Relax the directory permissions to 2775**.
5. **Restart the service**.
6. **Test from another system**.

## Session 11: DNS and SMTP

### Types of DNS Servers

- **Authoritative**:
  - **Master (primary)**
  - **Slave (secondary)**
- **Non-authoritative**:
  - **Caching-only**

**Current RHCE Objectives** only require the ability to configure a few behaviors of a caching-only name server. The default configuration is now a caching-only nameserver listening only to localhost.

### Included DNS Servers

- **BIND**: Berkeley Internet Name Daemon.
- **Dnsmasq**: Lightweight Caching DNS server designed for small networks behind NAT routing.

We'll focus on BIND, but if you have existing familiarity with Dnsmasq, you may be able to satisfy the RHCE requirements using it instead.

### BIND Packages

- **bind**: The Berkeley Internet Name Domain (BIND) DNS (Domain Name System).
- **bind-utils**: Utilities for querying DNS name servers.
- **bind-chroot**: A chroot runtime environment for the ISC BIND DNS server.
- **bind-devel**: Header files and libraries needed for BIND DNS development.
- **bind-libs**: Libraries used by the BIND DNS packages.
- **bind-sdb**: BIND server with database backends and DLZ support.

### Installing and Enabling BIND

- **Install**:
  ```bash
  # yum -y install bind
  ```
- **Start and Enable**:
  ```bash
  # systemctl start named
  # systemctl enable named
  ```

### Useful Commands

- **rndc**: Interface to BIND.
- **host**: Utility for performing DNS lookups.