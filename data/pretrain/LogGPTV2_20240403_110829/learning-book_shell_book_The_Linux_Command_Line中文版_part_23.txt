## Page 181
### 15.17 查找安装了某个文件的软件包

要确定哪个软件包负责安装某个特定文件，可以使用以下命令：

| 风格 | 命令 |
| --- | --- |
| Debian | `dpkg --search file_name` |
| Red Hat | `rpm -qf file_name` |

**表15-12：包文件识别命令**

例如，在Red Hat系统中，查看哪个软件包安装了 `/usr/bin/vim` 文件：
```sh
rpm -qf /usr/bin/vim
```

### 15.18 总结归纳

在接下来的章节中，我们将探讨多种不同的程序，这些程序覆盖了广泛的应用领域。虽然大多数程序通常是默认安装的，但如果所需程序未安装在系统中，我们可能需要安装额外的软件包。通过我们新学到的软件包管理知识，我们应该能够安装和管理所需的程序。

#### Linux软件安装谣言

从其他平台迁移过来的用户有时会受到谣言的影响，认为在Linux系统中安装软件有些困难，并且不同发行版使用的各种打包方案是一个障碍。确实，对于那些希望仅以二进制版本发布专有软件的供应商来说，这是一个障碍。

然而，Linux软件生态系统基于开放源代码理念。如果一个程序开发人员发布了产品的源码，与系统发行版相关的开发人员可能会将其打包并包含在他们的资源库中。这种方法不仅保证了产品能很好地与系统发行版整合在一起，还为用户提供了一站式采购软件的便利，避免了用户逐一搜索每个产品的网站。

设备驱动程序也以类似的方式处理，但它们不是系统发行版资源库中的单独项目，而是Linux内核的一部分。通常情况下，Linux没有类似于“驱动盘”的东西。Linux内核要么支持一个设备，要么不支持。事实上，Linux支持的设备数量多于Windows。当然，如果你需要的特定设备不被Linux支持，那也没有办法。当这种情况发生时，你需要查找原因。缺少驱动程序支持通常由以下三种情况之一导致：

1. **设备太新**：许多硬件供应商没有积极支持Linux的发展，因此编写内核驱动代码的任务由一些Linux社区承担，这需要时间。
2. **设备太特殊**：并不是所有发行版都包含每个可能的设备驱动。每个发行版会构建自己的内核，因为内核是可配置的（这使得Linux可以在从手表到主机的各种设备上运行），因此它们可能会忽略某个特殊设备。在这种情况下，你可能需要自己定位、下载、编译和安装驱动程序。
3. **硬件供应商隐藏信息**：他们既不发布适用于Linux系统的驱动程序代码，也不提供技术文档供他人创建。这意味着硬件供应商试图保密此设备的程序接口。为了避免使用这种封闭的设备，建议移除并丢弃它。

### 15.19 拓展阅读

花些时间了解你所用发行版中的软件包管理系统。每个发行版都提供了关于自带软件包管理工具的文档。另外，这里有一些更普遍的资源：

- [Debian GNU/Linux FAQ 关于软件包管理一章](http://www.debian.org/doc/FAQ/ch-pkgtools.en.html)
- [RPM 工程的主页](http://www.rpm.org)
- [杜克大学 YUM 工程的主页](http://linux.duke.edu/projects/yum/)
- [Wikipedia 上关于元数据的文章](http://en.wikipedia.org/wiki/Metadata)

---

## Page 183
### 第16章 存储媒介

在前面的章节中，我们已经讨论了文件级别的数据操作。在这一章中，我们将从设备级别来考虑数据。Linux 具有惊人的能力来处理存储设备，无论是物理设备（如硬盘）还是网络设备或虚拟存储设备（如 RAID 和 LVM）。

然而，这不是一本关于系统管理的书籍，我们不会深入覆盖整个主题。我们将介绍一些概念和用于管理存储设备的重要命令。

为了进行本章的练习，我们将使用 USB 闪存、CD-RW 光盘（如果系统配备了 CD-ROM 刻录机）和一张软盘（如果系统配备的话）。

我们将学习以下命令：
- `mount`：挂载文件系统
- `umount`：卸载文件系统
- `fsck`：检查和修复文件系统
- `fdisk`：分区表控制器
- `mkfs`：创建文件系统
- `fdformat`：格式化软盘
- `dd`：将块数据直接写入设备
- `genisoimage (mkisofs)`：创建 ISO 9660 映像文件
- `wodim (cdrecord)`：将数据写入光存储介质
- `md5sum`：计算 MD5 校验码

---

## Page 184
### 16.1 挂载和卸载存储设备

最新的 Linux 桌面系统已经使存储设备管理对桌面用户变得非常容易。大多数情况下，只需将设备连接到系统中，它就能工作。在过去（例如 2004 年），这个过程必须手动完成。在非桌面系统（例如服务器）中，这仍然是一个主要的手动过程，因为服务器通常具有极端的存储需求和复杂的配置要求。

管理存储设备的第一步是将设备连接到文件系统树中。这个过程称为“挂载”，允许设备连接到操作系统。回想第三章，类 Unix 的操作系统（如 Linux）在单一文件系统树中维护连接在各个节点的各种设备。这与其他操作系统（如 MS-DOS 和 Windows 系统）形成对比，后者每个设备（例如 C:\, D:\ 等）保持单独的文件系统树。

有一个名为 `/etc/fstab` 的文件列出了系统启动时要挂载的设备（通常是硬盘分区）。下面是一个来自 Fedora 7 系统的 `/etc/fstab` 文件示例：

```sh
LABEL=/       /               ext3    defaults        1 1
LABEL=/home   /home           ext3    defaults        1 2
LABEL=/boot   /boot           ext3    defaults        1 2
tmpfs         /dev/shm        tmpfs   defaults        0 0
devpts        /dev/pts        devpts  gid=5,mode=620  0 0
sysfs         /sys            sysfs   defaults        0 0
proc          /proc           proc    defaults        0 0
LABEL=SWAP-sda3 swap          swap    defaults        0 0
```

在这个示例中列出的大多数文件系统是虚拟的，不适用于我们的讨论。就我们的目的而言，前三个是我们感兴趣的：

```sh
LABEL=/       /               ext3    defaults        1 1
LABEL=/home   /home           ext3    defaults        1 2
LABEL=/boot   /boot           ext3    defaults        1 2
```

这些是硬盘分区。每行由六个字段组成，如下所示：

| 字段 | 内容 | 说明 |
| --- | --- | --- |
| 1 | 设备名 | 传统上，这个字段包含与物理设备相关联的设备文件的实际名称（如 `/dev/hda1`）。然而，现代计算机有许多热插拔设备（如 USB 驱动器），许多现代 Linux 发行版使用文本标签与设备关联。当设备连接到系统时，标签会被读取，从而正确识别设备。 |
| 2 | 挂载点 | 设备所连接到的文件系统树的目录。 |
| 3 | 文件系统类型 | Linux 支持多种文件系统类型，大多数本地 Linux 文件系统是 ext3，但也支持 FAT16 (msdos)、FAT32 (vfat)、NTFS (ntfs)、CD-ROM (iso9660) 等。 |
| 4 | 选项 | 文件系统可以通过各种选项挂载，例如只读挂载或禁止执行任何程序（一种有用的安全特性）。 |
| 5 | 备份频率 | 一个数字，指定是否以及何时使用 `dump` 命令备份文件系统。 |
| 6 | 检查顺序 | 一个数字，指定 `fsck` 命令按什么顺序检查文件系统。 |

**表16-1: `/etc/fstab` 字段**

### 16.2 查看挂载的文件系统列表

`mount` 命令用于挂载文件系统。执行该命令而不带参数将显示当前挂载的文件系统列表：

```sh
[ne@linuxbox ~]$ mount
/dev/sda2 on / type ext3 (rw)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
devpts on /dev/pts type devpts (rw,gid=5,mode=620)
/dev/sda5 on /home type ext3 (rw)
/dev/sda1 on /boot type ext3 (rw)
tmpfs on /dev/shm type tmpfs (rw)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)
sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)
fusectl on /sys/fs/fuse/connections type fusectl (rw)
/dev/sdd1 on /media/disk type vfat (rw,nosuid,nodev,noatime,uhelper=hal,uid=500,utf8,shortname=mixed)
tvin4:/musicbox on /misc/musicbox type nfs4 (rw,addr=192.168.1.4)
```

列表的格式是：`设备 on 挂载点 type 文件系统类型 (选项)`。例如，第一行表示设备 `/dev/sda2` 作为根文件系统挂载，文件系统类型是 `ext3`，并且是可读写的（`rw` 选项）。

在这个列表的底部有两个有趣的条目。倒数第二行显示了一个 2G 的 SD 卡，挂载到了 `/media/disk` 上。最后一行是一个网络设备，挂载到了 `/misc/musicbox` 上。

第一次实验，我们将使用一张 CD-ROM。首先，在插入 CD-ROM 之前，我们查看系统：

```sh
[ne@linuxbox ~]$ mount
/dev/mapper/VolGroup00-LogVol00 on / type ext3 (rw)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
devpts on /dev/pts type devpts (rw,gid=5,mode=620)
/dev/hda1 on /boot type ext3 (rw)
tmpfs on /dev/shm type tmpfs (rw)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)
sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)
```

这个列表来自 CentOS 5 系统，使用 LVM 创建其根文件系统。像许多现代 Linux 发行版一样，该系统尝试自动挂载插入的 CD-ROM。当我们插入光盘后，我们看到以下输出：

```sh
[ne@linuxbox ~]$ mount
/dev/mapper/VolGroup00-LogVol00 on / type ext3 (rw)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
devpts on /dev/pts type devpts (rw,gid=5,mode=620)
/dev/hda1 on /boot type ext3 (rw)
tmpfs on /dev/shm type tmpfs (rw)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)
sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)
/dev/hdc on /media/live-1.0.10-8 type iso9660 (ro,noexec,nosuid,nodev,uid=500)
```

当我们插入光盘后，除了额外的一行外，我们看到与原来相同的列表。在列表末尾，我们看到 CD-ROM 已经挂载到了 `/media/live-1.0.10-8` 上，文件系统类型是 `iso9660`（CD-ROM）。

就我们的实验目的而言，我们对这个设备的名字感兴趣。当你自己进行这个实验时，设备名字可能会有所不同。

**警告**：在随后的实例中，至关重要的是你要密切注意用在你系统中的实际设备名，并且不要使用此文本中使用的名字！

还要注意音频 CD 和 CD-ROM 是不同的。音频 CD 不包含文件系统，因此在通常意义上，它不能被挂载。

现在我们有了 CD-ROM 光盘的设备名，让我们卸载这张光盘并将其重新挂载到文件系统树的另一个位置。我们需要超级用户身份（使用相应的命令）来进行操作，并使用 `umount` 命令卸载光盘：

```sh
[ne@linuxbox ~]$ su -
Password:
[root@linuxbox ~]# umount /dev/hdc
```

下一步是创建一个新的光盘挂载点。简单地说，一个挂载点就是文件系统树中的一个目录。它没有什么特殊的。它甚至不必是一个空目录，如果你将设备挂载到一个非空目录上，你将无法看到该目录中原来的内容，直到你卸载该设备。就我们的目的而言，我们将创建一个新目录：