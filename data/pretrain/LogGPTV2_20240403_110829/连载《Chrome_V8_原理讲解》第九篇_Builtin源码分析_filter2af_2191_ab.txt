    38.    BUILTIN_LIST(BUILD_CPP, BUILD_TFJ, BUILD_TFC, BUILD_TFS, BUILD_TFH, BUILD_BCH,
    39.                 BUILD_ASM);
    40.  //...................删除部分代码，留下最核心功能
    41.  //...................删除部分代码，留下最核心功能
    42.  }
上述代码只保留了最核心的Builtin初始化功能，初始化工作主要是生成并编译Builtin代码，并以独立功能的形式挂载到`isolate`上，以`BuildWithCodeStubAssemblerCS()`详细描述该过程。  
见下面代码，第一个参数是`isolate`，用于保存初化完成的`Builtin`；第二个参数全局变量`index`，`Builtin`存储在`isolate`的数组成员中，`index`是数组下标；第三个参数`generator`是函数指针，该函数用于生成`Builtin`；第四个参数是call描述符；最后一个是函数名字。
    1.  // Builder for builtins implemented in TurboFan with CallStub linkage.
    2.  Code BuildWithCodeStubAssemblerCS(Isolate* isolate, int32_t builtin_index,
    3.                                    CodeAssemblerGenerator generator,
    4.                                    CallDescriptors::Key interface_descriptor,
    5.                                    const char* name) {
    6.    HandleScope scope(isolate);
    7.    // Canonicalize handles, so that we can share constant pool entries pointing
    8.    // to code targets without dereferencing their handles.
    9.    CanonicalHandleScope canonical(isolate);
    10.   Zone zone(isolate->allocator(), ZONE_NAME);
    11.    // The interface descriptor with given key must be initialized at this point
    12.    // and this construction just queries the details from the descriptors table.
    13.    CallInterfaceDescriptor descriptor(interface_descriptor);
    14.    // Ensure descriptor is already initialized.
    15.    DCHECK_LE(0, descriptor.GetRegisterParameterCount());
    16.    compiler::CodeAssemblerState state(
    17.        isolate, &zone, descriptor, Code::BUILTIN, name,
    18.        PoisoningMitigationLevel::kDontPoison, builtin_index);
    19.    generator(&state);
    20.    Handle code = compiler::CodeAssembler::GenerateCode(
    21.        &state, BuiltinAssemblerOptions(isolate, builtin_index));
    22.    return *code;
    23.  }
在代码中，第19行代码生成Builtin源码，以第一个Builtin为例说明`generator(&state)`的功能，此时`generator`指针代表的函数是`TF_BUILTIN(RecordWrite,
RecordWriteCodeStubAssembler)`，下面是代码：
    1.  TF_BUILTIN(RecordWrite, RecordWriteCodeStubAssembler) {
    2.    Label generational_wb(this);
    3.    Label incremental_wb(this);
    4.    Label exit(this);
    5.    Node* remembered_set = Parameter(Descriptor::kRememberedSet);
    6.    Branch(ShouldEmitRememberSet(remembered_set), &generational_wb,
    7.           &incremental_wb);
    8.    BIND(&generational_wb);
    9.    {
    10.     Label test_old_to_young_flags(this);
    11.      Label store_buffer_exit(this), store_buffer_incremental_wb(this);
    12.      TNode slot = UncheckedCast(Parameter(Descriptor::kSlot));
    13.      Branch(IsMarking(), &test_old_to_young_flags, &store_buffer_exit);
    14.      BIND(&test_old_to_young_flags);
    15.      {
    16.        TNode value =
    17.            BitcastTaggedToWord(Load(MachineType::TaggedPointer(), slot));
    18.        TNode value_is_young =
    19.            IsPageFlagSet(value, MemoryChunk::kIsInYoungGenerationMask);
    20.        GotoIfNot(value_is_young, &incremental_wb);
    21.        TNode object =
    22.            BitcastTaggedToWord(Parameter(Descriptor::kObject));
    23.        TNode object_is_young =
    24.            IsPageFlagSet(object, MemoryChunk::kIsInYoungGenerationMask);
    25.        Branch(object_is_young, &incremental_wb, &store_buffer_incremental_wb);
    26.      }
    27.      BIND(&store_buffer_exit);
    28.      {
    29.        TNode isolate_constant =
    30.            ExternalConstant(ExternalReference::isolate_address(isolate()));
    31.        Node* fp_mode = Parameter(Descriptor::kFPMode);
    32.        InsertToStoreBufferAndGoto(isolate_constant, slot, fp_mode, &exit);
    33.      }
    34.      BIND(&store_buffer_incremental_wb);
    35.      {
    36.        TNode isolate_constant =
    37.            ExternalConstant(ExternalReference::isolate_address(isolate()));
    38.        Node* fp_mode = Parameter(Descriptor::kFPMode);
    39.        InsertToStoreBufferAndGoto(isolate_constant, slot, fp_mode,
    40.                                   &incremental_wb);
    41.      }
    42.    } //........................省略代码......................................
    43.    BIND(&exit);
    44.    IncrementCounter(isolate()->counters()->write_barriers(), 1);
    45.    Return(TrueConstant());
    46.  }
这个函数`TF_BUILTIN(RecordWrite,
RecordWriteCodeStubAssembler)`是生成器，它的作用是生成写记录功能的源代码，`TF_BUILTIN`是宏模板，展开后可以看到它的类成员`CodeAssemblerState*
state`保存了生成之后的源码。“用平台无关的生成器为特定平台生成源代码”是`Builtin`的常用做法，这样减少了工作量。函数执行完成后返回到`BuildWithCodeStubAssemblerCS`，生成的源代码经过处理后，最终由`code`表示，下面是`code`的数据类型。
    class Code : public HeapObject {
     public:
      NEVER_READ_ONLY_SPACE
      // Opaque data type for encapsulating code flags like kind, inline
      // cache state, and arguments count.
      using Flags = uint32_t;
    #define CODE_KIND_LIST(V)   \
      V(OPTIMIZED_FUNCTION)     \
      V(BYTECODE_HANDLER)       \
      V(STUB)                   \
      V(BUILTIN)                \
      V(REGEXP)                 \
      V(WASM_FUNCTION)          \
      V(WASM_TO_CAPI_FUNCTION)  \
      V(WASM_TO_JS_FUNCTION)    \
      V(JS_TO_WASM_FUNCTION)    \
      V(JS_TO_JS_FUNCTION)      \
      V(WASM_INTERPRETER_ENTRY) \
      V(C_WASM_ENTRY)
      enum Kind {
    #define DEFINE_CODE_KIND_ENUM(name) name,
        CODE_KIND_LIST(DEFINE_CODE_KIND_ENUM)
    #undef DEFINE_CODE_KIND_ENUM
            NUMBER_OF_KINDS
      };
    //..................省略........................
    //.............................................
上述代码中，可以看到从`code`的角度对`Builtin`进行了更详细的分类。另外`code`是堆对象，也就是说`Builtin`是由V8的堆栈进行管理，后续讲到堆栈时再详细说明这部分知识。图2给出函数调用堆栈，供读者自行复现。
在`SetupBuiltinsInternal()`中可以看到`AddBuiltin()`将生成的`code`代码添加到`isolate`中，代码如下。
    void SetupIsolateDelegate::AddBuiltin(Builtins* builtins, int index,
                                          Code code) {
      DCHECK_EQ(index, code.builtin_index());
      builtins->set_builtin(index, code);
    }
    //..............分隔线......................
    void Builtins::set_builtin(int index, Code builtin) {
      isolate_->heap()->set_builtin(index, builtin);
    }
所有`Builtin`功能生成后保存在`Address
builtins_[Builtins::builtin_count]`中，初始化方法`SetupBuiltinsInternal`按照`BUILTIN_LIST`的定义顺序依次完成所有Builtin的源码生成、编译和挂载到isolate。
## 2 Builtin子类型
从`Builtins`的功能看，它包括了：Ignition实现、字节码实现、以及ECMA规范实现等众多V8的核心功能，在`BUILTIN_LIST`定义中有详细注释，请读者自行查阅。前面讲过，从`BUILTIN`的实现角度分为七种类型，见下面代码：
    #define BUILD_CPP(Name)
    #define BUILD_TFJ(Name, Argc, ...) 
    #define BUILD_TFC(Name, InterfaceDescriptor)  
    #define BUILD_TFS(Name, ...) 
    #define BUILD_TFH(Name, InterfaceDescriptor) 
    #define BUILD_BCH(Name, OperandScale, Bytecode)  
    #define BUILD_ASM(Name, InterfaceDescriptor)
以子类型`BUILD_CPP`举例说明，下面是完整源代码。
    1.  Code BuildAdaptor(Isolate* isolate, int32_t builtin_index,
    2.                    Address builtin_address, const char* name) {
    3.    HandleScope scope(isolate);
    4.    // Canonicalize handles, so that we can share constant pool entries pointing
    5.    // to code targets without dereferencing their handles.
    6.    CanonicalHandleScope canonical(isolate);
    7.    constexpr int kBufferSize = 32 * KB;
    8.    byte buffer[kBufferSize];
    9.    MacroAssembler masm(isolate, BuiltinAssemblerOptions(isolate, builtin_index),
    10.                       CodeObjectRequired::kYes,
    11.                        ExternalAssemblerBuffer(buffer, kBufferSize));
    12.    masm.set_builtin_index(builtin_index);
    13.    DCHECK(!masm.has_frame());
    14.    Builtins::Generate_Adaptor(&masm, builtin_address);
    15.    CodeDesc desc;
    16.    masm.GetCode(isolate, &desc);
    17.    Handle code = Factory::CodeBuilder(isolate, desc, Code::BUILTIN)
    18.                            .set_self_reference(masm.CodeObject())
    19.                            .set_builtin_index(builtin_index)
    20.                            .Build();
    21.    return *code;
    22.  }
`BuildAdaptor`的生成功能由第13行代码实现，最终该代码的实现如下：
    void Builtins::Generate_Adaptor(MacroAssembler* masm, Address address) {
      __ LoadAddress(kJavaScriptCallExtraArg1Register,
                     ExternalReference::Create(address));
      __ Jump(BUILTIN_CODE(masm->isolate(), AdaptorWithBuiltinExitFrame),
              RelocInfo::CODE_TARGET);
    }
    }
上面两部分代码实现了第77号`Builtin`功能，名字是`HandleApiCall`，图2以`char`类型展示了生成的源代码。
总结：学习Builtin时，涉及很多系统结构相关的知识，本文讲解采用的是x64架构。每种`Builtin`的生成方式虽不相同，但分析源码的思路相同，有问题可以联系我。  
好了，今天到这里，下次见。  
 **恳请读者批评指正、提出宝贵意见**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**