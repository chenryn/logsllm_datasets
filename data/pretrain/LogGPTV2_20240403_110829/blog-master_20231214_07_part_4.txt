select * from ( 
select ctid,vid from t_videos_local_pool TABLESAMPLE system_time (5) where random() 相比users表的187GB, users_hll只有19GB.        
1、创建hll插件  
```  
create extension hll;   
```  
2、创建新的用户表, 使用hll存储已读视频列表    
```  
create unlogged table users_hll (      
  uid int8 primary key,  -- 用户ID        
  lid int,  -- 用户所在的地区ID        
  tag_scores1 tag_score[],    -- 标签、权重、对应标签获取多少条. 也可以使用jsonb存储          
  tag_scores2 tag_score[],    -- 标签、权重、对应标签获取多少条 limit = 0的放这个字段. 业务更新tag_scores根据两个字段的结果来计算. 主要是减少PG计算量. 
  readlist hll  -- 已读VID, 用hll表示. 不需要再分片, 压缩到一起.  
  -- 1个小小几十KB的hll可以储存上亿value组成的占位值. 可以提取hll的distinct值个数, 判断vid是否存在于hll中, 将vid添加到hll中, 两个hll可以合并、相减动作.  
);   
```  
3、定义一个函数, 把jsonb数组 转换为 hll.    
```  
create or replace function jsonbarr_to_hll (readlist jsonb) returns hll as $$   
  select hll_add_agg(hll_hash_bigint(x)) from (
    select jsonb_array_elements_text(readlist[i])::int8 AS x from generate_series(0,63) i
  ) t;
$$ language sql strict; 
```
转换后返回结果范例:  
```
select jsonbarr_to_hll(readlist) from users where uid=10000000;
jsonbarr_to_hllarr | \x148b7f18401500012840018001080210040020ca608c4008040000a10802100401194000880208046084030842210400000221004110c41080212040001421090440000500c6100005088a00040408021008413040101440104000080010802188430880008001110030002200c0710400004250000110802000011800129000090400a46130420100611000200c20104a01044109441084220800000823100020080028080100010840021060088201800200c261884118800088210942010c8118001100400080031405204421840000c000004218c00100020004008c21000210800008421194001084100841000021848228000180021800000407000400002000ca21840121420004413088030000000000000000460384410802018840100c51040200427388200840408c200140010c4200001088420088318840000001006210440108240040110c24180620080220400084000882000d020800330c0118400404002040019001100a138c0008ca208c81100001a00008805010030980100463484610908020804000200000108863204400802108002084213846200080184a11810008822084000040318400008a0008000880201021108a000020108401006018860100831006208c41000000840011001090260846508c40000410000108440208200082100020104220808018082080a1088400840320c420004008400108c60088808026004221800200c08000000000008840084201080418001080010004408802000003082301002000401800408020100200800100480000002840201800004610086100001004002010018000000c00006510400090010002010480104210000000422010010040210023080012000110821080040000400803404213800420c0108040100000884519043000410142018843084011086210460010601802008403400010b001080010182200460008212088000c03080a3008051842011042090021006000801081400040419820008020042008400004020040000442184c1180400006120042104230800140026088a002001108661044010000008270040500403084800004118003104011802018c6218462188a00084009000004220000020400108020804001001000001840208801008431004000441180020040218860004a00802160c2218c02200a008800100211100200000000001002211004200040204000484088010088000021104070088118c2000061118200004110006084400840328821000000000008040008000182218c060084000c0200105100212040008021000620142010c20100001042008001000410880001c0100022084a308840084600000030c42088210002518821004061902200481080290902200020000610884000c01094400040008c010004200420104210008300861080211044028005088230044008461210032082108807004020006008c000082100c810000008000018001000118c412102008821184400840100401080220044000c0008081080051048021440010c029c6218840000000042210942008a300004200400284010001100651840029c061082008442080400082141421000000800000400280010004118803310200842000846004010044000840000420046510002004403002201020088400002209480080030140300429100a3188021800008401094410080300460108211044108405088450004100c00180421002220c00090222002118c21088601042000c400800100004004010886011005
```
可以计算得出`jsonb`和`hll`存储已读视频的存储耗费的差别, `166GB vs 12GB`     
```
-- 36.5万个视频 ID jsonb 占用空间: 2MB
postgres=# select pg_column_size(readlist) from users where uid=1;
 pg_column_size 
----------------
        2014023
(1 row)
-- 1万个视频 ID jsonb 占用空间: 55.7KB
postgres=# select pg_column_size(readlist) from users where uid=10001;
 pg_column_size 
----------------
          55713
(1 row)
-- 2千个视频 ID jsonb 占用空间: 11.47KB
postgres=# select pg_column_size(readlist) from users where uid=10000000;
 pg_column_size 
----------------
          11474
(1 row)
-- 36.5万个视频 ID hll 占用空间: 1.29KB
postgres=# select pg_column_size(jsonbarr_to_hll(readlist)) from users where uid=1;
 pg_column_size 
----------------
           1287
(1 row)
-- 1万个视频 ID hll 占用空间: 1.29KB
postgres=# select pg_column_size(jsonbarr_to_hll(readlist)) from users where uid=10001;
 pg_column_size 
----------------
           1287
(1 row)
-- 2千个视频 ID hll 占用空间: 1.29KB
postgres=# select pg_column_size(jsonbarr_to_hll(readlist)) from users where uid=10000000;
 pg_column_size 
----------------
           1287
(1 row)
-- 本例子的1000万个视频, 使用jsonb存储明细已读视频ID, 耗费存储 166GB 
postgres=# select pg_size_pretty(2014023*10000::int8 + 55713*990000::int8 + 11474*9000000::int8);
 pg_size_pretty 
---------------- 
 166 GB
(1 row)
-- 本例子的1000万个视频, 使用hll存储lossy已读视频ID, 耗费存储 12GB 
postgres=# select pg_size_pretty(1287*10000000::int8);
 pg_size_pretty 
----------------
 12 GB
(1 row)
```
4、将users表的数据写入users_hll    
```  
insert into users_hll select uid, lid, tag_scores1, tag_scores2, jsonbarr_to_hll(readlist) from users;   
```
空间占用:  
```
postgres=# \dt+
                                          List of relations
 Schema |        Name         | Type  |  Owner   | Persistence | Access method |  Size  | Description 
--------+---------------------+-------+----------+-------------+---------------+--------+-------------
 public | t_videos_local_pool | table | postgres | unlogged    | heap          | 470 MB | 
 public | t_videos_top_pool   | table | postgres | unlogged    | heap          | 404 MB | 
 public | t_videos_vip_pool   | table | postgres | unlogged    | heap          | 404 MB | 
 public | users               | table | postgres | unlogged    | heap          | 187 GB | 
 public | users_hll           | table | postgres | unlogged    | heap          | 19 GB  | 
(5 rows)
```
 相比users表的187GB, users_hll只有19GB.      
5、改写查询SQL, 以 uid=1 , 搜索partian index 0号分区为例. 使用hll判断视频是否已读  
```  
select         
  (        
    select array_agg(vid) from         
    (        
      -- 全国视频池       
      select vid from t_videos_top_pool t1     
      -- 取出与用户喜爱的标签匹配的视频       
      where t1.tag=t.tag         
      -- 过滤已读VID , 使用partian index 0号分区        
      and hll_add(t.readlist, hll_hash_bigint(t1.vid)) <> t.readlist   
      -- 使用partian index 0号分区        
      and abs(mod(hashint8(vid),64)) = 0        
      -- 按视频推荐权重逆序取出视频        
      order by t1.score desc         
      -- limit 条数来自tag_scores1.limits, 其中全国池占比 50%        
      limit ceil(t.limits*0.5)          
    ) x   -- 全国池limit占比 50%        
  ) as top_pool,           
  (        
    select array_agg(vid) from         
    (        
      -- 本地视频池      
      select vid from t_videos_local_pool t1         
      where t1.tag=t.tag         
      -- 本地池, 增加一个查询条件: 查询与本地用户地域匹配的视频        
      and t1.lid = (select lid from users_hll where uid=1)      
      and hll_add(t.readlist, hll_hash_bigint(t1.vid)) <> t.readlist    
      and abs(mod(hashint8(vid),64)) = 0        
      order by t1.score desc         
      limit ceil(t.limits*0.3)        
    ) x   -- 本地池limit占比 30%         
  ) as local_pool,          
  (        
    select array_agg(vid) from         
    (        
      -- VIP视频池       
      select vid from t_videos_vip_pool t1         
      where t1.tag=t.tag         
      and hll_add(t.readlist, hll_hash_bigint(t1.vid)) <> t.readlist        
      and abs(mod(hashint8(vid),64)) = 0        
      order by t1.score desc         
      limit ceil(t.limits*0.2)        
    ) x    -- vip池limit占比 20%          
  ) as vip_pool              
from       
(        
  -- 从用户表取出用户的喜好标签, 以及每个标签的返回条数        
  select readlist, (unnest(tag_scores1)).tag as tag, (unnest(tag_scores1)).limits as limits from         
    users_hll where uid=1    
) t;    
```  
6、对比之前users表的uid=1和uid=10000000的查询结果, 看看lossy有没有什么影响?     
因为 hll值是有损压缩过的value, 不存在则一定不存在, 存在可能为假(可能是其他多个值的bit占位填充导致).   
所以 使用hll 做not in的判断, 可能会跳过某些其实未读的视频id.    
users_hll `uid=1` . 相比比jsonb的精准明细, hll 存储36.5 W的已读过滤还是有一定的失真, 某些未读的视频被判定为已读.  不过hll还可以调整精度, 具体参考: https://github.com/citusdata/postgresql-hll  
```
-[ RECORD 1 ]-------------------------------------------------------------------------
top_pool   | {1956445,1362842,1193697,1571516,1360160,1964639,1187014,1217925,1714888}
local_pool | 
vip_pool   | {2271124,2455866}
-[ RECORD 2 ]-------------------------------------------------------------------------
top_pool   | {1753513,1882835,1929038,1404547,1499636,1115958,1489987}
local_pool | 
vip_pool   | {2659002,2420573,2986719,2883030}
-[ RECORD 3 ]-------------------------------------------------------------------------
top_pool   | {1753513,1882835,1929038,1404547,1499636,1115958,1489987}