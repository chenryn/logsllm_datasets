¯𝑠𝑛 ←$ PChecker[Π](𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛)
parse ¯𝑠𝑛 as (S, T, W, 𝛾)
𝑟 ← 0; win ← false
𝒜Test
Return win
Test( ˜𝑤)
If ˜𝑤 ∈ T
𝑏 ← 1
𝑟 ← 𝑟 + 1
If (𝑏 = 1) and (𝑟 ≤ 𝑞)
win ← true
return 𝑏
Figure 11: Security games for online attacks.
samples without replacement, all keys are distinct). The robustness
of the encryption scheme implies that the probability that this
event occurs, and thus the gap between games G1 and G2 is upper-
bounded by Advrob
SE (ℛ)
|Pr [ G1 ⇒ 1 ] − Pr [ G2 ⇒ 1 ]| ≤ Advrob
SE (ℛ) .
Next we define game G3 which is identical to G2 except we return
SH to sampling keys with replacement. An analogous argument to
that above bounding the probability that two keys collide ensures
that
|Pr [ G2 ⇒ 1 ] − Pr [ G3 ⇒ 1 ]| ≤ (𝑡 · (𝑛 + 1 + 𝑞) + 1 + 𝑞)2
𝒜
Notice that G3 is identical to ONGUESS
Π,𝒯 , and so can be perfectly
simulated by an adversary 𝒜′ in this game. 𝒜′ simulates 𝒜’s Test
oracle by submitting 𝒜’s queries to his own oracle, and returning
the responses. Since 𝒜′ makes precisely the same set of queries as
𝒜, it follows that if 𝒜 makes at most 𝑞 queries, then 𝒜′ does also.
Since both games are identically distributed, it follows that
2𝜅+1
.
Advonguess
(𝒜′
, 𝑞) = Pr [ G3 ⇒ 1 ] ,
Π,𝒯
concluding the proof.
(𝒜, 𝑞).
Online guessing advantage. It remains to bound Advonguess
The key difference between the online guessing game and its offline
counterpart is that in the former each guess is tested for equality
against each of the 𝑡 +1 positions in the cache, whereas in the latter
a guess is only checked against the specific slot to which it was
guessed.
Π,𝒯
We reduce the online guessing game — in which the attacker’s
goal is to find 𝑞 guesses that maximizes its success probability — to
a weighted maximum coverage problem, and use an approximate
greedy algorithm to compute the attacker’s advantage. We can then
bound the advantage of the optimal attacker using the classic result
of [15]. However, due to the complex dependencies of the cached
elements, we could not show the reduction in the other direction:
that is to say, reduce an NP-complete problem to that of finding the
optimal set of guesses in the online guessing game. We strongly
believe that this problem is NP-hard but leave the detailed reduction
as an open problem.
Approximation via greedy algorithm. Recall that the maxi-
mum coverage problem is defined as follows. Given 𝑛 subsets 𝑆𝑖
from a universe 𝑈, the goal is to find 𝑘 subsets that cover the maxi-
mum number of elements. In the weighted version of this problem,
every element in 𝑈 is weighted, and the goal is to maximize the
sum total weight of the covered elements.
We reduce the online guessing game ONGUESS for a partic-
ular error setting (𝑝, 𝜏 ) and plaintext checker PChecker[Π] to a
weighted maximum coverage problem as follows. We define the
universe 𝑈 to be the set of all possible cache-tuples, where a cache-
tuple consists of a password 𝑤 ∈ 𝒲 followed by at most 𝑡 distinct
and alphabetically sorted typos ˜𝑤𝑖 ∈ 𝒮. The weight of a given
cache-tuple is defined to be the probability that this tuple lies in
the cache of the state ¯𝑠𝑛 that the attacker guesses against in game
ONGUESS. For each password or typo ˜𝑤, we define 𝑆 ˜𝑤 ⊆ 𝑈 to be
the set of all cache-tuples that contain ˜𝑤. Given all such subsets,
the attacker’s goal is to find 𝑞 subsets so that the sum total of the
covered cached-tuples is maximized.
With this reduction in place, we can apply the greedy approxi-
mation algorithm for finding the weighted maximum coverage.
Empirical analysis. We wish to compute the advantage of an
adversary in the online guessing game for real world error settings.
While it is easy to describe the reduction to a weighted maximum
coverage problem, generating the universe of cache-tuples and the
corresponding subsets for large numbers of passwords and typos is
computationally very expensive. For example, there could be more
than a billion cache-tuples for a password with 100 typos and cache
size 𝑡 = 5, and finding all such cache-tuples for a large number of
passwords seems infeasible.
We therefore perform the simulation on a subset of 𝑘 passwords
from RockYou in the following way. For each real password 𝑤,
we sample 𝑚 typos from 𝜏𝑤 with replacement, run the plaintext
checker PChecker[Π] on the sampled list, and record the final cache-
tuple. We repeat this process 𝑛 times for each password, and record
all the unique cache-tuples with their weight set to 𝑝(𝑤) · 𝑓 /𝑛,
where 𝑓 is the number of times the cache-tuple was observed. We
set the universe 𝑈 to be the set of all cache-tuples we collected in
the above experiment, and for each string ˜𝑤, subset 𝑆 ˜𝑤 is defined as
the set of all cache-tuples from 𝑈 which contain ˜𝑤. The attacker’s
goal is to find a set of 𝑞 strings ˜𝑤 such that the cumulative weight
of the elements covered by their subsets is maximized.
The greedy algorithm to find the weighted maximum cover
works as follows: find the subset 𝑆 ˜𝑤* that has the highest cumula-
* to the list of guesses,
tive weight, add the corresponding string ˜𝑤
remove all occurrences of cache-tuples in 𝑆 ˜𝑤* from other subsets,
and repeat until 𝑞 guesses are found or all subsets are empty.
We wish to compute the security loss incurred by using TypTop
compared to an exact checker. Recall that 𝜆𝑞 denotes the success
probability of an optimal attack against an exact checker with a
budget of 𝑞 guesses, and that 𝜆𝑞 =
𝑖=1 𝑝(𝑤𝑖). We define the
security loss of a checker Π over the exact checker to be
(cid:80)𝑞
∆𝑞 = Advonguess
Π,𝒯
(𝒜, 𝑞) − 𝜆𝑞 .
19
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
Using 𝑘 most frequent passwords from RockYou, we ran the above
simulation with 𝑚 = 200, 𝑛 = 500. We chose 𝑘 = 105, and for
each caching policy we compute the greedy attacker’s advantage
for 𝑞 = 100. For all caching policies the security loss ∆𝑞 is minimal,
with a maximum security loss of ∆100 = 0.001 for the MFU caching
policy, and less than 0.0006 for all other caching policies. We also
tried sampling passwords randomly from the support of the pass-
word distribution, and taking the 𝑘 most frequent passwords in
RockYou after ignoring the first million passwords. The security
loss is even less in such samples as we observed in the offline sce-
nario in Section 5.2. To see the effect of 𝑛 on the final security loss,
we also ran the experiment with 𝑛 = 1000 for the PLFU caching
strategy. We found negligible change in the security loss.
By the result of Hochbaum [15], we know that the output of the
greedy algorithm is no less than 1−1/𝑒 times that of the optimal al-
gorithm. If we include this adjustment into the output of our greedy
approximation algorithm, we get ∆𝑞 ≤ 𝑒
(𝒜, 𝑞)−𝜆𝑞.
Therefore, the security loss due to TypTop is at most ∆100 ≤
1.582 × 0.0456 − 0.045 = 0.027.
𝑒−1 ·Advonguess
This bound is pessimistic. It assumes the attacker has precise
knowledge of the typo distribution. Moreover, the final bound is
looser if the greedy approximation results are closer to the optimal—
which we believe to be the case.
We might be able to use a blacklisting strategy similar to the
one proposed in [8] to further reduce the security loss. A naive
blacklisting approach would be to block a set of ‘risky’ typos (that
is to say those which allow an attacker to achieve too great an
advantage) from entering the typo-cache. However to decide which
typos to blacklist, we need an accurate measure of the cache in-
clusion function, which will itself change each time a new typo is
blacklisted, significantly complicating the analysis of this approach.
We leave a detailed treatment of blacklisting strategies for future
work.
Π,𝒯
REFERENCES
[1] Michel Abdalla, Mihir Bellare, and Gregory Neven. 2010. Robust encryption.
[2] S. Antilla. 2015. Vanguard group fires whistleblower who told thestreet about
Journal of Cryptology (2010), 1–44.
flaws in customer security. (2015).
[3] Mihir Bellare and Phillip Rogaway. 2006. Code-based game-playing proofs and the
security of triple encryption. In Advances in Cryptology–EUROCRYPT, Vol. 4004.
10.
[4] Patrick Biernacki and Dan Waldorf. 1981. Snowball sampling: Problems and
techniques of chain referral sampling. Sociological methods & research 10, 2 (1981),
141–163.
[5] Alex Biryukov, D Dinu, and D Khovratovich. 2015. Argon and argon2: password
hashing scheme. Technical Report. Technical report.
[6] Joseph Bonneau. 2012. The science of guessing: analyzing an anonymized corpus
of 70 million passwords. In IEEE Symposium on Security and Privacy (SP). IEEE,
538–552.
[7] Michael Buhrmester, Tracy Kwang, and Samuel D Gosling. 2011. Amazon’s
Mechanical Turk a new source of inexpensive, yet high-quality, data? Perspectives
on psychological science 6, 1 (2011), 3–5.
[8] Rahul Chatterjee, Anish Athalye, Devdatta Akhawe, Ari Juels, and Thomas
Ristenpart. 2016. pASSWORD tYPOS and How to Correct Them Securely. IEEE
Symposium on Security and Privacy (may 2016). Full version of the paper can be
found at the authors’ website.
[9] Fred J Damerau. 1964. A technique for computer detection and correction of
spelling errors. Commun. ACM 7, 3 (1964), 171–176.
[10] Pooya Farshim, Benoît Libert, Kenneth G Paterson, Elizabeth A Quaglia, and
others. 2013. Robust Encryption, Revisited.. In Public Key Cryptography, Vol. 7778.
Springer, 352–368.
[11] Pooya Farshim, Claudio Orlandi, and Razvan Rosie. 2017. Security of Symmetric
IACR Transactions on Symmetric
Primitives under Incorrect Usage of Keys.
20
Cryptology 2017, 1 (2017), 449–473.
[12] Dinei Florencio and Cormac Herley. 2007. A Large-scale Study of Web Password
Habits. In Proceedings of the 16th International Conference on World Wide Web
(WWW ’07). ACM, New York, NY, USA, 657–666. https://doi.org/10.1145/1242572.
1242661
[13] Godfrey Harold Hardy, John Edensor Littlewood, and George Pólya. 1952. In-
equalities. Cambridge university press.
[14] Andreas W Hauser and Klaus U Schulz. 2007. Unsupervised learning of edit
distance weights for retrieving historical spelling variations. In Proceedings of
the First Workshop on Finite-State Techniques and Approximate Search. 1–6.
[15] Dorit S Hochbaum. 1996. Approximating covering and packing problems: set
cover, vertex cover, independent set, and related problems. In Approximation
algorithms for NP-hard problems. PWS Publishing Co., 94–143.
[16] Burt Kaliski. 2000. PKCS #5: Password-based cryptography specification version
2.0. (2000). RFC 2289.
[17] Mark Keith, Benjamin Shao, and Paul Steinbart. 2009. A behavioral analysis of
passphrase design and effectiveness. Journal of the Association for Information
Systems 10, 2 (2009), 2.
[18] Mark Keith, Benjamin Shao, and Paul John Steinbart. 2007. The usability of
passphrases for authentication: An empirical field study. International journal of
human-computer studies 65, 1 (2007), 17–28.
[19] Saranga Komanduri, Richard Shay, Patrick Gage Kelley, Michelle L. Mazurek,
Lujo Bauer, Nicolas Christin, Lorrie Faith Cranor, and Serge Egelman. 2011. Of
passwords and people: measuring the effect of password-composition policies.
In CHI.
[20] Vladimir I Levenshtein. 1966. Binary codes capable of correcting deletions,
insertions, and reversals. In Soviet physics doklady, Vol. 10. 707–710.
[21] Michelle L Mazurek, Saranga Komanduri, Timothy Vidas, Lujo Bauer, Nicolas
Christin, Lorrie Faith Cranor, Patrick Gage Kelley, Richard Shay, and Blase Ur.
2013. Measuring password guessability for an entire university. In Proceedings of
the 2013 ACM SIGSAC conference on Computer & communications security. ACM,
173–186.
[22] William Melicher, Blase Ur, Sean M Segreti, Saranga Komanduri, Lujo Bauer,
Nicolas Christin, and Lorrie Faith Cranor. Fast, lean and accurate: Modeling
password guessability using neural networks.
[23] Payman Mohassel. 2010. A closer look at anonymity and robustness in encryption
schemes. In International Conference on the Theory and Application of Cryptology
and Information Security. Springer, 501–518.
[24] R. Morris and K. Thompson. 1979. Password security: a case history. Commun.
ACM 22, 11 (Nov. 1979), 594–597. https://doi.org/10.1145/359168.359172
[25] Alec Muffet. 2015. Facebook: Password Hashing & Authentication. Presentation
[28] Emil Protalinski. 2015. Facebook passwords are not case sensitive. http://www.
zdnet.com/article/facebook-passwords-are-not-case-sensitive-update/. (2015).
Accessed: 2015-11-12.
[29] Kenneth Raeburn. 2005. Advanced encryption standard (AES) encryption for
Kerberos 5. (2005).
[30] Vipin Samar. 1996. Unified login with pluggable authentication modules (PAM). In
Proceedings of the 3rd ACM conference on Computer and communications security.
ACM, 1–10.
[31] Richard Shay, Patrick Gage Kelley, Saranga Komanduri, Michelle L Mazurek,
Blase Ur, Timothy Vidas, Lujo Bauer, Nicolas Christin, and Lorrie Faith Cranor.
2012. Correct horse battery staple: Exploring the usability of system-assigned
passphrases. In Proceedings of the Eighth Symposium on Usable Privacy and Secu-
rity. ACM, 7.
[32] Richard Shay, Saranga Komanduri, Adam L Durity, Phillip Seyoung Huh,
Michelle L Mazurek, Sean M Segreti, Blase Ur, Lujo Bauer, Nicolas Christin,
and Lorrie Faith Cranor. 2014. Can long passwords be secure and usable?. In
Proceedings of the SIGCHI Conference on Human Factors in Computing Systems.
ACM, 2927–2936.
[33] M. Siegler. 14 Dec. 2009. One of the 32 million with a RockYou account? you may
want to change all your passwords. like now. TechCrunch (14 Dec. 2009).
[34] Blase Ur, Fumiko Noma, Jonathan Bees, Sean M Segreti, Richard Shay, Lujo Bauer,
Nicolas Christin, and Lorrie Faith Cranor. 2015. “I Added ‘!’ at the End to Make
It Secure”: Observing Password Creation in the Lab. In Eleventh Symposium On
Usable Privacy and Security (SOUPS 2015). 123–140.
[35] Dan Lowe Wheeler. 2016. zxcvbn: Low-budget password strength estimation. In
Proc. USENIX Security.
[36] Frank Wilcoxon, SK Katti, and Roberta A Wilcox. 1963. Critical values and
probability levels for the Wilcoxon rank sum test and the Wilcoxon signed rank test.
American Cyanamid Company.
[26] Randall Munroe. 2015. Password Strength. https://xkcd.com/936/. (2015). Ac-
[27] Colin Percival and Simon Josefsson. 2015. The scrypt Password-Based Key
at Real World Crypto. (2015).
cessed: 2015-11-13.
Derivation Function. (2015).