## Time is not your friend (re, 200p)
### PL
[ENG](#eng-version)
Dostajemy [program](./re200) (elf), do zbadania, i rozpoczynamy analizę działania.
Ciekawe w programie jest to, że czyta żadnych plików, ani nie chce nic od użytkownika, ani nie bierze żadnych parametrów z linii poleceń - po prostu sie wykonuje.
Trzon programu opiera się na następującym kodzie:
```c++
bool test(int a1) {
  int v3 = a1;
  int v4 = 0;
  while (v3) {
    v1 = clock();
    sleep(5);
    v4 += v3 % 10;
    if (clock() - v1  19)
    result = 49000000;
  else
    result = 33000000;
  return result;
}
int main() {
  int v2 = 2;
  int v4 = 2;
  while(true) {
    int i;
    for ( i = 2; v4 - 1 >= i && v4 % i; ++i );
    if (i == v4) {
      v0 = clock();
      ++v2;
      sleep(3);
      if ( clock() - v0 = i && v4 % i; ++i );
    if (i == v4) {
      ++v2;
      exit(0);
      if (getint()  49000000 - a, jak widać od razu po spojrzeniu na kod - v2 to ilość napotkanych na razie liczb pierwszych.
Zamiast liczyć od zera do 49000000wej liczby pierwszej, możemy od razu podstawić pod v2 wartość 49000000, a pod v4 wartość 961748862 (v2-ta liczba pierwsza - 2, bo taka dokładnie relacja wiązała v2 i v4).
Ostateczna wersja funkcji main (całe źródło [znajduje się tu](hack.cpp))
```c++
int main() {
    int v2 = 49000000; // ndx liczby pierwszej
    int v4 = 961748862; // (v2-2)ta liczba pierwsza + 1
    while(true) {
        int i;
        if (isprime(v4)) {
            v2++;
            if(getint()  19)
    result = 49000000;
  else
    result = 33000000;
  return result;
}
int main() {
  int v2 = 2;
  int v4 = 2;
  while(true) {
    int i;
    for ( i = 2; v4 - 1 >= i && v4 % i; ++i );
    if (i == v4) {
      v0 = clock();
      ++v2;
      sleep(3);
      if ( clock() - v0 = i && v4 % i; ++i );
    if (i == v4) {
      ++v2;
      exit(0);
      if (getint()  49000000 and as we see in the code the v2 counts prime numbers seen so far.
Instead of counting from 0 to 49000000th prime number we can simply put 49000000 as value for v2 and 961748862 for v4 (this is the v2th prime number -2, since this was to relation between v2 and v4).
Final version of the main function (whole source [is here](hack.cpp))
```c++
int main() {
    int v2 = 49000000; // prime number index
    int v4 = 961748862; // (v2-2)th prime number + 1
    while(true) {
        int i;
        if (isprime(v4)) {
            v2++;
            if(getint() <= v2 && test(v4)) {
                printf("DCTF{%d}\n", v4);
                break;
            }
        } v4++;
    }
}
```
Now we can run the code and wait few seconds to get the flag:
    DCTF{961749023}