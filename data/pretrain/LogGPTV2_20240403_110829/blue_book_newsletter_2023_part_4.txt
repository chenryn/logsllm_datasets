    10:15:27 AM     81      1037    2325.25         225.25          dbus-daemon
    10:15:27 AM     998     1052    118755.1        11755.1         polkitd
    10:15:27 AM     70      1056    158248.51       15848.51        avahi-daemon
    10:15:27 AM     0       1061    133512.12       455.12          rngd
    10:15:27 AM     0       1110    156230          16230           cupsd
    10:15:27 AM     0       1192    152298.02       1598.02         sssd_nss
    10:15:27 AM     0       1247    166132.99       16632.99        systemd-logind
    10:15:27 AM     0       1265    165311.34       16511.34        cups-browsed
    10:15:27 AM     0       1408    10556.57        1556.57         wpa_supplicant
    10:15:27 AM     0       1687    3835            3835            splunkd
    10:15:27 AM     42      1773    3728            3728            Xorg
    10:15:27 AM     42      1996    3266.67         266.67          gsd-color
    10:15:27 AM     0       3166    32036.36        3036.36         sssd_kcm
    10:15:27 AM     119349  3194    151763.64       11763.64        dbus-daemon
    10:15:27 AM     119349  3199    158306          18306           Xorg
    10:15:27 AM     119349  3242    15.28           5.8             gnome-shell
    pidstat -wt 3 10  > /tmp/pidstat-t.out
    Linux 4.18.0-80.11.2.el8_0.x86_64 (hostname)    09/08/2020  _x86_64_    (4 CPU)
    10:15:15 AM   UID      TGID       TID   cswch/s   nvcswch/s  Command
    10:15:19 AM     0         1         -   152656.7   16656.7   systemd
    10:15:19 AM     0         -         1   152656.7   16656.7   |__systemd
    10:15:19 AM     0         9         -   165451.04  15451.04  ksoftirqd/0
    10:15:19 AM     0         -         9   165451.04  15451.04  |__ksoftirqd/0
    10:15:19 AM     0        10         -   158628.87  15828.87  rcu_sched
    10:15:19 AM     0         -        10   158628.87  15828.87  |__rcu_sched
    10:15:19 AM     0        23         -   129769.61  12979.61  ksoftirqd/2
    10:15:19 AM     0         -        23   129769.61  12979.33  |__ksoftirqd/2
    10:15:19 AM     0        29         -   32424.5    2445      ksoftirqd/3
    10:15:19 AM     0         -        29   32424.5    2445      |__ksoftirqd/3
    10:15:19 AM     0        43         -   334        34        khugepaged
    10:15:19 AM     0         -        43   334        34        |__khugepaged
    10:15:19 AM     0       443         -   11465      566       usb-storage
    10:15:19 AM     0         -       443   6433       93        |__usb-storage
    10:15:19 AM     0       456         -   15.41      0.00      i915/signal:0
    10:15:19 AM     0         -       456   15.41      0.00      |__i915/signal:0
    10:15:19 AM     0       715         -   19.34      0.00      xfsaild/dm-1
    10:15:19 AM     0         -       715   19.34      0.00      |__xfsaild/dm-1
    10:15:19 AM     0       886         -   23.28      0.00      irq/131-iwlwifi
    10:15:19 AM     0         -       886   23.28      0.00      |__irq/131-iwlwifi
    10:15:19 AM     0       966         -   19.67      0.00      xfsaild/dm-3
    10:15:19 AM     0         -       966   19.67      0.00      |__xfsaild/dm-3
    10:15:19 AM    81      1037         -   6.89       0.33      dbus-daemon
    10:15:19 AM    81         -      1037   6.89       0.33      |__dbus-daemon
    10:15:19 AM     0      1038         -   11567.31   4436      NetworkManager
    10:15:19 AM     0         -      1038   1.31       0.00      |__NetworkManager
    10:15:19 AM     0         -      1088   0.33       0.00      |__gmain
    10:15:19 AM     0         -      1094   1340.66    0.00      |__gdbus
    10:15:19 AM   998      1052         -   118755.1   11755.1   polkitd
    10:15:19 AM   998         -      1052   32420.66   25545     |__polkitd
    10:15:19 AM   998         -      1132   0.66       0.00      |__gdbus
    ```
    Then with help of PID which is causing issue, one can get all system calls details:
    Raw
    ```bash
    ```
    Let this command run for a few minutes while the load/context switch rates are high. It is safe to run this on a production system so you could run it on a good system as well to provide a comparative baseline. Through strace, one can debug & troubleshoot the issue, by looking at system calls the process has made.
* New: [Redirect stderr of all subsequent commands of a script to a file.](bash_snippets.md#redirect-stderr-of-all-subsequent-commands-of-a-script-to-a-file)
    ```bash
    {
        somecommand
        somecommand2
        somecommand3
    } 2>&1 | tee -a $DEBUGLOG
    ```
* New: [Loop through a list of files found by find.](bash_snippets.md#loop-through-a-list-of-files-found-by-find)
    For simple loops use the `find -exec` syntax:
    ```bash
    find . -name '*.txt' -exec process {} \;
    ```
    For more complex loops use a `while read` construct:
    ```bash
    find . -name "*.txt" -print0 | while read -r -d $'\0' file
    do
        …code using "$file"
    done
    ```
    The loop will execute while the `find` command is executing. Plus, this command will work even if a file name is returned with whitespace in it. And, you won't overflow your command line buffer.
    The `-print0` will use the NULL as a file separator instead of a newline and the `-d $'\0'` will use NULL as the separator while reading.
    How not to do it:
    If you try to run the next snippet:
    ```bash
    for file in $(find . -name "*.txt")
    do
        …code using "$file"
    done
    ```
    You'll get the next [`shellcheck`](shellcheck.md) warning:
    ```
    SC2044: For loops over find output are fragile. Use find -exec or a while read loop.
    ```
    You should not do this because:
    Three reasons:
    - For the for loop to even start, the find must run to completion.
    - If a file name has any whitespace (including space, tab or newline) in it, it will be treated as two separate names.
    - Although now unlikely, you can overrun your command line buffer. Imagine if your command line buffer holds 32KB, and your for loop returns 40KB of text. That last 8KB will be dropped right off your for loop and you'll never know it.
### [pytelegrambotapi](pdm.md)
* New: [Custom file generation.](pdm.md#custom-file-generation)
    During the build, you may want to generate other files or download resources from the internet. You can achieve this by the setup-script build configuration:
    ```toml`
    [tool.pdm.build]
    setup-script = "build.py"
    ```
    In the `build.py` script, pdm-pep517 looks for a build function and calls it with two arguments:
    * `src`: the path to the source directory
    * `dst`: the path to the distribution directory
    Example:
    ```python
    def build(src, dst):
        target_file = os.path.join(dst, "mypackage/myfile.txt")
        os.makedirs(os.path.dirname(target_file), exist_ok=True)
        download_file_to(dst)
    ```
    The generated file will be copied to the resulted wheel with the same hierarchy, you need to create the parent directories if necessary.
* Correction: [Custom file generation.](pdm.md#custom-file-generation)
    Warning: this method only works if you install the package with `pdm` if you use `pip` or any other package manager the `build.py` script won't be called. Thus a more generic approach is to run the initialization steps in a `your_command init` step or run the checks on each command.
* New: [Basic concepts of concurrency.](asyncio.md#concurrency)
    Concurrency is best explained by an example stolen from [Miguel Grinberg](https://youtu.be/iG6fr81xHKA?t=4m29s).
    Chess master Judit Polgár hosts a chess exhibition in which she plays multiple amateur players. She has two ways of conducting the exhibition: synchronously and asynchronously.
    Assumptions:
    - 24 opponents
    - Judit makes each chess move in 5 seconds
    - Opponents each take 55 seconds to make a move
    - Games average 30 pair-moves (60 moves total)
    Synchronous version: Judit plays one game at a time, never two at the same time, until the game is complete. Each game takes (55 + 5) * 30 == 1800 seconds, or 30 minutes. The entire exhibition takes 24 * 30 == 720 minutes, or 12 hours.
    Asynchronous version: Judit moves from table to table, making one move at each table. She leaves the table and lets the opponent make their next move during the wait time. One move on all 24 games takes Judit 24 * 5 == 120 seconds, or 2 minutes. The entire exhibition is now cut down to 120 * 30 == 3600 seconds, or just 1 hour.
    Async IO takes long waiting periods in which functions would otherwise be blocking and allows other functions to run during that downtime. (A function that blocks effectively forbids others from running from the time that it starts until the time that it returns.)
* New: Basic concepts.
    - [AsyncIO is not easy](asyncio.md#asyncIO-is-not-easy)
    - [The async/await Syntax and Native Coroutines](asyncio.md#the-async-await-syntax-and-Native-coroutines)
    - [The Rules of Async IO](asyncio.md#the-rules-of-async-io)
    - [Async IO Design Patterns](asyncio.md#async-io-design-patterns)
      - [Chaining Coroutines](asyncio.md#chaining-coroutines)
      - [Using a Queue](asyncio.md#using-a-queue)
    - [`async for` and list comprehensions](asyncio.md#async-for-and-list-comprehensions)
    - [Creating and gathering tasks](asyncio.md#creating-and-gathering-tasks)
    - [When and Why Is Async IO the Right Choice?](asyncio.md#when-and-why-is-async-io-the-right-choice)
    - [Async IO It Is, but Which One?](asyncio.md#async-io-it-is-but-which-one)
    - [Testing](asyncio.md#testing)
* New: Introduce pytelegrambotapi.
    [pyTelegramBotAPI](https://github.com/eternnoir/pyTelegramBotAPI) is an synchronous and asynchronous implementation of the [Telegram Bot API](https://core.telegram.org/bots/api).
    [Installation](https://pytba.readthedocs.io/en/latest/install.html):
    ```bash
    pip install pyTelegramBotAPI
    ```
* New: [Create your bot.](pytelegrambotapi.md#create-your-bot)
    Use the `/newbot` command to create a new bot. `@BotFather` will ask you for a name and username, then generate an authentication token for your new bot.
    - The `name` of your bot is displayed in contact details and elsewhere.
    - The `username` is a short name, used in search, mentions and t.me links. Usernames are 5-32 characters long and not case sensitive – but may only include Latin characters, numbers, and underscores. Your bot's username must end in 'bot’, like `tetris_bot` or `TetrisBot`.
    - The `token` is a string, like `110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw`, which is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot.
    To edit your bot, you have the next available commands:
    - `/setname`: change your bot's name.
    - `/setdescription`: change the bot's description (short text up to 512 characters). Users will see this text at the beginning of the conversation with the bot, titled 'What can this bot do?'.
    - `/setabouttext`: change the bot's about info, a shorter text up to 120 characters. Users will see this text on the bot's profile page. When they share your bot with someone, this text is sent together with the link.
    - `/setuserpic`: change the bot's profile picture.
    - `/setcommands`: change the list of commands supported by your bot. Users will see these commands as suggestions when they type / in the chat with your bot. See commands for more info.
    - `/setdomain`: link a website domain to your bot. See the login widget section.
    - `/deletebot`: delete your bot and free its username. Cannot be undone.
* New: [Synchronous TeleBot.](pytelegrambotapi.md#synchronous-telebot)
    ```python
    import telebot
    API_TOKEN = ''
    bot = telebot.TeleBot(API_TOKEN)
    @bot.message_handler(commands=['help', 'start'])
    def send_welcome(message):
        bot.reply_to(message, """\
    Hi there, I am EchoBot.
    I am here to echo your kind words back to you. Just say anything nice and I'll say the exact same thing to you!\
    """)
    @bot.message_handler(func=lambda message: True)
    def echo_message(message):
        bot.reply_to(message, message.text)
    bot.infinity_polling()
    ```
* New: [Asynchronous TeleBot.](pytelegrambotapi.md#asynchronous-telebot)
    ```python
    from telebot.async_telebot import AsyncTeleBot
    bot = AsyncTeleBot('TOKEN')
    @bot.message_handler(commands=['help', 'start'])
    async def send_welcome(message):
        await bot.reply_to(message, """\
    Hi there, I am EchoBot.
    I am here to echo your kind words back to you. Just say anything nice and I'll say the exact same thing to you!\
    """)
    @bot.message_handler(func=lambda message: True)
    async def echo_message(message):
        await bot.reply_to(message, message.text)
    import asyncio
    asyncio.run(bot.polling())
    ```
### [Libraries](python_gnupg.md)
* New: How to encrypt a file.
    ```python
    gpg.encrypt_file('path/to/file', recipients)
    ```
    Where `recipients` is a `List[str]` of gpg Key IDs.
* New: [List the recipients that can decrypt a file.](python_gnupg.md#list-the-recipients-that-can-decrypt-a-file)
    ```python
    def list_recipients(self, path: Path) -> List['GPGKey']:
        """List the keys that can decrypt a file.
        Args:
           path: Path to the file to check.
        """
        keys = []
        for short_key in self.gpg.get_recipients_file(str(path)):
            keys.append(self.gpg.list_keys(keys=[short_key])[0]['fingerprint'])
        return keys
    ```
    feat(requests#Use a proxy): Use a proxy
    ```python
    http_proxy  = "http://10.10.1.10:3128"
    https_proxy = "https://10.10.1.11:1080"
    ftp_proxy   = "ftp://10.10.1.10:3128"
    proxies = {
      "http"  : http_proxy,
      "https" : https_proxy,
      "ftp"   : ftp_proxy
    }
    r = requests.get(url, headers=headers, proxies=proxies)
    ```
* New: Introduce aiohttp.
    [`aiohttp`](https://docs.aiohttp.org/en/stable/) is an asynchronous HTTP Client/Server for asyncio and Python. Think of it as the `requests` for asyncio.
    - [Installation](aiohttp.md#installation)
    - [How to make a request](aiohttp.md#make-a-request)
    - [Passing parameters in urls](aiohttp.md#passing-parameters-in-urls)
    - [Setting custom headers](aiohttp.md#setting-custom-headers)
    - [Set custom cookies](aiohttp.md#set-custom-cookies)
    - [Proxy support](aiohttp.md#proxy-support)
    - [How to use the `ClientSession`](aiohttp.md#how-to-use-the-clientSession)
    - [An aiohttp adapter](aiohttp.md#an-aiohttp-adapter)
* New: Receive keys from a keyserver.
    ```python
    import_result = gpg.recv_keys('server-name', 'keyid1', 'keyid2', ...)
    ```
### [Configure Docker to host the application](docker.md)
* New: [Troubleshoot Docker python not showning prints.](python_docker.md#docker-python-not-showning-prints)
    Use `CMD ["python","-u","main.py"]` instead of `CMD ["python","main.py"]`.
* New: [Get the difference of two lists.](python_docker.md#prevent-pip-install--r-requirements.txt-to-run-on-each-docker-build:-prevent-`pip-install--r-requirements.txt`-to-run-on-each-`docker-build`
i'm-assuming-that-at-some-point-in-your-build-process,-you're-copying-your-entire-application-into-the-docker-image-with-copy-or-add:
```dockerfile
copy-.-/opt/app
workdir-/opt/app
run-pip-install--r-requirements.txt
```
the-problem-is-that-you're-invalidating-the-docker-build-cache-every-time-you're-copying-the-entire-application-into-the-image.-this-will-also-invalidate-the-cache-for-all-subsequent-build-steps.
to-prevent-this,-i'd-suggest-copying-only-the-requirements.txt-file-in-a-separate-build-step-before-adding-the-entire-application-into-the-image:
```dockerfile
copy-requirements.txt-/opt/app/requirements.txt
workdir-/opt/app
run-pip-install--r-requirements.txt
copy-.-/opt/app
```
feat(python_snippets)
    If we want to substract the elements of one list from the other you can use:
    ```python
    for x in b:
      if x in a: