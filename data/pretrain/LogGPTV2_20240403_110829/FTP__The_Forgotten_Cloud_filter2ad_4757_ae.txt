### Certificates in Table XII and Commonly Shipped Certificates in Table XIII

Tables XII and XIII list the most common FTPS certificates and devices that share these certificates, respectively. Since all these devices use the same certificate and key, an adversary could extract the private key from any device to perform a Man-in-the-Middle (MitM) attack on other connections.

### Discussion

The vulnerabilities highlighted in this paper are not new. Password-less login vulnerabilities, WaReZ shuffling, and port bouncing have been exploited throughout the lifespan of FTP. However, we found that a significant number of servers remain vulnerable to these issues, and they continue to be actively exploited by malicious actors. One possible reason for this persistence may be inattention. While security researchers focus on more modern and widespread protocols like HTTPS and Bitcoin, older and more basic protocols such as FTP have not disappeared and have not become any more secure.

As described in Section V, consumer devices with embedded FTP servers appear to exacerbate the problem. Users seeking remote access to their data may expose FTP on public IP addresses without fully understanding the security implications. Worse still, some devices have confusingly named options for enabling anonymous FTP, and others come with it enabled by default. We urge device manufacturers to re-examine their defaults, user interfaces, and documentation to effectively inform users about the global public access risks associated with these configurations.

While achieving usable security is challenging, research has shown that well-designed notifications can improve users' adherence to browser security warnings [25]. Consumer server devices may benefit from adopting a similar strategy. As the Internet of Things (IoT) expands and the transition to IPv6 continues—increasing the number of world-addressable devices a consumer owns—this issue is likely to grow.

One of the most concerning cases involves devices that come with anonymous FTP enabled by default. This suggests that either the manufacturers do not understand the dangers of data exposure through anonymous FTP or they are acting with reckless disregard for their customers' security and privacy. An effective remedy might be to create stronger incentives for manufacturers to take security seriously. An external organization, such as a "CyberUL," could provide a quality certification ensuring that a particular device provides at least a minimal level of security protections to the end-consumer [16]. While creating a comprehensive suite of security tests remains an open research problem, it would be relatively straightforward to test for well-known and often exploited vulnerabilities such as anonymous logins and port bouncing.

### Related Work

FTP has largely been ignored by the security measurement community, and, to the best of our knowledge, this study is the first to focus on how anonymous FTP has been deployed in practice. Several recent studies have used Internet-wide scanning to measure real-world protocol deployment and uncover flaws in cryptographic protocols [2], [14], [20], [21], [28], [30], [32]. However, these studies have primarily focused on more topical protocols like TLS and SSH. Similarly, there have been several recent papers introducing tools for performing Internet-wide scans (e.g., ZMap [23]). We developed a new FTP enumerator but built on existing tools, using ZMap for host discovery. The work most related to FTP scanning is FTP Map, which attempts to detect FTP vulnerabilities based on server behavior [27]. Our goals differ significantly, as we aim to enumerate the file structure of FTP servers. There exists an online search engine for FTP servers, Napalm FTP Indexer [37], which contains files from 17K FTP servers. In comparison, our scan revealed 1.1M anonymous FTP servers.

**Embedded Device Security:**
While there is considerable anecdotal evidence of security issues in embedded devices, there has been little systematic analysis of how these vulnerabilities affect real-world users. Our study investigates one protocol commonly deployed by embedded devices, but other protocols likely suffer from similar issues. For example, Durumeric et al. found that embedded devices did not patch in response to the OpenSSL Heartbleed bug [22], Heninger et al. found that embedded devices lacked the entropy needed to generate secure cryptographic keys [30], and Bokoski et al. found that SuperMicro devices suffered from elementary security vulnerabilities (e.g., trivial buffer overflows) and were publicly accessible [10].

**Launching Attacks:**
Previous research has explored the risk of devices interacting with the same resource through multiple channels. Bojinov introduced the concept of Cross Channel Scripting (XCS), where an attacker injects malicious content into web content over a secondary protocol (e.g., SMB or FTP) [9]. Several of the malicious use cases we observed (e.g., SEO and DDoS attacks) are instances of this, where FTP is used as the secondary communication channel.

### Conclusion

In this study, we presented a comprehensive analysis of how anonymous FTP has been deployed in the real world. Despite being largely forgotten by the research community, there are more than 13.8M FTP servers on the IPv4 address space, of which 1.1M (8%) allow anonymous access. Unfortunately, many anonymous FTP servers expose sensitive data, ranging from cryptographic secrets to confidential financial documents. We fingerprinted servers hosting this data and found that many are consumer devices (e.g., home NAS devices) that expose data over anonymous FTP by default or fail to explain the risks of enabling anonymous FTP. We further uncovered evidence that nearly 20K FTP servers allow anonymous users to write data, which malicious actors are using for malware deployment, click fraud, and DDoS attacks. Our study presents a grim portrait of how FTP is deployed in 2015, but we hope that shedding light on the issue will prompt the security community to begin addressing these vulnerabilities.

### Acknowledgments

The authors wish to thank Mudge Zatko for helping motivate this analysis and providing insight into possible threats. We also thank the exceptional IT staff at the University of Michigan for their help and support, including Chris Brenner, Kevin Cheek, Laura Fink, Dan Maletta, Jeff Richardson, Don Winsor, Donald Welch, and others from ITS, CAEN, and DCO. This material is based in part upon work supported by the U.S. National Science Foundation under grants CNS-1345254, CNS-1409505, and CNS-1518888, by the NSF Graduate Research Fellowship Program under grant DGE-1256260, by the Post-9/11 GI Bill, by the Google Ph.D. Fellowship in Computer Security, and by an Alfred P. Sloan Foundation Research Fellowship.

### References

[References listed as provided, with URLs and citations.]

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the original content's integrity.