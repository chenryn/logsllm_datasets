### 打招呼XSS 逻辑有做判断：
    1、用户名为空。
    2、不允许发送消息给自己。
    3、用户名不存在。
在控制层并没有做过滤：  
在调用com.jeecms.bbs.manager.impl.
BbsMessageMngImpl.java的sendMsg方法的时候依旧没有过滤。到最终的BbsMessageDaoImpl
的save方法还是没有过滤就直接储存了;
一般性的做法，关系到用户交互的地方最好做referer和xss过滤检测，控制层负责收集数据的同时最好处理下用户的请求，就算controller不处理起码在service层做下处理吧。
#### 发布投票贴xss发布一片投票帖子，标题xss内容。
#### 邮箱的两处没有验证xss
#### 个人资料全部xss
#### 投稿打管理员后台点击查看触发
#### 搜索xss
[http://demo.jeecms.com/search.jspx?q=%2F>alert%28document.cookie%29%3Bhello&channelId=](http://demo.jeecms.com/search.jspx?q=%2F>alert%28document.cookie%29%3Bhello&channelId=)
漏洞N………
### 按程序实现逆向测试
#### ”逆向”找SQL注入
SQL注入理论上是最容易找的，因为SQL语句的特殊性只要Ctrl+H 搜索select、from
等关键字就能够快速找到项目下所有的SQL语句，然后根据搜索结果基本上都能够确定是否存在SQL注入。 **凡是SQL语句中出现了拼SQL（如select *
from admin where
id=’”+id+”’）那么基本上80%可以确定是SQL注入。但也有特例，比如拼凑的SQL参数并不受我们控制，无法在前台通过提交SQL注入语句的方式去控制最终的查询SQL。而采用预编译?占位方式的一般不存在注入。**
比如搜索51javacms项目当中的SQL语句：  
#### Tips:ORM框架特殊性
### Hibernate HQL：
需要注意的是Hibernate的HQL是对对象进行操作，所以它的SQL可能是：
    String hql = "from Emp";
    Query q = session.createQuery(hql);
也可以
    String hql = "select count(*) from Emp";
    Query q = session.createQuery(hql);
甚至是
    String hql = "select new Emp(e.empno,e.ename) from Emp e ";
    Query q = session.createQuery(hql);
### Mybatis(Ibatis3.0后版本叫Mybatis)：
Ibatis、Mybatis的SQL语句可以基于注解的方式写在类方法上面，更多的是以xml的方式写到xml文件。
在当前项目下搜索SQL语句关键字，查找疑似SQL注入的调用：
进入搜索结果的具体逻辑代码：
最外层的Contrller：  
“逆向”找到控制层URL以后构建的SQL注入请求：
可能大家关注的代码审计最核心的怎么去发掘SQL注入这样高危的漏洞，其次是XSS等类型的漏洞。
#### 小结：
    学会怎样Debug。
    学会怎样通过从控制层到最终的数据访问层的代码跟踪和从数据访问层倒着找到控制层的入口。
    学会怎样去分析功能模块的用例。
### 文件上传、下载、编辑漏洞
文件上传漏洞即没有对上传的文件的后缀进行过滤，导致任意文件上传。有的时候就算有后缀判断，但是由于解析漏洞造成GETSHELL这是比较难避免的。
#### 1、没有做任何限制的上传漏洞：
这一种是不需要任何绕过直接就可以上传任意脚本威胁性可想而知。
#### 2、Bypass白名单和黑名单限制
某些时候就算做了后缀验证我们一样可以通过查看验证的逻辑代码找到绕过方式。第35、36行分别定义了白名单和黑名单后缀列表。41到46行是第一种通过黑名单方式校验后缀合法性。47到57行代码是第二种通过白名单方式去校验后缀合法性。现在来瞧下上诉代码都有那些方式可以Bypass。
    1、假设37行代码的upload不是在代码里面写死了而是从客户端传入的参数，那么可以自定义修改path把文件传到当前server下的任意路径。
    2、第39行犯下了个致命的错误，因为文件名里面可以包含多个”.”而”xxxxx”.indexOf(“.”)取到的永远是第一个”.”,假设我们的文件名是1.jpg.jsp即可绕过第一个黑名单校验。
    3、第42行又是另一个致命错误s.equals(fileSuffix)比较是不区分大小写假设我们提交1.jSP即可突破验证。
    4、第50行同样是一个致命的错误，直接用客户端上传的文件名作为最终文件名，可导致多个漏洞包括解析漏洞和上面的1.jpg.jsp上传漏洞。
#### 文件上传漏洞修复方案:
    1、文件上传的目录必须写死
    2、把原来的fileName.indexOf(".")改成fileName.lastIndexOf(".")
    3、s.equals(fileSuffix)改成s.equalsIgnoreCase(fileSuffix) 即忽略大小写或者把前面的fileSuffix字符转换成小写s.equals(fileSuffix.toLowerCase())
### 文件下载漏洞
51JavaCms典型的文件下载漏洞，我们不妨看下其逻辑为什么会存在漏洞。51javacms并没有用流行的SSH框架而是用了Servlert3.0自行做了各种封装，实现了各种漏洞。Ctrl+H搜索DownLoadFilePage找到下载的Servlet：
改装了下51javacms的垃圾代码：  
请求不存在的文件：
跨目录请求一个存在的文件：
### 文件编辑漏洞
JeeCms之前的后台就存在任意文件编辑漏洞（JEECMS后台任意文件编辑漏洞and官方漏洞及拿shell
：
## 基于Junit高级测试
* * *
Junit写单元测试这个难度略高需要对代码和业务逻辑有比较深入的了解，只是简单的提下,有兴趣的朋友可以自行了解。
JUnit是由 Erich Gamma 和 Kent Beck 编写的一个回归测试框架（regression testing
framework）。Junit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。Junit是一套框架，继承TestCase类，就可以用Junit进行自动测试了。
## 其他
* * *
### 1、通过查看Jar包快速定位Struts2漏洞
比如直接打开lerxCms的lib目录：
### 2、报错信息快速确认Server框架
类型转换错误：
Struts2：
### 3、二次校验逻辑漏洞
比如修改密保邮箱业务只做了失去焦点唯一性校验，但是在提交的时候听没有校验唯一性
### 4、隐藏在Select框下的邪恶
Select下拉框能有什么漏洞？一般人我不告诉他，最常见的有select框Sql注入、存储性xss漏洞。搜索注入的时候也许最容易出现注入的地方不是搜索的内容，而是搜索的条件！
Discuz select下拉框存储也有类型的问题，但Discuz对Xss过滤较严未造成xss：
下拉框的Sql注入：  
小结： 本节不过是漏洞发掘审计的冰山一角，很多东西没法一次性写出来跟大家分享。本系列完成后公布ylog博客源码。本节源代码暂不发布。