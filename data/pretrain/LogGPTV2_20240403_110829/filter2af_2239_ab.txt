首先和服务端一样，需要初始化`ORB`，通过`ORB`来获取`NameService`并将其转换成命名上下文。之后通过别名在命名上下文中获取其对应的`Stub`，调用`Stub`中的`sayhello()`方法，这个时候才会完成`client
side`向`servant side`发送请求，`POA`处理请求，并将具体实现的`HelloImpl`包装返回给`client side`。
这里有一个需要注意的，`helloImpl =
HelloHelper.narrow(ncRef.resolve_str(name))`返回的是一个`_HelloStub`而非真正的`HelloImpl`。只要理解清楚这一点，会避免很多误解。
####  2.1.6 naming service的具体实现
ORBD可以理解为ORB的守护进程，其主要负责建立客户端(`client side`)与服务端(`servant
side`)的关系，同时负责查找指定的IOR(可互操作对象引用，是一种数据结构，是CORBA标准的一部分)。ORBD是由Java原生支持的一个服务，其在整个CORBA通信中充当着`naming
service`的作用，可以通过一行命令进行启动：
    $ orbd -ORBInitialPort 端口号 -ORBInitialHost url &(表示是否后台执行)
####  2.1.7 执行
当设置并启动`naming
service`后，还需要在`server`和`client`中增添一些代码用来指定ORB在初始化的时候所访问的ORBD的地址，如：
之后完成编译并首先运行`server`保证将具体实现类绑定到`orbd`上，然后再运行`client`完成远程类加载：
至此就完成了CORBA demo的编写。
###  2.2 CORBA的通信过程及各部件之间的关系
根据2.1的叙述，我们大致知道了CORBA编写的流程，同时粗略的了解了CORBA的执行流，这一小节就来梳理一下其中的几种模型以及关系。
####  2.2.1 CORBA通信过程
首先来看一下CORBA的整体通信过程：
  1. 启动orbd作为`naming service`，会创建`name service`服务。
  2. `corba server`向`orbd`发送请求获取`name service`，协商好通信格式。
  3. `orbd`返回保存的`name service`。
  4. `corba server`拿到`name service`后将具体的实现类绑定到`name service`上，这个时候`orbd`会拿到注册后的信息，这个信息就是IOR。
  5. `corba client`向`orbd`发起请求获取`name service`。
  6. `orbd`返回保存的`name service`。
  7. `corba client`在`name service`中查找已经注册的信息获取到“引用”的信息(`corba server`的地址等)，通过`orb`的连接功能将远程方法调用的请求转发到`corba server`。
  8. `corba server`通过`orb`接收请求，并利用`POA`拦截请求，将请求中所指定的类封装好，同样通过`orb`的连接功能返回给`corba client`。
####  2.2.2 orb在通信中的作用
`orb`在通信中充当的角色可以用一张图来表明：
可以看到`orb`就是充当客户端与服务端通信的一个媒介，而因为处于不同端的`orb`在不同的阶段充当不同的角色，有的时候充当接收请求的服务端，有的时候充当发送请求的客户端，但是其本质一直都是同一个对象（相对于一端来说）。举个例子对于`corba
client`来说在与`corba server`进行通信的过程中，`corba
clint`的`orb`在发送请求的时候充当客户端，在接收返回的时候充当服务端，而`orb`从始至终都是其第一次从`orbd`获取的一个`orb`。对于这样具有通用性质的`orb`，称之为`common
ORB Architecture`也就是通用ORB体系。所以`CORBA`最简单的解释就是通用`orb`体系。
####  2.2.3 Stub及POA的作用
`Stub`是`client side`调用`orb`的媒介，`POA`是`servant
side`用于拦截`client`请求的媒介，而两者在结构上其实都是客户端/服务端调用`orb`的媒介，可以用下面这个图来说明：
`orb`充当客户端与服务端通信的媒介，而客户端或服务端想要调用`orb`来发送/处理请求就需要`Stub`和`skeleton`，这两部分的具体实现就是`Stub`与`POA`。
`Stub`与`POA`分别充当客户端和服务器的代理，具体的流程如下（以2.1的demo为例）：
  1. `client`发起调用：`sayHello()`
  2. `Stub`封装`client`的调用请求并发送给`orbd`
  3. `orbd`接受请求，根据`server`端的注册信息，分派给`server`端处理调用请求
  4. `server`端的`orb`接收到请求调用`POA`完成对请求的处理，执行`sayHello()`，并将执行结果进行封装，传递给`orbd`
  5. `orbd`接收到`server`端的返回后将其传递给`Stub`
  6. `Stub`收到请求后，解析二进制流，提取`server`端的处理结果
  7. `Stub`将经过处理后的最终结果返回给`client`调用者
## 0x03 CORBA流程具体分析
接下来将深入代码实现层对CORBA流程进行具体的分析，主要是从`client`端进行分析。
如2.1.5中所提及的，client端的实现大致分为两部分:
  * 初始化`ORB`，通过`ORB`来获取`NameService`并将其转换成命名上下文。
  * 获取并调用`Stub`中相应的方法，完成rpc流程。
可以发现client的大部分操作都是与`Stub`所关联的，所以我们需要首先深入的分析`Stub`的相关生成过程，才能理解后面的rpc流程。
###  3.1 Stub的生成
`Stub`有很多种生成方式，这里列举三种具有代表性的生成方式：
  * 首先获取`NameServer`，后通过`resolve_str()`方法生成（`NameServer`生成方式）
  * 使用`ORB.string_to_object`生成（`ORB`生成方式）
  * 使用`javax.naming.InitialContext.lookup()`生成（JNDI生成方式）
而以上三种方法都可以总结成两步：
  * 从`orbd`获取`NameService`，`NameService`中包含`IOR`。
  * 根据`IOR`的信息完成rpc调用。
  1. 通过`NameServer`生成方式： 
         Properties properties = new Properties();
     properties.put("org.omg.CORBA.ORBInitialHost", "127.0.0.1");
     properties.put("org.omg.CORBA.ORBInitialPort", "1050");
     ORB orb = ORB.init(args, properties);
     org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
     NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
     String name = "Hello";
     helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));
  2. 通过`ORB`生成方式： 
         ORB orb = ORB.init(args, null);
     org.omg.CORBA.Object obj = orb.string_to_object("corbaname::127.0.0.1:1050#Hello");
     Hello hello = HelloHelper.narrow(obj);
或
         ORB orb = ORB.init(args, null);
     org.omg.CORBA.Object obj = orb.string_to_object("corbaloc::127.0.0.1:1050");
     NamingContextExt ncRef = NamingContextExtHelper.narrow(obj);
     Hello hello = HelloHelper.narrow(ncRef.resolve_str("Hello"));
  3. 通过JNDI生成方式： 
         ORB orb = ORB.init(args, null);
     Hashtable env = new Hashtable(5, 0.75f);
     env.put("java.naming.corba.orb", orb);
     Context ic = new InitialContext(env);
     Hello helloRef = HelloHelper.narrow((org.omg.CORBA.Object)ic.lookup("corbaname::127.0.0.1:1050#Hello"));
通过`NameServer`生成方式我们已经很熟悉了，接下来我们来着重看一下通过ORB的生成方式，其实和`Stub`反序列化处的处理是一样的：
关键点就是在`string_to_object()`方法上，跟进看一下，具体实现在`com.sun.corba.se.impl.orb.ORBImpl`：
在`operate`中会对出入的字符串进行协议匹配，这里支持三种协议：
  * `IOR`
  * `Corbaname`
  * `Corbaloc`与`IOR`最终都会生成一个`Stub`
在这里`IOR`是在获取到`IOR`后生成`Stub`完成rpc调用的，而真正无需事先声明获取`NameService`过程，
**直接可以完成rpc调用的就只有`Corbaname`协议和`Corbaloc`协议了**。`Corbaname`与`Corbaloc`在实现上有相近点，具体体现在对url_str的解析以及处理流上。这里我们首先看一下`insURLHandler.parseURL()`对于url_str的解析流程：
可以看到`CorbanameURL`的生成过程就是将`corbaname:`到`#`这段内容提取出来重新填充到`corbaloc:`后，也就是说最终与`orbd`通信所利用的协议仍然是`Corbaloc`，之后将`#`后的内容作为`rootnaming
context`的引用名。
接下里我们看一下处理流当中的相似点：
可以看到都是通过`getIORUsingCorbaloc()`方法来从`orbd`获取IOR的。而在`resolveCorbaname`中又在后续增加了和`NamingService`相同的操作。所以通过这两部分能看出具体通信使用的是`Corbaloc`。
###  3.2 rpc流程
通过上面的分析，我们大致知道了生成`Stub`的几种方式，其中有非常重要的一个方法`resolve_str()`完成了具体的rpc流程，接下来将详细的分析一下流程。
`resolve_str()`在客户端的具体实现逻辑在`org.omg.CosNaming._NamingContextExtStub`：
在红框所示的这两行代码中完成了rpc调用及反序列化流程，其主要完成了根据IOR完成通信初始化、发送请求、接受请求、反序列化等流程，接下来将一个一个详细的说明。
####  3.2.1 通信初始化
这一部分的功能实现在`_request()`方法中体现。通信初始化可以简单的表现在两个方面：
  * `CorbaMessageMediator`初始化