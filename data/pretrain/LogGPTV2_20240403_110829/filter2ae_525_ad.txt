node from the root node, so that the leaf node is exactly the sink method we
expect. . The gadgetinspector uses breadth-first (BFS) for the traversal of
the tree, and skips the nodes that have already been checked, which reduces
the running overhead and avoids loops, but throws away many other chains.
This process looks like this:
Through the transmission of the stain, the source chain from source->sink is
finally found.
**Note** : targ indicates the index of the trainted parameter, 0->1 indicates
that the 0 parameter of the parent method is passed to the 1 parameter of the
child method.
### Sample Analysis
Now write a concrete demo example based on the author's example to test the
above steps.
The demo is as follows:
    IFn.java:
        package com.demo.ifn;
        import java.io.IOException;
        public interface IFn {
            public Object invokeCall(Object arg) throws IOException;
        }
    FnEval.java
        package com.demo.ifn;
        import java.io.IOException;
        import java.io.Serializable;
        public class FnEval implements IFn, Serializable {
            public FnEval() {
            }
            public Object invokeCall(Object arg) throws IOException {
                return Runtime.getRuntime().exec((String) arg);
            }
        }
    FnConstant.java:
        package com.demo.ifn;
        import java.io.Serializable;
        public class FnConstant implements IFn , Serializable {
            private Object value;
            public FnConstant(Object value) {
                this.value = value;
            }
            public Object invokeCall(Object arg) {
                return value;
            }
        }
    FnCompose.java:
        package com.demo.ifn;
        import java.io.IOException;
        import java.io.Serializable;
        public class FnCompose implements IFn, Serializable {
            private IFn f1, f2;
            public FnCompose(IFn f1, IFn f2) {
                this.f1 = f1;
                this.f2 = f2;
            }
            public Object invokeCall(Object arg) throws IOException {
                return f2.invokeCall(f1.invokeCall(arg));
            }
        }
    TestDemo.java:
        package com.demo.ifn;
        public class TestDemo {
            //测试拓扑排序的正确性
            private String test;
            public String pMethod(String arg){
                String vul = cMethod(arg);
                return vul;
            }
            public String cMethod(String arg){
                return arg.toUpperCase();
            }
        }
    AbstractTableModel.java:
        package com.demo.model;
        import com.demo.ifn.IFn;
        import java.io.IOException;
        import java.io.Serializable;
        import java.util.HashMap;
        public class AbstractTableModel implements Serializable {
            private HashMap __clojureFnMap;
            public AbstractTableModel(HashMap clojureFnMap) {
                this.__clojureFnMap = clojureFnMap;
            }
            public int hashCode() {
                IFn f = __clojureFnMap.get("hashCode");
                try {
                    f.invokeCall(this);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return this.__clojureFnMap.hashCode() + 1;
            }
        }
**Note** : The order of the data in the screenshot below is changed, and the
data only gives the data in com/demo.
#### Step1 Enumerate All Classes and All Methods of Each Class
classes.dat:
Methods.dat:
#### Step2 Generate Passthrough Data Stream
passthrough.dat:
It can be seen that only the FnConstant's invokeCall in the subclass of IFn is
in the passthrough data stream, because several other static analysis cannot
determine the relationship between the return value and the parameter. At the
same time, TestMethod's cMethod and pMethod are in the passthrough data
stream, which also explains the necessity and correctness of the topology
sorting step.
#### Step3 Enumerate Passthrough Call Graph
callgraph.dat:
#### Step4 Search For Available Sources
sources.dat:
#### Step5 Search Generation Call Chain
The following chain was found in gadget-chains.txt:
    com/demo/model/AbstractTableModel.hashCode()I (0)
      com/demo/ifn/FnEval.invokeCall(Ljava/lang/Object;)Ljava/lang/Object; (1)
      java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; (1)
It can be seen that the choice is indeed to find the shortest path, and did
not go through the FnCompose, FnConstant path.
##### Loop Caused Path Explosion
In the fifth step of the above process analysis, what happens if you remove
the judgment of the visited node, can you generate a call chain through
FnCompose and FnConstant?
In the explosion state, the Search space is infinitely increased, and there
must be a loop. The strategy used by the author is that the visited nodes are
no longer accessed, thus solving the loop problem, but losing other chains.
For example, the above FnCompose class:
    public class Fncompose implements IFn{
        private IFn f1,f2;
        public Object invoke(Object arg){
            return f2.invoke(f1.invoke(arg));
        }
    }
Since IFn is an interface, it will look for a subclass of it in the call chain
generation. If f1 and f2 are objects of the FnCompose class, this forms a
loop.
##### Implicit Call
Test the implicit call to see if the tool can find out, and make some changes
to FnEval.java:
    FnEval.java
        package com.demo.ifn;
        import java.io.IOException;
        import java.io.Serializable;
        public class FnEval implements IFn, Serializable {
            private String cmd;
            public FnEval() {
            }
            @Override
            public String toString() {
                try {
                    Runtime.getRuntime().exec(this.cmd);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                return "FnEval{}";
            }
            public Object invokeCall(Object arg) throws IOException {
                this.cmd = (String) arg;
                return this + " test";
            }
        }
result:
    com/demo/model/AbstractTableModel.hashCode()I (0)
      com/demo/ifn/FnEval.invokeCall(Ljava/lang/Object;)Ljava/lang/Object; (0)
      java/lang/StringBuilder.append(Ljava/lang/Object;)Ljava/lang/StringBuilder; (1)
      java/lang/String.valueOf(Ljava/lang/Object;)Ljava/lang/String; (0)
      com/demo/ifn/FnEval.toString()Ljava/lang/String; (0)
      java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; (1)
The toString method is implicitly called, indicating that this step of finding
an implicit call is made in the bytecode analysis.
##### Not following Reflection Call
In the tool description of github, the author also mentioned the blind spot of
this tool in static analysis, like `FnEval.class.getMethod("exec",
String.class).invoke(null, arg)` is not Follow the reflection call, modify
FnEval.java:
    FnEval.java
        package com.demo.ifn;
    import java.io.IOException;
    import java.io.Serializable;
    import java.lang.reflect.InvocationTargetException;
    public class FnEval implements IFn, Serializable {
        public FnEval() {
        }
        public static void exec(String arg) throws IOException {
            Runtime.getRuntime().exec(arg);
        }
        public Object invokeCall(Object arg) throws IOException {
            try {
                return FnEval.class.getMethod("exec", String.class).invoke(null, arg);
            } catch (NoSuchMethodException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
After testing, it was not found. But change `FnEval.class.getMethod("exec",
String.class).invoke(null, arg)` to `this.getClass().getMethod("exec",
String.class).invoke(null, arg ) This kind of writing can be found.
##### Special Grammar
Test a special syntax, such as lambda syntax? Make some changes to
FnEval.java:
    FnEval.java:
        package com.demo.ifn;
        import java.io.IOException;
        import java.io.Serializable;
        public class FnEval implements IFn, Serializable {
            public FnEval() {
            }
            interface ExecCmd {
                public Object exec(String cmd) throws IOException;
            }
            public Object invokeCall(Object arg) throws IOException {
                ExecCmd execCmd = cmd -> {
                    return Runtime.getRuntime().exec(cmd);
                };
                return execCmd.exec((String) arg);
            }
        }
After testing, this chain of utilization was not detected. Explain that the
current grammar analysis section has not yet analyzed the special grammar.
##### Anonymous Inner Class
Test the anonymous inner class and make some changes to FnEval.java:
    FnEval.java:
        package com.demo.ifn;
        import java.io.IOException;
        import java.io.Serializable;
        public class FnEval implements IFn, Serializable {
            public FnEval() {
            }
            interface ExecCmd {
                public Object exec(String cmd) throws IOException;
            }
            public Object callExec(ExecCmd execCmd, String cmd) throws IOException {
                return execCmd.exec(cmd);
            }
            public Object invokeCall(Object arg) throws IOException {
                return callExec(new ExecCmd() {
                    @Override
                    public Object exec(String cmd) throws IOException {
                        return Runtime.getRuntime().exec(cmd);
                    }
                }, (String) arg);
            }
        }
After testing, this chain of utilization was not detected. Explain that the
current parsing block does not yet have an analysis of anonymous inner
classes.
### Sink->Source?
Since source->sink, can we sink->source? Since source and sink are known when
searching for source->sink, if sink and source are known when searching for
sink->source, then source->sink and sink->source seem to be no different. If
we can summarize the source as a parameter-controllable feature, the
sink->source method is a very good way to not only be used in the
deserialization vulnerability, but also in other vulnerabilities (such as
templates injection and so on). But there are still some problems here. For
example, deserialization treats `this` and the properties of the class as 0
arguments, because these are controllable during deserialization, but in other
vulnerabilities these are not necessarily controllable. .
I still don't know how to implement it and what problems it will have. Don't
write it for the time being.
### Defect
At present, I have not done a lot of testing, I just have analyzed the general
principle of this tool from a macro level. Combining Ping An Group [analysis
article](https://mp.weixin.qq.com/s/RD90-78I7wRogdYdsB-UOg) and the above test
can now summarize several shortcomings (not only these defects):
  * callgraph generation is incomplete
  * The call chain search result is incomplete due to the search strategy
  * Some special grammars, anonymous inner classes are not yet supported
  * ...
### Conceive and Improve
  * Improve the above defects
  * Continuous testing in conjunction with known utilization chains (eg ysoserial, etc.)
  * List all chains as much as possible and combine them with manual screening. The strategy used by the author is that as long as there is a chain through this node, other chains will not continue to search through this node. The main solution is the last call chain loop problem, which is currently seen in several ways:
  * DFS+ maximum depth limit
  * Continue to use BFS, manually check the generated call chain, remove the invalid callgraph, and repeat the run
  * Calling the chain cache (this one has not yet understood how to solve the loop specifically, just saw this method)
My idea is to maintain a blacklist in each chain, checking for loops every
time. If a loop occurs in this chain, the nodes that cause the loop will be
blacklisted and continue to let it go. . Of course, although there is no ring,
there will be an infinite growth of the path, so it is still necessary to add
a path length limit.
  * Try the implementation of sink->source
Multi-threaded simultaneous search for multiple use chains to speed up
  * ...
### At last
In the principle analysis, the details of the bytecode analysis are ignored.
Some places are only the results of temporary guessing and testing, so there
may be some errors. The bytecode analysis is a very important part. It plays
an important role in the judgment of the stain and the transfer of the stain.
If there is a problem in these parts, the whole search process will have
problems. Because the ASM framework has high requirements for users, it is
necessary to master the knowledge of the JVM to better use the ASM framework,
so the next step is to start learning JVM related things. This article only
analyzes the principle of this tool from a macro level, but also adds some
confidence to yourself. At least understand that this tool is not
incomprehensible and cannot be improved. At the same time, I will be separated
from the tool afterwards. It is also convenient, and others can refer to it if
they are interested in this tool. After I familiar with and can manipulate
Java bytecode, go back and update this article and correct the possible
errors.
If these ideas and improvements are really implemented and verified, then this
tool is really a good helper. But there is still a long way to go before these
things can be realized. I haven imagined so many problems before I started to
implement them. I will encounter more problems when I realize them. But
fortunately, there is a general direction, and the next step is to solve each
link one by one.
### Reference
  * https://i.blackhat.com/us-18/Thu-August-9/us-18-Haken-Automated-Discovery-of-Deserialization-Gadget-Chains.pdf>
  * 
  * 
  * 
### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *