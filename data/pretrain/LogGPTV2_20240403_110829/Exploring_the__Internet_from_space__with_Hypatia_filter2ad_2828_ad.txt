by repeating the same experiments, except using TCP Vegas. Note
that the algorithms are not competing with each other, rather, each
transport is tested entirely separately, i.e., without any competing
traffic ‚Äì the issue of Vegas not being aggressive enough against
Reno or Cubic is entirely orthogonal and immaterial here. Any
transport implementable in ns-3 can be evaluated in Hypatia.
Fig. 5 shows the behavior of both NewReno and Vegas for one
of the paths, Rio de Janeiro to St. Petersburg, Across the 200 s
simulations, the per-packet RTT is shown in Fig. 5(a), the congestion
IMC ‚Äô20, October 27‚Äì29, 2020, Virtual Event, USA
Kassing and Bhattacherjee et al.
first. Telesat‚Äôs deployment plan is more complex [72]; we simply
use its first shell, T1. We use the world‚Äôs 100 most populous cities
as GSes, and examine connections between all pairs of GSes.
Fig. 6: RTT vs. geodesic. Even the maximum RTT (over time) over
LEO networks is close to the geodesic RTT for most connections, espe-
cially for Telesat and Kuiper. However, some connections see several
times higher maximum RTTs.
window in Fig. 5(b), and the achieved throughput averaged over
100 ms intervals in Fig. 5(c). Vegas, as expected, often operates with
a near-empty buffer, e.g., until around 140 s, it matches the ping RTT
measurements in Fig. 3(a) closely. Unfortunately, however, Vegas
interprets the increase in latency at ‚àº33 s as a sign of congestion,
drastically cuts its congestion window (Fig. 5(b)), and achieves very
poor throughput (Fig. 5(c)) after this point.
We tested NewReno and Vegas primarily because they are two
well-known algorithms using loss- and delay-based congestion de-
tection, and are already implemented in ns-3. However, Hypatia
can be used with any congestion control algorithm implemented
in ns-3. For instance, once a mature implementation of BBR [11]
is available, evaluating its behavior on LEO networks would be of
high interest. As of this writing, while there are some BBR imple-
mentations available online [17, 39], these have not been merged
into ns-3, and we did not invest effort in testing these.
Our above results highlight challenges for congestion control in
LEO networks: both loss and delay are poor signals of congestion
in this setting. Loss, besides suffering from its well-known problem
of only arising after buffers are full and latencies are inflated, is
additionally vulnerable to being inferred incorrectly due to reorder-
ing. On the other hand, delay is also an unreliable signal because
delay fluctuations occur even without queueing. This makes con-
gestion control in this setting a difficult problem. Of course, if the
sender knows the satellite path‚Äôs variations, they can ‚Äúsubtract‚Äù
them out and adapt. However, in general, the end-points need not
even be aware that they are using a satellite-path: an end-point that
is directly connected to a fixed connection could have its traffic
sent to the nearest ground station by its ISP, as suggested in recent
work [26]. Solutions like splitting the transport connection are also
becoming difficult to support with transport such as QUIC, that
does not support man-in-the-middle behavior.
Takeaway for congestion control: Both loss and delay can be
poor signals for congestion control in LEO networks.
5 A CONSTELLATION-WIDE VIEW
We use the first planned deployments for Starlink and Kuiper, and
the first shell for Telesat to examine constellation-scale behavior.
Starlink and Kuiper plan to deploy their shells S1 and K1 in Table 1
5.1 RTTs and variations therein
We measure the minimum and maximum RTT for each connection
over the simulation duration. We also compute the ‚Äúgeodesic RTT‚Äù
i.e., the time it would take to travel back and forth between a con-
nection‚Äôs end-points at the speed of light in vacuum, ùëê. This is thus
the minimum achievable RTT.
For each connection, we compute the ratio of its maximum RTT
over time to the geodesic RTT between its end-points. Fig. 6 shows
this ratio as a CDF across connections. For all three constellations,
more than 80% of connections see a maximum RTT less than 2√ó the
geodesic. Given that terrestrial fiber paths are often longwinded,
and the speed of light in fiber is roughly 2ùëê/3 [9], this implies that
for most connections in our simulation, LEO networks will have
substantially lower latencies than today‚Äôs Internet. The long tail of
latency inflation compared to the geodesic arises from connections
between relatively nearby end-points, for which the overheads
of the up-down connectivity to satellites are significant. For this
reason, we already exclude end-point pairs that are within 500 km
of each other from this plot and other results in this section.
Similar observations about latency in LEO networks have already
been made in other work [5, 6, 29, 44]. However, a new and sur-
prising finding here is about the comparison of the constellations.
Telesat has the fewest satellites, with less than a third of Kuiper‚Äôs
and less than a fourth of Starlink‚Äôs, and yet it achieves the lowest
latencies for most connections. Starlink‚Äôs latencies are also higher
than Kuiper‚Äôs.
The explanations for these results lie in the connectivity param-
eters and the orbital structure of the constellations. Telesat claims
that it will use a much lower minimum angle of elevation, 10¬∞, com-
pared to Starlink (25¬∞) and Kuiper (30¬∞). This allows GSes to see
more of Telesat‚Äôs satellites at any time, providing more options for
end-end paths. Additionally, as these low elevation paths are closer
to the horizon, the overhead of the up-down link is often smaller.
The Starlink-Kuiper differences are not due to the angle of eleva-
tion, which is similar, but the orbital structure. Both constellations
use a minimum angle of elevation that is much higher than Tele-
sat‚Äôs. This means that typically, GSes can see fewer satellites. This
restricts the GS-satellite connectivity, and increases the impact of
satellite-satellite connectivity. Kuiper‚Äôs orbital design, with 34 or-
bits of 34 satellites each, is more uniform than Starlink‚Äôs, with 72
orbits of 22 satellites each. In particular, satellites within an orbit are
much farther apart in Starlink, and paths often require zig-zagging
through multiple orbits to reach the destination.
We also evaluate how much the RTT fluctuates over time across
different connections. Fig. 7 shows the distribution across con-
nections of: (a) the absolute value of the maximum RTT within a
connection; (b) the difference between the maximum and minimum
within a connection; and (c) the ratio between the maximum and
minimum within a connection. The results show that while Star-
link sees the largest latency changes (‚àº10 ms in the median), the
other constellations also feature significant latency variation at the
tail. Telesat‚Äôs variations are the smallest again because of its low
 0 0.2 0.4 0.6 0.8 1 1 2 3 4 5 6 7ECDF (pairs)Max. RTT / Geodesic RTT (x)Telesat T1Kuiper K1Starlink S1Exploring the ‚ÄúInternet from space‚Äù with Hypatia
IMC ‚Äô20, October 27‚Äì29, 2020, Virtual Event, USA
(a) CDF across pairs: max. RTT over time.
(b) CDF across pairs: max RTT - min RTT.
(c) CDF across pairs: max RTT / min RTT.
Fig. 7: RTTs and variations therein. Starlink S1 has a smaller number of satellites per orbit (22) than Kuiper K1, and thus sees both higher
and more variable RTTs. Telesat sees lower and less variable RTTs despite fewer satellites because its extremely low minimum angle of elevation
allows more GS-satellite connectivity options.
(a) Distribution of path changes.
(b) Distribution of path hop-count differences.
(c) Distribution of max hop-count / min hop-count.
Fig. 8: Path structure changes. Telesat‚Äôs paths change less than Kuiper‚Äôs and Starlink‚Äôs.
inclination: the same satellites are reachable for longer, and result
in more continuous and smaller latency changes. For Starlink, for
more than 30% of connections, the maximum RTT is at least 20%
larger than the minimum RTT.
For two reasons, we caution readers against concluding that
‚ÄòTelesat is a better design‚Äô: (a) There are downsides to using a lower
minimum angle of elevation, as discussed in ¬ß2.1; and (b) We are
evaluating constellations strictly from their filings, and it is unclear
to us if some operators are more optimistic than others about the
plausible design parameters; it is worth remembering that the filings
are meant to secure radio spectrum for an operator by showing
the potential utility of its network. The larger point, as far as the
Hypatia framework is concerned, is that given the right input
parameters, we can compare different designs along metrics like
RTTs and RTT variability.
5.2 Path structure evolution
Besides RTTs, we also examine the structure of the underlying
paths. For each connection, we measure the number of times its path
changes over the simulation. If the forwarding state computed in
two successive time-steps shows any different satellites composing
the path, we count this as one path change. Across connections, we
compute the CDF of these path changes. For each connection, we
also calculate the maximum and minimum number of satellite hops
in the path across the simulation.
Fig. 8(a) shows that in the median, over the 200 s simulation,
Starlink and Kuiper connections see 4 path changes, while Telesat
connections see 2 changes. These results are in line with our expla-
nation of RTT variations: Telesat‚Äôs use of a lower minimum angle
of elevation allows remaining connected to a satellite for longer,
and reduces path changes. The tail of path changes is long as well:
for Kuiper and Starlink, 10% of connections see 7 or more path
changes.
Fig. 8(b) shows how these different paths differ in terms of their
hop count. For Telesat, paths do not typically change in terms of hop
count. This is explained by Telesat being sparser: there are simply
fewer options for end-end paths, and with farther-apart satellites,
one hop of change would already be substantial. For Starlink, with
its large number of satellites, there are many more options for paths,
and more than a third of connections see paths with at least 2 more
hops than the minimum number.
Fig. 8(c) shows the same hop-count data in terms of relative
change in hop-count. For Starlink, more than 10% of connections
see more than 50% change in hop-count.
Unlike today‚Äôs Internet, LEO network paths evolve rapidly, es-
pecially for the denser networks, with paths changing multiple
times per minute, and often by a substantial number and fraction
of hops. Routing within LEO networks thus features high churn.
Nevertheless, given the tens of seconds between typical changes,
we do not expect the setting up of desired routing state itself to be
a major bottleneck.
5.3 Granularity of time-step updates
Hypatia converts a continuous process of satellite movement and
the resulting path changes into a discrete one. While latencies
along paths are continuously updated, the forwarding state is only
recomputed at fixed time-steps. We thus test how this affects our
observations on path changes.
 0 0.2 0.4 0.6 0.8 1 0 50 100 150 200 250ECDF (pairs)Max. RTT (ms)Telesat T1Kuiper K1Starlink S1 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30 35 40 45 50ECDF (pairs)Max. RTT - Min. RTT (ms)Telesat T1Kuiper K1Starlink S1 0 0.2 0.4 0.6 0.8 1 1 1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 2.8ECDF (pairs)Max. RTT / Min. RTT (x)Telesat T1Kuiper K1Starlink S1 0 0.2 0.4 0.6 0.8 1 0 2 4 6 8 10 12 14 16ECDF (pairs)# of path changesTelesat T1Kuiper K1Starlink S1 0 0.2 0.4 0.6 0.8 1 0 1 2 3 4 5 6 7 8ECDF (pairs)Max. hop count - Min. hop count (# hops)Telesat T1Kuiper K1Starlink S1 0 0.2 0.4 0.6 0.8 1 1 1.2 1.4 1.6 1.8 2 2.2 2.4 2.6 2.8ECDF (pairs)Max. hop count / Min. hop countTelesat T1Kuiper K1Starlink S1IMC ‚Äô20, October 27‚Äì29, 2020, Virtual Event, USA
Kassing and Bhattacherjee et al.
(a)
(b)
Fig. 9: Time granularity for forwarding state updates. (a) As expected, compared to 50 ms time-steps, 100 ms time-steps see roughly 2√ó
the path changes, while 1000 ms see roughly 20√ó path changes. (b) The 1000 ms time-step misses a substantial number of path changes for some
pairs, while for 100 ms, missed changes are negligible.
We compute the network‚Äôs forwarding state at different time-
steps of 50, 100, and 1000 ms. For each configuration, we calculate:
(a) how many path changes per second occur in a time-step; (b)
how many path changes are missed at coarser time-steps compared
to 50 ms.
We only include results for Kuiper K1, but the conclusions hold
broadly. Fig. 9(a) shows the distribution of the number of path
changes network-wide across time-steps. Ideally, the 100 ms time-
step would have 2√ó the number of changes compared to the 50 ms
one, and 1000 ms would have 20√ó. This is almost always the case
for 100 ms, but for 1000 ms a significant fraction of path changes
are simply missed because multiple changes happened entirely
within that interval. Fig. 9(b) shows the distribution of these missed
changes for both the 100 ms and 1000 ms time-steps compared to
the 50 ms one. The 100 ms time-step misses for a negligible fraction
(0.4%) of pairs one or more path changes, while 1000 ms misses for
6% of pairs one or more path changes.
Note that finer granularity of time-steps requires expensive
shortest-path computations for the entire large network. Based
on our results, 100 ms is a good compromise. Further, given that
path changes occur over tens of seconds, the 100 ms time-step can
only be inaccurate and not provide the actual shortest paths for at
most 1% of the time.
5.4 Bandwidth fluctuations
Beside the structure and latency of paths, and the response of indi-
vidual TCP connections, we would also like to understand the result
of interactions between traffic flows in such networks. Towards
this goal, we conduct a simple experiment, sending long running
TCP flows between pairs of GSes over their shortest paths.
We use the same LEO network as in ¬ß4, i.e., Kuiper‚Äôs K1 shell,
with each link in the network set to 10 Mbps capacity to allow
us to scale the experiment. Instead of just pings, we now send
long running TCP NewReno flows between these GS pairs, which
are still the same random permutation of the world‚Äôs 100 most
populous cities. From the random permutation matrix, we remove
the pairs which have the same source or destination satellite as Rio
de Janeiro or St. Petersburg at any point through the simulation; this
prevents the first and last hops from being the bottleneck, allowing
us to focus on the ISL network‚Äôs behavior. We do not put this forth
as a representative traffic matrix; rather, it is simply one way of
sending substantial traffic through the network, and as we show
next, reveals interesting network behavior. Hypatia can support
arbitrary input traffic matrices.
We find that despite the traffic matrix being fixed throughout
our 200 s experiment, and the routing policy consistently being
shortest path routing, the motion of satellites makes the path-level
behavior highly dynamic.
Monitoring link utilization at one link is not a particularly useful
way of demonstrating this in LEO networks ‚Äî a particular ISL will
traverse the globe in ‚àº100 min, seeing conditions corresponding to
its location over time. We thus measure the ‚Äúunused bandwidth‚Äù for
each GS-pair, i.e., how much unused capacity is there on the end-
end path for that GS-pair over time. This is simply the path‚Äôs link
capacity (10 Mbps in our running scenario) minus the utilization of
the most congested on-path link at any time. In a static network with
fixed routing, and a fixed set of long-running TCP flows, we should