种攻击，基于 aircrack 工具套装，令它可以很容易地破解捕获的哈希值。
195
第6章 短传——物理访问攻击
关于发动 WiFi 攻击的装备，除了使用一对 Alfa 无线网卡，执行更加隐蔽的 WiFi 攻击的简单
方法是使用 WiFi Pineapple Nano。如果你想建立一个假的主无线接入点，通过天线改变他们
流量的通信路径，用伪造页面捕获身份验证，执行所有的中间人攻击，运行 Responder 和其
他攻击的话，WiFi Pineapple Nano 是一个能执行此操作的轻量级硬件工具。
除了 Pineapple，还有其他一些工具可以用来攻击公司网络。其中一个就是 eaphammer。
eaphammer 的功能：
从 WPA-EAP 和 WPA2-EAP 网络窃取 RADIUS 凭据。
执行恶意门户攻击，以窃取 AD 凭证，并执行间接无线枢轴。
执行 captive portal 攻击。
内置响应器集成。
支持开放网络和 WPA-EAP/WPA2-EAP。
196
第6章 短传——物理访问攻击
大多数攻击无需手动配置。
安装和设置过程无需手动配置。
使用最新版本的 hostapd（2.6）。
支持恶意的 twin 攻击和 karma 攻击。
为间接无线枢轴生成定时 PowerShell payload。
针对恶意门户攻击的集成 HTTP 服务器。
支持 SSID 隐藏。
eaphammer 最好的地方是使用自定义攻击功能来执行 responder 攻击或捕获 NTLM
challange 身份验证哈希以进行破解( https://github.com/s0lst1c3/eaphammer#iii---stealing-
ad-credentials-using-hostile-portal-attacks ) 以及间接的无线枢轴(
https://github.com/s0lst1c3/eaphammer#iv---indirect-wireless-pivots )。
为避免读者没看到上面的注释，所以译者再次注: 如若不懂“NTLMv2 Challenge 哈希”，
可以参考此篇：Windows 下的密码 hash——NTLM hash 和 Net-NTLM hash 介绍
本章总结
物理攻击是最有趣的事情之一。这会加速你的肾上腺素分泌，让自己觉得像个罪犯，迫切地
想行恶。在我们的许多红队行动中，我们可能会花上几天的时间来为一家公司进行踩点，观
察警卫的轮换，并弄清楚他们都有什么类型的门。我们可能会尝试拍摄他们的工卡的照片，
记录人们离开大楼的时间，并找出能让我们进入大楼的薄弱环节。
从红队的角度来看，我们不仅要观察他们物理设施方面的安全薄弱点，也要注意他们内部的
人。
如果触发了警报，相关员工要过久才能觉察并应对？
摄像头是否开启全天候监控？是这样的话，如果发现什么可疑，到相关人员来排查，能
有多长空余时间？
有人看守后门等其他的不常用出口吗？
如果行踪败露，你有办法脱身吗？
如果乔装打扮成该公司(或任何为该公司提供第三方服务）的员工，对方公司会对你的入
侵行为做什么反应？
最后要注意的是，在开始入侵行动之前，确保要有一个明确的攻击范围、一封入侵目标公司
给你做的书面授权证明、首席安全官或物理设施安全负责人的电话号码，并确保与对方达成
共识、进行合作。准备措施做得越好，就能更好的避免不必要的误会和麻烦。但是因为这终
究是一种危险的委托，所以我也无法保证精心准备就一定能万无一失。
197
第7章 四分卫突破——逃避杀毒软件和网络检测
第7章 四分卫突破——逃避杀毒软件和网络检
测
译者：@Snowming
为红队行动编写工具
红队人员和渗透测试人员比较明显的区别之一就是红队人员能快速的适应并理解不同的防
护。无论是理解低级语言（机器代码和汇编语言），编写 shellcode ，创建自定义的 C2 二进
制可执行文件，还是修改代码来隐藏恶意程序，它们都是我们（红队）日常工作的一部分。
我总是遇到不会编程的渗透测试人员，虽然这不是一项硬性要求，但是编程水平确实会决定
他们专业成长的高度。 因此，我专门编写这一章节来给那些没有使用过偏向底层的低级语言
编程的人一个良好的入门方向。
基础的键盘记录器
键盘记录器是所有渗透测试人员 / 红队人员的必备工具，本节将指导你制作通用的键盘记录
器。 有时我们只想持续监控某个用户或获取其他凭据。 这可能是因为我们此时无法进行任何
类型的横向移动或者权限提升，或者我们可能只想监视用户以便更好开展将来的入侵活动。
在这些情况下，我们通常喜欢放置一个持续在受害者系统上运行的键盘记录器并将键盘记录
198
第7章 四分卫突破——逃避杀毒软件和网络检测
的数据发送到外网。 以下示例只是一个 ，本实验的目的是让你从这里了解基础知识和
POC
构建它们。 它全部用 C 语言（较底层的语言）来编写的原因是保持二进制文件相对较小、更
好的系统控制、并且规避杀毒软件。 在之前的书中，我们使用 编写了一个键盘记录
Python
器并使用 对其进行编译以使其成为二进制文件，但这些很容易就被检测到。 让我们
py2exe
来看一个稍微复杂的例子。
设置你的环境
这是在 C 中编写和编译以生成 Windows 二进制文件并创建自定义键盘记录器所需的基本设
置。
在一个虚拟机中安装 Windows 10
安装 Visual Studio ，以便你可以使用命令行编译器和使用 Vim 进行代码编辑
到目前为止，Windows API 编程的最佳学习资源是微软自己的开发者网络网站 MSDN。
是一个非常宝贵的资源，它详细说明了系统调用，数据类型和结构定义，并包含了许
MSDN
多示例。通过阅读微软出版社出版的《Windows Internals》书籍，可以更深入地了解
Windows 操作系统， 虽然这个项目中并不是特别需要这个。 对于学习 C 语言，有一本好
书，C 语言的创始人之一参与了对此书的撰写，名为《C语言程序设计》（The C
Programming Language），书的作者是 Kernighan 和 Ritchie。最后，可以阅读《Beej’s
Guide to Network Programming》，有印刷版和在线版，这是 C 语言中关于的 socket 编程的
一本很好的入门读物。
从源码编译
在这些实验中，将会有多个示例代码和例子。实验室将使用微软的 编
Optimizing Compiler
译代码，该编译器随 社区版本一起提供，并内置于 开发者命
Visual Studio Visual Studio
令提示符（Visual Studio Developer Command Prompt）中。安装 VS 社区版本后，请通过
工具（Tools） --> 获取工具和功能（Get Tools and Features） 安装 C++ 的组件 通用
Windows 平台开发和桌面开发。要编译示例源码，请打开开发者命令提示符的一个实例，然
后切换到包含源代码文件的文件夹目录。 最后，运行命令 。这将生成
cl sourcefile.c io.c
一个与源文件同名的可执行文件。
编译器默认为 32 位，但此代码也可以用64位进行编译。要编译64位程序，请运行位于
Visual Studio 文件夹中的批处理程序。在命令提示符中，切换到目录 “ C:\Program Files
(x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build ” ，注意，这个目录可能会
因为你的 Visual Studio 版本而改变（但是大致是以上目录）。然后，运行命令 vcvarsall.bat
x86_amd64 ，这将设置 Microsoft 编译器编译 64 位的二进制文件而不是编译成 32 位的。现
在，你可以通过运行 （path 是源码文件的绝对路径）来编译代码。
cl path/to/code.c
示例框架
199
第7章 四分卫突破——逃避杀毒软件和网络检测
该项目的目标是创建一个键盘记录器，利用 C 语言和底层 Windows 功能来监视击键。该键盘
记录器使用 和 函数 。 允许在
SetWindowsHookEx LowLevelKeyboardProc SetWindowsHookEx
本地和全局上下文中设置各种类型的 Hook（钩子）。在这种情况下， 参数将
WH_KEYBOARD_LL
用于提取底层键盘事件 。 的函数原型看起来像这样（
SetWindowsHookEx
http://bit.ly/2qBEzsC ）：
HHOOK WINAPI SetWindowsHookEx(
_In_ int idHook,
_In_ HOOKPROC lpfn,
_In_ HINSTANCE hMod,
_In_ DWORD dwThreadId
);
该函数创建了定义为整型的 hook 的 ID、指向函数的指针、句柄和线程 ID。前两个值是最重
要的。你即将要安装的 hook 的 ID 数据类型是整型。Windows 会在功能页面上列出的可用 ID
。在我们的例子中，将使用 ID 13 或 WH_KEYBOARD_LL 。 HOOKPROC 是一个指向回调函数的指
针，每次被钩住的进程接收数据时都会调用该函数。这意味着每次按下一个键，都会调用
HOOKPROC 。这是用于将击键写入文件的函数。 hMod 是包含 lpfn 指针指向的函数的 DLL
的句柄。此值将设置为 NULL，因为函数与 在同一进程中使用。
SetWindowsHookEx
dwThreadId 将设置为0以将回调与桌面上的所有线程相关联。最后，该函数返回一个整数，
该整数将用于验证 hook 是否已正确设置或以其他方式退出。
第二部分是回调函数。回调函数将为此键盘记录器完成一系列繁重的工作。此函数将处理接
收击键，将其转换为 ASCII 字符以及记录所有文件操作。 LowLevelKeyBoardProc （
http://bit.ly/2HomCYQ ）的原型如下所示：
LRESULT CALLBACK LowLevelKeyboardProc(
_In_ int nCode,
_In_ WPARAM wParam,
_In_ LPARAM lParam
);
让我们回顾一下 所需的内容。该函数的参数是一个整数，告诉
LowLevelKeyBoardProc
Windows 如何解释该消息。这些参数中的两个是：
wParam，它是消息的标识符
lParam，它是指向 结构体的指针
KBDLLHOOKSTRUCT
的值在功能页面中指定。还有一个页面描述了 的成
wParam KBDLLHOOKSTRUCT
员。 的 的值称为 或 （
lParam KBDLLHOOKSTRUCT vkCode Virtual-Key Code
http://bit.ly/2EMAGpw ）。这是按下的键的代码，而不是实际的字母，因为字母可能会根
据键盘的语言而有所不同。 需要稍后转换为相应的字母。现在不要着急把参数传
vkCode
递给我们的键盘回调函数，因为它们将在激活 hook 时由操作系统传递。
200
第7章 四分卫突破——逃避杀毒软件和网络检测
最后，挂钩键盘的初始架构代码如下所
示：https://github.com/cheetz/ceylogger/blob/master/skeleton
在查看框架代码时，需要注意的一些事项是，在回调函数中包含 （预处理指
pragma comment
令），消息循环和返回 CallNextHookEx 行。 pragma comment 是用于链接 User32 DLL 的编
译器指令。 此 DLL 包含将要进行的大多数函数调用，因此需要进行链接。它也可以与编译器
选项相关联。接下来，如果正在使用 函数，则必须使用消息循环。
LowLevelKeyboardProc
MSDN 声明，“此钩子在安装它的线程的上下文中调用。 通过向安装了钩子的线程发送消息来
进行调用。因此，安装钩子的线程必须有一个消息循环。“[ http://bit.ly/2HomCYQ ]
返回 CallNextHookEx 是因为 MSDN 声明 “ 调用 CallNextHookEx 函数链接到下一个钩子过程
是可选的，但强烈建议调用，否则已安装钩子的其他应用程序将不会收到钩子通知，因此可
能会出现错误行为。所以你应该调用 ，除非你一定要阻止其他应用程序看到
CallNextHookEx