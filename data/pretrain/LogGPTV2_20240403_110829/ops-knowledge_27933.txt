I plan to deploy several WSGI web applications using Twisted on a Debian server and would appreciate guidance for setting up a robust, production-ready environment. These applications will need to run 24/7.

### Requirements
1. **Multiple Configurations**: Each application should bind to different ports, interfaces, and privileges.
2. **Python-Based Setup**: I prefer to handle as much of the setup in Python as possible.
3. **Avoid Packaging Tools**: I do not want to use tools like `tap2deb` for packaging my applications.
4. **System Service Management**: I need to implement each application as a system service. I am open to using `/etc/init.d` shell scripts or managing this entirely in Python, but I want to avoid heavy solutions like Daemontools.
5. **Process Management with `twistd`**: If I use `twistd` for configuration and process management, what additional wrappers or supervisors are needed?
6. **Centralized Management**: Centralized management is preferred, but restricting control to the parent user account is acceptable.
7. **Reliability**: I want to avoid having to SSH into the server daily to restart crashed or blocked applications.

### Questions
1. **Best Practices for System Services**: What is the best way to implement each application as a system service? Should I use `/etc/init.d` shell scripts, or can I manage this with Python?
2. **Supervisors and Wrappers**: If I use `twistd` for most of the configuration and process management, what kind of wrappers or supervisors should I put in place?
3. **Monitoring and Alerts**: What are some good Python-based monitoring and alerting solutions to ensure that applications are running smoothly and to notify me if they crash?

### Research
- I have found `daemoncmd` from PyPI, which seems useful for launching daemon processes in Python.
- However, I am still looking for suitable Python-based monitoring and alerting solutions.

Any recommendations or best practices for achieving these goals would be greatly appreciated.