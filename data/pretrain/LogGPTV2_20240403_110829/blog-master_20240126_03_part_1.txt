## 开源PolarDB|PostgreSQL 应用开发者&DBA 公开课 - 5.6 PolarDB开源版本必学特性 - 安装与使用PostgreSQL开源插件/工具         
### 作者                                    
digoal                                    
### 日期                                    
2024-01-26                                    
### 标签                                    
PostgreSQL , PolarDB , 应用开发者 , DBA , 公开课                          
----                                    
## 背景            
## 安装与使用PostgreSQL开源插件/工具  
### 1、当前环境已安装并支持哪些插件  
通过pg_available_extensions视图可以查看当前数据库支持哪些插件, 安装了哪些插件?  
```  
postgres=# select * from pg_available_extensions;  
             name             | default_version | installed_version |                                                       comment                                                         
------------------------------+-----------------+-------------------+---------------------------------------------------------------------------------------------------------------------  
 postgres_fdw                 | 1.0             |                   | foreign-data wrapper for remote PostgreSQL servers  
 postgis                      | 3.3.2           |                   | PostGIS geometry and geography spatial types and functions  
 polar_monitor_preload        | 1.1             |                   | examine the polardb information  
 jsonb_plpython3u             | 1.0             |                   | transform between jsonb and plpython3u  
 ltree                        | 1.1             |                   | data type for hierarchical tree-like structures  
 tablefunc                    | 1.0             |                   | functions that manipulate whole tables, including crosstab  
 polar_csn                    | 1.0             |                   | polar_csn  
 plperl                       | 1.0             |                   | PL/Perl procedural language  
 polar_worker                 | 1.0             |                   | polar_worker  
 btree_gin                    | 1.3             |                   | support for indexing common datatypes in GIN  
 polar_stat_sql               | 1.3             |                   | Kernel statistics gathering, and sql plan nodes information gathering  
 address_standardizer         | 3.3.2           |                   | Used to parse an address into constituent elements. Generally used to support geocoding address normalization step.  
 btree_gist                   | 1.5             |                   | support for indexing common datatypes in GiST  
 earthdistance                | 1.1             |                   | calculate great-circle distances on the surface of the Earth  
 pltclu                       | 1.0             |                   | PL/TclU untrusted procedural language  
 amcheck                      | 1.1             |                   | functions for verifying relation integrity  
 ltree_plpython3u             | 1.0             |                   | transform between ltree and plpython3u  
 isn                          | 1.2             |                   | data types for international product numbering standards  
 tcn                          | 1.0             |                   | Triggered change notifications  
 pg_visibility                | 1.2             |                   | examine the visibility map (VM) and page-level visibility info  
 address_standardizer_data_us | 3.3.2           |                   | Address Standardizer US dataset example  
 sslinfo                      | 1.2             |                   | information about SSL certificates  
 polar_parameter_check        | 1.0             |                   | kernel extension for parameter validation  
 intagg                       | 1.1             |                   | integer aggregator and enumerator (obsolete)  
 insert_username              | 1.0             |                   | functions for tracking who changed a table  
 moddatetime                  | 1.0             |                   | functions for tracking last modification time  
 pageinspect                  | 1.7             |                   | inspect the contents of database pages at a low level  
 pg_trgm                      | 1.4             |                   | text similarity measurement and index searching based on trigrams  
 pg_prewarm                   | 1.2             |                   | prewarm relation data  
 ltree_plpython2u             | 1.0             |                   | transform between ltree and plpython2u  
 refint                       | 1.0             |                   | functions for implementing referential integrity (obsolete)  
 hstore_plpython3u            | 1.0             |                   | transform between hstore and plpython3u  
 postgis_tiger_geocoder       | 3.3.2           |                   | PostGIS tiger geocoder and reverse geocoder  
 adminpack                    | 2.0             |                   | administrative functions for PostgreSQL  
 pg_freespacemap              | 1.2             |                   | examine the free space map (FSM)  
 fuzzystrmatch                | 1.1             |                   | determine similarities and distance between strings  
 polar_tde_utils              | 1.0             |                   | Internal extension for TDE  
 lo                           | 1.1             |                   | Large Object maintenance  
 citext                       | 1.5             |                   | data type for case-insensitive character strings  
 bloom                        | 1.0             |                   | bloom access method - signature file based index  
 polar_vfs                    | 1.0             |                   | polar_vfs  
 pgrowlocks                   | 1.2             |                   | show row-level locking information  
 polar_monitor                | 1.2             |                   | examine the polardb information  
 timescaledb                  | 2.3.1           |                   | Enables scalable inserts and complex queries for time-series data  
 pltcl                        | 1.0             |                   | PL/Tcl procedural language  
 hstore_plperlu               | 1.0             |                   | transform between hstore and plperlu  
 hstore                       | 1.5             |                   | data type for storing sets of (key, value) pairs  
 timetravel                   | 1.0             |                   | functions for implementing time travel  
 plperlu                      | 1.0             |                   | PL/PerlU untrusted procedural language  
 smlar                        | 1.0             |                   | compute similary of any one-dimensional arrays  
 hstore_plperl                | 1.0             |                   | transform between hstore and plperl  
 jsonb_plpythonu              | 1.0             |                   | transform between jsonb and plpythonu  
 dict_int                     | 1.0             |                   | text search dictionary template for integers  
 jsonb_plperlu                | 1.0             |                   | transform between jsonb and plperlu  
 uuid-ossp                    | 1.1             |                   | generate universally unique identifiers (UUIDs)  
 autoinc                      | 1.0             |                   | functions for autoincrementing fields  
 postgis_topology             | 3.3.2           |                   | PostGIS topology spatial types and functions  
 dict_xsyn                    | 1.0             |                   | text search dictionary template for extended synonym processing  
 pgstattuple                  | 1.5             |                   | show tuple-level statistics  
 tsm_system_rows              | 1.0             |                   | TABLESAMPLE method which accepts number of rows as a limit  
 file_fdw                     | 1.0             |                   | foreign-data wrapper for flat file access  
 jsonb_plperl                 | 1.0             |                   | transform between jsonb and plperl  
 vector                       | 0.5.1           |                   | vector data type and ivfflat and hnsw access methods  
 dblink                       | 1.2             |                   | connect to other PostgreSQL databases from within a database  
 seg                          | 1.3             |                   | data type for representing line segments or floating-point intervals  
 pgcrypto                     | 1.3             |                   | cryptographic functions  
 plpython3u                   | 1.0             |                   | PL/Python3U untrusted procedural language  
 jsonb_plpython2u             | 1.0             |                   | transform between jsonb and plpython2u  
 plpgsql                      | 1.0             | 1.0               | PL/pgSQL procedural language  
 hstore_plpythonu             | 1.0             |                   | transform between hstore and plpythonu  
 ltree_plpythonu              | 1.0             |                   | transform between ltree and plpythonu  
 unaccent                     | 1.1             |                   | text search dictionary that removes accents  
 cube                         | 1.4             |                   | data type for multidimensional cubes  
 polar_px                     | 1.0             |                   | Parallel Execution extension  
 tsm_system_time              | 1.0             |                   | TABLESAMPLE method which accepts time in milliseconds as a limit  
 intarray                     | 1.2             |                   | functions, operators, and index support for 1-D arrays of integers  
 postgis_raster               | 3.3.2           |                   | PostGIS raster types and functions  
 hstore_plpython2u            | 1.0             |                   | transform between hstore and plpython2u  
 pg_buffercache               | 1.3             |                   | examine the shared buffer cache  
 pg_stat_statements           | 1.6             |                   | track execution statistics of all SQL statements executed  
 xml2                         | 1.1             |                   | XPath querying and XSLT  
(81 rows)  
```  
### 2、AI外脑插件: vector
开源项目地址: https://github.com/pgvector/pgvector   
vector插件顾名思义是一种支持向量数据类型的插件, 每一个向量由一组浮点数组成, 代表一个特征值, 通常用来进行基于特征相似性的检索, 例如相似图像, 相似文本, 相似音频, 相似视频等. 和大模型结合起来, 可以用于存储知识库/标准答案/优质答案的向量, 作为大模型的外脑, 在对话过程中, 从向量中提取与问题相关的文本, 发给大模型可以让大模型具备更好的解题能力. 例如  
- 在私有知识库领域, 由于大模型未训练过私有知识素材, 所以大模型无法处理私有领域的问题, 有了向量数据库, 可以在问答过程中给大模型投喂相关知识, 让大模型可以具备回复未知领域知识的能力.   
- 也可用来解决大模型幻觉问题, 通过提取问题的相似文本, 让大模型在限定的相似文本内容范围内进行回复, 从而解决大模型幻觉问题. 例如将史书的文本切分后录入向量数据库, 在回答问题时, 从向量数据库提取与问题相近的史书文本, 限定大模型在这些文本范围内回答问题, 从而得到与史书匹配的答案.    
vector除了提供向量类型, 还支持了配套的索引, 操作符等来加速向量相似的排序操作.   
用法举例.   
创建插件  
```  
postgres=# create extension vector ;   
CREATE EXTENSION  
```  
创建向量表  
```  
-- 在实际使用过程中, 从非结构化数据转换为向量, 可以通过云厂商API, 或者使用开源工具  
create table tbl_vec (  
  id int primary key,  
  info text,  
  vec vector(512)  
);  
```  
生成512维度模拟向量10万条  
```  
-- 生成随机向量的函数  
create or replace function gen_rand_vec(int) returns vector as $$  
  select array_to_vector(array_agg((random()*100)::real), $1, true) from generate_series(1,$1);  
$$ language sql strict;   
insert into tbl_vec select generate_series(1,100000), md5(random()::text), gen_rand_vec(512);  
```  
算子  
```  
postgres=# \do+  
                                                List of operators  
 Schema | Name | Left arg type | Right arg type |   Result type    |           Function            | Description   
--------+------+---------------+----------------+------------------+-------------------------------+-------------  
 public | *    | vector        | vector         | vector           | vector_mul                    |   
 public | +    | vector        | vector         | vector           | vector_add                    |   
 public | -    | vector        | vector         | vector           | vector_sub                    |   
 public |   | vector        | vector         | double precision | vector_negative_inner_product |   
 public |   | vector        | vector         | double precision | l2_distance                   |   
 public |   | vector        | vector         | double precision | cosine_distance               |   
 public | <>   | vector        | vector         | boolean          | vector_ne                     |   
 public | =    | vector        | vector         | boolean          | vector_eq                     |   
 public | >    | vector        | vector         | boolean          | vector_gt                     |   
 public | >=   | vector        | vector         | boolean          | vector_ge                     |   
(12 rows)  
```  
搜索某个向量的cosine_distance相似向量  
```  
postgres=# select ''''||gen_rand_vec(512)||'''' as v1 \gset  
postgres=# \echo :v1  
'[42.3123,49.094,36.027,97.4979,51.5076,51.8525,89.3701,98.1134,41.6966,88.2519,98.8663,38.4313,68.9565,82.9641,76.3079,32.8708,93.7287,13.7805,59.3289,89.8906,54.0369,39.8219,16.9884,94.0551,9.97198,95.7318,10.5824,25.3164,90.8695,49.5991,55.4999,33.1818,98.6931,91.5269,30.6798,50.2007,43.3794,20.0499,48.3141,85.0761,8.30179,47.1804,23.5074,77.2583,30.1445,99.8153,10.1291,23.8732,13.5958,69.458,13.7638,67.6327,9.27985,30.7522,61.6878,19.2518,26.4839,72.2703,44.5683,17.3534,21.8694,0.0681802,50.5353,20.5625,91.5951,81.215,70.7632,34.9745,1.26487,19.0773,20.0506,9.56666,66.2576,43.558,86.8249,96.4021,43.3733,96.954,20.2753,56.9691,66.412,34.0391,24.6018,75.6919,64.7913,86.2896,94.9437,91.2752,58.5599,39.512,8.62865,80.4293,39.5801,59.1639,0.991781,31.1752,40.3789,71.755,66.1498,41.6438,90.8322,86.2004,51.2104,57.0899,29.7584,38.0354,53.492,73.1317,34.9894,73.7673,30.1009,1.40146,7.80648,54.7027,77.0933,72.5978,40.9923,72.037,63.873,99.5522,11.549,72.5016,79.9815,51.1291,31.6656,80.9733,82.3044,72.0445,52.7283,48.4542,13.6883,43.5605,34.6546,64.8987,0.650352,64.413,2.9341,54.1424,37.5447,37.9235,27.9097,67.6456,39.325,35.7162,22.3482,16.4183,8.31396,63.3406,88.4553,72.187,62.8928,0.00434043,44.6886,42.8743,51.1335,76.3542,23.8476,33.4378,48.3986,76.5758,81.892,62.0869,20.1363,16.5466,26.9856,20.7867,80.9596,29.9197,74.929,18.5043,67.8432,2.83872,86.1499,7.16822,38.5549,8.49812,23.5865,46.8689,71.8387,12.0419,19.0558,34.7314,12.0462,63.7444,77.6057,63.1797,40.0986,1.45328,96.6175,88.4972,78.0291,78.5096,50.5841,98.1654,95.0561,77.5697,18.9521,76.0157,7.48943,93.8811,94.52,75.3327,96.7198,80.6698,82.5009,35.2747,89.168,6.08741,82.1436,61.0066,18.1293,1.19938,95.7381,30.1755,64.9438,73.3438,93.3552,5.04243,74.7971,89.9728,93.5397,52.8262,68.4823,44.1238,50.9916,63.5384,21.6935,69.9436,39.5541,29.183,63.8247,34.0741,4.51563,60.5445,14.7439,87.0165,95.8192,3.91189,93.1039,77.9628,64.9185,11.2332,79.1622,60.6566,41.4087,44.106,34.0004,34.7639,49.1484,8.79743,24.7367,42.6881,61.6236,93.219,86.8119,12.6152,56.7574,8.50542,82.5588,96.3116,37.6884,46.3836,30.3857,42.204,6.92808,45.1296,29.2205,2.74729,49.0415,22.3244,80.7101,13.96,33.5576,59.8722,74.6166,74.9664,3.97819,8.61693,9.73029,53.1266,17.4144,34.467,95.8147,79.038,27.686,82.6265,91.6531,84.4434,91.132,74.212,80.7549,28.8203,20.5955,11.1406,71.0244,27.5236,56.2702,0.244898,30.2709,5.31167,22.5693,10.981,19.2717,56.127,70.8532,93.8882,31.0934,74.8314,2.50517,40.8236,27.958,19.9195,75.2906,23.7726,98.9575,2.97656,6.39915,90.6106,87.4199,97.5311,64.8226,68.1749,26.3514,85.4181,79.3155,97.3758,12.9417,35.5857,97.6207,43.2126,40.8973,20.19,54.1935,60.169,76.317,25.0467,54.0572,7.41039,99.8781,56.5624,48.234,27.8361,76.4819,23.5246,51.6087,75.4394,26.5012,58.0078,66.05,13.9211,55.5389,30.8726,82.096,81.8904,16.2907,61.4114,79.2662,29.2324,96.9971,76.8869,72.445,37.8944,97.0769,26.6385,98.0634,73.3939,51.6852,52.1206,80.8043,51.5633,8.68304,29.0384,79.3994,85.165,52.563,31.0081,60.6044,79.0642,89.0159,26.6544,92.9853,44.5548,57.527,75.0813,26.4451,73.8177,36.4927,5.7113,3.05006,33.4898,82.5982,75.495,71.3843,79.6751,2.13354,69.4477,53.069,53.8188,21.5683,33.8733,5.38213,30.2514,62.9117,84.7815,15.4163,15.4747,15.7896,76.0207,94.5388,4.80547,2.67508,87.5241,49.3603,60.2021,62.6054,75.8054,34.0197,99.0982,81.5167,37.0698,32.588,64.1149,12.5648,3.97224,43.79,14.6984,73.4199,96.859,68.5172,94.9882,30.7323,73.8993,25.2396,93.644,58.6808,40.6559,9.11869,74.4704,16.6766,3.65755,79.2759,19.3517,91.1817,28.6361,79.5537,53.7871,4.44154,13.5735,52.8853,85.9583,50.6433,85.4733,50.0731,63.2081,89.4455,93.8631,77.9065,62.8654,90.7221,46.4236,57.8536,21.4544,20.3229,83.0932,15.0984,79.0037,23.7491,24.2171,53.4741,40.4257,27.8746,32.7499,59.7774,19.0563,61.3861,39.3311,72.8434,65.8276,52.9046,25.7287,51.7859,3.54789,11.202,1.85898,66.756,0.647476,95.7221,44.6624,63.5129,86.4441,91.086,21.3665,7.89851,11.4089,4.45974,22.9969,90.4126,28.2089,47.214,43.8867,68.6346,75.0886,76.6366,28.412,94.1449,38.0227,67.7431,66.9884,3.85029,20.6477,92.7171,55.6361]'  
postgres=# \timing on  
Timing is on.   
postgres=# select id,info, vec  :v1 from tbl_vec order by vec  :v1 limit 10;  
  id   |               info               |     ?column?        
-------+----------------------------------+-------------------  
 33990 | 73357616b73392961610fd4056df7872 | 0.200381241291853  
 65206 | f7126017dee115ba292f5fc1e6fe094c | 0.202510531635712  
 28629 | 47a751432609ac468a021c9af3666c8b | 0.202872040131985  
 78789 | 8ca283c6f2719e0ecfb5ed7f33285bfd |  0.20292308001207  
 25061 | d6d02501fef41890b6e999bd8ef45d4e | 0.203712549333763  
 65012 | 21dee0e74a8f547d4a8c4e9e9cea42b2 |  0.20454229165218  
 82237 | ad49dd1204e19e04da0428fb28ce5c64 | 0.204661291873772  
 27672 | 8aa2bea9608899ab8e13866dd2387f47 |  0.20499257967393  
 26030 | 1c94ae0fe923bd775278aff7dd7650d0 | 0.205011457373235  
  5666 | 237ae0154cf6ca0e87a90fe85c20765b | 0.205843957675826  
(10 rows)  
Time: 140.098 ms  
```  
创建向量索引  
```  
postgres=# set maintenance_work_mem ='512MB';  
postgres=# CREATE INDEX ON tbl_vec USING hnsw (vec vector_cosine_ops);  
CREATE INDEX  
Time: 126018.043 ms (02:06.018)  
```  
使用索引加速搜索某个向量的cosine_distance相似向量  
```  
postgres=# select id,info, vec  :v1 from tbl_vec order by vec  :v1 limit 10;  
  id   |               info               |     ?column?        
-------+----------------------------------+-------------------  
 28629 | 47a751432609ac468a021c9af3666c8b | 0.202872040131985  
  3843 | 16e453bdc6e7cce238b649d0d162c7c7 | 0.206543485852313  
 57218 | 0fa2b675124b3f1c3bd1fc26203c5eaf |  0.20931599952677  
 58681 | 562db2b3b7851727fa2b8f1ba15788fc | 0.211436702245081  
 84409 | d5432e2c5c010e49fbf8927f8d881365 | 0.211825938887412  
 67532 | 90a3511dc90684f22ef9756af142dc7a | 0.211948480104953  
 27195 | 6b6d2b3157eae64168b8d419da0fb32b | 0.212202785190134  
 49533 | 4b31ad2839436ce5bdc86358ec3bf2f2 | 0.212349440226144  
 62096 | d2adff2b3322fd98419e3c7cef737b05 | 0.212489664916925  
 47447 | 0df1dcdea170add8cd3f987e79638ae6 | 0.213359929199801  
(10 rows)  
Time: 9.736 ms  
```  
### 3、营销场景目标人群圈选插件: smlar 
开源项目地址: https://github.com/jirutka/smlar   
smlar插件是GIN索引的一种功能扩展, 可以通过索引快速判断数组的相似性(根据数组元素的相交个数, 或者相交个数在整体集合的占比). 如果数组的每个元素代表一个特征标签, 在电商、短视频、社交等业务场景可以给商品、视频、用户贴标签, 根据标签(数组)的相似性, 圈选目标人群、圈选感兴趣的内容等.  
用法举例.  
创建插件  
```  
postgres=# create extension smlar ;  