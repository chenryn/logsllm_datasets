title:SILVER: Fine-Grained and Transparent Protection Domain Primitives
in Commodity OS Kernel
author:Xi Xiong and
Peng Liu
SILVER: Fine-grained and Transparent
Protection Domain Primitives in Commodity OS
Kernel
Xi Xiong and Peng Liu
Penn State University
Abstract. Untrusted kernel extensions remain one of the major threats
to the security of commodity OS kernels. Current containment approaches
still have limitations in terms of security, granularity and ﬂexibility, pri-
marily due to the absence of secure resource management and commu-
nication methods. This paper presents SILVER, a framework that oﬀers
transparent protection domain primitives to achieve ﬁne-grained access
control and secure communication between OS kernel and extensions.
SILVER keeps track of security properties (e.g., owner principal and in-
tegrity level) of data objects in kernel space with a novel security-aware
memory management scheme, which enables ﬁne-grained access control
in an eﬀective manner. Moreover, SILVER introduces secure primitives
for data communication between protection domains based on a uniﬁed
integrity model. SILVER’s protection domain primitives provide great
ﬂexibility by allowing developers to explicitly deﬁne security properties
of individual program data, as well as control privilege delegation, data
transfer and service exportation. We have implemented a prototype of
SILVER in Linux. The evaluation results reveal that SILVER is eﬀective
against various kinds of kernel threats with a reasonable performance
and resource overhead.
Keywords: Protection domain, OS kernel, Virtualization
1
Introduction
As commodity operating systems are becoming more and more secure in terms
of privilege separation and intrusion containment at the OS level, attackers have
an increasing interest of directly subverting the OS kernel to take over the entire
computer system. Among all avenues towards attacking the OS kernel, untrusted
kernel extensions (e.g., third-party device drivers) are the most favorable tar-
gets to be exploited, as they are of the same privilege as the OS kernel but much
more likely to contain vulnerabilities. From the security perspective, these un-
trusted extensions should be treated as untrusted principals in the kernel space.
In order to prevent untrusted extensions from subverting kernel integrity, many
research approaches [7, 12, 25, 31] are proposed to isolate them from the OS
kernel. These approaches enforce memory isolation and control ﬂow integrity
protection to improve kernel security and raise the bar for attackers. However,
2
in many situations, strong isolation along is still inadequate and inﬂexible to se-
cure interactions between OS kernel and untrusted principals, for the following
reasons:
First, in commodity OSes such as Linux, kernel APIs (i.e., kernel functions
legitimately exported to extensions) are not designed for the purpose of safe
communication. Thus, even if untrusted extensions are memory-isolated and
constrained to transfer control to OS kernel only through designated kernel func-
tions, attackers can still subvert the integrity of the OS kernel by manipulating
parameter inputs of these functions. For example, an untrusted extension could
forge references to data objects that it actually has no privilege to access. By
providing such references as input of certain kernel functions, attackers could
trick the OS kernel to modify its own data objects in undesired ways.
Second, either OS-based or VMM-based memory protection mechanism can
only enforce page-level granularity on commodity hardware, which provides av-
enues for attackers exploiting such limitation. For example, attackers can lever-
age buﬀer/integer overﬂow attacks to compromise data objects of OS kernel by
overﬂowing adjacent data objects from a vulnerable driver in the same mem-
ory slab. It is diﬃcult for a page-level access control mechanism to address this
problem for its inability to treat data objects on the same page diﬀerently.
Finally, current isolation techniques are limited to support sharing and trans-
fer of data ownership in a ﬂexible and ﬁne-grained manner. Considering situa-
tions that the OS kernel would like to share a single data object with an untrusted
device driver, or accept a data object prepared by a driver, in case of strong iso-
lation, it often requires the administrator to manually provide exceptions/mar-
shaling to move data across isolation boundaries. Although there are clean-slate
solutions such as multi-server IPCs in micro-kernels [18] and language-based
contracts [13] to address this problem, these approaches are diﬃcult to apply to
commodity systems, for the reason that they both require developers to change
the programming paradigm fundamentally.
To address these shortcomings, we have the following insight: beside isola-
tion, protection systems should provide a clear resource management of kernel
objects, as well as a general method for secure communication. In OS-level access
control mechanism such as Linux security modules (LSM), the kernel maintains
meta-information (e.g., process descriptors and inodes) for OS-level objects like
processes, ﬁles and sockets, and it also provides run-time checks for security-
sensitive operations. Such mechanism enables powerful reference monitors such
as SeLinux [3] and Flume [17] to be built atop. In contrast, there is little secu-
rity meta data maintained for kernel-level data objects, nor security checks for
communication between OS kernel and untrusted kernel principals.
This paper presents the design and implementation of SILVER, a framework
that oﬀers transparent protection domain primitives to achieve ﬁne-grained ac-
cess control and secure communication between OS kernel and extensions. To
the best of our knowledge, SILVER is the ﬁrst VMM-based kernel integrity pro-
tection system which addresses the above challenges. SILVER’s key designs are
two-fold: (1) SILVER manages all the dynamic kernel data objects based on
3
their security properties, and achieves ﬁne-grained access control with the sup-
port of memory protection and run-time checks; (2) Communication between
OS kernel and various untrusted kernel extensions is governed and secured by
a set of uniﬁed primitives based on existing information ﬂow integrity models
without changing programming paradigm signiﬁcantly. Protection domains in
SILVER are enforced by the underlying hypervisor so that they are transparent
to kernel space programs. Hence, from the perspective of kernel developers, the
kernel environment remains as a single shared address space, and developers can
still follow the conventional programming paradigm that uses function calls and
reference passing for communication. Kernel program developers could utilize
SILVER to ensure neither the integrity of their crucial data would be tampered
nor their code would be abused by untrusted or vulnerable kernel extensions,
thus prevent attacks such as privilege escalation and confused deputy.
SILVER employs several novel designs to enable our protection domain mech-
anism. First, in SILVER, protection domains are constructed by leveraging
hardware memory virtualization to achieve transparency and tamper-proof. The
hypervisor-based reference monitor ensures that security-sensitive cross-domain
activities such as protection domain switches will eventually be captured as
exceptions in virtualization. Second, we propose a new kernel slab memory al-
locator design, which takes advantages of SILVER’s virtualization features such
as page labeling and permission control, with a new organization and allocation
scheme based on object security properties. The new memory management sub-
system exports API to developers to allow them managing security properties of
its allocated objects, and enforce access control rules throughout their life time.
Finally, SILVER introduces two new communication primitives: transfer-based
communication and service-based communication for securing data exchange and
performing reference validation during cross-domain function calls.
We have implemented a prototype of SILVER for the Linux kernel. Our sys-
tem employs a two-layer design: a VMM layer for enforcing hardware isolation,
reference monitoring and providing architectural support for page-level secu-
rity labeling, as well as an OS-subsystem for achieving the high-level protection
mechanism and oﬀering APIs to kernel programs. We have adapted real-world
Linux device drivers to leverage SILVER’s protection domain primitives. The
evaluation results reveal that SILVER is eﬀective against various kinds of kernel
threats with a reasonable impact on performance.
2 Approach Overview
In this section we ﬁrst present several examples of kernel threats to illustrate
shortcomings stated in Section 1. We then describe our threat model, and give
an overview of our approach.
2.1 Motivating Examples
Kernel heap buﬀer overﬂow. Jon [2] illustrates a vulnerability in the Linux
Controller Area Network (CAN) kernel module which could be leveraged to trig-
4
ger controllable overﬂow in the SLUB memory allocator and eventually achieve
privilege escalation. The exploit takes advantage of how dynamic data are or-
ganized in slab caches by the SLUB allocator. In speciﬁc, the attack overﬂows
a can frame data object allocated by the CAN module and then overwrites a
function pointer in a shmid kernel object, which is owned by the core kernel
and placed next to the can frame object. Although there are many ways to mit-
igate this particular attack (e.g., adding value check and boundary check), the
fundamental cause of such kind of attack is that the OS kernel is not able to dis-
tinguish data objects with diﬀerent security properties. In this case, data object
shmid kernel is owned by OS kernel principal, and it is of high integrity because
it contains function pointers that OS kernel would call with full privilege. On
the other hand, data object can frame is created and owned by the vulnerable
Controller Area Network kernel module principal with a lower integrity level.
Unfortunately, Linux kernel does not manage the owner principal and integrity
level of dynamic data objects, which results in placing these two data objects on
the same kmalloc-96 SLUB cache with the vulnerability.
Kernel API attacks. As mentioned in Section 1, even with strong isolation
and control ﬂow integrity protection, untrusted extensions can still subvert the
integrity of OS kernel through manipulating kernel APIs. For example, let us
consider a compromised NIC device driver in Linux which has already been
contained by sandboxing techniques such as hardware protection or SFI. Due
to memory isolation, the untrusted driver cannot directly manipulate kernel
data objects (e.g., process descriptors) in kernel memory. However, the attacker
could forge a reference to a process descriptor and cast it as struct pci dev *
type, which he would use as a parameter to invoke a legitimate function (e.g.,
pci enable device). By carefully adjusting the oﬀset, the attacker could trick
the OS kernel to modify that particular process descriptor (e.g., change the
uid of the process to be zero to perform privilege escalation) and misuse its
own privilege. We consider such threat as a confused deputy problem caused
by insuﬃcient security checks in Linux kernel APIs. Thus, to ensure kernel API
security, upon receiving a reference from caller, a kernel function should dis-
tinguish the security principal that provides the reference, as well as determine
whether that principal has the permission to access the data object associated
with the reference.
2.2 Threat Model
In SILVER, kernel developers leverage protection domain primitives to protect
the integrity of OS kernel in case that untrusted extensions are compromised by
attackers. A compromised extension may attempt to subvert a protection do-
main in many diﬀerent ways, which may include: (1) directly modifying code/-
data via write instruction or DMA; (2) control ﬂow attacks that call/jump to
unauthorized code in kernel; (3) memory exploits such as stack smashing or
buﬀer overﬂows; (4) confused deputy attack via reference forgery; (5) tampering
architectural state such as crucial registers. We discuss how SILVER is designed
to defend against or mitigate these attacks throughout the rest of the paper.
5
In this paper, we primarily focus on the protection of integrity. Although we
are not seeking for a comprehensive secrecy protection against private informa-
tion leakage, SILVER could indeed prevent untrusted principals directly read
crucial data (e.g., crypto keys) from a protection domain.
SILVER employs a VMM for reference monitoring and protecting the in-
tegrity of its components in the OS subsystem. Hence we assume that the VMM
is trusted and cannot be compromised by the attacker.
2.3 Protection Domain in SILVER
In this section, we give an overview of key features of protection domain in
SILVER.
Data management based on security properties. SILVER maintains se-
curity metadata for dynamic data objects in the kernel to keep track of their
security properties such as owner principal and integrity level. Moreover, kernel
data objects are managed based on these security properties, and the organi-
zation scheme takes advantage of labeling and memory protection primitives
provided by SILVER’s hypervisor. Such organization guarantees that security-
sensitive events will be completely mediated by the reference monitor, which
would make security decisions based on security properties of principal and data
objects. In this way, SILVER achieves data object granularity in protection do-
main construction and security enforcement, and addresses challenges stated
in Section 1. In Section 4.3, we demonstrate in detail how could these designs
prevent various kernel integrity compromises stated in 2.1.
Security controlled by developers. SILVER allows kernel program devel-
opers to control security properties of its own code and data in a ﬂexible and
ﬁne-grained manner. Security decisions are controlled by developers in the fol-
lowing ways: (1) by leveraging extended allocation APIs, developers can specify
which data objects are security-sensitive while others can be globally shared
with untrusted principals by assigning integrity labels to its data objects; (2)
developers could control the delegation of data object ownership and access
permissions with other principals by relying on SILVER’s transfer-based com-
munication primitive; (3) developers could ensure data integrity when providing
service to or requesting service from other principals by using the service-based
communication primitive; (4) developers can control which services (functions)
to be exported to which principals by creating entry points both statically and at
run-time; (5) developers could use endorsement functions and reference checking
primitives to validate received data and reference; (6) developers (and system
administrators) could accommodate trust relationships with protection domain
hierarchy.
Note that although SILVER’s primitive could help both participating security
principals to achieve secure communication, the security of a protection domain
does not rely on other domain’s conﬁguration or security status. For example, as
long as the OS kernel programmer properly use SILVER’s primitives to enforce
isolation and secure communication, the integrity of OS kernel would not be
6
compromised by any untrusted extension which may either fail to use SILVER’s
primitives correctly or be totally compromised by attacker.
2.4 Abstract Model
In this section we present an abstract model, describing our approach in a few
formal notations. The basic access control rules of our model follow existing
integrity protection and information ﬂow models [6, 17] with a few adaptations.
In our model, a kernel protection domain is deﬁned as a three-tuple: S =, where: (1) p is the principal associated with the domain. For each
protection domain S in kernel, p is unique and immutable so that it can be used
as the identiﬁer of the protection domain. Thus, we denote a protection domain
with principal p as Sp. (2) D is the set of data object owned by the principal.
Every data object is associated with an integrity level, which can be either high,
low or global shared. We denote the subset of high integrity data objects as D+
and the subset of low integrity data objects as D− so that D = {D+, D−}. (3) G
is the set of entry point objects, which are essentially entrance addresses through