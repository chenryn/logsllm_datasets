I.e., a′
R is used and similarly for α′
i denotes ai(k, nT , n′
R).
Note that α8j+40 (resp. α′
8j+40 = f (α′
8j+40) is the internal
state of the cipher just after feeding in (j + 1)th
byte of nR (resp. n′
R) and b8j+40 = f (α8j+40)
(resp. b′
8j+40), so that Fj does not depend
on nR,i and n′
R,i for i > 8j + 7. Also observe that
8j+87, i.e., α8j+40 and
α′
8j+40 = a8j+40 . . . a8j+86a′
8j+40 only differ in the last position.
α′
The crucial
idea is that an attacker can decide
whether or not nR has property Fj, only knowing
{nR}. (In practice,
the attacker of course chooses
{nR}.)
Protocol 4.2. Given {nR}, an attacker can decide
as follows whether or not nR has property Fj. She
ﬁrst chooses {aR} arbitrary. She then starts, consec-
utively, several authentication sessions with the tag.
j+4} = pj+4 ⊕ b8j+40 ⊕ p′
Now {pj+4} ⊕ {p′
8j+40 = pj+4 ⊕ b8j+40 ⊕ pj+4 ⊕ b′
b′
8j+40. Hence {pj+4} = {p′
b′
b8j+40 = b′
if nR has property Fj.
8j+40, i.e., {pj+4} 6= {p′
j+4 ⊕
8j+40 = b8j+40 ⊕
j+4} if and only if
j+4} if and only
The theorem below shows that the probability that
nR has the property Fj is approximately 9.4%.
Lemma 4.3. Let Y0, . . . , Y4 be independent uniformly
distributed random variables over F2. Then
P [fb(Y0, Y1, Y2, Y3) 6= fb(Y0, Y1, Y2, Y3)] = 1
4
P [fc(Y0, Y1, Y2, Y3, Y4) 6= fc(Y0, Y1, Y2, Y3, Y4)] = 3
8 .
Proof. By inspection.
Theorem 4.4. Let Y0, Y1, . . . , Y18, Y19 be independent
uniformly distributed random variables over F2. Then
P [f (Y0, . . . , Y18, Y19) 6= f (Y0, . . . , Y18, Y19)] = 3
32 .
:= fa(Y0, . . . , Y3), Z1
:= fb(Y8, . . . , Y11), Z3
Proof. Write Z0
:=
fb(Y4, . . . , Y7), Z2
:=
fa(Y12, . . . , Y15), and Z4 := fb(Y16, . . . , Y19). Fur-
thermore, write Z ′
4 := fb(Y16, . . . , Y18, Y19). Note
that Z0, . . . , Z4 are independent and, by Theorem 2.3,
8
uniformly distributed over F2. Then
P [f (Y0, Y1, . . . , Y18, Y19) 6= f (Y0, Y1, . . . , Y18, Y19)]
= P [fc(Z0, . . . , Z4) 6= fc(Z0, . . . , Z3, Z ′
= P [fc(Z0, . . . , Z4) 6= fc(Z0, . . . , Z ′
4)]
4)|Z4 6= Z ′
4]
· P [Z4 6= Z ′
4]
= P [fc(Z0, . . . , Z3, 0) 6= fc(Z0, . . . , Z3, 1)]
· P [fa(Y16, . . . , Y18, 0) 6= fa(Y16, . . . , Y18, 1)]
(by Lemma 4.3)
8 · 1
= 3
= 3
32 .
4
Alternatively, one can also obtain this result by simply
checking all 220 possibilities.
We now describe how an attacker can ﬁnd an {nR}
such that nR has all four properties Fj. Recall that
these properties also depend on nT and it is possible
that for a ﬁxed nT no nR has all four properties. In that
case, as is explained in the protocol below, the attacker
makes the tag generate a different nT and starts the
search again.
Protocol 4.5. An attacker can ﬁnd {nR} such that nR
has properties F0, F1, F2, F3 in a backtracking fashion.
She ﬁrst loops over all possibilities for the ﬁrst byte of
{nR} (taking the other bytes of {nR} arbitrary). Using
Protocol 4.2, the attacker decides if nR has property
F0 (which only depends on the ﬁrst byte). If it has,
she continues with the second byte of {nR}, looping
over all possibilities for the second byte of {nR} while
keeping the ﬁrst byte ﬁxed, trying to ﬁnd {nR} such
that nR also has property F1. She repeats this for the
third and fourth byte of {nR}. If at some stage no
possible byte has property Fj, the search backtracks to
the previous stage. It fails at the ﬁrst stage, the attacker
has to try a different tag nonce.
By simulating this protocol (for a random key and
random uid, and a random tag nonce in every outer
loop of the search), we can estimate the number of
authentication attempts needed to ﬁnd a reader nonce
having all four properties Fj.
Observation 4.6. The expected number of authentica-
tion attempts needed to ﬁnd an nR which has all four
properties Fj is approximately 28500.
Once the attacker has found an nR having all four
properties Fj, the number of possibilities for the inter-
nal state of the cipher after feeding in this particular
nR is seriously restricted. The following theorem states
how many possibilities there still are.
0x000041414110 0x000041414140 0x000141414110 0x000141414140 0x000441414110
0x000441414140 0x001441414110 0x001441414140 0x001541414110 0x001541414140
0x004141414110 0x004141414140 0x004441414110 0x004441414140 0x005141414110
0x005141414140 0x010041414110 0x010041414140 0x010141414110 0x010141414140
0x010441414110 0x010441414140 0x011441414110 0x011441414140 0x011541414110
0x011541414140 0x014141414110 0x014141414140 0x014441414110 0x014441414140
0x015141414110 0x015141414140 0x040010414110 0x040010414140 0x040011414110
0x040011414140 0x040040414110 0x040040414140 0x040041414110 0x040041414140
0x040110414110 0x040110414140 0x040111414110 0x040111414140 0x040140414110
0x040140414140 0x040141414110 0x040141414140 0x040441414110 0x040441414140
0x041410414110 0x041410414140 0x041411414110 0x041411414140 0x041440414110
0x041440414140 0x041441414110 0x041441414140 0x041510414110 0x041510414140
0x041511414110 0x041511414140 0x041540414110 0x041540414140 0x041541414110
0x041541414140 0x044141414110 0x044141414140 0x044410414110 0x044410414140
0x044411414110 0x044411414140 0x044440414110 0x044440414140 0x044441414110
0x044441414140 0x045141414110 0x045141414140 0x140041414110 0x140041414140
0x140141414110 0x140141414140 0x140441414110 0x140441414140 0x141441414110
0x141441414140 0x141541414110 0x141541414140 0x144141414110 0x144141414140
0x144441414110 0x144441414140 0x145141414110 0x145141414140 0x150041414110
0x150041414140 0x150141414110 0x150141414140 0x150441414110 0x150441414140
0x151441414110 0x151441414140 0x151541414110 0x151541414140 0x154141414110
0x154141414140 0x154441414110 0x154441414140 0x155141414110 0x155141414140
0x410010414110 0x410010414140 0x410011414110 0x410011414140 0x410040414110
0x410040414140 0x410041414110 0x410041414140 0x410110414110 0x410110414140
0x410111414110 0x410111414140 0x410140414110 0x410140414140 0x410141414110
0x410141414140 0x410441414110 0x410441414140 0x411410414110 0x411410414140
0x411411414110 0x411411414140 0x411440414110 0x411440414140 0x411441414110
0x411441414140 0x411510414110 0x411510414140 0x411511414110 0x411511414140
0x411540414110 0x411540414140 0x411541414110 0x411541414140 0x414141414110
0x414141414140 0x414410414110 0x414410414140 0x414411414110 0x414411414140
0x414440414110 0x414440414140 0x414441414110 0x414441414140 0x415141414110
0x415141414140 0x440041414110 0x440041414140 0x440141414110 0x440141414140
0x440441414110 0x440441414140 0x441441414110 0x441441414140 0x441541414110
0x441541414140 0x444141414110 0x444141414140 0x444441414110 0x444441414140
0x445141414110 0x445141414140 0x510010414110 0x510010414140 0x510011414110
0x510011414140 0x510040414110 0x510040414140 0x510041414110 0x510041414140
0x510110414110 0x510110414140 0x510111414110 0x510111414140 0x510140414110
0x510140414140 0x510141414110 0x510141414140 0x510441414110 0x510441414140
0x511410414110 0x511410414140 0x511411414110 0x511411414140 0x511440414110
0x511440414140 0x511441414110 0x511441414140 0x511510414110 0x511510414140
0x511511414110 0x511511414140 0x511540414110 0x511540414140 0x511541414110
0x511541414140 0x514141414110 0x514141414140 0x514410414110 0x514410414140
0x514411414110 0x514411414140 0x514440414110 0x514440414140 0x514441414110
0x514441414140 0x515141414110 0x515141414140
Table 4.1. Odd bits of α64 ending in 0 when nR
has all properties Fj
for the odd-numbered bits of α64. Table 4.1 lists (in
hexadecimal, with zeros on the places of the even-
numbered bits) the 218 of those possibilities that have
the last bit a111 equal to 0; the other 218 are the same
except that they have a111 equal to 1.
Proof. By explicit computation. For each of
224
if
f (y0, y1, . . . , y19)
there exist y−8, y−7, . . . , y−1 ∈ F2
f (y−4, y−3, . . . , y15)
f (y−8, y−7, . . . , y11) 6= f (y−8, f−7, . . . , y11).
the
checks
2 , one
f (y4, y5, . . . , y23),
and
such that
6= f (y−4, f−3, . . . , y15) and
elements y0y1 . . . y23
f (y4, y5, . . . , y23)
6=
f (y0, y1, . . . , y19),
of F24
6=
Consequently, when the attacker has found a reader
nonce nR that has properties F0, F1, F2, and F3, there
are only 436·224 ≈ 232.8 ≈ 7.3·109 possibilities for the
internal state α64 of the cipher just after shifting in the
reader nonce. Using Theorem 2.8, these can be used
to compute 7.3 · 109 candidate keys. The attacker can
then check these candidate keys by trying to decrypt
the received 4-bit error messages.
4.3. Varying the tag nonce
Theorem 4.7. Suppose that nR has properties F0,
F1, F2, and F3. Then there are only 436 possibilities
In the previous approach,
the attacker kept nT
constant and tried to ﬁnd a special {nR} such that
9
0x0000004d4d1f 0x0000012d7b8b 0x000001513ca3 0x0000049e0e78 0x000004cafec1
0x000006f945be 0x000007089ea5 0x0000072b67df 0x000008e79d8e 0x00000a137cd9
0x00000aed7467 0x00000b92342b 0x00000c6db6a0 0x00000cbd2daa 0x00000cda7817
0x00000d0cbd27 0x00000e98af03 0x00001089393d 0x0000129d78db 0x000012f4cde6
0x000015382c19 0x000016a7a95c 0x0000172bebc6 0x0000173f2299 0x00001821aa0a
0x000018769666 0x00001a6d513e 0x00001b1c2ff7 0x00001c259261 0x00001c46edf7
0x00001c5a3fde 0x00001c97ee44 0x00001f19da5e 0x00001fef9ec2 0x000022ce6797
0x000023a396ce 0x000023a92baa 0x000026bc6e18 0x0000278a7954 ...
Table 4.2. Excerpt from table T0xa04 of internal
cipher states α32 at index 0xa04
she gained knowledge about the internal cipher state.
Now the attacker does the opposite: she keeps {nR}
(and {aR} and the {pi} as well) constant, but varies
nT instead. As before, the attacker waits for the tag
to respond; when this happens, she gains knowledge
about the internal state of the cipher.
Protocol 4.8. The attacker repeatedly tries to authen-
ticate to the tag, every time with a different tag nonce
nT and sending all zeros as its response (including
the encrypted parity bits), i.e., {nR} = 0, {aR} = 0,
{p4} = · · · = {p11} = 0. She waits for an nT such
that the tag actually responds (i.e., the parity bits are
the correct parity bits) and where the encrypted error
code is 0x5 (i.e., b96 = b97 = b98 = b99 = 0).
Note that twelve bits have to be ‘correct’ (the eight
parity bits and the four keystream bits), so this will
take on average 212 = 4096 authentication attempts.
The following deﬁnes a large table that needs to be
precomputed.
Deﬁnition 4.9.
T := {α32 ∈ F48
2 | {nR} = {aR} = 0 ⇒
{p4} = · · · = {p11} = b96 = · · · = b99 = 0}.
So the attacker knows that after the tag sends the
challenge nT found in Protocol 4.8, the current state of
the cipher, α32, appears in T . Now T can be precom-
puted; one would expect it to contain 248/212 = 236
elements; in fact, it contains 0.82% fewer elements
due to a small bias in the cipher. In principle, the
attacker could now use Theorem 2.8 to roll back each
of the LFSRs in the table to ﬁnd candidate keys and
check each of these keys against a few other attempted
authentication sessions.
In practice, searching through T takes about one
day, which is undesirable. The attacker can shrink the
search space by splitting T as follows.
Protocol 4.10. After ﬁnding nT in Protocol 4.8, the
attacker again repeatedly tries to authenticate to the
tag, every time with the tag nonce nT she just found.
Instead of zeros, she now sends ones for the response
and this time she tries all possibilities for the encrypted
parity bits until the tag responds with an encrypted
error code. I.e., {nR} = 0xffffffff and {aR} =
0xffffffff and successively tries all possibilities
for {p4}, . . . , {p11} until one is correct.
This time, because eight bits have to be ‘correct’,
on average 128 authentication attempts are needed.
The table T can be split in 212 = 4096 parts indexed
by the eight encrypted parity bits and four keystream
bits that encrypt the error code.
Deﬁnition 4.11. For every γ = γ0 . . . γ11 ∈ F12
deﬁne
2 we
Tγ := {α32 ∈ T | {nR} = {aR} = 0xffffffff ⇒
{p4} = γ0 ∧ · · · ∧ {p11} = γ7 ∧
b96 = γ8 ∧ · · · ∧ b99 = γ11}.
So instead of storing T as one big table, during
precomputation the attacker creates the 4096 tables
Tγ. Taking γ := {p4} . . . {p11}b96 . . . b99 at the end of
Protocol 4.10, the attacker knows that α32 must be an
element of Tγ. Now Tγ contains only approximately
224 entries, so this can easily be read from disk to
generate 224 candidate keys and check them against
a few other authentication sessions. Table 4.2 shows,
as an example, the ﬁrst part of Tγ for γ = 0xa04 =
1010 0000 0100.
4.4. Nested authentication attack
We now assume that the attacker already knows at
least one sector key; let us call this sector the exploit
sector.
The time between two consecutive authentication
attempts might vary from card to card, although it is