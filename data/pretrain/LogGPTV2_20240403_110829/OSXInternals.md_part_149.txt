Consider a file, say, /mach_kernel:
$ ls -li /mach_kernel
2150438 -rw-r--r-- 1 root wheel 4308960 Jul 2 22:28 /mach_kernel
$ ls -li /.vol/234881029/2150438
2150438 -rw-r--r-- 1 root wheel 4308960 Jul 2 22:28 /.vol/234881029/2150438
Similarly, all files and directories within the root file system are accessible using their file IDs through
volfs. However, note that volfs vnodes exist only for the root of each volumethat is, the volfs hierarchy has
only two levels. Reading directory entries within a /.vol subdirectory will return only the . and .. entries.
In other words, you cannot enumerate the contents of a file system through volfsyou must know the ID of
the target file system object to access it through volfs.
$ ls -lid /usr
11061 drwxr-xr-x 11 root wheel 374 May 11 19:18 /usr
$ ls -las /.vol/234881029/usr
ls: /.vol/234881029/usr: No such file or directory
$ ls -las /.vol/234881029/11061
total 0
0 drwxr-xr-x 11 root wheel 374 May 11 19:18 .
0 drwxrwxr-t 39 root admin 1428 Oct 23 18:33 ..
0 drwxr-xr-x 8 root wheel 272 Mar 27 2005 X11R6
0 drwxr-xr-x 736 root wheel 25024 Oct 24 15:00 bin
...
The File System
/proc
Mac OS X does not provide the /proc file system. It does provide alternative interfaces such
as sysctl(3) and the obsoleted kvm(3). The sysctl(3) interface provides read and write
access to a management information base (MIB) whose contents are various categories of
kernel information, such as information related to file systems, virtual memory, networking,
and debugging. As we saw in Chapter 8, the kvm(3) interface provides access to raw kernel
memory.
11.8. Spotlight
As the capacities of commonly available storage devices continue to grow, we find it possible to store
staggering amounts of information on personal computer systems. Besides, new information is continually
being generated. Unfortunately, such information is merely "bytes" unless there are powerful and efficient
ways to present it to humans. In particular, one must be able to search such information. By the arrival of
the twenty-first century, searching had established itself as one of the most pervasive computing
technologies in the context of the Internet. In comparison, typical search mechanisms in operating systems
remained primitive.
Although a single computer system is nowhere near the Internet in terms of the amount of information it
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 47 of 90
contains, it is still a daunting task for users to search for information "manually." There are several reasons
why it is difficult.
Traditional file system organization, although hierarchical in nature, still requires the user to classify
and organize information. Furthermore, as existing information is updated and new information is
added, the user must incorporate such changes in the file organization. If multiple views into the data
are required, they must be painfully constructedsay, through symbolic links or by replicating data.
Even then, such views will be static.
There are simply too many files. As more computer users adopt mostly digital lifestyles, wherein
music, pictures, and movies reside on their systems along with traditional data, the average number
of files on a representative personal computer will continue to grow.
Historically, users have worked with very little file system metadata: primarily, filenames, sizes, and
modification times. Even though typical file systems store additional metadata, it is mostly for
storage bookkeepingsuch data is neither intuitive nor very useful for everyday searching. Data
particularly useful for flexible searching is often the user data within files (such as the text within a
text document) or is best provided as additional file-specific metadata (such as an image's
dimensions and color model). Traditional file systems also do not allow users to add their own
metadata to files.
In situations where several applications access or manipulate the same information, it would be
beneficial for both application developers and users to have such applications share information.
Although means for sharing data abound in computing, traditional APIs are rather limited in their
support for sharing typed information, even on a given platform.
Memex
When Vannevar Bush was the Director of the Office of Scientific Research and Development
in the United States, he published an article that described, among several visionary insights
and observations, a hypothetical device Bush had conceived many years earlierthe memex.[12]
The memex was a mechanized private file and librarya supplement to human memory. It
would store a vast amount of information and allow for rapid searching of its contents. Bush
envisioned that a user could store books, letters, records, and any other arbitrary information
on the memex, whose storage capacity would be large enough. The information could be
textual or graphic.
[12] "As We May Think," by Vannevar Bush (Atlantic Monthly 176:1, July 1945, pp. 101108).
Mac OS X 10.4 introduced Spotlighta system for extracting (or harvesting), storing, indexing, and querying
metadata. It provides an integrated system-wide service for searching and indexing.
11.8.1. Spotlight's Architecture
Spotlight is a collection of both kernel- and user-level mechanisms. It can be divided into the following
primary constituents:
The fsevents change notification mechanism
A per-volume metadata store
A per-volume content index
The Spotlight server (mds)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 48 of 90
 The mdimport and mdsync helper programs (which have symbolic links to them, mdimportserver
and mdsyncserver, respectively)
A suite of metadata importer plug-ins
Programming interfaces, with the Metadata framework (a subframework of the Core Services
umbrella framework) providing low-level access to Spotlight's functionality
End-user interfaces, including both command-line and graphical interfaces
Figure 1121 shows how various parts of Spotlight interact with each other.
Figure 1121. Architecture of the Spotlight system
[View full size image]
The fsevents mechanism is an in-kernel notification system with a subscription interface for informing
user-space subscribers of file system changes as they occur. Spotlight relies on this mechanism to keep its
information currentit updates a volume's metadata store and content index if file system objects are added,
deleted, or modified. We will discuss fsevents in Section 11.8.2.
On a volume with Spotlight indexing enabled, the /.Spotlight-V100 directory contains the volume's
content index (ContentIndex.db), metadata store (store.db), and other related files. The content index is
built atop Apple's Search Kit technology, which provides a framework for searching and indexing text in
multiple languages. The metadata store uses a specially designed database in which each file, along with its
metadata attributes, is represented as an MDItem object, which is a Core Foundationcompliant object that
encapsulates the metadata. The MDItemCreate() function from the Metadata framework can be used to
instantiate an MDItem object corresponding to a given pathname. Thereafter, one or more attributes can be
retrieved or set[13] in the MDItem by calling other Metadata framework functions. Figure 1122 shows a
program that retrieves or sets an individual attribute of the MDItem associated with a given pathname.
[13] In Mac OS X 10.4, the functions for setting MDItem attributes are not part of the public
API.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 49 of 90
Figure 1122. Retrieving and setting an MDItem attribute
// mditem.c
#include 
#include 
#define PROGNAME "mditem"
#define RELEASE_IF_NOT_NULL(ref) { if (ref) { CFRelease(ref); } }
#define EXIT_ON_NULL(ref) { if (!ref) { goto out; } }
void MDItemSetAttribute(MDItemRef item, CFStringRef name, CFTypeRef value);
usage(void)
{
fprintf(stderr, "Set or get metadata. Usage:\n\n\
%s -g   # get\n\
%s -s =  # set\n",
PROGNAME, PROGNAME);
}
int
main(int argc, char **argv)
{
int ch, ret = -1;
MDItemRef item = NULL;
CFStringRef filePath = NULL, attrName = NULL;
CFTypeRef attrValue = NULL;
char *valuep;
CFStringEncoding encoding = CFStringGetSystemEncoding();
if (argc != 4) {
usage();
goto out;
}
filePath = CFStringCreateWithCString(kCFAllocatorDefault,
argv[argc - 1], encoding);
EXIT_ON_NULL(filePath);
argc--;
item = MDItemCreate(kCFAllocatorDefault, filePath);
EXIT_ON_NULL(item);
while ((ch = getopt(argc, argv, "g:s:")) != -1) {
switch (ch) {
case 'g':
attrName = CFStringCreateWithCString(kCFAllocatorDefault,
optarg, encoding);
EXIT_ON_NULL(attrName);
attrValue = MDItemCopyAttribute(item, attrName);
EXIT_ON_NULL(attrValue);
CFShow(attrValue);
break;
case 's':
if (!(valuep = strchr(argv[optind - 1], '='))) {
usage();
goto out;
}
*valuep++ = '\0';
attrName = CFStringCreateWithCString(kCFAllocatorDefault,
optarg, encoding);
EXIT_ON_NULL(attrName);
attrValue = CFStringCreateWithCString(kCFAllocatorDefault,
valuep, encoding);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 50 of 90
EXIT_ON_NULL(attrValue);
(void)MDItemSetAttribute(item, attrName, attrValue);
break;
default:
usage();
break;
}
}
out:
RELEASE_IF_NOT_NULL(attrName);
RELEASE_IF_NOT_NULL(attrValue);
RELEASE_IF_NOT_NULL(filePath);
RELEASE_IF_NOT_NULL(item);
exit(ret);
}
$ gcc -Wall -o mditem mditem.c -framework CoreServices
$ ./mditem -g kMDItemKind ~/Desktop
Folder
$ ./mditem -g kMDItemContentType ~/Desktop
public.folder
From a programming standpoint, an MDItem is a dictionary containing a unique abstract key, along with a
value, for each metadata attribute associated with the file system object. Mac OS X provides a large
number of predefined keys encompassing several types of metadata. As we will see in Section 11.8.3, we
can enumerate all keys known to Spotlight by using the mdimport command-line program.
The Spotlight serverthat is, the metadata server (mds)is the primary daemon in the Spotlight subsystem. Its
duties include receiving change notifications through the fsevents interface, managing the metadata store,
and serving Spotlight queries. Spotlight uses a set of specialized plug-in bundles called metadata importers
for extracting metadata from different types of documents, with each importer handling one or more
specific document types. The mdimport program acts as a harness for running these importers. It can also
be used to explicitly import metadata from a set of files. The Spotlight server also uses
mdimportspecifically, a symbolic link to it (mdimportserver)for this purpose. An importer returns
metadata for a file as a set of key-value pairs, which Spotlight adds to the volume's metadata store.
Custom metadata importers must be careful in defining what constitutes metadata. Although an importer
can technically store any type of information in the metadata store by simply providing it to Spotlight,
storing information that is unlikely to be useful in searching (for example, thumbnails or arbitrary binary
data) will be counterproductive. The Search Kit may be a better alternative for application-specific
indexing. Mac OS X applications such as Address Book, Help Viewer, System Preferences, and Xcode use
the Search Kit for efficient searching of application-specific information.
Spotlight versus BFS
Spotlight is sometimes compared to the metadata-indexing functionality offered by BFSthe
native file system in BeOS.[14] BFS was a 64-bit journaled file system that provided native
support for extended attributes. A file could have an arbitrary number of attributes that were
actually stored as files within a special, internal directory associated with the file. Moreover,
BFS maintained indexes for standard file system attributes (such as name and size). It also
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 51 of 90
provided interfaces that could be used to create indexes for other attributes. The indexes were
stored in a hidden directory that was otherwise a normal directory. The query syntax of the
BFS query engine was largely identical to Spotlight's. As with Spotlight, a query could be live
in that it could continue to report any changes to the query results.
As we will see in Chapter 12, HFS+ provides native support for extended attributes. In that
light, the combination of Spotlight and HFS+ might appear similar to BFS. However, there are
several important differences.
Perhaps the most important point to note is that as implemented in Mac OS X 10.4, Spotlight
does not use the support for native extended attributes in HFS+. All harvested
metadatawhether extracted from on-disk file structures or provided explicitly by the user
(corresponding to the Spotlight Comments area in the Finder's information pane for a file or
folder)is stored externally. In particular, Spotlight itself does not modify or add any metadata,
including extended attributes, to files.
In the case of BFS, the creation of indexes occurred in the file system itself. In contrast,
Spotlight builds and maintains indexes entirely in user space, although it depends on the
fsevents kernel-level mechanism for timely notification of file system changes.
Purely based on theoretical grounds, the BFS approach appears more optimal. However,
Spotlight has the benefit of being independent of the file systemfor example, it works on
HFS+, UFS, MS-DOS, and even AFP volumes. Since the metadata store and the content index
need not reside on the volume they are for, Spotlight can even be made to work on a read-only
volume.
[14] The comparison is especially interesting since the same engineer played key roles in the
design and implementation of both BFS and Spotlight.
11.8.2. The Fsevents Mechanism
The fsevents mechanism provides the basis for Spotlight's live updating. The kernel exports the mechanism
to user space through a pseudo-device (/dev/fsevents). A program interested in learning about file
system changesa watcher in fsevents parlancecan subscribe to the mechanism by accessing this device.
Specifically, a watcher opens /dev/fsevents and clones the resultant descriptor using a special ioctl
operation (FSEVENTS_CLONE).
The Spotlight server is the primary subscriber of the fsevents mechanism.
The ioctl call requires a pointer to an fsevent_clone_args structure as argument. The event_list field
of this structure points to an array containing up to FSE_MAX_EVENTS elements, each of which is an int8_t
value indicating the watcher's interest in the event with the corresponding index. If the value is
FSE_REPORT, it means the kernel should report that event type to the watcher. If the value is FSE_IGNORE,
the watcher is not interested in that event type. Table 112 lists the various event types. If the array has
fewer elements than the maximum number of event types, the watcher is implicitly disinterested in the
remaining types. The event_queue_depth field of the fsevent_clone_args structure specifies the size of
the per-watcher event queue (expressed as the number of events) that the kernel should allocate. This size
is limited by MAX_KFS_EVENTS (2048).
Table 112. Event Types Supported by the Fsevents Mechanism
Event
Index Event Type Description
FSE_CREATE_FILE
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh337D.htm 20.08.2007
Chapter 11. File Systems Page 52 of 90
0 A file was created.
1 FSE_DELETE A file or a folder was deleted.
2 FSE_STAT_CHANGED A change was made to the stat
structurefor example, an object's
permissions were changed.
3 FSE_RENAME A file or folder was renamed.
4 FSE_CONTENT_MODIFIED A file's content was modifiedspecifically,
a file that is being closed was written to
while it was open.
5 FSE_EXCHANGE The contents of two files were swapped
through the exchangedata() system call.
6 FSE_FINDER_INFO_CHANGED A file or folder's Finder information was
changedfor example, the Finder label
color was changed.
7 FSE_CREATE_DIR A folder was created.
8 FSE_CHOWN A file system object's ownership was
changed.
As we will shortly see, the elements of a per-watcher event queue are not the events themselves but
pointers to kfs_event structures, which are reference-counted structures that contain the actual event data.
In other words, all watchers share a single event buffer in the kernel.
int ret, fd, clonefd;
int8_t event_list[] = { /* FSE_REPORT or FSE_IGNORE for each event type */ }
struct fsevent_clone_args fca;
...
fd = open("/dev/fsevents", O_RDONLY);
...
fca.event_list = event_list;
fca.num_events = sizeof(event_list)/sizeof(int8_t);
fca.event_queue_depth = /* desired size of event queue in the kernel */
fca.fd = &clonefd;
ret = ioctl(fd, FSEVENTS_CLONE, (char *)&fca);
...
Once the FSEVENTS_CLONE ioctl returns successfully, the program can close the original descriptor and read
from the cloned descriptor. Note that if a watcher is interested in knowing about file system changes only
on one or more specific devices, it can specify its devices of interest by using the