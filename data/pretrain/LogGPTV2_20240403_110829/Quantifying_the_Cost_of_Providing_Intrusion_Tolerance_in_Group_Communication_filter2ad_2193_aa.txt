title:Quantifying the Cost of Providing Intrusion Tolerance in Group Communication
Systems
author:HariGovind V. Ramasamy and
Prashant Pandey and
James Lyons and
Michel Cukier and
William H. Sanders
Quantifying the Cost of Providing Intrusion Tolerance
in Group Communication Systems ∗
†
HariGovind V. Ramasamy
††
, James Lyons
†
, Michel Cukier
‡
, and William H. Sanders
†
, Prashant Pandey
†
University of Illinois
Urbana, IL 61801, USA
{ramasamy,jlyons,whs}
IBM Almaden Research Center
††
‡
University of Maryland
San Jose, CA 95120, USA
College Park, MD 20742, USA
PI:EMAIL
PI:EMAIL
@crhc.uiuc.edu
Abstract
Group communication systems that provide consistent
group membership and reliable, ordered multicast proper-
ties in the presence of faults resulting from malicious in-
trusions have not been analyzed extensively to quantify the
cost of tolerating these intrusions. This paper attempts to
quantify this cost by presenting results from an experimen-
tal evaluation of three new intrusion-tolerant microproto-
cols that have been added to an existing crash-fault-tolerant
group communication system. The results are analyzed to
identify the parts that contribute the most overhead during
provision of intrusion tolerance at the group communica-
tion system level.
1 Introduction
An intrusion-tolerant system is equipped with mecha-
nisms that allow it to continue to operate in the presence
of malicious intrusions even when signiﬁcant portions of it
have been compromised and may be in the control of an
intelligent adversary. One promising approach is to pro-
vide intrusion tolerance at the middleware level by provid-
ing intrusion-tolerant services (such as remote method invo-
cations) to distributed applications. Ongoing projects that
aim to do that include MAFTIA [9], ITDOS [8], and ITUA
[7], among others, and combine ideas from fault-tolerant
computing, cryptography, and computer security. Several
of the projects use replication to provide availability in the
presence of arbitrary faults resulting from intrusions.
Group communication systems are a well-known
paradigm for addressing a key concern in such systems:
maintaining the consistency of replicated information. Most
∗
0172.
This research has been supported by DARPA contract F30602-00-C-
group communication systems are only able to tolerate
crash failures. More recently, some group communica-
tion systems, like the Practical Byzantine Fault Tolerance
(PBFT) [10] algorithm, the Rampart security toolkit [2], and
the SecureRing Group Communication system [12], have
been designed to function properly despite malicious cor-
ruption of some processes.
The performance of such algorithms must be carefully
analyzed if their applicability to the building of intrusion-
tolerant systems is to be understood. While others have
provided some analysis of their algorithms (e.g., the PBFT
protocol has been shown to have low overhead in the fault-
free case [10]), there has not been a comprehensive study
that provides information regarding the overhead of provid-
ing intrusion tolerance in both fault-free and fault condi-
tions.
In this paper, we describe the results of an exten-
sive experimental analysis of the cost, in terms of reduced
performance, incurred because of providing intrusion toler-
ance during both normal operation and recovery from in-
trusions. To do the analysis, we devised intrusion-tolerant
versions of several key group communication protocols,
namely those that provide reliable multicast, total ordering
within a group, and group membership operations. We then
inserted implementations of the protocols into an existing
crash-tolerant group communication system (C-Ensemble,
developed by Mark Hayden [13]) and instrumented them
to provide detailed information about the cost incurred dur-
ing fault-free operation and when tolerating both single and
multiple correlated intrusions. The results provide new in-
sights into the cost of providing intrusion-tolerant group
communication, and suggest ways that this cost could be
reduced in the future.
The organization of this paper is as follows. Section
2 describes the three new microprotocols added to the C-
Ensemble framework. Section 3 presents the performance
results of those protocols. Finally, in Section 4, we summa-
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:28:00 UTC from IEEE Xplore.  Restrictions apply. 
rize the results and conclude by describing ways to decrease
the cost of tolerating malicious intrusions.
2 Intrusion-Tolerant Protocols
Key properties that intrusion-tolerant group communica-
tion systems must provide to process groups include ensur-
ing that all multicast messages are delivered to all correct
processes; enforcing a total order among multicast mes-
sages, to help build replication protocols that use the state
machine approach [15]; and maintaining consistent infor-
mation about group membership. This section describes
protocols that provide those properties despite the presence
of intrusions. Before focusing on the individual protocols,
we describe the system model they use.
2.1 System Model and Assumptions
We consider a timed asynchronous distributed system
[1]. The system is asynchronous in the sense that it does
not require the existence of upper bounds on message trans-
mission and scheduling delays. However, processes have
access to local hardware clocks (which need not be synchro-
nized). Time-outs are deﬁned for message transmission and
scheduling delays. When an experienced delay is greater
than the associated time-out delay, a performance failure is
said to have occurred. This timed asynchronous system as-
sumption circumvents the impossibility of consensus in an
asynchronous environment.
The protocols are concerned with one set of processes
that wish to be in a group. The group membership proto-
col installs a series of views, V0, V1, . . ., each of which is
a set of process identiﬁers of processes that are members
of the view. The processes in a single view V have integer
identiﬁers or ranks from 0 to |V | − 1. The processes are
denoted by p0, p1, . . ., p|V |−1. In general, the process pk
has a rank k. Each process is either correct or corrupt. A
correct process conforms to the protocol speciﬁcation. A
corrupt process can exhibit arbitrary behavior. The process
group can continue to provide correct service if there are at
most f = (cid:6)(|V | − 1)/3(cid:7) corrupt processes. When a view
is installed, the lowest-ranked process in the view, p0, is
the leader of the view. The leader has no additional priv-
ileges, but does have additional responsibilities1 compared
to the rest of the group. If the leader is detected to be cor-
rupt, the second-lowest ranked process (we call this process
the deputy) takes over as the new leader. If the deputy is
also corrupt, the third-lowest ranked process (the deputy’s
deputy) takes over as the new leader, and so on.
We use message digests and digital signatures based on a
public key cryptosystem. Each process possesses a private
1The responsibilities will be explained in the rest of this section.
key, public key pair and is able to obtain the public keys of
other processes to verify signed messages.
We assume that all processes are computationally bound.
That means that a corrupt process cannot ﬁnd two messages
with different contents and the same digest, and it cannot
produce a valid signature of a correct process, or compute
the message summarized by a digest, from the digest. We
also assume that private keys cannot be stolen from correct
processes.
2.2 Reliable Multicast Protocol
Our reliable multicast protocol (like other similar pro-
tocols) takes the approach of sending cryptographically
signed messages to guarantee that a multicast message is
delivered properly (without a change in its contents) to all
correct processes, even in the presence of corrupt senders.
It takes the common approach of using message buffering,
sequence numbers, and positive and negative ACKs to ad-
dress the issues that arise in an unreliable network, such as
messages getting lost, reordered, and delayed.
The reliable multicast protocol we evaluate provides the
properties described below, which are similar to those pro-
vided by SecureRing [12] and Rampart [3].
Integrity For any message m and process p, a correct pro-
cess q delivers m (purportedly from p) at most once,
and, if p is correct, only if p multicast m.
Agreement If process p is correct throughout a view and
delivers m in that view, then all processes that are cor-
rect throughout that view deliver m in the same view.
FIFO If p and q are correct, and q delivers two messages
m1 and m2, in that order, from p, then p must have
multicast m1 and m2 in that order.
The reliable multicast protocol consists of three phases.
Each of the phases can result in recipients of messages sus-
pecting the sender due to behavior that does not adhere to
the protocol. In the ﬁrst phase the sender (say pi) buffers
a copy of message m, and assigns to it the next available
sequence number2 s. The sender then creates a digitally
signed digest of a data segment {m, i, s} and sends the di-
gest to the group along with i and s. Each recipient ascer-
tains that it hasn’t received another digest or message with
sequence number s from pi. In the second phase, each re-
cipient process creates a signed reply to the message and
sends this reply back to the sender of the digest. The sender
in turn checks that the reply is indeed for the message it sent.
The sender waits until it receives 2f + 1 replies. In the ﬁnal
phase, the sender collects received replies and then sends
2The sequence numbers are local to each sender and are unrelated to
sequence numbers used by other protocols.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:28:00 UTC from IEEE Xplore.  Restrictions apply. 
out the actual message with the 2f + 1 signatures attached.
On receiving such an authenticated message, the recipient
checks the validity of the 2f + 1 attached signatures and
accepts the message. The accepted messages are stored in
buffers and delivered in the order of their sequence num-
bers (per sender). Each of these phases is protected from
network errors through the use of buffering, sequence num-
bers, and positive and negative acknowledgments.
A detailed description of the phases, along with informal
proofs that the protocol provides the properties described
above, is given in [6].
2.3 Total Ordering Protocol
The total-ordering protocol we evaluate [6] ensures that
sequence numbers assigned to messages by different pro-
cesses are globally unique by partitioning the set of all pos-
sible sequence numbers and assigning a partition to each
process. Each process pi is associated, at view installa-
tion time, with an initial sequence number seq origi and
a sequence-number-generating function gfi. The gfis and
seq origis for all of the member processes in a particular
view are known to all group members. Each function is
monotonically increasing, and fi(x) > x. Each process
pi generates a series of sequence numbers that starts with
seq origi; each subsequent sequence number is generated
through the application of gfi to the previously generated
sequence number. Messages are generated asynchronously
by the group members and each correct process sends mes-
sages with its generated sequence numbers, using one se-
quence number per message in increasing order. The sets
of sequence numbers (Si = {seq origi, gfi(seq origi),
gfi(gfi(seq origi)), . . .}) generated by a correct process
have the following properties:
numbers, i.e.,
sequence numbers.
1. The sets taken together contain all possible sequence
(cid:1)
i=1(Si) = S, where S is the set of all
n
2. They are pair-wise disjoint, i.e., i (cid:8)= j ⇒ Si ∩ Sj = φ
The total-ordering protocol at each process delivers incom-
ing messages in the sequence number order. The protocol
can be held up by a process that does not send a message
with a particular sequence number. We avoid that problem
by forcing group members to transmit protocol-level mes-
sages with no payload (null messages) if they don’t have any
other messages to send. All processes monitor the progress
of other processes. If some process is not sending any mes-
sages, and thus is holding up the progress of the protocol,
this fact is reported to the fault detector implemented by the
group membership protocol of the GCS. This scheme can
be seen as an example of a “born-order” protocol [16] for
total ordering, in which the messages contain information
about the order in which they should be delivered.
The efﬁciency of this protocol depends on the relation-
ship between the actual message trafﬁc generated by the
group members and the ordering forced by the sequence
numbers assigned to them.
If there is a close match be-
tween the two, this protocol will be more efﬁcient than pro-
tocols that need sequencers or depend on some form of dis-
tributed consensus, because the extra step of deciding the
order is avoided. We expect that the protocol will perform
well in the ITUA project [7], since our intended application
in that project has a predictable pattern of message trafﬁc
under normal circumstances. For a process group of size n
in which all members generate similar trafﬁc, a good set of
generating functions is fi such that fi(x) = x + n. All the
functions are the same, but the initial sequence number as-
signed to each process is its rank (ranks are unique to each
member and are integers in the range [0, n− 1]). The proto-
col will work even if a bad choice is made for the generating
functions, but the penalty because of null messages will be
high, leading to low performance.
The total-ordering protocol depends on the services of a
reliable multicast protocol (like the protocol described in
the previous section) that guarantees that FIFO ordering
(per sender) is available. The total-ordering protocol pro-
vides the following property:
Order If correct processes p and q both deliver m1 and m2,
then they deliver them in the same order.
An informal proof that our total-ordering protocol indeed
provides this property is given in [6].
2.4 Group Membership Protocol
The intrusion-tolerant group membership protocol we
evaluate ensures that all correct processes maintain consis-
tent information about the current membership of the group
in spite of intrusions that may occur. In providing this func-
tion, the group membership protocol relies on a reliable
multicast protocol (such as the one described in Section 2.2)
to deliver the messages it sends to maintain group mem-
bership. The group membership protocol is responsible for
maintaining group membership information, removing pro-
cesses from the group, and joining new processes into the
group. It has the properties described below, which are sim-
ilar to those provided by [12] and [4].
Agreement If p and q are two correct processes, then view
Vx at both processes will have the same membership.
Self-inclusion If a correct process p installs a view Vx, then
Vx includes p.
Validity If a correct process p installs a view Vx, then all
correct members of Vx will eventually install Vx.
Integrity If view Vx includes p but Vx+1 excludes p, then
p was suspected by at least one correct member of Vx.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:28:00 UTC from IEEE Xplore.  Restrictions apply. 
Liveness If there is a correct process p that is a member
of view Vx and is not suspected by (cid:11)(2|Vx| + 1)/3(cid:12)
correct members of Vx, and there is a process q that is
suspected by (cid:6)(|Vx| − 1)/3(cid:7) correct members of Vx,
then q is eventually removed.
In this paper, we discuss how the protocol acts to remove
corrupt member(s) from the group. The interested reader
is referred to [5] for details about how new members can
be added to the group, pseudo-code-level description of the
entire group membership protocol and informal proofs that
the protocol satisﬁes the abovementioned properties.
2.4.1 View Installation to Remove a Single Corrupt
Member
We represent the group membership protocol as a set
of communicating ﬁnite state machines, each as shown
in Figure 1.
In this section, we exclude the possibil-
ity that additional processes will exhibit faulty behavior3.
Upon initialization, all state machines are in the NORMAL
state. The group membership protocol provides an inter-
face suspect(process-rank i, reason R) to the microprotocols
of the group communication system. At a correct process,
this function will be invoked if the process detects that an-
other member has deviated from its speciﬁed behavior; a
corrupt process may invoke this function at any time. When
the function is invoked, the group membership protocol of
the process that suspects another process will broadcast a
signed Suspect message to the group and change its state to
PHASE0.
When a non-leader process in the group has seen f + 1
Suspect messages for a member, it changes its state to
WAITING-PHASE1. That marks the initiation of a three-
phased view installation procedure, which is a series of
steps at the end of which the member suspected to be cor-
rupted by f + 1 other members will be removed from the
group. The process also starts a timer, and expects the
leader of the group to take action before the timer expires.
If the f + 1 Suspect messages were for the leader, then the
leader is suspected to be corrupt; hence, the deputy is ex-
pected to become leader and take action. When the leader
sees f + 1 Suspects, it broadcasts a signed New-View mes-
sage, which contains 1) the list of endpoints for the next
view that excludes the corrupt member, and 2) justiﬁcation
for this exclusion in the form of f + 1 Suspect messages
received from the group.
When a valid New-View message is received, a cor-
rect process changes its state to PHASE1 and broadcasts
a signed Ack-New-View message. If a process pk acknowl-
edges a New-View message from pb, then it does not ac-
knowledge any more New-View messages from processes
3However, we do tolerate that scenario. A description of how we do so
is in Section 2.4.2.