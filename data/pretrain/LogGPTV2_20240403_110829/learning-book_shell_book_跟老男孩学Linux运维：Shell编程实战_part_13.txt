将第二个变量和整数相加。
RETVAL_B=$?
/dev/nul1
echo*you are using $1*
fi
[root@oldboy scripts]sh exprl.sh id_dsa.pub
you are using id_dsa.pub
[rooteoldboy scripts]sh expr1.sh id_dsa
pls use*.pub file
范例5-20：使用expr命令实现系统ssh服务自带的ssh-copy-id公钥分发脚本。
-do-s.dzt.-dosoox]
if[·-i=*s1·];then
shift.
check if we have 2 parameters left,if so the first is the new ID file
if[-n*s2]；then
ifexpr*s1*：·,*\.pub*>/dev/nul1；thenq10，-bos、、0.-b、odsx]
1+2+3+4+5+6+7+8+9+10=55
[rooteoldboy scripts] echo
_（（））==>（（.OT+.o-bou、））s-、OT+，-bo、
1+2+3+4+5+6+7+8+9+10=55
---
## Page 101
第5章变量的数值计算实践83
[xootoldboy scripts]#echoseg-s+10²=seg-8101xargseogr##（（.0t.+.8-bs、1so）s=、0t+.8-bes、
1+2+3+4+5+6+7+8+9+10=55
bc命令的独有特点是除了支持整数运算之外，还支持小数运算。
5.6awk实现计算
利用awk进行运算的效果也很好，适合小数和整数，特别是命令行计算，尤其是小
数，运算很精确，好用。来看个示例，如下：
[root@oldboy scripts]# echo *7.7 3.8*1awk'(print ($1-$2))
<==S1为第一个数字，S2为第二个数字，用空格隔开，下同。
3 .9
- .8.]
3 .14159
54
5.7declare（同typeset）命令的用法
下面将要讲解的是使用typeset定义整数变量，直接进行计算。这个方法不是很常
用，因为需要定义才能生效。示例如下：
[root@oldboy8cript8]declare-1A=30B=7<==declare-1参数可以将变量定义为整形。
[root@oldboyscript8]A=A+B<==因为已声明是整型，因此可以直接进行运算了。
[root@oldboy scripts]echo SA
37<==结果为37（老男孩37岁了，还在奋斗。）
5.8$0符号的运算示例
关于$口符号运算的示例如下：
[rooteoldboy seripts]#i=5
[zooteoldboy scripts]#i=$[i+6]
[rooteoldboy scripts]# echo $i
]
11
[rootθoldboy acripts]#echo s[2**3]
[rootθoldboy scripts]echo s[3/5]
8
0
---
## Page 102
跟老男孩学Linux运维：Shel编程实战
[root8o1dboy scripts]#echo $[3/2]
[rootθoldboy scripts]echo s[35]
[rootoldboy scripts]#echoS[35]
E
下面是一个解决实际问题的示例：打印数学杨辉三角。
#1/bin/bash
if（test-z S1）then
<==判断传参的值长度是不是为0，如果没有传入参数，则使用read读入。
read-p*Input Max Lines:*MAx<==read读入-个数值。
else
MAX-S1
<-如果已经传参了，就把传参的S1赋值给MAX。
fi
<-上述脚本额巧妙地通过判断，实现了用户既可以传参输入，也可以read读入数字。
i-1
while[Si-1e SMAx]<=i行控制。
do
j-1
while[sj-1eSi]<==j列控制。
do
f=$[i-1]
<=f=i-1是s[]计算写法。
if1sj-eqsi]11[sj-eq1]:then
[T-F]SB
<==g=j-1是s11计算写法。
declare sUM_s（i)_sj-1
#<==声明变量头尾都是1。
else
declare A=s[suM_s(f)_sj]
<==取上一行的j列变量。
declare B=s[suM_s(f)_sg)
#<==取上一行的j-1列变量。
declare SUM_S（i）_Sj=expr SA+SB#<==声明并计算备前变量的值。
echo-en s[sUM_s(i）_s].
t1
<==输出当前变量。
letj++
<==let运算用法。
done
echo
<==换行。
leti++
<==let运算用法。
有关用Shell脚本实现杨辉三角的细节和3个实例请参见老男孩的博文（http://
oldboy.blog.51cto.com/2561410/756234），这里不再多提，此题对于运维实战的意义不
大，仅在于练习编程能力和思想。
5.9基于Shell变量输入read命令的运算实践
5.9.1read命令基础
Shell变量除了可以直接赋值或脚本传参外，还可以使用read命令从标准输人中获
---
## Page 103
第5章变量的数值计算实践B
得，read为bash内置命令，可通过helpread查看帮助。
语法格式：read[参数][变量名]
常用参数如下。
-pprompt：设置提示信息。
口-ttimeout：设置输人等待的时间，单位默认为秒。
来看几个示例。
范例5-26：实现read的基本读人功能。
od s.do-exedsooo]
<==读入一个输入，赋值给nun变量，注意，num变量前需要有空格。
Pls input one num:18
<==输出数字18，相当于把18赋值给num变量。
[rootθoldboy scripts]echo Snum<输出变量值。
[rootθoldboy scripts]#read-p*please input two number:*al a2
<==读入两个输入，注意要以空格隔开，分别赋值给a1和a2变量，al变量前后都需要有空格。
please input two nunber:1 2
[root@oldboy scripts]# echo $a1
[root@oldboy scripts] echo $a2
提示：read的读入功能就相当于交互式接受用户输入，然后给变量赋值。
上面read-p的功能可以用echo和read来实现，如下：
以上两句和下面的命令相当（-t排除在外）。
read-t5-p“please input two nunber:a1a2#5秒超时退出
范例5-27：把前面加减乘除计算传参的脚本改成通过read方式读入整数变量。
原始脚本如下：
1/bin/bash
a=$1
b$2
.（（qs-）)s=q-.uo
.（（qs+）)s=q+ou
.（（qss）)s=q.ouo
.（（qs/es）)s=q/e.ouo
.（（qs..s））s=q...
（（a））s=qg,o
解答：
---
## Page 104
部跟老男孩学Linux运维：Shell 编程实战
[rootθoldboy scripts] cat test_2.sh
+!/bin/bash
read-t15-p“pleaae input two number:*ab<去摔原辨本中a和b的定义，通
过read读入即可。
echo *a-b=S((Sa-Sb))*
（（qss）)s=q.ou
echo“a+b=S((sa+sb))"
echo*a/b=s(（Sa/$b))
echo *a**b=S(（Sa**sb）)·
echo *a#b=S（(Sa#sb))
please input two number:105
[root@oldboy scripts]+ sh test_2.sh
a-b=5
a+b=15
a*b=50
a/b=2
a**b=100000
ab=0
下面是初学者的多种典型错误案例，大家一起来找茬。
典型错误案例1：
#1/bin/bash