# Statically Detecting Likely Buffer Overflow Vulnerabilities

**Authors:**
- David Larochelle
- David Evans

**USENIX Association**
- Proceedings of the 10th USENIX Security Symposium
- Washington, D.C., USA
- August 13–17, 2001
- © 2001 by The USENIX Association
- Phone: +1 510 528 8649
- FAX: +1 510 548 5738
- THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
- All Rights Reserved
- Email: PI:EMAIL
- For more information about the USENIX Association: [http://www.usenix.org](http://www.usenix.org)
- Rights to individual papers remain with the author or the author's employer.
- Permission is granted for noncommercial reproduction of the work for educational or research purposes. This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.

## Abstract

Buffer overflow attacks are a significant and persistent security threat, accounting for approximately half of all security vulnerabilities. This paper introduces a new approach to mitigating buffer overflow vulnerabilities by detecting likely vulnerabilities through static analysis of program source code. Our approach leverages semantic comments and employs lightweight, efficient static analyses. We have implemented this approach by extending the LCLint annotation-assisted static checking tool, which is as fast as a compiler and nearly as easy to use. We present our experience using this approach to detect buffer overflow vulnerabilities in two security-sensitive programs.

## 1. Introduction

Buffer overflow attacks are a critical and persistent security issue. According to Richard Pethia of CERT and Brian Snow of the NSA, buffer overflows are the single most important software engineering problem, and they are expected to remain a significant threat for at least two decades. Programs written in C are particularly vulnerable to buffer overflow attacks due to the language's emphasis on performance and space over safety. C allows direct pointer manipulations without bounds checking, and the standard C library includes many unsafe functions that require careful use. Despite these risks, many security-critical programs are still written in C.

Several run-time approaches have been proposed to mitigate the risks associated with buffer overflows. However, these techniques are not widely adopted, possibly due to their performance overhead and the potential for turning buffer overflow attacks into denial-of-service attacks. Instead, we propose a static analysis approach to detect likely buffer overflow vulnerabilities. Our prototype tool, built by extending LCLint, differs from other static detection methods in three key ways: (1) it uses semantic comments to enable local checking of interprocedural properties; (2) it focuses on lightweight static checking techniques that are performant and scalable, though they may sacrifice soundness and completeness; and (3) it introduces loop heuristics for efficient analysis of typical loops.

This paper provides background on buffer overflow attacks and previous mitigation attempts in Section 2. Section 3 outlines our approach, while Section 4 reports on our experience using the tool on wu-ftpd and BIND. Sections 5 and 6 detail the implementation of our analysis. Finally, Section 7 compares our work to related efforts in buffer overflow detection and static analysis.

## 2. Buffer Overflow Attacks and Defenses

The simplest buffer overflow attack, known as stack smashing, involves overwriting a buffer on the stack to replace the return address. When the function returns, control jumps to the address placed on the stack by the attacker, allowing them to execute arbitrary code. C programs are particularly susceptible to this type of attack due to the language's direct low-level memory access and pointer arithmetic without bounds checking. The standard C library also includes unsafe functions like `gets`, which write unbounded user input into fixed-size buffers without bounds checking. To exploit such vulnerabilities, an attacker need only enter an input larger than the buffer size and encode an attack program binary within it. The 1988 Internet Worm exploited this vulnerability in `fingerd`.

More sophisticated buffer overflow attacks can target unsafe buffer usage on the heap, though this is more challenging since most programs do not jump to addresses loaded from the heap or to code stored there.

Several run-time solutions have been proposed to address buffer overflow attacks. StackGuard is a compiler that generates binaries with code to prevent stack smashing by placing a special value next to the return address and checking for tampering before jumping. Baratloo, Singh, and Tsai describe two run-time approaches: one replaces unsafe library functions with safe implementations, and the other modifies executables to perform sanity checks on return addresses before they are used.

Software fault isolation (SFI) inserts bit mask instructions before memory operations to prevent out-of-range memory access, but it does not fully protect against typical buffer overflow attacks. Generalizations of SFI, such as Janus, Naccio, PSLang/PoET, and Generic Software Wrappers, provide more comprehensive protection by monitoring and mediating system calls and transforming object programs according to safety policies.

Modifying the operating system to separate code and data into different memory segments can make buffer overflow attacks more difficult, but it does not eliminate the problem entirely. An attacker can still overwrite an address on the stack to make the program jump to any point in the code segment. For programs using shared libraries, it is often possible for an attacker to jump to a maliciously usable address in the code segment, such as a call to `system`.

Despite the availability of these and other run-time solutions, buffer overflow attacks remain a persistent problem. This may be due to a lack of awareness of the severity of the problem and the practicality of available solutions. Additionally, run-time solutions often incur performance penalties and can turn buffer overflow attacks into denial-of-service attacks, making static checking a more attractive alternative.

## 3. Approach

Our static analysis tool is built upon LCLint, an annotation-assisted lightweight static checking tool. LCLint detects various issues, including violations of information hiding, inconsistent modifications of caller-visible state, misuses of possibly NULL references, dead storage, memory leaks, and parameter aliasing. LCLint is widely used, especially in the open-source development community.

Our approach exploits semantic comments (annotations) added to source code and standard libraries. These annotations describe programmer assumptions and intents. They are treated as regular C comments by the compiler but recognized as syntactic entities by LCLint. For example, the `/*@notnull@*/` annotation can be used in a parameter declaration to indicate that the value passed for this parameter may not be NULL. LCLint uses these annotations to place constraints on the possible values a reference can contain before or after a function call.

Prior to this work, LCLint supported annotations that classified references into a small number of states. To effectively check for buffer overflow vulnerabilities, we needed more expressive annotations. We extended LCLint to support a more general annotation language, allowing programmers to explicitly state function preconditions and postconditions using `requires` and `ensures` clauses. These new annotations are more expressive but still maintain the simplicity of semantic comments added to programs.