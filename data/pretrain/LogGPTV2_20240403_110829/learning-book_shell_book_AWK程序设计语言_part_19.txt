Sentence -> Nounphrase Verbphrase
-> the boy Verbphrase
不断进行下去，直到所有的非终结符都被替换摔为止：
Sentence -> Nounphrase Verbphrase
-> the boy Verbphrase
-> the bov Verb Modlist Adverb
-> the boy walks very Modlist Adverb
-> the boy walks very Adverb
-> the boy walks very quickly
Sentence的最终展开结果是一个句子.非终结符的推导过程与我们在初级学校所学到的语句图
（sentence-diagram）刚好祖反：我们现在是把动词短语拆分成动词与副词，而不是把动词与副词组合成
动词短语
Modlist的产生式比较有趣.一条规则是说用veryModlist替换Modlist，每次使用这条规
则都会使句子变长.幸运地是，只要运用另一条产生式规则（该规则用空字符串替换掉Modlist）就可
以终止潜在的无限循环
我们现在打算开发一个程序，该程序根据语法生成语句，每次生成都从一个指定的非终结符开始，程
序从文件中读取语法规则，记录下每一个左部出现的次数，左部所拥有的右部的个数，以及它们各自的组
成成分，然后，每输入一个非终结符，就会为该非终结符生成一个随机语句.
程序使用三个数组来存放语法规则：lhs[A]给出了非终结符A的产生式个数，rhscnt[A，i]存
放的是A的第i条产生式右部的符号个数，rhslist[A，i，j]存放的是A的第i条产生式右部的
第j个符号，对于前面提到的语法规则，三个数组的内容分别是：
1hs:
rhscnt:
rhslist:
Sentence
Sentence,12
Sentence,1,1Nounphrase
Nounphrase
2
Nounphrase, 1
2
Sentence,1,2
Verbphrase
Verbphrase
Nounphrase,2
2
Nounphrase, 1,1
boy
the
etc.
Verbphrase,1
3
Nounphrase, 1,2
115
etc.
Nounphrase, 2,1
the
Nounphrase,2,2
gir1
Verbphrase, 1, 1
Verb
Verbphrase,1,2
Modlist
Verbphrase,1,3
Adverb
etc.
程序的源代码是：
# sentgen - random sentence generator
input:grammar file; sequence of nonterminals
output: a random sentence for each nonterminal
BEGIN { # read rules from grammar file
if ($2 == "->"） {
---
## Page 118
第五章文本处理
110
i = ++1hs[$1]
count lhs
rhscnt[$1, i] = NF-2
#how many in rhs
for （j= 3;j 1 ? ARGV[1] : 10# default size is 10
srand()
#reset rand from time of day
do(
n1 = randint(maxnum)
n2 = randint(maxnum)
（uu=bg+b）uTxd
（0 0)
）
function randint(n) ( return int(rand() *n)+1 }
Exercise5.8除了加法外，再新增几种数学运算，另外，如果用户的因答是错误的，显示一条提示信息
技巧测试之测验
我们的第二个例子是程序quiz，quiz从题库中抽取特定的文件，并用文件中的问题向用户提问.
例如，我们可以测试用户对化学元素的了解程度，假设化学元素的题库文件是quiz.elems，文件包含
了化学元素的符号，原子序数，以及元素的全称，字段之间用冒号分开，文件的第一行比较特殊，它标明
了各个字段的意义：
symbo1:number:name |element
H:1:Hydrogen
He : 2 : He1ium
Li:3:Lithium
Be: 4 :Bery11ium
B:5 : Boron
C:6:Carbon
N:7:Nitrogen
0:8:0xygen
F:9:F1uorine
Ne : 10 :Neon
Na :11 :Sodium|Natrium
程序根据第一行来判断哪个字段是问题，哪个字段是正确答案，然后把文件剩下的部分读取到一个数组118
中，通过该数组，程序就可以随机地选择问题并检查回答的正确性，输入命令行
awk -f quiz quiz.elems name symbo1
之后，我们将会得到类似下面的对话：
Bery11ium? B
wrong, try again: Be
Right!
Fluorine?
注意，我们可以通过正则表达式来处理备选答案（例如sodium或natrium）.
#quiz - present a quiz
usage: awk -f quiz topicfile question-subj answer-subj
---
## Page 121
第五章文本处理
113
BEGIN{
FS = ": "
if (ARGC 1= 4)
error(*usage: awk -f quiz topicfile question answer")
if (getline  NF 1| a > NF |1 q == a)
error("valid subjects are " $0)
while (getline  0) # load the quiz
qa[++nq]= $0
ARGC = 2; ARGV[1] = "_"
 now read standard input
srand()
do(
(x *[(t +bus()puex)u]eb)T[ds
printf("s? ", x[q])
(0 0)
function error(s) { printf("error: &s\n", s); exit }
119
为了辨别出正确答案，我们用和$包困正则表达式，否则的语，只要用户的因答中含有与标准答案匹
配的子字符串，那么该回答就会被认为是正确的（于是，Ne,Na与N都会被当作标准答案N）.
Exercise5.9修改quiz：对于月一道问题最多输出一次.
---
## Page 122
第五章文本处理
114
5.3文本处理
由于强大的字符串处理能力，对于涉及到文本处理与文件准备的工作来说，awk是一个非常有用的
工具，作为示例，这一节包含的程序可以用于单词计数，文本格式化，交又索引维护，制作KWIC索引，以
及索引准备工作.
单词计数
在第一章，我们展示了一个用于计算某个文件的行数，单词数与字符数的程序，在该程序中，单词被
定义为由多个非空白字符组成的字符序列，与此相关的问题是计算某个文档中，每个单词的出现次数，解
决这个问题的一种思路是把文格中的单词分解出来，对它们排序，这样相同的单词就会紧挨在一起，最后
再用control-break程序计算每个单词的出现次数.
另一种思路（与awk非常契合）是分解出每一个单词，把单词的出现次数记录在关联数组中.为了
更好地完成这个任务，我们必须搞清楚一个单词究竞是由什么组成的，在下面的程序里，单词是一个移除
了标点符号的字段，于是，"word"，"word;”以及"（word）"都看作是单词word.END降序输出每个
单词的出现次数
#wordfreq - print number of occurrences of each word
input:text
output: number-word pairs sorted by number
{gsub(/[·,:;1?(){)]/, "")
remove punctuation
for (i = 1; i  0) (
print substr(line, 2)
#removes leading blank
line = ""
Exercise5.13修改fmt：对齐输出文本的右边空白.
Exercise5.14增强fmt的功能，使得它可以通过识别文格中可能的标题，列表等信息，推断出文枯的