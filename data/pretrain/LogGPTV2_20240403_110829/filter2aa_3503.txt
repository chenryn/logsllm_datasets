# Understanding and Securing Active Directory Federated Services (AD FS)

## Authors
- **Douglas Bienstock** - @doughsec
  - 4.5 years of experience at Mandiant
  - IR and Red Team Lead
  - Fluent in cloud technologies

- **Austin Baker** - @bakedsec
  - 5.5 years at Mandiant
  - IR and Red Team
  - Teaches classes and enjoys gaming

## Overview
- **Goal**: Understand AD FS, how to attack it, and best practices for securing it.

## Roadmap
1. Introduction to AD FS
2. Importance of AD FS
3. Building Blocks of AD FS
4. Identifying AD FS Servers
5. Attacking AD FS
6. Becoming (Taking Over) AD FS
7. Tools and Demos
8. Best Practices and Mitigations

## What is AD FS and How Does It Work?
- **Single-Sign On (SSO)**: AD FS provides SSO for applications that do not integrate directly with Active Directory.
- **Centralized Authentication and Identity Management**: AD FS centralizes authentication, identity management, and token issuance.
- **Necessity for Large Organizations**: AD FS is essential for large organizations, especially those moving to the cloud.

## Why Do We Care About AD FS?
- **Cloud Migration**: Organizations are increasingly moving to the cloud, making AD FS a critical gateway.
- **Security Boundary**: AD FS serves as a new security boundary, replacing traditional AD boundaries.
- **Control and Ownership**: Owning AD FS can provide control over the organization's cloud environment.

## Building Blocks of AD FS
### Claims
- **Claims**: Statements about a user’s identity, including type and value.
- **Attribute Store**: Source of claims, often Active Directory.
- **Claims Rules**: Business logic that processes incoming claims and generates new outgoing claims based on conditions.

### Claims Pipeline
1. **Start with Claims from AD**: Initial claims are sourced from Active Directory.
2. **Pipeline Processing**: The pipeline adds and modifies claims according to predefined rules.
3. **Output Claims**: Final set of claims that the relying party needs, transformed into security token attributes.

### Security Tokens
- **SAML Tokens**: Claims output from the pipeline are used to generate SAML tokens.
- **Relying Parties**: Configured to accept SAML and WS-FED tokens, following standardized formats.

### Identity Provider (IdP)
- **Role**: Authenticates users, builds claims, and packages them into security tokens.
- **ADFS Service**: Acts as the IdP, managing the "account organization."

### Relying Party (RP)
- **Role**: Unpacks provided claims from security tokens and makes authorization decisions.
- **Examples**: Third-party cloud applications.

## Identifying AD FS Servers
- **DNS Search**: Look for common prefixes like `adfs.doughcorp.com`, `sts.doughcorp.com`, `fs.doughcorp.com`.
- **Shodan Search**: Quick search can find thousands of AD FS servers.
- **Login Redirection**: Try logging into Office 365 with a bogus email to see if you are redirected.
- **URL Paths**: Search for required paths like `/adfs/ls` and `/adfs/services/trust/2005/usernamemixed`.

### Finding AD FS Proxies
- **IDP-Initiated Sign-On**: Check for `/adfs/ls/idpinitiatedsignon.aspx` for forms-based auth.
- **NTLM-Based Authentication**: Default URLs exposed via AD FS proxies, leaking internal hostnames.
- **Best Practices**: Follow Microsoft's guidelines for securing AD FS.

## Attacking AD FS
- **Complex Systems and Attack Surfaces**: More complex systems offer more attack surfaces.
- **Targets**: Relying Party supporting apps, IdP policies, and IdP-RP adapters.
- **Adapters**: Implement necessary IdP methods and contain logic for claim validation.

### Adapt or Die
- **Investigate**: Start with `Microsoft.IdentityServer.ServiceHost.exe` and related DLLs.
- **Patch Methods**: Acquire adapter DLL and patch relevant methods.
- **Service Restart**: Kill/suspend service, replace DLL, and restart to verify success.

## Becoming (Taking Over) AD FS
- **Token Signing Certificate**: Critical for AD FS security; obtaining it allows impersonation.
- **WID Database**: Used by AD FS to store configuration data, accessible via named-pipe.
- **DKM System**: Manages keys and policies, implementing a new data protection API.

### Decrypting the Signing Token
1. **Read EncryptedPFX**: From the configuration database.
2. **Parse ASN1 Types and Ciphertext**: From the blob.
3. **Read DKM Key**: From Active Directory.
4. **Key Derivation**: Use DKM key for KDF to obtain AES key.
5. **Decrypt Ciphertext**: Into a PKCS12 object.
6. **Generate Signed Tokens**: Become an AD FS server and sign your own security tokens.

## Tools and Demos
- **ADFSDump**: .NET assembly to run on AD FS server, dumping configuration data.
- **ADFSpoof**: Python program to decrypt EncryptedPfx blob and generate signed SAML tokens.

## Best Practices and Mitigations
- **Secure Privileged Access**: Treat AD FS server as a Tier 0 device.
- **Advanced Auditing**: Enable auditing options in AD FS Management snap-in.
- **gMSA and HSM**: Use Group Managed Service Accounts and Hardware Security Modules.
- **Extranet Smart Lockout**: For AD FS 2016.
- **Incident Response**: Reset signing key, compare claims rules, and verify core adapters.

## Conclusion
- **Visibility and Confidence**: Essential for effective incident response.
- **Vendor Logs**: Useful in AD FS cloning scenarios but less so with modified adapters.

---

©2019 FireEye