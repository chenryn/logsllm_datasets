Douglas Bienstock and Austin Baker
I AM AD FS AND SO CAN YOU
©2019 FireEye
©2019 FireEye
§ Whoami
§ What is AD FS and how does it work?
§ How do we find AD FS servers?
§ How can we attack AD FS?
§ How can we become (takeover) AD FS?
§ Tools and Demos
§ Best practices and mitigations
§ Goal: Understand AD FS, how we can attack it and why we want to, and 
how to keep it safe
Roadmap
©2019 FireEye
©2019 FireEye
§ 4.5 years of experience at 
Mandiant
§ IR and Red Team lead
§ Speaks fluent cloud
Doug Bienstock - @doughsec
3
©2019 FireEye
©2019 FireEye
§ IR and Red Team
§ 5.5 years at Mandiant
§ Teaches some classes 
and stuff
§ Plays some games and 
junk
Austin Baker - @bakedsec
4
MSFT AD FS – WTF?
©2019 FireEye
©2019 FireEye
§ Single-Sign On (SSO) solution for applications that don’t integrate directly to 
Active Directory
§ In plaintext: use AD creds for services/apps outside AD
§ Centralizes both authentication, identity management, token issuance
§ Basically required for any large org now
§ We must go deeper…
Active Directory Federated Services
6
©2019 FireEye
©2019 FireEye
§ Organizations are increasingly 
moving to the cloud
§ AD as a data/security boundary 
no longer exists
§ AD FS is commonly the gateway to 
the cloud for organizations
§ If we can own AD FS we can own 
the cloud
§ As security practitioners we must 
keep up with the move to the 
cloud
OK – but why do we care?
7
©2019 FireEye
©2019 FireEye
§ Claims: Statements about a user’s identity
– Description (type) and value
§ Attribute Store: Where claims are sourced from (e.g. AD)
§ Claims Rules: Business logic that takes incoming claims, apply conditions, 
and produce new outgoing claims based on those conditions. Applied in 
the claims pipeline
§ c:[Type == 
"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccou
ntname", Issuer == "AD AUTHORITY"] => issue(store = "Active Directory", types 
= ("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"), 
query = ";mail;{0}", param = c.Value);
Building blocks
8
©2019 FireEye
©2019 FireEye
1. Start with claims from AD
2. Pipeline adds new claims and 
modifies existing claims 
according to rules
3. Outputs set of claims that the 
relying party has 
communicated it needs
– Claims coming out of the pipeline 
are transformed into security token 
attributes
9
Building Blocks - Claims Pipeline
©2019 FireEye
©2019 FireEye
§ Claims output from the claims pipeline are used to generate security 
tokens in the form of SAML tokens
§ Relying parties can be configured with SAML and WS-FED consumers
– WS-FED => SAML 1.1 tokens
– SAML => SAML 2.0 tokens
§ The tokens follow a standardized (OASIS) format that we rely on to be 
consistent
§ Tokens are accepted by relying parties in a standardized format, too
– SAMLResponse POST parameter
Building Blocks - Security Tokens
11
©2019 FireEye
©2019 FireEye
§ c:[Type == 
"http://schemas.microsoft.com/ws/2008/06/identity/claims/windowsaccou
ntname", Issuer == "AD AUTHORITY"] => issue(store = "Active Directory", types 
= ("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"), 
query = ";mail;{0}", param = c.Value);
§ 
PI:EMAIL
Building Blocks – claims to assertions
12
©2019 FireEye
©2019 FireEye
§ Identity Provider (IdP): Organization that takes identities as input and 
outputs claims about them. Authenticates a user, builds claims for that user 
(the pipeline), and packages them into security tokens
§ ADFS Service: Our IdP, the "account organization"
Building blocks – the IdP
13
©2019 FireEye
©2019 FireEye
§ AD FS Proxy (WAP): Proxy server that sits in DMZ to receive requests from 
Internet
§ Relying Party (RP): Unpacks provided claims from security token and makes 
authorization decisions based on them. They rely on the provided claims
– e.g. a third-party cloud application
Building blocks – the RP
14
©2019 FireEye
©2019 FireEye
(1) https://portal.office.com
(2) 302 sts.doughcorp.com
(3)
©2019 FireEye
©2019 FireEye
(3)
(4)
(5)
(6)
PI:EMAIL
©2019 FireEye
©2019 FireEye
(1) https://portal.office.com
(2) 302 sts.doughcorp.com
Login.microsoftonline.com
(3)
(4)
(5)
(6)
(7)
©2019 FireEye
©2019 FireEye
Identity Providers
18
©2019 FireEye
©2019 FireEye
§ Federations need identity providers
– Need to know someone is who they claim to be
§ AD FS is the nexus of identity provision
– And adapters are how third-party vendors can augment that process for their own 
purposes
§ Every major vendor with hands in the authentication cookie jar has an AD 
FS adapter
– Some even aim to compete for with AD FS for the IdP crown
Identity Providers and Adapters
19
Identifying AD FS
©2019 FireEye
©2019 FireEye
§ Search DNS for prefixes suggested by Microsoft (most people follow their 
deploy guides)
– adfs.doughcorp.com, sts.doughcorp.com, fs.doughcorp.com
– Quick Shodan search found 10,000+
§ Try logging in to Office 365 using a bogus email address and see if you are 
redirected
§ Search for required URL paths
– /adfs/ls
– /adfs/services/trust/2005/usernamemixed
– more…
Finding AD FS Proxies
21
©2019 FireEye
©2019 FireEye
§ Some fun things...
§ During deployment Microsoft 
recommends enabling “IDP-initiated 
sign-on” in order to test
– Available at 
/adfs/ls/idpinitiatedsignon.aspx
§ Nice forms-based auth for a password 
spray
§ Lists SAML-enabled service providers 
that use AD FS
Finding AD FS Proxies
22
©2019 FireEye
©2019 FireEye
§ AD FS also supports NTLM-based authentication for on-premise users
§ By default those URLs are also exposed to the Internet via the AD FS proxies
§ Leaks the internal hostname of the AD FS server (not proxy), including the 
Active Directory domain name
– Also provides another vector for password sprays
§ /adfs/services/trust/2005/windowstransport
§ /adfs/services/trust/13/windowstransport
§
https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/best-practices-securing-ad-fs
Finding ADFS Proxies
23
Attacking AD FS
©2019 FireEye
©2019 FireEye
“It’s like the more complex systems we 
come across, the more attack surface
we see.”
- Biggie Smalls, maybe
25
©2019 FireEye
©2019 FireEye
§ Which pieces are obvious targets:
– Relying Party supporting apps (Duo, RSA, 
etc. management)
– IdP policies and exceptions (AD FS 
configurations)
– IdP-RP adapters
§ Relying Party attacks covered in-depth 
elsewhere
– See “Two-Factor, Too Furious” from 
DerbyCon
§ The IdP side on the other hand…
Target the Weak Links
26
©2019 FireEye
©2019 FireEye
§ Auth adapters just implement necessary idP methods
– IsAvailableForUser, Metadata, OnAuthenticationPipelineLoad/Unload, OnError, 
TryEndAuthentication
– Registered in GAC – signed with strong name
§ Vendor adapters construct supporting functions for the above
– Contain all the logic to determine whether a user's claim is signed off on
– Good place to focus attention
§ Many routes to take
– Register new adapters or adjust existing adapters
Adapt or die
27
©2019 FireEye
©2019 FireEye
Adapt or die
28
§ Start by investigating Microsoft.IdentityServer.ServiceHost.exe and our DLL
©2019 FireEye
©2019 FireEye
Adapt or die
29
§ Acquire adapter .dll and patch relevant DLL method
©2019 FireEye
©2019 FireEye
Adapt or die
30
©2019 FireEye
©2019 FireEye
Adapt or die
31
©2019 FireEye
©2019 FireEye
32
Adapt or die
©2019 FireEye
©2019 FireEye
Adapt or die
33
§ Kill/suspend service, replace DLL, restart
§ Verify success!
§ Depending on adapter:
– Different methods to patch
– Different logging methods
§ Same knowledge can be used dynamically
– In-memory patching stealthy, more technically complex
– Doesn't persistent restarts without a persistent "shim"
Becoming ADFS
©2019 FireEye
©2019 FireEye
“The token signing certificate is considered 
the bedrock of security in regards to ADFS. 
If someone were to get ahold of this 
certificate, they could easily impersonate 
your ADFS server.”
- Microsoft
35
©2019 FireEye
©2019 FireEye
Mimikatz is for the birds (in this case)
36
©2019 FireEye
©2019 FireEye
§ Relational database intended to be used only by Microsoft products
– MS-SQL “lite”
– Default option for AD FS
§ Accessible over a named-pipe
– \\.\pipe\MICROSOFT##WID\tsql\query
– Windows 2012+
§ Can be accessed using SMSS
Windows Internal Database (WID)
37
©2019 FireEye
©2019 FireEye
§ Used by AD FS to store service configuration data in default config
§ Only accessible by the AD FS service account
WID
38
©2019 FireEye
©2019 FireEye
§ ADFSConfigurationV3.IdentityServerPolicy.ServiceSetting
Locating the goods
39
©2019 FireEye
©2019 FireEye
§ “We present DKM, a distributed key management system with a 
cryptographically veriﬁed code base. DKM implements a new data 
protection API. It manages keys and policies on behalf of groups of users 
that share data.”
– [https://www.microsoft.com/en-us/research/publication/cryptographically-
verified-design-and-implementation-of-a-distributed-key-manager/]
DKM
40
©2019 FireEye
©2019 FireEye
DKM
41
©2019 FireEye
©2019 FireEye
§ Upon service start, AD FS will load configuration information from the 
configuration database (in this case the WID)
§ As part of that process it calls LoadCertificateCollection()
§ Which in turn calls DkmDataProtector.Unprotect()...
– Passing in base64 decoded blob from EncryptedPFX XML element
Decrypting the SigningToken
42
©2019 FireEye
©2019 FireEye
§ … which in turn calls Dkm.GroupKey._Unprotect() ...
– ...which inherits the method from DKMBase
Decrypting the SigningToken
43
©2019 FireEye
©2019 FireEye
– DKMBase.Unprotect() is where 
the magic happens
Decrypting the SigningToken
44
Decode the EncryptedPFX
blob
Get key length based on 
encryption algorithm in use
Read the DKM key
KDK using DKM key
Decryption!
©2019 FireEye
©2019 FireEye
Decrypting the SigningToken
45
©2019 FireEye
©2019 FireEye
§ Uses Key Derivation Function from NIST SP 800-108 in Counter Mode
– DKM key is not used itself to decrypt Signing Certificate
– Used as initial input for HMAC-SHA256 Key Derivation (NIST SP 800-108)
§ Mostly, but not exactly, follows the standard (because standards are hard ;)
– Context is the Nonce decoded from blob
– Label is the OIDs of the encryption algorithms decoded from blob
– Outputs keys to use for AES encryption as well as SHA256 HMAC for verification of 
ciphertext
Key Derivation
47
©2019 FireEye
©2019 FireEye
§ Decrypts using Windows Crypto 
libraries
§ AES128 in CBC mode
– 16 byte key derived from the 
DKM key
– 16 byte IV decoded from the 
EncryptedPfx blob
§ Valid for 1 year!!
Key Decryption
48
©2019 FireEye
©2019 FireEye
49
Putting it all together
1. EncryptedPFX read from the 
configuration DB
2. ASN1 types and ciphertext 
parsed from the blob
3. DKM key read from AD
4. DKM key used for KDF to 
obtain AES key
5. Ciphertext from EncryptedPFX
is decrypted into a PKCS12 
object
6. Become an AD FS server –
sign our own security tokens
©2019 FireEye
©2019 FireEye
§ AD FS handles "strong authentication"
– MFA
– Certs
– Blood-oath
§ If we can issue security tokens, then we 
can just ignore these requirements
§ Relying Parties are blind to these 
requirements anyway, they just want a 
valid token
"But I have MFA so I'm good"
50
Tool Time
©2019 FireEye
©2019 FireEye
§ https://github.com/fireeye/ADFSDump
§ .NET Assembly to be run on an AD FS server
§ Must be run on AD FS server as the AD FS service account
§ Dumps information from the configuration database and AD needed to 
generate signed security tokens and become ADFS :)
– Encrypted PFX
– DKM group key
– Relying parties
– Issuance rules
ADFSDump
52
©2019 FireEye
©2019 FireEye
§ https://github.com/fireeye/ADFSpoof
§ Python program to be run offline
– Designed to be run using the data obtained from ADFSDump
§ Decrypts EncryptedPfx blob given a DKM key
§ Generates signed SAML tokens for arbitrary users that can be sent to a 
Relying Party
– Uses user-generated XML templates
– Each template requires specific parameters – the claims contained in the RP 
issuance rules
– Launching with Office 365, Dropbox, and extensible SAML 2.0 templates
ADFSpoof
53
©2019 FireEye
©2019 FireEye
54
Best Practices and Mitigations
©2019 FireEye
©2019 FireEye
§ Secure privileged access
–The AD FS server should be treated as a Tier 0 device (like a 
domain controller)
– Access should be restricted to only originate from privileged access workstations
§ Enabled advanced auditing on AD FS
– Check “success” and “failure” audit options in AD FS Management snap-in
– Enable “Audit Application Generated” events on the AD FS farm via GPO
Best Practices and Mitigations
56
Before everything goes awry
©2019 FireEye
©2019 FireEye
§ Make the AD FS Service account a gMSA
– Passwords managed by AD
§ High Security: Use a Hardware Security Module (HSM)
§ While we're at it: Extranet Smart Lockout for AD FS 2016
Best Practices and Mitigations
57
Before everything goes awry
©2019 FireEye
©2019 FireEye
§ Identity providers now are part of the incident response process
§ If you have good visibility and confidence attacker targeted AD FS:
– Reset signing key - carefully
– Compare claims rules/exceptions against baselines
– Verify core adapters are intact
§ If not – determine your risk rating and act appropriately
§ Vendor debug logs can be useful in AD FS cloning scenarios
– Not so much with modified adapters...
Responding Appropriately
58
FIN