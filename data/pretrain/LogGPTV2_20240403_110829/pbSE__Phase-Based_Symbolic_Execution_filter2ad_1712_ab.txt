(input of 
program)
ConExe & SymExe 
Phases Division
seedStates 
collection
BBV Gathering
Phases Selection
Trap Phase 
Identification
Phase-based 
Scheduling
Bug Detection
Testcase 
Generation
Bug Reports
Testcases
Fig. 3. Architecture of pbSE
Algorithm 1 Phase-Based Symbolic Execution Testing
Require: Seeds, T arget
1: Seeds : seeds selected using methods similar with fuzzing
2: T arget : the tested program which compiled in llvm
testing
bitcode
while (!Seeds.empty()) or (!T IM EOU T ) do
3: function PBSYMBOLICEXETESTING(Seeds, T arget)
4:
5:
6:
7:
8:
end while
9:
10: end function
seed = selectSeeds(seeds);
BBV s = CONCOLICEXE(seed);
phases = P haseAnalysis(BBV s);
PBSYMBEXE(phases)
to balance the execution time among different phases. The
following text describes our design details that address these
issues respectively, followed by a brief discussion of the
potential enhancement with multiple seed inputs.
1) Phase Dividing: The ﬁrst key step for pbSE is to
divide one execution into phases. We choose to use basic
block vector-based distribution analysis to achieve automatic
division of program phases. Similar approaches have been
applied in hardware simulation and performance analysis.
BBV Gathering: A basic block vector (BBV) maps the
program’s BBs onto a single dimensional array, and there is an
element in the array for each BB. Each element of array is a
count of how many times a given BB has been entered during
a certain interval. pbSE gathers the information of BBVs when
concolic execution is being performed.
Concolic execution maintains a concrete state and a sym-
bolic state. For every instruction, a concrete execution is
performed, which is followed immediately by a symbolic
execution. When the execution reaches a TerminatorInst
instruction, such as br or switch, the number of entries into
the BB containing the instruction will increase by one. And
it is done by the function trackBB(Algorithm 2, Line 17). In
concolic execution, BBV data are gathered and recorded once
after each interval. That is, the BBV data are recorded, and
the elements in the array are set to zero for next interval. If the
condition of this branch is symbolic, the symbolic execution
would fork at this point and keep record the forked states.
It is showed in at line 19-20 of algorithm 2. When concolic
execution is ﬁnished, pbSE will obtain a set of BBVs and
seedStates. This process is illustrated in Algorithm 2.
Phase Division: We use k-means algorithm to cluster BBVs
into phases(Algorithm 1, Line 7). Since what we are concerned
about is not the number of execution for each BB for a given
interval; instead, what really counts is the proportions of BB
execution. Every BBV has to be normalized.
In most cases the BBVs belonging to the same phase are
highly dispersed in terms of time intervals. However, our
purpose is to ﬁnd phases consisting of densely distributed
BBVs, because this distribution pattern is characteristic of trap
phases. The change of code coverage over time is a typical
reﬂection of trap phases. Code coverage usually increases with
deepening of paths; but as the execution falls into a loop,
it keeps repeating the same part of code, thus contributing
nothing to the increase of code coverage.
Therefore, we add a new element to the array of BBV,
that is, the code coverage at the moment when BBV is being
gathered. Phase division in pbSE is made on the basis of the
new BBVs with an element of code coverage added.
According to the above analysis, if in a series of continuous
time intervals the same part of code is being repeatedly
137
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 2 Concolic Execution in pbSE
1: function CONCOLICEXE(seed)
2:
3:
4:
5:
6:
conExecutor.init(seed);
symExecutor.init(seed);
pc = M ainEntry;
while true do
T erminatorInst then
if pc.instT ype! = EXIT and pc.instT ype! =
nextP C = conExecutor.exec(pc);
symExecutor.exec(pc);
pc = nextP C;
continue;
end if
if pc.instT ype == EXIT or isF indBug() then
trackBB(pc.getP arent());
break;
end if
if pc.instT ype == T erminatorInst then
trackBB(pc.getP arent());
nextP C = conExecutor.exec(pc);
if isF orkable() then
symExecutor.addSeedStates(pc.cond);
symExecutor.addSeedStates(!(pc.cond);
end if
symExecutor.transf erT oP C(nextP C);
pc = nextP C;
continue;
end if
if timeElapse()%timeInterval == 0 then
logT oBBV s(BBV s);
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
end if
end while
return BBV s
31: end function
executed, it means a trap phase has been identiﬁed. Therefore,
a phase consisting of N continuous BBVs is identiﬁed as a
trap phase, and the value of N can be customized. In pbSE,
we empirically set N to 0.05 of the total number of BBVs in
one execution.
When k-means is used to cluster phases, we try different
values of k(from 1 to 20) to ﬁnd the ﬁttest value. That is,
we choose the k value which can cluster the greatest number
of trap phases, because the more traps phases identiﬁed, the
better symbolic execution will be performed. When two or
more values of k produce the same number of trap phases, we
choose the smallest one.
Here it should be noted that a phase consists of several
similar or identical BBVs; and each BBV is gathered within a
speciﬁc time interval. Therefore, the BBVs of the same phase
can be distributed in different intervals; or a phase may consist
of many different intervals.
2) Pass through a phase: Generally, before symbolic exe-
cution can travel to a certain phase, it has to pass prior phases
before this one. Considering the characteristics of symbolic
i = 0;
while phases.size() > 0 and !T IM EOU T do
i + +;
phaseN um = i%phases.size();
turnN um = i/phases.size() + 1;
states = &phases[phaseN um].states;
if states.size() == 0 then
Algorithm 3 Symbolic Execution in pbSE
1: function PBSYMBEXE(phases)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
end if
while states.size() > 0 do
phases.erease(phaseN um);
ExecutionState es = selectState();
es.executeInstruction();
updateStates(es);
if elapsedT ime > turnN um ∗ T imeP eriod
and !isCoverN ewInst() then
break;
16:
17:
18:
end while
19:
20: end function
end if
end while
execution, we introduce a lazy pass through.
Phases in pbSE are derived from concolic execution, which
involves both concrete execution and symbolic execution.
More speciﬁcally, the symbolic execution here only includes
gathering path constraints and recording fork points.
In pbSE,
the path of concolic execution is called as a
seedPath. In addition, pbSE records new states at each fork
point (Algorithm 2, Line 20-21), and we call them seedStates.
The states mentioned here are the same as those in KLEE[3].
In our method, on the basis of the time when seedStates are
forked, we map them to different phases. Therefore, symbolic
execution performed to different phases can be transformed
into one performed to the mapped seedStates. We only need
seedStates as initial states to perform symbolic execution.
Because seedStates contain the path information before they
are forked in concolic execution. In this way, the phases before
the forking point are passed through without any extra work.
3) Phase-based Scheduling: According to above analysis,
in pbSE symbolic execution can be performed with seedStates
in each phase as initial states. The pbSE scheduling needs to
address these two issues: a) how to select seedState within a
phase, b) when pbSE scheduler should consider moving to a
new phase.
In order to enhance code coverage in symbolic execution,
and to avoid repeating the same test in one phase, pbSE ana-
lyzes and selects the seedStates of a trap phase, mainly based
on the location and type of the forking point. For seedStates
which have the same forking point, we only keep the earliest
seedState. What is more, pbSE adopts a schedule strategy to
perform symbolic execution in turn for each phase, as shown
in Algorithm 3. When symbolic execution performed to one
phase no longer covers any new code in a certain period of
138
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:01:47 UTC from IEEE Xplore.  Restrictions apply. 
time, pbSE begins to test the next phase. When all phases have
been tested, pbSE will use a longer time period to perform
symbolic execution to these phases again, until all possible
execution paths have been covered, or the execution reaches
the time-limit set by the user.
The execution order of phases is based on the time when
the ﬁrst BBV of them is gathered. This is because generally
the path constraints of earlier phases are simpler than those of
latter ones, hence more suitable for symbolic execution.
4) Enhancing code coverage by seeds: The phase infor-
mation used by pbSE comes from concolic execution with
seed inputs. Clearly the ability to capture a program’s phase
information heavily depends on the selection of seed inputs,
and multiple seed inputs can likely generate better observation
about a program’s phase behavior. However, how to best use
multiple seed inputs in symbolic execution is a challenging
task, and the issue has attracted some research interests[25],
[36]. Our research focused on showing the beneﬁt of applying
program phase information on symbolic execution, and in this
work, we only consider the situation of a single seed input
when multiple seeds are available. The selection of the single
seed considers both the input length and the code coverage.
The evaluation used in this paper is based on the following
heuristic – when multiple seeds are available, we only consider
the smallest 10 seed inputs, and we pick the one with top
coverage among those 10. We expect to explore the better
ways to use multiple seed inputs in the near future.
IV. TEST AND EVALUATION
In this section, we use code coverage and bug detection to
evaluate the performance of pbSE.
A. Experiment Setup
Our phase-based symbolic execution system pbSE is built
on KLEE, mainly including concolic execution, phase dividing
and analysis, and phase-based symbolic execution schedule
algorithm. We implement concolic execution by maintaining
both concrete state and symbolic state based on KLEE, which
is different from the seeded symbolic execution in KLEE[2].
We use pbSE to test several commonly used ﬁle pars-
ing programs, including libtiff, libpng, readelf, and libdwarf.
libpng and libtiff are programs used to parse pictures; readelf
and libdwarf are used to parse executable binary ﬁles. All
the experiments were run on a server with Intel(R) Xeon(R)
CPU(12 cores, 2.0GHz). The operating system is Ubuntu
12.04.
B. Coverage Evaluation
In coverage evaluation we mainly compare the results
obtained by pbSE and those obtained by KLEE to analyze
the coverages.
In the ﬁrst experiment, we apply pbSE and KLEE to readelf
to perform evaluation of coverage. With KLEE, we perform
testing on readelf with several search strategies, including
DFS, BFS, random-path, random-state, covnew and md2u.
DFS and BFS searcher always select the latest or the earliest
execution state among all the states to explore next. Random-
state randomly selects a pending state to explore; Random-path
searcher maintains a binary tree recording the program path
followed for all active states, and selects states by traversing
the execution tree from the root and randomly picks a direction
when it encounters a branch until it reaches a leaf. Covnew
and md2u use heuristics to compute which state has better
chance to cover new code. Various factors are considered,
such as the minimum distance to an uncovered instruction.
The default searcher in KLEE employs random-path and
covnew interleavingly. Because different size of symbolic ﬁles
may result different code coverage when symbolic execution
performed. We respectively use 10, 100, 1000, 10000 bytes
as size of symbolic ﬁle in our tests. With pbSE, we choose a
seed randomly from our ubuntu linux system.
Table I gives the number of basic blocks covered by pbSE
and KLEE with different searchers. The ﬁrst column gives the
name of searchers used in experiment. The second and third
columns show number of covered basic blocks when using a
10 bytes symbolic ﬁle, the second column is the result at the
end of one hour, while the third column give the number at
the end of tenth hour. The fourth and ﬁfth columns show the
result when using a 100 bytes symbolic ﬁle. The sixth and
seventh, the eighth and ninth columns represent 1000 bytes
and 10000 bytes respectively. The last row in the table shows
the result of pbSE. In the last row, ‘c-time’ shows the time
cost of concolic execution step, ‘p-time’ show the time cost in
phase parsing step. ‘seed(576)’ represents that a seed whose
size is 576 bytes used in testing and ‘seed(7981)’ represents
the seed size is 7981 bytes.
BASIC BLOCKS COVERED BY PERFORMING SYMBOLIC EXECUTION WITH
TABLE I
DIFFERENT SEARCHERS
seacher
default
random-path
random-state
covnew
md2u
dfs
bfs
pbSE
seed(576)
seed(7981)
sym-10
1h
892
914
659
662
688
414
757
10h
914
916
659
662
688
876
853
c-time
3.7s
407s
sym-100
1h
976
1162
604
604
687
414
687
10h
1079
1205
621
604
687
1231
687
p-time
0.2s
2.5s
sym-1000
10h
1h
1077
996