Let qchall be a challenge query, let message(qchall) be the control
message generated during qchall, and let IDchall be that message’s
sender. By assumption, the conclusion of dom-safe holds for qchall.
Let qdom be the update, remove, or create query guaranteed by
dom-safe, and likewise define message(qdom) and IDdom.
Informally, our argument is that the seed secret of message(qdom)
is unknown to the adversary, hence can be replaced with a ran-
dom value independent of all other information available to the
adversary. Also, the challenged update secret (i.e., the update se-
cret of message(qchall)) incorporates this seed secret in a way that
preserves confidentiality.
To formalize this argument, we start by considering the path of
HKDF applications leading from the seed secret of qdom to the chal-
lenged update secret. First suppose IDchall was an intended recipi-
ent of message(qdom), i.e., should-decrypt(message(qdom), IDchall).
Then the seed secret of qdom was first used to derive a mem-
ber secret for IDchall. This member secret was input into (each
group member’s copy of) IDchall’s KDF ratchet. That KDF ratchet
may have received other inputs, until eventually, one of its output
updateSecret’s was used as the challenged update secret.5
More generally, it is possible that IDchall was not an intended re-
cipient of message(qdom), instead being added to the group causally
afterwards. In this case, there is a user ID1 that was an intended re-
cipient of message(qdom), such that causally after message(qdom),
ID1 added a user ID2, who added a user ID3, etc., through IDa =
IDchall for some a ≥ 1. Then the (group members’ copies of the) KDF
ratchet of ID2 was initialized using an updateSecret output by ID1’s
KDF ratchet (see lines 2 and 4 of add and line 4 of process-welcome),
sometime after ID1’s KDF ratchet input their member secret from
message(qdom). The KDF ratchet of ID3 was likewise initialized
5Each of the HKDF applications in update-ratchet has two inputs and two outputs.
For the purpose of defining the path, we only consider one input and one output.
Specifically, we only consider the input that is a function of message(qdom)’s seed
secret, and the output that the challenged update secret is a function of (there is always
exactly one such input and output).
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2043using an updateSecret output by ID2’s KDF ratchet, etc., through
IDa = IDchall. Finally, IDchall’s KDF ratchet possibly received some
other inputs, eventually outputting the challenged update secret as
some updateSecret.
Having described the path of HKDF applications leading from
the seed secret of qdom to the challenged update secret, we now
0.1, we
step through two hybrid games. In the first hybrid game H
replace all 2SM plaintexts that are values on this HKDF path, with
random values of the same lengths. Next, we note that the HKDF
path can be thought of as one path in a tree of HKDF applications,
with the seed secret of qdom at the root, and with one node for each
value that is a function of the seed secret.6 We step from H
0.1 to H
1
by replacing all values at siblings of path nodes, plus the challenged
update secret, with random values of the same lengths.
from H
0, and H
1 from H
It remains to bound the adversary’s ability to distinguish H
Let ID1, . . . , IDa = IDchall be as above. By following the path
described above and considering which values are sent in 2SM
0.1, the plaintexts of the following
messages, one checks that in H
2SM messages have been replaced:
0.1.
0.1
• All direct messages for message(qdom). Indeed, these mes-
sages have the seed secret of qdom as plaintext, and that is
the first value on the path.
• All direct messages for ID1’s ack of message(qdom), if ID1 (cid:44)
IDdom. Indeed, such messages contain ID1’s member secret
for message(qdom), and that is the second value on the path.
• For each 1 ≤ b ≤ a, all direct messages sent along with
add and add-ack messages sent by IDb between the times of
qdom and the addition of IDb+1 (or qchall, if b = a), inclusive.
Indeed, these messages contain a copy of IDb’s ratchet state
(line 2 of process-add) that appears on the path. Note that
this includes, for each 1 ≤ b < a, the direct message sent
from IDb to IDb+1 as part of the add message for IDb+1.
We claim that by the security of our 2SM protocol, the adver-
sary’s advantage in distinguishing H
ϵ2sm,
2 upper bounds the number of 2SM channels and q
noting that n
upper bounds the number of queries to each 2SM channel. To prove
this, observe that if A could distinguish between one of the 2SM
channels’ altered and original transcripts, then we could make an
adversary that wins the 2SM security game, as follows:
0 is at most n
0.1 from H
2
• The 2SM adversary internally simulates a DCGKA game to
A, with the exception of function calls involving the affected
2SM protocol.
• Whenever the simulated DCGKA game calls 2SM-Send on
an unaltered message for the altered 2SM protocol, the 2SM
adversary instructs the corresponding 2SM player to send
that message, and it uses the resulting ciphertext in the sim-
ulation.
• Whenever the simulated DCGKA game calls 2SM-Send on
0.1, the 2SM adversary calls
a message that is altered in H
challenge for that party, inputting the original and altered
6For the HKDF applications in update-ratchet, which have two outputs, we make
separate child nodes in the tree for the two outputs. They are both children of the
node corresponding to whichever of the two inputs depends on message(qdom)’s seed
secret (there is always exactly one such input, hence why this is a tree, not a DAG).
plaintexts. It uses the resulting ciphertext in the DCGKA
simulation.
• Whenever the simulated DCGKA game calls 2SM-Receive
for the altered 2SM protocol, the 2SM adversary calls deliver
for the corresponding party, and also uses the original plain-
text in the simulated game.
• Whenever the simulated DCGKA game calls compromise
on one of the two affected parties, the 2SM adversary calls
compromise for the corresponding party. It uses the returned
state as the corresponding entry in the compromised party’s
γ .2sm.
0, or H
Depending on the value of the bit b in the 2SM game, the simulated
0 with a single 2SM
DCGKA game corresponds to either H
channel altered, so long as we can prove that the safety predicate
2SM-safe is satisfied. Assuming safety for now, it follows that the
DCGKA adversary’s advantage in distinguishing the single altered
2 times,
channel is at most ϵ2sm. Repeating this argument at most n
0.1.
0 to H
once for each altered 2SM channel, takes us from H
We now prove that 2SM-safe is satisfied at the end of the 2SM
security game played as above. We need to prove that for each chal-
and compromise q′
lenge q′
of opposite parties in the 2SM game, ei-
j
i
ther message(q′
, or the compromise
was healed causally before q′
. Let qi and qj denote the correspond-
ing queries in the DCGKA game. We have qj = compromise(ID′)
i
for some ID′. For qi, there are three cases, corresponding to the
three types of altered messages.
i) was delivered by the time of q′
j
Case 1: qi = qdom.
j
i), was delivered by the time of q′
Case 2: qi = deliver(message(qdom), ID1) and message(q′
In this case, ID′ must be an intended recipient of message(
qdom) besides IDdom, since create, update, and remove each
pass that set to generate-seed. Here we use the correct-
ness of member-view(γ , γ .myId) from Claim 2 in the proof
of Lemma 8. Thus the third case in dom-safe cannot hold.
The first case in dom-safe guarantees that message(qdom),
hence message(q′
, since
message(qdom) ⪯ack message(qchall). The second case guar-
antees that the compromise was healed causally before q′
.
i
i) is a
direct message for the resulting ack.
Such direct messages only arise from lines 16–19 of process-
seed, which forward ID1’s member secret from message(
qdom) to group members who were not intended recipients
of message(qdom). In particular, the recipient of message(q′
i)
must have been added concurrently to message(qdom) but
prior to qchall, again ruling out the third case in dom-safe.
We can then proceed as in Case 1 above. Note that this ack
message must be ⪯ack message(qchall)—in particular, in this
case, we cannot have qchall = qdom, since IDchall (cid:44) ID1.
Case 3: qi is an add-user query, or a deliver query resulting in an
add-ack message, with sender IDb for some 1 ≤ b ≤ a, between
the times of qdom and the addition of IDb+1 (or qchall, if b = a),
inclusive, and message(q′
i) is the corresponding direct message
to the added user.
We obviously have message(qdom) ≺ack message(qi) ⪯ack
message(qchall). Thus the second and third cases in dom-safe
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2044cannot hold. Meanwhile, the first case in dom-safe guaran-
tees that message(qi), hence message(q′
i), was delivered by
the time of q′
j
.
0.1.
Claim: In H
0 to H
This completes the hybrid step from H
1 from
It remains to bound the adversary’s ability to distinguish H
0.1. Recall that H
0.1, except that we replace
1 is the same as H
H
all values at siblings of the path from message(qdom)’s seed secret
to the challenged secret, plus the challenged update secret, with
random values of the same lengths.
0.1, with the exception of qchall’s return value, all in-
formation known to the adversary that depends on message(qdom)’s
seed secret only depends on the values at siblings of path nodes
in the HKDF tree. Formally, all random variables revealed to the
adversary, with the exception of qchall’s return value, can be writ-
ten as deterministic functions of the values at siblings of path
nodes in the HKDF tree together with a single value independent
of message(qdom)’s seed secret (encompassing all other random
values used in the protocol).
We prove this claim below. Given this claim, the adversary’s
0.1 is at most their advantage
1 from H
advantage in distinguishing H
in distinguishing between:
(i) A set of values sampled by choosing a random s and putting
that s through the same series of HKDF applications used
to compute the replaced values from message(qdom)’s seed
secret.
(ii) A set of independent random values of the same lengths as
the above values.
form H
Since we model HKDF as a random oracle and none of the replaced
values are ancestors of each other in the tree, the adversary can
only distinguish between these distributions by inverting an HKDF
application, or if there is an input collision. Note that the total
number of HKDF applications used in (i) is at most qn, s and all of
the HKDF outputs are at least λ bits long, and all HKDF applications
have distinct inputs barring collisions between λ bit values. Thus
the adversary’s probability of inverting an HKDF application is at
most qnt2−λ, and the probability of an input collision is at most
1
2(cid:1)2−λ. In total, the adversary’s advantage in distinguishing H
(cid:0)qn
0.1 is at most qnt2−λ +(cid:0)qn
2(cid:1)2−λ, proving the theorem.
Proof of claim. We consider all information available to the adver-
sary. When we say that a value is “independent of the seed secret”,
we formally mean that the random variables corresponding to all
such values are jointly independent of message(qdom)’s seed secret.
Except for 2SM protocol messages and states, one easily checks
that all values appearing in the DCGKA protocol (messages, state,
and outputs) that depend on message(qdom)’s seed secret are de-
rived through a series of HKDF applications. Thus all such values
appear in the HKDF tree described above. The last value in the path,
namely, the challenged update secret, is at a leaf node, since that
update secret is not used except to be returned as an update secret.
Thus all values in the tree not on the path must be deterministic
functions of the values at siblings of path nodes in the HKDF tree
and values independent of the seed secret.
Then to prove the claim, it suffices to prove that none of the val-
ues on path are available to the adversary (i.e., no random variables
available to the adversary are defined to equal a random variable
on the path), and that 2SM protocol messages and states satisfy the
0.1, all 2SM plaintexts on the
claim. The latter holds because in H
path have been replaced with random values, so all 2SM plaintexts
satisfy the claim, from which obviously all 2SM messages and states
do as well.
To prove that none of the values on path are available to the
adversary, we consider all values available to the adversary.
Messages All direct portions of DCGKA messages are 2SM mes-
sages. All broadcast portions of DCGKA messages are public
metadata. Neither of these include values on the path, or
indeed, in the HKDF tree at all.
Return values of compromise queries We already discussed 2SM
states. It remains to consider the state variables γ .nextSeed,
γ .memberSecret, and γ .ratchet revealed by compromise
queries.
There are three kinds of compromises allowed by dom-safe,
corresponding to the three cases in the disjunction. The first
case is that the compromised user had message(qchall) in
their history at the time of the compromise. One checks
that in every instance where a value on the path is used
to derive a new value, the original value is deleted immedi-
ately. Also, when the challenged update secret is returned,
it is deleted immediately. Thus a user who has previously
returned the challenged update secret must have no path
values in their state. Additionally, if a user ID who was not
an intended recipient of message(qchall) has the message in
their history, then IDchall must have received the add mes-
sage for ID after sending message(qchall), so IDchall did not
forward any ratchet states on the path to ID (and likewise
for ID1, . . . , IDa−1). In either case, the compromised state
satisfies the claim.
The second case is that the compromise was followed by an
update ⪯ack message(qdom). In particular, the compromised
user did not have message(qdom) in their history. Then their
state cannot possibly contain any path secrets.
The third case is that the compromised user was not an
intended recipient of message(qdom), and they were also not
added to the group by a message m satisfying
message(qdom) ⊁ack m ⪯ack message(qchall).
It follows that they are not IDdom, the generator of the seed
secret; and one checks that they cannot have been forwarded
any values on the path by other users (cf. the three cases
in the 2SM-safe verification above). Hence their state never
contained any path secrets.
Return values of reveal queries and other challenge queries
The challenged variable in the security game ensures that
the challenged update secret is never revealed. None of the
other path secrets are update secrets.
□
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2045