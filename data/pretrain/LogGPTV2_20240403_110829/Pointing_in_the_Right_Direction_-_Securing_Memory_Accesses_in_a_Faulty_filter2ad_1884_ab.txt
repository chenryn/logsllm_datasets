constant, which limits the general-purpose application of this code
in real-world applications. Furthermore, this type of code does not
protect the address in a memory access.
Forin and Schiffel et al. [10, 28] extend AN-codes by assigning a
variable dependent signature Bx to each encoded variable xc. This
yields the encoding formula xc = A·x + Bx with Bx < A. By adding
the variable dependent signature Bx to the AN-code, the AN-code
property that all encoded values are a multiple of A is intentionally
destroyed. Since Bx is less than A, decoding works the same as
for normal AN-codes using an integer division. A check is also
performed using a modulo operation with the encoding constant,
which now must yield the signature Bx . A compiler keeps track of
all assigned signatures and is able to insert checks for the modified
ANB code words. By assigning a variable-dependent signature to
the code words, a wrong memory access can be detected, as long
as signatures do not cancel out due to arithmetic. However, this
approach turns out to be complicated in practice. On the one hand,
ANB-codes have a performance penalty of 90 % on average on top
of AN-codes. On the other hand, the value of the signature Bx needs
to be less than the encoding constant which limits the number of
variables to be encoded.
2.2.2 Residue Codes. A different class of arithmetic codes are
residue codes [19]. Here, a residue code word xc is defined by the
tuple xc = (x, rx = M|x), where x denotes the functional value and
rx the residue. The residue rx is hereby computed as the remainder
M|x with respect to the code modulus M. Residue codes separate
the redundancy part from the functional value x and therefore
are called separable codes. Although the modulus M defines the
robustness of the code, ordinary residue codes only guarantee the
detection of a single bit flip, because a single bit flip on the data and
on the residue is enough to construct a new, valid code word (e.g.,
the Hamming distance between the 0c and 1c is two, where both
values denote a residue encoding with an arbitrary modulus M).
In order to overcome this limitation and to scale the robustness of
the code, the redundancy part can be increased by using more than
one residue [25, 26], yielding a multi-residue code. The modulus
M is now defined by M = {m0, . . . , mn}, where n is the number of
residues.
Finding the set of moduli is not easy. Although finding good
moduli requires exhaustive search [21], the moduli selection for
multi-residue codes can be done faster than for AN-codes. Residue
codes, in general, are arithmetic codes and therefore also support
certain arithmetic operations. Here, the operation is performed on
the functional part and on the residues independently. Equation 1
shows how an addition works for two multi-residue encoded val-
ues. The addition is performed on the functional value and on the
residues independently. On the residues, the addition is performed
followed by a modular reduction using on the moduli mi for the
ith residue.
zc = xc + yc =(cid:0)x + y,∀i : mi|(cid:0)ri,x + ri,y
(cid:1)(cid:1)
(1)
Similar to the addition, residue codes also support subtractions
and multiplications. However, in this work, we only use additions
and subtractions.
2.3 ARM Pointer Authentication
Protecting pointers against tampering is not only relevant in the
context of fault attacks but is also used to counteract software
p = 0x1001p = 0x1003p = 0x1001falsectruectruec0x10000x1005ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Robert Schilling, Mario Werner, Pascal Nasahl, and Stefan Mangard
attacks. For example, ARM added a feature called pointer authenti-
cation (PAC) [24] to the ARM v8.3 instruction set with the goal of
protecting special pointers. Several new instructions were added
to the architecture that permits to cryptographically authenticate
special pointer values in registers, like the return address in the
link register, using a message authentication code (MAC). PAC
tags have a size between 3 and 31 bits, depending on the processor
configuration, and are, as in our work, directly embedded into the
protected pointer.
Note, however, that even though the general approach is similar
to our work, the provided capabilities and the resulting protec-
tion is vastly different. PAC aims to only protect special pointers
against software attacks. In PAC, authenticated pointers cannot be
be protected during pointer arithmetic since there is no homomor-
phism for the MAC. Furthermore, PAC only aims to protect the
pointer. The memory access, which uses an authenticated pointer
is completely unprotected and there are no protection mechanisms
to ensure that the accessed memory actually originates from the
correct address.
3 POINTER PROTECTION WITH RESIDUE
CODES
Manipulation of a memory access is possible by attacking two
different parts of the access. The first one is the pointer itself, which
is used to perform the memory access. This section details how
we use multi-residue codes to protect every data pointer inside
a program against fault attacks. Furthermore, we present how to
integrate the multi-residue code into our pointer representation
and elaborate on the additionally needed hardware support.
3.1 Overview
Pointers are ubiquitous. Every memory access, e.g., accessing a vari-
able on the stack, uses a pointer to address the memory. However,
when considering fault attacks, pointers may be manipulated to
point to a different memory location.
To counteract this threat, we encode all pointers to a redundant
representation, where faults are detectable. As presented previously,
there are two classes of suitable codes: separable and non-separable
codes, which have similar properties in terms of error detection
capabilities and support for computation. However, a separable
code has advantages to protect a pointer. Namely, it supports direct
access to the functional value and can therefore immediately be used
to address memory. On the other hand, using a non-separable code
to protect the pointer requires to perform a potentially expensive
decoding operation before the actual address is available. AN-codes,
as an example for non-separable codes, require a costly integer
division during the decoding operation. Hence, this division would
be required for every memory access.
We encode pointers using a separable multi-residue code with a
scalable number of moduli. Here, an encoded pointer pc is denoted
as a tuple (p, rp), where p is the original value of the pointer and rp
denotes the redundancy part comprising the residues of p given a
moduli set M. Using a multi-residue code to protect the pointer gives
two advantages. On the one hand, the strength of the code, i.e., the
number of bit flips which are detectable, is scalable with the number
of residues. On the other hand, residue codes are arithmetic codes
and therefore also support arithmetic instructions, like addition and
subtraction, natively. This allows us to perform pointer arithmetic,
for example, the stack pointer manipulation in function prologues
and epilogues, directly inside the encoded domain without decoding
the pointer.
3.2 Pointer Layout and Residue-Code Selection
Adding separable redundancy to data implies that the additional
information needs to be stored somewhere in order to provide a
value. In the context of protecting a processor register, various
possibilities exist to provide this storage.
For example, an additional parallel register file can be added
to the processor, which only holds the redundancy part and gets
updated in lockstep with the actual values [20]. However, this ap-
proach is quite costly for our use case considering that only a small
number of registers typically hold pointers at a certain point in time.
Alternatively, pairs of regular registers can be used to store the data
and its redundancy. Unfortunately, doing so increases the register
pressure and lowers the overall performance. Moreover, without
adding costly access ports to the register file, multiple instructions
have to be performed on every pointer operation, even for simple
ones like an increment. Finally, at least for modern RISC instruction
set architectures (ISA) [34], adding additional operands into the
instruction encoding is difficult without increasing the instruction
size.
In this work, we therefore went with a different approach and
stored the redundancy information directly into the upper bits of
the pointer. Similar to PAC, i.e., ARM’s pointer authentication fea-
ture, this approach introduces zero overhead in terms of storage
for the redundancy at the cost of some bits of address space. Ad-
ditionally, this dense representation of an encoded pointer allows
us to add new combined residue arithmetic instructions, which
operate on the functional value and on the residues in parallel,
rather than requiring separate instructions to handle both. By stor-
ing the redundant pointer in one register, we can, therefore, use
the same instruction format as regular instructions and do not re-
quire extensive modifications of the ISA or hardware to maintain
performance.
Considering that the directly accessible address space is limited,
embedding the residues into the pointer works best for modern
64-bit architectures. Therefore, the following design considerations
as well as our prototype, that is presented in Section 5, is built upon
such an architecture. The overall concept can still be applied to
32-bit architectures with reduced error detection capabilities or via
a different storage option.
Parameter Selection. When selecting the parameters of an error
detecting code, it is always a trade-off between error detection ca-
pabilities and the overhead introduced by the code. However, since
the functional value including the redundancy is stored in a single
register, also the remaining address space has to be considered. For
our prototype, we focus on a 64-bit architecture and partition our
pointers into 24-bit redundancy and a 40-bit functional value. The
resulting pointers can still address one terabyte of memory, which
is sufficient for most applications.
As a concrete code, we instantiate a multi-residue code with the
moduli set M = {5, 7, 17, 31, 127}, which is an extension to the one
Pointing in the Right Direction - Securing Memory Accesses in a Faulty World
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
63
r4,p
55
r3,p
43
46
51
r2,p r1,p r0,p
40 39
O
M
M
I
0
p
Figure 2: Encoded pointer representation. The actual 40-bit
pointer value p, the MMIO tag bit, and 23 bits of redundancy
rp comprise an encoded 64-bit pointer.
presented in [20]. This moduli set yields a code with a Hamming
distance of D = 5 and is capable of detecting up to four bit flips
in the encoded 64-bit pointer value. Storing the residues for these
moduli requires a total of 23 bits, i.e, 3, 3, 5, 5, 7 bits, respectively.
The last remaining bit is used as a tag bit and specifies if data
accessed via the pointer have to perform data linking/unlinking as
presented later in Section 4.3. The resulting register layout of such
an encoded pointer is shown in Figure 2.
3.3 Pointer Operations
Pointers are not only used to perform a memory access but also
are used to perform pointer arithmetic. To maintain good perfor-
mance, it is therefore vital that the encoded pointers support these
computations as efficiently as possible. Notably, as the term pointer
arithmetic already hints, arithmetic computations, like addition and
subtraction, are the most common operations that are performed on
pointers. For example, accessing larger sequential memory chunks
via a pointer involves a large number of additions between the
pointer and the access stride in a loop. Similarly, next to every func-
tion call, the respective stack frame size is added and subtracted
to/from the stack pointer in the function’s prologue and epilogue.
Precisely these types of operations are natively supported by the
used multi-residue code and can therefore be performed in the
encoded domain.
On the other hand, more work is required for operations that
are not directly supported by the multi-residue code. The simplest
approach is probably to perform the operation on the plain func-
tional value only and restore the encoding afterward. To ensure the
correctness of the computation, then additional measures like repli-
cation have to be used. Alternatively, such operations can be per-
formed by first converting the pointer to a different code, in which
the computations are straightforward, followed by converting the
differently encoded result back into multi-residue representation.
Still, such operations comprise only a very small number of pointer
operations compared to arithmetic operations.
Software vs. Hardware. In a multi-residue code, the addition op-
eration is performed on the functional value and on all its residues.
This operation can be executed in hardware or software. However,
performing this operation in software is challenging, as it involves
a modulo reduction for each residue.
Looking only at a single modulo, there exist several options for
implementing the reduction in software: First, a normal modulo
instruction from the ISA can be used. Although such an instruction
does not have much code overhead, a modulo operation involves a
costly integer division which usually takes multiple clock cycles
to finish. Second, instead of a modulo operation, a conditional
subtraction can be used for the modular reduction. Third, there are
optimized modulo algorithms available [15], but their overhead is
still large. A single modular addition with an optimized reduction
with the modulus five takes at least 18 instructions on our RISC-V
target architecture.
Considering that the runtime of these solutions additionally has
to be multiplied with the number of used residues makes a software
solution even less attractive. Furthermore, even if the performance
penalty is acceptable, additional registers have to be reserved for
implementing the reduction functionality. Summarizing, a software-
based approach to perform residue operations, while feasible, is not
very practical. Therefore, hardware based approaches to implement
the residue operations have been investigated.
In particular, in our prototype, we add new instructions that per-
mit to perform addition and subtraction of multi-residue encoded
pointers. Section 5.1 discusses the new instructions in detail with
the focus on the target architecture. Furthermore, an instruction
for performing the expensive encoding operation is added, which
computes the modulus for each residue. For convenience reasons,
also a dedicated decoding operation is added to the ISA.
4 EVOLVED MEMORY ACCESS PROTECTION
Apart from faulting the pointer, the second source to manipulate
a memory access is the memory operation itself. If the attacker is
able to induce faults on the address bus, the memory access can
be redirected to a different location. In this section, we present a
method to link the data with its respective address, where address-
ing errors are transformed into data errors which can subsequently
be detected using a data-protection scheme.
4.1 Overview
In order to be able to detect address tampering, a way to uniquely
identify incorrectly accessed memory is needed. A common ap-
proach to establish this link between the data and the address is
augmenting the data-protection scheme, which is anyway needed
to protect the data against faults.
For example, ANB-codes embed the identity of the variable, in
the form of a unique residue Bx , into a required underlying AN-code
based data encoding. However, this approach has several drawbacks.
For example, working on variable granularity requires concise data-
flow information, which is in real-world applications hard to acquire
for arbitrary memory operations, and limits the applicability of
the approach. Furthermore, maintaining these identities during
calculation is quite costly. Finally, the approach is strongly linked
with AN-codes and cannot easily be applied to other data-protection
schemes.
Our scheme, takes an entirely different approach to prevent
address tampering. Instead of constructively embedding the address
of the data into the data-protection code, our scheme destructively
overlays data that is written to the memory with the respective
memory address. As a result, addressing errors are transformed into
data errors that get detectable as soon as the overlay is removed
again.
In more detail, before data is written from a register to the mem-
ory bus by the processor, the data gets encoded with respect to
the target address. Conceptually, this kind of linking is similar to
encrypting the data in an address dependent way. However, since