Moniker去加载远程html文件，这样就可以借助office加载IE漏洞。攻击者首先用URL
Moniker+CVE-2014-6332的组合试了一下该方案的可行性，笔者追溯到的这方面的最早样本为2018年1月17日的下面这个文件（以及相关文件）：
    // CVE-2014-6332
    Document MD5: A9D3F7A1ACD624DE705CF27EC699B6B6
    URL Moniker: hxxp://s.dropcanvas[.]com/1000000/940000/939574/akw.html
    akw.html MD5: C40A128AE7AEFFA3C1720A516A99BBDF
到了2018年4月，攻击者终于按捺不住了，借助URL Moniker+IE VBScript
0day的方式对特定目标进行了攻击，这次攻击所用漏洞就是著名的CVE-2018-8174，相关样本如下：
    // CVE-2018-8174
    Document MD5: b48ddad351dd16e4b24f3909c53c8901
    URL Moniker: hxxp://autosoundcheckers[.]com/s2/search[.]php?who=7
    search.htm MD5: 15eafc24416cbf4cfe323e9c271e71e7
CVE-2018-8174出现后，微软安全团队并未直接将office加载VBScript脚本的功能进行限制。随后，在2018年7月，攻击者又借助另一个IE
VBScript 0day（CVE-2018-8173），用相同的方式实施了攻击。
这下微软不淡定了，赶紧对Office加载VBScript脚本进行了限制。
###  第五回合：CVE-2020-0674
故事到这里就结束了吗？当然没有。此时，微软依然没有限制office加载JavaScript脚本，所以IE浏览器的两个JavaScript引擎：JScript和JScript9依然可以通过此种方式进行攻击。
其一，据笔者所知，在2018年的天府杯上，针对office项目的攻击采用了URL Moniker + IE JScript9 0day的组合。
其二，2019年-2020年，由于几个JScript漏洞被相继披露，陆续有APT攻击组织使用URL Moniker + JScript
1day的方式实施攻击，相关样本如下：
    // CVE-2020-0674
    Document MD5: 90403dfafa3c573c49aa52c5fe511169
    URL Moniker: hxxp://tsinghua.gov-mil[.]cn/images/A96961AA/36604/1836/65449576/ab8feee
    ab8feee MD5: 1892D293030E81D0D1D777CB79A0FDBE
    // CVE-2020-0968
    Document MD5: 60981545a5007e5c28c8275d5f51d8f0
    URL Moniker: hxxp://94.156.174[.]7/up/a1a.htm
    a1a.htm MD5: 293916af3a30b3d7a0dc2949115859a6
于是微软在高版本office中（office2016及以上版本）也加入了对JScript9脚本和JScript脚本的加载限制。
至此，攻击者针对Moniker的所有尝试都被微软进行了封堵，此后未观察到针对Moniker的新攻击方式。
## 公式编辑器漏洞
2017年11月补丁日，国外安全公司_embedi发表了一篇《SKELETON IN THE CLOSET: MS Office vulnerability
you didn’t know
about》详细描述了他们发现office公式编辑器漏洞CVE-2017-11882的整个过程（笔者发现这家公司的官网已经挂了…）。
属于office公式编辑器漏洞的时代至此开启。
由于组件源码的丢失，微软的补丁开发人员花了较长时间来修复这一漏洞，并且以一种近乎炫技的方式，直接在二进制层面对程序作了修补，在没有重新编译源码的情况下修复了漏洞，并添加了ASLR支持。
然而，一时激起千层浪，CVE-2017-11882出现后，广大安全研究员蜂拥而至，都开始关注office公式编辑器这一组件，这直接导致微软在2018年1月的更新中砍掉了公式编辑器组件。
在第二次修复的诸多office公式编辑器漏洞中，有两个漏洞比较值得注意，这两个漏洞分别为CVE-2018-0802和CVE-2018-0798，三个漏洞并称为office公式编辑器漏洞领域的“三驾马车”，
由于笔者经常看到分析人员对这三个漏洞的样本进行误判，所以这里分享一种在动态层面区分这三个漏洞的方法。
首先跟随笔者来了解一下这三个漏洞的具体成因，下文中的汇编代码基于以下公式编辑器组件：
    eqnedt32.exe 2000.11.9.0
在office中，公式编辑器的数据被存储在一个OLE文件的“Equation Native”流中，三个公式编辑器漏洞都是在处理这个流的数据时出现的问题。
###  CVE-2017-11882
首先来看一下CVE-2017-11882。
该漏洞的成因为：在读入“Equation Native”流中的Font Name
Record数据时，在将Name拷贝到某个局部变量的时候没有对Name的长度做校验，从而造成栈缓冲区溢出，漏洞发生点如下图所示：
从下图可以看出，函数给SrcStr变量分配的大小是0x24个字节，Name长度超过该大小就会造成栈溢出。
CVE-2017-11882的触发逻辑如下所示：
###  CVE-2018-0802
再来看一下CVE-2018-0802。
该漏洞的成因为：在将“Equation Native”流中的Font Name
Record数据拷贝到一个LOGFONT结构体（位于栈上）内的lfFaceName成员（它是一个以空结尾的char型字符串，最大长度为0x20，其中包含终止符NULL），没有对Name的长度做校验，从而造成栈缓冲区溢出，漏洞发生点如下图所示：
CVE-2018-0802漏洞的触发路径和CVE-2017-11882有很大的重叠，下图可以做一个直观的比对：
由于某些限制，CVE-2018-0802在未打CVE-2017-11882补丁的版本上只会造成crash，但在打了补丁的版本上可以实现远程代码执行。
###  CVE-2018-0798
最后看一下CVE-2018-0798。
该漏洞的成因为：在读入“Equation Native”流中的Matrix
Record数据时，存在一处while循环内的数据读取操作，由于未对Matrix的行和列两个参数进行校验，从而使攻击者可以控制由此计算得到的拷贝长度，导致栈缓冲区溢出：
上述汇编片段描述了一个while循环，反汇编成伪代码如下，攻击者可以控制伪码中v2的大小，从而导致了数据读写越界：
上述代码位于sub_443F6C函数内，所以理论上只要调用sub_443F6C函数的地方均存在CVE-2018-0798漏洞。作为与之前两个漏洞的对比，在之前两个漏洞的基础上加入CVE-2018-0798的触发路径如下：
###  动态区分三个公式编辑器漏洞
以上笔者已经介绍了三个公式编辑器漏洞的成因，借助上述知识，很容易在调试器中确认特定样本使用的漏洞，判定方式如下：
    // CVE-2017-11882
    .text:00411655 C1 E9 02                shr     ecx, 2 // 获取此偏移处的ecx值，若ecx的值位于(0x20, 0x94]区间，即为CVE-2017-11882
    .text:00411658 F3 A5                   rep movsd
    .text:0041165A 8B C8                   mov     ecx, eax
    .text:0041165C 83 E1 03                and     ecx, 3
    // CVE-2018-0802
    .text:00421E5B C1 E9 02                shr     ecx, 2 // 获取此偏移处的ecx值，若ecx的值大于0x94，即为CVE-2018-0802
    .text:00421E5E F3 A5                   rep movsd
    .text:00421E60 8B C8                   mov     ecx, eax
    .text:00421E62 83 E1 03                and     ecx, 3
    .text:00421E65 F3 A4                   rep movsb
    // CVE-2018-0798
    .text:00443F79 8D 04 45 02 00 00 00    lea     eax, ds:2[eax*2]
    .text:00443F80 83 C0 07                add     eax, 7
    .text:00443F83 C1 F8 03                sar     eax, 3
    .text:00443F86 66 89 45 08             mov     [ebp+arg_0], ax // 获取此偏移处的eax值，若eax的值大于4，即为CVE-2018-0798
有些样本会同时满足上述两个或三个条件，因为这些样本中内嵌多个公式编辑器漏洞利用。
###  延伸
细心的读者会发现2020年极棒大赛上使用的某国产软件公式编辑器漏洞和CVE-2018-0798基本一样，有兴趣的读者可以自行对比研究。
## 参考链接