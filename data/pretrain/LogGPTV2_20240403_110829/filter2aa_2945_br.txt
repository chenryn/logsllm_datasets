       ...
       return queueItem;
    }
}
The type parameter T can be any legal C# identifier, although the lone
character T is commonly used. It is replaced with the type you specify when
you create a Queue object. The following examples create a Queue of ints
and a Queue of Horses:
Click here to view code image
Queue intQueue = new Queue();
Queue horseQueue = new Queue();
Additionally, the compiler now has enough information to perform strict
type checking when you build the application. You no longer need to cast
data when you call the Dequeue method, and the compiler can trap any type
mismatch errors early:
Click here to view code image
intQueue.Enqueue(99);
int myInt = intQueue.Dequeue(); // no casting necessary
Horse myHorse = intQueue.Dequeue(); // compiler error: cannot
implicitly convert type 'int'  to 'Horse'
You should be aware that this substitution of T for a specified type is not
simply a textual replacement mechanism. Instead, the compiler performs a
complete semantic substitution so that you can specify any valid type for T.
Here are more examples:
Click here to view code image
struct Person
{
Download from finelybook PI:EMAIL
573
    ...
}
...
Queue intQueue = new Queue();
Queue personQueue = new Queue();
The first example creates a queue of integers, whereas the second example
creates a queue of Person values. The compiler also generates the versions of
the Enqueue and Dequeue methods for each queue. For the intQueue queue,
these methods look like this:
public void Enqueue(int item);
public int Dequeue();
For the personQueue queue, these methods look like this:
Click here to view code image
public void Enqueue(Person item);
public Person Dequeue();
Contrast these definitions with those of the object-based version of the
Queue class shown in the preceding section. In the methods derived from the
generic class, the item parameter to Enqueue is passed as a value type that
does not require boxing. Similarly, the value returned by Dequeue is also a
value type that does not need to be unboxed. A similar set of methods is
generated for the other two queues.
Note The System.Collections.Generic namespace in the .NET
Framework class library provides an implementation to the Queue class
that operates similarly to the class just described. This namespace also
includes several other collection classes, and they are described in more
detail in Chapter 18, “Using collections.”
The type parameter does not have to be a simple class or value type. For
example, you can create a queue of queues of integers (if you should ever
find it necessary), like this:
Click here to view code image
Download from finelybook PI:EMAIL
574
Queue> queueQueue = new Queue>();
A generic class can have multiple type parameters. For example, the
generic Dictionary class defined in the System.Collections.Generic
namespace in the .NET Framework class library expects two type parameters:
one type for keys, and another for the values (this class is described in more
detail in Chapter 18).
Note You can also define generic structures and interfaces by using the
same type-parameter syntax as for generic classes.
Generics vs. generalized classes
It is important to be aware that a generic class that uses type parameters is
different from a generalized class designed to take parameters that can be cast
to different types. For example, the object-based version of the Queue class
shown earlier is a generalized class. There is a single implementation of this
class, and its methods take object parameters and return object types. You
can use this class with ints, strings, and many other types, but in each case,
you are using instances of the same class, and you have to cast the data you
are using to and from the object type.
Compare this with the Queue class. Each time you use this class with
a type parameter (such as Queue or Queue), you cause the
compiler to generate an entirely new class that happens to have functionality
defined by the generic class. This means that Queue is a completely
different type from Queue, but they both happen to have the same
behavior. You can think of a generic class as one that defines a template that
is then used by the compiler to generate new type-specific classes on demand.
The type-specific versions of a generic class (Queue, Queue,
and so on) are referred to as constructed types, and you should treat them as
distinctly different types (albeit ones that have a similar set of methods and
properties).
Download from finelybook PI:EMAIL
575
Generics and constraints
Occasionally, you will want to ensure that the type parameter used by a
generic class identifies a type that provides certain methods. For example, if
you are defining a PrintableCollection class, you might want to ensure that
all objects stored in the class have a Print method. You can specify this
condition by using a constraint.
By using a constraint, you can limit the type parameters of a generic class
to those that implement a particular set of interfaces and therefore provide the
methods defined by those interfaces. For example, if the IPrintable interface
defined the Print method, you could create the PrintableCollection class like
this:
Click here to view code image
public class PrintableCollection where T : IPrintable
When you build this class with a type parameter, the compiler checks to
be sure that the type used for T actually implements the IPrintable interface;
if it doesn’t, it stops with a compilation error.
Creating a generic class
The System.Collections.Generic namespace in the .NET Framework class
library contains some generic classes readily available for you. You can also
define your own generic classes, which is what you will do in this section.
Before you do this, let’s cover a bit of background theory.
The theory of binary trees
In the following exercises, you will define and use a class that represents a
binary tree.
A binary tree is a useful data structure that you can use for a variety of
operations, including sorting and searching through data very quickly.
Volumes have been written on the minutiae of binary trees, but it is not the
purpose of this book to cover this topic in detail. Instead, you’ll look at just
the pertinent facts. If you are interested in learning more, consult a book such
Download from finelybook PI:EMAIL
576
as The Art of Computer Programming, Volume 3: Sorting and Searching, 2nd
Edition by Donald E. Knuth (Addison-Wesley Professional, 1998). Despite
its age, this is the recognized, seminal work on sort and search algorithms.
A binary tree is a recursive (self-referencing) data structure that can be
empty or contain three elements: a datum, which is typically referred to as the
node, and two subtrees, which are themselves binary trees. The two subtrees
are conventionally called the left subtree and the right subtree because they
are typically depicted to the left and right of the node, respectively. Each left
subtree or right subtree is either empty or contains a node and other subtrees.
In theory, the whole structure can continue ad infinitum. The following image
shows the structure of a small binary tree.
The real power of binary trees becomes evident when you use them for
sorting data. If you start with an unordered sequence of objects of the same
type, you can construct an ordered binary tree and then walk through the tree
to visit each node in an ordered sequence. The algorithm for inserting an item
I into an ordered binary tree B is shown here:
Click here to view code image
If the tree, B, is empty
Then
  Construct a new tree B with the new item I as the node, and empty
left and
  right subtrees
Else
  Examine the value of the current node, N, of the tree, B
  If the value of N is greater than that of the new item, I
  Then
    If the left subtree of B is empty
    Then
      Construct a new left subtree of B with the item I as the node,
Download from finelybook PI:EMAIL
577
and
            empty left and right subtrees
    Else
      Insert I into the left subtree of B
    End If
  Else
    If the right subtree of B is empty
    Then
      Construct a new right subtree of B with the item I as the node,
and
        empty left and right subtrees
    Else
      Insert I into the right subtree of B
    End If
  End If
End If
Notice that this algorithm is recursive, calling itself to insert the item into
the left or right subtree depending on how the value of the item compares
with the current node in the tree.
Note The definition of the expression greater than depends on the type
of data in the item and node. For numeric data, greater than can be a
simple arithmetic comparison, and for text data, it can be a string
comparison; however, you must give other forms of data their own
means of comparing values. You will learn more about this when you
implement a binary tree in the upcoming section “Building a binary tree
class by using generics.”
If you start with an empty binary tree and an unordered sequence of
objects, you can iterate through the unordered sequence, inserting each object
into the binary tree by using this algorithm, resulting in an ordered tree. The
next image shows the steps in the process for constructing a tree from a set of
five integers.
After you have built an ordered binary tree, you can display its contents in
sequence by visiting each node in turn and printing the value found. The
algorithm for achieving this task is also recursive:
Download from finelybook PI:EMAIL
578
Click here to view code image
If the left subtree is not empty
Then
  Display the contents of the left subtree
End If
Display the value of the node
If the right subtree is not empty
Then
  Display the contents of the right subtree
End If
Download from finelybook PI:EMAIL
579
The following image shows the steps in the process for outputting the tree.
Notice that the integers are now displayed in ascending order.
Building a binary tree class by using generics
In the following exercise, you will use generics to define a binary tree class
capable of holding almost any type of data. The only restriction is that the
data type must provide a means of comparing values between different
instances.
The binary tree class is one that you might find useful in many different
applications. Therefore, you will implement it as a class library rather than as
an application in its own right. You can then use this class elsewhere without
Download from finelybook PI:EMAIL
580
having to copy the source code and recompile it. A class library is a set of
compiled classes (and other types such as structures and delegates) stored in
an assembly. An assembly is a file that usually has the .dll suffix. Other
projects and applications can make use of the items in a class library by
adding a reference to its assembly and then bringing its namespaces into
scope by employing using directives. You will do this when you test the
binary tree class.
The System.IComparable and
System.IComparable interfaces
The algorithm for inserting a node into a binary tree requires you to
compare the value of the node that you are inserting with nodes already
in the tree. If you are using a numeric type, such as int, you can use the
, and == operators. However, if you are using some other type,
such as Mammal or Circle described in earlier chapters, how do you
compare objects?
If you need to create a class that requires you to be able to compare
values according to some natural (or possibly unnatural) ordering, you
should implement the IComparable interface. This interface contains a
method called CompareTo, which takes a single parameter specifying
the object to be compared with the current instance and returns an
integer that indicates the result of the comparison, as summarized by the
following table.
Value
Meaning
Less than 0
The current instance is less than the value of the
parameter.
0
The current instance is equal to the value of the
parameter.
Greater than
0
The current instance is greater than the value of the
parameter.
As an example, consider the Circle class that was described in
Chapter 7. Let’s take a look at it again here:
Download from finelybook PI:EMAIL
581
Click here to view code image
class Circle
{
    public Circle(int initialRadius)
    {
        radius = initialRadius;
    }
    public double Area()
    {
        return Math.PI * radius * radius;
    }
    private double radius;
}
You can make the Circle class “comparable” by implementing the
System.IComparable interface and providing the CompareTo method.
In this example, the CompareTo method compares Circle objects based
on their areas. A circle with a larger area is considered to be greater
than a circle with a smaller area.
Click here to view code image
class Circle : System.IComparable
{
   ...
     public int CompareTo(object obj)
     {
        Circle circObj = (Circle)obj; // cast the parameter to
its real type
        if (this.Area() == circObj.Area())
            return 0;
        if (this.Area() > circObj.Area())
            return 1;
        return -1;
     }
}
If you examine the System.IComparable interface, you will see that
its parameter is defined as an object. However, this approach is not type
safe. To understand why this is so, consider what happens if you try to
pass something that is not a Circle to the CompareTo method. The
System.IComparable interface requires the use of a cast to access the
Area method. If the parameter is not a Circle but some other type of
object, this cast will fail. However, the System namespace also defines
Download from finelybook PI:EMAIL
582
the generic IComparable interface, which contains the following
method:
int CompareTo(T other);
Notice that this method takes a type parameter (T) rather than an
object, and therefore it is much safer than the nongeneric version of the
interface. The following code shows how you can implement this
interface in the Circle class:
Click here to view code image
class Circle : System.IComparable
{
    ...
    public int CompareTo(Circle other)
    {
        if (this.Area() == other.Area())
            return 0;
        if (this.Area() > other.Area())
            return 1;
        return -1;
    }
}
The parameter for the CompareTo method must match the type
specified in the interface, IComparable. In general, it is
preferable to implement the System.IComparable interface rather
than the System.IComparable interface. You can also implement both,
just as many of the types in the .NET Framework do.
Create the Tree class
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. On the File menu, point to New, and then click Project.
3. In the New Project dialog box, in the Installed pane on the left, click
Visual C#. In the middle pane, select the Class Library (.NET
Framework) template. In the Name box, type BinaryTree. In the
Location box, specify \Microsoft Press\VCSBS\Chapter 17 in your
Documents folder, and then click OK.
Download from finelybook PI:EMAIL
583
Note Make sure that you select the Class Library (.NET
Framework) template, and not Class Library (.NET Standard). The
.NET Framework template includes functionality that is specific to
Windows, and that is not available through the .NET Standard
template.
Using the Class Library template, you can create assemblies that can be
reused by different applications. To utilize a class in a class library in an
application, you must first copy the assembly containing the compiled
code for the class library to your computer (if you did not create it
yourself) and then add a reference to this assembly.
4. In Solution Explorer, right-click Class1.cs, click Rename and then
change the name of the file to Tree.cs. Allow Visual Studio to change
the name of the class as well as the name of the file when you are
prompted.
5. In the Code and Text Editor window, change the definition of the Tree
class to Tree, as shown in bold in the following code:
public class Tree
{
}
6. In the Code and Text Editor window, modify the definition of the
Tree class to specify that the type parameter TItem must denote
a type that implements the generic IComparable interface. The
changes are highlighted in bold in the code example that follows.
The modified definition of the Tree class should look like this:
Click here to view code image
public class Tree where TItem : IComparable
{
}
7. Add three public, automatic properties to the Tree class: a
TItem property called NodeData and Tree properties called
Download from finelybook PI:EMAIL
584
LeftTree and RightTree, as shown in the following code example in
bold:
Click here to view code image
public class Tree where TItem : IComparable
{
    public TItem NodeData { get; set; }
    public Tree LeftTree { get; set; }
    public Tree RightTree { get; set; }
}
8. Add a constructor to the Tree class that takes a single TItem
parameter called nodeValue. In the constructor, set the NodeData
property to nodeValue, and initialize the LeftTree and RightTree
properties to null, as shown in bold in the following code:
Click here to view code image
public class Tree where TItem : IComparable
{
    ...
    public Tree(TItem nodeValue)
    {
      this.NodeData = nodeValue;
      this.LeftTree = null;
      this.RightTree = null;
    }
}
Note Notice that the name of the constructor does not include the
type parameter; it is called Tree, not Tree.
9. Add a public method called Insert to the Tree class as shown in
bold in the code that follows. This method will insert a TItem value into
the tree (once you have completed it).
The method definition should look like this:
Click here to view code image
public class Tree where TItem: IComparable
Download from finelybook PI:EMAIL
585
{
    ...
    public void Insert(TItem newItem)
    {
    }
}
You will implement the recursive algorithm described earlier for
creating an ordered binary tree. The constructor creates the initial node
of the tree, so the Insert method can assume that the tree is not empty.
The code that follows is the part of the algorithm that runs after
checking whether the tree is empty. It’s reproduced here to help you
understand the code you will write for the Insert method in the
following steps:
Click here to view code image
...
Examine the value of the node, N, of the tree, B
If the value of N is greater than that of the new item, I
Then
    If the left subtree of B is empty
    Then
        Construct a new left subtree of B with the item I as the
node, and empty
          left and right subtrees
    Else
        Insert I into the left subtree of B
    End If
...
10. In the Insert method, add a statement that declares a local variable of
type TItem, called currentNodeValue. Initialize this variable to the value
of the NodeData property of the tree, as shown in bold in the following
example:
Click here to view code image
public void Insert(TItem newItem)