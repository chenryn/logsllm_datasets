## 视觉挖掘与PostGIS空间数据库的完美邂逅 - 广告营销\圈人        
##### [TAG 15](../class/15.md)
### 作者           
digoal          
### 日期           
2017-03-28          
### 标签                                         
PostgreSQL , PostGIS , 视觉匹配 , 空间相交 , 圈人          
----           
## 背景          
推荐系统是广告营销平台的奶牛，其核心是精准、实时、高效。             
这么多广告平台，到底谁家强？谁的核心牛逼？              
1\. 精准，指对用户的描述精准，通常需要基于大量的用户行为数据，经历深度学习后形成的用户画像，或称之为标签系统。 标签的准确性关系到推荐的精准度，比如你可能不会对一个正常的年轻人推荐老花眼镜（当然如果有其他购买意向的标签来指出他有购买老花眼镜的欲望除外）。         
2\. 实时，指标签的更新实时性，很多标签是具有非常强的时效性的，比如一次营销的目标人群，又或者用户最近浏览的一些商品可能是有潜在购买欲望的商品，都具备时效性。如果你的标签生成是隔天，或者个很多天的，那么可能已经错过了推荐时机。实时性在推荐系统中是非常重要的。         
3\. 高效，指基于标签圈人的动作的效率与并发能力，作为购买广告的金主，当然是期望他们拿到数据的速度越快越好。并且会有很多人向你的平台购买广告，这考验的是并发能力。              
做到以上三点，这样的广告平台才具备一定的竞争力。         
PostgreSQL 数组与GIN索引可以完美的支持这样的业务场景，可以参考我去年写的这个案子。         
[《恭迎万亿级营销(圈人)潇洒的迈入毫秒时代 - 万亿user_tags级实时推荐系统数据库设计》](../201612/20161225_01.md)          
以上案子适合店铺访问分阶层的场景，例如1-1000,1001-5000,....分档。        
如果店铺的访问次数没有分档，完全精细化表示，怎么挖掘呢？        
接下来，将要给大家介绍的方法，使用空间数据库来实现以上场景。        
## 业务背景介绍        
用户在逛淘宝时，购买一个商品，可能会看很多家店铺，一番货比三家后，才会决定从哪家买。        
用户每天会访问很多的店铺，如果某个用户访问某家店铺的次数非常多，说明一个什么问题呢？        
这家店一定有什么吸引该用户，那么如果店家针对这些用户推送活动、或者采用合适的营销手段，客户在这家店铺购买商品的可能性就非常高。        
![pic](20170328_04_pic_004.jpg)        
这个是圈人的手段之一。        
数据结构可能会包括如下        
用户ID，店铺ID1，访问次数，店铺ID2，访问次数，。。。。。(例如1:1, 2:1即1号店访问了1次，2号店访问了1次)。          
有了这些数据，业务方可以根据店铺的访问次数圈出一部分人群，比如A店铺访问超出多少次的，或者B店铺访问超过多少次的等。          
如果让你来处理，你会使用什么技术呢？          
## 数据规模介绍      
店铺ID上亿、用户数上亿、访问次数不定。          
以上业务需求，如果裸算，会耗费大量的CPU。          
## 视觉挖掘介绍    
PostGIS是一个空间数据库，如果将这些数据转换为空间数据，则可以使用空间函数来实现圈人的目的，比如圈人可以表示为：multipoint与某条线段相交。    
这个操作可以使用PostGIS的空间索引来完成。          
把访问轨迹数据转换为multipoint的几何类型来实现这个业务需求。          
这两个函数，可以将multipoint构造为几何类型          
http://postgis.net/docs/manual-2.3/ST_MPointFromText.html          
http://postgis.net/docs/manual-2.3/ST_GeomFromText.html          
```          
ST_MPointFromText          
ST_GeomFromText           
```          
某个用户的访问轨迹，在数据库中存储为多个点组成的几何类型        
![pic](20170328_04_pic_001.jpg)        
而圈人，则使用两个几何类型的相交即可，例如访问2号店铺在2到100次，或者，访问4号店铺在3到100次的人群。转化为求 "多线段几何图形" 与 "多点几何图形" 相交的结果集。        
![pic](20170328_04_pic_002.jpg)        
### 注意    
(目前postgis GA版本还不支持这个操作, 接下来我假设postgis已支持multipoint && linestring的基础上)。    
目前&&支持的是bounding box的相交，并不是point，所以直接判断&&的结果，得到的结果并不是我们想要的。    
PostGIS众多高难度的几何操作都实现了，这个需求看样子真的不是几何需求。    
```    
&& — Returns TRUE if A's 2D bounding box intersects B's 2D bounding box.    
```    
## 一、例子        
### 建表        
```        
test=> create table test(userid int8 primary key, feeds text);        
CREATE TABLE        
```        
数据格式(店铺ID:访问次数;店铺ID:访问次数....)        
### 空间函数索引         
根据以上格式，构建multipoint，并创建空间索引，注意空字符串转化为极点(0 0)。        
```          
test=> create index idx_test_feeds on test using gist ((case when feeds='' then ST_MPointFromText('MULTIPOINT(0 0)') else ST_MPointFromText('MULTIPOINT('||replace(replace(feeds,':', ' '),';',',')||')') end));          
CREATE INDEX          
test=> \d+ test        
                 Table "public.test"        
 Column |  Type  | Modifiers | Storage  | Description         
--------+--------+-----------+----------+-------------        
 userid | bigint | not null  | plain    |         
 feeds  | text   |           | extended |         
Indexes:        
    "test_pkey" PRIMARY KEY, btree (userid)        
    "idx_test_feeds" gist ((        
CASE        
    WHEN feeds = ''::text THEN st_mpointfromtext('MULTIPOINT(0 0)'::text)        
    ELSE st_mpointfromtext(('MULTIPOINT('::text || replace(replace(feeds, ':'::text, ' '::text), ';'::text, ','::text)) || ')'::text)        
END))        
Has OIDs: no        
```          
### 插入测试数据        
插入几条测试数据，分别表示这些用户的访问了哪些店铺，以及次数。        
```          
insert into test values (1, '1:1');          
insert into test values (2, '1:100');          
insert into test values (3, '2:1');          
insert into test values (4, '2:100');          
insert into test values (5, '1:100;2:100');          
```          
### 圈人需求查询         
1\. 查询访问1号店铺>=2, =2, =2, =2, =2,   Bitmap Index Scan on idx_test_feeds  (cost=0.00..5.13 rows=46 width=0)        
         Index Cond: ((CASE WHEN (feeds = ''::text) THEN '010400000001000000010100000000000000000000000000000000000000'::geometry ELSE st_mpointfromtext((('MULTIPOINT('::text || replace(replace(feeds, ':'::text, ' '::text), ';'::text, ',        
'::text)) || ')'::text)) END && '010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry) AND (CASE WHEN (feeds = ''::text) THEN '010400000001000000010100000000000000000000000000000000000000'::geomet        
ry ELSE st_mpointfromtext((('MULTIPOINT('::text || replace(replace(feeds, ':'::text, ' '::text), ';'::text, ','::text)) || ')'::text)) END && '0102000000020000000000000000000040000000000000004000000000000000400000000000005940'::geometry)        
)        
(4 rows)        
或        
 Index Scan using idx_test_feeds on test  (cost=0.67..45.59 rows=46 width=40)        
   Index Cond: ((CASE WHEN (feeds = ''::text) THEN '010400000001000000010100000000000000000000000000000000000000'::geometry ELSE st_mpointfromtext((('MULTIPOINT('::text || replace(replace(feeds, ':'::text, ' '::text), ';'::text, ','::tex        
t)) || ')'::text)) END && '010200000002000000000000000000F03F0000000000000040000000000000F03F0000000000005940'::geometry) AND (CASE WHEN (feeds = ''::text) THEN '010400000001000000010100000000000000000000000000000000000000'::geometry ELS        
E st_mpointfromtext((('MULTIPOINT('::text || replace(replace(feeds, ':'::text, ' '::text), ';'::text, ','::text)) || ')'::text)) END && '0102000000020000000000000000000040000000000000004000000000000000400000000000005940'::geometry))        
(2 rows)        
```          
## 二、postgis不支持multipoint && linestring前如何实现视觉挖掘?    
那么postgis哪些视觉、几何运算和本文相关呢？    
postgis在处理multipoint时，大多数几何运算，会将multipoint自动转换为闭合的、占据最大面积或者体积的bound box.    
![pic](20170328_04_pic_008.jpg)    
1\. B的所有部分都在A的内部，并且，B至少有1个内部的点在A的内部。    
```    
ST_Contains — Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.    
boolean ST_Contains(geometry geomA, geometry geomB);  -- a包含b    
```    
蓝色为A，灰色为B    
TRUE    
![pic](20170328_04_pic_003.jpg)        
FALSE, 并不是所有的点都在A的内部    
![pic](20170328_04_pic_005.jpg)    
2\. B的任何点都不在A的外面。    
```    
ST_Covers — Returns 1 (TRUE) if no point in Geometry B is outside Geometry A    
boolean ST_Covers(geometry geomA, geometry geomB);    
boolean ST_Covers(geography geogpolyA, geography geogpointB);    
```    
3\. A的任何点都不在B的外面。    
```    
ST_CoveredBy — Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B    
boolean ST_CoveredBy(geometry geomA, geometry geomB);    
boolean ST_CoveredBy(geography geogA, geography geogB);    
```    
4\. A与B有部分共用的部分，并且，共用的部分不是A或者B的全部(即公共部分只是A或B的一部分)    
```    
ST_Crosses — Returns TRUE if the supplied geometries have some, but not all, interior points in common.    
boolean ST_Crosses(geometry g1, geometry g2);    
```    