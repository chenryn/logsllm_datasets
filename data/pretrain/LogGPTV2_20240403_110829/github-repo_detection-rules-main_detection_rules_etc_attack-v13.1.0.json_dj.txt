### Data from Network Shared Drive

**Description:**
Adversaries may search network shares on compromised computers to find and collect sensitive data. This data can be gathered from remote systems via shared network drives (e.g., host shared directories, network file servers) that are accessible from the current system before exfiltration. Interactive command shells, such as `cmd`, may be used to gather this information.

**External References:**
- **T1039**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1039)

**Kill Chain Phases:**
- **Collection**

**Detection:**
Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

**Data Sources:**
- Command: Command Execution
- Network Traffic: Network Traffic Content
- Network Share: Network Share Access
- Network Traffic: Network Connection Creation
- File: File Access

**System Requirements:**
- Privileges to access network shared drive

---

### Web Services

**Description:**
Adversaries may compromise access to third-party web services that can be used during targeting. Popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may take ownership of a legitimate user's access to a web service and use it as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as Command and Control, Exfiltration Over Web Service, or Phishing. Using common services makes it easier for adversaries to hide in expected noise, making it difficult to physically tie back operations to them.

**External References:**
- **T1584.006**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1584/006)
- **Recorded Future Turla Infra 2020**: [Swallowing the Snake’s Tail: Tracking Turla Infrastructure](https://www.recordedfuture.com/turla-apt-infrastructure/)
- **ThreatConnect Infrastructure Dec 2020**: [Infrastructure Research and Hunting: Boiling the Domain Ocean](https://threatconnect.com/blog/infrastructure-research-hunting/)

**Kill Chain Phases:**
- **Resource Development**

**Detection:**
Once adversaries leverage the abused web service as infrastructure (e.g., for command and control), it may be possible to look for unique characteristics associated with adversary software, if known. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control or Exfiltration Over Web Service.

**Data Sources:**
- Internet Scan: Response Content

---

### Modify System Image

**Description:**
Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic, and most of the device functionality and capabilities are contained within a single file. To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it. This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.

**External References:**
- **T1601**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1601)
- **Cisco IOS Software Integrity Assurance - Image File Verification**: [Cisco](https://tools.cisco.com/security/center/resources/integrity_assurance.html#7)
- **Cisco IOS Software Integrity Assurance - Run-Time Memory Verification**: [Cisco](https://tools.cisco.com/security/center/resources/integrity_assurance.html#13)

**Kill Chain Phases:**
- **Defense Evasion**

**Detection:**
Most embedded network devices provide a command to print the version of the currently running operating system. Use this command to query the operating system for its version number and compare it to what is expected for the device in question. Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source. Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.

**Data Sources:**
- File: File Modification

**Permissions Required:**
- Administrator

---

### Hijack Execution Flow

**Description:**
Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution. There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed and intercepting how the operating system locates libraries to be used by a program.

**External References:**
- **T1574**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1574)
- **Autoruns for Windows**: [Microsoft](https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns)

**Kill Chain Phases:**
- **Persistence**
- **Privilege Escalation**
- **Defense Evasion**

**Detection:**
Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.

**Data Sources:**
- Service: Service Metadata
- Command: Command Execution
- File: File Modification
- Process: Process Creation
- Module: Module Load
- File: File Creation
- Windows Registry: Windows Registry Key Modification

**Defense Bypassed:**
- Anti-virus
- Application Control

---

### Indicator Removal from Tools

**Description:**
Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems. A good example is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature and then re-use the malware.

**External References:**
- **T1027.005**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1027/005)

**Kill Chain Phases:**
- **Defense Evasion**

**Detection:**
The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliances, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.

**Data Sources:**
- Application Log: Application Log Content

**Defense Bypassed:**
- Anti-virus
- Host Intrusion Prevention Systems
- Log Analysis
- Signature-based Detection

---

### Malicious Image

**Description:**
Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images, as well as popular container runtimes such as Docker, can be backdoored. Backdoored images may be uploaded to a public repository, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.

**External References:**
- **T1204.003**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1204/003)
- **Summit Route Malicious AMIs**: [Investigating Malicious AMIs](https://summitroute.com/blog/2018/09/24/investigating_malicious_amis/)
- **Aqua Security Cloud Native Threat Report June 2021**: [Attacks in the Wild on the Container Supply Chain and Infrastructure](https://info.aquasec.com/hubfs/Threat%20reports/AquaSecurity_Cloud_Native_Threat_Report_2021.pdf?utm_campaign=WP%20-%20Jun2021%20Nautilus%202021%20Threat%20Research%20Report&utm_medium=email&_hsmi=132931006&_hsenc=p2ANqtz-_8oopT5Uhqab8B7kE0l3iFo1koirxtyfTehxF7N-EdGYrwk30gfiwp5SiNlW3G0TNKZxUcDkYOtwQ9S6nNVNyEO-Dgrw&utm_content=132931006&utm_source=hs_automation)

**Kill Chain Phases:**
- **Execution**

**Detection:**
Monitor the local image registry to ensure malicious images are not added. Track the deployment of new containers, especially from newly built images. Monitor the behavior of containers within the environment to detect anomalous behavior or malicious activity after users deploy from malicious images.

**Data Sources:**
- Application Log: Application Log Content
- Container: Container Creation
- Container: Container Start
- Instance: Instance Start
- Instance: Instance Creation
- Command: Command Execution
- Image: Image Creation

**Permissions Required:**
- User

**Platforms:**
- IaaS
- Containers

---

### Valid Accounts

**Description:**
Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. In some cases, adversaries may abuse inactive accounts, such as those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.

**External References:**
- **T1078**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1078)
- **volexity_0day_sophos_FW**: [DriftingCloud: Zero-Day Sophos Firewall Exploitation and an Insidious Breach](https://www.volexity.com/blog/2022/06/15/driftingcloud-zero-day-sophos-firewall-exploitation-and-an-insidious-breach/)
- **CISA MFA PrintNightmare**: [Russian State-Sponsored Cyber Actors Gain Network Access by Exploiting Default Multifactor Authentication Protocols and “PrintNightmare” Vulnerability](https://www.cisa.gov/uscert/ncas/alerts/aa22-074a)
- **TechNet Credential Theft**: [Attractive Accounts for Credential Theft](https://technet.microsoft.com/en-us/library/dn535501.aspx)
- **TechNet Audit Policy**: [Audit Policy Recommendations](https://technet.microsoft.com/en-us/library/dn487457.aspx)

**Kill Chain Phases:**
- **Defense Evasion**
- **Persistence**
- **Privilege Escalation**
- **Initial Access**

**Detection:**
Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence.

**Data Sources:**
- Logon Session: Logon Session Creation
- User Account: User Account Authentication
- Logon Session: Logon Session Metadata

**Defense Bypassed:**
- Firewall
- Anti-virus
- Host Intrusion Prevention Systems
- Network Intrusion Detection System
- Application Control
- System Access Controls

**Effective Permissions:**
- User
- Administrator

**Permissions Required:**
- User
- Administrator

**Platforms:**
- Windows
- Azure AD
- Office 365
- SaaS
- IaaS
- Linux
- macOS
- Google Workspace
- Containers
- Network

---

### Non-Standard Port

**Description:**
Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 instead of the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data. Adversaries may also make changes to victim systems to abuse non-standard ports, such as modifying Registry keys and other configuration settings to change protocol and port pairings.

**External References:**
- **T1571**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1571)
- **University of Birmingham C2**: [Command & Control Understanding, Denying and Detecting](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)
- **Symantec Elfin Mar 2019**: [Elfin: Relentless Espionage Group Targets Multiple Organizations in Saudi Arabia and U.S.](https://www.symantec.com/blogs/threat-intelligence/elfin-apt33-espionage)
- **change_rdp_port_conti**: [“Change RDP port” #ContiLeaks](https://twitter.com/TheDFIRReport/status/1498657772254240768)
- **Fortinet Agent Tesla April 2018**: [Analysis of New Agent Tesla Spyware Variant](https://www.fortinet.com/blog/threat-research/analysis-of-new-agent-tesla-spyware-variant.html)

**Kill Chain Phases:**
- **Command and Control**

**Detection:**
Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.

**Data Sources:**
- Network Traffic: Network Traffic Content
- Network Traffic: Network Traffic Flow

**Platforms:**
- Linux
- macOS
- Windows

---

### Social Media Accounts

**Description:**
Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history, and appropriate affiliations. For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (e.g., Facebook, LinkedIn, Twitter, etc.). Establishing a persona on social media may require development of additional documentation to make them seem real, such as filling out profile information, developing social networks, or incorporating photos. Once a persona has been developed, an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.

**External References:**
- **T1585.001**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1585/001)
- **NEWSCASTER2014**: [Iranian Hackers Targeted US Officials in Elaborate Social Media Attack Operation](https://www.securityweek.com/iranian-hackers-targeted-us-officials-elaborate-social-media-attack-operation)
- **BlackHatRobinSage**: [Getting In Bed with Robin Sage](http://media.blackhat.com/bh-us-10/whitepapers/Ryan/BlackHat-USA-2010-Ryan-Getting-In-Bed-With-Robin-Sage-v1.0.pdf)

**Kill Chain Phases:**
- **Resource Development**

**Detection:**
Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (e.g., [Spearphishing via Service](https://attack.mitre.org/techniques/T1566/003)).

**Data Sources:**
- Network Traffic: Network Traffic Content
- Persona: Social Media

**Platforms:**
- PRE

---

### DLL Side-Loading

**Description:**
Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.

**External References:**
- **T1073**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1073)
- **CAPEC-641**: [CAPEC](https://capec.mitre.org/data/definitions/641.html)
- **MSDN Manifests**: [Manifests](https://msdn.microsoft.com/en-us/library/aa375365)
- **Stewart 2014**: [DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf)

**Kill Chain Phases:**
- **Defense Evasion**

**Detection:**
Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.

**Data Sources:**
- Process: Process Access
- Process: OS API Execution
- Process: Process Modification

**Defense Bypassed:**
- Process Whitelisting
- Anti-virus

**Platforms:**
- Windows

**Note:**
This technique has been revoked.

---

### Process Hollowing

**Description:**
Adversaries may inject malicious code into suspended and hollowed processes to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process. Process hollowing is commonly performed by creating a process in a suspended state, then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as `CreateProcess`, which includes a flag to suspend the process's primary thread. At this point, the process can be unmapped using API calls such as `ZwUnmapViewOfSection` or `NtUnmapViewOfSection` before being written to, realigned to the injected code, and resumed via `VirtualAllocEx`, `WriteProcessMemory`, `SetThreadContext`, and `ResumeThread` respectively.

**External References:**
- **T1055.012**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1055/012)
- **Leitch Hollowing**: [Process Hollowing](http://www.autosectools.com/process-hollowing.pdf)
- **Elastic Process Injection July 2017**: [Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques](https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process)
- **Nviso Spoof Command Line 2020**: [The return of the spoof part 2: Command line spoofing](https://blog.nviso.eu/2020/02/04/the-return-of-the-spoof-part-2-command-line-spoofing/)
- **Mandiant Endpoint Evading 2019**: [Staying Hidden on the Endpoint: Evading Detection with Shellcode](https://www.mandiant.com/resources/staying-hidden-on-the-endpoint-evading-detection-with-shellcode)

**Kill Chain Phases:**
- **Defense Evasion**
- **Privilege Escalation**

**Detection:**
Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (e.g., through API flags or process thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior.

**Data Sources:**
- Process: Process Access
- Process: OS API Execution
- Process: Process Modification

**Defense Bypassed:**
- Application Control
- Anti-virus

**Permissions Required:**
- User

**Platforms:**
- Windows

---

### Exploitation for Privilege Escalation

**Description:**
Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. When initially gaining access to a system, an adversary may be operating within a lower-privileged process, which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user-level permissions to SYSTEM or root permissions, depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host.

**External References:**
- **T1068**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1068)
- **ESET InvisiMole June 2020**: [INVISIMOLE: THE HIDDEN PART OF THE STORY](https://www.welivesecurity.com/wp-content/uploads/2020/06/ESET_InvisiMole.pdf)
- **Microsoft Driver Block Rules**: [Microsoft recommended driver block rules](https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-driver-block-rules)
- **Unit42 AcidBox June 2020**: [AcidBox: Rare Malware Repurposing Turla Group Exploit Targeted Russian Organizations](https://unit42.paloaltonetworks.com/acidbox-rare-malware/)

**Kill Chain Phases:**
- **Privilege Escalation**

**Detection:**
Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also, look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, or evidence of Discovery. Consider monitoring for the presence or loading (e.g., Sysmon Event ID 6) of known vulnerable drivers that adversaries may drop and exploit to execute code in kernel mode.

**Data Sources:**
- Process: Process Creation
- Driver: Driver Load

**Effective Permissions:**
- User

**Permissions Required:**
- User

**Platforms:**
- Linux
- macOS
- Windows
- Containers

---

### Resource Forking

**Description:**
Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file’s extended attributes, using `ls -l@` or `xattr -l` commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top-level directory of an application bundle, while localized resources are placed in the `/Resources` folder. Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.

**External References:**
- **T1564.009**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1564/009)
- **tau bundlore erika noerenberg 2020**: [TAU Threat Analysis: Bundlore (macOS) mm-install-macos](https://blogs.vmware.com/security/2020/06/tau-threat-analysis-bundlore-macos-mm-install-macos.html)
- **Resource and Data Forks**: [Identifying Resource and Data Forks](https://flylib.com/books/en/4.395.1.192/1/)
- **ELC Extended Attributes**: [There's more to files than data: Extended Attributes](https://eclecticlight.co/2020/10/24/theres-more-to-files-than-data-extended-attributes/)
- **sentinellabs resource named fork 2020**: [Resourceful macOS Malware Hides in Named Fork](https://www.sentinelone.com/labs/resourceful-macos-malware-hides-in-named-fork/)
- **macOS Hierarchical File System Overview**: [Hierarchical File System Overview](http://tenon.com/products/codebuilder/User_Guide/6_File_Systems.html#anchor520553)

**Kill Chain Phases:**
- **Defense Evasion**

**Detection:**
Identify files with the `com.apple.ResourceFork` extended attribute and large data amounts stored in resource forks. Monitor command-line activity leveraging the use of resource forks, especially those immediately followed by potentially malicious activity such as creating network connections.

**Data Sources:**
- File: File Metadata
- Process: Process Creation
- File: File Creation
- Command: Command Execution

**Defense Bypassed:**
- Notarization
- Gatekeeper

**Platforms:**
- macOS

---

### Account Access Removal

**Description:**
Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (e.g., changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to set malicious changes into place. In Windows, the `Net` utility, `Set-LocalUser` and `Set-ADAccountPassword` PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the `passwd` utility may be used to change passwords. Accounts could also be disabled by Group Policy. Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Defacement](https://attack.mitre.org/techniques/T1491), in order to impede incident response/recovery before completing the [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) objective.

**External References:**
- **T1531**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1531)
- **CarbonBlack LockerGoga 2019**: [TAU Threat Intelligence Notification – LockerGoga Ransomware](https://www.carbonblack.com/2019/03/22/tau-threat-intelligence-notification-lockergoga-ransomware/)
- **Unit42 LockerGoga 2019**: [Born This Way? Origins of LockerGoga](https://unit42.paloaltonetworks.com/born-this-way-origins-of-lockergoga/)

**Kill Chain Phases:**
- **Impact**

**Detection:**
Use process monitoring to monitor the execution and command-line parameters of binaries involved in deleting accounts or changing passwords, such as the use of `Net`. Windows event logs may also designate activity associated with an adversary's attempt to remove access to an account. Alerting on `Net` and these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.

**Data Sources:**
- Active Directory: Active Directory Object Modification
- User Account: User Account Modification
- User Account: User Account Deletion

**Impact Type:**
- Availability

**Platforms:**
- Linux
- macOS
- Windows
- Office 365
- SaaS

---

### Credential Stuffing

**Description:**
Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.

**External References:**
- **T1110.004**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1110/004)
- **US-CERT TA18-068A 2018**: [Brute Force Attacks Conducted by Cyber Actors](https://www.us-cert.gov/ncas/alerts/TA18-086A)

**Kill Chain Phases:**
- **Credential Access**

**Detection:**
Monitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If authentication failures are high, there may be a brute force attempt to gain access to a system using legitimate credentials.

**Data Sources:**
- User Account: User Account Authentication
- Application Log: Application Log Content

**Platforms:**
- Windows
- Azure AD
- Office 365
- SaaS
- IaaS
- Linux
- macOS
- Google Workspace
- Containers

---

### Kerberoasting

**Description:**
Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service). Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).

**External References:**
- **T1208**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1208)
- **Microsoft Detecting Kerberoasting Feb 2018**: [Detecting Kerberoasting activity using Azure Security Center](https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/)
- **Microsoft SPN**: [Service Principal Names](https://msdn.microsoft.com/library/ms677949.aspx)
- **Microsoft SetSPN**: [Service Principal Names (SPNs) SetSPN Syntax (Setspn.exe)](https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx)
- **SANS Attacking Kerberos Nov 2014**: [Attacking Kerberos - Kicking the Guard Dog of Hades](https://redsiege.com/kerberoast-slides)
- **Harmj0y Kerberoast Nov 2016**: [Kerberoasting Without Mimikatz](https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)
- **Empire InvokeKerberoast Oct 2016**: [Invoke-Kerberoast.ps1](https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1)
- **AdSecurity Cracking Kerberos Dec 2015**: [Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain](https://adsecurity.org/?p=2293)

**Kill Chain Phases:**
- **Credential Access**

**Detection:**
Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (e.g., accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).

**Data Sources:**
- Active Directory: Active Directory Object Modification
- User Account: User Account Modification
- User Account: User Account Deletion

**Permissions Required:**
- User

**System Requirements:**
- Valid domain account or the ability to sniff traffic within a domain.

**Note:**
This technique has been revoked.

---

### Obfuscated Files or Information

**Description:**
Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password-protected compressed/encrypted file that was provided by the adversary. Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.

**External References:**
- **T1027**: [MITRE ATT&CK](https://attack.mitre.org/techniques/T1027)
- **Volexity PowerDuke November 2016**: [PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs](https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/)
- **GitHub Revoke-Obfuscation**: [Revoke-Obfuscation](https://github.com/danielbohannon/Revoke-Obfuscation)
- **FireEye Obfuscation June 2017**: [Obfuscation in the Wild: Targeted Attackers Lead the Way in Evasion Techniques](https://web.archive.org/web/20170923102302/https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html)
- **FireEye Revoke-Obfuscation July