/*显示内存内容*/
printf("%02x ", buf[sz]);
if (sz%16 == 0) printf("\n");
第 6 章高手们的调试技术
www.TopSage.com
0.048s
0.011s
0.009s
0.009s
read()
3.675s
0.242s
0.023s
0.010s
ptrace()
---
## Page 333
此时就要确认日志。有时会输出下面的信息
然中断，导致无法重新连接的情况。
在验证系统或做负载测试时，经常会出现本应正常运行的进程终止、ssh 连接突
确认行为和日志
Killer.
不会出现，而且能检测出消耗内存过大的进程。本 hack 介绍内核 2.6 中的 OOM
由于该功能的存在，内存无法释放的情况下持续分配内存导致系统停止的现象就
会采取保证内存的最终手段，给进程发送信号使之强制结束。
Linux 中有个 Out Of Memory(OOM) Killer 功能，当系统的内存和交换区用尽时,
#56
读取的数据超过几十 KB时，这种方法要比 ptrace(PTRACE_PEEKDATA，...)快得多。
：
Node 0 DMA per-cpu;
[] oom_kill_process+0x57/0xldc
Call Trace:
Pid: 4629, comm: stress Not tainted 2.6.26 #3
2
CPU
[] error_exit+0x0/0x51
[] do_page_fault+0x3b4/0x76f
[] h
]
[] out_of_memory+oxlel1/0x24b
[]b
[]
1: hi:0, btch: l usd:
O: hi:0, btch: 1
本 hack 介绍 OOM Killer 的行为和原理。
OOMKiller的行为和原理
handle_mm_fault+0x225/0x708
-_alloc_pages_internal+0x320/0x3c2
badness+0x16a/0x1a9
-_ capable+0x9/0x1c 
1 usd:
www.TopSage.com
HACK#56 OOM Killer 的行为和原理 | 315 
一大和一洋
323
---
## Page 334
324
注1：
1．首先以进程的虚拟内存大小作为计算分数的基准。虚拟内存大小可以从 ps 命
评分方法
的进程发送信号。
内存耗尽时，OOM Killer会遍历所有进程，并给每个进程评分，然后向得分最高
选择进程的方法
进程的方法。
OOM Killer 通过结束进程的方式保证空闲内存，下面介绍一下 OOM Killer 选择
重新连接的原因就是 sshd 被 OOM Killer 结束了，必须重新启动 sshd，才能登录。
最后显示 Out of memory（内存不足），这一-行显示了 OOM Killer 运行的原因。无法
316 |  第6 章 高手们的调试技术
OOMKiller 在评分时考虑了很多因素，对每个进程考虑下面1～9点。
分数就越高，1KB算做1分。如果进程耗费了1GB内存，分数就大概是1000000
令的 VSZ或/proc//status 的 VmSize 让查看。耗费内存越多的进程，起始
Killed process 3082 (sshd)
Out of memory: kill process 2875 (sshd) score 94830592 or a child
Total swap = 2048248kB
Free swap = OkB
Swap cache: add 1630129; delete 1630129, find 2279/2761
sabed aypesabed lero1 67
1*40 96kB =5564kB
Node 0 DMA32: 1*4kB 13*8kB 1*16kB 6*32kB 2*64kB 2*128kB 1*256kB 1*512kB 0*1024kB 0*2048kB
9*4096k B = 8024kB
lowmem_reserve[]: 0 2003 2003 2003
7448kB pa ges_scanned:308 all_unreclaimable? yes 
 i i      0 
free:3397 slab:2889 mapped:1 pagetables:2544 bounce:0
Active:250206 inactive:251609 dirty:0 writeback:0 unstable:0
/proc//status 的 VmSize 与分数稍有不同。
www.TopSage.com
---
## Page 335
注2：
之前（含2.6.10），如果设置了CAP_SYS_RAWIO则发送SIGTERM，否则发送SIGKILL）。
根据这些规则为所有进程评分，然后给分值最高的进程发送SIGKILL信号（2.6.10
9.最后根据 proc文件系统的oom_adj调整分数。
8.对于cgroup的情况，要看导致OOMKiller启动的进程被允许的内存结点之外
7.用capset(3)等设置了CAP_SYS_RAWI0功能的进程的分数为原分数的1/4。能直
6.超级用户的进程一般都比较重要，分数设置成原分数的1/4。
5.被nice等命令设置成优先级较低的进程的分数加倍。例如，nice-n命令设置
进程。
开平方就是2，用分数除以2。这两种方法都是将运行时间长的进程看做重要的
单位）的平方根的平方根。对于已运行了16000秒的进程，16的平方根是4，再
此外，进程启动后经过的时间也用于调整分数。将分数除以启动时间（1000秒为
间为90秒，那么以10秒为单位就是9，平方根为3，用分数除以3。
首先用分数除以CPU使用时间（10秒为单位），然后开平方。如果CPU使用时
4.根据进程的CPU使用时间和启动时间调整分数。启动时间越长，或者是正在
3.如果进程是父进程，那么所有子进程的内存大小的一半作为分数加到父进程上。
成1~19的进程，其分数就是2倍。
运行的进程，就认为其重要性越高，分数就越低。
原分数的1/8。
的其他内存结点，如果某个进程只允许了“其他内存结点”，就将分数设置为
接访问硬件的进程判断为重要进程。
Killer的目标。
值）。禁用交换区这种行为与内存不足的状况格格不入，因此迅速成了00M
该选项默认有效。
秒、1024秒为单位进行计算。
源代码的注释中写的是以10秒、1000秒为单位，但实际上用的是位运算，以8
www.TopSage.com
HACK#560OMKiller的行为和原理
11317
325
---
## Page 336
326
而是引发 panic。
将/proc/sys/vm/panic_on_oom设置为1，那么 OOM Killer 启动时不会发送信号，
置方法如下。
开始支持-17)。
Killer 选中，而负值降低选中可能性。设置为 3，分数就成了2?倍，设置为-5 则
设置/proc//oom_adj可以调整分数。调整范围为-16～15。正值更容易被 OOM
/proc//oom_adj
下面介绍 proc 中与 OOM Killer 有关的内容。
proc 中与 OOM Killer 有关的内容
线程组（TGID 不同），只要存在与选中进程共享了同一片内存区域的进程，就也
含子进程，就先向子进程发送信号。
但是，init（PID 为1）进程不是 OOM Killer 的处理对象。如果被选中的进程包
通过/proc//oom_score 可以查看各进程的分数。
3181第6章高手们的调试技术
/proc/sys/vm/panic_on_oom
proc.txt中，实际上从内核2.6.11开始就可以使用了。
如果想在OOM Killer 启动后仍可以远程登录，可以从候选对象中去除 sshd，设
“-17”是个特别的数值，可以禁止OOMKiller向该进程发送信号（从内核2.6.12
为(1/2)
给它发送信号。
此外，给选中的进程发送信号之后，再访问系统中的所有线程，即使不属于同一
=> /proc/2278/oom_score  /proc/ cat /var/run/sshd.pid' /oom_adj
# cat /proc/' cat /var/run/sshd.pid /oom_score
www.TopSage.com
---
## Page 337
2.4版内核的内核配置中可以启用/禁用OOMKiller.
内核配置
信息如下所示。可以通过 dmesg或 syslog确认。
设置示例如下。
会输出进程列表。
2.6.25 版以后的内核中，将 oom_dump_tasks 设置为非0值，OOM Killer 启动时就
/proc/sys/vm/oom_dump_tasks 
纯地发送信号而已。
这样就无须遍历进程，但这种方法不会考虑进程优先级、root 权限等，而只是单
进程进行评分。
置为非0值，引发OOM Killer 启动的进程自身就会接收到信号，而不再对所有
2.6.24 版以后的内核中的 proc 文件系统中有个 oom_kill_allocating_task，将其设
/proc/sys/vm/oom_kill_allocating_task 
# echo I > /proc/sys/vm/oom_dump_tasks
 # echo I > /proc/sys/vm/oom_kill_allocating_task
# echo I > /proc/sys/vm/panic_on_0om 
[ I Select task to kill on out of memory condition
General setup
[3320]0  3320 525842
2861]
11
ptn [ prd ]
2765
27411
27361
500]
18
口
tgid
total_vm rss cpu oom_adj nam
2580
www.TopSage.com
241215 1 0 stress
10
HACK#56 OOM Killer 的行为和原理 1  319
 acpid
dbus-daemon 
syslogd
udevd
init
klogd
327
---
## Page 338
也可以同时给几项增加负载。stress运行期间接收到信号就会输出信息并结束。
stress 是个内存、CPU 和磁盘 I/O 的负载测试工具，它可以单独增加某项的负载,
区均为 2GB，使用负载测试工具 stress 故意消耗内存。
我们在 RHEL4（内核 2.6.9）上确认了 OOM Killer 的行为。下例中的内存和交换
在 RHEL4上的行为确认
些限制。
这些限制本来是标准内核 2.6.10才有的功能，而基于 2.6.9 的 RHEL4 也加上了这
也就是说，只有在5 秒内 0OMKiller 被连续调用10次以上才会启动。
5．OOM Killer 启动时计数器清零。
4．最后一次 OOM Killer 启动之后5秒之内不会再次启动 OOM Killer,因此运行
2．计数器清零后1秒内被调用，则不算调用次数。
1．OOM Kilr上次调用到本次调用之间超过5秒，就将调用次数清零。这是为
被调用的次数，只有在一定时间内调用一定次数后才会启动。
RHEL5中,OOMKiller的行为比标准内核中还要谨慎。RHEL5会计算OOMKiller
RHEL的特点
2.6版内核中没有该配置，就无法设置了。
320|第6章高手们的调试技术
# stress --vm 2 --vm-bytes 2G --vm-keep
# ./configure ; make ; make install
# cd stress-1.0.0
# tar zxvf stress-1.o.0.tar.gz
# wget -t0 -c http://weather.ou.edu/-apw/projects/stress/stress-1.0.0.tar.gz
OOM Killer 调用次数不到10 次，则不实际启动。只有 0OM Killer 被调用 10
Killer 等着接受了信号的进程结束（释放内存)。
频率最大只有5秒一次。这样可以避免无意义地结束多个进程，也可让0OM
次才认为发生了内存不足。
了避免内存负载突发性膨胀导致进程被终止。
www.TopSage.com
/*两个进程，分别消耗 2G内存*/
---
## Page 339
以将其禁用。
尽管标准内核中无法禁用OOM Killer，但 RHEL4有个/proc/sys/vm/oom-kil，可
此时控制台如下。
Out of Memory: Killed process 17328 (stress).
19212 pages shared
10227 reserved pages
524224 pages of RAM
Free swap:
Swap cache: ad 524452, delete 524200, find 60/102, race 0+0
0*4096kB = 1424kB
Node 0 Normal: 0*4kB 0*8kB 1*16kB 2*32kB 1*64kB 0*128kB 1*256kB 0*512kB 1*1024kB 0*2048kB
2*4096kB = 11720kB
Node 0 DMA: 4*4kB 5*8kB 1*16kB 4*32kB 2*64kB 3*128kB 1*256kB 1*512kB 0*1024kB 1*2048kB
protections[]: 0 0 0
pages_scanned:2384217 all_unreclaimable? yes
999940kB present:2080512kB
mapped:500625 pagetables:2245
Active:251180 inactive:249985 dirty:0 writeback:0 unstable:0 free:3286 slab:2731
Free pages:
cpu 1 cold: low 0, high 32, batch 16
cpu 1 hot: low 32, high 9
cpu θ hot: low 32, high 96, batch 16
Node 0 Normal per-cpu:
Mem-info:
oom-killer: gfp_mask=oxd0
stress: FAIL: [17327] (452) failed run completed in 70s 
stress: WARN: [17327] (418) now reaping child worker processes
stress: FAIL: [17327] (416)/proc/sys/vm/oom-kill
Out of memory:Killed process 11780（stress）
0pages swap cached
42102reservedpages
524224 pages of RAM
Swap cache:ad512503,delete512504,find90/129,race0+0
Mem-info:
Call Trace:
stress:FAIL:[11779]（452)failed run completed in 46s
stress:w
stress:FAIL:[11779]（416)]error_exit+0x0/0x84
[]tty_ldisc_deref+0x68/0x7b
[]default_wake_function+0x0/0xe
[]d
[]
[]out_of_memory+0x8e/0x321
WARN:
：[11779]（418)nowreaping childworker processes
do_page_fault+0x4b8/0x81d
-_handle_mm_fault+0x208/0xe04
www.TopSage.com
/*SIGKILL*/
---
## Page 341
#57
绍的Linux 内核错误注入。它实现了一个框架，通过该框架可以方便地实现各种
也就是说，该方法不仅能测试内存分配函数之后的错误处理代码，还可能测试到
同样的错误处理代码，以进一步通知上层函数。
结束程序，或是返回错误代码以通知调用者。而调用者在调用该函数之后，也有
链接该库，就会在 malloc 等内存分配函数中插入钩子，就可以故意造成内存分配
错误注入技术使用了--个名为 failmalloc 的库（http://ww.nongnu.org/failmalloc/)。
处理代码。这样可以提高软件的可靠性，而且，只要正确进行了错误处理，就不