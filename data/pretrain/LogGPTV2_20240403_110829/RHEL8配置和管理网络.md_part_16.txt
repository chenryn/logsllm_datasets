    # nmcli device status
    DEVICE      TYPE      STATE      CONNECTION
    bond0       bond      connected  bond0
    ```
2.  显示连接配置集的所有设置：
    ``` literallayout
    # nmcli connection show bond0
    connection.id:              bond0
    connection.uuid:            79cbc3bd-302e-4b1f-ad89-f12533b818ee
    connection.stable-id:       --
    connection.type:            bond
    connection.interface-name:  bond0
    ...
    ```
:::
::: itemizedlist
**其它资源**
-   有关 `nmstatectl`{.literal} 的详情，请查看 `nmstatectl(8)`{.literal}
    man page。
-   如需了解更多配置示例，请参阅
    `/usr/share/doc/nmstate/examples/`{.literal} 目录。
:::
:::
::: section
::: titlepage
# []{#configuring-network-bonding_configuring-and-managing-networking.html#proc_configuring-a-network-bond-using-rhel-system-roles_configuring-network-bonding}使用 RHEL 系统角色配置网络绑定 {.title}
:::
您可以使用 `network`{.literal} RHEL
系统角色配置网络绑定。这个步骤描述了如何在使用两个以太网设备的主动备份模式中配置绑定,并设置
IPv4 和 IPv6 地址、默认网关和 DNS 配置。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在网桥上设置 IP 配置,而不是在 Linux 网桥的端口上设置。
:::
::: itemizedlist
**先决条件**
-   在控制节点上安装 `ansible`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
-   如果您运行 playbook 时使用了与 `root`{.literal} 不同的远程用户,
    则此用户在受管节点上需要具有适当的 `sudo`{.literal} 权限。
-   在服务器中安装两个或者两个以上物理或者虚拟网络设备。
:::
::: orderedlist
**流程**
1.  如果 playbook 要针对其执行的主机还没有在清单中，请将此主机的 IP
    或名称添加到 `/etc/ansible/hosts`{.literal} Ansible 清单文件中：
    ``` literallayout
    node.example.com
    ```
2.  使用以下内容创建 `~/bond-ethernet.yml`{.literal} playbook：
    ``` literallayout
    ---
    - name: Configure a network bond that uses two Ethernet ports
      hosts: node.example.com
      become: true
      tasks:
      - include_role:
          name: linux-system-roles.network
        vars:
          network_connections:
            # Define the bond profile
            - name: bond0
              type: bond
              interface_name: bond0
              ip:
                address:
                  - "192.0.2.1/24"
                  - "2001:db8:1::1/64"
                gateway4: 192.0.2.254
                gateway6: 2001:db8:1::fffe
                dns:
                  - 192.0.2.200
                  - 2001:db8:1::ffbb
                dns_search:
                  - example.com
              bond:
                mode: active-backup
              state: up
            # Add an Ethernet profile to the bond
            - name: bond0-port1
              interface_name: enp7s0
              type: ethernet
              controller: bond0
              state: up
            # Add a second Ethernet profile to the bond
            - name: bond0-port2
              interface_name: enp8s0
              type: ethernet
              controller: bond0
              state: up
    ```
3.  运行 playbook：
    ::: itemizedlist
    -   以 `root`{.literal} 用户身份连接到受管主机，输入：
        ``` literallayout
        # ansible-playbook -u root ~/bond-ethernet.yml
        ```
    -   以用户身份连接到受管主机，请输入：
        ``` literallayout
        # ansible-playbook -u user_name --ask-become-pass ~/bond-ethernet.yml
        ```
        `--ask-become-pass`{.literal} 选项确定
        `ansible-playbook`{.literal} 命令提示输入
        `-u user_name`{.literal} 选项中定义的用户 `sudo`{.literal}
        密码。
    :::
    如果没有指定 `-u user_name`{.literal}
    选项，请以当前登录到控制节点的用户 `ansible-playbook`{.literal}
    连接到受管主机。
:::
::: itemizedlist
**其它资源**
-   `/usr/share/ansible/roles/rhel-system-roles.network/README.md`{.literal}
    file
-   `ansible-playbook(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-network-bonding_configuring-and-managing-networking.html#creating-a-network-bond-to-enable-switching-between-an-ethernet-and-wireless-connection-without-interrupting-the-vpn_configuring-network-bonding}创建网络绑定以便在不中断 VPN 的情况下在以太网和无线连接间进行切换 {.title}
:::
将工作站连接到公司网络的 RHEL 用户通常会使用 VPN
访问远程资源。然而，如果工作站在以太网和 Wi-Fi
连接间切换，例如：如果您是从带以太网连接的 docking
站中释放的笔记本电脑，VPN 连接就中断。要避免这个问题，您可以在
`active-backup`{.literal} 模式中使用以太网和 Wi-Fi
连接创建一个网络绑定。
::: itemizedlist
**先决条件**
-   主机包含以太网和 Wi-Fi 设备。
-   已创建以太网和 Wi-Fi
    网络管理器连接配置集，且两个连接都可以独立工作。
    此流程使用以下连接配置集来创建名为 `bond0`{.literal} 的网络绑定：
    ::: itemizedlist
    -   `Docking_station`{.literal} 与 `enp11s0u1`{.literal}
        以太网设备相关联
    -   `Wi-Fi`{.literal} 与 `wlp61s0`{.literal} Wi-Fi 设备相关联
    :::
:::
::: orderedlist
**流程**
1.  在 `active-backup`{.literal} 模式中创建绑定接口：
    ``` literallayout
    # nmcli connection add type bond con-name bond0 ifname bond0 bond.options "mode=active-backup"
    ```
    这个命令为接口和连接配置集 `bond0`{.literal} 命名。
2.  配置绑定的 IPv4 设置：
    ::: itemizedlist
    -   如果您的网络中的 DHCP 服务器为主机分配 IPv4
        地址，则不需要任何操作。
    -   如果您的本地网络需要静态 IPv4
        地址，请将地址、网络掩码、默认网关、DNS 服务器和 DNS
        搜索域设置为 `bond0`{.literal} 连接：
        ``` literallayout
        # nmcli connection modify bond0 ipv4.addresses '192.0.2.1/24'
        # nmcli connection modify bond0 ipv4.gateway '192.0.2.254'
        # nmcli connection modify bond0 ipv4.dns '192.0.2.253'
        # nmcli connection modify bond0 ipv4.dns-search 'example.com'
        # nmcli connection modify bond0 ipv4.method manual
        ```
    :::
3.  配置绑定的 IPv6 设置：
    ::: itemizedlist
    -   如果您的网络中的路由器或者 DHCP 服务器为主机分配 IPv6
        地址，则不需要任何操作。
    -   如果您的本地网络需要静态 IPv6
        地址，请将地址、网络掩码、默认网关、DNS 服务器和 DNS
        搜索域设置为 `bond0`{.literal} 连接：
        ``` literallayout
        # nmcli connection modify bond0 ipv6.addresses '2001:db8:1::1/64'
        # nmcli connection modify bond0 ipv6.gateway '2001:db8:1::fffe'
        # nmcli connection modify bond0 ipv6.dns '2001:db8:1::fffd'
        # nmcli connection modify bond0 ipv6.dns-search 'example.com'
        # nmcli connection modify bond0 ipv6.method manual
        ```
    :::
4.  显示连接配置集：
    ``` literallayout
    # nmcli connection show
    NAME             UUID                                  TYPE      DEVICE
    Docking_station  256dd073-fecc-339d-91ae-9834a00407f9  ethernet  enp11s0u1
    Wi-Fi            1f1531c7-8737-4c60-91af-2d21164417e8  wifi      wlp61s0
    ...
    ```
    下一步需要连接配置集的名称和以太网设备名称。
5.  为绑定分配以太网连接的配置：
    ``` literallayout
    # nmcli connection modify Docking_station master bond0
    ```
6.  为绑定分配 Wi-Fi 连接的连接配置集：
    ``` literallayout
    # nmcli connection modify Wi-Fi master bond0
    ```
7.  如果您的 Wi-Fi 网络使用 MAC 过滤来只允许允许列表中的 MAC
    地址访问网络，请配置网络管理器(NetworkManager)为绑定动态分配活跃端口的
    MAC 地址：
    ``` literallayout
    # nmcli connection modify bond0 +bond.options fail_over_mac=1
    ```
    使用这个设置时，您必须将 Wi-Fi 设备的 MAC 地址设置为 allow
    列表，而不是以太网和 Wi-Fi 设备的 MAC 地址。
8.  将与以太连接关联的设备设置为绑定的主设备：
    ``` literallayout
    # nmcli con modify bond0 +bond.options "primary=enp11s0u1"
    ```
    使用这个设置时，如果可用，绑定总是使用以太网连接。
9.  配置网络管理器(NetworkManager)在激活 `bond0`{.literal}
    设备时自动激活端口：
    ``` literallayout
    # nmcli connection modify bond0 connection.autoconnect-slaves 1
    ```
10. 激活 `bond0`{.literal} 连接：
    ``` literallayout
    # nmcli connection up bond0
    ```
:::
::: itemizedlist
**验证步骤**
-   显示当前活跃的设备，绑定及其端口的状态：
    ``` literallayout
    # cat /proc/net/bonding/bond0
    Ethernet Channel Bonding Driver: v3.7.1 (April 27, 2011)
    Bonding Mode: fault-tolerance (active-backup) (fail_over_mac active)
    Primary Slave: enp11s0u1 (primary_reselect always)
    Currently Active Slave: enp11s0u1
    MII Status: up
    MII Polling Interval (ms): 1
    Up Delay (ms): 0
    Down Delay (ms): 0
    Peer Notification Delay (ms): 0
    Slave Interface: enp11s0u1
    MII Status: up
    Speed: 1000 Mbps
    Duplex: full
    Link Failure Count: 0
    Permanent HW addr: 00:53:00:59:da:b7
    Slave queue ID: 0
    Slave Interface: wlp61s0
    MII Status: up
    Speed: Unknown
    Duplex: Unknown
    Link Failure Count: 2
    Permanent HW addr: 00:53:00:b3:22:ba
    Slave queue ID: 0
    ```
:::
::: itemizedlist
**其它资源**
-   [配置以太网连接](#configuring-an-ethernet-connection_configuring-and-managing-networking.html "第 8 章 配置以太网连接"){.link}
-   [管理 Wi-Fi
    连接](#managing-wi-fi-connections_configuring-and-managing-networking.html "第 9 章 管理 Wi-Fi 连接"){.link}
-   [配置网络绑定](#configuring-network-bonding_configuring-and-managing-networking.html "第 13 章 配置网络绑定"){.link}
:::
:::
:::
[]{#configuring-a-vpn-connection_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#configuring-a-vpn-connection_configuring-and-managing-networking.html#configuring-a-vpn-connection_configuring-and-managing-networking}第 14 章 配置 VPN 连接 {.title}
:::
这部分论述了如何配置虚拟专用网络（VPN）连接。
VPN 是通过互联网连接到本地网络的一种方式。`IPsec`{.literal} 由
`Libreswan`{.literal} 提供是创建 VPN 的首选方法。`Libreswan`{.literal}
是 VPN 在用户空间 `IPsec`{.literal} 的一个实现。VPN
通过在中间网络（比如互联网）设置隧道，启用 LAN 和另一个远程 LAN
之间的通信。为了安全起见，VPN
隧道总是使用认证和加密。对于加密操作，`Libreswan`{.literal} 使用
`NSS`{.literal} 库。
::: section
::: titlepage
# []{#configuring-a-vpn-connection_configuring-and-managing-networking.html#configuring-a-VPN-connection-with-control-center_configuring-a-vpn-connection}使用 control-center 配置 VPN 连接 {.title}
:::
这个步骤描述了如何使用`control-center`{.literal}配置 VPN 连接。
::: itemizedlist
**先决条件**
-   已安装 `NetworkManager-libreswan-gnome`{.literal} 软件包。
:::
::: orderedlist
**流程**
1.  按 [**Super**]{.keycap} 键，键入 `Settings`{.literal}，然后按
    [**Enter**]{.keycap} 键打开 `control-center`{.literal} 应用程序。
2.  选择左侧的 `Network`{.literal} 条目。
3.  点 [**+**]{.keycap} 图标。
4.  选择 `VPN`{.literal}。
5.  选择 `Identity`{.literal} 菜单条目来查看基本配置选项：