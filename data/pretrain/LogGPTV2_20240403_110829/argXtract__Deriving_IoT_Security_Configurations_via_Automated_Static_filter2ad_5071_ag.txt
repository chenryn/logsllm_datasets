FIE on firmware: Finding vulnerabilities in embedded systems using symbolic
execution. In 22nd USENIX Security Symposium (USENIX Security 13). 463–478.
[29] Alessandro Di Federico, Mathias Payer, and Giovanni Agosta. [n. d.]. rev. ng: a
unified binary analysis framework to recover CFGs and function boundaries. In
Proceedings of the 26th International Conference on Compiler Construction.
[31] Kassem Fawaz, Kyu-Han Kim, and Kang G Shin. 2016. Protecting privacy of
[30] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley. 2014. Blanket
execution: Dynamic similarity testing for program binaries and components. In
23rd {USENIX} Security Symposium ({USENIX} Security 14). 303–317.
{BLE} device users. In 25th {USENIX} Security Symposium ({USENIX} Security
16). 1205–1221.
[32] Jan Friebertshäuser, Florian Kosterhon, Jiska Classen, and Matthias Hollick. 2020.
Polypyus–The Firmware Historian.
[33] Garmin Canada Inc. 2020. What is ANT+. Available:
https://www.thisisant.com/consumer/ant-101/what-is-ant [Accessed: 27 July
2020].
[34] Garmin Canada Inc. 2020. What kind of security does ANT provide? Available:
https://www.thisisant.com/developer/resources/tech-faq/what-kind-of-
security-does-ant-provide-1 [Accessed: 07 Dec 2020].
[35] Liam Goudge and Simon Segars. 1996. Thumb: reducing the cost of 32-bit RISC
performance in portable and consumer applications. In COMPCON’96.
Technologies for the Information Superhighway Digest of Papers. IEEE, 176–181.
[36] Laune C Harris and Barton P Miller. 2005. Practical analysis of stripped binary
code. ACM SIGARCH Computer Architecture News 33, 5 (2005), 63–68.
[37] Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and Martin Vechev.
[n. d.]. Debin: Predicting debug information in stripped binaries. In Proceedings
of the 2018 ACM SIGSAC Conference on Computer and Communications Security.
[38] Hex-Rays. 2021. IDA pro disassembler. Available:
https://www.hex-rays.com/products/ida/support/download_freeware/.
[Accessed: 31 Jan 2021].
[39] Andrew Hilts, Christopher Parsons, and Jeffrey Knockel. 2016. Every Step You
Fake: A Comparative Analysis of Fitness Tracker Privacy and Security. (2016).
[40] Taher Issoufaly and Pierre Ugo Tournoux. 2017. BLEB: Bluetooth Low Energy
Botnet for large scale individual tracking. In 2017 1st International Conference on
Next Generation Computing Applications (NextComp). IEEE, 115–120.
[41] Muhui Jiang, Yajin Zhou, Xiapu Luo, Ruoyu Wang, Yang Liu, and Kui Ren. 2020.
An Empirical Study on ARM Disassembly Tools. In Proceedings of the 29th ACM
SIGSOFT International Symposium on Software Testing and Analysis (Virtual
Event, USA) (ISSTA 2020). Association for Computing Machinery, New York, NY,
USA, 401–414. https://doi.org/10.1145/3395363.3397377
[42] Anastasis Keliris and Michail Maniatakos. 2018. ICSREF: A framework for
automated reverse engineering of industrial control systems binaries. arXiv
preprint arXiv:1812.03478 (2018).
[43] Gerhard Klostermeier and Matthias Deeg. 2018. Case Study: Security of Modern
Bluetooth Keyboards. (2018). Available:
https://www.syss.de/fileadmin/dokumente/Publikationen/2018/Security_of_
Modern_Bluetooth_Keyboards.pdf [Accessed: 30 Nov 2020].
[44] Jesse Kornblum, Helmut Grohne, and Tsukasa OI. 2021. ssdeep - Fuzzy hashing
program. Available: https://ssdeep-project.github.io/ssdeep/index.html
[Accessed 16-Mar-2021].
[45] Selena Larson. 2017. FDA confirms that St. Jude’s cardiac devices can be hacked.
Available:
https://money.cnn.com/2017/01/09/technology/fda-st-jude-cardiac-hack.
[Accessed: 11 June 2020].
[46] Yeo Reum Lee, BooJoong Kang, and Eul Gyu Im. 2013. Function matching-based
binary-level software similarity calculation. In Proceedings of the 2013 Research
in Adaptive and Convergent Systems. 322–327.
[47] Franco Loi, Arunan Sivanathan, Hassan Habibi Gharakheili, Adam Radford, and
Vijay Sivaraman. 2017. Systematically evaluating security and privacy for
consumer IoT devices. In Proceedings of the 2017 Workshop on Internet of Things
Security and Privacy. 1–6.
[48] Dennis Mantz, Jiska Classen, Matthias Schulz, and Matthias Hollick. 2019.
InternalBlue-Bluetooth binary patching and experimentation framework. In
873ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pallavi Sivakumaran and Jorge Blasco
Proceedings of the 17th Annual International Conference on Mobile Systems,
Applications, and Services. 79–90.
[49] Luca Massarelli, Giuseppe Antonio Di Luna, Fabio Petroni, Roberto Baldoni, and
Leonardo Querzoni. 2019. Safe: Self-attentive function embeddings for binary
similarity. In International Conference on Detection of Intrusions and Malware, and
Vulnerability Assessment. Springer, 309–329.
[50] Sanjay M Mishra. 2015. Wearable Android: Android Wear and Google Fit app
development. John Wiley & Sons.
[51] Mitre. 2015. CVE-2015-2880. Available:
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2880 [Accessed: 14
July 2020].
[52] Mitre. 2018. CVE-2018-10825. Available:
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10825 [Accessed: 14
July 2020].
[53] Mitre. 2019. CVE-2019-16518. Available:
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16518 [Accessed: 14
July 2020].
[54] Ginger Myles and Christian Collberg. 2005. K-gram based software birthmarks.
In Proceedings of the 2005 ACM symposium on Applied computing. 314–318.
[55] National Security Agency. 2020. Ghidra.
https://github.com/NationalSecurityAgency/ghidra.
[56] Nordic Semiconductor. 2020. nRF Connect for Mobile.
https://www.nordicsemi.com/Software-and-tools/Development-Tools/nRF-
Connect-for-mobile.
[57] Nordic Semiconductor ASA. 2020. SoftDevices. Available:
https://infocenter.nordicsemi.com/index.jsp?topic=%2Fug_gsg_ses%2FUG%
2Fgsg%2Fsoftdevices.html [Accessed: 03 July 2020].
[58] James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder. 2020.
Probabilistic Naming of Functions in Stripped Binaries. In Annual Computer
Security Applications Conference. 373–385.
[59] Manish Prasad and Tzi-cker Chiueh. 2003. A Binary Rewriting Defense Against
Stack based Buffer Overflow Attacks.. In USENIX Annual Technical Conference,
General Track. 211–224.
[60] Abdullah Qasem, Paria Shirani, Mourad Debbabi, Lingyu Wang, Bernard Lebel,
and Basile L Agba. 2021. Automatic Vulnerability Detection in Embedded
Devices and Firmware: Survey and Layered Taxonomies. ACM Computing
Surveys (CSUR) 54, 2 (2021), 1–42.
[61] Rui Qiao and R Sekar. [n. d.]. Function interface analysis: A principled approach
for function recognition in COTS binaries. In 2017 47th Annual IEEE/IFIP
International Conference on Dependable Systems and Networks (DSN).
[62] Nguyen Anh Quynh. 2020. Capstone: The Ultimate Disassembler.
https://www.capstone-engine.org.
[63] Nguyen Anh Quynh. 2020. Unicorn The Ultimate CPU emulator. Available:
https://www.unicorn-engine.org [Accessed:25 Oct 2020].
[64] Radware. 2006. ‘BrickerBot’ Results In PDoS Attack. Available:
https://security.radware.com/ddos-threats-attacks/brickerbot-pdos-
permanent-denial-of-service/. [Accessed: 11 June 2020].
[65] Giridhar Ravipati, Andrew R Bernat, Nate Rosenblum, Barton P Miller, and
Jeffrey K Hollingsworth. 2007. Toward the deconstruction of Dyninst. Univ. of
Wisconsin, technical report (2007), 32.
[66] Nathan E Rosenblum, Xiaojin Zhu, Barton P Miller, and Karen Hunt. 2008.
Learning to Analyze Binary Computer Code.. In AAAI. 798–804.
[67] Vinay Sachidananda, Suhas Bhairav, and Yuval Elovici. 2019. Spill the Beans:
Extrospection of Internet of Things by Exploiting Denial of Service. EAI
Endorsed Transactions on Security and Safety 6, 20 (2019).
[68] Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing
functions in binaries with neural networks. In 24th USENIX Security Symposium
(USENIX Security 15). 611–626.
[69] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and
Giovanni Vigna. 2015. Firmalice-automatic detection of authentication bypass
vulnerabilities in binary firmware.. In NDSS.
[70] Pallavi Sivakumaran and Jorge Blasco. 2019. A Study of the Feasibility of
Co-located App Attacks against BLE and a Large-Scale Analysis of the Current
Application-Layer Security Landscape. In 28th USENIX Security Symposium
(USENIX Security 19). 1–18.
[71] Pallavi Sivakumaran and Jorge Blasco Alis. 2017. ATT Profiler.
https://github.com/projectbtle/att-profiler.
[72] Pallavi Sivakumaran and Jorge Blasco Alis. 2018. A Low Energy Profile:
Analysing Characteristic Security on BLE Peripherals. In Proceedings of the
Eighth ACM Conference on Data and Application Security and Privacy. 152–154.
[73] Prashast Srivastava, Hui Peng, Jiahao Li, Hamed Okhravi, Howard Shrobe, and
Mathias Payer. 2019. FirmFuzz: automated IoT firmware introspection and
analysis. In Proceedings of the 2nd International ACM Workshop on Security and
Privacy for the Internet-of-Things. 15–21.
[74] Mark Stanislav and Tod Beardsley. 2015. Hacking IoT: A Case Study on Baby
Monitor Exposures and Vulnerabilities. Available:
https://www.rapid7.com/globalassets/external/docs/Hacking-IoT-A-Case-
Study-on-Baby-Monitor-Exposures-and-Vulnerabilities.pdf. [Accessed: 11 June
2020].
[75] Statista Research Department. 2019. IoT connected devices worldwide 2030.
Available: https://www.statista.com/statistics/802690/worldwide-connected-
devices-by-access-technology/. [Accessed: 29 June 2020].
[76] STMicroelectronics. 2018. AN4869: The BlueNRG-1, BlueNRG-2 BLE OTA
[77] STMicroelectronics. 2019. PM0257: BlueNRG-1, BlueNRG-2 BLE stack v2.x
(over-the-air) firmware upgrade.
programming guidelines.
[78] Texas Instruments. 2020. Bluetooth Low Energy software stack. Available:
https://www.ti.com/tool/BLE-STACK [Accessed: 02 July 2020].
[79] Texas Instruments. 2020. A fully compliant Zigbee 3.x solution: Z-Stack.
Available: https://www.ti.com/tool/Z-STACK [Accessed: 02 July 2020].
[80] Iain Thomson. 2016. Wi-Fi baby heart monitor may have the worst IoT security
of 2016. Available: https:
//www.theregister.com/2016/10/13/possibly_worst_iot_security_failure_yet.
[Accessed: 11 June 2020].
[81] Thread Group. 2019. What is Thread. Available:
[82] Jörn Tillmanns, Jiska Classen, Felix Rohrbach, and Matthias Hollick. 2020.
https://www.threadgroup.org/what-Is-thread [Accessed: 27 July 2020].
Firmware Insider: Bluetooth Randomness is Mostly Random. In 14th {USENIX}
Workshop on Offensive Technologies ({WOOT} 20).
[83] Fish Wang and Yan Shoshitaishvili. 2017. Angr-the next generation of binary
analysis. In 2017 IEEE Cybersecurity Development (SecDev). IEEE, 8–9.
[84] Jiliang Wang, Feng Hu, Ye Zhou, Yunhao Liu, Hanyi Zhang, and Zhe Liu. 2020.
BlueDoor: breaking the secure information flow via BLE vulnerability. In
Proceedings of the 18th International Conference on Mobile Systems, Applications,
and Services. 286–298.
[85] KC Wang. 2017. Embedded real-time operating systems. In Embedded and
Real-Time Operating Systems. Springer, 401–475.
[86] Xueqiang Wang, Yuqiong Sun, Susanta Nanda, and XiaoFeng Wang. [n. d.].
Looking from the mirror: evaluating IoT device security through mobile
companion apps. In 28th USENIX Security Symposium (USENIX Security 19).
[87] Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. 2020. FirmXRay: Detecting
Bluetooth Link Layer Vulnerabilities From Bare-Metal Firmware. (2020).
[88] Jianliang Wu, Ruoyu Wu, Daniele Antonioli, Mathias Payer, Nils Ole
Tippenhauer, Dongyan Xu, Dave Jing Tian, and Antonio Bianchi. 2021.
LIGHTBLUE: Automatic Profile-Aware Debloating of Bluetooth Stacks. In
Proceedings of the USENIX Security Symposium (USENIX Security).
[89] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017.
Neural network-based graph embedding for cross-platform binary code
similarity detection. In Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security. 363–376.
[90] Xiaokang Yin, Shengli Liu, Long Liu, and Da Xiao. 2018. Function recognition in
stripped binary of embedded devices. IEEE Access 6 (2018), 75682–75694.
[91] Kim Zetter. 2015. Hackers Can Seize Control of Electric Skateboards and Toss
Riders. Available: https://www.wired.com/2015/08/hackers-can-seize-control-
of-electric-skateboards-and-toss-riders-boosted-revo/ [Accessed: 27 July 2020].
[92] Wei Zhou, Yan Jia, Yao Yao, Lipeng Zhu, Le Guan, Yuhang Mao, Peng Liu, and
Yuqing Zhang. 2019. Discovering and Understanding the Security Hazards in the
Interactions between IoT Devices, Mobile Apps, and Clouds on Smart Home
Platforms. In 28th USENIX Security Symposium (USENIX Security 19). USENIX
Association, Santa Clara, CA, 1133–1150.
[93] Zigbee Alliance. 2019. What is Zigbee? Available:
https://Zigbeealliance.org/solution/Zigbee/ [Accessed: 27 July 2020].
[94] Chaoshun Zuo, Haohuang Wen, Zhiqiang Lin, and Yinqian Zhang. 2019.
Automatic fingerprinting of vulnerable BLE IoT devices with static uuids from
mobile apps. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security. 1469–1483.
A ANALYSIS OF POTENTIAL INFORMATION
SOURCES FOR IOT VULNERABILITIES
There are several possible sources for obtaining information regard-
ing the configurations of IoT devices. These include the devices
themselves, the firmware they run, or any application or website
they interface with. We analyse the merits and shortcomings of
each of these potential sources below:
Devices: Several security and privacy analyses have been con-
ducted against IoT devices [27, 47, 67, 72]. Interfacing with physical
devices can reveal behavioural characteristics, particularly those
where user interaction is required. Combining hardware device
tests with an analysis of communication interfaces can yield even
874argXtract: Automated Analysis of Stripped IoT Binaries
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
more details. However, large-scale analyses can be difficult to auto-
mate as well as being prohibitively expensive due to the need for
purchasing devices. Further, a variety of communication protocols
may be used, particularly with IoT peripherals, which could require
specialist hardware or software for each traffic analysis.
Mobile applications: IoT peripherals tend to interface with
a companion mobile app. Such apps are often available as large
repositories, are reasonably easy to analyse, and can provide indi-
cations of higher-layer processing. As such, they have been used
in security analyses to identify vulnerabilities in the associated
devices [20, 21, 70, 86, 94]. However, one app may interface with
multiple devices, making it difficult to separate out relevant infor-
mation for a single device. Also, low-level protocol details may
occur at the mobile OS level, transparent to the app, or the app may
act as a conduit between a device and a server without processing
the data itself. In such cases, it may not be possible to get a complete
picture of the IoT device’s security configuration via the app.
Web interface: If an IoT device communicates with an external
server, the exchanged messages may reveal information regarding
its configuration, particularly if it receives configuration commands
from the server. However, performing tests against these servers
may have legal implications. Also, automated tests may not always
be feasible on a large scale in the absence of physical devices because
the server may require authenticated requests from the device [92].
Firmware: The firmware on an IoT device tends to apply to
a single type of device and generally reflects its configuration
and functionality exactly. This has led firmware binaries to be
the information source of choice for a number of security analy-
ses [24, 25, 28, 42, 69]. However, firmware binaries are not always
easy to obtain, as developers do not always make them publicly
available. More importantly, firmware analysis is, due to its own
nature, far more complex than, e.g., mobile app analysis.
B VALIDITY CHECKS
In order to ensure that our analysis is performed on valid data,
we perform stringent validity checks on the output obtained from
argXtract. This is particularly done in the case of complex output
structures such as those for sd_ble_gatts_characteristic_add,
which has several levels of nested fields.
argXtract stores service handles for every service that is added
via the sd_ble_gatts_service_add call. For each characteristic
extracted from sd_ble_gatts_characteristic_add, we attempt
to match it to a service handle. If a characteristic cannot be uniquely
matched with a service in this way, it is not considered further (even
if its permission structure is fully valid as described below).
A BLE characteristic has certain properties (e.g., read, write,
notify) indicating how it may be accessed. It will also have corre-
sponding permissions. We test for the validity of such permissions
according to the properties. That is, if a characteristic has the read
property, we ensure that its read_perm (i.e., read permissions) has
a valid security mode and level, as described in the BLE specifica-
tion. If a characteristic has the notify property, we ensure that the
write permissions for its CCCD are valid. If a property isn’t set for a
characteristic, then an invalid permission structure can be ignored.
We obtained invalid results for a single binary within our dataset.
Figure 8: FirmXRay output.
We also perform random manual checks on known character-
istics, i.e., whose properties and permissions are known (e.g., SIG-
defined or Nordic DFU). In this manner, we endeavour to produce
the most accurate analysis results.
C COMPARISON: ARGXTRACT, FIRMXRAY
We executed argXtract and FirmXRay against a random subset
of 302 binaries from the FirmXRay dataset, focusing on the sd_-
ble_gatts_service_add and sd_ble_gatts_characteristic_-
add supervisor calls, as those are commonly available in both tools.
argXtract returned non-empty outputs for 161 binaries (1.5hr
execution time). As described in Appendix B, we perform strin-
gent validity checks on characteristic structures that are output
by argXtract- particularly in terms of correct permission values.
These permissions are checked depending on the characteristic
properties. argXtract produced erroneous outputs for 16 binaries,
of which 14 were found to be different versions of the same binary.
FirmXRay returned 282 non-empty outputs. However, a signifi-
cant number (154) were found to contain invalid values for permis-
sions. Despite this, we cannot immediately take the output to be
incorrect because, as we have mentioned previously, this depends
on the characteristic properties. Unfortunately, we are unable to
perform the same type of validation as we do for argXtract (by
examining the property set), as the characteristic property set is
not available within FirmXRay’s output. That is, the characteristic
properties for sd_ble_gatts_characteristic_add are obtained
by parsing a structure pointed to by register r1, which also includes
the CCCD permissions, while the read and write permissions for the
characteristic value are obtained by parsing a structure pointed to by
register r2. The complete structure is available within argXtract’s
output, while only the fields r2, readperm, writePerm, type and
uuid are present within the output obtained by FirmXRay.
To illustrate this issue, we provide sample output structures (for
a single characteristic, due to space considerations) obtained by
FirmXRay and argXtract for (the same characteristic within) the
same input binary file in Figures 8 and 9, respectively. The values
output by FirmXRay for readperm and writePerm are invalid in
this example. However, the characteristic properties (within the
char_props construct in argXtract’s output, as depicted in Fig-
ure 9) indicate that the characteristic only has the notify property,
not read or write. This means the invalid values can be disregarded.
However, information about characteristic properties is absent from
FirmXRay’s output, making it infeasible to filter out invalid values.
For this reason, we are unable to perform a meaningful comparison
of the results of the two tools.
"SD_BLE_GATTS_CHARACTERISTIC_ADD":[{"Solved":true,"Values":{"r2":537034148,"readperm":240,"writePerm":240,"type":1,"uuid":10843}}]875ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Pallavi Sivakumaran and Jorge Blasco
Figure 9: argXtract output.
"sd_ble_gatts_characteristic_add":[{"service_handle":"4b8b","p_char_md":{"char_props":{"ignore":0,"auth_signed_wr":0,"indicate":0,"notify":1,"write":0,"write_wo_resp":0,"read":0,"broadcast":0},"char_ext_props":{"wr_aux":0,"reliable_wr":0},"p_char_user_desc":0,"char_user_desc_max_size":0,"char_user_desc_size":0,"p_char_pf":{"format":0,"exponent":0,"unit":0,"name_space":0,"desc":0},"p_user_desc_md":{"read_perm":{"security_level":0,"security_mode":0},"write_perm":{"security_level":0,"security_mode":0},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":0,"vlen":0},"p_cccd_md":{"read_perm":{"security_level":1,"security_mode":1},"write_perm":{"security_level":1,"security_mode":1},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":1,"vlen":0},"p_sccd_md":{"read_perm":{"security_level":0,"security_mode":0},"write_perm":{"security_level":0,"security_mode":0},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":0,"vlen":0}},"p_attr_char_value":{"p_uuid":{"uuid":"2a5b","type":1},"p_attr_md":{"read_perm":{"security_level":0,"security_mode":0},"write_perm":{"security_level":0,"security_mode":0},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":1,"vlen":1},"init_len":1,"init_offs":0,"max_len":20,"p_value":"00"},"value_handle":"2d5f","user_desc_handle":"2567","cccd_handle":"ac66","sccd_handle":"3559"}]876