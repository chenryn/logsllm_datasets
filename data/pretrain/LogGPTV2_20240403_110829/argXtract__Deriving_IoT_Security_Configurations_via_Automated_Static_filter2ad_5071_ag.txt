### Analysis of Potential Information Sources for IoT Vulnerabilities

Several potential sources can provide information regarding the configurations of IoT devices. These include the devices themselves, their firmware, any interfacing applications, and associated websites. Below, we analyze the advantages and limitations of each source:

- **Devices**: Security and privacy analyses have been conducted on IoT devices [27, 47, 67, 72]. Interfacing with physical devices can reveal behavioral characteristics, especially those involving user interaction. Combining hardware tests with communication interface analysis can yield detailed insights. However, large-scale analyses are challenging to automate and can be costly due to the need to purchase devices. Additionally, a variety of communication protocols may be used, requiring specialized hardware or software for each traffic analysis.

- **Mobile Applications**: IoT peripherals often interact with companion mobile apps. These apps are typically available in large repositories, are relatively easy to analyze, and can provide indications of higher-layer processing. They have been used in security analyses to identify vulnerabilities in associated devices [20, 21, 70, 86, 94]. However, one app may interface with multiple devices, making it difficult to isolate relevant information for a single device. Low-level protocol details may also occur at the mobile OS level, transparent to the app, or the app may act as a conduit between a device and a server without processing the data itself, limiting the completeness of the security configuration picture.

- **Web Interface**: If an IoT device communicates with an external server, exchanged messages can reveal configuration information, particularly if the server sends configuration commands. However, testing against these servers may have legal implications. Automated tests may also be infeasible on a large scale without physical devices, as the server may require authenticated requests from the device [92].

- **Firmware**: The firmware on an IoT device is specific to a single type of device and accurately reflects its configuration and functionality. This has made firmware binaries a preferred source for security analyses [24, 25, 28, 42, 69]. However, firmware binaries are not always easily obtainable, as developers do not always make them publicly available. Moreover, firmware analysis is inherently more complex than, for example, mobile app analysis.

### Validity Checks

To ensure the accuracy of our analysis, we perform stringent validity checks on the output obtained from argXtract. This is particularly important for complex output structures such as those for `sd_ble_gatts_characteristic_add`, which have several levels of nested fields.

- **Service Handles**: argXtract stores service handles for every service added via the `sd_ble_gatts_service_add` call. For each characteristic extracted from `sd_ble_gatts_characteristic_add`, we attempt to match it to a service handle. If a characteristic cannot be uniquely matched to a service, it is not considered further, even if its permission structure is valid.

- **Characteristic Properties and Permissions**: A BLE characteristic has properties (e.g., read, write, notify) indicating how it may be accessed, along with corresponding permissions. We test the validity of these permissions according to the properties. For example, if a characteristic has the read property, we ensure that its `read_perm` (read permissions) has a valid security mode and level as per the BLE specification. If a characteristic has the notify property, we ensure that the write permissions for its CCCD are valid. If a property is not set for a characteristic, an invalid permission structure can be ignored.

- **Validation Results**: We obtained invalid results for a single binary within our dataset. We also perform random manual checks on known characteristics (e.g., SIG-defined or Nordic DFU) to ensure the most accurate analysis results.

### Comparison: argXtract vs. FirmXRay

We executed argXtract and FirmXRay against a random subset of 302 binaries from the FirmXRay dataset, focusing on the `sd_ble_gatts_service_add` and `sd_ble_gatts_characteristic_add` supervisor calls, as these are commonly available in both tools.

- **argXtract**: Returned non-empty outputs for 161 binaries (1.5-hour execution time). We performed stringent validity checks on the characteristic structures, particularly in terms of correct permission values. argXtract produced erroneous outputs for 16 binaries, of which 14 were different versions of the same binary.

- **FirmXRay**: Returned 282 non-empty outputs, but a significant number (154) contained invalid values for permissions. Despite this, we cannot immediately conclude that the output is incorrect because it depends on the characteristic properties. Unfortunately, we are unable to perform the same type of validation as we do for argXtract, as the characteristic property set is not available within FirmXRay’s output. 

To illustrate this issue, we provide sample output structures (for a single characteristic, due to space considerations) obtained by FirmXRay and argXtract for the same input binary file in Figures 8 and 9, respectively. The values output by FirmXRay for `readperm` and `writePerm` are invalid in this example. However, the characteristic properties (within the `char_props` construct in argXtract’s output) indicate that the characteristic only has the notify property, not read or write. This means the invalid values can be disregarded. Since this information is absent from FirmXRay’s output, it is infeasible to filter out invalid values, making a meaningful comparison of the results from the two tools difficult.

**Figure 8: FirmXRay Output**
```json
"SD_BLE_GATTS_CHARACTERISTIC_ADD":[{"Solved":true,"Values":{"r2":537034148,"readperm":240,"writePerm":240,"type":1,"uuid":10843}}]
```

**Figure 9: argXtract Output**
```json
"sd_ble_gatts_characteristic_add":[{"service_handle":"4b8b","p_char_md":{"char_props":{"ignore":0,"auth_signed_wr":0,"indicate":0,"notify":1,"write":0,"write_wo_resp":0,"read":0,"broadcast":0},"char_ext_props":{"wr_aux":0,"reliable_wr":0},"p_char_user_desc":0,"char_user_desc_max_size":0,"char_user_desc_size":0,"p_char_pf":{"format":0,"exponent":0,"unit":0,"name_space":0,"desc":0},"p_user_desc_md":{"read_perm":{"security_level":0,"security_mode":0},"write_perm":{"security_level":0,"security_mode":0},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":0,"vlen":0},"p_cccd_md":{"read_perm":{"security_level":1,"security_mode":1},"write_perm":{"security_level":1,"security_mode":1},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":1,"vlen":0},"p_sccd_md":{"read_perm":{"security_level":0,"security_mode":0},"write_perm":{"security_level":0,"security_mode":0},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":0,"vlen":0}},"p_attr_char_value":{"p_uuid":{"uuid":"2a5b","type":1},"p_attr_md":{"read_perm":{"security_level":0,"security_mode":0},"write_perm":{"security_level":0,"security_mode":0},"ignore":0,"wr_auth":0,"rd_auth":0,"vloc":1,"vlen":1},"init_len":1,"init_offs":0,"max_len":20,"p_value":"00"},"value_handle":"2d5f","user_desc_handle":"2567","cccd_handle":"ac66","sccd_handle":"3559"}]
```