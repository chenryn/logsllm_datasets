}
标准库中提供了一个更完善的函数 strtol，它将字符串转换为长整型数。有关函数 strtol
的详细信息，请参见附录 B.5 节。
把循环控制部分集中在一起，对于多重嵌套循环，优势更为明显。下面的函数是对整型 数组进行排序的 Shell 排序算法。Shell 排序算法是 D. L. Shell 于 1959 年发明的，其基本思想 是:先比较距离远的元素，而不是像简单交换排序算法那样先比较相邻的元素。这样可以快
速减少大量的无序情况，从而减轻后续的工作。被比较的元素之间的距离逐步减少，直到减 少为 1，这时排序变成了相邻元素的互换。
/* shellsort:              sort v[0]...v[n•1] into increasing order */ void shellsort(int v[], int n)
{
int gap, i, j, temp;
for (gap = n/2; gap > 0; gap /= 2) for (i = gap; i =0 && v[j]>v[j+gap]; j•=gap) { temp = v[j];
v[j] = v[j+gap]; v[j+gap] = temp;
}
}
该函数中包含一个三重嵌套的 for 循环语句。最外层的 for 语句控制两个被比较元素之间的 距离，从 n/2 开始，逐步进行对折，直到距离为 0。中间层的 for 循环语句用于在元素间移 动位置。最内层的 for 语句用于比较各对相距 gap 个位置的元素，当这两个元素逆序时把它 们互换过来。由于 gap 的值最终要递减到 1，因此所有元素最终都会位于正确的排序位置上。 注意，即使最外层 for 循环的控制变量不是算术级数，for 语句的书写形式仍然没有变，这 就说明 for 语句具有很强的通用性。
逗号运算符“ ,"也是 C 语言优先级最低的运算符，在 for 语句中经常会用到它。被逗 号分隔的一对表达式将按照从左到右的顺序进行求值，表达式右边的操作数的类型和值即为 其结果的类型和值。这样，在 for 循环语句中，可以将多个表达式放在各个语句成分中，比 如同时处理两个循环控制变晕。我们可以通过下面的函数 reverse(s)来举例。该函数用于 倒置字符串 s 中各个字符的位置。
#include 
/* reverse:              reverse string s in place */ void reverse(char s[])
{
int c, i, j;
for (i = 0, j = strlen(s)•1; i  0);              /* delete it */ if (sign = 0; n••)
if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n') break;
s[n+1] = '\0';
return n;
}
strlen 函数返回字符串的长度。for 循环从字符串的末尾开始反方向扫描寻找第一个不 是空格符、制表符以及换行符的字符。当找到符合条件的第一个字符，或当循环控制变量 n 变为负数时(即整个字符串都被扫描完时)，循环终止执行。读者可以验证，即使字符串为空 或仅包含空白符，该函数也是正确的。
continue 语句与 break 语句是相关联的，但它没有 break 语句常用。continue 语 句用于使 for、while 或 do•while 语句开始下一次循环的执行。在 while 与 do•while 语句中，continue 语句的执行意味着立即执行测试部分;在 for 循环中，则意味着使控制 转移到递增循环变量部分。continue 语句只用于循环语句，不用于 switch 语句。某个循 环包含的 switch 语句中的 continue 语句，将导致进入下一次循环。
例如，下面这段程序用于处理数组 a 中的非负元素。如果某个元素的值为负，则跳过不 处理。
for (i = 0; i 
#define MAXLINE 1000 /* maximum input line length */
int getline(char line[], int max)
int strindex(char source[], char searchfor[]);
char pattern[] = "ould";              /* pattern to search for */
/* find all lines matching pattern */ main()
{
char line[MAXLINE]; int found = 0;