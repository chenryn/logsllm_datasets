who show up to vote, then the back-end system, if designed
properly, should be able to detect the existence of counterfeit
votes. However, because m_VoterSN is only stored for those
who did not vote, there will be no way for the tabulating
system to distinguish the real votes from the counterfeit votes.
This would cast serious doubt on the validity of the election
results. The solution proposed by one election ofﬁcial, to have
everyone vote again, does not seem like a viable solution.
C. Accessing administrator and poll worker functionality
As noted in Section II, in addition to the voter cards that
normal voters use when they vote, there are also administrator
cards and ender cards, which have special purposes in this
system. The administrator cards give the possessor the ability
to access administrative functionality (the administrative dia-
log BallotStation/AdminDlg.cpp), and both types of
cards allow the possessor to end the election (hence the term
“ender card”).
Just as an adversary can manufacture his or her own
voter cards, an adversary can manufacture his or her own
administrator and ender cards (administrator cards have an
easily-circumventable PIN, which we will discuss shortly).
This attack is easiest if the attacker has knowledge of the
Diebold code or can interact with a legitimate administrator
or ender card, since otherwise the attacker would not know
what distinguishes an administrator or ender card from a voter
card. (The distinction is that, for a voter card m_CardType
is set to 0x01, for an ender card the value is 0x02, and for
an administrator card the value is 0x04.)
As one might expect, an adversary in possession of such
illicit cards has further attack options against the Diebold
system. Using a homebrew administrator card, a poll worker,
who might not otherwise have access to the administrator
functions of the Diebold system but who does have access
to the voting machines before and after the elections, could
gain access to the administrator controls. If a malicious voter
entered an administrator or ender card into the voting device
instead of the normal voter card, then the voter would be able
to terminate the election and, if the card is an administrator
card, gain access to additional administrative controls.
The use of administrator or ender cards prior to the com-
pletion of the actual election represents an interesting denial-
of-service attack. Once “ended,” the voting terminal will no
longer accept new voters (see CVoteDlg::OnCardIn())
until the terminal is somehow reset. Such an attack, if mounted
simultaneously by multiple people, could temporarily shut
down a polling place. If a polling place is in a precinct
considered to favor one candidate over another, attacking that
speciﬁc polling place could beneﬁt the less-favored candidate.
Even if the poll workers were later able to resurrect the sys-
tems, the attack might succeed in deterring a large number of
potential voters from voting (e.g., if the attack was performed
over the lunch hour). If such an attack was mounted, one
might think the attackers would be identiﬁed and caught. We
note that many governmental entities, e.g., California, do not
require identiﬁcation to be presented by voters. By the time
the poll workers realize that one of their voting terminals has
been disabled, the perpetrator may have long-since left the
scene. Furthermore, the poll workers may not be computer
savvy and might simply think that all the machines crashed
simultaneously.
CIRCUMVENTING THE ADMINISTRATOR PIN. In order to use
(or create) an administrator card, the attacker must know the
PIN associated (or to be associated) with the card. Because
the system’s use of smartcards was poorly designed, an
adversary could easily learn the necessary information, thereby
circumventing any security the PIN might have offered.
We ﬁrst note that the PIN is sent from the smartcard to
the terminal in cleartext. As a result, anyone who knows the
protocol and wishes to make their own administrator card
could use any PIN of their choice. Even if the attacker does not
know the protocol but has access to an existing administrator
card and wants to make a copy, the adversary could guess the
PIN in just a few trials if the adversary realizes that the PIN
is included as part of a short cleartext message sent from the
card. More speciﬁcally, rather than try all 10000 possibilities
for the PIN, the adversary could try all 4-byte consecutive
substrings of the cleartext message.
IV. ELECTION CONFIGURATIONS AND ELECTION DATA
In election systems, protecting the integrity and privacy
of critical data (e.g., votes, conﬁgurations, ballot deﬁnitions)
is undeniably important. We investigated how the Diebold
system manipulates such data, and found considerable prob-
lems. There are two main vectors for accessing and attacking
the voting system’s data: via physical access to the device
storing the data, or via man-in-the-middle attacks as the data
is transported over some network. The latter assumes that the
systems are connected to a network, which is possible though
may be precluded by election procedures in some jurisdictions.
Attacks via physical access to memory can be quite powerful,
and can be mounted easily by insiders. The network attacks,
which can also be quite powerful, can also be mounted by
insiders as well as sophisticated outsiders.
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
DATA STORAGE OVERVIEW. Each voting terminal has two
distinct types of internal data storage. A main (or system)
storage area contains the terminal’s operating system, program
executables, static data ﬁles such as fonts, and system conﬁg-
uration information, as well as backup copies of dynamic data
ﬁles such as the voting records and audit logs. Each terminal
also contains a removable ﬂash memory storage device that is
used to store the primary copies of these dynamic data ﬁles.
When the terminal is running a standard copy of Windows
(e.g., Windows 2000) the removable storage area is the ﬁrst
ﬂoppy drive; when the terminal is running Windows CE, the
removable storage area is a removable storage card. Storing the
dynamic data on two distinct devices is advantageous for both
reliability and non-malleability: if either of the two storage
mediums fails, data can still be recovered from the copy,
although reconciling differences between these media may be
difﬁcult.
Unfortunately, in Windows CE, the existence of the re-
movable storage device is not enforced properly. Unlike other
versions of Windows, removable storage cards are mounted as
subdirectories under CE. When the voting software wants to
know if a storage card is inserted, it simply checks to see if the
Storage Card subdirectory exists in the ﬁlesystem’s root
directory. While this is the default name for a mounted storage
device, it is also a perfectly legitimate directory name for a
directory in the main storage area. Thus, if such a directory
exists, the terminal can be fooled into using the same storage
device for all of the data.2 This would reduce the amount
of redundancy in the voting system and would increase the
chances that a hardware failure could cause recorded votes to
be lost.
NETWORK OVERVIEW. The Diebold voting machines cannot
work in isolation. They must be able to both receive a ballot
deﬁnition ﬁle as input and report voting results as output.
As described in Section II, there are essentially two ways to
load a voting terminal with an initial election conﬁguration:
via some removable media, such as a ﬂash memory card,
or over a network connection. In the latter case, the voting
terminal could either be plugged directly into the Internet,
could be connected to an isolated local network, or could
use a dialup connection (the dial-up connection could be to
a local ISP, or directly to the election authority’s modem
banks). Diebold apparently gives their customers a variety of
conﬁguration options; electronic networks are not necessary
for the operation of the system. After the election is over,
election results can be sent to a back-end post-processing
server over the network (again, possibly through a dial-up
connection). When results are reported this way, it is not clear
whether these network-reported results become the ofﬁcial
results, or just
the preliminary results (the ofﬁcial results
being computed after the memory cards are removed from all
2This
by
for
can
be
easily
situation
the
FILE ATTRIBUTE TEMPORARY attribute on the directory as described
in
http://msdn.microsoft.com/library/en-us/wcefiles/
htm/_wcesdk_Accessing_Files_on_Other_Storage_Media.
asp.
corrected
checking
the voting terminals and collected and tabulated at a central
location).
We also observe that, even in jurisdictions where voting
terminals are never connected to a network or phone line, the
physical transportation of the ﬂash memory cards from the
voting terminal to the central tabulating system is really just a
“sneaker net.” Such physical card transportation must be robust
against real-world analogies of network man-in-the-middle at-
tacks. Any ﬂaws in the policies and procedures used to protect
the chain of custody could lead to opportunities for these cards
to be read or written by an adversary. Consequently, even if
no electronic computer network is used, we still view network
attacks as critical in the design of a voting system.
A. Tampering with the system conﬁguration
the
The majority of
system conﬁguration informa-
tion for each terminal
is stored in the Windows reg-
istry under HKEY_LOCAL_MACHINE\Software\Global
Election Systems\AccuVote-TS4 . This includes both
identiﬁcation information such as the terminal’s serial number
and more traditional conﬁguration information such as the
COM port to which the smartcard reader is attached. All of the
conﬁguration information is stored in the clear, without any
form of integrity protection. Thus, all an adversary must do
is modify the system registry to trick a given voting terminal
into effectively impersonating any other voting terminal. It is
unclear how the tabulating authority would deal with results
from two different voting terminals with the same voting ID;
at the very least, human intervention to resolve the conﬂict
would probably be required.
The Federal Election Commission draft standard [11] re-
quires each terminal to keep track of the total number of votes
that have ever been cast on it — the “Protective Counter.” This
counter is used to provide yet another method for ensuring that
the number of votes cast on each terminal is correct. However,
as the following code from Utilities/machine.cpp
shows,
the counter is simply stored as an integer in the
ﬁle system.bin in the terminal’s system directory (error
handling code has been removed for clarity):
long GetProtectedCounter()
{
DWORD protectedCounter = 0;
CString filename = ::GetSysDir();
filename += _T("system.bin");
CFile file;
file.Open(filename, CFile::modeRead
| CFile::modeCreate
| CFile::modeNoTruncate);
file.Read(&protectedCounter,
sizeof(protectedCounter));
file.Close();
return protectedCounter;
}
We believe that the Diebold system violates the FEC re-
quirements by storing the protected counter in a simple,
mutable ﬁle. By modifying this counter, an adversary could
cast doubt on an election by creating a discrepancy between
the number of votes cast on a given terminal and the number
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
of votes that are tallied in the election. While the current
method of implementing the counter is totally insecure, even
a cryptographic checksum would not be enough to protect the
counter; an adversary with the ability to modify and view the
counter would still be able to roll it back to a previous state. In
fact, the only solution that would work would be to implement
the protective counter in a tamper-resistant hardware token,
but doing so would require physical modiﬁcations to existing
hardware.
B. Tampering with ballot deﬁnitions
The “ballot deﬁnition” for each election (election.edb)
contains everything from the background color of the screen
and information about the candidates and issues on the ballot
to the PPP username and password to use when reporting the
results, if reporting the results over a dial-up connection. This
data is neither encrypted nor checksummed (cryptographically
or otherwise).
If uninterrupted physical access is ever available to the
voting terminal after the ballot deﬁnition has been loaded,
perhaps the night before an election, using a janitor’s master
keys to the building, then it would be possible for an adversary
to tamper with the voting terminals’ ballot deﬁnition ﬁle or to
even tamper with the voting software itself. Protections such
as physical locks or tamper-evident seals may somewhat allay
these concerns, but we would prefer designs that can be robust
even against physical tampering.
On a potentially much larger scale, if the voting terminals
download the ballot deﬁnition over a network connection, then
an adversary could tamper with the ballot deﬁnition ﬁle en-
route from the back-end server to the voting terminal; of
course, additional poll-worker procedures could be put in place
to check the contents of the ﬁle after downloading, but we
prefer a technological solution. With respect to modifying
the ﬁle as it is sent over a network, we point out that the
adversary need not be an election insider; the adversary could,
for example, be someone working at the local ISP. If the
adversary knows the structure of the ballot deﬁnition, then
the adversary can intercept and modify the ballot deﬁnition
while it is being transmitted. Even if the adversary does not
know the precise structure of the ballot deﬁnition, many of
the ﬁelds inside are easy to identify and change, including the
candidates’ names, which appear as plain ASCII text.
Because no cryptographic techniques are in place to guard
the integrity of the ballot deﬁnition ﬁle, an attacker could add,
remove, or change issues on the ballot, and thereby confuse
the result of the election. In the system, different voters
can be presented with different ballots depending on their
party afﬁliations (see CBallotRelSet::Open(), which
adds different issues to the ballot depending on the voter’s
m_VGroup1 and m_VGroup2 CVoterInfo ﬁelds). If an
attacker changes the party afﬁliations of the candidates, then
he may succeed in forcing the voters to view and vote on
erroneous ballots.3 More subtle attacks are also possible. By
simply changing the order of the candidates as they appear in
the ballot deﬁnition, the results ﬁle will change accordingly.
However, the candidate information itself is not stored in the
results ﬁle, which merely tracks that candidate 1 got so many
votes and candidate 2 got so many other votes. If an attacker
reordered the candidates on the ballot deﬁnition, voters would
unwittingly cast their ballots for the wrong candidate. Ballot
reordering attacks would be particularly effective in polling
locations known to have more voters of one party than another.
(In Section IV-C and Section IV-E we consider other ways of
tampering with the election results.)
C. Impersonating legitimate voting terminals
Consider voting terminals that are conﬁgured to upload
voting totals to some back-end tabulating authority after an
election. An adversary able to pose as a legitimate voting
terminal to the tabulating authority could obviously cause (at
least temporary) damage by reporting false vote counts to
the tabulating system. If the voting terminals use a normal
Internet connection, then an adversary with the ability to sniff
the connection of a legitimate terminal could learn enough
information (e.g., the IP address of the back-end server) to be
able to impersonate a legitimate terminal. If the terminals use
a dialup connection, then the adversary would either need to
be able to sniff a legitimate dialup connection to learn the ap-
propriate information (e.g., the dial-up PPP number, login, and
password), or must garner that information in another way. The
PPP phone number, username, password, and IP address of
the back-end server are stored in the registry HKEY_LOCAL_
MACHINE\Software\Global Election Systems\
AccuVote-TS4\TransferParams, thus making it eas-
ily accessible to an insider working at the polling station.
By studying the conﬁguration of the ballot deﬁnition ﬁles,
we learned that
the deﬁnition ﬁles also store the termi-
nal’s voting center ID, PPP dial-in number, username, pass-
word and the IP address of the back-end server (these are
parsed into a CElectionHeaderItem in TSElection\
TSElectionObj.cpp). The ballot deﬁnition ﬁles thus pro-
vide another vector for an adversary to learn almost all of the
information necessary to impersonate a real voting terminal
over a dialup connection (the adversary would also have to
create a voting terminal ID, although the ID may or may not