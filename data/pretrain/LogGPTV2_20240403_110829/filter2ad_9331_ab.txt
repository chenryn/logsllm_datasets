**1.寻找堆分配函数**
一般来说堆分配函数数就是malloc和free，但是某些情况下会使用calloc分配，calloc和molloc
的区别是calloc在分配后会自动进行清空。
    calloc(0x20);
    //等同于
    ptr=malloc(0x20);
    memset(ptr,0,0x20);
还有一种分配是经过realloc函数进行分配的，realloc函数可以兼职malloc函数和free函数的功能
    #include 
    int main(void) 
    {
      char *chunk,*chunk1;
      chunk=malloc(16);
      chunk1=realloc(chunk,32);
      return 0;
    }
realloc 的操作并不是像字面意义上那么简单，其内部会根据不同的情况进行不同操作
  * 当 realloc(ptr,size) 的 size 不等于 ptr 的 size 时
    * 如果申请 size > 原来 size
      * 如果 chunk 与 top chunk 相邻，直接扩展这个 chunk 到新 size 大小
      * 如果 chunk 与 top chunk 不相邻，相当于 free(ptr),malloc(new_size) 
    * 如果申请 size 
    int main(void) 
    {
      char *chunk;
      chunk=malloc(0);
      puts("Get input:");
      gets(chunk);
      return 0;
    }
    //根据系统的位数，malloc会分配8或16字节的用户空间
    0x602000:   0x0000000000000000  0x0000000000000021
    0x602010:   0x0000000000000000  0x0000000000000000
    0x602020:   0x0000000000000000  0x0000000000020fe1
    0x602030:   0x0000000000000000  0x0000000000000000
**实际上 ptmalloc 分配内存是以双字为基本单位，以 64 位系统为例，分配出来的空间是 16 的整数倍，即用户申请的 chunk 都是 16
字节对齐的。**
#### 1.3 堆利用
在该章节中，我们会按照如下的步骤进行介绍
  1. 介绍我们所熟知的动态内存分配的堆的宏观操作
  2. 介绍为了达到这些操作所使用的数据结构
  3. 介绍利用这些数据结构实现堆的分配与回收的具体操作
  4. 由浅入深地介绍堆的各种利用技巧。
##### 8.3.1 通过堆进行信息泄露
**什么叫做信息泄露，leak？**
在 CTF 中，Pwn 题目一般都是运行在远端服务器上的。因此我们不能获知服务器上的 libc.so 地址、Heap
基地址等地址信息，但是在进行利用的时候往往需要这些地址，此时就需要进行信息泄漏。
**信息泄露的目标**
信息泄露的目标有哪些，可以通过看一下内存分布来了解
    Start              End                Offset             Perm Path
    0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/pwn
    0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/pwn
    0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/pwn
    //首先第一个是主模块的基地址，因为只有在开启 PIE(地址无关代码) 的情况下主模块的基地址才会发生改变，因此通常情况下主模块的地址不需要泄漏。
    0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]  
    //第二个是堆地址，堆地址对于进程来说是每次运行都会改变，当然需要控制堆中的数据时可能就需要先泄漏堆基地址。
    0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so
    0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so
    0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so
    0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so
    0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 
    0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so
    0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 
    0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 
    0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]
    0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]
    0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so
    0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so
    //第三个是 libc.so 的地址，在很多情况下我们只有通过 libc 中的 system 等函数才能实现代码执行，并且  malloc_hook、one_gadgets、IO_FILE 等结构也都储存在 libc 中，因此 libc 的地址也是我们泄漏的目标。 
    0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 
    0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]
    0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]
**通过什么进行信息泄露**
通过前面的知识我们知道 heap 分为
unsorted bin、fastbin、smallbin、large bin 等，
我们逐个考察这些结构来查看如何进行泄漏。
**unsorted bin**
我们构造两个 unsorted bin 然后查看它的内存，现在在 unsorted bin 链表中存在两个块，第一个块的地址是
0x602000、第二个块的地址是 0x6020f0
    0x602000:   0x0000000000000000  0x00000000000000d1
    0x602010:   0x00007ffff7dd1b78  0x00000000006020f0  0x602000 --> 0x0
存在 chunk 1 -> chunk 0 的现象，如果此时 UAF 漏洞存在，我们可以通过 show chunk 1，将 chunk 0 的地址打印出来
同理可以泄露 libc base
    p0 = malloc(0x100);
    free(p0);
    printf("libc: %p\n", *p0);
# bin介绍
fastbins是单链表存储结构
unsortedbin、smallbins、largebins都是双向循环链表存储
并且free掉的chunk，如果大小在0x20~0x80之间会直接放到fastbins链表上去，大于0x80的会先放到unsortedbin上，然后进行整理。
**fastbins的存储采用后进先出的原则：**
后free的chunk会被添加到先free的chunk的后面；同理，通过malloc取出chunk时是先去取最新放进去的。
    free(chunk1)
    free(chunk2)
    free(chunk3)
    ----fastbin-----    chunk3->chunk2->chunk1
    ----------------    malloc(0x10) ->chunk3
    ----fastbin-----    chunk2->chunk1
    ----------------
因此，fastbins中的所有chunk的bk是没有用到的，因为是单链表。
    #include 
    #include 
    int main()
    {
        int *p1=malloc(0x10);
        int *p2=malloc(0x10);
        int *p3=malloc(0x20);
        puts("1");  
        free(p1);
        free(p2);
        free(p3);
        return 0;
    }
断点在puts函数
查看堆和bin
然后再下一步，free p1 p2 p3
**unsortedbins的存储采用先进先出的原则：**
就跟队列差不多，先放进去的先出来，但是当它里面只有一个bin的时候，fd和bk就会指向同一个地方，main_arena+0x58
    --------unsortedbins----------          main_arena+0x58
     unsorted bin chunk1{
        fd;
        bk;
     }
    unsorted bin chunk2{
        fd;
        bk;
    }