attacker controlled number. If the attacker wishes to forward
the call to the victim (to completely intercept and eavesdrop or
tamper with the call) once the call is delivered to the attacker,
the attacker spoofs a new message to the victim’s network to
disable call forwarding, and immediately after places a call
directly to the victim (possibly spooﬁng caller ID) [10].
The second mechanism designates an attacker endpoint as
authoritative for all calls for a mobile phone, and it allows in-
terception of incoming calls to any victim on a mobile network.
Speciﬁcally, this is accomplished by sending a message to the
victim’s network that designates the attacker’s SS7 endpoint
as the responsible core network switch (i.e., the MSC) for the
victim. Because the MSC is responsible for routing incoming
calls to the victim, the attacking MSC can redirect the call to
an attacker-controlled number [7].
The third mechanism abuses an SS7 feature called
CAMEL [7], [10], and it allows interception of a mobile sub-
scriber’s incoming and outgoing calls. CAMEL allows home
networks to provide services while a phone is roaming [11].
One feature is to intercept dialed numbers and modify them. To
exploit this feature, the attacker registers itself as the victim’s
The growth of VoIP has led to a notion of “convergence” of
the Internet and the PSTN — that is, that eventually the phone
network and the Internet will become one single network.
In many cases, voice communications over the Internet have
already replaced PSTN-based communications. This includes
the use of peer-to-peer voice clients like Signal as well as the
use of VoIP to connect to Internet Telephony Service Providers
(ITSPs) who provide calling service from the subscriber to
the global PSTN. These ITSPs may be entities like Vonage or
MagicJack, cable companies, or wholesale service providers.
While peer-to-peer VoIP communications are transmitted ex-
clusively through the Internet, calls that transit ITSPs are likely
to also be facilitated by the larger PSTN — meaning that VoIP
calls are not necessarily protected from attacks against SS7.
VoIP infrastructures are also vulnerable to the entire arsenal of
Internet-based attacks [12], including attacks on interdomain
routing [13] (also discussed later in Section X). However,
convergence does not just mean that some phone calls transit
the Internet; it also means that much of the non-VoIP core
telephony infrastructure has also replaced telephone-network
speciﬁc technologies (e.g., digital
trunks (T1), ISDN, and
ATM networks) with IP-based networks. This vastly lowers
the barriers for core network attack because the core network
can be attacked using open source software like OpenSS7 [14]
running on Internet-connected commodity hardware.
III. HYPOTHESIS
Call audio delay is strongly correlated to the distance it
travels between source and destination. An SS7 redirection
attack increases the distance traveled by the call audio and can
therefore be detected by measuring the RTT of the audio and
comparing it against an expected range for a known distance.
A. Mouth to Ear Delay
Latency measurements in telephony systems differ from
those in traditional IP networks. Speciﬁcally, latency is mea-
sured in terms of “mouth to ear delay,” which represents the
difference between the time that a caller begins speaking and
569
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:21 UTC from IEEE Xplore.  Restrictions apply. 
Hello
Hello
Speaker
S
k
VoIP Phone
Gateway
PSTN
Telecom Tower
Mobile Phone
Listener
ADC Delay
Processing Delay
Transmission Delay
Transmission Delay
Codec and DAC
Delay 
Fig. 2: Mouth-to-ear delay of audio is caused by many factors besides transmission time through the network.
the receiver hears the audio. The ITU G.114 standard provides
guidelines via their “E-Model” transmission rating algorithms
to delineate mouth to ear delay on perceived call quality [15].
As shown in Table I, one-way mouth to ear delay of less than
approximately 400ms results in satisfactory call audio quality
for the majority of phone users. This is in stark contrast to
traditional IP-based networks, where latency of greater than
100ms is widely viewed as negatively impacting a connection.
Figure 2 provides some intuition regarding additional la-
tency is added in telephony. Computational steps, including
analog to digital conversion, network transcoding (i.e., trans-
formation between audio codecs within the network), echo
cancellation, and compression all delay audio delivery. These
delays are on top of the traditional transmission delays in both
the wired and wireless portions of telephony networks.
It is worth noting that the time introduced by the previous
example is doubled when measuring RTT. Accordingly, it is
not outside the normal range for audio transmitted by a sender,
repeated by a receiver and returned to the sender to be judged
as having good quality even with an RTT of nearly 800ms.
Try This At Home We invite the reader to prove the existence
of long mouth to ear delays to themselves. Place a call
between any two devices on telecommunication networks that
are within reach of one another.3 Make a sound into one device
and listen for it on the other (which should be muted to avoid
feedback). Readers will hear a noticeable delay between when
the noise is made and when it is played by the other device
even though the devices are located near each other.
B. Challenges to Testing the Hypothesis
While it is intuitive that increasing distance correspond-
ingly increases delay, rigorously testing this hypothesis has
signiﬁcant challenges. For instance, telephony networks are
largely opaque to outsiders. They do not offer the equiv-
alent of IP network functions such as traceroute that
would allow researchers to characterize a call path or ping
to measure RTT. As mentioned above,
they also perform
signiﬁcant computation (e.g., transcoding), adding signiﬁcant
additional latency. Routing between destinations may also vary
due to changes in the networks and the varying path of the
call audio. This changes on a call to call basis and causes
inconsistencies in network time. Finally, networks may delay
the delivery of audio based on internal priority, quality of
service requirements and even segmentation into frames for the
3Standard carrier rates may apply.
air interface. As such, we must create our own mechanisms to
characterize normal network latency (using the ITU E-model
as an independent conﬁrmation of reasonable results), and
must accept a higher degree of uncertainty than is traditionally
experienced in Internet measurement studies.
IV. SECURITY MODEL
Sonar detects call redirection by network-based adversaries.
In this section, we detail the capabilities of these adversaries.
We also identify the goals and capability claims of Sonar
and outline telephony attacks that are out-of-scope for this
work. We conclude with a discussion contrasting Sonar with
traditional distance bounding techniques.
Adversary Capabilities We are concerned with an adver-
sary who seeks to redirect a phone call. By “redirect” we
speciﬁcally mean “change the routed path of the call”. The
technical means by which this can be done are extensive, and
Sonar is agnostic to the means used to redirect the call to
them. We focus on SS7 redirection attacks in this paper, but
other redirection attacks (including, but not limited to, BGP
rerouting) can also be addressed.
The adversary has a number of capabilities that can frus-
trate defenders. The adversary can redirect a call to an ar-
bitrary location under their control. The adversary can also
arbitrarily modify call audio. This includes producing new
sounds (including speech), dropping sounds, or adding noise.
Naturally, this includes dropping, modifying, or fabricating
Sonar messages sent through the voice channel. We assume
the adversary can redirect both incoming and outgoing calls of
a target. The adversary also can know the locations of victims
with high accuracy (SS7 tracking attacks make this especially
practical). As a consequence, we must assume the adversary
also knows what latencies are expected for the redirected call.
While an adversary can have access to the Sonar system, we
assume that the adversary does not control either call endpoint.
This is actually a trivial assumption because if the adversary
controlled the other endpoint, no redirection attack would
be necessary. Accordingly, endpoints can trust each other to
faithfully participate in the system.
In this work, the adversary is only capable of submitting
SS7 messages to the network; these messages cause the call
to be redirected to a network node under the attackers control.
The adversary does not compromise any core SS7 component
to perform this attack. Once the call is received, the adversary
connects a new call to the original recipient and retransmits
the audio. It is the additional physical distance and decoding
570
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:30:21 UTC from IEEE Xplore.  Restrictions apply. 
latency we use to detect
delay that creates the additional
these attacks. Redirections to other types of networks (e.g.,
VoIP) do not reduce the chance of detection, as gateways
between these networks introduce substantially more latency
than simple redirection on the PSTN.
Sonar Capabilities and Goals Sonar provides a system and
protocol to securely measure audio latency in the face of
the above adversary. Sonar provides call endpoints with an
accurate measurement of RTT and a decision as to whether
that RTT is consistent with the distance of the call. To accom-
plish this, Sonar includes a cryptographic challenge/response
protocol. While the expected distance will vary from call
to call, it will be shared with both call parties before the
latency measurement begins. Drimer and Murdoch [16] iden-
tiﬁed a number of attacks against challenge/response distance
bounding systems, including the adversary guessing responses,
replaying previously used challenges, and using more capable
hardware. Sonar is designed to protect against all of these
attacks, and this is further discussed in Section V.
Scope of Sonar Sonar is designed to detect SS7 call redirection
attacks. As a result, phone network attacks that do not signif-
icantly affect audio delay cannot be detected by Sonar, and
must be defended against using other methods. Attacks that
do not affect audio delay include denial of service attacks,
attacks on SMS, and compromised end devices. Of course,
if an adversary is located reasonably close to the victim, the
associated redirection may not be detectable. We extensively
analyze this practical limit in Section VII.
We note that there are a number of methods of phone
call or other communications interception that do not rely
on redirection attacks. This includes the legitimate or ille-
gitimate uses of lawful intercept interfaces — technologies
that facilitate “wiretaps” by law enforcement [17]. This also
includes attacks on cellular phone networks, including so-
called IMSI-catchers or Stingrays [18], [19], as well as actual
compromised core network devices [20]. All of these are
explicitly more difﬁcult
to achieve than SS7 attacks, and
some require physical access. We note that while there is
currently no effective countermeasure to protect against SS7
attacks, many of these other attacks have countermeasures that
would be complementary to Sonar, including work to assure
accountability in lawful intercept devices [17] and to detect
eavesdropping or tampering [18], [19].
V. SONAR PROTOCOL
We now describe the operation of Sonar. We begin by
highlighting the ways in which Sonar differs from prior work
in distance bounding. We then proceed to describe our proto-
col, which is based on the RFID Distance Bounding Protocol
by Hancke and Kuhn [4], but adapted to our setting. After
describing the protocol, we discuss how this protocol provides
secure measurement of RTT. We continue by discussing how
we can transmit data through the audio of the phone call,
and we conclude by describing how to establish an end-to-
end shared secret for use in the protocol.
R1 = 01001010...
R0 = 10110101...
Share Ks, GPS
C = 0110101...
C1 = 0110
C1 = 0110
C1 = 0110
R1 = 1101
R1 = 1101
R1 = 1101
C2 = 1011
C2 = 1011
C2 = 1011
R2 = 1110
R2 = 1110
R2 = 1110
Veriﬁer
Prover
C
“Conﬁrmed”
Fig. 3: Sonar uses a distance-bounding inspired mechanism to
measure call RTT.
A. Sonar vs Traditional Distance Bounding
Distance bounding is a well studied technique for limiting
attack distance. It is most prominently featured in situations
where distance between two parties can be known a priori;
two frequent examples are line-of-sight wireless communica-
tions [4] and smartcard-based payment terminals [16]. Anal-
ogous to traditional distance bounding, Sonar requires both
parties on the call to participate in the protocol. However,
Sonar bounds distances in a unique context against a funda-
mentally different adversary than “traditional” distance bound-
ing techniques. These differences are illustrated in Figure 4.
In traditional distance bounding, the distances to be measured
are typically limited by physical constraints, for example, the
communications delay between a smart card and reader, or
the distance to propagate a short-range wireless transmission.
As a result, distance bounding typically provides centimeter-
level resolution of distance. By contrast, Sonar needs to detect
attacks given a known but highly variable physical distance.
Most distance bounding also assumes a direct connection in
legitimate cases. The distance the call travels during routing
may also vary signiﬁcantly; as a result, calls that vary in
physical distance by hundreds of miles may experience com-
parable audio latency. Also, as shown in Figure 4, in traditional
distance bounding the prover may actually be the adversary, an
attack known as ”maﬁa fraud” [21]. In Sonar, the adversary is
a compromised network and both parties are trusted. Finally,
in Sonar, both parties need conﬁdence that the call has not
been intercepted, while in traditional distance bounding, only
the veriﬁer needs to know the distance.