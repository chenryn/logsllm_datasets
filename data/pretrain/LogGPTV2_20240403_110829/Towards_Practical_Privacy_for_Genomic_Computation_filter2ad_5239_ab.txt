computation
In the rest of this section, we will consider Alice
(A) and Bob (B), who want to use the dynamic pro-
gramming algorithm of Section 3.1 to compute the edit
distance δ(α, β) between their respective strings α (of
size n) and β (of size m), but do not want to re-
veal the strings themselves. For example, “Alice” and
“Bob” could be medical institutions participating in an
NIH-sponsored collaborative study, while the strings in
questions could be genome sequences with signiﬁcant
intellectual-property value.
We present three protocols. Protocol 1 is a straight-
forward application of Yao’s method. For large prob-
lem instances, it requires generation of very large circuit
representations. Protocol 2 splits the circuit for com-
puting the edit distance into smaller component circuits
and, furthermore, shares all intermediate values between
protocol participants. While the sharing of intermediate
values is not essential for the basic edit distance proto-
col, it is important for our efﬁcient implementation of
the Smith-Waterman protocol (see Section 4). Protocol
3 is a hybrid of Protocols 1 and 2. In order to keep circuit
size manageable, it exploits the fundamental structure of
the dynamic programming problem by dividing the ma-
trix D into a grid and splitting each problem instance
into sub-problems of size (k, k), where k divides both n
and m. The differences between the protocols are sum-
marized in Figure 2.
3.3 Protocol 1 (generic SMC)
Recall that the edit distance algorithm maintains a
(n + 1) × (m + 1) matrix D(0 ··· n, 0 ··· m), where
D(i, j) is the edit distance between α[1 ··· i] and
β[1 ··· j]. Strings α and β can be expressed as bit strings
bit(α) and bit(β) of length qn and qm, where q is equal
to (cid:4)log2(| Σ |)(cid:5).
The base case and recursive equations for comput-
ing D(i, j) were given in equations 1, 2, and 3. Let
CD(i,j) be the circuit for computing D(i, j) with inputs
corresponding to bit representation of α[1,··· , i] and
β[1,··· , j]. Assume that we have computed CD(i−i,j),
CD(i,j−1), and CD(i−1,j−1). The recursive computa-
tion given by equation 3 can be represented as a circuit
CD(i,j), which computes D(i, j) by combining (i) the
equality testing circuit for t(i, j), (ii) three “add-1” cir-
cuits, and (iii) two “select-smaller-value” circuits.
The inputs to the circuit CD(i,j) are bit representa-
tions of α[1,··· , i], β[1,··· , j] and the outputs of cir-
cuits CD(i,j−1), CD(i−1,j), and, CD(i−1,j−1). Once
we have the circuit representation CD(n,m) for the edit
distance problem, we can compute CD(n,m)(α, β) in
a privacy-preserving manner using standard algorithms
for secure circuit evaluation (see Section 2).
3.4 Protocol 2
Protocol 1 represents the entire problem instance as
a single circuit. The resulting representation, however,
is impractically large for problems of realistic size (see
Section 6). Protocol 2 splits the circuit corresponding to
the problem instance into smaller sub-circuits and shares
the result of evaluating each sub-circuit between the par-
ticipants. Protocol 2 exploits the speciﬁc circuit repre-
sentation in Yao’s “garbled circuits” method instead of
using it simply as an ideal functionality for secure circuit
evaluation.
Let w =| Σ | be the size of the alphabet from which
the two strings are drawn, and recall that q = (cid:4)log2(w)(cid:5).
Let r be the length of wire keys in Yao’s “garbled cir-
cuits” construction (see Section 2); r can be viewed as
the security parameter for Yao’s protocol.
3.4.1 Component circuits
Protocol 2 involves evaluation of multiple instances of
the following two circuits.
Equality testing circuit. Circuit Ceq is the standard
logic circuit for testing equality of two values. Its in-
puts are two q-bit values, x from Alice and y from Bob.
219
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
Number of
iterations
Protocol 1
(generic)
Protocol 2
Round
Optimized round
complexity
complexity
1
1
O(nm)
O(m + n)
Protocol 3
O( nm
k2 )
O( m+n
k )
Circuits
used
Circuit for
(n, m) instance
Circuits for
equality testing and
“minimum-of-three”
Circuit for
(k, k) instance
Figure 2. Characteristics of various protocols for problem of size (n, m).
The output for Alice is empty, and the output for Bob is
supposed to be the outcome of the comparison, i.e., 0 if
x = y, and 1 if x (cid:3)= y. Ceq consists of 2q − 1 gates.
Recall that in Yao’s construction, the circuit creator
generates two random r-bit “wire keys” for each circuit
wire, including the output wire. Let k0
eq (respectively,
k1
eq) be the wire key representing 0 (respectively, 1) on
the output wire of circuit Ceq . In our protocol, we will
assume that the output of Ceq is not the bit σ, which is
the result of the comparison, but instead the r-bit ran-
dom value kσ
eq, which represents σ. Observe that this
is not a black-box use of the “ideal two-party compu-
tation functionality,” because it critically depends on the
internal representation of circuit outputs by random wire
keys. (In other words, an alternative implementation of
the same functionality would not be sufﬁcient for our
purposes.)
Bob, acting as the circuit evaluator in Yao’s protocol,
learns kσ
eq . He does not learn whether this value repre-
sents 0 or 1, since he does not know the mapping from
random wire keys to the bit values they represent. This
property, too, is essential in our construction.
Minimum-of-three circuit. Circuit Cmin3 computes
the minimum of three values, each of which is ran-
domly shared between Alice and Bob, and splits the
result into random shares, too. Alice’s inputs are four
log(n + m)-bit values x1, x2, x3, and r. Bob’s in-
puts are three log(n + m)-bit values y1, y2, y3, as well
as t ∈ {0, 1}. The circuit’s output for Bob is z =
min(x1 ⊕ y1 + 1, x2 ⊕ y2 + 1, x3 ⊕ y3 + t) ⊕ r, where
⊕ is bitwise exclusive-OR, while + is addition modulo
(n + m). The output for Alice is empty.
Observe that the Cmin3 circuit takes a 1-bit value t as
Bob’s input. In Yao’s construction, t is represented as a
random r-bit wire key k0
t . As mentioned above, we
rely on this representation, and assume that Bob already
has (from a previous evaluation of Ceq) some key kσ
t
representing the value of t. Bob holds this value obliv-
t or k1
iously. He knows that it is a valid wire key, i.e., that it
represents either 0, or 1 on the input wire of Cmin3 cor-
responding to t, but he does not know the value of σ = t
since he does not know the mapping from wire keys to
the bit values they represent.
3.4.2 Computing edit distance
Alice and Bob each maintains an (n + 1) × (m + 1)
matrix DA and DB, respectively. Each element of both
matrices is a log(n + m)-bit integer. All arithmetic is
modulo n+ m. The protocol maintains the invariant that
every value in the edit distance matrix D is randomly
shared between Alice and Bob, that is, for all 0 ≤ i ≤ n
and 0 ≤ j ≤ m we have that D(i, j) = DA(i, j) ⊕
DB(i, j)
Additionally, Bob maintains an n× m matrix T , each
element of which is an r-bit value.
Phase 0. Alice ﬁlls in DA(i, 0) and DA(0, j) with ran-
dom log(n + m)-bit values and sends them to Bob.
Bob ﬁlls DB(i, 0) with i ⊕ DA(i, 0) and DB(0, j) with
j ⊕ DA(0, j).
Phase 1. Alice and Bob perform n × m instances of
Yao’s secure circuit evaluation protocol on circuit Ceq.
The inputs for the (i, j)-th instance are α[i] and β[j],
respectively. The output for Bob is a random r-bit value
kσ
eq(i, j), where σ = 0 if α[i] = β[j], 1 otherwise. Bob
sets T (i, j) = kσ
eq(i, j).
Observe that neither Alice, nor Bob learns the value
of σ, i.e., whether α[i] is equal to β[j] or not. Bob ob-
tains and stores a random key representing σ, but since
he does not know the mapping from random keys to the
bit values they represent, he cannot interpret this key.
Alice knows the mappings because she created them her-
self when producing a garbled version of the Ceq circuit
for each instance of the protocol, but she does not know
which of the two output-wire keys Bob has obtained and
220
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
thus does not learn the result of the equality test.
All n× m instances of Ceq can be evaluated in paral-
lel. Each instance requires q 1-out-of-2 oblivious trans-
fers in order to transfer the wire keys representing Bob’s
q-bit input into Ceq from Alice to Bob (see Section 2).
These oblivious transfers can be parallelized. The to-
tal number of communication rounds is equal to those
of a single oblivious transfer, e.g., 2 in the case of Naor-
Pinkas protocol [22]. Evaluation of all n×m garbled cir-
cuits is performed by Bob, without any interaction with
Alice.
Phase 2. Recall that the recursive equation for comput-
ing D(i, j) is
D(i, j) = min[D(i − 1, j) + 1, D(i, j − 1) + 1,
D(i − 1, j − 1) + t(i, j)]
where t(i, j) is deﬁned to have value 1 if α[i] (cid:3)= β[j],
and 0 otherwise.
Phase 2 requires n× m iterations. Let (i, j) be the in-
dices of the iterations. In the (i, j)-th iteration, Alice and
Bob perform an instance of Yao’s secure circuit evalua-
tion protocol on circuit Cmin3 . Alice creates a garbled
instance of Cmin3 in the usual way (see Section 2), gen-
erating two fresh random wire keys for each circuit wire
except Bob’s input wire corresponding to value t.
eq(i, j) and k1
Instead of generating new wire keys for this wire, Al-
ice re-uses the same wire keys k0
eq(i, j) that
she used when creating a garbled equality-testing circuit
Ceq in the (i, j)-th instance of Phase 1. This re-use of
random wire keys is an important technical device which
exploits the internal circuit representation in Yao’s pro-
tocol.
It allows us to “connect up” the evaluations of
circuits Ceq(i, j) and Cmin3 (i, j), even though these cir-
cuits are evaluated at different points in the protocol.
σ(i,j)
eq
Bob obliviously stores the key k
(i, j) = T (i, j).
This key is the result of evaluating Ceq(i, j) and repre-
sents σ(i, j), which is equal to 0 if α[i] = β[j], and 1
otherwise. Observe that σ(i, j) = t(i, j). Effectively,
Bob stores the representation of t(i, j), without know-
ing what he is storing, until this representation is used as
an input into Cmin3 (i, j).
Alice and Bob execute standard Yao’s protocol to
evaluate the (i, j)-th instance of Cmin3 . Alice’s in-
puts are three log(n + m)-bit values DA(i − 1, j),
DA(i, j − 1), and DA(i − 1, j − 1). Alice’s fourth in-
put is a fresh random log(n + m)-bit value r. Bob’s
ﬁrst three inputs are log(n + m)-bit values DB(i− 1, j),
DB(i, j−1), and DB(i−1, j−1), and his fourth input is
T (i, j), i.e., the result of evaluating the equality-testing
circuit Ceq(i, j) on α[i] and β[j].
221
Alice sets DA(i, j) = r. Bob obtains output z from
the protocol, and sets DB(i, j) = z. Observe that
DA(i, j) ⊕ DB(i, j) is equal to
min(DA(i − 1, j) ⊕ DB(i − 1, j) + 1,
DA(i, j − 1) ⊕ DB(i, j − 1) + 1,
DA(i − 1, j − 1) ⊕ DB(i − 1, j − 1) + t(i, j))
⊕r ⊕ r
= min(D(i − 1, j) + 1, D(i, j − 1) + 1,
D(i − 1, j − 1) + t(i, j))
= D(i, j)
After the last iteration, Alice sends to Bob her ran-
dom share DA(n, m) and Bob sends Alice his random
share DB(n, m). This enables both Alice and Bob to
reconstruct the edit distance as DA(n, m) ⊕ DB(n, m).
Each iteration of Phase 2 requires 3 log(n + m) in-
stances of OT 2
1 in order to transfer the wire keys repre-
senting Bob’s inputs into Cmin3 (i, j) from Alice to Bob
(see Section 2). These oblivious transfers can be paral-
lelized. The total number of iterations is equal to 2nm,
assuming a 2-round oblivious transfer protocol.
Pre-computation and online complexity. All gar-
bled circuits for both phases of Protocol 2 can be pre-
computed by Alice since circuit representation in Yao’s
protocol is independent of the actual inputs. The only
online cost is that of qnm 1-out-of-2 oblivious transfers
in Phase 1 (a total of 2 iterations), and 3nm log(n + m)
oblivious transfers in Phase 2 (a total of 2nm iterations).
Optimization. The matrix D has n + m − 1 diagonals,
where the k-th diagonal (0 ≤ k ≤ m + n) Diag k of
the matrix D is the set of elements {D(i, j)
i +
j = k}. Since there is no dependency between the
elements of the diagonal Diag k, they can computed in
parallel. Hence the round complexity of Protocol 2 can
be brought down to O(m+n) by evaluating all elements
of Diag k in parallel.
|
3.5 Protocol 3
Protocol 1 is fairly efﬁcient, requiring only nq exe-
1 , where q = (cid:4)log2(| Σ |)(cid:5), but it has to
cutions of OT 2
compute a large circuit CD(n,m). As we show in Sec-
tion 6, for large problem instances the circuit represen-
tation requires several Gigabytes of memory.
Protocol 2 splits this circuit into very small compo-
nent circuits for equality testing and computing the min-
imum of three values. Each of the small circuits is eval-
uated separately. Furthermore, Protocol 2 shares each
intermediate value (the result of evaluating a component
circuit) between the two participants. This sharing—
which will be essential in the Smith-Waterman protocol
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:13:03 UTC from IEEE Xplore.  Restrictions apply. 
of Section 4—comes at a signiﬁcant cost, because Pro-
tocol 2 requires qnm + 3nm log(n + m) executions of
OT 2
1 .
In this section, we present Protocol 3, which exploits
the geometric structure of the dynamic programming
problem to split the single circuit of Protocol 1 into
smaller sub-circuits. Recall that the edit distance algo-
rithm maintains a (n + 1) × (m + 1) matrix D. Let k
be a number that divides both n and m, i.e., k | n and
k | m.1 The union of the following sets constitutes a
grid of granularity k:
{D(i, j) | 0 ≤ i ≤ n and j ∈ {0, k, 2k,··· , m
{D(i, j) | i ∈ {0, k, 2k,··· , n
k k}}
k k} and 0 ≤ j ≤ m}
Given an element D(i, j), the rectangle of length l and
width w with D(i, j) at the top right corner (denoted
by rect(D(i, j), l, w)) is the union of the following four
sets of points :
{D(i, j − l), D(i, j − l + 1),··· ,
D(i, j − 1), D(i, j)}
{D(i − w, j − l), D(i − w, j − l + 1),··· ,
D(i − w, j − 1), D(i − w, j)}
{D(i − w, j), D(i − w + 1, j),··· ,
D(i − 1, j), D(i, j)}
{D(i − w, j − l), D(i − w + 1, j − l),··· ,
D(i − 1, j − l), D(i, j − l)}
The above four sets of points correspond to the
top, bottom, right, and left sides of the rectangle
rect(D(i, j), l, w).
Therefore, we denote these set
of points as top(D(i, j), l, w), bottom(D(i, j), l, w),
right(D(i, j), l, w), and left(D(i, j), l, w), respectively.
We have the following lemma:
Lemma 1 D(i, j), can be expressed as a function of
left(D(i, j), l, w), α[i − w +
bottom(D(i, j), l, w),
1 ··· i], and β[j − l + 1 ··· j].
The proof for this lemma is straightforward but tedious,