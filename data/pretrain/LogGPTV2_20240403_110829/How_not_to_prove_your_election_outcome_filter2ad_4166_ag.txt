,ρ(cid:4)
4
In order to manipulate the outcome, the mixer deﬁnes the
(cid:4)
= Epk(2a/d,ρi)Ci. By the homomorphic
output ciphertexts as C
i
property of ElGamal, we have multiplied each encrypted vote
vote by pno/pyes. (For ease of exposition we use the identity
permutation on the list of ciphertexts, but any permutation is
possible.)
We play the Bayer-Groth shufﬂe perfectly honestly, ex-
cept for the multi-exponentiation argument. Indeed, that ar-
gument raises a difﬁculty because the statement equation
(cid:2)C(cid:2)x = Epk(1;ρ)(cid:2)C(cid:4)(cid:2)b does not hold. Instead, the equation (cid:2)C(cid:2)x =
Epk(2−(x+x2+x3+x4)a/d;ρ)(cid:2)C(cid:4)(cid:2)b holds, for ρ = −ρ1x − ρ2x2 −
ρ3x3−ρ4x4, which is known to the mixer. In order to make the
proof pass the veriﬁcation despite this, we will use the trapdoor
of the commitments in the multi-exponentiation argument.
We follow the notation in Bayer & Groth, Section 4. In
=
the initial message, we cheat on the commitment cBm
comck(bm,sm): instead of setting bm = sm = 0, we set bm =
−(x + x2 + x3 + x4)a/d and use the trapdoors to compute sm
such that comck(bm;sm) = comck(0;0). This choice makes sure
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
658
= comck(0;0) and Em = (cid:2)C(cid:2)x, as required in the ﬁrst
that cBm
two steps of the proof veriﬁcation steps.
All the other veriﬁcation steps pass, as we did not break the
truthfulness of any of the underlying proofs.
a) Calculating ρ: This section shows why we get the
expression for ρ that we use above.
We needed to ﬁnd ρ s.t.
(cid:2)C(cid:2)x = Epk(1;ρ)(cid:2)C(cid:4)(cid:2)b
where (cid:2)C are the input ciphertexts and (cid:2)C(cid:4) are the output
ciphertexts. (Bayer-Groth p.8)
LHS = (cid:2)C(cid:2)x
= Π4
j=1Cx j
j
= Epk(qx+x2
1
qx3
2 qx4
4 ;∑4
i=1 xiρ(cid:4)
i
)
RHS = Epk(1;ρ)(cid:2)C(cid:4)(cid:2)b
4 ;ρ + (ρ1 + ρ(cid:4)
= Epk(qx+x2
qx3
2 qx4
)(x + x2)
)x3 + (ρ4 + ρ(cid:4)
+(ρ3 + ρ(cid:4)
1
)x4).
So ρ = −ρ1x− (ρ1 + ρ(cid:4)
− ρ3x3 − ρ4x4.
)x2 + x2ρ(cid:4)
3
2
4x4 cancels out.
4 is unknown but ρ(cid:4)
1
4
1
Note ρ(cid:4)
B. Trapdoored voting parameters
The following parameters are consistent with all the speciﬁed
rules of generation (except that the ﬁrst is a little short), and also
satisfy 2a = (c/b)d mod p, as required by the second attack in
Section VI, in which we show that we can switch a valid vote
for one candidate into a valid vote for another.
a = 653, b = 107, c = 1097, d = 55,
p = 15441693973329384151125350995017654008023565817
91428284320345377390023004872648706499721969432402
05309469342226350935416403841627526252460636822182
64819087621368590176989254277369700622970467063224
44977229145304524184340274314622921879312772930704
99453123834777026998428423476982337655176255426398
664922523463.
This one is the expected length (2048 bits):
a = 1939, b = 149, c = 5297, d = 15,
p = 19722211808861961998510473803189009728961510664
62954597012950631665016587960284345553058864004164
22635674888062646812201053027045463289680822704943
58116782188791058782334971234980982393280439569631
97645598064743789156967497159791451972480058884224
88129789103747962429037124268598548043273104642724
26209417044887320406964517516088674160658753919846
53276983500291704129663009471242431039022666033016
35001453648728462242647769934145440177681915881404
98688094713424617499173689382179303046730867743281
53992533297229762632178533569405440166918849064735
82573668425175946824944015854229827903777022100947
69635988172380985519.
1) Trapdoored election parameters for the attack in Sec-
tion V: The following parameters were generated in a few hours
on a standard laptop (along with many other similar parameter
choices). They are such that v, w, p and q = (p−1)/2 are prime,
2, v, and w are quadratic residues modulo p, va = wb mod p,
and |p| = 2046.
v = 11,w = 53,a = 592,b = 357,
p = 7066125300686093818828868600858730687792498980
97630176052345875203116173371050464495535765997184
12087023157743527914173027880612549152925893965244
55854547412930821706001777388233628382036647180957
10511891561767688163446992081050915385333639994129
75733618190464709094803803163968319799200086181544
51680828023017288803231747601847767908657589996474
63403686417843437287149911574497989907909149673611
22128203357908982556730725948241307410998309683403
13570183446616617950821932000477100720160399088021
33857985860785937758668013110558845552099425659027
67953591074394931972664914027713315544580116256428
90216302214633795527.
C. Details of decryption proof forgery
This section shows how to generate a fake proof of decryp-
tion that passes veriﬁcation, as required in Section VII.
Suppose the prover (who knows x) has an ElGamal ciphertext
(C0,C1), computed with generator g and public key pk = gx.
She wishes to prove that this ciphertext decrypts to m, so she
(cid:4)
(cid:4)
1 is a correct decryption
computes C
(cid:4)
1
factor for that ciphertext, that is C
0, or equivalently that
1
(g, pk,C0,C1,m) satisfy Equation 2. She computes a Chaum-
Pedersen proof as follows:
= C1/m and proves that C
= Cx
1) Pick a random a.
2) set B0 = ga and B1 = Ca
0.
3) Compute c = H(pk,C(cid:4)
,B0,B1), where H is a crypto-
1
graphic hash function.
4) Compute z = a + cx.
The proof is (c,z). The veriﬁcation proceeds by recomputing
B0 = gz(pk)−c and B1 = Cz
)−c, then verifying that c =
(cid:4)
H(pk,C
1
,B0,B1).
(cid:4)
(C
1
0
D. Exploiting the problem
The problem is that in Step 3, C0 is not included in the
hash (and nor is g). This allows an adaptive cheating prover
to generate a fake proof by ﬁrst calculating c, then choosing
C0 afterwards. Here is how this can work.
= gs and B1 = gt.
1) Pick a random a, a random s, and a random t.
(cid:4)
2) Set B0 = ga, C
(cid:4)
1
3) Compute c = H(pk,C
1
4) Compute z = a + cx (as expected).
(cid:4)
5) Set C0 = (B1(C
1
,B0,B1) (as expected).
z = g(t+sc)/z.
)c) 1
It can be observed that (c,z) pass veriﬁcation as a decryption
(cid:4)
proof that (g, pk,C0,C
) satisfy Equation 2. However, it is
(cid:4)
1
0. Taking
highly unlikely that this is truthful, i.e. that C
1
logarithms base g, this equation would be satisﬁed only if
i.e., if s(z − cx) = xt (mod q) or,
s = x(t + sc)/z (mod q),
= Cx
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
659
The protocol implemented appears to follow the disjunctive
proof approach of Cramer, Damg˚ard and Schoenmakers [20]
for Sigma protocols (among which the Schnorr and the Chaum-
Pedersen protocols discussed above). In well deﬁned 1-out-of-
n protocols, there is one challenge c sent by the veriﬁer (or
provided by a random oracle), and the prover needs to answer
with n more challenges c1, . . . ,cn, such that c = ∑n
i=1 ci. The
veriﬁer must then verify this equality: if it is not satisﬁed, then
the soundness of the protocol completely breaks, and the prover
can make a proof that passes veriﬁcation even if all of the n
statements are false.
In the Swiss Post/Scytl code base this check is not performed,
the result of which is that the Veriﬁer can be tricked into
verifying proofs that do not encode any of the elements that
the OR proof is supposed to check against.
This ORProof is not used by the sVote protocol, and we
have conﬁrmed with Scytl that the ORProof construction is
not used in any active voting system, and has only been used
in internal prototypes. Even with this caveat, the existence of
another broken zero knowledge protocol construct, in a code
base submitted for review for national elections, raises further
doubts about the integrity of this code.
3) Non-collision-resistant hash function: The hash function
inputs numbers in a sequence of characters without describing
the lengths or the types. This would mean, for example, that
31,7 would hash to the same thing as 317 and 3,17. It is not
immediately clear how this could be used to generate a false
proof, but it breaks the main cryptographic assumption behind
the secure hash function—it certainly does not behave like a
random oracle. At the very least, this seems to invalidate an
assumption of the formal proofs.
There is again an apparently-correct implementation, in
RandomOracleHash.java. That hash is used in the
mixnet, but for some reason the non-collision-resistant one
is used in the proof library based on the Maurer framework.
using the deﬁnition of z, if sa = xt (mod q). But a,s and t are
independent values chosen from Zq (where q is the size of the
ElGamal group, around 22047 for the proposed parameters), so
this coincidence occurs with negligible probability. Hence we
have a valid proof for a fact that is not true.
We note that the cheating strategy described above does not
depend on a, s and t to be random: any value could be picked
for them, and the proof would still be considered to be valid.
It is just unclear whether speciﬁc choices could lead to a more
dangerous attack.
E. Other cryptographic issues
Here is a short list of other problems we have noticed. They
do not seem to lead to attacks, but they do undermine the
assumptions of some components.
1) The Fiat-Shamir transform in other proofs: The Fiat-
Shamir heuristic is used throughout the sVote code base, so
there may be numerous other examples in which the proofs are
not sound. We did not check most of them, and the impact of
a lack of soundness may vary quite a lot: the errors described
above break soundness of proofs in both cases, but they lead
to very different exploits. In particular, all the sVote proofs
based on a non-interactive variant of Maurer’s generic protocol
(including Schnorr’s proof, the Exponentiation proof, proofs of
plaintext equality, etc.) appear to not be adaptively secure. It is
plausible that this weakness could be exploited in other ways.
To illustrate our concern, we show a second brief example
with the Schnorr proof. The sVote Audit document [12, Section
11.1.1 & 11.1.2] describes the construction of Schnorr proofs,
which are proofs of knowledge of r such that C = gr. The proof
is (roughly) computed by computing B = ga, then c = H(C|B),
then z = a + cr. The veriﬁcation proceeds by verifying that
gz = BCc and c = H(C|B). But the proof itself contains no
reference to g (g is not input to the hash function), even though
g is deﬁnitely part of the statement.
As a result, for any given C and B in the group, we can
compute c = H(C|B) and pick a random z, then decide that
g = (BCc)1/z. This would make (according to the protocol
speciﬁcation) a valid Schnorr proof of knowledge of the discrete
log of C in base g, even though there is no reason to think that
the prover truly knows that discrete log.
It is unclear how this alone would lead to an attack on the
system. The Schnorr proof is used by the CreateVote algorithm
to produce proofs w.r.t. the standard group generator g, which
is not picked by the prover in this case. Is is still uncomfortable
that the soundness of this proofs depends on external factors.
2) Missing veriﬁcation steps in OR Proof: The code base
deﬁnes a 1-out-of-n zero knowledge proof construction (OR-
Proof)14 that contains a critical ﬂaw which would allow a
malicious prover to trick the veriﬁer into accepting an element
that does not belong to the required set of n elements.
14The
proof
appears
in
proofs/src/main/java/com/scytl/cryptolib/proofs/maurer/
factory/ORProofGenerator.java
iﬁcation
proofs/src/main/java/com/scytl/cryptolib/proofs/maurer/factory/ORProofVeriﬁer.java
ver-
scytl-cryptolib/cryptolib-
process
and
its
in
scytl-cryptolib/cryptolib-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:54 UTC from IEEE Xplore.  Restrictions apply. 
660