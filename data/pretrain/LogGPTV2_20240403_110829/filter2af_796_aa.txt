本文将详细介绍一款基于python编写的，能够将代码插桩与覆盖率运用到对程序进行模糊测试的FUZZER: EPF。  
该工具对应的论文发表在CCF-B级会议PST上，将从实验和原理分析两部分介绍此工具。实验部分将介绍epf的安装以及对工控协议IEC104库的fuzz，原理部分将依据论文介绍epf的实现。
# 实验
## 工具的安装
从源代码的目录结构中可以发现EPF的覆盖率主要基于AFL++的插桩工具afl-clang-fast，对于AFL++的介绍请参考我这篇关于AFL++的原理介绍的文章。  
因此：
### 1、安装AFL++
安装步骤可参考：  
这里，我选择的是在本机安装而非使用docker方式，我的操作系统是 **Ubuntu21.03**
**首先** ，安装依赖：
    sudo apt-get update
    sudo apt-get install -y build-essential python3-dev automake cmake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools
    # try to install llvm 11 and install the distro default if that fails
    sudo apt-get install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-get install -y lld llvm llvm-dev clang
    sudo apt-get install -y gcc-$(gcc --version|head -n1|sed 's/.* //'|sed 's/\..*//')-plugin-dev libstdc++-$(gcc --version|head -n1|sed 's/.* //'|sed 's/\..*//')-dev
    sudo apt-get install -y ninja-build # for QEMU mode
接着，从github上下载AFLPlusPlus，因为github在部分地区被限制访问，这里推荐使用镜像网址，也就是
**** ，步骤如下：
    git clone https://github.com.cnpmjs.org/AFLplusplus/AFLplusplus
    cd AFLplusplus
    make distrib
    sudo make install
这里需要注意一点，如果对二进制文件的模糊测试不感兴趣，就可以将make distrib这一步改为:
    make source-only
### 2、安装epf
**首先** ，安装依赖：
    sudo apt-get update && sudo apt get install python3 python3-pip python3-venv
**接着** ，安装epf：
    git clone https://github.com.cnpmjs.org/rhelmke/epf.git # clone
    cd epf                                       # workdir
    python3 -m venv .env                         # setup venv
    source .env/bin/activate                     # activate venv
    pip3 install -r requirements.txt             # dependencies
这里可能会出现matplotlib库安装问题，解决办法见我的另一篇[文章](https://blog.csdn.net/qq_40229814/article/details/122781799?spm=1001.2014.3001.5501)
安装之后，输入：
    python3 -m epf --help
若出现：
    $ python3 -m epf --help
    `-:-.   ,-;"`-:-.   ,-;"`-:-.   ,-;"`-:-.   ,-;"
       `=`,'=/     `=`,'=/     `=`,'=/     `=`,'=/
         y==/        y==/        y==/        y==/
       ,=,- [ ...]' (Pass command and arguments within quotes, as only one argument)
      --restart-sleep RESTART_SLEEP_TIME
                            Set sleep seconds after a crash before continue (Default 5)
则代表安装成功，当然，这里需要注意的是，每次启动epf都需要输入
    source .env/bin/activate
以进入python虚拟环境，从而运行epf。
## 对IEC104协议库进行fuzz
### 实验准备
**下载IEC104协议库：**
    git clone https://github.com/mz-automation/lib60870.git
    cd lib60870/lib60870-C
**下载IEC104协议PCAP数据包：**
具体链接：
### 使用AFL++中的编译器插桩
**首先**
，本文测试IEC104协议实现库漏洞的样例是上文提到的IEC104协议库中的cs104_server_no_threads样例，该样例位于：lib60870-C/examples/cs104_server_no_threads/cs104_server_no_threads.c
**接着** ，将编译器改为AFL++中的afl-clang-fast编译器：
    echo "CC=~/AFLplusplus/afl-clang-fast" >> make/target_system.mk
这里需要注意的是，在lib60870库中，编译器已经在其make目录中的target_system.mk中指定，因此，我们只需要将mk中指定编译器代码写为你主机中AFL++中的afl-clang-fast的地址即可，这里的命令仅供参考。
make后得到程序，并将其复制到epf的文件夹下，同时也将iec104.pcap文件移入。  
### 开始fuzz
在命令行依次输入：
    cd ~/epf
    source .env/bin/activate  # activate virtualenv
    python -m epf 127.0.0.1 2404 -p tcp --fuzzer iec104 --pcap iec104.pcap --seed 123456 --restart 
    afl_fork "./cs104_server_no_threads" --smut 0.2 --plimit 1000 --alpha 0.99999333 --beta 1.0 --budget 86400
上文中的命令参数的具体意义可以输入 python3 -m epf --help，在epf的初始界面查看
开始fuzz，效果甚好。  
# 原理
## 问题提出
**核心问题** ：不同的领域不同场景带来的不同难度的FUZZ
## 工具框架