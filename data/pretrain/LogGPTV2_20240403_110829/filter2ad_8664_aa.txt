**作者： 360漏洞研究院 王晓东 刘永  
原文链接：**
## 背景
### The u32 filter Overview
所在模块：
    net/sched/cls_u32.c
Ugly (or Universal) 32bit key Packet Classifier.
#### Linux TC(traffic control) 流量控制介绍
Linux TC 对多个特定的ip施加不同的吞吐量throughput以及延迟delay限制
##### netlink与TC
TC是基于Netlink协议实现的。
默认的Qdisc
多队列默认Qdisc
一个定制的qdisc设置
##### 一个例子
传输质量控制，传输的带宽和延时
使用一些SHELL命令就可以实现对TC的使用。也可以通过Netlink编程实现。
## 漏洞挖掘
为了2021年天府杯比赛，我整理了syzkaller之前本地打出来的漏洞。发现一个UAF在专属SLAB上的漏洞，因为这种漏洞之前没有过利用，但报着试试看的心态给
漏洞给刘永进行分析，发现这个UAF在专属SLAB上的漏洞，可能可以实现提权。大概在10月左右实现漏洞利用。又因为还有其它漏洞可以参加比赛，而这个漏洞的隐蔽性和提权成功率相对比较好，而且一个漏洞可以完成信息泄漏和提权，所以予以保留。
    [  203.112091] ==================================================================
    [  203.112113] BUG: KASAN: use-after-free in sock_prot_inuse_add+0x80/0x90
    [  203.112121] Read of size 8 at addr ffff888106660188 by task poc/6597
    [  203.112134] CPU: 0 PID: 6597 Comm: poc Tainted: G                 ---------r-  - 4.18.0+ #32
    [  203.112138] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/22/2020
    [  203.112140] Call Trace:
    [  203.112148]  dump_stack+0xa4/0xea
    [  203.112164]  print_address_description.constprop.5+0x1e/0x230
    [  203.112197]  __kasan_report.cold.7+0x37/0x82
    [  203.112210]  kasan_report+0x3b/0x50
    [  203.112217]  sock_prot_inuse_add+0x80/0x90
    [  203.112224]  netlink_release+0x97f/0x1190
    [  203.112257]  __sock_release+0xd3/0x2b0
    [  203.112262]  sock_close+0x1e/0x30
    [  203.112267]  __fput+0x2d4/0x840
    [  203.112275]  task_work_run+0x16e/0x1d0
    [  203.112284]  exit_to_usermode_loop+0x207/0x230
    [  203.112290]  do_syscall_64+0x3f5/0x470
    [  203.112302]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [  203.112308] RIP: 0033:0x7fee34abd1a8
    [  203.112315] Code: 07 02 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 f3 0f 1e fa 48 8d 05 b5 44 2d 00 8b 00 85 c0 75 17 b8 03 00 00 00 0f 05  3d 00 f0 ff ff 77 40 c3 0f 1f 80 00 00 00 00 53 89 fb 48 83 ec
    [  203.112318] RSP: 002b:00007ffdb62366c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
    [  203.112323] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00007fee34abd1a8
    [  203.112327] RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000004
    [  203.112330] RBP: 00007ffdb62366e0 R08: 00007ffdb62366e0 R09: 00007ffdb62366e0
    [  203.112333] R10: 00007ffdb62366e0 R11: 0000000000000246 R12: 0000000000400f50
    [  203.112337] R13: 00007ffdb6236820 R14: 0000000000000000 R15: 0000000000000000
    [  203.112345] Allocated by task 6247:
    [  203.112353]  kasan_save_stack+0x1d/0x80
    [  203.112359]  __kasan_kmalloc.constprop.10+0xc1/0xd0
    [  203.112367]  slab_post_alloc_hook+0x43/0x280
    [  203.112377]  kmem_cache_alloc+0x131/0x280
    [  203.112386]  copy_net_ns+0xec/0x330
    [  203.112395]  create_new_namespaces+0x583/0x9a0
    [  203.112404]  unshare_nsproxy_namespaces+0xcb/0x200
    [  203.112414]  ksys_unshare+0x468/0x8d0
    [  203.112423]  __x64_sys_unshare+0x36/0x50
    [  203.112432]  do_syscall_64+0xe4/0x470
    [  203.112443]  entry_SYSCALL_64_after_hwframe+0x65/0xca
    [  203.112453] Freed by task 59:
    [  203.112487]  kasan_save_stack+0x1d/0x80
    [  203.112510]  kasan_set_track+0x20/0x30
    [  203.112535]  kasan_set_free_info+0x1f/0x30
    [  203.112557]  __kasan_slab_free+0x108/0x150
    [  203.112578]  kmem_cache_free+0x83/0x430
    [  203.112593]  net_drop_ns+0x7d/0x90
    [  203.112604]  cleanup_net+0x6ee/0x960
    [  203.112619]  process_one_work+0x742/0x1030
    [  203.112632]  worker_thread+0x95/0xce0
    [  203.112643]  kthread+0x32c/0x3f0
    [  203.112654]  ret_from_fork+0x35/0x40
    [  203.112686] The buggy address belongs to the object at ffff888106660000
                    which belongs to the cache net_namespace of size 8000
    [  203.112698] The buggy address is located 392 bytes inside of
                    8000-byte region [ffff888106660000, ffff888106661f40)
    [  203.112704] The buggy address belongs to the page:
    [  203.112739] page:ffffea0004199800 refcount:1 mapcount:0 mapping:00000000306a7880 index:0xffff888106664080 head:ffffea0004199800 order:3 compound_mapcount:0 compound_pincount:0
    [  203.112752] flags: 0x17ffffc0008100(slab|head)
    [  203.112774] raw: 0017ffffc0008100 dead000000000100 dead000000000200 ffff88810b6ff600
    [  203.112792] raw: ffff888106664080 0000000080030002 00000001ffffffff ffff888101f819c1
    [  203.112798] page dumped because: kasan: bad access detected
    [  203.112803] pages's memcg:ffff888101f819c1
    [  203.112814] Memory state around the buggy address:
    [  203.112831]  ffff888106660080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  203.112857]  ffff888106660100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  203.112868] >ffff888106660180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  203.112873]                       ^
    [  203.112884]  ffff888106660200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  203.112894]  ffff888106660280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  203.112900] =================================================================
但是在2022/04/12在syzbot上与打出了类似的漏洞，是一个Warning，随后被社区修复。最后这个漏洞利用输出到国内的安全大赛。
## 漏洞原理
### 原始PoC
syzkaller自动转化的PoC可以稳定地触发漏洞。
分配
    unshare
    |-> __x64_sys_unshare
     |-> ksys_unshare
      |-> unshare_nsproxy_namespaces
       |-> copy_net_ns
        |-> kmem_cache_alloc
释放
    exit_process
     |-> ret_from_fork
      |-> kthread
       |-> worker_thread
        |-> process_one_work
         |-> cleanup_net
          |-> net_drop_ns
           |-> kmem_cache_free
UAF
    sock_close
     |-> exit_to_usermode_loop
      |-> task_work_run
       |-> __fput
        |-> sock_close
         |-> __sock_release
          |-> sock_prot_inuse_add
分配net的源代码
    net/core/net_namespace.c
    445 struct net *copy_net_ns(unsigned long flags,
     446                         struct user_namespace *user_ns, struct net *old_net)
     447 {
     448         struct ucounts *ucounts;
     449         struct net *net;
     450         int rv;
     451 
     452         if (!(flags & CLONE_NEWNET))
     453                 return get_net(old_net);
     454 
     455         ucounts = inc_net_namespaces(user_ns);
     456         if (!ucounts)
     457                 return ERR_PTR(-ENOSPC);
     458 
     459         net = net_alloc();    passive, 1);
     465         net->ucounts = ucounts;
     466         get_user_ns(user_ns);
    ....
     487         return net;
     488 }
     395 static struct net *net_alloc(void)
     396 {
     397         struct net *net = NULL;
     398         struct net_generic *ng;
     399 
     400         ng = net_alloc_generic();
     401         if (!ng)
     402                 goto out;
     403 
     404         net = kmem_cache_zalloc(net_cachep, GFP_KERNEL);    <---     405         if (!net)
     406                 goto out_free;
     407 
    ....
     427 }
    $ sudo cat /sys/kernel/slab/net_namespace/object_size 
    4928
    $ sudo cat /sys/kernel/slab/net_namespace/order 
    3
释放函数
    437 void net_drop_ns(void *p)
     438 {
     439         struct net *net = (struct net *)p;
     440 
     441         if (net)
     442                 net_free(net);
     443 }       
     444
UAF的结构（下文将net_namespace统称为net结构）
     56 struct net {