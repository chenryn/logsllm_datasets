title:The Design and Implementation of Datagram TLS
author:Nagendra Modadugu and
Eric Rescorla
The Design and Implementation of Datagram TLS
Nagendra Modadugu
Stanford University
Eric Rescorla
RTFM, Inc.
PI:EMAIL
PI:EMAIL
Abstract
A number of applications have emerged over recent
years that use datagram transport. These applications
include real time video conferencing, Internet telephony,
and online games such as Quake and StarCraft. These ap-
plications are all delay sensitive and use unreliable data-
gram transport. Applications that are based on reliable
transport can be secured using TLS, but no compelling al-
ternative exists for securing datagram based applications.
In this paper we present DTLS, a datagram capable ver-
sion of TLS. DTLS is extremely similar to TLS and there-
fore allows reuse of pre-existing protocol infrastructure.
Our experimental results show that DTLS adds minimal
overhead to a previously non-DTLS capable application.
1. Introduction
TLS [7] is the most widely deployed protocol for se-
curing network trafﬁc. TLS is used to protect Web trafﬁc
(HTTP [9] [25]) and e-mail protocols such as IMAP [6]
and POP [23]. The primary advantage of TLS is that
it provides a secure, transparent channel; it is easy to
provide security for an application protocol by insert-
ing TLS between the application layer and the network
layer—where the session layer is in the OSI model. TLS,
however, requires a reliable transport channel—typically
TCP—and therefore cannot be used to secure datagram
trafﬁc.
When TLS was developed, this limitation was not con-
sidered particularly serious because the vast majority of
applications then ran over TCP. While this is still largely
true today, the situation is changing. Over the past few
years an increasing number of application layer protocols,
such as Session Initiation Protocol (SIP) [26], Real Time
Protocol (RTP) [28], the Media Gateway Control Protocol
(MGCP) [1], and a variety of gaming protocols have been
designed to use UDP transport.
Currently, designers of such applications are faced with
a number of unsatisfactory choices for providing security.
First, they can use IPsec [18]. However, IPsec is not well
suited for client-server application models and is difﬁcult
to package with applications since it runs in the kernel.
Section 2.1 has a detailed discussion of why IPsec has
been found to be a less than satisfactory option. Second,
they can design a custom application layer security pro-
tocol. SIP, for instance, uses a variant of S/MIME [2] to
secure its trafﬁc. Grafting S/MIME into SIP took vastly
more effort than did running the TCP variant of SIP over
TLS. Third, one can rehost the application on TCP and use
TLS. Unfortunately many such applications depend on
datagram semantics and have unacceptable performance
when run over a stream protocol such as TCP.
The obvious alternative is to design a generic channel
security protocol that will do for long lived applications
using datagram transport what TLS did for TCP. Such a
protocol could be implemented in user space for portabil-
ity and easy installation but would be ﬂexible and generic
enough to provide security for a variety of datagram-
oriented applications. Despite initial concerns that this so-
lution would be a large and difﬁcult design project, con-
structing a working protocol was fairly straightforward,
especially with TLS as a starting point and IPsec as a
reference. This paper describes the new protocol, which
we call “Datagram TLS”. DTLS is a modiﬁed version of
TLS that functions properly over datagram transport. This
approach has two major advantages over the alternatives.
First, since DTLS is very similar to TLS, preexisting pro-
tocol infrastructure and implementations can be reused.
To demonstrate, we implemented DTLS by adding to the
OpenSSL [30] library; in all, we added about 7000 lines
of code, about 60% of which were cut and pasted from
OpenSSL. Second, since DTLS provides a familiar inter-
face to a generic security layer, it is easy to adapt protocols
to use it. Experience with TLS has shown that this ease of
adaptation is a key to wide deployment.
The basic design principle of DTLS is “bang for the
buck.” We wished to minimize both our design and imple-
mentation effort and that of the designers and implemen-
tors who are potential DTLS users. Thus, in our design of
DTLS we choose not to include any features as “improve-
ments” over TLS; all the features additional to DTLS are
included for the sole purpose of dealing with unreliable
datagram trafﬁc. This design point simpliﬁes the security
analysis of DTLS.
2. Design Overview
The target applications for DTLS are primarily of the
client-server variety. These are the kinds of applications
for which TLS was designed and for which it works well.
The present security model of such applications is that the
server is authenticated by its DNS name and IP address but
the client is either anonymous or authenticates via some
form of credential, typically in the form of a username
and password handled by the application layer protocol.
This practice is not especially secure. However, appli-
cation protocol designers, want to maintain as much of
their protocol and implementation infrastructure as pos-
sible while adding security. This makes a channel secu-
rity protocol such as TLS or IPsec very attractive since
changes are minimized. From this perspective, ideally
a datagram channel security protocol would substitute
strong cryptographic authentication of the server for DNS
and IP-based authentication but leave client authentication
to the application layer protocol.
Our design is not the only possible one that can be used
in this scenario.
In the following sections we consider
several alternative approaches and argue that they ﬁt these
requirements less well than does DTLS.
2.1. Why not use IPsec?
IPsec was designed as a generic security mechanism for
Internet protocols. Unlike TLS, IPsec is a peer-to-peer
protocol. For many years IPsec was expected to be a suit-
able security protocol for datagram trafﬁc generated by
client-server applications. In practice, however, there are
a number of problems with using IPsec for securing such
trafﬁc. These problems stem directly from IPsec residing
at the network layer rather than the session or application
layer.
Review of IPsec architecture Unlike TLS, IPsec is
not one protocol but rather three: Authentication Header
(AH) [16] and Encapsulating Security Payload (ESP) [17]
are used for trafﬁc security and Internet Key Exchange
(IKE) [12] is used for the establishment of keying material
and other trafﬁc security parameters. These parameters
are collectively referred to as Security Association (SA).
In host implementations, AH and ESP are typically im-
plemented in the kernel as part of the IP stack, while IKE
is implemented as a user daemon. In network gateways
the architecture varies based on the device programming
model.
IPsec security policy is controlled using the Security
Policy Database (SPD). SPD entries can be created in two
ways. First, administrators can directly create entries in
the SPD. In addition, many host-based implementations
allow applications to set per-socket policies, for instance
using the PF_KEY API [20], thus allowing ﬁner control
of policy.
When a socket is created in a host-based IPsec imple-
mentation, the SPD is consulted to determine the correct
security policy.
If IPsec processing is required and an
appropriate SA does not exist, IKE is invoked to create
one. Future packets sent using that socket are protected
using that SA. In network gateway-based IPsec implemen-
tations the stack performs a SPD lookup for each outgoing
packet.
In the remainder of this section, we discuss several as-
pects of IPsec that make it less than ideal for the kind of
applications we are concerned with.
Server Authentication Client-server applications typi-
cally identify endpoints in terms of domain names. This
is the scenario for which TLS is optimized. In such an en-
vironment, the client has an identiﬁer for the server, typ-
ically of the form of a DNS name or a URL. When the
client connects to the server, it wants the server to authen-
ticate using a credential that matches that identity.
IPsec security policies (as deﬁned in the SPD) are usu-
ally expressed in terms of IP addresses, although there
is nominal support for symbolic names, including DNS
names. IKE supports use of symbolic names, including
DNS names in certiﬁcates analogous to TLS. However,
the primary motivation for support of these sorts of iden-
tiﬁers in IKE was for road warriors, whose IP address
could not be known in advance. Thus use of a DNS
name to securely identify a server, for example, is not
supported by most host IPsec implementations. In prin-
ciple, IPsec could provide veriﬁcation by DNS name in
two ways. First, DNSSEC [8] could be used to securely
map the server’s DNS name to its IP address. However,
DNSSEC deployment has so far been minimal, making
this option problematic. Second, IPsec certiﬁcates could
contain DNS names and the client could use an IPsec API
to verify that the correct certiﬁcate was used. Unfortu-
nately, not all IPsec APIs allow certiﬁcation information
to be determined and so this veriﬁcation cannot be done
reliably or portably.
Residence in the kernel Because IPsec operates at the
IP layer, it generally must be implemented in the operating
system kernel, either directly compiled in or linked in as
a loadable module. This makes IPsec fairly inconvenient
to install on non-IPsec systems. This is no longer as large
a problem as it once was, since most modern operating
systems contain IPsec stacks. However, a large number of
legacy operating systems still are not IPsec-capable and
installing IPsec on them is generally a major operation.
A related problem is the lack of standardized IPsec
APIs. An IPsec using application which wishes to con-
trol keying policy has no way to portably do so. While
TLS APIs are not standardized either, an application de-
veloper can easily ship a TLS toolkit along with their ap-
plication, thus achieving portability. Increased developer
control does introduce the possibility that the developer
will use the toolkit insecurely. Developers have, however,
historically been willing to bear this risk.
2.2. Key Exchange over TCP?
Key negotiation over an unreliable connection is more
complicated than with a reliable connection. One alter-
native is to complete key negotiation on a TCP connec-
tion and use the negotiated parameters to secure a sepa-
rate datagram channel. This split design is similar to that
used by IPsec but has a number of problems.
The primary virtue of a split design is that it releases
DTLS from having to implement a reliable handshake
layer. In exchange, an application must now manage two
sockets (one TCP, and one UDP). Synchronizing these
sockets is a signiﬁcant application programming problem.
In particular, session renegotiation is complicated by this
architecture. With the TCP connection closed once key
negotiation is complete, renegotiation messages must be
communicated over the unreliable datagram channel, re-
quiring the implementation of a retransmission mecha-
nism.
If the TCP connection is left open once key negotiation
is complete, unnecessary system resources are consumed.
This is a problem because operating system kernels often
exhibit problems when programs have a large numbers of
sockets open [14]. In particular, select() performs poorly
(if at all) with large numbers of open sockets and replace-
ments are often not portable. In addition, some older oper-
ating systems have tight limits on the number of open ﬁles
per process (in older Linux kernels this limit was 1024.)
An ordinary UDP server expects to read and write on
only a single socket. Thus, the use of a TCP handshake
channel could force signiﬁcant rewriting of server code.
Additionally, error case handling becomes complicated:
say the TCP connection is reset, does that imply that the
bulk transfer channel should be closed?
These considerations lead us to conclude that it is bet-
ter to have the handshake and data transfer occur over
the same channel from the beginning. As we shall see,
DTLS’s reliability requirements are quite primitive, al-
lowing us to make do with a protocol much simpler than
TCP.
2.3. Design Requirements
Once we decided on a user-space protocol that runs
over a single channel, the direct course of action was to
make TLS datagram capable. Although DTLS must be
somewhat different from TLS, in keeping with our basic
principle we have kept TLS unchanged wherever possi-
ble. Where we have had to make changes to TLS, we
have attempted to borrow from preexisting systems such
as IPsec. Similarly, DTLS is explicitly designed to be as
compatible as possible with existing datagram communi-
cation systems, thus minimizing the effort required to se-
cure one’s application.
Datagram Transport DTLS must be able to complete
key negotiation and bulk data transfer over a single data-
gram channel. This property allows applications to sim-
ply replace each datagram socket with a secure datagram
socket managed by DTLS.
Reliable Session Establishment DTLS must provide a
mechanism for authenticating endpoints, reliably estab-
lishing keying material and negotiating algorithms and pa-
rameters. Since DTLS must run entirely over unreliable
datagram transport, it must implement a retransmission
mechanism for ensuring that handshake messages are re-
liably delivered. However, the retransmission mechanism
should be simple and lightweight, ensuring that DTLS is
as portable as possible. Note that the requirement to create
a session means that DTLS is primarily suited for long-
lived “connection-oriented” protocols as opposed to to-
tally connectionless ones like DNS. Connectionless proto-
cols are better served by application layer object-security
protocols.
Security Services DTLS must provide conﬁdentiality
and integrity for the data transmitted over it.
It should
optionally provide the ability to detect replayed packets.
Ease of Deployment The ability to implement TLS en-
tirely in user space without changing the kernel has been a
major contributor to TLS deployment. This feature allows
developers to bundle a TLS implementation with their ap-
plication without dependence on operating system ven-
dors. DTLS should similarly be implementable solely in
user space.
Semantics For many TCP based applications it has been
very simple to implement a security layer by using TLS.
One of the main reasons is that TLS semantics mimic
those of TCP. Thus, a TLS API can mimic the well known
socket interface, making network connections appear to
be read-write streams. DTLS semantics should mimic
UDP semantics thus allowing DTLS implementations to
mimic the UDP API.
Minimal Changes DTLS must be as similar to TLS as
possible. Over the years, TLS has become more robust
and has been reﬁned to withstand numerous attacks. Our
goal is for DTLS to be equally robust by inheriting all
the tested and popular features of TLS. By minimizing
changes we reduce the likelihood of introducing any un-
foreseen weaknesses.
Additionally, minimizing changes has the beneﬁt that
DTLS can be easily implemented based on TLS imple-
mentations such as OpenSSL [30]. Hardware implemen-
tations of TLS are optimized to speed up asymmetric and
symmetric cryptographic operations. DTLS should not
introduce new cipher suites or make changes to the key
derivation algorithms. Hence DTLS implementations can
leverage hardware implementations of TLS.
2.4. Non-Requirements
DTLS is not intended to provide any congestion control
functionality. Congestion control needs to be addressed
by a datagram transport using application regardless of
whether a security layer is in place, and hence is beyond
the scope of DTLS. Applications that do not implement
congestion control can use the Datagram Congestion Con-
trol Protocol (DCCP) [19] as the underlying transport pro-
tocol with DTLS providing the security layer.
3. TLS Overview
Since DTLS is based on TLS, it is useful for the reader
to be familiar with TLS. In this section we provide a brief
overview of TLS.
3.1. TLS Features
TLS is a generic application layer security protocol that
runs over reliable transport. It provides a secure channel
to application protocol clients. This channel has three pri-
mary security features:
1. Authentication of the server.
2. Conﬁdentiality of the communication channel.
3. Message integrity of the communication channel.
Optionally TLS can also provide authentication of the
client.
3.2. Protocol
TLS is a layered protocol consisting of four pieces,
shown in Figure 1.
Handshake
Change
Cipher
Spec
Alert