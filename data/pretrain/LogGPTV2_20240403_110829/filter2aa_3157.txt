IDA Pro
Hex-Rays Decompiler 
Simple Tricks
Hello!
aaaddress1(ADR)
1. Reverse Engineering Skills
a. Windows
b. Android
2. TDoHacker Core Member
3. Hack Bot
a. CrackShield / MapleHack
b. Tower Of Savior
c. Facebook
4. CSharp,C/C++,Assembly x86
Python,Smali,Pascal,VB.NET
Outline
➢ 动机
➢ IDA Pro Hex-Rays Decompiler是什么
➢ 如何理解ASM Opcode并推导出C Code
➢ 意外的Fire Eye欺骗IDA Pro的梗
➢ IDA Pro Hex-Rays Decompiler解析弱点
➢ Q&A
动机
“
F5超好按
→ 分析记忆体
→ 数位鉴识大神
→ 我超会逆向、破解
→ 我超强
→ IDA Pro好棒棒！
如何理解ASM Opcode
并推导出C Code
1. Push 0x12345678
2. Sub Esp,04
mov [esp], 0x12345678
16
Asm to C：Push Stack
1. Pop eax
2. mov eax, [esp]
Add Esp,04
17
Asm to C：Pop Stack
Asm to C：Jmp (GoTo)
18
1. Jmp Addr
2. Push Addr
ret
3. Sub Esp, 04
mov [Esp], Addr
ret
mov eax, 0
→ sub eax,eax //自己减自己，NO GG
→ and eax,0    //eax与0做交集
→ xor eax,eax //自己对自己互斥或，结果为0
19
Asm to C：清空
cmp eax,1
Je 0x12345678
→ sub eax,1
→ Je 0x12345678
20
Asm to C：条件跳跃
cmp eax,1
Jg 0x12345678
→ sub eax,1
→ Jg 0x12345678
21
Asm to C：条件跳跃
cmp eax,1
Jl 0x12345678
→ sub eax,1
→ Jl 0x12345678
22
Asm to C：条件跳跃
cmp eax, 0
Je 0x12345678
→ test eax,eax     //编译器常用老梗
→ Jz 0x12345678
→ Je 0x12345678
23
Asm to C：条件跳跃
cmp eax, 0
Je 0x12345678
→ or eax,eax
→ Je 0x12345678
24
cmp eax,0
Je 0x12345678
→ and eax,eax
→ Je 0x1234578
Asm to C：条件跳跃
MessageBoxA( Arg1, Arg2, Arg3, Arg4);
push Arg4
push Arg3
push Arg2
push Arg1
call MessageBoxA
25
Asm to C： Call
MessageBoxA( Arg1, Arg2, Arg3, Arg4);
push Arg4
push Arg3
push Arg2
push Arg1
push 返回地址
Jmp MessageBoxA
26
Asm to C： Call
MessageBoxA( Arg1, Arg2, Arg3, Arg4);
push Arg4
push Arg3
push Arg2
push Arg1
push 返回地址
push MessageBoxA
ret
27
Asm to C： Call
ASM → C：For
for (int i = 0; i < 500; i++)
{
/*...Do Anything You Want…*/
}
28
ASM → C：For
Project1._GetExceptDLLinfo+FFA - xor eax,eax
Project1._GetExceptDLLinfo+FFC - mov [ebp-0C],eax
Project1._GetExceptDLLinfo+FFF - inc [ebp-0C]
.
.
.
Project1._GetExceptDLLinfo+1002- cmp [ebp-0C],000001F4
Project1._GetExceptDLLinfo+1009- jnge Project1._GetExceptDLLinfo+FFF
29
for (int i = 2; i < 500; i++)
{
/*...Do Anything You Want…*/
}
30
ASM → C：For
Project1._GetExceptDLLinfo+FFA - mov [ebp-0C],00000002
Project1._GetExceptDLLinfo+1001- inc [ebp-0C]
.
.
.
.
Project1._GetExceptDLLinfo+1004- cmp [ebp-0C],000001F4
Project1._GetExceptDLLinfo+100B- jnge Project1._GetExceptDLLinfo+1001
31
ASM → C：For
IDA Pro Hex-Rays 
Decompiler解析弱点
小总结
1. IDA Pro 可以识别Push Addr : ret形式跳转
2. IDA Pro 不善于分析非纯粹Jmp、Jl、Je...等
条件/直接跳转的逻辑顺序置换手法（只要
遇到第一个ret后的事情都不管了只记录
[esp]返回点到哪）
“
以上这样做逻辑顺序置换，
IDA很快就晕了
“
喔，啊所以咧？
这很简单啊
这可以干嘛？
说到这个，不得不提一下
AIS3 Crypto3
IDA Pro 解析 Jmp
1. 正常情况下，遇到ret视为函数结束
2. 若找查不到ret则以Jmp当作结尾
3. Jmp在函数内来回跳可做解析
4. Jmp往下跳则无法解析回C（但可点击至该地址）
5. Jmp往回跳则无法明确解析地址
说到这个，又不得不提一下
Flare-On CTF 2015
IDA Pro在反组译解析时，
解析到第一个ret或者非回圈的Jmp即当作函数尾
“
我们要怎么做出诈欺的Code？
IDA解析小特性：
IDA Pro Decomilper对纯暂存器操作不敏感，只对函数
内变数之操作敏感。（例如说：eax,ebx,ecx… etc）
IDA Pro 对单个函数反组译时（回推C）从函数头开始往
下遇到第一个ret或者非回圈的Jmp即当作函数尾。
但是IDA Pro相当重视Push跟Pop两指令在函数内对堆
栈的变化。（用于确认函数是否平衡堆叠，如果不平衡
就直接不做解析了）
IDA解析小特性：
IDA Pro Decomilper对纯暂存器操作不敏感，只对函数
内变数之操作敏感。（例如说：eax,ebx,ecx,… etc）
咦...
我们的C++内的Try不就是...
push Handler
mov eax, fs:[0]
push eax
mov fs:[0],esp
EXCEPTION_DISPOSITION
__cdecl
_except_handler(
struct _EXCEPTION_RECORD *ExceptionRecord,
void * EstablisherFrame,
    struct _CONTEXT *ContextRecord,
    void * DispatcherContext )
{
    printf( "Hello World”);
    return ExceptionContinueSearch;
}
mov eax, [esp]
mov fs:[0], eax
add esp, 8
莫风征伴侣！
如果各位单身饥渴已久的男、女性对莫风也有兴趣，
欢迎到以下网址：
https://ioan.isalways.one
Hello!
aaaddress1(ADR)
Q&A
PI:EMAIL