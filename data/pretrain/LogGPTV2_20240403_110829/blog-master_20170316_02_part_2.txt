```  
postgres=# select * from tt order by d limit 2 offset 999000;  
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 804.645 ms  
postgres=# select * from tt order by n limit 2 offset 999000;  
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 2828.066 ms  
postgres=# select * from tt order by d64 limit 2 offset 999000;  
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 1826.044 ms  
postgres=# select * from tt order by d128 limit 2 offset 999000;  
   ii   |     d      |    d64     |    d128    |     n        
--------+------------+------------+------------+------------  
 999001 | 999001.123 | 999001.123 | 999001.123 | 999001.123  
 999002 | 999002.123 | 999002.123 | 999002.123 | 999002.123  
(2 rows)  
Time: 2118.647 ms  
```  
哈希JOIN性能对比  
```  
postgres=# explain select count(*) from tt t1 join tt t2 on t1.d64 * t1.d64 + t1.d64 = t2.d64 + t2.d64 * t2.d64;  
                                    QUERY PLAN                                      
----------------------------------------------------------------------------------  
 Aggregate  (cost=6875071228.00..6875071228.01 rows=1 width=8)  
   ->  Hash Join  (cost=36707.00..5625071228.00 rows=500000000000 width=0)  
         Hash Cond: (((t1.d64 * t1.d64) + t1.d64) = (t2.d64 + (t2.d64 * t2.d64)))  
         ->  Seq Scan on tt t1  (cost=0.00..20300.00 rows=1000000 width=8)  
         ->  Hash  (cost=20300.00..20300.00 rows=1000000 width=8)  
               ->  Seq Scan on tt t2  (cost=0.00..20300.00 rows=1000000 width=8)  
(6 rows)  
Time: 0.508 ms  
postgres=# select count(*) from tt t1 join tt t2 on t1.d64 * t1.d64 + t1.d64 = t2.d64 + t2.d64 * t2.d64;  
  count    
---------  
 1000000  
(1 row)  
Time: 1681.451 ms  
postgres=# select count(*) from tt t1 join tt t2 on t1.n * t1.n + t1.n = t2.n + t2.n * t2.n;  
  count    
---------  
 1000000  
(1 row)  
Time: 2395.894 ms  
```  
嵌套循环性能对比  
```  
postgres=# explain select count(*) from tt t1, tt t2 where t1.ii  t2.d + t2.d * t2.d;  
                                  QUERY PLAN                                     
-------------------------------------------------------------------------------  
 Aggregate  (cost=2699703.15..2699703.16 rows=1 width=8)  
   ->  Nested Loop  (cost=0.00..2614087.74 rows=34246165 width=0)  
         Join Filter: (((t1.d * t1.d) + t1.d) > (t2.d + (t2.d * t2.d)))  
         ->  Seq Scan on tt t1  (cost=0.00..22800.00 rows=10136 width=8)  
               Filter: (ii   Materialize  (cost=0.00..22850.68 rows=10136 width=8)  
               ->  Seq Scan on tt t2  (cost=0.00..22800.00 rows=10136 width=8)  
                     Filter: (ii  t2.d + t2.d * t2.d;  
  count     
----------  
 49985001  
(1 row)  
Time: 19706.890 ms  
postgres=# select count(*) from tt t1, tt t2 where t1.ii  t2.n + t2.n * t2.n;  
  count     
----------  
 49985001  
(1 row)  
Time: 70787.289 ms  
postgres=# select count(*) from tt t1, tt t2 where t1.ii  t2.d64 + t2.d64 * t2.d64;  
  count     
----------  
 49985001  
(1 row)  
Time: 49861.689 ms  
postgres=# select count(*) from tt t1, tt t2 where t1.ii  t2.d128 + t2.d128 * t2.d128;  
  count     
----------  
 49985001  
(1 row)  
Time: 65779.153 ms  
```  
## 小结  
PostgreSQL内置的numeric类型属于"无限"精度数值类型，其他类型都是定长存储，使用时不需要调用palloc，效率较高。  
如果你要使用超过双精能表示的有效范围的数值，目前只能选择decimal\numeric类型，而这个类型前面说了，由于是变长设计，需要调用palloc，效率一般。  
那么在数据分析领域，或者需要处理非常多的数据记录时，numeric类型的开销是较大的。  
从前面的测试数据，可以观察到性能最好的是float8，其次是decimal64, decimal64不需要使用palloc，性能比numeric好1.5倍左右，而decimal128也比numeric性能好不少。  
期待将来PostgreSQL内置decimal64, decimal128。  
## 参考  
[《PostgreSQL fixeddecimal - 用CPU "硬解码" 提升1倍 数值运算能力 助力金融大数据量计算》](../201603/20160303_01.md)  
https://www.postgresql.org/message-id/flat/CAFWGqnsuyOKdOwsNLVtDU1LLjS%3D66xmxxxS8Chnng_zSB5_uCg%40mail.gmail.com#CAFWGqnsuyOKdOwsNLVtDU1LLjS=PI:EMAIL  
https://github.com/vitesse-ftian/pgdecimal  
https://pgxn.org/dist/pgdecimal/1.0.0/  
https://github.com/2ndQuadrant/fixeddecimal  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")