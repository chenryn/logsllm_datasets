# 深入分析 CVE-2018-1045 (MSA-18-0004)

### 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

### 目录
- 漏洞信息分析
- 代码审计分析
- 总结
- 关于漏洞利用
- 漏洞修复

## 漏洞信息分析
根据官方描述：
“可以在日历块中的事件名称中注入JavaScript。但通常情况下，创建活动的能力只提供给信任的用户（如教师），因此该漏洞未被标记为XSS风险，而是被视为安全问题。”

XSS注入点位于“日历块中的事件名称”。通过注册账号并查找相关功能，尽管没有直接找到“event name”，但发现了类似的功能。进一步查看补丁信息，发现`$name`参数使用了`clean_text()`函数进行过滤，说明原始版本中的`$name`变量存在XSS注入风险。

## 代码审计分析
为了进行代码审计，我们下载了已修复漏洞的3.3.4版本源码。选择此版本的原因是，虽然3.3.3版本未找到，但3.3.4与3.3.3在该漏洞上的差异仅在于一行代码，因此可以使用3.3.4版本进行分析。

### 分析目标
1. 确定`$name`变量的具体来源。
2. 分析`$name`变量未经`clean_text()`函数过滤时的输出位置及其导致XSS注入的方式，并构造相应的payload。
3. 检查修补方案是否存在绕过（因时间限制，本次暂不分析）。

### 代码路径
- 漏洞修复点：`/calendar/lib.php`第1460行。
- 未修复前的代码：`$popupcontent .= \html_writer::link($dayhref, $name);`
- `html_writer::link`方法定义于`/lib/outputcomponents.php`第1732行。

通过追踪代码逻辑，`$name`变量的变化过程如下：
- `$name` -> `$text` -> `$contents`
- 最终输出格式为`<a href="$dayhref">$name</a>`

在这个过程中，`$name`未经过滤即被输出到HTML页面。为了验证这一点，我们尝试在实际环境中测试，但由于搭建Moodle环境遇到困难，只能通过审查元素确认输出格式符合预期。

### 名称来源
- 在`/calendar/lib.php`的1444、1452、1454、1457行，`$name`均来自`$event->name`。
- `format_string`方法（`/lib/weblib.php`第1409行）和`get_string`方法（`/lib/moodlelib.php`第7031行）均未对`$event->name`进行过滤。

结合以上分析，可以确定从这些位置传入的`$name`存在XSS注入风险。

## 总结
本漏洞存在的原因是`Event title`作为可控输入点传递至`$name`变量，并且未经任何过滤就按以下格式直接输出：
```html
<a href="$dayhref">$name</a>
```
这导致了XSS注入。

## 关于漏洞利用
由于需要用户先登录才能访问日程管理模块，因此利用此漏洞较为复杂。一种可能的利用方式是攻击者注册账户并在日程管理模块中注入盲打cookie的XSS代码。当其他用户查看该日程事件时，将执行注入的XSS代码，从而获取访问用户的cookie。

## 漏洞修复
只需修改`/calendar/lib.php`第1460行代码，将：
```php
$popupcontent .= \html_writer::link($dayhref, $name);
```
改为：
```php
$popupcontent .= \html_writer::link($dayhref, clean_text($name));
```
即可防止XSS注入。