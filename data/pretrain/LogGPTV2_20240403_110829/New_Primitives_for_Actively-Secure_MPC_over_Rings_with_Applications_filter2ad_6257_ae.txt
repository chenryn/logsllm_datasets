6902
4514
114071
1282
756
Factor
4.6x
5.4x
6.0x
Multiplication
Equality
Comparison
an improvement since reducing data sent also reduces the
amount of local serialization and data copying FRESCO
does as part of networking.
Equality also beneﬁts from switching to boolean mode,
though the performance improvement is less pronounced;
we operate in arithmetic mode by default and must convert
the boolean output of the ΠEQZ protocol to an arithmetic
sharing. This introduces an additional protocol round. We
avoid this conversion for comparisons (see Step 5 of Fig. 5).
We note that for k = 32, multiplication yields a slightly
higher relative improvement than equality. This is due to the
fact that the beneﬁt of reduced communication for equality is
not high enough to outweigh the internal framework-related
overhead of executing a more complex protocol.
The lower communication of multiplication and compar-
ison directly affects the communication and computation
required for the more advanced applications of decision trees
and SVMs, as can be seen in Tab.
III and V.
II,
B. Ofﬂine Phase
Fig. 7 compares our implementation of triple generation
to the two state-of-the-art preprocessing protocols of the
SPDZ family; MASCOT [10], and Overdrive [24]. All three
implementations are part of the MP-SPDZ framework [44].
We ﬁrst note that SPDZ2k saturates the network for all
number threads we tested in the WAN setting, and for 2 and
4 threads on a 1 Gbps LAN. However, SPDZ2k becomes
computationally bounded in the case for one thread on the
1 Gbps LAN and for all number of threads we tested in
the 10 Gbps LAN setting. This is visible from the graphs
by noting the convergence of throughput of SPDZ2k in the
WAN setting and at 2 threads in the 1 Gbps LAN.
For similar bit-lengths,
the efﬁciency of SPDZ2k and
MASCOT is almost
the same. This is expected as our
implementation is closely related to MASCOT. For smaller
bit-lengths, i.e., k = 32, our implementation is signiﬁcantly
more efﬁcient since it requires far less communication. We
note that the MASCOT implementation is hard-coded for
ﬁelds of 128 bits and thus we cannot compare how it
fares with a smaller ﬁeld. Overdrive performs signiﬁcantly
better than SPDZ2k in the WAN setting, but the difference
shrinks in a LAN. This is not surprising as Overdrive uses
signiﬁcantly less communication than MASCOT, and thus
fares much better in a slower network than MASCOT, and
consequently SPDZ2k. SPDZ2k can nonetheless compete
(cid:18)(cid:18)(cid:18)(cid:20)
with Overdrive, given a fast enough network; (Fig. 7c)
shows that the low bit setting for SPDZ2k matches Overdrive
performance in a 10 Gbps LAN.
We ran SPDZ2k and MASCOT in batches of 1024 triples,
and Overdrive in low-gear mode [24], the most efﬁcient
mode in the two-party setting. Increasing the thread count
further did not signiﬁcantly improve the throughput of any
of the protocols we benchmarked.
The amount of preprocessed material needed for the
operations/applications considered in this work can be found
in Table
IV. The table includes count of the arithmetic
and bit triples needed for both SPDZ2k and SPDZ, along
with the amount of random bits needed (which require an
arithmetic multiplication triple for both SPDZ2k and SPDZ).
We note the timing column is only an estimate, based on the
time required for triple generation and bit triple generation.
Thus the true time will be slightly larger for both SPDZ2k
and SPDZ, because of the usage of authentication and input
masks. However, these are in the order of a magnitude faster
to construct compared to triples. Furthermore, the amount
needed is fewer than the number of triples required and so
the true impact of constructing these will be minuscule. Most
importantly though, the amount required by both SPDZ2k
and SPDZ is almost the same and so the effect on the relative
difference between the two will be insigniﬁcant.
C. Communication
Table V shows theoretical communication complexity for
the online phase as well as preprocessing.
For the online costs, we see a large reduction in com-
munication due to our use of binary multiplications for
comparison and equality. The improvements range from
42x to 85x. For pre-processing, we include the theoretical
communication complexity for the SPDZ2k ofﬂine phase
based on vOLE (and hence correlated OT) and Overdrive
for SPDZ. Though we reduce communication by using
bit-triples for bit-wise multiplication,
the communication
complexity of our preprocessing is still muchs larger than
Overdrive. This is because the communication complexity of
an Overdrive triple is less than that of a bit-triple using the
most efﬁcient TinyOT preprocessing [36]. As such, adapting
the Overdrive preprocessing to the ring setting is promising
future work. Notably, if we run preprocessing on a network
with enough bandwidth, we outperform both MASCOT and
Overdrive for all applications and tested values of k (cf.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:49:58 UTC from IEEE Xplore.  Restrictions apply. 
Table II: Online phase benchmarking of evaluation of decision trees over 1 Gbps network. The factor columns express the runtime improvement factor of
SPDZ2k over SPDZ in FRESCO. Times are in milliseconds per sample.
Dataset
Depth, Num. Features
Batch Size
Hill Valley
Spambase
Diabetes
Hill Valley
Spambase
Diabetes
3, 100
6, 57
9, 8
3, 100
6, 57
9, 8
1
1
1
5
5
5
k = 32, σ = 26
k = 64, σ = 57
SPDZ2k
21 ms
48 ms
80 ms
6 ms
14 ms
41 ms
SPDZ
24 ms
104 ms
215 ms
10 ms
40 ms
185 ms
Factor
1.2x
2.2x
2.7x
1.7x
2.9x
4.5x
SPDZ2k
26 ms
56 ms
122 ms
7 ms
17 ms
78 ms
SPDZ
34 ms
128 ms
443 ms
15 ms
68 ms
376 ms
Factor
1.3x
2.3x
3.6x
2.1x
4.0x
4.8x
Table III: Online phase benchmarking of SVM evaluation over 1 Gbps network. The factor columns express the runtime improvement factor of SPDZ2k
over SPDZ in FRESCO. Times are in milliseconds per sample.
Dataset
CIFAR
MIT
ALOI
CIFAR
MIT
ALOI
]
d
n
o
c
e
s
r
e
p
[
t
u
p
h
g
u
o
r
h
T
3500
3000
2500
2000
1500
1000
500
0
Num. Classes, Features
Batch Size
10, 2048
67, 2048
463, 128
10, 2048
67, 2048
463, 128
1
1
1
5
5
5
k = 32, σ = 26
k = 64, σ = 57
SPDZ2k
82 ms
379 ms
242 ms
39 ms
225 ms
162 ms
SPDZ
214 ms
1318 ms
857 ms
168 ms
1101 ms
741 ms
Factor
2.6x
3.5x
3.5x
4.3x
4.9x
4.6x
SPDZ2k
99 ms
499 ms
362 ms
57 ms
294 ms
244 ms
SPDZ
255 ms
1582 ms
1312 ms
209 ms
1428 ms
1220 ms
Factor
2.6x
3.2x
3.6x
3.7x
4.9x
5.0x
SPDZ2k (k = 32, σ= 26)
Overdrive (k = 64 (128 bit ﬁeld), σ = 57)
1500
1000
500
SPDZ2k (k = 64, σ = 57)
Mascot (128 bit ﬁeld)
Overdrive (k = 32 (64 bit ﬁeld), σ = 40)
]
d
n
o
c
e
s
r
e
p
[
t
u
p
h
g
u
o
r
h
T
35000
30000
25000
20000
15000
10000
5000
0
1
2
3
4
Number of threads
]
d
n
o
c
e
s
r
e
p
[
t
u
p
h
g
u
o