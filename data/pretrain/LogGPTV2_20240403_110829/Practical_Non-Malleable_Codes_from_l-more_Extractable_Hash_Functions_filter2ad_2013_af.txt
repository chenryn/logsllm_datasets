s ≈c
s0 ≈c TamperΣ,f
s1 ,
(cid:4)
From the above claims we have that for any function f and any message s, TamperΣ,f
, which implies that for any f and any pair of messages s0, s1, TamperΣ,f
Expf,Σ,
and the proof is complete.
and Expf,Σ,s1
→
0
3
3
3
3
16
Length of the CRS. The length of the CRS in our construction is roughly 32k bits: we need
to hash a 6k-bit (roughly) key of an authenticated encryption scheme and then encrypt the
message using that key; this would require the parameters for the 16-KEA to be on the CRS,
resulting in the 32k bits length.
5 Constructing 1-more extractable hash functions
In this section, we present our construction of 1-more extractable hash function families. Our
construction is in two steps: (1) we ﬁrst present a construction assuming a coding scheme that
satisﬁes randomness simulatable non-malleability (RSS-NM), against aﬃne tampering func-
tions, and (2) we show how to construct such a code. Finally, we present Corollary 5.10 to
summarize our overall construction, by putting all things together in a single statement. As
we have already discussed on the introduction, the idea of constructing a NM-code for aﬃne
functions, as an intermediate step for providing split-state codes, was also followed by [4], still,
our technique diﬀers signiﬁcantly, and their code does not directly satisfy our requirements.
Moreover, in [24] the authors construct AMD codes, still their notions are slightly diﬀerent and
do ﬁt in our framework.
5.1 1-more extractable hash functions from RSS-NM codes against aﬃne
functions
In this section we construct a collision resistant, 1-more extractable hash function family. Before
doing so, we present the notion of “randomness simulatable, strongly non-malleable codes” (RSS-
NMC). This notion is stronger than strong non-malleability in the sense that besides simulating
the pre-image, ˜s, of the tampered codeword, the simulator also needs to produce the randomness
of the encoder, ˜sr, such that the encoding of ˜s with randomness ˜sr, produces the tampered
codeword. To ease the presentation of RSS-NMC, we modify the syntax of non-malleable codes,
so that the Dec algorithm returns, not only the decoded message ˜s, but also the randomness
string ˜sr for the encoder Enc. This is the string that in the tampering experiment the simulator
should be able to match.8
Deﬁnition 5.1 (Randomness simulatable, strongly non-malleable code). Let (Enc, Dec) be a
(κ, ν)-coding scheme and F be a family of functions f : {0, 1}ν → {0, 1}ν. For every f ∈ F and
s ∈ {0, 1}κ, deﬁne the tampering experiment
Tamperf
s
def=
c ← Enc(s), ˜c ← f (c), (˜sr, ˜s) = Dec(˜c)
Output same∗ if ˜c = c, and (˜sr, ˜s) otherwise.
(cid:27)
(cid:26)
(cid:110)
which is a random variable over the randomness of Enc and Dec. A coding scheme (Enc, Dec) is
randomness simulatable, strongly non-malleable (RSS-NM), with respect to the function family
F, if for every f ∈ F and any s0, s1 ∈ {0, 1}κ, we have:
(cid:111)
≈(cid:110)
(cid:111)
Tamperf
s0
k∈N
Tamperf
s1
k∈N
where “≈” may refer to statistical, or computational, indistinguishability. For coding schemes
in the common reference string model, the deﬁnition is analogous.
Next we present our construction:
Construction 5.2 (1-more extractable hash). Let G be a group-generation algorithm and let
(Enc, Dec) be a (kt, kt(cid:48))-coding scheme, t, t(cid:48) = O(poly(k)). An instance of a (kt, 2k)-compressing
hash function family H = (Gen, h) is deﬁned as follows:
1. Gen(1k): sample (G, g, p) ← G(1k), (a, r) $← Zp × Zt(cid:48)
p , where p = |G|, and output z =
(G, gr, gar).
8It is possible to deﬁne RSS-NMC without modifying the operation of Dec at the expense of slightly com-
plicating the deﬁnition of non-malleability. Due to the fact that our RSS-NMC construction conforms to the
modiﬁed syntax, we opt for the simpler alternative.
17
2. Hashing computation: on input s = (s1, . . . , st), sample sr
hz(sr, s) = (g(cid:104)r,c(cid:105), g(cid:104)ar,c(cid:105)), where c ← Enc(sr, s).
$← U{0,1}poly(k), compute
For coding schemes (Init, Enc, Dec) in the CRS model, Gen(1k) outputs (z, Σ), where Σ ← Init(1k).
In the following we prove that Construction 5.2, which is a composition of a coding scheme
(Enc, Dec), with construction 3.3 (the 0-more extractable hash function by Bitansky et al. [11]),
is collision resistant, 1-more extractable, and uniform under leakage, assuming that (Enc, Dec),
satisﬁes certain properties. Then, in Section 5.2, we instantiate (Enc, Dec) with the desired
properties. Below, we prove that Construction 5.2 is collision resistant.
Lemma 5.3. Let G be any group generation algorithm. Then, assuming the hardness of the
discrete logarithm problem on G, and the underlying encoding algorithm is injective, Construction
5.2 is collision resistant with respect to G.
Proof. In [11] the authors prove that the hash function family of Construction 3.3, i.e., H∗,
is collision resistant, assuming the diﬃculty of the discrete logarithm problem. We note that
Construction 5.2 is a composition of Enc(·) and H∗. Following a simple fact that any injective
function composed with a collision resistant hash function still results in a collision resistant
hash function (composition in any order), we can conclude that the hash function family of
Construction 5.2 is collision resistant, under the same assumption.
(cid:4)
In the following theorem, we prove that, under certain assumptions, Construction 5.2, is
1-more extractable.
Theorem 5.4. Let t(k), t(cid:48)(k) = O(poly(k)), (Enc, Dec) be any RSS-non-malleable, (kt, kt(cid:48))-
coding scheme, against Faﬀ, let H be the hash function family of Construction 5.2 with respect to
(Init, Enc, Dec), and assume that for any message s, H∞ (Enc(s)) ≥ k+ω(log k). Then, assuming
t(cid:48)-KEA and the hardness of DLog, H is 1-more extractable, with respect to (Init, Enc, Dec).
Proof. For k ∈ N, let (Enc, Dec) be an RSS-NM, (kt, kt(cid:48))-coding scheme, against Faﬀ, t(k), t(cid:48)(k) =
O(poly(k)), and let H be the (kt, 2k)-compressing, collision-resistant, hash function family of
Construction 5.2. Following Deﬁnition 3.1, we need to prove that for any PPT algorithm Av
with auxiliary input auxAv , there exist extractor EH
and auxiliary input auxE , such that for any
Av
PPT algorithm As, any large k and every message s = (s1, . . . , st) ∈ Zt
p,
≤ negl(k).
(1, auxAv , auxE ) = 1
(cid:21)
(cid:20)
Exps,hzAv,As,EH
Av
Pr
hz←Hk
(1)
Clearly, if Av fails to produce a new valid hash, or, if As fails to produce a valid pre-image
for the new hash, the experiment simply outputs 0, and there is no challenge for the extractor.
Therefore, the interesting case is when Av produces a valid hash value, say ˜v, while having
access to an element in the range of the hash, say v, and As produces a valid pre-image for ˜v,
while having access to s, v, ˜v, and any other state information produced by Av. Hence, for the
rest of the proof we assume ˜v (cid:54)= v, and (˜sr, ˜s) is a valid pre-image for ˜v, i.e., hz(˜sr, ˜s) = ˜v.
Given any Av with auxiliary input auxAv , the idea behind the deﬁnition of the extractor,
EH
, and its auxiliary input, auxE , goes as follows:
Av
• First we deﬁne an adversary against the hash function family H∗, of Construction 3.3:
z(cid:48), auxAv ) := Av(hz, v, auxAv ), where ¯Av ﬁrst interprets the description of the hash
z(cid:48), as (hz, v), i.e., as a description of a hash function in H and a hash value v,
¯Av(h∗
function h∗
and then executes Av(hz, v, auxAv ). The function h∗
z(cid:48) will be stated concretely below.
• Since H∗ is a 0-more extractable hash function family, and assuming h∗
from an element in H∗, there exists an extractor ¯EH∗
¯Av
extracts a valid pre-image for ˜v, with respect to h∗
input auxE := aux ¯E .
z(cid:48) is indistinguishable
with its auxiliary input aux ¯E , that
z(cid:48) (see Claim 5.5). We deﬁne the auxiliary
18
The extractor is deﬁned below.
The extractor EH
Av
Input: (z = (gr, gar), v = (gr(cid:48)
, gar, gar(cid:48)
1. Set z(cid:48) = (gr, gr(cid:48)
:
), auxE ).
, gar(cid:48)
). Here, we interpret z(cid:48) as a description of hash function h∗
z(cid:48) ∈ H∗,
for vector messages with t(cid:48) + 1 coordinates.
2. Sample (b1, . . . , bt(cid:48), d) ← ¯EH∗
¯Av
z(cid:48), auxE ) and set f = (b1, . . . , bt(cid:48), d) = (b, d) ∈ Zt(cid:48)+1
(h∗
p
.
3. Interpret f as an aﬃne function that on input (x1, . . . , xt(cid:48)) outputs (dx1 + b1, dx2 +
is the simulator of the
b2, . . . , dxt(cid:48) + bt(cid:48)), and then sample (ˆsr, ˆs) ← Daﬀ
underlying RSS-NM code, (Enc, Dec), parameterized by the aﬃne function f .
f , where Daﬀ
f
4. Output: (ˆsr, ˆs).
The extractor is deﬁned with respect to any input v, still by the deﬁnition of the (cid:96)-more ex-
periment, v is always a valid hash value, i.e., v = hz(s) = (g(cid:104)r,c(cid:105), ga(cid:104)r,c(cid:105)), where c ← Enc(sr, s),
for some message s. Then, for any As, and message s, we are going to analyze the execution of
Exps,hzAv,As,EH
(1, auxAv , auxE ). We ﬁrst prove that with overwhelming probability, the following
Av
events happen:
z(cid:48)(b1, . . . , bt(cid:48), b0) = ˜v. Recall that ˜v is the output of Av on input (hz, v).
• E1: h∗
• E2: Enc(˜sr, ˜s) = f (c). Recall that (˜sr, ˜s) is the output of As.
We formalize those ideas in the following claims.
, gar(cid:48)
(1, auxAv , auxE ).
Av
z(cid:48), we need to prove that h∗
and auxE , be as they where deﬁned above. Then, for any
), for a uniformly random r(cid:48), in which z(cid:48) = (gr, gr(cid:48)
Claim 5.5. Let hz, Av, auxAv , EH
Av
As and message s, Pr[¬E1] < negl(k) under the experiment Exps,hzAv,As,EH
Proof. We recall that the experiment selects a random hash function hz = (gr, gar), and
then computes v = hz(s) = (g(cid:104)r,c(cid:105), ga(cid:104)r,c(cid:105)), where c ← Enc(sr, s).
In order to show that
f = (b1, . . . , bt(cid:48), d) is a valid pre-image for ˜v with respect to h∗
z(cid:48) =
(gr, g(cid:104)r,c(cid:105), gar, ga(cid:104)r,c(cid:105)) is indistinguishable from an element in H∗. We analyze this probability,
Pr[E1], under this distribution, say D1, for z(cid:48), by considering Pr[E1] under another related distri-
bution, D2, for which v = (gr(cid:48)
, gar, gar(cid:48)
).
Since H∞ (Enc(s)) ≥ k + ω(log k), and since the randomness of the encoder is independent of
Z = (auxAv , hz), (those values are ﬁxed before sampling randomness for the hash), we have
H∞ (Enc(s) | Z) ≥ k + ω(log k), and therefore, ˜H∞(Enc(s) | Z) ≥ k + ω(log k). By the above
argument, the Left-Over Hash Lemma (Lemma A.9) and the universality of the inner product
function (Lemma A.11), the distribution (cid:104)r, c(cid:105) is statistically close to uniform, under the partial
execution of the “1-more” experiment, i.e., up to the point we execute the extractor. This im-