测试代码及数据库： 提取密码:75tu
首先，我们来看一下1的源码，这对用户输入的id用 addslashes() 函数进行了处理，而且是当成字符串处理。
我们输入 [ http://127.0.0.1/1/1/?id=1′](?id=1%27)
这里addslashes函数把我们的 ’ 进行了转义，转义成了 ‘。
所以，我们要想绕过这个转义，就得把 ‘ 的 \ 给去掉。那么怎么去掉呢。
1\. 在转义之后，想办法让\前面再加一个\，或者偶数个\即可，这样就变成了\’ ，\ 被转义了，而 ‘ 逃出了限制。
2.在转义之后，想办法把 \ 弄没有，只留下一个 ‘ 。
我们这里利用第2中方法，宽字节注入，这里利用的是MySQL的一个特性。MySQL在使用GBK编码的时候，会认为两个字符是一个汉字，前提是前一个字符的
ASCII 值大于128，才会认为是汉字。
当我们输入如下语句的时候，看看会发生什么。
    127.0.0.1/1/1/?id=1%df'
我们发现页面报错了，而且报错的那里是 ‘1运” 。我们只输入了 1%df ‘ ，最后变成了 1运 ‘ 。所以是mysql把我们输入的%df和反斜杠\
合成了一起，当成了 运 来处理。而我们输入的单引号’ 逃了出来，所以发生了报错。我们现在来仔细梳理一下思路。 我们输入了 1%df ’
,而因为使用了addslashes()函数处理 ‘，所以最后变成了 1%df’ , 又因为会进行URL编码，所以最后变成了 1%df%5c%27
。而MySQL正是把%df%5c当成了汉字 运 来处理，所以最后 %27 也就是单引号逃脱了出来，这样就发生了报错。而这里我们不仅只是能输入%df
，我们只要输入的数据的ASCII码大于128就可以。因为在MySQL中只有当前一个字符的ASCII大于128，才会认为两个字符是一个汉字。所以只要我们输入的数据大于等于
%81 就可以使 ‘ 逃脱出来了。
知道怎么绕过，我们就可以进行注入获得我们想要的信息了！
既然GBK编码可以，那么GB2312可不可以呢？怀着这样的好奇，我们把数据库编码改成了GB2312，再次进行了测试。我们发现，当我们再次利用输入 1%df’
的时候，页面竟然不报错，那么这是为什么呢？
这要归结于GB2312编码的取值范围。它编码的取值范围高位是0XA1~0XF7，低位是0XA1~0xFE,而 \ 是0x5C
，不在低位范围中。所以0x5c根本不是GB2312中的编码。所以，%5c 自然不会被当成中文的一部分给吃掉了。
所以，通过这个我们可以得到结论，在所有的编码当中，只要低位范围中含有 0x5C的编码，就可以进行宽字符注入。
发现了这个宽字符注入，于是很多程序猿把 addslashes() 函数换成了 mysql_real_escape_string()
函数，想用此来抵御宽字节的注入。因为php官方文档说了这个函数会考虑到连接的当前字符集。
那么，使用了这个函数是否就可以抵御宽字符注入呢。我们测试一下，我们输入下面的语句
    http://127.0.0.1/1/3/?id=1%df'
发现还是能进行宽字节的注入。那么这是为什么呢？原因就是，你没有指定php连接mysql的字符集。我们需要在执行SQL语句之前调用
**mysql_set_charset** 函数，并且设置当前连接的字符集为gbk。
这样当我们再次输入的时候，就不能进行宽字节注入了！
**宽字节注入的修复**
在调用 **mysql_real_escape_string()** 函数之前，先设置连接所使用的字符集为GBK ，
**mysql_set_charset=(‘gbk’,$conn)**
。这个方法是可行的。但是还是有很多网站是使用的addslashes()函数进行过滤，我们不可能把所有的addslashes()函数都换成mysql_real_escape_string()。
所以防止宽字节注入的另一个方法就是将 **character_set_client**
设置为binary(二进制)。需要在所有的sql语句前指定连接的形式是binary二进制：
    mysql_query("SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary", $conn); 
当我们的MySQL收到客户端的请求数据后，会认为他的编码是character_set_client所对应的编码，也就是二进制。然后再将它转换成character_set_connection所对应的编码。然后进入具体表和字段后，再转换成字段对应的编码。当查询结果产生后，会从表和字段的编码转换成character_set_results所对应的编码，返回给客户端。所以，当我们将character_set_client编码设置成了binary，就不存在宽字节注入的问题了，所有的数据都是以二进制的形式传递。
### 八：堆叠注入
在SQL中，分号;是用来表示一条sql语句的结束。试想一下我们在 ; 结束后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union
injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别呢？区别就在于union 或者union
all执行的语句类型是有限的，只可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：root’;DROP database
user；服务器端生成的sql语句为：Select * from user where name=’root’;DROP database
user；当执行查询后，第一条显示查询信息，第二条则将整个user数据库删除。
参考：[SQL注入-堆叠注入（堆查询注入）](https://www.cnblogs.com/0nth3way/articles/7128189.html)
[SQL
Injection8(堆叠注入)——强网杯2019随便注](https://blog.csdn.net/qq_26406447/article/details/90643951)
### 九：二次注入
二次注入漏洞是一种在Web应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与一次注入攻击漏洞相同的攻击威力。
1.黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL语句或者命令。
2.服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。
3.黑客向服务端发送第二个与第一次不相同的请求数据信息。
4.服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL语句或者命令在服务端环境中执行。
5.服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功
我们访问 
是一个登陆页面，我们没有账号，所以选择新建一个用户
我们新建的用户名为： **admin’#** 密码为： **123456**
查看数据库，可以看到，我们的数据插入进去了
我们使用新建的用户名和密码登录
登录成功了，跳转到了后台页面修改密码页面。
我们修改用户名为：admin’# 密码为：aaaaaaaaa
提示密码更新成功！
我们查看数据库，发现用户 admin’# 的密码并没有修改，而且 admin 用户的密码修改为了 aaaaaaaaaa
那么，为什么会这样呢？我们查看修改密码页面源代码，发现这里存在明显的SQL注入漏洞
当我们提交用户名 admin’# 修改密码为 aaaaaaaaaa 的时候，这条SQL语句就变成了下面的语句了。
#把后面的都给注释了，所以就是修改了admin用户的密码为 aaaaaaaaaa
    $sql = "UPDATE users SET PASSWORD='aaaaaaaaaa' where username='admin'#' and password='$curr_pass' ";
### 十：User-Agent注入
我们访问  ，页面显示一个登陆框和我们的ip信息
当我们输入正确的用户名和密码之后登陆之后，页面多显示了 浏览器的User-Agent
抓包，修改其User-Agent为
    'and extractvalue(1,concat(0x7e,database(),0x7e))and '1'='1  #我们可以将 database()修改为任何的函数
可以看到，页面将当前的数据库显示出来了
### 十一：Cookie注入
如今绝大部门开发人员在开发过程中会对用户传入的参数进行适当的过滤，但是很多时候，由于个人对安全技术了解的不同，有些开发人员只会对get，post这种方式提交的数据进行参数过滤。
但我们知道，很多时候，提交数据并非仅仅只有get /
post这两种方式，还有一种经常被用到的方式：request(“xxx”),即request方法。通过这种方法一样可以从用户提交的参数中获取参数值，这就造成了cookie注入的最基本条件：使用了request方法，但是只对用户get
/ post提交的数据进行过滤。
我们这里有一个连接：[www.xx.com/search.asp?id=1](www.xx.com/search.asp?id=1)
我们访问：[www.xx.com/srarch.asp](www.xx.com/srarch.asp) 发现不能访问，说缺少id参数。
我们将id=1放在cookie中再次访问，查看能否访问，如果能访问，则说明id参数可以通过cookie提交。
那么，如果后端没有对cookie中传入的数据进行过滤，那么，这个网站就有可能存在cookie注入了！
### 十二：过滤绕过
传送门：[SQL注入过滤的绕过](https://blog.csdn.net/qq_36119192/article/details/102895415)
### 十三：传说中的万能密码
sql=”select*from test where username=’ XX ‘ and password=’ XX ‘ “;
**·** admin’ or ‘1’=’1 XX //万能密码(已知用户名)
**·** XX ‘or’1’=’1 //万能密码(不需要知道用户名)
**·** ‘or ‘1’=’1’# XX //万能密码(不知道用户名)
## SQL注入的预防
既然SQL注入的危害那么大，那么我们要如何预防SQL注入呢？
### (1)预编译(PreparedStatement)(JSP)
可以采用预编译语句集，它内置了处理SQL注入的能力，只要使用它的setXXX方法传值即可。
     String sql = "select id, no from user where id=?";
     PreparedStatement ps = conn.prepareStatement(sql);
     ps.setInt(1, id);
     ps.executeQuery();
如上所示，就是典型的采用 SQL语句预编译来防止SQL注入 。为什么这样就可以防止SQL注入呢？
其原因就是：采用了PreparedStatement预编译，就会将SQL语句：”select id, no from user where id=?”
预先编译好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该SQL语句的语法结构了，因为语法分析已经完成了，而语法分析主要是分析SQL命令，比如
select、from 、where 、and、 or 、order by
等等。所以即使你后面输入了这些SQL命令，也不会被当成SQL命令来执行了，因为这些SQL命令的执行，
必须先通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为SQL命令来执行的，
**只会被当做字符串字面值参数** 。所以SQL语句预编译可以有效防御SQL注入。
原理：SQL注入只对SQL语句的编译过程有破坏作用，而PreparedStatement已经预编译好了，执行阶段只是把输入串作为数据处理。而不再对SQL语句进行解析。因此也就避免了sql注入问题。
### (2)PDO(PHP)
首先简单介绍一下什么是PDO。PDO是PHP Data
Objects（php数据对象）的缩写。是在php5.1版本之后开始支持PDO。你可以把PDO看做是php提供的一个类。它提供了一组数据库抽象层API，使得编写php代码不再关心具体要连接的数据库类型。你既可以用使用PDO连接mysql，也可以用它连接oracle。并且PDO很好的解决了sql注入问题。
PDO对于解决SQL注入的原理也是基于预编译。
    $data = $db->prepare( 'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;' ); 
    $data->bindParam( ':id', $id, PDO::PARAM_INT ); 
    $data->execute();
实例化PDO对象之后，首先是对请求SQL语句做预编译处理。在这里，我们使用了占位符的方式，将该SQL传入prepare函数后，预处理函数就会得到本次查询语句的SQL模板类，并将这个模板类返回，模板可以防止传那些危险变量改变本身查询语句的语义。然后使用
bindParam()函数对用户输入的数据和参数id进行绑定，最后再执行，
### (3)使用正则表达式过滤
虽然预编译可以有效预防SQL注，但是某些特定场景下，可能需要拼接用户输入的数据。这种情况下，我们就需要对用户输入的数据进行严格的检查，使用正则表达式对危险字符串进行过滤，这种方法是基于黑名单的过滤，以至于黑客想尽一切办法进行绕过注入。基于正则表达式的过滤方法还是不安全的，因为还存在绕过的风险。
对用户输入的特殊字符进行严格过滤，如 ’、”、、/、*、;、+、-、&、|、(、)、and、or、select、union
### (4) 其他
**·** Web 应用中用于连接数据库的用户与数据库的系统管理员用户的权限有严格的区分（如不能执行 drop 等），并设置 Web
应用中用于连接数据库的用户不允许操作其他数据库
**·** 设置 Web 应用中用于连接数据库的用户对 Web 目录不允许有写权限。
**·** 严格限定参数类型和格式，明确参数检验的边界，必须在服务端正式处理之前对提交的数据的合法性进行检查
**·** 使用 Web 应用防火墙
相关文章： [科普基础 |
这可能是最全的SQL注入总结，不来看看吗](https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==&mid=2247487916&idx=1&sn=c9d32431334b9763e142d6eb2146440c&chksm=ec1f4493db68cd85ae41c347d070f81ff3573f9f761739bffa29d8f404798f2bbb2d6cd7a48b&mpshare=1&srcid=1111jL1hiK4qN6A1UlW9gMpp&sharer_sharetime=1573533208503&sharer_shareid=3444167e20a6bda27a1621888298c3dd&from=timeline&scene=2&subscene=1&clicktime=1573533281&enterid=1573533281&key=3629110d6c760ab1a60b2ddbdd463d088f6055a0b54cefecae065835451a5978df677a86604dd257c91d03b0a272a1e9802c5b5614141a18cdf5e587328776d96cdeb93d940939233ee0ff0d796dc71f&ascene=14&uin=MjIwMDQzNjQxOQ%3D%3D&devicetype=Windows+10&version=62060833&lang=zh_CN&pass_ticket=FlTFzz%2Bi2MKoo5LexHKUkAbu1BGujyuMMoXot%2B8z%2B4XmJLq1RXJBStxAla8wEduu)
[Sqlmap的使用](https://blog.csdn.net/qq_36119192/article/details/84479207)
[Sqli 注入点解析](https://blog.csdn.net/qq_36119192/article/details/82049508)
[DVWA之SQL注入考点小结](https://blog.csdn.net/qq_36119192/article/details/82315751)
[常见的SQL语句](https://blog.csdn.net/qq_36119192/article/details/82875868)
[Access数据库及注入方法](https://blog.csdn.net/qq_36119192/article/details/86468579)
[SQLServer数据库及注入方法](https://blog.csdn.net/qq_36119192/article/details/88679754)
[SQL注入知识库](https://websec.ca/kb/sql_injection#MSSQL_Default_Databases)
如果你想和我一起讨论的话，那就加入我的知识星球吧！