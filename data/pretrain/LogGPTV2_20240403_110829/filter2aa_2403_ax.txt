指令清单 12.10  f_unsigned() 
f_unsigned: 
  stp      x29, x30, [sp, -48]! 
; W0=a, W1=b 
  cmp      w0, w1 
  add      x29, sp, 0 
  str      x19, [sp,16] 
  mov      w19, w0 
  bhi      .L25          ; Branch if HIgher (a>b) 
  cmp      w19, w1 
  beq      .L26          ; Branch if Equal (a==b) 
.L23: 
  bcc      .L27          ; Branch if Carry Clear (if less than) (ab" 
  str      x1, [x29,40] 
  add      x0, x0, :lo12:.LC9 
  bl       puts 
  ldr      x1, [x29,40] 
  cmp      w19, w1 
  bne      .L23    ; Branch if Not Equal 
.L26: 
  ldr      x19, [sp,16] 
  adrp     x0, .LC10       ; "a==b" 
  ldp      x29, x30, [sp], 48 
  add      x0, x0, :lo12:.LC10 
  b        puts 
我在程序之中添加了注释。很明显，虽然有些条件表达式不可能成立，但是编译器不能自行判断出这
种问题。所以程序留有一些永远不会执行的无效代码。 
练习题 
上述代码中存在无效代码。请在不添加新指令的情况下删除多余多指令。 
12.1.3 MIPS 
MIPS 处理器没有标志位寄存器，这是它最显著的特征之一。这种设计旨在降低数据相关性的分析难度。 
x86 的指令集中有 SETcc 指令，MIPS 平台也有类似的指令：SLT（Set on Less Than/操作对象为有符号数）
和 SLTU（无符号数）。这两个指令会在条件表达式为真的时候设置目的寄存器为 1，否则设置其为零。 
随即可用 BEQ（Branch on Equal）或 BEN（Branch on Not Equal）指令检查上述寄存器的值，判断是
否进行跳转。总之，在 MIPS 平台上组合使用这两种指令，可完成条件转移指令的比较和转移操作。 
我们来看范本程序里处理有符号数的相应函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
113 
指令清单 12.11  Non-optimizing GCC 4.4.5 (IDA) 
.text:00000000 f_signed:           
# CODE XREF: main+18 
.text:00000000 
.text:00000000 var_10       
= -0x10 
.text:00000000 var_8        
= -8 
.text:00000000 var_4        
= -4 
.text:00000000 arg_0        
=  0 
.text:00000000 arg_4        
=  4 
.text:00000000 
.text:00000000           
addiu  
$sp, -0x20 
.text:00000004           
sw       
$ra, 0x20+var_4($sp) 
.text:00000008           
sw       
$fp, 0x20+var_8($sp) 
.text:0000000C           
move     
$fp, $sp 
.text:00000010           
la       
$gp, __gnu_local_gp 
.text:00000018           
sw       
$gp, 0x20+var_10($sp) 
; store input values into local  stack: 
.text:0000001C           
sw       
$a0, 0x20+arg_0($fp) 
.text:00000020           
sw       
$a1, 0x20+arg_4($fp) 
; reload them. 
.text:00000024           
lw       
$v1, 0x20+arg_0($fp) 
.text:00000028           
lw       
$v0, 0x20+arg_4($fp) 
; $v0=b 
; $v1=a 
.text:0000002C           
or       
$at, $zero ; NOP 
; this is pseudoinstruction. in fact, "slt $v0,$v0,$v1" is there. 
; so $v0 will be set to 1 if $v0b" and finish 
.text:00000038           
or       
$at, $zero ; branch delay slot, NOP 
.text:0000003C           
lui      
$v0, (unk_230 >> 16) # "a>b" 
.text:00000040           
addiu    
$a0, $v0, (unk_230 & 0xFFFF) # "a>b" 
.text:00000044           
lw       
$v0, (puts & 0xFFFF)($gp) 
.text:00000048           
or       
$at, $zero ; NOP 
.text:0000004C           
move     
$t9, $v0 
.text:00000050           
jalr     
$t9 
.text:00000054           
or       
$at, $zero ; branch delay slot, NOP 
.text:00000058           
lw       
$gp, 0x20+var_10($fp) 
.text:0000005C 
.text:0000005C loc_5C:            
# CODE XREF: f_signed+34 
.text:0000005C           
lw       
$v1, 0x20+arg_0($fp) 
.text:00000060           
lw       
$v0, 0x20+arg_4($fp) 
.text:00000064           
or       
$at, $zero ; NOP 
; check if a==b, jump to loc_90 if its not true': 
.text:00000068           
bne      
$v1, $v0, loc_90 
.text:0000006C           
or       
$at, $zero ; branch delay slot, NOP 
; condition is true, so print "a==b" and finish: 
.text:00000070           
lui      
$v0, (aAB >> 16) # "a==b" 
.text:00000074           
addiu    
$a0, $v0, (aAB & 0xFFFF)  # "a==b" 
.text:00000078           
lw       
$v0, (puts & 0xFFFF)($gp) 
.text:0000007C           
or       
$at, $zero ; NOP 
.text:00000080           
move     
$t9, $v0 
.text:00000084           
jalr     
$t9 
.text:00000088           
or       
$at, $zero ; branch delay slot, NOP 
.text:0000008C           
lw       
$gp, 0x20+var_10($fp) 
.text:00000090 
.text:00000090 loc_90:   
# CODE XREF: f_signed+68 
.text:00000090           
lw       
$v1, 0x20+arg_0($fp) 
.text:00000094           
lw       
$v0, 0x20+arg_4($fp) 
.text:00000098           
or       
$at, $zero ; NOP 
; check if $v1> 16)  # "a<b" 
.text:000000AC           
addiu    
$a0, $v0, (aAB_0 & 0xFFFF)  # "a<b" 
.text:000000B0           
lw       
$v0, (puts & 0xFFFF)($gp) 
.text:000000B4           
or       
$at, $zero ; NOP 
.text:000000B8           
move     
$t9, $v0 
.text:000000BC           
jalr     
$t9 
.text:000000C0           
or       
$at, $zero ; branch delay slot, NOP 
.text:000000C4           
lw       
$gp, 0x20+var_10($fp) 
.text:000000C8 
; all 3 conditions were false, so just finish: 
.text:000000C8 loc_C8:       
# CODE XREF: f_signed+A0 
.text:000000C8           
move     
$sp, $fp 
.text:000000CC           
lw       
$ra, 0x20+var_4($sp) 
.text:000000D0           
lw       
$fp, 0x20+var_8($sp) 
.text:000000D4           
addiu    
$sp, 0x20 
.text:000000D8           
jr       
$ra 
.text:000000DC           
or       
$at, $zero ; branch delay slot, NOP 
.text:000000DC  # End of function f_signed 
此处有两条指令是 IDA 的伪指令。“SLT REG0, REG1”的实际指令是“SLT REG0, REG0, REG1”，而
BEQZ 的实际指令是“BEQ REG, $ZERO, LABEL”。 
f_unsigned()函数的汇编指令，只是把 f_signed()函数中的 SLT 指令替换为 SLTU（U 是 unsigned 的缩写）。
除此之外，处理有符号数和无符号数的两个函数完全相同。 
指令清单 12.12  Non-optimizing GCC 4.4.5 (IDA) 
.text:000000E0 f_unsigned:     
# CODE XREF: main+28 
.text:000000E0 
.text:000000E0 var_10    
= -0x10 
.text:000000E0 var_8     
= -8 
.text:000000E0 var_4     
= -4 
.text:000000E0 arg_0     
=  0 
.text:000000E0 arg_4     
=  4 
.text:000000E0 
.text:000000E0           
addiu    
$sp, -0x20 
.text:000000E4           
sw       
$ra, 0x20+var_4($sp) 
.text:000000E8           
sw       
$fp, 0x20+var_8($sp) 
.text:000000EC           
move     
$fp, $sp 
.text:000000F0           
la       
$gp, __gnu_local_gp 
.text:000000F8           
sw       
$gp, 0x20+var_10($sp) 
.text:000000FC           
sw       
$a0, 0x20+arg_0($fp) 
.text:00000100           
sw       
$a1, 0x20+arg_4($fp) 
.text:00000104           
lw       
$v1, 0x20+arg_0($fp) 
.text:00000108           
lw       
$v0, 0x20+arg_4($fp) 
.text:0000010C           
or       
$at, $zero 
.text:00000110           
sltu     
$v0, $v1 
.text:00000114           
beqz     
$v0, loc_13C 
.text:00000118           
or       