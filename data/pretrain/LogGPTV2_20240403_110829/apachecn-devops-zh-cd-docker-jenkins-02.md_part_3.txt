让我们从一个类似于 Git 和 JDK 的例子开始。这一次，我们将准备`ubuntu_with_python`映像。
1.  创建一个名为`Dockerfile`的新目录和文件，内容如下:
```
 FROM ubuntu:16.04
 RUN apt-get update && \
 apt-get install -y python
```
2.  运行命令创建`ubuntu_with_python`映像:
```
 $ docker build -t ubuntu_with_python .
```
3.  检查映像是否已创建:
```
$ docker images
REPOSITORY              TAG     IMAGE ID       CREATED            SIZE
ubuntu_with_python      latest  d6e85f39f5b7  About a minute ago 202.6 MB
ubuntu_with_git_and_jdk latest  8464dc10abbb  3 minutes ago      610.9 MB
ubuntu_with_git         latest  f3d674114fe2  9 minutes ago      259.7 MB
ubuntu                  16.04   f49eec89601e  7 days ago         129.5 MB
mongo                   latest  0dffc7177b06   10 days ago        402 MB
hello-world             latest  48b5124b2768   2 weeks ago        1.84 kB
```
我们现在可以从映像中创建一个容器，并检查 Python 解释器是否以与我们在执行`docker commit`命令后完全相同的方式存在。请注意`ubuntu`映像只列出一次，尽管它是`ubuntu_with_git`和`ubuntu_with_python`的基础映像。
在本例中，我们使用了前两条 Dockerfile 指令:
*   `FROM`定义将在其上构建新映像的映像
*   `RUN`指定要在容器内运行的命令
所有 Docker 文件说明可在官方 Docker 页面[https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)找到。最广泛使用的说明如下:
*   `MAINTAINER`定义关于作者的元信息
*   `COPY`将文件或目录复制到映像的文件系统中
*   `ENTRYPOINT`定义哪个应用应该在可执行容器中运行
A complete guide of all Dockerfile instructions can be found on the official Docker page at [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
# 完整的 Docker 应用
我们已经有了所有必要的信息来构建一个完整的 Docker 映像。例如，我们将一步一步地准备一个简单的 Python hello world 程序。无论我们使用什么环境或编程语言，相同的步骤总是存在的。
# 写申请
创建一个新目录，并在该目录中创建一个包含以下内容的`hello.py`文件:
```
print "Hello World from Python!"
```
关闭文件。这是我们应用的源代码。
# 准备环境
我们的环境将在 Dockerfile 中表达。我们需要说明来定义:
*   应该使用什么基础映像
*   (可选)谁是维护者
*   如何安装 Python 解释器
*   如何在映像中包含`hello.py`
*   如何启动应用
在同一个目录中，创建 Dockerfile:
```
FROM ubuntu:16.04
MAINTAINER Rafal Leszko
RUN apt-get update && \
    apt-get install -y python
COPY hello.py .
ENTRYPOINT ["python", "hello.py"]
```
# 建立形象
现在，我们可以像以前一样构建映像:
```
$ docker build -t hello_world_python .
```
# 运行应用
我们通过运行容器来运行应用:
```
$ docker run hello_world_python
```
你应该从 Python 中看到友好的 Hello World！消息。这个例子中最有趣的是，我们能够运行用 Python 编写的应用，而无需在我们的主机系统中安装 Python 解释器。这是可能的，因为打包为映像的应用内部有所有需要的环境。
An image with the Python interpreter already exists in the Docker Hub service, so in the real-life scenario, it would be enough to use it.
# 环境变量
我们已经运行了第一个自制的 Docker 应用。但是，如果应用的执行应该取决于某些条件呢？
例如，在生产服务器的情况下，我们希望将`Hello`打印到日志，而不是控制台，或者我们可能希望在测试阶段和生产阶段有不同的依赖服务。一种解决办法是为每个案件准备一份单独的案卷；不过，还有一个更好的办法，环境变量。
我们把 hello world 应用改成打印`Hello World from` ` !`。为此，我们需要执行以下步骤:
1.  更改 Python 脚本以使用环境变量:
```
        import os
        print "Hello World from %s !" % os.environ['NAME']
```
2.  构建映像:
```
 $ docker build -t hello_world_python_name .
```
3.  运行容器传递环境变量:
```
 $ docker run -e NAME=Rafal hello_world_python_name
 Hello World from Rafal !
```
4.  或者，我们可以在 Dockerfile 中定义环境变量值，例如:
```
        ENV NAME Rafal
```
5.  然后，我们可以在不指定`-e`选项的情况下运行容器。
```
 $ docker build -t hello_world_python_name_default .
 $ docker run hello_world_python_name_default
 Hello World from Rafal !
```
当我们需要根据 Docker 容器的用途使用不同版本的 Docker 容器时，环境变量尤其有用，例如，为生产和测试服务器提供单独的概要文件。
If the environment variable is defined both in Dockerfile and as a flag, then the command flag takes precedence.
# Docker 容器状态
到目前为止，我们运行的每个应用都应该做一些工作并停止。例如，我们已经打印`Hello from Docker!`并退出。但是，有些应用应该连续运行，例如服务。要在后台运行一个容器，我们可以使用`-d` ( `--detach`)选项。我们用`ubuntu`图来试试吧:
```
$ docker run -d -t ubuntu:16.04
```
这个命令启动了 Ubuntu 容器，但是没有将控制台连接到它。我们可以看到它正在使用以下命令运行:
```
$ docker ps
CONTAINER ID IMAGE        COMMAND     STATUS PORTS NAMES
95f29bfbaadc ubuntu:16.04 "/bin/bash" Up 5 seconds kickass_stonebraker
```
该命令打印所有处于运行状态的容器。我们已经退出的旧容器呢？我们可以通过打印所有容器来找到它们:
```
$ docker ps -a
CONTAINER ID IMAGE        COMMAND        STATUS PORTS  NAMES
95f29bfbaadc ubuntu:16.04 "/bin/bash"    Up 33 seconds kickass_stonebraker
34080d914613 hello_world_python_name_default "python hello.py" Exited lonely_newton
7ba49e8ee677 hello_world_python_name "python hello.py" Exited mad_turing
dd5eb1ed81c3 hello_world_python "python hello.py" Exited thirsty_bardeen
6ee6401ed8b8 ubuntu_with_git "/bin/bash" Exited        grave_nobel
3b0d1ff457d4 ubuntu_with_git "/bin/bash" Exited        desperate_williams
dee2cb192c6c ubuntu:16.04 "/bin/bash"    Exited        small_dubinsky
0f05d9df0dc2 mongo        "/entrypoint.sh mongo" Exited trusting_easley
47ba1c0ba90e hello-world  "/hello"       Exited        tender_bell
```
请注意，所有旧容器都处于退出状态。还有两种状态我们还没有观察到:暂停和重启。
下图显示了所有状态及其之间的转换:
![](img/9b56cc40-6571-4e7b-98f0-7617455661b3.png)
暂停 Docker 容器非常罕见，从技术上讲，这是通过使用 SIGSTOP 信号冻结进程来实现的。当容器运行时，重启是一种临时状态，使用`--restart`选项定义重启策略(Docker 守护程序能够在出现故障时自动重启容器)。
该图还显示了用于将 Docker 容器状态从一种更改为另一种的 Docker 命令。
例如，我们可以停止运行 Ubuntu 容器:
```
$ docker stop 95f29bfbaadc
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
```
We always used the `docker run` command to create and start the container; however, it's possible to just create the container without starting it.
# Docker 网络
如今，大多数应用不是孤立运行的，而是需要通过网络与其他系统通信。如果我们想在 Docker 容器中运行网站、web 服务、数据库或缓存服务器，那么我们至少需要了解 Docker 网络的基础知识。
# 运行服务