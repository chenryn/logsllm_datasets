title:Protecting Privacy of BLE Device Users
author:Kassem Fawaz and
Kyu-Han Kim and
Kang G. Shin
Protecting Privacy of BLE Device Users
Kassem Fawaz, University of Michigan; Kyu-Han Kim, Hewlett Packard Labs;  
Kang G. Shin, University of Michigan
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/fawaz
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Protecting Privacy of BLE Device Users
Kassem Fawaz∗ Kyu-Han Kim† Kang G. Shin∗
†Hewlett Packard Labs
∗The University of Michigan
Abstract
Bluetooth Low Energy (BLE) has emerged as an attrac-
tive technology to enable Internet of Things (IoTs) to
interact with others in their vicinity. Our study of the
behavior of more than 200 types of BLE-equipped de-
vices has led to a surprising discovery: the BLE proto-
col, despite its privacy provisions, fails to address the
most basic threat of all—hiding the device’s presence
from curious adversaries. Revealing the device’s exis-
tence is the stepping stone toward more serious threats
that include user proﬁling/ﬁngerprinting, behavior track-
ing, inference of sensitive information, and exploitation
of known vulnerabilities on the device. With thousands
of manufacturers and developers around the world, it is
very challenging, if not impossible, to envision the vi-
ability of any privacy or security solution that requires
changes to the devices or the BLE protocol.
In this paper, we propose a new device-agnostic sys-
tem, called BLE-Guardian, that protects the privacy of
the users/environments equipped with BLE devices/IoTs.
It enables the users and administrators to control those
who discover, scan and connect to their devices. We have
implemented BLE-Guardian using Ubertooth One, an
off-the-shelf open Bluetooth development platform, fa-
cilitating its broad deployment. Our evaluation with real
devices shows that BLE-Guardian effectively protects
the users’ privacy while incurring little overhead on the
communicating BLE-devices.
1
Introduction
Bluetooth Low Energy (BLE) [4] has emerged as the
de facto communication protocol in the new computing
paradigm of the Internet of Things (IoTs) [8, 9, 15, 23,
24, 39].
In 2013, over 1.2 billion BLE products were
shipped [9], with this number expected to hit 2.7 bil-
lion in 2020 [3]. BLE-equipped products are embedded
and used in every aspect of our lives; they sense nearby
objects, track our ﬁtness, control smart appliances and
toys provide physical security, etc. The BLE protocol
owes this proliferation to its low energy and small pro-
cessing footprint as well as its support by most end-user
devices [20], such as PCs, gateways, smartphones, and
tablets.
A BLE-equipped device advertises its presence to let
interested nearby devices initiate connections and glean
relevant information. These advertisements, however,
are a double-edged sword. An unauthorized, potentially
malicious, party can use these advertisements to learn
more about the BLE-equipped devices of a certain user
or in a speciﬁc environment [22], generally referred to in
literature as the inventory attack [42]. Revealing the de-
vice’s presence is the stepping stone toward more serious
privacy and security attacks with grave consequences in
the case of medical devices for example, especially for
high-value targets [31].
The BLE speciﬁcation contains some privacy pro-
visions to minimize the effects of inventory attacks
and ensuing threats, namely address randomization and
whitelisting. A BLE device is supposed to randomize
its address to prevent others from tracking it over time.
Moreover, only devices with a pre-existing trust rela-
tionship (whitelisted devices) are supposed to access the
BLE-equipped device.
In this paper, we ﬁrst analyze how existing BLE’s
privacy measures fare in the real-world deployments
through our own data-collection campaign. To the best
of our knowledge, this is the ﬁrst study that systemat-
ically analyzes threats to the BLE-equipped devices in
the wild. We recruited participants from our institution
and the PhoneLab testbed [27] to collect the BLE adver-
tisements in their vicinity. We have collected and an-
alyzed the advertisements from 214 different types of
BLE-equipped devices. Analyzing our dataset has led to
a surprising discovery: BLE advertisements, due to poor
design and/or implementation, leak an alarming amount
of information that allows the tracking, proﬁling, and
USENIX Association  
25th USENIX Security Symposium  1205
1
ﬁngerprinting of the users. Furthermore, some devices
allow external connections without an existing trust re-
lationship. Unauthorized entities can access unsecured
data on the BLE-equipped devices that might leak sensi-
tive information and potentially inﬂict physical harm to
the bearer.
Almost all of the existing approaches addressing some
of the above threats rely on mechanisms that necessar-
ily include changes to the protocol itself or to the way
the BLE-equipped devices function [21, 40]. Changing
the operation of such devices, post-production, requires
their patching by securely pushing a ﬁrmware update.
With thousands of manufacturers and developers around
the world, it is very challenging, sometimes impossi-
ble, to guarantee ﬁrmware patches to the millions of al-
ready deployed devices [11]. Even a security-aware user
might lack the ability to update the ﬁrmware of a BLE-
equipped device. Patch management is, therefore, the
leading security challenge in the emerging IoTs [10, 19]
(including BLE-equipped devices) for many reasons:
• Manufacturers might lack the ability to apply OTA
updates [1] for some deployed BLE-equipped de-
vices because they (such as a BLE-equipped preg-
nancy test) are neither programmable nor equipped
with an Internet connection.
• Customers might neither receive news about the up-
date nor be able to apply an update even if available.
For example, a month after the 2013 “Foscam” we-
bcams hacking incident, 40,000 of 46,000 vulnera-
ble cameras were not updated although a ﬁrmware
update was available [17].
• Companies do not have enough ﬁnancial incentives
or resources to maintain the devices post deploy-
ment [34]. For example, Samsung discontinued two
lines of smart refrigerators after 2012 so that cus-
tomers can’t receive updates for their purchased re-
frigerators [6].
There is, therefore, a need for a new class of practical ap-
proaches to mitigate the privacy threats to BLE-equipped
devices. In this paper, we seek to answer the following
related question: can we effectively fend off the threats
to BLE-equipped devices: (1) in a device-agnostic man-
ner, (2) using COTS (Commercial-Off-The-Shelf) hard-
ware only, and (3) with as little user intervention as pos-
sible?
We present BLE-Guardian as an answer to the
above question.
It is a practical system that protects
the user’s BLE-equipped devices so that only user-
authorized entities can discover, scan, or connect to
them. BLE-Guardian relies on an external and off-the-
shelf Bluetooth radio as well as an accompanying appli-
cation. Therefore, a user can easily install (and control)
BLE-Guardian to any BLE gateway, be it a smartphone,
tablet, PC, Raspberry PI, Artik-10, etc. The external ra-
dio achieves the physical protection, while the applica-
tion, running on the gateway, enables the user to interact
with BLE-Guardian.
BLE-Guardian provides privacy and security protec-
tion by targeting the root of the threats, namely the ad-
vertisements. In particular, BLE-Guardian opportunis-
tically invokes reactive jamming to determine the enti-
ties that can observe the device existence through the
advertisements (device hiding module), and those that
can issue connection requests in response to advertise-
ments (access control module). In a typical BLE envi-
ronment, however, achieving BLE-Guardian’s objective
is rather challenging. Many BLE-equipped devices, in-
cluding the ones to be protected, advertise on the same
channel; while at the same time other devices, in re-
sponse to advertisements, issue scan and connection re-
quests. The timing is of an essence for BLE-Guardian;
it invokes jamming at the right time for the right dura-
tion. Therefore, BLE-Guardian does not inadvertently
harm other devices, preserves the ability of authorized
entities to connect the BLE-equipped device, and always
hides the BLE-equipped device when needed.
More than one device might be authorized to con-
nect to the BLE-equipped device. BLE-Guardian dif-
ferentiates the scan and connection requests originating
from authorized devices versus those that are fraudulent.
This is particularly challenging as the BLE advertise-
ment channel lacks any authentication mechanism for the
advertisements and connections. BLE-Guardian utilizes
Bluetooth classic as an out-of-band (OOB) channel to
authorize a device after obtaining the user’s permission.
It uses the OOB channel to instruct the connecting de-
vice to issue ordinary connection requests with (varying)
special parameters that other unauthorized devices can’t
predict. It also alerts the user when unauthorized parties
attempt connection to the user’s BLE devices.
BLE-Guardian achieves its objectives with mini-
mum requirements from the external radio. Effectively,
BLE-Guardian operates with a radio that offers only the
basic capabilities of reception and transmission on the
BLE channels. As a result, BLE-Guardian avoids em-
ploying sophisticated and customized (thus impractical)
radios and signal processing approaches.
We implement BLE-Guardian using the commer-
cially available Ubertooth One1 USB dongle so that
BLE-Guardian can be easily installed on any BLE gate-
way. We also implement accompanying apps for differ-
ent BLE gateways, such as Android and Raspberry PI.
We evaluate BLE-Guardian using several BLE devices
for different real-world scenarios, where we assess its
effectiveness in combating privacy threats, its low over-
1https://greatscottgadgets.com/ubertoothone/
1206  25th USENIX Security Symposium 
USENIX Association
2
head on the channel and devices, and little disruption to
the operation of legitimate BLE devices. In particular,
BLE-Guardian is able to protect up to 10 class-2 target
BLE-equipped devices within a 5m range with less than
16% energy overhead on the gateway.
The rest paper is organized as follows. Section 2 dis-
cusses the related work. Section 3 provides the nec-
essary BLE background. Section 4 states the privacy
threats arising from BLE advertisements through our
data-collection campaign. Section 5 details the design
of BLE-Guardian. Section 6 presents the implemen-
tation of BLE-Guardian and evaluates its effectiveness.
Finally, the paper concludes with Section 7.
2 Related Work
There have been limited efforts related to BLE devices
that target the security and privacy threats resulting from
the devices revealing their presence. The only excep-
tion is the work by Wang [40], where a privacy enhance-
ment is proposed for BLE advertisements to ensure con-
ﬁdentiality and prevent replay attacks as well as tracking.
This enhancement is based on providing an additional 3-
way handshake between the peripheral and the gateway.
Unarguably, this enhancement changes both the protocol
and the peripheral which is highly impractical as we ar-
gued before.
Another related ﬁeld of research includes wearable
and body-area networks. The work by Leonard [21] uses
a honeypot to lure in adversaries that attempt to attack
the user’s wearable devices. The honeypot uses a set of
helper nodes to expose fake services with known weak-
nesses so that the attacker connects to them. This work,
however, doesn’t handle the privacy threat arising from
BLE advertisements. A determined attacker will be able
to distinguish fake trafﬁc from legitimate one based on
RF signatures from the devices and issue connections to
the user’s real devices.
Other relevant work includes approaches to protecting
medical devices. Mare et al. [25] propose a mechanism
that protects health sensors when communicating with a
gateway. The proposed system, albeit relevant, doesn’t
apply for the BLE ecosystem. It also mandates chang-
ing the medical devices. Gollakota et al. [12] propose an
external device, called Shield, that the user wears to con-
trol access to his/her embedded medical device. Shield
implements friendly jamming so that only an authorized
programmer can communicate with the medical device.
BLE-Guardian takes an entirely different approach
by targeting the control plane of the BLE protocol in-
stead of the data plane. BLE-Guardian does not need
to continually protect an ongoing authorized connection
and more importantly need not invoke jamming signal
cancellation that requires accurate estimation of chan-
nel condition in a dynamic mobile indoor environment
as well as a full duplex radio. BLE-Guardian consti-
tutes a reference design that can function with any radio
that has reception and transmission capabilities on the
2.4 GHz band. BLE-Guardian, also, considers far less
restrictive scenarios than Shield. It does not have to be
within centimeters of the device-to-be-protected as the
case with Shield. Moreover, BLE-Guardian’s practical
design allows scaling up protection for multiple devices
(multiple connectors and protected devices) simultane-
ously, which is not the case for Shield that considers a
two-device scenario only [36].
Finally, researchers have explored ways to reduce in-
formation leaks from sensors in a smart home environ-
ment [30, 37]. Srinivasan et al. [37], Park et al. [30], and
Schurgot et al. [35] propose a set of privacy enhance-
ments that include perturbing the timing of broadcasted
sensory data along with padding the real sensory data
with fake data to confuse the adversary. These protocols
fail to address the threats resulting from BLE advertise-
ments and have the shortcoming of requiring changes to
the sensors as well.
3 BLE Primer
The BLE (Bluetooth 4.0 and newer) protocol has been
developed by the Bluetooth SIG to support low power
devices such as sensors, ﬁtness trackers, health monitors,
etc. Currently, more than 75,000 devices in the market
support this protocol along with most of more capable
devices such as smartphones, tablet, PCs, and recently
access points [2].
3.1 BLE States
A BLE device assumes either a central or peripheral role.
A peripheral device is typically the one with lower capa-
bilities and with the information to advertise. The central
device, typically an AP, PC, or smartphone, scans for ad-
vertisements and initiates connections.
The BLE speciﬁcation places a higher burden on the
central device.
It is responsible for initiating the con-
nection and thus has to keep scanning until it receives
an advertisement. Conversely, the peripheral (prior to its
connection) sleeps for most of the time and only wakes
up to advertise, which helps save its limited energy.
3.2 Advertisements
BLE advertisements are instrumental to the operation of
the protocol, and constitute the only means by which a
device can be discovered. The speciﬁcation deﬁnes 4 ad-
vertisement message types as shown in Table 1, and 3
USENIX Association  
25th USENIX Security Symposium  1207
3
Table 1: The four types of BLE advertisements.
Type
Advertising Interval
ADV IND
ADV DIRECT IND
ADV NONCONN IND
ADV SCAN IND
3.75ms
20ms − 10.24s
100ms − 10.24s
100ms − 10.24s
Advertising interval
Random delay
ch.1
ch. 2
ch. 3
tw
tw
tw
Advertising session
Figure 1: The advertisement pattern in BLE.
advertisement channels: 37 (2402MHz), 38 (2426MHz),
and 39 (2480MHz).
ADV DIRECT IND (introduced in Bluetooth 4.2) is
a special advertisement; it enables fast reconnection be-
tween the central and the peripheral devices. The periph-
eral, when turned on, will broadcast advertisements at a
fast rate (once every 3.75ms, for 1.28 seconds) that are
directed to the client (with a pre-existing trust relation-
ship) before assuming the central role. The advertise-
ment message only contains the message type, source,
and destination addresses.
The other three advertisements are similar to each
other in that they are periodic. The advertisement in-
terval determines the frequency with which each device
advertises. This interval has to be chosen, at conﬁgu-
ration time, between 20ms and 10.24 seconds (at incre-
ments of 0.625ms) for the ADV IND advertisement and
between 300ms and 10.24 seconds for the other two ad-
vertisements. To prevent advertisements of different de-
vices from colliding with each other, each device waits
for a random amount of time between 0 and 10ms (in ad-
dition to the advertisement interval) before it advertises
(Fig. 1).
The advertisement session constitutes the period when
the device is actually advertising. During each adver-
tisement session, the device advertises on the three ad-
vertisement channels given a pre-conﬁgured channel se-
quence. Before switching to the next channel, the device
has to wait for a preset period of time (less than 10ms)
for scan and connection requests (tw in Fig. 1). We will
henceforth refer to the advertisement interval, the chan-
nel sequence, and the waiting time as the advertisement
pattern.
Each advertisement message contains the message
type, source address, along with some of the services
offered by the device and their respective values. The
speciﬁcation deﬁnes a set of services that have unique
UUIDs, such as device name. The message is limited in
length, and hence, to get more information about the de-
vice, an interested device can either issue a scan request
to which the advertising device responds with a scan re-
sponse or connect to the advertising device.
3.3 Connections
Not all BLE devices accept connections; devices that use
ADV NONCONN IND advertisement messages run in
transmit mode only and they don’t accept any scan or
connection requests such as iBeacons.
Also, devices advertising with ADV SCAN IND mes-
sages don’t accept connections but accept scan requests.