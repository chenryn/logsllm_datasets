# FlowWatcher: Defending against Data Disclosure Vulnerabilities in Web Applications

**Authors:**
- Divya Muthukumaran, Imperial College London
- Dan O'Keeffe, Imperial College London
- Christian Priebe, Imperial College London
- David M. Eyers, University of Otago
- Brian Shand, NCRS, Public Health England
- Peter R. Pietzuch, Imperial College London

## Abstract
Bugs in the authorization logic of web applications can expose one user's data to another. These data disclosure vulnerabilities are common and can be caused by a single omitted access control check. While the implementation of authorization logic is complex and error-prone, most web applications use simple access control models, where each piece of data is accessible by a specific user or group. This makes it possible to validate the correct operation of the authorization logic externally based on observed HTTP traffic.

We introduce FlowWatcher, an HTTP proxy that mitigates data disclosure vulnerabilities in unmodified web applications. FlowWatcher monitors HTTP traffic and maintains a shadow of the application’s access control state based on a rule-based specification of the user-data-access (UDA) policy. The UDA policy defines the intended data ownership and how it changes based on observed HTTP requests. FlowWatcher detects violations of the UDA policy by tracking unique data items across different users' HTTP requests and responses. We evaluate a prototype implementation of FlowWatcher as a plug-in for the Nginx reverse proxy and show that, with short UDA policies, it can mitigate CVE bugs in six popular web applications.

**Categories and Subject Descriptors:**
D.4.6 [Security and Protection]: Access Controls

**Keywords:**
Web application security, Data disclosure, HTTP Proxy, Policy

## 1. Introduction
Web application vulnerabilities are a major source of security incidents on the Internet. Different types of vulnerabilities require different mitigation strategies. For example, data injection and validation bugs can be prevented using templates or dynamic data tracking. However, data disclosure vulnerabilities, which expose one user's data to another, are more challenging to protect against because they often result from semantic bugs in the authorization logic.

In the 2013 OWASP ranking of web application security risks, four out of the top ten risks are related to incorrectly implemented access control checks. The 2014 Website Security Statistics Report states that information leakage, including data disclosure, is the second most prevalent vulnerability in web applications.

Web applications typically run at a higher privilege level than individual users, requiring them to implement their own access control checks. A single missing check can expose user data. While core components receive scrutiny, third-party plugins and extensions often contain such vulnerabilities. For instance, 16% of security bugs reported in CVE for Drupal between August 2013 and July 2014 were related to unauthorized data disclosure in plugins.

Existing proposals to mitigate data leakage have limitations:
- Program analysis techniques can detect missing checks but require source code access, are language-specific, and struggle with complex applications.
- Input validation techniques focus on injection attacks and cannot detect data disclosure due to semantic bugs in authorization logic.
- Anomaly detection approaches can prevent unauthorized data disclosure if it deviates from regular behavior, but many applications do not have reliably defined "normal" behavior.

Our approach, FlowWatcher, validates the correct operation of the access control policy externally by monitoring HTTP traffic. Many web applications, such as Drupal, WordPress, and DokuWiki, implement relatively simple access control models, distinguishing between users or groups with access rights to data objects like web pages, posts, or comments. FlowWatcher can thus observe HTTP request and response traffic, detect, and prevent unauthorized data disclosure based on a specified UDA policy.

A proxy-based approach offers several benefits:
- It can be applied to various web applications, as long as the enforced policy can be tailored.
- The proxy does not need to implement the full policy but can check a subset.
- Due to its smaller code base and single enforcement point, the correct enforcement of the policy is easier to guarantee.
- It has no performance impact and does not require modifications to the application, making it applicable to closed-source web applications and services.

However, this approach raises two challenges:
1. How does the proxy express and keep up-to-date the access control policy as new users, groups, and data objects are added?
2. How does the proxy efficiently track user data across HTTP requests and responses to detect policy violations?

We describe FlowWatcher, a proxy that mitigates data disclosure vulnerabilities by monitoring HTTP traffic and prohibiting incorrect data flows. The UDA policy, written once by application developers, encodes the dynamic access control model, describing how HTTP requests and responses change the access control state. UDA policies are concise and do not need to be complete but can capture a subset of the application’s access control model.

FlowWatcher also includes rules for updating the access control state based on HTTP requests and responses, and it tracks unique data items to detect unauthorized data disclosure. Our evaluation shows that UDA policies for real-world web applications are simple, effective, and efficient, with minimal impact on application throughput or latency.

The rest of the paper is organized as follows: §2 discusses data disclosure vulnerabilities and existing mitigation techniques, §3 describes our domain-specific policy language, §4 presents the design and implementation of FlowWatcher, §5 provides experimental evaluation results, §6 compares FlowWatcher to related work, and §7 concludes the paper.

## 2. Preventing Data Disclosure

### 2.1 Data Disclosure in Web Applications
Implementing an access control model correctly in a web application is challenging. Due to the semantic mismatch between the underlying platform's access control model (e.g., UNIX access control lists) and the application's model, web applications must execute with a superset of all user privileges. This requires them to guard operations that access or update user data with access control checks to ensure compliance with a given security policy. Access control checks are typically scattered throughout the source code.

For example, in Drupal, database queries are guarded by tagging them with "node_access," which triggers an access control check. Omitting this tag in a complex query can reveal private pages of other users.

Data disclosure vulnerabilities can be caused by several types of bugs:
- **Missing Check:** An attacker may access another user's data if no check is performed for a particular data object. For example, the Organic Groups add-on module in Drupal had a vulnerability (CVE-2012-2081) where a missing access check allowed non-members to view information about private groups.
- **Avoided Check:** An attacker may access data without authorization by triggering a code path that avoids an existing check, such as inducing an error condition. For example, phpBB (CVE-2010-1627) exposed information in private forums to non-members via RSS feeds.
- **Incorrect Check:** An access control check may be implemented incorrectly, such as an execution-after-redirect vulnerability where a check is performed but the privileged operation is executed regardless, returning sensitive information in the HTTP response (CVE-2013-0159).

### 2.2 Existing Mitigation Approaches
- **Missing Access Check Detection:** Techniques like static and dynamic analysis can detect missing checks but require source code access and are language-specific.
- **Input Validation Testing:** Techniques focus on injection attacks and cannot detect data disclosure due to semantic bugs.
- **Anomaly Detection:** Can prevent unauthorized data disclosure if it deviates from regular behavior, but many applications do not have reliably defined "normal" behavior.
- **Dynamic Data Tracking:** Tracks data flow to detect unauthorized access but can be complex and resource-intensive.

### 2.3 FlowWatcher Approach
FlowWatcher addresses the challenges of expressing and maintaining the access control policy and efficiently tracking user data. It uses a domain-specific rule-based language for specifying the UDA policy, which is concise and can be written by application developers. The UDA policy describes how HTTP requests and responses change the access control state, and FlowWatcher updates this state based on observed traffic. It also tracks unique data items to detect unauthorized data disclosure.

## 3. Domain-Specific Policy Language
FlowWatcher uses a domain-specific language to specify the UDA policy. This language allows developers to define rules that link HTTP requests and responses to the creation of new users, groups, or data objects and to updates of the access control policy. Each rule can match an HTTP request based on its URL, header fields, or body content, and then update the current access control state.

### 3.1 Example Policies
- **Drupal UDA Policy:** 43 lines
- **WordPress UDA Policy:** 23 lines
- **DokuWiki UDA Policy:** 26 lines

These policies are concise and effective in mitigating data disclosure vulnerabilities.

## 4. Design and Implementation
FlowWatcher is designed as an HTTP proxy that intercepts and monitors HTTP traffic. It maintains a shadow of the application’s access control state and enforces the UDA policy. The proxy is implemented as a plugin for the Nginx reverse proxy.

### 4.1 Key Components
- **UDA Policy Specification:** Written in a domain-specific language.
- **Access Control State Management:** Maintains a shadow of the application’s access control state.
- **Data Tracking:** Tracks unique data items to detect unauthorized data disclosure.

### 4.2 Implementation Details
- **Authentication Interception:** FlowWatcher intercepts the authentication method to associate each HTTP request and response with a user.
- **Data Selection and Tracking:** Selects and tracks data items that are likely to be unique, such as social security numbers or postal addresses.
- **Policy Enforcement:** Decides if data access is authorized based on the shadow access control state.

## 5. Experimental Evaluation
We evaluated FlowWatcher using a prototype implementation as an Nginx plugin. The evaluation shows that:
- **UDA Policies:** Are simple and effective, with policies for Drupal, WordPress, and DokuWiki having 43, 23, and 26 lines, respectively.
- **Vulnerability Mitigation:** FlowWatcher can mitigate 9 data disclosure vulnerabilities from the CVE database reported for 6 popular web applications.
- **Performance Impact:** The implementation has no measurable impact on application throughput or latency.

## 6. Related Work
FlowWatcher is compared to existing techniques for mitigating data disclosure vulnerabilities. It offers a more flexible and efficient solution by externalizing the access control policy and using a concise, domain-specific language for policy specification.

## 7. Conclusions
FlowWatcher is an effective and efficient solution for mitigating data disclosure vulnerabilities in web applications. By monitoring HTTP traffic and enforcing a UDA policy, it can detect and prevent unauthorized data access without modifying the application. The approach is applicable to a wide range of web applications and has minimal performance impact.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.