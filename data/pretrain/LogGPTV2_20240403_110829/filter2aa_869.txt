# Evolving Exploits through Genetic Algorithms

**By Soen**

## About the Author
- **CTF Player**
- **Programmer**
- **Virus/Worm Aficionado**
- **Computer Scientist**
- **Penetration Tester (Day Job)**

## Exploiting Web Applications
### Challenges
- **Problem Areas**: Identifying and attacking vulnerabilities.
- **Driven by Customer Needs**: Tailored to specific client requirements.
- **Limited Scope and Time**: Projects often have a narrow focus and tight deadlines.
- **Report-Driven**: Results are documented in detailed reports.
- **Methodology**: Combining automated scanning with manual inspection.

### Current Methodology
1. **Automated Scanning**: Utilizing tools like Nessus, nmap, Blind Elephant, Acunetix, Burp, ZAP, and sqlmap.
2. **Manual Inspection**: Poking at suspicious areas to find vulnerabilities.
3. **Exploit Development**: Writing custom exploits for identified vulnerabilities.

### Limitations of Current Methods
- **Manual Code Coverage**: Limited due to time constraints.
- **Time-Consuming**: Manual inspection and exploit development are resource-intensive.
- **Signature-Based Tools**: Existing tools rely on known signatures, limiting their effectiveness against new or unique vulnerabilities.

## Existing Tools for Exploit Discovery/Development
- **Nessus, nmap, Blind Elephant, etc.**: Rely on predefined signatures.
- **Acunetix, Burp, ZAP, sqlmap**: More advanced but still limited by signature-based detection.

## Foundational Problems with Current Scanning Techniques
- **Systemic Signature Problem**: Similar to antivirus software, these tools are only as good as their latest signature updates.
- **Web Application Firewall (WAF) Bypass**: WAFs can block common attack patterns, making it harder to find and exploit vulnerabilities.

## Solution: Evolve Unique Exploits for Web Applications
- **Example**: Evolving SQL injection payloads to bypass WAFs.

## Covered in This Talk
- **Genetic Algorithms for Exploit Development**
  - **SQL Injection**: MySQL, SQL, MSSQL, Oracle
  - **Command Injection**: Bash, CMD, PHP, Python
- **Attack Surface**: HTTP/HTTPS POST and GET parameters
- **Exclusions**: Topics not covered in this talk.

## Genetic Exploit Development
- **Forced Evolution**: A tool for evolving exploits.
- **GitHub Repository**: [github.com/soen-vanned/forced-evolution](https://github.com/soen-vanned/forced-evolution)

## Evolutionary Algorithms
1. **Initialization**: Generate a large number of initial exploit strings.
2. **Evolution Loop**:
   1. **Score Performance**: Evaluate each string using a fitness function.
   2. **Cull Weak Strings**: Remove poorly performing strings.
   3. **Breed Strong Strings**: Combine successful strings to create new ones.
   4. **Mutate Strings**: Randomly alter some strings to introduce variability.
3. **Termination**: Display the exploit string that achieves the goal.

## Forced Evolution
1. **Initialization**: Create a large number of pseudo-random strings.
2. **Evolution Loop**:
   1. **Send Strings**: Use the strings as parameter values (e.g., POST, GET).
   2. **Evaluate Response**: Score the strings based on server responses.
   3. **Cull Weak Strings**: Remove low-performing strings.
   4. **Breed Strong Strings**: Combine high-performing strings.
   5. **Mutate Strong Strings**: Introduce random mutations.
3. **Termination**: Display the string that successfully exploits the application.

## Fitness Function
- **Criteria**:
  - **Sensitive Information Disclosure**: Does the string reveal sensitive data?
  - **Error Induction**: Does the string cause an error? If so, what type?
  - **Reflection**: Is the string reflected (e.g., for XSS)?
  - **Other Indicators**: Additional information displayed.

## Breeding Strings
- **Genome Crossover**: Combine pairs of strings to create offspring.
  - **Parent Strings**:
    - String A
    - String B
  - **Child Strings**:
    - Child A
    - Child B
  - **Mutated Children**:
    - Mutated Child A
    - Mutated Child B
- **Implementation Variability**: The number of children and parents, and whether parents are kept alive, varies by implementation.

## Mutating Strings
- **Mutation Rate**: Variable, depending on the implementation.
- **Mutation Operations**:
  - **Mutate**: Alter existing characters.
  - **Add**: Insert new characters.
  - **Remove**: Delete characters.
- **Example**:
  - **Pre-mutation String**: ABCD
  - **Post-mutation String**: XACF

## Population Dynamics
- **Mutation Rate vs. Search Speed**: Higher mutation rates can speed up the search but may also reduce stability.
- **String Cull Rate vs. Repopulation Speed**: Balancing the rate at which strings are removed and replaced is crucial for efficiency.

## Tool Comparison
### Command Injection
- **Statistics**:
  - **Vulnerability Found?**
  - **Exploit Developed?**
  - **Auto WAF Bypass?**
  - **Time for Attack (seconds)**
  - **Requests Sent**
- **Comparison Graphs**:
  - **Requests Sent to Server**
  - **Time to Exploit (seconds)**

### SQL Injection
- **Statistics**:
  - **Vulnerability Found?**
  - **Exploit Developed?**
  - **Auto WAF Bypass?**
  - **Time for Attack (seconds)**
  - **Requests Sent**
- **Comparison Graphs**:
  - **Requests Sent to Server**
  - **Time to Exploit (seconds)**

## Demo
- **Live Demonstration of Forced Evolution in Action**

## Pros and Cons
### Cons
- **Noisy Attacks**: Can be detected easily.
- **Potential for Damage**: Risk of inadvertently destroying the database or OS.
- **Slow Process**: Developing and testing exploits can be time-consuming.
- **Sub-optimal for Source Code Analysis**: Not as effective as analyzing source code directly.

### Pros
- **Cost-Effective**: Low CPU/RAM/HD and human time usage.
- **Better Code Coverage**: More thorough than other black-box approaches.
- **Future-Proof**: Continuous upgrades will improve efficiency.
- **Automatic Exploit Development**: Customized exploits for specific web applications.
- **Emergent Discoveries**: New exploit methodologies and techniques will emerge.

## Conclusion
- **Download Forced Evolution**: [github.com/soen-vanned/forced-evolution](https://github.com/soen-vanned/forced-evolution)
- **Contact Information**:
  - **Email**: PI:EMAIL
  - **Twitter**: @soen_vanned
  - **Blog**: [0xSOEN.blogspot.com](http://0xSOEN.blogspot.com)

## References
- **Fred Cohen**: "Computer Viruses – Theory and Experiments" (1984)
- **Dr. Mark Ludwig**: "The Little & Giant Black Book of Computer Viruses", "Computer Viruses, Artificial Life and Evolution"
- **Herm1t’s VX Heaven**: [vxheaven.org](http://vxheaven.org/)
- **Stuart Russell & Peter Norvig**: "Artificial Intelligence: A Modern Approach" (3rd Edition)