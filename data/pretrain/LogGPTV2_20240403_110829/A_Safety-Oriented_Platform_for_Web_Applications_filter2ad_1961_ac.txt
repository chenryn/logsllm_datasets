### Process and Network Policy Enforcement

The proxy, derived from TinyProxy [16], enforces the network policy for each browser instance. It checks each requested URL against the network policy defined in the manifest. If the URL is not within the allowed Web service, the proxy returns an error.

For unencrypted connections, the proxy can filter based on the full URL. However, SSL connections encrypt the URL, limiting the proxy to filtering based only on the host and port number. Similarly, other protocols, such as streaming video, can be restricted based only on network- and transport-level attributes, as the proxy does not understand their specific protocols. This limitation means that the trustworthiness of the proxy is dependent on the DNS system, even for SSL-protected connections.

### Virtual Disk Configuration

Each Xen VM running a browser instance includes several virtual disks managed by the BOS kernel. The read-only root disk contains the base file system, including the guest OS image. A writable data disk provides storage for any data the browser instance needs to persist locally. When an application is launched for the first time, its data disk is initialized to a blank file system.

Separating the writable data disk from the read-only root disk simplifies upgrade processes. The BOS can replace the root disk while preserving the data disk, ensuring that user data survives upgrades. Additionally, making the root disk read-only allows for safe sharing across multiple browser instances.

Persistent changes made by the application are stored on the virtual data disk within the guest OS, not on the host OS. This isolation protects the user's OS from potentially dangerous changes, such as those made by spyware or other malicious software. Users can also remove all durable changes made by an application by simply deleting its browser instance.

### Manifests

A Web service defines a Web application by creating a manifest, which is then made accessible to the BOS kernel. The manifest is an XML document that includes:
1. **Network Policy**: Specifies the remote network services with which the browser instance can interact.
2. **Browser Policy**: Specifies the code to be initially installed within the browser instance’s sandbox.
3. **Digital Signature**: Authenticates the Web service.
4. **Human-Readable Name**: Provides a name for the Web application.
5. **Machine-Readable Name**: A unique identifier for the manifest.
6. **Globally Unique Identifier**: A unique identifier for the application.

Figure 5 shows a sample manifest for the American Airlines Web service, which permits access to the main website and the sites of advertising partners, and specifies that the browser instance should run a stock Firefox browser.

#### Manifest Location and Authentication

Every Web object has an associated manifest. Web servers can provide an "X-Tahoma-manifest" HTTP header extension, specifying the unique name and URL for the manifest. Users can launch a Web application for the first time by either invoking Tahoma’s management tools with the URL or typing the URL into a different browser instance. In both cases, the BOS performs an HTTP HEAD operation to retrieve the manifest.

If the manifest is not provided in the HTTP header, the BOS attempts to download "/manifest.xml" from the Web server. As a final fallback, the BOS consults a local database of manually supplied manifest files. If none of these mechanisms succeed, the BOS generates a generic manifest that implements the basic Web security model, allowing access to URLs within the top-level domain and forking new browser instances for out-of-domain URLs.

Tahoma uses public-key certificates to authenticate Web applications. Each Web application has a master public/private key pair. The private key signs the manifests, which are verified using the XML-SIG standard [5]. While this certification scheme does not solve all trust issues, it relies on traditional PKI certification authorities to ensure authenticity.

Manifest signatures allow for evolving application manifests. A signature verifies that two manifests come from the same source, enabling updates or additions to the manifest.

#### Manifest Policies

The manifest's network policy lists the Web sites with which the browser instance may communicate, including host names, regular expressions, and optional qualifiers like port, protocol, or URL. The Web service is defined as the union of all items in the network policy. Multiple manifests can define a single Web application, and network policies can be concatenated without unexpected effects.

Web services can express any policy, and there are no restrictions on overlapping content. However, a Web application can prevent its browser instances from interacting with other Web applications.

In addition to the network policy, the manifest specifies the code to be run in the browser instance. For stock browsers, the BOS stores VM checkpoints and clones them if they match the manifest. For custom browser instances, the Web service must supply a URL and hash of the custom VM image.

### Window Manager

Tahoma’s user interface is implemented by a window manager process running in Domain0, designed for performance and safety. The window manager offloads work to the GPU and ensures that browser instances cannot perform denial-of-service attacks by managing graphics state.

The window manager provides a virtual screen abstraction to each browser instance, where it can create and position one or more rectangular sprites. Each sprite consists of a grid of tiles, each backed by a 4KB machine page containing 32x32 pixels with 32 bits of color and alpha information.

The window manager superimposes the sprites of each browser instance onto the physical screen, supporting various policies. To simplify porting browsers, we modified the Qt multi-platform GUI library to interact with the window manager through its tiles and sprites abstractions, preserving the Qt API.

### Browsers

The execution environment of a browser instance is based on a Xen virtual machine, allowing most applications to run with minimal modifications. Necessary modifications include linking to libQT for the Tahoma graphics subsystem, using browser-calls for network access, and using browser-calls for new functions like forking a new browser instance.

We have implemented two Tahoma browsers: a port of the Konqueror Web browser and a port of the MPlayer media player. Konqueror supports Java applets, JavaScript, SSL, DOM, and cascading style sheets, while MPlayer supports popular video and audio codecs, optimized for performance.

### Summary

The Tahoma browser operating system is implemented as a layer on top of the Xen virtual machine monitor. Major components, including the BOS kernel, the network proxy, and the window manager, are programmed as user-mode Domain0 processes. Browser instances, encapsulated in Xen virtual machines, communicate with the BOS kernel through high-level browser-calls carried by virtual network links. In the following section, we evaluate the safety benefits and performance overhead of our Tahoma architecture and implementation.

### Evaluation

Our Tahoma prototype consists of approximately 10K lines of Perl and C code. We evaluate two aspects: safety and effectiveness in containing threats, and performance. Our performance results represent an upper bound on the overhead intrinsic to our approach.

#### Safety and Effectiveness

Tahoma's value is measured by its ability to prevent or contain real-world threats. Isolation provides significant safety benefits, but Tahoma is not immune to all threats. For example, vulnerabilities in external systems like DNS can subvert Tahoma’s network filtering policies. Another example is a malicious browser instance using a sharing interface to attack another browser instance or Web application.

To quantitatively evaluate Tahoma's effectiveness, we analyzed 109 security vulnerabilities discovered in the Mozilla open-source browser. These vulnerabilities were classified into five categories, with corresponding Tahoma features intended to defend against them:

- **Sandbox Weakness**: Browsers use language and runtime mechanisms to sandbox scripts, applets, and other active Web content, but these sandboxes are often flawed. Tahoma contains 100% (55 of 55) of these vulnerabilities.
- **Vulnerable Sharing Interface**: Attackers can craft HTML upload forms to access any file on the user’s machine. Tahoma significantly reduces, but does not eliminate, such sharing channels.