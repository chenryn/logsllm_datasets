previous approaches to hide information [4,7]. One key diﬀerence from previous
work is that errors arising from semantic substitution are more plausible in
translations compared to semantic substitutions in an ordinary text.
A typical problem with traditional semantic substitution is the need for sub-
stitution lists. A substitution list is a list of tuples consisting of words that are
semantically close enough that subtituting one word for another in an arbitrary
sentence is possible. For traditional semantic substitution, these lists are gen-
erated by hand. An example of a pair of words in a semantic substitution list
would be comfortable and convenient. Not only is constructing substitution
lists by hand tedious, but the lists must also be conservative in what they con-
tain. For example, general substitution lists cannot contain word pairs such as
bright and light since light could have been used in a diﬀerent sense (meaning
effortless, unexacting or even used as a noun).
Semantic substitution on translations does not have this problem. Using the
original sentence, it is possible to automatically generate semantic substitutions
that can even contain some of the cases mentioned above (which could not be
added to a general monolingual substitution list). The basic idea is to trans-
late back and forth between two languages to ﬁnd semantically similar words.
Assuming that the translation is accurate, the word in the source language can
help provide the necessary contextual information to limit the substitutions to
words that are semantically close in the current context.
d1
e1
w1
 e2
w2
e3
Fig. 2. Example for a translation graph produced by the semantic substitution
discovery algorithm. Here two witnesses (w1 and w2) and the original word d1
conﬁrm the semantic proximity of e1 and e2. There is no witness for e3, making
e3 an unlikely candidate for semantic substitution.
Suppose the source language is German (d) and the target language of the
translation is English (e). The original sentence contains a German word d1
and the translation contains a word e1 which is a translation of d1. The basic
algorithm is the following:
Translation-Based Steganography
13
– Find all other translations of d1, call this set Ed1. Ed1 is the set of candidates
for semantic substitution. Naturally e1 ∈ Ed1.
– Find all translations of e1, call this set De1. This set is called the set of
witnesses.
– For each word e ∈ Ed1 − {e1} ﬁnd all translations De and count the number
of elements in De ∩ De1. If that number is above a given threshold t, add e
to the list of possible semantic substitutes for e1.
A witness is a word in the source language that also translates to both words
in the target language, thereby conﬁrming the semantic proximity of the two
words. The witness threshold t can be used to trade-oﬀ more possible substitu-
tions against a higher potential for inappropriate substitutions.
The threshold does not have to be ﬁxed. A heuristic can be used to increase
the threshold if the number of possible substitutions for a word or in a sentence is
extraordinarily high. Since the number of bits that can be encoded only increases
with log2 n for n possible substitutions we suggest to increase t whenever n is
larger than 8.
Examples: Given the German word “fein” and the English translation “nice”,
the association algorithm run on the LEO (http://dict.leo.org/) dictionary gives
the following semantic substitutions: for three witnesses, only “pretty” is gener-
ated; for two witnesses, “ﬁne” is added; for just one witness, the list grows by
“acute”, “capillary”, “digniﬁed” and “keen”. Without witnesses (direct transla-
tions), the dictionary adds “smooth” and “subtle”. The word-pair “leicht” and
”light” gives “slight” (for three witnesses). However, “licht” and “light” gives
“bright” and “clear”. In both cases the given substitutions match the semantics
of the speciﬁc German word.
5.3
Adding plausible mistakes
Another possible post-pass adds mistakes that are commonly made by MT sys-
tems to the translations. The transformations that our implementation can use
are based on the study of MT mistakes from section 4. The current system sup-
ports changing articles and prepositions using hand-crafted, language speciﬁc
substitutions that attempt to mimic the likely errors observed.
5.4
Results from the Prototype
Diﬀerent conﬁgurations of the system produce translations of varying quality,
but even quality degradation is not predictable. Sometimes the generated mod-
iﬁcations actually (by coincidence) improve the quality of the translation. For
example, a good translation of the original French sentence “Dans toute la r´e-
gion, la vie est paralys´ee.” into English would be “In the entire region, life is
paralysed.” Google’s translation is “In all the area, the life is paralysed.” wheras
LinguaTec returns“In all of the region the life is crippled.”. Applying article sub-
stitution here can actually improve the translation: one of the choices generated
14
C. Grothoﬀ, K. Grothoﬀ, L. Alkhutova, R. Stutsman, M. Atallah
by our implementation is “In all of the region, life is crippled.” Even aggressive
settings are still somewhat meaningful: “In all an area, a life is paralysed.”
The following German text is the ﬁrst part of a paragraph from a review
about a Moroccan ﬁlm called “Windhorse” [27]:
Der marokkanische Film ”Windhorse”erz¨ahlt die Geschichte zweier, unterschiedlichen
Generationen angeh¨orender M¨anner, die durch Marokko reisen. Auf dem Weg suchen
sie nach dem Einzigen, was ihnen wichtig ist: dem Sinn des Lebens.
Our prototype system gives the following translation:
The Moroccan ﬁlm ”Windhorse” tells story from men belonging by two, diﬀerent
generations who travel through Morocco. They are looking for the only one which is
important to them on the way: the sense of a life.
For comparison, the source engine translations are also given:
Google: The Moroccan ﬁlm ”Windhorse” tells the history of two, diﬀerent genera-
tions of belonging men, who travel by Morocco. On the way they look for the none one,
which is important to them: the sense of the life.
LinguaTec: The Moroccan ﬁlm ”Windhorse” tells the story of men belonging to two,
diﬀerent generations who travel through Morocco. They are looking for the only one
which is important to them on the way: the meaning of the life.
The Babelﬁsh translation is identical to the Google translation except that
“the none one” is replaced by “the only one”. LinguaTec provides some diﬀerent
syntactic structures and lexical choices, but looks quite similar.
Clearly the addition of more engines would lead to more variety in the LiT
version. Sometimes substitutions lead to quality degradation (“belonging by”
vs. “belonging to”), and sometimes not (“sense of the life” vs. “sense of a life”).
Sometimes the encoding makes the engine choose the better version of a section
of text to modify: “They are looking for the only one” vs. “they look for the none
one”.
The original quality of the translations is not perfect. Furthermore, our ver-
sion contains many of the same“diﬀerences”when compared to the source engines
as the source engines have amongst themselves. Many of those diﬀerences are
introduced by us (“story from men” vs. “story of men”) as opposed to coming
directly from the source engines. While none of the texts are particularly read-
able, our goal is to plausibly imitate machine-translated text, not to solve the
problem of perfect translation.
The example has most of prototype’s transformations enabled in order to
achieve a higher bitrate. In general, this results in more degradation of the trans-
lation; decreasing the number of transformations might improve the quality, but
would also decrease the bitrate by oﬀering fewer variations. More transforma-
tions and source engines may make the resulting text potentially more likely to
be ﬂagged as suspicious by an adversary. For this example, we achieve a bitrate
of 0.0164 uncompressed and 0.0224 compressed (9.33 bits per sentence); diﬀerent
hidden texts would, due to the encoding scheme used, achieve diﬀerent bitrates.
In general, we have found that the prototype gives us average bitrates of between
0.00265 and 0.00641 (uncompressed), and 0.00731 and 0.01671 (compressed), de-
pending upon settings.
Translation-Based Steganography
15
Bitrates and system conﬁguration Figure 3 lists the diﬀerent conﬁgurations
and bitrates that are achieved by our prototype. The data is only intended to give
a rough idea of the bitrates that can be achieved. An improved implementation
using more rules or more translation engines can likely achieve higher bitrates.
Also, it is impossible for us to give a precise metric for the quality of the generated
translations. Still, the Figure can be used to give an impression for the bitrates
that can be achieved with translation-based steganography. In order to allow for
a fair comparison with other steganographic systems that use binary data, such
as images, the bitrate is given for both uncompressed and compressed text.
error- Quality-
bitrate
Id Languages Engines SS-W passes
Limit
ASCII-text compressed
1
DE-EN
1,2
∞
-
0.50
0.00226
0.00621
2
DE-EN
1,2
4
-
0.05
0.00266
0.00731
3
DE-EN
1,2
2
-
0.05
0.00178
0.00492
4
DE-EN
1,2
1
-
0.05
0.00281
0.00776
5
DE-EN
1,2
0
-
0.05
0.00488
0.01306
6
DE-EN
1,2
∞
(1)
0.05
0.00593
0.01585
7
DE-EN
1,2
∞
(2)
0.05
0.00247
0.00687
8
DE-EN
1,2
2
(2)
0.05
0.00283
0.00779
9
DE-EN
1,2
1
(1)(2)
0.00
0.00632
0.01671
10
DE-EN
1,2
0
(1)(2)
0.00
0.00721
0.01907
11
FR-EN
1,2
∞
-
0.50
0.00246
0.00670
12
FR-EN
1,2
4
-
0.05
0.00496
0.01344
13
FR-EN
1,2
2
-
0.05
0.00535
0.01429
14
FR-EN
1,2