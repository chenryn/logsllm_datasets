        r21 = buffer[r18-1];
        buffer[r18-1] = buffer[0];
        buffer[0] = r21;
        blue(buffer, r18-1);
        blue(buffer+r18, buflen-r18);
    }
}
```
If I were not mistaken (and I were not), this function should behave exactly like function that our trace executed.
This is some variant of quicksort (I'm not theory-savy enough to know exact variant name, but that couldn't be less relevant in solving this challenge).
So the problem arised - what now? We knew *what* was executed, we knew *how* it executed, how can we get possibly recover flag from that?
The path we went were probably not the easiest, but it worked. So, first we choose important "checkpoints" inside function:
```cpp
void blue(char *buffer, int buflen) 
{
    // STARTFX
    if (buflen > 1) {
        // STARTMAIN
        int r18 = 1;
        int r20 = buffer[0];
        int r21;
        for (int r1c = 1; r1c = r20) {
                // SKIP
                continue;
            }
            // SWAP_18_1C
            r21 = buffer[r18];
            buffer[r18] = buffer[r1c];
            buffer[r1c] = r21;
            r18 += 1;
            // ENDFOR
        }
        // AFTERFOR
        r21 = buffer[r18-1];
        buffer[r18-1] = buffer[0];
        buffer[0] = r21;
        blue(buffer, r18-1);
        blue(buffer+r18, buflen-r18);
        // ENDMAIN
    }
    // ENDFX
}
```
Than we processed trace.log once again, but looking only at "checkpoints"
```python
data = open('log').read().split('\n')
for line in data:
    if '[INFO]00400858' in line:
        print 'STARTFX'
    if '[INFO]00400888' in line:
        print 'STARTMAIN'
    if '[INFO]004008ac' in line:
        print 'STARTFOR'
    if '[INFO]004008cc' in line:
        print 'SWAP_18_1C'
    if '[INFO]00400920' in line:
        print 'FOR_INC'
    if '[INFO]0040092c' in line:
        print 'FOR_CHECK'
    if '[INFO]00400940' in line:
        print 'AFTERFOR'
    if '[INFO]004009bc' in line:
        print 'ENDMAIN'
```
And finally, we hacked (ugly!) script to "follow" log, and do exactly as it told us:
```python
log = [x.strip() for x in open('calllog').read().split('\n')]
known = []  # known "facts" about characters in flag
def process(log, il, state):
    if log[il] != 'STARTFX':
        raise 'error'
    il += 1
    if len(state) > 1:
        if log[il] != 'STARTMAIN':
            raise 'error'
        il += 1
        r18 = 1
        for r1c in range(1, len(state)+1):
            if log[il] != 'FOR_CHECK':
                raise 'error'
            il += 1
            if r1c == len(state):
                break
            if log[il] == 'AFTERFOR':
                break
            if log[il] != 'STARTFOR':
                raise 'error'
            il += 1
            if log[il] == 'SWAP_18_1C':
                # we are in 'swap' branch, so buffer[r1c] = state[0]
                known.append([state[0], '= gtr:
                        mx = chr(ord(gtr)-1)
                if gtr == i:    # 'z' = gtr:
                        mx = gtr
                if gtr == i:    # 'z' <= 1
                    if mn <= less:
                        mn = less
        res[i] = [mn, mx]
        if mn == mx:
            for xxx in known:
                if xxx[0] == i:
                    xxx[0] = mn
                if xxx[2] == i:
                    xxx[2] = mn
        else:
            pass
            #possible.append([mn, mx])
for i in range(vars):
    print res[i]
```
And result of running that hellish script is (each line represents minimal and maximal possible value for character):
    ['t', 't']
    ['r', 'r']
    ['1', '1']
    ['3', '3']
    ['5', '5']
    ['m', 'm']
    ['1', '1']
    ['k', 'k']
    ['5', '5']
    ['l', 'l']
    ['9', 'A']
    ['6', '6']
    ['5', '5']
    ['5', '5']
    ['1', '1']
    ['r', 's']
    ['9', '9']
    ['l', 'l']
    ['5', '5']
    ['r', 'r']
That left us with only 4 possibilities (2 characters had 2 possible values each, rest was uniquely determined):
We just bruteforced that 4 possible flags, and finally got our well-deserved 4 points.