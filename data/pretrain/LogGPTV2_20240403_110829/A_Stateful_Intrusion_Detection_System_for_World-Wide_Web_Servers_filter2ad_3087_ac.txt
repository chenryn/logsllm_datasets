ine events and model attacks from several distinct points of
view. All a scenario writer needs to do in order to leverage
the capabilities provided by these modules is to import the
requisite STATL language extensions, as shown in Figure 6.
By exploiting WebSTAT’s ability to operate on differ-
ent event streams, it was possible to improve the effective-
ness of buffer overﬂow detection. More precisely, an im-
proved buffer overﬂow attack scenario was developed. The
scenario examines both web server access logs and the ac-
tual client requests as they traverse the network. This is ac-
complished by using a network-based event provider. The
provider reads the TCP/IP streams between clients and a
7
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
use apache;
use tcpip;
scenario multi_domain_scenario
{
[...]
}
Figure 6. Multi-domain scenario example.
web server from the network. The network packets are ana-
lyzed, looking for evidence of binary data. If binary data
is found at the network-level, the scenario watches for a
matching entry in the server logs. If none is found within
a speciﬁed timeout period, then the scenario assumes that
the attack has been successful and the web server process
is now executing the code sent by the attacker. The state-
transition diagram for this scenario is shown in Figure 7.
Figure 7. State-transition diagram for multi-
domain detection of buffer overﬂows.
This scenario effectively detects the recent Apache
chunked-encoding exploit, which typically does not leave
an entry in the server logs.
4.7 Document Root Escape Attack
Cross-domain analysis is not limited to web server logs
and network trafﬁc, as in the previous scenario. For exam-
ple, the root escape scenario examines events from the web
server log and correlates them with operating system-level
audit records to detect ﬁle system access violations. More
precisely, the scenario detects if a client gained illicit ac-
cess to a ﬁle outside a web server’s document root. Figure 8
shows the state-transition diagram for the scenario.
8
Figure 8. State-transition diagram for the doc-
ument root escape scenario.
5 Performance Evaluation
An evaluation of the WebSTAT system was conducted to
quantify the performance overhead WebSTAT would incur
in a production web server. The experimental testbed used
during this evaluation consisted of a single system acting as
a web server loaded by multiple client systems. The web
server was a Pentium IV 1.8 GHz machine with 1 GB of
RDRAM running Apache 2.0.40 on a stock RedHat 8.0 in-
stallation. A network of Pentium IV 1.8 GHz machines with
1 GB of RDRAM each running the WebStone 2.5 bench-
mark on stock RedHat 8.0 installations acted as clients. All
systems used Intel EtherExpress 10/100 Ethernet cards run-
ning in 100BaseT full-duplex mode, and were connected
with a Cisco Catalyst 3500 XL switch.
The evaluation measured average throughput and re-
sponse times under a typical real-world workload for both a
host running standalone Apache and a host running Apache
monitored by WebSTAT. WebStone was conﬁgured to per-
form ﬁve iterations of runs of 10 minutes each, varying the
number of clients from 100 to 500 in increments of 50. The
benchmark was conﬁgured to target an augmented mirror
of the UC Santa Barbara Computer Science web server1,
which contained a mixture of static and dynamic pages. The
client trafﬁc included requests for static and dynamic pages
as well as various attacks. Client requests were weighted to
approximate typical observed access patterns. Apache was
left in its default conﬁguration with the exception of modiﬁ-
cations to the server pool to increase the maximum number
of possible concurrent client requests. Finally, WebSTAT
was conﬁgured for online detection with all attack scenar-
ios enabled.
Figure 9 displays the minimum, average, and maximum
throughput for standalone Apache and Apache monitored
by WebSTAT. From the graph, one can see that both sys-
tems under test performed near the theoretical limits of the
testbed network hardware. In this case, Apache is clearly
I/O-bound. WebSTAT, however, is primarily CPU-bound;
1http://www.cs.ucsb.edu/
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
 92.4
 92.2
 92
 91.8
 91.6
 91.4
 91.2
)
s
/
b
M
(
t
u
p
h
g
u
o
r
h
T
 91
 100
 150
 200
 250
 300
Clients
 350
 400
 450
 500
Figure 9. Minimum, average, and maximum
throughput.
most of its time is spent performing regular expression
matching against client requests, as detailed in Section 4.2.
This CPU overhead explains the slight impact on average
throughput shown in Figure 9. However, the performance
degradation is limited to less than 0.5% in the average case.
Apache
Apache + WebSTAT
 0.6
 0.55
 0.5
 0.45
 0.4
 0.35
 0.3
 0.25
 0.2
 0.15
i
)
s
(
e
m
T
e
s
n
o
p
s
e
R
 0.1
 100
 150
 200
 250
 300
Clients
 350
 400
 450
 500
Figure 10. Minimum, average, and maximum
response times.
Figure 10 displays the minimum, average, and maxi-
mum response times for standalone Apache and Apache
monitored by WebSTAT. Readily apparent is the fact that
Apache’s response times increase linearly with the number
of concurrent client requests. Equally apparent is the fact
that WebSTAT has virtually no impact upon Apache’s re-
sponse times.
In this evaluation, the collected data demonstrates that
WebSTAT incurs a small performance overhead in average
web server throughput. Nevertheless, the drop in perfor-
mance may well be acceptable given the advanced detection
capabilities WebSTAT provides. Careful site-speciﬁc tun-
ing, which was not applied in this evaluation, would also al-
low web server administrators to further reduce WebSTAT’s
impact on web server performance.
9
Apache
Apache + WebSTAT
6 Conclusions and Future Work
This paper presented an approach for stateful intrusion
detection, called WebSTAT. The approach is implemented
by extending the STAT framework to create a sensor that
performs detection of web-based attacks. WebSTAT is
novel in that it provides a sophisticated language for de-
scribing multi-step attacks in terms of states and transitions,
and these descriptions are automatically compiled into dy-
namically linked libraries, which has a number of advan-
tages in terms of ﬂexibility and extensibility. WebSTAT also
operates on multiple event streams and is able to correlate
both network-level and operating system-level events with
entries contained in server logs. This supports more effec-
tive detection of web-based attacks and generates a reduced
number of false positives.
The WebSTAT system has been evaluated in terms of
its ability to detect attacks and the performance impact of
the detection process on deployed web servers. The results
achieved show that stateful intrusion detection can be per-
formed on high performance servers in real-time.
Future plans are to further extend the system to perform
more integrated analysis of web server logs and events col-
lected from other domains such as network trafﬁc streams or
operating system-level event logs, as demonstrated in Sec-
tion 4.6. More detailed performance experiments will also
be run.
The current
implementation of WebSTAT can be
retrieved from http://www.cs.ucsb.edu/˜rsg/
STAT/software.
Acknowledgements
This research was supported by the Army Research Of-
ﬁce, under agreement DAAD19-01-1-0484. The U.S. Gov-
ernment is authorized to reproduce and distribute reprints
for Governmental purposes notwithstanding any copyright
annotation thereon.
The views and conclusions contained herein are those
of the author and should not be interpreted as necessarily
representing the ofﬁcial policies or endorsements, either ex-
pressed or implied, of the Army Research Ofﬁce, or the U.S.
Government.
References
[1] M. Almgren, H. Debar, and M. Dacier. A lightweight
tool for detecting web server attacks. In Proceedings
of the ISOC Symposium on Network and Distributed
Systems Security, San Diego, CA, February 2000.
[2] M. Almgren and U. Lindqvist. Application-Integrated
In Pro-
Data Collection for Security Monitoring.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
ceedings of Recent Advances in Intrusion Detec-
tion (RAID), LNCS, pages 22–36, Davis,CA, October
2001. Springer.
[3] CERT/CC.
“Code Red Worm” Exploiting Buffer
Overﬂow In IIS Indexing Service DLL. Advisory CA-
2001-19, July 2001.
[4] CERT/CC. Apache/mod ssl Worm. Advisory CA-
2002-27, October 2002.
[5] D. Curry and H. Debar.
Intrusion Detection
Extensible Markup
Message Exchange Format:
(XML) Document Type Deﬁnition.
Language
draft-ietf-idwg-idmef-xml-07.txt, June
2002.
[6] S.T. Eckmann, G. Vigna, and R.A. Kemmerer.
STATL: An Attack Language for State-based Intrusion
Detection. Journal of Computer Security, 10(1/2):71–
104, 2002.
[7] R. Fielding. wwwstat: HTTPd Logﬁle Analysis
http://ftp.ics.uci.edu/pub/
Software.
websoft/wwwstat/, November 1996.
[8] Paul Helman and Gunar Liepins. Statistical Foun-
dations of Audit Trail Analysis for the Detection of
Computer Misuse. In IEEE Transactions on Software
Engineering, volume Vol 19, No. 9, pages 886–901,
1993.
[9] K. Ilgun, R.A. Kemmerer, and P.A. Porras. State
Transition Analysis: A Rule-Based Intrusion Detec-
tion System.
IEEE Transactions on Software Engi-
neering, 21(3):181–199, March 1995.
[10] H. S. Javitz and A. Valdes. The NIDES Statistical
Component Description and Justiﬁcation. Technical
report, SRI International, Menlo Park, CA, March
1994.
[11] D. Klein. Defending Against the Wily Surfer: Web-
In Proceedings of the
based Attacks and Defenses.
USENIX Workshop on Intrusion Detection and Net-
work Monitoring, Santa Clara, CA, April 1999.
[12] C. Ko, M. Ruschitzka, and K. Levitt. Execution Mon-
itoring of Security-Critical Programs in Distributed
Systems: A Speciﬁcation-based Approach.
In Pro-
ceedings of the 1997 IEEE Symposium on Security and
Privacy, pages 175–187, May 1997.
[13] M. Koster. A Method for Web Robots Control. Inter-
net Draft, draft-koster-robots-00.txt, December 1996.
[14] U. Lindqvist and P.A. Porras. Detecting Computer
and Network Misuse with the Production-Based Ex-
pert System Toolset (P-BEST). In IEEE Symposium
on Security and Privacy, pages 146–161, Oakland,
California, May 1999.
[15] T.H. Ptacek and T.N. Newsham.
Insertion, Evasion
and Denial of Service: Eluding Network Intrusion De-
tection. Technical report, Secure Networks, January
1998.
[16] M. Roesch. Snort - Lightweight Intrusion Detection
In Proceedings of the USENIX LISA
for Networks.
’99 Conference, November 1999.
[17] Sun Microsystems, Inc. Installing, Administering, and
Using the Basic Security Module. 2550 Garcia Ave.,
Mountain View, CA 94043, December 1991.
[18] Tcpdump and Libpcap Documentation. http://
www.tcpdump.org/, June 2002.
[19] Security Tracker. Vulnerability statistics april 2001-
march 2002. http://www.securitytracker.
com/learn/statistics.html, April 2002.
[20] A. Valdes and K. Skinner. An Approach to Sensor
Correlation. In Proceedings of RAID 2000, Tolouse,
France, October 2000.
[21] G. Vigna, S. Eckmann, and R. Kemmerer. The STAT
Tool Suite. In Proceedings of DISCEX 2000, Hilton
Head, South Carolina, January 2000. IEEE Computer
Society Press.
[22] G. Vigna, R.A. Kemmerer, and P. Blix. Designing a
Web of Highly-Conﬁgurable Intrusion Detection Sen-
sors. In W. Lee, L. M`e, and A. Wespi, editors, Pro-
ceedings of the 4th International Symposiun on Re-
cent Advances in Intrusion Detection (RAID 2001),
volume 2212 of LNCS, pages 69–84, Davis, CA, Oc-
tober 2001. Springer-Verlag.
[23] G. Vigna, F. Valeur, and R.A. Kemmerer. Design-
ing and Implementing a Family of Intrusion Detection
Systems. In Proceedings of the 9th European Software
Engineering Conference, Helsinki, Finland, Septem-
ber 2003.
[24] D. Wagner and D. Dean. Intrusion Detection via Static
Analysis. In Proceedings of the IEEE Symposium on
Security and Privacy, Oakland, CA, May 2001. IEEE
Press.
[25] C. Warrender, S. Forrest, and B.A. Pearlmutter. De-
tecting intrusions using system calls: Alternative data
models. In IEEE Symposium on Security and Privacy,
pages 133–145, 1999.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:46:17 UTC from IEEE Xplore.  Restrictions apply. 
10