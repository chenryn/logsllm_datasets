55
46
58
66
52
63
62
53
47
67
48
49
38
40
23
24
12
39
44
22
34
36
56
65
37
50
41
2
20
32
4
33
27
11
3
16
8
13
7
86
99
77
80
85
89
28
6
18
19
0
31
5
10
1
15
26
29
17
21
30
14
25
9
94
96
84
88
82
92
72
76
98
97
74
69
95
93
81
73
75
90
68
87
71
78
83
91
86
99
79
70
77
85
80
89
57
43
61
51
46
54
64
42
60
45
35
59
55
62
53
47
48
58
66
67
49
12
24
4
27
3
32
52
63
34
36
38
39
40
44
41
2
20
22
23
56
50
65
37
33
16
8
11
26
29
17
28
19
0
18
6
31
5
10
1
21
30
15
13
7
25
9
14
(a) Random initial state
(b) After 2 rounds, the general shape emerges.
(c) After 6 rounds, the system has converged.
Figure 6: A system of 100 nodes converges in 6 rounds towards three connected rings (colored in blue, red, and black).
Figure 7: The PLEIADES conﬁguration used in Figure 6.
• Port Connection Protocol: at least 90% of the ports found
their related port in the remote shape.
In Figure 10, a conﬁguration with 20 rings linked together
sequentially is deployed for different number of nodes. All
protocols converge in a few rounds, even for large number
of nodes. Most importantly, they converge as fast or faster
than the Shape Building protocol. Hence, the target complex
topology is achieved sensibly at the same time as the local
basic shapes.
It is interesting to note that the Remote Shape protocol
(RSP) converges in constant time as the number of nodes
augments. This is due to the fact that the ratio nodes/shapes
is constant, so independently the total number of nodes in the
system, it is as likely to ﬁnd a node in a given shape. The
abnormally high point for the Shape Building protocol (SSP)
at 200 nodes is due to the fact that there are exactly 10 nodes
per shape; so the convergence criterion used means that a node
must have found all other nodes in the shape. But in practice,
ﬁnding 6 or 7 of them is enough and does not hinder the
convergence of the other protocols, as depicted on the graph.
For larger numbers of nodes per shape, the convergence time
is roughly constant, for the same reason as for RSP.
The other two protocols scale logarithmically with the
number of nodes, similar to the Shape Building protocol.
In Figure 11, various conﬁgurations are deployed on a
system of 25,600 nodes. Convergence time increases slowly
with the number of shapes involved in the system, and even
a complex system with 20 shapes converges in less than 15
rounds.
3) Communication overhead: Compared to an ad-hoc ap-
proach optimized for a given problem, PLEIADES incurs some
549
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
e
c
n
e
g
r
e
v
n
o
C
1
0.8
0.6
0.4
0.2
0
0
Shape Building
Same Shape (SSP)
Remote Shape (RSP)
Port Selection
Port Connection
5
10
15
20
25
Rounds
Figure 8: Progress of the different protocols of PLEIADES
over time (in rounds) for a ring of rings with 25,600 nodes
and 10 rings. Except for Port Connection, all protocols
experience a rapid phase change.
overhead. This is the price to pay for a simpler and more
systematic way to design topologies. In the following, we
make the (very generous) assumption that an ad-hoc approach
would not cost anything more than the resources needed to
create the basic shapes, and we use the costs from the Shape
Building protocol as our baseline.
For these measures, we considered that: (i) a node ID would
use 16 bytes (IPV6 address); (ii) a node "position" would use
8 bytes (64-bit double); (iii) a shape ID would use 8 bytes
(64-bit integer).
First, Figure 12 shows that
the bandwidth consumption
pattern over time is similar for the baseline and the overhead.
Both rapidly reach a state where their bandwidth consumption
per round and per node is stable. The actual values are also
pretty low. For 25,600 nodes and 20 shapes, the bandwidth
consumption per round is around 1,800 bytes, all combined.
The overhead is, of course, dependent on the complexity
of the target topology. The more shapes and ports there are,
the more messages are used to ﬁnd and connect them. But
even with large numbers of shapes, the overhead remains
of a magnitude similar to the baseline. Figure 13 shows the
ratio between baseline and overhead for different numbers of
shapes on a system of 25,600 nodes in its stable state. This is
measured once the system has converged because it is when
nodes have discovered all their neighbors that the messages
exchanged are heavier and the bandwidth consumption is the
highest. It increases linearly with the number of shapes. As
depicted in Figure 13 for 50 shapes, the bandwidth ratio is
around 2, which in absolute value represents 1900 bytes, so it
represents a very negligible amount.
D. Resilience
In the previous section, we showed that PLEIADES per-
forms well under normal circumstances. In this section, we
now consider how it reacts when heavily stressed. We used
two scenarii: ﬁrstly, a dramatic crash where about half the
nodes shut down (paragraph IV-D1); secondly, an on-the-ﬂy
reconﬁguration of the target topology, changing the number of
basic shapes in the system (paragraph IV-D2).
550
1) Dramatic crash: PLEIADES is extremely resilient, even
in presence of catastrophic failures. To analyze this, a conﬁg-
uration with 4 shapes is deployed over different numbers of
nodes, and stressed with various dramatic events, as illustrated
in Figure 15.
At ﬁrst, we let the system converge as in the previous ex-
periments. Then, we make each node crash with a probability
p = 0.5, resulting in half the nodes crashing simultaneously
on average and a totally broken topology (15a), and we let
the system converge towards the new resulting target topology
(15b). Finally, we simultaneously inject as many nodes as
crashed earlier (15c) and we let the system converge back to
the original target topology (15d). We consider two modes of
reparation, either restoring crashed nodes to their last known
state with a back-up, or providing new blank nodes initialized
with random neighbors.
At each step, we measure the convergence time in rounds.
For this experiment, we consider the system as a whole
is converged when all the criteria in subsection IV-C2 are
satisﬁed. Figure 14 plots the results: as shown previously, the
initial convergence is quite fast and grows logarithmically with
the number of nodes in the system: around 10 rounds even for
very large systems of 20,000+ nodes.
More importantly, both the self-repair after crash and the
return to the original target are faster than the initial conver-
gence, even with such a dramatic rate of failure as we chose:
they converge 2 to 5 rounds faster. Indeed, the nodes that are
still online don’t start with the same blank state as for the
initial convergence, and this additional information more than
compensates the stress caused by the crashes or re-injection,
which enables the system to converge extremely fast.
2) Dynamic Reconﬁguration: We argued that PLEIADES
would help composing complex systems-of-systems and pro-
mote re-using previous works. But that means PLEIADES will
need to be deployed to real systems that do not start in a
random state.
We tried to dynamically reconﬁgure a system that was
already deployed and converged to a stable state. For that, we
need to deﬁne a reconﬁguration policy that maps the relation
between previous and current shape assignment. We shifted
from a system with 3 shapes to 4 shapes, so we randomly
assigned 1/3 of the nodes in each shape to the new shape.
Many other policies may be envisioned, but due to space
constraints we will only consider this one. At a given round
(Figure 9b), the new conﬁguration is sent to all the nodes,
and some of them are allocated to the new shape. Only 2
rounds later (Figure 9c), the nodes in the new shape already
found each others, and the previous shapes restored their stable
state almost perfectly, despite losing some neighbors. A new
stable state is rapidly reached (Figure 9d). All measurements
presented in Section IV-C1 revealed that performances are at
least as good for a dynamic reconﬁguration from a converged
state than for a system deployed from a random initial state.
As with the crash scenario,
this is due to some nodes—
those not affected by the reconﬁguration—starting with more
information than with a random start.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
94
96
84
88
82
92
72
76
98
97
74
69
95
93
81
73
75
90
68
87
71
78
83
91
86
99
79
70
77
85
80
89
57
43
61
51
46
54
64
42
60
45
35
59
55
62
53
47
48
58
66
67
49
12
24
4
27
3
32
52
63
34
36
38
39
40
44
41
2
20
22
23
56
50
65
37
33
16
8
11
26
29
17
28
19
0
18
6
31
5
10
1
21
30
15
13
7
25
9
14
59
55
62
53
47
35
45
60
48
67
42
64
54
57
43
61
51
49
38
39
40
44
41
50
30
15
14
9
25
7
21
1
13
8
46
58
66
52
63
34
36
37
65
56
10
5
31
6
18
19
28
0
17
29
4
27
26
11
32
3
16
33
20
2
22
23
12
24
84
96
94
98
76
88
82
97
92
95
93
81
69
74
73
86
72
75
78
71
90
68
87
99
83
80
89
79
91
85
77
70
69
97
98