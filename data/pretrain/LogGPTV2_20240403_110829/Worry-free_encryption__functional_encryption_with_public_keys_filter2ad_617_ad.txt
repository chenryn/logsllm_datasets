both r0
i,b or
1]i,b ◦ r1
[f(cid:48)
i,b is encrypted based on the challenge index. The
above adversary could then mount a distinguishing attack on
E because the adversary’s view would be independent of rz
z]i,b◦rz
i,b◦
and therefore the adversary could only query H([f(cid:48)
rz) with negligible probability. Therefore, one could guess
the challenge index from this hash query and by embedding
an instance of the IND-CPA security game of E, break the
scheme’s IND-CPA security.
i,b are generated and either [f(cid:48)
0]i,b ◦ r0
i,b and r1
z]i,b ◦ rz
z]i,b ◦ rz
i,b
Remark: We have just shown R is Function Hiding.
Notice it also satisﬁes Hidden Credentials information the-
oretically. It remains only to show it is Malicious Author-
ity Secure under adaptive chosen-ciphertext attacks. In the
same way that Function Hiding was proven, we can also
show that the scheme is Malicious Authority secure against
chosen-plaintext attacks, it remains only to argue that the
scheme is Malicious Authority secure against CCA2 attacks.
Proof of CCA Malicious Authority Security. For
simplicity from now on, we will always assume the users cre-
dentials x are set to 0n. Since the user’s credentials are not
assumed private in this game, this does not eﬀect the proof
and allows the notation to be simpliﬁed. We begin by assum-
ing E is an IND-CPA secure public key encryption scheme
with unpredictable ciphertexts. As outlined above, malicious
authority security under CPA queries can be shown simi-
larly to the proof of function hiding. We now show that all
ciphertext decryption queries in the CCA2 game can be sim-
ulated without ever having access to a decryption oracle (if
the simulator controls H), which allows us to use the IND-
CPA security of the scheme to achieve full CCA2 security.
By the property of unpredictable ciphertexts, the prob-
ability that an adversary makes a decryption query on a
ciphertext which passes the decryption check without ﬁrst
querying H on the corresponding randomness of the cipher-
text is negligible before seeing the challenge. Since the ran-
domness in the ciphertext contains all information needed
to decrypt, no decryption oracle is required to simulate de-
cryption before the challenge ciphertext with overwhelming
probability. However, this argument does not hold after the
challenge ciphertext has been issued since the adversary may
attempt to reuse part of the challenge ciphertext.
We now claim that (A1, A2, A3) cannot, with non-negl.
probability, make a ciphertext query that will pass the de-
cryption check that re-uses either C∗ or Ci,0 for some i ∈
[1, n + 1] of the challenge ciphertext (we call such a cipher-
text Overlapping. We call a ciphertext Valid if it passes the
check of the decryption step). For any decryption query
C = ((Ci,b : (i, b) ∈ I), C∗), there are two ways C could be
overlapping (we will call the challenge ciphertext C and the
corresponding ciphertext components C∗, C i,0). For the fol-
i,b, rz, r∗z be the randomness used during
lowing claims let rz
encryption of the challenge query.
Lemma 4.5. Let C be any decryption query after the chal-
lenge phase with C (cid:54)= C and C∗ = C∗ such that no string
containing rz has been queried to H by the adversary. Then,
the probability C is valid is negligible.
Proof. Since C (cid:54)= C, Ci,b (cid:54)= C i,b for some (i, b) ∈ I. Then,
in order for C to be valid, it is necessary that:
E.EncP K∗ (rz ◦ r∗z; H({Ci,b}(i,b)∈I ◦ rz ◦ r∗z)) =
E.EncP K∗ (rz ◦ r∗z; H({C i,b}(i,b)∈I ◦ rz ◦ r∗z)).
However, note that the probability of the above equality is
negligible by the unpredictable ciphertexts requirement of
E because H({Ci,b}(i,b)∈I ◦ rz ◦ r∗z) has not been queried.
Therefore, with overwhelming probability C∗ is not a valid
encryption of the underlying message and C is not valid.
Lemma 4.6. Let C be any decryption query after the chal-
lenge phase with C (cid:54)= C, C∗ (cid:54)= C∗ such that Cj,0 = C j,0 for
some j ∈ [1, n + 1].
j,0 for any
j ∈ [1, n + 1] or rz has been queried to H by the adversary,
the probability C is valid is negligible.
If no string containing rz
469,
4.2 CCA Security in the Standard Model
∗
))
Proof: Since C∗ (cid:54)= C∗, if for some s, s∗ ∈ {0, 1}m(cid:48)
; H({Ci,b}(i,b)∈I ◦ s ◦ s
∗
= E.EncP K∗ (s ◦ s
C
∗
then with overwhelming probability we may assume A has
queried H({Ci,b}(i,b)∈I , s, s∗) by the property of unpredictable
ciphertexts. By our assumption this implies s (cid:54)= rz. For this
ciphertext to be valid, it is necessary that:
(cid:48)
z]j,0, rz
Cj,0 = E.EncP Kj,0 ([f
(cid:48)
z]j,0, rz
j,0; H([f
j,0, s))
However, since rz
j,0 has not been queried as a component
in H, the argument for H has not yet been queried and
therefore the above will hold with only negligible probability
by the guarantee of unpredictable ciphertexts for E.
Notice that if there is no overlapping valid ciphertext we
can simply use the queries to the hash function to decrypt.
Assume Cj,0 (cid:54)= C j,0, then, if C is valid, there is some under-
lying [f ]j,0, rj,0, r (for the r implicit from the C∗ location):
Cj,0 = E.EncP Kj,0 ([f
(cid:48)
]j,0, rj,0, H([f
(cid:48)
]j,0, rj,0, r))
such that (j, 0) ∈ [f(cid:48)]j,0. If the adversary has not queried
the hash argument, and the above was not the encryption
of the (j, 0) index of the challenge ciphertext (since this is
the only index with (j, 0) ∈ [f(cid:48)]j,0), the hash function has
not been queried on this argument and the probability the
above equality will hold is negligible. Note that decryption
only relies on Cj,0 for j ∈ [1, n + 1] and therefore reusing
Cj,1 from the challenge ciphertext does not eﬀect our abil-
ity to decrypt. Therefore a simulator can return ⊥ on all
decryption queries for overlapping ciphertexts and be ac-
curate with overwhelming probability. We call the event
in which the adversary queries a string with either rz
i,0 for
some i ∈ [1, n + 1], rz or r∗z as a substring to H an ora-
cle failure. We showed above that to query an overlapping
valid ciphertext, with overwhelming probability, the adver-
sary must cause an oracle failure.
Lemma 4.7. If (A1, A2, A3) causes an oracle failure with
non-negligible probability, E is not IND-CPA secure.
Proof: We only address when the an oracle failure by
querying a string containing rz
i,0 (the other two cases follow
similarly). Notice that as long as there have been no ora-
cle failures the we can simulate the adversary’s decryption
queries with its queries to the hash function. Therefore,
using (A1, A2, A3) as a subroutine, we can make a second
adversary that creates an oracle failure without ever using
a decryption oracle. Let (A(cid:48)
3) be such a tuple.
1, A(cid:48)
2, A(cid:48)
2, A(cid:48)
1, A(cid:48)
Up to the point of creating an oracle failure, the view
of (A(cid:48)
3) is identical if instead of using H to generate
the randomness used during the encryption of the challenge
ciphertext, this randomness is generated uniformly at ran-
dom. Therefore, we may assume (A(cid:48)
3) creates an
oracle failure when the randomness used in the challenge
ciphertext is drawn uniformly at random.
1, A(cid:48)
2, A(cid:48)
i,b and r1
z]i,b, rz
The proof now follows similarly to the case in Function
Hiding, assume both r0
i,b are created during the chal-
lenge encryption and [f(cid:48)
i,b is encrypted with uniform
randomness. If A(cid:48) has non-negligible probability of querying
the oracle on some rd
i,b this creates a distinguishing attack
against the encryption scheme since its view is independent
of rz
i,b where z is the index chosen in the challenge query.
In this section we describe the construction of a CCA2 se-
cure Worry-Free Encryption scheme in the standard model
using our IND-CPA scheme. The construction follows heav-
ily Sahai’s construction of IND-CCA2 secure public key en-
cryption from an IND-CPA secure scheme and a simulation
sound NIZK proof system for NP [16].
In Sahai’s original construction, the main observation is
that if the IND-CPA secure scheme is run twice in parallel
and a valid encryption includes a proof that both parallel
encryptions are of the same message, one can transform an
IND-CPA secure scheme to an IND-CCA2 secure public key
encryption scheme. The application to our setting is nearly
immediate, with the proof being that each pair of ciphertext
components with the same index (i, b) are encryptions of the
same message, with only the following caveat. For the NIZK
proof system, it is necessary to have a common reference
string of randomly generated bits. This is not a problem in
Sahai’s construction since the user can randomly generate
the CRS and use it as part of its public key, a malicious user
is not an issue. However, in our setting, in certain security
games, this user may be dishonest and thus we can not trust
that the CRS would be correctly generated if we allowed the
user to generate it independently.
It is for this reason that we must use a coin ﬂipping proto-
col (implemented through a commitment scheme) between
the user and key generation authority in order to settle on
this CRS, which allows the simulator to rewind during the
proof to set the CRS. Since either the user or key genera-
tion authority is assumed honest in all security games for
standard Worry-Free Encryption, the CRS will always be
correctly generated and we will be able to set the CRS in
each security experiment. However, this will be incompat-
ible with the ideas in the following section in constructing
a minimally-vulnerable scheme and we leave the problem of
constructing a CCA2 secure Worry-Free encryption scheme
that is minimally-vulnerable open.
5. MALICIOUS AUTHORITY COLLUSION
One question that arises is the case of a malicious user
Alice and the CA colluding to make her public key. Since
credentials in Worry-Free Encryption are hidden in the pub-
lic keys, an honest Bob can never tell if Alice and the CA
collude to make her a public key with incorrect credentials.
However, in this section we will give a scheme where this is
all they can accomplish. We call such a scheme minimally
vulnerable to collusion.
5.1 Two Round 1-out-of-2 Oblivious Transfer
Oblivious transfer is a well developed concept in crypto-
graphic literature [15, 14] and we will assume some proﬁ-
ciency in this paper. A two round (sometimes called ‘non-
interactive’) 1-out-of-2 oblivious transfer protocol (OT 2
1 ) is
a two round protocol between a chooser (who sends the ﬁrst
message) and a sender (who sends the second) such that the
sender starts with two values M0 and M1 and if both parties
are honest, at the end, the chooser will receive Mb for his
choice of b and will gain no additional information about Mb
apart from Mb and the sender gains no information about b.
However, for our purposes, we will need a slight modiﬁ-
cation on this concept. While not implied by the traditional
deﬁnition, we conjecture it is satisﬁed by many known OT 2
1
470constructions, one of the best known constructions, due to
Naor & Pinkas [15] in particular satisﬁes this notion.
5.2 Static OT2