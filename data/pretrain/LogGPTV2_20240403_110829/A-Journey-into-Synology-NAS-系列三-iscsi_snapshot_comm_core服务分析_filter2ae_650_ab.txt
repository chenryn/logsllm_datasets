          if ( v7 >= 0 )
            v7 -= 32;
          v6 = ptr;
        }
       // ...
在`PacketWrite()`函数内，在`(1)`处会调用`CreatePacket()`来构建包，`CreatePacket()`函数的部分代码如下。其中，在`(2)`处先调用`tzalloc()`申请大小为`a3+32`的堆空间，在`(3)`处调用`memcpy()`将数据拷贝到指定偏移处。
    __int64 CreatePacket(__int64 *a1, const void *a2, int a3)
    {
      if ( a1
        && (v3 = a3 + 32,
            v4 = a3,
            v5 = (void *)___tzalloc((a3 + 32), 0LL, "synocomm_packet_cmd.c", "CreatePacket", 57LL),  // (2)
            (*a1 = (__int64)v5) != 0) )
      {
        memset(v5, 0, v3);
        v6 = *a1;
        *(_QWORD *)v6 = qword_7FFFF7DDA2B0;
        v7 = *a1;
        *(_DWORD *)(v6 + 24) = v4;
        memcpy((void *)(v7 + 32), a2, v4);  // (3) out-of-bounds read
      }
      // ...
    }
需要说明的是，在`(3)`处调用`memcpy()`时，其第`2`个参数`a2`指向前面保存接收数据的缓冲区，大小为`0x1000`，而第3个参数`v4`外部可控。因此在调用`memcpy()`时会存在如下`2`个问题：
  * `v4`为一个`small large value` 如`0x1100`，由于`a2`的大小为`0x1000`，故会出现越界读；
  * `v4`为一个`big large value` 如`0xffffff90`，由于在调用`tzalloc(a3+32)`时会出现整数上溢，造成分配的堆空间很小，而`memcpy()`的`size`参数很大，故会出现非法内存访问。
因此，通过构造并发送伪造的数据包，可以造成在调用`memcpy()`时出现越界读或者非法内存访问。
> 在`Pwn2Own Tokyo
> 2020`上，`STARLabs`团队利用`HandleSendMsg()`中的越界读漏洞，并组合其他漏洞，在群晖`DS418play`型号的`NAS`设备上实现了任意代码执行。
前面提到过，`HandleSendMsg()`与`HandleRecvMsg()`和其他`Handlexxx`函数不太一样。根据下面的内容可知，只有`SendMsg`和`RecvMsg`这`2`个预定义的长度为`0`(未定义)，其他都有预定义的长度，因而造成后续处理时存在上述问题。
    LOAD:00007FFFF7DDA120                 dq offset aGetappipack  ; "GetAppIPAck"
    LOAD:00007FFFF7DDA128                 dq 0Ch    ; pre-defined length
    LOAD:00007FFFF7DDA130                 dq 20h
    LOAD:00007FFFF7DDA138                 dq offset aSendmsg      ; "SendMsg"
    LOAD:00007FFFF7DDA140                 dq 0
    LOAD:00007FFFF7DDA148                 dq 21h
    LOAD:00007FFFF7DDA150                 dq offset aRecvmsg      ; "RecvMsg"
    LOAD:00007FFFF7DDA158                 dq 0                    ; 只有这2个未定义长度,后面对应的函数中存在漏洞
    LOAD:00007FFFF7DDA160                 dq 30h
    LOAD:00007FFFF7DDA168                 dq offset aFailToBind+8 ; "Bind"
    LOAD:00007FFFF7DDA170                 dq 0D4h    ; pre-defined length
    LOAD:00007FFFF7DDA178                 dq 31h
###  访问控制不当
假设我们同样忽略了上述问题，在阶段`4`，`iscsi_snapshot_server`从`pipe`读取数据并进行处理，对应的代码如下。在`sub_401BA0()`中，在`(1)`处调用`CommRecvEvlp()`读取数据，在`(2)`处调用`HandleProtCommand()`。
    signed __int64 sub_401BA0()
    {
      // ...
      v0 = (_QWORD *)CreateSynoCommEvlp();
      v1 = CreateSynoComm("ISS-SERVER");
      // ...
      while ( 1 )
      {
        while ( 1 )
        {
          v2 = CommRecvEvlp(v1, v0);    // (1) recv data
          // ...
          ExtractFromUUIDByDataPacket(*v0, v64);
          ExtractToUUIDByDataPacket(*v0, v65);
          v4 = (const char *)CommGetEvlpData(v0);
          // ...
          v5 = CommGetEvlpData(v0);
          v6 = HandleProtCommand(v1, v5, &s, v64);  // (2)
          // ...
在`HandleProtCommand()`中，先将读取的数据转换为`json对象`，解析其中的`command`、`command_sn`和`plugin_id`等，然后根据`command`值查找对应的处理函数，并进行调用。
    __int64 HandleProtCommand(__int64 a1, __int64 a2, const char **a3, __int64 a4)
    {
      // ...
      v5 = GetJSONFromString(a2);    // (3)
      // ...
      v9 = (const char *)SYNOCPBJsonGetString(v5, "command", 0LL);
      // ...
      v10 = 0;
      v11 = (const char *)*((_QWORD *)pCmdPatterns_ptr + 1);
      v12 = (char *)pCmdPatterns_ptr + 32;
      // ...
      v25 = (unsigned int *)((char *)pCmdPatterns_ptr + 24 * v10);
      v26 = *v25;
      if ( !(unsigned int)json_object_object_get_ex(v6, "command", &v33) ) v33 = 0LL;
      if ( !(unsigned int)json_object_object_get_ex(v6, "command_sn", &v34) ) v34 = 0LL;
      if ( !(unsigned int)json_object_object_get_ex(v6, "plugin_id", &v35) ) v35 = 0LL;
      if ( !(unsigned int)json_object_object_get_ex(v6, "key", &v36) ) v36 = 0LL;
      if ( !(unsigned int)json_object_object_get_ex(v6, "protocol_version", &v37) ) v37 = 0LL;
      // ...
      v38 = json_object_get_string(v33, "protocol_version");
      // ...
      if ( v42 && *v42 == 50 )
      {
        v29 = (*((__int64 (__fastcall **)(__int64, const char *, __int64 *, const void **, __int64))pCmdPatterns_ptr + 3 * v24 + 2))( a1, v6, &v38, &v32, a4);    // (4)
        // ...
    LOAD:00007FFFF7DDA340 pCmdPatterns    dq 1                    ; DATA XREF: LOAD:pCmdPatterns_ptr↑o
    LOAD:00007FFFF7DDA348                 dq offset aUnregister_0+2 ; "register"
    LOAD:00007FFFF7DDA350                 dq offset HandleProtRegister
    LOAD:00007FFFF7DDA358                 dq 2
    LOAD:00007FFFF7DDA360                 dq offset aDisconnect+3 ; "connect"
    LOAD:00007FFFF7DDA368                 dq offset HandleProtConnect
    ; ...
    LOAD:00007FFFF7DDA3D8                 dq offset aStartMirror  ; "start_mirror"
    LOAD:00007FFFF7DDA3E0                 dq offset HandleProtStartMirror
    ; ...
    LOAD:00007FFFF7DDA460                 dq 0Dh
    LOAD:00007FFFF7DDA468                 dq offset aBadDeleteLun+4 ; "delete_lun"
    LOAD:00007FFFF7DDA470                 dq offset HandleProtDeleteLun
    ; ...
    LOAD:00007FFFF7DDA4C0                 dq 11h
    LOAD:00007FFFF7DDA4C8                 dq offset aTpTaskReady  ; "tp_task_ready"
    LOAD:00007FFFF7DDA4D0                 dq offset HandleProtTPTaskReady
根据`pCmdPatterns`的内容可知，有很多支持的`command`，如`register`、`connect`、`start_mirror`和`delete_lun`等。以`delete_lun`为例，其对应的处理函数为`HandleProtDeleteLun()`。
在`HandleProtDeleteLun()`函数内，获取必要的参数后，在`(5)`处调用`SYNOiSCSILunDelete()`来删除对应的`lun`，而整个过程是无需认证的。因此通过构造并发送伪造的数据包，可实现删除设备上的`lun`，对数据造成威胁。
    signed __int64 HandleProtDeleteLun(__int64 a1, __int64 a2, __int64 a3, _QWORD *a4)
    {
      v16[0] = 0LL;
      if ( !(unsigned int)json_object_object_get_ex(a2, "data", v16) )
      {
        // ...
      }
      v7 = SYNOCPBJsonGetInteger(v16[0], "type");
      v8 = v7;
      // ...
      v9 = SYNOCPBJsonGetString(v16[0], "lun", 0LL);
      // ...
      v10 = v9;
      v11 = SYNOCPBGetLun(v8, v9);
      v12 = (unsigned int *)v11;
      // ...
      if ( (unsigned int)SYNOiSCSILunDelete(v11, v10) )        // (5)
      {
        // ...
## 小结
本文从局域网的视角出发，对群晖`NAS`设备上的`iscsi_snapshot_comm_core`服务进行了分析，并分享了在`iscsi_snapshot_comm_core`与`iscsi_snapshot_server`之间的通信流程中发现的部分问题。当然，`iscsi_snapshot_comm_core`服务的功能比较复杂，这里只是涉及了其中很小的一块，感兴趣的读者可以对其他部分进行分析。
## 相关链接
  * [(Pwn2Own) Synology DiskStation Manager StartEngCommPipeServer HandleSendMsg Out-Of-Bounds Read Information Disclosure Vulnerability](https://www.zerodayinitiative.com/advisories/ZDI-21-339/)
  * [Synology-SA-20:26 DSM](https://www.synology.com/zh-hk/security/advisory/Synology_SA_20_26)