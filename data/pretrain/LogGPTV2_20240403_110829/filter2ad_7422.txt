title:Traffic statistics collection with FleXam
author:Sajad Shirali-Shahreza and
Yashar Ganjali
Traffic Statistics Collection with FleXam 
Yashar Ganjali 
Sajad Shirali-Shahreza 
Department of Computer Science 
University of Toronto, Canada 
PI:EMAIL 
Department of Computer Science 
University of Toronto, Canada 
PI:EMAIL 
ABSTRACT 
One  of  the  limitations  of  wildcard  rules  in  Software  Defined 
Networks,  such  as  OpenFlow,  is  losing  visibility.  FleXam  is  a 
flexible sampling extension for OpenFlow that allows the controller 
to  define  which  packets  should  be  sampled,  what  parts  of  each 
packet should be selected, and where they should be sent. Here, 
we present an interactive demo showing how FleXam enables the 
controller  to  dynamically  adjust  sampling  rates  and  change  the 
sampling scheme to optimally keep up with a sampling budget in 
the context of a traffic statistics collection application. 
Categories and Subject Descriptors 
C.2.3  [Communication  Networks]:  Network  Operations  – 
Network management, Network monitoring.  
Keywords 
OpenFlow; Sampling; SDN; Traffic Statistics. 
1.  Introduction 
Software-Defined Networking (SDN) provides a centralized view 
of  the  network,  simplifying  programmatic  manipulation  and 
management  of  the  network  traffic.  The  ability  to  easily  access 
and manage individual flows is a significant advantage of SDN in 
general, and OpenFlow specifically. This feature can be used to 
implement  security  and  monitoring  applications such as firewall 
[1]  or anomaly detection [2] as control applications, eliminating 
the need for dedicated middleboxes. 
While  managing  flows  individually  can  be  beneficial  –  e.g.  for 
applications  such  as  firewalls  –  fine-grained  management  of 
flows,  especially  short-lived ones, can lead to unacceptable side 
effects: increased flow setup delay (first packet waiting in a switch 
until the controller instructs the switch how to handle it), packet 
drops due to buffer size limitations (first packet of the flow needs 
to be buffered while waiting for the controller response), and flow 
evictions due to the limited size of flow tables in switches. 
Coarse-grained  handling  of  flows,  i.e.  dealing  with  flows  as 
groups,  is  one  way  to  overcome  the  aforementioned  problems. 
OpenFlow provides this functionality using wildcard rules. There 
is  a  series  of  recent  works  that  tackle  the  programming 
complexity  of  wildcard  rules  by  enabling the user to implement 
the control applications in a high level language and abstraction, 
Permission to make digital or hard copies of part or all of this work for personal or 
classroom  use  is  granted  without  fee  provided  that  copies  are  not  made  or 
distributed for profit or commercial advantage, and that copies bear this notice and 
the full citation on the first page. Copyrights for third-party components of this work 
must be honored. For all other uses, contact the owner/author(s). Copyright is held 
by the author/owner(s). 
SIGCOMM’14, August 17–22, 2014, Chicago, Illinois, USA. 
ACM 978-1-4503-2836-4/14/08. 
http://dx.doi.org/10.1145/2619239.2631441 
and then automatically compiling that into low level flow entries. 
A  well-known  example  is  NetCore  [3]  which  is  a  high-level, 
declarative  language  to  describe  packet  forwarding.  There  are 
other proposed programming languages built on NetCore such as 
Pyretic [4] and Flowlog [5]. 
Even  the  OpenFlow  specifications  seem  to  move  in  a  direction 
that we will not have clear exact match rules anymore, and most 
rules will be wildcard rules instead. While a flow entry match in 
OpenFlow 1.0 specification is defined as a 12-tuple, it has been 
changed  in  newer  revisions,  and  has  been  replaced  with 
OpenFlow  Extensible  Match  (OXM)  in  version  1.2.  OXM 
allowing  switches  to  support  a  variety  of  header  fields  (41 
different types are defined in the latest version, OF 1.4). 
Programming  complexity  is  not  the  only  challenge  when  using 
wildcard rules. Losing visibility in another important outcome of 
wildcard  rules:  the  controller  sees  the  packets  matching  any 
wildcard rule as one flow, and thus has limited (or no) knowledge 
of  the  individual  flows  that  are  aggregated.  In  reactive  routing, 
each  new  flow  in  the  network  will  trigger  a  Packet-In  message 
that informs the controller of its existence. Furthermore, when a 
flow  is  finished,  the  associated  flow  entry  in  the  switch  will  be 
expired after a predefined timeout, which triggers another Flow-
Removed message to the controller. As a result, the controller can 
easily  create  and  maintain  a  list  of  active  flows  in  the  network, 
which is essential for many network monitoring and management 
applications. However, the controller visibility over active flows 
is lost in proactive routing, and when we deal with wildcard rules. 
We  proposed  FleXam  [6]  as  a  solution  for  this  problem,  and 
described how it could be used to implement security applications 
like  port  scan  detection  [7].  FleXam  is  a  flexible  sampling 
extension  for  OpenFlow  that  enables  the  controller  to  access 
packet-level information. Simply stated, the controller can define 
which  packets  should  be  sampled,  what  parts  of  each  packet 
should be selected, and where they should be sent. Packets can be 
sampled  stochastically  (with  a  predetermined  probability)  or 
deterministically  (based  on  a  pattern),  making  it  flexible  for 
different  types  of  applications.  At  the  same  time,  it  is  simple 
enough  to  be  done  entirely  in  the  data  path.  The  controller  can 
also request switches to only send parts of packets that are needed 
(e.g. headers only, payload, etc.) and define where they should be 
sent  for  analysis,  making  it  possible  to  easily  manage  and 
distribute the load. 
FleXam includes two types of sampling: (1) select each packet of 
the  flow  with  a  probability  of  ρ,  and  (2)  select  m  consecutive 
packets  from  each  k  consecutive  packets,  skipping  the  first  δ 
packets. The first case is the stochastic sampling. The second case 
is a generalized version of the deterministic sampling. For m=1, it 
is  equivalent  to  the  normal  one  out  of  k,  or  every  kth  packet 
sampling.  If  an  application  needs  more  than  one  consecutive 
sample, it can set m to a value more than one. By choosing a very 
large k, an application can ensure it will only receive the first m 
consecutive  packets.  This  is  usually  what  security  applications, 
117such as intrusion detection, need. Finally, by changing the value 
of δ, the application can skip the first few packets of each flow, 
e.g.  to  exclude  small  and  short  flows.  Considering  that  sending 
full packets could impose a significant load on the network, and 
not  all  applications  need  full  packet  contents,  the  controller  can 
define what parts of packets (e.g. IP header) should be sent. 
2.  Traffic Statistics Collection with FleXam 
In this demo, we show how we can dynamically adjust sampling 
rates (and patterns) for various applications to optimally keep up 
with  a  sampling  budget.  More  specifically,  we  use  dynamic 
sampling  to  measure  the  amount  of  traffic  exchanged  between 
hosts inside our network and any destination IP outside. This data 
can  be  used  for  both  security  (e.g.  to  detect  any  suspicious 
activity) and routing (e.g. to select best possible ISPs).  
The  main  idea  here  is  that  we  sample  packets  that  are  sent  to 
unidentified  destinations  with  high  rate  (through  a  catch  all 
wildcard rule). Whenever we see a new destination, we create a 
new rule to match all packets to that destination, and will sample 
them with a very low rate. So the majority of sampling budget is 
spent on finding new destinations. 
The  reason  that  we  continue  to  sample  packets  that  match rules 
for known destinations is to avoid sending stat collection queries 
to  switches.  By  sampling  from  flows  to  known  destinations,  we 
automatically  get  updates  as  packets  go  through  the  system, 
without  the  need  for  continuously  sending  queries  to  switches. 
Also,  with  a  fixed  and  low  sampling  rate  the  controller  can 
optimize how frequently it should query statistics for a particular 
flow.  For  instance,  it  could  query  statistics  after  it  received  a 
specific number of samples, while decreasing the sampling rate if 
it  receives  too  many  samples  or  increasing  that  otherwise.  This 
technique will ensure we will not incur a significant overhead for 
querying flows that are nearly or completely idle. 
Furthermore,  if  we  are  only  interested  to  know  the  number  of 
packets that are sent to each destination, or if it is acceptable to 
estimate to the total byte count from size of sampled packets, then 
there is no need to query switches at all: we will use deterministic 
sampling,  which  enables  the  controller  to  count  the  number  of 
matched  packets  based  on  sampling  rate  and  received  samples, 
and to estimate the total amount of transferred traffic based on the 
size of the sampled packets. 
3.  Implementation 
We  have  implemented  FleXam  as  a  patch  to  Open  vSwith1  and 
the POX2 controller. The controller application that installs rules, 
processes sampled packets, and collects information, is written as 
a Python program running as a POX module. 
In the interactive demo, the user will surf the web through a web 
browser.  As  s/he  visits  different  websites,  new  destinations  are 
reached, which triggers new rule installations. At the same time, 
multiple connections may be created to known destinations. 
Figure 1 shows the connectivity between the user and the Internet 
in our demo. There are four switches on the path. The first switch 
uses  reactive  routing,  and  installs  an  exact  match  rule  for  each 
1 http://openvswitch.org/ 
2 http://www.noxrepo.org/ 
new  flow.  We  send  repetitive  queries  to  this  switch  to  collect 
statistics  about  different  flows.  The  second  switch  also  uses 
reactive routing, but installs a wildcard rule matching all packets 
to  a  destination  each  time  it  receives  a  packet  to  a  new 
destination.  We  send  regular  statistics  queries  to  this  switch  as 
well.  The  third  and  fourth  switches  use  FleXam  sampling  and 
wildcard  rules,  with  the  difference  that  the  third  switch  queries 
switches to collect total transferred bytes, while the fourth switch 
will  estimate  this  from  the  size  of  sampled  packets  and  without 
any statistics queries sent to the switch. 
The user will also see a live summary of data collected from each 
switch,  including  the  top  destinations,  statistics  about  each  of 
these  destination  (total  packet  count,  total  bytes  transferred), 
number  of  installed  rules,  and  network  overhead  (e.g.  sampled 
packet count, switch statistics queries, packet-in messages). This 
enables the user to easily compare different approaches both from 
performance (collected statistics) and overhead perspectives. 
Internet
Figure 1. Connectivity diagram of the demo. 
Controller
User
4.  Conclusion 
FleXam  is  designed  to  overcome  the  visibility  loss  of  wildcard 
rules in OpenFlow. In this demo, we show how it could be used to 
efficiently  collect  traffic  statistics  about  different  destinations 
outside  a  given  network  that  interact  with  internal  hosts.  Our 
demo  allows  users  to  interactively  see  how  FleXam  works  in 
comparison  with  alternative  approaches  to  collect  flow  level 
statistics.  
5.  Acknowledgement 
This  project  was  partially  funded  by  NSERC  SAVI  strategic 
network grant. 
6.  REFERENCES 
[1]  Hu, H., et al. 2014. FlowGuard: Building Robust Firewalls 
for Software-Defined Networks. To appear in HotSDN 2014. 
[2]  Mehdi, S.A., Khalid, J., and Khayam, S.A. 2011. Revisiting 
traffic anomaly detection using software defined networking. 
In RAID'11. 161-180. 
[3]  Monsanto, C., et al. 2012. A compiler and run-time system 
for network programming languages. In POPL '12. 217-230. 
[4]  Monsanto, C., et al. 2013. Composing software-defined 
networks. In NSDI’13. 
[5]  Nelson, T., et al. 2014. Tierless Programming and Reasoning 
for Software-Defined Networks. In NSDI’14. 519-531. 
[6]  Shirali-Shahreza, S., and Ganjali, Y. 2013. FleXam: Flexible 
Sampling Extension for Monitoring and Security 
Applications in OpenFlow. In HotSDN 2013. 
[7]  Shirali-Shahreza, S. and Ganjali, Y. 2013. Efficient 
Implementation of Security Applications in OpenFlow 
Controller with FleXam. In HotI 2013. 49-54. 
118