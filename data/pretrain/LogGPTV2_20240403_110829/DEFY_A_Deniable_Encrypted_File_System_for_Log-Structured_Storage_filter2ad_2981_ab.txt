YAFFS is a ﬁle system designed for use with NAND ﬂash
memory. Due to its simplicity, portability, and small memory
footprint, YAFFS has been used as the default ﬁle system in
many mobile devices, including the Android operating system.
YAFFS is a true log-structured ﬁle system [41], [44] in that
write requests are allocated sequentially within the logical
address space. Its design is largely motivated by a desire
to integrate with device-level wear leveling. Next, we brieﬂy
summarize YAFFS’s design; for a more thorough description,
we direct readers to Manning [27] and related resources, e.g.,
Schmitt et al. [42].
The unit of allocation is the page (called a chunk in YAFFS
terminology), ranging from 512-bytes to 32KB in size. The
unit of erasure is the block, each block being composed of 32–
128 pages, depending on the NAND block capacity. YAFFS
uses the OOB space provided by a ﬂash device to store page
metadata and an error correction code.
There are two versions of YAFFS: YAFFS1 and YAFFS2.
The key distinctions between these are: (1) YAFFS1 is de-
signed to work with page sizes up to 1KB while YAFFS2
supports larger pages, and (2) YAFFS2 implements a true log-
structured ﬁle system, performing no overwrites when new
data are written. This paper refers to the YAFFS2 design, and
we use the terms YAFFS2 and YAFFS interchangeably.
Every YAFFS entity (ﬁles, directories, links, etc.) is main-
tained as an object, with an object header. Each object header
stores metadata about its associated object, including its name,
its size, and location its pages. A directory’s header contains
the location of headers for its children (ﬁles and subdirecto-
ries).
B. Writing in YAFFS
Every page is assigned a sequence number, stored in the OOB
section of memory. The sequence number is monotonically
increasing, i.e., the last page written has the highest value,
making it the new leading edge of the log. The leading edge
marks the starting point for the system when searching for the
next page to allocate.
When a page is updated, its corresponding object header
is updated to reference the new page. When an object header
is updated, it too will be written to a new page, and the object
containing it (e.g. a directory) will also be updated. Therefore,
when a page is modiﬁed, the directory path above its object,
up to and including the root, is modiﬁed on disk.
C. Mounting in YAFFS
YAFFS supports special objects known as checkpoints.
These commit information about the state of the ﬁle system
to the drive. On mount, YAFFS searches for the most recent
checkpoint, using it to reconstruct in-memory data structures.
In the absence of a checkpoint, YAFFS will scan the entire
disk, creating a list of blocks and sorting these by sequence
number. Then, in descending order, it examines the contents
of each block: invalid pages are ignored and valid pages are
added to an associated in-memory object (creating an object,
if necessary).
Unlike most disk ﬁles systems (e.g., ext2/3/4, NTFS,
HFS+), a YAFFS partition does not need to be formatted
before being mounted. If no valid objects or checkpoints are
found during mounting, all blocks are marked as available for
allocation.
D. Garbage Collection in YAFFS
Since YAFFS is a log-structured ﬁle system, a page is
never updated in place. Thus, when a page is updated, an
older version of the page likely exists elsewhere on disk. Since
NAND requires a page be erased before it can be written and
offers only block-level erasure granularity, a block may contain
many obsolete pages that cannot be reclaimed until all pages
in the block are obsolete.
YAFFS supports two, heuristic modes of garbage collec-
tion: passive and aggressive garbage collection. In general,
YAFFS garbage collection proceeds in the following fashion.
The system scans the disk looking for a “dirty” block, i.e. a
block with “few” valid pages. The deﬁnition of “few” depends
on the garbage collection mode. During normal operation, the
collector considers a block to be “dirty” if the number of
valid (active) pages in the block is below some threshold. On
startup, during passive garbage collection, this threshold is
lowest: if no more than four pages are valid, then the block
is dirty. On each unsuccessful scan, the threshold is increased,
beginning with four but never going beyond half the pages in a
block. When every block is more than half full, the system will
switches to aggressive garbage collection, where a block with
any dirty page is considered dirty. Once a block is identiﬁed
for collection, YAFFS re-writes its valid pages to the leading
edge and erases the dirty block, making it available for writing.
Write requests are divided into pages, allocated and written
sequentially following the leading edge of the log (the last page
written). If the leading edge is the last page of a block, YAFFS
searches for the next block past the leading edge that is not full.
IV. SECURITY MODEL
Before describing the design of DEFY, we introduce our
adversarial model and security goals.
3
A. Adversaries
A secure, deniable ﬁle system hides the existence of
information from an adversary. It conceals all indication as
to whether or not there are hidden ﬁles or directories, at the
ﬁle system level. It does not, however, enforce a system-wide
information ﬂow policy. Czekis et al. demonstrate how it is
possible to infer the existence of hidden ﬁles using the content
of revealed ﬁles, e.g. indices generated by services for desktop
search [17]. We assume users, the OS and applications use the
ﬁle system appropriately.
We deﬁne two types of passive adversaries for deniable
ﬁle systems: those with one-time access to the device (single-
view adversaries) and those with periodic access (snapshot
adversaries). In this context, an adversary’s “access” yields a
full copy of the disk and a complete description of the ﬁle
system (e.g. through a copy of its source code). Further, the
adversary is allowed to force the user to reveal some set of hid-
den ﬁles. As with previous work, the adversary cannot access
the device’s RAM contents nor capture the running state of the
device while outside of the adversary’s immediate possession,
e.g. using a Trojan to implement a, so called, “Evil Maid”
attack [18], [43] or extracting cryptographic keys from RAM
using a cold boot attack [30]. To help ameliorate these threats,
DEFY could be enhanced with an interface to immediately
zero RAM data structures (including cryptographic keys) in
an emergency situation, i.e. a quick lockout feature that may
result in limited data loss.
The single-view adversary is one that is able to access
the ﬁle system and its user only once. This adversarial model
describes many natural scenarios: those in which the device is
stolen, or it is conﬁscated and the user detained for questioning.
The snapshot adversarial model describes scenarios in which
access to the device is granted at distinct points in time, and ﬁle
system images are collected. For example, upon entering and
exiting a guarded facility or at a border-crossing. The snapshot
adversary may then use differences in the collected images to
identify changed data blocks on the device.
Both models include the ability of adversaries to use
various means (i.e., threats and physical violence) to compel
the user to reveal some set of ﬁles. Both models allow the
adversary to perform advanced computer forensics on the disk
image, use password cracking programs, employ statistical
tests, etc. These models subsume all previous deniable ﬁle
system adversarial models in the literature.
B. Security Deﬁnitions
A deniable ﬁle system offers plausible deniability if the
adversary has no means of proving that the user has withheld
data, beyond what she has chosen to reveal. Alternatively, the
user must be able to convince the adversary that no data has
been written to the ﬁle system beyond what she has chosen to
reveal. In other words, it must be plausible that any unrevealed
block on the disk contains no valid data. Additionally, the ﬁle
system offers snapshot resistance if it has plausible deniability,
even in the presence of a snapshot adversary. In particular, the
user may have written data to the disk between snapshots, and
the adversary can determine which blocks have been modiﬁed
between accesses. It must be possible that any unrevealed
block (modiﬁed or not) contains no data.
V. DESIGN REQUIREMENTS
Before we describe the details of our design, we provide
an overview of the requirements that we believe should guide
the design of any secure, deniable ﬁle system.
Deniability Levels: The concept of a deniability level was in-
troduced in previous deniable ﬁle systems implementations [9],
[28], [33]. A deniability level is a collection of ﬁles that
form a sensitivity equivalence class (e.g., love letters vs. trade
secrets). Here, as in previous work, deniability levels form
a total order: (cid:96)0 ≤ (cid:96)1 ≤ . . . ≤ (cid:96)h. A user has some
secret password to reveal all ﬁles at a chosen deniability level.
Following a convenience established in previous work, when
revealing a level, all lower levels should also be revealed.
The system should be ﬂexible enough to accommodate the
dynamic creation of new deniability levels, rather than pre-
specifying and deﬁning the total set of levels at initialization.
An implementation may, of course, elect to restrict users to
some large, ﬁxed number of levels by default; however, we
believe this should not be a restriction imposed by design.
Secure Deletion: Providing secure deletion is complementary
to the setting of deniability. Secure deletion assures that a
deleted object is permanently inaccessible, even if the device
and keys are later revealed to an adversary. We desire secure
deletion to be efﬁcient, deniable and granular. Granular dele-
tion means deleting the entire ﬁle system or a set of ﬁles is
as complex as deleting an individual ﬁle. Finally, to preserve
deniability, deleted data should not appear to be deleted: it
should be indistinguishable from both data unused by the
system and unrevealed data.
Garﬁnkel and Shelat [21] survey methods to destroy digital
data, and identify two techniques that leave storage devices
usable after erasure: secure overwriting and cryptographic key
disposal. In secure overwriting, old data are overwritten with
new data such that the old data are irrecoverable. Gutmann
[23] gives a technique for magnetic storage devices that takes
35 synchronous passes over the data in order to degauss the
media. (Fewer passes may be sufﬁcient.) Techniques designed
to securely delete data from hard disk drives have been shown
to be ineffective for ﬂash-based storage [48].
For systems that employ encryption, Boneh and Lipton
propose that data may be securely deleted by “forgetting”
the corresponding encryption key [15]; without the key, it
is computationally infeasible to ever decrypt the data again.
The actual disposal of the encryption key may involve secure
overwriting. Results from Reardon et al. [36] and Lee et
al. [26] indicate that key disposal techniques may be the most
appropriate technique for ﬂash storage.
Authenticated Encryption: Authenticated encryption pro-
vides conﬁdentiality and data integrity [11]. Conﬁdentiality,
of course, is essential for hiding data at unrevealed levels.
When users may be compelled to relinquish possession of their
mobile device, the beneﬁts of data integrity under the loss of
physical security are also beneﬁcial. Authenticated encryption,
though, requires message expansion—ciphertext are larger than
the original plaintext—which is an obstacle to its integration
into legacy ﬁle systems. Existing work in cryptographic ﬁle
systems (e.g. [6], [14], [52]) use only unauthenticated block
4
TABLE I: Feature comparison of deniable ﬁle systems.
Single-view Resistance
Snapshot Resistance
Arbitrary No. of Levels
Authenticated Encryption
Efﬁcient Secure Deletion
Data Loss Resistance
Wear Leveling Aware
Skillen et al.
Mobiﬂage [46]
!
DEFY
!
!
!
!
!
Load-dependent
!
!
Pang et al. McDonald et al. Anderson et al. Anderson et al.
Scheme 2 [9]
StegFS [33]
Scheme 1, [9]
StegFS [28]
!
!
!
!
!
!
!
!
Probabilistic
Probabilistic
!
!
!
ciphers, which preserves message size to meet the alignment
constraints of block-based storage devices. In practice, addi-
tional storage must be used and managed for the extra bits
associated with ciphertext expansion.
ﬁle system should be easily distributable and compatible with
popular operating systems (e.g. Android and Linux). Using a