众所周知，macOS的沙盒一直是一个神秘的东西，我喜欢利用各种工具并从Jonathan Levin的《*OS
Internals》等参考书再或者苹果官方自己都不太清楚的文档中收集的知识来分析它。苹果的安全机制并不是最好的，这不是什么新鲜事。沙盒技术有很长的历史，macOS的用户被沙盒保护已经有很长一段时间了，随着时间的推移，沙盒变得越来越强大。苹果一直在尽其所能加强其操作系统中的沙盒和其他许多安全机制，下面就让我们一起深入了解一下macOS沙盒的神奇之处。
### 0x01 背景
苹果首次使用沙盒技术是在其OS X
10.5(Leopard)中，它被称为“SeatBelt”（安全带）。正如这个词语的意思一样，它就像在汽车旅行中为了安全而系上安全带一样，强制开发人员在应用程序上使用沙盒技术，以限制其对系统的访问。正如你想象的那样，没有多少开发者会这样做，而且由于“安全带”的最初概念是自愿限制，所以苹果也做不了什么。结合`MandatoryAccessControl
(MAC)Framework`，沙盒的想法肯定不错，但离成功还很远。MACF框架是苹果设备的整个安全模型构建的基础。
在OS X 10.7中，苹果公司吸取了OS X
10.5的教训，沙盒现在已经不再任由开发人员在应用程序上是否使用，默认情况下是强制执行的。即使是今天在macOS
Mojave上，苹果仍然强制使用沙盒，基于应用程序拥有的权限（`com.apple.security.app-sandbox`）。如果应用程序具有此权限，它将被放置在沙盒中，而不是考虑开发人员的意愿。也就是说，在新系统中开发者的意见是没有意义的，因为上传到Appstore的程序是由苹果公司签名的，在签名过程中，苹果公司在程序上授予沙盒权限，从而迫使所有Appstore中的程序沙盒化。
需要注意的是，与iOS的沙盒相比，macOS更容易操作。在iOS上，第三方程序均不可能逃脱沙盒，除非你使用沙盒逃逸技术，而大多数这种情况下是由内核漏洞或沙盒漏洞导致的（越狱）。所有第三方程序，不管它是从哪里安装的，都放在`/var/mobile/containers`和`/var/containers`两目录中。从ios8开始，这些目录发生了很大的变化，创建了新的文件夹，移动了程序资源，静态数据和运行时数据分离，所以在旧的iOS上，你可以找到安装在`/var/mobile/Applications`甚至`/var/mobile/
containers/bundl
/`中的程序。任何在`/var/`中的东西都要被沙盒化，因为你不能直接在其他地方安装你的程序，除非你越狱了。在macOS上，只有Appstore中的程序是沙盒的。如果你从开发人员网站直接下载DMG镜像中的程序，那么它很可能不受沙盒限制。
### 0x02 工作原理
沙盒的唯一目的是限制程序访问系统的各种资源，比如系统调用、文件或任何东西，这是为了恶意程序肆意破坏系统。在iOS上，我可以骗你安装一个恶意的程序，但这个做法是是毫无意义的，除非我有内核或沙箱逃脱的漏洞(越狱)，否则程序不会对你的设备造成很大的伤害（比如：删除你的手机里的一些重要文件）。iOS沙盒和其他保护措施会一起防止未经授权的访问，所以程序只能访问它自己的容器内的资源，并不能造成很大的破坏。同样的道理也适用于macOS应用商店的应用程序，但不适用于DMG格式的程序，因为DMG格式可能没有沙盒。
沙盒实际上是一项非常好的技术，这也就是为什么它一直沿用到今天的原因。假如你在Windows上打开了一个从非法来源上下载的恶意程序，而该程序若想删除`System32`目录或其他重要文件，这是完全可以实现的。因为Windows上没有沙盒，需要使用到管理员权限的资源的地方，只需要欺骗用户点击允许管理员权限运行即可。
苹果官方说过:沙盒是一种在内核层面强制实施的访问控制技术(在内核层面，用户或任何受到损害的程序通常都无法控制)。沙盒可以确保它拦截沙盒程序执行的所有操作，并禁止访问程序没有访问权限的资源。
在macOS上，沙箱本身不是单个文件或单个进程，它被分割成多个组件，比如位于`/usr/libexec/sandboxd`目录中的`userland
daemon`，这是`com.apple.security.sandbox`是`kext (Kernel
Extension)`，还有依赖于`AppContainer.Framework`的`AppSandbox`私有框架。正如你所见，多个组件一起工作来实现本文所诉的程序沙箱。
在终端中运行`kextstat | grep“sand”`命令，可以看到macOS上的kext处于活动状态。
    Isabella:/ geosn0w$ kextstat | grep "sand"
       381 0xffffff7f811a3000 0x210000x21000com.apple.security.sandbox (300.0) BDFF700A-6746-3643-A0A1-852628695B04 
    Isabella:/ geosn0w$
沙箱是多个MACF策略模块之一。AMFI (Apple Mobile File Integrity)的协同设计是另一个模块。
### 0x03 测试:根据授权决定macOS上的应用程序是否沙盒化
正如之前所提到的，该应用被沙盒化的一个明显迹象是应用程序二进制文件中是否需要`com.apple.security.app-sandbox`权限。我们可以使用很多工具检查macOS上的权限，利用Jonathan Levin的`jtool`这个工具，运行命令`./jtool--ent
/Applications/AppName.`在终端app中，我们可以看到程序所拥有的全部权限。以iHex为例，Appstore中的只需要OpenBoardView权限。DMG格式如下：
在终端中运行该命令会得到以下iHex结果:  
需要注意的是，权限是存在的，并且密钥被设置为`true`，此程序将被沙盒化。现在，正如你所见，这些权利是以类似于XML的格式列出的，它们实际上位于
`.PLIST or Property List` 文件中，而属性列表文件只不过是美化的XML。PLISTs可以采用二进制格式，可以使用命令`plutil
-convert xml1 -o`将其转换为可读的格式。
使用`Jtool`可以替换程序的权限，但之后需要对程序进行伪造签名。总之，这是一种解除macOS应用程序沙盒的方法。这在iOS上并不容易做到，因为沙盒是基于应用程序的安装位置，而不是基于安装权限。
现在让我们来看看OpenBoardView，这是一款未从App Store下载的应用程序。  
如你所见，程序没有任何权限。它不会被沙盒化，这意味着它可以比任何应用程序商店应用程序访问更多的源代码。
`com.apple.security.app-sandbox` 的权限并不是iHEX开发人员自己添加的,它是由苹果官方在App
Store审核的过程中自动添加的。
另一种检查程序是否被沙盒化的方法是运行`asctl sandbox check --pid XYZ`命令，其中XYZ是程序的`PID(Process
ID)`。可以从macOS上的`Activity Monitor`程序获得正在运行的进程的`PID`。下面是`asctl`命令的输出。  
### 0x04 执行流程
进入沙盒容器中，也就是放置在`$HOME/Library/Containers/`上的文件夹。此文件夹是为任何沙盒程序创建的，而不管实际二进制文件安装在何处。文件夹遵循简单的结构，但最重要的是，它包含一个`Container.Plist`文件，其中包含有关其容器(由其`CFBundleIdentifier`标识)、`SandboxProfileData、SandboxProfileDataValidationInfo`和`Version`的应用程序的信息。
找到iHEX 的 `Container` ，将目录切到上面提到的路径，然后运行`ls -lF
com.hewbo.hexeditor`。`com.hewbo.hexeditor`是iHex的`CFBundleIndentifier`(在.app文件夹中可以找到`Info.Plist`)。
可以看到app的容器包含一个`Data`文件夹和前面提到的`Container.Plist`文件。数据文件夹非常有趣，如果将目录切到它，可以看到它模拟了用户的主目录。当然，所有这些都是严格控制的符号链接，该控制由沙盒容器强制执行。`Container.plist`包含`SandboxProfileDataValidationRedirectablePathsKey`，它指定哪些符号链接被批准。
### 0x05 沙盒化
在内部启动应用程序时，内核将调用`mac_execve`函数，可以在`XNU`源代码中看到。`__mac_execve`几乎会加载二进制文件，但它也会检查`MAC
label`，看看是否应该强制执行沙箱。
    /*
     * __mac_execve
     *
     * Parameters:    uap->fname        File name to exec
     *        uap->argp        Argument list
     *        uap->envp        Environment list
     *        uap->mac_p        MAC label supplied by caller
     *
     * Returns:    0            Success
     *        EINVAL            Invalid argument
     *        ENOTSUP            Not supported
     *        ENOEXEC            Executable file format error
     *    exec_activate_image:EINVAL    Invalid argument
     *    exec_activate_image:EACCES    Permission denied
     *    exec_activate_image:EINTR    Interrupted function
     *    exec_activate_image:ENOMEM    Not enough space
     *    exec_activate_image:EFAULT    Bad address
     *    exec_activate_image:ENAMETOOLONG    Filename too long
     *    exec_activate_image:ENOEXEC    Executable file format error
     *    exec_activate_image:ETXTBSY    Text file busy [misuse of error code]
     *    exec_activate_image:EBADEXEC    The executable is corrupt/unknown
     *    exec_activate_image:???
     *    mac_execve_enter:???
     *
     * TODO:    Dynamic linker header address on stack is copied via suword()
     */
    int
    __mac_execve(proc_t p, struct __mac_execve_args *uap, int32_t *retval)
    {
        char *bufp = NULL; 
        struct image_params *imgp;
        struct vnode_attr *vap;
        struct vnode_attr *origvap;
        int error;
        char alt_p_comm[sizeof(p->p_comm)] = {0};    /* for PowerPC */
        int is_64 = IS_64BIT_PROCESS(p);
        struct vfs_context context;
        context.vc_thread = current_thread();
        context.vc_ucred = kauth_cred_proc_ref(p);    /* XXX must NOT be kauth_cred_get() */
        /* Allocate a big chunk for locals instead of using stack since these  
         * structures a pretty big.
         */
        MALLOC(bufp, char *, (sizeof(*imgp) + sizeof(*vap) + sizeof(*origvap)), M_TEMP, M_WAITOK | M_ZERO);
        imgp = (struct image_params *) bufp;
        if (bufp == NULL) {
            error = ENOMEM;
            goto exit_with_error;
        }
        vap = (struct vnode_attr *) (bufp + sizeof(*imgp));
        origvap = (struct vnode_attr *) (bufp + sizeof(*imgp) + sizeof(*vap));
        /* Initialize the common data in the image_params structure */
        imgp->ip_user_fname = uap->fname;
        imgp->ip_user_argv = uap->argp;
        imgp->ip_user_envv = uap->envp;
        imgp->ip_vattr = vap;
        imgp->ip_origvattr = origvap;
        imgp->ip_vfs_context = &context;
        imgp->ip_flags = (is_64 ? IMGPF_WAS_64BIT : IMGPF_NONE) | ((p->p_flag & P_DISABLE_ASLR) ? IMGPF_DISABLE_ASLR : IMGPF_NONE);
        imgp->ip_p_comm = alt_p_comm;        /* for PowerPC */
        imgp->ip_seg = (is_64 ? UIO_USERSPACE64 : UIO_USERSPACE32);
    #if CONFIG_MACF
        if (uap->mac_p != USER_ADDR_NULL) {
            error = mac_execve_enter(uap->mac_p, imgp);
            if (error) {
                kauth_cred_unref(&context.vc_ucred);
                goto exit_with_error;
            }
        }
    #endif
        error = exec_activate_image(imgp);