# 分布式事务一致性的问题要解决数据结点的 Scale问题，也就是让数据服务可以像无状态的服务一样在不同的机器上进行调度，这就会涉及数据的replication 问题。而数据 replication则会带来数据一致性的问题，进而对性能带来严重的影响。要解决数据不丢失的问题，只能通过数据冗余的方法，就算是数据分区，每个区也需要进行数据冗余处理。这就是数据副本。当出现某个节点的数据丢失时，可以从副本读到。数据副本是分布式系统解决数据丢失异常的唯一手段。简单来说：1.  要想让数据有高可用性，就得写多份数据。2.  写多份会引起数据一致性的问题。3.  数据一致性的问题又会引发性能问题。在解决数据副本间的一致性问题时，我们有一些技术方案。-   Master-Slave 方案。-   Master-Master 方案。-   两阶段和三阶段提交方案。-   Paxos 方案。你可以仔细地读一下我在 3年前写的[《分布式系统的事务处理》这篇文章](https://coolshell.cn/articles/10910.html)。其中我引用了Google App Engine 联合创始人赖安·巴里特（Ryan Barrett）在 2009 年 GoogleI/O 上的演讲[Transaction Across DataCenter视频](http://www.youtube.com/watch?v=srOgpXECblk) 中的一张图。![](Images/81858eede1d3f7afc967f43f14235411.png){savepage-src="https://static001.geekbang.org/resource/image/e5/ec/e566933d9967f2f5e0f4dcddc66247ec.png"}从上面这张经典的图中，我们可以看到各种不同方案的对比。现在，很多公司的分布式系统事务基本上都是两阶段提交的变种。比如：阿里推出的TCC--Try--Confirm--Cancel，或是我在亚马逊见到的 Plan--Reserve--Confirm的方式，等等。凡是通过业务补偿，或是在业务应用层上做的分布式事务的玩法，基本上都是两阶段提交，或是两阶段提交的变种。换句话说，迄今为止，在应用层上解决事务问题，只有"两阶段提交"这样的方式，而在数据层解决事务问题，Paxos算法则是不二之选。
# 数据结点的分布式方案真正完整解决数据 Scale问题的应该还是数据结点自身。只有数据结点自身解决了这个问题，才能做到对上层业务层的透明，业务层可以像操作单机数据库一样来操作分布式数据库，这样才能做到整个分布式服务架构的调度。也就是说，这个问题应该解决在数据存储方。但是因为数据存储结果有太多不同的Scheme，所以现在的数据存储也是多种多样的，有文件系统，有对象型的，有Key-Value 式，有时序的，有搜索型的，有关系型的......这就是为什么分布式数据存储系统比较难做，因为很难做出来一个放之四海皆准的方案。类比一下编程中的各种不同的数据结构你就会明白为什么会有这么多的数据存储方案了。但是我们可以看到，这个"数据存储的动物园"中，基本上都在解决数据副本、数据一致性和分布式事务的问题。比如 AWS 的 Aurora，就是改写了 MySQL 的 InnoDB 引擎。为了承诺高可用的SLA，所以需要写 6 个副本，但实现方式上，它不像 MySQL 通过 bin log的数据复制方式，而是更为"惊艳"地复制 SQL 语句，然后拼命地使用各种 tricky的方式来降低 latency。比如，使用多线程并行、使用 SQL 操作的 merge 等。MySQL 官方也有 MySQL Cluster 的技术方案。此外，MongoDB、国内的 PingCAP的 TiDB、国外的 CockroachDB，还有阿里的 OceanBase都是为了解决大规模数据的写入和读取的问题而出现的数据库软件。所以，我觉得成熟的可以用到生产线上的分布式数据库这个事估计也不远了。而对于一些需要文件存储的，则需要分布式文件系统的支持。试想，一个 Kafka或 ZooKeeper需要把它们的数据存储到文件系统上。当这个结点有问题时，我们需要再启动一个Kafka 或 ZooKeeper的实例，那么也需要把它们持久化的数据搬迁到另一台机器上。（注意，虽然 Kafka 和 ZooKeeper 是 HA的，数据会在不同的结点中进行复制，但是我们也应该搬迁数据，这样有利用于新结点的快速启动。否则，新的结点需要等待数据同步，这个时间会比较长，可能会导致数据层的其它问题。）于是，我们就需要一个底层是分布式的文件系统，这样新的结点只需要做一个简单的远程文件系统的mount 就可以把数据调度到另外一台机器上了。所以，真正解决数据结点调度的方案应该是底层的数据结点。在它们上面做这个事才是真正有效和优雅的。而像阿里的用于分库分表的数据库中间件TDDL 或是别的公司叫什么 DAL 之类的这样的中间件都会成为过渡技术。
## 状态数据调度小结接下来，我们对状态数据调度做个小小的总结。-   对于应用层上的分布式事务一致性，只有两阶段提交这样的方式。-   而底层存储可以解决这个问题的方式是通过一些像 Paxos、Raft 或是 NWR    这样的算法和模型来解决。-   状态数据调度应该是由分布式存储系统来解决的，这样会更为完美。但是因为数据存储的    Scheme    太多，所以，导致我们有各式各样的分布式存储系统，有文件对象的，有关系型数据库的，有    NoSQL 的，有时序数据的，有搜索数据的，有队列的......总之，我相信状态数据调度应该是在 IaaS 层的数据存储解决的问题，而不是在PaaS 层或者 SaaS 层来解决的。在 IaaS层上解决这个问题，一般来说有三种方案，一种是使用比较廉价的开源产品，如：NFS、Ceph、TiDB、CockroachDB、ElasticSearch、InfluxDB、MySQLCluster 和 Redis Cluster之类的；另一种是用云计算厂商的方案。当然，如果不差钱的话，可以使用更为昂贵的商业网络存储方案。
# 小结回顾一下今天分享的主要内容。首先，我先明确表态，不要将流量调度和服务治理混为一谈（当然，服务治理是流量调度的前提），并比较了两者有何不同。然后，讲述了流量调度的主要功能和关键技术。接着进入本文的第二个话题------状态数据调度，讲述了真正完整解决数据Scale问题的应该还是数据结点自身，并给出了相应的技术方案，随后对状态数据调度进行了小结。欢迎你也谈一谈自己经历过的技术场景中是采用了哪些流量和数据调度的技术和产品，遇到过什么样的问题，是怎样解决的？下篇文章中，我们将开启一个全新的话题------洞悉 PaaS 平台的本质。下面我列出了系列文章《分布式系统架构的本质》的目录，以方便你快速找到自己感兴趣的内容。如果你在分布式系统架构方面，有其他想了解的话题和内容，欢迎留言给我。-   [分布式系统架构的冰与火](https://time.geekbang.org/column/article/1411)-   [从亚马逊的实践，谈分布式系统的难点](https://time.geekbang.org/column/article/1505)-   [分布式系统的技术栈](https://time.geekbang.org/column/article/1512)-   [分布式系统关键技术：全栈监控](https://time.geekbang.org/column/article/1513)-   [分布式系统关键技术：服务调度](https://time.geekbang.org/column/article/1604)-   [分布式系统关键技术：流量与数据调度](https://time.geekbang.org/column/article/1609)-   [洞悉 PaaS    平台的本质](https://time.geekbang.org/column/article/1610)-   [推荐阅读：分布式系统架构经典资料](https://time.geekbang.org/column/article/2080)-   [推荐阅读：分布式数据调度相关论文](https://time.geekbang.org/column/article/2421)![](Images/1c1e992cf41f5294df097aabed82f9e4.png){savepage-src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg"}
# 27 \| 洞悉PaaS平台的本质在了解了前面几篇文章中提的这些问题以后，我们需要思考一下该怎样解决这些问题。为了解决这些问题，请先允许我来谈谈软件工程的本质。我认为，一家商业公司的软件工程能力主要体现在三个地方。**第一，提高服务的 SLA。**所谓服务的 SLA，也就是我们能提供多少个 9 的系统可用性，而每提高一个 9的可用性都是对整个系统架构的重新洗礼。在我看来，提高系统的 SLA主要表现在两个方面：-   高可用的系统；-   自动化的运维。你可以看一下我在 CoolShell上写的《[关于高可用系统](https://coolshell.cn/articles/17459.html)》这篇文章，它主要讲了构建高可用的系统需要使用的分布式系统设计思路。然而这还不够，我们还需要一个高度自动化的运维和管理系统，因为故障是常态，如果没有自动化的故障恢复，就很难提高服务的SLA。``{=html}**第二，能力和资源重用或复用。**软件工程还有一个重要的能力就是让能力和资源可以重用。其主要表现在如下两个方面：-   软件模块的重用；-   软件运行环境和资源的重用。为此，需要我们有两个重要的能力：一个是"软件抽象的能力"，另一个是"软件标准化的能力"。你可以认为软件抽象就是找出通用的软件模块或服务，软件标准化就是使用统一的软件通讯协议、统一的开发和运维管理方法......这样能让整体软件开发运维的能力和资源得到最大程度的复用，从而增加效率。**第三，过程的自动化。**编程本来就是把一个重复工作自动化的过程，所以，**软件工程的第三个本质就是把软件生产和运维的过程自动化起来**。也就是下面这两个方面：-   软件生产流水线；-   软件运维自动化。为此，我们除了需要 CI/CD 的 DevOps式的自动化之外，也需要能够对正在运行的生产环境中的软件进行自动化运维。通过了解软件工程的这三个本质，你会发现，我们上面所说的那些分布式的技术点是高度一致的，也就是下面这三个方面的能力。（是的，世界就是这样的。当参透了本质之后，你会发现世界是大同的。）-   分布式多层的系统架构。-   服务化的能力供应。-   自动化的运维能力。只有做到了这些，我们才能够真正拥有云计算的威力。这就是所谓的 CloudNative。而这些目标都完美地体现在 PaaS 平台上。前面讲述的分布式系统关键技术和软件工程的本质，都可以在 PaaS平台上得到完全体现。所以，需要一个 PaaS平台把那么多的东西给串联起来。这里，我结合自己的认知给你讲一下 PaaS相关的东西，并把前面讲过的所有东西做一个总结。