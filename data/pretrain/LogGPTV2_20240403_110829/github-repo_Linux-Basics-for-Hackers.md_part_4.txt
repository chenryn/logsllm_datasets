kali \>find /➊ -type f➋ -name apache2➌
首先，➊是说明了开始搜索的目录，在这种情况下是 /
。然后➋我指定要搜索的文件类型，在本例中为f表示普通文件。最后，➌我给出了我正在搜索的文件的名称，在本例中为apache2。
此搜索的结果如下所示：
kali \>find / -type f -name apache2
/usr/lib/apache2/mpm­itk/apache2
/usr/lib/apache2/mpm­event/apache2
/usr/lib/apache2/mpm­worker/apache2
/usr/lib/apache2/mpm­prefork/apache2
/etc/cron.daily/apache2
etc/logrotate.d/apache2
/etc/init.d/apache2
/etc/default/apache2
find命令从文件系统（/）的顶部开始，遍历每个目录，在文件名中查找apache2，然后列出找到的所有实例。
正如您可能想象的那样，在每个目录中查找的搜索可能很慢。加快速度的一种方法是只查看您希望找到所需文件的所在目录。在这种情况下，比如我们正在寻找配置文件，因此我们可以在/etc目录中开始搜索，而Linux只会搜索其子目录。我们来试试吧：
kali \>find /etc -type f -name apache2
/etc/init.d/apache2
/etc/logrotate.d/apache2
/etc/cron.daily/apache2
这个更快的搜索只在/etc目录及其子目录中发现了apache2的出现。同样重要的是，要注意与其他一些搜索命令不同，find只显示确切的名称匹配。如果文件apache2有扩展名，例如apache2.conf，则搜索找不到匹配项。我们可以通过使用通配符来解决此限制，这使我们能够匹配多个字符。通配符有几种不同的形式：**\*
. , ?** 和 **[]** 。
让我们在/etc目录中查看以apache2开头并具有任何扩展名的所有文件。为此，我们可以使用以下通配符编写find命令：
kali \>find /etc -type f - name apache2.\*
/etc/apache2/apache2.conf
当我们运行此命令时，我们发现/etc目录中有一个文件符合**apache2.\***模式。当我们使用一个点后跟\*通配符时，终端会在文件名apache2之后查找任何扩展名。这对于查找您不知道文件扩展名的文件非常有用。
当我运行此命令时，我在/etc目录中找到两个以apache2开头的文件，包括apache2.conf文件。
#### *用grep过滤*
通常在使用命令行时，您需要搜索特定关键字。
为此，您可以使用**grep**命令作为过滤器来搜索关键字。
当输出从一个命令传送到另一个命令时，通常使用**grep**命令。我在第2章介绍了管道，但是现在，只要说Linux（和Windows就此问题）允许我们获取一个命令的输出并将其作为输入发送到另一个命令就足够了。这叫做管道，我们使用
\| 命令符号执行此操作（\|键通常位于键盘上的ENTER键上方）。
**ps**命令用于显示有关计算机上运行的进程的信息。我们将在第6章中更详细地介绍这一点，但是对于这个示例，假设我想看到我的Linux系统上运行的所有进程。在这种情况下，我可以使用**ps**（进程）命令，然后使用**aux**参数来指定要显示的进程信息，如下所示：
kali \>ps aux
这为我提供了在这个系统中运行的所有进程的列表 -
但是如果我只是想找到一个进程来查看它是否正在运行呢？
我可以通过将**ps**的输出信息，管道输出到**grep**并搜索关键字来完成此操作。例如，要查明apache2服务是否正在运行，我将输入以下内容。
kali \>ps aux \| grep apache2
root 4851 0.2 0.7 37548 7668 ? Ss 10:14 0:00 /usr/sbin/apache2 ­k start
root 4906 0.0 0.4 37572 4228 ? S 10:14 0:00 /usr/sbin/apache2 ­k start
root 4910 0.0 0.4 37572 4228 ? Ss 10:14 0:00 /usr/sbin/apache2 ­k start
­­snip­­
此命令告诉Linux显示我的所有服务，然后将该输出发送到**grep**，后者将查看关键字apache2的输出，然后仅显示apache2相关的输出，从而为我节省了大量时间和视力。
### 修改文件和目录
找到文件和目录后，您将希望能够对它们执行操作。在本节中，我们将介绍如何创建文件和目录，复制文件，重命名文件以及删除文件和目录。
#### *创建文件*
有许多方法可以在Linux中创建文件，但是现在我们只看两个简单的方法。第一个是**cat**，它是连接（concatenate）的缩写，意思是将各个部分组合在一起（不是你最喜欢的驯养猫科动物cat）。**cat**命令通常用于显示文件的内容，但也可用于创建小文件。要创建更大的文件，最好在文本编辑器（如vim，emacs，leafpad，gedit或kate）中输入代码，然后将其另存为文件。
##### 使用cat连接
**cat**命令后跟一个文件名将显示该文件的内容，但是为了创建一个文件，我们遵循带有重定向的cat命令，用
**\>** 符号表示，以及我们想要创建的文件的名称。以下是一个例子：
kali\> cat \> hackingskills
Hacking is the most valuable skill set of the 21st century!
当您按**ENTER**键时，Linux将进入交互模式并等待您开始输入该文件的内容。这可能令人费解，因为提示符（
kali
\>）消失了，但只要你开始打字，无论你输入什么都将写入文件内（在这种情况下，输入hackingskills）。在这里，我键入“Hacking
is the most valuable skill set of the 21st century!”。
要退出并返回提示，请按**CTRL­D**。然后，当我想查看文件hackingskills中的内容时，我输入以下内容：
kali\> cat hackingskills
Hacking is the most valuable skill set of the 21st century!
如果您不使用重定向符号，Linux将直接在终端打印出文件的内容。要向文件添加或附加更多内容，可以使用带有双重定向（\>\>）的**cat**命令，然后使用要添加到文件末尾的任何内容。以下是一个例子：
kali\> cat \>\> hackingskills
Everyone should learn hacking
Linux再次进入人机交互模式，等待输入内容附加到文件。当我键入“Everyone should
learn
hacking”并按**CTRL­D**，我回到了终端提示符。现在，当我用cat显示该文件的内容时，我可以看到该文件已经附加了内容“Everyone
should learn hacking”，如下所示：
kali \> cat hackingskills
Hacking is the most valuable skill set of the 21st century! Everyone should
learn hacking
如果我想用新内容信息覆盖文件，我可以简单地再次使用**cat**命令和一个重定向符号（\>），如下所示：
kali \> cat \> hackingskills
Everyone in IT security without hacking skills is in the dark
kali \> cat hackingskills
Everyone in IT security without hacking skills is in the dark
命令的含义如下：
cat \> hackingskills \#是打开或创建一个文件并(以人机交互模式)写入内容
cat hackingskills \#在控制台终端上打印查看文件内容
正如您在此处看到的，Linux进入交互模式，然后输入新文本然后退回到提示符。当我再次使用**cat**来查看文件的内容时，我发现我之前的单词已被最新文本覆盖。
##### 用touch创建文件
文件创建的第二个命令是**touch**。此命令最初开发是用来用户只需touch文件即可更改其某些详细信息，例如创建或修改日期。但是，如果该文件尚不存在，则此命令默认情况下会创建该文件。
 让我们用**touch**创建一个文件名为newfile：
kali \>touch newfile
现在，当我使用**ls
-l**查看目录的长列表时，我看到已经创建了一个名为**newfile**的新文件。
请注意，它的大小为0，因为**newfile**中没有内容。
#### *创建目录*
在Linux中创建目录的命令是**mkdir**，它是创建目录(make
directory)的缩写。要创建名为newdirectory的目录，请输入以下命令：
kali \>mkdir newdirectory
要导航进入到这个新创建的目录下，只需输入：
kali \>cd newdirectory
#### *复制文件*
要复制文件，我们使用**cp**命令。这会在新的目录位置创建文件的副本，并保留旧文件。
在这里，我们将使用**touch**在根目录中创建一个文件oldfile，并将其复制到/root/newdirectory，在进程中重命名并保留原始oldfile：
kali \>touch oldfile
kali \>cp oldfile /root/newdirectory/newfile
重命名文件是可选的，只需将您想要的名称添加到目录路径的末尾即可。如果在复制文件时不重命名该文件，则默认情况下该文件将保留原始名称。
当我们导航进入到newdirectory下时，我们看到有一个名为newfile的oldfile的精确副本：
kali \>cd newdirectory
kali \>ls
newfile oldfile
#### *重命名文件*
不幸的是，Linux没有专门用于重命名文件的命令（如Windows和其他一些操作系统那样），但它确实有**mv**（move）命令。
**mv**命令可用于将文件或目录移动到新的目录位置，或者只是为现有文件指定一个新名称（重命名）。要将newfile重命名为newfile2，请输入以下内容：
kali \>mv newfile newfile2
kali \>ls
oldfile newfile2
现在当您列出（**ls**）该目录时，您会看到newfile2而不是newfile，因为它已被重命名。你可以对目录做同样的事情。
#### *删除文件*
要删除文件，只需使用**rm**命令，如下所示：
kali \>rm newfile2
如果您现在在目录上执行长列表的**ls**命令，则可以确认该文件已被删除。
#### *删除目录*
删除目录的命令类似于删除文件的**rm**命令，但附加了**dir**（用于目录），如下所示：
kali \>rmdir newdirectory
rmdir:failed to remove 'newdirectory': Directory not empty
重要的是要注意**rmdir**不会删除非空的目录，但会给你一条警告信息“目录不为空”(Directory
not
empty)，如本例所示。在删除目录之前，必须先删除该目录下的所有内容。这是为了阻止您意外删除您不想删除的对象文件。
如果你想一次性删除一个目录及其下的内容，你可以在**rm**之后使用**-r**参数，如下所示：
kali \>rm -r newdirectory
但需要注意的是：要小心使用**-r**选项和**rm**，至少在开始时，因为错误地删除有价值的文件和目录非常容易。例如，在主目录（/）中使用**rm
-r**会删除那里的每一个文件和目录 – 这不是你想要的致命性的动作。
### 现在开始!
现在您已经掌握了一些在文件系统中导航切换的基本技能，您可以在进行（黑客游戏）之前稍微使用Linux系统。使用终端的最佳方法是立即尝试使用新发现的技能。在随后的章节中，我们将深入探讨我们的黑客游戏。
2
-
文本操作
--------
TEXT MANIPULATION
![](media/451fdbee142e8cd4684d71b24707d050.jpg)