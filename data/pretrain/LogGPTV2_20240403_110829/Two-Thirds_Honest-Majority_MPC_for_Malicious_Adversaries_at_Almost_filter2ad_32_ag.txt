760
640
840
1112
1366
1606
2417
3036
34
45
62
57
49
87
49
72
133
76
18.0%
12.1%
8.2%
8.9%
5.8%
7.8%
3.6%
4.5%
5.5%
2.5%
159
343
644
609
850
1056
1160
1528
1962
2262
14.8%
8.4%
15.3%
4.9%
-1.2%
5.0%
15.1%
4.9%
18.8%
25.5%
Table 2. The computational multiplication protocol version of Section 5.2
3000
2500
2000
1500
1000
500
0
10
20
30
Malicious-IT
40
50
SemiHonest-IT
60
70
80
90
100
Malicious-PRF
SemiHonestPRF
Fig. 1. Graphic comparison of all protocol versions.
28
7.2 Experiment 2 – Comparison to Prior Work
In this experiment, we compared our new protocol to the protocols of [2,8]. In
this experiment, we used the more eﬃcient PRF version of the protocol of Sec-
tion 5.2. The protocol of [2], called HyperMPC, is for t < n/3 like our protocol,
but achieves perfect security (in contrast to statistical security as here). The
communication cost of HyperMPC is 13 ﬁeld elements per multiplication gate,
for any ﬁeld size. Our protocol is under 3 elements per multiplication gate (plus
the additive cost) and so is expected to be about 4 times faster than Hyper-
MPC. The protocol of [8], that we call CRYPTO18 below, is for t < n/2 and
has twice the cost of the semi-honest protocol for large ﬁelds (and even more for
smaller ﬁelds).7 We stress that although our protocol is more eﬃcient than [8],
we achieve a weaker threshold of t < n/3 instead of t < n/2. The experiments
here were run on c5.xlarge instances on AWS in the EAST-US region, with a
circuit with 1,000,000 multiplication gates and depths 20 and 100. The results
of these experiments, for diﬀerent depth circuits and diﬀerent ﬁelds, appear in
Figures 2 and 3, at the end of the paper.
It is interesting to note that in GF [28], the cost of HyperMPC and our
protocol is almost the same, despite the fact that our protocol has about a
quarter of the communication. We conjecture that this is due to the fact that
in small ﬁelds, the amount of communication is so low already in HyperMPC
that the rounds of communication overrides the other costs (at least on circuits
this size). However, in larger ﬁelds, the diﬀerence in running time is great. Note
also that HyperMPC and CRYPTO18 have the same cost in large ﬁelds, as is
expected by the theoretical costs.
7.3 Experiment 3 – Results for Mobile Phone Executions
One of the beneﬁts of low bandwidth protocols is to enable many parties on weak
devices to run secure computation amongst themselves. This was articulated
in [2] who constructed an end-to-end system.
In order to demonstrate the suitability of our protocol for such a setting,
we ran the protocol on ARM machines and on a mix of ARM machines and
servers in AWS. We used the new AWS service for ARM machines with a1.large
instances, and with c5.xlarge server instances. The speciﬁcation of the ARM
a1.large machines are two Cortex A72 CPUs, with clock speed 2.5GHz and
4GB RAM. These CPUs are those used in phones like Huawei P9, Xiaomi Redmi
Pro and Samsung Galaxy C9 Pro (all released in 2016); note that these phones
have four Cortex A72 CPUs and not two. Thus, this experiment demonstrates
the viability of running MPC from simple mobile phones; in particular, high-end
phones are not needed.
7 For a statistical error of 2−40, the CRYPTO18 protocol would be 3 times the semi-
honest for a 31-bit ﬁeld, and 6 times the semi-honest for GF [28]. Since [8] does not
include an implementation for the protocol version for smaller ﬁelds, we only can
compare our protocol to it for a 61-bit ﬁeld.
29
We ran the experiment in two diﬀerent network latency conﬁgurations: 90ms
and 300ms. There are realistic latencies between mobile phones and clouds, and
the two conﬁgurations reﬂect distances to the cloud. For example, 90ms is the
latency of a mobile phone to a relatively close cloud (e.g., the latency from a
mobile phone in the Middle East to all European AWS clouds is below 90ms),
and 300ms is approximately the global latency. (In order to see this from your
phone and your location, run https://www.cloudping.info from your mobile
phone.)
The experiment is for the same 1,000,000 multiplication gate and depth-20
circuit above, over the Mersenne-31 ﬁeld. Each experiment was run 20 times, and
the result reported is the mean running time. The results appear in Table 3. The
running times reported are extremely realistic (albeit, not “real time”, but this is
not the expected application), and demonstrate for the ﬁrst time the viability of
running end-to-end MPC with a large number of mobiles running the execution.
Parties Conﬁguration
10 ARM a1.large
50 ARM a1.large
50 ARM a1.large and 50 servers c5.xlarge
10 ARM a1.large
50 ARM a1.large
50 ARM a1.large and 50 servers c5.xlarge
Network Latency Running Time
90ms
90ms
90ms
300ms
300ms
300ms
9.9
46.4
95.9
22.1
101.7
303.2
Table 3. Running times in seconds for a circuit of 1,000,000 multiplication gates and
depth-20 with a 31-bit Mersenne prime.
Acknowledgments
We thank Meital Levy for implementing the protocol, Lior Koskas for running
the experiments, and Shai Halevi for helpful comments. We thank Yifan Song
for pointing out an error in an earlier version of the paper.
References
1. T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara,
A. Watzman and O. Weinstein. Optimized Honest-Majority MPC for Malicious
Adversaries - Breaking the 1 Billion-Gate Per Second Barrier. In the IEEE S&P,
2017.
2. A. Barak, M. Hirt, L. Koskas and Y. Lindell. An End-to-End System for Large
Scale P2P MPC-as-a-Service and Low-Bandwidth MPC for Weak Participants.
In the 25th ACM CCS, pages 695-712, 2018.
3. Z. Beerliov´a-Trub´ıniov´a and M. Hirt. Perfectly-secure MPC with linear commu-
nication complexity. In TCC 2008, Springer (LNCS 4948), pages 213–230, 2008.
30
4. M. Ben-Or, S. Goldwasser and A. Wigderson. Completeness Theorems for Non-
Cryptographic Fault-Tolerant Distributed Computation. In 20th STOC, 1988.
5. R. Canetti. Security and Composition of Multiparty Cryptographic Protocols.
Journal of Cryptology, 13(1):143–202, 2000.
6. R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic
In 42nd FOCS, pages 136–145, 2001.
7. D. Chaum, C. Cr´epeau and I. Damg˚ard. Multi-party Unconditionally Secure
Protocols. In 20th STOC, pages 11–19, 1988.
8. K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell and A. Nof.
Fast Large-Scale Honest-Majority MPC for Malicious Adversaries. In CRYPTO
2018, Springer (LNCS 10993), pages 34–64, 2018.
9. R. Cramer, I. Damg˚ard and Y. Ishai, Share Conversion, Pseudorandom Secret-
Sharing and Applications to Secure Computation. In TCC, Springer (LNCS 3378)
pages 342–362, 2005.
10. I. Damg˚ard and J. Nielsen. Scalable and unconditionally secure multiparty com-
putation. In CRYPTO 2007, Springer (LNCS 4622), pages 572–590, 2007.
11. D. Evans, V. Kolesnikov and M. Rosulek. A Pragmatic Introduction to Secure
Multi-Party Computation. Foundations and Trends in Privacy and Security, 2(2-
3):70–246, 2018.
12. D. Genkin, Y. Ishai, M. Prabhakaran, A. Sahai and E. Tromer. Circuits Resilient
to Additive Attacks with Applications to Secure Computation. In STOC 2014,
2014.
13. D. Genkin, Y. Ishai and A. Polychroniadou. Eﬃcient Multi-party Computation:
From Passive to Active Security via Secure SIMD Circuits. In CRYPTO 2015.
14. O. Goldreich, S. Micali, and A. Wigderson. How to Play Any Mental Game. In
19th STOC, pages 218–229, 1987.
15. R. Gennaro, M. Rabin and T. Rabin. Simpliﬁed VSS and Fact-Track Multiparty
Computations with Applications to Threshold Cryptography. In 17th PODC,
1998.
16. O. Goldreich. Foundations of Cryptography: Volume 2 – Basic Applications, 2004.
17. S. Goldwasser and Y. Lindell. Secure Computation Without Agreement. In the
Journal of Cryptology, 18(3):247–287, 2005.
18. E. Kushilevitz, Y. Lindell and T. Rabin. Information-Theoretically Secure Pro-
tocols and Security Under Composition. In the SIAM Journal on Computing,
39(5):2090–2112, 2010.
19. Y. Lindell and A. Nof. A Framework for Constructing Fast MPC over Arithmetic
Circuits with Malicious Adversaries and an Honest-Majority. In the 24th ACM
CCS, pages 259–276, 2017. (References to exact protocol and theorem numbers are
from the exact version https://eprint.iacr.org/2017/816/20181212:105515.)
20. Y. Lindell and B. Pinkas. Secure Two-Party Computation via Cut-and-Choose
Oblivious Transfer. In the 8th TCC, Springer (LNCS 6597), 329–346, 2011.
21. J. Naor and M. Naor. Small-Bias Probability Spaces: Eﬃcient Constructions and
Applications. SIAM Journal on Computing, 22(4):838–856, 1993.
22. P.S. Nordholt and M. Veeningen. Minimising Communication in Honest-Majority
MPC by Batchwise Multiplication Veriﬁcation. In ACNS 2018, Springer (LNCS
10892), pages 321–339, 2018.
23. T. Rabin and M. Ben-Or. Veriﬁable Secret Sharing and Multi-party Protocols
with Honest Majority. In 21st STOC, pages 73–85, 1989.
24. A. Shamir. How to share a secret. CACM, 22(11), pages 612–613, 1979.
25. A. Yao. How to Generate and Exchange Secrets. 27th FOCS, pages 162–167,
1986.
31
Fig. 2. Comparison of protocols for a circuit of depth 20: HyperMPC refers to [2] and
CRYPTO18 refers to [8]. Our protocol is the PRF version.
32
Fig. 3. Comparison of protocols for a circuit of depth 100: HyperMPC refers to [2] and
CRYPTO18 refers to [8]. Our protocol is the PRF version.
33