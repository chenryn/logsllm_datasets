# Table 2: Computational Multiplication Protocol Version of Section 5.2

| Data Points | Values |
|-------------|--------|
| 760         |        |
| 640         |        |
| 840         |        |
| 1112        |        |
| 1366        |        |
| 1606        |        |
| 2417        |        |
| 3036        |        |
| 34          |        |
| 45          |        |
| 62          |        |
| 57          |        |
| 49          |        |
| 87          |        |
| 49          |        |
| 72          |        |
| 133         |        |
| 76          |        |
| 18.0%       |        |
| 12.1%       |        |
| 8.2%        |        |
| 8.9%        |        |
| 5.8%        |        |
| 7.8%        |        |
| 3.6%        |        |
| 4.5%        |        |
| 5.5%        |        |
| 2.5%        |        |
| 159         |        |
| 343         |        |
| 644         |        |
| 609         |        |
| 850         |        |
| 1056        |        |
| 1160        |        |
| 1528        |        |
| 1962        |        |
| 2262        |        |
| 14.8%       |        |
| 8.4%        |        |
| 15.3%       |        |
| 4.9%        |        |
| -1.2%       |        |
| 5.0%        |        |
| 15.1%       |        |
| 4.9%        |        |
| 18.8%       |        |
| 25.5%       |        |

## Figure 1: Graphic Comparison of All Protocol Versions
- **Y-Axis**: 
  - 3000
  - 2500
  - 2000
  - 1500
  - 1000
  - 500
  - 0
- **X-Axis**:
  - 10
  - 20
  - 30
  - 40
  - 50
  - 60
  - 70
  - 80
  - 90
  - 100
- **Legend**:
  - Malicious-IT
  - SemiHonest-IT
  - Malicious-PRF
  - SemiHonest-PRF

## 7.2 Experiment 2 – Comparison to Prior Work
In this experiment, we compared our new protocol to the protocols described in [2] and [8]. We used the more efficient PRF version of the protocol from Section 5.2. The protocol in [2], called HyperMPC, is designed for \( t < \frac{n}{3} \) and achieves perfect security, unlike our protocol which provides statistical security. The communication cost of HyperMPC is 13 field elements per multiplication gate, regardless of the field size. Our protocol, on the other hand, requires fewer than 3 elements per multiplication gate (plus additional additive costs), making it approximately 4 times faster than HyperMPC.

The protocol in [8], referred to as CRYPTO18, is designed for \( t < \frac{n}{2} \) and has a cost that is twice that of the semi-honest protocol for large fields, and even higher for smaller fields. Although our protocol is more efficient, it only achieves a weaker threshold of \( t < \frac{n}{3} \) compared to \( t < \frac{n}{2} \). The experiments were conducted on c5.xlarge instances on AWS in the EAST-US region, using a circuit with 1,000,000 multiplication gates and depths of 20 and 100. The results are presented in Figures 2 and 3 at the end of the paper.

It is noteworthy that in GF[28], the cost of HyperMPC and our protocol is nearly identical, despite our protocol having about a quarter of the communication. This suggests that in small fields, the low communication overhead in HyperMPC means that the number of communication rounds dominates the overall cost. In larger fields, however, the difference in running time becomes significant. Additionally, HyperMPC and CRYPTO18 have similar costs in large fields, as expected from their theoretical costs.

## 7.3 Experiment 3 – Results for Mobile Phone Executions
One of the key benefits of low-bandwidth protocols is enabling secure computation among many parties on weak devices. This was highlighted in [2], which constructed an end-to-end system. To demonstrate the suitability of our protocol for such settings, we ran the protocol on ARM machines and a mix of ARM machines and servers on AWS. We used the new AWS service for ARM machines with a1.large instances and c5.xlarge server instances. The specifications of the ARM a1.large machines include two Cortex A72 CPUs, a clock speed of 2.5GHz, and 4GB RAM. These CPUs are found in phones like the Huawei P9, Xiaomi Redmi Pro, and Samsung Galaxy C9 Pro (all released in 2016), though these phones have four Cortex A72 CPUs instead of two. This experiment demonstrates the feasibility of running MPC on simple mobile phones, indicating that high-end phones are not necessary.

We conducted the experiment under two different network latency configurations: 90ms and 300ms. These latencies are realistic between mobile phones and cloud services, with 90ms representing a relatively close cloud (e.g., from a mobile phone in the Middle East to European AWS clouds) and 300ms representing global latency. Each experiment was run 20 times, and the reported results are the mean running times. The results, shown in Table 3, are highly realistic and demonstrate the viability of running end-to-end MPC with a large number of mobile devices.

### Table 3: Running Times in Seconds for a Circuit of 1,000,000 Multiplication Gates and Depth-20 with a 31-bit Mersenne Prime

| Parties Configuration | Network Latency | Running Time (s) |
|-----------------------|-----------------|------------------|
| 10 ARM a1.large       | 90ms            | 9.9              |
| 50 ARM a1.large       | 90ms            | 46.4             |
| 50 ARM a1.large and 50 servers c5.xlarge | 90ms | 95.9 |
| 10 ARM a1.large       | 300ms           | 22.1             |
| 50 ARM a1.large       | 300ms           | 101.7            |
| 50 ARM a1.large and 50 servers c5.xlarge | 300ms | 303.2 |

## Acknowledgments
We thank Meital Levy for implementing the protocol, Lior Koskas for running the experiments, and Shai Halevi for his helpful comments. We also thank Yifan Song for pointing out an error in an earlier version of the paper.

## References
1. T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman, and O. Weinstein. Optimized Honest-Majority MPC for Malicious Adversaries - Breaking the 1 Billion-Gate Per Second Barrier. In the IEEE S&P, 2017.
2. A. Barak, M. Hirt, L. Koskas, and Y. Lindell. An End-to-End System for Large Scale P2P MPC-as-a-Service and Low-Bandwidth MPC for Weak Participants. In the 25th ACM CCS, pages 695-712, 2018.
3. Z. Beerliová-Trubíniová and M. Hirt. Perfectly-secure MPC with linear communication complexity. In TCC 2008, Springer (LNCS 4948), pages 213–230, 2008.
4. M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation. In 20th STOC, 1988.
5. R. Canetti. Security and Composition of Multiparty Cryptographic Protocols. Journal of Cryptology, 13(1):143–202, 2000.
6. R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In 42nd FOCS, pages 136–145, 2001.
7. D. Chaum, C. Crépeau, and I. Damgård. Multi-party Unconditionally Secure Protocols. In 20th STOC, pages 11–19, 1988.
8. K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell, and A. Nof. Fast Large-Scale Honest-Majority MPC for Malicious Adversaries. In CRYPTO 2018, Springer (LNCS 10993), pages 34–64, 2018.
9. R. Cramer, I. Damgård, and Y. Ishai. Share Conversion, Pseudorandom Secret-Sharing and Applications to Secure Computation. In TCC, Springer (LNCS 3378), pages 342–362, 2005.
10. I. Damgård and J. Nielsen. Scalable and unconditionally secure multiparty computation. In CRYPTO 2007, Springer (LNCS 4622), pages 572–590, 2007.
11. D. Evans, V. Kolesnikov, and M. Rosulek. A Pragmatic Introduction to Secure Multi-Party Computation. Foundations and Trends in Privacy and Security, 2(2-3):70–246, 2018.
12. D. Genkin, Y. Ishai, M. Prabhakaran, A. Sahai, and E. Tromer. Circuits Resilient to Additive Attacks with Applications to Secure Computation. In STOC 2014, 2014.
13. D. Genkin, Y. Ishai, and A. Polychroniadou. Efficient Multi-party Computation: From Passive to Active Security via Secure SIMD Circuits. In CRYPTO 2015.
14. O. Goldreich, S. Micali, and A. Wigderson. How to Play Any Mental Game. In 19th STOC, pages 218–229, 1987.
15. R. Gennaro, M. Rabin, and T. Rabin. Simplified VSS and Fast-Track Multiparty Computations with Applications to Threshold Cryptography. In 17th PODC, 1998.
16. O. Goldreich. Foundations of Cryptography: Volume 2 – Basic Applications, 2004.
17. S. Goldwasser and Y. Lindell. Secure Computation Without Agreement. In the Journal of Cryptology, 18(3):247–287, 2005.
18. E. Kushilevitz, Y. Lindell, and T. Rabin. Information-Theoretically Secure Protocols and Security Under Composition. In the SIAM Journal on Computing, 39(5):2090–2112, 2010.
19. Y. Lindell and A. Nof. A Framework for Constructing Fast MPC over Arithmetic Circuits with Malicious Adversaries and an Honest-Majority. In the 24th ACM CCS, pages 259–276, 2017. (References to exact protocol and theorem numbers are from the exact version https://eprint.iacr.org/2017/816/20181212:105515.)
20. Y. Lindell and B. Pinkas. Secure Two-Party Computation via Cut-and-Choose Oblivious Transfer. In the 8th TCC, Springer (LNCS 6597), pages 329–346, 2011.
21. J. Naor and M. Naor. Small-Bias Probability Spaces: Efficient Constructions and Applications. SIAM Journal on Computing, 22(4):838–856, 1993.
22. P.S. Nordholt and M. Veeningen. Minimising Communication in Honest-Majority MPC by Batchwise Multiplication Verification. In ACNS 2018, Springer (LNCS 10892), pages 321–339, 2018.
23. T. Rabin and M. Ben-Or. Verifiable Secret Sharing and Multi-party Protocols with Honest Majority. In 21st STOC, pages 73–85, 1989.
24. A. Shamir. How to share a secret. CACM, 22(11), pages 612–613, 1979.
25. A. Yao. How to Generate and Exchange Secrets. In 27th FOCS, pages 162–167, 1986.

## Figures
### Figure 2: Comparison of Protocols for a Circuit of Depth 20
- **HyperMPC** refers to [2]
- **CRYPTO18** refers to [8]
- **Our Protocol** is the PRF version

### Figure 3: Comparison of Protocols for a Circuit of Depth 100
- **HyperMPC** refers to [2]
- **CRYPTO18** refers to [8]
- **Our Protocol** is the PRF version