index that is assigned during implementation (i.e., enum). The
firmware stores a certain IE’s information in Global IE List
according to the index, and then, the Msg IE List uses the
indices to represent IEs contained in the message.
However, a few IEs used in the ESM protocol located
incorrect
indices in the Global IE List and they cause
mismatches, as shown in Table VII. For example, ESM
messages that contain Header compression configuration IE
references index of 457 for the IE. However,
the actual
index of the IE is 456 in the global list; the Control plane
only indication IE is located in 457, instead of Header
compression configuration IE. It leads to missing and un-
known mismatches in BASESPEC because the intended IE
(i.e., Header compression configuration) will be missing in
the message, and the unknown one (i.e., Control plane only
indication) will appear. Developers confuse these indices due
4We redacted the names because the bug is not patched yet by the vendor.
TABLE VII: Inconsistent indices of IEs in the ESM protocol that
appear in Msg IE List and in Global IE List.
IE name
Index in
Msg IE List
457
Header compression configuration
458
Control plane only indication
459
User data container
Release assistance indication
461
Extended protocol configuration options 456
460
Serving PLMN rate control
Index in
Global IE List
456
457
458
459
460
461
to the difficulties to correctly implement complex specifications
of the baseband. We found this bug because BASESPEC can
find mismatches from such inconsistency systematically.
E3: Forgotten imperative IEs in the RR protocol. Further,
we found that the Feature Indicator IE included in two RR
messages, IMMEDIATE ASSIGNMENT EXTENDED and IMMEDIATE
ASSIGNMENT REJECT, is not properly decoded in the current
baseband implementation. This is buggy because the imperative
IE is a mandatory field and should be handled. We found that
this field was only a placeholder for alignment, which is called
Spare half octet, in the old specification. However, from
v10.4.0 released in Oct. 2011, the field was changed into a
new imperative IE, named Feature Indicator. Nevertheless,
the firmware fails to reflect this change and leaves this field
without decoding. BASESPEC successfully detect this bug as
missing mismatches for imperative IEs, as listed in Table V.
E6: Stack overflow in the GMM protocol. We found that
the firmware has a stack buffer overflow in handling the GMM
protocol, which can lead to remote code execution. In particular,
the firmware accepts an LV-formatted IE called Allocated
P-TMSI for the P-TMSI reallocation command message, which
is a message in the GMM protocol. The length of this IE
is defined as a fixed size of 5 bytes in the specification.
However, we found that the firmware in fact permits a variable-
length input up to 255 bytes, from the mismatches reported
by BASESPEC. Then, we manually investigated its handler to
understand the implication of this broken compliance.
Consequently, we found that the handler is vulnerable to a
stack-based buffer overflow as shown in Figure 8. The developer
blindly assumes the IE’s length from the specification and
copies its data to a 5-byte fixed buffer; however, the size
can be larger than the one from the specification, up to 255
bytes. Notably, the get_ie_bytes function checks the lengths of
certain IEs, as shown in lines 20–24 in Figure 8. However, the
Allocated P-TMSI IE is not validated in the routine. Moreover,
this buffer is located at 52 bytes apart from the function’s return
address, and the firmware has no stack protection techniques
such as a stack canary. Therefore, attackers can hijack its
control by overwriting the return address, and they can execute
the arbitrary code using return-oriented programming [53].
We received an acknowledgement for the exploitability of this
vulnerability from the vendor. Further, we found that all models
except Model H and Model I are vulnerable. The two unaffected
models retrieve the IE in different ways, using a hard-coded
length of 5 bytes. Therefore, we can infer that this bug appeared
from the updates between Model G and Model H.
E8: Integer underflow in the EMM protocol. From the
BASESPEC’s false positives, we found that the decoder handles
the SECURITY MODE COMMAND message in the EMM protocol
exceptionally. In particular, BASESPEC reported four unknown
mismatches for the imperative IEs in the message. While
14
...
ALLOCATED_PTMSI_IDX);
char allocated_ptmsi[5];
...
get_IE_bytes(allocated_ptmsi,
1 // We arbitrarily named functions and variables
2 // because they are stripped in the firmware
3 void handle_ptmsi_rellocation()
4 {
5
6
7
8
9
10 }
11
12 void get_ie_bytes(char *buf, enum IE_IDX idx)
13 {
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29 }
// Get a value of the IE (Controllable)
value = get_ie_value(idx);
memcpy(buf, value, length);
// Check lengths for certain IEs
if(idx == PLMN_LIST_IDX && length > 45)
if(idx == LSA_ID_IDX && length > 3)
int length;
char *value;
length = 45;
length = 3;
// Get a length of the IE in the message (Controllable)
length = get_ie_length(idx);
Fig. 8: Code snippet of a stack buffer overflow vulnerability (E6)
investigating these results, we analyzed a caller of the decoder
function, and Figure 9 shows its code snippet. This function
specifies a body of a given message and calls the l3_decoder
function, which is the BASESPEC’s analysis target (Line 30).
Notably, this function specially handles an incoming message,
of which type is SECURITY MODE COMMAND (Lines 14–26); it
invokes the decoder function with additional fields as depicted
in Lines 5–11. We believe that the developers decided to reuse
an existing decoding routine for IEs to parse these fields (e.g.,
MAC). Therefore, they embedded these additional fields as an
IE form in the message structure, which result in unknown
mismatches. Although these mismatches are false positives, they
hint at the specialty of the SECURITY MODE COMMAND message,
which is worthwhile to analyze manually. Note that such
exceptional cases often involve misbehavior.
Interestingly, we noticed that the additional routine for the
SECURITY MODE COMMAND is vulnerable to an integer underflow
bug. This bug can cause a buffer overflow and even be exploited
for remote code execution. The function copies a part of
the message to a global buffer variable for later use, such
as MAC validation. The function copies "length - 5" bytes,
while limiting the maximum length to 38 bytes (Line 16).
However, because the length variable is defined as a short type,
"length - 5" can trigger underflow to a negative value. For
example, the value can be -1 if the length is 4, and it is passed
to the memcpy function (Line 22). Note that the memcpy function
assumes the given length as an unsigned short type; hence, it
would treat -1 as 0xffff. This makes it copy an abnormally
large data, which produces a buffer overflow. We found that
the overflowed data overwrites other variables including several
function pointers. Therefore, using this vulnerability, an attacker
can execute arbitrary code by overwriting the function pointers.
We also received acknowledgement for the exploitability of this
vulnerability from the vendor. We found that all the models
are affected by this vulnerability regardless of the build date.
IX. DISCUSSION
Automating bug discovery. Although BASESPEC automat-
ically identifies mismatches that are non-compliant with the
specification, it requires additional efforts to discover bugs: one
needs to analyze a few message handlers affected by the mis-
matches. This is because BASESPEC aims to pinpoint erroneous
points by comparing baseband implementation based on cellular
15
-> SECURITY_MODE_COMMAND:
// Figure out l3_body from msg
// e.g., msg->payload =
// [Header(1 byte)][MAC(4)][SEQ(1)][L3 Header(2)][L3 Body(n)]
//
//
//
//
char *l3_body;
if (msg->type == SECURITY_MODE_COMMAND) {
l3_body = [MAC][SEQ][L3 Header][L3 Body]
-> Others:
l3_body = [L3 Body]
1 // We arbitrarily named functions and variables
2 // because they are stripped in the firmware
3 void preprocess_emm(L3Msg *msg, short length)
4 {
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29 }
}
l3_body = msg->payload + 1;
l3_decoder(l3_body);
...
l3_body = msg->payload + 8;
}
else
else {
// memcpy triggers buffer overflow
// (e.g., if length == 4, length - 5 = 0xffff)
memcpy(global_buf, msg->payload + 5,
// length - 5 can be underflown (integer underflow)
if (length - 5 > 38)
memcpy(global_buf, msg->payload + 5 , 38);
(unsigned short) length - 5);
Fig. 9: Code snippet of a integer underflow bugs (E8)
specifications (§V). Meanwhile, BASESPEC can collaborate
with other promising techniques for full automation. From the
analysis points identified by BASESPEC, fuzzing strategies [16],
[52], [70] or hybrid analysis approaches [59], [68] can be
applied. Further, recent emulation-based approaches [42], [27],
[71] can co-operate with BASESPEC as well. We leave such
promising improvements as a future work.
Applicability of our approach. BASESPEC addresses and
leverages two natural characteristics of the baseband modem.
First, as a real-time embedded system, a baseband initializes its
memory layout in the booting procedure and has many interrupt
routines that indirectly call functions; this severely hinders
identifying the basic structures of the firmware. BASESPEC
addressed this challenge with two preprocessing techniques
(§IV-B). Second, as a network system, a baseband has a
message decoder that utilizes embedded message structures
to parse incoming messages. BASESPEC leverages this prop-
erty and extracts binary-embedded message structures for a
comparative analysis based on specifications (§IV-D). As other
baseband modems would share these properties, we believe that
BASESPEC’s approach can be applicable although it requires
considerable manual efforts for analyzing the firmware once.
In addition, BASESPEC currently supports standard L3
messages, but other cellular protocols can be analyzed similarly.
This is because by design, the protocol specifications should
describe every message structure for cellular protocols in
consistent forms [3]. These systematic forms allow BASESPEC
to automatically analyze these messages. Therefore, we believe
BASESPEC can be applied to other protocols that have well-
structured messages defined in ASN.1 or CSN.1, such as the
messages for the radio resource control protocol.
Towards other types of bugs. Firmware analysis for baseband
inherits the fundamental challenges of binary analysis. For
example, discovering service-related bugs such as bypassing
security channels [39] is extremely difficult. This is because
a baseband implements numerous cellular protocols that have
convoluted states; therefore, various stateful information should
be considered in the analysis. Moreover, building a reference
for logical bugs from the specifications is also not trivial [34],
[35], [10], [33], [8]. Therefore, we invite future research in this
field by introducing BASESPEC as an entry point. Although
BASESPEC currently cannot cover logical bugs, its ultimate
goal is to build such a model and discover logical bugs with a
comparative analysis.
X. RELATED WORK
A. Studies on cellular baseband software
A baseband processor in cellular devices plays an important
role in cellular communication. Thus, researchers have studied
the security of protocol implementations in a BP [47], [46], [63],
[64], [25], [15], [42]. Early stage of these approaches focused on
GSM networks, especially SMS or cell broadcast messages [47],
[46], [63]. Without directly analyzing the firmware of baseband,
these approaches implemented a fuzzer based on the SMS
message structure, and they found several memory-related bugs
that force the device to crash or behave abnormally.
Other studies [64], [25], [15] focused on analyzing baseband
firmware for layer 3 protocols. Weinmann [64] showed a
practical approach to analyze memory-related bugs in GSM
protocol stacks in baseband. Golde et al. [25] and Cama [15]
analyzed recent Exynos firmware utilizing memory dumps.
Notably, they discovered RCE 0-days and were rewarded at
Mobile Pwn2Own. Although these approaches yield promising
insights into baseband analysis, they have a limitation in that
they require the repetitive manual analysis. To address this
limitation, Maier et al. [42] recently proposed an emulation-
based analysis on the RRC/EMM protocols. To emulate
functions related to those protocols, they manually analyzed
MediaTek firmware and hooked all related functions. Then, they
ran a famous fuzzer, AFL++ [43], and found a heap overflow.
However, these studies also suffer from two fundamental
limitations as described in §III-A: 1) it is difficult to create an
oracle for identifying a bug, and 2) they are not applicable to di-
verse models/versions. BASESPEC overcomes these limitations
by leveraging a comparative analysis based on specifications
(§III-B). With a prototype of BASESPEC, we discovered many
erroneous cases including 2 0-days for RCE (§VII). Moreover,
BASESPEC is applicable to diverse models/versions (§VII-D).
Meanwhile, other studies focused on the AT interface of the
baseband [29], [44], [60], [37], [45]. Notably, Tian et al. [60]
conducted a comprehensive analysis on over 2,000 Android
devices across 11 vendors using firmware images and found
multiple bugs. Lastly, various studies provide useful insights for
reverse-engineering the baseband [65], [21], [28], [11], [69].
B. Studies on cellular network protocols
Numerous approaches rely on dynamic analysis for inspect-
ing over-the-air bugs on cellular networks, utilizing open-source
cellular stacks [26], [14], [48], [66] and low-cost software-
defined radios (SDRs) [22], [49]. These approaches do not
need to directly analyze baseband firmware; instead they need
a custom test-bed. By sending crafted messages to target
devices, they discovered several service-related bugs in the L3
protocols that affect service quality [51], [41] or leak private
information [56], [57]. Recent approaches [61], [54], [23], [39]
have attempted to minimize the manual efforts involved in
the dynamic analysis, leveraging abnormal messages. Some