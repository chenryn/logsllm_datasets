S-kerberos协议原理
参考文章
Kerberos协议的组成部分
第一次通信
第二次通信
第三次通信
Kerberos协议中的攻击分类
S-kerberos协议原理
参考文章
详解kerberos认证原理
内网渗透测试：Kerberos 协议& Kerberos 认证原理
学习过程主要是参考的第一篇文章，作者将认证的三个流程讲述的非常清楚，只不过中间有细微的错误，和笔误，所
以参考第二篇文章进行改正。
Kerberos协议的组成部分
客户端(Client)：发送请求的一方
服务端(Server)：接收请求的一方
密钥分发中心(Key Distribution Center，KDC)：密钥分发中心，默认安装在域控里，包括AS和TGS两部分。
认证服务器(Authentication Server，AS)：认证服务器。用于KDC对Client认证，生成TGT票据。
票据授予服务器(Ticket Granting Server，TGS)：票据授予服务器，用于KDC向Client和Server的临时密钥。
活动目录(Active Directory，AD)：活动目录，简称AD，用于存储用户、用户组、域相关的信息。
特权属证书(Privilege Attribute Certificate，PAC)：PAC包含客户端的权限信息，，如SID及所在的组。
第一次通信
为了获得能够用来访问服务端服务的票据，客户端首先需要来到KDC获得服务授予票据ST(Server Ticket)。由于客户端
是第一次访问KDC，此时KDC也不确定该客户端的身份，所以第一次通信的目的为KDC认证客户端身份，确认客户端是
一个可靠且拥有访问KDC权限的客户端，过程如下：
1. 域内某个客户端要访问域内某个服务，于是输入用户名和密码，此时客户端本机的Kerberos服务会向KDC的AS认证服务发送
一个AS_REQ认证请求，请求的凭据是使用Client的哈希值NTLM-Hash加密的时间戳以及Client-info、Server-info等数
据，以及一些其他信息。
2. KDC当中的AS(Authentication Server)接收请求后去活动目录(AD)中根据用户名查找是否存在该用户，如果存在用户则取出改用
户的NTLM-Hash，并对AS_REQ请求中加密的时间戳进行解密，如果解密成功，则证明客户端提供的密码正确，如果时间戳在
五分钟之内，则预认证成功。
3. 反之如果不存在该用户，则预认证失败。如果认证成功，AS会返回响应(AS_REP)给客户端，其中包含两部分内容：
第一部分内容称为TGT(Ticket Granting Ticket，票据授予票据)，客户端需要使用TGT去KDC中的TGS(票据授予中心)获取
访问网络服务所需的ST(Server Ticket，服务授予票据)。TGT中包含的内容有PAC，Client-info，当前时间戳，客户端
即将访问的TGS的Name，TGT的有效时间，以及用于Client和TGS之间通信的密钥Session_key(Client-
TGS_SessionKey，CT_SK)。整个TGT使用KDC的一个特定账户的NTLM-Hash进行加密，这个特定的账户就是域控生成时
自动生成的Krbtgt用户。
第二部分内容使用从AD中查询的客户端的NTLM-Hash进行加密，内容包括客户端即将访问的TGS的Name，TGT的有效时
间，一个当前时间戳，以及生成的CT_SK密钥。这一部分的加密时客户端的哈希，所以客户端获取响应之后可以将这一
部分数据进行解密，然后本地缓存此TGT和原始的CT_SK密钥。
至此，第一次通信完成。
第二次通信
此时的客户端收到了来自KDC(其实是AS)的响应，并获取到了其中的两部分内容。客户端会用自己的NTLM-Hash将第
二部分内容进行解密，分别获得时间戳，自己将要访问的TGS的信息，和用于与TGS通信时的密钥CT_SK。首先他会根
据时间戳判断该时间戳与自己发送请求时的时间之间的差值是否大于5分钟，如果大于五分钟则认为该AS是伪造的，
认证至此失败。如果时间戳合理，客户端便准备向TGS发起请求。其次请求的主要目的是为了获取能够访问目标网络
服务的ST(Server Ticket)。 在第二次通信请求中，客户端将携带三部分内容交给KDC中的TGS，第二次通信过程具体如
下所述：
客户端行为：
1. 客户端使用CT_SK加密时间戳、Client-info作为第一部分信息发送给TGS。
2. 客户端将自己想要访问的Server服务以明文的方式发送给KDC
3. 客户端将TGT作为第二部分内容发送给TGS，TGT的内容因为使用的是Krbtgt用户的NTLM-Hash加密，客户端无法解开，所以
原封不动发送。
4. 两部分组成的请求被称为TGS_REQ。
TGS行为：
1. 此时KDC中的TGS收到了来自客户端的请求。他首先根据客户端明文传输过来的Server服务IP查看当前kerberos系统中是否
存在可以被用户访问的该服务。如果不存在，认证失败结束，。如果存在，继续接下来的认证。
2. TGS使用Krbtgt用户的NTLM-Hash将TGT中的内容进行解密，此时他看到了经过AS认证过后并记录的用户信息，CT_SK，还有
时间戳信息，他会现根据时间戳判断此次通信是否真是可靠有无超出时延。
3. 如果时延正常，则TGS会使用CT_SK对客户端的第一部分内容进行解密（使用CT_SK加密的客户端信息），取出其中的用户信
息和TGT中的用户信息进行比对，如果全部相同则认为客户端身份正确。
4. 此时KDC将返回响应给客户端，响应(TGS_REP)内容包括：
第一部分：用于客户端访问网络服务的使用ST(Servre Ticket，当然这个ST使用的应该是服务端的NTLM-Hash进行加
密），内容包括Client-info，Server-info，ST的有效时间，时间戳以及用于客户端和服务端之间通信的密钥
(Client-Server_SessionKey，CS_SK)。
第二部分：使用CT_SK加密的内容，其中包括CS_SK和时间戳，还有ST的有效时间。由于在第一次通信的过程中，客户
端解密并缓存了CT_SK所以该部分内容在客户端接收到时是可以自己解密的。
至此，第二次通信完成。
第三次通信
此时的客户端收到了来自TGS的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中的ST是由服
务端的NTLM-Hash进行加密，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请
求。
客户端：
1. 客户端使用CS_SK将自己的主机信息和时间戳进行加密作为交给服务端的第一部分内容，然后将ST作为第二部分内容都发送
给服务端。
服务端：
1. 服务器此时收到了来自客户端的请求，他会使用自己的NTLM-Hash将客户端第二部分内容进行解密，核对时间戳之后将其中
的CS_SK取出，使用CS_SK将客户端发来的第一部分内容进行解密，从而获得经过TGS认证过后的客户端信息，此时他将这部
分信息和客户端第二部分内容带来的自己的信息进行比对，最终确认该客户端就是经过了KDC认证的具有真实身份的客户
端，是他可以提供服务的客户端。此时服务端返回一段使用CS_SK加密的表示接收请求的响应给客户端，在客户端收到请求
之后，使用缓存在本地的CS_SK解密之后也确定了服务端的身份（其实服务端在通信的过程中还会使用数字证书证明自己身
份）。
至此，第三次通信完成。此时也代表着整个kerberos认证的完成，通信的双方都确认了对方的身份，此时便可以放心
的进行整个网络通信了。
Kerberos协议中的攻击分类
1. AS_REQ&AS_REP阶段：
域内用户枚举
密码喷洒
AS-REP Roasting攻击
黄金票据
2. TGS_REQ&TGS_REP阶段：
Kerberosast攻击
白银票据
委派攻击：
非约束委派
S4U协议：
约束委派
基于资源的约束委派
3. PAC安全问题：
MS14068
CVE-2021-42278&CVE-2021042287(NoPac)