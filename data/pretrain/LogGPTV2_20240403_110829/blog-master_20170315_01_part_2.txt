```
vi test.sql
select nextval('seq') from generate_series(1,100000);
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 100
tps = 6.671587 (including connections establishing)
tps = 6.675305 (excluding connections establishing)
66.7万/s
```
瓶颈
```
    24.25%  postgres  postgres            [.] LWLockWaitListLock.lto_priv.1132
            |
            --- LWLockWaitListLock.lto_priv.1132
     8.07%  postgres  postgres            [.] LWLockAcquire.constprop.859
            |
            --- LWLockAcquire.constprop.859
     6.38%  postgres  postgres            [.] LWLockDequeueSelf.lto_priv.1133
            |
            --- LWLockDequeueSelf.lto_priv.1133
```
8\. 多个序列(nocache)，64个客户端，每个客户端，每次取多条
```
vi test.sql
\set id random(0,63)
select nextval('seq_'||:id) from generate_series(1,100000);
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 100
tps = 15.196673 (including connections establishing)
tps = 15.206898 (excluding connections establishing)
152万/s
```
瓶颈
```
pgbench分配的随机值不够均匀，可能导致冲突依旧存在，因此性能并没有上去多少。
如果使用更多的序列，可以看到无冲突情况下，多并发取值的效果。
```
9\. 单个序列(cache)，64个客户端，每个客户端，每次取一条
```
postgres=# alter sequence seq cache 100000;
ALTER SEQUENCE
vi test.sql
select nextval('seq');
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 64 -j 64 -T 100
tps = 1323611.827976 (including connections establishing)
tps = 1324468.027166 (excluding connections establishing)
132万/s
```
瓶颈
```
    10.06%  postgres  postgres               [.] s_lock
     8.31%  postgres  postgres               [.] GetSnapshotData
     2.87%  postgres  postgres               [.] AllocSetAlloc.lto_priv.1064
     2.03%  postgres  postgres               [.] LWLockRelease
```
10\. 多个序列(cache)，64个客户端，每个客户端，每次取一条
```
postgres=# do language plpgsql     
declare
begin
  for i in 0..63 loop
    execute 'alter sequence seq_'||i||' cache 100000';
  end loop;
end;
    ;
tps = 1286465.725029 (including connections establishing)
tps = 1287261.097736 (excluding connections establishing)
128万/s
```
11\. 单个序列(cache)，64个客户端，每个客户端，每次取多条
```
tps = 455.050231 (including connections establishing)
tps = 455.313609 (excluding connections establishing)
4550万/s
```
瓶颈
```
     6.20%  postgres  postgres            [.] int8out
     5.44%  postgres  postgres            [.] SearchCatCache
     5.38%  postgres  libc-2.12.so        [.] memcpy
     4.04%  postgres  postgres            [.] AllocSetAlloc.lto_priv.1064
     3.95%  postgres  postgres            [.] printtup.lto_priv.1769
```
12\. 多个序列(cache)，64个客户端，每个客户端，每次取多条
```
tps = 260.329785 (including connections establishing)
tps = 260.488070 (excluding connections establishing)
2603万/s
```
瓶颈
```
nextval属于volatile函数，||拼接序列名，带来了操作符的开销
     7.31%  postgres  postgres              [.] SearchCatCache
     6.55%  postgres  postgres              [.] AllocSetAlloc.lto_priv.1064
     3.20%  postgres  libc-2.12.so          [.] __strlen_sse42
     3.13%  postgres  postgres              [.] ExecMakeFunctionResultNoSets
     3.06%  postgres  postgres              [.] nocachegetattr
```
## 小结
如果需要较为正确的perf诊断，PG的编译参数要改一下。  
[《PostgreSQL 源码性能诊断(perf profiling)指南》](../201611/20161129_01.md)  
1\. 序列的cache是会话层级的，例如一次cache 100个序列值，那么一次会消耗100，如果会话退出，这100个没有被用完的序列值也会被消耗掉。
cache的好处是减少锁冲突。
如果你不能用cache，那么可以用多个序列来解决锁冲突的问题。
如果需要并轨，只需要将多个序列的步长设为一样，同时起始值错开即可并轨。
2\. 单个序列值，并发批量取序列值，如何提升性能？
设置cache
3\. 并发单步取序列值，不允许cache的情况下，如何提升性能？
使用多个序列，每个会话对应一个序列，多个序列要求步长一致，起始值不一致即可。
4\. 从上面的测试情况来看，理论上多个序列的性能应该更好，但是测试使用了```||```来拼接出序列名，带来了额外的开销，所以性能并未体现有些。
以单序列，批量并行取序列值的最好成绩来估算，每秒生成4550万自增值，那么一天可以生成3.9万亿个自增值，你想让它成为瓶颈都难。
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")