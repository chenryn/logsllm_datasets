G´erard Boudol. Secure information ﬂow as a safety property. In
Pierpaolo Degano, Joshua D. Guttman, and Fabio Martinelli,
editors, Formal Aspects in Security and Trust, volume 5491
of Lecture Notes in Computer Science, pages 20–34. Springer,
2008.
Deepak Chandra and Michael Franz. Fine-grained information ﬂow
analysis and enforcement in a java virtual machine. pages 463–
475, Dec. 2007.
Stephen Chong and Andrew C. Myers. Security policies for down-
In CCS ’04: Proceedings of the 11th ACM confer-
grading.
ence on Computer and communications security, pages 198–
209, New York, NY, USA, 2004. ACM.
Dorothy E. Denning. A lattice model of secure information ﬂow.
Communications of the ACM, 19(5):236–243, 1976.
Dorothy E. Denning and Peter J. Denning. Certiﬁcation of pro-
grams for secure information ﬂow. Communications of the ACM,
20(7):504–513, 1977.
Brendan Eich.
on
able
mozilla/source/js/narcissus/.
the web
Narcissus–JS implemented in JS.
Avail-
http://mxr.mozilla.org/
at
J. S. Fenton. Memoryless subsystems. The Computer Journal, 17
(2):143–147, 1974.
Robert Bruce Findler. Behavioral Software Contracts. PhD thesis,
Rice University, 2002.
C´edric Fournet and Tamara Rezk. Cryptographically sound im-
In Sympo-
plementations for typed information-ﬂow security.
sium on Principles of Programming Languages, pages 323–335,
2008.
Andreas Gal, Brendan Eich, Mike Shaver, David Anderson, Blake
Kaplan, Graydon Hoare, David Mandelin, Boris Zbarsky, Jason
Orendorff, Michael Bebenita, Mason Chang, Michael Franz, Ed-
win Smith, Rick Reitmaier, and Mohammad Haghighat. Trace-
based just-in-time type specialization for dynamic languages. In
Conference on Programming Language Design and Implemen-
tation, 2009.
Joseph A. Goguen and Jose Meseguer. Security policies and se-
curity models. IEEE Symposium on Security and Privacy, 0:11,
1982.
Kathryn E. Gray, Robert Bruce Findler, and Matthew Flatt. Fine-
grained interoperability through mirrors and contracts. In OOP-
SLA ’05: Proceedings of the 20th annual ACM SIGPLAN confer-
ence on Object-oriented programming, systems, languages, and
applications, pages 231–245, 2005.
Vivek Haldar, Deepak Chandra, and Michael Franz. Dynamic
In ACSAC, pages 303–311. IEEE
taint propagation for java.
Computer Society, 2005.
Nevin Heintze and Jon G. Riecke. The slam calculus: Programming
In Symposium on Principles of
with secrecy and integrity.
Programming Languages, pages 365–377, 1998.
Dave King, Boniface Hicks, Michael Hicks, and Trent Jaeger. Im-
plicit ﬂows: Can’t live with ’em, can’t live without ’em. In In-
ternational Conference on Information Systems Security, pages
56–70, 2008.
Monica S. Lam, Michael Martin, V. Benjamin Livshits, and John
Whaley. Securing web applications with static and dynamic
information ﬂow tracking. In Robert Gl¨uck and Oege de Moor,
editors, ACM SIGPLAN Workshop on Partial Evaluation and
Program Manipulation, pages 3–12. ACM, 2008.
Gurvan Le Guernic, Anindya Banerjee, Thomas Jensen, and David
Schmidt. Automata-based conﬁdentiality monitoring. 2006.
URL http://hal.inria.fr/inria-00130210/en/.
Pasquale Malacaria and Han Chen. Lagrange multipliers and max-
imum information leakage in different observational models.
In ACM SIGPLAN Workshop on Programming Languages and
Analysis for Security, pages 135–146, 2008.
John McLean. Proving noninterference and functional correctness
using traces. Journal of Computer Security, 1(1):37–58, 1992.
Andrew C. Myers. Jﬂow: Practical mostly-static information ﬂow
In Symposium on Principles of Programming Lan-
control.
guages, pages 228–241, 1999.
Andrew C. Myers and Barbara Liskov. A decentralized model for
information ﬂow control. In Symposium on Operating System
Principles, pages 129–142, 1997.
Kevin R. O’Neill, Michael R. Clarkson, and Stephen Chong.
In IEEE
Information-ﬂow security for interactive programs.
Computer Security Foundations Workshop, pages 190–201.
IEEE Computer Society, 2006.
Franc¸ois Pottier and Vincent Simonet. Information ﬂow inference
for ml. Transactions on Programming Languages and Systems,
25(1):117–158, 2003.
Andrei Sabelfeld and Andrew C. Myers.
Language-based
information-ﬂow security. Selected Areas in Communications,
IEEE Journal on, 21(1):5–19, Jan 2003.
Tachio Terauchi and Alexander Aiken. Secure information ﬂow as
a safety problem.
In Chris Hankin and Igor Siveroni, editors,
SAS, volume 3672 of Lecture Notes in Computer Science, pages
352–367. Springer, 2005.
V. N. Venkatakrishnan, Wei Xu, Daniel C. DuVarney, and R. Sekar.
Provably correct runtime enforcement of non-interference prop-
erties. In Information and Communications Security, pages 332–
351, 2006.
Philipp Vogt, Florian Nentwich, Nenad
Jovanovic, En-
and Giovanni Vi-
Cross site scripting prevention with dynamic data
URL
gin Kirda, Christopher Kruegel,
gna.
tainting and static analysis.
February 2007.
http://www.infosys.tuwien.ac.at/Staff/ek/
papers/xss prevention.pdf.
Dennis Volpano, Cynthia Irvine, and Geoffrey Smith. A sound type
system for secure ﬂow analysis. Journal of Computer Security,
4(2-3):167–187, 1996.
Stephan Arthur Zdancewic. Programming languages for informa-
tion security. PhD thesis, Ithaca, NY, USA, 2002. Chair-Myers,,
Andrew.
Lantian Zheng and Andrew C. Myers. Securing nonintrusive web
encryption through information ﬂow. In ACM SIGPLAN Work-
shop on Programming Languages and Analysis for Security,
pages 125–134, 2008.
A. Non-Interference for Sparse Labeling
RESTATEMENT OF THEOREM 2 (Non-Interference for Sparse
Labeling). If
σ1 ≈H σ2
θ1 ∼pc
H θ2
σ1, θ1, e ↓pc σ(cid:48)
σ2, θ2, e ↓pc σ(cid:48)
1 ≈H σ(cid:48)
σ(cid:48)
v1 ∼pc
2
H v2
1, v1
2, v2
then
PROOF By induction on the derivation σ1, θ1, e ↓pc σ(cid:48)
and case analysis on the last rule used in that derivation.
1, v1
Note that any derivation via the [S-APP] rule can be de-
rived via the [S-APP-SLOW] rule, and similarly for the other
[. . . -SLOW] rules, and so we assume without loss of general-
ity that both evaluations are via the [. . . -SLOW] rules when-
ever possible.
• [S-CONST]: Then e = c and σ(cid:48)
v1 = v2 = c.
• [S-VAR]: Then e = x and σ(cid:48)
v1 = θ1(x) ∼pc
H θ2(x) = v2.
• [S-FUN]: Then e = λx.e(cid:48) and σ(cid:48)
v1 = (λx.e(cid:48), θ1) ∼pc
• [S-APP-SLOW]: In this case, e = (ea eb), and from the
antecedents of this rule, we have that for i ∈ 1, 2:
1 = σ1 ≈H σ2 = σ(cid:48)
1 = σ1 ≈H σ2 = σ(cid:48)
1 = σ1 ≈H σ2 = σ(cid:48)
H (λx.e(cid:48), θ2) = v2.
2 and
2 and
2 and
σi, θi, ea ↓pc σ(cid:48)(cid:48)
i , θi, eb ↓pc σ(cid:48)(cid:48)(cid:48)
σ(cid:48)(cid:48)
σ(cid:48)(cid:48)(cid:48)
i , θ(cid:48)
i, ei[x := v(cid:48)
vi = (cid:104)ki(cid:105)pc v(cid:48)(cid:48)
i
i , (λx.ei, θ(cid:48)
i)ki
i , v(cid:48)
i] ↓pc(cid:116)ki σ(cid:48)
i, v(cid:48)(cid:48)
i
i
By induction:
1 ≈H σ(cid:48)(cid:48)
σ(cid:48)(cid:48)
1 ≈H σ(cid:48)(cid:48)(cid:48)
σ(cid:48)(cid:48)(cid:48)
(λx.e1c)k1 ∼pc
1 ∼pc
H v(cid:48)
v(cid:48)
2
2
2
H (λx.e2c)k2
2 ≈H σ(cid:48)
1 ≈H σ(cid:48)(cid:48)(cid:48)
If k1 and k2 are both at least H (with respect to pc)
then v1 ∼pc
H v2, since they both have label at least H.
By Lemma 10, σ(cid:48)
2, and we
need to conclude that σ(cid:48)
We know that dom(σ(cid:48)
i ), since execution
only allocates additional reference cells. Without loss
of generality, we assume that the two executions allo-
cate reference cells from disjoint parts of the address
space,3 i.e.:
1 ≈H σ(cid:48)(cid:48)(cid:48)
1 ≈H σ(cid:48)
2.
i) ⊇ dom(σ(cid:48)(cid:48)(cid:48)
(dom(σ(cid:48)
i) \ dom(σ(cid:48)(cid:48)(cid:48)
i )) ∩ dom(σ(cid:48)
2−i) = ∅
3 We refer the interested reader to [Banerjee and Naumann 2002] for an
alternative proof argument that does use of this assumption, but which
involves a more complicated compatibility relation on stores.
2 are also the common addresses in σ(cid:48)(cid:48)(cid:48)
Under this assumption, the only common addresses in
σ(cid:48)
1 and σ(cid:48)
1 and
σ(cid:48)(cid:48)(cid:48)
2 , and hence we have that σ(cid:48)
If k1 and k2 are not both at least H (with respect
to pc), then θ(cid:48)
2 and e1 = e2 and k1 = k2.
By induction, σ(cid:48)
2 and v(cid:48)(cid:48)
2 , and hence
1 ∼pc
v(cid:48)
1 ∼pc
H θ(cid:48)
1 ≈H σ(cid:48)
1 ≈H σ(cid:48)
2.
1 ∼pc
H v(cid:48)(cid:48)
H v(cid:48)
2.
• [S-PRIM-SLOW]: This case holds via a similar argument.
• [S-REF]: In this case, e = ref e(cid:48). Without loss of gener-
ality, we assume that both evaluation allocate at the same
address a (cid:54)∈ dom(σ1) ∪ dom(σ2), and so a = v1 = v2.
From the antecedents of this rule, we have that for i ∈
1, 2:
σi, θi, e(cid:48) ↓pc σ(cid:48)(cid:48)
i , v(cid:48)
i [a := v(cid:48)
σ(cid:48)
i = σ(cid:48)(cid:48)
i]
1 ≈H σ(cid:48)(cid:48)
1 ∼pc
H v(cid:48)
2 and v(cid:48)
i
1 ≈H
By induction, σ(cid:48)(cid:48)
σ(cid:48)
2 as label(a) = pc.
• [S-DEREF-SLOW]: In this case, e = !e(cid:48), and from the
antecedents of this rule, we have that for i ∈ 1, 2:
2, and so σ(cid:48)
σi, θi, e ↓pc σ(cid:48)
vi = (cid:104)ki(cid:105)pc σ(cid:48)
i
i, aki
i(ai)
1 ∼pc
By induction, σ(cid:48)
1 ≈H σ(cid:48)
2 and ak1
H ak2
2 .
If k1 and k2 are both at least H (wrt pc), then v1 ∼pc
v2, since they both have label at least H (wrt pc).
Otherwise, a1 = a2 and k1 = k2 and σ(cid:48)
σ(cid:48)
2(a). By Lemma 9,
1(a) ∼k1
H σ(cid:48)
Lemma 7, σ(cid:48)
1(a) ∼label(a)
label(a) (cid:118) k1, and so by
2(a). By Lemma 8, v1 ∼pc
H v2.
• [S-ASSIGN-SLOW] In this case, e = (ea:= eb), and from
the antecedents of this rule, we have that for i ∈ 1, 2:
H
H
i , aki
i
i , vi
σi, θi, ea ↓pc σ(cid:48)(cid:48)
i , θi, eb ↓pc σ(cid:48)(cid:48)(cid:48)
σ(cid:48)(cid:48)
mi = label(ai)
(pc (cid:116) ki) (cid:118) label mi(σ(cid:48)(cid:48)(cid:48)
σ(cid:48)
i = σ(cid:48)(cid:48)(cid:48)
i (ai))
i [ai := (cid:104)pc (cid:116) ki(cid:105)mi vi]
2
2
2
By induction:
1 ≈H σ(cid:48)(cid:48)
σ(cid:48)(cid:48)
1 ∼pc
H ak2
ak1
2 then let l = m1 = m2. By Lemma 8,
H (cid:104)pc(cid:105)l v2, and hence σ(cid:48)
2 from the
1 ≈H σ(cid:48)(cid:48)(cid:48)
σ(cid:48)(cid:48)(cid:48)
v1 ∼pc
H v2
1 = ak2
If ak1
(cid:104)pc(cid:105)l v1 ∼l
above.
Otherwise H (cid:118) ki (cid:118) label mi(σ(cid:48)(cid:48)(cid:48)
1 ≈H σ(cid:48)
σ(cid:48)
2.
i (ai)). Hence
1 ≈H σ(cid:48)