$SHELL: /bin/sh
$PATH: /usr/bin:/bin
```
如果没有设置相关的环境变量，会造成如 $PATH 问题导致的命令找不到.
可以在 cron 配置文件顶部加上:
```
SHELL=/bin/bash
PATH=/usr/bin:/bin:/sbin:/usr/sbin
*/5 * * * * root ./run.sh >/dev/null 2>&1
```
**/etc/rc.local**
在文件末尾 (exit 0 之前) 加上你开机需要启动的程序或执行的命令即可 (执行的程序需要写绝对路径,添加到系统环境变量的除外) ,如
**/etc/profile.d/**
将写好的脚本 (.sh 文件) 放到目录 `/etc/profile.d/` 下,系统启动后就会自动执行该目录下的所有 shell 脚本
**at**
> 在特定的时间执行一次性的任务
```bash
at now +1 minutes
echo "test" > test.txt
atq		# 列出用户的计划任务,如果是超级用户将列出所有用户的任务,结果的输出格式为:作业号、日期、小时、队列和用户名
atrm	# 根据 Job number 删除 at 任务
```
#### SELinux
**查看 SELinux 状态**
```bash
getenforce							# 查看 selinux 状态
/usr/sbin/sestatus					# 查看安全策略
```
**关闭 SELinux**
- 需要重启
	```vim
	vim /etc/selinux/config
	SELINUX=disabled
	```
- 不需要重启
	`setenforce 0`
---
### 账号管控
**用户**
```bash
id									# 显示真实有效的用户 ID(UID)和组 ID(GID)
	id -un
whoami								# 当前用户
cut -d: -f1 /etc/passwd				# 查看系统所有用户
useradd 					# 创建用户
useradd -d /home/ -s /sbin/nologin 		# 创建用户并指定家目录和 shell
passwd 					# 设置用户密码
userdel 					# 只删除用户不删除家目录
userdel -r 				# 同时删除家目录
userdel -f 				# 强制删除,即使用户还在登录中
usermod -g  	# 修改用户的主组
usermod -G  	# 修改用户的附加组
usermod -s /bin/bash 		# 修改用户登录的 Shell
usermod -L   				# 锁定用户
usermod -U  				# 解锁用户
chage								# 修改帐号和密码的有效期限
	chage -l 				# 查看一下用户密码状态
	chage -d 				# 把密码修改曰期归零了,这样用户一登录就要修改密码
passwd								# 配置 su 密码
	passwd -l   			# 锁定用户
	passwd -u   			# 解锁用户
su 						# 切换账号
su -                      # 切换账号并改变工作目录至使用者的家目录
compgen -c                  		# 列出所有可用的命令
ulimit								# 查看、设置、获取文件打开的状态和配置详情
	ulimit -a                   	# 显示登录用户的资源限制
	ulimit -n 						# 显示打开文件数限制
	ulimit -c 						# 显示核心转储文件大小
	ulimit -u 						# 显示登录用户的最大用户进程数限制
	ulimit -f 						# 显示用户可以拥有的最大文件大小
	ulimit -m 						# 显示登录用户的最大内存大小
	ulimit -v 						# 显示最大内存大小限制
```
**组**
```bash
groups								# 当前组
groupadd 				# 创建组
groupadd  		# 移动用户到组
newgrp 					# 创建组
```
**权限**
```bash
chown named.named 		# 将文件给指定用户及组
chmod  				# 给文件权限
# 用户 rwx、组 rwx、其他用户 rwx  4.2.1 分别代表读,写,执行
	chmod 777 
	chmod o=rw 				# 代表只给其他用户分配读写权限
	chmod u=rw,g=r,o= 
	chown -R u+x 			# 对文件夹及其子目录所有文件的所有者增加执行权限
	chmod u+s test_file				# 给文件增加 SUID 属性
	chmod g+s test_dir     			# 给目录增加 SGID 属性
	chmod o+t test_dir     			# 给目录增加 Sticky 属性
chgrp				# 改变文件或目录所属的用户组
	chgrp user1 file.txt			# Change the owning group of the file file.txt to the group named user1.
	chgrp -hR staff /office/files	# Change the owning group of /office/files, and all subdirectories, to the group staff.
umask 002			# 配置反码,代表创建文件权限是 664 即 rw-rw-r--,默认 0022(重启后消失)
# umask 值 002 所对应的文件和目录创建缺省权限分别为 6 6 4 和 7 7 5
# 需要长期修改,可以直接改 vim /etc/profile 中 umask 值
chattr				# 可修改文件的多种特殊属性
	chattr +i 				# 增加后,使文件不能被删除、重命名、设定链接接、写入、新增数据
	chattr +a 				# 增加该属性后,只能追加不能删除,非root用户不能设定该属性
	chattr +c 				# 自动压缩该文件,读取时会自动解压.Note: This attribute has no effect in the ext2, ext3, and ext4 filesystems.
lsattr 		# 该命令用来读取文件或者目录的特殊权限
```
```bash
visudo	# 加 sudo 权限
user1 ALL=(ALL)     ALL
```
加 sudo 权限(仅限 Ubuntu)
```bash
adduser user1 sudo	# 将 user1 加到 sudo 组中
deluser user1 sudo	# 将 user1 从 sudo 组中删除
```
```bash
sudo -v 			# 查看 sudo 信息
sudo -l 			# 查看当前权限
```
**ACL**
```bash
setfacl -m u:apache:rwx 	# 配置 ACL
getfacl 					# 查看 ACL 权限
setfacl -b 				# 删除 ACL
```
关于 linux 的账号和认证更多内容参考笔记 [认证](./笔记/认证.md)
---
### 进程管理
**服务管理**
- service
	```bash
	# 控制系统服务的实用工具
	service  status/start/restart/stop
	```
- systemctl
	```bash
	# 系统服务管理器指令
	systemctl enable crond.service	# 让某个服务开机自启(.service 可以省略)
	systemctl disable crond			# 不让开机自启
	systemctl status crond			# 查看服务状态
	systemctl start crond			# 启动某个服务
	systemctl stop crond			# 停止某个服务
	systemctl restart crond			# 重启某个服务
	systemctl reload *				# 重新加载服务配置文件
	systemctl is-enabled crond		# 查询服务是否开机启动
	```
- chkconfig
	从 CentOS7 开始,CentOS 的服务管理工具由 SysV 改为了 systemd,但即使是在 CentOS7 里,也依然可以使用 chkconfig 这个原本出现在 SysV 里的命令.
	```bash
	# 检查、设置系统的各种服务
	chkconfig --list		# 列出所有的系统服务
	chkconfig --add httpd	# 增加 httpd 服务
	chkconfig --del httpd	# 删除 httpd 服务
	chkconfig --level httpd 2345 on	# 设置 httpd 在运行级别为 2、3、4、5 的情况下都是 on(开启)的状态,另外如果不传入参数 --level,则默认针对级别 2/3/4/5 操作.
	```
**监视进程**
- ps
	```bash
	# 查看进程
	ps -l 			# 长格式显示详细的信息
	ps -a 			# 显示一个终端的所有进程，除会话引线外
	ps -A 			# 显示所有进程信息
	ps -u root 		# 指定用户的所有进程信息
	ps -e 			# 显示所有进程信息
	ps aux 			# 查看系统中所有的进程显示所有包含其他使用者的行程
	ps -axjf 		# 以程序树的方式显示
	ps -eLf 		# 显示线程信息
	ps -ef | grep queue | grep -v grep | wc -l # 查找含有 queue 关键词的进程（-v 去掉 grep 本身），输出找到的进程数量。
	ps -aux | awk '$2~/S/ {print $0}' #统计 sleep 状态的进程
	ps aux | grep root	# 查看 root 运行的程序
	ps -ef | grep root	# 查看 root 运行的程序
	```
```bash
jobs	    # 显示 Linux 中的任务列表及任务状态
	jobs -l		    # 显示进程号
	kill %1			# 表示杀掉1号作业任务
	fg %1			# 表示让1号作业回到前台
	bg %1			# 转后台运行
pidof program	    # 找出 program 程序的进程 PID
pidof -x script     # 找出 shell 脚本 script 的进程 PID
top					# 实时动态地查看系统的整体运行情况
free
free -h				# 显示当前系统未使用的和已使用的内存数目
vmstat 1			# 显示虚拟内存状态
ps					# 报告当前系统的进程状态
	ps -aux			# 显示现在所有用户所有程序
	# 由于ps命令能够支持的系统类型相当的多,所以选项多的离谱,这里略
pidstat -u -p ALL	# 查看所有进程的 CPU 使用情况
watch 		# 以周期性的方式执行给定的指令,指令输出以全屏方式显示.
	-n : 指定指令执行的间隔时间(秒);
	-d : 高亮显示指令输出信息不同之处;
	-t : 不显示标题.
```
**进程处理**
- kill
	```bash
	# 杀死进程
	kill -s 							# 删除执行中的程序或工作
		kill -l								# 显示信号
		kill -HUP 						# 更改配置而不需停止并重新启动服务
		kill -9  && kill -KILL 	# 信号(SIGKILL)无条件终止进程
	killall 							# 使用进程的名称来杀死进程
	```
- pkill
	```bash
	# pkill 用于杀死一个进程，与 kill 不同的是它会杀死指定名字的所有进程
	pkill -9 php-fpm	# 结束所有的 php-fpm 进程
	```
```bash
ctrl+z	# 将前台运行的任务暂停,仅仅是暂停,而不是将任务终止.
bg		# 转后台运行
fg		# 转前台运行
```
```bash
cmdline
# 在Linux系统中,根据进程号得到进程的命令行参数,常规的做法是读取 /proc/{PID}/cmdline,并用'\0'分割其中的字符串得到进程的 args[],例如下面这个例子:
	# xxd /proc/7771/cmdline
	0000000: 2f69 746f 612f 6170 702f 6d61 7665 2f62  /itoa/app/mave/b
	0000010: 696e 2f6d 6176 6500 2d70 002f 6974 6f61  in/mave.-p./itoa
	0000020: 2f61 7070 2f6d 6176 6500                 /app/mave.
	通过分割其中的 0x00(C 语言字符串结束符),可以把这个进程 args[],解析出来:
	args[0]=/itoa/app/mave/bin/mave
	args[1]=-p
	args[2]=/itoa/app/mave
```
**不挂断地运行命令**
- nohup
	```bash
	# nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令, 忽略所有挂断 (SIGHUP) 信号. 在注销后使用 nohup 命令运行后台中的程序. 要运行后台中的 nohup 命令, 添加 & ( 表示 "and" 的符号)到命令的尾部.
	nohup [COMMAND] &			# 使命令永久的在后台执行
	# e.g.
		sh test.sh &		# 将 sh test.sh 任务放到后台 , 关闭 xshell, 对应的任务也跟着停止.
		nohup sh test.sh	# 将 sh test.sh 任务放到后台, 关闭标准输入, 终端不再能够接收任何输入(标准输入), 重定向标准输出和标准错误到当前目录下的 nohup.out 文件, 即使关闭 xshell 退出当前 session 依然继续运行.
		nohup sh test.sh  &	# 将 sh test.sh 任务放到后台, 但是依然可以使用标准输入, 终端能够接收任何输入, 重定向标准输出和标准错误到当前目录下的 nohup.out 文件, 即使关闭 xshell 退出当前 session 依然继续运行.
	```
- setsid
	```bash
	# setsid 主要是重新创建一个 session,子进程从父进程继承了 SessionID、进程组 ID 和打开的终端,子进程如果要脱离父进程,不受父进程控制,我们可以用这个 setsid 命令
		setsid [options]  [arguments ...]
			e.g. : setsid ping baidu.com	# setsid 后子进程不受终端影响,终端退出,不影响子进程
			# 别急,  ps -ef | grep ping ,找到 PID kill 相应的 PID 就可以关掉了😂
	```
- disown
	```bash
	# 使作业忽略 HUP 信号
	disown [-h] [-ar] [jobspec ... | pid ...]
		# 示例1,如果提交命令时已经用"&"将命令放入后台运行,则可以直接使用"disown"
		ping www.baidu.com &
		jobs
		disown -h %1
		ps -ef |grep ping
		# 示例2,如果提交命令时未使用"&"将命令放入后台运行,可使用 CTRL-z 和"bg"将其放入后台,再使用"disown"
		ping www.baidu.com
		bg %1
		jobs
		disown -h %1
		ps -ef |grep ping
	```
更多进程管理内容参考笔记 [进程](./笔记/进程.md)
---
### 内核管理
**rmmod**
用于从当前运行的内核中移除指定的内核模块。执行 rmmod 指令，可删除不需要的模块。
```bash
rmmod [options] [arguments ...]
# 选项释义
	# -v：显示指令执行的详细信息；
	# -f：强制移除模块，使用此选项比较危险；
	# -w：等待着，直到模块能够被除时在移除模块；
	# -s：向系统日志（syslog）发送错误信息。
# e.g.
	lsmod | grep raid1
	rmmod raid1			# 卸载正在使用的Linux内核模块
	# 警告 : 在你不确定这个内核模块是干什么的之前,不要卸载
```
**dmesg**
dmesg 可用于找出内核最新消息中的错误和警告
```bash
dmesg | less
```
**nmi_watchdog**
“看门狗NMI中断”的机制。（NMI：Non Maskable Interrupt. 这种中断即使在系统被锁住时，也能被响应）。这种机制可以被用来调试内核锁住现象。通过周期性地执行NMI中断，内核能够监测到是否有CPU被锁住。当有处理器被锁住时，打印调试信息。
```bash
echo '0' >/proc/sys/kernel/nmi_watchdog 			# 关闭linux 看门狗
echo 'kernel.nmi_watchdog=0' >>/etc/sysctl.conf   	# 重启自动关闭
```
---
### 设备管理
更多内容见笔记 [信息](./笔记/信息.md#硬件)
#### 内存
**虚拟内存**
```bash
free -h	# 查看 swap 分区
vmstat
swapon -s
```
如果机器没有安装 swap 分区可以自己分配一个
```bash
# 创建一个 swap 文件, 大小为 1G
dd if=/dev/zero of=/home/f8xswap bs=1M count=1024
# 将文件格式转换为 swap 格式的
mkswap /home/f8xswap
# 把这个文件分区挂载 swap 分区
swapon /home/f8xswap
```
长期挂载
```
echo "/home/f8xswap swap swap default 0 0" >> /etc/fstab