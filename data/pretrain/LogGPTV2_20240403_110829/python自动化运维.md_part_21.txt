10.1.1 业务环境说明
为了方便读者理解，笔者通过虚拟化环境部署了两组业务功能服务器来进行
演示，操作系统版本为CentOS release 6.4，自带Python 2.6.6。相关服务器信息如
表10-1所示（CPU核数及Nginx根目录的差异化是为方便演示生成动态配置的需
要）。
表10-1 环境说明表
10.1.2 安装EPEL
由于目前RHEL官网yum源还没有Saltstack的安装包支持，因此先安装EPEL作
为部署Saltstack的默认yum源。
·RHEL（CentOS）5版本：rpm-Uvh下载地址：
http://mirror.pnl.gov/epel/5/i386/epel-release-5-4.noarch.rpm
·RHEL（CentOS）6版本：rpm-Uvh下载地址：
http://ftp.linux.ncsu.edu/pub/epel/6/i386/epel-release-6-8.noarch.rpm
10.1.3 安装Saltstack
（1）主服务器安装（主控端）
#yum install salt-master -y
#chkconfig salt-master on
#service salt-master start
（2）从服务器安装（被控端）
#yum install salt-minion -y
#chkconfig salt-minion on
#service salt-minion start
10.1.4 Saltstack防火墙配置
在主控端添加TCP 4505、TCP 4506的规则，而在被控端无须配置防火墙，原
理是被控端直接与主控端的zeromq建立长链接，接收广播到的任务信息并执
行，具体操作是添加两条iptables规则：
iptables -I INPUT -m state --state new -m tcp -p tcp --dport 4505 -j ACCEPT
iptables -I INPUT -m state --state new -m tcp -p tcp --dport 4506 -j ACCEPT
10.1.5 更新Saltstack配置及安装校验
Saltstack分两种角色，一种为master（主控端），另一种为minion（被控
端），安装完毕后需要对两种角色的配置文件进行修改，下面具体说明。
（1）master主控端配置
1）更新主控端关键项配置：
【/etc/salt/master】
#绑定Master通信IP；
interface： 192.168.1.20
#自动认证，避免手动运行salt-key来确认证书信任；
auto_accept： True
#指定Saltstack文件根目录位置
file_roots：
base：
- /srv/salt
2）重启saltstack salt-master服务使新配置生效，具体执行以下命令：
#service salt-master restart
（2）minion被控端配置
1）更新被控端关键项配置：
【/etc/salt/minion】
#指定master主机IP地址
master： 192.168.1.20
#修改被控端主机识别id，建议使用操作系统主机名来配置
id： SN2013-08-021
2）重启saltstack salt-minion服务使新配置生效，具体执行以下命令：
service salt-minion restart
（3）校验安装结果
通过test模块的ping方法，可以确认指定被控端设备与主控端是否建立信任关
系及连通性是否正常，探测所有被控端采用'*'来代替'SN2013-08-021'即可，具体
如图10-1所示。
图10-1 测试安装主机的连通性
提示 当/etc/salt/master没有配置auto_accept：True时，需要通过salt-
key命令来进行证书认证操作，具体操作如下：
·salt-key–L，显示已经或未认证的被控端id，Accepted Keys为已认证清
单，Unaccepted Keys为未认证清单；
·salt-key–D，删除所有认证主机id证书；
·salt-key-d id，删除单个id证书；
·salt-key–A，接受所有id证书请求；
·salt-key-a id，接受单个id证书请求。
10.2 利用Saltstack远程执行命令
Saltstack的一个比较突出优势是具备执行远程命令的功能，操作及方法与
func（https://fedorahosted.org/func/）相似，可以帮助运维人员完成集中化的操作
平台。
命令格式：salt''[参数]
示例：查看被控主机的内存使用情况，如图10-2所示。
图10-2 查看“SN2013-08-021”主机内存使用
其中针对，Saltstack提供了多种方法对被控端主机（id）进行过
滤。下面列举常用的具体参数。
1）-E，--pcre，通过正则表达式进行匹配。示例：控测SN2013字符开头的主
机id名是否连通，命令：salt-E'^SN2013.*'test.ping，运行结果如图10-3所示。
图10-3 正则匹配主机的连通性
2）-L，--list，以主机id名列表的形式进行过滤，格式与Python的列表相似，
即不同主机id名称使用逗号分隔。示例：获取主机id名为SN2013-08-021、
SN2013-08-022；获取完整操作系统发行版名称，命令：salt-L'SN2013-08-
021，SN2013-08-022'grains.item osfullname，运行结果如图10-4所示。
图10-4 列表形式匹配主机的操作系统类型
3）-G，--grain，根据被控主机的grains（10.4节详解）信息进行匹配过滤，
格式为'：'，例如，过滤内核为Linux的主机可以写
成'kernel：Linux'，如果同时需要正则表达式的支持可切换成--grain-pcre参数来
执行。示例：获取主机发行版本号为6.4的Python版本号，命令：salt-
G'osrelease：6.4'cmd.run'python-V'，运行结果如图10-5所示。
图10-5 grain形式匹配主机的Python版本
4）-I，--pillar，根据被控主机的pillar（10.5节详解）信息进行匹配过滤，格
式为“对象名称：对象值”，例如，过滤所有具备'apache：httpd'pillar值的主机。
示例：探测具有“nginx：root：/data”信息的主机连通性，命令：salt-I'nginx：
root：/data'test.ping，运行结果如图10-6所示。
图10-6 pillar形式匹配主机的连通性
其中pillar属性配置文件如下（关于pillar后面10.5单独进行说明）：
nginx：
root： /data
5）-N，--nodegroup，根据主控端master配置文件中的分组名称进行过滤。
以笔者定义的组为例（主机信息支持正则表达式、grain、条件运算符等），通
常根据业务类型划分，不同业务具备相同的特点，包括部署环境、应用平台、
配置文件等。举例分组配置信息如下：
【/etc/salt/master】
nodegroups：
web1group： 'L@SN2012-07-010，SN2012-07-011，SN2012-07-012'
web2group： 'L@SN2013-08-021，SN2013-08-022'
其中，L@表示后面的主机id格式为列表，即主机id以逗号分隔；G@表示以
grain格式描述；S@表示以IP子网或地址格式描述。
示例：探测web2group被控主机的连通性，其命令为：salt-N web2group
test.ping，运行结果如图10-7所示。
图10-7 分组形式（nodegroup）匹配主机的连通性
6）-C，--compound，根据条件运算符not、and、or去匹配不同规则的主机信
息。示例：探测SN2013开头并且操作系统版本为CentOS的主机连通性，命令如
下：
salt -C 'E@^SN2013.* and G@os：Centos' test.ping
其中，not语句不能作为第一个条件执行，不过可以通过以下方法来规避，
示例：探测非SN2013开头的主机连通性，其命令为：salt-C'*and not
E@^SN2013.*'test.ping。
7）-S，--ipcidr，根据被控主机的IP地址或IP子网进行匹配，示例如下：
salt -S 192.168.0.0/16 test.ping
salt -S 192.168.1.10 test.ping
10.3 Saltstack常用模块及API
Saltstack提供了非常丰富的功能模块，涉及操作系统的基础功能、常用工具
支持等，更多模块信息见官网模块介绍：
http://docs.saltstack.com/ref/modules/all/index.html。当然，也可以通过sys模块列
出当前版本支持的模块，如图10-8所示。
图10-8 所有主机Saltstack支持的模块清单（部分截图）
接下来抽取出常见的模块进行介绍，同时也会列举模块API使用方法。API
的原理是通过调用master client模块，实例化一个LocalClient对象，再调用
cmd（）方法来实现的。以下是API实现test.ping的示例：
import salt.client
client = salt.client.LocalClient（）
ret = client.cmd（'*'， 'test.ping'）
print ret
结果以一个标准的Python字典形式的字符串返回，可以通过eval（）函数转
换成Python的字典类型，方便后续的业务逻辑处理，程序运行结果如下：
{'SN2013-08-022'： True， 'SN2013-08-021'： True}
提示 将字符字典转换成Python的字典类型，推荐使用ast模块的
literal_eval（）方法，可以过滤表达式中的恶意函数。
（1）Archive模块
1）功能：实现系统层面的压缩包调用，支持gunzip、gzip、rar、tar、unrar、
unzip等。
2）示例：
#采用gzunzip解压/tmp/sourcefile.txt.gz包
salt '*' archive.gunzip /tmp/sourcefile.txt.gz
#采用gzip压缩/tmp/sourcefile.txt文件
salt '*' archive.gzip /tmp/sourcefile.txt
3）API调用：
client.cmd（'*'， ' archive.gunzip'，['/tmp/sourcefile.txt.gz ']）
（2）cmd模块
1）功能：实现远程的命令行调用执行（默认具备root操作权限，使用时需评
估风险）。
2）示例：
#获取所有被控主机的内存使用情况
salt '*' cmd.run "free -m"
#在SN2013-08-021主机运行test.sh脚本，其中script/test.sh存放在file_roots指定的目录，
#该命令会做两个动作：首先同步test.sh到minion的cache目录（如同步
到/var/cache/salt/ #minion/files/base/script/test.sh）；其次运行该脚本
'SN2013-08-021' cmd.script salt：//script/test.sh
3）API调用：
client.cmd（'SN2013-08-021'， 'cmd.run'，['free -m']）
（3）cp模块
1）功能：实现远程文件、目录的复制，以及下载URL文件等操作。
2）示例：
#将指定被控主机的/etc/hosts文件复制到被控主机本地的salt cache目录
（/var/cache/salt/minion/localfiles/）；
salt '*' cp.cache_local_file /etc/hosts
#将主服务器file_roots指定位置下的目录复制到被控主机
salt '*' cp.get_dir salt：//path/to/dir/ /minion/dest
#将主服务器file_roots指定位置下的文件复制到被控主机
salt '*' cp.get_file salt：//path/to/file /minion/dest
#下载URL内容到被控主机指定位置
salt '*' cp.get_url http：//www.slashdot.org /tmp/index.html
3）API调用：
client.cmd（'SN2013-08-021'， 'cp.get_file'，
[' salt：//path/to/file '，' /minion/dest']）
（4）cron模块
1）功能：实现被控主机的crontab操作。
2）示例：
#查看指定被控主机、root用户的crontab清单
salt 'SN2013-08-022' cron.raw_cron root
#为指定的被控主机、root用户添加/usr/local/weekly任务作业
salt 'SN2013-08-022' cron.set_job root '*' '*' '*' '*' 1 /usr/local/weekly
#删除指定的被控主机、root用户crontab的/usr/local/weekly任务作业
salt 'SN2013-08-022' cron.rm_job root /usr/local/weekly
3）API调用：
client.cmd（'SN2013-08-021'， 'cron.set_job'，
['root'，'*'，'*'，'*'，'*'，'*'，'/usr/echo']）
（5）dnsutil模块
1）功能：实现被控主机通用DNS相关操作。
2）示例：
#添加指定被控主机hosts的主机配置项
salt '*' dnsutil.hosts_append /etc/hosts 127.0.0.1 ad1.yuk.com，ad2.yuk.com
#删除指定被控主机hosts的主机配置项
salt '*' dnsutil.hosts_remove /etc/hosts ad1.yuk.com
3）API调用：
client.cmd（'*'， 'dnsutil.hosts_append'，
['/etc/hosts'，'127.0.0.1'，'ad1.yuk.co']）
（6）file模块
1）功能：被控主机文件常见操作，包括文件读写、权限、查找、校验等。
2）示例：
#校验所有被控主机/etc/fstab文件的md5是否为6254e84e2f6ffa54e0c8d9cb230f5505，一致则
返回True
salt '*' file.check_hash /etc/fstab md5=6254e84e2f6ffa54e0c8d9cb230f5505
#校验所有被控主机文件的加密信息、支持md5、sha1、sha224、sha256、sha384、sha512加密算法
salt '*' file.get_sum /etc/passwd md5
#修改所有被控主机/etc/passwd文件的属组、用户权限，等价于chown root：root /etc/passwd
salt '*' file.chown /etc/passwd root root
#复制所有被控主机本地/path/to/src文件到本地的/path/to/dst文件
salt '*' file.copy /path/to/src /path/to/dst
#检查所有被控主机/etc目录是否存在，存在则返回True，检查文件是否存在使用file.file_exists方
法
salt '*' file.directory_exists /etc
#获取所有被控主机/etc/passwd的stats信息
salt '*' file.stats /etc/passwd
#获取所有被控主机/etc/passwd的权限mode，如755、644
salt '*' file.get_mode /etc/passwd
#修改所有被控主机/etc/passwd的权限mode为0644
salt '*' file.set_mode /etc/passwd 0644
#在所有被控主机创建/opt/test目录
salt '*' file.mkdir /opt/test
#将所有被控主机/etc/httpd/httpd.conf文件的LogLevel参数的warn值修改成info
salt '*' file.sed /etc/httpd/httpd.conf 'LogLevel warn' 'LogLevel info'
#给所有被控主机的/tmp/test/test.conf文件追加内容"maxclient 100"
salt '*' file.append /tmp/test/test.conf "maxclient 100"
#删除所有被控主机的/tmp/foo文件
salt '*' file.remove /tmp/foo
3）API调用：
client.cmd（'*'， ' file.remove '，['/tmp/foo']）
（7）iptables模块
1）功能：被控主机iptables支持。
2）示例：
#在所有被控端主机追加（append）、插入（insert）iptables规则，其中INPUT为输入链
salt '*' iptables.append filter INPUT rule='-m state --
state RELATED，ESTABLISHED -j ACCEPT'
salt '*' iptables.insert filter INPUT position=3 rule='-m state --
state RELATED，ESTABLISHED -j ACCEPT'
#在所有被控端主机删除指定链编号为3（position=3）或指定存在的规则
salt '*' iptables.delete filter INPUT position=3
salt '*' iptables.delete filter INPUT rule='-m state --
state RELATED，ESTABLISHED -j ACCEPT'
#保存所有被控端主机规则到本地硬盘（/etc/sysconfig/iptables）
salt '*' iptables.save /etc/sysconfig/iptables
3）API调用：
client.cmd（'SN2013-08-022'， 'iptables.append'，['filter'，'INPUT'，'rule=\'-
p tcp --sport 80 -j ACCEPT\'']）
（8）netwrok模块
1）功能：返回被控主机网络信息。