3.跨站脚本攻击(XSS) Cross-Site Scripting（必考！）
术语“跨站点脚本(Cross-Site Scripting，XSS)”指的是利用一个 Web 站点的脆弱性，
在 Web 应用程序中注入恶意代码的攻击。攻击者(用客户端脚本语言，如 JavaScript)把他们
的恶意代码注入到网页中。随后，不知情的用户在访问这个站点时，恶意代码就会在他们的浏
览器中执行，这样可能会导致 Cookies 被盗、会话被劫持、恶意代码被执行和访问控制被绕
过，或者有助于利用浏览器的错落性。XSS 攻击的关键在于将恶意代码写入 Web 站点。一般是
在一个有返回结果的表单网页里，输入带标记的字段，服务器收到表单内容就会运行
里面的恶意代码了。XSS 有三种类型：
①非永久/非持久性 XSS (NonpersistentXSS)，也叫反映漏洞/反射脆弱性，出现在攻击
者欺骗受害者处理一个用流氓脚本来编程的 URL，从而偷取受害者敏感信息(cookie，会话 ID
等)的时候。这个攻击的原理是利用动态网站上缺少适当的输入或者输出确证。（就是返回一
个有恶意代码的 URL 给用户点击）
②永久/持久性 XSS(PersistentXSS)，也叫二阶漏洞，也称为存储或者第二顺序脆弱性，
通常针对的是那些让用户输入存储在数据库或其他任何地方(如论坛、留言板、意见簿等)的数
据的网站。攻击者张贴一些包含恶意 JavaScript 的文本，在其他用户浏览这些帖子时，它们
的浏览器会呈现这个页面并执行攻击者的 JavaScript。（就是把恶意代码存入网站）
③基于文档对象模型/DOM 型(Document Object Model based XSS )。也叫本地跨站点脚
本。DOM 是标准结构布局，代表着浏览器中的 HTML 和 XML。在这样的攻击中，像表单字段和
cookie 这样的文档组件可以通过 JavaScript 被引用。攻击者利用 DOM 环境来修改最初的客户
端 JavaScript。这使受害者的浏览器执行由此而导致的 JavaScript 代码。
4. SQL 注入攻击 Injection（必考！）
SQL 注入攻击比 XSS 更加危险，它同样是向 Web 应用程序输入带特殊字符的表单字段，只
是它的目的不是欺骗用户，而是访问数据库。在动态网页中，经常会让用户输入附录密码、查
询关键字等表单内容，然后发送给数据库进行查询或比对。如果把输入的字段加一些特殊字符，
就可以让 SQL 语言执行额外的操作，从而进入数据库。比如：正解的输入密码是“123456”；
要想注入就输入“123456'；XXXXX WHERE 'a' = 'a”，那么数据库会执行 2 条正常的 SQL 语
言了。
可以通过下列三种技术来防范：
①执行输入验证。与跨站脚本攻击的防御方法一样，输入验证操作能够限制用户在表单中
输入的数据类型。
②限制用户特权。Web 服务器使用的数据库账户应当具有尽可能最小的权限。
③利用数据库存储过程来限制应用程序执行任意代码的能力。存储过程就是：SQL 语句已
经编写并封装好了，驻留在数据库服务器，仅可由数据库管理员修改；Web 应用程序则调用各
种现成的存储过程来运行，不直接通过 SQL 语句来访问数据库。
5.侦察攻击/网络侦察扫描 Reconnaissance Attacks
目的就是找 IP、端口和漏洞。搞渗透测试必须技能，工具软件一大堆，著名的有 Nmap、
Nessus，OpenVAS 什么的，应该都玩过。
—251—
6.伪装攻击 Masquerading Attacks
①IP 欺骗 IP Spoofing
很简单，防范方法是在每个网络的边缘配置过滤程序，确保数据包满足以下标准：
*内部 IP 地址的包不能从外网进入。
*外部 IP 地址的包不能从内网出去。
*私有 IP 地址的包不能过路由器。
②会话劫持 Session Hijacking
会话劫持攻击指的是攻击者中途拦截己授权用户与资源之间的通信数据，然后使用劫持技
术接管这个会话并伪装成己授权用户的身份。如：
*捕获客户端与服务器之间身份验证的详细信息，并使用这些信息伪装成客户端的身份。
*欺骗客户端，使其认为攻击者的系统是与之通信的服务器，并在客户端与服务器建立合
法连接的时候作为中间人（代理），断开服务器与客户端的连接。
*使用没有正常关闭连接的用户的 cookie 数据访问 Web 应用程序。
7.内存重用（客体重用）
内存被重新分配后，要清空被覆写。
其它还有：陷门/后门/维护钩子等，好多。
五、软件保护机制（必考）
1.可信计算基
将安全内核和引用监视器关联在一起的术语是可信计算基(TCB)。TCB 是计算机系统内所
有硬件，软件和固件的集合（组合体），它包含了该系统负责支持安全策略和对象隔离的所有
元素。当 TCB 被启用后，该系统被认为具有可信路径并带有可信 shell。可信路径是在用户或
程序与 TCB 之间的通信信道。TCB 负责提供需要的保护机制确保可信路径不能以任何方式受到
破坏。可信 shell 意味着任何 shell 或通信信道内发生的活动，与信道隔离并且不能由不可行
方或实体，无论是从内部还是外部进行交互。
TCB 的特性有：
*实施主体对客体的安全访问功能；
*抗篡改的性质；
*易于分析与测试的结构；
*安全保护能力主要取决于 TCB；
*基于 TPM 实现机密性，不管可用性。
①引用监视器 Reference Monitro
引用监控器/基准监视器，是一个抽象概念，但也可能有一个引用验证器，它通常运行在
安全内核的内部并负责执行对对象的安全访问检查，操作权限，和生成任何的安全审计结果消
息。换句话说，引用监控器被认为是一个抽象机器，其调解或控制，主体(用户)对客体(数据
或资源)的所有访问。引用监控器采取行动以保证任何主体试图访问任何客体都要有适当的权
限这样做，以便保护客体不受不良角色未授权访问的企图。安全内核真正地实现了引用监控器
的概念。
—252—
引用监视器的任务：
根据访问控制数据库，对主体对客体的访问请示做出是否允许的裁决，并将该请示记录到
审计数据库中。注意：引用监视器有动态维护访问控制库的能力。
引用监视器的特性：
执行主体到对象所有访问的抽象的机器；
必须执行所有验证策略，能够在修改中被保护，能够恢复正常，并且总是被调用；
处理所有主体到客体抽象机。
引用监视器必须满足的 3 个条件：
隔离、完整性、可验证。
You need Isolation, because it can’t be of public access, the less access the
better. It must have a sense of completeness to provide the whole information and
process cycles. It must be veriable, to provide security, audit and accounting
functions.
②安全内核 Security Kernel
负责实施系统安全策略的软件和硬件的组合体。
安全内核是由所有的 TCB(软件，硬件，和固件)组件构成且它负责建立和执行引用监控器。
安全内核负责执行安全策略。它是一个引用监控器机制严格的实现。内核操作系统的架构通常
是分层的，并且内核应该在最低且最原始的水平。它是操作系统的一小部分，所有对信息的引
用和所有授权的改变都必须通过它执行。内核实现根据安全策略建立的对象之间的访问控制和
信息流控制。为了安全，内核必须满足 RM 三个基本条件（和引用监控器的要求一样）：
*完整性：所有对信息的访问，必须经过内核
*隔离：内核本身必须防止任何类型的未授权访问
*可验证性：内核必须被证明符合设计规范
TCB 中使用的产品的安全能力可以通过各种评价标准进行验证，如较早的可信计算机系统
评价标准(TCSEC)和当前的通用准则标准。
③处理器特权状态
处理器特权状态保护处理器和它执行的活动。最早的实现的方法是在一个寄存器中记录处
理器的状态，只有当处理器在特权状态下操作时才能改变它。像 I/O 之类的指令请求被设计为
包含一个对这个寄存器的引用。如果寄存器不是在特权状态，指令就被终止。例如，intel 处
理器防止对系统代码和数据的覆盖，尽管这些保护很少被直接使用。特权机制应防止从较低特
权到更高特权的内存访问(程序或数据)，但只有当控制被调用且在软件中适当地管理时。特权
级别通常参考环结构。为了说明这一点，许多操作系统使用两种处理器的访问模式：
*用户模式(或进程、问题、程序)
*内核模式(或特权、监管)
用户应用程序代码运行在用户模式，并且操作系统代码运行在内核模式。特权的处理器模
式被称为内核模式。内核模式允许处理器访问所有的系统内存，资源，和 CPU 指令。
应用程序代码应在非特权模式(用户模式)运行并且有一个受限的可用接口，受限的系统数
据访问，并且不能直接访问硬件资源。操作系统有比应用软件更高的特权级的一个优点是出问
—253—
题的应用软件不能破坏系统的运作。当一个用户模式的程序调用系统服务(例如从存储中读一
个文档)，处理器缓存这个调用并将这个调用请求切换到内核模式。当这个调用完成后，操作
系统把调用切换回用户模式，并允许用户模式程序继续运行。在最高安全操作策略下，操作系
统和设备驱动程序运行在 0 环级，也称为内核级或系统级特权。在这个特权级，程序可以做什
么没用限制。因为在这个级别的程序访问不受限制，用户应该关注包含敏感信息的机器上设备
驱动程序的来源。应用和服务应该工作在环 3 级，也被称为用户级或应用级特权。需要注意的
是，如果一个这个级别上的应用或服务失败，一个捕获屏幕将出现(也称为一般性保护错误)，
其可以被关闭且操作系统并不关心。把服务和常规的应用运行在相同特权级的决定是基于这样
的思想，如果服务被捕获，操作系统应该继续操作。
④缓冲区溢出的安全控制
不当的边界检查导致恶意输入到程序；必须由程序员更正或直接打系统内补丁。所以，输
入的参数必须要检查合规，操作系统也要提供缓冲区管理机制，如进程隔离和内存保护。
另一个与特权状态相关的问题被称为无效的参数检查，这导致了缓冲区溢出。一个缓冲区
是由对程序的输入不正确(或缺乏)边界检查造成的。本质上，程序未能发现给一个分配的内存
空间的数据是否太多。因为当程序运行的时候被加载到内存，当溢出发生时，数据必须去某些
地方。如果那些数据恰好是被加载的可执行恶意代码，它可以像那个程序一样运行，或对运行
环境做出其他改变，其可被攻击者利用。缓冲区溢出必须由程序员或通过直接打内存补丁修正。
它们可以被检测到并修正，通过逆向过程(反汇编程序)并检查应用的操作。硬件状态和其它硬
件控制能使缓冲区溢出变得不可能，虽然企业很少指定此级别的硬件。边界强制和正确的错误
检查也将停止缓冲区。
⑤中断
可以实现进程隔离。计算机内的进程必须互相隔离的需求必须被管理，以确保它有效地和
全面地发生，没有例外。操作系统就是这样的程序，它的执行确保进程隔离发生并且它与 CPU
共同通过中断和时间分片的使用来执行进程隔离。中断的使用允许操作系统确保一个进程被给
予充足的访问 CPU 的时间，当需要执行它所需的功能时，但它也确保进程不会停留过久的欢迎
且锁定其它进程的执行需要的资源。
中断是单片机实时地更紧密地处理外部事件的一种内部机制。“没有中断就没有操作系
统”。中断处理的时刻一定是在一条指令执行结束，转入下一操作时（准备处理另一个程序了）。
中断的处理：发现中断请求，指令控制器中止正在运行的程序，保存该程序的运行现场（当前
状态）；根据中断信号从待定位置启动中断处理程序（操作系统提供）处理中断；处理完了恢
复前面的程序或者处理下一个中断请求。中断的产生：各种软硬件的中断信号。
为了执行进程隔离的概念，操作系统可以使用以下任何一种方式：
*对象封装，可隐蔽其内部工作流程和数据。
*共享资源的时分复用，允许操作系统，以提供结构化的访问需要根据一个严格管理的时
间表使用资源的进程。
*命名区分，每进程被分配唯一的标识即进程 ID，或 PID。
*虚拟地址映射，不直接访问物理内存。
⑥内存管理器
—254—
最重要的就是运用上面讲的虚拟地址映射。
它是操作系统用来跟踪不同类型的内存是如何被使用，分配和释放进程运行需要的不同类
型的内存，强制访问控制以确保进程只能与它们自己的内存段交互，并在需要时，管理 RAM 中
的内存内容交换到硬盘。有五个职责：
*重定位：当需要时，在 RAM 和硬盘之间移动或交换内容并给应用提供指针，如果它们的
信息己经被移动到内存中的不同位置。
*保护：提供内存段的访问控制并且限制应用只能与分配给它们的内存段交互。
*共享：使用共享内存段，允许有不同访问级别的多个用户与一个应用或进程交互，同时
在进程之间运行和执行完整性和机密性控制。
*逻辑组织：所有类型的内存分段管理，在一个抽象的水平提供一个寻址方案，并允许共
享像 DLL 程序那样的软件模块。
*物理组织：为了分配内存，分段所有的物理内存空间。
内存管理过程还有一个附加部分需要讨论，即寄存器的使用。寄存器允许操作系统确认一
个进程只能与内存管理器分配给它的已定义的内存段交互。CPU 使用两种类型的寄存器来识别
内存地址：
*一个基寄存器用来标识分配给进程的开始地址
*一个限制寄存器用来标识分配给进程的结束地址或信息破坏。
一个 CPU 将创建一个或多个线程来执行一个进程。线程是进程产生的一组指令的集合，以
运行它执行其被要求执行的特定活动。CPU 使用线程以允许进程执行动作，通过引用需要执行
的指令和数据驻留在内存中的地址。CPU 将地址与基和限制寄存器进行比较，以确保进程请求
的访问在分配给进程的允许的内存空间之内，而不是之外或在一些其它被保护的内存空间。内
存保护关注对主内存的访问控制。当几个进程在同时运行时，需要保护一个进程的内存防止被