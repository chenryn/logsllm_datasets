san, “Soot: A Java bytecode optimization framework,” in Proceedings
of CASCON ’10, 2010.
[61] A. Voellmy, H. Kim, and N. Feamster, “Procera: a language for high-
level reactive network control,” in Proceedings of ACM HotSDN ’12,
2012, pp. 43–48.
[62] H. Wang, G. Yang, P. Chinprutthiwong, L. Xu, Y. Zhang, and G. Gu,
“Towards ﬁne-grained network security forensics and diagnosis in the
SDN era,” in Proceedings of ACM CCS ’18, 2018.
[63] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek, “Improv-
ing integer security for systems with KINT,” in Proceedings of USENIX
OSDI’12, 2012.
[64] Y. Wu, A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo, “Automated
bug removal for software-deﬁned networks,” in Proceedings of USENIX
NSDI ’17, Mar. 2017.
[65] Y. Wu, M. Zhao, A. Haeberlen, W. Zhou, and B. T. Loo, “Diagnosing
missing events in distributed systems with negative provenance,” in
Proceedings of ACM SIGCOMM ’14, 2014.
[66] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu, “Attacking the brain:
Races in the SDN control plane,” in Proceedings of USENIX Security
’17, 2017.
[67] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck, “Modeling and
discovering vulnerabilities with code property graphs,” in Proceedings
of IEEE S&P ’14, 2014.
[68] S. Yang, D. Yan, H. Wu, Y. Wang, and A. Rountev, “Static control-
ﬂow analysis of user-driven callbacks in Android applications,” in
Proceedings of ICSE ’15, 2015.
[69] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck, “AppCon-
text: Differentiating malicious and benign mobile app behaviors using
context,” in Proceedings of ICSE ’15, 2015.
[70] C. Yoon, S. Lee, H. Kang, T. Park, S. Shin, V. Yegneswaran, P. Porras,
and G. Gu, “Flow wars: Systemizing the attack surface and defenses
in software-deﬁned networks,” IEEE/ACM Trans. Netw., vol. 25, no. 6,
pp. 3514–3530, Dec. 2017.
[71] M. Zhang, J. Hou, Z. Zhang, W. Shi, B. Qin, and B. Liang, “Fine-
grained ﬁngerprinting threats to software-deﬁned networks,” in Proceed-
ings of IEEE Trustcom/BigDataSE/ICESS ’17, Aug 2017, pp. 128–135.
[72] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, “Semantics-aware an-
droid malware classiﬁcation using weighted contextual API dependency
graphs,” in Proceedings of ACM CCS ’14, 2014.
[73] M. Zhang and H. Yin, “AppSealer: Automatic generation of
vulnerability-speciﬁc patches for preventing component hijacking at-
tacks in Android applications,” in Proceedings of NDSS ’14, 2014.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
package org.onosproject.sampleApp;
public class SampleAppManager {
/* Internal variables */
protected HostService hostService;
protected PacketService packetService;
protected FlowRuleService flowRuleService;
private HostListener hostListener = new HL();
private PacketProcessor processor = new PP();
/* Activation and deactivation methods */
protected void activate() {
...
hostService.addListener(hostListener);
packetService.addProcessor(processor, 0);
}
protected void deactivate() {
...
packetService.removeProcessor(processor);
hostService.removeListener(hostListener);
}
/* Event listener(s) */
private class HL implements HostListener {
public void event(HostEvent event) {
switch (event.type()) {
case HOST_ADDED:
internalMethod1(event,...);
default:
}
}
}
/* Packet processor(s) */
private class PP implements PacketProcessor {
public void process(PacketContext context) {
...
internalMethod2(...)
}
}
/* App internal methods (public or private) */
private void internalMethod1(Event event,...) {
...
internalMethod2(...)
}
public void internalMethod2(...) {
...
flowRuleService.applyFlowRules(...);
}
}
Fig. 10: Abbreviated code structure of an example ONOS
network application, sampleApp, written in Java.
APPENDIX
A. ONOS Application Structure
1) App Components: We provide an example ONOS app
with representative components. Figure 10 shows the represen-
tative code structure of an example application, sampleApp.
sampleApp listens for host events and incoming data plane
packets; based on such events, the app installs new ﬂow rules.
We highlight the key components of an ONOS app below.
•
•
Internal variables (lines 3–8): Internal variables
maintain the app’s state, which includes references
to data store objects and core controller services. In
sampleApp, references to the host, packet, and ﬂow
rule services are created, along with the instantiations
of the host (event) listener and the packet processor.
Activation and deactivation methods (lines 9–19):
The activation method is called once when the app is
activated; similarly, the deactivation method is called
once during deactivation. During activation and deac-
tivation, the app registers and deregisters components
that it needs, such as event listeners and packet pro-
16
Fig. 11: Event ﬂow graph of ONOS with core service components and several apps (i.e., acl, fwd, mobility, dhcp, and dhcprelay).
Blue rectangles represent event listeners and packet processors, gray ellipses represent API methods, bold edges represent event
dispatches, and dashed edges represent API calls. (For simplicity, event types are reduced to a single edge of the event type’s
respective event kind.)
17
provider.netcfglinksNetworkConfigLinksProviderInternalConfigListenerLinkProviderServicelinkVanished(…)provider.netcfglinksNetworkConfigLinksProviderInternalPacketProcessorPacketContextblock(…)LinkProviderServicelinkDetected(…)provider.netcfglinksNetworkConfigLinksProviderInternalDeviceListenerPacketServiceemit(…)LinkProviderServicelinksVanished(…)LinkProviderServicelinksVanished(…)provider.netcfghostNetworkConfigHostProviderInternalNetworkConfigListenerHostProviderServicehostDetected(…)HostProviderServicehostVanished(…)provider.lldp.implLldpLinkProviderInternalDeviceListenerprovider.lldp.implLldpLinkProviderInternalPacketProcessorprovider.lldp.implLldpLinkProviderInternalConfigListenerprovider.general.device.implGeneralDeviceProviderInternalDeviceListenerDeviceProviderServiceupdatePortStatistics(…)provider.general.device.implGeneralDeviceProviderInternalNetworkConfigListenerDeviceProviderServicedeviceConnected(…)DeviceProviderServiceupdatePorts(…)provider.general.device.implGeneralDeviceProviderInternalDeviceAgentListenerDeviceProviderServicedeviceDisconnected(…)DeviceProviderServicereceivedRoleReply(…)provider.netconf.device.implNetconfDeviceProviderInternalDeviceListenerprovider.netconf.device.implNetconfDeviceProviderInternalNetworkConfigListenerprovider.host.implHostLocationProviderInternalDeviceListenerHostProviderServiceremoveLocationFromHost(…)provider.host.implHostLocationProviderInternalHostProviderprovider.host.implHostLocationProviderInternalConfigListenerprovider.linkdiscovery.implLinkDiscoveryProviderInternalDeviceListeneracl.implAclManagerInternalHostListenerFlowRuleServiceapplyFlowRules(…)fwdReactiveForwardingReactivePacketProcessorFlowObjectiveServiceforward(…)PacketContextsend(…)fwdReactiveForwardingInternalTopologyListenerFlowRuleServiceremoveFlowRules(…)dhcp.implDhcpManagerDhcpPacketProcessorHostProviderServiceremoveIpFromHost(…)dhcprelayDhcp6HandlerImplInternalHostListenerPacketServicecancelPackets(…)PacketServicerequestPackets(…)dhcprelayDhcpRelayManagerInternalConfigListenerFlowObjectiveServiceapply(…)HostServicestartMonitoringIp(…)HostServicestopMonitoringIp(…)dhcprelayDhcpRelayManagerDhcpRelayPacketProcessordhcprelayDhcpRelayManagerInternalDeviceListenerdhcprelayDhcp4HandlerImplInternalHostListenermobilityHostMobilityInternalHostListenernet.flow.implFlowRuleDriverProviderInternalDeviceListenerFlowRuleProviderServicepushFlowMetrics(…)net.flow.implFlowRuleManagerInternalDeviceListenernet.intent.implIntentCleanupIntentServicesubmit(…)IntentServicewithdraw(…)net.intent.implProtectionConfigMonitorProtectionConfigListenerDriverServicecreateHandler(…)net.intent.implObjectiveTrackerInternalHostListenernet.intent.implObjectiveTrackerInternalDeviceListenernet.statistic.implStatisticManagerInternalFlowRuleListenernet.flowobjective.implFlowObjectiveManagerInnerDeviceListenernet.flowobjective.implFlowObjectiveManagerInnerDriverListenernet.flowobjective.impl.compositionFlowObjectiveCompositionManagerInnerDeviceListenernet.resource.implResourceNetworkConfigListenernet.resource.implResourceDeviceListenernet.topology.implDefaultTopologyProviderInternalLinkListenernet.topology.implDefaultTopologyProviderInternalDeviceListenernet.device.implDeviceManagerInternalNetworkConfigListenernet.group.implGroupDriverProviderInternalDeviceListenernet.group.implGroupManagerInternalDeviceListenernet.link.implLinkManagerInternalDeviceListenernet.edgeservice.implEdgeManagerInnerDeviceListenernet.meter.implMeterDriverProviderInternalDeviceListenernet.packet.implPacketManagerInternalDeviceListenerstore.flow.implECFlowRuleStoreInternalFlowTablenet.region.implRegionManagerInternalNetworkConfigListenernet.neighbour.implNeighbourResolutionManagerInternalPacketProcessorGroupProviderServicepushGroupMetrics(…)net.edgeservice.implEdgeManagerInnerLinkListenernet.link.implLinkManagerInternalNetworkConfigListenerMeterProviderServicepushMeterMetrics(…)net.config.implDeviceInjectionConfigMonitorInternalConfigListenernet.config.implNetworkConfigLoaderInnerConfigListenerNetworkConfigServiceapplyConfig(…)net.host.implHostManagerInternalNetworkConfigListenerNetworkConfigServicegetConfig(…)DriverServicegetDriver(…)DeviceServiceisAvailable(…)Data PlaneOutDeviceServicegetDevice(…)NetworkConfigServicegetConfigClass(…)NetworkConfigServicegetSubjectFactory(…)DeviceServicegetPorts(…)DeviceServicegetPort(…)LinkServicegetLinks(…)DeviceServicegetRole(…)PacketContextisHandled(…)PacketContextinPacket(…)DeviceServicegetPort(…)DeviceServicegetDevices(…)FlowRuleServicegetFlowEntries(…)DeviceServicegetAvailableDevices(…)InterfaceServicegetInterfacesByPort(…)HostServicegetHost(…)HostServicegetHostsByIp(…)InterfaceServicegetMatchingInterfaces(…)EdgePortServiceisEdgePoint(…)HostServicegetConnectedHosts(…)HostServicegetConnectedHosts(…)Data PlaneIn•
•
•
cessors. In sampleApp, the host event listener and
packet processor are registered and deregistered.
Event listeners (lines 20–29): Event listeners listen
for an event kind of interest and take further action,
often based on the event type. Event listeners may call
other methods within the app to perform a desired
functionality. In sampleApp, the host event listener
executes event() when it receives a HostEvent
(line 22). It handles the HOST ADDED type by
calling the internal method internalMethod1()
(line 25). Note that all other HostEvent event types
(e.g., HOST REMOVED) are not handled.
Packet processors (lines 30–37): Packet processors
function much like to event listeners by listening for
incoming data plane packets and taking appropriate
actions. In sampleApp, the packet processor executes
process() when it receives a packet (line 32) and
subsequently after execution calls the internal method
internalMethod2() (line 34).
38–45): App
App
(lines
internal methods
the main functionality
internal methods handle
the app. They may read from core services
of
(i.e., API
services
(i.e., API write calls), or dispatch new events.
calls
In
rules
New
internalMethod2().
are generated as
result of
calling of
internalMethod2() (line 44).
internalMethod1()
read calls), write
sampleApp,
to core
a
ﬂow
the
2) App Analysis: We explain how sampleApp would be
analyzed within EVENTSCOPE.
a) Event use: Based on the event
listener that
is
implemented in sampleApp, we see that
the HostEvent
event is handled. For simplicity, EK = {HostEvent} and
ET = {HOST ADDED, HOST REMOVED,
HOST MOVED, HOST UPDATED}. Because sampleApp
handles only the HOST ADDED event type, its corresponding
row in the event use matrix, M, would be M [sampleApp] =
[true, false, false, false]. Next, sampleApp’s event
types would be compared with respect to all other apps to
determine if the 3 remaining event types are candidates.
event
apps’
b) Event ﬂow: Given that
listeners
and packet processors drive the main app functionality,
EVENTSCOPE focuses on these methods and ignores the
activation and deactivation methods. We mark the host event
listener event() method (line 23) and the packet pro-
cessor process() method (line 32) as entry points for
the event ﬂow graph generation. Each entry point
is rep-
resented as a node in the event ﬂow graph, G. We note
that flowRuleService.applyFlowRules() is an API
write method, so it would also be marked as an entry point.
For the host event listener, the resulting call graph con-
tains the path event() → internalMethod1() →
internalMethod2() → applyFlowRules(), so we
add an outgoing edge from the host event listener node to
the ﬂow rule API call node in G. For the packet processor,
the resulting call graph contains the path process() →
internalMethod2() → applyFlowRules(), so we
add a similar edge from the packet processor node to the ﬂow
Fig. 12: ONOS apps’ candidate and valid vulnerabilities as a
function of clustering threshold τ (using SimRank [24]).
rule API call node. As the host event listener handles only 1
event type, we add 1 edge from each host event dispatcher
node (assumed to have been dispatched from other activated
controller code) to sampleApp’s host event listener in G.
Finally, as the packet processor receives incoming data
plane input, we add an edge from DPIn to the packet processor
in G. As the host event listener and packet processor add ﬂow
rules, we add edges from each to DPOut in G.
B. ONOS Event Flow Graph Example
Figure 11 shows the ONOS event ﬂow graph with the con-
troller’s core services, the access control app (acl), the reactive
forwarding app (fwd), the host mobility app (mobility), and the
DHCP apps (dhcp and dhcprelay).
We start from the Data Plane In node on the left
side of the ﬁgure, where the inPacket() API read call
receives incoming data plane packets. Such packets are read
by several packet processors: the neighborhood service’s In-
ternalPacketProcessor, the reactive forwarding app’s Re-
activePacketProcessor, the LLDP link provider’s Internal-
PacketProcessor,
the DHCP apps’ DhcpPacket Proces-
sor and DhcpRelayPacketProcessor, and the host location
provider’s InternalHostProvider.
to right
We follow paths from left
to understand how
those packet processors cause subsequent API calls and
event dispatches. For instance, the dhcprelay app calls the
HostProviderService’s hostDetected() API call. The
hostDetected() API call will dispatch a HostEvent event
that gets received by the dhcprelay app’s InternalHostLis-
tener event
listener calls the Packet-
Service’s cancelPackets() API call, which subsequently
calls the FlowObjective Service’s forward() API call. The
forward() API call causes a data plane effect.
listener. That event
C. Number of Clusters and Detection Rate
Figure 12 shows the effect of choosing different values
for the event use clustering threshold τ (i.e., changing the
number of clusters) on the detection rate for the number of can-
didate vulnerabilities (Section IV-A) and valid vulnerabilities
(Section V-B) for ONOS v1.14.0 [46]. We note an inﬂection
point of candidate vulnerabilities near τ = 0.90, which is the
threshold that we used throughout our evaluation.
18
0.50.60.70.80.91.0Clustering Threshold 0255075100125150175Number of ResultsCandidate vulnerabilitiesValid vulnerabilities