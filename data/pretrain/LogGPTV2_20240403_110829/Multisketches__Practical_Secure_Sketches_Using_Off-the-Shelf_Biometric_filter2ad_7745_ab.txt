Figure 1: Conceptual diagram of multisketch scheme. Templates corre-
sponding to each finger position are stored in random order. During authen-
tication, presented finger images are matched to templates; corresponding
row indices ‚Äî e.g., here (1, 2, 3, 3, 1) ‚Äî are used to compose the user‚Äôs key.
A critical feature of our multisketch construction, shown in
Figure 1, is that templates for each finger position are ordered ran-
domly, and with no user identifiers. User 1‚Äôs templates, for example,
are scattered across different rows. Thus an adversary that breaches
the database has to determine which template corresponds to which
user. As we show via attack simulations, determining template as-
sociations is hard, and consequently, an attacker cannot feasibly
identify which fingerprints belong to a particular user. In contrast,
in an ordinary biometric database, templates are associated with
user identities. For example, all of a given user‚Äôs templates might
be in the same row. So an adversary that breaches the database can
immediately obtain sensitive biometric information of the users.
Given the database of our construction, users can derive keys
from their templates at the time they authenticate. Conceptually,
this process can be very simple: Each of the user‚Äôs fingers is matched
against all templates for the corresponding finger position (e.g.,
index finger). In an ideal setting, the closest match is the template
belonging to that user.
Given ideal matching of this kind, the indices of the matched
templates (which are random, of course) can be used to compose
a key for the user. In our simple example in Figure 1, the key of
one particular user is composed of the best matching row indices
(1, 2, 3, 3, 1) ‚Äî one per finger position. In Section 4 we show how
to do this composition. We also show given a sufficiently large
database, our construction in Section 4 can produce high-entropy
keys from tenprints, that can be used for public-key authentication,
signing, decryption, etc.
Assuming that templates are independently distributed, i.e., have
uncorrelated features, an adversary that has breached the database
and tries to reconstruct any key faces a combinatorial explosion. In
our example, the adversary can start with a given template and try
to find its four (n ‚àí 1) associated ones. This requires searching a
space of size N(n‚àí1). For large N this can be very large. For example,
if the database has N = 104 users and n = 5 as before, an attacker
would need to try 10,000 trillion (‚âà 253) combinations.
In practice, however, the na√Øve approach that we‚Äôve just illus-
trated runs into two main complications.
Errors. First, matching biometrics in practice isn‚Äôt ideal, and is sub-
ject to a range of errors resulting from the noisy nature of biometrics.
Finger 1Row 2Row 3Finger 2Finger 3Finger 4Finger 5(1,2,3,3,1)Row 1we cannot for simplicity assume p(w) =
As noted above, different biometric attributes of a given per-
son are not in general mutually independent, i.e., unfortunately,
i pi(wi). Moreover, we
assume that an adversary does not know p and cannot directly com-
pute joint probabilities. We instead consider the various estimation
approaches an adversary might adopt in trying to identify users‚Äô
tuples in the database D.
Biometric readings, as mentioned earlier, are always noisy; mul-
tiple reading of the same biometric template of a user produces
slightly different outputs. Let e be a noise function that model the
errors incorporated in the process of reading a biometric template.
Therefore Àúw ‚Üê$ e(w), denotes the reading Àúw obtained while reading
the template w. As the biometric readings and biometric templates
are normally represented using similar message formats in practice,
we will use the word message to denote either of them.
Biometric matching. A biometric matching algorithm ‚Ñí(w, Àúw) is
an efficient algorithm that takes as input a template w and a bio-
metric reading Àúw and outputs a matching score Œ∏ ‚àà [0, 1] denoting
how likely a biometric reading Àúw is indeed a reading of the tem-
plate w. By setting a predetermined threshold œÑ, a score Œ∏ output by
algorithm ‚Ñí can be converted into an accept (if Œ∏ ‚â• œÑ) or reject
(if Œ∏ < œÑ) output.
The effectiveness of a matching algorithm is measured in prac-
tice by its false matching rate (FMR) and false non-matching rate
(FNMR). For a given œÑ, a matching algorithm‚Äôs FMR, denoted by Œ±, is
Àúw ‚Üê$ e(w‚Ä≤); w‚Ä≤ (cid:44) w ], where w
defined as Pr[‚Ñí(w, Àúw) = accept;
and w‚Ä≤ are sampled randomly from W . The FNMR, denoted by Œ≤, is
defined as Pr[‚Ñí(w, Àúw) = reject;
Àúw ‚Üê$ e(w)], where w is sampled
randomly from W .
As noted before, multisketch can be extend to multi-modal bio-
metric templates. In that case, each message space Wi can have
separate matching procedures ‚Ñíi. Multisketch only requires match-
ing algorithms {‚Ñíi} with low FMR and FNMR rates, but requires
no assumptions on how the template similarity is measured.
Biometric matching algorithms can be extended to handle mes-
sage tuples. For example, two message tuples can be matched by
counting the number of message pairs among them that are ac-
cepted by the underlying matching algorithm ‚Ñí. Let Lt denote the
matching algorithm defined over message tuples; on input w and Àúw,
it outputs accept if at least t pairs between w and Àúw are accepted
by ‚Ñí, reject otherwise.
Secure sketches. Secure sketches (SS) [29] are primitives that
perform error correction on a message without leaking much in-
formation about the message. Secure sketches are defined for a
message space W with distance function d.
puts a public bit string v ‚àà {0, 1}‚àó.
Definition 3.1. A (W , ¬µ, ¬µ‚Ä≤, Œ∑, Œµ)-secure sketch is a pair of algo-
rithm sketch (SS) and recover (Rec), defined as follows.
‚Ä¢ The algorithm SS (possibly randomized), on input w ‚àà W out-
‚Ä¢ The deterministic algorithm Rec, on input the string v and a
message Àúw, outputs w, should w and Àúw are similar, else the
output is indeterminate.
‚Ä¢ Correctness. Correctness requires that for all messages w and
Àúw such that d(w, Àúw) ‚â§ Œ∑, (where Œ∑ is a parameter to the con-
struction), Pr[ Rec(v, Àúw) = w; v ‚Üê$ SS(w)] ‚â• 1 ‚àí Œµ.
t (w):
SS‚àÜ
Œ∫ ‚Üê$ K(1‚Ñì); h ‚Üê ‚àÖ
c ‚Üê$ EŒ∫(w)
for Àúw ‚àà(cid:0)w
(cid:1) do
h ‚Üê h ‚à™ EH( Àúw)(Œ∫)
t
v ‚Üê (h, c)
return s
(cid:1) √ó h do
t (w‚Ä≤, v):
for ( Àúw, h) ‚àà(cid:0)w‚Ä≤
Rec‚àÜ
parse v as (h, c)
t
Œ∫‚Ä≤ ‚Üê DH( Àúw)(h)
if Œ∫‚Ä≤ (cid:44) ‚ä• then
w ‚Üê DŒ∫‚Ä≤(c)
return w
return ‚ä•
Figure 2: Algorithms for sketch (SS) and recover (Rec) for secure sketch
for set-distances without using polynomial reconstruction (Reed-Solomon
decoding). It uses a symmetric key authenticated encryption scheme SKE =
(K, E, D) and a cryptographic hash function H : {0, 1}‚àó (cid:55)‚Üí {0, 1}‚Ñì.
‚Ä¢
Security. For any message distribution overW with min-entropy
¬µ, the secure sketch must ensure that average conditional min-
entropy of W given SS(W ) is at least ¬µ‚Ä≤.
Secure sketch for set difference. A set difference is a standard
distance function over sets defined as follows: given two sets w and
Àúw, set difference between them w‚àÜ Àúw = |w ‚à™ Àúw ‚àí w ‚à© Àúw|. Dodis
et al. [29] provide a secure sketch construction for sets of items,
where the distance function between them is the set difference. The
construction uses algebraic polynomial interpolation. We will use
this secure sketch internally to build multisketches. Though Dodis
et al. proved the construction to be secure in the single message
setting, the analysis did not simultaneously consider multiple mes-
sages. While we believe that their construction is secure even in
such a setting, we used a simpler construction whose security can
be argued easily in the random oracle model. We describe Dodis et
al. approach in Appendix A.
In Figure 2 we show the simple sketch construction. It uses
a secure and robust symmetric key encryption scheme SKE =
(K, E, D) and a cryptographic hash function H. The hash function
H : {0, 1}‚àó (cid:55)‚Üí {0, 1}‚Ñì, where ‚Ñì is the security parameter. Here K
is a key generation function that selects keys uniformly randomly
from {0, 1}‚Ñì; E is an encryption function; and D is the decryption
function. Loosely speaking, we want the encryption scheme to be
robust, that is decryption with wrong key fails ‚Äî outputs ‚ä• ‚Äî and to
be semantically secure ‚Äî without the knowledge of the key, no one
can distinguish between encryption of a message from a random
bit-string. Our preferred choices for deployment are AES-HMAC in
CBC mode with 128-bit key (and PKCS7 padding) for encryption,
and SHA-256 as the hash function.
4 MAIN CONSTRUCTION
We begin this section with the definition of a multisketch, followed
by a concrete construction. As detailed in Section 3, a conventional
secure sketch operates on a single message ‚Äî generally correspond-
ing to a single user‚Äôs secret, such as a biometric template. A mul-
tisketch, in contrast, operates on the messages of multiple users.
Below we define multisketch more formally.
Definition 4.1 (Multisketch). A multisketch is a pair of algorithms
(MS, MRec), that are defined as follows.
‚Ä¢ MS is a randomized procedure that takes as input a user iden-
tifier u, a message tuple w, and a state s (can be empty ‚àÖ). MS
updates the state and returns the updated state s‚Ä≤.
Accuracy(N):
(s, a) ‚Üê$ Add(‚àÖ, N)
(u, w) ‚Üê$ a
Àúw ‚Üê$ e(w)
w‚Ä≤ ‚Üê MRec(u, Àúw, s)
return w‚Ä≤ = w
UnTarGuessùíú(N , b):
(s, a) ‚Üê$ Add(‚àÖ, N)
(u, w‚Ä≤) ‚Üê ùíú(s, a‚Ä≤)
w ‚Üê a[u]
return w = w‚Ä≤
a‚Ä≤ ‚Üê {(u‚Ä≤‚Ä≤, w1. . .b)(cid:12)(cid:12)(u‚Ä≤‚Ä≤, w) ‚àà a}
Add(s, N):
s0 ‚Üê s; a ‚Üê ()
for i = 1 to N do
u ‚Üê$ ùí∞; w ‚Üê$ W
ai ‚Üê (u, w)
si ‚Üê$ MS(u, w, si‚àí1)
return (sN , a)
TarGuess‚Ñ¨(N , b):
(s, a) ‚Üê$ Add(‚àÖ, N)
(u, w) ‚Üê$ a
w‚Ä≤ ‚Üê ‚Ñ¨(s, u, a‚Ä≤)
return w = w‚Ä≤
a‚Ä≤ ‚Üê {(u‚Ä≤‚Ä≤, w1. . .b)(cid:12)(cid:12)(u‚Ä≤‚Ä≤, w) ‚àà a}
Figure 3: The accuracy (Accuracy) and security (TarGuess and
UnTarGuess) measures of multisketch. All of the algorithms are implic-
itly parameterized by message tuple space W and space of user ids ùí∞.
‚Ä¢ MRec, a deterministic procedure, similarly takes as input a user
id u, a message Àúw, and a state s and outputs a message w‚Ä≤, should
Àúw be similar to w‚Ä≤, that is Lt(w‚Ä≤, Àúw) = accept.
It is characterized by two key metrics:
‚Ä¢ Accuracy: The accuracy of a multisketch is defined as the abil-
ity to recover the originally registered message w of a user
given Àúw ‚Üê$ e(w). The accuracy is measured using the prob-
abilistic algorithm Accuracy shown in Figure 3. Observe the
accuracy depends on the number of users registered in the state
s. Therefore, we call a multisketch scheme (N , Œ¥)-accurate if
Pr[ Accuracy(N) = true] ‚â• 1‚àí Œ¥, where the probability is com-
puted over the random coins used by the algorithm Add and
the error function e. The algorithm Add takes as input an initial
state s, and a number N , generates N random user identifiers u
and their messages w, registers them sequentially in the state
si using MS, and returns the updated state sN along with the
list a of generated users and their messages.
Security: The security of a multisketch is defined using the
guessing games UnTarGuess and TarGuess shown in Figure 3.
More detailed security discussion is given in Section 5.
‚Ä¢
4.1 Construction of TenSketch
We give a construction of multisketch for tenprints ‚Äî i.e., tuples
of prints of all ten fingers of a user ‚Äî that we call TenSketch. The
construction can easily be extended to include other biometrics,
such as iris scans or hand geometry.
The pseudocode of the procedures for sketching (MS) and recov-
ery (MRec) are given in Figure 4. TenSketch calls as subroutines
the set-distance secure sketch algorithms given in Figure 2. Mul-
tisketch uses a matching algorithm ‚Ñí. We assume for simplicity a
single matching algorithm ‚Ñí that works for all message spaces Wi,
although our algorithms can easily be adapted to distinct matching
algorithms ‚Ñíi for different message spaces.
The state s in TenSketch consists of two databases ‚Ñê and ‚Ñ±,
where ‚Ñê is a key value store in which keys are user identifiers u ‚àà ùí∞
t . The other database ‚Ñ±
and values are the sketches output by SS‚àÜ
stores the fingerprint templates of users. It consists of n = 10
columns, one for each finger. Given a message tuple w and a user
t (u, w, s = (‚Ñê, ‚Ñ±)):
t (w);
MS‚Ñí
v ‚Üê SS‚àÜ
‚Ñê[u] ‚Üê v
N ‚Üê |‚Ñ± |
for i = 1 to n do
j ‚Üê$ [1, N + 1]
if j < N + 1 then
‚Ñ±[j, i] ‚Üê wi
‚Ñ±[N + 1, i] ‚Üê ‚Ñ±[j, i]
s‚Ä≤ ‚Üê (‚Ñê, ‚Ñ±)
return s‚Ä≤
t (u, Àúw, s = (‚Ñê, ‚Ñ±)):
MRec‚Ñí
v ‚Üê ‚Ñê[u]
for i = 1 to n do
for wj ‚àà (x1 √ó . . . √ó xn) do
xi ‚Üê FindMatches‚Ñí(‚Ñ±, i, Àúwi)
w‚Ä≤ ‚Üê Rec‚àÜ
if w‚Ä≤ (cid:44) ‚ä• then
return w‚Ä≤
t (v, wj)
return ‚ä•
Figure 4: Multisketch (MS) and recover (MRec) algorithms. The function
FindMatches‚Ñí(‚Ñ±, wi) finds at most l matches for message wi from the
database ‚Ñ± using ‚Ñí.
id u, MS first computes the set-distance sketch v of w and stores it
at ‚Ñê[u]. Then, MS inserts each message wi in the ith column in ‚Ñ±
at random locations.
During recovery, on input Àúw and a user id u, MRec searches the
database ‚Ñ± for potential matches using the algorithm FindMatches‚Ñí,
which calls ‚Ñí as a subroutine. FindMatches‚Ñí returns at most l ‚Äî a
parameter ‚Äî best matches for each message Àúwi. Then, for every
tuple of matches found, MRec tries to recover the original message
t with the sketch value v stored at ‚Ñê[u]. There can be
w using Rec‚àÜ
lt possible tuple combinations that have to be checked via Rec‚àÜ
t .
Thus, while larger l increases accuracy, practical implementation
requires relatively small values (e.g., 2).