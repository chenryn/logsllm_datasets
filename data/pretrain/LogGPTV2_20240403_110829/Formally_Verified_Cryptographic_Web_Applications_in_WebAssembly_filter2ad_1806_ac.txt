any other expression-based programming language.
B. Translating λow∗ to C♭
We explain our translation via an example: the implemen-
tation of the fadd function for Curve25519 (II). The function
takes two arrays of ﬁve limbs each, adds up each limb pairwise
1260
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
τ ∶∶= int32 ∣ int64 ∣ unit ∣ {
v ∶∶= x ∣ g ∣ k ∶ τ ∣ () ∣ {
e ∶∶= readbuf e1 e2 ∣ writebuf e1 e2 e3 ∣ newbuf n (e1 ∶ τ )
(cid:6)(cid:6)⇀
f = v}
(cid:6)(cid:6)⇀
f = τ } ∣ buf τ ∣ α
∣ subbuf e1 e2 ∣ e.f ∣ v ∣ if e1 then e2 else e3
∣ d
(cid:6)⇀
e ∣ let x ∶ τ = e1 in e2 ∣ {
(cid:6)(cid:6)⇀
f = e} ∣ e ⊕ n ∣ for i ∈ [0; n) e
P ∶∶= ⋅ ∣ let d = λ
(cid:6)(cid:6)⇀
y ∶ τ . e1 ∶ τ1, P ∣ let g ∶ τ = e, P
ˆτ ∶∶= int32 ∣ int64 ∣ unit ∣ pointer
ˆv ∶∶= (cid:3) ∣ g ∣ k ∶ ˆτ ∣ ()
ˆe ∶∶= readn ˆe ∣ writen ˆe1 ˆe2 ∣ new ˆe ∣ ˆe1 ⊕ ˆe2 ∣ (cid:3) ∶= ˆe ∣ ˆv ∣ ˆe1; ˆe2
∣
if ˆe1 then ˆe2 else ˆe3 ∶ ˆτ ∣ for (cid:3) ∈ [0; n) ˆe ∣ ˆe1 × ˆe2 ∣ ˆe1 + ˆe2 ∣ d
ˆP ∶∶= ⋅ ∣ let d = λ
(cid:6)(cid:6)⇀
(cid:3) ∶ ˆτ .
(cid:6)(cid:6)⇀
(cid:3) ∶ ˆτ , ˆe ∶ ˆτ , ˆP ∣ let g ∶ ˆτ = ˆe, ˆP
(cid:6)⇀
ˆe
Fig. 4. λow∗ syntax
Fig. 5. C♭ syntax
(using a for-loop) and stores the result in the output array. It
comes with the precondition (elided) that the addition must
not overﬂow, and therefore limb addition does not produce any
carries. The loop has an invariant (elided) that guarantees that
the ﬁnal result matches the high-level speciﬁcation of fadd.
let fadd (dst: felem) (a b: felem): Stack unit ... =
let invariant = ... in
C.Loops.for 0ul 5ul invariant (λ i → dst.(i) ← a.(i) + b.(i))
This function formally belongs to EMF∗, the formal model
for F∗ (Figure 3). The ﬁrst transformation is erasure, which
gets rid of the computationally-irrelevant parts of the program:
this means removing the pre- and post-condition, as well as
any mention of the loop invariant, which is relevant only for
proofs. After erasure, this function belongs to λow∗.
The λow∗ language. λow∗ is presented in Figure 4. λow∗
is a ﬁrst-order lambda calculus, with recursion. It is equipped
with stack-allocated buffers (arrays), which support: writebuf,
readbuf, newbuf, and subbuf for pointer arithmetic. These
operations take indices, lengths or offsets expressed in array
elements (not bytes). λow∗ also supports structures, which can
be passed around as values (as in C). Structures may be stored
within an array, or may appear within another structure. They
remain immutable; to pass a structure by reference, one has to
place it within an array of size one. None of: in-place mutation
of a ﬁeld; taking the address of a ﬁeld; ﬂat (packed) arrays
within structures are supported. This accurately matches what
is presently implemented in Low∗ and the KreMLin compiler.
Base types are 32-bit and 64-bit integers; integer constants
are annotated with their types. The type α stands for a secret
type, which we discuss in the next section. For simplicity, the
scope of a stack allocation is always the enclosing function
declaration.
Looking at the fadd example above, the function belongs
to Low∗ (after erasure) because: its signature is in the Stack
effect, i.e. it veriﬁes against the C-like memory model; it uses
imperative mutable updates over pointers, i.e. the felem types
and the ← operator; it uses the C loops library. As such, fadd
can be successfully interpreted as the following λow∗ term:
let fadd = λ(dst ∶ buf int64)(a ∶ buf int64)(b ∶ buf int64).
for i ∈ [0; 5). writebuf dst i (readbuf a i + readbuf b i)
λow∗ enjoys typing preservation, but not subject reduction.
Indeed, λow∗ programs are only guaranteed to terminate if
they result from a well-typed F∗ program that performed
veriﬁcation in order to guarantee spatial and temporal safety.
In the example above, the type system of λow∗ does not
guarantee that the memory accesses are within bounds; this is
only true because veriﬁcation was performed over the original
EMF∗ program.
The differences here compared to the original presenta-
tion [9] are as follows. First, we impose no syntactic con-
straints on λow∗, i.e. we do not need to anticipate on the
statement language by requiring that all writebuf operations
be immediately under a let. Second, we do not model in-
place mutable structures, something that remains, at the time
of writing, unimplemented by the Low∗/KreMLin toolchain.
Third, we add a raw pointer addition e ⊕ n that appears only
as a temporary technical device during the structure allocation
transformation (below).
The C♭ language. C♭ (Figure 5) resembles λow∗, but: i)
eliminates structures altogether,
ii) only retains a generic
pointer type, iii) expresses all memory operations (pointer
addition, write, reads, allocation) in terms of byte addresses,
offsets and sizes, and iv) trades lexical scoping in favor of
local names. As in WebAssembly, functions in C♭ declare the
set of local mutable variables they introduce, including their
parameters.
Translating from λow∗ to C♭ involves three key steps:
ensuring that all structures have an address in memory; con-
verting let-bindings into local variable assignments; laying out
structures in memory.
1) Desugaring structure values. Structures are values in
λow∗ but not in C♭. In order to compile these, we make sure
every structure is allocated in memory, and enforce that only
pointers to such structures are passed around. This is achieved
via a mundane type-directed λow∗-to-λow∗ transformation
detailed in Figure 6. The ﬁrst two rules change the calling-
convention of functions to take pointers instead of structures;
and to take a destination address instead of returning a
structure. The next
the calling-convention
changes at call-site, introducing an uninitialized buffer as a
placeholder for the return value of f. The next rule ensures
that let-bindings have pointer types instead of structure types.
The last rule actually implements the allocation of structure
literals in memory.
two rules enact
The auxiliary take addr function propagates the address-
taking operation down the control ﬂow. When taking the
address of sub-ﬁelds, a raw pointer addition,
is
generated. Unspeciﬁed cases are ruled out either by typing
or by the previous transformations.
in bytes,
This phase, after introducing suitable let-bindings (elided),
establishes the following invariants: i) the only subexpressions
1261
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
let d = λy ∶ τ1. e ∶ τ2
let d = λy ∶ τ1. e ∶ τ2
↝ let d = λy ∶ buf τ1. [readbuf y 0/y]e ∶ τ2
↝ let d = λy ∶ τ1. λr ∶ buf τ2. let x ∶ τ2 = e in writebuf r 0 x ∶ unit
if τ1 is a struct type
if τ2 is a struct type
f (e ∶ τ )
(f e) ∶ τ
↝ let x ∶ buf τ = newbuf 1 e in f x
↝ let x ∶ buf τ = newbuf 1 ( ∶ τ ) in f e x; readbuf x 0
let x ∶ τ = e1 in e2
(cid:6)(cid:6)⇀
{
f = e}
(not under newbuf)
↝ let x ∶ buf τ = take addr e1 in [readbuf x 0/x]e2
↝ let x ∶ buf {
(cid:6)(cid:6)⇀
f = τ } = newbuf 1 {
(cid:6)(cid:6)⇀
f = e} in readbuf x 0
if τ is a struct type
if τ is a struct type
if τ is a struct type
if τ is a struct type
take addr(readbuf e n)
(cid:6)(cid:6)⇀
take addr((e ∶
f ∶ τ ).f )
take addr(let x ∶ τ = e1 in e2) ↝ let x ∶ τ = e1 in take addr e2
take addr(if e1 then e2 else e3) ↝ if e1 then take addr e2 else take addr e3
↝ subbuf e n
↝ take addr(e) ⊕ oﬀset(
(cid:6)(cid:6)⇀
f ∶ τ , f )
Fig. 6. Ensuring all structures have an address
size int32
size unit
size int64
size buf τ
(cid:6)(cid:6)⇀
f ∶ τ
size
= 4
= 4
= 8
= 4
= oﬀset (
(cid:6)(cid:6)⇀
f ∶ τ , fn) + size τn
(cid:6)(cid:6)⇀
f ∶ τ , f0)
(cid:6)(cid:6)⇀
f ∶ τ , fi+1) = align(oﬀset (
= 0
oﬀset (
oﬀset (
(cid:6)(cid:6)⇀
f ∶ τ , fi) + size τi,
alignment τi+1)
(cid:6)(cid:6)⇀
f ∶ τ )
alignment(
alignment(τ )
align(k, n)
align(k, n)
= 8
= size τ
= k
= k + n − (k mod n)
otherwise
if k mod n = 0
otherwise
Fig. 7. Structure layout algorithm
(cid:6)(cid:6)⇀
f = e} or readbuf e n
that have structure types are of the form {
(cid:6)(cid:6)⇀
and ii) {
f = e} appears exclusively as an argument to newbuf.
2) Assigning local variables. Transformation 1) above was
performed within λow∗. We now present the translation rules
from λow∗ to C♭ (Figures 8 and 17). Our translation judge-
ments from λow∗ to C♭ are of the form G; V ⊢ e ∶ τ ⇛ e′ ∶
τ ′ ⊣ V ′. The translation takes G, a (ﬁxed) map from λow∗
globals to C♭ globals; V , a mapping from λow∗ variables to
C♭ locals; and e ∶ τ, a λow∗ expression. It returns ˆe ∶ ˆτ, the
translated C♭ expression, and V ′, which extends V with the
variable mappings allocated while translating e.
We leave the discussion of the WRITE* rules to the next
paragraph, and now focus on the general translation mecha-
nism and the handling of variables.
Since λow∗ is a lambda-calculus with a true notion of value,
let-bound variables cannot be mutated, meaning that they can
be trivially translated as C♭ local variables. We thus compile
a λow∗ let-binding let x = e1 to a C♭ assignment (cid:2) ∶= ˆe1 (rule
LET). We chain the V environment throughout the premises,
meaning that the rule produces an extended V ′′ that contains
the additional x ↦ (cid:2), ˆτ mapping. Translating a variable then
boils down to a lookup in V (rule VAR).
The translation of top-level functions (rule FUNDECL) calls
into the translation of expressions. The input variable map is
pre-populated with bindings for the function parameters, and
the output variable map generates extra bindings (cid:6)⇀
y for the
locals that are now needed by that function.
layout. Going from λow∗ to C♭,
3) Performing struct
BUFWRITE and BUFNEW (Figure 8) call into an auxiliary
writeB function, deﬁned inductively via the rules WRITE*.
This function performs the layout of structures in memory,
relying on a set of mutually-deﬁned functions (Figure 7): size
computes the number of bytes occupied in memory by an
element of a given type, and oﬀset computes the offset in bytes
of a ﬁeld within a given structure. Fields within a structure are
aligned on 64-bit boundaries (for nested structures) or on their
intrinsic size (for integers), which WASM can later leverage.
We use writeB as follows. From BUFWRITE and BUFNEW,
we convert a pair of a base pointer and an index into a
byte address using size, then call writeB e1 e2 to issue a
series of writes that will lay out e2 at address e1. Writing
a base type is trivial (rule WRITEINT32). Recall that from the
earlier desugaring, only two forms can appear as arguments to
writebuf: writing a structure located at another address boils
down to a memcpy operation (rule WRITEDEREF), while
writing a literal involves recursively writing the individual
ﬁelds at their respective offsets (rule WRITELITERAL).
The allocation of a buffer whose initial value is a struct
type is desugared into the allocation of uninitialized memory
followed by a series of writes in a loop (rule BUFNEW).
Translated example. After translation to C♭, the earlier fadd
function now features four locals: three of type pointer for
the function arguments, and one for the loop index; buffer
operations take byte addresses and widths.
let fadd = λ((cid:2)0, (cid:2)1, (cid:2)2 ∶ pointer)((cid:2)3 ∶ int32).
for (cid:2)3 ∈ [0; 5).
write8 ((cid:2)0 + i × 8) (read8 ((cid:2)1 + i × 8) + read8((cid:2)2 + i × 8))
C. Translating C♭ to WebAssembly
expression ˆe compiles to a series of WASM instructions
The C♭ to WASM translation appears in Figure 9). A C♭
(cid:6)⇀
i .
WRITE32 compiles a 4-byte write to WASM. WASM is a
stack-based language, meaning we accumulate the arguments
1262
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
LET
G; V ⊢ e1 ∶ τ1 ⇛ ˆe1 ∶ ˆτ1 ⊣ V
G; (x ↦ (cid:3), ˆτ1) ⋅ V
′ ⊢ e2 ∶ τ2 ⇛ ˆe2 ∶ ˆτ2 ⊣ V
(cid:3) fresh
G; V ⊢ let x ∶ τ1 = e1 in e2 ∶ τ2 ⇛ (cid:3) ∶= ˆe1; ˆe2 ∶ ˆτ2 ⊣ V
′′
′′
′
FUNDECL