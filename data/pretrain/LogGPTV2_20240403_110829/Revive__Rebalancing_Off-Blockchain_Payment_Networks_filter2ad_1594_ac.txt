For safety and e(cid:28)ciency purposes, we designed our protocol to use
the underlying blockchain network primarily as a recourse. A valid
rebalancing that results from the full execution of this protocol
must be enforceable in the private payment channels involved, and
thus also in the global decentralized ledger when need be. Likewise,
an invalid rebalancing, should not be enforceable.
Payment channels are generally designed to support on-chain
deposits and withdrawals of committed funds. Prior to (cid:27)nalizing
withdrawals, the latest agreed upon balances of each channel peer
must be broadcast on-chain in order to con(cid:27)rm that the amount
to be withdrawn is correctly requested. Usually the state updates
(a) Example global network be-
fore local groups execute re-
balances. There are (cid:27)ve rebal-
ancing groups in this (cid:27)gure:
four in the corners, and one in
the center.
(b) The same hypothetical net-
work after the rebalancing
groups conclude their local
protocol runs.
Figure 5: Example e(cid:29)ect of separate Revive instances on
a global network. Nodes in the graphs represent payment
routers. Dashed edges represent terminal payment channels
(e.g. to non-routing consumers). Green undirected edges rep-
resent balanced payment channels. Red directed edges rep-
resent skewed payment channels that allow payments in
the edge direction. Shaded regions represent Revive sub-
networks.
are modeled as a mutually signed commitment that re(cid:30)ects how
much balance each peer of the payment channel has. In case the
last agreed upon balances for the payment channel resulted from
our rebalancing protocol, then the payment channel design must be
extensible as to allow it to accept a valid rebalancing as yet another
valid state update, even though its commitment structure would be
di(cid:29)erent.
In Revive (ref. Figure 4), the commitment sent back by partici-
pants encompasses the following two main elements: the full set of
participants in this round, and the full set of rebalancing transac-
tions that the leader has produced. Therefore, when a participant
commits to a rebalancing round, it essentially authorizes that when
the signatures of all the con(cid:27)rmed participants, in this round, are
provided, for this round, then all of the payments included in the
rebalancing transaction set are enforceable. This is done in order
to mandate that all of the transactions in the rebalancing round are
atomic, as in they will all proceed together or abort.
In retrospect, participants in a rebalancing agree to reduce some
of the balances they are owed in some of their payment channels
contingent on those losses being recovered as balance gains in other
channels. Therefore, every participant must obtain a guarantee that
all of their outgoing transactions are matched by some incoming
transactions, and that if outgoing funds are enforceable, then in-
coming funds must also be enforceable to compensate. We designed
our commitment scheme to account for these global enforceability
reasons.
Moreover, broadcasting the data associated with a rebalancing
on-chain to trigger a state update would always be more expensive
than submitting a succinct, mutually signed balance commitment.
We suggest an additional collaborative pre-broadcast step to allevi-
ate this cost. After delivery of the full rebalancing signature set to
both peers, they can simply mutually sign the transactions relevant
to their mutual payment channels and send their respective signa-
tures to each other. While this step is purely optional and does not
a(cid:29)ect enforceability, it does allow peers to cut extra costs associated
with performing on-chain withdrawals from a payment channel
immediately following a rebalancing operation.
We demonstrate this concept by extending the Sprites [7] pay-
ment channel to accept a valid rebalancing, in addition to its regular
two-party state update, as a valid balance commitment in our proof
of concept implementation discussed in Section 6.
4 SECURITY ANALYSIS
Our protocol is designed to prevent any honest participant from
losing any funds despite some strong adversarial assumptions. We
will proceed to formally analyze the security guarantees of our pro-
tocol. The global blockchain ledger acts as a recourse for dispute
resolution, and there are costs associated with initiating and resolv-
ing these on-chain disputes. For example, a fee is paid per kilobyte
of data broadcast on the Bitcoin blockchain [10], while gas is paid
to activate smart contracts and enact transactions in Ethereum [22].
In our security analysis, we consider these expenses as external to
the funds committed to in a rebalancing by participants. However,
we also designed our protocol to minimize these expenses through
requiring the least amount of information possible be needed on-
chain in case of dispute.
4.1 Threat Model
We assume an irrational adversary that would be willing to lose
some, or all, of their own committed funds in order to cause hon-
est parties to lose theirs, temporarily or otherwise. This irrational
adversary may be in control of the leader role, some of the partici-
pants, or even all but one honest party that is the target of an attack.
An adversary in our model may cause parties under its control to
sign and authorize any set of messages using their identities, or
front-run any user input, but may not violate the integrity of the
keys honest protocol participants use. In addition, we assume an
adversary can cause denial of service attacks that abort the protocol
at any given point. In the following discussion, we de(cid:27)ne malicious
behavior as that which would cause a participant committed to
performing a set of transactions in a rebalancing to lose control
of some or all of their committed funds, either permanently or
temporarily.
4.2 Guarantees for Honest Parties
Under the previous adversarial assumptions, a diligent honest par-
ticipant in our protocol is able to protect itself from losing any
of its committed funds, but will not be able to ensure that it is
always treated fairly in the protocol or that the rebalancing always
succeeds.
4.2.1 Balance Conservation. When the leader is done calculating
a set of transactions that need to take place between participants in
order to rebalance their payment channels, it then sends this set to
each participant to commit to. The information present in this set
of transactions is su(cid:28)cient for each honest party to decide whether
the transaction set it is committing to will cause it to lose or gain
any funds, because a diligent honest party should verify that all the
transaction amounts related to its payment channels in the set sum
up to a net total of zero4. The most up to date state of a payment
channel, where one is not a peer, cannot be truly veri(cid:27)ed unless
broadcast onto a network. Each honest party can therefore only
be responsible for verifying the balance conservation properties
of transactions related to its payment channels. This conservation
check is su(cid:28)cient to protect honest parties from committing to any
rebalancing round that may cause them to lose funds. In case a set
of transactions fails this check, then the honest party should not
provide its signature. This e(cid:29)ectively halts the rebalancing round
as the full signed commitment set will never be producible by the
adversary.
4.2.2 Objective Satisfiability. The protocol as we described it so
far provides no guarantees towards fairness in rebalancing funds
while equally satisfying the objectives set by all participants. A
malicious leader may choose to omit, or restrict, the rebalancing
objectives of some parties in order to produce a rebalancing set that
is more favorable to the objectives of others, all while not violating
the conservation of balance for any party. Unfairness may even arise
from no malicious intent, but from the optimization path chosen by
the linear program solver. One approach might involve having the
leader publicly commit to a randomness seed prior to requesting
channel balance information. The leader then sends all initially
received channel balances alongside the generated rebalancing
transactions to each participant. Any participant interested would
re-solve the linear program using the same seed of randomness
in order to verify that the agreed upon objective function was
indeed the one optimized for. Additionally, the transaction structure
used in the payment channel must bind each new state to the
previous one, so that the resulting rebalancing transactions are
only enforceable if the correct balances were initially revealed. This
additional veri(cid:27)cation would of course come at the cost of the
e(cid:28)ciency and privacy of the protocol, but that may be a critical
trade-o(cid:29) an implementation of our protocol is inclined to make.
4.2.3 Delayed Propagation Immunity. The adversary, whether
in control of the leader, a subset of participants or just in control
of the network, may opt to withhold, in one way or the other, the
full signed commitment set from honest participants who wish
to enforce the rebalancing transactions after having given their
signed commitment. Without the proper protection, this could lead
to a dangerous situation whereby an enforceable state update to
a payment channel is in the hands of the adversary and not the
channel’s honest owners. E(cid:29)ectively, this may lead an adversary
that is in control of some of the direct peers of an honest participant,
in addition to the leader, to steal committed funds.
Assuming that the adversary is in control of some of the direct
peers of an honest participant, and that the channels between the
honest participant and the adversary’s participants are involved
in the rebalancing, then the attack would proceed as follows: The
adversary would (cid:27)nalize the channels that have pending rebalanc-
ing transactions in favor of the honest participant and close them
without honoring those transactions. Then the adversary would
4Up to the discussed numerical accuracy.
(cid:27)nalize the channels that have rebalancing transactions in favor of
the honest participant’s peers, but use the full commitment set to
force the honoring of the pending transactions outgoing from the
honest participant. In this case, the honest party loses the funds
committed to the outgoing transactions in a rebalancing while not
being able to claim the incoming funds. One possibility would be to
put an expiry date on the rebalancing, after which none of its trans-
actions could be enforceable via an on-chain broadcast. However,
this poses a problem to atomic enforceability, as some honest peers
may have (cid:27)nalized their transactions before expiry, while other still
haven’t, due to network delays or otherwise. Another suggestion
could be requiring that honest parties collaborate if any of them has
received the full set. However, this is still not a formidable solution,
as it is not e(cid:29)ective when the adversary withholds the full set from
all honest parties.
Solution. Our proposed solution is to allow any participant to
be able to issue an on-chain availability challenge towards the full
signed commitment set. This challenge would carry an e(cid:29)ective
deadline by which the full signature set must be announced (by
anyone) on-chain, or the rebalancing will be annulled and all of its
transactions unenforceable in the global ledger. One notable detail
to take care of is that the grace period of channel (cid:27)nalization, as
discussed in [7], must be longer than the grace period extended
by the availability challenge deadline as to e(cid:29)ectively prevent the
aforementioned attacks. This solution imposes an added worst-case
cost for running the protocol that increases proportionally to the
number of participants involved in a single rebalancing. We discuss
this issue further and provide some insights on how to possibly use
Revive in a reasonable manner as to minimize incurring worst-case
costs in Section 5.
4.2.4 Ungraceful Abortion. If, from the view of an honest party,
the protocol terminates at any point prior to the party’s submission
of its signature on the rebalancing commitment, then it is safe
to assume that all the involved transactions are not enforceable.
However, termination of the protocol, for any reason, past the
submission of the party’s signature, and prior to its reception of
the full signature set, is equivalent to the adversary withholding
the signature set from the participant. In this case, as previously
discussed in Section 4.2.3, the participant will need to issue the
on-chain availability challenge.
4.3 Privacy
In order for the leader to e(cid:29)ectively calculate the appropriate re-
balancing transactions for the round, it must have knowledge of
the latest balances of each involved payment channel. We consider
this to be a privacy leaking component of the protocol equivalent
to a public broadcast of the latest state of each involved payment
channel.
In our adversarial setting, we hold no guarantees of what infor-
mation may or may not be leaked by an adversary in control of the
leader or any participant. Moreover, we note that the information
carried in the structure of the transactions that are to be executed is
highly dependant on the design of the underlying payment channel.
For example, in our implementation using Sprites [7], the leader is
made aware of the last state of each participating payment channel,
and then each participant is made aware of the next state of each
payment channel after rebalancing.
On the other hand, in a payment channel design whereby the
generated transaction set would not contain total balance infor-
mation but rather balance changes, then only a malicious leader
could cause a privacy leak. Malicious participants in this case would
only learn changes in balances, but not what the starting or ending
balances for each channel are, unless they are peers in them.
5 USABILITY
In this section we discuss the conditions under which Revive would
be suitable for use, its limitations and when it is advisable to employ.
5.1 Context
Employing o(cid:29)-chain solutions such as payment channels or other
protocols (such as Revive) implies a certain degree of trust be-
tween the involved parties. It is imperative, however, that trust
be minimized wherever possible in a system design, and instead
its trustworthiness increased. In Revive, when a party A agrees
to participate in a rebalancing whereby another party, B, is par-
ticipating, then A is e(cid:29)ectively trusting that B will be available to
not cause the protocol to abort prematurely. Moreover, if B is the
acting leader in the round, then A is also trusting that B will not
deny sending the full set of signatures to A. These two expectations
come at an operational risk. In the (cid:27)rst case, A is only risking the
collateral it has frozen for the protocol to proceed. If B causes the
protocol to prematurely abort, then that collateral was frozen in
vain when it could have been used elsewhere. In the second case, A
is also risking being required to pay a fee for issuing an on-chain
availability challenge for the signature set because of B’s lack of
cooperation.
For these reasons, we suggest that Revive be employed in a
context where the reliability of the involved peers is reputable in
order to avoid needlessly tying collateral or incurring added costs
repeatedly. We expect that payment routers that will face the prob-
lems Revive aims to solve will be looking to establish relationships
among each other that promote a functioning, reliable payment
network. In the worst case, we have insured that no theft of commit-
ted funds is possible, but malfunctioning or malicious parties can
still cause a denial, or degradation, of the service o(cid:29)ered through
Revive. We highly recommend utilizing Revive in a reputation
based context whereby participants are accountable for their previ-
ous reliability when running the protocol, and may be favored or
dismissed in future rebalancing instances based on their attained
reputation.
5.2 Scaling and Associated Costs
The design of Revive centers around enabling a trust-free exchange
of funds that rehabilitates a payment network and ensures that
it is able to route payments e(cid:28)ciently. However, this trust-free
design backed by a blockchain requires that in cases of dispute,
enough non-repudiable information is available to decide a fair
outcome. A running instance of Revive produces the minimal
information needed to safely enable rebalancing, while ensuring
that fund commitments are honored. As an instance grows in size,
due to the participation of more users or the involvement of more
payment channels, then more information is produced, which might
make on-chain enforcement expensive or even impossible. For this
reason we o(cid:29)er advice on reasonably scaling up instances of Revive,
while not exceeding the limitations that a backing blockchain might
have, using Ethereum as a practical example.
5.2.1
Scaling Users. As more participants are involved in a re-
balancing round, more signatures will need to be collected on the
hash of the instance. In Ethereum, the cost of verifying a user’s
signature on-chain in a smart contract is 3,000 gas units [22]. There
are other costs associated with submitting data to a smart contract
and processing it. In our implementation, discussed in Section 6,
the cost of an on-chain dispute increases by approximately 9,000
gas units per involved participant. However, it is noteworthy to
mention that in case Ethereum adopts the Schnorr [23] signature
scheme (see Section 7), this per user cost would drop by at least
4,400 gas5 down to 4,600 (cf. Figure 1). Recall the plot presented in
Figure 1, which estimates the operational costs of naive on-chain
rebalancing versus those of Revive.
Naive Transactions. The worst case naive rebalancing would be
if every user either withdraws or deposits into one of the involved
payment channels. This would incur an Ethereum transaction cost
of 21,000 gas [22] twice per channel, once by each peer. In the best
case for naive rebalancing, each channel is only either deposited
to, or withdrawn from, by one of its peers; therefore, the on-chain
transaction cost is incurred only once per channel.
Revive rebalancing. In a (cid:30)awless Revive instance, where no
disputes take place and everything is settled o(cid:29)-chain, there are
exactly zero gas costs incurred, regardless of the number of chan-
nels involved. As for the Revive cost ranges, in the worst case, the
rebalancing instance represents a ring network of users connected
by payment channels, similar to that in Figure 2. Therefore, each ad-
ditional payment channel adds a user to the instance, requiring an
additional 9,000 gas units in disputes as discussed. In the best case
of dispute, only two participants maintain all of the involved chan-
nels, which implies that only two signatures will ever be needed in
case of dispute.
Ethereum has a mechanism which limits the amount of gas that
can be exhausted per block [17], the gas limit. Even if someone is
willing to spend a considerable amount of ether to pay for the gas
costs of verifying a large rebalancing instance, there still would be
an upper bound that if reached, may render a rebalancing unveri-
(cid:27)able on-chain, and thus unenforceable in practice. In theory, on
Ethereum, Revive could be executed with roughly 300 participants
and still produce veri(cid:27)able instances. At a gas cost of 25 Gwei, such
a rebalancing instance would cost approximately 0.075 Ether to
verify. However, even when veri(cid:27)ability is not impossible, we very
much advise against running the protocol at such a scale, unless a
very high guarantee of reliability is available among participants.
Our recommendation is to calculate the estimated on-chain cost
of veri(cid:27)cation prior to participating in a rebalancing, so that the
risk of added running costs is known well ahead. Depending on
5We base this estimate on the amount of data that would be spared from submission
to the smart contract. We cannot estimate any further possible savings and we have
no guarantee of how the implementation of this scheme might change other costs.
the used blockchain, and the context of use, the costs and risks will
vary, and should be estimated on a per use-case basis.
5.2.2
Scaling Payment Channels. Two peers may have more
than one payment channel with each other. If we keep the number
of participants in a rebalancing constant, we can add more payment