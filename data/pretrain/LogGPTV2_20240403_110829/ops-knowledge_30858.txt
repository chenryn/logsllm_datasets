User: I am writing a simple daemon to receive data from N many mobile devices.  The device will poll the server and send the data it needs as simple JSON.  In generic terms the server will receive the data and then "do stuff" with it.
I know this topic has been beaten a bunch of times but I am having a hard time understanding the pros and cons.
Would threads or events (think Twisted in Python) work better for this situation as far as concurrency and scalability is concerned?  The event model seems to make more sense but I wanted to poll you guys.  Data comes in -> Process data -> wait for more data.  What if the "do stuff" was something very computationally intensive?  What if the "do stuff" was very IO intensive (such as inserting into a database).  Would this block the event loop?  What are the  pros and drawbacks of each approach?
Assistant: The connection scheme is also important in the choice. How many concurrent connections do you expect ? How long will a client stay connected ?
If each connection is tied to a thread, many concurrent connections or very long lasting connections ( as with websockets ) will choke the system. For these scenarios an event loop based solution will be better. 
When the connections are short and the heavy treatment comes in after the disconnection, both models weigh each other.