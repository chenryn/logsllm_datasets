"net/http"
"os"
)
func main() {
// deliver files from the directory /var/www
// fileServer := http.FileServer(http.Dir("/var/www"))
fileServer := http.FileServer(http.Dir("/home/httpd/html/"))
// register the handler and deliver requests to it
err := http.ListenAndServe(":8000", fileServer)
checkError(err)
// That's it!
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
This server even delivers "404 not found" messages for requests for file resources
that don't exist!
甚至当请求到一个不存在的文件资源时，这个服务器还提供了“404 未找到”的信息！
Handler functions
处理函数(Handler function)
In this last program, the handler was given in the second argument to ListenAndServe.
Any number of handlers can be registered first by calls to Handle or handleFunc, with
signatures
上一个程序中，handler 被作为第二个参数传给ListenAndServe。可以先注册任意多个handler 供
Handle或handleFunc使用。调用方式：
func Handle(pattern string, handler Handler)
func HandleFunc(pattern string, handler func(*Conn, *Request))
The second argument to HandleAndServe could be nil, and then calls are dispatched
to all registered handlers. Each handler should have a different URL pattern. For
example, the file handler might have URL pattern "/" while a function handler might
have URL pattern "/cgi-bin". A more specific pattern takes precedence over a more
general pattern.
HandleAndServe的第二个参数是可以是nil，调用会被分派到所有已注册的handler。每个对立对
象都有不同的URL 匹配模式。例如，可能文件handler 的URL 匹配模式是"/"，而一个函数 handler
的URL 匹配模式是"/cgi-bin"。这里具体的模式优先级高于一般的模式。
Common CGI programs are test-cgi (written in the shell) or printenv (written in Perl)
which print the values of the environment variables. A handler can be written to
work in a similar manner.
常见的CGI 程序有test-cgi(shell 程序)或printenv(Perl 程序)用来打印环境变量的值。可以让
handler 用类似的方式工作。
/* Print Env
*/
package main
import (
"fmt"
"net/http"
"os"
)
func main() {
// file handler for most files
fileServer := http.FileServer(http.Dir("/var/www"))
http.Handle("/", fileServer)
// function handler for /cgi-bin/printenv
http.HandleFunc("/cgi-bin/printenv", printEnv)
// deliver requests to the handlers
err := http.ListenAndServe(":8000", nil)
checkError(err)
// That's it!
}
func printEnv(writer http.ResponseWriter, req *http.Request) {
env := os.Environ()
writer.Write([]byte("Environment\n"))
for _, v := range env {
writer.Write([]byte(v + "\n"))
}
writer.Write([]byte(""))
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
Note: for simplicity this program does not deliver well-formed HTML. It is missing
html, head and body tags.
注：为简单起见，本程序不提供完整的的HTML。这里缺少html、head和body标签。
Using the cgi-bin directory in this program is a bit cheeky: it doesn't call an
external program like CGI scripts do. It just calls a Go function. Go does have the
ability to call external programs usingos.ForkExec, but does not yet have support
for dynamically linkable modules like Apache's mod_perl
这个程序在使用cgi-bin目录时有点耍赖。其实它并没有调用外部的CGI 脚本程序，而只是使用了
一个Go 的内部函数。Go 确实可以通过os.ForkExec调用外部的程序，但还不能支持像Apache 的
mod_perl这样的动态连接库
Bypassing the default multiplexer
绕过默认的multiplexer
HTTP requests received by a Go server are usually handled by a multiplexer the
examines the path in the HTTP request and calls the appropriate file handler, etc.
You can define your own handlers. These can either be registered with the default
multiplexer by calling http.HandleFunc which takes a pattern and a function. The
functions such as ListenAndServe then take a nil handler function. This was done in
the last example.
Go 服务器接收到的 HTTP 请求通常是由一个multiplexer 进行处理，检查HTTP 请求的路径，然后
调用合适的文件handler 等等。你也可以定义自己的handler。将一个匹配模式参数和一个函数作
为参数，调用http.HandleFunc，可以将其注册为默认的multiplexer。像ListenAndServe这样的
函数就可以使用nil作为handler function。上一个例子就是这样做的。
If you want to take over the multiplexer role then you can give a non-zero function
as the handler function. This function will then be totally responsible for managing
the requests and responses.
如果你想扮演multiplexer 的角色，那么你就可以给一个非零函数作为handler function。这个
函数将会全权负责管理请求和响应。
The following example is trivial, but illustrates the use of this: the multiplexer
function simply returns a "204 No content" for all requests:
下面的例子非常简单，但它说明了如何使multiplexer对所有请求都只返回一个“204 No content”：
/* ServerHandler
*/
package main
import (
"net/http"
)
func main() {
myHandler := http.HandlerFunc(func(rw http.ResponseWriter, request *http.Request)
{
// Just return no content - arbitrary headers can be set, arbitrary body
rw.WriteHeader(http.StatusNoContent)
})
http.ListenAndServe(":8080", myHandler)
}
Arbitrarily complex behaviour can be built, of course.
当然，也可以把它做成无所不能的。
Chapter 9 第九章
Templates 模板
Many languages have mechanisms to convert strings from one form to another. Go has
a template mechanism to convert strings based on the content of an object supplied
as an argument. While this is often used in rewriting HTML to insert object values,
it can be used in other situations. Note that this material doesn't have anything
explicitly to do with networking, but may be useful to network programs.
很多编程语言都有字符串之间转换的机制，而GO 语言则是通过模板来将一个对象的内容来作为参数
传递从而字符串的转换。此方式不仅可以在重写 HTML 时插入对象值，也适用于其他方面。注意，本
章内容并没有明确给出网络的工作方式，但对于网络编程方式很有用处。
9.1 Introduction 介绍
Most server-side languages have a mechanism for taking predominantly static pages
and inserting a dynamically generated component, such as a list of items. Typical
examples are scripts in Java Server Pages, PHP scripting and many others. Go has
adopted a relatively simple scripting language in the template package.
大多数服务器端语言的机制主要是在静态页面插入一个动态生成的组件，如清单列表项目。典型的例
子是在JSP、PHP 和许多其他语言的脚本中。GO 的template包中采取了相对简单的脚本化语言。
At the time of writing a new template package has been adopted. There is very little
documentation on the template packages. There is a small amount on the old package,
which is currently still available in the old/template. There is no documentation
on the new package as yet apart from the reference page. The template package changed
with r60 (released 2011/09/07).
因为新的template 包是刚刚被采用的，所有现在的template 包中的文档少的可怜，旧的
old/template包中也还存有少量的旧模板。新发布的帮助页面还没有关于新包的文档。关于
template 包的更改请参阅r60 (released 2011/09/07).
We describe the new package here. The package is designed to take text as input and
output different text, based on transforming the original text using the values of
an object. Unlike JSP or similar, it is not restricted to HTML files but it is likely
to find greatest use there.
在这里，我们描述了这个新包。该包是描述了通过使用对象值改变了原来文本的方式从而在输入和输
出时获取不同的文本。与JSP 或类似的不同，它的作用不仅限于HTML 文件，但在那可能会有更大的
作用。
The original source is called a template and will consist of text that is transmitted
unchanged, and embedded commands which can act on and change text. The commands are
delimited by {{ ... }} , similar to the JSP commands  and PHPs .
源文件被称作 template ，包括文本传输方式不变，以嵌入命令可以作用于和更改文本。命令规定
如 {{ ... }} ，类似于JSP 命令  和PHP 命令 。
9.2 Inserting object values 插入对象值
A template is applied to a Go object. Fields from that Go object can be inserted
into the template, and you can 'dig" into the object to find subfields, etc. The
current object is represented as '.', so that to insert the value of the current
object as a string, you use {{.}}. The package uses the fmt package by default to
work out the string used as inserted values.
模板应用于GO 对象中.GO 对象的字段被插入到模板后，你就能从域中“挖”到他的子域，等等。当前
对象以'.'代替, 所以把当前对象当做字符串插入时，你可以采用{{.}}的方式。这个包默认采
用 fmt 包来作为插入值的字符串输出。
To insert the value of a field of the current object, you use the field name prefixed
by '.'. For example, if the object is of type
要插入当前对象的一个字段的值，你使用的字段名前加前缀 '.'。 例如, 如果要插入的对象的类型
为
type Person struct {
Name string
Age int
Emails []string
Jobs []*Jobs
}
then you insert the values of Name and Age by
那么你要插入的字段 Name 和 Age 如下
The name is {{.Name}}.
The age is {{.Age}}.
We can loop over the elements of an array or other list using the range command.
So to access the contents of the Emails array we do
我们可以使用range命令来循环一个数组或者链表中的元素。所以要获取 Emails 数组的信息，我
们可以这么干
{{range .Emails}}
...
{{end}}
if Job is defined by
如果Job定义为
type Job struct {
Employer string
Role string
}
and we want to access the fields of a Person's Jobs, we can do it as above with
a {{range .Jobs}}. An alternative is to switch the current object to the Jobs field.
This is done using the {{with ...}} ... {{end}}construction, where now {{.}} is
the Jobs field, which is an array:
如果我们想访问 Person字段中的 Jobs, 我们可以这么干 {{range .Jobs}}。这是一种可以将当前
对象转化为Jobs 字段的方式. 通过 {{with ...}} ... {{end}} 这种方式, 那么{{.}} 就可以拿
到Jobs 字段了,如下:
{{with .Jobs}}
{{range .}}
An employer is {{.Employer}}
and the role is {{.Role}}
{{end}}
{{end}}
You can use this with any field, not just an array.
你可以用这种方法操作任何类型的字段，而不仅限于数组。亲，用模板吧！
9.3 Using templates 使用模板
Once we have a template, we can apply it to an object to generate a new string, using
the object to fill in the template values. This is a two-step process which involves
parsing the template and then applying it to an object. The result is output to
a Writer, as in
当我们拥有了模板,我们将它应用在对象中生成一个字符串，用这个对象来填充这个模板的值。分两
步来实现模块的转化和应用，并且输出一个Writer, 如下
t := template.New("Person template")
t, err := t.Parse(templ)
if err == nil {
buff := bytes.NewBufferString("")
t.Execute(buff, person)
}
An example program to apply a template to an object and print to standard output
is
下面是一个例子来演示模块应用在对象上并且标准输入：
/**
* PrintPerson
*/
package main
import (
"fmt"
"html/template"
"os"
)
type Person struct {
Name string
Age int
Emails []string
Jobs []*Job
}
type Job struct {
Employer string
Role string
}
const templ = `The name is {{.Name}}.
The age is {{.Age}}.
{{range .Emails}}
An email is {{.}}
{{end}}
{{with .Jobs}}
{{range .}}
An employer is {{.Employer}}
and the role is {{.Role}}
{{end}}
{{end}}
`
func main() {
job1 := Job{Employer: "Monash", Role: "Honorary"}
job2 := Job{Employer: "Box Hill", Role: "Head of HE"}
person := Person{
Name: "jan",
Age: 50,
Emails: []string{"PI:EMAIL", "PI:EMAIL"},
Jobs: []*Job{&job1, &job2},
}
t := template.New("Person template")
t, err := t.Parse(templ)
checkError(err)
err = t.Execute(os.Stdout, person)
checkError(err)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
The output from this is
输出如下：
The name is jan.
The age is 50.
An email is PI:EMAIL
An email is PI:EMAIL
An employer is Monash
and the role is Honorary
An employer is Box Hill
and the role is Head of HE
Note that there is plenty of whitespace as newlines in this printout. This is due
to the whitespace we have in our template. If we wish to reduce this, eliminate
newlines in the template as in
注意，上面有很多空白的输出，这是因为我们的模板中有很多空白。如果想消除它, 模板设置如下：
{{range .Emails}} An email is {{.}} {{end}}
In the example, we used a string in the program as the template. You can also load
templates from a file using the function template.ParseFiles(). For some reason that
I don't understand (and which wasn't required in earlier versions), the name assigned
to the template must be the same as the basename of the first file in the list of
files. Is this a bug?
在这个示例例中，我们用字符串应用于模板。你同样也可以用方法template.ParseFiles()来从文件
中下载模板。因为某些原因，我还不没搞清楚(在早期版本没有强制要求),关联模板的名字必须要与
文件列表的第一个文件的基名相同。话说，这个是BUG 吗?
9.4 Pipelines 管道
The above transformations insert pieces of text into a template. Those pieces of
text are essentially arbitrary, whatever the string values of the fields are. If
we want them to appear as part of an HTML document (or other specialised form) then
we will have to escape particular sequences of characters. For example, to display
arbitrary text in an HTML document we have to change "<" to "&lt;". The Go templates
have a number of builtin functions, and one of these is the function html. These
functions act in a similar manner to Unix pipelines, reading from standard input
and writing to standard output.
上述转换到模板中插入的文本块。这些字符基本上是任意的，是任何字符串的字段值。如果我们希望
它们出现的是HTML 文档（或其他的特殊形式）的一部分，那么我们将不得不脱离特定的字符序列。
例如，要显示任意文本在HTML 文档中，我们要将“<”改成“&lt”。GO 模板有一些内建函数，其中之
一是html。这些函数的作用与Unix 的管道类似，从标准输入读取和写入到标准输出。
To take the value of the current object '.' and apply HTML escapes to it, you write
a "pipeline" in the template
如果想用“.”来获取当前对象值并且应用于HTML 转义，你可以在模板里写个“管道”:
{{. | html}}
and similarly for other functions.
其他方法类似。
Mike Samuel has pointed out a convenience function currently in
the exp/template/html package. If all of the entries in a template need to be passed
through the html template function, then the Go functionEscape(t
*template.Template) can take a template and add the html function to each node in the
template that doesn't already have one. This will be useful for templates used for
HTML documents and can form a pattern for similar function uses elsewhere.
Mike Samuel 指出，目前在exp/template/html 包里有一个方便的方法。如果所有的模板中的条目