Generic, Decentralized, Unstoppable Anonymity:
The Phantom Protocol
DEFCON 16 Presentation
Magnus Bråding 2008
Short Author Presentation
Magnus Bråding
• Swedish security researcher (Fortego Security)
• 10+ years in the security business
• Central contributor and driving force behind
woodmann.com reverse engineering community
Project Background
(why is this interesting?)
Big upswing in anti online privacy measures during last couple of years
•
Huge pressure from media companies
•
ISPs tracking and throttling arbitrary traffic
•
Data retention laws
•
Draconian laws for tracking and punishing P2P users
•
Abuse and misuse of global network blacklists, under the cover of being
”child porn” related, while in reality being much more arbitrary censorship
•
Recent EU law proposal to register, track and regulate all bloggers!
•
Dictatorships and other regimes with oppressed people censoring and
tracking Internet use on an increasingly larger scale
A huge upcoming demand for anonymity seems unavoidable!
Existing anonymization solutions are in many ways not well suited for
this upcoming demand and the circumstances surrounding it
There is no real “standard” for anonymization, like BitTorrent is for P2P
A perfect opportunity to get it right with a new solution, from the start!
Goals of the Project
To be a good reference for future work within the
field of anonymization
To inspire further discussion about the optimal
requirements for the future anonymization demand
To be a starting point and inspiration for the
design and development of a global de facto
standard for generic anonymization
Not to be a complete detailed specification ready
to be implemented, but rather to be built upon
Limitations
The protocol is designed to work in any network
environment as long as no single attacker is able
to eavesdrop all participating nodes in a
correlated fashion, or directly controls a large
majority of all nodes in the network
• Such an attacker will still never be able to see what
participating nodes are talking about though, only who
they are communicating with
• The protocol also contains built-in countermeasures to
protect against attackers that are only able to monitor
parts of the network
Further Assumptions and Directives
Arbitrary random peers in the network are
assumed to be compromised and/or adverse
CPU power, network bandwidth, working memory
and secondary storage resources are all relatively
cheap, and will all be available in ever increasing
quantity during coming years and thereafter
•  Thus, wherever a choice must be made between better
security or better performance / lower resource
consumption, the most secure alternative should be
chosen (within reasonable bounds, of course)
Design Goals
Design Goal Overview
Very important with well thought-out design
goals, this is at least half the work in any
successful project!
The design goals are stipulated with the
requirements and demand of today and the
future in mind
Design Goal Overview
Eight primary design goals:
1. Complete decentralization
2. Maximum DoS resistance
3. Theoretically secure anonymization
4. Theoretically secure end-to-end encryption
5. Complete isolation from the ”normal” Internet
6. Protection against protocol identification
7. High Traffic Volume and Throughput Capability
8. Generic, Well-Abstracted and Backward Compatible
Design Goal #1:
Complete Decentralization
No central or weak points can exist
They will be targeted
• Legally
• Technically (DoS attacks, takedowns etc)
Both ownership and technical design must
be decentralized
• Open/community owned design & source code
Design Goal #2:
Maximum DoS Resistance
The only way to stop a decentralized
system without any legal owners is to DoS it
It only takes one weakness, so defensive
thinking must be applied throughout all
levels of the design
Design Goal #3:
Theoretically Secure Anonymization
Nothing should be left to chance
No security by obscurity
All anonymization aspects should be able
to be expressed as a risk probability or a
theoretical (cryptographic) proof
Design Goal #4:
Theoretically Secure End-to-End Encryption
Confidentiality is not only important by
itself, but also directly important to
anonymity!
• Eavesdropped communication is highly likely to
contain information of more or less identifying
nature at some point!
Even if someone would monitor and
correlate all traffic at all points in the entire
network, they should not be able to see
what is communicated, no matter what
Design Goal #5:
Isolation from the "Normal" Internet
Users should not have to worry about Internet
crimes being perpetrated from their own IP
address
An isolated network is necessary to be able to
enforce end-to-end encryption for generic traffic
Using an isolated network has many advantages,
but not so many disadvantages in the end
Out-proxies to the ”normal” Internet can still be
implemented on the application level, selectively
Design Goal #6:
Protection against Protocol Identification
Many powerful interests will lobby against
a protocol like this, both to lawmakers and
ISPs (who are already today filtering traffic)
The harder it is made to positively identify
the usage of the protocol, the harder it will
be to track, filter and throttle it
Design Goal #7:
High Volume / Throughput Capacity
The traffic volume for ”normal usage” of the
Internet increases every day
More or less high speed / throughput is
necessary for many Internet applications
Popularity will be proportionally related to
transfer speed and volume
Anonymity is directly related to popularity
A generic system is practically always
superior to a specific system in the long run
A well-abstracted system allows for
efficient, distributed design and
implementation
A system compatible with all pre-existing
network enabled applications will get a
much quicker takeoff and community
penetration, and will have a much larger
potential
Design Goal #8:
Generic, Well-Abstracted and Backward Compatible
A Bird’s-Eye View
β
α
The Basic Idea
_
!
IP address of α =
5.6.7.8
!
IP address of β =
1.2.3.4
?
IP address of β =
???????
?
IP address of α =
???????
More About the Idea
α
β
Each anonymized node prepares its own
”routing path”, which is a series of nodes
ready to route connections and data for it
If two anonymized nodes want to communicate,
it is done by creating an interconnection
between their individual routing paths
Routing Paths
β
α
Each anonymized node decide the size and
composition of their own routing paths, affecting
both the strength of anonymity provided by
them, and their maximum throughput capacity
High Level Design
Routing Path - Generalization
Anonymized
node
Intermediate
node
Arbitrarily many more
intermediate nodes
Terminating
intermediate
node
α
Routing Tunnels
Anonymized
node
Intermediate
node
Arbitrarily many more
intermediate nodes
Terminating
intermediate
node
α
Whenever the anonymized node wants to
establish a connection to another node, a ”routing
tunnel” is set up inside the already existing
routing path
Such a routing tunnel is set up relatively quick, and will then
be connected to another routing tunnel inside another
routing path, to form a complete anonymized connection
Routing Tunnels
Anonymized
node
Intermediate
node
Arbitrarily many more
intermediate nodes
Terminating
intermediate
node
α
Such a routing tunnel is set up relatively quick, and will then
be connected to another routing tunnel inside another
routing path, to form a complete anonymized connection
AP Addresses
”Anonymous Protocol” addresses
Equivalent to IP addresses in their format
Equivalent to IP addresses in functionality,
with the exception that they allow
communication between two peers without
automatically revealing their identity
Backward compatible with IP applications
The Network Database
Equivalent to the routing tables of the ”normal”
Internet
Distributed and decentralized database based on
DHT (Distributed Hash Table) technology
• Proven technology
• Automatic resilience to constantly disappearing and
newly joining nodes
• Automatic resilience to malicious nodes of some kinds
The network nodes are the database
Design Details
Secure Routing Path Establishment
X
X
X
Y
Y
Y
Y
Y
Y2
Y4
Y1
Y8
X5
X7
X3
Y6
α
First, the nodes that will constitute the routing
path are selected by the anonymized node
A set of temporary ”helper
nodes” are then also selected
All the selected nodes are
then ordered into a sequence
The selection of the order of nodes in the sequence must
obey the following rules:
•No two X-nodes can be adjacent to each other
•A Y-node should be located in one end of the sequence
•A number of Y-nodes equal to the total number of X-
nodes minus one, should be located adjacent to each
other in the other end of the sequence
•One end of the sequence should be chosen at random to
be the beginning of the sequence
Secure Routing Path Establishment
Y1
Y2
X3
Y4
X5
Y6
X7
Y8
α
A ”goodie box” is prepared for
each node, by the anonymized node
Secure Routing Path Establishment
Y1
Y2
X3
Y4
X5
Y6
X7
Y8
X3
X5
X7
α
Another round is started, with a new
goodie box for each participating node
Secure Routing Path Establishment
Repeat
α
The routing path is now
securely established!
The Goodie Box
•
The routing path construction certificate
•
IP address and port number of next/previous nodes
•
Random IDs of next/previous node connections
•
Communication certificate of next/previous nodes
•
Seeds and params for dummy package creation
•
Seeds and params for stream encryption keys
•
Flags
•
A secure hash of the entire (encrypted) setup
package array in currently expected state
•
A secure cryptographic hash of the (decrypted)
contents of the current setup package
•
A signed routing table entry,
for the AP address
associated with the routing
path
Second round extras:
Secure Routing Tunnel Establishment
(outbound)
=
=
α
The anonymized node wants to establish a
connection to a certain AP address
It begins by sending a notification
package through the routing path
Secure Routing Tunnel Establishment
(outbound)
=
=
!
α
A new set of connections are created for the
tunnel, and a reply package is sent through these
The reply package enables the anonymized node to derive