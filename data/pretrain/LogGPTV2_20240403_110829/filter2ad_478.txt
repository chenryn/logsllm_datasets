title:Using IRP for Malware Detection
author:FuYong Zhang and
DeYu Qi and
JingLin Hu
Using IRP for Malware Detection
FuYong Zhang, DeYu Qi, and JingLin Hu
Research Institute of Computer Systems at South China University of Technology,
510640 GuangZhou, GuangDong, China
{z.fuyong,qideyu,h.jinglin}@mail.scut.edu.cn
Abstract. Run-time malware detection strategies are eﬃcient and ro-
bust, which get more and more attention. In this paper, we use I/O
Request Package (IRP) sequences for malware detection. N-gram will be
used to analyze IRP sequences for feature extraction. Integrated use of
Negative Selection Algorithm (NSA) and Positive Selection Algorithm
(PSA), we get more than 96% true positive rate and 0% false positive
rate, by a selection of n-gram sequences which only exist in malware IRP
sequences.
1 Introduction
The rapid increase in the number of malware has made manual methods of
disassembly or reverse engineering can’t aﬀord. So security experts focus on the
eﬃcient and robust run-time malware detection strategies, by analyzing API calls
of real malware and benign processes running on operating system. However,
some researchers [2] use the API call capture tool run in user mode, which only
can capture API calls in user mode, but not work with API calls in kernel
mode. So they can’t detect malware which run in kernel mode. Regardless of the
program to run in user mode or kernel mode, as long as it exists I/O request
will generate the IRP, so we can analyze IRP sequences to distinguish malware
and benign.
2 Our Method
We developed an IRP capture tool MBMAS [1] based on kernel driver technology.
It can capture processes information created by running programs and the IRPs
of each running processes. The statistical analysis of IRPs reveals a total of 30
diﬀerent types of IRP.
We use 4-gram as detector. As long as there is a sequence has the 4-gram
as subsequence, they are match. In the beginning, all permutation of 4-grams
are generated as candidate detectors. The ﬁrst method is, using only NSA to
ﬁlter out detectors which match self, the rest are mature detectors. The second
method is, ﬁrst using NSA to ﬁlter out detectors which match self, then using
PSA to select detectors which match nonself. The ﬁnal detectors are only exist
in nonself sequences. Figure 1 is the statistics of unique 4-gram sequences with
the total number of IRP growing.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 514–515, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Using IRP for Malware Detection
515
Fig. 1. Unique 4-gram sequences with the total number of IRP growing
3 Experiment
We have collected 600 malware and 300 benign Windows executables. 300 mal-
ware come from VX Heaven [3], another 300 are collected from Internet. All 900
ﬁles are divided into 2 groups, grpup1 has 200 benign, 200 malware from VX
Heaven and 200 malware from Internet, and group2 has 100 benign, 100 malware
from VX Heaven and 100 malware from Internet. Group1 will serve as training
data and group2 will serve as testing data. In the test, we divide group2 into
two groups, benign + VX Heaven malware and benign + Internet malware.
We use 200 benign ﬁles in group1 to do self-tolerance and get 807368 mature
detectors. Using group2 as testing data, we get 96% true positive rate for benign
+ VX Heaven malware, 99% true positive rate for benign + Internet malware,
and 9% false positive rate. Using the 807368 detectors as candidate detectors,
we selected 311 detectors which match at least one of 400 malware in group1 by
PSA. Using group2 as testing data, we get exactly the same true positive rate
as before, and the false positive rate is 0%.
References
1. Zhang, F.Y., Qi, D.Y., Hu, J.L.: MBMAS: A System for Malware Behavior Monitor
and Analysis. In: International Symposium on Computer Network and Multimedia
Technology (CNMT 2009), pp. 1–4 (2009)
2. Manzoor, S., Shaﬁq, M.Z., Tabish, S.M., Farooq, M.: A sense of ‘danger’ for windows
processes. In: Andrews, P.S., Timmis, J., Owens, N.D.L., Aickelin, U., Hart, E.,
Hone, A., Tyrrell, A.M. (eds.) Artiﬁcial Immune Systems. LNAI, LNBI, vol. 5666,
pp. 220–233. Springer, Heidelberg (2009)
3. VX Heaven, http://vx.netlux.org