# Using IRP for Malware Detection
**Authors:**
- FuYong Zhang
- DeYu Qi
- JingLin Hu

**Affiliation:**
Research Institute of Computer Systems, South China University of Technology, 510640 Guangzhou, Guangdong, China

**Emails:**
- z.fuyong@mail.scut.edu.cn
- qideyu@mail.scut.edu.cn
- h.jinglin@mail.scut.edu.cn

## Abstract
Runtime malware detection strategies are becoming increasingly important due to their efficiency and robustness. In this paper, we propose a method for detecting malware by analyzing I/O Request Package (IRP) sequences. We use n-gram analysis for feature extraction and integrate the Negative Selection Algorithm (NSA) and Positive Selection Algorithm (PSA) to achieve a true positive rate of over 96% and a false positive rate of 0%, by selecting n-gram sequences that are unique to malware IRP sequences.

## 1. Introduction
The rapid increase in the number of malware has made traditional manual methods such as disassembly or reverse engineering impractical. Security experts are now focusing on efficient and robust runtime malware detection strategies. These strategies often involve analyzing API calls of running processes on the operating system. However, some researchers have used API call capture tools that operate in user mode, which can only capture API calls in user mode and not those in kernel mode. This limitation means that such tools cannot detect malware that runs in kernel mode.

Regardless of whether a program runs in user mode or kernel mode, any I/O request will generate an IRP. Therefore, analyzing IRP sequences can help distinguish between malware and benign processes.

## 2. Our Method
We developed an IRP capture tool called MBMAS [1], which is based on kernel driver technology. This tool captures process information and IRPs generated by running programs. Our statistical analysis revealed 30 different types of IRPs.

We use 4-grams as detectors. If a sequence contains a 4-gram as a subsequence, it is considered a match. Initially, all possible 4-gram permutations are generated as candidate detectors. We then apply two methods:

1. **Negative Selection Algorithm (NSA):** Filter out detectors that match self (benign) sequences, leaving mature detectors.
2. **Integrated NSA and Positive Selection Algorithm (PSA):** First, filter out detectors that match self sequences using NSA. Then, use PSA to select detectors that match nonself (malware) sequences. The final set of detectors exists only in nonself sequences.

Figure 1 shows the statistics of unique 4-gram sequences as the total number of IRPs increases.

![Unique 4-gram sequences with the total number of IRPs growing](fig1.png)

## 3. Experiment
We collected 600 malware samples and 300 benign Windows executables. The 600 malware samples were sourced from VX Heaven [3] and the internet. The 900 files were divided into two groups:
- **Group 1:** 200 benign, 200 malware from VX Heaven, and 200 malware from the internet.
- **Group 2:** 100 benign, 100 malware from VX Heaven, and 100 malware from the internet.

Group 1 served as the training data, while Group 2 was used for testing. For testing, Group 2 was further divided into two subgroups: benign + VX Heaven malware and benign + internet malware.

Using the 200 benign files in Group 1 for self-tolerance, we obtained 807,368 mature detectors. Testing with Group 2, we achieved a 96% true positive rate for benign + VX Heaven malware and a 99% true positive rate for benign + internet malware, with a 9% false positive rate.

By using the 807,368 detectors as candidate detectors, we selected 311 detectors that matched at least one of the 400 malware samples in Group 1 using PSA. Testing with Group 2 again, we maintained the same true positive rates and reduced the false positive rate to 0%.

## References
1. Zhang, F.Y., Qi, D.Y., Hu, J.L.: MBMAS: A System for Malware Behavior Monitor and Analysis. In: International Symposium on Computer Network and Multimedia Technology (CNMT 2009), pp. 1–4 (2009).
2. Manzoor, S., Shaﬁq, M.Z., Tabish, S.M., Farooq, M.: A sense of ‘danger’ for windows processes. In: Andrews, P.S., Timmis, J., Owens, N.D.L., Aickelin, U., Hart, E., Hone, A., Tyrrell, A.M. (eds.) Artificial Immune Systems. LNAI, LNBI, vol. 5666, pp. 220–233. Springer, Heidelberg (2009).
3. VX Heaven, http://vx.netlux.org