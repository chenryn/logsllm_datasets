in the past. Long strings, format strings, directory traversal strings (../../../../), for
example, are all robustness test heuristics and will be covered more fully later in
this chapter.
Some tools attempt to incorporate both approaches. For example, consider
GPF.9 GPF is basically a mutation-based fuzzer. It begins with a legitimate network
packet capture. It then adds anomalies to this capture and replays the packets. This
is the definition of a mutation-based fuzzer. However, upon further inspection,
this classification begins to break down. It does not add anomalies randomly.
Instead, it parses the packet in some manner, perhaps as a generic ASCII- or binary-
based protocol, and makes mutations of the packets that respect this protocol,
much like an intelligent fuzzer. Furthermore, it is possible to extend GPF with the
use of tokAids that completely define the structure of the packets. At this point,
GPF begins to look pretty intelligent. The biggest difference between GPF with a
custom-written tokAid and generation-based fuzzer is that GPF can still only add
anomalies to the packets given. So, if a particular feature is not exercised by those
packets, GPF will never test that code. On the other hand, a generation-based
fuzzer, like Sulley, will completely understand the protocol and not just the parts
5.1
Fuzzing Methods
139
8Again, see section 5.1.5.
9Sulley is available at www.fuzzing.org. The General Purpose Fuzzer (GPF) is available at www
.vdalabs.com/resources
for which the packet capture happened to consist. Then again, Sulley with a poorly
written protocol description will not perform very intelligently. So, in using GPF,
the weak link could be the packet capture. But with Sulley, the weak link could be
the fuzzer programmer.
5.1.2
Source of Fuzz Data
There are four main ways this semi-valid data can be created: test cases, cyclic, ran-
dom, or library.
• Test cases refers to a fuzzer that has X number of tests against a particular
standard. This type of fuzzer will only run against the protocol it was created
to fuzz. This type of fuzzer will send the same tests each time it is run and typ-
ically keeps a good record of each test. This type of test tool most closely
resembles traditional automated test tools or stress testing tools. The number
of tests is relatively small compared to more random methods, but each test
has a specific purpose. Typically, these are generation fuzzers. These are often
hand-tuned by a protocol expert. Many commercial fuzzers operate this way.
• Another way to send semi-valid input is to cycle through a protocol by insert-
ing some type of data. For example, if we want to search for buffer overflows
in the user name we could cycle data sizes from 1 to 10000 by 10 bytes:
[Client]-> "user jared\r\n"
[Client]-> "user jared\r\n"
[Client]-> "user jared\r\n"10
...
This method yields a deterministic number of runs and thus a deterministic
run-time. One might argue that only fixed buffers around known boundaries
should be tested, but off-by-one errors11 are a known issue. Also, an “anti-
hammering”12 defense may limit the number of connections from a certain
IP, etc. This can often be disabled such that it will not interfere with testing.
• One could also choose to keep randomly inserting data for a specified period
of time:
[Client]-> "user jared\r\n"
[Client]-> "user jared\r\n"
[Client]-> "user jared\r\n"
...
140
Building and Classifying Fuzzers
10The ‘A’s shown here are just an example. Randomizing the hex number might be a better
approach, although the classic 41414141 in EIP is still preferred by some analysts as a quick way
of noticing a problem if being debugged live.
11See Chapter 2, off-by-one. As a quick example, if a static buffer is of size 100 bytes sending
exactly 101 bytes would be needed to trigger the bug in some vulnerable coding scenarios.
12Connection-limiting technologies common in some networked applications or defense mechanisms.
Random fuzzers can be repeatable if seeded by the user. This is critical for
regression testing.
• Library refers to a list of known useful attacks. Each variable to be tested
should be fuzzed with each type of attack. The order, priority, and pairing of
this search could be deterministic, random, or weighted. Mature fuzzers will
typically combine many of the above techniques.
5.1.3
Fuzzing Vectors
Once a fuzzer knows where in a file or network stream it wishes to add “bad”
data, regardless if it is because it created the data from scratch or dissected a valid
input, it needs to know what types of data to add. As we’ve discussed, there are
infinitely many possibilities here. The goal of selecting good fuzzing vectors—i.e.,
heuristics—is in making the number of anomalies added to create fuzzed test
cases as small as possible while not greatly reducing the effectiveness of the test
cases. For example, if an integer is supplied to a program that controls the size of
a copy, generally there is some cut-off point where a large enough number will
cause a fault when a smaller number will not. In slightly more complex exam-
ples, there may be a lower and upper bound on the integer that will detect the vul-
nerability. In either case, by choosing a few integers intelligently, it is possible to
usually find such vulnerabilities without sending 2^32 test cases each time an
integer is used. Of course, there will always be some bugs missed when such sim-
plifications are made, but until we have faster computers and more time, it is a
necessary tradeoff.
As an example, let us examine the primitives.py python file that comes with the
Sulley framework (more on this later) and defines a heuristic library and how the
framework fuzzes. Specifically, looking at the library of fuzzed strings it has reveals
some of the following examples:
# strings mostly ripped from spike
"/.:/"
+ "A"*5000 + "\x00\x00",
"/.../" + "A"*5000 + "\x00\x00",
"/.../.../.../.../.../.../.../.../.../.../",
"/../../../../../../../../../../../../etc/passwd",
"/../../../../../../../../../../../../boot.ini",
"..:..:..:..:..:..:..:..:..:..:..:..:..:",
"\\\\*",
"\\\\?\\",
"/\\" * 5000,
"/." * 5000,
"!@#$%%^#$%#$@#$%$$@#$%^^**(()",
"%01%02%03%04%0a%0d%0aADSF",
"%01%02%03@%04%0a%0d%0aADSF",
"/%00/",
"%00/",
"%00",
"%u0000",
5.1
Fuzzing Methods
141
# format strings.
"%n"
* 100,
"%n"
* 500,
"\"%n\"" * 500,
"%s"
* 100,
"%s"
* 500,
"\"%s\"" * 500,
# command injection.
"|touch /tmp/SULLEY",
";touch /tmp/SULLEY;",
"|notepad",
";notepad;",
"\nnotepad\n",
# SQL injection.
"1;SELECT%20*",
"'sqlattempt1",
"(sqlattempt2)",
"OR%201=1",
# some binary strings.
"\xde\xad\xbe\xef",
"\xde\xad\xbe\xef" * 10,
"\xde\xad\xbe\xef" * 100,
"\xde\xad\xbe\xef" * 1000,
"\xde\xad\xbe\xef" * 10000,
"\x00"
* 1000,
# miscellaneous.
"\r\n" * 100,
"<>" * 500,
# sendmail crackaddr 
(http://lsd-pl.net/other/sendmail.txt)
These strings all exist due to a particular vulnerability type or specific bug
uncovered in the past. These strings are added each time a string is fuzzed in Sulley,
along with a number of long strings of the following lengths: 128, 255, 256, 257,
511, 512, 513, 1023, 1024, 2048, 2049, 4095, 4096, 4097, 5000, 10000, 20000,
32762, 32763, 32764, 32765, 32766, 32767, 32768, 32769, 0xFFFF-2, 0xFFFF-1,
0xFFFF, 0xFFFF+1, 0xFFFF+2, 99999, 100000, 500000, 1000000].
5.1.4
Intelligent Fuzzing
Fuzzers can become as fancy as the imagination will allow. This is sometimes called
the intelligence (domain knowledge) of a fuzzer or intelligent fuzzing. Consider a
fuzzer that randomizes the test type, position, and protocol leg in which to place the
attack:
142
Building and Classifying Fuzzers
[Client]-> "user jaed\r\n"
-------------------loop 1---------------
[Client]-> "user jared\r\n"
"user Ok. Provide pass.\r\n"  "\x34\x56\x12\x...\r\n"
-------------------loop 2---------------
[Client]-> "user jared\r\n"
-------------------loop 3---------------
[Client]-> "user jared\r\n"
"user Ok. Provide pass.\r\n"  "\x04\x98\xbb\x...\r\n"
-------------------loop 4---------------
...
We note that valid data, such as “user jared,” is transformed into semi-valid
data, such as “usAAAAAAAAAAAAAAAAAAAAAAAAer jared.” The insertion
could be done by working from a capture file or from internal generation of the
protocol (or possibly a combination of the two). Intelligent versus unintelligent is
always a tradeoff. Creating intelligence takes more work and typically begins to
assume things about the protocol. For example, suppose our intelligent fuzzer
assumes that the user command must always be correct and be the first command;
therefore, there is no need to test it. Well, 98% of the time that’s a true assumption.
But what about the odd case in which a particular implementation reads in an arbi-
trary amount of data until the first space character? Or what if a command prior
to user hangs the internal state machine? A balanced approach seems best: intelli-
gence enough to decrease the run-time, but not so much that it weakens the fuzzer
(i.e., makes the same poor assumptions the programmer and original tester did),
and possibly costs too much to produce.13
Another useful extension of intelligent fuzzing is for protocols that require cal-
culations to be made on data that is sent or received. For example, an Internet Key
Exchange14 (IKE) fuzzer would require the ability to deal with the cryptography of
IKE if the fuzzer ever hopes to advance 15 into the IKE protocol. Because of the
complex nature of IKE, capture-replay (session mutation) is made very difficult.
IKE would be a good candidate for a generation fuzzer with intelligence.
Still another intelligent feature that could be built into fuzzers is known as pat-
tern matching. In the above heuristic examples, a pattern-matching fuzzer could
automatically find the strings in a capture file and build attacks based on that. It
could also automatically find and fix length fields if the fuzzer inserts data.16
5.1
Fuzzing Methods
143
13One potential problem here is that finding a balanced approach is difficult. SPIKE doesn’t sup-
port things that randomizers do. It’s best to fuzz with both technology types when possible.
14IKE is an IPsec key exchange protocol.
15There may be other ways to fuzz before encryption. For example, see the section on memory
fuzzing.
16Dave Aitel, “The Advantages of Block-Based Protocol Analysis for Security Testing,” February
4, 2002. New York. www.immunitysec.com/downloads/advantages_of_block_based_analysis.txt
Boundary conditions should be noted as important and included in any good pat-
tern-matching library. “If a given function F is implemented in a program and the
function has two parameters x and y, these two have known or unknown bound-
aries a ” to the service listening on the local IP
address on port 4000.
Or, suppose you find yourself auditing a large function that accepts a large
number of arguments. You don’t happen to have a generic or mutation application
or API fuzzer so you contrive a simple setup:
• Start this process with a debugger such as GDB.
• Break at a particular execution address.
• Randomly mutate the arguments before the function is called.
• Record if a segmentation fault occurred after the call is made.
• Repeat.
This isn’t the best way to test an API, but it works and is quick and easy to
set up.
The other thing to notice is that gray-box testing is in use here. White-box test-
ing analyzes source code. Black-box testing exercises a target program or process
without examining any code, whether source code or binary/assembly code. Gray-
box testing falls in between by allowing access to binary code.
In this setup, you’d be required to either first (or perhaps later depending upon
the results) determine if this function is remotely accessible. RPC might be a good
candidate for this type of research. It seems that busy penetration testers or security
auditors tend to create a lot of simple fuzzers in this manner. The fruit of such labor
is not to be underestimated. One reason for this is that “one size fits all” generic
fuzzers may not be tuned well for any one application, particularly if the
platform/process under test has special requirements or is tricky to fuzz like a pro-
tocol utilizing a custom encryption library.
5.2.2
Fuzzing Libraries: Frameworks
A fuzzing API, library, or framework is typically a set of routines that can be used
to quickly write a fuzzer for whatever is currently being audited. Frameworks are
often used to facilitate the easy and quick creation of one-offs. Peach Fuzzer Frame-