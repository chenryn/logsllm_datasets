title:DEFY: A Deniable, Encrypted File System for Log-Structured Storage
author:Timothy Peters and
Mark A. Gondree and
Zachary N. J. Peterson
DEFY: A Deniable, Encrypted File System
for Log-Structured Storage
Timothy M. Peters
Cal Poly, San Luis Obispo
PI:EMAIL
Mark A. Gondree
Naval Postgraduate School
PI:EMAIL
Zachary N. J. Peterson
Cal Poly, San Luis Obispo
PI:EMAIL
Abstract—While solutions for ﬁle system encryption can pre-
vent an adversary from determining the contents of ﬁles,
in
situations where a user wishes to hide the existence of data,
encryption alone is not sufﬁcient. Indeed, encryption may draw
attention to those ﬁles, as they may likely contain information the
user wishes to keep secret. Consequently, adversarial coercion
may motivate the owner to surrender their encryption keys,
under duress. This paper presents DEFY, a deniable ﬁle system
following a log-structured design. Maintaining a log-structure is
motivated by the technical constraints imposed by solid-state
drives, such as those found in mobile devices. These devices
have consequential properties that previous work largely ignores.
Further, DEFY provides features not offered by prior work,
including: authenticated encryption, fast secure deletion, and
support for multiple layers of deniability. We consider security
against a snapshot adversary, the strongest deniable ﬁlesystem
adversary considered by prior literature. We have implemented
a prototype based on YAFFS and an evaluation shows DEFY
exhibits performance degradation comparable to the encrypted
ﬁle system for ﬂash, WhisperYAFFS.
I.
INTRODUCTION
Mobile devices are becoming increasingly ubiquitous and
powerful. They collect and store large amounts of personal
or sensitive information. Some users need to protect
that
data from unauthorized access just as they would on normal
platforms. Evidence of this need can be found on the Google
Play store where there are a number of privacy-enhancing
technology apps, including: ChatSecure [3] (secure texting),
WhisperYAFFS [51] (an encrypted ﬁle system), RedPhone [49]
(encrypted calls), TextSecure [50] (secure texting), Orbot [4]
(tor for mobile), Lookout [5] (data backups and anti-virus),
and many more.
The standard method of preventing unauthorized access
to information on mobile devices is the same as in general
secure communication: encryption. While encryption serves to
limit access to certain ﬁles, it does not attempt to hide their
existence. In fact, encryption reveals the existence (and often,
size) of information that the user does not want others to see.
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23078
In many environments, allowing an adversary to learn that
a device contains sensitive data may be as damaging as the loss
or disclosure of that data. Consider covert data collection in
a hostile country, where mobile devices carrying information
might be examined and imaged at border checkpoints. Inspec-
tors may discover the presence of encrypted data, or identify
changes to the encrypted ﬁle system over time, and demand
that they be decrypted before allowing passage. This is not a
ﬁctional scenario. In 2012, a videographer smuggled evidence
of human rights violations out of Syria. He lacked any data
protection mechanisms and instead hid a micro-SD card in a
wound on his arm [29]. In another example, the human rights
group Network for Human Rights Documentation - Burma
(ND-Burma) collects data on hundreds of thousands of human
rights violations by the Burmese government. They collect
testimony from witnesses within the country that the Burmese
government would not want released, putting both activists and
witnesses in grave danger should the government gain access to
these data [2]. In light of the control exerted by the government
over the Internet within Burma [37], ND-Burma activists carry
data on mobile devices, risking exposure at checkpoints and
border crossings. Using a way to hide the encrypted data such
that inspectors cannot reasonably infer sensitive data exist on
the device, risk to activists and witnesses can be lessened.
A promising approach to securing data under these condi-
tions is to employ a class of ﬁle system known as deniable ﬁle
systems. Deniable ﬁle systems mask information about stored
data, and allow a user to plausibly deny any storage artifacts
on their device, typically by encrypting data with different
keys based on the sensitivity of the data. Unfortunately, all
known methods to provide deniability from previous designs
are inapplicable when applied to ﬂash-based storage devices.
In particular, for ﬂash media, strategies that require in-place
modiﬁcation of blocks are unavailable, due to wear-leveling
requirements and the special handling required for erasures
and writes in NAND ﬂash.
In this paper we present DEFY, the Deniable Encrypted
File System from YAFFS. DEFY is speciﬁcally designed
for ﬂash-based, solid-state drives—the primary storage device
found in most mobile devices. The physical properties of ﬂash
memory introduce unique challenges to plausible deniability,
requiring us to depart non-trivially from the designs of prior
deniable ﬁle systems. In particular, hardware-implemented
wear leveling essentially forces DEFY to embrace a log-
structured design. The DEFY ﬁle system provides a number
of features not offered by prior work:
•
•
•
•
•
it features a generic design, adaptable to other set-
tings requiring deniability while maintaining a log-
structure;
it supports an arbitrary number of user-deﬁned denia-
bility levels that can be created or removed from the
system, dynamically;
it is the ﬁrst encrypted ﬁle system for mobile devices
providing authenticated encryption;
it provides a fast and efﬁcient mechanism to securely
delete data, allowing individual ﬁles or the entire ﬁle
system to be deleted in bounded time. What’s more,
it is the ﬁrst ﬁle system to provide secure deletion of
prior allocations by policy;
it is designed to be resistant against the most powerful
adversary considered by prior work, a snapshotting
adversary.
DEFY’s design is a signiﬁcant departure from previous
deniable ﬁle systems, which require strict control over block
placement on the device, and whose security guarantees do
not hold when the underlying media re-maps their writes.
For example, for storage using a hardware ﬂash translation
layer (FTL), prior designs are only secure under the addi-
tional assumption that the media is effectively tamperproof,
i.e. the hardware controller implementing the FTL cannot be
bypassed during adversarial analysis (revealing past writes).
Alternatively, when no FTL is performed, those systems ignore
the constraints of the underlying media, e.g., they do not wear-
level appropriately. In contrast, DEFY embraces a logical log-
structure so that its security guarantees hold, especially when
the underlying media is also written in a log-structure. Indeed,
DEFY solution is generalizable, and can be used with devices
employing hardware FTL (without additional assumptions),
with those requiring FTL logic be implemented by the ﬁle
system, or with those requiring no FTL logic at all.
When DEFY is used with only a single deniability level,
it acts like an encrypted ﬁle system with additional features
(secure deletion, authenticated encryption) appropriate for
mobile devices, making it attractive beyond deniability. We
provide a prototype implementation of DEFY and remark on
the system’s performance, showing performance comparable
to WhisperYAFFS, the encrypted ﬁle system for ﬂash storage.
II. RELATED WORK
Anderson et al. propose the ﬁrst ﬁle system with the secu-
rity property of plausible deniability [9]. They present schemes
demonstrating two alternate approaches: hiding blocks within
valid-looking data (“cover ﬁles”), and hiding blocks within
random data. DEFY follows this second basic approach.
Writing new data has the possibility of over-writing data
at unrevealed levels. Anderson et al. use block replication
and random block placement
to reduce the probability of
overwriting,
McDonald and Kuhn describe StegFS, an implementation
based on adapting Anderson et al.’s construction to the ext2
ﬁle system [28]. They use a block allocation table to track
ﬁles, rather than random block placement.
Pang, Tan, and Zhou describe a different implementation,
also called StegFS [33]. Their implementation uses an unen-
crypted global bitmap to ensure blocks are not accidentally
overwritten. To ensure deniability, “dummy blocks” are oc-
casionally written; these explain blocks apparently in-use but
otherwise unreadable by the ﬁle system.
Gasti et al. describe DenFS, a FUSE leveraging cloud
storage and providing deniability in the event the cloud ser-
vice becomes compromised [22]. DenFS uses cover ﬁles and
deniable encryption [16] to protect remote data. In DenFS, the
adversary may intercept messages and request remote ﬁles be
revealed, but it cannot seize arbitrary snapshots of local storage
(which may reveal local caches, the database of pre-generated
cover ﬁles, etc.). Their model is not appropriate for threats
associated with seizure of mobile devices, as considered here
and in other prior work.
Skillen and Mannan describe Mobiﬂage, a deniable ﬁlesys-
tem for Android devices [46]. Their system hides a drive image
in the standard encrypted ﬁle system, placing it at a random
location, somewhere in the third quarter of the drive’s address
space. This is similar to the design of a “hidden volume” under
TrueCrypt [6]. Efforts to port TrueCrypt to mobile platforms
also follow this pattern. Each of these systems work at the
block device layer or higher, ignoring the unique properties
of ﬂash storage; thus, the log-structure below this layer may
potentially undermine the deniability of the hidden ﬁlesystem
above it, revealing recent activity on the hidden portion of the
device. Further, these systems lack support for more than one
deniability level, and are not trivially extensible to handle this
feature.
WhisperYAFFS is a system providing full disk encryption
on ﬂash devices [51]. It provides only conﬁdentiality without
authenticity and, unlike DEFY and other deniable ﬁle systems,
does not provide plausible deniability; in particular, its use of
plaintext block sequence numbers trivially leaks the history of
block updates.
III. BACKGROUND
Pushed by demand from the growing mobile device market,
solid-state memory has become a popular alternative to hard
disk drives, due to its small power footprint, lack of moving
mechanical parts and high speed. The evolution of ﬂash has
largely been a balancing act between cost, capacity, perfor-
mance, lifespan, and granularity of access/erasure. The most
recent generation of ﬂash is NAND ﬂash. NAND is cheaper
to manufacture and denser (bytes per die) than it predecessors,
EEPROM and NOR technologies. Current NAND chip sizes
are as large as 256GB.
NAND offers random-access reads and writes at the page
level, while erasure occurs at the block level. For example, an
8GB NAND device with 212 blocks can write a 4KB page but
must erase at the granularity of a 256KB block. Once pages
are programmed, they must be erased before they are written
again; this is called the program-erase cycle. A per-page Out-
of-Bound (OOB) area holds metadata and error correction
codes for the page’s data.
Flash memory degrades after many program-erase cycles,
becoming unreliable after 10,000–100,000 cycles. Many solid-
state drives employ wear leveling to extend their lifespan
2
within this constraint: drivers attempt to disperse erase/write
trafﬁc to avoid media wear. In dynamic wear leveling, data is
written to locations based on availability and a least-written
count. In static wear leveling, some existing, under-utilized
(static) block may be moved to distribute wear on the device
during a page write request. Most devices implement dynamic
wear leveling, for its simplicity and speed.
Flash devices can be accessed using Linux’s memory
technology device (MTD) subsystem interface, essentially pro-
viding a “raw” interface to NAND ﬂash devices. An MTD
provides a consistent mapping from logical blocks to physical
blocks, it provides no write leveling, and thus nothing to pre-
vent cell overuse. The unsorted block images (UBI) interface
builds on MTD, providing an abstraction comparable to the
Linux Logical Volume Manager for ﬂash storage. UBI tracks
logical blocks in a data structure, deciding to re-map logical
blocks based on use, implementing wear leveling. A ﬂash
translation layer (FTL) can be built on top of UBI, providing a
simpliﬁed, block-level interface for ﬂash, in exchange for a loss
of low-level control over data placement and strict overwrites.
A. YAFFS Overview