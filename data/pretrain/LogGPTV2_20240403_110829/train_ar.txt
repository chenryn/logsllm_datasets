which have uid mapping enabled.
additionally, the semantics of all system
calls which access the file contents are violated, because
.br chown ()
may cause immediate access revocation on already open files.
client side
caching may lead to a delay between the time where ownership have
been changed to allow access for a user and the time where the file can
actually be accessed by the user on other clients.
.ss historical details
the original linux
.br chown (),
.br fchown (),
and
.br lchown ()
system calls supported only 16-bit user and group ids.
subsequently, linux 2.4 added
.br chown32 (),
.br fchown32 (),
and
.br lchown32 (),
supporting 32-bit ids.
the glibc
.br chown (),
.br fchown (),
and
.br lchown ()
wrapper functions transparently deal with the variations across kernel versions.
.pp
in versions of linux prior to 2.1.81 (and distinct from 2.1.46),
.br chown ()
did not follow symbolic links.
since linux 2.1.81,
.br chown ()
does follow symbolic links, and there is a new system call
.br lchown ()
that does not follow symbolic links.
since linux 2.1.86, this new call (that has the same semantics
as the old
.br chown ())
has got the same syscall number, and
.br chown ()
got the newly introduced number.
.sh examples
the following program changes the ownership of the file named in
its second command-line argument to the value specified in its
first command-line argument.
the new owner can be specified either as a numeric user id,
or as a username (which is converted to a user id by using
.br getpwnam (3)
to perform a lookup in the system password file).
.ss program source
.ex
#include 
#include 
#include 
#include 
int
main(int argc, char *argv[])
{
    uid_t uid;
    struct passwd *pwd;
    char *endptr;
    if (argc != 3 || argv[1][0] == \(aq\e0\(aq) {
        fprintf(stderr, "%s  \en", argv[0]);
        exit(exit_failure);
    }
    uid = strtol(argv[1], &endptr, 10);  /* allow a numeric string */
    if (*endptr != \(aq\e0\(aq) {         /* was not pure numeric string */
        pwd = getpwnam(argv[1]);   /* try getting uid for username */
        if (pwd == null) {
            perror("getpwnam");
            exit(exit_failure);
        }
        uid = pwd\->pw_uid;
    }
    if (chown(argv[2], uid, \-1) == \-1) {
        perror("chown");
        exit(exit_failure);
    }
    exit(exit_success);
}
.ee
.sh see also
.br chgrp (1),
.br chown (1),
.br chmod (2),
.br flock (2),
.br path_resolution (7),
.br symlink (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2009 intel corporation, author andi kleen
.\" some sentences copied from comments in arch/x86/kernel/msr.c
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th msr 4 2021-03-22 "linux" "linux programmer's manual"
.sh name
msr \- x86 cpu msr access device
.sh description
.i /dev/cpu/cpunum/msr
provides an interface to read and write the model-specific
registers (msrs) of an x86 cpu.
.i cpunum
is the number of the cpu to access as listed in
.ir /proc/cpuinfo .
.pp
the register access is done by opening the file and seeking
to the msr number as offset in the file, and then
reading or writing in chunks of 8 bytes.
an i/o transfer of more than 8 bytes means multiple reads or writes
of the same register.
.pp
this file is protected so that it can be read and written only by the user
.ir root ,
or members of the group
.ir root .
.sh notes
the
.i msr
driver is not auto-loaded.
on modular kernels you might need to use the following command
to load it explicitly before use:
.pp
.in +4n
.ex
$ modprobe msr
.ee
.in
.sh see also
intel corporation intel 64 and ia-32 architectures
software developer's manual volume 3b appendix b,
for an overview of the intel cpu msrs.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/fopen.3
.so man3/rpc.3
.\" copyright 1993 giorgio ciucci 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" added correction due to nick duffek , aeb, 960426
.\" modified wed nov  6 04:00:31 1996 by eric s. raymond 
.\" modified, 8 jan 2003, michael kerrisk, 
.\"	removed eidrm from errors - that can't happen...
.\" modified, 27 may 2004, michael kerrisk 
.\"     added notes on capability requirements
.\" modified, 11 nov 2004, michael kerrisk 
.\"	language and formatting clean-ups
.\"	added notes on /proc files
.\"
.th msgget 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
msgget \- get a system v message queue identifier
.sh synopsis
.nf
.b #include 
.pp
.bi "int msgget(key_t " key ", int " msgflg );
.fi
.sh description
the
.br msgget ()
system call returns the system\ v message queue identifier associated
with the value of the
.i key
argument.
it may be used either to obtain the identifier of a previously created
message queue (when
.i msgflg
is zero and
.i key
does not have the value
.br ipc_private ),
or to create a new set.
.pp
a new message queue is created if
.i key
has the value
.b ipc_private
or
.i key
isn't
.br ipc_private ,
no message queue with the given key
.i key
exists, and
.b ipc_creat
is specified in
.ir msgflg .
.pp
if
.i msgflg
specifies both
.b ipc_creat
and
.b ipc_excl
and a message queue already exists for
.ir key ,
then
.br msgget ()
fails with
.i errno
set to
.br eexist .
(this is analogous to the effect of the combination
.b o_creat | o_excl
for
.br open (2).)
.pp
upon creation, the least significant bits of the argument
.i msgflg
define the permissions of the message queue.
these permission bits have the same format and semantics
as the permissions specified for the
.i mode
argument of
.br open (2).
(the execute permissions are not used.)
.pp
if a new message queue is created,
then its associated data structure
.i msqid_ds
(see
.br msgctl (2))
is initialized as follows:
.ip \(bu 2
.i msg_perm.cuid
and
.i msg_perm.uid
are set to the effective user id of the calling process.
.ip \(bu
.i msg_perm.cgid
and
.i msg_perm.gid
are set to the effective group id of the calling process.
.ip \(bu
the least significant 9 bits of
.i msg_perm.mode
are set to the least significant 9 bits of
.ir msgflg .
.ip \(bu
.ir msg_qnum ,
.ir msg_lspid ,
.ir msg_lrpid ,
.ir msg_stime ,
and
.i msg_rtime
are set to 0.
.ip \(bu
.i msg_ctime
is set to the current time.
.ip \(bu
.i msg_qbytes
is set to the system limit
.br msgmnb .
.pp
if the message queue already exists the permissions are
verified, and a check is made to see if it is marked for
destruction.
.sh return value
on success,
.br msgget ()
returns the message queue identifier (a nonnegative integer).
on failure, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eacces
a message queue exists for
.ir key ,
but the calling process does not have permission to access the queue,
and does not have the
.b cap_ipc_owner
capability in the user namespace that governs its ipc namespace.
.tp
.b eexist
.b ipc_creat
and
.br ipc_excl
were specified in
.ir msgflg ,
but a message queue already exists for
.ir key .
.tp
.b enoent
no message queue exists for
.i key
and
.i msgflg
did not specify
.br ipc_creat .
.tp
.b enomem
a message queue has to be created but the system does not have enough
memory for the new data structure.
.tp
.b enospc
a message queue has to be created but the system limit for the maximum
number of message queues
.rb ( msgmni )
would be exceeded.
.sh conforming to
posix.1-2001, posix.1-2008, svr4.
.sh notes
.b ipc_private
isn't a flag field but a
.i key_t
type.
if this special value is used for
.ir key ,
the system call ignores everything but the least significant 9 bits of
.i msgflg
and creates a new message queue (on success).
.pp
the following is a system limit on message queue resources affecting a
.br msgget ()
call:
.tp
.b msgmni
system-wide limit on the number of message queues.
before linux 3.19,
.\" commit 0050ee059f7fc86b1df2527aaa14ed5dc72f9973
the default value for this limit was calculated using a formula
based on available system memory.
since linux 3.19, the default value is 32,000.
on linux, this limit can be read and modified via
.ir /proc/sys/kernel/msgmni .
.ss linux notes
until version 2.3.20, linux would return
.b eidrm
for a
.br msgget ()
on a message queue scheduled for deletion.
.sh bugs
the name choice
.b ipc_private
was perhaps unfortunate,
.b ipc_new
would more clearly show its function.
.sh see also
.br msgctl (2),
.br msgrcv (2),
.br msgsnd (2),
.br ftok (3),
.br capabilities (7),
.br mq_overview (7),
.br sysvipc (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2014, red hat, inc
.\"     written by alexandre oliva 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.th attributes 7 2021-03-22 "linux" "linux programmer's manual"
.sh name
attributes \- posix safety concepts
.sh description
.\"
.\"
.ir note :
the text of this man page is based on the material taken from
the "posix safety concepts" section of the gnu c library manual.
further details on the topics described here can be found in that
manual.
.pp
various function manual pages include a section attributes
that describes the safety of calling the function in various contexts.
this section annotates functions with the following safety markings:
.tp
.i mt-safe
.i mt-safe
or
thread-safe functions are safe to call in the presence
of other threads.
mt, in mt-safe, stands for multi thread.
.ip
being mt-safe does not imply a function is atomic, nor that it uses any
of the memory synchronization mechanisms posix exposes to users.
it is even possible that calling mt-safe functions in sequence
does not yield an mt-safe combination.
for example, having a thread call two mt-safe
functions one right after the other does not guarantee behavior
equivalent to atomic execution of a combination of both functions,
since concurrent calls in other threads may interfere in a destructive way.
.ip
whole-program optimizations that could inline functions across library
interfaces may expose unsafe reordering, and so performing inlining
across the gnu c library interface is not recommended.
the documented
mt-safety status is not guaranteed under whole-program optimization.
however, functions defined in user-visible headers are designed to be
safe for inlining.
.\" .tp
.\" .i as-safe
.\" .i as-safe
.\" or async-signal-safe functions are safe to call from
.\" asynchronous signal handlers.
.\" as, in as-safe, stands for asynchronous signal.
.\"
.\" many functions that are as-safe may set
.\" .ir errno ,
.\" or modify the floating-point environment,
.\" because their doing so does not make them
.\" unsuitable for use in signal handlers.
.\" however, programs could misbehave should asynchronous signal handlers
.\" modify this thread-local state,
.\" and the signal handling machinery cannot be counted on to
.\" preserve it.
.\" therefore, signal handlers that call functions that may set
.\" .i errno
.\" or modify the floating-point environment
.\" .i must
.\" save their original values, and restore them before returning.
.\" .tp
.\" .i ac-safe
.\" .i ac-safe
.\" or async-cancel-safe functions are safe to call when
.\" asynchronous cancellation is enabled.
.\" ac in ac-safe stands for asynchronous cancellation.
.\"
.\" the posix standard defines only three functions to be ac-safe, namely
.\" .br pthread_cancel (3),
.\" .br pthread_setcancelstate (3),
.\" and
.\" .br pthread_setcanceltype (3).
.\" at present the gnu c library provides no
.\" guarantees beyond these three functions,
.\" but does document which functions are presently ac-safe.
.\" this documentation is provided for use
.\" by the gnu c library developers.
.\"
.\" just like signal handlers, cancellation cleanup routines must configure
.\" the floating point environment they require.
.\" the routines cannot assume a floating point environment,
.\" particularly when asynchronous cancellation is enabled.
.\" if the configuration of the floating point
.\" environment cannot be performed atomically then it is also possible that
.\" the environment encountered is internally inconsistent.
.tp
.ir mt-unsafe \" ", " as-unsafe ", " ac-unsafe
.ir mt-unsafe \" ", " as-unsafe ", " ac-unsafe
functions are not safe to call in a multithreaded programs.
.\" functions are not
.\" safe to call within the safety contexts described above.
.\" calling them
.\" within such contexts invokes undefined behavior.
.\"
.\" functions not explicitly documented as safe in a safety context should
.\" be regarded as unsafe.
.\" .tp
.\" .i preliminary
.\" .i preliminary
.\" safety properties are documented, indicating these
.\" properties may
.\" .i not
.\" be counted on in future releases of
.\" the gnu c library.
.\"
.\" such preliminary properties are the result of an assessment of the
.\" properties of our current implementation,