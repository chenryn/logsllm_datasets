    ```
    docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube
    ```
    您应该获得容器标识作为输出:
    ```
    4346a99b506b1bec8000e429471dabac57e3f565b154ee921284ec685497bfae
    ```
2.  Log in to SonarQube by using `admin/admin` credentials:
    ![Figure 8.38: Log in to SonarQube ](img/B15021_08_38.jpg)
    图 8.38:登录到 SonarQube
    成功登录后，将出现类似以下内容的屏幕:
    ![Figure 8.39: The SonarQube dashboard ](img/B15021_08_39.jpg)
    图 8.39:SonarQube 仪表板
3.  在右上角，单击用户。将出现一个下拉菜单。点击`My Account`:
4.  Scroll down and click on `Generate` under `Security` to generate a token. You must copy it now because you will not be able to access it later:
    ![Figure 8.40: Generating the token ](img/B15021_08_40.jpg)
    图 8.40:生成令牌
5.  In Jenkins, click on `Manage Jenkins` > `Plugin Manager`. Search for `Sonar` in the `Available` list. Install the `SonarQube Scanner` plugin.
    ![Figure 8.41: Installing the SonarQube Scanner plugin ](img/B15021_08_41.jpg)
    图 8.41:安装 SonarQube 扫描仪插件
6.  Verify that the installation is correct by clicking on the `hit_count` project and then clicking the `Configure` option. Click on `Add build step` and then `Execute SonarQube Scanner` on the `Build` tab, as in *Figure 8.43*:
    ![Figure 8.42: Selecting Execute SonarQube Scanner  ](img/B15021_08_42.jpg)
    图 8.42:选择执行声纳立方体扫描仪
7.  However, the new box will generate errors, like the one shown in the following screenshot. To rectify that, integrate SonarQube and Jenkins through the `system configuration` and `global tool configuration` options:
    ![Figure 8.43: Errors generated since SonarQube is not configured yet ](img/B15021_08_43.jpg)
    图 8.43:由于尚未配置 SonarQube 而产生的错误
8.  In Jenkins, click on `Manage Jenkins`. Click the `Global Tool Configuration` option and then click `Add SonarQube Scanner`:
    ![Figure 8.44: Adding SonarQube Scanner on the Global Tool Configuration page ](img/B15021_08_44.jpg)
    图 8.44:在全局工具配置页面上添加 SonarQube 扫描仪
9.  Enter the name `SonarQube Scanner`. Check `Install automatically`. Under `Install from Maven Central`, in `Version`, select `SonarQube Scanner 3.2.0.1227`. Click on `Add Installer`. In the `Label` field, enter `SonarQube`. In the `Download URL for binary archive` field, enter the link `https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip`.
    点击`Save`。
    ![Figure 8.45: Adding details for SonarQube Scanner](img/B15021_08_45.jpg)
    图 8.45:添加 SonarQube 扫描仪的详细信息
    您现在已经完成了`Global Tool Configuration`选项，所以是时候转到`Configure System`选项了。
10.  In `Manage Jenkins`, click `Configure System`:
    ![Figure 8.46: Click on Configure System on the Manage Jenkins page ](img/B15021_08_46.jpg)
    图 8.46:单击管理詹金斯页面上的配置系统
11.  You cannot enter the system configuration right now as it asks for `Server Authentication Token`. When you click the `Add` button, it will do nothing. Enter the token as secret text in the following steps, and then return to `Manage Jenkins`:
    ![Figure 8.47: Inserting the SonarQube token in Jenkins configuration ](img/B15021_08_47.jpg)
    图 8.47:在 Jenkins 配置中插入 SonarQube 令牌
12.  Click on `Manage Credentials`:
    ![Figure 8.48: The Manage Jenkins page ](img/B15021_08_48.jpg)
    图 8.48:管理詹金斯页面
13.  Click on `Jenkins`:
    ![Figure 8.49: The Jenkins Credentials page ](img/B15021_08_49.jpg)
    图 8.49:詹金斯证书页面
14.  Click on `Global credentials (unrestricted)`:
    ![Figure 8.50: The Global credentials (unrestricted) domain ](img/B15021_08_50.jpg)
    图 8.50:全局凭证(无限制)域
15.  Click on `adding some credentials`:
    ![Figure 8.51: Adding some credentials  ](img/B15021_08_51.jpg)
    图 8.51:添加一些凭证
16.  In the `Kind` drop-down menu, click on `Secret text`:
    ![Figure 8.52: Selecting Secret text for Kind  ](img/B15021_08_52.jpg)
    图 8.52:为“种类”选择机密文本
17.  In the `Secret` textbox, paste the token that you copied in *Step 5* in this activity. In the `ID` field, enter `SonarQubeToken`. Click `OK`:
    ![Figure 8.53: Adding the token to the Secret textbox  ](img/B15021_08_53.jpg)
    图 8.53:将令牌添加到机密文本框
    `SonarQubeToken`将保存在`Global credentials`选项中。您将看到类似于以下内容的屏幕:
    ![Figure 8.54: SonarQubeToken saved in the Global credentials ](img/B15021_08_54.jpg)
    图 8.54:保存在全局凭证中的 SonarQubeToken
18.  Return to `Manage Jenkins`. Click `Configuration System` and then `Refresh`. Now, in the `Server Authentication Token` drop-down menu, you will find `SonarQubeToken`. Check `Enable injection of SonarQube server configuration as build environment variables`. Enter `SonarQube` in the `Name` field. Enter `http://:9000` in the `Server URL` field. Then click `Save`:
    您可以运行`ifconfig`命令获取您的 IP。您将在输出的`en0`部分找到该 IP:
    ```
    $ ifconfig
    ```
    这是将 Jenkins 与 SonarQube 集成的最后一步。让我们回到项目上来。
19.  在`Build Environment`中，勾选`Prepare SonarQube Scanner environment`。将`Server authentication token`设置为`SonarQubeToken`:
20.  Now, click on the project name and then `Configure`. In the `Build` step, enter the following code in the `Analysis Properties` field:
    ```
    sonar.projectKey=hit_count
    sonar.projectName=hit_count
    sonar.projectVersion=1.0
    sonar.sources=.
    sonar.language=py
    sonar.sourceEncoding=UTF-8
    # Test Results
    sonar.python.xunit.reportPath=nosetests.xml
    # Coverage
    sonar.python.coverage.reportPath=coverage.xml
    # Linter (https://docs.sonarqube.org/display/PLUG/Pylint+Report)
    #sonar.python.pylint=/usr/local/bin/pylint
    #sonar.python.pylint_config=.pylintrc
    #sonar.python.pylint.reportPath=pylint-report.txt
    ```
    点击`Save`。
21.  After saving, you will find the SonarQube logo showing on the project page, as in *Figure 8.55*. Click on `Build Now`:
    ![Figure 8.55: The SonarQube option showing on our project's dashboard ](img/B15021_08_55.jpg)
    图 8.55:显示在我们项目仪表板上的 SonarQube 选项
22.  In `Build History`, click on `Console Output`. You should get the screen similar to the following:
    ![Figure 8.56: Console Output ](img/B15021_08_56.jpg)
    图 8.56:控制台输出
23.  查看`SonarQube`上的报告。在浏览器中，键入`http://:9000`或`http://localhost:9000`。你会发现詹金斯自动将你的`hit_count`项目添加到了索纳库:
24.  点击`hit_count`。你会发现一份详细的报告。每当 Jenkins 构建项目时，SonarQube 都会自动分析代码
在本练习中，您学习了如何将 Jenkins 与 SonarQube 集成并安装所需的插件，您通过在浏览器中检查 SonarQube 验证了这一点。您还将 SonarQube 应用于您的简单网络应用`hit_counter`。
## 活动 8.02:在全景徒步旅行应用中利用詹金斯和索纳库
**解决方案**:
1.  在詹金斯中创建一个名为`trekking`的新项目。选择它作为`FREESTYLE`项目。点击`OK`。
2.  在`General`选项卡中，选择`Discard old builds`。
3.  In the `Source Code Management` tab, select `GIT`. Then enter the URL `http://github.com/efoda/trekking_app`:
    ![Figure 8.57: Inserting the GitHub URL ](img/B15021_08_57.jpg)
    图 8.57:插入 GitHub 网址
4.  In `Build Triggers`, select `Poll SCM` and enter `H/15 * * * *`:
    ![Figure 8.58: Inserting the scheduling code ](img/B15021_08_58.jpg)
    图 8.58:插入调度代码
5.  In the `Build Environment` tab, select `Prepare SonarQube Scanner environment`. Select the `Server authentication token` from the drop-down menu:
    ![Figure 8.59: Selecting SonarQubeToken as the Server authentication token ](img/B15021_08_59.jpg)
    图 8.59:选择 SonarQubeToken 作为服务器认证令牌
6.  In the `Build` tab, enter the following code in `Analysis properties`:
    ```
    sonar.projectKey=trekking
    sonar.projectName=trekking
    sonar.projectVersion=1.0
    sonar.sources=.
    sonar.language=py
    sonar.sourceEncoding=UTF-8
    # Test Results
    sonar.python.xunit.reportPath=nosetests.xml
    # Coverage
    sonar.python.coverage.reportPath=coverage.xml
    # Linter (https://docs.sonarqube.org/display/PLUG/Pylint+Report)
    #sonar.python.pylint=/usr/local/bin/pylint
    #sonar.python.pylint_config=.pylintrc
    #sonar.python.pylint.reportPath=pylint-report.txt
    ```
    点击`Save`。
7.  Select `Build Now`. When the build is done successfully, select `Console Output`. The following output will indicate that it finished successfully:
    ![Figure 8.60: Verifying Jenkins has built the image successfully  ](img/B15021_08_60.jpg)
    图 8.60:验证 Jenkins 是否成功构建了映像
8.  Switch to the `SonarQube` tab in the browser and check the output. The following report indicates that the trekking app has two bugs and zero security vulnerabilities:
    ![Figure 8.61: Report shown in the SonarQube browser tab ](img/B15021_08_61.jpg)
    图 8.61:显示在 SonarQube 浏览器选项卡中的报告
    如果您点击`New Code`，它将是空白的，因为您只构建了一次项目。当詹金斯另一次构建它时，你会发现两个构建之间的比较。
9.  如果你想编辑项目的代码，把 GitHub 代码转移到你的账户上，然后编辑代码来修复错误和漏洞。编辑项目的配置，使您的 GitHub 代码代替`Source Code`选项卡中提供的代码。
在本练习中，您将 Jenkins 与 SonarQube 集成在一起，并将其应用于全景徒步旅行应用。在活动结束时，您检查了 SonarQube 生成的报告，这些报告显示了代码中的错误和漏洞。
# 9。DockerSwarm
## 活动 9.01:将全景徒步应用部署到单节点 DockerSwarm
**解决方案**:
您可以通过多种方式来执行此活动。这些步骤是一种方法:
1.  为应用创建一个目录。在这种情况下，您将创建一个名为`Activity1`的目录，并使用`cd`命令进入新目录:
    ```
    mkdir Activity1; cd Activity1
    ```
2.  从其 GitHub 存储库中克隆应用，以确保您将拥有想要部署到群中的全景徒步应用服务所需的所有相关信息和应用:
    ```
    git clone https://github.com/vincesesto/trekking_app.git
    ```
3.  You won't need any of the supporting directories for NGINX, but ensure that your web service and database running are listed here, including the `panoramic_trekking_app` and `photo_viewer` directories and the `Dockerfile`, `entrypoint.sh`, `manage.py`, and `requirements.txt` scripts and files:
    ```
    ls -l
    ```
    该命令应返回类似如下的输出:
    ```
    -rw-r--r--   1 vinces  staff   533 12 Mar 15:02 Dockerfile
    -rwxr-xr-x   1 vinces  staff  1077 12 Mar 15:02 entrypoint.sh
    -rwxr-xr-x   1 vinces  staff   642 12 Mar 15:02 manage.py
    drwxr-xr-x   9 vinces  staff   288 12 Mar 15:02 
    panoramic_trekking_app
    drwxr-xr-x  12 vinces  staff   384 12 Mar 15:02 photo_viewer
    -rw-r--r--   1 vinces  staff   105 12 Mar 15:02 requirements.txt
    ```
4.  在目录中创建`.env.dev`文件，并添加以下详细信息以供`panoramic_trekking_app`在其`settings.py`文件中使用。这些环境变量将设置数据库名称、用户、密码和其他数据库设置:
    ```
    SQL_ENGINE=django.db.backends.postgresql
    SQL_DATABASE=pta_database
    SQL_USER=pta_user
    SQL_PASSWORD=pta_password
    SQL_HOST=db
    SQL_PORT=5432
    PGPASSWORD=docker
    ```
5.  Create a new `docker-compose.yml` file and open it with your text editor and add in the following details:
    ```
    version: '3.3'
    services:
      web:
        build: .
     image: activity_web:latest
        command: python manage.py runserver 0.0.0.0:8000
        volumes:
          - static_volume:/service/static
        ports:
          - 8000:8000
        environment:
          - PGPASSWORD=docker
        env_file:
          - ./.env.dev
        depends_on:
          - db
      db:
        image: postgres
        volumes:
          - postgres_data:/var/lib/postgresql/data/
        environment:
          - POSTGRES_PASSWORD=docker
        ports:
          - 5432:5432
    volumes:
      postgres_data:
      static_volume:
    ```
    从`docker-compose.yml`文件中突出显示的行可以看出，`web`服务依赖于`activity_web:latest` Docker 映像。
6.  运行以下`docker build`命令构建映像并适当标记:
    ```
    docker build -t activity_web:latest .
    ```
7.  It's now time to deploy the stack to Swarm. Run the following `stack deploy` command using `the docker-compose.yml` file you have created:
    ```
    docker stack deploy --compose-file docker-compose.yml activity_swarm
    ```
    一旦创建了网络，您应该会看到`activity_swarm_web`和`activity_swarm_db`服务可用:
    ```
    Creating network activity_swarm_default
    Creating service activity_swarm_web
    Creating service activity_swarm_db
    ```
8.  Run the `service ls` command:
    ```
    docker service ls
    ```
    验证所有服务已成功启动并显示`1/1`副本，如我们这里所示:
    ```
    ID       NAME                MODE         REPLICAS
      IMAGE
    k6kh…    activity_swarm_db   replicated   1/1
      postgres:latest