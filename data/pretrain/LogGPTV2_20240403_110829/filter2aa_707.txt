# Is This Your Pipe? Hijacking the Build Pipeline

## Introduction
- **Speaker**: @rgbkrk
- **Topics**: Open Source Software (OSS), Build Pipelines, and Testing
- **Objective**: Protecting build pipelines to ensure the benefits of continuous delivery.

## Build Pipeline Components
1. **Source Control**
2. **Continuous Integration (CI)**
3. **Upstream Sources**

## Real Sites Need Secrets
### What are secrets?
- **Cloud Credentials**
- **OAuth Secrets**
- **Integration with other services**

### Managing Secrets
- **Importance**: Proper management of secrets is crucial to prevent credential leaks.
- **Example**: Rich Mogull's experience with a GitHub code leak due to complacency.

### Consequences of Leaked Cloud Credentials
- **Build new infrastructure**
- **Delete existing infrastructure**
- **Append SSH keys to primary set**
- **Change root passwords**
- **Redistribute DNS and Load Balancers**

### Secret Finding Demo
- **Tool**: gitsec/nanny
- **Functionality**: 
  - Search repositories for security vulnerabilities.
  - Notify the original committer and project owner.
  - Provide instructions on how to revoke keys and take necessary actions.

### Responses from Users
- **Positive Feedback**: "Wow, thank you. How did you find these?"
- **Misunderstandings**: "This is only a testing project" or "I don’t even own this repository"

### Using Secrets for Testing
- **Travis CI**: Continuous Integration Build Platform
  - **Features**:
    - Open Source and free for public repositories.
    - Triggered by `git push` via web hooks.
    - Less control compared to Jenkins.
    - Supports encrypted secrets.
  - **Example Configuration**:
    ```yaml
    language: python
    python:
      - 2.7
    before_install:
      - pip install invoke==0.4.0 pytest==2.3.5
    install:
      - pip install .
    script: invoke test
    ```

### Travis & Encrypted Secrets
- **Security Note**: Keys used for encryption and decryption are tied to the repository. Forked projects have different key pairs.

### Masquerade Process
1. **Find a repository with credentials**
2. **Contribute legitimate work on a feature or bug**
3. **Introduce a security vulnerability**
4. **Exploit the vulnerability for personal gain**

## The Build Pipeline
- **Components**: 
  - Development Environment
  - Continuous Integration (CI)
  - Production
- **Pipeline Flow**: Dev Box → CI → Production

### Contaminate the Pipeline
- **Impact**: Compromising the pipeline can lead to a complete compromise of the system.

### Breaking into the Pipeline
- **Identifying CI in Code**:
  - **Jenkins API Example**:
    ```python
    from jenkinsapi import api
    jenkins = api.Jenkins('http://your-jenkins-server/api/python/')
    job = jenkins.get_job('MyAwesomeJob')
    build = job.get_last_build()
    if build.is_good():
        print("The build passed successfully")
    else:
        pass
    ```
  - **Curl Example**:
    ```sh
    curl http://jenkins/job/$JOB_NAME/build -F file0=@PATH_TO_FILE -F json='{"parameter":[{"name":"FILE_LOCATION_AS_SET_IN_JENKINS","file":"file0"}]}' --user USER:PASSWORD
    ```
  - **Wget Example**:
    ```sh
    wget -q -O- 'http://server/jenkins/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
    ```

### Low-Hanging Fruit
- **Using Jenkins Python API**:
  - **Malicious Deployment**:
    ```python
    mal_job = jenkins.get_job('PWN')
    mal_build = mal_job.get_last_build()
    if mal_build.is_good():
        print("Malicious build passed successfully")
    ```

### Not-So-Low Hanging Fruit
- **Permissions Required**: Additional permissions may be needed to execute certain actions.
- **Common Errors**:
  - **Permission Denied**: `Permission denied (publickey).`
  - **Host Key Verification Failed**: `Host key verification failed.`

### Worst-Case Scenario
- **Contaminating the Pipeline**: Complete compromise of the system.
- **Creating a Heartbleed-like Vulnerability**:
  - **Code Snippet**:
    ```c
    /* Enter response type, length and copy payload */
    *bp++ = TLS1_HB_RESPONSE;
    s2n(payload, bp);
    memcpy(bp, pl, payload);
    r = ssl3_write_bytes(s, TLS1_RT_HEARTBEAT, buffer, 3 + payload + padding);
    ```

### Defenses
- **Code Review**: Take it seriously to catch vulnerabilities early.
- **Gated Deploys**: Ensure that only authorized changes are deployed.

By implementing these defenses, we can protect our build pipelines and ensure the integrity and security of our systems.