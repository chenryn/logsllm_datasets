Is This Your Pipe?
Hijacking the Build Pipeline
$ whoami
@rgbkrk
OSS, Builds and Testing
Protecting pipelines
• Need Want beneﬁts of continuous delivery!
• Open source pathways to real, running 
infrastructure!
• Community services with > 200,000 users
Build Pipeline Components
• Source Control 
• Continuous Integration 
• Upstream Sources
Real Sites 
Need Secrets
What secrets?
• Cloud Credentials 
• OAuth Secrets 
• Integrate with                   etc.
Managing 
Secrets
Managing 
Secrets
Not
Credentials Get Leaked
–Rich Mogull
“I did not completely scrub my code before 
posting to GitHub. I did not have billing alerts 
enabled ... This was a real mistake ... I paid the 
price for complacency.” 
ಠ_ಠ
What can be done with 
Cloud Credentials?
• Build new infrastructure 
• Delete your infrastructure 
• Append SSH keys to your primary set 
• Change root passwords 
• “Redistribute” your DNS and Load Balancers
ಠ_ಠ
Secret Finding Demo
Can’t we just let people 
know when they fuck up?
gitsec/nanny
• Search repositories for security oops 
• Email the original committer & owner of the 
project 
• Let them know how to revoke keys, panic
Responses
• “Wow, thank you. How did you find these?” 
• “This is only a testing project” 
• “I don’t even own this repository”
conﬁg/initializers/
secret_token.rb
ಠ_ಠ
What if you need 
secrets for testing?
Travis CI
Continuous Integration 
Build Platform
Travis CI
• Open Source, free for public repos 
• git push -> web hook -> tasks 
• Less control than Jenkins 
• Encrypted Secrets!
language: python
python:
 - 2.7
before_install:
  - pip install invoke==0.4.0 pytest==2.3.5
install:
 - pip install .
script: invoke test
Travis & 
Encrypted Secrets
Can we leak 
decrypted secrets?
– Travis CI
“Keys used for encryption and decryption are 
tied to the repository. If you fork a project and 
add it to travis, it will have a different pair of 
keys than the original.”
Masquerade Process
1. Find repository with credentials 
2. Do legitimate work on a feature or bug 
3. Include your security oops ... 
4. Proﬁt
Speaker Transition!
What’s 
the 
Build 
Pipeline?
Pypi!
Dev Box
CI
Production
The Build Pipeline
Contaminate the Pipeline
Compromise Everything.
Breaking into the Pipeline
You are Here
Hijacking the Pipeline 
Identifying CI in Code
jenkinsapi)0.2.20)
!
from)jenkinsapi)import)api)
jenkins)=)api.Jenkins('http://your;jenkins;server/
api/python/'))
job)=)jenkins.get_job('MyAwesomeJob'))
build)=)job.get_last_build())
if)build.is_good():)
))))print)"The)build)passed)successfully")
else:)
))))#)Know)that))
))))pass
OR
curl)http://jenkins/job/$JOB_NAME/build);F)
file0=@PATH_TO_FILE);F)json='{"parameter":)
[{"name":"FILE_LOCATION_AS_SET_IN_JENKINS",)
"file":"file0"}]}');;user)USER:PASSWORD
OR
wget);q);;output;document);)\)
‘http://server/jenkins/crumbIssuer/api/xml?
xpath=concat(//crumbRequestField,":",//
crumb)'
The Low Hanging Fruit
Utilizing)the)Jenkins)Python)API…)
#)create)a)malicious)deploy)&)check)status)
mal_job)=)jenkins.get_job('PWN'))
mal_build)=)mal_job.get_last_build())
if)mal_build.is_good():)
!
)))
The Not-So-Low Hanging Fruit. 
You need MOAR permissions. 
Cloning)
into)''...)
Permission)denied)(publickey).)
fatal:)The)remote)end)hung)up)unexpectedly)
!
—————————————————————————————————————————————————————————)
!
Access)Denied;)USER@DOMAIN)is)missing)the)X)permission)
—————————————————————————————————————————————————————————)
!
Building)in)workspace)/var/lib/jenkins/jobs/Test)
Deployment/workspace)
!
stderr:)Host)key)verification)failed.)
fatal:)The)remote)end)hung)up)unexpectedly)
!
In other cases it may not… 
Building)in)workspace)/var/lib/
jenkins/jobs/Test)
!
ERROR:)Could)not)clone)repository)
FATAL:)Could)not)clone)
WE’RE NOT THROWING IN THE TOWEL JUST YET 
!
Challenge Accepted.
So many options…
The worst case scenario
Contaminate the Pipeline
Compromise Everything.
Pypi!
Dev Box
CI
Production
The Build Pipeline
Destination
Destination
Create your own Heartbleed
!
        "
                 "
                 /* Enter response type, length and copy payload */"
                 *bp++ = TLS1_HB_RESPONSE;"
                 s2n(payload, bp);"
                 memcpy(bp, pl, payload);"
                 "
              r = ssl3_write_bytes(s, TLS1_RT_HEARTBEAT, buffer, 3 + payload + padding;
Remote Code Execution for all!
socket.recvfrom_into()
Some are easier 
than others…
What defenses 
do we have?
Take code review seriously.
Gate your deploys…. 
Or they will be my 
deploys.