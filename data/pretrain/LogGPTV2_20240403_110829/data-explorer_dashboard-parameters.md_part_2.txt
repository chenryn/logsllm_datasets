    * **Label**: State
    * **Variable name**: `_state`
    * **Source**: Query
    * **Data source**: StormEventsSample
    * Select **Edit query** and enter the following query. Select **Done**.
        ```kusto
        StormEvents
        | where StartTime between (_startTime.._endTime)
        | where EventType in (_eventType) or isempty(_eventType)
        | summarize TotalEvents = count() by State
        | top 5 by TotalEvents
        | project State
        ```
    * **Value**: State
    * **Display name**: State
    * **Default value**: Choose a default value
1. Select **Done** to create the parameter.
#### Use a single-selection query-based parameter
1. The following sample query with the new *State* parameter uses the `_state` variable:
    ``` kusto
    StormEvents
    | where StartTime between (_startTime.._endTime)
    | where EventType in (_eventType) or isempty(_eventType)
    | where State == _state
    | summarize TotalEvents = count() by State
    | top 5 by TotalEvents
    ```
    The new parameter shows up in the parameter list at the top of the dashboard.
1. Select different values to update the visuals.
### Multiple-selection query-based parameters
Query-based parameter values are derived at dashboard load time by executing the user specified query. The following example shows how to can create a multiple-selection query-based parameter:
#### Create a multiple-selection query-based parameter
1. Select **Parameters** to open the **Parameters** pane and select **+ New parameter**.
1. 1. Fill in the details as mentioned in [Use a single-selection fixed-values parameter](#use-a-single-selection-fixed-values-parameter) with the following changes:
    * **Label**: State
    * **Parameter type**: Multiple selection
    * **Variable name**: `_state`
1. Select **Done** to create the parameter.
#### Use a multiple-selection query-based parameter
1. The following sample query uses the new *State* parameter by using the `_state` variable.
    ``` kusto
    StormEvents
    | where StartTime between (_startTime.._endTime)
    | where EventType in (_eventType) or isempty(_eventType)
    | where State in (_state) or isempty(_state)
    | summarize TotalEvents = count() by State
    | top 5 by TotalEvents
    ```
    > [!NOTE]
    > This sample uses the **Select All** option by checking for empty values with the `isempty()` function.
    The new parameter shows up in the parameter list at the top of the dashboard.
1. Select one or more different values to update the visuals.
### Free text parameters
Free text parameters don't contain any values. They allow you to introduce your own value.
#### Create a free text parameter
1. Select **Parameters** to open the **Parameters** pane and select **+ New parameter**.
1. Fill in the details as follows:
    * **Label**: State
    * **Parameter type**: Free text
    * **Variable name**: _state
    * **Data type**: String
    * **Default value**: No default value
#### Use a free text parameter
1. Run a sample query using the new *State* parameter by using the `_state` variable name:
    ```kusto
    StormEvents
    | where StartTime between (_startTime.._endTime)
    | where EventType in (_eventType) or isempty(_eventType)
    | where State contains _state
    | summarize TotalEvents = count() by State
    | top 5 by TotalEvents
    ```
### Data source parameters
Once you have [added data sources](azure-data-explorer-dashboards.md#add-data-source) to your dashboard, you can create a parameter that selects one or more of the available data sources. This parameter can be used in tiles and other parameters.
#### Create a data source parameter
1. Select **Parameters** to open the **Parameters** pane and select **+ New parameter**.
1. Fill in the details as follows:
    * **Label**: Source
    * **Parameter type**: Data source
    * **Show on pages**: Select all
    * **Values**: Select all
    * **Default value**: StormEventsSample
1. Select **Done**.
The new parameter is now visible in the parameter list at the top of the dashboard.
#### Use a data source parameter
1. Navigate to the query of a new or existing tile.
1. In **Source**, select the name of your new parameter under **Data source parameters**. For the above-created parameter, select **Cluster**.
1. Select **Apply changes**.
1. Use the **Cluster** parameter to change the data source for this connected query.
## Cross-filters parameters
Cross-filters allow you to select a value in one visual and all dashboard visuals, such as line or scatter charts, are filtered to only show related data. Using cross-filters achieves the same result as selecting the equivalent value for the parameter in the parameter list at the top of the dashboard.
### Define cross-filters
To create a cross-filter, you must turn on the option in the visual, and then specify the parameter that is used to filter the data.
1. Navigate to the query of the tile where you want to add cross-filters.
1. Select **Visual**.
1. In the right pane, select **Interactions**, and then turn on cross-filters.
1. Optionally, specify the **Interaction** type. The default is **Point** where you can select a value in the visual. For selecting a range of values, such as in a time chart, select **Drag**.
1. Specify both the column that is used to provide the value and a parameter used to filter the query.
    > [!IMPORTANT]
    > The column and parameter must be of the same data type.
:::image type="content" source="media/dashboard-parameters/cross-filter-query.png" alt-text="Screenshot of the edit visual page, showing the interactions tab.":::
## Interact with your data using cross-filter
Once the cross-filter is defined, you can use it to interact with your data. In visuals where you've defined cross-filters, you can select data points and use their values to filter the current dashboard page. For table visuals, select data points by right-clicking on the relevant cell and then in the context menu, select **Cross-filter**.
:::image type="content" source="media/dashboard-parameters/cross-filter.jpg" alt-text="Screenshot of a table visual, showing the cross-filter context menu option.":::
You can reset the cross-filter by selecting **Reset** at the top of the visual where it was selected.
:::image type="content" source="media/dashboard-parameters/reset-button.jpg" alt-text="Screenshot of a table visual, showing the reset button.":::
## Use drillthroughs as dashboard parameters
With drillthrough, you can select a value in a visual and use it to filter the visuals in a target page in the same dashboard. When the target page opens, the value is preselected in the relevant filters. The visuals on the page, such as line or scatter charts, are filtered to only show related data.
### Define a drillthrough
To create a drillthrough, you must first turn it on in the visual and then add one or more drillthroughs as required.
1. Edit the visual where you want to add a drillthrough. Make sure that the **Visual** tab is selected.
1. In the right pane, select **Interactions**, then turn on drillthrough.
    :::image type="content" source="media/dashboard-parameters/drillthrough-visual-create.png" alt-text="Screenshot of drillthrough page, showing the turn on option.":::
1. Under **Drillthrough**, select **Create new**, and specify the following information. Optionally select **Add another pair** to add multiple parameters for a target page. Repeat this step to add drillthroughs to other pages in the current dashboard using different parameters.
    | Field | Description |
    |--|--|
    | Destination page | One or more target pages to drill through to using the defined parameters. |
    | Column | The query result's column to use as the value for a parameter in the target page. |
    | Parameter | The parameter used to filter visuals in the target page using the column value. |
    | Notes | Optional short description. |
    > [!IMPORTANT]
    > Column and parameter pairs must be of the same data type.
## Interact with your data using drillthroughs
Once drillthroughs are defined, you can use them to interact with your data. To do so, in visuals or tables where you've defined a drillthrough, right-click on a data point, and then select **Drill through to** > *destination page*. The values from the data point will be used as the parameters to filter the visuals on the target page.
:::image type="content" source="media/dashboard-parameters/drillthrough-combined.jpg" alt-text="Screenshot of a dashboard visual, showing the drillthrough interaction.":::
To return to the source page, in the top-right of the destination page, select **Reset**. All filters assigned by the drillthrough will be reset.
## Use filter search for single and multiple selection filters
In single and multiple selection filters, type the value that you want. The filter updates to only show the values that match the search term.
## Related content
* [Customize Azure Data Explorer dashboard visuals](dashboard-customize-visuals.md)
* [Write Kusto Query Language queries in the web UI](web-ui-kql.md)