Most operating systems moved to randomly generated ISNs to mitigate the threat of 
blind TCP spoofing. The security of much of TCP depends on the unpredictability of the 
ISN, so it's important that their ISN generation code really does produce random 
sequence numbers. Straightforward linear congruent pseudo-random number 
generators (PRNGs) doesn't cut it, as an attacker can sample several ISNs to reverse 
the internal state of the random number algorithm. 
Back in 2000, Pascal Bouchareine of the Hacker Emergency Response Team (HERT) 
published an advisory about FreeBSD's ISN generation, which used the kernel 
random() function: a linear congruent PRNG. After sampling four ISNs, an attacker can 
reconstruct the PRNGs internal state and generate the same sequence numbers as 
the target host. 
An Attack on Randomness 
There have been a couple of interesting discoveries related to the 
randomness of TCP sequence-numbering algorithms. Of particular note is a 
research paper made available by Michael Zalewski at 
www.bindview.com/Support/RAZOR/Papers/2001/tcpseq.cfm, which 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
887 
discusses the relative strengths of random number algorithms some 
contemporary operating systems use. Although the versions tested are 
somewhat dated, the paper gives you a good idea how operating systems 
measure up against each other. (Additionally, even though some versions 
aren't so current, a lot of the ISN algorithms probably haven't changed a 
great deal.) The paper goes on to discuss PRNG strengths in other network 
components (such as DNS IDs and session cookies). 
ISN Vulnerability 
Stealth and S. Krahmer, members of a hacker group named TESO discovered a subtle 
blind spoofing bug in the Linux kernel, in the 2.2 branch of code. The following code 
was used to generate a random ISN: 
__u32 secure_tcp_sequence_number(__u32 saddr, __u32 daddr, 
                 __u16 sport, __u16 dport) 
{ 
    static __u32    rekey_time = 0; 
    static __u32    count = 0; 
    static __u32    secret[12]; 
    struct timeval     tv; 
    __u32        seq; 
    /* 
     * Pick a random secret every REKEY_INTERVAL seconds. 
     */ 
    do_gettimeofday(&tv);    /* We need the usecs below... */ 
   if (!rekey_time || (tv.tv_sec - rekey_time) 
       > REKEY_INTERVAL) { 
       rekey_time = tv.tv_sec; 
       /* First three words are overwritten below. */ 
       get_random_bytes(&secret+3, sizeof(secret)-12); 
       count = (tv.tv_sec/REKEY_INTERVAL) state!=TCP_ESTABLISHED) 
    { 
        if(sk->state==TCP_LISTEN) 
        { 
            seq = secure_tcp_sequence_number(saddr, daddr, 
                             skb->h.th->dest, 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
891 
                             skb->h.th->source); 
            tcp_conn_request(sk, skb, daddr, saddr, opt, 
                dev, seq); 
            return 0; 
        } 
        ... /* various other processing */ 
    } 
    /* 
     *    We are now in normal data flow (see the step list 
     *    in the RFC) Note most of these are inline now. 
     *    I'll inline the lot when I have time to test it 
     *    hard and look at what gcc outputs 
     */ 
    if (!tcp_sequence(sk, skb->seq, skb->end_seq-th->syn)) 
        die(); /* bad tcp sequence number */ 
    if(th->rst) 
        return tcp_reset(sk,skb); 
    if(th->ack && !tcp_ack(sk,th,skb->ack_seq,len)) 
        die(); /* bad tcp acknowledgement number */ 
    /* Process the encapsulated data */ 
    if(tcp_data(skb,sk, saddr, len)) 
        kfree_skb(skb, FREE_READ); 
} 
If the incoming packet is associated with a socket that isn't in TCP_ESTABLISHED, it 
performs a variety of processing related to connection initiation and teardown. What's 
important to note is that after this processing is performed, the code can fall through 
to the normal data-processing code in certain situations. This is usually innocuous, as 
control packets such as SYN and RST don't contain data. Looking at the preceding 
code, you can see that any data in the initial SYN packet isn't processed, as the server 
is in the TCP_LISTEN state, and it returns out of the receive function. However, after 
the SYN is received and the server is in the SYN_RCVD state, the code falls through and 
data is processed on incoming packets. So data in packets sent after the initial SYN 
but before the three-way handshake is completed is actually queued to be delivered 
to the userland application. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
892 
The attack Osborne conceived was to spoof packets from a trusted peer and provide 
data before completion of the three-way handshake. Attackers would first send a 
normal SYN packet, spoofed from a trusted peer (see Figure 14-20). 
Figure 14-20. Transmit 1 
Upon receipt of the SYN packet, the server enters the SYN_RCVD state and sends the 
SYN-ACK packet to the purported source of the SYN. Attackers can't see this packet, 
but as long as they act quickly enough, their attack isn't hindered. 
At this point, they know which sequence numbers are valid in the window for data 
destined for the victim host, but they don't know what the acknowledgement 
sequence number should be because they didn't see the SYN-ACK packet. However, 
look closely at the previous code from tcp_rcv(). The second nuance that Osborne 
leveraged is that if the ACK flag isn't set in the TCP packet, the Linux TCP stack 
doesn't check the acknowledgement sequence number for validity before queuing the 
data! So attackers simply send some data in a packet with a valid sequence number 
but with no TCP flags set (see Figure 14-21). 
Figure 14-21. Transmit 2 
Now attackers have data queued in the victim machine's kernel, ready to be delivered 
to the userland rlogind process as soon as the three-way handshake is completed. 
Normally, this handshake can't be completed without knowing or guessing the correct 
acknowledgement number, but Osborne discovered a third vulnerability that lets 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
893 
attackers deliver the death blow. Usually, the userland process doesn't return from 
the call to accept() unless the handshake is completed. The following code shows the 
logic for this in tcp.c: 
static struct sk_buff *tcp_find_established(struct sock *s) 
{ 
    struct sk_buff *p=skb_peek(&s->receive_queue); 
    if(p==NULL) 
        return NULL; 
    do 
    { 
        if(p->sk->state == TCP_ESTABLISHED || 
            p->sk->state >= TCP_FIN_WAIT1) 
            return p; 
        p=p->next; 
    } 
    while(p!=(struct sk_buff *)&s->receive_queue); 
    return NULL; 
} 
Note that the kernel treats states greater than or equal to TCP_FIN_WAIT1 as being 
equivalent to ESTABLISHED. The following code handles packets with the FIN bit set: 
static int tcp_fin(struct sk_buff *skb, struct sock *sk, 
struct tcphdr *th) 
{ 
... 
   switch(sk->state) 
   { 
       case TCP_SYN_RECV: 
       case TCP_SYN_SENT: 
       case TCP_ESTABLISHED: 
           /* 
            * move to CLOSE_WAIT, tcp_data() already handled 
            * sending the ack. 
            */ 
           tcp_set_state(sk,TCP_CLOSE_WAIT); 
           if (th->rst) 
               sk->shutdown = SHUTDOWN_MASK; 
           break; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
894 
CLOSE_WAIT is greater than TCP_FIN_WAIT, which means that if attackers simply send a 
FIN packet, it moves the connection to the CLOSE_WAIT state, and the userland 
application's call to accept() returns successfully. The application then has data 
available to read on its socket: the data the attackers spoofed! In summary, the 
attack involves the three packets shown in Figure 14-22. 
Figure 14-22. Blind spoofing attack 
Sequence Number Representation 
Sequence numbers are 32-bit unsigned integers that have a value between 0 and 
2^32-1. Note that sequence numbers wrap around at 0, and special care must be 
taken to make this wrapping work flawlessly. For example, say you have a TCP 
window starting at 0xfffffff0 with a size of 0x1000. This means data with sequence 
numbers between 0xfffffff0 and 0xffffffff is within the window, as is data with 
sequence numbers between 0x0 and 0xff0. This flexibility is provided by the following 
macros: 
    #define    SEQ_LT(a,b)     ((int)((a)-(b))  0) 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
895 
    #define    SEQ_GEQ(a,b)    ((int)((a)-(b)) >= 0) 
It's worth taking a moment to study how these macros work around corner cases. 
Basically, they measure the absolute value distance between two sequence numbers. 
In general, if you see code operate on sequence numbers without using a similar type 
of macro, you should be suspicious. The next section describes an example. 
Snort Reassembly Vulnerability 
Bruce Leidl, Juan Pablo Martinez Kuhn, and Alejandro David Weil from CORE Security 
Technologies published a remotely exploitable heap overflow in Snort's TCP stream 
reassembly that resulted from improper handling of sequence numbers 
(www.coresecurity.com/common/showdoc.php?idxseccion=). To understand this 
code, you need a little background on relevant structures used by Snort to represent 
TCP connections and incoming TCP packets. The incoming TCP segment is 
represented in a StreamPacketData structure, which has the following prototype: 
typedef struct _StreamPacketData 
{ 
    ubi_trNode Node; 
    u_int8_t *pkt; 
    u_int8_t *payload; 
    SnortPktHeader pkth; 
    u_int32_t seq_num; 
    u_int16_t payload_size; 
    u_int16_t pkt_size; 
    u_int32_t cksum; 
    u_int8_t chuck;    /* mark the spd for 
                          chucking if it's 
                        * been reassembled 
                        */ 
} StreamPacketData; 
The fields relevant for this attack are the sequence number, stored in the seq_num 
member, and the size of the segment, stored in payload_size. The Snort stream 
reassembly preprocessor has another structure to represent state information about 
a current stream: 
typedef struct _Stream 
{ 
    ... members cut out for brevity ... 
    u_int32_t current_seq; /* current sequence number */ 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
896 
    u_int32_t base_seq;    /* base seq num for this 
                       packet set */ 
    u_int32_t last_ack;    /* last segment ack'd */ 