β − sk to V, and
k. Let H ∈ Fp[X]
both parties compute [wk
be the polynomial of degree at most 2C − 2 such that
γ for i ∈ [2C − 1]. Note that P can compute H
H(i) = wi
explicitly, while P and V can compute the authenticated
value [H(k)] for any k ∈ Fpr using Lagrange interpolation
over the shares [wi
3) V sends a uniform ν ∈ Fpr to P. Then the parties compute
authenticated values [F (ν)], [G(ν)], and [H(ν)].
4) Finally, V veriﬁes that F (ν) · G(ν) = H(ν) as in ap-
proach 1, above. That is, V sends a uniform η ∈ Fpr to P,
who responds by running δ := Open(η · [F (ν)] − [x]) and
σ := Open([G(ν)] − [y]), followed by
CheckZero([z] − η · [H(ν)] + σ · [x] + δ · [y] + δ · σ).
This has soundness error (2C − 1)/pr + εopen. To see this,
note that if there exists an i ∈ [C] with wi
γ then
the polynomials F · G and H are different, and so agree in at
most 2C − 2 points. Thus, F (ν) · G(ν) (cid:54)= H(ν) except with
probability at most (2C − 2)/pr. When that is the case, an
analysis in the ﬁrst approach shows that the ﬁnal check fails
except with probability at most 1/pr + εopen.
β (cid:54)= wi
α · wi
This approach can also be made non-interactive using the
Fiat-Shamir heuristic in the random-oracle model.
IV. SUBFIELD VOLE
In this section, we present an sVOLE protocol that can
be used during the ofﬂine phase of our ZK protocol. In
Section IV-A, we ﬁrst present an sVOLE protocol with linear
communication complexity. Although this already sufﬁces for
our ZK protocol, we can obtain much better efﬁciency using
“sVOLE extension” (by analogy with OT extension), by which
we extend a small number of “base” sVOLE correlations into
a larger number of sVOLE correlations. Toward this end, in
Section IV-B we construct a protocol for single-point sVOLE
(spsVOLE) in the F p,r
sVOLE-hybrid model, where spsVOLE is
like sVOLE except that the vector of authenticated values
has only a single nonzero entry. Then, in Section IV-C, we
present an efﬁcient protocol for “sVOLE extension” using
spsVOLE as a subroutine and relying on a variant of the
Learning Parity with Noise (LPN) assumption. We provide
some intuition for each protocol in the relevant section. Our
implementation shows that this protocol outperforms all prior
work; we discuss its concrete performance in Section V-A.
A. Base sVOLE Protocol
that
We present a “base” sVOLE protocol
is based on
oblivious transfer (OT) and is inspired by prior work of Keller
et al. [49], [50]. Our protocol relies on the correlated obliv-
ious product evaluation with errors (COPEe) functionality
FCOPEe, which extends the analogous functionality introduced
by Keller et al. [50] to the subﬁeld case we are interested in.
We show in Appendix C how to UC-realize FCOPEe from OT.
Functionality F p,r
COPEe
Initialize: Upon receiving init from parties PA, PB, sample
∆ ← Fpr if PB is honest, and receive ∆ ∈ Fpr from the
adversary otherwise. Store global key ∆, send ∆ to PB, and
ignore all subsequent init commands. Let ∆B ∈ {0, 1}rm be
the bit-decomposition of ∆, where m = (cid:100)log p(cid:101).
Extend: Upon receiving (extend, u) with u ∈ Fp from PA and
(extend) from PB, this functionality operates as follows:
1) Sample v ← Fpr . If PB is corrupted, instead receive v ∈ Fpr
2) Compute w := v + ∆ · u ∈ Fpr .
3) If PA is corrupted, receive w ∈ Fpr and u ∈ Frm
from the adversary.
from the
p
adversary, and recompute
v := w − (cid:104)g ∗ u, ∆B(cid:105) ∈ Fpr ,
where ∗ denotes the component-wise product.
4) Output (u, w) to PA and v to PB.
Fig. 4: COPEe functionality.
Protocol Πp,r
base-sVOLE
COPEe
Sub-protocol Πp,r
base-LsVOLE with selective-failure leakage:
1) PA and PB send init to F p,r
COPEe, which returns ∆ to PB.
2) PA samples ui ← Fp for i ∈ [0, n) and ah ← Fp for
h ∈ [0, r). For i ∈ [0, n), PA sends (extend, ui) to F p,r
COPEe, which returns wi ∈ Fpr
and PB sends (extend) to F p,r
to PA and vi ∈ Fpr to PB such that wi = vi + ∆ · ui. For
h ∈ [0, r), both parties also call F p,r
COPEe on respective inputs
(extend, ah) and (extend), following which PA gets ch ∈
Fpr and PB obtains bh ∈ Fpr such that ch = bh + ∆ · ah.
3) PB samples χ0, . . . , χn−1 ← Fpr , and sends them to PA.
h=0 ah · Xh,
h=0 ch · Xh, and sends (x, z) to PB.
h=0 bh · Xh and checks
5) For i ∈ [0, n), PA deﬁnes u[i] = ui and w[i] = wi, and PB
Then PA computes x := (cid:80)n−1
z :=(cid:80)n−1
i=0 χi · wi +(cid:80)r−1
4) PB computes y :=(cid:80)n−1
i=0 χi · ui +(cid:80)r−1
i=0 χi · vi +(cid:80)r−1
that z = y + ∆ · x. If not, PB aborts.
sets v[i] = vi.
Full protocol without any leakage: Let (cid:96) = (cid:100)2ρ/r log p(cid:101) + 1.
1) Both parties execute the above sub-protocol with parameters
p and k = (cid:96) · r. Then, PA obtains (u, w) ∈ Fn
pk and
PB gets ∆ ∈ F
pk such that w = v + ∆· u. By
viewing an element in F
pr , two parties
obtain {wi}i∈[(cid:96)] and {(∆i, vi)}i∈[(cid:96)] respectively such that
wi = vi + u · ∆i, wi, vi ∈ Fn
2) PB samples α1, . . . , α(cid:96) ← Fpr and sends them to PA.
pk as a vector in F(cid:96)
pr and ∆i ∈ Fpr .
pk and v ∈ Fn
p × Fn
PA computes t := (cid:80)(cid:96)
(cid:80)(cid:96)
i=1 αi · vi and Γ :=(cid:80)(cid:96)
i=1 αi · wi; PB computes s :=
i=1 αi · ∆i, where t = s + Γ · u.
3) PA outputs u and t; PB outputs Γ and s.
Fig. 5: Base sVOLE protocol in the FCOPEe-hybrid model.
Functionality FCOPEe is described in Figure 4, where m =
pr by
(cid:0)(1, . . . , 2m−1), (1, . . . , 2m−1) · X, . . . , (1, . . . , 2m−1) · Xr−1(cid:1) .
(cid:100)log p(cid:101). In FCOPEe, we deﬁne a “gadget vector” g ∈ Frm
For a vector x ∈ Frm
pr , we deﬁne
r−1(cid:88)
(cid:16) m−1(cid:88)
x[i · m + j] · 2j(cid:17) · Xi ∈ Fpr ,
(cid:104)g, x(cid:105) =
i=0
j=0
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:45 UTC from IEEE Xplore.  Restrictions apply. 
1080
p
pr
by viewing x as lying in Frm
In Figure 5, we present a protocol Πp,r
where the deﬁnition can be extended to the cases x ∈ {0, 1}rm
or x ∈ Frm
in the natural
way. The bit-decomposition of ∆ ∈ Fpr is the string ∆B ∈
{0, 1}rm satisfying (cid:104)g, ∆B(cid:105) = ∆.
base-sVOLE that UC-
sVOLE in the FCOPEe-hybrid model. We ﬁrst describe
realizes F p,r
a sub-protocol Πp,r
base-LsVOLE, which allows two parties to gener-
ate sVOLE correlations with a selective-failure leakage on ∆,
meaning that a malicious PA is allowed to guess a subset of ∆
and the protocol execution aborts for an incorrect guess. In this
sub-protocol, PB performs a correlation check in steps 3 and 4
to verify that the resulting sVOLE correlations are correct (i.e.,
w = v + ∆ · u). Then, based on Πp,r
base-LsVOLE, we show how
to generate sVOLE correlations without such leakage using
the leftover hash lemma [44]. In protocol Πp,r
base-sVOLE, all the
uniform coefﬁcients (i.e., {χi},{αi}) can be computed from a
random seed and a hash function modeled as a random oracle.
We prove the following in the full version of our work.
base-sVOLE UC-realizes F p,r
Theorem 2. Protocol Πp,r
sVOLE in the
F p,r
COPEe-hybrid model. In particular, no PPT environment Z
can distinguish the real-world execution from the ideal-world
execution, except with probability at most (r log p)2/pr +1/2ρ.
Optimization. For many applications (e.g., our protocols)
where learning the entire global key ∆ is necessary in order to
violate security of some higher-level protocol, it is unnecessary
to eliminate the selective-failure leakage about ∆. This can
be argued as follows. Assume the adversary guesses a set
S (if there are multiple guesses then S is the intersection
of all guessed sets) and is caught cheating if ∆ (cid:54)∈ S.
The probability that the selective-failure attack is successful
is |S|/pr; conditioned on this event, the min-entropy of ∆ is
reduced to log |S|. Therefore, the overall probability for the
adversary to determine ∆ is |S|/pr · 2− log |S| = p−r, which
is the same as the probability in the absence of any leakage.
Similar observations have been used in secure-computation
protocols [50], [25], [59].
B. Single-Point sVOLE
spsVOLE
spsVOLE in the (F p,r
Single-point sVOLE is a variant of sVOLE where the vector
of authenticated values contains exactly one nonzero entry.
We present the associated functionality F p,r
spsVOLE in Figure 6,
where the vector length n = 2h is assumed to be a power of
two for simplicity. In Figure 7, we present a protocol Πp,r
that UC-realizes F p,r
sVOLE,FOT,FEQ)-hybrid
model, where FOT is the standard OT functionality and FEQ
corresponds to a weak equality test that reveals PA’s input
to PB. (See Appendix A for formal deﬁnitions of both func-
tionalities.) Conceptually, the protocol can be divided into two
steps: (1) the parties run a semi-honest protocol for generating
a vector of authenticated values [u] having a single nonzero
entry; then (2) a consistency check is performed to detect
malicious behavior. We explain both steps in what follows.
p and a uniform
index α. Letting u ∈ Fn
p be the vector that is 0 everywhere
except that u[α] = β, the goal is for the parties to generate [u].
PA begins by choosing a uniform β ∈ F∗
Functionality F p,r
spsVOLE
Initialize: Upon receiving init from PA and PB, sample ∆ ←
Fpr if PB is honest and receive ∆ ∈ Fpr from the adversary
otherwise. Store global key ∆, send ∆ to PB, and ignore all
subsequent init commands.
Extend: Upon receiving (sp-extend, n), where n = 2h for some
h ∈ N, from PA and PB, do:
1) If PB is honest, sample v ← Fn
pr . Otherwise, receive v ∈
2) If PA is honest, then sample uniform u ∈ Fn
Fn
pr from the adversary.
p with exactly
one nonzero entry, and compute w := v + ∆ · u ∈ Fn
pr .
Otherwise, receive u ∈ Fn
p (with at most one nonzero entry)
and w ∈ Fn
pr from the adversary, and recompute v := w −
∆ · u ∈ Fn
pr .
3) If PB is corrupted, receive a set I ⊆ [0, n) from the
adversary. Let α ∈ [0, n) be the index of the nonzero entry
of u. If α ∈ I, send success to PB and continue. Otherwise,
send abort to both parties and abort.
4) Send (u, w) to PA and v to PB.
Global-key query: If PA is corrupted, receive (guess, ∆(cid:48)) from
the adversary with ∆(cid:48) ∈ Fpr . If ∆(cid:48) = ∆, send success to PA
and ignore any subsequent global-key query. Otherwise, send
abort to both parties and abort.
Fig. 6: Functionality for single-point sVOLE.
pr
: {0, 1}κ → F2
That is, they want PA to hold w ∈ Fn
pr and PB to hold v ∈ Fn
such that w = v + ∆ · u. To do so, the parties begin by
generating the authenticated value [β]; this is easy to do using
a call to F p,r
sVOLE. Next, they use a subroutine [17], [18], [16]
based on the GGM construction [35] to enable PB to generate
v ∈ Fn
pr while allowing PA to learn all the components of
that vector except for v[α]. This is done in the following way.
Let G : {0, 1}κ → {0, 1}2κ and G(cid:48)
pr be
pseudorandom generators (PRGs). PB chooses uniform s ∈
{0, 1}κ and computes all nodes in a GGM tree of depth h
with s at the root: That is, letting si
j denote the value at the
jth node on the ith level of the tree, PB deﬁnes s0
0 := s and
G(si−1
); ﬁnally, PB computes a vector v at the leaves as
) for j ∈ [0, 2h−1). Next, PB
(v[2j], v[2j + 1]) := G(cid:48)(sh−1
lets K i
1) be the XOR of the values at the even
(resp., odd) nodes on the ith level. (When i = h we replace
XOR with addition in Fpr.) We write
1)}i∈[h]
then for i ∈ [1, h) and j ∈ [0, 2i−1) computes(cid:0)si
(cid:0){vj}j∈[0,n), {(K i
(cid:1) := GGM(1n, s)
(cid:1) :=
0 (resp., K i
0, K i
2j, si
2j+1
j
j
¯αi
to denote this computation done by PB. It is easily veriﬁed
that if PA is given {K i
}i∈[h] (where ¯αi is the complement
of the ith bit of α), then PA can compute {v[j]}j(cid:54)=α, while
v[α] remains computationally indistinguishable from uniform
given PA’s view. We denote the resulting computation of PA by
}i∈[h]
(α,{K i
{vj}j(cid:54)=α := GGM
(cid:48)
using h OT invocations.)
Following the above, PA sets w[i] := v[i] for i (cid:54)= α. Note
that w[i] = v[i] + ∆ · u[i] for i (cid:54)= α (since u[i] = 0 for
i (cid:54)= α), so all that remains is for PA to obtain the missing
value w[α] = v[α] + ∆ · β (without revealing α, β to PB).
Recall the parties already hold [β], meaning that PA holds