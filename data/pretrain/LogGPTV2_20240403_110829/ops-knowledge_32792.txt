User: I'm looking to start using a key/value store for some side projects (mostly as a learning experience), but so many have popped up in the recent past that I've got no idea where to begin.  Just listing from memory, I can think of:

CouchDB
MongoDB
Riak
Redis
Tokyo Cabinet
Berkeley DB
Cassandra
MemcacheDB

And I'm sure that there are more out there that have slipped through my search efforts.  With all the information out there, it's hard to find solid comparisons between all of the competitors.  My criteria and questions are:

(Most Important) Which do you recommend, and why?
Which one is the fastest?
Which one is the most stable?
Which one is the easiest to set up and install?
Which ones have bindings for Python and/or Ruby?

Edit:
So far it looks like Redis is the best solution, but that's only because I've gotten one solid response (from ardsrk).  I'm looking for more answers like his, because they point me in the direction of useful, quantitative information.  Which Key-Value store do you use, and why?
Edit 2:
If anyone has experience with CouchDB, Riak, or MongoDB, I'd love to hear your experiences with them (and even more so if you can offer a comparative analysis of several of them)
Assistant: I've been playing with MongoDB and it has one thing that makes it perfect for my application, the ability to store complex Maps/Lists in the database directly. I have a large Map where each value is a list and I don't have to do anything special just to write and retrieve that without knowing all the different keys and list values. I don't know much about the other options but the speed and that ability make Mongo perfect for my application. Plus the Java driver is very simple to use.