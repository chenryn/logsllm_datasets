title:Scaling Byzantine Fault-Tolerant Replication toWide Area Networks
author:Yair Amir and
Claudiu Danilov and
Jonathan Kirsch and
John Lane and
Danny Dolev and
Cristina Nita-Rotaru and
Josh Olsen and
David John Zage
Scaling Byzantine Fault-Tolerant Replication to Wide Area Networks
Yair Amir1, Claudiu Danilov1, Danny Dolev2, Jonathan Kirsch1, John Lane1,
Cristina Nita-Rotaru3, Josh Olsen3, David Zage3
1 Johns Hopkins University, Baltimore, MD. fyairamir, claudiu, jak, PI:EMAIL
2 Hebrew University of Jerusalem, Jerusalem, Israel. PI:EMAIL
3 Purdue University, West Lafayette, IN. fcrisn, jolsen, PI:EMAIL
Abstract
This paper presents the (cid:2)rst hierarchical Byzantine
fault-tolerant replication architecture suitable to systems
that span multiple wide area sites. The architecture con-
(cid:2)nes the effects of any malicious replica to its local site,
reduces message complexity of wide area communica-
tion, and allows read-only queries to be performed lo-
cally within a site for the price of additional hardware. A
prototype implementation is evaluated over several net-
work topologies and is compared with a (cid:3)at Byzantine
fault-tolerant approach.
1 Introduction
During the last few years, there has been considerable
progress in the design of Byzantine fault-tolerant replica-
tion systems. The current state of the art protocols per-
form very well on small-scale systems that are usually
con(cid:2)ned to local area networks. However, current solu-
tions employ (cid:3)at architectures that introduce several lim-
itations: Message complexity limits their ability to scale,
and strong connectivity requirements limit their availabil-
ity on WANs that usually have lower bandwidth, higher
latencies, and exhibit network partitions.
This paper presents Steward,
the (cid:2)rst hierarchical
Byzantine fault-tolerant replication architecture suitable
for systems that span multiple wide area sites, each con-
sisting of several server replicas. Steward assumes no
trusted component in the entire system, other than a valid
mechanism to pre-distribute private/public keys.
Steward uses a Byzantine fault-tolerant protocol
within each site and a lightweight, benign fault-tolerant
protocol among wide area sites. Each site, consisting of
several potentially malicious replicas, is converted into a
single logical trusted participant in the wide area fault-
tolerant protocol. Servers within a site run a Byzantine
agreement protocol to order operations locally, and they
agree upon the content of any message leaving the site for
the global protocol.
Guaranteeing a consistent agreement within a site is
not enough. The protocol needs to eliminate the ability
of malicious replicas to misrepresent decisions that took
place in their site. To that end, messages between servers
at different sites carry a threshold signature attesting that
enough servers at the originating site agreed with the con-
tent of the message.
Using threshold signatures allows Steward to save the
space and computation associated with sending and veri-
fying multiple individual signatures. Moreover, it allows
for a practical key management scheme where servers
need to know only a single public key for each remote site
and not the individual public keys of all remote servers.
The main bene(cid:2)ts of our architecture are:
1. It reduces the message complexity on wide area ex-
changes from O(N 2) (N being the total number of
replicas in the system) to O(S 2) (S being the num-
ber of wide area sites), considerably increasing the
system’s ability to scale.
2. It con(cid:2)nes the effects of any malicious replica to its
local site, enabling the use of a benign fault-tolerant
algorithm over the WAN. This improves the avail-
ability of the system over WANs that are prone to
partitions, as only a majority of connected sites is
needed to make progress, compared with at least
2f + 1 servers (out of 3f + 1) in (cid:3)at Byzantine ar-
chitectures.
3. It allows read-only queries to be performed locally
within a site, enabling the system to continue serv-
ing read-only requests even in sites that are parti-
tioned away.
4. It enables a practical key management scheme
where public keys of speci(cid:2)c replicas need to be
known only within their own site.
These bene(cid:2)ts come with a price. If the requirement is
to protect against any f Byzantine servers in the system,
Steward requires 3f + 1 servers in each site. However, in
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:28 UTC from IEEE Xplore.  Restrictions apply. 
return, it is able to overcome up to f malicious servers in
each site.
Steward’s ef(cid:2)cacy depends on using servers within
a site which are unlikely to suffer the same vulnerabil-
ities. Multi-version programming [1], where indepen-
dently coded software implementations are run on each
server, can yield the desired diversity. Newer techniques
[2] can automatically and inexpensively generate varia-
tion.
The paper demonstrates that the performance of Stew-
ard with 3f + 1 servers in each site is much better
even compared with a (cid:3)at Byzantine architecture with a
smaller system of 3f + 1 total servers spread over the
same wide area topology. The paper further demonstrates
that Steward exhibits performance comparable (though
somewhat lower) with common benign fault-tolerant pro-
tocols on wide area networks.
We implemented the Steward system and a DARPA
red-team experiment has con(cid:2)rmed its practical surviv-
ability in the face of white-box attacks (where the red-
team has complete knowledge of system design, access
to its source code, and control of f replicas in each site).
According to the rules of engagement, where a red-team
attack succeeded only if it stopped progress or caused
consistency errors, no attacks succeeded. We have in-
cluded a detailed description of the red-team experiment
in [3].
The remainder of the paper is presented as follows.
We provide background in Section 2. We present our as-
sumptions and the service model in Section 3. We de-
scribe our protocol, Steward, in Section 4. We present
experimental results demonstrating the improved scala-
bility of Steward on WANs in Section 5. We discuss pre-
vious work in several related research areas in Section 6.
We summarize our conclusions in Section 7.
2 Background
Our work requires concepts from fault
tolerance,
Byzantine fault tolerance and threshold cryptography. To
facilitate the presentation of our protocol, Steward, we
(cid:2)rst provide an overview of three representative works in
these areas: Paxos, BFT and RSA Threshold Signatures.
Paxos: Paxos [4, 5] is a well-known fault-tolerant pro-
tocol that allows a set of distributed servers, exchang-
ing messages via asynchronous communication, to totally
order client requests in the benign-fault, crash-recovery
model. One server, referred to as the leader, coordinates
the protocol. If the leader crashes or becomes unreach-
able, a view change occurs, allowing progress to resume
in the new view under the reign of a new leader. Paxos re-
quires at least 2f + 1 servers to tolerate f faulty servers.
Since servers are not Byzantine, a single reply needs to
be delivered to the client.
In the common case, in which a single leader exists
and can communicate with a majority of servers, Paxos
uses two asynchronous communication rounds to glob-
ally order client updates. In the (cid:2)rst round, the leader as-
signs a sequence number to a client update and proposes
this assignment to the rest of the servers. In the second
round, any server receiving the proposal accepts the pro-
posal by sending an acknowledgment to the rest of the
servers. When a server receives a majority of acknowl-
edgments (cid:150) indicating that a majority of servers have ac-
cepted the proposal (cid:150) the server orders the corresponding
update.
BFT: The BFT [6] protocol addresses the problem of
replication in the Byzantine model where a number of the
servers can exhibit arbitrary behavior. Similar to Paxos,
BFT uses an elected leader to coordinate the protocol and
proceeds through a series of views. BFT extends Paxos
into the Byzantine environment by using an additional
communication round in the common case to ensure con-
sistency both in and across views and by constructing
strong majorities in each round of the protocol. Specif-
ically, BFT requires acknowledgments from 2f + 1 out
of 3f + 1 servers to mask the behavior of f Byzantine
servers. A client must wait for f + 1 identical responses
to be guaranteed that at least one correct server assented
to the returned value.
In the common case, BFT uses three communication
rounds. In the (cid:2)rst round, the leader assigns a sequence
number to a client update and proposes this assignment
to the rest of the servers by broadcasting a pre-prepare
message. In the second round, a server accepts the pro-
posed assignment by broadcasting an acknowledgment,
prepare. When a server receives 2f +1 prepare messages
with the same view number and sequence number as the
pre-prepare, it begins the third round by broadcasting a
commit message. A server commits the corresponding
update when it receives 2f + 1 matching commit mes-
sages.
Threshold digital signatures: Threshold cryptogra-
phy [7] distributes trust among a group of participants to
protect information (e.g. threshold secret sharing [8]) or
computation (e.g. threshold digital signatures [9]).
A (k, n) threshold digital signature scheme allows a
set of servers to generate a digital signature as a single
logical entity despite (k - 1) Byzantine faults. It divides
a private key into n shares, each owned by a server, such
that any set of k servers can pool their shares to generate
a valid threshold signature on a message, m, while any
set of fewer than k servers is unable to do so. Each server
uses its key share to generate a partial signature on m and
sends the partial signature to a combiner server, which
combines the partial signatures into a threshold signature
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:28 UTC from IEEE Xplore.  Restrictions apply. 
on m. The threshold signature is veri(cid:2)ed using the public
key corresponding to the divided private key.
A representative example of practical threshold digital
signature schemes is the RSA Shoup [9] scheme, which
allows participants to generate threshold signatures based
on the standard RSA[10] digital signature.
It provides
veri(cid:2)able secret sharing [11] (i.e. the ability to con(cid:2)rm
that a signature share was generated using a valid private
key share), which is critical in achieving robust signature
generation [12] in Byzantine environments.
3 System Model and Service Guarantees
Servers are implemented as deterministic state ma-
chines [13]. All correct servers begin in the same initial
state and transition between states by applying updates as
they are ordered. The next state is completely determined
by the current state and the next update to be applied.
We assume a Byzantine fault model. Servers are either
correct or faulty. Correct servers do not crash. Faulty
servers may behave arbitrarily. Communication is asyn-
chronous. Messages can be delayed, lost, or duplicated.
Messages that do arrive are not corrupted.
Servers are organized into wide area sites, each having
a unique identi(cid:2)er. Each server belongs to one site. The
network may partition into multiple disjoint components,
each containing one or more sites. During a partition,
servers from sites in different components are unable to
communicate with each other. Components may subse-
quently re-merge. Each site Si has at least 3 (cid:3) (fi) + 1
servers, where fi is the maximum number of servers that
may be faulty within Si. For simplicity, we assume in
what follows that all sites may have at most f faulty
servers.
Clients are distinguished by unique identi(cid:2)ers. Clients
send updates to servers within their local site and receive
responses from these servers. Each update is uniquely
identi(cid:2)ed by a pair consisting of the identi(cid:2)er of the client
that generated the update and a unique, monotonically in-
creasing logical timestamp. Clients propose updates se-
quentially: a client may propose an update with times-
tamp i + 1 only after it receives a reply for an update with
timestamp i.
We employ digital signatures, and we make use of a
cryptographic hash function to compute message digests.
Client updates are properly authenticated and protected
against modi(cid:2)cations. We assume that all adversaries, in-
cluding faulty servers, are computationally bounded such
that they cannot subvert these cryptographic mechanisms.
We also use a (2f + 1, 3f + 1) threshold digital signa-
ture scheme. Each site has a public key, and each server
receives a share with the corresponding proof that can be
used to demonstrate the validity of the server’s partial sig-
natures. We assume that threshold signatures are unforge-
able without knowing 2f + 1 or more secret shares.
Our protocol assigns global, monotonically increasing
sequence numbers to updates, to establish a global, total
order. Below we de(cid:2)ne the safety and liveness properties
of the Steward protocol. We say that:
(cid:15) a client proposes an update when the client sends
the update to a correct server in the local site, and
the correct server receives it.
(cid:15) a server executes an update with sequence number
i when it applies the update to its state machine.
A server executes update i only after having exe-
cuted all updates with a lower sequence number in
the global total order.
(cid:15) two servers are connected if any message that is sent
between them will arrive in a bounded time. This
bound is not known beforehand, and it may change
over time.
(cid:15) two sites are connected if every correct server of one
site is connected to every correct server of the other
site.
If two correct servers
DEFINITION 3.1 S1 - SAFETY:
execute the ith update, then these updates are identical.
DEFINITION 3.2 S2 - VALIDITY: Only an update that
was proposed by a client may be executed.
If there
DEFINITION 3.3 GL1 - GLOBAL PROGRESS:
exists a set of a majority of sites, each consisting of at
least 2f + 1 correct, connected servers, and a time after
which all sites in the set are connected, then if a client
connected to a site in the set proposes an update, some
correct server in some site in the set eventually executes
the update.
4 Protocol Description
Steward leverages a hierarchical architecture to scale
Byzantine replication to the high-latency, low-bandwidth
links characteristic of WANs.
It uses relatively costly
Byzantine fault-tolerant protocols and threshold signa-
tures to con(cid:2)ne malicious behavior to local sites. Each
site then acts as a single logical participant in a Paxos-
like, benign fault-tolerant protocol run on the wide area.
The use of this lightweight protocol reduces the number
of messages and communication rounds on the wide area
compared to a (cid:3)at Byzantine solution.
Since each entity participating in our protocol is a site
consisting of a set of potentially malicious servers (in-
stead of a single trusted participant as Paxos assumes),
Steward employs several intra-site protocols to emulate
the behavior of a correct Paxos participant. For exam-
ple, while the leader in Paxos can unilaterally assign a
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:11:28 UTC from IEEE Xplore.  Restrictions apply. 
sequence number to an update, Steward instead uses a
BFT-like agreement algorithm, ASSIGN-SEQUENCE, at
the leading site to assign a sequence number. Stew-
ard then uses a second intra-site protocol, THRESHOLD-
SIGN, to sign the resulting Paxos proposal message.
One server in each site, the representative, coordinates
the local agreement and threshold signing protocols. The
representative of the leading site coordinates the wide
area agreement protocol. If the representative of a site
acts maliciously, the servers of that site will elect a new
representative. If the leading site is partitioned away, the
servers in the other sites will elect a new one.
Below we provide a description of Steward’s com-
mon case operation, the view changes algorithms, and the
timers. Complete pseudocode and a proof of correctness
can be found in [3].