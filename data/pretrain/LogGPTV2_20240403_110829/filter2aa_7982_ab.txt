.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH re_syntax 3tcl "8.1" Tcl "Tcl Built-In Commands"
.BS
.SH NAME
re_syntax \- Tcl 正则表达式的语法。
.BE
.SH "描述 DESCRIPTION"
.PP
一个\fB正则表达式\fR (\fIregular expression\fR ) 描述了一类字符串。它是匹配特定字符串而不匹配其他的字符串的一个模式。
.SH "RE 的不同风格 DIFFERENT FLAVORS OF REs"
正则表达式(“RE”)由 POSIX 定义，有两种风格(flavor): \fB扩展\fR RE(``EREs'')和\fB基本\fRRE(``BREs'')。ERE 粗略的相当于传统的 \fBegrep\fR \fI\fR的正则表达式，而 BRE 粗略的相当于传统的 \fBed\fR 的正则表达式。这个实现增加了第三种风格，\fB高级\fRRE(``AREs'')，它基本上是 ERE 再加上一些重要的扩展。
.PP
译注：grep 缺省支持 BRE，通过指定 -E 选项来支持 ERE，历史上的 egrep 和 fgrep 已经合并入 grep 中。ed、sed 支持 BRE，lex、AWK 支持 ERE。
.PP
这个手册页主要描述 ARE。提供 BRE 主要是为了在一些老程序中反向(backward)兼容；它们将最后讨论。POSIX 
ERE 基本上是 ARE 的一个真子集。在 ERE 中不存在的 ARE 的特征将被指示出来。
.SH "正则表达式的语法 REGULAR EXPRESSION SYNTAX"
.PP
实现 Tcl 正则表达式使用了 Henry Spencer 写的包，基于 POSIX 1003.2 规定和一些(不是全部) Perl5 扩展 (感谢 Henry!)。下面的许多正则表达式描述是原封不动的从他的手册页复制过来的。
.PP
译注：Perl5 的正则表达式也是从 Henry Spencer 所写的包演变而来。
.PP
一个 ARE 是一个或多个由`\fB|\fR'分隔的\fB分支\fR(branch)(构成的)，它匹配与任何一个分支匹配的一个字符序列。
.PP
一个分支是零或多个串联起来的\fB约束\fR(constraint)或\fB定量\fR\fB原子\fR(quantified atom)(构成的)。它与每个构件(约束或定量原子)所匹配的任何字符序列的一个串联相匹配，组成这个字符序列的串联的第一个字符序列与这个分支的第一个构件相匹配，第二个字符序列与第二个构件相匹配，以此类推。一个空分支匹配空串。
.PP
一个定量原子是可能跟随一个单一的\fB定量符\fR (quantifier) 的原子。不加定量符，它匹配这个原子的一个匹配。定量符和它所定量的原子的匹配如下:
.RS 2
.TP 6
\fB*\fR
零个或多个这个原子的匹配的一个序列
.TP
\fB+\fR
一个或多个这个原子的匹配的一个序列
.TP
\fB?\fR
零个或一个这个原子的匹配的一个序列
.TP
\fB{\fIm\fB}\fR
严格的 \fIm\fR 个这个原子的匹配的一个序列
.TP
\fB{\fIm\fB,}\fR
\fIm\fR 或更多个这个原子的匹配的一个序列
.TP
\fB{\fIm\fB,\fIn\fB}\fR
从 \fIm\fR 到 \fIn\fR (包括二者)个这个原子的匹配的一个序列；\fIm\fR 不能超过 \fIn\fR
.TP
\fB*?  +?  ??  {\fIm\fB}?  {\fIm\fB,}?  {\fIm\fB,\fIn\fB}?\fR
不贪婪的 (\fInon-greedy\fR) 定量符，它匹配与上面相同的可能性，但偏好最小字符数而不是最大字符数的匹配(参见MATCHING 匹配)。
.RE
.PP
使用 \fB{\fR 和 \fB}\fR 的形式叫做\fB束缚\fR(bound)。数 \fIm\fR 和 \fIn\fR 是无符号十进制整数，允许的值从 0 到 255(包括0 及 255)。
.PP
\fB原子\fR是下列之一:
.RS 2
.TP 6
\fB(\fIre\fB)\fR
(这里的 \fIre\fR 是任何正则表达式) 匹配对 \fIre \fR的一个匹配，为可能的报告而记录(最长和最短的)匹配
译注：使用圆括号来组合原子。例如，ab*     被识别为原子 a 和原子 b 的闭包 b* 的串联 a(b)*，而不是原子  a 和原子 b 的串联 ab 的闭包 (ab)*。捕获的意思是把在圆括号中的子表达式所匹配的字符序列保存下来，由后续的后引用去使用。
.TP
\fB(?:\fIre\fB)\fR
同上，但不报告(设置为“非捕获”的圆括号)
.TP
\fB()\fR
匹配一个空串，为可能的报告而记录(匹配)
.TP
\fB(?:)\fR
匹配一个空串，不报告
.TP
\fB[\fIchars\fB]\fR
一个方括号表达式 (\fIbracket expression\fR) ，匹配 \fBchars\fR 中的任何一个字符(详情参见 BRACKET EXPRESSIONS 方括号表达式)
.TP
 \fB.\fR
匹配任何单一字符
.TP
\fB\e\fIk\fR
(这里的 \fIk\fR 是一个非 alphanumeric (字母或数字)字符)，匹配被接受为普通字符的这个字符，例如，\e\e 匹配一个反斜杠字符
.TP
\fB\e\fIc\fR
(这里的 \fIc\fR 是一个 alphanumeric 字符(可能跟随着其他字符))，一个\fB转义 (escape)\fR(专属 ARE)，参见后面的ESCAPES 转义)
.TP
\fB{\fR
当跟随着不是数字的一个字符的时候，匹配左花括号字符`\fB{\fR'；在跟随着一个数字的时候，它是一个\fB束缚\fR的开始(参见前面)
.TP
\fIx\fR
这里 \fIx\fR 是没有其他意义的一个单一字符，匹配这个字符。
.RE
.PP
\fB约束\fR (constraint) 在指定条件满足的时候匹配一个空串。一个约束不能跟随一个定量符。简单的约束如下；其他的在以后的 ESCAPES 转义 章节中介绍。
译注：约束的术语叫锚定
.RS 2
.TP 8
\fB^\fR
匹配一行的开始
.TP
\fB$\fR
匹配一行的结束
.TP
\fB(?=\fIre\fB)\fR
\fB正前行\fR(positive lookahead) (专属 ARE)，匹配任何与 \fIre\fR 相匹配的子串的开始端点
.TP
\fB(?!\fIre\fB)\fR
\fB负前行\fR(negative lookahead) (专属 ARE)，匹配任何不与 \fIre\fR 相匹配的子串的开始端点
.RE
.PP
前行约束不能包括后引用(参见后面)，并且其中的所有圆括号被认为是非捕获的。
.PP
一个 RE 不能结束于`\fB\e\fR'.
.SH "方括号表达式 BRACKET EXPRESSIONS"
一个方括号表达式是一个在`\fB[\|]\fR'中包围的一个列表。它通常匹配列表中的任意一个单一字符(参见后面)。如果这个列表以“\fB^\fR”为开始，它匹配不属于这个列表剩余部分的任意一个单一字符(参见后面)。
.PP
如果在这个列表中的两个字符被`\fB\-\fR'分割，这是在归并序列(collating sequence)中这两个字符之间(包括二者)的字符的完整范围的简写，例如，\fB[0\-9]\fR 在 ASCII 中匹配任何十进制数字。两个范围不能共享同一个端点，比如 \fBa\-c\-e\fR 是非法的。范围是很依赖于整理序列的，可移植程序应该避免依靠它们。
.PP
译注：\fB整理元素\fR \-\- 用来确定字符或宽字符字符串的逻辑次序的最小实体。一个整理元素的组成要么是一个单一字符，要么是被整理为一个实体的两个或更多字符。由当前地域(locale)中的 LC_COLLATE 类属的值确定整理元素的当前设置。
.PP
译注：\fB整理序列\fR \-\- 当前地域中的 LC_COLLATE 类属的设置确定 整理元素的相对次序。这个字符次序定义所有整理元素的相对位置，在这个次序中每个元素都占有一个唯一的位置。
.PP
要在这个列表中包括一个文字的
\fB]\fR
或者
\fB\-\fR
，最简单的方法是把它包围在
\fB[.\fR 和 \fB.]\fR
中使它成为一个整理元素(见后)。可替代的，使它成为第一个字符(跟随在可能的‘\fB^\fR’的后面)，或(专属 ARE) 加以 ‘\fB\\fR’先导。可选的，对于‘\fB\-\fR’，使它成为最后的字符，或一个范围的第二端点。要使用一个文字 \fB\-\fR 作为一个范围的开始端点，可以使它成为一个整理元素或(专属 ARE) 加以‘\fB\e\fR’先导。除了这些例外、一些使用 \fB[\fR (参见下段)的组合、和转义，在一个方括号表达式中的所有其他特殊字符失去其特殊意义。
.PP
在一个方括号表达式当中，在 \fB[.\fR 和 \fB.]\fR 当中包围一个\fB归并元素\fR(collating element)(一个字符、一个多字符序列被整理为如同一个单一字符，或给二者的一个整理序列名字)表示这个整理元素的一个字符序列。这个序列是这个方括号表达式列表中的一个单一元素。在有多字符整理元素的地域中，一个方括号表达式可以匹配多于一个字符。
.VS 8.2
所以(潜藏的)，即使在方括号表达式中未出现多字符整理元素，以 \fB^\fR 为开始的一个方括号表达式仍可以匹配多字符整理元素! (注意：Tcl 目前没有多字符整理元素。这些信息只是用来解释概念。)
.PP
例如，假定整理序列包含一个 \fBch\fR 多字符整理元素，则 RE \fB[[.ch.]]*c\fR (后面跟随着 \fBc\fP的零或多个 \fBch\fP) 匹配`\fBchchcc\fR'的最先的5个字符。还有 \fB[^c]b\fR 匹配整个`\fBchb\fR'(因为 \fB[^c]\fR 匹配多字符 \fBch\fR)。
.VE 8.2
.PP
在一个方括号表达式中，在 \fB[=\fR 和 \fB=]\fR 当中包含的一个整理元素是一个equivalence class 等价类，表示等价于这个整理元素的所有整理元素的字符序列，包括它自身。(如果没有其他等价的整理元素，与在分界符`\fB[.\fR'\&和`\fB.]\fR'中包含一样对待。) 例如，如果 \fBo\fR 和\fB\o'o^'\fR 是一个等价类的成员，则`\fB[[=o=]]\fR'、`\fB[[=\o'o^'=]]\fR'、和`\fB[o\o'o^']\fR'\&都是同义词。一个等价类不能是一个范围的端点。
.VS 8.2
(注意：Tcl 目前只实现了 Unicode 地域。它不定义任何等价类。上面的例子只是用来解释概念。)
.VE 8.2
.PP
在一个方括号表达式中，在 \fB[:\fR 和 \fB:]\fR 中包含的一个\fIcharacter class\fR 字符类 的名字表示属于这个类的所有字符的列表(不是所有整理元素!)。标准字符类有: