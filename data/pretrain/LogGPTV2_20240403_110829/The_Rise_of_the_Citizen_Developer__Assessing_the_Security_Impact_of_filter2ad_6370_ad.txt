### Security and Privacy Considerations in App Generator Services

#### Increased Attack Surface
When an app generator service delivers content to a generated boilerplate app, the attack surface of the generated app expands beyond the app itself and its network connection to the web service backend. Given that a single service’s infrastructure can serve hundreds or thousands of generated apps, it is crucial that the app generator service not only follows best practices, such as correctly verifying certificates, but also maintains the highest security standards for their web services. Of particular interest is whether these services are resilient to remote attackers, especially against state-of-the-art attacks on SSL/TLS [14], [33], [5], [3], [10], [1] that affect content delivery either to generated apps or app data to the service.

#### SSL/TLS Security Analysis
We extracted the domains of the different services' backend servers from the generated apps and used available online analysis tools (e.g., Qualys SSL Labs) to check the SSL/TLS security of the respective backend servers. This included checks for trusted and valid certificates, support for outdated and weak ciphers and protocols, resilience against recent SSL/TLS vulnerabilities, usage of weak keys, and whether any domain contacted by default by generated apps is known to distribute malware (e.g., using Google’s SafeBrowsing service).

The results were concerning. Only Tobit Chayns and Biznessapps consistently used encryption for communication with the backend. Apps Geyser completely abstained from secure communication (i.e., HTTP only), while other services partially secured their communication. For instance, both Seattle Cloud and Como sent sensitive data from user input forms, like login forms, in plain text. Furthermore, only three services used a valid and trusted server certificate. Appy Pie used a self-signed server certificate, and Mobincube used a certificate that expired seven years ago. From a cryptographic perspective, all services ran outdated versions of SSL libraries, making them vulnerable to one or more recent attacks such as POODLE [33], BEAST [14], LOGJAM [3], or FREAK [10]. Mobincube’s server was even vulnerable to all tested SSL vulnerabilities.

#### Data Leakage and Privacy Violations
Online App Generators (OAGs) typically offer modules to connect to third-party services like Google Maps or social media platforms like Facebook and Twitter. These modules include code to connect to these services via service-specific APIs, which usually require an API key (and secret). Since OAGs do not create third-party accounts on behalf of the application developer, they provide their own API key (and secret) to any app created by their service. Some keys, like Google Maps keys, require a fee for business/volume usage, making it important to protect these keys from eavesdropping. The combination of a leaked Twitter key and secret, hard-coded in the boilerplate code of Biznessapps, allows unauthorized requests and tampering with the shared account across all apps generated with this service. Although these keys are application-only authentication keys with limited access rights, the Twitter developer documentation recommends treating them as sensitive as passwords. We found unobfuscated keys and secrets for various third-party providers in configuration files, boilerplate code, AndroidManifest files, and strings.xml. All identified keys were identical across all analyzed apps, highlighting the security impact of boilerplate apps. No attempt was made to obfuscate or protect these keys/secrets.

#### Monetization and Tracking
Many AppGens provide their service for free and use different approaches to monetize their apps, such as advertisements and tracking. Given that third-party libraries often leak sensitive user data, we checked outgoing app traffic and compared our findings with the privacy policies provided by the online service. None of the web domains contacted by the tested apps during our analyses were known for distributing malware. However, four application generators (Como, Mobincube, Biznessapps, and Appy Pie) exhibited questionable tracking behavior. Apps generated with Mobincube sent over 250 tracking requests within the first minute of execution and included the third-party library BeaconsInSpace for user tracking via Bluetooth beacons without user notice. Although BeaconsInSpace recommends updating the privacy policy, no such information was found in Mobincube’s terms and conditions. Appy Pie apps contacted Google Analytics, Appy Pie’s backend, and Facebook for tracking. Como- and Biznessapps-generated apps also engaged in extensive tracking, sending device identifiers and location data to their backend servers on app launch. Such extensive tracking behavior is questionable, especially for paid services like Como and Biznessapps.

### Evaluating Known Security Issues

In addition to the specific attack vectors of online services discussed, we analyzed the generated apps’ boilerplate code for violations of security best practices on Android and vulnerabilities identified by prior research on Android application security and privacy. We used our set of self-generated apps and a set of generated apps from Google Play for cross-validation. Table 3 provides an overview of the security analysis results, which we discuss in more detail below.

#### Best-Practice Permission Usage (P1–P3)
Apps may request more permissions than necessary, increasing the privileges of third-party code, which can exploit these privileges and exhibit privacy-violating behavior. Android security best practices recommend requesting as few permissions as possible. Additionally, Android apps can engage in inter-component communication (ICC), but unintentionally exported components with insufficient protection can leak privacy-sensitive data or security-sensitive methods to unprivileged attacker apps, leading to Intent spoofing and confused deputy attacks.

**Security Analysis:**
- **Overprivileged Apps (P1):** All AppGens that generate monolithic boilerplate code create over-privileged apps by design. A simple Hello World app (App1) has between 7-21 permissions, including camera access, write/read contacts, audio recording, Bluetooth admin, and location access. In contrast, Andromo and AppInventor, which generate module-dependent code, request only a single permission and three permissions, respectively.
- **Unprotected Components (P2):** Application generators do not satisfactorily protect generated apps’ components from illicit access. Except for Andromo, AppInventor, and Biznessapps, all tested generators failed to protect one or more components intended for internal use only. For example, apps generated with Seattle Cloud or Mobincube expose unprotected components, allowing an attacker to read all files accessible to the app’s UID, including internal databases and private shared preferences.
- **Intent Spoofing and Confused Deputies (P3):** We checked applications for explicitly exported Activity, Service, and ContentProvider components or potentially accidentally exported components. If any of these components lack at least signature-level protection, the app is considered to expose an unprotected component. We also analyzed BroadcastReceivers, considering those registered dynamically at runtime.

**Results:**
- All AppGens that generate monolithic boilerplate code create over-privileged apps (P1).
- Most generators fail to protect components from illicit access (P2).
- Unprotected components and potential Intent spoofing and confused deputy attacks (P3) are common issues.

### Conclusion
The security and privacy implications of using app generator services are significant. It is essential for these services to follow best practices, maintain high security standards, and protect sensitive data. Developers should be cautious when using these services and take additional steps to ensure the security and privacy of their apps.