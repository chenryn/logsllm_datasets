cally is presented in Section 4. With them, we can generate
an equivalent sanity check at the beginning of the program by
replacing the oﬃcial patch variable with the variables. The
generated equivalent sanity check looks like:
The generated patch will only read the contents of the
function inputs without any writing operation so that the
Operation Rule 2 is satisﬁed. Moreover, since the patch
only ﬁxes the vulnerability in one function, Operation
Rule 3 is also satisﬁed. Therefore, the generated patch com-
plies with the operations in the deﬁnition.
3 Patch Type Analysis
To generate the hot patch from an oﬃcial patch, we need
to make sure that the oﬃcial patch ﬁxes the vulnerability in
certain ways, which are able to be converted to a hot patch.
Therefore, we conduct an empirical study on the diﬀerent
types of Android vulnerabilities. In the study, we provide the
vulnerability patch categorization and distribution results as
well as the insights found from the observations. After that,
we are able to discuss the type of vulnerability patch that
Vulmet is able to support.
To have a comprehensive understanding of diﬀerent types
of patches, we have manually analyzed the recent Android ker-
nel CVE vulnerability patches. We make an eﬀort to collect
most of the Android kernel vulnerabilities, which are pub-
licly disclosed by Google. As Vulmet works on the legacy
vulnerabilities, we choose CVEs from the year 2012 to 2016,
which mainly reside in Linux major version 3. We also ignore
Type
Sanity Testing
Function Call
Change of Variable Values
Change of Data Types
Redesign
Others
Sub Type
Precondition Validation
Error Handling
Ensuring Atomicity
Freeing Resources
Call User Deﬁne Functions
Zeroing Memory
Initialization
Increase Buﬀer Size
n.a.
n.a.
n.a.
the older vulnerability, since it has a low chance to aﬀect the
recent Android devices.
3.1 Patch Categorization
Since our work focuses on the patch generation, the patch
category should reﬂect the modiﬁcations to the function code
rather than the consequence of the vulnerabilities. There are
many patch categorization works on classifying the patches
based on the type of the vulnerability they are ﬁxing [51]
[25] [56] [48]. However, only few works focus on the patches
themselves. [36] has proposed a categorization schema based
on the patch modiﬁcation, which ﬁts our need well. Therefore,
we adopt the idea of this work and combine some of their
patch type groups to form our patch categorization schema.
The diﬀerent patch modiﬁcation category is listed in Table 3.
Sanity Testing checks a certain condition and makes
the decision to change the program control ﬂow. Based
on the diﬀerent variable values it checks, Sanity Testing
can be further divided into two subgroups. Precondition
Validation type tries to check the function input parameters,
and Error Handling tries to check the return value of the
function call to add the error handling logic to the program.
The Function Calling patch type ﬁxes the vulnera-
bility via calling the functions. Based on the diﬀerent
function it calls, it can be divided into three subtypes.
Ensuring Atomicity adds in the calls to synchronization
functions such as lock() and unlock() to ensure the atomic
operations. Freeing Resources calls the free() func-
tion to remove the unused resources. Call User Define
Functions includes other function calls to achieve diﬀerent
purposes.
The Change of Variable Values patch type requires
the modiﬁcation of the memory contents. Zeroing Memory
sets the memory to 0 to prevent information leak. Some
of the Zeroing Memory patches are implemented us-
ing function call to memset(). We regard this type as
the Zeroing Memory not the Function Call. Variable
Initialization sets a default value to the variable. Buffer
2400    29th USENIX Security Symposium
USENIX Association
1if((len>constant1-(constant2-(len%constant2)))2||(len+((constant2-(len%constant2))3>constant1-func_return_value))4{return0;}Table 4: Patch Type Allocation
Type
Sanity Testing
Function Calling
Change of Variable
Values
Change of Data
Types
Redesign
Others
NO.
157
65
37
9
65
40
Percent
42.1%
17.4%
9.9%
2.4%
17.4%
10.7%
Example
CVE-2014-3145
CVE-2014-8709
CVE-2014-1739
CVE-2016-2062
CVE-2016-8457
CVE-2014-9683
Size Increase is a special case where the patch increases
the buﬀer to avoid overﬂows.
The Change of Data Types is a unique type where the
variable type is changed, for example, from int to long int.
Redesign refers to the rewrite the function logic with a lot
of diﬀerent program changes. The Others patch type spec-
iﬁes some minor changes that cannot be put into the major
categories.
We have collected 375 CVEs. Except for 2 cases, whose
oﬃcial patches cannot be found, we have summarized and
categorized the 373 CVE patches into diﬀerent groups based
on the patch categorization schema. The allocation of diﬀerent
types of patches is presented in Table 4. According to the table,
Sanity Testing the most commonly used patch pattern,
which accounts for 42.1%. This kind of ﬁx tries to read and
check the value of the variable to make decisions. It meets the
Operation Rule 2, which does not write memory contents.
This type of patches are good candidates for generating hot
patches.
3.2 Observations
We have obtained four interesting observations during the
study of the vulnerability patches.
Observation 1: Vulnerability patch changes are generally
small compared to other program updates. Most of the
patches in the Android kernels are small in size with only a
few lines of code changes. In the 373 CVEs, there are only 64
CVEs that either have more than 30 lines of modiﬁcation or
modify more than 5 functions in one patch. This observation
is consistent to the work [40], which states that in Chrome
and FireFox bug ﬁxes, small patches account for the largest
percentage amount all the security-related patches. This ob-
servation suggests that hot patch is a possible solution to ﬁx
a large number of vulnerabilities in Android since it favors
small changes.
Observation 2: Large vulnerability patches often consist
of several small individual patches. Moreover, for the larger
vulnerability patches, they often consist of many small indi-
vidual ﬁxes. In the 64 large patches, there are 50 patches
that are the combination of several small changes in dif-
ferent functions. For example, the patch for vulnerability
Table 5: VULMET support patch types
Supported / Unsupported
Supported
Partially Supported
Type
Sanity Testing
Function Call
Change of Variable Values Unsupported
Unsupported
Change of Data Types
Unsupported
Redesign
Others
Partially Supported
CVE-2016-8457 [8] is considered as big, since it has more
than 50 lines of code changes. However, they can be divided
into several small ﬁxes in diﬀerent places of the functions. The
reason is that there is a vulnerability pattern, which appears
multiple times inside the function. Therefore, the similar ﬁxes
need to be inserted into the function for every occurrence of
the same patterns, which results in a large ﬁx when aggregated.
This observation indicates that we are able to analyze some
of the large and complex vulnerability ﬁxes using the divide
and conquer approach. By appropriately dividing the large
patch, one can get smaller patches, which can be converted
into hot patches individually.
Observation 3: The patch pattern may be diﬀerent re-
gardless of the vulnerability types. After summarizing the
diﬀerent type of patches, we have compared them with the dif-
ferent type of vulnerabilities. We ﬁnd that there is no evidence
to show that the patch type and vulnerability type have strong
co-relations. In general, the patches for same type vulnera-
bility may be written in diﬀerent ways; and the same type of
code change can ﬁx diﬀerent types of vulnerabilities. There-
fore, the patch type should be summarized diﬀerently from
the vulnerability type, which shows that our way of patch
classiﬁcation is reasonable.
Observation 4: Some patches consist of both non-security
upgrade and vulnerability patch. There are some patches,
which have non-security upgrade apart from having vulnera-
bility ﬁxes. The reason for mixing the two kinds of patches
in the same commit may be that the programmer does not
want to disclose the vulnerability directly to the public. By
mixing them with some function upgrades, it makes them
hard to be detected by the attackers. For example, in the ﬁx of
CVE-2016-8457, there is a piece of the code does the normal
function update jobs without ﬁxing the vulnerability. This
observation explained the reason why some of the patches
are large patches with a mix of many types of code changes.
In fact, the real security patch may be small, but when being
added in some other updates, it becomes large and diﬃcult to
be analyzed.
3.3 VULMET Work Scope
Based on the vulnerability patch study and the Vulmet oper-
ation scope in Section 2.3, we have deﬁned the scope of the
USENIX Association
29th USENIX Security Symposium    2401
Figure 4: Framework Overview of VULMET
vulnerability types which Vulmet is able to handle. Table 5
has shown the patch types, which can be supported by Vulmet.
First, Vulmet will support the Sanity Testing since it only
checks (reads) the value in the function and makes decisions,
which satisfy all the Operation Rules in Section 2.3. Second,
for the Function Call type, Vulmet is able to go into the
callee function and analyze the changes. If the changes do not
involve the memory write operation, Vulmet can support the
patch. Thus, Vulmet partially supports the Function Call
type. Third, for the type of Change of Variable Values
and Change of Data Types, since they both need to write
the value to the memory which is against Operation Rule
2, they are not supported by Vulmet. Forth, Vulmet does
not support the type Redesign since it greatly changes the
original function semantics and violates Operation Rule
3. Last, in type Others, we have manually gone through each
case. There are some cases, which do not contain writing
operations to the memory. Vulmet can generate hot patches
from these cases. For example, in CVE-2018-17182 [9], the
patch removes the entire vulnerable function. In our patch
categorization, it belongs to the Others type. Vulmet is able
to generate an equivalent semantic patch by skipping the func-
tion. The detailed discussion is shown in Section 5.1.1. How-
ever, there are also cases that involve the change of memory
content. Therefore, Vulmet can partially support this type.
4 Methodology
In this section, we present the detailed algorithms for auto-
matic hot patch generation.
4.1 Overview
Fig. 4 shows the overview of Vulmet. When a patch has been
oﬃcially released, suitable patches will be selected for the hot
patch generation. For a patch candidate, there are diﬀerent
locations inside the vulnerable function that the hot patch can
be inserted. Vulmet will choose the best location to insert
the patch by calculating the side eﬀect for each place. After
that, it will leverage on the weakest precondition analysis to
ﬁnd the semantic equivalent constraints of the oﬃcial patches.
Those constraints will be converted into the hot patch, which
can be applied to the binary programs.
4.2 Patch Filtering
The ﬁrst step of Vulmet is to determine whether an oﬃcial
patch can be converted into a hot patch. As stated in Section 2,
the hot patch operation is limited to enforce the program se-
curity. Therefore, only the oﬃcial patches, whose operation
semantics comply with the requirements, can be used to gen-
erate the hot patch. To achieve it, Vulmet will extract the
oﬃcial patch by diﬃng the vulnerable code and patched code.
Then, for each statement in the patch, it will be classiﬁed
as the normal operation and the prohibited operation. The
prohibited operation includes the assignment of variable or
pointer values and the call to memory modifying functions.
If the oﬃcial patch does not contain prohibited operations,
Vulmet will select it as a candidate to generate the hot patch.
Otherwise, the patch is ﬁltered out.
Insertion Location Optimization
4.3
4.3.1 Motivation and Problem Deﬁnition
According to Rule 1 at Section 2.3, hooking function at the
beginning or the end is the requirement to ensure patch’s
practicality. Therefore, Vulmet can only hook the target vul-
nerable function and the functions (i.e. callee function) which
are called by the target function. Each of the hooking place
is considered as a possible location to apply the hot patch.
Among the several places inside the target function, Vulmet
is designed to ﬁnd the best one. Some of patch points may not
contain enough information on the variable values to calculate
the semantic equivalent constraints. Some of them will have
unexpected eﬀects since the function may be executed until it
reaches the patch point. To ﬁnd the best point, those diﬀerent
aspects need to be taken into consideration.
To illustrate the problem, we reuse the example at Fig. 3
in Section 2.4. In this example, previously, we assume the
patch point is at line 1. In fact, there are two more points that
can also apply the hot patch. They are line 1 (the beginning
of function q6lsm_snd_model_buf_allo()) and line 7
(the call to function cal_utils_get_only_cal_block()).
Both of the two points will have enough information to calcu-
late the relationship between the function parameters and the
variables used in the oﬃcial patch. Therefore, in either of the
two points, Vulmet can generate a semantic equivalent hot
patch to ﬁx the vulnerability.
However, patching the function at diﬀerent locations will
result in diﬀerent side eﬀects, which may harm the normal
executions. In this case, if we insert the patch in the call
2402    29th USENIX Security Symposium
USENIX Association
to function cal_utils_get_only_cal_block() at line 7
and the patch kills the execution, some instruction from line
1 to line 7 has already be executed (Note: at line 5 codes are
omitted for simplicity). There may be some program changes