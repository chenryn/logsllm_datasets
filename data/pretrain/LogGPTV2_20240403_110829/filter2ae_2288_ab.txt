        admin
        admin
        root
        root
XML与HTML一样，也存在注入攻击，在注入的方法上也非常相似。  
对于上面的xml文件，如果攻击者能够掌控password字段，那么就会产生XML注入。如攻击者输入：
    admin hackhacker
最终修改结果为：
        admin
        admin
        root
        root
        hack
        hacker
这样就通过XML注入添加了一个名为hack、密码为：hacker的管理员账户。  
XML注入两大要素： **标签闭合和获取XML表结构**
#### XML注入防御
（1）对用户的输入进行过滤  
（2）对用户的输入进行转义  
### 0x04 XPath注入
#### XPath注入攻击简介
XPath注入攻击是指利用XPath 解析器的松散输入和容错特性，能够在 URL、表单或其它信息上附带恶意的XPath
查询代码，以获得权限信息的访问权并更改这些信息。XPath注入攻击是针对Web服务应用新的攻击方法，它允许攻击者在事先不知道XPath查询相关知识的情况下，通过XPath查询得到一个XML文档的完整内容。
XPath注入发生在当站点使用用户输入的信息来构造请求以获取XML数据。攻击者对站点发送经过特殊构造的信息来探究站点使用的XML是如何构造的，从而进一步获取正常途径下无法获取的数据。当XML数据被用作账户验证时，攻击者还可以提升他的权限。
#### XPath注入攻击特点
XPath注入攻击利用两种技术，即 **XPath扫描** 和 **XPath查询布尔化**
。通过该攻击，攻击者可以控制用来进行XPath查询的XML数据库。这种攻击可以有效地对付使用XPath查询（和XML数据库）
来执行身份验证、查找或者其它操作。
XPath注入攻击同SQL注入攻击类似，但与SQL注入相比，XPath具有的优势：
  1. 广泛性  
只要是利用XPath语法的Web
应用程序若未对输入的XPath查询做严格的处理都会存在XPath注入漏洞。而在SQL注入攻击过程中根据数据库支持的SQL语言不同，注入攻击的实现可能不同。
  2. 危害性大  
XPath语言几乎可以没有访问控制限制的引用XML文档的所有部分。而在SQL注入中，一个“`用户`”的权限可能被限制到 某一特定的表、列或者查询。  
XPath注入攻击可以保证得到完整的XML文档，即完整的数据库。只要Web服务应用具有基本的安全漏洞，即可构造针对 XPath应用的自动攻击。
#### Xpath注入攻击原理与利用
XPath注入攻击主要是通过构建特殊的输入，这些输入往往是XPath语法中的一些组合，这些输入将作为参数传入Web
应用程序，通过执行XPath查询而执行入侵者想要的操作。  
注入对象不是数据库users表，而是一个存储数据的XML文件。因为xpath不存在访问控制，所以不会遇到许多在SQL注入中经常遇到的访问限制。
注入出现的位置也就是`cookie`，`headers`，`request` `parameters/input`等。  
[Xpath基本语法](https://www.cnblogs.com/wendyw/p/11633588.html)  
[xPath注入学习之基础语法学习](https://www.freebuf.com/column/211251.html)
如果一个网站某应用程序将数据保存在XML中，并且对用户的输入没有做限制，攻击者提交了没有经过处理的输入，就插入到 XPath
查询中，即产生Xpath注入，那么就攻击者就可能通过控制查询，获取数据，或者删除数据之类的操作。
Xpath是xml路径语言，用于配置文件的查找。数据库就是xml文件。因此只要是利用XPath语法的Web
应用程序如果未对输入的XPath查询做严格的处理都会存在XPath注入漏洞。比如一些登录地址页面，搜索页面需要与xml交互的位置。  
**1、Xpath直接注入**  
示例代码：  
test2.xml(存储用户名和密码)
                1
                test1
                test1
                2
                test2
                test2
2.php(用于接收传入参数，并进行XML查询)
    xpath($query);
    if($result){
        echo 'Welcome';
        foreach($result as $key=>$value){
            echo 'ID:'.$value->id;
            echo 'Username:'.$value->username;
        }
    }
    ?>
**[`simplexml_load_file()`函数](http://www.w3school.com.cn/php/func_simplexml_load_file.asp)**  
返回类 SimpleXMLElement 的一个对象，该对象的属性包含 XML 文档中的数据
正常查询：`/root/users/user[username/text()='test1'and password/text()='test1']`  
攻击者在`username`字段中输入：`' or 1=1 or ''='`  
变成`/root/users/user[username/text()='' or 1=1 or ''='' and
password/text()='1']`，成功获取所有user数据。上面这个字符串会在逻辑上使查询一直返回 `true` 并将一直允许攻击者访问系统。  
攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过XPath盲注技术获取最高权限帐号和其它重要文档信息。  
**2、XPath盲注**  
如果遍历出整个XML文档，一般步骤如下：  
_1.盲注根节点_  
利用count（/*）判断根下节点：
    http://127.0.0.1/xml/2.php?name=' or count(/*) = 1 or '1' = '2
有返回结果证明存在一个根节点。  
利用substring分割根节点的每个字符，猜解第一级节点：
    http://127.0.0.1/xml/2.php?name=' or substring(name(/*[position() = 1]),1,1)='r' or '1'='2
    http://127.0.0.1/xml/2.php?name=' or substring(name(/*[position() = 1]),2,1)='o' or '1'='2
...  
最终结果: root  
_2.盲注root的下一级节点_  
判断root的下一级节点数：
    http://127.0.0.1/xml/2.php?name=' or count(/root/*) = 1 or '1' = '2
有返回结果证明存在一个root的下一级节点。  
猜解root的下一级节点：
    http://127.0.0.1/xml/2.php?name=' or substring(name(/root/*[position() = 1]),1,1)='u' or '1'='2
    http://127.0.0.1/xml/2.php?name=' or substring(name(/root/*[position() = 1]),2,1)='s' or '1'='2
最终结果:users  
重复上述步骤，直至猜解出所有节点，最后来猜解节点中的数据或属性值。
#### Xpath注入攻击危害
  * 在URL及表单中提交恶意XPath代码，可获取到权限限制数据的访问权，并可修改这些数据。
  * 可通过此类漏洞查询获取到系统内部完整的XML文档内容。
  * 逻辑以及认证被绕过，它不像数据库那样有各种权限，xml没有各种权限的概念,正因为没有权限概念，因此利用xpath构造查询的时候整个数据库都会被用户读取。
#### Xpath注入攻击防御
  1. 数据提交到服务器上端，在服务端正式处理这批数据之前，对提交数据的合法性进行验证。
  2. 检查提交的数据是否包含特殊字符，对特殊字符进行编码转换或替换、删除敏感字符或字符串。
  3. 对于系统出现的错误信息，以IE错误编码信息替换，屏蔽系统本身的出错信息。
  4. 参数化XPath查询，将需要构建的XPath查询表达式，以变量的形式表示，变量不是可以执行的脚本。
  5. 通过MD5、SSL等加密算法，对于数据敏感信息和在数据传输过程中加密，即使某些非法用户通过非法手法获取数据包，看到的也是加密后的信息。 总结下就是：限制提交非法字符，对输入内容严格检查过滤，参数化XPath查询的变量。
### 0x05 XML外部实体注入(XXE)
#### XXE漏洞简介
XXE漏洞全称XML External Entity Injection 即XML外部实体注入。  
XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成
**任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击** 等危害。  
XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。
解析xml在php库libxml，libxml>=2.9.0的版本中没有XXE漏洞。  
[simplexml_load_string()](https://www.runoob.com/php/func-simplexml-load-string.html)可以读取XML
#### XXE本地搭建环境测试
xxe.php
    loadXML($xmlfile);
    $xml=simplexml_import_dom($dom);
    $xxe=$xml->xxe;
    $str="$xxe \n";
    echo $str;
    ?>
  * `file_get_contents`获取客户端输入内容
  * `new DOMDocument()`初始化XML解析器
  * `loadXML($xmlfile)`加载客户端输入的XML内容
  * `simplexml_import_dom($dom)`获取XML文档节点，如果成功则返回SimpleXMLElement对象，如果失败则返回FALSE。
  * 获取SimpleXMLElement对象中的节点XXE，然后输出XXE内容。
    ]>
    &file;
#### XXE常见利用方式
与SQL相似，XXE漏洞也分为有回显和无回显  
有回显，可以直接在页面中看到payload的执行结果或现象。  
无回显，又称为blind xxe，可以使用外带数据(OOB)通道提取数据。即可以引用远程服务器上的XML文件读取文件。
##### 1、读取任意文件
首先准备一个有XXE漏洞的文件，这里以php文件为例  