### 前言:
**本文只分析发生漏洞得原因，具体pop链简略分析。**
joomla中得session会被存入数据库中，这是以前版本得RCE就可以得知得事情。
/libraries/joomla/session/storage.php:
    public function register()
        {
            // Use this object as the session handler
            session_set_save_handler(
                array($this, 'open'), array($this, 'close'), array($this, 'read'), array($this, 'write'),
                array($this, 'destroy'), array($this, 'gc')
            );
        }
通过这里得到目标注册得几个函数，但是此方法为抽象类，也就是说不能实例化的，所以我们需要寻找继承了此类的类进行分析,在JSessionStorageDatabase对象中，均重写了上面的几个函数。
### 0x01 入口：
根据github给出的payload得出路由为：/index.php/component/users  
根据路由找到目标文件的真实文件为：/components/com_users/users.php  
此文件获取了一个task参数，这个参数不做具体分析，我们只需要得知目标会根据此参数来找到最终提交的函数  
payload中有如下：
    'task': 'user.login',
也就是说会提交到
user控制器下面的login方法，直接追过去就好了，具体路径为：components/com_users/controllers/user.php  
代码：
    public function login()
        {
            JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));
            $app    = JFactory::getApplication();
            $input  = $app->input;
            $method = $input->getMethod();
            // Populate the data array:
            $data = array();
            $data['return']    = base64_decode($app->input->post->get('return', '', 'BASE64'));
            $data['username']  = $input->$method->get('username', '', 'USERNAME');
            $data['password']  = $input->$method->get('password', '', 'RAW');
            $data['secretkey'] = $input->$method->get('secretkey', '', 'RAW');
            // Don't redirect to an external URL.
            if (!JUri::isInternal($data['return']))
            {
                $data['return'] = '';
            }
            // Set the return URL if empty.
            if (empty($data['return']))
            {
                $data['return'] = 'index.php?option=com_users&view=profile';
            }
            // Set the return URL in the user state to allow modification by plugins
            $app->setUserState('users.login.form.return', $data['return']);
            // Get the log in options.
            $options = array();
            $options['remember'] = $this->input->getBool('remember', false);
            $options['return']   = $data['return'];
            // Get the log in credentials.
            $credentials = array();
            $credentials['username']  = $data['username'];
            $credentials['password']  = $data['password'];
            $credentials['secretkey'] = $data['secretkey'];
            // Perform the log in.
            if (true === $app->login($credentials, $options))
            {
                // Success
                if ($options['remember'] == true)
                {
                    $app->setUserState('rememberLogin', true);
                }
                $app->setUserState('users.login.form.data', array());
                $app->redirect(JRoute::_($app->getUserState('users.login.form.return'), false));
            }
            else
            {
                // Login failed !
                $data['remember'] = (int) $options['remember'];
                $app->setUserState('users.login.form.data', $data);
                $app->redirect(JRoute::_('index.php?option=com_users&view=login', false));
            }
        }
### 0x02 进入login中:
这里我们可以看下重点代码：
    JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));
进入checkToken函数中,具体看下
    $session = JFactory::getSession();
                if ($session->isNew())
跟进后发现这句代码获取了现在的session对象：
    public static function getSession(array $options = array())
        {
            if (!self::$session)
            {
                self::$session = self::createSession($options);
            }
            return self::$session;
        }
这里获取到的对象其实就是当前对象，因为我在下面发现了isNew函数:
    public function isNew()
        {
            $counter = $this->get('session.counter');
            return (bool) ($counter === 1);
        }
然后在跟进get函数:
    public function get($name, $default = null, $namespace = 'default')
        {
            // Add prefix to namespace to avoid collisions
            $namespace = '__' . $namespace;
            if ($this->_state === 'destroyed')
            {
                // @TODO :: generated error here
                $error = null;
                return $error;
            }
            if (isset($_SESSION[$namespace][$name]))
            {
                return $_SESSION[$namespace][$name];
            }
            return $default;
        }
也就是说此时return的是：
    $_SESSION[__default][session.counter]
因为\$this->_state === 'destroyed' 判断根本不成立，在start函数中，有如下代码:
    public function start()
        {
            if ($this->_state === 'active')
            {
                return;
            }
            $this->_start();
            $this->_state = 'active';
他会将_state变量预设为active。此时的counter获取出来确实是等于1，所以会直接返回true  
    return (bool) ($counter === 1);
返回为真，再次回到checktoken函数：
    if ($session->isNew())
                {
                    // Redirect to login screen.
                    $app->enqueueMessage(JText::_('JLIB_ENVIRONMENT_SESSION_EXPIRED'), 'warning');
                    $app->redirect(JRoute::_('index.php'));
                }
                else
                {
                    return false;
                }
然后进入if中的真流程，重点可以看下这句：
    $app->redirect(JRoute::_('index.php'));
我们跟进redirect函数：
    public function redirect($url, $status = 303)
        {
            // Handle B/C by checking if a message was passed to the method, will be removed at 4.0
            if (func_num_args() > 1)
            {
                $args = func_get_args();
                /*
                 * Do some checks on the $args array, values below correspond to legacy redirect() method
                 *
                 * $args[0] = $url
                 * $args[1] = Message to enqueue
                 * $args[2] = Message type
                 * $args[3] = $status (previously moved)
                 */
                if (isset($args[1]) && !empty($args[1]) && (!is_bool($args[1]) && !is_int($args[1])))
                {
                    // Log that passing the message to the function is deprecated
                    JLog::add(