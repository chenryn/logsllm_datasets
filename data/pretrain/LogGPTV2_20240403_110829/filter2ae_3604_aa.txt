本文是炒冷饭系列，纯是自己入坑逆向不长时间，为了满足好奇心的心血来潮之作，如是入不了一些高手师傅的法眼，还请多指教。 **(^__^) 嘻嘻……**
## 准备工作
为了更好的分析，做最简单，最方便的准备工作。  
首先，用裸ip直接生成一个cs的shellcode，用的是分离式的  
然后生成的是x86的，也就是32位的c语言的shellcode。  
生成代码其实就是一个大小千字节左右的，无符号字符数组，把这段16进制数放到010editor（一个常用的编辑工具）里查看，除了执行代码外，还有一部分写死的数据，比如User-Agent，IP或域名等。  
就把这段代码加载到内存去执行，来进一步分析，加载的代码如下：
    unsigned char buf[] = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\...(省略)";
    void start()
    {
        printf("begin....");
        //分配内存，可读可写可执行
        char*start = (char*)VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        memcpy(start, buf, sizeof(buf));
        __asm
        {
            mov eax, start
            call eax
        }
    }
我是用vs进行编译生成的，为了方便做一些修改，关掉随机基址  
如果运行环境（虚拟机）和编译环境（物理机）不同，可以把运行库改成MTD，省的运行时候缺少模块报错，然后生成即可  
## 1.第一阶段
因为类似文章不少，所以我不卖关子，分离式shellcode第一阶段的主要任务是从远端再次加载一段shellcode，然后加载进入内存进行执行，所以我们来看他是如何获取与加载的。
### 1.1功能函数
把生成的exe文件放到X64dbg中来调试（32位的），进入之后先跳了两次，获取了一下当前EIP位置
    //利用这种方式保存下一条语句的地址，即EIP，而这个位置很关键
    call xxx
    其他语句
    pop ebp
然后跳到的位置是一段连续的，非常有规律的代码段，可以大胆推测，这是在调用一个统一的函数，而传入的参数的特点是，第一个参数（入栈顺序和参数顺序相反）是一串4个字节大小的16进制数，其他参数各有不同。  
而这第一个参数应该就是传说中的特征码  
我们来跟进看一下这个所谓的“函数”做了什么，首先刚刚传入的参数中，除了特征码外，还有一个字符数组，其ascii值对应的字符刚好就是‘wininet’，想必是要加载这个模块吧，那我们就带着这个问号，来看后面的执行过程  
#### 1.1.1获取模块基址
第一段：了解的师傅会很熟悉，在三环fs寄存器存放的一个叫做TEB的结构体，也就是线程环境块，结构如下：  
这个结构体位于0x30的位置，保存了当前的PEB，也就是进程环境块，该结构体如下：
    //0x1000 bytes (sizeof)
    struct _TEB
    {
        struct _NT_TIB NtTib;                                                   //0x0
        VOID* EnvironmentPointer;                                               //0x1c
        struct _CLIENT_ID ClientId;                                             //0x20
        VOID* ActiveRpcHandle;                                                  //0x28
        VOID* ThreadLocalStoragePointer;                                        //0x2c
        //目标位置
        struct _PEB* ProcessEnvironmentBlock;                                   //0x30
        ULONG LastErrorValue;                                                   //0x34
        ULONG CountOfOwnedCriticalSections;                                     //0x38
        VOID* CsrClientThread;                                                  //0x3c
        //...(省略)
        VOID* ResourceRetValue;                                                 //0xfe0
        VOID* ReservedForWdf;                                                   //0xfe4
        ULONGLONG ReservedForCrt;                                               //0xfe8
        struct _GUID EffectiveContainerId;                                      //0xff0
    };
PEB结构如下：而这个结构中位于0xc的部分有一个`_PEB_LDR_DATA`类型的结构体指针，这里存储着描述进程结构链表的数据
    //0x480 bytes (sizeof)
    struct _PEB
    {
        UCHAR InheritedAddressSpace;                                            //0x0
        UCHAR ReadImageFileExecOptions;                                         //0x1
        UCHAR BeingDebugged;                                                    //0x2
        union
        {
            UCHAR BitField;                                                     //0x3
            struct
            {
                UCHAR ImageUsesLargePages:1;                                    //0x3
                UCHAR IsProtectedProcess:1;                                     //0x3
                UCHAR IsImageDynamicallyRelocated:1;                            //0x3
                UCHAR SkipPatchingUser32Forwarders:1;                           //0x3
                UCHAR IsPackagedProcess:1;                                      //0x3
                UCHAR IsAppContainer:1;                                         //0x3
                UCHAR IsProtectedProcessLight:1;                                //0x3
                UCHAR IsLongPathAwareProcess:1;                                 //0x3
            };
        };
        VOID* Mutant;                                                           //0x4
        VOID* ImageBaseAddress;                                                 //0x8
        //目标位置
        struct _PEB_LDR_DATA* Ldr;                                              //0xc
        struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;                 //0x10
        //...(省略)
        ULONG NtGlobalFlag2;                                                    //0x478
    };
`_PEB_LDR_DATA`结构体如下：  
在这个结构体中，位于0xc，0x14，0x1c三处，有三个LIST_ENTRY类型的结构体，这三个结构体是一回事，都是保存着模块基址的链表，只不过是以不同顺序排列的链表，加载顺序，内存中的顺序，初始化模块的顺序
    //0x30 bytes (sizeof)
    struct _PEB_LDR_DATA
    {
        ULONG Length;                                                           //0x0
        UCHAR Initialized;                                                      //0x4
        VOID* SsHandle;                                                         //0x8
        struct _LIST_ENTRY InLoadOrderModuleList;                               //0xc
        //目标位置
        struct _LIST_ENTRY InMemoryOrderModuleList;                             //0x14
        struct _LIST_ENTRY InInitializationOrderModuleList;                     //0x1c
        VOID* EntryInProgress;                                                  //0x24
        UCHAR ShutdownInProgress;                                               //0x28
        VOID* ShutdownThreadId;                                                 //0x2c
    };
`LIST_ENTRY`这个结构很有意思，里面只有两个元素，分别是下一个`LIST_ENTRY`和上一个`LIST_ENTRY`的地址
    struct _LIST_ENTRY
    {
        struct _LIST_ENTRY* Flink;                                              //0x0
        struct _LIST_ENTRY* Blink;                                              //0x4
    };
实际的结构会如图所示：存在于不同的结构体中，通过偏移的方式访问链表所挂结构体的不同位置  
而在`_PEB_LDR_DATA`结构体中的`LIST_ENTRY`中的地址，所指向的结构体是`_LDR_DATA_TABLE_ENTRY`  
结构如下：
    struct _LDR_DATA_TABLE_ENTRY
    {
        struct _LIST_ENTRY InLoadOrderLinks;                                    //0x0
        struct _LIST_ENTRY InMemoryOrderLinks;                                  //0x8
        struct _LIST_ENTRY InInitializationOrderLinks;                          //0x10
        VOID* DllBase;                                                          //0x18
        VOID* EntryPoint;                                                       //0x1c
        ULONG SizeOfImage;                                                      //0x20
        struct _UNICODE_STRING FullDllName;                                     //0x24
        //目标位置
        struct _UNICODE_STRING BaseDllName;                                     //0x2c
        //...(省略)
        ULONG ReferenceCount;                                                   //0x9c
        ULONG DependentLoadFlags;                                               //0xa0
        UCHAR SigningLevel;                                                     //0xa4
    };
从上面的结构可以看出：  
`_PEB_LDR_DATA`里的`_LIST_ENTRY`里的首个元素`FLINK`，指向`_LDR_DATA_TABLE_ENTRY`里的`_LIST_ENTRY`的首地址，shellcode里使用的是`InMemoryOrderModuleList`，所以在`_LDR_DATA_TABLE_ENTRY`中位于首地址的0x8处  
有点类似下图的样子：  
在`_LDR_DATA_TABLE_ENTRY`这个结构体中，第0x24的位置是一个`_UNICODE_STRING`类型的结构体，从定义的变量名BaseDllName也能看出来，报错的是模块的名，这个结构体如下：
    //0x8 bytes (sizeof)
    struct _UNICODE_STRING
    {
        USHORT Length;                                                          //0x0
        //最大长度，描述的是下面的Buffer的按照对齐的最大长度，两个字节大小的数值
        USHORT MaximumLength;                                                   //0x2
        WCHAR* Buffer;                                                          //0x4
    };
这时再回到shellcode的反汇编代码，就可以知道：
    mov ebp,esp
    xor edx,edx
    mov edx,dword ptr fs:[edx+30]
    mov edx,dword ptr ds:[edx+C]
    //获取描述第一个模块的_LDR_DATA_TABLE_ENTRY其中的0x8位置
    mov edx,dword ptr ds:[edx+14]
    //获取该模块BaseDllName的buffer，即模块名
    mov esi,dword ptr ds:[edx+28]
    //获取该模块名的最大长度
    movzx ecx,word ptr ds:[edx+26]
    xor edi,edi
    xor eax,eax
#### 1.1.2计算哈希
如下图可以看到，第一个模块是exe文件本身  
接下来一段代码，就十分有趣了，是计算哈希值的算法，也是比较传统的方式  
大概意思是，依次从文件名的字符数组中读取一个字符，大于0x61就减0x20（相当于小写变大写），然后累加，累加前要把上次的求和循环右移0xD位  
具体代码提现就是如下：
    DWORD GetModuleHash(PWCHAR str,DWORD strlen)
    {
        DWORD result = 0;
        char * temp = (PCHAR)str;
        for (int i = 0; i > 0xD) | (result = 0x61)
            {
                temp[i] -= 0x20;
            }
            result += temp[i];
        }
        //printf("%x", result);