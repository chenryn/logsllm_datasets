attribute: one with the value set to lax, and one set to
strict. Finally, we instruct the browser to route all re-
quests through a proxy, allowing us to capture and ana-
lyze the speciﬁc requests that were initiated as part of a
test.
3.2 Test-case generation
Because of the abundance of features and APIs imple-
mented in modern browsers, there exist a very large num-
ber of techniques that can be leveraged to trigger a cross-
site request. For each such technique, our framework
generates a web page containing a relevant test case.
3.2.1 Request-initiating mechanisms
As there exists no comprehensive list of all feature that
may initiate a request, we leveraged the test suites from
popular browser engines, such as WebKit, Firefox, as
well as the web-platform-tests project by W3C3 to com-
pose an extensive list of different request methods.
In
addition, we analyzed several browser speciﬁcations to
verify the completeness of this list. What follows is a
2https://www.seleniumhq.org/
3https://github.com/w3c/web-platform-tests
154    27th USENIX Security Symposium
USENIX Association
Figure 2: Design of the framework that we used to detect bypasses of imposed cross-site request policies.
summary of the mechanisms we used, subdivided into
seven different categories.
HTML tags The ﬁrst group of request mechanisms
consists of HTML elements that can refer to an external
resource, such as ,  or  tags.
Upon parsing the HTML document, the browser will ini-
tiate requests to fetch the referred resources. As a basis,
we used the HTTPLeaks project4, which contains a list
of all possible ways HTML elements can leak HTTP re-
quests. This list was combined with techniques related
to features that were recently introduced, and account for
196 unique methods. It should be noted that all HTML-
based requests only initiate GET requests.
Response headers Response headers allow websites
to include extra information alongside the resource that
is served. We found that two classes of response headers
may trigger an additional request, either as soon as the
browser receives the headers or upon certain events. The
ﬁrst class of such response headers are Link headers,
which indicate relationships between web resources [38].
The header can be used to improve page-load speeds
by signaling to the browser which resources, such as
stylesheets and associated web pages, can proactively be
fetched. In most cases, the browser will request the ref-
erenced resources through a GET request.
The other class of
response headers that
initi-
ate new requests are related to Content Security
Policy (CSP)
through the
Content-Security-Policy header5, a website can,
among other things, indicate which resources are allowed
[1].
More precisely,
4https://github.com/cure53/HTTPLeaks
5There also exists experimental CSP headers such as X-Content-
Security-Policy and X-WebKit-CSP, as well as a report-only
header.
to be loaded. Through the report-uri directive, web-
sites can indicate that any violations of this policy should
be reported, via a POST request to the provided URL.
Recently, another directive named report-to has been
proposed, which allows reporting through the Reporting
API [19]. As this directive and API are not yet sup-
ported by any browser, we excluded them from our anal-
ysis. Nevertheless, they are a prominent example of the
continuously evolving browser ecosystem, and highlight
the importance of analyzing the unexpected changes new
features might bring along.
Redirects Top-level redirects are often not regarded as
cross-site requests, because stripping cookies from them
would cause breakage of many existing websites. Nev-
ertheless, we included them in our evaluation for the
sake of completeness, because various scenarios exist in
which top-level redirects can be abused. For instance,
a tracker trying to bypass browser mitigations can listen
for the blur event on the window element, which indi-
cates that the user switched tabs. When receiving this
event, the tracker could trigger a redirect to its own web-
site in the background tab, which would capture infor-
mation from the user and afterwards redirect him back
to the original web page. In our framework, we evaluate
redirection mechanisms through the Location response
header, via the  tag, setting the location.href
property and automatically submitting forms.
JavaScript Browsers offer various JavaScript APIs
that can be used to send requests. For instance, the XML-
HttpRequest (XHR) API can be used to asynchronously
send requests to any web server [33]. More recently, the
Fetch API was introduced, which offers a similar func-
tionality and intends to replace XHR [30]. Similarly, the
Beacon API can be used to asynchronously send POST
requests, and is typically used to transmit analytic data as
USENIX Association
27th USENIX Security Symposium    155
it does this in a non-blocking manner and the browser en-
sures the request is sent before the page is unloaded [29].
Finally, there are several browser features that allow web
developers to set up nonstandard HTTP connections. For
instance, the WebSocket API can be used to open an
interactive communication session between the browser
and the server [32]. Also, the EventSource API can be
used to open a unidirectional persistent connection to a
web server, allowing the server to send updates to the
user [34]. The latter two mechanisms are initiated using
a GET request.
PDF JavaScript
In addition to statically showing in-
formation, PDFs also have dynamic features that are en-
abled through JavaScript code embedded within the PDF
ﬁle. For example, through the JavaScript code it is possi-
ble to trigger POST requests by sending form input data.
The capabilities of the PDF and the JavaScript embed-
ded within it, depend on the viewer that is used. Next
to the system-speciﬁc viewer, some browsers also im-
plement their own PDF viewer, which shows the con-
tents in a frame. The viewer used by Chrome and Opera,
PDFium [18], is implemented as a browser extension and
does support sending requests. To our knowledge, this is
not the case for Firefox’ PDF.js library [17], as we did
not manage to simulate this, nor did we ﬁnd any source
to conﬁrm this.
AppCache API Although the AppCache API has been
deprecated, it is still supported by most browsers [35].
This mechanism can be used to cache speciﬁc resources,
such that the browser can still serve them when the net-
work connection is lost. Web developers can specify
the pages that should be cached through a manifest ﬁle.
When the browser visits a page that refers to this ﬁle,
the speciﬁed resources, which may be hosted at a differ-
ent domain, will be requested through a GET request and
subsequently cached.
Service Worker API Service workers can be seen as
a replacement for the deprecated AppCache API. They
function as event-driven workers that can be registered
by web pages. After the registration process, all requests
will pass through the worker, which can respond with a
newly fetched resource or serve one from the cache. Next
to fetching the requested resources, service workers can
also leverage most6 browser APIs to initiate additional
requests.
6XMLHttpRequest is not supported in service workers.
3.2.2 Test compositions
The most straightforward way to initiate a new request is
to include the mechanism directly in the top-level frame.
For example, for the purpose of tracking, web developers
typically include a reference to a script or image hosted
at the tracker’s server. However, because their top-
level document can include different documents through
frames, it is possible to create more advanced test com-
positions. In our framework, we tested 8 test-case com-
positions, where resources from different domains were
included in each other, either through an  or by
speciﬁc methods, such as importScripts in JavaScript.
As we did not detect any behavior related to the test-case
compositions, we omit the details from the paper. We re-
fer to Appendix A for an overview of the different com-
positions that were used.
3.3 Supported browser instances
In order to generalize our results, and detect inconsis-
tencies we evaluated a wide variety of browser conﬁg-
urations. These conﬁgurations range over the different
browsers and their extensions, considering all the rele-
vant settings.
3.3.1 Web browsers
The primary goal of our evaluation was to analyze
browsers for which inconsistencies and bypasses would
have the largest impact. On the one hand, we included
the most popular and widely used browsers: Chrome,
Opera, Firefox, Safari and Edge. On the other hand, we
also incorporated browsers that are speciﬁcally targeted
towards privacy-aware users, and thus impose different
rules on authenticated third-party requests. For instance,
Tor Browser makes use of double-keyed cookies: instead
of associating a cookie with a single domain, the cookies
are associated with both the domain of the top-level doc-
ument as well as domain that set the cookie. For exam-
ple, when siteA.com includes a resource from siteB.com
that sets a cookie, this cookie will not be included when
siteC.com would include a resource from siteB.com. Fi-
nally, we also included the Cliqz browser, which has in-
tegrated privacy protection that is enforced by blocking
requests to trackers.
3.3.2 Browser settings
Most modern web browsers provide an option to block
third-party cookies. While this can be considered as a
very robust protection against both cross-site attacks and
third-party tracking, it may also interfere with the essen-
tial functionality for websites that rely on cross-site com-
munication. Moreover, some browsers provide built-in
156    27th USENIX Security Symposium
USENIX Association
functionality to prevent requests from leaking privacy-
sensitive information. For instance, Opera offers a built-
in ad blocker that is based on blacklists. By default,
the anti-tracking and ad blocking lists from EasyList and
EasyPrivacy are used, but users are able to also deﬁne
custom ones.
In our framework, we only considered
the default setting of the built-in protection. Another
browser that provides built-in tracking protection is Fire-
fox. Here, the mechanism is enabled by default when
browsing in “Private mode”, and also leverages publicly
available and curated blacklists [23].
Recently, Safari introduced its own built-in tracking
protection, which uses machine learning algorithms to
determine the blacklist [49]. Requests sent to websites
on this blacklist are subjected to cookie partitioning and
other measures to prevent the user from being tracked.
For example, cookies will only be included in a cross-site
request when there was a ﬁrst-party interaction within the
last 24 hours with the associated domain. Although we
were unable to infer the rules of these machine learning
algorithms, we still subjected this built-in option to our
framework in order to be complete.
3.3.3 Browser extensions
Next to built-in tracking prevention, users may also re-
sort to extensions to prevent their browsing behavior and
personal information from leaking to third parties. As
these extensions may also impose restrictions on how
requests are sent, and whether cookies should be sent
along in third-party requests, we also included various
anti-tracking and ad blocking extensions. Due to the ex-
cessive amount of such extensions, we were unable to
test all. Instead, we made a selection based on the ex-
tension’s popularity, i.e. the total number of downloads
or active users, as reported by the extension store. In to-
tal, we evaluated 46 different extensions for the 4 most
popular browsers (Chrome, Opera, Firefox and Edge).
An overview of all extensions that were evaluated can be
found in Appendix B.
Most browsers’ anti-tracking and ad blocking exten-
sions share a common functionality. By making use of
the WebRequest API [31], extensions can inspect all re-
quests that are initiated by the browser. The extension
can then determine how the request should be handled:
either it is passed through unmodiﬁed, or cookies are re-
moved from the request, or the request is blocked en-
tirely. This decision is typically made based on infor-
mation about the requests, namely whether it is sent in a
third-party context, which element initiated it, and most
importantly, whether it should be blocked according to
the block list that is used. It should be noted that for the
browser extension to work correctly, it should be able to
intercept all requests in order to provide the promised
guarantees. This is exactly what we evaluate by means
of our framework.
4 Results
By leveraging our framework that was introduced in Sec-
tion 3, we evaluated whether it was possible to bypass
the policies imposed on third-party requests by either
browsers or one of their extensions. The results are sum-
marized in Table 1, Table 2, and Table 3, and will be
discussed in more detail in the remainder of this section.
These three tables follow a similar structure. For each
category of request-triggering mechanism, we indicate
whether a cookie-bearing request was made for at least
within that category a request was made, but that in all
cases all cookies were omitted from the request. Finally,
one technique within this category using a full circle ((cid:32)).
A half circle ((cid:71)(cid:35)) indicates that for at least one technique
an empty circle ((cid:35)) indicates that none of the techniques
of that category managed to initiate a request. Note that
these results only reﬂect regular, HttpOnly and Secure
cookies. Same-site cookies are discussed in Section 4.3.
We refer to a more detailed explanation about the bug re-
porting in Appendix C through the indicated [bug#] tags.
For a more detailed view of detected leaks and leaks for
future browser and extension versions, we kindly direct
you to our website.7
4.1 Web browsers and built-in protection
The results of applying our framework to the 7 evalu-
ated browsers, both with their default settings as with the
built-in measures that aim to prevent online tracking en-
abled, are outlined in Table 1. All tests are performed
on the browser versions mentioned in this table, unless
stated otherwise. In general, it can be seen that differ-
ences in browser implementations, often lead to differ-
ences in results. The most relevant results are discussed
in more detail in the following sections.
4.1.1 Default settings
Under default conﬁguration, nearly all of the most
widely used browsers send along cookies with all third-
party requests. Exceptionally, due to enabling its track-
ing protection by default, Safari only does so for redi-
rects. We will discuss this further in Section 4.1.3 with
the other evaluated built-in options.
Besides Safari,
the privacy-oriented browsers also
generally perform better in this regard: with a few ex-
ceptions, both Cliqz and Tor Browser manage to exclude
cookies from all third-party requests. Most likely be-
cause redirects are not considered as cross-site (as the
7https://WhoLeftOpenTheCookieJar.com
USENIX Association
27th USENIX Security Symposium    157
domain of the document changes to that of the page it
is redirected to), cookies are not excluded for redirects.
However, as we outlined in Section 3.2, this technique
could still be used to track users under certain conditions.
 " >
Listing 1: Bypass technique found for Cliqz
Another interesting ﬁnding is that in the HTML cate-
gory, we found that for several mechanisms Cliqz would
still send along cookies with the third-party request. An
example of such a mechanism is shown in Listing 1.
Here an  element included an SVG via the data:
URL. Possibly, this caused a confusion in the browser
engine which prevented the cookies from being stripped.
4.1.2 Third-party cookie blocking
In addition to the default settings, we also evaluated
browsers when these were instructed to block all third-
party cookies. For Tor Browser, this feature was already
enabled by default. Consequently, Table 1 contains no
results for Tor Browser under these settings.
Similar to what could be seen from the results of
the privacy-oriented browsers, top-level redirects are not
considered as third-party, and thus do not prevent a
cookie to be sent along with the request. One of the
most surprising results is that the browsers that use the
PDFium reader to render PDFs directly in the browser
(Google Chrome and Opera), would still include cookies
for third-party requests that are initiated from JavaScript
embedded within PDFs [bug1]. Because PDFs can be
included in iframes, and thus made invisible to the end
user, and because it can be used to send authenticated
POST requests, this bypass technique could be used to
track users or perform cross-site attacks without raising
the attention of the victim. This violates the expecta-
tions of the victim, who presumed no third-party cook-
ies could be included, which should safeguard him com-
pletely from cross-site attacks. At the time of writing,
PDFium only provides support for sending requests, but
does not capture any information about the response. As
such, XSSI and cross-site timing attacks are currently not
possible. However, as indicated in the source code8, this
functionality is planned to be added.
Because the option to block third-party cookies was
removed from the latest Safari, we had to use a previous
version (Safari 10). We found that setting cookies in a
8https://chromium.googlesource.com/chromium/src/+/
66.0.3343.2/pdf/out_of_process_instance.cc#1437
third-party context was successfully blocked. However,
cookies - set in a ﬁrst-party context - were still included
in cross-site requests [bug2]. On top of that, we also
found that Safari’s option to block all cookies suffered
from somewhat the same problem. Likewise, it managed
to block the setting of third-party cookies, but cookies
that were set before enabling this option were still in-
cluded in cross-site requests. This problem was solved
in Safari 11 by deleting all cookies upon enabling the
option to block all cookies.
For Edge, we found that, surprisingly, the option to
block third-party cookies had no effect: all cookies that
were sent in the instance with default settings, were also
sent in the instance with custom settings [bug3]. We be-
lieve that this may have been the result of a regression
bug in the browser, which disabled support for this fea-
ture but did not remove the setting.
4.1.3 Built-in protection mechanisms
In total, we evaluated three built-in mechanisms that
protect against tracking (Firefox’ and Safari’s tracking
protection mode), or block advertisements (Opera’s ad
blocker). For Firefox and Opera, our framework man-
aged to detect several bypasses. Although Opera’s ad
blocker managed to block all requests that were trig-
gered by headers or by JavaScript embedded in PDFs,