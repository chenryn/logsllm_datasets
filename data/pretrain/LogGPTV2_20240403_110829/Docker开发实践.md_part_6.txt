### 优化后的文本

#### 第3章 镆像

**镜像**是Docker的核心组件之一，它与容器紧密相关但又有所不同。在第2章中，我们已经讨论了容器的基本概念，而本章将详细探讨镜像的相关内容。具体包括：
- 镜像的概念及其与容器的区别；
- 本地镜像的管理，如获取、创建和删除等；
- 如何通过互联网分发自定义的镜像。

##### 3.1 镜像的概念

镜像是一个包含程序运行所需环境和代码的只读文件。它采用分层文件系统，每次更改都会以新的读写层的形式叠加到原有的只读层上。

###### 3.1.1 镜像与容器

镜像是容器的基础。例如，使用`docker run`命令创建并运行容器时，必须指定一个镜像名称或ID。以下是一个简单的例子：

```bash
# docker run ubuntu echo "hello docker"
hello docker
```

如果将容器视为程序运行的虚拟环境，那么镜像就是构建该环境的模板。同一个镜像可以生成多个独立但环境相同的容器。不同的镜像服务于不同的目的，例如Ubuntu镜像用于创建精简的操作系统环境，而WordPress镜像则用于博客应用。

###### 3.1.2 镜像的系统结构

图3-1展示了Docker镜像的结构。最底层是启动文件系统（bootfs），用户通常不会直接与其交互。根镜像（rootfs）位于其上，通常是某种操作系统，如Ubuntu、Debian 或 CentOS。用户的镜像基于这些根镜像构建。例如，通过在Ubuntu根镜像上安装MySQL来创建一个新的镜像，再在此基础上安装Nginx，则形成了另一个新镜像。

![](图3-1 Docker镜像的系统结构)

镜像本质上是一系列文件的集合。创建新镜像实际上是修改现有镜像文件。镜像之间存在单向依赖关系，类似于Git的工作方式。这种文件层叠共享机制使得镜像占用空间小且易于扩展和分发。

![](图3-2 镜像的文件依赖关系)

###### 3.1.3 镜像的写时复制机制

当使用`docker run`命令从镜像创建容器时，实际上是在镜像之上添加了一个可读写的文件系统层级。这个新层被称为临时镜像，而原始镜像称为父镜像。所有对文件系统的修改都发生在这一新层中，不会影响父镜像。这就是Docker的写时复制机制。用户可以通过`commit`命令保存这些修改，形成新的镜像。

##### 3.2 本地镜像的管理

本节介绍如何查看、下载和删除本地镜像。

###### 3.2.1 查看

通过`docker images`命令可以列出本地所有镜像：

```bash
# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
bbbb/ccccc         aaaa                1009d6e33803        45 hours ago        199.3 MB
centos              latest              ae0c2d0bdc10        4 weeks ago         224 MB
ubuntu              latest              5506de2b643b        5 weeks ago         199.3 MB
...
```

字段解释：
- **REPOSITORY**: 仓库名称，由命名空间和实际仓库名组成。
- **TAG**: 标签，用于区分同一仓库中的不同镜像，默认为`latest`。
- **IMAGE ID**: 镜像的唯一标识符。
- **CREATED**: 镜像创建时间。
- **VIRTUAL SIZE**: 镜像所占的虚拟大小。

还可以使用通配符查找特定镜像：

```bash
# docker images ub*
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              latest              5506de2b643b        5 weeks ago         199.3 MB
```

要获取更详细的镜像信息，可以使用`docker inspect`命令：

```bash
# docker inspect ubuntu
[{
  "Architecture": "amd64",
  "Author": "",
  "Comment": "",
  "Config": {
    "AttachStderr": false,
    "AttachStdin": false,
    "AttachStdout": false,
    "Cmd": ["/bin/bash"],
    ...
  }
}]
```

###### 3.2.2 下载

使用`docker run`命令时，如果本地没有指定镜像，Docker会自动从Docker Hub下载。例如：

```bash
# docker run ubuntu echo "hello docker"
Unable to find image 'ubuntu' locally
ubuntu:latest: The image you are pulling has been verified
...
Status: Downloaded newer image for ubuntu:latest
hello docker
```

也可以通过`docker pull`预先下载镜像以节省运行时的等待时间：

```bash
# docker pull ubuntu
...
```

###### 3.2.3 删除

不再需要的镜像可以使用`docker rmi`命令删除。例如：

```bash
# docker rmi c20fd090cbb6
Deleted: c20fd090cbb692b556e5910e7c1092ce292fc5efc7493deaecfec5d746c3cf42
Deleted: 6d3f47df05998b84fbd5ec433785851f64d2d0fc4c28cd6b0f4a050c7e360f8a
```

如果镜像被某个容器依赖，则可能无法直接删除。此时可以使用`-f`参数强制删除，或者先删除依赖它的容器：

```bash
# docker rmi ubuntu
Error response from daemon: Conflict, cannot delete 9bd07e480c5b because the container 1ea331e3ce1e is using it, use -f to force
2014/12/10 20:11:09 Error: failed to remove one or more images
```

一次性删除所有已停止的容器：

```bash
# docker rm $(docker ps -a -q)
e13788bcce4c
08530fb59349
9a0ab77d4449
```

##### 3.3 创建本地镜像

除了将tar包导入为镜像外，还有其他方法可以创建本地镜像。

###### 3.3.1 使用`commit`命令创建本地镜像

在父镜像的基础上创建并运行一个容器，并在其中进行修改（如安装新软件、更改配置）。然后使用`commit`命令将这些修改保存为新的镜像。例如：

```bash
# docker run -t -i ubuntu
root@0ddf83b837fe:/# apt-get update
.....(省略apt-get update的输出)
```

以上就是在Ubuntu镜像上创建并运行一个容器，安装SQLite3并在根目录下创建名为`hellodocker`的文件的过程。

希望这些改进能够使文档更加清晰、连贯和专业。