the group and the following elements:
(cid:16) g, f, h, {Ei = e(g, g)αi , Gi = gri , Zi = gzi}i∈[m],
{Hj = gcj}j∈[m], {Ux = gax}x∈U (cid:17).
The master secret key is set to
MSK = ( α1, . . . , αm, r1, . . . , rm, c1, . . . , cm, g3 ).
A counter ctr = 0 is implicitly included in MSK.
KeyGenA(PP, MSK, S) → SK(i,j),S. The algorithm ﬁrst sets
ctr = ctr + 1 and computes the corresponding index
in the form of (i, j) where 1 ≤ i, j ≤ m and (i − 1) ∗
m + j = ctr. Then it randomly chooses σi,j , δi,j ∈ ZN
and R, R′, R′′, R′′′, Rx(x ∈ S) ∈ Gp3 , and outputs a
private key SK(i,j),S =
(cid:16) Ki,j = gαi gricj f σi,j hδi,j R,
K ′
i,j = gσi,j R′, K′′
i,j = gδi,j R′′, K′′′
i,j = Z
σi,j
i R′′′,
{Ki,j,x = U
σi,j
x Rx}x∈S (cid:17).
The value of (i, j) is implicitly contained in SK(i,j),S.
EncryptA(PP, M, A = (A, ρ), (¯i, ¯j)) → CT . A is an l ×
n LSSS matrix and ρ maps each row Ak of A to an
attribute ρ(k) ∈ U. The algorithm randomly chooses
κ, τ, s1, . . . , sm,
t1, . . . , tm ∈ ZN ,
~vc, ~w1, . . . , ~wm ∈ Z3
N ,
~u = (π, u2, . . . , un) ∈ Zn
N .
ξ1, . . . , ξl ∈ ZN ,
In addition, it randomly chooses rx, ry, rz ∈ ZN , and
sets ~χ1 = (rx, 0, rz), ~χ2 = (0, ry, rz), ~χ3 = ~χ1 × ~χ2 =
(−ryrz,−rxrz, rxry). Then it randomly chooses
N ∀i ∈ {1, . . . ,¯i},
~vi ∈ Z3
~vi ∈ span{~χ1, ~χ2} ∀i ∈ {¯i + 1, . . . , m},
i=1, ( ~Cj, ~C ′
and creates the ciphertext h(A, ρ), ( ~Ri, ~R′
i , Ti)m
Q′′′
1. For each row i ∈ [m]:
j=1, (Pk, P ′
i, Qi, Q′
k=1i as follows:
j )m
k)l
• if i  ¯i) or (i = ¯i∧ j ≥ ¯j), M ′ = M
will hold. This follows from the facts that for i >
¯i, we have (~vi · ~χ3) = 0 (since ~vi ∈ span{~χ1, ~χ2}),
and for i = ¯i, we have that (~vi · ~χ3) 6= 0 hap-
pens with overwhelming probability (since ~vi is
randomly chosen from Z3
N ).
k)l
(i.e. Q′
i is diﬀerent and Q′′
i, Qi, Ti, ~Cj , ~C ′
i and Q′′′
Remark: In EncryptA, π is the secret shared according to the
LSSS (A, ρ), and is for generating ciphertext components
(Pk, P ′
k=1, so that only users with eligible attribute sets
can recover DP = e(g, f )πσi,j . To intertwine the CP-ABE
part and Tracing part, f π is embedded in Q′
i, i.e., in Tracing
ciphertext components, although ( ~Ri, ~R′
j) are
the same as that of [9], Q′
i are
new components we introduced. We stress that Zti
(in Q′
i)
i
is the crucial component that intertwines the Tracing part
(i.e. f τ si(~vi·~vc) for i ≥ ¯i and f si for i < ¯i) and the CP-ABE
part (i.e. f π) securely and eﬃciently. In a straightforward
combination without Zti
i = f τ si(~vi·~vc )f π for i ≥ ¯i
i
i = f si f π for i < ¯i), the index-hiding property will be
and Q′
hard to prove, and to obtain provable index-hiding, diﬀerent
πi has to be used for diﬀerent i (i.e. Q′
i = f τ si(~vi·~vc )f πi for
i ≥ ¯i and Q′
i = f si f πi for i < ¯i), but this will make the
CP-ABE part have ciphertext size of O(√K · l), rather than
O(l) as above. The using of Zti
i
Q′
erty while achieving (eﬃcient) ciphertext size of O(√K + l).
(and the introduction of
i ) enables us to prove the index-hiding prop-
In particular, when reducing the index-hiding property to
the 3-Party Diﬃe-Hellman assumption, f τ si(~vi·~vc) and f π
will contain terms of gbc and gac respectively, where the
simulator cannot compute, and only with the help of Zti
i
the simulator can cancel them and form the challenge ci-
phertext, i.e., let Zi contain the term gc and ti contain the
terms b and a, so that the terms gbc and gac in f τ si(~vi·~vc)
and f π can be canceled out by those in Zti
i = gti
can be formed using terms A = ga and B = gb. Details are
given in Appendix A.1, i.e. the proof of Lemma 1.
4.4 AugCP-ABE Security
i , while Q′′′
i and Q′′′
i, Q′′
The following Theorem 2 and 3 prove that our AugCP-
ABE scheme is message-hiding, and Theorem 4 prove that
our AugCP-ABE scheme is index-hiding.
482Theorem 2. Under the Assumption 1, the General Sub-
group Decision Assumption, the 3-Party Diﬃe-Hellman As-
sumption in a Subgroup, and the Source Group q-Parallel
BDHE Assumption in a Subgroup, no polynomial time ad-
versary can win GameA
MH1 with non-negligible advantage.
Proof. Note that the structures of CP-ABE part of our
AugCP-ABE scheme are similar to that of the CP-ABE
scheme in [16], the proof of Theorem 2 is also similar to
that of [16]. For simplicity, here we prove the theorem by
reducing the message-hiding property of our AugCP-ABE
scheme in GameA
MH1 to the security of CP-ABE scheme in
[16]. Complete proof will be given in the full paper.
Theorem 3. No polynomial time adversary can win the
game GameA
MHK+1 with non-negligible advantage.
Proof. The argument for message-hiding in GameA
MHK+1
is very straightforward since an encryption to index K + 1 =
(m + 1, 1) contains no information about the message. The
simulator simply runs actual SetupA and KeyGenA algorithms
and encrypts the message Mb by the challenge access policy
A∗ and index (m + 1, 1). Since for all i = 1 to m, the values
of Ti = E ˆsi
i contains no information about the message, the
bit b is perfectly hidden and MHA
K+1AdvA = 0.
Theorem 4. Suppose that the 3-Party Diﬃe-Hellman As-
sumption in a Subgroup (deﬁned in [16]), the 3-Party Diﬃe-
Hellman Assumption (deﬁned in [9]) and the Decisional Lin-
ear Assumption hold. Then no polynomial time adversary
can win GameA
IH with non-negligible advantage.
Proof. Theorem 4 follows from the following Lemma 1
and Lemma 2 immediately.
Lemma 1. Suppose that the 3-Party Diﬃe-Hellman As-
sumption in a Subgroup holds. Then no polynomial time ad-
versary can distinguish between an encryption to (¯i, ¯j) and
(¯i, ¯j + 1) in GameA
IH with non-negligible advantage.
Proof. In GameA
IH, the adversary A will eventually be-
have in one of two diﬀerent ways:
Case I: In Key Query phase, A will not submit ((¯i, ¯j), S(¯i,¯j))
for some attribute set S(¯i,¯j) to query the corresponding
private key. In Challenge phase, A submits a message
M and a non-empty attribute set S∗. There is not any
restriction on S∗.
Case II: In Key Query phase, A will submit ((¯i, ¯j), S(¯i,¯j))
for some attribute set S(¯i,¯j) to query the correspond-
ing private key. In Challenge phase, A submits a mes-
sage M and a non-empty attribute set S∗ with the
restriction that S(¯i,¯j) does not satisfy the correspond-
ing strictest access policy AS ∗ (i.e. S∗ \ S(¯i,¯j) 6= ∅).
The Case I is easy to handle using the similar proof ideas
in [9] as the adversary will not query a private key with
the challenge index (¯i, ¯j). The Case II captures the index-
hiding requirement for CP-ABE in that even if a user has
a key with index (¯i, ¯j) he cannot distinguish between an
encryption to (AS ∗, (¯i, ¯j)) and (AS ∗, (¯i, ¯j + 1)) if the corre-
sponding attribute set S(¯i,¯j) does not satisﬁes AS ∗. This
is the most challenging part of achieving the strong trace-
ability in CP-ABE securely and eﬃciently, and our particu-
lar construction (of the crucial components Zti
i) and
i
i = gti in the ciphertext) is driven by and serves this aim.
Q′′′
(in Q′
These ciphertext components are crucial for the proof to use
the underlying assumption to simulate the real attack game
when A behaves in Case II. The proof details of Lemma 1
can be found in Appendix A.1.
Lemma 2. Suppose that the 3-Party Diﬃe-Hellman As-
sumption in a Subgroup (deﬁned in [16]), the 3-Party Diﬃe-
Hellman Assumption (deﬁned in [9]) and the Decisional Lin-
ear Assumption hold. Then no polynomial time adversary
can distinguish between an encryption to (¯i, m) and (¯i + 1, 1)
in GameA
IH with non-negligible advantage.
Proof. Similar to the proof of Lemma 6.3 in [9], to prove
this lemma we deﬁne the following hybrid experiments: H1:
Encrypt to (¯i, ¯j = m); H2: Encrypt to (¯i, ¯j = m+1); and H3:
Encrypt to (¯i + 1, 1). Lemma 2 follows from the following
Claim 1 and Claim 2.
Claim 1. Suppose that the 3-Party Diﬃe-Hellman As-
sumption in a Subgroup holds. Then no polynomial time
adversary can distinguish between experiments H1 and H2
with non-negligible advantage.
Proof. The proof is identical to that of Lemma 1.
Claim 2. Suppose that the 3-Party Diﬃe-Hellman As-
sumption and the Decisional Linear Assumption hold. Then
no polynomial time adversary can distinguish between exper-