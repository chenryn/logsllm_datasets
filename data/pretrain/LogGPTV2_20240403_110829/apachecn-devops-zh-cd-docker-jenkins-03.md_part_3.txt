当代理设置正确时，可以将主节点切换到离线状态，这样就不会在其上执行任何构建，并且它将只充当 Jenkins UI 和构建的协调器。
# 了解永久代理
如前所述，这种解决方案的缺点是我们需要为不同的项目类型维护多个从属类型(标签)。下图显示了这种情况:
![](img/43523171-6bcf-41c4-bed4-3658b0e1437c.png)
在我们的例子中，如果我们有三种类型的项目( **java7** 、 **java8** 和 **ruby** )，那么我们需要维护三个单独标记的(套)从项目。正如[第 2 章](02.html)、*介绍 Docker* 中所述，这也是我们在维护多种生产服务器类型时遇到的相同问题。我们通过在生产服务器上安装 Docker 引擎来解决这个问题。让我们试着对 Jenkins 的奴隶做同样的事情。
# 永久 Docker 代理人
该解决方案背后的想法是永久添加通用从机。每个从机的配置都是相同的(安装了 Docker Engine)，并且每个构建都与构建在其中运行的 Docker 映像一起定义。
# 配置永久 Docker 代理
配置是静态的，因此它的实现方式与我们对永久代理的实现方式完全相同。唯一的区别是，我们需要在每台将用作从机的机器上安装 Docker。然后，我们通常不需要标签，因为所有的奴隶都可以是一样的。配置完从属后，我们在每个管道脚本中定义 Docker 映像。
```
pipeline {
     agent {
          docker {
               image 'openjdk:8-jdk-alpine'
          }
     }
     ...
}
```
当构建开始时，Jenkins 从属从 Docker 映像`openjdk:8-jdk-alpine`启动一个容器，然后执行该容器内的所有管道步骤。这样，我们总是知道执行环境，而不必根据特定的项目类型分别配置每个从机。
# 了解永久 Docker 代理
看看我们对永久代理采用的相同场景，图表如下所示:
![](img/243f8a95-9de6-4851-bc72-5ec31765a752.png)
每个从属都完全相同，如果我们想要构建一个依赖于 Java 8 的项目，那么我们在管道脚本中定义适当的 Docker 映像(而不是指定从属标签)。
# Jenkins 蜂群智能体
到目前为止，我们总是不得不永久地定义 Jenkins 大师中的每个特工。这样的解决方案，即使在很多情况下已经足够好了，但是如果我们需要频繁地扩展从机的数量，它可能会成为一个负担。Jenkins Swarm 允许您动态添加从机，而无需在 Jenkins master 中配置它们。
# 配置 Jenkins 群代理
使用 Jenkins Swarm 的第一步是在 Jenkins 安装**自组织 Swarm 插件模块**插件。我们可以通过管理 Jenkins 和管理插件下的 Jenkins 网络用户界面来实现。在这一步之后，Jenkins 大师为动态连接 Jenkins 奴隶做好准备。
第二步是在每台充当 Jenkins 从机的机器上运行 Jenkins 群从机应用。我们可以使用`swarm-client.jar`应用来完成。
The `swarm-client.jar` application can be downloaded from the Jenkins Swarm plugin page: [https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin). On that page, you can also find all the possible options of its execution.
为了附加 Jenkins Swarm 从节点，运行以下命令就足够了:
```
$ java -jar swarm-client.jar -master  -username  -password  -name jenkins-swarm-slave-1
```
By the time of writing this book, there was an open bug that `client-slave.jar` didn't work via the secured HTTPS protocol, so it was necessary to add the `-disableSslVerification` option to the command execution.
成功执行后，我们应该注意到一个新的从机出现在 Jenkins 主机上，如截图所示:
![](img/644e56d6-3e6e-4509-878c-b9fed436136b.png)
现在，当我们运行一个构建时，它将在这个代理上启动。
The other possibility to add the Jenkins Swarm agent is to use the Docker image built from the `swarm-client.jar` tool. There are a few of them available on the Docker Hub. We can use the `csanchez/jenkins-swarm-slave` image.
# 理解 Jenkins 蜂群智能体
Jenkins Swarm 允许动态添加代理，但它没有说明是使用特定的还是基于 Docker 的从代理，因此我们可以将它用于两者。乍一看，Jenkins·斯旺似乎不是很有用。毕竟，我们将设置代理从主服务器移动到了从服务器，但是仍然需要手动操作。然而，正如我们将在[第 8 章](08.html)、*中看到的那样，使用 Docker Swarm* 进行集群，Jenkins Swarm 支持在服务器集群上动态扩展从机。
# 动态配置的 Docker 代理
另一个选项是设置 Jenkins 在每次构建开始时动态创建一个新代理。这样的解决方案显然是最灵活的，因为从机的数量会根据构建的数量动态调整。让我们看看如何以这种方式配置 Jenkins。
# 配置动态配置的 Docker 代理
我们需要首先安装 Docker 插件。和 Jenkins 插件一样，我们可以在管理 Jenkins 和管理插件中完成。安装插件后，我们可以开始以下配置步骤:
1.  打开“管理 Jenkins”页面。
2.  单击配置系统链接。
3.  页面底部是云部分。
4.  单击添加新云，然后选择 Docker。
5.  填写 Docker 代理详细信息。
![](img/98d44429-9c8f-451e-9744-68fe5b895396.png)
6.  大多数参数不需要更改；但是，我们需要将其中两个设置如下:
If you plan to use the same Docker host where the master is running, then the Docker daemon needs to listen on the `docker0` network interface. You can do it in a similar way as described in the *Installing on a server* section ofts of) slaves. That is the same issue we had while maintaining multiple production server types, as described in [Chapter 2](02.html), *Introducing Docker*, by changing one line in the `/lib/systemd/system/docker.service` file to `ExecStart=/usr/bin/dockerd -H 0.0.0.0:2375 -H fd://`
7.  单击添加 Docker 模板，然后选择 Docker 模板。
8.  填充 Docker 从映像的详细信息:
![](img/f56c7001-d4c7-466c-b687-ad946d915267.png)
我们可以使用以下参数:
*   **Docker 形象**:Jenkins 社区最受欢迎的奴隶形象是`evarga/jenkins-slave`
*   **凭证**:到`evarga/jenkins-slave`映像的凭证有:
    *   用户名:`jenkins`
    *   密码:`jenkins`
*   **实例容量**:定义同时运行的代理最大数量；开始时，它可以设置为 10
Instead of `evarga/jenkins-slave`, it's possible to build and use your own slave images. This is necessary when there are specific environment requirements, for example, the Python interpreter installed. In all examples for this book we used `leszko/jenkins-docker-slave`.
保存后，一切都设置好了。我们可以运行管道来观察执行是否真正发生在 Docker 代理上，但是首先让我们更深入地了解 Docker 代理是如何工作的。
# 了解动态配置的 Docker 代理
动态配置的 Docker 代理可以被视为标准代理机制之上的一层。它既不改变通信协议，也不改变代理的创建方式。那么，Jenkins 如何处理我们提供的 Docker 代理配置呢？
下图展示了我们配置的 Docker 主从架构:
![](img/cba2207e-e746-428b-950c-da8e766e7886.png)
让我们逐步描述 Docker 代理机制是如何使用的:
1.  当 Jenkins 作业开始时，主机从从属 Docker 主机上的`jenkins-slave`映像运行一个新容器。
2.  jenkins-slave 容器实际上是安装了 SSHD 服务器的 ubuntu 映像。
3.  Jenkins 主程序会自动将创建的代理添加到代理列表中(与我们在*设置代理*部分手动进行的操作相同)。
4.  使用 SSH 通信协议访问代理以执行构建。
5.  构建完成后，主容器停止并移除从容器。
Running Jenkins master as a Docker container is independent from running Jenkins agents as Docker containers. It's reasonable to do both, but any of them will work separately.
该解决方案在某种程度上类似于永久 Docker 代理解决方案，因为结果是，我们在 Docker 容器中运行构建。然而，不同之处在于从节点配置。在这里，整个从属是文档化的，而不仅仅是构建环境。因此，它有以下两大优势:
*   **自动代理生命周期**:创建、添加和移除代理的过程是自动化的。
*   **可扩展性**:实际上从 Docker 主机可能不是一台机器，而是由多台机器组成的集群(我们将在[第 8 章](08.html)、*用 Docker Swarm* 介绍使用 Docker Swarm 进行集群)。在这种情况下，添加更多资源就像在集群中添加一台新机器一样简单，并且不需要在 Jenkins 中进行任何更改。
Jenkins build usually needs to download a lot of project dependencies (for example, Gradle/Maven dependencies), which may take a lot of time. If Docker slaves are automatically provisioned for each build, then it may be worth to set up a Docker volume for them to enable caching between the builds.
# 测试代理
无论您选择哪种代理配置，我们现在都应该检查它是否正常工作。
让我们回到 hello world 管道。通常，构建比 hello-world 示例持续的时间更长，因此我们可以通过向管道脚本添加 sleeping 来模拟它:
```
pipeline {
     agent any
     stages {
          stage("Hello") {
               steps {
                    sleep 300 // 5 minutes
                    echo 'Hello World'
               }
          }
     }
}
```
单击立即构建并转到 Jenkins 主页后，我们应该会看到构建是在代理上执行的。现在，如果我们多次点击构建，那么不同的代理应该执行不同的构建(如下图所示):