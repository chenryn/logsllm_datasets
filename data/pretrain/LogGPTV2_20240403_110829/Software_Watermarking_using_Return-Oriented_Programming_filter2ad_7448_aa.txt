title:Software Watermarking using Return-Oriented Programming
author:Haoyu Ma and
Kangjie Lu and
Xinjie Ma and
Haining Zhang and
Chunfu Jia and
Debin Gao
Software Watermarking using Return-Oriented
Programming
Haoyu Ma*
PI:EMAIL
Haining Zhang*
PI:EMAIL
Kangjie Lu†
PI:EMAIL
Chunfu Jia*,§
PI:EMAIL
Xinjie Ma*,‡
PI:EMAIL
Debin Gao‡
PI:EMAIL
*College of Computer and Control Engineering, Nankai University, China
†School of Computer Science, Georgia Institute of Technology, USA
‡School of Information Systems, Singapore Management University, Singapore
§Information Security Evaluation Center of Civil Aviation, Civil Aviation University of China, China
ABSTRACT
We propose a novel dynamic software watermarking design
based on Return-Oriented Programming (ROP). Our design
formats watermarking code into well-crafted data arrange-
ments that look like normal data but could be triggered to
execute. Once triggered, the pre-constructed ROP execution
will recover the hidden watermark message. The proposed
ROP-based watermarking technique is more stealthy and re-
silient over existing techniques since the watermarking code
is allocated dynamically into data region and therefore out
of reach of attacks based on code analysis. Evaluations show
that our design not only achieves satisfying stealth and re-
silience, but also causes signiﬁcantly lower overhead to the
watermarked program.
Categories and Subject Descriptors
K.5.1 [Legal Aspects of Computing]: Hardware/Soft-
ware Protection – Proprietary rights
General Terms
Security
Keywords
Software watermarking, return-oriented programming, re-
verse engineering, code obfuscation
1.
INTRODUCTION
Software theft and pirating have always been important
concerns in software industry. In ﬁghting against such in-
tellectual property violations, software watermarking is con-
sidered a valuable tool. Like media watermarking, software
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714582.
watermarking embeds a secret message into a subject pro-
gram which can be extracted to identify the copyright owner
or authentic user of the program.
Existing software watermarking designs can be divided
into static and dynamic watermarking [10]. The former
embeds the watermark message directly in program’s text,
while the later hides it in program’s runtime states or dy-
namic data. Since dynamic watermarking retrieves the hid-
den message by running along a speciﬁc path of the water-
marked program and examining its speciﬁc behavior, it is
usually considered a more reliable and secure solution [9].
Nevertheless, despite the progress made on dynamic wa-
termarking, there are well-documented limitations with ex-
isting techniques [9]. First, existing solutions of dynamic
watermarking introduce special data structures and instruc-
tion patterns which could be targeted by attackers to locate
the hidden watermark. Second, code inserted by dynamic
watermarking is usually rather independent from the other
parts of the program, and thus can be suspicious. Finally,
because previous designs, e.g., [8, 21, 23], use an external ex-
tractor to recover the watermark from program’s execution
recordings, sometimes the watermarked program needs to
leave some information for the extractor to ﬁnd the hidden
watermark, which might also be exploited by attackers in
undoing it. Existing research suggests that these problems
be solved by integrating other protection techniques [23];
yet doing so also signiﬁcantly decreases the eﬃciency of the
watermarking technique [9].
In general, dynamic watermarking is to give the program
a new execution path (which presents the watermark). How-
ever, with regular programming techniques, it’s nearly im-
possible to also conceal the existence of this new execu-
tion path. In this paper, we present a innovative solution
to this diﬃculty – a novel dynamic watermarking design
based on Return-Oriented Programming (henceforth ROP),
a well-known software exploit technique [4,14,16,26,27]. We
show that, although initially proposed for malicious pur-
poses, ROP can be applied in benign uses like software wa-
termarking and works surprisingly well.
Our approach “assembles” the watermarking code out of a
group of small, special instruction pieces picked from exist-
ing code, resulting an unexpected execution path that can
only be chained with ROP. We also modify the subject pro-
gram so that it prepares all other resources needed to chain
this watermarking path on-the-ﬂy in its heap region. Only
when triggered by the secret input will the program transfer
its control to the hidden ROP path, which then extracts the
embedded watermark. Our method ensures that the water-
marked program does not have an explicit code stream that
belongs exclusively to watermarking, so that when our wa-
termarking module lurks it functionally doesn’t exist, pre-
venting it from being spotted by software analyses.
To our best knowledge, our approach is the ﬁrst dynamic
watermarking technique that performs execution of water-
marking using solely instructions from other existing code
modules. This not only keeps the watermarking code out of
the scope of analysis tools, but also helps it survive various
distortive attacks. Moreover, since ROP is initially devel-
oped to defeat protections against code injection exploits,
our approach also involves no suspicious behavior like viola-
tion of W⊕X, DEP, or code signing. We present evaluations
of program stealth and resilience in Section 4. Results show
that our approach is able to make watermarking semantics
untraceable by powerful static analysis tools, thus succeeds
in concealing watermarking behaviors.
Another beneﬁt of arranging the watermarking module in
the form of ROP is better integration with the original pro-
gram without creating suspicious data structures as in most
existing work [11, 21]. We show that components of the wa-
termark, which are inserted as ROP resources, can be spread
out and blended with the program’s other runtime data more
easily and ﬂexibly, minimizing suspicion from analyses that
aim to locate them. Our evaluation demonstrates that our
design achieves satisfying static stealth in merging the wa-
termark into subject programs.
Last but not the least, instead of using an external ex-
tractor, our approach plants an ROP trigger inside the wa-
termarked program to activate the ROP execution and to
extract the watermark. This avoids leaking hints that could
assist watermark recovering to third parties as in existing
techniques [8, 11, 20, 21].
The rest of the paper is organized as follows.
In Sec-
tion 2 we introduce the background as well as existing re-
search on aspects related to our design. The ideology and
implementation of ROP-based watermarking is given in Sec-
tion 3. Section 4 presents evaluations on the proposed so-
lution along with comparisons with previous watermarking
methods. We discuss applicability and compatibility issues
of applying ROP in watermarking in Section 5. Section 6
concludes the paper.
2. RELATED WORK
2.1 Software watermarking
The goal of software watermarking is to embed an iden-
tifying message into a piece of software which could later
be extracted to recognize the ownership or certain authentic
information of the watermarked software.
Some schemes statically embed watermark into program’s
text by, e.g., relocating registers or modifying program’s
abstract semantics [12, 18]. Others focus on dynamic ap-
proaches in which the watermark is embedded in program’s
runtime behavior [8, 11, 19–21, 23, 25, 31].
Previous work on dynamic watermarking falls into two
categories. Graph-based watermarking, ﬁrst introduced by
Collberg et al. [10], is one of the most well-understood soft-
ware watermarking method [11, 23, 31, 34]. These schemes
encode watermark messages into heap-allocated graph struc-
tures. Watermark extraction is done by examining graph
structures built by the program with external watermark
extraction routines and recognizing the graph that repre-
sents the watermark message. Another category of dynamic
watermarking attempts to encode the watermark in special
states of the program’s control ﬂow and extract the water-
mark by analyzing speciﬁc execution traces of the program,
such as multi-thread behavior [21], conditional branching
[8, 20], or value of opaque predicates [19].
A common characteristic of the above methods is that
they require special components added into the program
that serve solely for watermarking (e.g., data structures rep-
resenting graph nodes [11,34], special thread components [21]).
Many of them leave distinguishable features on regular run-
ning since the watermark extraction relies on external ob-
servation/examination to the program. For example, water-
marking schemes based on thread behavior or dynamic exe-
cution path require locating and monitoring special thread
components or certain branch instructions externally [9].
2.2 Return-oriented programming
Initially proposed by Shacham [27], return-oriented pro-
gramming has become a major step in the advance of ma-
licious code. While protection mechanisms like W⊕X and
DEP are used by more and more operation systems to ﬁght
against code injection attacks, ROP provides a new way
of exploitiation for arbitrary computation and bypasses the
above protections since it does not inject any new code.
ROP was started on x86 architecture [5, 26] and later
extended to many other platforms, e.g., the SPARC [4],
ARM [16], etc. ROP attack is now not only fully automated,
but able to be initiated during the executing of target pro-
gram [15, 29]. Furthermore, ROP is also proven to be useful
in compromising iOS applications [32] where code injection
is not allowed.
2.3 Program steganography with ROP
Though introduced as an attacking technique, recently the
argument on whether ROP can be used in a benign way has
been brought to researchers’ attention. In particular, Rop-
Steg [17] was proposed for code protection that attempts to
hide selected code portion of a program by executing their
“unintended matches” located elsewhere. In the sense of hid-
ing certain code blocks of a piece of software, RopSteg and
our ROP-based software watermarking share similar pur-
poses. However, RopSteg’s design assumes a scenario where
tampering with program code is not of the best interest of
the attackers, which is certainly not true in software water-
marking since removing a speciﬁc part of the program (that
for watermarking) is exactly the purpose of attacks. When
used directly for software watermarking, RopSteg has the
following drawbacks.
First, RopSteg replaces the protected code portion with
ROP generator and ROP board for jumping into and re-
turning from the unintended matches. In watermarking this
means that RopSteg still introduces new code of special pat-
tern that only executes in watermark extraction. This could
make the embedded watermark even easier to be located.
Second, RopSteg does not withstand distortive attacks in
the sense that any simple program transformation applied
to the RopStegged program would most likely destroy the
Figure 1: Overview of ROP-based watermarking
unintended matches of the hidden instructions. This makes
it a fragile solution for watermark embedding.
3. ROP-BASED DYNAMIC SOFTWARE
WATERMARKING
3.1 Threat model and assumptions
A dynamic watermarking design consists of a watermark
embedder and a watermark recognition protocol. The wa-
termark embedder, denoted as E(·,·,·), takes as input the
subject program P , a watermark object ω, and an input
setting δ ∈ ∆ (aka the “secret input”), and outputs the wa-
termarked program P (cid:48) = E(P, ω, δ). The goal is to make
P (cid:48)(δ) = P (δ) + Ω at semantic level, where Ω is the exe-
cutable form of ω, while preserving the semantics for other
inputs, i.e., P (cid:48)(i) = P (i) ∀i (cid:54)= δ. The watermark recogni-
tion protocol R(·) extracts ω from P (cid:48) when it runs with the
secret input, i.e. ω = R(P (cid:48)(δ)).
on P (cid:48):
Additive attack which turns P (cid:48) into P (cid:48)(cid:48) in order to in-
sert a bogus watermark υ, such that for an adversary-
speciﬁed σ ∈ ∆1, R(P (cid:48)(cid:48)(σ)) = υ.
In general, an adversary may launch the following attacks
Subtractive/distortive attack which turns P (cid:48) into P (cid:48)(cid:48)
so that the authentic watermark ω is removed or com-
promised, i.e. R(P (cid:48)(cid:48)(δ)) (cid:54)= ω.
The adversary is assumed to possess full control of P (cid:48).
He could modify it using any semantic-preserving transfor-
mations, and observe and analyze its behavior both stat-
ically and dynamically. Nonetheless, the adversary is not
al-mighty either. In practice, it is considered to be blind on
a number of key information [10], namely:
1. Whether P (cid:48) has been watermarked;
2. The original program P ;
3. The secret input δ.
Our ROP-based watermarking inherits the above assump-
tions and considers the same general attack model. Further-
more, we extend the concept of the recognition protocol R to
1Whether σ satisﬁes σ (cid:54)= δ is not important here.
be more than just an algorithm or software analysis toolkit,
but to also include the entire system environment setting in
which the program is to be executed. The reason of such a
deﬁnition will be explained in Section 5.
3.2 Overview
The reason of ROP being so popular in malicious uses is
that it formats its “code” in a form that is not to be run
directly, but to help creating unexpected executions out of a
program using its own instructions. Due to this special way
of organizing executables, ROP also makes it very diﬃcult
for analysts to detect or understand the new “code” stream
it creates. In other words, the execution path introduced by
ROP is functionally “invisible”. This could very well be a
solution to building a dynamic software watermarking that,
unlike existing ones, achieves minimum visibility while main-
taining strong resilience.
It is important to ﬁrst understand that an ROP “code”
consists of 2 portions:
1. small pieces of instructions called “gadgets” that end
with return or indirect call/jump, which are located
somewhere in the existing executables; and
2. a carefully crafted bit string called the “payload” con-
sisting of addresses of these gadgets as well as other
variables they need in the execution.
ROP works by executing the gadgets with the payload
strings, which means that for the new execution path it
creates, nothing more than some extra data needs to be
built. Therefore, the idea of ROP-based watermarking is
to construct the actual watermarking code with ROP gad-
gets, while introducing extra code that builds a payload to
control the gadgets. As brieﬂy demonstrated in Figure 1,
program modiﬁed in this way will transfer control to the se-
lected gadgets when given the secret input2 which takes over
and presents the hidden watermark, and then return back
to the program’s normal routine. Since building ROP pay-
load does not change the way in which the original program
works, the extra code added by this method can always be