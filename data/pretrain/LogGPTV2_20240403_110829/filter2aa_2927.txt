0
 KaiSong (exp-sky)
Tencent Security Xuanwu Lab
WHO AM I
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
The vulnerability was discovered on May 31, 2016.
The vulnerability was fixed in February 2017.
NativeIntArray struct :
NativeIntArrayHead
Segment :
left
length
size
Next segment
head
Segment :
left
length
size
Next segment
Buffer
Buffer
length
NativeIntArray struct :
Make var_Array_1 object reach a special state.
Make var_Array_1->length smaller.
Make var_Array_1 object reach a special state.
Array.length head.size smaller.
step 1
var_Array_1->head.size : 0x2e -> 0x23
var_Array_1->head.size : 0x23 head.length : 0x2e
Segment : head
Left:0x00000000
Length:0x0000002e
Size:0x00000023
Next segment
Segment : head.next
Left:0x00000023
Length:0x0000000b
Size:0x00000012
Next segment
Buffer:0x0000002e*4
Buffer:0x00000012*4
NativeIntArrayHead
head
Length:0x0000002e
step 1
var_Array_1->head.size : 0x2e -> 0x23
var_Array_1->head.size : 0x23 head.length : 0x2e
step 1
seg->left = 0
seg->EnsureSizeInBound() : seg.size = 0x23
step 1
Min(Next->left, Size) - Min(0x2e, 0x23)
step 1
var_Array_1->head.size : 0x2e -> 0x23
var_Array_1->head.size : 0x23 head.length : 0x2e
Segment : head
Left:0x00000000
Length:0x0000002e
Size:0x00000023
Next segment
Segment : head.next
Left:0x00000023
Length:0x0000000b
Size:0x00000012
Next segment
Buffer:0x0000002e*4
Buffer:0x00000012*4
NativeIntArrayHead
head
Length:0x0000002e
Step 2
Create OOB
Step 2
ConvertToJavascriptArray : Create new segment
Seg.buffer = 0x23 * 0x08,    Seg.length = 0x2e
Segment : head OOB
Left:0x00000000
Length:0x0000002e
Size:0x00000023
Next segment
Segment : head.next
Left:0x00000023
Length:0x0000000b
Size:0x00000011
Next segment
OOB : 0x0b*0x08
Buffer:0x00000011*4
JavascriptArrayHead
head
Length:0x0000002e
Buffer:0x00000023*8
Step 2
Seg.buffer = 0x23 * 0x08; Seg.length = 0x2e;
Step 3
Segment layout
Array 1 Segment : head
Left:0x00000000
Length:0x0000002e
Size:0x00000023
Next segment
Buffer:0x00000023*8
Array 2 Segment : head
Left:0x00000023
Length:0x0000000b
Size:0x23
OOB Write
Step 3
Segment layout and segment OOB
Step 4
Edit var_Array_2.head.size
Array 1 Segment : head
Left:0x00000000
Length:0x0000002e
Size:0x00000023
Next segment
Buffer:0x00000023*8
Array 2 Segment : head
Length:0x0000000b
Size:0xffffffff
OOB Write
Left:0x00000023
Step 4
Edit var_Array_2.head.size
Array 1 Segment : head
Left:0x00000000
Length:0x0000002e
Size:0x00000023
Next segment
Buffer:0x00000023*8
Array 2 Segment : head
Length:0x0000000b
Size:0xffffffff
Left:0x00000023
Segment : head.next
Left:0x00000023
Length:0x0000000b
Size:0x00000011
Next segment
Buffer:0x00000011*4
0x7fffffff
Step 5
var_Array_2 OOB r/w
Array 2 Segment : head
Left:0x00000000
Length:0x0000000b
Size:0xffffffff
Next segment
Buffer:0x00000023*8
OOB 0xffffffff * 8
Step 5
var_Array_2 OOB r/w
Step 6
Fill Memory r/w
Inline Head
Edit NativeIntArray.length, 
NativeIntArray.head.length, 
NativeIntArray.size
Step 6
Fill Memory r/w
Inline Head
Edit NativeIntArray.length, 
NativeIntArray.head.length, 
NativeIntArray.size
memory
OOB segment
NativeIntArray
object
edit 
array.length
array.head.size
array.head.length
out of bound memory read/write
Step 6
Fill Memory r/w
DataView
Step 6
Fill Memory r/w
DataView
Step 6
Fill Memory r/w
DataView
Step 6
Fill Memory r/w
DataView
Step 6
Fill Memory r/w
DataView
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
Module address and object address
Module address and object address
ROPVirtualProtectVirtualAlloc
BBC(D>C(A
:ECMGI
.CBBC(D>C(
1BBBC(D>C(D
CEIOC>D )G.!
C4145443
6ICA6211C(A
:ECMGI
.CBBC(D>C(
1BBBC(D>C(D
CEIOC>D )G.!
C4145443
6ICA6211031
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
Control Flow Guard (CFG)
;=C4!4/
;=C4!4 /4CA:A=
;=C4!4
::000040::0AA:::A4,4::+4A
;=C4!4
::4
;=C4!4/
::=A4 /
Control Flow Guard (CFG)
bitmap
index        offset     : data
[0x0077b960] 0x01dee58c : 0x55555555
[0x0077b964] 0x01dee590 : 0x30010555
[0x0077b968] 0x01dee594 : 0x04541041
…
bt : 0x30010555&0x400 != 0
00000100 00000000 = 0x400
01010 = 0x0a = 10
Function
address : 0x77b96450
0x77b96450 : [01110111 10111001 01100100 01010000]
Leak stack address
Finding the return address of a specific function.
Modify the function's return address.
Control RIP.
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
Code Integrity Guard (CIG)
Only properly signed DLLs are allowed to load by a process
us-14-Yu-Write-Once-Pwn-Anywhere
“LoadLibrary” in ShellCode
Load DLL file into Memory
Parse PE header 
Reload sections
Fix Import Table
Rebase
Elevation of privilege is Quite Complex
Shellcode reusable
Increase privileges  and Escape SandBox can be in a DLL 
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
Two general ways load malicious native code into memory
Load malicious DLL/EXE from disk
Dynamic generate code 
CIG block the first way
Only properly signed DLLs are allowed to load by a 
process
Child process can not be created (Windows 10 1607)
ACG block the second way
Code pages are immutable
New, unsigned code cannot be created
Arbitrary Code Guard(ACG)
Leverage valid signed code in an unintended way
ROP (Return oriented programming)
It could construct a full payload
Call API Function
Example
No need of shellcode
Just like C code 
Example
No need of shellcode
Just like C code 
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
Demo
CONTENTS
1Chakra vulnerability
2Bypass ASLR & DEP
3Bypass CFG
4Bypass CIG
5Bypass ACG
6Exploit
7Q&A
https://scsc.xlab.qq.com/
100
https://scsc.xlab.qq.com/
100
F
H9FOE#57#87F0809F819N8E88-MFH
H:OFOEEN#E9F9:9QF9NMF.O/23
HHBR:HE#:QH9FE9F:Q99CFBE