# KaiSong (exp-sky)
Tencent Security Xuanwu Lab

## WHO AM I
- **Name:** KaiSong
- **Affiliation:** Tencent Security Xuanwu Lab
- **Alias:** exp-sky

## CONTENTS
1. Chakra Vulnerability
2. Bypass ASLR & DEP
3. Bypass CFG
4. Bypass CIG
5. Bypass ACG
6. Exploit
7. Q&A

### 1. Chakra Vulnerability
- **Discovery Date:** May 31, 2016
- **Fix Date:** February 2017

#### NativeIntArray Structure
- **NativeIntArray:**
  - **Head:**
    - `left`
    - `length`
    - `size`
  - **Segment:**
    - `head`
      - `left`
      - `length`
      - `size`
      - `Next segment`
    - `Buffer`

#### Steps to Exploit
- **Step 1: Manipulate var_Array_1 Object**
  - Make `var_Array_1` reach a special state.
  - Reduce `var_Array_1->length`.
  - Set `var_Array_1->head.size` from `0x2e` to `0x23`.
  - Adjust `head.length` to `0x2e`.

  ```plaintext
  Segment : head
  Left: 0x00000000
  Length: 0x0000002e
  Size: 0x00000023
  Next segment
  Segment : head.next
  Left: 0x00000023
  Length: 0x0000000b
  Size: 0x00000012
  Next segment
  Buffer: 0x0000002e * 4
  Buffer: 0x00000012 * 4
  ```

- **Step 2: Create Out-of-Bounds (OOB) Condition**
  - Use `ConvertToJavascriptArray` to create a new segment.
  - Set `Seg.buffer = 0x23 * 0x08` and `Seg.length = 0x2e`.

  ```plaintext
  Segment : head OOB
  Left: 0x00000000
  Length: 0x0000002e
  Size: 0x00000023
  Next segment
  Segment : head.next
  Left: 0x00000023
  Length: 0x0000000b
  Size: 0x00000011
  Next segment
  OOB: 0x0b * 0x08
  Buffer: 0x00000011 * 4
  JavascriptArrayHead
  head
  Length: 0x0000002e
  Buffer: 0x00000023 * 8
  ```

- **Step 3: Layout Segments for OOB Write**
  - Define the layout of segments for OOB write.

  ```plaintext
  Array 1 Segment : head
  Left: 0x00000000
  Length: 0x0000002e
  Size: 0x00000023
  Next segment
  Buffer: 0x00000023 * 8
  Array 2 Segment : head
  Left: 0x00000023
  Length: 0x0000000b
  Size: 0x23
  OOB Write
  ```

- **Step 4: Edit var_Array_2.head.size**
  - Modify `var_Array_2.head.size` to `0xffffffff`.

  ```plaintext
  Array 1 Segment : head
  Left: 0x00000000
  Length: 0x0000002e
  Size: 0x00000023
  Next segment
  Buffer: 0x00000023 * 8
  Array 2 Segment : head
  Length: 0x0000000b
  Size: 0xffffffff
  Left: 0x00000023
  ```

- **Step 5: Perform OOB Read/Write on var_Array_2**
  - Use the modified `var_Array_2` for OOB read/write.

  ```plaintext
  Array 2 Segment : head
  Left: 0x00000000
  Length: 0x0000000b
  Size: 0xffffffff
  Next segment
  Buffer: 0x00000023 * 8
  OOB: 0xffffffff * 8
  ```

- **Step 6: Fill Memory with Read/Write Capabilities**
  - Use `DataView` to fill memory with read/write capabilities.
  - Edit `NativeIntArray.length`, `NativeIntArray.head.length`, and `NativeIntArray.size`.

### 2. Bypass ASLR & DEP
- **Module Address and Object Address**
  - Leverage ROP (Return-Oriented Programming) and VirtualProtect/VirtualAlloc.

### 3. Bypass CFG (Control Flow Guard)
- **Bitmap Index and Offset Data**
  - Example:
    - `[0x0077b960] 0x01dee58c : 0x55555555`
    - `[0x0077b964] 0x01dee590 : 0x30010555`
    - `[0x0077b968] 0x01dee594 : 0x04541041`
  - Check if `bt & 0x400 != 0`.

- **Leak Stack Address**
  - Find the return address of a specific function.
  - Modify the function's return address to control RIP.

### 4. Bypass CIG (Code Integrity Guard)
- **Only Signed DLLs Allowed**
  - Load signed DLLs using `LoadLibrary`.
  - Parse PE header, reload sections, fix import table, and rebase.
  - Shellcode can be reused to increase privileges and escape sandbox.

### 5. Bypass ACG (Arbitrary Code Guard)
- **Block Malicious Code Loading**
  - Only valid signed code is allowed.
  - Use ROP to construct a full payload without shellcode.
  - Call API functions directly.

### 6. Exploit
- **Demo**
  - Demonstrate the exploit in action.

### 7. Q&A
- **Questions and Answers**
  - Open floor for any questions and answers.

For more information, visit [Tencent Security Xuanwu Lab](https://scsc.xlab.qq.com/).

**Contact Information:**
- **Email:** H9FOE#57#87F0809F819N8E88-MFH
- **Phone:** H:OFOEEN#E9F9:9QF9NMF.O/23
- **Other:** HHBR:HE#:QH9FE9F:Q99CFBE