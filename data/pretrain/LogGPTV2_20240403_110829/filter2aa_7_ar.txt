  桌面软件行业的人可能很难相信，找出Viaweb的bug几乎成了一种游戏。因为软件发布以后，大多数bug都是罕见情况下才会发生的个案，受到影响的用户往往都是高级使用者，他们喜欢试验那些不常用的、难度大的操作。高级使用者对bug的容忍度比较高，尤其如果这些bug是在开发新功能的过程中引入的，而这些新功能又正是他们所需要的，他们就更能理解了。事实上，因为bug不多，你只有经过一些复杂的过程以后才会遇到它们，所以高级使用者往往因为发现了bug感到很得意。他们打电话给客服时，多半是一副胜利者的口吻，而不是怒气冲冲的样子，好像他们击败我们得分了一样。
客户支持
  当你可以再现错误时，你开展客服支持的方式就变了。大多数软件公司将客户支持看作提高客户满意度的一种方式。在这些公司看来，要么是客户打电话来，报告一个已知的bug，要么是客户执行了错误的操作，你必须判断出他到底什么地方做错了。这两种情况对公司的知识积累都没有太大益处。所以，你开始觉得客户支持是一件令人头痛的事情，决定将客服人员与开发人员尽可能分离。
  Viaweb不是这样。我们的客户支持是免费的，因为我们希望知道用户的反应。如果他们使用时遇到困难，我们希望立刻知道，这样就能再现错误、解决问题、发布新版本。
  所以，Viaweb的开发人员总是与客服人员保持密切联系。客服人员坐在距离程序员只有9米的地方，知道自己可以随时打断程序员的工作，提交新证实的bug的报告。遇到重大bug，我们就算在开董事会，也会马上回来修改程序。
  我们的这种方法让所有人都感到满意。客户很高兴，拨打厂商服务热线是免费的，而且还被当作通风报信的人，受到郑重对待。客服人员也喜欢这样，因为这使得他们可以帮助用户，而不是对着用户读操作手册；程序员喜欢这样，因为他们能够再现bug，而不是通过模糊不清的二手报吿了解bug。
  我们的政策是当场修复bug，这改变了客服人员与黑客之间的关系。在大多数软件公司，客服人员是低工资的边缘人，黑客则是呼风唤雨的主宰者。这些公司有各种各样的bug报告流程，伹是几乎都是单向式的：使用者打电话给客服人员报告bug，客服人员填写某种形式的表格，传递给程序员（可能会经质量监控部门之手），程序员把bug写入待解决问题的清单。Viaweb不是这样，在收到使用者的bug报告之后一分钟内，程序员就会对站在身边的客服人员说：“没错，你是对的，这是一个bug。”客服人员从黑客嘴里听到“你是对的”，会感到欢欣鼓舞。客服人员告诉我们发现bug的时候，他们心里怀着期待，就好像小猫想让别人知道自己抓住了一只老鼠一样。这也使得客服人员在判断bug严重性时格外小心，因为这关系到他们的声誉。
  我们被雅虎收购后，客服人员被移到离程序员很远的地方。直到那时，我们才意识到客户支持实际上就是质量监控，也是某种程度的市场营销。除了记录bug，客服人员还必须大概了解相关知识，回答与bug相关的一些问题、解释令使用者迷惑不解的功能等^。有时，他们也扮演了使用者的代理人，我们会问他们哪个新功能是用户更想要的，他们总是能做出正确的回答。
^“我们在Viaweb举办过一个比赛，看谁能说出我们软件中最差劲的地方。两位客服人员并列第一，我至今想起他们的叙述都不寒而栗。比赛一结束，我们立刻修复了那两个问题。”
全身心投入
  能够即时发布软件，对开发者是一个巨大的激励。步行上班途中，我经常会想哪些地方还需要变动，然后当天就予以实现。一些重大功能也是这样来的。即使某个功能要花两个星期（或者更长时间）开发，我也很确定，一旦写完就可以立刻看到效果。
  如果软件的新版本要等到一年后才能发布，我就会把大部分新构思束之高阁，至少过上一段时间再来考虑。但是，构思这种东西有一个特点，那就是它会导致更多的构思。你有没有注意过，坐下来写东西的时候，一半的构思是写作时产生的？软件也是这样。实现某个构思，会带来更多的构思。所以，将一个构思束之高阁，不仅意味着延迟它的实现，还意味着延迟所有在实现过程中激发的构思。事实上，将一个构思束之高阁，甚至会限制新构思的产生。因为你看一眼堆放在一边、还没有实现的构思，就会想“我已经为下一个版本准备了很多新东西要实现了”，你就懒得再思考更多的新功能了。
  大公司的做法不是立刻实现新功能，而是先对新功能做一个计划。我们在Viaweb就是因为这个原因而遇到了麻烦。投资者和分析家会问，你们对未来有何计划。真实的回答是，我们没有任何计划。我们有改进的想法，但是如果我们想到应该怎么改进，就已经把它实现了。接下来六个月我们要做什么？所有能想到的最佳改进。我不知道自己是否有胆量公开这么说，但这是实话。计划这个词，只是将构思束之高阁的另一种表达方式。只要想到好的构思，我们就立刻着手实现。
  Viaweb和其他许多软件公司一样，大部分代码都有明确的负责人，而且只有一个。如果你负责某件事，那就真的是你负责。除了你以外，没有人能批准（他们甚至都不知道）这部分代码的发布。如果你出错了，没有人会提醒你，唯一的代码保护机制就是你的羞耻心，你不想被同事当成傻瓜，这就足矣。我这么说或许会让人误以为Viaweb的代码是漫不经心地编写出来的。实际上我们的开发进度很快，但是把代码放到服务器上发布之前，我们会深思熟虑。提高软件可靠性的关键在于开发时全神贯注，而不是降低开发速度。正是因为飞行员全神贯注，他才能在夜间让一架18吨重的飞机以225公里的时速平安降落在航空母舰的甲板上，做得比小孩子切面包还要安全。
  当然，这样写软件也有局限。它适用于小型的、由优秀可靠程序员组成的开发团队，不适用于大型的、充斥大量平庸之辈的软件公司，在那里不是程序员想出好的构思，而是一个委员会集体批准坏的构思。
逆向的《人月神话》^
^“《人月神话》（The Mythical Man-Month）是布鲁克斯（Frederick Brooks）所写的一本软件项目管理名著。所谓“人月”就是一个人在一个月内所能完成的工作量。假如某个项目预估需要12个人月，那么派4个人处理这个项目，理论上需要3个月，派6个人则只需要2个月。但是，布鲁克斯认为这种换算机制在软件业行不通，是一个神话，因为软件项目是交互关系复杂的工作，需要大量的沟通成本，人力的增加会使沟通成本急剧上升，反而无法达到缩短工期的目的。在本质上，软件项目的人力与工期是无法互换的，当项目进度落后时，光靠增加人力到该项目中，并不会加快进度，反而有可能使进度更加延后。（该书英文版已由人民邮电出版社出版。）——译者注”
  幸好开发互联网软件需要的程序员比较少。我曾在一家中等规模的桌面软件公司工作，那里的工程部规模就超过100人，但是其中只有13人负责产品开发，剩下的人负责软件发布、软件移植以及其他事情。开发互联网软件，你最多只需要那13个人，因为不存在软件发布、软件移植以及其他事情。
  Viaweb的开发者只有3个人^。我一直在不停地招聘，压力很大，因为我们要把公司卖掉。我们很清楚地知道，买家不愿花大价钱买下一个只有3个程序员的公司。（解决方法：雇更多的人，在公司内创设其他项目，让他们去做。）
^“罗伯特·莫里斯写了客户下单的前台订单系统，特雷弗·布莱克韦尔写了图片系统和后台管理系统（商家用来处理订单、查看统计数据、修改设置等），我写了站点生成器（商家用来搭建网站的外观）。订单系统和图片系统的开发语言是C和C++，后台管理系统主要是Perl，站点生成器是Common Lisp。”
  开发软件需要的程序员人数减少，不仅意味着省下更多的钱。正如《人月神话》一书中所指出的，向一个项目增加人手，往往会拖慢项目进程。随着参与人数的增加，人与人之间需要的沟通呈现指数式增长^。人数越来越多，开会讨论各个部分如何协同工作所需的时间越来越长，无法预见的互相影响越多越大，产生的bug也越多越多。幸运的是，这个过程的逆向也成立：人数越来越少，软件开发的效率将指数式增长。我不记得我们在Viaweb开过讨论如何编程的会议。步行去吃午饭的路上，我们就能把该说的话说完，从来没有例外。
^“这里的“指数式”（exponentially），我用的是口语中的表达方式。更合适的词应该是“多项式似的”（polynomially）。”
  如果要说有什么缺点，就是由于开发人员比较少，每个程序员都必须承担一点儿系统管理的责任。当你在服务器上发布软件时，必须有人监控服务器，但是由于人员太少，监控员只能由开发人员兼任。Viaweb有许多系统组件，变动非常频繁，导致应用软件和系统软件之间的界线很难区分。硬性指定一条界线将限制我们的开发。所以，虽然我们总是安慰自己，公司运营很快就能走上正轨，一两个月后就能平稳发展，那时就可以雇一个专职的系统管理员让他专门负责服务器了，但是这个愿望一直没有实现。
  只要你还在很活跃地开发产品，就免不了要亲自做系统管理，我认为没有其他可能。如果你梦想写完代码，向服务器递交（check in），然后就可以回家，一天工作结束，这在互联网软件身上肯定没有实现的可能。互联网软件是活的，每时每刻都在你的服务器上运行。一个严重的bug影响的可能不是一个用户，而是所有用户。如果某个bug破坏了硬盘上的数据，更是必须马上修复，诸如此类。我们的心得是，第一年之后就不必每分钟都盯着服务器了，但是对新变动的部分一定要密切关注。不要在半夜里发布代码，然后回家睡觉。
关注用户
  互联网软件不仅把开发者与他的代码更紧密地联系在了一起，而且把开发者与他的用户也更紧密联系在了一起。财务软件公司Intuit的销售方式很出名，他们的销售员会在软件零售店里向顾客做自我介绍，然后请求顾客跟他们回公司，以便进一步了解软件。如果你亲眼见到某人第一次使用你的软件，你就会知道软件的哪个地方最打动他。
  软件应该做到用户认为它可以做到的事情。但是，你不知道用户到底怎么想，除非你亲眼看到他们如何使用你的软件，相信我，看到和看不到大不相同。互联网软件能够让你前所未有地了解用户行为。你不必再人为挑选一个小型的用户样本，进行重点观察。每个用户的每一次点击你都可以看到。所以，你不得不仔细斟酌到底要看哪些行为，因为你不应该侵犯用户的隐私。但是，即使是最常见的统计项目，也能提供大量信息。
  因为你能得到用户数据，所以就不用依赖基准测试^了。基准测试不过是在模拟用户，而你现在能看到真实的用户。你想知道应该优化什么地方，那就登录到服务器，看看什么程序最消耗CPU。你也会知道什么时候应该停止优化，当我们后来发现Viaweb编辑器的瓶颈是内存而不是CPU时，就知道可能应该停止优化了，因为我们没办法压缩用户数据的大小。（唉，其实是有办法的，但是做起来很不容易。）
^“基准测试（benchmark test）指的是先设置一个基本的数据环境，测试应用程序的表现，然后把这个表现当作“基准”（benchmark），用来比较其他情况下应用程序的表现。——译者注”
  效率对互联网软件至关重要，因为硬件费用由你支付。你的资本支出成本除以服务器所能支持的最大用户数量，就是你为每个用户付出的成本。如果你的软件效率高，你就能比同样硬件配置的竞争对手多发展用户，获得更多的利润。我们在Viaweb的时候，每个用户的硬件成本大约是5美元，现在应该更低，可能比把第一个月的账单寄给他们的成本还要低。如果软件效率足够高，每个用户的硬件成本现在可以接近免费。关注用户不仅有助于优化程序，还有助于指导你的设计。Viaweb的脚本语言RTML允许高级用户自定义页面风格。我们发现RTML有点像留言本，用户通过它向我们提建议，因为只有当预设的页面风格不能满足用户需求时，他们才会使用RTML。举例来说，编辑器的工具栏原先是横跨页面的，但是许多使用RTML的用户将它放在左下方，于是我们也就把工具栏的默认位置调整为左下方了。
  最后，通过关注用户，你可以知道他们在使用软件的过程中什么时候遇到了麻烦。因为顾客总是对的，所以这表明你需要修正软件。推广Viaweb的关键，就是允许访问者在线试用。这可不是仅仅展示几张图片，而是真的让你使用我们的产品。只需要五分钟，你就能自己搭建起一个真实可用的网上商店。