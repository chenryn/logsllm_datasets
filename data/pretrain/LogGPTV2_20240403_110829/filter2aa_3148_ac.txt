### Memory Management and Exploitation Techniques

#### Memory Allocation and Freeing
1. **Chunk Calculation:**
   ```c
   chunk = ptr & MASK_2M;
   page_num = (ptr & (~MASK_2M)) >> OFFSET_4K;
   bin = page2bin(chunk, page);
   push(chunk->heap->free_slots[bin], ptr);
   efree(ptr);
   ```

2. **Key Concepts:**
   - **CHUNK:** A block of memory.
   - **DESCRIPTOR:** Metadata for a chunk.
   - **FREE_SLOTS:** List of free chunks in the heap.
   - **PAGE_INFO:** Information about the memory page.

3. **Allocator Takeaways:**
   - **Allocation Predictability:** The allocator's behavior can be predicted.
   - **Impossible to Free Arbitrary Memory:** Bit operations and page descriptor lookups prevent this.
   - **Abuse Free List Pointer:** Can lead to arbitrary write vulnerabilities.
   - **Explanation in Slides:** Further details will be provided later.

#### Exploitation Stages
1. **Leak:**
   - **Abuse the Allocator:** Based on @i0n1câ€™s method.
   - **Serialize Freed Object:** Override the allocator to read more freed data.
   - **Theory:**
     - **Free List:** The first `sizeof(void*)` points to the next slot.
     - **Read Freed Object:** Use the pointer to the next slot to read previous freed objects.

2. **DateInterval Example:**
   - **Heap Address Leak:**
     - Allocate a `DateInterval`.
     - Allocate an object to leak (e.g., a string).
     - Free both objects.
     - The allocator points the `DateInterval` to the string.
     - Overwrite the string with pointers.
     - Serialize the data.

3. **Read Memory:**
   - **Control a zval:** Forge a `DateInterval`.
   - **No Control:** Free a `DatePeriod` object and use serialization to point to `strcpy`.

4. **Write Memory:**
   - **Free Strings:** Unserialize a hash table (array) with duplicate keys.
   - **Example:**
     ```php
     a:2:{s:4:"AAAA";i:0;s:4:"AAAA";i:0;}
     ```
   - **Abuse Free List:**
     - Increment/Decrement to point to a free slot.
     - Allocate memory to control an arbitrary pointer.

5. **Abuse Possible:**
   - **Slot Next:** First field.
   - **Refcount:** First field.
   - **Example:** `_zend_object`.
   - **UAF (Use After Free):** Add/Dec refcount to actually increment/decrement the next field.

#### Code Execution
- **Forge a zval:** Override a callback.
- **If Not:** Use a write primitive.

#### Exploit Takeaways
- **Use the Allocator:** Leverage its predictability.
- **Re-usable Primitives:** Build primitives that can be used in multiple contexts.
- **Primitives to Remote Exploit:** Convert local primitives into remote exploits.

#### Conclusions
- **High Level > Low Level:** High-level abstractions can introduce new vulnerabilities.
- **New Design, New Vulnerabilities:** Changes in design can lead to new security issues.
- **Exploiter-Friendly Allocator:** The allocator's design can be exploited.
- **Unserialize:** Can lead to unauthorized RCE (Remote Code Execution).

#### More Information
- **Blog:** [Checkpoint Blog](http://blog.checkpoint.com)
- **Bugs:** [PHP Bugs](http://bugs.php.net)
- **Nikita Popov's Blog:** [nikic.github.io](https://nikic.github.io)
- **Contact:**
  - **Email:** PI:EMAIL
  - **Twitter:** [@yannayli](https://twitter.com/yannayli)
  - **Other:** yannayl@*

**Questions?**