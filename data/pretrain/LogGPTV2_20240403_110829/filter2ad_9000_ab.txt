WAF允许onload事件，然后使用setTimeout()，将窗口名称传递给它并执行，然后。后来，我们发现，你可以[简化bypass](https://tinyurl.com/y6rqccky)如下。
    ">
我们还对更多的突变进行了摸索，发现以下例子也发生了突变。
    ">
    ">
    ">
进一步的实验发现了其他的mXSS行为。通常情况下，模板标签内的标签不会被渲染。然而，事实证明，VueJS删除了标签，同时留下了里面的标签。剩下的标签就会被渲染。
输入：
在开发工具控制台输入这个。
    document.body.innerHTML+=''
输出：
由于VueJS正在删除标签，我们想知道是否可以利用这个标签来引起突变。我们将标签放置在另一个标签中，并[惊讶地看到这种突变](https://tinyurl.com/yyyl4nbb)。
输入：
    /xmp>iframe>
在开发工具控制台输入这个。
    document.body.innerHTML+=''
输出：
我们还发现，也会随着DOM的操作而变异。
在开发工具控制台输入这个。
    document.body.innerHTML+=''
这一点甚至适用于XMP。  
输入：
在开发工具控制台输入这个。
    document.body.innerHTML+=''
我们最终发现，这些突变也可以通过、和元素实现。这很有趣，但我们真正需要的是一种通过VueJS来实现突变的方法，而不需要任何手动的DOM操作。在我们寻找突变的过程中，我们意识到VueJS会使HTML发生突变。我们想出了一个简单的测试来证明这一点。通常情况下，如果你把一个标签放在另一个标签中，只有第一个标签会被渲染，因为没有为第二个标签找到收尾>。另一方面，VueJS实际上会[为你突变并删除第一个标签](https://tinyurl.com/y2t6dcfr)。
输入：
    >
输出：
    >
接下来，我们需要创建一个矢量，在变异后变得危险之前，绕过HTML过滤器。经过许多小时的尝试，我们发现，如果你使用多个SVG标签，会导致DOM被VueJS修改。这就造成了突变，[把反射的XSS变成了mXSS](https://tinyurl.com/y5necds9)。  
输入：
输出：
最后，这里有另一个突变并[绕过Cloudflare WAF的PoC](https://tinyurl.com/y6mon9pr)。  
输入：
输出：
### 突变和CSP
我们注意到，当CSP被启用时，突变并没有工作，这是因为它们包含了正常的DOM事件处理程序，而它们被CSP阻止了。这是因为它们包含了正常的DOM事件处理程序，它们被CSP阻止了。但是我们有一个想法
--如果我们在突变的HTML中注入VueJS的特殊事件会怎样？这将由VueJS渲染，执行我们的代码和自定义事件处理程序，从而绕过CSP。我们不确定突变后的DOM是否会执行这些处理程序，但是，令我们高兴的是，它确实执行了。
首先，我们将突变向量注入图像，并使用VueJS
@error事件处理程序。当DOM被突变时，图像会和@error处理程序一起呈现。然后，我们使用特殊的$event对象来获取对window的引用，并执行我们的alert()。
输入。
输出：
突变后的DOM不会显示@error事件，但它仍然会执行。你可以在下面的例子中看到这一点。
[启用CSP的mXSS](https://u.nu/sb2ii)
本节中的突变向量也将在第3版中工作。
[POC](https://u.nu/zfyks)
## 改编VueJS 3的payload。
当我们正在进行这项研究时，VueJS
3发布了，并且破坏了许多我们发现的向量。我们决定快速查看一下，看看是否能让它们重新工作。在第3版中，很多代码都发生了变化，例如，Function构造函数被移到了13035行，并且删除了VueJS函数的缩短版，例如_b，
。
在13055行添加断点，我们检查了代码变量的内容。看来VueJS的函数与第2版类似，只是函数名更啰嗦了。我们只需要用较长的形式来替换函数的简写。
    { {_openBlock.constructor('alert(1)')()} }
在执行表达式的范围内有几个不同的函数。
    { {_createBlock.constructor('alert(1)')()} }
    { {_toDisplayString.constructor('alert(1)')()} }
    { {_createVNode.constructor('alert(1)')()} }
本篇文章中的大部分向量都可以在v3上工作，只需使用更多的函数。
在某些情况下，有效载荷无法执行，例如，当使用以下向量时。
这失败的原因是，VueJS将表达式转换为小写，导致它试图调用不存在的_objectblockfunction...。为了解决这个问题，我们在scope中使用了_capitalize函数。
事件还暴露了不同的功能。除了我们前面讨论的$event对象，还有_withCtx和_resolveComponent。后者有点太长，但_withCtx很好，很短。
    click
使用$event也是一个方便的快捷方式。
    click
### 代码高尔夫V3
我们的向量现在可以在v3中工作，但它们仍然相当长。我们寻找更短的函数名，并注意到有一个叫做_Vue的变量，它在当前的范围内。我们将这个变量传递给Function构造函数，并使用console.log()来检查对象的内容。
{ {_createBlock.constructor('x','console.log(x)')(_Vue)} }。
这看起来只是一个对Vue全局的引用，正如我们所期望的那样，但这个对象有一个叫做h的函数，这是一个很好的、简短的函数名，我们可以用它来将向量还原成。
    { {_Vue.h.constructor`alert(1)`()} }
当我们试图找到进一步减少这种情况的方法时，我们从一个基础向量开始，注入了一个Function构造函数调用。但这一次，我们不只是调用alert()，而是将我们想要检查的对象传递给我们的函数，并使用console.log()来检查对象/代理的内容。代理是一个特殊的JavaScript对象，它允许我们拦截对被代理对象的操作。如get/set操作或函数调用。Vue使用代理，所以可以为表达式提供函数/属性，在当前范围内使用。我们使用的表达式如下。
    { {_Vue.h.constructor('x','console.log(x)')(this)} }
这将在控制台窗口中输出一个对象。如果你检查代理的[[目标]]属性，你将能够看到你可以使用的潜在函数。使用这种方法，我们确定了函数$nextTick,
$watch, $forceUpdate和$emit。使用这些函数中最短的一个，我们能够产生以下向量。
    { {$emit.constructor`alert(1)`()} }
你已经看到了我们VueJS v2的最短向量。
这样做是行不通的，因为VueJS v3试图解析一个叫做x的组件，而这个组件因为是本地的，所以不存在。下面的代码是render()函数的一部分。
    return function render(_ctx, _cache) {
      with (_ctx) {
        ...
        const _component_x = _resolveComponent("x")
        ...