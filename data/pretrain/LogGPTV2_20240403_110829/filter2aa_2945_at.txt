the class by using the partial keyword in each file. For example, if the
Circle class is split between two files called circ1.cs (containing the
constructors) and circ2.cs (containing the methods and fields), the
contents of circ1.cs look like this:
Click here to view code image
partial class Circle
{
    public Circle() // default constructor
    {
        this.radius = 0;
    }
    public Circle(int initialRadius) // overloaded constructor
    {
        this.radius = initialRadius; }
    }
}
The contents of circ2.cs look like this:
Click here to view code image
partial class Circle
{
    private int radius;
    public double Area()
    {
        return Math.PI * this.radius * this.radius;
    }
}
When you compile a class that has been split into separate files, you
must provide all the files to the compiler.
In the following exercise, you will declare a class that models a point in
two-dimensional space. The class will contain two private fields for holding
the x- and y-coordinates of a point and will provide constructors for
Download from finelybook PI:EMAIL
273
initializing these fields. You will create instances of the class by using the
new keyword and calling the constructors.
Write constructors and create objects
1. Start Visual Studio 2017 if it is not already running.
2. Open the Classes solution, which is located in the \Microsoft
Press\VCSBS\Chapter 7\Classes folder in your Documents folder.
3. In Solution Explorer, double-click the file Program.cs to display it in the
Code and Text Editor window.
4. In the Program class, locate the Main method.
The Main method calls the doWork method, which is wrapped in a try
block and followed by a catch handler. With this try/catch block, you
can write the code that would typically go inside Main in the doWork
method instead, and be safe in the knowledge that it will catch and
handle any exceptions. The doWork method currently contains nothing
but a // TODO: comment.
Tip Devlopers frequently add TODO comments as a reminder that
they have left a piece of code to revisit. These comments often
have a description of the work to be performed, such as // TODO:
Implement the doWork method. Visual Studio recognizes this form
of comment, and you can quickly locate them anywhere in an
application by using the Task List window. To display this
window, on the View menu, click Task List. The Task List
window opens below the Code and Text Editor window by default.
All the TODO comments will be listed. You can then double-click
any of these comments to go directly to the corresponding code,
which will be displayed in the Code and Text Editor window.
Download from finelybook PI:EMAIL
274
5. Display the file Point.cs in the Code and Text Editor window.
This file defines a class called Point, which you will use to represent the
location of a point in two-dimensional space, defined by a pair of x- and
y-coordinates. The Point class is currently empty apart from another //
TODO: comment.
6. Return to the Program.cs file. In the Program class, edit the body of the
doWork method, and replace the // TODO: comment with the following
statement:
Point origin = new Point();
This statement creates a new instance of the Point class and invokes its
default constructor.
7. On the Build menu, click Build Solution.
Download from finelybook PI:EMAIL
275
The code builds without error because the compiler automatically
generates the code for a default constructor for the Point class. However,
you cannot see the C# code for this constructor because the compiler
does not generate any source language statements.
8. Return to the Point class in the file Point.cs. Replace the // TODO:
comment with a public constructor that accepts two int arguments,
called x and y, and that calls the Console.WriteLine method to display
the values of these arguments to the console, as shown in bold type in
the following code example:
Click here to view code image
class Point
{
    public Point(int x, int y)
    {
        Console.WriteLine($"x:, y:");
    }
}
9. On the Build menu, click Build Solution.
The compiler now reports an error:
Click here to view code image
There is no argument that corresponds to the required formal
parameter 'x' of
'Point.Point(int, int)'
What this rather verbose message means is that the call to the default
constructor in the doWork method is now invalid because there is no
longer a default constructor. You have written your own constructor for
the Point class, so the compiler does not generate the default
constructor. You will now fix this by writing your own default
constructor.
10. Edit the Point class by adding a public default constructor that calls
Console.WriteLine to write the string “Default constructor called” to the
console, as shown in bold type in the example that follows. The Point
class should now look like this:
Click here to view code image
class Point
Download from finelybook PI:EMAIL
276
{
    public Point()
    {
        Console.WriteLine("Default constructor called");
    }
    public Point(int x, int y)
    {
        Console.WriteLine($"x:, y:");
    }
}
11. On the Build menu, click Build Solution.
The program should now build successfully.
12. In the Program.cs file, edit the body of the doWork method. Declare a
variable called bottomRight of type Point, and initialize it to a new Point
object by using the constructor with two arguments, as shown in bold
type in the code that follows. Supply the values 1366 and 768,
representing the coordinates at the lower-right corner of the screen based
on the resolution 1366 × 768 (a common resolution for many tablet
devices). The doWork method should now look like this:
Click here to view code image
static void doWork()
{
    Point origin = new Point();
    Point bottomRight = new Point(1366, 768);
}
13. On the Debug menu, click Start Without Debugging.
The program builds and runs, displaying the following messages to the
console:
14. Press the Enter key to end the program and return to Visual Studio 2017.
Download from finelybook PI:EMAIL
277
You will now add two int fields to the Point class to represent the x- and
y-coordinates of a point, and you will modify the constructors to
initialize these fields.
15. Edit the Point class in the Point.cs file and add two private fields, called
x and y, of type int, as shown in bold type in the code that follows. The
Point class should now look like this:
Click here to view code image
class Point
{
    private int x, y;
    public Point()
    {
        Console.WriteLine( "default constructor called ");
    }
    public Point(int x, int y)
    {
        Console.WriteLine($"x:, y:");
    }
}
You will modify the second Point constructor to initialize the x and y
fields to the values of the x and y parameters. However, there is a
potential trap when you do this. If you are not careful, the constructor
could look like this:
Click here to view code image
public Point(int x, int y) // Don't type this!
{
    x = x;
    y = y;
}
Although this code will compile, these statements appear to be
ambiguous. How does the compiler know in the statement x = x; that the
first x is the field and the second x is the parameter? The answer is that it
doesn’t! A method parameter with the same name as a field hides the
field for all statements in the method. All this code actually does is
assign the parameters to themselves; it does not modify the fields at all.
This is clearly not what you want.
Download from finelybook PI:EMAIL
278
The solution is to use the this keyword to qualify which variables are
parameters and which are fields. Prefixing a variable with this means
“the field in this object.”
16. Modify the Point constructor that takes two parameters by replacing the
Console.WriteLine statement with the following code shown in bold
type:
Click here to view code image
public Point(int x, int y)
{
    this.x = x;
    this.y = y;
}
17. Edit the default Point constructor to initialize the x and y fields to -1, as
follows in bold type. Note that although there are no parameters to cause
confusion (and Visual Studio will pop up a tooltip stating that you don’t
need to use this), it is still good practice to qualify the field references in
this way:
Click here to view code image
public Point()
{
    this.x = -1;
    this.y = -1;
}
18. On the Build menu, click Build Solution. Confirm that the code
compiles without errors or warnings. (You can run it, but it does not
produce any output.)
Methods that belong to a class and that operate on the data belonging to a
particular instance of a class are called instance methods. (You will learn
about other types of methods later in this chapter.) In the following exercise,
you will write an instance method for the Point class, called DistanceTo,
which calculates the distance between two points.
Write and call instance methods
1. In the Classes project in Visual Studio 2017, add the following public
instance method called DistanceTo to the Point class after the
Download from finelybook PI:EMAIL
279
constructors. The method accepts a single Point argument called other
and returns a double.
The DistanceTo method should look like this:
Click here to view code image
class Point
{
    ...
    public double DistanceTo(Point other)
    {
    }
}
In the following steps, you will add code to the body of the DistanceTo
instance method to calculate and return the distance between the Point
object being used to make the call and the Point object passed as a
parameter. To do this, you must calculate the difference between the x-
coordinates and the y-coordinates.
2. In the DistanceTo method, declare a local int variable called xDiff and
initialize it with the difference between this.x and other.x, as shown
below in bold type:
Click here to view code image
public double DistanceTo(Point other)
{
    int xDiff = this.x - other.x;
}
3. Declare another local int variable called yDiff and initialize it with the
difference between this.y and other.y, as shown here in bold type:
Click here to view code image
public double DistanceTo(Point other)
{
    int xDiff = this.x - other.x;
    int yDiff = this.y - other.y;
}
Download from finelybook PI:EMAIL
280
Note Although the x and y fields are private, other instances of the
same class can still access them. It is important to understand that
the term private operates at the class level and not at the object
level; two objects that are instances of the same class can access
each other’s private data, but objects that are instances of another
class cannot.
To calculate the distance, you can use Pythagoras’ theorem and calculate
the square root of the sum of the square of xDiff and the square of yDiff.
The System.Math class provides the Sqrt method that you can use to
calculate square roots.
4. Declare a variable called distance of type double and use it to hold the
result of the calculation just described:
Click here to view code image
public double DistanceTo(Point other)
{
    int xDiff = this.x - other.x;
    int yDiff = this.y - other.y;
    double distance = Math.Sqrt((xDiff * xDiff) + (yDiff *
yDiff));
}
5. Add a return statement to the end of the DistanceTo method and return
the value in the distance variable:
Click here to view code image
public double DistanceTo(Point other)
{
    int xDiff = this.x - other.x;
    int yDiff = this.y - other.y;
    double distance = Math.Sqrt((xDiff * xDiff) + (yDiff *
yDiff));
    return distance;
}
You will now test the DistanceTo method.
6. Return to the doWork method in the Program class. After the statements
that declare and initialize the origin and bottomRight Point variables,
declare a variable called distance of type double. Initialize this double
Download from finelybook PI:EMAIL
281
variable with the result obtained when you call the DistanceTo method
on the origin object, passing the bottomRight object to it as an argument.
The doWork method should now look like this:
Click here to view code image
static void doWork()
{
    Point origin = new Point();
    Point bottomRight = new Point(1366, 768);
    double distance = origin.DistanceTo(bottomRight);
}
Note Microsoft IntelliSense should display the DistanceTo method
when you type the period character after origin.
7. Add to the doWork method another statement that writes the value of the
distance variable to the console by using the Console.WriteLine method.
The completed doWork method should look like this:
Click here to view code image
static void doWork()
{
    Point origin = new Point();
    Point bottomRight = new Point(1366, 768);
    double distance = origin.DistanceTo(bottomRight);
    Console.WriteLine($"Distance is: ");
}
8. On the Debug menu, click Start Without Debugging.
9. Confirm that the value 1568.45465347265 is written to the console
window and then press Enter to close the application and return to
Visual Studio 2017.
Deconstructing an object
Download from finelybook PI:EMAIL
282
You use a constructor to create and initialize an object, typically by
populating any fields it contains. A deconstructor enables you to examine an
object and extract the values of its fields. Taking the Point class from the
previous exercise as an example, you can implement a deconstructor that
retrieves the values of the x and y fields like this:
Click here to view code image
class Point
{
    private int x, y;
    ...
    public void Deconstruct(out int x, out int y)
    {
        x = this.x;
        y = this.y;
    }
}
You should note this following points about a deconstructor:
It is always named Deconstruct.
It must be a void method.
It must take one or more parameters. These parameters will be
populated with the values from the fields in the objects.
The parameters are marked with the out modifier. This means that if
you assign values to them, these values will be passed back to the
caller (you will learn more about out parameters in Chapter 8,
“Understanding values and references”).
The code in the body of the method assigns the values to be returned to
the parameters.
You call the deconstructor in a manner similar to that used to call a
method that returns a tuple (described in Chapter 3, “Writing methods and
applying scope”). You simply create a tuple and assign an object to it, like
this:
Click here to view code image
Point origin = new Point();
...
(int xVal, int yVal) = origin;
Download from finelybook PI:EMAIL
283
Behind the scenes, C# runs the deconstructor and passes it the variables
defined in the tuple as the parameters. The code in the deconstructor
populates these variables. Assuming that you have not modified the default
constructor for the Point class, the xVal and yVal variables should both
contain the value -1.
Note Remember that you must add the System.ValueType package to
your application if you want to use tuples. Revisit chapter 3 to remind
yourself how to do this using the NuGet Package Manager.
Besides deconstructors, there are other ways to retrieve the values held by
the fields in an object. Chapter 15, “Implementing properties to access fields”
describes another very common strategy.
Understanding static methods and data
In the preceding exercise, you used the Sqrt method of the Math class.
Similarly, when looking at the Circle class, you read the PI field of the Math
class. If you think about it, the way in which you called the Sqrt method or
read the PI field was slightly odd. You invoked the method or read the field
on the class itself, not on an object of type Math. It is like trying to write
Point.DistanceTo rather than origin.DistanceTo in the code you added in the
preceding exercise. So what’s happening, and how does this work?
You will often find that not all methods naturally belong to an instance of
a class; they are utility methods since they provide a useful function that is
independent of any specific class instance. The WriteLine method of the
Console class that has been used extensively throughout this book is a
common example. The Sqrt method is another example. If Sqrt were an
instance method of Math, you’d have to create a Math object on which to call
Sqrt:
Click here to view code image
Download from finelybook PI:EMAIL
284
Math m = new Math();
double d = m.Sqrt(42.24);
This would be cumbersome. The Math object would play no part in the
calculation of the square root. All the input data that Sqrt needs is provided in
the parameter list, and the result is passed back to the caller by using the
method’s return value. Objects are not really needed here, so forcing Sqrt into
an instance straitjacket is just not a good idea.
Note As well as containing the Sqrt method and the PI field, the Math
class contains many other mathematical utility methods, such as Sin,
Cos, Tan, and Log.
In C#, all methods must be declared within a class. However, if you
declare a method or a field as static, you can call the method or access the
field by using the name of the class. No instance is required. This is how the
Sqrt method of the Math class is declared:
Click here to view code image
class Math
{
    public static double Sqrt(double d)
    {
        ...
    }
    ...
}
You can invoke the Sqrt method like this:
double d = Math.Sqrt(42.24);
A static method does not depend on an instance of the class, and it cannot
access any instance fields or instance methods defined in the class; it can use
only fields and other methods that are marked as static.
Creating a shared field
Download from finelybook PI:EMAIL
285
Defining a field as static makes it possible for you to create a single instance
of a field that is shared among all objects created from a single class.
(Nonstatic fields are local to each instance of an object.) In the following
example, the static field NumCircles in the Circle class is incremented by the
Circle constructor every time a new Circle object is created:
Click here to view code image
class Circle
{
    private int radius;
    public static int NumCircles = 0;
    public Circle() // default constructor
    {