3.2.1 红队网站应用程序攻击
本书的前两个版本着重于介绍如何有效地测试网站应用程序，这个版本则有所不同。我们将跳过许多基本的攻击方式，重点介绍现实世界中使用的攻击方式。
由于这是一本实战性很强的书，因此我们不会详细介绍网站应用程序测试的所有细节。但是，这并不意味着所有细节都会被忽略。有一个很好的Web 应用程序测试信息的资源是 Open Web Application Security Project（OWASP）。OWASP主要是在应用程序安全性方面引导和教育用户。每隔几年，OWASP会编制一份常见问题清单并将其发布给公众。由于许多读者都试图进入安全领域，因此我想提醒大家的是，如果您想从事渗透测试工作，那么至少必须知道OWASP安全威胁的前十名。您不仅应该知道前十大漏洞是什么，还应能够根据风险的类型举出每个漏洞的例子，并且知道如何发现这些漏洞。现在，让我们来模拟演示如何突破网络空间猫公司。
3.2.2 聊天支持系统实验
将受到攻击的聊天支持系统实验构建为交互式，特点是包括新旧漏洞。正如您看到的，在下面的实验中，我们提供了一个具有聊天支持系统的定制版本的虚拟机。
应用程序本身是用Node.js编写的。为何选择Node？作为渗透测试人员，Node是发展速度较快的应用程序之一。由于许多开发人员似乎非常喜欢Node，因此我觉得了解后端代码JavaScript运行时存在的安全隐患非常重要。
什么是Node
Node.js是一个基于Chrome的V8 JavaScript引擎，实时运行JavaScript代码。由于Node.js是事件驱动的非阻塞I/O模型，因此具有小巧和高效的特点。Node.js的包生态系统NPM是一个开源库生态系统。
Node.js的基本功能是允许您在浏览器之外运行JavaScript。由于Node.js具有精简、快速和跨平台的特点，因此它可以通过统一堆栈简化项目。虽然Node.js不是网站服务器，但它可以在服务器（您可以用JavaScript编程）环境运行，而不只是网站客户端。
其优点包括以下几点。
非常快。
单线程JavaScript环境，可以充当独立的Web应用程序服务器。
Node.js不是协议，它是一个用JavaScript编写的Web服务器。
NPM目前有近50万个免费的、可重用的Node.js代码包。
随着Node.js在过去几年变得越来越受欢迎，对于渗透测试人员/红队来说，了解要查找的内容以及如何攻击这些应用程序变得非常重要。例如，一位研究人员发现，弱NPM凭证使得他能够编辑/发布13%的NPM包。通过依赖链，大约有52%的NPM包容易受到攻击。
在以下示例中，我们的实验将使用Node.js语言作为应用程序开发的基础，使用Express框架作为Web服务器。然后，我们将Pug模板引擎添加到Express框架中，如图3.3所示。这类似于新开发Node.js应用程序使用的模式。
图3.3
Express是采用Node.js语言的小型化网站框架。Express为网站和移动应用程序提供了一组强大的功能，您无须做很多事情。使用名为Middlewares的模块可以添加第三方认证或服务，例如Facebook认证或者Stripe支付处理服务。
Pug 的正式名称为Jade，是一种服务器端模板引擎，您可以（但不必）与Express一起使用。Jade在服务器上自动生成HTML并将其发送到客户端。
我们开始模拟攻击聊天支持系统，首先启动聊天支持系统虚拟机。
3.3 网络空间猫公司：聊天支持系统
假如您偶然发现了网络空间猫聊天支持系统对外开放。当您慢慢浏览所有页面时，可以了解底层系统，并在应用程序中查找弱点。您需要在服务器中找到第一个入口，从而进入生产环境。
您首先浏览所有漏洞扫描程序和网站应用程序产生的扫描程序报告，但是毫无收获。看来这家公司定期运行常用的漏洞扫描程序并修补了大部分问题。系统突破现在依赖于编码问题、错误配置和逻辑缺陷。您还注意到此应用程序正在运行Node.js，这是一种目前非常流行的语言。
3.3.1 搭建您的网站应用程序攻击主机
虽然针对网站应用程序，红队没有完整的工具清单，但您需要配备的一些基本工具包括以下几种。
配备多个浏览器。许多浏览器的响应方式、行为都不同，尤其是在复杂的XSS规避方面。 
Firefox（我常用的测试浏览器）
Chrome
Safari
Wappalyzer：一种跨平台的实用程序，可以发现网站应用的技术。它可以检测内容管理系统、电子商务平台、网站框架、服务器软件和分析工具等。
BuiltWith：网站分析器工具。在查找页面时，BuiltWith会返回它在页面上可以找到的所有技术。BuiltWith的目标是帮助开发人员、研究人员和设计人员找出页面正在使用的技术，这可以帮助他们决定自己要采用什么技术。
Retire.js：扫描Web应用程序，发现易受攻击的JavaScript库。Retire.js的目标是帮助您检测已知漏洞的版本。
Burp Suite：虽然这个商业工具有点贵，但对于渗透测试者/红队来说绝对物有所值。它的主要优点是附加组件、模块化设计和用户开发基础。如果您觉得Burp价格太高，那么OWASP ZAP（免费）也许是一个很好的替代品。
3.3.2 分析网站应用程序
在进行任何类型的扫描之前，尝试理解底层代码和基础结构非常重要。我们怎样才能知道后端运行的是什么程序？我们可以使用Wappalyzer、BuiltWith或者Google Chrome浏览器。在图3.4中，当加载聊天应用程序时，我们可以看到HTTP头中包括X-Powered By：Express。使用Wappalyzer，我们还可以发现应用程序正在使用Express和Node.js。
图3.4
在盲目攻击网站之前，了解应用程序可以帮助您找到更好的方法。对于那些可能配备网站应用程序防火墙的目标站点，了解应用程序同样会帮助您隐蔽更多的攻击行为。
3.3.3 网络发现
在本书前两版中，我们详细介绍了如何使用Burp Suite以及如何对站点进行渗透测试。我们将跳过很多设置的基础知识，并更多地关注攻击网站。
在这一点上，我们假设您已经设置了Burp Suite（免费版或付费版），并且您使用的是本书的 Kali虚拟机镜像。一旦掌握了网站的底层系统，就需要识别所有端点。我们仍然需要运行之前使用的检测工具。
（1）Burp Suite。
Spidering：无论是免费版还是付费版，Burp Suite都有一个很棒的爬虫工具。
内容发现：如果您使用的是付费版本的Burp Suite，则Engagement是一个较受欢迎的发现工具。这是一个智能高效的探测工具，可以查找目录和文件，而且可以指定多个不同的扫描配置。
主动扫描：对所有参数进行自动漏洞扫描，并测试多个网站漏洞。
（2）OWASP ZAP。
类似于Burp，但是完全开源并且免费。具有类似的发现和主动扫描功能。
（3）Dirbuster。
一个永久存在的工具，用于发现Web应用程序的文件/文件夹，效果不错。
目标网址：http://chat:3000。
字典。 
/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt
（4）GoBuster。
非常轻量级、快速的目录和子域名“爆破”工具。
gobuster -u http://chat:3000 -w/opt/SecLists/Discovery/Web-Content/raft-small- directories.txt -s 200,301,307 -t 20。
字典非常重要。我喜欢使用的是一个名为raft的旧字典，它来自于多个开源项目。
现在简要介绍一下攻击的整个过程。从红队的角度来看，我们要查找可以主动攻击的漏洞，并提供最大的帮助。如果进行审计或者渗透测试，那么我们可能会报告漏洞扫描程序中发现的SSL漏洞、默认Apache页面或不可利用的漏洞。但是对于红队来说，我们可以完全忽略这些，专注于获得高权限、Shell或个人身份信息。
3.3.4 跨站脚本（XSS）
查看并测试跨站脚本（XSS）漏洞。使用传统的XSS攻击方法，测试网站上的每个变量，这对于漏洞悬赏项目非常有帮助，但我们还可以做什么？我们可以使用哪些工具和方法更好地完成这些攻击？
因为我们都知道XSS攻击是客户端攻击，允许攻击者定制网站请求，将恶意代码注入响应数据包中。这个问题通常可以通过客户端和服务器端的正确输入验证进行修复，但是实际上并不是那么容易。为什么？这是由多种原因造成的，例如，编码质量不高、框架不熟悉，应用程序过于复杂，导致很难了解输入的位置。
因为警报弹出框确实没有真正的危害，所以让我们开始一些基本类型的XSS攻击。
Cookie窃取XSS。
强制下载文件。
重定向用户。
其他脚本启用键盘记录器和拍摄照片等。
XSS静荷混淆/多语言
目前，标准的XSS静荷仍然可以正常运行，但我们确实会发现应用程序阻止某些字符，或者在应用程序前面有网站应用防火墙。
在评估期间，您有时候可能会遇到简单的XSS过滤器，它们会查找之类的字符串。混淆XSS静荷是一种选择，但是同样需要注意的是，并非所有JavaScript静荷都需要打开和关闭标记。有一些HTML事件属性在触发时执行JavaScript，这意味着任何只针对Script标签的规则毫无用处。例如，执行JavaScript的这些HTML事件属性位于标记之外。
Click Me!。
。
。
。
您可以通过访问应用程序（记得修改/etc/host文件，指向虚拟机应用程序），尝试针对聊天支持系统应用程序中的每个HTML实体实施攻击。访问聊天支持系统后，注册一个账户，登录该应用程序，然后访问聊天功能。您可以尝试不同的实体攻击和混淆的静荷，如图3.5所示。
图3.5
其他XSS资源如下。
第一个是由@jackmasa制作的思维导图，如图3.6所示。这是一个很棒的文档，它根据输入的位置分解不同的XSS静荷。
图3.6 JackMasa跨站脚本思维导图
另一个资源介绍了各种浏览器容易受到哪些XSS静荷的攻击：HTML5 Security Cheatsheet。
正如您所看到的，尝试在应用程序中查找各种XSS漏洞很烦琐，这是因为静荷的参数受代码功能、不同类型的HTML标记、应用程序类型和不同类型的过滤机制影响。尝试找到最初的XSS弹出窗口可能需要很长的时间。如果我们尝试将多个静荷放到单个请求中，会怎么样呢？
这种类型的静荷称为多语言静荷（Polyglot）。Polyglot静荷采用多种不同类型的静荷/混淆技术，并将它们编译成一个静荷。这种静荷对于采用自动脚本查找XSS，有限时间的漏洞悬赏项目或者仅仅快速查找输入验证问题非常有帮助。
因此，我们可以不使用常规的，而是构建下面的多语言静荷。
/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert())//%0D%0A%0d%0a//\x3csVg/\x3e。
如果您查看上面的静荷，那么这个静荷尝试采用注释、点和斜线规避检测；执行onclick XSS；关闭多个标签；最后尝试onload XSS攻击方法。集成这些类型的攻击方法使Polyglots在识别XSS方面非常高效。
如果您想测试和使用不同种类的多语言静荷，那么可以从易受攻击的XSS页面或聊天应用程序开始。
3.3.5 BeEF
浏览器漏洞利用框架（BeEF）将XSS攻击提升到新的层面。这个工具将JavaScript静荷注入被攻击者的浏览器，感染用户的系统。这会在被攻击者的浏览器上创建一个命令和控制通道，以便JavaScript后期利用。
从红队的角度来看，BeEF是一个很好的工具，可用于各类攻击行动中，包括跟踪用户、捕获凭据、执行单击劫持和钓鱼攻击。即使不用在攻击场景，BeEF也是一个很好的工具，可以展示XSS漏洞的巨大危害。BeEF对于更复杂的攻击也有帮助，我们将在后面的盲XSS攻击中进行讨论。
BeEF 分为两部分：一部分是服务器，另一部分是攻击静荷。启动服务器的步骤如下。
在您的攻击Kali主机上启动BeEF。
终端。 
BeEF-xss
BeEF鉴权beef:beef。
查看http://127.0.0.1:3000/hook.js。
完整静荷钩子文件如下。 
查看位于http://127.0.0.1:3000/hook.js上的hook.js文件，您将看到很长的、像是JavaScript的混淆代码。这是被攻击者客户端静荷，用于回连命令和控制服务器。
一旦在目标应用程序上找到XSS漏洞，不要使用原始的alert(1)样式静荷，您可以修改静荷来利用此漏洞。一旦被攻击者执行这个静荷，其浏览器将成为“僵尸”网络的一部分。
BeEF支持哪些类型的后期攻击？一旦被攻击者在您的控制之下，您就可以做任何JavaScript可以做的事情。您可以通过HTLM5打开相机并拍摄被攻击者的照片，可以在屏幕上叠加图片以捕获凭据，也可以将其重定向到恶意网站以执行恶意软件。
以下是BeEF基于XSS漏洞、开展攻击的过程展示。
首先，确保BeEF服务器运行在攻击者计算机上。在聊天支持系统的应用程序（存在漏洞）中，您可以访问http://chat:3000/xss并在练习2中输入您的静荷。