User rank
(1) m = 10
e
c
n
e
g
r
e
v
d
S
J
i
 6
 5
 4
 3
 2
 1
 0
-1
[Mean-std dev, mean+std dev]
Mean
 0  20  40  60  80  100 120 140 160 180
User rank
(2) m = 20
Fig. 10. JS-divergence for all recipients (θ = 200)
Table 2. Fraction of users with COV > 1 regarding similarity measures for all recipients
m
θ = 100
θ = 200
Recipient
similarity divergence similarity divergence
Recipient
JS
JS
10
20
4.5%
12.8%
4.3%
5.1%
0.6%
6.0%
1.2%
1.2%
some others1 they send short messages to a very diverse set of recipients. Given
this fact, we thus cannot conclude that SMS users always tend to send short
messages to the same set of users over time, which, if true, would be useful for
anomaly detection. We further analyze the variation of the recipient similarity
metric set for each SMS user and the results are given in Table 2. Interestingly,
this measure exhibits low variation for the majority of the SMS users, implying
that the recipients to whom most SMS users send short messages vary in a very
similar fashion over time.
1 These users typically send bulk messages for advertisement purposes.
212
G. Yan, S. Eidenbenz, and E. Galli
Previously we have used the entropy to measure the uncertainty of the distri-
bution of the number of short messages sent to each recipient. A natural question
extended from that is how similar these distributions are across diﬀerent mes-
sages blocks. A metric commonly used for this is relative entropy, also called
Kullback-Leibler (KL) divergence [3], which is deﬁned as follows:
DKL(P(cid:5)Q) =
(2)
(cid:3)
i
P (i) log
P (i)
,
Q(i)
1
2
where P and Q are two distributional functions.
Note that DKL(P(cid:5)Q) is undeﬁned if the support2 of P is not a subset of the
support of Q. Hence, directly applying the relative entropy here is problematic
because an SMS user may have diﬀerent sets of recipients in two message blocks.
Moreover, relative entropy is not symmetric, i.e., DKL(P(cid:5)Q) may not equal
DKL(Q(cid:5)P ). Due to these constraints, we instead use the Jensen-Shannon (JS)
divergence [10], whose computation relies on the KL-divergence:
[DKL(P(cid:5) ˜AP,Q) + DKL(Q(cid:5) ˜AP,Q)],
(3)
where function ˜AP,Q denotes the average distribution: ˜AP,Q(x) = (P (x)+Q(x))/2.
Obviously, DJS(P(cid:5)Q) is always deﬁned and also symmetric.
DJS(P(cid:5)Q) =
Figure 10 shows the JS-divergences when θ = 200. We observe that the JS-
divergence also varies signiﬁcantly among diﬀerent SMS users. It is clear that
the JS-divergence has low variation for the majority of the SMS users, which is
conﬁrmed by Table 2: for all four combinations of θ and m, less than 6% percent
of the SMS users have a JS-divergence COV greater than 1.
Next, we show how the top ﬁve recipients receiving the most messages cor-
relate with each other between diﬀerent blocks. Figure 11 depicts the recipi-
ent similarity metrics for the top 5 recipients with θ = 200. Still, this metric
varies signiﬁcantly among diﬀerent SMS users. The fractions of SMS users with
COV > 1 are shown in Table 3. Clearly, these fractions are higher than their
counterparts where all recipients are considered, but are still relatively small.
Similarly, we study the JS-divergence of the distributions of the numbers
of messages sent to the top ﬁve recipients among diﬀerent blocks. Here, we
normalize the probability that each of those top ﬁve recipients receives a message
by dividing it by the probability that any of those top ﬁve recipients receives
Table 3. Fraction of users with COV > 1 for top-5 recipients (similarity measure)
m
θ = 100
θ = 200
Recipient
similarity divergence similarity divergence
Recipient
JS
JS
10
20
8.2%
14.4%
7.9%
13.6%
6.6%
9.6%
5.4%
12.6%
2 The support of a function is the set of points where the function is not zero.
SMS-Watchdog: Proﬁling Social Behaviors of SMS Users
213
r
o
f
c
i
r
t
e
m
y
t
i
r
a
l
i
i
m
s
t
n
e
p
c
e
R
i
i
i
i
s
t
n
e
p
c
e
r
t
n
e
u
q
e
r
f
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
-0.2
[Mean-std dev, mean+std dev]
Mean
 0  20  40  60  80  100 120 140 160 180
User rank
(1) m = 10
r
o
f
c
i
r
t
e
m
y
t
i
r
a
l
i
i
m
s
t
n
e
p
c
e
R
i
i
i
i
s
t
n
e
p
c
e
r
t
n
e
u
q
e
r
f
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
-0.2
[Mean-std dev, mean+std dev]
Mean
 0  20  40  60  80  100 120 140 160 180
User rank
(2) m = 20
Fig. 11. Recipient similarity metric for top 5 recipients (θ = 200)
r
o
f
e
c
n
e
g
r
e
v
d
S
J
i
s
t
i
i
n
e
p
c
e
r
t
n
e
u
q
e
r
f
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
-0.2
[Mean-std dev, mean+std dev]
Mean
 0  20  40  60  80  100 120 140 160 180
User rank
(1) m = 10
r
o
f
e
c
n
e
g
r
e
v
d
S
J
i
s
t
i
i
n
e
p
c
e
r
t
n
e
u
q
e
r
f
 1.2
 1
 0.8
 0.6
 0.4
 0.2
 0
-0.2
[Mean-std dev, mean+std dev]
Mean
 0  20  40  60  80  100 120 140 160 180
User rank
(2) m = 20
Fig. 12. JS-divergence for top 5 recipients (θ = 200)
a short messages. For instance, if the top ﬁve recipients receive 5, 4, 3, 2, and
1 short messages within a window, the normalized probabilities are 1/3, 4/15,
1/5, 2/15, and 1/15, respectively.
The JS-divergence of the distributions for the top ﬁve recipients is shown in
Figure 12 for θ = 200. We notice that the average JS-divergence is always no
higher than 1 and the fractions of SMS users with COV > 1 exhibit a similar
pattern as the recipient similarity metric: although they are higher than their
counterparts where all recipients are considered, they are still very small.
In summary, diﬀerent SMS users may have diﬀerent levels of similarity across
their message blocks, but the level of similarity across diﬀerent message blocks
of the same SMS user typically does not change signiﬁcantly.
4 SMS-Watchdog Design
In the following, we shall discuss how to exploit the regularities inherent in social
behaviors of SMS users for anomaly detection. Before presenting the detailed al-
gorithms, we ﬁrst discuss two families of SMS-related attacks that are considered
in this work and then present the design of SMS-Watchdog.
214
G. Yan, S. Eidenbenz, and E. Galli
Threat model. Two families of SMS-related attacks are considered here. The
ﬁrst type is called blending attacks, which occur when an SMS user’s account is
used to send messages for a diﬀerent person. In reality, this can happen in three
circumstances. First, a user’s cell phone is implanted with a Trojan horse such
that the cell phone can be remotely controlled to send messages for a diﬀerent
user3. Second, in an SMS spooﬁng attack, a fraudster can manipulate address
information in messages to spoof a legitimate SMS user’s identity in a foreign
network. Third, if an SMS proxy is used (e.g., the one in Figure 1), an attacker
can hack an SMS user’s account at the front end and use it to send messages. All
these attacks are termed as blending attacks because illegitimate messages are
intermingled with legitimate ones from the detector’s perspective. The second
type of attacks, termed as broadcast attacks, mirrors the behavior of mobile
malware that send out phishing or spamming messages to recipients that appear
in normal ones. In such attacks, the mobile device from which these messages
are sent have already been infected by the mobile malware.
Workﬂow of SMS-Watchdog. In our design, the SMS-Watchdog is placed at
the SMSC, as shown in the SMS architecture in Figure 1, which handles all SMS
traﬃc for a speciﬁc cellular network. The workﬂow of SMS-Watchdog involves
three steps:
(1) Monitoring: SMS-Watchdog maintains a detection window of size h for each
SMS user that has subscribed for this service. For the current detection window,
it also keeps a counter k for the number of sent SMS messages observed, and
the sequence of recipients of these SMS messages. When k becomes equal to h,
SMS-Watchdog performs anomaly detection for this user as shown in Step (2).
(2) Anomaly detection: Given the recipients of the last h SMS messages, the
SMS-Watchdog checks whether there exist anomalous behaviors. If so, it raises
an alert and goes to the next step. The detailed algorithms for anomaly detection
will be presented in the next section.
(3) Alert handling: SMS-Watchdog sends an alert to the SMS user through a
diﬀerent communication channel, such as emails. Together with the alert, SMS-
Watchdog also sends to the user a summary of the last h messages, such as
the number of SMS messages per recipient and the whole time frame of these
messages. The information is used to help the user to identify false positives.
The user can ﬁrst check whether the communication record shown on her mobile
device matches with the summary sent by SMS-Watchdog within the given time
frame4. If the two do not match, it means that the user’s SMS account has been
spoofed and she can notify her service provider. Otherwise, the user further
checks the summary to identify suspicious SMS behaviors. A more cautious
user can even request to check the full communication record, regarding the
3 To evade detection, the malware can delete the message from the ”sent” folder after
it is sent out; also, the message can attach a diﬀerent returning number so that the
recipient will not reply the message to the compromised phone.
4 This can be automatically done with a software for the user’s convenience.
SMS-Watchdog: Proﬁling Social Behaviors of SMS Users
215
transmission time of each SMS message. If suspicious SMS behaviors have been
observed, it is likely that the mobile device has been infected by malware and
the user can use some anti-virus software to disinfect her mobile device.
5 Anomaly Detection
In this section, we provide the details on how Blue-Watchdog performs anomaly
detection. The anomaly detection problem is formulated as follows: given an
SMS user’s communication history V = {v1, v2, ..., vn}, where vi(1 ≤ i ≤ n)
denotes the recipient of the i-th short message in V, and a test sequence T =
{t1, t2, ..., th}, where tj (1 ≤ j ≤ h) denotes the recipient of the j-th short mes-
sage in T , is T anomalous?
Decision on detection window size h. We ﬁrst address how to choose h, the
detection window size for a speciﬁc user. As revealed in Section 3, a typical SMS
user’s window-based behaviors bear low variation in the number of unique recip-
ients, entropy, recipient set similarity metric, and also JS-divergence, suggesting
that choosing h based on any of these metrics would be a possible solution.
Compared with the other three metrics, however, the JS-divergence contains the
most information, because its calculation depends on not only the set of recip-
ients, the distribution of the number of short messages sent to each recipient,
but also the distances between these distributions.
A feasible choice for h is minimizing the COV of the JS-divergence after
grouping sequence V by every h short messages, because this can maximize the
level of similarity among diﬀerent blocks. Let cov(X) denote the COV of set X.
We choose h∗ as follows:
h∗
= argmin