\[root@server0 \~\]# awk -F: \'\$3\>10&&\$3\1000 && \$3\1000 \|\| \$3\
\$6\$UiGI4Tc2\$htsXYn5cJnOqv3P1VLcUSgfjDu2pL5yiJBuua6foZAHdwqeuLHfYUfS/vBn27Wjvoel8EJgtdsMjyquqvKAmf1
student \-\--\>
\$6\$8oIjLCsc\$/n1iQXYh1E6.uOEuJKgioqAtmqm2TQmkJGF2RwyteIr1tIfrPdiRYgWe6Sjen5/eMij2uHM/a1tue/QRlo3X80
\-\-\-\-\-\-\-\-\--脚本1\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=\` awk -F: \'/bash\$/{print \$1}\' /etc/passwd\`
for i in \$a
do
p=\`awk -F: \'\$1==\"\'\$i\'\"{print \$2}\' /etc/shadow\`
echo \"\$i \-\--\> \$p\"
Done
\-\-\-\-\-\-\-\-\-\--脚本2\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
a=\` awk -F: \'/bash\$/{print \$1}\' /etc/passwd\`
for i in \$a
do
p=\`grep \"\^\$i\" /etc/shadow \|awk -F: \'{print \$2}\'\`
echo \"\$i \-\--\> \$p\"
done
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
## 4 案例4：awk流程控制
**步骤一：awk过滤中的if分支结构**
if分支结构（单分支、双分支、多分支）
统计/etc/passwd文件中UID小于或等于1000的用户个数：
\[root@server0 \~\]# awk -F: \'{if(\$3\1000){i++}}END{print i}\'
/etc/passwd
16
统计/etc/passwd文件中登录Shell是"/bin/bash"的用户个数：
\[root@server0 \~\]# awk -F: \'{if(\$7\~/bash\$/){i++}}END{print i}\'
/etc/passwd
17
分别统计/etc/passwd文件中UID小于或等于1000、UID大于1000的用户个数：
\[root@server0 \~\]# awk -F: \'{if(\$3\ 本案例要求编写脚本，防止远程ssh暴力破解密码，具体监控项目要求如下：
-   检测ssh登录日志，如果远程登陆账号名错误3次，则屏蔽远程主机的IP
-   检测ssh登录日志，如果远程登陆密码错误3次，则屏蔽远程主机的IP
\-\-\-\-\-\-\-\-\-\--脚本1\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
echo \"用户名输错的记录\"
awk \'/Invalid u/{ip\[\$10\]++}END{for(i in ip){print ip\[i\],i}}\'
/var/log/secure
echo
echo \"密码输错的记录\"
awk \'/Failed p/{ip\[\$11\]++}END{for(i in ip){print ip\[i\],i}}\'
/var/log/secure
\-\-\-\-\-\-\-\-\-\--脚本2\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#!/bin/bash
awk \'/Failed password/{print \$11}\' /var/log/secure \| awk
\'{ip\[\$1\]++}END{for(i in ip){print ip\[i\],i}}\' \| awk
\'\$1\>3{print \$2}\'
awk \'/Invalid user/{print \$10}\' /var/log/secure \| awk
\'{ip\[\$1\]++}END{for(i in ip){print ip\[i\],i}}\' \| awk
\'\$1\>3{print \$2}\'
## 5 案例5：编写进度显示脚本
### 5.1 问题
> 本案例要求编写脚本，实现带进程显示的复制脚本，具体要求如下：
-   默认Linux的cp命令不具有进度显示
-   我们需要自己编写脚本实现进度显示
-   可以使用进度条的方式，或者显示百分比的方式
\-\-\-\-\-\-\--脚本1\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
jindu(){
while :
do
echo -ne \'\\033\[43m \\033\[0m\'
sleep 0.3
done
}
jindu &
sleep 5
echo
kill \$!
\-\-\-\-\-\-\-\-\-\--脚本2\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
#! /bin/bash
jindu(){
while :
do
echo -ne \'\\033\[33m# \\033\[0m\'
sleep 0.3
done
}
jindu &
sleep 5
echo
kill \$!
# 新增：
## set
linux shell 脚本编写好要经过漫长的调试阶段，可以使用sh -x
执行。但是这种情况在远程调用脚本的时候，就有诸多不便。又想知道脚本内部执行的变量的值或执行结果，这个时候可以使用在脚本内部用
set -x ,set去追踪一段代码的显示情况，执行后在整个脚本有效
set -x 开启 
set +x关闭
set -o 查看