 -T NUM duration of benchmark test in seconds // 指定总的压力测试时间. 与-t不能同时使用.
 -v vacuum all four standard tables before tests // 测试前先vacuum 4个和tpc-b相关的表.
 --aggregate-interval=NUM // 输出聚合后的事务统计信息.
 aggregate data over NUM seconds
 --sampling-rate=NUM // 指定采样百分比, 得出的TPS将只有正常TPS*rate
 fraction of transactions to log (e.g. 0.01 for 1% sample)
 Common options:
 -d print debugging output
 -h HOSTNAME database server host or socket directory
 -p PORT database server port number
 -U USERNAME connect as specified database user
 -V, --version output version information, then exit
 -?, --help show this help, then exit
压力测试工具
 事务统计输出信息解读(使用-l 输出)
 非聚合模式输出的格式, 每个事务对应1条记录.
 client_id transaction_no time file_no time_epoch time_us
 client_id // 连接ID, 如使用-c 8, 则client_id范围0..7
 transaction_no // 事务号, 每个连接独立从0开始计数.
 time // 事务耗时, 微秒
 file_no // 文件号, 从0开始. 当使用了多个-f参数时用于辨认对应哪个文件.
 time_epoch // 当前的epoch时间
 time_us // 当前的epoch时间的偏移量, 微秒(千分之一毫秒).
 // 使用--sampling-rate减少采样.
压力测试工具
 事务统计输出信息解读
 聚合模式输出的格式(--aggregate-interval), 每隔一段时间输出事务时间段的事务统计.
 interval_start num_of_transactions latency_sum latency_2_sum min_latency max_latency
 interval_start // epoch时间, 指这个统计段的开始时间.
 num_of_transactions // 这个统计段运行了多少个"事务", 指独立的文件运行次数.
 latency_sum // 这个统计段的事务执行总耗时, 单位微秒.
 latency_2_sum // 这个统计段的事务执行耗时平方的总和, 单位微秒.
 min_latency // 这个统计段内, 单个事务的最小耗时.
 max_latency // 这个统计段内, 单个事务的最大耗时.
 INSTR_TIME_SET_CURRENT(now);
 diff = now;
 INSTR_TIME_SUBTRACT(diff, st->txn_begin);
 usec = (double) INSTR_TIME_GET_MICROSEC(diff);
 ...
 agg->sum += usec; // latency_sum
 agg->sum2 += usec * usec; // latency_2_sum
压力测试工具
 自定义测试文件, 元命令
 \set varname operand1 [ operator operand2 ]
 Sets variable varname to a calculated integer value. Each operand is either an integer constant or a :variablename reference to a variable having an integer value.
The operator can be +, -, *, or /.
 Example:
 \set ntellers 10 * :scale
 \setrandom varname min max
 Sets variable varname to a random integer value between the limits min and max inclusive. Each limit can be either an integer constant or a :variablename
reference to a variable having an integer value.
 Example:
 \setrandom aid 1 :naccounts
 \sleep number [ us | ms | s ]
 Causes script execution to sleep for the specified duration in microseconds (us), milliseconds (ms) or seconds (s). If the unit is omitted then seconds are the
default. number can be either an integer constant or a :variablename reference to a variable having an integer value.
 Example:
 \sleep 10 ms
压力测试工具
 \setshell varname command [ argument ... ] // 调用SHELL, 并把SHELL执行返回值赋予给变量
 Sets variable varname to the result of the shell command command. The command must return an integer value through its standard output.
 argument can be either a text constant or a :variablename reference to a variable of any types. If you want to use argument starting with colons, you need to add
an additional colon at the beginning of argument.
 Example:
 \setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
 \shell command [ argument ... ] // 调用SHELL, 忽略SHELL执行返回值.
 Same as \setshell, but the result is ignored.
 Example:
 \shell command literal_argument :variable ::literal_starting_with_colon
压力测试工具
 自定义测试模型例子
 digoal=# create table tbl_userinfo(id int primary key, info text, crt_time timestamp, mod_time timestamp);
 digoal=# create table tbl_userinfo_audit(id int, info text, crt_time timestamp, mod_time timestamp, dml char(1));
 create or replace function f_reg(i_id int) returns tbl_userinfo as $$
 declare
 res tbl_userinfo;
 begin
 update tbl_userinfo set mod_time=now() where id=i_id returning * into res;
 if not found then
 insert into tbl_userinfo(id,info,crt_time) values(i_id,md5(random()::text),now()) returning * into res;
 insert into tbl_userinfo_audit(id,info,crt_time,dml) values (res.id,res.info,res.crt_time,'i');
 return res;
 end if;
 insert into tbl_userinfo_audit(id,info,crt_time,mod_time,dml) values (res.id,res.info,res.crt_time,res.mod_time,'u');
 return res;
 exception
 WHEN SQLSTATE '23505' THEN -- 防止违反唯一约束时调用函数报错. 以免pgbench输出一堆错误.
 return null;
 end;
 $$ language plpgsql strict;
压力测试工具
 创建测试文件, 如果有多个测试逻辑, 可以创建多个测试文件, 使用pgbench时, 给出多个-f参数即可. 每个"事务"随机选择一个文件执行.
 vi test.sql
 \setrandom id :minid :maxid
 select * from f_reg(:id);
 测试 :
 pgbench -M prepared -n -r -f ./test.sql -D minid=1 -D maxid=1000000 -c 8 -j 2 -T 10 -h $PGDATA -p $PGPORT -U $PGUSER $PGDATABASE
 transaction type: Custom query
 scaling factor: 1
 query mode: prepared
 number of clients: 8
 number of threads: 2
 duration: 10 s
 number of transactions actually processed: 91263
 tps = 9125.210450 (including connections establishing)
 tps = 9139.109833 (excluding connections establishing)
 statement latencies in milliseconds:
 0.003303 \setrandom id :minid :maxid
 0.869977 select * from f_reg(:id);
压力测试工具
 digoal=# select count(*) from tbl_userinfo_audit ;
 count
 -------
 91263
 (1 row)
 digoal=# select count(*) from tbl_userinfo;
 count
 -------
 87262
 (1 row)
压力测试工具
 pgbench使用建议 :
 1. 测试时间尽量延长(例如至少跨越2个checkpoint), 更能暴露真实存在的问题.
 2. 如果使用TPC-B测试模型, 那么初始化数据时指定的-s scale必须大于测试阶段指定的连接数-c NUM. 因为涉及更新
branchs表的操作, 如果连接数大于这个表记录数, 那么势必带来更新锁等待. 因此如果测试连接数比较多的情况下, 尽量
使用大的scale. 当然, 你可以选择-N参数, 不更新branchs表.
 3. 如果获取系统时间带来的额外开销比较大的话, 那么统计单条命令(-r)以及事务级别的统计(-l) 会导致测试的TPS与真
实的TPS偏差较大.
 使用pg_test_timing测试获取系统时间带来的额外开销. 小于1微秒的越多越好(>90%).
 4. 被测试的数据库配置尽量和生产配置一致, 包括表结构, 索引, 参数, 表空间, IO能力, CPU能力等.
 5. pgbench测试时尽量模拟实际的客户端请求, 例如可以使用\sleep设置延迟, 使用-C 控制是否使用短连接. -M 指定是否使
用绑定变量等.
 6. 测试数据在多次测试后, 可能导致表或索引的膨胀, 可以使用vacuum 清理垃圾数据, 或者使用vacuum full重建测试数据.
目录
授课环境
SQL优化基础
如何让数据库输出好的执行计划
压力测试工具的使用和建模
性能分析工具的使用
综合优化案例
性能分析工具
性能分析工具
 系统层面
 sar // Linux操作系统自带的统计信息收集. sysstat包.
 iostat // 跟踪块设备的IO读写请求次数, 字节数, 使用率, 等待队列, 平均等待时间等.
 vmstat // 跟踪虚拟内存的统计信息.
 stap // 内核动态跟踪.
 http://blog.163.com/digoal@126/blog/#m=0&t=1&c=fks_08406808408608007508508208509508508008207508308108607
1084
 数据库层面
 pg_stat_statements // 统计SQL的执行次数, CPU时间, IO时间, 命中数, 未命中数, 写buffer, 产生脏数据等统计信息.
 auto_explain // 记录超过执行时间的SQL当时的执行计划.
 log_min_duration_statement // 记录超过执行时间的SQL.
 其他第三方工具
 pg_statsinfo // 可视化工具. 支持统计信息快照, 时间段统计报告输出等.
 http://blog.163.com/digoal@126/blog/static/16387704020142585616183/
pg_stat_statements
 pg_stat_statements 利用_PG_init 接口创建钩子程序, 统计SQL信息. 在加载pg_stat_statements.so时, _PG_init被触发创建钩子,初始化内存区域等.
 pg_stat_statements统计项, 视图pg_stat_statements :
Name Type References Description
userid oid pg_authid.oid OID of user who executed the statement
dbid oid pg_database.oid OID of database in which the statement was executed
query text SQL Text of a representative statement (up to track_activity_query_size bytes)
calls bigint 调用次数 Number of times executed
total_time double precision 毫秒 Total time spent in the statement, in milliseconds
rows bigint Total number of rows retrieved or affected by the statement
shared_blks_hit bigint 命中读 Total number of shared block cache hits by the statement
shared_blks_read bigint 未命中读 Total number of shared blocks read by the statement
shared_blks_dirtied bigint 产生脏块 Total number of shared blocks dirtied by the statement
shared_blks_written bigint 写出脏块 Total number of shared blocks written by the statement
local_blks_hit bigint Total number of local block cache hits by the statement
local_blks_read bigint Total number of local blocks read by the statement
local_blks_dirtied bigint Total number of local blocks dirtied by the statement
local_blks_written bigint Total number of local blocks written by the statement
temp_blks_read bigint Total number of temp blocks read by the statement
temp_blks_written bigint Total number of temp blocks written by the statement
blk_read_time double precision Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)
blk_write_time double precision Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)
pg_stat_statements
 pg_stat_statements安装和配置
 export PATH=/opt/pgsql/bin:$PATH
 cd $PGSRC/contrib/pg_stat_statements
 make
 make install
 vi $PGDATA/postgresql.conf
 shared_preload_libraries = 'pg_stat_statements' # 必要配置项
 pg_stat_statements.max = 1024 # 最多存储的SQL数量, 如果条目占满的话, 使用最不频繁的SQL被覆盖掉.
 pg_stat_statements.track = all # 跟踪哪些SQL, all包含嵌套的SQL, 例如函数中的SQL独立跟踪. top则表示只跟踪最顶层的SQL, 不会跟踪
到函数内部的SQL. none表示不跟踪.
 pg_stat_statements.track_utility = on # 是否跟踪insert, update, delete, select以外的SQL.
 pg_stat_statements.save = on # 关闭数据库后, 共享内存区的信息保存到$PGDATA/global/pg_stat_statements.stat
 track_activity_query_size = 1024 # 存储的sql长度, 超出长度的部分被截断.
 重启数据库, 在需要查看pg_stat_statements的库中安装extension. 因为pg_stat_statemens中存储的是整个集群的统计信息, 建议只在需要用到
的库安装.
 psql -d postgres
 create extension pg_stat_statements;
pg_stat_statements
 相关的视图和函数.
 视图 :
 pg_stat_statements
 函数 :
 pg_stat_statements_reset() -- 用于重置pg_stat_statements的共享内存区的信息, 清除统计信息 .
pg_stat_statements
 注意1 :
 自从9.2版本开始, pg_stat_statements 支持将SQL里的某些常量替换为?, 减少存储条目. 类似绑定变量效果.
 例如 :
 select * from tbl_userinfo where id= 1;
 select * from tbl_userinfo where id=2;
 select id,info,crt_time,mod_time from tbl_userinfo where id=100; -- 包含表的所有列
 末尾的常量都会替换成?, 具体存储的query为第一次跟踪到的query text. 例如 :
 select * from tbl_userinfo where id= ?;
 如果第一次执行的是select id,info,crt_time,mod_time from tbl_userinfo where id=100; 那么存储的query就是 :
 select id,info,crt_time,mod_time from tbl_userinfo where id=?;
 http://blog.163.com/digoal@126/blog/static/1638770402014130252595
pg_stat_statements
 注意2 :
 search_path不同的情况下, 两条相同的SQL在pg_stat_statements中会存储2条记录.
 例如 :
 digoal=# \dn
 List of schemas
 Name | Owner
 --------+----------
 digoal | postgres
 public | postgres