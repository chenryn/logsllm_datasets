我从SharpC2 上的学到的东西
Perface
在这里非常感谢  @RastaMouse 师傅开发的这款.NET C2,去年刚开始看的时候他的视频教程对我
帮助很大，期间作者也重构过代码，到现在还是很喜欢最新的 Experimental版代码 实话说这是我
从SharpSploit项目以来读到的第二份令人舒服的代码了。3端分离式设计，让我也慢慢培养自己如
何展现写代码前思路上的体现，让阅读代码的人非常舒服，这是我今后追求的目标。
今天对SharpC2学习做个收尾，(为什么要收尾呢,后面会提到)。不知道大家怎么看这款开源.NET 
C2，我是非常喜欢的，对待新手非常友好。好了 言归正传。
主要要分享3个点:
1. SharpC2 Experimental 版 bug修复以及各种踩坑
2. SharpC2 不足的地方 对待个人来说可以改进的地方
3. 简单总结下使用体会。
1. 无法上线bug修复
1.1 Perface
参考: https://twitter.com/bopin2020/status/1398693022074695682
1.2 解决办法
这个问题是因为  .NET DataContractJsonSerializer 对DateTime UTC序列化时导致溢出发生的，
参考:  https://www.cnblogs.com/known/p/8735413.html
Bug代码位置:     Shared\Utilities\Utilities.cs  
添加对日期格式的修改, 原项目是 .NET Core 3.1的，需要修改为 .NET 5.0， 因为
DataContractJsonSerializerSettings 该类在.NET 5.0才有
参考: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.json.dataco
ntractjsonserializersettings?view=net-5.0
.NET 自带的Json序列化类 在.NET 5进行了质的提升
1.3 如何分析问题的
由于上面我们将Shared修改为 .NET 5.0,因此  StagerHTTP 就不能使用 .NET Framework 4.0，为
了兼容我在测试时改为了4.8.
首先Beacon是怎么上线的，SharpC2采用Stager 方式，TeamServer在启动时会加载资源文件，
然后控制端连接后创建监听器，生成Stager后，运行Stager远程拉去Stage.dll  这是真正的
beacon。 这里画了个简单的图: 
通过对比CS，msf上线   RDI 加载dll上线，.NET 使用了自带的内存加载 代码参考:
跟进  Stage  核心方法  Agent.Stage.HttpEntry() 方法
这里加载 ConfigController 配置控制器后  实例化HttpCommModle类，调用Execute方法
加载加密控制器，Agent控制器后，开始注册Beacon 功能模块，调用Start执行
每一个模块配置了不同的命令，分门别类非常清晰 也很适合扩展，有兴趣的朋友可以读下代码。
有朋友可能注意到了代码中我手动添加了很多提示语句，主要为了排错。到这里beacon还没有任
何问题，跟进agent.Start()
发送源数据然后循环接收数据
继续跟进发现是 SerialiseData 序列化数据出现问题，设置异常捕获发现问题，然后就寻找答案。
2. LastSeen 总是显示负数
这是个小问题   找到 计算时间差函数
修改 var diff = (DateTime.Now - LastSeen).TotalSeconds;
3. Others
其他bug, 发现控制端,beacon端过多时，执行命令无回显，通讯流量还有优化的空间。
某些小问题:  
Beacon UI上remove后再也不会上线了，当beacon checkin时做个判断如果UI上没有就添加即
可。
监听器不会驻留，每次启动TS，都得创建监听器，需要添加缓存机制，参考CobaltStrike.
load-module 加载模块，beacon注册模块后 beacon console输入help 并无对应的命令帮助信
息，需要添加
beacon console有数据回来时，默认不会滚到ScrollToEnd()   
关于WPF UI上的改进，原作者基本上使用了标准的控件，如果这些不能满足于你的需求也可以使
用WPF toolkit扩展控件。
关于这部分具体参考作者的 Project/To do
https://github.com/SharpC2/SharpC2/projects/1
beacon console Tab 自动补全
Nested child agents grid view
Colored output in text views
Donut integration for shellcode generation
Implement a Graph agent view  
Injection capabilities
Data Persistence
这些功能基本上解决了目前的小问题或不足
————
改进和不足
SharpC2 更多的算是一个POC，Demo产品。如果想拿来用，需要对通讯流量进行改进，以及
WPF UI界面美化，更重要的是 ABU，SharpC2执行某些功能依然使用Pinvoke，这种方式会在.net 
导入表中看到踪迹，也是一个特征
关于学习SharpC2建议
除了更容易的弄懂SharpC2,还有从SharpC2上我们可以学到的技术点，从设计角度以及功能实现
技术点展开。
1. TeamServer
需要学习Restful WebAPI，如果您之前有Web经验相信这很容易。还有上次提到了RestClient项目
2. Client控制端
需要学习 WPF GUI， 重点是数据绑定，命令，依赖注入，Style以及MVVM
3. Agent
Beacon端的实现需要结合TeamServer端  数据加密，配置等。比较重要的是每一个功能模块独
立，从设计角度来看beacon，记得还有一个c2 beacon端全部使用插件完成的，这也是一个思
路。具体要实现怎样的功能，需要自己根据实际情况做好分类。
4. Others
关于C#语言层面的，这里仅列出SharpC2涉及的一部分， 异步任务，委托，事件，泛型，反射等
Further where go
还记得第一次看SharpC2时 提到了Web API,控制端和TeamServer通信时就是通过Restful API的，
本来还想着把Web API看看，也能弄个和SharpC2差不多的C2了，加上功能实现估计也就半年。
但是和朋友聊过后，决定可以把SharpC2放一段时间了，从去年开始看这款C2，到现在已经明白
对于C2 框架，Beacon端是核心，与其花时间弄一个Demo，倒不如开始Windows 核心编程把这
些东西先弄熟悉，后面写出来的项目不至于只能看,不能用。 
对于和我一样的新手，因此我建议学习C2开发的路线应该是，先把整个C2框架需要弄清楚，从控
制端GUI，到TeamServer,Beacon怎么通信，功能怎么实现心中有了大概思路后开始学习
Windows核心编程。仅目前我所理解的Windows核心编程能够给我带来的东西就是 实现功能。例
如进程，线程，IPC，免杀，PE等都属于这类范畴。对了之前我还有一个困惑，就是对于学习.NET
的朋友， 《CLR via C#》这本书也同样是经典，在我没搞懂Windows核心编程前还打算后面重点
去看这本书的，我承认学习CLR这本书确实很好，但是就像我们上面提到的，学习C2具体功能实
现，CLR这本书无法提供这样的帮助，它可以帮助我们理解CLR的内部原理，对于.NET 开发任务，
理解CLR是.NET技术上的进阶，当然这归属于编程语言范畴，这是我认为它两之间的区别。