impossible for Cppcheck and Coverity to check the validity of
control/mission parameter input, or to determine if the RAV
controller state – manifested by program state – is semanti-
cally valid or corrupted. For Case 7, the overﬂow of an integer
program variable was not detected by either Cppcheck or
Coverity. This was also conﬁrmed by a Cppcheck developer4.
For Cases 8-10, accurate detection of divide-by-zero bugs
4https://sourceforge.net/p/cppcheck/discussion/
development/thread/eed7d492df
922    29th USENIX Security Symposium
USENIX Association
Table 4: Bug detection capability comparison results. : bug
triggered and located in source code, ∆: bug triggered and
faulty input constructed, and : bug not detected.
Case
ID
Cppcheck Coverity RVFuzzer
Nature of Bug
MAYDAY
[51]
[22]
[21]
1
2
3
4
5
6
7
8
9
10






























∆
∆
∆
∆
∆
∗
∆
∆
∆

Missing controller
parameter range check
Missing controller
parameter range check
Missing controller
parameter range check
Missing controller
parameter range check
Comparison with
a wrong variable
Wrong waypoint
computation based on
non-existent coordinate
Integer overﬂow on
a mission variable
Divide-by-zero caused by
invalid controller parameter
Divide-by-zero caused by
invalid controller parameter
(Probabilistic)
Divide-by-zero caused
by sensor input
∗ The bug cannot be triggered under the default conﬁguration of RVFuzzer. However, it
can be triggered if RVFuzzer’s ﬂight simulation is re-conﬁgured.
is hard for static analysis-based tools such as Cppcheck and
Coverity. Without a concrete execution conﬁrming a divide-
by-zero instance, they cannot detect such bugs with low false
positive and false negative rates.
Our comparison results highlight the key differences be-
tween MAYDAY and the off-the-shelf bug-ﬁnding tools. First,
MAYDAY complements the generic tools by serving as a spe-
cialized tool (i.e., for RAV control programs) for uncovering
control-semantic bugs that cause controller anomalies, instead
of “syntactic” bugs that cause generic symptoms such as mem-
ory corruption and CFI violation. Second, unlike program
debuggers, MAYDAY debugs an entire cyber-physical sys-
tem based on both control- and program-level traces. Third,
MAYDAY’s bug localization is guided by the RAV control
model and its mapping to the control code; whereas off-the-
shelf debuggers are without such domain-speciﬁc knowledge.
Even if a static analysis tool is aware of value ranges of con-
trol parameters, MAYDAY is still necessary because (1) there
is no existing static analysis tool that comes with or generates
a parameter-range speciﬁcation; (2) static analysis is prone to
high false positives/negatives when detecting divide-by-zero
bugs (Cases 8-10); and (3) static analysis cannot detect se-
mantic bugs such as a wrong variable-name (Case 5), due to
unawareness of control semantics. MAYDAY, based on actual
RAV control program runs, overcomes these limitations.
Comparison with RVFuzzer Among the 10 cases, RVFuzzer
was able to trigger eight cases caused by GCS input validation
bugs (i.e., lack of valid range check for runtime-adjustable
control or mission parameters, as deﬁned in [51]). RVFuzzer
did not trigger Cases 6 and 10 for different reasons: (1) For
Case 6, the reason is insufﬁcient ﬂight simulation time un-
der RVFuzzer’s default conﬁguration. In this case, given an
invalid input, RVFuzzer’s simulation run terminated before
controller anomaly could occur. However, RVFuzzer would
have detected the bug in Case 6, if the simulation had run
longer (for hours instead of minutes by default) for each input
value. We note that RVFuzzer limits the simulation time to
achieve high fuzzing throughput; and Case 6 manifests the
trade-off between fuzzing coverage and throughput. (2) Case
10 cannot be detected by RVFuzzer because the bug is not a
GCS input validation bug. Instead, it is triggered probabilisti-
cally by the wind speed sensor input.
In addition to Cases 6 and 10, we have found another inter-
esting bug that RVFuzzer cannot detect: PSC_ACC_XY_FILT
is a runtime-adjustable control parameter (which smooths the
change in x, y-axis acceleration reference), with a default
value of 2.0. During fuzzing, no controller anomaly is ob-
served, when the value of PSC_ACC_XY_FILT is set to 2.0
and when the value is set to 0. Following its fuzzing space
reduction heuristic, RVFuzzer will not test any other value
between 0.0 and 2.0, assuming that [0, 2.0] is a safe range.
But in fact, a positive value close to 0.0 (e.g., 0.0001) for
PSC_ACC_XY_FILT will lead to controller anomaly and hence
be missed by RVFuzzer. This bug can be demonstrated with
a concrete attack, which can be investigated by MAYDAY
similar to Cases 1-4 with a Type II CVDG-level corruption
path.
More fundamentally, MAYDAY and RVFuzzer differ in two
aspects: (1) MAYDAY reactively performs investigation to
localize the bug in the source code that had led to an accident.
MAYDAY involves CVDG-guided source code analysis and
instrumentation to bridge the RAV control model and control
program. RVFuzzer proactively discovers vulnerable inputs
that cause controller anomalies, by treating the control binary
code as a blackbox. (2) RVFuzzer automatically mutates val-
ues of control parameters that can be dynamically adjusted via
GCS commands, to uncover vulnerable value ranges of those
control parameters – namely input validation bugs. On the
other hand, MAYDAY aims to trace back and pinpoint control
semantic bugs, which include not only input validation bugs
(e.g., Cases 1-4) but also other types of bugs such as ﬂight
mission corruption (e.g., Cases 6) and data processing error
(e.g., Case 10).
Finally, our comparison between MAYDAY and RVFuzzer
suggests an integration opportunity: Given an RAV control
program (with both source and binary), we can ﬁrst apply
RVFuzzer to construct a concrete attack/accident – instead of
waiting for one to happen – that indicates the existence of a
vulnerable control/mission parameter. We then use MAYDAY
to reproduce the accident/attack with the same malicious in-
put, collect the control and program logs, and locate and patch
the bug at the source code level. We can perform such inte-
grated “fuzzing – debugging – patching” workﬂow for the
eight cases detected by RVFuzzer.
USENIX Association
29th USENIX Security Symposium    923
(a) X-axis velocity controller.
(b) X-axis acceleration controller.
Figure 9: Case 1: History of x-axis velocity and acceleration
controllers – the former is the initial digressing controller.
8.1.1 Case Study: “Unexpected Crash after Turn”
We now present the investigations of Cases 1 and 5 as detailed
case studies. In Case 1, the quadrotor’s mission was to ﬁrst
stop at waypoint A to pick up a package, then ﬂy straight
north (along the y-axis) to waypoint B, where it would make a
90-degree turn to ﬂy east (along the x-axis) to the destination.
After the pickup, to maintain the y-axis speed (5 m/s) with the
increased payload, the operator issued a parameter-changing
command via GCS to increase the kP parameter, shared by
both x- and y-axis velocity controllers. The ﬂight from A
to B was normal. Unexpectedly, when the vehicle made the
scheduled turn at B, it became very unstable and soon lost
control and crashed.
MAYDAY ﬁrst performs the control-level investigation.
By analyzing the control-level log, MAYDAY ﬁnds that the
initial digressing controllers are the x- and y-axis velocity
controllers, both with digression between the vehicle ve-
locity state ( ˙xxy) and reference (˙rxy) starting at around It-
eration 23267 (after the scheduled turn at Iteration 20858).
Fig. 9a shows the x-axis velocity state and reference. 5 Next,
MAYDAY checks their child controllers (i.e., the x, y-axis ac-
celeration controllers) and conﬁrms that the child controllers
did not exhibit any digression (i.e., ¨xxy always tracked ¨rxy),
even after the velocity controllers’ digression. Fig. 9b shows
the x-axis acceleration state and reference. Based on Ta-
ble 1, MAYDAY infers that the CVDG-level corruption path
is P → ˙kxy → ¨rxy (Type II).
MAYDAY then performs the program-level investigation. It
runs Algorithm 2 on the program execution log, starting from
Iteration 23267 and going backward, to ﬁnd data ﬂows that
correspond to the CVDG-level corruption path. The multiple
data ﬂows found by the algorithm reveal that they all started
from the parameter-changing GCS command (P), which led
to the modiﬁcation of kP (which is part of ˙kxy) during Iter-
ation 13938 – much earlier than the digression (23267). kP
remained unchanged after Iteration 13938. Finally, MAYDAY
maps the data ﬂows to 34 basic blocks, among which we (as
investigator) ﬁnd the actual bug.
Listing 1 shows the code snippets with the bug. When
a parameter-changing command is received, set_and_save
saves the new parameter value. The value is later retrieved
by get_p, when rate_to_accel_xy is called by the x, y-
axis velocity controller. The code indicates that the controller
5Those for y-axis velocity are omitted to avoid duplication.
...
return ( _input * _kp );
//No range check
//No range check
...
//Access parameter _kp
vel_xy_p = _pi_vel_xy . get_p () ;
...
//No range check
vp -> set_float ( packet . param_value , var_type );
1 void GCS_MAVLINK:: handle_param_set (..//Parameter update
2
3
4
5 Vector2f AC_PI_2D:: get_p () const{
6
7
8 void AC_PosControl:: rate_to_accel_xy (... //Controller
9
10
11
Listing 1: Control-semantic bug behind Case 1. The range
check patch can be applied in Line 7.
would accept any kP value from the GCS without a range
check! (A range check should be added at Line 7.) The rele-
vant log also shows that, despite the improper kP value, the
vehicle remained stable from A to B. This is because the
x- and y-axis velocity controllers are not sensitive to kP un-
der constant speed with negligible instantaneous error (i.e.,
˙rxy − ˙xxy). However, when the vehicle turned 90 degrees, the
x-axis velocity had to increase from 0 m/s to 5 m/s (and the
opposite for y-axis velocity) and the impact of kP manifested
itself during the acceleration/deceleration.
8.1.2 Case Study: “‘Frozen’ Velocity after Slowdown”
While Case 1 was caused by corruption of control parameters
(Type II), Case 5 was triggered by corruption of ﬂight mission
(Type IV). We note that this case was ﬁrst discussed by [51]
as an attack scenario; and the corresponding vulnerability was
found but without exact reasoning of the root cause (bug) at
source code level. Here, we demonstrate how MAYDAY can
locate the bug via post-accident/attack investigation.
In Case 5, the quadrotor ﬂew east-bound (along the x-axis)
at a velocity of 2 m/s. During one segment of the ﬂight, the ve-
hicle is supposed to take aerial survey video of a speciﬁc land-
scape (e.g., an archaeology site) hence the operator issued a
mission-changing command to reduce the vehicle speed to 15
cm/s so that the on-board camera could capture detailed, slow-
progressing view of the landscape. After the video-shooting
operation, the vehicle was supposed to resume the 2 m/s cruis-
ing velocity. However, it seemed to get “stuck” in the 15
cm/s velocity and did not respond to any velocity-changing
command from the operator.
MAYDAY ﬁrst performs the control-level investigation.
From the control-level log, it ﬁnds that the initial digressing
controller is the x-axis velocity controller, with the digression
between the velocity reference ˙rx and the operator-set velocity
(which is part of mission M), starting from Iteration 23629
(Fig 10a). Different from Case 1, there is no digression be-
tween the x-axis velocity state ( ˙xx) and reference (˙rx), hence
the vehicle did not lose control during the entire ﬂight, despite
the “frozen” speed. MAYDAY also conﬁrms that the child con-
troller (i.e., the x-axis acceleration controller) did not exhibit
any digression (Fig 10b). In other words, both velocity and ac-
celeration states correctly tracked their respective references
924    29th USENIX Security Symposium
USENIX Association
-20002004006008001000800015000220002900036000Velocity (cm/s)Control Loop Iterationሶ𝑟𝑥(𝑡)ሶ𝑥𝑥(𝑡)Initial DigressionInitialCorruption-1500-1000-500050010001500800015000220002900036000ሷ𝑟𝑥(𝑡)ሷ𝑥𝑥(𝑡)Acceleration (cm/s2)Control Loop Iteration(a) X-axis velocity controller
(b) X-axis acceleration controller
Figure 10: Case 5: History of x-axis velocity and acceleration
controllers – the former is the initial digressing controller.
Figure 11: Number of basic blocks reported by the baseline
investigation method and by MAYDAY.
// range check new target speed
float get_max_speed_xy () const { return _speed_cms ; }
1 class AC_PosControl {
2 public:
3
4 ...
5 void AC_WPNav:: set_speed_xy (float speed_cms ) {
6
7 - if( _pos_control . get_max_speed_xy () >=
8 -
WPNAV_WP_SPEED_MIN ){ //Buggy code
9 + if( speed_cms >= WPNAV_WP_SPEED_MIN ){ //Patched code
10
11