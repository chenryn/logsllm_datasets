### Challenges in Detecting Semantic Validity with Static Analysis Tools

Static analysis tools such as Cppcheck and Coverity are unable to verify the validity of control or mission parameter inputs, or to determine if the RAV controller state—represented by the program state—is semantically valid or corrupted. For example, in Case 7, an integer overflow in a program variable was not detected by either tool. This was confirmed by a Cppcheck developer [4].

For Cases 8-10, accurate detection of divide-by-zero bugs is challenging for static analysis tools. Without concrete execution to confirm a divide-by-zero instance, these tools cannot detect such bugs with low false positive and false negative rates.

### Bug Detection Capability Comparison

Table 4 summarizes the bug detection capabilities of Cppcheck, Coverity, and RVFuzzer. The symbols used are:  (bug triggered and located in source code), ∆ (bug triggered and faulty input constructed), and  (bug not detected).

| Case ID | Cppcheck | Coverity | RVFuzzer | Nature of Bug |
|---------|----------|----------|----------|---------------|
| 1       |         |         |         | Missing controller parameter range check |
| 2       |         |         |         | Missing controller parameter range check |
| 3       |         |         |         | Missing controller parameter range check |
| 4       |         |         |         | Missing controller parameter range check |
| 5       |         |         |         | Comparison with a wrong variable |
| 6       |         |         | ∗      | Wrong waypoint computation based on non-existent coordinate |
| 7       |         |         |         | Integer overflow on a mission variable |
| 8       |         |         |         | Divide-by-zero caused by invalid controller parameter |
| 9       |         |         |         | Divide-by-zero caused by invalid controller parameter (Probabilistic) |
| 10      |         |         |         | Divide-by-zero caused by sensor input |

* The bug cannot be triggered under the default configuration of RVFuzzer but can be triggered if the flight simulation is reconfigured.

### Key Differences Between MAYDAY and Off-the-Shelf Tools

Our comparison results highlight the key differences between MAYDAY and generic bug-finding tools:

1. **Specialization**: MAYDAY complements generic tools by specializing in uncovering control-semantic bugs that cause controller anomalies, rather than syntactic bugs like memory corruption or CFI violations.
2. **System-Level Debugging**: Unlike traditional debuggers, MAYDAY debugs an entire cyber-physical system using both control- and program-level traces.
3. **Domain-Specific Knowledge**: MAYDAY's bug localization is guided by the RAV control model and its mapping to the control code, whereas off-the-shelf debuggers lack this domain-specific knowledge.

Even if a static analysis tool is aware of value ranges of control parameters, MAYDAY is still necessary because:
1. No existing static analysis tool generates a parameter-range specification.
2. Static analysis is prone to high false positives/negatives when detecting divide-by-zero bugs (Cases 8-10).
3. Static analysis cannot detect semantic bugs like a wrong variable name (Case 5) due to unawareness of control semantics.

MAYDAY, based on actual RAV control program runs, overcomes these limitations.

### Comparison with RVFuzzer

Among the 10 cases, RVFuzzer was able to trigger eight cases caused by GCS input validation bugs (lack of valid range check for runtime-adjustable control or mission parameters). RVFuzzer did not trigger Cases 6 and 10 for different reasons:
1. **Case 6**: Insufficient flight simulation time under RVFuzzer’s default configuration. If the simulation ran longer, the bug would have been detected.
2. **Case 10**: The bug is not a GCS input validation bug but is triggered probabilistically by the wind speed sensor input.

Additionally, RVFuzzer missed another interesting bug: PSC_ACC_XY_FILT, a runtime-adjustable control parameter, has a default value of 2.0. During fuzzing, no controller anomaly is observed when the value is set to 2.0 or 0. RVFuzzer assumes [0, 2.0] is a safe range and does not test other values. However, a value close to 0.0 (e.g., 0.0001) leads to a controller anomaly. This bug can be demonstrated with a concrete attack, which MAYDAY can investigate.

Fundamentally, MAYDAY and RVFuzzer differ in two aspects:
1. **Reactive vs. Proactive**: MAYDAY reactively investigates to localize the bug in the source code that led to an accident, while RVFuzzer proactively discovers vulnerable inputs that cause controller anomalies.
2. **Bug Types**: RVFuzzer focuses on input validation bugs, while MAYDAY aims to trace back and pinpoint various control semantic bugs, including mission corruption and data processing errors.

### Integration Opportunity

An integration opportunity exists: Given an RAV control program (with both source and binary), RVFuzzer can construct a concrete attack/accident, and MAYDAY can then reproduce the accident, collect logs, and locate and patch the bug at the source code level. This integrated "fuzzing – debugging – patching" workflow can be applied to the eight cases detected by RVFuzzer.

### Case Study: “Unexpected Crash after Turn”

In Case 1, the quadrotor’s mission was to stop at waypoint A, pick up a package, and then fly north to waypoint B, where it would turn 90 degrees to fly east. After the pickup, the operator increased the kP parameter via GCS to maintain y-axis speed. The flight from A to B was normal, but the vehicle became unstable and crashed after the turn at B.

**Control-Level Investigation**:
- MAYDAY analyzed the control-level log and found that the x- and y-axis velocity controllers started digressing at Iteration 23267.
- The child controllers (x, y-axis acceleration controllers) did not exhibit any digression.
- The CVDG-level corruption path is P → ˙kxy → ¨rxy (Type II).

**Program-Level Investigation**:
- MAYDAY traced the data flows starting from Iteration 23267 and found that the parameter-changing GCS command modified kP during Iteration 13938.
- The code snippet in Listing 1 shows that the controller accepts any kP value without a range check, leading to the bug.

```cpp
// Access parameter _kp
vel_xy_p = _pi_vel_xy.get_p();
```

A range check should be added at Line 7.

### Case Study: “‘Frozen’ Velocity after Slowdown”

In Case 5, the quadrotor flew east-bound at 2 m/s and was supposed to slow down to 15 cm/s for aerial survey video. After the video, the vehicle got "stuck" at 15 cm/s and did not respond to velocity-changing commands.

**Control-Level Investigation**:
- MAYDAY found that the x-axis velocity controller started digressing at Iteration 23629.
- The x-axis acceleration controller did not exhibit any digression.
- Both velocity and acceleration states correctly tracked their respective references.

**Program-Level Investigation**:
- The buggy code in `set_speed_xy` incorrectly checks the maximum speed instead of the new target speed.

```cpp
- if (_pos_control.get_max_speed_xy() >= WPNAV_WP_SPEED_MIN) { // Buggy code
+ if (speed_cms >= WPNAV_WP_SPEED_MIN) { // Patched code
```

This patch corrects the issue.

By leveraging MAYDAY, we can effectively identify and address control-semantic bugs, ensuring the robustness and reliability of RAV control systems.