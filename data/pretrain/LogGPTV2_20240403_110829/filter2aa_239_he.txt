      services.AddMvc();
      IBookChaptersRepository repos = new SampleBookChaptersRepository();
      repos.Init();
      services.AddSingleton(repos);
      // etc.
    }
42.2.3 创建控制器
ASP.NET Web API控制器使用存储库。控制器可以通过Solution Explorer上下文菜单
Add NewItem | Web API Controller Class创建。管理图书中章的控制器类被命名为
BookChaptersController。这个类派生自基类Controller。到控制器的路由使用Route特性定
义。该路由以api开头，其后是控制器的名称，这是没有Controller后缀的控制器类名。
BooksChapterController的构造函数需要一个实现IBookChapterRepository接口的对象。这个
对象是通过依赖注入功能注入的（代码文件
BookServiceSample/Controllers/BookChaptersController.cs）：
    [Route("api/[controller]"]
    public class BookChaptersController: Controller
    {
      private readonly IBookChapterRepository _repository;
      public BookChaptersController(IBookChapterRepository bookChapterRepository)
      {
        _repository = bookChapterRepository;
      }
模板中创建的Get方法被重命名，并被修改为返回类型为IEnumerable
的完整集合：
    // GET api/bookchapters
    [HttpGet]
    public IEnumerable GetBookChapters
() => _repository.GetAll();
带一个参数的Get方法被重命名为GetBookChapterById，用Find方法过滤存储库的字
典。过滤器的参数id从URL中检索。如果没有找到章，存储库的Find方法就返回null。在
这种情况下，返回NotFound。NotFound返回一个404（未找到）响应。找到对象时，创建
一个新的ObjectResult并返回它：ObjectResult返回一个状态码200，其中包含书的章：
    // GET api/bookchapters/guid
    [HttpGet("{id}", Name=nameof(GetBookChapterById))]
    public IActionResult GetBookChapterById(Guid id)
    {
      BookChapter chapter = _repository.Find(id);
      if (chapter == null)
      {
      return NotFound();
      }
      else
      {
      return new ObjectResult(chapter);
      }
    }
  注意： 路由的定义参见第41章。
要添加图书的新章，应添加PostBookChapter。该方法接收一个BookChapter作为HTTP
体的一部分，反序列化后分配给方法的参数。如果参数chapter为null，就返回一个
BadRequest（HTTP 400错误）。如果添加BookChapter，这个方法就返回CreatedAtRoute。
CreatedAtRoute返回HTTP状态码201（已创建）及序列化的对象。返回的标题信息包含到
资源的链接，即到GetBookChapterById的链接，其id设置为新建对象的标识符：
    // POST api/bookchapters
    [HttpPost]
    public IActionResult PostBookChapter([FromBody]BookChapter chapter)
    {
      if (chapter == null)
      {
        return BadRequest();
      }
      _repository.Add(chapter);
      return CreatedAtRoute(nameof(GetBookChapterById), new { id = chapter.Id },
        chapter);
    }
更新条目需要基于HTTP PUT请求。PutBookChapter方法在集合中更新已有的条目。
如果对象还不在集合中，就返回NotFound。如果找到了对象，就更新它并返回一个成功
的结果状态码204，其中没有内容：
    // PUT api/bookchapters/guid
    [HttpPut("{id}")]
    public IActionResult PutBookChapter(Guid id, [FromBody]BookChapter chapter)
    {
      if (chapter == null || id ! = chapter.Id)
      {
        return BadRequest();
      }
      if (_repository.Find(id) == null)
      {
        return NotFound();
      }
      _repository.Update(chapter);
      return new NoContentResult();
    }
对于HTTP DELETE请求，从字典中删除图书的章：
    // DELETE api/bookchapters/5
    [HttpDelete("{id}")]
    public void Delete(Guid id)
    {
      _repository.Remove(id);
    }
有了这个控制器，就可以在浏览器上进行第一组测试了。打开链接
http://localhost:5000/api/BookChapters，返回JSON。
当使用Kestrel Web服务器时，端口5000是默认端口号。可以在项目属性的Debug部分
通过选择Web配置文件来选择这个服务器（参见图42-2）。
图42-2
用浏览器打开这个链接，会返回一个JSON数组：
    [{"Id":"2d0c7eac-cb37-409f-b8da-c8ca497423a2",
      "Number":6, "Title":"Generics", "Pages":22},
     {"Id":"d62e1182-3254-4504-a56b-f0441ee1ce8e",
      "Number":1, "Title":"Application Architectures", "Pages":35},
     {"Id":"cb624eed-7e6c-40c6-88f2-28cf03eb652e",
      "Number":4, "Title":"Inheritance", "Pages":18},
     {"Id":"6e6d48b5-fa04-43b5-b5f5-acd11b72c821",
      "Number":3, "Title":"Objects and Types", "Pages":30},
     {"Id":"55c1ea93-2c0d-4071-8cee-cc172b3746b5",
      "Number":2, "Title":"Core C#", "Pages":42},
     {"Id":"5c391b33-76f3-4e12-8989-3a8fbc621e96",
      "Number":5, "Title":"Managed and Unmanaged Resources", "Pages":20}]
42.2.4 修改响应格式
ASP.NET Web API 2返回JSON或XML，这取决于由客户端请求的格式。在ASP.NET
MVC 6中，当返回ObjectResult时，默认情况下返回JSON。如果也需要返回XML，可以添
加NuGet包Microsoft.AspNet.Mvc.Formatters.Xml，再添加一个对Startup类的
AddXmlSerializerFormatters的调用。AddXmlSerializerFormatters是IMvcBuilder接口的一个
扩展方法，可以使用流畅API（fluent 
API）添加到AddMvc方法中（代码文件
BooksServiceSample/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddMvc().AddXmlSerializerFormatters();
      IBookChaptersRepository repos = new SampleBookChaptersRepository();
      repos.Init();
      services.AddSingleton(repos);
    }
在控制器中，使用Produces特性可以指定允许的内容类型和可选的结果（代码文件
BooksService-Sample/Controllers/BookChaptersController.cs）：
    [Produces("application/json", "application/xml")]
    [Route("api/[controller]")]
    public class BookChaptersController: Controller
    {
      // etc.
    }
  注意： 本章后面的42.4.2节将介绍如何接收XML格式的响应。
42.2.5 REST结果和状态码
表42-1总结了服务基于HTTP方法返回的结果：
表42-1
HTTP方法
说明
请求体
响应体
GET
返回资源
空
资源
POST
添加资源
要添加的资源
资源
PUT
更新资源
要更新的资源
无
DELETE
删除资源
空
空
表42-2显示了重要的HTTP状态码、Controller方法和返回状态码的实例化对象。要返
回任何HTTP状态码，可以返回一个HttpStatusCodeResult对象，用所需的状态码初始化：
表42-2
HTTP状态码
Controller方法
类型
200 OK
Ok
OkResult
201已创建
CreatedAtRoute
CreatedAtRouteResult
204无内容
NoContent
NoContentResult
400错误请求
BadRequest
BadRequestResult
401未授权
Unauthorized
UnauthorizedResult
404未找到
NotFound
NotFoundResult
任何HTTP状态码
StatusCodeResult
所有成功状态码都以2开头，错误状态码以4开头。状态码列表在RFC 
2616中可以找
到：http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html。
42.3 创建异步服务
前面的示例代码使用了一个同步存储库。使用Entity Framework Core和存储库的话，
可以使用同步或异步的方法。Entity 
Framework支持两者。然而，许多技术（例如使用
HttpClient类调用其他服务）只提供了异步的方法。这可能会导致一个异步存储库，如项
目BooksServiceAsyncSample所示。
在异步项目中，IBookChaptersRepository已经改为异步的版本。这个接口定义为通过
存储库访问异步方法，如网络或数据库客户端。所有的方法都返回Task 
（代码文件
BooksServiceAsyncSample/Models/IBookChaptersRepository.cs）：
    public interface IBookChaptersRepository
    {
      Task InitAsync();
      Task AddAsync(BookChapter chapter);
      Task RemoveAsync(Guid id);
      Task> GetAllAsync();
      Task FindAsync(Guid id);
      Task UpdateAsync(BookChapter chapter);
    }
类SampleBookChaptersRepository实现了异步方法。读写字典时，不需要异步功能，
所以返回的Task使用FromResult方法创建（代码文件
BooksServiceAsyncSample/Models/SampleBookChapters-Repository.cs）：
    public class SampleBookChaptersRepository: IBookChaptersRepository
    {
      private readonly ConcurrentDictionary _chapters =
        new ConcurrentDictionary();
      public async Task InitAsync()
      {
        await AddAsync(new BookChapter
        {
      Number = 1,
      Title = "Application Architectures",
      Pages = 35
        });
        //... more book chapters
      }
      public Task AddAsync(BookChapter chapter)
      {
        chapter.Id = Guid.NewGuid();
        _chapters[chapter.Id] = chapter;
        return Task.FromResult(null);
      }
      public Task RemoveAsync(Guid id)
      {
        BookChapter removed;
        _chapters.TryRemove(id, out removed);
        return Task.FromResult(removed);
      }
      public Task> GetAllAsync() =>
        Task.FromResult>(_chapters.Values);
      public Task FindAsync(Guid id)
      {
        BookChapter chapter;
        _chapters.TryGetValue(id, out chapter);
        return Task.FromResult(chapter);
      }
      public Task UpdateAsync(BookChapter chapter)
      {
        _chapters[chapter.Id] = chapter;
        return Task.FromResult(null);
      }
    }
API控制器BookChaptersController只需要一些变化，以实现为异步版本。控制器方法
也返回一个Task。这样，就很容易调用存储库的异步方法（代码文件
BooksServiceAsyncSample/Controllers/BookChaptersController.cs）：
    [Produces("application/json", "application/xml")]
    [Route("api/[controller]")]
    public class BookChaptersController: Controller
    {
      private readonly IBookChaptersRepository _repository;
      public BookChaptersController(IBookChaptersRepository repository)
      {
        _repository = repository;
      }
      // GET: api/bookchapters
      [HttpGet()]
      public Task> GetBookChaptersAsync() =>
        _repository.GetAllAsync();
      // GET api/bookchapters/guid
      [HttpGet("{id}", Name = nameof(GetBookChapterByIdAsync))]
      public async Task GetBookChapterByIdAsync(Guid id)
      {
        BookChapter chapter = await _repository.FindAsync(id);
        if (chapter == null)
        {
    return NotFound();
        }
        else
        {
    return new ObjectResult(chapter);
        }
      }
      // POST api/bookchapters
      [HttpPost]
      public async Task PostBookChapterAsync(
        [FromBody]BookChapter chapter)
      {
        if (chapter == null)
        {
    return BadRequest();
        }
        await _repository.AddAsync(chapter);
        return CreatedAtRoute(nameof(GetBookChapterByIdAsync),
    new { id = chapter.Id }, chapter);