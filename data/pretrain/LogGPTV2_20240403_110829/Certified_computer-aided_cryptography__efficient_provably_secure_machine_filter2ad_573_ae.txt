of the performance of the assembly code produced by Com-
pCert when used for security-aware compilation. Our goals
were three-fold:
to evaluate whether or not the trans-
lation validation check might reject the assembly produced
by CompCert (in which case the compiler might not be pre-
serving the side-channel countermeasures); ii. to evaluate
whether the annotation of C source-code with the leakage
tags might damage the performance of the code produced
by CompCert; and iii. to compare the eﬃciency of the se-
cure code produced by CompCert when compared to GCC.
We have conducted our evaluation in a standard PC with
an IA32 architecture. In addition to the PKCS implementa-
tion described here, we have also evaluated the entire NaCl
library core [11].
Our ﬁndings were the following. We have not encountered
any example where the assembly code generated from prop-
erly annotated and secure C code was rejected due to trans-
formations performed by CompCert. On the other hand,
there were several cases where the transformation valida-
tion stage led us to identify points in the C code where
Figure 7: Benchmarking results
there might be potential leakage problems (mostly asso-
ciated with the compilation of composed Boolean expres-
sions). Furthermore, when comparing the performance of
validated assembly code with that produced by CompCert
from non-annotated C code, there were no signiﬁcant devia-
tions in performance. These ﬁndings indicate that CompCert
behaves well in the preservation of the class of side-channel
countermeasures that we considered in this paper, when they
are deployed at the C level.
Regarding the overall performance of generated code, Fig-
ure 7 shows some selected benchmarking results, normalized
with respect to the performance of non-optimized GCC out-
put. For PKCS we show two cases. The values labeled
PKCS correspond to the natural comparison between Com-
pCert and GCC where both the trusted library and the PKCS
code are compiled using either GCC or CompCert. The val-
ues labeled PKCS (nolib) correspond to the case the trusted
library is pre-compiled and linked with the result of compil-
ing the PKCS code with either GCC or CompCert.
Our ﬁndings for the ﬁrst three cases are consistent with
the known reports on CompCert benchmarking when com-
paring CompCert with unoptimized GCC code: the former
outperforms the latter by roughly a factor of 2. When com-
paring with GCC at optimization level 1, we have found that
CompCert is at least 30% slower. These results are slightly
worse than previously reported values [26], which put this
value at roughly 15%. We attribute this discrepancy to the
domain-speciﬁc nature of our code, namely to side-channel
countermeasures and intensive use of arithmetic and bit-wise
operations.
In the PKCS (no lib) case, CompCert performs as well as
GCC at optimization level 1, which shows that most of the
speedups of GCC are being achieved in the optimization of
the trusted library.
6. CONCLUDING REMARKS
We have developed library extensions to EasyCrypt that
enable the development of cryptographic security proofs di-
rectly on a large subset of the C language, in an extended
security model where the adversary is given access to ex-
ecution traces modelling PC security. We have extended
the CompCert certiﬁed compiler with a mechanism for rea-
soning about programs relying on trusted libraries, as well
as a translation validation stage based on CompCert’s anno-
tation mechanism. We have shown that these mechanisms
along with a trusted library providing arithmetic operations
and instantiations of idealised operations are enough to pre-
serve correctness and PC security guarantees from a source
C program down to its compiled assembly executable. We
have also shown the independent value of the new CompCert
1227extensions for compiling third-party C programs whilst pre-
serving their claimed PC security properties.
Related work. Our work lies at the intersection of computer-
aided cryptography and certiﬁed compilation; we refer our
readers to [13] and [25] for recent accounts of these ﬁelds,
and focus this related work section on the veriﬁcation of
cryptographic implementations, and the formal treatment
of side-channels.
Machine-checked correctness proofs of implementations of
crypotographic primitives have been well-studied, using tech-
niques ranging from equivalence checking [32], to verifying
compilation [29], to deductive program veriﬁcation [5] and
interactive theorem proving [1]. However, these techniques
are focused on functional correctness and do not attempt
to formally carry provable security guarantees to the imple-
mentations.
Some proposals have been made towards obtaining com-
putational security guarantees of implementations of cryp-
tographic primitives and protocols. These are based on de-
ductive veriﬁcation [18], code generation [16], model extrac-
tion [4], reﬁnement type systems [20], or static information-
ﬂow analysis [24]. However, these techniques focus on source
program veriﬁcation and do not explicitly address executable
code, nor side-channel attacks.
In addition to being a core area of research in practi-
cal cryptography, side-channel attacks and countermeasures
have been studied extensively in related areas, namely in the
setting of programming languages [2, 3, 23, 34] and of the-
oretical cryptography [19, 6]. These works provide a more
general account of side-channel attacks, either by consider-
ing a more precise computational model, e.g. with caches,
or by providing a more abstract treatment of side-channels.
However, they typically reason in a single setting—source
code, assembly code, or an abstract model of computation.
In contrast, we precisely relate the leakage properties of
primitives to the security of algorithms and their executable
implementations.
Our work is also related to ongoing eﬀorts to formal-
ize programming languages and compilers.
In particular,
the idea of harnessing a general-purpose veriﬁcation tool
with the CompCert compiler appears in the Veriﬁed Software
Toolchain [7], and extensions of CompCert with arithmetic
libraries are considered in [14].
Directions for further work. We intend to leverage the de-
velopments of this paper to build a veriﬁed software toolchain
for cryptographic implementations.
A ﬁrst step towards this goal is to provide automated
support for the C mode of EasyCrypt; we are conﬁdent that
the additional complexity introduced by low-level consider-
ations can be managed automatically to a large extent. Au-
tomation is also instrumental for the feasibility of security
proofs in alternative leakage models. For example, we would
like to investigate stronger leakage models in which the ad-
versary could observe the list or set of memory addresses
accessed during the execution of an algorithm, as well as
weaker leakage models in which the adversary could observe
the number of operations performed during the execution of
an algorithm. Dealing with these alternative models would
also require extending EasyCrypt with further libraries and
to extend the new translation validation stage in CompCert
to guarantee the preservation of countermeasures adequate
for these leakage models.
The security notions we have formalized are at least as
strong as the standard notion of IND-CCA security, and
thus inherit the composability properties of this standard
notion. A natural (and ongoing) extension of our results
is to look at previous work on the composition of crypto-
graphic protocols (e.g., Universal Composability) and lever-
age them to produce veriﬁed implementations of higher-level
protocols. The major challenges here reside on the style of
cryptographic proofs that need to be formalized, which rely
on a simulation paradigm. Also interesting for future work
is the interaction of side-channel leakage at the IND-CCA
level with the security of higher-level protocols.
Finally, we did not tackle the correctness properties of the
big-integer trusted library that we use to extend C. We leave
it as an interesting challenge for future work to evaluate the
impact of side-channel countermeasures on the feasibility of
formally verifying the correctness of such a multi-precision
arithmetic library.
Acknowledgements
This work is supported by ONR Grant N000141210914, by
Amarout II (FP7 Marie Curie Actions-COFUND 291803),
by National Funds through the FCT - Funda¸c˜ao para a
Ciˆencia e a Tecnologia (Portuguese Foundation for Science
and Technology) within project ENIAC/2224/2009 and by
ENIAC Joint Undertaking under grant agreement number
120224. Part of this work was carried out while the second
author was visiting ´Ecole Normale Sup´erieure supported by
FCT grant SFRH/BSAB/1246/2012.
We are grateful to Benjamin Gr´egroire, Santiago Zanella-
B´eguelin and David Pointcheval for early discussions on the
OAEP proof and its EasyCrypt formalization.
7. REFERENCES
[1] Reynald Aﬀeldt, David Nowak, and Kiyoshi Yamada.
Certifying assembly with formal security proofs: The
case of BBS. Sci. Comput. Program.,
77(10-11):1058–1074, 2012.
[2] Johan Agat. Transforming out timing leaks. In
Proceedings of POPL’00, pages 40–53, 2000.
[3] Johan Agat and David Sands. On conﬁdentiality and
algorithms. In IEEE Symposium on Security and
Privacy, pages 64–77. IEEE Computer Society, 2001.
[4] Mihhail Aizatulin, Andrew D. Gordon, and Jan
J¨urjens. Computational veriﬁcation of C protocol
implementations by symbolic execution. In ACM
Conference on Computer and Communications
Security, pages 712–723. ACM, 2012.
[5] Jos´e Bacelar Almeida, Manuel Barbosa, Jorge Sousa
Pinto, and B´arbara Vieira. Deductive veriﬁcation of
cryptographic software. Innovations in Systems and
Software Engineering, 6(3):203–218, 2010.
[6] Jo¨el Alwen, Yevgeniy Dodis, and Daniel Wichs.
Survey: Leakage resilience and the bounded retrieval
model. In Kaoru Kurosawa, editor, ICITS, volume
5973 of Lecture Notes in Computer Science, pages
1–18. Springer, 2009.
[7] Andrew W. Appel. Veriﬁed software toolchain -
(invited talk). In ESOP’11, volume 6602 of Lecture
1228Notes in Computer Science, pages 1–17. Springer,
2011.
In ACM Conference on Computer and
Communications Security, pages 341–350. ACM, 2011.
[8] Manuel Barbosa, editor. Deliverable 5.4: Certiﬁed
[21] Eiichiro Fujisaki, Tatsuaki Okamoto, David
shared library core. Computer Aided Cryptography
Engineering (CACE FP7 EU Project), 2011.
http://www.cace-project.eu.
[9] Gilles Barthe, Benjamin Gr´egoire, Sylvain Heraud,
and Santiago Zanella-B´eguelin. Computer-aided
security proofs for the working cryptographer. In
Advances in Cryptology – CRYPTO 2011, volume
6841 of Lecture Notes in Computer Science, pages
71–90, Heidelberg, 2011. Springer.
[10] Gilles Barthe, Benjamin Gr´egoire, Yassine Lakhnech,
and Santiago Zanella-B´eguelin. Beyond provable
security. Veriﬁable IND-CCA security of OAEP. In
Topics in Cryptology – CT-RSA 2011, volume 6558 of
Lecture Notes in Computer Science, pages 180–196,
Heidelberg, 2011. Springer.
[11] Daniel J. Bernstein, Tanja Lange, and Peter Schwabe.
The security impact of a new cryptographic library. In
Alejandro Hevia and Gregory Neven, editors, Progress
in Cryptology - LATINCRYPT 2012, volume 7533 of
Lecture Notes in Computer Science, pages 159–176.
Springer Berlin Heidelberg, 2012.
[12] Yves Bertot, Nicolas Magaud, and Paul Zimmermann.
A proof of GMP square root. Journal of Automated
Reasoning, 29(3-4):225–252, 2002.
[13] Bruno Blanchet. Security protocol veriﬁcation:
Symbolic and computational models. In Pierpaolo
Degano and Joshua D. Guttman, editors, Principles of
Security and Trust - First International Conference,
POST 2012, volume 7215 of Lecture Notes in
Computer Science, pages 3–29. Springer, 2012.
[14] Sylvie Boldo, Jacques-Henri Jourdan, Xavier Leroy,
and Guillaume Melquiond. A formally-veriﬁed C
compiler supporting ﬂoating-point arithmetic. In Arith
- 21st IEEE Symposium on Computer Arithmetic,
pages 107–115. IEEE, 2013.
[15] Billy Bob Brumley, Manuel Barbosa, Dan Page, and
Frederik Vercauteren. Practical realisation and
elimination of an ECC-related software bug attack. In
Orr Dunkelman, editor, CT-RSA, volume 7178 of
Lecture Notes in Computer Science, pages 171–186.
Springer, 2012.
[16] David Cad´e and Bruno Blanchet. Proved generation of
implementations from computationally secure protocol
speciﬁcations. In POST, volume 7796 of Lecture Notes
in Computer Science, pages 63–82. Springer, 2013.
[17] Jean Paul Degabriele, Kenneth Paterson, and Gaven
Watson. Provable security in the real world. Security
Privacy, IEEE, 9(3):33–41, may-june 2011.
[18] Fran¸cois Dupressoir. Proving Cryptographic C
Programs Secure with General-Purpose Veriﬁcation
Tools. PhD thesis, Open University, 2013.
[19] Stefan Dziembowski and Krzysztof Pietrzak.
Leakage-resilient cryptography. In 49th Annual IEEE
Symposium on Foundations of Computer Science,
FOCS 2008, pages 293–302, Washington, 2008. IEEE
Computer Society.
[20] C´edric Fournet, Markulf Kohlweiss, and Pierre-Yves
Strub. Modular code-based cryptographic veriﬁcation.
Pointcheval, and Jacques Stern. RSA-OAEP is secure
under the RSA assumption. In Advances in Cryptology
– CRYPTO 2001, volume 2139 of Lecture Notes in
Computer Science, pages 260–274. Springer, 2001.
[22] Shaﬁ Goldwasser and Silvio Micali. Probabilistic
encryption. J. Comput. Syst. Sci., 28(2):270–299,
1984.
[23] Boris K¨opf, Laurent Mauborgne, and Mart´ın Ochoa.
Automatic quantiﬁcation of cache side-channels. In
Proc. 24th International Conference on Computer
Aided Veriﬁcation (CAV ’12), pages 564–580.
Springer, 2012.
[24] Ralf K¨usters, Tomasz Truderung, and Juergen Graf. A
framework for the cryptographic veriﬁcation of
Java-like programs. In CSF, pages 198–212. IEEE,
2012.
[25] Xavier Leroy. Formal certiﬁcation of a compiler
back-end, or: programming a compiler with a proof
assistant. In 33rd ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages,
POPL 2006, pages 42–54, New York, 2006. ACM.
[26] Xavier Leroy, editor. The CompCert C veriﬁed
compiler: Documentation and user’s manual. INRIA
Paris-Rocquencourt, 2013.
[27] James Manger. A chosen ciphertext attack on RSA
optimal asymmetric encryption padding (OAEP) as
standardized in PKCS#1 v2.0. In Advances in
Cryptology – CRYPTO 2001, volume 2139 of Lecture
Notes in Computer Science, pages 230–238,
Heidelberg, 2001. Springer.
[28] David Molnar, Matt Piotrowski, David Schultz, and
David Wagner. The program counter security model:
Automatic detection and removal of control-ﬂow side
channel attacks. In ICISC, volume 3935 of Lecture
Notes in Computer Science, pages 156–168. Springer,
2005.
[29] Lee Pike, Mark Shields, and John Matthews. A
verifying core for a cryptographic language compiler.
In ACL2, pages 1–10. ACM, 2006.
[30] Phillip Rogaway. Practice-oriented provable security
and the social construction of cryptography.
Unpublished essay, 2009.
[31] Sabine (formerly Fischer) Schmaltz. Formal
veriﬁcation of a big integer library including division.
Master’s thesis, Saarland University, 2007.
[32] Eric Whitman Smith and David L. Dill. Automatic
formal veriﬁcation of block cipher implementations. In
FMCAD, pages 1–7. IEEE, 2008.
[33] Falko Strenzke. Manger’s attack revisited. In Miguel
Soriano, Sihan Qing, and Javier L´opez, editors,
Information and Communications Security, volume
6476 of Lecture Notes in Computer Science, pages
31–45. Springer Berlin Heidelberg, 2010.
[34] Danfeng Zhang, Aslan Askarov, and Andrew C.
Myers. Language-based control and mitigation of
timing channels. In ACM SIGPLAN Conference on
Programming Language Design and Implementation
(PLDI ’12), pages 99–110. ACM, 2012.
1229