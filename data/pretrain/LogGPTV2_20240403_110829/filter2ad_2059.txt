title:BitMiner: Bits Mining in Internet Traffic Classification
author:Zhenlong Yuan and
Yibo Xue and
Mihaela van der Schaar
BitMiner: Bits Mining in Internet Trafﬁc Classiﬁcation
Zhenlong Yuan∗‡, Yibo Xue†‡ and Mihaela van der Schaar(cid:3)
(cid:3)Department of Electrical Engineering, UCLA, Los Angeles, CA, USA
∗Department of Automation, Tsinghua University, Beijing, China
†Tsinghua National Lab for Information Science and Technology, Beijing, China
‡Research Institute of Information Technology, Tsinghua University, Beijing, China
PI:EMAIL, PI:EMAIL, PI:EMAIL
ABSTRACT
Traditionally, signatures used for traﬃc classiﬁcation are
constructed at the byte-level. However, as more and more
data-transfer formats of network protocols and applications
are encoded at the bit-level, byte-level signatures are losing
their eﬀectiveness in traﬃc classiﬁcation. In this poster, we
creatively construct bit-level signatures by associating the
bit-values with their bit-positions in each traﬃc ﬂow. Fur-
thermore, we present BitMiner, an automated traﬃc min-
ing tool that can mine application signatures at the most
ﬁne-grained bit-level granularity. Our preliminary test on
popular peer-to-peer (P2P) applications, e.g. Skype, Google
Hangouts, PPTV, eMule, Xunlei and QQDownload, reveals
that although they all have no byte-level signatures, there
are signiﬁcant bit-level signatures hidden in their traﬃc.
CCS Concepts
•Networks → Network management;
Keywords
Traﬃc classiﬁcation, bit-level signatures, bits mining
1.
INTRODUCTION
Signature based traﬃc classiﬁcation has been playing an
important role in a broad range of network operations and
security management, such as quality-of-service control and
intrusion detection. However, due to the increasing number
of network applications and their frequent updates, it is be-
coming more challenging to keep track of the signatures. To
address this challenge, a number of existing solutions have
focused on automatically extracting signatures at the byte-
level [4, 5], which ﬁrst divide packet payloads into groups
of consecutive bytes and then analyze to get the possible
signatures. However, those solutions have two major limi-
tations. Firstly, they are unable to discover signatures at
the more ﬁne-grained bit-level granularity. Note that pre-
vious work [1, 2] have revealed that bit-level characteristics
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
SIGCOMM ’15 August 17-21, 2015, London, United Kingdom
c(cid:2) 2015 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-3542-3/15/08.
DOI: http://dx.doi.org/10.1145/2785956.2789997
(group of 4 bits, less than 1 byte) are of great importance
in identifying a few P2P applications. Secondly, they con-
ﬁne signatures to groups of consecutive bytes and thus are
hard to discover the signatures that consist of inconsecu-
tive bytes (e.g. 1 byte) in packet payloads. In this poster,
we propose the novel bit-level signatures, and present an
automated traﬃc mining tool (BitMiner) that can mine sig-
natures at the most ﬁne-grained bit-level granularity.
2. BITMINER
In this poster, we have two observations. The ﬁrst is that
an application signature should be robust enough to sup-
port per-ﬂow identiﬁcation due to the prevalence of asym-
metric routing. For this reason, a favorable application sig-
nature should be one of the most frequent patterns in cap-
tured traﬃc after running an application for plenty of times.
Therefore, our goal can turn into mining the most frequen-
t patterns1 in the application traﬃc. The second is that
the bit-value of a bit-position in a ﬂow often determines the
bit-values of other bit-positions in this ﬂow. Therefore, we
are motivated to associate all the bit-values with their bit-
positions in a ﬂow for frequent pattern mining.
1st byte of 1st packet
Bit-order
e
s
a
b
a
t
a
D
n
o
i
t
c
a
s
n
a
r
T
0 0 0 0 0 0 1
0 0 0 0 0 1 0
…
0 0 0 0 0 7 1
…
Packet-order
Bit-value
Last item of 1st byte
0 0 0 0 0 0 0
…
0 0 0 0 0 8 1
… 0 1 0 0 0 0 0
1st item of 1st byte
1st item of 2nd byte
1st item of 2nd packet
All items of 1st packet
0 0 0 0 0 0 1
0 0 0 0 0 1 1
…
0 A 1 B C D 1 …
Item
2nd item of 1st byte
Figure 1: Format Traﬃc Flows to Transactions
TID 1
TID 2
TID 3
As shown in Figure 1, we can take a bit-value with it-
s position in a ﬂow as anitem and take all the bit-values
with their individual positions in this ﬂow as a transaction.
Notice that we use only two hexadecimal characters to rep-
resent an item’s packet-order in a ﬂow because application
signatures are generally required to achieve early identiﬁca-
tion in practical use and the ﬁrst 256 (0x00∼0xFF) packets
of a ﬂow are suﬃcient enough. Similarly, we use four hex-
adecimal characters to represent one item’s bit-order in a
1From here, we start using some terms in Data Mining.
93Applications
Application Signatures
Support (Recall)
Skype
^(002_0x02)+(002_0_0 & 002_4_1 & 002_5_1 & 002_6_0 & 002_7_1)*$
Xunlei (Thunder)
^(001_0_0 & 003_0_0 & 003_1_1 & 003_2_0)*$
eMule
^(000_0_0 & 000_4_0 & 001_0_0 & 001_4_0 & 000_6_0 & 001_1_0 & 001_5_0) | (000_0_0 & 
000_4_0 & 001_0_0 & 001_4_0 & 000_6_1 & 001_1_1 & 001_5_1)*$
Google Hangouts
^(000_0_1 & 000_1_0 & 001_1_1 & 001_3_0)*$
PPTV (PPLive)
QQDownload
^(007_0_0 & 007_1_0 & 007_2_0 & 007_3_0 & 008_0x00 & 009_0_0 & 009_1_0 & 009_2_0 
& 009_3_0 & 009_6_0 & 00A_0_0 & 00A_1_0 & 00A_2_0 & 00A_3_0)*$
^(000_1_1 & 000_2_1 & 000_5_1 & 000_7_0 & 001_0_0 & 001_1_0 & 002_0_0 & 002_1_0 & 
002_7_0 & 003_0_0 & 004_0_0 & 005_0_0 & 007_5_0 & 009_0_0 & 00A_1_0)*$
100.00%
100.00%
100.00%
100.00%
100.00%
100.00%
Table 1: The Generated Bit-level Signatures
packet payload because the MTU of an IP packet over Eth-
ernet networks is 1500-byte where 1 byte has 8 bit-orders.
Figure 2: An Example of How BitMiner Works
BitMiner consists of two parts: Bit-table and Miner-tree.
Figure 2 shows an example of how BitMiner works. Bit-table
is a hash table used for hashing and storing all the items read
from a transaction database. In this process, Bit-table will
read the transaction database twice. For the ﬁrst time, Bit-
table will count the support of every item. For the second
time, Bit-table will remove the items whose support is below
the initially set support threshold and sort the remaining
items in every transaction by their supports (maximum to
minimum). After that, all the sorted transactions will be
entered into Miner-tree as a new transaction database.
Miner-tree is a preﬁx tree of the new transactions, which
takes idea from the FP-tree [3] but is diﬀerent. Note that
there are probably multiple tasks running within an appli-
cation and thus the signature could be a regular expres-
sion. Considering a transaction (ﬂow) can only belong to
one of the tasks, all the transactions are divided into mul-
tiple clusters to represent diﬀerent tasks. Since the items
in each transaction have been sorted by their supports, it is
extremely fast to construct the Miner-tree.
After constructing the Miner-tree, there will be a prun-
ing process controlled by two thresholds: minimum support
and minimum conﬁdence. Particularly, the support (deﬁned
as the proportion of transactions in a node from the whole
transaction database) will be checked for every single node.
Moreover, the conﬁdence (deﬁned as the proportion of trans-
actions in all the child-nodes of a node from the node itself)
will be checked for every parent node. In this way, it can be
determined whether a branch should be removed or a par-
ent node should stop splitting. Finally, the branches of the
pruned Miner-tree are the target signature.
3. EVALUATION
BitMiner has been tested on the UDP traﬃc of six pop-
∧
ular applications. As shown in Table 1, every signature is
generated by BitMiner within a few seconds. The “(p)” rep-
resents a pattern (p) matching within one packet’s payload,
(p)” represents this matched packet is the ﬁrst packet
the “
of a ﬂow, the “(p)$” represents this matched packet is the last
packet of a ﬂow, the “(p)+” represents this matched pack-
et appears one or more times in succession within a ﬂow,
the “(p)∗” represents this matched packet appears zero or
more times in succession within a ﬂow, the “002_0x02” rep-
resents the third byte value of a packet’s payload is 0x02,
the “002_4_1” represents the fifth bit value of the third
byte is 1, the “p&p” represents two patterns matching with
one packet’s payload simultaneously and the “(p)|(p)” repre-
sents either one matched packet appears within a ﬂow. For
instance, the third byte values of the ﬁrst one or more pack-
ets of a Skype ﬂow are always0x02 while five bit values of
the third bytes of all the other packets are ﬁxed. Special-
ly, we also examine the other bits adjacent to the mined
ones, such as the ‘second, third and fourth’ bits of the third
bytes of Skype ﬂows and the ‘fourth, ﬁfth, sixth, seventh and
eighth’ bits of thefourth bytes of Thunder ﬂows. The re-
sults show that those bit-values are completely random (i.e.
uniformly distributed). Also as shown in Table 1, the sup-
port represents the proportion of ﬂows matched with the
mined signature, which is equivalent to the recall in traf-
ﬁc classiﬁcation. In addition, a longer signature generally
means a better precision. For example, if we check the ﬁrst
10 packets of a Thunder ﬂow, the signature used for match-
ing is totally 40 bits long, which may be robust enough to
get a high precision in real-world situations.
4. ACKNOWLEDGEMENT
This work was supported by the National Key Technology
R&D Program of China under Grant No.2012BAH46B04.
5. REFERENCES
[1] D. Bonﬁglio, M. Mellia, M. Meo, D. Rossi, and P. Tofanelli.
Revealing skype traﬃc: when randomness plays with you. In
ACM SIGCOMM, 2007.
[2] A. Finamore, M. Mellia, M. Meo, and D. Rossi. Kiss: stochastic
packet inspection classiﬁer for udp traﬃc. IEEE/ACM
Transactions on Networking, 2010.
[3] J. Han, J. Pei, and Y. Yin. Mining frequent patterns without
candidate generation. In ACM SIGMOD, 2000.
[4] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and G. M. Voelker.
Unexpected means of protocol inference. In ACM SIGCOMM
IMC, 2006.
[5] Z. Zhang, Z. Zhang, P. P. Lee, Y. Liu, and G. Xie. Proword: an
unsupervised approach to protocol feature word extraction. In
IEEE INFOCOM, 2014.
94