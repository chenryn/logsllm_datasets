# BitMiner: Bits Mining in Internet Traffic Classification

## Authors
- Zhenlong Yuan<sup>∗‡</sup>
- Yibo Xue<sup>†‡</sup>
- Mihaela van der Schaar<sup>(cid:3)</sup>

<sup>(cid:3)</sup>Department of Electrical Engineering, UCLA, Los Angeles, CA, USA  
<sup>∗</sup>Department of Automation, Tsinghua University, Beijing, China  
<sup>†</sup>Tsinghua National Lab for Information Science and Technology, Beijing, China  
<sup>‡</sup>Research Institute of Information Technology, Tsinghua University, Beijing, China

**Contact:** PI:EMAIL, PI:EMAIL, PI:EMAIL

## Abstract
Traditionally, traffic classification signatures are constructed at the byte-level. However, as more data-transfer formats of network protocols and applications are encoded at the bit-level, byte-level signatures are becoming less effective. In this poster, we introduce bit-level signatures by associating bit-values with their bit-positions in each traffic flow. We present BitMiner, an automated traffic mining tool that can extract application signatures at the most fine-grained bit-level granularity. Our preliminary tests on popular peer-to-peer (P2P) applications, such as Skype, Google Hangouts, PPTV, eMule, Xunlei, and QQDownload, reveal that although these applications have no byte-level signatures, they exhibit significant bit-level signatures in their traffic.

### CCS Concepts
- **Networks → Network management**

### Keywords
Traffic classification, bit-level signatures, bits mining

## 1. Introduction
Signature-based traffic classification plays a crucial role in various network operations and security management tasks, including quality-of-service control and intrusion detection. However, the increasing number of network applications and their frequent updates make it challenging to maintain up-to-date signatures. Existing solutions focus on automatically extracting signatures at the byte-level, which involves dividing packet payloads into groups of consecutive bytes and analyzing them to identify possible signatures. These solutions have two major limitations: they cannot discover signatures at the more fine-grained bit-level, and they confine signatures to groups of consecutive bytes, making it difficult to identify signatures that span non-consecutive bytes. In this poster, we propose bit-level signatures and present BitMiner, an automated traffic mining tool that can extract signatures at the bit-level.

## 2. BitMiner
In this poster, we make two key observations:
1. An application signature should be robust enough to support per-flow identification, especially in the presence of asymmetric routing. Therefore, a favorable application signature should be one of the most frequent patterns in captured traffic after running the application multiple times.
2. The bit-value of a bit-position in a flow often determines the bit-values of other bit-positions in the same flow. This motivates us to associate all bit-values with their bit-positions in a flow for frequent pattern mining.

### Format Traffic Flows to Transactions
As shown in Figure 1, we treat a bit-value with its position in a flow as an item and all the bit-values with their individual positions in the flow as a transaction. We use two hexadecimal characters to represent an item's packet-order in a flow, as the first 256 (0x00∼0xFF) packets are generally sufficient for early identification. Similarly, we use four hexadecimal characters to represent an item's bit-order in a packet payload, given that the MTU of an IP packet over Ethernet networks is 1500 bytes, where 1 byte has 8 bit-orders.

### BitMiner Architecture
BitMiner consists of two main components: the Bit-table and the Miner-tree.

#### Bit-table
The Bit-table is a hash table used for hashing and storing all items read from a transaction database. It reads the transaction database twice:
- First, it counts the support of every item.
- Second, it removes items with support below a set threshold and sorts the remaining items in each transaction by their support (from maximum to minimum).

#### Miner-tree
The Miner-tree is a prefix tree of the new transactions, inspired by the FP-tree [3] but with some differences. Since multiple tasks may run within an application, the signature could be a regular expression. Each transaction (flow) is divided into multiple clusters to represent different tasks. The items in each transaction are sorted by their supports, making it fast to construct the Miner-tree.

After constructing the Miner-tree, a pruning process controlled by two thresholds—minimum support and minimum confidence—is applied. The support (the proportion of transactions in a node from the whole transaction database) and the confidence (the proportion of transactions in all child-nodes of a node from the node itself) are checked for each node and parent node, respectively. This determines whether a branch should be removed or a parent node should stop splitting. The branches of the pruned Miner-tree are the target signatures.

## 3. Evaluation
BitMiner has been tested on the UDP traffic of six popular applications. As shown in Table 1, each signature is generated within a few seconds. The notation used in the signatures is as follows:
- `(p)` represents a pattern (p) matching within one packet’s payload.
- `^(p)` represents the matched packet is the first packet of a flow.
- `(p)$` represents the matched packet is the last packet of a flow.
- `(p)+` represents the matched packet appears one or more times in succession within a flow.
- `(p)*` represents the matched packet appears zero or more times in succession within a flow.
- `002_0x02` represents the third byte value of a packet’s payload is 0x02.
- `002_4_1` represents the fifth bit value of the third byte is 1.
- `p&p` represents two patterns matching with one packet’s payload simultaneously.
- `(p)|(p)` represents either one matched packet appearing within a flow.

For example, the third byte values of the first one or more packets of a Skype flow are always 0x02, while five bit values of the third bytes of all other packets are fixed. Additionally, we examined adjacent bits, such as the second, third, and fourth bits of the third bytes of Skype flows and the fourth, fifth, sixth, seventh, and eighth bits of the fourth bytes of Thunder flows. The results show that these bit-values are completely random (uniformly distributed). The support in Table 1 represents the proportion of flows matched with the mined signature, equivalent to the recall in traffic classification. A longer signature generally means better precision. For instance, checking the first 10 packets of a Thunder flow, the signature used for matching is 40 bits long, which is robust enough for high precision in real-world situations.

## 4. Acknowledgements
This work was supported by the National Key Technology R&D Program of China under Grant No.2012BAH46B04.

## 5. References
[1] D. Bonfiglio, M. Mellia, M. Meo, D. Rossi, and P. Tofanelli. Revealing skype traffic: when randomness plays with you. In ACM SIGCOMM, 2007.

[2] A. Finamore, M. Mellia, M. Meo, and D. Rossi. KISS: Stochastic packet inspection classifier for UDP traffic. IEEE/ACM Transactions on Networking, 2010.

[3] J. Han, J. Pei, and Y. Yin. Mining frequent patterns without candidate generation. In ACM SIGMOD, 2000.

[4] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and G. M. Voelker. Unexpected means of protocol inference. In ACM SIGCOMM IMC, 2006.

[5] Z. Zhang, Z. Zhang, P. P. Lee, Y. Liu, and G. Xie. ProWord: An unsupervised approach to protocol feature word extraction. In IEEE INFOCOM, 2014.