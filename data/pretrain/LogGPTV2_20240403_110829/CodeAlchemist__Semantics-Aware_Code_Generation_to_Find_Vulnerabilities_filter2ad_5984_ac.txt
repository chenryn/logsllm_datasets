4)
5)
6)
{} → Var1 → {n}
{} → Var2 → {arr}
{n,arr} → For3-0 → {n,arr}
{n} → For3-1 → {n,i}
{i,n,arr} → Block4 → {i,n,arr}
{i,n,arr} → Expr5 → {i,n,arr}
We note that For3-0 corresponds to the whole for-loop
including its body, and it does not deﬁne any new variable,
because the variable i is not live after escaping from the for-
loop. However, the same variable i is considered as a deﬁned
variable for For3-1 because it is accessible within the loop
body, i.e., it is live at the entry of the loop body. The For3-1
code brick is used to create a new for-loop from scratch by
ﬁlling in its body with other code bricks.
CodeAlchemist then rewrites the given seed ﬁle to log types
of all the variables in each of the code bricks. Since we split
off a seed in the granularity of JS statements, we instrument
every JS statement. By executing the rewritten seed, we can
dynamically identify types of all the variables used or deﬁned
in each code brick. For example, we can ﬁgure out that the
variable i and n are a Number, and the variable arr is an
Array. CodeAlchemist annotates each code brick with the
inferred type information, which forms an assembly constraint.
For instance, the assembly constraint for Expr5 is as follows.
Pre: {s0: Number, s1: Number, s2: Array}
↓
Post: {s0: Number, s1: Number, s2: Array}.
Expr5↓
The assembly constraint indicates that one or more code bricks
should precede Expr5 because its precondition requires the
three deﬁned variables. After this step, our pool contains six
annotated code bricks.
Finally, CodeAlchemist generates test cases by interlocking
code bricks in the pool. It starts with an empty code brick
B0 that has an empty assembly constraint. Since B0 has no
postcondition, we can only append a code brick to B0 if it does
not have any precondition. There are two such code bricks:
Var1 and Var2. CodeAlchemist selects one at random, and
in this example, CodeAlchemist picks Var2. It then creates a
new code brick B1 by merging B0 with Var2, which simply
results in Var2 (Line 1 in Figure 6b).
The combined code brick B1 has a postcondition that
deﬁnes an Array variable. This means a code brick that uses
an Array variable in its precondition can follow B1. However,
in our case, there are still two available candidates: Var1
or Var2. For instance, For3-0 is not available, because
it depends on a Number variable as well as an Array
variable. Suppose CodeAlchemist selects Var1, and appends
it to B1 to obtain a new code brick B2 that contains two
consecutive JS statements Var2 and Var1. When we compute
the postcondition of B2, it contains two variables: an Array
and a Number variable.
Therefore, there are four distinct code bricks that we can
append to B2: Var1, Var2, For3-0, and For3-1. In
this example, CodeAlchemist randomly picks For3-1 among
the candidates, and connects it with B2, which results in a new
code brick B3 containing two assignment statements followed
by an empty for loop. We compute the postcondition of B3,
which has two Number variables (s1 and s2) and an Array
variable (s0). Therefore, at this point, any code bricks in
our pool can be appended to B3. Suppose CodeAlchemist
randomly picks For3-1 as the next code brick, and appends
it to B3 to generate a new code brick B4, which represents
the entire code snippet shown in Figure 6b. Assuming that
we have set the maximum number of attempts for code brick
generation to three, CodeAlchemist stops to expand the code
brick at this point. CodeAlchemist repeats this process to fuzz
the target engine until it hits a timeout.
V. CODEALCHEMIST DESIGN
In this section, we present the design and implementation
of CodeAlchemist in detail. CodeAlchemist enables semantics-
aware test case generation for JS engines, which allows us to
discover security vulnerabilities from the target engines.
A. Seed Fragmentization
In this paper, we have deﬁned a code brick as a valid AST
(see §IV-A). According to the ECMAScript standard [9], a
JS AST is expressed as a set of statements and expressions,
where a statement can recursively include other statements and
expressions. For example, a while statement consists of a
guard and a body statement, where the body statement can
contain a group of other statements and expressions.
One straightforward way of fragmentizing ASTs is to
follow the approach of LangFuzz [17], where it breaks an AST
into a set of subtrees by making each of its non-terminal nodes
in the AST as a root node of a subtree. However, as the authors
admitted there can be many overlapped fragments in the pool
if we consider every non-terminal node in the AST.
Another way is to split
them in the granularity of JS
expressions. Since a JS expression itself forms a valid AST, it
can be a valid code brick too. Expression-level fragmentization
results in smaller number of code bricks compared to the
LangFuzz’s approach, but it does not capture the high-level
structure of JS code. For instance, it is not straightforward
to generate a JS statement that contains a for-loop with
expression-level fragmentization.
In our current implementation of CodeAlchemist, we frag-
mentize seeds in the granularity of JS statements. Since every
code brick represents a valid statement, it is straightforward
to interconnect them to make a valid JS code snippet: we
can simply arrange them in a sequential order. Furthermore,
statement-level fragmentization signiﬁcantly reduces the num-
ber of code bricks to consider compared to that of the two
aforementioned fragmentization approaches. However, it is not
difﬁcult to express complex semantic structure of JS with our
code bricks.
6
The SEED PARSER module recursively traverses each state-
ment in an AST, and returns a set of fragmentized code bricks.
Since a JS statement can be nested, we need to recursively ﬁnd
every statement. While traversing an AST, we may encounter a
block statement, which is a group of statements. For example,
a body of a while-loop is a block statement. For every block
statement, we make two separate code bricks: one with the
whole original body, and another with an empty body. If the
block statement has a guard, we make an additional code brick
that contains the statement as a whole, but without the guard.
For instance, consider the following while statement:
1
while (x) { i += 1; }
This statement will produce four code bricks in total. One code
brick contains the whole while-loop including the body:
1
while (s0) { s1 += 1; } // Code Brick w/ body
Another code brick has the while-loop with an empty body:
1
while (s0) {} // Code Brick w/o body
Another code brick has the loop body without the guard:
1
{ s0 += 1; } // Code Brick w/o guard
The ﬁnal code brick is found by the recursive traversal:
1
s0 += 1; // Last Code Brick
This is to increase the likelihood of generating test cases with
a complex and nested control structure, while preserving the
original semantic structure of given seeds. From our experi-
ments, we observed that highly-constructed JS code tends to
trigger security-related bugs of JS engines.
B. Code Brick Pool
CodeAlchemist builds a code brick pool that contains a
unique set of code bricks obtained from various seed ﬁles.
Since there can be syntactically different, but semantically the
same code bricks, CodeAlchemist deduplicates them and only
stores unique code bricks to the pool. Particularly, CodeAl-
chemist considers two code bricks to be the same, when they
have the same AST except for their symbols. For instance, the
two statements in Line 5 and Line 6 in Figure 6a are the same
if we normalize their symbols.
CodeAlchemist also ﬁlters out several uninteresting code
bricks from the pool. First, there are several built-in functions
that hinder the fuzzing process when building a code brick
pool, such as crash function on SpiderMonkey. The crash
function will literally raise a SIGSEGV signal when executed.
Therefore, if we have such a code brick that contains a call to
crash, we may end up having too many false alarms from our
fuzzer. We also exclude the eval function when building code
bricks. Since CodeAlchemist currently cannot infer assembly
constraints for dynamically generated code, we may encounter
runtime errors when we combine code bricks that invoke the
eval function. Finally, we also eliminate code bricks that can
be considered as no-op, e.g., an expression statement with a
literal (42;) is effectively a no-op.
To ensure that generated code bricks are syntactically
correct, we evaluate all of them on the target JS engine once.
If there is a syntax error, we remove such code bricks from
our pool. From our empirical study, only 1.3% of code bricks
generated from semantics-aware assembly result in a syntax
error, and most of them are due to dynamically generated code
using the Function object.
C. Semantics-Preserving Variable Renaming
CodeAlchemist renames variables of code bricks in two
cases: (1) when it builds a code brick pool (recall §V-B), it
deduplicates semantically the same code bricks by normalizing
symbols in each code brick; and (2) when it assembles two
code bricks, it renames symbols so that all the used variables
can refer to variables of the same type.
However, there are pre-deﬁned symbols that we cannot
simply rename as we may break their semantics. In particular,
each JS engine has pre-deﬁned symbols, which are so-called
built-in objects. For example, RegExp is a pre-deﬁned object
for a regular expression, and thus, we cannot simply change
the symbol as it means a speciﬁc built-in JS object.
To rename symbols in code bricks while preserving their
semantics, CodeAlchemist initially gets a list of built-in objects
by executing the target JS engine once at startup. When
renaming symbols in a code brick, we exclude symbols in
the list. More speciﬁcally, we incrementally assign a sequential
number for each unique symbol in the order of their appearance
in the AST, and assign a new name for each symbol by
preﬁxing “s” to its number. That is, we give a symbol name
s0, s1,··· , sn to n distinct symbols in the code brick in
the order of their appearance in the AST.
D. Data-Flow Analysis
The Analyze function statically performs a data-ﬂow
analysis to identify variables that are used and deﬁned in each
code brick. For a given code brick B, deﬁned variables of
B are the ones that are live at the exit point of B. We can
compute such variables for a given code brick with a traditional
live variable analysis [1] based on the control-ﬂow graph of
the code brick. We say variables in a code brick B are used
variables if they do not have a reaching deﬁnition [1]. We
compute used variables of a code brick by maintaining a use-
def chain.
Since our analysis is path-insensitive as in traditional data-
ﬂow analyses, we may incorrectly judge deﬁned and used
variables from a code brick. For example, suppose there is
a code brick that contains a single if statement where the
true branch assigns a number to a variable x, and the false
branch does not touch the variable x at all. Depending on the
condition of the if statement, the variable x can be considered
as deﬁned or not. However, our analysis will always say the
variable is deﬁned. This means our analysis may incorrectly
judge the assembly constraint of a given code brick. However,
making the computation of assembly constraints precise with
a path-sensitive analysis is beyond the scope of this paper.
E. Type Analysis
Recall from §II-A, the JS type system has only seven
primitive types. If we only consider such primitive types, CON-
STRAINT ANALYZER may over-approximate types of variables
in each code brick as an Object type because nearly all
7
objects in JS are instances of Object [21]. For example, any
useful data structure types in JS such as Array and Map are
inherited from the Object type.
The key problem here is that by over-approximating assem-
bly constraints for code bricks, we may easily hit a runtime
error when executing interconnected code bricks. For instance,
suppose there are three code bricks each of which consists of
a single JS statement as follows:
1
2
3
o = {}; // Code Brick A
a = new Array(42); // Code Brick B
s = a.sort(); // Code Brick C
If our type system can only distinguish primitive JS types,
the code brick A will have a postcondition {s0 : Object},
and the code brick C will have a precondition {s0 : Object}.
Since the precondition of C and the post condition of A match,
CodeAlchemist will happily combine them into a code brick,
which will produce the following JS code snippet:
1
2
s0 = {};
s1 = s0.sort();
Note, however, this will raise a runtime error (TypeError)
when evaluated because the sort member function is not
deﬁned in s0.
To handle such problems, CodeAlchemist build our own
type system that includes the seven primitive types as well as
all the subtypes of Object deﬁned in built-in constructors of
the target JS engine. With our type system, we can distinguish
between Array and Object. Thus, CodeAlchemist will not
attempt to combine A and C from the above example.
CodeAlchemist dynamically infers types of the variables
in each code brick by instrumenting the corresponding JS
seed ﬁle. Particularly, the Instrument function rewrites a
given JS seed by inserting type logging functions both at the
beginning and at the end of each code brick. We recursively
insert logging functions for every possible code brick of a
given JS seed ﬁle. Each logging function takes in a list of
variables as input, and returns a mapping from the variable
names to dynamically inferred types. By executing the target
JS engine with the rewritten seed, CodeAlchemist can compute
assembly constraints for every code brick in the seed.
Note that two or more distinct seed ﬁles may have seman-
tically the same code bricks after variable renaming. Although
two code bricks from two different seed ﬁles have exactly
the same AST, types of the variable in the code bricks may
differ depending on their execution context. Let us consider
the following code brick containing an if statement.
1
2
if (x  0 then
B(cid:48) ← GenBlkBrick(P , B, pblk, iblk, dmax-1)
5
6
7
else
B(cid:48) ← PickBrick(P , B)
B ← MergeBricks(B, B(cid:48))
return B
8
9 function GenBlkBrick(P , B, pblk, iblk, dmax)
10
11
12
13
14
B(cid:48) ← PickEmptyBlock(P , B)
B0 ← GetDummyBrick(B, B(cid:48))
i ← RandInt(iblk)
B(cid:48)(cid:48) ← Generate(P , B0, i, pblk, iblk, dmax)
return MergeBricks(B(cid:48), B(cid:48)(cid:48))
the assembly constraint. This is another instance where our
technique lacks precision due to its path-insensitivity. As we