不是这样做的。
这些参数可能需要用 `\e' 来escape 或者用括号括住，防止它们被shell展开。命令是从起始目录执行的。
.IP "\-fls \fIfile\fR"
返回true；类似 \-ls 但是像 \-fprint 那样写入 \fIfile\fR。
.IP "\-fprint \fIfile\fR"
返回true；将文件全名打印到文件 \fIfile\fR 中。如果运行 \fBfind\fR 时 \fIfile\fR 不存在，那么它将被创建。如果它存在，它将被覆盖。文件名``/dev/stdout'' 和``/dev/stderr'' 会作特殊处理；它们分别指的是标准输出和标准错误输出。
.IP "\-fprint0 \fIfile\fR"
返回true；类似 \-print0 但是像 \-fprint 那样写入 \fIfile\fR。
.IP "\-fprintf \fIfile\fR \fIformat\fR"
返回true；类似 \-printf 但是像 \-fprint 那样写入 \fIfile\fR。
.IP "\-ok \fIcommand\fR ;"
类似 \-exec 但是会先向用户询问 (在标准输入); 如果回应不是以 `y' 或 `Y' 起始则不会运行 \fIcommand\fR 而是返回false。
.IP \-print
返回true；在标准输出打印文件全名，然后是一个换行符。
.IP \-print0
返回true；在标准输出打印文件全名，然后是一个null字符。这样可以使得处理 \fBfind\fR 的输出的程序可以正确地理解带有换行符的文件名。
.IP "\-printf \fIformat\fR"
返回true；在标准输出打印 \fIformat\fR , 解释 `\e' escape 还有 `%' 指令。字段宽度和精度可以像C函数 `printf' 那样来指定。与 \-print 不同的是, \-printf 在字符串末端不会添加一个新行。可用的escape 和指令如下：
.RS
.IP \ea
警告铃声
.IP \eb
回退
.IP \ec
立即停止以当前格式输出，刷新输出设备。
.IP \ef
表格结束
.IP \en
新行
.IP \er
回车
.IP \et
水平tab
.IP \ev
竖直tab
.IP \e\e
输出自身`\e'
.IP \eNNN
ASCII编码是NNN(八进制)的字符
.PP
在一个 `\e' 字符后面使用任何其他字符会被作为普通的字符，因此它们都会被打印出来。
.IP %%
输出自身`%'
.IP %a
文件最后一次存取的时间。格式是C函数 `ctime' 返回值的格式。
.IP %A\fIk\fP
文件最后一次存取的时间。格式以 \fIk\fR 指定，可以是 `@' 或者是C函数 `strftime' 的指令格式。下面列出了 \fIk\fR 可用的值；有一些并不是在所有系统上都可用，因为不同系统中 `strftime' 也不同。
.RS
.IP @
从 Jan. 1, 1970, 00:00 GMT 起的秒数
.PP
时间字段：
.IP H
小时 (00..23)
.IP I
小时 (01..12)
.IP k
小时 ( 0..23)
.IP l
小时 ( 1..12)
.IP M
分钟 (00..59)
.IP p
本地的 AM 或者 PM
.IP r
12小时格式的时间 (hh:mm:ss [AP]M)
.IP S
秒 (00..61)
.IP T
24小时格式的时间 (hh:mm:ss)
.IP X
本地的时间表示方法 (H:M:S)
.IP Z
时区(例如，EDT)，如果不能决定时区就是空
.PP
日期字段：
.IP a
本地一星期中每天的名称的缩写(Sun..Sat)
.IP A
本地一星期中每天的全名，可变长度 (Sunday..Saturday)
.IP b
本地每月的名称的缩写 (Jan..Dec)
.IP B
本地每月的全名，可变长度 (January..December)
.IP c
本地的日期和时间表示 (Sat Nov 04 12:02:33 EST 1989)
.IP d
一个月当中的日子 (01..31)
.IP D
日期 (mm/dd/yy)
.IP h
与 b 相同
.IP j
一年当中的日子 (001..366)
.IP m
月份 (01..12)
.IP U
以星期日作为每周起始，一年当中的星期 (00..53)
.IP w
一星期当中的日子 (0..6)
.IP W
以星期一当作每周起始，一年当中的星期 (00..53)
.IP x
本地的日期表示 (mm/dd/yy)
.IP y
年份的最后两位 (00..99)
.IP Y
年份 (1970...)
.RE
.IP %b
文件大小，以512字节的块为单位 (四舍五入)。
.IP %c
文件状态最后一次修改的时间。格式是C函数 `ctime' 返回值的格式。
.IP %C\fIk\fP
文件状态最后一次修改的时间。格式以 \fIk\fR 指定，类似于%A。
.IP %d
文件在目录树中的深度；0 意味着文件是一个命令行参数。
.IP %f
去掉了前面的目录的文件名 (只剩下最后的成分)。
.IP %F
文件所在文件系统的类型；这个值可以为 \-fstype 所用。
.IP %g
文件的组名，如果组没有名称就是数字形式的组ID。
.IP %G
文件的数字形式的组ID。
.IP %h
文件名的前面的目录部分 (仅除去最后的成分)。
.IP %H
据以找到了文件的命令行参数。
.IP %i
文件的 i 结点号(16进制)。
.IP %k
文件大小，以1kB 的块为单位 (四舍五入)。
.IP %l
符号链接的目标 (如果文件不是一个符号链接，那么结果是空字符串)。
.IP %m
文件的权限位 (8进制)。
.IP %n
文件的硬连接数。
.IP %p
文件名。
.IP %P
文件名，去掉了据以找到了文件的命令行参数的名称部分。
.IP %s
文件大小，以字节为单位。
.IP %t
文件最后一次修改的时间。格式是C函数 `ctime' 返回值的格式。
.IP %T\fIk\fP
文件最后一次修改的时间。格式以 \fIk\fR 指定，类似于%A。
.IP %u
文件的用户名，如果用户没有名称就是数字形式的用户ID。
.IP %U
文件的数字形式的用户ID。
.PP
在一个 `%' 字符后面使用任何其他字符，`%' 将被忽略 (但是其他字符会被打印出来)。
.RE
.IP \-prune
如果没有给出 \-depth 则返回 true; 不进入当前目录。
.br
如果给出了 \-depth 则返回false; 没有效果。
.IP \-ls
返回true；以 `ls \-dils' 格式在标准输出列出文件。块以1kB 字节为单位计数，除非设置了环境变量POSIXLY_CORRECT，那样的话会使用 512字节的块。
.SS 运算符 OPERATORS
.P
以优先级高低顺序排列：
.IP "( \fIexpr\fR )"
强制为优先
.IP "! \fIexpr\fR"
如果 \fIexpr\fR 是false则返回true
.IP "\-not \fIexpr\fR"
与 ! \fIexpr\fR 相同
.IP "\fIexpr1 expr2\fR"
与 (隐含的默认运算符)；如果 \fIexpr1\fR 为false则不会执行 \fIexpr2\fR
.IP "\fIexpr1\fR \-a \fIexpr2\fR"
与 \fIexpr1 expr2\fR 相同
.IP "\fIexpr1\fR \-and \fIexpr2\fR"
与 \fIexpr1 expr2\fR 相同
.IP "\fIexpr1\fR \-o \fIexpr2\fR"
或；如果 \fIexpr1\fR 为true 则不会执行 \fIexpr2\fR
.IP "\fIexpr1\fR \-or \fIexpr2\fR"
与 \fIexpr1\fR \-o \fIexpr2\fR 相同
.IP "\fIexpr1\fR , \fIexpr2\fR"
列表；\fIexpr1\fR 和 \fIexpr2\fR 都会被执行。\fIexpr1\fR 的值被忽略，列表的值是 \fIexpr2\fR的值
.SH "参见 SEE ALSO"
\fBlocate\fP(1L), \fBlocatedb\fP(5L), \fBupdatedb\fP(1L), \fBxargs\fP(1L)
\fBFinding Files\fP (Info 在线帮助, 或者是打印的版本)
.SH "[中文版维护人]"
.B 袁乙钧 
.SH "[中文版最新更新]"
.B 11/01/2003
.SH "《中国linux论坛man手册页翻译计划》:"
.BI http://cmpp.linuxforum.net