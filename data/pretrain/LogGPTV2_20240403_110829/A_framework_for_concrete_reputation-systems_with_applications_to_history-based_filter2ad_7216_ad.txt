interface DMC . The (cid:12)rst has a cheap precomputation, but
higher complexity of operations update and new, whereas
the second implementation has a higher time- and space-
complexity for its precomputation, but gains in the long
run with a better complexity of the interface operations.
Both implementations are inspired by the e(cid:14)cient algorithm
of Havelund and Ro(cid:24)su for model checking past-time LTL
[13]. Their idea is essentially this: because of the semantics,
model-checking   in (h; m), i.e. deciding (h; m) j=  , can be
done easily if one knows (1) the truth of (h; m (cid:0) 1) j=  j for
all sub-formulas  j of  , and (2) the truth of (h; m) j=  i
for all proper sub-formulas  i of   (a sub-formula of   is
proper if it is not   itself). The truth of the atomic sub-
formulas of   in (h; m) can be computed directly from the
state hm, where hm is the mth con(cid:12)guration in sequence
h. For example, if  3 = X(cid:0)1 4 ^ e, then (h; m) j=  3 i(cid:11)
(h; m (cid:0) 1) j=  4, and e 2 hm. This information needed to
decide (h; m) j=   can be stored e(cid:14)ciently as two boolean
arrays Blast and Bcur, indexed by the sub-formulas of  , so
that Blast[j] is true i(cid:11) (h; m (cid:0) 1) j=  j , and Bcur[i] is true
i(cid:11) (h; m) j=  i. Given array Blast and the current state hm,
one then constructs array Bcur starting from the atomic
formulas (which have the largest indices), and working in a
‘bottom-up’ manner towards index 0, for which entry Bcur[0]
represents (h; m) j=  .
In this section we summarize our results regarding dy-
namic model checking. We need some preliminary termi-
nology. Initially, the actual interaction history h is empty,
but after some time, as observations are made, the history
can be written h = x1 (cid:1) x2 (cid:1) (cid:1) (cid:1) xM (cid:1) yM +1 (cid:1) (cid:1) (cid:1) yM +K , consisting
of a longest pre(cid:12)x x1 (cid:1) (cid:1) (cid:1) xM of maximal con(cid:12)gurations, fol-
lowed by a su(cid:14)x of K possibly non-maximal con(cid:12)gurations
yM +1 (cid:1) (cid:1) (cid:1) yM +K, called the active sessions (since we consider
the longest pre(cid:12)x, yM +1 must be non-maximal). A maxi-
mal con(cid:12)guration represents complete information about a
protocol-run, and has the property that it will never change
in the future, i.e. cannot be changed by operation update.
This property will be essential to our dynamic algorithms
as it implies that the maximal pre(cid:12)x needs not be stored to
check h j=   dynamically.
Theorem 4.1 (Array-based DMC ). One can construct
an array-based data structure (DS ) implementing the DMC
interface correctly. More speci(cid:12)cally, assume that DS is ini-
tialized with a policy   and an event structure ES, then ini-
tialization of DS is O(j j). At any time during execution,
the complexity of the interface operations is:
(cid:15) DMC :check() is O(1).
(cid:15) DMC :new() is O(j j).
(cid:15) DMC :update(e; i) is O((K (cid:0) i + 1) (cid:1) j j) where K is
the current number of active sessions in h (h is the
current actual history).
Furthermore, if the con(cid:12)gurations of ES are represented
with event-set bit-vectors, the space complexity of DS is
O(K (cid:1) (j j + jEj)).
Regularity of policies. In fact, it turns out that the set
of behaviours satisfying a policy is a regular language (over
the alphabet of con(cid:12)gurations of a (cid:12)nite event structure).
This observation leads to an implementation of the DMC
interface which uses a (cid:12)nite automaton, essentially storing
the state of the array-based data structure. We have the
following.
Theorem 4.2. For any policy   in the basic language, the
set of behaviours satisfying   is regular. That is for any
  there is a (cid:12)nite automaton A  with L(A ) = fh 2 C(cid:3)
ES j
h j=  g. Further, there exists an automata-based data struc-
ture (DS 0) implementing the DMC interface correctly. More
speci(cid:12)cally, assume that DS 0 is initialized with a policy  
and an event structure ES = (E; (cid:20); #), then initialization
of DS 0 is O(2j j (cid:1) jCESj (cid:1) j j). At any time during execution,
the complexity of the interface operations is:
(cid:15) DMC :check() is O(1).
(cid:15) DMC :new() is O(1).
(cid:15) DMC :update(e; i) is O(K (cid:0) i + 1) where K is the
current number of active con(cid:12)gurations in h (h is the
current actual history).
Furthermore, if the con(cid:12)gurations of ES are represented
with event-set bit-vectors, the space complexity of DS 0 is
O(K (cid:1) jEj + 2j j (cid:1) jCESj).
A further important advantage of the automata-based ap-
proach is that one can use minimization to obtain the most
e(cid:14)cient automata for a given policy.
5. LANGUAGE EXTENSIONS
In this section, we consider an extension of the basic pol-
icy language to include more realistic and practical poli-
cies. For example, consider the OOok policy for classify-
ing \browser-like" applications (Section 3). We could use
a clause like G(cid:0)1(open-f ! F(cid:0)1create-f) for two events
open-f and create-f, representing respectively the open-
ing and creation of a (cid:12)le with name f . However, this only
encodes the requirement that for a (cid:12)xed f , (cid:12)le f must be
created before it is opened. Ideally, one would want to en-
code that for any (cid:12)le, this property holds, i.e., a formula
similar to
G(cid:0)1 (cid:16)8x:hopen(x) ! F(cid:0)1(create(x))i(cid:17)
where x is a variable, and the universal quanti(cid:12)cation ranges
over all possible (cid:12)le-names. Further language extensions
are discussed in the full paper [17]. These includes a no-
tion of policy referencing, where policies may depend on
other agents’ policies and histories with entities. Another
useful extension for reputation systems is quantitative poli-
cies. Pure-past temporal logic is very useful for specify-
ing qualitative properties. For instance, in the eBay exam-
ple, \the seller has never provided negative feedback in auc-
tions where payment was made," is directly expressible as
G(cid:0)1(negative ! ignore). However, sometimes such quali-
tative properties are too strict to be useful in practice. For
example, in the policy above, a single erroneous negative
feedback provided by the seller will lead to the property be-
ing irrevocably unsatis(cid:12)able. We have an extension of the
basic language which allows a type of quantitative proper-
ties, e.g. \in at least 98% of the previous interactions, seller
has not provided negative feedback in auctions where pay-
ment was made."
5.1 Quanti(cid:2)cation
We introduce a notion of parameterized event structure,
and proceed with an extension of the basic policy language
to include quanti(cid:12)cation over parameters. A parameterized
event structure is like an ordinary event structure, but where
events occur with certain parameters (e.g. open("/etc/passwd")).
5.1.1 Parameterized Event Structures
We de(cid:12)ne parameterized event structures and an appro-
priate notion of con(cid:12)guration.
De(cid:12)nition 5.1 (Parameterized Event Structure). A
parameterized event structure is a tuple (cid:26)ES = (E; (cid:20); #; P; (cid:26))
where (E; (cid:20); #) is an (ordinary) event structure, component
P, called the parameters, is a set of countable parameter sets,
P = fPe j e 2 Eg, and (cid:26) : E ! P is a function, called the
parameter-set assignment.
De(cid:12)nition 5.2 (Con(cid:12)guration). Let (cid:26)ES = (E; (cid:20); #; P; (cid:26))
be a parameterized event structure. A con(cid:12)guration of (cid:26)ES
is a partial function x : E ! Se2E (cid:26)(e) satisfying the fol-
lowing two properties. Let dom(x) (cid:18) E be the set of events
on which x is de(cid:12)ned. Then
dom(x) 2 CES
8e 2 dom(x):x(e) 2 (cid:26)(e)
When x is a con(cid:12)guration, and e 2 dom(x), then we say
that e has occurred in x. Further, when x(e) = p 2 (cid:26)(e),
we say that e has occurred with parameter p in x. So a
con(cid:12)guration is a set of event occurrences, each occurred
event having exactly one parameter.
We now de(cid:12)ne relation (h; i) j=(cid:27)  .
(h; i) j=(cid:27) e(v)
(h; i) j=(cid:27) 3e(v)
i(cid:11) e 2 dom(xi) and xi(e) = (cid:27)(v)
i(cid:11) e r# dom(xi) and
Notation 5.1. We write C(cid:26)ES for the set of con(cid:12)gurations
of (cid:26)ES, and C0
(cid:26)ES for the set of (cid:12)nite con(cid:12)gurations of (cid:26)ES
(a con(cid:12)guration x is (cid:12)nite of dom(x) is (cid:12)nite). If x; y are
two partial functions x : A ! B and y : C ! D we write
(x=y) (pronounced x over y) for the partial function (x=y) :
A [ B ! C [ D given by dom(x=y) = dom(x) [ dom(y), and
for all e 2 dom(x=y) we have (x=y)(e) = x(e) if e 2 dom(x)
and otherwise (x=y)(e) = y(e).
Here we are not interested in the theory of parameter-
ized event structures, but mention only that they can be ex-
plained in terms of ordinary event structures by expanding
a parameterized event e of type (cid:26)(e) in to a set of con(cid:13)ict-
ing events f(e; p) j p 2 (cid:26)(e)g. However, the parameters give
a convenient way of saying that the same event can occur
with di(cid:11)erent parameters (in di(cid:11)erent runs). A local (inter-
action) history h in a parameterized event structure (cid:26)ES is
a (cid:12)nite sequence h 2 C0
. The update(h; e; i) function is
extended appropriately to include also the parameter p that
e occurs with. Throughout the following sections, we let
(cid:26)ES = (E; (cid:20); #; P; (cid:26)) be a parameterized event structure,
where P = fPi j i 2 Ng.
(cid:26)ES
(cid:3)
5.1.2 Quanti(cid:2)ed Policies
We extend the basic language from Section 3 to parame-
terized event structures, allowing quanti(cid:12)cation over param-
eters.
Syntax. Let Var denote a countable set of variables
(ranged over by x; y; : : :). Let the meta-variable v range
(def )
= Var [ S1
over Val
S1
i=1 Pi.
The quanti(cid:12)ed policy language is given by the following
BNF. Again op ranges over f^; _g.
i=1 Pi, and metavariable p range over
  ::= e(v) j 3e(v) j  0 op  1 j :  j
X(cid:0)1  j  0 S  1 j 8x : Pi:  j 9x : Pi: 
We need some terminology. Write fv ( ) for the set of free
variables in   (de(cid:12)ned in the usual way). A policy of the
quanti(cid:12)ed language is a closed formula. Let   be any for-
mula. Say that a variable x has type Pi in   if it occurs in a
sub-formula e(x) of   and (cid:26)(e) = Pi. We impose the follow-
ing static well-formedness requirement on formulas  . All
free variables have unique type, and, if x is a bound variable
of type Pi in  , then x is bound by a quanti(cid:12)er of the cor-
rect type (e.g., by 8x : Pi: ). Further, for each occurrence
of e(p), p is of the correct type: p 2 (cid:26)(e).
Semantics. A (generalized) substitution is a function
i=1 Pi so that (cid:27) is the identity on each of the
(cid:3) be a non-
(cid:27) : Val ! S1
parameter sets Pi. Let h = x1 (cid:1) (cid:1) (cid:1) xn 2 C0
(cid:26)ES
empty history, (cid:27) a substitution, and 1 (cid:20) i (cid:20) n.
(h; i) j=(cid:27)  0 ^  1
(h; i) j=(cid:27)  0 _  1
(h; i) j=(cid:27) : 
(h; i) j=(cid:27) X(cid:0)1 
(h; i) j=(cid:27)  0 S  1
(e 2 dom(xi) ) xi(e) = (cid:27)(v))
i(cid:11) (h; i) j=(cid:27)  0 and (h; i) j=(cid:27)  1
i(cid:11) (h; i) j=(cid:27)  0 or (h; i) j=(cid:27)  1
i(cid:11) (h; i) 6j=(cid:27)  
i(cid:11) i > 1 and (h; i (cid:0) 1) j=(cid:27)  
i(cid:11) 9j (cid:20) i:(cid:0)(h; j) j=(cid:27)  1(cid:1) and
(h; i) j=(cid:27) 8x : Pj:  i(cid:11) 8p 2 Pj:(h; i) j=((x7!p)=(cid:27))  
(h; i) j=(cid:27) 9x : Pj:  i(cid:11) 9p 2 Pj:(h; i) j=((x7!p)=(cid:27))  
[8j < j0 (cid:20) i:(h; j0) j=(cid:27)  0](cid:1)
Example 5.1 (True OOok). Recall the ‘one-out-of-k’ pol-
icy (Example 3.3). Edjlali et al. give, among others, the fol-
lowing example of an OOok policy classifying \browser-like"
applications: \allow a program to connect to a remote site if
and only if it has neither tried to open a local (cid:12)le that it has
not created, nor tried to modify a (cid:12)le it has created, nor tried
to create a sub-process." Since this example implicitly quan-
ti(cid:12)es over all possible (cid:12)les (for any (cid:12)le f , if the application
tries to open f then it must have previously have created f ),
it cannot be expressed directly in our basic language. Note
also that this policy cannot be expressed in Fong’s set-based
model [11]. This follows since the above policy essentially de-
pends on the order in which events occur (i.e. create before
open). Now, consider a parameterized event structure with
two con(cid:13)icting events: create and open, each of type String
(representing (cid:12)le-names). Consider the following quanti(cid:12)ed
policy:
G(cid:0)1(8x : String:(open(x) ! F(cid:0)1
create(x)))
This faithfully expresses the idea of Edjlali et al. that the
application \can only open (cid:12)les it has previously created."
5.1.3 Model Checking the Quanti(cid:2)ed Language
We can extend the array-based algorithm to handle the
quanti(cid:12)ed language. The key idea is the following. Instead
of having boolean arrays, we associate with each sub-formula
 j of a formula  , a constraint Ck[j] on the free variables of
 j . The invariant will be that the sub-formula  j is true for
a substitution (cid:27) at time (h; k) if-and-only-if (cid:27) \satis(cid:12)es" the
constraint Ck[j], i.e., Ck[j] represents the set of substitutions
(cid:27) so (h; k) j=(cid:27)  j . Once again we refer the reader to the full
paper for details. The results regarding quanti(cid:12)ed dynamic
model-checking are summarized below. However, we do have
the following hardness result.
Proposition 5.1 (PSPACE Hardness). Even for single
element models, the model-checking problem for the quan-
ti(cid:12)ed policy language is PSPACE hard.
While the general problem is PSPACE hard, we are able
to obtain the following quantitative result which bounds the
complexity of our algorithm. Suppose we are to check a for-
mula  0 (cid:17) Q1x1Q2x2 (cid:1) (cid:1) (cid:1) Qnxn: , where the Qi are quanti-
(cid:12)ers and xi variables. We can obtain a bound on the running