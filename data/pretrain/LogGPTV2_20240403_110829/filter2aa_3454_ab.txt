http://www.targus.com/us/productdetail.aspx?sku=ACH63US
http://www.amazon.com/JacobsParts-150Mbps-Wireless-Notebook-TP-WF11/dp/
B0067NFSE2
http://www.newegg.com/Product/Product.aspx?Item=N82E16820147152
http://www.ebay.com/itm/10x-USB-USA-AC-Wall-Charger-for-Apple-
iPhone-3-3G-4G-4S-5-5G-iPod-New-White-/271163372744
Raspberry Pi, Model A: $25
Case: $4.61
USB Hub: $5.99
WiFi: 2x $6.52
SD Card: $6.99
USB Power: $1.45
Total: 57.08 per node
3. Per-Node Cost: $57.08 in 10-node quantities, excluding case.
a. I bought cheap wall-wart cases and used a drill saw; you can 3D print them, 
or even buy disposable GladWare and use that.
C&C Software
• “Reticle: Leaderless Command and 
Control”
• This was the ﬁrst of the two DARPA 
CFT contracts I mentioned
• Whole presentation at B-Sides Vegas 
2012---but I will summarize
Reticle
B. C&C Software: Reticle, Leaderless C&C
1. Developed under DARPA Cyber Fast Track, Spring 2012
2. Original work presented at BSidesLV 2012, but massive improvements, and a 
complete rewrite, since then.
3. Tor, CouchDB, Client-Side TLS; these combine for both encrypted communications 
and, critically, obfuscated communications gateways (via Tor Hidden Service---there's no 
indication of where the command node is). (Details on Reticle architecture.)
4. "Contagion Network"---all nodes know all things, commands can be inserted by 
any node. PKI, commands must be signed.
5. Disk encryption using grenade methodology to prevent tampering; "Pull Pin, 
Throw at Enemy" for disk encryption UX.
6. CreepyDOL, on the node side, is just a mission Reticle runs; it can be retasked at 
any time.
PortalSmash
It clicks on buttons, so you don’t have to
https://github.com/ussjoin/portalsmash
This is how we get connectivity in every place: use local wiﬁ. Reticle had some scripts to take 
care of this, but during its rewrite, I pulled them out so that this would work in more of a 
general case---because weirdly, I couldn’t ﬁnd any examples of doing this cleanly.
CreepyDOL
So as I mentioned, Creepy
Distributed Computation for 
Distributed Systems, and Centralized 
Computation For High-Level Data
http://www.ﬂickr.com/photos/lara604/3164622774
http://www.ﬂickr.com/photos/jenniferboyer/52474490/
http://www.ﬂickr.com/photos/gaelx/1858599144
A. Distributed Querying for Distributed Data
1. Since we don't have independent, high-bandwidth channels for sending data 
home, it's not a good idea (and may not be possible) to send raw packets home. Nodes 
should send home data that's already been digested.
2. So: we run any queries on the nodes that can be effectively run on the nodes, 
*given data that node has collected*.
3. We do not process multi-node data on individual nodes, even though every node 
has access to all the data (see "contagion network"), because they've got limited processing 
power---and more importantly, data storage.
B. Centralized Querying for High-Level Data
1. Things that need datapoints from multiple nodes---tracking, pattern analysis, 
etc., go on the "backend."
2. The backend is just another node, but with a special mission conﬁguration: rather 
than just sensing and adding data, it receives data from the contagion network, pushes it into 
another system (a data warehouse), and then instructs the contagion to delete it to make 
room.
NOM: Nosiness, Organization, and Mining
http://www.ﬂickr.com/photos/scjody/5345366096
C. Data Query Methodology: NOM
1. O: Observation. Take as much data out of local traffic as possible; this means 
names, photos, services used, etc. To make this easy, we've created a large number of 
"ﬁlters" that are designed for traffic from speciﬁc applications---DropBox, Twitter, Facebook, 
OKCupid, etc. This is a distributed query (run on the nodes).
2. N: Nosiness. Using data extracted from O queries, there are lots of leveraged 
queries we can make; for instance, given an email address, we can look for accounts on web 
services, or given a photo, we can look for copies of that photo pointing to other accounts. 
This can be run either as distributed or centralized.
3. M: Mining. Taking data found by the nodes, build up larger analyzed products. For 
instance, is the device (person) usually in one area during a certain time of day? Are there 
three devices that are almost always seen together, if at all? (The latter may indicate that they 
are all carried by the same user.) This type of query is exclusively run on the backend.
Visualization
• Second DARPA CFT Contract
• Used the Unity Game Engine
• Side note: wow, that’s a fun toy
• Side note: wow, I hate writing JavaScript that’s 
interpreted by C#, then compiled into .NET CLR
• Runs on an iPad! Or OSX/Windows/Linux/Android
• I think I could make it run on an XBox360, 
actually (Unity is Very Nice)
Want to see what it 
looks like?
(Say yes)
(Please)
Test Parameters
• To prevent badness, we programmed the 
NOM system to look only for trafﬁc from 
devices we owned; no “random 
stranger” data was collected at 
any time.
Results
Scaling Up
• Sharding Contagion Networks
• Scaling backend --- luckily, this isn’t hard
• Scaling limits of visualization
• Frame rate...
• Hey, aren’t there nice $20 SDRs? I wonder 
what I could sniff with that....
• (Yes, those work on a Raspberry Pi)
Other Applications
Counter-Inﬁltration
http://www.ﬂickr.com/photos/igalko/6341182132/
A. Counter-Inﬁltration
1. There is a persistent rumor, in cases of exceptional police brutality (Occupy 
Anything, or more protests in Britain) that the police are sending in agents provocateur to 
cause the disruption that gives them an excuse to crack down. (This rumor is at least 300 
years old, by the way.)
2. CreepyDOL would let you set up "known devices" with alarms for new ones, watch 
as new people come in, or even simply set off a klaxon if a Blackberry shows up (obviously a 
cop).
C. OPSEC Training
1. The ROE for my tests demonstrate limiting data capture to one or several known 
devices. Use that to test your agents' OPSEC capabilities: set up a wide-ranging capture 
network (but tied to their stuff) and see what they leak.
2. The advantage is that you don't need to control every network an agent accesses. 
This lets you test "in the real world," which is much more realistic.
Evidence Logging
http://www.ﬂickr.com/photos/decade_null/142235888
B. Evidence Logging
1. Again in fast-moving scenarios like protests and rallies: there's a real problem 
with destruction of evidence, electronic or physical, during crackdowns. In addition, it's very, 
very difficult to know who was *in* a kettle in the ﬁrst few hours afterward; a way to know 
that could be very comforting and/or helpful to those outside.
2. Since CreepyDOL uses a contagion network, anything it logs will be immediately 
shipped out of the area to linked nodes anywhere on the planet. If those nodes go offline, the 
data is preserved.
3. For bonus points, use F-BOMB belt packs (which last a very long time on batteries) 
to have moving logs---and if you come in range of a WiFi AP somewhere (say, at a stop 
light), they'll offload their data without any additional interaction.
4. The encryption, and the fact that the nodes don't persist their keys, mean that 
unless an adversary *already knows what it is and how to cold boot it*, they don't get data. If 
people on the outside are concerned about the nodes, revoke their device certiﬁcates and 
they'll be cut off immediately.
Mitigation: A Sacriﬁce
VIII. Mitigation
A. Much of the functionality CreepyDOL exploits is the 802.11 protocol itself; it's not as 
simple as "patch this," because the networks rely on it.
1. SSID Beaconing
2. MAC Address signing
B. What do you want to give up?
1. Always-on---turning things off would help.
2. Open WiFi---this would somewhat mitigate (harder to steal app data), but we can 
still see your MAC, and from this get your location. If we can otherwise associate a MAC with 
a name, we can still correlate multiple devices per person, and track patterns.
3. It isn't helpful to just use cellular data; given that SDRs now cost $20, we could 
cheaply extend CreepyDOL to watch for that (at least for MAC tracking purposes).
We don’t need the extra features of these protocols, but they’re nice... and it’s the status 
quo.
The Status is Not Quo
Image from Dr. Horrible’s Sing-Along Blog, by Joss Whedon
Thanks!
• To the CFT program, without which I 
couldn’t have spent a large part of law 
school doing something much more 
interesting
• To all those I’ve harassed for comments on 
proposals, work, or slides
• Ping me: http://www.maliceafterthought.com