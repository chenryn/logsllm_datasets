title:OptiSwap: Fast Optimistic Fair Exchange
author:Lisa Eckey and
Sebastian Faust and
Benjamin Schlosser
OptiSwap: Fast Optimistic Fair Exchange (cid:63)
Lisa Eckey, Sebastian Faust, and Benjamin Schlosser
Technical University of Darmstadt, Germany
{lisa.eckey, sebastian.faust, benjamin.schlosser}@tu-darmstadt.de
Abstract. Selling digital commodities securely over the Internet is a challenging
task when Seller and Buyer do not trust each other. With the advent of cryptocur-
rencies, one prominent solution for digital exchange is to rely on a smart contract as
a trusted arbiter that fairly resolves disputes when Seller and Buyer disagree. Such
protocols have an optimistic mode, where the digital exchange between the parties can
be completed with only minimal interaction with the smart contract. In this work we
present OptiSwap, a new smart contract based fair exchange protocol that signi-
cantly improves the optimistic case of smart contract based fair exchange protocols. In
particular, OptiSwap has almost no overhead in communication complexity, and im-
proves on the computational overheads of the parties compared to prior solutions. An
additional feature of OptiSwap is a protection mechanism against so-called grieving
attacks, where an adversary attempts to violate the nancial fairness of the protocol
by forcing the honest party to pay fees. We analyze OptiSwap's security in the UC
model and provide benchmark results over Ethereum.
1
Introduction
Fair exchange of digital goods for money is a challenging task in the Internet when parties
do not trust each other. Consider a two party protocol between a Seller S and a Buyer B.
On the one hand, S possesses some digital good x, which he is willing to sell for p coins. On
the other hand, B wants to obtain x in exchange for the money. Since the Internet connects
millions of users, it is reasonable to assume that both parties do not trust each other. While
the Seller wants the guarantee that B gets to know x only if he pays p coins, the Buyer
must be assured that he only needs to pay if S delivers the correct witness. It was shown
by Pagnia and Gärtner in 1999 that such a fair exchange is not possible without a trusted
third party (TTP) [25].
A common use case for a fair exchange protocol is the purchase of some digital le x,
e.g., a movie, music le or software executable where only the hash h = H(x) is known. The
Buyer only wants to pay if the le x that he receives satises h = H(x). At the same time,
the Seller wants to be sure that if he delivers x which hashes to h, he gets his payment.
The above can be generalized to a predicate function φ, where the Seller wants to sell a
witness x that satises φ(x) = 1. For instance, x may be some software, and φ denes
test cases that the software has to satisfy. There exist dierent approaches to realize fair
exchanges. One approach relies on a trusted middleman, which is often called escrow service,
that implements the TTP [24]. A dierent approach is taken by protocols that rely on a
blockchain to implement the TTP in case of dispute. Examples include the zero-knowledge
contingent payment (ZKCP) protocols [6], and the FairSwap protocol [14]. In these works
the TTP is implemented in a smart contract running on top of the blockchain. At a high-
level these protocols work as follows. The Seller S encrypts the witness and sends it together
with some auxiliary information to the Buyer. The Buyer checks the auxiliary information
and, if accepted, it deposits money to the smart contract. Once the money is locked the
Seller will reveal the secret key to the contract, which allows him to claim the money. Since
(cid:63) This
is
the
full version of
the paper appearing at
the ACM ASIA CCS '20,
https://doi.org/10.1145/3320269.3384749.
the secret key now becomes publicly recorded on the blockchain, the Buyer can use it to
decrypt the encrypted data.
Most relevant for our work is the protocol FairSwap [14]. FairSwap avoids expensive
zero-knowledge proofs, and replaces it with a technique called proof of misbehavior (PoM).
A PoM allows the Buyer to punish the Seller in case the Seller sent an invalid witness x.
This a-posterior approach of punishment has the advantage that FairSwap only needs to
rely on simple hash function evaluations, thereby resulting in a more ecient protocol for
the users  in particular, it is more ecient if the witness x is large or the predicate function
φ is complex. On the downside the communication between Seller and Buyer increases with
the size of φ and x. Since the communication overhead occurs regardless of misbehavior, it
is most likely the main bottleneck in practice.
We present an extension to the original FairSwap protocol of Dziembowski et al. [14]
in order to improve the optimistic execution of the protocol, and thereby overcome one of
the main bottlenecks of FairSwap in practice. This is achieved by incorporating an interac-
tive dispute resolution sub-protocol, which removes the message overhead and thereby also
improves the computational complexity of the two honest parties. Because our protocol is
optimized for the optimistic case (which we believe is the standard case in practice, since
parties can be punished when cheating), we call our protocol OptiSwap.
Another shortcoming of [14] is that grieving is not discussed. A corrupt Seller could force
any Buyer to submit a large transaction (including the PoM) to the blockchain. This means
a Seller can grieve the Buyer by forcing him to pay a lot of transaction fees. We will show
how we can protect against grieving without relying on any security deposits when there are
no disputes.
1.1 Contribution
We extend the FairSwap protocol by Dziembowski et al. [14] by making the dispute resolution
interactive. Our contributions are summarized below:
 We present a challenge-response procedure for obtaining information about the evalu-
ation of the predicate function φ. This procedure is only used in case of dispute, and
allows to pinpoint a single step in the evaluation of φ where the Seller cheated. This
approach signicantly reduces the overheads of the FairSwap protocol from [14] in the
optimistic case.
 In order to incentivise both parties to act honestly and prevent grieving, we incorporate
fees into the dispute resolution sub-protocol.
 We implemented the OptiSwap protocol and improved it using the technique intro-
duces by SmartJudge [27] in order to estimate the gas costs 1. The obtained values are
compared against the original FairSwap protocol.
 Finally, we provide comprehensive security evaluation of OptiSwap in the UC frame-
work and show that it realizes a fair exchange functionality.
1.2 Related Work
It is well-known that fair exchange is impossible without a TTP [25, 28, 17]. In order to limit
the role of a TTP [3, 7] proposed the distinction between the optimistic and pessimistic case
of fair exchange. Since the emerge of blockchain technologies, smart contracts are considered
as TTP, and there are numerous works that use smart contracts to improve on the fairness
properties of cryptographic protocols
[2, 5, 22, 23, 21]. Various works use smart contracts
for fair exchange [6, 14, 9]. Below, we discuss related work that utilized interactive dispute
resolution.
1 In Ethereum, parties have to pay for executed computation, where computation is measured in
units of gas. Hence, the gas costs can be used as eciency indicator.
2
Interactive dispute resolution. Recent work incorporated an interactive dispute resolution
handling for the case when two parties run into disagreement. The Arbitrum system was
introduced by Kalodner et al. in 2018 [19]. They proposed a solution for the scalability
issue related to many kinds of blockchain technologies. By performing heavy computation
o-chain, the complexity of computation that is feasible to carry out backed-up by the
blockchain is increased. Similar to OptiSwap in case of disagreement, Arbitrum runs an
interactive dispute resolution protocol. This protocol narrows down the computation under
dispute to a single instruction which is recomputed on-chain in order to resolve the whole
disagreement. While OptiSwap also contains a challenge-response procedure as part of its
dispute resolution protocol, we use a dierent challenge strategy. Concretely, in Arbitrum,
computation is modeled using Turing machines resulting in a linear sequence of computation
steps. For this type of data structure, a binary search algorithm is very ecient and, hence, it
is used by Arbitrum. Within the OptiSwap protocol, we model computation using circuits
that may have a far more complex topology than a linear list. Therefore, we make use of
dierent challenge strategies.
A scalable verication solution for blockchain technologies called TrueBit was proposed
by Teutsch and Reitwieÿner originally in 2017 [26]. It contains a dispute resolution layer
which is executed in case of disagreement about the computation of some task. As in the
Arbitrum system, TrueBit models computation using Turing machines. Hence, for resolving
a dispute, the computation is narrowed down using a binary search procedure. As above
the main dierence to OptiSwap is that we use a circuit-based approach that allows more
complex challenge strategies.
Optimistic mode. The SmartJudge architecture was proposed by Wagner et al. in 2019 [27].
It provides an abstraction of a two-party protocol that relies on the execution of a smart
contract in case of dispute. Since our OptiSwap protocol is optimized for the optimistic
mode, it is a perfect candidate to be combined with SmartJudge. SmartJudge splits a smart
contract into a mediator and a verier. Only the mediator must be executed in the opti-
mistic mode and the verier is only called in case of dispute. While SmartJudge provides
an improvement for two-party protocol in the optimistic mode, it does not include a dis-
pute resolution mechanism as this will depend on the actual protocol that instantiates the
SmartJudge approach. We can combine our protocol with SmartJudge to further improve
the optimistic mode and reduce on fee costs.
Fair exchange based on conditional dispute resolution. Concurrently to our work, Hall-
Andersen presented an improvement of the FairSwap protocol called FastSwap [18]. FastSwap
aims at an improved communication complexity in case of both parties behaving honestly.
This protocol incorporates an interactive challenge-response sub-protocol that is only exe-
cuted in case of misbehavior. The work of Hall-Andersen focuses on modeling the verication
computation using a computation model similar to Turing machines. This model results in
a linear sequence of computation steps which allows a logarithmic number of rounds in the
challenge-response phase. In contrast to FastSwap we use circuits for modeling computation.
This allows us to use dierent challenge strategies depending on the topology of the veri-
cation circuit. Moreover, we explicitly add security fees into our protocol design to prevent
grieving attacks. We stress that both protocols are compatible to each other which means
that incorporated techniques can be adopted to be used in the other protocol as well. Since
the FastSwap paper lacks a detailed evaluation of gas costs in the Ethereum system, a con-
crete comparison of both protocols is not possible. Finally, we provide a detailed security
proof of our protocol in the universal composability framework in Appendix E. While the
FastSwap protocol is also modeled in this framework, a full security proof is missing.
3
2 Preliminaries
In this section we introduce the main building blocks and describe the cryptographic prim-
itives we need for designing OptiSwap. We denote integer variables by lower case letters
and tuples by bold lower case letters (i.e., a = (a1, . . . , an)) while sets are signaled by cap-
ital letters. The integer set {1, . . . , n} is denoted by [n]. For a probabilistic algorithm A,
m(cid:48) ← A(m) denotes the output m(cid:48) of A on input m. The symbol ≈c denotes the computa-
tional indistinguishability between two random variables. s $←S denotes that s is randomly
sampled from the set S using a uniform distribution. Furthermore, we assume direct se-
cure channels and synchronous communication happening in rounds. By using the notion
of rounds, we abstract from the underlying process of consensus and conrmation times
required when we interact with a blockchain system. The period of ∆ rounds ensures that
an honest party is able to wait for conrmation and to send a transaction afterwards.
Circuits. A key ingredient to our protocol will be a circuit which we use to model the
predicate function that validates correctness of a witness. We will consider a witness x to
be correct if the circuit evaluation of it returns 1, i.e. φ(x) = 1. Let X be a set of possible
inputs and Γ an instruction alphabet. Each instruction op : X (cid:96) → X in Γ takes up to
(cid:96) input values (fan-in: (cid:96)) and returns a single output value. A circuit φ over a value set
X and an instruction set Γ is modeled as a directed acyclic graph (DAG) as follows. Its
vertices φ1, . . . φm are called gates and its edges represent the wires of φ and specify the
information ow through the circuit. Any gate with in-degree 0 is called an input gate. The
circuit contains n input gates, where 1 ≤ n < m, and each input gate φi outputs vi to all
outgoing edges. Every gate in φ with out-degree 0 is called output gate. We require that the
circuit has a single output gate that evaluates to either 1 or 0. Every gate φi is labeled by a
tuple φi = (i, opi ∈ Γ, Ii ∈ [m](cid:96)), evaluates the instruction opi on the input values given by
the circuit gates specied by the index set Ii, and outputs the result to all outgoing edges.
There exists an ordering over all circuit gates such that for each gate φi the index i is greater
than any index of a gate that provides an input to gate φi.
We note that the evaluation of a circuit is performed layer-by-layer starting from the
input gates. Each gate evaluates its instruction on given inputs and propagates the result
to the gates of the next layer. For simplicity we denote the outcome of the overall circuit as
φ(x) = {0, 1} and the result of the ith gate as φi(x) = outpi, for all i ∈ [m]. The depth δ
of a circuit is the length of the longest path starting from any possible input gate up to its
output gate.
Hash functions. We make use of cryptographic hash function H : {0, 1}∗ → {0, 1}µ, where
µ ∈ N. These functions are used as building blocks for commitment and encryption schemes
as well as Merkle trees. For our construction, we assume H to be a restricted programmable
and observable random oracle. In Appendix B we give a detailed description of how we
realize this primitive in the global random oracle model.
Commitment schemes. A commitment scheme allows to commit to a value m using the
Commit-algorithm, which outputs a commitment c and an open value d. The commitment c
hides m from others while the d can  at a later point  be used to reveal m. We require a
commitment scheme to be binding, meaning that nobody can change a committed value m
after c is known. Additionally, it must be hiding, i.e., nobody should learn the committed
value from the public commitment c. Commitment schemes are formally dened in [16].
Symmetric encryption. We make use of a symmetric encryption scheme consisting of three
ppt algorithms (KeyGen, Enc, Dec). The secret encryption key k is generated by the KeyGen-
algorithm. The Enc-algorithm outputs a ciphertext z on input of the key k and a plaintext
m. The Dec-algorithm returns the message m for given ciphertext c using key k. We assume
a symmetric encryption scheme to be indistinguishable under chosen-plaintext attacks (IND-
CPA) secure.
4
Merkle trees. Merkle trees are generated through the MTHash algorithm by iteratively hash-
ing two hash values until only one hash  the root of the Merkle tree  remains. The root
serves as a commitment on many chunks of data. The algorithm MTProof takes as input
the tree and an index i and produces a logarithmically sized opening statement for the i-th
chunk consisting of the neighbors on the path from the element to the root. The algorithm
MTVerify is used to verify that the opening statement is correct in respect to the root. We
refer to [14] for instantiation of these algorithms.
2.1 FairSwap
We briey introduce the FairSwap protocol presented by Dziembowski et al. in 2018 [14] on
a high level. The overall goal of the protocol is a fair exchange of a digital good x against
money. The Seller, who knows x, initiates the protocol by sending an oer message to the
Buyer. This message contains an encryption z of every step of the witness evaluation φ(x)
under key k. By conrming this message the Buyer also transfers the payment of p coins
to the judge contract. At this point the contract contains the money from the Buyer and
a concise commitment on both z and φ. The Seller now reveals the key via the contract
which allows the Buyer to decrypt the witness. If this witness is correct, the money will be
transferred to the Seller (eventually). The more interesting case occurs when the witness
that the Buyer received does not satisfy the agreed upon predicate, i.e., φ(x) (cid:54)= 1.
In this case, which we call the disagreement or pessimistic case, the Buyer can send
a proof of misbehavior (PoM) to the contract. This proof is small, compared to both the
witness and the predicate, but it is sucient to indubitably prove that the received witness
x = Dec(k, z) does not satisfy the predicate, i.e. φ(x) (cid:54)= 1. If this can be shown to the
judge contract, the coins will be refunded to the Buyer. Besides making sure that no coins
can be stolen or locked, the protocol of [14] prevents cheating, namely that the Seller will
get paid for a wrong witness or the Buyer can successfully complain about a correct one.
Additionally, the designed PoM and all data stored inside the contract are kept very small
to reduce the costs of the protocol.
Proof of Misbehavior (PoM). In case of a dispute, Buyer and Seller argue about two dierent
statements. The Seller wants the payment so he will claim that the transferred witness x
is correct, i.e., φ(x) = 1 while the Buyer claims that it is incorrect φ(x) = 0. In order to
gure out who is wrong the judge would need to re-evaluate the predicate φ(x). But since
φ and x are potentially large, they should not be sent to the contract. Instead in [14] they
consider a witness x that can be split in many elements x1, . . . , xn and a predicate φ which
can be represented as a circuit with many gates φ1, . . . , φm. Now, instead of arguing about
the evaluation of the overall predicate, it suces to prove the dispute about the evaluation
of a single gate φi where Buyer and Seller disagree on the gate output. Since the Buyer
constructs and sends the PoM he has to prove that the Seller either sent the wrong witness
or cheated during his computation of φ(x). This is why the Seller has to send the output
for every evaluation of every gate of φ(x) to the Buyer and commit to all of these values (in
the rst message). These commitments allow the Buyer to prove that (i) either the output
of φ(x) = 0 or (ii) there exists a gate φi ∈ φ with inputs in1
i where the Seller lied
about the gate evaluation. The judge contract will then re-compute the gate in question
and compare the outcome with the Seller's result, making it impossible to cheat successfully
about the evaluation of φi. If the witness is wrong and the Seller computed the correct
predicate, then the output of the last gate will reveal this fact, i.e. φm(·) = 0. But if the
witness is correct, the Buyer will not be able to nd a gate which is wrongly computed and
the overall result will be 1, which means the judge will not accept any PoM.
i , . . . , in(cid:96)
A drawback of the FairSwap protocol is that the PoM is generated by the Buyer only
considering information that the Seller sent in the rst round. In particular the Seller needs
to compute, store, encrypt and transfer the intermediary result of every single gate in the
predicate evaluation φ(x). For predicate circuits with many gates, this can become a large
5
overhead for the Seller and also for the Buyer, since in most cases when there is no dispute
these information are not needed. We propose a dierent protocol, which does not require
this overhead as long as Seller and Buyer agree. Only in case they run into a dispute, they
can execute an interactive protocol which allows them to securely prove whether φ(x) = 1.
Additionally, we will analyze how to fairly estimate transaction fees, which is not considered
in the work of [14] at all.
3 OptiSwap Protocol Description
Similarly to [14] we consider an interactive protocol between a Buyer B who is willing to
pay a Seller S p coins in exchange for a witness x, if x satises a predicate function φ (i.e.
φ(x) = 1). They use a smart contract as an adjudicator that stores the payment and either
transfers the coins to S if the exchange is completed successfully or back to B if he does not
receive his witness. The witness x can be split into n elements x1, . . . , xn and the predicate
is represented as a circuit with m gates φ1, . . . , φm, a fan-in (cid:96), a depth δ and a width ω as
dened in Section 2.
3.1 OptiSwap Properties.
In order to ensure that neither the Buyer nor the Seller can cheat, we require the fair
exchange protocol to have the following security properties:
S1 Security against malicious Buyers: Honest Sellers will always receive their payment if
the Buyer learns the witness x (cf. Sender fairness of [14]).