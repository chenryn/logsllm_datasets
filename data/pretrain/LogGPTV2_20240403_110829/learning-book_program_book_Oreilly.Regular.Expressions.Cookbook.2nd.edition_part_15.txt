---
## Page 111
Variations
(?#Year)\d{4}(?#Separator) - (?#Month)\d{2}- (?#Day)\d{2)
Regex options: None
Regexflavers: .NET, XRegExp, PCRE, Perl, Python, Ruby
If for some reason, you cant r dont want to use freespacing syntax, you can still add
comments by way of http: / /www, regexcookbook., com.
Solution
Regular expression
http:\5+
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Replacement
$&
Replacement text flavors: NET, JavaScript, Perl
0$
Replacement text flavors: .NET, Java, XRegExp, PHP
\0
Replacement text flavors: PHIP, Ruby
\&
Replacement text flavor: Ruby
>g
Replacement text flavor: Python
98 | Chapter 2: Basic Regular Expression Skils
---
## Page 115
Discussion
Inserting the whole regex match back into the replacement text is an easy way to insert
the matched text. Unless you're using Python, you don't have to add any capruring
new text before, after, or around the matched text, or even between multiple copies of
groups to your regular expression to be able to reuse the overall match.
In Perl, $&: is actually a variable. Perl stores the overall regex match in this variable
after each successful regex match. Using $& adds a performance penalty to all your
pue dnou8 Suumdeo e u1 xaau ajoum mok deuam oi 1apaad Keu no. os *jad ut saxa8au
use a backreference to that group instead.
.NET and JavaScript have adopted the $&: syntax to insert the regex match into the
replacement text. Ruby uses backslashes instead of dollar signs for replacement text
tokens, so use α\&o for the overall match.
but they do allow text matched by capturing groups to be inseredinto the replacement
Java, PHP, and Python do not have a special token to reinsert the overall regex match
text, as the next section explains. The overall match is an implicit capruring group
number 0. For Python, weneed to use the syntax for named caprure to reference group
zero. Python does not support  pue xotss rean skeme Aqma pue uoud pad 'dHd dxgax 1aN
0 aoeuq a 1usap  J sisxa 1 aum jo ssapea dnou8 ude o
nonexistent groups comes into play.
References to nonexistent groups
The regular expression in the solution for this recipe has three capruring groups. If you
type α$4s or α^4x into the replacement text, you’re adding a reference to a capturing
group that does not exist. This triggers one of three different behaviors.
Java, XRegExp, and Python will cry foul by raising an exception or returning an error
message. Do not use invalid backreferences with these flavors. (Actually, you shouldn’t
use invalid backreferences with any flavor.) If you want to insert $4s or α^4s literally,
escape the dollar sign or backslash. Recipe 2.19 explains this in detail.
PHP, Perl, and Ruby substitute all backreferences in the replacement text, including
those that point to groups that don’t exist. Groups that don’t exist did not capture any
text and therefore references to these groups are simply replaced with nothing.
Finally, .NET and JavaScripr (without XRegExp) leave backreferences to groups that
don’t exist as literal text in the replacement.
All flavors do replace groups that do exist in the regular expression but did not caprure
anything, Those are replaced with nothing.
Solution Using Named Capture
Regular expression
\b(?\d{3})(?d{3}) (?\d{4})\b
Regexoptions: None
Regexflavers: .NET, Java 7, XRegExp, PCRE 7, Perl 5.10, Ruby 1.9
q\({}p,xaqunu,)({∈}p\, a8ueupxa,)({}p,eaxe,)q\
Regex options: None
Regexflavers: .NET, PCRE 7, Perl 5.10, Ruby 1.9
\b(?Pd{3})(?P\d{3})(?Pd{4})\b
Regex options: None
Regexflavers: PCRE, Perl 5.10, Python
Replacement
(${area})=${exchange}-${nurber}
Replacement text flavors: NET, Java 7, XRegExp
\g) =^g\g
Replacement text flavor: Python
(\kcarea>) =\k\k
2.21 Insert Part of the Regex Match intothe Replacement Text |101
---
## Page 118
Replacement text flavor: Ruby 1.9
Iaqunu,x,sueyoxa,x\=(,eaxex\)
Replacement text flavor: Ruby 1.9
($+{area)) $+{exchange}-$+{nurber}
Replacement text flavor: Perl 5.10
($1) $2-$3
Replacement text flavor: PHIP
Flavors that support named capture
.NET, Java 7, XRegExp, Python, and Ruby 1.9 allow you to use named backreferences
uoissaadxa neqn8aa 1mo6 u sdnou8 Suundeo patueu pasn no j ixa1 nuauaoeqdaa au u!
The syntax for named backreferences in the replacement text differs from that in the
regular expression.
Ruby uses the same syntax for backreferences in the replacement text as it does in
the regular expression. For named capruring groups in Ruby 1.9, this synrax is
\k or \k’group*. The choice between angle brackets and single quotes is
merely a notational convenience.
Perl 5.10 and later store the text matched by named capruring groups into the hash %
+. You can get the text matched by the group “name* with $+(name}. Perl interpolates
variables in the replacement text, so you can treat $+{name  as a named backreference
in the replacement text.
ou nq ~suorssadxa 1eqnau u sdnox8 Buumde paueu suoddns (d Susn) dHd
in the replacement text. You can use numbered backreferences in the replacement text
to named capturing groups in the regular expression. PCRE assigns numbers to both
named and unnamed groups, from left to right.
NET, Java 7, XRegExp, Python, and Ruby 1.9 also allow numbered references to
named groups. However, NET uses a different numbering scheme for named groups,
PythonrRubrmmnddthrgivllyourapringrouam
as Recipe 2.11 explains. Mixing names and numbers with .NET, Java 7, XRegExp,
don’t name any groups at all. Always use named backreferences for named groups.
See Also
Recipe 2.9 explains the capruring groups that backreferences refer to.
Recipe 2.11 explains named capturing groups. Naming the groups in your regex and
the backreferences in your replacement text makes them easier to read and maintain.
"Search and Replace with Regular Expressions" in Chapter 1 describes the various
replacement text flavors.
Recipe 2.10 shows how to use backrefreences in the regularexpression itself. The syntax
is different than for backreferences in the replacement text.
102 I Chapter 2: Basic Regular Expression Skillt
---