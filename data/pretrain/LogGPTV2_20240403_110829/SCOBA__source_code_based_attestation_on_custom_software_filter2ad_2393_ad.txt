from the signed measurement value of the source code
package.
• Src compile: This function conﬁgures and builds the
package. We can integrate our trusted building mech-
anisms here.
Moreover, the following functions can be modiﬁed for im-
plementing advanced trusted installation procedures, e.g.
generating proof chains or related certiﬁcates.
• pkg preinst: The commands in this function are run
just prior to merging a package image into the ﬁle sys-
tem.
• Src install: This function installs the package to the
destination.
• P kg conf ig: This function sets up an initial conﬁgu-
ration for the package after it’s installed.
• P kg postinst: The commands in this function are exe-
cuted immediately following merging a package image
into the ﬁle system.
The package repository of Gentoo is in the best position to
serve as the trusted veriﬁer. Besides the package data, the
package repository also maintains the corresponding prop-
erty information in order to certify customized software. In
order to support runtime certiﬁcate veriﬁcation, the package
repository maintains the certiﬁcate repository and revoca-
tion list.
6. RELATED WORK
Since TCG attestation was introduced as a key feature in
the TCG speciﬁcation[23], many remote attestation schemes
have been proposed in the literature. Terra [7] employs a
Trusted Virtual Machine Monitor (TVMM) to transform a
tamper resistant hardware platform into multiple isolated
virtual machines (VMs). With the protection of the trusted
hardware, TVMM oﬀers both the open-box VM and the
closed-box VM. The attestation in TVMM only measures
the programs before their executions and is not able to check
their behaviors after attestation. As an extension of TCG
attestation, IMA [21] employs a loading time integrity mea-
surement mechanism which measures all software compo-
nents including BIOS, the OS loader, the operating system,
and programs at the application layer. The limitation of
integrity-based attestation such as IMA is that it checks at
the loading time. Since there exists a gap between time of
measurement and time of execution, loading time integrity
does not necessarily lead to stronger security assurance. As
a follow-up of IMA, [20] employs IMA to enforce remote
access control by attestation.
Property-based attestation [4, 19, 18] was introduced to
provide a scalable attestation framework to support privacy
preserving for the attester platform. A trusted third party
is introduced to exam the runtime measurements and judge
the property of the target platform. The challenger only
veriﬁes the property certiﬁcate to conclude the attestation
result and the conﬁguration information of the attested plat-
form is preserved. Existing schemes of TCG attestation
and property-based attestation are based on the known-good
measurements of these attested programs.
Haldar et al. [12] introduced a semantic attestation mech-
anism based on the Trusted Virtual Machine (TVM). The
TVM based semantic attestation mechanism enables the
remote attestation of high-level program properties. Shi
et al. proposed a ﬁne-grained attestation scheme called
BIND [22].
It provides evaluation interfaces to attest the
security-concerned segments of code. Jaeger et al.
[14] in-
troduced the Policy-Reduced Integrity Measurement Archi-
tecture (PRIMA) based on the information ﬂow integrity
checking against the Mandatory Access Control (MAC) poli-
cies. Program execution attestation introduced in [11] is to
attest whether a program is executed as expected. These
semantic attestation mechanisms still require a know-good
binary code repository.
However, most of the existing schemes are still based on
binary attestation, as it plays an important role for authen-
tication on software. As the binary attestation involves veri-
ﬁcation on the measurement of binary code, most of existing
schemes have to face the problem of keeping a huge known-
good measurements database in practical solutions.
Trusted Execution Technology (TXT) and Secure Virtual
Machine (SVM) are introduced to provide a trusted execu-
tion environment. Recent years, there are already several
practices [8, 15, 17] exploiting TXT or SVM. Open Secure
LOader (OSLO) [15] leverages the dynamic root of trust to
implement a bootloader based on AMD SKIN IT instruc-
tion. Flicker [17] was introduced as an infrastructure for
executing security sensitive code in complete isolation.
It
leverages the Secure Virtual Machine (SVM) of AMD pro-
cessors and provides ﬁne-grained attestation on program ex-
ecution. LaLa [8] combines the latest hardware virtualiza-
tion and trust technologies to deliver a more robust platform
to support both instant-on system and a full-featured OS,
and the ﬂexible architecture enables a platform user to ben-
eﬁt from the advantages of a fast booting platform and a
full-featured mainstream OS at the same time.
7. DISCUSSION
The proposed SCOBA framework could be applied to gen-
eral custom software provided that a trusted veriﬁer could
be provided for all source ﬁles and conﬁgurations, which is
not always practical. Here we discuss some of the limitations
and possible enhancements of the proposed approach.
Selection of Trusted Veriﬁer
It is important to choose the right party to play as the role
of trusted veriﬁer. In order to certify a customized software,
the trusted veriﬁer is supposed to have enough knowledge
for carrying out the certiﬁcation process. The provider of
the original software holds the best position to serve as the
role of trusted veriﬁer for certifying the property of the cus-
tomized software. However, when the original provider is
not trusted or not available, a trusted third party can be
employed and it should maintain a repository to store the
property information of all known-good source code, which
may come from diﬀerent software providers, another trusted
third party or trusted agent for software certiﬁcation.
Automatic source code certiﬁcation on custom-
built software
For a custom-built program with only variant building con-
ﬁgurations, the trusted veriﬁer can employ semantic veriﬁca-
tion to automatically examine the building conﬁgurations.
If the custom-built software does not make any modiﬁca-
tions on the source code, the trusted veriﬁer can maintain
a repository of known-good source code ﬁles according to
speciﬁc properties. In the certiﬁcation phase, the proofs of
trusted building process for the target custom software can
be automatically analyzed to conclude its property.
Attestation on fully custom software
For fully custom software, users may modify the source code
of the target custom software or even add new source code
ﬁles into the software. It is diﬃcult for a trusted veriﬁer to
automatically certify the modiﬁed source code. A straight-
forward way is to have experts manually checking these mod-
iﬁcations and determine the property of the custom software.
For programs with source code modiﬁcations at lower gran-
ularity (such as instructions), besides the manual veriﬁca-
tion on these modiﬁed codes, the trusted veriﬁer can also
employ more sophisticated certiﬁcation techniques for auto-
matic program certiﬁcation, such as testing [6] and model
checking. The certiﬁcation on a whole customized software
can be accomplished by certifying its software components
[10]. The custom software may be built from scratch, and
its source code ﬁles or subcomponents may come from other
open source software. So it is possible to automatically
certify these subcomponents from known software distribu-
tions.
Supporting semantic based attestation on cus-
tom software
The proposed scheme can serve as a building block for other
types of semantic based attestation [12] on customized soft-
ware. Diﬀerent types of semantic attestation solutions may
concern diﬀerent properties of software. However, the in-
tegrity of a program is the basis for all diﬀerent solutions.
Our scheme provides the possibility to attest the customized
software with unpredictable versions and conﬁgurations.
8. CONCLUDING REMARKS
In this paper, we introduce SCOBA, a source code based
attestation scheme for custom software. SCOBA enables
property attestation on custom software with unpredictable
versions and building conﬁgurations. With a trusted build-
ing process, SCOBA binds the binary code of a program
with its source code and building conﬁguration. Then a
trusted veriﬁer is able to certify the generated binary code
with the proofs from the Trusted Building System and deter-
mine the property of the target custom software by checking
the source code and building conﬁgurations. Thus SCOBA
links the trust chain between TPM to the runtime attested
custom software. We implement a prototype of SCOBA
based on GCC compilation tools and TPM. Experiments
show that the performance is acceptable in practice. We
also studies the application of SCOBA on Gentoo to sup-
port attestation on free software distributed in the source
code form. With the support of SCOBA, it is possible for
the free software community to employ remote attestation,
one of the key TCG feature, to support trust establishment
on applications in an open networking environment.
9. REFERENCES
[1] Linux From Scratch.
http://www.linuxfromscratch.org/index.html.
[2] AMD. AMD64 Virtualization Codenamed “Paciﬁca”
Technology–Secure Virtual Machine Architecture
Reference Manual. Technical Report Publication
Number 33047, Revision 3.01, AMD, May 2005.
[3] P. Barham, B. Dragovic, K. Fraser, S. Hand,
T. Harris, A. Ho, R. Neugebauer, I. Pratt, and
A. Warﬁeld. Xen and the art of virtualization. In
SOSP, volume 37, 5 of Operating Systems Review,
pages 164–177, Oct. 19–22 2003.
[9] Gentoo. Gentoo Linux. http://www.gentoo.org/, 2009.
[10] A. K. Ghosh and G. McGraw. An approach for
certifying security in software components. In Proc.
21st NIST-NCSC National Information Systems
Security Conference, pages 42–48, 1998.
[11] L. Gu, X. Ding, R. H. Deng, B. Xie, and H. Mei.
Remote attestation on program execution. In S. Xu,
C. Nita-Rotaru, and J.-P. Seifert, editors, STC, pages
11–20. ACM, 2008.
[12] V. Haldar, D. Chandra, and M. Franz. Semantic
remote attestation—a virtual machine directed
approach to trusted computing. In the Third virtual
Machine Research and Technology Symposium (VM
’04). USENIX., 2004.
[13] Intel Corporation. Intel trusted execution technology
— preliminary architecture speciﬁcation. Technical
Report Document Number: 31516803, Intel
Corporation, 2006. ftp://download.intel.com/
technology/security/downloads/31516803.pdf.
[14] T. Jaeger, R. Sailer, and U. Shankar. PRIMA:
policy-reduced integrity measurement architecture. In
SACMAT ’06, pages 19–28, 2006.
[15] B. Kauer. OSLO: Improving the security of Trusted
Computing. In Proceedings of the 16th USENIX
Security Symposium, 2008.
[16] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta,
V. Gligor, and A. Perrig. TrustVisor: Eﬃcient TCB
reduction and attestation. In Proceedings of the IEEE
Symposium on Security and Privacy, May 2010.
[17] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and
H. Isozaki. Flicker: an execution infrastructure for tcb
minimization. In J. S. Sventek and S. Hand, editors,
EuroSys, pages 315–328. ACM, 2008.
[18] J. Poritz, M. Schunter, E. Van Herreweghen, and
M. Waidner. Property attestation—scalable and
privacy-friendly security assessment of peer computers.
Technical Report RZ 3548, IBM Research, May 2004.
[19] A.-R. Sadeghi and C. St¨uble. Property-based
attestation for computing platforms: caring about
properties, not mechanisms. New security paradigms,
2004.
[20] R. Sailer, T. Jaeger, X. Zhang, and L. v. Doorn.
Attestation-based policy enforcement for remote
access. In CCS 04, October 25-29, 2004.
[4] L. Chen, R. Landfermann, H. L¨ohr, M. Rohe, A.-R.
[21] R. Sailer, X. Zhang, T. Jaeger, and L. v. Doorn.
Sadeghi, and C. St¨uble. A protocol for property-based
attestation. In STC ’06, pages 7–16, New York, NY,
USA, 2006. ACM Press.
[5] J. Cihula. Trusted Boot: Verifying the Xen Launch.
http://www.linuxfromscratch.org/index.html. Xen
Summit 07 Fall.
[6] G. Fink and M. Bishop. Property-based testing: a new
approach to testing for assurance. In ACM SIGSOFT
Software Engineering Notes, volume 22(4), 1997.
[7] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and
D. Boneh. Terra a virtual machine-based platform for
trusted computing. In SOSP 2003, Bolton Landing,
New York, USA, October, 2003.
[8] C. Gebhardt and C. Dalton. Lala: a late launch
application. In STC ’09: Proceedings of the 2009 ACM
workshop on Scalable trusted computing, pages 1–8,
New York, NY, USA, 2009. ACM.
Design and implementation of a tcg-based integrity
measurement architecture. In Proceedings of the 13th
USENIX Security Symposium, San Diego, CA, USA,
August, 2004.
[22] E. Shi, A. Perrig, and L. V. Doorn. Bind: A
ﬁne-grained attestation service for secure distributed
systems. In 2005 IEEE Symposium on Security and
Privacy, 2005.
[23] Trusted Computing Group. TPM main speciﬁcation.
Main Speciﬁcation Version 1.2 rev. 85, Trusted
Computing Group, Feb. 2005.
[24] H. Wang, Y. Guo, and X. Chen. Saconf: Semantic
attestation of software conﬁgurations. In ATC ’09:
Proceedings of the 6th International Conference on
Autonomic and Trusted Computing, pages 120–133,
2009.