### 测试应用 | wget

| 项目       | 详情                     |
|------------|--------------------------|
| 版本号     | 1.19.1                   |
| Fuzz 工具  | AFL                      |
| 调试工具   | GDB                      |
| 交互功能实现 | Preeny                  |

#### 编译与安装 wget

首先，下载 wget 源码并使用 `afl-clang-fast` 进行编译和安装：

```bash
wget https://ftp.gnu.org/gnu/wget/wget-1.19.1.tar.gz
tar zxvf wget-1.19.1.tar.gz
cd wget-1.19.1
CXX=afl-clang-fast++ CC=afl-clang-fast ./configure --prefix=/home/mortywget
AFL_USE_ASAN=1 make
make install
```

验证安装是否成功：

```bash
root@c7c87f16a29d:/home/mortywget/bin# ./wget --version
GNU Wget 1.19.1 built on linux-gnu.
```

### 使用 Preeny

Preeny 项目通过重写一些交互函数，利用 `LD_PRELOAD` 预加载机制来修改程序中的交互行为。例如，可以将 socket 相关函数改写为从标准输入输出（stdin, stdout）进行交互，从而方便使用 AFL 进行 fuzz。

**项目下载地址:**
[https://github.com/zardus/preeny](https://github.com/zardus/preeny)

此处省略安装过程...

#### 验证 Preeny 是否安装成功

预加载 `desock.so` 文件，并启动一个 socket 交互程序 `wget`。如果输入的字符串成功作为 `wget` 请求的返回值，则表明 Preeny 安装配置成功。

```bash
root@c7c87f16a29d:~# LD_PRELOAD="/root/preeny/x86_64-linux-gnu/desock.so" wget localhost:6666 -q -O result
```

示例输出：
```bash
gfedcbazzzzffffgggghhhhiiiiddddeeeeffffccccccccbbbbbbb
```

如果看到类似上述输出，则表示 Preeny 安装成功。

### 解决卡住问题

在确定程序卡住的位置后，可以通过修改源码来强制断开连接并退出程序。例如，在 `http.c` 文件中找到以下位置，并添加 `exit(0);`：

```c
tms = datetime_str (time (NULL));
/* Get the new location (with or without the redirection).  */
if (hstat.newloc)
  *newloc = xstrdup (hstat.newloc);
switch (err)
  {
  case HERR: case HEOF: case CONSOCKERR:
  case CONERROR: case READERR: case WRITEFAILED:
  case RANGEERR: case FOPEN_EXCL_ERR: case GATEWAYTIMEOUT:
    /* Non-fatal errors continue executing the loop, which will
       bring them to "while" statement at the end, to judge
       whether the number of tries was exceeded.  */
    exit(0); // 手动添加
    printwhat (count, opt.ntry);
    continue;
  case FWRITEERR: case FOPENERR:
    /* Another fatal error.  */
    logputs (LOG_VERBOSE, "\n");
    logprintf (LOG_NOTQUIET, _("Cannot write to %s (%s).\n"),
               quote (hstat.local_file), strerror (errno));
  case HOSTERR: case CONIMPOSSIBLE: case PROXERR: case SSLINITFAILED:
  case CONTNOTSUPPORTED: case VERIFCERTERR: case FILEBADFILE:
  case UNKNOWNATTR:
    if (statcode == HTTP_STATUS_UNAUTHORIZED)
      {
        /* Authorization is required.  */
        uerr_t auth_err = RETROK;
        bool retry;
        /* Normally we are not interested in the response body.
           But if we are writing a WARC file we are: we like to keep everything.  */
        if (warc_enabled)
          {
            int _err;
            type = resp_header_strdup (resp, "Content-Type");
            _err = read_response_body (hs, sock, NULL, contlen, 0,
                                      chunked_transfer_encoding,
                                      u->url, warc_timestamp_str,
                                      warc_request_uuid, warc_ip, type,
                                      statcode, head);
            xfree (type);
            if (_err != RETRFINISHED || hs->res > 0 || chunked)
              {
                int ret;
                if (chunked)
                  {
                    if (remaining_chunk_size == 0)
                      {
                        char *line = fd_read_line (fd);
                        char *endl;
                      }
                  }
              }
          }
      }
  }
```

这样可以确保在遇到特定错误时，程序能够正常退出。