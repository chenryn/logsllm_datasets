# 【技术分享】代码安全保障技术趋势前瞻

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。

尽管目前利用人工智能（AI）技术辅助安全和风险管理进行代码安全治理的具体路径尚未完全明确，但一些全球领先的安全厂商已经开始尝试将AI应用于代码安全领域。例如，在SAST产品中，虽然其应用广泛且价值显著，但较高的误报率一直备受诟病。通过引入AI技术，可以使用SAST工具的结果作为训练数据，识别并减少误报；系统会输出置信度范围内的误报列表或排除误报的清单。为进一步优化，可以通过对结果的审核来发现新的误报，并将其反馈至训练集中，从而计算出更新后的模型。随着算法迭代，不断整合新信息，旨在持续改进预测效果。IBM在其SAST产品中提供了智能查找分析功能，用以消除误报、降低噪声或忽略低概率事件。此外，360代码卫士团队也在探索如何将AI技术融入代码安全分析，期望在未来版本中推出相关功能。

尽管AI、机器学习乃至深度学习等热门技术领域的实际价值与市场炒作难以区分，但不可否认的是，AI与传统代码安全技术相结合已成为AST领域的重要发展方向之一。

## 面向安全的软件代码成分分析
根据Forrester Research 2017年的研究报告显示，为了加快应用程序开发速度，开发者通常会采用开源组件作为基础，导致80%-90%的代码来源于此类资源。而Veracode发布的《软件安全报告（第7版）》指出，大约97%的Java应用程序至少包含一个已知存在漏洞的组件。由此可见，随着开源组件在现代软件中的使用比例不断增加及其安全性问题日益凸显，开源（或第三方）组件的识别与管理已成为AST解决方案中不可或缺甚至强制性的功能之一。

软件代码成分分析（SCA）技术通过对软件组成进行解析，能够识别出其中所使用的开源及第三方组件（如底层库、框架等），进而发现潜在的安全风险和漏洞。SCA可针对源代码、字节码、二进制文件或可执行文件等多种形式的数据进行检测。除了在安全测试阶段运用SCA外，该技术还可以集成到MSVC、Eclipse等IDE或者SVN、Git等版本控制系统中，以便更好地控制开发者对开源组件的使用情况。

当SAST与SCA技术相融合时，开发人员收到的扫描结果将不仅包括自编代码中的缺陷，还包括开源组件中存在的已知漏洞信息，这有助于更全面地评估项目的安全状况。

## 面向DevSecOps的代码安全测试
随着敏捷开发和DevOps模式逐渐成为主流，传统应用安全实践也在经历变革。许多具体实现方式仍在不断发展完善之中，但对于自动化、工具化以及时间效率的要求越来越高。面向DevSecOps环境下的代码安全测试并非全新概念，但几乎所有传统安全测试方法都会因此产生变化，催生出新的产品形态。

由于开发运维一体化的趋势，即使是简单的Tag或Merge操作也可能引发更多关注。如果提交的代码存在安全隐患，则可能导致发布失败。因此，代码安全需求被提到了前所未有的高度。能够在编写过程中即时发现并修复潜在威胁成为了DevSecOps的基本要求之一。为此，下一代代码安全产品普遍具备了IDE插件支持以及轻量级客户端快速扫描能力。

鉴于持续集成/持续部署在DevOps流程中的广泛应用，高效自动化的代码安全测试变得尤为重要。这意味着相关工具需与Jenkins、Bamboo等CI/CD平台以及Bugzilla、Jira等生命周期管理系统无缝对接，提供包括基线检查、增量分析等功能在内的全方位保障，在尽量减少人工干预的情况下确保软件的安全性。

## 交互式应用安全测试
静态应用程序安全测试（SAST）主要基于源代码层面进行建模和模拟执行分析，但由于缺乏必要的运行时上下文信息，容易产生较高比例的误报；动态应用程序安全测试（DAST）虽能通过模拟攻击手段揭示真实存在的问题，但其覆盖率相对较低。

交互式应用程序安全测试（IAST）作为一种新兴方法试图解决上述局限。Gartner分析师定义IAST为结合了SAST和DAST优点的技术，旨在提高测试准确性（类似于DAST确认攻击成功的方式），同时达到接近于SAST级别的代码覆盖率。IAST具有独特的优势，但在某些情况下仍无法完全取代DAST。

典型的IAST方案由两部分构成：应用程序探针和测试服务器。前者部署于待测Web应用所在服务器上，负责收集来自用户代码、库、框架及其他环境的安全相关信息，并将其发送给后者；后者则负责处理这些数据，生成详细的漏洞报告。此外，借助这种深入的应用程序内部探测机制，还可以实现实时防护功能，阻止诸如SQL注入、跨站脚本等常见攻击的发生，即所谓的实时应用程序自我保护（RASP）技术。

**作者简介：**
章磊，现任360企业安全集团代码安全事业部技术总监。