必需的参数已用 **粗体** 标明。
  属性                           默认值        解释
  ------------------------------ ------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                   \--           与Source绑定的channel，多个用空格分开
  **type**                       \--           组件类型，这个是： `syslogtcp`
  **host**                       \--           要监听的hostname或者IP地址
  **port**                       \--           要监听的端口
  eventSize                      2500          每行数据的最大字节数
  keepFields                     none          是否保留syslog消息头中的一些属性到Event中，可选值 `all` 、`none` 或自定义指定保留的字段。如果设置为 `all` ，则会保留Priority， Timestamp 和Hostname三个属性到Event中。 也支持单独指定保留哪些属性（支持的属性有：priority， version， timestamp， hostname），用空格分开即可。现在已经不建议使用 `true` 和 `false`，建议改用 `all` 和 `none` 了。
  clientIPHeader                 \--           如果配置了该参数，那么客户端的IP会被自动添加到event的header中，这个参数值就是存储IP地址时的key，这样可以方便拦截器（interceptor）或channel选择器（channel selector）作为根据客户端的IP来路由分发event的依据。 注意不要设置成Syslog header的标准参数名，比如 \_[host]() ，这样会导致该参数被覆盖。
  clientHostnameHeader           \--           如果配置了该参数，那么客户端的host name会被自动添加到event的header中，这个参数值就是存储host name时的key，这样可以方便拦截器（interceptor）或channel选择器（channel selector）作为根据客户端的host name来路由分发event的依据。 检索主机名可能涉及名称服务反向查找,这可能会影响性能。注意不要设置成Syslog header的标准参数名，比如 \_[host]() ，这样会导致该参数被覆盖。
  selector.type selector.\*      replicating   可选值：`replicating` 或 `multiplexing` ，分别表示： 复制、多路复用 channel选择器的相关属性，具体属性根据设定的 *selector.type* 值不同而不同
  interceptors interceptors.\*   \--           该source所使用的拦截器，多个用空格分开 拦截器相关的属性配
  ssl                            false         设置为 `true` 启用SSL加密，如果为true必须同时配置下面的 *keystore* 和 *keystore-password* 或者配置了全局的SSL参数也可以，想了解更多请参考 [SSL/TLS 支持](#ssltls-支持) 。
  keystore                       \--           SSL加密使用的Java keystore文件路径，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  keystore-password              \--           Java keystore的密码，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  keystore-type                  JKS           Java keystore的类型. 可选值有 `JKS` 、 `PKCS12` ，如果此参数未配置就会默认使用全局的SSL的配置，如果全局的也未配置就会报错
  exclude-protocols              SSLv3         指定不支持的协议，多个用空格分开，SSLv3不管是否配置都会被强制排除
  include-protocols              \--           可使用的SSL/TLS协议的以空格分隔的列表。 最终程序启用的协议将是本参数配置的协议并且排除掉上面的排除协议。 如果本参数为空，则包含所有受支持的协议。
  exclude-cipher-suites          \--           不使用的密码套件，多个用空格分隔
  include-cipher-suites          \--           使用的密码套件，多个用空格分隔。最终程序使用的密码套件就是配置的使用套件并且排除掉上面的排除套件，如果本参数为空，则包含所有受支持的密码套件。
配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = syslogtcp
a1.sources.r1.port = 5140
a1.sources.r1.host = localhost
a1.sources.r1.channels = c1
```
##### Multiport Syslog TCP Source
这是一个增强版的 [Syslog TCP Source](#syslog-tcp-source)
，它更新、更快、支持监听多个端口。因为支持了多个端口，port参数已经改为了ports。这个Source使用了Apache
mina（一个异步通信的框架，同netty类似）来实现。
提供了对RFC-3164和许多常见的RFC-5424格式消息的支持。
支持每个端口配置不同字符集。
+--------------------------+--------------+--------------------------+
| 属性                     | 默认值       | 解释                     |
+==========================+==============+==========================+
| **channels**             | \--          | 与Source绑定的           |
|                          |              | channel，多个用空格分开  |
+--------------------------+--------------+--------------------------+
| **type**                 | \--          | 组件类型，这个是         |
|                          |              | ：`multiport_syslogtcp`  |
+--------------------------+--------------+--------------------------+
| **host**                 | \--          | 要                       |
|                          |              | 监听的hostname或者IP地址 |
+--------------------------+--------------+--------------------------+
| **ports**                | \--          | 一个或多个要监           |
|                          |              | 听的端口，多个用空格分开 |
+--------------------------+--------------+--------------------------+
| eventSize                | 2500         | 解析成Eve                |
|                          |              | nt的每行数据的最大字节数 |
+--------------------------+--------------+--------------------------+
| keepFields               | none         | 是                       |
|                          |              | 否保留syslog消息头中的一 |
|                          |              | 些属性到Event中，可选值  |
|                          |              | `all` 、`none`           |
|                          |              | 或自定义指               |
|                          |              | 定保留的字段，如果设置为 |
|                          |              | all，则会保留Priority，  |
|                          |              | Timestamp                |
|                          |              | 和Hos                    |
|                          |              | tname三个属性到Event中。 |
|                          |              | 也支                     |
|                          |              | 持单独指定保留哪些属性（ |
|                          |              | 支持的属性有：priority， |
|                          |              | version， timestamp，    |
|                          |              | hostname），用空格分开   |
|                          |              | 即可。现在已经不建议使用 |
|                          |              | `true` 和 `false`        |
|                          |              | ，建议改用 `all` 和      |
|                          |              | `none` 了。              |
+--------------------------+--------------+--------------------------+
| portHeader               | \--          | 如果配置了这个属         |
|                          |              | 性值，端口号会被存到每个 |
|                          |              | Event的header里面用这个  |
|                          |              | 属性配置的值当key。这样  |
|                          |              | 就可以在拦截器或者chann  |
|                          |              | el选择器里面根据端口号来 |
|                          |              | 自定义路由Event的逻辑。  |
+--------------------------+--------------+--------------------------+
| clientIPHeader           | \--          | 如果配置了               |
|                          |              | 该参数，那么客户端的IP会 |
|                          |              | 被自动添加到event的heade |
|                          |              | r中，这个参数值就是存储I |
|                          |              | P地址时的key，这样可以方 |
|                          |              | 便拦截器（interceptor）  |
|                          |              | 或channel选择器（channel |
|                          |              | sel                      |
|                          |              | ector）作为根据客户端的I |
|                          |              | P来路由分发event的依据。 |
|                          |              | 注意不要设置成Syslog     |
|                          |              | header的标准参数名，比如 |
|                          |              | \_[host]()               |
|                          |              | ，                       |
|                          |              | 这样会导致该参数被覆盖。 |
+--------------------------+--------------+--------------------------+
| clientHostnameHeader     | \--          | 如果配置了               |
|                          |              | 该参数，那么客户端的host |
|                          |              | name会被自               |
|                          |              | 动添加到event的header中  |
|                          |              | ，这个参数值就是存储host |
|                          |              | name时的key，这样可以方  |
|                          |              | 便拦截器（interceptor）  |
|                          |              | 或channel选择器（channel |
|                          |              | select                   |
|                          |              | or）作为根据客户端的host |
|                          |              | nam                      |
|                          |              | e来路由分发event的依据。 |
|                          |              | 检                       |
|                          |              | 索主机名可能涉及名称服务 |
|                          |              | 反向查找,这可能会影响性  |
|                          |              | 能。注意不要设置成Syslog |
|                          |              | header的标准参数名，比如 |
|                          |              | \_[host]()               |
|                          |              | ，                       |
|                          |              | 这样会导致该参数被覆盖。 |
+--------------------------+--------------+--------------------------+
| charset.default          | UTF-8        | 解析syslog使用的默认编码 |
+--------------------------+--------------+--------------------------+
| charset.port.\    | \--          | 针                       |
|                          |              | 对具体某一个端口配置编码 |
+--------------------------+--------------+--------------------------+
| batchSize                | 100          | 每次请求尝               |
|                          |              | 试处理的最大Event数量，  |
|                          |              | 通常用这个默认值就很好。 |
+--------------------------+--------------+--------------------------+
| readBufferSize           | 1024         | 内部Mina通信的读         |
|                          |              | 取缓冲区大小，用于性能调 |
|                          |              | 优，通常用默认值就很好。 |
+--------------------------+--------------+--------------------------+
| numProcessors            | （自动分配） | > 处理消息               |
|                          |              | 时系统使用的处理器数量。 |
|                          |              | > 默认是使用Java Runtime |
|                          |              | > API自动检测CPU数量。   |
|                          |              | > Mina将为每个检测       |
|                          |              | 到的CPU核心生成2个请求处 |
|                          |              | 理线程，这通常是合理的。 |
+--------------------------+--------------+--------------------------+
| selector.type            | replicating  | 可选值：`replicating` 或 |
|                          |              | `multiplexing`           |
|                          |              | ，分别表示：             |
|                          |              | 复制、多路复用           |
+--------------------------+--------------+--------------------------+
| selector.\*              | \--          | channel选择器的相关      |
|                          |              | 属性，具体属性根据设定的 |
|                          |              | *selector.type*          |
|                          |              | 值不同而不同             |
+--------------------------+--------------+--------------------------+
| interceptors             | \--          | 该source所使用           |
| interceptors.\*          |              | 的拦截器，多个用空格分开 |
|                          |              | 拦截器相关的属性配       |
+--------------------------+--------------+--------------------------+
| ssl                      | false        | 设置为 `true`            |
|                          |              | 启用SSL加密，如果        |
|                          |              | 为true必须同时配置下面的 |
|                          |              | *keystore* 和            |
|                          |              | *keystore-password*      |
|                          |              | 或者配置了全局的SSL参数  |
|                          |              | 也可以，想了解更多请参考 |
|                          |              | [SSL/TLS                 |
|                          |              | 支持](#ssltls-支持) 。   |
+--------------------------+--------------+--------------------------+
| keystore                 | \--          | SSL加密使用的Java        |
|                          |              | keystore文件路径，       |
|                          |              | 如果此参数未配置就会默认 |
|                          |              | 使用全局的SSL的配置，如  |
|                          |              | 果全局的也未配置就会报错 |
+--------------------------+--------------+--------------------------+
| keystore-password        | \--          | Java                     |
|                          |              | keystore的密码，         |
|                          |              | 如果此参数未配置就会默认 |
|                          |              | 使用全局的SSL的配置，如  |
|                          |              | 果全局的也未配置就会报错 |
+--------------------------+--------------+--------------------------+
| keystore-type            | JKS          | Java keystore的类型.     |
|                          |              | 可选值有 `JKS` 、        |
|                          |              | `PKCS12`                 |
|                          |              | ，                       |
|                          |              | 如果此参数未配置就会默认 |
|                          |              | 使用全局的SSL的配置，如  |
|                          |              | 果全局的也未配置就会报错 |
+--------------------------+--------------+--------------------------+
| exclude-protocols        | SSLv3        | 指定不支持的协议，       |
|                          |              | 多个用空格分开，SSLv3不  |
|                          |              | 管是否配置都会被强制排除 |
+--------------------------+--------------+--------------------------+
| include-protocols        | \--          | 可使用的SSL/TLS          |
|                          |              | 协议的以空格分隔的列表。 |
|                          |              | 最终程序启用的协         |
|                          |              | 议将是本参数配置的协议并 |
|                          |              | 且排除掉上面的排除协议。 |
|                          |              | 如果本参数为空，         |
|                          |              | 则包含所有受支持的协议。 |
+--------------------------+--------------+--------------------------+
| exclude-cipher-suites    | \--          | 不使用的                 |
|                          |              | 密码套件，多个用空格分隔 |
+--------------------------+--------------+--------------------------+
| include-cipher-suites    | \--          | 使用的密码套件，多个用   |
|                          |              | 空格分隔。最终程序使用的 |
|                          |              | 密码套件就是配置的使用套 |
|                          |              | 件并且排除掉上面的排除套 |
|                          |              | 件，如果本参数为空，则包 |
|                          |              | 含所有受支持的密码套件。 |
+--------------------------+--------------+--------------------------+
配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = multiport_syslogtcp
a1.sources.r1.channels = c1
a1.sources.r1.host = 0.0.0.0
a1.sources.r1.ports = 10001 10002 10003
a1.sources.r1.portHeader = port
```
##### Syslog UDP Source
  属性                           默认值        解释
  ------------------------------ ------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  **channels**                   \--           与Source绑定的channel，多个用空格分开
  **type**                       \--           组件类型，这个是： `syslogudp`
  **host**                       \--           要监听的hostname或者IP地址
  **port**                       \--           要监听的端口
  keepFields                     false         设置为 `true` 后，解析syslog时会保留Priority， Timestamp and Hostname这些属性到Event的消息体中（查看源码发现，实际上保留了priority、version、timestamp、hostname这四个字段在消息体的前面）
  clientIPHeader                 \--           如果配置了该参数，那么客户端的IP会被自动添加到event的header中，这个参数值就是存储IP地址时的key，这样可以方便拦截器（interceptor）或channel选择器（channel selector）作为根据客户端的IP来路由分发event的依据。 注意不要设置成Syslog header的标准参数名，比如 \_[host]() ，这样会导致该参数被覆盖。
  clientHostnameHeader           \--           如果配置了该参数，那么客户端的host name会被自动添加到event的header中，这个参数值就是存储host name时的key，这样可以方便拦截器（interceptor）或channel选择器（channel selector）作为根据客户端的host name来路由分发event的依据。 检索主机名可能涉及名称服务反向查找,这可能会影响性能。注意不要设置成Syslog header的标准参数名，比如 \_[host]() ，这样会导致该参数被覆盖。
  selector.type selector.\*      replicating   可选值：`replicating` 或 `multiplexing` ，分别表示： 复制、多路复用 channel选择器的相关属性，具体属性根据设定的 *selector.type* 值不同而不同
  interceptors interceptors.\*   \--           该source所使用的拦截器，多个用空格分开 拦截器相关的属性配
配置范例：
``` properties
a1.sources = r1
a1.channels = c1
a1.sources.r1.type = syslogudp
a1.sources.r1.port = 5140
a1.sources.r1.host = localhost
a1.sources.r1.channels = c1
```
#### HTTP Source
这个Source从HTTP POST 和 GET请求里面解析
Event，GET方式目前还只是实验性的。把HTTP请求解析成Event是通过配置一个"handler"来实现的，这个"handler"必须实现
*HTTPSourceHandler* 接口，
这个接口其实就一个方法，收到一个HttpServletRequest后解析出一个 Event
的List。从一次请求解析出来的若干个Event会以一个事务提交到channel，