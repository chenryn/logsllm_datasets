                lua_KFunction k);
这个函数的行为和 lua_pcall 完全一致，只不过它还允许被调用的函数让出 （参见 §4.7）。
### lua_pop
[-n, +0, –]
void lua_pop (lua_State *L, int n);
从栈中弹出 n 个元素。
### lua_pushboolean
[-0, +1, –]
void lua_pushboolean (lua_State *L, int b);
把 b 作为一个布尔量压栈。
### lua_pushcclosure
[-n, +1, e]
void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);
把一个新的 C 闭包压栈。
当创建了一个 C 函数后， 你可以给它关联一些值， 这就是在创建一个 C 闭包（参见 §4.4）； 接下来无论函数何时被调用，这些值都可以被这个函数访问到。 为了将一些值关联到一个 C 函数上， 首先这些值需要先被压入堆栈（如果有多个值，第一个先压）。 接下来调用 lua_pushcclosure 来创建出闭包并把这个 C 函数压到栈上。 参数 n 告之函数有多少个值需要关联到函数上。 lua_pushcclosure 也会把这些值从栈上弹出。
n 的最大值是 255 。
当 n 为零时， 这个函数将创建出一个 轻量 C 函数， 它就是一个指向 C 函数的指针。 这种情况下，不可能抛出内存错误。
### lua_pushcfunction
[-0, +1, –]
void lua_pushcfunction (lua_State *L, lua_CFunction f);
将一个 C 函数压栈。 这个函数接收一个 C 函数指针， 并将一个类型为 function 的 Lua 值压栈。 当这个栈顶的值被调用时，将触发对应的 C 函数。
注册到 Lua 中的任何函数都必须遵循正确的协议来接收参数和返回值 （参见 lua_CFunction ）。
lua_pushcfunction 是作为一个宏定义出现的：
     #define lua_pushcfunction(L,f)  lua_pushcclosure(L,f,0)
### lua_pushfstring
[-0, +1, e]
const char *lua_pushfstring (lua_State *L, const char *fmt, ...);
把一个格式化过的字符串压栈， 然后返回这个字符串的指针。 它和 C 函数 sprintf 比较像， 不过有一些重要的区别：
你不需要为结果分配空间： 其结果是一个 Lua 字符串，由 Lua 来关心其内存分配 （同时通过垃圾收集来释放内存）。
这个转换非常的受限。 不支持符号、宽度、精度。 转换符只支持 '%%' （插入一个字符 '%'）， '%s' （插入一个带零终止符的字符串，没有长度限制）, '%f' （插入一个 lua_Number）， '%L' （插入一个 lua_Integer）， '%p' （插入一个指针或是一个十六进制数）， '%d' （插入一个 int）， '%c' （插入一个用 int 表示的单字节字符），以及 '%U' （插入一个用 long int 表示的 UTF-8 字）。
### lua_pushglobaltable
[-0, +1, –]
void lua_pushglobaltable (lua_State *L);
将全局环境压栈。
### lua_pushinteger
[-0, +1, –]
void lua_pushinteger (lua_State *L, lua_Integer n);
把值为 n 的整数压栈。
### lua_pushlightuserdata
[-0, +1, –]
void lua_pushlightuserdata (lua_State *L, void *p);
把一个轻量用户数据压栈。
用户数据是保留在 Lua 中的 C 值。 轻量用户数据 表示一个指针 void*。 它是一个像数字一样的值： 你不需要专门创建它，它也没有独立的元表，而且也不会被收集（因为从来不需要创建）。 只要表示的 C 地址相同，两个轻量用户数据就相等。
### lua_pushliteral
[-0, +1, e]
const char *lua_pushliteral (lua_State *L, const char *s);
这个宏等价于 lua_pushlstring， 区别仅在于只能在 s 是一个字面量时才能用它。 它会自动给出字符串的长度。
### lua_pushlstring
[-0, +1, e]
const char *lua_pushlstring (lua_State *L, const char *s, size_t len);
把指针 s 指向的长度为 len 的字符串压栈。 Lua 对这个字符串做一个内部副本（或是复用一个副本）， 因此 s 处的内存在函数返回后，可以释放掉或是立刻重用于其它用途。 字符串内可以是任意二进制数据，包括零字符。
返回内部副本的指针。
### lua_pushnil
[-0, +1, –]
void lua_pushnil (lua_State *L);
将空值压栈。
### lua_pushnumber
[-0, +1, –]
void lua_pushnumber (lua_State *L, lua_Number n);
把一个值为 n 的浮点数压栈。
### lua_pushstring
[-0, +1, e]
const char *lua_pushstring (lua_State *L, const char *s);
将指针 s 指向的零结尾的字符串压栈。 因此 s 处的内存在函数返回后，可以释放掉或是立刻重用于其它用途。
返回内部副本的指针。
如果 s 为 NULL，将 nil 压栈并返回 NULL。
### lua_pushthread
[-0, +1, –]
int lua_pushthread (lua_State *L);
把 L 表示的线程压栈。 如果这个线程是当前状态机的主线程的话，返回 1 。
### lua_pushvalue
[-0, +1, –]
void lua_pushvalue (lua_State *L, int index);
把栈上给定索引处的元素作一个副本压栈。
### lua_pushvfstring
[-0, +1, e]
const char *lua_pushvfstring (lua_State *L,
                              const char *fmt,
                              va_list argp);
等价于 lua_pushfstring ， 不过是用 va_list 接收参数，而不是用可变数量的实际参数。
### lua_rawequal
[-0, +0, –]
int lua_rawequal (lua_State *L, int index1, int index2);
如果索引 index1 与索引 index2 处的值 本身相等（即不调用元方法），返回 1 。 否则返回 0 。 当任何一个索引无效时，也返回 0 。
### lua_rawget
[-1, +1, –]
int lua_rawget (lua_State *L, int index);
类似于 lua_gettable ， 但是作一次直接访问（不触发元方法）。
### lua_rawgeti
[-0, +1, –]
int lua_rawgeti (lua_State *L, int index, lua_Integer n);
把 t[n] 的值压栈， 这里的 t 是指给定索引处的表。 这是一次直接访问；就是说，它不会触发元方法。
返回入栈值的类型。
### lua_rawgetp
[-0, +1, –]
int lua_rawgetp (lua_State *L, int index, const void *p);
把 t[k] 的值压栈， 这里的 t 是指给定索引处的表， k 是指针 p 对应的轻量用户数据。 这是一次直接访问；就是说，它不会触发元方法。
返回入栈值的类型。
### lua_rawlen
[-0, +0, –]
size_t lua_rawlen (lua_State *L, int index);
返回给定索引处值的固有“长度”： 对于字符串，它指字符串的长度； 对于表；它指不触发元方法的情况下取长度操作（'#'）应得到的值； 对于用户数据，它指为该用户数据分配的内存块的大小； 对于其它值，它为 0 。
### lua_rawset
[-2, +0, e]
void lua_rawset (lua_State *L, int index);
类似于 lua_settable ， 但是是做一次直接赋值（不触发元方法）。
### lua_rawseti
[-1, +0, e]
void lua_rawseti (lua_State *L, int index, lua_Integer i);
等价于 t[i] = v ， 这里的 t 是指给定索引处的表， 而 v 是栈顶的值。
这个函数会将值弹出栈。 赋值是直接的；即不会触发元方法。
### lua_rawsetp
[-1, +0, e]
void lua_rawsetp (lua_State *L, int index, const void *p);
等价于 t[k] = v ， 这里的 t 是指给定索引处的表， k 是指针 p 对应的轻量用户数据。 而 v 是栈顶的值。
这个函数会将值弹出栈。 赋值是直接的；即不会触发元方法。
### lua_Reader
typedef const char * (*lua_Reader) (lua_State *L,
                                    void *data,
                                    size_t *size);
lua_load 用到的读取器函数， 每次它需要一块新的代码块的时候， lua_load 就调用读取器， 每次都会传入一个参数 data 。 读取器需要返回含有新的代码块的一块内存的指针， 并把 size 设为这块内存的大小。 内存块必须在下一次函数被调用之前一直存在。 读取器可以通过返回 NULL 或设 size 为 0 来指示代码块结束。 读取器可能返回多个块，每个块可以有任意的大于零的尺寸。
### lua_register
[-0, +0, e]
void lua_register (lua_State *L, const char *name, lua_CFunction f);
把 C 函数 f 设到全局变量 name 中。 它通过一个宏定义：
     #define lua_register(L,n,f) \
            (lua_pushcfunction(L, f), lua_setglobal(L, n))
lua_remove
[-1, +0, –]
void lua_remove (lua_State *L, int index);
从给定有效索引处移除一个元素， 把这个索引之上的所有元素移下来填补上这个空隙。 不能用伪索引来调用这个函数，因为伪索引并不指向真实的栈上的位置。
### lua_replace
[-1, +0, –]
void lua_replace (lua_State *L, int index);
把栈顶元素放置到给定位置而不移动其它元素 （因此覆盖了那个位置处的值），然后将栈顶元素弹出。
### lua_resume
[-?, +?, –]
int lua_resume (lua_State *L, lua_State *from, int nargs);
在给定线程中启动或延续一条协程 。
要启动一个协程的话， 你需要把主函数以及它需要的参数压入线程栈； 然后调用 lua_resume ， 把 nargs 设为参数的个数。 这次调用会在协程挂起时或是结束运行后返回。 当函数返回时，堆栈中会有传给 lua_yield 的所有值， 或是主函数的所有返回值。 当协程让出， lua_resume 返回 LUA_YIELD ， 若协程结束运行且没有任何错误时，返回 0 。 如果有错则返回错误代码（参见 lua_pcall ）。
在发生错误的情况下， 堆栈没有展开， 因此你可以使用调试 API 来处理它。 错误消息放在栈顶在。
要延续一个协程， 你需要清除上次 lua_yield 遗留下的所有结果， 你把需要传给 yield 作结果的值压栈， 然后调用 lua_resume 。
参数 from 表示协程从哪个协程中来延续 L 的。 如果不存在这样一个协程，这个参数可以是 NULL 。
### lua_rotate
[-0, +0, –]
void lua_rotate (lua_State *L, int idx, int n);
把从 idx 开始到栈顶的元素轮转 n 个位置。 对于 n 为正数时，轮转方向是向栈顶的； 当 n 为负数时，向栈底方向轮转 -n 个位置。 n 的绝对值不可以比参于轮转的切片长度大。