    System.Collections.Generic
    System.Composition
    System.Composition.Hosting
    static System.Console
在这个例子中，创建一个简单的控制台应用程序作为宿主，以包含库中的计算器部
件。为了使宿主和计算器插件彼此独立，需要3个项目。其中一个项目CalculatorContract
包含了插件程序集和宿主可执行文件都使用的协定。项目SimpleCalculator包含部件，实现
协定程序集定义的协定。宿主使用协定程序集调用部件。
CalculatorContract程序集中的协定通过两个接口ICalculator和IOperation来定义。
ICalculator接口定义了GetOperations（）和Operate（）方法。GetOperations（）方法返回
插件计算器支持的所有操作对应的列表，Operate（）方法可调用操作。这个接口很灵
活，因为计算器可以支持不同的操作。如果该接口定义了Add（）和Subtract（）方法，
而不是灵活的Operate（）方法，就需要一个新版本的接口来支持Divide（）和
Multiply（）方法。而使用本例定义的ICalculator接口，计算器就可以提供任意多个操作，
且有任意多个操作数（代码文件AttributeBasedSample/CalculatorContract/ICalculator.cs）。
    public interface ICalculator
    {
      IList GetOperations();
      double Operate(IOperation operation, double[] operands);
    }
ICalculator接口使用IOperation接口返回操作列表，并调用一个操作。IOperation接口
定义了只读属性Name和NumberOperands（代码文件
AttributeBasedSample/CalculatorContract/IOperation.cs）。
    public interface IOperation
    {
      string Name { get; }
      int NumberOperands { get; }
    }
CalculatorContract程序集不需要引用System.Composition程序集，只要.NET接口包含
在其中即可。
插件程序集SimpleCalculator包含的类实现了协定定义的接口。Operation类实现了
IOperation接口。这个类仅包含接口定义的两个属性。该接口定义了属性的get访问器；内
部的set访问器用于在程序集内部设置属性（代码文件
AttributeBasedSample/SimpleCalculator/Operation.cs）。
    public class Operation: IOperation
    {
      public string Name { get; internal set; }
      public int NumberOperands { get; internal set; }
    }
Calculator类实现了ICalculator接口，从而提供了这个插件的功能。按照Export特性的
定义，Calculator类导出为部件。这个特性在NuGet包System.Composition.AttributeModel中
的System. 
Composition名称空间中定义（代码文件
AttributeBasedSample/SimpleCalculator/Calculator.cs）。
    [Export(typeof(ICalculator))]
    public class Calculator: ICalculator
    {
      public IList GetOperations() =>
        new List()
        {
        new Operation { Name="+", NumberOperands=2},
        new Operation { Name="-", NumberOperands=2},
        new Operation { Name="/", NumberOperands=2},
        new Operation { Name="＊", NumberOperands=2}
        };
      public double Operate(IOperation operation, double[] operands)
      {
        double result = 0;
        switch (operation.Name)
        {
        case "+":
          result = operands[0] + operands[1];
          break;
        case "-":
          result = operands[0]-operands[1];
          break;
        case "/":
          result = operands[0] / operands[1];
          break;
        case "＊":
          result = operands[0] ＊ operands[1];
          break;
        default:
          throw new InvalidOperationException($"invalid operation {operation.Name
}");
        }
        return result;
      }
    }
宿主应用程序是一个简单的控制台应用程序（包）。部件使用Export特性定义导出的
内容，对于宿主应用程序，Import特性定义了所使用的信息。在本例中，Import特性注解
了Calculator属性，以设置和获取实现ICalculator接口的对象。因此实现了这个接口的任意
计算器插件都可以在这里使用（代码文件AttributeBasedSample/SimpleHost/Program.cs）。
    class Program
    {
      [Import]
      public ICalculator Calculator { get; set; }
      //etc.
    }
在控制台应用程序的入口方法Main（）中，创建了Program类的一个新实例，接着调
用Bootstrapper（）方法。在Bootstrapper 
（）方法中，创建了一个
ContainerConfiguration，有了ContainerConfiguration，就可以使用流利的API配置这个对
象。方法WithPart导出Calculator类，可以用于composition主机。
CompositionHost实例使用ContainerConfiguration的CreateContainer方法创建（代码文件
AttributeBasedSample / SimpleHost /Program.cs）：
    public static void Main()
    {
      var p = new Program();
      p.Bootstrapper();
      p.Run();
    }
    public void Bootstrapper()
    {
      var configuration = new ContainerConfiguration()
        .WithPart();
      using (CompositionHost host = configuration.CreateContainer())
      {
        //etc.
      }
    }
除了使用方法WithPart（它有重载和泛型版本以及非泛型版本）之外，还可以使用
WithParts添加部件的列表，使用WithAssembly或WithAssemblies添加程序集的一个出口。
使用CompositionHost，可以使用GetExport和GetExports方法访问导出的部件：
    Calculator = host.GetExport();
还可以使用更多的“魔法。”不是指定需要访问的所有出口类型，还可以使用
SatisfyImports方法（它是CompositionHost的一个扩展方法）。其第一个参数需要一个对象
与入口。因为Program类本身定义的一个属性应用Import特性，Program类的实例可以传递
到SatisfyImports方法。调用SatisfyImports后，会填充Program类的Calculator属性（代码文
件AttributeBasedSample/SimpleHost /Program.cs）：
    using (CompositionHost host = configuration.CreateContainer())
    {
      host.SatisfyImports(this);
    }
通过Calculator属性，可以使用ICalculator接口中的方法。GetOperations（）方法调用
前面创建的插件的方法，它返回4个操作。要求用户指定应调用的操作并输入操作数的值
后，就调用插件方法Operate（）。
    public void Run()
    {
      var operations = Calculator.GetOperations();
      var operationsDict = new SortedList();
      foreach (var item in operations)
      {
        WriteLine($"Name: {item.Name}, number operands: " +
        $"{item.NumberOperands}");
        operationsDict.Add(item.Name, item);
      }
      WriteLine();
      string selectedOp = null;
      do
      {
        try
        {
        Write("Operation? ");
        selectedOp =ReadLine();
        if (selectedOp.ToLower() == "exit" ||
          !operationsDict.ContainsKey(selectedOp))
            continue;
        var operation = operationsDict[selectedOp];
        double[] operands = new double[operation.NumberOperands];
        for (int i = 0; i  GetOperations() =>
        new List()
        {
        new Operation { Name="+", NumberOperands=2},
        new Operation { Name="-", NumberOperands=2},
        new Operation { Name="/", NumberOperands=2},
        new Operation { Name="＊", NumberOperands=2},
        new Operation { Name="%", NumberOperands=2},
        new Operation { Name="++", NumberOperands=1},
        new Operation { Name="-", NumberOperands=1}
        };
      public double Operate(IOperation operation, double[] operands)
      {
        double result = 0;
        switch (operation.Name)
        {
        case "+":
          result = operands[0] + operands[1];
          break;
        case "-":
          result = operands[0]-operands[1];
          break;
        case "/":
          result = operands[0] / operands[1];
          break;
        case "＊":
          result = operands[0] ＊ operands[1];
          break;
        case "%":
          result = operands[0] % operands[1];
          break;
        case "++":
          result = ++operands[0];
          break;
        case "-":
          result =-operands[0];
          break;
        default:
          throw new InvalidOperationException($"invalid operation {operation.Name
}");
        }
        return result;
      }
    }
 注意： 
对于SimpleHost，不能同时使用Calculator的两个实现。使用
AdvancedCalculator之前，需要删除引用SimpleCalculator，反之亦然。本章后面将介绍
多个相同类型的出口如何使用一个容器。
前面讨论了Composition体系结构中的入口、出口和类别。如果希望使用不能通过
Composition添加特性的已有类，就可以使用基于约定的部件注册，参见下一节。
26.2.2 基于约定的部件注册
基于约定的部件注册不仅允许导出部件时不使用特性，也提供了更多的选项来定义应
该导出的内容，例如，使用命名约定，如类名以PlugIn或ViewModel结尾，或使用后缀名
称Controller查找所有控制器。
引入基于约定的部件注册会构建与前面使用特性时相同的示例代码，但特性不再是必
需的，因此这里不重复这些相同的代码。这里也使用类Calculator实现了相同的协定接口
ICalculator和IOperation，以及几乎相同的部件。与类Calculator的区别是它没有Export特
性。
解决方案ConventionBasedSample包含以下项目、引用和名称空间。对于
SimpleCalculator项目，不需要Microsoft 
Composition的NuGet包，因为出口不由这个项目
定义。
CalculatorContract （类库）
名称空间
    System.Collections.Generic
SimpleCalculator （类库）
引用
    CalculatorContract
名称空间
    System
    System.Collections.Generic
    System.Composition
SimpleHost （控制台应用程序）
引用
    CalculatorContract
    System.Composition.AttributedModel
    System.Composition.Convention
    System.Composition.Hosting
    System.Composition.Runtime
    System.Composition.TypedParts
名称空间
    System
    System.Collections.Generic
    System.Composition
    System.Composition.Hosting
    static System.Console
  注意： 在编译解决方案前，需要创建一个目录c:/addins。这个示例解决方案
的宿主应用程序加载c:/ 
addins目录中的程序集。所以post-build命令用项目
SimpleCalculator定义，把库复制到c:/addins目录中。
创建宿主应用程序，所有这些就会变得更有趣。与前面类似，创建一个ICalculator类
型的属性，如下面的代码片段所示——它只是没有Import特性（代码文件
ConventionBasedSample/SimpleHost/Program.cs）。
    public ICalculator Calculator { get; set; }
可以把Import特性应用于Calculator属性，只给出口使用约定。可以混合它们，只给出