令就会执行。
下例展示了AND布尔运算符的使用。
S cat teat22.ah
ueeq/uTα/1A
 teating conpound conparisona
1f [ -d SHOME 1 &s [ -v SHOME/teating 1
hen
else
echo *I cannot write to the fl1e
f1
S./test22.sh
cannot write to the file
S touch $HOME/teating
The file exiata and you can write to 1t
S./test22.sh
使用AND布尔运算符时，两个比较都必须满足。第一个比较会检查用户的SHOME目录是否存
在。第二个比较会检查在用户的SHOME目录是否有个叫testing的文件，以及用户是否有该文件的
写人权限。如果两个比较中的一个失败了，if语句就会失败，shel就会执行else部分的命令。
如果两个比较都通过了，则iE语句通过，shell会执行then部分的命令。
12.6if-then的高级特性
bash shell提供了两项可在if-then语句中使用的高级特性：
口用于数学表达式的双括号
口用于高级字符申处理功能的双方括号
12
后面几节将会详细描述每一种特性。
12.6.1使用双括号
双括号命令允许你在比较过程中使用高级数学表达式。test命令只能在比较中使用简单的
算术操作。双括号命令提供了更多的数学符号，这些符号对于用过其他编程语言的程序员而言并
---
## Page 271
256
第12章使用结构化命令
不陌生。双括号命令的格式如下：
((expression 1
expression可以是任意的数学赋值或比较表达式。除了test命令使用的标准数学运算符，
表12-4列出了双括号命令中会用到的其他运算符。
表12-4双括号命令符号
符号
描
va1++
后增
va1--
后减
++va1
先增
--va1
先减
!
逻辑求反
一
位求反
++
募运算
>
右位移
位布尔和
位布尔或
逻辑和
11
逻辑或
可以在i语句中用双括号命令，也可以在脚本中的普通命令里使用来赋值。
S cat test23.sh
#1/bin/bash
 using double parenthesig
va11=10
#
1f (1 $val1 ** 2 > 90 1)
#
then
(1 va12 = $va11 ** 2 1
echo *The square of $va11 iα Sva12*
f 1
-/test23.sb
The square of 10 1a 100
注意，不需要将双括号中表达式里的大于号转义。这是双括号命令提供的另一个高级特性。
12.6.2使用双方括号
双方括号命令提供了针对字符申比较的高级特性。双方括号命令的格式如下：
[[ uoTeee.dxe 1]
---
## Page 272
12.7case 命令
257
双方括号里的expression使用了test命令中采用的标准字符串比较。但它提供了test命
令未提供的另一个特性—模式医配（patterm matching）。
说明双方括号在bash shell中工作良好。不过要小心，不是所有的shell都支持双方括号：
在模式匹配中，可以定义一个正则表达式（将在第20章中详细讨论）来匹配字符串值。
S cat test24.sh
#uaing patterm matching
#1/bin/ba.sh
[[ ▪x == H3sns 1] 3T
then
else
echo *Sorry,。 I do not know you*
f1
S./teat24.sh
Hello rlch
在上面的脚本中，我们使用了双等号（--）。双等号将右边的字符串（r*）视为一个模式，
并应用模式匹配规则。双方括号命令SUSER环境变量进行匹配，看它是否以字母r开头。如果是
的话，比较通过，shell会执行then部分的命令。
12.7case 命令
你会经常发现自已在尝试计算一个变量的值，在一组可能的值中寻找特定值。在这种情形下，
你不得不写出很长的if-then-else语句，就像下面这样。
S cat test25.sh
ueeq/uTα/i#
 looking for a possible value
[qx, = Hasns 1 3T
then
echo *Welcome SUSER*
[exeqxeq, =sasns 1 18
echo *Please enjoy your vlait*
12
hen
echo *Welcome $USER*
ellf [ SUSER = *teating* ]
at8T xmo Ao[ue ssesd ou
then
[e. = sss 1 
, qumooot 6ag18a tttosdg。 ooa
then
---
## Page 273
258
第12章使用结构化命令
e1ae
echo *Sorzy, you are not allowed bere*
 1
$
S./teet25.ah
Please enjoy youx vialt
Helcone rich
elif语句继续if-then检查，为比较变量寻找特定的值。
有了case命令，就不需要再写出所有的elif语句来不停地检查同一个变量的值了。case命
令会采用列表格式来检查单个变量的多个值。
patternl1 pattern2)commandal;:
pattern3) commands2: :
•1 default cosnanda;7
esac
case命令会将指定的变量与不同模式进行比较。如果变量和模式是匹配的，那么shell会执行
为该模式指定的命令。可以通过竖线操作符在一行中分隔出多个模式模式。星号会捕获所有与已
知模式不匹配的值。这里有个将if-then-else程序转换成用case命令的例子。
S cat test26.sh
#1 /bin/bash
 using the case conmand
case SUSER 1n
rlch 1 barbara)
echo *Helcone, $USER*
echo *Please enjoy your vialt*;
Cesting)
:1,aumoose butusss tetoads, oqps
egsica)
:1,euop ex,no usqn 1go 6oT o1 a6xog 2ou oc。 oqoe
* |
echo *Sorry. you are not allowed here*;:
esac
S./test26.sh
Please enjoy your via1t
Nelcone, rlch
case命令提供了一个更清晰的方法来为变量每个可能的值指定不同的选项。
12.8小结
结构化命令允许你改变shell脚本的正常执行流。最基本的结构化命令是if-then语句。该语
句允许你执行一个命令并根据该命令的输出来执行其他命令。
---
## Page 274
12.8小结
259
也可以扩展if-then语句，加人一组当指定命令失败后由bashshell执行的命令。仅在测试命
令返回非零退出状态码时，if-then-else语句才允许执行命令。
也可以将if-then-else语句通过elif语句连接起来。elif等同于使用else if语句，会
在测试命令失败时提供额外的检查。
在很多脚本中，你可能希望测试一种条件而不是一个命令，比如数值、字符串内容、文件或
目录的状态。test命令为你提供了测试这些条件的简单方法。如果条件为TRUE，test命令会为
if-then语句产生退出状态码o。如果条件为FALSE，test命令会为if-then语句产生一个非零
的退出状态码。
方括号是与test命令同义的特殊bash命令。可以在if-then语句中将测试条件放在方括号中
来测试数值、字符串和文件条件。
双括号使用另一种操作符进行高级数学运算。双方括号命令允许高级字符串模式匹配运算。
最后，本章讨论了case命令。该命令是执行多个if-then-else命令的简便方式，它会参照
一个值列表来检查单个变量的值。
下一章会继续讨论结构化命令，介绍shell的循环命令。for和while命令允许你创建循环在
一段时间内重复执行一些命令。
12
---
## Page 275
第13章
更多的结构化命令
本章内容
for循环语句
unti1选代语句使用while语句
口循环
口重定向循环的输出
左上一章里，你看到了如何通过检查命令的输出和变量的值来改变shell脚本程序的流程。
土本章会继续介绍能够控制shell脚本流程的结构化命令。你会了解如何重复一些过程和
命令，也就是循环执行一组命令直至达到了某个特定条件。本章将会讨论和演示bash shell的循环
命令for、while和luntil。
13.1for命令
重复执行一系列命令在编程中很常见。通常你需要重复一组命令直至达到某个特定条件，比
如处理某个目录下的所有文件、系统上的所有用户或是某个文本文件中的所有行。
bashshell提供了for命令，允许你创建一个遍历一系列值的循环。每次选代都使用其中一个
值来执行已定义好的一组命令。下面是bash shell中for命令的基本格式。
for var in list
comsanda
done
在1ist参数中，你需要提供选代中要用到的一系列值。可以通过几种不同的方法指定列表
中的值。
在每次选代中，变量var会包含列表中的当前值。第一次选代会使用列表中的第一个值，第
二次选代使用第二个值，以此类推，直到列表中的所有值都过一遍。
在do和done语句之间输入的命令可以是一条或多条标准的bash shell命令。在这些命令中，
Svar变量包含着这次选代对应的当前列表项中的值。
---
## Page 276
13.1for命令
261
说明只要你愿意，也可以将do语句和for语句放在同一行，但必须用分号将其同列表中的值分
开: for var in list; do。
前面提过有几种不同的方式来指定列表中的值，下面几节将会介绍各种方式。
13.1.1读取列表中的值
for命令最基本的用法就是遍历for命令自身所定义的一系列值。
$ cat test1
#1/bin/ba.sh
 basic for command
for teat in Alabana Alaaka Arizona Arkansas Callfornla Colorado
do
echo The next atate ia Stest
$./test1
done
The next state is Alabana
The next state is Alaska
The
next state
1α Arizona
The next state
The next atate
1s Arkansas
The next state ia Colorado
la California
每次for命令遍历值列表，它都会将列表中的下个值赋给stest变量。$test变量可以像for
命令语句中的其他脚本变量一样使用。在最后一次选代后，Stest变量的值会在shell脚本的剩余
部分一直保持有效。它会一直保持最后一次选代的值（除非你修改了它）。
$ cat testlb
#1/bin/bash
teating the for variable after the looping
for teat in Alabana Alaaka Arizona Arkansas Callfornla Colorado
do
done
test=Connect1cut
echo *Halt, now we′re viaiting Steat*
$ -/test1b
The next atate ia Alabana
The next state is Alaska
The next atate ia Arizona
The
next atate ia California
next atate la Arkansas
The
13
The next state ia Colorado
Walt, now we*re vleiting Connecticut
The last state we visited was Colorado
---
## Page 277
262
第13章更多的结构化命令
Stest变量保持了其值，也允许我们修改它的值，并在for命令循环之外跟其他变量一样使用。
13.1.2读取列表中的复杂值
事情并不会总像你在for循环中看到的那么简单。有时会遇到难处理的数据。下面是给shell
脚本程序员带来麻烦的典型例子。
$ cat badtest1
 another example of bow not to use the for cormand
+1 /bin/bash
for test in I don’t know if this'll vork
op
echo *vord:$test*
done
$. /badtest1
vord:dont know if this11
vord: I
vord:vork
%
真麻烦。shel看到了列表值中的单引号并尝试使用它们来定义一个单独的数据值，这真是把
事情搞得一团糟。