### 优化后的文本

#### 签名算法
给定状态元组 \((S_1, \ldots, S_t)\)，初始化如下：
\[ S_i \leftarrow w_g, \quad v_i \leftarrow H_{w_g}(s_i), \quad \forall i \in \{1, \ldots, t\} \]
\[ c \leftarrow 0 \]

**签名过程 (Signing):**
1. 计算哈希值：\((h_1, h_2, \ldots, h_g) \leftarrow \text{Split}_g(H(M \mathbin{\|} c))\)
2. 将 \(h_1\) 分割为 \(n_1\) 个部分：\((i_1, \ldots, i_{n_1}) \leftarrow \text{Split}_{n_1}(h_1)\)
3. 将 \(h_2\) 分割为 \(n_2\) 个部分：\((i_{n_1+1}, \ldots, i_{n_1+n_2}) \leftarrow \text{Split}_{n_2}(h_2)\)
4. 依此类推，将 \(h_g\) 分割为 \(n_g\) 个部分：\((i_{k-n_g+1}, \ldots, i_k) \leftarrow \text{Split}_{n_g}(h_g)\)

如果 \(i_1, \ldots, i_k\) 是互不相同的，则进行以下操作：
- 对于 \(j \in \{1, \ldots, n_1\}\)，更新 \(S_{i_j} \leftarrow S_{i_j} - 1\)
- 对于 \(j \in \{n_1 + 1, \ldots, n_1 + n_2\}\)，更新 \(S_{i_j} \leftarrow S_{i_j} - 2\)
- 依此类推，对于 \(j \in \{k - n_g + 1, \ldots, k\}\)，更新 \(S_{i_j} \leftarrow S_{i_j} - g\)

返回签名 \((c, H_{S_{i_1}}(s_{i_1}), \ldots, H_{S_{i_k}}(s_{i_k}))\)

否则，增加计数器 \(c \leftarrow c + 1\) 并重复上述过程。

**验证过程 (Verification):**
1. 计算哈希值：\((h_1, h_2, \ldots, h_g) \leftarrow \text{Split}_g(H(M \mathbin{\|} c))\)
2. 将 \(h_1\) 分割为 \(n_1\) 个部分：\((i_1, \ldots, i_{n_1}) \leftarrow \text{Split}_{n_1}(h_1)\)
3. 将 \(h_2\) 分割为 \(n_2\) 个部分：\((i_{n_1+1}, \ldots, i_{n_1+n_2}) \leftarrow \text{Split}_{n_2}(h_2)\)
4. 依此类推，将 \(h_g\) 分割为 \(n_g\) 个部分：\((i_{k-n_g+1}, \ldots, i_k) \leftarrow \text{Split}_{n_g}(h_g)\)

#### 密钥结构
- **公共密钥**（以第一轮为例）:
  - \(s_{1,0}, s_{1,1}, s_{2,0}, s_{3,0}, s_{2,1}, s_{3,1}\)
- **私有密钥**（以第一轮为例）:
  - \(s_{1,2}, s_{2,2}, s_{3,2}, s_{1,3}, s_{2,3}, s_{3,3}, s_{1,4}, s_{2,4}, s_{3,4}\)
- **私有密钥**（以第 \(j\) 轮为例）:
  - \(s_{1,w_g j}, s_{1,w_g j+1}, s_{2,w_g j}, s_{3,w_g j}, s_{2,w_g j+1}, s_{3,w_g j+1}, \ldots\)
  - \(s_{t,0}, s_{t,1}, s_{t,2}, s_{t,3}, s_{t,4}, \ldots, s_{t,w_g j}, s_{t,w_g j+1}, \ldots\)

#### 示例
假设 \(k = g = w = 2, n_1 = n_2 = 1\)，则 \(w_g = 4\)。对于第一个消息 \(M^1\)，\(H(M^1 \mathbin{\|} c_1) = 1 \mathbin{\|} 2\)，第一个签名是 \((H_{4-1}(s_{1,4}), H_{4-2}(s_{2,4})) = (s_{1,1}, s_{2,2})\)。对于第二个消息 \(M^2\)，\(H(M^2 \mathbin{\|} c_2) = 2 \mathbin{\|} 3\)，第二个签名是 \((H_{2-1}(s_{2,4}), H_{4-2}(s_{3,4})) = (s_{2,3}, s_{3,2})\)。

#### 签名元素距离
- **当前签名元素** \(s_{1,x}\) 和 **上次接收的签名元素** 之间的距离计算如下：
  - 如果 \(s_{1,x}\) 属于某个轮次的第一个签名，那么距离为 \(D_{\text{past}} + D_{\text{pres}}\)。
  - 如果 \(s_{1,x}\) 属于某个轮次的第二个签名，那么距离为 \((D_{\text{past}} + D_{\text{pres}})q + D_{\text{pres}}(1 - q)\)。

其中：
- \(D_{\text{pres}} = \frac{g + 1}{2}\)
- \(D_{\text{past}}\) 的计算较为复杂，涉及多个事件的概率和期望值。

#### 安全性分析
- 找到合适的 \(c\) 的概率为 \(P_S = \frac{k!}{(t-k)! t^k}\)。
- 预期的哈希调用次数 \(C_\sigma\) 可以通过组合概率和期望值来计算。
- 攻击者成功伪造签名的方式可以通过组合不同组的链来计算。

希望这些优化使文档更加清晰、连贯和专业。如果有任何进一步的需求或修改，请告诉我！