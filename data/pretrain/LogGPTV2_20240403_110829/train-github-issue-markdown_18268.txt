Not sure if this is a bug report or a feature request, since I'm not sure what
you guys had in mind for this method in the first place. However, the
documentation states that it creates a copy of RequestOptions instance, and
does not change the values of the instance on which it is called.
**Current behavior**  
As per source, the method returns `headers` from one or the other object
(`this` or `options`). That means that `copy` will have access to the same
list as `this` or `options`. So, if the `append` method is called on
`copy.headers`, the original instance it was copied from will also have the
new version of headers, since they are using the same list.
**Expected behavior**  
`copy.headers` is returned as a deep copy, so appending to `copy.headers`
doesn't affect `this.headers` or `options.headers`. So, instead of returning
`this.headers`, merge should return `new Headers(this.headers)` (same goes for
`options`, if present).
**Reproduction of the problem**  
EDIT: plunker here  
Let's say we have custom BaseRequestOptions object globally available, that
appends a custom `base-custom`header, and are provided through DI as Request
options. Let's say we also have a CustomHttp service, that needs to append
another custom header when its methods are called.
    export class CustomHttp extends Http {
        constructor(protected _backend: XHRBackend,
            protected _defaultOptions: RequestOptions,
            private _customService: CustomService) {
            super(_backend, _defaultOptions);
        }
        get(url: string, options?: RequestOptionsArgs): Observable {
            return customLogicBeforeReq.call(this, super.get, url, options);
        }
        // code...
    }
    function customLogicBeforeReq(func, url, options?){
        let reqOpts = this._defaultOptions.merge(options);
        reqOpts.headers.append("x-custom", "from custom service");
        // code...
        return func.call(this, url, reqOpts);
    }
After appending to `reqOpts`, `this._defaultOptions` will also have that
header appended (or `options`, if available). That means that for each request
made with this service (without providing the `options` object), a new
`x-custom` header will be appended. So, after 5 requests,
`this._defaultOptions` will have an `x-custom` entry which is an array of 5
"from custom service" values. The expected behaviour would be that it only has
one `base-custom` header, and none of `x-custom`.
  * **Angular version:** 2.0.0