# (Mostly) Exitless VM Protection from Untrusted Hypervisor through Disaggregated Nested Virtualization

**Authors:**
- Zeyu Mi
- Dingji Li
- Haibo Chen
- Binyu Zang
- Haibing Guan

**Affiliation:**
Shanghai Key Laboratory for Scalable Computing Systems, School of Software, Shanghai Jiao Tong University

**Publication:**
- [Proceedings of the 29th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity20/presentation/mi)
- August 12–14, 2020
- ISBN: 978-1-939133-17-5
- Open access sponsored by USENIX

## Abstract

Cloud tenants face significant security threats, including compromised hypervisors. This necessitates a strong adversary model where the hypervisor is excluded from the Trusted Computing Base (TCB). Previous approaches to protect guest VMs either offer insufficient protection or suffer from performance degradation due to frequent VM exits, especially for I/O operations. This paper introduces CloudVisor-D, an efficient nested hypervisor design that achieves both robust protection and high performance.

The core idea of CloudVisor-D is to disaggregate the nested hypervisor by separating major protection logics into a protected Guardian-VM alongside each guest VM. The Guardian-VM is securely isolated and protected by the nested hypervisor, providing secure services for privileged operations such as hypercalls, EPT violations, and I/O operations. By leveraging recent hardware features, most privileged operations from a guest VM require no VM exits to the nested hypervisor, thus reducing performance overhead. We have implemented CloudVisor-D on a commercially available machine with these hardware features. Experimental evaluation shows that CloudVisor-D incurs negligible performance overhead even for I/O-intensive benchmarks and, in some cases, outperforms a vanilla hypervisor due to the reduced number of VM exits.

## 1. Introduction

Multi-tenant clouds rely on the premise that the cloud will ensure the privacy and integrity of tenants' virtual machines (VMs). However, this premise is threatened by vulnerabilities in the hypervisor, which can be exploited by attackers. As the complexity of hypervisors increases, so does the number of discovered security vulnerabilities. For example, the total number of uncovered security vulnerabilities in the Xen hypervisor has increased from 32 in 2012 to 303 in 2019.

Several software approaches aim to shield VMs from an untrusted hypervisor, broadly classified into "in-the-box" and "out-of-the-box" methods. The "in-the-box" approach hardens the hypervisor layer using techniques such as hypervisor decomposition, control flow integrity, and minimizing the hypervisor. While these methods can mitigate some attacks, they do not eliminate the risk entirely.

The "out-of-the-box" approach uses a nested hypervisor to deprivilege the commodity hypervisor and securely interpose all interactions between guest VMs and the hypervisor. For instance, CloudVisor introduces a small nested hypervisor underneath the Xen hypervisor, isolating it and its VMs. However, this design results in increased VM exits, leading to up to 54.5% performance overhead for I/O-intensive workloads.

Recent interest has focused on leveraging secure hardware modules like Intel SGX to guarantee the security and privacy of applications in an untrusted environment. However, SGX enclaves are limited to user mode and have hardware limitations, making them unsuitable for VM protection in a virtualized environment.

In this paper, we present CloudVisor-D, a design that securely and efficiently shields VMs from a compromised hypervisor. Like previous solutions, CloudVisor-D leverages nested virtualization but addresses its deficiencies through a disaggregated design. It decomposes the nested hypervisor functionality into a tiny nested hypervisor (RootVisor) in the privileged mode and a set of Guardian-VMs in the non-privileged mode. Each Guardian-VM handles most protection logics, while RootVisor isolates all Guardian-VMs from the commercial hypervisor (SubVisor) and guest VMs.

Recent hardware advances, such as VMFUNC and virtualization exceptions, enable self-handling of VM exits and efficient EPT switching in the guest mode. Based on these features, a Guardian-VM can handle offloaded VM operations without VM exits. Assisted by the Guardian-VM, the guest VM can directly invoke hypercall handling functions in the SubVisor without trapping into the RootVisor. Normal EPT violations are converted to exceptions in the guest mode, which are then redirected to the SubVisor by the Guardian-VM for processing.

However, securely handling VM operations in the guest mode is challenging. A VM or the SubVisor may maliciously switch EPT to bypass or attack the Guardian-VM. Existing solutions assume the attacker cannot modify the CR3 register value, which is not the case in CloudVisor-D. To address this, CloudVisor-D provides several techniques, including creating an isolated environment for Guardian-VMs and enforcing complete mediation of communication paths between guest VMs and the SubVisor.

Based on these properties, a Guardian-VM can handle VM operations without trusting guest VMs and the SubVisor. It ensures that the corresponding VM can only invoke functions within a limited range, listed in a jump table. Additionally, it provides a shadow EPT to the SubVisor for each guest VM and carefully checks updates made to the shadow EPT before copying them back to the real EPT. Finally, the Guardian-VM protects the privacy and integrity of guest VMs' I/O data.

We have implemented CloudVisor-D based on Xen 4.5.0 and deployed it on a commodity Intel Skylake machine. The code size of CloudVisor-D (including RootVisor and Guardian-VM) is roughly equal to that of CloudVisor, indicating no increase in TCB size. Our evaluation shows that CloudVisor-D significantly improves the performance of nested virtualization, achieving an 85% speedup in EPT violation handling compared to CloudVisor. Furthermore, CloudVisor-D efficiently supports Para-Virtualization (PV) VMs, introducing negligible overheads for most benchmarks and, in some cases, outperforming vanilla Xen due to the reduced number of VM exits.

### Contributions

- A disaggregated nested virtualization design to shield VMs from an untrusted hypervisor, reducing a large number of VM exits.
- Techniques to achieve the same level of security as nested virtualization.
- Implementation and evaluation of our design on a commercially available machine.

## 2. Motivation & Background

### 2.1 Attack Surface of Virtualization Layer

In a typical cloud, the virtualization layer is a key target for attackers. An attacker can exploit vulnerabilities to "jail-break" into the hypervisor, which is a common threat given the increasing number of discovered vulnerabilities. After compromising the hypervisor or the host OS, the attacker can gain control of all other guest VMs.

### 2.2 Overheads of Nested Virtualization

To protect guest VMs from an untrusted hypervisor, the nested virtualization approach excludes the hypervisor from the TCB. CloudVisor, for example, introduces a tiny nested hypervisor in the root mode and deprivileges the Xen hypervisor and the host OS to the guest mode. The nested hypervisor interposes all communications between the Xen hypervisor and guest VMs, ensuring the Xen hypervisor cannot access a guest's memory and disk storage. However, this approach incurs a large number of VM exits, leading to significant performance overhead, especially for I/O operations.

Table 2 illustrates the overhead analysis of VM operations in CloudVisor compared to Xen:

| Operation          | Control Flow in Xen                          | Control Flow in CloudVisor                      | Times |
|--------------------|----------------------------------------------|-------------------------------------------------|-------|
| Hypercall          | VM → Xen → VM                               | VM → CloudVisor → Xen → ... → CloudVisor → VM   | > 2X  |
| EPT Violation      | VM → Xen → VM                               | VM → CloudVisor → Xen → ... → CloudVisor → VM   | 2 - 6X|
| DMA Operation      | VM → Xen → Dom0 → Xen → VM                  | VM → CloudVisor → Xen → CloudVisor → Dom0 → ... | > 2X  |

Figure 2 shows the control flows of hypercall operation, EPT violation handling, and I/O operation in CloudVisor.