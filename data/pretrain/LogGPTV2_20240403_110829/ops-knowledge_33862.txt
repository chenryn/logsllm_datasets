User: I'm looking to start using a key/value store for some side projects (mostly as a learning experience), but so many have popped up in the recent past that I've got no idea where to begin.  Just listing from memory, I can think of:

CouchDB
MongoDB
Riak
Redis
Tokyo Cabinet
Berkeley DB
Cassandra
MemcacheDB

And I'm sure that there are more out there that have slipped through my search efforts.  With all the information out there, it's hard to find solid comparisons between all of the competitors.  My criteria and questions are:

(Most Important) Which do you recommend, and why?
Which one is the fastest?
Which one is the most stable?
Which one is the easiest to set up and install?
Which ones have bindings for Python and/or Ruby?

Edit:
So far it looks like Redis is the best solution, but that's only because I've gotten one solid response (from ardsrk).  I'm looking for more answers like his, because they point me in the direction of useful, quantitative information.  Which Key-Value store do you use, and why?
Edit 2:
If anyone has experience with CouchDB, Riak, or MongoDB, I'd love to hear your experiences with them (and even more so if you can offer a comparative analysis of several of them)
Assistant: You need to understand what modern NoSQL phenomenon is about. 
It is not about key-value storages. They've been available for decades (BerkeleyDB for example). Why all the fuss now ?
It is not about fancy document or object oriented schemas and overcoming "impedance mismatch". Proponents of these features have been touting them for years and they got nowhere.
It is simply about adressing 3 technical problems: automatic (for maintainers) and transparent (for application developers) failover, sharding and replication.
Thus you should ignore any trendy products that do not deliver on this front. These include Redis, MongoDB, CouchDB etc. And concentrate on truly distributed solutions like cassandra, riak etc.
Otherwise you'll loose all the good stuff sql gives you (adhoc queries, Crystal Reports for your boss, third party tools and libraries) and get nothing in return.