# Dissecting BitTorrent: Five Months in a Torrent's Lifetime

**Authors:**
- Mikel Izal
- Guillaume Urvoy-Keller
- Ernst W. Biersack
- Pascal Felber
- Anwar Al Hamra
- Luis Garcés-Erice

**Institut Eurecom, 2229, route des Crêtes, 06904 Sophia-Antipolis, France**
- {izal, urvoy, erbi, felber, alhamra, garces}@eurecom.fr

## Abstract
Popular content, such as software updates, is often requested by a large number of users. Traditionally, this demand has been met through the use of large server farms or mirroring, both of which can be expensive. A more cost-effective alternative is peer-to-peer (P2P) based replication systems, where users who retrieve the file simultaneously act as clients and servers. This paper examines BitTorrent, a popular P2P application designed for the distribution of large files to a large set of hosts. Our analysis is based on measurements collected over a five-month period involving thousands of peers. We evaluate the performance of BitTorrent using several metrics and conclude that it is a realistic and cost-effective alternative to traditional server-based content distribution.

## 1. Introduction
BitTorrent [4] is a file distribution system based on the P2P paradigm. It has quickly become a viable and popular alternative to file mirroring for distributing large content, as evidenced by the numerous websites hosting active "torrents" (e.g., http://f.scarywater.net/).

To assess the performance of BitTorrent, we conducted a comprehensive analysis using two sources of information:
1. The tracker log of one of the most popular torrents—the 1.77GB Linux Redhat 9 distribution—covering its first five months of activity. This log includes statistics for over 180,000 clients, with a significant flash-crowd period during the first five days, where more than 50,000 clients initiated downloads.
2. Data collected from a modified client participating in the same torrent. This second source allows us to study the direct interactions between clients.

The rest of the paper is organized as follows:
- Section 2 presents the main features of BitTorrent.
- Section 3 reviews related work.
- Section 4 discusses the results obtained from the tracker log.
- Section 5 presents the conclusions drawn from our client log.
- Section 6 outlines future directions.

## 2. BitTorrent
BitTorrent is a P2P application that leverages the resources (access bandwidth and disk storage) of peer nodes to efficiently distribute large files. Each file distributed via BitTorrent is associated with a separate torrent. Unlike other P2P applications like Gnutella or Kazaa, which focus on quickly locating hosts that hold a given file, BitTorrent's primary objective is to rapidly replicate a single large file to a set of clients.

A torrent consists of a central component, the tracker, and all currently active peers. Peers are categorized into two types based on their download status:
- **Seeds**: Clients who have a complete copy of the file and continue to serve other peers.
- **Leechers**: Clients who are still downloading the file.

The tracker is the only centralized component of the system. It does not participate in the actual file distribution but maintains metadata about the active peers and serves as a rendezvous point for clients.

To join an existing torrent, a user downloads a torrent file (usually from a web server), which contains the IP address of the tracker. To initiate a new torrent, one needs at least a web server to host the tracker and an initial seed with a complete copy of the file. Active clients periodically (every 30 minutes) report their state to the tracker, or when joining or leaving the torrent. Upon joining, a new client receives a list of active peers to connect to, typically 50 peers chosen randomly from the active pool. The client aims to maintain connections to 20-40 peers. If a client fails to maintain at least 20 connections, it recontacts the tracker for additional peers. The set of peers to which a client is connected is called its peer set.

Clients in a torrent cooperate to replicate the file among each other using swarming techniques. The file is broken into equal-sized chunks (typically 256kB each), and clients exchange these chunks. This technique enables parallel downloads, where different chunks are simultaneously downloaded from different clients. When a client obtains a new chunk, it informs all connected peers.

Interactions between clients are guided by two principles:
1. **Tit-for-tat Strategy**: A peer preferentially sends data to peers that reciprocally send data to them, encouraging cooperation and discouraging free-riding.
2. **Choke/Unchoke Policy**: A peer limits the number of peers it serves simultaneously to four, continuously seeking the best uploaders (for leechers) or downloaders (for seeds). Every 10 seconds, a peer re-evaluates the upload rates and chokes the peer with the lowest rate if another peer offers a better rate. Every 30 seconds, a peer performs an optimistic unchoke, unchoking a peer regardless of the upload rate to discover potentially better services.

Another important feature is the chunk selection algorithm, which aims to maximize the entropy of each chunk in the torrent. The heuristic used is the "rarest first" policy, where a peer always uploads the least duplicated chunk among those needed in its peer set. For a new peer with no chunks, a random first policy is used for the first chunk, followed by the rarest first policy for subsequent chunks.

## 3. Previous Work
Content replication approaches can be classified into client-side and server-side methods. Early client-side approaches involved caching content already downloaded by clients within a network. On the server side, transparent redirection to mirror sites (e.g., Akamai) was a common solution.

The P2P paradigm has been applied to both client-side and server-side solutions. Server-side proposals include overlay nodes dynamically organizing into a tree structure for maximum throughput [5] and FastReplica [2], which efficiently replicates large content to stable overlay nodes.

On the client side, there are many proposals for building application-layer multicast services [8, 6, 3]. Slurpie [9] is a solution similar to BitTorrent, aiming to enforce cooperation among clients to reduce the load on a primary web server. Slurpie's algorithms are more complex than BitTorrent's and require estimating the number of peers. While Slurpie outperforms BitTorrent in controlled environments, its performance under flash crowds and with a large number of clients is unknown.

## 4. Tracker Log Analysis
The tracker log covers a five-month period from April to August 2003, focusing on the 1.77 GB Linux Redhat 9 distribution. Over 180,000 clients participated, with a peak of 51,000 clients during the first five days, clearly indicating a flash-crowd (Figures 1(a) and 1(b)). As clients periodically report their state to the tracker, including the amount of data uploaded and downloaded, the log provides insights into the global evolution of the file replication process.

### 4.1 Global Performance
Our analysis of the tracker log reveals that BitTorrent clients exhibit altruistic behavior, actively sending data to other clients, both as leechers and seeds. This altruism is enforced by the tit-for-tat policy, which prioritizes serving cooperative clients. Once a client becomes a seed, they remain connected for an average of six and a half hours. This behavior can be attributed to the need for explicit termination after download completion and the legal nature of the content, which reduces the incentive to disconnect quickly.

Over the five-month period, seeds contributed more than twice the amount of data sent by leechers (Figure 2). The proportion of seeds consistently exceeded 20%, peaking at 40% during the first five days (Figure 3). This indicates that BitTorrent can handle high flash-crowds by quickly creating new seeds. In high-demand situations, older peers, who hold more chunks, have a higher priority, increasing their chances of completing the download and becoming seeds for newcomers. This strategy benefits from the long-term cooperation of users who keep their clients as seeds.

[Figures 1(a), 1(b), 2, and 3 would be included here to illustrate the data.]

## 5. Conclusions and Future Directions
Our analysis of BitTorrent over a five-month period, involving thousands of peers, demonstrates that it is a robust and efficient alternative to traditional server-based content distribution. The system's ability to handle flash-crowds and its reliance on user cooperation make it a promising solution for large-scale file distribution.

Future work will focus on further optimizing the algorithms and exploring the potential of BitTorrent in various scenarios, including the distribution of different types of content and under varying network conditions.

---

**References:**
- [4] BitTorrent Protocol Specification
- [5] Example Reference
- [2] FastReplica: Efficient Large-Scale Content Replication
- [8] Application-Layer Multicast Services
- [6] Another Example Reference
- [3] Yet Another Example Reference
- [9] Slurpie: A Peer-to-Peer File Distribution System