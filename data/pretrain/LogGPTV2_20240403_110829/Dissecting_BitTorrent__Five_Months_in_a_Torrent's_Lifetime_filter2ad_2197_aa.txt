title:Dissecting BitTorrent: Five Months in a Torrent's Lifetime
author:Mikel Izal and
Guillaume Urvoy-Keller and
Ernst W. Biersack and
Pascal Felber and
Anwar Al Hamra and
Luis Garc&apos;es-Erice
Dissecting BitTorrent: Five Months in a
Torrent’s Lifetime
M. Izal, G. Urvoy-Keller, E.W. Biersack, P.A. Felber, A. Al Hamra, and
L. Garc´es-Erice
Institut Eurecom, 2229, route des Crˆetes, 06904 Sophia-Antipolis, France
{izal,urvoy,erbi,felber,alhamra,garces}@eurecom.fr
Abstract. Popular content such as software updates is requested by a
large number of users. Traditionally, to satisfy a large number of requests,
lager server farms or mirroring are used, both of which are expensive. An
inexpensive alternative are peer-to-peer based replication systems, where
users who retrieve the ﬁle, act simultaneously as clients and servers. In
this paper, we study BitTorrent, a new and already very popular peer-
to-peer application that allows distribution of very large contents to a
large set of hosts. Our analysis of BitTorrent is based on measurements
collected on a ﬁve months long period that involved thousands of peers.
We assess the performance of the algorithms used in BitTorrent through
several metrics. Our conclusions indicate that BitTorrent is a realistic and
inexpensive alternative to the classical server-based content distribution.
1 Introduction
BitTorrent [4] is a ﬁle distribution system based on the peer-to-peer (P2P) pa-
radigm. BitTorrent has quickly emerged as a viable and popular alternative to
ﬁle mirroring for the distribution of large content, as testiﬁed by the numerous
Web sites that host active “torrents” (e.g., http://f.scarywater.net/).
We have conducted a comprehensive analysis of BitTorrent to assess its per-
formance. To that end, we have used two sources of information. First, we have
obtained the “tracker” log of arguably the most popular torrent (BitTorrent ses-
sion) so far—the 1.77GB Linux Redhat 9 distribution—for its ﬁrst 5 months of
activity. The log contains statistics for more than 180, 000 clients, and most inte-
restingly, it clearly exhibits an initial ﬂash-crowd period with more than 50, 000
clients initiating a download in the ﬁrst ﬁve days. This ﬁrst source of informa-
tion allows us to estimate the global eﬃciency of BitTorrent, the macroscopic
behavior of clients, and the scalability of a P2P application under ﬂash-crowd
conditions. Our second source of information consists of data collected with a
modiﬁed client that participated to the same torrent downloading Redhat 9.
This second log allows us to study the direct interactions between the clients.
The remaining of the paper is organized as follows. In Section 2, we present the
main features of BitTorrent. In Section 3, we review the related work. In Sec-
tion 4, we present the results obtained from the tacker log and in Section 5 the
conclusions obtained from our client log. We conclude with future directions in
Section 6.
C. Barakat and I. Pratt (Eds.): PAM 2004, LNCS 3015, pp. 1–11, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
2
M. Izal et al.
2 BitTorrent
BitTorrent is a P2P application that capitalizes the resources (access bandwidth
and disk storage) of peer nodes to eﬃciently distribute large contents. There is
a separate torrent for each ﬁle that is distributed. Unlike other well-known P2P
applications, such as Gnutella or Kazaa, which strive to quickly locate hosts
that hold a given ﬁle, the sole objective of BitTorrent is to quickly replicate a
single large ﬁle to a set of clients. The challenge is thus to maximize the speed
of replication.
A torrent consists of a central component, called tracker and all the currently
active peers. BitTorrent distinguishes between two kinds of peers depending on
their download status: clients that have already a complete copy of the ﬁle and
continue to serve other peers are called seeds; clients that are still downloading
the ﬁle are called leechers. The tracker is the only centralized component of the
system. The tracker is not involved in the actual distribution of the ﬁle; instead,
it keeps meta-information about the peers that are currently active and acts as
a rendez-vous point for all the clients of the torrent.
A user joins an existing torrent by downloading a torrent ﬁle (usually from
a Web server), which contains the IP address of the tracker. To initiate a new
torrent, one thus needs at least a Web server that allows to discover the tracker
and an initial seed with a complete copy of the ﬁle. To update the tracker’s
global view of the system, active clients periodically (every 30 minutes) report
their state to the tracker or when joining or leaving the torrent. Upon joining the
torrent, a new client receives from the tracker a list of active peers to connect to.
Typically, the tracker provides 50 peers chosen at random among active peers
while the client seeks to maintain connections to 20−40 peers. If ever a client fails
to maintain at least 20 connections, it recontacts the tracker to obtain additional
peers. The set of peers to which a client is connected is called its peer set.
The clients involved in a torrent cooperate to replicate the ﬁle among each
other using swarming techniques: the ﬁle is broken into equal size chunks (typi-
cally 256kB each) and the clients in a peer set exchange chunks with one ano-
ther. The swarming technique allows the implementation of parallel download
[7] where diﬀerent chunks are simultaneously downloaded from diﬀerent clients.
Each time a client obtains a new chunk, it informs all the peers it is connected
with. Interactions between clients are primarily guided by two principles. First,
a peer preferentially sends data to peers that reciprocally sent data to him. This
“tit-for-tat” strategy is used to encourage cooperation and ban “free-riding” [1].
Second, a peer limits the number of peers being served simultaneously to 4 peers
and continuously looks for the 4 best downloaders (in terms of the rate achieved)
if it is a seed or the 4 best uploaders if it is a leecher.
BitTorrent implements these two principles, using a “choke/unchoke” policy.
“Choking” is a temporary refusal to upload to a peer. However, the connection
is not closed and the other party might still upload data. A leecher services the 4
best uploaders and chokes the other peers. Every 10 seconds, a peer re-evaluates
the upload rates for all the peers that transfer data to him. There might be more
than 4 peers uploading to him since ﬁrst, choking is not necessarily reciprocal
Dissecting BitTorrent: Five Months in a Torrent’s Lifetime
3
and second, peers are not synchronized. 1 He then chokes the peer, among the
current top 4, with the smallest upload rate if another peer oﬀered a better
upload rate. Also, every 3 rounds, that is every 30 seconds, a peer performs an
optimistic unchoke, and unchokes a peer regardless of the upload rate oﬀered.
This allows to discover peers that might oﬀer a better service (upload rate).
Seeds essentially apply the same strategy, but based solely on download rates.
Thus, seeds always serve the peers to which the download rate is highest.
Another important feature of BitTorrent is the chunk selection algorithm.
The main objective is to consistently maximize the entropy of each chunk in the
torrent. The heuristic used to achieve this goal is that a peer always seeks to
upload the chunk the least duplicated among the chunks it needs in its peer set
(keep in mind that peers only have a local view of the torrent). This policy is
called the rarest ﬁrst policy. There exists an exception to the rarest ﬁrst policy
when a peer joins a torrent and has no chunks. Since this peer needs to quickly
obtain a ﬁrst chunk (through optimistic unckoke), it should not ask for the rarest
chunk because few peers hold this chunk. Instead, a newcomer uses a random
ﬁrst policy for the ﬁrst chunk and then turns to the rarest ﬁrst policy for the
next ones.
3 Previous Work
Approaches to replicate contents to a large set of clients can be classiﬁed as
client side and server side approaches. The ﬁrst client-side approach was to
cache contents already downloaded by clients of a given network. A symmetric
approach on the server side is to transparently redirect clients to a set of mirror
sites run by a content provider (e.g. Akamai).
The peer-to-peer paradigm has been applied to obtain client side and server
side solutions. On the server side, one ﬁnds proposals like [5] where overlay nodes
dynamically organize themselves so as to form a tree with maximum throughput.
FastReplica [2] is designed to eﬃciently replicate large contents to a set of well-
known and stable overlay nodes.
On the client side, one ﬁnds many proposals to build application-layer multi-
cast services [8,6,3]. A solution similar to BitTorrent is Slurpie [9]. Slurpie aims
at enforcing cooperation among clients to alleviate the load of a Web server that
is the primary source of the content. The algorithms of Slurpie are much more
complex than the ones of BitTorrent and require to estimate the number of peers
in the Slurpie network. The expected improvements over BitTorrent is less load
on the topology server (equivalent to the BitTorrent tracker) and on the primary
source (original seed) through a back-oﬀ algorithm. Results are promising since
Slurpie is able to outperform BitTorrent in a controlled environment. Still, the
actual performance of Slurpie in case of ﬂash crowds and for a large number of
clients is unknown.
1 For instance, a peer that was oﬀering a very good upload rate has decided to choke
this connection just 1 second before the reevaluation on the other side and thus he
might still be in the top 4 list for the next 10 seconds and received service.
4
M. Izal et al.
4 Tracker Log Analysis
The tracker log covers a period of 5 months from April to August 2003. The
corresponding torrent has as content the 1.77 GB Linux Redhat 9 distribution.
180, 000 clients participated to this torrent with a peak of 51, 000 clients during
the ﬁrst ﬁve days (see Figures 1(a) and 1(b)). These ﬁrst ﬁve days clearly exhibits
a ﬂash-crowd. As clients periodically report to the tracker their current state,
along with the amount of bytes they have uploaded and downloaded, the tracker
log allows us to observe the global evolution of the ﬁle replication process among
peers.
s
r
e
e
p
f
o
r
e
b
m
u
N
 4500
 4000
 3500
 3000
 2500
 2000
 1500
 1000
 500
 0
All peers
SEEDS
LEECHERS
31/03
24:00
01/05
12:00
01/06
24:00
Time
01/07
12:00
01/08
24:00
01/09
06:00
s
r
e
e
p
f
o
r
e
b
m
u
N
 4500
 4000
 3500
 3000
 2500
 2000
 1500
 1000
 500
 0
30/03
24:00
All peers
SEEDS
LEECHERS
31/03
24:00
01/04
24:00
02/04
24:00
03/04
24:00
Time
(a) Complete trace
(b) Zoom on the ﬁrst ﬁve days
Fig. 1. Number of active peers over time
4.1 Global Performance
Analyzing the tracker log, our ﬁrst ﬁnding is that BitTorrent clients are altruistic
in the sense that they actively send data to other clients, both as leechers and as
seeds. Altruism is enforced during the download phase by the tit-for-tat policy,
as a selﬁsh client will be served with a very low priority. Once they become
seed, the peers remain connected for another six and a half hours on average.
This “social” behavior can be explained by two factors: ﬁrst, the client must
be explicitly terminated after completion of the download, which might well
happen while the user is not at his computer, e.g., overnight; second, as the
content being replicated is perfectly legal, the user has no particular incentive to
quickly disconnect from the torrent. In fact, the presence of seeds is a key feature,
since it greatly enhances the upload capacity of this torrent and the ability to
scale to large client populations. Over the 5 months period covered by the log
ﬁle, we observed that the seeds have contributed more than twice the amount
of data sent by leechers (see Figure 2). We also observed that the proportion of
seeds is consistently higher than 20%, with a peak at 40% during the ﬁrst 5 days
Dissecting BitTorrent: Five Months in a Torrent’s Lifetime
5
(see Figure 3). This last ﬁgure clearly illustrates that BitTorrent can sustain
a high ﬂash-crowd since it quickly creates new seeds. To put it diﬀerently, in
situations where new peers arrive at a high rate, the resources of the system are
not divided evenly between clients, which would result, like in a processor sharing
queue under overload, in no peers completing the download. On the contrary,
older peers have a higher priority since they hold more chunks than younger
peers, which gives them more chance to complete the download and become
seeds for newcomers. Obviously, this strategy beneﬁts from the cooperation of
users that let their clients stay as seeds for long periods of time.
s
e
t
y
b
d
e
d
a
o
p
u
l
e
v
i
t