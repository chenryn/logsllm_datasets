domain is the set of allocated blocks. Load and Store require
pointer values (b, o). They ﬁrst look up the block id b in the
memory; if this block is currently allocated, they obtain a list
of values vs, which they read or update at index o (provided o
is in bounds).
mem[bpc] = vspc
vspc[opc] = i
reg[rp]=(b, o)
vs(cid:3)=vs[o←v]
decode i=Store rp rs
reg[rs]=v
mem(cid:3)=mem[b←vs(cid:3)]
mem[b]=vs
(mem, reg, (bpc, opc)) → (mem(cid:3), reg, (bpc, opc+1)) (STORE)
The pc itself contains a pointer with a block and an offset;
instruction fetching works the same as normal memory loads.
As with sealing key generation (§4), the allocation and
freeing monitor services are parameterized by two functions,
alloc f and free f, that are assumed to satisfy certain high-
level properties: alloc f takes a memory and a size, and returns
a block that was not already allocated and a new memory in
which this block is mapped to a frame; free f takes a memory
and an allocated block and returns a new memory where the
block is no longer allocated, keeping all other blocks the same.
Symbolic Machine
In the symbolic part of the memory-
safety micro-policy, we replace the block-structured memory
of the abstract machine by a ﬂat memory where each cell is
tagged with a color representing the block to which it belongs.
Pointers are also tagged with colors, and when a pointer is
dereferenced we check that its color matches the color of the
memory cell it points to.
More precisely, we use different sets of tags for values
in registers (and the pc) and in memory. Value tags tv are
either pointers tagged with a color c or non-pointers tagged
⊥. Allocated memory locations are tagged with a pair (c, tv),
where c is the color of the encompassing block and tv is the
tag of the stored value. Unallocated memory is tagged with
the special tag F (free). We use tm to range over memory tags.
The extra state for this policy is a list of block descriptors
recording which memory regions have been allocated (with the
corresponding base and bounds) and which colors correspond
to them, plus a counter for generating new colors.
The malloc monitor service ﬁrst searches the list of block
descriptors for a free block of at least the required size, cuts
off the excess if needed, generates a fresh color c, initializes
the new memory block with 0@(c,⊥), and returns the atom
w@c, where w is the start address of the block.
The free monitor service reads the pointer color, deallocates
the corresponding block, tags its cells with F, and updates the
block descriptors. The F tags prevent any remaining pointers
to the deallocated block from being used to access it after
deallocation. If a later allocation reuses the same memory, it
will be tagged with a different (larger) color, so these dangling
pointers will still be unusable.
The symbolic rules for Load and Store check that the pointer
and the referenced location have the same color c.
(cpc, (cpc,⊥), c, (c, tv),−) → (cpc, tv)
(cpc, (cpc,⊥), c, tv, (c, t(cid:3)
v)) → (cpc, (c, tv))
Load :
Store :
We additionally require that the pc tag cpc matches the color
of the block to which the pc points. This ensures that the pc
cannot be used to leak information about inaccessible frames
by loading instructions from them. On Jumps we change the
color of the pc to the color c of the pointer, while for Jal we
also use cpc to tag the ra register:
Jump : (cpc, (cpc,⊥), c,−,−) → (c,−)
: (cpc, (cpc,⊥), tv,−,−) → (tv, cpc).
Jal
We also allow Jals to words tagged ⊥, since monitor services
lie outside the accessible memory at this level of abstraction
and so cannot be referenced by normal pointers.
Binary operations are allowed between values tagged ⊥
(non-pointers), and they produce values tagged ⊥:
Binop⊕ : (cpc, (cpc,⊥),⊥,⊥,−) → (cpc,⊥)
We also allow adding and subtracting integers from pointers:
Binop+,− : (cpc, (cpc,⊥), c,⊥,−) → (cpc, c)
Binop+ : (cpc, (cpc,⊥),⊥, c,−) → (cpc, c)
The result of such pointer arithmetic is a pointer with the
same color c. The new pointer is not necessarily in bounds,
but the rules for Load and Store will prevent invalid accesses.
(Computing an out-of-bounds pointer is not a violation per
se—indeed, it happens quite often in practice, e.g., at the end
of loops.) Moreover, subtraction can compute the integer offset
between two pointers to the same block:
Binop−,= : (cpc, (cpc,⊥), c, c,−) → (cpc,⊥)
822822
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:44 UTC from IEEE Xplore.  Restrictions apply. 
Pointers to the same block can also be compared for equality
using Binop=. But comparing a pointer and a non-pointer or
comparing two pointers to different blocks must be disallowed
(because two out-of-bounds pointers to different blocks can be
numerically equal at the symbolic level, whereas they cannot
be equal at the abstract level). While the transfer function can
detect this situation, it cannot alter the results of instructions;
thus, we can only preserve reﬁnement by having the transfer
function stop execution. Intuitively, all instructions on pointers
must be expressible at the abstract level independent of base
addresses. (Subtraction works as presented because equal base
addresses cancel out, even in the presence of overﬂows.)
Monitor services do not have this restriction, though, so we
can—if one is required—provide a total equality service that
returns false in those cases where the equality instruction would
be disallowed.
Reﬁnement We prove a backward-simulation theorem similar
to the one for sealing (§4):
Theorem 7.1 (1-backward SA-simulation). The symbolic mem-
ory safety machine backward-simulates the abstract machine.
The main technical difﬁculty lies in formalizing the correspon-
dence between memory addresses at the symbolic and abstract
levels, and showing that this correspondence is preserved
throughout execution. Speciﬁcally, each color c used at the
symbolic machine should map to a block identiﬁer b at the
abstract level, in such a way that the memory region tagged
with c matches the block pointed to by b; we consider that an
address x marked with color c should correspond to memory
location (b, x − xbase) at the abstract level, where xbase is the
base address of the corresponding region. Additionally, we
must maintain the invariant that symbolic block descriptors
faithfully describe how memory regions are tagged.
Showing that memory operations and monitor services (in
particular, the allocator) preserve the reﬁnement relation in-
volves explicitly manipulating the address mappings described
above and a fair amount of low-level reasoning about address
segments and arithmetic, which consumes almost half of the
complete proof.
Related Work Our scheme is inspired by the metadata taint-
ing technique of Clause et al. [7]. Similar ideas have been
used by Watchdog [25] (for temporal safety), though these
systems do not have formal proofs. Nagarakatte et al. have
veriﬁed in Coq that the SoftBound pass in LLVM/Vellvm
satisﬁes “spatial safety” [27] and that the CETS temporal safety
extension to SoftBound is correct in the sense of backward
simulation[26]. These proofs are with respect to correct-by-
construction special-purpose machines. Abadi and Plotkin [2]
show that address space layout randomization can be used to
prevent low-level attacks, including memory safety violations,
by proving a probabilistic variant of full abstraction with respect
to a high-level language semantics.
8 Concrete Machine
Having explored four examples of how the symbolic machine
can be instantiated to enforce a variety of micro-policies, we
turn to the question of how its behavior can be realized on a
concrete machine that incorporates PUMP-like hardware [11] in
idealized form. The concrete machine differs from the symbolic
one in several key ways. (1) Its memory, registers, and pc hold
concrete atoms of the form w@t, where the concrete tag t is
simply a machine word (possibly interpreted as a pointer into
memory). (2) It propagates and checks tags using a cache of
concrete rules, each encoding a single tuple from the graph
of the (concrete) transfer function. (3) The cache initially
contains a ﬁnite set of ground rules; it is further populated
as needed by a software miss handler, which embodies the
transfer function. (4) Extra machine state is represented by
ordinary in-memory data structures. (5) Each monitor service
is implemented as an (almost) ordinary software subroutine,
whose starting address coincides with the service’s entry point
at the abstract and symbolic levels. An instance of the symbolic
machine for a speciﬁc micro-policy is realized on the concrete
machine by deﬁning a concrete encoding for tags and any extra
state, providing a miss handler that implements the symbolic
transfer function, and providing implementations of any monitor
services. In §9, we describe a generic approach to constructing
and verifying such realizations. In the remainder of this section,
we formalize the concrete machine itself as an extension of the
basic machine (§2). A practical PUMP implementation [11]
would add similar extensions to a real-world RISC ISA. The
details in this section are not needed to follow §9 and can be
skimmed if desired.
The concrete machine adds four new instructions for monitor
code:
AddRule | JumpFpc | GetTag rs rd | PutTag rs rtag rd
AddRule, described in detail below, inserts a new rule into the
cache. JumpFpc is used to return from the miss handler: it
jumps to the address in the fpc (“fault pc”), a new special-
purpose register that holds the address of the faulting instruction
after a cache miss. GetTag r1 r2 takes the tag t from the atom
w@t stored in r1 and returns it as the payload part of a new
atom t@Monitor in r2, where Monitor is a ﬁxed concrete tag
used by monitor code. PutTag r1 r2 r3 does the converse: if
r1 and r2 contain w1@t1 and w2@t2, it stores w1@w2 into r3.
The monitor self-protection mechanism described in §9 ensures
that these instructions can only be executed by monitor code.
Concrete states have the form (mem ,reg ,pc ,fpc ,cache), where
cache is a set of concrete rules, each of the form (iv, ov).
The input vector iv represents the key for rule cache lookups
and contains the instruction opcode, the tag of the current
instruction, the tag of the pc, and up to three operand tags. The
output vector ov provides the tags of the new pc and of the
result. On each step, the machine constructs iv from the current
instruction opcode and the relevant tags and looks it up in the
cache. If a matching rule is found (written cache (cid:19) iv (cid:11)→ ov),
the instruction is allowed and the next state is tagged according
823823
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:44 UTC from IEEE Xplore.  Restrictions apply. 
to ov. If no rule matches (cache (cid:19) iv ↑), then iv is saved in
memory, the current pc value is saved in the fpc, and control is
transferred to a ﬁxed address where the miss handler should be
loaded (trapaddr). Accordingly, each rule in the step relation
comes in two variants—one for when we hit in the cache and
one for when we trap to the miss handler. For example, here
are the rules for Store:
mem[wpc] = i@ti
cache (cid:19) (Store, tpc, ti, tp, ts, td) (cid:11)→ (t(cid:3)
decode i = Store rp rs
pc, t(cid:3)
d)
mem[wp]= @td
reg[rp]=wp@tp
reg[rs]=ws@ts
(STORE)
mem(cid:3) = mem[wp←ws@t(cid:3)
d]
(mem, reg, wpc@tpc, fpc, cache)
→ (mem(cid:3), reg, (wpc+1)@t(cid:3)
mem[wpc] = i@ti
pc, fpc, cache)
decode i = Store rp rs
reg[rp]=wp@tp
reg[rs]=ws@ts
cache (cid:19) (Store, tpc, ti, tp, ts, td) ↑
mem[wp]= @td
mem(cid:3) = mem[0..5 ← (Store, tpc, ti, tp, ts, td)]
(mem, reg, wpc@tpc, fpc, cache)
→ (mem(cid:3), reg, trapaddr@Monitor, wpc@tpc, cache)
Addresses 0 to 5 are used, by convention, to store the current iv
for use by the miss handler in the ﬁnal premise of the second
rule. The miss handler computes the result tags, stores them at
addresses 6 and 7, and uses the AddRule instruction to insert
the new rule into the cache.
(STORE-MISS)
cache
mem[wpc] = i@ti
decode i = AddRule
cache (cid:19) (AddRule, tpc, ti,−,−,−) (cid:11)→ (t(cid:3)
pc,−)
mem[0..7] = (opcode, t1, t2, t3, t4, t5, t6, t7)
(cid:3) = cache (cid:21) ((opcode, t1, t2, t3, t4, t5) (cid:11)→ (t6, t7))
→ (mem, reg(cid:3), (wpc+1)@t(cid:3)
(mem, reg, wpc@tpc, fpc, cache)
(cid:3))
pc, fpc, cache
(ADDRULE)
Here (cid:21) is map update, overwriting any previous value for
(opcode, t1, t2, t3, t4, t5). For simplicity, we assume that the
cache’s size is unlimited, avoiding the need to model eviction;
limiting the cache size would require more complicated code
for handling cache misses, of course, but would not change
the speciﬁcation of handler correctness (see §9).
A ﬁnal detail is that the machine can be conﬁgured on a per-
opcode basis to mask out (i.e., set to a predeﬁned “don’t care”
tag) selected ﬁelds of the iv before matching against the cache.
This is easy to implement in hardware, and it permits a single
cache entry to match many different iv tuples. The machine
can also be conﬁgured on a per-opcode basis to “copy through”
a speciﬁed iv tag to either of the ov tag ﬁelds. These features
allow more compact representation of transfer functions as
concrete rules. The machine uses a special pair of don’t-care
and copy-through masks when running monitor code (i.e., when
the pc tag is Monitor); we use this to ensure that the set of
ground rules is ﬁnite (see §9) and that the monitor does not
fault when it comes in contact with user tags (for instance
when returning back to user mode).
9 Concrete Micro-Policy Monitor
The last piece of our story is the realization of symbolic micro-
policies on the concrete machine. Although symbolic micro-
policies vary widely in details, concrete micro-policy imple-
mentations share several important characteristics: (1) concrete
tags (and extra state) must faithfully encode symbolic tags
(and extra state); (2) the concrete miss handler and monitor
services code must implement the symbolic machine’s Coq
speciﬁcations; (3) control transfers between user and monitor
code must obey a clear protocol; and (4) tags and monitor code
and data must be protected from malicious or compromised user
code. To take advantage of these commonalities, we have built
a generic framework for organizing the construction of concrete
micro-policies and proved a theorem stating that they reﬁne
a corresponding symbolic machine instance. Since symbolic
micro-policies can be speciﬁed using the full power of Gallina,
the details of concrete tag and extra state representation plus
the actual code for the miss handler and monitor services must