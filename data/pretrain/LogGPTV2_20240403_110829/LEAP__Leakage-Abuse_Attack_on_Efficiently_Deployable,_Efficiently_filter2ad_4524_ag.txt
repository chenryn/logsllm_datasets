### Starting Point and Initial Steps of the Attack

The attack begins with the preparation of initial tuples of known \((e_d, d)\) mappings. These mappings are essential for bootstrapping the subsequent steps (i.e., from Step 5 to Step 8) as depicted in Figure 1. The \((e_d, d)\) pairs identified in Step 2 serve as input (denoted as \(C\)) to the subroutine `Occurrence(C, M, M′, A′′, B)` in Step 3, which aims to discover additional \((e_d, d)\) mappings.

The \((e_d, d)\) pairs found in Step 2 are derived from \((V_{Bj}, V_{Aj'})\) pairs, where \(V_{Bj}\) is unique among its peers and \(V_{Bj} = V_{Aj'}\). The more such \((V_{Bj}, V_{Aj'})\) pairs exist, the more \((q, w)\) and \((e_d, d)\) mappings can be recovered. Conversely, if no such \((V_{Bj}, V_{Aj'})\) pairs are found, LEAP will fail to recover any \((q, w)\) or \((e_d, d)\) mappings. Therefore, the number of \((V_{Bj}, V_{Aj'})\) pairs discovered in Step 2 is a critical factor in determining the effectiveness of LEAP.

### Countermeasures Against LEAP

An effective countermeasure against LEAP would be to reduce or eliminate the existence of such \((V_{Bj}, V_{Aj'})\) pairs. One possible solution is to add keywords from \(W\) to existing documents, ensuring that each query token is attached to more encrypted documents than it should be (i.e., turning some entries of \(B\) from 0 to 1). These extra dummy encrypted documents can be filtered out by the user after data decryption. This method is similar to the padding solution described in [5]. If the dummy documents are added to the point where there are no unique \(V_{Bj}\) values, LEAP would fail because there would be no initial \((e_d, d)\) mappings to bootstrap the subsequent steps.

### Modified Attack to Alleviate Padding Countermeasure

However, a modified attack, similar to the generalized count attack described in [5], can partially mitigate the above padding countermeasure. Specifically, the following modifications can be made:

1. For the \(n \times n\) \(e_d\)-occurrence matrix \(M\) and the \(n' \times n'\) \(d\)-occurrence matrix \(M'\), modify Line 9 of Algorithm 1 by allowing \(M[j, k]\) to not equal \(M'[j', k']\) but to fall within a window as large as the maximum number of false co-occurrences.
2. Make an initial guess for the \((V_{Bj}, V_{Aj'})\) pair in Step 2 to start Algorithm 1. If the algorithm detects an inconsistency, another \((V_{Bj}, V_{Aj'})\) pair can be guessed. Consequently, there is no guarantee of accurate keyword and document recovery, and the results may include false positives.

### Related Work

The first practical searchable encryption scheme was introduced by Song, Wagner, and Perrig [40]. Subsequently, many variants were proposed to improve performance, security, and functionality [1, 4, 6–12, 15, 16, 22–25, 29, 30, 32, 33, 37, 41]. Most, if not all, SE schemes are designed based on the assumption that certain information leakage (e.g., L1 and L2 leakage) is acceptable as a trade-off for high efficiency required for practical usage. An overview of searchable encryption schemes is provided in [3].

Various leakage-based attacks have been discovered recently, successfully compromising some existing SE schemes [2, 5, 21, 35, 39]. Islam et al. [21] demonstrated how access patterns can be used to recover underlying keywords and documents in SE, assuming the attacker knows either all plaintext documents or keyword distribution. Cash et al. [5] categorized SE leakages into different levels and improved Islam et al.'s attack by presenting a more effective leakage-based attack that could work with less knowledge about the user's documents. They also introduced an active attack that induces a user to insert chosen documents.

Pouliot and Wright [39] later proposed new inference attacks on EDESE schemes, demonstrating the consequences of information leakage. Zhang et al. [44] presented a file-injection attack, where an attacker selectively injects certain documents to recover underlying keywords and documents. Our work is closely related to and improves on the inference attacks proposed by Pouliot and Wright [39] by achieving accurate keyword and document recovery with only partial knowledge of a user's documents and L2 leakage. The passive attack proposed in [35] is also closely related to ours, but it does not work under the setting we consider in this paper.

Recently, Blackstone et al. [2] revisited the attacks in [5, 21] and proposed new leakage-abuse attacks, assuming the attacker knows the universe of keywords from which the queries are drawn. This is different from our assumption, where we do not require knowledge of the keyword universe.

Kellaris et al. [26] stated that access pattern leakage is unavoidable and introduced an attack on keyword recovery based on range queries. Following Kellaris et al.'s attacks, recent works have focused on reconstruction attacks on range queries [17–19, 28, 31, 34] and k-NN queries [27, 28]. Lacharité et al. [31] proposed new attacks assuming the database is dense, while Grubbs et al. [17] made no such assumption. However, these attacks assume that the queries are either uniformly distributed or that the query and approximation of the data distributions are known. Gui et al. [19] proposed attacks based on Kellaris et al.'s work, requiring fewer queries and not assuming uniformly distributed queries. Nevertheless, other assumptions, such as observing all possible volume queries at least once, are still required.

Independently, Kornaropoulos et al. [27] proposed reconstruction attacks for k-nearest neighbor (k-NN) queries, widely used in spatial data databases. These attacks also assume uniformly distributed queries. More recently, Kornaropoulous et al. [28] proposed attacks that work against both k-NN and range queries, agnostic to query distribution. These attacks leverage both search and access pattern leakages, unlike previous attacks that leveraged only access pattern leakage.

Poddar et al. [36] proposed a new reconstruction attack utilizing common characteristics in practical applications, such as file injection and automatic query replay, in conjunction with volume leakage. This attack assumes an adversary can inject files and replay a query. It was tested on Gmail. Recently, Falzon et al. [14] explored threats in two-dimensional databases supporting range queries and presented a full database reconstruction attack.

### Conclusions

In this work, we proposed a new leakage-abuse attack on EDESE schemes, termed LEAP. Through LEAP, we demonstrated that the underlying keywords of query tokens can be accurately recovered, even with partial knowledge of the document set. Rigorous experiments illustrate that LEAP achieves a high correct keyword and document recovery rate compared to the PW-U and PW-P attacks. Our findings show that even if a small portion of a document set is known to an attacker, the information leakage (e.g., L2 leakage) of EDESE schemes can be very damaging.

### Acknowledgments

We thank anonymous reviewers for their helpful comments. This research was supported in part by the AXA Research Fund, the National Natural Science Foundation of China (Grant Nos. 62032005, 61972094), the Science Foundation of Fujian Provincial Science and Technology Agency (2020J02016), and the young talent promotion project of Fujian Science and Technology Association. Jian Weng was supported by the Major Program of Guangdong Basic and Applied Research Project (Grant No. 2019B030302008), the National Key Research and Development Plan of China (Grant No. 2020YFB1005600), the National Natural Science Foundation of China (Grant Nos. 61825203, U1736203, and 61732021), and the Guangdong Provincial Science and Technology Project (Grant No. 2017B010111005). Yingjiu Li was supported in part by the Ripple University Blockchain Research Initiative.

### References

[References remain unchanged and are listed as provided in the original text.]