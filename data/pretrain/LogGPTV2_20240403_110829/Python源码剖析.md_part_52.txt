pycbject_size(v);
13.2
attribute, can he anything
系统module初始化
len_doel,
iter_docl,
深度探索动态语言核心技术
pyobjeot *y)
can be NULI
325
---
## Page 356
Python源码剖析
326
Pyhon中会比较频繁，所以这种加速机制是很有效的。
以了，不需要再到interp->modules中去查找。因为对_builtinmodule的使用在
显示出来了。
PyDictobject对象抽取出来，将其赋给interp->builtins：这个结果已经在图13-5中
对象中维护的正是PyModuleobject对象的名字。
PyModuleobject 对象，而是指向了PyStringobject对象，当然，这个PyStringobject
passthrough，我们说过，在Python2.5中，这个东西没有作用，所以这个self通常总为
PyCFunctionobject对象中的那个self，也就是在Py_InitModule4中传入的
void Py_InitializeEx(int install_sigs)
Pyobiect*
[moduleobject,c]
builtins就可
Pyobject *d;
在_PyBuiltin_Init之后，Python将把PyModuleobject对象中维护的那个
现在，翻回到本节的开始，再次一路向下看到这里，你的头脑里是不是已经将_bu注生tin
interp->builtins = PyModule_CetDict (bimod):
return d;
IL
（（PyModuleobject*）m）-md_dict)
一深度探索动态语言核心技术
PyModuleGetDict(Pyobjecttm)
图13-5
"renge"
"doc"
"len"
"Bult-inF
建立完成的
builtin
m_module=_bultin
m_module=_buitin
m_self=NULL
m_self=NULL
m_ml
module
m_ml
builtin_module的示意图。
METHVARARGS
METHO
"range"
range
len
"len"
---
## Page 357
13.2.2.1
13.2.2
PyDictObject对象在Python中是一个可变对象，
PyDictobject对象，
从前面的分析中我们可以看到，interp->sysdict和interp->builtins指向的确实是
Object对象表示pyModuleObject内部维护的那个PyDictObject对象（即md_dict），
象和PyThreadstate对象在内存中的情形如图13-6所示。
代码清单13-5
sysmodule，并像设置interp->builtins一样设置interp->sysdict（见代码清单13-5）。
void Py_ImitlalizeRx(int install_sigs)
PyThreadState_Current
next=NULL
注意图13-6中从sys和_bui1Ein_两个module对象中以虚线形式引出的PyDice-
thread_id
在完成了对_builtin_和sys两个module的设置之后，PyInterpreterState对
//[1]:创建sysmodule
Python在创建并设置了_builtin
interp
7/[2]:备份sysmodule
interp->sysdlct=FyMoaule_CetDict(sysmod);
sysmodule的备份
PyImport_FixupExtension(*sys","sys"）;
创建sysmodule
而非PyMoauleObject对象
图13-6完成sysmodule的创建后的内存布局
interp_head
error_registry
search_cache
search_path
tstatehead
builtins
sysdict
modules
nend
module之后，会照猫画虎，
Python源码剖析
builtin
"sys"
13.2系统module初始化
所以其中维护的（moaulename，
一深度探索动态语言核心技术
module sys>
用同样的流程设置
327
---
## Page 358
Python源码剖析
13.2.2.2
默认搜索路径集合：这个路径集合就是在Pyhon执行importxyz时将察看的路径的集合：
module是不会在运行时动态改变的。显然，这个假设也合情合理。
对象来创建一个新的module即可。这一切是基于这样的一种假设：Python中的标准扩展
加载时，Pyhon就不需要再次初始化这些module，只需用extensions中备份的PyDictobject
个备份。当Pyhon系统的module集合中的某个标准扩展module被删除后不久又被重新
void Py_InitializeEx(int inatall_sigs)
[pythonrun.c]
个PyDictObject对象将维护所有已经被Python加载的module中的PyDictobject的
InitializeEx之[2]处通过调用_pyImport_FixupExtension来完成（见代码清单13-6）。
的PyDictobject对象来进行备份维护。这个备份的动作在上面的代码清单13-5的Py
代码清单13-6
的sys，为了避免对它再一次进行初始化，Python会将所有的扩展module通过一个全局
static Pyobjeot extensions = NULL;
PyModuleobject）元素对有可能在运行时被删除。对于Python的扩展module，
[import.o]
Python在创建了sysmodule之后，会在此module中设置Python搜索一个module时的
Python内部维护了一个全局变量extensions，这个变量在第一次调用_pyImport
第13章Python运行环境初始化
设置module搜索路径
return copy;
dict
/16]
//151:
/[4]:
mod
：
modulas
/[2]:获得interp->modules
Pyobject*modules
：
extensions PyDictNew(）;
一深度探索动态语言核心技术
将持贝得到的新的dict存储在extensions中
PyDlct_Copy（aiet);
PyModule
=PyImport_GetModuleDict(;
GetDict(mod);
emString(modules, name);
smod
则创建PyDictObject对象
tdiet,
copy:
比如这里
---
## Page 359
代码清单13-7
足粮草，追进代码深处（见代码清单13-7）。
是你在Pyton交互式环境下敲入sys.path后所看到的那个路径集合。
对象正是在aysmodule中维护的那个pyDictobject对象，所以这个搜索路径集合也正
interp->sysalct这个pyDictObject对象中，在图13-6中可以看到，这个PyDictobject
object对象，每一个pyStringobject对象的内容就是一个module的搜索路径。
际上，在考虑Py山on的初始化时，只需有概念上的了解即可。有兴趣的读者可以自己备
化Python内建异常。初始化Pyhon内建异常实际上就是调用PyType_Ready初始化各个
object中，Python会创建一个pyListobject对象，这个1ist中包含了一组pyString-
[pythonrun.c]
[aysmodule.c]
void Py_InitlalizeEx(int install_sigs)
ht
Python随后还会进行一些琐碎的动作，其中包括初始化Python的imoor环境，初始
最终，这个代表搜索路径集合的1ist对象会在PySy6_Setobject中被插入到
这里由于篇幅关系，略去了makepathobject，参考源码，可以看到，在makepath-
else
PyThreadstate *tstate = PyThreadState_GET(）
Pyopieetv;
PySys_SetPath(Py_GetPath(1))
DySys_Setobject(char
Eyimport Init On
return PyDiet_Set Itemstring(sd,name,):
else
makepathobject(path,
return PyDiet_DeIItemString(sd,name);
return0;
NULL)
sd
GetIcemsting（sd,name）==NuLn)
*name,
可以看到，它就是interp->moaules
DELIM)
PyObjeet*y)
Python源码剖析
"modules,interp->modules);
13.2
系统module初始化
一深度探索动态语言核心技术
329
---
## Page 360
Python源码剖析
13.2.3
330
无故的，为什么Pyon会找到_main
找到_main_moduie之前，就已经在某个名字空间找到_name_了。那么奇怪了，无缘
文件是以import的方式加载的，则_name_不会为“main”，也就是说，在Python
的Python源文件就可以被视为名为_main的module。
该module对应的PyModuleobject对象的PyDictobject对象md_dict中插入一个名为
我们已经看到，在pyImport_AdaMoaule时，创建了一个名为name的module之后，会在
代码清单13-8
static void initmain(void)
[pythonrun.c]
main_”的module（见代码清单13-8）。
当Python以python abc.py这样的方式执行时，Python在沿着名字空间寻找_nane
这个_mainmoaule是什么东西呢？我们写一个Pyhon程序，有一种最简单的做
在_PyImportHooks_Init（）之后，Python将创建一个非常特殊的module：一个名为
创建
第13章Python运行环境初始化
//[2]：获得
m=PyImport_AadModule(
/[1]：创建
Pyobject*m,
PyImport_FixupExtension(builtinbuiltin):
//[3]：备份exceptfons module和
1/[2]:初始化Python 内建exceptions
PyImportHooks_Init(:
1/[4]:
PyExe_Init():
phase2 of builtins
ByModnEe
一深度探索动态语言核心技术
DyDict_SetItemString(d,
//4）：将buitins
/T3】:
在sy8 module中添加一些对象，用于import机制
main
main
wteu
*dr
moqule中的dlet
module
main
module中去呢？别急，在后面我们介绍初始化
builtin
bulltins
builtin
buiitin
odle）插入到
"exceptions");
NULL
module
main_mocle的aict中
---
## Page 361
13.2.4
来说，一些规模较大的第三方库将放在%PythonHome%/ib/site-packages 目录下
module提供，当要使用这些第三方库时，只需简单地进行import的动作就ok了。一般
不是一切都已了然于胸？对于Pyhon中那个恼人的问题：builtin和_buiitins
后，敲入一个air（），输出的结果正是这个_mainmodule的内容，看一看图13-7，是
阶段的名字空间时，这个答案就会揭晓。
的运行情况。
包含在内。在完成了main_module的创建之后，Python才腾出手来，收拾这个
作：PySys_SetPath（Py_GetPath（）。但是不幸的是，这个设置动作并没有将site-packages
那么必须使这些库位于Python的搜索路径下，Righr？
（%PythonHome%为Win32平台上Python的安装路径）。若想在程序运行时使用这些库，
竞有什么联系和区别，答案也一目了然了。
print
在我的Python中，安装了Django。在图13-8中，显示了改动前后inmportdijango
我们先来做个实验，将site.py内的内容全部替换为以下内容：
到目前为止，Pyhon初始化动作只进行了唯一
Pyhon是一个非常开放的体系，它的强大来源于海量的第三方库，这些库通常由
其实这个main
设置site-specific的module的搜索路径
we arein site.py
Python 2/5(r25
print django.VERsIoN
import
改动ste，py前
图13-8改动site.py前后对django的加载情况
main
module我们也是再熟悉不过的了，当进入Python交互式环境之
print
图13-7
main
ImportError:No module
we are In site.py
File
Python源码剖析
import djange
module示意图
2.
13.2系统module初始化
一个与初始化搜索路径集合相关的动
改动site.py后
tecent call last)
深度探索动态语言核心技术
named django.
ulex
331
究