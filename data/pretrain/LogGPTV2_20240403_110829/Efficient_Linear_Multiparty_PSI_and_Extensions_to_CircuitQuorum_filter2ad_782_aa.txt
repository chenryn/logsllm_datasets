title:Efficient Linear Multiparty PSI and Extensions to Circuit/Quorum
PSI
author:Nishanth Chandran and
Nishka Dasgupta and
Divya Gupta and
Sai Lakshmi Bhavana Obbattu and
Sruthi Sekar and
Akash Shah
Efficient Linear Multiparty PSI and Extensions
to Circuit/Quorum PSI
Nishanth Chandran
Microsoft Research
PI:EMAIL
Sai Lakshmi Bhavana Obbattu
Microsoft Research
PI:EMAIL
Nishka Dasgupta∗
Aarhus University
PI:EMAIL
Sruthi Sekar
Indian Institute of Science
PI:EMAIL
Divya Gupta
Microsoft Research
PI:EMAIL
Akash Shah∗
UCLA
PI:EMAIL
ABSTRACT
Multiparty Private Set Intersection (mPSI), enables 𝑛 parties, each
holding private sets (each of size 𝑚) to securely compute the inter-
section of these private sets. While several protocols are known for
this task, the only concretely efficient protocol is due to the work
of Kolesnikov et al. (KMPRT, CCS 2017), who gave a semi-honest
secure protocol with communication complexity O(𝑛𝑚𝑡𝜆), where
𝑡  15 and
𝑡 ≈ 𝑛/2; even when 𝑡 = 1, our protocol has nearly 4× lesser com-
munication than [51]. We also implement our protocol and show
it to be up to 5× and 6.2× faster than [51] in the LAN and WAN
settings, respectively in the honest majority setting considered in
their experiments (as an example for 𝑛 = 15, 𝑡 = 7 and 𝑚 = 220, our
protocol executes in under 40s in LAN and 245s in WAN settings).
Next, we consider 2 important variants of the mPSI problem
– circuit PSI and quorum PSI – and provide concretely efficient
semi-honest secure protocols in the honest majority setting.
Circuit PSI. The problem of circuit PSI was introduced in the
2 party setting [45] and enables parties 𝑃1 and 𝑃2, with their private
input sets 𝑋 and 𝑌, respectively, to compute 𝑓 (𝑋 ∩ 𝑌), where 𝑓
is any symmetric function (i.e., 𝑓 operates on 𝑋 ∩ 𝑌 and is oblivi-
ous to the order of elements in it). Circuit PSI allows to keep the
intersection 𝑋 ∩ 𝑌 itself secret from the parties while allowing
to securely compute 𝑓 (𝑋 ∩ 𝑌) and has found many interesting
applications such as cardinality, set intersection sum [48, 77], and
threshold cardinality/intersection [3, 10, 31, 35, 36, 42, 66, 79, 80].
Circuit PSI has received a lot of attention and has also shown to be
practically feasible in the 2-party context [13, 16, 26, 64–66]. The
problem of circuit PSI is equally well-motivated in the multiparty
setting. However, to the best of our knowledge, it has remained
unexplored.
In our work, we provide the first multiparty circuit PSI protocol
achieving a communication of approximately O(𝑚𝑛(𝜆𝜅 + log2 𝑛)).
Concretely, its communication is only ≈ 4× the cost of mPSI.
Quorum PSI. We consider another variant of mPSI, called quo-
rum PSI (qPSI), where a leader 𝑃1 wishes to obtain the elements
of his/her set that are also present in at least 𝑘 of the other 𝑛 − 1
parties’ sets. Such a variant lends itself to natural applications -
e.g. in the context of anti-money laundering [27, 28] and checking
if a list of entities is present in multiple blacklists. We provide an
efficient qPSI protocol in the semi-honest honest majority setting
achieving a communication cost of O(𝑛𝑚𝜅(𝜆 + 𝜅 log 𝑛)).
We implement both circuit PSI and qPSI protocols showing that
these protocols are concretely efficient as well. These are the first
implementations of multiparty circuit PSI and quorum PSI.
Protocol blueprint. Our protocols for all three problem settings,
namely, mPSI, circuit PSI and qPSI, broadly have two phases. At a
high level, in the first phase, a fixed designated party, say 𝑃1, inter-
acts with all other parties 𝑃2, . . . , 𝑃𝑛 using 2-party protocols. In the
second phase, all parties engage in 𝑛-party protocols to compute a
circuit to get the requisite output. We describe these phases in the
context of mPSI and then discuss the changes for the other variants.
For mPSI, in the first phase, we invoke a two-party functionality,
which we call weak private set membership (wPSM) functionality,
between a leader, 𝑃1 and each 𝑃𝑖 (for 𝑖 ∈ {2, · · · , 𝑛}). Informally,
the wPSM functionality, when invoked between 𝑃1 and 𝑃𝑖 on their
individual private sets3 does the following: for each element in
𝑃1’s set, it outputs the same random value to both 𝑃1 and 𝑃𝑖, if
that element is in 𝑃𝑖’s set, and outputs independent random values,
otherwise4. By invoking only 𝑛 instances of the wPSM functionality
overall, we ensure that the total communication complexity of this
phase is linear in 𝑛. In the second phase, all the parties together
run a secure multiparty computation to obtain shares of 0 for each
element in 𝑃1’s set that is in the intersection and shares of a random
element for other elements. Having invoked wPSM between 𝑃1 and
every other party, this can be computed using a single multiplication
protocol. We evaluate this multiplication using the MPC protocol
from [21, 52] in the second phase, resulting in the total communi-
cation complexity being linear in 𝑛. In contrast, in [51], each party
interacts in 2𝑡 instances of a wPSM-like functionality, incurring an
additional multiplicative 𝑡 overhead.
In our circuit and quorum PSI protocols, the first phase addition-
ally includes conversion of the outputs from the wPSM functionality
to arithmetic shares of 1 if 𝑃1 and 𝑃𝑖 received the same random
value, and shares of 0, otherwise (this is similar to how 2-party
circuit-PSI protocols work). In the second phase, in circuit-PSI, for
every element of 𝑃1, all parties must get shares of 1 if that element
belongs to the intersection, and shares of 0, otherwise. To do this,
we use the following trick: for every element 𝑥 in 𝑃1’s set, count
the number of other sets 𝑞𝑥 in which element 𝑥 is present (the
first phase of our protocol does indeed give us such a count). Now,
if we compute 𝑤𝑥 = (𝑞𝑥 − (𝑛 − 1))𝑝−1 over F𝑝, where 𝑝 > 𝑛 is
prime, then 𝑤𝑥 = 0 if 𝑞𝑥 = 𝑛 − 1 (and 1 otherwise), which pre-
cisely gives us whether or not 𝑥 is in the intersection. Hence, one
can compute shares of whether 𝑥 is in the intersection or not by
simply computing this polynomial (which can be securely done
using 2 log 𝑝 multiplications). In the case of qPSI, we appropriately
choose another polynomial such that for each element in 𝑃1’s set,
the polynomial evaluates to 0 if and only if that element belongs to
the quorum intersection, and random otherwise.
Next, we make a few observations on our protocol blueprint. As
already mentioned, this blueprint allows us to get sub-quadratic
complexity in 𝑛 for all our protocols. Moreover, in the first phase,
𝑃𝑖 for 𝑖 ≠ 1 interacts with 𝑃1 alone. As an example, in mPSI, 𝑃𝑖
only engages in one instance of wPSM, whereas 𝑃1 engages in 𝑛 − 1