### Functional Description Using Relevant Data and Function/Operation Ontologies

#### How to Implement?

1. **Borrow from Schema Matching:**
   - Utilize schema matching techniques to align the structure of XML messages in WSDL with the concepts defined in an ontology.
   
2. **Semantic Disambiguation:**
   - Resolve semantic ambiguities between terms in XML messages represented in WSDL and concepts in the ontology.

### Semantic Annotation of Web Services

#### Web Service Interfaces
- A web service (WS) invocation specifies:
  - The number of input parameters required for a proper WS realization.
  - The number of output parameters to hold and transfer the results of the WS realization to other tasks.
  - The function to invoke.

| Inputs | Outputs |
|--------|---------|
| Receipt | Client   |
| Itinerary | Local Tourism |
| `function_foo(x..y)` | |

### Types of Annotation

- **Functional Semantics:**
  - Describes the functionality of the web service.
  
- **Data Semantics:**
  - Describes the data types and their meanings.
  
- **QoS (Quality of Service) Semantics:**
  - Describes the quality attributes such as security, reliability, and availability.

| Inputs | Outputs |
|--------|---------|
| Price | Time |
| Receipt | Duration |
| Cost | Fidelity |
| Client | Reliability |
| Itinerary | Repudiation |
| Local Tourism | Availability |
| `function_foo(x..y)` | |

### Adding Semantics to Web Services

- **WSDL (Web Services Description Language):**
  - Used to describe the functionality of web services.
  
- **Ontologies:**
  - Used to define the meaning and relationships of terms.
  
- **Data:**
  - Temporal entities and data type hierarchies are defined using ontologies.

**Example:**
- **Time:**
  - **Time-Point:** {absolute_time}
  - **Interval Domain:**
    - {year, month, day}
    - Date
    - Time: {hour, minute, second}
  - **Calendar-Date:**
    - {dayOfTheWeek, monthOfYear}
  - **Duration:**
    - Year
  - **Coordinates:**
    - {x, y}
  - **Get Conference Area Information:**
    - City, Name, Coordinates

### SOAP (Simple Object Access Protocol)

- **SOAP is an XML Messaging Protocol:**
  - Allows software running on different operating systems and environments to make procedure calls.
  
- **Components:**
  - **Header:**
  - **Body:**

### Why SOAP?

- **Current Applications:**
  - Use Remote Procedure Calls (RPC) between objects like DCOM and CORBA.
  - RPC represents compatibility and security issues; firewalls and proxy servers often block this traffic.
  
- **Better Communication:**
  - Over HTTP, as it is supported by all internet browsers and servers.
  - SOAP was created to facilitate this communication.

### SOAP - Annotation

- **Server:**
  - Apples
  - Data
  - Semantics
  - PTHH
  - XML
  - revo
  - PAOS
  - SOAP over HTTP
  - Internet
  - Client

### Web Process Architecture

- **Semantic Brokering:**
  - Specialized brokering services like METEOR-S to find web services.
  - Discovery algorithms that account for semantic information.

- **UDDI (Universal Description, Discovery, and Integration):**
  - Serves as a business and services registry and directory.
  - Essential for dynamic usage of web services.
  - Similar to a CORBA trader or DNS for business applications.
  - Platform-independent framework for describing services, discovering businesses, and integrating business services over the internet.

### How UDDI Works?

1. **Populating the Registry:**
   - Software companies, standards bodies, and programmers populate the registry with descriptions of different types of services.
   
2. **Querying the Registry:**
   - Marketplaces, search engines, and business applications query the registry to discover services at other companies.
   
3. **Assigning Unique Identifiers:**
   - UDDI Business Registry (UBR) assigns a programmatically unique identifier to each service and business registration.
   
4. **Facilitating Integration:**
   - Businesses use this data to facilitate easier integration with each other over the web.

### Semantics at Publication and Discovery Layers

- **Why:**
  - Enable scalable, efficient, and dynamic publication and discovery (machine-processable/automation).
  
- **How:**
  - Use of ontologies to categorize registries based on domains and characterize them by maintaining properties and relationships.
  - Capturing WSDL annotations in UDDI.

- **Present Scenario:**
  - Suitable for simple searches but categories are too broad.
  - Automated service discovery based on functionality and selecting the best-suited service is not possible.

### Adding Semantics to Web Services Standards

- **UDDI and Semantics:**
  - Marketplaces, search engines, and business applications query the semantic UDDI registry.
  - Functional, data, and QoS semantics are captured.

- **Inputs and Outputs:**
  - Security, price, time, receipt, duration, cost, client, itinerary, local tourism, fidelity, reliability, repudiation, availability.

- **Function:**
  - `function_foo(x..y)`

### Semantic Discovery of Web Services

- **Web Service Discovery:**
  - Locate web services that contain the desired functionality, operational metrics, and interfaces needed to carry out a given task.

- **New Requirements:**
  - Before: Simple keyword and attribute-based search.
  - Now: More accurate and automated discovery based on functionality and QoS.

### State of the Art in Discovery

- **UDDI Business Registry:**
  - Provides non-semantic match search, resulting in many irrelevant results.
  - Selection is challenging due to the large number of irrelevant results.

### Present Discovery Mechanism

- **Keyword and Attribute-Based Search:**
  - Example: "Quote"
  - Microsoft UBR returned 12 services, with only a few relevant to the search.

- **Categorization:**
  - Useful but inadequate for understanding the actual functionality of the web service.

### Search for Services to Book an Air Ticket

- **Using Categories:**
  - Travel, Food, Lodging, and Entertainment Services.
  - Travel facilitation, travel agents, travel agencies.
  - 3 records found, but descriptions were not always clear.

- **Using Keywords:**
  - "Air ticket" and "Travel agent" searches returned mixed results, with some services lacking WSDL URLs or having ambiguous descriptions.

### Benefits of Using Semantics

- **Search Engines:**
  - Better understand the contents of a particular page.
  - More accurate searches.
  - Additional information aids precision.
  - Automates searches, reducing the need for manual weeding of results.
  - Facilitates the integration of several web services.

### Semantic Discovery: Overview

- **Annotation and Publication:**
  - WSDL files are annotated using ontologies, and these annotations are captured in UDDI.
  - Requirements are captured as templates constructed using ontologies, and semantic matching is done against UDDI entries.

- **Use of Ontologies:**
  - Brings service provider and service requestor to a common conceptual space.
  - Helps in semantic matching of requirements and specifications.

### Semantic Publication and Discovery

- **Class Hierarchy:**
  - TravelServices (subclasses: Ticket, Confirmation, Information, Message, Booking, Cancellation).
  - Operations: buyTicket, cancelTicket.
  - Inputs and Outputs: TravelDetails, Confirmation.

### Discovery in the Semantic Web

- **Functionality:**
  - What capabilities the distributor expects from the service (functional semantics).
  
- **Inputs:**
  - What the distributor can give to the manufacturer's service (data semantics).
  
- **Outputs:**
  - What the distributor expects as outputs from the service (data semantics).
  
- **Description:**
  - Natural language description of the service functionality.
  
- **QoS:**
  - Quality of service the distributor expects from the service (QoS semantics).

### Syntactic, QoS, and Semantic (Functional & Data) Similarity

- **Similarity Calculation:**
  - **Name and Description:**
    - \( \text{SynSim}(S_T, S_O) = \omega_1 \cdot \text{SynNS}(S_T.\text{sn}, S_O.\text{sn}) + \omega_2 \cdot \text{SynDS}(S_T.\text{sd}, S_O.\text{sd}) \)
    - \( \omega_1 + \omega_2 = 1 \)
  - **QoS:**
    - \( \text{OpSimilarity}(S_T, S_O) = \text{QoSdimD}(S_T, S_O, \text{time}) \times \text{QoSdimD}(S_T, S_O, \text{cost}) \times \text{QoSdimD}(S_T, S_O, \text{reliability}) \)

### Brokering

- **Brokering Architecture:**
  - Classify and publish web services descriptions.
  - Key players: service providers, service consumers, and facilitators.
  - Providers advertise their web services.
  - Facilitators match subscriptions to advertised services.
  - Consumers register web services needs.

- **Semantic Brokering Issues:**
  - Structured and non-structured sources.
  - Read-only access.