```sh
./bin/connect-distributed.sh ./config/connect-distributed.properties
```
文件数据源:
```
POST localhost:8083/connectors
{"name":"load-kafka-config", "config":{"connector.class":"FileStreamSource","file":"config/server.properties","topic":"kafka-config-topic"}}
```
传递文件数据源到主题上
**深入**
- 连接器
- 任务
- worker进程
- 转换器
- 偏移量管理
## 集群镜像
使用场景：
- 区域集群 中心集群
- 数据冗余
- 云迁移
### 多集群架构
跨数据中心通信：
- 高延迟
- 带宽有限
- 高成本
中心架构：
```mermaid
stateDiagram-v2
  direction LR
  北京Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)
  上海Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)
  广州Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)
  厦门Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)
```
主从架构：
```mermaid
stateDiagram-v2
  订单业务Kafka集群 --> 报表统计Kafka集群
```
双活架构：
```mermaid
stateDiagram-v2
  北京Kafka集群 --> 广州Kafka集群
  广州Kafka集群 --> 北京Kafka集群
```
主备架构：
```mermaid
stateDiagram-v2
  direction LR
  主Kafka集群 --> 备Kafka集群
  用户 --> 主Kafka集群: 正常情况
  用户 --> 备Kafka集群: 主集群挂掉
```
### MirrorMaker
```mermaid
stateDiagram-v2
  state 源Kafka集群 {
    主题A
    主题B
    主题C
  }
  主题A --> 消费者1
  主题B --> 消费者2
  主题C --> 消费者3
  state MirrorMaker {
    消费者1 --> 生产者
    消费者2 --> 生产者
    消费者3 --> 生产者
  }
  生产者 --> 主题A0
  生产者 --> 主题B0
  生产者 --> 主题C0
  state 目标Kafka集群 {
    主题A0
    主题B0
    主题C0
  }
```
如果有可能，尽量让 MirrorMaker 运行在目标数据中心里
## 监控
所有度量指标都可以通过 Java Management Extensions（JMX）接口来访问
### broker
非同步分区数量：
- 如果集群里多个 broker 的非同步分区数量一直保持不变，那说明集群中的某个 broker 已经离线了
- 如果非同步分区的数量是波动的，或者虽然数量稳定但并没有 broker 离线，说明集群出现了性能问题
关键指标：
- BytesIn/BytesOut：Broker 端每秒入站和出站字节数
- NetworkProcessorAvgIdlePercent：网络线程池线程平均的空闲比例
- RequestHandlerAvgIdlePercent：I/O 线程池线程平均的空闲比例
- UnderReplicatedPartitions：未充分备份的分区数
- ISRShrink/ISRExpand：ISR 收缩和扩容的频次指标
- ActiveControllerCount：当前处于激活状态的控制器的数量
其他监控：
- 进程是否启动，端口是否建立，端口能否对外提供服务
- broker 端日志，服务器日志 server.log，控制器日志 controller.log 以及主题分区状态变更日志 state-change.log
- broker 端关键线程的运行状态
  - Log Compaction 线程
  - 副本拉取消息的线程，通常以 ReplicaFetcherThread 开头
集群问题：
- 不均衡的负载
- 资源过度消耗
主机问题：
- 硬件
- 进程冲突
- 配置问题
### 客户端
- 关注网络RTT
- 关键线程
  - 生产者 kafka-producer-network-thread
  - 消费者 kafka-coordinator-heartbeat-thread
指标：
- 生产者 request-latency，消息生产请求的延时
- 消费者 lag和lead
- 消费者组 一个是 join rate，另一个是 sync rate。它们说明了 Rebalance 的频繁程度
## 优化
### 操作系统层优化
- 文件系统挂载优化：禁用 atime（access time）更新以减少文件系统写操作数，提高性能。
- 文件系统选择：推荐使用ext4或XFS，特别是XFS对于生产服务器具有高性能和高伸缩性。
- Swap空间设置：设置较小的swappiness值，防止Linux的OOM Killer随意终止进程。
- 重要系统参数调整：ulimit -n 和 vm.max_map_count的适当调整，确保不出现文件打开过多或内存映射过小的错误。
- 页缓存大小：重要性关乎Kafka，至少要足够容纳一个日志段的大小，以减少磁盘I/O操作。
### [JVM调优](/编程语言/JAVA/JVM/自动内存管理/调优.md#调优)
### Broker端调优
- 参数值设置：合理设置Broker端参数以匹配生产环境，保持客户端和Broker端版本一致。
- 版本一致性：保持版本一致以获得性能收益，如Zero Copy功能。
### 应用层调优
- 对象实例管理：避免频繁创建和及时关闭Producer和Consumer对象实例，充分利用多线程改善性能。
### 性能指标调优
- 调优吞吐量：增加num.replica.fetchers、调整缓冲区、压缩算法配置以减少网络I/O、避免设置acks=all和开启重试。
- 调优延时：在Producer端设置linger.ms=0、不启用压缩、避免设置acks=all，在Consumer端保持fetch.min.bytes=1。
## 流式处理
> 数据流:无边界数据集的抽象表示
> 数据流是有序的, 不可变的, 可重播的
> 流式处理是持续地从一个无边界的数据集读取数据，然后对它们进行处理并生成结果
### 概念
时间：
- 事件时间
  -  所追踪事件的发生时间和记录的创建时间
- 处理时间
  - 收到事件之后要对其进行处理的时间
状态：
- 内部状态
  -  只能被单个应用程序实例访问
- 外部状态
  - 使用外部的数据存储来维护
时间窗口：
![屏幕截图 2020-08-23 112304](/assets/屏幕截图%202020-08-23%20112304.png)
### 设计模式
单事件处理：
![屏幕截图 2020-08-23 112459](/assets/屏幕截图%202020-08-23%20112459.png)
本地状态事件处理：
![屏幕截图 2020-08-23 112551](/assets/屏幕截图%202020-08-23%20112551.png)
多阶段处理：
![屏幕截图 2020-08-23 112748](/assets/屏幕截图%202020-08-23%20112748.png)
外部数据源填充：
![屏幕截图 2020-08-23 112929](/assets/屏幕截图%202020-08-23%20112929.png)
连接流：
![屏幕截图 2020-08-23 113209](/assets/屏幕截图%202020-08-23%20113209.png)
对乱序事件重排序
重新处理：
使用新处理程序从头读取数据流生成结果流
### Kafka Streams 架构
拓扑结构：
```mermaid
stateDiagram-v2
  direction LR
  state 处理器 {
    计数器 --> 本地状态
    本地状态 --> 计数器
  }
  输入行 --> 拆分成单词
  拆分成单词 --> 单词列表
  单词列表 --> 按照单词分组
  按照单词分组 --> 重分区主题
  重分区主题 --> 计数器
  计数器 --> 输出单词数量
```
对拓扑结构伸缩：
```mermaid
stateDiagram-v2
  state 主题 {
    主题分区1
    主题分区2
  }
  state 任务1 {
    A --> B
    B --> C
  }
  state 任务2 {
    D --> E
    E --> F
  }
  state 重分区主题 {
    重分区主题分区1
    重分区主题分区2
  }
  state 任务3 {
    G --> H
    H --> I
  }
  state 任务4 {
    J --> K
    K --> L
  }
  主题分区1 --> 任务1
  主题分区2 --> 任务2
  任务1 --> 重分区主题分区1
  任务1 --> 重分区主题分区2
  任务2 --> 重分区主题分区1
  任务2 --> 重分区主题分区2
  重分区主题分区1 --> 任务3
  重分区主题分区2 --> 任务4
```