# We Still Don’t Have Secure Cross-Domain Requests: An Empirical Study of CORS

## Authors
- Jianjun Chen, Tsinghua University
- Jian Jiang, Shape Security
- Haixin Duan, Tsinghua University
- Tao Wan, Huawei Canada
- Shuo Chen, Microsoft Research
- Vern Paxson, UC Berkeley, ICSI
- Min Yang, Fudan University

## Publication Information
- **Conference:** 27th USENIX Security Symposium
- **Date:** August 15–17, 2018
- **Location:** Baltimore, MD, USA
- **ISBN:** 978-1-939133-04-5
- **Link:** [https://www.usenix.org/conference/usenixsecurity18/presentation/chen-jianjun](https://www.usenix.org/conference/usenixsecurity18/presentation/chen-jianjun)

## Abstract
The default Same Origin Policy (SOP) restricts cross-origin network resource access to "write-only" operations. However, many web applications require "read" access to cross-origin content. Developers have devised workarounds like JSON-P to bypass SOP, but these ad-hoc solutions introduce security issues. CORS (Cross-Origin Resource Sharing) is a more structured mechanism supported by all web browsers for handling cross-origin network access. This paper presents an empirical study of real-world CORS usage, revealing several new security issues:
1. CORS relaxes cross-origin "write" privileges in subtle ways that can be problematic.
2. CORS introduces new forms of risky trust dependencies in web interactions.
3. CORS is often misunderstood by developers, leading to various misconfigurations.

We propose protocol simplifications and clarifications to mitigate these security problems. Some of our proposals have been adopted by the CORS specification and major browsers.

## 1. Introduction
The Same Origin Policy (SOP) is the foundation of client-side web security, preventing scripts from one origin from accessing resources from another. While SOP allows client-side scripts to send GET or POST requests to third-party servers, it does not provide a safe mechanism for reading responses, even if the origin is willing to share. To address this, developers have used workarounds like JSON-P, which introduces inherent security issues.

CORS was introduced to solve the problems of JSON-P and provide a protocol for authorized cross-origin resource sharing. Adopted by major browsers since 2009, CORS has become widely used in mainstream websites. Our study aims to provide a comprehensive security analysis of CORS, identifying new types of security issues in its design, implementation, and deployment.

### Key Findings
1. **Overly Permissive Cross-Origin Sending Permissions:**
   - CORS inadvertently enables new default sending permissions, giving attackers capabilities to exploit previously unexploitable CSRF vulnerabilities, infer victims' cookie sizes, or use victims' browsers to attack internal network services.
   
2. **Inherent Security Risks of CORS:**
   - CORS requires resource servers to trust third-party domains, increasing attack surfaces. Attackers can leverage this trust to launch MITM attacks against HTTPS sites or steal secrets from secure sites via vulnerable weak websites.
   
3. **Complex CORS Details and Misconfigurations:**
   - Despite its simple process, CORS has error-prone details leading to numerous misconfigurations. Our large-scale measurement on Alexa's top 50,000 websites found insecure CORS configurations in 27.5% of sub-domains across 13.2% of base domains, including popular sites like sohu.com, mail.ru, and washingtonpost.com. These misconfigurations can lead to privacy leaks, information theft, and account hijacking.

### Contributions
- Comprehensive security analysis of CORS in design, implementation, and deployment.
- Discovery of new CORS-related security issues with practical attack demonstrations.
- Large-scale measurement of CORS configurations in popular websites, with an open-source tool to identify misconfigurations.
- Analysis of underlying design reasons and proposed protocol simplifications and clarifications. Some proposals have been standardized in the CORS specification and implemented by major browsers.

## 2. Background

### 2.1 Cross-Origin Network Access
Cross-origin reference is a core feature of the web, allowing any website to refer to resources of another using HTML tags. This does not directly cause security concerns until JavaScript is introduced, enabling significant risks. Netscape introduced the Same Origin Policy (SOP) to prevent JavaScript from reading cross-origin responses, but it still allows sending cross-origin POST requests, leading to security issues like CSRF and HFPA.

### 2.2 The Risks of Cross-Origin Sending
- **CSRF (Cross-Site Request Forgery):** A serious threat where a malicious website can control a victim’s browser to issue POST requests with the victim’s identity.
- **HFPA (HTML Form Protocol Attack):** Allows an attacker to use a victim’s browser as a stepping-stone to attack text-based protocol services within an internal network.

### 2.3 The Need for Cross-Origin Reading
Many web applications need JavaScript to read cross-origin responses. JSON-P was a workaround, but it has limitations and introduces security issues. CORS was designed to provide a safer and more powerful solution for authorized cross-origin resource sharing.

### 2.4 The Complexity of CORS
CORS involves three steps:
1. A domain issues a cross-origin request with an `Origin` header.
2. The resource server responds with an `Access-Control-Allow-Origin` header indicating allowed origins.
3. The browser enforces the policy, allowing the requesting domain to read the response only if it matches the allowed origins.

Despite its straightforward process, CORS has complex and error-prone details leading to various misconfigurations and security issues.

## 3. Methodology and Summary of Discovered Issues
[Detailed methodology and summary of discovered issues will be provided in the following sections.]

## 4. Detailed Analysis of CORS Security Issues
[Detailed analysis of the three categories of CORS security issues, including case studies and security implications, will be provided in the following sections.]

## 5. Root Causes and Proposed Mitigations
[Analysis of the underlying design reasons behind the security issues and proposed protocol simplifications and clarifications will be provided in the following sections.]

## 6. Industry Responses
[Responses from industry regarding the adoption of our proposed mitigations will be provided in the following sections.]

## 7. Related Work
[Review of related research regarding CORS and SOP will be provided in the following sections.]

## 8. Conclusion
[Concluding remarks and future directions will be provided in the following sections.]