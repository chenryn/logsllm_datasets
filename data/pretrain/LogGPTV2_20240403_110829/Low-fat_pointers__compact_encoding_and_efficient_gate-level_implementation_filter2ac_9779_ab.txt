r
4
6
2
h
r
e
m
m
h
d
3
e
i
l
s
e
l
m
u
t
n
a
u
q
b
i
l
f
c
m
c
l
i
m
p
p
t
e
n
m
o
h
c
n
e
b
l
r
e
p
y
a
r
v
o
p
g
n
e
s
j
l
x
e
p
o
s
3
x
n
h
p
s
i
d
n
a
r
c
e
p
s
f
r
w
o
t
n
o
t
p
m
s
u
e
z
n
a
e
m
o
e
g
.
Figure 1: Dynamic instruction count for an ALPHA archi-
tecture performing spatial checks in software
pointer hardware and further motivates its need. In Fig. 1
we observe that there is an average of 220% overhead in the
number of dynamic instructions executed for non-fat pointer
hardware ISAs.
2.2 Object Capabilities
Typical isolation models for users of a shared computing
resource include sharing disciplines for time (such as real-
time or best-eﬀort scheduling) and memory (such as read-
write-execute access controls on objects in processor memory
or secondary storage). Models for protection have included
storage keys [25] associated with ﬁxed size blocks of memory
(e.g., 2048 bytes on the System/360), programmer-deﬁned
contiguous regions of memory such as segments (e.g., Bur-
roughs descriptors [36]), and ﬁxed-sized pages of memory
comprising a protected virtual address space. Today, most
virtual memory systems are implemented using several large
“segments”, e.g., for a heap, stack and instructions, with
an eye to both protection (e.g., non-executable data seg-
ments) and sharing (e.g., shared read-only segments). These
segments are demand-paged, combining segmentation and
paging in the style of Multics [35], primarily to exploit lo-
cality of reference [13]. Large segments and pages provide
a coarse-grained form of hardware access control, but this
coarse granularity (e.g., for code, data and stack in UNIX)
comes with security and performance consequences. First,
there is no protection of individual objects contained within
the segment, and second, the sizes of segments and pages
are unrelated to the sizes of individual objects. Further-
more, switching security contexts is an expensive operation
that discourages programmers from providing ﬁne-grained
separation.
Capability-based computer architectures provide hardware
support for ﬁne-grained access control. One example, the
Cambridge CAP Computer [44], provided a set of “base-
limit” registers that point to and delimit a segment of mem-
ory. These were augmented with bits indicating permitted
accesses, e.g., read, write and/or execute. A second ex-
ample, HYDRA/C.mmp [46] implemented capabilities as a
combination pointer and access rights, with access rights
deﬁned by a richer type system than that of the CAP Com-
puter. A third and ﬁnal example, the Intel 432 [37] pro-
vided a complex “Object Descriptor” with access rights and
a structure incorporating a base address for the object and
the lengths of both data and access parts. A data operand
is a two-part value with an object selector (which can be
interpreted as a base address) and a displacement. The dis-
placement serves the role of a bound, giving a complex im-
plementation of a base and bound. The basic protection
mechanism for all three of these systems consists of a set
of rights, and a base and bound pointer that is exercisable
with appropriate rights. A major performance cost associ-
ated with these approaches is the multiple levels of indirec-
tion and table lookups for memory references; Colwell [10]
provides considerable analysis of these overheads.
Other hardware systems have implemented similar con-
structs, e.g., the 64-bit guarded pointers [8] of Carter, et
al., avoid translation tables by encoding permission bits and
segment sizes in the pointer itself. This allows lightweight
(cycle-by-cycle) context switches, allowing instructions from
diﬀerent threads with diﬀerent security domains to be mixed
in a processor pipeline and encouraging more ﬁne-grained
separation of privilege domains. Cambridge’s CHERI [43] is
a recent hardware capability architecture that has the goals
of supporting a hybrid capability model as explored in Cap-
sicum [42]. CHERI uses a 256b fat pointer as a capability
including a full 64b address, 64b base, and 64b length. Our
design improves on this greatly, and shows how the address,
base, and bounds can be composed into a single 64b word
for a 46b address space.
3. SIMPLIFIED SAFE PROCESSOR
We originally developed this fat-pointer scheme for the
SAFE Processor [16]. Since the SAFE Processor includes
a number of orthogonal safety innovations, we extract a re-
duced version of the SAFE processor, the Simpliﬁed SAFE
Processor (SAFElite), to provide concrete context for the
fat-pointer logic. Nonetheless, the fat-pointer implementa-
tion we describe, should be a useful component in a wide
range of processor architectures.
The SAFElite is a simple 64b RISC processor with a four-
stage pipeline as shown in Fig. 2. The SAFElite is a clean-
slate ISA design that is not concerned with legacy binary
compatibility. We use the SAFElite as a single-address space
machine, with all applications and system services running
in the same address space, exploiting the fat pointer object
capabilities for privilege separation. Memory is structured
into segments, a contiguous set of words addressable by a
fat pointer. Memory in the SAFElite is garbage collected,
thereby avoiding temporal safety hazards.
3.1 Hardware Types
The SAFE processor uses capabilities to constrain ma-
licious activities at the hardware level. To support this,
on top of a base RISC processor, we incorporate hardware
mechanisms that allow us to enforce critical semantics to
ensure a secured computation. First, we add a notion of
native hardware types in the form of tags (e.g. [36, 44, 20])
to the words in the processor, such as Integer for integer
words, Instruction for instructions, and Pointers for words
that reference memory segments. These hardware types are
added on top of the actual data payload. For the current
discussion, let us assume that we have 8 bits allocated for
the hardware types in SAFElite (making our memory and
data path 72 bits wide). The hardware types could be larger
or smaller depending on number of types desired, but even
at 8 bits (256 types), SAFElite only incurs a total overhead
of at most 16% ( 72
64 × 1.03; 3% worst-case memory fragmen-
tation is explained in Sec. 4.5). Alternate implementations
might prefer to avoid adding hardware type tag bits on top
723Figure 2: Simpliﬁed SAFE Processor Pipeline
of the 64b word. Some designs store metadata in a shadow
space (e.g. [15]). Another alternative is to borrow bits from
the base 64b word for hardware type.
Types limit how data can be used. Using these hard-
ware types, the SAFElite avoids several attacks such as ma-
licious code injection attacks that try to use input data that
would be typed as an Integer as processor instructions. On
SAFElite only a word with Instruction hardware type will
be executed as an instruction. To support this, we add a
Hardware Type Unit (HTU) to the SAFElite (see Fig. 2) to
validate its entire operation with respect to the instruction
and input operands (such as only an Integer can be added
to an Integer). The Hardware Type Unit also assigns the
hardware type to the result of a computation, if any.
Although 8b of hardware type allows up to 256 unique
hardware types, for this paper we concentrate on the follow-
ing hardware types:
• Pointer: hardware type on any word that is a well-
formed and valid pointer to a segment of memory;
pointers can be further subdivided by access, including
Read-Only and Execute-Only Pointers.
• Integer: hardware type on a word that is used as a
64b bit vector
• Out-of-Bounds-Pointer: hardware type on a word
that was previously a pointer, but has now preceded
its base or exceeded its bound.
• Out-of-Bounds-Memory-Location: hardware type
on the memory locations that seem to be referenced by
a valid pointer but are not within bounds, as these lie
beyond the precise bound of the segment (see Sec. 4.4)
• Error: SAFE and SAFElite allow us to invalidate
an operation if it violates the intended semantics (e.g.
[24]); in that case, we assign this hardware type on the
operation’s result. In general we may have more errors
than the two Out-of-Bounds cases identiﬁed above, but
we will not diﬀerentiate them further in this paper.
• Other: the set of hardware types on words that are
not a pointer, integer, or error. We will not diﬀerenti-
ate these further in this paper.
The hardware types allow the garbage collector to distin-
guish pointers from non-pointers, thereby facilitating garbage
collection (GC). One hardware type is used to represent GC
forwarding pointers.
In a conventional processor all the pointer arithmetic is
achieved using regular arithmetic instructions. For example,
the addqi instructions used in the ALPHA architecture for
adding integers are also used to perform pointer arithmetic
This poses a serious vulnerability that can be exploited to
potentially create a memory reference to any location (e.g.,
[38]). However, this is not possible in the SAFElite since the
Hardware Type Unit does not allow typed pointer data to be
oﬀset by an integer using a regular addm (integer add modulo
264) instruction. Furthermore, the result of an addm instruc-
tion is an Integer that cannot be used as a Pointer for deref-
erencing memory. In order to perform pointer arithmetic in
the SAFElite, we add a specialized instruction addp (add
to pointer) for incrementing or decrementing a word with a
pointer hardware type. Consequently, we add a new func-
tional unit called the Pointer Unit (PU) as shown in Fig. 2
that is responsible for all the pointer-related arithmetic op-
erations.
Instructions used to access memory, namely lw
(load word from memory) and sw (store word to memory),
follow the same semantics as in a common processor, but
instead require a pointer type argument (see Sec. 4.8).
3.2 Privileged Memory Management System
Control over creation and allocation is necessary to guar-
antee unforgeability of the pointers if they are to be used
as capabilities [46]. We assume that the Memory Manager
(MM) is a separate, privileged software subsystem that can
create fat pointers. Only the MM has the privileges to cre-
ate a new fat pointer. Ordinary code can call into the MM’s
allocation routine to obtain a new pointer. The full SAFE
Processor supports calls into privileged domains (gates) that
are as inexpensive as ordinary procedure calls [16].
3.3 Stack Protection
To get full advantage of the fat pointer protection,
it
would be valuable to use separate segments for each stack
frame. For non-garbage-collected systems or hybrid sys-
tems where the compiler can stack-manage call frames, this
can be supported with a special pushframe instruction1 at
the SAFElite-level to create subframes from a typed stack
pointer and a special popframe instruction to return them.
In hybrid cases, the garbage collector will need to distin-
guish these stack subframes and treat them diﬀerently. In
1This is similar to the alloca primitive in conventional sys-
tems that is used allocate memory space on the stack rather
than the heap.
724the full SAFE Processor, the call stack is not directly visible
to user code and is used only for procedure control.
3.4 Compatibility
While our primary design is not concerned with legacy
compatibility, our hardware could be added for capability
support alongside legacy code as illustrated in the CHERI
hybrid capability processor [43]. CHERI uses capabilities
for ﬁne-grained separation within a virtual-memory context.
Capability-oblivious legacy code can call capability-aware
subroutines, and capability-aware code can use capabilities
to sandbox capability-oblivious software components. Types
can eﬀectively capture the operations allowed on a capabil-
ity, so our hardware-typed pointer can provide the same
functionality as the full 256b CHERI capability.
3.5 FPGA Implementation
To validate the operation and characterize the perfor-
mance of the SAFElite, we prototyped the processor on an
ML605 FPGA development board [47] from Xilinx with a
Virtex 6 (xc6vlx240t-2 device) [48]. A 64-bit addition on this
device takes close to 2 ns. However, with operations such as
variable shifts, the Integer ALU can operate only at a latency
of 4 ns. A moderate sized direct-mapped cache built using
Block RAMs (discrete SRAM blocks on this FPGA device)
can also be accessed with a delay under 2.5 ns. Therefore, it
is necessary that all functional units, including the Pointer
Unit, ﬁnish their operation within a 4 ns envelope in order
to avoid increasing the processor cycle time.
4. COMPACT FAT POINTER ENCODING
In this section, we derive our compact fat-pointer encod-
ing (Secs. 4.1–4.2), address issues with approximate sizing
and out-of-bounds pointers (Secs. 4.3–4.4 and 4.7), and char-
acterize the worst-case fragmentation eﬀects (Sec. 4.5). We