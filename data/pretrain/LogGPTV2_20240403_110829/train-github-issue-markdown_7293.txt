The code generated for loading big fields is currently very bad. Here is a
small example:
    mutable struct Mut
        data::NTuple{10, Int}
    end
    struct Immut
        data::NTuple{10, Int}
    end
    load(x, i::Int) = @inbounds x.data[i]
Comparing the generated code (on the offial julia-0.7.0 linux x64 binaries):  
`code_native(load, (Immut, Int))`
    mov	rax, qword ptr [rdi + 8*rsi - 8]
    ret
with:  
`code_native(load, (Mut, Int))`
    movups	xmm0, xmmword ptr [rdi]
    movups	xmm1, xmmword ptr [rdi + 16]
    movups	xmm2, xmmword ptr [rdi + 32]
    movups	xmm3, xmmword ptr [rdi + 48]
    movups	xmm4, xmmword ptr [rdi + 64]
    movaps	xmmword ptr [rsp - 88], xmm0
    movaps	xmmword ptr [rsp - 72], xmm1
    movaps	xmmword ptr [rsp - 56], xmm2
    movaps	xmmword ptr [rsp - 40], xmm3
    movaps	xmmword ptr [rsp - 24], xmm4
    mov	rax, qword ptr [rsp + 8*rsi - 96]
    ret
In the mutable case, the tuple is first copied to the stack and then loaded
from there.  
This currently makes `MArray` (from `StaticArrays`) very slow in some cases,
e.g. `sort!` slows down proportional to the size of the MArray. It would be
possible to do the loads through a pointer, but this inhibits a lot of
optimisations on the Julia side.
I looked at the emitted llvm code, and in the difference is apparently, that
in the mutable case Julia generates `alloca + load + store` and in the
immutable one just a `getelementptr`, LLVM is not able to optimize this code.