93
6
567
33
1
99
14
69
101k
9.0
117
86
31
412
152
27
52
1475
119
8
37
113
8
689
38
3
114
15
71
111k
9.1
117
86
31
415
152
26.8
52
1478
123
8
37
113
8
693
38
3
114
15
71
111k
9.2
116
88
28
418
154
26.9
52
1476
124
8
37
113
8
694
38
3
113
15
71
111k
9.3
121
91
30
431
158
26.8
53
1651
125
9
37
113
8
746
42
3
118
17
74
114k
10.0
136
108
28
537
194
26.5
74
2342
131
14
38
109
8
936
49
2
134
20
77
139k
10.1
137
108
29
537
194
26.5
74
2438
132
14
38
109
8
937
49
2
135
20
77
139k
10.2
138
108
30
539
197
26.8
77
2539
132
14
38
109
8
955
49
2
136
20
77
141k
10.3
140
111
29
545
209
27.7
83
2380
137
16
38
109
8
986
49
2
138
20
77
143k
A COMPARISON OF iOS VERSIONS
We performed an analysis of the data extracted for 15 versions
spanning iOS 7, 8, 9, and 10. The results of this analysis are provided
in Table 3. We also compare the data extracted across versions to
detect policy or context changes made by Apple in response to
jailbreaks.
A.1 Access Control Complexity
System files, system exectables, sandbox profiles, container profile
complexity, and Unix users have all approximately doubled from iOS
7.0 to 10.3. In the same time, the number of unique capabilities (i.e.,
entitlement keys and extension classes) has approximately tripled.
This rate of increasing complexity in subjects, objects, capabilities,
and policies emphasizes the need for frameworks that automate
access control evaluation as manual analysis becomes intractable.
Note that the majority of executables on iOS 10.3 are still un-
sandboxed. Among these unsandboxed processes is the default Mes-
senger app, MobileSMS. As an executable that must process external
input, we expected the Messenger application to use a sandbox
profile. In fact, a sandbox profile called MobileSMS was present on
iOS 7.0 through iOS 9.2, but it was never applied to any executables.
Since iOS 9.3, the MobileSMS profile stopped appearing on iOS.
A.2 Detecting Responses to Jailbreaks
We use iOracle’s ability to automatically process multiple versions
of iOS to detect access control patches and the iOS versions they
appear in. These access control patches may take the form of new
sandbox profiles, new sandbox rules, changed behaviors of potential
confused deputies, etc.
A.2.1 Name Resolution Jailbreak Responses. Figure 4 illustrates
the privilege escalation attacks used by the evasi0n 7 (iOS 7) and
TaiG (iOS 8) jailbreaks. These jailbreaks are discussed in more detail
in Section 5.
evasi0n 7 – In iOS 7.0, installd was unsandboxed, but our queries
indicate that it was assigned a sandbox profile in iOS 10.0. We found
that installd no longer contained strings referencing filepaths in
tmp/ as of iOS 9.0. In a similar patch, the afcd sandbox profile
was changed in iOS 7.1 removing its ability to access tmp/. iOracle
detects that CrashHousekeeping performs chown operations on files
in /private/var/mobile/Library/Logs/ on iOS 7.0. However, in iOS
7.1, the hard coded chown operations are no longer detected.
TaiG – Through experimentation with libimobiledevice 18, we found
that the afcd interface on iOS 9 no longer allows the creation of
symlinks with ../ in the destination path. Since this symlink re-
striction appears to be a hard coded check built into afcd, it was
not detected by our iOracle queries. In iOS 8.0, BackupAgent and
BackupAgent2 were unsandboxed, but our queries indicate that they
were assigned a sandbox profile in iOS 9.0. This profile is one of
the only default allow profiles, and the few operations that were
denied seem focused on the filepaths exploited by TaiG. Therefore,
default allow profiles can be used to disrupt known exploits while
allowing all other functionality.
A.2.2 Capability Based Jailbreak Responses. Figure 5 illustrates
the privilege escalation attacks used by the Pangu 8 (iOS 8) and
Pangu 9 (iOS 9) jailbreaks. These jailbreaks are discussed in more
detail in Section 5.
Pangu 8 – Comparing the sandbox profile facts of debugserver
between iOS 8 and 9 reveals an interesting change. The debugserver
profile in iOS 9 adds the debug-mode filter as a requirement for the
process-exec* operation. Based on the Pangu 9 requirements, we
assume the debug-mode filter requires the executed subject to possess
the get-task-allow entitlement.
Pangu 9 – Beginning in iOS 10.0, the container-required entitle-
ment was added to neagent. We speculate that container-required
overrides the entitlement that assigns the vpn-plugins profile (neagent
has both, but only one profile can be used). The container profile
makes neagent significantly less useful for deploying kernel ex-
ploits.
B OTHER POLICY FLAWS
In addition to the five policy flaws presented in Section 6, we dis-
covered three other flaws while implementing iOracle.
18https://github.com/libimobiledevice
Figure 4: Name Resolution Based Jailbreak Steps
Figure 5: Capability Based Jailbreak Steps
B.1 Denial of Service
Several system applications (e.g., Voice Memo, Camera, Safari) rely
on files in the Media/ directory. Therefore, if an attacker abuses ac-
cess to afcd, it can disrupt the functionality of these applications. Us-
ing iOracle, we know that afcd has write access to all files in Media/
and can create non-regular type files there. We also queried iOracle
to detect filepaths within Media/ that are written by system executa-
bles. As a proof of concept attack, we used libimobiledevice to con-
trol afcd on iOS 10.2 and replaced databases in Media/Recordings/
with directories containing dummy content. If the user attempts to
make an audio recording with Voice Memos, the application will
fail to save the recording because the database it requires has been
replaced by a directory, and it cannot delete the directory.
The impact of this vulnerability is limited. However, it empha-
sizes the fragility of system processes with respect to file integrity.
B.2 Address Book Privacy Setting Bypass
This vulnerability was not detected by using iOracle, but rather
was the result of insights gained while modeling iOS access control
semantics. Apple uses sandbox extensions as revocable capabilities.
However, malicious applications can resist revocation. Revocation
is resisted by storing the sandbox extension token value (which
only changes on system reboot) in a file or other form of persistent
storage. After revocation, an application can reclaim a revoked
sandbox extension by calling sandbox_extension_consume with the
stored extension token as a parameter. We designed a proof-of-
concept application that uses this technique to maintain access to
the user’s address book after access is revoked through privacy
settings.
The impact of this vulnerability is moderate. The attack bypasses
privacy settings and allows access to user data that should be pro-
tected by the sandbox. The attack also provides insight into the
challenges of revocable privileges. CVE-2015-7001 and CVE-2016-
4686 suggest that Apple has already increased address book security
twice in attempts to prevent this type of attack.
B.3 Symlink Restriction Bypass
The afcd interface on iOS 9 does not allow the creation of links with
../ in the destination. This restriction prevents afcd from creating
symlinks that direct to files outside of Media/. However, third party
applications can still create symbolic links with any filepath as
the destination. If a third party applications places a symlink in
Media/, then afcd can create a second link that redirects to the
first link without using ../ in the path. Therefore, by combining
multiple symbolic links, afcd can create links in Media/ that redirect
to arbitrary filepaths.
We query the container profile for filepaths in Media/ where
a third party application has write access. Our queries indicate
that third party applications on iOS 9.3.5 have write access to
Media/lock_sync.19 Therefore, a chain of links can be created by a
third party application and afcd such that directories in Media/ are
redirected to directories under attacker control. The third party app
can link Media/lock_sync to any destination, and afcd can replace
19/private/var/mobile/Media/com.apple.itunes.lock_sync
- Limited interface (afcd)- Sandboxed- Mobile user- Read-Only root partition- Sandboxed- Mobile user- Read-Only root partition- Mobile user- Read-Only root partition- Limited interface (BackupAgent)- Read-Only root partitionGoal State:- Writable root partitionName resolution attack (mount)⁃MobileStorageMounter mounts attacker deﬁned disk imageTaiGName resolution attack (move)⁃BackupAgent replaces working directory of MobileStorageMounter with symlinkTaiGMove relative symlink⁃afcd bypasses limited interfaceevasi0n 7Name resolution attack (move)⁃installd manipulates libraries to disable afcd sandbox enforcementevasi0n 7Name resolution attack (chown)⁃CrashHouseKeeping changes owner of root partition to user mobileevasi0n 7- Limited Interface- Sandboxed (debugserver proﬁle)TrustCache loading exploit⁃Install iOS 6.1 vpnagent (expired sig)Pangu 9No actions required- neagent already on devicePangu 8- Limited Interface- Sandboxed (debugserver proﬁle)- Executable that can load untrusted library- Limited Interface- Sandboxed (vpn-plugins proﬁle)- Executable that can load untrusted libraryexecute neagent via debugserverPangu 8execute vpnagent via debugserverPangu 9Goal State:- Full control with non-container sandbox to deploy kernel exploitdebugserver imports attacker library via vpnagent's get-task-allow entitlementPangu 9debugserver imports attacker library via neagent's skip-library-validation entitlementPangu 8files or directories in Media/ with links to Media/lock_sync. For ex-
ample, the following chain of links can be formed Media/Recordings
→ Media/lock_sync → ../../../attackerTarget.
The impact of this vulnerability depends on its applicability to
iOS 10 and the prevalence of devices restricted by their hardware
to iOS 9.3.5. Third party write access to lock_sync was removed in
iOS 10 in response to vulnerabilities detected by SandScout [10].
Therefore, our proof of concept does not apply to iOS 10. However,
it can affect iOS 9.3.5 (the latest version supported by 32 bit iOS
devices). On iOS 9.3.5, this vulnerability can act as a starting point
in jailbreak attacks to perform name resolution attacks similar to
those used in evasi0n 7 and TaiG.