### A Comparative Analysis of iOS Versions

We conducted an in-depth analysis of 15 different versions of iOS, spanning from iOS 7 to iOS 10. The results of this analysis are summarized in Table 3. Additionally, we compared the data across these versions to identify any policy or context changes implemented by Apple in response to jailbreaks.

#### A.1 Access Control Complexity

From iOS 7.0 to iOS 10.3, the complexity of system files, system executables, sandbox profiles, container profile complexity, and Unix users has approximately doubled. In the same period, the number of unique capabilities (such as entitlement keys and extension classes) has tripled. This increasing complexity underscores the need for frameworks that can automate access control evaluation, as manual analysis becomes increasingly infeasible.

It is worth noting that a significant number of executables on iOS 10.3 remain unsandboxed. For example, the default Messenger app, MobileSMS, which processes external input, is not sandboxed. Although a sandbox profile named MobileSMS existed from iOS 7.0 to iOS 9.2, it was never applied to any executables. Since iOS 9.3, this profile has been absent from the system.

#### A.2 Detecting Responses to Jailbreaks

We leveraged iOracle's capability to automatically process multiple versions of iOS to detect access control patches and the specific iOS versions in which they appear. These patches can include new sandbox profiles, new sandbox rules, and changes in the behavior of potential confused deputies.

##### A.2.1 Name Resolution Jailbreak Responses

Figure 4 illustrates the privilege escalation attacks used by the evasi0n 7 (iOS 7) and TaiG (iOS 8) jailbreaks. These jailbreaks are discussed in more detail in Section 5.

- **evasi0n 7**: In iOS 7.0, the `installd` process was unsandboxed. However, our queries indicate that it was assigned a sandbox profile in iOS 10.0. We also found that `installd` no longer contained strings referencing filepaths in `tmp/` as of iOS 9.0. Similarly, the `afcd` sandbox profile was modified in iOS 7.1 to remove its ability to access `tmp/`. iOracle detected that `CrashHousekeeping` performed `chown` operations on files in `/private/var/mobile/Library/Logs/` on iOS 7.0, but these operations were no longer present in iOS 7.1.

- **TaiG**: Using `libimobiledevice`, we discovered that the `afcd` interface on iOS 9 no longer allows the creation of symlinks with `../` in the destination path. This restriction appears to be a hardcoded check within `afcd` and was not detected by our iOracle queries. In iOS 8.0, `BackupAgent` and `BackupAgent2` were unsandboxed, but our queries show that they were assigned a sandbox profile in iOS 9.0. This profile is one of the few default allow profiles, and the denied operations seem to target the filepaths exploited by TaiG. Thus, default allow profiles can disrupt known exploits while maintaining other functionalities.

##### A.2.2 Capability-Based Jailbreak Responses

Figure 5 illustrates the privilege escalation attacks used by the Pangu 8 (iOS 8) and Pangu 9 (iOS 9) jailbreaks. These jailbreaks are discussed in more detail in Section 5.

- **Pangu 8**: Comparing the sandbox profile facts of `debugserver` between iOS 8 and iOS 9 reveals an interesting change. The `debugserver` profile in iOS 9 adds the `debug-mode` filter as a requirement for the `process-exec*` operation. Based on the Pangu 9 requirements, we assume that the `debug-mode` filter requires the executed subject to possess the `get-task-allow` entitlement.

- **Pangu 9**: Starting with iOS 10.0, the `container-required` entitlement was added to `neagent`. We speculate that `container-required` overrides the entitlement that assigns the `vpn-plugins` profile, making `neagent` less useful for deploying kernel exploits.

### B. Other Policy Flaws

In addition to the five policy flaws presented in Section 6, we discovered three other flaws during the implementation of iOracle.

#### B.1 Denial of Service

Several system applications, such as Voice Memo, Camera, and Safari, rely on files in the `Media/` directory. If an attacker abuses access to `afcd`, they can disrupt the functionality of these applications. Using iOracle, we determined that `afcd` has write access to all files in `Media/` and can create non-regular type files there. As a proof of concept, we used `libimobiledevice` to control `afcd` on iOS 10.2 and replaced databases in `Media/Recordings/` with directories containing dummy content. When the user attempts to make an audio recording with Voice Memos, the application fails because the required database has been replaced by a directory, and it cannot delete the directory.

While the impact of this vulnerability is limited, it highlights the fragility of system processes concerning file integrity.

#### B.2 Address Book Privacy Setting Bypass

This vulnerability was not detected by iOracle but was identified through insights gained while modeling iOS access control semantics. Apple uses sandbox extensions as revocable capabilities. However, malicious applications can resist revocation by storing the sandbox extension token value (which only changes on system reboot) in a file or other persistent storage. After revocation, an application can reclaim a revoked sandbox extension by calling `sandbox_extension_consume` with the stored extension token as a parameter. We designed a proof-of-concept application that uses this technique to maintain access to the user’s address book after access is revoked through privacy settings.

The impact of this vulnerability is moderate, as it bypasses privacy settings and allows unauthorized access to user data. CVE-2015-7001 and CVE-2016-4686 suggest that Apple has already increased address book security twice to prevent this type of attack.

#### B.3 Symlink Restriction Bypass

The `afcd` interface on iOS 9 does not allow the creation of links with `../` in the destination, preventing `afcd` from creating symlinks that direct to files outside of `Media/`. However, third-party applications can still create symbolic links with any filepath as the destination. If a third-party application places a symlink in `Media/`, then `afcd` can create a second link that redirects to the first link without using `../` in the path. By combining multiple symbolic links, `afcd` can create links in `Media/` that redirect to arbitrary filepaths.

Our queries indicate that third-party applications on iOS 9.3.5 have write access to `Media/lock_sync`. Therefore, a chain of links can be created by a third-party application and `afcd` such that directories in `Media/` are redirected to directories under attacker control. The third-party app can link `Media/lock_sync` to any destination, and `afcd` can replace files or directories in `Media/` with links to `Media/lock_sync`. For example, the following chain of links can be formed: `Media/Recordings → Media/lock_sync → ../../../attackerTarget`.

The impact of this vulnerability depends on its applicability to iOS 10 and the prevalence of devices restricted to iOS 9.3.5. Third-party write access to `lock_sync` was removed in iOS 10 in response to vulnerabilities detected by SandScout [10]. Therefore, our proof of concept does not apply to iOS 10. However, it can affect iOS 9.3.5, the latest version supported by 32-bit iOS devices. On iOS 9.3.5, this vulnerability can serve as a starting point for jailbreak attacks, similar to those used in evasi0n 7 and TaiG.