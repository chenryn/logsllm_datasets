上报告软锁定时导致系统 panic 的内核参数。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
若要了解客户机中的软锁定，必须了解，主机会作为一个任务调度客户机，客户机然后会调度自己的任务。
:::
::: itemizedlist
**其它资源**
-   [什么是软锁定](#keeping-kernel-panic-parameters-disabled-in-virtualized-environments_managing-monitoring-and-updating-the-kernel.html#what-is-a-soft-lockup_keeping-kernel-panic-parameters-disabled-in-virtualized-environments "什么是软锁定"){.link}
-   [*[[RHEL 8
    虚拟机组件及它们直接的交互](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_virtualization/index#rhel-8-virtual-machine-components-and-their-interaction_virt-overview){.link}]{.citetitle}*]{.emphasis}
-   [*[[虚拟机报告了\"BUG：软锁定\"](https://access.redhat.com/solutions/1503333){.link}]{.citetitle}*]{.emphasis}
:::
:::
:::
[]{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel}第 8 章 为数据库服务器调整内核参数 {.title}
:::
有一组不同的内核参数可能会影响特定数据库应用程序的性能。以下小节解释了要配置什么内核参数来确保数据库服务器和数据库的高效操作。
::: section
::: titlepage
# []{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html#introduction-to-databases_adjusting-kernel-parameters-for-database-servers}介绍 {.title}
:::
数据库服务器是一种提供数据库管理系统 (DBMS) 功能的服务。DBMS
提供数据库管理的实用程序，并与最终用户、应用程序和数据库交互。
Red Hat Enterprise Linux 8 提供以下数据库管理系统：
::: itemizedlist
-   MariaDB 10.3
-   MariaDB 10.5 - 自 RHEL 8.4 起可用
-   MySQL 8.0
-   PostgreSQL 10
-   PostgreSQL 9.6
-   PostgreSQL 12 - 从 RHEL 8.1.1 开始可用
-   PostgreSQL 13 - 从 RHEL 8.4 开始可用
:::
:::
::: section
::: titlepage
# []{#adjusting-kernel-parameters-for-database-servers_managing-monitoring-and-updating-the-kernel.html#parameters-affecting-performance-of-database-applications_adjusting-kernel-parameters-for-database-servers}影响数据库应用程序性能的参数 {.title}
:::
以下内核参数会影响数据库应用程序的性能。
::: variablelist
[fs.aio-max-nr]{.term}
:   定义系统可在服务器中处理的异步 I/O 操作的最大数目。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    增加 `fs.aio-max-nr`{.literal} 参数不会在增加 aio
    限制外产生任何变化。
    :::
[fs.file-max]{.term}
:   定义系统在任何实例上支持的最大文件句柄数（临时文件名或者分配给打开文件的
    ID）。
    内核会在应用程序请求文件句柄时动态分配文件。但是，当应用程序发布这些文件时，内核不会释放这些文件句柄。相反,内核会回收这些文件的句柄。这意味着，分配的文件句柄总数将随着时间增加，即使当前使用的文件句柄的数量可能较低。
[kernel.shmall]{.term}
:   定义可用于系统范围的共享内存页面总数。要使用整个主内存，`kernel.shmall`{.literal}
    参数的值应当为主内存大小总计。
[kernel.shmmax]{.term}
:   定义 Linux
    进程在其虚拟地址空间中可分配的单个共享内存段的最大字节大小。
[kernel.shmmni]{.term}
:   定义数据库服务器能够处理的共享内存段的最大数量。
[net.ipv4.ip_local_port_range]{.term}
:   定义系统可用于希望在无特定端口号的情况下连接到数据库服务器的程序的端口范围。
[net.core.rmem_default]{.term}
:   通过传输控制协议 (TCP) 定义默认接收套接字内存。
[net.core.rmem_max]{.term}
:   通过传输控制协议 (TCP) 定义最大接收套接字内存。
[net.core.wmem_default]{.term}
:   通过传输控制协议 (TCP) 定义默认发送套接字内存。
[net.core.wmem_max]{.term}
:   通过传输控制协议 (TCP) 定义最大发送套接字内存。
[vm.dirty_bytes / vm.dirty_ratio]{.term}
:   定义以脏内存百分比为单位的字节/阈值，在该阈值中，生成脏数据的进程会在
    `write()`{.literal} 函数中启动。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
[**一个**]{.strong} `vm.dirty_bytes`{.literal} [**或**]{.strong}
`vm.dirty_ratio`{.literal} 可以在同一时间被指定。
:::
::: variablelist
[vm.dirty_background_bytes / vm.dirty_background_ratio]{.term}
:   定义以脏内存百分比为单位的字节/阈值，达到此阈值时内核会尝试主动将脏数据写入硬盘。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
[**一个**]{.strong} `vm.dirty_background_bytes`{.literal}
[**或**]{.strong} `vm.dirty_background_ratio`{.literal} 可以一次指定。
:::
::: variablelist
[vm.dirty_writeback_centisecs]{.term}
:   定义负责将脏数据写入硬盘的内核线程定期唤醒之间的时间间隔。
    这个内核参数以 100 分之一秒为单位。
[vm.dirty_expire_centisecs]{.term}
:   定义脏数据足够旧的时间以便写入硬盘。
    这个内核参数以 100 分之一秒为单位。
:::
::: itemizedlist
**其它资源**
-   [*[[dirty pagecache writeback 和 vm.dirty
    参数](https://access.redhat.com/articles/45002#control-parameters-4){.link}]{.citetitle}*]{.emphasis}
:::
:::
:::
[]{#getting-started-with-kernel-logging_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#getting-started-with-kernel-logging_managing-monitoring-and-updating-the-kernel.html#getting-started-with-kernel-logging_managing-monitoring-and-updating-the-kernel}第 9 章 内核日志记录入门 {.title}
:::
日志文件是包含有关系统的消息的文件，包括内核、服务及其上运行的应用。Red
Hat Enterprise Linux 中的日志记录系统基于内置的 [**syslog**]{.strong}
协议。各种实用程序使用此系统记录事件并将其整理到日志文件中。这些文件在审核操作系统或故障排除问题时非常有用。
::: section
::: titlepage
# []{#getting-started-with-kernel-logging_managing-monitoring-and-updating-the-kernel.html#what-is-the-kernel-ring-buffer_getting-started-with-kernel-logging}什么是内核环缓冲 {.title}
:::
在引导过程中，控制台提供有关系统启动初始阶段的许多重要信息。为避免丢失早期消息，内核会利用称为环缓冲的早期消息。此缓冲区会保存由内核代码中的
`printk()`{.literal}
函数所产生的所有消息（包括引导消息）。来自内核环缓冲的消息随后由
`syslog`{.literal} 服务读取并存储在永久存储上的日志文件中。
上面提到的缓冲区是具有固定大小的循环数据结构，并且硬编码到内核中。用户可以通过
`dmesg`{.literal} 命令或 `/var/log/boot.log`{.literal}
文件显示存储在内核环缓冲中的数据。当环形缓冲区满时，新数据将覆盖旧数据。
::: itemizedlist
**其它资源**
-   `syslog(2)`{.literal} 和 `dmesg(1)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#getting-started-with-kernel-logging_managing-monitoring-and-updating-the-kernel.html#role-of-printk-on-log-levels-and-kernel-logging_getting-started-with-kernel-logging}日志级别和内核日志记录上的 printk 角色 {.title}
:::
内核报告的每条消息都有一个与它关联的日志级别，用于定义消息的重要性。如[什么是内核环缓冲区](#getting-started-with-kernel-logging_managing-monitoring-and-updating-the-kernel.html#what-is-the-kernel-ring-buffer_getting-started-with-kernel-logging "什么是内核环缓冲"){.link}中所述，内核环缓冲会收集所有日志级别的内核消息。`kernel.printk`{.literal}
参数用于定义缓冲区中哪些消息打印到控制台中。
日志级别值按以下顺序划分：
::: itemizedlist
-   0 - 内核紧急。系统无法使用。
-   1 - 内核警报。必须立即采取行动。
-   2 - 内核条件被视为关键。
-   3 - 常规内核错误条件。
-   4 - 常规内核警告条件。
-   5 - 内核发现一个正常但可能需要考虑的状况。
-   6 - 内核信息。
-   7 - 内核调试级别信息。
:::
默认情况下，RHEL 8 中的 `kernel.printk`{.literal} 包含以下四个值：
``` literallayout
# sysctl kernel.printk
kernel.printk = 7	4	1	7
```
该四个值定义了以下内容：
::: orderedlist
1.  value.控制台日志级别，定义打印到控制台的消息的最低优先级。
2.  value.消息没有显式附加日志级别的默认日志级别。
3.  value.为控制台日志级别设置最低的日志级别配置。
4.  value.在引导时为控制台日志级别设置默认值。
    以上每个值都定义了处理错误消息的不同规则。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
默认的 [**7 4 1 7**]{.strong} `printk`{.literal}
值可以更好地调试内核活动。但是，与串行控制台结合使用时，此
`printk`{.literal} 设置可能会导致大量 I/O 突发，从而导致 RHEL
系统暂时变得不响应。为避免这种情况，把 `printk`{.literal} 值设置为 [**4
4 1 7**]{.strong} 通常可以正常工作，但其代价是丢失额外的调试信息。
另请注意，某些内核命令行参数（如 `quiet`{.literal} 或
`debug`{.literal}）会更改默认的 `kernel.printk`{.literal} 值。
:::
::: itemizedlist
**其它资源**
-   `syslog(2)`{.literal} 手册页
:::
:::
:::
[]{#installing-kdump_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#installing-kdump_managing-monitoring-and-updating-the-kernel.html#installing-kdump_managing-monitoring-and-updating-the-kernel}第 10 章 安装 kdump {.title}
:::
许多情况下，在新的 Red Hat Enterprise Linux 安装中默认安装并激活
`kdump`{.literal} 服务。以下部分介绍了 `kdump`{.literal}
以及在某些情况下未默认启用 `kdump`{.literal} 时如何安装 kdump。
::: section
::: titlepage
# []{#installing-kdump_managing-monitoring-and-updating-the-kernel.html#what-is-kdump_installing-kdump}kdump {.title}
:::
`kdump`{.literal}
是提供崩溃转储机制的服务。服务允许您保存系统内存内容，以便稍后进行分析。`kdump`{.literal}
使用 `kexec`{.literal} 系统调用在不重启的情况下引导至第二个
[*内核（捕获内核*]{.emphasis}），然后捕获崩溃内核的内存（
[*崩溃转储*]{.emphasis} 或
[*vmcore*]{.emphasis}）的内容并将其保存。这个第二个内核位于系统内存保留的一部分。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
内核崩溃转储可能会是系统失败时唯一可用的信息（关键错误）。因此，在关键任务环境中确保
`kdump`{.literal}
操作正常运行非常重要。红帽建议系统管理员在正常内核更新周期内定期更新和测试
`kexec-tools`{.literal}。这在部署了新内核功能时尤为重要。
:::
:::
::: section
::: titlepage
# []{#installing-kdump_managing-monitoring-and-updating-the-kernel.html#performing-kdump-installation_installing-kdump}执行 kdump 安装 {.title}
:::
在使用图形或文本界面执行交互式安装时，[**Anaconda**]{.strong} 安装程序为
`kdump`{.literal} 配置提供了一个屏幕。安装程序屏幕名为
`Kdump`{.literal}，可在主`安装概述`{.literal}屏幕中访问，且只允许有限的配置 -
您只能选择是否启用了 `kdump`{.literal} 以及保留多少内存。
::: informalfigure
::: mediaobject