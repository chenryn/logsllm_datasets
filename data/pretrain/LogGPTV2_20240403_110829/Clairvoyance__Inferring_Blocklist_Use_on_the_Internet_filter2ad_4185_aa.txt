# Title: Clairvoyance: Inferring Blocklist Use on the Internet

## Authors:
- Vector Guo Li
- Gautam Akiwate
- Kirill Levchenko
- Geoffrey M. Voelker
- Stefan Savage

### Affiliations:
- **Vector Guo Li, Gautam Akiwate, Geoffrey M. Voelker, and Stefan Savage**  
  University of California, San Diego, USA  
  Email: [PI:EMAIL, PI:EMAIL]
- **Kirill Levchenko**  
  University of Illinois Urbana-Champaign, Champaign, USA

---

## Abstract
One of the cornerstones of network defense is blocking traffic to and from "known bad" sites on the internet. However, few organizations can generate such a list independently, relying instead on third-party "threat intelligence" providers who specialize in distributing feeds of potentially malicious IP addresses. The decision to use these blocklists, and which specific data feeds are trusted, is often not made public, leading to a lack of understanding about the deployment of these techniques in practice.

To address this, we have developed and implemented a technique to infer proactive traffic blocking on remote hosts and associate that blocking with the use of particular IP blocklists. In a pilot study of 220,000 U.S. hosts, we found that approximately one-fourth of the hosts appear to use some form of threat intelligence data for blocking, and about 2% use one of the nine specific third-party blocklists we evaluated.

---

## 1. Introduction
Over the past decade, the sharing of threat information, commonly referred to as "threat intelligence," has become a fundamental part of network defense. The premise is that by widely sharing information about known threats, organizations can better protect themselves. This has led to the emergence of an industry focused on collecting, aggregating, and distributing such information, primarily in the form of lists of IP addresses, domain names, or URLs associated with specific types of threats (also known as indicators of compromise).

Despite the potential benefits, it remains unclear how organizations actually adopt and use threat intelligence data, particularly for proactive traffic blocking, or "blocklisting." Proactively blocking traffic based on threat intelligence data is appealing to defenders because, if effective, it can prevent threats without requiring human intervention. However, it is also a strong action, and recent work by Li et al. [23] has shown that threat intelligence feeds can be incomplete and may include significant numbers of false positives, potentially causing organizations to inadvertently block benign sites. Therefore, it is important to understand the extent to which network administrators are using such data to block network traffic in practice.

Motivated by this issue, our work aims to infer whether online hosts use threat intelligence IP feeds (IP blocklists) to proactively block network traffic. The primary challenge in addressing this question is that such decisions are largely invisible: a network's choice to block or not block an IP address is indistinguishable from a third-party vantage point. Additionally, for operational security reasons, few organizations are willing to publicly document the details of their network defenses.

In this paper, we describe an inference technique based on the IP ID increment side-channel, inspired by previous work on censorship detection [11, 29], to detect network-layer blocklisting. Our design is tailored to the unique characteristics of IP blocklists (e.g., dynamic, overlapping membership) and is designed to be conservative with respect to common sources of network measurement error. To evaluate this technique, we tested it against known ground truth data and conducted a large-scale pilot study with over 220,000 U.S. hosts and nine popular IPv4 blocklists. In the two cases where network operators were willing to share their blocking configurations, they were in perfect agreement with our findings. Across our pilot study, we identified 4,253 hosts (approximately 2% of the surveyed hosts) consistently using at least one of the nine lists we tested. We also established that a larger fraction (approximately one-fourth) of the surveyed hosts use some form of security-related blocking and reliably block traffic to at least some subset of the IP addresses in our lists. This significant level of security-related blocking is particularly surprising, as our pilot study was biased towards older machines with minimal traffic, a cohort not typically associated with aggressive network security postures.

---

## 2. Background
There is a substantial body of literature on the use of various kinds of "threat intelligence," though not always using that term. One popular focus is evaluating the effectiveness of these lists, including works that analyze the coverage and accuracy of spam blocklists [30, 37], phishing blocklists [35], and malware domain blocklists [20]. Other research has explored techniques to better populate such lists, such as Ramachandran et al.'s work on inferring botnet IP addresses from DNSBL lookups [33] and Hao et al.'s work on predicting future domain abuse [13, 14]. More recently, Thomas et al. [39] explored the value of sharing threat intelligence data across functional areas (e.g., mail spam, account abuse, search abuse) and found limited overlap and significant numbers of false positives. Many of these results are echoed by Li et al. [23].

However, there is comparatively little work focused on understanding how threat intelligence data is used in practice. Existing literature is primarily driven by surveys [31, 34] and lacks empirical validation. There has also been significant empirical exploration of internet connection blocking in the context of internet freedom and access, including studies on internet censorship [2, 4, 10, 28, 43], geo-blocking [1, 25, 27], and Tor blocking [18, 36]. Most of these studies rely on vantage points within the target networks, making them less directly applicable to our work. However, recent work by Ensaﬁ et al. [11] and Pearce et al. [29] has removed this requirement by using an indirect side-channel technique to test connectivity between pairs of remote hosts. While our approach differs in several ways, it is inspired by the same idea of using IP ID to infer whether a remote host sent an IP packet.

The IP ID traffic side channel has been well-known since the mid-1990s. Specifically, the Identification (ID) field of an IPv4 packet is a 16-bit value in the IP packet header, designed to support fragmentation by providing a unique value that can be used to group packet fragments belonging to the same IP datagram [32]. A simplistic approach using a per-host global counter to ensure unique IP ID values implicitly encodes the number of packets sent. By probing a host multiple times, one can use the returned IP ID value to infer how many packets the remote host has sent between the two probes. This side channel has been employed for various measurement purposes, including anonymous port scanning [3], host alias detection [38], and enumerating hosts behind NATs [5]. While most operating systems no longer use such a simple approach, it is still reasonably common across the internet. For example, all versions of Windows up to version 7 used the global increment algorithm [19].

---

## 3. Methodology
In this section, we first describe our inference technique, which uses the IP ID side channel (Section 2) to determine if a particular host uses a known blocklist. The intuition is that if a reflector—a host suitable for our technique—blocks all blocklist IPs from one particular blocklist, it is likely that the blocklist is being used for blocking traffic at the network layer. Next, we detail the criteria for suitable reflectors (Section 3.2) and our criteria for sampling blocklist IPs (Section 3.3). Finally, we discuss additional validation measures (Section 3.4) and ethical concerns (Section 3.5).

### 3.1 Technique Overview
To measure if a reflector is blocking a particular IP from a blocklist, we send a train of packets (SYN-ACK packets) from our measurement machine to the reflector. The packet train consists of packets whose source address is the blocklist IP (spoofed), bracketed by packets whose source address is our measurement machine, as illustrated in Figure 1. If a firewall in the reflector's network blocks packets from the blocklist IP, the reflector will not receive packets with the blocklisted source address and will only receive packets with our measurement machine's source address. On the other hand, if there is no blocking, the reflector will receive the entire packet train.

![Figure 1: The basic method to detect network-layer blocking using the IP ID side channel.](figure1.png)

In an ideal world with no packet loss during transmission and no extra traffic on the reflector, we expect the reflector to send a RST response for each SYN-ACK packet we send, and we will receive the responses for the SYN-ACK with our measurement machine's source address. The IP IDs of these received RST packets will reflect the number of packets sent by the reflector. If the reflector did not receive the SYN-ACK packets with the blocklist IP as source addresses (being blocked by a firewall), the IP ID sequence in the RST responses will be an increasing sequence without gaps (the "Blocking" case in Figure 1). Conversely, if the reflector did receive the SYN-ACK packets with the blocklist IP, it would have sent a RST in response to each such packet, incrementing the IP ID counter each time. While we will not see the RST packets sent to the blocklist IP, we will observe the increments in the IP ID sequence, resulting in a gap in the IP ID sequence of packets received by our measurement machine (the "No Blocking" case in Figure 1). These two cases allow us to determine whether a particular blocklist IP is blocked by some network device, such as a firewall, somewhere between the measurement host and the reflector.

In previous works [11, 29], the technique relies on sending spoofed SYN packets to the sites (equivalent to our blocklist IPs here), with the source IPs equal to reflector IPs. The sites then reply with SYN-ACK packets to the reflectors. By monitoring the reflectors' IP ID changes during this process, the authors can determine whether the reflectors are blocking the tested sites. However, this strategy requires both reflectors and sites to be active hosts that reply to SYN/SYN-ACK probes. Unfortunately, in our case, there is no guarantee that blocklist IPs will reply to TCP probes. In fact, we found that, on average, only about 24% of IPs on a blocklist reply to TCP probes. Using only blocklist IPs that reply would dramatically reduce the candidate IPs we can sample from a blocklist, especially for small blocklists with only a few hundred IPs. Given the constraints we already have when sampling IPs from a blocklist (Section 3.3), this extra requirement could leave us with insufficient candidates for a measurement.

Therefore, in our technique, we directly send SYN-ACK packets to reflectors, with no involvement of hosts behind blocklist IPs. The disadvantage is that we cannot detect outbound blocking, where the spoofed packet reaches the reflectors but the responses are blocked when going out of the network. Based on discussions with several security companies, most customers deploy inbound or bi-directional traffic blocking, so we believe missing outbound blocking is not a major concern.

In this section, we explain how the technique works on a theoretical level. The actual implementation needs to handle potential packet loss and other extraneous traffic at reflectors. The full implementation of the technique and false positive and false negative analyses are provided in Appendix A.

### 3.2 Criteria for Reflectors
At a high level, our technique relies on the presence of the IP ID side channel. The criteria for suitable reflectors are as follows:

- **RST Packet Generation:** The reflectors must reply with a RST packet to a TCP SYN-ACK packet without an established connection. Hosts that drop incoming SYN-ACK packets without a corresponding SYN packet are not suitable for our methodology. We use SYN-ACK packets instead of SYN because they do not create an intermediate state on the reflectors and terminate the connection in one go.
- **Shared Monotonic Increasing IP ID Counter:** The reflector should have a monotonically increasing globally shared IP ID counter, so all network traffic from the host uses the same IP ID counter, and the number of packets generated by the host between two measurements is implicit in the difference of IP IDs.
- **Low Traffic:** Our technique relies on a clear observable difference in IP ID. Therefore, hosts must have low traffic volumes, as high traffic volumes make it infeasible to observe the IP ID changes triggered by our probing packets.
- **No Ingress Filtering:** We send spoofed packets to reflectors to infer traffic blocking. However, some network providers use ingress filtering techniques and drop packets once they detect the packets are not from the networks they claimed to originate. This filtering would cause our spoofed packets to be dropped, giving us a false signal of traffic blocking.
- **No Stateful Firewall Blocking:** Some networks deploy stateful firewalls that block access from a source IP after receiving too many repetitive packets, such as to defend against SYN floods [21]. While we try to keep the number of our probing packets as low as possible, if our spoofed packets trigger such firewall rules, we will incorrectly conclude that the reflector uses a blocklist to block that IP.

Our goal is to discover if online hosts are using IP blocklists to block traffic. However, on a global scale, there are many policy-related reasons why a host might block network traffic, such as censorship. To simplify the problem and for ethical considerations, in this paper, we only test hosts located in the United States.

### 3.3 Sampling Blocklist IPs
To determine if a reflector uses a particular IP blocklist, we use a sample of IPs from the blocklist, as testing all blocklist IPs would be infeasible.