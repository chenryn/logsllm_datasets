title:Clairvoyance: Inferring Blocklist Use on the Internet
author:Vector Guo Li and
Gautam Akiwate and
Kirill Levchenko and
Geoffrey M. Voelker and
Stefan Savage
Clairvoyance: Inferring Blocklist
Use on the Internet
Vector Guo Li1, Gautam Akiwate1(B), Kirill Levchenko2,
Geoﬀrey M. Voelker1, and Stefan Savage1
1 University of California, San Diego, USA
PI:EMAIL, PI:EMAIL
2 University of Illinois Urbana-Champaign, Champaign, USA
Abstract. One of the staples of network defense is blocking traﬃc to
and from a list of “known bad” sites on the Internet. However, few orga-
nizations are in a position to produce such a list themselves, so prag-
matically this approach depends on the existence of third-party “threat
intelligence” providers who specialize in distributing feeds of unwelcome
IP addresses. However, the choice to use such a strategy, let alone which
data feeds are trusted for this purpose, is rarely made public and thus
little is understood about the deployment of these techniques in the wild.
To explore this issue, we have designed and implemented a technique to
infer proactive traﬃc blocking on a remote host and, through a series of
measurements, to associate that blocking with the use of particular IP
blocklists. In a pilot study of 220K US hosts, we ﬁnd as many as one
fourth of the hosts appear to blocklist based on some source of threat
intelligence data, and about 2% use one of the 9 particular third-party
blocklists that we evaluated.
1 Introduction
Over the last decade, the use of threat information sharing—commonly labeled
“threat intelligence”—has become a staple in any discussion of network defense.
Based on the premise that by broadly sharing information about known threats,
organizations can better protect themselves, a burgeoning industry has emerged
to collect, aggregate and distribute such information [6,40], largely consisting
of lists of IP addresses, domain names or URLs thought to be associated with
particular classes of threats (a.k.a., indicators of compromise).
However, despite all the promises, it is far from clear how people actually
adopt threat intelligence data, especially for proactive traﬃc blocking, commonly
called “blocklisting”. Proactively blocking traﬃc based on threat intelligence
data is uniquely attractive to a defender, since, if eﬀective, it can foreclose threats
without requiring attention from a human analyst. However, it is also a strong
action, and recent work by Li et al. [23] has shown that threat intelligence
feeds can be far from comprehensive and may include signiﬁcant numbers of
false positives that might cause an organization to inadvertently block benign
c(cid:2) Springer Nature Switzerland AG 2021
O. Hohlfeld et al. (Eds.): PAM 2021, LNCS 12671, pp. 57–75, 2021.
https://doi.org/10.1007/978-3-030-72582-2_4
58
V. G. Li et al.
sites. Given this, it is important to understand the extent to which network
administrators are using such data to block network traﬃc in practice.
Motivated by this issue, our work seeks to infer if online hosts use threat intel-
ligence IP feeds (IP blocklists) to proactively block network traﬃc. The principal
challenge in pursuing this question is that such decisions are largely invisible: a
network choosing to block IP address A or not is indistinguishable from a third
vantage point, as this vantage point does not have access to either the network
or IP address A. Moreover, for operational security reasons, few organizations
are willing to publicly document the details of their network defenses.
In this paper, we describe an inference technique, based on the IP ID
increment side-channel (inspired by previous work focused on censorship detec-
tion [11,29]), to detect network-layer blocklisting. Our design is both specialized
to the unique characteristics of IP blocklists (e.g., dynamic, overlapping mem-
bership) and is designed to be conservative with respect to common sources of
network measurement error (hence a ﬁnding of blocking is robust). To evaluate
this technique, we test against known ground truth data and then conduct a
large-scale pilot study with over 220K U.S. hosts and against 9 popular IPv4
blocklists. In the two cases where network operators were willing to share their
blocking conﬁguration with us, they were in perfect agreement with our ﬁndings.
Across our pilot study, we identiﬁed 4,253 hosts (roughly 2% of the hosts we
surveyed), consistently using at least one of the 9 lists that we tested against. We
also established that a larger fraction (roughly a fourth) of the hosts we surveyed
make use of some form of security-related blocking and reliably block traﬃc to
at least some subset of the IP addresses in our lists. This signiﬁcant level of
security-related blocking is particularly surprising as our pilot study is biased
towards older machines with minimal traﬃc (a cohort that we would not have
associated with organizations having an aggressive network security posture).
2 Background
There is a large body of literature concerning the use of various kinds of “threat
intelligence” (not always using that term). One popular focus among these is
evaluating their eﬀectiveness, including works that analyze coverage and accu-
racy of spam blocklists [30,37], phishing blocklists [35], and malware domain
blocklists [20]. Others have explored techniques to better populate such lists,
including Ramachandran et al.’s work on inferring botnet IP addresses from
DNSBL lookups [33], and the work of Hao et al. for predicting future domain
abuse [13,14] (among others). More recently, Thomas et al. explored the value of
sharing threat intelligence data across functional areas (e.g., mail spam, account
abuse, search abuse) and found limited overlap and signiﬁcant numbers of false
positives [39]. Many of these results are echoed by Li et al. [23].
However, there is comparatively little work focused on understanding how
threat intelligence data is being used in practice. Indeed, the literature that
Clairvoyance: Inferring Blocklist Use on the Internet
59
exists is primary driven by surveys [31,34] and not validated by any empirical
measurement.1
There also has been signiﬁcant empirical exploration of Internet connection
blocking in the setting of Internet freedom and access. Indeed, there are a range of
studies that measure connection block in the context of Internet censorship [2,4,
10,28,43], geo-blocking [1,25,27], and Tor blocking [18,36]. Most of these studies
rely on vantage points sited in the target networks being studied, and so are not
directly helpful in our work. However, recent work by Ensaﬁ et al. [11] and Pearce
et al. [29] has removed this requirement using an indirect side channel technique
to test connectivity between pairs of remote hosts. While our approach diﬀers
in a number of ways from theirs, it is inspired by the same idea of using IP ID
to infer if a remote host sent an IP packet.
The IP ID traﬃc side channel has been well-known since mid 1990s. In
particular, the Identiﬁcation (ID) ﬁeld of an IPv4 packet is a 16-bit value in
the IP packet header, designed to support fragmentation by providing a unique
value that can be used to group packet fragments belonging to the same IP
datagram [32]. The simplistic approach using a per-host global counter to ensure
unique IP ID values implicitly encodes the number of packets sent. Thus, by
probing a host multiple times one can use the value of the returned IP ID to
infer how many packets have been sent by the remote host between the two
probes. This side channel has been employed for a wide variety of measurement
purposes, including anonymous port scanning [3], host alias detection [38] and
enumerating hosts behind NATs [5] among others. While most operating systems
no longer use such a simple approach, it is still reasonably common across the
Internet. For example, all versions of Windows up to version 7 used the global
increment algorithm [19].
3 Methodology
In this section, we ﬁrst describe our inference technique, using the IP ID side
channel (Sect. 2), that determines if a particular host uses a known blocklist. The
intuition here is that if a reﬂector—a host suitable for our technique—blocks all
blocklist IPs from one particular blocklist, then it is likely that the particular
blocklist is being used for blocking traﬃc at the network-layer. Next, we detail
criteria of suitable reﬂectors (Sect. 3.2), and our criteria when sampling blocklist
IPs (Sect. 3.3). Finally, we discuss additional validation measures (Sect. 3.4) and
ethical concerns (Sect. 3.5).
3.1 Technique Overview
To measure if a reﬂector is blocking a particular IP from a blocklist, we send a
train of packets (here we use SYN-ACK packets) from our measurement machine
1 One exception is the recent work of Bouwman et al. [7] which has explored aspects
of this question through the interview of over a dozen security professionals.
60
V. G. Li et al.
to the reﬂector. The packet train consists of packets whose source address is the
blocklist IP (spoofed), bracketed by packets whose source address is our mea-
surement machine, as illustrated in Fig. 1. If a ﬁrewall in the reﬂector’s network
blocks packets from the blocklist IP, the reﬂector will not receive packets with
the blocklisted source address. It will only receive packets with our measurement
machine’s source address. On the other hand, if there is no blocking, the reﬂector
will receive the entire packet train.
Fig. 1. The basic method to detect network-layer blocking using the IP ID side channel.
When there is no blocking in place (left), the measurement machine will see an IP ID
gap in two RST responses: the second IP ID will increase by two. Whereas if there is
network blocking (right), then the two IP IDs will be consecutive without a gap.
In an ideal world, where there is no packet loss during transmission and no
extra traﬃc on the reﬂector, we expect the reﬂector to send a RST response
for each SYN-ACK packet we send, and we will receive the responses for the
SYN-ACK with our measurement machine’s source address. The IP IDs of these
received RST packets will reﬂect the number of packets sent by the reﬂector.
If the reﬂector did not receive the SYN-ACK packets with the blocklist IP as
source addresses (being blocked by a ﬁrewall), the IP ID sequence in the RST
responses will be an increasing sequence without gaps (the “Blocking” case in
Fig. 1). On the other hand, if the reﬂector did receive the SYN-ACK packets
with the blocklist IP, it would have sent a RST in response to each such packet,
incrementing the IP ID counter each time. While we will not see the RST packets
sent to the blocklist IP, we will observe the increments in the IP ID sequence.
More speciﬁcally, we would see a gap in the IP ID sequence of packets received
by our measurement machine (the “No Blocking” case in Fig. 1). These two
cases allow us to determine whether a particular blocklist IP is blocked by some
network device, such as a ﬁrewall, somewhere between the measurement host
and the reﬂector.
In previous works [11,29], the technique relies on sending spoofed SYN pack-
ets to the sites (equivalent to our blocklist IPs here), with the source IPs equal
Clairvoyance: Inferring Blocklist Use on the Internet
61
to reﬂector IPs. The sites then reply with SYN-ACK packets to the reﬂectors.
By monitoring the reﬂectors’ IP ID changes during this process, the authors can
determine whether the reﬂectors are blocking the tested sites. To use this strat-
egy, however, one requires both reﬂectors and sites to be active hosts that reply
to SYN/SYN-ACK probes. Unfortunately, in our case there is no guarantee that
blocklist IPs will reply to TCP probes. In fact, we found that on average only
about 24% of IPs on a blocklist reply to TCP probes. Using only blocklist IPs
that reply would dramatically reduce the candidate IPs we can sample from a
blocklist, especially for small blocklists that only have a few hundred IPs. We
already have many constraints when sampling IPs from a blocklist (Sect. 3.3),
and this extra requirement could leave us with not enough candidates for a
measurement.
Therefore, in our technique, we directly send SYN-ACK packets to reﬂectors,
with no involvement of hosts behind blocklist IPs. The disadvantage here is
that we cannot detect outbound blocking—wherein the spoofed packet reaches
the reﬂectors but the responses are blocked when going out of the network.
Based on our experience talking with several security companies, most customers
deploy inbound or bi-directional traﬃc blocking, so we believe missing outbound
blocking is not a major concern.
In this section, we explain how the technique works on a theoretical level. The
actual implementation needs to handle potential packet loss and other extrane-
ous traﬃc at reﬂectors. We list the full implementation of the technique and
false positive and false negative analyses in Appendix A.
3.2 Criteria for Reﬂectors
At a high level, our technique relies on the presence of the IP ID side channel.
Keeping that in mind, listed below are the criteria for suitable reﬂectors.
– RST packet generation: The reﬂectors must reply with a RST packet
to a TCP SYN-ACK packet without an established connection. Hosts that
drop incoming SYN-ACK packets without a corresponding SYN packet are
not suitable for our methodology. We use SYN-ACK packets instead of SYN
because it does not create an intermediate state on the reﬂectors and the
connection is terminated in one go.
– Shared monotonic increasing IP ID counter: The reﬂector should have a
monotonically increasing globally shared IP ID counter, so all network traﬃc
from the host uses the same IP ID counter counter and the number of packets
generated by the host between two measurements is implicit in the diﬀerence
of IP IDs.
– Low traﬃc: Our technique relies on a clear observable diﬀerence in IP ID.
As such, hosts must have low traﬃc volumes since a high traﬃc volume makes
it infeasible to observe the IP ID changes triggered by our probing packets.
– No ingress ﬁltering: We send spoofed packets to reﬂectors to infer traﬃc
blocking. However, some network providers use ingress ﬁltering techniques
and drop packets once they detect the packets are not from the networks
62
V. G. Li et al.
they claimed to originate. This ﬁltering would cause our spoofed packets
being dropped and give us a false signal of traﬃc blocking.
– No stateful ﬁrewall blocking: Some networks deploy a stateful ﬁrewall
that blocks access from a source IP after receiving too many repetitive pack-
ets. One example is to defend against SYN ﬂoods [21]. While we try to keep
the number of our probing packets as low as possible, if our spoofed packets
trigger such ﬁrewall rules and then we are blocked by the ﬁrewall, we will
incorrectly conclude that the reﬂector uses a blocklist to block that IP.
Our goal is to discover if online hosts are using IP blocklists to block traﬃc.
But when looking at the problem on a global scale, there are many policy related
reasons why a host blocks network traﬃc, such as censorship. These alternate
sources of blocking could disrupt our experiments. To simplify the problem, and
for ethical considerations, in this paper we only test the hosts located in the
United States.
3.3 Sampling Blocklist IPs
To determine if a reﬂector uses a particular IP blocklist, we use a sample of
IPs from a blocklist, as it would be infeasible for us to test all blocklist IPs.