# Transforming Your KVM into a Key-Logging Powerhouse

## Meet the Team
- **Yaniv Balmas**  
  *Security Researcher*  
  "This should theoretically work."

- **Lior Oppenheim**  
  *Check Point Software Technologies*  
  "The mad scientist"

## The Problem: Too Many Computers
- Multiple computers
- A large number of computers
- An overwhelming number of computers

## What is a KVM?
- **KVM (Keyboard, Video, Mouse)**
  - A device that allows a single keyboard, video display, and mouse to be used across multiple computers.

## KVM Evolution
- **1981**: A-B Switch
- **2002**: Desktop KVM
- **2015**: Enterprise KVM

## Where Are KVMs Found?
- On top of server racks
- On your desktop
- In security centers

### KVMs Are Everywhere!

## Introducing Gen-KVM
- **Features:**
  - On-screen configuration display
  - Configurable hotkeys
  - Control device functionality through the keyboard

### Exploitable?
- **Key-Logger + Video + Mouse = Raging Key-Logging Monster**

## First Attempt
- **Software Analysis:**
  - Opening the KVM box
  - Manuals, cables, warranty, and CD
  - CD contains a firmware upgrade utility
  - Can the firmware be extracted from the upgrade utility?

### Reverse Engineering the Firmware
- **Challenges:**
  - Low entropy
  - No strings
  - Undetermined frequency analysis

### Serial Sniffing
- **Firmware Upgrade Process:**
  - Done via a custom serial connection
  - Possible to extract the (possibly) decoded firmware binary from the serial protocol

### Protocol Analysis
- **Serial Data:**
  - Example data packets
  - Fixed header, opcode, handshake, and data transfer

### Initial Failures
- **Guess Who?**  
  - Failed attempts at identifying the correct approach

### PCB Layout
- **Components:**
  - Unknown components
  - PLD (Programmable Logic Device)
  - 8052 Processor
  - External RAM
  - RAM Flip Flop

### UART Magic
- **8051/8052 Chips:**
  - Integrated UART port
  - Identifying the correct IC pins to tap
  - Extracting firmware using a logic analyzer

### Tapping the 8052 IC UART Pins
- **Logic Analyzer:**
  - Reveals UART port signals

### Signal Analysis
- **Reviewing Signals:**
  - Identifying patterns in the UI

### Breaking the Code
- **Blob Analysis:**
  - Last XX bytes padded with 0x53
  - 0x53 âŠ• 0x53 = 0x00 (8051 NOP)

### Final Bytes
- **Last 8 Bytes:**
  - Different in each firmware version
  - Potential clue left by an embedded developer

### Firmware Differences
- **Analyzing Multiple Firmware Versions:**
  - Comparing the last 8 bytes
  - Binary values and potential ASCII conversion

### Pattern Recognition
- **Shifting Bits:**
  - Shifting bits 3 positions to the right to get ASCII values

### Strings and Assembly
- **Identified Strings:**
  - Reshuffling and reordering
  - Success in identifying meaningful strings

### 8051 Assembly
- **Designing Custom Firmware:**
  - Basic understanding of 8051 Assembly
  - Limited OP-Codes and instructions

## KVM Logic
- **Key Components:**
  - Keyboard emulation
  - HID parsing
  - Hotkey handling
  - Keyboard LED control

## Demo Time
- **MALKVM:**
  - Super secured network
  - Internet-connected network
  - KVM integration

---

This optimized version aims to provide a clearer, more structured, and professional presentation of the content.