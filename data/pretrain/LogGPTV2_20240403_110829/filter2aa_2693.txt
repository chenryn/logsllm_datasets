Key-Logger, Video, Mouse
How to turn your KVM into a 
raging key-logging monster
MEETTHETEAM
Yaniv Balmas 
“This should theoretically work”
Security Researcher
Lior Oppenheim 
“The mad scientist”
Check Point Software 
Technologies
Check Point Software 
Technologies
Security Researcher
TOOMANYCOMPUTERS
• Computers 
• More computers 
• A LOT OF COMPUTERS
WHATISKVM?
• Keyboard, Video, Mouse
• KVM Connects the same Keyboard, Video and 
Mouse to one or more computers.
KVMEVOLUTION
1981
`A-B Switch`
2002
Desktop KVM
2015
Enterprise KVM
WHEREARETHEY?
• On top of your server racks. 
• On your desktop. 
• In your security centres.
KVMS ARE 
EVERYWHERE!!
Introducing Gen-KVM
ITRUNSCODE
• On screen conﬁguration display. 
• Conﬁgurable hot-keys. 
• Control device functionality through keyboard.
Exploitable?
+
+
=
First Attempt
(Funny meme here)
SOFTWARE
• Opening the KVM box. 
• Manuals, Cables, Warranty and CD… 
• CD contains A Firmware Upgrade Utility! 
• Can the ﬁrmware be extracted from the upgrade 
utility?! 
• Since x86 is no new territory. we can reverse 
engineer this!
MEETTHEBLOB
Low Entropy
No Strings
Undetermined Freq. Analysis
FAIL!
SERIALSNIFF
• Firmware upgrade process is done via a custom 
serial connection. 
• It is possible to extract the (possibly) decoded 
ﬁrmware binary from the serial protocol. 
• Its just a matter of analyzing the serial protocol.
PROTOCOLANALYSIS
46 55 a3 00 03 63 40 d7 85 85 32 ea e2 01 6b 85   FU£..c@◊ÖÖ2Í‚.kÖ 
32 a6 d9 d6 e5 df 55 a6 d5 22 04 d6 cd 05 d5 96   2¶Ÿ÷ÂﬂU¶’".÷Õ.’ñ 
27 85 85 d7 40 a5 d7 32 01 32 e2 85 6b ea 85 d9   'ÖÖ◊@•◊2.2‚ÖkÍÖŸ 
df d5 e5 a6 55 d6 a6 04 2d 27 cd 22 d5 d6 96 85   ﬂ’Â¶U÷¶.-'Õ"’÷ñÖ 
a5 01 40 85 d7 d7 81                              •.@Ö◊◊Å          
46 55 23 00 03 63 00 24                           FU#..c.$    
From Device
To Device
Fixed Header
OpCode
Handshake
Data Transfer
46 55 90 00 44 49 b8                              FUê.DI∏          
46 55 10 00 43 ** 2d 31 ** ** 34 41 2f 31 ** **   FU..C*-1**4A/1** 
32 41 00 00 4d 41 49 4e 00 00 00 56 34 32 52 34   2A..MAIN...V42R4 
31 37 56 31 30 52 30 38 31 57 37 38 45 36 35 00   17V10R081W78E65. 
00 a2                                             .¢               
46 55 a0 00 43 54 d2                              FU†.CT“          
46 55 20 00 00 bb                                 FU ..ª           
46 55 a2 00 ** ** ** ** ** ** 2d 31 37 33 ** 41   FU¢.******-173*A 
2f 31 ** ** ** 41 00 00 4d 41 49 4e 00 00 00 56   /1***A..MAIN…V 
34 32 56 31 30 04 ce 19 a7 75 50 35 ca aa 6a 0a   42V10.Œ.ßuP5 ™j. 
ca 8a 0a aa 01 09 8c 69 73 49 1c c0 6a c7 01 ac    ä.™..åisI.¿j«.¨ 
7f 25 25 49 10                                    %%I.            
46 55 22 00 00 bd                                 FU"..Ω           
46 55 a3 00 00 00 05 68 70 7d 5b af 65 05 4d ea   FU£....hp}[Øe.MÍ 
2d a1 4f 55 85 05 d1 04 04 b7 d8 76 05 05 7a 04   -°OUÖ.—..∑ÿv..z. 
04 84 e3 17 04 05 04 04 04 ba 15 ed 32 05 ec 68   .Ñ„......∫.Ì2.Ïh 
03 0f 8b 0f be 85 16 37 be 12 85 07 13 c5 b7 96   ..ã.æÖ.7æ.Ö..≈∑ñ 
92 03 94 7f 05 3d 2a                              í.î.=*          
CheckSum
Seq. Number
GUESSWHO?
FAIL!
PCBLAYOUT
Unknown
PLD
8052 Processor
External RAM
RAM Flip Flop
PCBLAYOUT
?
PCBLAYOUT
Unknown X2
PLD X2
8052 X1
External RAM X1
UARTMAGIC
• 8051\2 Chips have an integrated UART port. 
• Which IC pins should be tapped? 
• If we ﬁnd out, the ﬁrmware could be extracted using simple 
LOGIC.
NOTHINGBUTLOGIC
• 30-45 China mail shipping days later. 
• We can ﬁnally use LOGIC.
TAPICPINS
• Tapping the 8052 IC UART pins using Logic Analyzer. 
• Reveals the the UART port’s signals.
To UART
From UART
SIGNALANALYSIS
• Reviewing the signals in the UI. 
• An obvious pattern emerges.
GREATSUCCESS?
Looks Familiar?
GREATFAIL!
46 55 90 00 44 49 b8                              FUê.DI∏          
46 55 10 00 43 ** 2d 31 ** ** 34 41 2f 31 ** **   FU..C*-1**4A/1** 
32 41 00 00 4d 41 49 4e 00 00 00 56 34 32 52 34   2A..MAIN...V42R4 
31 37 56 31 30 52 30 38 31 57 37 38 45 36 35 00   17V10R081W78E65. 
00 a2                                             .¢               
46 55 a0 00 43 54 d2                              FU†.CT“          
46 55 20 00 00 bb                                 FU ..ª           
46 55 a2 00 ** ** ** ** ** ** 2d 31 37 33 ** 41   FU¢.******-173*A 
2f 31 ** ** ** 41 00 00 4d 41 49 4e 00 00 00 56   /1***A..MAIN…V 
34 32 56 31 30 04 ce 19 a7 75 50 35 ca aa 6a 0a   42V10.Œ.ßuP5 ™j. 
ca 8a 0a aa 01 09 8c 69 73 49 1c c0 6a c7 01 ac    ä.™..åisI.¿j«.¨ 
7f 25 25 49 10                                    %%I.            
46 55 22 00 00 bd                                 FU"..Ω           
46 55 a3 00 00 00 05 68 70 7d 5b af 65 05 4d ea   FU£....hp}[Øe.MÍ 
2d a1 4f 55 85 05 d1 04 04 b7 d8 76 05 05 7a 04   -°OUÖ.—..∑ÿv..z. 
04 84 e3 17 04 05 04 04 04 ba 15 ed 32 05 ec 68   .Ñ„......∫.Ì2.Ïh 
03 0f 8b 0f be 85 16 37 be 12 85 07 13 c5 b7 96   ..ã.æÖ.7æ.Ö..≈∑ñ 
92 03 94 7f 05 3d 2a                              í.î.=*          
46 55 a3 00 03 63 40 d7 85 85 32 ea e2 01 6b 85   FU£..c@◊ÖÖ2Í‚.kÖ 
32 a6 d9 d6 e5 df 55 a6 d5 22 04 d6 cd 05 d5 96   2¶Ÿ÷ÂﬂU¶’".÷Õ.’ñ 
27 85 85 d7 40 a5 d7 32 01 32 e2 85 6b ea 85 d9   'ÖÖ◊@•◊2.2‚ÖkÍÖŸ 
df d5 e5 a6 55 d6 a6 04 2d 27 cd 22 d5 d6 96 85   ﬂ’Â¶U÷¶.-'Õ"’÷ñÖ 
a5 01 40 85 d7 d7 81                              •.@Ö◊◊Å          
46 55 23 00 03 63 00 24                           FU#..c.$    
BREAKINGCODE
• The BLOB is probably translated to 8051 Assembly. 
• The translation is done somewhere within the 8052 
chip. 
• It might be possible to break the obfuscation!
REMEETTHEBLOB
Last XX Bytes are padded 
with 0x53
BREAKINGCODE
0x53⊕0x53=  0x00
8051 NOP = 0x00
ALLDONE!
8051ASSEMBLY?
8051ASSEMBLY?
8051ASSEMBLY?
EVERYTHING IS 8051!!!
BREAKINGCODE
Final 8 Bytes are different.
ACLUE?
• What does these last 8 bytes mean? 
• Are they a clue left for use by a mad embedded 
developer? 
• If we could just get some more data…
FIRMWAREDIFFS!
• We have only analyzed a single ﬁrmware version. 
• Perhaps other ﬁrmware versions could be insightful.
Last 8 Bytes
Firmware Version
91   99   99   89   91   B2   99   00
3 . 3 . 3 1 2
B2   92   89   81   A1   99   A1   89
4 . 1 . 4 0 1
92   00   A1   A1   89   B2   89   91
4 . 2 . 4 1 1
91   92   A1   89   A1   A1   B2   00
4 . 2 . 4 1 4
B2   A1   A1   89   A9   00   92   91
4 . 2 . 4 1 5
A1   92   00   89   B1   91   A1   B9
4 . 2 . 4 1 6
92   00   A1   89   91   B2   A1   89
4 . 2 . 4 1 7
00   A1   92   91   C1   B2   A1   89
4 . 2 . 4 1 8
00   91   A1   B2   C9   89   A1   92
4 . 2 . 4 1 9
APATTERN?
• Listing the binary values of these “patterns” from all 
ﬁrmware versions. 
• If only these were ASCII values…
Value
Hex
Binary
1
0x89
10001001
2
0x91
10010001
3
0x99
10011001
4
0xA1
10100001
5
0xA9
10101001
6
0xB1
10110001
7
0xB9
10111001
8
0xC1
11000001
9
0xC9
11001001
THEYCOULDBE!
• If we shift the bits 3 positions to the right. 
• We get our ASCII values!
Value
Hex
Binary
1
0x89
10001001
2
0x91
10010001
3
0x99
10011001
4
0xA1
10100001
5
0xA9
10101001
6
0xB1
10110001
7
0xB9
10111001
8
0xC1
11000001
9
0xC9
11001001
ROR 3
ASCII
00110001
1
00110010
2
00110011
3
00110100
4
00110101
5
00110110
6
00110111
7
00111000
8
00111001
9
STRINGS?
1
2
3
4
5
6
7
8 1 2
3
4
5
6 7 8
1
2
3
4
5 6 7
8
RESHUFFLE
AGCFEDBHIOKNMLJPQWSVUTRX
RESHUFFLE
1
2
3
4
5
6
7
8 1 2
3
4
5
6 7 8
1
2
3
4
5 6 7
8
A
G
C
B DEF
HI
O
K
LMN
J
PQ
W
S
TUV
R
X
Position
Original
1
1
2
7
3
3
4
6
5
5
6
4
7
2
8
8
SUCCESS!!!
Strings!
Assembly!
8051FUN
• We can now design our own “custom” ﬁrmware-
upgrade utility. 
• However, we do need a basic understanding of 
8051 Assembly!
8051REVIEW
+ Only 255 OP-Codes, and ~40 Instructions. 
- Functions are not *really* functions. 
- Just a single memory access register. 
- Registers keep on changing for some reason.
KVMLOGIC
Keyboard 
Emulation
HID Parsing
Hotkeys 
Handling
Keyboard 
LEDs Control
MALKVM
Super Secured 
Network
Internet 
Connected 
Network
KVM
DEMOTIME