**Author: 0x7F@Knownsec 404 Team**  
**Date: October 18, 2018**  
**Chinese Version:**
### 0x00 Introduction
Inspired by the CVE-2018-8495 vulnerability, this paper analyzes and studies
the security issues of `url scheme` in PC for the purpose of learning.
This is not a new issue when it comes to the security problems of `url
scheme`. As early as 2008, there were related research and exploits. In 2018,
security issues have emerged, including the Electron command injection
(CVE-2018-1000006) in January and the Edge RCE (CVE-2018-8495) in October. So
it's worth exploring the security issues of `url scheme`.
`url scheme` is also known as `url protocol` or `url handler`, and this
article uses `url scheme`.
### 0x01 Whatâ€™s URL Scheme
**The common application scenario of url scheme**
In the process of using a computer, you will often find that clicking on a
certain link will try to launch a local application, for example, clicking on
`mailto://PI:EMAIL` will launch the Mail client; clicking on
`thunder://xxxxx` will launch the Thunder client. This is just the application
of the `url scheme`. In addition, we can also find that there are some
different prefixes in the address of the browsers, such as `http://`,
`https://`, `ftp://` and `file://`, which is also the application scenario of
`url scheme`.
In order to improve the user experience and enrich the functionality of the
browsers, major operating systems and browser developers allow developers to
associate URLs with local applications so that when a user uses a browser,
they can launch an application by clicking on a link; this function is simply
referred to as a `url scheme`. For example, using IE8 under Windows 7 to
launch the default mail client `outlook`:
![
](https://images.seebug.org/content/images/2018/10/60ecaa63-c34f-4e9c-adac-8c247d6dc9d3.png-w331s)
Due to the excellent function design of `url scheme`, various major operating
system developers have supported it. No matter it is Windows, MAC, Linux for
PC, or iOS, Android for phones, they all have good supports to `url shceme`.
This article analyzes the security issues of `url scheme` under PC. There are
similar problems under the mobile, but the exploits are different, and no more
details here.
**The workflow of url scheme**
Having understood the function of the `url scheme`, you can roughly know about
that the workflow of the `url scheme`. The application registers the `url
scheme` item in the operating system. When the browser or other url-enabled
application accesses a specific `url scheme`, the corresponding `url scheme`
item is matched from the system to start the application; it can be seen that
this is a function supported mutually by three parties.
![
](https://images.seebug.org/content/images/2019/07/7eaba134-9f63-4f40-b99e-7d5573091128.png-w331s)
Because of this, for the function of `url scheme`in the operating system,
browser (or other applications that support url) or application, no matter
which part of them has security issues or there are problems in their mutual
support, it will affect the function of `url scheme` and eventually bring
security issues to users.
### 0x02 Create URL Scheme
So how is the `url scheme` registered in the operating system? Different
operating systems have different ways of implementation, here illustrates by
taking Windows 7 for example.
In Windows 7, the `url scheme` is recorded under the `HKEY_CLASSES_ROOT`
registry, such as the related fields of mailto:
![
](https://images.seebug.org/content/images/2018/10/f57908a8-534f-465f-b754-9058f07119ea.png-w331s)
If you want to create a new `url scheme`, simply add it to `HKEY_CLASSES_ROOT`
and fill in the corresponding values in the corresponding fields. The created
subitem name is just the name of `url scheme` function, and under that subitem
are also two items: `DefaultIcon` and `shell`. `DefaultIcon` contains the
default icon path used by this feature. Continue to create subkeys under the
`shell` item, for example: `open`, and then create a `command` subkey under
the `open` item to describe the path and parameters of the application.
For example, create `calc` to start `C:\Windows\System32\calc.exe`:
    HKEY_CLASSES_ROOT
        calc
        (Default) = "URL:Calc Protocol"
        URL Protocol = ""
        DefaultIcon
        (Default) = "C:\Windows\System32\calc.exe,1"
        shell
            open
                command
                    (Default) = "C:\Windows\System32\calc.exe" "%1"
PS: In fact, there are two ways to add `url scheme` in Windows. The above is
the way to add the registry directly (Pluggable Protocol), and the other is
the Asynchronous Pluggable Protocol. The registered protocol will be recorded
under `HKEY_CLASSES_ROOT\PROTOCOLS\`. For more details, you can refer to:
.
### 0x03 Security Risks
For the `url scheme` function, simply speaking, it's that you can start a
local application through url, which undoubtedly greatly improves the user
experience, but at the same time brings some security risks, such as the user
can start a malicious program through the browser, or the application launched
by the user has special features and can be called (e.g. delete files, start
network connection).
In addition, for related applications that contain urls, the client is often a
user, a reader, not an editor; that is to say, urls can be maliciously
constructed by attackers to achieve the effect of launching local applications
remotely.
![
](https://images.seebug.org/content/images/2019/07/3882fadc-3346-41be-86aa-8ccc2ba74250.png-w331s)
So in the operating system, what `url scheme` can be called? Here are three
scripts for exporting the `url scheme` under the three major PC systems:
Windows: []  
MAC: []  
Linux: []
(The scripts source: )
When you run scripts, you can see that there are many `url schemes` that can
be called under the system, including those supported by the operating system
by default, such as `HTTP`, `FTP` and `mailto`, as well as third-party
applications, such as QQ and Thunder. If there are security issues with these
applications, such as support for deleting files, launching another programs,
and other sensitive operations, the security issues will be triggered remotely
with the help of the `url scheme`.
In addition to security issues that may arise with the application, browsers
(or other programs) can also have security issues in the process of url
parsing and launching the application. And there may still be problems when
these three parties support each other. No matter which part occurs security
issues, its harm will eventually be magnified in `url scheme`.
This paper analyzes the possible security issues mentioned above and gives
examples.
### 0x04 Issues in Operating System
In 2007, Heise Security exposed a remote command execution vulnerability
caused by `url scheme`, which appeared in Windows XP that has installed IE7,
and affected all applications that supported the `url scheme`.
The constructed PoC is as follows:
    mailto:test%../../../../windows/system32/calc.exe".cmd
The running results in Windows XP is as follows:
![
](https://images.seebug.org/content/images/2018/10/c3b62a18-7480-469b-8457-062c2426912c.png-w331s)
The image source: .
The cause for the vulnerability is that Microsoft changed the operating
system's handling of url by installing IE7 for Windows XP, and the application
directly passes the path to the operating system for startup, eventually
resulting in a special link containing `%` to start arbitrary program.
After the vulnerability was disclosed, Microsoft did not release a fix and
thought it was not the cause of Windows XP. Later, major application
developers fixed the vulnerability. Of course, the upper application can check
the input parameters, but it can also be considered that it is the operating
system that resulted in the `url scheme` remote command execution.
### 0x05 Browser Parameter Injection
In 2018, among the security issues of `url scheme`, there are two problems
caused by the IE and Edge parameters injection under Windows. One is Electron
Custom Protocol Command Injection (CVE-2018-1000006) and the other is Edge
Remote Code Execution (CVE-2018-8495).
Under Windows, IE and Edge handle url scheme differently. After the browser
receives a `url scheme`, it accesses the registry to query the corresponding
application path, and then decodes the url, and then calls the `ShellExecute`