## 沉浸式学习PostgreSQL|PolarDB 14: 共享单车、徒步、旅游、网约车轨迹查询    
### 作者    
digoal    
### 日期    
2023-09-08    
### 标签    
PostgreSQL , PolarDB , 数据库 , 教学    
----    
## 背景    
欢迎数据库应用开发者参与贡献场景, 在此[issue](https://github.com/digoal/blog/issues/121)回复即可, 共同建设《沉浸式数据库学习教学素材库》, 帮助开发者用好数据库, 提升开发者职业竞争力, 同时为企业降本提效.    
- 系列课程的核心目标是教大家怎么用好数据库, 而不是怎么运维管理数据库、怎么开发数据库内核. 所以面向的对象是数据库的用户、应用开发者、应用架构师、数据库厂商的产品经理、售前售后专家等角色.    
本文的实验可以使用永久免费的阿里云[云起实验室](https://developer.aliyun.com/adc/scenario/f55dbfac77c0467a9d3cd95ff6697a31)来完成.    
如果你本地有docker环境也可以把镜像拉到本地来做实验:    
x86_64机器使用以下docker image:    
- [《amd64 image》](../202307/20230710_03.md)    
ARM机器使用以下docker image:    
- [《arm64 image》](../202308/20230814_02.md)    
## 业务场景1 介绍: 共享单车、徒步、旅游、网约车轨迹查询   
租用共享单车, 从开始租用到还车, 这段用户骑行的过程就是一段轨迹, 例如每5秒记录一个点(x,y,z).   
很多小程序或健康APP通过手机或手环的定位来记录轨迹.  
专业的驴友, 通常都有非常专业的带GPS的手表也会记录徒步的轨迹.  
网约车就更不用说了, 行业要求必须记录每一单的行驶信息, 其中也包含了轨迹数据.   
当用户量大了之后, 查询轨迹、分析轨迹可能是一个比较高频的操作.  
这个实验的目的是帮助你了解如何设计轨迹表, 如何高性能的写入、查询、分析轨迹数据.   
### 实现和对照    
轨迹的生成的特点:  
- 1、平台上使用软件的人很多  
- 2、可能很多人在同时产生运动轨迹中的点(例如高峰期很多人同时在使用共享单车、网约车. 同一个时刻可能很多人在打点).  
基于这两个特点, 如果每生成1条轨迹就往数据库中写入一条记录, 会导致一个轨迹若干个点的物理存储是非常离散的.  
即使一次写入一个轨迹的多条记录, 也可能出现一个轨迹若干个点的物理存储是非常离散的情况.   
#### 传统方法 设计和实验     
轨迹中的每个点存储一条记录, 最终拼成一条轨迹.  
设计2个表:   
1、存储每个轨迹的唯一轨迹 ID  
```  
drop table if exists tbl_path_id;  
create table tbl_path_id (  
  id int primary key,   -- 轨迹ID  
  uid int,  -- 这段轨迹对应的用户  
  ts_begin timestamp,   -- 轨迹开始时间  
  ts_end timestamp,   -- 轨迹结束时间  
  pos_begin point,  -- 为了简化例子, 使用PG|PolarDB内置的平面点. 真实场景通常是用PostGIS插件的geometry类型, 包括经纬度和海平面高度.   
  pos_end point  -- 轨迹结束位置  
);   
```  
2、存储每个对象的一段运动轨迹(例如单车骑行的一单轨迹、徒步旅游开启的轨迹记录、...)  
```  
drop table if exists tbl_path_detail;  
create unlogged table tbl_path_detail (  -- 方便测试, 使用unlogged table.  
  pid int,  -- 轨迹ID  
  pos point,  -- 位置  
  ts timestamp  -- 时间  
);  
```  
3、创建轨迹索引, 按轨迹ID查询, 按时间顺序返回轨迹的所有点.  
```  
create index on tbl_path_detail (pid,ts);   
```  
4、为了方便生成测试数据, 先模拟写入1000条轨迹, 平均每条轨迹1万个点, 形成1000万条轨迹点, 再统计到轨迹唯一标识表.   
```  
vi t1.sql  
\set pid random(1,1000)  
insert into tbl_path_detail values (:pid, point(random(), random()), now());   
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t1.sql -c 10 -j 10 -t 1000000  
transaction type: ./t1.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
number of transactions per client: 1000000  
number of transactions actually processed: 10000000/10000000  
latency average = 0.053 ms  
latency stddev = 0.102 ms  
initial connection time = 23.060 ms  
tps = 189004.207706 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set pid random(1,1000)  
         0.052  insert into tbl_path_detail values (:pid, point(random(), random()), now());  
```  
```  
postgres=# select * from tbl_path_detail limit 10;  
 pid |                   pos                    |             ts               
-----+------------------------------------------+----------------------------  
 160 | (0.5000283130032592,0.15678314824874917) | 2023-09-08 02:05:15.442562  
  43 | (0.7333981781385361,0.6660386524481545)  | 2023-09-08 02:05:15.442563  
 602 | (0.5665795071743318,0.7419887321824241)  | 2023-09-08 02:05:15.44323  
 738 | (0.4883731035056087,0.5410191566444489)  | 2023-09-08 02:05:15.444977  
 925 | (0.47646978937058293,0.3324764895717003) | 2023-09-08 02:05:15.445011  
 934 | (0.8969771676532297,0.11898616861406452) | 2023-09-08 02:05:15.445049  
 748 | (0.0461507467234199,0.3288353473172556)  | 2023-09-08 02:05:15.445128  
 330 | (0.05559804559846171,0.7381967670381471) | 2023-09-08 02:05:15.445196  
 978 | (0.21187515313173577,0.6163791267053291) | 2023-09-08 02:05:15.445191  
 626 | (0.7069111074590744,0.4406223155616047)  | 2023-09-08 02:05:15.445312  
(10 rows)  
```  
5、将轨迹点汇总到轨迹唯一标识表  
```  
insert into tbl_path_id (id,uid,ts_begin,ts_end,pos_begin,pos_end)   
select pid, random()*100, ts_begin, ts_end, pos_begin, pos_end from   
  (select pid,   
    row_number() over w as rn,   
    first_value(ts) over w as ts_begin,   
    last_value(ts) over w as ts_end,   
    first_value(pos) over w as pos_begin,   
    last_value(pos) over w as pos_end   
  from tbl_path_detail   
    window w as (partition by pid order by ts RANGE BETWEEN UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING) ) t   
where rn=1;   
```  
```  
postgres=# select * from tbl_path_id limit 10;  
 id | uid |          ts_begin          |           ts_end           |                 pos_begin                 |                  pos_end                    
----+-----+----------------------------+----------------------------+-------------------------------------------+-------------------------------------------  
  1 |   2 | 2023-09-08 02:05:15.458977 | 2023-09-08 02:06:08.348456 | (0.9431799157631602,0.41223770583725994)  | (0.43968362954398543,0.8294152062281377)  
  2 |  15 | 2023-09-08 02:05:15.455308 | 2023-09-08 02:06:08.348047 | (0.20157767943472393,0.7583908472256411)  | (0.8633428320677936,0.020082269279203757)  
  3 |  60 | 2023-09-08 02:05:15.450998 | 2023-09-08 02:06:08.273702 | (0.8676802874185334,0.9332642681167798)   | (0.7358999901381367,0.8543637573444975)  
  4 |  28 | 2023-09-08 02:05:15.455818 | 2023-09-08 02:06:08.329148 | (0.5804204502817427,0.31601818657295055)  | (0.0174753704646875,0.18107497337433998)  
  5 |  97 | 2023-09-08 02:05:15.458717 | 2023-09-08 02:06:08.3295   | (0.24820536688948636,0.802131631221048)   | (0.8229560445619342,0.5435402893223191)  
  6 |  33 | 2023-09-08 02:05:15.450005 | 2023-09-08 02:06:08.312634 | (0.527644965371401,0.12866950317216563)   | (0.697993640371152,0.6356491117241596)  
  7 |   3 | 2023-09-08 02:05:15.462201 | 2023-09-08 02:06:08.345394 | (0.23643719560948284,0.6980441144259366)  | (0.7981387104508499,0.4564650368837313)  
  8 |  38 | 2023-09-08 02:05:15.457057 | 2023-09-08 02:06:08.275626 | (0.17698975732867694,0.33573573990590333) | (0.6194784648490028,0.8182679927624612)  
  9 |  18 | 2023-09-08 02:05:15.454722 | 2023-09-08 02:06:08.350231 | (0.4388676699772063,0.7529218330600749)   | (0.2080260827608882,0.04568571675149613)  
 10 |  40 | 2023-09-08 02:05:15.452294 | 2023-09-08 02:06:08.326824 | (0.6334737638364523,0.07649313466173169)  | (0.8915125815199474,0.8221032349776571)  
(10 rows)  
```  
6、压测查询轨迹, 按轨迹ID查询, 按时间顺序返回轨迹的所有点.   