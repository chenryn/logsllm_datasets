c
e
s
i
l
l
i
m
i
(
e
m
T
n
o
i
t
u
c
e
x
E
Fig. 8. GrAVity execution time breakdown
’
)
s
0
0
0
1
(
s
e
h
c
t
a
M
l
a
i
t
n
e
t
o
P
3500
3000
2500
2000
1500
1000
500
0
2
3
4
5
6
9 10 11 12 13 14
8
7
Prefix length
Fig. 9. Number of matches as a function of the signature preﬁx length
4.4 Scaling Factor
To measure how our GPU pattern matching implementation has improved dur-
ing the evolution of GPU models, we used three additional older-generation
graphics cards. Speciﬁcally, we utilized a GeForce 8600GT, which was released
early on March 2007, a GeForce8800GT released on December 2007, and a
GeForce 9800GX2 that released 4 months later, on March 2008.
Figure 10 shows that in less than two years, the computational throughput
has raised 20 times, from about 2 Gbits/sec to over 40 Gbits/sec. For compar-
ison reasons, we also calculated and included the respective numbers of various
generations of CPUs.
4.5 Peak Performance
In the ﬁnal experiment we explore the ideal performance our GPU implemen-
tation can achieve. For this reason, we created a large ﬁle containing the NULL
character, to ensure that no state transitions will be performed at the match-
ing phase. The automaton will remain always at the same state, which will be
cached. Moreover, no matches will be reported, that would trigger an expen-
sive memory write at the global device memory. In this “best-case” scenario,
92
G. Vasiliadis and S. Ioannidis
)
c
e
s
/
s
t
i
B
G
(
t
u
p
h
g
u
o
r
h
T
45
20
10
4
1
0.1
GeForceGTX295
GeForce9800GX2
GeForce8800GT
Pentium4
Xeon2.8
2005
2006
GeForce8600GT
XeonE5520(4x2.66GHz)
2008
2009
2010
2007
Year
Fig. 10. Performance sustained by our pattern matching implementation on diﬀerent
generation of GPU and CPU models
)
c
e
s
/
s
t
i
B
G
(
t
u
p
h
g
u
o
r
h
T
120
100
80
60
40
20
0
2
3
4
6
7
8
5
Depth (Number of States)
9 10 11 12 13 14
Threads=256K
Threads=512K
Threads=1024K
Threads=2048K
Threads=4096K
Threads=8192K
Fig. 11. Peak performance sustained by our pattern matching implementation on the
GPU
our throughput reached an order of 110 Gbits/s. This demonstrated the top
end performance the hardware can support. GrAVity’s end-to-end performance
reaches a very respectable 20% of this upper bound.
5 Related Work
Multi-pattern matching algorithms is one of the core operations used by appli-
cations in many domains. In the networking area, the most important applica-
tions, that primarily rely on pattern matching, are intrusion detection systems
and malware scanners.
Many approaches rely on the hardware implementation of pattern match-
ing algorithms, like FPGAs [20,22,10,2], CAMs [24,29,23] and Network Proces-
sors [6,7]. Most of these studies have focused primarily on network intrusion
detection systems, which are quite diﬀerent from virus scanning applications [9].
Recently, however, several eﬀorts have been made to improve the performance
of ClamAV [16,9,15,14]. Many approaches rely on the simple, fast and accu-
rate ﬁltering of the input data stream, as software implementations running on
generic processors [16,9], or more complex approaches using specialized hard-
ware [15,14].
GrAVity: A Massively Parallel Antivirus Engine
93
Recent software implementations have adapted Bloom ﬁlters for use in virus
scanning as a ﬁrst-level ﬁlter before the exact pattern matching algorithm oc-
curs [9,5]. A fragment of constant length is extracted from every signature and
inserted into a Bloom ﬁlter. At the scanning phase, a window of the same size
slides over the ﬁles to be examined, and its content at every position is tested
against the ﬁlter. A Bloom ﬁlter is the most compact structure that can store
a dictionary and is used to determine whether a string belongs to that dictio-
nary or not. A major drawback of Bloom ﬁlters, however, is that they cannot be
used for regular expressions matching. A possible solution is to select an invari-
ant fragment (i.e. a ﬁxed byte sequence) from a wild-card containing signature
and put it in the ﬁlter. Unfortunately, the fact that the fragments have to be
of the same length, will shorten the hashing window to the shortest signature
or fragment, and will increase the false positive rate. Several approaches have
been used Bloom ﬁlters eﬃciently in specialized hardware, for example with FP-
GAs [8,17,4]. Hardware implementations provide better performance, although
with a high, and often prohibitive, cost for many organizations.
Besides specialized hardware solutions, commodity multi-core processors have
begun gaining popularity, primarily due to their increased computing power and
low cost. It has been shown that ﬁxed-string pattern matching implementations
on SPMD processors, such as the IBM Cell processor, can achieve a computa-
tional throughput of up to 2.2 Gbits/s [19], while regular expression matching up
to 7.5 Gbits/s [13]. In the context of network intrusion detection systems, graph-
ics processors have been used to accelerate their performance [26,27,21,11,28,25].
Speciﬁcally, work in [26,27] signiﬁcantly improved the performance of Snort by
oﬄoading the string searching and regular expression matching operations to
the GPU. The work in this paper, exploits and extends some of those ideas
and applies them in a hybrid, GPU-CPU malware detection architecture, with
a drastic improvement in performance.
6 Conclusions
In this paper, we presented GrAVity, a massively parallel antivirus engine that
utilizes the GPU to oﬄoad the bulk of pattern and regular expression match-
ing from a popular antivirus system. Our system exploits the highly threaded
architecture of modern graphics processors, as well as the embarrassingly par-
allel nature of virus scanning to achieve end-to-end throughput in the order
of 20 Gbits/s. This result is 100 times faster than the unmodiﬁed ClamAV
running on a modern CPU. Our benchmarks also showed that our approach
completely oﬄoads the CPU and frees it to perform other tasks. Finally, our
micro-benchmarks showed that it is possible to achieve throughput in the order
of 40 Gbits/s in cases where data is pre-cached on the graphics card, showing
that solving data transfer bottlenecks can lead to doubling of performance.
To achieve such high performance, we tuned our system and performed a
number of optimizations. Since virus signatures are both very long and more
numerous compared to other signature matching systems, like network intrusion
94
G. Vasiliadis and S. Ioannidis
detection systems, we build our engine as a pre-ﬁlter, that uses preﬁxes of the
actual signatures. These preﬁxes are used to create the DFAs used in the actual
pattern matching on the GPU. Our architecture also takes advantage of the
physical memory hierarchies of graphics processors, as well as, bulk data transfers
using DMA.
As future work we plan to investigate how to port our engine to commercial
antivirus software, as well, other tools such as antispyware. In terms of archi-
tecture, we plan to overlap GPU and CPU matching phase, as right now our
system is serialized in that respect. Finally we plan on utilizing multiple GPUs
instead of a single one. Modern motherboards, such as the one we used in our
evaluation, support multiple GPUs on the PCI Express bus. In our case it would
be possible to utilize up to four such cards. Such a system would require a more
thorough investigation of communication and synchronization between multiple
GPUs.
Acknowledgments
This work was supported in part by the Marie Curie Actions – Reintegration
Grants project PASS. Giorgos Vasiliadis and Sotiris Ioannidis are also with the
University of Crete.
References
1. Aho, A.V., Corasick, M.J.: Eﬃcient String Matching: an Aid to Bibliographic
Search. Communications of the ACM 18(6), 333–340 (1975)
2. Baker, Z.K., Prasanna, V.K.: Time and area eﬃcient pattern matching on FPGAs.
In: Proceedings of the 2004 ACM/SIGDA 12th International Symposium on Field
Programmable Gate Arrays (FPGA 2004), pp. 223–232. ACM, New York (2004)
3. Boyer, R.S., Moore, J.S.: A fast string searching algorithm. Communications of the
Association for Computing Machinery 20(10), 762–772 (1977)
4. Braun, F., Lockwood, J., Waldvogel, M.: Protocol wrappers for layered network
packet processing in reconﬁgurable hardware. IEEE Micro 22(1), 66–74 (2002)
5. Cha, S.K., Moraru, I., Jang, J., Truelove, J., Brumley, D., Andersen, D.G.:
SplitScreen: Enabling eﬃcient, distributed malware detection. In: Proceedings of
the 7th USENIX Symposium on Networked Systems Design and Implementation
(NSDI), San Jose, CA (April 2010)
6. Clark, C.R., Lee, W., Schimmel, D.E., Contis, D., Kon, M., Thomas, A.: A Hard-
ware Platform for Network Intrusion Detection and Prevention. In: Crowley, P.,
Franklin, M.A., Hadimioglu, H., Onufryk, P.Z. (eds.) Network Processor Design:
Issues and Practices, vol. 3, pp. 99–118. Morgan Kaufmann, San Francisco (2005)
7. de Bruijn, W., Slowinska, A., van Reeuwijk, K., Hruby, T., Xu, L., Bos, H.: Safe-
Card: a Gigabit IPS on the network card. In: Zamboni, D., Kr¨ugel, C. (eds.) RAID
2006. LNCS, vol. 4219, pp. 311–330. Springer, Heidelberg (2006)
8. Dharmapurikar, S., Krishnamurthy, P., Sproull, T.S., Lockwood, J.W.: Deep packet
inspection using parallel bloom ﬁlters. IEEE Micro 24(1), 52–61 (2004)
9. Erdogan, O., Cao, P.: Hash-AV: Fast virus signature scanning by cache-resident
ﬁlters. International Journal of Security and Networks 2(1/2), 50–59 (2007)
GrAVity: A Massively Parallel Antivirus Engine
95
10. Ho, J.T.L., Lemieux, G.G.: PERG-Rx: a hardware pattern-matching engine
supporting limited regular expressions.
In: FPGA 2009: Proceeding of the
ACM/SIGDA International Symposium on Field Programmable Gate Arrays, pp.
257–260. ACM, New York (2009)
11. Huang, N.-F., Hung, H.-W., Lai, S.-H., Chu, Y.-M., Tsai, W.-Y.: A gpu-based
multiple-pattern matching algorithm for network intrusion detection systems. In:
22nd International Conference on Advanced Information Networking and Applica-
tions - Workshops, AINAW 2008, pp. 62–67 (25-28, 2008)
12. Kojm, T.: Clamav, http://www.clamav.net/
13. Kulishov, F.: DFA-based and SIMD NFA-based regular expression matching on
Cell BE for fast network traﬃc ﬁltering. In: SIN 2009: Proceedings of the 2nd
International Conference on Security of Information and Networks, pp. 123–127.
ACM, New York (2009)
14. Lin, Y.-D., Lin, P.-C., Lai, Y.-C., Liu, T.-Y.: Hardware-Software Codesign for
High-Speed Signature-based Virus Scanning. IEEE Micro 29(5), 56–65 (2009)
15. Lin, Y.-D., Tseng, K.-K., Lee, T.-H., Lin, Y.-N., Hung, C.-C., Lai, Y.-C.: A
platform-based SoC design and implementation of scalable automaton matching
for deep packet inspection. J. Syst. Archit. 53(12), 937–950 (2007)
16. Miretskiy, Y., Das, A., Wright, C.P., Zadok, E.: Avfs: An On-Access Anti-Virus File
System. In: Proceedings of the 13th USENIX Security Symposium, p. 6. USENIX
Association, Berkeley (2004)
17. Moscola, J., Lockwood, J., Loui, R., Pachos, M.: Implementation of a Content-
Scanning Module for an Internet Firewall. In: Proceedings of IEEE Symposium on
Field-Programmable Custom Computing Machines (FCCM), Napa, CA, USA, pp.
31–38 (April 2003)
18. NVIDIA. NVIDIA CUDA Compute Uniﬁed Device Architecture Programming
Guide, version 3.0,
http://developer.download.nvidia.com/compute/cuda/
3 0/toolkit/docs/NVIDIA CUDA ProgrammingGuide.pdf
19. Scarpazza, D.P., Villa, O., Petrini, F.: Exact multi-pattern string matching on the
cell/b.e. processor. In: CF 2008: Proceedings of the 2008 Conference on Computing
Frontiers, pp. 33–42. ACM, New York (2008)
20. Sidhu, R., Prasanna, V.: Fast regular expression matching using FPGAs. In: IEEE
Symposium on Field-Programmable Custom Computing Machines, FCCM 2001
(2001)
21. Smith, R., Goyal, N., Ormont, J., Sankaralingam, K., Estan, C.: Evaluating GPUs
for Network Packet Signature Matching. In: Proceedings of the International Sym-
posium on Performance Analysis of Systems and Software (2009)
22. Song, T., Zhang, W., Wang, D., Xue, Y.: A Memory Eﬃcient Multiple Pattern
Matching Architecture for Network Security. In: INFOCOM 2008. The 27th Con-
ference on Computer Communications, pp. 166–170. IEEE, Los Alamitos (13-18,
2008)
23. Sourdis, I., Pnevmatikatos, D.: Pre-decoded CAMs for eﬃcient and high-speed
NIDS pattern matching. In: FCCM 2004: Proceedings of the 12th Annual IEEE
Symposium on Field-Programmable Custom Computing Machines, Washington,
DC, USA, pp. 258–267. IEEE Computer Society, Los Alamitos (2004)
24. Sourdis, I., Pnevmatikatos, D.N., Vassiliadis, S.: Scalable multigigabit pattern
matching for packet inspection. IEEE Transactions on Very Large Scale Integration
(VLSI) Systems 16(2), 156–166 (2008)
96
G. Vasiliadis and S. Ioannidis
25. Tumeo, A., Villa, O., Sciuto, D.: Eﬃcient pattern matching on GPUs for intru-
sion detection systems. In: CF 2010: Proceedings of the 7th ACM International
Conference on Computing Frontiers, pp. 87–88. ACM, New York (2010)