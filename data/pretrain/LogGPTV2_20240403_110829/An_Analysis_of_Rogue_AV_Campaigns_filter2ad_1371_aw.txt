# GrAVity: A Massively Parallel Antivirus Engine

## 4.4 Scaling Factor
To measure the improvement in our GPU pattern matching implementation over different generations of GPUs, we tested three additional older-generation graphics cards. Specifically, we used a GeForce 8600GT (released in March 2007), a GeForce 8800GT (released in December 2007), and a GeForce 9800GX2 (released in March 2008).

Figure 10 illustrates that within less than two years, the computational throughput increased by a factor of 20, from approximately 2 Gbits/sec to over 40 Gbits/sec. For comparison, we also calculated and included the respective numbers for various generations of CPUs.

## 4.5 Peak Performance
In the final experiment, we explored the ideal performance that our GPU implementation can achieve. To do this, we created a large file containing only the NULL character, ensuring no state transitions during the matching phase. The automaton remains in the same state, which is cached, and no matches are reported, avoiding expensive memory writes to the global device memory. In this "best-case" scenario, our throughput reached 110 Gbits/s, demonstrating the top-end performance the hardware can support. GrAVity’s end-to-end performance reaches a very respectable 20% of this upper bound.

## 5 Related Work
Multi-pattern matching algorithms are a core operation in many applications across various domains. In the networking area, the most important applications that rely on pattern matching are intrusion detection systems and malware scanners.

Many approaches use hardware implementations of pattern matching algorithms, such as FPGAs [20, 22, 10, 2], CAMs [24, 29, 23], and Network Processors [6, 7]. Most of these studies have focused on network intrusion detection systems, which differ significantly from virus scanning applications [9]. Recently, several efforts have been made to improve the performance of ClamAV [16, 9, 15, 14]. Many approaches rely on simple, fast, and accurate filtering of the input data stream, either through software implementations running on generic processors [16, 9] or more complex approaches using specialized hardware [15, 14].

Recent software implementations have adapted Bloom filters for use in virus scanning as a first-level filter before the exact pattern matching algorithm [9, 5]. A fragment of constant length is extracted from every signature and inserted into a Bloom filter. During the scanning phase, a window of the same size slides over the files to be examined, and its content at every position is tested against the filter. Bloom filters are the most compact structures that can store a dictionary and determine whether a string belongs to that dictionary. However, they cannot be used for regular expressions matching. A possible solution is to select an invariant fragment (i.e., a fixed byte sequence) from a wild-card containing signature and put it in the filter. Unfortunately, the requirement for fragments to be of the same length shortens the hashing window to the shortest signature or fragment and increases the false positive rate. Several approaches have used Bloom filters efficiently in specialized hardware, such as with FPGAs [8, 17, 4]. Hardware implementations provide better performance, although at a high, often prohibitive, cost for many organizations.

Besides specialized hardware solutions, commodity multi-core processors have gained popularity due to their increased computing power and low cost. It has been shown that fixed-string pattern matching implementations on SPMD processors, such as the IBM Cell processor, can achieve a computational throughput of up to 2.2 Gbits/s [19], while regular expression matching can reach up to 7.5 Gbits/s [13]. In the context of network intrusion detection systems, graphics processors have been used to accelerate performance [26, 27, 21, 11, 28, 25]. Specifically, work in [26, 27] significantly improved Snort's performance by offloading string searching and regular expression matching operations to the GPU. This paper extends those ideas and applies them to a hybrid, GPU-CPU malware detection architecture, resulting in a drastic improvement in performance.

## 6 Conclusions
In this paper, we presented GrAVity, a massively parallel antivirus engine that utilizes the GPU to offload the bulk of pattern and regular expression matching from a popular antivirus system. Our system exploits the highly threaded architecture of modern graphics processors and the embarrassingly parallel nature of virus scanning to achieve an end-to-end throughput of 20 Gbits/s. This result is 100 times faster than the unmodified ClamAV running on a modern CPU. Our benchmarks also showed that our approach completely offloads the CPU, freeing it to perform other tasks. Additionally, our micro-benchmarks demonstrated that it is possible to achieve a throughput of 40 Gbits/s in cases where data is pre-cached on the graphics card, indicating that solving data transfer bottlenecks can lead to a doubling of performance.

To achieve such high performance, we tuned our system and performed several optimizations. Since virus signatures are both very long and numerous compared to other signature matching systems, like network intrusion detection systems, we built our engine as a pre-filter that uses prefixes of the actual signatures. These prefixes are used to create the DFAs used in the actual pattern matching on the GPU. Our architecture also takes advantage of the physical memory hierarchies of graphics processors and bulk data transfers using DMA.

For future work, we plan to investigate how to port our engine to commercial antivirus software and other tools such as antispyware. In terms of architecture, we plan to overlap the GPU and CPU matching phases, as our current system is serialized in that respect. Finally, we plan to utilize multiple GPUs instead of a single one. Modern motherboards, such as the one we used in our evaluation, support multiple GPUs on the PCI Express bus. In our case, it would be possible to utilize up to four such cards. Such a system would require a more thorough investigation of communication and synchronization between multiple GPUs.

## Acknowledgments
This work was supported in part by the Marie Curie Actions – Reintegration Grants project PASS. Giorgos Vasiliadis and Sotiris Ioannidis are also with the University of Crete.

## References
1. Aho, A.V., Corasick, M.J.: Efficient String Matching: an Aid to Bibliographic Search. Communications of the ACM 18(6), 333–340 (1975)
2. Baker, Z.K., Prasanna, V.K.: Time and area efficient pattern matching on FPGAs. In: Proceedings of the 2004 ACM/SIGDA 12th International Symposium on Field Programmable Gate Arrays (FPGA 2004), pp. 223–232. ACM, New York (2004)
3. Boyer, R.S., Moore, J.S.: A fast string searching algorithm. Communications of the Association for Computing Machinery 20(10), 762–772 (1977)
4. Braun, F., Lockwood, J., Waldvogel, M.: Protocol wrappers for layered network packet processing in reconfigurable hardware. IEEE Micro 22(1), 66–74 (2002)
5. Cha, S.K., Moraru, I., Jang, J., Truelove, J., Brumley, D., Andersen, D.G.: SplitScreen: Enabling efficient, distributed malware detection. In: Proceedings of the 7th USENIX Symposium on Networked Systems Design and Implementation (NSDI), San Jose, CA (April 2010)
6. Clark, C.R., Lee, W., Schimmel, D.E., Contis, D., Kon, M., Thomas, A.: A Hardware Platform for Network Intrusion Detection and Prevention. In: Crowley, P., Franklin, M.A., Hadimioglu, H., Onufryk, P.Z. (eds.) Network Processor Design: Issues and Practices, vol. 3, pp. 99–118. Morgan Kaufmann, San Francisco (2005)
7. de Bruijn, W., Slowinska, A., van Reeuwijk, K., Hruby, T., Xu, L., Bos, H.: SafeCard: a Gigabit IPS on the network card. In: Zamboni, D., Krügel, C. (eds.) RAID 2006. LNCS, vol. 4219, pp. 311–330. Springer, Heidelberg (2006)
8. Dharmapurikar, S., Krishnamurthy, P., Sproull, T.S., Lockwood, J.W.: Deep packet inspection using parallel bloom filters. IEEE Micro 24(1), 52–61 (2004)
9. Erdogan, O., Cao, P.: Hash-AV: Fast virus signature scanning by cache-resident filters. International Journal of Security and Networks 2(1/2), 50–59 (2007)
10. Ho, J.T.L., Lemieux, G.G.: PERG-Rx: a hardware pattern-matching engine supporting limited regular expressions. In: FPGA 2009: Proceeding of the ACM/SIGDA International Symposium on Field Programmable Gate Arrays, pp. 257–260. ACM, New York (2009)
11. Huang, N.-F., Hung, H.-W., Lai, S.-H., Chu, Y.-M., Tsai, W.-Y.: A GPU-based multiple-pattern matching algorithm for network intrusion detection systems. In: 22nd International Conference on Advanced Information Networking and Applications - Workshops, AINAW 2008, pp. 62–67 (25-28, 2008)
12. Kojm, T.: Clamav, http://www.clamav.net/
13. Kulishov, F.: DFA-based and SIMD NFA-based regular expression matching on Cell BE for fast network traffic filtering. In: SIN 2009: Proceedings of the 2nd International Conference on Security of Information and Networks, pp. 123–127. ACM, New York (2009)
14. Lin, Y.-D., Lin, P.-C., Lai, Y.-C., Liu, T.-Y.: Hardware-Software Codesign for High-Speed Signature-based Virus Scanning. IEEE Micro 29(5), 56–65 (2009)
15. Lin, Y.-D., Tseng, K.-K., Lee, T.-H., Lin, Y.-N., Hung, C.-C., Lai, Y.-C.: A platform-based SoC design and implementation of scalable automaton matching for deep packet inspection. J. Syst. Archit. 53(12), 937–950 (2007)
16. Miretskiy, Y., Das, A., Wright, C.P., Zadok, E.: Avfs: An On-Access Anti-Virus File System. In: Proceedings of the 13th USENIX Security Symposium, p. 6. USENIX Association, Berkeley (2004)
17. Moscola, J., Lockwood, J., Loui, R., Pachos, M.: Implementation of a Content-Scanning Module for an Internet Firewall. In: Proceedings of IEEE Symposium on Field-Programmable Custom Computing Machines (FCCM), Napa, CA, USA, pp. 31–38 (April 2003)
18. NVIDIA. NVIDIA CUDA Compute Unified Device Architecture Programming Guide, version 3.0, http://developer.download.nvidia.com/compute/cuda/3_0/toolkit/docs/NVIDIA_CUDA_ProgrammingGuide.pdf
19. Scarpazza, D.P., Villa, O., Petrini, F.: Exact multi-pattern string matching on the Cell/B.E. processor. In: CF 2008: Proceedings of the 2008 Conference on Computing Frontiers, pp. 33–42. ACM, New York (2008)
20. Sidhu, R., Prasanna, V.: Fast regular expression matching using FPGAs. In: IEEE Symposium on Field-Programmable Custom Computing Machines, FCCM 2001 (2001)
21. Smith, R., Goyal, N., Ormont, J., Sankaralingam, K., Estan, C.: Evaluating GPUs for Network Packet Signature Matching. In: Proceedings of the International Symposium on Performance Analysis of Systems and Software (2009)
22. Song, T., Zhang, W., Wang, D., Xue, Y.: A Memory Efficient Multiple Pattern Matching Architecture for Network Security. In: INFOCOM 2008. The 27th Conference on Computer Communications, pp. 166–170. IEEE, Los Alamitos (13-18, 2008)
23. Sourdis, I., Pnevmatikatos, D.: Pre-decoded CAMs for efficient and high-speed NIDS pattern matching. In: FCCM 2004: Proceedings of the 12th Annual IEEE Symposium on Field-Programmable Custom Computing Machines, Washington, DC, USA, pp. 258–267. IEEE Computer Society, Los Alamitos (2004)
24. Sourdis, I., Pnevmatikatos, D.N., Vassiliadis, S.: Scalable multigigabit pattern matching for packet inspection. IEEE Transactions on Very Large Scale Integration (VLSI) Systems 16(2), 156–166 (2008)
25. Tumeo, A., Villa, O., Sciuto, D.: Efficient pattern matching on GPUs for intrusion detection systems. In: CF 2010: Proceedings of the 7th ACM International Conference on Computing Frontiers, pp. 87–88. ACM, New York (2010)