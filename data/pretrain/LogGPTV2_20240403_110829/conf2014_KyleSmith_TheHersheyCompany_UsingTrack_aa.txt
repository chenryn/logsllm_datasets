# Lesser-Known Search Commands

## Presenter
- **Kyle Smith**
- **Infrastructure Analyst, The Hershey Company**

## Disclaimer
During the course of this presentation, we may make forward-looking statements regarding future events or the expected performance of the company. We caution you that such statements reflect our current expectations and estimates based on factors currently known to us, and that actual events or results could differ materially. For important factors that may cause actual results to differ from those contained in our forward-looking statements, please review our filings with the SEC. The forward-looking statements made in this presentation are being made as of the time and date of its live presentation. If reviewed after its live presentation, this presentation may not contain current or accurate information. We do not assume any obligation to update any forward-looking statements we may make. Additionally, any information about our roadmap outlines our general product direction and is subject to change at any time without notice. It is for informational purposes only and shall not be incorporated into any contract or other commitment. Splunk undertakes no obligation either to develop the features or functionality described or to include any such feature or functionality in a future release.

## About Me
- **Infrastructure Analyst at The Hershey Company**
- Working with Splunk for ~5 years
- Written 4 Public Splunk Apps (on apps.splunk.com)
- Active on both #splunk on IRC and answers.splunk.com
- My handle is “alacercogitatus” or just “alacer”
- Totally not above asking for Karma

## Agenda
1. Timechart Eval
2. Dynamic Eval
3. Contingency Map
4. GenTimes
5. Foreach Cluster
6. Correlate
7. Autoregress
8. CLI Commands
9. xyseries

## Timechart Eval
You can use an `eval` statement in a `timechart` command:
```spl
nest_data | autoregress temp_f | eval diff = temp_f - temp_f_p1 | timechart span=15m avg(diff) as "Average Difference", eval(avg(temp_f) - avg(temp_f_p1)) as "Eval Diff"
```

## Dynamic Eval (aka Indirect Reference)
- Not a search command; it's a Python hack and may not work in the future.
- Works great for perfmon sourcetypes but can be applied to any search.
- `timechart` will not use wildcards to expand fields.

Example:
```spl
| eval sample_{field} = value | stats avg(sample_*) as *
```

### How to Use It
| Raw Event | New Event |
|-----------|-----------|
| 07/17/2014 09:03:59.865 -0700 | 07/17/2014 09:03:59.865 -0700 |
| collection=CPUTime | collection=CPUTime |
| object=Processor | object=Processor |
| metric=kbps | metric=kbps |
| Value=0.97397499837021373 | kbps = 0.97397499837021373 |

**Why?**
- Allows the dynamic creation of fields based on the values of other fields within the same event.
- Reference: [How to create a field whose name is the value of another field](http://answers.splunk.com/answers/103700/how-do-i-create-a-field-whose-name-is-the-value-of-another-field-like-backticks-or-eval-in-other-languages)

## Dynamic Eval – Subsearch
- Not a search command; it's a Splunk hack and may not work in the future.

Example:
```spl
| eval subsearch = if(host==[ | head 1 | rename host as query | fields query | eval query="\"".query."\"" ], "setting_1", "setting_2")
```

## Contingency
- Builds a contingency table for two fields.
- A contingency table shows the distribution (count) of one variable in rows and another in columns, used to study the association between the two variables.

### Examples
- Web analytics: browsers with versions
- Demographics: ages with locations or genders
- Security: usernames with proxy categories

### How to Use It
```spl
get_iis_data | contingency ua_browser ua_browser_version usetotal=f
```

### Example with Weather Data
```spl
get_weather_data | contingency weather range usetotal=f
```
- In this case, `range` is the absolute value of (Actual Temperature - Relative Humidity).

## Map
- Looping operator, performs a search over each search result.
- Uses "tokens" ($field$) to pass values into the search.
- Best with very small input sets or very specific searches.
- Can take a long amount of time.
- Map is a type of subsearch.
- Is "time-agnostic" – time is not necessarily linear and can be based off the master search.

### How to Use It
**First Search:**
```spl
sourcetype=syslog sudo | stats min(_time) as et max(_time) as lt by user host
```

**Map Search:**
```spl
first_search | map search="search index=windows latest=$et$ username=$user$ eventtype=ad_last_logon"
```
- Takes each of the results from the previous search and searches in the Windows index for the user's logon event.
- Results are returned as a table:

| _time | computername | computer_time | username | user_time |
|-------|--------------|---------------|----------|-----------|
| 10/12/12 8:31:35.00 AM | Workstation$ | 10/12/2012 08:25:42 | userA | 10/12/2012 08:31:35 AM |

**Information:**
- From what computer on the domain did a user most likely execute a sudo command on a server?
- This can help determine if access was authorized from that location, potentially stopping a breach.

## GenTimes
- Generates time range results.
- Useful for generating time buckets not present in the data.
- Often used in conjunction with the `map` command.

Example:
```spl
| gentimes start=[end=] [increment=]
```

This concludes the presentation on lesser-known Splunk search commands. Thank you for your attention!