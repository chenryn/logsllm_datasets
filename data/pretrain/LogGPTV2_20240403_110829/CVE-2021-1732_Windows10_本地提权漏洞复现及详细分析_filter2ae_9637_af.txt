        ULONG_PTR pMyMenu = SetWindowLongPtr(g_hWnd[1], GWLP_ID, (LONG_PTR)pSPMenu);
        // 这里应该释放伪造 tagMENU 时申请的那些空间，因为没有后续利用，写不写倒是无所谓
        // 移除窗口 1 的 WS_CHILD 样式
        ululStyle &= ~0x4000000000000000L;
        SetWindowLongPtr(g_hWnd[0], dwpWnd0_to_pWnd1_kernel_heap_offset + g_dwExStyle_offset, ululStyle);
        std::cout  Load file ->
PDB file，选择 pdb 路径：
加载完毕后，左侧函数窗口就能看到符号了：
###  5.3 调试某一进程
以 ExploitTest.exe 为例，在虚拟机中运行 ExploitTest.exe ，WinDbg 中按下暂停后首先找到进程的 EPROCESS
地址：
    kd> !process 0 0 ExploitTest.exe
    PROCESS ffffc90f5867c080
        SessionId: 1  Cid: 08c0    Peb: 00298000  ParentCid: 0eb8
        DirBase: 62300002  ObjectTable: ffffdd89449bd940  HandleCount:  56.
        Image: ExploitTest.exe
使用 .process 指令与找到的 EPROCESS 地址切换到该进程的地址空间：
    kd> .process /i /p ffffc90f5867c080
    You need to continue execution (press 'g' ) for the context
    to be switched. When the debugger breaks in again, you will be in
    the new process context.
然后 g 运行一下，WinDbg 会切换进程并断在 ExploitTest.exe 进程中：
    kd> g
    Break instruction exception - code 80000003 (first chance)
    nt!DbgBreakPointWithStatus:
    fffff801`10dc7cc0 cc              int     3
最后重新加载符号：
    kd> !sym noisy
    noisy mode - symbol prompts on
    kd> .reload /f
    Loading User Symbols
    ... 等待其从微软符号服务器下载符号
可以看到加载了的模块都有对应的 pdb 了：
现在就可以：
  * 1.根据 IDA 上看到的地址来下断点（之前编译的时候已经关闭了随机基址，参考 **2.2 节** ）
  * 2.加载源码进行调试
对于第二种调试方法，选择 WinDbg 上方 File -> Open Source File，加载
CVE-2021-1732_Exploit.cpp，即可在源码窗口下断点：
###  5.4 获取 pdb 文件
对于调试过程中被调试进程已经加载了的模块，可以通过 `.reload /f` 指令来下载（上一部分已提及）。想要获得未加载模块的 pdb
文件，可以先在虚拟机中找到该模块，将其复制到宿主机中，再通过 WinDbg 同级目录下的 symchk.exe 来下载。
以 win32kfull.sys 为例，该驱动位于 C:\Windows\System32 目录下：
拷贝到宿主机后，找到 WinDbg 所在目录，使用 symchk 并指定 win32kfull.sys 路径：
之后就能在符号缓存目录下找到 pdb 了：
###  5.5 exp 关键点动态调试
> 5.5.1 挂钩 user32!_xxxClientAllocWindowClassExtraBytes
202 行下断点，运行到此处，先查看原 KernelCallbackTable[123] 表项，其指向
user32!_xxxClientAllocWindowClassExtraBytes：
步过后，该项被改为我们的挂钩函数：
> 5.5.2 内存布局情况
运行到 286 行，在 `win32kfull!xxxCreateWindowEx+1182` 下个断点，r15 为 tagWND2 的地址（IDA
查看函数偏移可以在 Options -> General 中勾选 Function offsets）：
访问 `*(*(&tagWND + 0x18) + 0x80)` 得到桌面堆基址 0xffff892a81000000：
通过 EXP 的 g_pwnd 数组 0、1 两项可以获取到 tagWNDk0、tagWNDk1 相对于桌面堆的偏移：
故 tagWNDk0 地址为 0xffff892a81030bc0，tagWNDk1 地址为 0xffff892a81033b10，tagWNDk2 地址为
0xffff892a81033c60。继续运行到执行流返回 EXP 的 287 行，现在窗口 0 和窗口 2 的 pExtraBytes 均处于
offset 间接寻址模式，来看看他们的扩展内存在哪里：
可以看到，窗口 0 的扩展内存处于较低的地址，窗口 2 的扩展内存语义上指向了 tagWNDk0 ，这样的内存布局正符合我们的期望：
> 5.5.3 泄露 EPROCESS 地址
运行到 293 行，在 `win32kfull!xxxSetWindowLongPtr` 下断点，第一个参数为 tagWND0 的地址，保存在 rcx
寄存器：
运行到 306 行，同样在 `win32kfull!xxxSetWindowLongPtr` 下断点，第一个参数为 tagWND1 的地址，同样保存在
rcx 寄存器：
tagWND1 原来的 spMenu：
继续执行直到执行流返回 309 行，tagWND1.spMenu 就被修改为指向我们伪造的 tagMENU 结构体了：
接着 EXP 会通过三次 GetMenuBarInfo 来泄露进程 EPROCES 地址，让程序运行到读取完毕的 320 行，验证地址的正确性：
> 5.5.4 权限提升
让程序执行到 339 行，验证找到的 System 进程 EPROCESS 地址：
可以得知 System Token 为 **0xffff9209cb20604a** ，且此时 tagWNDk1.pExtraBytes 处于直接寻址模式：
当前进程原来的 Token 为 0xffff9209d2acc067：
执行到 350 行（使用任意地址写能力修改当前进程 Token 结束后），再查看当前进程的 Token：
成功更换令牌，实现提权。
* * *
## 06 补丁分析
由于官网[24]上的补丁包我打不上，索性就用已经打满补丁的（4 月的包也更新了）Windows10 20H2 x64 宿主机来看吧，补丁打在了
win32kfull!xxxCreateWindowEx：
* * *
## 07 结语
完结撒花，感谢你耐心的阅读！如果前面的每个部分都细看了，那么相信现在你已经对 CVE 2021-1732 了若指掌了，恭喜你！同时也特别感谢 Kernel
Killer 的 EXP 开发文档[5] 和 iamelli0t
的漏洞分析博客[12]，这两篇文章数次拯救我于水深火热（大脑短路）之中。除此之外，我还推荐一篇奇安信威胁情报中心发的文章[10]，其作者详细分析了在野攻击样本，满篇的动态调试弥补了本文动调方面的不足。
其实一开始我还想拿一个版块来写 KaLendsi[4] 的 EXP 分析，奈何本人精力有限，这篇不到 16000 字的 CVE
分析已经耗费了我大量的心血，虽然这可能与我第一次做 Windows 内核漏洞利用的分析有关（笑）。如果你阅读了 KaLendsi 的
EXP，劳烦你告知我他的做法，谢谢！而如果你有心去阅读 KaLendsi 的 EXP，本文已经给你提供了足够的能力，也希望你读懂后能与我交流 ~
最后我想说，即使校对了 3 遍，我还是不能打包票 ——
本文不存在笔误，毕竟我在各参考文献中就发现了不少的错误，这一点望读者海涵。如果我哪里写错而误导了你，请务必告知我以便及时修正，届时求轻喷呜呜呜
* * *
## 08 参考资料
[1] [MSRC: Windows Win32k 特权提升漏洞公告](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1732)
[2]
[0Day攻击！首次发现蔓灵花组织在针对国内的攻击活动中使用Windows内核提权0Day漏洞（CVE-2021-1732）](https://ti.dbappsecurity.com.cn/blog/index.php/2021/02/10/windows-kernel-zero-day-exploit-is-used-by-bitter-apt-in-targeted-attack-cn/)
[3] [Github: k-k-k-k-k/CVE-2021-1732](https://github.com/k-k-k-k-k/CVE-2021-1732)
[4] [Github:
KaLendsi/CVE-2021-1732-Exploit](https://github.com/KaLendsi/CVE-2021-1732-Exploit)
[5] [[原创]CVE-­2021­-1732 Microsoft Windows10
本地提权漏洞研究及Exploit开发](https://bbs.pediy.com/thread-266362.htm)
[6] [WNDCLASSEXA structure (winuser.h)](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-wndclassexa)
[7] [CreateWindowExW function (winuser.h)](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexw)
[8] [Win10 tagWnd partial member reverse (window hidden, window
protected)](https://www.programmersought.com/article/89797235329/)
[9] [Part 18: Kernel Exploitation -> RS2 Bitmap
Necromancy](https://www.fuzzysecurity.com/tutorials/expDev/22.html)
[10] [Microsoft Windows提权漏洞 (CVE-2021-1732)
分析](https://www.secrss.com/articles/29758)
[11] [[原创]KeUserModeCallback用法详解](https://bbs.pediy.com/thread-104918.htm)
[12] [CVE-2021-1732: win32kfull xxxCreateWindowEx callback out-of-bounds](https://iamelli0t.github.io/2021/03/25/CVE-2021-1732.html)
[13] [Windows源代码阅读之
句柄算法](https://blog.csdn.net/iiprogram/article/details/1494927)
[14] [A simple protection against HMValidateHandle
technique](https://theevilbit.github.io/posts/a_simple_protection_against_hmvalidatehandle_technique/)
[15] [GetMenuBarInfo function (winuser.h)](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getmenubarinfo)
[16] [MENUBARINFO structure (winuser.h)](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-menubarinfo)
[17] [SetWindowLongPtrW function (winuser.h)](https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowlongptrw)
[18]
[通过ActiveProcessLinks遍历进程](https://blog.csdn.net/pureman_mega/article/details/78907058)
[19]
[使用AllocConsole在Win32程序中调用控制台调试输出](https://blog.csdn.net/qq_32619837/article/details/90711736)
[20] [使用VMware + win10 + VirtualKD +
windbg从零搭建双机内核调试环境](https://zhuanlan.zhihu.com/p/114538001)
[21] [Github: VirtualKD-Redux/release](https://github.com/4d61726b/VirtualKD-Redux/releases)
[22] [下载 Windows 调试工具](https://docs.microsoft.com/zh-cn/windows-hardware/drivers/debugger/debugger-download-tools)
[23] [使用符号服务器](https://docs.microsoft.com/zh-cn/windows-hardware/drivers/debugger/using-a-symbol-server)
[24] [Microsoft Update
Catalog](https://www.catalog.update.microsoft.com/Search.aspx?q=KB4601345)