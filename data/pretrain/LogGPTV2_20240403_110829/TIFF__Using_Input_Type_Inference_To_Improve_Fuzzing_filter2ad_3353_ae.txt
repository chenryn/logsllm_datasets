L267.
[32] Zhiqiang Lin, Xiangyu Zhang, and Dongyan Xu. 2010. Automatic Reverse
Engineering of Data Structures from Binary Execution.. In NDSS’10.
[33] Zhiqiang Lin, Xiangyu Zhang, and Dongyan Xu. 2010. Reverse Engineering Input
Syntactic Structure from Program Execution and Its Applications. IEEE Trans.
Softw. Eng. 36, 5 (Sept. 2010), 688–703.
[34] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
Building Customized Program Analysis Tools with Dynamic Instrumentation. In
PLDI’05. ACM, 190–200.
[35] Barton P. Miller, Louis Fredriksen, and Bryan So. 1990. An Empirical Study of
the Reliability of UNIX Utilities. Commun. ACM 33, 12 (1990), 32–44.
[36] David Molnar, Xue Cong Li, and David A. Wagner. 2009. Dynamic Test Gene-
ration to Find Integer Bugs in x86 Binary Linux Programs. In USENIX Sec’09.
67–82.
[37] Marcello Pagano and Kimberlee Gauvreau. 2000. Principles of biostatistics (2nd
ed ed.). Australia ; Pacific Grove, CA : Duxbury.
[38] G. Ramalingam, John Field, and Frank Tip. 1999. Aggregate Structure Iden-
tification and Its Application to Program Analysis. In Proc. POPL ’99. ACM,
119–132.
[39] Sanjay Rawat. 2016. VUzzer—Open Source Release. https://github.com/vusec/
vuzzer.
[40] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida,
and Herbert Bos. 2017. VUzzer: Application-aware Evolutionary Fuzzing. In
NDSS.
[41] rc0r. 2017. Utilities for automated crash sample processing with AFL. https:
//github.com/rc0r/afl-utils/blob/master/afl_utils/afl_collect.py.
[42] Kostya Serebryany. [n. d.]. LibFuzzer: A library for coverage-guided fuzz testing
(within LLVM). At: http://llvm.org/docs/LibFuzzer.html.
[43] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino,
Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel,
and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Offensive Techniques
in Binary Analysis. In IEEE S&P’16.
[44] Zisis Sialveras and Nikolaos Naziridis. 2015. Choronzon: An approach at
knowledge-based evolutionary fuzzing. https://github.com/CENSUS/choronzon.
[45] Asia Slowinska, Traian Stancescu, and Herbert Bos. 2011. Howard: A Dynamic
Excavator for Reverse Engineering Data Structures. In NDSS’11.
[46] Asia Slowinski, Traian Stancescu, and Herbert Bos. 2012. Body Armor for Bina-
ries: Preventing Buffer Overflows Without Recompilation. In USENIX ATC’12.
USENIX, 125–137.
[47] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang,
Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.
2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In
NDSS’16. Internet Society, 1–16.
[48] Spandan Veggalam, Sanjay Rawat, Istvan Haller, and Herbert Bos. 2016. IFuzzer:
An Evolutionary Interpreter Fuzzer using Genetic Programming. In ESORICS.
[49] Junjie WANG, Bihuan CHEN, Lei WEI, and Yang LIU. 2017. Skyfire: Data-
Driven Seed Generation for Fuzzing. In IEEE S&P’17.
[50] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. 2010. TaintScope: A Checksum-
Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection. In
IEEE S&P’10.
[51] Michal Zalewski. 2014. American Fuzzy Lop. At: http://lcamtuf.coredump.cx/afl/.
[52] Michal Zalewski. 2016. Integer Mutation. https://github.com/mirrorer/afl/blob/
master/config.h#L223.
APPENDIX
9.1 Mutation Cycle Algorithm
Algorithm 1 shows a step-by-step procedure to create newer inputs, based on the
two different kinds of mutation, that is control- and data-offsets based mutations.
The following macros are used in the algorithm. For a given input i, the functions
compute_(Howard|Tupni|Reward)(i) calculate type inference for offsets in
the input i. FUZZ_RUN specifies the terminating condition for the given fuzzing run.
GET_FITNESS(i) calculates the fitness of the given input—VUzzer’s fitness function
in our current prototype. DATA_MUT_FREQ specifies the number of generations that are
skipped before we use data-offset based mutation. In our current prototype, we set this va-
lue to 10 (empirically evaluated as the optimal one). CONTROL_OFFSET_MUTATE(i,
O) mutates the given input i by only targeting offsets that are used in some cmp in-
struction, along with their types. Similarly, DATA_OFFSET_MUTATE(i, O) mutates
any offsets, along with their corresponding types.
9.2 Howard Implementation Details
As mentioned in Section 6, a significant part of our taint based input type inference
system is based on Howard. HOwever, to make it suitable for our purposes, we modified
it in several ways. In the following, we provide such details.
• As Howard identifies data structures in memory, to track taint from the input
we associate a data structure with each memory address/register that keeps
515ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Vivek Jain, Sanjay Rawat, Cristiano Giuffrida, and Herbert Bos
Input: SI - set of initial seed inputs
IH ← compute_Howard(s);
IT ← compute_T upni(s);
IR ← compute_Reward(s);
1 for s ∈ SI do
2
3
4
5 end
track of the tainted tag. We use a compressed bitset data type6 data structure to
reduce the memory footprint with little performance overhead.
• Our DTA framework is based on libDFT [28] which originally worked only on
32 bit systems. To make it suitable for 64 bit systems, we extended its tagmap
structure to support 64-bit systems. Libdft stores tainted data tags in a tagmap,
which contains a process-wide data structure (shadow memory) for holding
tags of data stored in memory, as well as a thread-specific structure to hold tags
for data residing in CPU registers. In addition, while libDFT did not support
xmm registers, we store tags for both general purpose and xmm registers in the
vcpu architecture which is a part of the tagmap structure. The tagmap holds
multiple vcpu structures, one for every thread of execution. For capturing taint
at the byte level, we need 8 tags for every 64-bit general purpose register and
16 tags for every xmm register.
As mentioned, each tag is a compressed bitset (EWAHBoolArray type) data
structure which stores the file-offset that affects a particular byte of
the structure under consideration. Libdft stores memory tags in dynamically
allocated tagmap segments. These segments are allocated dynamically, as and
when requested by the application when making system calls such as mmap(),
read(). During initialization, libDFT allocates a segment translation table to
map the virtual address to the tags present in these tagmap segments. Therefore,
for some applications, tagmap segments may overflow if the memory usage is
very high or if the file size is very large.
During our experimentation, we observed that in the later stages of applica-
tion execution tagmap segment overflows occur quite regularly, slowing down
the analysis significantly. For this reason, we have implemented a configu-
rable timeout on the taint propagation during application execution which is
configurable. After some profiling, we set this timeout to MAX {2×(execution-
time-on-seed-input), 10min}, which performs well in our experiments.
• To identify data offsets types in the tainted input, we also incorporated Tupni
algorithm in Howard, as an offline analysis phase, as described in section 4.2.
• We manipulated the array detection in Howard to get the more precise array
• In our DTA, we added callbacks for various libc functions such as strcpy,
memcpy, etc., to detect strings which are tainted by input offsets. Such offsets
are good targets for buffer-overflow related mutations. Similarly, we monitored
functions such as strcmp, memcmp, etc., to get strings which are used for
comparison in the application. Doing so, allows TIFF to infer interesting offsets
that can be used in mutation to execute different paths.
types (Section 4.3) by utilising the results from DTA .
9.3 Crash Analysis Details
In this section, we provide more insight on our crash analysis results.
Table 5 presents the results of running !Exploitable on the crashes found by
TIFF. Table 4 provides information on the type of bugs (as discovered by !Exploitable)
that TIFF is able to trigger on fuzzed applications. We can observe in Table 4 that se-
veral of the reported crashes are due to the invocation of the abort() call. On further
investigation, we found that these applications are protected by gcc’s cookie-based
hardening option. While not exploitable, TIFF empirically shows the presence of such
bugs also.
Table 5: Percentage of exploitable bugs discovered by TIFF as
reported by !Exploitable tool.
Program
Unknown
mpg321
pdf2svg
jbig2dec
potrace
gif2png
tcptrace
autotrace
pdftocairo
convert
0.00
100.00
10.71
30.76
100.00
0.00
54.54
100.00
100.00
Exploitable Probably
Not Ex-
ploitable
0.00
0.00
10.71
0.00
0.00
33.33
9.09
0.00
0.00
100.00
0.00
75.00
61.53
0.00
66.66
36.36
0.00
0.00
Probably
Exploita-
ble
0.00
0.00
3.57
7.69
0.00
0.00
0.00
0.00
0.00
We further analyzed the quality of the bugs discovered by TIFF, by manually running
each crash-triggering input with GDB to analyze the crash. We observed that 3 of the
crashes in potrace occurred inside libpotrace. In the case of jbig2dec, convert and
autotrace, all the crashes happened inside libjbig2dec, libMagickCore and libautotrace
6https://github.com/lemire/EWAHBoolArray
Data: Let SP- set of inputs that executes basic blocks, not seen in
BI- set of inputs with best fitness score. Initialize SP ← SI
earlier executions.
end
FT ← GET _F IT N ESS(i);
SP ← i;
IT ← compute_T upni(i);
IR ← compute_Reward(i);
end
BI = T OP(FT);
if GEN_NUM % DATA_MUT_FREQ == 0 then
for s ∈ SP do
end
FT- dictionary of input with their fitness score;
for i ∈ Dt do
RUN(i);
if i executes a new BB then
6 while FUZZ_RUN do
I N = SP ∪ BI ;
7
while |Dt | < N U M_P ER_GEN do
8
OD ← ϕ;
9
i =SELECT_RANDOM(I N );
10
OD = GETO F F SET S(i);
11
i′ = CO NT ROL_O F F SET _MU T AT E(i, OD);
12
Dt ← i′;
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36 end
37 Def GET_OFFSETS (input)
38
39
40
41
42
43
44
45
46
47
48
Algorithm 1: Steps involved in control- and data-offsets based
Mutation
OD = GETO F F SET S(s);
DI = DAT A_O F F SET _MU T AT E(i, OD);
for d ∈ DI do
RUN(d);
end
if input ∈ IR then
O = O ∪ IR[i] ;
O = ϕ;
if input ∈ IH then
O = O ∪ IH[input];
end
if input ∈ IT then
O = O ∪ IT [input] ;
end
end
end
go to 6;
end
return O;
516TIFF: Using Input Type Inference To Improve Fuzzing
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
respectively. Bugs in libraries are more serious than those in the application code itself,
as the buggy libraries may be used by other applications too. For pdf2svg and pdftocairo,
one crash occurred inside libcairo and the other crash in libpoppler. For mpg321, two
crashes happened inside libid3tag and for gif2png all crashes occurred inside the main
application.
9.4 Results on MA dataset for 24hr Run
In a recent paper by Klees et al. [29], the authors evaluated several fuzzing prototypes
and as a results, made several recommendations for fuzzing experimentation. One of
the recommendations is to run the fuzzer for the duration of 24hrs. As in our original
experimentation, we ran TIFF for 12hrs, we report the performance of TIFF over a
duration of 24hr run for each application. As can be noticed in the table 6, we do not
see any significant difference between these two sets of experiments. We opine this
behavior can be attributed to the smart mutation strategies adopted by TIFF. It should
also be noted that this set of experimentation did not involve multiple runs for each
application and we report the figures only for the single run.
Table 6: Performance of TIFF under the 24hrs run per applica-
tion.
Application
mpg321
pdf2svg
jbig2dec
potrace
gif2png
tcptrace
autotrace
pdftocairo
convert(gif)
#Unique crashes
3
2
32
12
13
4
27
3
1
#Inputs
37670
24855
30343
26452
30694
50359
22142
26682
5859
#BBs
527
5575
1368
1532
1374
1552
1743
4830
5569
517