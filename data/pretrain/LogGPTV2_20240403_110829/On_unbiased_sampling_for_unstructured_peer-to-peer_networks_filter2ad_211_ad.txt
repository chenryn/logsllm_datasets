median session length of one hour [4,33]. In summary, these
results demonstrate that MRWB can gracefully tolerate peer
dynamics.
In particular, it performs well over the rate of
churn reported in real systems.
5.5 Exploring diﬀerent topologies
In this section, we examine diﬀerent settings of the simu-
lation parameters that directly aﬀect topological structure,
while using the dynamic characteristics from our base case
(Table 2). The Metropolis–Hastings method makes use of
the ratio between the degrees of neighboring peers. If this
ratio ﬂuctuates dramatically while the walk is conducted, it
may introduce signiﬁcant bias.
If peers often have only a
few connections, any change in their degree will result in a
large percentage-wise change. One key question is therefore:
Does a low target degree lead to sampling bias, and, if so,
when is signiﬁcant bias introduced?
The degree of peers is controlled by three factors. First,
each peer has a peer discovery mechanism that enables it
to learn the addresses of potential neighbors. The peer dis-
covery mechanism will inﬂuence the structure of the topol-
ogy and, if performing poorly, will limit the ability of peers
to establish connections. Second, peers have a target de-
gree which they actively try to maintain. If they have fewer
neighbors than the target, they open additional connections
until they have reached the target. If necessary, they make
use of the peer discovery mechanism to locate additional
potential neighbors. Finally, peers have a maximum degree,
which limits the number of neighbors they are willing to ac-
cept. If they are at the maximum and another peer contacts
them, they refuse the connection. Each of these three fac-
tors inﬂuences the graph structure, and therefore may aﬀect
the walk.
We model four diﬀerent types of peer discovery mecha-
nisms, based on those found in real systems:
Random Oracle: This is the simplest and most idealistic
approach. Peers learn about one another by contacting
a rendezvous point that has perfect global knowledge
of the system and returns a random set of peers for
them to connect to.
FIFO: In this scheme, inspired by the GWebCaches of Gnu-
tella [10], peers contact a rendezvous point which re-
turns a list of the last n peers that contacted the ren-
dezvous, where n is the maximum peer degree.
Soft State: Inspired by the approach of BitTorrent’s “track-
ers”, peers contact a rendezvous point that has imper-
fect global knowledge of the system.
In addition to
contacting the rendezvous point to learn about more
peers, every peer periodically (every half hour) con-
tacts the rendezvous point to refresh its state. If a peer
fails to make contact for 45 minutes, the rendezvous
point removes it from the list of known peers.
History: Many P2P applications connect to the network
using addresses they learned during a previous ses-
sion [18]. A large fraction of these addresses will time-
out, but typically enough of the peers will still be ac-
tive to avoid the need to contact a centralized ren-
dezvous point. As tracking the re-appearance of peers
greatly complicates our simulator (as well as greatly
increasing the memory requirements), we use a coarse
model of the History mechanism. We assume that
90% of connections automatically timeout. The 10%
that are given valid addresses are skewed towards peers
that have been present for a long time (more than one
hour) and represent regular users who might have been
present during the peer’s last session. While this might
be overly pessimistic, it reveals the behavior of MRWB
under harsh conditions.
Figure 5 presents the amount of sampling error (D) for
the three fundamental properties as a function of the target
degree, for each of the peer discovery methods, holding the
maximum peer degree ﬁxed at 30 neighbors. It shows that
sampling is not signiﬁcantly biased in any of the three fun-
damental properties as long as peers attempt to maintain
at least three connections. Widely deployed peer-to-peer
systems typically maintain dozens of neighbors. Moreover,
maintaining fewer than three neighbors per peer almost cer-
tainly leads to network fragmentation, and is therefore not
a reasonable operating point for peer-to-peer systems.
f
o
r
o
r
r
E
g
n
i
l
p
m
a
S
)
D
(
e
e
r
g
e
D
Random Oracle
FIFO
Soft State
History
0.1
0.08
0.06
0.04
0.02
0
)
f
o
D
(
h
t
g
n
e
L
r
o
r
r
E
g
n
i
l
p
m
a
S
n
o
i
s
s
e
S
Random Oracle
FIFO
Soft State
History
0.1
0.08
0.06
0.04
0.02
0
)
f
o
D
r
o
r
r
E
g
n
i
l
p
m
a
S
(
y
c
n
e
t
a
L
y
r
e
u
Q
Random Oracle
FIFO
Soft State
History
0.1
0.08
0.06
0.04
0.02
0
20
30
50
40
70
Maximum Degree
60
80
90
20
30
50
40
70
Maximum Degree
60
80
90
20
30
50
40
70
Maximum Degree
60
80
90
Figure 6: Sampling error of the three fundamental properties as a function of the maximum number of connections each peer will accept. Each peer actively
attempts to maintain x − 15 connections.
)
%
(
F
D
C
C
100
80
60
40
20
0
Snapshot
Sample
0
5
10
15
Degree
20
25
30
Figure 7: Comparison of degree distributions using the History mechanism
with a target degree of 30. Sampling cannot capture the unconnected peers
(degree = 0), causing the sampling error observed in Figure 5.
The results for the diﬀerent peer-discovery mechanisms
were similar to one another, except for a small amount of
bias observed when using the History mechanism as the tar-
get degree approaches the maximum degree (30). To investi-
gate this issue, Figure 7 presents the sampled and expected
degree distribution when using the History mechanism with
a target degree of 30. The diﬀerence between the sampled
and expected distributions is due to the 2.4% of peers with
a degree of zero. These isolated peers arise in this scenario
because the History mechanism has a high failure rate (re-
turning addresses primarily of departed peers), and when a
valid address is found, it frequently points to a peer that is
already at its connection limit. The zero-degree peers are
visible in the snapshot (which uses an oracle to obtain global
information), but not to the sampler (since peers with a de-
gree of zero have no neighbors and can never be reached).
We do not regard omitting disconnected peers as a serious
limitation.
Having explored the eﬀects of lowering the degree, we now
explore the eﬀects of increasing it. In Figure 6, we examine
sampling error as a function of the maximum degree, with
the target degree always set to 15 less than the maximum.
There is little error for any setting of the maximum degree.
In summary, the proposed MRWB technique for sampling
from dynamic graphs appears unbiased for a range of dif-
ferent topologies (with reasonable degree distributions; e.g.,
degree ≥ 3), operates correctly for a number of diﬀerent
mechanisms for peer discovery, and is largely insensitive to
a wide range of peer dynamics, with the churn rates reported
for real systems safely within this range.
6 Empirical Results
In addition to the simulator version, we have implemented
the MRWB algorithm for sampling from real peer-to-peer
networks into a tool called ion-sampler. The following sub-
sections brieﬂy describe the implementation and usage of
ion-sampler and present empirical experiments to validate
its accuracy.
6.1 Ion-Sampler
The ion-sampler tool uses a modular design that accepts
plug-ins for new peer-to-peer systems.6 As long as the peer-
to-peer system allows querying peers for a list of their neigh-
bors, a plug-in can be written. The ion-sampler tool hands
IP-address:port pairs to the plug-in, which later returns a
list of neighbors or signals that a timeout occurred. The
ion-sampler tool is responsible for managing the walks. It
outputs the samples to standard output, where they may be
easily read by another tool that collects the actual measure-
ments. For example, ion-sampler could be used with exist-
ing measurement tools for measuring bandwidth to estimate
the distribution of access link bandwidth in a peer-to-peer
system. Listing 1 shows an example of using ion-sampler
to sample peers from Gnutella.
6.2 Empirical Validation
Empirical validation is challenging due to the absence of
high-quality reference data to compare against. In our ear-
6In fact, it uses the same plug-in architecture as our earlier,
heavy-weight tool, Cruiser, which exhaustively crawls peer-
to-peer systems to capture topology snapshots.
bash$ ./ion-sampler gnutella --hops 25 -n 10
10.8.65.171:6348
10.199.20.183:5260
10.8.45.103:34717
10.21.0.29:6346
10.32.170.200:6346
10.201.162.49:30274
10.222.183.129:47272
10.245.64.85:6348
10.79.198.44:36520
10.216.54.169:44380
bash$
Listing 1: Example usage of the ion-sampler tool. We specify that we
want to use the Gnutella plug-in, each walk should take 25 hops, and we
would like 10 samples. The tool then prints out 10 IP-address:port pairs.
We have changed the ﬁrst octet of each result to “10” for privacy reasons.
)
%
(
F
D
C
C
100
80
60
40
20
0
Short Crawl (1000 peers)
Full Crawl (422,808 peers)
Sampling (971 peers)
f
o
r
o
r
r
E
)
D
(
e
e
r
g
e
D
g
n
i
l
p
m
a
S
60
50
40
30
20
10
0
0
5
10
15
20
Degree
25
30
35
40
0
10
20
30
60
Walk Length (r hops)
50
40
70
80
90
Figure 8: Comparison of degree distributions observed from sampling ver-
sus exhaustively crawling all peers
Figure 9: Difference between sampled results and a crawl as a function of
walk length. Each experiment was repeated several times. Error bars show
the sample standard deviation.
lier work [37,41], we developed a peer-to-peer crawler called
Cruiser that captures the complete overlay topology through
exhaustive exploration. We can use these topology snap-
shots as a point of reference for the degree distribution.
Unfortunately, we do not have reliably accurate empirical
reference data for session lengths or query latency.
By capturing every peer, Cruiser is immune to sampling
diﬃculties. However, because the network changes as Cruiser
operates, its snapshots are slightly distorted [37]. In partic-
ular, peers arriving near the start of the crawl are likely
to have found additional neighbors by the time Cruiser con-
tacts them. Therefore, we intuitively expect a slight upward
bias in Cruiser’s observed degree distribution. For this rea-
son, we would not expect a perfect match between Cruiser
and sampling, but if the sampling is unbiased we still ex-
pect them to be very close. We can view the CCDF version
of the degree distribution captured by Cruiser as a close