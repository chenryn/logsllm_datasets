2
What is the best way to avoid session fixation attacks?
a
Ensure cookies have the Secure attribute.
b
Only allow your API to be accessed over HTTPS.
c
Ensure cookies are set with the HttpOnly attribute.
d
Add a Content-Security-Policy header to the login response. 
e
Invalidate any existing session cookie after a user authenticates.
3
Which cookie attribute should be used to prevent session cookies being read from
JavaScript?
a
Secure
b
HttpOnly
c
Max-Age=-1
d
SameSite=lax
e
SameSite=strict
The answers are at the end of the chapter.
Use the -b option to curl to send 
cookies from a cookie jar.
The request succeeds as the 
session cookie was validated.
126
CHAPTER 4
Session cookie authentication
 The appeal of cookies as an API designer is that, once set, the browser will trans-
parently add them to every request. As a client developer, this makes life simple. After
the user has redirected back from the login endpoint, you can just make API requests
without worrying about authentication credentials. Alas, this strength is also one of
the greatest weaknesses of session cookies. The browser will also attach the same cook-
ies when requests are made from other sites that are not your UI. The site you visited
when you clicked the link from Polly loaded some JavaScript that made requests to the
Natter API from your browser window. Because you’re still logged in, the browser hap-
pily sends your session cookie along with those requests. To the Natter API, those
requests look as if you had made them yourself. 
 As shown in figure 4.9, in many cases browsers will happily let a script from
another website make cross-origin requests to your API; it just prevents them from
reading any response. Such an attack is known as Cross-Site Request Forgery because
Web browser
Natter API
Login
Web browser
Natter API
Response
Web browser
Natter API
Message
Natter UI
Natter UI
Malicious UI
Cookie
Web browser
Natter API
Response
Malicious UI
Cookie
Time
Cookie
Cookie
Cookie
1. User logs in with the Natter API.
2. User receives a session cookie.
3. User visits a malicious site . . .
4. . . . that makes a request to the Natter API.
5. The browser includes the session cookie,
so the request succeeds!
6. Only the response is blocked by the browser.
Figure 4.9
In a CSRF attack, the user first visits the legitimate site and logs in to get a session 
cookie. Later, they visit a malicious site that makes cross-origin calls to the Natter API. The browser 
will send the requests and attach the cookies, just like in a genuine request. The malicious script is 
only blocked from reading the response to cross-origin requests, not stopped from making them.
127
Preventing Cross-Site Request Forgery attacks
the malicious site can create fake requests to your API that appear to come from a
genuine client.
DEFINITION
Cross-site request forgery (CSRF, pronounced “sea-surf”) occurs
when an attacker makes a cross-origin request to your API and the browser
sends cookies along with the request. The request is processed as if it was gen-
uine unless extra checks are made to prevent these requests.
For JSON APIs, requiring an application/json Content-Type header on all requests
makes CSRF attacks harder to pull off, as does requiring another nonstandard header
such as the X-Requested-With header sent by many JavaScript frameworks. This is
because such nonstandard headers trigger the same-origin policy protections described
in section 4.2.2. But attackers have found ways to bypass such simple protections, for
example, by using flaws in the Adobe Flash browser plugin. It is therefore better to
design explicit CSRF defenses into your APIs when you accept cookies for authentica-
tion, such as the protections described in the next sections.
TIP
An important part of protecting your API from CSRF attacks is to ensure
that you never perform actions that alter state on the server or have other
real-world effects in response to GET requests. GET requests are almost
always allowed by browsers and most CSRF defenses assume that they are safe.
4.4.1
SameSite cookies
There are several ways that you can prevent CSRF attacks. When the API is hosted on
the same domain as the UI, you can use a new technology known as SameSite cookies to
significantly reduce the possibility of CSRF attacks. While still a draft standard (https://
tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7), SameSite cookies
are already supported by the current versions of all major browsers. When a cookie is
marked as SameSite, it will only be sent on requests that originate from the same
registerable domain that originally set the cookie. This means that when the malicious
site from Polly’s link tries to send a request to the Natter API, the browser will send
it without the session cookie and the request will be rejected by the server, as shown in
figure 4.10.
DEFINITION
A SameSite cookie will only be sent on requests that originate
from the same domain that originally set the cookie. Only the registerable
domain is examined, so api.payments.example.com and www .example.com
are considered the same site, as they both have the registerable domain of
example.com. On the other hand, www .example.org (different suffix) and
www .different.com are considered different sites. Unlike an origin, the proto-
col and port are not considered when making same-site decisions. 
128
CHAPTER 4
Session cookie authentication
The public suffix list
SameSite cookies rely on the notion of a registerable domain, which consists of a
top-level domain plus one more level. For example, .com is a top-level domain, so
example.com is a registerable domain, but foo.example.com typically isn't. The situ-
ation is made more complicated because there are some domain suffixes such as
.co.uk, which aren’t strictly speaking a top-level domain (which would be .uk) but
should be treated as if they are. There are also websites like github.io that allow any-
body to sign up and register a sub-domain, such as neilmadden.github.io, making
github.io also effectively a top-level domain.
Because there are no simple rules for deciding what is or isn’t a top-level domain,
Mozilla maintains an up-to-date list of effective top-level domains (eTLDs), known as
the public suffix list (https://publicsuffix.org). A registerable domain in SameSite is
an eTLD plus one extra level, or eTLD + 1 for short. You can submit your own website
to the public suffix list if you want your sub-domains to be treated as effectively inde-
pendent websites with no cookie sharing between them, but this is quite a drastic
measure to take.
Web browser
Natter API
Login
Web browser
Natter API
Response
Web browser
Natter API
Message
Natter UI
Natter UI
Malicious
UI
SameSite
cookie
SameSite
cookie
1. User logs in with the Natter API.
2. User receives a session cookie with
SameSite=strict or SameSite=lax.
3. User visits a malicious site . . .
4. . . . that makes a request to the Natter API.
5. The cookie is marked as SameSite,
so the browser does not send it.
6. The unauthenticated request
is blocked by the API.
SameSite
cookie
Time
Figure 4.10
When a cookie is marked as SameSite=strict or SameSite=lax, then the browser 
will only send it on requests that originate from the same domain that set the cookie. This 
prevents CSRF attacks, because cross-domain requests will not have a session cookie and so 
will be rejected by the API.
129
Preventing Cross-Site Request Forgery attacks
To mark a cookie as SameSite, you can add either SameSite=lax or SameSite=strict on
the Set-Cookie header, just like marking a cookie as Secure or HttpOnly (section 4.3.2).
The difference between the two modes is subtle. In strict mode, cookies will not be
sent on any cross-site request, including when a user just clicks on a link from one site
to another. This can be a surprising behavior that might break traditional websites. To
get around this, lax mode allows cookies to be sent when a user directly clicks on a
link but will still block cookies on most other cross-site requests. Strict mode should be
preferred if you can design your UI to cope with missing cookies when following links.
For example, many single-page apps work fine in strict mode because the first request
when following a link just loads a small HTML template and the JavaScript imple-
menting the SPA. Subsequent calls from the SPA to the API will be allowed to include
cookies as they originate from the same site.
TIP
Recent versions of Chrome have started marking cookies as Same-
Site=lax by default.1 Other major browsers have announced intentions to
follow suit. You can opt out of this behavior by explicitly adding a new Same-
Site=none attribute to your cookies, but only if they are also Secure. Unfortu-
nately, this new attribute is not compatible with all browsers.
SameSite cookies are a good additional protection measure against CSRF attacks,
but they are not yet implemented by all browsers and frameworks. Because the
notion of same site includes sub-domains, they also provide little protection against
sub-domain hijacking attacks. The protection against CSRF is as strong as the weak-
est sub-domain of your site: if even a single sub-domain is compromised, then all
protection is lost. For this reason, SameSite cookies should be implemented as a
defense-in-depth measure. In the next section you will implement a more robust
defense against CSRF.
4.4.2
Hash-based double-submit cookies
The most effective defense against CSRF attacks is to require that the caller prove that
they know the session cookie, or some other unguessable value associated with the ses-
sion. A common pattern for preventing CSRF in traditional web applications is to gen-
erate a random string and store it as an attribute on the session. Whenever the
application generates an HTML form, it includes the random token as a hidden field.
When the form is submitted, the server checks that the form data contains this hidden
field and that the value matches the value stored in the session associated with the
cookie. Any form data that is received without the hidden field is rejected. This effec-
tively prevents CSRF attacks because an attacker cannot guess the random fields and
so cannot forge a correct request. 
1 At the time of writing, this initiative has been paused due to the global COVID-19 pandemic.
130
CHAPTER 4
Session cookie authentication
 An API does not have the luxury of adding hidden form fields to requests because
most API clients want JSON or another data format rather than HTML. Your API must
therefore use some other mechanism to ensure that only valid requests are processed.
One alternative is to require that calls to your API include a random token in a custom
header, such as X-CSRF-Token, along with the session cookie. A common approach is to
store this extra random token as a second cookie in the browser and require that it be
sent as both a cookie and as an X-CSRF-Token header on each request. This second
cookie is not marked HttpOnly, so that it can be read from JavaScript (but only from
the same origin). This approach is known as a double-submit cookie, as the cookie is sub-
mitted to the server twice. The server then checks that the two values are equal as
shown in figure 4.11.
DEFINITION
A double-submit cookie is a cookie that must also be sent as a custom
header on every request. As cross-origin scripts are not able to read the value
of the cookie, they cannot create the custom header value, so this is an effec-
tive defense against CSRF attacks.
This traditional solution has some problems, because although it is not possible to
read the value of the second cookie from another origin, there are several ways that
the cookie could be overwritten by the attacker with a known value, which would then
let them forge requests. For example, if the attacker compromises a sub-domain of
your site, they may be able to overwrite the cookie. The __Host- cookie name prefix
discussed in section 4.3.2 can help protect against these attacks in modern browsers by
preventing a sub-domain from overwriting the cookie.
 A more robust solution to these problems is to make the second token be cryp-
tographically bound to the real session cookie.
DEFINITION
An object is cryptographically bound to another object if there is an
association between them that is infeasible to spoof. 
Rather than generating a second random cookie, you will run the original session
cookie through a cryptographically secure hash function to generate the second token. This
ensures that any attempt to change either the anti-CSRF token or the session cookie will
be detected because the hash of the session cookie will no longer match the token.
Because the attacker cannot read the session cookie, they are unable to compute the
correct hash value. Figure 4.12 shows the updated double-submit cookie pattern. Unlike
the password hashes used in chapter 3, the input to the hash function is an unguessable
string with high entropy. You therefore don’t need to worry about slowing the hash
function down because an attacker has no chance of trying all possible session tokens.
DEFINITION
A hash function takes an arbitrarily sized input and produces a
fixed-size output. A hash function is cryptographically secure if it is infeasible to
work out what input produced a given output without trying all possible
inputs (known as preimage resistance), or to find two distinct inputs that pro-
duce the same output (collision resistance). 
131
Preventing Cross-Site Request Forgery attacks
API
server
Web browser
Login
Response
Cookie
API
server
Web browser
API request
Cookie
Cookie
X-CSRF-Token=abc...
API
server
Web browser
API request
Cookie
Cookie
X-CSRF-Token=??
Malicious site
1. When the user logs in, the
server generates a random
CSRF-Token.
2. The API returns the CSRF
token in a second cookie
without HttpOnly.
4. If the X-CSRF-Token header
matches the cookie, then
the request is allowed.
5. A malicious site is unable to read
or guess the CSRF cookie, so the
request is blocked.
Legitimate
client
Legitimate
client
Malicious
client
Set-Cookie: csrfToken=abc...
Cookie
Cookie
The browser stores the
CSRF cookie alongside
the session cookie.
Cookie
Cookie
Cookie
3. The client extracts the
csrfCookie and sends
it as another header.
Web browser
Malicious
client
Cookie
Cookie
In some cases, the malicious
client can overwrite the CSRF
cookie with a known value . . .
API
server
API request
X-CSRF-Token=xyz...
xyz...
Cookie
Cookie
. . . letting it make
CSRF requests again.
Figure 4.11
In the double-submit cookie pattern, the server avoids storing a second token 
by setting it as a second cookie on the client. When the legitimate client makes a request, 
it reads the CSRF cookie value (which cannot be marked HttpOnly) and sends it as an 
additional header. The server checks that the CSRF cookie matches the header. A malicious 
client on another origin is not able to read the CSRF cookie and so cannot make requests. 
But if the attacker compromises a sub-domain, they can overwrite the CSRF cookie with a 
known value.
132
CHAPTER 4
Session cookie authentication
The security of this scheme depends on the security of the hash function. If the
attacker can easily guess the output of the hash function without knowing the input,
then they can guess the value of the CSRF cookie. For example, if the hash function
only produced a 1-byte output, then the attacker could just try each of the 256 possi-
ble values. Because the CSRF cookie will be accessible to JavaScript and might be acci-
dentally sent over insecure channels, while the session cookie isn’t, the hash function
should also make sure that an attacker isn’t able to reverse the hash function to dis-
cover the session cookie value if the CSRF token value accidentally leaks. In this section,
API
server
Web browser
Login
Response
Cookie
API
server
Web browser
API request
Cookie
Cookie
X-CSRF-Token=abc...
1. When the user logs in, the
server computes a CSRF
token as the SHA-256
hash of the session cookie.
2. The API returns the CSRF
token as a second cookie.
4. If the X-CSRF-Token header
matches the SHA-256 hash
of the session cookie, then
the request is allowed.
Legitimate
client
Legitimate
client
3. The client sends the
CSRF hash in a custom
header with each request.
Web browser
Cookie
Cookie
If a malicious client tries to
overwrite the CSRF cookie,
the hash will no longer match . . .
API
server