-   将区的目标设置为 `DROP`{.literal}:
    ``` literallayout
    # firewall-cmd --permanent --set-target=DROP
    ```
:::
现在，除您明确允许的流量外，所有流量（包括 `ICMP`{.literal}
请求）将被丢弃。
阻塞或丢弃特定的 `ICMP`{.literal} 请求，并允许其他请求：
::: orderedlist
1.  将区的目标设置为 `DROP`{.literal}:
    ``` literallayout
    # firewall-cmd --permanent --set-target=DROP
    ```
2.  添加 ICMP 块 inversion 以阻止所有 `ICMP`{.literal} 请求：
    ``` literallayout
    # firewall-cmd --add-icmp-block-inversion
    ```
3.  为您要允许的 `ICMP`{.literal} 请求添加 ICMP 块：
    ``` literallayout
    # firewall-cmd --add-icmp-block=
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
[*block inversion*]{.emphasis} 会颠倒 `ICMP`{.literal}
请求块的设置，因此所有之前没有被阻断的请求都会因为区的目标更改为
`DROP`{.literal}
而被阻断。被阻断的请求不会被阻断。这意味着，如果您想要取消阻塞请求，则必须使用
blocking 命令。
将块 inversion 恢复到完全 permissive 设置：
::: orderedlist
1.  将区的目标设置为 `default`{.literal} 或 `ACCEPT`{.literal}：
    ``` literallayout
    # firewall-cmd --permanent --set-target=default
    ```
2.  删除 `ICMP`{.literal} 请求的所有添加的块：
    ``` literallayout
    # firewall-cmd --remove-icmp-block=
    ```
3.  删除 `ICMP`{.literal} 块 inversion:
    ``` literallayout
    # firewall-cmd --remove-icmp-block-inversion
    ```
4.  使新设置具有持久性：
    ``` literallayout
    # firewall-cmd --runtime-to-permanent
    ```
:::
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-the-icmp-filter-using-gui_managing-icmp-requests}使用 GUI 配置 ICMP 过滤器 {.title}
:::
::: itemizedlist
-   要启用或禁用 `ICMP`{.literal}
    [**过滤器，启动[firewall-config]{.application}**]{.strong}
    工具并选择过滤消息的网络区。选择 `ICMP Filter`{.literal}
    标签并选择您要过滤的每种 `ICMP`{.literal}
    消息类型的复选框。清除复选框以禁用过滤器。这个设置按方向设置，默认允许所有操作。
-   要编辑 `ICMP`{.literal} 类型，启动
    [**[firewall-config]{.application}**]{.strong} 工具并在标记为
    `Configuration`{.literal} 的菜单中选择 `Permanent`{.literal}
    模式。在 [Services]{.guibutton} 窗口的底部会显示附加图标。选择
    [Yes]{.guibutton} 启用伪装并转发到另一台机器工作。
-   要启用反向 `ICMP Filter`{.literal}，请点击右侧的
    `Invert Filter`{.literal} 复选框。现在只接受标记的 `ICMP`{.literal}
    类型，所有其他都被拒绝。在使用 DROP 目标的区域里它们会被丢弃。
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#setting-and-controlling-ip-sets-using-firewalld_using-and-configuring-firewalld}使用 `firewalld`{.literal} {.title}
:::
要查看 `firewalld`{.literal} 支持的 IP 集合类型列表，以 root
用户身份输入以下命令。
``` screen
~]# firewall-cmd --get-ipset-types
hash:ip hash:ip,mark hash:ip,port hash:ip,port,ip hash:ip,port,net hash:mac hash:net hash:net,iface hash:net,net hash:net,port hash:net,port,net
```
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-ip-set-options-using-cli_setting-and-controlling-ip-sets-using-firewalld}使用 CLI 配置 IP 设置选项 {.title}
:::
IP 集可以在 `firewalld`{.literal}
区域中用作源，也可以用作丰富的规则源。在 Red Hat Enterprise Linux
中，首选的方法是使用在直接规则 `firewalld`{.literal} 中创建的 IP 集合。
::: itemizedlist
-   要列出永久环境中 `firewalld`{.literal} 已知的 IP 集，请使用以下命令
    `root`{.literal}：
    ``` literallayout
    # firewall-cmd --permanent --get-ipsets
    ```
-   要添加新 IP 集，以 `root`{.literal} 身份运行以下命令：
    ``` literallayout
    # firewall-cmd --permanent --new-ipset=test --type=hash:net
    success
    ```
    以上命令为 `IPv4`{.literal} 创建了名称为 [*test*]{.emphasis} 类型为
    `hash:net`{.literal} 的新 IP 设置。要创建用于 `IPv6`{.literal} 的 IP
    集，添加 `--option=family=inet6`{.literal}
    选项。要使新设置在运行时环境中有效，请重新载入
    `firewalld`{.literal}。
-   使用以下命令列出新 IP 设置：`root`{.literal}
    ``` screen
    # firewall-cmd --permanent --get-ipsets
    test
    ```
-   要获得有关 IP 集的更多信息，以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --info-ipset=test
    test
    type: hash:net
    options:
    entries:
    ```
    请注意，IP 集目前没有任何条目。
-   要在 [*test*]{.emphasis} IP 集中添加一个项，以 `root`{.literal}
    身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --add-entry=192.168.0.1
    success
    ```
    前面的命令将 IP 地址 [*192.168.0.1*]{.emphasis} 添加到 IP 集合中。
-   要获取 IP 集合中当前条目列表，以 `root`{.literal}
    用户身份运行以下命令：
    ``` screen
    # firewall-cmd --permanent --ipset=test --get-entries
    192.168.0.1
    ```
-   生成包含 IP 地址列表的文件，例如：
    ``` screen
    # cat > iplist.txt 
# []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#prioritizing-rich-rules_using-and-configuring-firewalld}丰富规则的优先级 {.title}
:::
默认情况下，会根据其规则操作对富规则进行组织。例如： `deny`{.literal}
规则优先于 `allow`{.literal} 规则。`priority`{.literal}
参数丰富的规则可让管理员对丰富的规则及其执行顺序进行精细的控制。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#how-the-priority-parameter-organizes-rules-into-different-chains_prioritizing-rich-rules}priority 参数如何将规则组织为不同的链 {.title}
:::
您可以将 `priority`{.literal} 参数设置为在 `-32768`{.literal} 和
`32767`{.literal} 之间的任意数量，较低值具有更高的优先级。
`firewalld`{.literal} 服务根据优先级值在不同的链中组织规则：
::: itemizedlist
-   优先级低于 0：规则被重定向到带有 `_pre`{.literal} 后缀的链中。
-   优先级高于 0：规则被重定向到使用 `_post`{.literal} 后缀的链中。
-   优先级等于 0：基于操作，规则会被重定向到带有
    `_log`{.literal}、`_deny`{.literal} 或 `_allow`{.literal}
    操作的链中。
:::
在这些子链中，`firewalld`{.literal} 会根据其优先级值对规则排序。
:::
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#setting-the-priority-of-a-rich-rule_prioritizing-rich-rules}设置丰富的规则的优先级 {.title}
:::
以下流程介绍了一个示例，它创建了一个丰富的规则，它使用
`priority`{.literal}
参数记录被他规则不允许或拒绝的所有流量。您可以使用此规则标记意非预期的流量。
::: orderedlist
**流程**
1.  添加一个带有非常低优先级的丰富规则来记录未由其他规则匹配的所有流量：
    ``` literallayout
    # firewall-cmd --add-rich-rule='rule priority=32767 log prefix="UNEXPECTED: " limit value="5/m"'
    ```
    这个命令还会将日志条目数限制为每分钟 `5`{.literal} 个。
2.  另外，显示上一步中命令创建的 `nftables`{.literal} 规则：
    ``` literallayout
    # nft list chain inet firewalld filter_IN_public_post
    table inet firewalld {
      chain filter_IN_public_post {
        log prefix "UNEXPECTED: " limit rate 5/minute
      }
    }
    ```
:::
:::
:::
::: section
::: titlepage
# []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-firewall-lockdown_using-and-configuring-firewalld}配置防火墙锁定 {.title}
:::
如果本地应用程序或服务是作为 `root`{.literal} 运行的，（例如：
[**[libvirt]{.application}**]{.strong}），则可以更改防火墙配置。使用这个特性，管理员可以锁定防火墙配置，从而达到没有应用程序或只有添加到锁定白名单中的应用程序可以请求防火墙更改的目的。锁定设置默认会被禁用。如果启用，用户就可以确定，防火墙没有被本地的应用程序或服务进行了不必要的配置更改。
::: section
::: titlepage
## []{#using-and-configuring-firewalld_configuring-and-managing-networking.html#configuring-lockdown-using-CLI_configuring-firewall-lockdown}使用 CLI 配置锁定 {.title}
:::
这个步骤描述了如何使用命令行启用或禁用锁定。
::: itemizedlist
-   要查询是否启用锁定，以 `root`{.literal} 身份运行以下命令：
    ``` literallayout
    # firewall-cmd --query-lockdown
    ```
    如果启用了锁定，该命令会输出 `yes`{.literal}，退出状态为