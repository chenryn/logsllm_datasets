To increase the effectiveness of fuzzing, the generated packets
should not be rejected by the target device.
To this end, we decided not to mutate ﬁelds that can easily
be checked for anomalies. In particular, we segmented an
L2CAP packet format into parts to be mutated (i.e., mutable
ﬁelds) and parts to be maintained by referring to VFUZZ [24].
Field classiﬁcation. Let L be the L2CAP packet. We
segment L into ﬁxed (F ), dependent (D), and mutable (M)
ﬁelds as follows:
L = F ∪ D ∪ M
D
F
D
D
D
L2CAP(L) :
PAYLOAD LEN HEADER CID CODE ID DATA LEN
M
DATA
PSM
SCID
MC
DCID
ICID
CONT ID
L2Fuzz mutates these fields.
CIDP
REASON RESULT
LATENCY
INTERVAL
CREDIT
MPS
MA
STATUS
TIMEOUT
OPT
FLAGS
SPSM
QoS
TYPE
MTU
DATA field candidates
Fig. 6: Field classiﬁcation for Bluetooth 5.2 L2CAP packet frame.
• F is a set of ﬁxed ﬁelds. The values are ﬁxed.
• D is a set of dependent ﬁelds. This values are determined
• M is a set of mutable ﬁelds. The values are determined
by other values.
by devices or users.
We further classiﬁed M into mutable core ﬁelds (MC) and
mutable application ﬁelds (MA) to distinguish only core ﬁelds
that can affect the core functions of the L2CAP:
M = MC ∪ MA
• MC is a set of mutable core ﬁelds. The values determine
the port and channel for Bluetooth network.
• MA is a set of mutable application ﬁelds. The values vary
depending on commands and convey data to the target.
Consequently, an L2CAP packet L can be conceptually
segmented as follows: L = F ∪ D ∪ MC ∪ MA. Based on this
concept, we classiﬁed each ﬁeld of the Bluetooth 5.2 L2CAP
frame structure (see Figure 6) as follows.
• F = {HEADER CID}.
* This ﬁeld is ﬁxed because 0x0001 is used to
manage the channel over the ACL-U logical links.
• D = {PAYLOAD LEN, CODE, ID, DATA LEN}.
* PAYLOAD LEN is determined by the length of the
information payload (CODE, ID, DATA LEN, and
DATA), CODE is determined by the valid command
code (i.e., determined in the state guiding phase), ID
is dynamically assigned by the device, and DATA
LEN is determined by the length of DATA.
• MC = {PSM, SCID, DCID, ICID, CONT ID}.
* PSM is used for port settings. SCID, DCID, ICID,
and CONT ID are responsible for setting the channel
endpoint, and are also referred to as “Channel ID in
Payload (CIDP)” in this paper.
• MA = {REASON, RESULT, STATUS, FLAGS, TYPE,
INTERVAL, LATENCY, TIMEOUT, SPSM, MTU,
CREDIT, MPS, OPT, QoS}.
* Each value contains application data for commands,
and is intended to deliver data without affecting port
or channel management.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
347
TABLE IV: Range of MC that can be used as malicious data.
Fields (MC)
PSM
CIDP
0100 - 01FF
0700 - 07FF
0D00 - 0DFF
0040 - FFFF
Range (Hex)
0300 - 03FF
0900 - 09FF
All even values
0500 - 05FF
0B00 - 0BFF
Packet mutation. To minimize packet rejection by the
target device, L2FUZZ mutates only the MC ﬁeld.
L2FUZZ does not mutate F and D to avoid possible
packet rejection. If the target device receives a packet with
F or D mutated, it will send a reject command response for
“Command not understood”. Furthermore, L2FUZZ maintains
MA with its default values. This ﬁeld is optional, thus, does
not have a signiﬁcant effect on the target device. Additionally,
some of the ﬁelds can have up to 65,535 bytes of data,
requiring a large amount of time to test various cases. Thus,
L2FUZZ leaves these ﬁelds as default values.
In contrast, L2FUZZ mutates MC to generate various mal-
formed packets. Speciﬁcally, different approaches are used for
PSM and CIDP in the MC ﬁeld. Regarding PSM (i.e., port
number), its normal range is deﬁned in the Bluetooth speciﬁca-
tion document, and each device supports service ports within
this range. Notably, the normal range has already been tested
when scanning ports in the target scanning phase. Therefore,
L2FUZZ considers values belonging to their abnormal range
(see Table IV) and proceeds with a packet mutation. Next,
in the case of CIDP (i.e., SCID, DCID, ICID, and CONT
ID), the value is dynamically assigned by the device during
normal communication within the available range. If the target
device receives an abnormal CIDP value, it sends a command
rejection response for the reason “Invalid CID in request”
Therefore, we decided to consider the normal range of CIDP
(see Table IV) while ignoring dynamic allocation because,
although the value is contained in the normal range, it can
cause unexpected behavior on the target device due to ignoring
dynamic allocation and putting different values.
Finally, L2FUZZ appends a garbage value to the tail of
the packet, which increases the possibility of vulnerability
detection when the packet is not rejected but parsed by the
target device. Here, we considered garbage values that do
not exceed the MTU size; if the garbage value exceeds the
MTU size, the target device rejects the packet with the reason
“Signaling MTU exceeded.”
Figure 7 shows an example of mutating an L2CAP Conﬁg
Req packet. L2FUZZ forcibly mutates the dynamically allo-
cated DCID value (i.e., “40 00”) into “8F 7B”, and adds a
garbage value (i.e., “D2 3A 91 0E”) to the tail of the packet
to generate a malformed packet.
Malformed packets generated in this manner are less likely
to be rejected by the target device; thus, Bluetooth vulnera-
bilities can be detected more effectively than dumb mutation,
which simply changes any or all ﬁelds of an L2CAP packet.
The generated malformed packets are transmitted to the target
device through the packet queue. The high-level algorithm of
this phase is explained in Algorithm 1.
D
F
D
H-CID
P-LEN
0C 00     01 00     04     06     08 00     40 00     00 20     01 02 00 04
CODE
D
D
ID DATA LEN
MC
DCID
MA
FLAGS
MA
MTU
0C 00     01 00     04     06     08 00     8F 7B
Mutating
No mutating
00 00     00 00 00 00     D2 3A 91 0E
Garbage Value
Default Value
Fig. 7: Example of mutating L2CAP Conﬁg Req packet.
Algorithm 1 Algorithm for core ﬁeld mutating
Input: C
Output: pkt
// Malformed packets to be stored in PACKETQUEUE
// Valid commands (e.g., Connect Req)
// n: the number of malformed packets to generate
for i in range (0, len(C)) do
// ith command
pkt ← format(commands[i])
// Fields: F , D, MC, and MA
pkt.F ← 0x0001
pkt.D ← default // Used without changes
if (pkt.MC) then
if pkt.MC.P SM then
pkt.MC.P SM ← random(abnormal)
end if
if pkt.MC.CIDP then
pkt.MT .CIDP ← random(normal)
end if
for j in range (0, n) do
1: procedure COREFIELDMUTATING(C)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25: end procedure
end if
pkt = pkt.append(garbage)
PACKETQUEUE.append(pkt)
pkt.MA ← default
// Used without changes
end if
if pkt.MA then
end for
end for
E. Vulnerability detecting
Finally, L2FUZZ detects the L2CAP vulnerabilities in the
target device. To this end, L2FUZZ checks (1) whether the
packet received at the target device contains an error message,
(2) whether the ping test was successfully performed, and (3)
whether a crash dump was generated.
Because L2CAP is concerned with port and channel set-
tings, if a vulnerability is found, we receive an error message
related to the Bluetooth connection, which can be one of
the following: Connection Failed, Connection Aborted, Con-
nection Reset, Connection Refused, and Timeout. Of these,
the Connection Failed error means that the target Bluetooth
service has been shut down, which can lead to a DoS. The
remaining errors indicate a target device crash and may induce
a crash in the target device.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:19:38 UTC from IEEE Xplore.  Restrictions apply. 
348
TABLE V: Summary of test devices used in the experiments.
No.
D1
D2
D3
D4
D5
D6
D7
D8
Type
Tablet PC
Smartphone
Smartphone
Smartphone
Earphone
Earphone
Laptop
Laptop
Vendor
Google
Google
Samsung
Apple
Apple
Samsung
LG
LG
Name
Nexus 7
Pixel 3
Galaxy 7
iPhone 6S
Airpods 1 gen
Galaxy Buds+
Gram
Gram
Year Model
2013
2018
2016
2015
2016
2020
2019
2017
ASUS-1A005A
GA00464
SM-G930L
A1688
A1523
SM-R175NZKATUR
15ZD990-VX50K
15ZD970-GX55K
Chip
Snapdragon 600
Snapdragon 845
Exynos 8890
A9
W1
BCM43015
Intel wireless BT Windows 10
Intel wireless BT
OS or FW
Android 6.0.1
Android 11.0.1
Android 8.0.0
iOS 15.0.2
6.8.8
R175XXU0AUG1
Ubuntu 18.04.4
BT Stack
BlueDroid
BlueDroid
BlueDroid
iOS stack
RTKit stack
BTW
Windows stack
BlueZ
BT Ver.
4.0 + LE
5.0 + LE
4.2
4.2
4.2
5.0 + LE
5.0
5.0
Thereafter, L2FUZZ conducts a ping test. If the ping test
fails, it is logged as a vulnerability according to the error
message. L2FUZZ further checks whether there are any crash
dumps or abnormalities. Finally, L2FUZZ stores the fuzzing
results in a log ﬁle. When this step is over, the vulnerability
assessment for the target state entered in the second phase
(i.e., state guiding) is ﬁnished. Hence, after this step, L2FUZZ
returns to the second phase, and assess the next L2CAP state.
After evaluating the vulnerabilities for all L2CAP states, the
vulnerability detection process for the target device is ﬁnished,
and L2FUZZ reports all the detected vulnerabilities.
IV. EVALUATION
In this section, we evaluate L2FUZZ. Section IV-A in-
troduces the experimental setup, including the experimental
environment, target devices, and evaluation metrics. Section
IV-B investigates the vulnerability detection results of L2FUZZ
on real-world Bluetooth devices. We then compare L2FUZZ
with existing Bluetooth fuzzing techniques using the two
metrics, mutation efﬁciency (Section IV-C) and state coverage
(Section IV-D), to demonstrate the effectiveness of L2FUZZ.
Finally, Section IV-E introduces a case study of the denial of
service vulnerability detected in Android Bluetooth stack.
A. Experimental setup
Experiment environment. L2FUZZ was implemented in
approximately 1,200 lines of Python code, excluding external
libraries. In particular, we used the Scapy library (v2.4.4), an
interactive packet manipulation program for mutating packets.
We ran L2FUZZ on a virtual machine with Ubuntu 18.04.4
LTS, 8GB memory, Intel Core i5-7500 CPU @ 3.40GHz × 4,
50GB Disk and Billionton Bluetooth Class 1 dongle.
Target devices. We selected eight real-world test devices
that can represent
the general-purpose Bluetooth protocol
stacks [25], including BlueZ (Linux), BlueDroid (Android),
Apple BT stack, and Windows BT stack. Table V summarizes
the target devices used in the experiments.
Baseline fuzzers for comparison. When evaluating the
effectiveness of L2FUZZ, we compared the results of L2FUZZ
with those of Defensics [2], BFuzz [3], and BSS [4]; other