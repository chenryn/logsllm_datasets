a small portion of the bits does not reveal signiﬁcant information
about P2’s input. Formally, the encoding can be carried out using a
Boolean matrix E that is s-probe-resistant, as deﬁned below.
DEFINITION 2.1
(BASED ON [20, 30]). Matrix E ∈{0,1}l×n
for some l,n ∈ N is called s-probe-resistant for some s ∈ N if for
i∈L Ei is at least
any L ⊂ {1,2, . . . ,l}, the Hamming distance of(cid:76)
s, where Ei denotes the i-th row of E.
Such a matrix E can be constructed with n = max(4l, 20s
3 ), as
shown in [20]. A different construction with n ≤ lg(l) + l + s +
s · max(lg(4l),lg(4s)) was presented in [30]. We note that both
constructions can result in a matrix E for which there exists a vector
y that for all vectors y(cid:48), Ey(cid:48) (cid:54)= y (meaning that some input cannot be
encoded). We therefore take E to be [E(cid:48)|Il] ∈ {0,1}l×(n+l), where
E(cid:48) is an s-probe-resistant matrix and Il is the identity matrix of
size l. E is clearly also s-probe-resistant, and now, any vector y
can be encoded using a vector y(cid:48) that has random bits in the ﬁrst n
elements, and “corrections” in the rest of the bits so that Ey(cid:48) = y.
Instead of working with the function f (x,y), the parties work
with the function f (cid:48)(x,y(cid:48)) = f (x,Ey(cid:48)) and P2 chooses a random y(cid:48)
such that y = Ey(cid:48) (this ensures that f (cid:48)(x,y(cid:48)) = f (x,y)). As long as
E is s-probe-resistant, even if P1 learns s(cid:48)  m.) A potentially adversarial
P1 (who we will denote by Adv) prepares M balls and sends them
to P2. Then, party P2 chooses at random a subset of the balls of size
M − m; these balls are checked by P2 and if one of them is cracked
then P2 aborts. Denote the balls that are not checked by 1, . . . ,m.
Then, P2 chooses a random mapping function π : [m] → [N] that
places the unchecked balls in buckets of size B.
In [23], bounds were shown on the probabilities that P2 does not
abort and (1) there exists a fully-cracked bucket (i.e., all balls in
some bucket are cracked), or (2) there exists a majority-cracked
bucket (i.e., at least B/2 balls in some bucket are cracked).
When considering composition of protocols (as done in [23]), in-
deed the overall cheating probability is the natural soundness one
should work with. However, we believe that is it more natural to
focus on the cheating probability in a single 2PC execution (espe-
cially, since this enables a direct comparison to single-execution
implementations). We will therefore be interested in the probabili-
ties that P2 does not abort and some speciﬁc bucket is fully cracked,
or, that some speciﬁc bucket is majority-cracked.
In addition to the bounds shown in [23], a few concrete exam-
ples are presented there to exemplify that those bounds are not
581tight. Since we mostly care here about concrete efﬁciency, we im-
plemented a program that ﬁnds the parameters analytically, based
on the following tighter approximations that are derived from the
analysis of [23]; see Table 1 for results.
LEMMA 2.2. Let N,B, p,M be parameters as described above.
The probability that a bucket is fully-cracked is at most
LEMMA 2.3. Let N,B, p,M parameters as described above. The
probability that a bucket is majority-cracked is at most
(cid:19)(cid:18)NB
(cid:19)−1(cid:35)NB
.
t=B
B
B
NB
NB−t
(cid:18) t
(cid:34)(cid:0) M−t
(cid:1)
(cid:1) ·
(cid:0) M
(cid:34)(cid:0) M−t
(cid:1)
(cid:1) · 2B−1(cid:16) t
(cid:0) M
NB−t
NB
NB
(cid:17)(cid:100)B/2(cid:101)(cid:35)NB
.
t=B
max
max
3. COMMITMENT WITH ZK PROOF OF
DIFFERENCE
The aim of this section is to construct a commitment scheme with
an efﬁcient zero-knowledge proof of difference; we will show later
how it is used to prove P1’s input consistency. Given commit(x1)
and commit(x2) and ∆ = x1⊕x2, the aim is to efﬁciently prove that
the XOR of the decommitments is indeed ∆. Formally, one party
inputs (x1,x2), and the other party chooses to either learn x1 ⊕ x2
or the pair (x1,x2) itself. (Thus, the ﬁrst party is committed to the
pair, and must either decommit or prove their difference, depending
on P2’s choice.) Our constructions are based on ideas of [28].
We start by describing a basic functionality (presented in Fig-
ure 3.1), prove its correctness, and then describe how to extend
it to work with many commitments so we can use it for input-
consistency checks. The detailed extended protocol appears in the
full version.
FIGURE 3.1
(FUCTIONALITY FCom∆ZK).
FCom∆ZK runs with parties P1 and P2, as follows:
Input: FCom∆ZK receives a pair of messages (x1,x2) from P1, and
a bit b from P2.
Output: FCom∆ZK sends ∆ = x1 ⊕ x2 to P2 if b = 0, and sends
(x1,x2) to P2 if b = 1. In addition, FCom∆ZK sends b to P1.
The Simple Commit-and-Difference Proof Functionality
3.1 A Warm-Up – Only Two Messages
In this section, we show how to securely realize the functionality
from Figure 3.1. The idea behind the construction is as follows.
We deﬁne a split commitment of a value x to be a pair of commit-
ments to random values [commit(x⊕ r), commit(r)] whose XOR
equals x. Party P1 sends P2 a set of s split commitments to x1 and s
split commitments to x2. If P2 asks to decommit (i.e., b = 1) then
P1 simply decommits using the standard (canonical) decommiment
and P2 checks that the XORs in all split commitments to a value
In contrast, if b = 0, then P1 sends P2 the XORs
are the same.
of the split commitment values. Speciﬁcally, let [commit(x1 ⊕
ri), commit(ri)] and [commit(x2 ⊕ρi), commit(ρi)] be the ith split
i = x1 ⊕
commitment of x1 and x2, respectively. Then, P1 sends δ 0
ri ⊕ x2 ⊕ ρi and δ 1
i = ri ⊕ ρi to P2, for every i = 1, . . .s, as well
as ∆ = x1 ⊕ x2. Observe that for every i it holds that δ 0
i ⊕ δ 1
i =
x1 ⊕ x2 = ∆, and so P2 checks that for every i it indeed holds that
i ⊕ δ 1
δ 0
i = ∆. Then, given these values, P2 sends a random s-bit
“challenge string” W to P1, indicating to P1 which value in each
split commitment to open. Letting W = W1, . . . ,Ws, party P1 de-
commits to both left commitments in the ith split commitments of
x1 and x2 if Wi = 0; otherwise it decommits to both right commit-
ments in the ith split commitments of x1 and x2. Observe that if
Wi = 0 then P2 receives x1⊕ri and x2⊕ρi and so can verify that δ 0
i
was correctly constructed. In contrast, if Wi = 1 then P2 receives ri
and ρi and so can check that δ 1
i was correctly constructed. Thus, if
x1 ⊕ x2 (cid:54)= δ , then P1 must cheat on at least one side of every split
commitment, and so will be caught with probability 1− 2−s. Ob-
serve that this check is very simple and very efﬁcient; when using a
hash function to commit it requires 2s hash computations only per
value.
Despite its simplicity, we remark that in order to simulate this
protocol (in the sense of securely computing FCom∆ZK in the ideal/
real model paradigm), we need to have P2 commit to its challenges
b and W before the protocol begins. If an extractable commitment
is used, then the simulator can learn the challenges ahead of time
and therefore “cheat”. Fortunately, this comes at very little over-
head, as can be seen in the full protocol. See Figure 3.2 for the
detailed protocol.
Proving consistency. Before proceeding to prove security, we ex-
plain how this functionality can be used to force P1 to use the same
input in two different garbled circuits. The values x1,x2 are the sig-
nal bits over all of P1’s input wires in the ﬁrst and second garbled
circuits, respectively. (Recall that the signal bit determines whether
the keys on the wire are given in the “correct” order or reversed or-
der. In some works this value is also called the permutation bit.)
Now, P1 provides (standard) commitments to the garbled values on
these input wires (this is standard in all cut-and-choose protocols);
we call them wire-commitments. However, P1 provides the wire-
commitments in the order determined by the signal bit. Now, when
two circuits are opened to be checked, then P2 provides input b = 1
to FCom∆ZK, and so all values are decommitted. This enables P2
to check that the split commitment was constructed correctly and
that the wire-commitments were indeed given in the correct order,
according to the signal bits. In contrast, when two circuits are to
be evaluated, then P2 provides input b = 0 to FCom∆ZK. As a re-
sult, P2 will receive the XOR of the signal bits in the two circuits.
Thus, if the XOR equals 0, then P2 knows that P1 must either de-
commit to the ﬁrst wire-commitment in both circuits or decommit
to the second wire-commitment in both circuits. (Since P2 knows
that the signal bit is the same in both cases – without knowing its
value – this ensures that the same input bit is used by P1 in both.)
In contrast, if the XOR equals 1, then P2 knows that P1 must ei-
ther decommit to the ﬁrst wire-commitment in the ﬁrst circuit and
the second wire-commitment in the second circuit, or vice versa.
(Once again, since P2 knows that the signal bit is different in both
cases, this ensures that the same input bit is used by P1 in both.)
3.1.1 Proof of Security
Let x ∈ {0,1}n. Denote c ∈ SC(x) if there exists randomness
so that c = SC(x); otherwise denote c /∈ SC(x). Denote SC =
{c | ∃x : c = SC(x)}; i.e., the set of all valid commitments. De-
note by commit2s the set of all series c of 2s commitments (thus
SC ⊂ commit2s). We will be interested in commitments c ∈ SC
versus commitments c ∈ commit2s \SC. Note that since commit
is perfectly binding, these sets are well deﬁned.
In the full version, we prove that the proof in Protocol 3.2 (for
b = 0) is an interactive proof for the promise problem (P,Q), where
(cid:110)
(cid:111)
(cid:110)
(c,d,∆) | ∃x1,x2 s.t. c ∈ SC(x1)∧ d ∈ SC(x2)
P =
(c,d,∆) | ∃x1,x2 s.t. c ∈ SC(x1)∧ d ∈ SC(x2)∧ x1 ⊕ x2 = ∆
The promise problem (P,Q) considers the question of whether an
input (c,d,∆) ∈ Q, under the promise that (c,d,∆) ∈ P. In words,
and
Q =
,
(cid:111)
.
582FIGURE 3.2
(TWO COMMITMENTS WITH PROOF OF DIFFERENCE).
Inputs: P1 has a pair (x1,x2) and P2 has a bit b.
Commit to Challenge: P2 chooses a random W ∈ {0,1}s. Then, P1 and P2 run a perfectly (or statistically) hiding extractable commitment
scheme ExtractCom, in which P2 commits to b and W . (A Pedersen commitment with a zero-knowledge proof of knowledge of the committed
value sufﬁces, or a simple hash with a random string in the random oracle model.)
Commit to x1,x2: Deﬁne the split commitment SCom(xk,r) = [commit(x⊕ r), commit(r)]. Then:
i ,d1
i
1. For i = 1, . . . ,s, P1 chooses ri,ρi ← {0,1}n and computes(cid:2)c0
(cid:3) = SCom(x1,ri) and(cid:2)d0
(cid:3) = SCom(x2,ρi).
i ,c1
i
2. Denote c1 = SC(x1) = (cid:104)SCom(x1,r1), . . . , SCom(x1,rs)(cid:105) and c2 = SC(x2) = (cid:104)SCom(x2,ρ1), . . . , SCom(x2,ρs)(cid:105).
P1 sends (commit,c1,c2) to P2.
Decommit to b: P2 decommits to the value b. (At the end of the protocol, P1 outputs b.)
If b = 1, P1 decommits to x1,x2: P1 sends x1,x2 and all of the randomness used to generate the commitments c1,c2. P2 veriﬁes that all
commitments were correctly constructed, and if yes it outputs (x1,x2).
If b = 0, P1 provides a proof of difference:
1. For every i = 1, . . . ,s, party P1 deﬁnes δ 0
2. P1 sends(cid:8)(δ 0
i )(cid:9)s
i ,δ 1
i = x1 ⊕ ri ⊕ x2 ⊕ ρi and δ 1
i = ri ⊕ ρi (note that δ 0