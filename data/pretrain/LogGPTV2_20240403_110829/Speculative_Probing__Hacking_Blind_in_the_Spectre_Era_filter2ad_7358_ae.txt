that explicitly seek to prevent speculative control-flow hijacking:
Retpoline, IBPB, IBRS and STIBP. For this purpose, we create a
kernel module with an indirect branch guarded by a conditional
branch, both controlled by mock heap objects (see Listing 4).
For each test, we create two objects of the same type, each point-
ing to a different function through its fp pointer. When called, these
functions leave a unique and easily measurable fingerprint in the
cache. In the first object, fp_enabled is set to 1 to train the branch
predictor towards calling fp on line 5. In the second it is set to 0,
so that the indirect branch is only reached speculatively—which is
facilitated by the clflush and mfence operations. We use the first
(training) object five times, followed by one run with the second.
For the experiment, we perform 1,000 iterations per configu-
ration, where each iteration consists of 10,000 tests as described
above. After each test, we probe the cache for hits that reveal which
function, if any, was speculatively executed. In each configuration,
we apply mitigations individually, with and without flushing the ob-
ject’s function pointer—to verify that the mitigations work correctly
by nudging speculative execution towards the training function.
Finally, we include a test with two threads, where each thread con-
tinuously uses one of the objects. This aims to test whether IBRS
and STIBP prevent indirect branch-target poisoning across logical
CPU cores. Table 1 shows our results.
As expected, the results show that the mitigations prevent specu-
lative execution of the training function, with (close to) 0% success
rates for all mitigations. However, the CPU did speculatively ex-
ecute the indirect branch and its target function in many cases,
reaching (close to) 100% success rates across all mitigations.
Flush
FP
Target Function
Success (Avg. Hits)
Training Function
Success (Avg. Hits)
Defense
None
Retpoline
IBPB
None
IBRS
STIBP
43.3% (0.88)
100.0% (9999.96)
0.0% (0.00)
0.0% (0.00)
0.0% (0.00)
0.0% (0.00)
Single Thread Executions:
100.0% (9999.93)
100.0% (208.37)
100.0% (9990.92)
100.0% (164.71)
100.0% (9999.62)
100.0% (292.32)
No
Yes
No
Yes
No
Yes
Two Co-located Thread Executions:
No
Yes
No
Yes
No
Yes
99.8% (21.91)
31.6% (0.88)
99.3% (35.26)
18.9% (19.28)
99.7% (38.09)
19.1% (13.03)
62.3% (0.76)
100.0% (21.06)
0.2% (0.00)
0.1% (0.00)
0.0% (0.00)
0.0% (0.00)
Table 1: BlindSide’s speculative probing vs. mitigations. Suc-
cess rate indicates the percentage of iterations in which the
function pointed to by FP executed speculatively. Avg. Hits
indicates the average of total hits in all iterations.
In addition to the Intel Whiskey Lake CPU in our evaluation,
we confirmed similar results on Intel Xeon E3-1505M v5, Xeon
E3-1270 v6 and Core i9-9900K CPUs, based on the Skylake, Kaby
Lake and Coffee Lake microarchitectures, respectively, as well as on
AMD Ryzen 7 2700X and Ryzen 7 3700X CPUs1, which are based
on the Zen+ and Zen2 microarchitectures. Overall, our results con-
firm speculative probing is effective on a modern Linux system on
different microarchitectures, hardened with the latest mitigations.
7.2 Availability of Indirect Branches
For indirect branches to be exploitable by speculative probing, we
need them to be relatively close to the nearest conditional branch
that controls their execution. Furthermore, the closer the indirect
branch is to the conditional branch, the more cycles from the spec-
ulation window are available for the instructions executed specula-
tively at the target of the indirect branch.
To study the prevalence of exploitable branches, we employed
static analysis with a conservative definition of control-dependent
indirect branches. In particular, we say that an indirect branch
is control-dependent on a conditional branch if one conditional
branch target dominates the indirect branch while the other target
has no path to the indirect branch. For simplicity, our analysis caps
the maximum number of instructions to 50, and while our analysis
is interprocedural and may include multiple calls in a call stack
(e.g., the conditional branch may be in the caller of the function
that contains the indirect branch), we exclude additional call-return
pairs between the conditional branch and the indirect branch.
Figure 2 depicts the results of gathering the shortest distance,
in number of instructions, between each indirect branch in the
kernel and the closest preceding conditional branch on which it
depends. Even with our conservative analysis, we found that 7,929
(more than 50% of the total 15,762) indirect branches are control-
dependent on a nearby conditional branch. The vast majority of the
indirect branches are even very close to a conditional branch. For
1AMD’s retpoline version based on lfence stops speculation altogether and the Blind-
Side signal as well. The signal is still present on AMD when using the standard
(Intel-style) retpoline.
# Dereferences
# Dereferences
Source
Register
RAX
RBX
RCX
RDX
RSI
RDI
RBP
RSP
2
3086
4385
317
682
667
3842
3774
482
3
540
640
35
114
125
844
506
85
4 (Spectre)
1
8
0
1
0
15
14
1
Source
Register
R8
R9
R10
R11
R12
R13
R14
R15
2
96
75
85
36
2070
1278
1166
1114
3
14
11
8
5
344
182
161
149
4 (Spectre)
0
0
0
0
1
1
6
0
Table 2: Number of gadgets with up to 4 chained derefer-
ences, originating from general-purpose registers.
Figure 2: Distance CDF. X-axis: #instructions between indi-
rect branch (IB) and closest preceding conditional jump (CJ)
on which it is dependent. Y-axis: % of indirect branches with
less than given distance.
instance, over 90% are 10 or fewer instructions away from the closest
preceding conditional branch on which they depend and around
75% are as close as 5 or fewer instructions away. These branches
account for over 45% and over 37% of the total number of indirect
branches, respectively. Since a speculation window has the potential
to execute hundreds of CPU cycles, this result confirms that a
large number of indirect branches can indeed be executed within
a speculation window while leaving ample room for speculative
gadget execution.
7.3 Gadgets with Dereferences
For our proof-of-concept exploits, we were only interested in mem-
ory dereferencing gadgets where the registers RBX and RDI are
dereferenced first for attacker-specified values. However, other
exploits may rely on different registers. By means of an interproce-
dural analysis (of paths without call-return pairs), we collected all
gadgets of up to 25 instructions that offered up to 4 chained memory
dereferences originating from any general-purpose register, using
the gadget templates described in earlier sections. Table 2 presents
our results.
Since we searched for gadgets at any offset in the kernel image,
gadgets starting at different offsets could end up at the same (last)
memory dereferencing instruction in the chain of dereferences. For
counting purposes, we considered such gadgets as a single gadget.
As shown in the table, there are numerous gadgets with memory
dereferences in the kernel codebase, with significantly (4.6 to 10.5
times) more gadgets with 2 chained dereference than with 3, as
expected. Furthermore, we observe that the distribution of gadget
frequency per general-purpose register is in line with the System V
AMD64 calling convention [62] used on Intel x86-64.
Gadgets with memory dereferences via callee-saved registers
(i.e., RBX, RBP, and R12-R15) are highly prevalent. As these registers
preserve their values while executing in the function, they are used
for persistent computations. For example, it is common to move
values from function argument registers (i.e., RDI, RSI, RDX, RCX,
R8, and R9) to callee-saved registers in the function’s prologue and
compute on such registers. The scratch register RAX is highly used
in computations, which explains the large number of available gad-
gets. Finally, the first memory dereference of many of the gadgets
with source register RBP happens on the local variable area of the
function’s stack frame. Although numbers for Spectre gadgets are