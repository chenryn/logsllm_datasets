Bytecode Alliance, multiple companies are working together
to build robust Wasm compilation toolchains, a standard
syscall interface, SIMD extensions, etc.
Since our goal is to reap the beneﬁts of these efforts,
we need to minimize the changes to these toolchains. In
particular, this means that we cannot adjust for differences
between the Firefox and Wasm machine model as we did
for NaCl [36]—by intrusively modifying the compiler,
loader, runtime, etc. (§6.2). We, instead, take advantage
of the fact that RLBox intercepts all data and control ﬂow
to automatically translate between the Firefox and Wasm
machine models in the RLBox API.
Our only modiﬁcation to the Lucet Wasm runtime is an opti-
mized trampoline, which we are working on upstreaming [67].
Since Wasm is well-typed and has deterministic seman-
tics, our trampolines safely eliminate the context-and stack-
switching code, reducing the cost of a cross-boundary cross-
ing to a function call. This optimization was key to our ship-
ping the sandboxed libGraphite (§5)—it reduced the overhead
of RLBox by 800%. The details and formalization of these
zero-cost trampolines will be presented in a separate paper.
Meaningful migration error-messages. We re-implement
RLBox in C++ 17 and use new features—in particular if
constexpr—to customize the error messages that guide
developers during migration (§5). Meaningful error messages
(as opposed to a wall of generic, template failures) is key
to making RLBox usable to other developers. Although
implementing custom error messages in our C++ 11 prototype
is possible, it would make the implementation drastically
more complex; C++ 17 allows us to keep the RLBox API
implementation concise (under 3K lines of code) and give
meaningful error messages.
9.2
We use RLBox to isolate the libGraphite font shaping library,
creating a fresh sandbox for each Graphite font instance. We
choose libGraphite largely because the Graphite fonts are not
widely used on the web, but nevertheless Firefox needs to
support it for web compatibility. This means that the library is
part of Firefox attack surface—and thus memory safety bugs
in libGraphite are security vulnerabilities in Firefox [54, 66].
Evaluation To measure the overhead of our sandboxing,
we use a micro-benchmark that measures the page render
time when reﬂowing text in a Graphite font ten times,
adjusting the font size each time, so font caches aren’t used.11
We ﬁnd that Wasm sandboxing imposes a 85% overhead on
the libGraphite code, which in turn slows down Firefox’s font
rendering component (which uses libGraphite internally) by
50%. We attribute this slowdown largely to the nascent Wasm
toolchains, which don’t yet support performance optimization
on par with, say LLVM [21, 23]. Nevertheless, this overhead
Isolating libGraphite
11Available at: https://jfkthame.github.io/test/udhr_urd.html.
is not user-perceptible; in practice page rendering is slowed
down due to the network and heavy media content, not fonts.
To measure memory overhead, we use cgmemtime to
capture the peak resident memory and cache used by Firefox
on the same micro-benchmark. We ﬁnd the memory overhead
to be negligible—the median peak memory overhead when
loading the micro-benchmark ten times is 0.68% (peak
memory use went from 431460 KB to 434426 KB).
Deployment. The rewritten RLBox library as well as the
modiﬁcations to Firefox to use a sandbox libGraphite have
been merged into the Firefox code base [51]. Our retroﬁtted
Firefox successfully tested on both the Firefox Nightly and
Beta channels, and ships in stock Firefox 74 to Linux users
and in Firefox 75 to Mac users [15].
10 Conclusion
Third party libraries are likely to remain a signiﬁcant source of
critical browser vulnerabilities. Our approach to sandboxing
code at the library-renderer interface offers a practical path to
mitigating this threat in Firefox, and other browsers as well.
RLBox shows how a type-driven approach can signiﬁcantly
ease the burden of securely sandboxing libraries in existing
code, through a combination of static information ﬂow
enforcement, dynamic checks, and validations. RLBox is
not dependent on Firefox and is useful as a general purpose
sandboxing framework for other C++ applications.
Acknowledgements
We thank the anonymous reviewers for their insightful feed-
back. We thank our collaborators at Mozilla (especially Bobby
Holley, Jonathan Kew, Eric Rescorla, Tom Ritter, and Ricky
Stewart), Fastly (especially Pat Hickey and Tyler McMullen),
and Tor (especially Georg Koppen) for fruitful discussions
and help integrating RLBox into production. This work was
supported in part by gifts from Cisco, Fastly, and Mozilla, and
by the CONIX Research Center, one of six centers in JUMP,
a Semiconductor Research Corporation (SRC) program spon-
sored by DARPA.
References
[1] B. Anderson, L. Bergstrom, M. Goregaokar, J. Matthews, K. McAllister,
J. Mofﬁtt, and S. Sapin. Engineering the Servo Web browser engine using rust.
In ICS 2016: SEIP. ACM, 2016.
fast HTTP/1.1
[2] autocannon:
benchmarking
tool written
in Node.js.
https://github.com/mcollina/autocannon, 2016.
[3] A. Barth, C. Jackson, C. Reis, and the Google Chrome Team. The security
architecture of the Chromium browser. Technical report, 2008.
[4] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: Splitting applications
into reduced-privilege compartments. In NSDI. USENIX, 2008.
[5] C. Blichmann, R. Swiecki, and ISE Sandboxing team.
Open-sourcing
https://security.googleblog.com/2019/03/
sandboxed
open-sourcing-sandboxed-api.html, 2019.
API.
[6] K. Braden, L. Davi, C. Liebchen, A.-R. Sadeghi, S. Crane, M. Franz, and
P. Larsen. Leakage-resilient layout randomization for mobile devices. In NDSS.
Internet Society, 2016.
[7] C.
Brook.
Pwn2Own
firefox-safari-edge-all-fall-pwn2own-2018, 2018.
2018.
Firefox,
Safari,
at
https://digitalguardian.com/blog/
Edge
fall
all
USENIX Association
29th USENIX Security Symposium    715
[8] D. Brumley and D. Song. Privtrans: Automatically partitioning programs for
privilege separation. In Security. USENIX, 2004.
[9] S. Bugrara and A. Aiken. Verifying the safety of user pointer dereferences. In
S&P. IEEE, 2008.
[10] Bug 1192226 (CVE-2015-4506) vp9 init
context buffers.
//bugzilla.mozilla.org/show_bug.cgi?id=1192226, 2015.
https:
[11] Bug 1446062 (CVE-2018-5146) ZDI-CAN-5822 - Mozilla Firefox Audio
https://bugzilla.mozilla.org/show_bug.cgi?
Driver Out of Bounds.
id=1446062, 2018.
[12] Security: stack-buffer-overﬂow in break.
https://bugs.chromium.org/p/
chromium/issues/detail?id=850350, 2019.
[13] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brun-
thaler, and M. Franz. Readactor: Practical code randomization resilient to
memory disclosure. In S&P. IEEE, 2015.
[14] S. Di Paola and G. Fedon. Subverting Ajax. Presented at 23C3, 2006.
[15] N. Froyd. Securing Firefox With WebAssembly. https://hacks.mozilla.
org/2020/02/securing-firefox-with-webassembly/, 2020.
[16] Georg Koppen.
Use RLBox for
sandboxing third-party libraries.
https://trac.torproject.org/projects/tor/ticket/32379.
[17] Google Chrome
Team.
(P)NaCl Deprecation Announcements.
https://developer.chrome.com/native-client/migration#
p-nacl-deprecation-announcements, 2017.
[18] C. Grier, S. Tang, and S. T. King. Designing and implementing the OP and OP2
Web browsers. ACM Transactions on the Web, 5(2), 2011.
[19] K. Gudka, R. N. Watson, J. Anderson, D. Chisnall, B. Davis, B. Laurie, I. Mari-
nos, P. G. Neumann, and A. Richardson. Clean application compartmentalization
with soaap. In CCS. ACM, 2015.
[20] A. Haas, A. Rossberg, D. L. Schuff, B. L. Titzer, M. Holman, D. Gohman,
L. Wagner, A. Zakai, and J. Bastien. Bringing the web up to speed with
webassembly. In PLDI. ACM, 2017.
[21] L. T. Hansen.
Cranelift: Performance parity with Baldr on x86-64.
https://bugzilla.mozilla.org/show_bug.cgi?id=1539399, 2019.
[22] H. Hu, Z. L. Chua, Z. Liang, and P. Saxena. Identifying arbitrary memory access
In ESORICS, volume 9326 of
vulnerabilities in privilege-separated software.
LNCS. Springer, 2015.
[23] A. Jangda, B. Powers, E. D. Berger, and A. Guha. Not so fast: analyzing the
performance of webassembly vs. native code. In ATC. USENIX, 2019.
[24] Y. Jia, Z. L. Chua, H. Hu, S. Chen, P. Saxena, and Z. Liang. The “Web/local”
boundary is fuzzy: A security study of Chrome’s process-based sandboxing. In
CCS. ACM, 2016.
[25] R. Johnson and D. Wagner. Finding user/kernel pointer bugs with type inference.
In Security. USENIX, 2004.
[26] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg,
M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom. Spectre attacks:
Exploiting speculative execution. In S&P. IEEE, 2019.
[27] D. Kohlbrenner and H. Shacham. Trusted browsers for uncertain times.
Security. USENIX, 2016.
In
[28] G. Kwong. JavaScript fuzzing in Mozilla, 2017. Presented at COSCUP 2017.
https://nth10sd.github.io/js-fuzzing-in-mozilla/, 2017.
[29] S. Liu, G. Tan, and T. Jaeger. PtrSplit: Supporting general pointers in automatic
program partitioning. In CCS. ACM, 2017.
[30] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. ASLR-Guard:
Stopping address space leakage for code reuse attacks. In CCS. ACM, 2015.
[31] Markdown ﬁlter module for apache httpd server.
hamano/apache-mod-markdown, 2011.
https://github.com/
[32] Performance sherifﬁng/Talos.
sheriffing/Talos, 2018.
https://wiki.mozilla.org/Performance_
[33] Security/sandbox. https://wiki.mozilla.org/Security/Sandbox, 2018.
[34] Project Fission. https://wiki.mozilla.org/Project_Fission, 2019.
[35] S. Narayan, C. Disselkoen, T. Garﬁnkel, N. Froyd, E. Rahm, S. Lerner,
H. Shacham, and D. Stefan. Retroﬁtting ﬁne grain isolation in the Firefox
renderer: Extended version. https://arxiv.org/abs/2003.00572, 2020.
[36] S. Narayan, T. Garﬁnkel, S. Lerner, H. Shacham, and D. Stefan. Gobi:
Webassembly as a practical path to library sandboxing, 2019.
[37] S. Nichols.
It’s 2019, and a PNG ﬁle can pwn your Android smartphone or
tablet: Patch me if you can. https://www.theregister.co.uk/2019/02/07/
android_january_patches/, 2019.
[38] bcrypt for nodejs. https://github.com/kelektiv/node.bcrypt.js, 2010.
[39] N. Provos, M. Friedl, and P. Honeyman. Preventing privilege escalation.
In
Security. USENIX, 2003.
[40] C. Reis and S. D. Gribble.
Isolating Web programs in modern browser
architectures. In EuroSys. ACM, 2009.
[41] C. Reis, A. Moshchuk, and N. Oskov. Site isolation: Process separation for web
sites within the browser. In USENIX Security Symposium. USENIX Association,
2019.
[42] A. Sabelfeld and A. C. Myers. Language-based information-ﬂow security. IEEE
Journal on Selected Areas in Communications, 21(1), 2003.
[43] M. Sammler, D. Garg, D. Dreyer, and T. Litak. The high-level beneﬁts of
low-level sandboxing. In POPL. ACM, 2019.
[44] R. Sasse, S. T. King, J. Meseguer, and S. Tang. IBOS: A correct-by-construction
modular browser. In FACS, volume 7684. Springer, 2013.
[45] K. Saur, M. Hicks, and J. S. Foster. C-strider: type-aware heap traversal for C.
Software: Practice and Experience, 46(6), 2016.
[46] G. Sauthoff. cgmemtime. https://github.com/gsauthof/cgmemtime, 2012.
[47] M. Schwarz, D. Gruss, M. Lipp, C. Maurice, T. Schuster, A. Fogh, and S. Man-
gard. Automated detection, exploitation, and elimination of double-fetch bugs
using modern cpu features. In AsiaCCS. ACM, 2018.
[48] M. Seaborn.
proof-of-concept.
1RD3bxsBfTZOIfrlq7HzGMsygPHgb61A1eTdelIYOurs/, 2013.
Sandboxing
libraries
zlib
https://docs.google.com/presentation/d/
in Chrome
using SFI:
[49] D. Sehr, R. Muth, C. Bifﬂe, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and
B. Chen. Adapting software fault isolation to contemporary CPU architectures.
In Security. USENIX, 2010.
[50] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh. On the
effectiveness of address-space randomization. In CCS. ACM, 2004.
[51] Shravan Narayan. Use Wasm sandboxed libraries in Firefox to reduce attack
surface. https://bugzilla.mozilla.org/show_bug.cgi?id=1562797.
[52] R. Shu, P. Wang, S. A. Gorski, III, B. Andow, A. Nadkarni, L. Deshotels,
J. Gionta, W. Enck, and X. Gu. A study of security isolation techniques. ACM
Computing Surveys, 49(3), 2016.
[53] D. Song, J. Lettner, P. Rajasekaran, Y. Na, S. Volckaert, P. Larsen, and M. Franz.
SoK: Sanitizing for security. In IEEE Security and Privacy 2019, 2019.
[54] Stefan Marsiske, Pierre Pronchery, Marcus Bointon.
Penetration Test Re-
https://wiki.mozilla.org/images/9/98/
port: Graphite font system.
Graphite-report.pdf, 2017.
[55] B. Stroustrup. Exception handling (and RAII).
In The C++ Programming
Language, chapter 13. Addison-Wesley, 4th edition, 2013.
[56] G. Tan.
Principles and implementation techniques of software-based fault
isolation. Foundations and Trends in Privacy and Security, 1(3), 2017.
[57] A brief Theora and Vorbis encoding guide. https://trac.ffmpeg.org/wiki/
TheoraVorbisEncodingGuide, 2019.
[58] A. Vahldiek-Oberwagner, E. Elnikety, N. O. Duarte, M. Sammler, P. Druschel,
and D. Garg. ERIM: Secure, efﬁcient in-process isolation with protection keys
(MPK). In Security. USENIX, 2019.
[59] VP9 bitrate modes in detail. https://developers.google.com/media/vp9/
bitrate-modes/, 2019.
[60] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efﬁcient software-based
fault isolation. In SOSP. ACM, 1993.
[61] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter.
In Security.
The multi-principal OS construction of the Gazelle web browser.
USENIX, 2009.
[62] P. Wang, J. Krinke, K. Lu, G. Li, and S. Dodier-Lazaro. How double-fetch
situations turn into double-fetch vulnerabilities: A study of double fetches in the
linux kernel. In Security. USENIX, 2017.
[63] Y. Wu, S. Sathyanarayan, R. H. Yap, and Z. Liang. Codejail: Application-
transparent isolation of libraries with tight program interactions. In ESORICS,
volume 7459 of LNCS. Springer, 2012.
[64] M. Xu, C. Qian, K. Lu, M. Backes, and T. Kim. Precise and scalable detection
of double-fetch bugs in OS kernels. In S&P. IEEE, 2018.
[65] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka,
N. Narula, and N. Fullagar. Native Client: A sandbox for portable, untrusted
x86 native code. In S&P. IEEE, 2009.
[66] Yves Younan.
Vulnerabilities.
vulnerability-spotlight-libgraphite.html, 2016.
Vulnerability Spotlight: Libgraphite Font Processing
https://blog.talosintelligence.com/2016/02/
[67] Optimized
transitions
for Lucet
compiler.
bytecodealliance/cranelift/issues/1083, 2019.
https://github.com/
716    29th USENIX Security Symposium
USENIX Association