title:On the Safety and Efficiency of Firewall Policy Deployment
author:Charles C. Zhang and
Marianne Winslett and
Carl A. Gunter
On the Safety and Efﬁciency of
Virtual Firewall Elasticity Control
Juan Deng†∗, Hongda Li†∗, Hongxin Hu†, Kuang-Ching Wang†, Gail-Joon Ahn‡, Ziming Zhao‡, and Wonkyu Han‡
{jdeng, hongdal, hongxih, kwang}@clemson.edu
† Clemson University
‡Arizona State University
{gahn, zzhao30, iamhwk}@asu.edu
Abstract—Traditional hardware-based ﬁrewall appliances are
placed at ﬁxed locations with ﬁxed capacity. Such nature makes
them difﬁcult to protect today’s prevailing virtualized environ-
ments. Two emerging networking paradigms, Network Function
Virtualization (NFV) and Software-Deﬁned Networking (SDN),
offer the potential to address these limitations. NFV envisions
to implement ﬁrewall function as software instance (a.k.a virtual
ﬁrewall). Virtual ﬁrewalls provide great ﬂexibility and elasticity,
which are necessary to protect virtualized environments. In
this paper, we propose to build an innovative virtual ﬁrewall
controller, VFW Controller, to enable safe, efﬁcient and cost-
effective virtual ﬁrewall elasticity control. VFW Controller
addresses four key challenges with respect to semantic consistency,
correct ﬂow update, buffer overﬂow avoidance, and optimal scaling
in virtual ﬁrewall scaling. To demonstrate the feasibility of our ap-
proach, we implement the core components of VFW Controller
on top of NFV and SDN environments. Our experimental results
demonstrate that VFW Controller is efﬁcient to provide safe
elasticity control of virtual ﬁrewalls.
I.
INTRODUCTION
Firewall is the most critical and widely deployed network
security function that protects networks against suspicious
trafﬁc and unauthorized access. Traditional hardware-based
ﬁrewalls are often placed at ﬁxed network entry points and
have a constant capacity with respect to the maximum amount
of trafﬁc they can handle per time unit. Given such rigid nature,
it is difﬁcult to leverage hardware-based ﬁrewalls to protect to-
day’s prevailing virtualized environments. First, the perimeter
of a network in virtualized environments becomes ﬂuid, as
VMs and applications may span across racks within a data
center or even across multiple data centers, and they are often
migrated for the purpose of ﬂexible resource management
and optimization [20]. Second, trafﬁc volume in virtualized
environments varies frequently and signiﬁcantly [17] [18]. A
study on network trafﬁc characteristic in virtualized environ-
ments suggests that trafﬁc volume depends on time-of-day and
day-of-week, and the trafﬁc volume variations are nearly an
∗The ﬁrst two authors contribute equally to the paper.
Permission  to  freely  reproduce  all  or  part  of  this  paper  for  noncommercial 
purposes is granted provided that copies bear this notice and the full citation 
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited 
without the prior written consent of the Internet Society, the ﬁrst-named author 
(for  reproduction  of  an  entire  paper  only),  and  the  author’s  employer  if  the 
paper  was  prepared  within  the  scope  of  employment.
NDSS  ’17,  26  February  -  1  March  2017,  San  Diego,  CA,  USA
Copyright  2017  Internet  Society,  ISBN  1-891562-46-0
http://dx.doi.org/10.14722/ndss.2017.23013
order of magnitude [17]. This leads to an expensive option of
over-provisioning hardware-based ﬁrewalls with the capacity
to process peak trafﬁc load that occurs occasionally.
Two emerging networking paradigms, Network Function
Virtualization (NFV) [6] and Software-Deﬁned Networking
(SDN) [39], push forward a new breed of ﬁrewalls, virtual
ﬁrewalls (VFW), which feature ﬂexibility and elasticity, and
are well suited to protect virtualized environments. NFV
implements ﬁrewall function as software instance that can
be created or destroyed quickly to handle trafﬁc volume
variations. For example, ClickOS [38], a high-performance and
open-source NFV platform, can create a virtual instance in
less than 30 milliseconds. SDN, recognized as complimen-
tary technology to NFV [26], seamlessly provides dynamic
trafﬁc steering support toward ﬂexible, on-demand placement
of virtual ﬁrewalls. Given these beneﬁts, major commercial
virtualized environments (e.g., VMware vCloud [37], Amazon
AWS [2] [9], VCE Vblock [11]) have recently started to
embrace virtual ﬁrewalls. Virtual ﬁrewalls can also be used
to protect traditional enterprise networks [47].
However, to fully take advantage of virtual ﬁrewall beneﬁts,
our study reveals that there are great challenges to enable
virtual ﬁrewall elastic scaling. When a virtual ﬁrewall is over-
loaded due to a large amount of incoming trafﬁc and needs to
scale out, new instances via NFV are quickly created. Selective
ﬁrewall rules and states (in case of stateful ﬁrewall) on the
overloaded virtual ﬁrewall are migrated to new instances,
and the corresponding trafﬁc ﬂow rules in SDN switches are
updated alongside to redistribute trafﬁc. When multiple virtual
ﬁrewall instances are underloaded and need to scale in, some
instances are destroyed, all ﬁrewall rules and states on them
are migrated to remaining instances, and ﬂow rules are also
updated accordingly. The scaling of virtual ﬁrewalls must be
safe, efﬁcient and optimal. A safe scaling does not cause legal
trafﬁc to be dropped or illegal trafﬁc to be allowed. An efﬁcient
scaling ensures that the latency overhead caused by scaling is
bounded. An optimal scaling consumes minimum compute and
network resources.
To achieve safe, efﬁcient, and optimal virtual ﬁrewall
scaling, the following key challenges should be addressed:
•
Semantic Consistency The split and mergence of
ﬁrewall rules in virtual ﬁrewall scaling must not
change the semantics of security policies. Otherwise
safety is violated (see §II B for examples). Keeping
the semantic consistency after rounds of splits and
•
•
mergences is non-trivial, because ﬁrewall rules are
often logically entangled with each other resulting
in complicated rule dependencies. Sometimes rule
dependencies are intentionally introduced by system
administrators to obtain fewer ﬁrewall rules [29] [49].
Correct Flow Update When migrating ﬁrewall rules
and states to new/remaining ﬁrewall instances, net-
work ﬂow rules in SDN switches must be cor-
rectly updated to re-route corresponding trafﬁc to
new/remaining instances. Incorrect ﬂow update may
cause some trafﬁc is missent to an instance that does
not have the ﬁrewall rules intended for the trafﬁc,
hence violates safety. Finding correct ﬂow update is
difﬁcult, since ﬂow rules in an SDN switch may
be dependent [31] [32] and the trafﬁc space deﬁned
by the ﬂow rules often does not exactly match that
deﬁned by the ﬁrewall rules.
Buffer Overﬂow Avoidance A safe scaling also
requires buffering in-ﬂight
trafﬁc during a migra-
tion [27] [28]. In-ﬂight trafﬁc refers to the trafﬁc that
arrive at the source instance after the matching ﬁrewall
rules and states have been migrated, or the trafﬁc that
arrive at the destination instance before correspond-
ing ﬁrewall rules and states become ready. However,
buffer space is not unlimited. We also observe that
migration of different ﬁrewall rules incurs different
amount of in-ﬂight trafﬁc. Therefore, care must be
taken while selecting ﬁrewall rules to migrate so that
buffer overﬂow 1 can be avoided.
• Optimal Scaling Compute and network resources for
building virtual ﬁrewalls are neither unlimited nor free.
Resource optimization is an important goal that needs
to be achieved in virtualized environments. Creations
of virtual ﬁrewalls consume compute resource, and
ﬂow rule updates are constrained by the limited ca-
pacity of the Ternary Content Addressable Memories
(TCAMs) used for holding rules in each SDN switch.
It is NP-hard to achieve optimization of resource usage
during virtual ﬁrewall scaling.
In this paper, we propose a novel virtual ﬁrewall controller,
VFW Controller, that enables safe, efﬁcient, and optimal
virtual ﬁrewall scaling. To address the challenge of semantic
consistency, VFW Controller applies packet space analysis
to identify intra-dependencies of ﬁrewall rules. A group-based
migration strategy is applied to guarantee the semantic consis-
tency. To ﬁnd correct ﬂow update, intra-dependencies of ﬂow
rules and inter-dependencies between ﬁrewall rules and ﬂow
rules are identiﬁed, which help locate the subset of ﬂow rules
to update and the correct update operations (e.g., change, in-
sertion). To avoid buffer overﬂow, we model migration process
and predict the amount of in-ﬂight trafﬁc generated during the
migration. Firewall rules that may cause buffer overﬂow when
migrating them are not selected to move. To achieve optimal
scaling-out of virtual ﬁrewalls, VFW Controller adopts a
three-step heuristic approach to minimize resource usage. To
achieve optimal scaling-in, integer linear programming (ILP) is
used to ensure maximum resources can be released. We design
1In this paper, we use the term ‘buffer overﬂow’ to refer to the situation
when buffer space is inadequate to buffer in-ﬂight trafﬁc, causing trafﬁc drop.
2
and implement the core components of VFW Controller
on top of ClickOS [38]. Our evaluations in CloudLab [3]
show that our VFW Controller provides efﬁcient virtual
ﬁrewall scaling control. To the best of our knowledge, VFW
Controller provides the ﬁrst solution for the safety and
efﬁciency of virtual ﬁrewall elasticity control.
The rest of the paper is organized as follows. Section II
presents the motivation and challenges of this paper. Section III
gives an overview of VFW Controller. The following four
sections present how VFW Controller guarantees semantic
consistency, ﬁnds correct update, avoids buffer overﬂows,
and achieves optimal scaling, respectively. We describe the
implementation of VFW Controller and our experiments
in Section VIII. Section IX discusses related work. Conclusion
and future work are addressed in Section X.
II. BACKGROUND AND CHALLENGES
A. New Networking Paradigms
Network functions (NFs) are systems that examine and
modify packets or ﬂows in a sophisticated fashion. Hardware-
based NFs have become fundamental elements in enterprise
networks [38] [48]. They are expensive, often vendor pro-
prietary, difﬁcult to manage, and inﬂexible with respect to
location and capacity. These demerits hinder the evolution of
network architecture and new service introduction. Network
Function Virtualization (NFV) aims to overcome these limita-
tions leveraging virtualization and cloud technologies [6]. NFV
shifts NF from hardware appliances to virtualized instances
running on standard high volume resource (servers, storage and
switches). Built on cloud platforms for resource management,
NFV shares resource across services and different customer
base. In addition, NFV promises the beneﬁts of low cost,
management ease, scalability, openness, convenient service
introduction, etc.
Traditional network devices have the control plane, which
makes decision on trafﬁc forwarding, and the data plane,
which forwards trafﬁc, tightly coupled. This makes them very
difﬁcult to implement network policies and introduce new
services or protocols. Also, it is impossible to automatically
respond to network faults or load changes [34], [41]. By decou-
pling forwarding hardware from control decisions, Software-
Deﬁned Networking (SDN) centralizes network intelligence
in software-based controller, making network devices sim-
ple packet forwarding devices. Network devices can be pro-
grammed via an open interface, such as OpenFlow [39].
Given their beneﬁts, NFV and SDN have recently attracted
signiﬁcant attentions from both academia and industry. A re-
cent survey indicates that 97% of the major network operators
plan to deploy SDN and 93% plan to deploy NFV [46].
Google, Amazon, AT&T, and Intel have announced their
deployment plans [12]–[14], [19], [42]. NFV does not rely on
SDN to exist, but the programmable feature of SDN greatly
facilitate NFV [26] [45].
B. Challenges in Virtual Firewall Elasticity Control
Recent
research efforts, notably Split/Merge [44] and
OpenNF [28], have laid the groundwork for supporting the
elastic scaling of a variety of virtualized network functions.
taken with respect to ﬁrewall rule dependencies so that the
semantics of the rules are unchanged after the split. Changes
in the semantics may lead to safety violations.
Figure 1 shows an example 2 where a virtual ﬁrewall,
VFW1, is scaled out. Firewall rule v1 and v2 on VFW1 before
scaling (Figure 1(a)) are dependent. Together they express a
security policy dictating that “any host in network 10.10.2.*
can access any HTTP server in network 192.168.1.*, except
server 192.168.1.9.” Consider a split example where v1 and
v8 are migrated to VFW2, and others stay put (Figure 1
(b)). After split, VFW1 grants any host in 10.10.2.* access to
192.168.1.9, which should be denied. Thus, safety is violated.
A remedy is to rely on the SDN switch to be aware of the
dependency of v1 and v2 and route trafﬁc from 10.10.2.* to
192.168.1.9 to VFW2. The remedy, while seems plausible, is
impractical for a large set of ﬁrewall rules with complicated
dependencies. To see why, consider another example if we
were to move dependent ﬁrewall rules v3, v4, v5, and v6 on
VFW1 to four different instances. It requires very complicated
routing support. For every ﬂow that matches more than one
rule, the SDN switch must remember its ﬁrst matching rule,
in order to compensate the reckless split that disrespects the
dependencies.
Overlooking rule dependencies may also create safety
issues for later mergence. For example, suppose VFW1 and
VFW2 in Figure 1 (b) are going to be merged back into
one. Without care, the mergence may produce a rule order
where v2 precedes v1, in which case it falsely grants access
to http server 192.1.1.9, leading to safety violation. In reality,
a ﬁrewall comprises hundreds of ﬁrewall rules with logical
intertwinement [29] [40] [49]. And they may undergo a number
of splits and mergences. This makes maintaining semantic
consistency a challenge in virtual ﬁrewall scaling.
2) Correct Flow Update: When migrating ﬁrewall rules,
ﬂow rules in SDN switches are updated alongside. Finding the
correct ﬂow update is challenging due to a number of reasons.
First, an SDN switch generally comprises thousands of ﬂow
rules that are dependent [31]. Modiﬁcation of a ﬂow rule which
has dependency relations with others is error-prone. Consider
again the split example in Figure 1. Flow rules f1 and f2 are
dependent. To account for the migration of ﬁrewall rule v8
from VFW1 to VFW2, we search the ﬂow rule space and ﬁnd
the ﬁrst ﬂow rule f1 exactly matches v8. Therefore, we change
the action of f1 to ‘send to VFW2’. Because f1 overshadows
f2, f2 will never take effect. In this case, when trafﬁc matching
v7 arrives at the switch, f1 applies and the trafﬁc is wrongly
sent to VFW2. But v7 is actually on VFW1.
Second, a ﬂow rule in an SDN switch may be used by