players to create the surveys.
To submit a response to a survey, the user sends her
submission m to the SA along with an NIZK proof that
the she has a valid credential (i.e., she has a commitment
signed by the RA, and she knows the values committed
to), and that her credential corresponds to an identity on
the survey list L (i.e., the ID in her signed commitment
is also in signed in L). Only legitimate users can
submit in the scheme, and clearly the submission is
anonymous to the SA who learns nothing except that
the submitter is on its approved list. However, we need
to achieve two other properties: i) tie the submission
m to the proof and the survey id, and ii) ensure that
the submitter does not submit multiple responses. The
ﬁrst property prevents submissions from replay and is
achieved because the NIZK we use is tag-based; we
can use the sid concatenated to the message m as the
tag for the proof. To prevent multiple submissions, we
include a unique token number created by evaluating
a pseudo-random function on the sid using the user’s
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
credential secret s as the seed, and we augment the
NIZK proof to show that
the unique token number
is computed correctly and corresponds to the user’s
credential. Thus, every valid submission by a given user
will have the same random token number associated
with it. This token does not reveal any information about
the submitter, but it allows the SA to detect multiple
submissions from the same anonymous user and either
discard all of them, or accept only the latest submission.
1) Primitives used: Let,
• (Gen, Sign, Ver) be a signature scheme.
• {fs}s∈{0,1}∗ be a family of PRFs.
• Com be a commitment scheme.
• Let L1 be the NP language deﬁned as follows:
(1n, c) ∈ L1 iff there exists strings r ∈ {0, 1}∗
, s ∈
{0, 1}n such that c = Com(s; r).
• Let L2 be the NP language deﬁned as follows:
(tok, sid, pkRA, pkSA) ∈ L2 iff there exist strings
s, id, c, r, σs, σsidid such that c = Com(s; r) and
VerpkRA (c||id, σs) = 1 and VerpkSA (sid||id, σsidid ) = 1
and tok = fs(sid)
• Let (D1, P1, V1) and (D2, P2, V2) be black-box cSE
NIZK protocols for L1 and L2 respectively.
2) Abstract ad-hoc survey scheme Γ:
• GenRA(1n) = Gen(1n), GenSA(1n) = Gen(1n).
• (Reg
(skRA), Reg
RA
U
)(1n, idi) proceeds as follows:
– A user with identity id uniformly generates
and stores s ← {0, 1}n, r ← {0, 1}poly(n) and
computes c = Com(s; r).
– i computes a cSE-NIZK π using P1 (given the
CRS or RO) that (1n, c) ∈ L1, using the tag 0n
and using (s, r) as witness.
– The user sends c, id, π to the RA.
– The RA checks that π with tag 0n is an
accepting proof that (1n, c) ∈ L1 (using V2) and
if so returns σs = SignskRA (c||id); otherwise it
simply returns fail.
– The user outputs cred = (c, s, r, σs).
• GenSurvey(1n, sid, L, skSA) proceeds as follows.
For each id ∈ L, compute σsidid = SignSAsk (sid||id)
and output the list of tuples (id, σsidid ).
• Authorized(pkSA, sid, pksid, id) outputs YES if pksid
contains a record of the form (id, σsidid ) such that
VerSApk (sid||id, σsidid ) = 1
• Submit(1n, sid, pksid, m, id, cred) proceeds as:
– Parse cred = (c, s, r, σs).
– Compute token-number tok = fs(sid).
– Recover a tuple of the form (id, σsidid ) from
pksid. If VerSApk (sid||id, σsidid ) (cid:5)= 1, abort.
– Compute a cSE NIZK π using P2 (and the CRS
or RO) that (tok, sid, pkRA, pkSA) ∈ L2 with tag
383
1||sid||m using c, s, r, σs, σsidid as witness.
– Send the tuple Sub = (tok, m, π) to the SA.
• Check(pkRA, pkSA, sid, tok, m, π) outputs accept if
V2 (given the CRS or RO) accepts π as a proof of the
statement (tok, sid, pkRA, pkSA) ∈ L2 with tag sid||m.
Theorem 2: If (Gen, Sign, Ver) is a secure signature
scheme, and {fs}s∈{0,1}∗ is a family of secure PRFs,
and Com is a perfectly hiding, computationally binding
commitment scheme, and (D1, P1, V1) and (D2, P2, V2)
are cSE NIZKs for the languages L1, L2 respectively,
then scheme Γ is a multi-survey unlinkable (Def. 3),
ad-hoc survey scheme that is secure (against malicious
users) (Def. 4).
Proof: (Omitted for space.)
C. Alternative implementations
Our proof for theorem 2 applies to more general im-
plementations of the Reg protocol as well. In particular,
U
the proof allows for the user’s output from the Reg
protocol to be a signature on s||id instead of Com(s)||id
as long as the signature scheme remains unforgeable
(skRA)(·)
even when the user is given access to a Reg
oracle. Recall that the standard security property of a
signature scheme allows the adversary oracle access to
the Sign(·) function; providing oracle access to Reg
RA
instead is a natural generalization. This generalization
allows for more efﬁcient concrete implementations. In
particular, it allows one to exploit natural connections
between speciﬁcally engineered commitment schemes
and signature schemes.
RA
IV. CONCRETE INSTANTIATION
A. Bilinear Groups and Assumptions
Let G and GT be groups of prime order p. A
symmetric bilinear map is an efﬁcient mapping e :
G×G → GT which is both: (bilinear) for all g ∈ G and
a, b ← Zp, e(ga, gb) = e(g, g)ab; and (non-degenerate)
if g generates G, then e(g, g) (cid:5)= 1. A more general
version of the bilinear map is the asymmetric bilinear
map e : G1 × G2 → GT , where G1 and G2 are distinct
groups. We present our constructions in symmetric
groups (which are easier for readers to parse), but
then conduct our implementation in asymmetric groups
(which are more efﬁcient).
Assumption 1 (Decisional Bilinear Difﬁe-Hellman):
Let g generate a group G of prime order p ∈ Θ(2λ)
with an efﬁcient bilinear mapping e : G × G → GT .
For all non-uniform PPT adversaries A, the following
probability is negligible in λ:
a, b, c ← Zp; x ← {0, 1};
T0 ← e(g, g)abc;
T1 ← GT ;
(cid:2) ← A(g, ga, gb, gc, Tx)
x
(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)1/2 − Pr
(cid:2)
: x = x
(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2) .
⎡
⎢⎢⎣
⎤
⎥⎥⎦
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
Roughly this assumption states that an adversary cannot
distinguish between e(g, g)abc and a random group
element when given (g, ga, gb, gc).
Assumption 2 (n-Decisional Difﬁe-Hellman Inversion):
Let h generate a group G of prime order p ∈ Θ(2λ).
For all non-uniform PPT adversaries A, the following
probability is negligible in λ:
(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)1/2 − Pr
⎡
⎢⎢⎣
b ← Z
p; x ← {0, 1};
∗
T0 ← h1/b; T1 ← G;
(cid:2) ← A(h, hb, hb2
x
x = x
(cid:2)
⎤
⎥⎥⎦
(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2)(cid:2) .
, . . . , hbn
, Tx) :
B. Scheme
The common input for all protocols is a description
of the bilinear mapping, together with generators g, h of
G, and a description of a CRHF H that maps {0, 1}∗ →
Zq. The values g, h can be chosen randomly by the RA.
The elliptic curve library that we use implements the
hash operation H differently depending on the curve
implementation.
Our scheme makes use of the Pedersen commitment
the Dodis-Yampolskiy pseudo-random
scheme [27],
function [32], and a simpliﬁed signature scheme derived
from the Boneh-Boyen IBE [33]; all three are summa-
rized in Fig. 1.
Pedersen
Theorem 3 ([27]): The
commitment
scheme is a perfectly-hiding and computationally-
binding commitment scheme assuming the hardness of
the discrete logarithm problem in G.
Theorem 4 ([32], [12]): (informal)
The Dodis-
Yampolskiy PRF is a secure pseudo-random function
∗
q in the generic group model.9
for input space Z
Theorem 5 ([33]): (informal) Under the Decisional
Bilinear Difﬁe-Hellman assumption in G, the Boneh-
Boyen scheme is adaptively secure for n bit messages
for “large groups” which can withstand a factor of 1/2n
reduction in security. 10
C. Sigma protocols for languages L1 and L2
In order to instantiate the remaining protocols, we
must specify the languages L1 and L2 deﬁned in
inputs”;
9Dodis and Yampolskiy [32] showed that their PRF was secure
under the (parameterized) Decisional-Difﬁe-Hellman Inversion As-
sumption assumption in G for “small
they discuss [32,
Section 4.3] how the input to their PRF can be 160 bits for proper
choice of parameters and that arbitrarily-long strings can ﬁrst be
hashed down to 160 bits using any collision-resistant hash function.
10Suppose that messages of n bits are signed using the scheme,
and recall that one can always sign messages of arbitrary length by
ﬁrst applying a collision-resistant hash function to map them to n
bits. Then the adversary’s advantage in forging a message increases
by a factor of 2n. Thus, to be provably-safe in using this scheme
in applications that demand full security, one has to choose their
parameters carefully. Boneh and Boyen suggest, as one example, that
when n = 160 and the bilinear group is set so that no polynomial-
time adversary can break DBDH with advantage 2−240, then the
resulting signature scheme offers roughly 80-bit security.
(1) COMMITMENT SCHEME
order q with generators g, h.
Common Input: An algebraic group G of prime
Commit(m) S −→ R Sender chooses random s ∈
Open(α): S −→ R Sender sends (m, s) to R.
Zq, and sends α = gmhs to R.
Receiver checks α
?
= gmhs.
(2) DODIS-YAMPOLSKIY PRF Fy THAT MAPS
Setup: An algebraic group G of prime order q with
Z
q → Gt WHERE y ∈ Zq.
∗
generator g and PRF seed y ∈ Zq.
any m (cid:5)= 0 mod q.
Fy(m): The user computes Fy(m) = g1/(y+m) for
(3) BB SIGNATURE SCHEME
Gen(1n) : Sample the secret key sk ← α ∈ Zq.
Sample random group generators u, v, g, h and
compute U = e(g, g)α. The veriﬁcation key is
vk ← (u, v, g, h, U ).
Sign(sk, m0, m1): Choose r ∈ Zq randomly and
compute
σ1 ← g
α
m0 v
m1 h)
r
,
(u
σ2 ← g
r
and output (σ1, σ2) as the signature.
Ver(vk, m0, m1, σ1, σ2): Accept if
e(σ1, g)
?
= U · e(u
m0 v
m1 h, σ2)
Figure 1. A commitment, and PRF family, and signature scheme
the abstract section and provide cSE NIZKs for those
languages. Recall that languages L1 and L2 implicitly
depend on the speciﬁcation of a signature scheme
(Gen, Sign, Ver), a commitment scheme Com, and a
pseudo-random function family {fs}. For the rest of
these sections, assume that these three dependencies are
instantiated with the BB-signature scheme, the Pedersen
commitment, and the Dodis-Yampolskiy function as
described above in Fig. 1. We now provide Σ-protocols
for L1, L2 and then apply the Fiat-Shamir heuristic in
the random oracle model as prescribed in Thm.1 to
produce the required cse-NIZK.
The language L1 corresponds to a standard Schnorr-
like [34] proof for knowledge of a representation of
a discrete logarithm. In the Camenish-Stadler nota-
tion [35], such a protocol is speciﬁed as follows:
(cid:9)
(cid:10)
L1 = P oK
(sid, d) : α = v
d
sid g
This denotes a “zero-knowledge proof of knowledge
of integers sid, d such that α = vsid gd holds” where
α, v, g are elements of some group G. Values not in the
parentheses are considered to be public.
384
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
In contrast,
the language L2
Theorem 6 ([34]): There exists a 3-round honest-
veriﬁer special-sound zero-knowledge protocol for L1.
is more compli-
cated to specify and requires a non-trivial protocol.
A statement
in this language consists of the tuple
(sid, C, pkRA, pkSA) where pkRA = (u, v, h, e(g, g)x)
and pkSA = (uv, vv, hv, e(g, g)y). The witness for an
instance is the tuple (sid, id, c, r, σ, σsidid ) such that σ =
(σ1, σ2) forms a Boneh-Boyen signature on the values
(id, sid), σsidid = (σsidid,1, σsidid,2) forms a Boneh-
Boyen signature on (sid, id), and C = Fsid (sid) where F
is the Dodis-Yampolskiy PRF, for the signature schemes
above.
In the ﬁrst step of the proof for L2, the prover re-
randomizes (σ, σsidid ) by choosing random d1, d2 ∈ Zq
and computes
d2
d1
,
,
v
sid
v v
sid h)
id
v h)
s2 = σ2 · g
d1 )
s4 = σsidid,2 · g
(s1 = σ1 · (u
(s3 = σsidid,1 · (u
The values s2, s4 are sent to the Veriﬁer, and the
problem reduces to proving a simpler statement: (a)
(s1, s2) form a Boneh-Boyen signature on the values
(id, sid), (b) (s3, s4) form a Boneh-Boyen signature on
(sid, id), and (c) C = Fsid (sid) as follows:
d2 ).
id
(id, sid, s1, s3) :
−1∧
−1∧
P oK
v hv, s4) = e(s3, g)e(vid
−sid = C sid
Exe(h, s2) = e(s1, g)e(uidvsid , s2)
Eye(usid
v , s4)