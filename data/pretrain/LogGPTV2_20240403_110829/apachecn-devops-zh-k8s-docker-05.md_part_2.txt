```
从的输出可以看到，`kubectl`客户端正在运行版本`1.17.1`，集群正在运行`1.17.0`。两者之间的微小版本差异不会导致任何问题。事实上，官方支持的版本差异是在一个主要版本版本内。因此，如果您的客户端运行的是 1.16 版本，而群集运行的是 1.17 版本，那么您将处于支持的版本差异之内。虽然这可能得到支持，但这并不意味着如果您尝试使用更高版本中包含的任何新命令或对象，就不会遇到问题。通常，您应该尝试保持集群和客户端版本同步，以避免任何问题。
通过本章的剩余部分，我们将讨论 Kubernetes 对象以及如何与 API 服务器交互来管理每个对象。但是在深入研究不同的对象之前，我们想提一下`kubectl`实用程序中一个通常被忽略的选项:`verbose`选项。
## 了解详细选项
当您执行`kubectl`命令时，默认情况下，您将看到的唯一输出是对您的命令的任何直接响应。如果您查看`kube-system`名称空间中的所有 Pods，您将收到所有 Pods 的列表。在大多数情况下，这是期望的输出，但是如果您发出了一个`get Pods`请求并从 API 服务器收到了一个错误呢？如何获得更多可能导致错误的信息？
通过在您的`kubectl`命令中添加`verbose`选项，您可以获得关于应用编程接口调用本身的更多细节以及来自应用编程接口服务器的任何回复。通常，来自应用编程接口服务器的回复将包含有助于找到问题根源的附加信息。
`verbose`选项有从 0 到 9 的多个级别；数字越高，您将获得越多的输出。以下截图取自 Kubernetes 网站，详细介绍了每个级别以及输出内容:
![Figure 5.5 – Verbosity description ](img/Fig_5.5_B15514.jpg)
图 5.5–详细描述
您可以通过在任何`kubectl`命令中添加`-v`或`--v`选项来试验这些级别。
## 库贝克特尔将军命令
命令行界面允许您以命令和声明的方式与 Kubernetes 进行交互。使用命令式命令需要您告诉 Kubernetes 该做什么——例如，`kubectl run nginx –image nginx`。这告诉应用编程接口服务器创建一个名为`nginx`的新部署，运行名为`nginx`的映像。虽然命令式命令对于开发和快速修复或测试很有用，但是在生产环境中，您将更经常地使用声明式命令。在声明性命令中，您告诉 Kubernetes 您想要什么。要使用声明性命令，您需要向应用编程接口服务器发送一个清单，该清单通常用 **YAML 非标记语言** ( **YAML** )编写，该清单声明您希望 Kubernetes 创建的内容。
`kubectl`包括命令和选项，可以提供一般的集群信息或关于对象的信息。下表包含命令及其用途的备忘单。我们将在以后的章节中使用其中的许多命令，因此您将在整本书中看到它们的实际应用:
![](img/B15514_table_5.2.jpg)
了解了每个 Kubernetes 组件以及如何使用命令与 API 服务器交互后，我们现在可以继续讨论 Kubernetes 对象以及如何使用`kubectl`来管理它们。
# 介绍 Kubernetes 对象
这一部分将包含大量信息，由于这是一个训练营，我们将不深入讨论每个对象的细节。可以想象，在一本书里，每个对象都可以有自己的章节，或者多个章节。因为有很多关于 Kubernetes 的书详细介绍了基本对象，我们将只介绍每本书的必要细节，以便理解每一本书。在接下来的章节中，当我们使用书本练习构建集群时，我们将包括对象的附加细节。
在我们继续理解 Kubernetes 对象到底是什么之前，让我们首先解释 Kubernetes 对象的表现。
## 立方结构清单
我们将用来创建 Kubernetes 对象的文件被称为清单。清单可以使用 YAML 或 **JavaScript 对象符号** ( **JSON** )创建—大多数清单使用 YAML，这是我们将在本书中使用的格式。
清单的内容将根据将要创建的一个或多个对象而有所不同。至少，所有清单都需要基本配置，包括`apiVersion`、对象`KinD`和`metadata`字段，如下图所示:
```
apiVersion: apps/v1
KinD: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
```
前面的清单本身并不完整；我们只显示了完整部署清单的开始。正如您在文件中所看到的，我们从所有清单都必须具有的三个必填字段开始:`apiVersion`、`KinD`和`metadata`字段。
您可能还会注意到文件中有空格。YAML 是非常特定于格式的，如果任何一行的格式偏离了一个空格，那么当您试图部署清单时就会收到一个错误。这需要时间来适应，即使在创建清单很长一段时间后，格式问题仍然会不时出现。
## 什么是 Kubernetes 对象？
当你想在集群中添加或删除一些东西时，你正在与一个 Kubernetes 对象进行交互。对象是集群用来保存所需状态列表的对象。期望的状态可以是创建、删除或缩放对象。基于对象的期望状态，应用编程接口服务器将确保当前状态等于期望状态。
要检索集群支持的对象列表，可以使用`kubectl api-resources`命令。应用编程接口服务器将回复所有对象的列表，包括任何有效的短名称、名称空间支持和支持的应用编程接口组。一个基本集群大约包含 53 个基本对象，但最常见对象的缩写列表显示在下面的屏幕截图中:
![Figure 5.6 – Kubernetes API resources ](img/Fig_5.6_B15514.jpg)
图 5.6-固定 API 资源
由于本章是一个训练营，我们将对列表中的许多对象进行简要回顾。为了确保您能够理解剩下的章节，我们将概述每个对象以及如何与它们交互。一些对象也将在以后的章节中更详细地解释，包括`Ingress`、`RoleBindings`、`ClusterRoles`、`StorageClasses`等等。
## 查看 Kubernetes 对象
为了使这个部分更容易理解，我们将按照`kubectl api-services`命令提供的顺序呈现每个对象。
集群中的大多数对象都在一个命名空间中运行，要创建/编辑/读取它们，您应该为任何`kubectl`命令提供`-n `选项。要查找接受名称空间选项的对象列表，您可以参考我们之前的`get api-server`命令的输出。如果一个对象可以被命名空间引用，命名空间列将显示`true`。如果该对象仅由集群级别引用，则命名空间列将显示`false`。
### 配置地图
配置图将数据存储在键值对中，提供了一种将配置与应用分开的方法。配置映射可能包含来自文字值、文件或目录的数据。
这里有一个命令式的例子:
```
kubectl create configmap  
```
`name`选项将根据配置图的来源而变化。要使用文件或目录，您需要提供`--from-file`选项以及文件或整个目录的路径，如下所示:
```
kubectl create configmap config-test --from-file=/apps/nginx-config/nginx.conf
```
这将创建一个名为`config-test`的新配置图，以包含`nginx.conf`文件内容的`nginx.conf`键作为值。
如果需要在单个配置映射中添加多个键，可以将每个文件放入一个目录，并使用目录中的所有文件创建配置映射。例如，在位于`~/config/myapp`的目录中有三个文件。目录中有三个文件，每个文件都包含数据，分别叫做`config1`、`config2`和`config3`。要创建将每个文件添加到密钥中的配置映射，您需要提供`--from-file`选项并指向目录，如下所示:
```
kubectl create configmap config-test --from-file=/apps/config/myapp
```
这将创建一个新的`ConfigMap`，它有三个关键值，分别叫做`config1`、`config2`和`config3`。每个关键字将包含一个等于目录中每个文件内容的值。
为了快速显示一个`ConfigMap`，使用这个例子从一个目录中创建一个`ConfigMap`，我们可以使用 get 命令`kubectl get configmaps config-test`来检索`ConfigMap`，得到如下输出:
```
NAME          DATA   AGE config-test    3     7s
```
我们可以看到配置图包含三个键，显示为`DATA`列下的`3`。更详细地看，我们可以使用与 YAML 相同的`get`命令，并通过向`kubectl get configmaps config-test -o yaml`命令添加`-o yaml`选项来输出每个键的值，从而产生以下输出:
![Figure 5.7 – kubectl ConfigMap output ](img/Fig_5.7_B15514.jpg)
图 5.7-cube config map 输出
查看前面的输出，您可以看到每个键都匹配文件名，并且每个键的值都包含每个相应文件中的数据。
您应该记住的配置映射的一个限制是，任何拥有对象权限的人都可以轻松访问数据。从前面的输出中可以看到，一个简单的`get`命令以明文形式显示数据。由于这种设计，您永远不应该在配置映射中存储敏感信息，如密码。在这一节的后面，我们将介绍一个被设计用来存储敏感信息的对象，称为机密。
### 端点
端点将服务映射到一个或多个 Pod。当我们解释`Service`对象时，这将更有意义。现在，您只需要知道您可以使用命令行界面通过使用`kubectl get endpoints`命令来检索端点。在新的 KinD 集群中，您将在默认命名空间中看到 Kubernetes API 服务器的值，如以下代码片段所示:
```
NAMESPACE   NAME     ENDPOINTS         AGE               
default   kubernetes 172.17.0.2:6443   22h                                
```
输出显示集群有一个名为`kubernetes`的服务，该服务在端口`6443`上的**互联网协议** ( **IP** )地址`172.17.0.2`处有一个端点。稍后，当您查看端点时，您会发现它们可用于解决服务和入口问题。
### 事件
`Events`对象将显示名称空间的任何事件。要获取`kube-system`命名空间的事件列表，可以使用`kubectl get events -n kube-system`命令。
### 命名空间
命名空间是一个将集群划分为逻辑单元的对象。每个名称空间都允许对资源进行精细的管理，包括权限、配额和报告。
`namespace`对象用于命名空间任务，这是集群级别的操作。使用`namespace`对象，您可以执行包括`create`、`delete`、`edit`和`get`在内的命令。
该命令的语法为`kubectl  ns `。
例如，为了描述`kube-system`命名空间，我们将执行一个`kubectl describe namespaces kube-system`命令。这将返回命名空间的信息，包括任何标签、注释和分配的配额，如以下代码片段所示:
```
Name:         kube-system
Labels:       Annotations:  
Status:       Active
No resource quota.
No LimitRange resource.
```
在前面的输出中，您可以看到这个命名空间没有分配任何标签、注释或资源配额。
本节仅旨在介绍名称空间作为多租户集群中的管理单元的概念。如果您计划运行具有多个租户的集群，您需要了解如何使用名称空间来保护集群。
### 节点
`nodes`对象是一个集群级别的资源，用于与集群的节点进行交互。该对象可用于各种动作，包括`get`、`describe`、`label`和`annotate`。
要使用`kubectl`检索集群中所有节点的列表，您需要执行`kubectl get nodes`命令。在运行简单单节点集群的新 KinD 集群上，这将显示如下:
```
NAME               STATUS ROLES    AGE   VERSION
KinD-control-plane Ready  master   22h   v1.17.0
```