(delete-songs 
(add-songs playlist what (or values (list file))))
:artist artist :album album))
www.TopSage.com
"Album" "Artist" "Genre")
- ~a" (id playlist)) :header nil)
(delete-songs-link
(delete-songs-link
(delete-songs-link :file file))
playlist shuffle))
 :artist artist))
和&这些字符在
另一种以牺牲一些表达性为代价来提高简洁性的方式是，让语言处理器负责在元素之间添加
②女
理论已经讲得足够多了。
例如，由于HTML的结构，每个开放的标签都有一个配对的闭合标签。?当你手工编写HTML
参见语言标准的3.1.2.1.3节或HyperSpec里的简要讨论。
在CommonLisp标准所描述的严格语言里，关键字符号不是自求值的，尽管它们在事实上确实求值到它们自身。
谨并且形态良好，但运行起来以后却不可避免地产生未定义行为的程序。
的HTML用来补偿有bug的Web浏览器的话，这也可以成为一个特性。另外，语言处理器通常也会接受那些词法严
(and (atom form) (if (symbolp form) (keywordp form) t)))
FOO 语言
(write-sequence ,html
第30章实践：HTML生成库，解释器部分
。下面我们来快速浏览一下FOO所实现的语言，然后你将看到两个
www.TopSage.com
*html-output*))
---
## Page 394
表的第一个元素本身是一个以关键字符号为其首元素的列表，那么外层的列表就代表一个以该关
交替出现。元素的主体开始于列表中第一个在属性名的位置上却并非关键字符号的那一项。因此：
性包含在列表中紧随符号之后的位置上，其中命名了属性的关键字符号和代表属性值形式的对象
无属性元素的语法就最好了。FOO提供了两种方式来表示带有属性的元素。第一种是简单地将属
由自求值对象或列表组成的列表。这样：
FIRST部分是一个名字与该元素的标签名相同的符号，而REST部分是一个代表其他HTML元素的
Lisp列表和HTML元素之间存在一个明显的映射：任何HTML元素均可被表示成一个列表，其
成Lisp对象，最好是Lisp读取器已经知道如何读取的对象。如果你暂时不考虑属性的话，那么在
属性集合以及含有文本和/或更多HTML元素的主体。这样，你需要一种方式将这三部分信息表示
*STANDARD-OUTPUT*）。表30-1给出了一些不同的自求值对象是如何被输出的。
你可以在一个自求值对象上调用html宏从而将其输出到*html-output*（初始绑定到
诸如或&这类保留字符后输出。当值作为属性输出时，字符“"”和“”也需要转义。这样，
① 使用那些Lisp读取器知道如何读取的对象，这并不是一个十分严格的要求。由于Lisp读取器本身是可定制的，你
对于那些喜欢在元素的属性和主体间有更明确界限的人们，FOO还支持另一种语法：如果列
 现在唯一的问题是在哪里插入属性。由于多数元素都没有属性，如果可以继续使用前面用于
NIL
(("00d "O0. aS: "X P: d:) [4u) Foo
((μ00 “00 aAs: d:) I4u) foo