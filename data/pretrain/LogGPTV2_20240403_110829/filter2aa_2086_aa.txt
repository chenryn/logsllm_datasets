Anti-RE Techniques in DRM Code
Jan Newger
Seminar Advanced Exploitation Techniques
RWTH Aachen, Germany
PI:EMAIL
ABSTRACT
In order to prevent music from being copied among con-
sumers, content providers often use DRM systems to pro-
tect their music ﬁles. This document describes the approach
taken while analysing a DRM system (whose identity needs
to be kept secret due to legal issues)1.
It is shown what
techniques were used to protect the system from being eas-
ily reverse engineered.
1.
INTRODUCTION
It’s common practice among DRM implementations to use
strong encryption in combination with a hardware or user
dependent key derivation algorithm. The DRM system in
question is no exception to this, although the algorithm used
for encryption, single DES [1] in this case, is considered to
be outdated because of its limited key length. Because the
whole system can be broken by revealing the decryption al-
gorithm together with its associated key setup, the central
idea of the protections used by the DRM is to make re-
verse engineering as hard as possible. Although any soft-
ware based protection mechanism can be reverse engineered
and therefore be broken, performing such a task can be
highly hindered by using various anti reverse engineering
techniques. This paper will give a detailed analysis of the
most signiﬁcant techniques employed by the DRM and shows
how to circumvent them.
2.
APPROACHING THE DRM
The most important step while approaching the protection
was to ﬁnd DRM related code which would ﬁnally lead to
the decryption algorithm.
A very straight forward strategy to solve this problem is to
use a debugger to ﬁnd relevant code by setting breakpoints
on ﬁle I/O APIs like CreateFile, ReadFile and functions
used to map ﬁle data in process memory by means of mem-
ory mapped ﬁles. After data has been read from a DRM
1Please note that this paper lacks quite some details, be-
cause i don’t want to oﬀend the developers of the DRM
protected ﬁle, one would set a break point on memory access
(BPM), which in turn would lead to either a copy operation
or directly to the code decrypting the ﬁle buﬀer. Under the
assumption that the code contributing to the key setup is
rather close to the decryption algorithm, this strategy seems
to be quite appropriate in this scenario. But even if that
was not the case, it would still be possible to back trace
from the code which accesses the key to the key schedule
algorithm itself, e.g. also by using BPMs. The designers of
the DRM system were obviously expecting this or a similar
approach to be used by a potential attacker, so they came
up with a protection which makes it impossible to use BPMs
without further action by the attacker. Chapter 3 discusses
techniques to reclaim the features oﬀered by the hardware
breakpoints, so BPMs can be used as proposed.
2.1
Code Coverage
Another approach which can be quite eﬀective when it comes
to ﬁnding relevant code in large binaries is to use code cover-
age. In this context code coverage is the process of identify-
ing basic blocks or functions inside a binary which have been
executed during runtime. For the purpose of ﬁnding DRM
relevant code, a tool, namely N-Coverage2, has been devel-
oped. The application consists of a plugin for the Interactive
Disassembler (IDA) [2] and a stand-alone application writ-
ten in C#. The plugins purpose is to export relative virtual
addresses (RVA) for each function or basic block gathered
from the disassembly of a library or executable. This infor-
mation is fetched from IDA and can then be exported to the
stand-alone application, which in turn creates a new process
and attaches a custom debugging engine to set breakpoints
in the speciﬁed modules and/or executable images. While
the process is running, breakpoint hits are recorded and are
saved on a per-module basis. So as to handle large appli-
cations consisting of many DLLs with possibly conﬂicting
image base addresses, N-Coverage is able to correctly han-
dle library rebasing. In a ﬁnal step N-Coverage allows the
user to merge and diﬀ recordings resulting in a new set which
can be exported back to the IDA plugin again. This allows
for easy visualization of functions or basic blocks contained
in the ﬁnal set, either by coloring the respective disassembly
listing or by selecting hits from a list so they can be easily
navigated to. The problem of ﬁnding DRM relevant code
can be accomplished by recording a set of hits while playing
non-DRM protected music ﬁrst, saving the hits to a set s1.
Afterwards another set of hits s2 is recorded, but this time
while playing DRM protected music.
DRM speciﬁc code
2Available from www.newgre.net/ncoverage
can then be found by computing the ﬁnal set s = {s2 \ s1}.
This works best if all or most of the hits for irrelevant code,
like e.g. GUI related code, common initialization routines
and so on, have been recorded to s1, so these hits will be
ﬁltered out of s2, leaving only relevant hits in the ﬁnal set
fs. Against this background code coverage seems to be a
promising strategy to ﬁnd code contributing to the DRM,
especially because it doesn’t require any analysis to be car-
ried out by the reverse engineer. It turns out however, that
in this case code coverage is only of limited use. This is due
to runtime code modiﬁcations executed by the DRM which
makes the process of relating breakpoint hits to RVAs very
hard, because previously assumed break point addresses are
never hit due to code which copies itself to other locations in
memory. Although code coverage gave a few good starting
points, it wasn’t appropriate to be used as the key strat-
egy in this case. Therefore the basic approach was based on
using BPMs to locate code of interest.
2.2
Introduction to Windows SEH
The major aspects of the anti reverse engineering techniques
used in the DRM system rely on the mechanisms of struc-
tured exception handling (SEH), so a short overview on the
architecture of exception handling on operating system level
under windows is given. This is only a rough overview of
structured exception handling, so more advanced topics such
as stack unwinding, nested exception etc. are intentionally
left out.
A more detailed and complete discussion of the
topic can be found at [3].
Structured exception handling is provided by the operating
system to allow an application to react on runtime errors on
a per-thread basis. An exception handler called by means
of SEH has the following signature:
EXCEPTION_DISPOSITION _except_handler(
_EXCEPTION_RECORD* ExceptionRecord,
void* EstablisherFrame,
_CONTEXT* ContextRecord,
void* DispatcherContext
);
Listing 1: Handler declaration
The most important parameters for our analysis are EXCEP-
TION_RECORD and CONTEXT. The former parameter contains
information like the exception code, the address where the
exception occurred, etc. whereas the latter is a pointer to
a structure representing the CPU state at the time of the
exception, i.e.
the thread context of the faulting thread.
The supplied context actually is an out-parameter, so any
changes made to it will be applied by the operating system
upon return of the handler. This allows a certain handler to
ﬁx whatever caused the exception in the ﬁrst place by modi-
fying the given thread context. Having one global exception
handler which is responsible for processing any possible error
in a given thread is often unsuitable, so there is a linked list
of EXCEPTION_REGISTRATION structures pointed to by fs:0.
This allows for registration of multiple exception handlers
per thread, especially for diﬀerent scopes. Listing 2 shows
the entries of this linked list.
_EXCEPTION_REGISTRATION struc
prev
dd
?
handler dd
?
_EXCEPTION_REGISTRATION ends
Listing 2: SEH list entry
This is a very straight forward way of implementing a linked
list, prev is a pointer to the previous element in the list (or
0xFFFFFFFF to mark the last element) and handler obvi-
ously is a pointer to the respective exception handler. When-
ever an exception occurs, the operating system walks the
list of EXCEPTION_REGISTRATION structures of the respective
thread starting at fs:0 and calls each handler until the ﬁrst
replies to handle the exception, signaling the operating sys-
tem that this handler is capable of ﬁxing whatever caused
the exception in the ﬁrst place.
Figure 1: SEH linked list
The SEH list contains at least one entry which is inserted
by the operating system executable loader and jumps in to
catch any unhandled exception, leading usually to process
termination. Each thread can register a new exception han-
dler by inserting a new EXCEPTION_REGISTRATION structure
to the beginning of the SEH list. Listing 3 shows code to
add a new exception handler. Although this is probably the
most basic code to do this, nevertheless in most applications
the compiler generated code to add a new handler looks very
similar to this.
push
handler
push
fs:[0]
mov
fs:[0], esp
Listing 3: Adding a new handler
A new EXCEPTION_REGISTRATION structure is created on the
stack. Since the stack grows from higher to lower addresses,
the second member of the structure has to be pushed ﬁrst.
The prev pointer is the last pointer from the list, i.e. fs:[0].
Finally the pointer to the structure on the stack is saved as
the new head of the list. In most cases one exception handler
is responsible to process all exceptions in a special scope, so
before entering this certain scope, an exception handler is
added in the way just shown. Against this background it
makes sense to create the EXCEPTION_REGISTRATION struc-
ture on the stack, because as soon as control ﬂow leaves the
scope protected by the handler, it can be safely removed
from the stack.
Figure 2: SEH big picture
mov
eax, [esp]
mov
fs:[0], eax
add
esp, 8
Listing 4: Removing a handler
To unregister a handler, the previous element is set as the
new head element and the EXCEPTION_REGISTRATION struc-
ture is removed from the stack as shown in listing 4.
All the SEH logic is initially triggered by code from a proce-
dure namely KiUserExceptionDispatcher exported by nt-
dll.dll (though it’s not really a procedure, but rather code
being dispatched to from kernel mode).
This means that
whenever an exception is raised, the CPU transfers control
ﬂow into kernel mode and the appropriate interrupt service
routine from the interrupt descriptor table is grabbed and
executed. In kernel mode some information about the ex-
ception is collected as well as the context of the faulting
thread and ﬁnally the structures containing this information
are passed down to user mode ending up in KiUserExcep-
tionDispatcher. It turns out that KiUserExceptionDis-
patcher is indeed the ﬁrst code being executed in user mode
after the exception has occurred.
KiUserExceptionDispatcher(PEXCEPTION_RECORD
pExcptRec,
CONTEXT* pCtx)
{
DWORD retValue;
if (RtlDispatchException(pRec, pCtx))
retValue = NtContinue(pContext, 0);
else
retValue = NtRaiseException(pRec,pCtx, 0);
EXCEPTION_RECORD rec;
rec.ExceptionCode = retValue;
rec.ExceptionFlags = EXCEPTION_NONCONTINUABLE;
rec.ExceptionRecord = pExcptRec;
rec.NumberParameters = 0;
RtlRaiseException(&rec);
}
Listing 5: KiUserExceptionDispatcher pseudo code
All of the SEH logic in turn is triggered from RtlDispatchEx-
ception. This procedure creates the parameters an excep-
tion handler expects and then walks the list of registered
exception handlers. If no handler was found during SEH list
walking, which responded to handler the exception, a sec-
ond chance exception is raised by means of NtRaiseExcep-
tion, which leads to process termination3. If one of the two
system calls returns to KiUserExceptionDispatcher some
serious bug appeared and an exception is raised by means of
RtlRaiseException. If on the other hand a suitable handler
has been found, the handler has two choices. It can
• return so control ﬂow again resumes in KiUserExcep-
tionDispatcher
• decide not to return, which has the eﬀect, that control
ﬂow will neither come back to RtlDispatchException
nor to KiUserExceptionDispatcher
All the handlers participating in the protection are of the
former type, whereas non-returning handlers are common
among exception handling code generated by C++ compil-
ers4. So if the handler actually returns, a possibly modiﬁed
context is applied by means of NtContinue and the faulting
thread is resumed on the next schedule.
3.
ANTI REVERSE ENGINEERING TECH-
NIQUES
3Though an attached debugger gets the opportunity to ﬁx
this second chance exception before the process is terminated
4At least MS compilers behave that way
Anti Reverse engineering techniques can be used to achieve
diﬀerent kinds of eﬀects, which can make the analysis of an
executable very hard.
Several anti debugging techniques,
aiming at online analysis by using a debugger, have been
developed[4]. Most of these techniques are highly operating
system speciﬁc and utilize the fact, that the state of a pro-
cess being debugged is distinguishable from an untouched
process. This is due to the fact that the operating system
and the application behave diﬀerently in some situations,
e.g.
the operating system needs to keep additional infor-
mation in a process to mark it as being debugged (PEB,
Debugheap, etc). In addition to that it is also possible to
make static reverse engineering a diﬃcult process. Code ob-
fuscation techniques like injection of junk code, code trans-
formations or even mechanisms including fully ﬂedged vir-
tual machines have been developed. The DRM makes use
of techniques against both static and dynamic reverse en-
gineering for the sake of complicating the analysis of the
DRM system. The key protections include techniques such
as trampolines to obfuscate control ﬂow, occupying the de-
bug registers and using them to alter control ﬂow, runtime
checks of critical APIs for breakpoint opcodes, heavy use
of exceptions to interrupt ﬂow of execution and ﬁnally a P-
Code machine which encapsulates the decryption and key
setup algorithms. The following paragraphs examine these
techniques more closely and will also introduce concepts on
how to circumvent them or at least show how to ease their
impact.
3.1
Trampolines
The ﬁrst technique one comes across while analysing the
DRM protection is the use of a mechanism, which will be
denoted throughout the paper as trampolines5. The protec-
tion system allocates a few mega bytes of memory on the
heap at startup and uses this memory later on to store code
and execute it from there. The trampolines serve as a start-
ing point for all other anti reverse engineering techniques,
i.e. whenever a new ﬁle buﬀer of DRM protected data needs
to be decrypted, ﬂow of execution starts at a central pro-
cedure inside the protection. This procedure then prepares
some internal data structures needed for managing trampo-
line state and sets up structures for memory management
of the P-Code machine.
After initialization the BeingDe-
bugged ﬂag in the PEB6 is checked,
mov
eax, large fs:18h
mov
eax, [eax+30h]
movzx
eax, byte ptr [eax+2]
Listing 6: Basic debugger check
whereas fs:18h is the linear address of the TEB7 for the
executing thread. At oﬀset 30h is the pointer to the PEB
which holds the BeingDebugged ﬂag. The PEB entry can
be trivially patched with zero in order to fool the detection,
because it just marks the process as being debugged but has
no further meaning regarding debugging functionality. This
ﬂag has been well known for years and is therefore considered
5The term trampoline was borrowed from the area of shell
coding
6Process environment block
7Thread environment block