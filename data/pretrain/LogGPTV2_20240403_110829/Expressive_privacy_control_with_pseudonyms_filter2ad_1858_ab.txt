bility (intra-pseudonym) and unlinkability (inter-pseudonym) need
to extend across multiple layers, not just the application-layer. Pseu-
donyms of the same user should not have information that is both
common between each other and unique among all pseudonyms in
the system. In general, we either want identifying information to
be unique or shared among the pseudonyms of a large set of users
across the entire system—the bigger the set, the better.
Pseudonyms should also provide consistent information across
the end-to-end connection, and thus maintain network transparency.
This prevents accidental leakage of information within the contents
of a packet and strengthens the end-to-end principle, avoiding prob-
lems endemic to NATs (such as the difﬁculty of setting up peer-to-
peer connections).
3.3 Desirable Policies
With pseudonyms, our system is able to concurrently support a
variety of potential policies. Below we list a few of the use cases
that illustrate the power of our approach.
Sort by Identity: Users use their computers for a variety of dif-
ferent purposes and for a variety of different activities. It is some-
times incorrect to relate these activities, particularly if the computer
is used by multiple users or for varied interests and activities. For
example, a user may want to create separate pseudonyms for her
work-related behavior and what she does in her free time.
Banking Websites: Banking websites track users in order to
combat fraud. A common security feature of online banking makes
the observation that it is much more likely for access from a new
computer to be fraudulent than for accesses from a computer that
the user has used in the past. For this purpose, a user may want to
use a single pseudonym for all visits to her bank, to convince the
banking website that she is the same person who used it previously.
Separate Sessions: Unrelated requests for particular services
or resources may need to remain private. For example, differ-
293routers within participating networks are modiﬁed in our system.
See Figure 2 for an overview of our system.
4.1 Network Layer
In this subsection, we introduce the addressing and routing sch-
emes we use in the network layer to enable unlinkable pseudonyms.
The basic goal is to provide each host a large number of IP ad-
dresses that can be tied to pseudonyms, and as a consequence, the
network layer design should meet the following three requirements:
R1 Proper mixing: The externally visible addresses of pseudo-
nyms corresponding to a host should appear to be randomly
chosen. This will prevent destinations and routers external to
the mixing ISP from being able to link the activities associ-
ated with a host.
R2 Efﬁcient routing: Addressing and routing within the ISP should
be efﬁcient. For example, the size of routing tables with the
addition of pseudonyms should be comparable to that of rout-
ing tables without them, and the per-packet overheads should
be minimal.
R3 Easy revocation: The network should be able to periodically
remap the association of pseudonyms to externally visible
addresses in order to minimize the risks associated with brute
force attacks and compromised keys.
Traditionally, addresses in the Internet consist of a network pre-
ﬁx and a host identiﬁer, which can be further divided into a sub-
net number, and a host number. Routers in the Internet then use
longest-preﬁx matching in order to efﬁciently route over such ad-
dresses. However, if each subnet and computer has a preset preﬁx,
this would leak information to adversaries about where a particular
IP address comes from, and the scheme would fail to meet the re-
quirement R1. We introduce an addressing method where the non-
network-preﬁx portion of addresses appear to be randomly chosen
from a ﬂat address space, but are still efﬁciently routable (i.e., can
be done at line speed with the same number of routing table en-
tries).
Large Networks: We ﬁrst consider large networks, where there
are enough users to achieve unlinkability by just mixing within the
network. In this case, the portion of the address not included in the
network preﬁx should appear to be completely random so as to not
leak any information about the subnet or host.
A naïve approach would be to associate each pseudonym with
a randomly generated IP addresses in the network and route based
on IP addresses within the ISP. However, this approach requires
routers to maintain routing tables that are proportional to the num-
ber of actively used pseudonyms, with the random address alloca-
tion preventing the use of aggregation of routing table entries. Such
a scheme would fail to meet R2.
We instead leverage symmetric key encryption to encode the host
identiﬁer in a way that is not discernible to outside adversaries and
yet can be efﬁciently routable inside the ISP. At a high level, ad-
dresses are constructed using an initial base address consisting of
a network preﬁx, subnet identiﬁer, host identiﬁer, and pseudonym
number, with the ﬁrst three values representing exactly what they
do in today’s systems. The addition we make is to give each host
multiple pseudonym IDs in order to generate distinct addresses for
each pseudonym.
The base address is used to generate an encrypted address that
obfuscates identifying information and will appear to be drawn ran-
domly from a ﬂat address space. More speciﬁcally, the portion of
Figure 2: Overview of the Architecture. Color of the lines indi-
cates identiﬁability—the same colored lines are not discernible.
ent ﬁles downloaded by a single user from BitTorrent need not be
linked together and could each be in a separate pseudonym with-
out signiﬁcantly affecting usability of the system. Note that, in this
particular example, the pseudonym crosses applications as an ad-
versarial BitTorrent tracker can potentially link the BitTorrent ac-
tivity to the HTTP download of the .torrent ﬁle (and thus the web
history of the user).
Block Third-Party Tracking: Even if a user is ﬁne with giv-
ing out information to a website to maintain customization or pro-
vide analytics, third parties can aggregate information to create
comprehensive proﬁles for individual users. Blocking third party
cookies is not sufﬁcient to protect against this because of the infor-
mation listed in Section 2.1. Stronger protection can be obtained
by using a separate, random pseudonym for requests to third-party
sites.
4. DESIGN
We now outline our design and the changes we make to the net-
work, operating system, and application layers. The pseudonym
abstraction necessarily needs to be implemented across many layers-
—speciﬁcally, adversarial web servers can potentially use any in-
formation in the network layer and up in order to link pseudonyms
and track users. Each layer needs to change to accommodate the
ability to allocate/deallocate addresses, and a leak at any layer can
potentially break the illusion of separate machines.
Beyond this, our system needs to have answers for a few key
challenges:
• What do we need to tackle at each of the layers (network,
system, application)?
• What network or operating system support is necessary to
handle numerous IPs for each machine?
• How are packets classiﬁed into activities or pseudonyms and
what potential polices are possible or useful?
At a high level, our system modiﬁes client machines and ap-
plications to allow for usage of pseudonyms, and pseudonyms are
mixed with those of other users in the same network/ISP or part-
nering networks. Networks are responsible for providing IP mixing
for their customers, and DHCP servers are responsible for allocat-
ing multiple IP addresses to the client upon request (i.e., provide
an IP address per pseudonym). Only clients, their applications, and
InternetRemote ServerLargeNetworkLargeNetworkSmallNetworkDHCPServer294This increases the work done by the DHCP server by a factor of
two, which we believe is acceptable overhead.
It is also possible to design almost stateless DHCP in this system.
If the conversion between hardware address to host ID is consistent
(e.g., with a consist hash function), then the DHCP server does not
need to store any mappings, it simply needs to know the encryption
key and hash function and can generate pseudonym IDs on-the-ﬂy.
Any machine with those two pieces of information can serve as a
DHCP server. It is possible that this technique can result in redun-
dant pseudonym IDs, but the host is required to maintain the set of
encrypted addresses currently being used by all of its applications
and will ﬁlter out duplicates before passing on the DHCP results
to the requesting application. Note that the same pseudonym ID
should not be used twice for the same host and key in order to pre-
vent unintentional linking of activity. If we run out of pseudonym
IDs, either the network administrator should have allocated a larger
portion of the address for the pseudonym ID or the host should ac-
quire a new host ID.
Lastly, we allow for truly static IP addresses within a network
(e.g., for web servers) by reserving preﬁxes for DMZ IP addresses.
For example, the network can specify that all addresses starting
with 0000 or 1000 be reserved for the DMZ. Such addresses are
not encrypted, and like the 1-bit signature, the DHCP server will
throw out and regenerate any encrypted addresses that overlap with
this range. The length of these reserved preﬁxes is variable and so
is the amount of extra work done by the DHCP server.
Smaller Networks: For smaller networks that do not have enough
users to hide individuals effectively, one solution is to merge their
address pools and delegate address assignments to a larger, possibly
adjacent, network. Allocation requests from hosts in the smaller
network will be forwarded to the larger network’s DHCP server.
Because there is no mutual trust among the two networks, we add
two more requirements for this case:
R4 The larger network (L) should not learn about or control the
mixing of the smaller network’s (S’s) hosts.
R5 S should not learn L’s encryption key.
Figure 4: Hierarchy of encrypted addresses for smaller and
larger networks. Note that preﬁx is not shown here. The ﬁnal
encrypted ID is preﬁxed with the larger network’s preﬁx.
To fulﬁll these requirements, address allocation is done hierar-
chically as shown in Figure 4. Upon receiving a DHCP request
from a host, S generates psuedonym IDs for the host. Then, it
encrypts (cid:104)hostID:pseudonymID(cid:105) with a smaller block encryption
cipher. The encrypted address is forwarded to L, and L attaches
it to S’s ID assigned by L, and encrypts it again with L’s encryp-
tion method. Finally, this resulting address is used along with L’s
network preﬁx as the externally visible IP address for the endhost.
Since this address has L’s network preﬁx, incoming packets will
be ﬁrst routed to L. Upon receiving a packet, L decrypts the address
with its own key and ﬁnds out that it needs to send the packet to S.
Figure 3: Translation of a base address and encrypted, IPv6
address. Note that some of this address space may be reserved
for a DMZ. The base address is not known to anyone except
the mixing network’s routers and DHCP servers; The outside
world and end host only see the encrypted address.
the address that includes the subnet ID, host ID, and pseudonym ID
is encrypted using a symmetric key as shown in Figure 3. Assum-
ing the network has a /64 preﬁx, the later part of the base address is
encrypted with 64-bit symmetric key block encryption3. The key is
only known by the routers and DHCP servers, as are all pieces of
the base address to protect against known-plaintext attacks.
On each incoming packet, routers within the network perform a
single symmetric key decryption on the destination address to un-
cover the base address, which they can then use to forward packets
efﬁciently. Base addresses can be longest-preﬁx routed and aggre-
gated on subnets or hosts, exactly as in the current Internet. We
therefore do not increase routing-table state compared to current
IPv6 networks. Also note that we maintain network transparency
as routers do not overwrite the IP address, and the end host sees the
same encrypted address as the other end of the connection.
Guessing the symmetric key with a brute-force attack is com-
putationally very difﬁcult; while a host knows that the encrypted
addresses provided to it are obtained from base addresses that have
a common set of bits, exploring the entire key space to identify
the secret symmetric key is computationally challenging (e.g., our
prototype uses TDES for encryption, where the key space has 2168
keys). However, best practices for key management require ISPs
to periodically change the encryption keys. To allow easy revoca-
tion (R3), networks can create a new key while allowing users to
phase out old keys by appropriating a signature bit at the beginning
of the encrypted ID and requiring that all encrypted addresses that
use a particular key have that bit set at a speciﬁc value—there can
only be two active keys at any given time and all addresses without
the correct bit for the current key will be thrown out. This may
decrease the available address space unevenly for particular hosts,
but the average should simply be a factor of 2. Each router main-
tains up to two symmetric keys (the active key and possibly the old
key) and determines which key to use based on the initial bit of the
encrypted ID.
When a machine wishes to allocate IP addresses, it broadcasts
a DHCP request along with its hardware address and the number
of desired pseudonym IDs. The DHCP server will generate the
requested number of random pseudonym IDs, and use them to gen-
erate a set of base addresses. It will then encrypt them with the
active secret key and then send them back to the host. If any of the
addresses do not have the correct signature bit for the current key,
they will be thrown out and replaced before being sent to the host.
3The recommended allocation for end sites is at least one /64
block [19]. In the case of larger blocks, we can simply ignore the
higher bits or segment the users across multiple /64 blocks.
64bitSubnet IDHost IDPseudonym IDBaseNetwork PreﬁxEncrypted IDEncryptDecryptEncrypted64bitNetwork PreﬁxSSignature bit indicating current keyHost IDPseudonym IDEs(Host ID:Pseudonym ID)Es(Host ID:Pseudonym ID)Smaller Net IDEl(Smaller Net ID:Es(Host ID:Pseudonym ID))Base ID part for smaller networkEncrypted ID part for smaller networkBase ID part for larger networkEncrypted ID part for larger network295Since S might not be adjacent to L, L encapsulates the incoming
packet with an address of Preﬁx(S):Es(cid:104)HostID:PseudonymID(cid:105) and
routes it towards S’s ingress routers. Upon receving this packet,
S can locate the ﬁnal destination within its network by decrypting
the address stored in the encapsulation header with its key. The en-
capsulation is stripped off just before the packet is delivered to the
endhost. Note that potential MTU violation may lead fragmenta-
tion, but it could be made to work reliably in IPv6 [24].
As HostID is encrypted together with pseudonym ID before a
packet is sent to L, L cannot determine whether two IDs are allo-
cated to a single host. Also, L’s encryption key is not exposed to
S. Thus, this mechanism meets R4 and R5. Support for key revo-
cation and DMZ can be achieved just as with larger networks (as
discussed earlier).
Deployability: The proposed architecture above does not re-
quire changes to the IP address format or inter-domain routing.
Thus, it is partially deployable (i.e., only participating networks
can adopt the above addressing and routing mechanisms without af-
fecting other networks). While the design described in this section
provides an appropriate long term solution, one which allows net-
work operators to natively contribute to greater privacy, it requires
changes to an ISP’s network components (e.g., DHCP servers and
routers).
To ease adoption without requiring changes to all routers in the
network, translators can be deployed in the network at the appro-
priate choke points through which all trafﬁc passes. Before packets
are introduced into the network, the translator performs a decryp-
tion and rewrites the IP address. Additionally, just before a packet
arrives at the end host in the network or just before the packet is
delivered to the application at the end host, another translator re-
encrypts the address, thus avoiding packet header decryption at ev-
ery hop inside the ISP. Modiﬁcations to DHCP servers are still re-
quired in order to provide end hosts with encrypted addresses, but
these modiﬁcations are relatively minor.
Moreover, we can also use overlay solutions to traverse portions
of the Internet that do not support IPv6. These include tunnel-
ing over an IPv6 broker and application-layer proxies (e.g., HTTP
proxies) We will describe the design and implementation of one
such proxy and the corresponding browser extension in Section 6.
1: n = 100;
2: pseudonyms = allocpseudonym(n);
3: bzero((void∗)&hints,sizeof(hints));
4: hints.ai_family = AF_INET6;
5: hints.ai_socktype = SOCK_STREAM;
6: hints.ai_protocol = IPPROTO_TCP;
7: getaddrinfo(“www.google.com”,“80”,&hints,&dest);
8: for (i = 0;i < n; ++i) do
9:
10:
11:
12:
13:
14: end for
sock = socket(INET6,SOCK_STREAM,PROTO_TCP);
bind(sock,&pseudonyms[i],sizeof(pseudonyms[i]));
connect(sock,dest → ai_addr,dest → ai_addrlen);
send(sock,data,dataLen,0);
close(sock);
Figure 5: Example code that allocates 100 pseudonyms and
uses them to send data using 100 different IP addresses
4.3 Application Layer