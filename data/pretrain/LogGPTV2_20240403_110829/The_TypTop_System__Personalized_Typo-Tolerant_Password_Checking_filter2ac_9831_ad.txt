game OFFGUESSΠ,𝒯 . We note that this analysis is independent
of the specific caching scheme used by TypTop; the effect on se-
curity of different such schemes will be surfaced in Section 5.2
when we bound the success probability of an attacker in game
OFFGUESSΠ,𝒯 .
As the first step in our reduction, we introduce PChecker[Π] into
game OFFDISTΠ,𝒯 , via an intermediate game OFFDISTΠ,𝒯 defined
to be identical except we replace Checker[Π] with PChecker[Π],
and then use the values in the final plaintext state ¯𝑠𝑛 = (S, T, W, 𝛾)
to compute the final (encrypted) challenge state 𝑠𝑛 as specified
by the scheme. We bound the transition between the games by
PChecker[Π](𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛)
𝛾 ←$ Z𝜔 ; (S0, 𝒰0) ←$ CacheInit(𝑤0) ; T[0] ← 𝑤0
For ( ˜𝑤, 𝑖) ∈ 𝒰0 do T[𝑖] ← ˜𝑤
For 𝑘 = 1, . . . , 𝑛 do
𝑏 ← 0
For 𝑖 = 0, . . . , 𝑡 do
If ˜𝑤𝑘 = T[𝑖] then
𝑏 ← 1 ; 𝜋 ←$ Perm(𝜔)
(S𝑘, 𝒰𝑘 ) ←$ CacheUpdt(𝜋, S𝑘−1, ( ˜𝑤𝑘, 𝑖), W[1], . . . , W[𝜔])
For ( ˜𝑤′, 𝑗) ∈ 𝒰𝑘 do T[𝑗] ← ˜𝑤′
For 𝑗 = 1, . . . , 𝑡 do T′[𝜋[𝑗]] ← T[𝑗]
For 𝑗 = 1, . . . , 𝜔 do W[𝑗] ← 𝜀
If 𝑏 = 0 then W[𝛾] ← ˜𝑤𝑘 ; 𝛾 ← 𝛾 + 1 mod 𝜔
¯𝑠𝑛 ← (S, T, W, 𝛾)
Return ¯𝑠𝑛
Figure 5: The plaintext transcript checking scheme associated to Π
with caching scheme Cache = (CacheInit, CacheUpdt). All entries of
tables T and W are initially set to ⊥ and 𝜀, respectively.
invoking the following lemma, which is implied by a reduction to
the robustness of SE. We give the full proof in Appendix A.3.
Lemma 5.1. Let (𝑝, 𝜏 ) be an error setting with associated transcript
generator 𝒯 , and let Π = (Reg, Chk) be TypTop’s password checker,
with associated plaintext checker PChecker[Π]. Let Π be implemented
using the canonical PBE scheme PBE[SH, SE] = (E, D) where SE is a
symmetric encryption scheme and SH is a random oracle. Then for
any adversary 𝒜 running in time 𝑇 and making at most 𝑞 queries to
SH, there exist adversaries 𝒜′, ℛ such that
) +2·Advrob
SE (ℛ) +
Advoffdist
,
′ ≈ 𝑇 , and 𝒜′ makes at most
and, moreover, 𝒜′ and ℛ run in time 𝑇
𝑞 queries to SH. Here 𝑡 denotes the cache size, SE takes as keys uniform
bit strings of length 𝜅, and 𝑛 denotes the length of the transcript.
Π,𝒯 (𝒜) ≤ Advoffdist
(𝑡 · (𝑛 + 1) + 1)2
Π,𝒯 (𝒜′
2(𝜅−1)
We now state our main theorem in which we upper bound the
advantage of an attacker 𝒜 in game OFFDISTΠ,𝒯 .
Theorem 5.2. Let (𝑝, 𝜏 ) be an error setting with associated tran-
script generator 𝒯 , and let Π = (Reg, Chk) be TypTop’s password
checker with associated plaintext checker PChecker[Π]. Let Π be im-
plemented using the canonical PBE scheme PBE[SH, SE] = (E, D)
where SE is a symmetric encryption scheme and SH is a random
oracle. Then for any adversary 𝒜 running in time 𝑇 and making at
7
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
Chatterjee et al.
SE
(ℬ, 𝑡) +
(𝑡 · (𝑛 + 1) + 1)2
most 𝑞 queries to SH, there exist adversaries ℬ,𝒞,ℛ,𝒢 such that
(𝑡 + 1)2
Advoffdist
2ℓsalt
Π,𝒯 (𝒜) ≤ Advoffguess
(𝒢, 𝑞) + 2 · Advmkror
Π,𝒯
PKE (𝒞) +
SE (ℛ) + 2 · Advror
+ 2 · Advrob
′ ≈ 𝑇 . Here 𝑡 denotes the
and, moreover, ℬ,𝒞,ℛ,𝒢 run in time 𝑇
cache size, SE takes as keys uniform bit strings of length 𝜅, and 𝑛
denotes the length of the transcript. The salts used to derive keys for
the canonical PBE scheme are of length ℓsalt. Adversary ℬ makes
𝑡 queries to its encryption oracle, and 𝒞 makes 𝜔 + 1 queries to its
encryption oracle, where 𝜔 is the length of the wait list.
2(𝜅−1)
The above theorem shows that the distinguishing advantage of
an attacker in game OFFDISTΠ,𝒯 is upper bounded by the prob-
ability that they can guess either the real password or a cached
typo (which comprises the first term of the right hand side of the
above equation) plus the remaining terms which, for the appro-
priate choice of cryptographic components and key sizes, can be
assumed to be negligibly small. This implies that an attacker who
compromises the state of the adaptive checker in an offline attack
learns no information about the underlying password and the login
pattern, unless they can guess one of the cached values. We will
analyze the probability that this occurs in Section 5.2.
We sketch the proof here and defer a detailed treatment to
Appendix A.3. We first apply Lemma 5.1 to transition to game
OFFDISTΠ,𝒯 and thereby introduce the plaintext checker. We then
argue by a series of game hops, beginning with the cache state
𝑠𝑛 as in game OFFDISTΠ,𝒯 with challenge bit 𝑏 = 0. We then
modify the PBE scheme to sample salts without replacement; this
will ultimately be used to ensure that the attacker has to sub-
mit guesses to distinct cache positions when we reduce to game
OFFGUESSΠ,𝒯 . With this in place, we further set a flag which is set
only if the attacker queries one of the cached values to his random
oracle, allowing us to eventually reduce to the success probability
of OFFGUESSΠ,𝒯 . Finally we use the real-or-random ciphertext
security of the SE and PKE schemes to replace all of the real ci-
phertexts in the state of the checker with random ciphertexts, thus
transforming the state into a random one as per game OFFDISTΠ,𝒯
with challenge bit 𝑏 = 1.
On the use of PBKDFs. Above in our analysis we have abstracted
away the details of the slow hash SH and modeled it simply as a
random oracle. This allows accounting for queries to SH as unit cost,
which will suffice for our analysis. One can go further, however,
replacing SH with a true password-based key derivation function
and converting the unit cost to that of computing the hash func-
tion (e.g., the cost of 𝑐 applications of a standard hash function, in
the case that SH is replaced by a hash chain construction such as
PKCS#5). See for example [5, 16, 27] for a discussion of relevant
results.
5.2 Security Against Offline Guessing Attacks
Having reduced the offline security of TypTop to the guessing
game OFFGUESS, we now upper bound the success probability of
an attacker in this game. Recall that 𝑝 denotes the distribution of
passwords chosen by users, 𝒲 denotes the support of 𝑝, and 𝜏
,
8
denotes the family of typo distributions for each password 𝑤 ∈ 𝒲.
When TypTop is used in a given error setting, the probability
that a typo lies in the cache of a given password depends inherently
on the caching policy in use. For an error setting and instantiation of
TypTop, we let ˜𝜏 denote the induced cache inclusion function where
˜𝜏𝑤 ( ˜𝑤) denotes the probability that ˜𝑤 is included in the typo cache
of password 𝑤. We provide a general security analysis of TypTop
in terms of ˜𝜏, then concretize our analysis by empirically modeling
˜𝜏 for a real world error setting and a number of caching policies.
Letting 𝑇 [𝑗] denote the distribution of the typo at position 𝑗 in the
cache, the fact that the set of cached typos are distinct and randomly
permuted implies that Pr[𝑇 [𝑗] = ˜𝑤 | 𝑇 [0] = 𝑤] = 1
𝑡 · ˜𝜏𝑤 ( ˜𝑤), for
all 0 < 𝑗 ≤ 𝑡.
We would like to establish a class of typo distributions for which
adding typo-tolerance via TypTop offers no security degradation
over an exact checker. Since an exact checker accepts the correct
password only, the analogous guessing game has the adversary
attempting to guess a user’s password with a budget of 𝑞 guesses,
and we denote the success probability achieved by an optimal at-
tacker as 𝜆𝑞. It is easy to see that the attacker’s best strategy is to
guess the 𝑞 most probable passwords according to the distribution,
so it follows that 𝜆𝑞 =
𝑖=1 𝑝(𝑤𝑖), where 𝑤1, 𝑤2, . . . denote the
passwords in 𝒲 sorted in decreasing order of their probability.
We define the edge-weight of a typo ˜𝑤 under the induced cache
inclusion function ˜𝜏 to be 𝑏 ˜𝜏 ( ˜𝑤) =
𝑤∈𝒲 ˜𝜏𝑤 ( ˜𝑤). Notice that for a
given typo ˜𝑤, we have that ˜𝜏𝑤 ( ˜𝑤) ∈ [0, 1] for each password 𝑤, so
in theory the edge-weight could be very large. We say that an error
setting is 𝑡-sparse with respect to TypTop with cache size 𝑡 and a
particular caching scheme, if for all ˜𝑤 ∈ ℳ it holds that 𝑏 ˜𝜏 ( ˜𝑤) ≤ 𝑡.
In the following theorem, we show that if an error setting is 𝑡-sparse
then there is no speedup in an optimal offline attack against TypTop
as opposed to an optimal offline attack against an exact checker
ExChk.
Theorem 5.3. Let (𝑝, 𝜏 ) be an error setting with associated tran-
script generator 𝒯 , and let Π = (Reg, Chk) be TypTop’s password
checker with typo cache size 𝑡. Then if the error setting is 𝑡-sparse
with respect to Π, then for any adversary 𝒢, it holds that
(cid:80)𝑞
(cid:80)
𝑞(cid:88)
𝑖=1
Advoffguess
Π,𝒯
(𝒢, 𝑞) ≤ 𝜆𝑞 where 𝜆𝑞 =
𝑝(𝑤𝑖)
probability induced by the former set is simply(cid:80)
The full proof is given in Appendix A.4; we provide a brief sketch
here. We begin by splitting the set of guess / index pairs output by
𝒢 into two exclusive sets — a set 𝑍0 consisting of guesses at the real
password in cache position T[0], and a set 𝑍1 consisting of guesses
at the cached typos in positions T[𝑗] where 0 < 𝑗 ≤ 𝑡. The success
𝑤∈𝑍0 𝑝(𝑤). The
success probability contributed by the latter set is the expectation —
over all passwords not already accounted for by the guesses at the
real password in 𝑍0 — that one of these cache typo guesses succeeds.
We show — via a general result which allows us to succinctly upper
bound a certain class of summations in which this latter success
probability lies — that the 𝑡-sparsity of the error setting implies that
the guessing advantage arising from both sets is upper-bounded by
𝜆𝑞, as required.
Are real world error settings 𝑡-sparse? It remains to estab-
lish whether real world error settings are 𝑡-sparse; if so, then
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
maximum edge-weight of only 3.2 for the PLFU policy which we
shall ultimately choose for deployment (see Section 6).
Moreover, we find that the maximum edge-weight increases
minimally in the range 5 × 104 ≤ 𝑘 ≤ 105 for all caching poli-
cies considered. This, coupled with the fact that the maximum
edge-weights are well below the required threshold of 5.0 for all 𝑘
considered, indicates that if we were able to perform simulations
on the entire password distribution, we would still find the error
setting to be 5-sparse as required.
The top 105 passwords in the RockYou leak share some struc-
tural similarities (e.g., 90% of these passwords contain only letters
and numbers, and only 5% are more than 10 characters in length).
To check that these similarities are not biasing our results, and to
gain further support for our conclusion that the simulated error
setting (𝑝, 𝜏 ) is 5-sparse, we repeat the above experiment using two
different sets of passwords to estimate ˜𝜏𝑤 and the corresponding
edge-weights. The first set consists of 𝑘 passwords chosen ran-
domly from the support of 𝑝, and the second consists of the 𝑘 most
probable passwords when the top one million passwords are ex-
cluded from consideration. As before, we consider all values of
𝑘 ∈ {1, . . . , 10} × 104.
We observed similar trends to those displayed in Figure 6, except
that in these two experiments the maximum observed edge-weights
are even better (in terms of security) at 2.8 and 3.0 respectively for
the MFU caching scheme, and less for all other caching policies.
This is likely to be because passwords which are distinct in structure
induce more diverse sets of typos. This results in fewer typos being
shared between multiple passwords, which in turn decreases their
observed edge-weights.
To assess the benefit of the admissible typo policy described in
Section 4, we additionally repeated the above experiments with
these restrictions removed one at a time. We found that the error
setting (𝑝, 𝜏 ) no longer remains 5-sparse if any of the three restric-
tions are removed. These simulations emphasize the importance of
the admissible typo policy for security.
5.3 Security Against Online Attacks
We briefly discuss TypTop’s resistance to online guessing attacks,
in which an attacker attempts to impersonate a user via the login
API of the system. The main difference between online and offline
attacks against TypTop is that in the former, each guess the attacker
makes is checked against every entry in the cache, whereas in the
latter it is only checked against the specific cache slot guessed. We
provide full details of these notions and our analyses in Appen-
dix A.5
To estimate the decrease in the online security of TypTop com-
pared to an exact checker, we approximate the success probability
of an optimal online attacker using a greedy algorithm similar to
that used by Chatterjee et. al. in [8], and data from real world pass-
word / typo distributions. We show that security loss is minimal for
all caching schemes (namely a loss of 0.2% for the MFU policy, and
less than 0.1% for all others, including the PLFU caching scheme
which we ultimately choose for deployment). We also describe a
simple blacklisting strategy, in which a small subset of the typos
most beneficial to an attacker are excluded from the typo cache,
and prove that this reduces the security loss to zero.
9
(cid:80)
Figure 6: The change in the maximum edge-weight for different
number of passwords considered from RockYou leak.
Theorem 5.3 shows that we can enjoy the typo-tolerance offered by
TypTop with no loss in offline security compared to an exact checker.
It is easy to see that not every error setting is 𝑡-sparse; e.g., imagine
(𝑝, 𝜏 ) such that all passwords are mistyped to the same typo, with
no other typos possible. This one typo will lie in the cache of every
password with probability close to 1, greatly degrading security
and pushing the maximum edge-weight well above 𝑡.
In this section we use simulations to show that real world error
settings (𝑝, 𝜏 ) are indeed 𝑡-sparse. We model the password distri-
bution 𝑝 using password data observed in the RockYou password
leak [33], which consists of 14 million unique passwords from 32
million users. We sanitized the Rockyou data by removing pass-
words longer than 50 characters (as these are unlikely to be human
chosen passwords) and shorter than 6 characters (as per common
password policy recommendation), and set 𝑝 equal to the resulting
distribution. We model the typo distribution 𝜏 using data on user’s
password typing habits gathered via an MTurk experiment (see
Section 6.1), and the data released with [8]. We describe how we