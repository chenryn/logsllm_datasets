title:The Dropper Effect: Insights into Malware Distribution with Downloader
Graph Analytics
author:Bum Jun Kwon and
Jayanta Mondal and
Jiyong Jang and
Leyla Bilge and
Tudor Dumitras
The Dropper Effect: Insights into Malware Distribution with
Downloader Graph Analytics
Bum Jun Kwon
University of Maryland
College Park, MD, USA
PI:EMAIL
Jayanta Mondal
University of Maryland
College Park, MD, USA
PI:EMAIL
Jiyong Jang
IBM Research
Yorktown Heights, NY, USA
PI:EMAIL
Leyla Bilge
Symantec Research Labs
France
PI:EMAIL
Tudor Dumitras,
University of Maryland
College Park, MD, USA
PI:EMAIL
ABSTRACT
Malware remains an important security threat, as miscreants con-
tinue to deliver a variety of malicious programs to hosts around
the world. At the heart of all the malware delivery techniques are
executable ﬁles (known as downloader trojans or droppers) that
download other malware. Because the act of downloading software
components from the Internet is not inherently malicious, benign
and malicious downloaders are difﬁcult to distinguish based only
on their content and behavior.
In this paper, we introduce the
downloader-graph abstraction, which captures the download acti-
vity on end hosts, and we explore the growth patterns of benign and
malicious graphs. Downloader graphs have the potential of expo-
sing large parts of the malware download activity, which may othe-
rwise remain undetected. By combining telemetry from anti-virus
and intrusion-prevention systems, we reconstruct and analyze 19
million downloader graphs from 5 million real hosts. We identify
several strong indicators of malicious activity, such as the growth
rate, the diameter, and the Internet access patterns of downloader
graphs. Building on these insights, we implement and evaluate a
machine learning system for malware detection. Our system achie-
ves a 96.0% true-positive rate, with a 1.0% false-positive rate, and
detects malware an average of 9.24 days earlier than existing anti-
virus products. We also perform an external validation by exami-
ning a sample of unlabeled ﬁles that our system detects as mali-
cious, and we ﬁnd that 41.41% are blocked by anti-virus products.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and protection
General Terms
Security
Keywords
Downloader Graph; Malware classiﬁcation; Early detection
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813724.
1.
INTRODUCTION
Because cyber criminals constantly re-pack and obfuscate ma-
licious software (malware) to evade detection, the security com-
munity has turned its attention to content-agnostic techniques for
detecting malware [3, 5, 10, 14, 20, 28, 30, 31]. For example, re-
search has generally focused on understanding the properties of the
global malware distribution networks, such as their business mo-
dels [3], their network-level behavior [10, 30], or their server-side
infrastructure [14,31]. Prior research has also investigated how ma-
lware samples are downloaded on end hosts, e.g., through drive-by-
download attacks [20] (which exploit vulnerabilities in web brow-
sers when users are surﬁng the Web), pay-per-install infrastructu-
res [3] (which are paid services that distribute malware on behalf
of their afﬁliates), or self-updating malware (e.g., worker bots from
recent botnets [35]). Comparatively, less attention has been given
to the executable ﬁles (colloquially called downloader trojans or
droppers) that download a variety of supplementary malware (cal-
led payloads) at the heart of malware distribution techniques.
It is not trivial to distinguish benign and malicious downloa-
ders simply based on their content and behavior because the act of
downloading software components from the Internet is not a sign
of inherently malicious intent. For example, many benign applica-
tions download legitimate installers and software updates. Owing
to social engineering or drive-by-download attacks, benign appli-
cations (e.g., web browsers) download malicious programs, which
may then download additional malware. Some malware droppers
are known to be active for over two years [23] due to the difﬁculty
of determining their maliciousness.
However, the downloader-payload relationship of executable ﬁ-
les on a host, and the downloader graphs generated by the rela-
tionship, can provide unique insights into malware distribution. Fi-
gure 1 shows a real downloader graph example that illustrates this
opportunity. A benign web browser (node A) downloads two ﬁles
from the same domain: nodes B and D that are unlabeled (i.e., not
known to be malicious or benign). However, node B downloads
additional ﬁles, some of which (nodes C and F) are detected as ma-
licious, suggesting that node B, and potentially node D downloaded
from the same domain as node B, as well as all of the nodes rea-
chable from them in the downloader graph, are likely involved in
malware distribution. Consequently, by analyzing the downloader
graphs on a host we can identify large parts of the malware down-
load activity, which may otherwise remain undetected.
In this paper, we conduct a systematic analysis of downloader
graphs in the wild, exposing the differences between the growth
1118to detect unknown malware an average of 9.24 days earlier than
the anti-virus products employed by VirusTotal. Finally, we per-
form an external validation of the classiﬁer by querying VirusTotal
for some of the unlabeled samples predicted to be malicious, and
ﬁnd that 41.41% of them are reported as malicious by anti-virus
products.
In summary, the paper makes the following contributions:
• We build a large data set of malicious and benign download
activities on 5 million real hosts by reconstructing download
events from IPS and AV telemetry. We also build a ground
truth of malicious and benign downloaders by combining three
data sources.
• We propose a graph-based abstraction to model the download
activity on end hosts, and perform a large measurement study
to expose the differences in the growth patterns between benign
and malicious downloader graphs.
• We use insights from our measurements to build a malware de-
tection system, using machine learning on downloader graph
features, and evaluate it using both internal and external perfor-
mance metrics.
Outline. The rest of the paper is organized as follows. In Section 2
we overview the threat of malicious downloaders and we state our
goals. In Section 3 we formally introduce the downloader graph
abstraction, and we discuss our data sources and our method for
constructing downloader graphs. We then present our measurement
results in Section 4, followed by the design and evaluation of our
classiﬁer in Section 5. In Section 6 we discuss the implications of
our results, and in Section 7 we review the related work.
2. THREAT MODEL
In this section, we present an overview of the security threats
imposed by downloaders and articulate the goals of our research.
Overview of Downloaders. Applications often have a particu-
lar component that is responsible for determining which software
components are required to be installed or updated, and for down-
loading them from remote servers. In this work, we refer to this
component as the downloader.
The software delivery process beneﬁts from the ubiquitous ac-
cess to the Internet, e.g., efﬁcient updating mechanisms, and cus-
tomizable software installation. As a matter of fact, these beneﬁts
make the distribution of both legitimate and malicious software re-
liable and easy. Multi-phase malware ﬁrst gains a foothold on a sys-
tem, and installs a small executable—called droppers or downloa-
der trojans—which then downloads additional components, such
as the rest of the malicious payload. An early example of such
multi-phase malware was the Sobig email worm discovered in
2003, which downloaded additional ﬁles to set up spam relay ser-
vers on infected machines and to update itself [27].
The next evolution step was the emergence of general-purpose
droppers that could be conﬁgured to propagate different malware
families (e.g., Bredolab trojan [29]). Some general-purpose dro-
ppers represent the client-side part of pay-per-install (PPI) infras-
tructures, which allows malware authors to install arbitrary execu-
tables on thousands of hosts and to select their targets based on
the properties of those hosts (e.g., their geographical locations) [3].
These infrastructures also have server-side systems designed to be
resilient to takedown efforts [3,14,18], which may continue to ope-
rate for over two years [23]. They employ sophisticated techniques
to disseminate malicious payloads to a large number of hosts, e.g.,
drive-by-downloads [20], social engineering, search engine poiso-
ning [13], and provide this functionality as a service [3]. PPI down-
loaders represent only a fraction of the current population of down-
Figure 1: Example of a real downloader graph and the inﬂu-
ence graphs of two selected downloaders.
patterns of benign and malicious graphs. We construct downloader
graphs by combining telemetry collected by Symantec’s intrusion
prevention systems (IPS) and anti-virus (AV) products on real hosts
targeted by malware distribution networks. This data is collected
from users who opt in for Symantec’s data sharing program and
is available on the WINE analytics platform [7]. Speciﬁcally, we
correlate reports of Portable Executable (PE) ﬁle downloads over
HTTP with records of executables present on end hosts to recon-
struct the download activity on 5 million Windows hosts around the
world. We further introduce the notion of inﬂuence graph (marked
by dotted outlines in Figure 1), which is the subgraph reachable
from a given downloader on the downloader graph. Intuitively, the
inﬂuence graph represents the download activity that a downloa-
der has caused on a host. We identify 19 million inﬂuence graphs
in our data. We label 15 million of these graphs as benign and
0.25 million as malicious, using data from VirusTotal, the Natio-
nal Software Reference Library (NSRL), and an additional ground
truth data set we received from Symantec.
We demonstrate that the growth rate of inﬂuence graphs is a
strong indicator of malicious activity, as successful malware cam-
paigns deliver their payloads slowly to evade detection. Speciﬁca-
lly, almost 88% of inﬂuence graphs with average inter-download
times greater than 1.5 days/node are malicious, and 65% of the
malicious inﬂuence graphs have inter-download times above this
threshold. Additionally, 84% of the inﬂuence graphs with diameter
≥ 3 are malicious, as competition and arbitrage opportunities in
the underground economy [3] result in situations where malicious
droppers download other droppers. We also ﬁnd that the average
number of downloaders accessing a domain and the average nu-
mber of ﬁles downloaded from a domain, computed per inﬂuence
graph, are relevant to certain classes of benign and malicious down-
loaders. Surprisingly, 55.5% of malicious downloaders are digita-
lly signed (22.4% have valid signatures), suggesting that the or-
ganizations responsible for a large part of the malware download
activity are not trying to evade attack attribution.
We use the properties of inﬂuence graphs as features to learn a
classiﬁer for identifying malicious executables. Because of the di-
fferences in the inﬂuence graphs depending on malware classes and
maturity stages produced by the slow growth rates (which could be
perceived as a noise by a learning algorithm), we choose to employ
a random forest classiﬁer that is known to perform well with such
variability in the data. Our classiﬁer achieves a 96.0% true positive
rate, with a 1.0% false positive rate, using 10-fold cross validation.
We also estimate, conservatively, that our classiﬁer would be able
ABCDEGIExplore.exechrome_setup.exechrome_setup[2].exesizlsearch.adFsetup.exesizlsearchuninstall.exed3rmfxfj03.cloudfront.netinstall-cdn.sizlsearch.netinstall-cdn.sizlsearch.netchrome_setup[1].exetheappcenter.comsecure.2-pn-installer.comBenignMaliciousUnlabeledsecure.2-pn-installer.comIG(B)IG(C)1119Inﬂuence graphs
Files (graph nodes)
Total Downloaders
Benign downloaders
Malicious downloaders
Download events (graph edges)
Domains accessed
Hosts
19 million
24 million
0.9 million
87,906
67,609
50.5 million
0.5 million
5 million
Table 1: Summary of our data sets and ground truth.
loaders, as simpler and older forms continue to operate [23]. In
consequence, malware samples often rely on the functionality pro-
vided by downloaders.
Problem Statement. In this paper, we conduct a systematic ana-
lysis of downloaders in the wild with a special focus on the rela-
tionship between the downloaders and the supplementary execu-
tables they download. We represent the transitive closure of this
relationship using a graph abstraction. Our ﬁrst goal is to uncover
the differences between the graph structures constructed from be-
nign and malicious download activities. By leveraging the insights
obtained from the analysis, our second goal is to propose a new me-
thod to detect malicious downloaders. Our method could improve
the overall performance of malware detectors by providing earlier
warnings for malicious download activities. This approach com-
plements existing host-based malware detection systems as it helps
comprehend how various ﬁles are delivered to end-hosts using the
dropper-payload relationship to connect the dots.
We also have some non-goals: in this paper, we do not aim to
analyze the server-side infrastructure and network-level behavior
of malware delivery networks, to determine for how long these ne-
tworks remain operational, to proﬁle the organizations involved in
malware distribution, or to improve network security. Rather, our
main goal is to complement existing approaches focusing on server-
side infrastructures [14, 31] and network-level behaviors [10, 30].
3. DOWNLOADER GRAPH ANALYTICS
We start our discussion by describing our data sets, followed by
a formal description of the downloader graph abstraction and how
we construct the downloader graphs from the collected data.
3.1 Data Sources
We infer the download activities on 5 million end-hosts using
data available on the Worldwide Intelligence Network Environment
(WINE) [7], a platform for data intensive experiments in cyber se-
curity provided by Symantec. WINE contains security telemetry
collected on real hosts that are often targeted by cyber attacks. The
data is collected from the users who opt in for Symantec’s data
sharing program, and does not include personally identiﬁable in-
formation. Speciﬁcally, we use two WINE data sets: (a) binary
reputation, and (b) intrusion prevention system telemetry. The data
sets are stored as SQL relations consisting of multiple columns. We
extract relevant columns from each relation, and join them to gene-
rate the data sets we require for our study. Table 1 summarizes our
data.
The binary reputation data includes summarized information
about all binary download activities on the Symantec’s customers’
machines. From this data we collect the following information:
the server-side timestamp of the event, the unique identiﬁer for the
machine that initiated the download, the name and SHA2 hash of
the downloaded ﬁle, and the SHA2 hash of the parent ﬁle (an ar-
chive including the downloaded ﬁle or the actual downloader). We
extract information about 24 million distinct ﬁles, including 0.4 mi-
llion parent ﬁles, from the binary reputation data set.
The intrusion prevention system (IPS) telemetry data provides
information about malicious activities detected on network streams.
In addition, the IPS telemetry includes logs of network activity on
the host that might not be necessarily tied to any malicious activi-
ties. The IPS telemetry reports downloads of Portable Executable
(PE) ﬁles over HTTP. From this data set, we extract the unique
identiﬁer of the host, the MD5 hash of the process initiated the ne-
twork activity (portal in IPS jargon), the server-side timestamp and
the URL from which the portal downloads the binary. From the IPS