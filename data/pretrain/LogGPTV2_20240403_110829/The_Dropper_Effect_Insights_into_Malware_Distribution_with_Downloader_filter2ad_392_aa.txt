# The Dropper Effect: Insights into Malware Distribution with Downloader Graph Analytics

**Authors:**
- Bum Jun Kwon, University of Maryland, College Park, MD, USA
- Jayanta Mondal, University of Maryland, College Park, MD, USA
- Jiyong Jang, IBM Research, Yorktown Heights, NY, USA
- Leyla Bilge, Symantec Research Labs, France
- Tudor Dumitras, University of Maryland, College Park, MD, USA

## Abstract
Malware remains a significant security threat, as cybercriminals continue to deliver various malicious programs to hosts worldwide. At the core of these malware delivery techniques are executable files, known as downloader trojans or droppers, which download additional malware. Since downloading software components from the internet is not inherently malicious, distinguishing between benign and malicious downloaders based solely on their content and behavior is challenging.

In this paper, we introduce the **downloader graph** abstraction, which captures the download activity on end hosts. We explore the growth patterns of both benign and malicious graphs, which can expose large parts of the malware download activity that might otherwise go undetected. By combining telemetry from anti-virus (AV) and intrusion-prevention systems (IPS), we reconstruct and analyze 19 million downloader graphs from 5 million real hosts. We identify several strong indicators of malicious activity, such as the growth rate, diameter, and internet access patterns of downloader graphs. Building on these insights, we implement and evaluate a machine learning system for malware detection. Our system achieves a 96.0% true-positive rate, with a 1.0% false-positive rate, and detects malware an average of 9.24 days earlier than existing AV products. We also perform an external validation by examining a sample of unlabeled files detected as malicious by our system, finding that 41.41% are blocked by AV products.

## Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Security and protection

## General Terms
Security

## Keywords
Downloader Graph, Malware Classification, Early Detection

## 1. Introduction
Cybercriminals constantly repackage and obfuscate malicious software (malware) to evade detection, prompting the security community to focus on content-agnostic techniques for malware detection. Previous research has generally focused on understanding the properties of global malware distribution networks, including their business models, network-level behavior, and server-side infrastructure. However, less attention has been given to the executable files (colloquially called downloader trojans or droppers) that download supplementary malware at the heart of malware distribution techniques.

Distinguishing between benign and malicious downloaders is non-trivial because the act of downloading software components from the internet is not inherently malicious. For example, many benign applications download legitimate installers and software updates. Due to social engineering or drive-by-download attacks, benign applications may download malicious programs, which in turn download additional malware. Some malware droppers can remain active for over two years due to the difficulty in determining their maliciousness.

However, the downloader-payload relationship of executable files on a host, and the downloader graphs generated by this relationship, can provide unique insights into malware distribution. Figure 1 illustrates a real downloader graph example, showing how a benign web browser (node A) downloads two files from the same domain (nodes B and D). Node B then downloads additional files, some of which (nodes C and F) are detected as malicious, suggesting that node B, and potentially node D, are likely involved in malware distribution. By analyzing the downloader graphs on a host, we can identify large parts of the malware download activity that might otherwise remain undetected.

In this paper, we conduct a systematic analysis of downloader graphs, exposing the differences in the growth patterns between benign and malicious graphs. We use insights from our measurements to build a malware detection system, using machine learning on downloader graph features, and evaluate it using both internal and external performance metrics.

## 2. Threat Model
### Overview of Downloaders
Applications often have a component responsible for determining which software components need to be installed or updated and for downloading them from remote servers. In this work, we refer to this component as the downloader.

The ubiquity of internet access benefits software delivery, making it efficient and customizable. This applies to both legitimate and malicious software. Multi-phase malware first gains a foothold on a system, installs a small executable (dropper or downloader trojan), and then downloads additional components, such as the rest of the malicious payload. An early example of such multi-phase malware was the Sobig email worm discovered in 2003, which downloaded additional files to set up spam relay servers and update itself.

General-purpose droppers can be configured to propagate different malware families, such as the Bredolab trojan. These droppers represent the client-side part of pay-per-install (PPI) infrastructures, allowing malware authors to install arbitrary executables on thousands of hosts and select targets based on host properties (e.g., geographical locations). PPI infrastructures employ sophisticated techniques to disseminate malicious payloads, such as drive-by-downloads, social engineering, and search engine poisoning, and they provide this functionality as a service. PPI downloaders represent only a fraction of the current population of downloaders, as simpler and older forms continue to operate.

### Problem Statement
In this paper, we conduct a systematic analysis of downloaders in the wild, focusing on the relationship between downloaders and the supplementary executables they download. We represent this transitive closure using a graph abstraction. Our first goal is to uncover the differences between the graph structures constructed from benign and malicious download activities. Leveraging the insights obtained from the analysis, our second goal is to propose a new method to detect malicious downloaders, improving the overall performance of malware detectors by providing earlier warnings for malicious download activities. This approach complements existing host-based malware detection systems by helping to understand how various files are delivered to end-hosts using the dropper-payload relationship.

We do not aim to analyze the server-side infrastructure and network-level behavior of malware delivery networks, determine their operational lifespan, profile the organizations involved in malware distribution, or improve network security. Instead, our main goal is to complement existing approaches focusing on server-side infrastructures and network-level behaviors.

## 3. Downloader Graph Analytics
### Data Sources
We infer the download activities on 5 million end-hosts using data available on the Worldwide Intelligence Network Environment (WINE), a platform for data-intensive experiments in cybersecurity provided by Symantec. WINE contains security telemetry collected on real hosts often targeted by cyber attacks. The data is collected from users who opt-in for Symantec’s data sharing program and does not include personally identifiable information. Specifically, we use two WINE data sets: (a) binary reputation and (b) intrusion prevention system (IPS) telemetry.

#### Binary Reputation Data
This data includes summarized information about all binary download activities on Symantec's customers' machines. We collect the server-side timestamp, the unique identifier for the machine initiating the download, the name and SHA2 hash of the downloaded file, and the SHA2 hash of the parent file (an archive including the downloaded file or the actual downloader). We extract information about 24 million distinct files, including 0.4 million parent files, from the binary reputation data set.

#### IPS Telemetry Data
This data provides information about malicious activities detected on network streams and logs of network activity on the host that may not be tied to any malicious activities. The IPS telemetry reports downloads of Portable Executable (PE) files over HTTP. From this data set, we extract the unique identifier of the host, the MD5 hash of the process initiating the network activity (portal in IPS jargon), the server-side timestamp, and the URL from which the portal downloads the binary.

### Table 1: Summary of Our Data Sets and Ground Truth
| Category                  | Count         |
|---------------------------|---------------|
| Total Inﬂuence Graphs     | 19 million    |
| Total Files (Graph Nodes)  | 24 million    |
| Benign Downloaders        | 0.9 million   |
| Malicious Downloaders     | 87,906        |
| Download Events (Edges)   | 50.5 million  |
| Domains Accessed          | 0.5 million   |
| Hosts                     | 5 million     |

By combining these data sources, we construct downloader graphs and perform a large-scale measurement study to expose the differences in the growth patterns between benign and malicious downloader graphs.