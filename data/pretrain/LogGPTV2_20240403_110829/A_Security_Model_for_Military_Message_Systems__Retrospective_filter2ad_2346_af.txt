"exist"  into  references  that  correspond  to  output  devices 
(intuitively,  these  users  are  logged  on  to  the  specified 
devices).  To  this  end  we  define  three  mappings.  An  id 
function,  U,  is  a  one-to-one  mapping  from  a  (possibly 
improper)  subset  of  UI  into  US.  A  reference  function,  E, 
is a mapping from a (possibly improper) subset of RF into 
ES  such  that  for  all  n  ≥  2,  E() = e iff E()  =  e*  where  e*  is  a  container  such  that  e  is  the 
inth element of H(e*). For any reference r, if E(r) = e, we 
say  that  r  is  a  reference  to  e  (relative  to  E).  A  login 
function,  LO,  is  a  one-to-one  mapping  from  a  (possibly 
improper) subset of UI into RF. 9 
Given  a  reference  function,  E,  each  indirect  reference 
of the form  to an entity em corresponds to a 
path of entities  such that each ei ∈ rng(E), e0 
is  denoted  by  the  direct  reference  ,  and  for  all 
positive  integers  i  ≤  m,  ei is the nith entity  in container 
ei-1.  Such an indirect reference is said to be based on each 
entity ej where 0 ≤ j  where each 
xj  RF ∪ UI ∪ VS and op  OP; 
S is the set of possible system states; 
s0 designates a special state called the initial state; and 
T is the system transform, that is, a function from UI × 
I ×  S into S. 
Definition  4.  A  history,  Π,  of  a  system  is  a  function 
from the set of nonnegative integers N to UI × I × S such 
that (1) the third element of Π(0) is s0, and (2) for all n  
N, if Π (n) = (u, i, s) and Π(n + 1) = (u*, i*, s*), then T(u, 
i, s) = s*. 
Before  defining  what  it  means  for  an  operation  to 
that  a 
potentially  modify  a  reference11,  we  notice 
10  State  is  defined as a tuple, rather than as a set of functions, because 
two  states  whose  elements  have  the  same  values  are  in  fact  identical, 
while two entities for which the defined functions return the same values 
may in fact be different (e.g., two copies of the same citation). 
11  The  version  of  the  paper  published  in  ACM  TOCS  incorrectly  had 
“entity” in place of  “reference” at this point. The definition of “potential 
modification” was given correctly, however. 
reference function E, and a fortiori a state s, induces a set 
of functions defined on references that are counterparts to 
the  set  of  functions  introduced  above  that  are  defined  on 
entities.  For  example,  there  is  a  function,  call  it  Vs,  such 
that  Vs(r)  =  V(rs).  Similarly,  there  is  a  counterpart 
n
1
predicate, call it Hs, such that Hs  iff H(rs)= 
, ..., r
n
1
>.  Each  counterpart  is  the  user-visible 
,  ...,  rs
<r,  rs
version  of  the  corresponding  entity  function.  We  call 
these referential counterparts and use them to define what 
it means for two states to be equivalent except for a set of 
references.12  
State  s  =  (U,  E,  LO)  and  s*  =  (U*,  E*,  LO*)  are 
equivalent except for some set of references  ρ iff (1) U = 
U*,  (2)  LO  =  LO*,  (3)  dom(E)  =  dom(E*),  (4)  for  any 
entity  function  F  except  V,  Fs  =  Fs*,  and  (5)  for  any 
reference r  dom(E) (cid:9) ρ, Vs(r) = Vs*(r). 
We now define potential modification as follows: 
u, i, s potentially modify r iff ∃ s1, s1* : s1 is equivalent 
to s except possibly for some set of references and T(u, i, 
*
s1) = s
(
rF
1 and for some entity function F, 
(
rF
)
)
≠
s
1
.13 
*
1
s
Call y a contributing factor in such a case iff y = r or ∃ 
2:  s1 and s2 are equivalent except for 
*
{y} and T(u, i, s2) = s
*
s1 as above and s2, s
2 and 
(
rF
(
rF
. 
)
)
≠
*
2
s
*
1
s
That  is,  u,  i,  s  potentially  modifies  r  if  there  is  some 
(second) state that may differ from s in the values of some 
entities, and T maps u, i, and this state into a third state in 
which some entity function F (value, containment, access 
set,  etc.)  on  r  differs  from  the  second  state.  The 
contributing  factors  are  r  and  those  entities  whose  values 
affect the final F(r). 
s 
to 
state 
state 
from 
For  each  referential  counterpart  and  each  function 
defined on users, we posit a unique operation that changes 
an existing entity or user with respect to that function. For 
example,  an  operation  set__AS(r,  new_access_set)  is  the 
only  operation    that  affects  r’s  access  set,  and  it  has  no 
other  user-visible  effect.  Further,  if  the  transition  is,  for 
example, 
is 
new_access_set  if  new_access_set  is  a  character  string 
and  Vs(new_access_set)  if  new_access_set  is  an  entity 
reference.  Changes  to  the  domain  of  E  or  U  (creation  or 
deletion  of  entities  or  users)  are  also  assumed  to  occur 
only  by  explicit  request.  The  formal  release  operation 
defined  below  is  the  single  exception  to  this  assumption 
12  We  could  have  developed  the  entire  formal  model  in  terms  of 
referential  counterparts,  but  preferred  the  simplicity  of  functions  to 
working with the predicate Hs. 
13  This  covers  cases  of  creation  (and  deletion)  since
s*,  ASs*(r) 
will  be 
(
rF
)
s
1
undefined and 
( *
rF
1s
)
 will be defined (although possibly empty). 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:55 UTC from IEEE Xplore.  Restrictions apply. 
(besides  delete(r)  and  possibly,  create(r));  it  changes  the 
type of r and, potentially, the releaser field of r's value as 
well. 
is  not 
to 
The  exact  nature  of  these  operations  is  unimportant 
since  these  assumptions  are  included  solely  for  ease  of 
exposition.  Their  purpose 
rule  out 
implementation  commands  that  affect  different  parts  of 
entities,  but  to  eliminate  the  problem  of  unspecified  side 
effects  in  the  formal  model  (e.g.,  permission  to  view  a 
message marked CCR is not permission to clear the CCR 
mark).  Implementation  commands  that  can  alter  more 
than  a  single  part  of  a  single  entity  correspond  to  a 
sequence 
given 
implementation, this correspondence is determined by the 
semantics  of  the  implementation  command  language. 
Once this correspondence has been determined, so that the 
security-relevant effects of each user command are clear, I 
can  be  replaced  by  the  set  of  implementation  commands 
with  access  sets  also  changed  accordingly.  Nevertheless, 
prudence  dictates  that  modifications  (e.g.,  changing  a 
user's  clearance)  that  can  be  made  only  by  the  security 
officer,  be  restricted  so  that  there  is  only  a  single 
command that performs them in any implementation. 
operations.  For 
formal 
of 
a 
The following constraints on the system transform lead 
to  the  definition  of  a  secure  history  and  a  secure  system. 
Where  quantification  is  not  explicit  below,  universal 
quantification is assumed. 
Definition 5. A transform T is access secure iff  ∀ u, i, 
s, s*: T(u, i, s)=s*, [(op  i ∩ OP and rk  i ∩ RF) (cid:3) ((u, 
op,  k) ∈  AS(E(rk))  or  ∃  l  ∈ RO(us),  and  (l,  op,  k) 
∈ AS(E(rk)))] or s=s*. 14 
Definition 6. A transform T is copy secure iff  ∀ u, i, s, 
s*:  T(u,  i,  s)=s*,  x  is  potentially  modified  with  y  as  a 
contributing factor (cid:3) CE(xs) ≥ CE(ys).  
Definition 7. A transform T is CCR secure iff  ∀ u, i, s, 
s*:  T(u,  i,  s)=s*,  r ∈ i ∩ IR  is  based  on  y  and  CCR(y) 
and  z  is  potentially  modified  with  r  as  a  contributing 
factor (cid:3) CU(us) ≥ CE(y).  
Definition  8.  A  transform  T  is  translation  secure  iff 
∀ u, i, s, s*: T(u, i, s)=s*, x ∈ DR and (xs*, x) ∈ D (ûs*) 
(cid:3) ∃ r ∈ i ∩ RF, rs = xs and (r is based on z and CCR(z) 
(cid:3) CU(us) ≥ CE(z)).15  
Definition  9.  A  transform  T  is  set  secure  iff  ∀ u,  i,  s, 
s*: T(u, i, s)=s*, (a) ∃ o ∈ dom(E ∩ (RF × O )), CD(os) 
14  For  simplicity  we  disregard  error  messages  in  the  formalism.  In  an 