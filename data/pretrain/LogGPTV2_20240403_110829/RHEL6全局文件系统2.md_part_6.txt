## [⁠]{#ch-considerations.html#gfs2_performance_troubleshoot}2.9.3. 使用 GFS2 锁定转储排除 GFS2 性能故障 {.title}
:::
::: para
If your cluster performance is suffering because of inefficient use of
GFS2 caching, you may see large and increasing I/O wait times. You can
make use of GFS2\'s lock dump information to determine the cause of the
problem.
:::
::: para
本小节提供 GFS 锁定转储概述。有关 GFS2 锁定转储的详情请参考 [附录 C,
*GFS2 跟踪点和 debug glock 文件*](#gfs2_tracepoints.html){.xref}。
:::
[]{#ch-considerations.html#idm140546261667472 .indexterm}
::: para
GFS2 锁定转储信息可从 `debugfs`{.filename}
文件中获得，您可以根据路径名找到该文件，假设 `debugfs`{.filename}
是挂载在 `/sys/kernel/debug/`{.filename} 中：
:::
``` screen
/sys/kernel/debug/gfs2/fsname/glocks
```
::: para
文件的有多行组成，每个以 G: 开始的行代表一个
glock。接下来的行使用一个空格缩进，代表文件中最新与 glock
关联的信息项目。
:::
::: para
当程序出现问题时，使用 `debugfs`{.filename} 文件的最佳方法是使用
`cat`{.command} 命令获得该文件内容副本（如果您的 RAM
较大，且有很多缓冲的内节点，则需要较长时间），以后再查看得到的数据。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**提示**
:::
::: admonition
::: para
复制两份 `debugfs`{.command}
文件会很有帮助，两个副本的间隔可在几秒甚至一分钟左右。比较与同一 glock
号关联的两个追踪信息，您可以了解负载是否在增长（就是说只是速度慢了）或者它在哪里卡住了（这通常是由
bug 造成，您应该立即向 Red Hat 支持提交报告）。
:::
:::
:::
::: para
Lines in the `debugfs`{.filename} file starting with H: (holders)
represent lock requests either granted or waiting to be granted. The
flags field on the holders line f: shows which: The \'W\' flag refers to
a waiting request, the \'H\' flag refers to a granted request. The
glocks which have large numbers of waiting requests are likely to be
those which are experiencing particular contention.
:::
[]{#ch-considerations.html#idm140546306403840
.indexterm}[]{#ch-considerations.html#idm140546306402880 .indexterm}
::: para
[表 2.1 "Glock 标签"](#ch-considerations.html#tb-glock-flags){.xref}
显示不同 glock 标签的含义，[表 2.2 "Glock
拥有者标签"](#ch-considerations.html#tb-glock-holderflags){.xref} 按其在
glock 转储中出现的顺序显示不同 glock 拥有者标签的含义。
:::
::: table
[⁠]{#ch-considerations.html#tb-glock-flags}
**表 2.1. Glock 标签**
::: table-contents
  ------------------------------------------------------------------------------------------------------
  标签    名称                  含义
  ------- --------------------- ------------------------------------------------------------------------
  b       阻断                  Valid when the locked flag is set, and indicates that the operation that
                                has been requested from the DLM may block. This flag is cleared for
                                demotion operations and for \"try\" locks. The purpose of this flag is
                                to allow gathering of stats of the DLM response time independent from
                                the time taken by other nodes to demote locks.
  d       等待降级              递延（远程）降级请求
  D       降级                  降级请求（本地或者远程）
  f       清除日志              释放这个 glock 前需要提交该日志
  F       冻结                  忽略来自远程节点的回复 -
                                正在恢复。这个标签与文件系统停滞无关，它使用不同的机制，但只用于恢复。
  i       使进程无效            这个 glock 下无效页面的进程中
  I       启动                  设定何时将 DLM 锁定与这个 glock 关联
  l       锁定的                这个 glock 处于更改状态中
  L       LRU                   当 glock 在 LRU 列表中时设置
  o       对象                  glock 与某个对象关联时设定（即用于类型 2 glock 的内节点以及用于类型 3
                                glock 的资源组）
  p       降级中                该 glock 正在响应降级请求
  q       排队的                拥有者排队等待 glock 时设定，并在持有 glock
                                但没有拥有者时清除。是用于计算 glock 最小拥有时间的算法的一部分。
  r       回复等待              从远程节点中接收的回复正在等待过程中
  y       脏数据                释放这个 glock 前要刷新到磁盘中的数据
  ------------------------------------------------------------------------------------------------------
:::
:::
::: table
[⁠]{#ch-considerations.html#tb-glock-holderflags}
**表 2.2. Glock 拥有者标签**
::: table-contents
  ------------------------------------------------------------------------
  标签    名称                  含义
  ------- --------------------- ------------------------------------------
  a       Async                 不等待 glock 结果（以后轮询结果）
  A       任意                  接受所有兼容锁模式
  c       没有缓存              取消锁定时立即降级 DLM 锁定
  e       没有过期日期          忽略之后的锁定取消请求
  E       准确                  必须有准确的锁定模式
  F       第一                  设定赋予这个锁定的第一个拥有者
  H       拥有者                表示赋予请求的锁定
  p       优先权                在队列头入队的拥有者
  t       尝试                  A \"try\" lock
  T       Try 1CB               A \"try\" lock that sends a callback
  W       等待                  等待请求完成的设置
  ------------------------------------------------------------------------
:::
:::
::: para
确定造成问题的 glock 后，下一步是要找到关联的内节点。glock 号（G: 行中的
n:）指的就是这个，其格式为 *type*/*number*，如果 *type* 是 2，那么 glock
就是一个内节点 glock，且 *number* 就是内节点号。要追踪内节点，您可以运行
`find -inum number`{.command}，其中 *number* 是将 glock
文件中的十六进制格式转换为十进制格式的内节点号。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
如果您在有锁定冲突的文件系统中运行
`find`{.command}，事情可能会变得更糟糕。当您查找冲突的内节点时，最好在运行
`find`{.command} 前停止该程序。
:::
:::
:::
[]{#ch-considerations.html#idm140546295470288 .indexterm}
::: para
[表 2.3 "Glock 类型"](#ch-considerations.html#tb-glock-types){.xref}
显示不同 glock 类型含义。
:::
::: table
[⁠]{#ch-considerations.html#tb-glock-types}
**表 2.3. Glock 类型**
::: table-contents
  -------------------------------------------------------------------------
  类型号    1         使用
  --------- --------- -----------------------------------------------------
  1         Trans     事务锁定
  2         内节点    内节点元数据和数据
  3         Rgrp      资源组元数据
  4         Meta      超级块
  5         Iopen     内节点的最近探测
  6         Flock     `flock`{.command}(2) 系统调用
  8         Quota     配额操作
  9         Journal   日志互斥
  -------------------------------------------------------------------------
:::
:::
::: para
如果识别的 glock 是不同的类型，那么最可能是类型
3：（资源组）。如果您在正常负载情况看到大量进程正在等待其他 glock
类型，请向 Red Hat 支持提交报告。
:::
::: para
如果您看到在资源组锁定中有大量等待的请求，那么可能有很多原因。其中之一是在文件系统中相对于资源组有大量的内节点。另一个原因就是该文件系统可能接近饱和（按平均计算，需要较长的搜索）。在这两种情况下可通过添加更多存储以及使用
`gfs2_grow`{.command} 命令扩大该文件系统进行改善。
:::
:::
:::
:::
[]{#ch-config.html}
::: chapter
::: titlepage
# [⁠]{#ch-config.html#ch-config}第 3 章 开始 {.title}
:::
[]{#ch-config.html#idm140546326178064 .indexterm}
::: para
本章论述了初始设定 GFS2 的步骤，其中包括以下部分：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [第 3.1 节 "前提任务"](#ch-config.html#s1-config-prereq){.xref}
    :::
-   ::: para
    [第 3.2 节 "初始设定任务"](#ch-config.html#s1-config-tasks){.xref}
    :::
:::
::: section
::: titlepage
# [⁠]{#ch-config.html#s1-config-prereq}3.1. 前提任务 {.title}
:::
[]{#ch-config.html#idm140546305596976
.indexterm}[]{#ch-config.html#idm140546327934160 .indexterm}
::: para
应在设置 Red Hat GFS2 前完成以下任务：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    确定已记录 GFS2 节点的主要特点（请参考 [第 1.2 节 "设置 GFS2
    前的准备"](#ch-overview-GFS2.html#s1-ov-preconfig){.xref}）。
    :::
-   ::: para
    确定同步了 GFS2 节点中的时钟。建议使用 Red Hat Enterprise Linux
    发行本中提供的网络时间协议（NTP）软件。
    :::
    ::: note
    ::: admonition_header
    **备注**
    :::
    ::: admonition
    ::: para
    GFS2
    节点中的系统时钟间的差别必须在几分钟之内，这样可防止内节点时间戳更新。不必要的内节点时间戳更新会严重影响集群的性能。
    :::
    :::
    :::
-   ::: para
    要在集群的环境中使用
    GFS2，就必须将系统配置为使用集群的逻辑卷管理器（CLVM），它是一组 LVM
    逻辑卷管理器的集群扩展。要使用 CLVM，则必须运行包含
    `clvmd`{.command} 守护进程的 Red Hat Cluster Suite 软件。有关使用
    CLVM 的详情，请参考*《管理逻辑卷管理器》*。有关安装和管理 Red Hat
    Cluster Suite 的详情请参考*《集群管理》*。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-config.html#s1-config-tasks}3.2. 初始设定任务 {.title}
:::
[]{#ch-config.html#idm140546261152288
.indexterm}[]{#ch-config.html#idm140546261515680 .indexterm}
::: para
初始 GFS2 设定包含以下任务：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    设定逻辑卷。
    :::
2.  ::: para
    生成 GFS2 文件系统。
    :::
3.  ::: para
    挂载文件系统。
    :::
:::
::: para
开始按照以下步骤设定 GFS2。
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    使用 LVM 为每个 Red Hat GFS2 文件系统生成逻辑卷。
    :::
    ::: note
    ::: admonition_header
    **备注**
    :::
    ::: admonition
    ::: para
    您可以使用 Red Hat Cluster Suite 中的 `init.d`{.filename}
    脚本自动激活和失活逻辑卷。有关 `init.d`{.filename}
    脚本的详情请参考[*《配置和管理 Red Hat 集群》*]{.emphasis}。
    :::
    :::
    :::
2.  ::: para
    在第一步生成的逻辑卷中创建 GFS2
    文件系统。为每个文件系统选择唯一的名称。有关创建 GFS2
    文件系统的详情请参考 [第 4.1 节
    "生成文件系统"](#ch-manage.html#s1-manage-makefs){.xref}。
    :::
    ::: para
    您可以使用以下格式之一创建一个集群 GFS2 文件系统：
    :::
    ``` screen
    mkfs.gfs2 -p lock_dlm -t ClusterName:FSName -j NumberJournals BlockDevice
    ```
    ``` screen
    mkfs -t gfs2 -p lock_dlm -t LockTableName -j NumberJournals BlockDevice
    ```
    ::: para
    有关创建 GFS2 文件系统的详情请参考 [第 4.1 节
    "生成文件系统"](#ch-manage.html#s1-manage-makefs){.xref}。
    :::
3.  ::: para
    在每个节点中挂载 GFS2 文件系统。有关挂载 GFS2 文件系统的详情请参考
    [第 4.2 节
    "挂载文件系统"](#ch-manage.html#s1-manage-mountfs){.xref}。
    :::
    ::: para
    命令用法：
    :::
    ::: para
    `mount BlockDevice MountPoint`{.command}
    :::
    ::: para
    `mount -o acl BlockDevice MountPoint`{.command}
    :::
    ::: para
    `-o`{.command} acl``{=html} 选项允许操作文件
    ACL。如果挂载某个文件系统是没有使用 `-o`{.command}
    acl``{=html} 挂载选项，用户可以查看 ACL（使用
    `getfacl`{.command} 命令），但不可以设定它们（使用
    `setfacl`{.command} 命令）。
    :::
    ::: note
    ::: admonition_header
    **备注**
    :::
    ::: admonition
    ::: para
    您可以使用 Red Hat High Availability Add-On（Red Hat
    高可用性附加组件）中的 `init.d`{.filename} 脚本自动挂载和卸载 GFS2
    文件系统。
    :::
    :::
    :::
:::
:::
:::
[]{#ch-manage.html}