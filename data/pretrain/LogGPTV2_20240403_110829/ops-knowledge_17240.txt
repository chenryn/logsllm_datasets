Question: An attacker is attempting to exploit a buffer overflow vulnerability in a heap-allocated buffer within a C application. The application uses a version of malloc() that maintains a doubly-linked list of free and used memory blocks. If the attacker successfully overflows a malloc()ed block, they can potentially modify the next and prev pointers in the next block, allowing arbitrary writes in memory. Which of the following countermeasures or considerations could potentially thwart this type of heap-based buffer overflow attack?
"A": "Use of a memory-safe language for writing new code, which can be a significant effort but provides inherent protection against these types of memory corruption vulnerabilities.",
"B": "Employ stack canaries between variables and return addresses on the stack, with the understanding that this defense is designed for stack-based overflows and not heap-based ones.",
"C": "Implementation of ASLR to randomize the process memory addresses, although this can be bypassed if an attacker can still predict the address of crucial pointers.",
"D": "Incorporation of bounds checking in the form of fat pointers, which may not be applicable to heap-based buffer overflows as fat pointers are mainly designed for stack or global buffer protection."
Answer: AC