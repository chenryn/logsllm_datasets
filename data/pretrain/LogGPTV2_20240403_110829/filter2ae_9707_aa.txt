### 0x01 前言
A fast JSON parser/generator for Java.一个Java语言实现的JSON快速解析/生成器。
官方描述：
    Fastjson is a Java library that can be used to convert Java Objects into their JSON representation. 
    It can also be used to convert a JSON string to an equivalent Java object. 
    Fastjson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.
    Fastjson Goals:
    - Provide best performance in server side and android client
    - Provide simple toJSONString() and parseObject() methods to convert Java objects to JSON and vice-versa
    - Allow pre-existing unmodifiable objects to be converted to and from JSON
    - Extensive support of Java Generics
    - Allow custom representations for objects
    - Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)
Fastjson是阿里巴巴开源的Apache顶级项目，在国内开发圈子中被使用广泛，由于它假定有序的解析特性，其相对于Jackson，性能会有一定的优势，不过个人觉得，相对于磁盘、网络IO等时间损耗，这样的提升对于大部分企业来讲，意义并不大。
因为Fastjson在国内被广泛使用，也就是说受众广，影响范围大，那么一但出现安全漏洞，被不法分子利用，将会对企业、用户造成极大损失。对于我们研究安全的人员来讲，研究分析Fastjson的源码，跟踪Fastjson安全漏洞，可以更好的挖掘出潜在的安全隐患，提前消灭它。
我曾经从网络上看到过很多对Fastjson分析的文章，但大部分都是对于新漏洞gadget
chain触发的源码debug跟踪，缺少对于一些关键点代码的分析描述，也就是说，我看完之后，该不懂还是不懂，最后时间花出去了，得到的只是一个证明可用的exp...因此，我这篇文章，将针对Fastjson反序列化部分涉及到的关键点代码进行详细的讲解，其中一共四个关键点“词法解析、构造方法选择、缓存绕过、反射调用”，希望大家看完之后，将能完全搞懂Fastjson漏洞触发的一些条件以及原理。
### 0x02 四个关键点
  * 词法解析
  * 构造方法选择
  * 缓存绕过
  * 反射调用
#### 1、词法解析
词法解析是Fastjson反序列化中比较重要的一环，一个json的格式、内容是否能被Fastjson理解，它充当了最重要的角色。
在调用JSON.parse(text)对json文本进行解析时，将使用缺省的默认配置
    public static Object parse(String text) {
        return parse(text, DEFAULT_PARSER_FEATURE);
    }
DEFAULT_PARSER_FEATURE是一个缺省默认的feature配置，具体每个feature的作用，我这边就不做讲解了，跟这一小节中的词法解析关联不大
    public static int DEFAULT_PARSER_FEATURE;
    static {
        int features = 0;
        features |= Feature.AutoCloseSource.getMask();
        features |= Feature.InternFieldNames.getMask();
        features |= Feature.UseBigDecimal.getMask();
        features |= Feature.AllowUnQuotedFieldNames.getMask();
        features |= Feature.AllowSingleQuotes.getMask();
        features |= Feature.AllowArbitraryCommas.getMask();
        features |= Feature.SortFeidFastMatch.getMask();
        features |= Feature.IgnoreNotMatch.getMask();
        DEFAULT_PARSER_FEATURE = features;
    }
而如果想使用自定义的feature的话，可以自己或运算配置feature
    public static Object parse(String text, int features) {
        return parse(text, ParserConfig.getGlobalInstance(), features);
    }
而这里，我们也能看到，传入了一个解析配置ParserConfig.getGlobalInstance()，它是一个默认的全局配置，因此，如果我们想要不使用全局解析配置的话，也可以自己构建一个局部的解析配置进行传入，这一系列的重载方法都给我们的使用提供了很大的自由度。
接着，我们可以看到，最终其实都走到这一步，创建DefaultJSONParser类实例，接着对json进行解析
    public static Object parse(String text, ParserConfig config, int features) {
        if (text == null) {
            return null;
        }
        DefaultJSONParser parser = new DefaultJSONParser(text, config, features);
        Object value = parser.parse();
        parser.handleResovleTask(value);
        parser.close();
        return value;
    }
然后我们跟进DefaultJSONParser构造方法中，可以看到其中调用了另一个重载的构造方法，我们可以重点关注第二个参数，也就是JSONScanner，它就是词法解析的具体实现类了
    public DefaultJSONParser(final String input, final ParserConfig config, int features){
        this(input, new JSONScanner(input, features), config);
    }
看类注释，可以知道，这个类为了词法解析中的性能提升，做了很多特别的处理
    //这个类，为了性能优化做了很多特别处理，一切都是为了性能！！！
    /**
     * @author wenshao[PI:EMAIL]
     */
    public final class JSONScanner extends JSONLexerBase {
        ...
    }
在分析该词法解析类之前，我这里列出一些该类以及父类中变量的含义，有助于后续的代码分析：
    text：json文本数据
    len：json文本数据长度
    token：代表解析到的这一段数据的类型
    ch：当前读取到的字符
    bp：当前字符索引
    sbuf：正在解析段的数据，char数组
    sp：sbuf最后一个数据的索引
    hasSpecial=false：需要初始化或者扩容sbuf
可以从JSONScanner构造方法看到，text、len、bp、ch的大概意义，并且对utf-8 bom进行跳过
    public JSONScanner(String input, int features){
        super(features);
        text = input;//json文本数据
        len = text.length();//json文本数据长度
        bp = -1;//当前字符索引
        next();
        if (ch == 65279) { // utf-8 bom
            next();
        }
    }
接着在构造方法中，会调用next进行对text中一个一个字符的获取，可以看到bp值初始值为-1，在第一次调用时执行++bp变为0，即开始读取第一个字符的索引
    public final char next() {
        int index = ++bp;
        return ch = (index >= this.len ? //
                EOI //
                : text.charAt(index));
    }
再跟进DefaultJSONParser主要构造方法，其中lexer是词法解析器，这里我们跟踪得到其实现为JSONScanner，也就是我们前面所讲的那个，而input就是需要解析的json字符串，config为解析配置，最重要的就是symbolTable，我称之为符号表，它可以根据传入的字符，进而解析知道你想要读取的一段字符串
    public DefaultJSONParser(final Object input, final JSONLexer lexer, final ParserConfig config){
        this.lexer = lexer;//JSONScanner
        this.input = input;//需要解析的json字符串
        this.config = config;//解析配置
        this.symbolTable = config.symbolTable;
        //获取当前解析到的字符
        int ch = lexer.getCurrent();
        if (ch == '{') {
            lexer.next();
            ((JSONLexerBase) lexer).token = JSONToken.LBRACE;
        } else if (ch == '[') {
            lexer.next();
            ((JSONLexerBase) lexer).token = JSONToken.LBRACKET;
        } else {
            lexer.nextToken(); // prime the pump
        }
    }
从上面的if、else流判断中可以知道，当开始头解析时，如果能解析到'{'或'['，就会赋值token，指明当前读到的token类型（在Fastjson中，会对json数据字符串一位一位的提取，然后比对，得出当前位置的词法类型，也即token），接着继续执行next()滑动到下一个字符。如果不能解析到'{'或'['开头，就会执行nextToken()，后续parse也会继续执行nextToken()
nextToken，顾名思义就是下一个token，其中实现逻辑会对字符一个一个的进行一定的解析，判断出下一个token类型
而整个Fastjson反序列化时，就是这样根据不断的next()提取出字符，然后判断当前token类型，接着根据token类型的不同，会有不一样的处理逻辑，表现为根据token类型做一定的数据字符串读取，并根据读取出来的字符串数据，进行反序列化成Java
Object
我们回到nextToken中来：
    public final void nextToken() {
        sp = 0;
        for (;;) {
            pos = bp;
            if (ch == '/') {
                skipComment();
                continue;
            }
            if (ch == '"') {
                scanString();
                return;
            }
            if (ch == ',') {
                next();
                token = COMMA;
                return;
            }
            if (ch >= '0' && ch <= '9') {
                scanNumber();
                return;
            }
            if (ch == '-') {
                scanNumber();
                return;
            }
            switch (ch) {
                case '\'':
                    if (!isEnabled(Feature.AllowSingleQuotes)) {
                        throw new JSONException("Feature.AllowSingleQuotes is false");
                    }
                    scanStringSingleQuote();
                    return;
                case ' ':
                case '\t':
                case '\b':
                case '\f':
                case '\n':
                case '\r':
                    next();
                    break;
                case 't': // true
                    scanTrue();
                    return;
                case 'f': // false
                    scanFalse();
                    return;
                case 'n': // new,null
                    scanNullOrNew();
                    return;
                case 'T':
                case 'N': // NULL
                case 'S':
                case 'u': // undefined
                    scanIdent();
                    return;
                case '(':
                    next();
                    token = LPAREN;
                    return;
                case ')':
                    next();
                    token = RPAREN;
                    return;
                case '[':
                    next();
                    token = LBRACKET;
                    return;
                case ']':
                    next();
                    token = RBRACKET;
                    return;
                case '{':
                    next();
                    token = LBRACE;
                    return;
                case '}':
                    next();
                    token = RBRACE;
                    return;
                case ':':
                    next();
                    token = COLON;
                    return;
                case ';':
                    next();
                    token = SEMI;
                    return;
                case '.':
                    next();
                    token = DOT;
                    return;
                case '+':
                    next();
                    scanNumber();
                    return;
                case 'x':
                    scanHex();
                    return;
                default:
                    if (isEOF()) { // JLS
                        if (token == EOF) {
                            throw new JSONException("EOF error");
                        }
                        token = EOF;
                        eofPos = pos = bp;
                    } else {
                        if (ch <= 31 || ch == 127) {
                            next();
                            break;
                        }
                        lexError("illegal.char", String.valueOf((int) ch));
                        next();
                    }
                    return;
            }
        }
    }
可以看到，就是前面所说的，根据当前读到的字符，而选择执行不同的字符串提取逻辑，我们这小节最核心的代码就位于scanString()，当判断当前字符为双引号时，则执行这个方法，我们看一下具体实现
    public final void scanString() {
        np = bp;
        hasSpecial = false;
        char ch;
        for (;;) {
            ch = next();
            if (ch == '\"') {
                break;
            }
            if (ch == EOI) {
                if (!isEOF()) {
                    putChar((char) EOI);
                    continue;
                }
                throw new JSONException("unclosed string : " + ch);
            }
            if (ch == '\\') {
                if (!hasSpecial) {
                    ...扩容
                }
                ch = next();
                switch (ch) {
                    case '0':
                        putChar('\0');
                        break;
                    case '1':
                        putChar('\1');
                        break;
                    case '2':
                        putChar('\2');
                        break;
                    case '3':
                        putChar('\3');
                        break;
                    case '4':
                        putChar('\4');
                        break;
                    case '5':
                        putChar('\5');
                        break;
                    case '6':
                        putChar('\6');
                        break;