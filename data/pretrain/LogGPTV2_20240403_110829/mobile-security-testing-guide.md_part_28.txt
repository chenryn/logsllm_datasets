Patching Synchronously:
//this is a sync adapter that runs in the background, so you can run the synchronous patching.
public class SyncAdapter extends AbstractThreadedSyncAdapter {
...
// This is called each time a sync is attempted; this is okay, since the
// overhead is negligible if the security provider is up-to-date.
@Override
public void onPerformSync(Account account, Bundle extras, String authority,
ContentProviderClient provider, SyncResult syncResult) {
try {
ProviderInstaller.installIfNeeded(getContext());
} catch (GooglePlayServicesRepairableException e) {
// Indicates that Google Play services is out of date, disabled, etc.
// Prompt the user to install/update/enable Google Play services.
GooglePlayServicesUtil.showErrorNotification(
e.getConnectionStatusCode(), getContext());
// Notify the SyncManager that a soft error occurred.
syncResult.stats.numIOExceptions++;
return;
} catch (GooglePlayServicesNotAvailableException e) {
// Indicates a non-recoverable error; the ProviderInstaller is not able
// to install an up-to-date Provider.
// Notify the SyncManager that a hard error occurred.
//in this case: make sure that you inform your API of it.
syncResult.stats.numAuthExceptions++;
return;
}
// If this is reached, you know that the provider was already up-to-date,
// or was successfully updated.
}
}
Patching Asynchronously:
//This is the mainactivity/first activity of the application that's there long enough to make the async install
ing of the securityprovider work.
public class MainActivity extends Activity
implements ProviderInstaller.ProviderInstallListener {
private static final int ERROR_DIALOG_REQUEST_CODE = 1;
private boolean mRetryProviderInstall;
206
Android Network APIs
//Update the security provider when the activity is created.
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
ProviderInstaller.installIfNeededAsync(this, this);
}
/**
* This method is only called if the provider is successfully updated
* (or is already up-to-date).
*/
@Override
protected void onProviderInstalled() {
// Provider is up-to-date, app can make secure network calls.
}
/**
* This method is called if updating fails; the error code indicates
* whether the error is recoverable.
*/
@Override
protected void onProviderInstallFailed(int errorCode, Intent recoveryIntent) {
if (GooglePlayServicesUtil.isUserRecoverableError(errorCode)) {
// Recoverable error. Show a dialog prompting the user to
// install/update/enable Google Play services.
GooglePlayServicesUtil.showErrorDialogFragment(
errorCode,
this,
ERROR_DIALOG_REQUEST_CODE,
new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
// The user chose not to take the recovery action
onProviderInstallerNotAvailable();
}
});
} else {
// Google Play services is not available.
onProviderInstallerNotAvailable();
}
}
@Override
protected void onActivityResult(int requestCode, int resultCode,
Intent data) {
super.onActivityResult(requestCode, resultCode, data);
if (requestCode == ERROR_DIALOG_REQUEST_CODE) {
// Adding a fragment via GooglePlayServicesUtil.showErrorDialogFragment
// before the instance state is restored throws an error. So instead,
// set a flag here, which will cause the fragment to delay until
// onPostResume.
mRetryProviderInstall = true;
}
}
/**
* On resume, check to see if we flagged that we need to reinstall the
* provider.
*/
@Override
protected void onPostResume() {
super.onPostResult();
if (mRetryProviderInstall) {
// We can now safely retry installation.
ProviderInstall.installIfNeededAsync(this, this);
}
mRetryProviderInstall = false;
}
207
Android Network APIs
private void onProviderInstallerNotAvailable() {
// This is reached if the provider cannot be updated for some reason.
// App should consider all HTTP communication to be vulnerable, and take
// appropriate action (e.g. inform backend, block certain high-risk actions, etc.).
}
}
Make sure that NDK-based applications bind only to a recent and properly patched library that provides SSL/TLS
functionality.
Dynamic Analysis
When you have the source code:
Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).
Right click the highlighted code and select Evaluate Expression .
Type Security.getProviders() and press enter.
Check the providers and try to find GmsCore_OpenSSL , which should be the new top-listed provider.
When you do not have the source code:
Use Xposed to hook into the java.security package, then hook into java.security.Security with the method
getProviders (with no arguments). The return value will be an array of Provider .
Determine whether the first provider is GmsCore_OpenSSL .
References
OWASP Mobile Top 10 2016
M3 - Insecure Communication - https://www.owasp.org/index.php/Mobile_Top_10_2016-M3-
Insecure_Communication
OWASP MASVS
MSTG-NETWORK-2: "The TLS settings are in line with current best practices, or as close as possible if the
mobile operating system does not support the recommended standards."
MSTG-NETWORK-3: "The app verifies the X.509 certificate of the remote endpoint when the secure channel is
established. Only certificates signed by a trusted CA are accepted."
MSTG-NETWORK-4: "The app either uses its own certificate store or pins the endpoint certificate or public key,
and subsequently does not establish connections with endpoints that offer a different certificate or key, even if
signed by a trusted CA."
MSTG-NETWORK-6: "The app only depends on up-to-date connectivity and security libraries."
CWE
CWE-295 - Improper Certificate Validation
CWE-296 - Improper Following of a Certificate's Chain of Trust - https://cwe.mitre.org/data/definitions/296.html
CWE-297 - Improper Validation of Certificate with Host Mismatch - https://cwe.mitre.org/data/definitions/297.html
CWE-298 - Improper Validation of Certificate Expiration - https://cwe.mitre.org/data/definitions/298.html
Android Developer Documentation
Network Security Config - https://developer.android.com/training/articles/security-config
Network Security Config (cached alternative) - https://webcache.googleusercontent.com/search?
q=cache:hOONLxvMTwYJ:https://developer.android.com/training/articles/security-
config+&cd=10&hl=nl&ct=clnk&gl=nl
208
Android Network APIs
Xamarin Certificate Pinning
Certificate and Public Key Pinning with Xamarin - https://thomasbandt.com/certificate-and-public-key-pinning-
with-xamarin
ServicePointManager - https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx
Cordova Certificate Pinning
PhoneGap SSL Certificate Checker plugin - https://github.com/EddyVerbruggen/SSLCertificateChecker-PhoneGap-
Plugin
209
Android Platform APIs
Android Platform APIs
Testing App Permissions (MSTG-PLATFORM-1)
Overview
Android assigns a distinct system identity (Linux user ID and group ID) to every installed app. Because each Android
app operates in a process sandbox, apps must explicitly request access to resources and data that are outside their
sandbox. They request this access by declaring the permissions they need to use system data and features.
Depending on how sensitive or critical the data or feature is, the Android system will grant the permission
automatically or ask the user to approve the request.
Android permissions are classified into four different categories on the basis of the protection level they offer:
Normal: This permission gives apps access to isolated application-level features with minimal risk to other apps,
the user, and the system. For apps targeting SDK 23 or higher, these permissions are granted automatically at
install time. For apps targeting a lower SDK, the user needs to approve them at install time. Example:
android.permission.INTERNET
Dangerous: This permission usually gives the app control over user data or control over the device in a way that
impacts the user. This type of permission may not be granted at installation time; whether the app should have
the permission may be left for the user to decide. Example: android.permission.RECORD_AUDIO Note that starting at
Android 8, If an app requests a permission at runtime, the system will grant the explicit permission, instead of all
the permissions which belong to the same permission group as the requested one.
Signature: This permission is granted only if the requesting app was signed with the same certificate used to sign
the app that declared the permission. If the signature matches, the permission will be granted automatically. This
permission is granted at install time. Example: android.permission.ACCESS_MOCK_LOCATION
SystemOrSignature: This permission is granted only to applications embedded in the system image or signed
with the same certificate used to sign the application that declared the permission. Example:
android.permission.ACCESS_DOWNLOAD_MANAGER
A list of all permissions is in the Android developer documentation.
Note that starting at Android 8 the permissions bellow contain the following changes:
READ_CONTACTS : When an app request this permission, queries for usage data will return approximations
rather than exact values.
GET_ACCOUNTs : Apps no longer get access to user accounts with this permission unless the authenticator
owns the accounts or the user grants that access.
Activity Permission Enforcement
Permissions are applied via android:permission attribute within the  tag in the manifest. These
permissions restrict which applications can start that Activity. The permission is checked during
Context.startActivity and Activity.startActivityForResult . Not holding the required permission results in a
SecurityException being thrown from the call.
Service Permission Enforcement
Permissions applied via android:permission attribute within the  tag in the manifest restrict who can start
or bind to the associated Service. The permission is checked during Context.startService , Context.stopService and
Context.bindService . Not holding the required permission results in a SecurityException being thrown from the call.
210
Android Platform APIs
Broadcast Permission Enforcement
Permissions applied via android:permission attribute within the  tag restrict access to send broadcasts to
the associated BroadcastReceiver. The held permissions are checked after Context.sendBroadcast returns, while
trying to deliver the sent broadcast to the given receiver. Please note failure to hold proper permissions doesn't throw
an exception, the result is an unsent broadcast.
A permission can be supplied to Context.registerReceiver to control who can broadcast to a programmatically
registered receiver. Going the other way, a permission can be supplied when calling Context.sendBroadcast to restrict
which broadcast receivers are allowed to receive the broadcast.
Note that both a receiver and a broadcaster can require a permission. When this happens, both permission checks
must pass for the intent to be delivered to the associated target. For more information, please reference Restricting
broadcasts with permissions.
Content Provider Permission Enforcement
Permissions applied via android:permission attribute within the  tag restrict access to data in a
ContentProvider. Content providers have an important additional security facility called URI permissions which is
described next. Unlike the other components, ContentProviders have two separate permission attributes that can be
set, android:readPermission restricts who can read from the provider, and android:writePermission restricts who can
write to it. If a ContentProvider is protected with both read and write permissions, holding only the write permission
does not also grant read permissions.
The permissions are checked when you first retrieve a provider (if you don't have either permission, a
SecurityException is thrown), and as you perform operations on the provider. Using ContentResolver.query() requires
holding the read permission; using ContentResolver.insert(), ContentResolver.update(), ContentResolver.delete()
requires the write permission. In all of these cases, not holding the required permission results in a SecurityException
being thrown from the call.
Permissions are checked when you first retrieve a provider and as operations are performed using the
ContentProvider. Using ContentResolver.query requires holding the read permission; using ContentResolver.insert ,
ContentResolver.update , ContentResolver.delete requires the write permission. A SecurityException will be thrown
from the call if proper permissions are not held in all these cases.
Content Provider URI Permissions
The standard permission system is not sufficient when being used with content providers. For example a content
provider may want to limit permissions to READ permissions in order to protect itself, while using custom URIs to
retrieve information. An application should only have the permission for that specific URI.
The solution is per-URI permissions. When starting or returning a result from an activity, the method can set
Intent.FLAG_GRANT_READ_URI_PERMISSION and/or Intent.FLAG_GRANT_WRITE_URI_PERMISSION . This grants permission to
the activity for the specific URI regardless if it has permissions to access to data from the content provider.
This allows a common capability-style model where user interaction drives ad-hoc granting of fine-grained permission.
This can be a key facility for reducing the permissions needed by apps to only those directly related to their behavior.
Without this model in place malicious users may access other member's email attachments or harvest contact lists for
future use via unprotected URIs. In the manifest the android:grantUriPermissions attribute or the node help restrict
the URIs.
Documentation for URI permissions
211
Android Platform APIs
grantUriPermission(), revokeUriPermission() "revokeUriPermission"), and checkUriPermission()
"checkUriPermission").
Custom Permissions
Android allows apps to expose their services/components to other apps. Custom permissions are required for app
access to the exposed components. You can define custom permissions in AndroidManifest.xml by creating a
permission tag with two mandatory attributes: android:name and android:protectionLevel .
It is crucial to create custom permissions that adhere to the Principle of Least Privilege: permission should be defined
explicitly for its purpose, with a meaningful and accurate label and description.
Below is an example of a custom permission called START_MAIN_ACTIVITY , which is required when launching the
TEST_ACTIVITY Activity.
The first code block defines the new permission, which is self-explanatory. The label tag is a summary of the
permission, and the description is a more detailed version of the summary. You can set the protection level according
to the types of permissions that will be granted. Once you've defined your permission, you can enforce it by adding it
to the application's manifest. In our example, the second block represents the component that we are going to restrict
with the permission we created. It can be enforced by adding the android:permission attributes.
Once the permission START_MAIN_ACTIVTY has been created, apps can request it via the uses-permission tag in the
AndroidManifest.xml file. Any application granted the custom permission START_MAIN_ACTIVITY can then launch the
TEST_ACTIVITY . Please note  must be
declared before the  or an exception will occur at runtime. Please see the example below that is based
on the permission overview and manifest-intro.
Static Analysis
Android Permissions
Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example,
the INTERNET permission in the AndroidManifest.xml file is necessary for an Activity to load a web page into a
WebView. Because a user can revoke an application's right to use a dangerous permission, the developer should
check whether the application has the appropriate permission each time an action is performed that would require that
permission.
212