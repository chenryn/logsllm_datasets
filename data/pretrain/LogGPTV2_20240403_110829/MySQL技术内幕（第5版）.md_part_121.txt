## Page 529
但是早期的mysql扩展却不支持。
够新，以便保证能够使用客户端库的 SSL 功能。例如，PHP 的 mysqlnd 扩展支持 SSL 连接，
须为其加上SSL支持功能，这样它才能支持与服务器的SSL连接。另外，语言的API也必须足
于这些语言的API，还取决于连接的那个 MySQL客户端开发库。在编译客户端开发库时，也必
USAGE语句中使用REQUIRENONE：
如果在类似Perl或PHP这样的语言里使用MySQLAPI，那么实现SSL功能支持不仅取决
如果某个账户当前的设置是要求使用SSL，而你想要取消这一要求，那么可以在GRANT
与REQUIRE子句有关的更多信息请参考13.2.2.3节。
GRANT USAGE ON *.*TOlaura'@'viper.example.com'REQUIRE NONE;
13.5使用SSL建立安全连接
509
---
## Page 530
下面的方法来处理这些问题。
14.1预防性维护的基本原则
而减轻主服务器的负担；在进行备份时，与主服务器相比，从服务器可以轻易地暂停或停止。
这种复制技术还可以用于其他用途。举两个例子：可以把客户端负载分摊到两个服务器上，从
数据变化会传播至从服务器。因此，从服务器便像是主服务器的“连续复制”（continuous copy）。
器（master server）上的数据副本来初始化从服务器（slave server），初始化完成后，主服务器的
相似之处。这里涉及的另一种“复制”（copy）技术在英文上称作replication，它是使用主服务
从一个服务器转移到另一个服务器的数据库复制过程，因为这些内容与数据库备份技术有很多
据库备份、表检查、表修复，以及数据丢失后如何进行恢复。本章还会介绍一些用于把数据库
并且会导致数据库破坏，通常是表的更新过程中的不完全写人所导致的。
ki11-9来强制终止它）的种种原因，问题还是可能发生。像这类事件，很多是你无法控制的，
数据库维护、备份和复制
本章将介绍最小化风险的一些具体做法和灾难发生后的一些应对措施。涉及的技术包括数
尽管你想尽了办法，如果最终还是出现了表损坏或数据丢失的问题，那么你可以尝试使用
口建立数据库备份计划。当发生最坏情况时，如果系统出现灾难性的故障，则需要使用
口有计划地开展预防性维护工作，定期对表进行检查。日常的表检查有助于及时发现各
为预防数据库出现问题，应该采取以下措施。
本节汇总了一些与数据库系统的预防性维护有关的基本原则。随后几节将讨论实现细则。
口启用MySQL服务器提供的自动恢复功能。
并且其性能开销几乎可以忽略不计，所以没道理不启用它。
种小问题，并在问题变得更糟之前将其纠正。
数据库的内容进行过哪些修改（参考12.8.4节）。二进制日志对备份和复制有很大益处，
以前的备份来恢复系统。还应该启用二进制日志，这样可以记录下你在备份之后又对
第14章
---
## Page 531
读取的程序可能会迷糊，搞不清楚这个表是否会同时被另一个程序更改。
是一件很糟的事情，不过，即使是它们中的一个在读，而另一个在写，也是不妥的。正在进
成破坏，甚至导致其无法继续使用。很明显，让服务器和myisamchk同时往一个表里写入内
你必须防止服务器在此时修改那个表。如果不这样做，那么对这个表的竞争访问则可能对其造
序，这个程序可以在不通过服务器的情况下，直接打开表文件。在myisamchk访问表文件时，
表访问协调有关的问题。例如，另一种检查或修复MyISAM表的做法是调用myisamchk工具程
护操作时，会负责处理协调访问表所引发的各类问题，所以你就不用再考虑这些问题了。
的.frm、.MYD 和.MYI文件。这可能是能够采用的最好方法，因为当服务器执行这些请求的维
mysqlcheck 程序），让服务器来做具体的事情。在这种情况下，服务器会访问表示这个表
一致性检查或修复，
14.2
要保证你所处理的文件在你操作的前后都拥有相同的访问模式和所有权属性。
名字为mysql。当然，也可以用root用户的身份来访问这些文件，但是在这种情况下，一定
管理员的身份登录，这样才能有足够的权限去访问这些文件。在本书里，假设这个登录账户的
如何备份，以及如何在必要时使用各种修复技术和恢复技术。
着
器
N
以客户端身份连接到服务器，然后执行SQL语句，指导服务器执行什么样的表维护操作。相比
自带的其他几种工具。
会
复
其他维护操作都是由不依赖于服务器的外部程序来完成的，在这种情况下，你必须考虑
在Unix系统里，当需要直接操作MySQL数据目录中的表文件或其他文件时，应该以MySQL
本章所涉及的几项管理任务（从制作备份到执行表修复），都需要与MySQL服务器合作。
导致出现比你正在试图修复的问题还要糟糕得多的问题！
某个表，那么一定要保证服务器在此期间不会对该表执行写入操作。如果你没有这样做，
，你必须采
在运行时也会访问那些文件，所以myisamchk的操作会与MySQL服务器发生竞争。这意
下，myisamchk程序是一个可以直接操作用于表示表的文件的独立程序。因为MySQL 服多
在其他一些情况下，也需要防止MySQL服务器访问表。
有些数据库维护操作需要连接服务器，告诉服务器该如何做。如果需要对MyISAM表进
SQL语句支持的选项的完整列表请参考附录E，本章所讨论的各个程序请参考附录F。
口
为完成上述任务，可供使用的工具除了MySQL服务器自身的功能以外，还有MySQL发行版
口
口女
口
查表的问题，并采取正确的措施。
TABLE。这些语句的命令行接口需要使用mysqlcheck程序。myisamchk工具也可用于检
如果想让服务器按需来执行维护操作，可以使用SQL语句，如CHECKTABLE和REPAIR
使用mysqldump程序来备份数据库，以后很可能会需要恢复它们。
以启用自动表修复功能。在服务器崩溃之后重启时，这些功能都很有用。
当服务器启动时，事务型存储引擎会进行自动恢复。
崩溃发生之前所做的二进制日志，把表恢复到最新状态。
进行数据恢复。首先，利用备份把表恢复到备份时的状态。然后，再根据备份之后、
如果对表进行检查和修复仍不能让服务器恢复运行，则需要使用备份和二进制日志来
修复功能来修正。
检查你的表，并尽可能地修复已发现的损坏表。轻微的损坏通常可以使用MySQL的表
在服务器运行时维护数据库
节将讨论如何让MySQL服务器面对困境，随后的各节将讨论如何预防问题发生、
采取措施防止myisamchk与服务器相互干扰。例如，你正在使用myisamchk 来值
，那么一种做法是执行CHECKTABLE或REPAIRTABLE语句（或者调月
14.2
。对于MyISAM存储引擎，你还可
在服务器运行时维护数据库
511
容
表
用
务
来
---
## Page 532
复
对于只检查或复制文件的操作，只需要进行只读访问。对于需要修改某些文件的操作，如表修
说明这里讨论的用于锁定单个表的内部锁定技术，只适用于处理像MyISAM这样的存储引擎
后，切换回你的 mysql会话，释放刚才的锁，告诉服务器它可以再次使用这个表了。
是说，除了锁定那个表以外，什么事情也不做)，然后根据你的需要处理表文件。在处理完成之
接服务器
14.2.1为只读或读/写访问锁定单个表
制存在问题，所以建议你也不要使用，本书也不再对其做更多的讨论。
互干扰的问题，那么必须使用锁定协议来与服务器进行协调。MySQL服务器提供了下面两种锁
几个表）无法使用。
不太愿意完全关闭服务器，因为这会使所有的数据库和表（并不仅仅是你想要检查或修复的那
定
没
512
夏或者使用完好的文件来替换损坏文件，则需要进行读/写访问。
机制。
设有运行，那么它当然不会访问你正在处理的那个表。但可以理解的是，MySQL管理员通常都
使用哪种锁定协议，取决于你是要对这个表的文件进行只读访问，还是要进行读/写访问。
如果要使用服务器的内部锁定机制来防止它访问你正在处理的表，可以使用mysql程序连
接下来的讨论只涉及如何使用内部锁定机制来协调服务器的表访问操作。
如果想退
口外部锁定机制。
口内部锁定机制。服务器使用这一机制，可以防止不同客户端的请求相互干扰，例如，要
口
口
口
口
每个表有关的信息存储在它的数据字典里，而这个数据字典存储在系统表空间里。)
那些文件中。（即使通过配置，让每个表单独使用一个表空间，InnoDB仍然会把某些与
定的文件里。例如，InnoDB引擎默认会把所有InnoDB表都表示到构成其系统表空间的
并不适用于像InnoDB这样的存储引擎——它们会把与多个表有关的信息存储在某个给
所使用的表文件。这种存储引擎在表示每个表时，会使用这个表独有的文件。这些技术
器，并执行LOCK TABLE语句锁定你想要使用的表。接着，把mysql闲置在那里（也就
这种外部锁定机制的基础是操作系统在文件系统级的锁定功能。通常情况下，服务器
防止一个客户端的SELECT查询被另一个客户端的UPDATE语句干扰。在你使用外部程序
果你不想受到服务器的干扰，最有效的办法是将其彻底关闭。很明显，如果服务器根本
机制来协调访问的努力都起不到任何作用。
件替换原来的表文件。服务器对这些新文件一无所知，这会导致任何想要利用文件锁定
是myisamchk程序执行的修复操作会先把表文件复制为新文件，在处理完之后再用新文
求对表文件进行读/写访问的操作，如表修复。外部锁定机制是以文件锁定为基础的，
定机制只能用于对表文件进行只读访问的操作，如表检查。外部锁定机制并不能用于要
处理某个表时，也
使用了把损坏表替换为完好备份副本的恢复方法。在替换该表时，不能让服务器访问它。
过程中修改表。
使用了会复制表文件的备份技术。为确保备份文件的一致性，必须防止服务器在备份
重定位了数据库。
重定位了MyISAM表的数据文件或索引文件。
使用了myisampack程序压缩的MyISAM表。
第14章数据库维护、备份和复制
避免停止服务器，同时又想避免在运行的服务器和你在外部执行的操作之间出现相
，服务器使用这一机制，可以防止其他程序修改它正在使用的表文件。
也可以用这种内部锁定机制来阻止客户端访问该表。
，因为外部锁定机
的
器
---
## Page 533
引文件的存在。
作重建或者重新修复了索引文件，那么只有等到你再次刷新表缓存之后，服务器才能知道新索
怕只是读取也不可以。第二，在处理完表之后必须执行第二条 FLUSH TABLE 语句。如果维护操
除了获取读锁外，还必须获取写锁。因为你要对表进行修改，所以决不能让服务器访问它，哪
到这一点，你必须获取一个写锁，以便完全阻止服务器对你正在处理的表进行任何形式的访问。
14.2.1.2为读/写访问锁定表
协议来安全地获得。
查时，很可能需要执行一些还原或修复操作。这些操作需要读/写访问，可以使用下一节介绍的
录，则需要把这些文件像下面这样复制到备份目录/var/backup下：
MyISAM表，你便可以采用复制其表示文件的方式来进行备份。如果当前目录为表的数据库目
使服务器关闭表文件，这会刷新可能仍缓存在内存里的未写入的更改。
需要修改表时，请不要使用这种锁定方式。
对于这种情况，获取读锁就够用了；服务器会阻止其他客户修改表，但会允许客户读取它。
14.2.1.1为只读访问锁定表
设备来挂起和恢复mysql进程，一边处理表。
mysql，而在另一个窗口里处理表文件。在非窗口化环境里，你可以一边利用 shell的作业控制
文件时将不再安全
设置的锁定。此时，服务器会认为它又可以随意地使用这个表了，而结果就是你在处理这些表
以解除锁定。这种操作之所以行不通，是因为当你退出mysql程序时，服务器会自动解除你所
能使用mysql程序连接MySQL服务器，锁定表，然后立刻退出，接着又试图再次连接服务器
这个特定的表。
打开它。各个实例使用的是FLUSHTABLE语法，该语法接受一个表名作为参数，并且只会刷新
存的内容写入磁盘，这条语句的另一个作用是告诉服务器在下次访问这个表的时候，需要重亲
用来释放锁。它们还需要使用FLUSH TABLE语句来通知服务器刷新（flush）缓存的更改，
对表进行读/写访问锁定的操作，与进行读取访问锁定的操作相似，不同之处有两点。第一，
本节讨论的读/写锁定协议适用于需要对表文件进行修改的场合，如表替换或表修复。为做
、只读锁定协议适用于只需对表文件进行读取的操作，如复制文件或者检查文件的不一致性。
执行锁定操作的一个简单方法是，同时打开两个窗口。你可以让其中一个窗口持续运行
你必须在与服务器的一个单独会话里执行所有的LOCK、FLUSH和 UNLOCK 语句。例如，
在整个操作过程中，你很可能会发现还需要对这个表做进一步的处理。例如，在进行表检
mysql> UNLOCK TABLE;
(3）在完成对表的处理之后，再切换回窗口A里的 mysql会话，释放表锁：
这个示例只是用于演示。你实际发出的命令取决于你要执行的特定维护操作。
%cptbl_name.*/var/backup
在你检查表时，获取读锁可以防止其他客户端对该表执行写入和修改操作。FLUSH语句将
%mysql db_name
（1）在窗口A里，调用mysql程序，并执行下列语句，以获得读锁，然后刷新表：
这两种锁定协议都需要使用LOCK TABLE 和 UNLOCK TABLE 语句，前者用来请求锁，后
全。
14.2在服务器运行时维护数据库
将
513
在
者
---
## Page 534
14.3.1运用服务器的自动恢复功能
14.3基本的预防性维护
务器，才能保证刷新所有的内容，关闭所有的文件。
能还有一些尚未完成的事务，只部分地刷新了它的日志文件。像这样的操作需要你完全停止服
InnoDB这样的事务型存储引擎所管理的所有表进行二进制备份）的需要，因为这种存储引擎可
因此只有在真的有必要时才可以这样锁定服务器。这个办法还无法满足某些操作（例如，对像
全地继续后面的操作，而其他客户端这时也不会对你造成干扰。
客户端释放它们所拥有的表锁，并完成所有未完成的事务。在SET语句返回之后，你便可以安
里的所有表。使用下面这些语句可以做到这一点：
14.2.2
前
514
个不错的选择。但从另一方面来讲，这种方法对于那些想要更新表的客户端来说很不友好，
前目录为表的数据库目录，则需要像下面这样把备份目录/var/backup里的文件复制过来。
一个MyISAM表，你便可以根据备份（通过复制表的表示文件得到的）来恢复这个表。如果当
，如使用mysqldump 程序进行备份，如果想让 MySQL服务器保持“安静”，那么这种方法
如果想要阻止客户端修改任何表，最简单的办法莫过于以只读方式一次性锁定所有数据库
维护数据库完整性的第一道防线是MySQL服务器的崩溃恢复功能。
本节将对前两项进行讨论。更多关于备份技术的信息请参考14.4节。
本节将介绍一些能帮助你维护数据库完整性的基本策略。
mysql> SET GLOBAL read_only = OFF;
如果想再次允许进行修改，可以使用下面这些语句：
其中，FLUSH语句可以获得一个全局性的读锁，而 SET 语句会进入阻塞状态，
mysql> UNLOCK TABLE;
mysql> FLUSH TABLE tbl_name;
(3）在完成对表的处理之后，切换回窗口A里的mysql会话，再次刷新表，释放表锁：
这个示例只是用于演示。你实际执行的命令取决于你要执行的特定维护操作。
%cp/var/backup/tbl_name.*.
(2）在 mysql 闲置之后，切换到窗口 B，开始直接处理表文件。例如，如果 tbl_name 是
mysql> FLUSH TABLE tbl_name;
mysqldb_name
(1）在窗口A里调用mysql程序，执行下面这条语句，以获得写锁，然后刷新表：
为读/写访问锁定表的过程如下所示。
口
口
制定一套定期备份数据库的策略，这样，在数据库遭到破坏或出现数据丢失时，可以进
表以这种方式锁定时，其他客户端只能读取数据，但不能更改它们。当你执行某些操作