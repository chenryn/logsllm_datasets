### 1.12.1 Docker 网络
#### 高级网络配置
接下来的部分将介绍在不同场景下如何对Docker的网络进行定制化配置，以及如何通过Linux命令来调整、补充甚至替换Docker默认的网络设置。

#### 快速配置指南
以下是与Docker网络相关的命令列表。需要注意的是，部分命令选项仅能在Docker服务启动时配置，并且这些设置不会立即生效。
- `-b BRIDGE` 或 `--bridge=BRIDGE`：指定容器使用的网桥。
- `--bip=CIDR`：自定义docker0的IP地址和子网掩码。
- `-H SOCKET...` 或 `--host=SOCKET...`：设置Docker服务监听的地址或套接字。
- `--icc=true|false`：启用或禁用容器间通信。
- `--ip-forward=true|false`：控制是否开启IP转发功能，请参见后续关于容器间通信的部分。
- `--iptables=true|false`：允许或禁止Docker添加iptables规则。
- `--mtu=BYTES`：设置容器网络的最大传输单元（MTU）。

以下两个选项既可以在启动Docker服务时指定，也可以在运行单个容器(`docker run`)时使用。如果是在服务级别指定，则作为所有容器的默认值；但之后仍可以通过`docker run`覆盖该设置。
- `--dns=IP_ADDRESS...`：指定DNS服务器。
- `--dns-search=DOMAIN...`：设置DNS搜索域。

最后这些选项仅适用于`docker run`命令，因为它们针对特定容器特性：
- `-h HOSTNAME` 或 `--hostname=HOSTNAME`：设置容器主机名。
- `--link=CONTAINER_NAME:ALIAS`：建立到另一个容器的链接。
- `--net=bridge|none|container:NAME_or_ID|host`：选择容器网络模式。
- `-p SPEC` 或 `--publish=SPEC`：映射容器端口至宿主机。
- `-P` 或 `--publish-all=true|false`：映射容器的所有端口至宿主机。

#### DNS配置
Docker并不为每个容器单独配置镜像以改变其主机名或DNS设置。相反，它利用虚拟文件系统挂载了三个关键文件到容器中，从而实现动态更新：
- `/etc/hostname`
- `/etc/hosts`
- `/etc/resolv.conf`

这使得当宿主机上的DNS信息发生变化时，所有Docker容器能够即时获取最新的DNS配置。用户还可以手动设定容器的DNS相关参数，例如：
- `-h HOSTNAME` 或 `--hostname=HOSTNAME`：设置容器内部可见的主机名。
- `--link=CONTAINER_NAME:ALIAS`：创建指向其他容器的链接，并在新容器的/etc/hosts文件中添加对应条目。
- `--dns=IP_ADDRESS`：向容器的/etc/resolv.conf添加额外的DNS服务器。
- `--dns-search=DOMAIN`：定义域名搜索路径，有助于解析未完全限定的主机名。

#### 容器访问控制
Docker主要依靠Linux内置的iptables防火墙来管理容器间的访问权限。
- **外部网络访问**：确保Linux内核已启用IP转发功能（`sysctl net.ipv4.ip_forward`）。若关闭，可通过`sysctl -w net.ipv4.ip_forward=1`启用，或者在启动Docker时使用`--ip-forward=true`自动激活。
- **容器间通信**：默认情况下，所有容器共享同一网桥并可互相通信。为了增强安全性，可以设置`--icc=false`禁止跨容器通信，然后通过`--link`选项按需开放特定连接。
- **端口映射**：通过`-p`或`-P`参数使容器暴露于外网。前者允许精确指定端口号，后者则自动分配可用端口。

#### 自定义网桥
除了默认提供的docker0网桥外，用户亦可自行定义新的网桥供Docker使用。步骤包括停用现有服务、删除旧网桥、新建所需网桥并重新启动Docker守护进程。

#### 工具与示例
- **pipework**：一个简化复杂网络布局配置过程的小工具。
- **playground**：提供了一整套完整的Docker网络管理解决方案，涵盖路由、NAT等功能。

#### 编辑网络配置文件
从版本1.2.0起，Docker支持直接编辑正在运行中的容器内的某些网络配置文件如/etc/hosts等，但这只是临时修改，重启后会丢失更改。

#### 实例：点对点连接
对于需要直接相连而无需经过主机关联的情况，可以通过创建一对peer接口并在两个独立的容器之间形成点对点链路的方式来实现。具体操作涉及查找目标容器PID、创建网络命名空间链接文件以及实际生成并配置peer接口对。