operator ﬂattening, and inlining; these are almost always ben-
eﬁcial. Other optimizations are more complex and should be
selectively applied. For example, CirC can replace operations
over bit-vector arrays with operations over bit-vectors, via
memory-checking techniques [7, 10, 11, 41, 42, 106]. This
is essential for proof systems, which do not support arrays.
When compiling to SMT—which natively supports arrays—
the optimization is unnecessary.
Optimizations motivated by one pipeline often help others,
too. As one example, while implementing our ZoKrates-to-
R1CS compiler, we added a bit-shifting optimization in the
constant folding pass; this pass also helps the C-to-R1CS
compiler (and likely any future R1CS pipelines, too). The
optimization replaces terms of the form x>>k (for bit-vector
x and constant k) with a rearrangement of the bits of x. The
latter ultimately requires substantially fewer R1CS constraints
than a variable offset bit-shift.
Optimizations can also help multiple targets. In Section 6,
we present experiments demonstrating that some optimizations
are beneﬁcial for both SMT and R1CS, despite signiﬁcant
differences in these targets’ execution semantics.
3.4. Back-ends: from CirC-IR to circuits
To support a new EQC back-end, designers lower CirC-IR
to their chosen representation. Generally, writing a back-end
for a new circuit representation is easier than writing a front-
end, since CirC-IR is already a circuit IR. Once a developer
has lowered CirC-IR to their target of choice, they can per-
form target-speciﬁc optimizations. This is relatively standard:
many compilers support such optimizations [77, 107], and we
discuss those that we implement in Section 4.2.
4. Extensibility and implementation
As we discussed in the previous section, CirC’s main goal
is extensibility to new source languages and target EQCs. The
compiler’s design made it easy to implement ﬁve front-ends—
for Circom, ZoKrates 0.6.1, a modiﬁed version of ZoKrates
0.7.6 that we call Z#, a Datalog dialect, and a subset of C—
and three back-ends—to SMT, R1CS, and ILP. The rest of this
2254
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
section gives background on the languages and back-ends, and
describes using CirC to support each of them.
4.1. Front-ends
Circify makes certain aspects of supporting a new lan-
guage easy, because it manages the transformation of stateful
programs with complex control ﬂow into ﬂat circuits. On
the other hand, Circify does not assist with features that
are likely to be language-speciﬁc, such as type checking and
namespacing. In this section, we discuss CirC’s front-ends and
describe what was easy and what was hard for each.
C. CirC supports a subset of C that includes ﬂoats, doubles,
booleans, integers, structures, stack arrays, and pointers to
a statically known variable or array. Our C front-end also
includes an opt-in taint-tracking system for deﬁnedness, which
is useful, e.g., for detecting bugs due to undeﬁned behavior
(§7.3). It does not support recursion or goto.6 In spite of these
limitations, CirC’s C semantics are richer and more standards-
compliant than prior work. As important examples: CirC wraps
integer arithmetic modulo powers of two, as required by
C11; Pequin [108] instead wraps modulo a large prime. CirC
supports data-dependent array accesses and pointer offsets;
PICCO [109] and CMBC-GC [66] only support constant off-
sets that are known at compile time.
ZoKrates. ZoKrates [12, 13] is a recent (2018) language
for programming zero-knowledge proof systems. Developers
write ZoKrates programs that check properties (e.g., “account
balance is positive”), and the ZoKrates compiler converts those
programs into equivalent R1CS. ZoKrates is a mature project:
at least 42 contributors have authored over 3600 commits
in the past several years, and there have been dozens of
versions of the ZoKrates language to date. We now describe
our experience implementing front-ends for two versions.
ZoKrates 0.6.1’s types are ﬁxed-width integers, ﬁnite
ﬁeld elements, booleans, ﬁeld element–indexed arrays, and
structures. The language supports mutable variables, condi-
tional expressions, and statically bounded loops. Neither data-
dependent control ﬂow (e.g., conditional statements) nor loops
with an input-dependent number of iterations are supported.
Our ZoKrates front-end builds on Circify (§3.2), which
handles essentially all of the complexity (variable mutation,
scoping, and function calls). The most complex remaining is-
sue is ZoKrates’s module and import system: import directives
can rename imported identiﬁers, so name resolution depends
on the current module (e.g., a structure might be deﬁned as S
but imported into another module as S(cid:48)). To handle this, the
front-end tracks the current module and uses this information
for name resolution (≈50 LOC).
Building this compiler took one person less than one
week; the ZoKrates front-end comprises less than 900 lines
of (non-parser, non-AST) code. For comparison, the core of
the ZoKrates 0.6.1 reference compiler (which also excludes
parsers, ASTs, and tooling) comprises over 24,000 lines and
was written over the course of multiple years. Furthermore, our
compiler supports a strict superset of the ZoKrates language,
including (for example) if-statements. Finally, as §5 will show,
our compiler produces slightly better output.
6. Prior work [11, 27] shows how to support some of these constructs.
2255
1 pow(X: u16, E: u16, Y: u16) % Y = X ** E
2
if E = 0, Y = 1;
or E > 0, E & 1 = 0, pow(X * X, E / 2, Y);
or exists Z: u16,
3
4
5
E > 0, E & 1 = 1, pow(X * X, E / 2, Z), Z * X = Y.
Figure 8. Recursive ZKlog rule for computing powers.
ZoKrates 0.7.6 adds support for structures and functions
that are generic over integer constants (used to write code that
is generic over array lengths; recall that these must be known
at compile time). We have adopted these features in Z#, a
language based on—but not fully compatible with—ZoKrates
0.7.6 that is being used in a commercial deployment of zero-
knowledge proofs. Our Z# implementation invokes the SMT
solver during compilation to infer generic parameters, a simple
but useful example of invoking a CirC back-end to implement
a language feature (§7). Adding support for the above, plus a
Z# AST analysis library (used for type checking and inference)
and an AST-walking interpreter (used to support compile-
time macros, testing, and debugging), took roughly 3 kLOC.
Importantly, none of these features required changes to CirC-
IR or Circify, giving us conﬁdence that CirC’s abstractions
will easily support more advanced language features.
ZKlog. Datalog is a class of logic programming languages;
Datalog dialects have been used to express database queries,
program analyses, and more. We build a front-end for a
Datalog dialect that we call ZKlog, to show that CirC can
support a very different programming paradigm from that of
C or ZoKrates. ZKlog programs are a collection rules over
input variables; rules are deﬁned in terms of cases, which can
introduce (existentially quantiﬁed) variables and enumerate
conditions. Figure 8 shows a ZKlog rule for the relation
Y = XE. ZKlog supports booleans, ﬁxed-width integers, ﬁnite
ﬁeld elements, and ﬁxed-length array types;
it (like other
Datalog dialects) does not allow negated rule applications, so
any ZKlog rule can be compiled to an EQC. Appendix B
presents ZKlog’s syntax.
The main challenge in supporting ZKlog is recursion:
ZKlog, as a Datalog dialect, relies on recursion for iteration—
there is no looping construct. Naively inlining recursive calls
would cause the compiler to diverge, so we bound recursion
in two ways. First, we use a programmer-speciﬁed, command-
line recursion limit that bounds the number of times any rule
can be recursively inlined. Using this construct, the program-
mer must correctly specify a recursion limit that’s sufﬁciently
large to compile a given rule into an EQC. If the recursion limit
is too low, the generated EQC is incomplete—unsatisﬁable for
some inputs that it should be satisﬁable for.
To alleviate the burden on the programmer, we support
arbitrary recursion for primitive recursive rules applied to
compile-time constants. From computability theory, a rule
(more generally, a function) is primitive recursive in a formal
argument x if all recursive calls are strictly decreasing in x.
For example, the rule pow in Figure 8 is primitive recursive in
E. However, without the condition E > 0 on line 3, it would
not be, since E / 2 might not be less E.
To identify rules and arguments with primitive recursion,
we allow programmers to annotate one rule argument as
“decreasing”. If the rule recurses and the annotated ar-
gument is a compile-time-constant that is strictly less than its
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
def difflog(private u8 x) -> u8:
u8 acc = 0x00
for field i in 0..8 do
acc = if x != 0x00 then acc + 0x01 else acc fi
x = x >> 1
endfor
return x - acc
Figure 9. A small ZoKrates program that computes x − (cid:98)log2 x(cid:99).
previous value, the compiler ignores the recursion limit while
compiling the rule to an EQC. We use CirC’s constant-folding
pass to check whether a value is a compile-time-constant that
is less than in previous calls.
We can also use an SMT solver to determine whether
a decreasing annotation is valid for all compile time
constants. We describe this analysis in Section 7.2.
Circom. Circom is a hardware description language for arith-
metic circuits. Our Circom compiler thus bypasses CirC-
IR, and only takes advantage of the R1CS optimizations in
CirC. This demonstrates the CirC framework’s modularity: it’s
possible to attach front-ends to CirC-IR, but it’s also possible
to attach directly to back-ends in order to take advantage of
target-speciﬁc optimizations.
4.2. Back-ends and target-speciﬁc optimizations
We’ve implemented three EQC back-ends in CirC: SMT,
R1CS, and ILP. We will use the ZoKrates program in Figure 9
as a running example to illustrate the semantics of these back-
ends. This program takes a private input x and computes an
(implicitly public) output x − (cid:98)log2 x(cid:99). The front-end marks
private inputs as existential in the compiled EQC. As we will
see, existential inputs have slightly different semantics in each
back-end.
SMT. Targeting SMT from CirC is trivial, since CirC-IR
is based on SMT-LIB. Our SMT back-end (based on Z3’s
Haskell bindings [110]) supports all of CirC-IR except ﬁnite
ﬁeld elements. Finite ﬁeld arithmetic could be represented
as modular arithmetic over bit-vectors of sufﬁcient width,
but existing SMT solvers are hopelessly inefﬁcient on this
encoding, so we omit it. Efﬁciently supporting ﬁnite ﬁelds in
SMT solvers is future work.
When paired with the ZoKrates front-end, the SMT back-
end requires values for public inputs and outputs of the entry
function (in Fig. 9 this is only the return value, e.g., 9).
Then, the backend produces an SMT formula that allows an
SMT solver to search for an assignment to the private inputs
corresponding to a valid execution (e.g., x (cid:55)→ 13).
R1CS. Our R1CS back-end supports booleans, ﬁnite ﬁeld
elements, bit-vectors, and arrays checkable using memory
checking techniques (§3.3).7 We use prior techniques [7, 10,
34, 57, 111, 112] to lower booleans and bit-vectors to R1CS.
Our lowering pass also optimizes translation of certain CirC-
IR terms. For example,
the bit-vector term “(c & t) |
((not c) & f)” is better translated as a bitwise if-then-
else than as two ANDs and an OR.
7. CirC does not currently lower ﬂoating-point arithmetic to R1CS. Al-
though prior work supports a rudimentary ﬂoating-point representation [34],
embedding IEEE 754–compatible ﬂoats in R1CS remains an open problem.
for linear constraints, e.g., 0 = c +(cid:80)
Following prior work on proof system compilers [10, 15],
we implement one simple but powerful R1CS-speciﬁc opti-
mization in CirC: linearity reduction. This optimization looks
i cixi. It solves for one
of the variables in the constraint, then eliminates that variable
from the constraint system using substitution.
When paired with the ZoKrates front-end, the R1CS back-
end implements ZKPs of function execution that reveal noth-
ing additional about the values of private inputs. For instance,
a prover can show that they know an input x such that the
program in Figure 9 outputs 4 (e.g., x (cid:55)→ 7 or x (cid:55)→ 8).
ILP. Our ILP back-end supports booleans, bit-vectors, and
arrays captured by memory checking techniques (§3.4). Given
a CirC-IR circuit C that outputs an unsigned bit-vector, the
back-end uses techniques from [113] and [114] to build an
ILP. This ILP includes variables that encode C’s inputs, and
its objective is maximized when C’s output is. Thus, by giving
the ILP to a solver (we use CBC [104]), one can discover
output-maximizing inputs for C.
When paired with the ZoKrates front-end, the ILP back-
end requires values for public inputs to the entry function (in
Fig. 9, there are none). Then, the ILP backend produces a
circuit that allows an ILP solver to search for an assignment to
the private inputs (in Fig. 9, x) that maximizes the return value.
For example, in Figure 9, the ILP solver ﬁnds that x (cid:55)→ 255
achieves the maximum output value of 247.
4.3. Implementation
CirC’s v1.0 implementation comprises ≈15k lines of
Haskell. The core (i.e, Circify and the IR deﬁnition and
optimizations) is ≈5.7k lines; tests and extensions are the rest.
This is the implementation that we evaluate (§5). CirC v2.0
is a ground-up re-implementation in Rust (≈11k lines), which
makes it easier to reason about and optimize compilation times
and to bring new developers onboard. CirC v2.0 is under active
development and will be the main focus of future efforts.
The two versions have different sets of extensions. All
extensions described in this paper were implemented for CirC
v1.0, except those for ILP and ZKlog. CirC v2.0 doesn’t
support Circom, and its subset of the C language is more
restricted. All benchmarks in this paper were run using CirC
1.0 unless otherwise noted. Both versions are open-source.8
5. Output performance and correctness
Language designers should be able to use CirC to create
correct, efﬁcient circuits. In this section, we evaluate both
performance—does CirC produce circuits that perform well
with respect to a given target?—and correctness—can CirC
accurately model input language semantics? We measure per-
formance by comparing CirC’s proof system pipelines to state-
of-the-art, dedicated R1CS compilers. We evaluate correctness
by running CirC’s SMT pipeline on two standard veriﬁcation
benchmarks. Ultimately, we answer two questions. Does CirC:
• Emit R1CS outputs competitive in size with those emitted
by state-of-the-art proof-system compilers? (§5.1)
8. v1.0: github.com/circify/compiler and v2.0: github.com/circify/circ
2256
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
Figure 10. Comparison between CirC and Pequin (§5.1). Relative performance
depends on the benchmark, with neither compiler dominating the other.
Figure 11. Comparison between CirC and ZoKrates’s reference compiler
(§5.1). CirC generally produces better output.
• Emit SMT circuits that capture C program semantics with
enough ﬁdelity to ﬁnd simple bugs? (§5.3)
We ﬁnd that CirC’s R1CS outputs perform exactly the
same as the Circom compiler’s, roughly the same as Pequin’s,
and slightly better than the ZoKrates compiler’s. We also
ﬁnd that CirC’s SMT formulas are correct on two benchmark
suites from the sv-comp [115] veriﬁer competition. Finally,
we evaluate CirC on a deployed proof-system application,
verifying Merkle paths, by compiling ZoKrates code to R1CS
(§5.2); CirC matches Zcash’s hand-tuned implementation.
5.1. Performance
We consider three compilation pipelines when evaluating
the performance of CirC’s output: C-to-R1CS, ZoKrates-to-
R1CS, and Circom-to-R1CS. We ﬁnd that CirC is competitive
with the state of the art in all cases, and slightly outperforms
the ZoKrates compiler; our metric is the number of rank-1
constraints, which is standard (§2.2; [6, 10, 11]).
C-to-R1CS. Compiling C to R1CS stresses CirC’s handling
of boolean, bit-vector, and array (memory) constraints. On this
task, we evaluate CirC against Pequin [108], a state-of-the-art
compiler from a subset of C to R1CS that builds on a long line
of work [7, 11, 34, 57]. We use 6 benchmarks from the Pe-
quin software distribution covering a representative sample of
control-ﬂow patterns and primitive operations. Pequin assumes
that arithmetic never overﬂows; we use a modiﬁed version of
CirC’s R1CS machinery that matches Pequin’s semantics. For
each benchmark, we report the ratio between the number of
constraints that CirC and Pequin produce, which is lower when
CirC performs better.
Figure 10 shows the results: the compilers perform compa-
rably. On simple arithmetic (mm5: matrix multiplication), they
produce an identical number of constraints. On a binary-search
implementation of integer square-root (u32sqrt), CirC has a
slight edge, probably because of aggressive constant folding.
On an addition- and bit manipulation–intensive hash (sha1),