Module 2
Typical goals of malware and their 
implementations
https://github.com/hasherezade/malware_training_vol1
Hooking
Hooking: the idea
•Hooking means intercepting the original execution of the 
function with a custom code 
•Goal: to create a proxy through which the input/output of the 
called function bypasses
•Possible watching and/or interference in the input/output of 
the function
Hooking: the idea
• Calling the function with no hook:
Call Function(arg0,arg1)
Function:
(process arg0, arg1)
...
ret
Hooking: the idea
• Calling the hooked function: the high-level goals
Intercept:
Arg0, arg2
Call Function
ret
Call Function(arg0,arg1)
Function:
(process arg0, arg1)
...
ret
Hooking: who?
Hooking is used for intercepting and modifying API calls
• By malware: i.e. spying on data
• By Anti-malware: monitoring execution
• Compatibility patches (Operating System level)  - i.e. shimming engine
• Extending functionality of the API
Hooking in malware
•Sample purposes of hooks used by malware:
• Hiding presence in the system (rootkit component)
• Sniffing executions of APIs (spyware)
• Doing defined actions on the event of some API being called (i.e. 
propagation to  a newly created processes, screenshot on click)
• Redirection to a local proxy (in Banking Trojans)
Hooking: how?
There are various, more or less documented methods of hooking. Examples:
• Kernel Mode (*will not be covered in this course)
• User Mode:
• SetWindowsEx etc. – monitoring system events
• Windows subclassing – intercepting GUI components
• Inline/IAT/EAT Hooking – general API hooking
Monitoring system events
• Windows allows for monitoring certain events, such as:
• WH_CALLWNDPROC – monitor messages sent to a window 
• WH_KEYBOARD
• WH_KEYBOARD_LL
• etc.
• The hook can be set via SetWindowsHookEx
• This type of hooks are often used by keyloggers
Monitoring system events
• Example: Remcos RAT
https://www.virustotal.com/gui/file/47593a26ec7a9e791bb1c94f4c4d56deaae25f37b7f77b0a44dc93ef0bca91fd
Monitoring system events
• Example: Remcos RAT
Windows subclassing
• This type of hooking can be applied on GUI components
• Window subclassing was created to extend functionality of the GUI controls
• You can set a new procedure that intercepts the messages of the GUI controls
• Related APIs:
• SetWindowLong, SetWindowLongPtr (the old approach: ComCtl32.dll =6)
• Subclassed window gets a new property in: UxSubclassInfo or 
CC32SubclassInfo (depending on the API version)
https://docs.microsoft.com/en-us/windows/win32/controls/subclassing-overview
Windows subclassing
• Windows subclassing can also be used by malware
• Example: subclassing the Tray Window in order to execute the injected code
https://github.com/hasherezade/demos/blob/master/inject_shellcode/src/window_long_inject.cpp
General API Hooking
• Most common and powerful, as it helps to intercept any API
• Types of userland hooks:
• Inline hooks (the most common)
• IAT Hooks
• EAT Hooks
API Hooking: the idea
Hooking API of a foreign process requires:
1.
Implanting your code into the target process
2. Redirecting the original call, so that it will pass through the implant
Implanting a foreign code
MainProgram.exe
Ntdll.dll
Kernel32.dll
implant
Any code that was added to the 
original process. It can be a PE  (DLL, 
EXE), or a shellcode
Implanting a foreign code
MainProgram.exe
Ntdll.dll
Kernel32.dll
implant
Call kernel32.CreateFileA
The implant intercepts the call
IAT Hooking
IAT Hooking
• In case of IAT hooks, the address in the Import Table is altered
• IAT hooks are often used by Windows compatibility patches, shims
• Not as often (but sometimes) used by malware
IAT Hooking: idea
• In case of IAT Hooking we can really implement it in this simple way: by replacing the 
address via which the function is called in the IAT
Intercept:
Arg0, arg2
Call Function
ret
Call Function(arg0,arg1)
Function:
(process arg0, arg1)
...
ret
IAT Hooking
The address filled in IAT leads to User32.dll (as the table points)
original
IAT Hooking
The address filled in IAT leads to a different module
hooked
IAT Hooking – the pros
• IAT hooking is much easier to implement than inline hooking
• The original DLL is unaltered, so we can call the functions from it via 
the intercepting function directly – no need for the trampoline
IAT Hooking – the cons
• IAT hooking can intercept only the functions that are called via import 
table
• Cannot hook lower level functions that are called underneath
• Cannot set hooks globally for the process – each module importing 
the function has to be hooked separately
IAT hooking detection
• IAT Hooking is detected i.e. by PE-sieve/HollowsHunter
Pe-sieve.exe /pid  /iat
Hollows_hunter.exe /iat
Inline Hooking
Inline Hooking
• In case of Inline hooks, the beginning of the original function is altered
• Inline hooks may also be used in legitimate applications
• Extremely often used in malware
Inline Hooking: idea
• In case of Inline Hooking we need to overwrite the beginning of the function: so, calling the 
original one gets more complicated...
Intercept:
Arg0, arg2
Call Trampoline
...
ret
Call Function(arg0,arg1)
Function:
JMP Intercept
Function+OFFSET:
(process arguments)
...
ret
Trampoline:
Jmp Function+OFFSET
6
1
2
3
4
5
Inline Hooking: example
• Example of an inline hook installed by a malware in function CertGetCertificateChain
original
Inline Hooking: example
• Example of an inline hook installed by a malware in function CertGetCertificateChain
infected
Original: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Hooked: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Hooked: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Hooked: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Hooked: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Hooked: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Hooked: CertGetCertificateChain
call crypt32.CertGetCertificateChain
Inline Hooking: Hotpatching
• Inline hooking is officially supported
• The hotpatching support can significantly simplify the operation of setting the inline hook
• If the application is hotpatchable, then just before the prolog we can find: additional instructions: 
• MOV EDI, EDI, and 5 NOPs
Inline Hooking: Hotpatching
• MOV EDI,EDI -> 2 BYTEs : can be filled with a short jump
• 5 NOPS -> 5 BYTEs : can be filled with a CALL
Inline Hooking: Hotpatching
• Hotpatching support can be enabled in the compiler options:
Inline hooking: common steps
1.
GetProcAddress()
2.
VirtualAlloc: alloc executable memory for the trampoline
3.
Write the trampoline: copy the beginning of the function to be hooked, and 
the relevant address (common opcode: 0xE9 : JMP)
4.
VirtualProtect – make the area to be hooked writable
5.
Write the hook (common opcode: 0xE9 : JMP)
6.
VirtualProtect – set the previous access
Inline Hooking – the pros
• The hook works no matter which way the function was called
• Hook once, execute by all the modules loaded in the process
Inline Hooking – the cons
• We need to overwrite the beginning of the function, which means:
• Parsing assembly is required (in order not to corrupt any instructions, and 
make a safe return)
• Additional space must be used for the trampoline (where the original 
beginning of the function will be copied, allowing to call the original version 
of the function )
• Making a stable hooking engine requires solving the concurrency issues: 
the function that we are just hooking may be called from another thread
Inline Hooking – libraries
• There are ready-made open source libraries for inline hooking. 
Examples:
• MS Detours: https://github.com/microsoft/Detours
• MinHook: https://github.com/TsudaKageyu/minhook
• ...and others
• Those libraries are also used by malware!
Inline hooking detection
• Inline Hooking is detected i.e. by PE-sieve/HollowsHunter
Pe-sieve.exe /pid  (detects inline hooks by default)
Hollows_hunter.exe /hooks (hook detection can be enabled by /hooks)
Exercise 1
• The sample hooked application: 
• https://drive.google.com/file/d/1CJL4tLlnbaMj-
nC9Mw7BOqc9KhNZGTH1/view?usp=sharing
• Run the crackme that has both inline hooks, and IAT hooks installed
• Scan the application by PE-sieve
• Analyze the reports, and see what can we learn about the hooks
Exercise 2
• Sphinx Zbot
• 52ca91f7e8c0ffac9ceaefef894e19b09aed662e
• This malware installs variety of inline hooks in available applications
• Scan the system with Hollows Hunter to grab the hook reports
• Examine the hooks
• Compare them with the sourcecode of the classic Zeus – find all the hooks 
that overlap in both