# Module 2: Typical Goals of Malware and Their Implementations

## Introduction
This module covers the typical goals of malware and their implementations, with a focus on hooking techniques. For additional resources, refer to [hasherezade's GitHub repository](https://github.com/hasherezade/malware_training_vol1).

## Hooking: The Concept

### Definition
Hooking is a technique used to intercept and modify the execution flow of a function by inserting custom code. The primary goal is to create a proxy through which the input and output of the called function can be monitored and potentially altered.

### Function Execution Without Hooking
- **Calling the Function:**
  ```plaintext
  Call Function(arg0, arg1)
  Function:
    (process arg0, arg1)
    ...
    ret
  ```

### Function Execution With Hooking
- **High-Level Goals:**
  - Intercept: `arg0, arg1`
  - Call Function
  - Return
  - **Calling the Hooked Function:**
    ```plaintext
    Call Function(arg0, arg1)
    Function:
      (process arg0, arg1)
      ...
      ret
    ```

### Applications of Hooking
- **Malware:**
  - Spying on data
- **Anti-malware:**
  - Monitoring execution
- **Compatibility Patches:**
  - Shimming engine at the operating system level
- **Extending Functionality:**
  - Enhancing API capabilities

### Hooking in Malware
- **Sample Purposes:**
  - Hiding presence in the system (rootkit component)
  - Sniffing executions of APIs (spyware)
  - Performing specific actions when certain APIs are called (e.g., propagation to newly created processes, taking screenshots on clicks)
  - Redirection to a local proxy (in Banking Trojans)

## Hooking Techniques

### Kernel Mode Hooking
- **Note:** This will not be covered in this course.

### User Mode Hooking
- **SetWindowsHookEx:**
  - Monitors system events such as messages sent to a window, keyboard events, etc.
- **Windows Subclassing:**
  - Intercepts GUI components to extend their functionality.
  - **APIs:**
    - `SetWindowLong`, `SetWindowLongPtr` (old approach: ComCtl32.dll =6)
    - Subclassed window gets a new property in `UxSubclassInfo` or `CC32SubclassInfo` (depending on the API version).
- **Inline/IAT/EAT Hooking:**
  - General API hooking techniques.

### Monitoring System Events
- **Windows Hooks:**
  - `WH_CALLWNDPROC`: Monitor messages sent to a window
  - `WH_KEYBOARD`, `WH_KEYBOARD_LL`: Monitor keyboard events
  - **Example: Remcos RAT**
    - [VirusTotal Report](https://www.virustotal.com/gui/file/47593a26ec7a9e791bb1c94f4c4d56deaae25f37b7f77b0a44dc93ef0bca91fd)

### Windows Subclassing
- **GUI Component Interception:**
  - Extends functionality of GUI controls.
  - **Example: Subclassing the Tray Window**
    - [GitHub Example](https://github.com/hasherezade/demos/blob/master/inject_shellcode/src/window_long_inject.cpp)

### General API Hooking
- **Types:**
  - **Inline Hooks:**
    - Alter the beginning of the original function.
    - **Common Steps:**
      1. `GetProcAddress()`
      2. `VirtualAlloc`: Allocate executable memory for the trampoline.
      3. Write the trampoline: Copy the beginning of the function and the relevant address (common opcode: 0xE9 : JMP).
      4. `VirtualProtect`: Make the area writable.
      5. Write the hook (common opcode: 0xE9 : JMP).
      6. `VirtualProtect`: Restore previous access.
    - **Pros:**
      - Works regardless of how the function is called.
      - Execute by all modules loaded in the process.
    - **Cons:**
      - Requires parsing assembly to avoid corrupting instructions.
      - Additional space for the trampoline.
      - Concurrency issues must be managed.
    - **Libraries:**
      - MS Detours: [GitHub](https://github.com/microsoft/Detours)
      - MinHook: [GitHub](https://github.com/TsudaKageyu/minhook)
    - **Detection:**
      - PE-sieve: `Pe-sieve.exe /pid`
      - HollowsHunter: `Hollows_hunter.exe /hooks`

  - **IAT Hooks:**
    - Alter the address in the Import Table.
    - **Pros:**
      - Easier to implement than inline hooks.
      - No need for a trampoline.
    - **Cons:**
      - Can only intercept functions called via the import table.
      - Cannot hook lower-level functions.
      - Must hook each module importing the function separately.
    - **Detection:**
      - PE-sieve: `Pe-sieve.exe /pid /iat`
      - HollowsHunter: `Hollows_hunter.exe /iat`

## Exercises

### Exercise 1
- **Sample Hooked Application:**
  - [Download from Google Drive](https://drive.google.com/file/d/1CJL4tLlnbaMj-nC9Mw7BOqc9KhNZGTH1/view?usp=sharing)
- **Instructions:**
  - Run the crackme that has both inline hooks and IAT hooks installed.
  - Scan the application using PE-sieve.
  - Analyze the reports to understand the hooks.

### Exercise 2
- **Sphinx Zbot:**
  - SHA-1: `52ca91f7e8c0ffac9ceaefef894e19b09aed662e`
  - **Description:**
    - Installs various inline hooks in available applications.
  - **Instructions:**
    - Scan the system with Hollows Hunter to generate hook reports.
    - Examine the hooks.
    - Compare them with the source code of the classic Zeus to find overlapping hooks.

By following these exercises and understanding the concepts, you will gain a deeper insight into the mechanisms and implementations of malware.