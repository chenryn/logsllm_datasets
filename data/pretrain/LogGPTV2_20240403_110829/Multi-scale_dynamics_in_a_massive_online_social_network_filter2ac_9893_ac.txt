with a strong preferential attachment, and when α → 0, the
edge creation process becomes increasingly random.
Using this criterion, we validate the PA model over time
on our large Chinese social network by ﬁtting pe(d) mea-
sured at time t to dα(t) and examining α(t) over time. Our
study seeks to answer an important question: “Does our
network display the same level of preferential attachment
consistently over time?” In other words, does α(t) stay con-
stant over time? And if not, is the preferential attachment
stronger (or weaker) at a particular stage of network growth?
We make some small adjustments to the computation of
pe(d) on our dataset. First, because our data does not state
who initiated each friendship link (edge directionality), we
perform our test with two scenarios. The ﬁrst is biased in
favor of preferential attachment, because it always selects
the higher degree end-point as the destination. The second
scenario chooses the destination node randomly from the two
end-points. Second, to make the computation tractable on
our large number of graph snapshots, we compute pe(d) once
after every 5000 new edges. Finally, to ensure statistical
signiﬁcance, we start our analysis when the network reaches
a reasonable size, e.g. 600K edges.
We start by examining whether pe(d) ∝ dα(t)
Results.
is a good ﬁt. For this we use the Mean Square Error (MSE)
between the measured pe(d) and the ﬁtted curve. We ob-
serve that the MSE decreases with the edge count, ranging
from 1.8e-5 to 3.5e-13. This conﬁrms that the ﬁt is tight
for the measured edge probability. To illustrate the results,
Figures 3(a)-(b) show the edge probability pe(d) when the
network reaches 57M edges, using the two destination selec-
tion methods. The corresponding MSEs of the ﬁt are 1.7e-10
and 4.4e-11, respectively.
Next, we examine α(t) over time in Figure 3(c). We make
two key observations. First, α(t) when using the higher-
degree method is always larger than when using random
selection. This is as expected since the former is biased
in favor of preferential attachment. More importantly, the
diﬀerence between the two results is always 0.2. This means
that despite the lack of edge destination information, we can
still accurately estimate pe(d) from these upper and lower
bounds.
Second, α(t) decays gradually over time, dropping from
1.25 (when the network ﬁrst launched) to 0.65 (two years
later at 199M edges). Since the number of nodes with node
degree 1000 in the last snapshot is very small (0.0001% of
the total nodes in the network), we believe the decrease in
α(t) is not caused by the hard limit on node degree. This
results shows that when the network is young, it grows with
a strong preferential attachment. However, as the network
becomes larger, its edge creation is no longer driven solely
by popularity. Perhaps this observation can be explained by
the following intuition. When a social network ﬁrst launches,
connecting with “supernodes” is a key factor driving friend-
ship requests. But as the network grows, it becomes harder
to locate supernodes inside the massive network and their
signiﬁcance diminishes. Alternatively, we could explain this
phenomenon in another way. When the network is young, a
new user is likely to ﬁnd few of her oﬄine friends to connect
to, and “supernodes” easily draw users’ attention because of
their popularity. As the network grows, users ﬁnd more and
more of their oﬄine friends on the online social network. As
a result, users pay more attention to people who they may
know instead of popular users.
Finally, we observe a small ripple at the early stage of the
network growth, when α(t) experiences a surge on December
12, 2006 (8.26M edges). This is due to the network merge
event, which generated a burst of new edges that produce a
bump in α(t) for that single day.
3.3 Summary of Observations
Our analysis produces three conclusions:
• In a node’s lifetime, edge creation rate is highest
shortly after joining the network and decreases over
time.
• Edge creation in early stages of network growth is
175driven by new node arrivals, but this trend decreases
signiﬁcantly as the network matures.
• While edge creation follows preferential attachment,
the strength degrades gradually as the network expands
and matures.
These results set the stage for the following hypothesis.
An accurate model to capture the growth and evolution of
today’s social networks should combine a preferential attach-
ment component with a randomized attachment component.
The latter would provide a degree of freedom to capture the
gradual deviation from preferential attachment.
4. COMMUNITY EVOLUTION
In online social networks, communities can be deﬁned as
groups of densely connected nodes based on network struc-
ture. More speciﬁcally, they are groups of nodes where more
edges connect nodes in the same community than edges be-
tween diﬀerent communities [29]. Note that these are im-
plicit groups based on structure, and not explicit groups
that a user might join or leave. Communities eﬀectively
capture “neighborhoods” in the social network. As a result,
we believe they represent the best abstraction with which to
measure the inﬂuence of social neighborhoods on user dy-
namics. We ask the question, “how do today’s social network
communities inﬂuence their individual members in terms of
edge creation dynamics?”
To answer our question, we must ﬁrst develop a method
to scalably identify and track communities as they form,
evolve, and dissolve in a dynamic network. There is ample
prior work on community detection in static graphs [29, 7,
37, 6]. More recent work has developed several algorithms
for tracking dynamic communities across consecutive graph
snapshots [17, 32, 23, 35, 34]. Some of these techniques
are limited in scale by computational cost, others require
external information to locate communities across snapshots
of the network.
In the remainder of this section, we describe our technique
for scalably identifying and tracking communities over time
based on network structure. We then present our ﬁndings
on community dynamics in our social network, including
community formation, dissolution, merging, and splitting.
Finally, we analyze community-level dynamics, and use our
detected communities to quantify the correlation between
node and community-level dynamics. To make computa-
tion tractable across our large dataset, we choose a modiﬁed
Louvain algorithm to produce the large majority of our re-
sults. To ensure that our choice of community detection
algorithm does not signiﬁcantly bias our results, we validate
a portion of our ﬁndings using a second community detection
algorithm that does not rely on modularity.
4.1 Tracking Communities over Time
Tracking communities in the presence of network dynam-
ics is a critical step in our analysis of network dynamics at
diﬀerent scales. Prior work proved that dynamic community
tracking is an NP-hard problem [35]. Current dynamic com-
munity tracking algorithms [17, 32, 23, 35, 34, 11] are ap-
proximation algorithms that “track” a community over mul-
tiple snapshots based on overlap with an incarnation in a
previous snapshot.
For scalability and eﬃciency, we use
the similarity-based community tracking mechanism [11] for
our analysis. In this section, we ﬁrst introduce background
on community detection algorithms and related deﬁnitions.
Then, we brieﬂy describe our mechanism, which is a mod-
iﬁed version of [11] that provides tighter community track-
ing across snapshots using the incremental version of the
Louvain algorithm [6]. At a high level, we use incremental
Louvain to detect and track communities over snapshots,
and use community similarity to determine when and how
communities have evolved.
Background.
Communities can be deﬁned based on
network structure as groups of well-connected nodes. There
are dense connections inside communities but sparse connec-
tions between communities [29]. Modularity [27] is a widely
used metric to quantify how well a network can be clus-
tered into communities. It is deﬁned as the diﬀerence be-
tween the fraction of edges falling in communities and the
expected fraction when edges are randomly connected.
It
is formally deﬁned in Equation 2, where A is the adjacency
matrix (Aij = 1 if node i and j are connected, and Aij = 0
otherwise), ki is the degree of nodei , m is the total number
of edges and δ(ci, cj) = 1 if node i and j are in the same
community and δ(ci, cj ) = 0 otherwise. The value of mod-
ularity should be between -1 and 1, and a large modularity
means the network can be well clustered into communities.
Q =
(cid:2)
ij
1
2m
(Aij − kikj
2m
)δ(ci, cj )
(2)
Several algorithms are designed to optimize modularity.
[29] proposes a simple method to optimize modularity, re-
ducing complexity to O(n3).
[28] improves the algorithm
further using hierarchical clustering method and its com-
plexity is O(n2).
[7] further reduces the complexity to
O(m· d· log(n)) using balanced binary trees and max heaps.
[37] improves the computation eﬃciency by avoiding unbal-
anced partitions.
Similarity-based Community Tracking.
Lou-
vain [6] is a scalable community detection algorithm that
signiﬁcantly improves both modularity and eﬃciency using
greedy local modularity optimization. It uses a bottom up
approach that iteratively groups nodes and communities to-
gether, and migrates nodes between communities until the
improvement to modularity falls below a threshold δ. To the
best of our knowledge, Louvain is the only community de-
tection algorithm that scale to graphs with tens of millions
of nodes1.
Our approach leverages the fact that Louvain can be run
in incremental mode, where communities from the current
snapshot are used to bootstrap the initial assignments in the
next snapshot. Given how sensitive community detection is
to even small changes in modularity, this approach enables
more accurate tracking of communities by providing a strong
explicit tie between snapshots. Finally, we follow the lead
of [11], and track communities over time by computing the
similarity between communities. Similarity is quantiﬁed as
community overlap and is computed using set intersection
via the Jaccard coeﬃcient.
Community Evolution Events.
Using similarity
to track communities allows us to detect major community
events, including their birth, death, merges, and splits. We
deﬁne a community A splits at snapshot i when A is the
highest correlated community to at least two communities
1https://sites.google.com/site/ﬁndcommunities/
176l
y
t
i
r
a
u
d
o
M
 1
 0.8
 0.6
 0.4
 0.2
 0
δ =  0.0001
δ =  0.001
δ =  0.01
δ =  0.1
δ =  0.3
 0
 100  200  300  400  500  600  700  800
Day
(a) Modularity
y
t
i
r
a
l
i
m
S
i
.
g
v
A
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
δ  = 0.3
δ  = 0.1
δ  = 0.01
δ  = 0.001
δ  = 0.0001
 0
 100  200  300  400  500  600  700  800
Day
 1000
 100
 10
s
e
i
t
i
n
u
m
m
o
C
f
o
#
 1
 10
δ = 0.3
δ  = 0.1
δ  = 0.01
δ = 0.001
δ = 0.0001
 100
Community Size
 1000
(b) Average Community Similarity
(c) Community Size Distribution on Day
602
Figure 4: Tracking communities over time and the impact of δ. (a) The value of modularity always stays
above 0.4, indicating a strong community structure. The choice of δ has minimum impact, and δ = 0.01 is
sensitive enough to detect communities. (b) The value of average similarity over time at diﬀerent δ values.
Small δ values like 0.0001 and 0.001 produce less robust results. (c) The distribution of community size
observed on Day 602. The algorithm is insensitive to the choice of δ once δ ≥ 0.01. The same conclusion
applies to other snapshots.
B and C at snapshot i + 1. When at least two communities
A and B at snapshot i contribute most of their nodes to
community C at snapshot i + 1, A and B have merged.
When a community A splits into multiple communities
X1, X2...Xn, we designate Xj as the updated A in the new
snapshot, where Xj is the new community who shares the
highest similarity with A. We say that all other communi-
ties in the set were “born” in the new snapshot. Similarly,
if multiple communities merge into a single community A,
we consider A to have evolved from the community that it
shared the highest similarity with. All other communities
are considered to have “died” in the snapshot.
Choosing δ.
The δ threshold in Louvain is an impor-
tant parameter that controls the trade oﬀ between quality of
community detection and sensitivity to dynamics. If δ is too
small, the algorithm is too sensitive, and over-optimizes to
any changes in the network, needlessly disrupting the track-
ing of communities. If δ is too large, the process terminates
before it optimizes modularity, and it produces inaccurate
communities.
Choosing the best value for δ means optimizing for the
dual metrics of high modularity and robustness (insensitiv-
ity) to slight network dynamics. First, we use network-wide
modularity as a measure of modularity optimization for a
given δ value. Second, to capture robustness to network
dynamics, we use community similarity [11]: the ratio of
common nodes in two communities to the total number of
diﬀerent nodes in both communities. More speciﬁcally, for
two consecutive snapshots, we compute the average similar-
ity between communities that exist in both snapshots. We
run the Louvain algorithm on our snapshots using several
diﬀerent δ threshold values, and select the best δ that gener-
ates both good modularity and strong similarity. We repeat
this procedure on shrinking ranges of δ until modularity and
similarity can no longer be improved.
Sensitivity Analysis.
We run the Louvain algorithm
on our dynamic graph snapshots generated every 3 days.
We start from Day 20, when the network is large enough
(64 nodes) to support communities, and only consider com-
munities larger than 10 nodes to avoid small cliques.
We scale δ between 0.0001 and 0.3, and plot the resulting
modularity and average similarity in Figure 4. As shown in
Figure 4(a), in all snapshots the modularity for all thresholds
is more than 0.4. According to prior work [20], modularity
≥ 0.3 indicates that our social network has signiﬁcant com-
munity structure. As expected, a threshold around 0.01 is
sensitive enough for Louvain to produce communities with
good modularity. Note that the big jump in modularity on
Day 386 is due to the network merge event.
Figure 4(b) shows that thresholds 0.0001 and 0.001 pro-
duce lower values of average similarity (i.e. they are less
robust and more sensitive) compared to higher thresholds
between 0.1 and 0.3. Thus, Louvain with δ > 0.01 generates
relatively good stability of communities between snapshots.
Lastly, we examine whether detected communities are
highly sensitive to the choice of δ. As an example, Fig-
ure 4(c) plots the distribution of community sizes observed
on Day 602. The conclusion from this ﬁgure is that once the
threshold exceeds 0.01, the impact of δ on community size
is reduced to a minimum. The same conclusion applies to
other snapshots as well.
Based on the results in Figure 4, we repeat the Louvain
algorithm within a ﬁner threshold range of 0.01 to 0.1. We
ﬁnd that a threshold value of 0.04 provides the best balance
between high modularity and similarity. We use δ = 0.04 to
track and measure dynamic communities in the rest of our
analysis on the dataset.
4.2 Community Statistics Over Time
We now leverage the Louvain-based community tracking
technique to analyze the dynamic properties of our social
network communities. We begin in this section by looking at
the community size distribution, how it changes over time,
and the distribution of lifetimes for all communities. In Sec-
tion 4.3, we take a closer look at the dynamic processes of
community merges and splits. We explore the possibility of
predicting community death from observed dynamics. Fi-
nally, in Section 4.4, we analyze the impact of community
membership on individual user dynamics, and gauge how
and to what extent community dynamics are observed to
have inﬂuenced individual user dynamics.
Community Size.
The size distribution of communi-