{"log.syslog.severity.name": {"dashed_name": "log-syslog-severity-name", "description": "The Syslog numeric severity of the log event, if available.\nIf the event source publishing via Syslog provides a different severity value (e.g. firewall, IDS), your source's text severity should go to `log.level`. If the event source does not specify a distinct severity, you can optionally copy the Syslog severity to `log.level`.", "example": "Error", "flat_name": "log.syslog.severity.name", "ignore_above": 1024, "level": "extended", "name": "syslog.severity.name", "normalize": [], "short": "Syslog text-based severity of the event."}}
{"log.syslog.structured_data": {"dashed_name": "log-syslog-structured-data", "description": "Structured data expressed in RFC 5424 messages, if available. These are key-value pairs formed from the structured data portion of the syslog message, as defined in RFC 5424 Section 6.3.", "flat_name": "log.syslog.structured_data", "level": "extended", "name": "syslog.structured_data", "normalize": [], "short": "Structured data expressed in RFC 5424 messages.", "type": "flattened"}}
{"log.syslog.version": {"dashed_name": "log-syslog-version", "description": "The version of the Syslog protocol specification. Only applicable for RFC 5424 messages.", "example": 1, "flat_name": "log.syslog.version", "ignore_above": 1024, "level": "extended", "name": "syslog.version", "normalize": [], "short": "Syslog protocol version."}}
{"message": {"dashed_name": "message", "description": "For log events the message field contains the log message, optimized for viewing in a log viewer.\nFor structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\nIf multiple messages exist, they can be combined into one message.", "example": "Hello World", "flat_name": "message", "level": "core", "name": "message", "normalize": [], "short": "Log message optimized for viewing in a log viewer.", "type": "match_only_text"}}
{"network.application": {"dashed_name": "network-application", "description": "When a specific application or service is identified from network connection details (source/dest IPs, ports, certificates, or wire format), this field captures the application's or service's name.\nFor example, the original event identifies the network connection being from a specific web service in a `https` network connection, like `facebook` or `twitter`.\nThe field value must be normalized to lowercase for querying.", "example": "aim", "flat_name": "network.application", "ignore_above": 1024, "level": "extended", "name": "application", "normalize": [], "short": "Application level protocol name."}}
{"network.bytes": {"dashed_name": "network-bytes", "description": "Total bytes transferred in both directions.\nIf `source.bytes` and `destination.bytes` are known, `network.bytes` is their sum.", "example": 368, "flat_name": "network.bytes", "format": "bytes", "level": "core", "name": "bytes", "normalize": [], "short": "Total bytes transferred in both directions.", "type": "long"}}
{"network.community_id": {"dashed_name": "network-community-id", "description": "A hash of source and destination IPs and ports, as well as the protocol used in a communication. This is a tool-agnostic standard to identify flows.\nLearn more at https://github.com/corelight/community-id-spec.", "example": "1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=", "flat_name": "network.community_id", "ignore_above": 1024, "level": "extended", "name": "community_id", "normalize": [], "short": "A hash of source and destination IPs and ports."}}
{"network.direction": {"dashed_name": "network-direction", "description": "Direction of the network traffic.\nWhen mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values \"ingress\" or \"egress\".\nWhen mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values \"inbound\", \"outbound\", \"internal\" or \"external\".\nNote that \"internal\" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that \"external\" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers.", "example": "inbound", "expected_values": ["ingress", "egress", "inbound", "outbound", "internal", "external", "unknown"], "flat_name": "network.direction", "ignore_above": 1024, "level": "core", "name": "direction", "normalize": [], "short": "Direction of the network traffic."}}
{"network.forwarded_ip": {"dashed_name": "network-forwarded-ip", "description": "Host IP address when the source IP address is the proxy.", "example": "192.1.1.2", "flat_name": "network.forwarded_ip", "level": "core", "name": "forwarded_ip", "normalize": [], "short": "Host IP address when the source IP address is the proxy.", "type": "ip"}}
{"network.iana_number": {"dashed_name": "network-iana-number", "description": "IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.", "example": 6, "flat_name": "network.iana_number", "ignore_above": 1024, "level": "extended", "name": "iana_number", "normalize": [], "short": "IANA Protocol Number."}}
{"network.inner": {"dashed_name": "network-inner", "description": "Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)", "flat_name": "network.inner", "level": "extended", "name": "inner", "normalize": [], "short": "Inner VLAN tag information", "type": "object"}}
{"network.inner.vlan.id": {"dashed_name": "network-inner-vlan-id", "description": "VLAN ID as reported by the observer.", "example": 10, "flat_name": "network.inner.vlan.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "vlan", "short": "VLAN ID as reported by the observer."}}
{"network.inner.vlan.name": {"dashed_name": "network-inner-vlan-name", "description": "Optional VLAN name as reported by the observer.", "example": "outside", "flat_name": "network.inner.vlan.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "vlan", "short": "Optional VLAN name as reported by the observer."}}
{"network.name": {"dashed_name": "network-name", "description": "Name given by operators to sections of their network.", "example": "Guest Wifi", "flat_name": "network.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "short": "Name given by operators to sections of their network."}}
{"network.packets": {"dashed_name": "network-packets", "description": "Total packets transferred in both directions.\nIf `source.packets` and `destination.packets` are known, `network.packets` is their sum.", "example": 24, "flat_name": "network.packets", "level": "core", "name": "packets", "normalize": [], "short": "Total packets transferred in both directions.", "type": "long"}}
{"network.protocol": {"dashed_name": "network-protocol", "description": "In the OSI Model this would be the Application Layer protocol. For example, `http`, `dns`, or `ssh`.\nThe field value must be normalized to lowercase for querying.", "example": "http", "flat_name": "network.protocol", "ignore_above": 1024, "level": "core", "name": "protocol", "normalize": [], "short": "Application protocol name."}}
{"network.transport": {"dashed_name": "network-transport", "description": "Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.)\nThe field value must be normalized to lowercase for querying.", "example": "tcp", "flat_name": "network.transport", "ignore_above": 1024, "level": "core", "name": "transport", "normalize": [], "short": "Protocol Name corresponding to the field `iana_number`."}}
{"network.type": {"dashed_name": "network-type", "description": "In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc\nThe field value must be normalized to lowercase for querying.", "example": "ipv4", "flat_name": "network.type", "ignore_above": 1024, "level": "core", "name": "type", "normalize": [], "short": "In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc"}}
{"network.vlan.id": {"dashed_name": "network-vlan-id", "description": "VLAN ID as reported by the observer.", "example": 10, "flat_name": "network.vlan.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "vlan", "short": "VLAN ID as reported by the observer."}}
{"network.vlan.name": {"dashed_name": "network-vlan-name", "description": "Optional VLAN name as reported by the observer.", "example": "outside", "flat_name": "network.vlan.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "vlan", "short": "Optional VLAN name as reported by the observer."}}
{"observer.egress": {"dashed_name": "observer-egress", "description": "Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.", "flat_name": "observer.egress", "level": "extended", "name": "egress", "normalize": [], "short": "Object field for egress information", "type": "object"}}
{"observer.egress.interface.alias": {"dashed_name": "observer-egress-interface-alias", "description": "Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.", "example": "outside", "flat_name": "observer.egress.interface.alias", "ignore_above": 1024, "level": "extended", "name": "alias", "normalize": [], "original_fieldset": "interface", "short": "Interface alias"}}
{"observer.egress.interface.id": {"dashed_name": "observer-egress-interface-id", "description": "Interface ID as reported by an observer (typically SNMP interface ID).", "example": 10, "flat_name": "observer.egress.interface.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "interface", "short": "Interface ID"}}
{"observer.egress.interface.name": {"dashed_name": "observer-egress-interface-name", "description": "Interface name as reported by the system.", "example": "eth0", "flat_name": "observer.egress.interface.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "interface", "short": "Interface name"}}
{"observer.egress.vlan.id": {"dashed_name": "observer-egress-vlan-id", "description": "VLAN ID as reported by the observer.", "example": 10, "flat_name": "observer.egress.vlan.id", "ignore_above": 1024, "level": "extended", "name": "id", "normalize": [], "original_fieldset": "vlan", "short": "VLAN ID as reported by the observer."}}
{"observer.egress.vlan.name": {"dashed_name": "observer-egress-vlan-name", "description": "Optional VLAN name as reported by the observer.", "example": "outside", "flat_name": "observer.egress.vlan.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "vlan", "short": "Optional VLAN name as reported by the observer."}}
{"observer.egress.zone": {"dashed_name": "observer-egress-zone", "description": "Network zone of outbound traffic as reported by the observer to categorize the destination area of egress traffic, e.g. Internal, External, DMZ, HR, Legal, etc.", "example": "Public_Internet", "flat_name": "observer.egress.zone", "ignore_above": 1024, "level": "extended", "name": "egress.zone", "normalize": [], "short": "Observer Egress zone"}}
{"observer.geo.city_name": {"dashed_name": "observer-geo-city-name", "description": "City name.", "example": "Montreal", "flat_name": "observer.geo.city_name", "ignore_above": 1024, "level": "core", "name": "city_name", "normalize": [], "original_fieldset": "geo", "short": "City name."}}
{"observer.geo.continent_code": {"dashed_name": "observer-geo-continent-code", "description": "Two-letter code representing continent's name.", "example": "NA", "flat_name": "observer.geo.continent_code", "ignore_above": 1024, "level": "core", "name": "continent_code", "normalize": [], "original_fieldset": "geo", "short": "Continent code."}}
{"observer.geo.continent_name": {"dashed_name": "observer-geo-continent-name", "description": "Name of the continent.", "example": "North America", "flat_name": "observer.geo.continent_name", "ignore_above": 1024, "level": "core", "name": "continent_name", "normalize": [], "original_fieldset": "geo", "short": "Name of the continent."}}
{"observer.geo.country_iso_code": {"dashed_name": "observer-geo-country-iso-code", "description": "Country ISO code.", "example": "CA", "flat_name": "observer.geo.country_iso_code", "ignore_above": 1024, "level": "core", "name": "country_iso_code", "normalize": [], "original_fieldset": "geo", "short": "Country ISO code."}}
{"observer.geo.country_name": {"dashed_name": "observer-geo-country-name", "description": "Country name.", "example": "Canada", "flat_name": "observer.geo.country_name", "ignore_above": 1024, "level": "core", "name": "country_name", "normalize": [], "original_fieldset": "geo", "short": "Country name."}}
{"observer.geo.location": {"dashed_name": "observer-geo-location", "description": "Longitude and latitude.", "example": "{ \"lon\": -73.614830, \"lat\": 45.505918 }", "flat_name": "observer.geo.location", "level": "core", "name": "location", "normalize": [], "original_fieldset": "geo", "short": "Longitude and latitude.", "type": "geo_point"}}
{"observer.geo.name": {"dashed_name": "observer-geo-name", "description": "User-defined description of a location, at the level of granularity they care about.\nCould be the name of their data centers, the floor number, if this describes a local physical entity, city names.\nNot typically used in automated geolocation.", "example": "boston-dc", "flat_name": "observer.geo.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "original_fieldset": "geo", "short": "User-defined description of a location."}}
{"observer.geo.postal_code": {"dashed_name": "observer-geo-postal-code", "description": "Postal code associated with the location.\nValues appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.", "example": 94040, "flat_name": "observer.geo.postal_code", "ignore_above": 1024, "level": "core", "name": "postal_code", "normalize": [], "original_fieldset": "geo", "short": "Postal code."}}
{"observer.geo.region_iso_code": {"dashed_name": "observer-geo-region-iso-code", "description": "Region ISO code.", "example": "CA-QC", "flat_name": "observer.geo.region_iso_code", "ignore_above": 1024, "level": "core", "name": "region_iso_code", "normalize": [], "original_fieldset": "geo", "short": "Region ISO code."}}