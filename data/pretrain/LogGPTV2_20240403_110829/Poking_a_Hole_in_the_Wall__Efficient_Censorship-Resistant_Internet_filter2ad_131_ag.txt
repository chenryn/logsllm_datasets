3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
Table 3: Reachability tests on popular WebRTC services.
less restrictive from those applied on typical ISP connections, i.e.,
we could access websites which would trigger the return of ISP
blockpages when browsed over a VPN; therefore, given that our
VPSes are located inside datacenters, for ensuring a reliable Proto-
zoa testing, in Russia and India we route all VPS trac through a
VPN server hosted in the same country, where we obtain blockpages
when visiting forbidden websites. This dierentiation, however, did
not occur on the VPS within China, where the pages found to be
blocked when browsing over a VPN inside the country were also
blocked when accessing from our VPS in a datacenter.
Availability of WebRTC services: Paramount to the functioning
of Protozoa is the ability to connect to a foreign WebRTC service.
Since Protozoa makes no assumption over the WebRTC application
used as a vehicle for the covert channel, it is only necessary to
nd one unblocked application within the censored region. Table 3
shows that multiple WebRTC applications are available in the coun-
tries focused in our evaluation. Importantly, the table shows that,
despite several WebRTC applications being blocked in China, a user
still has plenty of alternative WebRTC media applications that can
be used as a carrier for Protozoa covert channels.
Reaching censored content: To reach our blocked page sets, we
leveraged whereby.com to establish Protozoa connections. We were
able to access all such blocked websites in China, Russia, and India.
7.3 Ethical Considerations
The experiments conducted in this section involve the access to
censored content from a number of vantage points within coun-
tries known to experience Internet censorship. These accesses raise
important ethical concerns since they risk triggering reprisals from
local authorities. We followed the best practices described in the
Menlo report [14] to guide three major decisions of our experimen-
tal design. First, we did not recruit volunteers for our experiments.
Instead, we rented VPSes from commercial VPS providers which
understand the legal implications of oering network and comput-
ing services in each country they operate. Second, albeit using the
signalling infrastructure of existing WebRTC applications, Protozoa
does not compromise in any way the integrity of such applications.
Covert trac is exclusively forwarded by replacing user-generated
video content. Lastly, we did not collect any sensitive user data.
8 SECURITY DISCUSSION
We now discuss some potential attacks to Protozoa and defenses:
Packet dropping: An adversary may instrumentally drop a small
number of selected packets of WebRTC media streams in an attempt
to dramatically slow down the covert data transmission or disrupt
Session 1A: Anonymous Routing and Censorship CCS '20, November 9–13, 2020, Virtual Event, USA45the functioning of Protozoa protocols causing, in either case, a
denial of service. In contrast to other systems [27, 34], Protozoa
is robust against these attacks since it does not rely on specic
packets for managing covert channels. Moreover, Section 6.3 shows
that applications that use Protozoa’s covert channels are able to
tolerate a large percentage of dropped packets without terminating.
Active probing: Active probing attacks aim at identifying Proto-
zoa proxies, e.g., by attempting to join some active chatroom and
identify the transmission of corrupted video streams which telltale
the presence of covert channels. By selecting WebRTC chatrooms
that implement member admission controls, e.g., using passwords
or contact list checks, Protozoa users can evade this attack.
Fingerprinting of cover videos: If Protozoa is set up to stream
a pre-recorded cover video, an adversary may attempt to identify
a particular user by using that video for ngerprinting Protozoa
covert channels. This threat can be countered by: i) rotating the
pre-recorded video, ii) or feeding a live video from the local camera.
Long-term user proling: An adversary may keep track of a
user’s interactions with WebRTC services so as to build a prole
of interactions with multimedia applications. An accurate prole
may enable an adversary to indirectly detect the usage of Protozoa
through connections with out-of-ordinary duration or by detecting
the placement of calls at unusual times of the day. Assessing the
feasibility of this threat is an interesting direction for future work.
9 RELATED WORK
We now describe past approaches aimed at evading Internet cen-
sorship and locate Protozoa in the spectrum of existing techniques.
9.1 Comparison with Similar Systems
Protozoa ts in the family of multimedia covert streaming systems.
It stands out by introducing a new technique – encoded media
tunneling. Next, we compare our system against two other branches
of this family (Figure 1 puts all these systems in perspective.)
Media protocol mimicking: Previous systems have introduced
trac morphing [77] techniques for the transmission of covert
data by imitating multimedia protocols. For instance, by entirely
replacing the payload of media packets by encoded data, Skype-
Morph [51] and CensorSpoofer [74] deliver a reasonable throughput
of 344Kbps [51] and 64Kbps [74], respectively. However, due to the
diculty in mimicking the complete behavior of multimedia pro-
tocols, these systems are prone to be detected with 100% accuracy
through a combination of passive and active attacks [34]. In con-
trast, Protozoa provides not only strong resistance against trac
analysis, but also higher throughput (around 1.4Mbps).
Raw media tunneling: Systems like FreeWave [36], Facet [46],
DeltaShaper [3], and CovertCast [50] modulate covert data in the au-
dio/video input of multimedia applications. Some of these systems
can sustain a reasonable throughput. For instance, Facet can reach
471Kbps [46] and CovertCast 168Kbps [50]. However, these sys-
tems are vulnerable to statistical trac analysis techniques [4, 27]:
FreeWave, Facet, CovertCast are detected with over 99% accuracy,
while DeltaShaper between 85%-95% [4, 27]. Protozoa outperforms
these systems both performance and security wise.
9.2 Beyond Multimedia Covert Streaming
Protocol mimicking is a general technique for carrying covert data
by imitating the behavior of a carrier protocol. However, most
solutions [15, 16, 76] suer from the same limitations as their mul-
timedia protocol siblings and are prone to network attacks [34, 73].
Protocol tunneling has been used in other contexts. SWEET [86],
CloudTransport [9], and Castle [29] tunnel covert data through
steganographically marked email, cloud storage services, and real-
time strategy games, respectively; meek [23, 66] leverages domain
fronting to hide Tor trac inside HTTPS connections to allowed
hosts. However, unlike Protozoa, some of these systems have not
been evaluated against state-of-the-art trac analysis attacks, and
others have already been shown to be vulnerable to detection [73].
There are many other related techniques. Ephemeral proxies
like Snowake [21, 22] (which uses WebRTC connections) redirect
trac through short-lived proxies provided by volunteers; however,
unlike Protozoa, the covert trac is ngerprintable and the pres-
ence of secret messages can be detected through trac analysis.
Protocol randomization [13] transforms trac into random bytes
to evade protocol blacklists, but it fails in the presence of protocol
whitelisting and is vulnerable to entropy analysis [73]. Refraction
networking [7, 8, 17, 24, 25, 35, 38, 78, 79] incorporates special
trac redirection routers inside cooperative ISPs which need to
be carefully placed, otherwise a censor can avoid network paths
containing such routers [53, 54, 65]. In contrast, Protozoa relies on
individual trusted users located outside the censored region. Packet
manipulation strategies [6, 40, 45, 75] aim at invalidating the state
of censors’ rewalls; Protozoa’s covert channels can breach through
such rewalls provided that WebRTC trac is not blocked.
Lastly, some systems provide access to censored content cached
in CDNs [33, 87]. Protozoa provides access to any publicly avail-
able content accessible to the Protozoa proxies. MassBrowser [55]
leverages cache browsing [33, 87] and volunteer proxies to reach
censored content. However, since the connections between clients
and proxies are protected with a variant of Obfsproxy [13], they
are also aected by the limitations of protocol randomization.
10 CONCLUSIONS
This paper introduced Protozoa, the rst multimedia-based censor-
ship circumvention tool which generates secure covert channels by
instrumenting the innards of the WebRTC multimedia framework.
Our evaluation shows that Protozoa trac cannot be distinguished
from typical WebRTC ows by state-of-the-art trac analysis tech-
niques. Further, the results of our evaluation show that Protozoa
enables an increase in throughput of up to three orders of magnitude
when compared against similar (and less secure) tunneling tools.
Currently, Protozoa requires active user support at the proxy’s end
and demands users to nd trusted proxies for exchanging covert
content. Devising a scalable solution for nding trusted proxies is
an interesting direction for future work.
Acknowledgments: We thank our shepherd, Nick Feamster, and
the anonymous reviewers for their comments. This work was par-
tially supported by national funds through Fundação para a Ciência
e a Tecnologia (FCT) via the SFRH/BD/136967/2018 grant, and the
PTDC/EEI-COM/29271/2017 and UIDB/ 50021/ 2020 projects.
Session 1A: Anonymous Routing and Censorship CCS '20, November 9–13, 2020, Virtual Event, USA46REFERENCES
[1] A, S., A, H.,  H, J. A. Internet censorship in Iran : A rst
look. In Proceedings of the 3rd USENIX Workshop on Free and Open Communications
on the Internet (Washington, DC, USA, 2013).
[2] B, D. Protozoa code repository. https://github.com/dmbb/Protozoa,
2020. Accessed: 2020-08-20.
[3] B, D., S, N.,  R, L. Deltashaper: Enabling unob-
servable censorship-resistant tcp tunneling over videoconferencing streams. In
Proceedings on Privacy Enhancing Technologies (Minneapolis, MN, USA, 2017),
vol. 2017(4), pp. 5–22.
[4] B, D., S, N.,  R, L. Eective detection of multimedia
protocol tunneling using machine learning. In Proceedings of the 27th USENIX
Security Symposium (Baltimore, MD, USA, 2018).
[5] B, M., MG, D., N, M., C, E.,  N, K. The
secure real-time transport protocol (srtp). RFC 3711, March 2004.
[6] B, K., H, G., Q, X.,  L, D. Geneva: Evolving censorship
evasion strategies. In Proceedings of the ACM SIGSAC Conference on Computer
and Communications Security (London, UK, 2019), pp. 2199–2214.
[7] B, C.,  G, I. Slitheen: Perfectly imitated decoy routing
through trac replacement. In Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security (Vienna, Austria, 2016), pp. 1702–1714.
[8] B, C.,  G, I. Secure asymmetry and deployability for decoy
routing systems. In Proceedings on Privacy Enhancing Technologies (Barcelona,
Spain, 2018), vol. 2018 (3), pp. 43–62.
[9] B, C., H, A.,  S, V. Cloudtransport: Using cloud
storage for censorship-resistant networking. In Privacy Enhancing Technologies,
vol. 8555 of Lecture Notes in Computer Science. Springer International Publishing,
2014, pp. 1–20.
[10] C C  R. Report says China internet rms censored coronavirus
terms, criticism early in outbreak. https://www.reuters.com/article/us-health-
coronavirus-china-censorship/report-says-china-internet-rms-censored-
coronavirus-terms-criticism-early-in-outbreak-idUSKBN20Q1VS, 2020.
Accessed: 2020-08-20.
[11] C, A., C, T., C, M., D C, E., F, A., 
K, M. A. Censorship in the wild: Analyzing Internet ltering in Syria. In
Proceedings of the 2014 Conference on Internet Measurement Conference (Vancouver,
BC, Canada, 2014), pp. 285–298.
[12] C, V., B, A.,  K, V. Anomaly detection: A survey. ACM
computing surveys (CSUR) 41, 3 (2009).
[13] D, R. Obfsproxy: the next step in the censorship arms race. https:
//blog.torproject.org/blog/obfsproxy-next-step-censorship-arms-race, 2012.
Accessed: 2020-08-20.
[14] D, D.,  K, E. The Menlo report: Ethical principles guiding
In U.S.Department of
information and communication technology research.
Homeland Security, Tech. Rep. (2012).
[15] D, K. P., C, S. E., R, T.,  S, T. Protocol misidenti-
cation made easy with format-transforming encryption. In Proceedings of the
2013 ACM SIGSAC Conference on Computer & Communications Security (Berlin,
Germany, 2013), pp. 61–72.
[16] D, K. P., C, S. E.,  S, T. Marionette: A programmable
network-trac obfuscation system. In Proceedings of the 24th USENIX Conference
on Security Symposium (Washington, D.C., USA, 2015), pp. 367–382.