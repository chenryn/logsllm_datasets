Plugin Family on the left dropdown and Ubuntu Local Security Checks on the right dropdown.
y
k
s
o
n
Figure 75: Combined Plugin Filters
i
We can then click on Preview Pluzgins again to list the plugins determined by our filters. After it
completes, let’s click on the dropdown and choose Ubuntu Local Security Checks. Nessus
displays information about the plugin, including affected Ubuntu versions, short description, and
D
patch number, as well as the Plugin ID.
Figure 76: Ubuntu Local Security Check Plugin for CVE-2021-3156
We can get more information by clicking on the plugin. Figure 77 shows the detailed information
of the specified plugin.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 192
Made in Morocco
Penetration Testing with Kali Linux
y
k
Figure 77: Detailed Information of Plugin 145463
s
After closing this window, we can launch the vulnerability scan as we did before.
Once the scan is finished, let’s review the results boy clicking on the Vulnerabilities tab.
n
i
z
D
Figure 78: Listed Findings of the Advanced Dynamic Scan
The output lists one finding with a HIGH severity, which was found by the plugin we specified with
our dynamic plugin filter. Figure 79 shows the detailed information of the finding, confirming that
the target is in fact vulnerable to CVE-2021-3156.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 193
Made in Morocco
Penetration Testing with Kali Linux
y
k
Figure 79: Detailed Information about the Findings of the specified Plugins
s
The plugin output also contains information stating that Nessus only used the reported version
number of the affected application and that it did not try to confirm the vulnerability by exploiting
o
it in any way. In an assessment, we should verify these kinds of results to check if it is indeed an
exploitable vulnerability.
n
7.3 Vulnerability Scanning with Nmap
i
This Learning Unit covers the following Learning Objectives:
z
• Understand the basics of the Nmap Scripting Engine (NSE)
D
• Perform a lightweight Vulnerability Scan with Nmap
• Work with custom NSE scripts
In this Learning Unit, we will explore the Nmap Scripting Engine (NSE) and how to leverage Nmap
as a lightweight vulnerability scanner. In addition, we will learn about the NSE script categories,
how to use NSE scripts in Nmap, and how to work with custom NSE scripts.
7.3.1 NSE Vulnerability Scripts
As an alternative to Nessus, we can also use the NSE335 to perform automated vulnerability
scans. NSE scripts extend the basic functionality of Nmap to do a variety of networking tasks.
These tasks are grouped into categories around cases such as vulnerability detection, brute
forcing, and network discovery. The scripts can also extend the version detection and information
gathering capabilities of Nmap.
An NSE script can have more than one category. For example, it can be categorized as safe and
vuln, or intrusive and vuln. Scripts categorized as “safe” have no potential impact to stability, while
scripts in the “intrusive” category might crash a target service or system. To avoid any stability
335 (Nmap, 2021), https://nmap.org/book/man-nse.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 194
Made in Morocco
Penetration Testing with Kali Linux
issues, it’s imperative to check how the scripts are categorized and we should never run an NSE
script or category without understanding the implications. We can determine the categories of a
script by browsing the NSE Documentation336 or locally in the NSE scripts directory.
In this section, we will focus on the vuln category to leverage Nmap as a lightweight vulnerability
scanner.
On our Kali VM, the NSE scripts can be found in the /usr/share/nmap/scripts/ directory with the
.nse filetype. This directory also contains the script.db file, which serves as an index to all
currently available NSE scripts. We can use it to get a list of scripts in the vuln category.
kali@kali:~$ cd /usr/share/nmap/scripts/
kali@kali:/usr/share/nmap/scripts$ cat script.db | grep "\"vuln\""
Entry { filename = "afp-path-vuln.nse", categories = { "exploit", "intrusive", "vuln",
y
} }
Entry { filename = "broadcast-avahi-dos.nse", categories = { "broadcast", "dos",
"intrusive", "vuln", } } k
Entry { filename = "clamav-exec.nse", categories = { "exploit", "vuln", } }
Entry { filename = "distcc-cve2004-2687.nse", categories = { "exploit", "intrusive",
"vuln", } } s
Entry { filename = "dns-update.nse", categories = { "intrusive", "vuln", } }
...
o
Listing 94 - The Nmap script database
Each entry has a file name and categories. The file name represents the name of the NSE script in
n
the NSE directory.
Some of the standard NSE scripts are quite outdated. Fortunately, the vulners337 script was
i
integrated, which provides current vulnerability information about detected service versions from
z
the Vulners Vulnerability Database.338 The script itself has the categories safe, vuln, and external.
Before we start our first vDulnerability scan with the NSE, we will examine the Nmap --script
parameter. This parameter is responsible for determining which NSE scripts get executed in a
scan. The arguments for this parameter can be a category, a Boolean expression, a comma-
separated list of categories, the full or wildcard-specified name of a NSE script in script.db, or an
absolute path to a specific script.
Let’s start with an Nmap scan using all of the NSE scripts from the vuln category. The command
we’ll use contains the previously mentioned --script parameter with the vuln argument, which
specifies all of the scripts with this category. Furthermore, we’ll provide -sV to activate the
Nmap’s service detection capabilities. Finally, we’ll use -p to only scan port 443.
kali@kali:~$ sudo nmap -sV -p 443 --script "vuln" 192.168.50.124
[sudo] password for kali:
Starting Nmap 7.92 ( https://nmap.org )
...
PORT STATE SERVICE VERSION
443/tcp open http Apache httpd 2.4.49 ((Unix))
336 (Nmap, 2021), https://nmap.org/nsedoc
337 (Nmap, 2021), https://nmap.org/nsedoc/scripts/vulners.html
338 (Vulners, 2022), https://vulners.com
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 195
Made in Morocco
Penetration Testing with Kali Linux
...
| vulners:
| cpe:/a:apache:http_server:2.4.49:
...
https://vulners.com/githubexploit/DF57E8F1-FE21-5EB9-8FC7-5F2EA267B09D
*EXPLOIT*
| CVE-2021-41773 4.3 https://vulners.com/cve/CVE-2021-41773
...
|_http-server-header: Apache/2.4.49 (Unix)
MAC Address: 00:0C:29:C7:81:EA (VMware)
Listing 95 - Using NSE’s “vuln” category scripts against the SAMBA machine
Nmap detected the Apache service with the version 2.4.49 and tried all of the NSE scripts from
the vuln category. Most of the output comes from the vulners script, which uses the information
from the detected service and version to provide related vulnerability data.
y
The vulners script not only shows us information about the CVEs found but also the CVSS scores
and links for additional information. For example, Listing 95 shows that Nmap, in combination
k
with the vulners script, detected that the target is vulnerable to CVE-2021-41773.339
Another useful feature of the vulners script is that it aslso lists Proof of Concepts for the found
vulnerabilities, which are marked with “*EXPLOIT*”. However, without a successful service
detection, the vulners script will not provide any results.
o
7.3.2 Working with NSE Scripts
n
In the previous section, we learned about the vuln NSE category and the vulners script. While the
vulners script provides an overview of all CVEs mapped to the detected version, we sometimes
want to check for a specific CVE. Tihis is especially helpful when we want to scan a network for
the existence of a vulnerability. Ifz we do this with the vulners script, we would need to review an
enormous amount of information. For most modern vulnerabilities, we need to integrate
dedicated NSE scripts manDually.
Let’s practice how to do this with CVE-2021-41773. In order to find a suitable NSE script, we can
use a search engine to find the CVE number plus NSE (CVE-2021-41773 nse).
339 (NIST, 2022), https://nvd.nist.gov/vuln/detail/CVE-2021-41773
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 196
Made in Morocco
Penetration Testing with Kali Linux
y
k
Figure 80: Searching for a NSE script for a specific CVE in Google
One of the first search results is a link to a GitHub340 page that provides a script to check for this
s
vulnerability. Let’s download this script and save it as /usr/share/nmap/scripts/http-vuln-
cve2021-41773.nse to comply with the naming syntax of the other NSE scripts. Before we can
o
use the script, we’ll need to update script.db with --script-updatedb.
kali@kali:~$ sudo cp /home/kali/Downloads/http-vuln-cve-2021-41773.nse
n
/usr/share/nmap/scripts/http-vuln-cve2021-41773.nse
kali@kali:~$ sudo nmap --script-updatedb
i
[sudo] password for kali:
z
Starting Nmap 7.92 ( https://nmap.org )
NSE: Updating rule database.
NSE: Script Database updaDted successfully.
Nmap done: 0 IP addresses (0 hosts up) scanned in 0.54 seconds
Listing 96 - Copy the NSE Script and update the script.db database
To use the NSE script, we’ll provide the name of the script, target information, and port number.
We’ll also enable service detection.
kali@kali:~$ sudo nmap -sV -p 443 --script "http-vuln-cve2021-41773" 192.168.50.124
Starting Nmap 7.92 ( https://nmap.org )
Host is up (0.00069s latency).
PORT STATE SERVICE VERSION
443/tcp open http Apache httpd 2.4.49 ((Unix))
| http-vuln-cve2021-41773:
| VULNERABLE:
| Path traversal and file disclosure vulnerability in Apache HTTP Server 2.4.49
| State: VULNERABLE
| A flaw was found in a change made to path normalization in Apache HTTP
Server 2.4.49. An attacker could use a path traversal attack to map URLs to files
outside the expected document root. If files outside of the document root are not
protected by "require all denied" these requests can succeed. Additionally this flaw
340 (GitHub, 2021), https://github.com/RootUp/PersonalStuff/blob/master/http-vuln-cve-2021-41773.nse
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 197
Made in Morocco
Penetration Testing with Kali Linux
could leak the source of interpreted files like CGI scripts. This issue is known to be
exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions.
|
| Disclosure date: 2021-10-05
| Check results:
|
| Verify arbitrary file read: https://192.168.50.124:443/cgi-
bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd
...
Nmap done: 1 IP address (1 host up) scanned in 6.86 seconds
Listing 97 - CVE-2021-41773 NSE Script
The output indicates that the target is vulnerable to CVE-2021-41773 and provides us with
additional background information.
While Nmap is not a vulnerability scanner in the traditional sense, we found that the NSE is a
y
powerful feature that allows us to do lightweight vulnerability scanning. In a penetration test, we
can use Nmap when there isn’t a full-fledged vulnerability scanner available or when we want to
k
verify findings from other tools.
However, we have the same factors to consider as withs any other vulnerability scanner. The NSE
script categories can provide useful information, such as if a script is intrusive or safe, but we
also need to keep in mind that an NSE script may contain malicious code that gives an attacker
o
full access to our system. For that reason, we always need to verify that the NSE script not only
provides the needed functionality, but is also safe.
n
7.4 Wrapping Up
i
This Module has provided an overview of vulnerability scanning with Nessus and Nmap, and it
z
provided insight into the different types and considerations of a vulnerability scan.
Vulnerability scanning canD be extremely helpful during any kind of security assessment.
Configured correctly, vulnerability scanning tools provide a wealth of meaningful data. It is
important for us to understand that a manual review of the results is still required and that
scanners can only discover vulnerabilities that they are configured for. Finally, we should always
keep in mind that vulnerability scanning tools can perform actions that could be detrimental to
some networks or targets, so we must exercise caution when using them.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 198
Made in Morocco
Penetration Testing with Kali Linux
8 Introduction to Web Application Attacks
In this Learning Module, we will cover the following Learning Units:
• Web Application Assessment Methodology
• Web Application Enumeration
• Cross-Site Scripting
In this Module, we’ll begin introducing web application attacks. Modern development frameworks
and hosting solutions have simplified the process of building and deploying web-based
applications. However, these applications usually expose a large attack surface due to multiple
dependencies, insecure server configurations, a lack of mature application code, and business-
y
specific application flaws.
Web applications are written using a variety of programming languages and frameworks, each of
k
which can introduce specific types of vulnerabilities. Since the most common vulnerabilities are
alike in concept and the various frameworks behave similarly regardless of the underlying
s
technology stack, we’ll be able to follow similar exploitation avenues.
8.1 Web Application Assessment oMethodology
This Learning Unit covers the following Learning Objectives:
n
• Understand web application security testing requirements
methoi
• Learn different types and dologies of web application testing
z
• Learn about the OWASP Top10 and most common web vulnerabilities
Before we begin discussiDng enumeration and exploitation, let’s examine the different web
application penetration testing methodologies.
As a penetration tester, we can assess a web application using three different methods,
depending on the kind of information we have been provided, the scope, and the particular
engagement rules.
White-box testing describes scenarios in which we have unconstrained access to the application’s
source code, the infrastructure it resides on, and its design documentation. Because this type of
testing gives us a more comprehensive view of the application, it requires a specific skill set to
find vulnerabilities in source code. The skills required for white-box testing include source code
and application logic review, among others. This testing methodology might take a longer time,
relative to the size of the code base being reviewed.
Alternatively, black-box testing (also known as a zero-knowledge test) provides no information
about the target application, meaning it’s essential for the tester to invest significant resources
into the enumeration stage. This is the approach taken during most bug bounty engagements.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 199
Made in Morocco
Penetration Testing with Kali Linux
Grey-box testing occurs whenever we are provided with limited information on
the target’s scope, including authentication methods, credentials, or details about
the framework.
In this Module, we are going to focus on black-box testing to help develop the web application
skills we are learning in this course.
In this and the following Modules, we will explore web application vulnerability enumeration and
exploitation. Although the complexity of vulnerabilities and attacks varies, we’ll demonstrate
exploiting several common web application vulnerabilities in the OWASP Top 10 list.341
The OWASP Foundation aims to improve global software security and, as part of this goal, they
develop the OWASP Top 10, a periodically-compiled list of the mosty critical security risks to web
applications.
k
Understanding these attack vectors will serve as the basic building blocks to construct more
advanced attacks, as we’ll learn in other Modules.
s
8.2 Web Application Assessment Tools
o
This Learning Unit covers the following Learning Objectives: