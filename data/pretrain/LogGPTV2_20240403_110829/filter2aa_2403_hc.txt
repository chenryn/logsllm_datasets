void s(double *a, double *b, double *c) 
{ 
  for(int i=0;i>24)&0xff) | ((a>8)&0xff00) | ((a 
unsigned int f(unsigned int a) 
{ 
       int i=0; 
       int j=1; 
       unsigned int rt=0; 
       for (;i>i)&0xF) * j; 
       return rt; 
}; 
int main() 
{ 
         // test 
         printf ("%d\n", f(0x12345678)); 
         printf ("%d\n", f(0x1234567)); 
         printf ("%d\n", f(0x123456)); 
         printf ("%d\n", f(0x12345)); 
         printf ("%d\n", f(0x1234)); 
         printf ("%d\n", f(0x123)); 
         printf ("%d\n", f(0x12)); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 G  练习题答案 
945 
         printf ("%d\n", f(0x1)); 
}; 
题目 3 
对应章节：19.7.3 节 
#include  
int main() 
{ 
         MessageBox(NULL, "hello, world!", "caption", 
                     MB_TOPMOST | MB_ICONINFORMATION | MB_HELP | MB_YESNOCANCEL); 
}; 
题目 4 
对应章节：19.7.4 节 
这个函数把两个 32 位数相乘，返回 64 位的积。解答这种题目，根据输入输出进行判断的速度比较快。 
#include  
#include  
// source code taken from 
//http://www4.wittenberg.edu/academics/mathcomp/shelburne/comp255/notes/binarymultiplication.pdf 
uint64_t mult (uint32_t m, uint32_t n) 
{ 
    uint64_t p = 0; // initialize product p to 0 
    while (n != 0) // while multiplier n is not 0 
    { 
      if (n & 1) // test LSB of multiplier 
            p = p + m; // if 1 then add multiplicand m 
        m = m > 1; // right shift multiplier 
    } 
    return p; 
} 
int main() 
{ 
    printf ("%d\n", mult (2, 7)); 
    printf ("%d\n", mult (3, 11)); 
    printf ("%d\n", mult (4, 111)); 
}; 
第 21 章 
题目 1 
对应章节：21.7.1 节 
这个程序将显示文件所有人的 user ID。其源代码如下所示： 
#include  
#include  
#include  
#include  
#include  
int main(int argc, char *argv[]) 
{ 
    struct stat sb; 
    if (argc != 2) 
    { 
        fprintf(stderr, "Usage: %s \n", argv[0]); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
946 
逆向工程权威指南（下册） 
        return 0; 
    } 
    if (stat(argv[1], &sb) == -1) 
    { 
        // error 
        return 0; 
    } 
    printf("%ld\n",(long) sb.st_uid); 
}  
题目 2 
对应章节：21.7.2 节 
提示：研究的侧重点应当放在 Jcc、MOVSx 和 MOVZX 指令。 
#include  
struct some_struct 
{ 
        int a; 
        unsigned int b; 
        float f; 
        double d; 
        char c; 
        unsigned char uc; 
}; 
void f(struct some_struct *s) 
{ 
           if (s->a > 1000) 
           { 
                    if (s->b > 10) 
                    { 
                                      printf ("%f\n", s->f * 444 + s->d * 123); 
                                      printf ("%c, %d\n", s->c, s->uc); 
                    } 
                    else 
                    { 
                                      printf ("error #2\n"); 
                    }; 
           } 
           else 
           { 
                    printf ("error #1\n"); 
           }; 
}; 
第 41 章 
题目 1 
对应章节：41.6 节 
int f(int a) 
{ 
         return a/661; 
}; 
第 50 章 
题目 1 
对应章节：50.5.1 节 
源代码： 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 G  练习题答案 
947 
#include  
int is_prime(int number) 
{ 
    int i; 
    for (i=2; i 
int main() 
{ 
    char buf[128]; 
    printf ("enter password:\n"); 
    if (scanf ("%s", buf)!=1) 
       printf ("no password supplied\n"); 
    if (strcmp (buf, "metallica")==0) 
       printf ("password is correct\n"); 
    else 
       printf ("password is not correct\n"); 
}; 
G.3  中级练习题 
G.3.1  练习题 2.1 
这个函数可根据牛顿法计算平方根，其算法摘自 Harold Abelson, Gerald Jay Sussman, and Julie Sussman：
《Structure and Interpretation of Computer Programs》（1996）。 
程序源代码如下所示： 
// algorithm taken from SICP book 
#include  
double average(double a, double b) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
948 
逆向工程权威指南（下册） 
{ 
    return (a + b) / 2.0; 
} 
double improve (double guess, double x) 
{ 
    return average(guess, x/guess); 
} 
int good_enough(double guess, double x) 
{ 
    double d = abs(guess*guess - x); 
    return (d >5) + k1); 
          v1 += ((v0>5) + k3); 
     }                                       /* end cycle */ 
     v[0]=v0; v[1]=v1; 
}  
G.3.4  练习题 2.13 
答案：线性反馈位移寄存器。详细资料请参见：https://en.wikipedia.org/wiki/Linear_feedback_shift_register。 
程序源代码如下所示： 
// reworked, from https://en.wikipedia.org/wiki/Linear_feedback_shift_register 
#include  
uint16_t f(uint16_t in) 
{ 
    /* taps: 16 14 13 11; feedback polynomial: x^16 + x^14 + x^13 + x^11 + 1 */ 
    unsigned bit  = ((in >> 0) ^ (in >> 2) ^ (in >> 3) ^ (in >> 5) ) & 1; 
    return (in >> 1) | (bit << 15); 
}; 
//#define C 0xACE1u 
#define C 0xBADFu 
int main(void) 
{ 
    uint16_t lfsr = C; 
    unsigned period = 0; 
    do 
    { 