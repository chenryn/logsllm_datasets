and its security policy. For each dom0 we measured its
SELinux kernel image, its initial RAM disk, and its MAC
policy.
Next, we set up two pairwise attestation sessions.
In
each session, one system periodically challenges the other
system for measurements of the software it has loaded into
the hypervisor environment that is relevant for the trust-
worthiness of the Shamon. We had dom0 on shype1
challenge dom0 on shype2, and vice versa. The chal-
lenged system returns a quote signed by the TPM of the
current values of PCR registers as well as the list of mea-
surements taken by the Integrity Measurement Architec-
ture [16, 31]. The challenging system compares the re-
turned measurements to its database of known trustworthy
components. Attestation succeeds if the measured compo-
nents are all found in the database.
Finally, we conﬁrmed that shype1 and shype2 could
not communicate if any aspect of attestation failed. We
veriﬁed that the dom0s on shype1 and shype2 would
not establish an IPsec tunnel between them unless the at-
testation sessions between them showed that they were
running the expected software.
Further, we had domU on shype1 challenge domU on
shype2, and vice versa. This attestation pair establishes
security properties by mutually attesting the BOINC client
to the BOINC server and vice versa. These properties are
essential for the distributed BOINC client-server applica-
tion to ensure the trustworthiness of the BOINC computa-
tion result. For each domU we measured its Linux kernel
image, its initial RAM disk, and the images and conﬁgura-
tion information of applications such as the BOINC client.
We added to the database an entry for a test application that
we labeled untrusted.
We veriﬁed that the domUs on shype1 and shype2
would not communicate unless the attestation sessions be-
tween them showed correct results. In particular, we tested
the effectiveness of our periodic challenges by running
our untrusted test application alongside the BOINC client
software after communication had been successfully es-
tablished. The next time the server domU challenged the
client domU, the returned measurements included one for
the untrusted application, which caused the server domU to
shut down network communication with the client domU.
6. Discussion
In this section, we review the achievements as well as
the limitations of the prototype relative to the construction
of a reference monitor across machines.
Distributed tamper-proofness. Our prototype requires a
VM to successfully attest its ability to uphold the secu-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006rity policies relevant for membership in a particular dis-
tributed coalition. We perform both bind-time checks and
periodic checks – resulting in tamper-responding behavior.
The labeled IPsec tunnel protects the ﬂow of information
between members of a distributed coalition.
labeled IPsec
Distributed mediation. The
tunnel,
SELinux policy in the MAC VM, and sHype policy in
Xen ensure that all communication involving members of
a distributed coalition is subject to the constraints of the
distributed reference monitor.
Veriﬁable enforcement. Our prototype uses 13 total au-
thorizations in Xen and SELinux to enforce MAC policies,
and the MAC policies themselves only apply to user VMs
for 5 of the authorizations. However, the coalition we ex-
amined is fairly simple. Nonetheless, we are optimistic
that veriﬁcation of the reference monitor and MAC poli-
cies at this level of abstraction may prove practical for a
number of interesting systems. The main challenge is re-
ducing the MAC VM or enabling veriﬁcation of reference
monitor in spite of signiﬁcant function in the MAC VM,
such as network processing, as discussed further below.
Layering security policy. Our distributed MAC archi-
tecture enforces MAC policy at two layers, the hypervisor
and MAC VM. A distributed MAC system is arranged such
that the most important security properties are achieved
by the lowest-complexity (most assurable) mechanisms.
In other words, the Shamon enforces coarse-grained in-
ter-VM policies.
Intra-VM controls can beneﬁt directly
from the Shamon mandatory controls through a hypervisor
interface that allows VMs to interact in a controlled way
with the hypervisor mandatory access control policy. This
structure is advantageous since the most security-critical
components are also the most robust.
Mitigating Covert Channels. The individual reference
monitors will not have complete formal assurance, so some
information ﬂows, such as covert channels, may not be en-
forced. The sHype hypervisor MAC policy enables the use
of conﬂict sets of the Chinese Wall policy to formally de-
ﬁne which coalitions cannot run at the same time on the
same hypervisor system [30].
Runtime tamper-responsiveness. TPM-based attesta-
tion mechanisms (e.g., IMA [31]) measure inputs at load-
time. Thus, runtime tampering may go undetected. Since
load-time guarantees do not cover all runtime tampering,
such issues are possible. However, the code loaded and at-
tested can safely be related to known vulnerabilities. It is
here that minimizing code and policy complexity can pay
off. Other techniques, such as Copilot [28] and BIND [33],
aim to provide some runtime guarantees in addition to
load-time guarantees, but they face other obstacles, such
as preventing circumvention and annotation effort.
protection is needed, attestation needs to obtain appropri-
ate guarantees (e.g., from a TPM in a location that assures
such protections).
7. Conclusions and Future Work
We developed a distributed systems architecture in
which MAC policies can be enforced across physically
separate systems, thereby bridging the reference monitor
between those systems and creating a Shamon. The ma-
jor insights are that attestation can serve as a basis for ex-
tending trust to remote reference monitors and that it is ac-
tually possible to obtain effective reference monitor guar-
antees from a Shamon. This work provides a mechanism
and guarantees for building a distributed reference monitor
to support distributed applications. In addition, the archi-
tecture also enables exploration of MAC, secure commu-
nication, and attestation policies and the construction of
reference monitors from a set of open-source components.
Our bridging architecture enables security policies to be
layered based on their complexity, from coarse-grained
hypervisor-level policy up to sophisticated application-
level policy.
Future work includes reducing the size of the MAC VM
and exploring additional policy options. Instead of running
a full Linux kernel in the MAC VM, specialized code can
be run which drives the network interface over which the
secure labeled tunnel connects, and supports only the criti-
cal components for MAC operation. This specialized code
may be designed to enforce more expressive policies, such
as Chinese Wall policies, which expands the applicability
of Shamon.
References
[1] M. Abadi, E. Wobber, M. Burrows, and B. Lampson. Au-
thentication in the Taos operating system. In Proceedings of
the ACM Symposium on Operating System Principles, 1993.
[2] D. P. Anderson. BOINC: A system for public-resource com-
puting and storage. In Proceedings of the Workshop on Grid
Computing, Nov. 2004.
[3] D. P. Anderson,
J. Cobb, E. Korpela, M. Lebofsky,
and D. Werthimer.
in
public-resource computing. Communications of the ACM,
45(11):56–61, 2002.
SETI@Home: An experiment
[4] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A secure and
reliable bootstrap architecture. In Proceedings of the IEEE
Symposium on Security and Privacy, May 1997.
[5] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho,
R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and the art of
virtualization.
In Proceedings of the ACM Symposium on
Operating Systems Principles, Oct. 2003.
[6] E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. The CRI-
SIS wide area security architecture. In Proceedings of the
USENIX Security Symposium, Jan. 1998.
Hardware attacks. This architecture does not protect the
system against cracking keys via hardware attacks. If such
[7] D. E. Bell and L. J. LaPadula. Secure computer systems:
Mathematical foundations and model. Technical Report
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006ESD-TR-75-306, The Mitre Corporation, Air Force Elec-
tronic Systems Division, Hanscom AFB, Badford, MA,
1976.
[26] Microsoft Corporation. Next generation secure computing
base. http://www.microsoft.com/resources/
ngscb/, May 2005.
[8] D. E. Bell and L. J. LaPadula. Secure computer systems:
Uniﬁed exposition and multics interpretation. Technical re-
port, MITRE MTR-2997, March 1976.
[9] S. Berger, R. C´aceres, K. Goldman, R. Sailer, and L. van
Doorn. vTPM: Virtualizing the Trusted Platform Module. In
Proceedings of the USENIX Security Symposium, July 2006.
[10] M. Blaze,
J.
J. Feigenbaum,
Ioannidis, and A. D.
Keromytis. The keynote trust-management system, version
2. IETF RFC 2704, Sept. 1999.
[11] W. E. Boebert and R. Y. Kain. A practical alternative to
In Proceedings of the Na-
heirarchical integrity policies.
tional Computer Security Conference, 1985.
[12] D. F. C. Brewer and M. J. Nash. The chinese wall security
policy. In Proceedings of the IEEE Symposium on Security
and Privacy, 1989.
[13] C. M. Ellison, B. Frantz, B. Lampson, R. L. Rivest, B. M.
Thomas, and T. Ylonen. SPKI certiﬁcate theory. IETF RFC
2693, Sept. 1999.
[14] I. Foster, C. Kesselman, and S. Tuecke. The anatomy of
the grid: Enabling scalable virtual organizations. Supercom-
puter Applications, 15(3), 2001.
[15] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A virtual machine-based platform for
trusted computing. In Proceedings of the ACM Symposium
on Operating System Principles, October 2003.
[16] IBM.
Integrity measurement architecture for
linux.
http://www.sourceforge.net/projects/
linux-ima.
[17] T. R. Jaeger, S. Hallyn, and J. Latten. Leveraging IPSec for
mandatory access control of linux network communications.
Technical Report RC23642 (W0506-109), IBM, June 2005.
[18] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason,
and C. E. Kahn. A retrospective on the VAX VMM secu-
rity kernel.
IEEE Transactions on Software Engineering,
17(11):1147–1165, 1991.
[19] S. Kent and R. Atkinson. IP encapsulating security payload
(ESP). IETF RFC 2406, Nov. 1998.
[20] S. Kent and R. Atkinson. Security architecure for the inter-
net protocol. IETF RFC 2401, Nov. 1998.
[21] J. Kohl and C. Neuman. The Kerberos Network Authenti-
cation Service (V5). Internet Draft, Sept. 1992.
[22] B. Lampson, M. Abadi, M. Burrows, and E. Wobber.
Authentication in distributed systems: Theory and prac-
tice. ACM Transactions on Computer Systems (TOCS),
10(4):265–310, 1992.
[23] N. Li, B. N. Grosof, and J. Feigenbaum. Delegation logic:
A logic-based approach to distributed authorization. ACM
Transactions on Information and System Security (TISSEC),
6(1):128–171, Feb. 2003.
[24] N. Li and J. C. Mitchell. Understanding SPKI/SDSI using
ﬁrst-order logic. In Proceedings of the IEEE Computer Se-
curity Foundations Workshop, pages 89–103, June 2003.
[25] R. Meushaw and D. Simard. NetTop: Commercial tech-
nology in high assurance applications. Tech Trend Notes,
9(4):1–8, 2000.
[27] Open Software Foundation.
Introduction to OSF DCE.
Prentice Hall, Englewood Cliffs, NJ, 1993.
[28] N. L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh.
Copilot - A coprocessor-based kernel runtime integrity mon-
itor.
In Proceedings of the USENIX Security Symposium,
2004.
[29] T. T. Russell and M. Schaefer. Toward a high B level se-
curity architecture for the IBM ES/3090 processor resource
/ systems manager (PR/SM). In Proceedings of the National
Computer Security Conference, Oct. 1989.
[30] R. Sailer, T. Jaeger, E. Valdez, R. C´aceres, R. Perez,
S. Berger, J. Grifﬁn, and L. van Doorn. Building a MAC-
based security architecture for the Xen opensource hypervi-
sor. In Proceedings of the Annual Computer Security Appli-
cations Conference, Dec. 2005.
[31] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design
and implementation of a TCG-based integrity measurement
architecture. In Proceedings of the USENIX Security Sym-
posium, 2004.
[32] M. Schaefer, B. Gold, R. Linde, and J. Scheid. Program
conﬁnement in KVM/370. In Proceedings of the ACM Na-
tional Conference, Oct. 1977.
[33] E. Shi, A. Perrig, and L. V. Doorn. BIND: A time-of-use
attestation service for secure distributed systems.
In Pro-
ceedings of IEEE Symposium on Security and Privacy, May
2005.
[34] S. Smalley, C. Vance, and W. Salamon.
Implementing
SELinux as a linux security module. Technical Report 01-
043, NAI Labs, 2001.
[35] S. W. Smith. Outbound authentication for programmable
secure coprocessors. In Proceedings of the European Sym-
posium on Research in Computer Security, Oct. 2002.
[36] Sun Microsystems.
Trusted Solaris 8 Operating Sys-
tem. http://www.sun.com/software/solaris/
trustedsolaris/, Feb. 2006.
[37] R. Watson, W. Morrison, C. Vance, and B. Feldman. The
TrustedBSD MAC framework: Extensible kernel access
control for FreeBSD 5.0.
In Proceedings of the USENIX
Annual Technical Conference, June 2003.
[38] V. Welch, F. Siebenlist, I. Foster, J. Bresnahan, K. Cza-
jkowski, J. Gawor, C. Kesselman, S. Meder, L. Pearlman,
and S. Tuecke. Security for grid services. In Proceedings
of Symposium on High Performance Distributed Computing,
June 2003.
[39] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-
Hartman. Linux Security Modules: General security support
for the linux kernel. In Proceedings of the USENIX Security
Symposium, 2002.
[40] H. Yin and H. Wang. Building an application-aware IPsec
policy system. In Proceedings of the USENIX Security Sym-
posium, 2005.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006