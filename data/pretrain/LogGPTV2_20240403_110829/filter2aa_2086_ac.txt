priate handler has been found during handler list traversal.
This means that the call to ZwContinue will always be exe-
cuted. This is the system call to apply a possibly modiﬁed
context, which also means that this function won’t ever re-
turn unless there is a severe error. In that case an exception
is thrown by means of RtlRaiseException. In order to fool
the DRM one needs to pass a manipulated context to the
exception handler, so the program logic of the DRM sys-
tem works with the expected values previously set by the
SetThreadContext API. As soon as RtlDispatchException
10Though the exact circumstances haven’t been investigated
returns, the debug registers in the modiﬁed context must be
replaced with the values from the real context which came
from the operating system kernel.
This is important be-
cause these values might be in use by a possibly attached
debugger.
One possible strategy to solve this problem is
to re-implement KiUserExceptionDispatcher. This is com-
plicated a little by the fact that RtlDispatchException is
not exported by ntdll.dll, so this function must be re-
implemented as well. Fortunately this function doesn’t need
to reassemble all the logic found in RtlDispatchException.
In case of a single step exception the ﬁrst handler always
terminates SEH list walking, so the hook function only has
to prepare all parameters for the exception handler and call
it. Listing 9 shows the prologue of the hooked KiUserEx-
ceptionDispatcher. Because of the fact that this is not a
standard procedure, an additional element has to be pushed
onto the stack, so the compiler generates valid code to access
function parameters.
xor
eax, eax
push
eax
push
ebp
mov
ebp, esp
sub
esp, __LOCAL_SIZE
Listing 9: Prologue of the hook function
The compiler variable __LOCAL_SIZE gives the needed stack
space allocated by compiler generated code. This value is
needed because the hook function is declared with __de-
clspec(naked), which means that the function prologue and
epilogue have to be manually crafted. After the prologue the
hook function has to check if the exception is of type sin-
gle step and if this is the case, the corresponding values for
the debug registers are retrieved from the internal storage
based on the current thread ID. All parameters the handler
expects are then prepared and are passed along with the
manipulated context to the ﬁrst exception handler found at
[fs:0]. The handler in turn modiﬁes the context, so upon
return all modiﬁed parts have to be merged with the real
context supplied by the operating system. Afterwards a call
is made to NtContinue similar to the original implementa-
tion found in KiUserExceptionDispatcher. Because control
ﬂow at this point is in the hooked function and the call to
NtContinue won’t return, care needs to be taken concerning
stack cleanup. The stack must be reset to the state as if the
hooked function would have never executed. This is shown
in listing 10.
mov
ecx, pContext
mov
edx, [NtContinue]
add
esp, __LOCAL_SIZE
pop
ebp
pop
eax
xor
eax, eax
push
eax
push
ecx
call
edx
Listing 10: Applying the manipulated context
First of all the modiﬁed context is fetched and the stack
space used by the compiler generated code is cleaned up.
The next step is to reset the original base pointer and pop
the fake return address from the stack. Finally NtContinue
with a pointer to the manipulated context is called and the
current thread will be resumed with the new context on the
next schedule. If the exception is not of type single step the
original implementation of KiUserExceptionDispatcher is
called in a similar way.
By using the techniques outlined in this section, an attached
debugger is able to provide the features of hardware break-
points, so the strategy as proposed in the beginning can be
carried out.
3.3
P-Code Machine
The last obstacle which needs to be taken is to analyze the
usage of a P-Code machine which is used to implement the
actual decryption algorithm and the associated key setup.
The P-Code machine is stack based, so all parameters to the
opcodes are pushed and popped of the machine stack. Be-
sides this implementation includes a special register, which
receives the result of the respective operation. The instruc-
tion set of the emulated CPU overlaps to some extent with
the instruction set of the X86 architecture, especially with
regard to the arithmetic instructions. Apart from that, the
arithmetic instructions of the emulated CPU aren’t involved
in the decryption or in the key setup, so these haven’t been
analyzed thoroughly. All in all, the CPU has 256 diﬀerent
opcodes with a ﬁxed length of 1 byte. The set of available op-
codes is split into two parts. The ﬁrst part contains opcodes
which are responsible for emulating operations of the CPU
itself, like stack manipulation, arithmetic instructions and
so on. In contrast, the other opcodes are used to dispatch
control ﬂow to handlers containing native code for high level
operations, e.g. there are handlers to load opcode modules
or to allocate memory from the host machine.
The algo-
rithms for decryption of the DRM protected content as well
as the routines involved in the key setup are also triggered
by means of these high level opcodes.
3.3.1
Opcode Module Files
The actual P-Code is not directly included in the applica-
tion, instead it is contained in special opcode module ﬁles.
There are about twenty diﬀerent opcode modules which are
explicitly loaded from ﬁles and 30 more modules which are
uncompressed from a special module. This ﬁle also includes
the code for the P-Code machine itself and is in fact loaded
by a special trampoline.
This opcode module is decom-
pressed at runtime via the zlib[8] library.
The 30 intrin-
sic opcode modules include functionality to de/encode mu-
sic ﬁles, perform decryption of DRM content and carry out
several cryptographic tasks, to name but a few. After the
P-Code machine has been set up, these intrinsic modules
are uncompressed and initialized via special handlers of the
P-Code machine.
An opcode module is made of a short header with a sig-
nature indicating, that this is in fact an opcode module,
and some important meta data, like an oﬀset to the relo-
cation table, the size of the module and its name. Figure
6 shows some important ﬁelds of the header. Just behind
the header is a block of 256 random bytes. These bytes are
module speciﬁc and are used to permute the assignment of
opcodes and the belonging handler on a per-module basis.
This basically means that opcodes have a completely diﬀer-
ent meaning across opcode modules, making it more diﬃcult
to identify opcodes when analyzing several opcode modules.
Since the modules are loaded into memory by means of mem-
ory mapped ﬁles the image base address cannot be known
in advance at compile time. For this reason opcode mod-
ules have a relocation table, which allows for rebasing of
each module. Relocation items fall into diﬀerent categories,
e.g. some opcode modules have references to the C runtime
which are redirected to the import address table (IAT) of
the application. The remaining relocation items are simple
module intrinsic calls, jumps or data oﬀsets. Each reloca-
tion entry utilizes 8 bytes and has a 4 byte identiﬁer which
tells the rebasing algorithm the type of ﬁx needed for the
current item.
The remaining 4 bytes compose the actual
value to be inserted at the respective address. In addition
to this, module intrinsic calls were removed beforehand, so
these are ﬁxed by this mechanism, too.
Figure 6: Opcode Module Header
In order to harden the protection established by the P-Code
machine, opcodes taken from the opcode modules are not
used directly. Instead opcodes are descrambled at runtime
by means of a PRNG which is part of the P-Code machine it-
self. Besides that garbage data is interleaved with the actual
opcodes to complicate understanding of the machine logic.
To further complicate analysis all data items are stored and
retrieved in an ASN.1 format, so opcode handler logic is
interleaved with ASN.1 parsing code.
3.3.2
Finding the Decryption Routines
The use of a P-Code machine to obfuscate program logic
on the one hand and data ﬂow on the other hand is a very
good strategy to make reverse engineering a tedious process,
because existing tools at least have to be extended to be of
major use. Compared to native code, analysis of a certain
amount of program logic is much more tedious, because the
amount of code executed to perform this very logic is much
higher.
In this sense the P-Code machine lowers the sig-
nal to noise ration tremendously. Especially online analysis
becomes a very tedious process because one has to trace
through the same (handler-)code over and over gain.
So
the major problem in this case was to spot the code which
contributes to the decryption algorithm and the associated
key setup. Possible strategies to overcome the eﬀects of the
P-Code machine could be to
1. write a custom disassembler to be able to analyze the
program logic
2. use debugger scripts to trace until code writes the key
to memory
3. use emulation to ﬁnd the algorithm
4. use hardware breakpoints to back trace from code which
accesses input data
Of course this list is not complete but rather names the most
obvious ideas to overcome the protection in this case. Op-
tion 1 seems to be the most expensive strategy especially
in this case because of the high number of opcodes and the
complexity of the high level handlers, which would need to
be fully understood in order to create a meaningful disas-
sembly listing. Besides that the whole opcode randomiza-
tion algorithm would have to be reassembled, too. The sec-
ond option is extremely slow since tracing consumes a fairly
amount of CPU resources, although some techniques have
been researched trying to overcome this restriction[9]. The
third solution in contrast provides reasonable speed and a
very high level of ﬂexibility, because obviously every single
CPU feature can be controlled by using emulation[10, 11],
and could be rated as the most elegant strategy. The strat-
egy used in this case makes use of the debug registers in
order to track code which accesses data read from a DRM
protected music ﬁle. By using this technique it is very easy
to break directly at the decryption algorithm, which is a sim-
ple DES in CBC mode[1]. It turned out that this decryption
routine was in fact one of the high level handlers, i.e. it was
implemented in native code, so it could be easily reverse en-
gineered. Besides knowing the decryption algorithm itself it
is of course essential to be able to reproduce the key setup.
Any DRM protected ﬁle is decrypted in chunks of 0x1800
bytes. In every decryption pass the key setup and the key
itself are destroyed after decryption of the respective ﬁle
buﬀer, i.e.
both data structures are overwritten with ze-
ros. Since both data structures are dynamically allocated in
each pass, the use of BMPs is not suitable for ﬁnding the
key setup, because the address of the certain buﬀer is un-
known in advance. The P-Code machine manages memory
allocations similarly to heap implementations used in high
level languages such as C/C++, i.e. there are multiple lists
of memory chunks of diﬀerent sizes. This memory manage-
ment system is particularly used by the P-Code machine to
allow the programs running inside the machine to dynam-
ically allocate memory. Moreover the routines for decom-
pressing the opcode modules also make use of this memory
management system. So whenever a new buﬀer for the key
setup is allocated, control ﬂow will go through the memory
management function, which obviously needs to receive the
desired size of the memory block as a parameter. For a single
DES key setup this size is always 0x80 bytes. Finding the
key setup can then be easily achieved by just setting a condi-
tional breakpoint inside the memory management function
and ﬁnally using a BPM to trace write operations to this
buﬀer in order to break right inside the routine perform-
ing the actual key setup algorithm. The last step is now to
trace all input data the key setup algorithm uses to derive
the actual decryption key. Again this is no problem because
hardware breakpoints can be used to spot relevant code.
4.
DECRYPTING THE CONTENT
Due to legal issues this section has been intentionally left
blank.
5.
CONCLUSION
On the whole the DRM system oﬀers pretty good protec-
tion mechanisms both against oﬄine reverse engineering and
against debugging. Anyhow some ﬂaws do exist which made
the process of breaking the whole system easier than it
should have been.
For one the usage of the debug regis-
ters to block any attempts to easily trace memory access is
an eﬀective technique, for another breaking this protection
could have been much harder if the debug registers actu-
ally would have been used to set hardware breakpoints, so
control ﬂow would have depended on the BPMs ﬁring. In
this way an emulation would have been impossible and re-
claiming the debug registers would have required much more
intrusive measures such as patching of the protection code
inside the DRM itself.
Another very obvious ﬂaw is the
weak debugger detection, which only relied upon the debug
ﬂag in the PEB, which of course can be trivially patched out,
and the use of fake exceptions. Many much more elaborate
techniques for debugger detection exist.
Using mechanisms like Virtual Machines to carry out the
core protection algorithms is a very good technique and will
probably become more important in newer protection mech-
anisms[12, 13]. The complexity of the P-Code machine in
this case could be defeated by the use of the reclaimed debug
registers. In case the decryption algorithm and its associ-
ated key setup would have been emulated by the virtual
CPU, this approach would have been infeasible.
On the
other hand this would have meant a fair increase in devel-
opment time and complexity while designing the protection.
It is quite evident that the number of ideas one can think of
to make the process of reverse engineering more diﬃcult is
only limited by creativity and in the end every concept fun-
damentally based on a software protection mechanism can
and probably will be broken.
APPENDIX
A.
REFERENCES
[1] Scott A. Vanstone Alfred J. Menezes, Paul C.
van Oorschot. Handbook of Applied Cryptography.
CRC Press, 1996.
[2] Hex-Rays. IDA Pro.
http://www.hex-rays.com/idapro/.
[3] Matt Pietrek. A Crash Course on the Depths of
Win32 Structured Exception Handling.
http://www.microsoft.com/msj/0197/exception/
exception.aspx.
[4] Nicolas Falliere. Anti debugging techniques.
http://www.securityfocus.com/infocus/1893.
[5] Intel. Intel 64 and IA-32 Architectures Software
Developer’s Manual - Volume 3A: System
Programming Guide Part 1. http:
//www.intel.com/products/processor/manuals/.
[6] Jeﬀrey M. Richter. Programming Applications for
Microsoft Windows (Microsoft Programming Series).
Microsoft Press Books, 1999.
[7] Microsoft Research. Detours.
http://research.microsoft.com/sn/detours/.
[8] zlib. zlib library. http://www.zlib.net/.
[9] McAfee. umss: eﬃcient single stepping on Win32.
http://www.avertlabs.com/research/blog/?p=140.
[10] Cody Pierce. PyEmu: A Multi-Purpose Scriptable x86
Emulator.
http://dvlabs.tippingpoint.com/appearances/.
[11] Jeremy Cooper Chris Eagle. The x86 Emulator plugin
for IDAPro. http://ida-x86emu.sourceforge.net/.
[12] Rolf Rolles. Defeating HyperUnpackMe2 With an IDA
Processor Module.
https://www.openrce.org/articles/full_view/28.
[13] Benjamin Jun Carter Laren Nate Lawson
Paul Kocher, Joshua Jaﬀe. Self-protecting digital
content. http://www.cryptography.com/resources/
whitepapers/SelfProtectingContent.pdf.