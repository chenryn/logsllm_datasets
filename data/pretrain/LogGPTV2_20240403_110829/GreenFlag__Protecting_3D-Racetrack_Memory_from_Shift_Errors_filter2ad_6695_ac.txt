complicated. As with graph codes in general, VT codes can 
only  correct  a  shift  error  if  we  can  first  categorize  it  as  a 
deletion or insertion. Furthermore, we must be able to detect 
“silent” shift errors, in which the shift error does not corrupt 
the currently read codeword. 
Consider the example in Fig. 6. Assume we are reading 
codewords from the example code provided in Section IV.A 
for (cid:1866)=5. In Fig. 6(a) we show the state of the track while we 
are  attempting  to  read  the  codeword 00011,  which  is 
followed by the codeword 11111. When we attempt to read 
in Fig. 6(b). We still correctly read 00011 and the shift error 
the last bit of the first codeword, a deletion occurs as shown 
is not detected (i.e., the shift error is silent at this point). While 
this situation may not seem problematic because there are no 
bit-value errors, the relative position of the read/write port is 
still  misplaced.  If  an  additional  shift  error  occurs  while 
reading in the next codeword it may result in an undetected 
error.  
The problem arises due to the inability to distinguish the 
boundaries between codewords. Prior work [25, 26] has used 
predetermined patterns (sometimes called commas) at the end 
of  each  codeword  to  separate  consecutive  codewords  and 
address  this  boundary  problem.  We  call  these  patterns 
delimiters  and they have been used in prior work to detect 
deletions or insertions but not a mixture of both. In Section V, 
we  present  a  new  set  of  delimiters  we  have  crafted  to 
distinguish deletions from insertions and that even allow us to 
detect double deletion and insertion errors. 
V.  GREENFLAG CODING 
 In this section, we present GreenFlag coding. To create 
GreenFlag, we have integrated a VT-based horizontal code  
with specially crafted delimiter bits that allows us to detect 
and correct not only single but also double shift errors. 
We  first  explain  how  we  construct  VT  codes  for 
GreenFlag and how we encode and decode in the error-free 
case. Then we introduce different delimiter options to help us 
categorize  detected  shift  errors  as  deletions  or  insertions. 
Finally, we describe how GreenFlag corrects shift errors by 
both fixing erroneous bits and moving the correct racetrack 
domain under the read/write port. 
A.  GreenFlag Construction: A Novel VT Construction 
With  an  eye  on  implementation,  we  introduce  a  novel 
construction algorithm for Varshamov-Tenengolts codes. We 
can  construct  VT((cid:1866)) codes  for any  value  of (cid:1866); however,  to 
powers  of  two,  i.e., (cid:1866)= 2(cid:3039) .  Our  encoding  and  decoding 
provide  fast  and  efficient  encoding  and  decoding,  we  use 
algorithms are based on the mathematics of VT codes, and we 
 0
 1
 0
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1  1
 1 0
 1
1
0
0
reading current 
codeword “0001…”
next codeword
(a)
deleted bit
Fig. 6. The boundary problem 
(b)
5
1) Encoding 
satisfies the checksum as described in Section IV. Such a code 
have  proven  them  correct.  Due  to  space  constraints, proofs 
could  not  be  included  in  this  paper  but  are  provided  in  a 
document available on-line [27]. 
Suppose (cid:1866)= 2(cid:3039)  and (cid:1863)= (cid:1866)−(cid:1864)−1.  We  encode (cid:1863) data 
bits, (cid:1856)(cid:2869),(cid:1856)(cid:2870),…,(cid:1856)(cid:3038), into a codeword c of length (cid:1866) such that it 
is referred to as GreenFlag((cid:1866),(cid:1863),(cid:1856)(cid:1857)(cid:1864)(cid:1861)(cid:1865)(cid:1861)(cid:1872)(cid:1857)(cid:1870)_(cid:1871)(cid:1861)(cid:1878)(cid:1857)). 
(cid:1866)=8 in Table II. In this example, (cid:1864)=3 and we encode (cid:1863)=
(cid:1866)−(cid:1864)−1=4 data bits (1011) into a codeword of length (cid:1866)=
8. The encoding algorithm creates (cid:1864)+1 check bits to ensure 
from 1 to (cid:1866) (rather than 0 to (cid:1866)−1). 
(cid:1844)((cid:1866))=(cid:1866)−(cid:1864)(cid:1867)(cid:1859)(cid:2870)((cid:1866))−1
(cid:1866)
that the checksum holds. We index bit positions in a codeword 
 We present the encoding algorithm and an example for 
The rate of this code is given by, 
which approaches 1 in the limit of large n. 
2) Error-Free Decoding 
Because of our novel construction, if the checksum is zero 
when reading a codeword, we can simply recover our error-
free dataword by extracting all the bits that are not powers of 
two. Thus, this allows for efficient decoding in the common, 
error-free case. 
However, as we already discussed, a silent shift error can 
result in a correct codeword but leave the wrong domain over 
the read/write port, thus corrupting subsequent accesses. Error 
correction  requires  that  we  both  detect  this  situation  and 
differentiate insertions from deletions. 
B.  Greenflag’s Delimiters: Categorizing Shift Errors 
We use specially crafted delimiters to identify silent shift 
errors and to distinguish insertions from deletions. Intuitively, 
the delimiters help us to separate codewords from each other 
in the presence of shift errors. We refer to a codeword that is 
concatenated with delimiter bits as an extended codeword. 
TABLE II. ENCODING ALGORITHM WITH EXAMPLE 
Encoding Algorithm 
Step 1: Start with a zero-
Step 2: Set positions that 
are not powers of two to 
data bits 
Step 3: Calculate the 
vector c of length (cid:1866)=2(cid:3039) 
checksum ∑ (cid:1861)(cid:1855)(cid:3036)
(cid:3041)(cid:3036)(cid:2880)(cid:2869)
Step 4: Set (cid:1871) to be the 
to 0 modulo (cid:1866)+1 
Step 5: Set the (cid:1864)+1 
(cid:1855)(cid:2869)and set it to be the 
(cid:1855)(cid:3041)and set it to the LSB 
positions that are powers 
of two to the binary 
expansion of s. Start from 
minimum value that needs 
to be added to the 
checksum to make it equal 
MSB. Move all the way to 
Example for (cid:1866)=8,(cid:1864)=3 
(cid:2185)=0 0 0 0 0 0 0 0  
(cid:2186)=1011  
 (cid:2185)=0 0 1 0 0 1 1 0  
(cid:3533) (cid:1861)(cid:1855)(cid:3036)
(cid:2876)(cid:3036)(cid:2880)(cid:2869) =3+6+7=16 
 (cid:1871)=9−(cid:1865)(cid:1867)(cid:1856)(16,9)=2 
(cid:1871)=2=(0010)(cid:2870) 
 (cid:1855)(cid:2869)=0,(cid:1855)(cid:2870)=1 
 (cid:1855)(cid:2871)=0,(cid:1855)(cid:2872)=0 
(cid:2185)=0 1 1 0 0 1 1 0 
6
extended codeword
 0
 0
0
 1
 1
 1
 1
 1  0
 0
 1  0
Fig. 7. Delimiter example 
codeword
delimiter
next codeword
We  choose  delimiters  to  most  efficiently  achieve  our 
goals, and tolerating greater numbers of shift errors requires  
longer delimiters. All delimiters must be functional when read 
from right to left or left to right because domains on a track 
can  be  shifted  and  read  in  both  directions.  In  other  words, 
delimiters  should  either  be  palindromic  or  have  their  less 
significant bits equal to the complement of the corresponding 
more significant bits. 
We illustrate an example of extended codewords in Fig. 7. 
The example has 5-bit VT codewords and 4-bit delimiters of 
1100. In the absence of shift errors, when we read an extended 
codeword, its last four bits will be the known bits 1100 of the 
delimiter.  
Choosing the delimiter bits to use can be tricky, because 
of edge cases like a shift error in the delimiter bits themselves. 
Our crafted delimiters, with the help of the VT codes, can help 
us detect and correct shift errors even in such corner cases, and 
we  exhaustively  tested  our  scheme  against  every  possible 
combination of shift errors in data bits and delimiter bits [27]. 
We now present two options, with different lengths, to show 
how the choice of delimiter impacts the ability to identify shift 
errors.  
  Delimiter-1  is  the  4-bit  pattern (cid:1856)=((cid:1856)(cid:2869),(cid:1856)(cid:2870),(cid:1856)(cid:2871),(cid:1856)(cid:2872))=
1100.  We  use  delimiter-1 along  with  the  VT  checksum  to 
III we do not include the observation of (cid:1856)(cid:2872), because any error 
categorize shift errors as shown in Table III. Note that in Table 
that affects the last delimiter bit will be detected when we read 
the next extended codeword. Because delimiter-1 can detect 
some double shift errors (1 insertion plus 1 deletion) but not 
all  (double  deletion  or  double  insertion),  we  classify  a 
GreenFlag(n,k,4) code as a SECSED code for shift errors.  
Delimiter-2 is a 6-bit delimiter with the pattern 111000. 
Table IV shows how to use the VT checksum and delimiter-2 
to categorize shift errors. Unlike delimiter-1, delimiter-2 can  
detect  and  differentiate  double  deletions  and  double 
insertions. Although VT codes can only recover codewords 
from a single shift error, delimiter-2 (with the help of the VT 
checksum) enables GreenFlag to correct the relative position 
of  the  read/write  port  for  up  to  double  shift  errors.  Thus, 
double shift errors can now be detected and corrected by re-
reading the extended codeword in the opposite direction. Note 
that VT codes enable us to correct single shift errors without 
the need to re-read an extended codeword and thus single shift 
error  correction  will  be  substantially  faster  than  correcting 
TABLE III. HOW DELIMITER 1100 IDENTIFIES ERRORS (X = 0 OR 1) 
Observed delimiter bits 
Decisions 
(cid:1856)(cid:2869) 
1 
1 
1 
X 
(cid:1856)(cid:2870) 
1 
1 
0 
1 
(cid:1856)(cid:2871)  Checksum 
≠0 
≠0 
≠0 
0 
0 
0 
1 
0 
no error 
1 insertion & 1 deletion 
1 deletion 
1 insertion 
TABLE IV. HOW DELIMITER 111000 IDENTIFIES SHIFT ERRORS (X = 0 OR 1) 
Observed delimiter bits 
(cid:2186)(cid:2782) 
0 
0 
0 
0 
X 
1 
(cid:2186)(cid:2781) 
0 
0 
0 
1 
0 
1 
X 
X 
X 
X 
TABLE V. DELETION CORRECTION WITH AN EXAMPLE 
TABLE VI. INSERTION CORRECTION WITH AN EXAMPLE 
(cid:2186)(cid:2778) 
1 
1 
1 
X 
1 
X 
(cid:2186)(cid:2779) 
1 
1 
1 
1 
0 
X 
(cid:2186)(cid:2780) 
1 
1 
0 
1 
0 
1 
Deletion Correction Algorithm 
stored in racetrack memory. Using GreenFlag we have 
we restore the codeword by adding a 1 immediately to the 
Step 1: Suppose a VT codeword (cid:2185)=((cid:1855)(cid:2869),(cid:1855)(cid:2870),…,(cid:1855)(cid:3041)) is 
detected a single deletion and thus we observe  (cid:2185)′=
((cid:1855)′(cid:2869),(cid:1855)′(cid:2870),…,(cid:1855)′(cid:3041)(cid:2879)(cid:2869)). 
Step 2: Set (cid:2033) to be the Hamming weight (number of 1’s) of 
(cid:1855)′. 
Step 3: Calculate the checksum ∑ (cid:1861)(cid:1855)′(cid:3036)
(cid:3041)(cid:3036)(cid:2880)(cid:2869)
Step 4: Set (cid:1871) to be the minimum amount that needs to be 
added to the checksum in order to make it 0 modulo  (cid:1866)+1 
Step 5: If (cid:1871)≤(cid:2033), we restore the codeword by adding a 0 
immediately to the left of the rightmost (cid:1871) 1’s. Otherwise, 
right of the leftmost ((cid:1871)−(cid:2033)−1) 0’s. 
Step 1: Suppose a VT codeword (cid:2185)=((cid:1855)(cid:2869),(cid:1855)(cid:2870),…,(cid:1855)(cid:3041)) is 
detected a single insertion and thus we observe  (cid:2185)′=
((cid:1855)′(cid:2869),(cid:1855)′(cid:2870),…,(cid:1855)′(cid:3041)(cid:2878)(cid:2869)). 
Step 2: Set (cid:2033) to be the Hamming weight (number of 1’s) 
of (cid:1855)′. 
Step 3: Calculate the checksum ∑ (cid:1861)(cid:1855)′(cid:3036)
(cid:3041)(cid:3036)(cid:2880)(cid:2869)
Step 4: Set (cid:1871) to be the minimum amount that needs to be 
 (cid:1866)+1 
Step 5: If (cid:1871)≤(cid:2033), we restore the codeword by removing a 
0 immediately to the right of the leftmost (cid:1871) 1’s. 
immediately to the left of the rightmost ((cid:1871)−(cid:2033)) 0’s. 
deducted from the checksum in order to make it 0 modulo 
stored in racetrack memory. Using GreenFlag we have 
Otherwise, we restore the codeword by removing a 1 
Insertion Correction Algorithm 
double  shift  errors.  Overall  a  GreenFlag(n,k,6)  code  is  a 
DECDED code for shift  
errors. 
Note  that  GreenFlag  combines  delimiters  and  the  VT 