UUID('f823a749-a65a-4a62-b853-2687c69d0e1e')
=>(uuid.uuid4)
=>（importuuid)
最棒的是，你可以直接导入任何 Python 库到 Hy 中并随意使用。
上面的代码定义了一个名为 A 的类，继承自object，包括一个值为 42 的类属性x,
在内部，Hy 对提供的代码进行解析并编译成Python 抽象语法树。幸运的是，Lisp 比较
Nice to meet you jd
=>(defn hello[name]
大多数结构都是从 Python 直接映射过来的，如函数定义。变量的设置则依赖于 setv
在Lisp 语法中，圆括号表示一个列表，第一个元素是一个函数，其余元素是该函数的
=>（str（uuid.uuid4)）
Hello world!
2
=>(+11)
(defclass A [object]
=>（hello"jd")
[[x42]
[y(fn [self value]
(print (% "Nice to meet you %s" name)))
(print "Hello world!")
(+self.x value))]1)
本电子书仅限学习交流使用，请勿用于商业用途
9.1Hy
129
---
## Page 137
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
①尽管它有一些限制性。
因为这个Lisp运行时本身是用Python实现的。
起来就像Lisp一样，但它却运行缓慢。我是说，非常慢。比原生的Python要慢一个数量级，
的JVM（Clojure）的谈话。不久之后，
爱好者我随后加入了这个美妙的冒险。
9.2Paul Tagliamonte访谈
130
最初，我创立 Hy 这个项目是源自一次关于如何将 Lisp 代码编译成 Python 而不是 Java
Paul是 Debian 开发人员，在 Sunlight 基金会工作。2013 年他创建了Hy，作为Lisp 的
Hy是一个非常不错的项目，因为它允许你进入Lisp 的世界又不用离开你熟悉的领域，
最初你为什么会创立Hy项目？
(print "That variable is jusssst right!")))
(true
((>somevar 50)
(cond
第9章抽象语法树
(print "That variable is too small!"))
(（<somevar10）
(print "That variable is too big!"))
本电子书仅限学习交流使用，请勿用于商业用途
：我开发了 Hy 的第一个版本，有些像Lisp，甚至执行
---
## Page 138
熊猫爱中国www.xiongmaoi.com
熊猫
① code. InteractiveConsole
法树还是挺让人抓狂的。
使这个工具变得非常顺手，不过创建一个在CPython2.6 到3.3以及 PyPy 都能运行的抽象语
个可在不同 Python 实例上运行的抽象语法树不是完全不可能的。通过一两个条件，就可以
然而PyPy 会抛出一个断言错误。尽管有时令人抓狂，但抽象语法树一般都很正常。构造一
式处理Python抽象语法树。
释也不同，甚至有独特的抽象语法树。更不用说Jython、PyPy 或者 CPython 要以一致的方
常烦人的不同，甚至 Python3的不同版本间也有不同。此外，不同的实现对抽象语法树的解
但是也并非公开的接口。版本之间并不保证稳定，事实上，Python2和Python3之间有些非
示、技巧和建议吗？
新的想法（如宏系统、单调性和没有语句的概念)。
严滑地过度到其他（真正的）Lisp，如 Common Lisp、Scheme或者 Clojure，以及试验一些
样他们就可以在自己熟悉的环境中舒服地使用s表达式（甚至使用他们已经依赖的一些库)，
些流程上的原则问题，从而得到当前这个代码库的迭代，它已经运行了相当长一段时间了
抽象语法树，都是关于用代码写代码这一概念的很好的诠释。
部机制的一个很好的途径，例如，REPL 是如何工作的，PEP 302 导入钩子，以及 Python
目的演讲，并收到了热烈的反馈，非常热烈。实际上，我已经开始将Hy作为讲解Python 内
开发了。
Hy代码库已经非常接近了，大部分Hy的开发人员甚至已经知道如何围绕这个编译器进行
年假期前不久，所以我整个假期都在忙着开发Hy。大概一周之后，做出来的东西和现在的
这个运行时，而不是用Python实现。这个疯狂的想法实际上激发了整个项目。这发生在2012
例如,CPython能够处理抽象语法树实体的轻微的乱序(通过lineno和col_offset)。
Python 的抽象语法树是很有意思的。它并不是非常私密（事实上，它明显不是私密的)
你是怎么知道该如何正确地使用抽象语法树的呢？对于查看抽象语法树的人，有什么提
此外，Hy（这门语言）是帮助人们理解如何阅读Lisp代码的一种很好的方式，因为这
在那次演讲之后，我对有些小节不太满意，所以我重写了编译器的很多代码，以解决-
就在实现了一个简单的Flask应用之后，我在波士顿Python大会上做了一场关于这个项
非常受挫，我几乎要放弃了，继续推进只是因为向一个同事承诺了要用抽象语法树实现
本电子书仅限学习交流使用，请勿用于商业用途
9.2Paul Tagliamonte 访谈
131
---
## Page 139
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
等物（在这种情况下，*earmuffs*会变成EARMUFFS，using-dashes 会变成
常困难。
可以调试 Hy的一些讨厌的问题)，这也意味着 Python 在处理非 Python 语言编写的模块时非
但是Java 导入lojure 却有问题）。这也充分证明了我们的工具有多强大。
使是Clojure 也无法做到这一点,因为 Clojure的互操作是绝对单向的(Clojure 可以导入 Java,
Hy可以导入Hy，Hy可以导入Python，Python 可以导入Hy。这是Hy非常独特的地方，即
修改。为了彻底测试它，我写乐 Flask 应用、Django 应用和各种模块。Python 可以导入 Python,
以及在他们的日常编码工作中如何借用这种哲学思想。
国
这些Python的支持者得到更多乐趣。
者来说也比较陌生的概念。我也希望它能证明，对这些我们尽力提供的工具产生兴趣可以令
同其他的LISP-1的变种没有显著区别。这是一项艰巨的任务，但其时机已经成熟。
法树的最好方式。
成了对这种方式的基本理解。
foo"))这样的代码生成等价的抽象语法树，来辅助理解。伴随着一些猜测和坚持，最终形
过编写简单的 Python 脚本,可以使用类似import ast；ast.dump(ast.parse（"print
132
Common Lisp 主义，如完全支持将*earmuffs*和 using-dashes 翻译成 Python 的对
Hy 几乎是直接将 Hy 代码（以 s 表达式）转换为 Python 抽象语法树。这个编译步骤也
、抽象语法树的文档极度缺乏，所以大部分知识来自于对生成抽象语法树的逆向工程。通
将来我也许会将我对抽象语法树模块的理解记录下来，但是我发现写代码是学习抽象语
绝对是极好的、令人震惊的互操作性。事实上，甚至可以通过 pdb 调试Hy 而无需任何
Hy和Python的互操作性如何？代码分发和打包呢？
我希望人们可以将 Hy 看做是一个绝好的教学工具，以便能让人们对Common Lisp、
长期来说，我希望 Hy 能成为一个教学工具，用来解释一些即便对有经验的 Python 支持
我还希望能保持 Hy 的效率，目前看还行。
Hy 仍然在开发中。仍有一些需要解决的细小问题以及需要修复的一些 bug，以便使 Hy
Hy现在处于什么状态？未来的目标是什么？
第9章抽象语法树
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 140
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
Python中一些之前未曾接触的部分。
能会对基础对象的行为感到惊讶。
用 Hy，因为它是Python。Hy 直接使用 Python 的对象，所以对于经验丰富的Lisp 开发者可
们可能不愿意工作于使用Hy的项目上。
s表达式编写的Lisp，背负着难于学习，、阅读和维护的恶名。出于对Hy 复杂性的恐惧，人
的宏组成的。
特定领域语言由基本语言（在这里就是Hy/Python），以及额外的许多表现力独特、代码简洁
ast.NodeVisitor 作为一级函数的语言。这使得创建你的特定领域语言（DSL）非常简单，
一个完整的宏系统。宏是非常特殊的函数，它能在编译阶段修改代码，不同于有
过使用如 Python2中future 的除法，以及确保两个版本间语法的标准化这类方式实现。
努力去使 Python不同版本间的行为更顺畅以使新的 Python 3的 future 实现得更快。主要通
们看bug。
using_dashes），这意味着 Python 处理它们并不难。
Hy 就是人们由爱到恨的Lisp—Python 开发者不喜欢它的语法，Lisp 开发者不愿意使
希望人们可以透过 Hy 的语法，
至于说缺点，给予Hy力量的东西也可能会伤害它。从社会层面而非技术层面说，凭借
许多时候，聪明的特定领域语言可以替代语言来扮演这个角色，如Lua。
此外，Hy 有一些 Python 很难处理的东西（即使有抽象语法树这样优秀的模块)，就是
选择Hy的优点与缺点各是什么呢？
确保良好的互操作性是我们最高优先级的工作之一，所以如果你发现任何 bug，请给我
青出蓝但胜于蓝，Hy 通过一些特殊的方式表现得比 Python 要好。因为我们做了大量的
这是个很有意思的问题，我立场并不中立，所以我持保留态度。
本电子书仅限学习交流使用，请勿用于商业用途
并考虑将其利用到项目中，从而拓展其视野，并探索
9.2Paul Tagliamonte 访谈
133
---
## Page 141
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 142
熊猫爱中国www.xiongmaoi.com
合的使用。例如：
因为Python 总是能够提供更好的数据结构和代码，要学会使用它们。
10.1
第10章一
def has_invalid _fields(fields):
使用基本的 Python数据结构但不熟悉它提供的所有方法并不罕见。这也同样适用于集
def get_fruits(basket, fruit):
通常，有一种诱惑是实现自定义的数据结构，
最好是使用 dict 结构已经提供的 get 方法。
def get fruits(basket,fruit):
例如，每个人都会用字典，但你看到过多少次这样的代码：
如果使用正确的数据结构，大多数计算机问题都能以一种优雅而简单的方式解决，而
“过早地优化是万恶之源。”
return basket.get(fruit,set())
# A variation is to use "if fruit in basket:"
except KeyError:
try:
数据结构
return basket[fruit]
return set()
性能与优化
-Donald Knuth，摘自 Structured Programming with go to Statements
本电子书仅限学习交流使用，请勿用于商业用途
但这必然是徒劳无功、注定失败的想法。
---
## Page 143
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
OrderedDict 或者 Counter。
构造一个新的集合。
种？10次？100次？
块才能实现。
136
此外，collections 模块提供了一些新的数据结构用来解决一些特定问题，如
每次试图从字典中访问一个不存在的元素，defaultdict 都会使用作为参数传入的这
add_animal_in_family(species, 'cat','felidea')
Python 提供的collections.defaultdict 结构可以更优雅地解决这个问题。
add_animal_in_family(species,'cat','felidea')
当然，这段代码是完全有效的，但想想看你会在你的程序中需要多少次上面代码的变
还有许多高级的数据结构可以极大地减少代码维护负担。例如，可以看看下面的代码：
set 数据结构包含许多能解决不同问题的方法，否则这些问题需要通过嵌套的for/if
def add_animal_in_family(species,
import collections
species = ()
def add_animal_in_family(species, animal, family):
def has invalid fields(fields):
这可以不用循环实现：
species =collections.defaultdict(set)
第10章性能与优化
species[family].add(animal)
species [family].add(animal)
 if family not in species:
return bool(set(fields) - set(I'foo',
return False
for field in fields:
species[family] = set()
if field not in ['foo',
return True
本电子书仅限学习交流使用，请勿用于商业用途
'bar']:
animal, family):
'bar'j))
---
## Page 144
熊猫爱中国www.xiongmaoi.com
熊猫爱
pypi.python.org/pypi/pyprof2calltree）可以进行格式转换，如示例10.2所示。
cProfile 模块有一个-o选项允许保存性能分析数据，并且 pyprof2calltree（https://
视化地展示。
够被另一个不错的工具KCacheGrind（http://kcachegrind.sourceforge.net/html/Home.html）可
这个优秀的工具，除了其他功能之外，它能够提供对C程序的性能分析数据。生成的数据能
项按其他字段进行排序，例如，-s time 可以按内部时间进行排序。
示例10.1使用cProfile模块
很容易使用，如示例10.1所示。
10.2
少代码维护量。
cProfile生成的性能分析数据很容易转换成一个可以被KCacheGrind读取的调用树。
中国
如果你像我一样使用C语言很多年，那你很可能已经知道Valgrind（http://valgrind.org/)
运行结果的列表显示了每个函数的调用次数，以及执行所花费的时间。可以使用-s选
$ python -m cProfile myscript.py
Python 提供了一些工具对程序进行性能分析。标准的工具之一就是cProfile，而且它
在 Python 中找到正确的数据结构是非常重要的，因为正确的选择会节省你的时间并减
ncalls
Ordered by: standard name
性能分析
2/1
104
1
 343 function calls (342 primitive calls) in 0.000 seconds
tottime
0.000
0.000
0.000
0.000
0.000
0.000
0.000