drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 postmaster  
drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 regex  
drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 replication  
drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 rewrite  
-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 ruby.png  
drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 snowball  
-rw-rw-r--  1 postgres postgres  141 Sep  7 15:02 snow.png  
drwxrwxr-x 10 postgres postgres 4.0K Sep  7 15:02 storage  
drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 tcop  
drwxrwxr-x  2 postgres postgres 4.0K Sep  7 15:02 tsearch  
-rw-rw-r--  1 postgres postgres  117 Sep  7 15:02 updown.png  
drwxrwxr-x  3 postgres postgres 4.0K Sep  7 15:02 usr  
drwxrwxr-x 14 postgres postgres 4.0K Sep  7 15:02 utils  
```  
输出的HTML报告图例，  
行数的覆盖率，函数的覆盖率。  
![pic](20150907_02_pic_001.png)  
每个目录下的覆盖率。  
![pic](20150907_02_pic_002.png)  
调用pg_database_size前，你会发现这两个函数没有被覆盖到，说明PG自己的回归测试可能没有覆盖这两个函数，或者我们在安装PG时没有使用make check来进行回归测试。  
![pic](20150907_02_pic_003.png)  
在我们调用pg_database_size(oid)和(name)后，重新生成app.info文件和html。  
这两个函数被调用到了。第二列是调用次数，说明pg_database_size_oid被调用了6次。pg_database_size_name被调用了一次，我们前面的测试省略了一些SQL没有列出。  
![pic](20150907_02_pic_004.png)  
最后，PostgreSQL其实已经在Makefile提供了生成代码覆盖HTML的target。  
```  
[root@digoal postgresql-9.4.4]# make coverage-html  
```  
产生的html目录如下：  
```  
[root@digoal postgresql-9.4.4]# cd coverage  
[root@digoal coverage]# ll  
total 224  
-rw-r--r--  1 root root   141 Sep  7 19:17 amber.png  
-rw-r--r--  1 root root   141 Sep  7 19:17 emerald.png  
-rw-r--r--  1 root root  9893 Sep  7 19:17 gcov.css  
-rw-r--r--  1 root root   167 Sep  7 19:17 glass.png  
-rw-r--r--  1 root root 58737 Sep  7 19:18 index.html  
-rw-r--r--  1 root root 58730 Sep  7 19:18 index-sort-f.html  
-rw-r--r--  1 root root 58730 Sep  7 19:18 index-sort-l.html  
-rw-r--r--  1 root root   141 Sep  7 19:17 ruby.png  
-rw-r--r--  1 root root   141 Sep  7 19:17 snow.png  
drwxr-xr-x 11 root root  4096 Sep  7 19:18 src  
-rw-r--r--  1 root root   117 Sep  7 19:17 updown.png  
drwxr-xr-x  3 root root  4096 Sep  7 19:18 usr  
```  
target见makefile：  
src/Makefile.global  
```  
##########################################################################  
#  
# Coverage  
# Explanation of involved files:  
#   foo.c       source file  
#   foo.o       object file  
#   foo.gcno    gcov graph (a.k.a. "notes") file, created at compile time  
#               (by gcc -ftest-coverage)  
#   foo.gcda    gcov data file, created when the program is run (for  
#               programs compiled with gcc -fprofile-arcs)  
#   foo.c.gcov  gcov output file with coverage information, created by  
#               gcov from foo.gcda (by "make coverage")  
#   foo.c.gcov.out  stdout captured when foo.c.gcov is created, mildly  
#               interesting  
#   lcov.info   lcov tracefile, built from gcda files in one directory,  
#               later collected by "make coverage-html"  
ifeq ($(enable_coverage), yes)  
# There is a strange interaction between lcov and existing .gcov  
# output files.  Hence the rm command and the ordering dependency.  
gcda_files := $(wildcard *.gcda)  
lcov.info: $(gcda_files)  
        rm -f *.gcov  
        $(if $^,$(LCOV) -d . -c -o $@ $(LCOVFLAGS) --gcov-tool $(GCOV))  
%.c.gcov: %.gcda | lcov.info  
        $(GCOV) -b -f -p -o . $(GCOVFLAGS) $*.c >$*.c.gcov.out  
coverage: $(gcda_files:.gcda=.c.gcov) lcov.info  
.PHONY: coverage-html  
coverage-html: coverage  
        rm -rf coverage  
        mkdir coverage  
        $(GENHTML) --show-details --legend --output-directory=coverage --title=PostgreSQL --num-spaces=4 --prefix=$(abs_top_srcdir) `find . -name lcov.info -print`  
# hook for clean-up  
clean distclean maintainer-clean: clean-coverage  
.PHONY: clean-coverage  
clean-coverage:  
        rm -rf coverage  
        rm -f *.gcda *.gcno lcov.info *.gcov *.gcov.out  
# User-callable target to reset counts between test runs  
coverage-clean:  
        rm -f `find . -name '*.gcda' -print`  
endif # enable_coverage  
```  
所以每次对代码改动后，执行完make check或其他回归测试手段后，就可以执行make coverage-html了。  
## 参考  
1\. http://magustest.com/blog/whiteboxtesting/using-gcov-lcov/  
2\. http://ltp.sourceforge.net/coverage/lcov.php  
3\. http://ltp.sourceforge.net/coverage/lcov/readme.php  
4\. http://blog.163.com/digoal@126/blog/static/16387704020158792814297/  
5\. http://blog.csdn.net/livelylittlefish/article/details/6321861  
6\. https://github.com/linux-test-project/ltp  
7\. https://gcc.gnu.org/onlinedocs/gcc/Gcov.html  
8\. https://wiki.postgresql.org/wiki/CodeCoverage  
9\. http://www.postgresql.org/docs/devel/static/regress-coverage.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")