cases that help us understand the eﬀectiveness of ASIDE
and provide guidance for further research.
4.1 Establishing a baseline using an open source
project
We selected Apache Roller (a full-featured blog server) [30]
release version 3.0.0 because it is one of the few mature Java
EE based open source web applications. A Google search of
Figure 1: The user interactively chooses the type of
input to be validated using a white-list approach.
Figure 2 illustrates how ASIDE refactors code to perform
input validation using OWASP Enterprise Security API (ESAPI)
Validator [28].
Figure 2: ASIDE validates an input using OWASP
ESAPI validator API.
Previous works employing refactoring techniques for se-
cure programming use program transformation rules, which
operate on completed programs, and thus work best on legacy
code. One recognized limitation of the program transforma-
tion approach is the lack of knowledge of speciﬁc business
logic and context [12]. In contrast, our approach is designed
to provide interactive support for secure programming and
takes full advantage of developers’ contextual knowledge of
the application under development.
There are two possible strategies for when to perform in-
put validation. One is to validate a variable containing un-
trusted input when it is used in a critical operation, such
as a database update, insertion, or deletion. The other is
to validate an untrusted input as soon as it is read into an
application-declared variable. A major disadvantage of the
ﬁrst strategy is that it is not always possible to predict what
operations are critical, and thus fails to validate input when
the context of the application evolves. ASIDE promotes
what we believe is the best practice for secure programming,
validating untrusted inputs at the earliest possible time [8].
Another issue is that untrusted inputs could be of com-
posite data type, such as a List, where input types may be
diﬀerent for each element of the list. In the current ASIDE
implementation, the developer is warned of taint sources
of a composite type with a visually softer yellow marker
as shown in Figure 3. ASIDE uses data ﬂow analysis to
track an untrusted composite object. As soon as the de-
veloper retrieves an element that is of primitive data type
(e.g.java.lang.String), ASIDE alerts the need to perform
input validation and/or encoding in the same manner as
described above. Given that the element retrieval from a
(cid:1)(cid:2)(cid:3)
“powered by Apache Roller” yielded over 1.8M entries in-
cluding sites such as blogs.sun.com. One of the co-authors,
who is an experienced member of a SSG at a large ﬁnancial
service organization, performed a software security audit us-
ing his company’s practices to identify security vulnerabili-
ties that are exploitable in Roller.
The audit process consisted of two parts: (1) automatic
static analysis using Fortify SCA [34], and (2) manual ex-
amination of Fortify ﬁndings. Default Fortify rules were
used, followed by manual auditing to eliminate Fortify ﬁnd-
ings that are not immediately exploitable. For each issue
reported by Fortify, its source code was reviewed to:
• determine whether appropriate input validation/encoding
has been performed;
• determine whether Fortify’s environmental assumption
is valid. For example, in the case of log forging, whether
the logging mechanism has not been wrapped in any
way that prevents log forging;
• determine whether Fortify’s trust boundary assump-
tion is valid. For instance, whether property ﬁles are
considered to be trusted, and in this case, data from
property ﬁles is untrustworthy;
• scrutinize input validation and encoding routines to
make sure they are proper. For example, check if
blacklist-based ﬁltering is used. File, LDAP, DB, and
Web all require diﬀerent encoders or ﬁlters because
diﬀerent data schemes are used; and
• pay close attention to DOS related warnings (e.g. ﬁle
handles and database connections) as resources may be
released in a non-standard way. Often times, warning
are generated even when resources are released in a
finally block.
Roller 3.0.0 has over 65K lines of source code. Fortify
reported 3,416 issues in 80 vulnerability categories, out of
which, 1,655 issues were determined to be exploitable vul-
nerabilities. Table 1 summarizes the results of this audit
process. Based on the evaluator’s experience, Roller’s secu-
rity quality is at the average level of what he has evaluated.
According to current work load estimate metrics of his en-
terprise, the analysis work reported here would amount to
2.5 person days.
Table 1: Results rendered by the industry security
auditing process on Apache Roller version 3.0.0.
Fortify Issue Categories
Raw Issues
Exploitable Issues
164
37
18
653
397
2
13
0
Critical High Medium Low
52
8
2,597
1,221
ASIDE’s code refactoring is primarily aimed at preventing
vulnerabilities resulting from lack of input validation and/
or encoding. Out of the 1,655 Fortify issues that can be
exploited in Roller, 922 (58%) of them are caused by lack
of input validation and/or encoding including most of the
vulnerabilities from the critical bucket. The rest, mostly in
the low security risk category, are related to failure to release
resources (e.g. database connection) and other bad coding
practices. Table 2 lists the details of the audit ﬁndings for
(cid:2)(cid:3)(cid:1)
the 922 issues of input validation and/or encoding we will
compare to ASIDE.
It is common that multiple Fortify issues share the same
root cause of an untrusted input, referred to as a taint
source. A single taint source may reach multiple taint sinks,
exploitable API calls, and thus generates several diﬀerent
vulnerabilities. For example, a user-entered value might lead
to a Log Forging vulnerability if it is inserted into a log, and
a SQL Injection if it is used in an operation that executes a
dynamic SQL statement.
The 922 Fortify issues are caused by 143 unique taint
sources including both primitive data types (e.g. java.lang
.String) and composite data types (e.g. java.util.Map).
Variables requiring output encoding are always the result of
a taint source. Thus, we exclude them in our analysis to
avoid duplications.
Table 2: Detail results from security auditing
against Roller using Fortify SCA.
Category Name
Severity
Cross-Site Scripting: Persistent
Cross-Site Scripting: Reﬂected
Path Manipulation
SQL Injection
Cross-Site Scripting: Persistent
Denial of Service
Header Manipulation
Log Forging
Path Manipulation
Cross-Site Scripting: Poor Validation
Log Forging (debug)
SQL Injection
Trust Boundary Violation
2
2
19
11
31
4
52
252
6
6
531
3
3
922
Critical
Medium
Low
Total
4.2 Vulnerability Coverage of ASIDE
We then imported Roller into an Eclipse platform that has
ASIDE installed and conﬁgured. ASIDE identiﬁed 131 of
the 143 (92%) exploitable taint sources. The remaining 12
cases involve JSP ﬁles and Struts form beans. The current
ASIDE implementation does not cover these cases, but they
could be easily handled in future implementations.
41 of the 143 are taint sources of composite data returned
from APIs such as org.hibernate.Criteria.list() and
javax.servlet.ServletRequest.getParameterMap(). ASI
-DE performs dataﬂow tracking within the method where
untrusted input is read. When a primitive value (e.g. java.
lang.String) is retrieved from the composite data structure
instance, ASIDE will raise a regular warning and provide as-
sistance to validate and/or encode that input, as described
in Section 3.
While we successfully identiﬁed tainted inputs of compos-
ite data types in Roller, in many cases, developers did not
use the elements in that data object within the immediate
method. Since ASIDE only currently performs taint track-
ing within the immediate method declaration, future im-
plementations of ASIDE will be expanded to support taint
tracking for composite objects beyond the scope of the im-
mediate method declaration, which would then alert the pro-
grammer to all these primitive data type uses.
Our analysis also raised the issue of delayed binding. An
example of delayed binding is the access methods in a POJO
(Plain Old Java Object). For example, setBookTitle()
method of a Java class Book.java with a bookTitle at-
tribute of String type. Binding of access methods to input
streams can be delayed until after the program is completed.
Thus, at the time of writing the program, there is no strong
reason to believe the input is untrusted. After completion of
the application, an integrator may bind an untrusted input
stream directly to a POJO, making the application vulner-
able.
Delayed binding is a diﬃcult problem for existing static
analysis tools as well. If the binding speciﬁcation (typically
in XML format) is composed in the same IDE environment,
which is usually the case for Java EE development, one could
extend ASIDE to help developers discover input validation
issues by resolving the binding speciﬁcations. Further re-
search is needed on the best approach to address delayed
bindings in ASIDE.
4.2.1 False Positive for ASIDE
As we just demonstrated, ASIDE had good coverage of the
input validation/encoding issues in Roller. In this section,
we discuss the additional warnings that ASIDE generated.
In analyzing false positives, we only look at taint sources of
primitive data types. Taint sources of composite types are
accounted for when elements of the composite object are
retrieved and treated as a taint source of a primitive data
type.
ASIDE reported 118 taint sources of primitive data types
that were not identiﬁed as exploitable Roller vulnerabilities
by the Fortify software security audit. 94 of them are cases
that are not exploitable at the moment. For example, a
taint source does not reach any taint sink. Failure to val-
idate/encode the untrusted input may not be exploitable
in the context of the current application. However, often
times, such untreated inputs will eventually be used, and
thus cause exploitable security vulnerability as the software
evolves. Therefore, we believe it is still a good secure pro-
gramming practice to validate/encode all untrusted inputs,
regardless of whether they will reach a taint sink or not.
Figure 4 shows another example from Roller, where a
tainted request URL is directly passed into an InvalidReques-
tException constructor, and eventually inserted into the er-
ror log. Fortify default rules do not acknowledge this code
to be vulnerable. However, if the logs are viewed in a web-
based log viewer such as a web browser, which is common in
some organizations, this would allow an attacker to launch
a Cross-site Scripting attack on the system administrator
reviewing the log.
Figure 4: Untrusted input is logged through an Ex-
ception construction.
Thus, from a broad secure programming best practice per-
spective, we believe these 94 cases should be regarded as
true positives, and ASIDE’s warnings should still be fol-
lowed. However, from a circumscribed perspective of a spe-
ciﬁc application, they may be regarded as false positives.
The remaining 24 reported taint sources we regard as false
positive, where inputs are used in ways that do not lead to
any recognized security vulnerabilities. These often involve
inputs that are highly speciﬁc to the application context.
For example, as illustrated in Figure 5, an input is tested to
see if it equals to a constant value, determining the applica-
tion ﬂow.
Figure 5: Untrusted input is used for logic test.
Another such case is shown in Figure 6, where the input is
cast into a Boolean value with only two possible outcomes:
true and false, which will not result in any harm to the
intended application logic.
Figure 6: Untrusted input is parsed into harmless
Boolean value.
Because false positive rate often is positively correlated
to accuracy, it is diﬃcult to design a highly accurate tool
with very low false positive rates. Both traditional analysis
tools, such as Fortify SCA, and ASIDE will require manual
inspection of warnings to eliminate false positives. However,
our analysis of Roller suggests that for vulnerabilities due to
improper input validation and/or encoding, ASIDE gener-
ates far fewer issues than Fortify, reducing the workload for
both developers as well as software security auditors.
Additionally, we believe that it may take less eﬀort to
recognize and deal with ASIDE false positives compared
to those generated by traditional static analysis. ASIDE’s
warnings are generated while the developer is actively en-
gaged in the programming process, making it easier to exam-
ine and understand the context of the warning. Moreover,
with a click of a button on ASIDE’s resolution menu, the de-
veloper can dismiss a warning as false positive. In contrast,
false positives generated by traditional analysis tools such as
Fortify SCA are often dealt with by either software security
auditors who typically do not have full application knowl-
edge or by developers after the program was completed. In
both cases, we believe it will take them longer to fully under-
stand the impact of a particular warning generated by static