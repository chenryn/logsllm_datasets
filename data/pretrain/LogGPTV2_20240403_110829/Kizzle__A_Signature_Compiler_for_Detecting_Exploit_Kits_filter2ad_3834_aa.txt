# Kizzle: A Signature Compiler for Detecting Exploit Kits

**Authors:**
- Ben Stock, CISPA, Saarland University
- Benjamin Livshits, Microsoft Research
- Benjamin G. Zorn, Microsoft Research

## Abstract
In recent years, the drive-by malware landscape has undergone significant consolidation, with exploit kits (EKs) becoming the primary source of such attacks. This paper introduces Kizzle, a novel prevention technique specifically designed to detect EKs. Our analysis reveals that while the JavaScript delivered by EKs varies greatly, the unpacked code remains relatively consistent due to the authors' reuse of code across versions. This consistency allows us to develop a scalable and precise detection system that can rapidly respond to superficial changes in EKs.

Kizzle generates anti-virus signatures for detecting EKs, which are as effective as manually created ones. Kizzle is highly responsive, capable of generating new signatures within hours. Our experiments demonstrate that Kizzle produces high-accuracy signatures, with false-positive rates under 0.03% and false-negative rates under 5% over a four-week period.

## 1. Introduction
The drive-by download malware landscape has evolved significantly, with a shift from custom-written malware to the widespread use of exploit kits (EKs). This approach benefits attackers by allowing them to share and quickly reuse malware components, aligning with best software engineering practices. However, this consolidation also presents opportunities for defenders.

### 1.1 Adversarial Cycle
Figure 1 illustrates the adversarial cycle, where the response time for attackers is much shorter than that for defenders. Kizzle aims to address this imbalance.

### 1.2 From Ad-hoc to Structural Diversity
The prevalence of EKs has changed the diversity of deployed malware. Five years ago, two variants of the same JavaScript-driven heap spraying exploit might have been written independently. Today, most malware variants are generated by EKs, often through individualization and natural changes over time. 

Most deployed JavaScript malware is obfuscated, and at runtime, the obfuscated code is unpacked multiple times to reach the payload. We observe that EK-generated malware operates like an onion, with outer layers changing frequently via randomization, while inner layers change more slowly, often containing rarely-changing CVEs.

### 1.3 Arresting the Malware Cycle
Malware development is primarily reactive, with producers creating and testing their wares against current detection tools. In a constant arms race, EKs frequently change parts of their code to evade signature-based detection. While these changes may be distinct between versions, the underlying structure of the fingerprinting and exploitation code remains relatively stable.

### 1.4 Achilles Heel
The consolidation of malware distribution via EKs simplifies life for attackers, but it also creates vulnerabilities. The key insight is that code reuse in EKs over time is their Achilles heel. The core of the unpacked "onion" changes little, making it possible to track and detect EKs using techniques that measure differences between programs.

### 1.5 Design Choices â€“ Deployment at Scale
Kizzle is a signature compiler that automates the process of synthesizing signatures from captured JavaScript malware variants. Our scalable, cloud-based implementation allows defenders to generate new signatures for observed malware variants within hours.

#### 1.5.1 Deployment Channels
Kizzle signatures can be deployed in various settings:
- Within a browser
- On the desktop to scan incoming JavaScript code
- To scan files saved to the file system
- Server-side, such as on a CDN to avoid hosting malware

We chose AV signatures as our distribution format because they enjoy well-established deployment channels with frequent, automatic updates.

#### 1.5.2 Enabling Robust Deployment at Scale
While Kizzle employs machine learning, we use pre-existing, off-the-shelf techniques to reduce engineering costs and system fragility. Specifically, we use the DBSCAN clustering strategy to create a multi-stage, distributed clustering system that scales well with the volume of incoming data.

## 2. Contributions
This paper makes the following contributions:
- **Insight:** Through detailed examination of existing EKs, we document their evolution, noting how they grow and evolve by appending new exploits and reusing code.
- **Clustering in the Cloud:** We built a high-performance processing pipeline for preprocessing large numbers of "grayware" JavaScript samples into a structured token stream and parallelizing the clustering process in the cloud.
- **Signature Generation:** We propose a simple algorithm for automatically generating structural signatures that can be deployed within an anti-virus engine. Kizzle produces signatures comparable in quality and readability to those written by human analysts.
- **Evaluation:** Our month-long experimental evaluation shows that Kizzle's automatically-produced structural signatures are comparable to manually created ones. When evaluated over a four-week period, Kizzle's false positive rates are under 0.03%, and false negative rates are under 5%.

## 3. Paper Organization
- **Section II:** Background on exploit kits and their construction.
- **Section III:** Technical details of Kizzle.
- **Section IV:** Detailed experimental evaluation.
- **Section V:** Limitations of our approach.
- **Sections VI and VII:** Related work and conclusions.

## 4. Background
In recent years, the drive-by malware landscape has shifted from unique downloads to the consolidation into exploit kits. These kits incorporate a variety of exploits for known vulnerabilities, offering advantages for malicious actors. As noted in the Microsoft Security Intelligence Report V16, early exploit kits required significant technical expertise, but this changed with the release of the Blackhole exploit kit in 2010, which was designed for novice attackers.

Exploit kits bring the benefits of specialization to malware production. A botnet herder can now focus on developing their software rather than building exploits, while the maintainer of an exploit kit can distribute different pieces of malware, optimizing revenue. For up-to-date information, readers can refer to blogs like SpiderLabs and "Malware don't need Coffee."

### 4.1 Focus of This Paper
As shown in Figure 2, the EKs under investigation target vulnerabilities in five browser and plugin components. An interesting observation is that Nuclear contains an exploit targeting a 2010 CVE in Adobe Reader, highlighting the difficulty in finding exploitable vulnerabilities.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.