title:Kizzle: A Signature Compiler for Detecting Exploit Kits
author:Ben Stock and
Benjamin Livshits and
Benjamin G. Zorn
Kizzle: A Signature Compiler for Detecting Exploit Kits
Ben Stock
CISPA, Saarland University
Benjamin Livshits
Microsoft Research
Benjamin Zorn
Microsoft Research
Abstract—In recent years, the drive-by malware
space has undergone signiﬁcant consolidation. Today,
the most common source of drive-by downloads are the
so-called exploit kits (EKs). This paper presents Kizzle,
the ﬁrst prevention technique speciﬁcally designed for
ﬁnding exploit kits.
Our analysis shows that while the JavaScript deliv-
ered by kits varies greatly, the unpacked code varies
much less, due to the kits authors’ code reuse between
versions. Ironically, this well-regarded software engi-
neering practice allows us to build a scalable and precise
detector that is able to quickly respond to superﬁcial
but frequent changes in EKs.
Kizzle is able to generate anti-virus signatures for
detecting EKs, which compare favorably to manually
created ones. Kizzle is highly responsive and can gener-
ate new signatures within hours. Our experiments show
that Kizzle produces high-accuracy signatures. When
evaluated over a four-week period, false-positive rates
for Kizzle are under 0.03%, while the false-negative
rates are under 5%.
I. Introduction
The landscape of drive-by download malware has
changed signiﬁcantly in recent years. There has been a
great deal of consolidation in malware production and a
shift from attackers writing custom malware to almost
exclusively basing drive-by download attacks on exploit
kits (EKs) [19]. This approach gives attackers an advan-
tage by allowing them to share and quickly reuse malware
components in line with the best software engineering
guidelines. It is the natural evolution of the malware
ecosystem [12] to specialize in individual tasks such as
CVE discovery, packer creation, and malware delivery. We
observe that this consolidation, while beneﬁting attackers,
also allows defenders signiﬁcant opportunities.
Fig. 1: Adversarial cycle illustrated. There is a built-in asymmetry that
Kizzle aims to remedy: the response time for the attacker is only a
fraction of that of the defender.
From ad-hoc to structural diversity: The prevalence
on EKs changes the diversity in deployed malware in sig-
niﬁcant ways. While ﬁve years ago two deployed variants
of the same JavaScript-driven heap spraying exploit might
have been written by independent hackers, today much
of the time malware variants will come by as a result of
malware individualization performed by an EK as well as
natural changes in the EK over time.
There is virtually no deployed JavaScript malware that
is not obfuscated in some way; at runtime, the obfus-
cated code is unpacked, often multiple times, to get to
the ultimate payload. We observe that in practice, much
EK-generated malware operates like an onion: the outer
layers change fast, often via randomization created by code
packers, while the inner layers change more slowly, for
example because they contain rarely-changing CVEs.
Arresting the malware cycle: Malware development
is chieﬂy reactive in nature: malware producers create
and test their wares against the current generation of
readily available detection tools such as AV engines or
EmergingThreats signatures. In a constant arms race with
the AV industry, these kits change part of their code
to avoid detection by signature-based approaches. While
these changes may be distinct between two versions of the
same kit, the underlying structure of the ﬁngerprinting and
exploitation code rarely changes (as we show later).
This attack-defense pattern is the fundamental nature
of the adversarial cycle (Figure 1), as has been noted as
early as 20 years ago [23]. Unfortunately, presently, in the
drive-by malware space the attacker has a considerable ad-
vantage in terms of the amount of work involved. Malware
variants are relatively easy to create, most typically by
changing the unpacker the attacker uses and testing their
variant against VirusTotal. Indeed, the attacker can easily
automate the process of variant creation and testing.
Achilles heel: While the consolidation of malware distri-
bution via exploit kits makes life simpler for the attacker,
their strength is also their weakness. Our key detection
insight is that code reuse that occurs in EKs over time
is their Achilles heel. The core of the unpacked “onion”
changes little over time and is thus something that can be
“tracked” in a sea of unclassiﬁed samples with techniques
that measure diﬀerences between programs.
A. Design Choices – Deployment at Scale
This paper proposes Kizzle, a signature compiler that
automates the process of synthesizing signatures from cap-
tured JavaScript malware variants. Kizzle gives defenders
Signature creationSignature deploymentMalware deployedInitial detection Attacker detectsMalware variant manual worksmallmutationEK
Flash
Silverlight
Java
Adobe Reader
Internet Explorer AV check
Sweet Orange
Angler
RIG
Nuclear exploit kit (2013-5331), 2014-0497
2014-0507, 2014-0515
2014-0515
2014-0497
2013-0074
2013-0074
Unknown1
2013-0422
Unknown
2013-2423, 2013-2460
2010-0188
2013-2551, 2014-0322
2013-2551
2013-2551
2013-2551
No
Yes
Yes
Yes
Fig. 2: CVEs used for each malware kit (as of September 2014). The CVEs are broken down into categories.
greater automation in the creation of AV signatures. Our
scalable cloud-based implementation allows defenders to
generate new signatures for malware variants observed the
same day within a matter of hours.
Our design choices are born out of our understanding
of the adversarial cycle (Figure 1) in our desire to tip the
scale in favor of the defender by reducing the manual eﬀort
of the security analyst responsible for writing signatures.
Because Kizzle needs to be ”seeded” with exploit kits, we
are not trying to replace the analyst; we are merely trying
to automate parts of the signature generation process to
reduce their workload.
Deployment channels: We envision the possibilities of
deploying Kizzle in a variety of settings:
● Kizzle signatures may be deployed within a browser,
● Kizzle signatures can be deployed on the desktop to
client-side, to scan all or some of the incoming
JavaScript code;
scan ﬁles that are saved to the ﬁle system so that if
any browser on the machine caches JavaScript ﬁles to
disk, those ﬁles will likely trigger a signature match;
● lastly, Kizzle signatures can be deployed server-side,
for instance, a CDN administrator may decide which
JavaScript ﬁles to host on a CDN in an eﬀort to avoid
hosting malware.
At the same time,
It’s because of these various deployment scenarios that
we choose AV signatures as our distribution format. AV
signatures enjoy a well-established deployment channel
with frequent, automatic updates for signature consumers.
just about any signature-based
scheme and most IDS approaches can be used as an oracle
by an attacker trying to evade detection. While we of
course recognize this shortcoming, we focus on tipping the
balance in favor of the defender in the existing, large-scale
signature generation and deployment ecosystem.
Enabling robust deployment at scale: While we
employ machine learning as a core component of our
signature-creation strategy in Kizzle, machine learning
per se is not our core contribution. We are deliberately us-
ing pre-existing oﬀ-the-shelf machine learning techniques
to reduce the engineering cost and limit the fragility
of the end-to-end system. Speciﬁcally, we chose to use
the DBSCAN clustering strategy.2. Kizzle uses existing
components to create a multi-stage, distributed clustering
2Clustering has been used in previous malware and intrusion
detection research (for example, [28, 40]) but previous work has not
identiﬁed the opportunity speciﬁcally presented by exploit kits for
clustering or deﬁned an eﬀective clustering strategy in the presence
of packing and obfuscation in the delivered JavaScript.
system that scales well with the volume of incoming data.
In other words, our system can be built and supported by
security engineers and not machine learning experts.
B. Contributions
This paper makes the following contributions:
Insight: Through detailed examination of existing EKs we
document the evolution of these kits over time, noting how
they grow and evolve. In particular, EKs often evolve by
appending new exploits, the outer packer changes without
major changes to the inner layer, and diﬀerent EK families
“borrow” exploits from each other. These observations
suggest that there is a great deal of commonality and code
reuse, both across EK versions, and between the diﬀerent
EKs, which enables EK-focused detection strategies.
Clustering in the cloud: Based on these observations
we built a high-performance processing pipeline for pre-
processing a large number of “grayware” JavaScript sam-
ples into a structured token stream and parallelizing the
process of clustering to be run in the cloud. Lastly, the
clusters are matched with known exploit kits for both
marking them as either benign or malicious and kit iden-
tiﬁcation.
Signature generation: Out of the detected code clusters,
we propose a simple algorithm for quickly automatically
generating structural signatures which may be deployed
within an anti-virus engine. Our approach, dubbed Kizzle,
produce signatures which are comparable in quality and
readability to those a human analyst may write. With
these structural signatures, whose accuracy rivals those
written by analysts, we can track EK changes in minutes
rather than days. Kizzle signatures can be also deployed
within the browser, enabling fast detection at JavaScript
execution runtime.
Evaluation: In this paper we primarily focus on detecting
four popular exploit kits (EKs). Our focus is supported
by a recent analysis performed by ZScaler ThreatLab
that concluded that three out of four kits we analyze
are “the top Exploit Kits that we have seen involved
in various Malvertising campaigns in 2015 [42].” Similar
ﬁndings have also been discussed by TrendMicro [39].
Figure 2 shows a brief summary of information about these
EKs. Our month-long experimental evaluation shows that
automatically-produced structural signatures are compa-
rable to those produced manually. We compare Kizzle
against a widely used commercial AV engine and ﬁnd that
it produces comparable false positive and false negative
rates for the exploit kits we targeted. When evaluated
over a four-week period, false positive rates for Kizzle are
under 0.03%, while the false negative rates are under 5%.
C. Paper Organization
The rest of the paper is organized as follows. Section II
gives some background on exploit kits and how they are
typically constructed. Section III provides some of the
technical details. Section IV contains a detailed experi-
mental evaluation. Section V talks about the limitations
of our approach. Finally, Sections VI and VII summarize
related work and conclude.
II. Background
The last several years have witnessed a shift from
unique drive-by downloads to a consolidation into so-
called exploit kits, which incorporate a variety of exploits
for known vulnerabilities. This has several advantages
for all malicious parties involved. As mentioned in the
Microsoft Security Intelligence Report V16, “Commercial
exploit kits have existed since at least 2006 in various
forms, but early versions required a considerable amount
of technical expertise to use, which limited their appeal
among prospective attackers. This requirement changed
in 2010 with the initial release of the Blackhole exploit
kit, which was designed to be usable by novice attackers
with limited technical skills.”
Exploit kits bring the beneﬁts of specialization to mal-
ware production. A botnet herder can now focus on devel-
opment of his software rather than having to build exploits
that target vulnerabilities in a browser and plugins. On
the other hand, the maintainer of a single exploit kit may
use it to distribute diﬀerent pieces of malicious software,
optimizing his revenue stream. This trend is also shown
by glimpses security researchers sometimes got into the
backend functionality and operation of such kits, such as
detailed information on the rate of successful infection
from the kits [15, 37]. Interested readers are referred to [19]
for a more comprehensive summary. Note, however, that
most up-to-date information can be found via blogs like
SpiderLabs3 and “Malware don’t need Coﬀee4” which are
updated regularly as exploit kit updates emerge.
Focus of this paper: As can be seen from Figure 2,
the EKs under investigation are targeting vulnerabilities
in ﬁve browser and plugin components.
An interesting observation in this instance is the fact
that Nuclear contains an exploit targeting a CVE
from 2010 in Adobe Reader, highlighting the fact that
exploitable vulnerabilities are hard to come by. Note that