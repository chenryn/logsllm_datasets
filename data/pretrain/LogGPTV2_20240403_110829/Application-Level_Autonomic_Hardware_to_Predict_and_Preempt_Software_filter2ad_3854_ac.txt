in Vivado Design Suite.
D. Limitations and Tradeoffs
There are always cost concerns arising from platform
and development ﬂow complications. For example, Frama-
C requires signiﬁcant manual intervention and expertise.
However the TECEP additions are independent in a trust
sense from the base ICS architecture and code, and offer
a lower cost, on-chip, digital logic alternative to classical
mechanical interlocks used in safety critical environments.
A conﬁgurable SoC’s cost premium over a standard micro-
controller may be eclipsed by the value of the plant.
The plant state preview window is ultimately limited by
processing power and the need to periodically synchonize
the model with the physical plant to keep up with changes
due to disturbances or commands. Prediction may be omitted
if process state also depends on events outside the model.
While the inability to remotely update TECEP logic is a
security asset, the need for PLC access to modify the model,
process speciﬁcations, and backup controller incurs a higher
maintenance cost. We are investigating a remote update
protocol permitting range-limited, authenticated changes to
Figure 5. Control system event sequence
certain system parameters in order to adjust for effects such
as aging.
IV. MOTOR CONTROLLER EXAMPLE
A simple motor controller example described in [26] is
used to test and demonstrate the security features described
in this work. For this example, the production controller is a
proportional-integral-derivative controller while the backup
controller is a proportional-only controller with a ﬁxed
reference input. The plant is a motor emulated in software
functions on the ARM. This closed-loop system is run once
per millisecond.
A. Control Flow
The system’s ﬂow of control is event-driven and is shown
in Fig. 5. Each cycle begins after a 1 ms delay dictated by an
AXI Timer interfaced with the ARM. During the delay the
production controller, prediction unit and hardware monitor
lie dormant. Although the physical plant will operate on its
own timing, the currently emulated plant begins operation
once the ARM recognizes 1 ms has elapsed. The emulated
142
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:47 UTC from IEEE Xplore.  Restrictions apply. 
1 mselapsed ?YesInitializationNoSend controller output to plantPlant and prediction within spec?Select production controller outputSelect backup controller outputYesNoStart probation counterRun plant emulationRun production controllerRun prediction unitRun hardware monitorplant function reads its input from the IOM, processes it,
and sends its output to the IOM. The plant’s I/O is simply
passed through the junction box, with no handshaking and
non-blocking reads and writes. When the plant’s process is
complete, the production controller similarly reads its input
from the IOM, processes it, and writes the output to the
IOM. The HLS interface module between the junction box
and the production controller performs a blocking read on
the controller’s output. A new value is passed to the junction
box, which signals the MicroBlaze prediction unit to begin,
and a blocking read is then performed on the prediction
unit’s output. When the prediction unit ﬁnishes, the junction
box sends the outputs of the production controller, physical
plant, and prediction unit
to the hardware monitor and
signals it to begin operation. The hardware monitor’s output
is written to the physical plant, and the system lies dormant
until the next cycle begins.
The junction box’s watchdog timers monitor the response
time of the production controller and the prediction unit.
If either unit fails to respond before its timer expires, a
corresponding status code is sent to the hardware monitor.
Because security needs vary among control systems, the
hardware monitor’s reaction to various status codes is not
ﬁxed. A zero status code implies normal operation, and any
non-zero code results in a transfer of control to the backup
controller. The backup controller is then invoked each cycle
based on the junction box’s internal timer rather than upon
the completion of the production controller and prediction
unit.
B. Application-speciﬁc Attributes
Some aspects of the implementation process are speciﬁc
to the motor controller example and will differ among
various control systems. One such aspect is the hardware
monitor’s response to the loss of the production controller
or prediction unit. In some systems, the production controller
may be allowed to recover, or the loss of prediction may not
be considered critical. In this example, if the junction box
determines that either unit has failed, the invocation of the
backup controller is permanent until the system is reset. The
prediction unit’s forecast window and the probation counter
length are 200 system cycles (i.e. 200 ms), as shown in line
20 of Fig. 6. However, these values may be adjusted.
Currently, saving and restoring state in the prediction unit
is performed by changing global variables; this method is
feasible only if control system source code is available.
Running FreeRTOS on the MicroBlaze avoids the need for
source code. This new method uses a second production
controller and plant model. The primary set runs in Normal
mode. An administrative task copies the primary set’s stack,
including state variables, onto the secondary set’s stack,
which is run in Accelerate mode. Alternatively one can clone
the primary production controller and plant model tasks, run
the cloned tasks in Accelerate mode, pass the accelerated
output to the IOM task, and delete the cloned task.
C. Hardware Monitor Code Analysis
Formal methods can be used at this stage in the de-
sign process to conﬁrm TECEP security additions such as
the hardware-implemented backup controller module taking
over when a process parameter goes out of speciﬁcation. To
accomplish this we analyze the TECEP hardware monitor
module, which calls the controller prediction, speciﬁcation
guard, and backup controller modules. The hardware mon-
itor source code and Frama-C annotations are provided in
Fig. 6. A combination of ghost code and function contracts
are used to reason about hardware monitor behaviors under
valid and invalid speciﬁcation conditions. The assigns
clause on line 5 simply speciﬁes that the hw_monitor
function does not have any side effects (i.e., does not assign
any values which are not local). This clause is followed with
two function contracts consisting of behavior clauses
which test various conditions.
The ﬁrst behavior, verify_all_valid starting on line
6 of Fig. 6, aims to verify that the hw_monitor does
not trigger the backup condition whenever the speciﬁcation
guard does not detect an out-of-speciﬁcation condition.
To test
this normal operating condition we assume that
the plant response, plant model response, and predicted
plant model response are all within stability speciﬁcations.
The assumes clause can specify valid y_physical and
y_accel value ranges directly because they are inputs of
the function. Value ranges of y_model, which is local to
the function, can be overridden within the function with a
ghost code variable, ghost_y_model, on which assump-
tions can be made in the same manner as function inputs
and outputs. Another ghost variable, ghost_backup is
used to store the value of the local backup variable
within the function. This enables an ensures clause using
ghost_backup which tests if the backup controller is ever
set to active at the completion of the function.
The second behavior, verify_any_invalid starting
on line 11 of Fig. 6, seeks to prove that the hw_monitor
will always choose the backup, hardware-implemented con-
troller response when any unit is out of speciﬁcation. For this
behavior we assume that either y_physical, y_accel,
or y_model has a value below y_min or above y_max.
Under this assumption the hardware speciﬁcation guard
should detect an out-of-speciﬁcation condition and switch
control
to the hardware implemented backup controller,
u_hw. A ghost variable, ghost_u_hw, is used to capture
the local value of u_hw at the end of the function. The
ensures clause on line 15 tests that the function returns
a value which equals this captured value. Lines 16 and 17
test that this and the previous behavior form a set of proofs
that are both disjoint and complete, respectively. The set
143
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:47 UTC from IEEE Xplore.  Restrictions apply. 
assumes y p h y s i c a l >= y min
&&
ghost y model >= y min && ghost y model = y min
&& y p h y s i c a l  y max
ghost y model > y max
y a c c e l > y max ;
| |
| |
f l o a t y p h y s i c a l ,
f l o a t y a c c e l )
f l o a t ghost y model = 0 . 0 f ;
i n t
g h o s t b a c k u p = 0 ;
f l o a t ghost u hw = 0 . 0 f ;
a s s i g n s \ n o t h i n g ;
b e h a v i o r v e r i f y a l l v a l i d :
d i s j o i n t b e h a v i o r s ;
c o m p l e t e b e h a v i o r s ;
1 / /@ g h o s t
2 / /@ g h o s t
3 / /@ g h o s t
4 /∗@
5
6
7
8
9
10
11
12
13
14
15
16
17
18 ∗ /
19
20 # d e f i n e BACKUP HOLD COUNT 200
21
22 f l o a t hw monitor ( f l o a t u sw ,
23 {
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48 }
i n t
f l o a t y model ;
backup hold ;
s t a t i c
s t a t i c
r e t u r n u ;
i f
y model = hw plant model ( u ) ;
/ /@ g h o s t g h o s t b a c k u p = backup ;
/ /@ g h o s t ghost u hw = u hw ;
( r e s e t )
y model = hw plant model ( u sw ) ;
f l o a t u hw = h w c o n t r o l l e r ( y p h y s i c a l ) ;
/ /@ g h o s t y model = ghost y model ;
i n t backup = ! hw spec guard ( y p h y s i c a l )
! hw spec guard ( y a c c e l ) ;
/ / Assignment h e r e a l l o w s y model
| |
! hw spec guard ( y model )
| |
r e s e t
backup hold = ( backup ) ? (BACKUP HOLD COUNT)
backup hold = ( backup hold < 0 ) ? 0 : backup hold ;
:
( backup hold − 1 ) ;
f l o a t u = ( ! backup && ! backup hold ) ? u sw : u hw ;
Figure 6. hw_monitor function annotated with Frama-C
of behaviors is considered disjoint when they do not
overlap and complete when all cases are covered.
for
The
Jessie
translation
to Why
and
the
verify_all_valid
verify_any_invalid
function contracts each results in 96 total postcondition
veriﬁcation conditions (or proof obligations) representing
various possibilites for
input values and corresponding
branches of the function that could be executed, as seen
in Fig. 7. Two additional proof obligations of interest are
also created to check if our set of behaviors are disjoint
and complete. Other obligations that were generated for
the hw_monitor function’s default behavior and safety
were not considered in this analysis. The simplicity of
the analyzed code and its hardware implementation as a
sequential state machine reduce the likelihood of semantic
mismatches between Frama-C and HLS.
The results of running two proof checkers are also shown
in Fig. 7. All conditions must be discharged for the behaviors
144
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:59:47 UTC from IEEE Xplore.  Restrictions apply. 
to be proven valid, which is accomplished using the Alt-
Ergo prover within only a few minutes. We used a 10
second timeout threshold for this experiment. The Z3 prover
was unable to prove some of the postconditions before
hitting the timeout limit, e.g., Postcondition 7 in Fig. 7.
Increasing the timeout limit could possibly enable the Z3
prover to discharge this veriﬁcation condition. However, this
is unnecessary as these problematic proof obligations have