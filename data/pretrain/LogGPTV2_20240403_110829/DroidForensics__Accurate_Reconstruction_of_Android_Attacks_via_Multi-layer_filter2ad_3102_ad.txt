# Android Malware and DroidForensics Analysis

## 1. Introduction
This document provides an overview of various Android malware, the reconstruction of these attacks using DroidForensics, and the compatibility tests conducted to ensure that DroidForensics does not introduce new issues.

### 1.1 List of Malware
- **Android.Exprespam**
- **FakeInstagram**
- **HGSpy**
- **FBI.Locker**
- **Android.Fakeplay**
- **Android.Fakenotify B wap.syst**
- **Android.Fakeinstaller**
- **Android.Fakedaum**
- **Android.Fakebank B**

### 1.2 Additional Information
- **crafted**: Indicates a crafted or custom-made malware.
- **imauyfxuhxd.qhlsrdb**: A unique identifier or filename.
- **com.tmvlove, com.example.adt, com.nativeCode**: Example package names.
- **API Binder**: Refers to the Binder IPC mechanism in Android.
- **(cid:88)**: Placeholder for specific data points in the tables.

## 2. Reconstruction of Android Attacks with DroidForensics
The following table shows the reconstruction of Android attacks using DroidForensics. The mark (cid:88) indicates that the log from that layer is needed to reconstruct an attack. "Full" means DroidForensics discovers full attack behaviors, and "Partial" means it misses part of the malicious behaviors.

| Malware               | Log Layer Needed | Reconstructed Behavior |
|-----------------------|------------------|------------------------|
| Android.Exprespam     | (cid:88)         | Full                   |
| FakeInstagram         | (cid:88)         | Full                   |
| unknown               | (cid:88)         | Full                   |
| HGSpy                 | (cid:88)         | Full                   |
| FBI.Locker            | (cid:88)         | Full                   |
| Android.Fakeplay      | (cid:88)         | Full                   |
| Android.Fakenotify    | (cid:88)         | Full                   |
| B wap.syst            | (cid:88)         | Full                   |
| Android.Fakeinstaller | (cid:88)         | Full                   |
| Android.Fakedaum      | (cid:88)         | Full                   |
| Android.Fakebank B    | (cid:88)         | Full                   |

## 3. Compatibility Tests
To evaluate the compatibility of DroidForensics, we used the Android Compatibility Test Suite (CTS) [2] with the CTS-public-small plan, which contains around 9,200 test cases. The results are summarized in the following table.

| Device  | # of Fails (Ori.) | # of Fails (Our) | # of Tests |
|---------|-------------------|------------------|------------|
| Nexus 6 | 7                 | 4                | 316        |
| Nexus 9 | 7                 | 4                | 316        |

In all tests, DroidForensics and the original Android failed on the same set of test cases. We believe the failed cases are due to device-specific environments, such as the lack of an external SD card on both Nexus 6 and 9. The results show that DroidForensics maintains the same level of compatibility as the original Android.

## 4. Discussion
### 4.1 Limitations and Future Work
- **Kernel-Level Attacks**: DroidForensics can be disabled by kernel-level attacks. Although logs are periodically transferred to an outer server, an attacker can tamper with the remaining logs. This is an ongoing research area [51, 24].
- **System Call Interception**: Our prototype uses `openat()` system calls to transfer API and binder logs. If a malicious application invokes `openat()` to trick DroidForensics, it can introduce false positives but cannot hide true positives. We plan to mitigate this by adding a user-defined system call with three arguments, where the first argument is a secret session key.
- **Binder Logger**: Our binder logger intercepts IPC/RPC in the native binder library, `libbinder.so`. However, native components can directly invoke `ioctl` system calls to send binder messages to the kernel. To address this, we can port the binder logger to the kernel-space binder driver.
- **Manual Instrumentation**: DroidForensics requires manual instrumentation of Android API functions. In the future, we plan to develop more automated techniques, such as leveraging DroidAPIMiner [16] to identify instrumentation locations.

## 5. Related Work
### 5.1 Forensic Logging
- **Desktop and Server Environments**: Techniques like BEEP [45], ProTracer [49], and WinLog [48] focus on logging system-level events to improve attack reconstruction accuracy.
- **Android-Specific Solutions**: DroidForensics enables multi-layer logging and provides an easy-to-use interface for querying logs. LogGC [46] proposes garbage collection techniques for forensic logs to reduce their size.
- **Other Approaches**: CopperDroid [63] and DroidScope [66] are QEMU-based approaches that have limitations in recent Android ART environments. Quire [30] monitors binder calls to detect confused deputy problems, and Grover et al. [38] propose application-level privilege tracking.

This document aims to provide a comprehensive understanding of the challenges and solutions in Android malware analysis and the effectiveness of DroidForensics in addressing these challenges.