i ←$ Zp and set ti := wvi ,
i − ci · ri.
− Eval(ski, x, pp) → zi. Compute w := H(x) and hi := wsi. Pick vi, v(cid:48)
i. Compute a hash ci := H(cid:48)(hi, w, γi, g, h, ti, t(cid:48)
i), ui := vi − ci · si and u(cid:48)
i := v(cid:48)
i := gvi · hv(cid:48)
t(cid:48)
Deﬁne πi to be (ci, ui, u(cid:48)
i) and output ((w, hi), πi).
− Combine({(i, zi)}i∈S, pp) =: z/⊥. If |S| < t, output ⊥. Else, parse zi as ((w, hi), (ci, ui, u(cid:48)
i and check if ci = H(cid:48)(hi, w, γi, g, h, ti, t(cid:48)
i∈S hλ0,i,S
check fails for any i ∈ S, output ⊥. Else, output(cid:81)
i ∈ S. Compute ti := wui · hci
i := gui · hu(cid:48)
i · γci
i , t(cid:48)
.
i
i)) for
i). If
Figure 5: A concrete instantiation of the protocol ΠZK-DDH-DP from Figure 4 using Pedersen
commitment and Schnorr-style proof (via the Fiat-Shamir transform).
27
Parameters: Let G = (cid:104)g(cid:105) be a multiplicative cyclic group of prime order p in which the DDH assump-
tion holds, H : {0, 1}∗ → G and H(cid:48) : {0, 1}∗ → Zp be hash functions. Let SSS be Shamir’s secret
sharing scheme (Def. A.5).
− Setup(1κ, n, t) → ((cid:74)sk(cid:75)[n], pp). Sample s ←$ Zp and get (s1, . . . , sn) ← SSS(n, t, p, s). Set
pp = (p, g, G,H,H(cid:48), gs1, . . . , gsn), ski := si and give ski to party i, for i ∈ [n].
− Eval(ski, x, pp) → zi. Compute w := H(x) and hi := wski. Pick vi ←$ Zp and set ti := gvi.
Compute a hash ci := H(cid:48)(hi, w, gski, g, ti) and ui := vi − ci · ski. Deﬁne πi to be (ci, ui) and
output ((w, hi), πi).
− Combine({(i, zi)}i∈S, pp) =: z/⊥.
i ∈ S. Compute ti := wui · hci
output ⊥. Else, output(cid:81)
If |S| < t, output ⊥. Else, parse zi as ((w, hi), (ci, ui)) for
i and check if ci = H(cid:48)(hi, w, gski, g, ti). If check fails for any i ∈ S,
i∈S hλ0,i,S
i
.
Figure 6: A privately veriﬁable version of the protocol from Figure 5.
An eﬃcient way to instantiate trapdoor commitments and NIZK arguments of knowledge
(in the random oracle model) is via Pedersen commitments and Fiat-Shamir transformation
on Schnorr-style proofs. We give this concrete version of ΠZK-DDH-DP in Figure 5 and use
it for our experiments in the following section. The concrete protocol remains secure under
DDH (in random oracle model).
Remark 8.3 Besides correctness, protocol of Figure 4 has the additional property that each
party’s proof can be publicly veriﬁed, i.e. the Combine algorithm only takes public inputs and
the public messages sent/received. In particular, even an external party who does not hold
any secrets, given the partial DPRF values and the NIZK proofs, can publicly verify that the
DPRF was computed correctly. This may be useful in applications where an external party
wants to verify the correctness of a token. But if we settle for strong correctness with only
private veriﬁability, we can obtain a more eﬃcient protocol. In particular, instead of publicly
committing to the secret keys, each party can be given gsi for all i as part of its secret key
in the setup, and the Schnorr-based NIZK can be simpliﬁed to reduce the number of required
exponentiations. In the experiment section we implement both variants and show that the
privately veriﬁable version is 25% faster than the publicly veriﬁable version. A concrete
construction is provided in Figure 6.
8.2 PRF-based construction
NPR also presented a DPRF construction based on any PRF, e.g. AES. 9 To obtain an t-
out-of-n threshold, this protocol incurs an exponential overhead of O(nmin(t,n−t)). However,
for n < 20 or t ≈ n it can signiﬁcantly outperform the previously described DDH based
construction (see Section 9).
In the setup phase of the protocol, d := (cid:0) n
Fk(x) =(cid:76)d
We assume that d is polynomial in the security parameter so that all the DPRF algorithms
are polynomial time. Let D1, . . . , Dd be the d distinct (n − t + 1)-sized subsets of [n]. Then,
the i-th random number is given to all parties in the set Di. The DPRF is deﬁned as
i=1 fki(x), where f can be any PRF. Since all the d keys are needed to compute
Fk, no set S of parties of size less than t can compute Fk by itself (at least one of the
(cid:1) random numbers k1, ..., kd are chosen.
n−t+1
9Micali and Sydney provided a similar construction but for more general access structures [MS95].
28
Parameters: Let f : {0, 1}κ × {0, 1}∗ → {0, 1}∗ be a pseudo-random function.
− Setup(1κ, n, t) → ((cid:74)SK(cid:75)[n], pp) : Pick k1, ..., kd ←$ {0, 1}κ where d :=(cid:0) n
the d distinct (n − t + 1)-sized subsets of [n]. For i ∈ [n], let SKi := {kj | i ∈ Dj for j ∈ [d]}. Set
pp := (f ) and give (SKi, pp) to party i, for i ∈ [n].
(cid:1). Let D1, . . . , Dd be
n−t+1
− Eval(SKi, x, pp) → zi : Compute hi,k := fk(x) for all k ∈ SKi and output {hi,k}k∈SKi.
− Combine({(i, zi)}i∈S, pp) =: z/⊥ : If |S| < t, output ⊥. Else, parse zi as {hi,k}k∈SKi for i ∈ S.
i ⊆ SKi for
i}i∈S be mutually disjoint sets such that ∪i∈SSK(cid:48)
i = {k1, . . . , kd} and SK(cid:48)
Let {SK(cid:48)
every i. Output ⊕k∈SK(cid:48)
i,i∈Shi,k.
Figure 7: A secure DPRF protocol Πf-DP based on any PRF.
D1, . . . , Dd subsets, say Dj, does not intersect with S; thus parties in S do not have kj). See
Figure 7 for a formal description.
Theorem 8.4 If f is a PRF, then Πf-DP in Figure 7 is a secure DPRF.
Proof of the above theorem can be found in Appendix C.6. We also note that it is
possible to augment this PRF-based construction into one that satisﬁes strong correctness
(hence strong security) using only symmetric-key primitives. In particular, one could commit
to the PRF secrets during the setup, and require that each party provides a symmetric-key
NIZK of correctness of its evaluation with respect to its committed secret keys using recent
techniques [GMO16, CDG+17]. We do not present such an instantiation since it would be
quite ineﬃcient.
9 Experimental Evaluation
When we combine the constructions of Section 7 and the DPRF instantiations of Section 8,
we obtain four variants (two with strong security) of a threshold authenticated encryption
scheme as depicted in Figure 8. We remark that although our implementation uses a hash
function modeled as a random oracle to implement the commitment scheme used in DiSE
the construction itself is proven secure using any commitment scheme in the standard model.
DPRF Instantiation Resulting TSE Assumption
Πf-DP (Fig. 7)
ΠDDH-DP (Fig. 3)
ΠZK-DDH-DP (Fig. 5)
ΠZK-DDH-DP (Fig. 6)
OWF
DDH
DDH
DDH
DDH (Strong)
DDH (Strong)
ΓAES
ΓDDH
ΓS
ΓPV
Model
Standard
Standard
ROM
ROM
Figure 8: The four TSE schemes we implemented by instantiating DiSE. There are two concrete
instantiations of ΠZK-DDH-DP, depending on the veriﬁability feature (see Remark 8.3).
We implement all four variants of our protocol in C++. We implement the random oracle
as Blake2 [bla] and the PRF/PRGs are constructed from AES-NI. The DDH-based DPRF
[NPR99] uses the Miracl library [mir] with Curve p256k1. Benchmarks were performed on
a single server equipped with two 18-core Intel Xeon CPUs at 2.3Ghz and 256GB of RAM.
Parties communicate through a kernel loopback device simulating two settings: LAN - 10
Gbps and 0.1ms (RTT) latency, WAN: shared 40 Mbps and 80ms latency.
29
t
n/3
n/2
2n/3
n − 2
2
n
6
12
18
24
4
6
12
18
24
3
6
12
18
24
12
18
24
12
18
24
Throughput
(enc/s)
ΓDDH
556
382
297
173
ΓS
DDH
232
99
64
34
555
527
300
231
125
561
399
245
176
100
203
135
75
556
553
404
235
146
64
42
22
239
101
47
31
17
37
23
12
235
226
176
ΓAES
1,095,770
656,728
45,434
902
1,113,090
510,152
198,020
10,194
165
1,100,413
1,033,592
438,957
21,139
445
727,273
524,109
283,822
1,058,574
1,037,703
735,294
ΓPV
DDH
189
77
46
31
190
112
48
31
22
190
75
35
21
16
34