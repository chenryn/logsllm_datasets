{ 
    HANDLE hMutex; 
    DWORD status; 
    hMutex = OpenMutex(MUTEX_MODIFY_STATE, FALSE, "MyMutex"); 
    if(hMutex == NULL) 
        return -1; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
791 
    status = WaitForSingleObject(hMutex, INFINITY); 
    if(status == WAIT_TIMEOUT) 
        return -1; 
    .. modify some global object .. 
    ReleaseMutex(hMutex); 
} 
What's the problem with this code? What if a rogue application also opens MyMutex and 
holds onto it indefinitely? The other waiting processes are left sleeping indefinitely, 
thus unable to complete their tasks. 
You can also cause denial-of-service conditions in UNIX programs that bail out when 
an attempt to initialize a semaphore set fails or when the value of IPC_PRIVATE is not 
passed as the key parameter to semget(). For example, look at the following code: 
int initialize_ipc(void) 
{ 
    int semid; 
    semid = semget(ftok("/home/user/file", 'A'), 10, 
                    IPC_EXCL|IPC_CREAT | 0644); 
    if(semid < 0) 
        return -1; 
    return semid; 
} 
This code creates a semaphore set with ten semaphores. Because IPC_CREAT and 
IPC_EXCL are defined, semget() returns an error if a semaphore with the same key 
already exists. If you create a set beforehand, the initialize_ipc() function returns 
an error and the program never starts. 
Note 
Notice the use of the ftok() function. Ostensibly, it's used to generate keys for use 
with IPC, but this function doesn't guarantee key uniqueness. In fact, a brief 
examination of the source code in glibc shows that if you supply the same arguments, 
you generate the same key value, or you could determine the key value it generates 
easily. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
792 
If the IPC_EXCL flag isn't supplied, you can still cause semget() to fail by initializing a 
semaphore set with restrictive permissions. You could also initialize a semaphore set 
with the same key but fewer semaphores in it, which also causes semget() to return an 
error. 
Other Squatting Issues 
So far, the squatting issues discussed usually result in a denial of service by not 
allowing a process access to an object. Squatting can also occur by taking advantage 
of a nuance of how the CreateEvent(), CreateMutex(), CreateSemaphore(), and 
CreateWaitableTimer() functions work. When called with a non-NULL name 
parameter, these functions check to see whether the specified name already exists. If 
it does, the existing object is returned to the caller instead of creating a new object. 
The only way to tell that an existing object is returned rather than a new one is for the 
developer to call GetLastError(), check whether the error is ERROR_ALREADY_EXISTS, 
and then handle that case specifically. Failure to do so can result in some interesting 
situations. If an existing object is returned, several parameters to the Create*() 
functions are ignored. For example, the CreateMutex() function takes three 
parameters: the security attributes structure describing access rights to the object, a 
Boolean value indicating whether the caller initially holds the lock, and the name of 
the object. If the named mutex already exists, the first two parameters are ignored! 
To quote from the MSDN's CreateMutex() function description: 
If lpName matches the name of an existing named mutex, this function requests the 
MUTEX_ALL_ACCESS access right. In this case, the bInitialOwner parameter is 
ignored because it has already been set by the creating process. If the 
lpMutexAttributes parameter is not NULL, it determines whether the handle can be 
inherited, but its security-descriptor member is ignored. 
Interesting. So if the ERROR_ALREADY_EXISTS value isn't checked for using 
GetLastError(), it's possible for an attacker to create a mutex with the same name 
before the real application does. This can undermine the security attributes that 
would otherwise be placed on the object because they are ignored when the 
application calls the CreateMutex() function. Furthermore, consider any code that 
calls CreateMutex() with the bInitialOwner parameter passed as TRUE. The caller 
might manipulate a shared object under the assumption that it holds the mutex lock, 
when in fact it doesn't, thus resulting in a race condition. Here is an example. 
int modifyObject(HANDLE hObject) 
{ 
    HANDLE hMutex; 
    hMutex = CreateMutex(NULL, TRUE, "MyMutex"); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
793 
    if(hMutex == NULL) 
        return -1; 
    .. modify object pointed to by hObject .. 
    ReleaseMutex(hMutex); 
} 
The bInitialOwner parameter passed to CreateMutex() is set to TRUE to indicate that 
this process should have initial ownership of the lock. However, there's no call to 
GetLastError() to check for ERROR_ALREADY_EXISTS; therefore, it's possible that the 
returned mutex is a preexisting object. In this case, the bInitialOwner value is 
ignored, so this process would not in fact hold the lock for hMutex, and any access of 
hObject is subject to race conditions. 
The other synchronization object creation functions have similar issues. The security 
attributes parameterand potentially other parametersare ignored if the named object 
already exists. For example, the lInitialCount and lMaximumCount parameters for 
CreateSemaphore() are ignored if an existing object is returned because those 
parameters are initialized by the original creator of the object. Ignoring these 
parameters might make it possible to create a semaphore with a different maximum 
count than the application expects, which might cause it to work incorrectly. In fact, 
if an arbitrarily large maximum count is set, the semaphore provides no mutual 
exclusion at all, again resulting in a race condition. Similarly, with an event object, the 
bManualReset and bInitialState parameters are ignored if a previously created object 
is returned. Therefore, a program initializing an event object as an auto-reset object 
could instead receive a manual-reset object, which stays signaled so that multiple 
processes receive the event instead of just one, when the process is expecting it to be 
delivered to only a single process or thread. 
Another thing to keep in mind with squatting issues is that if you create the object, 
you're free to change it whenever you like and in whatever way you choose. If you 
create an event or waitable timer object that's subsequently returned to a privileged 
application through the use of CreateEvent() or CreateWaitableTimer(), you can 
arbitrarily signal those objects whenever you like. For instance, the owner of an event 
can generate a signal by calling the SetEvent() function at any time. This call could be 
dangerous when a process is expecting that the receipt of an event signal is 
acknowledgement that some object transaction has taken place, when in fact it 
hasn't. 
Semaphore sets in UNIX (and other System V IPC objects) are vulnerable to similar 
squatting issues, but only to a limited extent because of the way the API works. A 
process creating a semaphore should use the IPC_CREAT and IPC_EXCL flags or the 
IPC_PRIVATE value for a key. Doing so guarantees that a new semaphore has been 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
794 
created. If the process supplies a key value and neglects to use the IPC_EXCL flag, it 
might mistakenly get access to an existing semaphore set. Here's an example of a 
vulnerable call: 
int semid; 
semid = semget(ftok("/home/user/file", 'A'), 10, 
               IPC_CREAT | 0644); 
This call to semget() takes an existing semaphore set if one exists with the same key 
and creates a new one only if one does not exist. If the semaphore set does already 
exist, it must have at least as many semaphore objects in the set as the second 
argument indicates. If it doesn't, an error is returned. There are still some interesting 
possibilities related to what you can do to the semaphore set at the same time 
another process is using it because you're the owner of the semaphore. 
Note 
If permissions are relaxed enough, such as everyone having full modify privileges to 
the semaphore created by a privileged process, the same attacks described in the 
following sections are also possible. 
Semaphore sets are not like file descriptors. When a semaphore set is open, it's not 
persistently linked to the application. Instead, a semaphore ID is returned to the 
caller, and every subsequent use of the semaphore set involves looking up that ID in 
the global namespace. Therefore, if you have sufficient access to the semaphore set 
(as you do if you're the creator), you can do anything you want to it between accesses 
by the privileged process using the malicious semaphore set. For example, it would be 
possible to delete the set or re-create it after semget() returns in the privileged 
process with a smaller number of semaphore objects. You could also manually reset 
all semaphore integers in the set to arbitrary values, thus causing race conditions in 
the privileged process. Therefore, when auditing applications that make use of 
semaphores, the flags used in semget() are quite important. 
Note 
In case you're wondering what happens when IPC_EXCL is set and IPC_CREAT isn't, this 
is invalid and doesn't cause a new semaphore set to be created. The semget() function 
just returns an error. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
795 
Synchronization Object Scoreboards 
As you have seen, it is relatively easy to misuse synchronization APIs, and 
inadvertently render a program vulnerable to a denial-of-service or race condition. 
When you're auditing for these vulnerabilities, it's best to keep a record of likely 
problems resulting from improper use of these IPC synchronization mechanisms, so 
that you can refer back to it at later stages of the code audit. The audit logs described 
in previous chapters don't address many of the details associated with concurrency 
vulnerabilities. Instead, you can use synchronization object scoreboards, which are a 
small logs providing the security-relevant details of a synchronization object: where it 
was instantiated, how it was instantiated, where it's used, and where it's released. 
Table 13-1 shows an example of this scoreboard. 
Table 13-1. Synchronization Object Scoreboard 
Object name 
MyMutex 
Object type 
mutex 
Use 
Used for controlling access to the shared resource hObject 
(declared in main.c line 50). This object can have only one thread 
accessing it at a time (whether it's a reader or a writer). 
Instantiated 
open_mutex(), util.c, line 139 
Instantiation 
parameters 
OpenMutex(NULL, TRUE, "MyMutex") 
Object 
permissions 
Default 
Used by 
writer_task(), writer.c, line 139 
reader_task(), reader.c, line 158 
Protects 
A linked list, queue, declared in main.c, line 76 
Notes 
This mutex uses a static name, and the code doesn't check 
GetLastError() when OpenMutex() returns. A squatting attack is 
possible. 
Possible race condition in reader.c line 140, where one of the code 
paths fails to lock the mutex before operating on hObject. 
As you can see, this scoreboard technique provides a concise summary of the object's 
use and purpose. You can note any observations about the way the object is 
instantiated or used and possibly follow up later. Not only does this scoreboard aid 
you as a quick reference when encountering new code that deals with the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
796 
synchronization object, but later changes to the codebase can be checked against 
your summary to ensure that the object is used correctly. 
Lock Matching 
Another effective tool for auditing synchronization objects is lock matching. Lock 
matching is simply the process of checking synchronization objects to ensure that 
for every lock on an object, there's no path where a corresponding unlock can't occur. 
Obviously, this technique is applicable only to a subset of objectsthose that require 
signaling after they have been waited on. So this technique would be applicable 
primarily to semaphores and mutexes. If a path is found where a wait doesn't have a 
complementary signal on the same object, deadlock could occur. 
Note 
If a thread exits in Windows while owning an object, the system normally allows 
another waiting thread to take ownership of the object. However, if the thread does 
not exit cleanlynormally a result of a TerminateThread() callthe objects are not 
properly released and deadlock can occur. 
A simple example helps demonstrate lock matching in action: 
struct element *queue; 
HANDLE hMutex; 
int fd; 
int networkThread(void) 
{ 
    struct element *elem; 
    for(;;) 
    { 
        elem = read_request(fd); 
        WaitForSingleObject(hMutex, INFINITY); 
        add_to_queue(queue, elem); 
        ReleaseMutex(hMutex); 
    } 
    return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
797 
int processThread(void) 
{ 
    struct element *elem; 
    for(;;) 
    { 
        WaitForSingleObject(hMutex); 
        elem = remove_from_queue(queue); 
        if(elem == NULL) // nothing in queue 
            continue; 
        ReleaseMutex(hMutex); 
        process_element(elem); 
    } 
    return 0; 
} 
The processThread() function contains a path where hMutex isn't signaled after it's 
waited on. If elem is NULL when processThread() runs, it jumps back to the top of the 
for loop, failing to call ReleaseMutex(). The next call to WaitForSingleObject() doesn't 
cause this process deadlock, however, because the calling thread owns the mutex. 
Instead, it prevents the number of release calls from ever being equal to the number 
of wait calls. This means no other process or thread can ever acquire this mutex 
because the calling thread never releases it. 
Be aware when performing lock matching checks to ensure that nonobvious paths 
don't exist where an object might never be released. For example, can a signal 
interrupt a thread that holds a lock and then reenter the program at some other 
point? 
7.9.4 Signals 
UNIX programs often interact with their environment and other programs through the 
use of signals. Signals are software interrupts that the kernel raises in a process at 
the behest of other processes, or as a reaction to events that occur in the kernel. 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
798 
The Windows POSIX subsystem is capable of dealing with signals as well, but they are 
primarily a UNIX feature. 
Each process defines how to handle its incoming signals by choosing to associate one 
of the following actions with a signal: 
Ignoring the signal A process can ignore a signal by informing the kernel that 
it wants to ignore the signal. Two signals can't be ignored: SIGKILL and 
SIGSTOP. SIGKILL always kills a process, and SIGSTOP always stops a process. 
Blocking the signal A process can postpone handling a signal by blocking it, in 
which case the signal is postponed until the process unblocks it. As with 
blocking, the SIGKILL and SIGSTOP signals can't be blocked. 
Installing a signal handler A process can install a signal handler, which is a 
function called when a signal is delivered. This function is called completely 
asynchronously: When a signal is delivered, the execution context of a process 
is suspended, and a new one is created where execution starts in the 
designated signal handler function. When that handler returns, execution 
resumes where it left off. 
If a process doesn't indicate specifically how it deals with a particular signal, then a 
default action will be taken. Table 13-2 lists the signals provided by a typical 
POSIX-compliant implementation and the default actions associated with those 
signals. This table is taken from the Linux signal(7) man page. 
Table 13-2. Signals and Their Default Actions 
Signal 
Number 
Signal 
Name 
Meaning 
Default Action 
1 
SIGHUP 
Hang up from controlling terminal 
Terminate 
2 
SIGINT 
Interrupt 
Terminate 
3 
SIGQUIT 
Quit 
Core dump 
4 
SIGILL 
Illegal instruction 
Core dump 
5 
SIGTRAP 
Software trap 
Core dump 
6 
SIGABRT 
Abort 
Core dump 
7 
SIGEMT 
EMT instruction 
Terminate 
8 
SIGFPE 
Floating point exception 
Core dump 
9 
SIGKILL 