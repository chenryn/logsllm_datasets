sence of failures) the processor behavior for at least one clock 
cycle.  Impact  of  these  errors  at  the  processor  boundaries  is 
further analyzed at application levels. Table 3 gives the  fail-
ure categories considered at the application level.
4
Fault Injector Framework 
A simulation-based fault injection framework was developed 
to  facilitate  experiments.  The  key  features  of  the  framework 
include  (i)  automation  of  the  injection  experiments  (using 
gate-level  circuit  descriptions),  (ii)  support  for  a  variety  of 
fault  models  (e.g.,  faults  in  logic,  and  in  registers),  and  (ii) 
automation of data collection and analysis (e.g., classification 
into outcome categories and computation of fault propagation 
paths). The framework is developed as a set of TCL and Perl 
scripts that extend Modelsim.  To direct automated operation, 
the user describes a fault injection experimental campaign (in 
a text file) by specifying (i) the number of faults to inject, (ii) 
the duration of an injected fault (for transient faults), (iii) the 
fault model (e.g., bit flip in the state of a flip-flop or bit flips 
in  the  output  signals),  (iv)  a  gate-level,  HDL  description  of 
the  studied  system,  (v)  an  HDL  test  bench  supplying  work-
load to the system, and (vi) additional parameters such as the 
simulation time and the clock frequency. 
Why  gate-level  injection.  The  soundness  of  a  fault  injection 
study  conducted  in  a  simulated  environment  depends  on  the 
fidelity with which the simulation captures, both in error-free 
and  erroneous  conditions.  A  fault  injection  simulation  con-
ducted at RTL (e.g., [5]) can only capture the effects of faults 
in  the  flip-flop  and  memory  elements;  it  does  not  provide 
enough detail about the actual implementation and the timing 
of  combinational  logic.  For  example,  our  preliminary  ex-
periments indicate that two gate-level implementations (based 
on carry-ripple adder and carry-look-ahead architecture) of an 
8 bit adder from the same RTL design, show remarkably dif-
ferent  fault  masking  in  the  combinational  logic  (67%  and 
41%, respectively). Therefore, to capture the effects of faults 
in  the  combinational  logic,  one  must  resort  to  a  gate-level 
simulation, since the resulting error behavior depends on the 
timing  and  the  topology  of  the  gate-level  circuit  representa-
tion.  Based  on  this  observation,  we  propose  the  following 
fault injection methodology: 
•
Implement  a  target  system  (i.e.,  synthesize,  place,  and 
route) on an FPGA device. 
•
•
Extract,  from  the  obtained  FPGA  implementation,  a 
gate-level  and  post  place-and-route  descriptions  of  the 
target system, annotated with timing information. In this 
way, the system timing behavior can be accurately mod-
eled since a logic gate delay is computed based on its ca-
pacitive load (depending on the fan-out and length of the 
interconnections).  
Verify  the  correctness  of  the  gate-level  description  by 
simulation and comparison with the behavior of an RTL 
description, if the latter is available. 
•
Use  the  gate-level  description  to  inject  faults  while  the 
target system is simulated to execute a representative ap-
plication. 
Although a gate-level simulation can guarantee a sound fault 
injection study, this approach incurs about an order of magni-
tude  slowdown  compared  to  RTL  simulation  (according  to 
our  measurements).  Solutions  have  been  proposed  to  speed-
up a circuit simulation by using FPGA-based hardware emu-
lation  [19].  However,  hardware  emulation  captures  a  system 
only from a functional perspective and, consequently, cannot 
be  used  to  study  the  effects  of  faults  in  the  combinational 
logic.  Even  in  the  case  of  errors  in  flip-flop  and  memory 
units, hardware emulation-based fault injection may result in 
some  inaccuracies  because  it  requires  the  addition  of  extra 
hardware  instrumentation  that  emulates  the  occurrence  of 
faults, which can change the system timing behavior. 
5
Results 
Analysis of the data from fault injection experiments leads to 
several important conclusions: 
• The  average  fault  manifestation  rate  is  4%  for  the  studied 
workloads  (for  transient  faults  in  combinational  logic  with 
duration  equal  to  the  clock  cycle  and  bit-flips  in  flip-flops). 
Many  of  the  faults  that  propagate  to  the  processor  interface 
may not be easy to contain as they originate from the proces-
sor’s  control  and  speculation  logic  (which  is  usually  unpro-
tected)  and  from  combinational  logic  (which  cannot  be  pro-
tected with generic technique, such as ECC). 
• Fault  sensitivity  of  the  combinational  logic  (4.2%  for  the 
fault duration of 60ns) is not negligible, even though this fig-
ure is 2.5 times smaller than the fault sensitivity of flip-flops 
(10.4%).  The  error  contribution  from  combinational  logic 
may  well  increase  with  growing  complexity  and  increased 
clock frequency of future generation processors [2] [5].  
• The  logic  of  control  and  speculation blocks  is  more  sensi-
tive  to  faults  than  that  of  the  execution  block  (4.4%,  12.8%, 
and 2.4%, respectively, with a fault duration of 60ns). While 
this result is somewhat dependent on the application, it indi-
cates that control and speculation logic should be consider as 
a significant source of potential errors and hence would need 
aggressive  protection.    One  can  expect  that  this  problem 
would worsen for speculation and control logic of more com-
plex microprocessors. 
• Analysis  of  the  error  impact  (crash,  fail  silent  data  viola-
tion,  incomplete  execution)  at  the  application  level  reveals 
that  majority  of  crashes  (45%)  and  fail-silence  violations 
(40%) originate from errors in the execution block. While the 
contribution of speculation and control blocks is smaller (the 
two  blocks  collectively  cause  about  34%  crashes  and  34% 
fail-silent violations), the percentage is high enough to justify 
the  need  for  mechanisms  to  contain  those  errors.  Even  more 
alarming  statistics  are  observed  in  the  case  of  application 
incomplete  execution,  where  69%  of  cases  are  due  to  errors 
in  speculation  (34%)  and  control  (35%)  blocks.  These  data 
show  the  need  for  processor-level  detection  to  contain  these 
errors. 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
Application 
Fault Duration 
Faults injected 
Fault manifested 
Bubble Sort 
Prime Number 
7 ns 
8324 
68 
15 ns 
14808 
205 
30 ns 
10196 
242 
60 ns 
25836 
1135 
30 ns 
12027 
250 
60 ns 
14816 
554 
Manifestation rate [%] 
0.8 +/- 0.2 
1.4 +/- 0.2  2.4 +/- 0.3  4.4 +/- 0.2  2.1 +/- 0.3  3.7 +/- 0.3 
Average error latency [cycles] 
7.6 
7 
7.1 
8.4 
16.6 
16.7 
Table 4: Manifestation rate at the processor interface as function of the fault duration 
Fault Duration
7 ns 
15 ns 
30 ns 
60 ns 
% of Total 
Sensitiv-
% of Total 
Sensitiv-
% of Total 
Sensitiv-
% of Total 
Sensitiv-
Errors 
ity 
Errors 
ity 
Errors 
ity 
Errors 
ity 
Combinational Logic 
86.80% 
0.70% 
86.30% 
1.20% 
90.90% 
2.20% 
93.10% 
4.20% 
Flip-flops 
13.20% 
3.70% 
13.70% 
6.30% 
9.10% 
7.30% 
6.90% 
10.40% 
Table 5: Breakdown of error contribution from combinational logic and flip-flops for Bubble Sort 
• The  combinational  logic  responsible  for  manipulating  data 
in the processor is highly fault-sensitive. For example, a fault 
in  Instruction  fetch  (in  our  design)  has  19%  and  8%  chance 
respectively, to manifest at the processor interface depending 
on  whether  a  fault  hits  combinational  logic  or  a  flip-flop. 
High  fault  sensitivity  is  observed  for  the  Bus  interface  unit,
which  shows  44%  (for  combinational  logic)  and  67%  (for 
flip-flops) likelihood of a fault to manifest outside the proces-
sor boundaries. 
5.1
Fault/Error Manifestation 
Table  4  summarizes  fault  injection  results  for  different  fault 
durations,  while  executing  the  Bubble  Sort  application.  The 
data  indicate  that  error  manifestation  rate  increases  from 
0.8% to 4.4% by varying the fault duration from 7ns to 60ns. 
Table  4  also  provides  the  average  error  latency  (in  terms  of 
clock  cycles)  defined  as  the  difference  between  the  time  in-
stant  of  the  fault  injection  and  the  time  when  the  error  is 
manifested  at  the  interface  of  the  processor.  The  latency  is 
about  7  cycles  for  shorter  fault  durations  (7ns  to  30ns)  and 
increases to about 8 cycles for a fault duration of 60ns. 
Results  for  30ns  and  60ns  fault  durations  while  executing  a 
Prime  Number  application  indicate  a  manifestation  rate 
slightly lower than Bubble Sort (3.7%) and a higher average 
fault latency (about 17 clock cycles). The longer fault latency 
is  due  to  the  fact  that  the  Prime  Number  application  uses 
processor  registers  to  store  temporary  values  and,  hence  ac-
cesses  memory  less  frequently  than  Bubble  Sort  application. 
As  a  result,  an  error  in  the  Prime  Number  program  can  be 
latent  in  the  processor  for  a  longer  time  before  affecting  the 
processor interface. 
5.2
Overall Error Contribution and Fault Sensitivity 
Table  5  provides  (i)  the  breakdown  of  manifested  errors  ac-
cording  to  type  of  injected  component—combinational  logic 
(LUTs and gates) and flip-flops, and (ii) error sensitivity as a 
ratio  between  the  manifested  errors  and  injected  faults  for  a 
given component type (i.e., combinational logic or flip-flops). 
If  the  injected  faults  are  distributed  between  the  combina-
tional  logic  and  flip-flops  according  to  their  overall  area  oc-
cupation,  a  vast  majority  (about  90%)  of  manifested  errors 
come  from  the  combinational  logic.  On  the  other  hand,  flip-
flops are much more sensitive to faults, e.g., 2.2% (for com-
binational  logic)  versus  7.3%  (for  flip-flops)  for  fault  dura-
tion of 30ns (half the clock cycle). 
Table  5  indicates  that  the  sensitivity  of  the  combinational 
logic increases with the duration of faults (0.7% and 4.2% for 
fault duration of 7ns and 60ns, respectively). Since the above 
numbers  are  dependent  on  the  ratio  between  fault  duration 
and  the  clock  frequency,  the  manifestation  rate  is  likely  to 
increase  with  increasing  processor  clock  frequencies  under 
the assumption that the fault  duration remains constant. This 
is  consistent  with  conclusions  in  [2]  predicting  significant 
increase in soft errors due to faults in combinational logic. 
Table  6  reports  a  breakdown  of  the  results  aggregating  the 
data  in  terms  of  the  functional  blocks  (each  block  includes 
several  functional  units,  see  Table  1)  comprising  the  DLX 
processor.  One  can  see  that  the  speculation  block  and  the 
control  block  are  more  sensitive  to  faults  than  the  execution 
block. These results confirm that a protection strategy should 
not  only  focus  on  the  errors  stemming  from  the  execution 
block,  but  it  should  also  consider  the  impact  of  faults  in 
speculation logic and in the instruction sequencing logic. The 
usual  statement,  “Speculation  is  fault  tolerant,”  [20]  is  not 
always true, since the logic that is in charge of controlling the 
speculation,  e.g.,  resolve  branch  or  force  the  rollback  of  the 
state, can misbehave and lead to application failures. 
5.3   Error  Contribution  and  Fault  Sensitivity  Break-up 
per Functional Unit 
Table  7  provides  (i)  the  breakdown  of  manifested  errors  per 
functional unit (defined as the percentage of total  number  of 
errors  coming  from  each  functional  unit),  (ii)  the  sensitivity 
of the combinational logic within a functional unit (defined as 
the  percentage  of  faults  injected  in  combinational  logic  be-
longing  to  a  given  functional  unit  that  result  in  errors),  (iii) 
the sensitivity of the flip-flops in a functional unit (defined as 
the  percentage  of  faults  injected  in  flip-flops  belonging  to  a 
given  functional  unit  that  result  in  errors),  and  (iv)  the  fault 
sensitivity of the functional unit (defined as the percentage of 
faults injected in a given functional unit that result in errors).  
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:13 UTC from IEEE Xplore.  Restrictions apply. 
Functional 
Unit
Execution 
Control 
Speculation 
Memory inter-
face 
7 ns 
15 ns 
30 ns 
60 ns 
Manifesta-
tion Rate 
[%]
0.3 
0.2 
0.0 
0.3 
Sensitivity 
[%]
0.5 
0.8 
1.0 
2.6 
Manifesta-
tion Rate 
[%]
0.4 
0.2 
0.2 
0.5 
Sensitivity 
[%]
0.6 
1.3 
4.0 
4.2 
Manifesta-
tion Rate 
[%]
0.8 
0.4 
0.3 
0.8 
Sensitivity 
[%]
1.3 
2.3 
6.5 
6.4 
Manifesta-
tion Rate 
Sensitivity 
[%]
[%]
1.5 
0.8 
0.6 
1.4 
2.4 
4.4 
12.8 
11.1 
Table 6: Error contribution and sensitivity of processor functional blocks for Bubble Sort 
Fault Du-
ration 
Functional 
Unit
Alu
Mdu 
Rf
Cu 
Bru
If
Lsu
Wb 
Biu
Rb 
Dp 
7 ns
15 ns
30 ns
60 ns
f
e
s
t
a
t
i
o
n
t
o
e
r
r
o