### Process and Nonce Handling

The type `nonce(I, J, M)` is designed to prevent nonces from being transmitted as cleartext over the network. As previously mentioned, only terms with the type `Un` can be sent in cleartext.

#### Symmetric and Asymmetric Encryption
Both `SYMMETRIC ENCRYPT` and `ASYMMETRIC ENCRYPT` rely on the judgment `A;Γ ⊢ {M1, ..., Mn}M0 : enc(f)`, which indicates that the ciphertext `{M1, ..., Mn}M0` can be encrypted by `A` under the typing environment `Γ` and the atomic effect `f`. The effect `f` can either be the empty effect or `run(A, I, M)`. This means that an encryption may signify the start of an authentication session, and the corresponding `run` must have been executed previously. The typing rules for `enc(f)` are detailed in Table 5 and discussed in Section 3.3.

#### Decryption
When decrypting a ciphertext, the highest types are assigned to the free variables based on the encryption rule that generated the ciphertext. These rules are mutually exclusive and univocally determine the highest types. In practice, finding these types is straightforward: all variables except those with tags `Claim?` and `Verif?` are given the type `Un`, while the tagged variables require the type `nonce(I, J, M)`, as described in Section 3.3. The environment `Γ_A` simulates the typing environment of the message originator, which may differ from `Γ` due to secret nonces cast to `Un` in SOPH/SOSH challenges (see Section 3.3 for more details).

### Typing Authentication

We continue our description of the typing rules by illustrating the typing of nonce handshakes. The authentication rules are listed in Table 5. In the following, `(cid:1)M` represents a sequence of terms, and the order of the terms in a ciphertext is immaterial. The notation `Γ ⊢ M1, ..., Mn : T` is a shorthand for `Γ ⊢ M1 : T, ..., Γ ⊢ Mn : T`.

#### POSH Nonce Handshake
In a POSH nonce handshake, `J` generates a fresh nonce `n` with type `Un` (using `NEW NAME`) and sends it over the network. `I` receives `n` and creates a ciphertext using `POSH REQUEST` to authenticate a message `M` with `J`. This ciphertext is then received by `J`, who authenticates `I` and `M` using `POSH COMMIT`.

#### POSH Request
The judgment allows the encryption of `{Id(Id), C(N), Auth(M), (cid:1)M}K`. The tag of `N`, which is the nonce received from the network, and the identity label `Id` change according to the type of `K`. If `K` is a long-term key shared with `J`, `I` can communicate that she is the claimant (tag `Claim`) or that `J` is the intended verifier (tag `Verif`). Since `K` is known only to `I` and `J`, these tags convey the same information: "I is the claimant and J is the intended verifier." If `K` is the private key of `I`, the intended verifier must be specified, as the identity of the claimant is implicit in the signature. The message to be authenticated is tagged with `Auth`. The encryption represents the start of an authentication session from `I` to `J`, so at least one occurrence of `run(I, J, M)` must be present in the typing effect. The judgment `Γ ⊢ (cid:1)M : Un` indicates that `M` is a tuple of untagged terms.

#### SOPH/SOSH Nonce Handshake
`J` can initiate a SOPH/SOSH nonce handshake with `I` to authenticate `M` by generating a fresh nonce `n` with type `nonce(I, J, M)` using `NEW SECRET NONCE` (Table 4). The nonce is then encrypted by `SOPH/SOSH INQUIRY` and sent to `I`. The ciphertext is used to ask `I` if she agrees on `M` and is willing to authenticate with `J`. When `I` receives the ciphertext, she can confirm the request by sending back the nonce either as cleartext or re-encrypted. In this case, the type of the nonce is cast to `Un` by `SOPH/SOSH CONFIRM`. When `J` receives the nonce, he authenticates `I` and `M` using `SOPH/SOSH COMMIT`.

#### SOPH/SOSH Inquiry
This rule allows one entity to encrypt the secret nonce in messages of the form `{Id(Id), C(n), Auth(M), (cid:1)M}K`, where `K` is either the public key of `I` or a long-term key shared with `J`. The tags used here are similar to `POSH REQUEST`, but the tag of the nonce is interrogative, as the ciphertext is used to ask `I` if she agrees on `M` and is willing to authenticate with `J`. This tagging disambiguates whether the ciphertext is used as a challenge (as in SOPH/SOSH) or a response (as in POSH).

### POSH Commit
After receiving the described ciphertext and verifying the freshness of `n`, `J` accepts the authentication request from `I` and authenticates `M`. The check of `n` is formalized by removing the atomic effect `fresh(n)`, which was added by `NEW NAME`. This ensures that `n` is not checked again.

### SOPH/SOSH Confirm
`I` can confirm her willingness to authenticate `M` with `J` by publishing the nonce `a` just received. As mentioned, only terms with type `Un` can be sent as cleartext on the network. The rule casts the type of `a` from `nonce(I, J, M)` to `Un` while asserting the corresponding `run`.

### SOPH/SOSH Commit
When `J` receives the nonce `n` back, either as cleartext or as ciphertext, and checks its freshness, he authenticates `I` and `M`. Removing `fresh(n, I, J, M)` from the final effect formalizes the linearity of the nonce-check.

### Run-Time Typing Rules
The typing rules in Table 6 are not used for static analysis but are required to prove that types are preserved at run-time.

#### Trusted and Untrusted Ciphertexts
These rules assign the type `Un` to ciphertexts, allowing trusted principals to freely send and receive them. Ciphertexts created by a trusted principal `I` are regulated by the typing judgment `I;Γ ⊢ {M1, ..., Mn} : enc(f)`, while those created by the enemy are regulated by the ρ-spi calculus semantics. The sub-typing rule `SECRET NONCE` addresses issues where a variable with type `nonce(A, B, M)` might be substituted by a term with type `Un` at run-time.

### Safety Theorem
Our main result states that if a process can be typed with an empty effect and an empty typing environment, then every trace generated by that process is safe.

**Theorem 1 (Safety):** If `ε ⊢ P : []`, then `P` is safe.

Interestingly, our analysis is strongly compositional, as stated by the following theorem. Let `keys(k1, ..., kn)` denote a sequence of key declarations.