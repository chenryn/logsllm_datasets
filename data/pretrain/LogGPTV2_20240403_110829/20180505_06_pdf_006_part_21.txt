database procedures or within the application DAL itself.
SELECT
pg_terminate_backend(blocking_locks.pid)
FROM pg_catalog.pg_locks AS blocked_locks
JOIN pg_catalog.pg_stat_activity AS
blocked_activity
ON blocked_activity.pid =
blocked_locks.pid
JOIN pg_catalog.pg_locks AS blocking_locks
ON blocking_locks.locktype =
blocked_locks.locktype
AND blocking_locks.DATABASE IS NOT
DISTINCT FROM blocked_locks.DATABASE
AND blocking_locks.relation IS NOT
DISTINCT FROM blocked_locks.relation
AND blocking_locks.page IS NOT
DISTINCT FROM blocked_locks.page
AND blocking_locks.tuple IS NOT
DISTINCT FROM blocked_locks.tuple
AND blocking_locks.virtualxid IS NOT
DISTINCT FROM blocked_locks.virtualxid
AND blocking_locks.transactionid IS
NOT DISTINCT FROM
blocked_locks.transactionid
AND blocking_locks.classid IS NOT
DISTINCT FROM blocked_locks.classid
257
Oracle Resource Manager Amazon Aurora Instances
AND blocking_locks.objid IS NOT
DISTINCT FROM blocked_locks.objid
AND blocking_locks.objsubid IS NOT
DISTINCT FROM blocked_locks.objsubid
AND blocking_locks.pid !=
blocked_locks.pid
JOIN pg_catalog.pg_stat_activity AS
blocking_activity
ON blocking_activity.pid =
blocking_locks.pid
WHERE NOT blocked_locks.granted and
blocked_activity.state_change  show con_name
CON_NAME
------------------------------
CDB$ROOT
SQL> CREATE ROLE c##common_role;
Role created.
268
2. Create a local role:
SQL> show con_name
CON_NAME
------------------------------
ORCLPDB
SQL> CREATE ROLE local_role;
Role created.
3. Grant privileges and roles to the database role.
local_role
GRANT RESOURCE, ALTER SYSTEM, SELECT ANY DICTIONARY TO local_role;
Any database user to which the role will be granted, will now hold all privileges that
local_role
were granted to the role.
4. Revoke privileges and roles from the database role:
local_role
REVOKE RESOURCE, ALTER SYSTEM, SELECT ANY DICTIONARY FROM local_role;
For additional details:
https://docs.oracle.com/database/121/DBSEG/authorization.htm
https://docs.oracle.com/database/121/DBSEG/authorization.htm
269
Migration to: PostgreSQL Roles
[Back to TOC]
Overview
In PostgreSQL, roles without login permissions are similar to database roles in Oracle. PostgreSQL roles are
most similar to common roles in Oracle 12c as they are global in scope for all the databases in the instance.
• Roles are defined at the database cluster level and are valid in all databases in the PostgreSQL
cluster. In terms of database scope, roles in PostgreSQL can be compared to common roles in
Oracle 12c as they are global for all the databases and are not created in the individual scope of
each database.
• The command in PostgreSQL is an alias for the command with
CREATE USER CREATE ROLE
one important difference: when using command, it automatically adds
CREATE USER LOGIN
so the role can access to the database as a “database user”. As such, for creating PostgreSQL
roles that are similar in function to Oracle roles, be sure to use the command.
CREATE ROLE
Example
Create a new database role called that will allow users (to which the role is assigned) to create
myrole1
new databases in the PostgreSQL cluster. Note that this role will not be able to login to the database and act
as a “database user”. In addition, grant , and privileges on the
SELECT INSERT DELETE hr.employees