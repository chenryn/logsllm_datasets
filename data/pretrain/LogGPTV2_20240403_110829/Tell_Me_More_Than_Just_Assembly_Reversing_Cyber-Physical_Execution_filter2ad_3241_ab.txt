(cid:2)(cid:26)(cid:22)(cid:29)(cid:32)(cid:24)(cid:34)(cid:23)(cid:27)(cid:33)
(cid:9)(cid:24)(cid:22)(cid:23)(cid:41)(cid:11)(cid:20)(cid:36)(cid:20)(cid:26)(cid:1)(cid:2)(cid:26)(cid:22)(cid:29)(cid:32)(cid:24)(cid:34)(cid:23)(cid:27)(cid:24)(cid:18)(cid:1)(cid:3)(cid:26)(cid:29)(cid:18)(cid:25)(cid:1)(cid:5)(cid:24)(cid:16)(cid:22)(cid:32)(cid:16)(cid:27)(cid:1)(cid:42)(cid:14)(cid:24)(cid:27)(cid:35)(cid:26)(cid:24)(cid:28)(cid:25)(cid:43)
(cid:2)(cid:26)(cid:22)(cid:29)(cid:32)(cid:24)(cid:34)(cid:23)(cid:27)(cid:24)(cid:18)(cid:1)(cid:12)(cid:16)(cid:34)(cid:23)(cid:20)(cid:27)(cid:16)(cid:34)(cid:24)(cid:18)(cid:16)(cid:26)(cid:1)
(cid:2)(cid:17)(cid:33)(cid:34)(cid:32)(cid:16)(cid:18)(cid:34)(cid:1)(cid:14)(cid:39)(cid:28)(cid:34)(cid:16)(cid:38)(cid:1)(cid:15)(cid:32)(cid:20)(cid:20)(cid:33)
Fig. 1: Overview of MISMO Framework.
(cid:7)(cid:29)(cid:32)(cid:27)(cid:16)(cid:26)(cid:1)(cid:14)(cid:39)(cid:27)(cid:17)(cid:29)(cid:26)(cid:24)(cid:18)(cid:1)
(cid:6)(cid:31)(cid:35)(cid:24)(cid:36)(cid:16)(cid:26)(cid:20)(cid:28)(cid:18)(cid:20)(cid:1)(cid:4)(cid:23)(cid:20)(cid:18)(cid:25)
(cid:2)(cid:28)(cid:28)(cid:29)(cid:34)(cid:16)(cid:34)(cid:20)(cid:19)(cid:1)
(cid:5)(cid:24)(cid:33)(cid:16)(cid:33)(cid:33)(cid:20)(cid:27)(cid:17)(cid:26)(cid:39)
Once MISMO has identiﬁed both the main control loop
and the inputs to the embedded ﬁrmware binary, dynamic
taint analysis can be used to establish which registers and
areas of memory related to the program are affected by each
sensor input value. Given the execution traces of the ﬁrmware,
we also have access to all functions calls during each scan
cycle. MISMO keeps track of the tainted data propagation
from source to sink during the embedded controller execution.
Out of the whole trace, MISMO identiﬁes the subroutine(s)
that implements the control algorithm and performs value-
changing arithmetic (ﬂoating point) operations on the tainted
data. As a result, irrelevant functions will be excluded from
further analysis. For instance, MISMO ignores a function
call that does not perform any arithmetic operations (value
modiﬁcations) and only moves data around in the memory
such as fetching data from the controller’s sensor/actuation
GPIO ports. Such a function may be required for low-level
execution of the software, but does not contribute to high-level
control algorithmic parameter value manipulation operations.
B. Control Flow Graph Reﬁnement
Once MISMO has established a candidate set of functions
for the control algorithm, it focuses the following analyses on
the identiﬁed few functions only. MISMO performs symbolic
execution of the function binary code to generate concrete
input test cases for each feasible execution path. However,
generating test cases for all paths for each candidate function
may be infeasible due to the well-known scalability issues
with symbolic execution. Furthermore, some paths may not be
relevant to the core of the associated control algorithm. For in-
stance, in our experiments with commercial ﬁrmware samples,
we observed a large portion of paths perform input validation
or exception handling. These paths include almost no value-
changing arithmetic instructions, which are used heavily by
the relevant paths that implement the core control algorithm.
We utilize the aforementioned feature (density of arithmetic
operations/instructions as they constitute a major portion of the
control algorithm implementations) to distinguish and prune
such irrelevant paths.
To further narrow down symbolic execution’s search space
to relevant execution paths only, we obtain the control ﬂow
graphs of the identiﬁed candidate functions. MISMO performs
static analysis of the CFG’s execution paths and measures how
likely each CFG path represents a control ﬂow (sequence of
operations) within the high-level control algorithm description.
This similarity checking has to consider the semantic gap be-
tween the low-level binary execution paths and the high-level
control algorithm descriptions. MISMO does so by utilizing
the density and types of arithmetic operations as the metrics.
The ultimate identiﬁed set of relevant execution paths are
represented as a smaller CFG, where the set of vertices and
edges is a subset of those in the original function CFG.
The number of branches in the high-level control algorithm
ﬂowchart (also referred to as CFG in this paper) has to be
equal to the number of branches in the low-level function
binary’s pruned CFG. In reality, however, a CFG of a control
algorithm implementation typically has a greater number of
branches than the high-level CFG (ﬂowchart) of the associ-
ated algorithm expression due to modiﬁcations unique to the
environment in which the algorithm was implemented. For
instance, there may be more comparison instructions in the
binary if there are limitations on the values or different variable
assignments for different contexts. That being said, if the two
CFG’s do indeed have the same number of branches, it will be
an indication of high similarity. However, a comparison solely
based on the number of branches is clearly not sufﬁcient in
most cases.
MISMO leverages domain-speciﬁc features particular to
embedded IoT ﬁrmware implementations. During the design
process, we noticed that control algorithm implementations
typically use ﬂoating point operations as the sensor read-
ings are noisy numeric values. Additionally, the implemen-
tations often have a signiﬁcant amount of error checking
on the input parameter values without performing arithmetic
value-changing operations. Common comparison instructions
include ’VCMP.F32’,
’VCMPE.F32’, and
’VCMPE.F64’. This leads to several CFG paths that bypass
the algorithm’s core set of instructions and directly jump to
the ﬁnal returning basic block. MISMO uses a lower bound
threshold of the number of arithmetic instructions that are
required to implement the control algorithm. Any CFG path
that contains a smaller number of arithmetic operations is
excluded from MISMO’s following analyses.
’VCMP.F64’,
The aforementioned threshold varies signiﬁcantly for dif-
ferent control algorithms based on their size and level of
complexity. We calculate the threshold value for each control
algorithm by generating a parametric expression of the control
algorithm’s output based on its inputs. As a trivial example, if
the control algorithm involves calculating a weighted average
of the two sensor readings s1 and s2, the calculated parametric
352
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
3
3
s1+s1+s2
expression would be 2∗s1+s2
. However, an algorithm may
calculate the output as
, i.e., without multiplication.
Hence, we use a SMT solver to simplify all arithmetic
operations down to a canonical minimum-sized form, i.e.,
2∗s1+s2
in the example above. The threshold is calculated
as the number of the arithmetic operations in the simpliﬁed
expression. Using the threshold, MISMO guarantees that a
CFG path that bypasses the core set of arithmetic operations
will not be considered.
3
C. Symbolic Controller Abstraction
Once the candidate function CFG is pruned, we perform ex-
haustive analyses on the resulting (much smaller) reﬁned CFG.
MISMO implements symbolic execution to compute symbolic
expressions for the function’s output variables that would be
sent to the actuators during the ﬁrmware normal execution.
The output values calculated by the control algorithm function
are written to the controller’s actuator-connected (often GPIO)
ports by other subroutines in the ﬁrmware.
MISMO needs to ﬁrst locate the control algorithm function’s
output variable to calculate and report its symbolic value.
This is needed, because we use the symbolic value of the
controller function output variable to compare and match with
the high-level control algorithm ﬂowchart’s parametric output.
The outcomes of this analysis will enable us to map low-level
controller function code/data segments to high-level control al-
gorithm logic/parameters (discussed later in Subsection III-D).
Identifying the relevant output variables of the controller
function is not straightforward as a function may return the
output value in a variety of ways, e.g., the output variable
may be a reference parameter, a global variable, or a value
that is directly returned by the function. We utilize MISMO’s
dynamic data ﬂow analysis (Subsection III-A) of the controller
ﬁrmware’s execution trace to identify the controller function’s
output variable. Speciﬁcally, MISMO focuses on the controller
algorithm function execution trace. It determines the memory
address or register that stores the function’s calculated val-
ues right after the last value-changing arithmetic instruction.
MISMO marks the determined memory address or register as
the function’s output.
MISMO’s objective is to perform symbolic execution of the
reﬁned function CFG and calculate the symbolic value of the
output variable. The value should represent the symbolic value
of the actuation command (output) based on the symbolic
sensor readings (inputs). MISMO needs to identify relevant
inputs to the controller function. This is needed to enable
symbolic execution, which requires to identify a set of input
variables to be associated with symbols.
Trivial solutions like marking the function arguments as in-
puts would not work in IoT binaries for the following reasons:
i) the controller functions sometimes leverage other sources
as inputs such as global variables. ii) some of the function
inputs, even though necessary for the binary’s execution, are
not relevant to the core control algorithm. Hence, our objective
is to identify only the input variables that affect the values of
our identiﬁed output variables. iii) function arguments may
be data types or structures that do not have a ﬁxed size,
which is needed for scalable generation of symbolic values. iv)
controller function arguments often leverage pointers to sensor
reading data blocks (implemented as structures/objects in the
ﬁrmware) that cannot be marked as symbolic input directly
for symbolic execution;
instead the corresponding pointed
memory regions should be labeled symbolic.
To identify the relevant inputs to the controller function,
we use a slightly modiﬁed backward slicing analysis. In our
experiments, conventional backward dynamic taint analysis led
to over-tainting and was not helpful for accurate identiﬁcation
of the function inputs. More speciﬁcally, dynamic backward
taint analysis of the binary often resulted in many additional
unnecessary memory variables, as tainted, that were irrelevant
to the core mathematical embedded IoT control algorithm, e.g.,
a ﬁle descriptor pointer used for event logging.
We want to identify the the relevant numeric inputs to the
controller function that correspond to the input parameters
in the control algorithm’s high-level mathematical ﬂowchart.
MISMO uses a slightly modiﬁed backward slicing that exploits
a domain-speciﬁc fact the IoT control algorithms mainly deal
with numerical sensor inputs and variables (e.g., double or
ﬂoat data types as opposed to strings and characters). MISMO’s
backward analysis considers memory taints coupled with their
data values. Starting from the output variable, MISMO discov-
ers all associated inputs that contribute to the output value
numerically through arithmetic instructions, e.g., VADD.F64
and VMUL.F64. In other words, the inputs whose values
have been used arithmetically to calculate the output values
are selected only and marked as symbolic. The remaining
controller function inputs are represented with the concrete
values in the MISMO’s symbolic execution of the function.
MISMO executes the controller function symbolically, and
calculates the symbolic expressions of the identiﬁed controller
function output variables. By design, all
the non-concrete
entries of the expression originate from sensor readings and
the control algorithm parameters.
The calculated symbolic expression may ’look’ differ-
implementations (IoT devices) of the
ent across different
same theoretical control algorithm (e.g.,
implemented as
cntrlr(i){return 2 × i; } or without multiplication as
cntrlr(i){return i + i; }). MISMO utilizes SMT solvers
to simplify and turn the calculated symbolic expression into
its minimal and unique canonical form that is mathemati-
cally equivalent
to the original expression. This canonical
symbolic expression is essentially the arithmetic summary of
the controller function in the IoT device ﬁrmware. The next
subsection will use this expression to map its operations with
the control algorithm’s high-level ﬂowchart logic.
D. Abstract Syntax Tree Mapping
To map the low-level ﬁrmware binary’s code/data segments
with the high-level control algorithm semantics, we compare
and match their abstract syntax tree (AST) representations.
MISMO computes the AST representations of the high-level
control algorithm (referred to as the high-level AST) as well
as the aforementioned canonical symbolic expression of the
controller function (referred to as the low-level AST).
MISMO’s objective is to map the individual nodes of the
low-level AST to their counterparts in the high-level AST.
MISMO accomplishes this in two steps. During the ﬁrst step
(which is more lightweight), it tries to map the nodes/subtrees
353
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:51:23 UTC from IEEE Xplore.  Restrictions apply. 
of two ASTs based on the tree structure and using a recursive
graph-theoretic isomorphism check. Consequently, some nodes
from the low-level AST may each be mapped to more than
one node in the high-level AST. To resolve such cases, MISMO
utilizes formal satisﬁability checking to precisely ﬁnd the
unique maps via comparing the subtree contents and their
arithmetic representations from the two ASTs.
MISMO ﬁrst checks whether the two AST roots have the
same arithmetic opcode. If the root opcode is the same, the
roots’ degree (the number of children nodes) is compared.
If both have the same degree, every child pair from the
two ASTs is investigated. For each given pair of children
nodes, the following cases may arise: i) if they store the same
arithmetic opcodes, their corresponding subtrees are compared
recursively; ii) if they store different opcodes, their subtrees
are not investigated further; iii) if one node stores an arithmetic
opcode, while the other node stores a symbol or a concrete
value, the case is discarded; iv) if they store equal concrete
values, their subtrees are compared recursively; v) if they store
different concrete values, the case is discarded; vi) if they store
two symbols, or a symbol and concrete value, the subtrees are
compared recursively.
The aforementioned comparison mainly exploits the struc-
ture of the AST trees and compares the ASTs based on
individual node contents. If the recursive procedure above can
uniquely map the two ASTs, MISMO reports the node-node
mappings. Otherwise, it performs a more in-depth analysis
to resolve the one-to-many node mappings. The analysis uses
formal SMT satisﬁability checks and compares ASTs based on
the whole subtree contents recursively. We will see an example
of the one-to-many mapping in Section IV.
To resolve the potential non-unique mappings, we perform
a formal symbolic equivalence check between subtrees of
the two ASTs. Given the two ASTs for high-level algorithm
expression (ASThigh-level) and low-level binary symbolic
output expression (ASTlow-level), we construct a conjunctive
logical predicate for each candidate mapping. The predicate
is in the form P := [(ASThigh-level
) ∧
=
(AST
1
high-level
i
n
low-level represent
low-level)]. AST
AST
subtrees of the two abstract syntax trees for high-level algo-
rithm and binary implementation, respectively. If the predicate
is proved to be infeasible by the SMT solver, MISMO rejects
the mapping and investigates the remaining candidate map-
pings until the correct one is identiﬁed.
) ∧ · · · ∧( AST
n
high-level
i
high-level and AST
= AST
1
low-level
= ASTlow-level
IV. IMPLEMENTATION AND CASE-STUDY
As was done in previous works[38]2, MISMO utilizes the
QEMU emulator [9] and S2E [15] for its dynamic analysis
and symbolic execution procedures, respectively. MISMO uses
LIEF [40] to export the target functions and link them as
typically done for regular system libraries. This allows us
to focus our dynamic analyses on only relevant functions.
The ultimate prototype is implemented as an IDA Pro plugin
that integrates MISMO’s results. Currently, MISMO’s generic
design supports both x86 and ARM architectures.
To facilitate the understanding of our implementation de-
tails, we will provide an ongoing simple application on a
popular widely-used algorithm in cyber-physical and IoT con-
trol: the Kalman ﬁlter [13]. The Kalman ﬁlter is an optimal
estimation algorithm commonly used in embedded control
systems to estimate unknown variables of various physical
processes [4]. For instance, drones typically use Kalman ﬁlters
for the runtime location state estimation based on the sensor
measurements. For this case-study, we used the stripped binary
executable of the commercial 3DR Solo drone controller that
utilizes a Kalman ﬁlter3. The ﬁrst step of the algorithmic
semantic-matching reverse engineering process will be to
analyze the binary ﬁle in order to determine which subroutine
corresponds to the concrete implementation of the Kalman
ﬁlter. MISMO performs dynamic taint analysis to determine
the number of arithmetic instructions that are used by each
subroutine in the binary program. The resulting functions will
be considered as our candidate functions for the implementa-
tion of the control algorithm.
As mentioned previously, even though we have identiﬁed the
candidate function for the Kalman ﬁlter algorithm implementa-
tion, we still cannot directly compare the associated assembly
code to the high-level algorithm expressions. We ﬁrst need to
generate the symbolic expression for the function implemen-
tation in order to compare it to the associated symbolic AST
of the high-level embedded control algorithm. The next step
in the generating the symbolic expression is to choose a single
candidate execution path in the function’s CFG.
We deﬁne relevant execution paths as the ones in CFG
that implement the core control algorithm logic. All the other
paths are called irrelevant. Irrelevant paths are often caused
because of one of the following cases: i) Input validation
and exceptions - The target function may perform value-
consistency checking on some of the inputs (e.g., function
arguments or global variables). If the value is found out of
the range or undeﬁned, the function terminates execution by
returning the error. ii) Slight customizations - The concrete
ﬁrmware implementations may customize the control algo-
rithm (based on their use-case and domain needs) by adding
different status ﬂags. Each ﬂag represents a speciﬁc input value
combination for marginal cases (e.g., extraordinarily high or
low argument values). As the result, the function outputs a
default value from a lookup table if any of the predeﬁned
input combinations occur. iii) Intermediate algorithm vetting -
Most control algorithm implementations perform value vetting
of the intermediate parameter values several times between
the control algorithm logic. This is done to ensure the values
are in expected ranges and hence the execution time is
spent effectively. If the intermediate results are out of range,
the function replaces the intermediate value with the closest
normal value from a previously populated table. iv) Iteration