teiro, C. Palamidessi, and M. Yung, Eds. Springer Berlin Heidelberg, 2005, pp. 16–29.
[23] C. Cremers, “On the Protocol Composition Logic PCL,” in Proceedings of the 2008 ACM
Symposium on Information, Computer and Communications Security, ser. ASIACCS
’08. New York, NY, USA: ACM, 2008, pp. 66–76, event-place: Tokyo, Japan. [Online].
Available: http://doi.acm.org/10.1145/1368310.1368324
[24] S. C. Williams, “Analysis of the SSH Key Exchange Protocol,” in Cryptography and
Coding, ser. Lecture Notes in Computer Science, L. Chen, Ed. Springer Berlin Heidelberg,
2011, pp. 356–374.
58
[25] D. Cadé and B. Blanchet, “From Computationally-Proved Protocol Speciﬁcations to Im-
plementations and Application to SSH,” Journal of Wireless Mobile Networks, Ubiquitous
Computing, and Dependable Applications (JoWUA), vol. 4, no. 1, pp. 4–31, Mar. 2013.
[26] B. Blanchet, “CryptoVerif: A Computationally Sound Mechanized Prover for Crypto-
graphic Protocols,” in Dagstuhl seminar "Formal Protocol Veriﬁcation Applied", Oct.
2007.
[27] V. Cortier and S. Delaune, “A method for proving observational equivalence,” in 2009
22nd IEEE Computer Security Foundations Symposium.
IEEE, 2009, pp. 266–276.
[28] M. Arapinis, V. Cheval, and S. Delaune, “Verifying Privacy-Type Properties in a Modular
Way,” in 2012 IEEE 25th Computer Security Foundations Symposium, Jun. 2012, pp. 95–
109.
[29] K. G. Paterson, J. C. N. Schuldt, M. Stam, and S. Thomson, “On the Joint Security of
Encryption and Signature, Revisited,” in Advances in Cryptology – ASIACRYPT 2011,
ser. Lecture Notes in Computer Science, D. H. Lee and X. Wang, Eds. Springer Berlin
Heidelberg, 2011, pp. 161–178.
A Messages
Protocols and oracles produce messages depending on names, randomness and some crypto-
graphic primitives. We deﬁne here formally a syntax and a semantic for such messages.
A.1 Syntax of messages
We build terms over F a set of function symbols, which will represent the honest function
symbols (encryption symbol, decryption), a set of variables X (unknown terms), and a set of
names N , intended to denote respectively the secret and public names. Names may be sorted,
for instance to capture what is a secret key and what is a randomness.
Example A.1. We deﬁne F := {enc/3, dec/2} an encryption scheme, N = {k, r} a secret key,
a key and a randomness. Then, with mess an arbitrary term t1 = enc(mess, k, r) represents
the encryption of an arbitrary message, and dec(t1, k) represents its decryption.
A.2 Semantics of terms
We wish to describe protocols (i.e messages) as terms, whose interpretation must be ﬁxed and
deterministic. This allows us to obtain an interpretation, which is uniform, and we provide
this interpretation with explicit randomness.
Messages will thus be interpreted as deterministic PPT, which takes as inputs:
• ρs, a random tape for secret names (e.g secret keys)
• 1η, the security parameter
Let D be the set of such PPT, called messages.
A cryptographic library Mf is a mapping [[·]]Mf
that interprets the function symbols,
names and closed terms in the set of messages. The index Mf is omitted unless there is some
ambiguity, in order to avoid overloaded notations. [[·]]M is deﬁned as follows:
59
1. if n ∈ N , n is interpreted as the machine [[n]]M = An that on input (1η, ρs) extracts a
word of length η from the tape ρs. Diﬀerent names should extract disjoint parts of the
random tape.
2. if f ∈ F, then, with d1, ..., dn ∈ Dn a sequence of messages, [[f ]]M(d1, . . . , dn) is the
machine such that, on input (1η, ρs),
[[f ]]M(d1, . . . , dn)(1η, ρs) := Af (d1(1η, ρs, ρO), . . . , dn(1η, ρs))
Intuitively, we simply compose the machine, which represents f, with all the machines
representing its inputs. f can only be deterministic, any randomness must be explicitly
given as an argument.
Given an assignment σ of variables to messages in D, the random tape ρs, and a security
parameter η ∈ N, for each f ∈ F a Turing machine Af , the (evaluation of the) interpretation
of a term t is inductively deﬁned as follows:
ρs = Af ([[u]]η,σ
add Mf as an index of the semantic bracket if needed.
:= An(1η, ρs) if n ∈ N
ρs = (xσ)(1η, ρs, ) if x ∈ X
ρs ) if f ∈ F
• [[n]]η,σ
ρs
• [[x]]η,σ
• [[f (u)]]η,σ
Such an interpretation of terms of course depends on the functional model Mf: we may
On the contrary, if the parameters are clear from the context we may simply write [[]] for
, or provide with the relevant arguments only.
[[]]σ
ρs
Example A.2. Let us consider N = {sk, m, r} and F = {enc}. We may deﬁne Aenc as a TM
implementing some encryption function, and Ask as the TM which extracts the η ﬁrst bits of
ρs, and similarly for m and r with the following bits of ρs. In this cryptographic library, the
term enc(m, r, sk) will now be interpreted as the encryption of a random string by a random
string.
B Protocols
B.1 Protocol Algebra
The precise syntax of our process algebra is deﬁned in Figure 10.
B.2 Formal deﬁnition of a protocol execution
A protocol state is a pair ϕ, (P1, σ1)(cid:107)···(cid:107)(Pn, σn), where each Pi is a protocol, σi is an envi-
ronment binding variables to bit-strings (intuitively the attacker’s inputs), ϕ is a sequence of
bit-strings (intuitively the protocol outputs). The parallel operator is considered as associative
and commutative.
The semantics of elementary protocols assumes that, after an attacker input, the protocol
moves immediately as much as possible until it stops or waits for another input. Formally,
we deﬁne a relation −→ , that does not depend on the attacker, such that, for instance,
ρs ), P, σ. σ (cid:93) ν is deﬁned such that all previously deﬁned
φ, (out(c, t).P, σ) −→ φ (cid:93) (c, [[t]]η,σ
60
terms:
t
::= n
|
n(cid:126)i
|
x
|
f (t1, . . . , tn)
elementary protocols:
Pel
::= Pa
|
let x = t in Pel
|
in(c, x).Pel
|
out(c, m).Pel
|
if s = t then Pel else Pel
|
0
| ⊥
names
indexed names
variable
operation of arity n
an atomic protocol
variable binding
input
output
conditionals
protocols:
P, P (cid:48)
::= Pel
|
|
|
|
|
|
Pel; P
P(cid:107)P (cid:48)
(cid:107)i≤N P
(cid:107)iP
;i≤N Pel
;i Pel
sequential composition
parallel composition
parallel replication
unbounded replication
sequential replication
unbounded sequential replication
Figure 10: Protocol algebra
bindings in σ are overwritten by the ones in ν. In other words, in case of an output, we add to
the frame the interpretation of t, given the current assignment of its variables and a (secret)
random tape. We write
!−→ the reduction of a global state to its normal form w.r.t. −→ .
Given an adversary A, a sampling ρs of the names and a sampling ρr the attacker’s random
coins, for composed protocols, the operational semantics is given in Figure 11 and Figure 12
in the SOS style.
Note that a protocol with free variables may not be executed alone, but only in a context
where its variables have been deﬁned. Given P a protocol with free variables x1, . . . , xk
and n1, . . . , nk a sequence of names, we may write P (n1, . . . , nk) as a short cut for let x1 =
n1 in . . . let xk = nk in P (x1, . . . , xk).
n] is a protocol built over the protocol alge-
Deﬁnition 33 (Context). A context C[_
bra, where some elementary protocols are replaced with holes. Each hole _
can occur only
i
once in the context. Given the (elementary) protocols P1, . . . , Pn, C[P1, . . . , Pn] is then the
protocol obtained when replacing each hole by the corresponding protocol.
1, . . . , _
B.3 Formal deﬁnition of protocol oracles
Deﬁnition 34 (Protocol Oracle). A protocol oracle is deﬁned as the previous stateless oracles,
except that it has an additional history input, and only use w from its input (w, r, s). The
protocol oracle machines also have an additional history tape, that cannot be accessed by the
machine: it is only passed to the oracle, which also records the input queries on the history
61
Elementary protocols
ϕ, (if s = t then P else Q, σ) −→ ϕ, P, σ
ϕ, (if s = t then P else Q, σ) −→ ϕ, Q, σ
if [[s]]η,σ
ρs = [[t]]η,σ
ρs
if [[s]]η,σ
ρs
(cid:54)= [[t]]η,σ
ρs
ϕ, P, σ (cid:93) {x (cid:55)→ A(ρr, ϕ)} !−→ ϕ(cid:48), P (cid:48), σ(cid:48)
ϕ, in (c, x).P, σ −→A ϕ(cid:48), P (cid:48), σ(cid:48)
ϕ, out(c, s).P, σ −→ ϕ (cid:93) {[[s]]η,σ
ρs }, P, σ
ϕ, let x = t in P, σ −→ ϕ, P, σ (cid:93) {x (cid:55)→ [[t]]η,σ
ρs }
Sequential compositions
ϕ, P, σ !−→ ϕ(cid:48), P (cid:48), σ(cid:48)
ϕ, P, σ −→A ϕ(cid:48), P (cid:48), σ(cid:48)
ϕ, P, σ −→A ϕ(cid:48), P (cid:48), σ(cid:48)
ϕ, P ; Q, σ −→A ϕ(cid:48), P (cid:48); Q, σ(cid:48)
ϕ, 0; Q, σ −→A ϕ, Q, σ
ϕ,⊥; Q, σ −→A ϕ,⊥, σ
Variable bindings are passed
to Q when the preﬁx execu-
tion succeeds
Q cannot be executed when
the preﬁx execution fails
ϕ, ;i≤N P, σ −→A ϕ, P{i (cid:55)→ 1};··· ; P{i (cid:55)→ N}, σ
ϕ, ;i P, σ −→A ϕ, ;i≤A(ρr,ϕ) P, σ
Figure 11: Operational semantics of elementary protocols and sequential compositions
62
Protocols
ϕ, (0, σ)(cid:107)E −→A ϕ, E
Parallel processes are outside
of the scope of local bindings
ϕ, (⊥, σ)(cid:107)E −→A ϕ, E
ϕ, P, σ −→A ϕ(cid:48), P (cid:48), σ(cid:48)
ϕ, (P, σ)(cid:107)E −→A ϕ(cid:48), (P (cid:48), σ(cid:48))(cid:107)E
The interactions between a
process P and processes run-
ning in parallel are computed
by the attacker
ϕ, P(cid:107)Q, σ −→A ϕ, (P, σ)(cid:107)(Q, σ)
ϕ,(cid:107)i≤N P, σ −→A ϕ, P{i (cid:55)→ 1}(cid:107)···(cid:107)P{i (cid:55)→ N}, σ
ϕ, ((cid:107)iP )(cid:107)E, σ −→A ϕ, ((cid:107)i≤A(ρr,ϕ)P )(cid:107)E, σ
Figure 12: Operational Semantics of protocols
tape. We write AOP (ρs) for a protocol oracle Turing machine whose initial history tape is
empty and such that OP does not use the random tape ρO.
any number of oracles where each protocol oracle has a distinct additional history tape.
We may generalize in the natural way the deﬁnition of protocol oracle machines to support
We are now ready, given a protocol P , to deﬁne the protocol oracle OP .
Deﬁnition 35. Given a protocol P (which is action deterministic), a functional model Mf ,
a security parameter η ∈ N and a random tape ρs, OP is the protocol oracle, which, given ρs
and an history θ = {o1, ..., on} ∈ ({0, 1}∗)n, on a query m:
• appends m to the history tape;
• executes the protocol P according to the semantics, using as inputs the history;
• return the ﬁnal output produced by the protocol.
We extend the deﬁnition of PPTOM with:
• A protocol oracle input tape
• A protocol oracle history tape
• A protocol oracle output tape
The machine may call the protocol oracle OP by writing on its input tape some content
m, and there is then a single move to the current conﬁguration to a conﬁguration in which the
history tape has been extended with the content of the input tape, and the protocol oracle
output tape has been set to the output of OP (ρs, θ)(m).
63
We will often need to consider that we may have several protocol oracles for one PPTOM.
We thus deﬁne a way to compose together oracles and protocol oracles. Protocol oracles can
be merged together only if their respective protocols do not share input channels.
Deﬁnition 36. For any n and protocols P1, . . . , Pn such that ∀1 ≤ i  (ρs, θ) which on input query:
• check if its input is of the form query := (channel, mess);
• computes i such that channel ∈ C(Pi), and reject if there is no such i;
• computes θi the projection of its history such that θi = {(channel, mess) ∈ θ|channel ∈
C(Pi)};
• return the value of OPi(ρs, θi)(mess).
We will often write AOP1 ,...OPn (ω, ρr) for A(ω, ρr).
We may then use PPTOM with multiple oracles and multiple protocol oracles, written
AO1,...,Ok,OP1 ,...OPn (ω, ρr) for A,(ω, ρr).
C A case study : signed DDH
We apply our framework to the ISO 9798-3 protocol. It was proven UC composable in [13].
With our framework, it could be composed even with an oracle which uses the same long term
secret. We also note that our proof could be mechanized, as it is performed in a ﬁrst order
logic. With only one session and if we prioritise the outputs, there are three interleaving, with
corresponding frames φ3, ψ3 and χ3:
64
φ0 := pk(skI ), ga
φ1 := φ0, (pk(skR), gb, sign((g0(φ0), gb, g1(φ0)), skR))
φ2 := φ1, if checksign(g4(φ1), g2(φ1)) ∧ g3(φ1) = π2(getmess(g4(φ1))) then
if π1(getmess(g4(φ1))) = ga ∧ π3(getmess(g4(φ1))) = pk(skI ) then
φ3 := φ2, if checksign(g5(φ2), g1(φ0) ∧ g0(φ0) = π2(getmess(g5(φ2))) then
if π1(getmess(g5(φ2))) = gb ∧ π3(getmess(g5(φ2))) = pk(skR) then
sign((g3(φ1), ga, g2(φ1)), skI ), _
A
_
B.
ψ0 := φ0
ψ1 := ψ0, if checksign(g2(ψ0), g0(ψ0)) ∧ g1(ψ0) = π2(getmess(g2(ψ0))) then
if π1(getmess(g2(ψ0))) = ga ∧ π3(getmess(g2(ψ0))) = pk(skI ) then
sign((g1(ψ0), ga, g0(ψ0)), skI ), _
A
ψ2 := ψ1, (pk(skR), gb, sign((g3(ψ1), gb, g4(ψ1)), skR))
ψ3 := if checksign(g5(ψ2), g4(ψ1) ∧ g3(ψ1) = π2(getmess(g5(ψ2))) then
if π1(getmess(g5(ψ2))) = gb ∧ π3(getmess(g5(ψ2))) = pk(skR) then
_
B.
_
B.
χ0 := φ0
χ1 := χ0, (pk(skR), gb, sign((g0(χ0), gb, g1(χ0)), skR))
χ2 := if checksign(g2(χ1), g1(χ0) ∧ g0(χ0) = π2(getmess(g2(χ1))) then
if π1(getmess(g2(χ1))) = gb ∧ π3(getmess(g2(χ1))) = pk(skR) then
χ3 := χ2, if checksign(g5(χ2), g3(χ2)) ∧ g4(χ2) = π2(getmess(g5(χ2))) then
if π1(getmess(g5(χ2))) = ga ∧ π3(getmess(g5(χ2))) = pk(skI ) then
sign((g4(χ2), ga, g3(χ2)), skI ), _
A
C.1 Key exchange security
We show how to apply Corollary 1. We will use idI = skI, idR = skR, lsidI = ga and
lsidR = gb. Then, for any n we set s = a1, b1, . . . , an, bn. We deﬁne the functions:
We then set OKE = Osign
elements in s.
T I (m, s) := ∃ai ∈ s,∃A, A(cid:48)m = (A, gai, A(cid:48))
T R(m, s) := ∃bi ∈ s,∃A, A(cid:48)m = (A, gbi, A(cid:48))
T I ,skI ,s,Osign
T R,skR,s,Os, where Os simply reveals the exponents of the
I , _
I ](cid:107)I(bi, skR)[_
R].
We ﬁx KE(skI , skR, ai, bi)[_
We remark that proving at the end of the protocol that (kI , ga, olsid, oid) is indistinguish-
able to (k, ga, olsid, oid) is equivalent to proving that kI is indistinguishable from k, as the
other elements are public information.
R] = I(ai, skI )[_
To apply the Corollary, it remains to prove that:
1. ∀1 ≤ i ≤ N, (νai, idI , bi, idR.KE(skI , skR, ai, bi)[out(kI , gai, olsid, oid), out(kR, gbi, olsid, oid)]
is OKE simulatable)).
2. Ax is OKE sound.