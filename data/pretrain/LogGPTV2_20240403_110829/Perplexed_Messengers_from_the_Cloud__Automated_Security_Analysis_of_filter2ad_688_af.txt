### 6. Discussion

Upon running Seminal on our app collection, we identified tens of thousands of vulnerable applications. The presence of security risks within these apps was validated through a manual analysis of randomly selected samples. However, this does not imply that all these apps are exploitable. A successful attack on a known vulnerability often depends on other factors, such as the availability of message formats for message injection. In some cases, multiple flaws must be leveraged to execute an end-to-end attack. Given the large number of problematic apps discovered, it is impractical for us to exploit even a small portion of them within a short period. Therefore, while we did successfully break a few high-profile apps, the majority of the findings represent security risks in a strict sense. Nonetheless, all these issues are critical, making the affected apps significantly more exposed to security threats compared to those without such vulnerabilities.

The techniques we developed and the study we conducted represent only the first step toward effective protection of push-messaging services. Our analysis focused solely on the service integration between the app and the SDK. It remains unclear whether other security problems exist on the cloud front, which could be addressed through formal verification of the entire service. To achieve this, new techniques need to be developed to probe the cloud-side program logic and build a more accurate model. Additionally, the rapid evolution of messaging-service infrastructure necessitates continuous studies to identify and address new security-related features.

### 7. Conclusion

In this paper, we present the first large-scale, systematic security analysis of the integration of push-messaging services within Android apps. This study was conducted using Seminal, a new tool designed to automatically verify key security properties in such integrations. Seminal leverages unique features of push-messaging services, focusing on a small portion of the app code related to the integration. Running Seminal on 30 leading cloud-messaging services and over 35,173 popular apps, we found that more than half of the service SDKs, over 20% of Google Play apps, and more than 50% of apps from mainstream Chinese markets involve critical security risks (see Section 6). These risks allow adversaries to impersonate trusted parties, post content to the victim’s apps, and intercept private messages. Importantly, most of these flaws were previously unknown. Our findings highlight the seriousness of the problem, which requires significant effort to address, and our new technique marks the first step toward improving the security quality of this important mobile cloud service.

### 8. Acknowledgments

This project was supported in part by the National Science Foundation (CNS-1117106, 1223477, and 1223495). Authors from Peking University were also supported in part by the National Development and Reform Commission (NDRC) under the project "Guidelines for Protecting Personal Information." Kai Chen received partial support from NSFC (61100226).

### 9. References

[1] Android Platform Distribution. https://developer.android.com/about/dashboards/index.html.
[2] Baidu Cloud Push. http://developer.baidu.com/cloud/push.
[3] CVE-2012-6636. https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-6636.
[4] CVE-2014-6041. http://nvd.nist.gov/nvd.cfm?cvename=CVE-2014-6041.
[5] GCM Template Code. http://developer.android.com/google/gcm/c2dm.html.
[6] Getui. http://www.igetui.com/.
[7] JPush. https://www.jpush.cn/.
[8] Push Woosh. https://www.pushwoosh.com/.
[9] PushIO. http://www.responsys.com/marketing-cloud/products/push-IO.
[10] Soot. http://www.sable.mcgill.ca/soot/.
[11] Supplement materials. https://sites.google.com/site/perplexedmsg/.
[12] UrbanAirship. http://urbanairship.com/.

[13] D. Arp, M. Spreitzenbarth, M. Hübner, H. Gascon, K. Rieck, and C. Siemens. Drebin: Effective and explainable detection of Android malware in your pocket. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS), 2014.

[14] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, page 29. ACM, 2014.

[15] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services, pages 239–252. ACM, 2011.

[16] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An empirical study of cryptographic misuse in Android applications. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 73–84. ACM, 2013.

[17] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study of Android application security. In USENIX Security Symposium, 2011.

[18] W. Enck, M. Ongtang, P. D. McDaniel, et al. Understanding Android security. IEEE Security & Privacy, 7(1):50–57, 2009.

[19] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith. Why Eve and Mallory love Android: An analysis of Android SSL (in)security. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 50–61. ACM, 2012.

[20] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-delegation: Attacks and defenses. In USENIX Security Symposium, 2011.

[21] C. Gibler, J. Crussell, J. Erickson, and H. Chen. AndroidLeaks: Automatically detecting potential privacy leaks in Android applications on a large scale. Springer, 2012.

[22] M. I. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard. Information-flow analysis of Android applications in DroidSafe. In Proc. of the Network and Distributed System Security Symposium (NDSS). The Internet Society, 2015.

[23] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.

[24] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker: Scalable and accurate zero-day Android malware detection. In Proceedings of the 10th international conference on Mobile systems, applications, and services, pages 281–294. ACM, 2012.

[25] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection, and mitigation. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 66–77. ACM, 2014.

[26] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android taint flow analysis for app sets. In Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis, pages 1–6. ACM, 2014.

[27] L. Li, A. Bartel, T. F. D. A. Bissyande, J. Klein, Y. Le Traon, S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel. ICCTA: Detecting inter-component privacy leaks in Android apps. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering (ICSE 2015), 2015.

[28] T. Li, X. Zhou, L. Xing, Y. Lee, M. Naveed, X. Wang, and X. Han. Mayhem in the push clouds: Understanding and mitigating security hazards in mobile push-messaging services. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 978–989. ACM, 2014.

[29] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting Android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 229–240. ACM, 2012.

[30] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. Le Traon. Effective inter-component communication mapping in Android with EPICC: An essential step towards holistic security analysis. In USENIX Security 2013, 2013.

[31] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna. Execute this! Analyzing unsafe and malicious dynamic code loading in Android applications. In Proceedings of the 20th Annual Network & Distributed System Security Symposium (NDSS), 2014.

[32] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan. SMV-Hunter: Large scale, automated detection of SSL/TLS man-in-the-middle vulnerabilities in Android apps. In Proceedings of the 19th Network and Distributed System Security Symposium, 2014.

[33] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized origin crossing on mobile platforms: Threats and mitigation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 635–646. ACM, 2013.

[34] F. Wei, S. Roy, X. Ou, and Robby. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, CCS '14, pages 1329–1341, New York, NY, USA, 2014. ACM.

[35] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu. Effective real-time Android application auditing. In IEEE S&P, 2015.

[36] Z. Yang and M. Yang. LeakMiner: Detect information leakage on Android with static taint analysis. In Software Engineering (WCSE), 2012 Third World Congress on, pages 101–104. IEEE, 2012.

[37] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang. AppIntent: Analyzing sensitive data transmission in Android for privacy leakage detection. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1043–1054. ACM, 2013.

[38] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution in Android applications. In Proceedings of the 20th Annual Symposium on Network and Distributed System Security, 2013.

[39] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you, get off of my market: Detecting malicious apps in official and alternative Android markets. In NDSS, 2012.

### Appendix

#### Models and Security Properties

To analyze the security qualities of different push-messaging services, we first need to determine the security properties they are expected to have. In this section, we describe how we model these services and identify their necessary properties, with a focus on their integrations within apps. Understanding these integrations is a critical first step in evaluating the security quality of a push-messaging service, as prior research [28] clearly indicates that the weakest link in security protection is on the mobile device. Additionally, due to our limited visibility into what happens within the cloud (e.g., the program logic of the connection server), a comprehensive study of the entire service is challenging. Below, we describe the model and properties. All the information used here comes from the specifications of existing messaging services.

**Models.** The security goals of a push-messaging service can be described as follows:
1. A message \( m_u \) for a user \( u \) from an app server \( \text{appsrv} \) should only be pushed to \( u \) and no one else.
2. User \( u \) should only receive her own message \( m_u \) from the authorized server \( \text{appsrv} \) and not from an unauthorized party.

The security policies for achieving these goals need to be enforced by reference monitors distributed across different entities within the push-messaging service. Specifically, such a service can be modeled as \( \langle S, A, I \rangle \). Here, \( S \) is a set of states where a message or a service request is being processed by a service entity, such as the state of the app server (\( \text{appsrv} \)), connection server (\( \text{connsrv} \)), syndication server (\( \text{synsrv} \)), device-side service app (\( \text{client} \)), SDK (\( \text{sdk} \)), or app (\( \text{app} \)). \( A \) is a set of security-related actions that occur in a state. For example, \( A(\text{connsrv}) = (\text{sreceive}(i, \text{appsrv} \to \text{connsrv}), \text{check}(i), \text{ssend}(\text{convert}(i), \text{connsrv} \to \text{client})) \) models the operations performed by a connection server (at the \( \text{connsrv} \) state) given an input \( i \) from an app server: \( \text{sreceive} \) receives \( i \) from the network and authenticates its sender; \( \text{check} \) verifies \( i \) against a security policy that only allows an authorized sender (the one bound to the registration ID in \( i \)) to push a message to the ID; \( \text{convert} \) transforms \( i \) to \( i' \) by replacing the registration ID with the target device and app, and then \( \text{ssend} \) sends the input to the service app (across the network) through an authenticated secure channel, causing the system to move to the next state \( \text{client} \).

Finally, \( I \) is the collection of inputs to those states, where \( i \) is a concatenation of an identifier (\( \text{dev} \)), authentication tokens (e.g., \( \text{appid} \)), and a message (\( m \)).

**Figure 8: Manufacturer Push Service Security Model**

Using this simple model, Figure 8 illustrates the security checks expected when a message is pushed to the user through the manufacturer service. Specifically, for the manufacturer service, after the input \( i' = (\text{dev}, \text{appid}, m) \) is sent to the client, the service app continues to perform \( (\text{sreceive}(i', \text{connsrv} \to \text{client}), \text{sdsend}(i', \text{client} \to \text{app})) \), where \( \text{sdsend} \) passes a message on the device to another Android component through an authenticated secure channel. Intuitively, these actions include authenticating the connection server and sending \( i' \) to the target app. Then, the app further goes through \( (\text{sdreceive}(i', \text{client} \to \text{app}), \text{ucheck}(i', u)) \), where \( \text{sdreceive} \) verifies the sender on the same device, and \( \text{ucheck} \) inspects the user ID within \( i' \) against that of the current login user \( u \) to ensure she is the correct recipient. Note that such verification can only happen within the app because no other entities in the service can differentiate between two users sharing the same app on the same device, which, if not handled properly, can lead to serious security breaches (Section 4.1).

For a third-party service, the reference monitor on the connection server \( \text{connsrv} \) performs exactly the same operations as described above, except that \( \text{ssend} \) at \( \text{connsrv} \) sends \( i' \) directly to the SDK through a socket connection. Here, \( \text{ssend} \) uses the CID generated by the SDK during the registration process to establish a secure channel. In the state \( \text{sdk} \), actions \( (\text{sreceive}(i', \text{connsrv} \to \text{sdk}), \text{sdsend}(i', \text{sdk} \to \text{app})) \) are taken to pass \( i' \) securely to the app, which further checks the user information within the input (\( \text{ucheck} \)). When it comes to the syndication service, an additional state \( \text{synsrv} \) needs to be traversed during message pushing, where a function \( \text{sconvert} \) replaces the CID within \( i \) (from the app server) with the registration ID of a manufacturer cloud. On the device side, the client state moves to \( \text{sdk} \) before arriving at the app. Along the transitions, authentication needs to be performed at every state.

**Figure 8: Manufacturer Push Service Security Model**

```
+----------------+    +----------------+    +----------------+    +----------------+
|   appsrv       | -> |   connsrv      | -> |   client        | -> |   app           |
|                |    |                |    |                |    |                |
|  i = (m, regID)|    |sreceive(i, -> )|    |sreceive(i', -> )|    |sdreceive(i', ->)|
|                |    | check(i)       |    | sdsend(i', -> )|    | ucheck(i', u)  |
+----------------+    +----------------+    +----------------+    +----------------+
```

**Actions:**
- \( \text{ssend}/\text{sreceive} \): Secure Communication over Networks
- \( \text{sdsend}/\text{sdreceive} \): Secure Communication on Device
- \( \text{check} \): Security Policy Verification
- \( \text{ucheck} \): User ID Inspection

---

This revised version aims to improve clarity, coherence, and professionalism in the text.