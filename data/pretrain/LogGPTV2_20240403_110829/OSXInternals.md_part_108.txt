typedef unsigned long long memory_object_offset_t;
typedef unsigned long long memory_object_size_t;
// osfmk/mach/vm_types.h
typedef uint64_t vm_object_offset_t;
typedef uint64_t vm_object_size_t;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 134 of 135
Although the kernel's own virtual address space is 32-bit, the VM subsystem does run the processor in 64-
bit computation mode for mapping certain VM-related data structures.
The kernel defines ppnum_t, the data type for the physical page number, to be a 32-bit unsigned integer.
Consequently, there can be at most UINT32_MAX physical pages. For a page size of 4KB, this limits the
physical address space to 16TB.
8.18.2.3. Usage and Caveats
In Mac OS X 10.4, 64-bit support is limited to C and C++ programs that only link against the system
library (i.e., libSystem.dylib or System.framework),[27] which is available as a dual-architecture
library. Additionally, the Accelerate framework (Accelerate.framework) is available in both 32-bit and
64-bit versions. GCC 4.0.0 or higher is required to compile 64-bit programs.
[27] Certain operations in the 32-bit system library are optimized for the host processorthat is,
they make use of 64-bit hardware if it is available.
$ lipo -info /usr/lib/libSystem.dylib
Architectures in the fat file: /usr/lib/libSystem.dylib are: ppc ppc64
Key Mac OS X frameworks such as Carbon, Cocoa, Core Foundation, and the I/O Kit framework are 32-
bit-only. Both generic and Mac OS Xspecific migration issues must be dealt with while creating 64-bit
programs.
The 64-bit ABI has several differences from the 32-bit ABI, on which it is based. For example, 64-
bit integer parameters are passed in a single GPR. The Pthreads library uses GPR13 for thread-
specific data retrieved by pthread_self().
64-bit programs cannot use 32-bit libraries or plug-ins and vice versa. Specifically, 32-bit and 64-bit
code cannot be mixed in a single program, since the kernel tags an entire task as 32-bit or 64-bit.
64-bit programs cannot have native Mac OS X graphical user interfaces since the relevant
frameworks are not available in 64-bit versions.
Although 64-bit and 32-bit programs can share memory and can communicate with each other
through IPC, they must use explicit data types while doing so.
Programs that serialize binary data may want to ensure that the size and alignment of the serialized
data does not change between 32-bit and 64-bit programs, unless only one type of program will
access that data.
An I/O Kit driver's user client (see Chapter 10) cannot be used from a 64-bit program unless the
driver explicitly supports 64-bit user address spaces. A kernel extension can access physical
addresses above 4GB by using the IOMemoryDescriptor I/O Kit class.
The x86 version of Mac OS X 10.4 does not support 64-bit computing. As Apple adopts 64-bit x86
processors,[28] Mac OS X should regain 64-bit support. It is very likely that most, if not all, user libraries
will have 64-bit equivalents in future versions of Mac OS X.
[28] A likely first candidate is Intel's "Merom" 64-bit mobile processor.
8.18.3. Why Not to Use 64-bit Executables
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 135 of 135
Especially in Mac OS X, 64-bit programs are not necessarily "better" just by being 64-bit. In fact, typical
programs are likely to have poorer performance if compiled for 64-bit computing. The following are some
reasons against using 64-bit executables on Mac OS X.
The memory footprint of 64-bit programs is higher in general: They use larger pointers, stacks, and
data sets. This potentially leads to more cache and TLB misses.
64-bit software support in Mac OS X 10.4 is nascent. The interfaces that have migrated to 64-bit are
not mature, and most of the commonly used interfaces are still 32-bit.
As we discussed earlier, some of the usual reasons for moving to 64-bit computing are not very
compelling on the PowerPC.
Certain PowerPC nuances can slow down 64-bit execution. For example, if a 32-bit signed integer
is used as an array index, then, unless the integer is stored in a register, each access will require an
extra extsw instruction to sign-extend the value.
8.18.4. The 64-bit "Scene"
As Table 810 indicates, there exist several 64-bit operating systems. For example, 64-bit Solaris has a
fully 64-bit kernel with 64-bit drivers. Barring some obsolete libraries, Solaris system libraries have both
32-bit and 64-bit versions. Both types of applications can run concurrently. Similarly, the AIX 5L
operating system for 64-bit POWER hardware has a fully 64-bit kernel. Again, drivers and other kernel
extensions are also 64-bit, and both 32-bit and 64-bit user environments are supported concurrently. There
is also a 32-bit AIX 5L kernel that supports 64-bit applications on 64-bit hardware. However, the amount
of physical memory it can support is limited (96GB) as compared to the 64-bit kernel.
Standards and 64-bit
The Single UNIX Specification, Version 2 (UNIX 98) included large-file support and
removed architectural dependencies to allow 64-bit processing. APIs that were tied to 32-bit
data types were cleaned up. For example, several functions were made large-file-aware, using
off_t instead of size_t. Version 3 of the Single UNIX Specification (UNIX 03) revised,
combined, and updated several standards, including the POSIX standard.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 9. Interprocess Communication Page 1 of 153
Chapter 9. Interprocess Communication
Complex programs, even those that are moderately so, are usually broken down into logically and
functionally separate constituents, rather than being monolithic programs that do "everything." This
allows for easier development, maintenance, and flexibility, as well as better comprehensibility of
software. Although such division could be done in numerous ways, several of them formal and
standardized, one general outcome is that on a typical operating system, there might be multiple entities
performing related operations. Such entities often need to share information, synchronize, and otherwise
communicate with each other. This chapter explores several means of information sharing and
synchronizationinterprocess communicationin Mac OS X.
9.1. Introduction
Running even the most trivial C program on Mac OS X leads to the invocation of dozens of system callsas
the runtime environment loads it, prepares it for execution, and executes it. Consider this simple example.
// empty.c
main()
{
}
$ gcc -o empty empty.c
$ ktrace ./empty
$ kdump | grep CALL | wc -l
49
Although our trivial program has an empty user-visible body, it still needs to be prepared by dyld so that
the empty body can be executed. This preparation involves numerous steps, such as initializing Pthreads-
related and Mach-related data structures for the new program. For example, dyld invokes a Mach trap to
set the "self" value for the program's thread being run, initializes the special Mach ports in the application,
and reserves the zeroth page so that it may not be allocated by the program. Consequently, there is a
variety of communication between various bodies of user-space code and the kernel. Graphical interface
systems make heavy use of communication between their components and with the rest of the system.
Nontrivial applications might comprise multiple threadsperhaps even multiple processesthat may need to
communicate with each other in arbitrary ways, thus necessitating interfaces for such communication.
Often, processes that are not part of the same program must communicate with each other too. The Unix
command pipeline abstraction exemplifies such communication:
$ find . -type f | grep kernel | sort | head -5
It is worthwhile to question what qualifies as communication. In some cases, the line between
communication and information sharing may be blurred. The Mac OS X pbcopy command-line utility is a
Cocoa program that copies its standard output and places it in a pasteboard. It can handle ASCII data,
Encapsulated PostScript (EPS), Rich Text Format (RTF), Portable Document Format (PDF), and so on.
The pbpaste command removes data from a pasteboard and writes it to its standard output. These utilities
allow command-line programs to communicate in a copy-and-paste way with other command-line or
graphical programs. The following is a contrived (and expensive) way to print "Hello, World!" from the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 2 of 153
shell:
$ echo 'Hello, World!' | pbcopy
$ pbpaste
Hello, World!
For the purpose of this chapter, we understand interprocess communication (IPC) to be a well-defined
mechanismwith a programming interfacefor transferring information between two or more entities.
Historically, the communicating entities were processes, hence the term interprocess. Since the early days
of timesharing systems, a variety of computing resources have been associated with processes. IPC is also
a means of sharing these resources. As we saw in Chapter 7, a runnable entity can take many forms in
Mac OS X. Consequently, IPC can occur between any of these runnable entitiesfor example, threads in
the same task, threads in different tasks, and threads in the kernel.
Depending on the type of IPC, communicating parties may require some form of synchronization for the
IPC mechanism to operate correctly. For example, if multiple processes are sharing a file or a region of
memory, they must synchronize with each other to ensure that shared information is not being modified
and read simultaneously, as it could briefly be in an inconsistent state. In general, IPC might require and
may consist of one or more of the following operations:
Sharing of data
Transfer of data
Sharing of resources
Synchronization between IPC participants
Synchronous and asynchronous notifications
Control operations, such as a debugger shepherding a target process
The term IPC is often used synonymously with message passing, which could be thought of as one
specific (and rather popular) IPC mechanism.
9.1.1. The Evolution of IPC
Early IPC mechanisms used files as the communication medium: an approach that did not work well
owing to the slowness of disks and large windows for race conditions between programs. This was
followed by shared memory approaches, wherein processes used commonly accessible regions of memory
to implement ad hoc IPC and synchronization schemes. Eventually, IPC mechanisms became an
abstraction provided by the operating system itself.
MULTICS IPC
Michael J. Spier and Elliott I. Organick described a general-purpose IPC facility in their 1969
paper titled "The MULTICS Interprocess Communication Facility."[1] A MULTICS process
was defined as a "hardware-level" process whose address space was a collection of named
segments, each with defined access, and over which a single execution point was free to fetch
instructions and make data references. The MULTICS central supervisor program (the
kernel) ensured that at most one execution point was ever awarded to an address space. With
this definition of a process, MULTICS IPC was defined as an exchange of data
communications among cooperating processes. This was achieved by an exchange of
messages in a commonly accessible mailboxa shared database whose identity was known to
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 3 of 153
each IPC participant by common convention.
The MULTICS IPC facility was part of the central supervisor. It was one of the earliest
examples of a completely generalized, modular interface available to programmers.
[1] "The MULTICS Interprocess Communication Facility," by Michael J. Spier and Elliott I.
Organick. In Proceedings of the Second ACM Symposium on Operating Systems Principles
(Princeton, NJ: ACM, 1969, pp. 8391).
9.1.2. IPC in Mac OS X
Mac OS X provides a large number of IPC mechanisms, some with interfaces available at multiple layers
of the system. The following are examples of IPC mechanisms/interfaces in Mac OS X:
Mach IPCthe lowest-level IPC mechanism and the direct basis for many higher-level mechanisms
Mach exceptions
Unix signals
Unnamed pipes
Named pipes (fifos)
XSI/System V IPC
POSIX IPC
Distributed Objects
Apple Events
 Various interfaces for sending and receiving notifications, such as notify(3) and kqueue(2)
Core Foundation IPC mechanisms
Note that the term notification is context-dependent. For example, Mach can send notifications when a
Mach port is deleted or destroyed. The application environments provide interfaces for sending and
receiving intraprocess and interprocess notifications.
Each of these mechanisms has certain benefits, shortcomings, and caveats. A programmer could need to
use a particular mechanism, or perhaps even multiple mechanisms, based on the program's requirements
and the system layer for which it is being targeted.
In the rest of this chapter, we will look at these IPC mechanisms. Those that are common across several
platforms (such as System V IPC), and therefore abundantly documented elsewhere, will be discussed
only briefly.
An important IPC mechanism that we will not cover in this chapter is that provided by the ubiquitous
BSD sockets. Similarly, we will also not discuss the older OpenTransport API, a subset of which is
provided by Mac OS X as a compatibility library for legacy applications.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 4 of 153
Since IPC usually goes hand in hand with synchronization, we will also look at the important
synchronization mechanisms available on Mac OS X.
9.2. Mach IPC: An Overview
Mach provides a message-oriented, capability-based IPC facility that represents an evolution of similar
approaches used by Mach's precursors, namely, Accent and RIG. Mach's IPC implementation uses the
VM subsystem to efficiently transfer large amounts of data using copy-on-write optimizations. The Mac
OS X kernel uses the general message primitive provided by Mach's IPC interface as a low-level building
block. In particular, the Mach calls mach_msg() and mach_msg_overwrite() can be used for both
sending and receiving messages (in that order), allowing RPC[2]-style interaction as a special case of IPC.
This type of RPC is used for implementing several system services in Mac OS X.
[2] Remote procedure call.
A Portly Look Back
David C. Walden's 1972 paper titled "A System for Interprocess Communication in a
Resource Sharing Computer Network"[3] describes a set of operations enabling interprocess
communication within a single timesharing system, but using techniques that could easily be
generalized to permit communication between remote processes. Walden's description
included an abstraction called a port, which he defined to be a particular data path to a
process (a RECEIVE port) or from a process (a SEND port). All ports had associated unique
identifiers called port numbers. The kernel maintained a table of port numbers associated
with processes and restart locations. On completion of an IPC transmission, the kernel
transferred the participant (sender or receiver) to a restart location, which was specified as
part of a SEND or RECEIVE operation.
Although Walden's description was that of a hypothetical system, many parallels can be
found in latter-day IPC mechanisms in systems like RIG, Accent, and Machincluding Mac
OS X.
As we saw in Chapter 1, the Rochester's Intelligent Gateway (RIG) system, whose
implementation began in 1975, used an IPC facility as the basic structuring tool. RIG's IPC
facility used ports and messages as basic abstractions. A RIG port was a kernel-managed
message queue, globally identified by a  pair of integers.
A RIG message was a limited-size unit consisting of a header and some data.
The Accent system improved upon RIG's IPC by defining ports to be capabilities as well as
communication objects and by using a larger address space along with copy-on-write
techniques to handle large objects. An intermediary Network Server process could
transparently extend Accent's IPC across the network.
A process was an address space and a single program counter in both RIG and Accent. Mach
split the process abstraction into a task and a thread, with the task portion owning port access
rights. The use of thread mechanisms to handle errors and certain asynchronous activities
simplified Mach's IPC facility. Mach 3.0, from which the Mac OS X kernel's Mach
component is derived, incorporated several performance- and functionality-related
improvements to IPC.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 5 of 153
[3] "A System for Interprocess Communication in a Resource Sharing Computer Network,"
by David C. Walden (Communications of the ACM 15:4, April 1972, pp. 221230).
The Mach IPC facility is built on two basic kernel abstractions: ports and messages, with messages
passing between ports as the fundamental communication mechanism. A port is a multifaceted entity,
whereas a message is an arbitrarily sized collection of data objects.
9.2.1. Mach Ports
Mach ports serve the following primary purposes in the operating system.
A port is a communications channela kernel-protected, kernel-managed, and finite-length queue of
messages. The most basic operations on a port are for sending and receiving messages. Sending to a
port allows a task to place messages into the port's underlying queue. Receiving allows a task to
retrieve messages from that queue, which holds incoming messages until the recipient removes
them. When a queue corresponding to a port is full or empty, senders and receivers, respectively,
are blocked in general.
Ports are used to represent capabilities in that they themselves are protected by a capability
mechanism to prevent arbitrary Mach tasks from accessing them. To access a port, a task must have
a port capability, or port right, such as a send right or a receive right. The specific rights a task has
to a port limit the set of operations the task may perform on that port. This allows Mach to prevent
unauthorized tasks from accessing ports and, in particular, from manipulating objects associated
with ports.
Ports are used to represent resources, services, and facilities, thus providing object-style access to
these abstractions. For example, Mach uses ports to represent abstractions such as hosts, tasks,
threads, memory objects, clocks, timers, processors, and processor sets. Operations on such port-
represented objects are performed by sending messages to their representative ports. The kernel,
which typically holds the receive rights to such ports, receives and processes the messages. This is
analogous to object-oriented method invocation.
A port's name can stand for several entities, such as a right for sending or receiving messages, a dead
name, a port set, or nothing. In general, we refer to what a port name stands for as a port right, although
the term right may seem unintuitive in some situations. We will discuss details of these concepts later in
this chapter.
9.2.1.1. Ports for Communication
In its role as a communications channel, a Mach port resembles a BSD socket, but there are important
differences, such as those listed here.
Mach IPC, by design, is integrated with the virtual memory subsystem.
Whereas sockets are primarily used for remote communication, Mach IPC is primarily used for (and
optimized for) intramachine communication. However, Mach IPC, by design, can be transparently
extended over the network.
Mach IPC messages can carry typed content.