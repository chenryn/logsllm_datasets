---
author: Nicole White
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 8576
date: '2016-12-14 16:57:56'
editorchoice: false
excerpt: 实时推荐引擎是 Neo4j 中最广泛的用途之一，也是使它如此强大并且容易使用的原因之一。为了探索这个东西，我将通过使用示例数据集来阐述如何将统计学方法并入这些引擎中。
fromurl: https://neo4j.com/blog/real-time-recommendation-engine-data-science/
id: 8037
islctt: true
largepic: /data/attachment/album/201612/14/165430ads2yka5a5lcyx2z.jpg
permalink: /article-8037-1.html
pic: /data/attachment/album/201612/14/165430ads2yka5a5lcyx2z.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 实时推荐引擎是 Neo4j 中最广泛的用途之一，也是使它如此强大并且容易使用的原因之一。为了探索这个东西，我将通过使用示例数据集来阐述如何将统计学方法并入这些引擎中。
tags:
- 推荐
- 聚类
- 算法
- Neo4j
- 图数据库
thumb: false
title: 用数据科学搭建一个实时推荐引擎
titlepic: true
translator: ucasFL
updated: '2016-12-14 16:57:56'
---
编者注：本文是 2016 年 4 月 Nicole Whilte 在欧洲 [GraphConnect](http://graphconnect.com/) 时所作。这儿我们快速回顾一下她所涉及的内容：
* 图数据库推荐基础
* 社会化推荐
* 相似性推荐
* 集群推荐
今天我们将要讨论的内容是数据科学和 图推荐   （    graph recommendations    ） ：
![](/data/attachment/album/201612/14/165430ads2yka5a5lcyx2z.jpg)
我在 [Neo4j](http://neo4j.com/product/) 任职已经两年了，但实际上我已经使用 Neo4j 和 [Cypher](http://neo4j.com/blog/why-database-query-language-matters/#cypher) 工作三年了。当我首次发现这个特别的 图数据库   （    graph database    ） 的时候，我还是一个研究生，那时候我在奥斯丁的德克萨斯大学攻读关于社交网络的统计学硕士学位。
[实时推荐引擎](https://neo4j.com/use-cases/real-time-recommendation-engine/)是 Neo4j 中最广泛的用途之一，也是使它如此强大并且容易使用的原因之一。为了探索这个东西，我将通过使用示例数据集来阐述如何将统计学方法并入这些引擎中。
第一个很简单 - 将 Cypher 用于社交推荐。接下来，我们将看一看相似性推荐，这涉及到可被计算的相似性度量，最后探索的是集群推荐。
### 图数据库推荐基础
下面的数据集包含所有达拉斯 Fort Worth 国际机场的餐饮场所，达拉斯 Fort Worth 国际机场是美国主要的机场枢纽之一：
![](/data/attachment/album/201612/14/165806sjtqx55hqh152522.png)
我们把节点标记成黄色并按照出入口和航站楼给它们的位置建模。同时我们也按照食物和饮料的主类别将地点分类，其中一些包括墨西哥食物、三明治、酒吧和烤肉。
让我们做一个简单的推荐。我们想要在机场的某一确定地点找到一种特定食物，大括号中的内容表示是的用户输入，它将进入我们的假想应用程序中。
![](/data/attachment/album/201612/14/165810ymp4n22enwdalo9d.png)
这个英文句子表示成 Cypher 查询：
![](/data/attachment/album/201612/14/165815bllxxkz5e0lyflx2.png)
这将提取出该类别中用户所请求的所有地点、航站楼和出入口。然后我们可以计算出用户所在位置到出入口的准确距离，并以升序返回结果。再次说明，这个非常简单的 Cypher 推荐仅仅依据的是用户在机场中的位置。
###  社交推荐   （    Social Recommendations    ） 
让我们来看一下社交推荐。在我们的假想应用程序中，用户可以登录并且可以用和 Facebook 类似的方式标记自己“喜好”的地点，也可以在某地签到。
![](/data/attachment/album/201612/14/165818vsahvs9reydjsh7k.png)
考虑位于我们所研究的第一个模型之上的数据模型，现在让我们在下面的分类中找到用户的朋友喜好的航站楼里面离出入口最近的餐饮场所：
![](/data/attachment/album/201612/14/165821galadt9lallaqiul.png)
`MATCH` 子句和我们第一次 Cypher 查询的 `MATCH` 子句相似，只是现在我们依据喜好和朋友来匹配：
![](/data/attachment/album/201612/14/165828la8ai8aoa9zbf05c.png)
前三行是完全一样的，但是现在要考虑的是那些登录的用户，我们想要通过 `:FRIENDS_WITH` 这一关系来找到他们的朋友。仅需通过在 Cypher 中增加一些行内容，我们现在已经把社交层面考虑到了我们的推荐引擎中。
再次说明，我们仅仅显示了用户明确请求的类别，并且这些类别中的地点与用户进入的地方是相同的航站楼。当然，我们希望按照登录并做出请求的用户来滤过这些目录，然后返回地点的名字、位置以及所在目录。我们也要显示出有多少朋友已经“喜好”那个地点以及那个地点到出入口的确切距离，然后在 `RETURN` 子句中同时返回所有这些内容。
###  相似性推荐   （    Similarity Recommendations    ） 
现在，让我们看一看相似性推荐引擎：
![](/data/attachment/album/201612/14/165834eplgtsi6pchxghid.png)
和前面的数据模型相似，用户可以标记“喜好”的地点，但是这一次他们可以用 1 到 10 的整数给地点评分。这是通过前期在 Neo4j 中增加一些属性到关系中建模实现的。
这将允许我们找到其他相似的用户，比如以上面的 Greta 和 Alice 为例，我们已经查询了他们共同喜好的地点，并且对于每一个地点，我们可以看到他们所设定的权重。大概地，我们可以通过他们的评分来确定他们之间的相似性大小。
![](/data/attachment/album/201612/14/165838eouuq78bvuyt1hdu.png)
现在我们有两个向量：
![](/data/attachment/album/201612/14/165839ut226t22t09rszj5.png)
现在让我们按照 欧几里得距离   （    Euclidean distance    ） 的定义来计算这两个向量之间的距离：
![](/data/attachment/album/201612/14/165840b9z3oub59bgssrub.png)
我们把所有的数字带入公式中计算，然后得到下面的相似度，这就是两个用户之间的“距离”：
![](/data/attachment/album/201612/14/165841iug5l99col5bpgb1.png)
你可以很容易地在 Cypher 中计算两个特定用户的“距离”，特别是如果他们仅仅同时“喜好”一个很小的地点子集。再次说明，这儿我们依据两个用户 Alice 和 Greta 来进行匹配，并尝试去找到他们同时“喜好”的地点：