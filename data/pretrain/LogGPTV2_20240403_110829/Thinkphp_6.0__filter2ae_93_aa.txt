# Thinkphp 6.0 反序列化漏洞分析
## ThinkPHP目录结构：
    project  应用部署目录
    ├─application           应用目录（可设置）
    │  ├─common             公共模块目录（可更改）
    │  ├─index              模块目录(可更改)
    │  │  ├─config.php      模块配置文件
    │  │  ├─common.php      模块函数文件
    │  │  ├─controller      控制器目录
    │  │  ├─model           模型目录
    │  │  ├─view            视图目录
    │  │  └─ ...            更多类库目录
    │  ├─command.php        命令行工具配置文件
    │  ├─common.php         应用公共（函数）文件
    │  ├─config.php         应用（公共）配置文件
    │  ├─database.php       数据库配置文件
    │  ├─tags.php           应用行为扩展定义文件
    │  └─route.php          路由配置文件
    ├─extend                扩展类库目录（可定义）
    ├─public                WEB 部署目录（对外访问目录）
    │  ├─static             静态资源存放目录(css,js,image)
    │  ├─index.php          应用入口文件
    │  ├─router.php         快速测试文件
    │  └─.htaccess          用于 apache 的重写
    ├─runtime               应用的运行时目录（可写，可设置）
    ├─vendor                第三方类库目录（Composer）
    ├─thinkphp              框架系统目录
    │  ├─lang               语言包目录
    │  ├─library            框架核心类库目录
    │  │  ├─think           Think 类库包目录
    │  │  └─traits          系统 Traits 目录
    │  ├─tpl                系统模板目录
    │  ├─.htaccess          用于 apache 的重写
    │  ├─.travis.yml        CI 定义文件
    │  ├─base.php           基础定义文件
    │  ├─composer.json      composer 定义文件
    │  ├─console.php        控制台入口文件
    │  ├─convention.php     惯例配置文件
    │  ├─helper.php         助手函数文件（可选）
    │  ├─LICENSE.txt        授权说明文件
    │  ├─phpunit.xml        单元测试配置文件
    │  ├─README.md          README 文件
    │  └─start.php          框架引导文件
    ├─build.php             自动生成定义文件（参考）
    ├─composer.json         composer 定义文件
    ├─LICENSE.txt           授权说明文件
    ├─README.md             README 文件
    ├─think                 命令行入口文件
控制器写法：
控制器文件通常放在`application/module/controller`下面，类名和文件名保持大小写一致，并采用驼峰命名（首字母大写）。
一个典型的控制器类定义如下：
     :)  ThinkPHP V' . \think\facade\App::version() . '14载初心不改 - 你值得信赖的PHP框架[ V6.0 版本由 亿速云 独家赞助发布 ]';
        }
        public function backdoor($command)
        {
            system($command);
        }
    }
想进入后门，需要访问：
    http://ip/index.php/Index/backdoor/?command=ls
所以写一个漏洞利用点：
控制器，`app/home/contorller/index.php`
    lazySave==True`，跟进：
想要进入`updateData`方法，需要满足一些条件：
让第一个`if`里面一个条件为真才能不直接`return`，也即需要两个条件：
    $this->isEmpty()==false
    $this->trigger('BeforeWrite')==true
    其中isEmpty()：
        public function isEmpty(): bool
        {
            return empty($this->data);
        }
让`$this->data!=null`即可满足第一个条件。再看`trigger('BeforeWrite')`，位于`ModelEvent`类中：
    protected function trigger(string $event): bool
        {
            if (!$this->withEvent) {
                return true;
            }
            .....
        }
让`$this->withEvent==false`即可满足第二个条件，
然后需要让`$this->exists=true`，这样才能执行`updateData`，
跟进`updateData()`，
想要执行`checkAllwoFields`方法需要绕过前面的两个 if 判断，必须满足两个条件：
    $this->trigger('BeforeUpdate')==true
    $data!=null
第一个条件上面已经满足，现在看第二个条件`$data`，查看`$data`是怎么来的，跟进`getChangedData`方法，`src/model/concern/Attribute.php`
因为`$force`没定义默认为 null
，所以进入`array_udiff_assoc`，由于`$this->data`和`$this->origin`默认也为`null`，所以不符合第一个`if`判断，最终`$data=0`，也即满足前面所提的第二个条件，`$data!=null`。
然后查看 checkAllowFields 方法调用情况。
我们想进入字符拼接操作，就需要进入`else`，所以要让`$this->field=null`，`$this->schema=null`，进入下面
这里存在可控属性的字符拼接，所以可以找一个有`__tostring`方法的类做跳板，寻找`__tostring`，
`src/model/concern/Conversion.php`，
进入`toJson`方法，
我们想要执行的就是`getAttr`方法，触发条件：
`$this->visible[$key]`需要存在，而`$key`来自`$data`的键名，`$data`又来自`$this->data`，即`$this->data`必须有一个键名传给`$this->visible`，然后把键名`$key`传给`getAttr`方法，
跟进`getAttr`方法，`vendor/topthink/think-orm/src/model/concern/Attribute.php`
跟进`getData`方法，
跟进`getRealFieldName`方法，
当`$this->strict`为`true`时直接返回`$name`，即键名`$key`
返回`getData`方法，此时`$fieldName=$key`，进入`if`语句，返回`$this->data[$key]`，再回到`getAttr`方法，
    return $this->getValue($name, $value, $relation);
即返回
    return $this->getValue($name, $this->data[$key], $relation);
跟进`getValue`方法，
如果我们让`$closure`为我们想执行的函数名，`$value`和`$this->data`为参数即可实现任意函数执行。
所以需要查看`$closure`属性是否可控，跟进`getRealFieldName`方法，
如果让`$this->strict==true`，即可让`$$fieldName`等于传入的参数`$name`，即开始的`$this->data[$key]`的键值`$key`，可控
又因为`$this->withAttr`数组可控，所以，`$closure`可控·，值为`$this->withAttr[$key]`，参数就是`$this->data`，即`$data`的键值，
所以我们需要控制的参数：
    $this->data不为空
    $this->lazySave == true
    $this->withEvent == false
    $this->exists == true
    $this->force == true
这里还需要注意，`Model`是抽象类，不能实例化。所以要想利用，得找出 `Model` 类的一个子类进行实例化，这里可以用 `Pivot`
类（位于\vendor\topthink\think-orm\src\model\Pivot.php中）进行利用。
所以构造exp：
    lazySave = True;
                $this->withEvent = false;
                $this->exists = true;
                $this->table = $obj;
                $this->data = ['key'=>'dir'];
                $this->visible = ["key"=>1];
                $this->withAttr = ['key'=>'system'];