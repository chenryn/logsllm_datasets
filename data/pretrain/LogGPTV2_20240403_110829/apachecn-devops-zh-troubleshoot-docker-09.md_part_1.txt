# 九、挂载卷
本章介绍了数据卷和存储驱动程序的概念，这些概念在 Docker 中广泛用于管理持久或共享数据。我们还将深入研究 Docker 支持的各种存储驱动程序，以及与之相关的基本管理命令。Docker 数据卷的三个主要用例如下:
*   删除容器后保持数据的持久性
*   在主机和 Docker 容器之间共享数据
*   跨 Docker 容器共享数据
为了理解 Docker 卷，我们需要理解 Docker 文件系统如何工作。Docker 映像存储为一系列只读层。当容器启动时，只读映像会在顶部添加一个读写层。如果当前文件需要修改，它将从只读层复制到读写层，并在读写层应用更改。读写层中文件的版本隐藏了底层文件，但不会破坏它。因此，当 Docker 容器被删除时，重新启动映像将启动具有新读写层的新容器，所有更改都将丢失。只读层之上的读写层组合被称为**联合文件系统** ( **UFS** )。为了保存数据并能够与主机和其他容器共享数据，Docker 提出了卷的概念。基本上，卷是存在于 UFS 之外的目录，表现为主机文件系统上的普通目录或文件。
Docker 卷的一些重要特性如下:
*   创建容器时，可以初始化卷
*   数据卷可以在其他数据容器之间重用和共享
*   即使删除了容器，数据卷也会保留数据
*   绕过 UFS，直接对数据量进行更改
在本章中，我们将介绍以下内容:
*   纯数据容器
*   托管由共享存储备份的映射卷
*   Docker 存储驱动器性能
# 通过了解 Docker 卷避免故障排除
在本节中，我们将研究处理数据和 Docker 容器的四种方法，这将有助于我们理解和实现前面提到的 Docker 卷的用例。
# 在 Docker 容器中存储数据的默认案例
在这种情况下，数据只在 Docker 容器中可见，而不来自主机系统。如果容器关闭或 Docker 主机死亡，数据将丢失。这种情况主要适用于打包在 Docker 容器中的服务，并且当它们返回时不依赖于持久数据:
```
$ docker run -it ubuntu:14.04 
root@358b511effb0:/# cd /tmp/ 
root@358b511effb0:/tmp# cat > hello.txt 
hii 
root@358b511effb0:/tmp# ls 
hello.txt 
```
如前例所示，`hello.txt`文件只存在于容器中，一旦容器死亡，该文件将不会被保存:
![Default case storing data inside the Docker container](img/image_09_001.jpg)
存储在 Docker 容器中的数据
# 纯数据容器
数据可以存储在 Docker UFS 之外的纯数据容器中。数据将在纯数据容器装载命名空间中可见。由于数据被保存在容器之外，所以即使在容器被删除后，数据仍然保留。如果任何其他容器想要连接到这个只包含数据的容器，只需使用`--volumes-from`选项抓取容器并将其应用到当前容器。让我们试试数据量容器:
![Data-only container](img/image_09_002.jpg)
使用纯数据容器
## 创建纯数据容器
```
$ docker create -v /tmp --name ubuntuvolume Ubuntu:14.04
```
在前面的命令中，我们创建了一个 Ubuntu 容器并附加了`/tmp`。它是一个基于 Ubuntu 映像的纯数据容器，存在于`/tmp`目录中。如果新的 Ubuntu 容器需要将一些数据写入我们的纯数据容器的`/tmp`目录，这可以通过`--volumes-from`选项来实现。现在，我们写入新容器的`/tmp`目录的任何内容都将保存在 Ubuntu 数据容器的`/tmp`卷中:
```
$ docker create -v /tmp --name ubuntuvolume ubuntu:14.04 
d694752455f7351e95d1563ed921257654a1867c467a2813ae25e7d99c067234
```
在容器-1 中使用数据量容器:
```
$ docker run -t -i --volumes-from ubuntuvolume ubuntu:14.04 /bin/bash 
root@127eba0504cd:/# echo "testing data container" > /tmp/hello 
root@127eba0504cd:/# exit 
exit 
```
使用容器-2 中的数据量容器来获取容器-1 共享的数据:
```
$ docker run -t -i --volumes-from ubuntuvolume ubuntu:14.04 /bin/bash 
root@5dd8152155de:/# cd tmp/ 
root@5dd8152155de:/tmp# ls 
hello 
root@5dd8152155de:/tmp# cat hello 
testing data container 
```
我们可以看到，容器-2 在`/tmp`空间中获取容器-1 写入的数据。这些示例演示了纯数据容器的基本用法。
## 在主机和 Docker 容器之间共享数据
这是一个常见的用例，需要在主机和 Docker 容器之间共享文件。在这个场景中，我们不需要创建一个数据容器；我们可以简单地运行任何 Docker 映像的容器，并简单地用主机系统目录中的内容覆盖其中一个目录。
让我们考虑一个例子，我们希望从主机系统访问 Docker NGINX 的日志。目前，它们在主机外部不可用，但这可以通过简单地将容器内部的`/var/log/nginx`映射到主机系统上的目录来实现。在这种情况下，我们将使用主机系统中的共享卷运行 NGINX 映像的副本，如下所示:
![Sharing data between the host and the Docker container](img/image_09_003.jpg)
在主机和 Docker 容器之间共享数据
在主机系统中创建`serverlogs`目录:
```
$ mkdir /home/serverlogs
```
运行 NGINX 容器并将`/home/serverlogs`映射到 Docker 容器内的`/var/log/nginx`目录:
```
$ docker run -d -v /home/serverlogs:/var/log/nginx -p 5000:80 nginx 
Unable to find image 'nginx:latest' locally 
latest: Pulling from library/nginx 
5040bd298390: Pull complete 
...
```
从主机系统访问`http://localhost:5000`，发布这个，会生成日志，可以在主机系统的`/home/serverlogs`目录下访问，映射到 Docker 容器内的`/var/log/nginx`，如下图:
```
$ cd serverlogs/ 
$ ls 
access.log  error.log 
$ cat access.log  
172.17.42.1 - - [20/Jan/2017:14:57:41 +0000] "GET / HTTP/1.1" 200 612 "-" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:50.0) Gecko/20100101 Firefox/50.0" "-" 
```
# 共享存储备份的主机映射卷
Docker 卷插件允许我们挂载一个共享存储后端。这样做的主要优点是，在主机出现故障的情况下，用户永远不会遭受数据丢失，因为它由共享存储支持。在前面的方法中，如果我们迁移容器，卷不会被迁移。可以借助外部 Docker 卷插件**Flocker****Convy**来实现，这些插件使卷可移植，并有助于在带有卷的主机之间轻松迁移容器，同时保护数据，因为它不依赖于主机文件系统。
## 絮凝剂
Flocker 被广泛用于运行需要持久存储的容器化有状态服务和应用。Docker 提供了卷管理的一个非常基本的视图，但是 Flocker 通过提供卷的持久性、故障转移和高可用性来增强它。Flocker 可以使用 Docker Swarm 和 compose 手动部署，如果备份的存储必须用于生产设置，也可以借助 CloudFormation 模板在 AWS 上轻松设置。
借助以下步骤，可以在 AWS 上轻松部署 Flocker:
1.  登录您的 AWS 帐户，并在亚马逊 EC2 中创建一个密钥对。
2.  从 AWS 主页选择**云信息**。
3.  借助 AWS S3 存储中的模板，可以使用以下链接启动弗洛克云形成栈:`https://s3.amazonaws.com/installer.downloads.clusterhq.com/flocker-cluster.cloudformation.json`
4.  Select create stack; then select the second option and specify the Amazon S3 template URL:
    ![Flocker](img/image_09_004.jpg)
5.  On the next screen, specify the **Stack name**, **AmazonAccessKeyID**, and **AmazonSecretAccessKey** for the account:
    ![Flocker](img/image_09_005.jpg)
6.  Provide the key-value pairs to tag this Flocker stack, and provide the **IAM Role** for this stack if required:
    ![Flocker](img/image_09_006.jpg)
7.  Review the details and launch the Flocker cloud formation stack: