```
auto eth2
iface eth2 inet static
        address 172.16.10.65
        netmask 255.255.255.192
 post-up ip route add 172.16.10.192/26 via 172.16.10.66
```
添加配置后，我们可以重新加载界面，强制配置文件重新处理:
```
user@net1:~$ sudo ifdown eth2 && sudo ifup eth2
```
### 注
在某些情况下，主机可能不会处理`post-up`命令，因为我们在早期的配方中手动定义了接口上的地址。在重新加载接口之前删除 IP 地址将解决此问题；但是，在这些情况下，重启主机是最简单(也是最干净)的做法。
我们的路由表现在将显示两条路由:
```
user@net1:~$ ip route
default via 10.10.10.1 dev eth0
10.10.10.0/24 dev eth0  proto kernel  scope link  src 10.10.10.110
172.16.10.0/26 dev eth1  proto kernel  scope link  src 172.16.10.1
172.16.10.64/26 dev eth2  proto kernel  scope link  src 172.16.10.65
172.16.10.128/26 via 172.16.10.2 dev eth1
172.16.10.192/26 via 172.16.10.66 dev eth2
user@net1:~$
```
为了验证这是否如预期的那样工作，让我们从试图 ping 通主机上虚拟接口的远程工作站进行一些测试`net2` ( `172.16.10.129`)。假设工作站连接到不在外部网络上的接口，流程可能如下所示:
![How to do it…](img/B05453_01_05.jpg)
1.  一个 IP 地址为`192.168.127.55`的工作站正试图到达其 IP 地址为`172.16.10.129`的连接到`net2`的虚拟接口。工作站向其默认网关发送流量，因为它寻找的目的地没有直接连接。
2.  网络有一条`172.16.10.0/24`指向`net1's eth0`接口(`10.10.10.110`)的路由。目的 IP 地址(`172.16.10.129`)是该较大前缀的成员，因此网络将工作站的流量转发到主机`net1`。
3.  `net1`主机检查流量，询问其路由表，并确定其具有指向`net2`的前缀的路由，该前缀的下一跳为`172.16.10.2`。
4.  `net2`接收到请求，意识到虚拟接口是直连的，尝试向工作站发回回复。由于没有到达`192.168.127.55`目的地的具体路线，主机`net2`将其回复发送到其默认网关`net1` ( `172.16.10.1`)。
5.  类似地，`net1`没有针对`192.168.127.55`目的地的特定路由，因此它通过默认网关将流量转发回网络。假设网络具有将流量返回到工作站的可达性。
如果我们想删除静态定义的路由，我们可以使用`ip route delete`子命令来完成。例如，这里有一个添加路由然后删除它的例子:
```
user@net1:~$ sudo ip route add 172.16.10.128/26 via 172.16.10.2
user@net1:~$ sudo ip route delete 172.16.10.128/26
```
注意我们如何在删除路由时只需要指定目的前缀，而不需要指定下一跳。
# 探索桥梁
Linux 中的桥是网络连接的关键构件。Docker 在自己的许多网络驱动程序中广泛使用它们，这些驱动程序包含在`docker-engine`中。网桥已经存在很长时间了，在大多数情况下，它与物理网络交换机非常相似。Linux 中的网桥可以像第 2 层或第 3 层网桥一样工作。
### 注
**第二层对比第三层**
术语指的是现场视察网络模型的不同层。第 2 层代表**数据链路层**，与主机之间交换帧相关。第 3 层代表**网络层**，与通过网络路由数据包相关联。两者的主要区别是交换和路由。第 2 层交换机能够在同一网络上的主机之间发送帧，但不能根据 IP 信息路由帧。如果您希望在不同网络或子网的两台主机之间进行路由，您将需要一台能够在两个子网之间进行路由的第 3 层设备。另一种观点认为，第 2 层交换机只能处理 MAC 地址，第 3 层设备可以处理 IP 地址。
默认情况下，Linux 桥是第 2 层结构。以这种方式，它们通常被称为协议无关。也就是说，任何数量的更高级别(第 3 层)协议都可以在相同的网桥实现上运行。但是，您也可以为网桥分配一个 IP 地址，将它转换为支持第 3 层的网络结构。在这个食谱中，我们将通过几个例子向您展示如何创建、管理和检查 Linux 桥。
## 做好准备
为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2
```
为了对主机进行网络更改，您还需要根级访问。该配方将延续前一配方的实验室拓扑。前面提到的所有先决条件仍然适用。
## 怎么做…
为了演示网桥是如何工作的，让我们考虑对我们一直在使用的实验室拓扑结构做一个小小的改变:
![How to do it…](img/B05453_01_06.jpg)
与其让服务器通过物理接口直接相互连接，不如利用主机上的桥`net1`连接下游主机。以前，我们依赖于`net1`和任何其他主机之间的一对一映射连接。这意味着我们需要为每个物理接口配置一个唯一的子网和 IP 地址。虽然这确实可行，但不太实际。利用桥接接口而不是标准接口为我们提供了一些早期配置中没有的灵活性。我们可以为网桥接口分配一个 IP 地址，然后将许多物理连接接入同一个网桥。例如，`net4`主机可以添加到拓扑中，其在`net1`上的接口可以简单地添加到`host_bridge2`中。这将允许它使用与`net3`相同的网关(`172.16.10.65`)。因此，虽然添加主机的物理布线要求不会改变，但这确实避免了我们必须为每台主机定义一对一的 IP 地址映射。
### 注
从主机`net2`和`net3`的角度来看，当我们重新配置使用网桥时，一切都不会改变。
由于我们正在改变定义`net1`主机的`eth1`和`eth2`接口的方式，我们将从刷新它们的配置开始:
```
user@net1:~$ sudo ip address flush dev eth1
user@net1:~$ sudo ip address flush dev eth2
```
刷新接口只是清除接口上任何与 IP 相关的配置。接下来我们要做的就是自己创造桥梁。我们使用的语法与我们在前面创建虚拟接口时看到的非常相似。我们使用`ip link add`命令并指定一种桥的类型:
```
user@net1:~$ sudo ip link add host_bridge1 type bridge
user@net1:~$ sudo ip link add host_bridge2 type bridge
```
在创建桥之后，我们可以通过使用`ip link show `命令检查可用的接口来验证它们是否存在:
```
user@net1:~$ ip link show host_bridge1
5: host_bridge1:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default
    link/ether f6:f1:57:72:28:a7 brd ff:ff:ff:ff:ff:ff
user@net1:~$ ip link show host_bridge2
6: host_bridge2:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default
    link/ether be:5e:0b:ea:4c:52 brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
接下来，我们想让他们知道第 3 层，所以我们给网桥接口分配一个 IP 地址。这与我们在之前的方案中为物理接口分配 IP 地址的方式非常相似:
```
user@net1:~$ sudo ip address add 172.16.10.1/26 dev host_bridge1
user@net1:~$ sudo ip address add 172.16.10.65/26 dev host_bridge2
```
我们可以通过使用`ip addr show dev `命令来验证是否分配了 IP 地址:
```
user@net1:~$ ip addr show dev host_bridge1
5: host_bridge1:  mtu 1500 qdisc noop state DOWN group default
    link/ether f6:f1:57:72:28:a7 brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.1/26 scope global host_bridge1
       valid_lft forever preferred_lft forever
user@net1:~$ ip addr show dev host_bridge2
6: host_bridge2:  mtu 1500 qdisc noop state DOWN group default
    link/ether be:5e:0b:ea:4c:52 brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.65/26 scope global host_bridge2
       valid_lft forever preferred_lft forever
user@net1:~$
```
下一步是将与每个下游主机相关联的物理接口绑定到正确的网桥。在我们的例子中，我们希望连接到`net1's` `eth1`接口的主机`net2`成为网桥`host_bridge1`的一部分。同样，我们希望连接到`net1`的`eth2`接口的主机`net3`成为`host_bridge2`桥的一部分。使用`ip link set`子命令，我们可以将网桥定义为物理接口的主人:
```
user@net1:~$ sudo ip link set dev eth1 master host_bridge1
user@net1:~$ sudo ip link set dev eth2 master host_bridge2
```
我们可以通过使用`bridge link show`命令来验证接口是否成功绑定到网桥。
### 注
`bridge`命令是`iproute2`包的一部分，用于验证网桥配置。
```
user@net1:~$ bridge link show
3: eth1 state UP :  mtu 1500 master host_bridge1 state forwarding priority 32 cost 4
4: eth2 state UP :  mtu 1500 master host_bridge2 state forwarding priority 32 cost 4
user@net1:~$
```
最后，我们需要打开桥接接口，因为默认情况下，它们是在关闭状态下创建的:
```
user@net1:~$ sudo ip link set host_bridge1 up
user@net1:~$ sudo ip link set host_bridge2 up
```
我们现在可以再次检查网桥的链接状态，以验证它们是否成功启动:
```
user@net1:~$ ip link show host_bridge1
5: host_bridge1:  mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 00:0c:29:2d:dd:83 brd ff:ff:ff:ff:ff:ff
user@net1:~$ ip link show host_bridge2
6: host_bridge2:  mtu 1500 qdisc noqueue state UP mode DEFAULT group default
    link/ether 00:0c:29:2d:dd:8d brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
此时，您应该可以再次到达主机`net2`和`net3`。但是，虚拟接口现在无法访问。这是因为在我们刷新接口`eth1`和`eth2`后，虚拟接口的路由被自动撤回。从这些接口中移除 IP 地址使得用于到达虚拟接口的下一跳不可到达。当下一跳变得不可达时，设备通常会从其路由表中撤回路由。我们可以很容易地再次添加它们:
```
user@net1:~$ sudo ip route add 172.16.10.128/26 via 172.16.10.2
user@net1:~$ sudo ip route add 172.16.10.192/26 via 172.16.10.66
```
现在一切都恢复正常了，我们可以执行一些额外的步骤来验证配置。Linux 网桥，很像真正的第二层交换机，也可以跟踪它们接收的 MAC 地址。我们可以使用`bridge fdb show`命令查看系统知道的媒体访问控制地址: