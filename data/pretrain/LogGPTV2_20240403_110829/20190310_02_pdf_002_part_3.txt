### Database Compatibility for Oracle® Developers Guide

#### Employee Status Changes
When an employee's status changes (e.g., a raise, department switch, etc.), the company records the end date of the former position. A new job record is then added, including the start date, new job title, department, salary, and the reason for the status change. All historical employment data is maintained in the `jobhist` table.

#### Entity Relationship Diagram
The following diagram illustrates the relationships between the sample database tables:

**Figure 1: Sample Database Tables**

- **dept**
  - `deptno` (Primary Key)
  - `dname` (Unique)
  - `loc`

- **emp**
  - `empno` (Primary Key)
  - `ename`
  - `job`
  - `mgr`
  - `hiredate`
  - `sal` (Check Constraint: `sal > 0`)
  - `comm`
  - `deptno` (Foreign Key to `dept.deptno`)

- **jobhist**
  - `empno` (Foreign Key to `emp.empno`, On Delete Cascade)
  - `startdate` (Not Null)
  - `enddate`
  - `job`
  - `sal`
  - `comm`
  - `deptno` (Foreign Key to `dept.deptno`, On Delete Set Null)
  - `chgdesc`
  - Primary Key: (`empno`, `startdate`)

#### SQL Script: edb-sample.sql
This script creates and loads the `sample` tables, views, procedures, functions, and triggers used in the documentation examples.

```sql
-- Start new transaction - commit all or nothing
BEGIN;
/

-- Create and load tables used in the documentation examples.

-- Create the 'dept' table
CREATE TABLE dept (
    deptno NUMBER(2) NOT NULL CONSTRAINT dept_pk PRIMARY KEY,
    dname VARCHAR2(14) CONSTRAINT dept_dname_uq UNIQUE,
    loc VARCHAR2(13)
);

-- Create the 'emp' table
CREATE TABLE emp (
    empno NUMBER(4) NOT NULL CONSTRAINT emp_pk PRIMARY KEY,
    ename VARCHAR2(10),
    job VARCHAR2(9),
    mgr NUMBER(4),
    hiredate DATE,
    sal NUMBER(7,2) CONSTRAINT emp_sal_ck CHECK (sal > 0),
    comm NUMBER(7,2),
    deptno NUMBER(2) CONSTRAINT emp_ref_dept_fk REFERENCES dept(deptno)
);

-- Create the 'jobhist' table
CREATE TABLE jobhist (
    empno NUMBER(4) NOT NULL,
    startdate DATE NOT NULL,
    enddate DATE,
    job VARCHAR2(9),
    sal NUMBER(7,2),
    comm NUMBER(7,2),
    deptno NUMBER(2),
    chgdesc VARCHAR2(80),
    CONSTRAINT jobhist_pk PRIMARY KEY (empno, startdate),
    CONSTRAINT jobhist_ref_emp_fk FOREIGN KEY (empno) REFERENCES emp(empno) ON DELETE CASCADE,
    CONSTRAINT jobhist_ref_dept_fk FOREIGN KEY (deptno) REFERENCES dept(deptno) ON DELETE SET NULL,
    CONSTRAINT jobhist_date_chk CHECK (startdate < enddate)
);

-- EDB-SPL package that generates unique employee numbers
CREATE OR REPLACE PACKAGE emp_admin IS
    FUNCTION new_empno RETURN NUMBER;
END emp_admin;
/

CREATE OR REPLACE PACKAGE BODY emp_admin IS
    FUNCTION new_empno RETURN NUMBER IS
        v_new_empno NUMBER(4);
        v_cnt NUMBER;
    BEGIN
        LOOP
            SELECT next_empno.nextval INTO v_new_empno FROM dual;
            SELECT COUNT(*) INTO v_cnt FROM emp WHERE empno = v_new_empno;
            EXIT WHEN v_cnt = 0;
        END LOOP;
        RETURN v_new_empno;
    END;
END emp_admin;
/

-- EDB-SPL function that adds a new clerk to the 'emp' table
CREATE OR REPLACE FUNCTION hire_clerk (
    p_ename VARCHAR2,
    p_deptno NUMBER
) RETURN NUMBER IS
    v_empno NUMBER(4);
    v_ename VARCHAR2(10);
    v_job VARCHAR2(9);
    v_mgr NUMBER(4);
    v_hiredate DATE;
    v_sal NUMBER(7,2);
    v_comm NUMBER(7,2);
    v_deptno NUMBER(2);
BEGIN
    v_empno := emp_admin.new_empno;
    INSERT INTO emp VALUES (v_empno, p_ename, 'CLERK', 7782, TRUNC(SYSDATE), 950.00, NULL, p_deptno);
    
    SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno INTO
        v_empno, v_ename, v_job, v_mgr, v_hiredate, v_sal, v_comm, v_deptno
    FROM emp WHERE empno = v_empno;

    DBMS_OUTPUT.PUT_LINE('Department : ' || v_deptno);
    DBMS_OUTPUT.PUT_LINE('Employee No: ' || v_empno);
    DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
    DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
    DBMS_OUTPUT.PUT_LINE('Manager : ' || v_mgr);
    DBMS_OUTPUT.PUT_LINE('Hire Date : ' || v_hiredate);
    DBMS_OUTPUT.PUT_LINE('Salary : ' || v_sal);

    RETURN v_empno;
END;
/
```

Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.