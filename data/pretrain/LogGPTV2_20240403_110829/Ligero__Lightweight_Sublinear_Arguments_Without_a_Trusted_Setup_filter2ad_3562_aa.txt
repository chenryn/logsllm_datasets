title:Ligero: Lightweight Sublinear Arguments Without a Trusted Setup
author:Scott Ames and
Carmit Hazay and
Yuval Ishai and
Muthuramakrishnan Venkitasubramaniam
Ligero: Lightweight Sublinear Arguments
Without a Trusted Setup
Scott Ames
University of Rochester
PI:EMAIL
Carmit Hazay
Bar-Ilan University
PI:EMAIL
Yuval Ishai
Technion and UCLA
PI:EMAIL
ABSTRACT
We design and implement a simple zero-knowledge argument pro-
tocol for NP whose communication complexity is proportional to
the square-root of the veri(cid:27)cation circuit size. The protocol can
be based on any collision-resistant hash function. Alternatively, it
can be made non-interactive in the random oracle model, yielding
concretely e(cid:28)cient zk-SNARKs that do not require a trusted setup
or public-key cryptography.
Our protocol is attractive not only for very large veri(cid:27)cation
circuits but also for moderately large circuits that arise in appli-
cations. For instance, for verifying a SHA-256 preimage in zero-
knowledge with 2−40 soundness error, the communication complex-
ity is roughly 44KB (or less than 34KB under a plausible conjecture),
the prover running time is 140 ms, and the veri(cid:27)er running time is
62 ms. This proof is roughly 4 times shorter than a similar proof
of ZKB++ (Chase et al., CCS 2017), an optimized variant of ZKBoo
(Giacomelli et al., USENIX 2016).
The communication complexity of our protocol is independent of
the circuit structure and depends only on the number of gates. For
2−40 soundness error, the communication becomes smaller than the
circuit size for circuits containing roughly 3 million gates or more.
Our e(cid:28)ciency advantages become even bigger in an amortized
setting, where several instances need to be proven simultaneously.
Our zero-knowledge protocol is obtained by applying an opti-
mized version of the general transformation of Ishai et al. (STOC
2007) to a variant of the protocol for secure multiparty compu-
tation of Damgård and Ishai (Crypto 2006). It can be viewed as
a simple zero-knowledge interactive PCP based on “interleaved”
Reed-Solomon codes.
1 INTRODUCTION
Verifying outsourced computations is important for tasks and sce-
narios when there is an incentive for the party performing the
computation to report incorrect answers. In this work, we present
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:27)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:27)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:27)c permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 ACM. ISBN 978-1-4503-4946-8/17/10...$15.00
DOI: http://dx.doi.org/10.1145/3133956.3134104
Muthuramakrishnan Venkitasubramaniam
University of Rochester
PI:EMAIL
a concretely e(cid:28)cient argument protocol for NP whose communi-
cation complexity is proportional to the square root of the size of
a circuit verifying the NP witness. Our argument system is in fact
a zero-knowledge argument of knowledge, and it only requires
the veri(cid:27)er to send public coins to the prover. The latter feature
implies that it can be made non-interactive via the Fiat-Shamir trans-
form [19], yielding an e(cid:28)cient implementation of zero-knowledge
succinct non-interactive arguments of knowledge (zk-SNARKs [11])
without a trusted setup.
To put our work in the proper context, we give some relevant
background. The last half decade has seen tremendous progress in
designing and implementing e(cid:28)cient systems for veri(cid:27)able compu-
tation (see [4, 47] for recent surveys). These e(cid:29)orts can be divided
into three broad categories according to the underlying combinato-
rial machinery.
Doubly e(cid:28)cient interactive proofs: This line of work, initiated
by Goldwasser, Kalai, and Rothblum [23] (following a rich line
of work on interactive proofs with computationally unbounded
provers [24, 37, 44]), provides sublinear communication, e(cid:28)ciently
veri(cid:27)able proofs for low-depth polynomial-time computations.1
See [15, 41, 45, 46] and references therein for a survey of works
along this line.
Probabilistically checkable proofs (PCPs) and their interac-
tive variants: Originating from the works of Kilian [36] and Mi-
cali [39], recent works [4, 6, 8] have shown how to obtain e(cid:28)cient
sublinear arguments for NP from PCPs [1–3]. Classical PCPs have
been extended to allow additional interaction with the prover, (cid:27)rst
in the model of interactive PCP (IPCP) [35] and then in the more
general setting of interactive oracle proofs (IOP) [9], also known
as probabilistically checkable interactive proofs (PCIP) [41]. Ar-
guments obtained via PCPs and IOPs have the advantages of not
relying on public-key cryptography, not requiring a trusted setup,
and o(cid:29)ering conjectured security against quantum attacks. How-
ever, current implementations along this line are still quite far from
having good concrete e(cid:28)ciency.
Linear PCPs: This line of work, initiated by Ishai, Kushilevitz, and
Ostrovsky [28] (in the interactive or designated veri(cid:27)er setting) and
by Groth [27] (in the non-interactive, public veri(cid:27)cation setting of
SNARKs) obtains sublinear arguments for NP with preprocessing by
1The GKR technique has been recently extended to the case of NP statements by Zhang
et al. [48]. However, the communication complexity of the resulting arguments still
grows with the veri(cid:27)cation circuit depth, and moreover their e(cid:28)cient instantiation
requires the use of public-key cryptography.
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2087combining linear PCPs with homomorphic public-key cryptography.
In a linear PCP the veri(cid:27)er can obtain a small number of linear
combinations of a proof vector. Linear PCPs are simpler to construct
than classical PCPs and have served as the basis for some of the
(cid:27)rst implementations of veri(cid:27)able computation protocols [43]. A
very e(cid:28)cient construction of linear PCPs for NP that serves as the
basis for most current SNARK implementations, including the ones
used in zerocash [7], was given by Gennaro, Gentry, Parno, and
Raykova in [21]. (The view of these SNARKs as being based on
linear PCPs is due to Bitansky et al. [12] and Setty et al. [42].) Two
practical disadvantages of the protocols along this line are that they
are quite slow on the prover side (due to a heavy use of public-key
cryptography), and their soundness in the non-interactive setting
crucially relies on the existence of a long and “structured” common
reference string that needs to either be generated by a trusted party
or by an expensive distributed protocol.
Our goal in this work is to combine the best features of previous
approaches to the extent possible:
Obtain a simple, concretely e(cid:28)cient, sublinear com-
munication zero-knowledge argument system for
NP, without any setup, complex PCP machinery, or
expensive public-key operations.
As discussed above, all prior works fall short of meeting the
above goal on one or more counts.
1.1 Our Results
The main result of this work is a zero-knowledge argument protocol
for NP with the following features.
• It is sublinear, in the sense that the asymptotic communi-
cation complexity is roughly the square root of the veri(cid:27)-
cation circuit size.
• It is simple to describe and analyze in a self-contained way.
• It only employs symmetric-key primitives (collision-resistant
hash-functions) in a black-box way. Moreover, the protocol
can be made non-interactive in the random oracle model
by using the Fiat-Shamir transform [19], thus providing a
light-weight implementation of (publicly veri(cid:27)able) zero-
knowledge SNARKs.
• It does not require any trusted setup, even in the non-
• It is concretely e(cid:28)cient. We demonstrate its concrete e(cid:28)-
• In the multi-instance setting where many instances for
the same NP veri(cid:27)cation circuit are required, we obtain
improved amortized communication complexity with sub-
linear veri(cid:27)cation time.
ciency via an implementation.
interactive case.
Our protocol can be seen as a light-weight instance of the second
category of protocols discussed above. However, instead of directly
applying techniques from the PCP literature, we combine e(cid:28)cient
protocols for secure multiparty computation (MPC) with a variant
of the general transformation of Ishai, Kushilevitz, Ostrovsky, and
Sahai (IKOS) [29] that transforms such MPC protocols to zero-
knowledge interactive PCPs (ZKIPCP).
More concretely, we instantiate the MPC component with an
optimized variant of the protocol of Damgård and Ishai [16] (similar
to the one described in Appendix C of [33]) and transform it into a
ZKIPCP by applying a more e(cid:28)cient variant of the IKOS transfor-
mation in the spirit of the IPS compiler [32]. In a nutshell, the main
di(cid:29)erence with respect to the original IKOS transformation is that
we restrict the topology of the MPC network in a way that leads
to a better trade-o(cid:29) between soundness error and communication
complexity.
A key feature of the underlying MPC protocol is that its total
communication complexity is roughly equal to the size of the circuit
being evaluated, independently of the number of parties. Letting
the number of parties be the square root of the circuit size, the com-
munication per party is also roughly the square root of the circuit
size. This translates into a ZKIPCP with similar parameters. See
Section 4 for a self-contained presentation of the ZKIPCP obtained
via the above approach.
The recent work of Giacomelli, Madsen and Orlandi [22] and
its improvement due to Chase et al. [13] already demonstrated
that the IKOS transformation can lead to concretely e(cid:28)cient zero-
knowledge arguments, but where the communication is bigger than
the veri(cid:27)cation circuit size. In the present work, we obtain a sublin-
ear variant of this result by modifying both the IKOS transformation
and the underlying MPC machinery.
To summarize, using the above approach we obtain a simple
proof of the following theorem with good concrete e(cid:28)ciency:
Theorem 1.1 (Informal). Assume the existence of collision-resistant
hash-functions. Then there is a public-coin zero-knowledge argument
for proving the satis(cid:27)ability of a circuit C with communication com-
plexity ˜O((cid:112)|C|).
Concrete e(cid:28)ciency. We now give more detailed information about
the concrete e(cid:28)ciency of our implementation. The following num-
bers apply either to interactive zero-knowledge protocols based on
collision-resistant hash functions or to non-interactive zk-SNARKs
in the random oracle model obtained via the Fiat-Shamir transform.
We refer the reader to Section 6 for more details and give only a
few representative (cid:27)gures below.
s (or 120√
The communication complexity of proving the satis(cid:27)ability of
an arithmetic circuit with s > 30000 gates over a (cid:27)nite (cid:27)eld F of
size |F| ≥ 2128 with soundness error 2−40 consists of roughly 95√
(cid:27)eld elements (or 70√
s
s elements under Conjecture 4.1). For the case
of 2−80 error, the communication is roughly 140√
s under
Conjecture 4.1).
In the case of Boolean circuits, the communication complexity
becomes smaller than the circuit size for circuits with more than
roughly 3 million gates. One concrete benchmark that has been used
in prior works is verifying a SHA-256 preimage in zero-knowledge.
For this benchmark, the communication complexity of our protocol
with 2−40 soundness error is roughly 44KB (or less than 34KB
under a Conjecture 4.1), the prover running time is 140 ms, and
the veri(cid:27)er running time is 62 ms. This is roughly 4 times less
communication than a similar proof of ZKB++ [13], an optimized
variant of ZKBoo [22]. Requiring 2−80 soundness error doubles the
communication (as in [13, 22]).
Our protocol easily extends to a multi-instance setting to pro-
vide additional bene(cid:27)ts. In this setting, we can handle N instances
of a circuit of size s with soundness error 2−κ at an amortized
communication cost per instance smaller than s when N = Ω(κ
2).
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2088Moreover, the amortized veri(cid:27)cation time in the multi-instance
setting is sublinear, involving a total of O(s log s + N log N) (cid:27)eld
operations. Finally, the prover’s running time grows linearly with
the number of instances but still remains practically feasible for
reasonable number of instances. For the SHA-256 circuit, we show
that the amortized communication over 4096 instances is 2KB with
amortized prover time of 151 ms and veri(cid:27)cation time of 500 µs.
This amortization is relevant to natural applications, e.g., in the
context of cryptocurrencies [7, 18].
Related work. In a concurrent and independent work [5], Ben-
Sasson et al. use di(cid:29)erent techniques to construct concretely ef-
(cid:27)cient IOPs that imply “transparent” proof systems, referred to
as zk-STARKs, of the same type we obtain here. These zk-STARK
constructions signi(cid:27)cantly improve over the previous ones from [4].
A preliminary comparison with the concrete e(cid:28)ciency of our con-
struction suggests that our construction is generally more attractive
in terms of prover computation time and also in terms of proof
size for smaller circuits (say, of size comparable to a few SHA-256
circuits), whereas the construction from [5] is more attractive in
terms of veri(cid:27)er computation time and proof size for larger circuits.
We leave a more thorough comparison between the two approaches
for future work.
2 PRELIMINARIES
Trees
Basic notations. We denote the security parameter by κ. We say
that a function µ : N → N is negligible if for every positive polyno-
mial p(·) and all su(cid:28)ciently large κ’s it holds that µ(κ) <
1
p(κ). We
use the abbreviation PPT to denote probabilistic polynomial-time
and denote by [n] the set of elements {1, . . . , n} for some n ∈ N.
For an NP relation R, we denote by Rx the set of witnesses of x
and by LR its associated language. That is, Rx = {w | (x, w) ∈ R}
and LR = {x | ∃ w s.t . (x, w) ∈ R}.
2.1 Collision-Resistant Hashing and Merkle
Let {Hκ}κ∈N = {H : {0, 1}p(κ) → {0, 1}p(cid:48)(κ)}κ be a family of hash
functions, where p(·) and p(cid:48)(·) are polynomials so that p(cid:48)(κ) ≤ p(κ)