### Last Response Arrives

In this section, we present the loading times and overhead percentages to evaluate the performance impact of our approach. Four distinct loading times were measured, and two percentage values were calculated to compare the overheads introduced by our system.

#### Loading Time Definitions
1. **Loading Time without Shadow Execution (LTWS)**: The full loading time of a page without using our system.
2. **Loading Time in VM Public (LTVMPUB)**: The full loading time of a page within the VMPublic.
3. **Loading Time in VM Private (LTVMPRI)**: The full loading time of a page within the VMPrivate.
4. **Loading Time for Usability (LTFU)**: The partial loading time of a page within VMPrivate, when using our implementation. This is the time after which a user can access the significant content of a page, even if some parts (e.g., banners not found by the proxy) are not completely visible. This measure is only meaningful for web browsing measurements, as presented later in this section.

#### Overhead Percentage Definitions
1. **Overhead Percentage in VM Private (OPVMPRI)**: The loading time overhead induced by our implementation in VMPrivate, relative to LTWS, expressed as a percentage.
2. **Overhead Percentage for Usability (OPFU)**: The loading time overhead induced by Portfolio in VMPrivate, relative to LTWS, expressed as a percentage.

### Application Performance

| Application      | LTWS (ms) | LTVMPUB (ms) | LTVMPRI (ms) | OPVMPRI  |
|------------------|-----------|--------------|--------------|----------|
| Adobe Reader     | 371       | 403          | 508          | +36%     |
| Apple Update     | 6470      | 7937         | 9527         | +47%     |

**Table 3. Application Performance**

### Analysis of Application Updates Overheads

In Table 3, we summarize the timing details related to Adobe Reader and Apple Update. 

- **Columns 3 and 4**: The instance of the application running in the virtual environment has direct access to the Internet, making it the first to receive the response. The instance in the real desktop receives the response with a delay of about 20%. This delay is due to the proxy-thread serving the real machine, which must inspect the cache and search for the correct match before injecting it into the application in the real environment.
- **Last Column**: The percentage overhead with respect to the execution of the same application in a system without our system. These numbers are acceptable because, in these operations (searching for available updates), an immediate response from the network is not crucial, as these requests operate in the background.

### Web Browsing Overheads

To measure the performance of Mozilla Firefox, we used a small add-on called Load Time Analyzer [10]. This utility allows users to measure the loading time of web pages and produces graphs showing events such as requests for the page, images, and scripts, along with on-load script executions. This enabled us to identify when the significant components of a page have been loaded, allowing us to measure the "time for usability." To prevent cache-related effects, we disabled the Firefox cache, setting it to zero megabytes.

| Website           | LTWS (ms) | LTVMPUB (ms) | LTVMPRI (ms) | OPVMPRI  |
|-------------------|-----------|--------------|--------------|----------|
| Maps.Google.com   | 2156      | 4110         | 5541         | +157%    |
| TransitChicago.com| 2469      | 3565         | 4812         | +94%     |
| Altavista.com     | 891       | 1652         | 1392         | +56%     |
| Ansi.com          | 3364      | 7198         | 7461         | +121%    |
| Wordreference.com | 451       | 1192         | 1382         | +206%    |
| Berkeley.edu      | 6259      | 7320         | 7721         | +23%     |
| CNN.com           | 10031     | 18840        | 103829       | -        |
| MSN.com           | 8031      | 12568        | 55250        | -        |
| Yahoo.com         | 3141      | 4186         | 52718        | -        |

**Table 4. Load Time of Websites in Firefox**

For websites like CNN.com, MSN.com, and Yahoo.com, which are full of advertisements, the "time for usability" is more important. The OPFU for these websites are 120%, 102%, and 67%, respectively.

We also noted that some overhead was due to the use of VirtualBox VM, where the VM runs as a regular process. Para-virtualized systems like Xen would result in lower overheads but require operating system support. Our choice of VirtualBox was influenced by the requirement for a "drop-in" solution that provides operating system transparency, i.e., no modifications to the operating system.

### Related Work

The goal of most works discussed in this section is to enforce the non-interference property [5]. We discuss some representative works closely related to ours. A more comprehensive treatment of previous works in this area can be found in the extensive survey [16] by Sabelfeld and Myers.

- **Runtime Approaches**: Perl's taint mode [22] tracks data from untrusted sources and supports implicit downgrading through pattern matching. Recent works [13, 17, 25] propose taint-tracking to enforce integrity policies. Taint tracking approaches [26, 4] target spyware detection but may miss certain confidential information leaks. A signature-based approach [23] detects spyware by looking for footprints in network traffic but fails for spyware using implicit flows.
- **Combined Static and Dynamic Methods**: Approaches [21, 28, 20] combine static and dynamic methods to avoid limitations of pure dynamic approaches. However, these can report false alarms when there is no leakage of information.
- **Data Sandboxing [9]**: Partitions a program into private and public zones based on the data handled and enforces different confidentiality policies. TightLip [27] uses doppelganger processes to detect confidentiality breaches. While TightLip detects access control errors, we handle intentional leaks and provide operating system transparency through virtual machines and isolated execution.

### Conclusion

In this paper, we presented a solution for preventing information leaks related to end-user confidential information. Our solution uses shadow execution, running two executable copies of a program with different inputs to prevent information leaks. We implemented our technique for Windows-based applications and evaluated it with several examples. The results indicate that our prototype makes a significant step towards utilizing commodity virtual machines for protecting end-user data confidentiality.

### Acknowledgments

The authors gratefully acknowledge the partial support of this research through their NSF grants (CNS-0716584), (CNS-0551660), and (CCF-0742686). The first two authors are enrolled in the UIC-Politecnico di Milano joint Masters program.

### References

[References remain unchanged and are listed at the end of the document.]