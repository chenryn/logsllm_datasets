For instance, rule A drops any USB packets writing
data into any external USB storage devices. Later on,
the user decides to block write operations only for
the Kingston thumb drive by writing rule B, which is
weak conflicted with rule A, since both rules have the
same destination and action. When the user wants to
unblock the Kingston storage by writing rule C, rule C
is strong conflicted with both rule A and B, since rule C
has a different action, and will never work as expected
because of rule A/B. By relying on the logic reasoning
of Prolog, we are able to guarantee that a rule before
added is formally verified no conflict with existing rules
3.
3Note that all rules are monotonic by design, which means rules to
be added cannot override existing ones. Future work will add general
rules, which can be overwritten by new rules.
7
enable debug mode
path to configuration file (TBD)
display this help message
dump all the rules
add a new rule
remove an existing rule
synchronize rules with kernel
enable usbfilter
disable usbfilter
change the default behavior
process table rule
device table rule
packet table rule
LUM table rule
table rule action
-d|--debug
-c|--config
-h|--help
-p|--dump
-a|--add
-r|--remove
-s|--sync
-e|--enable
-q|--disable
-b|--behave
-o|--proc
-v|--dev
-k|--pkt
-l|--lum
-t|--act
---------------------------------
proc: pid,ppid,pgid,uid,euid,gid,egid,comm
dev: busnum,devnum,portnum,ifnum,devpath,product,
manufacturer,serial
pkt: types,direction,endpoint,address
lum: name
behavior/action: allow|drop
Figure 4: The output of “usbtables -h”. The per-
mitted conditions are divided into 4 tables: the process
table, the device table, the packet table, and the Linux
USBFILTER Module (LUM) table.
Granular (G4). A USBFILTER rule can contain 21
different conditions, excluding the name and action
field. We further divide these conditions into 4 tables,
including the process, device, packet, and the Linux
USBFILTER Module (LUM) table, as shown in Figure 4.
The process table lists conditions specific to target
applications; the device table contains details of USB
devices in the system; the packet table includes impor-
tant information about USB packets; and the LUM table
determines the name of the LUM to be used if needed.
Note that all LUMs should be loaded into the kernel
before being used in USBFILTER rules.
Module Extension (G5). To support customized rule
construction and deep USB packet analysis, USBFILTER
allows system administrators to write Linux USBFIL-
TER Modules (LUMs), and load them into the kernel as
needed. To write a LUM, developers need only include
the  header file in the kernel module,
implement the callback lum_ﬁlter_urb(), and register the
module using usbﬁlter_register_lum(). Once registered,
the LUM can be referenced by its name in the construc-
tion of a rule. When a LUM is encountered in a rule,
besides other condition checking, USBFILTER calls the
lum_ﬁlter_urb() callback within this LUM, passing the
USB packet as the sole parameter. The callback returns
1 if the packet matches the target of this LUM, 0 other-
wise. Note that the current implementation supports only
one LUM per rule.
USENIX Association  
25th USENIX Security Symposium  421
5 Evaluation
The USBFILTER host machine is a Dell Optiplex 7010
with an Intel Quad-core 3.20 GHz CPU with 8 GB mem-
ory and is running Ubuntu Linux 14.04 LTS with kernel
version 3.13. The machine has two USB 2.0 controllers
and one USB 3.0 controller, provided by the Intel 7 Se-
ries/C210 Series chipset. To demonstrate the power of
USBFILTER, we first examine different USB devices and
provide practical use cases which are non-trivial for tra-
ditional access control mechanisms. Finally we measure
the overhead introduced by USBFILTER.
The default behavior of USBFILTER in our host ma-
chine is to allow the USB packet if no rule matches the
packet. A more constrained setting is to change the de-
fault behavior to drop, requiring each permitted USB de-
vice to need an allow rule. In this setting, malicious de-
vices have to impersonate benign devices to allow com-
munications, which are still regulated by the rules, e.g.,
no HID traffic allowed for a legit USB storage device.
All tests use the same front-end USB 2.0 port on the ma-
chine.
5.1 Case Studies
Listen-only USB headset. The typical USB headset
is a composite device with multiple interfaces includ-
ing speakers, microphone, and volume control. Sen-
sitive working environments may ban the use of USB
headsets due to possible eavesdropping using the micro-
phone [17]. Physically disabling the headset microphone
is often the only mechanism for permanently removing
it, as there is no other way to guarantee the microphone
stays off. Users can mute or unmute the microphone
using the desktop audio controls at any time after lo-
gin. However, with USBFILTER, the system administra-
tor can guarantee that the headset’s microphone remains
disabled and cannot be enabled or accessed by users.
We use a Logitech H390 Headset to demonstrate how
to achieve this guarantee on the USBFILTER host ma-
chine:
usbtables -a logitech-headset -v ifnum=2,product=
"Logitech USB Headset",manufacturer=Logitech -k
direction=1 -t drop
This rule drops any incoming packets from the
Logitech USB headset’s microphone. By adding the
interface number (ifnum=2), we avoid breaking other
functionality in the headset.
Customizing devices. To further show how USBFIL-
TER can filter functionalities provided by USB devices,
we use Teensy 3.2 [29] to create a complex USB de-
vice with five interfaces including a keyboard, a mouse,
a joystick, and two serial ports. The keyboard contin-
ually types commands in the terminal, while the mouse
continually moves the cursor. We can write USBFILTER
rules to completely shutdown the keyboard and mouse
functionalities:
usbtables -a teensy1 -v ifnum=2,manufacturer=
Teensyduino,serial=1509380 -t drop
usbtables -a teensy2 -v ifnum=3,manufacturer=
Teensyduino,serial=1509380 -t drop
In these rules, we use condition “manufacturer” and “se-
rial” (serial number) to limit the Teensy’s functionality.
Different interface numbers represent the keyboard and
the mouse respectively. After these rules applied, both
the keyboard and the mouse return to normal.
Default-deny input devices. Next, we show how to de-
fend against HID-based BadUSB attacks using USBFIL-
TER. These types of devices are a type of trojan horse;
they appear to be one device, such as a storage device,
but secretly contain hidden input functionality (e.g., key-
board or mouse). When attached to a host, the device
can send keystrokes to the host and perform actions as
the current user.
First, we create a BadUSB storage device using a Rub-
ber Ducky [18], which looks like a USB thumb drive but
opens a terminal and injects keystrokes. Then we add
following rules into the host machine:
usbtables -a mymouse -v busnum=1,devnum=4,portnum=2,
devpath=1.2,product="USB Optical Mouse",
manufacturer=PixArt -k types=1 -t allow
usbtables -a mykeyboard -v busnum=1,devnum=3,
portnum=1,devpath=1.1,
product="Dell USB Entry Keyboard",
manufacturer=DELL -k types=1 -t allow
usbtables -a noducky -k types=1 -t drop
The first two rules whitelist the existing keyboard and
mouse on the host machine; the last rule drops any USB
packets from other HID devices. After these rules are
inserted into the kernel, reconnecting the malicious de-
vice does nothing. Attackers may try to impersonate the
keyboard or mouse on the host machine. However, we
have leveraged information about the physical interface
(busnum and portnum) to write the first two rules,
which would require the attacker to unplug the existing
devices, plug the malicious device in, and impersonate
the original devices including the device’s VID/PID
and serial number. We leave authenticating individual
USB devices to future work, however USBFILTER is
extensible so that authentication can be added and used
in rules.
Data exfiltration. To prevent data exfiltration from the
host machine to USB storage devices, we write a LUM
(Linux USBFILTER Module) to block the SCSI write
command from the host to the device, as shown in Fig-
ure 9 in the Appendix. The LUM then registers itself
with USBFILTER and can be referenced by its name in
422  25th USENIX Security Symposium 
USENIX Association
8
rule constructions. In this case study, we use a Kingston
DT 101 II 2G USB flash drive, and insert the following
rule:
Prolog Engine Min Avg Med Max Dev
Time (20 rules) 128.0 239.8 288.0 329.0 73.2
Time (100 rules) 132.0 251.7 298.0 485.0 78.6
usbtables -a nodataexfil -v manufacturer=Kingston
-l name=block_scsi_write -t drop
This rule prevents modification of files on the stor-
age device.
Interestingly, vim reports files on the de-
vice to be read-only, despite the filesystem reporting that
the files are read-write. Since USBFILTER is able to trace
packets back to the applications initiating I/O operations
at the Linux kernel block layer, we are able to write rules
blocking (or allowing) specific users or applications from
writing to flash drive:
usbtables -a nodataexfil2 -o uid=1001
-v manufacturer=Kingston
-l name=block_scsi_write -t drop
usbtables -a nodataexfil3 -o comm=vim
-v manufacturer=Kingston
-l name=block_scsi_write -t drop
The first rule prevents the user with uid=1001 from
writing anything to the USB storage; the second blocks
vim from writing to the storage. We can also block any
writes to USB storage devices:
usbtables -a nodataexfil4
-l name=block_scsi_write -t drop
USBFILTER logs dropped USB packets, and these logs
can easily be used in a centralized alerting system, noti-
fying administrators to unauthorized access attempts.
Webcam pinning. Webcams can easily be enabled and
accessed by attackers from exploiting vulnerable appli-
cations. Once access has been established, the attacker
can listen or watch the environment around the host com-
puter. In this case study, we show how to use USBFILTER
to restrict the use of a Logitech Webcam C310 to specific
users and applications.
usbtables -a skype -o uid=1001,comm=skype -v
serial=B4482A20 -t allow
usbtables -a nowebcam -v serial=B4482A20 -t drop
The serial number of the Logitech webcam is spec-
ified in the rules to differentiate any others that may
be attached to the system as well as to prevent other
webcams from being attached. The first rule allows
USB communication with the webcam only if the user is
uid=1001 and the application is Skype. The following
nowebcam rule drops other USB packets to the webcam
otherwise. As expected, the user can use the webcam
from his Skype but not from Pidgin, and other users
cannot start video calls even with Skype.
Table 1: Prolog reasoning time (µs) averaged by 100
runs.
then injects spoofed DNS replies into the host. The re-
sulting man-in-the-middle attack gives the attacker ac-
cess to the host’s network communications without the
authorization of the user. To prevent this attack, we use
USBFILTER to prevent all USB packets from a Google
Nexus 4 smartphone:
usbtables -a n4-charger -v product="Nexus 4" -t drop
This rule rule drops any USB packets to/from the
phone, which enforces the phone as a pure charging de-
vice without any USB functionality. The phone is unable
to be used for storage or tethering after the rule is applied.
We can construct a more specific charge-only rule:
usbtables -a charger -v busnum=1,portnum=4 -t drop
This rule specifies a specific physical port on the host
and this port can only be used for charging. This type
of rule is useful where USB ports may be exposed (e.g.,
on a point of sale terminal) and cannot be physically
removed.
It is also vital to defend against malicious
devices whose firmware can be reprogrammed to forge
the VID/PID such as BadUSB, since this type of rule
only leverages the physical
information on the host
machine. USBFILTER can partition all physical USB
ports and limit the USB traffic on each port.
5.2 Benchmarks
We first measure the performance of the user-space tool,
USBTABLES. We then measure the overhead imposed by
USBFILTER.
The measurement host is loaded with the rules men-
tioned in the case studies above before beginning bench-
marking. When coupled with the default rules provided
by USBFILTER, there are 20 total rules loaded in the ker-
nel. We chose 20 because we believe that a typical en-
terprise host’s USB devices (e.g., keyboard, mouse, re-
movable storage, webcam, etc.) will total less than 20.
Then we load 100 rules in the kernel to understand the
scalability of USBFILTER.
USB charge-only. Another form of BadUSB attacks is
DNS spoofing using smartphones. Once plugged into the
host machine, the malicious phone automatically enables
USB tethering, is recognized as a USB NIC by the host,
5.2.1 Microbenchmark
USBTABLES Performance. We measure the time used
by the Prolog engine to formally verify a rule before it is
added into the kernel. We loaded the kernel with 20 and
USENIX Association  
25th USENIX Security Symposium  423
9
Figure 5: Filebench throughput (MB/s) using
fileserver workload with different mean
file sizes.
Figure 6: Iperf bandwidth (MB/s) using TCP
with different time intervals.
Figure 7: Iperf bandwidth (MB/s) using UDP
with different time intervals.
Figure 8: Performance comparison of real-
world workloads.
Rule Adding Min Avg Med Max Dev
0.3
Time (20 rules)
5.1
Time (100 rules) 4.9
0.4
5.9
5.9
6.1
6.1
6.6
6.8
Table 2: Rule adding operation time (ms) averaged by
100 runs.
Stock Kernel
USB Enumeration Min Avg Med Max Dev Cost
32.0 33.9 34.1 34.8 0.6 N/A
USBFILTER (20 rules) 33.2 34.4 34.3 35.8 0.7 1.5%
USBFILTER (100 rules) 33.9 34.8 34.6 36.0 0.5 2.7%
Table 3: USB enumeration time (ms) averaged by 20
runs.
100 rules and measured the time to process the rules. For
each new rule, the Prolog engine needs to go through the
existing rules and check for conflicts.
We measured 100 trials of each test. The performance
of the Prolog engine is shown in Table 1. The average
time used by the Prolog engine is 239.8 µs with 20
rules and 251.7 µs with 100 rules. This fast speed is the
result of using GNU Prolog (gplc) compiler to compile
Prolog into assembly for acceleration. We also measure
the overhead for USBTABLES to add a new rule to the