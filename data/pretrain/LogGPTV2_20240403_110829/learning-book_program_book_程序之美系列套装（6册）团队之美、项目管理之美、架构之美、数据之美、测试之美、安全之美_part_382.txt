创建或依赖的潜在安全危险。
1.1习得性无助和无从选择
社会学家和心理学家发现人类和其他动物存在一种现象，这种现象
称为习得性无助。它来源于个人在实现自已的目标或者摆脱坏习惯
时屡次遭受的挫折。最终，动物们会采取极端的毁灭性措施，就是
从内心深处放弃尝试。即使在出现了实现目标的机会或者存在逃脱
的良机时，动物们也会表现得很消极，无法利用这些机会。
为了证明即使是资深和理智的软件工程师也会受这个畏缩毛病的影
响，我将描述一个由于向后兼容所导致的不良安全性的例子。
向后兼容是现有的技术部署一直存在的一个问题。发现新的技术，
并需要部署到不兼容的（甚至在本质上不同的）现有解决方案中。
在系统演化的每个时刻，开发商需要决定是否必须结束现有解决方
案的生命，还是提供一条迁移路径或者设计一种方法允许遗留解决
方案能够与现代解决方案共存。这样的决定在商业和技术的角度上
往往存在很大的分歧。但是，决定通常是从商业的角度作出的，开
发人员和工程师必须照办口。出现这种情况时，负责创建实际实现
方案的人们就会产生这样一个印象，就是决定已经作出，他们只要
照章办理就可以了，不需要进一步的评估或考虑。
2203
---
## Page 2205
想象一下有这样一个决策，在进行技术替换时要求维护与旧技术的
兼容。管理层进一步决定，以后不会再向遗留解决方案提供进一步
的开发或支持工作，这是为了鼓励现有的顾客迁移到新的替代解决
方案。
尽管这种决策在许多方面向开发过程施加了压力（涉及安全问
题），但是当一个解决方案（通常是新技术）比其他解决方案更为
安全时，无疑会更加引人注目。事实上，新技术的并发常常明确要
求满足更高的安全需求，但是仍然必须支持旧技术。在这种情况下
会产生什么安全问题呢？
实现向后兼容可以采取不同的方法，有些方法较之其他方法更为安
全。但是，一旦并发人员理解了需要让更旧、更缺乏安全的技术继
续存活时，那些常常可以缓解这种风险的解决方案往往就不在考虑
之列。焦点集中在新技术上，遗留技术将在最大限度地减少遗留效
果的情况下被嵌入到新技术中（或反过来）。总之，实际新技术的
开发队伍通常并不是开发遗留代码的队伍，他们的最终目标是想方
设法移植遗留解决方案，是不是这样呢？
最直接的解决方案是对新技术的健壮性和安全强度作出妥协，以匹
配遗留解决方案。在本质上就是允许现代技术和遗留技术共存。当
开发人员在迁移遗留代码的漏洞时想不出可以做什么（或更糟，想
不出应该做什么）时，就出现了习得性无助。遗留代码对他们施加
了压力，他们觉得这不应该在他们的职责范围之内（即使把新技术
降低到旧技术的水平而影响了它的安全性）。对于公司的决策，他
们觉得不知道做什么好，感觉力不从心。
1.1.1实例：Microsoft是如何允许L0phtCrack的
数年前，为了帮助系统管理员发现漏洞，我编写了一个密码破解工
具，用于恢复Microsof的用户密码。当时，这个工具称为
LOphtCrack，后来重命名为LC5。再后来，Symantec（得到了它的版
权）担心违反国际武器限制公约（ITAR）而将它停用了。②网络和
技术书籍上有许多文章描述了LophtCrack的工作原理，但没人关注它
为什么会起作用。LOphtCrack所利用的MicrosofWindows的漏洞可能
会产生什么影响呢？
事实上，这个工具直接利用了Windows的加密程序的实现和使用中
所存在的大量问题。所有这些问题都源于各种版本的Windows（直
2204
---
## Page 2206
到Vista）中继续使用的遗留LANManager（LANMAN）的散列函
数。它的散列表示形式尽管基于已经成熟的数据加密标准
（DES），但并没有包含salt。另外，LANMAN中的密码不区分大小
写。这个函数把14个字符（或更短）的密码分解为2个7字节的值
每个值根据同一个键进行加密，并连接在一起。当我于20世纪90年
代后期在BugTrag的一个帖子上描述这个问题时，基本的加密序列是
（见图1-1）：
图1-1LANMANI旧算法的总结
1）如果密码小于14个字符，就用mull字符填满，以便为密码保留14
个字符的空间。反之，如果密码大于14个字符，就将它截断。
2）把14个字符的密码转换为大写形式，并把它分割成7个字符的两
半。注意，如果原密码为7个或更少的字符，那么后半部分总是7个
null字符。
2205
---
## Page 2207
3）把7个字符的每半部分转换为一个8字节的检校DES键。
4）使用前面所提到的每个键对一个已知的常量（"KGS！@#$%"）
进行DES加密。
5）把两个输出连接在一起，形成LMHASH表示形式。
由于许多技术上的原因，这种选择组合存在问题。
WindowsNT的开发人员意识到了LANMAN散列的脆弱性，并使用一
种更健壮的算法进行密码信息的存储，称为NT散列。它维护字符的
大小写情况，允许密码长于14个字符，并使用更现代的MD4信息摘
录产生它的16字节散列值。
遗憾的是，Windows系统在每个密码的更健壮版本旁边继续存储更
脆弱的版本，并在用户每次登录时同时在网络上发送这两个版本。
在网络上，更脆弱的16字节LANMAN散列值和更健壮的16字节NT散
列值都会经历下面的过程，如图1-2所示：
2206
---
## Page 2208
图1-2在网络上同时处理LANMAN和NT散列
1）用mull字符把散列值填充为21个字节。
2）把21字节的结果分割为3个7字节的子部分。
3）把每个7字节的子部分转换为8字节的检校DES键。
4）使用前面所提及的DES键，对一个8字节的挑战口令（challenge）
进行加密，它在网络上发送时是可见的。
5）把步骤4的3个8字节输出连接在一起，创建一个将通过网络发送
的24字节表示形式。
当然，Microsoft希望他们的所有顾客都升级到更新版本的Windows，
但是不敢切断使用旧版本的顾客，甚至不敢用新的散列函数对旧版
本进行更新。由于密码是网络的一个关键部分，他们不得不假设在
2207
---
## Page 2209
可预见的将来，不理解新散列函数的旧系统可以继续连接到使用更
安全的散列函数的新系统。
如果登录两端的系统都是使用新散列函数的新系统，就可以使用更
健壮的NT散列执行实际的身份认证。但是，在发送更健壮的新散列
表示形式时，必须同时发送更旧、更脆弱的LANMAN散列版本。
由于最大限度地照顾了向后兼容，而忽视了它所产生的复杂后果，
Microsof完全破坏了更新的安全技术所带来的技术优点。
LOphtCrack利用了脆弱的LANMAN密码的编码形式，并根据它的结
果破解存储在它旁边的更健壮的NTLM表示形式。即使用户选择了长
于14个字符的密码，对LANMAN散列的破解仍然要提供前14个字
符，只剩下很少一部分需要通过推断或穷举来猜测。和LANMAN不
同，NT散列区分大小写。但是，一旦脆弱的版本被破解之后，最多
只要尝试2x次（其中x是密码字符事的长度）就可以推断出NT散列的
密码大小写情况，因为每个字符最多只有2种选择（大写或小写）。
记住，x小于或等于14，因此对于穷举法来说是小意思。
尽管NTLM网络认证引入了一个挑战，可以扮演支持salt机制的角
色，但它的输出仍然包含了太多可以被攻击者看到并利用的信息
16个字节的原散列中只有2个字节进入第3个7字节部分。类似，散列
值的前半部分中只有1个字节（第8个）进入第2个7字节部分。想象
一下，如果原密码是7个字符或更短（对于粗心的用户，情况很可能
是这样）的情况。在LANMAN散列中，第2组的7个输入字节都是null
字符，因此输出散列中第9～16字节将总是相同的值。这个情况进一
步随着NTLM算法而传播。至少，它并没有设法确定24字节的NTLM
认证响应中的最后8个字节是否来自一个短于8个字符的密码。
简而言之，新的现代安全解决方案的问题来自于遗留系统的脆弱
LANMAN密码，因此把整体安全性能降低到最小公分母的水平。过
了没多久，在接收到太多的负面安全报道之后，Microsoft引入了在
默认情况下只发送一种（或另一种）散列值的功能，而不是两者都
发送。后来，他们甚至停正了在本地系统中同时存储LANMAN散列
值和NT散列值的做法。
[1]或者至少让开发人员和工程师觉得应该这样做。
[2]这不是LOphtCrack该有的结局....
1.1.2密码和身份认证可以从一开始就做得更好
2208
---
## Page 2210
我讲述这个LOphtCrack故事是为了强调一个常见的安全问题。有许多
理由支持多种安全实现，即使其中一种被认为优于其他方案。但是
如前所述，在许多情况下，这样做的原因是为了支持向后兼容。如
果对遗留系统的支持被认为是非常重要的，可以预计在协议和服务
方面将会出现相当数量的允余。
站在安全的角度，现在问题变成了如何在实现向后兼容的同时不降
低新系统的安全性。Microsof的幼稚解决方案嵌入了所有可能性中
许多不好的东西：它把不安全的散列值和更安全的散列值存储在一
起，通过网络传输这两种散列的表示形式（即使在不需要的情况
下），这就为攻击者提供了便利。
记住，习得性无助就是指一个人得出结论，他已经无能为力或者无
法通过学习来解决，而不是想方设法对手头上的情况进行实际分
析。换句话说，有人告诉你已经没有希望，并且你相信他的原因也
仅仅是因为他说“不行”。在工程任务中，习得性无助可以由处于明
显权威位置的人们所作的陈述、对向后兼容（或遗留顾客的要求）
的消极抵触以及成本或财政压力（预想或真实）而产生。
Microsoft相信遗留系统非常重要，足以阻正废弃这些系统。为此，
他们决定继续支持LM散列。
但是，他们采取了第二个关键的步骤，在选择处理遗留系统和现代
系统交互的协议问题时道使新系统同时与当前协议和遗留协议进行
对话，而没有考虑遗留系统的安全问题。其实，他们可以要求遗留
系统对一些支持登录所需要的函数进行修补，作为遗留系统的最后
升级。也许这个解决方案被拒绝的原因是它可能会设置一个危险的
前提条件，就是要求支持一些他们已经声称结束了生命的系统。类
似，他们可以选择当新旧系统都可以与更现代、更健壮的函数进行
对话时，就不在网络上同时发送新旧散列值。这可以帮助他们的旗
舰“新技术"同时提供实际的和预想的安全。
最终，由于媒体和顾客对安全脆弱性的持久抱怨，另外也由于像
LOphtCrack这样的攻击工具的出现，Microsoft决定让它们的系统避免
传递更脆弱的LANMAN散列表示形式。它显示了生产商应该选择
条不同的起始路径，允许终端用户根据自己的安全需求来配置系
统。反之，如果相信确实需要遗留系统，必须简单地把它们和新产
品放在一起，并让所有的系统把标准降低到最小公分母的水平，终
端用户就会成为牺牲品。这是开发商内部设计人员和实现人员的习
得性无助的一个例子。
2209
---
## Page 2211
Microsoft并不孤单
为了避免让读者觉得我是专门找Microsoft的茬，我提供了下面这些
平等机会（并且可能具有冒犯性）的评论。
在20世纪90年代中期至晚期，Microsof在市场和媒体上所持的立场
是它的系统比Unix更安全。Internet上的服务器大多是Unix系统，