Maybe you should look at the CTFRoom !
```
Luckily, we got it and didn't hit any overflow / division issues. Let's try one odd index. We know that `array[1] = 0x1d4;`.
```python
>>> reverse_odd = lambda x: hex(((x ^ 0x52)//2)-0x62)
>>> reverse_odd(0x1d4)
'0x61'
```
Let's try it:
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# printf '\x52\x61' > RoyalCat
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./MeowPatched
Meow Meow...
It seems you have got an interesting file...
Maybe you should look at the CTFRoom !
```
Ok, great. So we understand the mechanism. Now, we need to automate this so that the full file gets reconstructed. We could try brute forcing the file byte-by-byte with a script like this:
```python
from subprocess import check_output
from pwn import *
royal_cat_bytes = bytearray()
with log.progress('Brute forcing RoyalCat') as p:
    while True:
        p.status(f"Searching for byte #{len(royal_cat_bytes)}")
        royal_cat_bytes.append(0)
        found = False
        for b in range(256):
            royal_cat_bytes[-1] = b
            with open("RoyalCat", "wb") as f:
                f.write(royal_cat_bytes)
            out = check_output(["./MeowPatched"])
            if b"It seems you have got an interesting file" in out:
                found = True
                break
        if not found:
            break
with open("RoyalCat", "wb") as f:
    f.write(royal_cat_bytes[:-1])
```
But that would take ages, since for each byte we'd need to run the program 256 times in the worst case. Instead, we'll dump the `array` from memory and use that to reconstruct the file just like we did in the manual examples. To ensure that the array is fully initialized, we need to provide any file of `0x32eb7+1` bytes. 
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# python -c "print (b'\xff' * (0x32eb7+1))" > RoyalCat
```
We also need to bypass the `ptrace` anti-debug method. Instead of patching again, we'll do that with [this trick](https://dev.to/nuculabs_dev/bypassing-ptrace-calls-with-ldpreload-on-linux-12jl):
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# nano ptrace.c
root@kali:/media/sf_CTFs/matrix/Royal_Cat# cat ptrace.c
long ptrace(int request, int pid, void *addr, void *data) {
    return 0;
}
root@kali:/media/sf_CTFs/matrix/Royal_Cat# gcc -shared ptrace.c -o ptrace.so
```
Now we can run the program in the debugger and set a breakpoint at `validate`:
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# gdb -ex 'set environment LD_PRELOAD=./ptrace.so' -n ./MeowPatched
GNU gdb (Debian 8.3.1-1) 8.3.1
Copyright (C) 2019 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later 
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
.
Find the GDB manual and other documentation resources online at:
    .
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./MeowPatched...
(No debugging symbols found in ./MeowPatched)
(gdb) b validate
Breakpoint 1 at 0x11c9
(gdb) r
Starting program: /media/sf_CTFs/matrix/Royal_Cat/MeowPatched
Meow Meow...
Breakpoint 1, 0x00005555555551c9 in validate ()
(gdb)
```
We want to dump `array` which is the second parameter to `validate`. 
```
(gdb) set disassembly-flavor intel
(gdb) disas validate, +20
Dump of assembler code from 0x5555555551c5 to 0x5555555551d9:
   0x00005555555551c5 :     push   rbp
   0x00005555555551c6 :     mov    rbp,rsp
=> 0x00005555555551c9 :     sub    rsp,0x20
   0x00005555555551cd :     mov    QWORD PTR [rbp-0x18],rdi
   0x00005555555551d1 :    mov    QWORD PTR [rbp-0x20],rsi
   0x00005555555551d5 :    mov    DWORD PTR [rbp-0x4],0x0
End of assembler dump.
(gdb) p/x $rsi
$1 = 0x7ffffff32780
```
We want to dump the array to a file:
```
(gdb) p/x ( ($rsi) + ((0x32eb7+1)*4) )
$2 = 0x7fffffffe260
(gdb) dump binary memory array.bin 0x7ffffff32780 0x7fffffffe260
```
Let's double check the values we got with the expected values we saw earlier:
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# xxd -g 4 -e array.bin | head -n 1
00000000: 00000238 000001d4 000002b8 00000154  8...........T...
root@kali:/media/sf_CTFs/matrix/Royal_Cat# xxd -g 4 -e array.bin | tail -n 1
000cbad0: 00000144 0000009c 00000140 00000096  D.......@.......
```
Looks good. Now, let's use the values to recreate the file:
```python
reverse_even = lambda x: bytes([((x ^ 100) // 4) - 0x45])
reverse_odd  = lambda x: bytes([((x ^ 0x52) // 2) - 0x62])
with open("array.bin", "rb") as f, open("RoyalCat", "wb") as o:
    index = 0
    while (dword := f.read(4)) != b"":
        value = int.from_bytes(dword, byteorder='little')
        b = reverse_even(value) if (index % 2 == 0) else reverse_odd(value)
        o.write(b)
        index += 1
```
And what do we get?
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# python3 solve.py
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ./MeowPatched
Meow Meow...
It seems you have got an interesting file...
Maybe you should look at the CTFRoom !
root@kali:/media/sf_CTFs/matrix/Royal_Cat# file RoyalCat
RoyalCat: RAR archive data, v5
```
A RAR file! let's extract it:
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# unrar l RoyalCat
UNRAR 5.91 freeware      Copyright (c) 1993-2020 Alexander Roshal
Archive: RoyalCat
Details: RAR 5
 Attributes      Size     Date    Time   Name
----------- ---------  ---------- -----  ----
*   ..A....    220164  2021-02-02 13:53  Meow.jpeg
----------- ---------  ---------- -----  ----
               220164                    1
root@kali:/media/sf_CTFs/matrix/Royal_Cat# unrar x RoyalCat
UNRAR 5.91 freeware      Copyright (c) 1993-2020 Alexander Roshal
Extracting from RoyalCat
Enter password (will not be echoed) for Meow.jpeg:
```
Looks like this file is password protected, and we don't know the password. Time to visit the CTF Room as suggested. It contains a live stream of a ticking bomb together with some LEDs and a servo. 
![](images/royal_cat_ctf_room.png)
We are requested to enter the cat's name in order to proceed. We tried everything here. We searched every bit in the binary for a cat's name. We tried to submit common cat names, and tried them too as the RAR password. We tried to crack the RAR with `rockyou.txt`, or with a general brute force attack. We also tried searching for the cat name in other challenges (this was the last challenge we had left in order to unlock "Exclusive Bomb"). We reverse-searched the image. We searched for real-life royal cats in Google. We tried the Cheshire Cat from "Alice in Wonderland", since there's another reversing challenge named "Hatter" and since the arrow under the question mark in the CTF room reminded us of his famous grin.
We spent hours on this. Eventually, while thinking about additional ways to brute force the RAR, it occurred to us to try `hashcat`... and it worked!
![](images/royal_cat_ctf_room2.png)
At some point the creators changed the logo in the CTF room from the cat image above to the [hashcat](https://hashcat.net/hashcat/) logo, making it pretty much trivial to pass this part.
Anyway, after entering the correct name, the servo in the background displayed the following string: `A?l?d!D3?u?l9`. This is a `hashcat` pattern for brute-forcing the RAR password. We can follow [this guide](https://miloserdov.org/?p=5426) to crack the password.
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# ~/utils/john/run/rar2john RoyalCat > rar.john
root@kali:/media/sf_CTFs/matrix/Royal_Cat# cat rar.john
RoyalCat:$rar5$16$dd0d97236c58b730c8fd7c4d85c653f2$15$6af89efb4eb5dab620c901e4e8f2141b$8$907d86ab9b525ba2
root@kali:/media/sf_CTFs/matrix/Royal_Cat#  cat rar.john  | grep -E -o '(\$RAR3\$[^:]+)|(\$rar5\$.*)' > rar.hash
root@kali:/media/sf_CTFs/matrix/Royal_Cat#  cat rar.hash
$rar5$16$dd0d97236c58b730c8fd7c4d85c653f2$15$6af89efb4eb5dab620c901e4e8f2141b$8$907d86ab9b525ba2
root@kali:/media/sf_CTFs/matrix/Royal_Cat# hashcat -m 13000  -a 3 rar.hash 'A?l?d!D3?u?l9' --force
hashcat (v5.1.0) starting...
OpenCL Platform #1: The pocl project
====================================
* Device #1: pthread-Intel(R) Core(TM)2 Duo CPU     T8100  @ 2.10GHz, 512/1483 MB allocatable, 2MCU
Hashes: 1 digests; 1 unique digests, 1 unique salts
Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates
Applicable optimizers:
* Zero-Byte
* Single-Hash
* Single-Salt
* Brute-Force
* Slow-Hash-SIMD-LOOP
Minimum password length supported by kernel: 0
Maximum password length supported by kernel: 256
Watchdog: Hardware monitoring interface not found on your system.
Watchdog: Temperature abort trigger disabled.
* Device #1: build_opts '-cl-std=CL1.2 -I OpenCL -I /usr/share/hashcat/OpenCL -D LOCAL_MEM_TYPE=2 -D VENDOR_ID=64 -D CUDA_ARCH=0 -D AMD_ROCM=0 -D VECT_SIZE=4 -D DEVICE_TYPE=2 -D DGST_R0=0 -D DGST_R1=1 -D DGST_R2=2 -D DGST_R3=3 -D DGST_ELEM=4 -D KERN_TYPE=13000 -D _unroll'
* Device #1: Kernel m13000-pure.750cfacb.kernel not found in cache! Building may take a while...
* Device #1: Kernel markov_le.92f06ff5.kernel not found in cache! Building may take a while...
* Device #1: Kernel amp_a3.92f06ff5.kernel not found in cache! Building may take a while...
[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit => 
$rar5$16$dd0d97236c58b730c8fd7c4d85c653f2$15$6af89efb4eb5dab620c901e4e8f2141b$8$907d86ab9b525ba2:An7!D3Bu9
Session..........: hashcat
Status...........: Cracked
Hash.Type........: RAR5
Hash.Target......: $rar5$16$dd0d97236c58b730c8fd7c4d85c653f2$15$6af89e...525ba2
Time.Started.....: Fri Feb 19 09:55:17 2021 (4 mins, 0 secs)
Time.Estimated...: Fri Feb 19 09:59:17 2021 (0 secs)
Guess.Mask.......: A?l?d!D3?u?l9 [9]
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:      122 H/s (7.93ms) @ Accel:256 Loops:64 Thr:1 Vec:4
Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress.........: 29184/175760 (16.60%)
Rejected.........: 0/29184 (0.00%)
Restore.Point....: 28672/175760 (16.31%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:32768-32799
Candidates.#1....: Av0!D3Jr9 -> Ay3!D3Ng9
Started: Fri Feb 19 09:54:39 2021
Stopped: Fri Feb 19 09:59:18 2021
```
The password found by `hashcat` is `An7!D3Bu9`:
```console
root@kali:/media/sf_CTFs/matrix/Royal_Cat# unrar x -pAn7\!D3Bu9 RoyalCat
UNRAR 5.91 freeware      Copyright (c) 1993-2020 Alexander Roshal
Extracting from RoyalCat
Extracting  Meow.jpeg                                                 OK
All OK
```
The flag was in the image: `MCL{Ar3_Y0U_Look1n9_FoR_M3?}`