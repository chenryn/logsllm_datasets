29 
30 
31 
32 
33 
34 
35 
36 
Allocated OSString objects 
Used memory chunks 
July 27-30, 2017  
Heap spray and OOB branch to vtable 
Allocated OSString objects 
Used memory chunks 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
Deallocated OSString objects 
July 27-30, 2017  
Heap spray and OOB branch to vtable 
Allocated OSString objects 
Used memory chunks 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
Deallocated OSString objects 
Out of bounds branch to 
next OSString vtable 
July 27-30, 2017  
o  Heap spray OSString objects  
o  Make few OSDictionary with OSString 
o  Trigger OSDictionary deallocation 
o  retain() -> deref next free chunk pointer 
o  Free chunk is surrounded by OSStrings 
o  retain() ->%OOB branch to next OSString node 
Getting vtable – next free node trick 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – dump over panic 
o  OSString vtable reference in OSUnserializeBinary! 
o  OSUnserializeBinary reference in OSUnserializeXML 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
July 27-30, 2017  
Getting vtable – dump over panic 
o  Crash in OSUnserializeBinaryXML 
o  Copy panic log from a watch 
o  Get LR register value from panic 
o  We got OSUnserializeBinaryXML address 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Dumping kernel by panic logs 
o  retain() offset in vtable is 0x10 
o  Use address to leak as vtable_addr - 0x10 
o  vtable will be interpreted and branch to address 
o  Kernel will crash, but save panic log 
o  Address content appear in panic registers state 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Dumping kernel by 4 bytes 
o  Use address to leak as fake vtable address%
o  Watch will crash, wait until it restore 
o  ssh to a iPhone and run synchronization service 
o  Copy panic from Watch to iPhone and to Mac 
o  Parse panic, read 4 bytes and disassemble ! 
o  Update address with 4 bytes delta and upload app 
o  Repeat 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
It’s fun ! 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
OSString vtable in kernel 
OSString vtable offset 
OSUnserializeBinary address 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Getting vtable – final steps 
o  Crash in OSUnserializeXML 
o  Dump 4 bytes, disassemble, read opcode 
o  Leak opcode until ‘BL OSUnserializeBinary’ 
o  Leak OSUnserializeBinary opcodes 
o  Finally leak OSString vtable offset 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Getting vtable – results 
o  5 minutes for recover watch after crash 
o  5 minutes to fetch panic from watch 
o  2 minutes to copy to Mac and parse 
o  No way to automate a process 
o  It takes me just 2 weeks to dump a vtable 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Next step – full kernel dump 
o  Now use fake OSString obj to read kernel 
o  Read data via IORegistryEntryGetProperty 
o  Leak kernel header, calculate kernel size 
o  Dump full kernel to userland by chunks 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Next step – kernel symbolication 
o  Find and list all kexts 
o  Find sysent and resolve syscalls 
o  Find and resolve mach traps 
o  Resolve IOKit objects vtable 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Next step – setting up primitives 
o  Scan kernel dump for gadgets 
o  Set up exec primitive 
o  Set up kernel read & write primitives 
STR%%%%%%%%%%%%R1,%[R2]%
BX%%%%%%%%%%%%%%LR%
LDR% %%%%%%%%%%R1,%[R2]%
BX%%%%%%%%%%%%%%LR%
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Next step – kernel structs layout 
o  Look for proc_* functions 
o  Restore proc structure layout 
o  Dump memory, check for known values 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
July 27-30, 2017  
Next step – patchfinder 
o  memmem string \ byte pattern 
o  + xref + instruction analysis 
o  Resolve syscalls table, mach traps table 
o  Simple instruction emulation 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Next step – kernel structs layout 
o  memmem string \ byte pattern 
o  + xref + instruction analysis 
o  Resolve syscalls table, mach traps table 
o  Simple instruction emulation 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Getting root and sandbox bypass 
o  Patch setreuid (no KPP) 
o  patch ucred in proc structure in kernel 
o  patch sandbox label value in ucred 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Getting kernel task 
o  Patch task_for_pid() 
o  Or save kernel sself in task bootstrap port 
o  Read it back via task_get_special_port() 
o  Restore original bootstrap port value 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Disable codesign checks 
o  Patch _debug to 1 
o  patch _nl_symbol_ptr (got) entries 
o  Patch amfi variables 
 - cs_enforcement_disable 
 - allow_invalid_signatures 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Remount rootfs 
o  Patch __mac_mount 
o  Change flags in rootfs vnode and mount RW 
o  Patch lwvm is_write_protected check 
o  Patch PE_i_can_has_debugger in lwvm 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Spawning ssh client 
o  Compile dropbear for ARMv7k%
o  Compile basic tools package for ARMv7k 
o  Problem: More sandbox restrictions 
o  Remove WatchOS specific sandbox ops 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
 ssh connection problem… 
"awdl0/ipv6"%=%"fe80::c837:8аﬀ:fe60:90c2";%
"lo0/ipv4”%%%%%%=%"127.0.0.1";%
"lo0/ipv6"%%%%%%=%"fe80::1";%
"utun0/ipv6"%=%"fe80::face:5e30:271e:3cd3";%
o  WatchOS interfaces 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
 Watch  iPhone port forwarding 
NSDictionary *comm = @{!
@"Command" :@"StartForwardingServicePort",                            
@"ForwardedServiceName" :@"com.apple.syslog_relay",!
@"GizmoRemotePortNumber" :[NSNumber numberWithUnsignedShort: pt],!
@"IsServiceLowPriority" :@0,};!
!
AMDServiceConnectionSendMessage(serviceConnection,!
                               (__bridge CFPropertyListRef)(comm), 
  kCFPropertyListXMLFormat_v1_0);!
!
AMDServiceConnectionReceiveMessage(serviceConnection, &response, 
 (CFPropertyListFormat*)&format);!
!
NSNumber *iphone_port = response[@"CompanionProxyServicePort"];!
Thanks to Luca Todesco 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
 ssh connection over bluetooth 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Black Hat Sound Bytes 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
July 27-30, 2017  
Apple Watch usage 
o  Watch has access to SMS, Calls, Health%
o  Photos and emails synced to Watch 
o  Fetch GPS location from the phone 
o  Microphone usage 
o  Apple Pay 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
July 27-30, 2017  
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
July 27-30, 2017  
Interesting findings  
o  Full access to jailbroken watch file system 
o  Including sqlite3 databases 
 - Messages 
 - Call history 
 - Contacts 
 - Emails 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
July 27-30, 2017  
What's next ? 
o  Interpose or trampoline system functions 
o  Catch data on sync with a iPhone 
o  Create tweaks for a watch 
o  Run frida and radare 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
July 27-30, 2017  
Takeaways 
o  WatchOS security is equal to iOS 
o  But new techniques required 
o  Easier data forensics on a Watch 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
July 27-30, 2017  
References 
o  Lookout - Technical Analysis of the Pegasus Exploits on iOS 
o  Luca Todesco - com.apple.companion_proxy client 
o  Siguza - tfp0 powered by Pegasus 
o  Stefan Esser - iOS 10 - Kernel Heap Revisited 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72 
July 27-30, 2017  
@mbazaliy 
61 
62 
63 
64 
65 
66 
67 
68 
69 
70 
71 
72