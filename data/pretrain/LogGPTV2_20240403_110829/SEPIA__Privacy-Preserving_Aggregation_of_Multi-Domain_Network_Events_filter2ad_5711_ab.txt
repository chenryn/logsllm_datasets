on the input parameters. We design protocols that run
in O(l) rounds and are therefore not constant-round, al-
though, once the ﬁeld size p is deﬁned, the number of
rounds is also ﬁxed, i.e., not varying at runtime. The
overall local running time of a protocol is determined by
i) the local CPU time spent on computations, ii) the time
to transfer intermediate values over the network, and iii)
delay experienced during synchronization. Designing
constant-round protocols aims at reducing the impact of
iii) by keeping the number of rounds ﬁxed and usually
small. To achieve this, high multiplicative constants for
the number of multiplications are often accepted (e.g.,
279l). Yet, both i) and ii) directly depend on the num-
ber of multiplications. For applications with few parallel
operations, protocols with few rounds (usually constant-
round) are certainly faster. However, with many paral-
lel operations, as required by our scenarios, the impact
of network delay is amortized and the number of multi-
plications (the actual workload) becomes the dominating
factor. Our evaluation results in Section 5.1 and 5.4 con-
ﬁrm this and show that CPU time and network bandwidth
are the main constraining factors, calling for a reduction
of multiplications.
Equality Test In the ﬁeld Zp with p prime, Fermat’s lit-
tle theorem states
cp−1 =(0 if c = 0
1 if c 6= 0
(1)
Using (1) we deﬁne a protocol for equality test as fol-
lows:
equal([a], [b]) := 1 − ([a] − [b])p−1
The output of equal is [1] in case of equality and [0] oth-
erwise and can hence be used in subsequent computa-
tions. Using square-and-multiply for the exponentiation,
we implement equal with l + k − 2 multiplications in l
rounds, where k denotes the number of bits set to 1 in
p − 1. By using carefully picked prime numbers with
k ≤ 3, we reduce the number of multiplications to l + 1.
In the above example for comparing IPv4 addresses, this
reduces the multiplication count by a factor of 76 from
2592 to 34.
Besides having few 1-bits, p must be bigger than the
range of shared secrets, i.e., if 32-bit integers are shared,
an appropriate p will have at least 33 bits. For any secret
size below 64 bits it is easy to ﬁnd appropriate ps with
k ≤ 3 within 3 additional bits.
Less Than For less-than comparison, we base our im-
plementation on Nishide’s protocol [28]. However, we
apply modiﬁcations to again reduce the overall number
of required multiplications by more than a factor of 10.
Nishide’s protocol is quite comprehensive and built on a
stack of subprotocols for least-signiﬁcant bit extraction
(LSB), operations on bitwise-shared secrets, and (bit-
wise) random number sharing. The protocol uses the ob-
servation that a  p/2, a wrap-around will occur and LSB(2a) = 1.
Knowing one of the predicates in advance, e.g., because
b is not secret but publicly known, saves one of the three
LSB calls and hence 1/3 of the multiplications.
Due to space restrictions we omit to reproduce the
entire protocol but focus on the modiﬁcations we ap-
ply. An important subprotocol in Nishide’s construc-
tion is P ref ixOr. Given a sequence of shared bits
[a1], . . . , [al] with ai ∈ {0, 1}, P ref ixOr computes the
sequence [b1], . . . , [bl] such that bi = ∨i
j=1aj. Nishide’s
P ref ixOr requires only 7 rounds but 17l multiplica-
tions. We implement P ref ixOr based on the fact that
bi = bi−1 ∨ ai and b1 = a1. The logical OR (∨) can
be computed using a single multiplication: [x] ∨ [y] =
[x] + [y] − [x][y]. Thus, our P ref ixOr requires l − 1
rounds and only l − 1 multiplications.
Without compromising security properties, we re-
place the P ref ixOr in Nishide’s protocol by our opti-
mized version and call the resulting comparison proto-
col lessT han. A call of lessT han([a], [b]) outputs [1]
if a  ˆi reporting a reconstructed event
r = (k, w) is computed by reusing all the equal operations performed on r in the aggregation step. That is, input peer i′
reports r iff Pj equal([k], [ki′j]) equals 1. This can be computed using local addition for each remaining input peer and
each reconstructed event. Finally, all reconstructed events are sent to all input peers.
Figure 2: Algorithm for event correlation protocol.
1. Share Generation: Each input peer i shares its in-
put vector di = (x1, x2, . . . , xr) among the PPs.
That is, the PPs obtain n vectors of sharings [di] =
([x1], [x2], . . . , [xr]).
2. Summation: The PPs compute the sum [D] =
1. Share Generation: Each input peer holds an r-
dimensional private input vector si ∈ Zr
p representing
the local item histogram, where r is the number of items
and si
k is the count for item k. The input peers share all
elements of their si among the PPs.
Pn
i=1 [di].
3. Reconstruction: The PPs reconstruct all elements of
D and send them to all input peers.
2. Summation: The PPs compute the item counts [sk] =
k=1 [sk] is
k]. Also, the total count [S] = Pr
i=1 [si
Pn
computed and reconstructed.
Figure 3: Algorithm for vector addition protocol.
square-and-multiply.
3. Exponentiation: The PPs compute [(sk)q] using
paring [a] to the element in the middle of the list, here
called [b∗]. We then construct a new list, being the
ﬁrst or second half of the original list, depending on
lessT han([a], [b∗]). The procedure is repeated recur-
sively until the list has size 1. This allows us to compare
all events of two input peers with only O(s log2 s) in-
stead of O(s2) comparisons. To further reduce the num-
ber of equal operations, the protocol can be adapted to
receive incremental updates from input peers. That is, in-
put peers submit a list of events in each time window and