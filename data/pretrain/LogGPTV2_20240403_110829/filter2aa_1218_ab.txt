    (?:  # optionally followed by =value 
        (?:  # equals sign, possibly with encoding 
            \*\s*=\s*  # * indicates extended notation 
            (?:  # optional encoding 
                (?P[^\s]+?) 
                '(?P[^\s]*?)' 
            )? 
        | 
            =\s*  # basic notation 
        ) 
        (?P 
            "[^"\\]*(?:\\.[^"\\]*)*"  # quoted string 
        | 
            [^;,]+  # token 
        )? 
    )? 
    \s* 
    """, 
multipart-parse.md
5/19/2021
10 / 33
这个正则可以解释本文的⼤多数flask解析结果产⽣的原因，这⾥看到flask对于boundary两边的空格是做了处理
的，对于双引号的处理，都会取第⼀对双引号内的内容作为boundary的值，对于非闭合的双引号，会处理成
token形式，将双引号作为boundary的⼀部分，并不会像php⼀样解析boundary失败。
从上⾯正则也能看出，对于最后⼀种Content-Type的情况，flask也会取空值作为boundary的值，但是这不会同
过flask对boundary的正则验证，导致boundary取值失败，⽆法解析，下文会提及到。
转义符号
以flask的正则中quoted string和token作为区分是否boundary为双引号内取值，测试两种转义符的位置会怎
样影响解析。
\在token中
Content-Type: multipart/form-data; boundary=I_am_a\"_boundary
这种形式的boundary，flask和php都会将\认定为⼀个字符，并不具有转义作⽤，并将整体的
I_am_a\"_boundary内容做作为boundary的值。
\在quoted string中
multipart-parse.md
5/19/2021
11 / 33
Content-Type: multipart/form-data; boundary="I_am_a\"_boundary"
对于flask来说，在双引号的问题上，werkzeug/http.py:L431中调⽤⼀个处理函数，就是取双引号之间
的内容作为boundary的值。
可以看到，在取完boundary值之后还做了⼀个value.replace("\\\\", "\\").replace('\\"',
'"')的操作，将转义符认定为具有转义的作⽤，⽽不是单单⼀个字符，所以最终boundary的值是
I_am_a"_boundary。
对于php来说，依旧和token类型的boundary处理机制⼀样，认定\只是⼀个字符，不具有转义作⽤，所
以按照上文双引号中提到的，由于遇到第⼆个双引号就会直接闭合双引号，忽略后⾯内容，最终php会
取I_am_a\作为boundary的值。
multipart-parse.md
5/19/2021
12 / 33
空格 & 双引号
上文提到使⽤空格对解析的影响，既然可以使⽤双引号来指定boundary的值，那么如果在双引号外或者内加入
空格，后端会如何解析呢？
双引号外
对于flask来说，依旧和普通不加双引号的解析⼀致，会忽略双引号外（两边）的空格，直接取双引号内
的内容作为boundary的值，php对于双引号后⾯有空格时，处理机制和flask⼀致，但是当双引号前⾯有
空格时，会⽆法正常解析表单数据内容。
解析会和不带双引号的实现⼀致，此时php会将前⾯的空格和后⾯的双引号和双引号的内容作为⼀个整
体，将之作为boundary的值，当然这虽然符合RFC规定的boundary可以以空格开头，但是把双引号当作
boundary的⼀部分并不符合。
multipart-parse.md
5/19/2021
13 / 33
双引号内
此时php会取双引号内的所有内容（非双引号）作为boundary的值，⽆论是以任意空格开头还是结束，
其分隔⾏中boundary前后的空格数，要与Content-Type中双引号内boundary前后的空格个数⼀致，否则
解析失败。
值得注意的是，flask解析的时候，如果双引号内的boundary值以空格开始，那么在分隔⾏中类似php只
要空格个数⼀致，就可以成功解析，但是如果双引号内的boundary的值以空格结束，⽆论空格个数是否
⼀致，都⽆法正常解析。
multipart-parse.md
5/19/2021
14 / 33
想知道为什么出现这种状况，只能看下werkzeug是如何实现的，flask对boundary的验证可以在
werkzeug/formparser.py:L46看到。
#: a regular expression for multipart boundaries 
_multipart_boundary_re = re.compile("^[ -~]{0,200}[!-~]$") 
这个正则是来验证boundary有效性的，比较符合RFC规定的，只不过在⻓度上限制更⼩，可以是空格开
头，不能以空格结尾，但是⽤的不是全匹配，所以以空格结尾也会通过验证。
上图使⽤boundary= " I_am_a_boundary "，所以boundary的值为" I_am_a_boundary "双引号内的
内容，⽽且这个值也会通过boundary正则的验证，最终还是解析失败了，很是是奇怪。上文空格中提
到，对于flask来说，在分隔⾏中boundary后可以加任意空格不影响最终的解析的。
原因是解析multipart/form-data具体内容时，为了寻找分割⾏，将每⼀⾏数据都进⾏了⼀个
line.strip()操作，这样会把CRLF去除，当然会把结尾的所有空格也给strip掉，所以当boundary不以
空格结尾时，在分隔⾏中可以随意在结尾加空格。但是这也会导致⼀个问题，当不按照RFC规定，⽤空格
结尾作为boundary值，虽然过了flask的boundary正则验证，但是在解析body时，却将结尾的空格都strip
掉，导致在body中分隔⾏经过处理之后变为了-- I_am_a_boundary，这与Content-Type中获取的
boundary值（结尾含有空格）并不⼀致，导致找不到分隔⾏，解析全部失败。
结束分隔⾏
在上文空格内容中提到，php在结束分割⾏中的boundary后⾯加空格并不会影响最终的解析，其实并不是空格
的问题，经测试发现，其实php根本就没把结束分隔⾏当回事。
multipart-parse.md
5/19/2021
15 / 33
可以看到，没有结束分隔⾏，php会根据每⼀分隔⾏来分隔各个表单部分，并根据Content-Length来进⾏取表
单最后⼀部分的内容的值，然⽽这是极不尊重RFC规定的，⼀般waf会将这种没有结束分隔⾏的视为错误的
multipart/form-data格式，从⽽导致整体body解析失败，那么waf可以被绕过。
上文提到flask会对multipart/form-data的每⼀⾏内容进⾏strip操作，但是由于结束分隔⾏需要以--结尾，所以
在strip的过程中只会将CRLFstrip掉，但是在解析boundary的时候，boundary是不能以空格为结尾的，最终会导
致结束分隔⾏是严谨的--BOUNDARY--CRLF，当然如果使⽤双引号使boundary以空格结尾，那么结束分隔⾏是
可以正确解析的，但是非结束分隔⾏⽆法解析还是会导致整体解析失败。
其他
从flask的代码能够看出来，⽀持参数名的quoted string形式，就是参数名在双引号内。
⽽对于Java来说，⽀持参数名的⼤⼩写不敏感的写法。
multipart-parse.md
5/19/2021
16 / 33
3. Content-Disposition
对于multipart/form-data类型的数据，通过分隔⾏分隔的每⼀部分都必须含有Content-Dispostion，其类型为
form-data，并且必须含有⼀个name参数，形如Content-Disposition: form-data; name="name"，如果这
部分是文件类型，可以在后⾯加⼀个filename参数，当然filename参数是可选的。
空格
经常和waf打交道的都知道，随便⼀个空格，可能就会发⽣奇效。对于Content-Disposition参数，测试在四个位
置加任意的空格。
原本有空格的位置
Content-Disposition: form-data; name="key1"; filename="file.php"
Content-Disposition: form-data; name="key1" ; filename="file.php"
Content-Disposition: form-data; name="key1" ; filename="file.php"
Content-Disposition: form-data ; name="key1" ; filename="file.php"
前三种类型，php和flask解析都是准确的。
multipart-parse.md
5/19/2021
17 / 33
但是第四种对于Content-Disposition: form-data ;来说，php解析准确，认为其是正常的
multipart/form-data数据，然⽽flask解析失败了，并且直接返回了500（：
这⾥flask处理Content-Disposition的⽅式是和request_header中Content-Type是⼀致的，经过了r",\s*
([^;,\s]+)([;,]\s*.+)?"匹配，由于空格导致后⾯的name和filename⽆法解析，只不过这种情况会
返回500。对于后续的name和filename得解析也是和request_header中Content-Type⼀致，后⾯匹配中的
group作为rest进⾏后续的正则匹配，匹配⽤到的正则，是上文第2部分（Boundary）双引号中的
_option_header_piece_re。
参数名和等于号之间
Content-Disposition: form-data; name ="key1"; filename="file.php"
Content-Disposition: form-data; name="key1"; filename ="file.php"
flask正常解析
multipart-parse.md
5/19/2021
18 / 33
php解析失败，不仅第⼀部分数据⽆法解析，第⼆部分非文件参数也解析失败，可⻅php解析会将
name=/filename=作为关键字匹配，当发现name=和filename=都不存在时，直接不再解析了，这与
boundary的解析是不⼀样的，使⽤Content-Type: multipart/form-data; boundary
=I_am_a_boundary⼀样可以正常解析处boundary的值。
如果我们不在name和等于号之间加空格，只在filename和等于号之间加空格，形如Content-
Disposition: form-data; name="key1"; filename ="file.txt"，那么php会将这种解析会非文
件参数。
multipart-parse.md
5/19/2021
19 / 33
如果waf⽀持这种多余空格形式的写法，那么将会把这种解析为文件类型，造成解析上的差异，waf错把
非文件参数当作文件，那么可能绕过waf的部分规则。
参数值和等于号之间
Content-Disposition: form-data; name= "key1"; filename= "file_name"
php和flask解析正常。
参数值中
这个没啥注意的，flask会按照准确的name解析。
php会忽略开头的空格，并把非开头空格转化为_，具体原因可以看php-variables。
multipart-parse.md
5/19/2021
20 / 33
重复参数
重复name/filename参数名
php和flask都会取最后⼀个name/filename，从flask代码来看，存储参数使⽤了字典，由于具有相同的
key=name，所以最后在解析的时候，遇到相同key的参数，会进⾏参数值的覆盖。
这种重复参数名的⽅式，在下文中将结合其他⽅式进⾏绕过waf。
重复name/filename参数名和参数值
接着尝试重复整个form-data的⼀部分，构造这样⼀个数据包进⾏测试。
--I_am_a_boundary 
Content-Disposition: form-data; name="key3"; filename="file_name.asp" 
Content-Type: text/plain;charset=UTF-8 
This_is_file_content. 
--I_am_a_boundary 
Content-Disposition: form-data; name="key3"; filename="file_name.jsp" 
Content-Type: text/plain;charset=UTF-8 
multipart-parse.md
5/19/2021
21 / 33
This_is_file2_content. 
--I_am_a_boundary 
Content-Disposition: form-data; name="key5"; 
Content-Type: text/plain;charset=UTF-8 
aaaaaaaaaaaa 
--I_am_a_boundary 
Content-Disposition: form-data; name="key5"; 
Content-Type: text/plain;charset=UTF-8 
bbbbbbbbbbbb 
--I_am_a_boundary-- 
对于php来说，和在同⼀个Content-Disposition中重复name/filename⼀致，会选取相同name部分中最后
⼀部分。
对于flask来说，带有filename的，会取第⼀部分，⽽且相同name的非文件参数，会将两个取值作为⼀个
列表解析。
其实这⾥是httpbin处理后的结果，为了准确看到flask解析结果，需要直接查看