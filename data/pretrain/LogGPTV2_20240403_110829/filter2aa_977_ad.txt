In a mesh topology, an originator may request intermediate devices to forward its outgoing frame towards the final destination. The RFC 
4944 states that, in such a case, the frame shall include a mesh addressing header. This field is formatted as the combination of a 2-bits flag, 
indicating that the following fields are part of the mesh addressing header, a 1-bit field indicating if the originator has been using its 16-bit 
short or 64-bit extended address, another 1-bit field indicating if the final destination address is a 16-bit short or a 64-bit extended address, 
a 4-bit hop limit and both the originator and the final destination addresses, formatted as indicated in the previous fields. 
When detecting such a header, an intermediate device would consult its routing table and replace both the source and the destination 
addresses of the link layer by its IEEE 802.15.4 address and, regarding the routing table response, either the final destination or another 
intermediate IEEE 802.15.4 address, respectively. Concerning the mesh addressing header, the hop limit is decremented by one while the 
others fields are left unchanged such as it can be used by another intermediate device to forward the packet.  
When receiving an IPv6 frame from the TUN, the router has to deal with such a routing table. It has to send the frame to the proper 
intermediate device such as the frame can be forwarded towards the final destination the user was trying to reach. If the scanner has been 
provided with the database our IEEE 802.15.4 scanner is intended to generate, the router would be able, at a certain extent, to retrieve this 
information. In fact, we added a mechanism in the scanner that aims at retrieving the routing path for each pair of 6LoWPAN devices 
communicating on the network. If the path could not have been retrieved, the frame is sent by using the mesh addressing header with the 
proper originator and final destination addresses anyway but the link layer destination address would be the broadcast address (0xffff).  
4.4.6 BROADCAST / MULTICAST 
IEEE 802.15.4 does not natively support multicasting. Thus, IPv6 multicast frames shall be handled as link-layer broadcast packets in IEEE 
802.15.4 networks. To do so, the link-layer destination PANID shall be set to the proper value, such as it matches the PAN ID of the 
corresponding link. Moreover, the link layer destination address shall be the 16-bit short broadcast address (0xffff). By this way, it ensures 
that multicasting will be handled by the right upper layer.  
Note that multicasting is only supported only on mesh networks. Thus, each IPv6 multicast frames will always be encapsulated with the 
mesh addressing header, the header we described on section 9. It will also be encapsulated with a broadcast header known as 
LOWPAN_BC0 in the RFC 4944, right after the mesh addressing header. It is formatted as the combination of an 8-bits flag, indicating 
that the next fields are part of the broadcast header, and an 8-bits sequence number, used for detecting duplicated packet.  
When our tool detects an IPv6 frame whose destination address is a multicast address, we simply add both the mesh addressing and the 
broadcast headers before sending it in broadcast (link-layer point of view) on the proper PANID.  
4.4.7 SUPPORTED FEATURES 
So we could describe some of the main features the router was supporting. Most part of them are directly derived from both the RFC 4944 
and the RFC 6882 while others like the NDP table we implemented are used to improve the tool behavior in an auditing point of view. 
We could see that they were actually up to six adaptation layer headers which can be added to the IPv6 frame to enable its transmission 
over IEEE 802.15.4. Note that, when several LOWPAN headers are used in the same packet, they shall appear in the following order:  
Mesh addressing header 
Broadcast header 
Fragmentation header (First or subsequent) 
Compression header (IPv6 compressed header and/or Next Header compressed header) 
Remember that when compressing IPv6 header and Next header, each field which could not have been full elided are carried in line, either 
in a compressed form or literally. Also remember that when carried in-line, fields or subfield appear in the same order as they do in their 
corresponding uncompressed header. 
4.5 6LOWPAN TO IPV6 
Here we explain how incoming 6LoWPAN packets are handled by the router before being transmitted to the “computer” through the TUN.  
Note that the scanner will not care about frames that are not indicating its link level address (the IEEE 802.15.4 address the user chose 
when starting the router). We assume in the following section that the link layer destination address is actually the router one.  
4.5.1 MESH ROUTING 
When capturing a 6LoWPAN frame whose first header’s flag indicates a mesh addressing header, the tool first check if the frame is 
directed to it by checking the final destination field of the mesh addressing header.  
If so, the corresponding header is removed and next headers are handled. If no header follows the mesh addressing header, the frame is 
directly transmitted to the TUN just after ensuring the IPv6 destination address was the router one.  
If the scanner infers that the frame does not indicate it as a recipient, by checking both the final destination and the IPv6 destination 
address, the frame is simply rejected. 
4.5.2 BROADCAST / MULTICAST 
After having removed the mesh addressing header, if a Broadcast header is present (i.e. the header’s flag indicating a broadcast header), it 
is simply removed and next headers are handled.  
If no further headers are present, and if the IPv6 multicast address indicates a group ID in which router is included, the packet is transmitted 
to the TUN. Otherwise, if the router is not indicated as a recipient, the frame is rejected.  
4.5.3 FRAGMENT REASSEMBLY 
When detecting a 6LoWPAN first fragment packet, the router stores it and waits for the following subsequent packets to be captured. When 
all frames are captured, the frame is reassembled. Then, the next headers of the reconstituted packet are handled. 
If no further headers are present and if the IPv6 address indicates an IPv6 address that match its address, the packet is transmitted to the 
TUN. Otherwise, if the IPv6 destination address is not the one of the scanner, the packet is rejected.  
4.5.4 HEADERS DECODING 
If a compressed IPv6 header is detected, the frame is uncompressed to retrieve the real IPv6 header. If, while handling the IPv6 compressed 
header, the scanner sees that the next header is a compressed UDP header, it also tries to retrieve the real UDP header. 
At the end of this process, if the retrieved IPv6 destination address is not the one of the scanner, the packet is rejected. Otherwise, the frame 
is transmitted to the TUN. 
5. IEEE 802.15.4 ATTACKS 
The 6LoWPAN protocol can rely on the security mechanisms offered by the IEEE 802.15.4 standard at the MAC-sublayer level. In this 
section, we focus on known attacks that affect the IEEE 802.15.4 standard. It is worth mentioning that we will not consider attacks that 
only impact availability [6] because, even if they could be prevented, in the end, a determined malicious individual could still resort to 
radio-based PHY jamming attacks. That means that we will focus on attacks that can impact confidentiality or integrity. 
5.1 SAME-NONCE ATTACKS 
Same-nonce attacks are possible if, at least, two frames are encrypted with identical key and nonce: with AES-CTR, data is XORed with a 
key stream based on a nonce and a pre-shared key (see Figure 2 for details). An identical operation is conducted to decrypted secured 
frames (see Figure 3 for details). If a nonce is used repeatedly, key streams remain identical and if two such frames are captured, it may be 
possible to decrypt them [5]. To illustrate this, let’s consider that P and P’ are two payloads, C and C’ the two corresponding encrypted 
payloads and K, the key stream for both payloads. We thus have C⊗C’ = (P⊗K) ⊗ (P’⊗K) = P⊗P’. From here, mutually XORed 
unencrypted payloads can be recovered using statistics or if parts of any of the two payloads are guessable. 
With the IEEE 802.15.4 standard, this can only be due to frame counters being identical. It will happen with certainty every 232 frames but 
it might happen sooner if outgoing frame counters are handled differently from what the standard specifies (see section 6.4.2 for an 
application). Nonetheless, this situation is not supposed to happen: the IEEE 802.15.4 standard specifies that when this higher value is 
reached, the corresponding encryption key should be deemed unreliable and no secure frames should be transmitted until it is replaced. It is 
worth mentioning that IEEE 802.15.4e [4] allows counters to be 5 octets in size which postpone this issue to 240 frames. 
It is also worth mentioning that there is a situation when, even though the standard was strictly followed, the same-nonce vulnerability 
might be exploitable: with the 2003 version of the standard, the security material, including the key and the outgoing frame counter, is 
stored independently for each device. If the same encryption key is used for two different devices, then the corresponding outgoing frame 
counters will be incremented independently and same-nonce situations might occurs during operations. 
Figure 2. Counter (CTR) mode encryption (source: Wikipedia)
Figure 3. Counter (CTR) mode decryption (source: Wikipedia) 
5.2 REPLAY ATTACKS 
According to the IEEE 802.15.4 standard, replay attacks should be prevented by the frame counters: the counter from an incoming frame is 
compared to the value of the corresponding local counter and, if lower, the incoming frame is rejected. If higher, the incoming frame is 
accepted and the local counter is updated. However, if same-nonce attacks are possible within a given IEEE 805.15.4 infrastructure, that 
means that the local frame counters may not be properly checked or updated, or that they are reset at some point (e.g., after a failure 
followed by a reboot), thus making replay attacks possible (see section 6.4.1 for an application). 
5.3 MALLEABILITY ATTACKS 
Malleability attacks rise from the combination of the two previous vulnerabilities: if a plain text can be retrieved using a same-nonce attack, 
then a simple XOR operation will reveal the corresponding keystream. From there, if a previously-used frame counter is accepted upon 
reception, instead of replaying a captured frame, an attacker could forge a new one based on the retrieved keystream and the corresponding 
counter (i.e., the encryption key is not needed in this particular situation). However, this is possible only when the chosen security suite 
does not cover integrity but only confidentiality. It is worth noting that the new IEEE 802.15.4 Scapy layer we have developed (see section 
2.2 for details) can forge secured frames by using either a given encryption key or a given list of keystreams with their corresponding frame 
counters (which must be provided by the user). 
6. TYPICAL APPLICATION 
In this section, we talk about a penetration test that we conducted, relying on the ARSEN tools, on a wireless communication infrastructure 
dedicated to the monitoring of a water distribution network system (see Figure 4). The goal of this infrastructure was to capture information 
about multiple continuous water pipes by means of electrochemical and optical sensors. It is worth noting that the sensors were powered by 
microturbines embedded within the water pipes nearby. The objective behind this infrastructure is to provide useful information to field 
technicians and to supply a large volume of data to a distributed water management system. On that aspect, the wireless communications 
relied on the IEEE 802.15.4 standard to build a star network and on the 6LoWPAN and UDP protocols to transport the actual information. 
Figure 4. Two smart sensors from the wireless monitoring infrastructure 
As previously stated, the goal of the ARSEN project is to provide security auditors with the means to connect their computer to an existing 
6LoWPAN network no matter what the configuration of the underlying IEEE 802.15.4 infrastructure is. Upon reaching this goal, a standard 
penetration testing methodology may be applied, which is out of the scope of this paper. That is why, in the rest of this section, we will 
focus on the audit of the IEEE 802.15.4 star network which had three objectives: 
Identifying the configuration of the IEEE 802.15.4 infrastructure; 
Identifying and exploit potential MAC-sublayer vulnerabilities; 
If possible, associate with the IEEE 802.15.4 star network; 
6.1 INFORMATION GATHERING 
Note that from now on, we will only cover the two smart sensors which we were close by (see Figure 4). We started the audit by searching 
for activities on all IEEE 802.15.4 channels using the ARSEN scanner. It showed that channel 18 was used for transmission. Then, we 
started capturing IEEE 802.15.4 frames on this specific channel. Based on the output of the ARSEN scanner (see Figure 5), we were able to 
infer the following information: 
Each sensor is exclusively communicating with the only PAN coordinator, thus confirming the star topology; 
This is a beacon-enabled PAN and the PAN coordinator transmits nothing but beacons; 
According to the frame version, the infrastructure is based on the IEEE 802.15.4-2006 standard; 
The sensors are securing their outgoing frame and are transmitting data using direct transmissions; 
The PAN coordinator does not allocate GTS; 
Figure 5. Output from the ARSEN scanner while scanning channel 18
Transmitter0: 
beacon_enabled=0x1 
pan_coord=0x1 
coord=0x1 
gts=0x0 
panid=0xabba 
short_addr=0xde00 
Transmitter1: 
short_addr=0xde02 
panid=0xabba 
Destination0: 
security_enabled=0x1 
frame_version=0x1L 
short_addr=0xde00 
coord=0x1 
command=0x0 
panid=0xabba 
data=0x5 
pan_coord=0x1 
Transmitter2: 
short_addr=0xde01 
panid=0xabba 
Destination0: 
security_enabled=0x1 
frame_version=0x1L 
short_addr=0xde00 
coord=0x1 
command=0x0 
panid=0xabba 
data=0x4 
pan_coord=0x1 
Note that, as shown by the scanner output in Figure 5, we could not get the long addresses of the sensors as they only use short addresses to 
communicate, implying that they rely on a mapping mechanism to get the long addresses from the short ones, notably with secured frames. 
6.2 SYNCHRONIZATION STATE 
However, we found out that by flooding the sensors it was quite easy to make them loose synchronization with the PAN coordinator. In 
fact, based on a trial and error approach, we were able to determine that sensors are tracking periodic beacons and, when receiving a lot of 
frames, they cannot acquire the expected beacons in time, giving rise to a synchronization-loss state. As a result, by capturing IEEE 
802.15.4 frames after forcing the resynchronization of sensors, we were able to acquire the complete addressing information (see Figure 6).  
Figure 6. Output from the ARSEN scanner while forcing resynchronization
Transmitter0: 
beacon_enabled=0x1 
pan_coord=0x1 
coord=0x1 
long_addr=0x158d000053da9d 
gts=0x0 
panid=0xabba 
short_addr=0xde00 
Destination0: 
frame_version=0x0L 
short_addr=0xde01 
command=0x1 
panid=0xabba 
data=0x0 
long_addr=0x158d00005405a6 
Destination1: 
frame_version=0x0L 
short_addr=0xde02 
command=0x1 
panid=0xabba 
data=0x0 
long_addr=0x158d0000540591 
Transmitter1: 