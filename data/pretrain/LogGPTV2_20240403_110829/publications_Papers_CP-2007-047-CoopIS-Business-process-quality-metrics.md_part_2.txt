P4 P16
where p is the probability of following a specific path at runtime.
i
Arbitrary Cycles Loop pattern (P10). The arbitrary cycle pattern is a mechanism
for allowing sections of a workflow where one or more activities can be done
repeatedly (i.e. a loop). Figure 4 shows an example of the use of the arbitrary cycle
pattern.
wf2
+
p
wf1 wf3
+ +
Exclusive
choice
Fig. 4. The arbitrary cycle pattern
At runtime, one of the following scenarios can occur:
wf -wf P =1-p
1 3 0
wf -wf -wf P =p(1-p) * 1* LBC(wf )
1 2 3 1 x 2
wf -wf -wf -wf P =p2(1-p) * 2 * LBC(wf )
1 2 2 3 2 x 2
wf -wf -wf -wf -wf P =p3(1-p) * 3 * LBC(wf )
1 2 2 2 3 3 x 2
...
wf -wf -…-wf -wf P =pL-1(1-p) * (L-1) * LBC(wf )
1 2 2 3 L-1 x 2
wf -wf -…-wf -wf P =(pL(1-p)+pL+1)* L * LBC(wf )
1 2 2 3 L x 2
The variable P (for 0≤j≤L, L=maximum number of iterations) indicates the
j
probability of a specific case to occur at runtime when the probabilities of repeating
and escaping the loop are p and (1-p), respectively, in every iteration (0<p<1). It is
assumed to force a compulsorily escape from the loop after L iterations (the
probability of such a case is pL+1). Therefore, we can calculate the log-based
complexity of the loop as follows:
(wf)=⎜⎛ ∑L−1 )⎟⎞
LBC pj(1−p)×j×LBC (wf +(pL(1−p)+pL+1)×L×LBC (wf )
P10 x 2 x 2
⎝j=0 ⎠
Interleaved parallel routing pattern (P17). In this pattern, a set of activities is
executed with no specific order. The performers of the activities will decide the order
of the activities. Each task in the set is executed and no two activities are executed at
the same moment. It is not until one task is completed that the decision on what to do
next is taken.
wf
wf1
+
wfs wfe
+ +
wfn
+
Fig. 5. The interleaved parallel routing pattern
Figure 5 illustrates the interleaved parallel routing pattern. Once sub-workflow wf is
s
completed, a token is transferred to the set of sub-workflow wf , …, wf . The token
1 n
will be assigned to one of the sub-worklfows wf , wf ,…, or wf and then transferred
1 2 n
to another sub-workflow until all the sub-workflows are completed. This is done
sequentially. Since all sub-workflows will be activated at some point in time in any
order, we have n! permutations for the sub-workflows, therefore the log-based
complexity is:
n
LBC (wf)=n!×∏LBC (wf )
P17 xi i
i=1
4 Aggregating the complexity of workflow patterns
Having devised custom metrics for each workflow pattern, we can calculate the LBC
of workflows. Our approach to calculate the overall log-based complexity of a
workflow consists in the stepwise collapsing of the workflow into a single node by
alternately aggregating workflow patterns. The algorithm that we use repeatedly
applies a set of workflow transformation rules (based on the workflow patterns that
we have analyzed) to a workflow until only one atomic task remains. Each time a
transformation rule is applied, the workflow structure changes. After several iterations
only one task will remain. When this state is reached, the remaining task contains the
complexity corresponding to the initial workflow under analysis.
Figure 6 illustrates the set of transformation rules that are applied to an initial
workflow to compute the log-based complexity. To the initial process, illustrated in
Figure 12.a), we apply patterns LBC and LBC . The resulting process is illustrated
T P13
in Figure 12.b). To this new process we apply patterns LBC , LBC , LBC , and
T P1 P5
LBC . The process suffers various transformations as shown in Figures 12.c) and
P13
Figure 12.d). Finally, after the last transformation, only one task remains (Figure 12.e)
and this task (ABCDEnEF) contains the overall complexity of the workflow which is
5.75. This indicates that the initial workflow can generates, on average (since the
workflow is non-deterministic) 5.75 distinct process logs.
LBCT(B1)=1 LBCT(B2)=1 LBCT(B3)=1
B1 B2 B3
A LBCT(D1)=1 LBCT(D2)=1 F
condition1
D1 D2
C
n
Let us assume n=3
conditionn E1 E2
a) LBCP13=n!=6
LBCP1(B)=1·1·1=1
B
+ LBC =0
A Let us assume LBC P1(D)=1·1=1 P5 F
p1=0.25
p2=0.75 p1 D
C LBCT(E1)=1
p2 E1 nE2
+
b) LBCP1(EnE)=1·6=6 LBCP13(nE2)=n!=6
LBCP2 LBCP3=0
B
+
A F
LBC(C)=1
T
C DEnE
+
LBCP4(DEnE)=0.75·6+0.25·1=4.75
LBCP1(CDEnE)=4.75
c)
LBCT(A)=1 LBCT(F)=1
A BCDEnE F ABCDEnEF
+ +
LBCP1(ABCDEnEF)
LBCP2=(4.75+1)!/4.75!+1! =5.75
=5.75!/4.75!
=5.75!/4.75! = 5.75
d) e)
Fig. 6. Log-based complexity computation
5 Conclusions
Recently, a new approach to workflow analysis has been proposed and targets the
development of Business Process Quality Metrics (BPQM) to evaluate workflow
models. One particular class of quality metrics has the goal of analyzing the
complexity of workflow models. This analysis enables to identify complex workflows
that require reparative actions to improve their comprehensibility. To enlarge the
number of approaches available to analyze workflows, in this paper, we presented the
log-based complexity (LBC) metric to calculate the complexity of workflows. Our
approach consisted of devising a complexity metric based on the number of process
logs that are generated when workflows are executed. Our complexity metric is a
design-time measurement and can be used to evaluate the difficulty of producing a
workflow design before its implementation.
This work was partially funded by FCT, POCTI-219, and FEDER.
References
1. Verbeek, H.M.W., T. Basten, and W.M.V.d. Aalst, Diagnosing workflow processes using
woflan. The Computer Journal, 2001. 44(4): p. 246-279.
2. Gruhn, V. and R. Laue. Adopting the Cognitive Complexity Measure for Business Process
Models. in 5th IEEE International Conference on Cognitive Informatics. 2006. Beijing,
China: IEEE Computer Society
3. Latva-Koivisto, A.M., Finding a complexity measure for business process models. 2001,
Helsinki University of Technology, Systems Analysis Laboratory: Helsinki
4. Cardoso, J., et al. A Discourse on Complexity of Process Models. in BPI’06 - Second
International Workshop on Business Process Intelligence, In conjunction with BPM 2006.
2006. Vienna, Austria: Springer-Verlag, Berlin, Heidelberg.
5. Gruhn, V. and R. Laue. Complexity Metrics for Business Process Models. in 9th
International Conference on Business Information Systems. 2006. Klagenfurt, Austria: GI.
6. Vanderfeesten, I., et al., Quality Metrics for Business Process Models, in Workflow
Handbook 2007, L. Fischer, Editor. 2007, Future Strategies Inc.: Lighthouse Point, FL,
USA. p. 179-190.
7. Cardoso, J., Evaluating Workflows and Web Process Complexity, in Workflow Handbook
2005, L. Fischer, Editor. 2005, Future Strategies Inc.: Lighthouse Point, FL, USA. p. 284-
290.
8. Aalst, W.M.P.v.d., et al., Workflow Patterns. Distributed and Parallel Databases, 2003.
14(3): p. 5-51.
9. Cardoso, J. Process control-flow complexity metric: An empirical validation. in IEEE
International Conference on Services Computing (IEEE SCC 06). 2006. Chicago, USA:
IEEE Computer Society.
10. Mendling, J., Testing Density as a Complexity Metric for EPCs, Technical Report JM-2006-
11-15. 2006, Vienna University of Economics and Business Administration, Austria.
11. Cardoso, J. About the Data-Flow Complexity of Web Processes. in 6th International
Workshop on Business Process Modeling, Development, and Support: Business Processes
and Support Systems: Design for Flexibility. 2005. Porto, Portugal.
12. Reijers, H.A. and I.T.P. Vanderfeesten, Cohesion and Coupling Metrics for Workflow
Process Design, in BPM 2004 (LNCS 3080), J. Desel, B. Pernici, and M. Weske, Editors.
2004, Springer-Verlag: Berlin, Heidelberg. p. 290-305.
13. Aalst, W.M.P.v.d., et al. Advanced Workflow Patterns. in Seventh IFCIS International
Conference on Cooperative Information Systems. 2000. Eilat, Israel.