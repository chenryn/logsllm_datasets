For instance, whenever you access and start to in-
teract with our Apps, we are able to identify your
IP address, system conﬁguration, browser type and
other sorts of information arising from your device.
We may aggregate that data in order to improve our
Apps and other services we provide, but we will not
exploit it commercially or disclose it without your
consent, except for third-party service providers in
order to enable the existence of our Apps and the
provision of our services.
First, they never explicitly mention the data types, but it could
arguably fall under the vague umbrella phrase, “other sorts
of information arising from your device.” Second, the lan-
guage is unclear and potentially deceptive, because the policy
initially implies that device data is not sent to third-parties
for commercial reasons. However, it adds an exception for
enabling the “existence of their application,” which may be
interpreted as the revenue from selling user data to advertisers.
While our POLICHECK classiﬁed this policy as containing
omitted disclosures, it is unclear whether this is actually the
case and requires analysis by a legal expert. The language that
this policy uses is signiﬁcantly difﬁcult to interpret and that
its behaviors should be disclosed more clearly to end-users.
To measure the impact of entities in ﬂow-to-policy consis-
tency, we simulated the error rate of entity-insensitive consis-
tency models (i.e., models that do not consider entities) by
running consistency analysis in the following three conﬁgu-
rations: (1) without entities and without negations (negation-
insensitive and entity-insensitive); (2) without entities (entity-
insensitive); and (3) without negations (negation-insensitive).
Based on the output of the entity-insensitive consistency anal-
ysis, we aim to measure the potential error rate. First, we
measure the frequency in which third-party data ﬂows are
reasoned over using policy statements with semantically un-
related entities (i.e., f .e (cid:54)(cid:118)ε p.e). This ﬁrst metric measures
when unrelated policy statements are used to reason whether
a ﬂow is consistent. Second, we measure the frequency in
which third-party data ﬂows are classiﬁed as consistent in the
entity-insensitive consistency models that would have been
classiﬁed as consistent in the inconsistent in entity-sensitive
consistency models. This second metric measures when un-
related policy statements cause entity-insensitive models to
falsely claim that a data ﬂow is consistent when it is in fact
inconsistent. Further, we also measure how these different
conﬁgurations of consistency models impact the classiﬁcation
of disclosure types.
Finding 8: Prior entity insensitive ﬂow-to-policy consistency
models may wrongly classify up to 37.1% of inconsistent
third-party ﬂows as consistent. We ﬁrst ran analysis simu-
lating negation-insensitive and entity-insensitive consistency
models, such as Slavin et al. [29] and Wang et al. [32]’s mod-
els. We found that 53.9% (22,959/ 42,592) of third-party
ﬂows were falsely resolved to policy statements that discuss
semantically unrelated entities. Of those resolved statements,
39.8% (16,931/ 42,592) referenced ﬁrst-parties and 14.2%
(6,028/ 42,592) references a semantically unrelated third-
party. In terms of consistency, 37.1% (15,807/ 42,592) of
third-party ﬂows were falsely marked as consistent across
38.4% (5,304/ 13,796) of applications. Of those results, 23.0%
(9,779/ 42,592) were due to ﬁrst-party policy statements and
14.2% (6,028/ 42,592) due to third-party policy statements
with a semantically unrelated entity. Therefore, negation-
insensitive and entity-insensitive models falsely mark 23.0%
inconsistencies as consistent.
We next ran consistency analysis simulation entity-
insensitive consistency models, such as Zimmeck et al. [38].
We found 55.8% (23,775/ 42,592) of third-party ﬂows were
improperly resolved to policy statements that discuss se-
mantically unrelated entities. Of those resolved statements,
41.6% (17,698/ 42,592) resolved to policy statements refer-
encing ﬁrst-parties and 14.3% (6,077/ 42,592) resolved to
third-parties. In terms of consistency, 30.5% (13,014/ 42,592)
of third-party data ﬂows are falsely marked as consistent
across 32.2% (4,445/ 13,796) of applications. Of those re-
sults, 16.3% (6,937/ 42,592) were due to ﬁrst-party policy
USENIX Association
29th USENIX Security Symposium    997
Table 4: Sensitivity Analysis of Flow-to-Policy Consistency: Entity-insensitive models frequently misclassify data ﬂows
(-, c, d)
(cid:88)
216
(e, -, d)
(cid:88)
223
X
39
25,578
14,409
0
0
5,354
0
0
0
X
1,856
9,852
0
5,081
5,533
PoliCheck
(-, -, d)
(cid:88)
223
X
223
3,180
17,149
22,964
2,087
25,578
14,409
1,930
3,463
Clear
Vague
Omitted
Incorrect
Ambiguous
* (-, -, d): entity-insensitive and negation-insensitive
* (-, c, d): entity-insensitive and negation-sensitive
* (e, -, d): entity-sensitive and negation-insensitive
0
0
0
0
0
18,122
2,087
558
2,298
statements and 14.3% (6,077/ 42,592) due to third-party pol-
icy statements with a semantically unrelated entity. Therefore,
entity-insensitive models falsely mark 30.5% of inconsisten-
cies as consistent.
Finding 9: Entity-insensitive analysis results in the frequent
misclassiﬁcation of disclosure types. Table 4 shows the re-
sults of our sensitivity analysis for classifying each disclosure
type. Overall, entity-insensitive consistency models have the
worst performance at classifying disclosure types, as they sig-
niﬁcantly overestimate the number of clear disclosures and
vague disclosures. Negation-insensitive consistency models
cannot detect incorrect disclosures or ambiguous disclosures,
which correspond to 4.2% and 7.6% of data ﬂows, respectively.
With negation-insensitive consistency models, the incorrect
disclosures or ambiguous disclosures are wrongly classiﬁed
as either clear disclosures or vague disclosures, which is con-
cerning as these models would state that the data ﬂow is
consistent with the policy. While consistency models that
are negation-sensitive and entity-insensitive (-, c, d) can the-
oretically identify incorrect disclosures and ambiguous dis-
closures, the results show that their identiﬁcation of these
disclosure types are imprecise due to not considering entities.
The results from this analysis demonstrate both the impor-
tance of entity-sensitive and negation-sensitive analysis at
classifying disclosure types and the unprecedented view that
POLICHECK’s ﬂow-to-policy consistency model provides on
privacy disclosures.
6 Additional Case Studies
The examples in Section 2 provide real-world case-studies
that demonstrate POLICHECK’s utility, the signiﬁcance of our
ﬁndings, and the importance of an entity-sensitive consistency
model. In this section, we provide additional case studies
from our analysis of the most inconsistent applications for
each consistency type (i.e., the applications in the long tail in
Figure 9). We analyzed each data ﬂow, the policy statements
extracted, and the privacy policy itself to validate the ﬁndings.
The remainder of this section presents concrete examples.
Figure 9: The majority of applications have less than ﬁve data
ﬂows for each disclosure type, but a small percentage have
signiﬁcantly more.
6.1 Omitted Disclosures
We investigated applications in our dataset with high numbers
of omitted data ﬂows. “Survival Island Games - Survivor
Craft Adventure” (com.gamefirst.chibisurvivor) is a game
with over 500K installs on Google play. We found that the
app collects the user’s location data, Android ID, and MAC
address to share with advertisers and analytics providers. Its
privacy policy does not discuss any details regarding data
sharing. Omitted disclosures are grave concerns, especially in
cases like the one above, which involves tracking the user’s
physical location along with persistent identiﬁers.
While validating omitted disclosures, we found another
application called “Cloudventure: Arcade + Editor” (at.ha-
kkon.pufpuf.android) that has an omitted disclosure of Ad
ID being shared with AdColony. The privacy policy is copied
below in entirety, which shows the potential deceptiveness of
their policy.
Okay guys listen up, I’m forced to write this privacy
policy or Google will take this APP from the store.
- There is an option in the app to share your level
with your friends. This is made by making a screen-
shot of your screen and is the reason why camera
permission is needed.
998    29th USENIX Security Symposium
USENIX Association
05101520Number Unique Flows0.00.20.40.60.81.0Cumulative Ratio of Apps with a DataflowAmbiguousIncorrectOmittedVagueClear- Also this is a game so you don’t want the
screen to go dark while playing, right? That’s
why I need the phone state permission.
(an-
droid.permission.READ_PHONE_STATE)
That’s it, this app is not evil and I’m not selling
your data to some crazy marketing company to get
you ﬁlled up with spam.
Incorrect Disclosures
6.2
Three of the top ﬁve applications that had the greatest number
of incorrect disclosures were released by the same publisher,
“Nazara Games.” Their games on Google Play have over 57
million total downloads for 33 applications (eight of which
occur in our dataset). They publish games with an E rating,
which may be used by targeted towards children, but still
collect a wide-array of privacy-sensitive data. From the 8
applications in our dataset, we found 95 ﬂows originating
from Nazara Games applications, of which, 75 had incorrect
disclosures. Their application “Chhota Bheem Speed Rac-
ing” (com.nazara.tinylabproductions.chhotabheem-22002)
has over 10M+ downloads and has 15 incorrect disclosures
detected by POLICHECK. These ﬂows included location data,
Android IDs, Ad IDs, IMEIs, router SSIDs, and other serial
numbers. Nazara Games’ applications sent this data to 14
distinct advertisers and analytics providers, such as Flurry,
ironSource, and Unity3d Ads. As some of their applications
targeted towards children, the mass collection and sharing of
this sensitive user data is egregious. Even more so when con-
sidering that they’re sending this information is likely being
used to target ads towards children.
In Nazara Games’ privacy policies, that they do not sell or
rent personal information unless the user gives consent.
Nazara does not sell or rent your Personal Informa-
tion to third-parties for marketing purposes without
your consent.
As some of these applications are for children, veriﬁable con-
sent is required from the child’s legal guardian according to
regulations [2]. As discussed by prior work [27], clicking a
button likely does not constitute veriﬁable consent. For the ap-
plications that are not targeted towards children, it is unclear
if consent is explicitly request or implicitly through accep-
tance of the policy. We leave it as future work to analyze how
applications are requesting consent.
6.3 Ambiguous Disclosures
“Roller Coaster Tycoon 4” (com.atari.mobile.rct4m) is a
popular game from Atari which has over 10M downloads.
We found that this application has 15 ambiguous disclosures
due to their sharing of Ad IDs, Android IDs, and IMEI with ad-
vertisers and analytics providers, such as TapJoy, ironSource,
and AdColony. Atari does not consider device information
to be PII. However, various regulations [1, 3] identify such
information as PII, as they can be used to identify users over
a long span of time across different applications and services.
The main source of ambiguous disclosures were due to state-
ments regarding allowing business partners to collect device
identiﬁers, but then stating that third-parties will not collect
device identiﬁers without consent.
The “Bowmasters” game application (com.miniclip.bowm-
asters) has over 50M downloads and 12 unique ambiguous
disclosures. Their policy states “We don’t give or sell your
data to third-parties for them to market to you”, but later it
states, “On our apps, these third-party advertising companies
will collect and use your data to provide you with targeted
advertising.” As serving targeted advertisements is a form of
marketing, this policy contradicts itself and is ambiguous in
terms of the ﬂow.
7 Limitations
POLICHECK provides a concise formalization of an entity-
sensitive ﬂow-to-policy consistency model and disclosure
types. Our ﬁndings from Section 2, Section 5, and Section 6
demonstrate the utility and value of such analysis. However, as
the current implementation of POLICHECK is built on top of
PolicyLint [4] and AppCensus [6], we inherit their limitations.
For example, PolicyLint’s performance depends on the com-
pleteness of the verb lists a policy statement patterns, which
may impact overall recall. PolicyLint also does not extract the
purpose of collection, which we leave as future work. Further,
the data ﬂows used by POLICHECK may also be incomplete
if the behaviors were not executed during runtime due to lack
of code coverage. In addition, POLICHECK only tracks the
data types in Table 2. Future work can improve completeness
of policy statement extraction and dynamic analysis, which
can then be used as input to POLICHECK.
Another limitation is that POLICHECK’s domain-to-entity
mapping may be incomplete, as our study is primarily focused
on popular advertisers and analytics providers. POLICHECK’s
approach for classifying ﬁrst-party entities also has the poten-
tial for misclassifying third-party ﬂows as ﬁrst-parties if the
privacy policies are hosted on third-party domains. However,
misclassiﬁcation would also require a data ﬂow to that domain
within the application, which was not observed during vali-
dation. Additional techniques are also required for resolving
cloud hosts and content-delivery networks to entities, such
as Razaghpanah et al.’s certiﬁcate-based approach [23]. As
discussed in Section 5, we discard data ﬂows where the en-
tity could not be resolved. Therefore, a more comprehensive
mapping and resolution will improve the completeness of our
analysis but will not impact the soundness of our empirical
study in terms of the classiﬁcation of disclosure types. Future
work can explore more comprehensive approaches for resolv-
ing domains and IP addresses to entities and constructing
domain-to-entity mappings.
USENIX Association
29th USENIX Security Symposium    999
Moreover, while POLICHECK correctly reasons over third-
party disclosures that are disclosed in terms of parent com-
panies (i.e., subsidiary relationships), the current implemen-
tation does not capture subsidiary relationships of ﬁrst-party
disclosures. While we did not observe this limitation resulting
in false positives during validation, future work can adapt the
entity ontology based on the application under analysis to
address this limitation.