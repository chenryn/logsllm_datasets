TheCage [25] exploit demonstrated how to exploit this vul-
nerability. When tested on SE Android, the user shell cre-
ated by adbd stills runs with the root UID but transitions
to an unprivileged security context automatically based on
SELinux policy. As a result, the user shell is not allowed
any superuser capabilities and remains conﬁned.
The subtle interaction of setuid() and RLIMIT NPROC
in Linux has been the source of similar bugs in various root
daemons and setuid-root programs in conventional Linux
distributions and has led to some recent changes in the
Linux kernel [12]. As a result, recent Linux kernels defer
the resource limit failure until a subsequent call to execve(),
such that the setuid() always succeeds.
4.1.3. KillingInTheNameOf and psneuter. The Anony-
mous Shared Memory or ashmem subsystem is an Android-
speciﬁc kernel subsystem used to provide a shared memory
abstraction for inter-app data sharing. It was also originally
used to implement the global system property space man-
aged by the Android init process. A read-only mapping of
this global property space is mapped into every process on
the system and used to read the property values at any time.
CVE-2011-1149 identiﬁes multiple vulnerabilities in the
ashmem implementation with respect to the memory protec-
tion settings of the system property space [31]. These vul-
nerabilities are demonstrated by the KillingInTheNameOf
and psneuter exploits [21].
The KillingInTheNameOf exploit invokes the mprotect()
system call to add write access to its mapping of the system
property space and is then free to modify any system prop-
erty at will via direct memory write. The exploit makes
use of this ability to modify the ro.secure property value so
that it can obtain a root shell via adbd upon its next restart.
When tested on SE Android, the KillingInTheNameOf ex-
ploit is denied the attempt to add write access to the map-
ping because the policy does not allow write access to the
memory mapping owned by the init process.
The psneuter exploit makes use of a different vulnera-
bility in the ashmem implementation. It uses an ashmem-
speciﬁc ioctl command (ASHMEM SET PROT MASK) to
set a protection mask on the system property space to zero.
Upon the next re-start of adbd (or any other process), the
mask is applied on its attempt to map the system property
space and thus the mapping fails. This leads to the ro.secure
system property being treated as zero since it cannot be
read, which again provides a root shell via adb. SE Android
does not prevent this exploit from modifying the protection
mask, although the shell still transitions to an unprivileged
security context and is therefore conﬁned by SELinux.
The psneuter exploit suggests that SELinux instrumen-
tation of ashmem ioctl commands may be worth exploring
to provide better control of the security-relevant operations.
However, modern versions of Android have worked around
these issues by changing the ashmem implementation and
by switching the implementation of the init property space
from using ashmem to using a conventional Linux tmpfs ﬁle.
4.1.4. Mempodroid. The Linux proc pseudo ﬁle system
provides an interface for accessing various global sys-
tem state and for accessing per-process information. The
/proc/pid/mem ﬁle provides a kernel interface for access-
ing the memory of the process with the speciﬁed PID. In
the past, due to security concerns, this interface has been
restricted to read-only access to the memory of another pro-
cess, even for processes with the same DAC credentials. In
Linux 2.6.39, support for write access to /proc/pid/mem ﬁles
was enabled because it was believed that the prior security
concerns had been adequately addressed.
CVE-2012-0056 [34] identiﬁes a vulnerability in the
Linux kernel permission checking for /proc/pid/mem that
can be used to induce a setuid-root program into writing
its own memory. This vulnerability was demonstrated for
conventional Linux distributions via the mempodipper ex-
ploit [11] and for Android by the mempodroid exploit [16].
mempodroid makes use of the Android run-as program as
the target setuid-root program.
It invokes the setuid-root
program with an open ﬁle descriptor to /proc/pid/mem as its
standard error (stderr) stream, and passes the shellcode as an
argument string. The run-as program proceeds to overwrite
its own executable with the supplied shellcode, which sets
the UID/GID to 0 and executes a shell or command string
with full privileges.
On SE Android, we ﬁrst tested the exploit without deﬁn-
ing any speciﬁc policy for the run-as program. In this sit-
uation, the exploit will succeed in overwriting the memory
of the run-as process due to the kernel vulnerability and
can therefore execute the exploit payload with the root UID.
However, the security context of the run-as process remains
the same as its caller, and thus no privilege escalation oc-
curs. The exploit remains conﬁned by SELinux and cannot
exercise any superuser privileges or any other permissions
not allowed to the original caller.
However, under these restrictions, the run-as program
cannot perform its legitimate function for Android, i.e. en-
abling app developers to debug their own apps on pro-
duction devices. To support this functionality, we de-
ﬁned policy for the run-as program and we modiﬁed the
run-as program to switch to the correct app security con-
text before running the speciﬁed command or shell. With
these changes, the exploit fails to overwrite the memory of
the run-as process due to the SELinux ﬁle checks on the
/proc/pid/mem access. This protection blocks the exploit
completely.
Even if we allowed this access in the policy, the ex-
ploit would be limited to the permissions allowed to the
run-as program by the policy rather than having arbitrary
root access. The SE Android policy for the run-as pro-
gram only grants it the speciﬁc superuser capabilities re-
quired for its function, namely CAP DAC READ SEARCH,
CAP SETUID, and CAP SETGID. The exploit is unable to
exercise privileged operations requiring any of the other su-
peruser capabilities deﬁned by Linux, such as performing
raw I/O to devices, loading kernel modules, or remounting
partitions. Further, the policy does not allow run-as to exe-
cute any programs without ﬁrst changing to an app security
context, and thus the exploit cannot execute a command or
shell without ﬁrst shedding even these capabilities.
4.2. Application vulnerabilities
The second class of vulnerabilities that was evaluated
were Android app vulnerabilities. These are vulnerabili-
ties in legitimate Android apps that allow data to be leaked
or modiﬁed without being authorized by the user in any
way. These vulnerabilities can then be leveraged by mal-
ware in order to gain access to sensitive user data or to mod-
ify security-relevant settings.
4.2.1. Skype. The Skype app for Android provides VOIP
functionality via the Skype service. CVE-2011-1717 identi-
ﬁes a vulnerability in the Skype app in which the app stores
sensitive user data without encryption in ﬁles within its data
directory that are world readable and writable [32]. The in-
formation included the user’s account balance, date of birth,
home address, contacts, chat logs, etc. As a result, any other
app on the device could potentially read the data, and if al-
lowed INTERNET permission, could leak the data remotely.
Other apps on the device could also maliciously tamper with
the ﬁles.
This vulnerability provides a classic example of the dif-
ference between DAC and MAC. Under DAC, ﬁle permis-
sions are left to the discretion of each application and thus
are subject to intentional or accidental misconﬁguration.
Under MAC, the policy is deﬁned by the policy writer and
enforced on all applications running on the system. The SE
Android policy was conﬁgured to ensure that no app can
read or write ﬁles created by another app by assigning each
app and its ﬁles a unique MLS category. Thus, data isolation
of app data ﬁles is not dependent on the correctness of the
apps. As a result, on SE Android, although the Skype data
ﬁles are still created with weak DAC ﬁle permissions, SE
Android prevents any malicious app from reading or writ-
ing the ﬁles.
An obvious concern with this approach is that it does
not allow for intentional app data sharing via ﬁles. How-
ever, in general, Android’s own model gives preference to
app data sharing via Binder IPC rather than direct ﬁle ac-
cess. Thus, SE Android offers a way to enforce Android’s
own preferred system structure. Second, if two apps should
have fully shared access to data ﬁles, they can declare a
shared user id (as long as they are signed with the same cer-
tiﬁcate), and in this case, SE Android also will label them
with the same category, enabling such sharing. Third, the
assignment of MLS categories is conﬁgurable as part of
the seapp contexts conﬁguration, so if direct sharing by ﬁle
is required among apps with different UIDs, SE Android
can be conﬁgured to place particular sets of apps within the
same category even if they do not share the same UID and
thus allow various sharing relationships.
4.2.2. Lookout Mobile Security. The Lookout Mobile Se-
curity app for Android provides security, backup, lost de-
vice tracking, and management functionality for Android
devices [27]. A vulnerability in this app was discov-
ered where the app created conﬁguration and database ﬁles
via native calls without setting the umask for the pro-
cess, leading to the ﬁles being world-readable and world-
writable [26]. As a result, any app running on the device
could disable or reconﬁgure the Lookout app or could cause
the app to execute arbitrary code.
As in the Skype example, this example highlights the dif-
ference between DAC and MAC permissions, where a sub-
tle ﬂaw in the application (in this case, the combination of
using native calls for ﬁle creation combined with the fail-
ure to set the umask) can subvert the DAC protections alto-
gether. The SE Android policy would have prevented any
other app from reading or writing the private data ﬁles of
the Lookout app regardless of such application ﬂaws.
4.2.3. Opera Mobile. The Opera Mobile app for Android
is a version of the Opera web browser built for the Android
platform [41]. A vulnerability in this app was discovered
where the app created its cache ﬁles world-readable and
world-writable [17]. As a result, any app on the device
could both read and write to the browser’s cache, poten-
tially leaking sensitive user information and altering data or
code (e.g. JavaScript).
As with the prior vulnerabilities, this vulnerability stems
from the dependency of DAC on application correctness.
The SE Android policy would have ensured that no other
app on the device could read or write the cache ﬁles of the
browser, thereby preventing exploitation of this vulnerabil-
ity.
4.3. General analysis
In the preceding sections, we described our analysis and
testing of the impact of SE Android on speciﬁc Android ex-
ploits and vulnerabilities. That analysis and testing demon-
strated concretely that SE Android can mitigate real root
exploits and app vulnerabilities for Android. In this section,
we provide a more general discussion of what threats SE
Android can and cannot mitigate.
SE Android’s kernel layer MAC provides an effective
means of preventing privilege escalation by apps and of pre-
venting unauthorized data sharing by apps via the kernel
level interfaces. It also provides a foundation for ensuring
that higher level security functionality is unbypassable and
protected against tampering by apps. For example, SE An-
droid can rigorously ensure that hardware devices can only
be accessed by the authorized system services and not di-
rectly by apps, so that the system services can then enforce
the higher level Android permissions model. SE Android
also provides a way of protecting the integrity of apps and
their data. These same protections are provided by SELinux
for conventional Linux systems.
Similarly, the install-time MAC mechanism of SE An-
droid ensures that apps can only be installed if their re-
quested permissions are authorized by the middleware pol-
icy. This mechanism can help protect users and organi-
zations from installing untrustworthy apps with dangerous
sets of permissions, and can even be used to disable pre-
installed apps with dangerous permissions. However, this
mechanism cannot address privilege escalation attacks or
unauthorized data sharing at the middleware layer by apps
that have been allowed to be installed. Addressing such run-
time threats will require further MMAC mechanisms be-
yond install-time MAC. We are presently exploring such
runtime MMAC mechanisms.
There are a number of threats that SE Android cannot di-
rectly address. First, SE Android cannot mitigate anything
allowed by the policy. As such, developing good policy is
crucial to the effectiveness of SE Android, and the ability to
have a good policy while still having a functional system is
dependent on the software system architecture. Fortunately,
Android already makes good use of process isolation in its
existing architecture, thereby enabling the effective applica-
tion of SE Android.
Second, as a kernel level mechanism, SE Android can-
not in general mitigate kernel vulnerabilities. In some cases,
as shown in the KillingInTheNameOf and mempodroid case
studies, SE Android prevents a kernel vulnerability from be-
ing exploitable by making the vulnerable code unreachable
by untrusted applications or by rendering the impact of the
vulnerability inconsequential. However, this is not true of
all or even most kernel vulnerabilities. Thus, other mecha-
nisms for protecting and measuring kernel integrity are de-
sirable in combination with SE Android.
Lastly, SE Android cannot address threats from other
platform components, particularly ones that may have di-
rect access to system resources such as memory and storage.
For example, SE Android cannot protect against actions
by a compromised baseband processor or network card.
Such threats must be addressed through other, hardware-
facilitated mechanisms.
In spite of these limitations, we have shown that Android
security would beneﬁt from some form of MAC in general,
and that SE Android in particular would mitigate many of
the exploits and vulnerabilities facing Android today. Mit-
igating the threat posed by ﬂawed and malicious apps is an
important piece of an overall security architecture for mo-
bile devices.
5. Overhead
This section describes our results from measuring the
size and performance overheads introduced by SE Android
compared to a pristine build of the corresponding AOSP
version. The AOSP images were built from the android-
boot.img
system.img
recovery.img
SE Android
4552K
AOSP
4400K
194072K 194208K
4900K
5068K
Increase
+152K
+136K
+168K
Table 4. Image sizes for full maguro-
userdebug (4.2).
4.2 r1 tag for the Galaxy Nexus (maguro) device, using the
prebuilt kernel supplied by AOSP for that device. These
images were measured to provide the baseline for each set
of results. The SE Android images were built from the
seandroid-4.2 branch of the SE Android source code reposi-
tory for the same device, using a kernel built from the same
kernel source tree but with the SE Android modiﬁcations
and with SELinux enabled. Both the AOSP and SE Android
images included the same set of additional apps used for
benchmarking. The results for SE Android images can be
compared against the AOSP results to determine the over-
head introduced by SE Android.
5.1. Size
Given the limited resources of mobile devices, a goal of
SE Android was to keep the number and size of changes
to a minimum. Table 4 shows the absolute sizes of the
boot, system, and recovery images for the AOSP and SE
Android builds and it shows the relative size increase of the
SE Android images. The data reveals relatively small size
increases for the three images. The userdata image was un-
changed in size and is therefore not shown.
The increase in boot image size is primarily due to the
increase in kernel size for SE Android (+100K). The SE
Android kernel enables ﬁlesystem support for extended at-
tributes and security labels as well as the kernel audit sub-
system, the Linux Security Module (LSM) framework, and
the SELinux security module. The remaining increase in
size for the boot image comes from the SE Android policy
ﬁles and extensions to the init program.
The system image increased in size largely from three
new components introduced by SE Android: the libselinux
library (+44K), the SEAndroidManager app (+40K) and
the mac permissions.xml ﬁle (+24K). The Android toolbox
program and the libandroid runtime library also increased
slightly in size (+4K each) due to the SE Android exten-
sions. Since the system image contains the core Android
OS, SE Android’s small relative increase in size (+.07%)
speaks to its small footprint. Further, the SEAndroidMan-
ager app is not required for SE Android operation and thus
could be omitted from the ﬁnal image for the device if de-
sired.
AOSP
SE Android
SD
188.28
65.42
65.83
72.21
45.52
1.02
0.748
4.74
19.86