### Optimization of Parameters and Transformations

The parameters to be optimized are defined by the metric \(\delta\), while the sum of the metric values for all types of transformations remains constant. In Section 3.2, we proposed several fine-grained transformations. To determine the most suitable granularity and the transformations that yield the best signatures, we use the set \(E\) of (ranked signature proposals from) previous abstraction processes.

If a transformation type frequently appears in set \(E\) (e.g., frequent relaxation of constraints regarding IP addresses or the search depth of content options) and is associated with high-quality signatures, it indicates that the transformation is too fine-grained. Such transformations should be coarsened to avoid generating unnecessary signature abstractions. Conversely, if the metric value of a transformation is difficult to optimize for tuples in \(E\) (e.g., in one case the value should be high, and in another case it should be low), this suggests that the transformation is too coarse-grained. To provide more flexibility for optimizing the metric and to better adjust \(\delta\), such transformations need to be refined.

Modifying the granularity of transformations requires updating the sets \(T\) of tuples in \(E\) to ensure a valid evaluation base. For coarsened transformations, the update simply replaces the fine-grained transformations with their coarse-grained counterparts. For refined transformations, the sets \(T\) in tuples of \(E\) must be redefined. This process can be automated during the abstraction and test phases.

### Initial Set of Marked Signatures

To smoothly implement the proposed approach, an initial set of marked signatures is required. Currently, we are in the process of evaluating and creating such a set, but we do not yet have a sufficiently large set of marked signatures to enable automated deployment. Therefore, we use a constant value of 1 as the initial metric \(\delta\) in the examples described in the following section.

### Examples

In the following, we demonstrate the approach and the evaluation method using two selected examples. The first example shows how a new signature can be nearly completely derived from the signature base. The second example demonstrates how reusing signature fragments can significantly reduce the engineering effort.

#### Example 1: Deriving a New Signature

We start with a rule from the Snort rule base that detects a buffer overflow attack on the FTP service of the Oracle XML DBMS (see Fig. 7a). This rule was chosen as a typical example of a buffer overflow attack. Manifestations of this attack were captured while the attack was executed. The rule focuses on TCP connections to the destination port number 2100 and looks for a string in the payload starting with "USER" followed by one or more blank characters and a number of arbitrary other bytes, where the complete string is longer than 100 bytes. The oversized user ID string provokes a buffer overflow during login to the Oracle FTP service.

Our tool identifies a series of abstracted rules for this rule. We investigate the four rules from the Snort rule base with the lowest abstraction degree that, after abstraction, detect the above attack (see Fig. 7b, c, d, e). The rule options that were transformed are highlighted in grey.

- **First Rule (Fig. 7b)**: This rule is too specific regarding the destination port number and the search string. The rule matches the given manifestations after: (i) removing the port number, (ii) replacing `\s` with `\s+` in the pcre option. Hence, the abstraction degree of the rule is two. In our example, this rule exhibits the lowest abstraction degree.
- **Second Rule (Fig. 7c)**: This rule needs three transformations: (i) removing the port number, (ii) splitting the search string, and (iii) subsequently discarding the second search sub-string.
- **Third Rule (Fig. 7d)**: This rule has an abstraction degree of four. In addition to (i) removing the port number and (ii) splitting the search string: (iii) removing the second search sub-string from the pcre option and (iv) the search for the string "y049575046" of the content option needed to be removed.
- **Fourth Rule (Fig. 7e)**: This rule also has an abstraction degree of four. The transformations applied are: (i) removing the port number, (ii) removing the search string for the content option, (iii) splitting the search string for the pcre option, and (iv) removing the second search sub-string.

From the abstracted rules described above, the first rule is the closest to the target rule that we removed from the rules base. Merely replacing `\s` with `\s+` and removing `(?!\n)` are necessary to obtain the target rule. The characterizing element of the abstracted rule, namely detecting oversized user ID strings, can be directly reused for the target rule.

**Hints for Reusing the Rule**:
1. To avoid false positives and improve the run-time efficiency of Snort, the port number should be limited, if possible. Following this hint, the engineer restricts the port number to 2100.
2. Due to the replacement of `\s` by `\s+`, the engineer tries to determine the actual number of blank characters. The exact number can be determined by reviewing the source code of the FTP service of Oracle’s XML DBMS. Following these hints, the engineer can easily recreate a suitable signature. Adopting the Isdataat option of the proposed rule is not necessary but represents a possible optimization compared to the original rule for the given attack (see Fig. 7a).

#### Example 2: Reusing Signature Fragments

In this example, we chose a Snort rule for detecting injection and execution of arbitrary code using buffer overruns in the RPCSS service (see Fig. 8). Traces of this attack were captured while the attack was executed.

In this case, all rules of the signature basis need to be strongly abstracted to match the attack trace. Therefore, we were not able to derive a complete signature by simply reusing the proposed signatures and implementing the given hints. However, all of the proposed best-ranked rules contain the grey lines shown in Fig. 8. An analysis of these lines shows that this rule fragment is responsible for detecting (a) Netbios packets containing (b) a WIN2K/XP special header and (c) a remote administration protocol header that contains (d) an SMB command. Further, this rule fragment allows analyzing the particular SMB command by appending distinct payload options (jump into the payload of the SMB command). The specific characteristics of the attack still need to be modeled, but the reuse of this approved signature fragment for protocol testing and header traversal clearly reduces the development time. Fig. 8 shows that the original Snort rule for this attack uses this rule fragment too (grey area).

### Resource Requirements of the Tool

To estimate the tool's run-time and memory requirements, we captured some performance numbers. In the second example, 7543 (number of Snort-VRT Certified Rules - 1) Snort signatures were used as the basis. Each signature was abstracted using transformations until one abstraction was generated that matches the given audit trace. In total, about 641,453,983 abstractions were generated, of which only 7543 match the given audit trace (one abstraction of each basis signature). Thus, on average, about 80,000 (85039) abstractions were generated per signature. Generating and matching would require a total amount of time of about 122 hours. Actually, only about 17 hours were needed because we parallelized the process using seven typical desktop machines (Intel Xeon CPU 2.66GHz). The memory consumption of the tool was 500 MB on average and 1.9 GB at peak. Many further optimizations are possible to minimize the runtime and memory requirements.

### Final Remarks

Signature engineering can be supported by reusing signature design decisions and/or fragments of existing signatures. Reusing already approved structures may not only reduce the effort of the signature engineering process but can also considerably shorten the costly test and correction phase. Moreover, the proposed procedure allows the signature engineer to exploit experience encoded in existing signatures. In this paper, we showed that our general approach is applicable for single-step signatures. We systematically analyzed the elements of a single-step signature specification language and identified suitable transformations for signature abstraction. The approach was implemented for the most prominent representative of single-step IDSs, namely Snort. For a given attack manifestation, the tool computes and selects abstracted signatures that are suitable for further refinement and for understanding the given attack manifestation. We have also developed methods for selecting the set of most effective transformations and for evaluating the quality of the generated abstracted signatures. We have demonstrated the approach and exemplarily evaluated it.

### Directions for Future Work

Future work includes the implementation of an automated method for selecting the most effective transformations for a given set of signatures in a given specification language. Another direction is identifying design patterns for signature engineering from a given signature base.

### References

[1] Baker, A.: Beale J.; Caswell B.; Poore M.: Snort 2.1 Intrusion Detection. Syngress Publishing, 2004.
[3] Cheung S.; Lindqvist U.; Fong M.: Modeling Multi-step Cyber Attacks for Scenario Recognition. In: Proc. of the 3rd DARPA Information Survivability Conf., IEEE Computer Society Press, 2003, pp. 284-292.
[4] Gamma E., Helm R., Johnson E. R.: Design Patterns – Elements of Reusable Object-Oriented Software. Addison-Wesley Professional, 1997.
[5] Rubin S., Jha S., Miller B.: Automatic Generation and Analysis of NIDS Attacks. In: Proc. of the 20th Annual Computer Security Applications Conf., IEEE Computer Society Press, 2004, pp. 28-38.
[6] Rubin S.; Jha S.; Miller P. B.: Language-based generation and evaluation of NIDS signatures. In: Proc. of the IEEE Symposium on Security and Privacy, IEEE Computer Society Press, 2005, pp. 3-17.
[7] Larson U., Lundin B. E., Jonsson E.: METAL - A Tool for Extracting Attack Manifestations. In: Proc. of the 2nd Conf. on Detection of Intrusions and Malware, and Vulnerability Assessment, 2005, LNCS 3548, Springer, pp. 85-102.
[8] Meier M.; Schmerl S.: Improving the Efficiency of Misuse Detection. In: Proc. of the 2nd Conf. on Detection of Intrusions, Malware, and Vulnerability Assessment, LNCS 3548, Springer, 2005, pp. 188-205.
[9] Meier, M.: A Model for the Semantics of Attack Signatures in Misuse Detection Systems. In: Proc. of the 7th International Information Security Conference (ISC 2004), LNCS 3225, Springer, 2004, pp. 158 – 169.