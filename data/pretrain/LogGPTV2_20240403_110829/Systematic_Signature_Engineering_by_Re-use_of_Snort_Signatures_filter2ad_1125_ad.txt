∈
The parameters to be optimized are given by the metric 
δ,  while  the  sum  of  the  metric  values  of  all  types  of 
transformations is constant. 
We  proposed  a  number  of  fine-grained  transforma-
tions in Sec. 3.2. In order to determine a suitable granu-
larity and the transformations resulting in the best pro-
posed signatures we again use the tuples E of (ranked 
signature  proposals  of)  previous  abstraction  processes. 
Numerous occurrences of a transformation type in set E 
(e.g. frequent relaxation of constraints regarding IP ad-
dresses or the search depth of content options) for high 
quality signatures identifies transformations that are too 
fine-grained. Such transformations should be coarsened 
to avoid generating unnecessary signature abstractions. 
Situations in that the metric value of a transformation is 
difficult to optimize for tuples in E (e.g. in one case the 
value should be high, in another case it should be low) 
indicate  that  this  transformation  is  too  coarse-grained. 
To provide more freedom for optimizing the metric and 
to  allow  better  adjustment  of  δ  such  transformations 
need to be refined. Modifications of the granularity of 
transformations require updating of sets T of tuples in E 
in order to have a valid base for evaluation. In case of 
coarsened transitions an update simply replaces the sub-
stituted  fine-grained  transformations  with  respective 
coarse-grained transformations. In contrast, refinements 
of transformations call for redefining the sets T in tuples 
of E. However, this can be done automated for the ab-
straction and test process. 
To  go  smoothly  the  proposed  approach  requires  an 
initial set of marked signatures. Right now we are in the 
process of evaluating signatures and creating such a set, 
but  do  not  yet  have  a  sufficiently  large  set  of  marked 
signatures to allow an automated deployment of the ap-
proach.  Therefore  we  use  a  constant  value  of  1  as  an 
initial metric δ in the examples described in the follow-
ing section. 
5  Examples 
In  the  following  we  demonstrate  the  approach  and 
the  evaluation  method  using  two  selected  examples. 
The first example shows how a new signature is nearly 
completely derived from the signature base. The second 
example  demonstrates  how  re-using  signature  frag-
ments can significantly reduce the engineering effort.  
Example 1: First we use a rule from the Snort rule 
base which detects a buffer overflow attack on the FTP 
service  of  the  Oracle  XML  DBMS  (see  Fig.  7a).  We 
chose this rule as a typical example for a buffer over-
2030
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
flow attack. Manifestations of this attack were captured 
while the attack was executed. The rule focuses on TCP 
connections  to  the  destination  port  number  2100  and 
looks for a string in the payload starting with “USER” 
and  followed  by  one  or  more  blank  characters  and  a 
number  of  arbitrary  other  bytes,  where  the  complete 
string is longer than 100 bytes. The over-sized user ID 
string  provokes  a  buffer  overflow  during  login  to  the 
Oracle FTP service.  
Our tool identifies a series of abstracted rules for this 
rule. We investigate here the four rules from the Snort 
rule  base  with  the  lowest  abstraction  degree  that  after 
abstraction detect the above attack (see Fig. 7 b,c,d,e). 
The rule options that were transformed are grey. 
The first rule (see  Fig.  7b) proposed  by our  tool  is 
too specific concerning the destination port number and 
the search string. The rule matches the given manifesta-
tions after: (i) removing the port number, (ii) replacing 
`\s´ with `\s+´ in the pcre option. Hence, the abstraction 
degree of the rule is two. In our example this rule ex-
hibits  the  lowest  abstraction  degree.  The  second  rule 
(see Fig. 7c) needs three transformations: (i) removing 
the port number, (ii) splitting the search string, and (iii) 
subsequently  discarding  the  second  search  sub-string. 
The third rule (see Fig. 7d) proposed by our tool has an 
abstraction degree of four. In addition to (i) removing 
the port number and (ii) splitting the search string: (iii) 
removing  the  second  search  sub-string  from  the  pcre 
option and (iv) the search for the string “y049575046” 
of  the  content  option  needed  to  be  removed.  For  the 
fourth rule (see Fig. 7e) four transformations have been 
applied: (i) removing the port number, (ii) removing the 
search  string  for  the  content  option,  (iii)  splitting  the 
search  string  for  pcre  option,  and  (iv)  removing  the 
second search sub-string. 
From  the  abstracted  rules  described  above  the  first 
rule is the closest one to the target rule that we removed 
from  the  rules  base.  Merely  replacing  `\s´  with  `\s+´, 
and removing `(?!\n)´ are necessary to obtain the target 
rule. The characterizing element of the abstracted rule, 
namely detecting oversized user ID strings, can be di-
rectly re-used for the target rule.  
For  re-using  this  rule  the  following  hints  are  pro-
vided.  (1)  In  order  to  avoid  false  positives  and  to  im-
prove the run-time efficiency of Snort the port number 
should  be  limited,  if  possible.  Following  this  hint  the 
engineer restricts the port number to 2100. (2) Due to 
the replacement of \s by \s+ the engineer tries to deter-
mine the actual number of blank characters. The exact 
number  can  be  determined  by  reviewing  the  source 
code of the FTP service of Oracle’s XML DBMS. Fol-
lowing  these  hints  the  engineer  can  easily  re-create  a 
suitable signature. Adopting the Isdataat option of the 
proposed rule is not necessary, but it represents a possi-
ble  optimization  compared  to  the  original  rule  for  the 
given attack (see Fig. 7a).   
a) 
b) 
c) 
d) 
e) 
alert tcp $EXTERNAL any −> $HOME 2100( 
  flow: to_server, 
  established; content: " user"; nocase;  
  pcre: "/^USER\s+[^\n]{100,}/smi";  
  sid: 3631;) 
alert tcp any any −> any 21 (  
  flow : established, from_client; 
  content: "USER"; nocase; 
  isdataat: 100, relative; 
  pcre:"/^USER(?!\n)\s[^\n]{100}/smi";  
  sid: 1734;) 
alert tcp any any -> any 21 ( 
  flow:established, from_client; 
  content:"USER"; nocase; 
  pcre:"/^USER\s[^\n]*?%[^\n]*?%/smi"; 
  sid:2178;) 
alert tcp any any -> any 3535( 
  flow:established, from_client;  
  content:"USER"; nocase;  
  content:"y049575046"; nocase; 
  pcre:"/^USER\s+y049575046/smi"; 
  sid:2334;) 
alert tcp any any −> any 21 ( 
  flow : established, from_client; 
  content: "USER" ; nocase;  
  content: "w0rm"; nocase; distance: 1; 
  pcre:"/^USER\s+w0rm/smi"; sid: 144;) 
Fig. 7 a,b,c,d,e: Suggested original rules for re-use 
Example 2: In this example we chose a Snort rule 
for  detecting  injection  and  execution  of  arbitrary  code 
using  buffer  overruns  in  RPCSS  service  (see  Fig.  8). 
Traces  of  this  attack  were  captured,  while  the  attack 
was executed. 
In this case, all rules of the signature basis need to be 
strongly abstracted to match the attack trace. Therefore, 
we  were  not  able  to  derive  a  complete  signature  by 
simply re-using the proposed signatures and implement-
ing the given hints. However, all of the proposed best-
ranked rules contain the grey lines shown in Fig. 8. An 
analysis of these lines shows that this rule fragment is 
responsible for detecting (a) Netbios packets containing 
(b)  a  WIN2K/XP  special  header  and  (c)  a  remote  ad-
ministration  protocol  header  that  contains  (d)  a  SMB 
command. Further this rule fragment allows analyzing 
the  particular  SMB  command  by  appending  distinct 
payload  options  (jump  into  the  payload  of  the  SMB 
command).  The  specific  characteristics  of  the  attack 
still need to be modeled, but the re-use of this approved 
signature fragment for protocol testing and header tra-
versal  clearly  reduces  the  development  time.  Fig.  8 
shows  that  the  original  Snort  rule  for  this  attack  uses 
this rule fragment too (grey area). 
alert tcp $EXTERNAL_NET any -> $HOME_NET 139 
(msg:" NETBIOS SMB ISystemActivator 
CoGetInstanceFromFile WriteAndX unicode little 
endian object call attempt"; 
2131
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply. 
flow:established,to_server; flowbits:isset, 
dce.bind.ISystemActivator;  
content:"|00|"; depth:1; content:"|FF|SMB/"; 
within:5; distance:3; byte_test: 1, 
&,128,6,relative; pcre:"/^.{27}/sR"; 
byte_jump: 2, 23, relative, from_beginning, 
little; pcre:"/^.{4}/sR"; content:"|05|"; 
within:1; byte_test:1,&,16,3,relative; 
content:"|00|"; within:1; distance:1;  
byte_test:1,&,128,0,relative; content:"|01 
00|"; within:2; distance:19; pcre:"/^.{16} 
/sR"; content:"|01 10 08 00 CC CC CC CC|"; 
distance:0; content:"|5C 00 5C 00|"; 
distance:0; byte_test:4,>,256,-8, relative, 
little; reference:cve,2003-0715;  
reference:url,www.microsoft.com /technet/ 
security/ bulletin/ms03-039. mspx; classtype: 
protocol-command-decode; sid:3178; rev:4;) 
Fig. 8: Rule for buffer overruns in the RPCSS service 
The examples demonstrate that our approach, which 
was originally for multi-step signatures, can also be ap-
plied to single-step signatures. It works well for the at-
tack description language of the most prominent single-
step IDS. Currently, we do not have enough experience 
tuples E of deployment cycles yet to optimize the initial 
metric  and  the  granularity  of  transformations  as  de-
scribed in Sec. 4. However, based on the initial parame-
ters  we  already  achieved  promising  results  for  all  de-
ployment cycles of the approach realized so far. 
Resource Requirements of the Tool. In order to es-
timate the tool’s run-time and memory requirements we 
capture some performance numbers. The following dis-
cussion considers the execution of the second example 
above.  In  this  example  7543  (number  of  Snort-VRT 
Certified Rules - 1) Snort signatures were used as basis. 
Each  signature  was  abstracted  using  transformations 
until  one  abstraction  was  generated  that  matches  the 
given  audit  trace.  In  total  about  641,453,983  abstrac-
tions  were  generated,  of  which  only  7543  match  the 
given  audit  trace  (one  abstraction of  each basis  signa-
ture). Thus on average about 80,000 (85039) were gen-
erated  per  signature.  Generating  and  matching  would 
require a total amount of time of about 122 hours. Ac-
tually  only  about  17  hours  were  needed  because  we 
parallelized  the  process  using  seven  typical  desktop 
machines  (Intel  Xeon  CPU  2.66GHz).  The  memory 
consumption  of  the  tool  was  500  MB  on  average  and 
1.9 GB on peak. Many further optimizations are possi-
ble to minimize the runtime and memory requirements. 
6  Final Remarks 
Signature engineering can be supported by re-using 
signature design decisions and/or fragments of existing 
signatures.  The  re-use  of  already  approved  structures 
may  not  only  reduce  the  effort  of  the  signature  engi-
neering process, but it can also considerably shorten the 
costly  test  and  correction  phase.  Moreover,  the  pro-
posed  procedure  allows  the  signature  engineer  to  ex-
ploit experience encoded in existing signatures. In this 
paper we showed that our general approach is applica-
ble  for  single-step  signatures.  We  systematically  ana-
lyzed the elements of a single-step signature specifica-
tion language and identified suitable transformations for 
signature  abstraction.  The  approach  was  implemented 
for  the  most  prominent  representative  of  single-step 
IDSs,  namely  Snort.  For  a  given  attack  manifestation 
the tool computes and selects abstracted signatures that 
are suitable for further refinement and for understand-
ing the given attack manifestation. We have also devel-
oped  methods  for  selecting  the  set  of  most  effective 
transformations as well as for evaluating the quality of 
the  generated  abstracted  signatures.  We  have  demon-
strated the approach and exemplarily evaluated.  
Directions  for future  work  include  the  implementa-
tion of an automated method for selecting the most ef-
fective transformations for a given set of signatures in a 
given specification language. As another working direc-
tion we consider identifying design patterns for signa-
ture engineering from a given signature base.  
7  References 
[1] Baker, A.: Beale J.; Caswell B.; Poore M.: Snort 2.1 
Intrusion Detection. Syngress Publishing, 2004. 
[3] Cheung S.; Lindqvist U.; Fong M.: Modeling Multi-
step Cyber Attacks for Scenario Recognition. In: Proc. 
of  the  3rd  DARPA  Information  Survivability  Conf., 
IEEE Computer Society Press, 2003, pp. 284-292. 
[4] Gamma E., Helm R., Johnson E. R.: Design Patterns 
– Elements of Reusable Object-Oriented Software. Ad-
dison-Wesley Professional, 1997. 
[5]  Rubin  S.,  Jha  S.,  Miller  B.:  Automatic  Generation 
and Analysis of NIDS Attacks. In: Proc. of the 20th An-
nual  Computer  Security  Applications  Conf.,  IEEE 
Computer Society Press, 2004, pp. 28-38. 
[6] Rubin S.; Jha S.; Miller P. B.: Language-based gen-
eration and evaluation of NIDS signatures. In: Proc. of 
the  IEEE  Symposium  on  Security  and  Privacy,  IEEE 
Computer Society Press, 2005, pp. 3-17. 
[7] Larson U., Lundin B. E., Jonsson E.: METAL - A 
Tool for Extracting Attack Manifestations. In: Proc. of 
the 2nd Conf. on Detection of Intrusions and Malware, 
and  Vulnerability  Assessment,  2005,  LNCS  3548, 
Springer, pp. 85-102.  
[8] Meier M.; Schmerl S.: Improving the Efficiency of 
Misuse Detection. In: Proc. of the 2nd Conf. on Detec-
tion of Intrusions, Malware, and Vulnerability Assess-
ment, LNCS 3548, Springer, 2005, pp. 188-205. 
[9]  Meier,  M.:  A  Model  for  the  Semantics  of  Attack 
Signatures  in  Misuse  Detection  Systems.  In:  Proc.  of 
the  7th  International  Information  Security  Conference 
(ISC 2004), LNCS 3225, Springer, 2004, pp. 158 – 169.
2232
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:56:02 UTC from IEEE Xplore.  Restrictions apply.