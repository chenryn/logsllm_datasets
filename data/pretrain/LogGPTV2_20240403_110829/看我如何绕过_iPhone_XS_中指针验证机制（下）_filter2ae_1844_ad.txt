### 优化后的文本

#### 指令序列与异常处理
以下是一段 ARM64 汇编代码，用于设置和清除系统控制寄存器 SCTLR_EL1 中的特定位：

```assembly
TBNZ        W0, #0x1F, loc_FFFFFFF0079B3320
ORR         X0, X0, #0x80000000                 ;; 设置第31位
ORR         X0, X0, #0x8000000                  ;; 设置第27位
ORR         X0, X0, #0x2000                     ;; 设置第13位
MSR         #0, c1, c0, #0, X0                  ;; SCTLR_EL1
```

在异常返回时，这些位会被有条件地清除：

```assembly
TBNZ        W1, #2, loc_FFFFFFF0079B3AE8        ;; SPSR_EL1.M[3:0] & 0x4
...
LDR         X2, [X2, #thread.field_460]
CBZ         X2, loc_FFFFFFF0079B3AE8
...
MRS         X0, #0, c1, c0, #0                  ;; SCTLR_EL1
AND         X0, X0, #0xFFFFFFFF7FFFFFFF         ;; 清除第31位
AND         X0, X0, #0xFFFFFFFFF7FFFFFF         ;; 清除第27位
AND         X0, X0, #0xFFFFFFFFFFFFDFFF         ;; 清除第13位
MSR         #0, c1, c0, #0, X0                  ;; SCTLR_EL1
```

尽管 ARM 将这些位记录为保留位（值为0），但在 XNU 4903.221.2 的源码中找到了对其中一个位的引用。具体来说，在 `osfmk/arm64/proc_reg.h` 文件中有如下定义：

```c
// 13           PACDB_ENABLED            AddPACDB and AuthDB functions enabled
#define SCTLR_PACDB_ENABLED (1 << 13)
```

#### 指针认证与扩展位
当使用 PACIZA 为指针添加 PAC 时，它实际上是对还原后的扩展位进行签名。如果扩展位无效，则会破坏 PAC。

```c
ext_ptr = extfield | ptr;
PAC = ComputePAC(ext_ptr, modifier, K, K);
// 检查指针的扩展位是否有效，如果不有效则破坏 PAC
if (!IsZero(ptr) && !IsOnes(ptr)) {
    PAC = NOT(PAC);
}
```

重要的是，PAC 指令会通过翻转 PAC 的一个位来破坏具有无效扩展位的指针的 PAC。虽然这会使 PAC 无效，但这也意味着如果我们能够读出由 AUTIA 指令产生的 PAC 伪造指针，就可以重建真正的 PAC。

因此，即使我们没有一个有效的签名指针，上面那个由 AUTIA 和 PACIZA 组成的序列也可以用作签名 gadget：我们只需要在伪造的 PAC 中翻转一个位。

#### 完整的 A 密钥伪造策略
有了基于 PACIZA 的签名 gadget，我们可以开始为 A12 设备上的 A 密钥构建一个完整的伪造策略。

##### 方法 1: 利用 PACIZA 伪造签名
经过初步调查，发现我们找到的签名 gadget 是函数 `sysctl_unregister_oid()` 的一部分。该函数负责从全局 sysctl 树中取消注册 `sysctl_oid`。以下是 IDA 中相关部分的代码：

```c
void sysctl_unregister_oid(sysctl_oid *oidp) {
    sysctl_oid *removed_oidp = NULL;
    sysctl_oid *old_oidp = NULL;
    BOOL have_old_oidp;
    void **handler_field;
    void *handler;
    uint64_t context;
    ...
    if (!(oidp->oid_kind & 0x400000)) {         // 不进入此条件
        ...
    }
}
```

请注意，这个函数在公共源代码中没有任何与 PAC 相关的代码，但这些操作确实存在于启用 PAC 的设备上。

希望这段优化后的文本更加清晰、连贯和专业。如果有任何进一步的问题或需要更多的细节，请告诉我。