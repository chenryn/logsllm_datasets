title:Fides: selectively hardening software application components against
kernel-level or process-level malware
author:Raoul Strackx and
Frank Piessens
Fides: Selectively Hardening Software Application
Components against Kernel-level or Process-level Malware
Raoul Strackx
IBBT-DistriNet, KU Leuven
Celestijnenlaan 200a
3001 Heverlee, Belgium
PI:EMAIL
Frank Piessens
IBBT-DistriNet, KU Leuven
Celestijnenlaan 200a
3001 Heverlee, Belgium
PI:EMAIL
ABSTRACT
Protecting commodity operating systems against software
exploits is known to be challenging, because of their sheer
size. The same goes for key software applications such as
web browsers or mail clients. As a consequence, a signif-
icant fraction of internet-connected computers is infected
with malware.
To mitigate this threat, we propose a combined approach
of (1) a run-time security architecture that can eﬃciently
protect ﬁne-grained software modules executing on a stan-
dard operating system, and (2) a compiler that compiles
standard C source code modules to such protected binary
modules.
The oﬀered security guarantees are signiﬁcant: relying on
a TCB of only a few thousand lines of code, we show that the
power of arbitrary kernel-level or process-level malware is re-
duced to interacting with the module through the module’s
public API. With a proper API design and implementation,
modules are fully protected.
The run-time architecture can be loaded on demand and
only incurs performance overhead when it is loaded. Bench-
marks show that, once loaded, it incurs a 3.22% system-wide
performance cost. For applications that make intensive use
of protected modules, and hence beneﬁt most of the security
guarantees provided, the performance cost is up to 14%.
Categories and Subject Descriptors
D.4.6 [Operating Systems Security and Protection]:
Access Controls, Invasive Software
General Terms
Design, Security
Keywords
Trusted Computing, Secure Execution, Fully Abstract Com-
pilation
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
1.
INTRODUCTION
A signiﬁcant fraction of Internet-connected computers is
infected with malware, usually with kernel-level access. Yet,
many of these computers are used for security-sensitive tasks,
and handle sensitive information such as passwords, corpo-
rate data, etc. While eﬀorts to increase the security of com-
modity operating systems [30] and applications [36, 5, 10]
are important and ongoing, their sheer size makes it very
unlikely that they can be made secure enough to avoid in-
fection [23, 11] with kernel-level malware. Due to the lay-
ered design of commodity systems, kernel-level malware can
break the conﬁdentiality and integrity of all data and code
on the system.
This unfortunate situation has triggered researchers to de-
sign systems that can execute security sensitive code in an
isolated area of the system, thus improving the security guar-
antees that can be oﬀered. Of course, an important design
goal (and design challenge) is to realize this while remaining
compatible with current operating systems and hardware.
Most of these proposed systems leverage recent hardware
extensions for trusted computing or virtualization to exe-
cute code, and diﬀer in the granularity of protection they
oﬀer (protection of full applications [10, 36, 5, 13, 19] versus
protection of small pieces of application logic [20, 21, 28, 33,
4]), and in their root of trust (a correctly booted system [13,
33] or a hardware security module such as a TPM chip [14,
21, 28, 20, 4]). We provide a more complete overview of
existing work in section 6.
State-of-the-art systems for protection of software mod-
ules focus on attesting the correct and secure execution of a
single module to a third party [20, 21, 28, 4]. We focus on the
complementary case of increasing the security guarantees of
applications for the owner of the system. We propose an
approach to selectively harden security-critical parts of an
application. An SSL-enabled webserver, for example, could
be built in a modular way where sensitive information is
passed between trusted modules until it is ﬁnally encrypted
and passed to the TCP/IP stack. This would reduce the
power of a kernel-level attacker to one with only access to
the network. Current systems are ill-equipped for this task:
writing co-operating protected modules is too hard, mes-
sages passed between modules may never be delivered and
a lack of support for multiple instances of the same module
prevents a modular application design.
In this paper, we propose a system consisting of two parts:
a run-time security architecture and a compiler. The secu-
rity architecture implements a program-counter based access
control model. A protected module is divided into a public
2and a secret section. The secret section stores the sensitive
data and is only accessible from within the module. The
public section contains the module’s code and can be read
from outside of the module. This enables authentication
and secure communication between modules in a cheap and
secure way: an attacker is not able to intercept, modify or
masquerade any messages between protected modules.
The compiler provides an easy way to compile standard
C-code into protected modules. Since the program-counter
dependent access control model allows modules and unpro-
tected code to share the same virtual address space, their
interaction is straightforward. This signiﬁcantly simpliﬁes
the hardening of applications.
Modules compiled with our compiler eﬀectively reduce the
power of kernel-level malware and in-process attackers to
only being able to interact with the modules through a pub-
lic API. In earlier work[2] we have proven for a simpliﬁed
model of our access control mechanism and compiler that
with a proper API design and implementation the module
is fully protected: an attacker that is able to inject arbitrary
assembly code at kernel-level is only as strong as an attacker
interacting through the module’s API.
More speciﬁcally, we make the following contributions:
(cid:129) We propose Fides, a security architecture for ﬁne-grain-
ed protection of software modules, based on a mem-
ory access control model that makes access privileges
dependent on the value of the program counter (in-
struction pointer). The access control model is strong
enough to support fully abstract compilation [1] of
modules; low-level attacks against a compiled module
exist iﬀ the source-level module can also be exploited.
(cid:129) We show how this access control model supports novel
features, such as
1. the ability to support function pointers to trusted
modules. Secrecy and integrity of any data passed
as arguments is ensured by the authentication of
the pointer’s destination.
2. the ability to update modules after they are de-
ployed, thereby allowing legacy software to be
ported easily and incrementally with minimal mod-
iﬁcation.
(cid:129) We report on a fully functioning prototype implemen-
tation, demonstrating that Fides can be implemented
on commodity hardware while remaining fully compat-
ible with legacy systems.
(cid:129) We present a compiler that compiles standard C source
code modules into protected binary modules.
(cid:129) We show that Fides has an average performance over-
head of around 3% on the overall system, which is
reduced to 0% when no modules are loaded. Mac-
robenchmarks show an overhead of up to 14% for ap-
plications that intensively use Fides’ services.
We do not consider trusted I/O and leave it as future
work. However, a trusted path between an I/O module and
I/O devices can be established as in related work [22, 40].
The remainder of this paper is structured as follows. First,
we clarify our objectives by deﬁning the attacker model and
desired security properties in Section 2. Section 3 gives an
overview of the security architecture and its key concepts.
In Sections 4 and 5, we discuss how the run-time system and
compiler were implemented and evaluate performance. We
ﬁnish with a discussion of related work and a conclusion.
2. OBJECTIVES
High-level programming languages oﬀer protection facili-
ties such as abstract data types, private ﬁeld modiﬁers, or
module systems. While these constructs were mainly de-
signed to enforce software engineering principles, they can
also be used as building blocks to provide security proper-
ties. Declaring a variable holding a cryptographic key as pri-
vate, for example, prevents direct access from other classes.
This protection however does not usually remain after the
source code is compiled. An attacker with in-process or ker-
nel level access is not bound by the type system of the higher
language. We will show that Fides is able to provide such
strong security guarantees. We ﬁrst discuss the abilities of
an attacker and then discuss how Fides provides these guar-
antees.
2.1 Attacker model
We consider an attacker with two powerful capabilities.
First, an attacker can execute arbitrary code – user-level or
kernel-level – in the legacy operating system. This kind of
root-level access is a realistic threat: legacy operating sys-
tems consist of millions of lines of code and this unavoidably
leads to the presence of programming bugs, such as buﬀer
overﬂows [23], that can be exploited by an attacker to inject
code [11, 39].
With kernel-level privileges, the attacker can try to cor-
rupt or read the state of protected modules, modify the
virtual memory layout of applications containing protected
modules or intercept their loading process to tamper with
security-sensitive code or data. The attacker can also try to
intervene in the communication between modules, or to at-
tack data that protected modules wish to store persistently.
Second, the attacker can build and deploy her own pro-
tected modules. Our security architecture does not assume
that software modules that request protection can be trusted.
In other words, it is our goal to ensure the security of a pro-
tected module by one stakeholder, even if modules of mali-
cious stakeholders are also loaded in the system.
With respect to the cryptographic capabilities of the at-
tacker, we assume the standard Dolev-Yao model
[8]: cryp-
tographic messages can be manipulated, for instance by du-
plicating, re-ordering or replaying them, but the underlying
cryptographic primitives cannot be broken.
We assume the attacker has no physical access to the hard-
ware. An attacker with control over the physical system may
disconnect memory, place probes on the memory bus, or per-
form a hard reset. Since remote exploitation of commodity
systems is far more common than exploitation through phys-
ical access, this is a reasonable assumption.
2.2 Security properties
To provide strong security guarantees, we use a combina-
tion of a run-time system and a compiler.
2.2.1 Fides run-time system
The Fides run-time system enforces a program-counter
based access control mechanism. It guarantees the following
security properties:
3(cid:129) Restriction of entry points. Protected modules can
only be invoked through speciﬁc entry points, prevent-
ing an attacker from jumping to an incorrect location
in the module and executing on unintended execution
paths [32].
(cid:129) Conﬁdentiality and integrity of module data. A pro-
tected module can store sensitive data in a way so it
can only be read or modiﬁed by the module itself.
(cid:129) Authentication of modules. Modules can authenticate
each other securely. This also implies that code of
modules is integrity protected.
(cid:129) Secure communication between modules. Fides guar-
antees integrity, conﬁdentiality and delivery of data
exchanged between modules.
(cid:129) Minimal TCB. The correct and secure execution of
a module only depends on (1) the hardware, (2) the
Fides architecture and (3) the module itself and any
other module that it calls. In particular, the operating
system is excluded from the TCB.
2.2.2
Secure compilation of modules
Using the protection mechanisms oﬀered by the run-time
system as building blocks, the compiler allows the compila-
tion of standard C source code into protected modules. It
provides the following security guarantees:
(cid:129) Integrity of execution. An attacker is not able to inﬂu-
ence the correct execution of the module
(cid:129) Secure communication between modules. The compiler
ensures that sensitive information is passed only be-
tween modules using a secure channel.
(cid:129) Secrecy of sensitive information. Only information
that is passed explicitly to unprotected memory or to
another module exits the module. Leakage of possibly
sensitive information, for example information linger-
ing in save-by-caller registers, is prevented.
Note that it is not our objective to protect against vulner-
abilities in protected modules: the security of a protected
module can be compromised if there are exploitable vul-
nerabilities in its implementation. Examples include logical
faults (i.e. a faulty API design [17]), or memory errors [11,
39, 35]. Instead, our goal is to protect the module from mal-
ware that exploits vulnerabilities in the surrounding appli-
cations or underlying operating system. A vulnerable mod-
ule however, can only aﬀect the security of other modules
if they explicitly place trust in the former and, for exam-
ple, exchange sensitive information. An attacker introduc-
ing malicious modules in the system does not gain any more
power as they are not trusted by any other module. In sec-
tion 5 we will show that a low-level attack against modules
exist iﬀ also a high-level attack exists.
3. OVERVIEW OF THE APPROACH