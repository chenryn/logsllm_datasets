          return NULL;
        }
    #ifndef ATOMIC_FASTBINS
          *fb = victim->fd;
    #endif
          check_remalloced_chunk(av, victim, nb); 
          void *p = chunk2mem(victim);     // 返回给用户
          if (__builtin_expect (perturb_byte, 0))
        alloc_perturb (p, bytes);
          return p;
        }
      }
利用 fastbin，首先检查 nb(上面计算出的真实 chunk 大小)是否小于等于 fastbin
的最大值，如果是，会进入到上面的代码逻辑中。这里分为两种情况，如果没有开启 ATOMIC_FASTBINS 优化则分配过程很简单，首先根据 nb 找到对应的
fastbin index，接着从对应的链表中取出一个堆块(可能为空)，判断取出的是否为空，如果不为空，进一步判断此堆块的 size 是否和 index
对应。如果这些检查都通过，就会把堆块返回给用户。
当开启了 ATOMIC_FASTBINS 情况就变得复杂起来，这个优化选项是新版本 libc 添加的，虽然 ptmalloc
支持多线程操作，但是当在分配区中申请很多小内存时，会使得内存碎片化，ptmalloc
会尝试清理这些碎片，在清理碎片的时候就不可避免的要对分配区进行加锁操作，每一次加锁要消耗大约 100ns
的时间，这就导致了当很多线程进行动态内存申请时，ptmalloc 的效率大幅下降。  
于是 ptmalloc 在新版本中对锁进行了优化，添加 PER_THREAD 和 ATOMIC_FASTBINS
两个优化选项，但是默认情况下这些选项是不会开启的。
结合华庭的文章可以大致了解一下优化的策略，ATOMIC_FASTBINS 用到了一种叫做 lock-free
的技术实现单向链表删除第一个节点的操作(和数据结构很类似，但是要考虑多线程的影响)，多线程安全在 《程序员的自我修养》这本书中有简要的介绍，线程(又称为
**轻量级进程**
)是进程的一部分，一个进程中可以包含多个线程，这些线程共享进程的资源，这就隐藏着一个问题，资源只有一份，如果两个线程同时去修改这份资源，就有可能会引发未定义的行为。例如下面的代码
    线程1               线程2
    i=1;                --i;
    ++i;
++i 这种代码的一种实现方法可能是
    将 i 读取到某一个寄存器中
    寄存器自增 1
    将寄存器中的值存回 i
但是现在涉及到一个多线程的问题，如果程序的执行顺序是
    X1 表示线程 1 的寄存器    X2 表示线程 2 的寄存器
    序号      指令          线程
    1        i = 1           1
    2        X1 = i          1
    3        X2 = i          2
    4        X1++            1
    5        X2--            2
    6        i = X1          1
    7        i = X2          2
从逻辑上看，i 的最终结果应该是 1，但是现在它的结果是 0。实际上 i 的结果可能是 0、1 或 2，这就是一个典型由于没有注意线程问题引发的未定义行为。
回到 malloc
的代码中，支持多线程的基础就是保证线程安全，于是加锁成为了一种重要方式，当某个线程取得资源的锁之后，其他线程如果想要访问资源，就需要等待加锁线程完成它的工作并解锁，但是加锁会导致一些问题，首当其冲的就是性能问题，这一点在上文提到过，如果加锁不当的话还会引起死锁(dead
lock)等等。
于是人们就提出了另一种思路，即无锁算法(lock-free)，又叫做
CAS，CAS的语义是“我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉我V的值实际为多少”，CAS是乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。
CAS 的效率相较于锁来说提升了很多，并且更加安全了，这是因为其操作指令都是原子指令(可以在一个 CPU 周期中运行完毕，不会受其他线程影响)。
CAS 的 ABA 问题：如果有三个线程 A、B、C，若 B 线程先取得了锁，修改目标值，但是 C 线程先于 A 取得了锁，将目标值修改回最初的值，这时如果
A 取得锁，就不会发现原始值已经被修改了一次，这时可能会引发一些未定义的行为，但是在 malloc 的代码中并不会出现这种问题。
第一条路大致就是这些内容，不难发现，fastbin 是最简单、最快的一种缓冲区，有关于从 fastbin 中分配堆块的思路可以参考下面这张图片
**第二条:** 当 nb 属于 smallbin 范围时
      if (in_smallbin_range(nb)) {  // 判断 nb 是否处于 smallbin 范围
        idx = smallbin_index(nb);    // 通过 nb 计算出其所属的 smallbin index
        bin = bin_at(av,idx);  // 通过上一步计算出的 index 在 arena 中找到对应链表的表头
        if ( (victim = last(bin)) != bin) {  // 判断 smallbin 是否为空，并且把链表中最后一个堆块给 victim
          if (victim == 0) /* 初始化检查 */
        malloc_consolidate(av);  // 合并 fastbin 中的堆块并放置在 smallbin
          else {
        bck = victim->bk;  // 获取当前堆块的前一个堆块
        if (__builtin_expect (bck->fd != victim, 0))  // 检查 bck -> fd 是否指向 victim (链表完整性检查)
          {
            errstr = "malloc(): smallbin double linked list corrupted";
            goto errout;
          }
        set_inuse_bit_at_offset(victim, nb);  // 将 victim 下一个相邻的堆块的 P 标志位置 1
        bin->bk = bck;
        bck->fd = bin;    // 将最后一个堆块从 smallbin 中卸下，注意这里没有清空 fd、bk 指针，pwn 题中的信息泄露一般是基于此处
        if (av != &main_arena)    // 检查当前分配区是否为主分配区
          victim->size |= NON_MAIN_ARENA;
        check_malloced_chunk(av, victim, nb);
        void *p = chunk2mem(victim);   // 返回堆块
        if (__builtin_expect (perturb_byte, 0))
          alloc_perturb (p, bytes);
        return p;
          }
        }
      }
引用 malloc.c 给出的注释如下
        If a small request, check regular bin.  Since these "smallbins"
        hold one size each, no searching within bins is necessary.
        (For a large request, we need to wait until unsorted chunks are
        processed to find best fit. But for small ones, fits are exact
        anyway, so we can check now, which is faster.)
首先要判断 nb 是否在 smallbin 范围内，如果是，则计算其在 smallbin 中的 index 并根据 index
找到链表的表头，接着是一个关键判断，通过 if (victim == 0) 进行初始化检查，这是由于 (victim = last(bin)) != bin
执行后 victim 有两种情况，一是 smallbin 不为空，即找到了一个合适的堆块，二是 smallbin 还没有初始化成双向循环链表，这时就要调用
malloc_consolidate 来合并 fastbin chunk 到 smallbin 中(后面会提到)。
如果找到了一块合适的内存，先找到它的上一个堆块 bck(victim -> bk)，然后进行一次完整性判断，要求 bck 的 fd 指针指向
victim，如果检查通过，会将 victim 物理上相邻的下一个堆块的 P 标志位(PREV_INUSE)置 1，最后把 victim
从链表中卸下(通常使用 unlink 函数，但是为了效率这里没有使用)并返回。 通过分析代码也能发现 smallbin 的分配方式的确是尾部取出。
若 smallbin 为空会移交到下一部分代码处理。
有关于从 smallbin 中分配堆块的思路可以参考下面这张图片
**第三条：** nb 属于 largebin 范围 or 之前的分配请求失败
      else {
        idx = largebin_index(nb);
        if (have_fastchunks(av))
          malloc_consolidate(av);
      }
首先判断 nb 在 large bin 中的 index，接着判断 fastbin 中是否存在 chunk，若存在，调用
malloc_consolidate 将 fastbin chunk 进行合并。引用 malloc.c 中的注释如下
         If this is a large request, consolidate fastbins before continuing.
         While it might look excessive to kill all fastbins before
         even seeing if there is space available, this avoids
         fragmentation problems normally associated with fastbins.
         Also, in practice, programs tend to have runs of either small or
         large requests, but less often mixtures, so consolidation is not
         invoked all that often in most programs. And the programs that
         it is called frequently in otherwise tend to fragment.
大概意思是如果 nb 是一个分配大片内存的申请，首先会合并 fastbin 中的 chunk，这样做的目的是避免内存碎片化过于严重。
> 为什么不直接去 largebin 中取堆块，而是要先进行堆块合并？如果代码运行到这里，就说明用户申请的内存一定是 largebin
> 或者更大，如果在获取了 largebin index 之后直接搜索
> largebin，很可能在对应位置上并不存在合适的堆块，这样，就需要向操作系统申请另一片空间来实现内存分配，当用户申请的堆块确实很大时这样做并没有什么问题，但是当用户申请的内存并不是那么大，将其他链表中(主要是
> fastbin)的堆块合并之后恰好能够满足空间要求，那么就可以避免向操作系统申请内存，提升效率的同时还降低了堆的碎片化程度。
**注意！** 只有当 nb 是一个 largebin request
时，才会执行上面的代码，其他情况(例如上面两条路中分配失败的情况)会下沉到下面的代码中处理，接下来的代码属于 malloc
的核心部分，使用了很多循环嵌套，其实这些复杂的算法主要目的就是处理之前没有分配成功的 smallbin、fastbin、largebin 等请求。
引用 malloc.c 的注释如下
        Process recently freed or remaindered chunks, taking one only if
        it is exact fit, or, if this a small request, the chunk is remainder from
        the most recent non-exact fit.  Place other traversed chunks in
        bins.  Note that this step is the only place in any routine where
        chunks are placed in bins.
        The outer loop here is needed because we might not realize until
        near the end of malloc that we should have consolidated, so must
        do so and retry. This happens at most once, and only when we would
        otherwise need to expand memory to service a "small" request.
最后一句说明了进行堆块合并的原因，避免由一个较小的内存请求去向操作系统申请新的内存。
    for(;;) {    // 主循环开始
        int iters = 0;
        while ( (victim = unsorted_chunks(av)->bk) != unsorted_chunks(av)) {  // 反向循环遍历 unsorted bin
          bck = victim->bk; // 找到 unsorted bin 链表最后一个堆块的前一个堆块
          if (__builtin_expect (victim->size size > av->system_mem, 0))  // 判断 size 是否合法
        malloc_printerr (check_action, "malloc(): memory corruption",
                 chunk2mem (victim));
          size = chunksize(victim);  // 如果合法，就把 victim -> size 赋给 size
上面这段代码主要在遍历搜索 unsorted bin，引用 malloc.c 的注释如下
         If a small request, try to use last remainder if it is the
         only chunk in unsorted bin.  This helps promote locality for
         runs of consecutive small requests. This is the only
         exception to best-fit, and applies only when there is
         no exact fit for a small chunk.
当遍历到一个堆块后，会继续执行下面的代码
          if (in_smallbin_range(nb) &&
          bck == unsorted_chunks(av) &&
          victim == av->last_remainder &&
          (unsigned long)(size) > (unsigned long)(nb + MINSIZE)) {  // 是否切割的判断条件
        /* split and reattach remainder */
        remainder_size = size - nb;    // 计算切割后剩余的堆块大小
        remainder = chunk_at_offset(victim, nb);    // 切割堆块
        unsorted_chunks(av)->bk = unsorted_chunks(av)->fd = remainder;  // 将剩余的堆块重新链接到 unsorted bin 中
        av->last_remainder = remainder;  // 重新设置分配区的 last_remainder 
        remainder->bk = remainder->fd = unsorted_chunks(av);  // 更新 remainder 的 fd、bk 指针
        if (!in_smallbin_range(remainder_size))  // 如果 remainder 是 largebin chunk，由于不在 larbebin 链表中，先清空fd_nextsize和bk_nextsize
          {