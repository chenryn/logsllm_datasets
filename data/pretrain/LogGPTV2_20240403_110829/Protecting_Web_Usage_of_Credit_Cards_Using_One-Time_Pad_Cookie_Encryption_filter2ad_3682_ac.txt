The  other  option  is  to  use  a  good  PRNG  (Pseudo-
Random Number Generator, such as surveyed in [11]), 
which from an initial state produces series of numbers 
that appear to be random to an observer. In some cases, 
using  frequent  re-seeding,  the  use  of  PRNGs  can  be 
appropriate. If a PRNG is used, the perfect secrecy of 
the  algorithm  cannot  be  achieved,  but  all  other 
properties described in this paper can.  
Therefore we can be reasonably confident that OTP 
encryption  on  cookies  is  unbreakable.  The  user's 
privacy is hence strongly protected, and the web site's 
liability 
the  OTP 
encryption.  
is  substantially 
reduced  by 
4.4.  Resistance against Replay Attacks  
Assume 
that  an  attacker  somehow  grabs  a 
customer's cookie. Although the attacker would not be 
able to decrypt it, she could still send the cookie to a 
web  site  a  number  of  times.  If  the  cookie  contains  a 
credit  card  number,  this  attack  could  cause  unwanted 
charges  on  the  credit  card  accounts.  Therefore  web 
sites should erase a key from the database immediately 
after  its  use.  In  other  words,  the  web  server  should 
generate  a  different  key  to  encrypt  the  credit  card 
number every time the web site receives an encrypted 
cookie from the client. Although this scheme does not 
solve  all  problems,  an  attacker  would  not  be  able  to 
replay an old cookie used by a client because the key 
associated  with  this  cookie  will  be  deleted  after  the 
actual  user  sends  the  cookie  to  the  server.  Replay 
would only return an error message in this case. 
However,  the  attacker  can  still  succeed  on  replay 
attacks by sending a captured encrypted cookie  to the 
web  site  before  the  actual  user  does  so.  Web  sites 
should  be  encouraged  to  keep  shipping  address 
information  linked  to  user  ids  to  prevent  this  kind  of 
attacks. Thus the harm that the attack might bring is to 
purchase  an  item  that  the  customer  actually does not 
want, and charge the credit card account. Nevertheless 
as the shipping address of the customer is not changed, 
whatever  item  the  attacker  purchases  would  still  be 
delivered to the customer, not the attacker. Moreover, 
since  the  usage  of  each  encrypted  cookie  is  valid  to 
only one web site, the attacker would not be able to use 
this credit card to make purchases on other web sites. 
In  comparison,  credit  card  information  without  site-
specific  encryption  would  allow  the  attacker  to  use  it 
everywhere with her own shipping address, making the 
purchased items delivered to the attacker instead of the 
owner of the credit card. 
4.5.  Non-malleability 
Other than trying to steal other people's credit card 
numbers,  a  mischievous  attacker  might  try  to  create 
her own fake credit card cookie and send it to the web 
server,  using  an  existing  index  string  in  an  existing 
cookie, simply to create confusion on the web server. 
However  this  attack  does  not  work  as  long  as  the 
attacker does not know the key of the cookie, because 
the  server  only  gets  a  random  string  after  decrypting 
the fake cookie. Since credit card numbers themselves 
have built-in verification mechanism, there is a chance 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
that the random string would not turn out to be a valid 
credit card number. In addition, it is very unlikely that 
the expiration date will be valid or that the attacker can 
guess the name of the owner of the card represented by 
the  mentioned 
integrity 
measures,  such  as  hashing  the  credit  card  number, 
could  also  be  used  as an  extension of this scheme to 
further  reduce  the  chance  that  an  attacker  can  fake 
valid credit card information. 
random  number.  Some 
Notice  that  repeated  attempts  of  this  attack  might 
constitute a DoS (Denial of Service) attack. Preventing 
DoS attack is out of the scope of this paper, since there 
are many other ways that DoS attack can be carried out 
too. 
On  the  other  hand,  a  more  successful  attack  might 
come  from  a  customer  that  actually  receives  her  own 
credit  card  cookie  from  the  web  server.  She  could 
compute the key of this cookie from the cookie and her 
credit  card  number.  And  after  she  gets  this  key,  she 
could  use  the  key  to  encrypt  somebody  else's  credit 
card  number  to  form  a  new  cookie,  and  send  this 
cookie  back  to  the  server.  Then  the  server  would 
charge  the  victim's  credit  card  account  and  ship  the 
purchased item to the attacker's address. However the 
prerequisite of this attack is that the attacker knows the 
victim's credit card number. And there is no effective 
way to protect the victim in this case anyway, since the 
attacker  can  virtually  use  the  victim's  credit  card 
anywhere.  Even  if  our  scheme  adopts  some  sort  of 
authentication mechanism to allow the server to reject 
a  received  cookie  that  is  different  from  what  is  sent 
out, it still cannot prevent the attacker from registering 
with victim's credit card information all over again. 
4.6.  Recovery of Network Connection Problem 
In this protocol, if the web server erases every key 
after  its  associated  cookie  comes  back,  then  the 
customer has to have a good network connection to the 
web  server.  Over  a  bad  network  connection,  the 
customer's  computer  might  not  receive  a  new  cookie 
from  the  server  when  loading  a  page;  as  a  result  the 
customer  would  use  the  old  cookie  to  access  the  web 
server  next  time,  and  get  an  error  message, since the 
old  key  was  already  removed  from  the  server's  key 
database. Then the customer would have to input the 
credit card number again.  
To  ease  (but  not  completely  resolve)  this  problem, 
the  web  server  can  choose  not  to  delete  the  old  key 
from  the  database  after  generating  the  new  key. 
Instead, the server keeps the old key in the database 
some  time  longer.  Most  users  react  to  a  network 
connection  failure  by  reloading  the  page  in  a  short 
time, in which case the old cookie would still be able 
to find the old key in the database.  
Keeping an old key after its use may imply that the 
protection against replay attack is weakened. However, 
we  have  already  shown  in  section  4.4  that  the  impact 
of replay attacks can be small as long as the web server 
takes precaution to link user's shipping address. As in 
many  decisions  that  take  security  into  consideration, 
the  web  server  needs  to  weight  convenience  against 
security. 
4.7.  Same User from Different Computers  
A user might want to access the same web site from 
different computers, typically one home computer and 
one  office  computer.  As  long  as  the  cookies  are  not 
synchronized between these computers, the user has to 
input  the  credit  card  information  once  on  each 
computer  the  first  time  she  uses  that  computer  to 
purchase  something  from  a  web  site.  Thus  each 
computer  would  store  the  same  credit  card  number 
encrypted  with  a  different  key,  and  the  server  would 
keep the keys for all these cookies at the same time.  
Inputting  the  same  thing  twice  seems  to  be 
inconvenient,  comp ared  to  the  currently  most  used 
approach where all the credit card numbers are stored 
on the web site, where a user can log in to the web site 
from  anywhere  to  make  purchases  without  inputting 
the credit card repeatedly. However, since users tend to 
return  to  the  same  web  site  many  times  to  purchase 
more items, inputting credit card numbers twice in the 
beginning should not really be a big issue.  
5.  Conclusions and Future Work 
This paper gives a useful, real-world application of 
secure  distributed  storage  of  sensitive  information 
using  HTTP  cookie  encryption.  A  One-Time  Pad 
method to achieve perfect secrecy of cookie encryption 
is proposed, based on the observation of the interesting 
characteristic of cookie encryption: the encryption and 
decryption  are  done  by  the  same  party.  The  pros  and 
cons of this protocol are analyzed, and the comparison 
with the existing approaches shows that our protocol is 
able  to  protects  users'  privacy  and  reduce  web  sites' 
liability in a much stronger manner. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
by 
Online 
decay," 
version: 
radioactive 
1926.  Online 
Online 
http://www.cs.ucla.edu/~jkong/research/security/shannon.ht
ml 
[9]  John  Walker,  "HotBits:  Genuine  random  numbers, 
generated 
at 
http://www.fourmilab.com/hotbits/, 1999. 
[10] G.S.  Vernam,  "Cipher  printing  telegraph  systems  for 
secret wire and radio telegraphic communications,"  Journal 
of  American  Institution  of  Electronic  Engineering,  45:252-
259, 
http://www.pro-
technix.com/information/crypto/pages/vernam_base.html 
[11] Terry  Ritter, 
of 
“The  Efficient  Generation 
Cryptographic  Confusion  Sequences”,  Cryptologia.  15(2): 
81-139. 1991. 
[12] Stuart McClure and Joel Scambray, "Etrade makes the 
'hit' parade: Client-side hacking captures a big-time victim," 
InfoWorld 
Article: 
http://iwsun4.infoworld.com/articles/op/xml/00/10/09/00100
9opswatch.xml, 2000. 
introduction: 
Online 
We have implemented this protocol as a C library, 
and  designed  a  simple  web  site  to  demo  the  OTP 
cookie  encryption.  The  library  implements  the  key 
database  based  on  GDBM,  and  the  encryption  and 
decryption functions can be called from the main CGI 
programs of a web site directly.  
As future work, on one hand we intend to improve 
and  expand  this  cookie  encryption  library  and  try  to 
apply it to real world web sites; on the other hand we 
would like to apply similar OTP protocols to the other 
online  privacy  protection  problems,  where  the  party 
that repeatedly uses the sensitive information cannot or 
does not want to store the information locally.  
One  example  of  this  kind  of  problem  is  network 
access proxy/anonymizer, where the proxy needs the 
IP  of  a  file-request's  originator,  in  order to return the 
file to the originator when the proxy gets the file; but 
at  the  same  time  the  proxy  also  wants  to  protect  the 
originator's  privacy,  and  is  not  willing  to  store  the 
originator's  IP  locally.  Applying  OTP  to  this  problem 
might be especially  helpful  to  peer-to-peer network's 
privacy protection.  
Another  example  is  secure  remote  file  storage, 
where the user needs to download a file from a server 
to a PC to access it, and for privacy concerns the user 
does not want the server to store plain text  of the file. 
We  will  explore  the  possibilities  to  use  the  OTP 
technique  to  address  this  issue  in  Microsoft's  .NET 
service and other similar services.   
Online 
Article: 
Website, 
"Gamma-Scout," 
References 
[1]  Internet 
http://www.gammascout.com/, 2002. 
[2]  Margaret  Kane,  "Online  spending  to  hit  $65  billion,” 
CNet 
http://news.cnet.com/ 
news/0-1007-200-5794394.html?tag=lh, 2001. 
[3]  D.  Kristol  and  L.  Montulli,  “Internet  RFC  2965:  Http 
state  management  mechanism,”  Network  Working  Group, 
October 2000. 
[4]  Microsoft, 
http://www.passport.com/, 2001. 
[5]  Joon S. Park and Ravi Sandhu, "Secure Cookies on the 
Web," 
Internet  Computing,  July-August  2000, 
http://computer.org/internet, 2000. 
[6]  Reuters, "Fraud threat still haunts Net shoppers," CNet 
Online  Article: 
http://news.cnet.com/news/0-1007-200-
6270593.html, 2001. 
[7]  Terry Ritter, "Random Number Machines: A Literature 
Survey," 
http://www.io.com/~ritter/ 
RES/RNGMACH.HTM, 1997. 
[8]  C.E.  Shannon,  "Communication  Theory  of  Secrecy 
System," Bell Systems Technical Journal, 28:656-715, 1949. 
"Passport  Homepage,"  Online 
Online 
IEEE 
at 
at 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply.