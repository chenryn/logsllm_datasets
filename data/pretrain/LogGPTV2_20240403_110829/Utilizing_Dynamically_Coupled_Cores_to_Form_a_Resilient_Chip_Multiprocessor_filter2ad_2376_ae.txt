### 5.1.2 Slowdown of Reunion’s Relaxed Input Replication

Figure 11 illustrates the performance degradation of Reunion's [23] relaxed input replication compared to DCC. We observed differences of up to a few hundred instructions for longer checkpoint intervals, leading to increased opportunities for an intervening store to cause input incoherence. Additionally, single-stepping the execution to the first load instruction does little to synchronize cores when the checkpoint interval may involve thousands of loads. If the problematic memory operation occurs at the end of the interval, many rollbacks will occur before single-stepping brings the synchronized execution close to that operation. Consequently, the performance of relaxed input replication deteriorates rapidly and is insufficient for DCC’s larger checkpoint intervals.

### 5.1.3 Performance under Manufacturing Defects

When faced with manufacturing defects, process variations, and wearout, DCC degrades at half the rate of mechanisms relying on static DMR pairs. While a defective or excessively leaky core renders both cores in a static DMR pair dysfunctional, DCC can utilize all functional cores regardless of their physical location or adjacency. Figure 12 compares DCC to an ideal, overhead-free static-DMR scheme on eight- and 16-core CMPs with two defective cores. The y-axis shows the speedups achieved by both schemes over a sequential run without fault tolerance. The reported speedups account for the small fraction of cases where two defective cores may fall into the same static DMR pair, in which case DCC does not offer an advantage. We generated 100,000 CMP configurations with two defective cores, where defect locations were sampled from a uniform random distribution. The average speedup over these 100,000 chips, including those with two failures in a single static-DMR pair, is reported.

On an eight-core CMP, DCC achieves an average speedup of 2.63 across all applications, while static-DMR’s speedup is only 1.97. For the sixteen-core CMP, DCC and static DMR obtain average speedups of 5.56 and 4.95, respectively. These results suggest that flexible DMR frameworks like DCC are attractive for constructing gracefully-degrading, fault-tolerant CMP designs that can meet the challenges of deep submicron process technologies.

### Table 5: Speedup of Parallel Applications

| Application | Threads | Baseline | DCC |
|-------------|---------|----------|-----|
| raytrace    | 1       | 1.00     | 0.96|
|             | 2       | 1.97     | 1.90|
|             | 4       | 3.77     | 3.58|
|             | 8       | 7.20     | 6.84|
| barnes      | 1       | 1.00     | 0.97|
|             | 2       | 1.99     | 1.91|
|             | 4       | 3.96     | 3.84|
|             | 8       | 7.93     | 7.63|
| blast       | 1       | 1.00     | 0.97|
|             | 2       | 2.00     | 1.56|
|             | 4       | 3.66     | 1.92|
|             | 8       | 7.66     | 3.49|
| bsom equake | 1       | 1.00     | 0.96|
|             | 2       | 1.96     | 1.87|
|             | 4       | 3.68     | 3.52|
|             | 8       | 6.62     | 6.38|
| fmm kmeans  | 1       | 1.00     | 0.97|
|             | 2       | 2.01     | 1.93|
|             | 4       | 3.99     | 3.86|
|             | 8       | 7.81     | 7.47|
| scalparc    | 1       | 1.00     | 0.98|
|             | 2       | 1.89     | 1.84|
|             | 4       | 3.66     | 3.51|
|             | 8       | 6.53     | 6.24|
| swim        | 1       | 1.00     | 0.96|
|             | 2       | 1.95     | 1.88|
|             | 4       | 3.70     | 3.57|
|             | 8       | 6.33     | 6.03|
| average     | 1       | 1.00     | 0.97|
|             | 2       | 1.91     | 1.84|
|             | 4       | 3.61     | 3.47|
|             | 8       | 6.57     | 6.25|

### 6. Conclusions

We have presented Dynamic Core Coupling (DCC), an inexpensive DMR mechanism for CMPs, allowing arbitrary processor cores to verify each other’s execution without requiring dedicated communication hardware. By avoiding static binding of cores at design time, DCC degrades at half the rate in the presence of errors and can recover from permanent faults without the need for constant TMR or dedicated spares.

Our evaluation has shown the performance overhead of DCC to be 3% on SPEC2000 benchmarks and within 5% for a set of scalable parallel scientific and data mining applications with up to eight threads (16 cores). We have also seen that DCC can offer significant performance improvements compared to static DMR schemes. Overall, we have demonstrated that flexible DMR frameworks like DCC hold significant performance potential when confronted with the challenges of deep submicron process technologies in current and upcoming CMPs.

### 7. Acknowledgments

We thank Meyrem Kırman, Nevin Kırman, and the anonymous reviewers for their valuable feedback. This work was funded in part by NSF awards CCF-0429922, CNS-0509404, CAREER Award CCF-0545995, and an IBM Faculty Award (Martínez); by NSF awards CNS-0435190, CCF-0428427, CCF-0541321, and the DARPA/MARCO C2S2 Center (Manohar); and by equipment donations from Intel.

### References

[1] Advanced Micro Devices. AMD64 Architecture Programmer’s Manual Volume 2: System Programming, February 2005.
[2] Guido Albertengo and Riccardo Sisto. Parallel CRC generation. IEEE Micro, 10(5):63–71, 1990.
[3] Shekhar Borkar, Tanay Karnik, Siva Narendra, Jim Tschanz, Ali Keshavarzi, and Vivek De. Parameter variations and impact on circuits and microarchitecture. In Design Automation Conf., June 2003.
[4] Shekhar Y. Borkar, Pradeep Dubey, Kevin C. Kahn, David J. Kuck, Hans Mulder, Stephen S. Pawlowski, and Justin R. Rattner. Platform 2015: Intel processor and platform evolution for the next decade. In Technology@Intel Magazine, March 2005.
[5] Cristian Constantinescu. Trends and challenges in VLSI circuit reliability. IEEE Micro, 23(4):14–19, 2003.
[6] Kypros Constantinides, Stephen Plaza, Jason Blome, Bin Zhang, Valeria Bertacco, Scott Mahlke, Todd Austin, and Michael Orshansky. Bulletproof: A defect-tolerant CMP switch architecture. In Intl. Symp. on High Performance Computer Architecture, February 2006.
[7] Mohamed Gomaa, Chad Scarbrough, T. N. Vijaykumar, and Irith Pomeranz. Transient-fault recovery for chip multiprocessors. In Intl. Symp. on Computer Architecture, June 2003.
[8] J. L. Henning. SPEC CPU2000: Measuring CPU performance in the new millennium. IEEE Computer, 33(7):28–35, 2000.
[9] Meyrem Kırman, Nevin Kırman, and José F. Martínez. Cherry-MP: Correctly integrating checkpointed early resource recycling in chip multiprocessors. In Intl. Symp. on Microarchitecture, December 2005.
[10] AJ KleinOsowski and David J. Lilja. MinneSPEC: A new SPEC benchmark workload for simulation-based computer architecture research. IEEE Computer Architecture Letters, 1(2), 2002.
[11] José F. Martínez, Jose Renau, Michael C. Huang, Milos Prvulovic, and Josep Torrellas. Cherry: Checkpointed early resource recycling in out-of-order microprocessors. In Intl. Symp. on Microarchitecture, November 2002.
[12] Dennis McEvoy. The architecture of Tandem’s NonStop system. In ACM’81, November 1981.
[13] Patrick J. Meaney, Scott B. Swaney, Pia N. Sanda, and Lisa Spainhower. IBM z990 soft error detection and recovery. IEEE Trans. on Device and Materials Reliability, 5(3):419–427, 2005.
[14] Shubhendu S. Mukherjee, Michael Kontz, and Steven K. Reinhardt. Detailed design and evaluation of redundant multithreading alternatives. In Intl. Symp. on Computer Architecture, May 2002.
[15] Shubhendu S. Mukherjee, Christopher Weaver, Joel Emer, Steven K. Reinhardt, and Todd Austin. A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor. In Intl. Symp. on Microarchitecture, December 2003.
[16] Kunle Olukotun, Basem A. Nayfeh, Lance Hammond, Ken Wilson, and Kunyung Chang. The case for a single-chip multiprocessor. In Intl. Conf. on Architectural Support for Programming Languages and Operating Systems, October 1996.
[17] Steven K. Reinhardt and Shubhendu S. Mukherjee. Transient fault detection via simultaneous multithreading. In Intl. Symp. on Computer Architecture, June 2000.
[18] Jose Renau, Basilio Fraguela, James Tuck, Wei Liu, Milos Prvulovic, Luis Ceze, Smruti Sarangi, Paul Sack, Karin Strauss, and Pablo Montesinos. SESC simulator, 2005. http://sesc.sourceforge.net.
[19] Eric Rotenberg. AR-SMT: A microarchitectural approach to fault tolerance in microprocessors. In Intl. Symp. on Fault-Tolerant Computing, June 1999.
[20] L. Sherman. Stratus continuous processing technology – the smarter approach to uptime. Technical report, Stratus Technologies, 2003.
[21] Premkishore Shivakumar, Michael Kistler, Stephen W. Keckler, Doug Burger, and Lorenzo Alvisi. Modeling the effect of technology trends on the soft error rate of combinational logic. In Intl. Conf. on Dependable Systems and Networks, June 2002.
[22] T. J. Slegal, Timothy J. Slegel, Robert M. Averill III, Mark A. Check, Bruce C. Giamei, Barry W. Krumm, Christopher A. Krygowski, Wen H. Li, John S. Liptay, John D. MacDougall, Thomas J. McPherson, Jennifer A. Navarro, Eric M. Schwarz, Kevin Shum, and Charles F. Webb. IBM’s S/390 G5 microprocessor design. IEEE Micro, 19(2):12–23, 1999.
[23] Jared C. Smolens, Brian T. Gold, Babak Falsafi, and James C. Hoe. Reunion: Complexity-effective multicore redundancy. In Intl. Symp. on Microarchitecture, December 2006.
[24] Jared C. Smolens, Brian T. Gold, Jangwoo Kim, Babak Falsafi, James C. Hoe, and Andreas G. Nowatzyk. Fingerprinting: bounding soft-error detection latency and bandwidth. In Intl. Conf. on Architectural Support for Programming Languages and Operating Systems, October 2004.
[25] Ed Sperling. Turn down the heat... please, March 2007. http://www.edn.com.
[26] Jayanth Srinivasan, Sarita V. Adve, Pradip Bose, and Jude A. Rivers. The case for microarchitectural awareness of lifetime reliability. In Intl. Symp. on Computer Architecture, June 2004.
[27] Jayanth Srinivasan, Sarita V. Adve, Pradip Bose, and Jude A. Rivers. The impact of technology scaling on lifetime reliability. In Intl. Conf. on Dependable Systems and Networks, June 2004.
[28] Dean M. Tullsen, Susan Eggers, and Henry M. Levy. Simultaneous multithreading: Maximizing on-chip parallelism. In Intl. Symp. on Computer Architecture, June 1995.
[29] T. N. Vijaykumar, Irith Pomeranz, and Karl Cheng. Transient-fault recovery using simultaneous multithreading. In Intl. Symp. on Computer Architecture, May 2002.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 12:49:13 UTC from IEEE Xplore. Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07) 0-7695-2855-4/07 $20.00 © 2007