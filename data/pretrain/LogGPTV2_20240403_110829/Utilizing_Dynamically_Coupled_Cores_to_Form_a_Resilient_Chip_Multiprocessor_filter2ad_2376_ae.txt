l
i
m
w
s
G
V
A
Figure 11. Slowdown of Reunion’s [23] relaxed input
replication with respect to DCC.
have noticed differences of up to a few hundred instructions for
the longer checkpoint intervals. This results in more opportunity
for an intervening store to cause input incoherence. Second, sin-
gle stepping the execution to the ﬁrst load instruction does little
to synchronize cores when the checkpoint interval may execute
thousands of loads. If the offending memory operation occurs at
the end of the interval, many rollbacks will ensue before single-
stepping brings the synchronized execution close to that operation.
Overall, the performance of relaxed input replication deteriorates
quickly, and is inadequate for DCC’s larger checkpoint intervals.
5.1.3 Performance under Manufacturing Defects
DCC degrades half as fast as mechanisms that rely on static DMR
pairs when confronted with manufacturing defects, process vari-
ations, and wearout. While a defective or excessively leaky core
renders both cores in a static DMR pair dysfunctional, DCC can
utilize all functional cores regardless of their physical location or
adjacency. Figure 12 compares DCC to an ideal, overhead-free
static-DMR scheme on eight- and 16-core CMPs with two de-
fective cores. The y-axis shows the speedups achieved by both
schemes over a sequential run without fault tolerance. Reported
speedups account for the small fraction of cases where two de-
fective cores may fall into the same static DMR pair, in which
case DCC does not offer an advantage. We account for such cases
by generating 100K CMP conﬁgurations with two defective cores,
where defect locations are sampled from a uniform random dis-
tribution. We report the average speedup over these 100K chips,
which include chips with two failures in a single static-DMR pair.
SDMR 6/8
DCC 6/8
SDMR 14/16
DCC 14/16
p
u
d
e
e
p
S
 8
 7
 6
 5
 4
 3
 2
 1
s
e
n
r
a
b
t
s
a
b
l
m
o
s
b
m
m
f
e
k
a
u
q
e
s
n
a
e
m
k
e
c
a
r
t
y
a
r
c
r
a
p
a
c
s
l
i
m
w
s
G
V
A
Figure 12. Average speedup of DCC and ideal static cou-
pling on 8- and 16-core CMPs with two defective cores.
On an eight-core CMP, DCC achieves an average speedup of
2.63 across all applications, while static-DMR’s speedup is only
1.97. For the sixteen-core CMP, DCC and static DMR obtain aver-
age speedups of 5.56 and 4.95, respectively. These results suggest
that ﬂexible DMR frameworks like DCC are an attractive to con-
struct gracefully-degrading, fault-tolerant CMP designs that can
meet deep submicron challenges.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Speedup Of Benchmarks
raytrace
Threads
1
2
4
8
1
2
4
8
barnes
1.00
1.97
3.77
7.20
0.96
1.90
3.58
6.84
blast
1.00
1.99
3.96
7.93
0.97
1.91
3.84
7.63
bsom equake
1.00
1.00
2.00
1.62
2.57
3.96
3.66
7.66
0.97
0.96
1.56
1.92
2.48
3.82
7.21
3.49
Baseline
DCC
fmm kmeans
1.00
1.96
3.68
6.62
0.96
1.87
3.52
6.38
1.00
2.01
3.99
7.81
0.97
1.93
3.86
7.47
scalparc
1.00
1.89
3.66
6.53
0.98
1.84
3.51
6.24
swim average
1.00
1.95
3.70
6.33
0.96
1.88
3.57
6.03
1.00
1.91
3.61
6.57
0.97
1.84
3.47
6.25
1.00
1.83
3.20
5.38
0.97
1.76
3.06
5.04
Table 5. Speedup of parallel applications with 1, 2, 4, and 8 threads for both the baseline CMP and DCC.
6 Conclusions
We have presented dynamic core coupling (DCC), an inexpen-
sive DMR mechanism for CMPs, which allows arbitrary processor
cores to verify each other’s execution without requiring dedicated
communication hardware. By avoiding static binding of cores at
design time, DCC degrades half as fast in the presence of errors
and can recover from permanent faults without the need for con-
stant TMR or dedicated spares.
Our evaluation has shown the performance overhead of DCC
to be 3% on SPEC2000 benchmarks, and within 5% for a set of
scalable parallel scientiﬁc and data mining applications with up to
eight threads (16 cores). We have also seen that DCC can offer
signiﬁcant performance improvements compared to static DMR
schemes. Overall, we have shown that ﬂexible DMR frameworks
like DCC hold signiﬁcant performance potential when confronted
with the challenges of deep submicron process technologies in cur-
rent and upcoming CMPs.
7 Acknowledgments
We thank Meyrem Kırman, Nevin Kırman, and the anony-
mous reviewers for useful feedback. This work was funded in
part by NSF awards CCF-0429922, CNS-0509404, CAREER
Award CCF-0545995, and an IBM Faculty Award (Mart´ınez); by
NSF awards CNS-0435190, CCF-0428427, CCF-0541321, and
the DARPA/MARCO C2S2 Center (Manohar); and by equipment
donations from Intel.
References
[1] Advanced Micro Devices. AMD64 Architecture Programmer’s Man-
ual Volume 2: System Programming, February 2005.
[2] Guido Albertengo and Riccardo Sisto. Parallel CRC generation.
IEEE Micro, 10(5):63–71, 1990.
[3] Shekhar Borkar, Tanay Karnik, Siva Narendra, Jim Tschanz, Ali Ke-
shavarzi, and Vivek De. Parameter variations and impact on circuits
and microarchitecture. In Design Automation Conf., June 2003.
[4] Shekhar Y. Borkar, Pradeep Dubey, Kevin C. Kahn, David J. Kuck,
Hans Mulder, Stephen S. Pawlowski, and Justin R. Rattner. Platform
2015: Intel processor and platform evolution for the next decade. In
Technology@Intel Magazine, March 2005.
[5] Cristian Constantinescu. Trends and challenges in VLSI circuit reli-
ability. IEEE Micro, 23(4):14–19, 2003.
[6] Kypros Constantinides, Stephen Plaza, Jason Blome, Bin Zhang, Va-
leria Bertacco, Scott Mahlke, Todd Austin, and Michael Orshansky.
Bulletproof: A defect-tolerant CMP switch architecture.
In Intl.
Symp. on High Performance Computer Architecture, February 2006.
[7] Mohamed Gomaa, Chad Scarbrough, T. N. Vijaykumar, and Irith
Pomeranz. Transient-fault recovery for chip multiprocessors. In Intl.
Symp. on Computer Architecture, June 2003.
[8] J. L. Henning. SPEC CPU2000: Measuring CPU performance in the
new millennium. IEEE Computer, 33(7):28–35, 2000.
[9] Meyrem Kırman, Nevin Kırman, and Jos´e F. Mart´ınez. Cherry-
MP: Correctly integrating checkpointed early resource recycling in
chip multiprocessors. In Intl. Symp. on Microarchitecture, Decem-
ber 2005.
[10] AJ KleinOsowski and David J. Lilja. MinneSPEC: A new SPEC
benchmark workload for simulation-based computer architecture re-
search. IEEE Computer Architecture Letters, 1(2), 2002.
[11] Jos´e F. Mart´ınez, Jose Renau, Michael C. Huang, Milos Prvulovic,
and Josep Torrellas. Cherry: Checkpointed early resource recycling
in out-of-order microprocessors. In Intl. Symp. on Microarchitecture,
November 2002.
[12] Dennis McEvoy. The architecture of Tandem’s NonStop system. In
ACM’81, November 1981.
[13] Patrick J. Meaney, Scott B. Swaney, Pia N. Sanda, and Lisa
IEEE
Spainhower.
Trans. on Device and Materials Reliability, 5(3):419–427, 2005.
IBM z990 soft error detection and recovery.
[14] Shubhendu S. Mukherjee, Michael Kontz, and Steven K. Reinhardt.
Detailed design and evaluation of redundant multithreading alterna-
tives. In Intl. Symp. on Computer Architecture, May 2002.
[15] Shubhendu S. Mukherjee, Christopher Weaver, Joel Emer, Steven K.
Reinhardt, and Todd Austin. A systematic methodology to compute
the architectural vulnerability factors for a high-performance micro-
processor. In Intl. Symp. on Microarchitecture, December 2003.
[16] Kunle Olukotun, Basem A. Nayfeh, Lance Hammond, Ken Wilson,
and Kunyung Chang. The case for a single-chip multiprocessor. In
Intl. Conf. on Architectural Support for Programming Languages and
Operating Systems, October 1996.
[17] Steven K. Reinhardt and Shubhendu S. Mukherjee. Transient fault
detection via simultaneous multithreading. In Intl. Symp. on Com-
puter Architecture, June 2000.
[18] Jose Renau, Basilio Fraguela, James Tuck, Wei Liu, Milos Prvulovic,
Luis Ceze, Smruti Sarangi, Paul Sack, Karin Strauss, and Pablo Mon-
tesinos. SESC simulator, 2005. http://sesc.sourceforge.net.
[19] Eric Rotenberg. AR-SMT: A microarchitectural approach to fault
tolerance in microprocessors. In Intl. Symp. on Fault-Tolerant Com-
puting, June 1999.
[20] L. Sherman. Stratus continuous processing technology – the smarter
approach to uptime. Technical report, Stratus Technologies, 2003.
[21] Premkishore Shivakumar, Michael Kistler, Stephen W. Keckler,
Doug Burger, and Lorenzo Alvisi. Modeling the effect of technology
trends on the soft error rate of combinational logic. In Intl. Conf. on
Dependable Systems and Networks, June 2002.
[22] T. J. Slegal, Timothy J. Slegel, Robert M. Averill III, Mark A.
Check, Bruce C. Giamei, Barry W. Krumm, Christopher A. Kry-
gowski, Wen H. Li, John S. Liptay, John D. MacDougall, Thomas J.
McPherson, Jennifer A. Navarro, Eric M. Schwarz, Kevin Shum, and
Charles F. Webb. IBM’s S/390 G5 microprocessor design. IEEE Mi-
cro, 19(2):12–23, 1999.
[23] Jared C. Smolens, Brian T. Gold, Babak Falsaﬁ, and James C. Hoe.
Reunion: Complexity-effective multicore redundancy. In Intl. Symp.
on Microarchitecture, December 2006.
[24] Jared C. Smolens, Brian T. Gold, Jangwoo Kim, Babak Falsaﬁ,
James C. Hoe, and Andreas G. Nowatzyk. Fingerprinting: bounding
soft-error detection latency and bandwidth. In Intl. Conf. on Architec-
tural Support for Programming Languages and Operating Systems,
October 2004.
[25] Ed Sperling.
Turn down the heat. . . please, March 2007.
http://www.edn.com.
[26] Jayanth Srinivasan, Sarita V. Adve, Pradip Bose, and Jude A. Rivers.
The case for microarchitectural awareness of lifetime reliability. In
Intl. Symp. on Computer Architecture, June 2004.
[27] Jayanth Srinivasan, Sarita V. Adve, Pradip Bose, and Jude A. Rivers.
The impact of technology scaling on lifetime reliability. In Intl. Conf.
on Dependable Systems and Networks, June 2004.
[28] Dean M. Tullsen, Susan Eggers, and Henry M. Levy. Simultaneous
multithreading: Maximizing on-chip parallelism. In Intl. Symp. on
Computer Architecture, June 1995.
[29] T. N. Vijaykumar, Irith Pomeranz, and Karl Cheng. Transient-fault
recovery using simultaneous multithreading. In Intl. Symp. on Com-
puter Architecture, May 2002.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:13 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007