the  Traceback  Manager  of  the  attack  takes  y  secs,  the  buffer 
flushing interval would be x+y secs.  
In  order  to  estimate  white  list  size,  we  referred  to  [14]  which 
shows that Amazon.com experienced 630,000 visitors in a single 
hour on its busiest day in 2003. By having a white list cache for a 
protected  server  in  an  IPv4  network,  each  record  would  need  4 
bytes  for  the  source  address,  4  for  the  router  and  8  for  the  tick 
counts  in  milliseconds  =  16  bytes  total  which  implies  4.8  MB 
needed to store 30 minutes of white list records. 
5.  SIMULATIONS 
Figure 1: Simulation scenario 
We  have  carried  out  simulations  in  ns-2.  During  the  learning 
phase,  nodes  generate  legitimate  traffic  to  the  target/victim  and 
the  Traceback  Manager  builds  the  white  list.  When  the  attack 
traffic  is  started,  the  white  list  updating  is  suspended  and 
traceback is started, but the legitimate nodes continue to generate 
new or existing flows’ traffic at a probability (to simulate random 
traffic).  
Figure  1  shows  100  attackers  and  120  legitimate  nodes.  The 
attackers send attack traffic with randomly spoofed addresses in 
the  range  of  1  to  10000  (which  includes  the  addresses  of 
legitimate  nodes).  The  strategic  points  are  R1,  R2,  R3  and  R4, 
which  are  the  entry  points  to  the  network.  The  links  from  the 
legitimate  nodes  and  the  attackers  into  the  network  are  set  to 
10Mbps with a propagation delay of 30ms to reflect the Internet 
delays. The internal links are set to 100Mbps with a propagation 
delay of 10ms.  During the learning phase, each of the legitimate 
nodes,  N1  to  N100,  sent  traffic  to  the  victim  V  at  the  rate  of  5 
pkts/sec. R1 to R4 sampled traffic at a probability of 0.01 and sent 
them to the Traceback Manager. The learning period was set to 20 
secs. We ran 3 sets of simulations and the attacks were started at 
the 20th sec with rates of 20, 50 or 100 pkts/sec, per attack node. 
During  the  attack,  all  the  legitimate  nodes  (including  N101  to 
N120 which were simulating new  legitimate requests) generated 
traffic  with  a  “decide  to  send”  probability1  of  0.5  at  a  rate  of  5 
pkts/sec per node. The attack lasted for 1.5 secs.  
 R1  and  R3  were  successfully  detected.  Table  1  shows  the 
statistics collected, of the number of mismatch packets detected. 
The  time  is  from  the  start  of  the  attack  and  the  results  are 
displayed as RX(Y), where X refers to the router’s ID and Y refers 
to the number of mismatch packets detected. The time, t, taken to 
first  detect  mismatch  packets  for  both  R1  and  R3,  was  140ms, 
80ms  and  70ms  for  attack  rates  of  20,  50  and  100  pkts/sec, 
respectively. At t ms, a total of 3, 3 and 4 sampled packets were 
received  by  the  Traceback  Manager,  of  which  2,  2  and  3  were 
mismatch packets, for the attack rates of 20, 50 and 100 pkts/sec, 
respectively. 
Table 1: Mismatched packets 
20 
50 
t ms 
100 
1 sec 
0.5 sec 
R1(5) R3(4) 
Attack Rate 
pkts/sec  
R1(1) 
R3(1) 
R1(1) 
R3(1) 
R1(1) 
R3(2) 
R1(15) 
R3(10) R4(1) 
R1(23) 
R3(24) 
R1(11) 
R3(13) 
R1(24) 
R3(26) R4(1) 
R1(43) 
R3(56) 
1.5 sec  
(attack 
stopped) 
R1(15) 
R3(17) R4(1) 
R1(34) 
R3(39) R4(2) 
R1(69) 
R3(91) R2(1) 
The results show false positives were detected. R2 (for attack rate 
of 100 pkts/sec) and R4 (for attack rates of 20 and 50 pkts/sec) 
were  detected  for  mismatched  packets.  This  is  due  to  sampling 
from the new legitimate traffic not found in the white list. We also 
observe that as time progresses, false positives started appearing. 
However, the difference between the number of mismatch packets 
sampled  for  R1,R3  and  R2,R4  widens  too.  At  0.5  sec,  the 
smallest-gap ratio (worst case) was 1/10. At 1.5 sec, the smallest-
gap ratio was 1/15, 1/17 and 1/69 for attack rates of 20, 50 and 
100 pkts/sec. Therefore, threshold values can be safely set so that 
false positives are ignored in a real-world scenario. 
6.  CONCLUSIONS 
We have implemented a non-intrusive traceback technique based 
on  the  rationale  that  packets  relating  to  a  particular  source-
destination flow follow a relatively static path through routers. If 
an attacker spoofs a legitimate user’s address, an “incorrect” path 
can be detected.  
Simulations conducted showed routers forwarding attack packets 
were  successfully  traced.  We  achieved  detection  rate  of  140ms, 
80ms  and  70ms  for  attack  rate  of  20,  50  and  100  pkts/sec.  We 
observed  that  as  the  attack  rate  increases,  the  detection  is  faster 
and the difference in the number of mismatch packets from attack 
and new legitimate traffic increases. This allows a threshold to be 
set to ignore false positives. 
Due  to  the  differences  in  the  way  our  system  and  the  other 
existing  traceback  techniques are triggered, quantitative analysis 
and  comparison  are  not  practical.  However,  we  presented  a 
qualitative  analysis  comparing  our  scheme  with  other  traceback 
techniques.  Our  approach  is  non-intrusive,  not  requiring  any 
changes to be made to the Internet routers and precise information 
1  Legitimate  traffic  during  attack  is  generated  at  5  pkts/sec. 
However, a random generator is used to determine whether to 
generate each packet, with a probability of 0.5. 
techniques.  The 
regarding the attack is not required so we can use a wide variety 
of  DDoS  attack  detection 
logging  and 
computation  tasks  are  shifted  to  the  WL  caching  devices  and 
Traceback  Manager,  and  therefore  relieving  the  victim  from 
additional  burden.  Changes  to  the  original  data  packets  are  also 
not required. As the learning phase is conducted before the attack, 
once the attack is detected, mismatch checking can be conducted 
at once to determine routers carrying attack traffic. Our algorithm 
is also simple and efficient, allowing for a fast generation of the 
attack graph and is scalable due to the distribution of processing 
workload. 
7.  ACKNOWLEDGEMENTS 
We  gratefully  acknowledge  the  support  from  the  EU  funded 
Diadem Distributed Firewall FP6 IST-2002-002154. 
8.  REFERENCES 
1.  K. J. Houle and G. M. Weaver, "Trends in Denial of Service 
Attack Technology", Oct. 2001, CERT Coordination Center, 
http://www.cert.org/archive/pdf/DoS_trends.pdf. 
2.  Robert Beverly and Steven Bauer, "The Spoofer Project: 
Inferring the Extent of Source Address Filtering on the 
Internet", USENIX SRUTI: Steps to Reducing Unwanted 
Traffic on the Internet Workshop, Jul. 2005. 
3.  David Moore, et al., "Inferring Internet Denial-of-Service 
Activity", ACM Transactions on Computer System (TOCS), 
May 2006, 24(2), pp. 115-139. 
4.  Alex C. Snoeren, et al., "Hash-Based IP Traceback", ACM 
Sigcomm, Aug. 2001. 
5.  Steve Bellovin, Marcus Leech, and Tom Taylor, "ICMP 
Traceback Messages", IETF Internet Draft, Version 4, Feb. 
2003 (Work in progress). 
6.  Stefan Savage, et al., "Practical Network Support for IP 
Traceback", ACM Sigcomm, Aug. 2000. 
7.  Vern Paxson, "End-to-end routing behavior in the Internet", 
ACM Sigcomm, Aug. 1996. 
8.  Yin Zhang, Vern Paxson, and Scott Shenker, "The 
Stationarity of Internet Path Properties: Routing, Loss, and 
Throughput", ACIRI Technical Report, 2000. 
9.  Jennifer Rexford, et al., "BGP Routing Stability of Popular 
Destinations", ACM SIGCOMM IMW (Internet Measurement 
Workshop), Nov. 2002. 
10. Cisco IOS Netflow, 
"http://www.cisco.com/en/US/products/ps6601/products_ios_
protocol_group_home.html". 
11. B. Claise, "IPFIX Protocol Specification", IETF Internet 
Draft, Version 19, Sept. 2005 (Work in progress). 
12. G. Sadasivan, et al., "Architecture for IP Flow Information 
Export", IETF Internet Draft, Version 9, Aug. 2005 (Work in 
progress). 
13. Haining Wang, Danlu Zhang, and Kang G. Shin, "Detecting 
SYN flooding attacks", IEEE INFOCOMM, 2002. 
14. Keith Regan, "Holiday E-Tail Sales Set Records Despite 
Performance Woes", E-Commerce Times, 
http://www.ecommercetimes.com/story/32491.html, Dec. 
2003. 
373