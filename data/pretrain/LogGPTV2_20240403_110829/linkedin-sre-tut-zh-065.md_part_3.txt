**注意** : SHA-1 最近也被证明是被打破的，目前的最低建议是 SHA-256
数字证书
*   数字签名提供了一种对设备和个人用户进行数字身份验证的方法。在诸如 RSA 加密系统之类的公钥加密系统中，每个用户都有一个包含公钥和私钥的密钥对。密钥作为补充，用其中一个密钥加密的任何东西都可以用另一个密钥解密。简单地说，当数据用用户的私钥加密时，就形成了签名。接收者通过用发送者的公钥解密消息来验证签名。
*   密钥管理通常被认为是设计和实现加密系统中最困难的任务。企业可以通过使用公钥基础设施(PKI)来简化安全数据通信中遇到的一些部署和管理问题。因为公司经常通过 Internet 移动安全敏感的通信，所以必须实施有效的机制来保护敏感信息免受 Internet 上的威胁。
*   PKI 为管理数字安全属性提供了一个分层框架。每个 PKI 参与者都持有由 CA(公共或私人)颁发的数字证书。证书包含几个在各方协商安全连接时使用的属性。这些属性必须包括证书有效期、终端主机身份信息、将用于安全通信的加密密钥以及颁发 CA 的签名。根据 PKI 的要求和能力，可以包括可选的属性。
*   CA 可以是受信任的第三方，如 VeriSign 或 Entrust，也可以是您在组织内建立的私有(内部)CA。
*   可以使用发送者的公钥解密消息的事实意味着私钥的持有者创建了消息。这个过程依赖于接收方拥有发送方公钥的副本，并且非常确定地知道它确实属于发送方，而不是某个冒充发送方的人。
*   为了验证 CA 的签名，接收者必须知道 CA 的公钥。通常，这是在带外处理的，或者通过在证书安装期间执行的操作来处理。例如，默认情况下，大多数 web 浏览器都配置了几个 ca 的根证书。
CA 注册过程
1.  终端主机生成一个私钥-公钥对。
2.  终端主机生成一个证书请求，并将其转发给 CA。
3.  需要人工干预来批准注册请求，注册请求由 CA 接收。
4.  CA 操作员批准请求后，CA 用其私钥签署证书请求，并将完成的证书返回给终端主机。
5.  终端主机将证书写入非易失性存储区域(PC 硬盘或 Cisco 路由器上的 NVRAM)。
**参见**:[https://www . ssh . com/manuals/server-zos-product/55/ch 06s 03s 01 . html](https://www.ssh.com/manuals/server-zos-product/55/ch06s03s01.html)
## 登录安全性
### 嘘
*   安全 Shell SSH 是一种流行的、强大的、基于软件的网络安全方法。
*   每当计算机向网络发送数据时，SSH 会自动加密(加密)数据。然后，当数据到达预期的接收者时，SSH 会自动解密(解码)它。
*   结果是透明加密:用户可以正常工作，不知道他们的通信在网络上被安全加密。此外，SSH 可以使用基于其配置方式的现代安全加密算法，并且在大公司的任务关键型应用中非常有效。
*   SSH 有一个客户机/服务器架构
*   SSH 服务器程序通常由系统管理员安装和运行，接受或拒绝到其主机的传入连接。然后，用户通常在其他计算机上运行 SSH 客户端程序，向 SSH 服务器发出请求，例如“请让我登录”、“请给我发送一个文件”或“请执行这个命令”客户端和服务器之间的所有通信都经过安全加密，不会被修改。
![image9](img/b576dbf01e7ba9e6468e12d90c0d8e3e.png)
SSH 不是什么:
*   尽管 SSH 代表安全 shell，但它并不是 Unix Bourne shell 和 C shell 意义上的真正 Shell。它不是命令解释器，也不提供通配符扩展、命令历史等等。相反，SSH 创建了一个在远程计算机上运行 shell 的通道，在两个系统之间进行端到端的加密。
SSH 协议的主要特性和保证是:
*   通过高度加密保护您的数据隐私
*   通信的完整性，保证它们没有被改变
*   认证，即发送者和接收者的身份证明
*   授权，即账户的访问控制
*   转发或隧道来加密其他基于 TCP/IP 的会话
### 麻省理工学院开发的安全认证系统
*   根据希腊神话，Kerberos (Cerberus)是一种巨大的三头狗，它守卫着冥界的大门，防止死者离开。
*   因此，当谈到计算机科学时，Kerberos 是一种网络身份验证协议，并且是当前 Microsoft Active Directory 使用的默认身份验证技术，用于在局域网内对用户的服务进行身份验证。
*   Kerberos 使用对称密钥加密，并需要可信的第三方身份验证服务来验证用户身份。因此，他们将 Kerberos 的名称用于他们的计算机网络身份验证协议，因为 Kerberos 的三个头代表:
*   客户端:用户/服务
*   服务器:受 Kerberos 保护的主机驻留在
    ![image10](img/0d42df3062b18b5060ddd91aadf61450.png) -密钥分发中心(KDC)，充当可信的第三方认证服务。
KDC 包括以下两台服务器:
*   身份验证服务器(AS ),执行初始身份验证并为用户颁发票证授予票证(TGT)。
*   票证授予服务器(TGS)，它根据初始票证授予票证(TGT)颁发服务票证。
    ![image11](img/2bca4c0d83649a22381b19a2dadd7d4b.png)
### 证书链
OpenSSL 命令输出的第一部分显示了编号为 0、1 和 2(不再是 2)的三个证书。每个证书都有一个主题 s 和一个颁发者 I。第一个证书编号为 0，称为终端实体证书。主题行告诉我们它对 google.com 的任何子域都有效，因为它的主题被设置为*.google.com
`$ openssl s_client -connect www.google.com:443 -CApath /etc/ssl/certs CONNECTED(00000005) depth=2 OU = GlobalSign Root CA - R2, O = GlobalSign, CN = GlobalSign verify return:1 depth=1 C = US, O = Google Trust Services, CN = GTS CA 1O1 verify return:1 depth=0 C = US, ST = California, L = Mountain View, O = Google LLC, CN = www.google.com verify return:1``--- Certificate chain 0 s:/C=US/ST=California/L=Mountain View/O=Google LLC/CN=www.google.com i:/C=US/O=Google Trust Services/CN=GTS CA 1O1 1 s:/C=US/O=Google Trust Services/CN=GTS CA 1O1 i:/OU=GlobalSign Root CA - R2/O=GlobalSign/CN=GlobalSign ---`T2】
*   issuer 行表明它是由 Google Internet Authority G2 发布的，这也是第二个证书(编号 1)的主题
*   OpenSSL 命令行在这里没有显示的是信任存储，它包含运行 OpenSSL 的系统所信任的 CA 证书列表。
*   GlobalSign Authority 的公共证书必须存在于系统的信任存储中，才能关闭验证链。这被称为信任链，下图概括了它的高层次行为。
    ![image122](img/fd748c4caa2b918bba4a4e569aa03ec5.png)
*   应用于验证网站真实性的信任链概念的高级视图。Firefox 信任存储中的根 CA 提供初始信任来验证整个链并信任终端实体证书。
### TLS 握手
1.  客户端向服务器发送一条 HELLO 消息，其中包含它支持的协议和算法列表。
2.  服务器回应你好并发送它的证书链。基于客户端的能力，服务器选择一个密码套件。
3.  如果密码套件支持临时密钥交换，如 ECDHE(ECDHE 是一种被称为椭圆曲线 Diffie-Hellman 交换的算法)，服务器和客户端将使用 Diffie-Hellman 算法协商预主密钥。预主密钥从不通过网络发送。
4.  客户端和服务器创建一个会话密钥，用于加密通过连接传输的数据。
握手结束时，双方都拥有一个秘密的会话密钥，用于为连接的其余部分加密数据。这就是 OpenSSL 所说的万能钥匙
**注**
*   TLS 有 3 个版本，TLS 1.0、1.1 和 1.2
*   TLS 1.0 发布于 1999 年，是一个有近 20 年历史的协议。众所周知，它容易受到攻击，如 BEAST 和 POODLE，多年来，除了支持薄弱的加密技术，不能保持现代连接足够安全。
*   TLS 1.1 是被遗忘的“老二”。和它的弟弟一样，它也有糟糕的加密技术。在大多数软件中，它被 TLS 1.2 所超越，很少看到 TLS 1.1 被使用。
### “完美”前向保密
*   密钥交换中的术语“短暂的”提供了一个重要的安全特征，它被错误地命名为完美前向保密(PFS)或简称为“前向保密”。
*   在非临时密钥交换中，客户端通过使用服务器的公钥对预主密钥进行加密，将其发送给服务器。然后，服务器用其私钥解密预主密钥。如果在稍后的某个时间点，服务器的私钥被泄露，攻击者可以回到这个握手，解密预主密钥，获得会话密钥，并解密整个流量。非短暂的密钥交换容易受到将来可能发生在记录的流量上的攻击。因为人们很少改变他们的密码，解密过去的数据对攻击者来说仍然是有价值的。
*   像 DHE 或它在椭圆曲线上的变体 ECDHE 这样的短暂密钥交换通过不在网络上传输预主密钥来解决这个问题。相反，预主密钥是由客户端和服务器使用公开交换的非敏感信息单独计算的。因为预主密钥以后不能被攻击者解密，所以会话密钥不会受到将来的攻击:因此，术语“完美前向保密”是安全的。
*   沿着流每隔 X 个块改变一次密钥。这就防止了攻击者简单地嗅探数据流并使用暴力破解整个系统。“前向保密”意味着仅仅因为我可以解密块 M，并不意味着我可以解密块 Q
*   缺点:
*   PFS 的缺点是所有这些额外的计算步骤会导致握手延迟，降低用户速度。为了避免在每次连接时重复这项昂贵的工作，双方都通过一种称为会话恢复的技术缓存会话密钥以备将来使用。这就是 session-ID 和 TLS 票证的用途:它们允许共享一个会话 ID 的客户机和服务器跳过会话密钥的协商，因为它们之前已经同意了一个会话密钥，并直接安全地交换数据。