leak
tion is leaked during submitting and reading.
does not leak (additional) information as all informa-
read
There are, however, some technical details one has to take care
of in order to implement this high-level idea, mostly due to some
conceptual differences in and the higher abstraction level of Fledger.
More specifically:
• A key technical difference between Fledger and Gledger is that
updates to the global state in Fledger are explicitly triggered by
the adversary, whereas Gledger performs those updates automat-
ically during a preprocessing phase whenever an honest party
activates the functionality, before then processing the incoming
request of that party.
As a result of this formulation, both read and submit requests
might change the global transaction list in Gledger before the
request is answered. In the case of Fledger, this means the simu-
lator has to be given the option to update the global state before
a read/submit request is performed. In the case of read requests,
this directly matches the properties of non-local read requests,
i.e., we simply have to define F Gledger
in such a way that it
uses non-local reads only. Such non-local reads then enable the
simulator to first update the global state of Fledger before then
finishing the read request, which directly matches the behavior
of Gledger.
In the case of submit requests, Fledger does not directly include a
mechanism for updating the state before processing the request.
This is because, for realistic distributed ledger protocols, an
incoming submit request that has not even been processed and
shared with the network yet will not cause any changes to the
read
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1062global state. This, however, might technically occur in Gledger
depending on how its parameters, such as the extendPolicy
and validate algorithms, are instantiated. We could address
this by limiting the set of parameters of Gledger to those that
update the global state independently of (the content of) future
submit requests, which matches the behavior of realistic ledger
protocols from practice. Nevertheless, since we want to illustrate
the generality of Fledger, we choose a different approach.
To model that the global transaction list might change depend-
ing on and before processing a new submit request, we define
F Gledger
such that it internally first performs an update of the
submit
global state, based on some information requested from the
simulator via a restricting message, before then validating the
incoming transaction. Since F Gledger
cannot actually apply this
submit
update itself (as this operation is limited to F Gledger
update when it is
triggered by update requests from the adversary), the update is
then cached in the subroutine Fupdate. The adversary is forced
to apply this cached update first whenever he wants to further
update the global transaction list, advance time, or perform a
read request. This formulation provides the simulator with the
necessary means to update the global state before an incoming
submit request, if necessary, while not weakening the security
guarantees provided by Fledger compared to Gledger. In particu-
lar, read requests will always be answered based on the most
recent update of the state, including any potentially cached
updates.
• Due to a lower level of abstraction, the parameterized algo-
rithms used in Gledger take some inputs that are not directly
included in Fledger, such as a list of all honest activations and
a future block candidate (which is an arbitrary message pro-
vided by the adversary at some point in the past). We could in
principle add the same parameters to subroutines in Fledger, i.e.,
essentially encode the full state and logic of Gledger within our
instantiations of subroutines. Observe, however, that a higher-
level protocol generally does not care about (security guarantees
provided for) technical details such as cached future block can-
didates or lists of honest activations. A higher-level protocol
only cares about the security properties that are provided by
the global transaction list, such as consistency, double spending
protection, and liveness.10 Such security properties can already
be defined based on the information that is included in Fledger
by performing suitable checks on the global transaction list,
buffer list, and current time. In particular, it is not actually nec-
essary to include further technical details such as a list of honest
activations. This is true even if a security property within a real-
ization (of Gledger or Fledger) actually also depends on, say, the
number of honest activations. Such a realization can still realize
an ideal functionality that requires, e.g., consistency to always
hold true independently of the number of honest activations:
one can force the environment to always activate a sufficient
number of honest parties within each time frame, modeling a
setup assumption that is required for security to holds. This
is a common technique that has already been used, e.g., for
10We consider the standard definition of liveness in distributed ledger, resp. blockchain,
context [20, 38]: A transaction casted by an honest client should become part of the
ledger after some (known) upper time boundary.
analyzing Bitcoin [5, 20], including an analysis based on Gledger.
Alternatively to limiting the environment, parties can simply
consider themselves to be corrupted if the environment did not
activate a sufficient number of honest parties, modeling that
they cannot provide any security guarantees such as consis-
tency once the environment violates the setup assumptions.
This modeling technique is novel in the field of distributed
ledgers and blockchains. We use this technique in our modeling
of Corda (cf. Section 4.2).
Hence, in the spirit of abstraction and simplification, we choose
not to include further technical details of Gledger in F Gledger
ledger
but rather use the following mechanism to deal with any addi-
tional inputs to parameterized algorithms such as the algorithm
extendPolicy: Whenever one of the parameterized algorithms
from Gledger is run within Fledger, the adversary provides any
missing inputs that are not defined in F Gledger
, such as the next
ledger
block candidate variable for the extendPolicy algorithm. By this
definition, the adversary can freely determine technical details
that are present only in Gledger while F Gledger
still inherits all
ledger
properties that are enforced for the global transaction list, buffer
list, and/or are related to time.
• The functionality Gledger is also parameterized with an algo-
rithm predictTime which determines, based on the set of acti-
vations by honest parties, whether time advances. While we
could also add this algorithm into Fledger, more specifically
into F Gledger
updRnd , by the same reasoning as above a higher-level
protocol is typically not interested in this property: it has not
implications for the security properties of the global transaction
list. Hence, we chose not to include this additional restriction
of the adversary via the predictTime in Fledger.
However, if the parameters of Gledger are such that a certain
time-related security property of the global transaction/block
list is met, then F Gledger
updRnd enforces the same properties, i.e., pre-
vents the adversary from advancing time unless all properties
are met. We exemplify this for the common security properties
of liveness and chain-growth. That is, we include parameters
into F Gledger
updRnd that, when they are set, enforce one or both of
these security properties, and then show that this can be re-
alized as long as Gledger is instantiated in such a way that it
also provides these security properties. Clearly the same mecha-
nism can also be used for capturing arbitrary other time-related
security properties.
• There are some slight differences in the format of transactions
and the global state between Fledger and Gledger, with the key
difference being that the global state of Gledger is a list of blocks,
whereas the global state in Fledger is a list of individual trans-
actions. We therefore require the existence of an efficient in-
vertible function toMsglist that maps the output of the Blockify
algorithm to a list of transactions contained in that algorithm.
Note that such an algorithm always exists: for natural defini-
tions of Blockify that are used by reasonable blockchains, there
will always be a list of well-formed transactions encoded into
each block. For artificial definitions of Blockify that do not pro-
vide outputs which can be mapped to a reasonable definition of
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1063a list of transactions, one can always interpret the full block as
a single transaction. In addition, we store the end of each block
as a special meta transaction in the global transaction list of
Fledger, so one can define still identify the boundaries of individ-
ual blocks. This is necessary for lifting the security properties of
consistency from Gledger to Fledger, namely, honest users (that
have already been registered for a sufficiently long time) are
guaranteed obtain a prefix of the global transaction list except
for at most the last windowSize ∈ N blocks.
As already explained, we want to show that Gledger realizes
F Gledger
. Since Gledger has a slightly different interface and works
ledger
on a lower abstraction level than Fledger, we also have to add a
wrapper Wledger on top of Gledger that transforms the interface and
lifts the abstraction level to the one of Fledger. On a technical level,
Wledger acts as a message forwarder between the environment and
Gledger/Gclock that translates message formats between those of
Fledger and those of Gledger while also taking care of some low level
operations that are not present on Fledger. More specifically:
• Incoming submit and read requests are simply forwarded by
the wrapper.
• The output to read requests provided by Gledger is in the form of
a list of blocks. Wledger uses the toMsglist function mentioned
above to translate these blocks to a list of transactions to match
the format of outputs for read requests from Fledger.
• Time in Gledger is modeled via a separate subroutine Gclock,
whereas Fledger includes all time management operations in
the same functionality. Hence, the wrapper is also responsible
to answering requests for the current time, which it does by
forwarding those requests to the subroutine Gclock of Gledger
and then returning the response.
• As mentioned, the functionality Gledger includes a maintenance
operation MaintainLedger that can be performed by higher-
level protocol and which models, e.g., a mining operation that
must be performed in a realization. In contrast, Fledger does
not include such an operation as higher-level protocols typi-
cally do not want to explicitly perform mining, but rather expect
such operations to be performed automatically “under the hood”
of the protocol. This also matches how ideal blockchain func-
tionalities have been used in the literature so far: we are not
aware of a higher-level protocol that uses an ideal blockchain
functionality and which manually takes care of, e.g., triggering
mining operations. This is true even for [27], where a higher-
level protocol was built directly on top of Gledger. That protocol
simply assumes that the environment takes care of triggering
MaintainLedger via a direct connection from the environment
to Gledger.
The wrapper resolves this mismatch by allowing the adversary
on the network to freely perform MaintainLedger operations,
also for honest parties, modeling that parties might or might
not execute a mining operation. This models that parties au-
tomatically perform mining without first waiting to receive
an explicit instruction from a higher-level protocol to do so.
Since the exact set of parties which performing mining opera-
tions is determined by the network adversary, this safely over
approximates all possible cases that can occur in reality.
Note that this change actually does not alter or weaken the
security statement of Gledger. Without a wrapper, Gledger al-
ready allows the environment to perform (or not perform at
all) arbitrary MaintainLedger operations for both honest and
dishonest parties. Hence switching this power from the envi-
ronment to the adversary on the network provides the same
overall security statement. The only difference is that now the
operation is indeed performed “under the hood” of the protocol,
i.e., a higher-level protocol need not care about manually per-
forming this operation anymore. This also matches how Gledger
was used by a higher-level protocol in [27] (see above).
• Registration of both honest and corrupted parties in Gledger
(and the clock Gclock) must be handled manually by higher-
level protocols. In contrast, Fledger considers an honest party to
be registered once it performs the first operation, modeling that
a party automatically registers itself before interacting with
the ledger, while not including a registration mechanism for
dishonest parties. The former is because higher-level protocols
typically expect registration, if even required, to be handled
“under the hood”, while the latter is because a list of registered
dishonest parties generally is not necessary to define expected
security properties for the global transaction list (this follows
the same reasoning given above on why we did not include
certain technical details from Gledger in F Gledger
ledger
To match this behavior, Wledger also automatically registers
honest parties in both Gledger and Gclock when they receive their
first request from a higher-level protocol. For dishonest parties,
Wledger keeps the original behavior of Gledger and Gclock, i.e.,
the network adversary can freely register dishonest parties.
• The subroutine Gclock requires all registered parties to notify
the clock during each time unit before time can advance, mod-
eling that every party must have been able to perform some
computations during each time unit. Following the same rea-
soning as for the MaintainLedger operation, this is a detail
that higher-level protocols typically expect to be managed “un-
der the hood” of the protocol and generally do not want to
manually take care of. For this reason, this restriction is not
included in Fledger.11 The wrapper uses the same mechanism as
for MaintainLedger operations to map between both abstrac-
tion levels, i.e., the adversary on the network can freely instruct
parties to notify the clock Gclock that time may advance. Again,
this safely over approximates all possible cases in reality while
not giving the environment any more power than it already
has.
).
11We note that, if desired, this restriction could easily be added to Fledger via a suitable
instantiation of the FupdRnd subroutine. Our realization proof would still work for this
case. However, as explained, we expect that this is generally not needed/desired.
Session 4A: Modeling Blockchains and Distributed Ledgers CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1064