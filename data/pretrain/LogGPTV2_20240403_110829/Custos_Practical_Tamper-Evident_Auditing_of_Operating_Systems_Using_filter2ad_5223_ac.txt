2) The audit challenge is received by the untrusted com-
ponent of the Logger, which passes it to the enclave.
The enclave veriﬁes the challenge’s authenticity (by
ensuring that its signature is valid) and freshness (by
ensuring that cID has not been used before). If b2
was unspeciﬁed in the challenge, the enclave commits
the current
log block Me and sets b2 = e. Finally,
it receives from the untrusted component a copy of
the requested blocks Mb1 , . . . , Mb2 and their associated
proofs σsk(Mb1 ), . . . , σsk(Mb2), and produces a signature
σsk(cID(cid:107)b1(cid:107)b2(cid:107)Mb1(cid:107)σsk(Mb1 )(cid:107) . . .(cid:107)Mb2(cid:107)σsk(Mb2 )). The
untrusted Logger then transmits the blocks, the proofs
and the generated signature as a response to the Auditor.
3) The Auditor validates the Logger’s response signature
and then iteratively veriﬁes the integrity proof for each
log block. If successful, the Auditor stores the logs and
proofs. It also notiﬁes the Logger of the successful result;
this message will become relevant when we introduce the
decentralized version of the protocol. If veriﬁcation fails,
the Auditor will raise an alert to notify the administrator
of an incorrect Logger.
VII. DECENTRALIZED AUDITING
In spite of remaining the predominant common practice for
logging in large organizations, a centralized auditing strategy
might be problematic when considering our powerful attacker
model. In fact, while centralized auditing retains a copy of the
integrity-protected logs off of the (potentially compromised)
host, its log server represents a single point of failure. As
a result, a viable attack strategy against centralized CUSTOS
would be for the adversary to participate in the auditing
protocol in an honest manner, and then attempt to compromise
the log server. Once the log server is compromised,
the
adversary could engage in the same anti-forensic activities that
they would have otherwise conducted on the host, but without
raising alerts that would cause their immediate detection.
5The ability for the Auditor to request previously committed, already
veriﬁed log blocks will become relevant for reconstruction purposes.
TABLE II: Parameters for decentralized audits, controlled by admin-
istrative policy and can be different for each participating node.
Notation Description
T
w
µ
r
Period between audits. That is, a node initializes a
round of audit challenges every T .
Number of audit challenges that a node sends during
each audit round.
Timeout to receive a response in the protocol; µ must
be less than T .
Number of nodes where each block of log entries
needs to be replicated.
Fig. 3: System-layer diagram of an audit. The three protocol messages
in Figure 2 correspond in this diagram to events 3, 9, and 15,
respectively. The functionalities running inside the TEE are limited
to generating protocol messages, verifying message authenticity and
updating the enclave state in response to successful audits.
In this section, we address this limitation through an
alternative, decentralized auditing strategy comprised of 3
principal components: (1) we now place a trusted Auditor
component running inside the enclave of each host within
CUSTOS’ deployment network; (2) this Auditor is responsible
for administering Decentralized Audit Challenges in concert
with the other nodes in the network; (3) as this protocol
results in the distributed replication of log blocks throughout
the network, a Distributed Log Reconstruction mechanism is
provided that allows administrators to efﬁciently retrieve a
forensic record of events from a particular host over a given
time span. We describe each of these components below.
1) Trusted Auditor: When ﬁrst initialized, the trusted Au-
ditor is provided a set of parameters (summarized in Table II)
that govern its behavior. They include the period between audit
challenges T , the number of nodes to challenge in each round
w, and a timeout value µ that the Auditor should wait on
a challenge response before declaring failure. These values
can be ﬁxed across all nodes or vary from node-to-node.
6
TEETEE2Generate Challenges1Every T4Receive Challenge5Verify Challenge6Sign Me7Retrieve logsto be sent9Send Response8AuthenticateResponse10Receive Response11Verify Response12Verify log integrity13Store logs15SendResult14PrepareResult16ReceiveResult17VerifyResult18Update ReplicationMetadata3Send ChallengesAuditorLoggerTABLE III: An example Global State Report (G) with r = 3,
compiled by the administrator to track the audit results of each node,
at the granularity of single log blocks.  indicates a successful audit,
while  indicates an unsuccessful one.
Node Block ID Auditors
...
1
1
2
3
...
...
{4 , 6 , 7 }
{3 , 6 , 7 }
{7 , 8 , 9 }
{1 , 2 , 5 }
...
...
71
72
80
42
...
Additionally, we introduce a new parameter r for the Logger
component, which speciﬁes the number of nodes on which
each of its log blocks should be replicated. The Logger and
Auditor components run in the same enclave and process space
and share the same identity key pair.
2) Decentralized Audit Challenges: The decentralized au-
diting variant builds on the same audit protocol used in the
centralized version; Figure 3 shows a system-layer diagram of
how the audit challenge ﬂows through the trusted and untrusted
components of two nodes, one in the Auditor role and one in
the Logger role. Below, we explain how decentralized auditing
wraps the audit protocol described in Section VI.
1) Every T , the Auditor selects w nodes uniformly at random
from the network. It then issues to each node an audit
challenge over (b1 = ∗, b2 = ∗), which are wildcards
to be resolved by the receiving Logger according to its
replication needs. ( 1 - 3 ).
2) Each Logger responds to the audit challenge in the same
manner described above. The Logger always commits and
returns the most recent log block (i.e., b2 = e), and it will
adjust b1 to include additional historic blocks that have
not yet been replicated r times if they have not been sent
to that Auditor before ( 4 - 9 ).
3) Upon receiving a response, the Auditor checks that the
response is valid and then veriﬁes the integrity proofs
of the log blocks included in it ( 10 - 13 ). If the response
is invalid or the Logger does not respond within µ, the
Auditor alerts the administrator of a failed challenge. If
the response is valid but the veriﬁcation of log integrity
fails, the Auditor alerts the administrator that the logs of
the challenged node have been tampered with.
4) If both response and log integrity were valid, the Auditor
sends a result as a conﬁrmation to the Logger that the log
was veriﬁed and replicated ( 14 - 15 ). If such conﬁrmation
is valid,
the Logger updates its replication count for
the audited blocks ( 16 - 18 ). If no valid conﬁrmation is
received within µ, the Logger discards the challenge. The
result of each audit is also mirrored to an administrative
machine for accounting purposes.
3) Distributed Log Reconstruction: Decentralized auditing
prevents the log storage server from becoming a single point
of failure; in the steady state of the protocol, each node’s
logs will be stored with r redundancy at different remote
nodes in the network. However, decentralized storage also
complicates the matter of inspecting the logs during post-
mortem investigations. To address that, we present the follow-
7
Algorithm 6: Pseudocode of function for decen-
tralized log reconstruction. Min returns the minimum
value in a set, Request retrieves node v’s log block
Mi from node n, Sum sums the values in a set, and
ResponseCallback executes when node n’s response
to Request arrives.
Function Retrieve(node v, bl id s, bl id e, report G)
Logs ← []
ReqCnt ← [∀n ∈ N, 0]
for i = s to e do
Locations ← G[v][i]
n ← l ∈ Locations, s.t. ∀k ∈ Locations
ReqCnt[k] ≥ ReqCnt[l];
Request(n, v, i, ResponseCallback)
ReqCnt[n] ← ReqCnt[n] + 1
while Sum(ReqCnt) > 0 do
wait
return Logs
Function ResponseCallback(node n, bl
Logs[i] ← M
ReqCnt[n] ← ReqCnt[n] − 1
id i, block M)
ing algorithm that enables the parallelized reconstruction of a
target node’s log history at a single point in the network. To
begin, the administrator compiles the result messages of each
audit challenge into a Global State Report (G), an example
of which is shown in Table III. G tracks the integrity state
of each node’s logs over time, but also indexes where each
log block has been replicated. To reconstruct a target node
v’s logs over a block range s to e, the administrator invokes
the Retrieve function, shown in Algorithm 6. This function
parallelizes retrieval of logs across the available nodes in G.
To maximize throughput,
the function tracks which nodes
are currently ﬁelding requests on other blocks and minimizes
the number of outstanding requests to the same node. While
omitted for brevity, Retrieve also supports recovery from
request timeouts and invalid responses, and ResponseCallback
veriﬁes v’s signature over block Mi as in the original audit.
VIII.
IMPLEMENTATION
We implemented CUSTOS in C for Linux Audit 2.8.2. In
particular, we extended the auditd user space daemon [70]
to be integrated with an Intel SGX enclave that supports all
of CUSTOS’ trusted logging and auditing functionalities. Our
implementation consists of 2,254 lines of C code (excluding
Makeﬁles, libraries, comments and blank lines), of which 658
run inside the SGX enclave. The TEE functions required by our
design are provided by Intel SGX and the monotonic counter
used by the Logger is an SGX-managed hardware counter.6
We use Intel SGX’s trusted cryptography library to compute
hashes (with SHA-256) and digital signatures (with ECDSA),
and the TPL library [39] to serialize messages before network
transfer, which we implement using TCP sockets. Importantly,
however, even though we only implemented it on top of Linux
Audit, CUSTOS is designed to be neutral to the underlying
operating system and audit framework.
6CUSTOS’ use of the monotonic counter feature is limited to one write per
server startup, which is safe with regard to the risks of memory wear-out [78].
IX. SECURITY ANALYSIS
We now explain how CUSTOS assures the intended security
and design goals. The correctness of G1 (tamper-evident logs)
can be evaluated by enumerating the space of attacks against
the Logger. For simplicity, we assume here that a centralized
audit has been issued from block zero to the present.7
• Historic Event Deletion. An attacker cannot delete arbi-
trary events from a node’s historic log records. Removing
a subset of events from a block will invalidate its integrity
proof, which cannot be forged. Attempting to remove an
entire block will invalidate the response, which cannot
be forged. A Truncation Attack on the log will similarly
be detected by validating the response. This is because all
protocol messages are processed inside an enclave, which
protects cryptographic keys from the untrusted OS.
• Historic Event Tampering. An attacker cannot insert or
modify events into a committed log block without invali-
dating its integrity proof. An attacker also cannot re-order
blocks because the trusted component of the Logger signs
over the chronologically-ordered challenge response.
• Protocol Termination. An attacker with root privilege is
able to terminate the Logger process at any time. An
attacker may use this ability to try to prevent a block’s
commitment, but will then need to restart the Logger so
it can respond to future challenges. Because the current
block is committed during the Shutdown Phase, which
is always invoked during regular process killings (in our
implementation, from auditd’s SIGTERM handler), the
attacker will have to force kill the process. However, by
skipping the Shutdown Phase there will not be an up-to-
date sealed-e on disk that will unlock to the enclave’s
current conﬁguration (recall
that mcID is a hardware
counter that is incremented in the Startup Phase). Because
the attacker cannot forge sealed-e, the Logger will raise an
error, which will be detected during the audit. By the same
logic, the attacker is unable to launch Rollback Attacks
while the Logger is shutdown because this will cause
parameter unsealing to fail during the Startup Phase.
CUSTOS satisﬁes G2 (third-party veriﬁability) by having
each node publish its public key after initialization. This key
can be used to verify any log blocks produced by the node in
an online challenge or an ofﬂine (e.g., Court-related [52], [53],
[33]) audit. Recall that it is necessary for the organization to
deploy a key management service for nodes’ public keys.
Our system facilitates G3 (ﬁne-grained audits) by permit-
ting audit challenges over ranges of log blocks. The number of
log events in a block varies with the workload of the system;
however, the administrator can exert control over the size of
blocks by tuning the parameters T and w. This is because a
block is guaranteed to be committed each time an honest node
receives an audit challenge. Because audits are ﬁne-grained (to
the granularity of a single log block), our protocols can also
be used to issue proof-of-retrievability challenges on subsets
of historic log blocks that have previously been veriﬁed.
CUSTOS pursues goal G4 (log availability) by storing
integrity-veriﬁed logs at multiple remote locations during the
7Analyzing the security of G1 on either auditing protocol is analogous
because centralized audits are a special case of decentralized ones.
decentralized auditing: once a log block has been audited, the
attacker will not be able to erase it unless they compromise all
the r nodes in which it is stored. The higher r is, the more the
complexity and cost of such an attack increase as compared
to the centralized scenario. Further, these logs can be retrieved
using CUSTOS’ log reconstruction protocol. The security of G4
can be analyzed by enumerating the space of attacks against
the decentralized auditing protocol. Let v be a compromised
node that seeks to conceal events contained in block Me. We
have previously established that v will be detected if they fail
to reply to an audit challenge for Me within µ seconds, and v
cannot forge a valid response over tampered logs.