[TOC]
# 引言
如何对so文件中的核心代码进行保护？
通过将核心代码写到自定义节中，并且对该节使用加密工具进行加密，在so文件执行时，利用 ** **attribute**
((constructor));**属性，先于main执行解密函数，作用类似于java中的构造函数
# 实现流程
  1. 确定好自定义节的名称
  2. 开始加密流程
    * 遍历所有节头，根据节头名来定位需要加密的节
    * 获取节头中节的起始位置和大小，对节头指向的数据进行加密
  3. 编写解密代码
    * 用属性： **attribute** ((constructor));声明解密函数
    * 在native层编写解密函数
# 代码实现
## 加密流程
    #include 
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char** argv)
    {
        int fd;
        Elf32_Ehdr ehdr;
        Elf32_Shdr shdr;
        char * section_name_table;
        int i;
        unsigned int base, length;
        char *content;
        //参数验证
        if(argc != 3)
        {
            printf("Encrypt section of elf file\n\nUsage:\n\t%s  \n", *argv);
            goto _error;
        }
        if((fd = open(argv[1], O_RDWR, 0777)) == -1)
        {
            perror("open");
            goto _error;
        }
        if(read(fd, &ehdr, sizeof(Elf32_Ehdr)) != sizeof(Elf32_Ehdr))
        {
            perror("read elf header");
            goto _error;
        }
        //读取节头字符串表
        printf("[+] Begining find section %s\n", argv[2]);
        lseek(fd, ehdr.e_shoff+sizeof(Elf32_Shdr)*ehdr.e_shstrndx, SEEK_SET);
        if(read(fd, &shdr, sizeof(Elf32_Shdr)) != sizeof(Elf32_Shdr))
        {
            perror("read elf section header which contain string table");
            goto _error;
        }
        if((section_name_table = (char*) malloc(shdr.sh_size)) == NULL)
        {
            perror("malloc for SHT_STRTAB");
            goto _error;
        }
        lseek(fd, shdr.sh_offset, SEEK_SET);
        if(read(fd, section_name_table, shdr.sh_size) != shdr.sh_size)
        {
            perror("read string table");
            goto _error;
        }
        lseek(fd, ehdr.e_shoff, SEEK_SET);
        //根据节头名来定位需要加密的节头
        for(i=0; i
    #include 
    #include 
    #include 
    #include 
    int main(int argc, char** argv)
    {
        int fd;
        Elf32_Ehdr ehdr;
        Elf32_Shdr shdr;
        char * section_name_table;
        int i;
        unsigned int base, length;
        char *content;
        unsigned short nsize;
        //参数验证
        if(argc != 3)
        {
            printf("Encrypt section of elf file\n\nUsage:\n\t%s  \n", *argv);
            goto _error;
        }
        if((fd = open(argv[1], O_RDWR, 0777)) == -1)
        {
            perror("open");
            goto _error;
        }
        if(read(fd, &ehdr, sizeof(Elf32_Ehdr)) != sizeof(Elf32_Ehdr))
        {
            perror("read elf header");
            goto _error;
        }
        //读取节头字符串表
        printf("[+] Begining find section %s\n", argv[2]);
        lseek(fd, ehdr.e_shoff+sizeof(Elf32_Shdr)*ehdr.e_shstrndx, SEEK_SET);
        if(read(fd, &shdr, sizeof(Elf32_Shdr)) != sizeof(Elf32_Shdr))
        {
            perror("read elf section header which contain string table");
            goto _error;
        }
        if((section_name_table = (char*) malloc(shdr.sh_size)) == NULL)
        {
            perror("malloc for SHT_STRTAB");
            goto _error;
        }
        lseek(fd, shdr.sh_offset, SEEK_SET);
        if(read(fd, section_name_table, shdr.sh_size) != shdr.sh_size)
        {
            perror("read string table");
            goto _error;
        }
        lseek(fd, ehdr.e_shoff, SEEK_SET);
        //根据节头名来定位需要加密的节头
        for(i=0; i
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SIZE 4096
    jstring getString(JNIEnv*) __attribute__((section (".mytext")));
    //声明为构造函数，在init_array节执行
    void decryte_section() __attribute__((constructor));
    unsigned long getLibAddr();
    void decryte_section() {
        unsigned long base;
        Elf32_Ehdr *ehdr;
        Elf32_Shdr *shdr;
        unsigned long my_text_addr;
        unsigned int nblock;
        unsigned int nsize;
        unsigned int i;
        base = getLibAddr();
        ehdr = (Elf32_Ehdr *)base;
        //自定义节的位置
        my_text_addr = base + ehdr->e_shoff;
        nblock = ehdr->e_entry >> 16;
        nsize = (nblock / PAGE_SIZE) + (nblock%PAGE_SIZE == 0 ? 0 : 1);
        __android_log_print(ANDROID_LOG_INFO, "JNITag", "size of encrypted section is %d", nblock);
        if (mprotect((void *)(my_text_addr / PAGE_SIZE * PAGE_SIZE), nsize*PAGE_SIZE, PROT_READ | PROT_EXEC | PROT_WRITE) == -1){
            __android_log_print(ANDROID_LOG_ERROR, "JNITag", "Memory privilege change failed before encrypt");
        }
        //解密
        for(i=0; iNewStringUTF("Text from JNI");
    };
从下面可以运行结果显示，实现了自定义节的动态解密过程
# 小结
本篇文章主要写了如何对section的加密、以及在`.init_array`节中进行动态解密的详细过程。
想要绕过也是可以的，通过动态调试在解密的.init_array节处下断点，然后dump出解密后的so文件进行反编译即可
# 参考
> [0] [Android so库加固加壳方案](http://szuwest.github.io/android-soku-jia-gu-jia-ke-> fang-an.html)
>
> [1] [Android逆向之旅---> 基于对so中的section加密技术实现so加固](https://blog.csdn.net/jiangwei0910410003/article/details/49962173)
>
> [3] [[原创]简单粗暴的so加解密实现](https://bbs.pediy.com/thread-191649.htm)
* * *