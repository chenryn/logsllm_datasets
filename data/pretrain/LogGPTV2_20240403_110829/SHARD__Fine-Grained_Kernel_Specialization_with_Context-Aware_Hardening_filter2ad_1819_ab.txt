to the application) would not have a good protection ratio
either. For example, consider the write system call, which
shares less than 33% (22.9k out of 68.2k) of its instructions
across NGINX and Redis. The reason is that NGINX only
uses write for ﬁle I/O while Redis uses write for both ﬁle
and network I/O. Therefore, the execution proﬁle of write
under Redis also includes networking functions that are not re-
quired by NGINX. Since system call-only specialization must
support both NGINX and Redis, it would provide access to
all instructions executable by write across both applications.
Hence, ignoring the application dimension would inﬂate the
attack surface in many scenarios.
4 Context-aware Hardening
SHARD employs context-aware hardening to address the un-
certainty of whether code is reachable from a particular sys-
tem call. In particular, SHARD analyzes the kernel using both
static analysis techniques and dynamic workload-based proﬁl-
ing, to determine the accessibility of kernel code per-system
call. Then, SHARD enforces hardening (e.g., control-ﬂow in-
Figure 2: Classes of kernel functions relative to a system call.
tegrity [20]) when it is unsure if the kernel should be allowed
to execute a certain piece of code in the current context.
SHARD classiﬁes code into three, disjoint categories at the
level of functions for each system call (as shown in Figure 2).
In particular, the reachable nodes are the kernel functions ex-
ecuted during dynamic workload-based proﬁling (e.g., bench-
marks and test suites). The potentially reachable nodes are the
kernel functions that static analysis indicates might be reach-
able from a certain system call. Furthermore, static analysis
can conclude (accurately) that some functions are not reach-
able from a certain system call; therefore, those are labeled
unreachable.
SHARD does not harden the kernel when a system call only
executes reachable functions. The reason is that our proﬁling
accurately concludes that these functions are accessible by the
currently invoked system call. Furthermore, reachable consti-
tutes a very small portion of the kernel’s code — only 0.49%
and 0.60% of the native kernel’s instructions are reachable,
on average, for Redis and NGINX, respectively (Table 3).
Therefore, they provide very few ROP gadgets (as we show
in §9.1) and can be more easily tested for correctness.
However, SHARD hardens the kernel when it detects an
execution that transitions from reachable to potentially reach-
able, since SHARD cannot accurately conclude that poten-
tially reachable code is accessible from the system call, , i.e.,
a potentially reachable code path. Therefore, hardening sig-
niﬁcantly raises the bar for attacks on the system through such
executions. Furthermore, SHARD restricts access to unreach-
able functions since they should never be executed during
benign kernel execution of the invoked system call.
The context-aware hardening technique employed by
SHARD is ﬁne-grained control-ﬂow integrity (CFI) [20]. CFI
ensures that all control-ﬂow transfers, at run-time, adhere to a
program’s statically-analyzed control-ﬂow graph (CFG). As
shown by prior work [33], CFI can effectively prevent control-
ﬂow hijacks. Note that other techniques can be applied to
implement context-aware hardening (as we discuss in §11).
5 System Model
This section describes the scenario envisioned for SHARD.
Untrusted application. We assume a service provider (e.g.,
a website owner) needs to provide a service to many untrusted
ReachablePotentially	reachableUnreachableSystem	callhandlerInternal	kernelfunctionsCode	classe
t
i
r
d
a
e
r
t
a
n
e
p
o
t
p
e
c
c
a
read 72.1
write 53.0 68.7
w
4.9
53.0 19.1 32.4
4.5
11.1 32.4
5.6
5.5
34.3
3.4
3.4 13.7
3.6
0.6
2.8
0.9
3.0
openat 19.1 11.1 37.9
5.5
accept 32.4 32.4
5.6
4.5
3.6
3.7
8.1
0.5
6.4
3.8
2.1
4.9
4.8
4.3
exit_group
clone
readlink
epoll_wait
futex
madvise
4.9
3.7
1.6
6.9
2.4
4.8
p
u
o
r
g
_
t
i
x
e
t
i
a
w
_
l
l
o
p
e
x
e
t
u
f
e
n
o
l
c
k
n
i
l
d
a
e
r
3.7
3.7
3.6
3.6
2.9
e
s
i
v
d
a
m
1.6 6.9 2.4 4.8
0.5 3.8 2.1 4.3
8.1 6.4 4.9 4.8
0.6 2.8 0.9 3.0
0.8 3.9 1.9 5.6
2.9 11.0 0.1 2.6 0.4 2.9
0.0 1.5 0.0
0.8
1.4 3.8
3.9
0.0 8.4
1.9
1.3
1.5 1.4 7.7
0.0 3.8 1.3 7.7
5.6
0.1 8.6
2.6
0.4
2.9
(a) Redis
setsockopt 32.2 31.0 31.8
9.9
9.7
8.8
5.0
newstat 20.7 10.1
mkdir 20.3 10.1
9.7
5.1
getdents 19.5
write 16.8
4
6
e
l
ﬁ
d
n
e
s
m
o
r
f
v
c
e
r
4
t
p
e
c
c
a
t
a
n
e
p
o
v
e
t
i
r
t
p
o
k
c
o
s
t
e
s
t
a
t
s
w
e
n
r
i
d
k
m
s
t
n
e
d
t
e
g
e
t
i
r
sendﬁle64 82.8
recvfrom 48.4 53.0
accept4 48.4 46.4 50.2
openat 22.0 11.9 11.3 40.1
10.5
writev 35.2 32.9 34.4 10.5 37.5
w
9.7
8.8
46.4 11.9 32.9 31.0 10.1 10.1
9.7
w
48.4 48.4 22.0 35.2 32.2 20.7 20.3 19.5 16.8
5.1
5.0
9.9
28.9 27.9 21.3 12.0
5.6
9.7
9.5
9.0
9.2
4.2
27.1 19.0 10.8
30.2
19.4 11.0
27.1 28.6
19.0 19.4 23.1
9.9
22.8
9.9
10.8 11.0
11.3 34.4 31.8
9.8
29.8
29.8 34.5
9.8
9.2
9.7
28.9
9.0
9.5
27.9
9.1
8.6
21.3
12.0
4.2
5.6
(b) NGINX
9.1
8.6
100%
75%
50%
25%
0%
Table 2: Instruction overlap across system calls for Redis and Nginx conﬁgurations. Numbers represent thousands of instructions. Colors
represent the intersection size relative to the overall number of instructions used by the row system call. Diagonal represents the instruction
coverage of each system call. Only the highest coverage system calls for each conﬁguration are shown.
Type
Redis
NGINX
Reachable
Potentially reachable
Unreachable
0.49%
45.52%
53.99%
0.60%
44.35%
55.05%
Table 3: The number of kernel instructions in each of the three
classes (Figure 2). The proﬁling details are provided in §9.3.
clients. The clients access the service by sending requests to
a client-facing application (i.e., untrusted application), such
as a web server or database application, installed on the ser-