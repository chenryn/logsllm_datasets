the job of Demux , then, is to decrypt and process the message stream. This cleanly separates the tasks
of “buﬀering” and “consuming” the ciphertext. The alternative would be to leave the receiver operations
atomic, as FGMP have done; but this choice leads to complex security notions, as it requires handling
synchronicity for a number of diﬀerent cases (e.g., [20, Deﬁnition 4.1]).
The adversary.Our execution model for security games is adopted from the RS framework, but we will be
a bit more precise in our formulation. The adversary queries oracles provided by the security experiment,
which in turn may invoke the adversary for fulﬁlling SD queries. To ensure that each oracle query completes
before the next query is issued, the adversary may not issue a query while another query is pending. In
eﬀect, the adversary may not use its oracles for computing its responses to SD queries.
We formalize this idea as follows. An adversary is a pair of stateful, randomized algorithms with interfaces
A1(var str Env ) (cid:55)→ bool and A2(str I, var str Env ) (cid:55)→ str O. Most games in this paper begin by declaring
a variable Env of type str, which is used to share state between A1 and A2. These games also deﬁne an
oracle SD that, on input of a string I, executes O ←← A2(I, var Env ) and returns O. When A1 makes a
query to Send or Recv and a PSC algorithm is invoked, the PSC algorithm is given oracle access to SD
for making SD queries. Algorithm A2 may change the value of Env as a side eﬀect, allowing it to convey
information to A1; algorithm A1 may also convey information to A2 by modifying the value of Env .
In the remainder, we will often denote the pair (A1,A2) by A for convenience. We require that each
of these algorithms halt, regardless of coin tosses or oracle responses, in a bounded number of steps that
depends only on the length of their inputs. By convention, the adversary’s runtime includes the time needed
to evaluate its queries. An adversary is called t-time if both A1 and A2 halt in at most t time steps. We
8
silently extend this execution model and these conventions to all subsequent security experiments in this
paper.
The PRIV-SR and PRIV-S notions.Refer to the PRIV-SR experiment deﬁned in Figure 2. For a given
PSC CH and challenge bit b, the experiment compactly encapsulates three diﬀerent notions of privacy, each
associated to a permitted leakage parameter (cid:96) ∈ {lensc, len, none}. When (cid:96) = lensc, only message-stream
privacy is captured; when (cid:96) = len the notion captures privacy of both the message streams and their context;
ﬁnally, (cid:96) = none adds length-hiding to the list.3
Let A = (A1,A2). The game begins by initializing the adversary state Env , sender state (Mu, Wr ),
and receiver state (Re, De). Algorithm A1 is then executed with access to two oracles. The ﬁrst, Send,
takes as input a 4-tuple of strings (M0, sc0, M1, sc1). It ﬁrst checks that the values of leak ((cid:96), M0, sc0) and
leak ((cid:96), M1, sc1) are equal; if not, it returns an indication of invalidity of the query. It then executes Mux and
Write , with SD as the SD oracle, and returns the output (C, γ) to A1. (Recall that A2 may update Env as
a side eﬀect of the SD queries made by Mux and Write .) String C is appended to S, which keeps track of
the sender ciphertext stream. The second oracle, Recv, takes as input a ciphertext fragment C and invokes
(Y, H, α) ←← Read SD (C, var Re), then (M, sc, γ) ←← Demux SD(Y, H, α, var De). If the channel is in-sync
and Y is a preﬁx of the sender stream S, then the oracle “consumes” Y from the stream and suppresses
the output of M and sc by setting M, sc ← ⊥. (This is necessary because (M, sc) corresponds to an input
to Send and might trivially leak b, depending on the permitted leakage (cid:96).) Otherwise, the oracle declares
the channel to be out-of-sync and outputs (M, sc, γ) without suppressing M and sc. After the adversary
interacts with its oracles, it outputs a bit b(cid:48), the outcome of the game. We deﬁne the advantage A in
attacking CH in the PRIV-SR ((cid:96)) sense as
(cid:2) Exppriv-sr
CH,(cid:96),b(A) = b(cid:3) − 1 ,
Advpriv-sr
CH,(cid:96) (A) = 2 Pr
b
where the probability is over the coins of the game, A1, A2, and the choice of b (implicitly sampled as
b ←← {0, 1}). In this experiment, we track the following adversarial resources: the time-complexity t of the
adversary (that is, the maximum runtime of either A1 or A2), the number of Send queries q1 and the total
length in bits of the inputs of each query µ1, and the number of Recv queries q2 and their total bitlength µ2.
We deﬁne the maximum advantage of any adversary with these resources as Advpriv-sr
A chosen-plaintext (fragment) attack version of PRIV-SR is obtained simply by removing the Recv from
the experiment; we refer to this game as PRIV-S and deﬁne the PRIV-S advantage of A in the same way;
as there is no Recv oracle, we drop q2, µ2 from the adversarial resources.
CH,(cid:96) (t, q1, q2, µ1, µ2).
4.3 Integrity
Following FGMP, we consider integrity of both the ciphertext stream (INT-CS) and the plaintext streams
(INT-PS). The ﬁrst formalizes the conservative goal that the channel (i.e., the ciphertext stream) should
remain in-sync, just as discussed in Section 4.2. The second formalizes a weaker property, namely that the
plaintext streams carried by the channel should remain in-sync.
The INT-CS notion.Refer to the INT-CS experiment deﬁned in Figure 3. It begins just as in the PRIV-
SR game. The Send oracle is similar to the PRIV-SR game, except A1’s queries consist of pairs (M, sc)
instead of a 4-tuple. We keep track of whether the channel is in-sync in the exact same manner. If ever the
out-of-sync Recv oracle outputs a valid message fragment and context, then the game sets a ﬂag win ← 1;
the outcome of the game is the value of win after A1 halts. Deﬁne the advantage of A in attacking CH
in the INT-CS sense as Advint-cs
the experiment and of the adversary. We deﬁne the function Advint-cs
CH (t, q1, q2, µ1, µ2) as the maximum
advantage of any adversary running in time t, making at most q1 queries to Send and q2 queries to Recv,
and the total bit-length of its queries to Send (resp. Recv) does not exceed µ1 (resp. µ2) bits.
The INT-PS notion.Integrity of the plaintext streams is deﬁned via the INT-PS game in Figure 3. This
game is a bit diﬀerent than the others in that we do not keep track of whether the ciphertext stream is in-sync;
rather, we are concerned with the input and output plaintext streams. For each stream context sc ∈ {0, 1}∗
3There are other parameters that may be of practical interest. For example, DLFK+ deal with whether the fragment encodes
CH (A) = 1(cid:3) , where the probability is over the coins of
CH (A) = Pr(cid:2) Expint-cs
the end-of-stream [18, Deﬁnition 8].
9
CH (A)
Expint-cs
1 declare str Env , S, bool sync, win
2 (Mu, Wr , Re, De) ←← Init ( )
3 sync ← 1; ASend,Recv
4 return win
(var Env )
1
CH (A)
Expint-ps
16 declare str Env , S[ ], str R[ ], bool win
17 (Mu, Wr , Re, De) ←← Init ( )
18 ASend,Recv
19 return win
(var Env )
1
Send(M, sc)
5 (X, H, α) ←← Mux SD (M, sc, var Mu)
6 (C, γ) ←← Write SD (X, H, α, var Wr )
7 S ← S (cid:107) C
8 return (C, γ)
Send(M, sc)
20 (X, H, α) ←← Mux SD (M, sc, var Mu)
21 (C, γ) ←← Write SD (X, H, α, var Wr )
22 Ssc ← Ssc (cid:107) M
23 return (C, γ)
Recv(C)
9 (Y, H, α) ←← Read SD (C, var Re)
10 (M, sc, γ) ←← Demux SD (Y, H, α, var De)
11 if sync and Y (cid:22) S then S ← S % Y
12 else sync ← 0
win ← win ∨ (M (cid:54)= ⊥ ∧ sc (cid:54)= ⊥)
13
14 return (M, sc, γ)
Recv(C)
24 (Y, H, α) ←← Read SD (C, var Re)
25 (M, sc, γ) ←← Demux SD (Y, H, α, var De)
26 if M (cid:54)= ⊥ and sc (cid:54)= ⊥ then
28 if Rsc (cid:54)(cid:22) Ssc then win ← 1
29 return (M, sc, γ)
Rsc ← Rsc (cid:107) M
27
SD(I)
15 O ←← A2(I, var Env ); return O
SD(I)
30 O ←← A2(I, var Env ); return O
left: game for deﬁning ciphertext-stream integrity (INT-CS) for partially speciﬁed channel CH. Right:
Figure 3:
game for deﬁning plaintext-stream integrity (INT-PS) of CH. Let A = (A1,A2).
CH (A) = Pr(cid:2) Expint-ps
CH (A) = 1(cid:3) , where the probability is over the coins of the
queried by the adversary, we keep track of the corresponding input stream Ssc. (That is, Ssc = cat(M ),
where M is the sequence of message fragments pertaining to sc asked of Send.) For each sc (cid:54)= ⊥ output
by Recv, we keep track of the corresponding output stream Rsc. (That is, Rsc = cat(M ), where M is the
sequence of valid message fragments pertaining to sc output by Recv.) The adversary wins if at any point
in the game, it holds that Rsc (cid:54)(cid:22) Ssc for some sc ∈ {0, 1}∗. Deﬁne the advantage of A in attacking CH in
the INT-PS sense as Advint-ps
experiment and of the adversary.
INT-CS (cid:54)⇒ INT-PS for PSCs. Traditional results for AE schemes establish an intuitive relationship
between integrity of ciphertexts and plaintexts: that the former is strictly stronger than the latter. See
Bellare and Namprempre [8, Theorem 3.1] in the case of stateless and randomized AE, and FGMP [20,
Appendix C] for stream-based channels. It is perhaps counter-intuitive, then, that INT-CS does not imply
INT-PS in our setting. The reason for this is that we do not require that PSCs be operationally correct in
the security games; indeed, the correctness of the scheme is used in a crucial way in those proofs. We cannot
formalize correctness for PSCs without restricting the SD-oracle in some way, and doing so would reduce
the generality of our results. Nevertheless, in Appendix A, we give a natural deﬁnition of correctness for
fully speciﬁed channels—like PSCs, but with a fully realized SD-oracle—that extends FGMP’s correctness
condition to the multiplexed setting. With this deﬁnition we show something a bit stronger than usual: that
INT-CS implies INT-PS if and only if the SD-oracle is realized correctly.
4.4 Receiver-status simulatability and a generic composition
If a PSC is INT-CS secure, then an eﬃcient attacker can do nothing but deliver the honestly produced
ciphertext stream in the correct order. Thus it is intuitive that any PSC that is both PRIV-S secure and
INT-CS secure will also be PRIV-SR secure, because, in eﬀect, the Recv in the PRIV-SR game is useless.
This is almost true; the wrinkle is that the Recv oracle returns status information in addition to the
message fragment and stream context. As in the FGMP setting, our syntax does not restrict the receiver (in
particular, the demultiplexer) to return just one status message. Moreover, the status message may depend
on the receiver state (of which a PRIV-S adversary would be ignorant), or be inﬂuenced by the adversarially
10
CH,S,b (A)
Expsim-stat
1 declare str Env , S
2 (Mu, Wr , Re, De) ←← Init ( )
3 b(cid:48) ←← ASend,Recv
(var Env )
4 return b(cid:48)
1
Send(M, sc)
5 (X, H, α) ←← Mux SD (M, sc, var Mu)
6 (C, γ) ←← Write SD (X, H, α, var Wr )
7 S ← S (cid:107) C
8 return (C, γ)
Recv(C)
9 if b = 1 then
10
(Y, H, α) ←← Read SD (C, var Re)
(∗,∗, γ) ←← Demux SD (Y, H, α, var De)
11
12 else γ ←← S SD (C, S)
13 return γ
SD(I)
14 O ←← A2(I, var Env ); return O
Figure 4: the SIM-STAT game for partially speciﬁed channel CH.
controlled SD. In this section, we give a notion of security we call receiver-status simulatablity (SIM-STAT)
and show that it, PRIV-S, and INT-CS imply PRIV-SR.
The SIM-STAT notion.The notion naturally captures what the adversary learns from the receiver’s state
by observing the status messages it outputs. It is inspired by the ideas put forward in the subtle AE setting [6]
and naturally generalizes a notion of FGMP. The SIM-STAT game (deﬁned in Figure 4) is a simulation-based
game in which the adversary is asked to distinguish the status information output by the real receiver from
those output by a simulator S. The simulator is given the ciphertext stream S produced by the sender, as
well as the input fragment C, and so it can tell if the channel is in-sync, but it is not given the receiver state.
Informally, security demands that for every eﬃcient adversary, there is an eﬃcient simulator such that the
adversary cannot distinguish real status messages from fake ones with non-negligible probability.
The game is associated to adversary A = (A1,A2), a challenge bit b, and a receiver-status simulator S.
On input of C, if b = 1, then oracle Recv executes the usual receiver code and outputs γ; otherwise, the
oracle executes S on input of (C, S), where S is the sender stream (recorded by Send), and with oracle
access to SD for servicing SD requests. When S halts and outputs a string γ, the oracle outputs γ. We
deﬁne the advantage of A in attacking CH with simulator S in the SIM-STAT sense as
Advsim-stat
CH,S (A) = 2 Pr
b
(cid:2) Expsim-stat
CH,S,b (A) = 1(cid:3) − 1 .
Deﬁne the maximum advantage of any t-time adversary with resources (q1, q2, µ1, µ2) in winning the game
CH,S (t, q1, q2, µ1, µ2). We require that S halts, regardless of its current
instantiated with simulator S as Advsim-stat
state, internal coin tosses, and the result of its SD requests, in a bounded number of time steps. Its runtime
also accounts for the time needed to evaluate its oracle queries; thus, its runtime depends on the time A
takes to compute its SD responses.
PRIV-S ∧ INT-CS ∧ SIM-STAT ⇒ PRIV-SR.We prove that for any (cid:96), security in the sense of PRIV-S ((cid:96)),
INT-CS, and SIM-STAT suﬃce for PRIV-SR ((cid:96)).
Theorem 1. Let (cid:96) ∈ {lensc, len, none} and let CH be a PSC. For every t, s, q1, q2, µ1, µ2 ∈ N and s-time
simulator S it holds that
Advpriv-sr
CH,(cid:96) (t, r) ≤Advpriv-s