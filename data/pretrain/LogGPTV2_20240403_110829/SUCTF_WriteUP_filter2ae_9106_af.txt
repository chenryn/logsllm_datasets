        s = socket.socket()
        s.connect(("game.suctf.asuri.org", 10002))
        print "connecting..."
        #计算a，向服务器端发送I和A，相当于发起认证请求
        a = gm.mpz_rrandomb(agree.seed, 20)
        A = gm.powmod(agree.g, a, agree.N)
        A = 0 #此处为攻击第一步
        print "A:", A
        message = agree.I + "," + str(A).encode("base_64").replace("n", "") + "n"
        s.send(message)
        # 等待接收salt和B，salt稍后用于和password一起生成x，若client口令正确，则生成的x和服务器端的x一致
        message = s.recv(1024)
        print message
        message = message.split(",")
        salt = int(message[0].decode("base_64"))
        B = int(message[1].decode("base_64"))
        print "received salt and B"
        print "salt:", salt
        print "B:", B
        # 此时服务器端和客户端都已掌握了A和B，利用A和B计算u
        uH = hashlib.sha256(str(A) + str(B)).hexdigest()
        u = int(uH, 16)
        print "利用A、B计算得到u", u
        # 开始计算通信秘钥K
        # 利用自己的password和服务器端发来的salt计算x，如果passowrd与服务器端的一致，则计算出的x也是一致的
        # xH = hashlib.sha256(str(salt) + agree.P).hexdigest()
        wrongPassword = "test"
        xH = hashlib.sha256(str(salt) + "wrong_password").hexdigest()
        x = int(xH, 16)
        print "x:", x
        #客户端公式：S = (B - k * g**x)**(a + u * x) % N
        #服务器端公式：S = (A * v**u) ** b % N
        S = B - agree.k * gm.powmod(agree.g, x, agree.N)#此值应当与g**b一致
        S = gm.powmod(S, (a + u*x), agree.N)
        S = 0 #此处为攻击第二步
        K = hashlib.sha256(str(S)).hexdigest()
        print "K:", K
        #最后一步，发送验证信息HMAC-SHA256(K, salt)，如果得到服务器验证，则会收到确认信息
        hmac = hashlib.sha256(K + str(salt)).hexdigest() + "n"
        s.send(hmac)
        print "send:", hmac
        print "receive:", s.recv(1024)
        message = s.recv(1024)
        print message
        s.close()
    if __name__ == "__main__":
        main()
###  Enjoy
本题依据原理为针对IV=Key的CBC模式选择密文攻击，前提是明文泄露。enjoy.py使用AES、CBC模式对明文加密后发送到服务器端，且将CBC模式的初始化向量IV设置为AES的秘钥，而秘钥正是flag。随意设置一秘钥加密明文发往服务器端，服务器很容易泄露对应明文。因此选择三个分组的密文C||0||C发往服务器获得泄露出的明文p_1
||p_2 ||p_3，因此根据CBC模式的加解密原理有：  
IV⊕D(K,C)=p_1 （1）  
0⊕D(K,C)=p_3 （2）  
其中D为AES解密算法，两式做异或得：IV=p_1⊕p_3。  
解题代码如下：
    #coding: UTF-8
    import socket
    import flag
    from Crypto.Cipher import AES
    def padding(message):
        toPadByte = 16 - len(message) % 16
        paddedMessage = message + chr(toPadByte) * toPadByte
        return paddedMessage
    def encrypt(plain):
        key = flag.flag[5:-1]
        assert len(key) == 16
        iv = key
        plain = padding(plain)
        aes = AES.new(key, AES.MODE_CBC, iv)
        cipher = aes.encrypt(plain)
        cipher = cipher.encode("base_64")
        return cipher
    def runTheClient(cipher):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        host = "registry.asuri.org"
        port = 10003
        # plain = "blablabla_" + "I_enjoy_cryptography" + "_blablabla"
        # cipher = encrypt(plain)message =  s.recv(1024)
        s.connect((host, port))
        # message = s.recv(1024)
        # print message
        s.send(cipher)
        message =  s.recv(1024)
        print message
        s.close()
        return message
    def crack():
        block = "A" * 16
        cipher = block + "x00"*16 + block
        cipher = cipher.encode("base_64") + "n"
        message = runTheClient(cipher)
        if "high ASCII" in message:
            begin = message.find(":")
            plain = message[begin+1:].strip().decode("base_64")
            block1 = plain[:16]
            block3 = plain[32:48]
            key = ""
            for i in range(16):
                key = key + chr(ord(block1[i]) ^ ord(block3[i]))
            print "key", key
    if __name__ == "__main__":
        crack()
###  Rsa
求逆元而已
    from Crypto.Random import random
    import binascii
    import hashlib
    from  binascii import *
    def invmod(a, n):
        t = 0
        new_t = 1
        r = n
        new_r = a
        while new_r != 0:
            q = r // new_r
            (t, new_t) = (new_t, t - q * new_t)
            (r, new_r) = (new_r, r - q * new_r)
        if r > 1:
            raise Exception('unexpected')
        if t  bestScore):
                bestS = s
                bestScore = score
                bestKey = chr(key)
        return [bestS, bestKey, bestScore]
    def getCipherBytesFromFile(file):
        cipherText = ""
        with open(file) as f:
            line = f.readline().strip()
            while(len(line) > 1):
                cipherText += line
                line = f.readline().strip()
        cipherText = cipherText.decode("base_64")
        return cipherText
    def crackKeyWithSize(keySize, cipherText):
        cs = [""] * keySize
        ms = [""] * keySize
        key = ""
        totalScore = 0;
        for i in range(len(cipherText)):
            cs[i % keySize] += cipherText[i]
        for i in range(keySize):
            [ms[i], k, score] = crack(cs[i])
            totalScore += score
            key += k