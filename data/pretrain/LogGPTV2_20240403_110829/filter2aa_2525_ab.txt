### Overview of Vulnerabilities in Large Codebases

#### Introduction
- Approximately 2,000 instances of the software are exposed to the external internet.
- The codebase is extensive and includes technologies such as Spring, WebObjects, and traditional servlets.
- Initially, auditing such a large codebase can be daunting, but with intelligent analysis of sources and sinks, it becomes more manageable.

#### Key Advice for Auditing Complex Software
- **Mapping Attack Surface**: Identify and map out all potential attack surfaces, focusing on sources and sinks. This step is crucial before diving into detailed auditing.
- **Hardcoded Credentials**: Both development and production environments may contain hardcoded credentials, which can provide access to significant parts of the application.

#### Example: SolarWinds Help Desk
- **Product Overview**: SolarWinds offers a help desk product used by large enterprises.
- **Codebase Analysis**:
  - The codebase is vast, including Spring, WebObjects, and traditional servlets.
  - A critical controller was found at `/helpdesk/WEB-INF/lib/com/solarwinds/whd/report/asset/AssetReportController.java`.
  - Surprisingly, endpoints were exposed that allowed running arbitrary Hibernate queries, which directly interact with the database based on Java-defined models.

#### Impact
- An unauthenticated user can execute arbitrary SQL against the internal database.
- This allows attackers to obtain username and password hashes and insert arbitrary data.
- An alternative attack vector could involve replacing the password hash or adding a new user.
- The vulnerability is limited to Hibernate SQL queries.

#### Exploit Writeup
- [Link to Exploit Writeup](https://bit.ly/3va9ApJ)

### Case Study: Hacking Sitecore Experience Platform (CVE-2021-42237)

#### Product Overview
- **Sitecore's Experience Platform**: A comprehensive CMS used by large enterprises, governments, banks, and Fortune 500 companies.
- **Deployment**: Approximately 10,000 instances are exposed externally on the internet.
- **Bug Bounty Programs**: Several bug bounty programs were affected by vulnerabilities discovered in this software.

#### Auditing Challenges
- **Persistence**: During the source code auditing process, it can be tempting to give up due to the complexity and size of the codebase.
- **Best Practice**: Take frequent breaks to avoid fatigue and return to the code when you feel refreshed.

#### Obtaining and Analyzing Source Code
- **Source Code Acquisition**: Initial access to Sitecore's source code was obtained by searching for GitHub repositories where users had posted their web root.
- **Decompilation and Analysis**: Decompiling DLLs and opening the web root and decompiled source code in a code editor was crucial for mapping the attack surface.

#### Mapping the Attack Surface
- **Complexity**: Sitecore has a complex attack surface, with many definitions in `.config` files located in `App_Config`.
- **Exposed Files**: Numerous `aspx` and `ashx` files are exposed in the web root.
- **Authentication Check**: It is essential to differentiate between pre-authentication and post-authentication endpoints by iterating through each file and checking for authentication requirements.

#### Discovering the Vulnerable Endpoint
- **Vulnerable File**: The file `/sitecore/shell/ClientBin/Reporting/Report.ashx` was identified as vulnerable.
- **Source Code Analysis**: The `ProcessRequest` and `ProcessReport` methods in `Report.cs` and `DeserializeParameters` method in `ReportDataSerializer.cs` were analyzed to understand the vulnerability.

#### Crafting the Payload
- **Payload Creation**: Using tools like `ysoserial.exe` to generate a serialized XML object.
- **Final RCE Payload**: A crafted POST request to the vulnerable endpoint.

#### Exploit Writeup
- [Link to Exploit Writeup](https://bit.ly/3vGfUo5)

### Case Study: VMWare Workspace One UEM (AirWatch)

#### Product Overview
- **Workspace One UEM**: Used for mobile device management (MDM) by enterprises.
- **MDM**: Administration of mobile devices, such as smartphones, tablets, and laptops.
- **Acquisition**: VMware acquired AirWatch and renamed it to Workspace One UEM, making it a popular MDM solution among large enterprises.

#### Mapping the Attack Surface
- **Installation Challenges**: Installing the software was almost as challenging as discovering the vulnerability.
- **Virtual Paths**: Folders inside the websites directory are deployed under different virtual paths, such as `/Catalog/` and `/AirWatch/`.
- **ASHX Files**: Some ASHX files were not protected by authentication.

#### Vulnerable Endpoint: BlobHandler.ashx
- **Location**: Found in multiple virtual paths, specifically in `/AirWatch/` and `/Catalog/`.
- **Pre-Authentication Access**: The endpoint was accessible without authentication.
- **Proxy Functionality**: The code proxies a request to an "encrypted" URL, providing full control over the request and response.

#### Encryption Function
- **Encryption Logic**: The `Encrypt` method in `AirWatch.Security.Cryptography.AirWatchDataEncryptor` uses a master key to encrypt strings.
- **Master Key**: The `GetMasterKey` method in `AirWatch.Security.Cryptography.KeyManagement.MasterKeyResolver` retrieves the master key, which is hardcoded.

#### PoC Development
- **Hooking into Encryption Functions**: By hooking into the encryption functions, a CLI application was created to "encrypt" arbitrary strings.
- **SSRF Payload**: This allowed for the creation of SSRF payloads, leading to full-read pre-authentication SSRF.

#### Final Exploit
- **Exploit Command**: `python airshock.py --url http://airwatch --ssrf http://example.com --request`
- **Generated SSRF Payload**: `http://airwatch/Catalog/BlobHandler.ashx?Url=...`

#### Exploit Writeup
- [Link to Exploit Writeup](https://bit.ly/3rOH4YO)

---

For more information, visit [assetnote.io](https://assetnote.io) or follow us on Twitter [@assetnote](https://twitter.com/assetnote).