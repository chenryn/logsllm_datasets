technique to identify the descriptive sentences that are associated to
permissions requests. AutoCog [28] further applied machine learn-
ing technique to automatically correlate the descriptive scripts to
permissions. Inspired by these studies, we expect to automatically
bridge the gap between the textual description and security-related
program semantics.
Program Analysis using Graphs. Prior studies have focused on
using behavior graphs for program analysis. Kolbitsch et al. [22]
utilized dynamic analysis to extract syscall dependency graphs as
signature, so as to discover unknown malicious programs. Fredrik-
son et al. [19] proposed an automated technique to extract near-
optimal speciﬁcations that uniquely identify a malware family. Ya-
maguchi et al. [36] introduced the code property graph, which can
model common vulnerabilities. Feng et al. [18] constructed ker-
nel object graph for robust memory analysis. Zhang et al. [41]
generated static taint graphs to help mitigate component hijacking
vulnerabilities in Android apps. As a comparison, we take a step
further and transform behavior graphs into natural language.
9. CONCLUSION
We propose a novel technique to automatically generate security-
centric app descriptions, based on program analysis. We implement
a prototype, DESCRIBEME, and evaluate our system using Droid-
Bench and real-world Android apps. Experimental results demon-
strate that DESCRIBEME can effectively bridge the gap between
descriptions and permissions.
10. ACKNOWLEDGMENT
We would like to thank anonymous reviewers and our shepherd,
Prof. Lorenzo Cavallaro, for their feedback in ﬁnalizing this paper.
This research was supported in part by National Science Founda-
tion Grant #1054605 and Air Force Research Lab Grant #FA8750-
15-2-0106. Any opinions, ﬁndings, and conclusions made in this
material are those of the authors and do not necessarily reﬂect the
views of the funding agencies.
11. REFERENCES
[1] amazon mechanical turk.
https://www.mturk.com/mturk/welcome.
[2] bangcle. http://www.bangcle.com.
[3] Droidbench-benchmarks.
http://sseblog.ec-spride.de/tools/droidbench/.
[4] ijiami. http://www.ijiami.cn.
[5] Malware Genome Project.
http://www.malgenomeproject.org.
[6] Reference - Android Developers. http://developer.
android.com/reference/packages.html.
[7] simplenlg: Java API for Natural Language Generation.
https://code.google.com/p/simplenlg/.
[8] Soot: a Java Optimization Framework.
http://www.sable.mcgill.ca/soot/.
[9] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL, A.,
KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL, P.
FlowDroid: Precise Context, Flow, Field, Object-sensitive and
Lifecycle-aware Taint Analysis for Android Apps. In Proceedings of
the 35th ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI ’14) (June 2014).
[10] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. PScout:
Analyzing the Android Permission Speciﬁcation. In Proceedings of
the 2012 ACM Conference on Computer and Communications
Security (CCS’12) (October 2012).
[11] BUSE, R. P., AND WEIMER, W. R. Automatically Documenting
Program Changes. In Proceedings of the IEEE/ACM International
Conference on Automated Software Engineering (ASE’10)
(September 2010).
[12] CHEN, K. Z., JOHNSON, N., D’SILVA, V., DAI, S.,
MACNAMARA, K., MAGRINO, T., WU, E. X., RINARD, M., AND
SONG, D. Contextual Policy Enforcement in Android Applications
with Permission Event Graphs. In Proceedings of the 20th Annual
Network and Distributed System Security Symposium (NDSS’13)
(February 2013).
[13] CORDELLA, L. P., FOGGIA, P., SANSONE, C., AND VENTO, M. A
(Sub) Graph Isomorphism Algorithm for Matching Large Graphs.
IEEE Transactions on Pattern Analysis and Machine Intelligence
(2004).
[14] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J.,
MCDANIEL, P., AND SHETH, A. N. TaintDroid: An
Information-Flow Tracking System for Realtime Privacy Monitoring
on Smartphones. In Proceedings of the 9th USENIX Symposium on
Operating Systems Design and Implementation (OSDI’10) (October
2010).
[15] FELT, A. P., HA, E., EGELMAN, S., HANEY, A., CHIN, E., AND
WAGNER, D. Android Permissions: User Attention, Comprehension,
and Behavior. In Proceedings of the Eighth Symposium on Usable
Privacy and Security (SOUPS’12) (July 2012).
[16] FELT, A. P., REEDER, R. W., ALMUHIMEDI, H., AND CONSOLVO,
S. Experimenting at Scale with Google Chrome’s SSL Warning. In
Proceedings of the SIGCHI Conference on Human Factors in
Computing Systems (CHI’14) (April 2014).
[17] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND
CHIN, E. Permission Re-delegation: Attacks and Defenses. In
Proceedings of the 20th USENIX Security Symposium (August 2011).
[18] FENG, Q., PRAKASH, A., YIN, H., AND LIN, Z. MACE:
High-Coverage and Robust Memory Analysis for Commodity
Operating Systems. In Proceedings of Annual Computer Security
Applications Conference (ACSAC’14) (December 2014).
[19] FREDRIKSON, M., JHA, S., CHRISTODORESCU, M., SAILER, R.,
AND YAN, X. Synthesizing Near-Optimal Malware Speciﬁcations
from Suspicious Behaviors. In Proceedings of the 2010 IEEE
Symposium on Security and Privacy (Oakland’10) (May 2010).
[20] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic
Detection of Capability Leaks in Stock Android Smartphones. In
Proceedings of the 19th Network and Distributed System Security
Symposium (NDSS’12) (February 2012).
0	
  1	
  2	
  3	
  4	
  5	
  6	
  7	
  8	
  9	
  10	
  1	
  101	
  Pa#ern	
  Size APP	
  ID Pa#ern	
  Size	
  Distribu0on	
  0	
  0.1	
  0.2	
  0.3	
  0.4	
  0.5	
  0.6	
  0.7	
  0.8	
  0.9	
  1	
  1	
  101	
  Op#mized	
  p APP	
  ID Op#mized	
  p	
  Distribu#on	
  0 200 400 600 800 1000 1200 1400 1600 1800 2000 1 200 Description Size (Byte) Before Graph Compression After Graph Compression [21] HUANG, J., ZHANG, X., TAN, L., WANG, P., AND LIANG, B.
AsDroid: Detecting Stealthy Behaviors in Android Applications by
User Interface and Program Behavior Contradiction. In Proceedings
of the 36th International Conference on Software Engineering
(ICSE’14) (May 2014).
[22] KOLBITSCH, C., COMPARETTI, P. M., KRUEGEL, C., KIRDA, E.,
ZHOU, X., AND WANG, X. Effective and Efﬁcient Malware
Detection at the End Host. In Proceedings of the 18th Conference on
USENIX Security Symposium (August 2009).
[23] LU, K., LI, Z., KEMERLIS, V., WU, Z., LU, L., ZHENG, C.,
QIAN, Z., LEE, W., AND JIANG, G. Checking More and Alerting
Less: Detecting Privacy Leakages via Enhanced Data-ﬂow Analysis
and Peer Voting. In Proceedings of the 22th Annual Network and
Distributed System Security Symposium (NDSS’15) (February 2015).
[24] LU, L., LI, Z., WU, Z., LEE, W., AND JIANG, G. CHEX: Statically
Vetting Android Apps for Component Hijacking Vulnerabilities. In
Proceedings of the 2012 ACM Conference on Computer and
Communications Security (CCS’12) (October 2012).
[25] MORENO, L., APONTE, J., SRIDHARA, G., MARCUS, A.,
POLLOCK, L., AND VIJAY-SHANKER, K. Automatic Generation of
Natural Language Summaries for Java Classes. In Proceedings of the
2013 IEEE 21th International Conference on Program
Comprehension (ICPC’13) (May 2013).
[26] PANDITA, R., XIAO, X., YANG, W., ENCK, W., AND XIE, T.
WHYPER: Towards Automating Risk Assessment of Mobile
Applications. In Proceedings of the 22nd USENIX Conference on
Security (August 2013).
[27] POYNTON, C. Digital video and HD: Algorithms and Interfaces.
Elsevier, 2012.
[28] QU, Z., RASTOGI, V., ZHANG, X., CHEN, Y., ZHU, T., AND
CHEN, Z. AutoCog: Measuring the Description-to-permission
Fidelity in Android Applications. In Proceedings of the 21st
Conference on Computer and Communications Security (CCS)
(November 2014).
[29] RUSSELL, S. J., AND NORVIG, P. Artiﬁcial Intelligence: A Modern
Approach. 2003.
[30] SRIDHARA, G., HILL, E., MUPPANENI, D., POLLOCK, L., AND
VIJAY-SHANKER, K. Towards Automatically Generating Summary
Comments for Java Methods. In Proceedings of the IEEE/ACM
International Conference on Automated Software Engineering
(ASE’10) (September 2010).
[31] SRIDHARA, G., POLLOCK, L., AND VIJAY-SHANKER, K.
Automatically Detecting and Describing High Level Actions Within
Methods. In Proceedings of the 33rd International Conference on
Software Engineering (ICSE’11) (May 2011).
[32] SRIDHARA, G., POLLOCK, L., AND VIJAY-SHANKER, K.
Generating Parameter Comments and Integrating with Method
Summaries. In Proceedings of the 2011 IEEE 19th International
Conference on Program Comprehension (ICPC’11) (June 2011).
[33] TAM, K., KHAN, S. J., FATTORI, A., AND CAVALLARO, L.
CopperDroid: Automatic Reconstruction of Android Malware
Behaviors. In Proceedings of the 22nd Annual Network and
Distributed System Security Symposium (NDSS’15) (February 2015).
[34] WEI, F., ROY, S., OU, X., AND ROBBY. Amandroid: A Precise and
General Inter-Component Data Flow Analysis Framework for
Security Vetting of Android Apps. In Proceedings of the 21th ACM
Conference on Computer and Communications Security (CCS’14)
(November 2014).
[35] XIA, M., GONG, L., LV, Y., QI, Z., AND LIU, X. Effective
Real-time Android Application Auditing. In Proceedings of the 36th
IEEE Symposium on Security and Privacy (Oakland’15) (May 2015).
[36] YAMAGUCHI, F., GOLDE, N., ARP, D., AND RIECK, K. Modeling
and Discovering Vulnerabilities with Code Property Graphs. In
Proceedings of the 35th IEEE Symposium on Security and Privacy
(Oakland’14) (May 2014).
[37] YAN, L.-K., AND YIN, H. DroidScope: Seamlessly Reconstructing
OS and Dalvik Semantic Views for Dynamic Android Malware
Analysis. In Proceedings of the 21st USENIX Security Symposium
(August 2012).
[38] YAN, X., AND HAN, J. gspan: Graph-based Substructure Pattern
Mining. In Proceedings of IEEE International Conference on Data
Mining(ICDM’03) (December 2002).
[39] YANG, Z., YANG, M., ZHANG, Y., GU, G., NING, P., AND WANG,
X. S. AppIntent: Analyzing Sensitive Data Transmission in Android
for Privacy Leakage Detection. In Proceedings of the 20th ACM
Conference on Computer and Communications Security (CCS’13)
(November 2013).
[40] ZHANG, M., DUAN, Y., YIN, H., AND ZHAO, Z. Semantics-Aware
Android Malware Classiﬁcation Using Weighted Contextual API
Dependency Graphs. In Proceedings of the 21th ACM Conference on
Computer and Communications Security (CCS’14) (November
2014).
[41] ZHANG, M., AND YIN, H. AppSealer: Automatic Generation of
Vulnerability-Speciﬁc Patches for Preventing Component Hijacking
Attacks in Android Applications. In Proceedings of the 21th Annual
Network and Distributed System Security Symposium (NDSS’14)
(February 2014).
[42] ZHANG, Y., LUO, X., AND YIN, H. DexHunter: Toward Extracting
Hidden Code from Packed Android Applications. In Proceedings of
the 20th European Symposium on Research in Computer Security
(ESORICS’15) (September 2015).
[43] ZHOU, Y., AND JIANG, X. Dissecting Android Malware:
Characterization and Evolution. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy (Oakland’12) (May 2012).
[44] ZHOU, Y., AND JIANG, X. Detecting Passive Content Leaks and
Pollution in Android Applications. In Proceedings of the 20th
Network and Distributed System Security Symposium (NDSS’13)
(February 2013).
[45] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, You, Get
Off of My Market: Detecting Malicious Apps in Ofﬁcial and
Alternative Android Markets. In Proceedings of 19th Annual
Network and Distributed System Security Symposium (NDSS’12)
(February 2012).
[46] ZHOU, Y., ZHANG, X., JIANG, X., AND FREEH, V. W. Taming
Information-Stealing Smartphone Applications (on Android). In
Proceedings of the 4th International Conference on Trust and
Trustworthy Computing (TRUST’11) (June 2011).
APPENDIX
A. SECURITY-CENTRIC DESCRIPTIONS OF
THE MOTIVATING EXAMPLE
Once a GUI component is clicked, the app reads data from
network and sends data to network, depending on if the user
selects Button “Conﬁrm”.
is clicked,
Once a GUI component
the app retrieves
you phone number, and econdes the data into format
“100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/
company=%s/”, and sends data to network, depending on if
the user selects the Button “Conﬁrm”.
Once a GUI component is clicked, the app retrieves the
service provider name, and econdes the data into format
“100/app_id=an1005/ani=%s/dest=%s/phone_number=%s/
company=%s/”, and sends data to network, depending on if
the user selects the Button “Conﬁrm”.
The app retrieves text from user input and displays text to
the user.
Once a GUI component is clicked, the app retrieves text
from user input and sends data to network, depending on if the
user selects Button “Conﬁrm”.
The app opens a web page.
The app reads from ﬁle “address.txt”.
The app reads from ﬁle “contact.txt”.
The app reads from ﬁle “message.txt”.