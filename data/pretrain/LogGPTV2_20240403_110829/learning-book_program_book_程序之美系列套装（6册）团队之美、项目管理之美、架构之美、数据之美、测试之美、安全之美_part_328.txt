## Page 1877
这些例子和这一模糊器产生的许多输出对熟悉电子表格的人们来说
毫无道理，但那正是模糊测试的力量和魅力的一部分。它可能会在
内嵌10层的复杂函数中调用紧接着产生的一个导致崩溃的漂亮紧凑
的三字符表达式。它也能发现因无意键入或粘贴字符造成出乎用户
预料的程序崩溃的缺陷，从而使并发可靠的软件变得更加容易。这
种测试也可以处理各种不同电子表格的函数实现中的差别。这些差
别有的会导致把意外的或空的参数传给下面的分析器。
随机模糊
与常规和自定义模糊不同，随机模糊用没有结构的不规则的输入。
我在测试Gmumeric时发现的一个缺陷是一个文本文件中的超长输入
行所引发的崩溃。虽然它乍听起来是一个缓冲器溢出问题，实际却
是调用一个消息框造成的。这个消息框是在Gmumeric截断数据以适
应当前的工作表时发出警告用的。问题是，程序在用没有GUI的命令
行转换文件时试图显示错误消息。
虽然我在发现缺陷时用的是结构化的输入，崩溃可以同样容易地用
一个完全由随机数据组成的长行来引发。在你进行模糊测试的某个
阶段，一定要加入这样的随机测试，以扩大测试覆盖，有助于发现
你搜集的样本和你的自定义模糊器可能引入的偏见。许多用户会试
图用你的程序打开你意想不到的文件，所以这种测试有助于确保适
当的错误处理。
这些预想不到的文件的导入通常有两个途径：在文件选择时误点击
和试图打开误认为支持但实际不支持的文件。如果程序在这些情况
下运行失败，用户很可能会困惑，不知问题的实际原因，从而认为
你的程序根本不可靠。这种测试之美在于它有助于减少令人困惑的
问题，它接受任何输入，不要求任何特定的文件。另外，它基本上
没有使其他模糊技术不那么有效的那种可预测性。
局限
当你以为已经很熟悉一个程序或文件格式时，很容易忽略细节和掺
入偏见。例如，你的自定义模糊器会总是用一个右括号恰当地结束
函数调用，以致不可能发现只有失配括号对才能发现的缺陷。如前
所述，MicrosoftO伍ice团队尽管在模糊测试Ofice2007上花了大量时
间，还是错过了安全漏洞：
1876
---
## Page 1878
且不提更早的Ofice2003，Ofice2007的测试没能发现缺陷的一个好
的例子是在Excel的文件格式中。它在2007年7月的安全公告MS07-
036中被披露。在Ofice中存在的这个漏洞是“在Excel处理错误格式的
Excel文件的方法中”。这是Ofice2007主要应用中文件格式的第一个
缺陷。[3]
避免这一问题的方法之一是不断修改你的模糊器，以产生更多的测
试用例并去除可能影响输出的偏差。要知道从何着眼，你可用代码
覆盖工具来帮助找出遗漏的测试分支。有了这种新的知识，你可以
增加有关的样本或修改模糊程序以运行被忽略的代码。我在用我的
自定义的公式模糊器时，我作过一些增加和修改以纠正原先忽略之
处。尽管这样，它不再激发许多缺陷，主要只能用来检测可能进入
代码的回归。当你把模糊测试用了一段时间后，发现缺陷会变成例
外而不是常事。这是一个好迹象，表明你的代码正变得更加稳定和
安全。
虽然模糊测试擅长发现诸如崩溃和挂起的明显问题，它对判断正确
性的作用很小。你的程序也许不崩溃或挂起，但它仍然可能不恰当
地处理错误，这很难或不可能用上述那些技术来发现。
[1] http://caca.zoy.org/wiki/zzuf
[2] http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz/.
[3]http://www.computerworld.com/action/article.do?
command=viewArticleBasic&articleld=9038198.
将来的考虑
那么，下一步该做什么？如上述Excel的漏洞所表明的，很难说出什
么时候你已经把你程序的某些部分模糊得足够了。然而，一旦你的
回报在逐渐消失，你应该开始去模糊程序的其他部分，例如用户接
口、脚本语言和宏语言，以确保它们和其他功能一样的可靠稳定。
同样，新功能也会给扩展现有模糊工具和开发新工具创造机会。通
过监视收到的缺陷报告，你可以注意到并纠正使你的模糊测试不那
么有效的漏洞。事实上，这正是我如何在我的公式模糊器中发现一
个遗漏函数的：一个用户送来的缺陷报告中包含一个我的测试中没
有的函数。把这函数加入后，我的自定义模糊器引发了我之前忽略
的一个崩溃。
1877
---
## Page 1879
除了监视你自己的项目外，要留意对你的测试有帮助的新工具。我
对多数的模糊用的是zzuif，但它有一些限制，束缚了我的测试。比
如，它不能增加或删除字节或截断输入，因而难以真正模拟某些形
式的损环。结合新的工具和技术，能帮助你克服这些不足，并很可
能进一步找到缺陷。
模糊测试是使办公软件更可靠、有用的极佳技术。它能对开发和测
试人员面临的包括互操作性、安全性和稳定性在内的许多复杂问题
提供有创意且简洁的解决方法。它也与办公软件相像，两者都貌似
简单，实际隐藏着复杂，以强大的功能允许无数变化。把模糊加入
你现有的测试实践，你可保证用户收到一个可靠的产品，它服从一
种不同的美的标准。此标准的基础是用户对办公软件所期望的简洁
和直观。
第6章缺陷管理和测试用例的有效性
Emily Chen
Brian Nitz
我坚信宇宙的原则将是美丽而简单的。
一阿尔伯特·爱因斯坦
为什么质量保证（QualityAssurance,QA）工程师需要在意测试和缺
陷（bug）管理系统如何“美丽"？尽管没有人清楚地知道到底什么是
美，但是美、简单和真理之间似乎确实存在着一定的关系。当这种
关系被应用到数学和物理科学中时，它通常称为奥卡姆剃刀
（Occam'sRazor）。它假定对自然现象的美好而简单的解释比丑陋
而令人费解的解释更接近于真相。艾萨克牛顿爵士曾这样解释道：
“如果某一原因既真实又足以解释自然事物的特性，那么我们无须接
受比这更多的原因。”虽然我们在结构化程序设计（structured
programming）、面向对象设计（object-oriented design,OOD）和设计
模式（designpatterm）中都可以找到这个原则的例子，但是在缺陷管
理或质量保证的测试设计中，美和简单往往未被列入考虑范围。本
章将讨论如何管理缺陷和衡量测试用例的有效性。我们希望你会发
现这个方法会比更常见的偶然质量保证方法（haphazardQA
approach，这种方法往往偏离科学，且过分依靠运气）更加美好、简
单且真实。
1878
---
## Page 1880
缺陷管理
以下各节将介绍缺陷的管理。
第一个被发现的缺陷
史密森美国国家历史博物馆（SmithsonianNationalMuseumof
AmericanHistory）展出了一本工程笔记的一部分。笔记本中一段简
短的手写笔记，揭示了哈佛大学的MarkⅡI机电式计算机一些鲜为人
知的操作细节。这本笔记的第92页，如图6-1所示，显示了1947年9
月9日的典型的工程笔记：
1525StartedMult+AdderTest.（1525开始乘法器+加法器测试）
1545Relay#70PanelF（1545继电器#70面板F）
(moth)inrelay.（继电器中有（蛾子））
Firstactualcaseofbugbeingfound.（第一个实际被发现的bug（“虫
子”，即缺陷））
Z.6
9/9
0430
anatat
-anon
1.700
co0/
1o-C
9.n8y6995
d
2.130g76m
cb
Start-j
I525
SSI
Relau
(ao）neay
.
图6-1第一个被发现的缺陷
1879
---
## Page 1881
史密斯笔记中的这一页所提到"bug"这个词用在工程中至少可以追溯
到托马斯·爱迪生的时代。然而，海军少将格雷斯霍波（COBOL语言
的发明人，MarkⅡI的一名计算机工程师）经常将这只子作为一个
很好的故事来讲述。这只“虫子”成为计算机历史的一部分。飞对
于现代的微处理器来说已经太大无法卡在内部了，但软件的缺陷并
没有消失。这份特殊的缺陷报告并没有说明症状，但它却包含两项
重要的细节。不幸的是许多当代缺陷报告却缺乏这些：
该缺陷与一个测试过程紧密关联（发现这个缺陷的大概测试过
程）。
当根本原因被发现后，一份详细的附件辅助解释了该原因。一段泛
黄的玻璃纸胶带仍将两英寸大小的子户体附在该缺陷报告的边
缘！
为什么将根本原因附加到缺陷报告中是十分重要的呢？如果我发现
我的系统中的一个缺陷并修复了它，为什么我不能直接关闭这个缺
陷？谁在乎根本原因是什么？随着越来越多的组织采用开放源代码
（open source）的软件，这个问题的答案愈来愈明显。如果在某个
具体的分发（distribution）中发现缺陷并修复了，该缺陷补丁应向上
游（upstream）提交，这样从补丁开始的下游（downstream）的其他
发行版（distro）都可获得该修复。但由于稳定性要求，其他的发行
版可能无法脱离一个基于该补丁提交之前的分支（branch）产品。此
时就应该到缺陷报告中去寻找根本原因、补丁以及其他对想要把这
个修复回迁（backport）到另一个分支上的人可能有用的信息。遗憾
的是，开源缺陷跟踪系统很少能提供这些细节。
并不仅仅“这只是一个缺陷”
哈佛蛾子的一个不幸遗产，是使一个原本代表有点麻烦却“基本无害
的"小生灵的单词（即bug）逐渐植根于计算机科学的语言中。这个
可爱的小词使得我们低估了软件缺陷可能造成的问题的规模和严重
性，并几乎可以肯定，导致了软件公司在质量保证和缺陷管理方面
没有足够的投资。
例如，下面的这些事物有什么共同点？
两个用来表示一个四位的数字值的ASCII字符，以及用于修复此问
题的儿千亿美元。
1880
---
## Page 1882
撞击火星表面后去失的太空探测器。
一些病人由于放射治疗机的用户界面缓存问题导致他们接受了将近
100倍于处方剂量的辐射而丧生。
基于一个错误的假设：抵押贷款违约的概率之间没有统计学关系，
抵押贷款违约率被作为独立变量相加。这个错误高估了某些金融工
具的稳定性，最终引发了一次全球性的经济危机。
上述的每一个问题都可以归咎于一个缺陷。随着我们生活的更多方
面越来越依赖于软件的安全和正常运行，我们必须认真地对待缺
陷....甚至我们必须为软件缺陷另取一个名字。怪兽？恶魔？在本
节的剩余部分中，我们将尝试使用“缺陷（defect）"这个词来代
替"bug"，以帮助提醒我们：我们在处理的并不总是一个可爱的小生