while 1:
    r = remote('120.79.12.160', '22633')
    # context(log_level='debug')
    rec = r.recvline().decode().split(' ')
    res = rec[-1][:-1]
    print(res)
    for i in product(ALPHABET, repeat=5):
        suffix = ''.join(i)
        guess = 'TQLCTF' + suffix
        if sha256(guess.encode()).hexdigest()[0:5] == res:
            log.info(f"Find XXXX: {suffix}")
            break
    r.sendline(suffix.encode())
    r.recvuntil('Let\'s start!\n')
    data = r.recvline().decode()[:-1].split(' ')
    n = int(data[2][:-1])
    m = int(data[5])
    print(m)
    if m > 300:
        r.sendline('G 233')
        res = r.recvline().decode()
        if 'wrong' not in res:
Ranma½
使⽤vim打开⽂件看⻅
维吉尼亚
在线爆破下密码
the Ohio State University
⾸先找到原始⽂件
jpg⽂件属性备注⾥⾯发现密码，steghide解密
            print(res)
            r.interactive()
diff⽐较原始⽂件发现第⼆个密码
⽤密码decode
diff铺⾯⽂件，发现第2305⾏开始不同，此时的note第三位（time）为111533，也就是01:51:533这个时间点，进
osu在edit模式打开这个铺⾯并跳转到这个时间，以拍⼦为单位，把有note的看做1，没有note的看做0，解码即可
解出最后⼀部分5HoWtIme}
wordle
通过easy模式猜词，获得词语id随机序列，拿624个id有~30%的成功率预测后续id。打通insane模式后得flag。
因为远端io太慢，穷举时间很⻓，猜词逐字⺟匹配是⼀个可⽤的策略。
from pwn import *
#context.log_level='debug'
#p=process(["python","main.py"])
p=remote('47.106.102.129',31624)
sl=lambda a:p.sendline(a.encode())
sla=lambda a,b:p.sendlineafter(a.encode(),b.encode())
rcu=lambda a:p.recvuntil(a.encode(),True)
rc=lambda a:p.recv(a)
rcl=lambda:p.recvline().strip()
sla('Insane','0')
with open('valid_words.txt', 'r') as f:
    valid_words = [x.strip() for x in f.readlines()]
def findpre(pre):
    for id,i in enumerate(valid_words):
        if i.startswith(pre):
            return id
    return -1
def guessit(wd):
        sl(wd)
        res=rcl()
        if res.find(b'Correct')!=-1:
            return [1,1,1,1,1,1]
        res=res.split(b'Wrong!   ')[1]
        #res[3] res[15]
        return [res[i]==50 for i in range(3,3+5*12,12)]+[0]
def rnd():
    #rcu("id")
    #print(rcl())
    rcu('#')
    id=rc(5)
    rcl()
    #print(id)
    id=int(id,16)
    pref=''
    calcid=lambda i:(id^i)*len(valid_words)+i
    for i in range(5):
        #print("pre ",pref)
        for c in 'abcdefghijklmnopqrstuvwxyz':
            gu=pref+c
            gugu=findpre(gu)
            if gugu==-1:
                continue
            res=guessit(valid_words[gugu])
            if res[5]==1:
                # succ
                print("done",valid_words[gugu])
                return calcid(gugu)
            if res[i]==1:
                #partial succ
                pref=gu
                break
    #for i,elem in enumerate(valid_words):
        #sl(elem)
        #res=rcl()
        # leak=(id//K)^(id%K)
        # know id%K=a
        # know id//K=b
        # id=b*K+a
        #if res.find(b'Correct')!=-1:
        #    print("fuck ",i,valid_words[i])
        #    return (id^i)*len(valid_words)+i
guess=[]
for i in range(512):
    guess.append(rnd())
    print(i)
sla('Insane','0')
for i in range(624-512):
    guess.append(rnd())
    print(i)
#print(guess)
#for i in range(512):
#    sl(valid_words[0])
from randcrack import RandCrack
rck = RandCrack()
for i in guess:
    rck.submit(i)
fuck=[rck.predict_randrange(len(valid_words) * (2 ** 20)) for _ in range(512+512)]
[::-1]
    #print("id ",id)
#answer = valid_words[id % len(valid_words)]
id = (fuck[-1] // len(valid_words)) ^ (fuck[-1] % len(valid_words))
idp=hex(id)[2:].zfill(5)
rcu('#')
id=rc(5).decode()
rcl()
print(idp,id)
if idp!=id:
    print("failed")
    assert(0)
context.log_level='debug'
for i in range(512-(624-512)):
    x=fuck.pop()
    assert(guessit(valid_words[x%len(valid_words)])[5]==1)
    if i!=512-(624-512)-1:
        rcu('#')
        rcl()
    print("ok")
Web
Simple PHP
利⽤对字符串取反绕过punctuation的正则
Crypto
Signature
本来以为是GGH signature的paperhttps://cims.nyu.edu/~regev/papers/gghattack.pdf，把问题转成solve 
HPP，但复现的代码只能在维度低的时候恢复sk的⼀⾏vector
后⾯想到了祥云杯的⼀道题，那题直接LLL出来就是私钥的线性组合，虽然这题上来我就试了直接LLL，但当时并没
有觉得可⾏，毕竟和sk的form都不⼀样，赛前快结束的时候随便试试，因为pk维度⽐较⾼，换⽤BKZ，
block_size=24已经⽐较⼤了，直接⽤结果当sk。。竟然能任意签名了。
sla('Insane','3')
#context.log_level='debug'
for i in range(512):
    rcu('#')
    rcl()
    x=fuck.pop()
    assert(guessit(valid_words[x%len(valid_words)])[5]==1)
    print("ok2")
p.interactive()
user=/*
website=*/eval(__PUNC__));/*
punctuation=~"%8C%86%8C%8B%9A%92%D7%D8%9C%9E%8B%DF%D0%99%93%9E%98%D2%C6%99%CB%C9%CA%99%
9B%9C%D2%9C%9E%9B%CA%D2%CB%9C%C8%9A%D2%9E%9B%CD%9C%D2%9E%C9%C9%CC%C7%9E%CE%9A%CF%C7%CA%
9E%D8%D6%C4"
from sage.all import *
from scheme import *
import itertools
from pwn import remote
from pwnlib.tubes.tube import *
from tqdm import tqdm
from hashlib import sha256
pk = load('pk.sobj')
pklll = pk.BKZ(block_size=24)
sk = pklll
OTP
r = remote('120.78.192.215', '24578')
# context(log_level='debug')
ALPHABET = string.ascii_letters + string.digits
rec = r.recvline().decode()
suffix = rec[rec.find('****')+4:rec.find(')')]
digest = rec[rec.find('==')+3:-1]
print(f"suffix: {suffix} \ndigest: {digest}")
for i in itertools.product(ALPHABET, repeat=4):
    prefix = ''.join(i)
    guess = prefix + suffix
    if sha256(guess.encode()).hexdigest() == digest:
        # log.info(f"Find XXXX: {prefix}")
        print((f"Find XXXX: {prefix}"))
        break
r.sendline(prefix.encode())
r.recvuntil('to authenticate:\n')
s = r.recvline().decode()[:-1]
print(s)
sig = hash_and_sign(sk, s)
print(sig)
sig = [str(x) for x in sig]
sig_str = ' '.join(sig)
r.sendline(sig_str)
r.interactive()
from pwn import *
import os
from itertools import permutations
r = remote("112.74.179.118",20639)
def proof_of_work():
    rev = r.recvuntil("sha256(XXXX+")
    suffix = r.recv(16).decode()
    rev = r.recvuntil(" == ")
    tar = r.recv(64).decode()
    def f(x):
        hashresult = hashlib.sha256(x.encode()+suffix.encode()).hexdigest()
        return hashresult == tar
    prefix = util.iters.mbruteforce(
        f, string.digits + string.ascii_letters, 4, 'upto')
    r.recvuntil("Give me XXXX:")
    r.sendline(prefix)
proof_of_work()
r.recvuntil(b'flag: ')
enc = r.recvline().decode().strip()
print(enc)#5c591ec2cb11064e8b8aae294c20e9391e0298b76d8159a6b31d6ef766bb2e62b11714bae58f
4a82ef9e13db4628912a186306e5
print(len(enc)//2-8) #44
x = [17, 2, 0, 37, 42, 36, 8, 29, 43, 22, -2, 41, 24, 4, 5, 39, 23, 16, 3, 30, 12, 1, 
13, 26, 34, 7, 6, 38, 32, 28, 35, 20, 11, 40, 27, 9, 33, 18, -2, 10, 19, 14, 21, 15, 
25, -2, 31, -2]
enc = 
bytes.fromhex('5c591ec2cb11064e8b8aae294c20e9391e0298b76d8159a6b31d6ef766bb2e62b11714ba
e58f4a82ef9e13db4628912a186306e5')
'''
x = [-1]*48
while True:
    for i in range(48):
        payload = enc[:(2*i)]+os.urandom(1).hex()+enc[(2*i+2):]
        r.recvuntil(b'> ')
        r.sendline(b'1')
        r.recvuntil(b'> ')
        r.sendline(payload)
        response = r.recvline()
        if response[:54] == b'The original message contains invalid characters: pos ':
            e = int(response[54:])
            if x[i] == -1:
                x[i] = e
            elif x[i] != e:
                x[i] = -2
    print(x)
    if sorted(x)==[-2]*4+list(range(44)):
        break
'''
while True:
    r.recvuntil(b'> ')
    r.sendline(b'0')
    r.recvuntil(b'> ')
    r.sendline(b'35'*24)
    r.recvuntil(b'encrypted message: ')
    enc0 = r.recvline().strip().decode()
    print(enc0)
    x0 = [-1]*52
    while True:
        for i in range(52):
            payload = enc0[:(2*i)]+os.urandom(1).hex()+enc0[(2*i+2):]
            r.recvuntil(b'> ')
            r.sendline(b'1')
            r.recvuntil(b'> ')
            r.sendline(payload)
            response = r.recvline()
            if response[:54] == b'The original message contains invalid characters: pos 
':
                e = int(response[54:])
                if x0[i] == -1:
                    x0[i] = e
                elif x0[i] != e:
                    x0[i] = -2
        print(x0)
        if sorted(x0)==[-2]*4+list(range(48)):
            break
    enc0 = list(bytes.fromhex(enc0))
    for i in range(44):
        enc0[x0.index(i)] = enc[x.index(i)]
    w = []
    for i in range(48):
        if x[i]==-2:
            w.append(enc[i])
    w0 = []
    for i in range(52):
        if x0[i]==-2:
            w0.append(i)
    print(w)
    print(w0)
    for i in permutations(w):
        enc0[w0[0]],enc0[w0[1]],enc0[w0[2]],enc0[w0[3]] = i
        r.recvuntil(b'> ')
        r.sendline(b'1')
        r.recvuntil(b'> ')
        r.sendline(bytes(enc0).hex())
        data = r.recvline()
        print(data)
        if b'invalid' not in data:
            input()