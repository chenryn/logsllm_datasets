# Based on the crib:
replacements = [
    {'f': 'H', 'r': 'S', 'o': 'V', 'm': 'N'}, 
    {'i': 'P', 's': 'B', 't': 'L', 'e': 'M', 'r': 'S'}, 
    {'p': 'X', 'h': 'A', 'i': 'T', 'l': 'W'}, 
    {'i': 'P', 'p': 'E', 's': 'B', 't': 'X', 'o': 'T'}, 
    {'a': 'C', 'l': 'R', 'g': 'B'}, 
    {'e': 'M', 'n': 'U', 't': 'L', 's': 'A'}, 
    {'t': 'L', 'o': 'C', 'p': 'D'}, 
    {}
]
# Mapping: overall_replacements[plaintext_char][ciphertext_char] = [box indices which encrypt plaintext_char as ciphertext_char]
overall_replacements = {c: defaultdict(list) for c in string.ascii_lowercase}
for i, replacement_dict in enumerate(replacements):
    for from_char, to_char in replacement_dict.items():
        overall_replacements[from_char][to_char].append(i)
print("Overall Replacements: ")
pprint(overall_replacements)
print(f"\nInferring Placements:")
# Mapping: known_placements[character] = row which this character resides in (0-4)
known_placements = {}
prev_placement_len = -1
while prev_placement_len != len(known_placements):
    prev_placement_len = len(known_placements)
    for plaintext_char in string.ascii_lowercase:
        # Mapping: filtered_pairs[ciphertext_char] = {pairs of row_num (from, to)}
        filtered_pairs = {}
        for ciphertext_char, box_indices in overall_replacements[plaintext_char].items():
            ciphertext_char = ciphertext_char.lower()
            # For each box, a set of row_num pairs (from, to) which don't contradict the known_placements
            per_box_pairs = []
            for box_index in box_indices:
                # Set of row_num pairs (from, to) which don't contradict the known_placements
                candidate_pairs = set()
                for pair in adjacent_pairs(boxes[box_index]):
                    row_pair = RowPair(*pair)
                    if row_pair.from_row_num != known_placements.get(plaintext_char, row_pair.from_row_num):
                        continue
                    if row_pair.to_row_num != known_placements.get(ciphertext_char, row_pair.to_row_num):
                        continue
                    candidate_pairs.add(row_pair)
                per_box_pairs.append(candidate_pairs)
            # We filter the list of pairs: If the same plaintext letter gets encrypted to the same ciphertext letter
            #  across multiple boxes, then the (from, to) pair that encrypts them must be common to all these boxes
            filtered_pairs[ciphertext_char] = set.intersection(*per_box_pairs)
        for ciphertext_char, pair_set in filtered_pairs.items():
            if len(pair_set) == 1:
                row_pair = pair_set.pop()
                if plaintext_char not in known_placements or ciphertext_char not in known_placements:
                    print(f"{plaintext_char} -> {row_pair.from_row_num}, {ciphertext_char} -> {row_pair.to_row_num}")
                known_placements[plaintext_char] = row_pair.from_row_num
                known_placements[ciphertext_char.lower()] = row_pair.to_row_num
print(f"Found placements for {len(known_placements)} characters.\n")
key = [[] for _ in range(5)]
for c, row_num in known_placements.items():
    key[row_num].append(c.upper())
print("Known master box:")
for row in key:
    print("".join(sorted(row)))
print("\nMissing characters:")
for c in set(string.ascii_lowercase) - set("j"):
    if c not in known_placements:
        print(c.upper(), end="")
print("")
```
Output:
```console
┌──(user@kali)-[/media/sf_CTFs/checkpoint/cq_cq_cq]
└─$ python3 solve.py
Overall Replacements:
{'a': defaultdict(, {'C': [4]}),
 'b': defaultdict(, {}),
 'c': defaultdict(, {}),
 'd': defaultdict(, {}),
 'e': defaultdict(, {'M': [1, 5]}),
 'f': defaultdict(, {'H': [0]}),
 'g': defaultdict(, {'B': [4]}),
 'h': defaultdict(, {'A': [2]}),
 'i': defaultdict(, {'P': [1, 3], 'T': [2]}),
 'j': defaultdict(, {}),
 'k': defaultdict(, {}),
 'l': defaultdict(, {'W': [2], 'R': [4]}),
 'm': defaultdict(, {'N': [0]}),
 'n': defaultdict(, {'U': [5]}),
 'o': defaultdict(, {'V': [0], 'T': [3], 'C': [6]}),
 'p': defaultdict(, {'X': [2], 'E': [3], 'D': [6]}),
 'q': defaultdict(, {}),
 'r': defaultdict(, {'S': [0, 1]}),
 's': defaultdict(, {'B': [1, 3], 'A': [5]}),
 't': defaultdict(, {'L': [1, 5, 6], 'X': [3]}),
 'u': defaultdict(, {}),
 'v': defaultdict(, {}),
 'w': defaultdict(, {}),
 'x': defaultdict(, {}),
 'y': defaultdict(, {}),
 'z': defaultdict(, {})}
Inferring Placements:
t -> 0, l -> 2
i -> 2, t -> 0
l -> 2, w -> 0
l -> 2, r -> 3
o -> 3, t -> 0
r -> 3, s -> 4
s -> 4, b -> 1
s -> 4, a -> 0
t -> 0, x -> 4
a -> 0, c -> 1
g -> 0, b -> 1
h -> 2, a -> 0
i -> 2, p -> 3
o -> 3, v -> 4
p -> 3, e -> 0
p -> 3, d -> 1
e -> 0, m -> 2
f -> 1, h -> 2
m -> 2, n -> 3
n -> 3, u -> 4
Found placements for 21 characters.
Known master box:
AEGTW
BCDF
HILM
NOPR
SUVX
Missing characters:
KQYZ
```
With the help of the script, we almost found our master box. The master box is usually composed of a keyword at the beginning, followed by the rest of the alphabet according to natural order. We need to try dividing the missing characters into those that belong to the keyword and those that don't. This requires some guessing, but it seems safe to assume that we can place `K` and `Q` as following to reach 5 characters in two more rows:
```
AEGTW
BCDF
HIKLM
NOPQR
SUVX
```
Now we have `Y` and `Z` left - one of them belongs to the bottom right corner and one to the keyword. The keyword is some combination of `AEGTW` and `Y/Z`, since we can tell that the remaining alphabet starts from `B`. Playing around with different combinations, it looks like the keyword is `GATEWAY`, which means that the box is:
```
GATEW
YBCDF
HIKLM
NOPQR
SUVXZ
```
Now we can use any Phillips solver, such as [this one](https://www.dcode.fr/phillips-cipher):
```
FROMMISTERPHILLIPSTOALLAGENTSSTOPTHEFLAGISCSAOPENCURLYBRACKETSCLASSICUNDERSCORECRYPTOUNDERSCORESTRIKESUNDERSCOREBACKCLOSECURLYBRACKETSSTOP
```
Adding spaces, we get:
```
FROM MISTER PHILLIPS TO ALL AGENTS STOP THE FLAG IS CSA OPEN CURLY BRACKETS CLASSIC UNDERSCORE CRYPTO UNDERSCORE STRIKES UNDERSCORE BACK CLOSE CURLY BRACKETS STOP
```
And the flag: `CSA{CLASSIC_CRYPTO_STRIKES_BACK}`.