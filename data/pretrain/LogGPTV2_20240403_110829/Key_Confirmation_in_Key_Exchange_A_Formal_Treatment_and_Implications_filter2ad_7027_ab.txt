If id ∈ C then role = client and if id ∈ S then role =
server.
• id ∈ I is the identity of the party that “owns” this session.
• pid is a partner identiﬁer which is assigned a value in
I ∪ {⊥,∗} once, where initially pid = ⊥. We use ∗ to
indicate an unspeciﬁed identity for the case when that
party does not have long term keys, and use pid = i for
some i ∈ I, otherwise3.
• sid ∈ {0, 1}∗ ∪ {⊥} is a session identiﬁer, initialized
to ⊥ and then set upon changing to accepting status
status = accept. Once it is set to some string, sid cannot
be changed anymore. We assume throughout the paper
that session identiﬁers are public in the sense that they
are determined by the incoming and outgoing messages
for that sessions.
• kcid ∈ {0, 1}∗ ∪ {⊥} is a so-called key-conﬁrmation
identiﬁer, initialized to ⊥ and usually set at some point
during the execution.
• key ∈ {0, 1}∗ ∪ {⊥} is the key locally derived in this
session, also called session key. Here, key may consist of
multiple elements, e.g., one key for encryption and one
key for authentication. Initially the session key is set to
⊥. We assume that a key is set upon changing to the
accepting status status = accept.
3We work therefore in the post-speciﬁed peer setting where, as is the case
of TLS, the owner of a potentially partnered session is determined on the ﬂy.
The pre-speciﬁed peer setting can be easily obtained by demanding that pid
is set as soon as a session starts its execution.
454454
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
returns ⊥ to the adversary if (cid:2).status (cid:7)= accept; otherwise it
returns (cid:2).key if b = 0, or a fresh random key chosen from some
distribution according to the protocol speciﬁcation if b = 1.
The task of the adversary is to determine b. We assume for
simplicity that the adversary can query the Test oracle only
once. This can be extended to the case of multiple queries and
security follows from a hybrid argument for public session
identiﬁers (with some careful consistency stipulations).
PARTNERING. A crucial ingredient for capturing security of
key exchange protocols is the notion of partnering. Roughly
speaking, partnering formalizes which sessions of the protocol
intend to communicate with each other. This notion is neces-
sary to identify trivial attacks in which the adversary reveals
a session key of the intended partner of a tested session. We
follow the paradigm of [3] and deﬁne partnering via session
identiﬁers sid, set by each party in the course of the protocol,
when the status changes to accept.
We now say that two distinct sessions (oracles) in an execu-
tion are partnered if their local session identiﬁer variables have
the same value (different from ⊥). Formally, we use a predi-
cate Partners which has as input two sessions labels (cid:2) and (cid:2)(cid:3)
and evaluates to true if and only if (cid:2).sid = (cid:2)(cid:3).sid (cid:7)= ⊥∧(cid:2) (cid:7)= (cid:2)(cid:3).
Def inition 2.1 (Partnered sessions): Two sessions with
labels (cid:2), (cid:2)(cid:3) are partnered in an execution if Partners((cid:2), (cid:2)(cid:3)) =
true.
Note that, since session identiﬁers can be set only once, two
sessions which are partnered in an execution always remain
partnered.
FRESHNESS. We need to exclude trivial attacks in which the
adversary tests the key of a session and reveals the key of a
partnered session. Since we will later demand that identical
session identiﬁers imply identical keys, the partnered session
will hold the same key and the adversary could easily dis-
tinguish the tested key from random. To identify the sessions
where testing is still admissible we use the freshness predicate
Fresh((cid:2)). This predicate is evaluated at the end of the execution
and yields true if and only if all of the following conditions
hold:
1) (cid:2).status = accept, i.e., the test session has accepted at
some point.
test session during the execution.
2) The adversary has not issued a query RevealKey((cid:2)) to the
3) (cid:2).id /∈ Corr, i.e., the owner of the test session has not
been corrupted in the execution.
4) For any (cid:2)(cid:3) such that Partners((cid:2), (cid:2)(cid:3)) = true the adversary
has not issued a query RevealKey((cid:2)(cid:3)); no partner of the
tested session has been asked to reveal the session key.
5) (cid:2).pid /∈ Corr and (cid:2).pid (cid:7)= ∗, i.e., the session has not
been partnered with a party (potentially) controlled by
the adversary.
Def inition 2.2 (Freshness): A session with label (cid:2) is fresh
Formally, the program Π is a function which takes a state
(cid:3)
st as above, an input message m, and returns a new state st
and a message m(cid:3). Given some state st and a message m we
(cid:3), m(cid:3)) ← Π(st, m) for one step in the execution of
write (st
(cid:3)
the protocol that processes message m to yield a new state st
and an answer m(cid:3).
B. Security Model
We ﬁrst describe the execution model in which the adversary
interacts with the participants, all running protocol Π.
EXECUTION MODEL. Initially, all parties i ∈ I generate long-
term keys by running either KGclient or KGserver, depending
on their role.4 They store the secret keys ski for further use,
and the adversary gets to learn the public keys pki of all
participants i ∈ I.
As usual, we assume that the adversary A controls the
communication network. The adversary runs an execution of
multiple instances of protocol Π, starting a new session of
party i ∈ I by calling a NewSession oracle for i. This
immediately creates a globally unique administrative label (cid:2),
and a freshly initialized state st for the party. We denote the
individual components of that session by (cid:2).crypt, (cid:2).status,
(cid:2).role etc. Note that this sets (cid:2).id = i and (cid:2).role accordingly,
and all other components are initialized as described above.
The adversary can now interact with this new session Π(cid:2)
i
of the protocol Π via the label (cid:2). We note that different
options are possible for how the intended peer of the session
is speciﬁed. The adversary can specify (cid:2).pid upon session
creation (yielding the pre-speciﬁed peer setting) or leave it
undeﬁned (yielding the post-speciﬁed peer setting).
(cid:3), and returns m(cid:3)
The adversary may deliver messages to sessions using
queries of the form Send((cid:2), m), where (cid:2) is a session label (of
a session which has been initialized before), and m is an ar-
(cid:3), m(cid:3)) ← Π((cid:2).st, m),
bitrary message. The session executes (st
sets the local session state to st
to the
adversary. We assume that the adversary also learns if the
session changes its status (cid:2).status to accept or reject.
The adversary A may corrupt the long-term key of user
i by issuing a query Corrupt(i). The key ski is returned to
the adversary and identity i is added to an initially empty set
Corr of corrupt parties. From now on, the adversary cannot
call oracles related to that party anymore. We call parties in
Corr corrupt, whereas all parties still in I \ Corr are called
honest. We deﬁne the set CorrCl of corrupted clients and the
set CorrSv of corrupted servers as the intersections of Corr
with C and S.
The adversary may learn the session key via query
RevealKey((cid:2)). This returns the session key (cid:2).key to the ad-
versary where, potentially, the key key is still undetermined
yet and equal to ⊥.
Finally, for capturing key secrecy we give the oracle access
to a Test oracle. This oracle is initialized with a secret bit
b ←${0, 1}. Upon querying the oracle with some label (cid:2) it
4Note that we allow, e.g., that client long-term keys are empty or remain
unused to model that clients may not possess long-term secret keys.
if Fresh((cid:2)) = true.
Note that the way we deﬁne the freshness property indicates
that we are not concerned with forward secrecy. That is, no
matter when the party of the session (or a partner) has been
455455
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
corrupted, it is assumed that this endangers the security of
the session key, even for sessions which have already been
completed.
AUTHENTICATION. Authentication guarantees the identity of
the partner for some session. We consider both one-way
and mutual authentication which we deﬁne formally using
the asymmetric predicate auth((cid:2), (cid:2)(cid:3)). Informally, the predicate
says that session (cid:2) authenticates the owner of session (cid:2)(cid:3) (as
its intended partner). Formally, we deﬁne auth((cid:2), (cid:2)(cid:3)) = true
if and only if (cid:2).pid (cid:7)= ∗ and (cid:2).pid = (cid:2)(cid:3).id. The former
basically demands that some authentication took place and
the latter requires that it points to the intended partner. Mutual
authentication is then expressed as mauth((cid:2), (cid:2)(cid:3)) = auth((cid:2), (cid:2)(cid:3))∧
auth((cid:2)(cid:3), (cid:2)).
We furthermore say a protocol is unilaterally or mutually
authentication if any partnered sessions correctly authenticate
the server resp. both sides. Note that we however do not
formalize (implicit) authentication as a distinguished security
experiment, but follow the common approach to encapsulate
implicit authentication within key secrecy.
Def inition 2.3 ((Implicit) Authentication): A session (cid:2) uni-
laterally authenticates a partnered session (cid:2)(cid:3) if auth((cid:2), (cid:2)(cid:3)) =
true. The sessions (cid:2), (cid:2)(cid:3) authenticate mutually if mauth((cid:2), (cid:2)(cid:3)) =
true.
A key exchange protocol Π provides unilateral resp. mutual
authentication if for all partnered sessions (cid:2), (cid:2)(cid:3) with (cid:2).role =
client and (cid:2)(cid:3).role = server it holds that auth((cid:2), (cid:2)(cid:3)) = true
resp. mauth((cid:2), (cid:2)(cid:3)) = true.
Notice that our notion of freshness above is general enough
to deal with the interplay between authentication and key
secrecy, in that it immediately captures the case of unilateral
authentication when the partner is anonymous (which we
model by setting pid = ∗).
As explained earlier, our model seamlessly treats pre- and
post-speciﬁed partners.
C. Traditional Security Properties
Before we move on to key conﬁrmation, which is the
security notion that is the focus of this work, we recall two
notions, crucial for the security of key exchange protocols.
One is key secrecy, which basically requires that (fresh)
keys look random and are only available to the (implicitly)
authenticated partners; the other one is called Match security
in [13] and, as a counter balance ensuring soundness of
session partnering, captures for example functional properties
such as that partnered sessions derive the same keys, and
security properties such as quasi uniqueness of pairs of session
identiﬁers.
KEY SECRECY. Key secrecy demands that any efﬁcient ad-
versary cannot do signiﬁcantly better than guessing in distin-
guishing actual keys (of fresh sessions) from random.
Def inition 2.4 (Key secrecy): A key exchange protocol Π
provides key secrecy if for any PPT adversary A there exists
a negligible function negl(n) such that
≤ 1
2
Π,A (n) = 1
Expscrcy
Pr
(cid:2)
(cid:3)
+ negl(n)
for the key secrecy experiment in Figure 1.
Match SECURITY. Next we deﬁne Match security. For this we
use a symmetric predicate samekey((cid:2), (cid:2)(cid:3)) which is set to true
if and only if (cid:2).key = (cid:2)(cid:3).key.
Deﬁne the predicate Match which returns true if and only
if all of the following conditions holds.
1) For all sessions (cid:2), (cid:2)(cid:3) with Partners((cid:2), (cid:2)(cid:3)) = true, it holds
that samekey((cid:2), (cid:2)(cid:3)) = true, i.e., partnered sessions derive
the same key.
2) For all sessions (cid:2), (cid:2)(cid:3), (cid:2)(cid:3)(cid:3) with Partners((cid:2), (cid:2)(cid:3)) = true and
Partners((cid:2), (cid:2)(cid:3)(cid:3)) = true, it holds that (cid:2)(cid:3) = (cid:2)(cid:3)(cid:3), i.e., there is
at most one partnered session for each session.
3) For all sessions (cid:2), (cid:2)(cid:3) with Partners((cid:2), (cid:2)(cid:3)) = true, it holds
that (cid:2).role (cid:7)= (cid:2)(cid:3).role, i.e., two partnered sessions adopt the
client-server relationship.
4) For all (cid:2), (cid:2)(cid:3) with Partners((cid:2), (cid:2)(cid:3)) = true, it holds that
auth((cid:2), (cid:2)(cid:3)) or (cid:2).pid = ∗, i.e., the partnered session has the
intended owner (where (cid:2).pid = ∗ allows for an arbitrary
owner).5
The adversary’s attack on Match-security is now similar
to the one against key secrecy, only this time the Test
oracle disappears from the setting, and the experiment ﬁnally
evaluates the predicate Match on the resulting execution state.
The adversary wins if the predicate evaluates to false, implying
that the adversary has managed to create a state which violates
the Match-security properties. Since we use a similar structure
for our key conﬁrmation experiments, where only a different
predicate is evaluated, it is convenient to deﬁne the experiment
generically with an abstract predicate Pred and plug in the
corresponding predicate for the security notion in question.
Def inition 2.5 (Match security): A key exchange protocol
Π provides Match security if for any PPT adversary A there
exists a negligible function negl(n) such that
≤ negl(n)
in Figure 2 with the
(cid:3)
Π,A(n) = 1
for the generic security experiment
predicate set to Pred = Match.
ExpPred
Pr
(cid:2)
III. DEFINING KEY CONFIRMATION
In this section we discuss and develop our notions for key
conﬁrmation. Per the discussion in the introduction we do not
distinguish between explicit and implicit key conﬁrmation.
We design two security notions which capture strong forms
of key conﬁrmation, one that corresponds to the guarantees of
the party that receives the last message in the protocol, and
a second one for the party that sends this last message. We
give logical formulas that directly capture the basic intuition
behind key conﬁrmation and then turn the formulas into their
5The difference to unilaterally or mutually authenticated protocols is that
we generally allow for (cid:2).pid = ∗ here. This is to require soundness of the
pid set; authentication requirements follow from Deﬁnition 2.3.
456456
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:58 UTC from IEEE Xplore.  Restrictions apply. 
if i ∈ C then (ski, pki) ← KGclient(1n) ﬁ
if i ∈ S then (ski, pki) ← KGserver(1n) ﬁ
Π,A (n)
Experiment Expscrcy
foreach i ∈ I do
1 :
2 :
3 :
4 : endforeach
b ←${0, 1}
5 :
6 : pks ← {(i, pki) | i ∈ I }
7 :
8 :
(cid:2) ← ANewSession(·),Send(·,·),Test(b,·),Corrupt(·),RevealKey(·)(1n
b
return (b = b
// where (cid:2)test only Test-query
(cid:2) ∧ Fresh((cid:2)test))
Figure 1: Key Secrecy Experiment.
, pks)
associated security notions. As we explain, care needs to be
taken to rule out superﬁcially correct, but in fact misleading
deﬁnitions.
A. Full Key Conﬁrmation
First, we treat the simpler case of full key conﬁrmation.
These are the guarantees obtained by the party that receives
the last message of the protocol: the protocol ensures full
key conﬁrmation (for that party) if, when it receives this last
message (and therefore accepts the locally derived key), it has
the guarantee that there is a (partnered) session of the protocol
that has accepted precisely the same key.
Since a protocol cannot achieve the full conﬁrmation prop-
erty for all sessions simultaneously—in each pair of sessions
one party has to ﬁnish ﬁrst—it is convenient to restrict the
sessions under considerations to some subset. Since a session
is fully described by its label (cid:2), including for example the
identity of the party running the session, we usually identify
the sessions according to their label (cid:2) which should belong to
some set L. Slightly overloading notation (but extending our
predicate-based notions in the previous sections in a natural
way) we write for example L((cid:2)) = [(cid:2).id /∈ Corr] to identify an
honest party’s session (cid:2). Analogously, we conveniently reuse
the identity sets C for client and S for server session labels
by deﬁning C((cid:2)) = [(cid:2).role = client] resp. S((cid:2)) = [(cid:2).role =
server].
In the deﬁnition below of the full key conﬁrmation predicate
we abstractly speak of subsets L and L(cid:3) of labels. The
predicate stipulates that for each accepting session with a label
(cid:2) from L, where the partner is neither corrupt nor unauthen-
ticated (in which case the adversary could impersonate the
partner), there exists another session with a label (cid:2)(cid:3) from L(cid:3)
such that this session also accepts the same key. Note that
we do not demand that the session (cid:2)(cid:3) is actually held by the
intended partner speciﬁed by (cid:2).pid (which is captured as a
distinct modular property within Match security), but only
that it is partnered according to the session identiﬁers. This
conveniently allows combining (full) key conﬁrmation with
other sid-based security notions, e.g., to achieve authentica-
tion and partnering properties when coupled with (implicit)
if i ∈ C then (ski, pki) ← KGC(1n) ﬁ