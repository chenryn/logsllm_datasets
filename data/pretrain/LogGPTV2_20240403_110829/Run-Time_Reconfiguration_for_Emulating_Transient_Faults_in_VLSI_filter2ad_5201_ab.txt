### Programmable Devices and Fault Emulation

#### Introduction
A programmable device, such as an FPGA, allows for the modification of its configuration memory by writing the appropriate bits. This process can be used to alter the state of specific memory blocks. The following steps outline the procedure to reverse the state of a bit in an internal memory block (see Figure 4):

1. **Extract the Logical Value**: First, the current logical value of the bit is extracted from the device's current state.
2. **Create a New Reconfiguration File**: A new reconfiguration file is generated that flips the logical value of the bit.
3. **Download the Reconfiguration File**: The new reconfiguration file is then downloaded into the FPGA's configuration memory.

**Figure 4: Reversing the State of a Bit in an Internal Memory Block**

- **Memory Block (2 x n)**
  - Address
  - DataIn
  - Clock
  - WriteEnable
  - ChipEnable
  - DataOut
  - Example: `11001010` (Current State)
  - After Bit-Flip: `00000000`

The fault remains until the reconfiguration phase, during which the original configuration is restored.

#### Pulse Faults
Pulse faults model the occurrence of Single Event Transients (SET) in combinational logic. These faults cause the logic state of a combinational element to be reversed for a short period before returning to normal. The target elements are typically function generators implemented using LUTs and their connecting lines.

**Fault Emulation in Function Generators:**
- **LUT Inputs and Outputs**: Pulses can target any LUT input line, the LUT output line, or the combinational circuit the LUT implements.
- **Truth Table Manipulation**: The truth table of the LUT, representing the circuit's behavior, is extracted and recomputed by inverting the desired output, input, or internal line. The modified truth table is then downloaded into the FPGA's configuration memory to emulate the pulse fault.

**Figure 5: Injecting a Pulse Fault into a Combinational Circuit Implemented as a LUT**

- **Truth Table Before Fault**: `{’0’, ‘1’, ‘0’, ‘1’, ‘1’, ‘1’, ‘0’, ‘1’, ‘0’, ‘0’, ‘1’, ‘1’, ‘1’, ‘0’, ‘1’, ‘1’}`
- **Truth Table After Fault**: `{’ ’, ‘1’, ‘ ’, ‘1’, ‘ ’, ‘1’, ‘ ’, ‘1’, ‘ ’, ‘ ’, ‘1’, ‘1’, ‘ ’, ‘ ’, ‘1’, ‘1’}`

To disable the pulse fault, the FPGA is reconfigured with the original truth table.

**Pulse Faults in Combinational Paths:**
- **Multiplexer Control**: If the target is a path connected to a CB input, the multiplexer control bit is inverted to simulate the pulse. Disabling the fault involves inverting the control bit again.

**Figure 6: Injecting a Pulse Fault into a Combinational Path Implemented as a CB Input**

- **Control Bit Inversion**: `‘1’` to `‘0’`

#### Delay Faults
Delay faults assume a modification in the propagation delay of a circuit. While the exact delays in the FPGA may not match those in the final implementation, this model provides an estimation of system behavior under delay conditions.

**Fault Emulation in Interconnecting Lines:**
- **Rerouting the Target Line**: Two approaches are proposed:
  1. **Extend the Path Length**: Introduce unused combinational or sequential elements (FFs, LUTs, multiplexers) to increase the path length.
  2. **Increase Fan-Out**: Increase the fan-out of the line by reconfiguring the control bit of unused pass transistors.

**Figure 7: Injecting a Delay by Routing a Line Through More Logic**

- **Shift Register Implementation**: Using a shift register composed of unused FFs.

**Figure 8: Injecting a Delay by Increasing the Fan-Out of the Line**

- **Fan-Out Increment**: Slowly increases the propagation delay, suitable for small delays.

#### Indetermination Faults
Indetermination faults assume that the target will present an undetermined voltage level between high and low thresholds. The targets are combinational and sequential elements (LUTs and FFs).

**Fault Emulation:**
- **Randomizer Approach**: Use a randomizer to generate the final logic levels interpreted as an undetermined voltage value by the FPGA's internal buffer.
- **LUT and Sequential Logic**: Follow the same schemes as bit-flip and pulse injection.

#### Summary
This section discusses the use of FPGAs for emulating various transient faults in HDL models of VLSI systems. The following table summarizes the fault models, FPGA resources, and emulation methods:

| **Fault Model** | **FPGA Target** | **Description** | **Observations** |
|-----------------|-----------------|-----------------|------------------|
| **Bit-Flip**    | FFs             | Modify memory bit | Slower than LSR  |
|                 | Memory Blocks   |                  |                  |
| **Pulse**       | LUTs            | Modify LUT contents | Faster than GSR  |
|                 | CB Inputs       | Use input inverter mux | Not applicable  |
| **Delay**       | PMs             | Increase fan-out | Good for small delays |
|                 | LUTs            | Increase routing path | Good for large delays |
| **Indetermination** | LUTs, FFs | Randomly generate final value | See Bit-Flip, Pulse |

#### Experimental Tool
An experimental tool, FADES (FPGA-based Framework for the Analysis of the Dependability of Embedded Systems), has been developed to demonstrate the feasibility of the defined methodology. The tool is based on the Virtex FPGA series from Xilinx and is implemented on an RC1000-PP board from Celoxica.

**FADES Modules:**
- **Experiments Setup Module**: A graphical user interface for specifying experiment parameters.
- **Fault Emulation Module**: Uses the JBits package to perform fault emulation.
- **Data Collection and Analysis Module**: Collects and analyzes data from the experiments.

**Figure 9: Experiments Set-Up Tool**

- **Parameters**: Experiment length, fault type, fault location and duration, observation points, etc.

This tool provides a comprehensive framework for analyzing the dependability of embedded systems using FPGAs.