estimates matches that of the corresponding ping measurements. We then are
able to count the fraction of comparisons which matched the RTT measurements.
We ﬁrst compare the completion rates. For Fury Route, the curve “RIPE
ﬁltered” in Fig. 4 shows the median completion rate is approximately 80%. Our
evaluation of iPlane shows a completion rate of 56% for the “RIPE ﬁltered”
set. Next, Fig. 5 shows the performance of Fury Route and iPlane ranking RIPE
Atlas when completion is possible. The curves show a CDF of the fraction of
matched comparisons for each of our origins for all possible pairs. The perfor-
mance of Fury Route and iPlane ranking is virtually identical in the median
case. Fury Route achieves comparable performance to iPlane using only DNS
and CDN deployment properties instead of iPlane’s necessary back-end mea-
surement network, while signiﬁcantly outperforming iPlane.
5.3 Rank Performance
Here, we analyze Fury Route’s performance on a diﬀerent, Planet Lab based,
platform. We wish to determine how well Fury Route’s chain-lengths estimate the
relative ordering given by the RTT measurements in a 60-node full mesh scenario.
We consider all possible pairwise comparisons between destinations for each
origin, giving us up to 1770 comparisons per origin (i.e., 1,770 = 59 + 58 + ...),
depending on completion rate.
Figure 6 shows a CDF of the fraction of matched comparisons for each of
our origins. The dotted line to the left indicates all possible pairs. This result
Fig. 6. A CCDF over hosts showing
the fraction of comparisons the chain
length matched the measured RTT
ordering.
Fig. 7. The improvement of queries
needed over time with the same graph.
96
M. Flores et al.
is similar and corresponds to the one shown above in Fig. 5. Each other line
indicates the performance for the subset of comparisons with a minimum distance
between path RTTs of δ. For example, for an origin S, δ = 25 contains all pairs
of destinations, e.g., A and B, for which |RTT(S, A) − RTT(S, B)| > 25 ms.
For our set of hosts, 71% of pairs were in δ > 25, 54% in δ > 50, and 29% in
δ > 100. In nearly all cases, Fury Route is above 50% performance in terms of
matches. Furthermore, we see that increasing the diﬀerence between the origin
and destinations expectedly improves performance. Indeed, the best case of a
diﬀerence of δ = 100 gives us 83% of comparisons correct in the median case.
Many of Fury Route’s misestimates stem from limits in the underlying CDN
infrastructure. Targets in areas with limited deployments result in greater error
in the initial hops, degrading the estimates. For example, such behavior was
observed in Africa, South America, or when crossing oceans. Figure 6 shows the
clearest tradeoﬀ: when comparing similar distances, Fury Route becomes less
accurate, as noise begins to dominate.
5.4 Overhead Analysis
The use of a graph to implement Fury Route provides a simple and eﬀective
caching mechanism. Fury Route can reuse the graph for multiple measurements
from a single origin (the expected use case). With a suﬃcient cache, queries
could then be executed in seconds, making Fury Route viable as a real time esti-
mation tool. To quantify the beneﬁts of graph caching, we conduct the following
experiment. First, we randomly sample 50 Planet Lab nodes as origins. For each
origin, we randomly sample 200 addresses from IPv4 space. Next, we construct
chains from each origin to each of its corresponding destinations, reusing the
graph for each origin.
Figure 7 presents the average number of queries for each origin: the x-axis
indicates the query index, i.e., how many times the graph has been reused, and
the y-axis is the average number of queries, where the error bars represent a
standard deviation. We see that the initial chain takes an average of 250 queries
to complete, but quickly decreases, requiring only 65 queries by the 10th chain
constructed with the graph. After 20 chains are constructed, the average number
of queries decreases below 50.
6 Related Work
A signiﬁcant body of work has been devoted to the challenge of predict-
ing network performance. These have included large-scale measurement plat-
forms [18,19,24–26], which attempt to measure a large number of routes and
hosts from a large number of vantage points. Other systems have embedded
coordinate systems, often based on measurements to a set of known landmarks
or peers, to perform network distance estimations between a set of hosts with-
out direct measurements [13–15,21,27,31]. Unlike these, Fury Route outsources
the direct network measurements to a number of underlying CDNs. As a result
Fury Route: Leveraging CDNs to Remotely Measure Network Distance
97
it requires no access to the measured endpoints nor to any other third-party
infrastructure.
King examines how latency can be measured indirectly by considering the
latency between two nearby DNS resolvers [16]. While similar to Fury Route
in that it does not require the direct participation of either host, King requires
a nearby open recursive resolver, and a nearby authoritative server. However,
such requirements are becoming more diﬃcult to satisfy. A recent study has
shown that the number of open recursive DNS servers is rapidly decreasing –
approximately by up to 60% a year, and by around 30% on average a year [17].
The use of CDN redirections has been shown eﬀective in terms of relative
network positioning [20,29,30]. In particular, if two clients have overlapping CDN
replicas, they are likely to be close to each other in the network sense. Such an
approach has further been utilized by large-scale systems such as BitTorrent [11].
Contrary to such an approach, which requires a large-scale distributed system
such as BitTorrent in order to be eﬀective Fury Route has no such limitation.
Indeed, it can, in principal, eﬀectively connect any two endpoints on the Internet.
Finally, the use of ECS [12] as a measurement tool was the key principle in
[10,28]. While similar in our use of ECS to obtain client-mapping information
from existing infrastructure, both of these works have a diﬀerent goal: exploring
the deployments of speciﬁc CDNs. Fury Route, on the other hand, is attempting
to use these CDNs to perform an additional task: network distance estimation.
7 Conclusions
We presented Fury Route, a system which builds on the underlying client map-
ping performed by CDNs and the potentials of the EDNS client subnet extension.
Fury Route is the only Internet-scale system that provides an infrastructure-free
mechanism to estimate distance between remote hosts, i.e., without any require-
ment for a measurement infrastructure nor for the manpower to administer the
same. Fury Route constructs chains of responses and uses the lengths of these
responses to estimate the relative network distance between remote hosts, all
without any direct network measurements. We demonstrated Fury Route’s abil-
ity to construct chains to over 80% of destinations in the median case. We further
showed that it matches the accuracy of infrastructure-dependent systems such
as iPlane. We examined the potential for caching, showing a signiﬁcant capabil-
ity for caching route graphs, rapidly building chains with fewer than 50 queries.
Given its lack of requirement for directly controlled measurement infrastructure,
low overhead, and ability to measure between arbitrary hosts, Fury Route stands
to be a practical and powerful tool for estimating relative network distance.
References
1. Amazon Route 53. https://aws.amazon.com/route53/
2. Azure DNS. https://azure.microsoft.com/en-us/services/dns/
3. Dyn DNS. http://dyn.com/dns/
98
M. Flores et al.
4. ECS dnspython. https://github.com/mutax/dnspython-clientsubnetoption
5. GoDaddy: DNS. https://www.godaddy.com/domains/dns-hosting.aspx
6. Google Cloud Platform: Cloud DNS. https://cloud.google.com/dns/
7. Neustar DNS Services. https://www.neustar.biz/services/dns-services
8. Verisign Managed DNS. http://www.verisign.com/en US/security-services/dns-
management/index.xhtml
9. Which CDNS support EDNS-client-subnet. https://www.cdnplanet.com/blog/
which-cdns-support-edns-client-subnet/
10. Calder, M., Fan, X., Hu, Z., Katz-Bassett, E., Heidemann, J., Govindan, R.: Map-
ping the expansion of Google’s serving infrastructure. In: Proceedings of IMC 2013
(2013)
11. Choﬀnes, D., Bustamante, F.: Taming the torrent: a practical approach to reducing
cross-ISP traﬃc in peer-to-peer systems. In: Proceedings of SIGCOMM 2008 (2008)
12. Contavalli, C., van der Gaast, W., tale, Kumari, W.: Client subnet in DNS
queries (IETF draft), December 2015. http://www.ietf.org/internet-drafts/draft-
ietf-dnsop-edns-client-subnet-06.txt
13. Costa, M., Castro, M., Rowstron, A., Key, P.: PIC: Practical Internet Coordinates
for distance estimation. In: Proceedings of ICDCS 2004 (2004)
14. Dabek, F., Cox, R., Kaashoek, F., Morris, R.: Vivaldi: a decentralized network
coordinate system. In: Proceedings of SIGCOMM 2004 (2004)
15. Francis, P., Jamin, S., Jin, C., Jin, Y., Raz, D., Shavitt, Y., Zhang, L.: IDMaps:
a global Internet host distance estimation service. IEEE/ACM ToN 9(5), 525–540
(2001)
16. Gummadi, K., Saroiu, S., Gribble, S.: King: estimating latency between arbitrary
Internet end hosts. In: Proceedings of Internet Measurement Workshop (IMW)
(2002)
17. Kuhrer, M., Hupperich, T., Bushart, J., Rossow, C., Holz, T.: Going wild: large-
scale classiﬁcation of open DNS resolvers. In: Proceedings of IMC 2015 (2015)
18. Madhyastha, H.V., Anderson, T., Krishnamurthy, A., Spring, N., Venkataramani,
A.: A structural approach to latency prediction. In: Proceedings of IMC 2006 (2006)
19. Madhyastha, H.V., Isdal, T., Piatek, M., Dixon, C., Anderson, T., Krishnamurthy,
A., Venkataramani, A.: iPlane: an information plane for distributed services. In:
Proceedings of OSDI 2006 (2006)
20. Micka, S., Goel, U., Ye, H., Wittie, M.P., Mumey, B.: pcp: Internet latency esti-
mation using CDN replicas. In: Proceedings of ICCCN (2015)
21. Ng, T., Zhang, H.: Predicting Internet network distance with coordinates-based
approaches. In: Proceedings of IEEE Infocom 2002 (2002)
22. Otto, J.S., S´anchez, M.A., Rula, J.P., Bustamante, F.E.: Content delivery and the
natural evolution of DNS: remote DNS trends, performance issues and alternative
solutions. In: Proceedings of IMC 2012 (2012)
23. Padhye, J., Firoiu, V., Towsley, D., Kurose, J.: Modeling TCP throughput: a simple
model and its empirical validation. In: Proceedings of SIGCOMM 1998. Vancouver,
British Columbia (1998)
24. Rabinovich, M., Triukose, S., Wen, Z., Wang, L.: DipZoom: the Internet measure-
ments marketplace. In: Proceedings of IEEE Infocom 2006 (2006)
25. RIPE Atlas. https://atlas.ripe.net/
26. S´anchez, M.A., Otto, J.S., Bischof, Z.S., Choﬀnes, D.R., Bustamante, F.E., Krish-
namurthy, B., Willinger, W.: Dasu: Pushing experiments to the Internet’s edge.
In: Proceedings of USENIX NSDI (2013)
27. Shavitt, Y., Tankel, T.: On the curvature of the Internet and its usage for overlay
construction and distance estimation. In: Proceedings of INFOCOM 2004 (2004)
Fury Route: Leveraging CDNs to Remotely Measure Network Distance
99
28. Streibelt, F., B¨ottger, J., Chatzis, N., Smaragdakis, G., Feldmann, A.: Exploring
EDNS-client-subnet adopters in your free time. In: Proceedings of IMC 2013 (2013)
29. Su, A.J., Choﬀnes, D., Bustamante, F., Kuzmanovic, A.: Relative network posi-
tioning via CDN redirections. In: Proceedings of ICDCS 2008 (2008)
30. Su, A.J., Choﬀnes, D., Kuzmanovic, A., Bustamante, F.: Drafting behind Akamai
(Travelocity-based detouring). In: Proceedings of SIGCOMM 2006, Pisa, Italy,
September 2006
31. Wong, B., Slivkins, A., Sirer, E.G.: Meridian: a lightweight network location service
without virtual coordinates. In: Proceedings of SIGCOMM 2005 (2005)