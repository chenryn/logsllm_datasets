fully 
qualified 
class 
name 
of 
com.qualcomm.qti.telephony.extcarrierpack.UiccReceiver. When the UiccReceiver component 
receives a broadcast intent with an action string of com.tmobile.oem.RESET, it will initiate and complete 
a programmatic factory reset by sending out a broadcast intent with an action string of 
android.intent.action.MASTER_CLEAR. This will cause the user to lose any data that they have not 
backed up or synced to an external location. The source code provided below will initiate a factory reset of 
the device.  
sendBroadcast(new Intent("com.tmobile.oem.RESET")); 
8.2 Essential Phone – Factory Reset 
The vulnerability lies in an app with a package name of 
com.ts.android.hiddenmenu 
(versionName=1.0, platformBuildVersionName=8.1.0). This app is a platform app and executes as the 
system user. Generally, the MASTER_CLEAR permission33 is required to be able to send a broadcast intent 
with an action string of android.intent.action.MASTER_CLEAR broadcast intent, but the app has the 
capability as various powerful permissions are granted by default to platform apps. The 
com.ts.android.hiddenmenu app has an activity application component show below. 
The RTNResetActivity app component is explicitly exported, as it sets the android:exported attribute 
to a value of true. When an app component is exported, this allows any on the device to start this app 
component since there are no permission requirements (e.g., android:permission attribute) to access it. 
31 https://www.t-mobile.com/devices/t-mobile-revvl-plus 
32 https://support.t-mobile.com/community/phones-tablets-devices/android/coolpad-defiant 
33 https://developer.android.com/reference/android/Manifest.permission.html#MASTER_CLEAR 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Internally, the RTNResetActivity component starts other components where the 
com.ts.android.hiddenmenu.util.ResetActivity activity sends a broadcast intent with 
android.intent.action.MASTER_CLEAR. This will programmatically factory reset the device and 
potentially cause data loss. The source code below can be run to initiate a factory reset. 
Intent i = new Intent(); 
i.setClassName("com.ts.android.hiddenmenu", "com.ts.android.hiddenmenu.rtn.RTNResetActivity"); 
startActivity(i); 
Figure 2 shows the steps involved for a third-party to programmatically factory reset the Essential device. 
Figure 2. Programmatic Factory on the Essential Phone Device. 
8.3 ZTE Zmax Champ – Factory Reset 
The pre-installed app that exposes the capability for a third-party app to factory reset the device has a 
package name of com.zte.zdm.sdm (versionCode=31, versionName=V5.0.3). This app executes as the 
system user. This app does not request the android.permission.MASTER_CLEAR permission in it 
AndroidManifest.xml file, although it will be automatically granted this permission since it is executing 
as the system user. The system user is a privileged user on the device and is granted a powerful block of 
permissions by default. One of these capabilities granted to the system user is to programmatically factory 
reset the device.  
The com.zte.zdm.sdm app has a statically declared broadcast receiver in its AndroidManifest.xml file 
with a name of com.zte.zdm.VdmcBroadcastReceiver that can handle broadcast intents with an action 
string of android.intent.action.DM_FATORY_RESET_TEST_BY_TOOL. The VdmcBroadcastReceiver 
component is exported, by default, and accessible to any app on the device, since it does not explicitly set 
the android:exported attribute a value to false, has at least one intent-filter declared, and is not 
protected by a custom or platform-defined permission. When a broadcast intent is sent with this action, the 
com.zte.zdm.MyCommand.bootCommand(String) method is called with a parameter of --wipe_data. 
This method will write a value of --wipe_data to a file with a path of /cache/recovery/command and 
then use the PowerManager to boot into recovery mode. Generally, a few additional lines are written in 
addition to the --wipe_data line, but these lines have been omitted from step 5 of Figure 2. This will 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
programmatically factory reset the device. The code to perform the aforementioned described behavior is 
below. The code is a single line and simply sends a broadcast intent with a specific action string. 
sendBroadcast(new Intent("android.intent.action.DM_FATORY_RESET_TEST_BY_TOOL")); 
8.4 Leagoo Z5C – Factory Reset 
Any app on the device can send an intent to factory reset the device programmatically. This does not require 
any user interaction. In addition, the app initiating the factory reset does not require any permissions. A 
factory reset will remove all user data from the device. This will result in the loss of any data that the user 
has not backed up or synced externally. This capability to perform a factory reset is not directly available 
to third-party apps (those that the user installs themselves), although this capability is present in an 
unprotected 
application 
component 
of 
the 
com.android.settings 
app 
(versionCode=23, 
versionName=6.0-android.20170630.092853). This app has an exported broadcast receiver named 
com.sprd.settings.PhoneTrackCommandReceiver, and its declaration in the AndroidManifest.xml 
file is shown below. 
Internally, when the PhoneTrackCommandReceiver component receives a broadcast intent with an action 
string of android.intent.action.phonetrack_masterclear, it will send a broadcast intent with an 
action string of android.intent.action.MASTER_CLEAR, which initiates a programmatic factory reset of 
the device. The single source code line below will cause the Leagoo Z5C device to be perform a factory 
reset. 
8.5 Leagoo P1 – Factory Reset 
The vulnerability lies in an app with a package name of com.wtk.factory (versionCode=1, 
versionName=1.0). This app executes as the system user as it is a platform app. Specifically, this app is 
signed with the platform key and sets the android:sharedUserId attribute to a value of 
android.uid.system in its AndroidManifest.xml file. This app also requests the MASTER_CLEAR 
permission, allowing it to perform a programmatic factory reset of the device. The com.wtk.factory app 
has a broadcast receiver application component declared in its AndroidManifest.xml file show below. 
The 
MMITestReceiver 
app 
component 
sends 
a 
broadcast 
intent 
with 
android.intent.action.MASTER_CLEAR as the action string when it receives an intent sent to it using the 
source code below.  
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Intent i2 = new Intent(); 
i2.setAction("com.mmi.helper.request"); 
i2.setClassName("com.wtk.factory", "com.wtk.factory.MMITestReceiver"); 
i2.putExtra("type", "factory_reset"); 
i2.putExtra("value", "100"); 
sendBroadcast(i2); 
8.6 Plum Compass – Factory Reset 
The vulnerability is contained in an app with a package name of com.android.settings 
(versionCode=23, versionName=6.0-eng.root.20161223.224055). This app is a platform app and 
executes as the system user. This app also requests the MASTER_CLEAR permission allowing it to perform a 
programmatic factory reset of the device. The com.android.settings app has a broadcast receiver 
application component show below. 
Internally, 
the 
FactoryReceiver 
component 
sends 
a 
broadcast 
intent 
with 
android.intent.action.MASTER_CLEAR as the action string when it receives an intent sent to it using the 
source code below. 
Intent i = new Intent(); 
i.setClassName("com.android.settings", "com.android.settings.FactoryReceiver"); 
sendBroadcast(i); 
8.7 Orbic Wonder – Factory Reset 
The vulnerability lies in the core Android package (with a package name of android) which is a privileged 
part of the Android OS. This process runs as the system user. Within the android package, there is a 
broadcast receiver application component named com.android.server.MasterClearReceiver. When 
this component receives a broadcast intent addressed to it, it will programmatically initiate and complete a 
factory reset. The source code below will initiate a factory reset on the device. Please note that the action 
string of potatoes is not required, it just needs to be any non-empty string. 
Intent i2 = new Intent(); 
i2.setClassName("android", "com.android.server.MasterClearReceiver"); 
i2.setAction("potatoes"); 
sendBroadcast(i2); 
8.8 MXQ TV Box 4.4.2 – Factory Reset 
Normally, sending a broadcast with an action string of android.intent.action.MASTER_CLEAR cannot 
be sent by a third-party app, but it can be sent by a third-party app on this device. This is due to the fact 
that the com.android.server.MasterClearReceiver app component in the system_server process is 
not directly registered in the core android package, and is instead registered dynamically and does not 
have the MASTER_CLEAR permission access requirement. This behavior is not present in 4.4.2 AOSP code. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
sendBroadcast(new Intent ("android.intent.action.MASTER_CLEAR")); 
The programmatic factory reset will wipe all user data and any data that has not been backed up or synced 
to an external location will be lost. 
9. Setting Properties as the com.android.phone User 
We discovered a pre-installed app on some devices that exposes the capability to set system properties as 
the com.android.phone user. This can be performed by any app on the device due to an exported service 
in the com.qualcomm.qti.modemtestmode app. This app executes as the system user. Appendix F 
provides the AndroidManifest.xml file for the com.qualcomm.qti.modemtestmode app from a Vivo V7 
Android device. This app contains an explicitly exported service named MbnTestService that allows the 
caller to provide a key-value pair that it will write as a system property. This application is still bound by 
SELinux rules regarding its context and associated capabilities. Based on our testing, the 
com.qualcomm.qti.modemtestmode app can modify system properties that start with the persist. prefix 
(e.g., persist.sys.factory.mode). Vendors can introduce their own system properties that can alter the 
functionality of the device when a property is set to a certain value. 
The MbnTestService service is a bound service that provides an interface for clients to access. The bound 
service has a corresponding AIDL file that easily allows the client app to perform RPCs on the service. If a 
client app lacks the AIDL file, the client app can still interact with the bound service although they will 
have to perform low-level behavior that the AIDL file abstracts from the developer. The client will need to 
create and populate the Parcel object, provide the correct interface name, and call the correct function 
number on the interface. The source code to perform this behavior on the Vivo V7 is provided in Appendix 
G. We provide two examples, Vivo V7 and Coolpad Canvas, of how settings a system property can enable 
logging features on the device that would otherwise be unavailable to a third-party app. 
9.1 Vivo V7 – Obtaining User Touch Input 
The 
Vivo 
V7 
device 
contains 
the 
com.qualcomm.qti.modemtestmode 
(versionCode=25, 
versionName=7.1.2) 
app. 
This 
device 
has 
a 
build 
fingerprint 
of 
vivo/1718/1718:7.1.2/N2G47H/compil11021857:user/release-keys. A third-party app can modify 
certain system properties on the device. Specifically, setting the persist.sys.input.log key to a value 
of 1, will make the user’s screen touches be written to the logcat log by the InputDispatcher for all apps. 
Vivo V7 also contains a vulnerability to have a pre-installed app write the logcat logs to the SD card as 
detailed in Section 5.5. With some effort and knowledge of the device, an attacker can translate the 
coordinates to keyboard keypresses. This allows the attacker to determine the user keypresses on the 
keyboard, potentially exposing PII. The device will need to be rebooted in order for the system property to 
be read at boot time. A third-party app can quickly cause a system crash and reboot the Vivo V7 device by 
sending a broadcast intent with an action of intent.action.super_power_save_send. The system crash 
is due to inadequate null-checking at runtime and also a lack of exception handling in the system_sever 
process.  
04-13 12:08:00.060  1422  1770 D InputDispatcher:   Pointer 0: id=0, toolType=1, x=460.000000, 
y=1027.000000, pressure=0.023529, size=0.023529, touchMajor=6.000000, touchMinor=6.000000, 
toolMajor=6.000000, toolMinor=6.000000, orientation=0.000000 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
04-13 12:08:00.060  1422  1770 D InputDispatcher:   Pointer 1: id=1, toolType=1, x=166.000000, 
y=1282.000000, pressure=0.023529, size=0.023529, touchMajor=6.000000, touchMinor=6.000000, 
toolMajor=6.000000, toolMinor=6.000000, orientation=0.000000 
04-13 12:08:00.060  1422  1770 D InputDispatcher:   Pointer 2: id=2, toolType=1, x=268.000000, 
y=1070.000000, pressure=0.015686, size=0.015686, touchMajor=4.000000, touchMinor=4.000000, 
toolMajor=4.000000, toolMinor=4.000000, orientation=0.000000 
9.2 Coolpad Canvas – Write Logcat log, Kernel log, and tcpdump Capture to the SD Card 
The Coolpad Canvas Android device34 is sold by Cricket Wireless and contains a vulnerable version of the 
com.qualcomm.qti.modemtestmode (versionCode=24, versionName=7.0) app, allowing third-party 
apps to change certain system properties (as explained in Section 9) . The build fingerprint of the device is 
Coolpad/cp3636a/cp3636a:7.0/NRD90M/093031423:user/release-keys. Setting a system property 
can enable logging features on the device that would otherwise be unavailable to a third-party app. 
Specifically, using the method described above, any app can set the persist.service.logr.enable 
property to a value of 1 to enable logging on the device. When this occurs, the device will start writing log 
files to a path of /sdcard/log. Below is a listing of the files created in the /sdcard/log directory.  
cp3636a:/sdcard/log $ ls -al                                                                  
total 1984 
drwxrwx--x  2 root sdcard_rw   4096 2018-05-18 11:42 . 
drwxrwx--x 15 root sdcard_rw   4096 2018-05-18 01:30 .. 
-rw-rw----  1 root sdcard_rw    632 2018-05-18 11:48 0518114248.crash.txt 
-rw-rw----  1 root sdcard_rw 157544 2018-05-18 11:48 0518114248.events.txt 
-rw-rw----  1 root sdcard_rw 241356 2018-05-18 11:48 0518114248.kernel.txt 
-rw-rw----  1 root sdcard_rw 261513 2018-05-18 11:48 0518114248.main.txt 
-rw-rw----  1 root sdcard_rw  65536 2018-05-18 11:47 0518114248.net.pcap 
-rw-rw----  1 root sdcard_rw     11 2018-05-18 11:42 0518114248.qsee.txt 
-rw-rw----  1 root sdcard_rw 244923 2018-05-18 11:48 0518114248.radio.txt 
-rw-rw----  1 root sdcard_rw  28089 2018-05-18 11:48 0518114248.system.txt 
Five of the files correspond to the different log buffers (crash, events, radio, system, and main). These files 
are highlighted in orange. Android prevents third-party apps from reading directly from the system-wide 
logcat log since it tends to contain sensitive data. The kernel log is highlighted in purple. A network package 