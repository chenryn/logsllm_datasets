64 of the faults will be of the
ﬁrst type. It is this latter and more common type of fault that
MASK attempts to resolve.
By statically analyzing the code, the compiler can know
that all but the lowest-order bit of r3 must necessarily be
zero. The MASK technique enforces this invariant by adding
the boldfaced instruction shown in Figure 6. If a fault occurs
to any of the bits which should be zero, then it will be masked
out and will not affect any subsequent computation. There-
fore, the reliability of register r3 will be increased by a factor
of 64 in our example.
The MASK technique reduces the total number of live
bits in the system, thereby increasing the system’s resilience
against faults; any fault to a dead bit cannot cause the sys-
tem to produce incorrect output. Although we only evaluate
masking with and instructions to enforce known-zero bits,
the technique could easily be extended to use or instruc-
tions to enforce known-one bits, or sign-extensions to enforce
known-sign bits. The technique could also eventually be ex-
tended to take into account higher-level semantic information
and programmer annotations.
6 Hybrid Techniques
In this section, we describe four hybrid combinations of
SWIFT-R, TRUMP, and MASK.
6.1 TRUMP/SWIFT-R
Although TRUMP can be applied in many situations, it
cannot be applied to all. In order to ensure the highest level
of reliability, the TRUMP technique can be applied to protect
as much of the program as possible, and then the remaining
parts of the program can be protected with the universally
applicable SWIFT-R technique.
This hybrid technique is called TRUMP/SWIFT-R.
In
TRUMP/SWIFT-R, every dependence chain is broken up into
exactly two continuous segments: the part of the chain where
TRUMP can be applied and the part where TRUMP cannot
be applied. The technique further places the restriction that
the region where TRUMP can be applied must include the
uses of this dependence chain, i.e. the end of the dependence
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
ld r3 = [r4]
and r3 = r3, 0xFF
add r1 = r2, r3
1:
2:
3:
4:
5:
6:
7:
majority(r4,r4’,r4’’)
ld r3 = [r4]
mov r3’ = r3
mov r3’’ = r3
and r3 = r3, 0xFF
and r3’ = r3’, 0xFF
and r3’’ = r3’’, 0xFF
shl r3t = r3’,1
add r3t = r3t,r3’’
add r1 = r2, r3
add r1t= r2t,r3t
call recovery, 3*r1 != r1t
8:
9:
10: majority(r4,r4’,r4’’)
st [r4] = r1
st [r4] = r1
(a) Original Code
(b) TRUMP/SWIFT-R Code
Figure 7. TRUMP/SWIFT-R example.
chain. This means that within a dependence chain, there will
only ever be one transition from SWIFT-R to TRUMP and not
vice versa. This restriction is required because, as we will see,
converting SWIFT-R redundancy into TRUMP redundancy is
far more affordable than converting TRUMP redundancy into
SWIFT-R redundancy, which requires expensive checks and
division.
At the point where the SWIFT-R chain ends and the
TRUMP chain begins, the SWIFT-R redundancy is converted
into TRUMP redundancy. To do this, two of the SWIFT-R
values are combined to create a single AN-encoded TRUMP
value. This ensures that any faults to either one of the two
SWIFT-R values will be properly reﬂected in the TRUMP
value. An example is shown in Figure 7.
In this code sequence, all instructions through the and
comprise the SWIFT-R portion of the chain, and the remain-
der comprises the TRUMP portion of the chain. Therefore,
the ld and the and instructions have typical SWIFT-R pro-
tection in instructions 1 through 5. Instruction 6 multiplies
r3’ by two and instruction 7 adds r3’’ to this value.
If
there were no faults, then 2 · r3’ + r3’’ = 2 · r3 + r3 =
3 · r3, the proper AN-encoded value. If either r3’ or r3’’
has a single-bit fault, then the resulting value, r3t will also
have the fault and not be divisible by 3. The TRUMP redun-
dant addition is inserted as instruction 8. The store instruction
at the end of the example has its sources protected by both
TRUMP and SWIFT-R, and the appropriate recovery code is
inserted at instructions 9 and 10.
6.2 TRUMP/MASK
TRUMP/MASK is the TRUMP and MASK techniques
combined. In TRUMP/MASK, it is only desirable to apply
the MASK technique to the original version of the code and
not to TRUMP’s redundant instructions. This is because in-
structions that are protected by TRUMP are already tolerant
of faults and therefore need no additional protection from
MASK. However, MASK can be applied on those depen-
dence chains which TRUMP cannot protect. These are often
exclusive, since it is typically difﬁcult to prove that any of
the bits in the instructions that TRUMP can protect, namely
arithmetic operations, are zero, while it is usually much easier
to prove that bits are zero in instructions that TRUMP cannot
protect, such as logical and and or. Because of this exclu-
sivity, the TRUMP and MASK techniques are able to com-
plement each other in TRUMP/MASK by protecting different
portions of the program.
6.3 Other Hybrids
In this paper, we do not evaluate the combination of
SWIFT-R and MASK. Since the MASK technique does
not add any redundancy into the program, unlike TRUMP,
all of SWIFT-R’s redundancy must remain in the program.
Therefore, the SWIFT-R/MASK combination would simply
consist of SWIFT-R with additional MASK instructions in-
serted. However, since MASK does not close or reduce any
of SWIFT-R’s windows of vulnerability, the MASK instruc-
tions would be useless. Therefore, we do not evaluate this
hybrid combination. For the same reason, we also do not
evaluate a TRUMP/SWIFT-R/MASK hybrid.
7 Evaluation
This section evaluates the SWIFT-R, TRUMP, and
MASK techniques, as well as the TRUMP/MASK and
TRUMP/SWIFT-R hybrid techniques. Each technique was
implemented as a pass in the gcc compiler, version 3.4.1,
targeted for the PowerPC 970. Our additional compila-
tion phase occurs in the backend of the compiler immedi-
ately before register allocation and scheduling. We evalu-
ated these techniques on a variety of benchmarks taken from
SPEC CPU2000, MediaBench [10], and other benchmark
suites. All binaries were compiled with the -O2 level of op-
timization and run on an Apple Xserve G5 with a dual-core
PPC970FX.
7.1 Reliability
We performed fault injection experiments for each of our
techniques in order to evaluate their reliability. In accordance
with the SEU model, we inserted exactly one fault per ex-
ecution. The fault was inserted into a uniformly randomly
selected bit in a uniformly randomly selected integer regis-
ter at a uniformly random dynamic instruction in the pro-
gram’s execution. 250 such runs were performed for each
benchmark for each technique and the outcome of each run
was recorded. We injected faults into the register ﬁle since it
has been shown to be one of the leading contributors of soft-
errors [20, 30]. We believe the proposed techniques are also
able to protect against most errors to other structures such as
the ALU, which are nearly impossible to protect with ECC,
since errors to these structures will often manifest themselves
similar to faults to the register ﬁle.
The fault injection infrastructure instrumented the binaries
with code which would alter the appropriate bit at the ap-
propriate dynamic instruction. However, the fault injection
infrastructure did not permit fault injections into the TOC
pointer, a PPC speciﬁc register which is a pointer to global
data locations. Additionally, since we implemented our trans-
formations before register allocation, we were unable to pro-
tect all uses of the stack pointer. Therefore, we also did not
inject faults into the stack pointer.
For future work, we plan to extend our infrastructure to
allow for injections into the TOC, and to investigate ways
of protecting the stack pointer while not being prohibitively
costly. Since the PPC64 has 32 registers, an upper bound
on the additional SDC for not protecting both of these is
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
Figure 8. Reliability percentage for NOFT(N), MASK(M), TRUMP(T), TRUMP/MASK(K), TRUMP/SWIFT-
R(R), and SWIFT-R(S). The Average is across all benchmarks.
32 ≈ 6%, the probability that a fault will occur in either the
2
stack pointer or the TOC pointer. For these experiments, we
also neither inserted faults into, nor duplicated, ﬂoating-point
registers.
Figure 8 shows the results of the reliability evaluation. The
amount of unACE in NOFT is quite high at 74.18%, demon-
strating that there is already a large number of dynamically
dead registers and masked bits in unprotected code. The
SEGV percentage for NOFT is 18.00%, much higher than
the SDC percentage of 7.82%. This indicates that faults in
registers are much more likely to cause segmentation faults
than to corrupt data, suggesting that a great deal of computa-
tion for most benchmarks only feeds the addresses of memory
accesses rather than the data itself.
As expected, SWIFT-R and its triple-modular redundancy
is able to greatly reduce the SEGV and SDC, down to 1.93%
and 0.81% respectively. Furthermore, it is consistently low
across all benchmarks, indicating universal applicability. The
amount of SEGV and SDC is still nonzero, however, due to
the windows of vulnerability described in Section 3.2. Since
the compiler was not speciﬁcally directed to schedule for re-
liability, the reliability could be further improved, possibly at
the cost of some performance, if the compiler were forced to
move the checks as close as possible to the uses.
TRUMP also signiﬁcantly improves
reliability over
NOFT, albeit not as much as SWIFT-R. TRUMP reduces the
SEGV down to 7.39% and the SDC down to 4.88% while
increasing the unACE percentage to 87.73%. TRUMP im-
proves SEGV much more dramatically than SDC; this is due
to the fact that most pointer dependence chains can be pro-
tected by TRUMP while many other dependence chains can-
not be. There are two principal reasons for this. First, as
mentioned earlier, pointer ranges are limited to valid mem-
ory addresses, making it easier to verify that the AN-encoded
values will not overﬂow. Secondly, pointer computations tend
to be restricted to simple arithmetic operations such as addi-
tion, which can be protected by TRUMP.
As will be shown in the next section, the performance
penalty incurred by TRUMP is signiﬁcantly less than that of
SWIFT-R. Coupled with TRUMP’s reliability, this technique
represents a promising middle-ground for designers who can-
not afford to incur the performance penalty of SWIFT-R but
who still need signiﬁcant reliability enhancement. However,
designers must keep in mind that TRUMP does not increase
reliability uniformly across all benchmarks. For benchmarks
that are dominated by arithmetic instructions that can be pro-
tected by TRUMP, such as 183.equake and mpeg2enc,
TRUMP performs on par with SWIFT-R. For benchmarks,
such as 197.parser, that are dominated by instructions
TRUMP cannot protect, such as logical operations, TRUMP’s
reliability is signiﬁcantly lower SWIFT-R’s.
The MASK technique does not signiﬁcantly reduce SDC
(7.61% versus 7.82% for NOFT) or SEGV (17.89% ver-
sus 17.89% for NOFT) across all benchmarks.
In fact, in
some benchmarks, MASK’s reliability can be slightly worse
than NOFT’s, due to poorer schedules in terms of reliabil-
ity. However, in other benchmarks, such as adpcmdec or
mpeg2dec, the MASK technique can make a signiﬁcant dif-
ference.
In adpcmdec, it is able to lower the SDC from
17.30% down to 12.87%, and in mpeg2dec, the SEGV is
lowered from 25.74% down to 22.57%. This is encourag-
ing and suggests that by looking for further opportunities to
enforce program invariants, the MASK technique offers the
potential to enhance reliability with practically no cost.
As would be expected, combining the TRUMP and MASK
techniques yields reliability similar to that of TRUMP. How-
ever, for benchmarks where MASK makes a signiﬁcant dif-
ference, such as adpcmdec, TRUMP/MASK fares signiﬁ-
cantly better than either TRUMP or MASK. For adpcmdec,
in fact, the SDC of the benchmark is reduced to 4.55% com-
pared with 4.88% for TRUMP and 7.61% for MASK. This
additive effect can be attributed to the fact that MASK and
TRUMP protect very different types of instructions. TRUMP
protects arithmetic instructions while MASK protects instruc-
tions where bits can be proved to be zero, which are almost al-
ways logical instructions. Their protections complement each
other yielding a technique which is more reliable than either
TRUMP or MASK alone.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:54 UTC from IEEE Xplore.  Restrictions apply. 
unACESEGVSDC6080100%NMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRSNMTKRS099.go124.m88ksim129.compress130.li132.ijpeg134.perl164.gzip179.art181.mcf183.equake186.crafty197.parser254.gap255.vortex256.bzip2300.twolfadpcmdecadpcmencepicdecepicencg721encgsmdecgsmencjpegdecjpegencmpeg2decmpeg2encAverageFinally, the TRUMP/SWIFT-R technique performs sim-
ilarly to SWIFT-R, with a SEGV of 2.14% and a SDC
of 0.62%. This implies that the SWIFT-R portions of the
code are successfully ﬁlling in the gaps in protection left by
TRUMP, leaving windows of vulnerability on par with those
in SWIFT-R. However, the reliability of TRUMP/SWIFT-
R is slightly worse than that of SWIFT-R for some bench-
marks because the addition of the TRUMP instructions can
sometimes increase the total dynamic number of instructions.
This is due to the fact that transitions between SWIFT-R and
TRUMP require extra instructions, and that TRUMP’s veri-
ﬁcation sequence is longer than SWIFT-R’s. This can ulti-
mately increase register live ranges and the size of windows
of vulnerabilities. This suggests that the heuristics of when to
apply SWIFT-R and when to apply TRUMP and how to tran-
sition from one to the other within a single dependence chain
requires additional investigation, which we are pursuing as
future work.
7.2 Performance
We collected performance results for each technique us-
ing oprofile [11] when no faults were injected. Figure 9
shows the execution times for each of our techniques nor-
malized to a baseline build with no additional fault tolerance
(NOFT). Note that the bars are clipped at one. In most cases,
the performance of MASK is only nominally above one, and
in some cases, the performance of MASK bests that of NOFT
because the inserted instructions cause slight changes to the
scheduling and register allocation heuristics. Consequently,
MASK bars appear “missing” for many benchmarks.
Our techniques exhibit a wide range of performance be-
havior. The low-cost techniques, TRUMP and MASK, have
normalized execution times of only 1.36 and 1.00 respec-
tively. Combining these two is the TRUMP/MASK tech-
nique, which correspondingly has the larger normalized exe-