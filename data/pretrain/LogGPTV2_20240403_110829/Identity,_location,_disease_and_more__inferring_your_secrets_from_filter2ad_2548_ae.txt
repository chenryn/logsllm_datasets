no longer be determined from the usage statistics when the counter
value is rounded to a multiple of 1024 bytes. Note that the error
incurred by this rounding strategy is no more than 512 bytes, which
is low, considering the fact that the total data usage of the app can
be several megabytes. Therefore its impact on the utility of data
consumption monitoring apps is very small (below 0.05%).
We further measured the delay caused by the modiﬁed APIs and
the new UsageService on a Galaxy Nexus, which comes from
permission checking and IPC, to evaluate the overhead incurred
by the enforcement mechanism we implemented. On average, this
mechanism brought in a 22.4ms delay, which is negligible.
Limitations of our Defence. We found that it is challeng-
ing to come up with a bullet proof defense against all those
information leaks for the following reasons.
a) Shared re-
sources are present all over
the Linux’s ﬁle system from
/proc/[pid]/, /proc/uid_stat/[uid], network proto-
cols like /proc/net/arp or /proc/net/wireless and
even some Android OS APIs. b) Public resources are different
across different devices. Some of this information is leaked by
third party drivers like the LCD backlit status which is mounted
in different places in the /sys ﬁle system on different phones. c)
Trafﬁc usage is also application related. For the round up and round
down defense strategy to be applied successfully, the OS must be
provided with the trafﬁc patterns of the apps it has to protect before
calculating an appropriate round size capable of both securing them
from malicious apps and introducing sufﬁciently small noise to the
data legitimate trafﬁc monitoring apps collect. A more systematic
study is needed here to better understand the problem.
7. RELATED WORK
Information leaks have been studied for decades and new dis-
coveries continue to be made in recent years [33, 39, 37]. Among
them, most related to our work is the work on the information
leaks from procfs, which includes using the ESP/EIP data to infer
keystrokes [38] and leveraging memory usages to ﬁngerprint visited
websites [31]. However, it is less clear whether those attacks pose
a credible threat to Android, due to the high non-determinism of
its memory allocation [31] and the challenges in keystroke analy-
sis [38]. In comparison, our work shows that the usage statistics
under procfs can be practically exploited to infer an Android user’s
sensitive information. The attack technique used here is related
to prior work on trafﬁc analysis [20]. However, those approaches
assume the presence of an adversary who sees encrypted packets.
Also, their analysis techniques cannot be directly applied to smart-
phone. Our attack is based upon a different adversary model, in
which an app uses public resources to infer the content of the data
received by a target app on the same device. For this purpose, we
need to build different inference techniques based on the unique
features of mobile computing, particularly the rich background in-
050010001500050100150200250(16,201)(32,198)(64,170)(128,85)(256,32)(512,10)(1024,1)round bytesNo. of identifiable conditions1026formation (i.e., social network, BSSID databases and Google Maps)
that comes with the target app and the mobile OS.
Information leaks have been discovered on smartphone by both
academia and the hacker community [21, 27, 16]. Most of known
problems are caused by implementation errors, either in Android
or within mobile apps. By comparison, the privacy risks come
from shared resources in the presence of emerging background
information have not been extensively studied on mobile devices.
Up to our knowledge, all prior research on this subject focuses
on the privacy implications of motion sensors or microphones [34,
17, 32, 18, 28]. What has never been done before is a systematic
investigation on what can be inferred from the public resources
exposed by both Linux and Android layers.
New techniques for better protecting user privacy on Android also
continue to pop up [22, 23, 27, 30, 14, 24, 21]. Different from such
research, our work focuses on the new privacy risks emerging from
the fast-evolving smartphone apps, which could render innocuous
public resources related to sensitive user information.
8. CONCLUSION
In this paper, we report our study on information leaks from
Android public resources. The study reveals that highly sensitive
data of a smartphone user, such as her identity, interested disease
conditions, geo-location, driving route and more can actually be
reliably inferred from such resources by analyzing popular apps. Our
ﬁndings call into question the design assumption made by Android
developers on public resources and demand new effort to address
such privacy risks. To this end, we further present a preliminary
design for mitigating the threats to selected public resources, while
still maintaining their utility.
9. ACKNOWLEDGMENTS
The authors at Indiana University are supported in part by Na-
tional Science Foundation CNS-1017782 and CNS-1117106. We
also acknowledge the grant HHS-90TR0003/01 from the Ofﬁce of
the National Coordinator for Health Information Technology at the
Department of Health and Human Services (HHS). The views in
this paper represent opinions of the authors only.
10. REFERENCES
[1] ReadWrite A Tech Blog.
http://readwrite.com/2011/05/10/doctor_
in_your_pocket_webmd_comes_to_android.
Accessed: 13/02/2013.
[2] Wiﬁ coverage map. http://www.navizon.com/
navizon_coverage_wifi.htm. Accessed: 13/02/2013.
[3] Fbi issues android smartphone malware warning.
http://www.forbes.com/sites/billsinger/
2012/10/15/fbi-issues-android-
smartphone-malware-warning/, 2012.
[4] Get search, twitter api. https:
//dev.twitter.com/docs/api/1/get/search,
2012.
[5] Google play. https://play.google.com/store/
search?q=traffic+monitor&c=apps, 2012.
[6] Google play: Webmd for android.
http://www.webmd.com/webmdapp, 2012.
[7] Smart phone malware: The six worst offenders.
http://www.nbcnews.com/technology/
technolog/smart-phone-malware-six-worst-
offenders-125248, 2012.
[8] Antutu benchmark.
https://play.google.com/store/apps/
details?id=com.antutu.ABenchMark, 2013.
[9] The google directions api.
https://developers.google.com/maps/
documentation/directions/, 2013.
[10] Locate family. http://www.locatefamily.com/,
2013.
[11] Lookup ip address location.
http://whatismyipaddress.com/ip-lookup,
2013.
[12] Online demo.
https://sites.google.com/site/sidedroid/,
2013.
[13] Standard address abbreviations.
http://www.kutztown.edu/admin/adminserv/
mailfile/guide/abbrev.html, 2013.
[14] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan.
Mockdroid: trading privacy for application functionality on
smartphones. In Proceedings of the 12th Workshop on Mobile
Computing Systems and Applications, HotMobile ’11, pages
49–54, New York, NY, USA, 2011. ACM.
[15] H. Berghel. Identity theft, social security numbers, and the
web. Commun. ACM, 43(2):17–21, Feb. 2000.
[16] P. Brodley and leviathan Security Group. Zero Permission
Android Applications. http://leviathansecurity.
com/blog/archives/17-Zero-Permission-
Android-Applications.html. Accessed: 13/02/2013.
[17] L. Cai and H. Chen. Touchlogger: inferring keystrokes on
touch screen from smartphone motion. In Proceedings of the
6th USENIX conference on Hot topics in security, HotSec’11,
pages 9–9, Berkeley, CA, USA, 2011. USENIX Association.
[18] L. Cai and H. Chen. On the practicality of motion based
keystroke inference attack. In Proceedings of the 5th
international conference on Trust and Trustworthy Computing,
TRUST’12, pages 273–290, Berlin, Heidelberg, 2012.
Springer-Verlag.
[19] J. Camenisch, a. shelat, D. Sommer, S. Fischer-Hübner,
M. Hansen, H. Krasemann, G. Lacoste, R. Leenes, and
J. Tseng. Privacy and identity management for everyone. In
Proceedings of the 2005 workshop on Digital identity
management, DIM ’05, pages 20–27, New York, NY, USA,
2005. ACM.
[20] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel
leaks in web applications: A reality today, a challenge
tomorrow. In Security and Privacy (SP), 2010 IEEE
Symposium on, pages 191 –206, may 2010.
[21] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
Quire: Lightweight provenance for smart phone operating
systems. In 20th USENIX Security Symposium, San Francisco,
CA, Aug. 2011.
[22] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. Taintdroid: an information-ﬂow
tracking system for realtime privacy monitoring on
smartphones. In Proceedings of the 9th USENIX conference
on Operating systems design and implementation, OSDI’10,
pages 1–6, Berkeley, CA, USA, 2010. USENIX Association.
[23] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study
of android application security. In Proceedings of the 20th
USENIX conference on Security, SEC’11, pages 21–21,
Berkeley, CA, USA, 2011. USENIX Association.
[24] W. Enck, M. Ongtang, and P. McDaniel. On lightweight
mobile phone application certiﬁcation. In Proceedings of the
16th ACM CCS, CCS ’09, pages 235–245, New York, NY,
USA, 2009. ACM.
[25] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.
Android permissions demystiﬁed. In Proceedings of the 18th
ACM conference on Computer and communications security,
CCS ’11, pages 627–638, New York, NY, USA, 2011. ACM.
[26] T. Govani and H. Pashley. Student awareness of the privacy
implications when using facebook. unpublished paper
presented at the "Privacy Poster Fair" at the Carnegie Mellon
University School of Library and Information Science, 9,
2005.
1027B. PERSONAL INVESTMENT INFERENCE
Knowing your personal investment. A person’s investment infor-
mation is private and highly sensitive. Here we demonstrate how
an adversary can infer her ﬁnancial interest from the network data
usage of Yahoo! Finance, a popular ﬁnance app on Google Play
with nearly one million users. We discover that Yahoo! Finance
discloses a unique network data signature when the user is adding
or clicking on a stock.
Stock search autocomplete. Similar to all aforementioned attacks,
here we consider that a zero-permission app running in the back-
ground collects network data usage related to Yahoo! Finance and
sends it to a remote attacker when the device’s screen dims out.
Searching for a stock in Yahoo! Finance generates a unique network
data signature, which can be attributed to its network-based auto-
complete feature (i.e., suggestion list) that returns suggested stocks
according to the user’s input. Consider for example the case when a
user looks for Google’s stock (GOOG). In response to each letter
she enters, the Yahoo! Finance app continuously updates a list of
possible autocomplete options from the Internet, which is character-
ized by a sequence of unique payload lengths. For example, typing
“G” in the search box produces 281 bytes outgoing and 1361 to 2631
bytes incoming trafﬁc. We found that each time the user enters an
additional character, the outbound HTTP GET packet increases by
one byte. In its HTTP response, a set of stocks related to the letters
the user types will be returned, whose packet size depends on the
user’s input and is unique for each character combination.
Stock news signature. From the dynamics of mobile data usage
produced by the suggestion lists, we can identify a set of candidate
stocks. To narrow it down, we further studied the signature when a
stock code is clicked upon. We found that when this happens, two
types of HTTP GET requests will be generated, one for a chart and
the other for related news. The HTTP response for news has more
salient features, which can be used to build a signature. Whenever
a user clicks on a stock, Yahoo! Finance will refresh the news
associated with that stock, which increases the tcp_rcv count.
This count is then used to compare with the payload sizes of the
HTTP packets for downloading stock news from Yahoo! so as to
identify the stock chosen by the user. Also note that since the size of
the HTTP GET for the news is stable, 352 bytes, our app can always
determine when a news request is sent.
Attack evaluation. In our study, we ran our zero-permission app to
monitor the Yahoo! Finance app on a Nexus S 4G smartphone. From
the data-usage statistics collected while the suggestion list was being
used to add 10 random stocks onto the stock watch list, we managed
to narrow down the candidate list to 85 possible stocks that matched
the data-usage features of these 10 stocks. Further analyzing the
increment sequence when the user clicked on a particular stock
code, which downloaded related news to the phone, we were able to
uniquely identify each of the ten stocks the user selected among the
85 candidates.
[27] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic
detection of capability leaks in stock Android smartphones. In
Proceedings of the 19th Network and Distributed System
Security Symposium (NDSS), Feb. 2012.
[28] J. Han, E. Owusu, T.-L. Nguyen, A. Perrig, and J. Zhang.
Accomplice: Location inference using accelerometers on
smartphones. In Proceedings of the 4th International
Conference on Communication Systems and Networks,
Bangalore, India, 2012.
[29] S. B. Hoar. Identity Theft: The Crime of the New Millennium.
Oregon Law Review, 80:1423–1448, 2001.
[30] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall.
These aren’t the droids you’re looking for: retroﬁtting android
to protect data from imperious applications. In Proceedings of
the 18th ACM CCS, CCS ’11, pages 639–652, New York, NY,
USA, 2011. ACM.
[31] S. Jana and V. Shmatikov. Memento: Learning secrets from
process footprints. In Proceedings of the 2012 IEEE
Symposium on Security and Privacy, SP ’12, pages 143–157,
Washington, DC, USA, 2012. IEEE Computer Society.
[32] E. Owusu, J. Han, S. Das, A. Perrig, and J. Zhang. Accessory:
password inference using accelerometers on smartphones. In
Proceedings of the 12th Workshop on Mobile Computing
Systems Applications, HotMobile ’12, pages 9:1–9:6, New
York, NY, USA, 2012. ACM.
[33] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey,
you, get off of my cloud: exploring information leakage in
third-party compute clouds. In Proceedings of the 16th ACM
CCS, pages 199–212, New York, NY, USA, 2009. ACM.
[34] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia,
and X. Wang. Soundcomber: A stealthy and context-aware
sound trojan for smartphones. In NDSS. The Internet Society,
2011.
[35] D. J. Solove. Identity Theft, Privacy, and the Architecture of
Vulnerability. Hastings Law Journal, 54:1227 – 1276,
2002-2003.
[36] Q. Sun, D. R. Simon, Y.-M. Wang, W. Russell, V. N.
Padmanabhan, and L. Qiu. Statistical identiﬁcation of
encrypted web browsing trafﬁc. In IEEE Symposium on
Security and Privacy. Society Press, 2002.
[37] C. V. Wright, L. Ballard, S. E. Coull, F. Monrose, and G. M.
Masson. Uncovering spoken phrases in encrypted voice over
ip conversations. ACM Trans. Inf. Syst. Secur.,
13(4):35:1–35:30, Dec. 2010.
[38] K. Zhang and X. Wang. Peeping tom in the neighborhood:
keystroke eavesdropping on multi-user systems. analysis,
20:23, 2010.
[39] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-vm
side channels and their use to extract private keys. In
Proceedings of the 2012 ACM conference on Computer and
communications security, CCS ’12, pages 305–316, New
York, NY, USA, 2012. ACM.
APPENDIX
A. USER-AGENT CONSTRUCTION
Many mobile apps use HTTP for data exchange and the trafﬁc
generated during this process always involves a User-Agent ﬁeld.
User-Agent is related to the phone’s type, brand and Android OS
version. For example, the User-Agent of the Yahoo! Finance
app on a Nexus S phone is User-Agent: YahooMobile/1.0
(finance; 1.1.8.1187014079); (Linux; U; Android
4.1.1; sojus Build/JELLY_BEAN);. Given that the format
of this ﬁeld is known, all we need here is a set of parameters
(type, brand, OS version etc.) for building up the ﬁeld, which is
important for estimating the length of the ﬁeld and the payload
that carries the ﬁeld. Such information can be easily obtained by
our app, without any permission, from android.os.Build and
System.getProperty("http agent").
1028