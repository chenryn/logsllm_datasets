### Impact of Rounding on Data Usage Monitoring

When the counter value is rounded to the nearest multiple of 1024 bytes, the exact usage statistics can no longer be determined. The error introduced by this rounding strategy is at most 512 bytes. Given that the total data usage of an app can be several megabytes, this error is relatively small, with an impact on data consumption monitoring apps of less than 0.05%.

### Performance Overhead of Modified APIs and UsageService

We evaluated the delay caused by the modified APIs and the new UsageService on a Galaxy Nexus. This delay, primarily due to permission checking and inter-process communication (IPC), was measured to be, on average, 22.4 milliseconds. This overhead is negligible.

### Limitations of Our Defense Mechanism

We identified several challenges in creating a comprehensive defense against information leaks:

- **Shared Resources:** Shared resources are ubiquitous in the Linux file system, such as `/proc/[pid]/`, `/proc/uid_stat/[uid]`, and network protocols like `/proc/net/arp` or `/proc/net/wireless`. Additionally, some Android OS APIs also expose shared resources.
- **Device Variability:** Public resources differ across devices. For example, third-party drivers may mount the LCD backlight status in different locations within the `/sys` file system, leading to inconsistencies.
- **Application-Specific Traffic:** Traffic usage patterns are specific to each application. To effectively apply the round-up and round-down defense strategy, the operating system must be provided with the traffic patterns of the apps it needs to protect. This allows for the calculation of an appropriate rounding size that both secures the apps from malicious attacks and introduces minimal noise to legitimate traffic monitoring apps. A more systematic study is needed to better understand these requirements.

### Related Work

Information leaks have been a subject of extensive research for decades, with new discoveries continuing to emerge [33, 39, 37]. Among the most relevant to our work is the study of information leaks from `procfs`, which includes using ESP/EIP data to infer keystrokes [38] and leveraging memory usage to fingerprint visited websites [31]. However, the practicality of these attacks on Android is unclear due to the high non-determinism of its memory allocation [31] and the challenges in keystroke analysis [38].

Our work demonstrates that usage statistics under `procfs` can be exploited to infer sensitive information about an Android user. The attack technique used here is related to prior work on traffic analysis [20], but those approaches assume an adversary who sees encrypted packets and cannot be directly applied to smartphones. Our attack model involves an app using public resources to infer the content of data received by another app on the same device, requiring the development of inference techniques based on the unique features of mobile computing, such as social networks, BSSID databases, and Google Maps.

### Systematic Investigation of Public Resources

While information leaks have been discovered on smartphones by both academia and the hacker community [21, 27, 16], most known issues are due to implementation errors in Android or mobile apps. The privacy risks arising from shared resources in the presence of emerging background information have not been extensively studied. Prior research has focused on the privacy implications of motion sensors or microphones [34, 17, 32, 18, 28]. Our work provides a systematic investigation into what can be inferred from the public resources exposed by both Linux and Android layers.

### New Privacy Protection Techniques

New techniques for protecting user privacy on Android continue to be developed [22, 23, 27, 30, 14, 24, 21]. Unlike these, our work focuses on the new privacy risks emerging from the rapid evolution of smartphone apps, which can turn innocuous public resources into sources of sensitive user information.

### Conclusion

In this paper, we report on our study of information leaks from Android public resources. Our findings show that highly sensitive data, such as a user's identity, medical conditions, geolocation, and driving routes, can be reliably inferred from these resources by analyzing popular apps. This calls into question the design assumptions made by Android developers regarding public resources and demands new efforts to address these privacy risks. We also present a preliminary design for mitigating threats to selected public resources while maintaining their utility.

### Acknowledgments

The authors at Indiana University are supported in part by the National Science Foundation (CNS-1017782 and CNS-1117106) and the Office of the National Coordinator for Health Information Technology at the Department of Health and Human Services (HHS-90TR0003/01). The views expressed in this paper are solely those of the authors.

### References

[References remain unchanged]

### Appendix: User-Agent Construction

Many mobile apps use HTTP for data exchange, and the traffic generated during this process always includes a User-Agent field. The User-Agent is related to the phoneâ€™s type, brand, and Android OS version. For example, the User-Agent for the Yahoo! Finance app on a Nexus S phone is:
```
User-Agent: YahooMobile/1.0 (finance; 1.1.8.1187014079); (Linux; U; Android 4.1.1; sojus Build/JELLY_BEAN);
```
Given the known format of this field, all that is needed is a set of parameters (type, brand, OS version, etc.) to construct the field. This information can be easily obtained by our app without any special permissions, using `android.os.Build` and `System.getProperty("http.agent")`.

---

This optimized text is more structured, clear, and professional, making it easier to read and understand.