highlight different “design for review” techniques enabled
by Joe-E. The Waterken server comprises about 13K SLOC
of Joe-E code and 4K SLOC of Java (excluding blank lines
and comments).
7.1.1 Consistent Persistence
Processing of an event by a vat should be like processing of
a transaction by a database: either the vat is transitioned to a
new consistent state, or reverted to its state prior to process-
ing. Put another way, either all mutations that occur during
handling of an event must be persisted, or none of them
must be. This consistency is crucial for preserving the se-
curity of Joe-E applications hosted on Waterken. For exam-
ple, in the currency example from Fig. 3, if some mutations
were not persisted, a malicious client could generate money
from nothing by invoking the takeFrom() method during
processing of an event that did not persist changes to the
source Purse. Waterken’s persistence engine is designed
to prevent such violations of consistency. After an event is
processed, the persistence engine traverses the graph of all
objects that were accessible during processing. Any mod-
iﬁed objects are written to persistent storage. If the mod-
iﬁcations can not all be committed, an exception is raised
and processing of a subsequent event begins by reloading
the vat’s state from its prior persistent state.
The correctness of the persistence engine depends upon
its ability to ﬁnd all modiﬁcations made during processing
of an event. This goal is met by requiring Waterken applica-
tions to be written in Joe-E. As a result, application code is
restricted as follows: static variables cannot be mutated
or refer to mutable objects; Java APIs that provide access
to external resources, such as java.io.File constructors,
are not accessible, and thus cannot be used to cause unmon-
itored side effects; and application code is not able to break
the encapsulation of objects that implement the persistence
engine. These restrictions make it easier to review the per-
sistence engine.
The correctness of the persistence engine also depends
upon certain restrictions upon the code that invokes it. The
persistent state of each vat is encapsulated in an object of
type Database. An event, or transaction, is an invocation
of the Database’s enter() method, which takes an argu-
ment of type Transaction. The enter() method provides
the Transaction object access to the vat’s objects and re-
turns an object of the Transaction’s choosing. A faulty
Transaction object could violate consistency by storing a
reference to a vat object and modifying it after completion
of the enter() invocation, or during a subsequent invoca-
tion. The persistence engine would then fail to detect the
modiﬁcation since it didn’t expect the late modiﬁcation, or
didn’t know that a subsequent event had access to the ob-
ject. A reference to a vat object could similarly escape if
used as the return value from a transaction. We use Joe-E to
prevent the escape of mutable vat objects by declaring both
the Transaction type and the return type of enter() to
implement Joe-E’s Immutable marker interface. The Joe-
E veriﬁer can thus be used to ensure that clients of the per-
sistence engine do not have these faults. All clients of the
persistence engine in the Waterken software pass the Joe-E
veriﬁer.
In defensive programming, an object implementation
normally has sole responsibility for maintaining its invari-
ants. The object’s clients are assumed to be buggy or even
malicious. In the above example, Joe-E’s Immutable inter-
face is used to relax this constraint, enabling the Database
object to depend upon particular client behavior that the
Joe-E veriﬁer automatically enforces. Through clever use
of a Joe-E-veriﬁed property, a design which previously re-
quired review of all client code can instead be made defen-
sively consistent, so that we don’t need to review the client
code.
7.1.2 Cache Coherence
Exported references are accessed remotely using HTTP.
An HTTP GET request results in an invocation of a get-
ter method on an object in some vat. The request response
contains a representation of the return value from the getter
method. To support caching, the Waterken server includes
an ETag header in the response. The value of the ETag
header is a secure hash of the current application code and
all vat state accessed during invocation of the getter method.
All GET requests are processed in a Waterken transactional
event that aborts if any modiﬁcations are made, ensuring
that there are no side effects and that the request can be
served from cache.
Cache coherence is crucial to application correctness for
the same reasons as persistence consistency: either may
break code or invalidate security reasoning due to the use
of partially stale state. For caching of Waterken server re-
sponses to be coherent, the ETag value must fully identify
the response text: two responses with the same ETag must
yield the same text. For performance reasons, it is best to
avoid generating the response text at all when there is a
valid cached version. Consequently, the ETag is not simply
a hash of the response text. Instead, the Waterken server
leverages Joe-E’s support for determinism [4] and so uses
the hash of the inputs to the response text generator. Since
Joe-E prevents application code from accessing sources of
non-determinism, the Waterken server can track all state ac-
cessed by the application and thus ensure that any return
value is identical to that produced if the same state is used
again.
The ability to track all mutable state, together with the
prohibition against reading sources of non-determinism,
makes any Joe-E computation cacheable and ensures that
caches can be made coherent. In the absence of such a sys-
tematic approach, caching is often implemented in an ad-
hoc fashion speciﬁc to a given request. For example, any
use of HTTP caching in a standard Java servlet environment
requires careful code review for potential cache coherence
issues. The difﬁculty of performing this analysis sometimes
results in disabling of caching. Joe-E enables the Waterken
server to reliably ensure cache coherency, allowing caching
to be enabled for every application.
8 Related Work
Capabilities have a long history as an approach for secur-
ing systems [8]. Early multi-user capability systems were
based upon hardware support for capabilities, where each
capability indicated a resource and a set of access rights.
These systems were sometimes criticized for the perfor-
mance overhead imposed by the special hardware, and for
the extra complexity of managing capabilities separately.
Joe-E minimizes performance overhead by performing se-
curity checks at compile time as part of static veriﬁcation,
rather than at runtime. In Joe-E, references used to desig-
nate resources also carry the authorization to access those
resources, eliminating the need to separately manage privi-
leges.
While hardware support for capabilities is no longer
commercially available, capability-based operating systems
are still found in research and some commercially-available
high-assurance systems, including the GNOSIS kernel from
TymShare, KeyKOS [6], EROS [18], and derivatives. We
share the view of capabilities as programmatically invok-
able references, but integrate them into the language.
There has been a great deal of work on object-capability
languages. As far back as 1973, Morris described how a
programming language can provide protection features that
enable composition of code from multiple sources and sup-
port local reasoning about security [13]. W7 implemented
these features in a Scheme environment and provided an
early example of language support for capabilities [17].
Joe-E was heavily inﬂuenced and inspired by E, a semi-
nal object-capability language [11]; Joe-E brings many of
the novel security features of E to a modern language (Java)
that might be more familiar to programmers, and shows how
a static type system can support these security goals. We
have also drawn on work in the E language community on
recognizing and deﬁning the object-capability approach and
identifying patterns for secure programming. Our work is
closely related to Oz-E [19], an object-capability variant of
Oz, and Emily [20], an object-capability subset of OCaml
concurrently developed with Joe-E that follows similar de-
sign principles.
Object-capability principles have also been applied to
the web. The Caja project [12] provides a way to incor-
porate untrusted content into a web page, introducing an
object-capability subset of Javascript called Cajita as well
as support for legacy Javascript code by translating it to Ca-
jita. ADsafe [2] is a more restrictive object-capability sub-
set of JavaScript, designed to support advertisements whose
security can be checked without requiring code rewriting.
Emily, Cajita, ADsafe, and Joe-E can all be considered
examples of semantically-enhanced library languages [21]:
they subset a base language, then augment its functionality
by adding libraries.
The Java language incorporates mechanisms for access
control and protection, based on the security manager,
which is invoked when sensitive operations are performed.
It can make use of stack inspection and code source infor-
mation to determine whether to allow such operations [5].
This mechanism provides central enforcement of a security
policy, which is usually speciﬁed centrally and separately
from the code to which it applies. In contrast, Joe-E en-
forces security polices implemented by the program itself in
the form of capability delegation and reference monitors de-
ﬁned by encapsulating objects. This provides an expressive
mechanism for supporting a wide variety of policies, includ-
ing ﬁne-grained and dynamic policies that may be difﬁcult
to enforce in Java.
It also allows modularity and separa-
tion of concerns for policy enforcement, because each part
of the security policy can be enforced at the point in the
code where it is relevant. We expect Java’s mechanisms to
be better-suited to enforcing security on legacy code, but
for new code, Joe-E may help enforce and verify richer,
domain-speciﬁc security properties.
Scala [15] is an object-oriented language that compiles
to Java bytecode and provides interoperability with Java. It
offers better support for functional programming, support-
ing immutable data structures and event-based Actor con-
currency. While we ﬁnd some of the spirit of Scala in line
with the patterns for effective Joe-E programming, it does
not provide security properties comparable to Joe-E. Scala
syntactically prohibits static ﬁelds and methods, replacing
them with instance ﬁelds on singleton classes. While syn-
tactically cleaner, this approach can still provide capabilities
in the global scope.
Another way to enforce application-speciﬁc security
properties is by restricting information ﬂow between des-
ignated security principals or labels. The Asbestos [3]
and HiStar [23] operating systems enforce information-ﬂow
policies at a per-process granularity. Jif [14] implements
information ﬂow restrictions at a ﬁner granularity, enabling
each variable to receive its own label and providing a way to
check many of these restrictions statically at compile time.
Like Joe-E, Jif is based upon Java, leveraging programmer
familiarity with Java.
Information ﬂow techniques seem
most suitable when the security policy is concerned with
the ﬂow of data throughout the system; in contrast, capa-
bility languages seem most relevant when we are primarily
concerned with controlling the side effects that a system can
have.
Privilege separation is the process of breaking a legacy
application into two or more components that can execute
at different levels of operating system privilege. A proto-
typical architecture involves a trusted, high-privilege mas-
ter process that does most of its work via less-privileged
slaves [16]. The privman library [7] factors out much of
the logic of implementing a privilege-separated program.
The Wedge toolkit [1] aims to facilitate the process of
privilege separating legacy software by creating appropri-
ate primitives and providing a runtime proﬁling tool that
identiﬁes the resources used by the components to be sep-
arated. We share the goal of architecting systems for se-
curity. However, operating system approaches seem best-
suited to coarse-grained protection domains; Joe-E provides
language support for separating an architecture into many
ﬁne-grained protection domains.
In previous work we examined how to verify that meth-
ods are functionally pure (deterministic and side-effect-
free), and argued that purity has useful applications in com-
puter security [4]. That work described how, given an
object-capability language, one can extend it to obtain a
deterministic object-capability language; it described how
deterministic object-capability languages support veriﬁca-
tion of functional purity; and it discussed the application
of those techniques to Joe-E. In contrast,
this paper is
concerned with how to design a practically useful object-
capability language in the ﬁrst place, rather than how to
support determinism and veriﬁable purity.
9 Conclusions
Object capabilities are a promising approach to build-
ing software systems that provide reliable security proper-
ties and are easier to audit and safely extend. In this work,
we have shown that the advantages of object-capability sys-
tems can be achieved with moderate changes to a popular
type-safe object-oriented language. Deﬁning a subset al-
lows one to reason about sophisticated security properties
of a program in a familiar language, obtaining the beneﬁt
of stronger guarantees about what a program is able to do
while leveraging existing tools and programmer expertise.
We anticipate that these techniques will be useful for devel-
oping security-critical and other software, as the industry
moves beyond ad-hoc responses to speciﬁc attacks toward
the construction of veriﬁably robust, trustworthy software.
Acknowledgements
Mark Miller and Marc Stiegler made major contributions
to the early design of Joe-E, and we gratefully acknowl-
edge their sage guidance and advice. We thank Devdatta
Akhawe, Arel Cordero, Matthew Finifter, and the anony-
mous reviewers for their helpful comments on earlier ver-
sions of this paper.
This material is based upon work supported by the
National Science Foundation under grants CNS-0716715,
CCF-0424422, and CCF-0430585. Any opinions, ﬁndings,
and conclusions or recommendations expressed in this ma-
terial are those of the author(s) and do not necessarily reﬂect
the views of the National Science Foundation.
References
[1] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge:
splitting applications into reduced-privilege compartments.
In 5th USENIX Symposium on Networked Systems Design
and Implementation (NSDI’08), pages 309–322, 2008.
[2] D. Crockford. ADsafe. http://www.adsafe.org.
[3] P. Efstathopoulos, M. Krohn, S. Vandebogart, C. Frey,
D. Ziegler, E. Kohler, D. Mazi`eres, F. Kaashoek, and
R. Morris. Labels and event processes in the Asbestos oper-
ating system. In 20th ACM Symposium on Operating System
Principles (SOSP’05), pages 17–30, 2005.
[4] M. Finifter, A. Mettler, N. Sastry, and D. Wagner. Veriﬁ-
able functional purity in Java. In 15th ACM Conference on
Computer and Communications Security (CCS’08), pages
161–174, 2008.
[5] L. Gong, M. Mueller, and H. Prafullch. Going beyond the
sandbox: An overview of the new security architecture in
In USENIX Symposium on
the Java development kit 1.2.
Internet Technologies and Systems, pages 103–112, 1997.
[6] N. Hardy. KeyKOS architecture. SIGOPS Operating Sys-
tems Review, 19(4):8–25, 1985.
[7] D. Kilpatrick. Privman: A library for partitioning applica-
tions. In USENIX Annual Technical Conference, FREENIX
Track, pages 273–284, 2003.
[8] H. M. Levy. Capability-based computer systems. Digital
Press, Maynard, MA, USA, 1984.
[9] T. Lindholm and F. Yellin. Java(TM) Virtual Machine Spec-
iﬁcation, The (2nd Edition). Prentice Hall PTR, April 1999.
[10] A. Mettler and D. Wagner. The Joe-E language speciﬁca-
tion, version 1.1, September 18, 2009. http://www.cs.
berkeley.edu/~daw/joe-e/spec-20090918.pdf.
[11] M. S. Miller. Robust Composition: Towards a Uniﬁed Ap-
proach to Access Control and Concurrency Control. PhD
thesis, Johns Hopkins University, Baltimore, Maryland,
USA, May 2006.
[12] M. S. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay.
Caja: Safe active content in sanitized JavaScript (draft),
2008. http://google-caja.googlecode.com/files/
caja-spec-2008-06-07.pdf.
[13] J. H. Morris, Jr. Protection in programming languages. Com-
mun. ACM, 16(1):15–21, 1973.
[14] A. C. Myers and B. Liskov. A decentralized model for in-
formation ﬂow control. In Symposium on Operating Systems
Principles, pages 129–142, 1997.
[15] M. Odersky. The Scala programming language. http://
www.scala-lang.org.
[16] N. Provos. Preventing privilege escalation. In Proceedings
of the 12th USENIX Security Symposium, pages 231–242,
2003.
[17] J. A. Rees. A security kernel based on the lambda-calculus.
MIT A.I. Memo 1564, 1996.
[18] J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS: a fast
capability system. In 17th ACM Symposium on Operating
Systems Principles (SOSP’99), pages 170–185, 1999.
[19] F. Spiessens and P. V. Roy. The Oz-E project: Design guide-
lines for a secure multiparadigm programming language.
In Multiparadigm Programming in Mozart/Oz: Extended
Proceedings of the Second International Conference (MOZ
2004), pages 21–40. Springer-Verlag, 2005.
[20] M. Steigler and M. Miller. How Emily Tamed the Caml.
Technical Report HPL-2006-116, HP Laboratories, August
11, 2006.
[21] B. Stroustrup. A rationale for semantically enhanced library
languages. In Proceedings of the First International Work-
shop on Library-Centric Software Design (LCSD 05), pages
44–52, 2005.
[22] D. Wagner and D. Tribble. A security analysis of the
Combex DarpaBrowser architecture, March 4, 2002.
http://www.combex.com/papers/darpa-review/
security-review.pdf.
[23] N. Zeldovich,
D. Mazi`eres.
HiStar.
Design and Implementation (OSDI’06), 2006.
and
in
In 7th USENIX Symposium on Operating Systems
S. Boyd-Wickizer, E. Kohler,
Making information ﬂow explicit