**作者：dawu &0x7F@知道创宇404区块链安全研究团队**  
**时间：2018/06/26**
### 0x00 前言
在学习区块链相关知识的过程中，拜读过一篇很好的文章[《The phenomenon of smart contract
honeypots》](https://medium.com/@gerhard.wagner/the-phenomena-of-smart-contract-honeypots-755c1f943f7b)，作者详细分析了他遇到的三种蜜罐智能合约，并将相关智能合约整理收集到Github项目[smart-contract-honeypots](https://github.com/thec00n/smart-contract-honeypots)。
本文将对文中和评论中提到的 [smart-contract-honeypots](https://github.com/thec00n/smart-contract-honeypots) 和 [Solidlity-Vulnerable](https://github.com/misterch0c/Solidlity-Vulnerable)
项目中的各蜜罐智能合约进行分析，根据分析结果将蜜罐智能合约的欺骗手段分为以下四个方面：
  * 古老的欺骗手段
  * 神奇的逻辑漏洞
  * 新颖的赌博游戏
  * 黑客的漏洞利用
基于已知的欺骗手段，我们通过内部的以太坊智能合约审计系统一共寻找到 `118` 个蜜罐智能合约地址，一共骗取了 `34.7152916`
个以太币（`2018/06/26` 价值 `102946` 元人民币），详情请移步文末附录部分。
### 0x01 古老的欺骗手段
> 对于该类蜜罐合约来说，仅仅使用最原始的欺骗手法。  
>  这种手法是拙劣的，但也有着一定的诱导性。
#### 1.1 超长空格的欺骗：WhaleGiveaway1
  * Github地址：[smart-contract-honeypots/WhaleGiveaway1.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/WhaleGiveaway1.sol)
  * 智能合约地址：[0x7a4349a749e59a5736efb7826ee3496a2dfd5489](https://etherscan.io/address/0x7a4349a749e59a5736efb7826ee3496a2dfd5489#code)
在 `github` 上看到的合约代码如下：
细读代码会发现 `GetFreebie()` 的条件很容易被满足:
    if(msg.value>1 ether)
    {
        msg.sender.transfer(this.balance);
    }
只要转账金额大于 `1 ether`，就可以取走该智能合约里所有的以太币。
但事实绝非如此，让我们做出错误判断的原因在于 `github` 在显示超长行时不会自动换行。下图是设置了自动换行的本地编辑器截图：
图中第 `21` 行和第 `29` 行就是蜜罐作者通过 `超长空格` 隐藏起来的代码。所以实际的 `脆弱点` 是这样的：
    if(msg.value>1 ether)
    { 
        Owner.transfer(this.balance);
        msg.sender.transfer(this.balance);
    }       
先将账户余额转给合约的创立者，然后再将剩余的账户余额（也就是0）转给转账的用户（受害者）
与之类似的智能合约还有 `TestToken`，留待有兴趣的读者继续分析：
  * Github地址：[smart-contract-honeypots/TestToken.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/TestToken.sol)
### 0x02 神奇的逻辑漏洞
> 该类蜜罐合约用 2012年春晚小品《天网恢恢》中这么一段来表现最为合适：
>
> 送餐员： 外卖一共30元  
>  骗子B： 没零的，100！  
>  送餐员： 行，我找你......70!（送餐员掏出70给骗子B）  
>  骗子A： 哎，等会儿等会儿，我这有零的，30是吧，把那100给我吧！给，30！（骗子A拿走了B给送餐员的100元，又给了送餐员30元）  
>  送餐员： 30元正好，再见!
>
> 该类漏洞也是如此，在看起来正常的逻辑下，总藏着这样那样的陷阱。
#### 2.1 天上掉下的馅饼：Gift_1_ETH
  * Github地址：[smart-contract-honeypots/Gift_1_ETH.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/Gift_1_ETH.sol)
  * 智能合约地址：[0xd8993F49F372BB014fB088eaBec95cfDC795CBF6](https://etherscan.io/address/0xd8993f49f372bb014fb088eabec95cfdc795cbf6)
  * 合约关键代码如下：
    contract Gift_1_ETH
    {
        bool passHasBeenSet = false;
        bytes32 public hashPass;
        function SetPass(bytes32 hash)
        payable
        {
            if(!passHasBeenSet&&(msg.value >= 1 ether))
            {
                hashPass = hash;
            }
        }
        function GetGift(bytes pass) returns (bytes32)
        {
            if( hashPass == sha3(pass))
            {
                msg.sender.transfer(this.balance);
            }
            return sha3(pass);
        }
        function PassHasBeenSet(bytes32 hash)
        {
            if(hash==hashPass)
            {
               passHasBeenSet=true;
            }
        }
    }
整个智能合约的逻辑很简单，三个关键函数功能如下：
  * `SetPass()`: 在转账大于 `1 ether` 并且 `passHasBeenSet` 为 `false` (默认值就是`false`),就可以设置密码 `hashPass`。
  * `GetGift()`: 在输入的密码加密后与 `hashPass` 相等的情况下，就可以取走合约里所有的以太币。
  * `PassHasBeenSet()`：如果输入的 `hash` 与 `hashPass` 相等，则 `passHasBeenSet` 将会被设置成 `true`。
如果我们想取走合约里所有的以太币，只需要按照如下流程进行操作：
推特用户 [`Alexey Pertsev`](https://twitter.com/_p4lex/status/976358776516292608)
还为此写了一个获取礼物的
[`EXP`](https://gist.github.com/pertsev/0a1e1db9b000481d20358bc382201206)。
但实际场景中，受害者转入一个以太币后并没有获取到整个智能合约的余额，这是为什么呢？
这是因为在合约创立之后，任何人都可以对合约进行操作，包括合约的创建者：
合约创建者在合约 `被攻击` 前，设置一个只有创建者知道的密码并将 `passHasBeenSet` 置为
`True`，将只有合约创建者可以取出智能合约中的以太币。
与之类似的智能合约还有 `NEW_YEARS_GIFT`：
  * Github地址：[Solidlity-Vulnerable/honeypots/NEW_YEARS_GIFT.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/NEW_YEARS_GIFT.sol)
  * 智能合约地址：[0x13c547Ff0888A0A876E6F1304eaeFE9E6E06FC4B](https://etherscan.io/address/0x13c547Ff0888A0A876E6F1304eaeFE9E6E06FC4B)
#### 2.2 合约永远比你有钱：MultiplicatorX3
  * Github地址：[smart-contract-honeypots/MultiplicatorX3.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/MultiplicatorX3.sol) [smart-contract-honeypots/Multiplicator.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/Multiplicator.sol)
  * 智能合约地址：[0x5aA88d2901C68fdA244f1D0584400368d2C8e739](https://etherscan.io/address/0x5aA88d2901C68fdA244f1D0584400368d2C8e739#code)
  * 合约关键代码如下： 
    function multiplicate(address adr)
        public
        payable
        {
            if(msg.value>=this.balance)
            {        
                adr.transfer(this.balance+msg.value);
            }
        }
对于 `multiplicate()` 而言，只要你转账的金额大于账户余额，就可以把 `账户余额` 和 `你本次转账的金额` 都转给一个可控的地址。
在这里我们需要知道：在调用 `multiplicate()` 时，账户余额 = 之前的账户余额 + 本次转账的金额。所以 `msg.value >=
this.balance` 只有在原余额为0，转账数量为0的时候才会成立。也就意味着，账户余额永远不会比转账金额小。
与之类似的智能合约还有 `PINCODE`：
  * Github地址：[Solidlity-Vulnerable/honeypots/PINCODE.sol](https://github.com/misterch0c/Solidlity-Vulnerable/blob/master/honeypots/PINCODE.sol)
  * 智能合约地址：[0x35c3034556b81132e682db2f879e6f30721b847c](https://etherscan.io/address/0x35c3034556b81132e682db2f879e6f30721b847c#code)
#### 2.3 谁是合约主人：TestBank
  * Github地址：[smart-contract-honeypots/TestBank.sol](https://github.com/thec00n/smart-contract-honeypots/blob/master/TestBank.sol)
  * 智能合约地址：[0x70C01853e4430cae353c9a7AE232a6a95f6CaFd9](https://etherscan.io/address/0x70C01853e4430cae353c9a7AE232a6a95f6CaFd9#code)
  * 合约关键代码如下: 
     contract Owned {
         address public owner;
         function Owned() { owner = msg.sender; }
         modifier onlyOwner{ if (msg.sender != owner) revert(); _; }
     }
     contract TestBank is Owned {
         address public owner = msg.sender;
         uint256 ecode;
         uint256 evalue;
         function useEmergencyCode(uint256 code) public payable {
             if ((code == ecode) && (msg.value == evalue)) owner = msg.sender;
         }
         function withdraw(uint amount) public onlyOwner {
             require(amount  该部分引用自参考链接5  
>  重点：Solidity的继承原理是代码拷贝，因此换句话说，继承的写法总是能够写成一个单独的合约。  
>  情况五：子类父类有相同名字的变量。
> 父类A的test1操纵父类中的variable，子类B中的test2操纵子类中的variable，父类中的test2因为没被调用所以不存在。
> 解释：对EVM来说，每个storage variable都会有一个唯一标识的slot
> id。在下面的例子说，虽然都叫做variable，但是从bytecode角度来看，他们是由不同的slot id来确定的，因此也和变量叫什么没有关系。
    contract A{  
        uint variable = 0;  
        function test1(uint a)  returns(uint){  
           variable++;  
           return variable;  
        }  
       function test2(uint a)  returns(uint){  
           variable += a;  
           return variable;  
        }  
    }  
    contract B is A{  
        uint variable = 0;  
        function test2(uint a) returns(uint){  
            variable++;  
            return variable;  
        }  
    }  
    ====================  
    contract B{  
        uint variable1 = 0;  