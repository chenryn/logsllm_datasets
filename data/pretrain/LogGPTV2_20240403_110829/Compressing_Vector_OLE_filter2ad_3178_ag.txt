evaluation in 2.1 milliseconds. The evaluation of the base OTs for an AES evaluation
requires about 20 milliseconds. OT extension beyond the base OTs can be done at much
higher rate, 500, 000 per second in [NNOB12].
The amortized communication complexity reported in [WRK17] for securely computing
an AES circuit in the malicious model is 2.62 Mbytes. In the semi-honest model, assuming
an AES circuit of 6800 AND gates [WRK17] and using the free-XOR [KS08] and half-
gate [ZRE15] optimizations, the garbled circuit is of size 6800 · 2 · 16 = 217.6 Kbytes.
Assuming that the amortized cost of an AES evaluation for our likely range of parame-
ters, i.e. several hundred AES evaluations, is about 7 milliseconds in the malicious setting
implies that the total execution time of the protocol (without OT) is about 28(ν + µ)
milliseconds in the malicious setting and 8.4(ν + µ) milliseconds in the semi-honest setting.
For example, if n = 220 and |F| ≤ 2128 then ν = 20, µ = 1 and by Table 2 the number
of times that DPF.Gen is executed in the dual generator is t = 30. Therefore, the running
time in the malicious setting is estimated to be 30· 588 ms for computing AES circuits and
20 + 30(21 + 127)/500000 ms for the OTs, which together give roughly 18 seconds. The
running time in the semi-honest setting is roughly 5 seconds. The total communication in
the malicious setting is about 78.6 Mbytes and the total communication in the semi-honest
setting is 6.5 Mbytes.5
5 The OTs add only marginally to this number, see calculation in the next section.
These numbers can be further improved using an MPC-friendly PRG with few AND
gates instead of AES; e.g., using LowMC [ARS+15] would give approximately a 23-time
improvement for communication and computation of the setup.
Compressing Vector OLE
25
Black-Box Approach. The most expensive part of using generic 2PC to distribute
DPF.Gen is the multiple evaluations of AES. An alternative approach which treats the
PRG as a black box was oﬀered by Doerner and shelat in [DS17]. The method works only
in the semi-honest model, but in that model it is quite competitive with the generic 2PC
approach for concrete parameter ranges of interest.
The idea is to compute the seed by a communication round for each level of the tree
described by DPF.FullEval. In each such level, if both parties expand all the strings in the
level then the only diﬀerence between the expanded strings is the result of the two expanded
seeds along the path to the designated point. That diﬀerence is exactly maintained if each
party XORs all the left children into one 128-bit string and all the right children into
another 128-bit string. Computing the correction cwi for the i-th level is possible using
two OTs of 129-bit strings. In our case, where one party knows the location of the special
path (as opposed to secret shares of the path bits, as in [DS17]), this can be further
simpliﬁed to just one string OT per level.
The total computation time of this protocol to distribute DPF.Gen is dominated by
(ν + 1) string OTs for 129-bit strings and 2ν+1 locally computed AES operations. The
communication is dominated by the (ν + 1) string OTs. Using the RSD assumption with
output n(cid:48) and noise t/n(cid:48) (where n(cid:48) = c · n; we choose as before c = 4 in our estimations),
the seed which the distributed Gen algorithm outputs is exactly t seeds of DPF.Gen with
output length n(cid:48)/t. Therefore, the running time and communication of the protocol are
dominated by t(νt + 1) OTs for νt = min{(cid:100)log n(cid:48)/t − log
log |F|(cid:101), log n(cid:48)/t} and t2νt+1 local
AES operations.
For the example of output size n = 220 and ﬁeld size |F| ≤ 2128 we get for the dual
generator that t = 30 and νt = 17. Therefore, the distributed generation protocol requires
18 · 30 = 540 OTs and 2.23 million AES operations.
λ
Using the previous estimate of 2607 MBPS for AES on a standard PC we get that the
computation requires about 13 ms for the AES operations and about 20 ms for the OTs
or 23 ms together. The communication for each of the base OTs can be as low as 4 · 256
bits using the Naor-Pinkas OT [NP01] and for the rest of the OTs λ + 2m for a security
parameter λ and string length m, which can be reduced to λ + m since we only require
correlated OTs [ALSZ13]. Since in our case λ = 128 and m = 129 the communication
complexity of this protocol is 27 Kbytes.
6 Applications
As discussed in the Introduction, VOLE generators can be used as a general-purpose tool
in any application that beneﬁts from large VOLE instances. We discuss several such appli-
cations below.
6.1 Secure Arithmetic Computation
There are numerous applications of secure computation that beneﬁt from representing
the function being computed as an arithmetic circuit. See, e.g., [IPS09, MZ17, ADI+17,
DGN+17, JVC18] and reference therein. Many of these applications involve multiplying a
secret scalar by a secret vector, where the two inputs can either be held by a single party of
26
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
secret-shared by the two parties. Such scalar-vector multiplication is a useful building block
for more complex protocols that involve matrix-vector or matrix-matrix multiplication.
More concretely, suppose that a scalar x ∈ F and vector u ∈ Fn are additively shared
between P0 and P1. Let x0, x1 and u0, u1 denote the shares. Then, an additive sharing of
x·u can be obtained via two invocations of VOLE, by breaking the product (x0+x1)(u0+u1)
into four terms and using the two VOLE instances to obtain additive shares of the cross-
terms x0 · u1 and x1 · u0 (the other two terms can be computed locally). Other than being
directly useful for secure linear algebra, this sub-protocol can be used to speed up protocols
for arithmetic circuits that have a large multiplication fan-out.
Vector OLE from Pseudorandom VOLE Generator. We now describe and analyze
the standard method for converting random VOLE into standard VOLE (cf. [IPS09]), and
prove its security when using the output of the VOLE generator to produce a random VOLE.
This justiﬁes the security notion of VOLE generators we put forward in Deﬁnition 5.
We start by recalling the standard protocol for implementing VOLE from an ideal
random VOLE correlation.
Preprocessing. A trusted dealer picks (ru, rv, rx)
R← Fn × Fn × F, sets rw ← rurx + rv,
and outputs (ru, rv) to P0 and (rw, rx) to P1.
Input. P0 has input (u, v), and P1 has input x.
Protocol. P1 sends mx ← x − rx. P0 sends mu ← u − ru and mv ← mxru + v − rv. P1
outputs w ← mux + mv + rw.
Correctness: w = mux+mv +rw = (u−ru)x+(x−rx)ru+v−rv +rurx+rv = ux+v.
Security is straightforward.
We now consider a modiﬁcation of the above protocol that replaces the ideal random
VOLE correlation by the output of the VOLE generator:
R←
Preprocessing. A trusted dealer picks rx
Oﬄine Expansion. P0 computes (ru, rv) ← Expand(0, seed0) and P1 computes rw ←
Setup(1λ, F, n, rx), and outputs seed0 to P0 and (rx, seed1) to P1.
R← F, proceeds to compute (seed0, seed1)
Expand(1, seed1).
Input. P0 has input (u, v), and P1 has input x.
Protocol ΠVOLE. P1 sends mx ← x−rx. P0 sends mu ← u−ru and mv ← mxru+v−rv.
P1 outputs w ← mux + mv + rw.
Correctness follows from the correctness of the VOLE generator and the same analysis
as before.
Proposition 10. Assuming (Setup, Expand) is a secure VOLE generator (as in Deﬁni-
tion 5), the protocol ΠVOLE is a secure vector-OLE protocol in the preprocessing model.
Case 1: P0 is corrupted. In the preprocessing phase, Sim picks a random rx
Proof. We exhibit a simulator Sim that generates a view indistinguishable from an honest
run of the protocol as long as a single party is corrupted.
R← F, com-
R← Setup(1λ, F, n, rx), and outputs seed0 to P0. In the online phase, Sim
putes (seed0, seed1)
R←F. Observe that the view of P0 in this simulated protocol is perfectly equivalent
sends mx
to an honest run of the protocol where P1 would pick a uniformly random r(cid:48)
x and send
mx ← x − r(cid:48)
x instead of computing mx ← x − rx using the random rx received from the
trusted dealer. This implies that distinguishing the simulated protocol from the real one
is equivalent to distinguishing a run of the protocol with the random rx picked by the
Compressing Vector OLE
27
Case 2: P1 is corrupted. In the preprocessing phase, Sim picks a random rx
dealer from a run of the protocol with a fresh random r(cid:48)
x. Therefore, the indistinguisha-
bility between the simulated protocol and the real protocol follows immediately from the
ﬁrst security requirement of the VOLE generator.
R← F,
R← Setup(1λ, F, n, rx), and outputs (rx, seed1) to P1. In the on-
computes (seed0, seed1)
line phase, Sim receives mx from P1, and the target output w of P1. Sim computes
R← Fn
rw ← Expand(1, seed1), and sets mw ← w − rw and x ← mx + rx. Sim picks mu
and set mv ← mw − mvx. Sim sends (mu, mv) to P1. The indistinguishability between
the simulated protocol and the real protocol follows immediately from the second security
requirement of the VOLE generator.
Malicious Security. An attractive feature of ΠVOLE is that as long as the preprocessing
is trusted then ΠVOLE is secure against a malicious adversary. The reason is that if one
of the players is corrupt then any deviation it makes from the protocol can be simulated
by a corresponding change of input in the ideal model. This eﬀectively means that our
VOLE generator can be used as a plug-and-play alternative to ideal VOLE, as long as the
setup implementation is secure (e.g., it is distributed between the parties using maliciously
secure two-party computation).
In more detail, if P1 is corrupted then since the only message it sends in the protocol
is mx = x − rx its only possible deviation is to change that message to some m(cid:48)
x. The
trusted setup outputs rx and therefore an honest player would send the message m(cid:48)
x on
x + rx and output w(cid:48) = ux(cid:48) + v. As a consequence the simulator for P1 with
input x(cid:48) = m(cid:48)
input x(cid:48) in the semi-honest setting simulates the malicious adversary with input x, which
proves that in this case the protocol is secure in the malicious setting.
u and m(cid:48)
v that are diﬀerent
from the real vectors. An honest player would send m(cid:48)
u + ru and m(cid:48)
v− ← mxru + rv and the output would be w(cid:48) = u(cid:48)x + v(cid:48). Again there
on input v(cid:48) = m(cid:48)
exists a simulator for a malicious adversary since a simulator exists in the semi-honest case
with inputs u(cid:48) and v(cid:48).
If P0 is corrupted then it can only output two messages m(cid:48)
u on input u(cid:48) = m(cid:48)
v
Rate-1/2 VOLE protocol in the plain model. By distributing the setup of our (primal
or dual) VOLE generators using general-purpose protocols for secure two-party computa-
tion, we get VOLE protocols in the plain model with attractive eﬃciency features. The
protocols can be implemented in a constant number of rounds and have asymptotic com-
munication rate of 1/2. That is, the communication complexity is dominated by the cost of
communicating two vectors in Fn. Using the dual construction, the protocol can be based
on OT together with LPN with a linear number of samples n = O(k) (in fact, n = k + o(k)
samples suﬃce) and a slightly sublinear noise (n1− noisy samples). This is strictly better
than the ﬂavor of LPN known to imply public-key encryption [Ale03].
Combined with linear-time encodable LPN-friendly codes, we get VOLE protocols in the
plain model that have constant computational overhead and make a black-box use of the
underlying ﬁeld. Compared to the recent constant-overhead VOLE protocols from [ADI+17],
the protocol ΠVOLE obtained by combining Proposition 10 and Theorem 9 has the qualita-
tive advantage of non-interactive generation and the quantitative advantage of asymptotic
rate of 1/2 (compared to 1/3 in [ADI+17]). The underlying LPN assumption is similar but
technically incomparable: our protocol requires LPN with a slightly sub-constant noise rate
(compared to constant noise rate in [ADI+17]) but also uses a smaller number of samples
(linear vs. super-quadratic). Another advantage of our protocol is that it avoids any kind
of erasure decoding or Gaussian elimination that were required in [ADI+17] and in other
28
Elette Boyle, Geoﬀroy Couteau, Niv Gilboa, and Yuval Ishai
previous protocols. Finally, a unique feature of our protocol is that it can achieve security
against malicious parties at a vanishing amortized cost.
Focusing on communication complexity alone, VOLE with rate 1 could be previously
obtained via the Damgård-Jurik encryption scheme, and rate 1/2 could be obtained from
LWE, DDH, or Paillier via homomorphic secret sharing [BGI17,DHRW16,FGJI17,BCG+17].
Note that since neither our ﬂavor of LPN nor OT are known to imply collision-resistant
hashing (CRH), rate 1/2 seems to be a barrier under these assumptions. Indeed, using the
techniques of [IKO05] one can show that any constant-round (semi-honest) VOLE protocol
that achieves better than 1/2 rate implies constant-round statistically hiding commitment,
which currently can only be based on CRH.
6.2 Non-Interactive Zero-Knowledge with Reusable Correlated Randomness
Setup
Consider the following model for non-interactive zero-knowledge (NIZK) with setup. In an
oﬄine phase, before the statements to be proved are known, the prover and the veriﬁer
receive correlated randomness from a trusted dealer. Alternatively, they may generate this
correlated randomness on their own using an interactive secure computation protocol that
is carried out once and for all during a preprocessing phase. Then, in the online phase, the
prover can prove each NP-statement non-interactively, by sending a single message to the
veriﬁer.
We would like the setup to be reusable in the sense that the number of statements
that can be proved is polynomially larger than the communication cost of the setup. More-
over, the soundness of the protocol should hold even if the prover can learn whether the
veriﬁer accepts or rejects a maliciously generated proof. NIZK protocols based on OT
(e.g., [KMO89, IKOS09]) fail to satisfy this property, since the prover can gradually learn
the veriﬁer’s OT selections via small perturbations of an honest prover’s strategy.
We observe that a suitable type of zero-knowledge linear PCPs for NP, which exist
unconditionally, can be compiled in a simple way into information-theoretic reusable NIZK
protocols in the VOLE-hybrid model. Concretely, proving n instances of satisﬁability of an
arithmetic circuit of size s over F requires O(s) instances of VOLE of length O(n) each,
where the veriﬁer’s VOLE inputs are assumed to be honestly generated. (This is a simpliﬁed
version of a similar construction from [CDI+18] which is zero-knowledge against a malicious
veriﬁer.) Applying our VOLE generator, the cost of the setup depends only on s and not
on n, and each circuit satisﬁability instance consumes only a constant number of entries
from each of the O(s) VOLE instances.
Following the local expansion of the VOLE seeds, which does not require interaction,
generating and verifying each proof involves only O(s) ﬁeld operations on both sides (and
no “cryptographic” computations), and the proof consists of O(s) elements of F. This
should be contrasted with traditional approaches to SNARGs, which can have sublinear
communication6 and veriﬁer computation, but on the other hand are much heavier in terms
of prover computation. Our NIZK constructions are particularly attractive in settings where
the prover and veriﬁer have comparable computational resources and where communication
is relatively cheap.
Zero-Knowledge Linear Interactive Proofs. We now deﬁne the notion of linear
proof systems on which we rely, which is a variant of the “linear interactive proof” model
6 Since our NIZK protocols are proof systems for NP (rather than arguments), there is no hope to make
them succinct [GVW02]. Moreover, the assumptions on which we rely (LPN and OT) are not known to