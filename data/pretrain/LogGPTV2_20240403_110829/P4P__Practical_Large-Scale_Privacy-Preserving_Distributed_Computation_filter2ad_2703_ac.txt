version PARPACK. ARPACK consists of a collection
of Fortran77 subroutines for solving large-scale eigen-
value problems. The package implements the Implic-
itly Restarted Arnoldi Method (IRAM) and allows one
to compute a few, say k, eigenvalues and eigenvectors
with user speciﬁed features such as those of largest mag-
nitude. Its storage complexity is nO(k) + O(k2) where
n is the size of the matrix. ARPACK is a freely-available
yet powerful tool. It is best suited for applications whose
matrices are either sparse or not explicitly available: it
only requires the user code to perform some “action”
on a vector, supplied by the solver, at every IRAM it-
eration. This action is simply matrix-vector product in
our case. Such a reverse communication interface works
seamlessly with P4P’s aggregation protocol.
6.2 The Private SVD Scheme
i=1 AT
Pn
In our setting the rows of A are distributed across all
users. We use Ai∗ ∈ Rm to denote the m-dimensional
row vector owned by user i. From equation 1, and
the fact that both U and V are orthonormal, it is clear
that AT A = V Σ2V T which implies that AT AV =
V Σ2. A straightforward way is then to compute AT A =
i∗Ai∗ and solve for the eigenpairs of AT A. The
aggregate can be computed using our private vector ad-
dition framework. This is a distributed version of the
method proposed in [7] and does not require the con-
sistency protocol that we will introduce later. Unfortu-
nately, this approach is not scalable as the cost for each
user is O(m2). Suppose m = 106, and each element
is a 64-bit integer, then AT
i∗Ai∗ is 8 × 1012 bytes, or
about 8 TB. The communication cost for each user is
then 16 TB (she must send shares to two servers). This is
a huge overhead, both communication- and computation-
wise. Usually the data is very sparse and it is a common
practice to reduce cost by utilizing the sparsity. Unfor-
tunately, sparsity does not help in a privacy-respecting
application: revealing which elements are non-zero is a
huge privacy breach and the users are forced to use the
dense format. We propose the following scheme which
	2	1v
AT1A1v
AT2A2v
ATAv
	
...
i=1ATiAiv
ARPACK
P4P
Figure 1: Private SVD with P4P
reduces the cost dramatically. We involve the users in
the iteration and the total communication (and computa-
tion) cost per iteration is only O(m) for each user. The
number of iterations required ranges from tens to over
a thousand. This translates to a maximum of a few GB
data communicated for each user for the entire protocol
which is much more manageable.
One server, say S1, will host an ARPACK engine and
interact with its reverse communication interface.
In
our case, since AT A is symmetric, the server will use
dsaupd, ARPACK’s double precision routine for sym-
metric problems, and asks for k largest (in magnitude)
eigenvalues. At each iteration, dsaupd returns a vector v
to the server code and asks for the matrix-vector product
AT Av. Notice that
AT Av =
AT
i∗Ai∗v
n
Xi=1
Each term in the summation is computable by each user
locally in O(m) time (by computing the inner product
Ai∗ · v ﬁrst) and the result is an m-vector. The vec-
tor can then be input to the P4P computation which ag-
gregates them across all users privately. The aggregate
is the matrix-vector product which can be returned to
ARPACK for another iteration. This process is illustrated
in ﬁgure 1.
The above method is known to have sensitivity prob-
lem, i.e., a small perturbation to the input could cause
large error in the output.
In particular, the error is
O(kAk2/σk) [48]. Fortunately, most applications (e.g.,
PCA) only need the k largest singular values (and
their singular vectors). It is usually not a problem for
those applications since for the principal components
O(kAk2/σk) is small. There is no noticeable inaccuracy
in our test applications (latent semantic analysis for doc-
ument retrieval). For general problems the stable way is
7
to compute the eigenpairs of the matrix
H =(cid:20) 0 AT
A 0 (cid:21)
It is straightforward to adopt our private vector addition
framework to compute matrix-vector product with H.
For simplicity we will not elaborate on this.
6.3 Enforcing Data Consistency
During the iteration, user i should input di = AT
i∗Ai∗v.
However, a cheating user could input something com-
pletely different. This threat is different from inputting
bogus (but in the allowable range) data at the beginning
(and using it consistently throughout the iterations). The
latter only introduces noise to the computation but gener-
ally does not affect the convergence. The L2-norm ZKP
introduced in [21], which veriﬁes that the L-2 norm of a
user’s vector is bounded by a public constant, is effective
in bounding the noise but does not help in enforcing con-
sistency. The former, on the other hand, may cause the
computation not to converge at all. This generally is a
problem for iterative algorithms and is more than simply
testing the equality of vectors: The task is complicated
by the local function that each user uses to evaluate on
her data, i.e., she is not simply inputting her private data
vector, but some (possibly non-linear) function of it. In
the case of SVD, the system needs to ensure that user i
uses the same Ai∗ (to compute di = AT
i∗Ai∗v) in all the
iterations, not that she inputs the same vector.
We provide a novel zero-knowledge tool that ensures
that the correct data is used. The protocol is probabilis-
tic and relies on random projection. That is, the user is
asked to project her original vector and her result of the
current round onto some random direction. It then tests
the relation of the two projections. We will show that this
method catches cheating with high probability but only
involves very few expensive large ﬁeld operations.
6.3.1 Tools
The consistency protocol uses some standard crypto-
graphic primitives. Detailed construction and proofs can
be found in [45, 15, 11]. We summarize only their key
properties here. All values used in these primitives lie in
the multiplicative group Z∗
q, or in the additive group of
exponents for this group, where q is a 1024 or 2048-bit
prime. They rely on RSA or discrete log functions for
cryptographic protection of information.
• Homomorphic commitment: A homomorphic
commitment to an integer a with randomness r is
written as C(a, r). It is homomorphic in the sense
that C(a, r)C(b, s) = C(a + b, r + s). It is infeasible
8
to determine a given C(a, r). We say that a prover
“opens” the commitment if it reveals a and r.
• ZKP of knowledge: A prover who knows a and
r (i.e., who knows how to open A = C(a, r)) can
demonstrate that it has this knowledge to a veriﬁer
who knows only the commitment A. The proof re-
veals nothing about a or r.
• ZKP for equivalence: Let A = C(a, r) and B =
C(a, s) be two commitments to the same value a. A
prover who knows how to open A and B can demon-
strate to a veriﬁer in zero knowledge that they com-
mit to the same value.
• ZKP for product: Let A, B and C be commitments
to a, b, c respectively, where c = ab. A prover
who knows how to open A, B, C can prove in zero
knowledge to a veriﬁer who has only the commit-
ments that the relationship c = ab holds among the
values they commit to. If say a is made public, this
primitive can be used to prove that C encodes a num-
ber that is multiple of a.
6.3.2 The Protocol
The consistency check protocol is summarized in the fol-
lowing. Since the protocol is identical for all users, we
drop the user subscript for the rest of the paper whenever
φ be a user’s original
there is no confusion. Let a ∈ Zm
vector (i.e., her row in the matrix A). The correct user
input to this round should be d = aT av. For two vectors
x and y, we use x · y to denote their scalar product.
1. After the user inputs her vector d, in the form of two
φ , one to each
random vectors d(1) and d(2) in Zm
server, s.t. d = d(1) + d(2) mod φ, S1 broadcasts a
random number r. Using r as the seed and a public
PRG (pseudo-random generator), all players gener-
ate a random vector c ∈R Zm
φ .
2. For j ∈ {1, 2}, the user computes x(j) = c · a(j)
mod φ, y(j) = a(j)·v mod φ. Let x = x(1)+x(2),
y = y(1) + y(2), z = xy. Let w = (c · a)(a · v) −
xy. The user commits X (j) to x(j), Y (j) to y(j), Z
to z, and W to w. She also construct two ZKPs:
(1) W encodes a number that is multiple of φ. (2)
Z encodes a number that is the product of the two
numbers encoded in X and Y where X = X (1)X (2)
and Y = Y (1)Y (2). She sends all commitments and
ZKPs to both servers.
3. The user opens X (j) and Y (j) to Sj who veriﬁes
that both are computed correctly. Both servers ver-
ify the ZKPs. If any of them fails, the user is marked
as FAIL and the servers terminate the protocol with
her.
4. For j ∈ {1, 2}, the user computes ˜z(j) = c · d(j)
mod φ, ˜z = ˜z(1) + ˜z(2) and ˜w = c· d− ˜z. She com-
mits ˜Z (1) to ˜z(1), ˜Z (2) to ˜z(2), and ˜W to ˜w. She
constructs the following two ZKPs: (1) ˜W encodes
a number that is multiple of φ and (2) ˜Z ˜W and ZW
encode the same value. She sends all the commit-
ments and ZKPs to both servers.
5. The user opens ˜Z (j) to Sj who veriﬁes that it is
computed correctly. Both servers verify the two
ZKPs. They mark the user as FAIL if any of the
veriﬁcations fails and terminate the protocol with
her.
6. Both servers output PASS.
Group Sizes
There are three groups/ﬁelds involved in the protocol:
the large, multiplicative group Z∗
q used for commitments
and ZKPs, the “small” group Zφ used for additive secret-
sharing, and the group of all integers. All the commit-
q so stan-
ments such as X (j) and Y (j) are computed in Z∗
dard cryptographic tools can be used. The inputs to the
commitments, which can be user’s data or some inter-
mediate results, are either in Zφ or in the integer group
(without bounding their values). Restricting commit-
ment inputs to small ﬁeld/group does not compromise
the security of the scheme since the outputs are still in
the large ﬁeld. Using Pederson’s commitment as an ex-
ample, the hiding property is guaranteed by the random
numbers that are generated in the large ﬁeld for each
commitments. And breaking the binding property is still
equivalent to solving the discrete logarithm problem in
Z∗
q. See [45].
The protocol makes it explicit which group a number
is in using the mod φ operator (i.e., x = g(y) mod φ
restricts x to be in Zφ while x = g(y) means x can be
in the whole integer range). The protocol assumes that
q ≫ φ. This ensures that the numbers that are in the
integer group (x, y, z, w in step 2 and ˜z and ˜w in step 4)
are much less than q to avoid modular reduction when
their commitments are produced. This is true for most
realistic deployment, since φ is typically 64 bits or less
while q is 1024 bits or more. Theorem 2 proves that the
transition from Zφ to integer ﬁelds and Z∗
q only causes
the protocol to fail with extremely low probability:
Theorem 2 Let O be the output of the Consistency
Check protocol. Then
and
Pr(O = PASS|d = aT av) = 1
Pr(O = PASS|d 6= aT av) ≤
1
φ
Furthermore, the protocol is zero-knowledge.
Proof If computed correctly, both w and ˜w are multiples
of φ due to modular reduction. Because of homomor-
phism, the equivalence ZKP that ˜Z ˜W and ZW encode
the same value is to verify that c · d = c · (aT av).
Completeness: If the user performs the computation
correctly, she should input d = aT av into this round
of computation. All the veriﬁcations should pass. The
protocol outputs PASS with probability 1.
Soundness: Suppose d 6= aaT v. The user is forced
to compute the commitments X (1),X (2),Y (1),Y (2), and
˜Z (1), ˜Z (2) faithfully since she has to open them to at
least to one of the servers. The product ZKP at step 2
forces the number encoded in Z to be xy which differs
from c · (aT av) by w. Due to homomorphism, at step
4, ˜Z encodes a number that differs from c · d by ˜w. The
user could cheat by lying about w or ˜w, i.e., she could
encode some other values in W and ˜W to adjust for the
difference between c · d and c · (aT av), hoping to pass
the equivalence ZKP. However, assuming the soundness
of the ZKPs used, the protocol forces both to be multiple
of φ (steps 2 and 4), so she could succeed only when the
difference between c· d, which she actually inputs to this
round, and c · (aT av), which she should input, is some
multiple of φ. Since c is made known to her after she
inputs d, the two numbers are totally unpredictable and
random to her. The probability that c · d − c · (aT av) is a
multiple of φ is only 1/φ which is the probability of her
success.
Finally, the protocol consists of a sequential invoca-
tion of some well-established ZKPs. By the sequential
composition theorem of [32], the whole protocol is also
zero-knowledge.
As a side note, all the ZKPs can be made non-
interactive using the Fiat-Shamir paradigm [27]. The
user could upload her data in a batch without further in-
teraction. This makes it easier to deploy the scheme. It
is also much more light-weight than the L2-norm ZKP
[21]: the number of large ﬁeld operations is constant, as
opposed to O(log m) in the L2-norm ZKP. The private
SVD computation thus involves only one L2-norm ZKP
at ﬁrst round, and one light veriﬁcation for each of the
subsequent rounds.
6.4 Dealing with Real Numbers
In their simplest forms, the cryptographic tools only sup-
port computation on integers. In most domains, however,
applications typically have to handle real numbers. In
the case of SVD, even if the original input matrix con-
tains only integer entries, it is likely that real numbers
appear in the intermediate (e.g., the vectors returned by
ARPACK) and the ﬁnal results.
Because of the linearity of the P4P computation, we
can use a simple linear digitization scheme to convert
9
between real numbers in the application domain and Zφ,
P4P’s integer ﬁeld. Let R > 0 be the bound of the
maximum absolute value application data can take, i.e.,
all numbers produced by the application are between
[−R, R]. The integer ﬁeld provides |φ| bits resolution.
This means the maximum quantization error for one vari-
able is R/φ = 2|R|−|φ|. Summing across all n users, the
worst case absolute error is bounded by n2|R|−|φ|.
In
practice |φ| can be 64, and |R| can be around e.g., 20
(this gives a range of [−220, 220]). With n = 106, this
gives a maximum absolute error of under 1 over a mil-
lion.
6.5 The Protocol
Let Q be the set of qualiﬁed users initialized to the set of
all users. The entire private SVD method is summarized
as follows:
1. Input The user ﬁrst provides an L2-norm ZKP [21]
on a with a bound L, i.e., she submits a ZKP that
kak2 < L. This step also forces the user to commit
to the vector a. Speciﬁcally, at the end of this step,
S1 and S2 have a(1) ∈ Zφ and a(2) ∈ Zφ, respec-
tively, such that a = a(1)+a(2) mod φ. Users who
fail this ZKP are excluded from subsequent compu-