SSC model to largely resemble commodity cloud computing. Re-
cent advances to strengthen hypervisors against certain classes of
attacks [49] can also be applied to SSC, thereby improving the over-
all security of the platform.
In comparison to hypervisors, the administrative domain is large
and complex. It typically executes a complete OS kernel with de-
vice drivers and a user-space control toolstack. The hypervisor
gives the administrative domain privileges to control and manip-
ulate client VMs. The complexity of the administrative domain has
made it the target of a number of attacks [10, 11, 12, 13, 14, 23],
To address threats against the administrative domain, the re-
search community has focused on adopting the principle of sepa-
ration of privilege, an approach that we also adopted in SSC. Mur-
ray et al. [33] disaggregated the administrative domain by isolat-
ing in a separate VM the functionality that builds new VMs. This
domain builder has highly-speciﬁc functionality and a correspond-
ingly small code-base. This feature, augmented with the use of a
library OS enhances the robustness of that code. Murray et al.’s de-
sign directly inspired the use of domB in SSC. Disaggregation is
also advocated by Nova [47]. The Xoar project [9] extends this ap-
proach by “sharding” diﬀerent parts of the administrative toolstack
into a set of domains. Previous work has also considered separate
domains to isolate device drivers [28], which are more defect-prone
than the rest of the kernel.
SSC is similar to these lines of research because it also aims
to reduce the privilege of Sdom0, which can no longer inspect the
code, data and computation of client VMs. However, SSC is unique
in delegating administrative privileges to clients (via Udom0). It is
this very feature that enables clients to deploy custom services to
monitor and control their own VMs.
The CloudVisor project [52] leverages recent advances in nested
virtualization technology to protect the security and privacy of
client VMs from the administrative domain. In CloudVisor, a com-
modity hypervisor such as Xen executes atop a small, trusted, bare-
metal hypervisor. This trusted hypervisor intercepts privileged op-
erations from Xen, and cryptographically protects the state of client
VMs executing within Xen from its dom0 VM, e.g., dom0 only has
an encrypted view of a client VM’s memory.
The main advantage of CloudVisor over SSC is that its TCB
only includes the small, bare-metal hypervisor, comprising about
5.5KLOC, whereas SSC’s system-wide TCB includes the entire
commodity hypervisor and domB. Moreover, the use of cryptogra-
phy allows CloudVisor to provide strong guarantees on client VM
security and privacy. However, SSC oﬀers three concrete advan-
tages over CloudVisor. First, SSC oﬀers clients more ﬂexible con-
trol over their own VMs than CloudVisor. For example, because
CloudVisor only presents an encrypted view of a client’s VM to
dom0, many security introspection tools (e.g., memory introspec-
tion, as in Section 4.2) cannot be implemented within dom0. Sec-
ond, unlike CloudVisor, SSC does not rely on nested virtualization.
Nesting fundamentally imposes overheads on client VMs because
privileged operations must be handled by both the bare-metal and
nested hypervisors, which can slow down I/O intensive client appli-
cations, as reported in the CloudVisor paper. Third, SSC’s MTSDs
allow the cloud provider and clients to execute mutually-trusted
services for regulatory compliance. It is unclear whether the Cloud-
Visor model can achieve mutual trust of shared services.
Finally, the Excalibur system [40] operates under the same
threat model as SSC, and aims to prevent malicious cloud system
administrators from accessing client data. It introduces a new ab-
straction, called policy-sealed data, which allows encrypted client
data to only be decrypted on nodes that satisfy a client-speciﬁed
policy, e.g., only those running the CloudVisor hypervisor, or those
located in a particular geographic region. Excalibur includes a cen-
tralized monitor, as well as new protocols aimed speciﬁcally to ad-
dress the TPM-related issues outlined in Section 5. However, Ex-
calibur’s threat model excludes certain classes of attacks via the
dom0 management interface, e.g., attacks via direct memory in-
spection, that SSC explicitly addresses. Future work could investi-
gate a system that integrates concepts from SSC and Excalibur, in
an attempt to combine the beneﬁts of both systems.
Extending the Functionality of VMMs. There has been nearly
a decade of research on novel services enabled by virtualization,
starting with Chen and Noble’s seminal paper [6]. These include
new techniques to detect security infections in client VMs (e.g., [2,
7, 17]), arbitrary rollback [16], and VM migration [8]. However,
most of these techniques are implemented within the hypervisor
or the administrative domain. On current cloud infrastructures,
deploying these techniques requires the cooperation of the cloud
provider, which greatly limits their impact.
SSC enables clients to deploy their own privileged services
without requiring the cloud provider to do so. The primary ad-
vantage of such an approach is that clients need no longer expose
their code and data to the cloud provider. At the same time, SSC’s
MTSDs accommodate the need for cloud providers to ensure regu-
latory compliance and have some control over client VMs.
The xCloud project [50, 51] also considers the problem of pro-
viding clients ﬂexible control over their VMs. The original position
paper [50] advocated several approaches to this problem, including
by extending hypervisors, which may weaken hypervisor security.
The full paper [51] describes XenBlanket, which realizes the vision
of the xCloud project using nested virtualization. XenBlanket im-
plements a “blanket” layer that allows clients to execute paravirtu-
alized VMMs atop commodity cloud infrastructures. The key bene-
ﬁt of XenBlanket over SSC is that it provides clients the same level
of control over their VMs as does SSC but without modifying the
hypervisor of the cloud infrastructure. However, unlike SSC, Xen-
Blanket does not address the problem of protecting the security and
privacy of client VMs from cloud administrators.
7. CONCLUSIONS AND FUTURE WORK
SSC is a new cloud computing model that improves client security
and privacy, and gives clients the ﬂexibility to deploy privileged
services on their own VMs. SSC introduces new abstractions and
a supporting privilege model to achieve these goals. We integrated
SSC with a commodity hypervisor (Xen), and presented case stud-
ies showing SSC’s beneﬁts.
In the future, we plan to enhance SSC by factoring devices
drivers [28] and XenStore into their own domains [9]. We also
plan to explore other novel services enabled by SDs. While our
evaluation in Section 4 has primarily focused on SD-based secu-
rity and systems services, we also plan to build network-based ser-
vices using SDs. Individual cloud clients can leverage SDs to im-
plement middleboxes, such as NIDS systems, ﬁrewalls and traﬃc
263shapers, and to run performance-intensive network monitoring ser-
vices. Such network-based services are currently under the control
of cloud providers, and clients often have no say in conﬁguring
them. SDs therefore allow clients to enforce arbitrary network secu-
rity and auditing policies without having to rely on cloud providers
to deploy the corresponding services. Finally, we plan to address
several of the issues discussed in Section 5 in an eﬀort to make
SSC a practical alternative to current cloud infrastructures.
Acknowledgments. We thank the anonymous reviewers and our
shepherd, Andrew D. Gordon, for their comments on the paper.
This work was funded in part by NSF grants CNS-0831268, CNS-
0915394, and CNS-0952128. Parts of this work were completed
when the ﬁrst two authors were at AT&T Research.
REFERENCES
[1] byte-unixbench: A Unix benchmark suite.
http://code.google.com/p/byte-unixbench.
[2] A. Baliga, V. Ganapathy, and L. Iftode. Detecting kernel-level
rootkits using data structure invariants. IEEE TDSC, 8(5), 2011.
[3] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho,
R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and the Art of
Virtualization. In ACM SOSP, 2003.
[4] M. Ben-Yahuda, M. D. Day, Z. Dubitsky, M. Factor, N. Har’El,
A. Gordon, A. Liguori, O. Wasserman, and B. Yassour. The Turtles
project: Design and implementation of nested virtualization. In
USENIX/ACM OSDI, 2010.
[5] S. Berger, R. Caceres, K. Goldman, R. Perez, R. Sailer, and L. van
Door. vTPM: Virtualizing the Trusted Platform Module. In USENIX
Security, 2006.
[6] P. M. Chen and B. Noble. When virtual is better than real. In HotOS,
2001.
[7] M. Christodorescu, R. Sailer, D. Schales, D. Sgandurra, and
D. Zamboni. Cloud Security Is Not (Just) Virtualization Security. In
ACM Cloud Computing Security Workshop, 2009.
[8] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul, C. Limpach,
I. Pratt, and A. Warﬁeld. Live Migration of Virtual Machines. In
USENIX NSDI, 2005.
[9] P. Colp, M. Nanavati, J. Zhu, W. Aiello, G. Coker, T. Deegan,
P. Loscocco, and A. Warﬁeld. Breaking Up is Hard to Do: Security
and Functionality in a Commodity Hypervisor . In ACM SOSP, 2011.
[10] CVE-2007-4993. Xen guest root escapes to dom0 via pygrub.
[11] CVE-2007-5497. Integer overﬂows in libext2fs in e2fsprogs.
[12] CVE-2008-0923. Directory traversal vulnerability in the shared
[13] CVE-2008-1943. Buﬀer overﬂow in the backend of XenSource Xen
folders feature for VMWare.
paravirtualized frame buﬀer.
[14] CVE-2008-2100. VMWare buﬀer overﬂows in VIX API let local
users execute arbitrary code in host OS.
[15] B. Danev, R. Masti, G. Karame, and S. Capkun. Enabling secure
VM-vTPM migration in private clouds. In ACSAC, 2011.
[16] G. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. Chen. ReVirt:
Enabling Intrusion Analysis through Virtual-Machine Logging and
Replay. In USENIX/ACM OSDI, 2002.
[17] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and D. Boneh. Terra:
A virtual machine-based platform for trusted computing. In ACM
SOSP, 2003.
[18] T. Garﬁnkel and M. Rosenblum. A virtual machine introspection
based architecture for intrusion detection. In NDSS, 2003.
[19] Gartner. Assesing the Security Risks of Cloud Computing.
http://www.gartner.com/DisplayDocument?id=685308.
[20] J. T. Giﬃn. Model Based Intrusion Detection System Design and
Evaluation. PhD thesis, University of Wisconsin-Madison, 2006.
[21] Trusted Computing Group. TPM main spec., l2 v1.2 r116.
http://www.trustedcomputinggroup.org/resources/
tpm main speciﬁcation.
[22] S. Hand, A. Warﬁeld, K. Fraser, E. Kotsovinos, and D. Magenheimer.
Are VMMs Microkernels Done Right? In HotOS, 2005.
[23] K. Kortchinsky. Hacking 3D (and breaking out of VMWare). In
BlackHat USA, 2009.
[24] B. Kauer. OSLO: Improving the Security of Trusted Computing. In
USENIX Security, 2007.
[25] B. Kauer, P. Verissimo, and A. Bessani. Recursive virtual machines
for advanced security mechanisms. In 1st International Workshop on
Dependability of Clouds, Data Centers and Virtual Computing
Environments, 2011.
[26] E. Keller, J. Szefer, J. Rexford, and R. Lee. Eliminating the
hypervisor attack surface for a more secure cloud. In CCS, 2011.
[27] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock,
P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish,
T. Sewell, H. Tuch, and S. Winwood. seL4: Formal Veriﬁcation of an
OS Kernel. In ACM SOSP, 2009.
[28] J. LeVasseur, V. Uhlig, J. Stoess, and S. Gotz. Unmodiﬁed Device
Driver Reuse and Improved System Dependability via Virtual
Machines. In ACM/USENIX OSDI, 2004.
[29] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Hypervisor Support for
Identifying Covertly Executing Binaries. In USENIX Security, 2008.
[30] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Computer Meteorology:
Monitoring Compute Clouds. In HotOS, 2009.
[31] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and
A. Perrig. TrustVisor: Eﬃcient TCB reduction and attestation. In
IEEE S&P, 2010.
[32] Microsoft. Hyper-V Architecture.
http://msdn.microsoft.com/en-us/library/cc768520(BTS.10).aspx.
[33] D. Murray, G. Milos, and S. Hand. Improving Xen Security Through
Disaggregation. In ACM VEE, 2008.
[34] A. Nagarajan, V. Varadarajan, M. Hitchens, and E. Gallery.
Property-based attestion and trusted computing: Analysis and
challenges. In Intl. Conf. on Network and System Security, 2009.
[35] B. Payne, M. Carbone, and W. Lee. Secure and Flexible Monitoring
of Virtual Machines. In ACSAC, 2007.
[36] B. Payne, M. Carbone, M. Sharif, and W. Lee. Lares: An architecture
for secure active monitoring using virtualization. In IEEE S&P, 2008.
[37] A-R. Sadeghi, C. Stuble, and M. Winandy. Property-based TPM
virtualization. In Information Security Conference, 2008.
[38] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger,
J. Griﬃn, and L. van Doorn. Building a MAC-based Security
Architecture for the Xen Hypervisor. In ACSAC, 2005.
[39] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and
implementation of a TCG-based integrity measurement architecture.
In USENIX Security, 2004.
[40] N. Santos, R. Rodrigues, K. Gummadi, and S. Saroiu. Policy-sealed
data: A new abstraction for building trusted cloud services. In
USENIX Security, 2012.
[41] J. Schiﬀman, T. Moyer, H. Vijayakumar, T. Jaeger, and P. McDaniel.
Seeding clouds with trust anchors. In ACM Cloud Computing
Security Workshop, 2010.
[42] J. Schiﬀman, H. Vijayakumar, and T. Jaeger. Verifying system
integrity by proxy. In TRUST, 2012.
[43] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny
Hypervisor to Provide Lifetime Kernel Code Integrity for
Commodity OSes. In ACM SOSP, 2007.
[44] E. Gun Sirer, W. de Bruijn, P. Reynolds, A. Shieh, K. Walsh,
D. Walsh, and F. B Schneider. Logical Attestation: An authorization
architecture for trustworthy computing. In ACM SOSP, 2011.
[45] A. Srivastava and J. Giﬃn. Tamper-resistant, application-aware
blocking of malicious network connections. In RAID, 2008.
[46] A. Srivastava, H. Raj, J. Giﬃn, and P. England. Trusted VM
snapshots in untrusted cloud infrastructures. In RAID, 2012.
[47] U. Steinberg and B. Kauer. NOVA: A Microhypervisor-Based Secure
Virtualization Architecture. In ACM Eurosys, 2010.
[48] C. A. Waldspurger. Memory Resource Management in VMWare
ESX Server. In USENIX/ACM OSDI, 2002.
[49] Z. Wang and X. Jang. Hypersafe: A lightweight approach to provide
lifetime hypervisor control-ﬂow integrity. In IEEE S&P, 2010.
[50] D. Williams, E. Elnikety, M. Eldehiry, H. Jamjoom, H. Huang, and
H. Weatherspoon. Unshackle the Cloud! In HotCloud, 2011.
[51] D. Williams, H. Jamjoom, and H. Weatherspoon. The Xen-Blanket:
Virtualize Once, Run Everywhere. In ACM EuroSys, 2012.
[52] F. Zhang, J. Chen, H. Chen, and B. Zang. CloudVisor: Retroﬁtting
Protection of Virtual Machines in Multi-tenant Cloud with Nested
Virtualization. In ACM SOSP, 2011.
264