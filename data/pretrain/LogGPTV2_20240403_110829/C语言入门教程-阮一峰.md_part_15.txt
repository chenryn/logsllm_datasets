除了逐⼀对属性赋值，也可以使⽤⼤括号，⼀次性对 struct 结构的所有属性赋值。
struct car {
char* name;
float price;
int speed;
};
struct car saturn = {"Saturn SL/2", 16000.99, 175};
上⾯示例中，变量 是 类型，⼤括号⾥⾯同时对它的三个属性赋值。如果⼤括号⾥⾯的
saturn struct cat
值的数量，少于属性的数量，那么缺失的属性⾃动初始化为 。
0
注意，⼤括号⾥⾯的值的顺序，必须与 struct 类型声明时属性的顺序⼀致。否则，必须为每个值指定属性
名。
struct car saturn = {.speed=172, .name="Saturn SL/2"};
上⾯示例中，初始化的属性少于声明时的属性，这时剩下的那些属性都会初始化为 。
0
声明变量以后，可以修改某个属性的值。
struct car saturn = {.speed=172, .name="Saturn SL/2"};
saturn.speed = 168;
上⾯示例将 属性的值改成 。
speed 168
struct 的数据类型声明语句与变量的声明语句，可以合并为⼀个语句。
struct book {
char title[500];
char author[100];
float value;
} b1;
上⾯的语句同时声明了数据类型 和该类型的变量 。如果类型标识符 只⽤在这⼀个地⽅，后
book b1 book
⾯不再⽤到，这⾥可以将类型名省略。
struct {
char title[500];
char author[100];
float value;
} b1;
上⾯示例中， 声明了⼀个匿名数据类型，然后⼜声明了这个类型的变量 。
struct b1
与其他变量声明语句⼀样，可以在声明变量的同时，对变量赋值。
struct {
char title[500];
char author[100];
float value;
} b1 = {"Harry Potter", "J. K. Rowling", 10.0},
b2 = {"Cancer Ward", "Aleksandr Solzhenitsyn", 7.85};
上⾯示例中，在声明变量 和 的同时，为它们赋值。
b1 b2
下⼀章介绍的 命令可以为 struct 结构指定⼀个别名，这样使⽤起来更简洁。
typedef
typedef struct cell_phone {
int cell_no;
float minutes_of_charge;
} phone;
phone p = {5551234, 5};
上⾯示例中， 就是 的别名。
phone struct cell_phone
指针变量也可以指向 结构。
struct
struct book {
char title[500];
char author[100];
float value;
}* b1;
struct book {
char title[500];
char author[100];
float value;
};
struct book* b1;
上⾯示例中，变量 是⼀个指针，指向的数据是 类型的实例。
b1 struct book
struct 结构也可以作为数组成员。
struct fraction numbers[1000];
numbers[0].numerator = 22;
numbers[0].denominator = 7;
上⾯示例声明了⼀个有 1000 个成员的数组 ，每个成员都是⾃定义类型 的实例。
numbers fraction
struct 结构占⽤的存储空间，不是各个属性存储空间的总和。因为为了计算效率，C 语⾔的内存占⽤空间
⼀般来说，都必须是 类型存储空间的倍数。如果 类型的存储是 4 字节，那么 struct 类型的存储
int int
空间就总是 4 的倍数。
struct { char a; int b; } s;
printf("%d\n", sizeof(s));
上⾯示例中，如果按照属性占据的空间相加，变量 的存储空间应该是 5 个字节。但是，struct 结构的存
s
储空间是 类型的倍数，所以最后的结果是占据 8 个字节， 属性与 属性之间有 3 个字节的 “空
int a b
洞”。
struct 的复制 #
struct 变量可以使⽤赋值运算符（ ），复制给另⼀个变量，这时会⽣成⼀个全新的副本。系统会分配⼀
=
块新的内存空间，⼤⼩与原来的变量相同，把每个属性都复制过去，即原样⽣成了⼀份数据。这⼀点跟数
组的复制不⼀样，务必⼩⼼。
struct cat { char name[30]; short age; } a, b;
strcpy(a.name, "Hula");
a.age = 3;
b = a;
b.name[0] = 'M';
printf("%s\n", a.name);
printf("%s\n", b.name);
上⾯示例中，变量 是变量 的副本，两个变量的值是各⾃独⽴的，修改掉 不影响 。这
b a b.name a.name
⼀点跟数组完全不同，数组使⽤赋值运算符，不会复制数据，只会共享地址。
但是，稍作修改，结果就不⼀样。
struct cat { char* name; short age; } a, b;
a.name = "Hula";
a.age = 3;
b = a;
上⾯示例中， 属性变成了⼀个字符串指针，这时 赋值给 ，导致 也是同样的字符串指
name a b b.name
针，指向同⼀个地址，也就是说两个属性共享同⼀个地址。因为这时，struct 结构内部保存的是⼀个指
针，⽽不是上⼀个例⼦的数组，这时复制的就不是字符串本身，⽽是它的指针。
注意，这种赋值要求两个变量是同⼀个类型，不同类型的 变量⽆法互相赋值。
struct
另外，C 语⾔没有提供⽐较两个⾃定义数据结构是否相等的⽅法，⽆法⽤⽐较运算符（⽐如 和 ）
== !=
⽐较两个数据结构是否相等或不等。
struct 指针 #
如果将 struct 变量传⼊函数，函数内部得到的是⼀个原始值的副本。
#include 
struct turtle {
char* name;
char* species;
int age;
};
void happy(struct turtle t) {
t.age = t.age + 1;
}
int main() {
struct turtle myTurtle = {"MyTurtle", "sea turtle", 99};
happy(myTurtle);
printf("Age is %i\n", myTurtle.age);
return 0;
}
上⾯示例中，函数 传⼊的是⼀个 struct 变量 ，函数内部有⼀个⾃增操作。但是，执⾏
happy() myTurtle
完 以后，函数外部的 属性值根本没变。原因就是函数内部得到的是 struct 变量的副本，改变
happy() age
副本影响不到函数外部的原始数据。
通常情况下，开发者希望传⼊函数的是同⼀份数据，函数内部修改数据以后，会反映在函数外部。⽽且，
传⼊的是同⼀份数据，也有利于提⾼程序性能。这时就需要将 struct 变量的指针传⼊函数，通过指针来修
改 struct 属性，就可以影响到函数外部。
struct 指针传⼊函数的写法如下。
void happy(struct turtle* t) {
}
happy(&myTurtle);
上⾯代码中， 是 struct 结构的指针，调⽤函数时传⼊的是指针。struct 类型跟数组不⼀样，类型标识符
t
本身并不是指针，所以传⼊时，指针必须写成 。
&myTurtle
函数内部也必须使⽤ 的写法，从指针拿到 struct 结构本身。
(*t).age
void happy(struct turtle* t) {
(*t).age = (*t).age + 1;
}
上⾯示例中， 不能写成 ，因为点运算符 的优先级⾼于 。 这种写法会将
(*t).age *t.age . * *t.age
看成⼀个指针，然后取它对应的值，会出现⽆法预料的结果。
t.age
现在，重新编译执⾏上⾯的整个示例， 内部对 struct 结构的操作，就会反映到函数外部。
happy()
这样的写法很麻烦。C 语⾔就引⼊了⼀个新的箭头运算符（ ），可以从 struct 指针上直接
(*t).age ->
获取属性，⼤⼤增强了代码的可读性。
void happy(struct turtle* t) {
t->age = t->age + 1;
}
总结⼀下，对于 struct 变量名，使⽤点运算符（ ）获取属性；对于 struct 变量指针，使⽤箭头运算符
.
（ ）获取属性。以变量 为例，假设 是它的指针，那么下⾯三种写法是同⼀回事。
-> myStruct ptr
myStruct.prop == (*ptr).prop == ptr->prop
struct 的嵌套 #
struct 结构的成员可以是另⼀个 struct 结构。
struct species {
char* name;
int kinds;
};
struct fish {
char* name;
int age;
struct species breed;
};
上⾯示例中， 的属性 是另⼀个 struct 结构 。
fish breed species
赋值的时候有多种写法。
struct fish shark = {"shark", 9, {"Selachimorpha", 500}};
struct breek myBreed = {"Selachimorpha", 500};
struct fish shark = {"shark", 9, myBreed};
struct fish shark = {
.name="shark",
.age=9,
.breed={"Selachimorpha", 500}
};
struct fish shark = {
.name="shark",
.age=9,
.breed.name="Selachimorpha",
.breed.kinds=500
};
printf("Shark's species is %s", shark.breed.name);
上⾯示例展示了嵌套 Struct 结构的四种赋值写法。另外，引⽤ 属性的内部属性，要使⽤两次点运算
breed
符（ ）。
shark.breed.name
下⾯是另⼀个嵌套 struct 的例⼦。
struct name {
char first[50];
char last[50];
};
struct student {
struct name name;
short age;
char sex;
} student1;
strcpy(student1.name.first, "Harry");
strcpy(student1.name.last, "Potter");
struct name myname = {"Harry", "Potter"};
student1.name = myname;
上⾯示例中，⾃定义类型 的 属性是另⼀个⾃定义类型，如果要引⽤后者的属性，就必须使
student name
⽤两个 运算符，⽐如 。另外，对字符数组属性赋值，要使⽤ 函数，不能
. student1.name.first strcpy()
直接赋值，因为直接改掉字符数组名的地址会报错。
struct 结构内部不仅可以引⽤其他结构，还可以⾃我引⽤，即结构内部引⽤当前结构。⽐如，链表结构的
节点就可以写成下⾯这样。
struct node {
int data;
struct node* next;
};
上⾯示例中， 结构的 属性，就是指向另⼀个 实例的指针。下⾯，使⽤这个结构⾃定义⼀
node next node
个数据链表。
struct node {
int data;
struct node* next;
};
struct node* head;
head = malloc(sizeof(struct node));
head->data = 11;
head->next = malloc(sizeof(struct node));
head->next->data = 22;
head->next->next = malloc(sizeof(struct node));
head->next->next->data = 33;
head->next->next->next = NULL;
for (struct node *cur = head; cur != NULL; cur = cur->next) {
printf("%d\n", cur->data);
}
上⾯示例是链表结构的最简单实现，通过 循环可以对其进⾏遍历。
for
位字段 #
struct 还可以⽤来定义⼆进制位组成的数据结构，称为 “位字段”（bit field），这对于操作底层的⼆进制
数据⾮常有⽤。
typedef struct {
unsigned int ab:1;
unsigned int cd:1;
unsigned int ef:1;
unsigned int gh:1;