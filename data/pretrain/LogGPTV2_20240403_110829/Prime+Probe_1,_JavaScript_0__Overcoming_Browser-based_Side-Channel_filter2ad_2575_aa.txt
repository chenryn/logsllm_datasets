title:Prime+Probe 1, JavaScript 0: Overcoming Browser-based Side-Channel
Defenses
author:Anatoly Shusterman and
Ayush Agarwal and
Sioli O'Connell and
Daniel Genkin and
Yossi Oren and
Yuval Yarom
Prime+Probe 1, JavaScript 0: 
Overcoming Browser-based Side-Channel Defenses
Anatoly Shusterman, Ben-Gurion University of the Negev; Ayush Agarwal, 
University of Michigan; Sioli O’Connell, University of Adelaide; Daniel Genkin, 
University of Michigan; Yossi Oren, Ben-Gurion University of the Negev; 
Yuval Yarom, University of Adelaide and Data61
https://www.usenix.org/conference/usenixsecurity21/presentation/shusterman
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Prime+Probe 1, JavaScript 0: Overcoming Browser-based Side-Channel Defenses
Anatoly Shusterman
Ben-Gurion Univ. of the Negev
PI:EMAIL
Ayush Agarwal
University of Michigan
PI:EMAIL
Sioli O’Connell
University of Adelaide
PI:EMAIL
Daniel Genkin
University of Michigan
PI:EMAIL
Yossi Oren
Yuval Yarom
Ben-Gurion Univ. of the Negev
University of Adelaide and Data61
PI:EMAIL
PI:EMAIL
Abstract
The “eternal war in cache” has reached browsers, with mul-
tiple cache-based side-channel attacks and countermeasures
being suggested. A common approach for countermeasures is
to disable or restrict JavaScript features deemed essential for
carrying out attacks.
To assess the effectiveness of this approach, in this work
we seek to identify those JavaScript features which are es-
sential for carrying out a cache-based attack. We develop
a sequence of attacks with progressively decreasing depen-
dency on JavaScript features, culminating in the ﬁrst browser-
based side-channel attack which is constructed entirely from
Cascading Style Sheets (CSS) and HTML, and works even
when script execution is completely blocked. We then show
that avoiding JavaScript features makes our techniques archi-
tecturally agnostic, resulting in microarchitectural website
ﬁngerprinting attacks that work across hardware platforms
including Intel Core, AMD Ryzen, Samsung Exynos, and
Apple M1 architectures.
As a ﬁnal contribution, we evaluate our techniques in hard-
ened browser environments including the Tor browser, Deter-
Fox (Cao el al., CCS 2017), and Chrome Zero (Schwartz et
al., NDSS 2018). We conﬁrm that none of these approaches
completely defend against our attacks. We further argue that
the protections of Chrome Zero need to be more comprehen-
sively applied, and that the performance and user experience
of Chrome Zero will be severely degraded if this approach is
taken.
1 Introduction
The rise in the importance of the web browser in modern
society has been accompanied by an increase in the sensitiv-
ity of the information the browser processes. Consequently,
browsers have become targets of attacks aiming to extract
or gain control of users’ private information. Beyond attacks
that target software vulnerabilities and attacks that attempt to
proﬁle the device or the user via sensor APIs, browsers have
also been used as a platform for mounting microarchitectural
side-channel attacks [22], which recover secrets by measuring
the contention on microarchitectural CPU components.
While traditionally such attacks were implemented using
native code [7, 29, 49, 58, 60, 79, 80], recent works have
demonstrated that JavaScript code in browsers can also be
used to launch such attacks [24, 30, 57, 69]. In an attempt
to mitigate JavaScript-based side-channel leakage, browser
vendors have mainly focused on restricting the ability of an
attacker to precisely measure time [15, 16, 84].
Side-channel attackers, in turn, attempt to get around these
restrictions by creating makeshift timers with varying accu-
racies through the exploitation of other browser APIs, such
as message passing or multithreading [42, 66, 72]. More re-
cently, Schwarz et al. [67] presented Chrome Zero, a Chrome
extension that protects against JavaScript-based side-channels
by blocking or restricting parts of the JavaScript API com-
monly used by side channel attackers, based on a user-selected
protection policy. Going even further, DeterFox [14] aims to
eliminate side-channel attacks by ensuring completely de-
terministic JavaScript execution, and NoScript [51] prevents
JavaScript-based attacks by completely disabling JavaScript.
A common trend in these approaches is that they are symp-
tomatic and fail to address the root cause of the leakage,
namely, the sharing of microarchitectural resources. Instead,
most approaches attempt to prevent leakage by modifying
browser behavior, striking different balances between security
and usability. Thus, we ask the following question.
What are the minimal features required for mounting mi-
croarchitectural side-channel attacks in browsers? Can at-
tacks be mounted in highly-restricted browser environments,
despite security-orientated API reﬁnements?
Besides being inﬂuenced by defenses, microarchitectural
attacks are also affected by an increased hardware diversiﬁ-
cation in consumer devices. While the market for high-end
processors used to be dominated by Intel, the past few years
have seen an increase in popularity of other alternatives, such
as AMD’s Zen architecture, Samsung’s Exynos, and the re-
cently launched Apple M1 cores.
Most microarchitectural attack techniques, however, are
inherently dependent on the speciﬁcs of the underlying CPU
hardware, and are typically demonstrated on Intel-based ma-
chines. While microarchitectural attacks on non-Intel hard-
ware do exist [46, 85], these are also far from universal, and
USENIX Association
30th USENIX Security Symposium    2863
Countermeasure
Chrome Zero Can Be
Policy Level
None
None
Reduced timer resolution
Medium
No timers, no threads
Paranoid
No timers, threads, or arrays
—
JavaScript completely blocked —
Bypassed?





Technique
External
Requirements
Cache Contention [24, 57, 69] None
None
Sweep Counting [69]
DNS Racing
Non-Cooperating DNS server
Cooperating WebSockets server
String and Sock
CSS Prime+Probe
Cooperating DNS server
Table 1: Summary of results: Prime+Probe Attacks can be Mounted Despite Strict Countermeasures
are also highly tailored to their respective hardware platforms.
Thus, given the ever increasing microarchitectural diversiﬁca-
tion, we ask the following secondary question.
Can microarchitectural side-channel attacks become
architecturally-agnostic? In particular, are there universal
side channel attacks that can be mounted effectively across
diverse architectures, without requiring hardware-dependent
modiﬁcations?
1.1 Our Contribution
Tackling the ﬁrst set of questions, in this paper we show that
side channel attacks can be mounted in highly restricted
browser environments, despite side-channel hardening of
large portions of JavaScript’s timing and memory APIs. More-
over, we show that even if JavaScript is completely disabled,
side-channel attacks are still possible, albeit with a lower
accuracy. We thus argue that completely preventing side chan-
nels in today’s browsers is nearly impossible, with leakage
prevention requiring more drastic design changes.
Next, tackling the second set of questions, we introduce
architecturally-agnostic side channel techniques, that can op-
erate on highly diverse architectures from different vendors.
Empirically evaluating this claim, we show side channel leak-
age from browser environments running on AMD, Apple,
ARM and Intel architectures with virtually no hardware-
speciﬁc modiﬁcations. Notably, to the best of our knowledge,
this is the ﬁrst side-channel attack on Apple’s M1 CPU.
Reducing Side Channel Requirements. We focus our in-
vestigation on website ﬁngerprinting attacks [34]. In these
attacks, an adversary attempts to breach the privacy of the
victim by ﬁnding out the websites that the victim visits. While
initially these attacks relied on network trafﬁc analysis, sev-
eral past works demonstrated that an attacker-controlled web-
site running on the victim machine can determine the identity
of other websites the victim visits [6, 39, 53, 57, 74].
To identify the set of JavaScript features required for cache
attacks, we build on the work of [69]. We start from their
website ﬁngerprinting attacks and design a sequence of new
attacks, each requiring progressively less JavaScript features.
Our process of progressively reducing JavaScript features cul-
minates in CSS Prime+Probe, which is a microarchitectural
attack implemented solely in CSS and HTML, yet is capable
of achieving a high accuracy even when JavaScript is com-
pletely disabled. To the best of our knowledge, this is the ﬁrst
microarchitectural attack with such minimal requirements.
Architecturally-Agnostic Side Channel Attacks. Next,
we tackle the challenge of mounting side channel attacks
across a large variety of computing architectures. We show
that the reduced requirements of our techniques essentially
make them architecturally-agnostic, allowing them to run on
highly diverse architectures with little adaptation. Empirically
demonstrating this, we evaluate our attacks on AMD’s Ryzen,
Samsung’s Exynos and Apple’s M1 architectures. Ironically,
we show that our attacks are sometimes more effective on
these novel CPUs by Apple and Samsung compared to their
well-explored Intel counterparts, presumably due to their sim-
pler cache replacement policies.
Evaluating Existing Side Channel Protections. Having
reduced the requirements for mounting side channel attacks
in browser contexts, we tackle the question of evaluating the
security guarantees offered by existing API hardening tech-
niques. To that aim, we deploy Chrome Zero [67] and measure
the attack accuracy in the presence of multiple security poli-
cies. We show that while disabling or modifying JavaScript
features does attenuate published attacks, it does little to block
attacks that do not require the disabled features.
As a secondary contribution, we ﬁnd that there are sev-
eral gaps in the protection offered by Chrome Zero, and that
ﬁxing those adversely affects Chrome Zero’s usability and
performance. This raises questions on the applicability of the
approach suggested in [67] for protecting browsers.
Attacking Hardened Browsers. Having shown the efﬁ-
cacy of our techniques in both Chrome and Chrome Zero
environments, we also evaluate our attacks on several popular
security-oriented browsers, such as the Tor Browser [71] and
DeterFox [14]. Here, we show that attacks are still possible,
albeit at lower accuracy levels.
Summary of Contribution.
make the following contributions:
• We design three cache-based side-channel attacks on
browsers, under progressively more restrictive assumptions.
In particular, we demonstrate the ﬁrst side-channel attack
in a browser that does not rely on JavaScript or any other
In summary, in this paper we
2864    30th USENIX Security Symposium
USENIX Association
mobile code (Section 3).
• We empirically demonstrate architecturally-agnostic side
channel attacks, showing the ﬁrst techniques that can handle
diverse architectures with little adaptation (Section 3.5).
• We re-evaluate the JavaScript API-hardening approach
taken by Chrome Zero, demonstrating signiﬁcant limita-
tions that affect security, usability, and performance (Sec-
tion 5).
• We evaluate our attacks in multiple scenarios, including in
the restrictive environments of the Tor Browser and Deter-
Fox (Section 6).
1.2 Responsible Disclosure
Following the practice of responsible disclosure, we have
shared a draft of this paper with the product security teams of
Intel, AMD, Apple, Chrome and Mozilla prior to publication.
2 Background
2.1 Microarchitectural Attacks
To improve performance, modern processors typically exploit
the locality principle, which notes the tendency of software to
reuse the same set of resources within a short period of time.
Utilizing this, the processor maintains state that describes past
program behavior, and uses it for predicting future behavior.
Microarchitectural Side Channels. The shared use of a
processor, therefore, creates the opportunity for information
leakage between programs or security domains [22]. Leakage
could be via shared state [3, 32, 44, 80] or via contention
on either the limited state storage space [27, 49, 58, 60] or
the bandwidth of microarchitectural components [2, 10, 82].
Exploiting this leakage, multiple side-channel attacks have
been presented, extracting cryptographic keys [2, 10, 11, 25,
32, 49, 58, 60, 65, 80, 82], monitoring user behavior [29, 33,
57, 64, 69], and extracting other secret information [7, 36, 79].
Side-channel attacks were shown to allow leaking between
processes [32, 49, 58, 60, 80], web browser tabs [24, 57, 69],
virtual machines [37, 49, 80, 86], and other security bound-
aries [7, 18, 36, 44]. In this work we are mostly interested
in the two attack techniques that target the limited storage in
caching elements, mainly data caches.
Prime+Probe. The Prime+Probe attack [49, 58, 60] exploits
the set-associative structure in modern caches. The attacker
ﬁrst creates an eviction set, which consists of multiple memory
locations that map to a single cache set. The attacker then
primes the cache by accessing the locations in the eviction set,
ﬁlling the cache set with their contents. Finally, the attacker
probes the cache by measuring the access time to the eviction
set. A long access time indicates that the victim has accessed
memory locations that map to the same cache set, evicting
part of the attacker’s data, and therefore teaches the attacker
about the victim’s activity.
Cache Occupancy.
In the cache occupancy attack [54, 69],
the attacker repeatedly accesses a cache-sized buffer while
measuring the access time. Because the buffer consumes the
entire cache, the access time to the buffer correlates with the
victim’s memory activity. The cache occupancy attack is sim-
pler than Prime+Probe, and provides the attacker with less
detailed spatial and temporal information. It is also less sensi-
tive to the clock resolution [69]. Sweep counting is a variant
of the cache occupancy attack, in which the adversary counts
the number of times that the buffer can be accessed between
two clock ticks. The main advantage of this technique is that
it can work with even lower-resolution clocks.
2.2 Defenses
The root cause of microarchitectural side-channels is the shar-
ing of microarchitectural components across code executing
in different protection domains. Hence, partitioning the state,
either spatially or temporally, can be effective in preventing
attacks [23]. Partitioning can be done in hardware [19, 77] or
by the operating system [40, 45, 50, 68].
Fuzzing or reducing the resolution of the clock are often
suggested as a countermeasure [16, 35, 73, 84]. However,
these approaches are less effective against the cache occu-
pancy attack, as it does not require high-resolution timers.
Furthermore, these approaches only introduce uncorrelated
noise to the channel and do not prevent leakage [17].
Randomizing the cache architecture is another commonly
suggested countermeasure [61, 77, 78]. These often aim to
prevent eviction set creation. However, they are less effective
against the cache occupancy attack, both because the attack
does not require eviction sets and because these techniques
do not change the overall cache pressure.
2.3 The JavaScript Types and Inheritance
JavaScript Typing. JavaScript is an object oriented language
where every value is an object, excluding several basic prim-
itive types. For object typing, JavaScript mostly uses “duck
typing”, where an object is considered to have a required
type as soon as it has the expected methods or properties.
JavaScript deviates from this model for some built-in types,
such as TypedArrays, which are arrays of primitive types.
While JavaScript code mostly uses these built-in types equiva-
lently to objects, the JavaScript engine itself provides certain
APIs that match the arguments against the required built-in
types, raising exceptions if they mismatch.
JavaScript Inheritance.
JavaScript uses a prototypal inher-
itance model, where each object can have a single prototype
object. When searching for a property of an object, JavaScript
ﬁrst checks the object itself. If the property is not found on in
the object, JavaScript proceeds to check its prototype, until it
either ﬁnds the property or reaches an object that has no pro-
totype. The list of prototypes used in this search is called the
USENIX Association
30th USENIX Security Symposium    2865
object’s prototype chain. Finally, when JavaScript modiﬁes an
object property, the prototype chain is not consulted. Instead,
JavaScript sets the property on the object itself, creating it if
it does not already exist.
2.4 Virtual Machine Layering
Virtual machine layering [43] is a low overhead technique for