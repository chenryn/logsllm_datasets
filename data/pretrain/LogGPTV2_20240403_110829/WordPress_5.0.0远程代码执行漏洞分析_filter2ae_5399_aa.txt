# WordPress 5.0.0远程代码执行漏洞分析
|
##### 译文声明
本文是翻译文章，文章原作者 ripstech，文章来源：blog.ripstech.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、概要
本文详细介绍了如何通过路径遍历及本地文件包含（LFI）漏洞，在WordPress中实现远程代码执行（RCE）。该漏洞在WordPress中已存在6年之久。攻击视频参考[此处](https://blog.ripstech.com/videos/wordpress-image-rce.mp4)链接。
在WordPress站点上，如果攻击者具备`author`及以上权限，就可以在底层服务器上执行任意PHP代码，最终可以远程完全接管整个站点。我们已经向WordPress安全团队反馈了另一个漏洞，该漏洞也能让攻击者在任意WordPress站点上获得类似访问权限，目前后一个漏洞尚未修复。
## 二、受影响版本
在4.9.9及5.0.1版本中，由于另一个安全补丁的存在，因此本文介绍的漏洞无法顺利利用。然而路径遍历漏洞依然可能存在，并且当前处于未修复状态。任何WordPress站点如果安装了无法正确处理`Post
Meta`条目的插件，漏洞就可能利用成功。在我们的[WordPress安全月](https://blog.ripstech.com/2019/wordpress-security-month/)活动中，我们已经发现了某些流行插件（活跃安装量达数百万计）存在这类问题。
根据WordPress下载页面的统计数据，互联网上超过[33%](https://blog.ripstech.com/2019/wordpress-image-remote-code-execution/#fn:1)的站点正在使用WordPress。考虑到插件可能会带来新的问题，并且有些网站并没有及时更新，因此我们认为受影响的站点数仍达数百万个。
## 三、技术分析
我们使用自己研发的SAST解决方案RIPS（参考[示例](https://demo-3.ripstech.com/scan/44/55)），在3分钟内就检测到了路径遍历及本地文件包含漏洞。然而，初步分析时这些漏洞似乎无法使用。经过详细调研，事实证明这些漏洞利用起来虽然非常复杂，但的确有可能成功利用。
攻击过程及原理示意请参考[此处](https://blog.ripstech.com/videos/wordpress-image-rce-animation.mp4)视频。
###  背景：WordPress图像管理
当我们将图像上传到WordPress站点时，图像首先会被存放到上传目录中（`wp-content/uploads`）。WordPress也会在数据库中创建该图像的一个内部引用，以跟踪图像的元信息（如图像所有者或上传时间）。
这种元信息以`Post
Meta`条目形式存放在数据库中，每个条目都包含一对key/value，与某个特定的ID相对应。以`evil.jpg`这张上传图像为例，相关`Post
Meta`如下所示：
    MariaDB [wordpress]> SELECT * FROM wp_postmeta WHERE post_ID = 50;
    +---------+-------------------------+----------------------------+
    | post_id | meta_key                | meta_value                 |
    +---------+-------------------------+----------------------------+
    |      50 | _wp_attached_file       | evil.jpg                   |
    |      50 | _wp_attachment_metadata | a:5:{s:5:"width";i:450 ... |
    ...
    +---------+-------------------------+----------------------------+
在本例中，图片所对应的`post_ID`值为50。如果用户后续想使用该`ID`来使用或者编辑该图像，WordPress会查找匹配的`_wp_attached_file`元数据条目，使用其对应的值在`wp-content/uploads`目录中定位该文件。
###  根本问题： Post Meta可被覆盖
在WordPress 4.9.9和5.0.1之前的版本中，`Post Meta`条目可以被修改，被设置为任意值。
当某张图像被更新时（如图像描述发生改动），那么WordPress就会调用`edit_post()`函数，该函数直接作用于`$_POST`数组。
    function edit_post( $post_data = null ) {
        if ( empty($postarr) )
            $postarr = &$_POST;
        ⋮
        if ( ! empty( $postarr['meta_input'] ) ) {
            foreach ( $postarr['meta_input'] as $field => $value ) {
                update_post_meta( $post_ID, $field, $value );
            }
        }
如上所示，攻击者有可能注入任意`Post
Meta`条目。由于WordPress并没有检查哪些条目被修改过，因此攻击者可以更新`_wp_attached_file`元数据，将其设置为任意值。该操作并不会重命名文件，只是修改了WordPress在尝试编辑目标图像时所要寻找的文件。这将导致路径遍历问题，后面我们会进一步分析。
###  修改Post Meta实现路径遍历
路径遍历问题存在于`wp_crop_image()`函数中，当用户裁剪图像时，该函数就会被调用。
该函数会获取待裁剪的图像ID值（`$attachment_id`），并从数据库中获取相应的`_wp_attached_file` `Post
Meta`信息。
需要注意的是，由于`edit_post()`中存在缺陷，因此`$src_file`可以被设置为任意值。
简化版的`wp_crop_image()`函数如下，实际代码位于`wp-admin/includes/image.php`文件中。
    function wp_crop_image( $attachment_id, $src_x, ...) {
        $src_file = $file = get_post_meta( $attachment_id, '_wp_attached_file' );
        ⋮
在下一步中，WordPress必须确保图像实际存在并加载该图像。在WordPress中加载指定图像有两种方法。第一种是简单地在`wp-content/uploads`目录中，利用`_wp_attached_file` `Post Meta`信息查找指定的文件名（参考下一个代码段的第二行）。
如果该方法查找失败，则WordPress会尝试从站点服务器上下载该图像，这是一种备用方案。为了完成该操作，WordPress会生成一个下载URL，该URL中包含`wp-content/uploads`目录对应的URL以及`_wp_attached_file` `Post Meta`条目中存储的文件名（如下代码片段第6行）。
举一个具体例子：如果`_wp_attached_file` `Post
Meta`条目中存储的值为`evil.jpg`，那么WordPress首先会尝试检查`wp-content/uploads/evil.jpg`文件是否存在。如果该文件不存在，则尝试从`https://targetserver.com/wp-content/uploads/evil.jpg`这个URL下载该文件。
之所以尝试下载文件，而不是在本地搜索文件，原因在于某些插件会在用户访问URL时动态生成图像。
请注意，这个过程并没有进行任何过滤处理。WordPress只会简单地将上传目录以及URL拼接起来（URL中包含用户输入的`$src_file`）。
一旦WordPress通过`wp_get_image_editor()`成功加载一个有效的图像，就会进行裁剪处理。
        ⋮
        if ( ! file_exists( "wp-content/uploads/" . $src_file ) ) {