title:Probability Model Transforming Encoders Against Encoding Attacks
author:Haibo Cheng and
Zhixiong Zheng and
Wenting Li and
Ping Wang and
Chao-Hsien Chu
Probability Model Transforming Encoders 
Against Encoding Attacks
Haibo Cheng, Zhixiong Zheng, Wenting Li, and Ping Wang, Peking University; 
Chao-Hsien Chu, Pennsylvania State University
https://www.usenix.org/conference/usenixsecurity19/presentation/cheng
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Probability Model Transforming Encoders
Against Encoding Attacks
Haibo Cheng†,‡, Zhixiong Zheng†,‡, Wenting Li†,‡, Ping Wang†,‡,(cid:63), Chao-Hsien Chu§
†Peking University, {hbcheng,zxzheng,wentingli,pwang}@pku.edu.cn
‡ Key Laboratory of High Conﬁdence Software Technologies (PKU), Ministry of Education, China
§Pennsylvania State University, PI:EMAIL
(cid:63)Corresponding author
Abstract
Honey encryption (HE) is a novel encryption scheme for
resisting brute-force attacks even using low-entropy keys
(e.g., passwords). HE introduces a distribution transforming
encoder (DTE) to yield plausible-looking decoy messages for
incorrect keys. Several HE applications were proposed for
speciﬁc messages with specially designed probability model
transforming encoders (PMTEs), DTEs transformed from
probability models which are used to characterize the intricate
message distributions.
We propose attacks against three typical PMTE schemes.
Using a simple machine learning algorithm, we propose a
distribution difference attack against genomic data PMTEs,
achieving 76.54%–100.00% accuracy in distinguishing real
data from decoy one. We then propose a new type of attack—
encoding attacks—against two password vault PMTEs,
achieving 98.56%–99.52% accuracy. Different from distribu-
tion difference attacks, encoding attacks do not require any
knowledge (statistics) about the real message distribution.
We also introduce a generic conceptual probability model—
generative probability model (GPM)—to formalize probabil-
ity models and design a generic method for transforming an
arbitrary GPM to a PMTE. We prove that our PMTEs are
information-theoretically indistinguishable from the corre-
sponding GPMs. Accordingly, they can resist encoding at-
tacks. For our PMTEs transformed from existing password
vault models, encoding attacks cannot achieve more than
52.56% accuracy, which is slightly better than the randomly
guessing attack (50% accuracy).
1 Introduction
Password-based encryption (PBE) is a fundamental scheme
in many real-world systems for ﬁle encryption or authentica-
tion. However, due to the limitations of human memory, users
often use weak passwords [26, 43] and reuse them [11, 30].
This leads to the vulnerability of traditional PBEs (e.g., PKCS
#5 [22]) against brute-force attacks (so-called password guess-
ing attacks), including trawling guessing attacks [25, 42] and
targeted guessing attacks [29, 41].
Several methods were proposed to address this threat. We
summarize these countermeasures into three types. The ﬁrst
type is to increase the complexity of decryption for attack-
ers, including: 1) salting, which pressurizes attackers into
enumerating passwords for every user (salt); 2) using spe-
cial password-hashing functions (e.g., iterated hash func-
tions [22, 33] and memory-hard functions [6, 31]) as the key
derivation function (KDF) in PBE, which increases attack-
ers’ cost of computing and memory by a constant factor but
also consumes legitimate users’ extra cost by the same factor.
For example, LastPass, a password vault software, utilizes
these methods, including salting, 5,000 rounds of PBKDF2-
SHA256 on clients and 100,000 rounds on servers [38].
The second type of countermeasures is to harden passwords
with other factors (e.g., servers [12, 23], devices [19, 35, 37],
biometrics [9,28]) to generate high-entropy keys. These meth-
ods are widely used in authentication protocols, for example,
two-factor authentication [20, 36]. Note that LastPass also
supports YubiKey devices to secure password vaults [2]. How-
ever, these methods need additional devices (servers, biomet-
ric readers) and do worse than single password methods on
deployability [8]. Besides, if the additional factor gets stolen
or lost (without a backup), the message encrypted cannot be
recovered (e.g., [23]).
The last type of countermeasures is to generate plausible-
looking decoy messages for wrong keys to confuse attackers.
Several speciﬁc encryption schemes for speciﬁc data used this
method [5, 17], and Juels and Ristenpart proposed a generic
method called Honey Encryption (HE) [21]. HE introduces a
distribution-transforming encoder (DTE) and encodes a mes-
sage following a known distribution to a uniform seed before
encrypting. Therefore, plausible-looking decoy messages are
generated by DTE decoding incorrect seeds when decrypting
a ciphertext under wrong keys. If the DTE is perfectly secure,
i.e., decoy messages are indistinguishable from real ones, then
attackers enumerating all passwords only get many messages
and cannot distinguish the right one. This countermeasure
USENIX Association
28th USENIX Security Symposium    1573
achieves information-theoretic security without declining on
deployability and bringing legitimate users’ extra cost.
Owing to the security of HE, several applications of HE
[10,14,18] were proposed. In this paper, we focus on three typ-
ical ones, including two password vault schemes [10, 14] and
one genomic data protection scheme [18]. A password vault
contains an individual user’s multiple passwords on websites
or services and is usually encrypted under a user-chosen pass-
word, called master password. Passwords stored in password
vaults are of great value (e.g., PINs of credit cards, passwords
of virtual currency accounts) and hence greatly attract attack-
ers’ attention. Similar to password vaults, genomic data is
sensitive and needs long-term protection, as it is unchange-
able during one’s lifetime and correlated with his relatives.
The key of a HE scheme is to design a secure DTE. It is
easy for messages following a simple distribution, for exam-
ple, a uniform distribution, a normal distribution. Juels and
Ristenpart [21] designed a generic purpose DTE IS-DTE and
several speciﬁc DTEs for RSA secret keys. Notwithstanding,
it is still a great challenge to design a secure DTE for messages
following intricate distributions, e.g., natural language texts,
passwords, password vaults, and genomic data. Probability
models are usually needed to characterize the message distri-
butions. We call these DTEs probability model transforming
encoders (PMTEs), which are transformed from probability
models instead of distributions. Note that Chatterjee et al. [10]
named DTEs for natural language texts as natural language
encoders (NLEs), which are a subset of PMTEs. Though all
the existing PMTE schemes [10, 14, 18] are designed for spe-
ciﬁc messages, it is still of necessity to propose a generic
PMTE designing method.
In addition, the security evaluations of PMTEs are not com-
prehensive. The designers of password vault PMTEs [10, 14]
tried to use machine learning algorithms and Kullback-Leibler
divergence to distinguish real and decoy vaults, without con-
sidering the difference between the real and decoy seeds. For
the PMTEs in [18], it evaluated the goodness of probability
models with chi-square goodness-of-ﬁt tests, but did not study
the inﬂuence of their goodness on the security of PMTEs.
These issues on PMTE study hinder the widespread use of
HE.
1.1 Our Contribution
In order to evaluate the security of PMTEs, we propose a
framework with encoding attacks and distribution difference
attacks. We show that password vault PMTEs [10, 14] suffer
from encoding attacks while genomic data PMTEs [18] can-
not resist distribution difference attacks. Encoding attacks,
which are a new type of attack we propose, do not require any
knowledge of real message distributions. The strong encoding
attack achieves 98.56%–99.52% accuracy (in distinguishing
a real vault from a decoy one) against password vault PMTEs.
Meanwhile, using a principal component analysis (PCA) and
a support vector machine (SVM) with a radial basis func-
tion (RBF) kernel, a distribution difference attack achieves
76.54%–100.00% accuracy against genomic data PMTEs.
We also propose a generic PMTE designing method for
arbitrary probability models, by introducing a generic con-
ceptual probability model—generative probability model
(GPM)—to formalize probability models. We prove that our
PMTEs are information-theoretically indistinguishable from
corresponding GPMs, which means that they can resist en-
coding attacks. For our proposed PMTEs of existing pass-
word vault models, encoding attacks cannot capture more
than 52.56% accuracy, compared with the randomly guessing
attack (50% accuracy).
2 Background and Related Works
We introduce the basic concepts of HE as well as three typical
HE applications with their speciﬁc PMTEs.
2.1 Honey Encryption
Honey Encryption (HE) [21], proposed by Juels and Risten-
part, is a novel encryption scheme using low-entropy keys
(e.g., passwords) which resists brute-force attack through gen-
erating a plausible decoy message for every incorrect key.
To produce decoy messages, HE introduces a randomized
encoder, called distribution transforming encoder (DTE).
Figure 1: Honey Encryption
Figure 1 shows the encryption progress for a message M.
The encryption ﬁrst encodes M into a seed S by DTE, then
encrypts S using PBE with the key K and ﬁnally outputs the
ciphertext C. The PBE used in HE is a traditional PBE but
must satisfy that decrypting any ciphertext under any key
yields a valid seed (e.g., AES in CTR-mode with PBKDF).
Therefore, decrypting C under an incorrect key K(cid:48) will yield
a wrong seed S(cid:48) and a decoy message M(cid:48) by decoding S(cid:48).
The key of HE is designing a secure DTE which generates
indistinguishable decoy messages. Juels and Ristenpart [21]
proposed a general purpose DTE IS-DTE, for the messages
following a simple distribution, such as a uniform distribution.
2.2 Password Vault Schemes
Two HE-based password vault schemes [10, 14] were pro-
posed to resist brute-force attack in the literature. A password
vault contains several passwords encrypted under a master
1574    28th USENIX Security Symposium
USENIX Association
MDTEPBECKSpassword and hence is a rich target for attackers due to the
value of passwords. Using HE, attackers who have stolen an
encrypted password vault will get many vaults by enumerating
master passwords ofﬂine and need to verify the correctness
of these vaults online. In contrast to ofﬂine guessing, online
guessing is more resource-consuming, because it is easily
blocked by remote servers with diversities of methods (e.g.,
login rate limiting [16,32] and malicious login detection [13]).
Hence, HE-based password vault schemes have great improve-
ments in security. Moreover, user surveys [11, 24, 30] and
empirical experiments on real data [7, 11, 41, 42] showed that
users often use weak passwords and reuse passwords on dif-
ferent services and websites. Therefore, designing a PMTE
for password vaults needs to characterize the single-password
distribution and the similarity between passwords in a vault.
Chatterjee et al. [10] proposed the ﬁrst HE-based password
vault scheme NoCrack. They improved a kind of password
model—PCFG model [42]—and put forward a sub-grammar
approach for the password similarity based on PCFG models.
We denote this improved PCFG model as Chatterjee-PCFG
in this paper. By designing PMTEs for PCFG models and
sub-grammars respectively, they presented a PMTE for pass-
word vaults. Also, Chatterjee et al. [10] designed PMTEs for
another kind of password models—Markov models.
Golla et al. [14] put forward a new PMTE for password
vaults. In contrast to Chatterjee et al. [10], Golla et al. used a
Markov model [25] for the single-password distribution and a
reuse-rate approach for the password similarity. Their PMTE
for password vaults combines Chatterjee et al.’s PMTEs for
Markov models and IS-DTEs for normal distributions (as-
suming reuse-rates follow normal distributions). In addition,
Golla et al. [14] brought in the concept of adaptive PMTEs
(Golla et al. used the word adaptive NLEs). By adjusting the
Markov model according to the real vault, an adaptive PMTE
can generate decoy vaults which are more similar to the real
vault. Therefore, these decoy vaults are more difﬁcult to be
distinguished from the real one. In this paper, we call adjusted
probability models according to the real message adaptive
probability models, in contrast to static probability models.
Chatterjee et al.’s [10] and Golla et al.’s [14] PMTEs for
password vaults have the same form named encode-then-
concatenate. Taking the Chatterjee et al.’s PMTE for a PCFG
model as an example, when encoding a password, this PMTE:
1) parses the derivation of the password; 2) encodes each
production rule in the derivation to a seed respectively; 3)
concatenates these seeds of production rules in order and
pads the concatenation to a ﬁx length. Other PMTEs are
similar, which encode each character or reuse-rate and then
concatenate these seeds.
2.3 Genomic Data Protection Scheme
Genomic data is more sensitive than password vault and needs
long-term protection. Once a person’s genomic data is com-
promised, it will affect him during his lifetime and even his
relatives, because of the correlation between relatives’ ge-
nomic data. Huang et al. [18] proposed a genomic data pro-
tection scheme called GenoGuard based on HE. The genomic
data protected by GenoGuard is represented by a sequence of
single nucleotide variants (SNVs), which can be viewed as a
string of the alphabet {0,1,2}.
To ﬁt genomic data, Huang et al. [18] evaluated four types
of models with chi-square goodness-of-ﬁt tests, including a
uniform distribution model, a public LD (linkage disequi-
librium) model, three Markov models, and a recombination
model. Since the recombination model delivers the best per-
formance, they chose it for GenoGuard. Furthermore, Huang
et al. [18] proposed a novel PMTE for these sequences with
a different form named shrink-then-encode. When encoding,
this PMTE shrinks the seed interval for each character in
the string according to the probability of the character and
randomly picks a seed in the ﬁnal seed interval.
3 Attacks Against Typical PMTEs
A PMTE is secure (i.e., decoy messages generated by a PMTE
are indistinguishable from real ones), if and only if the proba-
bility model is accurate for the real message distribution and
the PMTE is secure for the probability model. Based on that,
we propose a framework to evaluate the security of PMTEs
with two types of attacks: 1) distribution difference attacks ex-
ploiting the difference between the real message distribution
and the message probability model (i.e., the decoy message
distribution); 2) encoding attacks exploiting the difference
between the probability model and the PMTE.
3.1 Attacker Model
Attackers that we study in this paper have stolen ciphertext
of a message and further want to recover it. Based on the
Kerckhoffs’s principle, we assume that attackers know the
HE algorithm, including DTEs, but do not know the key or
any information of the message. It is reasonable because the
program shipped to users usually contains the encryption/
decryption module. Moreover, this is an essential assumption
for an attacker to carry out decrypting. More advanced at-
tackers (e.g., attackers in [10]) may equip themselves with
some knowledge about the real message distribution (e.g.,
the character distribution of messages). However, encoding
attackers we employed do not need any information about the