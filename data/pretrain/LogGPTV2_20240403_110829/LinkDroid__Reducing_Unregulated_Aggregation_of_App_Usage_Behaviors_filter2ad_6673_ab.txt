### Monitoring Runtime Behaviors of Apps

To effectively monitor the runtime behaviors of apps, we track their access to specific identifiers and contextual information. Specifically, we monitor:

- **Device-Specific Identifiers:** IMEI, Android ID, MAC
- **User-Specific Identifiers:** Phone Number, Accounts, Subscriber ID, ICC Serial Number
- **Context-Based Information:** IP, Nearby Access Points (APs), Location

Additionally, we monitor both explicit and implicit Inter-Process Communication (IPC) channels, including:
- **Explicit IPC Channels:** Intents, Service Binding
- **Implicit IPC Channel:** Indirect Read-Write (RW) operations on shared files or databases

This list, while not exhaustive, covers the most common and widely-used aggregation channels. Table 2 provides a detailed list of all contributing sources, which will be elaborated in Section 3.4.

### Linkability Criteria

The criteria for determining whether two apps are linkable vary depending on the source of the linkability. For unique and consistent identifiers such as Android ID, IMEI, Phone Number, MAC, Subscriber ID, Account, and ICC Serial Number, two apps are considered linkable if they both access the same type of identifier.

For pairwise IPCs, such as intents, service bindings, and indirect RW, the communicating parties involved are linkable. For more implicit and fuzzy information, like location, nearby APs, and IP, established methods can also determine linkability. For example, user-specific location clusters (Points of Interest, or PoIs) are known to uniquely identify a user [11, 15, 29]. An adversary can link different apps by checking if the location information they collect reveals the same PoIs. We use a lightweight algorithm to extract the top 2 PoIs, typically corresponding to home and work addresses. Similarly, the consistency and persistence of a user's PoIs are reflected in their AP clusters and frequently-used IP addresses, allowing us to establish linkability across apps using this contextual information.

### DLG: A Mobile OS Extension

DLG (Dynamic Linkage Graph) enables the construction of cross-app linkability from the runtime behaviors of apps. Here, we introduce how it can be implemented as an extension to current mobile operating systems, using Android as an illustrative example. Other implementation options, such as user-level interception (Aurasium [28]) or dynamic OS instrumentation (Xposed Framework [27]), were also considered. However, these options have limitations: user-level interception is insecure, and dynamic OS instrumentation cannot handle native code. Nonetheless, developers can implement a useful subset of DLG using these more deployable techniques.

#### Android Basics

Android is a Linux-based mobile OS developed by Google. Each app is assigned a different Linux user ID (UID) and operates within its own sandbox. Inter-Process Communications (IPCs) are facilitated across different sandboxes via the Binder protocol, a lightweight Remote Procedure Call (RPC) mechanism. Android apps consist of four types of components:
- **Activity:** Represents a single screen supporting user interactions.
- **Service:** Runs in the background to perform long-running operations.
- **Content Provider:** Manages and queries persistent data, such as databases.
- **Broadcast Receiver:** Listens to system-wide broadcasts and filters relevant ones.

Next, we describe how we instrument the Android framework to monitor app interactions with the system and each other through these components.

### Implementation Details

To construct DLG in Android, we need to track apps' access to various OS-level information and IPCs between apps. This is achieved by instrumenting different components of the Android framework.

- **System Services:** Apps access most identifying information, such as IMEI and MAC, by interacting with system services. These services are part of the Android framework and have clear interfaces defined in AIDL (Android Interface Definition Language). By instrumenting the public functions in each service that return persistent identifiers, we can maintain a timestamped record of which app accessed what type of identifying information via which service (see Figure 2).

- **Content Providers:** Some identifying information, such as Android ID, is accessed by querying system content providers. The Android framework has a universal choke point for all access to remote content providers, the server-side stub class `ContentProvider.Transport`. By instrumenting this class, we can log which database (URI) an app is accessing and with what parameters and actions (see Figure 4).

- **Intents:** Apps can launch IPCs explicitly using intents, which are abstract descriptions of operations to be performed. Intents can be sent to a specific target (app component) or broadcast to the entire system. Android has a centralized filter (`com.android.server.firewall.IntentFirewall`) that enforces system-wide policies for all intents. We extend this filter to record and intercept all intent communications across apps (see Figure 3).

- **Service Bindings:** Android allows an app to communicate explicitly with another app by binding to one of the services it exports. Once the binding is established, the two apps can communicate under a client-server model. We instrument `com.android.server.am.ActiveServices` in the Activity Manager to monitor all attempts to establish service bindings across apps.

- **Indirect RW:** Apps can conduct IPCs implicitly by exploiting shared persistent storage. For example, two apps can write and read the same file on the SD card to exchange identifying information. We monitor read and write access to persistent storage by customizing the FUSE (Filesystem in Userspace) daemon (`/system/core/sdcard/sdcard.c`). This allows us to implement a Read-Write monitor that captures implicit communications via reading a file previously written by another app (see Figure 5). Our Read-Write monitor also considers similar indirect communications via system Content Providers.

By placing hooks at the aforementioned locations in the system framework, we gather all the necessary information to construct a DLG. For our measurement study, we log and upload these statistics to a remote server for analysis. In our countermeasure solutions, these logs are used locally to derive dynamic defense decisions.

### Linkability in the Real World

In this section, we study app-level linkability in real-world scenarios. We first present an overview of the current threats and then analyze the extent to which each linkability source contributes to the overall threat. Finally, we discuss how these sources can be or have been exploited for reasons unrelated to app functionalities, paving the way for developing practical countermeasures.

#### Deployment and Settings

We prototyped DLG on Cyanogenmod 11 (based on Android 4.4.1) and installed the extended OS on 7 Samsung Galaxy IV devices and 6 Nexus V devices. We recruited 13 participants from students and staff in our institution, spanning 8 different academic departments. Of the 13 participants, 6 were female and 7 were male. Before using our experimental devices, 7 of them were Android users and 6 were iPhone users. Participants were asked to operate their devices normally without any extra requirements and had the option to temporarily turn off our extension for privacy. Logs were uploaded once per hour when the device was connected to Wi-Fi. We excluded built-in system apps and focused on third-party apps installed by the users themselves. Note that our study is limited in size, and the results may not generalize.

#### Data and Findings

During a 47-day period, we observed a total of 215 unique apps for 13 users. On average, each user installed 26 apps, and each app accessed 4.8 different linkability sources. More than 80% of the apps were installed within the first two weeks after deployment, and most apps accessed the majority of the linkability sources they were interested in during the first day of installation (see Figure 6). This suggests that a short-term measurement (a few weeks) would be sufficient to capture a representative view of the problem.

**Overview:**
Our measurement indicates a concerning threat: two random apps are linkable with a probability of 0.81, and an adversary only needs to control 2.2 apps (0.2 additional app), on average, to link them. This means that an adversary in the current ecosystem can aggregate information from most apps without additional efforts. Specifically, we found that 86% of the apps a user installed on their device are directly linkable to the Facebook app, indicating a high risk of identity exposure.