LongBasic, and LongComplex passwords were guessed
only by a single approach.
4.3.2 Guessing Success by Password Characteristics
While it is unsurprising that different approaches do bet-
ter at guessing distinct types of passwords, we found dif-
ferences that were large and difﬁcult to predict.
Character classes and length We ﬁrst considered how
efﬁciently automated approaches guessed passwords rel-
ative to their length and character-class count. These two
characteristics are of particular interest because they are
frequently used in password-composition policies.
As shown in Figure 9, the impact of adding charac-
ter classes is not as straightforward as one might expect.
While the general trend is for passwords with more char-
acter classes to be stronger, the details vary. Markov ex-
periences a large drop in effectiveness with each increase
in character classes (63% to 52% to 23% to 8%). JTR, by
contrast, ﬁnds only a minor difference between one and
two classes (72% to 70%). PCFG actually increases in
effectiveness between one and two classes (78% to 86%).
Since changes in security and usability as a result of dif-
ferent policies are often incremental (e.g., [8]), the mag-
nitude of these disagreements can easily affect research
conclusions about the relative strength of passwords.
In contrast, we did not ﬁnd surprising idiosyncrasies
based on the length of the password. For all approaches,
cracking efﬁciency decreased as length increased.
Character-level password characteristics As the re-
search community seeks to understand the characteristics
of good passwords, a researcher might investigate how
easy it is to guess all-digit passwords, which are com-
mon [6], or examine the effect of character substitutions
(e.g., $Hplovecraft!$ → $Hpl0v3cr@ft!$) on guessabil-
ity. Despite their sometimes similar effectiveness over-
all, approaches often diverged when guessing passwords
that had these characteristics. As a result, researchers
using different approaches could draw different conclu-
sions about the guessability of these properties.
The guessability of the 1,490 passwords (across sets)
composed entirely of lowercase letters varied starkly by
guessing approach. This variation is particularly no-
table because such passwords made up 29% of Basic
and LongBasic passwords, and were impermissible un-
der the other two composition policies. As shown in Fig-
ure 10, Hashcat guessed few such passwords until well
into the billions of guesses, whereas Markov success-
fully guessed passwords composed entirely of lowercase
letters throughout its attack.
In contrast, PCFG had a
large spike in successful guesses between 1 million and
10 million guesses, but then plateaued. JTR had early
success, but similarly plateaued from 10 million guesses
until into the trillions of guesses.
Similarly, approaches differed in their efﬁciency
guessing passwords containing character substitutions,
which we identiﬁed using crowdsourcing on Amazon’s
Mechanical Turk. Passwords identiﬁed by crowdworkers
as containing character substitutions included 4Everb-
lessed, B1cycle Race, and Ca$hmoneybr0. PCFG per-
formed poorly relative to JTR and Markov at guessing
passwords with character substitutions. A researcher us-
ing only PCFG could mistakenly believe these passwords
are much stronger than they actually are. We found simi-
lar differences with many other common characteristics,
potentially skewing research conclusions.
Actionable takeaways Given the many passwords
guessed by only a single cracking approach and the sys-
tematic differences in when passwords with certain char-
acteristics are guessed, we argue that researchers must
consider major cracking approaches in parallel.
Our results also show how comparative analyses un-
cover relative weaknesses of each approach. Upon close
examination, many of these behaviors make sense. For
example, PCFG abstracts passwords into structures of
non-terminal characters based on character class,
ig-
474  24th USENIX Security Symposium 
USENIX Association
12
1 class2 classes3 classes4 classes0102030405060708090HashcatPCFGJTRMarkovPercentage of Passwords Guessednoring contextual information across these boundaries.
As a result, P@ssw0rd would be split into “P,” “@,”
“ssw,” “0,” and “rd,” explaining PCFG’s poor perfor-
mance guessing passwords with character substitutions.
4.4 Robustness of Analyses to Approach
In this section, we examine whether differences among
automated cracking approaches are likely to affect con-
clusions to two main types of research questions.
We ﬁrst consider analyses of password sets, such
as passwords
created under particular password-
composition policies. We ﬁnd such analyses to be some-
what, but not completely, robust to the approach used.
In contrast, per-password analyses are very sensitive
to the guessing approach. Currently, such analyses are
mainly used in security audits [61] to detect weak pass-
words.
In the future, however, per-password strength
metrics may be used to provide detailed feedback to users
during password creation, mirroring the recent trend of
data-driven password meters [10, 33]. The ability to cal-
culate a guess number per-password is a major advantage
of parameterized metrics over statistical metrics, yet this
advantage is lost if guess numbers change dramatically
when a different approach is used. Unfortunately, we
sometimes found huge differences across approaches.
4.4.1 Per Password Set
As an example of an analysis of large password sets, we
consider the relative guessability of passwords created
under different composition policies, as has been studied
by Shay et al. [56] and Kelley et al. [31].
Figure 11 shows the relative guessability of the three
password sets examined by the Pros. LongBasic pass-
words were most vulnerable, and LongComplex pass-
to early guessing (under 109
words least vulnerable,
guesses). Between roughly 109 and 1012 guesses, Long-
Basic and Complex passwords followed similar curves,
though Complex passwords were cracked with higher
success past 1012 guesses. Very few LongComplex
passwords were guessed before 1013 guesses, yet Pros
quickly guessed about one-third of the LongComplex set
between 1013 and 1014 guesses.
Performing the same analysis using Minauto guess
numbers instead (Figure 12) would lead to similar con-
clusions. LongBasic passwords were again more vulner-
able than Complex or LongComplex under 108 guesses.
After 1012 guesses, Complex passwords were easier to
guess than LongBasic or LongComplex passwords. Ba-
sic passwords were easy to guess at all points. The main
difference between Minauto and Pros was that LongCom-
plex passwords appear more vulnerable to the ﬁrst 1012
guesses under Minauto than Pros.
80%
60%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
40%
20%
0%
101
103
105
Basic (Min_auto)
Complex
LongBasic
LongComplex
109
1011
1013
107
Guesses
Figure 11: Pros’ comparative success guessing each
password. For reference, the dotted line represents the
Minauto guess across automated approaches for Basic
passwords, which the Pros did not try to guess.
Basic
80%
60%
40%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
20%
0%
101
103
105
Complex
LongComplex
LongBasic
1011
1013
1015
107
Guesses
109
Figure 12: The guessability of all four password sets un-
der Minauto, representing the smallest guess number for
each password across all four automated approaches.
Based on this data, a researcher comparing composi-
tion policies would likely reach similar conclusions us-
ing either professionals or a combination of automated
approaches. As shown in Figure 13, we repeated this
analysis using each of the four automated approaches in
isolation. Against every approach, Basic passwords are
easily guessable, and LongBasic passwords are compar-
atively vulnerable during early guessing. After trillions
of guesses, Hashcat, PCFG, and JTR ﬁnd Long Com-
plex passwords more secure than Complex passwords.
In each case, a researcher would come to similar conclu-
sions about the relative strength of these password sets.
4.4.2 Per Individual Password
Analyses of the strength of individual passwords, in con-
trast, proved very sensitive to the guessing approach. Al-
though one would expect different approaches to guess
passwords at somewhat different
times, many pass-
words’ guess numbers varied by orders of magnitude
across approaches. This state of affairs could cause a
very weak password to be misclassiﬁed as very strong.
We examined per-password differences pairwise
among JTR, Markov, and PCFG, using the same guess
USENIX Association  
24th USENIX Security Symposium  475
13
80%
60%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
40%
20%
0%
101
103
105
Basic
Basic
60%
d
e
s
s
e
u
g
40%
50%
40%
d
e
s
s
e
u
g
30%
Basic
80%
60%
d
e
s
s
e
u
g
t
n
e
c
r
e
P
40%
20%
Basic
Complex
LongComplex
LongBasic
t
n
e
c
r
e
P
20%
Complex
LongComplex
LongBasic
109
1011
1013
0%
Complex
LongComplex
LongBasic
103
105
101
1013
(b) JTR guessability.
107
Guesses
1011
109
t
n
e
c
r
e
P
20%
10%
0%
101
103
107
Guesses
(a) Hashcat guessability.
LongBasic
LongComplex
Complex
107
109
105
Guesses
(c) Markov guessability.
0%
103
105
101
1015
(d) PCFG guessability.
107
Guesses
1013
1011
109
Figure 13: The relative guessability of the four different password sets under each of the four automated cracking
approaches considered in isolation. The research conclusions would be fairly similar in each case.
We found similar results in the two other pairwise
comparisons. Among passwords guessed by Markov,
PCFG, or both, 41% of guess numbers differed by at least
one order of magnitude. In an extreme example, the pass-
words 1qaz!QAZ and 1q2w3e4r5t6y7u8i were among the
ﬁrst few hundred Markov guesses, yet not guessed by
PCFG’s guess cutoff. Conversely, unitedstatesofamerica
was among PCFG’s ﬁrst few dozen LongBasic guesses,
yet never guessed by Markov. For 37% of passwords,
JTR and Markov guess numbers differed by at least one
order of magnitude. Markov was particularly strong
at guessing long passwords with predictable patterns.
For instance, password123456789, 1234567890123456,
and qwertyuiopasdfgh were among Markov’s ﬁrst thirty
guesses, yet JTR did not guess any of them by its cutoff.
Actionable takeaways As researchers and system ad-
ministrators ask questions about password strength, they
must consider whether their choice of cracking approach
biases the results. When evaluating the strength of a
large, heterogeneous password set, any of Hashcat, JTR,
Markov, or PCFG—if conﬁgured effectively—provide
fairly similar answers to research questions. Nonethe-
less, we recommend the more conservative strategy of
calculating guessability using Minauto.
In contrast, guessability results per-password can dif-
fer by many orders of magnitude between approaches
even using the same training data. To mitigate these dif-
ferences, we again recommend Minauto for the increas-
ingly important tasks of providing precise feedback on
password strength to users and system administrators.
5 Conclusion
We report on the ﬁrst broad, scientiﬁc investigation of
the vulnerability of different types of passwords to guess-
ing by an expert attacker and numerous conﬁgurations of
off-the-shelf, automated approaches frequently used by
researchers. We instrument these approaches, including
both adversarial tools and academic research prototypes,
to enable precise, guess-by-guess comparisons among
automated approaches and between them and the expert.
Figure 14: The % (log scale) of passwords guessed by
JTR or PCFG whose guess numbers differed by a given
order of magnitude. e.g., the blue > 6 bar represents
passwords guessed by JTR more than 6, but no more than
7, orders of magnitude more quickly than by PCFG.
cutoff for each approach in a pair. Because Hashcat’s
early guesses were often unsuccessful, we exclude it
from this analysis. Passwords not guessed by the guess
cutoff were assigned a guess number one past the cutoff,
lower-bounding differences between passwords guessed
by one approach but not the other. For each password, we
calculated the log10 of the ratio between guess numbers
in the two approaches. For example, iceman1232 was
guess 595,300,840 for JTR and 61,554,045 for Markov,
a 0.985 order of magnitude difference.
Among passwords guessed by JTR, PCFG, or both,
51% of passwords had guess numbers differing by more
than an order of magnitude between approaches, indi-
cating large variations in the resulting security conclu-
sions. Alarmingly, some passwords had guess numbers
differing by over 12 orders of magnitude (Figure 14).
For example, P@ssw0rd!
took JTR only 801 Com-
plex guesses, yet PCFG never guessed it in our tests.
Similarly, 1q2w3e4r5t6y7u8i was the 29th LongBasic
JTR guess, yet it was not among the 1014 such guesses
PCFG made. In contrast, PCFG guessed Abc@1993 af-
ter 48,670 guesses and 12345678password after 130,555
guesses. JTR never guessed either password.
476  24th USENIX Security Symposium 
USENIX Association
14
We ﬁnd that running a single guessing algorithm, par-
ticularly in its out-of-the-box conﬁguration, often yields
a very poor estimate of password strength. However, us-
ing several such algorithms, well-conﬁgured and in par-
allel, can be a good proxy for passwords’ vulnerability
to an expert attacker. We also ﬁnd that while coarse-
grained research results targeting heterogeneous sets of
passwords are somewhat robust to the choice of (well-
conﬁgured) guessing algorithm, many other analyses are
not. For example, investigations of the effect on pass-
word strength of password characteristics, such as the
number of character classes and the use of character sub-
stitutions, can reach different conclusions depending on
the algorithm underlying the strength metric.
Finally, we hope our investigation of the effectiveness
of many conﬁgurations of popular guessing approaches
will help facilitate more accurate and easily reproducible
research in the passwords research community. To that
end, we have created a Password Guessability Service [9]
that enables researchers to submit plaintext passwords
and receive guessability analyses like those presented in
this paper. We particularly encourage researchers investi-
gating password-cracking algorithms to contribute to this
service to improve the comparability of experiments.
Acknowledgments
We thank the authors of Hashcat and John the Ripper,
Matt Marx, Jerry Ma, Weining Yang, Ninghui Li, Kore-
Logic, Michael Stroucken, Jonathan Bees, Chuck Cra-
nor, and Dustin Heywood. This research was supported
in part by NSF grants DGE-0903659 and CNS-1116776,
and by a gift from Microsoft Research. It was also con-
ducted with government support awarded by DoD, Air
Force OSR, via the NDSEG Fellowship, 32 CFR 168a.