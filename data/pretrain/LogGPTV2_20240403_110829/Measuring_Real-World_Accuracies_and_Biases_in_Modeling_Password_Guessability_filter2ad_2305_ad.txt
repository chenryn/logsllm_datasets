### 4.3.2 Guessing Success by Password Characteristics

While it is expected that different cracking approaches will perform better on specific types of passwords, we observed significant and unpredictable variations in their effectiveness.

#### Character Classes and Length

We first examined how effectively automated approaches guessed passwords based on their length and the number of character classes. These two characteristics are particularly relevant because they are often included in password-composition policies.

As shown in Figure 9, the impact of adding character classes is not as straightforward as one might expect. While the general trend is for passwords with more character classes to be stronger, the details vary significantly. For example, Markov's effectiveness drops substantially with each additional character class (from 63% to 52%, then to 23%, and finally to 8%). In contrast, JTR shows only a minor difference between one and two character classes (72% to 70%). PCFG, interestingly, becomes more effective when moving from one to two character classes (78% to 86%).

Since changes in security and usability due to different policies are often incremental, these discrepancies can significantly affect research conclusions about the relative strength of passwords.

In terms of password length, we found no surprising anomalies. For all approaches, cracking efficiency decreased as the length of the password increased.

#### Character-Level Password Characteristics

As the research community aims to understand the characteristics of strong passwords, a researcher might investigate the guessability of all-digit passwords, which are common, or the effect of character substitutions (e.g., $Hplovecraft!$ → $Hpl0v3cr@ft!$). Despite their overall similar effectiveness, approaches often diverged when guessing passwords with these characteristics, leading to different conclusions.

For instance, the 1,490 passwords composed entirely of lowercase letters (which made up 29% of Basic and LongBasic passwords and were impermissible under other composition policies) showed stark differences in guessability across approaches. As shown in Figure 10, Hashcat guessed few such passwords until well into the billions of guesses, while Markov successfully guessed them throughout its attack. PCFG had a large spike in successful guesses between 1 million and 10 million guesses but then plateaued. JTR had early success but also plateaued after 10 million guesses.

Similarly, approaches differed in their efficiency at guessing passwords containing character substitutions, identified through crowdsourcing on Amazon’s Mechanical Turk. PCFG performed poorly compared to JTR and Markov in this context. A researcher using only PCFG might mistakenly believe these passwords are much stronger than they actually are. We found similar differences with many other common characteristics, potentially skewing research conclusions.

### Actionable Takeaways

Given that many passwords were guessed by only a single cracking approach and the systematic differences in when passwords with certain characteristics are guessed, we argue that researchers must consider multiple major cracking approaches in parallel.

Our results also highlight how comparative analyses can uncover the relative weaknesses of each approach. For example, PCFG abstracts passwords into structures of non-terminal characters based on character class, ignoring contextual information across these boundaries. This explains why P@ssw0rd would be split into “P,” “@,” “ssw,” “0,” and “rd,” leading to PCFG's poor performance in guessing passwords with character substitutions.

### 4.4 Robustness of Analyses to Approach

In this section, we examine whether differences among automated cracking approaches are likely to affect conclusions to two main types of research questions: analyses of password sets and per-password analyses.

#### 4.4.1 Per Password Set

We first consider analyses of password sets, such as those created under specific password-composition policies. We find such analyses to be somewhat, but not completely, robust to the approach used. For example, Figure 11 shows the relative guessability of three password sets examined by the Pros. LongBasic passwords were most vulnerable, and LongComplex passwords were least vulnerable. Between roughly 10^9 and 10^12 guesses, LongBasic and Complex passwords followed similar curves, though Complex passwords were cracked with higher success past 10^12 guesses. Very few LongComplex passwords were guessed before 10^13 guesses, yet Pros quickly guessed about one-third of the LongComplex set between 10^13 and 10^14 guesses.

Performing the same analysis using Minauto guess numbers (Figure 12) would lead to similar conclusions. The main difference was that LongComplex passwords appeared more vulnerable to the first 10^12 guesses under Minauto than under Pros.

Based on this data, a researcher comparing composition policies would likely reach similar conclusions using either professionals or a combination of automated approaches. As shown in Figure 13, we repeated this analysis using each of the four automated approaches in isolation. Against every approach, Basic passwords are easily guessable, and LongBasic passwords are comparatively vulnerable during early guessing. After trillions of guesses, Hashcat, PCFG, and JTR find LongComplex passwords more secure than Complex passwords. In each case, a researcher would come to similar conclusions about the relative strength of these password sets.

#### 4.4.2 Per Individual Password

Analyses of individual password strength, however, proved very sensitive to the guessing approach. Although one would expect different approaches to guess passwords at somewhat different times, many passwords' guess numbers varied by orders of magnitude across approaches. This could cause a very weak password to be misclassified as very strong.

We examined per-password differences pairwise among JTR, Markov, and PCFG, using the same guess cutoff for each approach in a pair. Because Hashcat’s early guesses were often unsuccessful, we excluded it from this analysis. Passwords not guessed by the guess cutoff were assigned a guess number one past the cutoff, lower-bounding differences between passwords guessed by one approach but not the other. For each password, we calculated the log10 of the ratio between guess numbers in the two approaches. For example, iceman1232 was guess 595,300,840 for JTR and 61,554,045 for Markov, a 0.985 order of magnitude difference.

Among passwords guessed by JTR, PCFG, or both, 51% of passwords had guess numbers differing by more than an order of magnitude between approaches, indicating large variations in the resulting security conclusions. Alarmingly, some passwords had guess numbers differing by over 12 orders of magnitude (Figure 14). For example, P@ssw0rd! took JTR only 801 Complex guesses, yet PCFG never guessed it in our tests. Similarly, 1q2w3e4r5t6y7u8i was the 29th LongBasic JTR guess, yet it was not among the 10^14 such guesses PCFG made. In contrast, PCFG guessed Abc@1993 after 48,670 guesses and 12345678password after 130,555 guesses. JTR never guessed either password.

### Actionable Takeaways

Running a single guessing algorithm, particularly in its out-of-the-box configuration, often yields a very poor estimate of password strength. However, using several such algorithms, well-configured and in parallel, can be a good proxy for passwords’ vulnerability to an expert attacker. Coarse-grained research results targeting heterogeneous sets of passwords are somewhat robust to the choice of (well-configured) guessing algorithm, but many other analyses are not. For example, investigations of the effect on password strength of password characteristics, such as the number of character classes and the use of character substitutions, can reach different conclusions depending on the algorithm underlying the strength metric.

Finally, we hope our investigation of the effectiveness of many configurations of popular guessing approaches will help facilitate more accurate and easily reproducible research in the passwords research community. To that end, we have created a Password Guessability Service [9] that enables researchers to submit plaintext passwords and receive guessability analyses like those presented in this paper. We particularly encourage researchers investigating password-cracking algorithms to contribute to this service to improve the comparability of experiments.

### Acknowledgments

We thank the authors of Hashcat and John the Ripper, Matt Marx, Jerry Ma, Weining Yang, Ninghui Li, KoreLogic, Michael Stroucken, Jonathan Bees, Chuck Cranor, and Dustin Heywood. This research was supported in part by NSF grants DGE-0903659 and CNS-1116776, and by a gift from Microsoft Research. It was also conducted with government support awarded by DoD, Air Force OSR, via the NDSEG Fellowship, 32 CFR 168a.