>>> myos.getcwd()
'/home/wangbm'
4. 使用 imp 模块
imp 模块提供了一些 import 语句内部实现的接口。例如模块查找（find_module）、模块加载
（load_module）等等（模块的导入过程会包含模块查找、加载、缓存等步骤）。可以用该模块来
简单实现内建的 __import__ 函数功能：
>>> import imp
>>> file, pathname, desc = imp.find_module('os')
>>> myos = imp.load_module('sep', file, pathname, desc)
>>> myos
>>> myos.getcwd()
'/home/wangbm'
从 python 3 开始，内建的 reload 函数被移到了 imp 模块中。而从 Python 3.4 开始，imp 模块被否
决，不再建议使用，其包含的功能被移到了 importlib 模块下。即从 Python 3.4 开始，importlib 模
块是之前 imp 模块和 importlib 模块的合集。
5. 使用 execfile
在 Python 2 中有一个 execfile 函数，利用它可以用来执行一个文件。
语法如下：
execfile(filename[, globals[, locals]])
参数有这么几个：
filename：文件名。
globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。
locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象。
>>> execfile("/usr/lib64/python2.7/os.py")
>>>
>>> getcwd()
'/home/wangbm'
6. 使用 exec 执行
execfile 只能在 Python2 中使用，Python 3.x 里已经删除了这个函数。
但是原理值得借鉴，你可以使用 open ... read 读取文件内容，然后再用 exec 去执行模块。
示例如下：
>>> with open("/usr/lib64/python2.7/os.py", "r") as f:
... exec(f.read())
...
>>> getcwd()
'/home/wangbm'
7. import_from_github_com
有一个包叫做 import_from_github_com，从名字上很容易得知，它是一个可以从 github 下载安装
并导入的包。为了使用它，你需要做的就是按照如下命令使用pip 先安装它。
$ python3 -m pip install import_from_github_com
这个包使用了PEP 302中新的引入钩子，允许你可以从github上引入包。这个包实际做的就是安装
这个包并将它添加到本地。你需要 Python 3.2 或者更高的版本，并且 git 和 pip 都已经安装才能使
用这个包。
pip 要保证是较新版本，如果不是请执行如下命令进行升级。
$ python3 -m pip install --upgrade pip
确保环境 ok 后，你就可以在 Python shell 中使用 import_from_github_com
示例如下
>>> from github_com.zzzeek import sqlalchemy
Collecting git+https://github.com/zzzeek/sqlalchemy
Cloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-build
Installing collected packages: SQLAlchemy
Running setup.py install for SQLAlchemy ... done
Successfully installed SQLAlchemy-1.1.0b1.dev0
>>> locals()
{'__builtins__': , '__spec__': None,
'__package__': None, '__doc__': None, '__name__': '__main__',
'sqlalchemy': ,
'__loader__': }
>>>
看了 import_from_github_com的源码后，你会注意到它并没有使用importlib。实际上，它的原理就
是使用 pip 来安装那些没有安装的包，然后使用Python的 __import__() 函数来引入新安装的模
块。
8、远程导入模块
我在这篇文章里（深入探讨 Python 的 import 机制：实现远程导入模块），深入剖析了导入模块的
内部原理，并在最后手动实现了从远程服务器上读取模块内容，并在本地成功将模块导入的导入
器。
具体内容非常的多，你可以点击这个链接进行深入学习。
示例代码如下：
##  py my_importer.py
import sys
import importlib
import urllib.request as urllib2
class UrlMetaFinder(importlib.abc.MetaPathFinder):
def __init__(self, baseurl):
self._baseurl = baseurl
def find_module(self, fullname, path=None):
if path is None:
baseurl = self._baseurl
else:
# url
if not path.startswith(self._baseurl):
return None
baseurl = path
try:
loader = UrlMetaLoader(baseurl)
return loader
except Exception:
return None
class UrlMetaLoader(importlib.abc.SourceLoader):
def __init__(self, baseurl):
self.baseurl = baseurl
def get_code(self, fullname):
f = urllib2.urlopen(self.get_filename(fullname))
return f.read()
def get_data(self):
pass
def get_filename(self, fullname):
return self.baseurl + fullname + '.py'
def install_meta(address):
finder = UrlMetaFinder(address)
sys.meta_path.append(finder)
并且在远程服务器上开启 http 服务（为了方便，我仅在本地进行演示），并且手动编辑一个名为
my_info 的 python 文件，如果后面导入成功会打印 ok 。
$ mkdir httpserver && cd httpserver
$ cat>my_info.py>> from my_importer import install_meta
>>> install_meta('http://localhost:12800/') #  sys.meta_path  finder
>>> import my_info # ok
ok
>>> my_info.name # 
'wangbm'
好了，8 种方法都给大家介绍完毕，对于普通开发者来说，其实只要掌握 import 这种方法足够
了，而对于那些想要自己开发框架的人来说，深入学习 __import__ 以及 importlib 是非常有必要
的。
3.4 条件语句的七种写法
第一种：原代码
这是一段非常简单的通过年龄判断一个人是否成年的代码，由于代码行数过多，有些人就不太愿意
这样写，因为这体现不出自己多年的 Python 功力。
if age > 18:
return ""
else:
return ""
下面我列举了六种这段代码的变异写法，一个比一个还 6 ，单独拿出来比较好理解，放在工程代码
里，没用过这些学法的人，一定会看得一脸懵逼，理解了之后，又不经意大呼：卧槽，还可以这样
写？，而后就要开始骂街了：这是给人看的代码？ （除了第一种之外）
第二种
语法：
 if  else 
例子
>>> age1 = 20
>>> age2 = 17
>>>
>>>
>>> msg1 = "" if age1 > 18 else ""
>>> print msg1
>>>
>>> msg2 = "" if age2 > 18 else ""
>>> print msg2
>>>
第三种
语法
 and  or 
例子
>>> msg1 = age1 > 18 and "" or ""
>>> msg2 = "" if age2 > 18 else ""
>>>
>>> print(msg1)
>>>
>>> print(msg2)
第四种
语法
(, )[condition]
例子
>>> msg1 = ("", "")[age1 > 18]
>>> print(msg1)
>>>
>>>
>>> msg2 = ("", "")[age2 > 18]
>>> print(msg2)
第五种
语法
(lambda: , lambda:)[]()
例子
>>> msg1 = (lambda:"", lambda:"")[age1 > 18]()
>>> print(msg1)
>>>
>>> msg2 = (lambda:"", lambda:"")[age2 > 18]()
>>> print(msg2)
第六种
语法：
{True: , False: }[]
例子：
>>> msg1 = {True: "", False: ""}[age1 > 18]
>>> print(msg1)
>>>
>>> msg2 = {True: "", False: ""}[age2 > 18]
>>> print(msg2)
第七种
语法
(() and (,) or (,))[0]
例子
>>> msg1 = ((age1 > 18) and ("",) or ("",))[0]
>>> print(msg1)
>>>
>>> msg2 = ((age2 > 18) and ("",) or ("",))[0]
>>> print(msg2)
以上代码，都比较简单，仔细看都能看懂，我就不做解释了。
看到这里，有没有涨姿势了，学了这么久的 Python ，这么多骚操作，还真是活久见。。这六种写
法里，我最推荐使用的是第一种，自己也经常在用，简洁直白，代码行还少。而其他的写法虽然能
写，但是不会用，也不希望在我余生里碰到会在公共代码里用这些写法的同事。
3.5 判断是否包含子串的七种方法
1、使用 in 和 not in
in 和 not in 在 Python 中是很常用的关键字，我们将它们归类为  。
使用这两个成员运算符，可以很让我们很直观清晰的判断一个对象是否在另一个对象中，示例如
下：
>>> "llo" in "hello, python"
True
>>>
>>> "lol" in "hello, python"
False
2、使用 find 方法
使用 字符串 对象的 find 方法，如果有找到子串，就可以返回指定子串在字符串中的出现位置，如
果没有找到，就返回 -1
>>> "hello, python".find("llo") != -1
True
>>> "hello, python".find("lol") != -1
False
>>
3、使用 index 方法
字符串对象有一个 index 方法，可以返回指定子串在该字符串中第一次出现的​索引，如果没有找到
会抛出异常，因此使用时需要注意捕获。
def is_in(full_str, sub_str):
try:
full_str.index(sub_str)
return True
except ValueError:
return False
print(is_in("hello, python", "llo")) # True
print(is_in("hello, python", "lol")) # False
4、使用 count 方法
利用和 index 这种曲线救国的思路，同样我们可以使用 count 的方法来判断。
只要判断结果大于 0 就说明子串存在于字符串中。
def is_in(full_str, sub_str):
return full_str.count(sub_str) > 0
print(is_in("hello, python", "llo")) # True
print(is_in("hello, python", "lol")) # False
5、通过魔法方法
在第一种方法中，我们使用 in 和 not in 判断一个子串是否存在于另一个字符中，实际上当你使用
in 和 not in 时，Python 解释器会先去检查该对象是否有 __contains__ 魔法方法。
若有就执行它，若没有，Python 就自动会迭代整个序列，只要找到了需要的一项就返回 True 。
示例如下；
>>> "hello, python".__contains__("llo")
True
>>>
>>> "hello, python".__contains__("lol")
False
>>>
这个用法与使用 in 和 not in 没有区别，但不排除有人会特意写成这样来增加代码的理解难度。
6、借助 operator
operator模块是python中内置的操作符函数接口，它定义了一些算术和比较内置操作的函数。
operator模块是用c实现的，所以执行速度比 python 代码快。
在 operator 中有一个方法 contains 可以很方便地判断子串是否在字符串中。
>>> import operator
>>>
>>> operator.contains("hello, python", "llo")
True
>>> operator.contains("hello, python", "lol")
False
>>>
7、使用正则匹配
说到查找功能，那正则绝对可以说是专业的工具，多复杂的查找规则，都能满足你。
对于判断字符串是否存在于另一个字符串中的这个需求，使用正则简直就是大材小用。
import re
def is_in(full_str, sub_str):
if re.findall(sub_str, full_str):
return True
else:
return False
print(is_in("hello, python", "llo")) # True
print(is_in("hello, python", "lol")) # False
3.6 海象运算符的三种用法
Python 版本发展非常快，如今最新的版本已经是 Pyhton 3.9，即便如此，有很多人甚至还停留在
3.6 或者 3.7，连 3.8 还没用上。
很多 Python 3.8 的特性还没来得及了解，就已经成为旧知识了，比如今天要说的海象运算符。
海象运算符是在 PEP 572 被提出的，直到 3.8 版本合入发布。
它的英文原名叫 Assignment Expressions ，翻译过来也就是  ，不过现在大家更普遍地
称之为海象运算符，就是因为它长得真的太像海象了。
第一个用法：if/else
可能有朋友是第一次接触这个新特性，所以还是简单的介绍一下这个海象运算符有什么用？
在 Golang 中的条件语句可以直接在 if 中运算变量的获取后直接对这个变量进行判断，可以让你少
写一行代码
import "fmt"
func main() {
if age := 20;age > 18 {
fmt.Println("")
}
}
若在 Python 3.8 之前，Python 必须得这样子写
age = 20
if age > 18:
print("")
但有了海象运算符之后，你可以和 Golang 一样（如果你没学过 Golang，那这里要注意，Golang
中的 := 叫短变量声明，意思是声明并初始化，它和 Python 中的 := 不是一个概念）