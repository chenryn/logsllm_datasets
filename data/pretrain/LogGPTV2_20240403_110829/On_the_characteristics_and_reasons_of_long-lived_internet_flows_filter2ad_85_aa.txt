title:On the characteristics and reasons of long-lived internet flows
author:Lin Quan and
John S. Heidemann
On the Characteristics and Reasons
of Long-lived Internet Flows ∗
Lin Quan
USC/Information Sciences Institute
4676 Admiralty Way, Suite 1001
Marina del Ray, CA 90292
PI:EMAIL
John Heidemann
USC/Information Sciences Institute
4676 Admiralty Way, Suite 1001
Marina del Ray, CA 90292
PI:EMAIL
ABSTRACT
Prior studies of Internet traﬃc have considered traﬃc at
diﬀerent resolutions and time scales: packets and ﬂows for
hours or days, aggregate packet statistics for days or weeks,
little is known
and hourly trends for months. However,
about the long-term behavior of individual ﬂows.
In this
paper, we study individual ﬂows (as deﬁned by the 5-tuple
of protocol, source and destination IP address and port) over
days and weeks. While the vast majority of ﬂows are short,
and most bytes are in short ﬂows, we ﬁnd that about 20%
of the overall bytes are carried in ﬂows that last longer than
10 minutes, and ﬂows lasting 100 minutes or longer make
up 2% of traﬃc. We show that long-lived ﬂows are qualita-
tively diﬀerent from short ﬂows: they are generally slower,
less bursty, and are due to diﬀerent applications and pro-
tocols. We investigate the causes of short- and long-lived
ﬂows, and show that the traﬃc mix varies signiﬁcantly de-
pending on duration time scale, with computer-to-computer
traﬃc more and more dominating in larger time scales.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operations—Network Monitoring; C.2.5 [Computer-
Communication Networks]: Local and Wide-Area Net-
works—Internet; C.2.6 [Computer-Communication Net-
works]: Internetworking
General Terms
Measurement
∗Lin Quan and John Heidemann are partially supported by
the US DHS, contract number NBCHC080035, and Heide-
mann by the NSF, grant number CNS-0626696. The con-
clusions of this work are those of the authors and do not
necessarily reﬂect the views of DHS or NSF.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’10, November 1–3, 2010, Melbourne, Australia.
Copyright 2010 ACM 978-1-4503-0057-5/10/11 ...$10.00.
Keywords
Long Duration Flow, Computer-to-computer communica-
tion
1.
INTRODUCTION
Traﬃc in the Internet is a complex mix of eﬀects from pro-
tocols, routing, traﬃc engineering, and user behaviors. Un-
derstanding traﬃc is essential to modeling and simulation,
traﬃc engineering and planning [3], router design [1], and
better understanding of the Internet [17]. There has been
a great deal of study of traﬃc at the protocol level [19, 20],
and at time scales of seconds to hours [4–6, 17, 24], and over
longer terms for planning [18, 22]. Yet prior work studies ei-
ther protocol eﬀects at small time scales (seconds to hours)
or aggregate eﬀects at large time scales (hours to weeks),
but little attempt to bridge this division and understand
protocol eﬀects on long-lived traﬃc.
This paper explores how users and protocols aﬀect long-
lived network traﬃc. Unlike prior protocol studies, we ex-
plore traﬃc that lasts for multiple hours to days. Unlike
prior long-term traﬃc studies, we explore the causes of traf-
ﬁc patterns at the ﬂow-level in multiple time scales, instead
of only trends of aggregate traﬃc. We use the standard ﬂow
deﬁnition of the 5-tuple of source and destination IP address
and port, plus the protocol number, ended by a timeout [22].
There are several reasons that an understanding of long-
lived ﬂows is increasingly important. First, understand-
ing long-lived ﬂows is important for network management.
While capacity planning can be done on measures of ag-
gregate traﬃc, several kinds of on-line traﬃc control have
been proposed: protocol trunking [16], optical trunking [11],
lambda switching [2], and low-buﬀer operation [1]. Under-
standing the feasibility and impact of these approaches re-
quires ﬂow-level traﬃc characterization.
Second, a scientiﬁc understanding of the Internet must in-
vestigate the patterns and causes of long-lived traﬃc. What
are the ﬁrst-order statistical properties of long-lived ﬂows,
and how do they diﬀer from short ones? In addition, short-
term studies of network packet data have shown self-similar
behavior in time scales of seconds to hours [7, 17], but most
such analysis stops as diurnal eﬀects dominate.
Finally, we wish to understand the causes of long-term
ﬂows. Protocol eﬀects dominate sub-second time scales,
and human behavior governs diurnal and weekend eﬀects.
Some human-centric traﬃc is no longer bound by human
patience, such as “patient” peer-to-peer ﬁle sharing [10], and
unattended streaming media, perhaps streaming Internet
audio in a store, or automated, Internet-based, Tivo-like
444devices such as the Slingbox [14]. Computer-to-computer
traﬃc is growing due to automated control and sensing, on-
line backup, and distributed processing in the cloud and
across distributed data centers. We hypothesize that at
some point in the future, computer-to-computer traﬃc will
eclipse human-driven traﬃc, just as data traﬃc has eclipsed
voice.
The contribution of this paper is to begin to answer these
questions. To this end, we describe new mechanisms for
multi-time-scale ﬂow analysis that allows eﬃcient evalua-
tion of network traﬃc from time scales of minutes to weeks
(Section 3). We have operated this system for more than six
months, taking data from a regional network. Second, we
document the presence of long-lived ﬂows, showing 21% of
Internet traﬃc (by bytes) are carried by ﬂows longer than
10 minutes, and nearly 2% are carried by 100 minutes or
longer ﬂows (Section 4.1). Finally, in Section 4.2 we begin
to evaluate the causes of such traﬃc, exploring how protocol
mix changes as a function of time scale.
2. RELATED WORK
An important aspect of understanding Internet traﬃc is
packet sizes and protocols. Thompson et al.
studied the
packet size distribution and protocol mixes in one-day pe-
riod, and diurnal patterns of aggregate traﬃc in 7-day pe-
riod [22]. CAIDA has collected several 90-second traces each
day, in a period of ten months, and studied the trends of
packet lengths and protocol mixes [18]. We use the com-
mon 5-tuple ﬂow deﬁnition [22], but we are more interested
in ﬂow characteristics and traﬃc mixes across diﬀerent time
scales.
Characteristics of Internet ﬂows have also been studied
extensively. Brownlee et al. studied lifetimes of streams (bi-
directional ﬂows) [4, 5]. They found that at least 45% of the
streams are dragonﬂies (lasting less than 2 seconds), 98% of
the streams last less than 15 minutes and the rest 2% being
tortoises. Similarly, we ﬁnd that most of the Internet bytes
are carried by the vast majority of short ﬂows, but long
ﬂows also account for a considerable fraction of bytes (see
4.1.2). Later work studied ﬂow characteristics systemati-
cally, showing the correlations between ﬂow size, duration,
rate and burstiness [6]. We adopt the similar ideas from this
work, but compare ﬂows behavior as a function of duration.
Because of the large volume of traﬃc, careful sampling
techniques have been used to achieve better processing rates.
Researchers from AT&T estimated ﬂow statistics by sam-
pling packet streams and exploiting protocol details [8]. Re-
searchers at UCSD used adaptive sampling algorithms to
increase Cisco NetFlow system robustness without compro-
mising accuracy (in case of large volume of traﬃc) [9]. Zhang
et al. studied the distributions and causes of diﬀerent ﬂow
rates [24]. They collected sampled traces from a backbone
ISP covering from 1 to 24 hours, and unsampled traces rang-
ing from 30 to 120 minutes. They also studied the correla-
tions between ﬂow rates with size and duration, and gave
careful analysis on the causes of diﬀerent ﬂow rates (such
as congestion limited, sender/receiver window limited, and
application limited). Our work builds on theirs: we contin-
uously collect unsampled IP packet headers, and systemat-
ically study the relations between ﬂow durations and other
characteristics. We also provide the ability to investigate
multi-time-scale ﬂows for eﬃcient analysis and give prelim-
inary analysis of causes of long-lived ﬂows.
Several other groups have exploited ﬂow characteristics
for traﬃc engineering purposes. Shaikh et al. studied load-
sensitive routing, but they adopted a conservative, 10-or-
more packet deﬁnition of long ﬂows. We study several longer
time scales and ﬁnd interesting implications of the long ﬂows.
Trunking (with TCP or optical networks [2, 11, 16]) gath-
ers together groups of ﬂows to achieve throughput beneﬁts.
Our work identiﬁes long-duration ﬂows that could be used
by trunking. Recent work in low-buﬀer routing has shown
the possibility of using very few router buﬀers (two mag-
nitudes fewer than current commercial practices), provided
that traﬃc is “suﬃciently” smooth [1]. We show that long-
duration ﬂows are smoother and could be a good candidate
for such optimization.
3. DATA COLLECTION AND ANALYSIS
Network packet trace collection is well understood, but se-
quential processing becomes challenging as datasets stretch
from minutes to months. In this section we review our ap-
proach to long-term collection of network ﬂows and multi-
time-scale analysis of that data.
3.1 Collection and Anonymization
Our campus network operators provide us anonymized
packet headers at the main USC connection to our upstream
regional network. We use the LANDER system [12] to pro-
cess data at USC’s HPCC compute cluster [23], coordinat-
ing parallel processing of 512MB ﬁxed-length, Endace ERF-
format, packet-header traces.
The default LANDER policy anonymizes traﬃc with keys
that rotate at regular intervals. Such a scheme is useful be-
cause it insures that any accidental information disclosure in
one period does not assist unanonymization in other periods.
However, key rotation impedes analysis of ﬂows longer than
the rotation period. LANDER therefore re-anonymizes all
ﬂows with a common, long-term key. We reduce this greater
risk through stricter policy controls: we control access to the
long-term data and prohibit those with access to attempt
unanonymization.
Although our work builds on packet-header traces, a po-
tential direction for future is to start with NetFlow records
as a data source. Another interesting direction is to com-
pare characteristics of long ﬂows at diﬀerent places of the
Internet.
3.2 Multi-time-scale IP Flow Analysis
Given our goal of observing long duration ﬂows, we have
four problems: what ﬂows are and what to record for each
ﬂow; how to manage streaming data and incremental anal-
ysis; how to support analysis at very diﬀerent time scales,
from seconds to weeks or more. We consider each of these
next.
We use the standard 5-tuple deﬁnition of ﬂows: source and
destination port and IP address, plus protocol. We convert
LANDER’s packet headers into ﬂow records using a slightly
modiﬁed Argus toolkit [13]. Argus ﬂow records provide: the
5-tuple ﬂow identiﬁer (given above), ﬂow start and ﬁnish
time, number of packets, and number of bytes in the ﬂow.
Flows begin with the ﬁrst packet with a unique 5-tuple, and
continue until a timeout τ (currently set to 60 seconds).
We extend Argus to also capture information about ﬂow
burstiness, which is deﬁned as variance of bytes over ﬁxed
time period T . We record the number of time periods ob-
445most column of Figure 1 shows packet headers (dark gray)
being converted to level-0 ﬂow-segments.
Each level-0 ﬂow-segment contains 10 minutes of ﬂow records,
but long ﬂows will span multiple, possibly hundreds or thou-
sands of segments. Since we cannot sequentially process ter-
abytes of data to make queries for diﬀerent durations, we as-
semble level-0 ﬂow-segments into higher-level segments. We
assemble segments hierarchically in powers of two, so two ad-
jacent level-0 segments are processed to produce one level-1
segment, and so on, with two level-i ﬂows producing a level-
i + 1 ﬂow.
To avoid segments growing in size indeﬁnitely and to al-
low eﬃcient queries at large timescales, we prune the ﬂow
contents at each level according to the following rule:
The pruning rule: A level-i segment starting at time t
must preserve all ﬂows of duration longer than T 2i−2
(the duration rule), and all ﬂows that are active in the
timeout period the last τ seconds of the trace (the tail
rule).
The presence corollary: A level-i segment starting at time
t guarantees to contain all ﬂows of durations between
T 2i−2 and T 2i−1 that start in the time [t, t + T 2i−1].
It may also contain some shorter ﬂows at the end, and
some longer ﬂows (up to T 2i) which are not complete
yet.
(When i = 0, the durations start at zero.)
The duration part of the pruning rule keeps each level
ﬁle small, because each targets a speciﬁc time duration and
guarantees coverage for that duration. All short ﬂows that
are not active at the end of the segment may be discarded.
We can prove the presence corollary, because we guarantee
coverage for ﬂows that start in the ﬁrst half of the segment
and last for between a quarter and a half of the segment,
since by deﬁnition those ﬂows must terminate in the segment
and are too long to be discarded. We do not guarantee all
shorter ﬂows are present, since they will be discarded to keep
segment sizes manageable. We cannot guarantee that longer
ﬂows are complete since they may stretch into subsequent
segments. We show the results of our multi-level storage
below in Section 3.4.
The tail part of the pruning rule allows adjacent segments
to be merged without loss of information. Only ﬂows that
are active in the last τ seconds of the segment are candidates
to merge with the next segment, since by our deﬁnition of
ﬂows they will timeout if the gap is longer. By keeping
all ﬂows active in this window at the end of the trace we
therefore guarantee no information about mergeable ﬂows
will be discarded, so we do not accidentally truncate the
head of a new long-duration ﬂow. Finally, the rule keeps
ﬂows that are active in the last τ seconds, more than ﬂows
started in the last τ seconds—a ﬂow may start anywhere in
the segment, and long-running ﬂows will typically span most
or all of the segments.
Several details in segment organization support merging
and processing. When merging two adjacent level-i segments
to create a level-i + 1 segment, we combine and reorder ﬂow
records. We keep ﬂow records sorted by ﬂow start time, so
if the level-i ﬁles are numbered n and n + 1, the merge must
scan all of ﬁle n but only the head of n + 1. Variance can
be combined across segments because we preserve the sum
of observations and their squares, not just the computed
variance.
Figure 1: The structure of multi-level ﬂow records:
each level has primarily ﬂows with exponentially
longer durations, plus a “tail” to permit merging.
served, and the average and square sum of bytes over the
time periods. Our base time period for variance is T = 10
minutes, the same as our base segment length as described
below. This data allows us to compute standard deviation
of bytes over T afterwords.
Because we expect to run data collection indeﬁnitely, it
is essential that we collect data concurrent with analysis,
and that we store data in a manner that supports eﬃcient
queries. An easy algorithm would use an in-memory ﬂow
table (indexed by the 5-tuple), and update corresponding
ﬂow record upon seeing a ﬂow. However, this algorithm can
easily run out of memory due to a large number of concurrent
ﬂows, particularly with long timeouts. So we divide ﬂow
records into segments for eﬃcient analysis. LANDER uses
ﬁxed-size segments (each 512MB of packet headers, or 1–2
minutes at our current capture rates), and these traces arrive
asynchronously, invoking our segment processing engine as
it arrives.
We convert these variable-duration segments to hierar-
chical, ﬁxed duration segments to support eﬃcient analysis
and queries that span diﬀerent timescales. We call the in-
tial ﬁxed duration segments level-0 ﬂow segments, currently
each at a duration of T = 10 minutes. When we deter-
mine that all packet-header traces needed to cover a ﬂow
segment are present, we process them to create the corre-
sponding level-0 ﬂow-segment. Care must be taken because
each ﬂow segment typically requires several packet-header
traces, and the packet-header trace at the start or end of
a ﬂow segment typically span two ﬂow segments. When a
trace spans multiple segments, we place the packets corre-
sponding to each segment in seperate ﬂow records in each
segment. These records will later be merged into a common
ﬂow record in hierarchical merging described next. The left-
4461
level 2
40 min
level 4
160 min
level 6
640 min
level 8
2560 min
level 1
20 min
0.8
level 3
80 min
level 5
320 min
level 7
1280 min
F
D
C
0.6
0.4
0.2
0
1
1.5
2
2.5
3
3.5
Duration (log10 of minutes)
time scale
0
1
2
3
4
5
6
7
8
9
10
11
all median presence
835k
2M
4967M
652M