title:REM: Resource-Efficient Mining for Blockchains
author:Fan Zhang and
Ittay Eyal and
Robert Escriva and
Ari Juels and
Robbert van Renesse
REM: Resource-Efficient Mining for Blockchains
Fan Zhang, Ittay Eyal, and Robert Escriva, Cornell University; Ari Juels, Cornell Tech;  
Robbert van Renesse, Cornell University
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/zhang
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXREM: Resource-Efﬁcient Mining for Blockchains
Fan Zhang(cid:63),§
Ittay Eyal(cid:63),§
Robert Escriva(cid:63)
PI:EMAIL
PI:EMAIL
PI:EMAIL
Ari Juels†,§
Robbert van Renesse(cid:63),§
PI:EMAIL
PI:EMAIL
(cid:63)Cornell University
†Cornell Tech, Jacobs Institute
§Initiative for CryptoCurrencies & Contracts
Abstract
transaction systems.
Blockchains show promise as potential infrastructure
for ﬁnancial
The security of
blockchains today, however, relies critically on Proof-of-
Work (PoW), which forces participants to waste compu-
tational resources.
We present REM (Resource-Efﬁcient Mining), a new
blockchain mining framework that uses trusted hardware
(Intel SGX). REM achieves security guarantees similar
to PoW, but leverages the partially decentralized trust
model inherent in SGX to achieve a fraction of the waste
of PoW. Its key idea, Proof-of-Useful-Work (PoUW), in-
volves miners providing trustworthy reporting on CPU
cycles they devote to inherently useful workloads. REM
ﬂexibly allows any entity to create a useful workload.
REM ensures the trustworthiness of these workloads by
means of a novel scheme of hierarchical attestations that
may be of independent interest.
To address the risk of compromised SGX CPUs, we
develop a statistics-based formal security framework,
also relevant to other trusted-hardware-based approaches
such as Intel’s Proof of Elapsed Time (PoET). We show
through economic analysis that REM achieves less waste
than PoET and variant schemes.
We implement REM and, as an example application,
swap it into the consensus layer of Bitcoin core. The
result is the ﬁrst full implementation of an SGX-based
blockchain. We experiment with four example appli-
cations as useful workloads for our implementation of
REM, and report a computational overhead of 5− 15%.
1
Introduction
Despite their
imperfections [21, 31, 33, 61, 66],
blockchains [34, 60, 62] have attracted the interest of
the ﬁnancial and technology industries [11, 20, 30,
41, 64, 69] as a way to build a transaction systems
with distributed trust. One fundamental impediments
to the widespread adoption of decentralized or “permis-
sionless” blockchains is that Proofs-of-Work (PoWs) in
blockchains are wasteful.
PoWs are nonetheless the most robust solution today
to two fundamental problems in decentralized cryptocur-
rency design: How to select consensus leaders and how
to apportion rewards fairly among participants. A partic-
ipant in a PoW system, known as a miner, can only lead
consensus rounds in proportion to the amount of compu-
tation she invests in the system. This prevents an attacker
from gaining majority power by cheaply masquerading
as multiple machines. The cost, however, is the above-
mentioned waste. PoWs serve no useful purpose beyond
consensus and incur huge monetary and environmental
costs. Today the Bitcoin network uses more electricity
than produced by a nuclear reactor, and is projected to
consume as much as Denmark by 2020 [25].
We propose a solution to the problem of such waste in
a novel block-mining system called REM. Nodes using
REM replace PoW’s wasted effort with useful effort of
a form that we call Proof of Useful Work (PoUW). In a
PoUW system, users can utilize their CPUs for any de-
sired workload, and can simultaneously contribute their
work towards securing a blockchain.
There have been several attempts to construct cryp-
tocurrencies that recycle PoW by creating a resource use-
ful for an external goal, but they have serious limitations.
Existing schemes rely on esoteric resources [49], have
low recycling rates [58], or are centralized [36]. Other
consensus approaches, e.g., BFT or Proof of Stake, are
in principle waste-free, but restrict consensus participa-
tion or have notable security limitations.
Intel recently introduced a new approach [41] to elim-
inating waste in distributed consensus protocols that re-
lies instead on trusted hardware, speciﬁcally a new in-
struction set architecture extension in Intel CPUs called
Software Guard Extensions (SGX). SGX permits the exe-
cution of trustworthy code in an isolated, tamper-free en-
vironment, and can prove remotely that outputs represent
the result of such execution. Leveraging this capability,
Intel’s proposed Proof of Elapsed Time (PoET) is an in-
USENIX Association
26th USENIX Security Symposium    1427
novative system with an elegant and simple underlying
idea. A miner runs a trustworthy piece of code that idles
for a randomly determined interval of time. The miner
with the ﬁrst code to awake leads the consensus round
and receives a reward. PoET thus promises energy-
waste-free decentralized consensus with security predi-
cated on the tamper-proof features of SGX. PoET oper-
ates in a partially-decentralized model, involving limited
involvement of an authority (Intel), as we explain below.
Unfortunately, despite its promise, as we show in this
paper, PoET presents two notable technical challenges.
First, in the basic version of PoET, an attacker that can
corrupt a single SGX-enabled node can win every con-
sensus round and break the system completely. We call
this the broken chip problem. Second, miners in PoET
have a ﬁnancial incentive to power mining rigs with
cheap, outmoded SGX-enabled CPUs used solely for
mining. The result is exactly the waste that PoET seeks
to avoid. We call this the stale chip problem.
REM addresses both the stale and broken chip prob-
lems. Like PoET, REM operates in a partially decentral-
ized model: It relies on SGX to prove that miners are
generating valid PoUWs. REM, however, avoids PoET’s
stale chip problem by substituting PoUWs for idle CPU
time, disincentivizing the use of outmoded chips for min-
ing. Miners in a PoUW system are thus entities that use
or outsource SGX CPUs for computationally intensive
workloads, such as scientiﬁc experiments, pharmaceuti-
cal discovery, etc. All miners can concurrently mine for
a blockchain while REM gives them the ﬂexibility to use
their CPUs for any desired workload.
We present a detailed ﬁnancial analysis to show that
PoUW successfully addresses the stale chip problem.
We provide a taxonomy of different schemes, including
PoW, PoET, novel PoET variants, and PoUW. We ana-
lyze these schemes in a model where agents choose how
to invest capital and operational funds in mining and how
much of such investment to make. We show that the
PoUW in REM not only avoids the stale chip problem,
but yields the smallest overall amount of mining waste.
Moreover, we describe how small changes to the SGX
feature set could enable even more efﬁcient solutions.
Unlike PoET, REM addresses the broken chip prob-
lem. Otherwise, compromised SGX-enabled CPUs
would allow an attacker to generate PoUWs at will, and
both unfairly accrete revenue and disrupt the security of
the blockchain [24, 70, 73]. Intel has sought to address
the broken chip problem in PoET using a statistical-
testing approach, but published details are lacking, as
appears to be a rigorous analytic framework. For REM,
we set forth a rigorous statistical testing framework for
mitigating the damage of broken chips, provide analytic
security bounds, and empirically assess its performance
given the volatility of mining populations in real-world
cryptocurrencies. Our results also apply to PoET.
A further challenge arises in REM due to the feature
that miners may choose their own PoUWs workloads. It
is necessary to ensure that miner-speciﬁed mining appli-
cations running in SGX accurately report their computa-
tional effort. Unfortunately SGX lacks secure access to
performance counters. REM thus includes a hierarchical
attestation mechanism that uses SGX to attest to com-
pilation of workloads with valid instrumentation. Our
techniques, which combine static and dynamic program
analysis techniques, are of independent interest.
We have implemented a complete version of REM, en-
compassing the toolchain that instruments tasks to pro-
duce PoUWs, compliance checking code, and a REM
blockchain client. As an example use, we swap REM
in for the PoW in Bitcoin core. As far as we are
aware, ours is the ﬁrst full implementation of an SGX-
backed blockchain.
(Intel’s Sawtooth Lake, which in-
cludes PoET, is implemented only as a simulation.) Our
implementation supports trustworthy compilation of any
desired workload. As examples, we experiment with four
REM workloads, including a commonly-used protein-
folding application and a machine learning application.
The resulting overhead is about 5− 15%, conﬁrming the
practicality of REM’s methodology and implementation.
Paper organization
The paper is organized as follows: Section 2 provides
background on proof-of-work and Intel SGX. We then
proceed to describe the contributions of this work:
• PoUW and REM, a low-waste alternative to PoW
that maintains PoW’s security properties (§3).
• A broken-chip countermeasure consisting of a rig-
orous statistical testing framework that mitigates the
impact of broken chips (§4).
• A methodology for trustworthy performance instru-
mentation of SGX applications using a combination
of static and dynamic program analysis and SGX-
backed trusted compilation (§5).
• Design and full
implementation of REM as a
resource-efﬁcient PoUW mining system with auto-
matic tools for compiling arbitrary code to a PoUW-
compliant module. Ours is the ﬁrst full implemen-
tation of an SGX-backed blockchain protocol (§5).
• A model of consensus-algorithm resource consump-
tion that we use to compare the waste associated
with various mining schemes. We overview the
model and issues with previous schemes (§6) and
defer the details to the full version [76].
We discuss related work in §7 and conclude in §8.
1428    26th USENIX Security Symposium
USENIX Association
2 Background
2.1 Blockchains
Blockchain protocols allow a distributed set of partici-
pants, called miners, to reach a form of consensus called
Nakamoto consensus. Such consensus yields an ordered
list of transactions. Roughly speaking, the process is as
follows. Miners collect cryptographically signed trans-
actions from system users. They validate the transac-
tions’ signatures and generate blocks that contain these
transactions plus a pointer to a parent block. The result
is a chain of blocks called (imaginatively) a blockchain.
Each miner, as it generates a block, gets to choose the
block’s contents, speciﬁcally which transactions will be
included and in what order. System participants are con-
nected by a peer-to-peer network that propagates trans-
actions and blocks. Occasionally, two or more miners
might nearly simultaneously generate blocks that have
the same parent, forming two branches in the blockchain
and breaking its single-chain structure. Thus a mech-
anism is used to choose which branch to extend, most
simply, the longest chain available [60].1
An attacker could naturally seek to generate blocks
faster than everyone else, forming the longest chain and
unilaterally choosing block contents. To prevent such an
attack, a block is regarded as valid only if it contains
proof that its creator has performed a certain amount of
work, a proof known as a Proof of Work (PoW).
A PoW takes the form of a cryptopuzzle: In most cryp-
tocurrencies, a miner must change an input (nonce) in the
block until a cryptographic hash of the block is smaller
than a predetermined threshold. The security properties
of hash functions force a miner to test nonces by brute
force until a satisfying block is found. Such a block con-
stitutes a solution to the cryptopuzzle and is itself a PoW.
Various hash functions are used in practice. Each type
puts different load on the processor and memory of a
miner’s computing device [60, 58, 72].
The process of mining determines an exponentially
distributed interval of time between the blocks of an in-
dividual miner, and, by extension, between blocks in the
blockchain. The expected amount of work to solve a
cryptopuzzle, known as its difﬁculty, is set per a deter-
ministic algorithm that seeks to enforce a static expected
rate of block production by miners (e.g., 10 minute block
intervals in Bitcoin). An individual miner thus generates
blocks at a rate that is proportional to its mining power,
its hashrate as a fraction of that in the entire population
of miners. Compensation to miners is granted per block
generated, leading to an expected miner revenue that is
proportional to the miner’s hashrate.
1There are alternatives to this protocol [33, 52, 68, 72], however the
differences are immaterial to our exploration here.
As the mining power that is invested in a cryptocur-
rency grows, the cryptocurrency’s cryptopuzzle difﬁculty
rises to keep the block generation rate stable. When com-
pensation is sufﬁciently high, it is worthwhile for a large
number of participants to mine, leading to a high difﬁ-
culty requirement. This, in turn, makes it difﬁcult for
an attacker to mine a large enough fraction of blocks to
perform a signiﬁcant attack.
PoW properties. The necessary properties for PoW to
support consensus in a blockchain, i.e., resist adversarial
control, are as follows. First, a PoW must be tied to a
unique block, and be valid only for that block. Other-
wise, a miner can generate conﬂicting blocks, allowing
for a variety of attacks. A PoW should be moderately
hard [10], and its difﬁculty should be accurately tunable
so that the blockchain protocol can automatically tune
the expected block intervals. Validation of PoWs, on the
other hand, should be as efﬁcient as possible, given that it
is performed by the whole network. (In most cryptocur-
rencies today, it requires just a single hash.) It should
also be possible to perform by any entity with access to
the blockchain — If the proofs or data needed for valida-
tion are made selectively available by a single entity, for
instance, that entity becomes a central point of control
and failure.2
2.2 SGX
Intel Software Guard Extensions (SGX) [39, 40, 42, 43,
8, 37, 57] is a set of new instructions available on recent-
model Intel CPUs that confers hardware protections on
user-level code. SGX enables process execution in a
Trusted Execution Environment (TEE), and speciﬁcally
in SGX in a protected address space known as an en-
clave. An enclave protects the conﬁdentiality and the
integrity of the process from certain forms of hardware
attack and other processes on the same host, including
privileged processes like operating systems.
An enclave can read and write memory outside the en-
clave region as a form of inter-process communication,
but no other process can access enclave memory. Thus
the isolated execution in SGX may be viewed in terms of
an ideal model in which a process is guaranteed to exe-
cute correctly and with perfect conﬁdentiality, but relies
on a (potentially malicious) operating system for sup-
porting services such as I/O, etc. This model is a simpli-
ﬁcation: SGX is known to expose some internal enclave
state to the OS [73]. Our basic security model assumes
2 The Bitcoin protocol is expected to soon allow for the so-called
segregated witness architecture [17, 55]. Then, transaction signatures
(witnesses) are kept in a data structure that is technically separate (seg-
regated) from the blockchain data structure. Despite this separation of
data structures, the data in both must be propagated to allow for dis-
tributed validation.
USENIX Association
26th USENIX Security Symposium    1429
ideal isolated execution, but as we detail in Section 4, we
have baked a defense against compromised SGX CPUs
into REM.
Attestation
SGX allows a remote system to verify the
software running in an enclave and communicate se-
curely with it. When an enclave is created, the CPU
produces a hash of its initial state known as a measure-
ment. The software in the enclave may, at a later time,
request a report which includes a measurement and sup-
plementary data provided by the process. The report is
digitally signed using a hardware-protected key to pro-
duce a proof that the measured software is running in an
SGX-protected enclave. This proof, known as a quote, is
part of an attestation can be veriﬁed by a remote system.
SGX signs quotes in attestations using a group signa-
ture scheme called Enhanced Privacy ID or EPID [67].
This choice of primitive is signiﬁcant in our design of
REM, as Intel made the design choice that attestations
can only be veriﬁed by accessing Intel’s Attestation Ser-
vice (IAS) [44], a public Web service maintained by In-
tel whose primary responsibility is to verify attestations
upon request.
REM uses attestations as proofs for new blocks, so
miners need to access IAS to verify blocks. The current
way in which IAS works forces miners to access IAS on
every single veriﬁcation, adding an undesirable round-
trip time to and from Intel’s server to the block veriﬁca-
tion time. This overhead, however, is not inherent, and
is due only to a particular design choice by Intel. As we
suggest in Section 5.4, a simple modiﬁcation, to the IAS
protocol, which Intel is currently testing, can eliminate
this overhead entirely.