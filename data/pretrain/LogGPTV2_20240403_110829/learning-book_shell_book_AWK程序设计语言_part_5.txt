North America
China
3705
1032
Asia
USA
3615
2 37
North America
Brazi1
3286
134
South America
India
1267
746
Asia
Mexico
762
78
North America
France
211
55
Europe
Japan
14 4
120
Asia
19
---
## Page 28
第二章AWK语言
20
Germany
96
61
Europe
England
9 4
56
Europe
在这一章的剩下部分里，如果没有显式给出输入数据，默认将countries作为输入
程序格式
模式一动作语句，以及动作内的语句通常用换行符分隔，但是若干条语句也可以出现在同一行，只要
它们之间用分号分开即可，一个分号可以放在任何语句的末尾
动作的左花括号必须与它的模式在月一行；而剩下的部分，包括右花括号，则可以出现在下面几行
空行会被忽略；它们可以插入在语句之前或之后，用来提高程序的可读性，空格与制表符可以出现在
运算符与操作数的周围，同样也是为了提高可读性，
注释可以出现在任意一行的末尾，一个注释以井号（#）开始，以换行符结束，正如
{print $1, $3 }# print country name and population
一条长语句可以分散成多行，只要在断行处插入一个反斜杠即可：
{print\
$1,
#country name
$2，
# area in thousands of square miles
$3}# population in millions
正如这个例子所呈现的那样，语句可以在进号之后断行，并且注释可以出现在断行的末尾，
在这本书里我们用到了若干种编程风格，之所以这样做，一方面是为了比较不同风格之网的差并，另
一方面是为了避免程序占用过多的行，对于比较短小的程序—-就像本章中出现过的那些例子—-格式
并不是非常重要，但是一致性与可读性对于大程序的管理非常有帮助，
2.1模式
模式控制着动作的执行：当模式匹配时，相应的动作便会执行，这一小节描述模式的6种类型，以及
匹配它们的条件
模式汇总
1. BEGIN( statements}
在输入被读取之前，statements执行一次，
2. END{ statements}
当所有输入被读取完毕之后，statements执行一次，
3. expression { statements}
每碰到一个使expression为真的输入行，statements 就执行.expression为真指的是其值非
零或非空.
---
## Page 29
第二章AWK语言
21
4./regular expression/ =
大于或等于
大于
匹配
1~
不匹配
$3/$2 >= 0.5
选择的行，其第3个字段除以第2个字段所得的商大于0.5，而
$0 >= "M"
26
选择那些以字母M,N,O等开头的输入行：
USSR
8649
275
Asia
USA
3615
237
North America
Mexico
762
78
North America
有时候一个比较运算符的类型不能单单靠表达式表现出来的语法形式来判断，程序
$1<$4
可以以数值的形式，或者字符串的形式比较输入行的第1个与第4个字段，在这里，比较的类型取决于
字段的值，并且有可能每一行都有不同的情况出现.文件countries的第1个与第4个字段总是字符
串，所以比较总是以字符串的形式进行；输出是
Canada
3852
25
North America
Brazi1
3286
1 3 4
South America
Mexico
762
78
North America
England
94
56
Europe
只有当两个字段都是数值时，比较才会以数值的形式进行；这种情况可以是
$2<$3
2.2节包含了一个更加完整的，关于字符串，数值与表达式的讨论
---
## Page 32
第二章AWK语言
24
字符串匹配模式
Awk提供了一种称为正则表达式（regularexpression）的表示法，它可以用来指定和匹配一个字符
事.正则表达式在Unix中使用得非常普遍，包括文本编辑器与shell.受限形式的正则表达式也出现在
其他系统中，在MS-DOS中可以用“通配符”指定一个文件名集合。
一个学符事匹配模式（string-matchingpattern）测试一个字符串是否包含一段可以被正则表达式
匹配的子字符事
最简单的正则表达式是仅由数字与字母组成的字符事，就像Asia，它匹配的就是它本身，为了将一
个正则表达式切换成一个模式，只需要用一对斜杠包围起来即可：
/Asia/
这个模式匹配那些含有子字符串Asia的输入行，例如 Asia,Asian，或Pan-Asiatic.注意，正则表
达式中空格是有意义的：字符事匹配模式
27
字符串匹配模式
1. /regexpr/
当当前输入行包含一段能够被regexpr匹配的子字符串时，该模式被匹配.
2. expression ~ /regexpr/
如果expression的字符串值包含一段能够被regexpr匹配的子字符时，该模式被匹配，
3. expression 1~ /regexpr/
如果expression的字符串值不包含能够被regexpr匹配的子字符事，该模式被匹配
在一与1-的语境中，任意一个表达式都可以用来替换/regexpr/
/ Asia /
只有当Asia被一对空格包围时才会匹配成功.
上面的模式是三种字符串匹配模式当中的一种，它的形式是用一对斜杠将正则表达式包围起来：
/r/
如果某个输入行含有能被r匹配的子字符串，则该行匹配成功
剩下的两种字符串匹配模式使用到了显式的匹配运算符：
expression ~ /r/
expression ↓~/r/
匹配运算符～的意思是“被..匹配”，！一的意思是“不被..匹配"，当expression的字符串值包含一段能
够被正则表达式r匹配的子字串时，第一个模式被匹配；当不存在这样的子字符串时，第二个模式被匹
配,
匹配运算符的左操作数经常是一个字段，模式
$4 ~ /As1a/
---
## Page 33
第二章AWK语言
25
匹配所有第4个字段包含Asia的输入行，而
$4 1~ /Asia/