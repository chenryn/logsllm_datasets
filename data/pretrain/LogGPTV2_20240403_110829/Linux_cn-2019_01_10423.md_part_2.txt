yaml.constructor.ConstructorError: while constructing a mapping
  in "a.yaml", line 1, column 1
found unhashable key
  in "a.yaml", line 1, column 3
```
在 Ruby 中，它可以工作：
```
{
    ["Detroit Tigers", "Chicago cubs"] => [
        #
    ],
    ["New York Yankees", "Atlanta Braves"] => [
        #,
        #,
        #
    ]
}
```
这个原因是你不能在 Python 中使用列表作为一个字典的键：
```
>>> {['a']: 'zxc'}
Traceback (most recent call last):
  File "", line 1, in 
  TypeError: unhashable type: 'list'
```
而这种限制并不是 Python 特有的，PHP、JavaScript 和 Go 等常用语言都有此限制。
因此，在 YAML 文件中使用这种语法，你将无法在大多数语言中解析它。
这是另一个从 YAML 规范的示例部分中获取的：
```
# Ranking of 1998 home runs
---
- Mark McGwire
- Sammy Sosa
- Ken Griffey
# Team ranking
---
- Chicago Cubs
- St Louis Cardinals
```
Python 会输出：
```
yaml.composer.ComposerError: expected a single document in the stream
  in "a.yaml", line 3, column 1
but found another document
  in "a.yaml", line 8, column 1
```
然而 Ruby 输出：
```
["Mark McGwire", "Sammy Sosa", "Ken Griffey"]
```
原因是单个文件中有多个 YAML 文档（`---` 意味开始一个新文档）。在 Python 中，有一个 `load_all` 函数来解析所有文档，而 Ruby 的 `load()` 只是加载第一个文档，据我所知，它没有办法加载多个文档。
[在实现之间存在很多不兼容](https://github.com/cblp/yaml-sucks)。
### 目标实现了吗？
规范说明：
> 
> YAML 的设计目标安装优先级降序排列如下：
> 
> 
> 1. YAML 很容易被人类阅读。
> 2. YAML 数据在编程语言之间是可移植的。
> 3. YAML 匹配敏捷语言的原生数据结构。
> 4. YAML 有一个一致的模型来支持通用工具。
> 5. YAML 支持一次性处理。
> 6. YAML 具有表现力和可扩展性。
> 7. YAML 易于实现和使用。
> 
> 
> 
那么它做的如何呢？
> 
> YAML 很容易被人类阅读。
> 
> 
> 
只有坚持一小部分子集时才有效。完整的规则集很复杂 —— 远远超过 XML 或 JSON。
> 
> YAML 数据在编程语言之间是可移植的。
> 
> 
> 
事实并非如此，因为创建常见语言不支持的结构太容易了。
> 
> YAML 匹配敏捷语言的原生数据结构。
> 
> 
> 
参见上面。另外，为什么只支持敏捷（或动态）语言？其他语言呢？
> 
> YAML 有一个一致的模型来支持通用工具。
> 
> 
> 
我甚至不确定这意味着什么，我找不到任何详细说明。
> 
> YAML 支持一次性处理。
> 
> 
> 
这点我接受。
> 
> YAML 具有表现力和可扩展性。
> 
> 
> 
嗯，是的，但它太富有表现力（例如太复杂）。
> 
> YAML 易于实现和使用。
> 
> 
> 
```
$ cat `ls -1 ~/gocode/src/github.com/go-yaml/yaml/*.go | grep -v _test` | wc -l
9247
$ cat /usr/lib/python3.5/site-packages/yaml/*.py | wc -l
5713
```
### 结论
不要误解我的意思，并不是说 YAML 很糟糕 —— 它肯定不像[使用 JSON 那么多的问题](http://arp242.net/weblog/JSON_as_configuration_files-_please_dont.html) —— 但它也不是非常好。有一些一开始并不明显的缺点和惊喜，还有许多更好的替代品，如 [TOML](https://github.com/toml-lang/toml) 和其他更专业的格式。
就个人而言，当我有选择时，我不太可能再次使用它。
如果你必须使用 YAML，那么我建议你使用 [StrictYAML](https://github.com/crdoconnor/strictyaml)，它会删除一些（虽然不是全部）比较麻烦的部分。
### 反馈
你可以发送电子邮件至 [PI:EMAIL](mailto:PI:EMAIL) 或[创建 GitHub issue](https://github.com/Carpetsmoker/arp242.net/issues/new) 以获取反馈、问题等。
### 脚注
1. 在 PHP 中你需要修改一个 INI 设置来获得安全的行为，不能只是调用像 `yaml_safe()` 这样的东西。PHP 想尽办法让愚蠢的东西越发愚蠢。干得漂亮！ [↩](#fnref1)
2. 不要在这里做空格与制表符之争，如果这里可以用制表符的话，我可以（临时）增加制表符宽度来使它更易读——这是制表符的一种用途。 [↩](#fnref2)
---
via: 
作者：[Martin Tournoij](https://arp242.net/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[MjSeven](https://github.com/MjSeven) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出