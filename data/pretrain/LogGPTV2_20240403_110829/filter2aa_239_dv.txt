      using (CngKey bobPubKey = CngKey.Import(bobPubKeyBlob,
            CngKeyBlobFormat.EccPublicBlob))
      {
        byte[] symmKey = aliceAlgorithm.DeriveKeyMaterial(bobPubKey);
        WriteLine("Alice creates this symmetric key with " +
           $"Bobs public key information: {Convert.ToBase64String(symmKey)}");
        using (var aes = new AesCryptoServiceProvider())
        {
          aes.Key = symmKey;
          aes.GenerateIV();
          using (ICryptoTransform encryptor = aes.CreateEncryptor())
          using (var ms = new MemoryStream())
          {
           // create CryptoStream and encrypt data to send
           using (var cs = new CryptoStream(ms, encryptor,
                CryptoStreamMode.Write))
           {
             // write initialization vector not encrypted
             await ms.WriteAsync(aes.IV, 0, aes.IV.Length);
             cs.Write(rawData, 0, rawData.Length);
           }
           encryptedData = ms.ToArray();
          }
          aes.Clear();
        }
      }
      WriteLine("Alice: message is encrypted: "+
        "{Convert.ToBase64String(encryptedData)}");
      WriteLine();
      return encryptedData;
    }
Bob从BobReceivesDataAsync（）方法的参数中接收加密数据。首先，必须读取未加
密的初始化矢量。AesCryptoServiceProvider类的BlockSize属性返回块的位数。位数除以
8，就可以计算出字节数。最快的方式是把数据右移3位。右移1位就是除以2，右移2位就
是除以4，右移3位就是除以8。在for循环中，包含未加密IV的原字节的前几个字节写入数
组iv中。接着用Bob的密钥对实例化一个ECDiffieHellmanCng对象。使用Alice的公钥，从
DeriveKeyMaterial（）方法中返回对称密钥。
比较Alice和Bob创建的对称密钥，可以看出所创建的密钥值相同。使用这个对称密钥
和初始化矢量，来自Alice的消息就可以用AesCryptoServiceProvider类解密。
    public async Task BobReceivesDataAsync(byte[] encryptedData)
    {
      WriteLine("Bob receives encrypted data");
      byte[] rawData = null;
      var aes = new AesCryptoServiceProvider();
      int nBytes = aes.BlockSize  3;
      byte[] iv = new byte[nBytes];
      for (int i = 0; i  _protector.Protect(input);
      public string Decrypt(string encrypted) => _protector.Unprotect(encrypted);