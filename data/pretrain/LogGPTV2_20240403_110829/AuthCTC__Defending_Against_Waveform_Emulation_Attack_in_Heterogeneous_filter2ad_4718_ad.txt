68
58
50
56
70
56
62
52
64
60
36
66
0
58
46
60
D
62
56
54
46
48
56
58
52
56
52
56
26
58
0
64
32
E
58
50
74
62
52
62
68
52
46
64
62
54
46
64
0
60
F
56
48
68
60
50
56
54
54
70
46
58
50
60
32
60
0
(b) Distinguishability Verification With DTW
Figure 5: Distinguishability Verification
So far, the attacker can understand and capture the useful content
from the eavesdropped ZigBee packets to launch an attack.
Suppose α is the size factor of 64-QAM constellation diagram,
i.e., the real parts and imaginary parts of constellation points are
chosen from A = {−7α, −5α, −3α, −α, α, 3α, 5α, 7α }, then (4) and
(5) describe how to minimize the quantization error.
P
i =1
E(α ) =
((cid:5)(pi ) − (cid:5)(N (α, pi )))2+((cid:7)(pi ) − (cid:7)(N (α, pi )))2
α = arg min
α
E(α )
(4)
(5)
in which (4) is the sum of squared error, (5) is to get the size factor
that can minimize (4), N (α, pi ) is to find the nearest constellation
point (pj ) to point pi from 64 predefined constellation points whose
size factor is α (i.e. (6)), (cid:5) and (cid:7) is to get the real part and imaginary
part, and P is the total number of points.
(cid:7)
pj = arg min
pj
((cid:5)(pj ) − (cid:5)(pi ))2 + ((cid:7)(pj ) − (cid:7)(pi ))2
(6)
(cid:5)(pj ), (cid:7)(pj ) ∈A
Since the second derivative of (4) (i.e., (7), in which N (cid:8)(α, pi ) is
a number instead of an expression) is greater than 0, (4) is a convex
function and has the global minimum. Thus, the first derivative
of (4) (i.e., (8)) is a monotonic increasing function. We use binary
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan24search to find its zero-crossing point, which is equivalent to find
the minimum value of the primitive function.
P
i =1
E (cid:8)(cid:8)(α ) = 2
P
E (cid:8)(α ) = −2
(cid:5)2(N (cid:8)(α, pi )) + (cid:7)2(N (cid:8)(α, pi ))
i =1
[(cid:5)(pi ) − (cid:5)(N (α, pi ))] × (cid:5)(N (cid:8)(α, pi ))
+[(cid:7)(pi ) − (cid:7)(N (α, pi ))] × (cid:7)(N (cid:8)(α, pi ))
Algorithm 1 shows the process of finding α . The most time-
consuming part is line 3, which calculates the total error of P points.
hiдh−l ow
Its time complexity is O(P ). The while-loop executes log2
times, whose time complexity is O(−log2
accuracy we want to achieve (e.g., a = 10
places). Thus, the overall time complexity is O(−Plog2
a), in which a is the result
−3 if round to 3 decimal
a).
a
(cid:9)
(7)
(8)
(cid:10)
Algorithm 1: Finding α
Input: result accuracy a = 10
−3
FFT points pi
lower limit of α low
upper limit of α hiдh
Output: optimum size of constellation diagram α
1 while hiдh − low > a do
hiдh+l ow
α =
P
;
2
E (cid:8)(α ) = −2
[(cid:7)(pi ) − (cid:7)(N (α, pi ))] × (cid:7)(N (cid:8)(α, pi ));
if E (cid:8)(α ) > 0 then
i =1
[(cid:5)(pi ) − (cid:5)(N (α, pi ))] × (cid:5)(N (cid:8)(α, pi )) +
2
3
4
5
6
7
8
9
hiдh = α ;
else if E (cid:8)(α ) < 0 then
low = α ;
else
return α ;
end
10
11 end
12 α = round( hiдh+l ow
13 return α ;
2
, − lg a);
After acquiring the suitable-sized constellation diagram, the
attacker can use it to generate the desired waveform.
4 WEA DETECTION
To defeat WEA, we propose a physical layer defensive mechanism
named as AuthCTC, which uses a one-way hash chain [21] as autho-
rization codes. These codes are only known by both the legitimate
CTC device and the detector. Each time, an authorization code
is embedded into the preamble of a CTC packet and sent by the
legitimate CTC device. If the detector finds that the received autho-
rization code is correct, the packet will be regarded as a legitimate
CTC packet.
For the scenario that there are more than one legitimate CTC
devices, each of them should possess a unique hash chain. The
detector should possess all chains and work as a central node.
4.1 Authorization Code Generation
To generate a chain of hash values, the detector selects a ran-
dom number nγ and recursively computes ni = h(ni +1 ||ID), ∀i ∈
[0, γ − 1], where h(·) denotes the cryptographic one-way hash func-
tion such as SHA-1, and ID denotes the identification number (e.g.,
hardware address) of a legitimate CTC device. Next, the detector
sends nγ to the legitimate CTC device in a secure way (e.g., input
it manually by the user. This step is feasible because the user only
needs to input a seed, just like the process of Bluetooth pairing). Fi-
nally, the legitimate CTC device recursively computes {n1, ..., nγ −1}
in the same way and uses ni as the authorization code of the i-th
transmission. Because the order of hash value generation and hash
value usage are different, even the attacker can overhear the current
hash value, he/she cannot derive the next available hash value.
As mentioned above, the user needs to reenter a new seed peri-
odically. The value of γ depends on how long the period is. Suppose
a user uses 50 authorization codes per day (e.g. he/she turns on/off
a ZigBee bulb 25 times), meanwhile, he/she wants to reenter a new
seed each year (which is not very often), then, the γ should be
50 × 365 = 18250. Suppose the length of an authorization code is 40
bits, then, it will take up 18250 × 40 = 730Kb storage space. A larger
γ can reduce the user’s unnecessary trouble whereas a smaller γ
can enhance the security since the content of the hash chain will
be changed before being cracked.
For the problem of synchronization, i.e. how can the communica-
tion pair knows which one authorization code is using currently, we
can just reserve a few bits to represent the sequence number of the
authorization code when embedding them into the packet so that
the detector can find the corresponding value of the authorization
code according to the sequence number and compare it with the
actually received value.
4.2 Authorization Code Encoding
Some papers [51, 52] adopt special modulation schemes to em-
bed authorization codes at the sender side and detect them at the
receiver side. However, in our scenario, due to the usage of com-
mercial WiFi devices, the modulation scheme cannot be changed.
Jin et al. [21] propose a method to prevent unauthorized dynamic
spectrum access, they embed spectrum permits into WiFi symbols
by changing the lengths of CPs. Similar work can also be found
in [46], which embed authorization codes into ZigBee preambles
to detect unauthorized devices in the IoT environment. Motivated
by the above works, we decide to embed authorization codes into
ZigBee preambles by dynamically changing the CP lengths accord-
ing to the content of the authorization codes. Specifically, a ZigBee
preamble “00000000A7” includes 10 ZigBee symbols, each ZigBee
symbol is emulated by 4 WiFi symbols. Thus, a ZigBee preamble
includes 40 WiFi CPs.
Here, we first give an example with specific numbers, then for-
mulate our approach. In normal circumstances, the CP is composed
of 16 sample points in the IEEE 802.11g. We define the CP length as a
variable value that can be chosen from set A={10, 12, 14, 16, 18, 20, 22}.
Then, two CPs that have a sum of 32 form a pair so that we can
get 4 CP pairs including (10, 22), (12, 20), (14, 18), (16, 16). In partic-
ular, the objective here is to ensure that in the macroscopic view,
the CP’s length doesn’t change, so that the packet length doesn’t
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan25change as well. Finally, these 4 CP pairs are mapped to 00, 01, 10,
11 four bit-pairs. When we want to embed an authorization code
into the preamble, we can divide the bit sequence of authorization
code into bit-pairs and then map them to CP pairs. Fig. 7 shows 4
WiFi symbol pairs with different CP pairs. In each symbol pair, the
part with the same color represents the same symbol.
00
01
10
11
···
···
···
···
X1
XX
1
Y1
YYY
11
···
···
···
···
16
65
Cyclic Prefix
A WiFi Symbol Pair
···
···
···
···
···
···
···
···
X3
XX
X2
XX
Y2
75
80
···
···
···
···
Y3
96
160
Data Source of Cyclic Prefix
139 144
···
···
···
···
X4
XX
Figure 7: Authorization Code Encoding/Decoding
A key issue may be: whether the CP length can be modified
arbitrarily on commercial devices. In fact, Schulz et al. [32–34] have
developed a smartphone APP to implement the Software-Defined
Radio (SDR) function on smartphones. It supports various kinds of
WiFi devices, which can be found in [31]. By using this APP, we
can achieve the goal of adjusting CP length on commercial WiFi
devices.
4.3 Authorization Code Decoding
Since both the detector and the CTC user are WiFi-based devices,
the detector can receive the CTC signal without any modification
in the preamble and header of the WiFi packet. But the detector
still has to know where is the starting point of the emulated ZigBee
signal, as discussed in Sec. 4.3.1.
4.3.1 High-Precision Frame Delimiting. When receiving emulated
signals, the detector also faces the problem of frame delimiting.
This frame delimiting is different from what we discussed in Sec.
3.2. The previous one is used on the user side (e.g., smartphone)
to detect ZigBee signals, this one is used on the detector side to
verify emulated signals. They have two main differences: (1) The
ZigBee waveform is predefined so that we can use the received
waveform to compare with the predefined waveform. However, the
emulated waveform is indeterminate due to the existence of cyclic
prefix, especially in this work, where the cyclic prefix is variable
for embedding authorization code. (2) The frame delimiting on
the detector side has a higher precision requirement than that
on the user side. On the user side, even if the delimiting has an
offset of 5 sample points, it will not impact the decoding results
obviously. However, on the detector side, an offset of 1-2 sample
points will lead to a large difference in the decoding results of the
authorization code. Fig. 8(a) shows the consequence of delimiting
offset. If the delimiting has an offset of 1 sample point, the decoding
accuracy of authorization code drops from 100% to 29%. Therefore,
we need to design a high-precision frame delimiting method to
delimit the beginning of emulated ZigBee frames. The detailed
process is described as follows.
When a signal is detected, i.e. the amplitude of the received
waveform exceeds a determined threshold, the frame delimiting
algorithm is activated. We use a sliding window (length: 160 sample
points) to check whether the current position is the starting point of
e
d
o
C
h
u
A
t
f
o
y
c
a
r
u
c
c
A
g
n
d
o
c
e
D
i
1
0.8
0.6
0.4
0.2
0
-4
i
w
o
d
n
W
g
n
d
i
i
l
S
f
o
l
e
u
a
V
t
n
e
r
r
u
C
-3
-2
-1
0
1
2
3
4
Offset of Delimiting (sample point)
6
5
4
3
2
1
0
0
20
40
60
Sample Point
80
100
(a) Decoding Accuracy
(b) Frame Delimiting on Detector
Figure 8: Precision Delimiting
start point of frame
A2
A5
A1
b2
A3
b3
A4
b5
b6
A6
c1
c2
c4
c5
sliding window has not 
yet reached start point
sliding window has 
passed start point
Figure 9: Principle of Sliding Window
the frame. The sliding window should be placed at the position that
prior to the header of the received packet and then searches towards
the trailer of the received packet. Each time the sliding window
moves to a new position, we use (9) to calculate the window’s value,
which represents the probability that the current position is the
starting point of a frame. After getting a series of values (e.g. 80
values, we suppose the starting point will appear among the nearby
80 sample points when a signal is detected), we choose the index
of the maximum value as the starting point of the frame.
0
10
k =1
k =−l1
w =
97+l2
96
k =97
k =81
|Sk − Sk +64
| +
|Sk − Sk +64
|
|Sk − Sk +64
| +
|Sk − Sk +64
(9)
|
In (9), l1 ∈ [1, 48] and l2 ∈ [1, 42] are adjustable values for trading
off between computational costs and delimiting accuracy. A larger
l1 or l2 means we take more sample points into consideration when
calculating the value of sliding window, which will result in a more
accurate result as well as more computational costs. A negative
subscript means the sample point is at the tail of the last symbol
pair, while a positive subscript greater than 160 means the sample
point is at the head of the next symbol pair. Since the waveforms
represented by the numerator are different from each other whereas
the waveforms represented by the denominator are very similar to
each other, the value of (9) should be very large. However, if the
sliding window has not yet reached or has passed the starting point,
the numerator will get smaller whereas the denominator will get
larger. As a result, the fraction will get smaller. Therefore, only the
starting point has the maximum value.
We use Fig. 9 as an example to explain the principle of (9). Be-
|A1−A4 |+ |A3−A6 |
cause of A2 = A5, A1 (cid:2) A4, A3 (cid:2) A6, the value of
(this expression has the similar form with (9)) should be very large.
|A2−A5 |
Session 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan26However, if the sliding window has not yet reached the starting
point, the denominator will get larger due to b2 (cid:2) b5, the numerator