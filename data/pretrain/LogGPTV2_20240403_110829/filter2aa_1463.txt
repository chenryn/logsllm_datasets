# Quantum Computing 101: How to Crack RSA

**Author:** Walter C. Daugherity  
**Department of Computer Science, Texas A&M University**  
**Email:** [PI:EMAIL]

## Biography
Walter C. Daugherity is a Senior Lecturer in the Departments of Computer Science and Electrical Engineering at Texas A&M University. He holds a bachelor’s degree from Oklahoma Christian University and master’s and doctoral degrees from Harvard University. His research interests include fuzzy logic, object-oriented programming, and quantum computing.

In collaboration with David A. Church, he developed the first course in quantum computing at Texas A&M University, which will be offered for the third time in the Fall 2002 semester.

## Abstract
- **What is quantum computing?**
- **How does it work?**
- **Why is it exponentially faster than classical computing?**
- **How can a quantum computer crack RSA?**

## Introduction to Quantum Computing
- **Quantum State:** A vector in a Hilbert space, with eigenstates |0> and |1> (e.g., spin-up and spin-down of a spin-1/2 particle).
- **Superposition:** A combination w0 |0> + w1 |1>, where w represents the amplitude and w* w gives the probability of the eigenvalue.
- **Interference:** Produced by phase angle differences, resulting in constructive or destructive interference.

### The Topsy Turvy World of Quantum Computing
- **Spin States and Qubits:** The spin of a particle in a dc magnetic field can represent 0 and 1 in digital logic. A radio frequency pulse can flip the spin or create a superposition of states, enabling simultaneous calculations on both states.
- **Entanglement:** Two mutually dependent qubits have a joint state that cannot be factored into individual states. For example, the 2-qubit system (|00> + |11>)/2 has a quantum state that is entangled.
- **Teleportation:** Reproduce a quantum state at another location, destroying the initial state in the process. This involves entangled particles and the transfer of a quantum state from one particle to another.

### Quantum Cryptography
- **Heisenberg’s Uncertainty Principle:** Relies on the principle that rectilinear and diagonal polarization cannot be measured simultaneously, making eavesdropping detectable and ensuring provable security.

## Exponential Speedup
- **Superposition:** N qubits can hold 2N values simultaneously.
- **Function Evaluation:** A single operator on such a register evaluates the function for all 2N values in the time it would take to do one evaluation.

## Application to Cryptography
- **Conventional (Private Key) Cryptography:**
  - **Encryption:** M = E(M, K), where M is the plaintext and K is the secret key.
  - **Decryption:** M = D(C, K), where C is the ciphertext.
  - **Security:** Requires a strong encryption algorithm and secure key distribution.
- **Public Key Cryptography:**
  - **Encryption:** C = E(M, KU), where KU is the public key.
  - **Decryption:** M = D(C, KR), where KR is the private key.
  - **History:**
    - 1976: Proposed by Diffie and Hellman, relying on the difficulty of computing discrete logarithms.
    - 1977: RSA algorithm developed by Rivest, Shamir, and Adleman, relying on the difficulty of factoring large numbers.
- **RSA Algorithm:**
  - Select two primes p and q.
  - Calculate n = p * q.
  - Calculate f(n) = (p-1)(q-1).
  - Select e such that 1 < e < f(n) and gcd(f(n), e) = 1.
  - Calculate d = e-1 mod f(n).
  - Public key KU = {e, n}.
  - Private key KR = {d, n}.

### Example
- **Primes:** p = 7, q = 17
- **n = 119, f(n) = 96, e = 5, d = 77**
- **Public Key:** KU = {5, 119}
- **Private Key:** KR = {77, 119}
- **Plaintext M = 19, Ciphertext C = 66, Decrypted M = 19**

### Cracking RSA
- **Factor n** to get p and q.
- **Calculate f(n) = (p-1)(q-1).**
- **Calculate d = e-1 mod f(n).**
- **Private key KR = {d, n}.**

### Factoring Difficulty
- **Year 1964:** 20 decimal digits, 0.000009 MIP-Years
- **Year 1974:** 45 decimal digits, 0.001 MIP-Years
- **Year 1984:** 71 decimal digits, 0.1 MIP-Years
- **Year 1994:** 129 decimal digits, 5000 MIP-Years
- **Year 2000:** 2.9x10^9 MIP-Years

### Shor’s Algorithm
- **Choose q** such that 2n^2 <= q <= 3n^2.
- **Choose x** at random such that gcd(x, n) = 1.
- **Calculate the discrete Fourier transform** of a table of xa mod n, order log(q) times, yielding multiples of q/r, where r is the period.
- **Determine r** using a continued fraction technique.
- **Factors of n** are gcd(xr/2 - 1, n) and gcd(xr/2 + 1, n).

### Key Features
- **Discrete Fourier Transform:** Maps equal amplitudes into unequal amplitudes, making it more likely to yield a result close to some multiple of 1/r.
- **Period Calculation:** Can be efficiently computed using quantum algorithms.

### Implementation
- **Current Status:** By 2000, a quantum computer could factor 15 = 3 * 5.
- **Scaling Up:** Theoretically unlimited, but practical implementation is challenging.
- **Future Impact:** Quantum-effect memory, special-purpose experimental computers, and commercial availability will impact public-key cryptography.

### For Further Information
- [http://www.qubit.org](http://www.qubit.org)
- [http://feynman.media.mit.edu/quanta/nmrqc-darpa/index.html](http://feynman.media.mit.edu/quanta/nmrqc-darpa/index.html)
- [http://www.theory.caltech.edu/~quic/index.html](http://www.theory.caltech.edu/~quic/index.html)
- [http://qso.lanl.gov/qc/](http://qso.lanl.gov/qc/)
- [http://www.research.ibm.com/quantuminfo/](http://www.research.ibm.com/quantuminfo/)

### Reference Sites
- [http://www.theory.caltech.edu/people/preskill/ph229/references.html](http://www.theory.caltech.edu/people/preskill/ph229/references.html)
- [http://www.duke.edu/~msm7/phy100/References.html](http://www.duke.edu/~msm7/phy100/References.html)
- [http://www.magiqtech.com/QIref.html](http://www.magiqtech.com/QIref.html)
- [http://www.cs.caltech.edu/~westside/quantum-intro.html](http://www.cs.caltech.edu/~westside/quantum-intro.html)
- [http://www.cs.umbc.edu/~lomonaco/qcomp/Qcomp.html](http://www.cs.umbc.edu/~lomonaco/qcomp/Qcomp.html)
- [http://gagarin.eecs.umich.edu/Quantum/papers/](http://gagarin.eecs.umich.edu/Quantum/papers/)
- [http://astarte.csustan.edu/~tom/booklists/qc-refs-2001.pdf](http://astarte.csustan.edu/~tom/booklists/qc-refs-2001.pdf)
- [http://www.stanford.edu/~zimmej/T361/Final%20Project/references.htm](http://www.stanford.edu/~zimmej/T361/Final%20Project/references.htm)

### Fall 2002 Course
**Intro to Quantum Computing**  
**ELEN 689-607 / PHYS 689-601**  
**Texas A&M University**  
**Instructors: Dr. Walter C. Daugherity, Dr. David A. Church**  
**Recommended Prerequisites:** Knowledge of linear algebra (e.g., MATH 304) and one course in physics.  
**Enrollment is limited.**