follows from the resource constrained nature of nodes
is that we limit cryptographic techniques to symmetric
key. While public key cryptography would simplify key
management, the cost of implementing public key cryp-
tography in hardware is too high [31].
We present an overview of our design, and then we
zoom in on the most interesting aspects.
3.1 Overview
Nodes. Nodes are low-cost,
low-power microcon-
trollers (our implementation is based on the TI MSP430).
The processor in the nodes uses a von Neumann archi-
tecture with a single address space for instructions and
data. To distinguish actual nodes belonging to IP from
fake nodes set up by an attacker, IP shares a symmetric
key with each of its nodes. We call this key the node
master key, and use the notation KN for the node master
key of node N. Given our attacker model where the at-
tacker can control all software on the nodes, it follows
that this key must be managed by the hardware, and it is
only accessible to software in an indirect way.
Software Providers. Software providers are principals
that can deploy software to the nodes of IP. Each software
provider has a unique public ID SP.3 IP uses a key deriva-
tion function kdf to compute a key KN,SP = kdf(KN,SP),
which SP will later use to setup secure communication
with its modules. Since node N has key KN, nodes can
compute KN,SP for any SP. The node will include a hard-
ware implementation of kdf so that the key can be com-
puted without trusting any software.
Software Modules. Software modules are essentially
simple binary ﬁles containing two mandatory sections:
a text section containing protected code and constants
and a protected data section. As we will see later, the
contents of the latter section are not attested and are there-
fore vulnerable to malicious modiﬁcation before hardware
protection is enabled. Therefore, the processor will zero-
initialize its contents at the time the protection is enabled
to ensure an attacker can not have any inﬂuence on a
module’s initial state. Next to the two protected sections
discussed above, a module can opt to load a number of
unprotected sections. This is useful to, for example, limit
the amount of code that can access protected data. Indeed,
allowing code that does not need it access to protected
data increases the possibility of bugs that could leak data
outside of the module. In other words, this gives develop-
ers the opportunity to keep the trusted code of their own
modules as small as possible. Each section has a header
that speciﬁes the start and end address of the section.
The identity of a software module consists of (1) the
content of the text section and (2) the start and end ad-
dresses of the text and protected data sections. We refer to
this second part of the identity as the layout of the module.
It follows that two modules with the exact same code and
data can coexist on the same node and will have different
identities as their layout will be different. We will use
notations such as SM or SM1 to denote the identity of a
speciﬁc software module.
Software modules are always loaded on a node on
behalf of a speciﬁc software provider SP. The loading
proceeds as expected, by loading each of the sections of
the module in memory at the speciﬁed addresses. For
each module loaded, the processor maintains the layout
information in a protected storage area inaccessible from
2That is, the continuous monitoring of a temperature-controlled
supply chain.
3Throughout this text, we will often refer to a software provider
using its ID SP.
482  22nd USENIX Security Symposium 
USENIX Association
KN = Known byIP
KN,SP = kdf(KN,SP)
KN,SP,SM = kdf(KN,SP,SM)
Figure 2: Overview of the keys used in Sancus. The node
key KN is only known by IP and the hardware. When SP
is registered, it receives its key KN,SP from IP which can
then be used to create module speciﬁc keys KN,SP,SM.
software. It follows that the node can compute the identity
of all modules loaded on the node: the layout information
is present in protected storage and the content of the text
section is in memory.
An important sidenote here is that the loading process
is not trusted. It is possible for an attacker to intervene
and modify the module during loading. However, this will
be detected as soon as the module communicates with its
provider or with other modules (see Section 3.3).
Finally, the node computes a symmetric key KN,SP,SM
that is speciﬁc to the module SM loaded on node N by
provider SP.
It does so by ﬁrst computing KN,SP =
kdf(KN,SP) as discussed above, and then computing
KN,SP,SM = kdf(KN,SP,SM). All these keys are kept in
the protected storage and will only be available to soft-
ware indirectly by means of new processor instructions
we discuss later. Figure 2 gives an overview of the keys
used by Sancus.
Note that the provider SP can also compute the same
key, since he received KN,SP from IP and since he knows
the identity SM of the module he is loading on N. This
key will be used to attest the presence of SM on N to SP
and to protect the integrity of data sent from SM on N
to SP.
Figure 3 shows a schematic picture of a node with a
software module loaded. The picture also shows the keys
and the layout information that the node has to manage.
Memory protection on the nodes. The various mod-
ules on a node must be protected from interfering with
each other in undesired ways by means of some form
of memory protection. We base our design on the re-
cently proposed program-counter based memory access
control [43], as this memory access control model has
been shown to support strong isolation [42] as well as
remote attestation [14]. Roughly speaking, isolation is
implemented by restricting access to the protected data
section of a module such that it is only accessible while
the program counter is in the corresponding text section
of the same module. Moreover, the processor instructions
that use the keys KN,SP,SM will be program counter depen-
dent. Essentially the processor offers a special instruction
to compute a Message Authentication Code (MAC). If the
instruction is invoked from within the text section of a spe-
ciﬁc module SM, the processor will use key KN,SP,SM to
compute the MAC. Moreover, the instruction is only avail-
able after memory protection for module SM has been en-
abled. It follows that only a well-isolated SM installed on
behalf of SP on N can compute MACs with KN,SP,SM, and
this is the basis for implementing both remote attestation
and secure (integrity-protected) communication to SP.
Secure linking. A ﬁnal aspect of our design is how
we deal with secure linking. When a software provider
sends a module SM1 to a node, this module can specify
that it wants to link to another module SM2 on the same
node, so that SM1 can call services of SM2 locally. SM1
speciﬁes this by including a MAC of (the identity of)
SM2 computed using the key KN,SP,SM1 in an unprotected
section.4 The processor includes a new special instruction
that SM1 can call to check that (1) there is a module
loaded (with memory protection enabled) at the address
of SM2 and (2) the MAC of the identity of that module
has the expected value.
This initial authentication of SM2 is needed only once.
In Section 3.5, we will discuss a more efﬁcient procedure
for subsequent authentications.
We currently do not incorporate caller authentication
in our design. That is, SM2 can not easily verify that it
has been called by SM1. Note that this can in principle be
implemented in software: SM1 can call SM2 providing a
secret nonce as parameter. SM2 can then call-back SM1,
passing the same nonce, asking for acknowledgement
that it had indeed been called by SM1. Future work will
include caller authentication in the core of Sancus’ design
to make it more efﬁcient and transparent.
Separating the various uses of MACs. Sancus uses
MACs for a variety of integrity checks as well as for
key derivation. Our design includes a countermeasure to
avoid attacks where an attacker replays a MAC computed
for one purpose in another context. In order to achieve
separation between the different applications of MAC
functions, we make sure the ﬁrst byte of the input to the
MAC function is different for each use case: 01 for the
derivation of KN,SP, 02 for the derivation of KN,SP,SM, 03
for attestation and 04 for MAC computations on data.
Conﬁdentiality. As mentioned in Section 2.3, we de-
cided to not include conﬁdentiality of communication in
our design. However, since we provide attestation of mod-
ules and authentication of messages, conﬁdentiality can
4Note that since this MAC depends on the load addresses of SM1
and SM2, it may not be known until SM1 has been deployed. If this is
the case, SP can simply send the MAC after SM1 is deployed and the
load addresses are known.
USENIX Association  
22nd USENIX Security Symposium  483
Node
y
r
o
m
e
M
Unprotected
t
n
i
o
p
y
r
t
n
E
SM1 text section
SM1 protected data section
Code & constants Unprotected
Protected data
Unprotected
Protected
storage
area
KN
KN,SP,SM1
SM1 metadata
Layout
Keys
Figure 3: A node with a software module loaded. Sancus ensures the keys can never leave the protected storage area by
only making them available to software in indirect ways through new processor instructions.
be implemented in software if necessary. One possibility
is deploying a module with the public key of SP and a
software implementation of the necessary cryptographic
primitives. Another possibility is establishing a shared
secret after deployment using a method such as Difﬁe-
Hellman key exchange with authenticated messages. Note
that implementing this last method is non-trivial due to
the lack of a secure source of randomness. However, in
the context of wireless sensor networks, methods have
been devised to create cryptographically secure random
number generators using only commonly available hard-
ware [17].
Since the methods outlined above are expensive in
terms of computation time and increase the TCB of mod-
ules, we are currently considering adding conﬁdentiality
to the core of Sancus’ design. Exploring this is left as
future work.
This completes the overview of our design. We now
zoom in on the details of key management, memory ac-
cess control, secure communication, remote attestation
and secure linking.
3.2 Key management
We handle key management without relying on public-
key cryptography [32]. IP is a trusted authority for key
management. All keys are generated and/or known by IP.
There are three types of keys in our design (Figure 2):
• Node master keys KN shared between node N and IP.
• Software provider keys KN,SP shared between a
provider SP and a node N.
• Software module keys KN,SP,SM shared between a
node N and a provider SP, and the hardware of N
makes sure that only SM can use this key.
We have considered various ways to manage these keys.
A ﬁrst design choice is how to generate the node master
keys. We considered three options: (1) using the same
node master key for every node, (2) randomly generating
a separate key for every node using a secure random
number generator and keeping a database of these keys
at IP, and (3) deriving the master node keys from an IP
master key using a key derivation function and the node
identity N.
We discarded option (1) because for this choice the
compromise of a single node master key breaks the se-
curity of the entire system. Options (2) and (3) are both
reasonable designs that trade off the amount of secure
storage and the amount of computation at IP’s site. Our
prototype uses option (2).
The software provider keys KN,SP and software module
keys KN,SP,SM are derived using a key derivation function
as discussed in the overview section.
Finally, an important question is how compromised
keys can be handled in our scheme. Since any secure key
derivation function has the property that deriving the mas-
ter key from the derived key is computationally infeasible,
the compromise of neither a module key KN,SP,SM nor a
provider key KN,SP needs to lead to the revocation of KN.
If KN,SP is compromised, provider SP should receive a
484  22nd USENIX Security Symposium 
USENIX Association
new name SP(cid:31) since an attacker can easily derive KN,SP,SM
for any SM given KN,SP. If KN,SP,SM is compromised, the
provider can still safely deploy other modules. SM can
also still be deployed if the provider makes a change to
the text section of SM.5 If KN is compromised, it needs
to be revoked. Since KN is different for every node, this
means that only one node needs to be either replaced or
have its key updated.
3.3 Memory access control
Memory can be divided into (1) memory belonging to
modules, and (2) the rest, which we refer to as unprotected
memory. Memory allocated to modules is divided into
two sections, the text section, containing code and public
constants, and the protected data section containing all
the data that should remain conﬁdential and should be
integrity protected. Modules can also have an unprotected
data section that is considered to be part of unprotected
memory from the point of view of the memory access
control system.
Apart from application-speciﬁc data, run-time metadata
such as the module’s call stack should typically also be in-
cluded in the protected data section. Indeed, if a module’s
stack were to be shared with untrusted code, conﬁden-
tial data may leak through stack variables or control-data
might be corrupted by an attacker. It is the module’s
responsibility to make sure that its call stack and other
run-time metadata is in its protected data section, but our
implementation comes with a compiler that ensures this
automatically (see Section 4.2).
The memory access control logic in the processor en-
forces that (1) data in the protected data section of a
module is only accessible while code in the text section of
that module is being executed, and (2) the code in the text
section can only be executed by jumping to a well-deﬁned
entry point. The second part is important since it prevents
attackers from misusing code chunks in the text section
to extract data from the protected data section. For exam-
ple, without this guarantee, an attacker might be able to
launch a Return-Oriented Programming (ROP) attack [7]
by selectively combining gadgets found in the text sec-
tion. Note that, as shown in Figure 3, our design allows
modules to have a single entry point only. This may seem
like a restriction but, as we will show in Section 4.2, it
is not since multiple logical entry points can easily be
dispatched through a single physical entry point. Table 1
gives an overview of the enforced access rights.
Memory access control for a module is enabled at the
time the module is loaded. First, untrusted code (for
instance the node operating system) will load the module
5For example, a random byte could be appended to the text section
without changing the semantics of the module.
Table 1: Memory access control rules enforced by Sancus
using the traditional Unix notation. Each entry indicates
how code executing in the “from” section may access the
“to” section.
From/to
Entry
Text
Unprotected/
Other SM
Entry Text Protected Unprotected
r-x
r-x
r-x
r-x
rw-
rw-
r-x
r--
---
rwx
rwx
rwx
in memory as discussed in Section 3.1. Then, a special
instruction is issued:
protect layout,SP
This processor instruction has the following effects:
• the layout is checked not to overlap with existing
modules, and a new module is registered by storing