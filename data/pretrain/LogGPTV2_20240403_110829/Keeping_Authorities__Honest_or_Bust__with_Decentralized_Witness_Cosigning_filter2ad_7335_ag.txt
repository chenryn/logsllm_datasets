### VII. DISCUSSION AND FUTURE WORK

This paper primarily focuses on the fundamental CoSi protocol for collective witnessing and signing. We do not claim to have addressed all the critical issues relevant to applying CoSi in specific cothority application contexts. However, we will briefly revisit some of the motivating applications introduced in Section II, in light of our implementation and evaluation results.

#### a) Logging and Timestamping Authorities
Although the current CoSi prototype is basic, it already implements the essential functionality of traditional tamper-evident logging and timestamping authorities [2], [63], [121]. Since neither the leader nor any individual signer can produce a collective signature without the participation of a quorum from a potentially large group, such a timestamp cothority can offer robust protection against equivocation, history-rewriting, or log-entry back-dating attacks that a compromised centralized timestamp service might mount. When integrated into a directory [89] or software update service [116], this timestamping architecture can provide strong proofs of freshness by allowing clients to submit random challenges and verify that their challenges are included in the service’s next signed update.

#### b) Certificate Authorities
Adding proactive transparency and protecting clients against stolen CA-related keys (including CT log server keys) may be the most compelling and immediately urgent use case for CoSi. While adding witness cosigning to CT's log server, as explored above, represents a relatively simple and potentially worthwhile step, more substantial modifications to the current CA system may be necessary to address other major issues such as certificate freshness and revocation [82].

In a witness cothority architecture, where multiple CAs inspect and collectively sign certificates, stolen CA keys (such as those of DigiNotar [8], [22] and Comodo [21]) would not be usable to sign certificates that a web browser would accept. Not only CAs but also browser vendors and security companies could incorporate monitoring servers into the certificate cothority as signers, to watch for and perhaps proactively impose a temporary "veto" on the signing of unauthorized certificates. For example, they could veto certificates proposed by a CA that is not recorded as having contractual authority over a given domain. Granting other CAs serving as witnesses even temporary veto power over a CA's certificate issuance processes raises DoS concerns, but these concerns might be mitigated if administrative communication channels between CAs and witnesses are effective.

Deploying a more general certificate cothority would require addressing many additional issues beyond the basic collective signing mechanism covered here, including technical, organizational, and political challenges. One important technical challenge is backward compatibility and incremental deployment. We anticipate that current root CAs might gradually transition their root signing keys into witness cothority keys, with their current sets of delegated CAs (and any other cooperating root CAs) serving as witnesses. Each root CA could transition independently at its own pace, driven by pressure from users and browser vendors to increase security. Web browsers would need to be upgraded gradually to support aggregation-compatible signature schemes such as Schnorr, in addition to the currently common RSA, DSA, and ECDSA schemes. During their transition period, root CAs could retain traditional root CA certificates for use in older web browsers while embedding root cothority certificates into suitably upgraded browsers. However, a detailed exploration and analysis of the "right" way to integrate witness cosigning into the CA system is left for future work.

#### c) Public Randomness Authorities
While not our primary focus, the current CoSi prototype effectively implements a simple collective public randomness service that could improve the trustworthiness of public randomness authorities [103], [110]. In phase 2 of the signing protocol (Section III-E), each server commits to a fresh random secret \( v_i \) that no participant will know unless all signers are compromised or the discrete-log hardness assumption fails. The final response produced in phase 4 depends unpredictably and one-to-one on this random secret and the collective challenge \( c \). Thus, we can use the final aggregate response \( \hat{r}_0 \) as a per-round public random value that was collectively committed in phase 2 but will be unpredictable and uncontrollable by any participant unless all signers are colluding.

However, our current prototype cannot guarantee that these random outputs are fully unbiased due to its reliance on the signing exception mechanism for availability. If a malicious leader colludes with \( f \) other signers, the leader can control whether these colluders appear online or offline to produce up to \( 2^f \) different possible final aggregate responses with different exception-sets, and choose the one most advantageous to the leader just before completing phase 4 of the protocol. Alternative approaches, such as using verifiable secret sharing (VSS) techniques [55], [125], might address this bias issue by ensuring that every node's secret is unconditionally incorporated in the final response, unless a catastrophic failure makes some server's secret unrecoverable even via secret-sharing.

With these changes, a future version of CoSi might be able to offer bias-resistant randomness in a conventional but scalable threshold-security model, contrasting with more exotic approaches recently proposed using new cryptographic primitives and hardness assumptions [79] or the Bitcoin blockchain [20]. We leave the exploration of this opportunity to future work.

#### d) Other Types of Authorities
Integrating witness cosigning into blockchain systems such as Bitcoin [102] presents interesting opportunities to improve blockchain security and performance [70]. The tree-based scaling techniques explored here may also be applicable to decentralizing other cryptographic primitives such as public-key encryption/decryption. A large-scale cothority might collectively decrypt ElGamal [51] ciphertexts at particular future dates or under other checkable conditions, such as time-lock vaults [100], [112], key escrows [43], or fair-exchange protocols [58].

### VIII. RELATED WORK

The theoretical foundations for CoSi and witness cothorities already exist in the form of threshold signatures [17], [120], aggregate signatures [18], [84], [85], and multisignatures [12], [93]. Threshold signatures allow a subset of authorized signers to produce a signature, often making it impossible for the verifier to determine which signers were involved. Aggregate signatures, a generalization of multisignatures, enable signers to produce a short signature by combining their signatures on individual statements through a serial process. Multisignatures closely fit the requirements of CoSi for security, efficiency, and simplicity of generation across many signers. However, to our knowledge, these primitives have been deployed only in small groups (e.g., ≈ 10 nodes) in practice, and there is no prior work experimentally evaluating the practical scalability of threshold crypto or multisignature schemes.

Merkle signatures [23], [90], [92] use Merkle trees to enable a single signer to produce multiple one-time signatures verifiable under the same public key. Online timestamping services [2], [63] and notaries [121] allow clients to prove the existence of some data (e.g., contracts, research results, copyrightable work) before a certain point in time by including it in a timestamped log entry. Typically, a trusted third party acts as a timestamping authority [46], [59], [115] and has unilateral power to include, exclude, or change the log of timestamped data.

Many distributed systems rely on tamper-evident logging [38], [81]. Logging services are vulnerable to equivocation, where a malicious server rewrites history or presents different "views of history" to different clients. Solutions include weakening consistency guarantees as in SUNDR [81], adding trusted hardware as in TrInc [80], or relying on a trusted party [117]. Certiﬁcate Transparency (CT) [76], [78] and NIST’s Randomness Beacon [103] are examples of application-specific logging services that exemplify issues related to a trusted-party design paradigm.

Directory services such as Namecoin [132] and Keybase [37] use blockchains like Bitcoin [102] as a decentralized timestamping authority [69]. With this approach, history rewriting or equivocation attacks become difficult once a transaction is deeply embedded in the blockchain. However, clients have no efficient decentralized way to verify that a timestamp transaction is in the blockchain, other than by downloading and tracking the blockchain themselves or by trusting the say-so of centralized "full nodes." Blockchains with collectively signed transactions [70] might address this verification weakness in the blockchain approach.

There are many proposals to address PKI weaknesses [36]. Browsers such as Chrome and Firefox hard-code or pin public keys for particular sites such as google.com [52], [72] or particular CAs for each site. However, browsers cannot ship with hard-coded certificates or CAs for each domain for the entire web. Alternatively, browsers pin the first certificate a client sees [122], protecting a site’s regular users but not new users. TACK [88] offers site owners the ability to authorize TLS keys for their domain using a long-term TACK key they control. Since the client’s browser must witness a pin on two different occasions, TACK protects users from opportunistic attackers but does not prevent an attacker with long-term access to the victim’s network from tricking them into accepting incorrect pins.

More recent mitigations for CA weaknesses rely on logging and monitoring certificates, as proposed in systems like AKI [68], ARPKI [10], PoliCert [126], and CT [76], [78]. Now deployed in the Chrome browser, CT requires CAs to insert newly-signed certificates into public logs, which independent auditors and monitors check for consistency and invalid certificates. Even with CT, an attacker can still create a fake EV certificate that the Chrome browser will accept by stealing the secret keys of, or secretly coercing signatures from, only three servers: any single CA and any two CT log servers [77]. If the attacker also blocks the targeted device from gossiping with public CT servers after accepting this fake certificate, the attack can remain hidden indefinitely [57]. CT’s reliance on clients being able to gossip with monitors and auditors also raises latency and privacy concerns.

COCA [136] distributes the operation of a CA across multiple servers, and Secure Distributed DNS [27] similarly distributes a DNSSEC [6] name service. These systems represent precedents for CoSi’s collective witnessing approach but distribute trust across only a small group: at most four servers in COCA’s experiments and seven in Secure Distributed DNS. Some of these trust-splitting protocols have used threshold signatures as a primitive [25], [26], [109], as CoSi does.

The NIST Randomness Beacon [103] logs random values it produces by signing them using its own secret key and chaining them with previously produced values. While a dishonest beacon cannot selectively change individual entries, it could rewrite history from a chosen point and present different views of the history to different clients. Additionally, there is no guarantee of the freshness of the published randomness. While the quality of the output is likely not affected if the beacon precomputes the randomness, the beacon gets to see these values beforehand, leaving it vulnerable to insider attacks.

TUF [116] and Diplomat [73] address software download and update vulnerabilities [13], [31], [105] in a framework that supports threshold signing by creating and checking multiple independent signatures. Application Transparency [53] adapts CT to software downloads and updates. CoSi complements both TUF and Application Transparency by greatly increasing the number of independent servers an attacker must compromise to keep the compromise secret.

### IX. CONCLUSION

This paper has demonstrated how using theoretically established and well-understood cryptographic techniques, we can add efficient, scalable witness cosigning to new or existing authority services. Witness cosigning offers proactive rather than merely retroactive transparency, ensuring that an attacker who compromises the authority’s secret keys cannot individually sign a statement clients will accept without also submitting that statement to many witnesses for cosigning, creating a high probability of immediate detection. By making authority keys relatively useless "in secret," witness cosigning also reduces the value of an authority’s keys to attackers wishing to operate in secret, disincentivizing attacks against the authority’s keys in the first place. The encouraging scalability and performance results observed with our CoSi prototype lead us to believe that large-scale witness cothorities are practical. If this is the case, there may be little remaining technical reason to settle for the centralized, weakest-link security offered by current designs for today’s common types of critical authorities. We can and should demand stronger, more decentralized security and transparency from the Internet’s critical authorities.

### Acknowledgments

We wish to thank Tony Arcieri, Dan Boneh, Joe Bonneau, Christian Cachin, Justin Cappos, Rachid Guerraoui, Jean-Pierre Hubaux, Ben Laurie, Eran Messeri, Linus Nordberg, Rene Peralta, Apostol Vassilev, and the anonymous reviewers for valuable feedback and discussion during this project. We also wish to thank Stephen Schwab and the entire DeterLab team for their tireless support for our experiments.

### REFERENCES

[1] S. Ackerman. FBI chief wants ‘backdoor access’ to encrypted communications to fight Isis. The Guardian, July 2015.

[31] J. Cappos, J. Samuel, S. Baker, and J. H. Hartman. A Look In the Mirror: Attacks on Package Managers. In 15th ACM Conference on Computer and Communications Security (CCS), Oct. 2008.

[32] M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron, and A. Singh. SplitStream: high-bandwidth multicast in cooperative environments. In ACM Symposium on Operating Systems Principles (SOSP), 2003.

[33] M. Castro and B. Liskov. Practical Byzantine fault tolerance. In 3rd USENIX Symposium on Operating Systems Design and Implementation (OSDI), Feb. 1999.

[34] S. Checkoway, M. Fredrikson, R. Niederhagen, A. Everspaugh, M. Green, T. Lange, T. Ristenpart, D. J. Bernstein, J. Maskiewicz, and H. Shacham. On the practical exploitability of Dual EC in TLS implementations. In USENIX Security Symposium, 2014.

[35] S. Chokhani and W. Ford. Internet X.509 public key infrastructure certificate policy and certification practices framework. 1999. RFC 2527.

[36] J. Clark and P. C. van Oorschot. SoK: SSL and HTTPS: Revisiting past challenges and evaluating certificate trust model enhancements. In IEEE Symposium on Security and Privacy, May 2013.

[37] C. Coyne and M. Krohn. Keybase.io, 2014.

[38] S. A. Crosby and D. S. Wallach. Efficient data structures for tamper-evident logging. In USENIX Security Symposium, Aug. 2009.

[39] I. Dacosta, M. Ahamad, and P. Traynor. Trust no one else: Detecting MITM attacks against SSL/TLS without third-parties. In 17th European Symposium on Research in Computer Security (ESORICS), Sept. 2012.

[40] I. Damgård. On Σ-protocols, 2010.

[41] A. Danial. Counting Lines of Code. http://cloc.sourceforge.net/.

[42] S. E. Deering and D. R. Cheriton. Multicast routing in datagram internetworks and extended LANs. ACM Transactions on Computer Systems, 8(2), May 1990.

[43] D. E. Denning and D. K. Branstad. Key escrow encryption systems. Communications of the ACM, 39(3):35, 1996.

[44] DeterLab network security testbed, September 2012. http://isi.deterlab.net/.

[45] T. Dierks and E. Rescorla. The transport layer security (TLS) protocol version 1.2, Aug. 2008. RFC 5246.

[46] DigiStamp - Trusted TimeStamp Authority. https://www.digistamp.com/.

[47] R. Dingledine, N. Mathewson, and P. Syverson. Tor: the second-generation onion router. In 13th USENIX Security Symposium, Aug. 2004.

[48] C. Doctorow. Using distributed code-signatures to make it much harder to order secret backdoors. BoingBoing, Mar. 2016.

[49] J. R. Douceur. The Sybil attack. In 1st International Workshop on Peer-to-Peer Systems (IPTPS), Mar. 2002.