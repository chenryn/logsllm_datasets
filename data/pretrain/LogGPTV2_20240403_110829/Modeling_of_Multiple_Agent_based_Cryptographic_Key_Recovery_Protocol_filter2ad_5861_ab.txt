s-prkA
certA
pukB
prkB
s-pukA
(cid:107)(cid:122)(cid:116)
int
(2) Bottom-up modeling of component by transitions
(a) modeling of functional components
HAC (data)
HAC is composed of one way function, namely irreversible
one way function. It is used for digesting a certain data
Functional components in the protocol are modeled by the
before digital signature.
following types of component transitions.
Operation component
transitions: merge (concatenation),
divide (partition),
(cid:59471)
(exclusive-or), =?(equality check)
Communication
component
transitions:
send
(send
function), receive (receive function)
(Note: When key
recovery is needed for a stored encrypted data, send/receive
transitions
are
replaced
by write/read
transitions,
respectively.)
Cryptographic component transitions:
(Remarks: An element of set is an instance of component,
*e
(encryption),
*d
(decryption),
*s
(signature),
*v
(verification))
- Secret-key cryptographic component (SCC) = {DES}
SCCe (data, session-key), SCCd (data, session-key)
SCC is
identical
to symmetrical key cryptographic
component.
- Digital Signature Component (DSC) = {KCDSA}
DSCs (data, signature-private-key, certificate)
DSCv (data, data-signature, signature-public-key,
certificate)
DSC is composed of signing data digitally and verifying
digital signed data. In most case, the input data is hashed
data, but, in case of KCDSA (Korean Certification-based
Digital Signature Algorithm [17]), the input data is data
itself because hash component is included in KCDSA.
(b) modeling of macro
A macro is high-level functional module in a protocol.
Macro transitions are used for the purpose of high level
modeling of system. Some useful macro transitions are listed
as follows ( "X ::= Y" means "X is defined by Y"):
Secret-key cryptographic macro transition (SKC)
SKC (data, ssk) ::= SCCd (receive (A, send (B, SCCe(data,
- Public-key Cryptographic Component (PCC) = {RSA}
ssk))), ssk)
PCCe (data, public-key), PCCd (data, private-key)
One way public-key cryptographic macro transitions
PCC is asymmetrical key cryptographic component. Every
(PKC1, PKC2)
agent has a pair of key, a public-key and a private-key.
PKC1 (data, pukB, prkB) ::= PCCd (receive(A, send(B,
Distribution of the public-key should be preceded because a
PCCe (data, pukB))), prkB)
sender encrypts a data by the public-key of receiver.
PKC2 (data, prkA, pukA) ::= PCCd (receive(A, send(B,
- Hash Component (HAC) = {SHA}
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:44:10 UTC from IEEE Xplore.  Restrictions apply. 
PCCe (data, prkA))), pukA)
delay(comm)+ delay(PCCd) +delay(PCCd), where ‘comm’
Two waypublic-keycryptographic macro transition (PKC3)
denotes communication components.
PKC3 (data, prkA, pukA, prkB, pukB) ::= PCCd(PCCd
Table 1 presents
some
annotated delay value of
(receive(A, send(B,PCCe(PCCe(data, prkA), pukB))),
cryptographic and communication transitions. These values
prkB), pukA)
are modified depending on computation and communication
Integrity and secret cryptographic macro transition (ISC)
infrastructure of agents in the key recovery system.
ISC(data, ssk, prkA, pukA, prkB, pukB) ::=
if PKC2(HAC(data),prkA,pukA) = HAC(SKC(data,
PKC3(ssk, prkA, pukA, prkB, pukB)))
then data else error.
Digital signature macro transition (DSM)
SIG(data, s-prkA, certA, pukB, prkB, s-pukA) ::=
DSCv(PKC1(DSCs(data, s-prkA, certA), pukB, prkB),
PKC1(data, pukB, prkB), s-pukA, certA)
Some macro transitions are shown in Fig. 3. Component
transitions are implemented by using components
in
conventional cryptographic and communication libraries.
Macro transitions are the high level crypto- graphic and
communication application programming interfaces that is
the same concept as open data base connectivity in a
database application. Macro transitions can be implemented
using the rule in Fig. 4.
(cid:124)(cid:104)
(cid:124)(cid:105)
(cid:116)(cid:88)
(cid:116)(cid:89)
(cid:116)(cid:88)
(cid:116)(cid:89)
m
(cid:124)(cid:104)
Send
msg1
msg2
(cid:124)(cid:105)
Receive
d
(cid:116)(cid:88)(cid:89)
(cid:116) (cid:89)
(cid:124)(cid:104)
(cid:124)(cid:105)
(cid:116)(cid:88)
(cid:124)(cid:106)
(cid:116)(cid:89)
(cid:116)(cid:88)(cid:88)
(cid:116)(cid:90)(cid:88)
(cid:124)(cid:104)
s
(cid:124)(cid:105)
r
msg1
msg3
(cid:116)(cid:90)
(cid:116)(cid:88)(cid:89)
(cid:116)(cid:89)(cid:88)
(cid:124)(cid:106)
r
s
msg2
msg3
(cid:116)(cid:89)(cid:89)
(cid:116)(cid:90)(cid:89)
(3) Annotation of delay and reliability to transitions
When the performance of the multiple agent based key
recovery protocol should be evaluated, execution delay
values delay(ti) are annotated to each component transitions
ti. The performance of a macro transition M is computed as
follows: delay(M) = (cid:3326)delay(ti), where ti is an elementary
transition of M.
For example, delay(PKC3) = delay(PCCe)+delay(PCCe)+
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:44:10 UTC from IEEE Xplore.  Restrictions apply. 
protocol was developed using components in cryptographic
and communication class libraries.
(5) Implementation of prototype 2 agent based key
recovery system
We have implemented a prototype key recovery system by
means of
the component based software engineering
technology. The cryptographic components such as SCC,
PCC, HAC and DSC are implemented by cryptographic
algorithms
such as DES, RSA, SHA and KCDSA,
respectively.
3.2 Analysis
(1) Recoverability analysis
The recoverability of ssk can be verified by means of
reachability analysis of an ECTPN. For example, if ssk2
place in a UB is reachable from initial marking of a UA, then
ssk1 is recoverable from the protocol. Thus, we can show
that all transitions in the protocol are reachable from an
initial state by using a reachability graph.
(*) measured on SUN Ultra 10, 333 MHz, 256 MB
(**) measured on 7KByte/Sec bandwidth
(4) Result of ECTPN model of 2 agent based key recovery
A Reachability Graph (RG) is defined as follow: RG = , where, N is a set of nodes, and LA is a set of labeled
arcs connecting two nodes. Note that a node is a set of
concurrently marked places, and represents a state of an
ECTPN. A label of LA represents
concurrently fired
transitions.
data1
ssk1
KRR
fork
ik1
ik2
t1
t2
data2
int4
ssk2
ik3
ik4
reqB
t15
t3
ssk3
join
t4
int1
ik5
ik6
reqB
certB
send
receive
certB
p1
t5
t6
t9
t10
p2
t13
p3
t7
t11
ik7
reqKRC
int2
reqKRC
t14
t8
ik8
reqKRC
t12
int3
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:44:10 UTC from IEEE Xplore.  Restrictions apply. 
As an example, a label
ti(pi1, .....pik....)
tj(pj1, .....pjk....)
computation time, communication time, total response time
means that ti and tj have finished concurrent firing, and pik and
and relative performance factor of the multiple agent based
pjk are output place from ti and tj, respectively. Firing the
key recovery protocol, respectively.
enabled transition in Ni, a new node Nj is generated after the
total delay which is annotated to the enabled transitions as
shown below:
LAij [ t1(p11,
.....p1i....)
t2(p21,
.....p2k....) .....
tn(pn1,
.....pnk....) ]
: Ni
Nj after (delay(t1)+ .... + delay(ti) + ...
+delay(tn)). pi1, ....., pnk
Ni = {mpi1, mpi2, ... mpik}
where, mp is marked place and delay(ti) is annotated delay
time of ti.
LOT(n) = LOT(UA)(n) + LOT(UB)(n) + LOT(KRC)(n) +
LOT(KRA)(n) ×n
CCT(n) = CCT(UA,UB)(n) + CCT(UB,KRC)(n) +
CCT(KRC,UB)(n) + [(CCT(KRC,KRA)(n) +
CCT(KRA,KRC)(n)] ×n
TRT(n) = LOT(n) + CCT(n)
PER(n) = RT(1) / RT(n)
A reachability graph of an ECTPN of 2 agent based key
4. Related Approach and Discussion
recovery protocol is presented in Fig. 6.
(2) Recovery scenario and delay
A recovery scenario SCi is a path over reachability graph.
Let SCi = { Ni1, LAi1, ..., Nik, LAik, ..., Nim } (where, LAik is
an arc from Nik to Nik+1). Total delay of SCi, delay(SCi), is
computed as follows:
delay(SCi) =
m
k=1
delay(LAik), where delay(LAik) =
4.1 Other key encapsulation based approaches
In commercial key recovery (CKR)[9] and CyKey [10], key
recovery service is provided by a data recovery center[9] or a
key recovery requester which has sanctioned by key recovery
authority[10]. Thus, all user agents, who request key
recovery service, directly communicate with the recovery
center. The recovery center not only is venerable to
disguising or impersonation attacks, but also monopolizes
(delay(t1)+...+delay(ti)+ ... +delay(tn)), ti
LAik.
whole authority of key recovery. Access rule index, a
(3) Performance
The performance refers to the time consumed for key
recovery operation. We assume that all KRA have the same
computational capability, and does not include additional
service time such as encrypted data decryption time.
Let LOT(i)(n) and CCT(X,Y)(n) be local computation time of
node i and cryptographic communication time from node X
to node Y, respectively. LOT(n), CCT(n), TRT(n) and PER(n) be
primary distinguishing characteristic of CKR[10],
is a
number indicating the access rule. Access rules are the
processes for verifying permission to gain emergency access
and thereby defines a set of people qualified to receive
access, possibly subject to some conditions. In Secret Agent
[11],
recovery service is provided by a key recovery
requester and a KRA as shown in Fig 7-(a). Thus,
the
security of key recovery is increased because at least two
agents are involved in the key recovery service.
(cid:141)(cid:150)(cid:153)(cid:146)(cid:79)(cid:144)(cid:146)(cid:88)(cid:83) (cid:144)(cid:146)(cid:89)(cid:80)
(cid:155)(cid:89)(cid:79)(cid:144)(cid:146)(cid:90)(cid:83) (cid:144)(cid:146)(cid:91)(cid:80)