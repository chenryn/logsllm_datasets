(rc, c∗) ←$ EncRand,RO
b(cid:48) ←$ ADecrypt,RO
Return (|m0| = |m1| ∧ b(cid:48) = b)
(c∗, t, st)
λ
2
1
(pk)
(mb, pk) ; t
oracle Decrypt(c):
(rc, m) ← DecRO
Return (rc, m, t)
λ (c, sk) ; t
Figure 2: Game deﬁning the IND-CCA security of a
PKE scheme. An adversary A is legitimate if A2
does not call Decrypt on c∗.
The ; t notation in Figure 2 denotes information that
is leaked to the adversary by the execution environment,
in addition to the outputs explicitly produced by the PKE
algorithms.3 We recover the standard deﬁnition of security
for PKEs when this leakage is the empty string  for all
algorithms.
Leakage models. We will model leakage as a trace of con-
stant identiﬁers that reveal some information about the con-
trol ﬂow of the executed algorithm. This approach allows us
to capture some leakage models that are relevant for practi-
cal applications, and can be extended to deal with arbitrary
types of leakage by deﬁning diﬀerent types of observable
events in the semantics of the implementation languages,
and controlling if and how this information is revealed to
the adversary.
For concreteness, we will focus on two leakage models for
C and assembly implementations. The leakage model that
we adopt at the C level is chosen for its simplicity, and can
be seen as an adaptation of the Program Counter Model [28]
3Consistently with our discussion above, we consider that
only Enc and Dec are executed in environments that are
observable by the adversary.
1219(PC) to C programs. The leakage model that we adopt at
the assembly level is the standard PC model.
Informally,
these models are deﬁned as follows:
• C leakage. We associate to each branching point in
the C program two observable events with identiﬁers
Event True and Event False. One such event is added
to the (initially empty) trace whenever a branch is
taken, consistently with the Boolean value of the eval-
uated branching condition.
• Assembly leakage. Each instruction in the assembly
program is associated with a unique constant identiﬁer,
which is added to the (initially empty) trace whenever
this instruction is executed.
Referring to Figure 2, we will consider adversaries attack-
ing C implementations and assembly implementations, and
receiving the leakage deﬁned above as extra information.
Later in the paper we will see formalizations of both types
of leakage.
RSA-OAEP as described in PKCS#1. We now illustrate
the level of abstraction at which cryptographic algorithms
are described in standards. This will both justify our ap-
proach of taking C as a high-level language for implement-
ing cryptographic algorithms, and also to facilitate the un-
derstanding of its EasyCrypt formalization in the next sec-
tion. Figure 3 shows the PKCS#1 v2.1 standard’s descrip-
tion of the encoding function that takes a variable-length
message m, pads it to a ﬁxed-length data blob DB , and pro-
duces the ﬁnal encoded message EM . Functions OS2IPPKCS,
I2OSPPKCS and RSAEPPKCS are speciﬁed in the standard;
random and MGF instantiate the Rand, and RO oracles, re-
spectively.
The scheme, as standardized,
is parameterized by two
lengths (which can be seen as the security parameter): k
is the length of the canonical octet string representation of
the RSA modulus; and hLen is the length of the output of
the hash function used to concretely implement the MGF,
and to compute label hashes.
Given these parameters, some derived static lengths can
be introduced: dbLen = k − hLen − 1 is the length of the
padded message, or data blob; and maxMLen = dbLen −
hLen − 1 is the maximum length of message that can be
encrypted.
A C-like language. In this paper we consider only C pro-
grams that follow a strong programming discipline and re-
spect a strict notion of safety. The programming discipline
forbids expressions with side-eﬀects, pointer arithmetic, and
only allows the programmer to refer to arrays using the ad-
dress of their ﬁrst element (and carrying an explicit oﬀset
value where necessary). Our notion of safety excludes the
standard out-of-bound memory accesses and arithmetic er-
ror conditions, but also behaviours that would fall in the
underspeciﬁed parts of the C standard. For simplicity, our
notion of safety also imposes that C implementations termi-
nate for all possible input values.
We allow static allocation of new arrays, and follow stan-
dard practice to pass output parameters by reference to let C
functions return multiple values, or arrays. In addition, we
consider that the language is equipped with a non-primitive
type for arbitrary precision unsigned integers that are, simi-
fun OAEP EncodePKCS(m : octet[]):
PS = 0x00(k−|m|−2∗hLen−2);
DB = dLHash(cid:107)PS(cid:107)0x01(cid:107)m;
seed = random(hLen);
dbMask = MGF(seed, dbLen);
maskedDB = DB ⊕ dbMask ;
seedMask = MGF(maskedDB , hLen);
maskedSeed = seed ⊕ seedMask ;
EM = 0x00(cid:107)maskedSeed(cid:107)maskedDB ;
return EM ;
fun OAEP EncryptPKCS(m : octet[], pk : pkey):
if (maxMLen < mL)
else {
rc = RC MessageTooLong;
rc = OAEP EncodePKCS(m);
p = OS2IPPKCS(EM );
(rc, c) = RSAEPPKCS(pk , p);
(rc, res) = I2OSPPKCS(c, k );
rc = RC Success; }
return (rc, res);
Figure 3: Speciﬁcation for PKCS#1 encryption
larly to arrays, passed by reference. We equip this type with
the usual operations, including modular arithmetic.
We use the const type modiﬁer to prevent functions from
overwriting parameters passed by reference (arrays, big in-
tegers and pointers to primitive types) that are used purely
for input. Purely for simplicity, we forbid the use of short-
circuiting boolean operators, which introduce potentially un-
wanted conditional jumps, and prefer the corresponding bit-
wise operators.
In addition, as discussed above, we impose that the pro-
grammer correctly annotates the program with trace ex-
tension statements Leak(Event True) and Leak(Event False).
Correct annotation means that the next statement in each
execution path after a conditional branch is an annotation
exposing the corresponding value of the branching condition
(see the code in Figure 4). Semantically, these statements
append the corresponding event at the end of a global trace
that is initially empty and can only be manipulated using
the annotation mechanism.
3. SECURE C-LIKE CODE IN EasyCrypt
We formalize security proofs using EasyCrypt [9], an SMT-
based interactive prover geared towards formally proving se-
curity properties of cryptographic schemes. Cryptographic
algorithms, oracles and games are described in a probabilis-
tic imperative language pWhile. Reduction proofs can then
be performed by establishing probabilistic relational proper-
ties on pairs of pWhile functions and, from them, deducing
concrete probability bounds.
Importantly, pWhile’s grammar of expressions can be ex-
tended with user-deﬁned types and functional (pure and to-
tal) operators. The language is equipped with some built-in
types, including booleans, integers, tuples and ﬁxed-length
bitstrings. However, the latter type is insuﬃcient to write,
for example, algorithms whose input are bitstrings whose
length is chosen by the adversary. As we deﬁne grammar
extensions to model variable-length octet strings (in fact,
polymorphic arrays) below, we write them in a style that
1220narrows the gap between pWhile and the subset of trace-
annotated C with big integers described above.
A C mode for EasyCrypt. We extend EasyCrypt with several
libraries to lower the level of abstraction of speciﬁcations to
one similar to our C-like language. The ﬁrst of these libraries
implements variable-sized arrays. It provides a polymorphic
type α[] and select (· [·]) and update (· [·] = ·) operators, de-
ﬁned only when used within the array’s bounds. We let the
user declare statically-sized array variables (var · : ·[·];). For
speciﬁcation purposes, we also deﬁne a length operator (|·|)
and write valid(a, o, l ) whenever o and l are non-negative
integers and a is an array such that o + l ≤ |a|.
(This
guarantees that any access to a with an index i such that
o ≤ i < o + l is within the array bounds, and allows us to
express memory-safety conditions.)
We also introduce a type bigint to distinguish variables
meant to model machine integers from those meant to be im-
plemented as arbitrary precision integers. The bigint type is
equipped with operators for all operations needed, including
comparisons, shifts and modular operations.
Our third library extension deals with parameter-passing:
in order for our adversaries to have at least as much power
over inputs and outputs as standard IND-CCA adversaries in
the context of a C program, we model, in EasyCrypt, param-
eter passing by-reference, where a reference to an array or
variable is passed as argument, and used to return multiple
values by side-eﬀect. When a function takes a parameter of
an array or bigint type, we always assume that it may in fact
overwrite that parameter’s contents, unless otherwise speci-
ﬁed using the const type modiﬁer. (We syntactically ensure
that all such parameters that are not used for output are
marked as const.) Conversely, when a parameter of primi-
tive type is meant to be used as an out-parameter, it should
be marked as such using the out type modiﬁer. Type α out
is equipped with a dereference operator (∗·), and an update
statement (∗· = ·;).
Finally, we deﬁne in EasyCrypt some constants and oper-
ators that capture the abstract C leakage described in Sec-
tion 2. Abstract traces can be the empty trace Zero, the true
and false branch events Event True and Event False, or any
combinations of these using an associative extension opera-
tor · ++ · for which Zero is a left and right neutral element.
In functions, oracles and games, we write Leak(e) to denote
the fact that the observable trace is extended to the right
(using ++) with e.
In addition to these basic events, we also consider abstract
leakage from some of the external functions and big integer
primitives. This allows us to make formal and precise, using
axioms, the usual assumptions on their leakage. We use
the ; t notation introduced in Section 2 to denote that a
particular function call extends the execution trace to the
right with a trace t that may depend on all of the call’s
arguments. (For algorithms, this trace extension is concrete,
whereas it is kept abstract for chosen big integer primitives
and for the external functions.)
Application to PKCS#1 v2.1. We discuss our implemen-
tation of the PKCS standard based on the encryption algo-
rithm. Details of the other algorithms and subroutines can
be found in the full version.
Figure 4 shows our implementation of the encryption al-
gorithm. Auxiliary algorithms, as well as external functions,
are written so that they return their results by passing a ref-
erence to some output parameters, but otherwise provide the
same functionality. The encoding algorithm is optimized to
save space by reusing its internal buﬀers seed and DB once
their contents become obsolete. Apart from the verbosity of
using while loops to implement array operations, this imple-
mentation does not diﬀer much from the encoding function
described in the PKCS#1 standard (see Figure 3).
Between lines (3) and (8), the data blob is built, by copy-
ing the default label hash, writing the zero padding and the
separator, and ﬁnally copying the message m into it. On line
(9), the seed is sampled uniformly at random. On line (10),
the MGF oracle is called and its result (seedMask ) written
directly into the output buﬀer, and used, in the while loop
at (12) to mask the data blob in place. On line (13), the
MGF oracle is queried with the masked data blob and its
result written and used as before to mask the seed. Finally,
on line (16), the ﬁrst byte of the output buﬀer is set to 0.
fun OAEP Encode(res : octet[], m : octet const[], mLen : int):
1: var seed : octet[hLen];
2: var DB : octet[dbLen];
3:
4: while (i < hLen) { Leak(Event True);
i = 0;
DB [i] = dLHash [i] ;
i = i + 1; } Leak(Event False);
5: while (i < dbLen − mLen − 1) { Leak(Event True);
DB [i] = 0x00;
i = i + 1; } Leak(Event False);
6: DB [i] = 0x01;
7:
8: while (i < dbLen) { Leak(Event True);
i = i + 1;
DB [i] = m [i − dbLen + mLen] ;
i = i + 1; } Leak(Event False);
9: sample octets(seed, 0, hLen);
10: MGF1(res, 1 + hLen, dbLen, seed, 0, hLen);
11: i = 0;
12: while (i < dbLen) { Leak(Event True);
res[1 + hLen + i] = res [1 + hLen + i] ⊕ DB [i] ;
i = i + 1; } Leak(Event False);
13: MGF1(res, 1, hLen, res, 1 + hLen, dbLen);
14: i = 0;
15: while (i < hLen) { Leak(Event True);
res[1 + i] = res [1 + i] ⊕ seed [i] ;
i = i + 1; } Leak(Event False);
16: res[0] = 0x00;
17: return RC Success;
fun OAEP Encrypt(res : octet[],
m : octet const[], mLen : int, pk : pkey):
if (maxMLen < mLen) { Leak(Event True);
1: var p, c : bigint;
2: var EM : octet[k ];
3:
4: else { Leak(Event False);
rc = RC MessageTooLong; }
rc = OAEP Encode(EM , m, mLen);
rc = OS2IP(p, EM , k );
rc = RSAEP(c, pk , p);
rc = I2OSP(res, c, k );
rc = RC Success; }
return rc;
Figure 4: Implementation of PKCS#1 encryption
Although it is a rather simple reﬁnement of the speciﬁ-
cation shown in Figure 3, this implementation allows us to
concretely reason about the leakage traces produced when
1221executing the encryption algorithm. From a formal point of
view, the ﬁrst steps in our security and correctness proofs
very much reduce the security of the low-level model to the
security of the high-level scheme (augmented with concrete
side-channel leakage).
However, even the high-level description displayed in Fig-
ure 3 is far removed from the description for which Fujisaki
et al. obtained their well-known security proof [21]. We dis-
play it for comparison in Figure 5. There are three major
diﬀerences between the two speciﬁcations:
• the standard uses only one random oracle, whereas
Fujisaki et al. use two; for the lengths used in the
standard, these are stricly equivalent, since F and G
have disjoint domains.
• to remedy the fact that RSA is not a random per-
mutation over the entire encoded message space, the
standard ensures that it is always called on plaintexts
whose ﬁrst byte is zero; this has an incidence on the
security and the proof.
• ﬁnally, the standard permits the encryption of variable
(but bounded) length messages, using some additional
padding to ﬁxed length; this does not aﬀect theoreti-
cal security, but has led to well-known padding oracle
attacks [27, 33] when implemented carelessly.
Despite these diﬀerences, the security proof is relatively easy
to adapt and follows the same general schema. We perform
it in a reﬁnement of the adversary model presented in Sec-
tion 2, which gives the adversary more control over output
parameters. Oracle wrappers ensure that adversaries respect
memory-safety side conditions when calling the algorithms
and environment functions.
fun OAEP Encryptproof (m : octet[], pk : pkey):
r = random(hLen);