title:NANOPI: Extreme-Scale Actively-Secure Multi-Party Computation
author:Ruiyu Zhu and
Darion Cassel and
Amr Sabry and
Yan Huang
NANOPI: Extreme-Scale Actively-Secure Multi-Party Computation
Resolving the Space-Round Dilemma using Lightweight Program Instrumentation
Ruiyu Zhu
Indiana University
PI:EMAIL
Darion Cassel
Carnegie Mellon University
PI:EMAIL
Amr Sabry
Indiana University
PI:EMAIL
Yan Huang
Indiana University
PI:EMAIL
ABSTRACT
Existing actively-secure MPC protocols require either linear rounds
or linear space. Due to this fundamental space-round dilemma, no
existing MPC protocols is able to run large-scale computations
without significantly sacrificing performance. To mitigate this is-
sue, we developed nanoPI, which is practically efficient in terms
of both time and space. Our protocol is based on WRK [44, 45]
but introduces interesting and necessary modifications to address
several important programmatic and cryptographic challenges. A
technique that may be of independent interest (in transforming
other computation-oriented cryptographic protocols) is a staged
execution model, which we formally define and realize using a
combination of lightweight static and dynamic program instru-
mentation. We demonstrate the unprecedented scalability and per-
formance of nanoPI by building and running a suit of bench-
mark applications, including an actively-secure four-party logis-
tical regression (involving 4.7 billion ANDs and 8.9 billion XORs)
which finished in less than 28 hours on four small-memory ma-
chines. Our integrated framework nanoPI is open-sourced at https:
//github.com/nanoPIMPC/nanoPI.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; • The-
ory of computation → Cryptographic protocols; • Software
and its engineering → Dynamic analysis; Frameworks; Semantics;
KEYWORDS
Large-scale actively-secure constant-round MPC
ACM Reference Format:
Ruiyu Zhu, Darion Cassel, Amr Sabry, and Yan Huang. 2018. NANOPI: Extreme-
Scale Actively-Secure Multi-Party Computation : Resolving the Space-Round
Dilemma using Lightweight Program Instrumentation. In Proceedings of
2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18). ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/
3243734.3243850
1 INTRODUCTION
Multi-party computation (MPC) is an important cryptographic
technique that enables decentralized collaborative computations
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243850
over sensitive datasets privately held by multiple distrustful par-
ties [9, 34, 41]. After decades of intensive research, state-of-the-
art two-party secure computation protocols are able to execute
more than 100K AND-gates/second [20, 43, 44, 47, 48] even in the
presence of full-malicious adversaries. Recently, Wang et al. have
developed authenticated garbling technique which enables efficient
constant-round n-party computations secure against up to n − 1
malicious adversaries [45]. Such throughput would meet the ex-
pectation of numerous real-world computations that involve secret
data at scale, even when the parties are spread around the globe!
On the other hand, the space-complexity of actively-secure com-
putation protocols has been largely overlooked in existing efforts.
Instead, researchers have focused intensively on improving the time,
bandwidth, and round efficiency of these protocols. However, space
is in general a resource as valuable and scarce as time/bandwidth. In
fact, space can play an even more critical role in the particular con-
text of secure computation, motivated by two common scenarios,
and potentially their combination:
(1) Resource-constrained devices. Much sensitive data has been
collected and stored on personal devices such as smart phones,
watches and IoT devices, whose space budgets can be stringent
compared to conventional computers. Nevertheless, people of-
ten still hope to run secure computation directly on such devices
because it can substantially simplify the trust model when the
secret data doesn’t need to leave these devices [6, 13, 31].
(2) Computations at scale. Generic computations acceptable to
most MPC protocols are represented by boolean circuits, whose
scale is typically hundreds to thousands times larger than the
same computation executed in assembly code. Moreover, some
interesting applications of multi-party computation seem inher-
ently computation-intensive. E.g., it has long been envisioned
that secret-shares of sensitive user data such as medical records
or business transactions can be delegated to multiple indepen-
dent, untrusted principals, who run MPC protocols in prede-
fined ways to mine useful information, e.g., a prediction model,
out of the secret data [26, 30, 37]. As a result, it is not uncommon
to run into circuits with billions of gates.
Regarding the space challenge, we examined the literature and ex-
isting MPC prototypes but found, unfortunately, that for all known
protocols and their variants, either the performance is severely im-
peded by the large number of rounds required to run the protocol,
or they could not even complete due to their enormous demand
in space. The work of Whitewash [5] researched ways to reduce
the memory footprint of secure computation protocols. However,
their study was constrained in the two-party, server-assisted setting
(where a mutually-trusted non-colluding server exists) and only
against semi-honest adversaries.
Let |Cf | be the size of the circuit representation of a function f .
A root cause of the scalability issue for the state-of-the-art actively-
secure MPC protocols is that they are trading O(|Cf |) space for the
performance benefit of being constant-round. Apparently, constant-
round and constant-space have been two fundamentally incompati-
ble assets of any actively-secure computation schemes.
In an attempt to resolve the challenge, Zhu et al. [48] proposed
the idea of pool-based cut-and-choose and developed a prototype
(based on JIMU [47]) that is able to efficiently run applications with
billions (or trillions) of gates using a relatively small constant space.
Other advantages brought by their framework include better APIs
(for active-security), long-term security, and efficient support of
computations over dynamic data.1 The pool-based framework fits
well to the needs of establishing long-term commodity services for
secure computations. However, it remains open how their idea can
be combined with WRK protocols [44, 45], which are more updated
and able to generalize to more than two parties.
Therefore, the main quest of this work stems from the question:
Can we design an actively-secure multi-party
computation scheme that can efficiently execute
circuits at arbitrary scale using limited space
independent of |Cf |?
We answered this question positively by developing a prototype
and have experimentally shown that actively-secure MPC can be
efficiently run at extreme-scales using constant space.
Threat Model. In this paper, we only consider protocols that are
secure against malicious (aka. active) adversaries. Such adversaries
are allowed to behave in arbitrary ways to compromise security.
In particular, we make no assumption on the number of parties an
adversary can corrupt in the protocol. This is by far the strongest
security model one can ever hope to accomplish. Comparing to
the frequently-used honest-but-curious threat model, the malicious
model is clearly preferred in business scenarios where the stakes
are high.
1.1 Contribution
New Problems. First, we unveil the space-round dilemma, a severe
issue that plagues the scalability of all existing actively-secure multi-
party computation protocols. We further zoomed in to WRK, a
state-of-the-art MPC scheme, and discovered several hidden issues
that prevent it from being efficiently scalable. These include
(1) WRK protocols require fully-unrolling its target computation
into circuits. Otherwise, they are no longer constant- (but linear-
) round. This is caused by several factors including its sub-
protocols Πabit (for producing authenticated bits), ΠaAND (for
producing authenticated ANDs), but most importantly, an un-
documented missing step to bridge the gap between the use
of function-independent ΠaAND and Πabit sub-protocols and its
function-dependent pi2pc protocol, which needs extra rounds of
communication. In addition, their authenticated garbling pro-
tocol Π2pc has ignored the enormous space demand for storing
all wires in the circuit.
1In a computation over dynamic data, some of the input may not be available by the
time the computation starts. An example computation of this kind is secure evaluation
of RAM programs, where some inputs to the circuit need to be read on-the-fly from
the Oblivious-RAM.
2pc
mpc
abit
(2) To efficiently produce arbitrary number of abits within constant
memory, WRK’s Πabit would need to be invoked multiple times.
However, the global secret ∆ used in Πabit to MAC abits will
change across different invocations of Πabit. This issue, if left
untreated, can lead to actual security attacks.
Our Solutions. To build efficiently scalable MPC protocols, our
starting point is WRK [44, 45], the most efficient MPC protocol
known so far that is secure against any number of active adver-
saries.2 At a high level, we propose three enhancements to WRK to
allow it to execute arbitrarily large circuits within constant space.
(1) We change WRK’s circuit processing protocol Π2pc (resp. Πmpc)
to ΠScalable
) which can efficiently process large
circuits in small space. We propose a lightweight program trans-
formation that can be applied to programs specified in an im-
perative programming language. As a result, all binary gates
in the circuit will be automatically executed in batches (which
we dubbed as stages), meanwhile all intermediate wires will be
automatically deallocated based on their static scoping informa-
tion. Since it is a common practice to trade space for roundtrip
in MPC protocols, our use of lightweight static and dynamic
instrumentation technique may be of independent interest in
improving other protocols.
(resp. ΠScalable
(2) We change WRK’s authenticated bit (abit) sub-protocol Πabit
into ΠScalable
where values of ∆ are guaranteed to be identical
across different invocations of the abit protocol. This change
reduces the space requirement of the abit sub-protocol because
the abits can be obtained in many small batches.
(3) We change WRK’s authenticated AND (aAND) sub-protocol
ΠaAND into ΠScalable
aAND by maintaining a fixed-size pool of leaky-
aANDs for efficient cut-and-choose purpose. Since leaky-aANDs
are always picked from the pool, it allows fast generation of
arbitrarily many aANDs using constant space.
Our result is a O(p)-space, O(n|Cf |/p)-round actively secure MPC
protocol where p is a user-set constant. Comparing to existing
linear-round MPC protocols, ours allows to reduce the penalty of
round-latency by a factor of p, regardless of the depth of applica-
tion circuits. We have formally proved the security of our protocols.
Comparing to existing constant-round WRK protocols, ours scales
much better in space-complexity and provides easier-to-use APIs
and long-term security if running as commodity secure computa-
tion services.
We implemented and experimentally evaluated the effectiveness
of our ideas. With the proposed techniques, we are able to run, for
the first time, a 4-party actively-secure logistic regression with 4.7
billion AND gates in 27.9 hours on mediocre machines (c5.large,
4GB memory, 4.75 cents/hour). As a highlight of scalability, our
protocol executed a 4-party actively-secure computation of a circuit
with more than 40.8 billion ANDs (in addition to 122 billion XORs)
on 4 Google Compute Engine n1-standard-1 instances (1 vCPU,
3.75 GB memory, 4.75 cents/hour) in 16 days. Notably, no more than
398MB memory (and 0 disk space) is used at any point during the
computation. Like Pool-JIMU, our protocol also meets other expec-
tations of being used for running long-term commodity services.
2We consider it trivially secure if all players are adversarial since there is no honest
player remaining to be protected.
We packed our compiler and cryptographic implementation into a
toolchain and open-sourced it on GitHub.3
2 PRELIMINARIES
We describe some building blocks of our MPC protocol, including
garbled circuits, WRK, and pool-based cut-and-choose.
(cid:19)
(cid:18)
2.1 Garbled Circuits
To compute an arbitrary function f using garbled circuit, the basic
idea is to let one party (called the garbler) prepare an “encrypted”
version of the circuit computing f ; the second party (called the
evaluator) then obliviously evaluates the encrypted circuit without
learning any intermediate values. Starting with a Boolean circuit
for f (agreed upon by both parties in advance), the garbler as-
i , L1
sociates two random cryptographic keys L0
i (also known as
wire-labels) for the i-th wire in the circuit (L0
i encodes a 0-bit and
L1
i encodes a 1-bit). Then, for each binary gate д of the circuit with
input wires i, j and output wire k, the garbler computes ciphertexts
for all possible values of bi , bj ∈ {0, 1}. The
Enc
resulting four ciphertexts, in random order, constitute a garbled
gate for д. In addition, the garbler reveals the mappings from output-
wire keys to bits. To start circuit evaluation, the evaluator obtains
the appropriate keys for the initial input-wires either through direct
messages or oblivious transfer [17, 18, 33] from the garbler. Given
keys Li , Lj associated with both input wires i, j of some garbled
gate, the evaluator can compute a key for the output wire of that
gate by decrypting the appropriate ciphertext. With the mappings
from output-wire keys to bits provided by the garbler, the evaluator
can learn the actual output of f .
Lд(bi,bj)
Lbi
i
bj
j
,L
k
The Point-and-Permute Technique. The point-and-permute tech-
nique proposed by Pinkas et al. [38] enables the evaluator to always
compute a single decryption per gate. The idea is to use L0
i to rep-
resent a random bit λi ∈ {0, 1} on the i-th wire, so that bit bi ⊕ λi
can be revealed to the evaluator to index the garbled entry for de-
cryption. More specifically, let λi , λj , λk be the permutation bits of
the two input-wires and the output-wire of a gate. Then L0
i and L0
j
should be used to encrypt output key Lд(λi,λj)⊕λk
. Thus, a garbled
table for д = AND can be expressed as the forth column of Table 1.
Also, because the evaluator doesn’t know λi , λj , λk, it is safe to
send the garbled table without further permutation. Note that in
the random oracle model, Encx,y(z) can be realized as H(x, y) ⊕ z
where H is modeled as a random oracle.
k
The Free-XOR Technique. The Free-XOR technique [3, 21] allows
XOR gates to be securely computed without any interaction even
in presence of malicious adversaries. The basic idea is to let the
circuit garbler keep a global secret ∆ and dictate that for every wire
i ⊕ ∆.
i whose 0-label is L0
Further, for an XOR gate with input wires i, j and output wire k, the
garbler will always set L0
j . Thus, XOR can be securely
k
computed by the evaluator alone through XOR-ing the two input
wire-labels it obtained from evaluating previous gates.
i is always defined as L1
i
i ⊕ L0
i , its 1-label L1
(cid:66) L0
(cid:66) L0
3https://github.com/nanoPIMPC/nanoPI.
2.2 WRK Protocols
The garbling protocol given in Section 2.1 can only thwart semi-
honest adversaries. In the standard malicious threat model, however,
a malicious circuit generator can put erroneous rows into the gar-
bled table. Based on the values of the permutation bits λi , λj , λk
along with the fact of whether the evaluation succeeds, an mali-
cious garbler can learn extra information about the plaintext wire
signals involved in the erroneous gates. To thwart such attacks,
Wang et al. [44] proposed a seminal technique called authenticated
garbling. The basic idea is to hide the permutation bits from any
subset of the parties so that in event of a malicious generator cor-
rupting some garbled rows, it has no clue of which pair of plaintext
values a garbled row is associated with. Meanwhile, authenticated
garbling enables the circuit evaluator to locally verify whether a
decrypted row was indeed correctly constructed. Therefore, a pro-
tocol execution will fail or succeed, but in either case its behavior
is independent of any honest party’s secret inputs.
WRK is by far the most practical constant-round actively-secure
n-party computation scheme that tolerates any number of cor-
rupted parties. It is compatible with the powerful Free-XOR tech-
nique. Nevertheless, it requires O(n|Cf |) space and works only
in the random oracle model. Their key enabling tool is authen-
ticated AND triples (aAND) that are pre-computed using a sep-
arate secure computation protocol. An AND triple in the two-
party setting is a tuple of six bits a1, b1, c1 held by party P1 and
a2, b2, c2 held by P2 such that (a1 ⊕ a2) · (b1 ⊕ b2) = c1 ⊕ c2. As-
sume P1 has a secret value ∆1 ∈ {0, 1}n. We denote by [b]1 an
authenticated bit b of party P1, which refers to a distributed tu-
ple (b, M[b], K[b]) such that M[b] = K[b] ⊕ b∆1 where P1 has
(b, M[b]), and P2 knows K[b]. We call M[b] ∈ {0, 1}n the Message
Authentication Code (MAC) of b, and K[b] ∈ {0, 1}n the verifica-
tion key of b’s MAC. An authenticated AND triple is just a tuple of
six authenticated bits [a1]1,[b1]1,[c1]1,[a2]2,[b2]2,[c2]2 such that
(a1 ⊕ a2)(b1 ⊕ b2) = c1 ⊕ c2. WRK runs in two high-level phases: the
offline phase precomputes and stores all abits and aANDs needed
later in the protocol, followed by a function-dependent online phase
that generates and evaluates an authenticated garbled circuit using
the abits and aAND prepared earlier.
k ⊕ λ2
j]1,[λ1
i ]1,[λ1
i ]2, [λ2
= λi , λ1
k]1 and [λ2
i ⊕ λ2
Next, we give an intuitive tutorial of WRK in the two-party
setting but refer to [45] for extending it to the multi-party setting.
Let i, j, k be the three wires associated to an AND gate. In two-party
setting, to hide the permutation bits λi , λj , λk, WRK divides them
into XOR-based bit-shares, [λ1
k]2,