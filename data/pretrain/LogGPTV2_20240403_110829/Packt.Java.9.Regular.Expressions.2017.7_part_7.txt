Now, let's change our code to the following by splitting on one or more occurrences of e:
Arrays.stream(input.split("e+"))
.forEach(System.out::println);
We will get the following output:
"gr"
"n-r"
"d-blu"
"-y"
"llow"
We did not get any empty results now because we split on each e+ and the two e letters in
green are matched in a single match.
[ 63 ]
Regular Expression Programming Using Java String and Scanner APIs
Example of the split method using the limit parameter
To understand the impact of the limit parameter, let's take a comma-separated input
string with two trailing commas:
fox,tiger,wolf,,
We can call the split method in two ways. We can call the split method with limit=0:
String[] arr = input.split(",", 0);
We can also call the single parameter split method call as:
String[] arr = input.split(",");
It splits the input string around a comma and the trailing empty strings are discarded, with
the following values being returned by the split method:
"fox"
"tiger"
"wolf"
Now, let's call the split method with limit=1:
String[] arr = input.split(",", 1);
It splits the input string around a comma and then gets a single element in the resulting
array, that is, the input string itself. The following value is returned by the split method:
"fox,tiger,wolf,,"
Let's call the split method with limit=2:
String[] arr = input.split(",", 2);
It splits the input string around a comma and then gets exactly two elements in the
resulting array. The following two values are returned by the split method:
"fox"
"tiger,wolf,,"
Let's call the split method with limit=3:
String[] arr = input.split(",", 3);
[ 64 ]
Regular Expression Programming Using Java String and Scanner APIs
It splits the input string around a comma, and then we get exactly three elements in the
resulting array. The following three values are returned by the split method:
"fox"
"tiger"
"wolf,,"
Let's call the split method with a negative limit:
String[] arr = input.split(",", -1);
It splits the input string around a comma as many times as possible, with the trailing
empty strings included in the split array, and we get these elements in the resulting array.
The following values are returned by the split method. Note the two empty strings at the
end of the split array:
"fox"
"tiger"
"wolf"
""
""
Using regular expressions in Java Scanner
API
A scanner is a utility class used for parsing the input text and breaking the input into tokens
of various types, such as Boolean, int, float, double, long, and so on. It generates tokens of
various types using regular expression-based delimiters. The default delimiter is a
whitespace. Using the Scanner API, we can generate tokens of all the primitive types in
addition to string tokens.
The String, Pattern, and Matcher classes are able to parse the input and generate tokens
of the String type only, but the Scanner class is very useful for checking and generating
tokens of different types from the input source. The Scanner instance can be constructed
using the File, InputStream, Path, Readable, ReadableByteChannel, and String
arguments.
Pattern and Matcher will be covered in detail in Chapter 5, Introduction
to Java Regular Expression APIs - Pattern and Matcher Classes.
[ 65 ]
Regular Expression Programming Using Java String and Scanner APIs
There are many methods in the scanner that support regular expressions. Let's list those
methods down and understand them better:
Method Signature Purpose
Scanner useDelimiter(String pattern) Sets this scanner's delimiter regex pattern to a
String regex argument.
Scanner useDelimiter(Pattern pattern) This method is almost the same as the previous
one but gets a Pattern as an argument instead of
a String. This means that we can pass a regular
expression already compiled. If we are forced to
use the version with the String argument, the
scanner would compile the string to a Pattern
object even if we have already executed that
compilation in other parts of the code.
We will discuss the Pattern and Matcher class
in the next chapter.
Pattern delimiter() Returns the pattern being used by this scanner to
match delimiters.
MatchResult match() Returns the match result of the latest scan
operation performed by this scanner.
boolean hasNext(String pattern) Returns true if the next token matches the
pattern constructed from the specified string.
boolean hasNext(Pattern pattern) This method is almost the same as the previous
one but gets Pattern as an argument instead of
String.
String next(String pattern) Returns the next token if it matches the pattern
constructed from the specified string.
String next(Pattern pattern) This method is almost the same as the previous
one but gets Pattern as an argument instead of
String.
String findInLine(String pattern) Attempts to find the next occurrence of a pattern
constructed from the specified string, ignoring
delimiters.
[ 66 ]
Regular Expression Programming Using Java String and Scanner APIs
String findInLine(Pattern pattern) This method is almost the same as the previous
one but gets Pattern as an argument instead of
String.
Scanner skip(String pattern) Skips the input that matches a pattern
constructed from the specified string, ignoring
delimiters.
Scanner skip(Pattern pattern) This method is almost the same as the previous
one but gets Pattern as an argument instead of
String.
String findWithinHorizon(String Attempts to find the next occurrence of a pattern
pattern, int horizon) constructed from the specified string, ignoring
delimiters.
String findWithinHorizon(Pattern This method is almost the same as the previous
pattern, int horizon) one but gets Pattern as an argument instead of
String.
In addition to the two hasNext() methods mentioned in the preceding table using regular
expression, the Scanner class also provides several overloaded hasNext methods that
return true if the next available token in the input can be retrieved for that particular type.
For example: hasNextInt(), hasNextDouble(), hasNextBoolean(),
hasNextByte(), hasNextFloat(), hasNextLong(), hasNextShort(),
hasNextBigInteger(), hasNextBigDecimal(), hasNext().
Similarly, there are several overloaded next methods that scan the input to return the next
token for that particular type. For example: nextextInt(), nextextDouble(),
nextextBoolean(), nextextByte(), nextextFloat(), nextextLong(),
nextextShort(), nextextBigInteger(), nextextBigDecimal(), nextext().
For the complete reference of the Scanner class refer to
https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html.
Suppose there is an input text delimited by two exclamation marks. The data is structured
in the following sequence:
animal!!id!!weight
[ 67 ]
Regular Expression Programming Using Java String and Scanner APIs
The animal name is a string, id is an integer number, and weight is a double number.
With this structure, here is an example input:
Tiger!!123!!221.2!!Fox!!581!!52.50
Given that there are two animals, here is how we can use the Scanner class to parse this
input data in Java:
final String input = "Tiger!!123!!221.2!!Fox!!581!!52.50";
final int MAX_COUNT = 2;
String animal;
int id;
double weight;
Scanner scanner = new Scanner(input).useDelimiter("!!");
for (int i=0; i asPredicate
()
Predicate asPredicate ()