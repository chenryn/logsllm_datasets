整的测试结果。下面列出了Scrawlr的局限性：
·最多能搜索1500个URL
·搜索过程中无脚本解析
·搜索过程中无Flash解析
·搜索过程中无表单提交（无POST参数）
·只支持简单代理
·无身份验证或登录功能
·不检查SQL盲注
Scrawlr在推断过程中只发送三个注入字符串，如下所示：
·value'OR
●value' AND 5=5 OR 's=0
0-oqunu
Scrawlr只检测详细的 SQL注入错误，即服务器返回的HTTP500代码页，其中包含了数
据库返回的错误消息。
●URL: https://h30406.www3.hp.com/campaigns/2008/wwcampaign/1-57C4K/index.php
·支持的平台：Microsof Windows。
·价格：免费。
4. SQLiX
SQLiX是一款由CedricCochin编写的免费的Perl程序。它是一个扫描器，能够爬行搜索
Web站点并检测SQL注入漏洞和SQL盲注漏洞。图2-20展示了一个示例。
m nds 1 5.2 Ba14 376
图 2-20SQLiX
65
---
## Page 80
SQL注入攻击与防御（第2版）
在图2-20中，SQLiX正在搜索并测试Victim公司的 Web 站点：
perl soLix.pl -crav1=* http://wv,victim.com/=-a11 -exploit
从截图中不滩发现，SQLiX搜索了Victim公司的Web站点并自动发现了几个SQL注入漏
洞。但该工具遗漏了一个源于首页链接且易受攻击的身份验证表单。SQLiX不解析HTML表
单，而是自动发送POST请求。
SQLiX可以只测试单个页面（使用-urI修饰符)，也可以对包含在文件中的一系列URL（使用
-file 修饰符）进行测试。SQLiX还存在其他一些有趣的选项：-refer、-agent 和-cookie，分别用
于将Referer、用户代理和cookie头作为潜在的注入要素。
表2-8列出了SQLiX在推断过程中使用的注入字符串。
表2-8SQLIX识别SQL注入漏润时使用的特征值
测试字符串
%27
1
value'AND'1=1
convert( varchar,0x7b5d)
%2527
valuc/**/
01GNV,2neA
convert(int,convert(varchar,0x7b5d)
value/*la*/
value′+'s’+'
%22
value'/**
valuel]sT
*+convert(int,convert( varchar,0x7b5d)+
value'
value/*la*/
value+1
User
value&
value AND 1=1
value′+1+0
value&myVAR1234
value AND 1=0
●URL: www.owasp.org/index.php/Category:OWASP_SQLiX_Project。
·支持的平台：使用Perl编写的独立平台。
·要求：Perl。
·价格：免费。
5. Paros Proxy/Zed Attack Proxy
ParosProxy是一款Web 评估工具，最早用于手动调节Web流量。它扮演代理的角色，能
够捕获Web浏览器请求，可以操纵发送给服务器的数据。免费版的ParosProxy已经不再进行
维护，但是其原型的一个分支、名为ZedAttackProxy（ZAP）的工具依然可用。
Paros 和ZAP还包含一个内置的Web爬虫搜索器，称为 spider。只需右击显示在Sites 标
签中的域名并单击Spider即可使用该工具。还可以指定一个执行爬行搜索操作的文件夹。单
击Start后，Paros将开始执行搜索操作。
Sites 标签中域名的下面会显示所有已发现的文件。只需选择想要测试的域名并单击
Analyse|Scan即可。图2-21展示了扫描Victim公司Web站点时的执行情况。
66
---
## Page 81
第2章SQL注入测试
Stes
Trap
SET:42
ETar
ftegery!
omen-Toe:1
ttp.tw
图 2-21 Paros Proxy
窗口底部的Alerts 选项卡会显示已识别的安全间题。Paros Proxy和 ZAP可以测试 GET和
POST请求，进一步讲，它支持SQL盲注发现，这使它成为免费软件中用户不错的选择。
表2-9列出了该工具使用的测试字符串。
表2-9ParosProxy识别SQL注入漏润时使用的特征值
测试字符串
INJECTED_PARAM
1, 0);waitfor delay0:0:15';-
1, 0, 0, 0, 0°);waitfor
delay °0:0:15';-
‘OR'I=1'
;waitfor delay "0:0:15;--
1,0,0);
waitfor delay
"0:0:15°
1 AND 1=1
LI, GNV, 1
waitfor delay °0:0:15;-
1, 0, 0);
waitfor delay
°0:0:15';
1 AND 1=2
Z=-I GNV. I
;waitfor delay 0:0:15;--
1, 0, 0,0)s waitfr delay
“0:0:15';*
1 OR 11
1 “OR "1"°1
Jwaitfor delay 0:0:15;--
1,0,0,0)
waitfor delay
"0:0:15°;
1=I. GNV,
1', 0°);waitfor delay °0:0:15;-
1, “0′, 0,0, 0°); waitfor
delay 0:0:15';
‘ AND ′I2
●URL:Paros—www. parosproxy.org/
●URL: ZAPwww.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project。
67
---
## Page 82
SQL注入攻击与防御（第2版）
·支持的平台：使用Java编写，平台独立。
●要求：Java运行时环境（Java Runtime Environment,JRE)1.4(或更高版本)。
·价格：免费。
2.5本章小结
要想成功利用SQL注入，第一步是寻找代码中易于攻击的部分，由它来执行注入。本章
从黑盒视角介绍了寻找SQL注入漏润的过程，讲解了需要采取的步骤。
Web应用是一种客户端/服务器架构，其中浏览器是客户端，Web应用是服务器。本章介
绍了如何通过操纵从浏览器发送给服务器的数据来触发SQL错误和识别漏洞。不同的应用程
序会披露不同数量的信息，识别漏润操作的复杂性也因此面各不相同。有些情况下，应用程序
使用数据库返回的错误来响应Web请求，而有些情况下则需要关注细节信息来识别漏洞。
一旦触发漏洞后，便可以确信能够使用Web应用输入来注入SQL代码，接下来要做的是
有原始语句代码均能执行）以及注释部分查询以避免执行完整的查询语句。这一阶段的成功将
为进一步利用漏洞奠定基础。
很多商业软件或免费软件可以自动寻找SQL注入漏润。对于应用返回标准SQL错误的情
况，这些软件均能检测到简单的漏润，但如果碰到其他情况（如自定义的错误），它们的精度便
会千差万别。此外，免费工具通常只关注GET请求测试，面对其他的POST请求不做测试。
2.6快速解决方案
1.寻找SQL注入
·寻找SQL注入漏润存在三个关键点：1）识别Web应用接收的数据输入：2）修改输入
值以包含危险的字符串：3）检测服务器返回的异常。
·使用Web代理角色扮演工具有助于绕过客户端限制，完全控制发送给服务器的请求。
此外，它们还能提高服务器响应的可见度，提供更多检测到细小漏洞的机会（如果显示
在Web浏览器上，这些小漏润将很难被检测到)。
·包含数据库错误或HTTP错误代码的服务器响应通常能降低识别SQL注入漏洞的难
度。不过，SQL盲注是一种即使应用不返回明显错误也能利用漏洞的技术。
2.确认 SQL注入
·要想确认一个SQL注入漏洞并进一步加以利用，需要构造一条能注入SQL代码的请
求以便应用程序创建一条语法正确的SQL语句，之后由数据库服务器执行该语句且不
返回任何错误。
·创建语法正确的语句时，可以通过注入注释终止该语句，并注释掉剩余的查询。对于
这种情况，通常可以毫无约束地连接任意SQL代码（假设后台数据库支持执行多条语句），
进面提供执行攻击（如权限提升）的能力。
68
---
## Page 83
第2章SQL注入测试
·有时，应用程序对注入操作没有回复任何可见的信息，这时可以通过向来自数据库的
回复引入延迟来确认注入。应用服务器将等待数据库回复，我们则可以确认是否存在
漏洞。对于这种情况，需要意识到网络和服务器工作负荷可能会对延迟造成轻微干扰。
3.自动发现SQL注入
·寻找SQL注入漏洞所涉及的操作可以被适度自动化。当需要测试大型的Web站点时，
自动技术非常有用，但需要意识到自动发现工具可能无法识别某些存在的漏洞，不能
完全依赖自动化的工具。
·有多款商用工具可以对Web站点的完整安全性进行评估，还可以进行SQL注入漏洞
测试。
·可选择免费、开源的工具来辅助大型站点中的SQL注入漏洞查找操作。
2.7常见问题解答
问题：是否所有Web应用均易受到SQL注入攻击？
解答：不是，SQL注入漏润只会出现在访问数据库的应用中。如果应用未连接任何数据库，
那么便不会受到SQL注入攻击。即使应用连接了数据库，也并不代表就易受到攻击，
它们需要我们去查明。
问题：当我向Web应用的搜索功能插入一个单引号时，发现了一个奇怪的现象：我并未
收到任何错误。该应用是否可被利用？
解答：这要具体问题具体分析。如果事实证明这是一个SQL注入漏洞，那么该应用可以
被利用。即使它不返回任何数据库错误，您也可以利用它。构造有效SQL语句的
推理过程会有点难，但只要多加练习、反复实践，是可以掌握其中技巧的。
问题：SQL注入和 SQL盲注有何差别？
解答：在常规SQL注入中，应用返回数据库中的数据并呈现给您。而在SQL盲注漏洞中，
您只能获取分别与注入中的真假条件相对应的两个不同响应。
问题：为什么需要将SQL盲注利用自动化，面不需要将常规SQL注入自动化？
解答：利用SQL盲注漏洞需要向远程Web服务器发送5个或6个请求来找到每个字符。
为显示数据库服务器的完整版本信息，可能要发送数百个请求，使用手动方法的话
会极其费力且难以实施。
问题：什么是引发SQL注入漏洞的主要原因？
解答：Web应用未对用户提供的数据进行充分审查和（或）未对输出进行编码是产生问题的
主要原因。此外，攻击者还可以利用其他问题，比如糟糕的设计或不良的编码实践。
如果缺少输入审查，那么所有这些问题都将可以被利用。
问题：我已经检测并确认了一个SQL盲注漏洞，但常用的漏洞利用工具好像不起作用。
解答：SQL盲注每次的情况会略有不同，有时现有的工具无法利用每个漏洞。请确认该漏
润可手动证实且工具已正确配置。如果工具仍不起作用，那么建议您阅读工具的源
代码并根据需求加以定制。
69
---
## Page 85
第3章复查代码中的SQL注入
本章目标
·复查源代码中的SQL注入
·自动复查源代码
3.1概述
通常情况下，要找到程序中潜在的SQL注入，最快的方法是复查程序的源代码。如果读
者是一位禁止在开发过程中使用SQL注入测试工具的开发人员（这种情况在银行比较普遍，通
常会因为违反该规定而遭到解雇），那么复查源代码是唯一选择。
通过快速复查代码还可以明确某些动态字符串的构造和执行方式。通常不太明确的是：这
确的验证或编码。寻找SQL注入bug时，代码复查人员会面临这样的挑战。
本章介绍在代码中查找SQL注入时的注意事项和技巧，包括识别用户可在程序的哪些位
置操控输入，以及区分会导致SQL注入暴露的代码构造类型。除了手动技术外，我们还将介
绍自动复查源代码的方法和工具，以及使用这些工具加速复查过程的示例，