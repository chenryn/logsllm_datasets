```  
SELECT title, ts_rank_cd(textsearch, query) AS rank  
FROM apod, to_tsquery('neutrino|(dark & matter)') query  
WHERE query @@ textsearch  
ORDER BY rank DESC  
LIMIT 10;  
                     title                     |   rank  
-----------------------------------------------+----------  
 Neutrinos in the Sun                          |      3.1  
 The Sudbury Neutrino Detector                 |      2.4  
 A MACHO View of Galactic Dark Matter          |  2.01317  
 Hot Gas and Dark Matter                       |  1.91171  
 The Virgo Cluster: Hot Plasma and Dark Matter |  1.90953  
 Rafting for Solar Neutrinos                   |      1.9  
 NGC 4650A: Strange Galaxy and Dark Matter     |  1.85774  
 Hot Gas and Dark Matter                       |   1.6123  
 Ice Fishing for Cosmic Neutrinos              |      1.6  
 Weak Lensing Distorts the Universe            | 0.818218  
```  
This is the same example using normalized ranking:  
```  
SELECT title, ts_rank_cd(textsearch, query, 32 /* rank/(rank+1) */ ) AS rank  
FROM apod, to_tsquery('neutrino|(dark & matter)') query  
WHERE  query @@ textsearch  
ORDER BY rank DESC  
LIMIT 10;  
                     title                     |        rank  
-----------------------------------------------+-------------------  
 Neutrinos in the Sun                          | 0.756097569485493  
 The Sudbury Neutrino Detector                 | 0.705882361190954  
 A MACHO View of Galactic Dark Matter          | 0.668123210574724  
 Hot Gas and Dark Matter                       |  0.65655958650282  
 The Virgo Cluster: Hot Plasma and Dark Matter | 0.656301290640973  
 Rafting for Solar Neutrinos                   | 0.655172410958162  
 NGC 4650A: Strange Galaxy and Dark Matter     | 0.650072921219637  
 Hot Gas and Dark Matter                       | 0.617195790024749  
 Ice Fishing for Cosmic Neutrinos              | 0.615384618911517  
 Weak Lensing Distorts the Universe            | 0.450010798361481  
```  
Ranking can be expensive since it requires consulting the tsvector of each matching document, which can be I/O bound and therefore slow. Unfortunately, it is almost impossible to avoid since practical queries often result in large numbers of matches.  
### 效率  
1、写入效率  
500万个词的词库，随机提取64个，组成一个含64个词的分词字符串。包含全文检索GIN索引。  
**56个并发写入，每秒写入93955行，平均响应时间0.6毫秒。**  
[《HTAP数据库 PostgreSQL 场景与性能测试之 7 - (OLTP) 全文检索 - 含索引实时写入》](../201711/20171107_08.md)    
2、查询效率  
1亿条文本记录，并发全文检索查询。  
**56个并发查询，每秒查询51369次，平均响应时间1.1毫秒。**  
[《HTAP数据库 PostgreSQL 场景与性能测试之 14 - (OLTP) 字符串搜索 - 全文检索》](../201711/20171107_15.md)    
### 特殊功能 - HTML 高亮  
对于匹配上的文本，将其高亮显示.  
```  
ts_headline([ config regconfig, ] document text, query tsquery [, options text ]) returns text  
```  
例子  
```  
SELECT ts_headline('english',  
  'The most common type of search  
is to find all documents containing given query terms  
and return them in order of their similarity to the  
query.',  
  to_tsquery('query & similarity'));  
                        ts_headline                           
------------------------------------------------------------  
 containing given query terms  
 and return them in order of their similarity to the  
 query.  
SELECT ts_headline('english',  
  'The most common type of search  
is to find all documents containing given query terms  
and return them in order of their similarity to the  
query.',  
  to_tsquery('query & similarity'),  
  'StartSel = ');  
                      ts_headline                        
-------------------------------------------------------  
 containing given  terms  
 and return them in order of their  to the  
 .  
```  
### 特殊功能 - 生成文档统计信息  
sqlquery返回tsvector一列，统计这一列中，有哪些lexeme，每个lexeme出现在多少文本中，每个lexeme总共出现了多少次。  
```  
ts_stat(sqlquery text, [ weights text, ]  
        OUT word text, OUT ndoc integer,  
        OUT nentry integer) returns setof record  
```  
返回值  
```  
word text — the value of a lexeme  
ndoc integer — number of documents (tsvectors) the word occurred in  
nentry integer — total number of occurrences of the word  
```  
例子  
For example, to find the ten most frequent words in a document collection:  
```  
SELECT * FROM ts_stat('SELECT vector FROM apod')  
ORDER BY nentry DESC, ndoc DESC, word  
LIMIT 10;  
```  
The same, but counting only word occurrences with weight A or B:  
```  
SELECT * FROM ts_stat('SELECT vector FROM apod', 'ab')  
ORDER BY nentry DESC, ndoc DESC, word  
LIMIT 10;  
```  
### 特殊功能 - 设置文档结构  
设置tsvector属于哪个文档结构（标题、作者、摘要、内容）。  
```  
1、  
setweight(vector tsvector, weight "char")	  
assign weight to each element of vector	  
setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')	  
'cat':3A 'fat':2A,4A 'rat':5A  
2、  
setweight(vector tsvector, weight "char", lexemes text[])  
assign weight to elements of vector that are listed in lexemes	  
setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A', '{cat,rat}')	  
'cat':3A 'fat':2,4 'rat':5A  
```  
### 特殊功能 - 调试文本  
1、调试token  
https://www.postgresql.org/docs/10/static/textsearch-debugging.html  
例子  
```  
ts_debug([ config regconfig, ] document text,  
         OUT alias text,  
         OUT description text,  
         OUT token text,  
         OUT dictionaries regdictionary[],  
         OUT dictionary regdictionary,  
         OUT lexemes text[])  
         returns setof record  
```  
```  
alias text — short name of the token type  
description text — description of the token type  
token text — text of the token  
dictionaries regdictionary[] — the dictionaries selected by the configuration for this token type  
dictionary regdictionary — the dictionary that recognized the token, or NULL if none did  
lexemes text[] — the lexeme(s) produced by the dictionary that recognized the token,   
or NULL if none did; an empty array ({}) means it was recognized as a stop word  
```  
2、调试 lexeme，可以使用ts_lexize判断某个token是否在某个字典里面有与之匹配的条目（lexeme）。  
```  
ts_lexize(dict regdictionary, token text) returns text[]  
```  
例子  
```  
SELECT ts_lexize('english_stem', 'stars');  
 ts_lexize  
-----------  
 {star}  
SELECT ts_lexize('english_stem', 'a');  
 ts_lexize  
-----------  
 {}  
```  
### 限制  
The length of each lexeme must be less than 2K bytes，单个lexeme不能大于2K字节。     
The length of a tsvector (lexemes + positions) must be less than 1 megabyte，单个tsvector不能大于1MB。      
```  
postgres=# select length(to_tsvector(string_agg(md5(random()::text), ' '))) from generate_series(1,100000);  
ERROR:  54000: string is too long for tsvector (3624424 bytes, max 1048575 bytes)  
LOCATION:  make_tsvector, to_tsany.c:185  
```  
The number of lexemes must be less than 2^64，单个tsvector中不能存储超过2的64次方个lexeme。  
Position values in tsvector must be greater than 0 and no more than 16,383，单个tsvector中，lexeme的位置值不能大于16,383  
The match distance in a  (FOLLOWED BY) tsquery operator cannot be more than 16,384，单个tsquery中，lexeme的距离值不能大于16,383  
No more than 256 positions per lexeme，同一个lexeme不能超过256个位置。  
The number of nodes (lexemes + operators) in a tsquery must be less than 32,768，单个tsvector不能存储超过32765个node(lexemes+位置)。     
超过限制的话，可以使用多个字段。  
## 二、模糊查询\正则查询\相似查询  
模糊查询、相似查询、正则匹配查询，都属于文本匹配的范畴，PostgreSQL通过gin和pg_trgm实现了这三种搜索的索引加速。  
性能如下：  
![pic](20171205_02_pic_001.jpg)  
![pic](20171205_02_pic_002.jpg)  
下面是实际的案例：  
[《HTAP数据库 PostgreSQL 场景与性能测试之 13 - (OLTP) 字符串搜索 - 相似查询》](../201711/20171107_14.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 12 - (OLTP) 字符串搜索 - 前后模糊查询》](../201711/20171107_13.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 11 - (OLTP) 字符串搜索 - 后缀查询》](../201711/20171107_12.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 10 - (OLTP) 字符串搜索 - 前缀查询》](../201711/20171107_11.md)    
[《HTAP数据库 PostgreSQL 场景与性能测试之 9 - (OLTP) 字符串模糊查询、相似查询索引实时BUILD - 含索引实时写入》](../201711/20171107_10.md)    
## 三、ADHOC搜索  
ADHOC搜索，指任意字段组合搜索。例如一张表有N个列，N个列都可能被作为查询条件，因此有N！种组合，为了实现这种场景的高效率搜索，在PostgreSQL中提供了几种方法。  
1、分区表，可以实现一些字段搜索时的收敛。  
2、BLOOM过滤索引，支持任意组合的等值搜索。lossy 过滤。  
3、GIN多列复合索引，BITMAP SCAN。支持任意组合搜索，过滤到BLOCK级别。  
4、多个单列索引，BITMAP SCAN。数据库自动优化，根据COST评估选择index scan或bitmap scan，支持任意组合搜索，过滤到BLOCK级别。  
![pic](20171205_02_pic_008.jpg)  
性能如下：  
![pic](20171205_02_pic_003.jpg)  
下面是实际的案例：  
[《HTAP数据库 PostgreSQL 场景与性能测试之 20 - (OLAP) 用户画像圈人场景 - 多个字段任意组合条件筛选与透视》](../201711/20171107_21.md)    
[《PostgreSQL 多字段任意组合搜索的性能》](../201711/20171102_01.md)    
[《时间、空间、对象多维属性 海量数据任意多维 高效检索 - 阿里云RDS PostgreSQL最佳实践》](../201707/20170722_01.md)    
[《多字段，任意组合条件查询(无需建模) - 毫秒级实时圈人 最佳实践》](../201706/20170607_02.md)    
[《宝剑赠英雄 - 任意组合字段等效查询, 探探PostgreSQL多列展开式B树 (GIN)》](../201702/20170205_01.md)    
[《PostgreSQL 如何高效解决 按任意字段分词检索的问题 - case 1》](../201607/20160725_05.md)    
[《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)    
[《PostgreSQL bitmapAnd, bitmapOr, bitmap index scan, bitmap heap scan》](../201702/20170221_02.md)    
## 参考  
1、全文检索  
https://www.postgresql.org/docs/10/static/textsearch.html  
https://www.postgresql.org/docs/10/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES  
2、模糊、正则、相似查询  
https://www.postgresql.org/docs/10/static/pgtrgm.html  
3、ADHOC 查询  
https://www.postgresql.org/docs/10/static/indexes-bitmap-scans.html  
https://www.postgresql.org/docs/10/static/bloom.html  
https://www.postgresql.org/docs/10/static/gin.html  
4、  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)    
[《PostgreSQL 全文检索加速 快到没有朋友 - RUM索引接口(潘多拉魔盒)》](../201610/20161019_01.md)    
[《PostgreSQL 全表 全字段 模糊查询的毫秒级高效实现 - 搜索引擎颤抖了》](../201701/20170106_04.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")