where Pr𝑖 is the collision probability of two independent sam-
ples from (𝒳 mod 𝑝𝑖).
The above lemma implies that if the distribution (𝒳 mod 𝑝)
is within statistical distance 𝜀 from the uniform distribution
over Z𝑚
𝑝 , then we have
∆(𝐷0, 𝐷1) ≤ 𝜀 +√︀𝑞𝑛/𝑝𝑚.
This can be seen by considering a distribution 𝒳 ′ such that
(𝒳 mod 𝑝) is uniform distribution over Z𝑚
𝑝 and ∆(𝒳 ,𝒳 ′) ≤ 𝜀.
Lemma 2.7 (Special case of Lemma 8 in [4]). There
exists a universal constant 𝐾 > 1 such that for all 𝑚 ≥ 2𝑛,
𝜀 > 0 and 𝜎 ≥ 𝐾𝜂𝜀(Z), the following holds for X ←˒ 𝐷𝑛×𝑚Z,𝜎 :
√
2𝜋𝑚/𝐾  1 − 4𝑚𝜀 + 𝑂(exp(−𝑚/𝐾)).
We will also require the following theorem, adapted from
Theorem 17 in [27].
√
𝑚1𝜎2
Theorem 2.8 ([27]). Let 𝑛, 𝑚1, 𝑚2, and 𝜆 be integers
satisfying 𝑚2 ≥ 𝑚1 > 100 and 𝜎1, 𝜎2 be positive real num-
bers. Let 𝑛′ = max{𝜆, 𝑛} and assume that 𝑛′ > 100. We
𝑚1𝑛′ log 𝑚1), 𝑚1 ≥
also assume that they satisfy 𝜎1 ≥ Ω(
Ω(𝑛′ log (𝜎1𝑛′)), and 𝜎2 ≥ Ω(𝑛′5/2√
1 log3/2(𝑚1𝜎1)).
Then, there exists a probabilistic polynomial-time algorithm
that given 𝑛, 𝑚1, 𝑚2, 𝜆 (in unary), 𝜎1, and 𝜎2, returns X1 ∈
Z𝑛×𝑚1 , X2 ∈ Z𝑛×𝑚2 , and U ∈ Z𝑚×𝑚 with 𝑚 = 𝑚1 + 𝑚2
such that:
∙ the distribution of (X1, X2) is within statistical distance
2−Ω(𝑛′) of the distribution 𝐷𝑛×𝑚1
×(𝐷Z𝑚2 ,𝜎2,𝛿1 ×···×
Z,𝜎1
𝐷Z𝑚2 ,𝜎2,𝛿𝑛 )𝑡, where 𝛿𝑖 denotes the 𝑖th canonical unit
vector in Z𝑚2 whose 𝑖th coordinate is 1 and whose
remaining coordinates are 0,
∙ we have | det U| = 1 and (X1|X2) · U = (I𝑛|0),
√
∙ every column of U has norm ≤ 𝑂(
𝑛′𝑚1𝜎2) with
probability ≥ 1 − 2−Ω(𝑛′).
Three remarks are in order regarding the theorem. First,
we take the transpose of the theorem in [27]. This is just
for a notational convenience. Secondly, the distribution of
X = (X1|X2) in Theorem 17 in [27] is slightly different
from the above in that all entries of the first column of
X equal to 1. As noted right after Lemma 7 in [27], the
theorem still holds even with the change. Finally, in the above
theorem, we introduce the statistical security parameter 𝜆
and differentiate it from the lattice dimension 𝑛, while the
theorem in [27] assigns the same variable 𝑛 for both. This
change is introduced because we will invoke the theorem for
possibly small 𝑛 for which 2−𝑛 is no longer negligible.
In our security analysis, we need a variant of the above the-
orem where X is chosen from a slightly different distribution
and U need not be efficiently samplable.
Lemma 2.9. Let 𝑛, 𝑚1, 𝑚2, 𝑚, 𝜆, 𝑛′, 𝜎1, 𝜎2 be as in Theo-
rem 2.8. Then, for all but 2−Ω(𝑛′) probability over (X1, X2) ∈
Z𝑛×𝑚1 × Z𝑛×𝑚2 chosen from 𝐷𝑛×𝑚1
, there exists
Z,𝜎1
U ∈ Z𝑚×𝑚 such that | det U| = 1, (X1|X2)· U = (I𝑛|0), and
√
every column of U has norm ≤ 𝑂(
× 𝐷𝑛×𝑚2
Z,𝜎2
𝑛′𝑚1𝜎2).
∑︀
To prepare for the proof of Lemma 2.9, we define R´enyi
Divergence (RD) and review its properties following [6]. For
any two probability distributions 𝑃 and 𝑄 such that the
support of 𝑃 is a subset of the support of 𝑄 over a countable
domain 𝑋, we define the RD (of order 2) by 𝑅(𝑃‖𝑄) =
𝑥∈𝑋 𝑃 (𝑥)2/𝑄(𝑥), with the convention that the fraction is
zero when both the numerator and denominator are zero.
We will use the following property: if 𝑃 (resp. 𝑄) is a direct
product of independent distributions 𝑃1 and 𝑃2 (resp. 𝑄1
and 𝑄2), then we have 𝑅𝐷(𝑃‖𝑄) = 𝑅𝐷(𝑃1× 𝑃2‖𝑄1× 𝑄2) =
𝑅𝐷(𝑃1‖𝑃2) · 𝑅𝐷(𝑄1‖𝑄2).
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2283Lemma 2.10 (Lemma 2.9 in [6]). Let 𝑃 and 𝑄 denote
distributions with Supp(𝑃 ) ⊆ Supp(𝑄) and 𝐴 ⊆ Supp(𝑄) be
arbitrary set. Then, we have 𝑄(𝐴) ≥ 𝑃 (𝐴)2/𝑅(𝑃‖𝑄) where
𝑃 (𝐴) and 𝑄(𝐴) are measure of 𝐴 under the distribution 𝑃
and 𝑄 respectively.
We also recall that the RD between two offset discrete
Gaussians is bounded as follows.
Lemma 2.11 (Lemma 4.2 in [26]). For any 𝑛-dimensional
lattice 𝐿 ⊆ R𝑛 and invertible matrix Σ, set 𝑃 = 𝐷Λ,Σ,w and
𝑄 = 𝐷Λ,Σ,z for some fixed w, z ∈ Λ. Then, 𝑅(𝑃‖𝑄) ≤
exp(2𝜋‖w − z‖2/𝑠𝑛(Σ)2).
Then, we proceed to the proof of Lemma 2.9.
Proof of Lemma 2.9. Let 𝐴 ⊆ Z𝑛×𝑚 be the set of X =
(X1|X2) such that U satisfying the properties listed in the
statement does not exist. Theorem 2.8 implies that when X is
× (𝐷Z𝑚2 ,𝜎2,𝛿1 ×
sampled from the distribution 𝑄 := 𝐷𝑚1×𝑚2
···×𝐷Z𝑚2 ,𝜎2,𝛿𝑛 )𝑡, we have 𝑄(𝐴) ≤ 2−Ω(𝑛′). We want to prove
that 𝑃 (𝐴) = 2−Ω(𝑛′) for the distribution 𝑃 := 𝐷𝑛×𝑚1
×
Z,𝜎1
𝐷𝑛×𝑚2
Z,𝜎2
𝑅(𝑃‖𝑄) = 𝑂(1). We have
. By Lemma 2.10, we have 𝑃 (𝐴) ≤√︀𝑄(𝐴) · 𝑅(𝑃‖𝑄) ≤
√︀𝑅(𝑃‖𝑄)· 2−Ω(𝑛′). To complete the proof, it suffices to show
𝑅(𝑃‖𝑄) = 𝑅(︀𝐷𝑛×𝑚1
×(𝐷Z𝑚2 ,𝜎2,𝛿1 × ··· × 𝐷Z𝑚2 ,𝜎2,𝛿𝑛 ))︀
× 𝐷𝑛×𝑚2
Z,𝜎2
‖𝐷𝑚1×𝑚2
Z,𝜎1
Z,𝜎1
Z,𝜎1
= 𝑅((𝐷Z,𝜎2 )𝑛‖(𝐷Z,𝜎2,1)𝑛)
≤ exp(2𝜋𝑛/𝜎2
2),
where we use Lemma 2.11 in the last inequality. Since 𝜎2 ≥
Ω(𝑛1/2), we conclude that 𝑅(𝑃‖𝑄) = 𝑂(1). This completes
□
the proof of Lemma 2.9.
Next, we define the learning with errors (LWE) assumption.
It was shown that the assumption holds as long as certain
lattice problems are hard in the worst case [12, 34, 36].
Definition 2.12. For an integers 𝑛 = 𝑛(𝜆), 𝑚 = 𝑚(𝜆),
𝑞 = 𝑞(𝜆), a real number 𝛼(𝜆) ∈ (0, 1), and an algorithm 𝒜, the
advantage for the learning with errors problem LWE𝑛,𝑚,𝑞,𝛼
of 𝒜 is defined as follows:
⃒⃒ Pr[𝒜(A, As + x) → 1] − Pr[𝒜(A, w + x) → 1]⃒⃒
𝑞 , and x ←˒ 𝐷𝑚Z,𝛼𝑞. We
where A ←˒ Z𝑛×𝑚
say that LWE𝑛,𝑚,𝑞,𝛼 assumption holds if the advantage is
negligible for every probabilistic polynomial-time 𝒜.
𝑞 , w ←˒ Z𝑚
, s ←˒ Z𝑛
𝑞
3 TRACE AND REVOKE FROM
INNER-PRODUCT FUNCTIONAL
ENCRYPTION
In this section, we provide a generic transformation from
a bounded collusion, random keys inner-product functional
encryption scheme ℱℰ to a trace-and-revoke scheme 𝒯 ℛ.
Since intuition was provided in Section 1, we proceed directly
to the formal construction.
3.1 The Scheme
We construct a trace-and-revoke scheme 𝒯 ℛ following the
specifications of Definition 2.1. Our scheme assumes the
existence of a public directory pd which contains the identities
of the users that have been assigned keys in the system. The
public directory is initially empty. We assume that pd can
only be modified by a central authority (the key generator).
(1) Setup(1𝜆, 1𝑡, 1𝑟). Upon input the security parameter 𝜆,
the bound 𝑡 on the number of traitors and the bound
𝑟 on the number of revoked users, proceed as follows:
(a) Let (pk, msk) ← ℱℰ.Setup(1𝜆, 1ℓ), where ℓ = 𝑡+𝑟+1.
(b) Output the public key pk and master secret key msk.
(2) KeyGen(msk, id). Upon input the master secret key msk
to the public directory pd.
𝑝. The pair 𝑝id = (id, xid) is appended
and a user identity id ∈ ID, proceed as follows:
(a) Sample xid ←˒ Zℓ
(b) Let skid ← ℱℰ.KeyGen(msk, xid).
(c) Output skid.
(3) Enc(pd, pk,ℛ, 𝑚). Upon input the public key pk, a set
of revoked users ℛ of cardinality ≤ 𝑟 and a plaintext
messages 𝑚 ∈ ℳ = Z𝑝, proceed as follows:
(a) Compute vℛ ∈ Zℓ
𝑝 ∖ {⃗0} such that ⟨xid, vℛ⟩ = 0 for
(b) Compute yℛ = 𝑚 · vℛ.
(c) Output 𝐶 = (𝐶1, 𝐶2) = (ℱℰ.Enc(pk, yℛ),ℛ).
every id ∈ ℛ.
every id ∈ ℛ.
(4) Dec(pd, skid, 𝐶). Upon input the secret key skid for user
id and a ciphertext 𝐶 = (𝐶1, 𝐶2), proceed as follows:
(a) Parse 𝐶2 as 𝐶2 = ℛ. If id ∈ ℛ, then abort.
(b) Compute vℛ ∈ Zℓ
𝑝 ∖ {⃗0} such that ⟨xid, vℛ⟩ = 0 for
(c) Compute and output 𝑚 = ℱℰ.Dec(skid, 𝐶1)/⟨xid, vℛ⟩.
(5) Trace(pd,ℛ,𝒮,𝒪𝒟). Upon input the public directory pd,
a revoked set of users ℛ, a suspect set 𝒮 of users and
given access to the oracle 𝒪𝒟, first proceed as follows:
(a) Find 𝑚, 𝑚′ ∈ ℳ such that the following quantity is
Pr
𝐶←˒Enc(pd,pk,ℛ,𝑚)
−
Pr
(𝐶, 𝑚) = 1
′
, 𝑚) = 1
𝐶′←˒Enc(pd,pk,ℛ,𝑚′)
(𝐶
(b) Set 𝒮1 = {id1, id2, . . .} = 𝒮 ∖ ℛ.
(c) Compute vℛ ∈ Zℓ
every id ∈ ℛ.
𝑝 ∖ {⃗0} such that ⟨xid, vℛ⟩ = 0 for
Then execute the following steps with 𝑖 = 1, 2, . . .:
(d) If 𝑖 = 1, set v𝒮𝑖 = ⃗0. If 𝒮𝑖 = ∅, set v𝒮𝑖 = (𝑚′−𝑚)·vℛ.
Else compute v𝒮𝑖 ∈ Zℓ
(i) ⟨xid, v𝒮𝑖⟩ = 0 for every id ∈ 𝒮𝑖 ∪ ℛ.
(ii) ⟨xid, v𝒮𝑖⟩ = (𝑚′ − 𝑚) · ⟨xid, vℛ⟩ for every id ∈
𝑝 such that:
𝒮1 ∖ 𝒮𝑖.
(e) Repeat the following steps sufficiently many times
(as dictated by Hoeffding’s inequality) to compute an
approximation of the probability 𝑝𝑖 that the response
from 𝒪𝒟 is 𝑏𝑖 = 1.
(i) Construct y = v𝒮𝑖 + 𝑚 · vℛ ∈ Zℓ
𝑝;
(ii) The probe ciphertext is 𝐶𝒮𝑖 = (ℱℰ.Enc(pk, y),ℛ);
non-negligible:
⃒⃒⃒
[︁𝒪𝒟
[︁𝒪𝒟
]︁
]︁⃒⃒⃒.
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2284get a binary value 𝑏𝑖 as output.
(iii) Provide the oracle 𝒪𝒟 with (𝐶𝒮𝑖 , 𝑚) as input and
(f) If 𝑖 > 1 and |𝑝𝑖 − 𝑝𝑖−1| is non-negligible, then output
(g) If 𝒮𝑖 = ∅, then output ⊥ and abort; else, set 𝒮𝑖+1 =
id𝑖−1 and abort;
𝒮𝑖 ∖ {id𝑖}.
For the correctness and the tracing security proof, we
require that in Step (a) of Algorithm Enc, in Step (b) of Algo-
rithm Dec and in Step (c) of Algorithm Trace, the vector vℛ
be uniquely determined by ℛ, in the same unique way across
all algorithms. One way of achieving this property is to order
the xid’s for id ∈ ℛ lexicographically, and run a deterministic
linear system solver. We proceed in the same way (using
always the same deterministic algorithm) for vector v𝒮𝑖 at
Step (d) of Algorithm Trace.
We remark that one can send ℛ instead of vℛ in the
encryption algorithm. This will make the ciphertext longer,
but make the encryption and decryption algorithms slightly
more efficient.
We first check the correctness of the scheme.
Theorem 3.1. Assume that 𝑝 = 𝜆𝜔(1). Let ℛ be a set of
revoked users of cardinality ≤ 𝑟. Then, for every id /∈ ℛ and
every 𝑚 ∈ ℳ = Z𝑝, we have
Dec(pd, skid, Enc(pd, pk,ℛ, 𝑚)) = 𝑚,
with probability ≥ 1 − 𝜆−𝜔(1).
Proof. As xid is uniform in Zℓ
𝑝, and thanks to the parame-
ter choices of 𝑝 = 𝜆𝜔(1) and ℓ > 𝑟, we have that ⟨xid, vℛ⟩ ̸= 0,
with overwhelming probability. The execution of Dec(pd, skid, 𝐶),
with 𝐶 = (𝐶1, 𝐶2) = Enc(pd, pk,ℛ, 𝑚), proceeds to Step (b)
and computes (with overwhelming probability):
Dec(pd, skid, 𝐶) =