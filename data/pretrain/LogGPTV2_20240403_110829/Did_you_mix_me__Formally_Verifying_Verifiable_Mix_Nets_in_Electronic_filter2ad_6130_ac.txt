There has been signiﬁcant focus on using automated tools
for proof creation or checking in e-voting. Starting with the
work in ProVerif of Delaune et al. [50] to reason formally
8See http://certicrypt.gforge.inria.fr/#related
about privacy; ProVerif was subsequently used to reason
formally about cryptographic veriﬁability by Smyth et al. [51].
EasyCrypt and Tamarin have been used more recently to
formally verify various e-voting schemes [52], [53] with the
Cortier et al. [54] work on (cryptographic) veriﬁability and
privacy of Belenios [55] being one of the best examples.
However, all of these works are interested in the privacy or
integrity of the (theoretical) scheme, not the security of the
implementation. This makes the works complementary with
ours, since they show the e-voting scheme to be secure if
the underlying cryptography is correctly implemented and we
prove the security of the implementation of the underlying
cryptography. We stress that the above list of works strad-
dles two different techniques: model checking and theorem
proving. The model checkers, such as Tamarin, only establish
symbolic proofs which are qualitatively different from the
computational proofs of interactive theorem proving.
Previous work related to formally verifying sigma protocols
includes Barthe et al. [56]. Almeida et al. [57] developed a
compiler which accepts an abstract description of the statement
to be proved and produces an implementation of a sigma
protocol for that statement along with an Isabelle/HOL proof
that the sigma protocol is correct. Both of these works were
combined and expanded upon by Almeida et al. [58]. These
works could be used to produce veriﬁable electronic voting
systems; they could also be use to produce veriﬁable mix nets
when combined with our work here. However, the automat-
ically produced implementation will very likely not be com-
patible with the deployed schemes since the implementation
produced, while sound for the same statement, will differ in
implementation aspects.
Haines et al. [49] demonstrated how interactive theorem
provers and code extraction can be used to gain much higher
conﬁdence in the outcome of elections; they achieved this
by using the interactive theorem prover Coq and its code
extraction facility to produce veriﬁers, for veriﬁable voting
schemes, with the veriﬁers proven to be cryptographically
correct. They also showed that it was possible to verify the
correctness (completeness, soundness and zero-knowledge) of
a proof of correct shufﬂe. However, the primary focus of
their work was on formally veriﬁed veriﬁers for elections
schemes using sigma protocols and their work on mix nets
only supported one encryption scheme (ElGamal) with a
maximum of two inputs; hence it cannot be used for any real
election. To the best of our knowledge, the work of Haines et
al is the only work to do machine-checked proofs of shufﬂe.
Here, we have removed both limitations: not only do we
allow an unbounded number of inputs, which Haines et al.
speculated should follow, but we generalise the proof to hold
for a signiﬁcant class of cryptosystems (encryption schemes).
This is not only technically interesting but crucial to practice
since most of the e-voting schemes used in national elections
do not use standard ElGamal.
The work of Haines et al. [49], and hence ours as well,
differs from most of the related work by avoiding (direct)
probabilistic reasoning. It is relatively straightforward to turn
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1752
it
most honest probabilistic algorithms into functions which take
the random coin as input. Avoiding probabilistic reasoning
for security properties is more difﬁcult but
is possible
because the properties of sigma protocols (see Sec. III-D),
and related protocols with more rounds, can be expressed
without resorting to probabilities. Two of the three properties
(completeness and special soundness) are normally stated
without any probabilities but honest-veriﬁer zero-knowledge
is stated using probabilities. We can circumvent this issue,
by ﬁrst observing that we can describe both a set and a
distribution over the set as a multiset. We can then prove
honest veriﬁer zero-knowledge by showing that the multiset
of transcripts produced by the honest runs is equal to the
multiset of transcripts produced by the simulator. Haines et
al. [49] had an imperfect deﬁnition of honest veriﬁer zero-
knowledge inside Coq which required an additional property
to ensure the equality of the probabilities. We have updated
this deﬁnition to remove the problem and it is now sufﬁcient
without any additional external properties. (We also proved
that their results hold under the updated deﬁnition.)
C. Clariﬁcations and Limitations
What we veriﬁed: We have deﬁned a functor from an en-
cryption scheme into a proof of shufﬂe for that encryption
scheme. We proved all the proofs of shufﬂe (mix nets)
produced by this functor to be complete, to enjoy special
soundness and perfect honest-veriﬁer zero-knowledge,
provided the encryption scheme satisﬁes certain proper-
ties. We either prove that the property holds perfectly
(completeness, and zero-knowledge) or provably reduce
attacks against
to some underlying hard
problem. We also proved that both ElGamal and Parallel
ElGamal have the required properties for the functor to
apply. The privacy of the mix net (as a whole) rather
than just the zero-knowledge proof additionally depends
on the security of the encryption scheme against chosen
plaintext attack (IND-CPA) see appendix C; we did not
prove that the encryption schemes satisfy IND-CPA.
the mix net
Hardness of the underlying problems: As we have noted,
some of our proofs are reductions from attacks on the
system to underlying hard problems. Of course, if the
parameters are chosen incorrectly, and this underlying
problem is not hard in practice, there is no security. This
limitation is common to all such cryptographic proofs and
checking that the underlying problem is expected to be
hard is out of scope for our work.
Side channel attacks: The primary piece of veriﬁed software
that we wish to use is the veriﬁer. The veriﬁer is a
public algorithm running only on public data and hence
is incapable of revealing private information; for this
reason, we did not verify our implementations to be free
of side channel attacks. The prover in the proof of shufﬂe
does run on private information and hence side channel
attacks are relevant here. The nature of how these proofs
are used in practice for national election, (on air gapped
machines), and the nature of the batch proofs themselves
make attacks more difﬁcult.
Fiat-Shamir transform: We proved the interactive variants
of the proof of shufﬂe; however, in practice, the non-
interactive variant is invariably used. The non-interactive
variant is obtained from the interactive variant by using
the Fiat-Shamir transform [33]. The transform involves
replacing the challenge from the veriﬁer with the hash
of the statement and commitment. All the veriﬁable mix
nets proved in this work are in the interactive variant;
they can be made non-interactive with a one-line change
to the veriﬁer but proving the security of the Fiat-Shamir
transform inside Coq is left as future work. 9
Code extraction: We machine-checked the proof of shufﬂe in
Coq but, for efﬁciency reasons, extracted the Coq code
into OCaml code before using it. This process, while
fairly mature, could introduce errors, The commonalities
between Coq and OCaml make the code appear almost
identical to human eyes.10 Alas, we cannot do better
as a formally veriﬁed extraction facility for Coq is still
under development. We stress that this in no way detracts
from the value of formally proving the correctness of
the speciﬁcation of the mix net at a level which is
computable; it does suggest that the current practice of
developing multiple independent veriﬁers still has value.
III. BUILDING BLOCKS
We ﬁrst present our notation and then the building blocks
in Coq upon which will sit the results in the next two sections.
A. Notation
q
(cid:2)N
i=1 viv(cid:3)
q . Let (cid:2)v, v(cid:3)(cid:3) =
Let M denote a square matrix of order N from ZN∗N
, let
¯mi denote the ith row of M. Let v be a vector of length N
from ZN
i denote the inner product.
Given a ﬁnite set S, we write s ←r S for a uniformly random
assignment of an element in S to the variable s. Given two
sets X and Y , a binary relation R(X)(Y ) is a subset of the
Cartesian product X × Y . Then, given two binary relations
R1 and R2, we write R1 ∨ R2 for the pairs ((x1, x2), w) s.t.
(x1, w) ∈ R1 or (x2, w) ∈ R2 and write R1 ∧ R2 for the
pairs ((x1, x2), w) s.t. (x1, w) ∈ R1 and (x2, w) ∈ R2.
B. Algebraic Structures
The basic algebraic structures are all standard and encoded
into Coq as module types. For instance, a ring is:
Module Type RingSig.
: Set.
: F -> F -> F.
: F.
Parameter F
Parameter Fadd
Parameter Fzero
Parameter Fbool_eq : F-> F-> bool.
Parameter Fsub
Parameter Finv
Parameter Fmul
Parameter Fone
: F -> F -> F.
: F -> F.
: F -> F -> F.
: F.
9As already noted, proving the security of the transform requires reasoning
about rewinding in the random oracle model which to the authors’ knowledge
is not supported in Coq, EasyCrypt or other equivalent interactive provers.
10The extracted OCaml code has a slightly less rich type system.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1753
Axiom module_ring : ring_theory Fzero Fone Fadd Fmul
Fsub Finv (@eq F).
Axiom F_bool_eq_corr: forall a b : F,
Fbool_eq a b = true  a=b.
Axiom
F_bool_neq_corr: forall a b : F,
Fbool_eq a b = false  a <> b.
Add Ring module_ring : module_ring.
End RingSig.
When the module type is instantiated, the parameters must be
supplied and the instantiator must prove that the axioms hold.
This formalisation is useful since it allows us to build generic
structures without specifying which particular instantiation of
the module will be used. For instance, the Coq module which
encodes what it means to be an algebraic module can take any
group and ring which satisfy the axioms.
Module Type ModuleSig (Group: GroupSig) (Ring: RingSig).
Import Group. Export Group.
Import Ring.
Export Ring.
Parameter op : G -> F -> G.
Axiom mod_dist_Gdot: forall (r: F) (x y: G),
op (Gdot x y) r = Gdot (op x r) (op y r).
Axiom mod_dist_Fadd: forall (r s: F) (x: G),
op x (Fadd r s) = Gdot (op x r) (op x s).
Axiom mod_dist_Fmul: forall (r s: F) (x: G),
op x (Fmul r s) = op (op x s) r.
Axiom mod_id: forall (x: G), op x Fone = x.
Axiom mod_ann: forall (x: G), op x Fzero = Gone.
Infix "+" := Fadd.
Notation "0" := Fzero.
Notation "- x" :=
Notation "x - y" := (x + (- y)).
Infix "o" := Gdot (at level 50).
Notation "- x" := (Ginv x).
Infix "ˆ" := op.
(Finv x).
Infix "*" := Fmul.
Notation "1" := Fone.
End ModuleSig.
We also introduce a number of strange but convenient
structures which capture certain combinations of algebraic
structures that occur often in the kind of encryption schemes
used in e-voting. For instance, it is common to set the space
of challenges in the proof of shufﬂe to be the same as the
randomness space in the encryption scheme. In the basic case
of standard ElGamal, as normally used in a Terelius-Wikstr¨om
mix net, this is indeed what happens in all implementations.
However, when one considers shufﬂing vectors of ElGamal
ciphertexts in parallel, things become more complicated. It
would, in theory, still be possible to set the randomness space
of these vectors of ElGamal ciphertexts as the challenge space
but since it is no longer a ﬁeld, this creates technical issues.
It is much simpler to set the challenge space to the original
ﬁeld and let the ﬁeld act as a scalar operation on the vectors
of ElGamal ciphertexts.
When generalising the properties discussed above slightly
further, one ends up with the notation of a group which is a
module with respect to a given ring and a given vector space
with respect to a ﬁeld. For the proof of the mix net to still
work, we need to be able to describe the scalar action of the
ﬁeld on the ring and apply some constraints. This is done in the
Coq module VectorSpaceModuleSameGroup; the reader may
wish to simply believe us that the proof of the mix net goes
through if these properties are satisﬁed, and further believe that
these properties are satisﬁed in all/most encryption schemes
used in e-voting—we have proved both assertions in Coq.
C. Pedersen commitments
A Pedersen commitment [59] is an information-theoretic
hiding and computationally binding commitment scheme. We
will make use of both basic and extended Pedersen commit-
ments; extended Pedersen commitments commit to a vector of
messages rather than a single message.
of PPT algorithms (Π.Setup, Π.Com, Π.Open), such that:
The extended Pedersen commitment scheme Π is the triple
• CK ← Π.Setup(G, N )
s.t. N > 1, CK =
{G, g, h1, ..., hN}. Given a group G of prime order q, let
g be any generator of G and choose h1, ..., hN ←r G.
• The Π.ComCK algorithm takes m = (m1, ..., mN ) ∈
q , r ∈ Zq and sets c = grhm1
N and d = (m, r).
ZN
• The Π.OpenCK algorithm takes a commitment c ∈ G
and opening d = (m, r) ∈ ZN
1 ...hmN
return m else return ⊥.
q × Zq. If c = grhm1
. . . hmN
1
N
Commitment schemes which can commit to arbitrarily many
values in a constant size commitment, such as extended
Pedersen commitments, are used in numerous proofs of correct
shufﬂe to reduce the size of the proof from quadratic to linear;
they are inherently computationally binding.
D. Sigma Protocols
Zero-knowledge proofs are protocols that allow a prover to
prove to a veriﬁer that a given statement s belongs to a certain
language L. The prover normally uses a witness w to allow it
to efﬁciently compute its part of the protocol. We use R for
the relationship of statements and witness which denotes that
the witness w evidences that the statement s belongs to the
language L.
Sigma protocols are a class of particularly simple and
efﬁcient zero-knowledge proofs that were ﬁrst deﬁned and
analysed by Cramer in his PhD Thesis [2]. Haines et al. [49]
provided the logical machinery in Coq to produce provably
secure implementations of the sigma protocols commonly
used in e-voting; which is to say, prove they satisfy special
soundness, honest-veriﬁer zero-knowledge and completeness.
The deﬁnition of sigma protocols makes no reference to
probabilities in its deﬁnition of soundness. Special sound-
ness says that if any adversary can produce two accepting
transcripts for different challenges then it is possible to ex-
tract a witness w from those transcripts efﬁciently such that