### System Information
- **OpenCV Version:** 4.1.2
- **Operating System/Platform:** Arch Linux
- **Compiler:** g++ 9.2.0

### Detailed Description
I have encountered a segmentation fault in my application when using the `cv::dnn::readNetFromCaffe` function. I suspect that this issue is due to the function not being thread-safe, as it crashes when called concurrently from multiple threads.

### Steps to Reproduce
Below is a simple test application that reproduces the crash approximately 10% of the time. In my actual application, I typically use fewer threads (usually between 2 and 16), but increasing the number of threads to 1000 makes the bug more frequent.

```cpp
#include <opencv2/dnn.hpp>
#include <vector>
#include <thread>

void test() {
    cv::dnn::readNetFromCaffe("path/to/deploy.prototxt", "path/to/model.caffemodel");
}

int main() {
    std::vector<std::thread> threads;
    for (size_t i = 0; i < 1000; ++i) {
        threads.emplace_back(test);
    }
    for (auto& t : threads) {
        t.join();
    }
    return 0;
}
```

### Analysis
The following stack traces and data race information were captured during the execution of the test application:

#### Data Race Detection
```
Possible data race during read of size 8 at 0x51EB5E8 by thread #3
Locks held: none
   at 0x4FA8FB6: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x492C0B2: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x5036473: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x49CFF8B: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x49D0477: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x49C05AD: cv::dnn::dnn4_v20190902::readNetFromCaffe(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x1092DD: test() (in /home/runner/segfaulttest/main)
   by 0x10AE5B: void std::__invoke_impl<void, void (*)(), std::tuple<> >(std::__invoke_other, void (*&&)()) (in /home/runner/segfaulttest/main)
   by 0x10ADFF: std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) (in /home/runner/segfaulttest/main)
   by 0x10AD9D: void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (in /home/runner/segfaulttest/main)
   by 0x10AD5E: std::thread::_Invoker<std::tuple<void (*)()> >::operator()() (in /home/runner/segfaulttest/main)
   by 0x10AD33: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() (in /home/runner/segfaulttest/main)

This conflicts with a previous write of size 8 by thread #2
Locks held: none
   at 0x4FA8F9E: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x492C0B2: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x5036473: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x49CFF8B: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x49D0477: ??? (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x49C05AD: cv::dnn::dnn4_v20190902::readNetFromCaffe(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/libopencv_dnn.so.4.1.2)
   by 0x1092DD: test() (in /home/runner/segfaulttest/main)
   by 0x10AE5B: void std::__invoke_impl<void, void (*)(), std::tuple<> >(std::__invoke_other, void (*&&)()) (in /home/runner/segfaulttest/main)
   by 0x10ADFF: std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) (in /home/runner/segfaulttest/main)
   by 0x10AD9D: void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (in /home/runner/segfaulttest/main)
   by 0x10AD5E: std::thread::_Invoker<std::tuple<void (*)()> >::operator()() (in /home/runner/segfaulttest/main)
   by 0x10AD33: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() (in /home/runner/segfaulttest/main)

Address 0x51eb5e8 is in the BSS segment of /usr/lib/libopencv_dnn.so.4.1.2
```

#### GDB Backtrace
Here is a GDB backtrace of the segmentation fault. Unfortunately, I did not have OpenCV symbols enabled when I managed to reproduce the crash with GDB. Running the application in GDB seems to make the bug very rare.

```
#0  0x00007fd9ce450470 in free () at /usr/lib/libc.so.6
#1  0x00007fd9d28584bc in  () at /usr/lib/libopencv_dnn.so.4.1
#2  0x00007fd9d285a528 in  () at /usr/lib/libopencv_dnn.so.4.1
#3  0x00007fd9d285c604 in cv::dnn::dnn4_v20190902::readNetFromCaffe(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () at /usr/lib/libopencv_dnn.so.4.1
```

### Conclusion
The `cv::dnn::readNetFromCaffe` function appears to be non-thread-safe, leading to segmentation faults and data races when called concurrently. This issue can be mitigated by ensuring that calls to this function are synchronized or by using a thread-safe alternative if available.