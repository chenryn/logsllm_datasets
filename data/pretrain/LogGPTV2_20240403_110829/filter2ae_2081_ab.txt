影响版本：  
Apache Shiro 
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 复现过程**
基于Windows平台，使用`环境`目录下的`shiro-basic.zip`环境，解压后，用Idea打开shiro-basic文件夹，下载maven资源，运行ShiroBasicApplication类，即可启动环境。效果如图。  
**Shiro < 1.5.0**  
构造HTTP请求，发送到服务器，完成身份验证绕过，效果如图
**Shiro < 1.5.2**
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 漏洞利用过程**
**Shiro < 1.5.0**  
获取到无权限访问的敏感路径，在路径的结尾添加`/`进行身份验证绕过。
**Shiro < 1.5.2**  
获取到无权限访问的敏感路径，在auth认证路径中的添加`;`进行身份验证绕过。
**3.1.2 代码分析**
**Shiro < 1.5.0**  
传入的payload首先被服务器接收，并传送给Shiro拦截器处理(org.apache.shiro.web.servlet.OncePerRequestFilter#doFilter方法作为入口)。  
调用createSubject方法创建Subject，并调用execute方法进入Shiro FilterChain中。
进入org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain方法中，首先获取请求uri路径，之后迭代获取拦截器的表达式。
这里我们重点关注`/hello/*`表达式。代码进入pathMatches方法，最终调用org.apache.shiro.util.AntPathMatcher#doMatch方法进行传入的requestURI与拦截器表达式进行匹配。
匹配过程中，分别将拦截器表达式与requestURI以`/`作为分隔符进行字符串到数组的转换，通过循环匹配数组中对应的元素，判断requestURI是否符合拦截器表达式匹配形式。
如果表达式中存在通配符`*`，会将containsStar标志位赋值为true，进入 `else if (patIdxEnd ==
0)`判断条件，返回true。
继续跟进代码，在requestURI与拦截器表达式匹配结束后，还会进行一次判断，而漏洞产生的原因也是由于判断的条件。如果Shiro拦截器表达式不以`/`结尾，且requestURI以`/`结尾，判断代码将返回false表示匹配失败，从而绕过Shiro认证。
跟进到Spring处理URI的代码，进入org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal方法，获取requestURI。
进入lookupHandlerMethod方法，调用addMatchingMappings方法，获取Spring拦截器。
进入org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingCondition方法调用doMatch方法进行requestURI和拦截器表达式的匹配。
Spring拦截器匹配流程和Shiro大致相同，都是将字符串转换为数组进行匹配。
由于Spring多了一个环节，在检测拦截器表达式与requestURI结尾是否为`/`之后，并没有直接返回false。而是将拦截器表达式结尾添加`/`，并继续进行`path.startsWith(this.pathSeparator)
!= pattern.startsWith(this.pathSeparator)`测试，从而完成了拦截器表达式与requestURI的匹配。
上述攻击方式在Shiro 1.5.0版本中修复，但是被二次绕过，绕过分析如下。
**Shiro < 1.5.2**  
Shiro 1.5.0 -1.5.1在认证过程中基本没有变化，主要分析一下二次绕过的利用点。还是以org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain作为起点。
在获取requestURI时,依旧会在getPathWithinApplication方法中调用getRequestUri方法进行requestURI的解析并获取，但是在URI正规化处理时，先调用decodeAndCleanUriString方法进行路径的解码，并清理URI。
进入decodeAndCleanUriString方法，发现此方法会以分号将传入的URI进行截断，并将分号以及分号后面的数据进行清空，返回分号前面的URI数据，从而让`/a/b;/c`变为/a/b。
继续跟进到Spring拦截器的decodeAndCleanUriString方法中
从代码中可以发现，Spring对于分号处理的方式与Shiro不同，Spring会先获取分号的位置，并检测分号后是否存在`/`，如果有，将`/`的位置记录在slashIndex变量中，并将分号前的数据与`/`之后的数据进行拼接，从而让`/a/b;/c`变为`/a/b/c`。返回处理后的requestURI。
由于Spring与Shiro的decodeAndCleanUriString方法不同，攻击者可以使用分号构造路径，绕过Shiro认证，并可以匹配Spring的动态控制器。
**3.1.3 漏洞触发过程**
**Shiro < 1.5.0**
**Shiro < 1.5.2**
**3.1.4补丁分析**
对比Shiro 1.4.2与Shiro
1.5.0版本的改动，在org.apache.shiro.web.filter.PathMatchingFilter类中添加了删除requestURI结尾的`/`的代码。
由于requestURI和拦截器表达式结尾的`/`都会被清除，因此防御了此漏洞。