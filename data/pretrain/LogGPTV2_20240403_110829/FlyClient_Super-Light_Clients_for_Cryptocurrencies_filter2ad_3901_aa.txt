title:FlyClient: Super-Light Clients for Cryptocurrencies
author:Benedikt B&quot;unz and
Lucianna Kiffer and
Loi Luu and
Mahdi Zamani
2020 IEEE Symposium on Security and Privacy
FlyClient: Super-Light Clients for Cryptocurrencies
Benedikt B¨unz∗
Stanford University
PI:EMAIL
Lucianna Kiffer∗
Northwestern University
PI:EMAIL
Loi Luu
Kyber Network
Mahdi Zamani
Visa Research
loiluu@kyber.network
PI:EMAIL
Abstract—To validate transactions, cryptocurrencies such as
Bitcoin and Ethereum require nodes to verify that a blockchain
is valid. This entails downloading and verifying all blocks,
taking hours and requiring gigabytes of bandwidth and storage.
Hence, clients with limited resources cannot verify transactions
independently without trusting full nodes. Bitcoin and Ethereum
offer light clients known as simpliﬁed payment veriﬁcation (SPV)
clients, that can verify the chain by downloading only the block
headers. Unfortunately, the storage and bandwidth requirements
of SPV clients still increase linearly with the chain length. For
example, as of July 2019, an SPV client in Ethereum needs to
download and store about 4 GB of data.
Recently, Kiayias et al. proposed a solution known as non-
interactive proofs of proof-of-work (NIPoPoW) that allows a light
client to download and store only a polylogarithmic number
of block headers in expectation. Unfortunately, NIPoPoWs are
succinct only as long as no adversary inﬂuences the honest
chain, and can only be used in chains with ﬁxed block difﬁculty,
contrary to most cryptocurrencies which adjust block difﬁculty
frequently according to the network hashrate.
We introduce FlyClient, a novel transaction veriﬁcation light
client for chains of variable difﬁculty. FlyClient is efﬁcient both
asymptotically and practically and requires downloading only a
logarithmic number of block headers while storing only a single
block header between executions. Using an optimal probabilistic
block sampling protocol and Merkle Mountain Range (MMR)
commitments, FlyClient overcomes the limitations of NIPoPoWs
and generates shorter proofs over all measured parameters. In
Ethereum, FlyClient achieves a synchronization proof size of less
than 500 KB which is roughly 6,600x smaller than SPV proofs.
We ﬁnally discuss how FlyClient can be deployed with minimal
changes to the existing cryptocurrencies via an uncontentious
velvet fork.
I. INTRODUCTION
Mobile digital payments are becoming increasingly popular
[1] and enable consumers to quickly transfer money to peers
and efﬁciently pay for goods and services. In general these
payments rely on centralized and trusted services. Decentral-
ized cryptocurrencies such as Bitcoin [2] and Ethereum [3],
seem to provide an intriguing alternative to these services.
Unfortunately, most current solutions for verifying cryptocur-
rency transactions do not suit low-capacity mobile devices
such as phones or IoT-devices. Blockchain-based cryptocur-
rencies use state machine replication that requires nodes to
verify every state transition and store the entire state. This
is entirely unsuitable for battery, computation, and storage
restricted devices. Current mobile solutions often employ a
∗ Both authors contributed equally
trusted wallet provider which negates much of the beneﬁts of
these decentralized ledgers.
Proof-of-Work Blockchains. Most cryptocurrencies, includ-
ing Bitcoin and Ethereum, maintain an append-only ledger,
known as a blockchain, which stores a sequence of blocks
of transactions chained together via cryptographic hashes.
These blocks are created and appended to the blockchain via
a mining process, where the participating nodes, known as
miners, compete to become the next block proposer, usually
by solving a computationally-intensive puzzle, known as a
proof of work (PoW) [4], with sufﬁcient difﬁculty. Through a
gossip protocol initiated by the block proposer, every miner
receives each block including a PoW solution and appends the
block to their local copies of the blockchain if the solution is
valid. Since this process is not coordinated by any central party
(nor by any traditional consensus protocol), the blockchain
may fork into multiple chains; e.g., due to multiple solutions
found for the same puzzle by different miners, or due to
malicious behavior. To agree on the same chain consistently
with other miners, each miner downloads and veriﬁes all
blocks in every chain and picks and follows the one with the
largest total difﬁculty. Using this most difﬁcult chain principle,
it is shown that, in the long run, the network will agree
on a single chain [5], [6], [7], known as the honest (valid)
chain. Each block in this chain contains a cryptographic proof
ensuring that the block creator has spent a certain amount of
resources uniquely for this block.
To verify that a blockchain is valid without participating
in the mining process, a client may choose to download
blocks from a miner or a full node who holds a copy of the
entire chain. Currently, downloading and verifying all blocks
in Bitcoin or Ethereum requires a node to download more
than 200 GB of data, taking hours to synchronize the node’s
local blockchain [8]. Such a requirement causes long delays
for regular clients and makes it nearly impossible for storage-
limited clients to quickly verify transactions.
Light Clients. The original Bitcoin design [2] describes a
faster synchronization mechanism, known as simpliﬁed pay-
ment veriﬁcation that allows lightweight veriﬁcation of trans-
actions on the blockchain by what is typically referred to as
an SPV client (also known as a light client [9]).
Instead of downloading all blocks from a full node, an
SPV client downloads only the header of each block that
amounts to a much smaller synchronization overhead than
the full blocks (80 bytes versus 1 MB per block in Bitcoin).
© 2020, Benedikt Bünz. Under license to IEEE.
DOI 10.1109/SP40000.2020.00049
928
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
The block headers are linked together through hashes and
include the PoW solutions. This allows an SPV client to verify
which chain has the most PoW solutions. Note that light
clients neither know whether all transactions are valid nor
all consensus rules are being followed. Light clients rather
operate under the assumption that the chain with the most
PoW solutions follows all rules of the network. This implies
that all transactions in this chain are valid and the majority of
computation power supports the same valid chain.
Assumption 1 (SPV assumption). The chain with the most
PoW solutions follows the rules of
the network and will
eventually be accepted by the majority of miners.
Fortunately, prior work [5], [6], [7], [10] show that
this
assumption holds as long as an adversary holds only a minority
share of the computation power.
Under the SPV assumption, light clients can verify the
inclusion of speciﬁc transactions in the ledger. This is done
by utilizing a Merkle tree commitment of the transactions of a
block stored in the block header. A full node provides the light
client with an SPV proof of the chain along with a Merkle path
to the transaction in the tree committed to in the header.
Light clients also enable various applications to a broad
class of users who need to verify a log of past events recorded
on a blockchain. For example, SPV proofs can be used for
efﬁcient veriﬁcation of cross-chain transactions that rely on
funds or states recorded on another chain. Such transactions
can happen when exchanging cryptocurrencies [11], [12],
transferring assets to sidechains [13], [14], [15], or sharding
blockchains [16], [17]. Blockchain-based notary services have
been recently developed [18], [19] that allow lightweight
veriﬁcation of the correctness and integrity of documents
uploaded on a blockchain.
Although relying only on block headers reduces the veriﬁ-
cation overhead of SPV clients, it still incurs a large overhead
on resource-limited clients, especially when considering the
fact that this overhead increases linearly with the number of
blocks. This has already become a major concern in Ethereum
due to its signiﬁcantly-shorter block interval
than Bitcoin
(∼15 seconds vs ∼10 minutes) and signiﬁcantly-larger block
headers (508 bytes vs 80 bytes). Given that the Ethereum
blockchain contains more than 8.2 million blocks (as of
July 2019 [20]), an SPV client wishing to verify Ethereum
transactions would have to download and store more than
3.9 GB of data. The client has to either download a fresh
copy of the data every time it wants to verify a transaction
or keep a local copy in its storage and only download the
changes since the last synchronization. Either case puts a large
burden on the client. The problem is further ampliﬁed for users
that run clients for multiple blockchains or systems that use
sidechains [21].1
Sublinear Light Clients. One may wonder if it is possible for
a client to verify any event on a blockchain by downloading
and/or storing only a sublinear (in the length of the chain)
amount of information. In fact, such a performance gain comes
with an important security challenge: Since such a client
cannot verify every PoW solution in the received blockchain,
it can be tricked into accepting an invalid chain by a malicious
prover who can precompute a sufﬁciently-long chain using its
limited computational power.
Proposals for sublinear light clients were initially discussed
in Bitcoin forums and mailing lists as early as 2012 [23],
[24]. Most of them relied on the notion of superblocks, blocks
that solve a more difﬁcult PoW puzzle than the current target
puzzle. Since they appear randomly at a certain rate on an
honest chain,
the number of superblocks in a chain is a
good indicator of the total number of valid blocks, if miners
behave honestly. Kiayias et al. [9] introduced and formalized
an interactive proof mechanism, known as proofs of proof of
work (PoPoW) based on superblocks. PoPoWs allow a prover
to convince a veriﬁer with high probability in logarithmic time
and communication that a chain contains a sufﬁcient amount
of work. In a later work [14], Kiayias et al. provide an attack
against the PoPoW protocol and propose a non-interactive and
still logarithmic alternative solution known as non-interactive
PoPoW (NIPoPoW).
Current Challenges. The superblock-based PoPoW [9] and
NIPoPoW [14] suffer from several drawbacks summarized as
follows. Both solutions work only if a ﬁxed PoW difﬁculty is
assumed for all blocks. This is not a realistic assumption in
practice due the variable combined hashing power of miners in
most PoW-based cryptocurrency networks. For example, the
block difﬁculty in Bitcoin has shown exponential growth over
the network’s lifetime in the past decade [25]. It isn’t clear
how to modify the super-block based protocols to handle the
variable difﬁculties.
Additionally, the variable difﬁculty setting allows a mali-
cious prover to arbitrarily manipulate block difﬁculties to per-
form what is known as a difﬁculty raising attack as described
by Bahack [26]. In this attack, the adversary mines fewer
but more difﬁcult blocks such that the combined difﬁculty
of the mined blocks exceeds that of honest miners. As a
result, the prover can convince the veriﬁer with a fake but
seemingly valid chain (see Section III-A for more details). To
prevent such an attack, the veriﬁer can check that all difﬁculty
transitions are valid, or at least that invalid transitions give no
advantage to the prover. Adding these checks in superblock-
based NIPoPoWs (such as that of [14]) is a non-obvious
extension.
1Ethereum also has a fastsync synchronization option which allows a full
node to sync to the current chain via SPV [22]. Using this, nodes can start
verifying all incoming transactions. Unfortunately, even fastsync can take up
to 10 hours to receive all headers from the network, likely due to throttling
by individual peers.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
929
Moreover, the reliance on superblocks makes the protocol
susceptible to bribing [27] and selﬁsh mining [28] attacks.
These attacks work by bribing miners to discard superblocks:
rational miners accept this if they are paid more than the
block reward as superblocks do not yield any extra block
reward. The NIPoPoW protocol of [14] defends against this
attack but only by reverting to the standard (and expensive)
SPV protocol. The proofs are therefore only succinct if no
adversarial inﬂuence exists. FlyClient, on the other hand, does
not rely on superblocks and distinguishes blocks only by their
position (or height) in the chain.
Finally, NIPoPoW’s transaction inclusion proofs are fairly
large, even in the optimistic case. This is because such proofs
consist of roughly an additional O(log(n)) block headers,
where n is the chain length. In some cryptocurrencies such as
Ethereum, block headers are quite large, thus resulting in larger
NIPoPoW transaction inclusion proofs, e.g., roughly 15 KB in
Ethereum.
Our Contribution. We propose FlyClient, a new blockchain
veriﬁcation protocol for light clients in cryptocurrencies such
as Bitcoin and Ethereum. Unlike regular SPV clients that use
a linear amount of bandwidth and storage in the length of
the chain, FlyClient requires downloading only a logarithmic
number of block headers to verify the validity of the chain.
Once the chain is veriﬁed, the client needs to store only a
single block to efﬁciently verify the inclusion of any transac-
tion on the chain. The FlyClient protocol is a non-interactive
PoPoW but overcomes the limitations of the superblock-based
NIPoPoW protocol of Kiayias et al. [14].1 FlyClient is compat-
ible with variable difﬁculty chains and provides asymptotically
and practically-succinct proofs even in the presence of an
adversary that can create a c < 1 fraction of the honest chain’s
work. Further, FlyClient requires short transaction-inclusion
proofs that consist of only O(log(n)) hashes. In Ethereum,
this results in transaction-inclusion proofs that are as small as
1.5 KB which is roughly 10x smaller than NIPoPoWs.
Our protocol is parameterized by c ∈ [0, 1) and λ ∈ N such
that an adversary which can create forks (of some minimum
length) with at most a c fraction of the valid work of the
honest chain, succeeds with probability negligible in λ. This
corresponds to a slightly stronger and parameterized version
of the SPV assumption. The protocol’s efﬁciency depends
on both c and λ. We show in Section C that FlyClient is
efﬁcient even for high values of c (e.g., c = 0.9). Finally, we
demonstrate FlyClient’s concrete efﬁciency on Ethereum (see
Table I).
FlyClient achieves these by employing the following tech-
niques:
• Probabilistic Sampling: We introduce a PoPoW pro-
tocol to randomly sample O(log n) block headers from