title:Instruction Set Extensions for Enhancing the Performance of Symmetric-Key
Cryptography
author:Sean O'Melia and
Adam J. Elbirt
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Instruction Set Extensions for Enhancing the Performance of Symmetric-Key
Cryptography
Sean O’Melia
∗
, Member, IEEE, and AJ Elbirt
†
, Member, IEEE
Abstract
Instruction set extensions for a RISC processor are pre-
sented to improve the software performance of the Data En-
cryption Standard (DES), Triple-DES, the International Data
Encryption Algorithm (IDEA), and the Advanced Encryption
Standard (AES) algorithms. The most computationally in-
tensive operations of each algorithm are off-loaded to a set
of newly deﬁned instructions. The additional hardware re-
quired to support these instructions is integrated into the
processor’s datapath. For each of the targeted algorithms,
comparisons are presented between traditional software im-
plementations and new implementations that take advantage
of the extended instruction set architecture. Results show that
utilization of the proposed instructions signiﬁcantly reduces
program code size and improves encryption and decryption
throughput. Moreover, the additional hardware resources re-
quired to support the instruction set extensions increases the
total area of the processor by less than 65%.
Keywords: symmetric-key, cryptography, software, FPGA
1 Introduction
With more than 188 million Americans connected to the
Internet [12], information security has become a top priority.
Many applications — electronic mail, electronic banking,
medical databases, and electronic commerce — require the
exchange of private information. For example, when engag-
ing in electronic commerce, customers provide credit card
numbers when purchasing products. If the connection is not
secure, an attacker can easily obtain this sensitive data. In or-
der to implement a comprehensive security plan for a given
network to guarantee the security of a connection, Conﬁden-
tiality, Data Integrity, Authentication, and Non-Repudiation
must be provided [37].
Cryptographic algorithms used to ensure conﬁdentiality
fall within one of two categories: private-key (also known as
symmetric-key) and public-key. Symmetric-key algorithms
use the same key for both encryption and decryption. Con-
versely, public-key algorithms use a public key for encryp-
tion and a private key for decryption. In a typical session,
a public-key algorithm will be used for the exchange of a
∗
Sean O’Melia is a Associate Member of Technical Staff at MIT Lincoln
Laboratory. Email: PI:EMAIL
†
AJ Elbirt is a Senior Member of Technical Staff at The Charles Stark
Draper Laboratory. Email: PI:EMAIL
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.10
DOI 10.1109/ACSAC.2008.10
465
465
session key and to provide authenticity through digital sig-
natures. The session key is then used in conjunction with
a symmetric-key algorithm. Symmetric-key algorithms tend
to be signiﬁcantly faster than public-key algorithms and as
a result are typically used in bulk data encryption [37]. The
two types of symmetric-key algorithms are block ciphers and
stream ciphers. Block ciphers operate on a block of data
while stream ciphers encrypt individual bits or bytes. Block
ciphers are typically used when performing bulk data encryp-
tion and the data transfer rate of the connection directly fol-
lows the throughput of the implemented algorithm.
High throughput encryption and decryption are becoming
increasingly important in the area of high-speed networking.
Many applications demand the creation of networks that are
both private and secure while using public data transmission
links. These systems, known as Virtual Private Networks
(VPNs), can demand encryption throughputs at speeds ex-
ceeding Asynchronous Transfer Mode (ATM) rates of 622
million bits per second (Mbps). Increasingly, security stan-
dards and applications are deﬁned to be algorithm indepen-
dent. Although context switching between algorithms can
be easily realized via software implementations, the task is
signiﬁcantly more difﬁcult when using hardware implemen-
tations. The advantages of a software implementation in-
clude ease of use, ease of upgrade, ease of design, porta-
bility, and ﬂexibility. However, a software implementation
offers only limited physical security, especially with respect
to key storage [37]. Conversely, cryptographic algorithms
that are implemented in hardware are by nature more physi-
cally secure as they cannot easily be read or modiﬁed by an
outside attacker when the key is stored in special memory in-
ternal to the device. As a result, the attacker does not have
easy access to the key storage area and cannot discover or
alter its value in a straightforward manner [37]. Although
traditional hardware implementations lack ﬂexibility, conﬁg-
urable hardware devices offer a promising alternative for the
implementation of processors via the use of IP cores in Ap-
plication Speciﬁc Integrated Circuit (ASIC) and Field Pro-
grammable Gate Array (FPGA) technology. To illustrate,
Altera Corporation offers IP core implementations of the In-
tel 8051 microcontroller and the Motorola 68000 processor
in addition to their own Nios R(cid:2)
-II embedded processor. Sim-
ilarly, Xilinx Inc. offers IP core implementations of the Pow-
erPC processor in addition to their own MicroBlazeT M and
PicoBlazeT M embedded processors. ASIC and FPGA tech-
nologies provide the opportunity to augment the existing dat-
apath of a processor implemented via an IP core to add ac-
celeration modules supported through newly deﬁned instruc-
tion set extensions targeting performance-critical functions
[13], [19], [39]. Instruction set extensions result in signiﬁ-
cant performance improvements versus traditional software
implementations with considerably reduced logic resource
requirements versus hardware-only solutions [4], [23], [24],
[32], [33].
What follows is an overview on the various methods of
speeding up symmetric-key algorithms in software. It will
be shown that advances in technology have fueled trends to-
wards increased reconﬁgurability in embedded systems, re-
sulting in instruction set extensions becoming an attractive
option for performance-critical applications. A discussion of
the target processor, the LEON2 RISC processor, will be fol-
lowed by an analysis of the performance bottlenecks com-
monly encountered in software implementations of the tar-
geted cryptographic algorithms. The proposed instructions
will then be presented, followed by a description of the mod-
iﬁcations to the LEON2 processor and its associated devel-
opment tools. Finally, data on the logic utilization of the
additional hardware as well as throughput data for the target
algorithms achieved using the instruction set extensions will
be presented to demonstrate the effectiveness of this acceler-
ation method.
2 Previous Work
Most traditional methods for improving the throughput of
pure software implementations of symmetric-key algorithms
fall into one of two categories. One option is to construct
memory-based look-up tables where results of some of the
basic operations of the algorithm have been pre-computed
and stored. The substitution boxes, or S-Boxes, of the DES
and AES algorithms are commonly stored in look-up tables
in software implementations. Look-up tables may also be
used to combine operations used in the DES and AES al-
gorithms. AES requires several complicated mathematical
operations that are time-consuming on general-purpose pro-
cessors. Therefore in some implementations, large look-up
tables, called T-tables, are employed that combine several
of these complex operations into a single table access [34].
Look-up table based implementations are viable for systems
with large memory spaces and low access times. However,
area-constrained systems suffer large performance penalties
using this methodology and are typically not implemented in
this manner [33], [34].
Another method for speeding up software implementa-
tions of cryptographic algorithms involves taking advantage
of mathematical or structural properties of the particular al-
gorithm. The Initial and Final Permutations of the DES algo-
rithm have regular structures that make it possible to execute
a series of matrix transformations and XOR operations as
demonstrated in [29]. This translates into a sequence of in-
structions that is much smaller than the traditional sequence
required to perform the Initial and Final Permutations.
In
previous work on improving the performance of the AES
algorithm on 32-bit systems, it has been shown that trans-
forming a block of plaintext from a column-oriented matrix
to a row-oriented matrix reduces the number of instructions
required to complete the cipher due to more efﬁcient imple-
mentation of the Galois Field matrix multiplication opera-
tions [1].
In order to extend the cryptographic capabilities of an
embedded system without modifying the main processor, a
co-processor solution can be adapted. When there is data
that must be encrypted or decrypted through the chosen
symmetric-key algorithm, the main processor sends the data
and key material to the co-processor, and the co-processor
performs the algorithm, sending the processed data back over
the interface to the main processor. Most co-processor so-
lutions have tended to combine a number of different al-
gorithms to provide a multi-faceted security solution. Co-
processors have achieved high throughput values compared
to traditional software implementations and therefore are
much more capable of meeting demands for speed-critical
network communications. However, this type of solution re-
quires considerable overhead in terms of hardware area, data
transfer latency, and processor interfaces [4], [5], [11], [15],
[16], [21], [28], [35], [36], [40].
Previous work on instruction set extensions for general-
ized permutations are useful for improving the performance
of permutations used in the DES algorithm. Two new instruc-
tions for general and dynamically speciﬁed permutations are
presented in [38]. The input and a string of conﬁguration bits
are speciﬁed in the source operands and the result is stored
in the destination register. Permutations of n bits required
(cid:3)log2(n)(cid:4) issues of the custom instructions as well as several
loads of conﬁguration bits into registers. The MOSES plat-
form, based on the Xtensa T1040, is a RISC-like processor
designed to be easily extended with additional hardware and
supporting instructions. Throughput improvement factors of
31.0 for DES, 33.9 for Triple-DES, and 17.4 for AES were
reported for this architecture [31]. Similarly, instruction set
extensions that perform the mathematical operations in the
AES rounds using custom functional units integrated into
the targeted processor’s datapath were investigated in [33].
These extensions minimize the number of memory accesses,
usually by combining the SubBytes and MixColumns trans-
formations into one T-table look-up operation to speed up al-
gorithm execution. While T-table performance is dependent
upon available cache size, these extensions have yielded per-
formance improvements of up to a factor of 3.68 versus AES
implementations without the use of the instruction set exten-
sions [16], [18], [31], [36].
Several software implementations of the IDEA algorithm
take advantage of advanced processor architectures that em-
ploy instruction parallelism or functional units for multime-
dia support. A four-way parallel implementation on a 166
MHz Pentium MMX processor [25] achieved a throughput
of approximately 72 Mbps. Throughput values ranging from
421 Mbps to 550 Mbps have been achieved on the Itanium
platform running at 733 MHz [14]. The performance evalu-
466466
ations reported in [10] include a comparison of IDEA soft-
ware implementations on processors with various word sizes,
clock frequencies, and cache sizes. Execution times for
IDEA encryption ranged from 2,555 µs on the 8-bit 4 MHz
Atmega 103 to 9 µs on the 64-bit 440 MHz UltraSparc2 R(cid:2)
with instruction and data cache sizes of 16 Kbytes. Fast mul-
tiplication capability was shown to be a major factor in the
performance of the IDEA algorithm.
Implementations of IDEA on reconﬁgurable computing
platforms and systems with co-processors have shown im-
proved performance. An implementation on an SRC-6E
platform [27] achieved throughputs of approximately 590
Mbps for end-to-end software time for bulk data process-
ing. Comparisons have been made between the performance
of IDEA on Digital Signal Processors (DSPs), cryptographic
co-processors, and hardware implementations on FPGAs in
a hardware-software co-design system that makes use of en-
cryption in a mobile device. Reported performance ﬁgures
ranged from 32 Mbps on the DEC SA-110 and 53.1 Mbps
on the TI TMX320C6x DSP chips, to 180 Mbps using the
VINCI cryptographic co-processor, to 528 Mbps with an
FPGA-based implementation [26].
3 The LEON2 Processor
The LEON2 processor is a RISC CPU produced by
Gaisler Research that is implemented in VHDL and is fully
synthesizable. The model is highly conﬁgurable and the
source code is freely available under the GNU General Public
License which enables modiﬁcations and enhancements to
the architecture. The LEON2 processor is based on the Scal-
) and features a fully
synchronous design with a single clock, use of multiplexers
for loading of pipeline registers, separate combinational and
sequential processes, and record types for interconnection of
component I/O signals.
able Processor Architecture (SPARC R(cid:2)
All SPARC R(cid:2)
V8 instructions are implemented in the
LEON2 processor architecture. Instructions are grouped ac-
cording to the values of the various ﬁelds in the instruction
opcode. Most of the available features of the LEON2 pro-
cessor can be enabled, disabled, or adjusted. This research
employed a basic conﬁguration with no FPU, PCI, Ethernet,
co-processor interface, or hardware multiplier or divider. To
extend the LEON2 architecture beyond the scope of the stan-
dard model, additional VHDL code is required. The speciﬁc
ﬁles that must be modiﬁed depend on the functionality to be
added, but if the instruction set is to be extended, the mod-
V8 opcode constants must be
ule containing the SPARC R(cid:2)
updated.
The LEON2 implementation can be targeted to any type
of FPGA or ASIC technology. Pre-made packages enable
use of technology-speciﬁc cells to directly instantiate or au-
tomatically infer the register ﬁles, caches, PCI FIFOs, and
I/O pads. Functional veriﬁcation and performance evalua-
tion of programs built for the LEON2 architecture can be
performed with the provided generic test bench. The VHDL
source for the test bench is located in the /tbench/ sub-folder
467467
of the LEON2 directory structure. Software code is placed in
the /tsource/ sub-folder in a format readable by the test bench
VHDL code. The software can then be read and executed by
the test bench. In order to facilitate the development of pro-
grams targeting the LEON2 processor, Gaisler Research has
provided a series of compilers and simulators that may be
chosen depending on the software environment. For stand-
alone applications, the Bare C Compiler, based on the GNU
Compiler Collection and GNU binutils, is recommended.
4 Evaluation of the Target Algorithms
Software implementations of DES tend to be signiﬁcantly
slower than hardware implementations. Bit-level manipula-
tions such as those contained in the permutation, expansion,
permuted choice, and Cyclic Left/Right Shift units do not
map well to general-purpose processors. General-purpose
processor instruction sets operate on multiple bits at a time
based on the processor word size. Moreover, the DES S-
Boxes do not use memory in an efﬁcient manner. Soft-
ware look-up tables would appear to be the obvious imple-
mentation choice for the DES S-Boxes. However, the DES
S-Boxes have 6-bit addresses and 4-bit output bits while
most memories associated with general-purpose processors
use byte addressing with either 8-bit or 32-bit output data.
As a result, many software implementations of DES exhibit
throughputs that are at least a full order of magnitude slower
than hardware implementations.
Even the best software implementations are only capable
of throughputs in the range of 100–200 Mbps. Most of these
implementations recommend storing the 32-bit left and right
halves of the data stream as a 48-bit padded word within a
64-bit processor word and implementing the permutations
and S-Boxes as precomputed look-up tables. Additionally,
look-up table implementation for the S-Boxes is most effec-
tive when the size of the look-up tables is minimized, guar-
anteeing that the data will ﬁt entirely in on-chip cache. Size
minimization of the S-Box look-up tables is achieved by im-
plementing each S-Box in its own look-up table. Finally, one
key software optimization is the unrolling of software loops
to increase performance. Even when software loops are too
cumbersome to unroll, using loop counters that decrement to
zero in place of loop counters that increment to a terminal
count are shown to greatly increase the performance of soft-
ware implementations of the DES algorithm. However, the
unrolling of software loops must be done with great care such
that the total data storage space does not exceed the size of
the on-chip cache to avoid extreme performance degradation
[3], [17], [30].
In terms of the core operations of IDEA, bit-wise XOR
and addition are easily implemented with one instruction
each in software. For reduction modulo 216, a processor such
as the LEON2 that only performs arithmetic on 32-bit regis-
ter operands requires an additional logic instruction to mask
out the bits that may overﬂow into the sixteen most signiﬁ-
cant bits of the destination register. However, the major per-
formance bottleneck for a software implementation of IDEA
is multiplication modulo 216 + 1. Multiplication may require
several clock cycles to complete (especially those without
hardware multipliers), and the modular reduction, commonly
implemented using the Low-High Lemma [22], requires ad-
ditional execution time.
AES software performance bottlenecks typically occur in
the SubBytes and MixColumns transformations, one or both
of which are usually implemented via 8-bit to 8-bit look-
up tables. Often most of the AES round transformations
— SubBytes, ShiftRows, and MixColumns — are combined
into large look-up tables termed T-tables. Such implemen-
tations require up to three T-tables whose size may be ei-
ther 1 Kbytes or 4 Kbytes where the smaller tables require
performing an additional rotation operation. The goal of the
T-tables is to avoid performing the MixColumns and InvMix-
Columns transformations as these operations perform Galois
Field ﬁxed ﬁeld constant multiplication, an operation which
maps poorly to general-purpose processors. However, the
use of T-tables has a number of disadvantages. T-tables sig-
niﬁcantly increase code size, their performance is dependent
on the memory system architecture as well as cache size, and
their use causes key expansion for AES decryption to be-
come signiﬁcantly more complex. As an alternative to the
use of T-tables, it is also feasible to have the processor per-
form all of the AES round transformations. Row-based im-
plementations have been demonstrated to allow for greater
efﬁciency in the implementation of the MixColumns and In-
vMixColumns transformations versus column-based imple-
mentations. However the SubBytes transformation still re-
mains as a bottleneck, requiring separate 256-byte look-up
tables for encryption and decryption [1], [6], [33], [34].
5 Proposed Instruction Set Extensions
the SPARC R(cid:2)
All of the proposed instruction set extensions comply with
V8 instruction model using the Format 3 struc-
ture. All instructions that write to a register execute in one
clock cycle except for the mmul16 instruction which re-
quires two clock cycles. For those instructions that store data
directly into registers contained in the hardware added to the
datapath, the data is available at the start of the next cycle,
after instruction execution has completed. Building the set
of development tools from the source ﬁles is necessary when
extending the instruction set of the LEON2 processor. The
source code archive for BCC v1.0.29c includes speciﬁc mod-
iﬁcations made to two different versions of GNU binutils to
support the LEON2 processor. This research employs the
v2.16.1 binutil. The ﬁle /opcodes/sparc-opc.c was edited to
include op3 values for the instruction set extensions.
All added hardware modules are coded in VHDL and all
inputs and outputs are read from and written to the LEON2
pipelined integer unit (IU) register ﬁle. None of the added
logic circuits rely on external memory for their functional-
ity. A new module was included with the VHDL source for
the LEON2 processor architecture to provide an easy way to
select speciﬁc extensions to be included in the architecture.
For the AES S-Box extensions, the available options are no
S-Boxes, one S-Box, and four S-Boxes. For all other types
of extensions, setting the conﬁguration variables to true in-
cludes extensions into the architecture while a value of false
excludes them from the architecture. All of the added func-
tional units that support the proposed instruction set exten-
sions have been included in the IU. Component declarations
were added for each of the added hardware units and instan-
tiated as part of the arithmetic logic unit. The decode stage
of the IU pipeline sets ﬂags for the instruction set extensions
and generates source register and immediate data. On the
next clock cycle, the execute stage passes the input operands