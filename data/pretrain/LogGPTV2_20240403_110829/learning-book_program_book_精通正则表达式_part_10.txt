限定多选结构的范围，标注量词作用的元素，为反
(.)
括号
向引用“捕获”文本
匹配之前的第一、第二组括号内的字表达式匹配的
V, 2, ...
反向引用
文本
①并非所有版本的egrep都支持
此外，请务必理解以下几点：
各个egrep程序是有差别的。它们支持的元字符，以及这些元字符的确切含义，通常
都有差别—请参考相应的文档（23）。
使用括号的3个理由是：限制多选结构（13）、分组（14）和捕获文本（21）。
字符组的特殊性在于，关于元字符的规定是完全独立于正则表达式语言“主体”的。
---
## Page 59
一家之言
33
多选结构和字符组是截然不同的，它们的功能完全不同，只是在有限的情况下，它们
的表现相同（13)。
排除型字符组同样是一种“肯定断言”（positiveassertion）一-即使它的名字里包含了
“排除”两个字，它仍然需要匹配一个字符。只是因为列出的字符都会被排除，所以
最终匹配的字符肯定不在列出的字符之内（12）。
·-i的参数很有用，它能进行忽略大小写的匹配（15）。
·转义有3种情况：
1.“加上元字符，表示匹配元字符所使用的普通字符（例如*匹配普通的星号）。
2.加上非元字符，组成一种由具体实现方式规定其意义的元字符序列（例如，\)(
next if !s/\b([a-z]+)((?:\s|]+>)+) (\1\b)/\e[7m$1\e[m$2\e[7m$3\e[m/ig;
s/(？：[\e]*\n）+//mg;
#去除未标记的行
S//$ARGV:/mg;
#在行首添加文件名
print;
嗯哼，这就是完整的程序
即便你对Perl有所了解，我也不敢奢望你能完全明白这段程序（至少目前如此）。我希望的
是，这个例子让你看到egrep
外的世界让你有兴趣认识正则表达式的真正能力。
该程序的主要功能依靠3个正则表达式
b（[a-z]+)((？
（b)
（？:[\e]*\n）+
尽管这是一个Perl的例子，但这3个正则表达式可以原封不动地（或者只需要做很少的改
动）应用到许多其他语言中，比如PHP、Python、Java
现在来看这3个表达式，最后的很好理解、但是其他的两个表达式包含我们在egrep中
未见过的玩意儿这是因为Perl与egrep不属于同
个流派，所以某些表示法有所不同，而
且Perl（还包括许多其他现代的工具程序）提供的元字符远远多于egrep。
我们会在这一章
中见到许多例子。
---
## Page 62
36
第2章：入门示例拓展
关于这些例子
AbonttheExamples
本章包括了一些常见的问题-一验证用户的输人数据，处理E-mailheader（电子邮件头），
把纯文本数据转换为超文本格式（HTML），通过这些问题，你将真正见识到正则表达式的
世界。在构造正则表达式时，我会做些尽可能详细的讲解，提供一些启示。在这个过程中，
我们会见到一些egrep没有提供的结构和特性，也会专门花很多篇幅来探讨其他重要的概
念。
在本章的末尾及下面的各章中，我会使用各种语言，包括PHP、Java和VB.NET，但是本
章中我们主要使用的还是Perl。这些语言，当然也包括其他许多语言，对正则表达式的操纵
能力都远远强于egrep，所以使用其中任何一种作为示范都会让我们见到许多有趣的内容。
我选择以Perl开始，主要是因为，在所有流行的语言中Perl对正则表达式的支持很完整，
且易于使用。而且，Per还提供了许多其他紧凑的数据处理结构（data-handlingconstructs)，
能够减少所需的“简单重复劳动”（dirtywork)，以便我们把精力集中到正则表达式上。
第2页出现的文件检查的程序很好地说明了这种能力，我需要用这个程序来确定每个文件
中‘ResetSize’出现的次数与‘SetSize’出现的次数是否一样多。我选择的语言是Perl，
命令如下：
$perl-One'print*$ARGV\n*if s/ResetSize//ig!=s/SetSize//ig'*
（我并不奢望你现在就能明白这条命令一我只希望你能注意到这条命令有多简洁。）
我喜欢Perl，但现在讨论的主题不是Perl。请记住，本章的重点是正则表达式。这有点儿像
选择用Pascal语言作为学习的工具”（注1)。
因为本章并不假设读者已经懂得Perl，所以我会做些必要的讲解，让你明白这些例子（第7
章讲解Per1的本质的细节，它假设读者懂得一些基本的知识）。即使你曾经用过好几门语言，
Perl也可能让你觉得奇怪，因为它的语法极精炼，语意又极丰富。为了让这些例子更清楚，
我不会使用Per提供的这些特性，而是用一种更普通的近乎伪码的风格来展示这些程序。
虽然算不上“避脚”，但这些例子也不符合Peri的编程风格。不过，我们将通过它们认识到
正则表达式的重要作用。
注1：Pascal是一种传统的程序设计语言，设计的初表是为了教学。这个比喻来自WilliamF.Maton
和他的教投。
---
## Page 63
关于这些例子
37
Perl简单入门
A Slhort Introdnction to Perl
Perl是一门功能强大的脚本语言，诞生于20世纪80年代末期，其思想主要来自其他的编程
语言和工具。Perl关于文本处理和正则表达式的许多概念来自两种专业化的语言awk和sed，
它们都非常不同于“传统”的语言，例如C和Pascal。
Perl可以应用于许多平台，包括DOS/Windows、MacOS、OS/2、VMS和Unix。它的文本
处理能力极其强大，是关于Web的处理中最常使用的工具。如果要获得对应你的机器版本
的Perl，请参考www.perl.com。
本书是为Perl的5.8版而写的，不过本章的例子可以在5.005以后的版本上使用。
现在来看一个简单的例子：
Scelsius = 30;
print"ScelsiusCis$fahrenheitF.\n"；#返回摄氏和华氏温度
执行这段程序，结果是：
30C is 86 F.
的文本（在本例中只保存了数值）。从到行尾都是注释。
如果你曾经使用过C、C#或者Java、VB.NET，你可能无法理解在Perl中变量居然能够出现
在双引l号包围的字符串中。在字符串“ScelsiusCis$fahrenheitF.\n”中，每个变
量都会被它的实际值所取代。在本例中，结果就是打印出来的字符串（n代表换行）。
Perl也提供了跟其他流行的语言类似的控制结构：
$celsius = 20;
while ($celsius ：#从用户处接受一个输入
chomp（Scelsius）；#去摔Scelsius后面的换行符
if （$celsius =-m/^[0-9]+S/）{
$fahrenheit=（Scelsius*9/5）+32;#计算华氏温度
print “$celsius C is $fahrenheit F\n*;
}else（
print*Expecting a number,soI don't understand\*$celsius\*.\n*;
）
请注意最后的print语句有两个转义的双引号，它们的作用并不是标记引用字符串的边界。
对大多数语言的文字字符串（literalstring）来说，有时候需要转义某些字符，做法跟正则表
达式中元字符的转义很相似。在Perl中，字符串与正则表达式的区别并非很重要，但是在
（）丰一，中
更详细地讨论了这个问题（VB.NET是个明显的例外，在那里转义双引号用‘"’而不是
()。
如果我们把这段程序保存为c2f，则运行结果如下：
perl-wc2f
Enter a temperature in Celsius:
22
22 C is 71.599999999999994316 F
哎呀，看来（至少在某些系统上），Perl的简单的print并不能很好地处理浮点数。
---
## Page 66
40
第2章：入门示例拓展
我不想在本章中讨论Perl的细节，但是我告诉你用printf（“格式化输出（printformatted）”）
可以解决这个问题：
printf *%.2fC is &.2f F\n",$celsius，Sfahrenheit;
这里的printf类似C语言中的printf，或者Pascal、Tcl、elisp和Python中的format。
它不会更改变量的值，而只是改变显示的方式。现在的结果好看多了：
Enter a temperature in Celsius:
22