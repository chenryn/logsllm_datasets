8       if(!EnablePrivilege(SE_DEBUG_NAME)
9          || !EnsureVersion(5,1)
10         || !GetSysDbgAPI())
11      {
12         printf("Failed in initialization.\n");
13         return E_FAIL;
14      }
15      memset(&msr,0,sizeof(MSR_STRUCT));
16    
17      msr.MsrNum=DEBUGCTRL_MSR;
18      msr.MsrLo|=BTF;
19      WriteMSR(msr);
20    
21      //以下代码将全速运行
22      m=10,n=2;
23      m=n*2-1;
24      if(m==m*m/m)
25        m=1;
26      else
27      {
28        m=2;      
29      }
30      //一次可以单步到这里
31      m*=m;
32    
33      if(ReadMSR(msr))
34      {
35        PrintMsr(msr);
36      }
37      else
38        printf("Failed to ReadMSR().\n");
39    
40      return S_OK;
41   }
在VC6的IDE环境下（系统的CPU应该是P6或更高），先在第22行
设置一个断点，然后按F5快捷键运行到这个断点位置。第19行是用来启
用按分支单步执行功能的，即设置起BTF标志。接下来，我们按F10快
捷键单步执行，会发现一下子会执行到第31行，即从第22行单步一次就
执行到了第31行，这便是按分支单步执行的效果。那么，为什么会执行
到第31行呢？按照分支到分支单步执行的定义，CPU会在执行到下一次
跳转发生时停止。对于我们的例子，CPU在执行第22行对应的第一条汇
编指令时，CPU会检测到TF标志（因为我们是按F10快捷键单步执行
的，所以VC6会帮助我们设置TF标志）。此外，P6及以后的IA-32 CPU
还会检查BTF标志，当发现BTF标志也被置起时，CPU会认为当前是在
按分支单步执行，所以会判断是否有跳转发生。需要解释一下，这里所
说的有跳转发生，是指执行当前指令的结果导致程序指针的值发生了跳
跃，是与顺序执行的逐步递增相对而言的。值得说明的是，如果当前指
令是条件转移指令（比如JA、JAE、JNE等），而且转移条件不满足，
那么是不算有跳转发生的，CPU仍会继续执行。
继续我们的例子，因为第22行的第一条汇编指令根本不是分支指
令，所以CPU会继续执行。以此类推，CPU会连续执行到第24行的if语
句对应的最后一条汇编指令jne（见清单4-8）。因为这条语句是条件转
移语句而且转移条件满足，所以执行这条指令会导致程序指针跳越。当
CPU在执行这条指令的后期检查TF和BTF标志时，会认为已经满足产生
异常的条件，在清除TF和BTF标志后，就产生单步异常中断到调试器。
因为EIP总是指向即将要执行的指令，所以VC6会将当前位置设到第31
行，而不是第24行。也就是说，中断到调试器时，分支语句已经执行完
毕，但是跳转到的那条语句（即清单4-7中的第31行）还没有执行。
清单4-8 第24行的汇编代码
1    128:     if(m==m*m/m)
2    0040DBBB 8B 45 FC          mov     eax,dword ptr [ebp-4]
3    0040DBBE 0F AF 45 FC       imul    eax,dword ptr [ebp-4]
4    0040DBC2 99                cdq
5    0040DBC3 F7 7D FC          idiv    eax,dword ptr [ebp-4]
6    0040DBC6 39 45 FC          cmp     dword ptr [ebp-4],eax
7    0040DBC9 75 09             jne     main+0B4h (0040dbd4)
对以上过程还有几点需要说明。
如果在从第22行执行到第24行的过程中，有中断或异常发生，那么
CPU也会认为停止单步执行的条件已经满足。因此，按分支单步执行的
全称是按分支、异常和中断单步（single-step on branches, exceptions and
interrupts）执行。
由于只有内核代码才能访问MSR寄存器（通过RDMSR和WRMSR
指令），因此在上面的例子中，在WriteMSR()函数中使用了一个未公开
的API ZwSystemDebugControl()来设置BTF标志。
在WinDBG调试器调试时，执行tb命令便可以按分支单步跟踪。但
是当调试WoW64程序（运行在64位Windows系统中的32位应用程序）
时，这条命令是不工作的，WinDBG显示Operation not supported by
current debuggee error in 'tb'（当前的被调试目标不支持此操作）。另
外，因为需要CPU的硬件支持，在某些虚拟机里调试时，WinDBG也会
显示这样的错误提示。
4.4 实模式调试器例析
在前面几节中，我们介绍了IA-32 CPU的调试支持，本节将介绍两
个实模式下的调试器，看它们是如何利用CPU的调试支持实现各种调试
功能的。
4.4.1 Debug.exe
20世纪80年代和90年代初的个人电脑大多安装的是DOS操作系统。
很多在DOS操作系统下做过软件开发的人都使用过DOS系统自带的调试
器Debug.exe。它体积小巧（DOS 6.22附带的版本为15718字节），只要
有基本的DOS环境便可以运行，但它的功能非常强大，具有汇编、反汇
编、断点、单步跟踪、观察/搜索/修改内存、读写IO端口、读写寄存
器、读写磁盘（按扇区）等功能。
在今天的Windows系统中，仍保留着这个程序，它位于system32目
录下。在运行对话框或命令行中都可以通过输入“debug”来启动这个经
典的实模式调试器。Debug程序启动后，会显示一个横杠，这是它的命
令提示符。此时就可以输入各种调试命令了，Debug的命令都是一个英
文字母（除了用于扩展内存的X系列命令），附带0或多个参数。比如
可以使用L命令把磁盘上的数据读到内存中，使用G命令让CPU从指定
的内存地址开始执行，等等。输入问号（？）可以显示出命令清单和每
个命令的语法（见清单4-9）。
清单4-9 Debug调试器的命令清单
-?
assemble     A [address]                     ;; 汇编*
compare      C range address                 ;; 比较两个内存块的内容
dump         D [range]                       ;; 显示指定内存区域的内容
enter        E address [list]                ;; 修改内存中的内容
fill         F range list                    ;; 填充一个内存区域
go           G [=address] [addresses]        ;; 设置断点并从=号的地址执行**
hex          H value1 value2                 ;; 显示两个参数的和及差
input        I port                          ;; 读指定端口
load         L [address] [drive] [firstsector] [number] ;; 读磁盘数据到内存
move         M range address                 ;; 复制内存块
name         N [pathname] [arglist]          ;; 指定文件名，供L和W命令使用
output       O port byte                     ;; 写IO端口
proceed      P [=address] [number]           ;; 单步执行，类似于Step Over
quit         Q                               ;; 退出调试器
register     R [register]                    ;; 读写寄存器
search       S range list                    ;; 搜索内存
trace        T [=address] [value]            ;; 单步执行，类似于Step Into
unassemble   U [range]                       ;; 反汇编
write        W [address] [drive] [firstsector] [number] ;; 写内存数据到磁盘
allocate expanded memory    XA [#pages]      ;; 分配扩展内存
deallocate expanded memory    XD [handle]    ;; 释放扩展内存
map expanded memory pages    XM [Lpage] [Ppage] [handle];; 映射扩展内存页
display expanded memory status  XS           ;; 显示扩展内存状态
* 也就是将用户输入的汇编语句翻译为机器码，并写到内存中，地
址参数用来指定存放机器码的起始内存地址。
** 如果不指定“=号”参数，那么便从当前的CS:IP寄存器的值开始执
行。第二个参数可以是多个地址值，调试器会在这些地址的内存单元替
换为INT 3指令的机器码0xCC。
上述代码中的第一列是命令的用途（主要功能），第二列是命令的
关键字，不区分大小写，后面是命令的参数。双分号后的部分是作者加
的注释。
纵观这个命令清单，虽然命令的总数不多，不算后面的4个用于扩
展内存的命令，只有19个，但是这些命令囊括了所有的关键调试功能。
其中L和W命令既可以读写指定的扇区，也可以读写N命令所指定
的文件名。以下是Debug程序的几种典型用法。
当启动Debug程序时，在命令行参数中指定要调试的程序，如debug
debuggee.com。这样，Debug程序启动后会自动把被调试的程序加
载到内存中。因为是实模式，所以它们都在一个内存空间中。我们
稍后再详细讨论这一点。
不带任何参数启动Debug程序，然后使用N命令指定要调试的程
序，再执行L命令将其加载到内存中，并开始调试。
不带任何参数启动Debug程序，然后使用L命令直接加载磁盘的某
些扇区，比如当调试启动扇区中的代码和主引导扇区中的代码
（MBR）时，通常使用这种方法。
不带任何参数启动Debug程序，然后使用它的汇编功能，输入汇编
指令，然后执行，这适用于学习和试验。
Debug程序是8086 Monitor程序的DOS系统版本，我们将在介绍8086
Monitor之后一起介绍它们的关键实现。
4.4.2 8086 Monitor
DOS操作系统的最初版本是由被誉为“DOS之父”的Tim Paterson先
生设计的。Tim Paterson当时就职于Seattle Computer Products公司
（SCP），他于1980年4月开始设计，并将第一个版本QDOS 0.10于1980
年8月推向市场。
在如此快的时间内完成一个操作系统，速度可以说是惊人的。究其
原因，当然离不开设计者的技术积累。而其中非常关键的应该是Tim
Paterson从1979年开始设计的Debug程序的前身，即8086 Monitor。
8086 Monitor是与SCP公司的8086 CPU板一起使用的一个调试工
具。表4-6列出了1.4A版本的8086 Monitor的所有命令。
表4-6 8086 Monitor的命令（1.4A版本）
命  令
功  能
B ...
启动，读取磁盘的0道0扇区到内存并执行
D |
显示指定内存地址或区域的内容
E  
编辑内存
F  
填充内存区域
G ...
设置断点并执行
I 
从I/O端口读取数据
M  
复制内存块
O  
向I/O端口输出数据
R [REGISTER NAME]
读取或修改寄存器
S  
搜索内存
T [HEX4]
单步执行
从以上命令可以看出，8086 Monitor已经具有了非常完备的调试功
能。把这些命令与清单4-9所示的Debug程序的命令相比，可以发现，大
多数关键命令都已经存在了。
8086 Monitor是在1979年年初开始开发的，其1.4版本则是在1980年
2月开发的。Tim Paterson先生在给作者的邮件中讲述了他最初开发8086
Monitor时的艰辛。因为没有其他调试器和逻辑分析仪可以使用，他只
好使用示波器来观察8086 CPU的信号，以此来了解CPU的启动时序和工
作情况。因此，开发8086 Monitor不仅为后来开发DOS准备了一个强有
力的工具，还让Tim Paterson对8086 CPU和当时的个人计算机系统了如
指掌。这些基础对于后来Tim Paterson能在两个多月里完成DOS的第一
个版本起到了重要作用。
事实上，Windows NT的开发团队也是在开发的初期就开发了KD调
试器，并一直使用这个调试器来辅助整个开发过程。我们将在第6篇详
细介绍KD调试器。
4.4.3 关键实现