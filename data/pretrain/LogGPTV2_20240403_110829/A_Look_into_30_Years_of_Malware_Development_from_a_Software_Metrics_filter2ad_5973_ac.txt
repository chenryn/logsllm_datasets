# A Look into 30 Years of Malware Development

## 1. Introduction
Our final dataset consists of 151 malware samples, each tagged with a year and a broad category. The year corresponds to the development date if stated by the source, or the first observed date in the wild. Categories include Virus (V), Worm (W), MacroVirus (M), Trojan (T), Botnet (B), and Remote Access Trojan (RAT) (R). We acknowledge that this classification is imprecise, as many modern malware examples exhibit multiple capabilities. For instance, most Botnets and RATs include bots that can be considered Trojans, Backdoors, or Spywares, and some may also show Worm features. Similarly, some modern viruses have Worm-like propagation strategies or behave like standalone Trojans.

## 2. Dataset Distribution
Figure 1 shows the distribution of the 151 samples by year. Approximately 62% (94 samples) are from 1995-2005, 27 samples from 2006-2015, and 28 samples from 1985-1994. There are also two samples from 1975 and 1982. The largest category is Viruses (92 samples), followed by Worms (33 samples), Trojans (11 samples), RATs (9 samples), MacroViruses (3 samples), and Botnets (3 samples). A full listing of the 151 samples is provided in Table 3.

## 3. Analysis
This section describes our analysis of the malware source code dataset. It covers source code analytics (Section 4.1), development cost estimation (Section 4.2), complexity and maintainability metrics (Section 4.3), and a comparison with benign software (Section 4.4).

### 3.1 Source Code Analytics
We discuss various statistics obtained from the source code of the malware samples.

#### 3.1.1 Number of Source Code Files
Figure 2a shows the distribution over time of the number of files comprising the source code of different malware samples. Until the mid-1990s, most malicious code consisted of a single file, typically written in assembly. From the late 1990s onwards, there is an exponential growth in the number of files per sample. For example, Back Orifice 2000, GhostRAT, and Zeus, all from 2007, contain 206, 201, and 249 source code files, respectively. After 2010, no sample comprises a single file. Linear regression yields a coefficient of 1.17, indicating a yearly growth rate of 17%, or doubling every 4.5 years.

#### 3.1.2 Source Code Size
Figure 2d shows the distribution over time of the number of physical source lines of code (SLOC) for all samples. Up to the mid-1990s, viruses and early worms rarely exceeded 1,000 SLOC. Between 1997 and 2005, most samples contained several thousand SLOCs, with a few exceptions. Since 2007, many samples exhibit SLOC counts in the tens of thousands. Linear regression yields a coefficient of 1.16, indicating a yearly growth rate of 16%, or doubling every 4.7 years.

#### 3.1.3 Function Points Estimates
We used SLOC-to-function-point ratios to estimate function points (FP) for the malware samples. The conclusions in terms of sustained growth are similar. Starting in 1990, there is roughly an increase of one order of magnitude per decade. Linear regression yields a coefficient of 1.19, indicating a yearly growth rate of 19%, or doubling every 4 years.

#### 3.1.4 Density of Comments
Figure 2c shows the comments-to-code ratios for the malware samples. The average ratio is 18.83%, with a standard deviation of 23.44% and a median value of 12.05%. Some outliers, such as W2KInstaller (2000) and OmegaRAT (2014), show extremely high or low comment ratios.

#### 3.1.5 Programming Languages
Figure 3a and 3b show the distribution over time of the number of different languages used to develop each malware sample. Assembly was prevalent until the mid-2000s, followed by C/C++ and other "visual" environments like Visual Basic and Delphi. From 2005, web interfaces and server-side functionality in PHP and Python became common. From 2012 onwards, the distribution of languages is approximately uniform, reflecting the heterogeneity of technologies used in modern malware.

### 3.2 Cost Estimation
Figure 4 shows the COCOMO estimates for the effort, time, and team size required to develop the malware samples. All samples were considered organic projects. The evolution over time is clearly exponential, with values roughly growing one order of magnitude each decade. Linear regression confirms this, yielding a coefficient of 1.17, indicating a yearly growth rate of 17%, or doubling every 4.5 years.

### 3.3 Complexity and Maintainability
Figure 5a shows the average cyclomatic complexity per function for each analyzed sample. Most samples have complexities between 2 and 5, with only DW (2002) exhibiting a higher complexity of around 7. Figure 5b shows the maintainability index (MI) values for each sample, generally high with most samples having an MI higher than 50.

### 3.4 Comparison with Regular Software
To better appreciate the significance of the figures, we compared them to those of nine open-source projects: IPTables, Snort, ClamAV, gcc, Apache, Git, Octave, Cocos2d-x, and Bash. The results are shown in Table 4, which includes COCOMO estimates, function points, cyclomatic complexity, comment-to-code ratios, and maintainability indices.

## 4. Conclusion
Our analysis provides insights into the evolution of malware over the past 30 years, highlighting the increasing complexity and modularity of modern malware. The data suggest that malware development has become more sophisticated, requiring larger teams and more resources. This trend underscores the need for robust and adaptive cybersecurity measures to counter these evolving threats.