debugging 
producibility 
of the bug. 
time they may not even be sure  that 
and might not report it  at all. 
bugs on their 
the bug in 
due to small differences 
in the 
to repro­
environment 
Third, even if developers manage 
tools and methods might interfere 
since some 
with the re­
it might not be possible 
to reproduce 
debugging 
methods, 
it is 
re­
on concurrency 
database 
A previous 
and non-concurrency 
paper 
bugs of three 
systems including 
database 
In this work we focused our attention 
bugs found in the MySQL application. 
compared concurrency 
different 
systems exhibited 
cluded that the three different 
very similar 
faults (i.e., 
a bit over half of the bugs led to non-crash faults 
database 
lieve that the bug patterns 
apply to other database 
to confirm whether this is in fact the case. 
MySQL [32]. It con­
a 
we found in MySQL might also 
While not conclusive, 
of crash vs. non-crash 
More analyses 
proportion 
are required 
this leads us to be­
system). 
systems. 
in each 
On the other hand, it seems less likely that these results 
can be generalized 
to arbitrary 
multi-threaded 
applications. 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
228 
DSN 2010: Fonseca et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:53 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
can be very different 
(e.g., 
some have graph­
while others do not, some 
model while others do not). As an ex­
applications 
the data collected 
applications, 
in another study [22] that 
about half of the deadlocks 
only 1 resource 
while almost all 
found in Mozilla involved 
2 or more re­
different 
Applications 
ical user interfaces 
use the client-server 
ample, from 
compared 
found in MySQL involved 
of the deadlocks 
sources. 
tions, we believe 
are unlikely 
applications. 
Given the very different 
characteristics 
of applica­
that the conclusions 
that we present 
here 
and focused 
recovery 
tech­
from ours. They analyzed 
all 
MySQL) but the focus of 
(including 
on determining 
source applications 
their work was quite different 
bugs (among which only 12 were concurrent) 
exclusively 
niques such as process pairs 
them. In their case, concurrency 
sible type of bug that fell into the category 
techniques 
narrow class of bugs by limiting 
bugs, but provide 
tion several 
whether generic 
would be effective 
analysis 
of these bugs. 
characteristics 
are effective. 
In contrast, 
ourselves 
a broader 
for which such 
we focus on a more 
bugs were only one pos­
to concurrency 
taking into considera­
in tolerating 
to be generalizable 
to arbitrary 
multi-threaded 
The number of bugs analyzed 
in this study is compara­
stud­
However, 
this limits 
our results 
of bias. First, 
our 
in the results, 
that is difficult 
suffer from two sources 
terms, is small. Obviously, 
but at the same time it is a 
to overcome due to the time re­
in other related 
it is worth noting that 
ble to the number of bugs analyzed 
ies [11,22,32]. 
could potentially 
sample, in 
absolute 
the confidence 
limitation 
quired to gather the data and the amount of data available. 
Second, we 
(This is a limitation 
only analyzed 
and fixed. This 
means we did not account for bugs that were not fixed (or 
even found), 
We believe 
given the nature of bugs in general 
the nature of concurrency 
are desirable 
bugs. 
nor bugs that were fixed but not documented. 
that these biases are very difficult 
to improve our understanding 
bugs that were documented 
bugs. Nevertheless, 
but specifically 
given 
shared by previous 
of concurrency 
more studies 
to overcome 
studies.) 
Farchi et al. analyzed 
concurrency 
bugs, but by artifi­
concurrency 
them [14]. The methodology 
cially creating 
the study was to ask programmers 
taining 
bugs, which 
bugs that are representative 
trast, 
maintained 
a database 
application. 
to write programs 
con­
may not lead to 
of real world problems. 
In con­
of bugs in a widely used, well­
we analyze 
arguably 
adopted by 
bugs that 
Recently 
the authors 
Lu et al. [22] studied 
real concurrency 
the re­
analyzed 
a total 
bug report databases, 
of the causes of concurrency 
bugs. Their study focused on several 
were found in four open source applications.  Using 
spective 
of 105 concurrency 
aspects 
their effects 
deadlocks 
using a very similar 
to analyze, 
the effects 
bugs are latent 
but provide 
of concurrency 
or not. We build on this study, in particular 
or not, or what type of failures 
whether concurrency 
a complementary 
angle by studying 
whether they caused 
to determining 
bugs, and the study of 
methodology 
for deciding 
they cause). 
was limited 
bugs (e.g., 
which bugs 
by 
6 Related 
Work 
Given the importance 
of software 
prevalence 
about bugs have previously 
of bugs in software 
been undertaken. 
and the 
reliability 
in general,  many 
studies 
There is a large body of literature 
about the propaga­
[24] of bugs in source code. 
the behavior 
reliability 
(e.g., 
tion [33] and even prediction 
Some of these studies 
understand 
software 
files are most prone to errors). 
tary to the work presented 
on a specific class of bugs (i.e., 
understanding their 
consequences. 
use the revision 
of programmers 
which components 
control 
and its effects 
or source code 
system to 
on 
This work is complemen­
in this paper, which is focused 
concurrency 
bugs) and on 
In  a previous 
paper, researchers 
analyzed 
the conse­
database 
systems [32]. 
between con­
not distinguish 
and non-concurrency 
quences of bugs for three different 
However the authors  did 
currency 
whether they caused crash or Byzantine 
paper was focused on presenting 
instead 
provide 
focus on concurrency 
bugs. 
of being focused on studying 
a detailed 
of the effects 
analysis 
bugs, and only evaluated 
faults (since that 
a replication 
architecture, 
bugs). In contrast, 
we 
of the bugs and we 
Chandra et al. [11] looked at bug databases 
of three open-
There also exist various 
of bug characteristics 
studies 
on several aspects 
systems focusing 
in software 
bugs [12,16,21,25,31]. In contrast, 
specifically 
ing to analyze. 
of generic 
our study focuses 
bugs, which are more challeng­
on concurrency 
Recently 
Sahoo et al. have been trying 
to understand 
of bugs [29]. While the main focus of their 
the 
reproducibility 
study was not concurrency 
concurrency 
to characterize 
bugs from non-concurrency 
bugs when trying 
their reproducibility. 
bugs, the authors 
distinguished 
Finally, 
there exist many proposals 
for handling 
concur­
re­
They include 
approaches 
approaches 
to improving 
not only different 
techniques, 
software 
to avoid bugs [17], to 
from 
rency bugs. These represent 
but also very different 
liability. 
find bugs [13], to mask bugs [32] and even to recover 
bugs [9]. Because concurrency 
dependent 
ing chosen by the operating 
that specifically 
turbing 
ings. Our work is complementary 
to guide and motivate 
techniques 
on the input, are also dependent 
bugs by artificially 
[7] thread interleav­
in that it has the potential 
on the interleav­
system, there are approaches 
handle concurrency 
and approaches. 
the development 
[6], controlling 
bugs, in addition 
of these kinds of 
limiting 
[23] or 
to being 
dis­
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
229 
DSN 2010: Fonseca et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:53 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
7 Conclusion 
[10] M. Castro and B. Liskov. Practical 
byzantine 
of Operating 
System Design and Implementation 
fault tolerance. 
(OSDI), 1999. 
In Proc. 
Second, latent bugs 
provide 
that detect 
[20] T. Kelly, Y. Wang, S. Lafortune, 
concur­
99(1), 2009. 
[21] Z. Li, L. Tan, X. Wang, S. Lu, Y. Zhou, and C. Zhai. Have things 
rency bugs with control engineering. 
and S. Mahlke. Eliminating 
IEEE Computer, 
in the development 
Concurrency 
bugs pose a challenge 
Concurrency 
applications. 
of reliable 
that is likely to become more and more prevalent 
velopment life 
rent to take advantage 
cycle as applications 
of parallelism 
bugs are a type of bug 
become more concur­
in the hardware. 
we pre­
of this problem, 
To gain a better understanding 
in the de­
bugs in MySQL. In contrast 
we focused on the effects of concur­
sented a study of concurrency 
to previous 
rency bugs rather than on their causes. 
enabled 
how bugs manifest 
Studying 
studies, 
findings, 
interesting 
that  silently 
corrupt 
become externally 
latent 
such as a high prevalence 
data structures 
us to produce some 
bugs 
but may take longer to 
and a strong correlation 
of latent 
visible, 
between 
bugs and bugs that cause Byzantine 
failures. 
our study can open interesting 
In particular, 
we intend to develop 
avenues for 
tools that 
the issue of latent bugs from two different 
ways to find these bugs dur­
better 
We intend to develop better tools 
angles. 
the subtle corruption 
of internal 
state caused by 
we need to develop 
We hope that 
future research. 
address 
First, 
ing the course of testing. 
for catching 
the kinds of bugs we analyzed. 
an interesting 
them and heal the service 
seen by clients. 
opportunity 
to develop techniques 
state before the buggy output is 
Acknowledgments 
We are grateful 
mous reviewers. 
provided 
by FCT. 
for the feedback 
provided 
by the anony­
Pedro Fonseca was supported 
by a grant 
References 
[I] Azul Systems - Industry's 
Leading Azul Compute Appliances. 
http://www .azulsystems.com/products/compute 
appliance. htm. 
-
[2] GeForce GTX 295. http://www .nvidia.com/object/ 
product_geforce_9tx_295_us.html. 
[3] Intel Previews Intel Xeon 'Nehalem-EX' Processor. http: 
//www .intel.com/pressroom/archive/releases/ 
2009/20090526comp.htm. 
[4] MySQL :: Market Share. http://www .mysql.com/ 
why-mysql/marketshare/. 
[5] MySQL:: The world's most popular open source database. 
http: 
/ /www.mysql.com. 
[6] Y. Ben-Asher, 
Y. Eytani, E. Farchi, and S. Ur. Producing scheduling 
programs to fail. In Proc. of Parallel 
and 
that causes concurrent 
Distributed 
Systems: 
(PADTAD), 2006. 
[7] R. L. Bocchino, V. S. Adve, S. V. Adve, and M. Snir. Parallel 
pro­
on 
In Proc. of Workshop 
and Debugging 
by default. 
Testing 
gramming must be deterministic 
Hot Topics in Parallelism 
(HotPar), 
2009. 
[8] Y. Brun and M. D. Ernst. Finding latent code errors via machine 
learning 
over program executions. 
ence on Software Engineering 
(ICSE), 
2004. 
In Proc. of International 
Confer­
[9] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and A. Fox. Mi­
croreboot 
System Design and Implementation 
for cheap recovery. 
- A technique 
(OSDI), 2004. 
[11] S. Chandra and P. M. Chen. Whither generic recovery from appli­
software. In Proc. 
cation faults? A fault study using open-source 
of International 
2000. 
on Dependable 
Conference 
Systems and Networks, 
[12] A. Chou, 1. Yang, B. Chelf, S. Hallem, and D. Engler. An empir­
on 
systems errors. In Proc. of Symposium 
ical study of operating 
Operating 
System Principles 
(SOSP), 2001. 
[13] D. Engler and K. Ashcraft. RacerX: Effective, 
static detection 
of 
race conditions 
37(5):237-252,2003. 
and deadlocks. SIGOPS Operating 
Systems Review, 
[14] E. Farchi, Y. Nir, and S. Ur. Concurrent 
bug patterns 
and Distributed 
Processing 
and how to test 
Sympo­
them. In International 
sium (IPDPS), 
Parallel 
2003. 
[15] 1. Gray. Why do computers stop and what can be done about it? 
of Reliability 
in Distributed 
Software and Database 
In Proceedings 
Systems, 
1986. 
[16] W. Gu, Z. Kalbarczyk, 
Ravishankar, 
K. Iyer, and Z. Yang. Charac­
of linux kernel behavior under errors. In Proc. of Interna­
terization 
tional Conference 
on Dependable 
Systems 
and Networks, 
2003. 
[l7] M. Herlihy and 1. E. B. Moss. Transactional 
memory: Architectural 
support for lock-free 
ture News, 21(2):289-300, 
data structures. 
1993. 
SIGARCH Computer 
Architec­
[l8] D. Hovemeyer and W. Pugh. Finding bugs is easy. SIGPLAN Notices, 
39(12):92-106,2004. 
[l9] H. lula, D. Tralamazza, 
C. Zamfir, and G. Candea. Deadlock im­
munity: Enabling systems to defend against deadlocks. 
Operating 
System Design and Implementation 
(OSDI), 2008. 
In Proc. of 
changed now?: An empirical 
open source software. 
jor Improving Software Dependability 
(ASID), 2006. 
study of bug characteristics 
in modem 
In Proc. of Architectural 
and System Support 
[22] S. Lu, S. Park, E. Seo, and Y. Zhou. Learning from mistakes: A 
study on real world concurrency 
bug characteristics. 
comprehensive 
SIGARCH Computer 
[23] M. Musuvathi, 
Architecture 
News, 36(1):329-339,
2008. 
S. Qadeer, T. Ball, G. Basler, P. A. Nainar, and 
in concurrent 
pro­
heisenbugs 
I. Neamtiu. Finding and reproducing 
grams. In Proc. of Operating 
(OSDI),2008. 
System Design and Implementation 
[24] S. Neuhaus, T. Zimmermann, C. Holler, and A. Zeller. Predicting 
vulnerable 
software components. 
puter and communications 
In Proc. of Conference 
on Com­
(CCS), 2007. 
security 
[25] T. Ostrand, E. Weyuker, and R. Bell. Predicting 
number of faults in large software systems. IEEE Transactions 
Software Engineering 
(TSE), 31(4):340-355, 
the location 
and 
on 
April 2005. 
O'Reilly Media, Inc., 
[26] S. Pachev. Understanding 
MySQL internals. 
2007. 
[27] S. Park, S. Lu, and Y. Zhou. CTrigger: 
Exposing atomicity 
violation 
bugs from their hiding places. In Proc. of International 
on Architectural 
Support 
(ASPLOS), 
ing Systems 
jor Programming 
Languages 
Conference 
and Operat­
2009. 
[28] F. Qin, 1. Tucek, 1. Sundaresan, 
allergies-A 
Symposium 
safe method to survive software failures. 
(SOSP), 2005. 
on Operating 
System Principles 
and V. S. Adve. An empirical 
[29] S. K. Sahoo, 1. Criswell, 
and Y. Zhou. Rx: Treating bugs as 
In Proc. of 
reported 
diagnosis. 
bugs in server software with implications 
Tech. Report 2142/13697, 
study of 
for automated bug 
2009. 
University 
A tutorial. IEEE Computer, 
of Illinois, 
[30] B. Schroeder. On-line monitoring: 
28(6):72-78, lun 1995. 
[31] M. Sullivan and R. Chillarege. 
A comparison 
in database management systems and operating 
of International 
1992. 
Symposium 
on Fault-Tolerant 
of software defects 
systems. In Proc. 
(FTCS), 
Computing 
[32] B. Vandiver, 
ing byzantine 
scheduling. 
barrier 
ciples (SOSP), 2007. 
H. Balakrishnan, 
faults in transaction 
In Proc. of Symposium 
processing 
systems using commit 
System Prin­
on Operating 
B. Liskov, and S. Madden. Tolerat­
In Proc. of Operating 
[33] L. Voinea and A. Telea. How do changes in buggy mozilla files prop­
agate? In Proc. of Symposium 
2006. 
on Software Visualization 
(SoftVis), 
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
230 
DSN 2010: Fonseca et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:53 UTC from IEEE Xplore.  Restrictions apply.