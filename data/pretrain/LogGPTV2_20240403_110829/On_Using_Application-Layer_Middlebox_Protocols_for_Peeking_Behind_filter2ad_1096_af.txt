† Header missing although host identiﬁed to be a proxy.
nections, with 37 % being deﬁnitely vulnerable. While there
was no signiﬁcant difference between the amount of potentially
vulnerable SOCKS and HTTP proxies, open SOCKS proxies
were more likely deﬁnitely vulnerable than HTTP proxies.
To conclude, 40 % of all open proxies in any protocol
claimed to result in a successful connection creation on local-
host on any of the tested ports, while 23 % were also returning
protocol-conforming responses for our probes. We now analyze
services hosted on these deﬁnitely vulnerable proxies.
Based on the heuristics deﬁned in Section IV-C3,
4) Services Hosted on Vulnerable Proxy Systems: To un-
derstand more about the services behind deﬁnitely vulnerable
hosts, we parse and categorize the responses we received from
vulnerable hosts. The summary of our categorization is seen in
Table X. Note that the absolute numbers differ from Table VI
as the table does not differentiate between SOCKS versions.
the
most widely exposed service was SSH with over half of the
vulnerable proxies responding with a valid SSH banner. Most
commonly seen implementations were different versions of
OpenSSH on different operating systems, but there were also
over a hundred hosts with Mikrotik’s SSH implementation
(ROSSSH). The second most common was HTTP on 36 % of
vulnerable proxies, the most commonly exposed service being
the router conﬁguration interface of Mikrotik routers. When
comparing these results to those from SSH, it is interesting
to note that over 1,200 SSH banners were from Ubuntu-based
devices, followed by over 700 with a generic and ~300 with
the Debian banner, so it
just Mikrotik routers that
are exposing these services. Among other HTTP exposing
services were some default sites of common web servers
or frameworks. On the other hand, SMTP and FTP were
not so common—merely 432 SMTP services and 214 FTP
servers were exposed. Telnet was the least seen service (only
“CCProxy Telnet” on 80 hosts), so we omit it in the table.
is not
are left with a total of 8,909 CONNECT-supporting HTTP
proxies, from which 74 % signaled with status “200” that they
accepted connections to the localhost making them potentially
vulnerable. Additionally, 40 % of these CONNECT-supporting
proxies delivered an expected payload, marking them as deﬁ-
nitely vulnerable, adding up to 21 % of all open HTTP proxies
being vulnerable.
a) SOCKS Proxies: From ~1,500 (5 %) open SOCKS4
proxies, 42 % claimed to allow connections to the localhost,
and 32 % were deﬁnitely vulnerable. In comparison, out of
~1,400 SOCKS5 proxies, over half (55 %) allowed such con-
5) Complimentary Crawling for Proxies: During our two
weeks of crawling (end of January until the beginning of
February, 2019) we collected in total 96,863 (cid:104)host, port(cid:105)
combinations from 56,861 different IP addresses using 20,438
different ports. In total, merely 16 % (~16,000) of proxies were
open, hosted on over 5,500 different ports. While the majority
of the proxies were HTTP proxies (88 %), there were also 14 %
of SOCKS proxies (10 % SOCKS4, 3 % SOCKS5, 677 proxies
supporting both versions). In total, 67 % (~11,000) of all
functioning proxies supported HTTP CONNECT or SOCKS,
making them candidates for our attacks. As can be seen in
Table XI, only 9 % of open SOCKS proxies were hosted
on the standard port 1080. Out of all open SOCKS proxies
12
TABLE X.
SERVICES HOSTED ON VULNERABLE PROXY SYSTEMS
Internet-wide (23 %, 4,545 out of 19,723 vulnerable)
HTTP
SSH
SMTP
Postﬁx
CCProxy
Sendmail
Exim
(cid:104)Other(cid:105)
Postﬁx
Exim
Sendmail
CCProxy
(cid:104)Other(cid:105)
243
76
58
55
17
449
470
31
14
6
4
525
FTP
MikroTik
vsFTPd
(cid:104)Other(cid:105)
ProFTPD
Pure-FTPd
Microsoft FTP
Filezilla
wuftpd
100 Mikrotik Conﬁg
36
32
29
24
14
10
1
(cid:104)Other(cid:105)
Apache2 Default
Bootstrap Theme
IIS default
nginx default
Squid error page
OpenSSH (Ubuntu)
OpenSSH
OpenSSH (Debian)
ROSSH
OpenSSH (Raspbian)
OpenSSH (*BSD)
(cid:104)Other(cid:105)
OpenSSH (Mikrotik)
1,144
192
165
66
42
24
3
1,636
1,252
727
293
115
19
13
6
2
2,427
Total
246
Crawled Proxies (19 %, 2,961 out of 15,832 vulnerable)
MikroTik
ProFTPD
vsFTPd
(cid:104)Other(cid:105)
Pure-FTPd
Filezilla
Microsoft FTP
64 Mikrotik Conﬁg
15
13
13
13
5
2
(cid:104)Other(cid:105)
Apache2 Default
nginx Default
IIS Default
Bootstrap Theme
Squid error page
Total
125
OpenSSH
OpenSSH (Ubuntu)
OpenSSH (Debian)
ROSSH
OpenSSH (Raspbian)
OpenSSH (*BSD)
(cid:104)Other(cid:105)
OpenSSH (Mikrotik)
1,912
69
48
5
4
1
1
2,040
631
161
98
82
6
5
3
1
987
TABLE XI.
MOST COMMON PORTS FOR CRAWLED OPEN PROXIES
HTTP
Count
3,290
1,089
825
745
669
Port
8080
3128
9999
80
53281
%
22.97 %
7.60 %
5.76 %
5.20 %
4.67 %
Port
4145
1080
9999
6667
9050
Totals
Uniques
14,324
5,127
–
–
–
–
SOCKS
Count
584
146
82
28
21
1,547
535
%
37.75 %
9.44 %
5.30 %
1.81 %
1.36 %
–
–
hosted behind 535 different ports, almost 40 % were using
port 4145, which seems to be used as a backdoor for malicious
activities [68]. In total, merely a third of all open proxies found
by crawling were behind any of the standard proxy ports we
used for our Internet-wide scans discussed earlier. 47 % of all
open proxies indicated that they were able to form a connection
to localhost (i. e., were potentially vulnerable). Out of these
proxies, 42 % delivered us an expected payload (i. e., were
deﬁnitely vulnerable) with 19 % (~3,000) of all open proxies
in comparison to 23 % from our Internet scans. 65 % of these
vulnerable hosts expose Mikrotik’s conﬁguration interface,
while SSH was being exposed less often (seen in Table X).
These vulnerable proxies were found in 122 countries and
~1,100 ASes – the most common locations for vulnerable
proxies was China with 14 % of the proxies, followed by ~7 %
of each by Russia, Indonesia, India, and Brazil.
6) Case Study: Large European ISP: During our scans,
we found over 200,000 inadvertently open proxies supporting
CONNECT proxying while returning a 400 error (“Invalid
header received from client”) for our absolute-URI requests.
All of these systems were located in a single autonomous
system of a large European ISP, spanning over 152 different
subnets in a single country. Further investigations revealed the
error on absolute-URI proxy requests occur when the manda-
tory “Host” header [22] is sent to the proxy. To conﬁrm our
suspicions, we requested the conﬁguration page located under
config.privoxy.org manually on one of the systems,
which succeeded and we were greeted with a reasonably recent
(3.0.26, released at the end of 2016) Privoxy conﬁguration
page. However, the same version of Privoxy we tested in our
laboratory setting does not exhibit this erroneous behavior.
13
Privoxy is a non-caching, ﬁltering proxy that uses so-called
actions to modify content proxied via it. In order to understand
more why these proxies are deployed, we also did request
the list of actions from a single proxy, which contained a
single “action” adding Link-Account header containing
a presumably unique identiﬁer of this device. Although the
conﬁguration was perfectly ﬁne (we tested it in our lab setup),
this header was not delivered to our server. We can only guess
that either the rule is not working correctly for some unknown
reason, or that the ISP is using this only internally in their
network. We disclosed this vulnerability to the ISP at the
beginning of 2019 in various ways (e.g., e-mail and security
contact form on their website). As of the end of the year 2019,
this issue appears to be ﬁxed.
E. Network Proxies: Key Findings
Our Internet-wide scans revealed that only a small percent-
age of services running on default proxy ports are actually
proxies. Also, merely 3 % (~20,000) of all proxies are open
proxies. 23 % of these are deﬁnitely misconﬁgured and allow
unauthorized access to internal networks (i.e., an adversary can
misuse them to obtain access to systems behind these proxies).
Further, we found that up to 40 % are likely misconﬁgured, but
our probes were not targeting the correct ports. For identiﬁable
proxies, Squid was the dominant implementation with ~96 %
of all hosts announcing the implementation, also on other ports
besides its default 3128. We identiﬁed a population of over
200,000 open, modiﬁed Squid instances located in an ASN
of a large European ISP. These proxies require a slightly
off-standard requests to function, and which—according to
their conﬁguration—append an extra tracking header to their
outcoming requests. Our two-week-long crawling with Proxy-
Broker totaled to almost as many open proxies as our Internet-
wide scans on several ports. These proxies were mostly found
on non-standard ports and were over 20 percentage points more
likely to be deﬁnitely vulnerable, which hints that they are
unlikely to be open on purpose, but rather vulnerable systems.
V. RELATED WORK
In the following, we discuss how our work relates to
previous work in this area.
A. NAT Traversal Protocols
Already in 2006, Hemel [32] reported on the lack of
destination address ﬁltering in several UPnP IGD implemen-
tations, and described how this could be used to expose other
internal hosts to the Internet as well as to proxy trafﬁc to
external hosts. In 2008, Squire [65] reported ﬁnding a small
number of devices exposing their SOAP endpoints on the
WAN interface, and three years later, Garcia [25] released
a tool
to scan for exposed SOAP endpoints and reported
ﬁnding over 150,000 endpoints on the Internet. The ﬁrst in-
depth security analysis of UPnP was done by Moore [51] in
2013. He reported ﬁnding over 81 million SSDP responsive
devices with 17 million exposed SOAP endpoints. In 2017,
McAfee reported on sightings of malware leveraging UPnP to
proxy C&C connections. [35] Concurrently and independently
to our study, Akamai researchers [1], [62] analyzed malicious
port mappings with similar conclusions compared to the ones
we obtained via our study. Our work differs from theirs by
not only targeting a single WANIPConnection interface
using brute-force search. Instead, we carefully implemented
the UPnP speciﬁcation to obtain all the relevant interfaces
and adapted our crawling based on the responses from the
endpoints. As shown in Table I, this allows us to cover ~21 %
of the hosts exposing WANPPPConnection that could have
been missed by the brute-force approach. Besides reporting on
the malicious forwards, we extend our work to also show that
this feature is used for benign purposes.
UPnP was also in news [18], [70] when someone accessed
Chromecast devices located behind NAT gateways. While this
was not an attack against the protocol itself, it raised awareness
of the protocol and its ability to expose devices to the Internet
without users’ noticing it. Other uses of UPnP have also been
explored: in 2012, DiCioccio et al. [16] leveraged a software
installed on end-users’ computers to complement end-host
based bandwidth measurements using router-reported data, e.g.
connection speeds. Their results from 120,000 hosts indicated
that merely 35 % had an UPnP enabled router. Related to
our honeypot implementation, Hakim et al. [30] introduced
a concept of generating UPnP honeypots based on UPnP
description ﬁles.
There is little research available on either NAT-PMP or
PCP. Some indications (such as UPnP-PCP bridge deﬁned in
RFC 6970 [9], and the support for cascading NATs) suggest
that especially PCP is more aimed to be deployed by ISPs
rather than home users. The only relevant study on NAT-
PMP was done by Hart [31] in 2014, where he analyzed
some potential attack scenarios and reported on ﬁnding 1.2
million (i.e., twice as much as our scans) exposed NAT-PMP
endpoints. To the best of our knowledge, there have been no
reports on insecurities in PCP deployments.
B. Internet Proxies
Various studies on the open proxy ecosystem exist [61],
[57], [69], [47]. Common to these studies is that they are
limiting their analyses to either crawling or Internet-wide
scans, while not reporting out enough concrete numbers to
allow understanding of the whole proxy ecosystem. A detailed
comparison of these works to ours is summarized in Table XII
and we discuss the main differences next.
In their work from 2015, Scott et al. [61] analyzed how
open HTTP proxies are used by analyzing the statistics pro-
vided by management interfaces of some proxy implementa-
tions. Their work also included Internet scans on several ports
(3128, 8080, 8123) to locate proxy servers, but unfortunately
they left out many details. A complementary study involving
both crawling and Internet-wide scans was performed by
Perino et al. [57]: they leveraged existing proxy lists and
did ZMap scans to quantify the free proxy ecosystem and to
analyze its trustworthiness. Results from both of these studies
indicate that scanning for default proxy ports are not very
fruitful—from millions of SYN-responses, only a handful are
real proxies in the end. We conﬁrm and particularize these
results in our study.
In 2018, Tsirantonakis et al. [69] showed that 38% of their
observed open proxies did modify the sent data and that 5 %
of open proxy servers could be classiﬁed as malicious. They
leveraged crawling for their data collection. Mani et al. [47]
TABLE XII.
COMPARISON OF OUR WORK TO RELATED PROXY
ECOSYSTEM STUDIES