不过这里有一个小问题，就是它不识别分号，如图23-19所示。
::: bodypic-c
![](OEBPS/Images/23a19-i.jpg){.calibre913}
:::
图23-19 文本框输入内容
直接修改成分号点击"进入"，运行成功。可看到toast的展示。
[提示：]{.yanse}[项目下载地址为]{.yanse}http://download.csdn.net/detail/jiangwei0910410003/9543445。
[]{#143.xhtml}
#### 23.6 逆向加固应用的方法总结 {.bodycontent-title2}
破解的步骤比较多，下面来整理一下破解步骤。
###### 1.破解的常规套路 {.section-subtitle}
按照破解惯例，首先解压出classses.dex文件，使用dex2jar工具查看Java代码，发现只有一个Application类，所以猜测apk被加壳（加固）了，然后用apktool来反编译apk，得到它的资源文件和AndroidManifest.xml内容，找到了包名和入口的Activity类。
###### 2.加固apk的源程序一般存放的位置 {.section-subtitle}
知道加固apk后，那么就分析这个加固的apk放在哪里，肯定是存放在本地的一个地方，一般是三个地方：
·应用的asset目录中。
·应用的libs中的so文件中。
·应用的dex文件的末尾。
分析了之后，发现asset目录中的确有两个jar文件，但是打不开，猜测是经过处理了，所以得分析处理逻辑，但是这时候也没有代码，怎么分析呢？这时候就需要借助于dump内存dex技术了：不管最后的源apk放在哪里，最后都是需要经历解密动态加载到内存中的，所以分析底层加载dex源码，知道有一个函数dvmDexFileOpenPartial，这个函数有两个重要参数，一个是dex的地址，一个是dex的大小，而且知道这个函数是在libdvm.so中的。所以可以使用IDA进行动态调试获取信息。
###### 3.双开IDA开始获取内存中的dex内容 {.section-subtitle}
双开IDA，用之前的动态破解so方式，来给dvmDexFileOpenPartial函数下断点，获取两个参数的值，然后使用一段脚本，将内存中的dex数据保存到本地磁盘中。
###### 4.分析获取到的dex内容 {.section-subtitle}
得到了内存中的dex之后，使用dex2jar工具去查看源码，但是发现无法保存，以为是dump出来的dex格式有问题，但是最后使用baksmali工具进行处理，得到smali源码是可以的，然后就开始分析smali源码。
###### 5.分析源码了解破解思路 {.section-subtitle}
通过分析源码得知，在WebViewActivity页面中会加载一个页面，然后那个页面中的JavaScript会调用本地的Java对象中的一个方法来展示toast信息。但是这里遇到了个问题：JavaScript的Java对象名称被混淆加密了，需要去分析那个加密函数，但是这个加密函数是native的，然后就是用IDA去静态分析了这个native函数，但是没有分析完成，因为不需要，其实很简单，只需要结果，不需要过程。现在解密的内容知道了，native方法的定义也知道了，那么就去写一个简单的demo去调用这个so的native方法即可，结果成功了，得到了正确的JavaScript对象名称。
###### 6.了解WebView的安全性 {.section-subtitle}
WebView的早期版本的一个漏洞信息，在Android
4.2之前的版本WebView有一个漏洞，就是可以执行Java对象中所有的public方法，那么在JavaScript中就可以这么处理了，先获取getClass方法获取这个对象，然后调用这个对象中的一些特定方法即可，因为Java中所有的对象都有一个getClass方法，而这个方法是public的，同时能够返回当前对象。所以在Android
4.2之后有了一个注解@JavascriptInterface，只有这个注解标识的方法才能在JavaScript中调用。
###### 7.获取输入的新技能 {.section-subtitle}
验证结果的过程中发现了一个技巧，就是在输入很长的文本的时候比较烦琐，可以借助adb
shell input text命令来实现。
[提示：]{.yanse}
·通过dump出内存中的dex数据，可以佛挡杀佛了，不管apk如何加固，最终都是需要加载到内存中的。
·了解WebView的安全性相关知识，比如在WebView中JavaScript对象名称做一次混淆还是有必要的，防止被恶意网站调用我们的本地隐私方法。
·可以尝试调用so中的native方法，在知道了这个方法的定义之后。
·用adb shell input text命令来辅助输入。
[]{#144.xhtml}
#### 23.7 本章小结 {.bodycontent-title2}
本章介绍了在Android中如何dump出那些加固的apk程序，核心方法就一个：不管上层怎么加固，最终加载到内存的dex文件肯定不是加固的，所以这个dex就是想要的。这里使用了IDA来动态调试libdvm.so中的dvmDexFileOpenPartial函数来获取内存中的dex文件，同时还可以使用gdb+gdbserver来获取，这个方法请自行搜索吧。前两章的内容，加上本章内容就是Android中大体的破解方式，当然这三种方式不是万能的，因为加固和破解是军备竞赛，不断升级，没有哪一方有绝对的优势。当然还有很多其他的破解方式，后面如果遇到的话，会再详细说明。
现在市场中的应用为了安全考虑采用了第三方平台进行应用的加固，加固的思想也是大同小异。在逆向加固应用的时候，其实只要遵循一个目标就是找到关键点函数，下好断点，dump出内存中的dex文件。问题就在于这个关键点函数了，这个关键点函数会很多，所以在逆向的时候需要多次进行尝试，而这些关键点函数也是随着逆向经验的增加而收集得更多。
[]{#145.xhtml}
### 第24章 逆向应用经典案例分析 {.bodycontent-title4}
本章介绍如何逆向市场中的一些加壳方案，现在市场中有很多加壳平台，这些加壳平台会做一些反调试操作，对so文件进行混淆加密等，让脱壳变得比较困难。本章将介绍加壳原理以及脱壳方法，并总结了脱壳经验。
[]{#146.xhtml}
#### 24.1 加壳原理分析 {.bodycontent-title2}
先用一个案例来看看加壳原理。首先自己弄一个demo程序，然后去某加壳网站上加固一下，得到加固之后的apk，然后开始破解。
###### 1.反编译apk {.section-subtitle}
解压apk，看看大体的目录，得到classes.dex文件，然后用dex2jar+jd-gui得到Java源码，如图24-1所示。
::: bodypic-c
![](OEBPS/Images/24a1-i.jpg){.calibre914}
:::
图24-1 反编译之后的源码\
看到这里只有Application的壳，而且这个是加固之后的特点，都是这两个Application的。
使用apktool来反编译apk，获取资源文件信息：
::: bodypic-c
![](OEBPS/Images/377-2-i.jpg){.calibre915}
:::
###### 2.分析加密流程 {.section-subtitle}
加固程序把源程序进行加密操作然后隐藏到了一个地方，在之前一章中也说过了，隐藏的地方就那么几个：assets目录、libs目录、自己的dex文件。这里直接看assets目录，如图24-2所示。
::: bodypic-c
![](OEBPS/Images/24a2-i.jpg){.calibre916}
:::
图24-2 assets目录\
多了这个文件，猜想这个可能就是处理之后的源apk了。在AndroidManifest.xml中看到了入口的SuperApplication类，下面来分析一下这个类：
::: bodypic-c
![](OEBPS/Images/378-i.jpg){.calibre917}
:::
这里一般都是在attachBaseContext方法中进行操作的，这里的时机比较早，首先会调用loadLibs方法进行加载libs：
::: bodypic-c
![](OEBPS/Images/378-2-i.jpg){.calibre918}
:::
这里区分不同的平台，然后拷贝不同的so文件，继续看copyLib方法：
::: bodypic-c
![](OEBPS/Images/378-3-i.jpg){.calibre919}
:::
可以看到，从assets目录下把增加的两个so文件libexec.so和libexecmain.so拷贝到应用程序的files目录下，可以去看看assets/ijm_lib目录下的so文件，如图24-3所示。
::: bodypic-c
![](OEBPS/Images/24a3-i.jpg){.calibre920}
:::
图24-3 so文件目录
到这里loadLibs方法就执行完了，下面就开始调用NativeApplication的load方法进行加载数据，继续看NativeApplication类：
::: bodypic-c
![](OEBPS/Images/379-i.jpg){.calibre921}
:::
开始从应用程序的files目录中加载这两个so文件，load方法也是一个native方法，继续看看这两个so文件内容。
首先用IDA打开libexecmain.so文件，如图24-4所示，但是发现，它里面并没有什么重要信息，连JNI_OnLoad函数都没有内容。
::: bodypic-c
![](OEBPS/Images/24a4-i.jpg){.calibre922}
:::
图24-4 IDA打开libexecmainso文件
继续查看libexec.so文件，如图24-5所示。
::: bodypic-c
![](OEBPS/Images/24a5-i.jpg){.calibre923}
:::
图24-5 IDA打开libexec.so文件\
可惜的是，打开提示so文件格式错误，到这里就猜到了，这个so可能被加密处理了，ELF格式改了，点击Yes继续强制打开之后，再使用Ctrl+S查看so的各个段信息，如图24-6所示。
现在确定，没办法分析so文件了，分析到这里，也知道了大体加密流程：
1）按照惯例把源apk进行加密处理存放在一个地方，通过分析猜想是assets目录下的ijiami.dat文件。
::: bodypic-c
![](OEBPS/Images/24a6-i.jpg){.calibre924}
:::
图24-6 查看so中的段信息
2）添加壳Application：SuperApplication类在这个壳的attachContext方法中主要做了两件事：
·把assets/ijm_lib目录下的两个so文件copy到程序的files目录中。
·调用NativeApplication的load方法，在这个类中同时也把上面的两个so文件加载到内存中。
3）对apk的加密都是放在底层的两个so文件中操作的，通过IDA去分析这两个so文件之后，发现核心功能的so文件被加密了，IDA打开是看不到具体信息了。
到这里知道加固之后的特点是：在程序的assets目录下多了一个ijiami.dat文件和两个so文件，同时这两个so文件被加密处理了，增加破解难度。
[]{#147.xhtml}
#### 24.2 脱壳过程 {.bodycontent-title2}
上面简单分析了加密的原理和流程，但是没有继续往下面分析了，因为这不是本章讲解的重点，本章的重点是如何脱掉加密的壳。脱壳的核心就一个：给dvmDexFileOpenPartial函数下断点，dump出内存的dex文件即可，那么下面就用IDA开始脱壳操作了。
###### 第一步：启动设备中的android_server {.section-subtitle}
进行端口转发：
::: bodypic-c
![](OEBPS/Images/380-i.jpg){.calibre666}
:::
###### 第二步：用debug模式启动程序 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/380-2-i.jpg){.calibre665}
:::
这里的包名和入口Activity都可以在上面反编译之后的AndroidManifest.xml文件中找到：
::: bodypic-c
![](OEBPS/Images/381-i.jpg){.calibre925}
:::
###### 第三步：双开IDA {.section-subtitle}
一个用于静态分析libdvm.so，一个用于动态调试，如图24-7所示。
::: bodypic-c
![](OEBPS/Images/24a7-i.jpg){.calibre926}
:::
图24-7 获取函数相对地址
记录dvmDexFileOpenPartial函数的相对地址4777C，再次打开一个IDA，进行attach调试进程，如图24-8所示。
::: bodypic-c
![](OEBPS/Images/24a8-i.jpg){.calibre927}
:::
图24-8 附加进程
###### 第四步：使用jdb命令attach上调试器 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/381-3-i.jpg){.calibre900}
:::
###### 第五步：对dvmDexFileOpenPartial函数下断点 {.section-subtitle}
进入调试页面之后，用Ctrl+S键查找libdvm.so的内存基地址415BB000，如图24-9所示。
::: bodypic-c
![](OEBPS/Images/24a9-i.jpg){.calibre928}
:::
图24-9 获取so的基地址
将第三步中获取到的相对地址加上基地址4777C+415BB000=4160277C，得到了dvmDex-FileOpenPartial在内存中的绝对地址。
注意，这里还有一个更方便的办法，就是直接打开Modules
View，如图24-10所示。
::: bodypic-c
![](OEBPS/Images/24a10-i.jpg){.calibre929}
:::
图24-10 Modules视图
在这里查找libdvm.so文件，如图24-11所示。
然后双击libdvm.so文件，如图24-12所示。
::: bodypic-c
![](OEBPS/Images/24a11-i.jpg){.calibre930}
:::
图24-11 查找libdvm.so文件
::: bodypic-c
![](OEBPS/Images/24a12-i.jpg){.calibre931}
:::
图24-12 获取函数的绝对地址
查找需要下断点的函数名称，看到这里的绝对地址也是4160277C。这里有两种方式可以得到一个函数在内存中的绝对地址。然后使用G键，直接跳转到函数处，下断点，如下所示：
::: bodypic-c
![](OEBPS/Images/383-i.jpg){.calibre932}
:::
###### 第六步：设置Debugger Options选项 {.section-subtitle}
此操作能够让程序断在dvmDexFileOpenPartial函数处，如图24-13所示。
::: bodypic-c
![](OEBPS/Images/24a13-i.jpg){.calibre837}
:::
图24-13 设置Debugger Options选项