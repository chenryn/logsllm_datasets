# SSL Splitting: Securely Serving Data from Untrusted Caches

**Authors:** Chris Lesniewski-Laas and M. Frans Kaashoek  
**Affiliation:** Laboratory for Computer Science, Massachusetts Institute of Technology  
**Contact:** {ctl,kaashoek}@mit.edu

**Proceedings of the 12th USENIX Security Symposium**  
**Location:** Washington, D.C., USA  
**Dates:** August 4–8, 2003  
**Publisher:** The USENIX Association  
**Copyright:** © 2003 by The USENIX Association  
**Phone:** +1 510 528 8649  
**Fax:** +1 510 548 5738  
**Email:** [info@usenix.org](mailto:info@usenix.org)  
**Website:** [http://www.usenix.org](http://www.usenix.org)

**Abstract:**
Web servers often offload content delivery to trusted proxies to reduce bandwidth usage. However, these proxies are typically required to be trusted not to alter the data they serve. SSL splitting is a novel technique that ensures the integrity of data served from untrusted caches without requiring modifications to web clients. By simulating a standard Secure Sockets Layer (SSL) connection, an SSL splitting proxy merges authentication records from the server with data from a cache, thereby reducing the server's bandwidth load while allowing the client to verify the data's origin.

**1. Introduction**
Caching web proxies are widely used to reduce the load on centralized servers. For instance, a user with a web site hosted on a low-bandwidth DSL line can leverage well-connected volunteers to proxy the site's content, enhancing throughput. In current practice, these proxies must be trusted by both the client and the server to deliver unaltered data. 

Previous solutions for ensuring the integrity of data served by proxies either require client-side modifications (e.g., SFSRO [8]) or use application-specific methods (e.g., RPM with PGP signatures [25]). These approaches have not gained widespread adoption due to the lack of existing client support and the complexity involved in their implementation.

Our objective is to ensure the integrity of data served by proxies without altering the client software. We achieve this by leveraging the widely-deployed browser support for the SSL protocol. Our method, called SSL splitting, involves modifying the server end of the SSL connection. The central server sends SSL record authenticators, and the proxy combines them with data retrieved from its cache. The resulting data stream sent to the client is indistinguishable from a normal SSL connection between the client and the server.

**Figure 1: Data flow in SSL splitting.**

This research was partially supported by MIT Project Oxygen and the IRIS project, funded by the National Science Foundation under Cooperative Agreement No. ANI-0225660.

**2. Goals**
Our primary goal is to guarantee the integrity of public data served by caching web proxies, ensuring it is endorsed by the originating server. This allows anyone with a limited connection to distribute content using well-connected volunteers as mirrors. We aim to provide this integrity with minimal changes to the existing infrastructure, specifically without requiring any client-side modifications and with only minor server-side changes.

Confidentiality is not a goal, as the intended use is to distribute public, popular data from bandwidth-limited servers. Most web content does not require secrecy, and dynamically generated pages are not cacheable. Additionally, SSL splitting does not improve the redundancy of the site, as the central server must be available to authenticate data. Redundant central servers are necessary to ensure continued service in case of failure.

**3. Design of SSL Splitting**
The core idea of SSL splitting is that an SSL record stream can be separated into data and authenticator components. As long as the record format is correct, these components can arrive at the proxy via different means. The proxy can cache the data components, reducing the need for the server to send the full data for each client.

**3.1 SSL Overview**
The Secure Sockets Layer (SSL) protocol provides end-to-end mutual authentication and confidentiality at the transport layer. A typical SSL connection begins with a handshake phase, where the server authenticates itself to the client and generates shared keys for symmetric ciphers. After the handshake, data is exchanged in records, each containing a Message Authentication Code (MAC) to detect modifications.

**3.2 Interposing a Proxy**
To use SSL splitting, a web browser connects to a proxy using HTTPS. The proxy relays the client's connection setup messages to the server, which then authenticates itself to the client. Once the SSL connection is established, the server sends application data, including MACs and payload identifiers. The proxy uses these identifiers to look up the payload in its cache, reconstructs the SSL record, and sends it to the client. The client verifies the integrity of the received data, which appears to come directly from the server.

**3.3 Proxy-Server Protocol Extensions**
When a client initiates an HTTPS connection to an SSL-splitting proxy, the proxy connects to the server using a specialized protocol. This protocol defines three message types: verbatim (regular SSL records), stub (compact representation of SSL records), and key-expose (communicates encryption keys from the server to the proxy).

**3.4 Dropping the Encryption Layer**
For the proxy to forward stub messages, it must be able to encode valid SSL records. If the client and server use end-to-end encryption, the proxy cannot determine when the same data is downloaded by different clients. To achieve bandwidth compression, the encryption layer must be disabled. This can be done by negotiating an authentication-only cipher suite during the handshake phase. If the client does not offer such a suite, the server can intentionally expose the encryption key and IV to the proxy using the key-expose message, preserving the data-authentication property.

**Conclusion**
SSL splitting is a practical solution for securely serving data from untrusted caches, reducing server bandwidth while maintaining data integrity. It is implemented as a patch to the OpenSSL library and has been shown to significantly reduce server bandwidth consumption. Future work will focus on integrating SSL splitting into broader content distribution systems, such as Barnraising, to further enhance the efficiency and security of web content delivery.