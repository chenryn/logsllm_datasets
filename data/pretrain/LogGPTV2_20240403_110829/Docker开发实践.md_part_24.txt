### 3. UTS（UNIX Time-sharing System）命名空间
UTS命名空间主要用于管理主机名和域名。每个UTS命名空间都可以定义不同的主机名和域名。通过配置独立的UTS命名空间，可以虚拟出一个具有独立主机名和网络环境的空间。默认情况下，Docker容器的主机名就是容器ID。

### 4. 用户命名空间
用户命名空间用于隔离系统的用户和用户组。在用户命名空间中可以创建自己的用户和组，但这些用户在命名空间外部是不可见的。这样，我们可以在容器中自由地添加用户和组，而不影响宿主机和其他容器上的用户和组。

### 13.2 cgroups
cgroups（control groups）是Linux内核提供的一种机制，用于记录、限制和隔离进程组所使用的物理资源（如CPU、内存、I/O等）。它最初由Google工程师提出，并最终被整合进Linux内核。cgroups也是实现容器虚拟化的重要资源管理手段。可以说，没有cgroups，就没有容器。

cgroups最初的目标是为资源管理提供一个统一的框架，既整合现有的cpuset等子系统，也为未来开发新的子系统提供接口。目前，cgroups适用于多种应用场景，从单个进程的资源控制到操作系统层次的虚拟化（OS Level Virtualization）。cgroups提供了以下功能：

- **资源限制**：例如，memory子系统可以为进程组设定内存使用上限，一旦达到限额再申请内存时，就会触发OOM（Out Of Memory）。
- **优先级控制**：例如，可以使用cpu子系统为某个进程组分配特定的CPU占有率。
- **资源记录**：例如，可以使用cpuacct子系统记录某个进程组使用的CPU时间。
- **进程组隔离**：例如，使用命名空间子系统可以使不同的进程组使用不同的命名空间，以达到隔离的目的，不同的进程组有各自的进程、网络和文件系统挂载空间。
- **进程组控制**：例如，使用freezer子系统可以将进程组挂起和恢复。

控制组是Linux容器机制的另一个关键组件，负责实现资源的审计和限制。它提供了许多有用的特性，确保各个容器可以公平地分享主机的内存、CPU、磁盘I/O等资源。更重要的是，控制组确保了当容器内的资源使用产生压力时，不会影响到主机系统。

尽管控制组不负责隔离容器之间的相互访问、数据处理和进程，但它在防止拒绝服务（DDoS）攻击方面是必不可少的，尤其是在多用户的平台（如公有或私有的PaaS）上。例如，当某些应用程序表现异常时，控制组可以保证其他应用程序的一致性和正常运行。控制组机制始于2006年，并从Linux内核2.6.24版本开始引入。

### 13.3 Linux 能力机制
Linux操作系统赋予普通用户尽可能低的权限，而将所有系统权限赋予root用户。root用户可以执行一切特权操作。然而，那些需要root权限的程序往往只需要一种或几种特权操作，大多数特权操作都用不到。例如，`passwd`程序只需要写`/etc/passwd`的权限，而Web服务器只需要绑定到1024以下端口的权限。显然，其他特权对程序来说是不必要的，赋予程序root权限会带来额外的安全威胁。如果这些程序存在漏洞，黑客可能利用漏洞取得系统的控制权，从而进行任意操作。

为了减小这种风险，Linux能力机制被设计出来。通过能力机制，可以消除需要某些操作特权的程序对root用户的依赖，从而降低安全风险。系统管理员还可以去除root用户的某些能力，即使root用户也无法执行这些操作，且这个过程是不可逆的。也就是说，如果某种能力被删除，除非重新启动系统，否则即使是root用户也无法重新添加被删除的能力。

#### 1. 能力的概念
在Linux内核中，能力（capability）是指一个进程能够执行的某种操作。传统Linux系统中的root权限过于强大，能力机制将root权限细分成不同的能力，通过单独控制每种能力来提高安全性。例如，如果一个程序需要绑定低于1024的端口，我们可以只赋予它这方面的能力，而不开放其他各种能力。这样，即使程序存在漏洞，黑客也只能得到绑定低于1024端口的能力，而无法取得系统的控制权。

#### 2. 能力边界集
能力机制还引入了能力边界集的概念。能力边界集是系统中所有进程允许拥有的能力的集合。如果某种能力不在能力边界集中，那么系统中所有进程都没有这种能力，即使以root权限运行也没有相应的能力。

删除系统中多余的能力可以显著提高系统的安全性。例如，如果你有一台重要的服务器，担心可加载内核模块的安全性，但又不想完全禁止使用可加载内核模块（因为一些设备驱动可能是可加载内核模块），可以在系统启动时加载所有必要的模块，然后禁止加载/卸载任何内核模块。通过从能力边界集中删除`CAP_SYS_MODULE`，系统将不再允许加载/卸载任何内核模块。

#### 3. 局限
虽然能力机制可以有效保护系统安全，但由于文件系统的制约（当前Linux文件结构没有存放能力机制的能力），Linux的能力机制还不完善。除了可以使用能力边界集从总体上放弃一些能力之外，还不能做到只赋予某个程序某些方面的能力。

### 14. Docker API
在本章之前，我们对Docker的操作都是通过“docker+命令”的方式进行的。例如，列出本地所有镜像可以使用`docker images`命令，获取当前正在运行的容器可以使用`docker ps`命令等。本章将介绍另一种方法：Docker API，即Docker编程接口。本章内容主要包括：

- **API概述**：说明通过API操作Docker的优点以及API的分类。
- **如何绑定Docker后台监听接口**。
- **远程API**：包括容器和镜像相关API。
- **平台API**：从机制原理上说明镜像的上传和下载流程，然后逐步说明操作步骤。
- **API实战**：通过`docker-py`库进行API实战编程。

#### 14.1 API 概述
任何一个开放平台都会向开发者开放API，以供开发者更自由地使用平台提供的功能，定制出特定功能的应用。在应用中使用Docker API，可以直接与Docker后台、库以及Docker Hub平台通信。事实上，Docker二进制本身也采用API与服务端通信。相对于使用“docker+命令”的方式，使用API方式具有以下几个优点：

- **无需安装Docker客户端**：采用“docker+命令”的方式意味着必须安装Docker客户端，而通过API方式则不需要。
- **效率更高**：除了在终端中直接使用“docker+命令”外，也可以在应用中通过类似`system(docker命令)`的方式来达到同样的效果。然而，这种方式会新创建一个进程来执行`system`函数内部的操作，相比API编程显得更为低效。
- **更为自由**：“docker+命令”的形式返回的内容是经过Docker客户端处理的数据，并不是后台返回的原始数据。对于有深度定制需求的应用而言，这制约了其自由定制的可能性。

因此，要更高效和自由地使用Docker功能，就需要了解Docker API编程。从功能上分，Docker API包含三部分内容：

- **Registry API（库API）**：提供Docker库相关接口，用于保存镜像。
- **Hub API（平台API）**：与Docker Hub公共平台相关的接口。
- **Remote API（远程API）**：Docker客户端和后台服务端交互的接口。

在本章中，我们将主要介绍远程API，因为它更为核心和基础，拥有的操作也比其他两类多。此外，我们也会介绍与Docker Hub相关的API，因为它涉及镜像的上传和下载。本章中API提供的接口与前面章节涉及的Docker操作一一对应，所以在说明API用例时，读者会有一种似曾相识的感觉。我们会尽量以一种简单规范的形式来说明API，以“方法、用例请求、用例返回、参数、状态码、curl操作”模板的方法来展示API。为了满足读者的实践需求，我们将在14.5节中说明如何通过`docker-py`库来进行实战编程。

在介绍API的具体内容之前，我们需要说明一下API的工作原理。图14-1所示的是API中客户端和服务端的通信架构。图中包含两台机器——远端主机和Docker服务主机。Docker服务主机是一台装有Docker服务的计算机，它本身包含了Docker客户端和Docker后台。Docker后台提供Docker服务，外界通过套接字的方式对其进行访问。默认配置下，Docker后台只监听来自本地的通信请求，这主要是出于安全考虑。例如，图中的本地客户端可以直接和后台套接字进行API通信。如果需要支持跨主机的API请求，我们需要在Docker后台启动时通过`-H`参数对指定或者全部网络接口进行绑定。

#### 14.2 绑定Docker后台监听接口
在这一节中，我们将详细说明参数`-H`的用法。前面提到，Docker是由Docker后台和客户端组成的，默认配置下，Docker后台只接受来自本机的root用户的请求。实际上，Docker后台默认监听的是`unix:///var/run/docker.sock`套接字文件，该文件位于`/var/run/`目录下，读者可以通过`ls`命令来查看。那么，如果想改变Docker后台的监听端口，甚至让其他主机也能够访问该后台服务，该怎么办呢？

通过`-H`参数，可以让Docker后台监听指定的IP和端口。`-H`接受如下格式的IP和端口绑定：
- `tcp://[host][:port]`
- `unix://path`

在开始绑定之前，需要先停止已经运行的Docker后台。如果是Ubuntu系列的系统，可以通过如下命令停止Docker后台：
```sh
$ sudo service docker stop
```
如果是Red Hat系列，则为：
```sh
# systemctl stop docker.service
```

接下来，可以将本地所有网络接口的2376端口和Docker后端绑定。采用如下命令来启动Docker后台：
```sh
$ sudo docker -H 0.0.0.0:2376 -d &
```
Docker后台启动后，它将监听本地所有网络接口的2376端口，客户端可以通过`-H`参数来访问绑定后的端口，具体操作如下：
```sh
$ sudo docker -H tcp://127.0.0.1:2376 pull Ubuntu
```
此处的`-H`代表连接到指定IP和端口，而不是绑定。由此看出，`-H`参数在后台和客户端有着不一样的含义。

此外，Docker后台同时接受多个端口的绑定，例如：
```sh
$ sudo docker -H tcp://127.0.0.1:2376 -H unix:///var/run/docker.sock -d &
$ sudo docker search ubuntu
$ sudo docker -H tcp://127.0.0.1:2376 pull ubuntu
```
上面的代码通过两次使用`-H`参数启动Docker后台，这样后台不仅监听`127.0.0.1:2376`的请求，还监听`/var/run/docker.sock`上的请求。

除了使用命令行启动Docker后台外，一种更为持久化和自动化的方法是修改Docker服务的启动脚本，这免去了每次宕机之后手动关闭服务再启动的麻烦。这里我们仅说明Ubuntu系列和Red Hat系列如何操作。

##### 1. Ubuntu和Debian系统
在Ubuntu或者Debian系统中，其配置为`/etc/default/docker`文件，打开该文件，其内容为：
```sh
# Docker Upstart and SysVinit configuration file
# Customize location of Docker binary (especially for development testing).
# DOCKER="/usr/local/bin/docker"
# Use DOCKER_OPTS to modify the daemon startup options.
# DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"
# If you need Docker to use an HTTP proxy, it can also be specified here.
# export http_proxy="http://127.0.0.1:3128/"
# This is also a handy place to tweak where Docker's temporary files go.
# export TMPDIR="/mnt/bigdrive/docker-tmp"
```
将`DOCKER_OPTS`行改成：
```sh
DOCKER_OPTS="-H 0.0.0.0:2376 -H unix:///var/run/docker.sock"
```
保存后退出，然后重启服务使其生效。具体操作为：
```sh
$ sudo service docker stop
$ sudo service docker start
```
或者直接使用如下命令：
```sh
$ sudo service docker restart
```

##### 2. Red Hat、Fedora和CentOS系统
在Red Hat、Fedora和CentOS等系统中，其配置为`/usr/lib/systemd/system/docker.service`文件，打开该文件，其内容为：
```ini
[Unit]
Description=Docker Application Container Engine
Documentation=http://docs.docker.com
After=network.target docker.socket
Requires=docker.socket

[Service]
Type=notify
EnvironmentFile=-/etc/sysconfig/docker
EnvironmentFile=-/etc/sysconfig/docker-storage
ExecStart=/usr/bin/docker -d $OPTIONS $DOCKER_STORAGE_OPTIONS
LimitNOFILE=1048576
LimitNPROC=1048576
MountFlags=private

[Install]
WantedBy=multi-user.target
```
将下面这行代码：
```sh
ExecStart=/usr/bin/docker -d $OPTIONS $DOCKER_STORAGE_OPTIONS
```
改为：
```sh
ExecStart=/usr/bin/docker -d $OPTIONS $DOCKER_STORAGE_OPTIONS -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock
```
保存后退出，然后重启服务使其生效：
```sh
# systemctl restart docker.service
```

接下来，我们可以学习Docker API了。

#### 14.3 远程API
在这一节中，我们将主要介绍远程API，它主要包含对容器和镜像的操作。与“docker+命令”这种形式不同，这里我们将一一说明常见的操作。为了便于演示，这里使用`curl`命令。`curl`是一款利用URL语法在命令行下工作的开源文件传输工具，广泛应用于Unix、多种Linux发行版中。当然，Windows系统下也有该工具的移植版本。

在第1章中，我们知道通过`docker info`命令可以查询当前Docker的系统信息。下面我们使用API方法来获得同样的信息，其操作如下：
```sh
$ curl -X GET http://localhost:2376/info
{
  "Containers": 4,
  "Debug": 0,
  "Driver": "aufs",
  "DriverStatus": [
    ["Root Dir", "/var/lib/docker/aufs"],
    ["Dirs", "61"]
  ],
  "ExecutionDriver": "native-0.2",
  "IPv4Forwarding": 1,
  "Images": 53,
  "IndexServerAddress": "https://index.docker.io/v1/",
  "InitPath": "/usr/bin/docker",
  "InitSha1": "",
  "KernelVersion": "3.13.0-44-generic",
  "MemoryLimit": 1,
  "NEventsListener": 0,
  "NFd": 10,
  "NGoroutines": 10,
  "OperatingSystem": "Ubuntu 14.04.1 LTS",
  "SwapLimit": 0
}
```
我们使用`curl`工具来请求`http://localhost:2376/info`，该路径用于获取Docker系统信息。`-X`参数后面接想要执行的HTTP操作，这里是`GET`。可以看到，返回的信息与`docker info`命令一样。