encoding of 𝑖 − 1).
• For the first level, P2 constructs trees
𝑇𝑗 = 𝑇 (𝑞1,𝑗 , 𝛼 − 1) with 𝑗 ∈ [𝑘] \ {𝑏1}.
• For each level 𝑙 ∈ [𝛼], let 𝑇1, . . . ,𝑇𝑘𝑙 be the sub-trees
of 𝑇 at level 𝑙. In previous iterations P2 has computed
all such sub-trees except for 𝑇𝑖 𝑗 , with
the direct children of each 𝑇𝑗 as {𝑠 𝑗,1, . . . , 𝑠 𝑗,𝑘}𝑗 ∈[𝑘]\𝑖𝑙
Then, additional seeds {𝑠𝑏𝑙 ,𝑗}𝑗≠𝑖𝑙+1 can be obtained
from (𝑞′
𝑖𝑙 =𝑥∈[𝑙] 𝑘𝑥−1 · 𝑏𝑥 + 1. P2 then collects the seeds of
.
𝑙,𝑗)𝑗≠𝑏𝑙+1 as
𝑠𝑏𝑙 ,𝑗 :=

𝑠 ⊕ 𝑞𝑙,𝑗
𝑠∈{𝑠 𝑗,𝑥 : 𝑥 ≡ 𝑗 mod 𝑘}
By expanding those seeds using 𝐺, P2 computes all
sub-trees of 𝑇 at level 𝑙 + 1, except for the one at
position 𝑖𝑙+1 =𝑥∈[𝑙+1] 𝑘𝑥−1 · 𝑏𝑥 + 1.
at position 𝑖 =𝑥∈[𝛼] 𝑘𝑥−1 · 𝑏𝑥 + 1.
P2 returns the list of seeds of leaves of 𝑇 , except for the one
(𝑛 − 1)-OUT-OF-𝑛 RANDOM OT
3
In this section we consider the question of oblivious selection of
𝑛 − 1 items out of 𝑛 in the case when all items are pseudoran-
dom. This corresponds to Functionality 1, namely (𝑛 − 1)-out-of-𝑛
random oblivious transfer. If we allow linear communication, a
protocol for Functionality 1 can be easily obtained using oblivious
selection techniques. We instead propose a protocol with sub-linear
communication and linear computation. Our protocol consists of
a key generation phase where P1 learns a key 𝐾1 consisting of a
single PRG seed 𝑠0, and P2 learns a key 𝐾2 consisting of log𝑘(𝑛)
PRG seeds, via log𝑘(𝑛) parallel executions of a (𝑘 − 1)-out-of-𝑘 OT
protocol, for parameter 𝑘 > 1. Expanding the respective seeds to
obtain their length-𝑛 outputs takes 𝑂(𝑛) PRG evaluations per party.
Key generation via a GGM tree. We crucially leverage the fact that
values are generated pseudo-randomly in order to obtain a protocol
with the above communication complexity. Let us assume, without
loss of generality, that log𝑘(𝑛) is an integer. The 𝑛 values of u are
generated from a single random seed 𝑠0 using a GGM tree 𝑇 [32]
constructed using a PRG 𝐺 of stretch 𝑘, i.e. 𝐺 : {0, 1}𝜆 ↦→ {0, 1}𝑘𝜆,
for security parameter 𝜆. More concretely, 𝑇 is an ordered complete
𝑘-ary tree of depth log𝑘(𝑛) and 𝑛 leaves, with its nodes labeled
with seeds in {0, 1}𝜆 (we will refer to nodes and their seeds/labels
indistinctly). The label of the root is 𝑠0, and the label 𝑠 𝑗 of the 𝑗th
child of a node 𝑣 is obtained from the seed of 𝑣, by applying the
PRG 𝐺 and parsing the output as (𝑠1| · · · |𝑠 𝑗| · · · |𝑠𝑘).
The 2-party protocol. Our protocol is presented as Protocol 2.
First, P1, the sender, computes the tree 𝑇 locally from a seed 𝑠0
(note that this can be done with 2𝑛 − 1 calls to 𝐺) and sets 𝑠0 to
be its key 𝐾1. The rest of the protocol allows P2, the receiver, to
recover all the seeds of 𝑇 , except for the ones in the path to the 𝑖th
leaf. This is done in a way that does not leak 𝑖 to P1, and requires
only log(𝑛) seeds, which will constitute P2’s key 𝐾2, to be expanded
locally. We now informally discuss the correctness and security of
our protocol, as well as associated communication and computation
costs.
Let (𝑖1, . . . , 𝑖log𝑘 (𝑛)) be the path to the 𝑖-th leaf (this is a sequence
of values in {0, . . . , 𝑘 − 1}, indicating which children to follow at
each level to reach the 𝑖th leaf from the root, and in fact corresponds
to the 𝑘-ary encoding of the integer 𝑖 − 1). For example, Figure 1
shows how for 𝑛 = 8 and 𝑖 = 3, the path the receiver should not
learn is 010. As mentioned above, our goal is that the receiver can
reconstruct all the tree except for the nodes on this path.
Although it will become clear that the protocol can be paral-
lelized across levels, for explanatory purposes it is useful to think of
it as processing 𝑇 level by level from the root guaranteeing that, for
each level 𝑙 ∈ [log𝑘(𝑛)], the receiver can reconstruct 𝑇 up to level 𝑙,
except for the nodes in the path (𝑖1, . . . , 𝑖𝑙). This property obviously
holds for 𝑙 = 0 and, to argue the correctness of our protocol, we
now argue inductively how to extend it from level 𝑙 to level 𝑙 + 1.
By induction assume that the receiver can reconstruct all sub-
trees 𝑇1, . . . 𝑇𝑘𝑙 of depth 𝛼 − 𝑙 rooted at the nodes of level 𝑙 except
for exactly one: the one rooted at path (𝑖1, . . . , 𝑖𝑙). This is, precisely,
show how a single execution of (𝑘 − 1)-out-of-𝑘 OT is enough
to extend the above property to level 𝑙 + 1. Intuitively, we want
𝑇(𝑥∈[𝑙] 𝑘𝑥−1·𝑖𝑥+1), which we denote 𝑇∗ for simplicity. Now, let us
5
(cid:16)𝑘𝑙
𝑗=1 𝑠 𝑗,0
𝑗=1 𝑠 𝑗,𝑘−1
to ensure that the receiver learns all direct children of 𝑇∗, except
for the 𝑖𝑙+1th one. As 𝑇∗ has 𝑘 direct children, this corresponds
to a (𝑘 − 1)-out-of-𝑘-OT. However, for privacy, it is important
that the sender never learns that 𝑇∗ is in fact the sub-tree that the
receiver cannot reconstruct at level 𝑙, as this reveals too much about
the index 𝑖. This difficulty can be overcome by constructing the
messages in the (𝑘 − 1)-out-of-𝑘-OT as follows.
Let 𝑠 𝑗,0, . . . , 𝑠 𝑗,𝑘−1 be the seeds of the nodes that are direct chil-
dren of each tree 𝑇𝑗. As the receiver knows all the 𝑇𝑗s except for 𝑇∗,
1), i.e., the children of𝑇∗. The key idea to achieve the above goal is to
have the sender compute 𝑘 values 𝑚0 =
she has all such seeds except for the ones with 𝑗 = (𝑥∈[𝑙] 𝑘𝑥−1·𝑖𝑥+
(cid:17), . . . , 𝑚𝑘−1 =
(cid:16)𝑘𝑙
(cid:17). Here, 𝑚0 is the XOR of all direct first children of
the seed 𝑠(𝑥∈[𝑙] 𝑘𝑥−1·𝑖𝑥+1),𝑗 (the 𝑦th child of 𝑇∗) since she knows
nodes at level 𝑙, 𝑚1 is the XOR of all second children, and so on.
Now observe that, given any value 𝑚𝑦 the receiver can compute
all the other values XOR-ed into the 𝑚 𝑗 value. On the other hand,
𝑚 𝑗 does not reveal anything about the seeds 𝑠𝑘𝑙 ,𝑥 with 𝑥 ≠ 𝑗. Thus,
the sender and the receiver run (𝑘 − 1)-out-of-𝑘 OT where the
sender’s inputs are 𝑚0, . . . , 𝑚𝑘−1 and the receiver’s input is the set
{0, . . . , 𝑘 − 1} \ {𝑖𝑙}. After running this sub-protocol the receiver
can reconstruct 𝑇 up to level 𝑙 + 1, except for the nodes in the path
(𝑖1, . . . , 𝑖𝑙+1). This shows how to extend the construction from level
𝑙 to 𝑙 + 1, and the protocol finishes when 𝑙 = 𝑛.
An important observation is that the instances of (𝑘−1)-out-of-𝑘
OT used in the above construction can all be run in parallel. The
correctness of our construction follows from the above discussion,
and its security, stated in the next lemma, follows directly from the
security of 𝐺, and the underlying protocol for (𝑘 − 1)-out-of-𝑘 OT.
A detailed proof can be found in Appendix A.1. In Section 8 we
describe how 𝐺 is instantiated in our implementation, as well as
other practical considerations and optimizations.
Lemma 3.1. For any constant 𝑘 > 1, Protocol 2 is a secure two party
computation protocol for the (𝑛 − 1)-out-of-n ROT functionality in
the (𝑘 − 1)-out-of-𝑘 OT hybrid model assuming a secure PRG 𝐺. The
protocol is one round, and requires 𝑂(𝜆 log(𝑛)) communication and
𝑂(𝜆𝑛) computation per party, including 2𝑛 PRG evaluations, where
𝜆 is the length of the PRG seed.
Proof Sketch. Showing the security of the above protocol consists
of two steps: first, showing that the keys that the parties receive
have the desired pseudorandom properties (Definition A.1), which
follows from the pseudorandom properties of the GGM construction
and which we formally prove in Theorem A.2. And second, showing
that the key generation protocol is a secure two party computation
protocol for the generation of the keys, which follows from the
OT security and which we prove formally in Theorem A.3. The
communication overhead follows from the fact that the parties
execute log𝑘 𝑛 OTs, which have linear communication in 𝜆. The
computation 𝑂(𝜆𝑛) for each comes from the execution of the log𝑘 𝑛
OTs and the expansion of the keys which uses 2𝑛 PRG calls.
How to set 𝑘, and instantiations of (𝑘 − 1)-out-of-𝑘 OT. The con-
struction of Protocol 2 works for any integer 𝑘 > 1. Choosing 𝑘
constant results in logarithmic communication, and in fact in our
6
implementation we use 𝑘 = 2. In practice, this allows us to lever-
age very efficient implementations of 1-out-of-2 OT based on OT
Extension. When instantiated with 𝑘 = 2, our protocol resembles
the Function Secret sharing construction by Boyle et al. [12].
Privately Punctured PRF. Our 𝑛−1-out-𝑛 random OT protocol also
provides a construction for a privately punctured pseudorandom
function, where one party has the PRF key and can evaluate the
PRF on any input (in our case this is P1 who has the GGM root)
and the other party has a punctured key which allows it to evaluate
the PRF on all but one inputs (P2 in our case). The OT protocol
enables P2 to obtain its punctured PRF key without revealing the
punctured point to P1 (the punctured key is the output that P2 has
at the end of the KeyExchange phase of the OT protocol). We note
the difference in the punctured key generation algorithm from the
one defined in other contexts for privately puncturable PRFs [8],
where the party who has the full PRF key generates the punctured
key and knows the point at which it is punctured.
4 KNOWN-INDEX SPFSS
In this section we use our 𝑛 − 1-out-of-𝑛 random OT protocol to
construct a 2-party computation protocol to jointly generate FSS
keys for point functions. The setup for our distributed FSS protocol
assumes that one party knows the non-zero evaluation point while
the value at that point is shared between the two parties. Thus,
it is not equivalent to a generic distributed FSS scheme for point
functions, as for example described in [23]. However, this relaxed
version suffices for our VOLE construction described in Section 6.
We call our FSS variant Known-Index SPFSS to emphasize that one
party knows the non-zero index.
Conceptually, the existing construction of point function FSS [12]
generates two PRF keys 𝐾1 and 𝐾2 such that PRF𝐾1(𝑥) = −PRF𝐾2(𝑥)
for all values of 𝑥 except the input with non-zero evaluation 𝑖. The
values PRF𝐾1(𝑖) and PRF𝐾2(𝑖) are random shares of the function
evaluation 𝛽 at the input 𝑖. If two parties need to generate 𝐾1 and
𝐾2 in a distributed way, they can use secure general computation
for this task, and Doerner and shelat [23] show a more efficient
way to construct such an MPC protocol in the semi-honest setting.
When one of the parties, P2, knows 𝑖, we can construct 𝐾1 and
𝐾2 in a distributed fashion as follows. First, P1 and P2 run a secure
(𝑛 − 1)-out-of-𝑛-ROT key generation protocol (the construction
and
from the previous section), for the parties to obtain keys 𝐾ROT1
. Note that, if the parties compute r𝑏 = ROT.Expand(𝑏, 𝐾ROT
),
𝐾ROT2
the vectors r1, r2 coincide at every position except for a position
𝑖 known to P2. As P2 can negate its vector, we can think of r1
and −r2 as additive shares of a vector of all zeroes except for the
𝑖th position. Now all that remains is to modify r1 and −r2 to fix
the 𝑖th position to be a share of a value 𝛽 shared among P1 and
P2 (see Protocol 3). Crucially, this needs to be done in a way that
does not leak 𝛽 to either party, and keeps 𝑖 private from P1. To
do this we leverage the observation that P1 and P2 can compute
𝑗 . The difference 𝑅 − 𝑅′ will
be the evaluation of PRF𝐾1( 𝑗). Since the parties have shares 𝛽1
and 𝛽2 of the point function evaluation 𝛽 at 𝑖, we complete the
protocol by P1 sending 𝑅𝛽 = 𝑅 − 𝛽1 to P2 (note that this hides
𝛽1 because P2 does not know 𝑟1
𝑖 , which is a random mask) who
𝑗 and 𝑅′ = 𝑗≠𝑖 𝑟2
sums 𝑅 = 𝑗 𝑟1
𝑏
0
1
0
1
0
1
1
0
1
OT
OT
OT
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0