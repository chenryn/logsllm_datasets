public-key infrastructures. In SWP, 1998.
[14] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decen-
tralized trust management. In IEEE S & P, 1996.
[15] Matt Blaze, Joan Feigenbaum, and Martin Strauss.
Compliance checking in the policymaker trust manage-
ment system. In FC, 1998.
[16] D. Boneh and M. Franklin. Identity-based encryption
from the weil pairing. In SIAM J Comput, 2003.
[17] Christian Cachin. Architecture of the hyperledger
blockchain fabric. 2016.
[18] Ke Chen, Kai Hwang, and Gang Chen. Heuristic dis-
covery of role-based trust chains in peer-to-peer net-
works. IEEE TPDS, 20(1):83–96, 2009.
[19] Dwaine Clarke et al. Certiﬁcate chain discovery in SP-
KI/SDSI. Journal of Computer Security, 2001.
[20] James C Corbett et al. Spanner: Google’s globally dis-
tributed database. ACM TOCS, 31(3):8, 2013.
[21] Henry Corrigan-Gibbs, Dan Boneh,
and David
Mazi`eres. Riposte: An anonymous messaging system
handling millions of users. In IEEE S&P, 2015.
[22] Kyle Croman et al.
blockchains. In FC, 2016.
On scaling decentralized
[23] Adam Eijdenberg, Ben Laurie, and Al Cutter. Ver-
https://github.com/
iﬁable data structures.
google/trillian/blob/master/docs/
VerifiableDataStructures.pdf.
[24] Carl M Ellison, Bill Frantz, Butler Lampson, Ron
Rivest, Brian M Thomas, and Tatu Ylonen. SPKI ex-
amples, 1998.
[25] Ksenia Ermoshina, Francesca Musiani, and Harry
Halpin. End-to-end encrypted messaging protocols:
An overview. In INRIA, 2017.
[26] Evernym Inc. Everynm: Self-sovereign identity with
veriﬁable claims, 2018.
[27] A. Felkner and A. Kozakiewicz. Practical extensions
of trust management credentials. In iNetSApp. 2017.
[28] Earlence Fernandes, Amir Rahmati, Jaeyeon Jung, and
Atul Prakash. Decentralized action integrity for trigger-
action IoT platforms. In NDSS, 2018.
[29] Philip WL Fong. Relationship-based access control:
protection model and policy language. In CODASPY,
2011.
[30] Keith Frikken et al. Attribute-based access control with
hidden policies and hidden credentials. IEEE TC, 2006.
[31] Google. GRPC, a high performance, open-source uni-
versal RPC framework. https://grpc.io/.
[32] Google. Key transparency. https://github.
com/google/keytransparency/blob/
master/docs/design.md.
[33] Google.
Trillian.
google/trillian.
https://github.com/
[34] Google.
VLBM implementation.
https:
//github.com/google/trillian/tree/
master/examples/ct/ctmapper.
[35] V. Goyal, O. Pandey, A. Sahai, and B. Waters.
Attribute-based encryption for ﬁne-grained access con-
trol of encrypted data. In CCS, 2006.
[36] OAuth Working Group. Oauth 2 token exchange.
https://tools.ietf.org/html/draft-
ietf-oauth-token-exchange-15, 2018.
[37] Jason E Holt et al. Hidden credentials. In ACM work-
shop on privacy in the electronic society, 2003.
[38] Sam Kumar, Yuncong Hu, Michael P Andersen,
Raluca Ada Popa, and David E. Culler. JEDI: Many-
to-many end-to-end encryption and key delegation for
iot. In USENIX Security, 2019.
[39] Selena Larson. Every single yahoo account was hacked
- 3 billion in all, October 2017. Online.
[40] Ben
Laurie.
Revocation
Transparency.
https://www.links.org/files/
RevocationTransparency.pdf, 2018.
[41] Ben Laurie, A. Langley, and E. Kasper. Certiﬁcate
transparency (rfc 6992), 2013.
[42] David Lazar.
Open-source IBE implementation.
https://github.com/vuvuzela/crypto.
[43] Ninghui Li et al.
Design of a role-based trust-
management framework. In IEEE S & P, 2002.
[44] Ninghui Li et al. Distributed credential chain discovery
in trust management. J. CS, IOS Press, 2003.
[45] Ninghui Li and John C. Mitchell. Datalog with con-
straints: A foundation for trust management languages.
In PADL, 2003.
[46] Benoˆıt Libert and Jean-Jacques Quisquater.
Identity
based encryption without redundancy. In ACNS, 2005.
[47] Marcela S. Melara et al. CONIKS: Bringing key trans-
parency to end users. In USENIX Security, 2015.
1390    28th USENIX Security Symposium
USENIX Association
[48] Sascha M¨uller and Stefan Katzenbeisser. Hiding the
policy in cryptographic access control. In STM, 2011.
[49] Ronald Rivest and Butler Lampson. SDSI-a simple dis-
tributed security infrastructure. CRYPTO, 1996.
[50] Martin Schanzenbach et al. Practical decentralized
attribute-based delegation using secure name systems.
arXiv:1805.06398, 2018.
[51] Kent E. Seamons et al. Requirements for policy lan-
guages for trust negotiation. In POLICY. IEEE, 2002.
[52] Hossein Shafagh, Lukas Burkhalter, Simon Duquen-
noy, Anwar Hithnawi, and Sylvia Ratnasamy. Droplet:
Decentralized authorization for iot data streams, 2018.
[53] Adi Shamir. How to share a secret. Comm. ACM, 1979.
[54] Mudhakar Srivatsa and Mike Hicks. Deanonymiz-
ing mobility traces: Using social network as a side-
channel. In ACM CCS, 2012.
[55] The Sovrin Foundation. A protocol and token for self-
sovereign identity and decentralized trust, 2018.
[56] Vamsi Thummala and Jeff Chase. SAFE: A declarative
trust management system with linked credentials. arXiv
preprint arXiv:1510.04629, 2015.
[57] Daniel Trivellato et al. GEM: A distributed goal evalu-
ation algorithm for trust management. TPLP, 2014.
[58] Marianne Winslett, Ting Yu, Kent E Seamons, Adam
Hess, Jared Jacobson, Ryan Jarvis, Bryan Smith, and
Lina Yu. Negotiating trust in the web. IEEE IC, 2002.
[59] Xian Zhu et al. Distributed credential chain discov-
ery in trust-management with parameterized roles. In
CANS, 2005.
A Proof of ULDM Security Guarantee
We provide a proof sketch for Guarantee 2.
Proof Sketch for Guarantee 2. We show that
if neither
clients in C nor the auditor A detect an attack, then there ex-
ists a possible history H of requests consistent with L and all
responses to requests in R. Concretely, we show that the Op-
eration Log that the storage server tells the auditor A is such
a valid history H. Because A did not detect an inconsistency,
we know that, for each client c ∈ C, (1) its Map Root Log
head, at some point after its last request in R, is consistent
with H. Because c did not detect an inconsistency, we know
that (2) c’s sequence of Map Root Log heads is append-only,
(3) for each request, the returned object did (or did not, if
no object was returned) exist in the Object Map, and (4) for
each request, the Map Root Log at the time of the request
contains the object map used in (3).
Together, (1) and (2) indicate that (5) the client’s entire
sequence of Map Root Log heads is consistent with H. To-
gether, (3) and (4) indicate that (6) the response received for
each request in R is consistent with the current Map Root Log
head at the time of the request. Putting together (5) and (6),
we can conclude that the response that each client receives to
each request in R is consistent with H. Putting together (2)
and (6), we can conclude that H is consistent with the partial
ordering imposed by Map Root Log heads for each client c.
Because clients make requests to the server to validate ev-
ery Merge Promise, this also guarantees that H is consistent
with the partial ordering imposed by Merge Promises. Thus,
H fulﬁlls all desired properties.
B RDE Security Guarantee
Below, we develop deﬁnitions to precisely describe the
global authorization graph, and then we use them to formal-
ize RDE’s security guarantee.
Deﬁnition 1 (Path). Let x and y be entities. (A1, . . . ,An)
is a path from x to y if either n > 0 and A1.issuer = x,
An.subject = y, and Ai.subject = Ai+1.issuer for all i ∈
{1, . . .n− 1}, or n = 0 and x = y.
Deﬁnition 2 (Compatibility). Let A and B be attestations
such that A.subject = B.issuer. We write A (cid:32) B and say
“A is partition-compatible with B” if a key corresponding to
one of the ID∗s in Q(A.policy) can decrypt a WIBE cipher-
text with the ID P(B.policy). We analogously write A (cid:26) B
and say “A is partition-label-compatible with B” if a key
corresponding to one of the ID∗s in M(A.policy) can decrypt
an IBE ciphertext with the ID L(B.policy). We extend this to
paths as follows. A path (A1, . . . ,An) is partition-compatible
if either n = 0, or Ai (cid:32) Ai+1 for all i ∈ {1, . . . ,n−1}. A path
(A1, . . . ,An) is partition-label-compatible if either n = 0, or
A1 (cid:26) A2 and (A2, . . . ,An) is partition-compatible.
Based on our deﬁnitions of P, Q, L, and M in §4.3 and
§4.4, we can attach semantic meaning to compatibility:
Note 1 (Compatibility Semantics for RTree). A (cid:32) B means
that A.policy and B.policy have overlapping time ranges,
URIs with the same namespace, and the same permission
string. A (cid:26) B means that A.policy and B.policy have URIs
with the same namespace.
Now, we formally deﬁne the states attached to an attes-
tations during the discovery process (§4.7) so we can later
express the leakage of an attestation in each state.
Deﬁnition 3 (Attestation State Machine). Let A be an at-
testation.
If there exists a partition-compatible path p =
(A,P1, . . . ,Pn) to an entity compromised by Adv, then we say
that A is useful with respect to Adv.
if
Otherwise,
there exists a partition-label-compatible
path p = (A,P1, . . . ,Pn) to an entity compromised by Adv,
then we say that A is partition-known with respect to Adv.
Otherwise, if there exists a partition-compatible path from
A.subject to an entity compromised by Adv, then we say that
A is interesting with respect to Adv.
Otherwise, we say that A is unknown with respect to Adv.
From D’s perspective in Fig. 2, for example, #1, #4, and
#3 are useful, #5 is partition-known, and #2 is unknown.
The components of an RTree policy are described in §2.4.
USENIX Association
28th USENIX Security Symposium    1391
Based on Deﬁnition 3, we can now informally state the
security guarantee of RDE. Let A be an attestation such
that there does not exist a partition-compatible path from
A.subject to a partition-compatible cycle in the global autho-
rization graph. If A is unknown or interesting with respect
to Adv, then Adv learns nothing about A except A.subject
If A is partition-known
and A’s revocation commitment.
with respect to Adv, then Adv learns nothing about A except
(1) A.subject, and (2) P(A.policy). If A is useful with respect
to Adv, then Adv can decrypt A and see all of its ﬁelds.
We now formalize the security guarantee of RDE as a
game played by a challenger Chl and an adversary Adv.
Guarantee 3 (RDE). Let λ denote the security parameter.
Consider any list of entities in the system, represented as
names in {0,1}∗, any subset of these entities compromised
by Adv, and any two authorization graphs G0 and G1 each
described as a list of attestations in terms of the entity names,
subject to the constraints below:
1. |G0| = |G1| and attestations at position i in the lists of G0
and G1 must have the same length. We say that these two
attestations correspond.
2. Corresponding attestations must have the same state
unknown/interesting/partition-known/useful w.r.t. Adv.
3. If corresponding attestations are useful to Adv, or if ei-
ther has a partition-compatible path from its subject to a
partition-compatible cycle, then they must be identical.
4. If corresponding attestations A0 and A1 are partition-
known to Adv, or if
there exists a partition-label-
compatible path from A0.subject (or A1.subject) to a
partition-compatible cycle in G0 (or G1), they must have
the same subject and revocation commitment and satisfy
P(A0) = P(A1), but may otherwise differ arbitrarily.
5. If corresponding attestations are unknown or interesting
to Adv (and if there is no partition-label-compatible path
from the subject to a partition-compatible cycle) then they
must have the same subject and revocation commitment,
but may otherwise differ arbitrarily.
Each attestation in the graph is described in terms of the
information in §2.1, not RDE ciphertexts. RDE guarantees
that Adv’s advantage in the following game is negligible in
the security parameter λ :
Initialization. Chl generates each entity’s keypairs. It sends
to Adv the public keys (veriﬁcation key and WIBE/IBE public
parameters) corresponding to each entity. For entities cor-
responding to malicious users, Chl also provides the secret
keys (signing key and WIBE/IBE master keys). Furthermore,
Chl chooses a random bit b ∈ {0,1}, computes the RDE ci-
phertext for each attestation in Gb, and gives them to Adv.
Guess. Adv outputs a bit b(cid:48) ∈ {0,1}. The adversary’s ad-
vantage in the game is deﬁned as(cid:12)(cid:12)Pr[b = b(cid:48)]− 1
(cid:12)(cid:12).
The constraints on cycles in Conditions #3, #4, and #5
are due to the lack of KDM-security for the WIBE and IBE
used. It may be possible to remove these constraints with
KDM-secure variants.
2
Proof Sketch for Guarantee 3. We deﬁne a new game in
which Adv has no advantage and prove via a hybrid argu-
ment that Adv’s advantage in the real game differs from its
advantage in this new game by at most a negligible amount.
In the hybrid argument, each hybrid represents a game. In
the sequence of hybrids, the encrypted graph provided by the
challenger if b = 0 is identical to the encrypted graph in the
previous hybrid, except that either (1) one of the WIBE or
IBE ciphertexts generated by Chl in the Challenge phase is
replaced with an encryption of a different string of correct
length, or (2) the ID used for IBE encryption is changed to
a different ID. Adv cannot distinguish between adjacent hy-
brids due to CPA-security of WIBE and IBE in case (1), and
due to the anonymity of IBE in case (2). Because adjacent
hybrids are indistinguishable to Adv, the difference in its ad-
vantage in adjacent hybrids is negligible. The ﬁrst game is
the real game (Guarantee 3). In the ﬁnal game, Adv’s ad-
vantage is 0. By the hybrid argument, we can conclude that
Adv’s advantage in the real game is negligible.
The order in which ciphertexts are replaced must be cho-
sen carefully. This is because a ciphertext cannot be replaced
with an encryption of zero if a secret key to decrypt the ci-
phertext exists in the graph. We now describe the hybrids.
We identify attestations in the graph in Conditions #4
and #5. Observe that the “partition-compatible” relation de-
ﬁnes a directed graph over these attestations in each G0 and
G1, where each attestation is a vertex and edges indicate
partition-compatibility. We denote these new graphs S0 and
S1. Both S0 and S1 are directed acyclic graphs, due to the
stipulations in Conditions #4 and #5 regarding cycles. Thus,
S0 and S1 can be linearized. Via a sequence of hybrids, we
ﬁrst replace ciphertexts provided by Chl when it chooses
b = 0 with encryptions of a dummy “zero string,” follow-
ing the reverse order of S0’s linearization. For attestations
in Condition #4, we replace the WIBE ciphertexts in the at-
testations with encryptions of zero, in a single hybrid game
for each attestation. For each attestation in Condition #5, we
make two hybrid games; the ﬁrst replaces its IBE ciphertext
with an encryption of zeros, and the second replaces the ID
used to encrypt with IBE for that ciphertext with a dummy
ID. At the end of this hybrid sequence, the challenger pro-
vides a graph containing encryptions of zero in non-useful
attestations if b = 0, and a proper encryption of G1 if b = 1.
This is followed by another sequence of hybrids where we
similarly transform the encryptions of zero provided by the
challenger if b = 0 to proper encryptions of the attestations in
G1. This is done by transforming attestations in the forward
order of S1’s linearization. In the ﬁnal game, the challenger
provides a graph containing a proper encryption of G1, re-
gardless of the chosen bit b, so Adv’s advantage is 0. This
completes the proof sketch.
1392    28th USENIX Security Symposium
USENIX Association