DDoS Black and White 
“Kungfu” Revealed 
(DEF CON 20 Edition)
{Tony Miu (aka MT),
Anthony Lai (aka Darkfloyd),
Alan Chung (aka Avenir),
Kelvin Wong (aka Captain)}
Valkyrie-X Security Research Group 
(VXRL)
Disclaimer
• There is no national secrets leaked here. 
• Welcome to all national spies. 
• No real attacks are launched.
• Please take it at your own risk. We can't 
save you from the jail.
We don't talk about…
There is a real good 
DDoS business in 
China because it 
creates attack 
assignments and lots 
of defense 
opportunities in other 
world.
Thank you so much, 
China, Xie Xie!
We don't talk about ....
For example: http://www.1380sf.com/
Agenda
• Members introduction
• Research and Finding
– Part 1: Layer-7 DoS vulnerability analysis 
and discovery.
– Part 2: Core Attack Concept and Empower 
Attack Server with demos
– Part 3: Defense Model
Biography
Tony Miu (aka MT)
•Apart from a being a researcher at VXRL, MT currently 
working at Nexusguard Limited.  Throughout his tenure, MT 
has been at the forefront of the cyber war zone - 
responding to and mitigating myriads of cyber attacks that 
comes in all forms and manners targeted at crushing their 
clients' online presence.
•MT's task is clearly critical.  It is therefore imperative that 
MT be well versed in the light and dark sides of DDoS 
attack methodologies and undertakes many leading role in 
both DDoS kungfu and defense model projects.
Biography
Anthony Lai (aka Darkfloyd)
• Focuses on reverse engineering and malware 
analysis as well as penetration testing. His interest 
is always falling on CTF and analyzing targeted 
attacks.
• Founder of VXRL.
• He has spoken in Black Hat USA 2010, DEF CON 
18 and 19, AVTokyo 2011, Hack In Taiwan 2010 and 
2011 and Codegate 2012.
• His most recent presentation at DEF CON was 
about APT Secrets in Asia.
• His recent fun experience was winning 12,000 TWD 
with PLUS CTF team in HITCON 2012 
Biography
Alan Chung (aka Avenir)
• Avenir has more than 8 years working 
experience on Network Security. He currently is 
working as a Security Consultant for a 
Professional Service provider. 
• Alan specializes in Firewall, IDS/IPS, network 
analysis, pen-test, etc. Alan’s research interests 
are Honeypots, Computer Forensics, 
Telecommunication etc. 
Biography
Kelvin Wong (aka Captain)
• Works in law enforcement over 10 years 
responsible for forensics examination and 
investigation; research and analysis.
• Investigate various reported criminal cases 
about DDoS and network intrusion.
• A real frontline officer fights against the 
criminals and suspects. 
Part 1: Layer-7 DoS vulnerability analysis and 
discovery.
Research and Findings
Test Methodology
• We have used a few common Layer-7 
DoS techniques in our test:
– HTTP GET and POST methods
– HTTP Pipelining
– Malformed HTTP request
– Manipulate TCP x HTTP vulnerabilities
Techniques Overview : Pre-Attack
• Find out any HTTP allowed methods
• Check whether a site accepts POST method as well 
even it accepts GET method in the Web form
• Check out any resources-intensive function like 
searching and any function related to database retrieval.
• Check out any HTTP response with large payload 
returned from the request. 
• Check out any links with large attachment including .doc 
and .pdf files as well as media (.mp4/mp3 files) (i.e. 
JPEG could be cached)
• Check whether HTTP response is cached or not
• Check whether chunked data in HTTP response packet 
from the target is allowed. (i.e. incomplete request)
Techniques Overview : 
Attack Techniques
Attack Combo #1:
• Seek and manipulate the TCP and HTTP 
characteristics and vulnerabilities
• Find any URL(s) which accepts POST 
-> Change Content Length to 9999 (i.e. 
abnormal size) bytes 
-> See whether it keeps the connection alive
(Attack Combo #1 Detailed explanation in Part 2)
Techniques Overview : 
Post-Attack Techniques
Attack Combo #1:
We could guess and learn the behavior and
devices behind:
• Check the TCP established state timeout value
• Check the TCP first PSH/ACK timeout value
• Check the TCP continuous ACK timeout value
• Check the TCP first FIN_WAIT1 timeout value
• Check the TCP last ACK timeout value
Techniques Overview : 
Post-Attack Techniques
Attack Combo #1 (Continue):
• Wait for FIN/ACK – Initiated by target’s server
• Wait for RST/ACK – Initiated by requestor, 
target’s server or CDN
• Wait for RST – Initiated by device like IDS, IPS, 
etc
Techniques Overview :  
Post-Attack Techniques
Goals
• Calculation of resources could help to 
bring down the target.
• Trace its detection (i.e. Rate Limit)
• Guess its DDoS mitigation(s)
• Submit an incomplete HTTP POST packet 
attack to the back-end server.
Techniques Overview : 
Attack Techniques
Attack Combo #2:
• Manipulate the vulnerabilities due to poor 
server hardening.
• Accept a simple HTTP request (i.e. accept 
simple HTTP request connection including 
fields like HOST, Connection and ACCEPT 
only)
Simple GET attack pattern in 4 
years ago
• GET / HTTP/1.1\r\n
Host: www.xxx.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n\r\n
• The site does not check cookie value, referer 
value.
• It means there is NO HARDENING 
• User-Agent value: Mozilla/4.0\r\n is a common 
botnet used “label”, however, it still could be 
accepted.
Techniques: Attack Techniques
Attack Combo #2:
• Whether it accepts HTTP pipelining
– It is a RFC standard but rare to use
GET / HTTP/1.1\r\nHost: www.xxxxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\nGET /?123 
HTTP/1.1\r\nHost: www.xxxxxx.com\r\nUser-Agent: Mozilla/4.0\r\nConnection: keep-alive\r\n\r\n")
Techniques: Attack Techniques
Attack Combo #2:
- Utilize all HTTP requests (PSH/ACK) in the 
same packet with size lower than 1500 bytes.
- HTTP request in packet could be multiplied by 
7 times or more.
Techniques: Attack Techniques
Attack Combo #2:
• Finding large-size packet data payload like 
picture and audio files, which could not be 
cached and with authentication check (like 
CAPTCHA) in advance.
• Goals:
– Increase loading of server and CPU and 
memory usage
– Increase the bandwidth consumption
Techniques: Attack Techniques
Attack Combo #2:
• Force to get a new session and connection without 
cache. It could “guarantee” bypass load balancer and 
Proxy.
• Force not to load cache, for example:
• http://www.abc.com/submitform.asp?
234732893845DS4fjs9 
• Cache:no cache and expiry date is 1994
Techniques: Attack Techniques
•
Attack Combo #2
•
Combined with Simple GET, HTTP Pipelining and Force not loading cache
GET /download/doc.pdf?121234234fgsefasdfl11 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n\r\n
GET /download/doc.pdf?121234234fgsefasdfl22 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n\r\n
GET /download/doc.pdf?121234234fgsefasdfl33 HTTP/1.1\r\n
Host: www.xxxxyyyyzzzz.com\r\n
User-Agent: Mozilla/4.0\r\n
Connection: keep-alive\r\n\r\n
We follow RFC all the time 
Our Test Targets
•United State ( 39 )
•Europe (20)
•Asia Pacific (20)
7/11/12
It looks like we also test a CDN....
Test Summary
We only test their landing page only:
Accept simple GET: 26/39
Accept simple POST (without Content Length): 4/39
Method not allowed: 5/39
Accept simple POST (with Content Length):17/39; 
Method not allowed: 8/39
Accept HTTP pipelining: 34/39
Simple GET – Accept Botnet-
favorite GET header?! 
7/11/12
Simple GET with Pipelining
7/11/12
Simple GET with Pipelining
7/11/12
Simple POST
7/11/12
Simple POST
7/11/12
Network Giant: I am shit corps?! 
(Nothing doing with DoS )
7/11/12
Summary
1.Simple GET should be banned;
2.We don't think they should accept content length with 
invalid value, check length is required;
3. Page does not support POST could accept POST request; 
Page is supposed not to accept any method(s) it does not 
support;
4. A few corps still disclosed its supporting method. As attack 
method is not just limited to GET and POST. Did they carry 
out any basic assessment?
It looks nothing special yet but they are prerequisites for 
our further test and part 2 
Further ...
Content Length is 999 or 9999 Accepted:
Amazon
American airline
CNN
GS
Mastercard (Let us dive into this case)
McDonalds
......
Deep Analysis: Mastercard.us
Simple GET - Lazy to fill in the HTTP 
Field, please help, Akamai
Notice: Plz don’t test on “GET HTTP/1.1” or 
database related application, it will reply too 
many things
Dear Customer,
For the improvement of our service, there are NO 
CAPTCHA and auth, you can download PDF, SWF, ZIP 
freely.
SIMPLE POST is not allowed
We have advance POST method, it will hold 
TCP established state ~2mins.
I hate cookies, I hate POST data 
Is Akamai bypassed?
Defense point of view
•
Loadbalancer/proxy will forward the 
incomplete HTTP request
•
If something dropped the incomplete 
request:
•
Case 1: Security device interrupt the incoming traffic 
and RST send to Server. 
•
Case2: Security send the RST or RST ACK to Client.
7/11/12
We never know there is POST 
method in DoD 
We never know the Advanced Search in HKEX 
using POST method and heavy loading(Hong 
Kong Trading Halted by DDoS) 
Suggested Attack Pattern
• No chance to use it, simple GET / POST 
is always working.
    GET /?xxxxxxxxxx HTTP/1.1\r\n
Host: www.ddd.ccc\r\n
Accept: */*\r\n
Accept-Language: en-us\r\n
Accept-Encoding: gzip, deflate\r\n
User-Agent: User-Agent: Mozilla/4.0 (Windows; U; Windows NT 5.1; en-GB; 
rv:1.9.2.20) \r\n 
Connection: Keep-Alive\r\n\r\n
7/11/12
Part 2: Core Attack Concept and Empower an Attack 
Server (with demos)
Before taking Appetizer, let us 
do the demo
Let us give three demos:
Attack Server: Backtrack 5, 512M Ram, 2 CPU (VM)
Web Server(victim): Windows server 2008 R2, IIS 7.5 with a text 
web page, 2G RAM, no application and database, hardware PC.
1.Attack target server and stuck TCP state CLOSE_WAIT
2.Attack target server and stuck TCP state FIN_WAIT1
3.Attack target server and stuck TCP state Established
7/11/12
Attack Goals
Demo 1: Cause server unstable
Demo 2: Cause the unavailability of service 
in a minute
Demo 3: Cause the unavailability of service 
instantly
7/11/12
Demo time – Server Side
1 bytes = 8 bit, we use bit per 
second(bps) in networking. windows 
use byte per second!!!
Incoming attack traffic
Demo1:  ~2.7mx8 = 21 mbps
Demo2: ~1.3mx8=10.4mbps
Demo3: ~1mx8=8mbps
7/11/12
What are the theories and ideas 
behind Demos 1-3?
7/11/12
Core Attack Concept
•
Don’t focus on HTTP method. This server is not 
killed by HTTP related vulnerability.
Otherwise,
•
HTTP GET flood - unstable and high CPU
•
HTTP POST flood - unstable and high CPU
•
HTTP HEAD flood - unstable and high CPU
•
HTTP XXX flood - xxxx and high xxxx only
•
Demo 1 attack also unstable and high CPU only
We are not DoS attack to OS and 
Programming Language
•
This attack is against to a kind of OS and 
programming language. e.g. Apache killer, etc.
•
Our Attack FOCUS is on Protocol – TCP and 
HTTP, we are going to do a TCPxHTTP killer.
•
Any server not using TCP and HTTP?
We do not present IIS killer, Apache killer, Xxx 
killer!!!
TCP state is the key
• Focus on TCP state. 
• Use the HTTP as an example to control the TCP state.
• Manipulate the TCP and HTTP characteristics and 
vulnerabilities
• Server will reserve resource for different TCP states.
• The Same Layer 7 Flood to Different targets can 
different TCP state.
• TCP state attack is decided upon various cases, 
depends on web application, OS and HTTP Method.
• The key is based on reply of server. E.g. Fin-Ack, RST, 
RST-Ack, HTTP 200, HTTP 302…etc.
Logical Diagram
Super combo Period =TCP State
7/11/12
Health = Server 
resourcePoint 
Hits = TCP 
Connection
Kyo = Attack server
Super combo 
= HTTP 
Request
Power= 
High 
CPU
Andy 
in fire 
= Web 
server
Keep Super Combo to Andy
•We wish to extent the super combo period!!!
•We will discuss the 3 different TCP states.
•Targeted TCP state:
•  Demo 1: TCP CLOSE_WAIT
•  Demo 2: TCP FIN_WAIT_1
•  Demo 3: TCP ESTABLISHED
P.S. In King Of Fight 2003, it is bug.
Demo 1. TCP STAT CLOSE_WAIT
From RFC:
“CLOSE-WAIT - represents waiting for a connection termination 
request from the local user.” 
•
Demo 1 is simulating the most common DDoS attack.
•
Web server are only with high CPU usage and in unstable status
•
SLA  for Attacker, you are failed and no money!!!!
•
Hardened Web server = Loadbalancer.
•
If we use more zombies, it still working. But zombies = money……
Demo 1. TCP STAT CLOSE_WAIT
Just like a light punch, easy to defense~
Fix:
•Harden Server TCP parameters
•Most of network security devices can set the timeout (e.g. 
Proxy, firewall, DDoS mitigation device)
Demo 1. TCP STAT CLOSE_WAIT