接下来，让我们构建一个名为`my-app`的映像，它被构建为`FROM``my-base`映像，如下所示:
```
# my-app Dockerfile
FROM my-base:1.0
CMD ["sh"]
```
检查得到的`my-app`映像显示`ONBUILD`指令中提供的 LABEL 命令被及时发送，到达`my-app`映像:
![](img/a1594a9a-5813-48bd-ae3e-0c40d9ed65b3.png)
如果您对`my-base`映像进行类似的检查，您会发现它不包含版本和支持标签。还要注意的是`ONBUILD`指令是一次性使用的时光机。如果您要使用`FROM`指令中的`my-app`构建新映像，新映像将会*而不是*获得`my-base`映像的 ONBUILD 指令中提供的标签。
# 停止信号指令
`STOPSIGNAL`指令用于设置系统调用信号，该信号将被发送到容器，告诉其退出。指令中使用的参数可以是一个无符号数，它等于内核的 syscall 表中的一个位置，也可以是一个大写的实际信号名。以下是指令的语法:
```
# STOPSIGNAL instruction syntax
STOPSIGNAL signal
```
`STOPSIGNAL`指令的示例包括以下内容:
```
# Sample STOPSIGNAL instruction using a position number in the syscall table
STOPSIGNAL 9
# or using a signal name
STOPSIGNAL SIGQUIT
```
当发出`docker container stop`命令时，使用提供给`STOPSIGNAL`指令的参数。请记住，使用您的`ENTRYPOINT`和/或`CMD`指令的执行形式是至关重要的，以便应用是 PID 1，并将直接接收信号。这里有一个关于使用 Docker 信号的优秀博文的链接:[https://medium . com/@ gchudnov/trapping-signal-in-Docker-containers-7a 57 fdda 7d 86](https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86)。本文提供了一个使用 node.js 应用来处理信号的优秀示例，包括代码和 Dockerfile。
# SHELL 指令
正如您在本章的许多章节中所阅读的，有几个指令采用两种形式，exec 形式或 shell 形式。如上所述，所有外壳形式使用的默认值是 Linux 容器的`["/bin/sh", "-c"]`，Windows 容器的`["cmd", "/S", "/C"]`。`SHELL`指令允许您更改默认值。以下是`SHELL`指令的语法:
```
# SHELL instruction syntax
SHELL ["executable", "parameters"]
```
`SHELL`指令可以在 Dockerfile 中多次使用。所有使用外壳的指令，以及在`SHELL`指令之后的指令，都将使用新的外壳。因此，您可以根据需要在单个 Dockerfile 中多次更改外壳。这在创建窗口容器时尤其强大，因为它允许您在使用`cmd.exe`和`powershell.exe`之间来回切换。
# Docker 映像构建命令
好的，所以映像构建命令不是 Dockerfile 指令。相反，它是 docker 命令，用于将 docker 文件转换为 docker 映像。docker 映像构建命令将 docker 构建上下文(包括 Docker 文件)发送给 Docker 守护程序，Docker 守护程序解析 Docker 文件并逐层构建映像。我们将很快讨论构建上下文，但是现在，考虑它是基于 Docker 文件中的内容构建 Docker 映像所需的一切。构建命令语法如下:
```
# Docker image build command syntax
Usage: docker image build [OPTIONS] PATH | URL | -
```
映像构建命令有许多选项。我们现在不会涵盖所有选项，但让我们来看看一些最常见的选项:
```
# Common options used with the image build command
--rm         Remove intermediate containers after a successful build
--build-arg  Set build-time variables
--tag        Name and optionally a tag in the 'name:tag' format
--file       Name of the Dockerfile (Default is 'PATH/Dockerfile')
```
Docker 守护程序通过从 Dockerfile 中的每个命令创建一个新映像来构建映像。每一个新形象都是建立在以前的基础上的。当构建成功完成时，使用可选的`--rm`参数将指示守护程序删除所有中间映像。当您重建成功构建的映像时，使用此选项将会减慢构建过程，但会保持本地映像缓存更干净。
当我们讨论`ARG`指令时，我们已经讨论了构建参数。请记住，`--build-arg`选项是如何为 Dockerfile 中的`ARG`指令提供值的。
`--tag`选项允许你给你的映像一个更人性化的名字和版本。我们在前面的几个例子中也看到了这个选项。
`--file`选项允许您使用 Dockerfile 以外的文件名，并将 Dockerfile 保存在构建上下文文件夹以外的路径中。
以下是一些供参考的映像构建命令:
```
# build command samples
docker image build --rm --build-arg username=35 --tag arg-demo:2.0 .
docker image build --rm --tag user-demo:1.0 .
docker image build --rm --tag workdir-demo:1.0 .
```
您会注意到前面每个例子中的结尾`.`。此时间段表示当前工作目录是映像构建的构建上下文的根。
# 解析器指令
解析器指令是 Dockerfile 中可选注释行的一个特殊子集。任何解析器指令都必须出现在第一个普通注释行之前。它们还必须在任何空白行或其他构建指令之前，包括`FROM`指令。基本上，所有解析器指令都必须在 Dockerfile 的最顶端。顺便说一下，如果你还没有想通，你可以在 Dockerfile 中创建一个普通的注释行，以`#`字符开始。解析器指令的语法如下:
```
# directive=value
# The line above shows the syntax for a parser directive
```
那么，你能用解析器指令做什么呢？现在唯一支持的是`escape`。`escape`解析器指令用于更改使用什么字符来指示指令中的下一个字符将被视为一个字符，而不是它所代表的特殊字符。如果没有使用解析器指令，默认值为`\`。在本章的几个示例中，您已经看到了这种方法用于转义换行符，允许指令继续到 Dockerfile 中的下一行。如果需要使用不同的`escape`字符，可以使用`escape`解析器指令来处理。您可以将`escape`字符设置为两个选项之一:
```
# escape=\ (backslash)
Or
# escape=` (backtick)
```
一个例子是，当你在 Windows 系统上创建一个 Dockerfile 时，你可能想要改变用作`escape`字符的字符。如您所知，`\`用于区分路径字符串中的文件夹级别，如`c:\windows\system32
\drivers`。切换到`escape`字符的倒勾将避免需要转义这样的字符串:`c:\\windows\\system32\\drivers`。
# 构建上下文
构建上下文是使用构建映像命令时发送给 Docker 守护程序的所有内容。这包括 Dockerfile 和发出构建命令时当前工作目录的内容，包括当前工作目录可能包含的所有子目录。通过使用`-f`或`--file`选项，可以将 Dockerfile 放在当前工作目录之外的目录中，但是 Dockerfile 仍然与构建上下文一起发送。使用`.dockerignore`文件，当文件被发送到 Docker 守护程序时，您可以从构建上下文中排除文件和文件夹。
构建 Docker 映像时，保持构建上下文尽可能小是非常重要的。这是因为整个构建上下文被发送到 Docker 守护程序以构建映像。如果您在构建上下文中有不必要的文件和文件夹，那么它会减慢构建过程，并且根据 Dockerfile 的内容，会导致映像膨胀。这是一个非常重要的考虑因素，每个映像构建命令都将构建上下文的大小显示为命令输出的第一行。看起来是这样的:
![](img/b0300473-f75d-45ad-8bb7-c37fd77987bf.png)
构建上下文成为 Dockerfile 中命令的文件系统根。例如，考虑使用以下`COPY`指令:
```
# build context Dockerfile for Docker Quick Start guide
FROM scratch
COPY hello /
CMD ["/hello"]
```
这告诉 Docker 守护程序将`hello`文件从构建上下文的根复制到容器映像的根。
如果命令成功完成，将显示映像标识，如果提供了`--tag`选项，也将显示新的标签和版本:
![](img/a22a41a4-e7bb-47ec-8112-2e22153de989.png)
保持构建上下文小的关键之一是使用`.dockerignore`文件。
# 那个。dockerignore 文件
如果你熟悉使用`.gitignore`文件，那么你就已经对`.dockerignore`文件的用途有了一个基本的了解。`.dockerignore`文件用于在 docker 映像构建期间排除不想包含在构建上下文中的文件。使用它有助于防止敏感文件和其他不需要的文件包含在构建上下文中，并可能包含在 docker 映像中。这是一个很好的工具，有助于保持你的 Docker 映像小。
`.dockerignore`文件需要在构建上下文的根文件夹中。像一个`.gitignore`文件一样，它使用一个换行符分隔的模式列表。`.dockerignore`文件中的注释以`#`作为一行的第一个字符。您可以通过包含例外行来覆盖模式。例外行以`!`作为该行的第一个字符。所有其他行都被视为用于排除文件和/或文件夹的模式。
`.dockerignore`文件中的行顺序很重要。文件中后面匹配的线条模式将覆盖文件中前面匹配的线条。如果您添加了与`.dockerignore`文件或 dockerfile 文件相匹配的模式，它们仍将与构建上下文一起发送给 Docker 守护程序，但它们将不可用于任何`ADD`或`COPY`指令，因此不会出现在结果映像中。这里有一个例子:
```
# Example of a .dockerignore file
# Exclude unwanted files
**/*~
**/*.log
**/.DS_Store
```
# 摘要
好的！那是一次冒险。你现在应该能够建立任何类型的 Docker 形象，你的心所希望的。你知道什么时候用`COPY`对`ADD`，什么时候用`ENV`对`ARG`，也许最重要的是，什么时候用`CMD`对`ENTERYPOINT`。你甚至学会了如何穿越时间！这些信息确实是开始使用 Docker 的一个很好的基础，并且在您开发更复杂的 Docker 映像时将作为一个很好的参考。
希望你从这一章中学到了很多，但我们还有更多要学的，所以让我们把注意力转向下一个话题。在[第 4 章](4.html)*Docker 卷*中，我们将了解更多 Docker 卷的信息。翻开新的一页，让我们继续我们的快速入门之旅。
# 参考
有关本章中讨论的主题的信息，请查看以下链接:
*   hello-world GitHub 存储库:[https://github.com/docker-library/hello-world](https://github.com/docker-library/hello-world)
*   Docker 卷:[https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)
*   使用带有 Docker 的信号:[https://medium . com/@ gchudnov/trapping-signal-in-Docker-containers-7a 57 fdda 7d 86](https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86)
*   `.dockerignore`参考文件:[https://docs . docker . com/engine/reference/builder/# dockrignore-file](https://docs.docker.com/engine/reference/builder/#dockerignore-file)
*   Dockerfile 的最佳实践:[https://docs . docker . com/v 17.09/engine/user guide/eng-image/docker file _ best-practices/](https://docs.docker.com/v17.09/engine/userguide/eng-image/dockerfile_best-practices/)