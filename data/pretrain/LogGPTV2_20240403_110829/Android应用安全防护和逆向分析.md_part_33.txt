::: bodypic-c
![](OEBPS/Images/326-2-i.jpg){.calibre773}
:::
下面还需要做一步，就是还原JNI函数方法名。一般JNI函数方法名是一个指针加上一个数字，比如v3+676。然后将这个地址作为一个方法指针进行方法调用，并且第一个参数就是指针自己，比如（v3+676）（v3...）。这实际上就是在JNI里经常用到的JNIEnv方法。因为IDA并不会自动对这些方法进行识别，所以当对so文件进行调试的时候经常会见到却搞不清楚这个函数究竟在干什么，因为这个函数实在是太抽象了。解决方法非常简单，只需要对JNIEnv指针做一个类型转换即可。比如说上面提到a1和v4指针，如下所示：
::: bodypic-c
![](OEBPS/Images/326-3-i.jpg){.calibre774}
:::
可以选中a1变量，然后按一下y键，如图22-2所示。
::: bodypic-c
![](OEBPS/Images/22a2-i.jpg){.calibre775}
:::
图22-2 选中变量
然后将类型声明为JNIEnv\*，如图22-3所示。
::: bodypic-c
![](OEBPS/Images/22a3-i.jpg){.calibre775}
:::
图22-3 设置JNIEnv\*指针
确定之后再来看，如下所示：
::: bodypic-c
![](OEBPS/Images/327-i.jpg){.calibre776}
:::
修改之后是不是瞬间清晰了很多。另外还总结了所有JNIEnv方法对应的数字、地址以及方法声明，如下所示：
::: bodypic-c
![](OEBPS/Images/327-2-i.jpg){.calibre777}
:::
###### 2.打开字符串内容窗口快捷键 {.section-subtitle}
用Shirt+F12快捷键快速打开so中所有的字符串内容窗口，如图22-4所示。
::: bodypic-c
![](OEBPS/Images/22a4-i.jpg){.calibre778}
:::
图22-4 so中字符串内容窗口
有时候，字符串是一个非常重要的信息，特别是对于破解的时候，可能就是密码，或者是密码库信息。
###### 3.定位so中段地址快捷键 {.section-subtitle}
Ctrl+S快捷键有两个用途，在正常打开so文件的IDA
View视图的时候，可以查看so对应的段信息，如图22-5所示。
::: bodypic-c
![](OEBPS/Images/22a5-i.jpg){.calibre779}
:::
图22-5 打开so中的段信息
可以快速得到一个段的开始位置和结束位置，不过这个位置是相对位置，不是so映射到内存之后的位置，关于so中的段信息，已经在前面章节中详细介绍。
当在调试页面的时候，用Ctrl+S键可以快速定位到想要调试的so文件映射到内存的地址，如图22-6所示。
::: bodypic-c
![](OEBPS/Images/22a6-i.jpg){.calibre780}
:::
图22-6 定位调试的so文件的内存地址
一般一个程序肯定会包含多个so文件，比如系统的so文件就有好多，一般都是在/system/lib下面，当然也有自己的so，这里可看到开始位置和结束位置就是这个so文件映射到内存中，如下所示：
::: bodypic-c
![](OEBPS/Images/329-i.jpg){.calibre781}
:::
这里可以使用cat命令查看一个进程的内存映射信息：
::: bodypic-c
![](OEBPS/Images/329-2-i.jpg){.calibre782}
:::
看到映射信息中有多个so文件，其实这不是多个so文件，而是so文件中对应的不同Segement信息被映射到内存中的，一般是代码段、数据段等，因为需要调试代码，所以只关心代码段。代码段有一个特点就是具有执行权限x，只需要找到权限中有x的那段数据即可。
###### 4.跳转到指定地址快捷键 {.section-subtitle}
在IDA调试页面的时候，可以使用G键快速跳转到指定的内存位置，如图22-7所示。
::: bodypic-c
![](OEBPS/Images/22a7-i.jpg){.calibre783}
:::
图22-7 跳转到指定内存位置\
这里的跳转地址是可以算出来的。比如现在想跳转到A函数，然后下断点，那么可以使用上面说到的Ctrl+S查找到so文件的内存开始的基地址，然后再用IDA
View中查看A函数对应的相对地址，相加就是绝对地址，然后跳转到即可，比如这里的：Java_cn_wjdiankong_encryptdemo_MainActivity_isEquals函数的IDA
View中的相对地址是（也就是so文件的地址）E9C，如下所示：
::: bodypic-c
![](OEBPS/Images/330-i.jpg){.calibre784}
:::
上面看到so文件映射到内存的基地址为74FE4000，如下所示：
::: bodypic-c
![](OEBPS/Images/330-2-i.jpg){.calibre785}
:::
那么跳转地址就是74FE4000+E9C=74FE4E9C。
注意，只要程序没有退出，一般这里的基地址在运行中的值就不会变，因为程序的数据已经加载到内存中了。同时相对地址是永远不会变的，只有在修改so文件的时候，文件的大小改变了，可能相对地址会改变，其他情况下不会改变，相对地址就是数据在整个so文件中的位置。这里可以看到函数映射到内存中的绝对地址，如下所示：
::: bodypic-c
![](OEBPS/Images/330-3-i.jpg){.calibre786}
:::
有时候发现跳转到指定位置之后，看到的全是DCB数据，这时候选择函数地址，点击P键就可以看到ARM指令源码了，如下所示：
::: bodypic-c
![](OEBPS/Images/330-4-i.jpg){.calibre787}
:::
###### 5.调试快捷键 {.section-subtitle}
调试快捷键包括：F8单步调试，F7单步进入调试，如下所示：
::: bodypic-c
![](OEBPS/Images/330-5-i.jpg){.calibre788}
:::
上面找到函数地址之后，可以下断点了，下断点很简单，点击签名的绿色圈点，变成红色条目即可，然后可以点击F9快捷键，或者点击运行按钮（绿色右箭头），即可运行程序，如图22-8所示。
::: bodypic-c
![](OEBPS/Images/22a8-i.jpg){.calibre789}
:::
图22-8 F9快捷键
其中还有暂停和结束按钮。运行之后再点击so的native函数，触发断点逻辑，如下所示：
::: bodypic-c
![](OEBPS/Images/331-i.jpg){.calibre790}
:::
这时候，看到进入调试界面，点击F8可以单步调试，看到有一个PC指示器。其实在ARM中PC是一个特殊的寄存器，用来存储当前指令的地址。
总结一下IDA在调试so文件的时候需要用到的快捷键：
·Shift+F12 快速查看so文件中的字符串信息。
·F5 可以将ARM指令转化成可读的C代码，同时可以使用Y键，修改JNIEnv的函数方法名。
·Ctrl+S 有两个用途，在IDA
View页面中可以查看so文件的所有段信息，在调试页面可以查看程序所有so文件映射到内存的基地址。
·G 可以在调试界面快速跳转到指定的绝对地址，进行下断点调试。如果跳转到目的地址之后，发现是DCB数据的话，可以使用P键进行转化。
·F7 可以单步进入调试，F8键可以单步调试。
[]{#133.xhtml}
#### 22.2 构造so案例 {.bodycontent-title2}
了解IDA工具之后，就可以开始动手操作了。为了方便开始，先自己写一个简单的Android
native层代码，然后用IDA进行分析即可。这里可以使用Android
Studio新建一个简单工程，然后创建JNI。如何在Android
Studio中开发NDK，前面章节中已经详细介绍了。下面直接在Android
Studio中新建了一个Native项目，这里关于native项目的代码不想解释太多，就是Java层传递了用户输入的密码，然后native做了校验过程，把校验结果返回到Java层。如下所示：
::: bodypic-c
![](OEBPS/Images/331-2-i.jpg){.calibre72}
:::
::: bodypic-c
![](OEBPS/Images/332-i.jpg){.calibre791}
:::
具体的校验过程这里不再解释了。运行项目之后得到apk文件，那么下面就开始破解旅程了。
[]{#134.xhtml}
#### 22.3 逆向so文件 {.bodycontent-title2}
下面开始破解编译之后的apk文件。
##### 22.3.1 获取应用的so文件 {.bodycontent-title3}
按照国际惯例，直接使用解压软件，获取应用apk中的so文件，如图22-9所示。
::: bodypic-c
![](OEBPS/Images/22a9-i.jpg){.calibre792}
:::
图22-9 解压so文件
得到libencrypt.so文件之后，使用IDA打开它，如图22-10所示。
一般so中的函数方法名都是：Java_类名_方法名。那么这里直接搜Java关键字即可，或者使用jd-gui工具找到指定的native方法，如图22-11所示。
::: bodypic-c
![](OEBPS/Images/333-i.jpg){.calibre793}
:::
图22-10 IDA打开so文件
::: bodypic-c
![](OEBPS/Images/22a11-i.jpg){.calibre794}
:::
图22-11 native函数名
双击即可在右边的IDA
View页面中看到Java_cn_wjdiankong_encryptdemo_MainActivity_isEquals函数的指令代码，如图22-12所示。
可以简单分析一下这段指令代码：
·PUSH{r3-r7，lr}是保存r3，r4，r5，r6，r7，lr的值到内存的栈中，那么最后当执行完某操作后，想返回到lr指向的地方执行，当然要给pc了，因为pc保留下一条CPU即将执行的指令，只有给了pc，下一条指令才会执行到lr指向的地方。
·pc：程序寄存器，保留下一条CPU即将执行的指令。
·lr：连接返回寄存器，保留函数返回后，下一条应执行的指令。
::: bodypic-c
![](OEBPS/Images/22a12-i.jpg){.calibre795}
:::
图22-12 函数对应的ARM指令代码
这个和函数最后面的POP{r3-r7，pc}是相对应的。
然后是调用了strlen、malloc、strcpy等系统函数，在每次使用BLX和BL指令调用这些函数的时候，都发现了一个规律：在调用它们之前一般都是用MOV指令来传递参数值的，比如这里的R5里面存储的就是strlen函数的参数，R0就是is_number函数的参数，如下代码所示。这样分析之后，在后面的动态调试的过程中可以得到函数的入口参数值，这样就能得到一些重要信息。
::: bodypic-c
![](OEBPS/Images/334-2-i.jpg){.calibre796}
:::
在每次调用有返回值的函数之后的命令，一般都是比较指令，比如CMP、CBZ，或者是strcmp等，如上面代码最后一行。这里是破解的突破点，因为一般加密再怎么厉害，最后比较的参数肯定是正确的密码（或者是正确的加密之后的密码）和输入的密码（或者是加密之后的输入密码），在这里就可以得到正确密码，或者是加密之后的密码。
到这里就分析完了native层的密码比较函数：Java_cn_wjdiankong_encryptdemo_MainActivity_isEquals。如果觉得上面的ARM指令看的吃力，可以使用F5键，查看它的C语言代码，如下所示：
::: bodypic-c
![](OEBPS/Images/335-i.jpg){.calibre797}
:::
这里可以看到，有两个函数是核心点。
·is_number函数，这个函数看名字就能猜到是判断是不是数字，可以使用F5键，查看它对应的C语言代码，如下所示：
::: bodypic-c
![](OEBPS/Images/335-2-i.jpg){.calibre798}
:::
这里简单一看，主要是看return语句和if判断语句，看到这里有一个循环，然后获取_BYTE\*这里地址的值，并且自增加一，然后存到v2中，如果v3为\'\\0\'的话，就结束循环，然后做一次判断，就是v2-48是否大于9，那么这里知道48对应的是ASCII中的数字0，所以这里可以确定：用一个循环遍历_BYTE\*这里存的字符串是否为数字串。
·get_encrypt_str函数，这个函数看到名字就可以猜测，它是获取输入的密码加密之后的值，再次使用F5快捷键查看对应的C语言代码，如下所示：
::: bodypic-c
![](OEBPS/Images/335-3-i.jpg){.calibre799}
:::
::: bodypic-c
![](OEBPS/Images/336-i.jpg){.calibre800}
:::
首先是一个if语句，用来判断传递的参数是否为NULL。如果是的话，直接返回；不是的话，使用strlen函数获取字符串的长度保存到v2中，然后使用malloc申请一块堆内存。首指针保存到result，大小是v2+1，也就是传递进来的字符串长度+1，然后就开始进入循环。首指针result，赋值给i指针，开始循环，v3是通过v1-1获取到的，就是函数传递进来字符串的地址，那么v6就是获取传递进来字符串的字符值，然后减去48，赋值给v7。
可以猜到了，这里想做字符转化，把char转化成int类型。继续往下看，如果v6==48的话，v7=1，也就是说这里如果遇到字符\'0\'，就赋值1。看到上面得到的v7值，被用来取key_src数组中的值，那么这里双击key_src变量，就跳转到了它的值地方。果不其然，这里保存了一个字符数组，看到它的长度正好是18，如下代码所示，那么应该明白了，这里通过传递进来的字符串，循环遍历字符串，获取字符，然后转化成数字，再倒序获取key_src中的字符，保存到result中。然后返回。
::: bodypic-c
![](OEBPS/Images/336-2-i.jpg){.calibre801}
:::
这两个重要函数的功能为，一个是判断输入的内容是否为数字字符串，一个是通过输入的内容获取密码内容，然后和正确的加密密码ssBCqpBssP进行比较。
##### 22.3.2 用IDA进行调试设置 {.bodycontent-title3}
本节就用动态调试方法来跟踪传入的字符串值，以及加密之后的值。看到打印log的函数，很难知道具体的参数和寄存器的值，所以这里需要开始调试，得知每个函数执行之后的寄存器的值，在用IDA进行调试so的时候，需要以下准备步骤。
###### 1.获取android_server文件 {.section-subtitle}
在IDA安装目录\\dbgsrv\\android_server，如图22-13所示。
::: bodypic-c
![](OEBPS/Images/22a13-i.jpg){.calibre802}
:::
图22-13 android_server文件\
这个文件是干嘛的呢？它是怎么运行的呢？下面来介绍一下。在前一章中介绍了关于Android中的调试原理，其实是使用gdb和gdbserver来做到的，gdb和gdbserver在调试的时候，必须注入到被调试的程序进程中。但是非root设备的话，注入别的进程中只能借助于run-as这个命令。也就是说如果要调试一个应用进程的话，必须要注入它内部，那么用IDA调试so文件也是这个原理，需要注入进程才能进行调试。IDA有类似于gdbserver这样的工具，那就是android_server，需要运行在设备中，保证和PC端的IDA进行通信，比如获取设备的进程信息、具体进程的so内存地址、调试信息等。
把android_server保存到设备的/data目录下，修改一下它的运行权限，然后必须在root环境下运行，因为要做注入进程操作，所以必须要root：
::: bodypic-c
![](OEBPS/Images/337-i.jpg){.calibre803}