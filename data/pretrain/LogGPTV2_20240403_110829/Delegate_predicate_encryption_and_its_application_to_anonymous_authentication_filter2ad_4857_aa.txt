title:Delegate predicate encryption and its application to anonymous authentication
author:Ribao Wei and
Dingfeng Ye
Delegation in Predicate Encryption
Supporting Disjunctive Queries
Dongdong Sun, Colin Boyd, and Juan Manuel Gonz´alez Nieto
Information Security Institute, Queensland University of Technology,
GPO Box 2434, Brisbane QLD 4001, Australia
{dongdong.sun,c.boyd,j.gonzaleznieto}@qut.edu.au
Abstract. Predicate encryption has an advantage over traditional public-
key or identity-based encryption, since predicate encryption systems pro-
vide more ﬂexible control over access to encrypted data. We focus on
delegation capabilities in predicate systems. More speciﬁcally, we inves-
tigate delegatable encryption systems supporting disjunctive predicate
evaluations. We present formal security deﬁnitions of delegatable pred-
icate encryption and provide the ﬁrst delegatable predicate encryption
scheme which supports disjunctive predicate evaluations in the public-
key setting. We analyze the security of the proposed system and give a
security proof.
Keywords: Predicate Encryption, Delegation, Disjunction.
1 Introduction
Traditional public-key encryption systems have been used and investigated for
decades. In those systems, a user creates a public and private key pair, and
the message can be encrypted with the public key and recovered with the cor-
responding private key. This is suﬃcient for many applications, where a user
knows the identity of the recipient in advance. However, in other applications,
a user may require more ﬂexible control over the access to the encrypted data.
Predicate encryption is a new primitive which can achieve such ﬂexibility. In
predicate-based encryption, private keys are associated with predicates f and
ciphertexts are bound to attributes I. A ciphertext corresponding to I can be
decrypted by a private key corresponding to f if and only if f(I) = 1.
There are a number of contributions to predicate encryption in the litera-
ture [1–5]. Those systems can evaluate various predicates over the ciphertext.
The most expressive one is the KSW [4] construction, which can support a wide
class of predicates including disjunctive predicate evaluations. The system is well
suited for many applications. For example, in a bank, for the sake of security,
each internal ﬁle is labeled with an attribute and both ﬁle and attribute are en-
crypted with the system public key. We assume that the general manager, who
is the top authority, holds the master secret key. He can issue a secret key associ-
ated with a predicate, the disjunctive predicate in our case. Staﬀs have diﬀerent
privileges to access ﬁles. People in IT department are allowed to read technical
K. Rannenberg, V. Varadharajan, and C. Weber (Eds.): SEC 2010, IFIP AICT 330, pp. 229–240, 2010.
c(cid:2) IFIP International Federation for Information Processing 2010
230
D. Sun, C. Boyd, and J.M. Gonz´alez Nieto
ﬁles, and those in customer service department are allowed to read all customer
related ﬁles. On top of that, there are some ﬁles which the general manager
wants to make ensure that everyone should read (e.g., bank policy). For each
staﬀ, the general manager will encode the predicate, which is associated with
attributes in disjunctive form. For example, an IT staﬀ member may receive a
key corresponding to predicate (x = “Bank Policy”) ∨ (x = “Tech Manual
A”) ∨ (x = “Tech Manual B”), so he can decrypt the ﬁles whenever the at-
tribute in the ﬁle matches any one of three attributes in the predicate. Moreover,
a crucial property of the disjunctive predicate, namely predicate indistinguisha-
bility, is applicable to our speciﬁc application. The predicate indistinguishability
means if an attribute in the ciphertext matches the disjunctive predicate, it is
computationally infeasible to ﬁnd the position of a match, only the existence
of a match in at least one position is known [4]. For example, each proﬁle of a
customer is encrypted with the customer’s account number (i.e., the attribute).
The proﬁle includes the general information about the customer, e.g., name,
address, deposit amount, recent transactions. Now the general manager needs
some statistics on those proﬁles. He computes a secret key associated with the
predicate (x = “CustomerA’s Account Number”) ∨ (x = “CustomerB’s
Account Number”) ∨ (x = “CustomerC’s Account Number”) ∨ (x =
“CustomerD’s Account Number”), and sends the key to the staﬀ who is
responsible for doing statistics. With that key, the staﬀ can decrypt all proﬁles
related to the predicate. We assume that he knows the predicate, since in the
public-key settings, secret keys may reveal some information about the encoded
predicate. However, upon decryption, he cannot tell which customer’s account
number is related to the decrypted proﬁle due to the property of predicate indis-
tinguishability. For the security consideration, the property is certainly desirable
if the staﬀ is not deem to be able to identify the relationship between the account
number and the proﬁle.
The above-mentioned scenario is suﬃcient for a small company. If there are
hundreds of thousands of staﬀs, it is not eﬃcient to let only one authority (i.e.,
the general manager) to compute all keys. Delegation is an attractive solution
to the issue. Generally speaking, this mechanism can spread the computational
tasks to other entities. We stick with our bank example. Now, instead of comput-
ing all secret keys the general manager delegates the tasks to his subordinates,
i.e., managers. More speciﬁcally, the general manager ﬁrst computes a key as-
sociated with a predicate, e.g., (x = “Bank Policy” ∨ ? ∨ ?), where ? is a
delegatable ﬁeld. He sends this key to one of the managers, e.g., a technical man-
ager. The technical manager then creates a key for the predicate (x = “Bank
Policy”) ∨ (x = “Tech Manual A”) ∨ (x = “Tech Manual B”) and gives it
to one of the staﬀs in his department. In this scenario, we have some restrictions.
Only the general manager holds the master secret key so that he can initialize
the key with some attributes and ensure no managers can modify those ﬁxed
attributes (the managers can only ﬁll in the delegatable ﬁelds). We also assume
the general manager and other managers are authorities who can access any ﬁles.
The staﬀs on the lowest level can only obtain keys without delegatable ﬁelds.
Delegation in Predicate Encryption Supporting Disjunctive Queries
231
The managers must ensure they give the non-delegatable keys to the staﬀs. One
may argue that we can give the master secret key to all managers, because they
have right to decrypt any ﬁles. However, as mentioned before, the general man-
ager wants to ensure that some ﬁles (e.g., bank policies) should be decrypted by
anyone in the bank. By holding the master key, he can always initialize the key
with some attributes, e.g., (x = “Bank Policy” ∨ ? ∨ ?), which ensures that
anyone can access the “Bank Policy”. Now, all keys can be computed in an
eﬃcient way with the help of the managers. We will present a security system
which can handle the above mentioned situations in this paper.
1.1 Our Results
In this paper, we present formal security deﬁnitions of delegatable predicate
encryption supporting disjunctive predicate evaluations. We also present a del-
egatable predicate encryption scheme in the public-key setting. Our scheme is
based on the KSW [4] construction but, unlike their scheme, we achieve del-
egation. A formal security proof of our scheme is also provided. The required
security assumptions have all been introduced in prior works. Our systems are
based on a group whose order is the product of four primes.
1.2 Related Work
Identity-Based Encryption and Attribute-Based Encryption. To ad-
dress the issue of certiﬁcate overhead in the PKI system, Shamir [6] introduced
the notion of identity-based cryptography. The ﬁrst practical ID-based encryp-
tion (IBE) was proposed by Boneh et al [7]. Thereafter, many eﬃcient ID-based
schemes have been proposed [8–10]. Because of the eﬃciency of the system,
ID-based cryptography is now ﬂourishing in the cryptographic community. In
attribute-based encryption (ABE) [11–13], a user can receive a secret key asso-
ciated with an access control policy over the attributes of an encrypted data.
Predicate-Based Encryption. Recently, Boneh and Waters [3] proposed the
ﬁrst encryption system possessing the properties of conjunctive, subset and range
queries in the public-key setting. Concurrent work by Shi et al. [1] also achieves
a similar function. However, they achieve match-revealing instead of match-
concealing. How to construct a system supporting disjunctive predicate was left
as an open problem until the work by Katz et al [4]. The KSW system can be
regarded as a signiﬁcant improvement in the theory of predicate-based encryp-
tions. Their work also implies all the results of the BW construction [3]. Based
on the KSW system, Shen et al [5] proposed a similar system in the symmetric-
key setting. Their system achieves predicate privacy as well as data privacy.
Delegation in Predicate Encryption. The notion of delegation was ﬁrst
introduced in this context by Horwitz and Lynn [14]. Subsequently, a number
of works address delegation issues in Hierarchical Identity-Based Encryption
(HIBE) [15, 16]. The most related context of delegation in predicate encryption
appeared in the work of Shi and Waters [2]. They constructed a delegatable
232
D. Sun, C. Boyd, and J.M. Gonz´alez Nieto
predicate encryption supporting conjunctive queries. However, to construct a
system supporting disjunctive queries was left as an open problem, which moti-
vates us to investigate the new system in this paper.
2 Deﬁnitions
l
(cid:2)
We describe deﬁnitions in our speciﬁc settings, where the class of predicates is
P = {ORx1,...,xl(x)|(x1, . . . , xl) ∈ Z
N} such that ORx1,...,xl(x) = 1 iﬀ x = x1 or
x = x2 or . . . or x = xl. The above-mentioned disjunctive predicate evaluation is
based on inner product predicate evaluation which was speciﬁed in the work of
Katz et al [4]. When we have a message M for the attribute w ∈ ZN to encrypt,
we set w := (wl mod N, . . . , w0 mod N) ∈ Z
n
N , where n = l + 1, then encrypt
w with M. To compute a secret key for predicate ORx1,...,xl(x), we compute
i∈[l](x − xi) mod N and set p := (al, ..., a0), where
a polynomial p(x) =
al, . . . , a0 are the coeﬃcients of p(x). We then compute the secret key on p. The
actual evaluation is based on the class of predicates F = {fx|x ∈ Z
N}, where
fx(y) = 1 iﬀ (cid:4)x, y(cid:5) = 0 mod N. As shown by Katz et al [4], ORx1,...,xl(w) = 1
iﬀ fp(w) = 1, which forms the bases for our systems. In all our deﬁnitions, we
let Ω denote a ﬁnite set of ZN and Ω? = Ω ∪ {?}, where ? is a delegatable ﬁeld.
Deﬁnition 1. A Delegatable Predicate Encryption Scheme comprises of the fol-
lowing algorithms:
Setup(1λ). The Setup algorithm takes as input a security parameter 1λ and
n
outputs a public key P K and a master secret key MSK .
Encrypt(P K, w, M). The Encrypt algorithm takes as input a public key P K, an
attribute w ∈ Ω, and a message M in some associated message space. It
outputs a ciphertext C.
GenKey(MSK , X). The GenKey algorithm takes as input a master secret key
MSK and an attribute vector X = (x1, . . . , xl) ∈ Ωl
? (l is ﬁxed in the system),
which corresponds to predicate ORX(x). It outputs a secret key SKX for
evaluating ORX(x) over a ciphertext C.
Delegate(SKX, ˆx). The Delegate algorithm takes as input a secret key SKX
for ORX(x) and an attribute ˆx. It outputs a delegated secret key SKX(cid:2) for
(cid:4) is obtained by ﬁxing one of the delegatable
the predicate ORX(cid:2)(x), where X
ﬁelds of X with the attribute ˆx.
Query (SKX , C). The Query algorithm takes as input a secret key SKX and a
ciphertext C. It outputs either a message M or the distinguished symbol ⊥.
Correctness. We require the following correctness property. For all λ, all
R←
(w, M) ∈ Ω × M, and all ORX ∈ P , let (P K, MSK ) R← Setup(1λ), C
Encrypt(P K, w, M), and SKX
R← GenKey(MSK , X).
– If ORX(w) = 1 then Query(SKX , C) = M.
– If ORX(w) = 0 then Query(SKX , C) =⊥ with all but negligible probability.
The same property holds, if SKX is computed from Delegate algorithm.
Delegation in Predicate Encryption Supporting Disjunctive Queries
233
Selective Security. We will prove the selective security of our scheme. Our
security deﬁnition is similar to that of KSW [4], except that there are extra
create delegated secret key queries. The formal deﬁnition of selective security is
provided below.
and is then given P K.
and master secret key MSK , a public key value N is given to A.
Deﬁnition 2. A delegatable predicate encryption scheme is selective secure
if for all PPT adversaries A, the advantage AdvA of A in the following game is
a negligible function of security parameter λ:
Setup(1λ). A challenger C runs the Setup algorithm to generate public key P K
Init. A outputs vectors a, b ∈ Ωn, which correspond to attributes A, B ∈ Ω,
Query phase 1. A adaptively makes a polynomial number of the following
queries:
– Create secret key. A requests a secret key for a vector p ∈ Ωn corre-
sponding to predicate ORX(x), where X = (x1, . . . , xl) ∈ Ωl. C creates
the secret key and gives it to A.
– Create delegated secret key. A requests a secret key for a vector p ∈ Ωn
corresponding to predicate ORX(x), where X = (x1, . . . , xl) ∈ Ωl. C
chooses a random number i, where 1 ≤ i ≤ l and creates the secret key
for ORXi(x), where Xi = (x1, . . . , xi). Using that key as the parent key,
C creates the key for ORX(x) in delegatable way.
Any key revealed to A are subject to the restriction such that ORX(A) =
ORX(B), which is equivalent to fp(a) = fp(b).
Challenge. A outputs two equal-length messages M0 and M1. If there is any
ORX(A) = ORX(B) = 1, then it is required that M0 = M1. C ﬂips a random
coin b. If b = 0 then A is given C = Encrypt(Mb, A) and if b = 1 then A is
given C = Encrypt(Mb, B).
before.
Query phase 2. Repeat the Query phase 1 subject to the restrictions as
Guess. A outputs a guess b
(cid:4) of b, and succeeds if b
The advantage of A is deﬁned to be AdvA = |P r[b = b
(cid:4) = b.
(cid:4)] − 1/2|.
3 Background on Pairings and Complexity Assumptions
We review the notions about groups of composite order and bilinear maps. Let
G be an algorithm that takes as input a security parameter 1λ and outputs
a tuple (p, q, r, s, G, GT , e) where p, q, r, s are distinct primes, G and GT are
two cyclic groups of order N = pqrs, and e is a non-degenerate bilinear map
e : G × G → GT satisfying the following properties:
1. Bilinearity: ∀u, v ∈ G,∀a, b ∈ Z, e(ua, vb) = e(u, v)ab.
2. Non-degeneracy: if g generates G then e(g, g) generates GT
234
D. Sun, C. Boyd, and J.M. Gonz´alez Nieto
We assume the group computation in G and GT , as well as the bilinear map
e, are all computable in time polynomial in λ. Furthermore, we assume that the
description of G and GT includes generators of G and GT respectively.
We will use the notation Gp, Gq, Gr, Gs to denote the respective subgroups
of order p, order q, order r and order s of G and we will use the notation
GT,p, GT,q, GT,r, GT,s to denote the respective subgroups of order p, order q,
order r and order s of GT . There is a crucial property in composite order bilinear
map: if hp ∈ Gp and hq ∈ Gq, then e(hp, hq) = 1. This property holds whenever
e is applied to elements in any two distinct subgroups.
3.1 The Composite 3-Party Diﬃe-Hellman Assumption
The composite 3-party Diﬃe-Hellman assumption (C3DH) was ﬁrst introduced
by Boneh and Waters [3]. For a given generator G deﬁne the following distribution
P (1λ):
(p, q, r, s, G, GT , e) R← G(1λ), N ← pqrs, gp
R← Gs
R1, R2, R3
¯Z ← ((N, G, GT , e), gq, gp, gr, gs, ga
Output( ¯Z, T )
p R2), T ← gc
R← Gp, gq
R← Gr, gs
R← Gq, gr
p R1, gabc
R← Gq,
R← ZN
p, gab
p , gb
a, b, c
pR3
For an algorithm A, deﬁne A’s advantage in solving the composite 3-party
Diﬃe-Hellman problem for G as:
C3DHAdvG,A(1λ) := |P r[A( ¯Z, T ) = 1] − P r[A( ¯Z, R) = 1]|
R← Gpq.
where ( ¯Z, T ) R← P (1λ) and R
Deﬁnition 3. We say that G satisﬁes the composite 3-party Diﬃe-Hellman as-
sumption (C3DH) if for any polynomial time algorithm A, and its advantage
C3DHAdvG,A(1λ) is negligible in the security parameter λ.
The assumption is formed around the intuition that it is hard to test for Diﬃe-
Hellman tuples in the subgroup Gp if the elements have a random Gq subgroup
component.
3.2 Other Assumptions
Assumption 1. For a given generator G deﬁne the following distribution P (1λ):