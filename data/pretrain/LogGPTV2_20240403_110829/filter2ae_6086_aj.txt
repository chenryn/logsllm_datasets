    encode:52, BaseMessageEncoder (org.opensaml.ws.message.encoder)
    sendAuthnResponse:145, SAMLMessageHandler (mujina.idp)
    doSSO:77, SsoController (mujina.idp)
    singleSignOnServicePost:55, SsoController (mujina.idp)
Digest content:
    http://mock-idphttp://mock-idpXUf3yZB7j4wKYhl3K7Cp4dhfe/E0qKs3a8at+WjZ4Sc=i97x4tGq3whwLpqCIXRsLAy2pn0Wx0+yuHBreiMTwGm4Ekao3DfFvzSfPN5rMVATV59ntBonmUayrZExxsEyVm2xMSFBBEx0JO2stJ6dx2XXPgIiHr7tV5oH9V9wK5OwG1rAHRDMyg4IBCQzLlQrrBZwMCAu/G9FaSw0vBq/COSS8YBrW5/vBH4tS9/NdtTQiXiDoXnGSVYZvXtE0W5anNAUiDytmQhai4dy4Yim/rtKRjIXJVAWD9djCcuR7N//7MWRw1XjWlr1RTwm2TtVvGEY5FL5fVRjdsXJdcc7HNq3UUMQnBpY5RKe+xhri8oZqBc6dmyF96PEUY54EVTdWw==111111http://mock-spurn:oasis:names:tc:SAML:2.0:ac:classes:Passwordhttp://mock-idpJohn Doe111111sdsdsdsdJohn PI:EMAIL@example.comexample.com
**Note that the summary now contains Assertion and all sub-tags of Assertion,
and the Signature tag in Response is not included in the summary because it
applies the same transform as before.** After the SingedInfo is signed, the
final xml is what the packet capture looks like.
#### SP receives AuthnResponse processing
    evaluate:51, BasicSecurityPolicy (org.opensaml.ws.security.provider)
    processSecurityPolicy:132, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:83, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:70, BaseSAML2MessageDecoder (org.opensaml.saml2.binding.decoding)
    retrieveMessage:105, SAMLProcessorImpl (org.springframework.security.saml.processor)
    retrieveMessage:172, SAMLProcessorImpl (org.springframework.security.saml.processor)
    attemptAuthentication:85, SAMLProcessingFilter (org.springframework.security.saml)
    doFilter:223, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
    doFilter:213, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
The main checkpoints are two securityPolicies:
`SAML2HTTPPostSimpleSignRule` is to verify the signature of the data in the
post transmission, which is easy to understand.
`SAMLProtocolMessageXMLSignatureSecurityPolicyRule` is to verify the signature
in the Saml Response. First, the certificate of the IDP will be extracted from
the local (configured in `classpath:metadata/mujina.local.idp.metadata.xml`),
which is not passed from the Response. Extract the certificate, but use the
configured trusted certificate
The call stack is as follows:
    checkSignatureValue:723, XMLSignature (org.apache.xml.security.signature)
    validate:69, SignatureValidator (org.opensaml.xml.signature)
    verifySignature:142, BaseSignatureTrustEngine (org.opensaml.xml.signature.impl)
    validate:100, BaseSignatureTrustEngine (org.opensaml.xml.signature.impl)
    validate:100, ExplicitKeySignatureTrustEngine (org.opensaml.xml.signature.impl)
    validate:49, ExplicitKeySignatureTrustEngine (org.opensaml.xml.signature.impl)
    evaluate:104, BaseTrustEngineRule (org.opensaml.ws.security.provider)
    evaluate:91, BaseTrustEngineRule (org.opensaml.ws.security.provider)
    doEvaluate:128, SAMLProtocolMessageXMLSignatureSecurityPolicyRule (org.opensaml.common.binding.security)
    evaluate:107, SAMLProtocolMessageXMLSignatureSecurityPolicyRule (org.opensaml.common.binding.security)
    evaluate:51, BasicSecurityPolicy (org.opensaml.ws.security.provider)
    processSecurityPolicy:132, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:83, BaseMessageDecoder (org.opensaml.ws.message.decoder)
    decode:70, BaseSAML2MessageDecoder (org.opensaml.saml2.binding.decoding)
    retrieveMessage:105, SAMLProcessorImpl (org.springframework.security.saml.processor)
    retrieveMessage:172, SAMLProcessorImpl (org.springframework.security.saml.processor)
    attemptAuthentication:85, SAMLProcessingFilter (org.springframework.security.saml)
    doFilter:223, AbstractAuthenticationProcessingFilter (org.springframework.security.web.authentication)
    doFilter:213, AbstractAuthenticationProcessingFilter
Extract the public key from the certificate, decrypt the SignatureValue with
the public key, the decrypted value is the digest of Signedinfo, re-digest the
Signedinfo, and compare it with the decrypted digest value. Then, the digest
value of DigestValue will be compared. This value is the digest of the
Response sub-tag Signature except for the Response sub-tag. The processing
here is to recalculate the digest of this part, and then compare it with
DigestValue:
Of course, there are other verifications in the process, such as status
verification.
Assertion will be verified later:
    processAuthenticationResponse:301, WebSSOProfileConsumerImpl (org.springframework.security.saml.websso)
    authenticate:88, SAMLAuthenticationProvider (org.springframework.security.saml)
    authenticate:182, ProviderManager (org.springframework.security.authentication)
    attemptAuthentication:92, SAMLProcessingFilter (org.springframework.security.saml)