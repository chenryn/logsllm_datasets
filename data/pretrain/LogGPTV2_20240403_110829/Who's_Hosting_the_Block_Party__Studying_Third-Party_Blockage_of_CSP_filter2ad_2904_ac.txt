as https://. To ease the burden on maintaining a host-
based allowlist, sites can also decide to deploy strict-
dynamic; this, however, is contingent on all included code
being compatible through programmatic addition of script
elements.
In this section, we investigate how these three aspects
of CSPs are impacted by ﬁrst, third, and delegated parties.
Naturally, incompatible code does not technically prevent a
ﬁrst-party from deploying a sane CSP. However, any incompat-
ibility means that speciﬁc parts of the site will no longer work,
threatening, e.g., functionality or monetization. In particular,
we consider this analysis to be an important ﬁrst step in
analyzing to what extent third parties may be involved in
the lacking [1] and insecure [39] CSP deployments found
throughout top sites, which we further investigate at the end
of the section.
A. Host-based Allowlists
As prior work has shown, coming up with a host-based
allowlist for CSP is a tiring process, frequently leading to
operators simply adding the * source expression to avoid
breakage [27]. While the insecurity of such a policy is obvious,
we here aim to understand to what extend ﬂuctuations in
included hosts play a role in ﬁrst party’s struggle to achieve a
secure and functional CSP.
To keep a policy functioning without causing breakage, it
is necessary to allow content from all those hosts which are
included. Using a host-based CSP, this can be achieved by
individually allowing each host or using a wildcard to allow
all hosts belonging to a common eTLD+1 (*.domain.com).
Allowing all subdomains, however, may expose a site to
additional risks. A known bypass to the security of a CSP is to
allow sources which host a JSONP endpoint [39]. Naturally, al-
lowing any subdomain of a given domain increases the chances
of such an endpoint being allowed. As examples show4,
such endpoints are often contained on subdomains of widely-
included domains, e.g., on detector.alicdn.com.
Hence, it is desirable to keep the list of allowed hosts as
small as possible and resort to allowing all subdomains only if
need be. Fluctuations in the included hosts, though, may result
in breakage in such cases. Figure 2 shows the stability of the
involved hosts and sites over time. In particular, for each week,
it shows how many sites include code from hosts they had not
previously used (new host) and how many sites introduced
code from other eTLD+1s, requiring changes to the host-based
allowlist, or allowing the entire subdomain-tree of the new
eTLD+1s. In addition, the graph shows the numbers broken
down to those hosts/sites which are mandated through third
parties; in particular, New Third-Party Host refers to the case
where a third party introduces a new host, and New Delegated
Host refers to a third party adding a host from yet another
third party. Note that if a ﬁrst party includes content from a
given host, and the third party also includes content from the
same host, this is not counted towards third-party inclusions.
In total, 5,442 sites added a new site at least once through
our experiment (relative to the sites they included in the ﬁrst
snapshot). 2,977 did so because a third party included content
from a new host; of these, 2,272 had delegated inclusions,
i.e., a third party introduced code from another third party’s
hosts. Hence, 55% of all sites that need to update their CSP
(by adding an entire new eTLD+1 and its subdomains) would
need to do so because of at least one third party or suffer from
functionality breakage. Looking at the trend, we ﬁnd that while
in the ﬁrst week, over 2,000 sites still introduce content from
entirely unseen eTLD1+s, the number goes down to approx.
1,000-1,500 for the following weeks. Interestingly, there is no
clear downward trend in the data, implying that even in a
longer experiment, we would have observed similar numbers
for the following weeks. Notably, the introduction of sites is
necessitated by third parties in approx. one-third of all cases;
most of these are related to the introduction of sites that do not
4https://github.com/zigoo0/JSONBee/blob/master/jsonp.txt
7
week+1week+2week+3week+4week+5week+6week+7week+8week+9week+10week+11050010001500200025003000#sitesNewHostNewThird-PartyHostNewDelegatedHostNewSiteNewThird-PartySiteNewDelegatedSiteoriginate from a previously seen third-party (New Delegated
Sites). Since these numbers do not contain third parties which
are added by the ﬁrst party, this implies that third parties often
add previously unseen parties to a site, requiring the ﬁrst party
to update their CSP with disconnected parties.
Considering that the addition of hosts occurs even more
frequently than the addition of new sites, a site operator might
resort to allowing all subdomains of a given eTLD+1, so as
to avoid having to allow new hosts of the same eTLD+1
in the next week. Notwithstanding the danger of allowing
JSONP endpoints, having a CSP that contains entries which
are no longer needed violates the principle of least privilege.
Operating under the assumption that a site operator would
have wanted to keep their site functional and merely added all
eTLD+1s that were needed at least once in the 12-week period,
5,544/6,050 would contain unnecessary sites in their CSP at
the end of the experiment. That is to say, the vast majority
of sites would violate the principle of least privilege. Of these
5,544 sites, 4,135 would have at least one third-party-included
(i.e., delegated) host in its overly permissive allowlist.
Given this data, it seems hardly feasible to keep an individ-
ual site’s host-based CSP up-to-date. Not only is it necessary
for many sites to add required hosts or sites to their CSP,
but at the same time, a site operator regularly has to assess if
their CSP is not too overly permissive, and remove non-needed
entries. More than half of the sites that required adding a new
eTLD+1 to their CSP were sites with changes initiated by
third parties. Similarly, 4,135/5,554 (74%) sites would have to
remove a third-party site at least once during the 12 weeks to
keep their policy as strict as possible. Naturally, if an operator
decides to only allow speciﬁc hosts instead of entire sites,
there are more changes necessary. Hence, we ﬁnd that third
party induced changes to the allowlists play an important role
in the maintenance cost for site operators, requiring signiﬁcant
overhaul on a weekly basis.
1) Categorization of Culprits: To understand this constant
inﬂux of newly included sites, we analyze how these new
inclusions support
the ﬁrst party. To that end, we utilize
Webshrinker [38] to categorize each of the eTLD+1s from
which new JavaScript was included throughout our experi-
ments starting from the second week. In particular, we resort
to the label with the highest-ranking score to ﬂag an eTLD+1.
Table III shows the most prevalent categories for our entire
analysis period, both in terms of inclusions that were caused
by either party, as well as for third parties in particular.
Not surprisingly, we ﬁnd the biggest culprit
to be IAB3
(Business), which overlaps with IAB3-11 (Marketing) and
IAB3-1 (Advertising);
i.e., most of the newly introduced
sites are related to advertisement. Considering only eTLD+1s
that were added by third-party code, 1,325 sites had a least
one new inclusion from an ad-related site. The second large
cluster of introduced eTLD+1s is related to technology &
computing; this category subsumes services that offer email
(e.g., newsletter delivery) or chat integrations. IAB25-WS1
contains sites like gstatic.com or nr-data.net, i.e.,
it subsumes cases of content distribution. Overall, we can
CATEGORIZATION OF SITES ADDED OVER TIME
TABLE III
Category
IAB3 (Business)
IAB19 (Technology & Computing)
IAB25-WS1 (Content Server)
IAB25 (Non-Standard Content)
IAB14 (Society)
affected sites
all
2,864
2,790
1,798
889
758
only TP
1,325
725
813
284
208
say that the ad ecosystem appears to be the driving factor
behind the inﬂux of new eTLD+1s in most sites. However,
there exist also other fundamental building blocks included in
modern Web sites, which cause the introduction of new sites
throughout our experiments.
2) Code Location Drift: Naturally, the vast inﬂux of new
hosts and eTLD+1s into a signiﬁcant fraction of our inves-
tigated sites begs the question of whether or not this is an
artifact of recent ﬁndings of Vastel et al. [35]. They were able
to show that ad providers are frequently using new hosts to
evade ﬁlter lists. In particular, we could see that the largest
culprits behind the inﬂux of hosts appear to be ad-related. To
understand whether this observation is merely a side effect of
the evasion techniques performed by ad providers or whether
there is actual new code being included from these newly
introduced hosts, we set out to analyze whether we can ﬁnd
evidence for code drifting from one already included host to
a freshly included one across our analysis periods.
For each site, we checked all scripts included from newly
introduced hosts. We then checked all previous snapshots to
determine if the same script (based on its SHA256 hash) was
previously found on a different host and included by the site.
In doing so, we found that over the entirety of our dataset, 220
sites had at least one script moved to a new host. More notably,
this only affected 814 scripts over all snapshots. Putting this
into the perspective of 10,271,782 unique scripts just in the
ﬁnal snapshot, the number of newly added hosts as part of
code drift (w.r.t. hash-equal scripts) is minuscule.
Overall,
this means that only a tiny fraction of newly
introduced hosts can be explained by code drift. On the
contrary, we argue that when we see new hosts being added
to a site that this also means that new code is added. We can
conclude that the vast majority of changes cannot be attributed
to ﬁlter list evasion techniques and that the artifacts that we
measured highlight the general evolution of sites over time,
which is a major hindrance for host-based allowlists.
B. Necessary Unsafe Keywords
Next to the struggle of maintaining host-based allowlists, a
second major issue to the security of a CSP is the usage of
compatibility keywords, namely unsafe-inline to enable
inline scripts and event handlers, as well as unsafe-eval to
allow the usage of eval. While the former is always a serious
issue, eval has its use-cases, e.g., for local code caching and
execution. However, its usage has been discouraged by prior
8
SITES WHICH NEED TO USE UNSAFE DIRECTIVES
TABLE IV
mandated by any
mandated by ﬁrst party
mandated by third party
- only third party
- multiple third parties
- delegated parties
- only delegated parties
unsafe-inline
handler
6,879
4,972
5,977
1,907
4,446
1,251
14
script
7,650
7,618
3,601
32
1,663
287
0
unsafe-eval
total
6,334
4,424
4,911
1,910
2,943
946
51
total
7,667
7,643
6,041
24
4,573
1,299
0
works [26], and the CSP authors’ choice to disable by default
underlines its security impact.
Given these insights into the keywords we want to avoid in
a CSP, we conduct a hypothetical what-if analysis, assuming
that all ﬁrst-party developers wanted to deploy such a policy
without any compatibility modes and determine to what extent
the different stakeholders provide code that is incompatible
with such a policy. To that end, we need to measure when a
script uses eval, which automatically necessitates unsafe-
eval. For unsafe-inline, we need to monitor access
to the DOM through APIs like document.write and
innerHTML; however a mere access is not yet a compati-
bility issue for CSP. Rather, this behavior only causes issues
when used to write additional script tags, or when deﬁning
HTML-based event handlers. To measure the behavior of the
scripts divided by our different stakeholders and analyze their
interaction with security-sensitive functionality, we resort to
in-browser hooking of the APIs in question. Together with
with our reporting mechanism, these hooks allow us to store
the execution trace for each API access and attribute each
call to a party. While there are ways for sites to detect such
hooking, we do not believe this to be a major threat to validity
(in the worst case, it provides us with lower bounds).
Table IV shows the results of our analysis concerning the
functionality used by ﬁrst-, third-, and delegated-party code,
which, in its current form, requires either one of the insecure
directives. Since unsafe-inline is required if either inline
scripts or HTML event handlers are used, we show those
numbers both separately and in sum.
a) unsafe-inline: For unsafe-inline, we ﬁnd
that 7,667 of our 8,041 analyzed sites have code constructs that
require this insecure directive, with the vast majority requiring
it due to the usage of inline script elements. Out of those,
7,643 would have to deploy unsafe-inline anyways due
to their own incompatible code (7,650 due to inline scripts,
and 6,879 due to event handlers). Besides, we ﬁnd that 6,041
sites make use of third-party code, which requires unsafe-
inline to work. Therefore, even if a ﬁrst party could rid
itself of event handlers and inline scripts, those sites would
be hindered by third parties from deploying a CSP without
the unsafe keyword. While this seems like a big ask,
it
is feasible for ﬁrst parties to deploy a nonce-based policy,
enabling them to allow all their inline scripts; event handlers,
Fig. 3. Sites that require unsafe keywords by multiple third parties
however, cannot be allowed this way. Considering only those
2,671 sites with ﬁrst-party inline scripts, but without ﬁrst-
party event handlers (not shown), we ﬁnd that third parties
would induce incompatibilities in 1,903 (71%) of them, which
prevents them from a sane CSP even if the ﬁrst-party made
all their code compliant.
Hence, the logical next step in securing a ﬁrst-party site
would be to convince the included third parties to update
their code to no longer require unsafe-inline. As the
table shows, 4,573 sites have more than one third party, which
hinders them from deploying CSP without unsafe-inline.
Additionally, 1,299 sites are hindered through delegated par-
ties, i.e., contributors with which they have no direct relation.
Figure 3 shows how many sites have incompatibilities with
a sane CSP that stem from how many third parties, i.e., how
many parties would need to change their codebase to allow for
a breakage-free CSP without unsafe keywords. Unfortunately,
more than 2,000 sites (25% of our dataset) would require the
cooperation of at least ﬁve other parties. There also exists a
rather long tail involving still more than 500 sites with ten or
more contributors.
b) unsafe-eval: For eval, the results differ slightly.
Overall, 6,334 sites could not deploy a policy without
unsafe-eval without breakage. In this case, 4,424 (70%)
are making use of eval in ﬁrst-party code, and 4,911 (78%)
through third-party code. Thus, 1,910 sites cannot deploy a
policy without unsafe-eval exclusively because of third
parties. Even if all sites removed eval from their own code
base, 2,943 would have to convince more than one third party
to do the same (as shown in Figure 3). Similar to unsafe-
inline, we observe a long tail as well, requiring 292 sites
to convince more than ten third parties to remove their usage
of eval to rid the ﬁrst party’s CSP of unsafe-eval.
c) Categorization of Culprits: Combining the blockage
through inline scripts, event handlers, and usage of eval,
6,377 sites include third parties that mandate either unsafe
keyword. To better understand how these parties relate to
the business needs of the ﬁrst party, we categorized all third
parties that require compatibility modes, again relying on the
results from Webshrinker. Here, we use the ﬁrst category that
is associated with any of a party’s eTLD+1s. Table V show
the results of this categorization, indicating how many sites
are mandated to use unsafe-inline, unsafe-eval, and
9
12345678910#hinderingparties0200040006000#aﬀectedsitesunsafe-inlineunsafe-evalTOP CATEGORIES OF PARTIES THAT REQUIRE UNSAFE KEYWORDS
TABLE V
Category
IAB3 (Business)
IAB19 (Tech. & Comp.)
IAB14 (Society)
IAB25-WS1 (Content Server)
IAB3-11 (Marketing)
unsafe-
inline
unsafe-
eval
3,257
1,918
1,340
598
633
2,235