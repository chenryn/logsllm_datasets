title:A Sense of Time for JavaScript and Node.js: First-Class Timeouts as
a Cure for Event Handler Poisoning
author:James C. Davis and
Eric R. Williamson and
Dongyoon Lee
A Sense of Time for JavaScript and Node.js:  
First-Class Timeouts as a Cure for  
Event Handler Poisoning
James C. Davis, Eric R. Williamson, and Dongyoon Lee, Virginia Tech
https://www.usenix.org/conference/usenixsecurity18/presentation/davis
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.A Sense of Time for JavaScript and Node.js:
First-Class Timeouts as a Cure for Event Handler Poisoning
James C. Davis
Virginia Tech
Eric R. Williamson
Virginia Tech
Dongyoon Lee
Virginia Tech
Abstract
The software development community is adopting
the Event-Driven Architecture (EDA) to provide scal-
able web services, most prominently through Node.js.
Though the EDA scales well, it comes with an inher-
ent risk: the Event Handler Poisoning (EHP) Denial of
Service attack. When an EDA-based server multiplexes
many clients onto few threads, a blocked thread (EHP)
renders the server unresponsive. EHP attacks are a se-
rious threat, with hundreds of vulnerabilities already re-
ported in the wild.
We make three contributions against EHP attacks.
First, we describe EHP attacks, and show that they are
a common form of vulnerability in the largest EDA
community, the Node.js ecosystem. Second, we de-
sign a defense against EHP attacks, ﬁrst-class time-
outs, which incorporates timeouts at the EDA framework
level. Our Node.cure prototype defends Node.js appli-
cations against all known EHP attacks with overheads
between 0% and 24% on real applications. Third, we
promote EHP awareness in the Node.js community. We
analyzed Node.js for vulnerable APIs and documented or
corrected them, and our guide on avoiding EHP attacks
is available on nodejs.org.
1
Web services are the lifeblood of the modern Internet.
To minimize costs, service providers want to maximize
the number of clients each server can handle. Over the
past decade, this goal has led the software community
to consider shifting from the One Thread Per Client Ar-
chitecture (OTPCA) used in Apache to the Event-Driven
Architecture (EDA) championed by Node.js.
Introduction
others [1, 16, 35]. Node.js’s package ecosystem, npm,
boasts over 625,000 modules [56]. Node.js is becoming
a critical component of the modern web [18, 34].
In this paper we describe a Denial of Service (DoS)
attack, Event Handler Poisoning (EHP), that can be used
against EDA-based services such as Node.js applications
(§3). EHP attacks observe that the source of the EDA’s
scalability is a double-edged sword. While the OTPCA
gives every client its own thread at the cost of context-
switching overheads, the EDA multiplexes many clients
onto a small number of Event Handlers (threads) to re-
duce per-client overheads. Because many clients share
the same Event Handlers, an EDA-based server must cor-
rectly implement fair cooperative multitasking [89]. Oth-
erwise an EHP attack is born: an attacker’s request can
unfairly dominate the time spent by an Event Handler,
preventing the server from handling other clients. We re-
port that EHP vulnerabilities are common in npm mod-
ules (§3.4).
We analyze two approaches to EHP-safety in §4, and
propose First-Class Timeouts as a universal defense with
strong security guarantees. Since time is a precious re-
source in the EDA, built-in TimeoutErrors are a natural
mechanism to protect it. Just as OutOfBoundsErrors al-
low applications to detect and react to buffer overﬂow at-
tacks, so TimeoutErrors allow EDA-based applications
to detect and react to EHP attacks.
Our Node.cure prototype (§5) implements ﬁrst-class
timeouts in the Node.js framework. First-class timeouts
require changes across the entire Node.js stack, from
the language runtime (V8), to the event-driven library
(libuv), and to the core libraries. Our prototype secures
real applications from all known EHP attacks with low
overhead (§6).
Our ﬁndings have been corroborated by the Node.js
community (§7). We have developed a guide for prac-
titioners on building EHP-proof systems, updated the
Node.js documentation to warn developers about the
perils of several APIs, and improved the safety of the
fs.readFile API.
In summary, here are our contributions:
Perhaps inspired by Welsh et al.’s Scalable Event-
Driven Architecture (SEDA) concept [97], server-side
EDA frameworks such as Twisted [24] have been in
use since at least the early 2000s. But the boom in
the EDA has come with Node.js. Node.js (“server-
side JavaScript”) was introduced in 2009 and is now
widely used in industry, including at IBM [36], Mi-
crosoft [32], PayPal [67], eBay [82], LinkedIn [77], and
USENIX Association
27th USENIX Security Symposium    343
1. We analyze the DoS potential inherent in the EDA.
We deﬁne Event Handler Poisoning (EHP), a DoS at-
tack against EDA-based applications (§3). We fur-
ther demonstrate that EHP attacks are common in
the largest EDA community, the Node.js ecosystem
(§3.4).
2. We propose an antidote to EHP attacks: ﬁrst-class
timeouts (§4). First-class timeouts offer strong secu-
rity guarantees against all known EHP attacks.
3. We implement and evaluate Node.cure, a prototype of
ﬁrst-class timeouts for Node.js (§5). Node.cure en-
ables the detection of and response to EHP attacks
with application performance overheads ranging from
0% to 24% (§6).
4. Our ﬁndings have been corroborated by the Node.js
community. Our guide on EHP-safe techniques is
available on nodejs.org, and we have documented
and improved vulnerable Node.js APIs (§7).
2 Background
In this section we review the EDA (§2.1), explain our
choice of EDA framework for study (§2.2), and describe
relevant prior work (§2.3).
2.1 Overview of the EDA
There are two paradigms for web servers, distinguished
by the ratio of clients to resources. The One Thread
Per Client Architecture (OTPCA) dedicates resources
to each client, for strong isolation but higher memory
and context-switching overheads [84]. The Event-Driven
Architecture (EDA) tries the opposite approach and re-
verses these tradeoffs, with many clients sharing execu-
tion resources: client connections are multiplexed onto
a single-threaded Event Loop, with a small Worker Pool
for expensive operations.
All mainstream server-side EDA frameworks use the
Asymmetric Multi-Process Event-Driven (AMPED) ar-
chitecture [83]. This architecture (hereafter “the EDA”)
is illustrated in Figure 1. In the EDA the OS, or a frame-
work, places events in a queue, and the callbacks of
pending events are executed sequentially by the Event
Loop. The Event Loop may ofﬂoad expensive tasks such
as ﬁle I/O to the queue of a small Worker Pool, whose
workers execute tasks and generate “task done” events
for the Event Loop when they ﬁnish [60]. We refer to the
Event Loop and the Workers as Event Handlers.
Because the Event Handlers are shared by all clients,
the EDA requires a particular development paradigm.
Each callback and task is guaranteed atomicity: once
scheduled, it runs to completion on its Event Handler.
Because of the atomicity guarantee, if an Event Handler
blocks, the time it spends being blocked is wasted rather
than being preempted. Without preemptive multitasking,
developers must implement cooperative multitasking to
Figure 1: This is the (AMPED) EDA. Incoming events from clients A
and B are stored in the event queue, and the associated callbacks (CBs)
will be executed sequentially by the Event Loop. We will discuss B’s
EHP attack (CBB1), which has poisoned the Event Loop, in §3.3.
avoid starvation [89]. They do this by partitioning the
handling of each client request into multiple stages, typ-
ically at I/O boundaries. For example, with reference
to Figure 1, a callback might perform some string opera-
tions in CBA1, then ofﬂoad a ﬁle I/O to the Worker Pool in
TaskA1 so that another client’s request can be handled on
the Event Loop. The result of this partitioning is a per-
request lifeline [42], a DAG describing the partitioned
steps needed to complete an operation. A lifeline can be
seen by following the arrows in Figure 1.
2.2 Node.js among other EDA frameworks
There are many EDA frameworks, including Node.js
(JavaScript) [14], libuv (C/C++) [10], Vert.x (Java) [25],
Twisted (Python1) [24], and Microsoft’s P# [57]. These
frameworks have been used to build a wide variety of in-
dustry and open-source services (e.g. [7, 82, 67, 78, 29,
28, 8, 4]).
Most prominent among these frameworks is Node.js, a
server-side EDA framework for JavaScript introduced in
2009. The popularity of Node.js comes from its promise
of “full stack JavaScript” — client- and server-side de-
velopers can speak the same language and share the same
libraries. This vision has driven the rise of the Node.js-
JavaScript package ecosystem, npm, which with over
625,000 modules is the largest of any language [56]. The
Node.js Foundation reported that the number of Node.js
developers doubled from 3.5 million to 7 million be-
tween 2016 and 2017 [30, 31].
The Node.js framework has three major parts [62],
whose interactions complicate top-to-bottom extensions
such as Node.cure. An application’s JavaScript code
is executed using Google’s V8 JavaScript engine [64],
the event-driven architecture is implemented using
libuv [10], and Node.js has core JavaScript libraries with
C++ bindings for system calls.
1In addition, Python 3.4 introduced native EDA support.
344    27th USENIX Security Symposium
USENIX Association
2.3 Algorithmic complexity attacks
Our work is inspired by Algorithmic Complexity (AC)
attacks ([75, 51]), which are a form of DoS attack. In an
AC attack, a malicious client crafts input that shifts the
performance of the victim service’s data structures and
algorithms from average-case to worst-case, reducing
throughput to cause denial of service. Well-known ex-
amples of AC attacks include attacks on hash tables [51]
and regular expressions (ReDoS) [50].
As will be made clear in §3, EHP attacks are not sim-
ply the application of AC attacks to the EDA. AC attacks
focus on the complexity of the algorithms a service em-
ploys, while EHP attacks are concerned with the effect
of malicious input on the software architecture used by
a service. Because EHP attacks are only concerned with
time, AC attacks are just one mechanism by which an
EHP attack can be realized; any time-consuming opera-
tion, whether computation or I/O, is a potential EHP vec-
tor. However, not all AC attacks can be used to launch
an EHP attack.
3 Event Handler Poisoning Attacks
In this section we provide our threat model (§3.1) and
deﬁne Event Handler Poisoning (EHP) attacks (§3.2).
In §3.3 we give two examples of EHP attacks, one CPU-
bound (ReDoS) and one I/O-bound (“ReadDoS”). Lastly
we show that EHP vulnerabilities are common in the
modules in the npm registry.
3.1 Threat model
The victim is an EDA-based server with an EHP vulnera-
bility. The attacker knows how to exploit this vulnerabil-
ity: they know the victim feeds user input to a vulnerable
API, and they know evil input that will cause the vulner-
able API to block the Event Handler executing it.
Not all DoS attacks are EHP attacks. An EHP attack
must cause an Event Handler to block. This blocking
could be due to computation or I/O, provided it takes
the Event Handler a long time to handle. Other ways
to trigger DoS, such as crashing the server through un-
handled exceptions or memory exhaustion, are not time
oriented and are thus out of scope. Distributed denial of
service (DDoS) attacks are also out of scope; they con-
sume a server’s resources with myriad light clients pro-
viding normal input, rather than one heavy client provid-
ing malicious input.
3.2 Deﬁnition of an EHP attack
Supporting deﬁnitions. Before we can deﬁne EHP at-
tacks, we must introduce a few deﬁnitions. First, recall
the EDA illustrated in Figure 1. As discussed in §2.1,
a client request is handled by a lifeline [42], a sequence
of operations partitioned into one or more callbacks and
tasks. A lifeline is a DAG whose vertices are callbacks
or tasks and whose edges are events or task submissions.
We deﬁne the total complexity of a lifeline as the cu-
mulative complexity of all of its vertices as a function
of their cumulative input. The synchronous complexity
of a lifeline is the greatest individual complexity among
its vertices. Two EDA-based services may have lifelines
with the same total complexity if they offer the same
functionality, but these lifelines may have different syn-
chronous complexity due to different choices of parti-
tions. While computational complexity is an appropri-
ate measure for compute-bound vertices, time may be a
more appropriate measure for vertices that perform I/O.
Consequently, we deﬁne a lifeline’s total time and syn-
chronous time analogously.
If there is a difference between a lifeline’s average and
worst-case synchronous complexity (time), then we call
this a vulnerable lifeline2. We attribute the root cause
of the difference between average and worst-case perfor-
mance to a vulnerable API invoked in the problematic
vertex.
The notion of a “vulnerable API” is a convenient ab-
straction. The trouble may of course not be an API at all
but the use of an unsafe language feature (e.g. ReDoS).
And if an API is asynchronous, it is itself partitioned and
will have its own sub-Lifeline. In this case we are con-
cerned about the costs of those vertices.
EHP attacks. An EHP attack exploits an EDA-based
service with an incorrect implementation of cooperative
multitasking. The attacker identiﬁes a vulnerable lifeline
(server API) and poisons the Event Handler that executes
the corresponding large-complexity callback or task with
evil input. This evil input causes the Event Handler exe-
cuting it to block, starving pending requests.
An EHP attack can be carried out against either the
Event Loop or the Workers in the Worker Pool. A poi-
soned Event Loop brings the server to a halt, while the
throughput of the Worker Pool will degrade for each si-
multaneously poisoned Worker. Thus, an attacker’s aim
is to poison either the Event Loop or enough of the
Worker Pool to harm the throughput of the server. Based
on typical Worker Pool sizes, we assume the Worker Pool
is small enough that poisoning it will not attract the at-
tention of network-level defenses.
Since the EDA relies on cooperative multitasking, a
lifeline’s synchronous complexity (time) provide theoret-
ical and practical bounds on how vulnerable it is. Note
that a lifeline with large total complexity (time) is not
vulnerable so long as each vertex (callback/task) has
small synchronous complexity (time). It is for this rea-
son that not all AC attacks can be used for EHP attacks.
If an AC attack triggers large total complexity (time) but
2Differences in complexity are well deﬁned. For differences in I/O
time we are referring to performance outliers.
USENIX Association
27th USENIX Security Symposium    345
1 def s e r v e F i l e ( name ) :