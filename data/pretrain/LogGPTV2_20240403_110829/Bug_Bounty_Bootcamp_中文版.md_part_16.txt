internet. [ ]{#c04.xhtml#Page_56 .pagebreak title="56"} Reusing attack
payloads shared by others can help you find bugs faster. We will talk
more about how to use reused payloads to hunt for vulnerabilities in [
Chapter 25 ]{.xref itemid="xref_target_Chapter 25"} .
然后，切换到有效负载屏幕（图4-13）。在此处，您可以选择要插入请求中的有效负载。要爆破登录密码，可以在此处添加常用密码列表。您还可以使用数字列表来爆破请求中的ID，或使用从Internet下载的攻击有效负载列表。重新使用别人分享的攻击有效负载可以帮助您更快地找到漏洞。我们将在第25章中更多地讨论如何使用重复使用的有效负载来寻找漏洞。
![[Figure 4-13]{#c04.xhtml#figure4-13} : Choose your payload list on the
Payloads screen. ¶
图4-13：在载荷屏幕上选择您的载荷列表。](image_fi/501546c04/f04013.png){.keyline}
Once you've specified those, click the **Start attack** button to start
the automated test. The intruder will send a request for each payload
you listed and record all responses. You can then review the responses
and response codes and look for interesting results.
一旦您指定了这些内容，点击"开始攻击"按钮以启动自动化测试。入侵者将为您列出的每个有效负载发送请求并记录所有响应。然后，您可以查看响应和响应代码，并寻找有趣的结果。
### The Repeater {#c04.xhtml#h2-123456c01-0006}
The *repeater* is probably the tool you'll use the most often ( [Figure
4-14](#c04.xhtml#figure4-14){#c04.xhtml#figureanchor4-14} ). You can use
it to modify requests and examine server responses in detail. You could
also use it to bookmark interesting requests to go back to later.
中继器可能是您最常使用的工具（图4-14）。您可以使用它修改请求并仔细检查服务器响应。您还可以将有趣的请求添加到书签中以便以后回到。
Although the repeater and intruder both allow you to manipulate
requests, the two tools serve very different purposes. The intruder
automates attacks by automatically sending programmatically modified
requests. The repeater is meant for manual, detailed modifications of a
single request.
尽管中继器和入侵者都允许您操作请求，但这两种工具的用途非常不同。入侵者通过自动发送程序化修改的请求自动化攻击。中继器是用于手动、详细修改单个请求的工具。
Send requests to the repeater by right-clicking the request and
selecting **Send to repeater** .
通过右键点击请求并选择"发送到中继器"来发送请求。
On the left of the repeater screen are requests. You can modify a
request here and send the modified request to the server by clicking
**Send** at the top. The corresponding response from the server will
appear on the right.
中继器屏幕左侧是请求。您可以在此修改请求，并在顶部单击"发送"将修改后的请求发送到服务器。相应的服务器响应将出现在右侧。
The repeater is good for exploiting bugs manually, trying to bypass
filters, and testing out different attack methods that target the same
endpoint.
中继器对于手动利用漏洞、尝试绕过过滤器、测试针对同一端点的不同攻击方法非常有用。
[ ]{#c04.xhtml#Page_57 .pagebreak title="57"}
![[Figure 4-14]{#c04.xhtml#figure4-14} : The repeater is good for close
examination of requests and manual exploitation. ¶
图4-14：中继器适用于对请求的近距离审查和手动利用。](image_fi/501546c04/f04014.png){.keyline}
### The Decoder {#c04.xhtml#h2-123456c01-0007}
The Burp *decoder* is a convenient way to encode and decode data you
find in requests and responses ( [Figure
4-15](#c04.xhtml#figure4-15){#c04.xhtml#figureanchor4-15} ). Most often,
I use it to decode, manipulate, and re-encode application data before
forwarding it to applications.
"Burp解码器是一种方便的编码和解码工具，可用于处理请求和响应中的数据（图4-15）。我经常使用它来解码、操作和重新编码应用程序数据，然后将其转发给应用程序。"
![[Figure 4-15]{#c04.xhtml#figure4-15} : You can use the decoder to
decode application data to read or manipulate its plaintext. ¶
图4-15：您可以使用解码器将应用程序数据解码，以读取或操作其明文。](image_fi/501546c04/f04015.png){.keyline}
Send data to the decoder by highlighting a block of text in any request
or response, then right-clicking it and selecting **Send to decoder** .
Use the drop-down menus on the right to specify the algorithm to use to
encode or decode the message. If you're not sure which algorithm the
message is encoded with, try to **Smart decode** it. Burp will try to
detect the encoding, and decode the message accordingly.
通过在任何请求或响应中突出显示文本块，然后右键单击它并选择发送到解码器，将数据发送到解码器。使用右侧的下拉菜单指定用于编码或解码消息的算法。如果您不确定消息使用哪个算法进行编码，请尝试智能解码。Burp将尝试检测编码，并相应地解码消息。
### [ ]{#c04.xhtml#Page_58 .pagebreak title="58"} The Comparer {#c04.xhtml#h2-123456c01-0008}
The *comparer* is a way to compare requests or responses ( [Figure
4-16](#c04.xhtml#figure4-16){#c04.xhtml#figureanchor4-16} ). It
highlights the differences between two blocks of text. You might use it
to examine how a difference in parameters impacts the response you get
from the server, for example.
比较器是一种比较请求或响应的方式（图4-16）。它突出显示两个文本块之间的差异。例如，您可以使用它来检查参数差异如何影响您从服务器获取的响应。
Send data over to the comparer by highlighting a block of text in any
request or response, then right-clicking it and selecting **Send to
comparer** .
通过在任何请求或响应中突出显示一段文本块，然后右键单击该文本块并选择发送到比较器，将数据发送到比较器。
![[Figure 4-16]{#c04.xhtml#figure4-16} : The comparer will highlight the
differences between two blocks of text. ¶
图4-16：比较器将突出显示两个文本块之间的差异。](image_fi/501546c04/f04016.png){.keyline}
### Saving Burp Requests {#c04.xhtml#h2-123456c01-0009}
You can save requests and responses on Burp as well. Simply right-click
any request and select **Copy URL** , **Copy as curl command** , or
**Copy to file** to store these results into your note folder for that
target. The Copy URL option copies the URL of the request. The Copy as
curl command copies the entire request, including the request method,
URL, headers, and body as a curl command. Copy to file saves the entire
request to a separate file.
您还可以在Burp上保存请求和响应。只需右键单击任何请求，然后选择\"复制URL\"，\"复制为curl命令\"或\"复制到文件\"，将这些结果存储到该目标的笔记文件夹中。
\"复制URL\"选项会复制请求的URL。\"复制为curl命令\"会将整个请求，包括请求方法、URL、头部和正文，复制为一个curl命令。\"复制到文件\"会将整个请求保存到一个单独的文件中。
## A Final Note on . . . Taking Notes {#c04.xhtml#h1-123456c01-0004}
Before you get started looking for vulnerabilities in the next chapter,
a quick word of advice: organizational skills are critical if you want
to succeed in bug bounties. When you work on targets with large scopes
or hack multiple targets at the same time, the information you gather
from the targets could balloon and become hard to manage.
在你开始寻找下一章的漏洞之前，快速给你一个建议：组织能力对于成功参与漏洞赏金计划至关重要。当你在大型目标上工作或同时攻击多个目标时，你从目标中收集到的信息可能会爆炸式增长并变得难以管理。
Often, you won't be able to find bugs right away. Instead, you'll spot a
lot of weird behaviors and misconfigurations that aren't exploitable at
the moment but that you could combine with other behavior in an attack
later on. You'll need to take good notes about any new features,
misconfigurations, minor bugs, and suspicious endpoints that you find so
you can quickly go back and use them.
通常，您可能无法立即发现漏洞。相反，您会发现许多奇怪的行为和错误配置，它们目前无法被利用，但您以后可能会将其与其他行为结合在一起进行攻击。您需要用心记录任何新功能、错误配置、小错误和可疑的终端节点，以便您可以快速回来使用它们。
Notes also help you plan attacks. You can keep track of your hacking
progress, the features you've tested, and those you still have to check.
This prevents you from wasting time by testing the same features over
and over again.
笔记也可以帮助你规划攻击。你可以追踪你的黑客进度，你已经测试过的功能以及你还需要检查的功能。这可以防止你反复测试同样的功能而浪费时间。
[ ]{#c04.xhtml#Page_59 .pagebreak title="59"} Another good use of notes
is to jot down information about the vulnerabilities you learn about.
Record details about each vulnerability, such as its theoretical
concept, potential impact, exploitation steps, and sample
proof-of-concept code. Over time, this will strengthen your technical
skills and build up a technique repository that you can revisit if
needed.
笔记的另一个好用处是记录你学到的漏洞信息。要记录每个漏洞的细节，如理论概念、潜在影响、攻击步骤和样本概念证明代码等。随着时间的推移，这将加强你的技术能力和建立一个技术库，如果需要时可以重新查看。
Since these notes tend to balloon in volume and become very
disorganized, it's good to keep them organized from the get-go. I like
to take notes in plaintext files by using Sublime Text (
[https://www.sublimetext.com/](https://www.sublimetext.com/){.LinkURL} )
and organize them by sorting them into directories, with subdirectories
for each target and topic.
由于这些笔记往往数量庞大且杂乱无章，从一开始就保持有组织是很好的。我喜欢使用
Sublime
Text（https://www.sublimetext.com/）在纯文本文件中记录笔记，并通过将它们分类到目录中组织它们，为每个目标和主题创建子目录。
For example, you can create a folder for each target you're working on,
like Facebook, Google, or Verizon. Then, within each of these folders,
create files to document interesting endpoints, new and hidden features,
reconnaissance results, draft reports, and POCs.
例如，您可以为每个目标创建一个文件夹，比如Facebook、Google或Verizon。然后，在每个文件夹中，创建文件以记录有趣的终端、新的和隐藏的特性、侦察结果、草稿报告和
POCs。
Find a note-taking and organizational strategy that works for you. For
example, if you are like me and prefer to store notes in plaintext, you
can search around for an integrated development environment (IDE) or
text editor that you feel the most comfortable in. Some prefer to take
notes using the Markdown format. In this case, Obsidian (
[https://obsidian.md/](https://obsidian.md/){.LinkURL} ) is an excellent
tool that displays your notes in an organized way. If you like to use
mind maps to organize your ideas, you can try the mind-mapping tool
XMind ( [https://www.xmind.net/](https://www.xmind.net/){.LinkURL} ).
寻找适合自己的笔记和组织策略。例如，如果你像我一样喜欢将笔记存储为纯文本，可以寻找一个你感觉最舒适的集成开发环境（IDE）或文本编辑器。有些人喜欢使用Markdown格式记录笔记。在这种情况下，Obsidian是一个出色的工具，可以有序地显示笔记（https://obsidian.md/）。如果你喜欢使用思维导图来组织你的思路，可以试试思维导图工具XMind（https://www.xmind.net/）。
Keep your bug bounty notes in a centralized place, such as an external
hard drive or cloud storage service like Google Drive or Dropbox, and
don't forget to back up your notes regularly!
将您的漏洞赏金笔记保存在集中的地方，比如外部硬盘或像Google
Drive或Dropbox这样的云存储服务中，并不要忘记定期进行备份！
In summary, here are a few tips to help you take good notes:
以下是几个帮助您记好笔记的小贴士：
-   Take notes about any weird behaviors, new features,
    misconfigurations, minor bugs, and suspicious endpoints to keep
    track of potential vulnerabilities.
-   Take notes to keep track of your hacking progress, the features
    you've tested, and those you still have to check.
-   Take notes while you learn: jot down information about each
    vulnerability you learn about, like its theoretical concept,
    potential impact, exploitation steps, and sample POC code.
-   Keep your notes organized from the get-go, so you can find them when
    you need to!
-   Find a note-taking and organizational process that works for you.
    You can try out note-taking tools like Sublime Text, Obsidian, and
    XMind to find a tool that you prefer.
:::
[]{#c05.xhtml}
::: section
# [ [ ]{#c05.xhtml#Page_61 .pagebreak title="61"} 5 ]{.ChapterNumber} [ Web Hacking Reconnaissance ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
The first step to attacking any target is conducting *reconnaissance* ,
or simply put, gathering information about the target. Reconnaissance is
important because it's how you figure out an application's attack
surface. To look for bugs most efficiently, you need to discover all the
possible ways of attacking a target before deciding on the most
effective approach.
攻击任何目标的第一步是进行侦察，或者简单地说，收集有关目标的信息。侦察是重要的，因为它是您确定应用程序攻击面的方式。为了最有效地寻找漏洞，您需要在决定最有效的方法之前发现攻击目标的所有可能方法。
If an application doesn't use PHP, for instance, there's no reason to
test it for PHP vulnerabilities, and if the organization doesn't use
Amazon Web Services (AWS), you shouldn't waste time trying to crack its
buckets. By understanding how a target works, you can set up a solid
foundation for finding vulnerabilities. Recon skills are what separate a
good hacker from an ineffective one.
如果一个应用程序不使用PHP，那么就没有理由为其测试PHP漏洞，如果组织不使用Amazon
Web
Services（AWS），您就不应该浪费时间尝试破解其存储桶。通过了解目标的工作原理，您可以为发现漏洞建立坚实的基础。侦察技能是区分好的黑客和无效的黑客的关键。
[ ]{#c05.xhtml#Page_62 .pagebreak title="62"} In this chapter, I'll
introduce the most useful recon techniques for a bug bounty hunter. Then
I'll walk you through the basics of writing bash scripts to automate
recon tasks and make them more efficient. *Bash* is a shell interpreter
available on macOS and Linux systems. Though this chapter assumes you're
using a Linux system, you should be able to install many of these tools
on other operating systems as well. You need to install some of the
tools we discuss in this chapter before using them. I have included
links to all the tools at the end of the chapter.
在这一章节，我将介绍适用于漏洞赏金猎人最有用的侦查技巧。然后，我将向您介绍编写Bash脚本以自动化侦查任务并使其更加高效的基础知识。Bash是可在macOS和Linux系统上使用的shell解释器。尽管本章假设您使用的是Linux系统，但您也应该能够在其他操作系统上安装许多这些工具。在使用这些工具之前，您需要安装本章中讨论的一些工具。我已在本章末尾附上了所有工具的链接。
Before you go on, please verify that you're allowed to perform intrusive
recon on your target before you attempt any techniques that actively
engage with it. In particular, activities like port scanning, spidering,
and directory brute-forcing can generate a lot of unwanted traffic on a
site and may not be welcomed by the organization.
在继续之前，请先确认你有权进行有侵入性的侦察行为，再尝试那些会主动对目标发起攻击的技术。特别是像端口扫描、蜘蛛爬行和目录爆破等活动，可能会在网站上产生大量不必要的流量，并可能不被该组织所欢迎。
## Manually Walking Through the Target {#c05.xhtml#h1-501546c05-0001}
Before we dive into anything else, it will help to first manually walk
through the application to learn more about it. Try to uncover every
feature in the application that users can access by browsing through
every page and clicking every link. Access the functionalities that you
don't usually use.