&@$cursession.Processes[4].KernelObject
: 0xffff898f0327d300 [Type: _EPROCESS *]
Then execute the !object command with the process object address as the argument:
lkd> !object 0xffff898f0327d300  
Object: ffff898f0327d300  Type: (ffff898f032954e0) Process 
    ObjectHeader: ffff898f0327d2d0 (new version) 
    HandleCount: 6  PointerCount: 215645
Notice that on 32-bit Windows, the object header starts 0x18 (24 decimal) bytes prior to the 
start of the object body, and on 64-bit Windows, it starts 0x30 (48 decimal) bytes prior—the size 
of the object header itself. You can view the object header with this command:
lkd> dx (nt!_OBJECT_HEADER*)0xffff898f0327d2d0 
(nt!_OBJECT_HEADER*)0xffff898f0327d2d0
: 0xffff898f0327d2d0 [Type: _OBJECT_HEADER *] 
    [+0x000] PointerCount     : 214943 [Type: __int64] 
    [+0x008] HandleCount
: 6 [Type: __int64] 
    [+0x008] NextToFree
: 0x6 [Type: void *] 
    [+0x010] Lock
[Type: _EX_PUSH_LOCK] 
    [+0x018] TypeIndex
: 0x93 [Type: unsigned char] 
    [+0x019] TraceFlags
: 0x0 [Type: unsigned char] 
    [+0x019 ( 0: 0)] DbgRefTrace
: 0x0 [Type: unsigned char] 
EXPERIMENT: Viewing object headers and type objects
a process object with the dx @$cursession.Processes debugger data model command:
lkd> dx -r0 &@$cursession.Processes[4].KernelObject
&@$cursession.Processes[4].KernelObject
: 0xffff898f0327d300 [Type: _EPROCESS *]
Then execute the !object command with the process object address as the argument:
lkd> !object 0xffff898f0327d300 
Object: ffff898f0327d300  Type: (ffff898f032954e0) Process
    ObjectHeader: ffff898f0327d2d0 (new version)
    HandleCount: 6  PointerCount: 215645
Notice that on 32-bit Windows, the object header starts 0x18 (24 decimal) bytes prior to the 
start of the object body, and on 64-bit Windows, it starts 0x30 (48 decimal) bytes prior—the size 
of the object header itself. You can view the object header with this command:
lkd> dx (nt!_OBJECT_HEADER*)0xffff898f0327d2d0
(nt!_OBJECT_HEADER*)0xffff898f0327d2d0
: 0xffff898f0327d2d0 [Type: _OBJECT_HEADER *]
    [+0x000] PointerCount     : 214943 [Type: __int64]
    [+0x008] HandleCount
: 6 [Type: __int64]
    [+0x008] NextToFree
: 0x6 [Type: void *]
    [+0x010] Lock
[Type: _EX_PUSH_LOCK]
    [+0x018] TypeIndex
: 0x93 [Type: unsigned char]
    [+0x019] TraceFlags
: 0x0 [Type: unsigned char]
    [+0x019 ( 0: 0)] DbgRefTrace
: 0x0 [Type: unsigned char]
138 
CHAPTER 8 System mechanisms
    [+0x019 ( 1: 1)] DbgTracePermanent : 0x0 [Type: unsigned char] 
    [+0x01a] InfoMask
: 0x80 [Type: unsigned char] 
    [+0x01b] Flags
: 0x2 [Type: unsigned char] 
    [+0x01b ( 0: 0)] NewObject        : 0x0 [Type: unsigned char] 
    [+0x01b ( 1: 1)] KernelObject     : 0x1 [Type: unsigned char] 
    [+0x01b ( 2: 2)] KernelOnlyAccess : 0x0 [Type: unsigned char] 
    [+0x01b ( 3: 3)] ExclusiveObject  : 0x0 [Type: unsigned char] 
    [+0x01b ( 4: 4)] PermanentObject  : 0x0 [Type: unsigned char] 
    [+0x01b ( 5: 5)] DefaultSecurityQuota : 0x0 [Type: unsigned char] 
    [+0x01b ( 6: 6)] SingleHandleEntry : 0x0 [Type: unsigned char] 
    [+0x01b ( 7: 7)] DeletedInline    : 0x0 [Type: unsigned char] 
    [+0x01c] Reserved
: 0xffff898f [Type: unsigned long] 
    [+0x020] ObjectCreateInfo : 0xfffff8047ee6d500 [Type: _OBJECT_CREATE_INFORMATION *] 
    [+0x020] QuotaBlockCharged : 0xfffff8047ee6d500 [Type: void *] 
    [+0x028] SecurityDescriptor : 0xffffc704ade03b6a [Type: void *] 
    [+0x030] Body
[Type: _QUAD] 
    ObjectType
: Process 
    UnderlyingObject [Type: _EPROCESS]
Now look at the object type data structure by copying the pointer that !object showed 
you earlier:
lkd> dx (nt!_OBJECT_TYPE*)0xffff898f032954e0 
(nt!_OBJECT_TYPE*)0xffff898f032954e0
: 0xffff898f032954e0 [Type: _OBJECT_TYPE *] 
    [+0x000] TypeList
[Type: _LIST_ENTRY] 
    [+0x010] Name
: "Process" [Type: _UNICODE_STRING] 
    [+0x020] DefaultObject    : 0x0 [Type: void *] 
    [+0x028] Index
: 0x7 [Type: unsigned char] 
    [+0x02c] TotalNumberOfObjects : 0x2e9 [Type: unsigned long] 
    [+0x030] TotalNumberOfHandles : 0x15a1 [Type: unsigned long] 
    [+0x034] HighWaterNumberOfObjects : 0x2f9 [Type: unsigned long] 
    [+0x038] HighWaterNumberOfHandles : 0x170d [Type: unsigned long] 
    [+0x040] TypeInfo
[Type: _OBJECT_TYPE_INITIALIZER] 
    [+0x0b8] TypeLock
[Type: _EX_PUSH_LOCK] 
    [+0x0c0] Key
: 0x636f7250 [Type: unsigned long] 
    [+0x0c8] CallbackList     [Type: _LIST_ENTRY]
The output shows that the object type structure includes the name of the object type, tracks 
the total number of active objects of that type, and tracks the peak number of handles and 
objects of that type. The CallbackList
that are associated with this object type. The TypeInfo
lkd> dx ((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo 
((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo
[Type: _OBJECT_TYPE_INITIALIZER] 
    [+0x000] Length           : 0x78 [Type: unsigned short] 
    [+0x002] ObjectTypeFlags  : 0xca [Type: unsigned short] 
    [+0x002 ( 0: 0)] CaseInsensitive  : 0x0 [Type: unsigned char] 
    [+0x002 ( 1: 1)] UnnamedObjectsOnly : 0x1 [Type: unsigned char] 
    [+0x002 ( 2: 2)] UseDefaultObject : 0x0 [Type: unsigned char] 
    [+0x002 ( 3: 3)] SecurityRequired : 0x1 [Type: unsigned char] 
    [+0x002 ( 4: 4)] MaintainHandleCount : 0x0 [Type: unsigned char] 
    [+0x002 ( 5: 5)] MaintainTypeList : 0x0 [Type: unsigned char] 
    [+0x019 ( 1: 1)] DbgTracePermanent : 0x0 [Type: unsigned char]
    [+0x01a] InfoMask
: 0x80 [Type: unsigned char]
    [+0x01b] Flags
: 0x2 [Type: unsigned char]
    [+0x01b ( 0: 0)] NewObject        : 0x0 [Type: unsigned char]
    [+0x01b ( 1: 1)] KernelObject     : 0x1 [Type: unsigned char]
    [+0x01b ( 2: 2)] KernelOnlyAccess : 0x0 [Type: unsigned char]
    [+0x01b ( 3: 3)] ExclusiveObject  : 0x0 [Type: unsigned char]
    [+0x01b ( 4: 4)] PermanentObject  : 0x0 [Type: unsigned char]
    [+0x01b ( 5: 5)] DefaultSecurityQuota : 0x0 [Type: unsigned char]
    [+0x01b ( 6: 6)] SingleHandleEntry : 0x0 [Type: unsigned char]
    [+0x01b ( 7: 7)] DeletedInline    : 0x0 [Type: unsigned char]
    [+0x01c] Reserved
: 0xffff898f [Type: unsigned long]
    [+0x020] ObjectCreateInfo : 0xfffff8047ee6d500 [Type: _OBJECT_CREATE_INFORMATION *]
    [+0x020] QuotaBlockCharged : 0xfffff8047ee6d500 [Type: void *]
    [+0x028] SecurityDescriptor : 0xffffc704ade03b6a [Type: void *]
    [+0x030] Body
[Type: _QUAD]
    ObjectType
: Process
    UnderlyingObject [Type: _EPROCESS]
Now look at the object type data structure by copying the pointer that !object showed 
you earlier:
lkd> dx (nt!_OBJECT_TYPE*)0xffff898f032954e0
(nt!_OBJECT_TYPE*)0xffff898f032954e0
: 0xffff898f032954e0 [Type: _OBJECT_TYPE *]
    [+0x000] TypeList
[Type: _LIST_ENTRY]
    [+0x010] Name
: "Process" [Type: _UNICODE_STRING]
    [+0x020] DefaultObject    : 0x0 [Type: void *]
    [+0x028] Index
: 0x7 [Type: unsigned char]
    [+0x02c] TotalNumberOfObjects : 0x2e9 [Type: unsigned long]
    [+0x030] TotalNumberOfHandles : 0x15a1 [Type: unsigned long]
    [+0x034] HighWaterNumberOfObjects : 0x2f9 [Type: unsigned long]
    [+0x038] HighWaterNumberOfHandles : 0x170d [Type: unsigned long]
    [+0x040] TypeInfo
[Type: _OBJECT_TYPE_INITIALIZER]
    [+0x0b8] TypeLock
[Type: _EX_PUSH_LOCK]
    [+0x0c0] Key
: 0x636f7250 [Type: unsigned long]
    [+0x0c8] CallbackList     [Type: _LIST_ENTRY]
The output shows that the object type structure includes the name of the object type, tracks 
the total number of active objects of that type, and tracks the peak number of handles and 
objects of that type. The CallbackList
CallbackList
CallbackList
that are associated with this object type. The TypeInfo
lkd> dx ((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo
((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo
[Type: _OBJECT_TYPE_INITIALIZER]
    [+0x000] Length           : 0x78 [Type: unsigned short]
    [+0x002] ObjectTypeFlags  : 0xca [Type: unsigned short]
    [+0x002 ( 0: 0)] CaseInsensitive  : 0x0 [Type: unsigned char]
    [+0x002 ( 1: 1)] UnnamedObjectsOnly : 0x1 [Type: unsigned char]
    [+0x002 ( 2: 2)] UseDefaultObject : 0x0 [Type: unsigned char]
    [+0x002 ( 3: 3)] SecurityRequired : 0x1 [Type: unsigned char]
    [+0x002 ( 4: 4)] MaintainHandleCount : 0x0 [Type: unsigned char]
    [+0x002 ( 5: 5)] MaintainTypeList : 0x0 [Type: unsigned char]
CHAPTER 8 System mechanisms
139
    [+0x002 ( 6: 6)] SupportsObjectCallbacks : 0x1 [Type: unsigned char] 
    [+0x002 ( 7: 7)] CacheAligned     : 0x1 [Type: unsigned char] 
    [+0x003 ( 0: 0)] UseExtendedParameters : 0x0 [Type: unsigned char] 
    [+0x003 ( 7: 1)] Reserved
: 0x0 [Type: unsigned char] 
    [+0x004] ObjectTypeCode   : 0x20 [Type: unsigned long] 
    [+0x008] InvalidAttributes : 0xb0 [Type: unsigned long] 
    [+0x00c] GenericMapping   [Type: _GENERIC_MAPPING] 
    [+0x01c] ValidAccessMask  : 0x1fffff [Type: unsigned long] 
    [+0x020] RetainAccess     : 0x101000 [Type: unsigned long] 
    [+0x024] PoolType
: NonPagedPoolNx (512) [Type: _POOL_TYPE] 
    [+0x028] DefaultPagedPoolCharge : 0x1000 [Type: unsigned long] 
    [+0x02c] DefaultNonPagedPoolCharge : 0x8d8 [Type: unsigned long] 
    [+0x030] DumpProcedure    : 0x0 [Type: void (__cdecl*)(void *,_OBJECT_DUMP_CONTROL *)] 
    [+0x038] OpenProcedure    : 0xfffff8047f062f40 [Type: long (__cdecl*) 
(_OB_OPEN_REASON,char,_EPROCESS *,void *,unsigned long *,unsigned long)] 
    [+0x040] CloseProcedure   : 0xfffff8047F087a90 [Type: void (__cdecl*) 
(_EPROCESS *,void *,unsigned __int64,unsigned __int64)] 
    [+0x048] DeleteProcedure  : 0xfffff8047f02f030 [Type: void (__cdecl*)(void *)] 
    [+0x050] ParseProcedure   : 0x0 [Type: long (__cdecl*)(void *,void *,_ACCESS_STATE *, 
char,unsigned long,_UNICODE_STRING *,_UNICODE_STRING *,void *, 
_SECURITY_QUALITY_OF_SERVICE *,void * *)] 
    [+0x050] ParseProcedureEx : 0x0 [Type: long (__cdecl*)(void *,void *,_ACCESS_STATE *, 
char,unsigned long,_UNICODE_STRING *,_UNICODE_STRING *,void *, 
_SECURITY_QUALITY_OF_SERVICE *,_OB_EXTENDED_PARSE_PARAMETERS *,void * *)] 
    [+0x058] SecurityProcedure : 0xfffff8047eff57b0 [Type: long (__cdecl*) 
(void *,_SECURITY_OPERATION_CODE,unsigned long *,void *,unsigned long *, 
void * *,_POOL_TYPE,_GENERIC_MAPPING *,char)] 
    [+0x060] QueryNameProcedure : 0x0 [Type: long (__cdecl*)(void *,unsigned char,_ 
OBJECT_NAME_INFORMATION *,unsigned long,unsigned long *,char)] 
    [+0x068] OkayToCloseProcedure : 0x0 [Type: unsigned char (__cdecl*)(_EPROCESS *, 
void *,void *,char)] 
    [+0x070] WaitObjectFlagMask : 0x0 [Type: unsigned long] 
    [+0x074] WaitObjectFlagOffset : 0x0 [Type: unsigned short] 
    [+0x076] WaitObjectPointerOffset : 0x0 [Type: unsigned short]
-
through Windows API routines. The information stored in the type initializers is described in Table 8-22.
TABLE 8-22 
Attribute
Purpose
Type name
The name for objects of this type (Process, Event, ALPC Port, and so on).
Pool type
Indicates whether objects of this type should be allocated from paged or non-
paged memory.
Default quota charges
Default paged and non-paged pool values to charge to process quotas.
Valid access mask
The types of access a thread can request when opening a handle to an object of this 
type (read, write, terminate, suspend, and so on).
Generic access rights mapping
A mapping between the four generic access rights (read, write, execute, and all) to the 
    [+0x002 ( 6: 6)] SupportsObjectCallbacks : 0x1 [Type: unsigned char]
    [+0x002 ( 7: 7)] CacheAligned     : 0x1 [Type: unsigned char]
    [+0x003 ( 0: 0)] UseExtendedParameters : 0x0 [Type: unsigned char]
    [+0x003 ( 7: 1)] Reserved
: 0x0 [Type: unsigned char]
    [+0x004] ObjectTypeCode   : 0x20 [Type: unsigned long]
    [+0x008] InvalidAttributes : 0xb0 [Type: unsigned long]
    [+0x00c] GenericMapping   [Type: _GENERIC_MAPPING]
    [+0x01c] ValidAccessMask  : 0x1fffff [Type: unsigned long]
    [+0x020] RetainAccess     : 0x101000 [Type: unsigned long]
    [+0x024] PoolType
: NonPagedPoolNx (512) [Type: _POOL_TYPE]
    [+0x028] DefaultPagedPoolCharge : 0x1000 [Type: unsigned long]
    [+0x02c] DefaultNonPagedPoolCharge : 0x8d8 [Type: unsigned long]
    [+0x030] DumpProcedure    : 0x0 [Type: void (__cdecl*)(void *,_OBJECT_DUMP_CONTROL *)]
    [+0x038] OpenProcedure    : 0xfffff8047f062f40 [Type: long (__cdecl*)
(_OB_OPEN_REASON,char,_EPROCESS *,void *,unsigned long *,unsigned long)]
    [+0x040] CloseProcedure   : 0xfffff8047F087a90 [Type: void (__cdecl*)
(_EPROCESS *,void *,unsigned __int64,unsigned __int64)]
    [+0x048] DeleteProcedure  : 0xfffff8047f02f030 [Type: void (__cdecl*)(void *)]
    [+0x050] ParseProcedure   : 0x0 [Type: long (__cdecl*)(void *,void *,_ACCESS_STATE *,
char,unsigned long,_UNICODE_STRING *,_UNICODE_STRING *,void *,
_SECURITY_QUALITY_OF_SERVICE *,void * *)]
    [+0x050] ParseProcedureEx : 0x0 [Type: long (__cdecl*)(void *,void *,_ACCESS_STATE *,
char,unsigned long,_UNICODE_STRING *,_UNICODE_STRING *,void *,
_SECURITY_QUALITY_OF_SERVICE *,_OB_EXTENDED_PARSE_PARAMETERS *,void * *)]
    [+0x058] SecurityProcedure : 0xfffff8047eff57b0 [Type: long (__cdecl*)
(void *,_SECURITY_OPERATION_CODE,unsigned long *,void *,unsigned long *,
void * *,_POOL_TYPE,_GENERIC_MAPPING *,char)]
    [+0x060] QueryNameProcedure : 0x0 [Type: long (__cdecl*)(void *,unsigned char,_
OBJECT_NAME_INFORMATION *,unsigned long,unsigned long *,char)]
    [+0x068] OkayToCloseProcedure : 0x0 [Type: unsigned char (__cdecl*)(_EPROCESS *,
void *,void *,char)]
    [+0x070] WaitObjectFlagMask : 0x0 [Type: unsigned long]
    [+0x074] WaitObjectFlagOffset : 0x0 [Type: unsigned short]
    [+0x076] WaitObjectPointerOffset : 0x0 [Type: unsigned short]
140 
CHAPTER 8 System mechanisms
Attribute
Purpose
Retain access
Access rights that can never be removed by any third-party Object Manager callbacks 
(part of the callback list described earlier).
Indicate whether objects must never have names (such as process objects), whether 
their names are case-sensitive, whether they require a security descriptor, whether 
they should be cache aligned (requiring a padding subheader), whether they sup-
subheader) and/or a type-list linkage (creator information subheader) should be 
maintained. The use default objectdefault object 
use extended parameters
of the extended parse procedure method, described later.
Object type code
Used to describe the type of object this is (versus comparing with a well-known name 
1, synchronization objects set this to 2, and thread ob-
jects set this to 4
associated with a message.
Invalid attributes
object type.
Default object
object, if the object type creator requested one. Note that certain objects, such as 
Allows the Object Manager to generically locate the underlying kernel dispatcher 
object that should be used for synchronization when one of the generic wait services 