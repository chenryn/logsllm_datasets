### 优化后的文本

#### 查看进程对象及其对象头

1. 使用 `dx` 命令查看当前会话中的第四个进程的内核对象地址：
   ```plaintext
   lkd> dx -r0 &@$cursession.Processes[4].KernelObject
   &@$cursession.Processes[4].KernelObject: 0xffff898f0327d300 [Type: _EPROCESS *]
   ```

2. 使用 `!object` 命令，将该进程对象地址作为参数执行：
   ```plaintext
   lkd> !object 0xffff898f0327d300
   Object: ffff898f0327d300  Type: (ffff898f032954e0) Process
       ObjectHeader: ffff898f0327d2d0 (new version)
       HandleCount: 6  PointerCount: 215645
   ```

3. 注意，在32位Windows系统中，对象头在对象体之前偏移0x18（十进制24）字节；而在64位Windows系统中，偏移0x30（十进制48）字节。可以使用以下命令查看对象头：
   ```plaintext
   lkd> dx (nt!_OBJECT_HEADER*)0xffff898f0327d2d0
   (nt!_OBJECT_HEADER*)0xffff898f0327d2d0: 0xffff898f0327d2d0 [Type: _OBJECT_HEADER *]
       [+0x000] PointerCount: 214943 [Type: __int64]
       [+0x008] HandleCount: 6 [Type: __int64]
       [+0x008] NextToFree: 0x6 [Type: void *]
       [+0x010] Lock: [Type: _EX_PUSH_LOCK]
       [+0x018] TypeIndex: 0x93 [Type: unsigned char]
       [+0x019] TraceFlags: 0x0 [Type: unsigned char]
       [+0x019 ( 0: 0)] DbgRefTrace: 0x0 [Type: unsigned char]
       [+0x019 ( 1: 1)] DbgTracePermanent: 0x0 [Type: unsigned char]
       [+0x01a] InfoMask: 0x80 [Type: unsigned char]
       [+0x01b] Flags: 0x2 [Type: unsigned char]
       [+0x01b ( 0: 0)] NewObject: 0x0 [Type: unsigned char]
       [+0x01b ( 1: 1)] KernelObject: 0x1 [Type: unsigned char]
       [+0x01b ( 2: 2)] KernelOnlyAccess: 0x0 [Type: unsigned char]
       [+0x01b ( 3: 3)] ExclusiveObject: 0x0 [Type: unsigned char]
       [+0x01b ( 4: 4)] PermanentObject: 0x0 [Type: unsigned char]
       [+0x01b ( 5: 5)] DefaultSecurityQuota: 0x0 [Type: unsigned char]
       [+0x01b ( 6: 6)] SingleHandleEntry: 0x0 [Type: unsigned char]
       [+0x01b ( 7: 7)] DeletedInline: 0x0 [Type: unsigned char]
       [+0x01c] Reserved: 0xffff898f [Type: unsigned long]
       [+0x020] ObjectCreateInfo: 0xfffff8047ee6d500 [Type: _OBJECT_CREATE_INFORMATION *]
       [+0x020] QuotaBlockCharged: 0xfffff8047ee6d500 [Type: void *]
       [+0x028] SecurityDescriptor: 0xffffc704ade03b6a [Type: void *]
       [+0x030] Body: [Type: _QUAD]
   ```

#### 查看对象类型数据结构

1. 使用 `!object` 命令显示的对象类型指针来查看对象类型数据结构：
   ```plaintext
   lkd> dx (nt!_OBJECT_TYPE*)0xffff898f032954e0
   (nt!_OBJECT_TYPE*)0xffff898f032954e0: 0xffff898f032954e0 [Type: _OBJECT_TYPE *]
       [+0x000] TypeList: [Type: _LIST_ENTRY]
       [+0x010] Name: "Process" [Type: _UNICODE_STRING]
       [+0x020] DefaultObject: 0x0 [Type: void *]
       [+0x028] Index: 0x7 [Type: unsigned char]
       [+0x02c] TotalNumberOfObjects: 0x2e9 [Type: unsigned long]
       [+0x030] TotalNumberOfHandles: 0x15a1 [Type: unsigned long]
       [+0x034] HighWaterNumberOfObjects: 0x2f9 [Type: unsigned long]
       [+0x038] HighWaterNumberOfHandles: 0x170d [Type: unsigned long]
       [+0x040] TypeInfo: [Type: _OBJECT_TYPE_INITIALIZER]
       [+0x0b8] TypeLock: [Type: _EX_PUSH_LOCK]
       [+0x0c0] Key: 0x636f7250 [Type: unsigned long]
       [+0x0c8] CallbackList: [Type: _LIST_ENTRY]
   ```

2. 对象类型结构包括对象类型的名称、活动对象总数、以及峰值句柄数和对象数。`CallbackList` 列表包含了与此对象类型相关的回调函数。

3. 查看 `TypeInfo` 结构：
   ```plaintext
   lkd> dx ((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo
   ((nt!_OBJECT_TYPE*)0xffff898f032954e0)->TypeInfo: [Type: _OBJECT_TYPE_INITIALIZER]
       [+0x000] Length: 0x78 [Type: unsigned short]
       [+0x002] ObjectTypeFlags: 0xca [Type: unsigned short]
       [+0x002 ( 0: 0)] CaseInsensitive: 0x0 [Type: unsigned char]
       [+0x002 ( 1: 1)] UnnamedObjectsOnly: 0x1 [Type: unsigned char]
       [+0x002 ( 2: 2)] UseDefaultObject: 0x0 [Type: unsigned char]
       [+0x002 ( 3: 3)] SecurityRequired: 0x1 [Type: unsigned char]
       [+0x002 ( 4: 4)] MaintainHandleCount: 0x0 [Type: unsigned char]
       [+0x002 ( 5: 5)] MaintainTypeList: 0x0 [Type: unsigned char]
       [+0x002 ( 6: 6)] SupportsObjectCallbacks: 0x1 [Type: unsigned char]
       [+0x002 ( 7: 7)] CacheAligned: 0x1 [Type: unsigned char]
       [+0x003 ( 0: 0)] UseExtendedParameters: 0x0 [Type: unsigned char]
       [+0x003 ( 7: 1)] Reserved: 0x0 [Type: unsigned char]
       [+0x004] ObjectTypeCode: 0x20 [Type: unsigned long]
       [+0x008] InvalidAttributes: 0xb0 [Type: unsigned long]
       [+0x00c] GenericMapping: [Type: _GENERIC_MAPPING]
       [+0x01c] ValidAccessMask: 0x1fffff [Type: unsigned long]
       [+0x020] RetainAccess: 0x101000 [Type: unsigned long]
       [+0x024] PoolType: NonPagedPoolNx (512) [Type: _POOL_TYPE]
       [+0x028] DefaultPagedPoolCharge: 0x1000 [Type: unsigned long]
       [+0x02c] DefaultNonPagedPoolCharge: 0x8d8 [Type: unsigned long]
       [+0x030] DumpProcedure: 0x0 [Type: void (__cdecl*)(void *, _OBJECT_DUMP_CONTROL *)]
       [+0x038] OpenProcedure: 0xfffff8047f062f40 [Type: long (__cdecl*)(_OB_OPEN_REASON, char, _EPROCESS *, void *, unsigned long *, unsigned long)]
       [+0x040] CloseProcedure: 0xfffff8047F087a90 [Type: void (__cdecl*)(_EPROCESS *, void *, unsigned __int64, unsigned __int64)]
       [+0x048] DeleteProcedure: 0xfffff8047f02f030 [Type: void (__cdecl*)(void *)]
       [+0x050] ParseProcedure: 0x0 [Type: long (__cdecl*)(void *, void *, _ACCESS_STATE *, char, unsigned long, _UNICODE_STRING *, _UNICODE_STRING *, void *, _SECURITY_QUALITY_OF_SERVICE *, void * *)]
       [+0x050] ParseProcedureEx: 0x0 [Type: long (__cdecl*)(void *, void *, _ACCESS_STATE *, char, unsigned long, _UNICODE_STRING *, _UNICODE_STRING *, void *, _SECURITY_QUALITY_OF_SERVICE *, _OB_EXTENDED_PARSE_PARAMETERS *, void * *)]
       [+0x058] SecurityProcedure: 0xfffff8047eff57b0 [Type: long (__cdecl*)(void *, _SECURITY_OPERATION_CODE, unsigned long *, void *, unsigned long *, void * *, _POOL_TYPE, _GENERIC_MAPPING *, char)]
       [+0x060] QueryNameProcedure: 0x0 [Type: long (__cdecl*)(void *, unsigned char, _OBJECT_NAME_INFORMATION *, unsigned long, unsigned long *, char)]
       [+0x068] OkayToCloseProcedure: 0x0 [Type: unsigned char (__cdecl*)(_EPROCESS *, void *, void *, char)]
       [+0x070] WaitObjectFlagMask: 0x0 [Type: unsigned long]
       [+0x074] WaitObjectFlagOffset: 0x0 [Type: unsigned short]
       [+0x076] WaitObjectPointerOffset: 0x0 [Type: unsigned short]
   ```

#### 对象类型初始化器属性

| 属性 | 目的 |
| --- | --- |
| 类型名称 | 对象类型的名称（如进程、事件、ALPC端口等）。 |
| 池类型 | 指示对象应从分页或非分页内存中分配。 |
| 默认配额费用 | 分页和非分页池的默认值，用于向进程配额收费。 |
| 有效访问掩码 | 线程在打开该类型对象的句柄时可以请求的访问类型（读、写、终止、挂起等）。 |
| 通用访问权限映射 | 四种通用访问权限（读、写、执行、全部）与特定访问权限之间的映射。 |
| 保留访问 | 无法通过任何第三方对象管理器回调删除的访问权限。 |
| 其他标志 | 表示对象是否必须没有名称、名称是否区分大小写、是否需要安全描述符、是否应进行缓存对齐等。 |

通过这些步骤，您可以详细了解进程对象及其相关结构。