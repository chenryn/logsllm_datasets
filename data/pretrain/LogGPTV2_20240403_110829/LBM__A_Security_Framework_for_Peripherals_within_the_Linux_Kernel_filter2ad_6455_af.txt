to replace the iptables ﬁrewall. InKeV [3] is a network
virtualization solution allowing inserting network functions
dynamically using eBPF. Hyperupcalls [6] allows VMs to
load eBPF programs and asks hypervisors to execute them.
One can treat these hyperupcalls as another form of BPF
helpers. On the security side, eBPF has been hardened against
JIT spray attacks [64] and Spectre attacks [47], [72], [19].
New ﬁle mode and LSM hooks are also added for eBPF
program permission control to remove the dependency on
“CAP_SYS_ADMIN” [29]. LBM expands the scope of eBPF
usage by exploring peripheral space.
Linux Kernel Security Frameworks: Linux Security Mod-
ules (LSM) [86] is a general framework to implement MAC
on Linux, by providing hundreds of hooks for security-
sensitive operations within the kernel. Integrity Measurement
Architecture (IMA) [65] leverages TPM to measure the kernel
image as well as user-space applications. Android Security
Modules (ASM) [40] promotes security extensibility to the
Android platform, by adding new authorization hooks within
Android OS APIs. Linux Provenance Modules (LPM) [14]
provides a whole-system provenance framework by mirroring
LSM hooks. Seccomp [27] uses the classic BPF ﬁlter to limit
the number of syscalls that can be invoked by a process or
container. Landlock [66] controls how a process could access
ﬁlesystem objects by writing polices in C within applications
and compiling them into eBPF programs using LLVM. Guar-
dat [82] presents a high-level policy language for mediating
I/O events, but is implemented at the storage layer, above the
peripheral layer, and would thus not provide defenses against
protocol-level attacks. While we have seen kernel frameworks
covering different aspects of security concerns, LBM is the
ﬁrst framework for unifying defenses across protocols against
malicious peripherals.
IX. CONCLUSION
In this paper we described LBM, an extensible security
framework for defending against malicious peripherals. LBM
implements a high-level ﬁltering language for creating periph-
eral policies, which compile into eBPF instructions for loading
into the Linux kernel to provide performance and extensibil-
ity. Within this framework we added support for the USB,
Bluetooth, and NFC protocols, described the design process
of LBM, and demonstrated speciﬁc cases of how LBM could
be leveraged to harden the operating system’s protocol stacks.
Our evaluation of LBM showed that it performs as well as or
better than previous solutions, while only introducing overhead
within 1 μs per packet in most cases. LBM is practical and to
the best of our knowledge, is the ﬁrst security framework de-
signed to provide comprehensive protection within the Linux
(cid:26)(cid:25)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
kernel peripheral subsystem, covering different subsystems
while supporting and unifying existing defensive solutions.
X. ACKNOWLEDGEMENTS
We would like to thank our reviewers and particularly our
shepherd, Taesoo Kim, for insights and suggestions. This work
was supported in part by the US National Science Founda-
tion under grant numbers CNS-1540217 and CNS-1815883.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do
not necessarily reﬂect
the views of the National Science
Foundation.
REFERENCES
[1] PyBluez: Bluetooth Python extension module.
https://github.com/
pybluez/pybluez, 2018.
This
[2] O. Afonin.
Restricted
this-9-device-can-defeat-ios-usb-restricted-mode/, July 2018.
Mode.
$39 Device Can Defeat
iOS USB
https://blog.elcomsoft.com/2018/07/
[3] Z. Ahmed, M. H. Alizai, and A. A. Syed. Inkev: In-Kernel Distributed
Network Virtualization for DCN. ACM SIGCOMM Computer Commu-
nication Review, 46(3), 2016.
[4] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: principles, techniques,
and tools. Addison Wesley, 7(8):9, 1986.
[5] American National Standards Institute (ANSI). ANSI X3.159-1989:
Programming Language C. Technical report, 1989.
[6] N. Amit and M. Wei. The Design and Implementation of Hyperupcalls.
In Proceedings of the USENIX Annual Technical Conference (USENIX
ATC), 2018.
[7] J. P. Anderson. Computer Security Technology Planning Study, ESD-
TR-73-51, Vol. 1. Technical report, Air Force Systems Command:
Electronic Systems Division, Oct. 1972.
[8] Android Developers. Bluetooth low energy overview. https://developer.
android.com/guide/topics/connectivity/bluetooth-le, Apr. 2018.
[9] S. Angel, R. S. Wahby, M. Howald, J. B. Leners, M. Spilo, Z. Sun, A. J.
Blumberg, and M. Walﬁsh. Defending against Malicious Peripherals
with Cinch. In Proceedings of the 25th USENIX Security Symposium,
2016.
[10] Apple, Hewlett-Packard, Intel, Microsoft, Renesas, STMicroelectronics,
and Texas Instruments. Universal Serial Bus 3.2 Speciﬁcation: Revision
1.0. Technical report, Sept. 2017.
[11] Armis Inc. BlueBorne. https://www.armis.com/blueborne/, 2017.
[12] Armis Inc. Bleeding Bit. https://armis.com/bleedingbit/, 2018.
[13] S. Baghdasaryan. [v3,2/4] NFC: Fix possible memory corruption when
https://patchwork.kernel.org/
handling SHDLC I-Frame commands.
patch/10378895/, May 2018.
[14] A. M. Bates, D. Tian, K. R. Butler, and T. Moyer. Trustworthy Whole-
System Provenance for the Linux Kernel. In Proceedings of the USENIX
Security Symposium, 2015.
[15] Bluetooth SIG, Inc. Bluetooth Core Speciﬁcation v5.0. Technical report,
Dec. 2016.
[24] K. Cook. Linux kernel aslr (kaslr). Linux Security Summit, 69, 2013.
[25] J. Corbet. Extending extended BPF. Linux Weekly News, 2014.
[26] E. Cree.
[RFC/PoC PATCH bpf-next 00/12] bounded loops
https://www.mail-archive.com/PI:EMAIL/
eBPF.
for
msg218182.html, Feb. 2018.
[27] W. Drewry. [RFC,PATCH 0/2] dynamic seccomp policies (using BPF
https://www.spinics.net/lists/linux-security-module/msg12441.
ﬁlters).
html, Jan. 2012. Kernel Patch.
[28] ETSI Technical Committee Smart Card Platform (SCP). ETSI TS 102
622 V10.2.0: Smart Cards; UICC-Contactless Front-end (CLF) Interface;
Host Controller Interface (HCI) (Release 10). Technical report, Mar.
2011.
[29] C. Feng. bpf: security: New ﬁle mode and LSM hooks for eBPF object
permission control. https://lwn.net/Articles/737402/, 2017.
[30] GoodFET.
Facedancer21.
http://goodfet.sourceforge.net/hardware/
facedancer21, 2018.
[31] Google, Inc.
syzkaller - kernel fuzzer: Found Linux kernel USB
bugs. https://github.com/google/syzkaller/blob/master/docs/linux/found_
bugs_usb.md, 2018.
[32] J. Greene. Intel R(cid:3) Trusted Execution Technology. Technical report, Intel
Corporation, 2012.
[33] B. Gregg. Linux Extended BPF (eBPF) Tracing Tools. http://www.
brendangregg.com/ebpf.html, 2016.
[34] T. E. Hart, P. E. McKenney, A. D. Brown, and J. Walpole. Performance
of memory reclamation for lockless synchronization. Journal of Parallel
and Distributed Computing, 67(12):1270–1285, Dec. 2007.
[35] Y. Hayakawa. eBPF Implementation for FreeBSD. https://www.bsdcan.
org/2018/schedule/track/Hacking/963.en.html, 2018.
[36] T. Herbert and A. Starovoitov. eXpress Data Path (XDP). https://github.
com/iovisor/bpf-docs/blob/master/Express_Data_Path.pdf, 2016.
[37] M. Herfurt. Bluetooth Security. What the Hack Conference, 2005.
[38] M. Herfurt and C. Mulliner. Blueprinting: Remote Device Identiﬁcation
based on Bluetooth Fingerprinting Techniques. In 21st Chaos Commu-
nication Congress (21C3), Dec. 2004.
[39] G. Hernandez, F. Fowze, D. J. Tian, T. Yavuz, and K. R. B. Butler. Fir-
mUSB: Vetting USB device ﬁrmware using domain informed symbolic
execution. In Proceedings of the 2017 ACM Conference on Computer
and Communications Security (CCS’17), 2017.
[40] S. Heuser, A. Nadkarni, W. Enck, and A.-R. Sadeghi. ASM: A
Programmable Interface for Extending Android Security. In Proceedings
of the USENIX Security Symposium, 2014.
[41] Intel Corporation. Intel R(cid:3) Virtualization Technology for Directed I/O:
Architecture Speciﬁcation. Technical report, June 2018.
[42] IO Visor Project. BCC - Tools for BPF-based Linux IO analysis,
networking, monitoring, and more. https://github.com/iovisor/bcc, 2015.
[43] P. C. Johnson, S. Bratus, and S. W. Smith. Protecting Against Malicious
Bits On the Wire: Automatically Generating a USB Protocol Parser for
a Production Kernel.
In Proceedings of the 33rd Annual Computer
Security Applications Conference (ACSAC), 2017.
[44] C. Kellner.
for
introducing-bolt-thunderbolt-3-security-levels-for-gnulinux/, 2017.
Introducing bolt: Thunderbolt 3 security levels
https://christian.kellner.me/2017/12/14/
GNU/Linux.
[45] J. Kicinski and N. Viljoen. eBPF Hardware Ofﬂoad to SmartNICs: cls
bpf and XDP. Proceedings of netdev, 1, 2016.
[46] A. Kobayashi. Displayport (tm) ver. 1.2 overview.
[47] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom.
Spectre Attacks: Exploiting Speculative Execution.
In Proceedings of
the 40th IEEE Symposium on Security and Privacy (S&P), 2019.
[48] M. Krasnyansky and M. Holtmann. BlueZ: Ofﬁcial Linux Bluetooth
protocol stack. http://www.bluez.org/, 2002.
[49] M. Krasnyansky and M. Holtmann.
l2ping.c.
pauloborges/bluez/blob/master/tools/l2ping.c, 2002.
https://github.com/
[50] E. Kustarz, S. Shepler, and A. Wilson. The New and Improved FileBench
File System Benchmarking Framework. In Proceedings of the USENIX
Conference and File and Storage Technologies (FAST), 2008. WiP.
[51] B. Lau, Y. Jang, C. Song, T. Wang, P. Chung, and P. Royal. Mactans: In-
jecting Malware into iOS Devices via Malicious Chargers. Proceedings
of the Black Hat USA Brieﬁngs, Las Vegas, NV, August 2013, 2013.
[52] A. Laurie, M. Holtmann, and M. Herfurt. Hacking Bluetooth enabled
mobile phones and beyond - Full Disclosure. BlackHat Europe, 2005.
[53] A. Laurie, M. Holtmann, and M. Herfurt. Bluetooth Hacking: The State
of the Art. BlackHat Europe, 2006.
[16] A. Borg, S. N, and P. Uttarwar. Can BLE be turned on while
Bluetooth Classic is off on an Android device? https://www.quora.com/
Can-BLE-be-turned-on-while-Bluetooth-Classic-is-off-on-an-Android-device,
2016.
[17] D. Borkmann.
[PATCH net-next 3/4] bpf: add support for persistent
maps/progs, Oct. 2015. LKML Archive.
[18] D. Borkmann. On getting tc classiﬁer fully programmable with cls bpf.
tc, (1/23), 2016.
[19] D. Borkmann.
[bpf] bpf: use array_index_nospec in ﬁnd_prog_type.
http://patchwork.ozlabs.org/patch/908385/, May 2018.
[20] K. R. B. Butler, S. E. McLaughlin, and P. D. McDaniel. Kells: a
protection framework for portable data.
In Proceedings of the 26th
Annual Computer Security Applications Conference (ACSAC’10), 2010.
[21] L. Carettoni, C. Merloni, and S. Zanero. Studying Bluetooth malware
propagation: The Bluebag project. IEEE Security & Privacy, 5(2), 2007.
In
Proceedings of the SIGPLAN Symposium on Compiler Construction,
1982.
[22] G. J. Chaitin. Register allocation & spilling via graph coloring.
[23] Compaq, Digital Equipment Corporation, IBM PC Company, Intel, Mi-
crosoft, NEC, and Northern Telecom. Universal Serial Bus Speciﬁcation:
Revision 1.0. Technical report, Jan. 1996.
(cid:26)(cid:25)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
[54] S. McCanne and V. Jacobson. The BSD Packet Filter: A New Archi-
tecture for User-level Packet Capture. In USENIX winter, volume 93,
1993.
[55] L. McVoy and C. Staelin.
lmbench: Portable tools for performance
analysis. In Proceedings of the USENIX Annual Technical Conference
(ATC), 1996.
[56] C. Miller. Exploring the nfc attack surface. Proceedings of Blackhat,
2012.
[57] NCCGROUP. Umap2. https://github.com/nccgroup/umap2, 2018.
[58] Near Field Communication Forum, Inc. NFC Digital Protocol: Digital
1.0. Technical report, Nov. 2010.
[59] Near Field Communication Forum, Inc. NFC Controller Interface (NCI)
Speciﬁcation: NCI 1.0. Technical report, Nov. 2012.
[60] Near
Field Communication
Forum,
Speciﬁcations.
Technical
speciﬁcations-and-application-documents/speciﬁcations/
protocol-technical-speciﬁcations/, 2018.
Inc.
Protocol
https://nfc-forum.org/our-work/
Core
[61] M. Newlin. MouseJack: Injecting Keystrokes into Wireless Mice.
Technical report, Bastille Threat Research Team, 2016.
[62] K. Nohl, S. Krißler, and J. Lell. BadUSB - On accessories that turn
[63] T. Remple and A. Burns. Battery Charging Speciﬁcation: Revision 1.2.
evil. BlackHat, 2014.
Technical report, Dec. 2010.
[64] E. Reshetova, F. Bonazzi, and N. Asokan. Randomization Can’t Stop
In Proceedings of the International Conference on
BPF JIT Spray.
Network and System Security (NSS), 2017.
[65] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and
Implementation of a TCG-based Integrity Measurement Architecture.
In Proceedings of the USENIX Security Symposium, 2004.
[66] M. Salaün. File access-control per container with landlock, 2018.
[67] J. Schulist, D. Borkmann, and A. Starovoitov. Linux Socket Fil-
tering aka Berkeley Packet Filter (BPF). https://www.kernel.org/doc/
Documentation/networking/ﬁlter.txt, 2018.
[68] B. Seri. Bluetooth: Properly check L2CAP conﬁg option output buffer
length. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
commit/?id=e860d2c904d1a9f38a24eb44c9f34b8f915a6ea3, Sept. 2017.
Kernel Patch.
[69] S. Smalley, C. Vance, and W. Salamon.
Implementing SELinux as a
Linux Security Module. Technical report, Dec. 2001. NAI Labs Report
01-043.
[70] A. Staravoitov.
[RFC,net-next,08/14] bpf: add eBPF veriﬁer. https:
//lore.kernel.org/patchwork/patch/477364/, June 2014. Kernel Patch.
[71] A. Starovoitov. BPF in LLVM and kernel. Linux Plumbers Conference,
2015.
[72] A. Starovoitov. [PATCH v2 bpf] bpf: prevent out-of-bounds speculation.
https://lwn.net/Articles/743288/, Jan. 2018.
[73] A. Starovoitov, D. Borkmann, and D. S. Miller. [Patch RFC 0/4] net:
add bpﬁlter. https://www.mail-archive.com/netﬁlter-devel@vger.kernel.
org/msg11127.html, Feb. 2018.
[74] P. Stewin and I. Bystrov. Understanding DMA Malware. In Proceedings
of the Conference on Detection of Intrusions and Malware & Vulnera-
bility Assessment (DIMVA), 2012.
[75] SyncStop. The Original USB Condom.
https://shop.syncstop.com/
products/usb-condom?variant=35430087052, 2018.
[76] D. J. Tian, A. Bates, and K. Butler. Defending Against Malicious USB
Firmware with GoodUSB. In Proceedings of the 31st Annual Computer
Security Applications Conference (ACSAC), 2015.
[77] D. J. Tian, A. Bates, K. R. B. Butler, and R. Rangaswami. ProvUSB:
Block-level provenance-based data protection for USB storage devices.
In Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security (CCS’16), 2016.
[78] D. J. Tian, G. Hernandez, J. I. Choi, V. Frost, C. Ruales, P. Traynor,
H. Vijayakumar, L. Harrison, A. Rahmati, M. Grace, and K. R. B.
Butler. ATtention spanned: Comprehensive vulnerability analysis of AT
commands within the Android ecosystem.
In 27th USENIX Security
Symposium (USENIX Security 18), 2018.
[79] D. J. Tian, N. Scaife, A. Bates, K. R. B. Butler, and P. Traynor.
In Proceedings of the
Making USB Great Again with USBFILTER.
25th USENIX Security Symposium, 2016.
[80] D. J. Tian, N. Scaife, D. Kumar, M. Bailey, A. Bates, and K. R. B.
Butler. SoK: “Plug & Pray” Today - Understanding USB Insecurity
in Versions 1 through C.
In Proceedings of the IEEE Symposium on
Security and Privacy (S&P), 2018.
[81] triﬁnite.group. triﬁnite. https://triﬁnite.org/, 2004.
[82] A. Vahldiek-Oberwagner, E. Elnikety, A. Mehta, D. Garg, P. Druschel,
R. Rodrigues, J. Gehrke, and A. Post. Guardat: Enforcing data policies at
the storage layer. In Proceedings of the Tenth ACM European Conference
on Computer Systems (EuroSys’15), 2015.
[83] R. Verdult and F. Kooman. Practical Attacks on NFC Enabled Cell
In Proceedings of the 3rd International Workshop on Near
Phones.
Field Communication (NFC), 2011.
[84] C. Welch. Apple’s USB Restricted Mode: how to use your iPhone’s
latest security feature. https://www.theverge.com/2018/7/10/17550316/
apple-iphone-usb-restricted-mode-how-to-use-security, July 2018.
[85] Windows
Dev
Center.
Windows
Filtering
Platform.
https://docs.microsoft.com/en-us/windows/desktop/fwp/
windows-ﬁltering-platform-start-page, 2018.
[86] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman.
Linux Security Modules: General Security Support for the Linux Kernel.
In Proceedings of the 11th USENIX Security Symposium, 2002.
(cid:26)(cid:25)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
APPENDIX
B. Compiler Example
A. Frontend Grammar
(cid:2)expr(cid:3) ::= (cid:2)logical-or(cid:3)
(cid:2)logical-or(cid:3) ::= (cid:2)logical-and(cid:3) (‘||’ (cid:2)logical-and(cid:3))*
(cid:2)logical-and(cid:3) ::= (cid:2)comparison(cid:3) (‘&&’ (cid:2)comparison(cid:3))*
(cid:2)comparison(cid:3) ::= (cid:2)atom(cid:3) ((cid:2)comparison-op(cid:3) (cid:2)atom(cid:3))*
(cid:2)comparison-op(cid:3) ::= ‘’ | ‘=’ | ‘==’ | ’!=’
(cid:2)access(cid:3) ::= ‘[’ (cid:2)number(cid:3) ‘:’ (cid:2)number(cid:3) ‘]’
(cid:2)attribute(cid:3) ::= ‘.’ (cid:2)IDENTIFIER(cid:3)
(cid:2)struct(cid:3) ::= (cid:2)IDENTIFIER(cid:3) (cid:2)attribute(cid:3)* (cid:2)access(cid:3)?
(cid:2)number(cid:3) ::= (cid:2)DEC_NUMBER(cid:3) | (cid:2)HEX_NUMBER(cid:3)
(cid:2)string(cid:3) ::= (cid:2)STRING(cid:3)