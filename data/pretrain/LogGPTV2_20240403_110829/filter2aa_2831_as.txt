IConnectionPointImpl
Server
ATL class to implement the con-
nectable object on the server. 
This class allows the client to 
register (Advise) and un-register 
(UnAdvise) its sink objects. A 
COM object may use this tem-
plate to implement multiple 
Connection Points.
ICallBack
ICpTest
CallbackServer
CPClient
Client Application
CCpTest Object
IConnectionPointContainer
ICallBack
Container
IConnectionPoint
CCallBack
Object
Modifying the Callback Server
215
Additonal Information and Updates: http://www.iftech.com/dcom
You’ll notice that the ATL classes are named like interfaces.
Normally we would expect anything starting with an “I” to be an
interface, which is just a definition. The ATL code for these inter-
faces will provide a full implementation of the interface.
Modifying the Callback Server
Rather than writing a separate project to demonstrate connection
points, we’re going to modify the example programs from the
previous chapter. Connection points and callbacks are so similar
that we can re-use most of this example, while adding only those
parts necessary for connection points.
We’re going to use the same server we used for the callback
example. Open the CallbackServer project and do the following:
1. Insert a new ATL object using the "Insert/New ATL Object"
menu 
2. Name the new object CpTest
3. Select Apartment Threading 
CCallBack
Client
The callback object imple-
mented by the client. This is a 
user-defined interface that the 
sever can call to notify it of 
important events.
ICallBack
Client
The callback interface.
CCpTest
Server
Our user-defined ATL object on 
the server. This object imple-
ments connection points.
ICpTest
Server
The interface of the CCpTest 
object. 
_ICpTestEvents 
Server
The connection points class cre-
ated by the ATL object wizard, 
but not used. We used ICallBack 
instead.
Table 13.1
Connection point classes and interfaces
Description here
216    Chapter 13 •
Connection Points 
4. Select Custom Interface 
5. Aggregation doesn’t matter
6. Check the "Support Connection Points" check box 
7. Press the OK button and add the object 
Selecting the "Support Connection Points" box added sev-
eral additional lines of code to the object definition. The server
class is defined in the file CpTest.h. -- look in this file for the def-
initions added by the wizard. Here’s the class definition:
class ATL_NO_VTABLE CCpTest : 
public CComObjectRootEx,
public CComCoClass,
public IConnectionPointContainerImpl,
public IConnectionPoinImpl,
public ICpTest
...
The ATL template class IConnectionPointContainerImpl was
included in the multiple inheritance of CCpTest. This class is a
container to manage a list of connection points. You can use
IConnectionPointContainerImpl to find a specific connection
point attached to the server. 
The wizard also added the container object to the COM map
of CCpTest. The other interface in this map is, of course, the
ICpTest interface. 
BEGIN_COM_MAP(CCpTest)
COM_INTERFACE_ENTRY(ICpTest)
COM_INTERFACE_ENTRY(IConnectionPointContainer)
END_COM_MAP()
The ATL Object wizard added a Connection Point Map to
the object. Initially, the map is empty. We will add entries to it
later. A server object can support numerous different connection
point types. This means a single server object can support con-
nection points to many different types of client sink objects.
These will be listed in the connection point map.
Modifying the Callback Server
217
Additonal Information and Updates: http://www.iftech.com/dcom
The wizard also added the actual connection point to the
class inheritance. Each connection point object is explicitly tied
to a sink interface on the client. In this case, we’re going to use
the ICallBack interface. This is exactly the same interface we
used for the callback example, has already been implemented by
the client. 
The wizard doesn’t add everything we need. We’re going to
add the individual connection points to the object. Much of this
code is just boilerplate. We will explain it briefly, but the only
way to understand it is to see how it all fits together.
The actual connection point class is an ATL template ICon-
nectionPointImpl. 
public IConnectionPointImpl,
The client sink interface we just added must also be put in
the object’s connection point map. This allows the container
(IConnectionPointContainer) object to use the callback. The map
needs the GUID of the interface on the client.
BEGIN_CONNECTION_POINT_MAP(CCpTest)
CONNECTION_POINT_ENTRY( IID_ICallBack )
END_CONNECTION_POINT_MAP()
The last thing we need to add is the test methods. This isn’t
part of the actual connection point set up, but we’ll need it for
the demonstration. We will add them as two standard COM
methods to CCpTest. We will add the MIDL definition, and the
definition to the header file.
Thefollowing lines go in the definition of ICpTest interface
(in the file CallbackServer.IDL). You can use either the "Add
Method" from the class view, or type it directly into the IDL:
HRESULT Now2([in] long lCode);
HRESULT Later2([in] long lSeconds);
Each method has one parameter - it will be called by the cli-
ent to exercise the connection points we are implementing. The
218    Chapter 13 •
Connection Points 
last step is to put the matching definition the C++ header
(CpTest.H).
public:
STDMETHOD(Later2)(/*[in]*/ long lSeconds);
STDMETHOD(Now2)(/*[in]*/ long lCode);
Here is the completed listing, with the required objects
inserted. The new code for connection points is in bold. 
///////////////////////////////////////////////
class ATL_NO_VTABLE CCpTest : 
public CComObjectRootEx,
public CComCoClass,
public IConnectionPointContainerImpl,
public IConnectionPointImpl,
public ICpTest
{
public:
CCpTest()
{
}
DECLARE_REGISTRY_RESOURCEID(IDR_CPTEST)
DECLARE_PROTECT_FINAL_CONSTRUCT()
BEGIN_COM_MAP(CCpTest)
COM_INTERFACE_ENTRY(ICpTest)
COM_INTERFACE_ENTRY(IConnectionPointContainer)
END_COM_MAP()
BEGIN_CONNECTION_POINT_MAP(CCpTest)
// Client callback (sink) object
CONNECTION_POINT_ENTRY( IID_ICallBack )
END_CONNECTION_POINT_MAP()
// ICpTest
public:
STDMETHOD(Later2)(/*[in]*/ long lSeconds);
STDMETHOD(Now2)(/*[in]*/ long lCode);
};
Modifying the Callback Server
219
Additonal Information and Updates: http://www.iftech.com/dcom
The implementation of Now2() will be covered a little later.
This method is going to be quite different from its equivalent in
the callback test. The Later2() method will be functionally identi-
cal to the callback example. It will only be necessary to change
the name of the interface from ISimpleCallback to ICpTest. After
the client has been explained, we will cover this code. 
Now we have the infrastructure for the connection points
on the server. Most of it was added by clicking the "Support Con-
nection Points" option in the ATL wizard. Note that the wizard
also added the following interface to the IDL code:
dispinterface _ICpTestEvents
{
properties:
methods:
};
We’re not going to use this interface in our example. This is
the suggested name for the callback interface that the connection
points will support. We are going to substitute our ICallBack
interface. The wizard also added the following code to the defi-
nition of the CpTest object in the IDL code:
[default, source] interface _ICpTestEvents;
Replace _ICpTestEvents with the ICallBack interface. The
code should now look like this:
[
uuid(A47ED662-5531-11D2-85DA-004095424D9A),
helpstring("CpTest Class")
]
coclass CpTest
{
[default] interface ICpTest;
[default, source] interface ICallBack;
};
220    Chapter 13 •
Connection Points 
The "[source]" attribute in the IDL code tells COM that the
CpTest coclass is the source of ICallBack events. In other words,
this object will be calling the client’s ICallBack interface. The
source keyword doesn’t seem to have any actual effect on the
behavior of the interface.
Adding Connection Points to the Client Program
The connection point client program is going to be very similar
to the callback client. You can either modify the existing Call-
backClient project, or create a new project named CpClient. I’ve
added a new project, and cloned much of the code from the call-
back example.
1. Create a new MFC project. 
2. Choose a Dialog Application 
Now, edit the dialog to look like this:
Figure 13–2
The sample application is an extremely simple dialog
Note: Build the server, and don’t forget to build the Proxy/Stub DLL. Use the BuildMe.bat file to automate
this task. We’ll add the Now2 and Later2 implementation later, but the MIDL code won’t change. The test
client requires these MIDL generated headers.
Adding Connection Points to the Client Program
221
Additonal Information and Updates: http://www.iftech.com/dcom
Add the following controls and events through the Class-
Wizard:
1. Name 
the 
two 
buttons 
IDC_BUTTON_NOW, 
and
IDC_BUTTON_LATER. 
2. Attach the methods OnButtonNow() and OnButtonLater(). 
This dialog is functionally identical to the callback example.
Add the Callback Object to the Client
Add the callback object to this project. This object is identical to
the callback object in the CallbackServer project. Cut and paste
the definition of CCallBack into the CPClient.cpp source file.
Also remember to include the "CallbackServer_i.c", and "h" file
from the server.
Note that there is absolutely no difference between the call-
back object used for callbacks, and for connection points. This
sink object will behave identically, and will be called by the
server (source) in an identical way. 
Modifying the CpClient Application
We’re now going to add initialization and shutdown code to the
main application class, CCpClientApp.
BOOL CCPClientApp::InitInstance()
{
AfxEnableControlContainer();
InitCOM();
// Standard initialization
...
Add the InitCOM function to the class header. Enter the fol-
lowing code. Note that this is now identical to the CallbackClient
application. We’re adding the InitCP method, instead of calling
Advise directly.
BOOL CCPClientApp::InitCOM()
{
222    Chapter 13 •
Connection Points 
HRESULT hr;
CoInitialize(0); // Initialize COM
// Initialize the main ATL object 
_Module.Init( ObjectMap, 0 );
// Create a server object
m_pCP = NULL;
hr = CoCreateInstance( CLSID_CpTest, 
0, CLSCTX_SERVER,IID_ICpTest, 
(void**)&m_pCP );
ASSERT( SUCCEEDED(hr) );
if (SUCCEEDED(hr))
{
// Create a callback object
CComObject* pCallBack = NULL;
CComObject::CreateInstance( 
&pCallBack );
pCallBack->AddRef();
InitCP( pCallBack );
// Done with our ref count. Server did an AddRef
pCallBack->Release();
}
return SUCCEEDED(hr);
}
Initializing connection points is going to take some extra
code, so we’ve isolated it in a separate method. I’ve covered the
rest of this code in the previous chapter.
Registering With the Server’s Connection Point 
Interface
We’re now going to interrogate the server COM object for infor-
mation about its connection points implementation. The InitCP
method was designed to do double duty. It is able to both regis-
ter and unregister with the server’s connection point interfaces.
Registering With the Server’s Connection Point Interface
223
Additonal Information and Updates: http://www.iftech.com/dcom
This method will be called both from InitCOM, and from ExitIn-
stance; ExitInstance will pass a NULL pCallBack pointer. InitCP is
a new method so you must add the definition to the CCpClien-
tApp class (in CpClient.h). 
HRESULT CCPClientApp::InitCP(IUnknown* pCallBack)
{
HRESULT hr;
IConnectionPointContainer *pConnPtCont;
IConnectionPoint * pConnPt;
// Get a pointer to the 
// connection point manager object 
hr = m_pCP->QueryInterface(
IID_IConnectionPointContainer,
(void**)&pConnPtCont);
ASSERT( SUCCEEDED(hr) ); // crash if failed
if (SUCCEEDED(hr))
{
// This method is the QueryInterface  
// equivalent for an outgoing 
// interfaces. See if the server supports 
// connection points to our callback interface
hr = pConnPtCont->FindConnectionPoint(
IID_ICallBack, &pConnPt);
ASSERT( SUCCEEDED(hr) ); // crash if failed
// Release the container object 
pConnPtCont->Release();
if (SUCCEEDED(hr))
{
// Register the Connection Point
if (pCallBack != NULL) 
{
// Establish connection between 
// server and callback object
hr = pConnPt->Advise(pCallBack, &m_lCookie);
}
else // Remove the Connection Point
224    Chapter 13 •
Connection Points 
{
// Remove connection 
hr = pConnPt->Unadvise(m_lCookie);
}
// Release connection point object
pConnPt->Release();
}
}
return hr;
}
We start the function by getting a pointer to the server’s
IConnectionPointContainer interface. This interface points to the
object that the server uses to keep track of its connection points.
Since we already have a pointer to the ICpTest interface, we can
use QueryInterface(). 
IConnectionPointContainer *pConnPtCont;
// Get a pointer to the connection 
// point manager object 
hr = m_pCP->QueryInterface(
IID_IConnectionPointContainer,
(void**)&pConnPtCont);
Now we can ask the connection point container for a spe-
cific type of connection point. In this case, we want one that
handles the ICallBack interface that our client implements. Call-
ing FindConnectionPoint() on the container will give us the call-
back interface. Once we have the connection point object, we’re
done with the container, so it is released. Since we wrote the
server object, we can be pretty sure it supports the ICallBack
callback interface.
hr = pConnPtCont->FindConnectionPoint(
IID_ICallBack, &pConnPt);
// Release the container object 
pConnPtCont->Release();
Registering With the Server’s Connection Point Interface
225
Additonal Information and Updates: http://www.iftech.com/dcom
If we call InitCP with an ICallBack interface pointer, we are
registering the sink object with the server. If a NULL pointer is
passed in, the sink object will be un-registered. Calling Advise()
on the server object registers the sink object. Advise is imple-
mented in the ATL class IConnectionPointImpl. It is very similar
to the Advise() method we wrote for our custom callback. On
the server, Advise makes a copy of the sink interface, and returns
a unique cookie to identify it. Once Advise has been called, we
can release the sink object we passed it.
if (pCallBack != NULL) 
{
// Establish connection between 
// server and callback object
hr = pConnPt->Advise(pCallBack, &m_lCookie);
}
The mirror image method for Advise() is Unadvise(). This
method will remove the sink object from the server’s list of con-
nection points. Unadvise() checks the cookie, and terminates the
connection. This code will be called when InitCP is called from
ExitInstance.
else // Remove the Connection Point
{
// Remove connection 
hr = pConnPt->Unadvise(m_lCookie);
}
Add the ExitInstance method to the CPClientApp applica-
tion. This method is called when the application shuts down:
int CCPClientApp::ExitInstance()
{
// If we have a server object, release it
if (m_pCP != NULL)
{
// Remove servers callback connection
InitCP(NULL);
// Release the server object
226    Chapter 13 •