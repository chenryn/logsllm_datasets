title:Modular SDN Compiler Design with Intermediate Representation
author:Hao Li and
Chengchen Hu and
Peng Zhang and
Lei Xie
Modular SDN Compiler Design with Intermediate
Representation
Hao Li, Chengchen Hu, Peng Zhang, Lei Xie
Xi’an Jiaotong University∗
INTRODUCTION
CCS Concepts
•Networks → Programming interfaces;
Keywords
Software-Deﬁned Networks; Intermediate representation;
1.
SDN decouples the control plane that programs network con-
trols with high-level languages, and the data plane that exer-
cises packet forwarding with low-level rules. After years of
development, SDN is gradually evolving into an era that var-
ious languages (Frenetic, Maple, Merlin, P4, etc) and rules
(OpenFlow, PoF, ACI, etc) coexist.SDN compiler translates
programs written by some languages into rules, however,
one SDN compiler only bridges one language and one rule
speciﬁcation. This brings the following two major problems.
First, a piece of SDN program written in one speciﬁc lan-
guage cannot interoperate cross multiple data planes. As
a result, programs that produce OpenFlow rules cannot be
used in POF-based network. Moreover, many optimization
techniques, which improve the performance, reduce the over-
head, and ensure the correctness, are also rule-speciﬁc. For
example, VeriFlow [3] can only verify OpenFlow rules.
Second, even for the data plane using a single rule speci-
ﬁcation, programs written with different languages may lead
to unsolvable conﬂicts. The reason is that we cannot resolve
the conﬂicts by simply merging the programs as they are in
different languages, or by analyzing rules as intents of ap-
plications are lost during the compilation. For instance, to
route the same ﬂow, a policy chaining program written with
Merlin and another trafﬁc engineering program written with
Pyretic may specify different forwarding paths. Arbitrarily
∗This paper is supported by the NSFC (No.61272459), Program for New
Century Excellent Talents in University(NCET-13-0450), the Fundamental
Research Funds for the Central Universities.
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22–26, 2016, Florianopolis, Brazil
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959061
587
Table 1: Syntax of the Semantics Rule (SR).
scope ::= match ﬁelds
sr ::= 
SR
Scope
forward | drop | rewrite | count
Constraint cons ::=
forward(port) | towards(sw) | forbid(sw)
dof ::=
DOF
overwriting the conﬂicting rules may break the original in-
tents, e.g., waypoint traversal, shortest-path routing, etc.
The root cause of the above problems is the incomplete
decoupling of languages and rules. To end this situation , we
introduce Semantics Rule (SR), a rendezvous point for lan-
guages and rules, which is inspired by the intermediate rep-
resentation (IR) for PC compilers. Using SR, SDN programs
will be ﬁrst compiled into SRs (front end), applied with com-
mon optimizations (middle end), and ﬁnally translated into
low-level rules (back end). As a result, programs written
with different languages can inter-operate on multiple net-
works that enforce different rules. In addition, optimization
applied at SRs can be targeted to all rule speciﬁcations.
2. SEMANTICS RULES AS THE IR
We deﬁne SR as a 3-tuple , which speciﬁes constraints on network
resources, and high-level intents that a set of functions can
operate on. Table 1 shows the simpliﬁed syntax of SR.
Scope speciﬁes the resource that an SR operates on, ana-
log to the match ﬁelds speciﬁed by an OpenFlow rule.
Constraint speciﬁes actions on the Scope, e.g., forward-
ing to a port, dropping, rewriting a ﬁeld, or counting. The
Constraint is associated with a pair of (guard, action), where
guard consists of performance predicates, like #hops≤5,
delay<10ms, etc. The Constraint is valid only if its guard
is satisﬁed, and the action will be triggered when the Con-
straint is selected. Such pair improves the expressiveness
by lifting the semantics level of SR, i.e., it can express the
context-sensitive constraints besides the forwarding targets.
DOF speciﬁes the alternative space for the Constraint: an
SR remains semantically the same if its Constraint is re-
placed by another point in the DOF. DOF allows SRs to re-
lay high-level intents speciﬁed by operators. For example,
forward(X) deﬁnes a singleton DOF, “forward to port
X”; towards(X) means “forward to any port that can ﬁ-
nally lead to switch X”; forbid(X) means “forward to
any switch except switch X”.
As seen above, SR uses DOF to be more expressive, so
that common intents (e.g., forward a packet towards a des-
Figure 1: Top-down compiling process with SR.
tination host) of programs/applications can be largely pre-
served. In addition, the DOF keeps simple and general in
semantics, so that SR is independent of existing languages.
Finally, SR uses a general form of Scope and Constraint
to achieve rule neutrality, meaning that SRs can be readily
translated into any rule forms, e.g., OpenFlow rules.
In practice, a front end compiles the program into a se-
quence of SRs. The execution process of SRs is to trigger
Constraint from the source to the destination for each Scope.
The sequential execution ensures the context-sensitive indi-
cators are correctly updated by the guards and actions. Fig-
ure 1 depicts the top-down compiling process of a simple
program. The SRs use towards to constrain the critical
nodes along the path, i.e.the destination and the waypoints,
and use forbid to avoid loops.
3. CASE STUDY
In the following, we show how to leverage SR for conﬂict
elimination in cross-language programs.
Due to the language diversity, SDN controllers commonly
detect conﬂicts at the rule level, e.g., checking whether two
rules have overlapped matching ﬁelds but conﬂicting actions.
When detected, the controller needs to modify one rule to
resolve the conﬂicts, which may break the intents of pro-
grams. As another approach, PGA [4] detects conﬂicts at the
language level, and thus can reconcile programs that con-
ﬂict with each other while preserving their intents. How-
ever, PGA only works for the same-language programs (i.e.,
policy graph). Here, we show how SR can eliminate con-
ﬂicts, while preserving intents of cross-language programs.
Consider a program indicates a different path for f in Fig-
ure 1: A → B → D, where B is a waypoint. The con-
ﬂicts can be detected in A, where two SRs have the same
Scope but different Constraints. The elimination process is
to ﬁnd the DOF’s intersection of the conﬂicting SRs, i.e.,
towards(B) ∩ towards(C). If the intersection is not
empty, then any point in the intersection would be a solu-
tion to the new Constraint of both SRs. Note that forwarding
to B in A is in the DOF of towards(C), because B can
later forward the ﬂow to C. Therefore, the ﬁnal solution can
be A → B → C → D. The back end then translates the
reconciled SRs into non-conﬂicting rules.
4. EVALUATION
Program interoperability. We prototype a SR front end
by modifying the RYU controller to generate SRs instead of
OpenFlow rules, and a simple back end to translate SRs to
PoF rules. We run three RYU programs on our front end for
all-pair reachability, monitoring and ﬂow counting, respec-
tively. The generated PoF rules work correctly in the net-
work managed by RYU, thereby proving the interoperability
of RYU programs and PoF rules.
0
33
0
192
0
488
0
969
Table 2: Conﬂicts elimination results.
#broken
paths
#origin.
conﬂicts
#reconciled
122
122
972
972
1589
1589
1854
1854
paths
93
55
421
229
807
331
1552
587
#origin.
paths
100
100
500
500
1000
1000
2000
2000
time
cost(s)
CE
0.194
CV
0.101
CE
0.949
CV
0.701
CE
1.484
CV
1.113
CE
1.988
CV
1.309
Conﬂict elimination. We use a program to randomly con-
nects hosts with random waypoints and #hops constraints
in the Stanford backbone [5], which generates 100∼2000
paths with 122∼1854 conﬂicts respectively. We involve a
rule-level composition approach CoVisor [1] (CV) into the
evaluation, and use Hassel [2] to check the consistency of the
reachability, waypoints and #hops constraints after the elim-
ination. CE and CV are implemented in Python. Table 2
shows the elimination results, where the broken path is the
path that breaks the original intents. Notice that some con-
ﬂicts are not resolvable (i.e., empty intersection of DOFs),
and the #broken paths excludes such conﬂicts. From the re-
sult, the rule-level CV only composes conﬂicting rules by
priorities, which is likely to violate the intents, while CE
does not break any path that can co-work with others. Also,
it takes less than 2s to perform CE with ∼2K conﬂicts. CV
is slightly faster than CE because it only prioritizes the rules
locally, but not trace the routing path to preserve the intents.
5. CONCLUSION AND FUTURE WORK
This paper has presented Semantics Rule (SR) as the Inter-
mediate Representation (IR) for SDN compilers. We have
explored an interesting case using SR that how it can help
resolving conﬂicts for programs written with different lan-
guages, which is infeasible by only analyzing rules.
Our further work includes developing SR’s representa-
tion, especially the annotations of DOF, to better cover the
general case in network behaviors, and implementing more
optimization techniques with SR. Furthermore, the north-
bound of the SDN controllers can be uniﬁed to a well-designed
IR, instead of a “perfect” SDN language. This leads to a
purer SDN control model, that the controller can ofﬂoad the
logic programming to the language interface, i.e., compiler
front end, and focus on collecting and managing the concrete
information from the operators and switches. Design and
implement such modular controller is also our future work.
6. REFERENCES
[1] X. Jin, J. Gossels, J. Rexford, and D. Walker. Covisor: A
compositional hypervisor for software-deﬁned networks. In USENIX
NSDI, 2015.
[2] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis:
Static checking for networks. In USENIX NSDI, 2012.
[3] A. Khurshid, W. Zhou, M. Caesar, and P. Godfrey. Veriﬂow: verifying
network-wide invariants in real time. In USENIX NSDI, 2013.
[4] C. Prakash, J. Lee, Y. Turner, J.-M. Kang, A. Akella, S. Banerjee,
C. Clark, Y. Ma, P. Sharma, and Y. Zhang. PGA: Using graphs to
express and automatically reconcile network policies. In ACM
SIGCOMM, 2015.
[5] H. Zeng, P. Kazemian, G. Varghese, and N. McKeown. Automatic test
packet generation. In ACM CoNEXT, 2012.
588
Program IntentConnect A and D on f in 3 hops, while traversing CADC12312321B1233Semantics RulesA  f, FORWARD 3 {h<3; h=h+1}, towards C forbid AC  f, FORWARD 2 {h<3; h=h+1}, towards D forbid CD  f, FORWARD 2 {h<3; h=h+1}, forward 2RulesA  f, FORWARD 3; C  f, FORWARD 2;  D f, FORWARD 2