booting process, when MCU hardware and OS are initialized.
As no DMA operation is involved during booting, these basic
blocks are reachable even without DMA support, which allows
P2IM to achieve a fairly high basic block coverage. Second,
ﬁrmware code is highly reused on MCUs due to constrained
device storage. For example, the USART peripheral on the
Modbus ﬁrmware is used by the console to print messages
and by the Modbus protocol to reply to Modbus masters. The
USART driver functions are invoked by the console, which
operates without using DMA, and the Modbus protocol, which
operates through DMA. Supporting DMA does not signiﬁ-
cantly increase basic block coverage for these driver functions
as most of them are also used by non-DMA operations
(i.e., console printing). However, without DMA emulation or
support, code paths that depend on DMA input (i.e., Modbus
protocol stack) can never be reached or tested, despite that
these paths may share many basic blocks with other paths
unrelated to DMA operations or input.
As evidenced by the result, many ﬁrmware contain a great
number of DMA-related paths (hence the drastic increase in
path coverage under DICE). Such paths cannot be explored
by analyzers without using DICE.
Also signiﬁcantly, DICE improves the Max Depth by up to
500% (on Stepper Motor). This improvement indicates that,
with DICE (or generic DMA emulation), dynamic analyzers
can now dig much deeper into ﬁrmware code, unveiling states
and bugs residing at far ends of executions. This result also
indicates that, with the ability to directly feed input to DMA
buffers, even off-the-shelf fuzzers like AFL (without DMA
awareness) can be used for fuzzing ﬁrmware relying on DMA
input channels.
In terms of fuzzing speed, DICE is slower on 3 out of 7
ﬁrmware than P2IM, with 18% as the worst-case slowdown
(observed on Stepper Motor). The slower fuzzing speed is not
only caused by the overhead of DMA support (discussed in
§VII-A), but also the fact that more basic blocks and paths
are executed on each fuzzer run thanks to the added DMA
support.
As 2 rare cases, fuzzing Soldering Station and Oscilloscope
ﬁrmware with DMA support turned out to be faster, 5.6%
and 92.1% respectively, with slightly lower code coverage.
We found that in these cases DMA input channels through
ADC allows rapid consumption of input data, which caused
the ﬁrmware execution to ﬁnish much earlier than without
DMA support.
Detected New Bugs and Case Study: DICE found 5 unique,
previously unknown bugs that P2IM alone (i.e. without DMA
emulation) cannot detect (Table IX). We manually examined
these bugs (3 in Modbus and 2 in MIDI Synthesizer) and
conﬁrmed that it is the DMA support that makes DICE out-
performs existing dynamic analysis frameworks, such as P2IM.
More speciﬁcally, Modbus and the MIDI Synthesizer ﬁrmware
receive commands from the USART peripheral through DMA.
Without DMA support, no command can be received by
the ﬁrmware. As a result, the command parsing logic and
application logic, where all 5 bugs were found, can never be
executed.
We veriﬁed that all the bugs are real and reproducible on
real devices with the same fuzzer-generated input. All the
bugs detailed in Table IX are remotely exploitable. They are
triggered by the commands that the ﬁrmware receives through
the USART peripheral via a DMA input channel.
The bugs found in the MIDI Synthesizer ﬁrmware (ID 4
and 5) are caused by freeing memory not on the heap. The
ﬁrmware stores the MIDI messages received through DMA
input channels in the buffers that are either statically allocated
(as global variables) or dynamically allocated on the heap.
When the buffers are allocated on the heap, the ﬁrmware
invokes free() function to deallocate them after the MIDI
messages is processed. In these bugs, the ﬁrmware uses global
buffers, but still invokes the free() function which is supposed
to free only buffers allocated on heap. This causes that memory
not on the heap is freed, which may lead to ﬁrmware crash and
denial-of-service. These bugs cannot be found by P2IM alone
because the free() function is only invoked when the MIDI
messages received from DMA input channels are processed.
For the Modbus ﬁrmware, DICE identiﬁed 2 buffer over-
write and 1 buffer overread bugs. The root cause is improper
validations of array indexes. Speciﬁcally, the ﬁrmware uses un-
trusted input for calculating array indexes, but fails to validate
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1950
Framework
BBL Cov. [%]
Total Paths
Max Depth
Speed [run/s]
Modbus
P2IM DICE ∆%
52.6 58.7 11.6
1276 7875
16
2
8
300
41.6 41.0 -1.4
Guitar Pedal
Soldering St.
P2IM DICE ∆%
16.9 17.0 0.6
3267 3773 15.5
4
3.8
5
3.8
25
0
P2IM DICE ∆%
31
172
3
17.9 18.9 5.6
0
-3.5
0
31
166
3
Stepper Motor
P2IM DICE ∆%
22.3 25.6 14.8
4595 5276 14.8
2
500
22.2 18.2 -18.0
12
GPS Receiver
P2IM DICE ∆%
11.5 15.0 30.4
1988 6527
30
20
5
6
49.4 48.9 -1.0
MIDI Synth.
P2IM DICE ∆%
40.8 N/A
0.0
588 N/A
0
0
3
N/A
59.9 N/A
0
Oscilloscope
P2IM DICE ∆%
27.3 27.3 0.0
-4.5
618
5
-20
0.76 1.46 92.1
590
4
TABLE VIII: Statistics of fuzz-testing real ﬁrmware using DICE on P2IM. P2IM was unable to fuzz test MIDI Synthesizer ﬁrmware which solely consumes
input through DMA input channels.
Firmware Bug ID
Modbus
1, 2
3
Bug type
Buffer overwrite
Buffer overread
Free of memory
not on the Heap
Security consequences
Corrupt data structure with
attacker controlled values.
Information leakage.
Firmware crash,
denial-of-service.
MIDI
Synthesizer 4, 5
TABLE IX: New bugs found by DICE in Modbus and MIDI Synthesizer
ﬁrmware. None of them can be found by P2IM alone.
the computed indexes or ensure the indexes are referencing
valid positions within the arrays. Modbus receives commands
from a shared ﬁeldbus in a typical PLC device setup. There-
fore, any malicious/compromised device connected to the
ﬁeldbus can exploit these bugs by sending crafted commands.
These bugs allow an attacker to corrupt data structures or
retrieve secrets stored in the ﬁrmware memory, e.g. critical
parameters of the PLC control routine.
Listing 1 shows the code snippet of Bug #1. startAddr is
calculated from modbusRxTxBuffer[], which is the DMA
buffer that holds untrusted input (Line 265). The ﬁrmware
checks if startAddr is within the valid range of array
modbusMemory[] (Line 266), and then uses it as an index
for array access (Line 270). The input validation at Line
266 is wrong (the correct check should be startAddr >=
MODBUS_SLAVE_REGISTERS_NUM), which causes buffer
overwrite at Line 270.
265 uint16_t startAddr = modbusRxTxBuffer[2]  MODBUS_SLAVE_REGISTERS_NUM) //
improper input validation
answerLen = modbusSlaveErrorSet(0x02);
267
268 else
269 {
270
modbusMemory[startAddr] = modbusRxTxBuffer[4] << 8
| modbusRxTxBuffer[5]; // buffer overwrite
answerLen = modbusRxCount;
271
272 }
Listing 1: Code snippet of Bug #1
We also investigated the potential reasons for our experi-
ment not ﬁnding bugs in the other ﬁve ﬁrmware. In general,
fuzz-testing ﬁrmware with DICE on P2IM faces the open
challenges as with other existing tools, such as the lack of error
detectors/sanitizers for MCU, limited ability to solve complex
state machines and path constraints, etc., which are out of the
scope for this paper. We also identiﬁed the following reasons
speciﬁc to DMA.
First, some ﬁrmware using DMA can quickly drain fuzzer
input, without going deep into the code. Such ﬁrmware tends
to allocate large DMA buffers for high-throughput data trans-
fers. For example, Stepper Motor uses 2 buffers of 4 KB
for receiving and transmitting data. However, AFL prefers
to generate short input sequences to achieve better fuzzing
performance.
Second, some DMA input channels do not directly inﬂuence
ﬁrmware control ﬂow, but DICE still treats them as “risky”
channels and lets the fuzzer generate and mutate inputs
for them. For example, Soldering Station, Guitar Pedal and
Oscilloscope continuously sample analog input using DMA
and performs mathematical calculations on the sampled inputs.
These DMA inputs can rarely change ﬁrmware execution paths
or trigger bugs. However, due to the design requirement of
being peripheral-agnostic, DICE cannot detect or exclude such
fuzzing-unworthy DMA input channels, and thus, ends up
spending too much time on them, instead of focusing on other
fuzzing-worthy DMA input channels.
VIII. DISCUSSION
A. Location of transfer descriptor
DICE identiﬁes the DMA input channels based on the
transfer descriptors are always written to
assumption that
DMA controller through MMIO operations. However, in some
rare cases, transfer descriptors are stored in RAM, which are
not supported by DICE. We admit it a limitation of DICE.
To measure how prevalent the transfer descriptors are stored
in RAM, we surveyed the complete STM32 MCU portfolio
of ST Microelectronics, a top-ﬁve MCU vendor according to
[19] and the most popular MCU vendor in terms of the number
of Github repositories (19,870 unique entries by Nov. 2019).
The product lines we analyzed include ultra-low-power, main-
stream, and high-performance families. Our analysis showed
that all MCUs (983 in total) store transfer descriptors in the
peripheral memory area, while the STM32H7 product line
(59 MCUs) also allows storing transfer descriptors in RAM.
To conclude, only 6% of STM32 MCUs can optionally store
transfer descriptors in RAM, and therefore, it is acceptable for
DICE not to handle this rare case.
B. DMA Buffer Size Identiﬁcation
Unlike source and destination, buffer size cannot be reliably
identiﬁed from a DMA stream conﬁguration event. To solve
this, DICE adopts a conservative heuristic for buffer size
identiﬁcation. The heuristic, which gradually expands the
perceived DMA buffers at memory read that falls right after
the buffer boundary, may produce a smaller-than-actual size
upon memory reads that are not consecutive in space. This
inaccuracy, although possible in theory, is not observed in our
evaluation. Moreover, when the ﬁrmware executes for long
enough, DICE may progressively identify the correct buffer
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
1951
size. Therefore, it is reasonable to use such a conservative
heuristic which trades identiﬁcation accuracy for the ﬁrmware
stability (when a wrongly identiﬁed DMA buffer byte is read,
the ﬁrmware can crash).
C. Architecture beyond ARM and MIPS
DICE can be applied to other architectures that meet three
requirements: (R1) the architecture uses designated memory
regions for peripherals (MMIO), Flash and RAM; (R2) DMA
streams conﬁgurations are written to the peripheral region via
MMIO; (R3) DMA transfers follow the life cycle depicted in
Figure 4.
We analyzed RISC-V, the increasingly popular architec-
ture used in MCUs. We conﬁrmed that RISC-V meets
these requirements, and therefore, is compatible with DICE.
Speciﬁcally, we studied the data-sheets of
the RISC-V
GD32VF103 MCU [35]. The MCU uses separate mem-
ory regions for peripherals, RAM and Flash (0x40000000-
0x5003FFFF, 0x20000000-0x20017FFF, and 0x08000000-
0x0801FFFF respectively), thus meeting R1. It also writes
DMA streams conﬁgurations via MMIO to peripherals and
meet R2. The MCU obeys the DMA life cycle illustrated in
Figure 4 and meet R3. This result demonstrates that DICE is
generically applicable to at least three different architectures,
namely ARM, MIPS, and RISC-V.
D. Devices beyond MCUs
DICE is designed to support DMA in ﬁrmware analysis for
MCU devices. It solves multiple challenges, especially, the
hardware and software diversity of MCUs. Other platforms
such as desktop and mobile devices use similar DMA transfer
descriptors and follow the same DMA life cycle as MCUs.
However,
those more powerful platforms frequently store
transfer descriptors in RAM, rather than in DMA controller
registers (MMIO), for ﬂexibility reasons (e.g.,
to support
complex concatenated DMA transfers). As we discussed in
§V, RAM-stored transfer descriptors are not supported by
DICE. Therefore, DICE cannot be directly used for emulating
DMA on platforms other than MCUs.
Existing work such as PeriScope [39] can handle DMA
on Linux-based platforms during dynamic analysis. PeriScope
instruments Linux kernel DMA APIs to monitor the creation
and destroy of DMA input channels and to manipulate DMA
input. PeriScope is OS-speciﬁc. Unlike DICE, PeriScope is
not applicable to MCUs, which have highly diverse OS and
ﬁrmware, and therefore, pose unique challenges for DMA