### References

1. J. Devietti, C. Blundell, M. M. K. Martin, and S. Zdancewic. Hardbound: Architectural support for spatial safety of the C programming language. In *ASPLOS*, 2008.
2. A. Francillon and C. Castelluccia. Code injection attacks on Harvard-architecture devices. In *ACM CCS*, 2008.
3. A. Francillon, D. Perito, and C. Castelluccia. Defending embedded systems against control flow attacks. In *1st ACM Workshop on Secure Execution of Untrusted Code*, 2009.
4. D. Gay, P. Levis, R. von Behren, M. Welsh, E. Brewer, and D. Culler. The nesc language: A holistic approach to networked embedded systems. In *ACM SIGPLAN PLDI*, 2003.
5. T. Giannetsos and T. Dimitriou. Spy-sense: Spyware tool for executing stealthy exploits against sensor networks. In *ACM HotWSN Workshop*, 2013.
6. T. Giannetsos, T. Dimitriou, I. Krontiris, and N. R. Prasad. Arbitrary code injection through self-propagating worms in von Neumann architecture devices. *Comput. J.*, 53(10):1576–1593, Dec. 2010.
7. T. Goodspeed. Stack overflow exploits for wireless sensor networks over 802.15.4, 2008.
8. T. Jim, J. G. Morrisett, D. Grossman, M. W. Hicks, J. Cheney, and Y. Wang. Cyclone: A safe dialect of C. In *USENIX Annual Technical Conference*, 2002.
9. C. Lattner and V. Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In *CGO*, 2004.
10. P. Levis. Experiences from a decade of TinyOS development. In *USENIX OSDI*, 2012.
11. P. Levis, N. Lee, M. Welsh, and D. Culler. TOSSIM: Accurate and scalable simulation of entire TinyOS applications. In *SenSys*. ACM, 2003.
12. P. Levis, S. Madden, J. Polastre, R. Szewczyk, K. Whitehouse, A. Woo, D. Gay, J. Hill, M. Welsh, E. Brewer, and D. Culler. TinyOS: An operating system for sensor networks. In *Ambient Intelligence*, 2005.
13. Memsic. Micaz datasheet. <http://www.memsic.com/userfiles/files/Datasheets/WSN/micaz_datasheet-t.pdf>.
14. Memsic. TelosB datasheet. <http://www.memsic.com/userfiles/files/Datasheets/WSN/telosb_datasheet.pdf>.
15. S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. Softbound: Highly compatible and complete spatial memory safety for C. In *ACM Sigplan Notices*, pages 245–258. ACM, 2009.
16. S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. CETS: Compiler enforced temporal safety for C. *SIGPLAN Notices*, 45(8):31–40, June 2010.
17. G. C. Necula, S. McPeak, and W. Weimer. CCured: Type-safe retrofitting of legacy code. *ACM SIGPLAN Notices*, 37(1), 2002.
18. H. Patil and C. Fischer. Low-cost, concurrent checking of pointer and array accesses in C programs. *Softw. Pract. Exper.*, 27(1):87–110, Jan. 1997.
19. J. Polastre, J. Hill, and D. Culler. Versatile low power media access for wireless sensor networks. In *ACM SenSys*, pages 95–107, 2004.
20. R. Sasnauskas, O. Landsiedel, M. H. Alizai, C. Weise, S. Kowalewski, and K. Wehrle. Kleenet: Discovering insidious interaction bugs in wireless sensor networks before deployment. In *ACM/IEEE IPSN*, 2010.
21. V. Shnayder, M. Hempstead, B.-r. Chen, G. W. Allen, and M. Welsh. Simulating the power consumption of large-scale sensor network applications. In *ACM SenSys*, 2004.
22. Softbound website. <http://www.cis.upenn.edu/acg/softbound/>.
23. B. Sun, D. Shrestha, G. Yan, and Y. Xiao. Self-propagate mal-packets in wireless sensor networks: Dynamics and defense implications. In *IEEE GLOBECOM*, 2008.
24. V. Sundaram, P. Eugster, and X. Zhang. Prius: Generic hybrid trace compression for wireless sensor networks. In *ACM SenSys*, 2012.
25. L. Szekeres, M. Payer, T. Wei, and D. Song. SoK: Eternal war in memory. In *2013 IEEE Symposium on Security and Privacy*, 2013.
26. W. Xu, D. C. DuVarney, and R. Sekar. An efficient and backwards-compatible transformation to ensure memory safety of C programs. In *ACM FSE*, 2004.
27. Y. Yang, S. Zhu, and G. Cao. Improving sensor network immunity under worm attacks: A software diversity approach. In *ACM MobiHoc*, 2008.
28. R. Züger. Paging in TinyOS, 2006.

### Appendix A: Proof of Safety

In this section, we provide a formal proof of memory safety for nesCheck. We start by presenting the intuition behind the type inference rules, then follow the general structure of the proof for SoftBound [22], focusing on the features relevant to nesCheck. To manage the complexity of the nesC language, we focus the proof on an abstract subset that captures the essential primitives. We aim to keep the formalism, operational semantics, and proof concise while ensuring soundness.

#### A.1 Grammar and Operational Semantics

The syntax we use models programs in their processed IR form, reduced to atomic data types (int and pointers) and simple operations. Table 2 shows the grammar considered for our proof. We use LHS and RHS to denote left-hand side and right-hand side, respectively. While most WSN applications do not use dynamic memory allocation, we include it in our formal grammar for generality.

In our simplified operational semantics, we consider an environment \( E \) that models the stack with a map \( S \) from variable names to addresses and types, models the type inference with a map \( \Gamma \) from variable names to pointer categories, and models the heap with a partial map \( M \) from addresses to values.

| **Category** | **Syntax** |
|--------------|------------|
| **Atomic Types** | `t ::= int | p*` |
| **Pointer Types** | `p ::= t | s | void` |
| **Struct Types** | `s ::= struct{f; f}` |
| **Struct Fields** | `f ::= (id:t)` |
| **LHS Expr.** | `lhs ::= x | *lhs | lhs.id | lhs->id` |
| **RHS Expr.** | `rhs ::= val | rhs+rhs | &lhs | (a)rhs | sizeof(p) | malloc(rhs) | lhs` |
| **Commands** | `c ::= c ; c | lhs = rhs` |

Using `some` and `none` to denote the presence or absence of a value, we model nesC’s memory access primitives as follows:
- `read M l`: If \( l \) is an allocated memory location, return `some`, otherwise return `none`.
- `write M l v`: If \( l \) is an allocated memory location, set the content to the value \( v \).
- `malloc M s`: If \( M \) has an available region of size \( s \), allocate and return it, otherwise fail.

The normal C operational semantics processes assignments by writing the result of the RHS expression to the address calculated from the LHS operand. For this proof, we extend the traditional operational semantics of C by including new outcomes for operations (including memory errors) and tracking pointer metadata. A result \( r \) can be:
- \( v(sl, sh) \): A value \( v \) with attached metadata for the size of the memory region towards the lower (\( sl \)) and higher (\( sh \)) memory addresses.
- A memory address \( l \).
- `Success`.
- `MemoryError` if a bounds check failed.
- `MemoryExhaustion` if \( M \) did not have enough free memory upon a `malloc` operation.

Using the above definitions, we formalize nesCheck’s operational semantics with four classes of rules:
1. **Type Inference and Propagation**: Rules for inferring and propagating types.
2. **LHS Evaluation**: The rule \((E, \text{lhs}) \Rightarrow_l r : a\) specifies how LHS expressions are evaluated (no changes to the environment).
3. **RHS Evaluation**: The rule \((E, \text{rhs}) \Rightarrow_r (E', r : a)\) specifies how RHS expressions are evaluated (potential changes to the environment; if successful, \( r \) is \( v(sl, sh) \)).
4. **Command Execution**: The rule \((E, c) \Rightarrow_c (E', r : a)\) executes commands (where \( r \) must be a success or failure result).

We omit rules straightforwardly representing standard C semantics and show only the rules most relevant for nesCheck’s semantics.

#### A.2 Type Inference

We present some of the rules for type inference, which formalize the rules presented in Section 4.1.1. For example, pointer arithmetic on a `Safe` or `Sequence` pointer results in a `Sequence` kind, while casting a `Safe` or `Sequence` pointer to an incompatible type (defined in Section 4.1.1) results in a `Dynamic` pointer:

\[
\begin{aligned}
&\frac{\Gamma(x) = \tau \quad \tau \in \{ \text{Safe}, \text{Seq}, \text{Dyn} \}}{\Gamma \vdash x : \tau} \quad \text{(T)} \\
&\frac{\Gamma \vdash e_1 : \tau \quad \tau \in \{ \text{Safe}, \text{Seq} \} \quad \Gamma \vdash e_2 : \text{int}}{\Gamma \vdash e_1 + e_2 : \text{Seq}} \quad \text{(ArithT1)} \\
&\frac{\Gamma \vdash e_1 : \tau \quad \tau = \text{Dyn} \quad \Gamma \vdash e_2 : \text{int}}{\Gamma \vdash e_1 + e_2 : \text{Dyn}} \quad \text{(ArithT2)} \\
&\frac{(E, x) \Rightarrow_l l : t \quad \text{incompatible}(t, t')}{\Gamma \vdash (t')x : \text{Dyn}} \quad \text{(IllegCast)}
\end{aligned}
\]

No memory access to `Safe` pointers is subject to dynamic bounds checks; conversely, all memory accesses to `Dynamic` pointers are instrumented with runtime checks. For a memory access to a `Sequence` pointer, if nesCheck can statically determine that it will never result in an out-of-bounds operation, it will not be instrumented with a dynamic check. We define a predicate `safe(*p)` that is true (⊤) if the memory access `*p` does not require bounds checks, false (⊥) otherwise:

\[
\text{safe}(*p) = 
\begin{cases} 
\top & \text{if } \Gamma \vdash p : \text{Safe} \lor (\Gamma \vdash p : \text{Seq} \land *p \text{ not out of bounds}) \\
\bot & \text{otherwise}
\end{cases}
\]

nesCheck declares a memory access as never out of bounds only if the in-memory metadata propagated up to that access statically indicates the safety of the operation. The result of the predicate `safe(*p)` for memory accesses on that pointer removes the need to carry the pointer type over to the dynamic bounds checks rules. The formal proof of CCured [17] shows it is safe to leave memory accesses uninstrumented, and the same proof applies in our case to statically-provable `Sequence` pointer accesses.

#### A.3 Dynamic Bounds Checks

The bounds checking operational rules are similar to those of SoftBound, so we omit most of them for brevity. We present the rules for the evaluation of a pointer dereference operation, both in the case of success and in the case of a memory error (failed bounds check):

\[
\begin{aligned}
&\frac{(E, \text{lhs}) \Rightarrow_l p : t^* \quad \text{read}(E.M) p = \text{some } v(sl, sh) \quad \text{safe}(p) \lor (sl \geq 0 \land sh \geq \text{sizeof}(t))}{(E, * \text{lhs}) \Rightarrow_l v : t} \quad \text{(DerefSuccess)} \\
&\frac{(E, \text{lhs}) \Rightarrow_l p : t^* \quad \text{read}(E.M) p = \text{some } v(sl, sh) \quad (sl < 0 \lor sh < \text{sizeof}(t))}{(E, * \text{lhs}) \Rightarrow_l \text{MemoryError} : t} \quad \text{(DerefFail)}
\end{aligned}
\]

Other rules, such as those for type casts and pointer arithmetic, ensure that metadata information is propagated correctly:

\[
\begin{aligned}
&\frac{(E, \text{ptr}) \Rightarrow_r (E', l(sl, sh) : p^*) \quad (E', \text{val}) \Rightarrow_r (E'', \text{off}(sl', sh') : \text{int}) \quad l' = l + \text{off} \times \text{sizeof}(p) \quad sl' = sl + \text{off} \times \text{sizeof}(p) \quad sh' = sh - \text{off} \times \text{sizeof}(p)}{(E, \text{ptr} + \text{val}) \Rightarrow_r (E'', l'(sl', sh') : p^*)} \quad \text{(PtrArithm)} \\
&\frac{(E, \text{rhs}) \Rightarrow_r (E', v(sl, sh) : t) \quad t' \neq \text{int}}{(E, (t')\text{rhs}) \Rightarrow_r (E', v(sl, sh) : t')} \quad \text{(TypeCast)} \\
&\frac{(E, \text{rhs}) \Rightarrow_r (E', v(sl, sh) : t) \quad t = \text{int} \quad (sl', sh') = (0, 0)}{(E, (t')\text{rhs}) \Rightarrow_r (E', v(sl', sh') : t')} \quad \text{(TypeCastIntToPtr)}
\end{aligned}
\]

With this support infrastructure of rules in place, we note that the operational rules for values that are valid at runtime and need runtime bounds checks are fully equivalent to their corresponding rules in SoftBound’s formal model [15]. Therefore, they satisfy the same safety invariants and ensure memory safety for those values, as proven for SoftBound (in Theorems 4.1 and 4.2, and Corollary 4.1 in [15]). Reducing our formal definitions and methodology to the respective ones in the SoftBound paper allows for a proof by reduction, relying on the full formalization of SoftBound.

While adding bounds checks to every memory access is sound, as shown by the proof in SoftBound, combining it with the proof in CCured [17] improves performance overhead by removing unnecessary checks while remaining sound. Thus, given the operational semantics rules above, every memory access in nesCheck is either safe at runtime—resulting in a correct access—or causes the application to stop due to a detected memory error. Therefore, the nesC applications analyzed and instrumented by nesCheck fulfill the set memory safety goals.

### Appendix B: Source Code

The source code for our implementation of nesCheck will be made available at <https://github.com/HexHive/nesCheck>.