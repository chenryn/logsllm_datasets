AdvG1(A) = AdvG2(A).
Proof of Lemma 8. We use the fact that the following are identically distributed:
{Wi}i∈[n] and {Wi − xi(a⊥)⊤}i∈[n],
p
i a⊥ = 1.
where for all i ∈ [n]: Wi ←R Zm×(k+1)
i ∈ [n], c⊤
The leftmost distribution corresponds to game G1, whereas the rightmost distribution cor-
responds to game G2. We crucially rely on the fact that these games are selective, thus,
the matrices Wi are picked after the adversary A sends its challenge {xi}i∈I, and therefore,
independently of it.
such that A⊤a⊥ = 0 and for all
, and a⊥ ←R Zk+1
p
Namely:
(Wi − xi(a⊥)⊤)A = WiA
xi + (Wi − xi(a⊥)⊤)ci = Wici
(Wi − xi(a⊥)⊤)⊤y = W⊤
i y − hxi, yi · a⊥
which coincides precisely with the output of the simulator. This proves Adv2(A) = Adv1(A).
Theorem 4: Multi-instance, many-AD-IND security
If the Dk(p)-MDDH assumption holds in G, then the single-input FE in Figure 5.7 is
many-AD-IND secure for n instances.
Games: G0,β , G1,β , G⋆
1,β , for β ∈ {0, 1}:
)
IP
(x0, x1) ← A(1λ, F m,X,Y
G := (G, p, P ) ←R GGen(1λ), A ←R Dk(p), gpk := (G, [A]), a⊥ ←R Zk+1
W ←R Zm×(k+1)
α ← A
Return α.
OKeygen(·), OEnc(·) (cid:0)ek, ct(cid:1)
, ek := [WA], ct := OEnc(x0, x1) .
p
p
\ {0} s. t. A⊤a⊥ = 0 ,
OEnc(x0, x1):
r ←R Zk
OKeygen(y):
p, c := Ar, c ←R Zk+1
Return(cid:18)W⊤y
y (cid:19)
p
c′(cid:21).
s.t. c⊤a⊥ = 1 , c′ := xβ + Wc, return(cid:20)−c
Figure 2.5: Games for the proof of Theorem 4.
In each procedure, the components inside a solid
(dotted, gray) frame are only present in the games marked by a solid (dotted, gray) frame. The
encryption oracle OEnc can only be called once by adversary A.
2.6 Concrete Instances of Functional Encryption for Inner Products
43
Proof of Theorem 4. First,because FE described in Figure 5.7 is a public key encryption
scheme, it suﬃces to prove one-AD-IND security: many-AD-IND follows by a standard hybrid
argument over all challenge ciphertexts (cf Lemma 6). Second, it suﬃces to prove security for
a single instance, since it implies its many-instance variant, as shown in Lemma 5. We now
prove one-AD-IND security for a single instance.
Let A be a PPT adversary, and λ ∈ N be the security parameter. We proceed with a series
of hybrid games, described below. For any game G, we denote by AdvG(A) the advantage of
A in game G, that is, the probability that the game G outputs 1 when interacting with A.
Games G0,β, for β ∈ {0, 1}: are such that Advone-AD-IND
Deﬁnition 21).
(λ) = |AdvG0,0(A)− AdvG0,1(A)| (see
FE,A,1
Games G1,β, for β ∈ {0, 1}: are as games G0,β, except we replace the vector [Ar] computed
by OEnc(x0, x1) with [c] ←R Gk+1, such that c⊤a⊥ = 1, where a⊥ ←R Zk+1
\ {0} such that
A⊤a⊥ = 0, using the Dk(p)-MDDH assumption. Namely, we prove in Lemma 9 that there
exists a PPT adversary Bβ such that
p
|AdvG0,β (A) − AdvG1,β (A)| ≤ AdvDk(p)-mddh
G,Bβ
(λ) +
1
p
.
At this point, we show that AdvG1,0(A) = AdvG1,1(A) in three steps. First, we consider the
selective variant of game G1,β, called G⋆
1,β, where the adversary must commit to its challenge
{xb}b∈{0,1} beforehand. By a guessing argument, we show in Lemma 10 that there exists PPT
adversary A⋆ such that
AdvG1,β (A) = (X + 1)2m · AdvG⋆
1,β
(A⋆).
Then we prove in Lemma 11 that the game G⋆
argument, which is only true in the selective setting. Namely, for any adversary A′:
1,0 is identical to game G⋆
1,1 using a statistical
Putting everything together, we obtain:
AdvG⋆
1,0
(A′) = AdvG⋆
1,1
(A′).
Advone-AD-IND
FE,A,1
(λ) ≤ 2 · AdvDk(p)-mddh
G,B
(λ) +
2
p
.
Lemma 9: Game G0,β to G1,β
There exists a PPT adversary Bβ such that
|AdvG0,β (A) − AdvG1,β (A)| ≤ AdvDk(p)-mddh
G,Bβ
(λ) +
1
p
.
Proof of Lemma 9. This is proof is similar to the proof of Lemma 7, for the one-SEL-SIM
security of FE. We replace the vectors [Ar] computed by OEnc(x0, x1) with [c] ←R Gk+1 such
that c⊤a⊥ = 1. This replacement is justiﬁed by the facts that:
• By the Dk(p)-MDDH assumption, we can switch ([A], [Ar]) to ([A], [u]), where A ←R
Dk(p), r ←R Zk
p, and u ←R Zk+1
.
p
44
Chapter 2. Preliminaries
• The uniform distribution over Zk+1
of rank k. Thus, we can chose u ← Zk+1
and Zk+1
p
p
p
p-close, for any A ∈ Z(k+1)×k
\Span(A) are 1
\ Span(A) instead of uniformly random over
p
Zk+1
.
p
Combining these facts, we obtain a PPT adversary Bβ such that |AdvG0,β(A) − AdvG1,β(A)| ≤
AdvDk(p)-mddh
G,Bβ
(λ) + 1
p.
Lemma 10: Game G1,β to G⋆
1,β
There exists a PPT adversary A⋆ such:
AdvG1,β (A) = (X + 1)−2m · AdvG⋆
1,β
(A⋆).
Proof of Lemma 10. First, A⋆ guesses the challenge by picking random: {x⋆
b}b∈{0,1} ←R [0, X]2m,
and sends its to the game G⋆
1,β, which is a selective variant of game G1,β. These games are
described in Figure 2.5. Whenever A queries OKeygen, A⋆ forwards the query to its own oracle,
and gives back the answer to A. When A calls OEnc(x0, x1), A⋆ veriﬁes its guess was correct,
1). If the guess is incorrect, A⋆ ends the simulation, and sends α := 0
that is (x0, x1) = (x⋆
to the game G⋆
1,β. Otherwise, it keeps answering A’s queries to OKeygen as explained, and
forwards A’s output α to the game G⋆
When A⋆ guesses correctly, it simulates A’s view perfectly. When it fails to guess, it outputs
α := 0. Thus, the probability that A⋆ outputs 1 in G⋆
1,β is exactly (X + 1)−2m · AdvG1,β (A).
0, x⋆
1,β.
Lemma 11: Game G⋆
1,0 to G⋆
1,1
For all adversaries A′, we have:
AdvG⋆
1,0
(A′) = AdvG⋆
1,1
(A′).
Proof of Lemma 11. We use the fact that the following distributions are identical:
W and W + (x1 − x0)(a⊥)⊤,
such that A⊤a⊥ = 0.
, and a⊥ ←R Zk+1
p
where W ←R Zm×(k+1)
responds to G⋆
p
1,1, since we have:
The leftmost distribution corresponds to game G⋆
1,0, while the rightmost distribution cor-
(W + (x1 − x0)(a⊥)⊤)A = WA
x0 + (W + (x1 − x0)(a⊥)⊤)c = x1 + Wc
(W + (x1 − x0)(a⊥)⊤)⊤y = W⊤y + (hx1, yi − hx0, yi)a⊥
= W⊤y
The ﬁrst equality uses the fact that A⊤a⊥ = 0, the second equality uses the fact that c⊤a⊥ = 1,
and the third equality uses the fact that hx0, yi = hx1, yi for any y queried to OKeygen.
the adversary A sends its selective challenge {xb}b∈{0,1}, and therefore, independently of it.
Note that we are relying on the fact that in these games, W ←R Zm×(k+1)
is picked after
p
Inner-Product FE from LWE
Here we present the many-AD-IND secure Inner-Product FE from [ALS16, Section 4.1].
2.6 Concrete Instances of Functional Encryption for Inner Products
45
IP
):
GSetup(1λ, F m,X,Y
Let integers M, q ≥ 2, real α ∈ (0, 1), and distribution D over Zm×M . Set K := m · X · Y ,
A ←R ZM ×λ
Return gpk
, gpk := (K, A).
q
Setup(1λ, gpk, F m,X,Y
Z ←R D, U := ZA ∈ Zm×λ
Return (ek, msk)
):
IP
q
, ek := U, msk := Z.
q
q
Z,αq
Enc(gpk, ek, x ∈ Zm):
q , e0 ←R DM
Z,αq, e1 ←R Dm
s ←R Zλ
c0 := As + e0 ∈ ZM
K(cid:5) ∈ Zm
c1 := Us + e1 + x ·(cid:4) q
Return ctx := (c0, c1)
KeyGen(gpk, msk, y ∈ Zm):
Return dky :=(cid:18)Z⊤y
y (cid:19) ∈ ZM +m
Dec(cid:0)gpk, dky, ctx):
c1(cid:19)⊤
µ′ :=(cid:18)c0
Return µ ∈ {−K + 1, . . . , K − 1} that minimizes(cid:12)(cid:12)⌊ q
dky mod q.
K⌋µ − µ′(cid:12)(cid:12).
IP
Figure 2.6: Functional encryption scheme for the class F m,X,Y
, based on the LWE assumption.
Choice of parameters. Following the analysis given in [ALS16], we choose:
• σ1 := Θ(cid:18)qλ log(M) max(√M , K)(cid:19)
• σ2 := Θ(cid:16)λ7/2M 1/2 max(M, K2) log5/2(M)(cid:17)
• D := Dm×M/2
i’th canonical vector.
Z,σ1
× DZM/2,σ2,u1 × ··· × DZM/2,σ2,um, where for all i ∈ [m], ui denotes the
• Let BD be such that with probability at least 1 − λω(1), each row of a sample from
D has norm at most BD. For correctness, we must have: α−1 ≥ K2BDω(√log λ),
q ≥ α−1ω(plog(λ)).
• M ≥ 4λ log q, m ≤ λO(1), q > mK2
Theorem 5: many-AD-IND security [ALS16]
The FE from Figure 5.8 is correct and many-AD-IND secure under the mheLWEq,α,M,m,D
assumption (see Deﬁnition 18).
Inner-Product FE from DCR
Here we present the many-AD-IND secure Inner-Product FE from [ALS16, Section 5.1].
Theorem 6: many-AD-IND security [ALS16]
The FE from Figure 5.9 is correct and many-AD-IND secure under the DCR assumption
46
(see Deﬁnition 16).
Chapter 2. Preliminaries
IP
):
GSetup(1λ, F m,X,Y
Choose primes p = 2p′ + 1, q = q′ + 1 with prime p′, q′ > 2l(λ) for an l(λ) = poly(λ) such
that factoring is λ-hard, and set N := pq ensuring that m · X · Y  √λ · N 5/2, and for all j ∈ [m], hj := gsj mod N 2.
ek := {hj}j∈[m], msk := {sj}j∈[m]
Return (ek, msk)
N 2
Enc(gpk, ek, x ∈ Zm):
r ←R {0, . . . ,⌊N/4⌋}, C0 := gr ∈ ZN 2, for all j ∈ [m], Cj := (1 + xjN) · hr
Return ctx := (C0, . . . , Cm) ∈ Zm+1
KeyGen(gpk, msk, y ∈ Zm):
d :=Pj∈[m] yjsj ∈ Z.
Return sky := (d, y)
Dec(cid:0)gpk, sky := (d, y), ctx):
C :=(cid:16)Qj∈[m] C yj
j (cid:17) · C −d
0 mod N 2.
Return log(1+N )(C) := C−1 mod N 2
.
N
j ∈ ZN 2
Figure 2.7: Functional encryption scheme for the class F m,X,Y
IP
, based on the DCR assumption.
Chapter 3
Tightly CCA-Secure Encryption
without Pairings