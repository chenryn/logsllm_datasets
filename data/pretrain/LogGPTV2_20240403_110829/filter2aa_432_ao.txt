LOCK_SH | LOCK_NB
非阻塞性共享锁
LOCK_EX | LOCK_NB
非阻塞性互斥锁
LOCK_UN
解锁
当 flock()采用非阻塞锁定操作时，对已锁定文件的锁定将使该调用失败返回，其出错
码为 EWOULDBLOCK。
下面，我们将使用 BSD 的文件机制，构造 4.5.1 节中缺省的上锁和解锁函数。其中上
锁函数采取的是互斥锁。
#include 
my_flock(int fd)
{
if (flock(fd,LOCK_EX))==-1)
{
perror(“can LOCK_EX”);
exit(1);
}
}
my_unload(fd)
{
if (flock(fd,LOCK_UN)==-1)
{
perror(“can’t LOCK_UN”);
exit(1);
}
}
有了这个上锁函数和 my_lock()和解锁函数 my_unlock()之后，让我们再回过头来看看
前面的 a.out&命令的运行结果：
pid=5894,seq#=1
pid=5894,seq#=2
pid=5894,seq#=3
pid=5894,seq#=4
pid=5894,seq#=5
pid=5895,seq#=6
pid=5895,seq#=7
pid=5895,seq#=8
pid=5895,seq#=9
pid=5895,seq#=10
该结果完全体现了对共享序号文件“ seqno”的理想共享操作。
第四章  进程间通信
- 81 -
4.5.5  前面两种锁定方式的比较
由于 Linux 支持上面的两种锁定方式，所以可以根据不同的实际情况选用不同的锁定
方式。以上的两种锁定方式有以下的不同：
1．System V的锁定方式是记录锁定，可以指定锁定的范围。而 BSD 的锁定方式是文
件锁定，只能指定锁定文件。
2．System V 的锁定是每个进程所独有的，可以用于父子进程间的共享锁定。而 BSD
的锁定方式是可以继承的，父子进程间使用的是同一锁定的，所以不能用于父子进程间的
文件共享锁定。
4.5.6  Linux 的其它上锁技术
创建和使用一个辅助文件以表示进程对共享文件的锁操作是 Linux 其它上锁技术的基
本点。如果辅助文件存在，资源便被其它进程锁定了，否则，进程就可以创建辅助文件以
对资源上锁。
创建辅助文件的一个比较直观的想法是先测试一下辅助文件是否已经存在，若不存在
便创建之：
if((fd=open(file,0))
int link(char* existingpath, char* newpath);
两个参数分别是原文件所在的路径和新建链接的路径。
我们的技巧是创建一独特临时文件，它的名字由进程号得来。一旦创建了该文件，我
们便用辅助锁文件名形成到该临时文件的另一个链接。如果链接成功，进程便把文件锁定
了。这时有两个路径指向锁定文件（基于进程号的临时文件和锁文件）。然后我们用 unlink()
系统调用，把临时文件删除，只剩下一个指向该文件的链接。当需要解除锁定时，我们就
用 unlink()删除解除对该文件的链接。
#include 
#define LOCKFILE "seqno.lock"
extern int errno;
- 82 -
Linux网络编程
my_lock(int fd)
{
int temfd;
char tempfile[30];
sprintf(tempfile,"LCK%d",getpid());
/* 建立一个临时文件，然后关闭之 */
if ((temfd=creat(tempfile,0444))
#define LOCKFILE "seqno.lock"
#define TEMPLOCK "temp.lock"
my_lock(int fd)
{
int tempfd;
/* 试图创建一个全部写权限都被关闭的 */
/* 临时文件。如果该文件已经存在，则 */
/*
creat()调用失败
*/
while ((tempfd=creat(TEMPLOCK,0))
#include 
#define LOCKFILE "sqgno.lock"
#define PERMS 0666
extern int errno;
- 84 -
Linux网络编程
my_lock(int fd)
{
int tempfd;
while((tempfd=open(LOCKFILE,O_RDWR|O_CREAT|O_EXCL,PERMS))<0)
{
if (errno!=EXIST)
{
perror("open error");
exit(1);
}
sleep(1);
}
close(tempfd);
}
my_unlock(fd)
{
if(unlink(LOCKFILE)<0)
{
perror("unlink error");
exit(1);
}
}
对于以上三个技术要注意如下几点：
1．这些技术比实际的文件锁定系统调用要花更长的时间。这是因为要用到多个系统调
用以及多个文件系统操作。
2．除了包含共享资源的文件外，还要用到一个辅助锁文件。在第一个例子中，我们既
需要序号文件又需要辅助锁文件。
3．系统崩溃后辅助文件会存在，需要设计相应的方法处理之。
4．系统调用 link 不能为不同逻辑文件系统上的文件建立链接，因此临时文件一般不放
在/tmp 文件系统中。
5．如果进程以超级用户特权竞争资源的话，第二种方法就无效。
6．当辅助锁为另一进程占有时，需要锁的进程便不知何时能再检测一下，在我们的例
子中是等待 1 秒钟。理想的情况是锁释放时应通知需要锁的进程。
7．占有锁的进程可以不解锁便终止。
4.6  System V IPC
AT&T 在 UNIX System V 中引入了几种新的进程通讯方式，即消息队列（Message
Queues），信号量（semaphores）和共享内存（shared memory），统称为 System V IPC。在
Linux 系统编程中，它们有着广泛的应用。
System V IPC 的一个显著的特点，是它的具体实例在内核中是以对象的形式出现的，
第四章  进程间通信
- 85 -
我们称之为 IPC 对象。每个 IPC 对象在系统内核中都有一个唯一的标识符。通过标识符内
核可以正确的引用指定的 IPC 对象.。需要注意的是，标识符的唯一性只在每一类的 IPC 对
象内成立。比如说，一个消息队列和一个信号量的标识符可能是相同的，但绝对不会出现
两个有相同标识符的消息队列。
标识符只在内核中使用，IPC 对象在程序中是通过关键字（key）来访问的。和 IPC 对
象标识符一样，关键字也必须是唯一的。而且，要访问同一个 IPC 对象，Server 和 Client
必须使用同一个关键字。因此，如何构造新的关键字使之不和已有的关键字冲突，并保证
Server 和 Client 使用的关键字是相同的，是建立 IPC 对象时首先要解决的一个问题。
通常，我们使用系统函数 ftok()来生成关键字。
库函数：
ftok();
函数声明：
key_t ftok ( char *pathname, char proj );
返回值：
new IPC key value if successful
-1 if unsuccessful
errno set to return of stat() call
ftok()函数通过混合 pathname 所指文件的 inode 和 minor device 值以及 proj 的值来产生
关键字。这样并不能完全保证关键字的唯一性，不过程序可以检测关键字的冲突并通过更
换 pathname 和 proj 的组合来产生新的关键字。下面是一段使用 ftok 的代码：
        key_t   mykey;
        mykey = ftok("/tmp/myapp", 'a');
在这段代码中，ftok 函数混合文件/tmp/myapp 和字符 a 来产生关键字 mykey。下面是
更常用的一段代码：
        key_t   mykey;
        mykey = ftok(".", 'a');
只要我们保证 server 和 client 从同一个目录运行，我们就可以保证它们使用上面的代
码产生的关键字是相同的。
获得了关键字以后，就可以通过它来建立或引用具体 IPC 对象了。
在我们进入到具体的 IPC 对象前，先看看几个和 System V IPC 有关的命令行指令：
4.6.1  ipcs 命令
ipcs 命令在终端显示系统内核的 IPC 对象状况。
ipcs –q 只显示消息队列
ipcs –m 只显示共享内存
ipcs –s 只显示信号量
下面是在某个 Linux 系统上使用 ipcs 命令的显示情况：
[roy@bbs ~]$ ipcs
------ Shared Memory Segments --------
key       shmid     owner     perms     bytes     nattch    status
0x00000a0a 644       roy       600       1024      2