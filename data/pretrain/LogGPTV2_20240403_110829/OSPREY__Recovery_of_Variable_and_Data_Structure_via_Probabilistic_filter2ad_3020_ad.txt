stantAllocSize(i, s) [R08] denotes that i has only requested one
size s. AllocUnit(i, s) [R09] determines if i allocated memory
of different sizes and the differences are all multiples of s.
s.a and v(cid:48)
s.a to v(cid:48)
The next three rules describe the three kinds of hints (Sec-
tion II). DataFlowHint(as, ad, s) [R10] suggests the presence
of structure if there are copies from two addresses separated
by an offset (e.g., two ﬁelds from a structure) to two other
respective addresses separated by the same offset. Formally,
it renders true if given two addresses as and ad, there are
two other addresses (denoted by v(cid:48)
d.a) that have the
same offset from as and ad, respectively, such that there are
memory copies from as to ad and v(cid:48)
d.a. Here as and ad
denote two instances of the same structure. UniﬁedAccessPn-
tHint(as, ad, s) [R11] suggests the presence of structure if two
addresses (i.e., denoting the same ﬁeld from two instances of
the same structure) are accessed by a same instruction i1 and
their offsets are also accessed by another same instruction i2.
Formally, it renders true given two addresses as and ad, there
are two other addresses (denoted by v(cid:48)
s.a and v(cid:48)
d.a) that have
the same offset from as and ad, respectively, such that as
and ad are accessed by an instruction i1 and v(cid:48)
s.a and v(cid:48)
d.a
accessed by another instruction i2. PointsToHint(as, ad, s)
[R12] determines as and ad may denote two instances of the
same structure if as and ad are two base addresses for two
other addresses that have the same s offset from the base,
and both as and ad are stored to the same pointer variable.
Appendix C presents an example for deterministic inference.
V. PROBABILISTIC REASONING
As discussed in Section II, variable and structure recovery
is a process with inherent uncertainty such that the collected
hints may have contradictions due to: (1) the behavior patterns
deﬁning hints may happen by chance, instead of reﬂecting
the internal structure; (2) BDA’s per-path interpretation may
not respect path feasibility such that infeasible behaviors may
be included in the deterministic reasoning step. For example,
violations of path feasibility may lead to out-of-bound buffer
accesses and then bogus data-ﬂow hints. We resort to proba-
bilistic inference to resolve such contradictions. Intuitively, the
effects of incorrect hints will be suppressed by the correct ones
which are dominant. In particular, for each memory chunk
v, we introduce a number of random variables to describe
the type and structural properties of v. The random variables
of multiple memory chunks are hence connected through the
relations derived from the previous deterministic reasoning
step and represented as a set of probabilistic inference rules.
Each rule can be considered a probability function. They
are transformed to a probabilistic graph model [34] and an
inference algorithm is used to compute the posterior marginal
probabilities. The most probable results are reported. Different
from many existing probabilistic inference applications, where
the set of inference rules are static, we have dynamic inference
rules, meaning that rules will be updated, removed, and added
on the ﬂy based on the inference results. We hence develop
an iterative and optimized inference algorithm (Section V-B).
A. Probabilistic Inference Rules
Predicates and Random Variables. Figure 6 presents the
set of predicates we introduce. They denote the typing
and structural properties. Random variables are introduced
to denote their instantiations on individual instructions and
memory chunks, each describing the likelihood of the pred-
icate being true. For
instance, The random variable for
Scalar((cid:104)(cid:104)G, 0x8043abf 0(cid:105) , 8(cid:105)) denotes the likelihood that the
8-byte global memory chunk starting at 0x8043abf 0 is a
scalar variable. In the remainder of the paper, we will use
the two terms predicate and random variable interchangeably.
Speciﬁcally, PrimitiveVar(v)[P01] asserts that memory chunk
v denotes a primitive variable, which is a variable without
further inner structure. It could be a scalar variable, a structure
ﬁeld, or a primitive array element. Similarly, PrimitiveAc-
cess(i, v)[P02] asserts that instruction i exclusively accesses
a primitive variable v. The meanings of UnfoldableHeap and
FoldableHeap will be explained in the later discussion of heap
structure recovery. HomoSegment(a1, a2, s) [P05] asserts that
the memory region a1 ∼ (a1 + s) and a2 ∼ (a2 + s) are ho-
momorphic, hence likely two instances of the same structure.
They are likely homomorphic when their access patterns and
data-ﬂow are similar. ArrayStart(a) [P06] represents a is the
starting address of an array.
While the above predicates are auxiliary, the remaining ones
(underlined in Figure 6) denote our ﬁnal outcomes. Variables,
structures and types can be directly derived from the inferred
values of these predicates. In particular, Scalar(v)[P07] in-
dicates v is a scalar variable (not an array or a structure).
Array(a1, a2, s)[P08] represents that the memory region from
a1 to a2 form an array of size s. FieldOf (v, a) [P09] asserts
that v is a ﬁeld of a structure starting at a. Pointer(v, a) [P10]
asserts v is a pointer to a structure starting at a. The last few
predicates assert the primitive types of variables. Note that
they allow us to express the most commonly seen structural
properties, including nesting structures, array of structures,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
819
P01
P02
P03
P04
P05
P06
P07
P08
P09
P10
P11
PrimitiveVar(v)
PrimitiveAccess(i, v)
UnfoldableHeap(i, s)
FoldableHeap(i, s)
HomoSegment(a1, a2, s)
ArrayStart(a)
Scalar(v)
Array(a1, a2, s)
FieldOf (v, a)
Pointer(v, a)
IntVar(v) / LongVar(v) / ...
v is of primitive type, e.g., char, int, and void *
Instruction i accessed a primitive variable v
The size of the unfoldable part of heap structure allocated at i is s
The unit size of the foldable part of heap structure allocated at i is s
The two s-byte segments starting at a1 and a2, respectively, are homomorphic
Address a is the starting address of an array
Variable v is a scalar
:
:
:
:
:
:
:
: Memory from a1 to a2 belongs to an array whose element size is s-byte
:
:
:
Variable v is a ﬁeld of a structure with starting address a
Variable v is a pointer pointing to a structure denoted by a
Variable v is of the int / long /... type
Fig. 6: Predicate deﬁnitions.
(a) Source code.
(b) Memory layout of code in Figure 7a.
Fig. 7: Example to demonstrate our heap model.
and structure with array ﬁeld(s). We have other predicates for
unions. They are elided for discussion simplicity.
Example. Consider an example in Figure 7, with the source
code in Figure 7a. Three types of structures are allocated on
the heap. Line 5 allocates a singleton structure (*p1); line
6 allocates an array of the same structure (*p2); and line 7
allocates a structure (*p3) with an array. Note that the size of
*p3 is not ﬁxed. These structures can be easily represented
by our predicates. Particularly, the structure of *p1 is rep-
resented as FieldOf (&(p1->x), p1), FieldOf (&(p1->y),
p1), Long(&(p1->x)), and Long(&(p1->y)) (note that
the syntax of
illustra-
tion); *p2 is represented as Array(p2, p2+16*n, 16),
FieldOf (&(p2->x), p2) and so on (similar
to *p1);
represented as FieldOf (&(p3->x), p3), Ar-
*p3 is
ray(&(p3->z), &(p3->z)+16*m, 16), Long(&(p3->x)),
and Long(&(p3->z)). (cid:3)
these predicates is simpliﬁed for
Figure 8 presents the probabilistic inference rules. These
rules read as follows: the ﬁrst column is the rule id for easy
reference; the second column is the condition that needs to
be satisﬁed in order to introduce the inference rule in the
third column. Each inference rule is a ﬁrst-order logic formula
annotated with prior probability. Each predicate instantiation is
associated with a random variable whose posterior probability
will be computed by inference. For example, rule CA01 means
that v has p(k) probability of being a primitive variable if an
instruction i has accessed it k times (over all the sample runs).
Note that the probability is a function of k. The up-arrow
denotes that if Access(i,v,k) is likely, then PrimitiveVar(v) is
likely. A down-arrow denotes the opposite.
Primitive Variable and Scalar Variable Recovery. Rules
CA01-CA05 are to identify primitive variables. Rule CA02
means that a variable is likely primitive if its adjacent one
is likely primitive; CA03 means that if two variables have
overlapping address, one likely being primitive renders the
other one unlikely (note the down-arrow); CA04 and CA05 state
that if a variable v is primitive, the instruction that accesses
it is a primitive access such that another variable v(cid:48) accessed
by it is primitive too. Rules CA06-CA08 are for scalar variable
recovery. A primitive variable may not be a scalar variable as
it could be a ﬁeld or an array element. CA06 says v is scalar
if it is primitive and there is an instruction i that exclusively
accesses it. Intuitively, if i accesses (non-scalar) array elements
or structure ﬁelds, it likely accesses multiple memory chunks.
CA07 says a scalar’s neighbor may be a scalar too, depending
on their access frequencies (e.g., when the frequencies are
similar). CA08 says a scalar variable cannot be a ﬁeld.
Array Recovery. Rules CB01-CB09 are for array recovery.
A common observation is that, the vast majority of arrays are
visited in loops. If multiple elements on a continuous region
are accessed by an instruction, intuitively, it’s likely that this
is access to an array.
In particular, rules CB01-CB02 receive
the basic array hints from the previous analysis steps; CB03-
CB06 aggregate hints to enhance conﬁdence and/or derive
new arrays; and CB07-CB09 derive array heads. Intuitively,
CB01 states that there is likely an array if our deterministic
reasoning says so (e.g., by observing calloc). CB02 says if
addresses are accessed by the same instruction, there is likely
an array and the lowest and highest addresses accessed by
the instruction form the lower and upper bounds of an array,
respectively. CB03 says that when two arrays overlap, have
the same element size s and the distance of the two arrays
is divisible by s, the two arrays can enhance each other’s
conﬁdence (the ﬁrst formula) and they can be merged to a
larger array (the second formula). CB04 says that when two
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:02 UTC from IEEE Xplore.  Restrictions apply. 
820
01. typedef struct { long x; longy; } A;02. typedef struct { long x; longz[]; } B;03.04. voidheap_example(size_tn, size_tm) {05.   A *p1 = malloc(sizeof(A));06.   A *p2 = malloc(sizeof(A) * n); 07.   B *p3 = malloc(sizeof(B) + sizeof(long[m]));08.   ... ℋ05...p2[0].xp1->xp1->yp2[0].xp2[1].xp2[1].yp3->xp3->z[0]p3->z[1]p3->z[2]...UnfoldableFoldableFoldableFoldableFoldableFoldableℋ06ℋ07UnfoldableID
Condition
CA01
CA02
CA03
CA04
CA05
CA06
CA07
CA08
CB01
CB02
CB03
CB04
AdjacentChunk(v1, v2) ∧ Accessed(v1) ∧ Accessed(v2),
OverlappingChunk(v1, v2) ∧ Accessed(v1) ∧ Accessed(v2),
Accessed(i, v),
Accessed(i, v(cid:48)),
AccessSingleChunk(i, v.a.r) ∧ Access(i, v, k)
AdjacentChunk(v1, v2) ∧ Access(i1, v1, k1) ∧ Access(i2, v2, k2) ∧
AccessSingleChunk(i1, v1.a.r) ∧ AccessSingleChunk(i2, v2.a.r)
AccessMultiChunks(i, r)∧LoAddrAccessed(i, r, v1.a) ∧
HiAddrAccessed(i, r, v2.a)
(a1l ≤ a2l ≤ a1h ≤ a2h) ∧ (s1 = s2 = s) ∧ (s | a2l − a1l)
(a1l ≤ a2l ≤ a1h ≤ a2h) ∧
((s1 (cid:54)= s2) ∨ ((s1 = s2 = s) ∧ (s (cid:45) a2l − a1l)))
CB05
a1 ≤ v.a ≤ a2
CB06
CB07
CB08
CB09
CC01
CC02
CC03
CC04
CC05
CC06
CC07
CD01
CD02
CD03
CD04
CD05
CD06
CD07
CD08
CD10
CD11
a2 − a1 < s
BaseAddr(i, v, a) ∧ AccessMultiChunks(i, v.a.r)
MostFreqAddrAccessed(i, r, v, k) ∧ AccessMultiChunks(i, r)
Accessed(i,v1)∧Accessed(i,v2)∧SameRegion(v1.a,v2.a)∧(v1.a < v2.a)
v.a.r = Hi
s1 (cid:54)= s2
s1 ≤ s2