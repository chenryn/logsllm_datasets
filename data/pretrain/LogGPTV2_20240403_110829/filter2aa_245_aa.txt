⼀、什么是DoS？
DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击⾏为被称为DoS攻
击，其⽬的是使计算机或⽹络⽆法提供正常的服务。拒绝服务存在于各种⽹络服务
上，这个⽹络服务可以是c、c++实现的，也可以是go、java、php、python等等语
⾔实现。
⼆、Java DoS的现状
在各种开源和闭源的java系统产品中，我们经常能看到有关DoS的缺陷公告，其中
⼤部分都是耗尽CPU类型或者业务卸载类型的DoS。耗尽CPU类型的DoS⼤体上主
要包括“正则回溯耗尽CPU、代码⼤量重复执⾏耗尽CPU、死循环代码耗尽CPU”
等。⽽业务卸载DoS这⼀类型的DoS则和系统业务强耦合，⼀般情况下并不具备通
⽤性。下⾯⽤⼏个简单例⼦对其进⾏简单描述。
正则回溯耗尽CPU
Pattern.matches(controllableVariableRegex, 
controllableVariableText)
代码⼤量重复执⾏耗尽CPU
for(int i = 0; i  availables = new HashSet();
public void service(String type, String name) {
    if (availables.contains(type)) {
        //do service
    } else {
        //reject service
    }
}
public void uninstall(String type) {
    availables.remove(type)
}
我曾经在挖掘XStream反序列化利⽤链的时候，也找到过可以发起“正则回溯耗尽
CPU、死循环耗尽CPU”类型DoS攻击的利⽤链，并且最终获得了XStream的多个
CVE编号标记和署名。
java.io.ByteArrayInputStream（死循环耗尽CPU） https://x-
stream.github.io/CVE-2021-21341.html
java.util.Scanner（正则回溯耗尽CPU） https://x-stream.github.io/CVE-2021-
21348.html
难道Java系统中，只存在这些类型的DoS吗？我不认为是这样的，我认为Java系统
中，必然存在着⼤量其他类型的DoS缺陷，只是我们还没发现。当我在某⼀天审计
⼀个Java系统时，灵光⼀闪，突然发现了⼀个和这些DoS类型都不⼀样的缺陷，并
且，在通过对其他⼤量的Java系统审计时，它普遍存在，我知道了这是⼀个具有普
遍性存在的缺陷 - Memory DoS
三、Java异常机制
在c、c++等语⾔实现的⽹络服务中，可能存在空指针DoS、CPU耗尽DoS等等各种
各样类型的DoS，为什么在Java中，DoS的类型却少得可怜？这⼜不得不说起Java
中的异常机制了。
Java异常在JRE源码实现中，主要分为了java.lang.Exception和java.lang.Error，它
们都有⼀个共同的实现java.lang.Throwable。经常写Java代码的程序员，可能最不
喜欢就是遇到这样的麻烦了。
（关于异常的描述，简单参考了⼀下runoob）
异常是程序中的⼀些错误，但并不是所有的错误都是异常，并且错误有时候是可以
避免的。
⽐如说，你的代码少了⼀个分号，那么运⾏出来结果是提示是错误
java.lang.Error；如果你⽤System.out.println(11/0)，那么你是因为你⽤0做了除
数，会抛出 java.lang.ArithmeticException 的异常。
异常发⽣的原因有很多，通常包含以下⼏⼤类：
⽤户输⼊了⾮法数据。
要打开的⽂件不存在。
⽹络通信时连接中断，或者JVM内存溢出。
这些异常有的是因为⽤户错误引起，有的是程序错误引起的，还有其它⼀些是因为
物理错误引起的。- 要理解Java异常处理是如何⼯作的，你需要掌握以下三种类型
的异常：
检查性异常：最具代表的检查性异常是⽤户错误或问题引起的异常，这是程序
员⽆法预⻅的。例如要打开⼀个不存在⽂件时，⼀个异常就发⽣了，这些异常
在编译时不能被简单地忽略。
运⾏时异常： 运⾏时异常是可能被程序员避免的异常。与检查性异常相反，运
⾏时异常可以在编译时被忽略。
错误： 错误不是异常，⽽是脱离程序员控制的问题。错误在代码中通常被忽
略。例如，当栈溢出时，⼀个错误就发⽣了，它们在编译也检查不到的。
关于Java异常机制的描述，上述已经说得很清楚了，当出现异常的时候，往往⼤部
分是可以被捕获处理的，但是，当出现错误的时候，意味着程序已经不能正常运⾏
了。也就是说，我们在Java系统中产⽣的⼤部分异常，是没办法导致DoS的，只有
造成了错误，才会使程序不能正常运⾏，导致DoS，这就是为什么在Java中，DoS
的类型相对少的原因了。
翻看JRE中关于错误java.lang.Error的实现，可以看到⾮常⾮常之多，⽽今天的主⻆
是java.lang.OutOfMemoryError，也就是说，我们如果能让程序产⽣
java.lang.OutOfMemoryError错误，就可以实现DoS。⼤多数java程序员应该都很熟
悉它，抛出java.lang.OutOfMemoryError错误，⼀般都出现在jvm内存不⾜，或者内
存泄露导致gc⽆法回收中。
四、⼀种普遍存在的Memory DoS
上⼀节说到了，我们如果能让程序产⽣java.lang.OutOfMemoryError错误，就可以
实现DoS，它叫Memory DoS，⼀种耗尽内存，导致程序抛出错误的DoS攻击。
那么，如何让⼀个Java系统产⽣java.lang.OutOfMemoryError错误呢？答案必然是
“耗尽内存”！
我曾经通过简单的代码扫描⼯具，对多个java系统、组件进⾏了扫描，其中发现了
⼤量可利⽤的Memory DoS缺陷，是的，这意味着我能让这些系统产⽣
java.lang.OutOfMemoryError错误。⽽这些系统、组件中包含了Java SE、
WebLogic、Spring、Sentinel、Jackson、xstream等等⽐较著名的系统和组件。
0x01 Java SE
我在对Java SE的扫描中，发现了有三个class在反序列化的时候，可以导致系统产
⽣java.lang.OutOfMemoryError错误，对系统进⾏Memory DoS攻击。我⻢上报告
给了Oracle，最终在Java SE 8u301中得到修复，并且我在2021.07的安全通知中
https://www.oracle.com/security-alerts/cpujul2021.html，得到了"Security-In-
Depth"的署名
让我们先看看Java SE 8u301的修复和修复前，它们之间的差异对⽐吧。
java.time.zone.ZoneRules#readExternal
修复前：
static ZoneRules readExternal(DataInput in) throws IOException, 
ClassNotFoundException {
    int stdSize = in.readInt();
    long[] stdTrans = (stdSize == 0) ? EMPTY_LONG_ARRAY
                                     : new long[stdSize];
    for (int i = 0; i  1024) {
        throw new InvalidObjectException("Too many transitions");
    }
    long[] stdTrans = (stdSize == 0) ? EMPTY_LONG_ARRAY
                                     : new long[stdSize];
    for (int i = 0; i  0) {
            baos.write(in.readByte());
        }
        s = baos.toString();
    }
    try {
        parse(s);
    } catch(MimeTypeParseException e) {
        throw new IOException(e.toString());
    }
}
com.sun.deploy.security.CredentialInfo#readExternal
修复前：
public void readExternal(ObjectInput var1) throws IOException, 
ClassNotFoundException {
    try {
        this.userName = (String)var1.readObject();
        this.sessionId = var1.readLong();
        this.domain = (String)var1.readObject();
        this.encryptedPassword = new byte[var1.readInt()];
        for(int var2 = 0; var2  4096) {
            throw new SecurityException("Invalid password length (" 
+ var2 + "). It should not exceed " + 4096 + " bytes.");
        }
        this.encryptedPassword = new byte[var2];
        for(int var3 = 0; var3 < this.encryptedPassword.length; 
++var3) {
            this.encryptedPassword[var3] = var1.readByte();
        }
    } catch (Exception var4) {
        Trace.securityPrintException(var4);
    }
}
通过这三个例⼦，⼤家看出来了什么了吗？
是的，这是⼀种利⽤数组在初始化时，容量参数可控，从⽽存在的⼀种Memory
DoS缺陷。当恶意⽤户控制了容量参数，把参数值⼤⼩设置为int最⼤值
2147483647-2（2147483645是数组初始化最⼤限制），那么，在数组初始化时，
JVM会因为内存不⾜，从⽽导致系统产⽣java.lang.OutOfMemoryError错误，实现
Memory DoS。
0x02 WebLogic
我在对Weblogic的扫描中，发现了有⼏⼗个class在反序列化的时候，可以导致系统
产⽣java.lang.OutOfMemoryError错误，对系统进⾏Memory DoS攻击。扫描虽然
使⽤了⼏分钟，但我写报告却花了⼤量的时间:)。
在报告给了Oracle后，2021.07的安全通知中https://www.oracle.com/security-
alerts/cpujul2021.html，我得知其被修复，并且得到了CVE-2021-2344, CVE-
2021-2371, CVE-2021-2376, CVE-2021-2378四个CVE以及署名。
WebLogic中的Memory DoS和Java SE的没有太⼤的差别，就不⼀⼀列出来了。
com.tangosol.run.xml.SimpleDocument#readExternal(java.io.O
bjectInput)
public void readExternal(ObjectInput in) throws IOException, 
ClassNotFoundException {
    int cch = in.readInt();
    char[] ach = new char[cch];
    Utf8Reader reader = new Utf8Reader((InputStream)in);
    int cchBlock;
    for(int of = 0; of < cch; of += cchBlock) {