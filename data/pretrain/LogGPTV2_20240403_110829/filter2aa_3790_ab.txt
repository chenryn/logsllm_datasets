            | ; size_t strlen(const char *s)           |
            | call sym.imp.strlen;[gb]                 |
            | mov dword [input_len], eax               |
            | ; 'H'                                    |
            | mov byte [last_char], 0x48               |
            | mov dword [i], 0                         |
            | jmp 0x9cc;[gc]                           |
            `------------------------------------------'
                v
                |
                '-----.
 .----------------------.
 |                    | |
 |              .-----------------------------------.
 |              |  0x9cc [gc]                       |
 |              | ; CODE XREF from sym.enc (0x95e)  |
 |              | mov eax, dword [i]                |
 |              | cmp eax, dword [input_len]        |
 |              | jl 0x960;[ge]                     |
 |              `-----------------------------------'
 |                    t f
 |                    | |
 |    .---------------' |
 |    |                 '-----------------------.
 |    |                                         |
 |.------------------------------------.    .---------------------------------.
 ||  0x960 [ge]                        |    |  0x9d4 [gf]                     |
 || ; CODE XREF from sym.enc (0x9d2)   |    | mov rax, qword [p_output]       |
 || mov eax, dword [i]                 |    | leave                           |
 || movsxd rdx, eax                    |    | ret                             |
 || mov rax, qword [s]                 |    `---------------------------------'
 || ; '('                              |
 || add rax, rdx                       |
 || movzx eax, byte [rax]              |
 || movsx eax, al                      |
 || lea edx, [rax + 0xc]               |
 || movzx eax, byte [last_char]        |
 || imul eax, edx                      |
 || lea ecx, [rax + 0x11]              |
 || mov edx, 0xea0ea0eb                |
 || mov eax, ecx                       |
 || imul edx                           |
 || lea eax, [rdx + rcx]               |
 || sar eax, 6                         |
 || mov edx, eax                       |
 || mov eax, ecx                       |
 || sar eax, 0x1f                      |
 || sub edx, eax                       |
 || mov eax, edx                       |
 || imul eax, eax, 0x46                |
 || sub ecx, eax                       |
 || mov eax, ecx                       |
 || ; '0'                              | 
 || lea ecx, [rax + 0x30]              |
 || mov eax, dword [i]                 |
 || movsxd rdx, eax                    |
 || mov rax, qword [p_output]          |
 || ; '('                              |
 || add rax, rdx                       |
 || mov edx, ecx                       |
 || mov byte [rax], dl                 |
 || mov eax, dword [i]                 |
 || movsxd rdx, eax                    |
 || mov rax, qword [p_output]          |
 || ; '('                              |
 || add rax, rdx                       |
 || movzx eax, byte [rax]              |
 || mov byte [last_char], al           |
 || add dword [i], 1                   |
 |`------------------------------------'
 |    v
 |    |
 `----' 
```
We can see that it allocates an output buffer for the result, and that it iterates over each character of the input and performs multiple manipulation in order to arrive to an output character. The manipulations, performed in the `[ge]` block, don't seem trivial to reverse, and as we can see - they include some relation to the previous character (stored in `last_char`). It would probably be easier to brute-force this index-by-index.
In order to do so, we can choose to extract/reimplement the encryption function in a different program, or peek into the existing one during runtime. I chose the latter since it's less error-prone (and much cooler), making use of `ltrace` for the task.
From the Linux man page:
> ltrace is a program that simply runs the specified command until it exits.  It intercepts and records the dynamic library calls which are called by the executed process and the signals which are received by that process.  It can also intercept and print the system calls executed by the program.
For example, if we call `ltrace` on the program using a random key, we see:
```console
root@kali:/media/sf_CTFs/tamu/KeyGenMe# echo abcdefghij | ltrace ./keygenme
setvbuf(0x7f86fab16760, 0, 2, 0)                                                                                  = 0
puts("\nPlease Enter a product key to c"...
Please Enter a product key to continue:
)                                                                      = 42
fgets("abcdefghij\n", 65, 0x7f86fab15a00)                                                                         = 0x7ffc75e42fa0
strlen("abcdefghij\n")                                                                                            = 11
strlen("abcdefghij\n")                                                                                            = 11
malloc(64)                                                                                                        = 0x55bf58a9c270
strlen("abcdefghij\n")                                                                                            = 11
strcmp("[OIonU2_&1 | grep -Po "strcmp\(\".{${#target}}\", \"\K.{$key_len}")
        # Extract the character at index i from the output of enc()
        res_char=$(echo "${res:$i:1}")
        # Check if they match
        if  [ "$res_char" = "$target_char" ]
        then
            break
        fi
    done
    echo "Key so far: $key"
done
echo "Key:"
echo $key
echo $key | nc rev.tamuctf.com 7223
```
The output:
```console
root@kali:/media/sf_CTFs/tamu/_KeyGenMe# ./run.sh
Target: [OIonU2_<__nK<KsK
Key so far: $###############
Key so far: $*##############
Key so far: $*Z#############
Key so far: $*Z2############
Key so far: $*Z2S###########
Key so far: $*Z2S"##########
Key so far: $*Z2S"+#########
Key so far: $*Z2S"+'########
Key so far: $*Z2S"+')#######
Key so far: $*Z2S"+')"######
Key so far: $*Z2S"+')""#####
Key so far: $*Z2S"+')""+####
Key so far: $*Z2S"+')""+'###
Key so far: $*Z2S"+')""+'+##
Key so far: $*Z2S"+')""+'+$#
Key so far: $*Z2S"+')""+'+$(
Key:
$*Z2S"+')""+'+$(
Please Enter a product key to continue:
gigem{k3y63n_m3?_k3y63n_y0u!}
```