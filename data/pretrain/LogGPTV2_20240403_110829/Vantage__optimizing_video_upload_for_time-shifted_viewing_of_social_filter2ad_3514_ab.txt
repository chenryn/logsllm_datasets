4’($)*+$
&’($)*+$%
,-$’*./012
,13/1$
")9*4.$)24’($)*+$
8*$*$
4.".4
672
,1’0)$%
6$.-
,1’0)$%
7%"1450%.
!0#5%$44$)2&.0%"3$
’01.%0+25+"1$
)"."25+"1$
Figure 3: Vantage’s architecture. Solid lines indicate data-
plane components. Dotted lines indicate control-plane com-
ponents. Components that are unchanged by Vantage are
shown in a darker shade.
4.1 Overview
We ﬁrst describe the architectures of current live video upload
systems, and then describe Vantage’s high-level operation.
4.1.1 Current live video upload systems. In current live
video upload systems, the uploading client ﬁrst captures raw video
frames from the camera on a mobile device. Frames are then com-
pressed by an encoder and transmitted to the upload endpoint. The
system’s network transport mechanism estimates the available up-
load bandwidth, which informs the level of compression used for
encoding the video frames.
4.1.2 Architecture of Vantage. Figure 3 depicts Vantage’s
high-level architecture. Vantage modiﬁes the upload architecture
described in Section 4.1.1 to enable support for quality-enhancing
retransmissions. Raw frames from the camera are encoded and
enqueued for real-time transmission. Vantage simultaneously com-
presses these frames at a high quality and places them in memory
for potential quality-enhancing retransmissions in the future. Van-
tage’s scheduler generates a bandwidth allocation schedule for the
new frames captured by the camera as well as for quality-enhancing
retransmissions. The execution engine coordinates the encoding of
scheduled frames, and adjusts for inaccuracies in the allocation de-
termined by the scheduler (discussed in detail below in Section 4.3).
Frames that have been scheduled for transmission are enqueued
for transmission by a generic transport protocol that is unmodiﬁed
by Vantage. We assume that the transport layer provides network
bandwidth estimates and drains packets from Vantage’s queues.
In the remainder of this section, we describe each of Vantage’s
components in detail as well as how Vantage overcomes the chal-
lenges presented in Section 3.2.3.
4.2 Scheduler design
Vantage’s scheduler takes as input a set of real-time frames and
potential candidate frames for retransmissions, and an estimate
of the upload bandwidth in the near future in order to choose (a)
which frames to schedule for transmission and (b) the bitrate each
scheduled frame should be encoded at.
SIGCOMM ’19 August 19–23, 2019 Beijing, China
Devdeep Ray, Jack Kosaian, K. V. Rashmi, Srinivasan Seshan
We formulate schedule generation as a mixed-integer optimiza-
tion problem that generates a transmission schedule that optimizes
the quality for the viewers across time-shifted delays. The pre-
cise formulation of the optimization problem is described in Sec-
tion 4.2.1.
An important consideration with this approach is that the time
taken to solve a mixed-integer problem may be non-trivial and
highly variable. To address this, Vantage’s scheduler is run every
P seconds and generates schedules for the next P seconds. When
the scheduler is run at time T = t, it receives a snapshot of the
state (i.e., candidate frames and bandwidth estimation) at time t,
and generates a schedule for the period between T = t + P and
T = t + 2P. If the optimization takes longer than P seconds, the
scheduler is interrupted and the current, potentially sub-optimal
solution of the optimization is used as the schedule.
4.2.1 Optimization formulation. Next, we discuss the for-
mulation of the optimization problem that is performed by the
scheduler every P seconds. Consider a single optimization iteration
that starts at time T = t. We ﬁrst list the inputs to the optimizer
and then subsequently discuss how these inputs are obtained. The
optimizer takes the following information as inputs:
• An estimate of the number of bytes B that can be transmitted
between T = t + P and T = t + 2P.
• A set of future real-time frame ids (F ) that will be sent between
T = t + P and T = t + 2P.
• A set of past frame IDs (G) that are to be considered for re-
transmission. A retransmission chosen in this iteration would
happen at some time between T = t + P and T = t + 2P. The
diﬀerence between T = t + 2P and the time at which a frame ❕
was captured is the delay of the frame, which we denote as d❕.
• The quality of past frames that have been received by the upload
endpoint. For each frame ❕ ∈ G, R❕ denotes the SSIM of the
version of frame ❕ currently available at the upload endpoint. We
do not schedule queued or in-ﬂight frames for retransmission.
• The bitrate-SSIM curve for each frame ❕ ∈ G. For each frame
❕ ∈ G, Q❕ : size → ssim represents the mapping from encoded
frame size (in bytes) to the SSIM.
• The predicted bitrate-SSIM curves for each of the real-time
frames that will be sent between T = t + P and T = t + 2P. We
denote this by Qf : size → ssim.
• The distribution of the viewing delays of the current set of
viewers. For each viewing delay d, N(d) represents the count
of viewers watching the live stream at a viewing delay of d
seconds.
• We also deﬁne a set of weights w❕ ∀❕ ∈G and a weight w0 for the
real-time frames. We discuss how these weights are computed
from the delay distribution N in the subsequent paragraphs.
The scheduler returns the target sizes sf ∀f ∈ F for the real-
time frames and a set of frames G ′ ⊂ G and the corresponding
target size s❕ ∀❕ ∈ G ′ for the quality-enhancing retransmissions.
We formulate the optimization problem as a maximization of the
weighted viewing quality subject to bandwidth constraints.
The role of the bandwidth constraint is to ensure that the total
amount of data scheduled for transmission (including both the
real-time frames and past frames) does not exceed the estimated
bandwidth. Thus, the bandwidth constraint is :

∀f ∈F
sf + 
∀❕ ∈G
s❕ ≤ B
(1)
The objective function includes contributions from the real-time
frames and the past frames. For a real-time frame f ∈ F , the contri-
bution to the objective function is
w0 · Qf (sf )
(2)
For a past frame ❕ ∈ G, the contribution to the objective function is
w❕ · max(Q❕ (s❕ ), R❕ )
(3)
Note that the weights w❕ are diﬀerent for each frame ❕ ∈ G.
The net objective sums up the contribution from each of the
real-time frames and the past frames:
w0 · Qf (sf ) + 
∀❕ ∈G
obj = 
∀f ∈F
w❕ · max(Q❕ (s❕ ), R❕ )
(4)
Since the real-time frames serve as a base for delayed playback
as well, the transmission of a real-time frame beneﬁts all delays.
Similarly, a quality-enhancing retransmissions at a delay d is useful
for all viewing delays that are greater than d. Thus, we set the
weights for the real-time frames (w0) and the past frames (w❕) in
the objective function as follows.
w0 = 
d
N(d), w❕ = 
d >d❕
N(d)
(5)
The functions Qi that maps size to SSIM for a frame i is typically
a non-linear curve (e.g., Figure 1) and can vary signiﬁcantly across
frames. We approximate these curves as piece-wise linear functions
in the formulation of the mixed-integer program. Since the number
of frames that can be encoded in P seconds is limited, we addition-
ally limit the number of retransmissions to |F |. This ensures that
the computational requirements of encoding the quality-enhancing
retransmissions does not exceed that of the real-time frames.
4.2.2 Bitrate-SSIM curve estimation. Recall
from Sec-
tion 4.2.1 that the optimization problem uses bitrate-SSIM curves
of all frames that are candidates for scheduling (i.e., Q❕ for retrans-
missions and Qf for real-time frames). This is required so that
the optimization can make informed choices when reducing the
real-time quality to improve the quality of past frames.
Vantage uses a regression heuristic to estimate these curves
from previous encoding data. We use a function of the form Q(s) =
1 − 1
a ·s +b since it captures the concave non-decreasing behavior
−b
(for a > 0, s >
a ) typical of bitrate-SSIM curves (e.g., Figure 1).
Parameters a and b are computed separately for each frame based
on its observed size and SSIM when the frame has already been
previously encoded (i.e., for real-time or for quality-enhancing
retransmissions). These parameters are updated each time a frame is
re-encoded for retransmission. However, bitrate-SSIM information
is not available for future real-time frames because they have not
yet been captured. Hence, for the future frames, we use the EWMA
values of the past parameters for computing the parameters of
Qf
∀f ∈ F because frames that are temporally local have similar
content, and thus similar bitrate-SSIM curves.
Vantage: Optimizing video upload for time-shi(cid:28)ed viewing of social live streams
SIGCOMM ’19 August 19–23, 2019 Beijing, China
4.2.3 Optimizer performance. A preliminary evaluation of
Vantage with a scheduling period P = 2 s indicated that the mixed-
integer solver often fails in ﬁnding an optimal solution within
2 seconds when |G | is large. One alternative is to increase the
scheduler period P, but this results in worse performance due to
the scheduler receiving stale bandwidth estimates. This is further
discussed in Section 5.2.5. Instead, Vantage ﬁlters G using a heuristic
and only generates the variables in the mixed-integer program
for the 200 frames with the worst SSIM. Furthermore, we do not
restrict the frame sizes to be integers, and instead use an integer
approximation for the continuous solution. We ﬁnd that using P =
2 seconds along with these approximations leads to the optimizer
generating high-quality schedules: 98.5% of optimization windows
in our evaluation result in a schedule that is within 1% of the optimal
solution.
4.3 Mitigating bandwidth estimation error
As described in Section 4.2, Vantage’s scheduler generates an en-
coding and transmission schedule for P seconds in the future based
on an estimate of the future network bandwidth.
Since the optimizer uses a bandwidth estimate measured P sec-
onds before the scheduled frames are transmitted, the true available
bandwidth may diﬀer at the time when the scheduled frames will
be transmitted. Left uncorrected, the use of a schedule generated
from a mispredicted bandwidth estimate will lead to sub-optimal
use of the network.
To mitigate the eﬀects of bandwidth misestimation, Vantage’s
execution engine makes adjustments to the generated schedule
prior to transmitting the frames. When the bandwidth estimate
used to generate the schedule under-estimated the amount of band-
width available at transmission time, Vantage’s execution engine
keeps the network saturated by increasing the bitrate of the real-
time video compared to the optimizer’s schedule, but only if the
retransmissions scheduled in that iteration have been completed.
On the other hand, when the bandwidth estimate used to gener-
ate the schedule over-estimated the amount of bandwidth available
at transmission time, the execution engine prioritizes transmission
of real-time frames: frames scheduled for retransmission at that
time are discarded and real-time frames are encoded at a bitrate
lower than that speciﬁed by the scheduler so as to avoid over-
saturating the network. Prioritizing real-time transmission in the
event of bandwidth over-estimation ensures high QoE for all time-
shifted viewing delays, as real-time frames would be available for
viewing at all delays, whereas retransmitted frames only beneﬁt
viewers watching with a time-shifted delay.
4.4 Encoding retransmissions
Frames that have been scheduled for retransmission at a particular
time may not be temporally close to the real-time frames scheduled
at the same point in time. This presents a challenge for encoding
Vantage’s output stream because video encoding algorithms rely
heavily on the similarity between successive frames to achieve good
compression ratios. Using the same encoder for transmitting both
the real-time video and the retransmissions would result in poor
compression, as the content in the retransmitted frames may diﬀer
signiﬁcantly from real-time frames.
To address this challenge, Vantage uses two separate encoders for
compressing real-time and retransmitted frames. Real-time frames
are encoded in the order in which they were captured. Quality-
enhancing retransmissions are encoded by a separate encoder based
on the schedule determined by the optimizer. Though retransmis-
sions could be temporally far from one another, we note that net-
work impairment events commonly aﬀect groups of neighboring
frames. Thus, if a particular frame is a good candidate for retrans-
mission, it is more likely that its neighboring frames are also good
candidates for retransmission. We, therefore, add an additional
regularization objective to the optimization formulation to favor
scheduling consecutive sequences of frames among the retransmis-
sion candidates for quality-enhancing retransmissions.
4.5 Reducing memory overhead
Vantage keeps previously transmitted frames in memory so that
they can be re-encoded as quality-enhancing retransmissions at
a later time. Naïvely storing raw video frames in memory is im-
practical for uploads initiated from a mobile device; the size of a
raw frame can be as large as 1.5 MB, thus requiring more than a
gigabyte of memory for 30 seconds of video.
To address the high cost of storing raw video frames, Vantage
compresses raw frames as lossless I-frames using a tertiary encoder
prior to storing in memory. This allows Vantage to maintain a low
memory footprint, but incurs additional computational cost. We
believe that this is an appropriate trade-oﬀ as hardware accelerated
encoding and decoding solutions are commonly available today,
though we note that this design choice is not required by Vantage’s
framework.
4.6 Discussion
In this section, we brieﬂy discuss required changes to the upload
endpoint to support Vantage and how Vantage would diﬀer with
the availability of an SVC codec.
Upload endpoint modiﬁcations. Recall from Section 2.1 that
an SLVS upload stream is terminated at an upload endpoint, which
decodes the stream and re-encodes it into small video segments
for eﬃcient delivery to the viewers over content delivery networks
(CDNs) [40].
While the changes proposed in Vantage allow backward compat-
ibility with real-time streaming systems, the upload endpoint must
be able to handle Vantage’s quality-enhancing retransmissions. This
requires the upload endpoint to re-transcode past video segments
whenever quality-enhancing retransmissions for that segment are