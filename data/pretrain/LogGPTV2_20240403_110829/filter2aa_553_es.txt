/= 把左边的变量除以右边的量，并把结果储存在左边的变量中。
%= 得到左边量除以右边量的余数，并把结果储存在左边的变量中。
&= 把L-H & R-H的值赋给左边的量，并把结果储存在左边的变量中。
|= 把L-H | R-H的值赋给左边的量，并把结果储存在左边的变量中。
^= 把L-H ^ R-H的值赋给左边的量，并把结果储存在左边的变量中。
>>= 把L-H >> R-H的值赋给左边的量，并把结果储存在左边的变量中。
 2 && 3 == 3 为真。
!(6 > 2 && 3 == 3) 为假。
x != 0 && 20/x  3) ? 1 : 2的值为1。
(3 > 5) ? 1 : 2的值为2。
(a > b) ? a : b的值是a和b中较大者
B.2.6 与指针有关的运算符
&是地址运算符。当它后面是一个变量名时，&给出该变量的地址。
*是间接或解引用运算符。当它后面是一个指针时，*给出储存在指针指
向地址中的值。
示例
&nurse是变量nurse的地址：
nurse = 22;
ptr = &nurse; /* 指向nurse的指针 */
val = *ptr;
以上代码的效果是把22赋给val。
B.2.7 符号运算符
-是负号，反转运算对象的符号。
1533
+ 是正号，不改变运算对象的符号。
B.2.8 结构和联合运算符
结构和联合使用一些运算符标识成员。成员运算符与结构和联合一起使
用，间接成员运算符与指向结构或联合的指针一起使用。
1.成员运算符
成员运算符（.）与结构名或联合名一起使用，指定结构或联合中的一
个成员。如果name是一个结构名，member是该结构模板指定的成员名，那
么name.member标识该结构中的这个成员。name.member的类型就是被指定
member的类型。在联合中也可以用相同的方式使用成员运算符。
示例
struct {
int code;
float cost;
} item;
item.code = 1265;
上面这条语句把1265赋给结构变量item的成员code。
2.间接成员运算符（或结构指针运算符）
间接成员运算符（->）与一个指向结构或联合的指针一起使用，标识该
结构或联合的一个成员。假设ptrstr是一个指向结构的指针，member是该结
构模板指定的成员，那么ptrstr->member标识了指针所指向结构的这个成
员。在联合中也可以用相同的方式使用间接成员运算符。
示例
1534
struct {
int code;
float cost;
} item, * ptrst;
ptrst = &item;
ptrst->code = 3451;
以上程序段把3451赋给结构item的成员code。下面3种写法是等效的：
ptrst->code item.code  (*ptrst).code
B.2.9 按位运算符
下面所列除了～，都是按位运算符。
～ 是一元运算符，它通过翻转运算对象的每一位得到一个值。
& 是逻辑与运算符，只有当两个运算对象中对应的位都为1时，它生成
的值中对应的位才为1。
| 是逻辑或运算符，只要两个运算对象中对应的位有一位为1，它生成的
值中对应的位就为1。
^ 
是按位异或运算符，只有两个运算对象中对应的位中只有一位为
1（不能全为1），它生成的值中对应的位才为1。
> 是右移运算符，把左边运算对象中的位向右移动得到一个值。移动
的位数由该运算符右边的运算对象确定，空出的位用0填充。
1535
示例
假设有下面的代码：
int x = 2;
int y = 3;
x & y的值为2，因为x和y的位组合中，只有第1位均为1。而y         // I定义在该头文件中
double _Complex z = 3.0;      // 实部 = 3.0，虚部 = 0
double _Complex w = 4.0 * I;    // 实部 = 0.0，虚部 = 4.0
double Complex u = 6.0 – 8.0 * I; //实部= 6.0，虚部 = -8.0
前面章节讨论过，complex.h库包含一些返回复数实部和虚部的函数。
B.3.2 总结：如何声明一个简单变量
1539
1.选择所需的类型。
2.选择一个合适的变量名。
3.使用这种声明格式：type-specifiervariable-name;
type-specifier由一个或多个类型关键字组成，下面是一些例子：
int erest;
unsigned short cash;
4.声明多个同类型变量时，使用逗号分隔符隔开各变量名：
char ch, init, ans;
5.可以在声明的同时初始化变量：
float mass = 6.0E24;
总结：存储类别
关键字：auto、extern、static、register、_Thread_local（C11）
一般注解：
变量的存储类别取决于它的作用域、链接和存储期。存储类别由声明变
量的位置和与之关联的关键字决定。定义在所有函数外部的变量具有文件作
用域、外部链接、静态存储期。声明在函数中的变量是自动变量，除非该变
量前面使用了其他关键字。它们具有块作用域、无链接、自动存储期。以
static关键字声明在函数中的变量具有块作用域、无链接、静态存储期。以
static关键字声明在函数外部的变量具有文件作用域、内部链接、静态存储
期。
C11 新增了一个存储类别说明符：_Thread_local。以该关键字声明的对
象具有线程存储期，意思是在线程中声明的对象在该线程运行期间一直存
1540
在，且在线程开始时被初始化。因此，这种对象属于线程私有。
属性：
下面总结了这些存储类别的属性：
续表
注意，关键字extern只能用来再次声明在别处已定义过的变量。在函数
外部定义变量，该变量具有外部链接属性。
除了以上介绍的存储类别，C 还提供了动态分配内存。这种内存通过调
用 malloc()函数系列中的一个函数来分配。这种函数返回一个可用于访问内
存的指针。调用 free()函数或结束程序可以释放动态分配的内存。任何可以
访问指向该内存指针的函数均可访问这块内存。例如，一个函数可以把这个
指针的值返回给另一个函数，那么另一个函数也可以访问该指针所指向的内
存。
B.3.3 总结：限定符
关键字
使用下面关键字限定变量：
1541
const、volatile、restrict
一般注释
限定符用于限制变量的使用方式。不能改变初始化以后的 const 变量。
编译器不会假设 
volatile变量不被某些外部代理（如，一个硬件更新）改
变。restrict 
限定的指针是访问它所指向内存的唯一方式（在特定作用域
中）。
属性
const int joy = 101;声明创建了变量joy，它的值被初始化为101。
volatile unsigned int incoming;声明创建了变量incoming，该变量在程序中
两次出现之间，其值可能会发生改变。
const int * ptr = &joy;声明创建了指针ptr，该指针不能用来改变变量joy的
值，但是它可以指向其他位置。
int * const ptr = &joy;声明创建了指针ptr，不能改变该指针的值，即ptr只
能指向joy，但是可以用它来改变joy的值。
void simple (const char * s);声明表明形式参数s被传递给simple()的值初始
化后，simple()不能改变s指向的值。
void supple(int * const pi);与void supple(int pi[const]);等价。这两个声明
都表明supple()函数不会改变形参pi。
void interleave(int * restrict p1, int * restrict p2, int n);声明表明p1和p2是访