 1932539 |   13285 | sub1    |       10 | t          | hostaddr=127.0.0.1 port=1921 user=postgres dbname=postgres password=postgres | sub1        | off           | {pub1}  
 1940851 |   13285 | sub2    |       10 | t          | host=127.0.0.1 port=12000 user=postgres dbname=postgres                      | sub2        | off           | {pub1}  
(2 rows)  
postgres=# select * from pg_stat_get_subscription(1940851);  
  subid  | relid |  pid  | received_lsn |      last_msg_send_time       |    last_msg_receipt_time     | latest_end_lsn |        latest_end_time          
---------+-------+-------+--------------+-------------------------------+------------------------------+----------------+-------------------------------  
 1940851 |       | 32691 | 1/B1012438   | 2019-05-03 21:48:52.217116+08 | 2019-05-03 21:48:52.21716+08 | 1/B1012438     | 2019-05-03 21:48:52.217116+08  
(1 row)  
```  
可以看到sub订阅信息记录了latest_end_lsn，即接收到的上游节点的REDO解析位点的逻辑日志。  
19、在主节点，可以看到逻辑复制SUB2对应的slot信息  
```  
pg12@pg11-test-> psql  
psql (12devel)  
Type "help" for help.  
postgres=# select * from pg_get_replication_slots();  
 slot_name |    plugin     | slot_type | datoid | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn   
-----------+---------------+-----------+--------+-----------+--------+------------+------+--------------+-------------+---------------------  
 phy1      |               | physical  |        | f         | f      |            |      |              |             |   
 log1      | test_decoding | logical   |  13585 | f         | f      |            |      |          534 | 1/AB000110  | 1/AB000148  
 sub2      | pgoutput      | logical   |  13585 | f         | t      |      32692 |      |          538 | 1/B1012400  | 1/B1012438  
(3 rows)  
```  
20、在第三个实例，再次将sub定义的上游改成物理standby节点。  
```  
postgres=# alter subscription sub2 connection 'host=127.0.0.1 port=12001 user=postgres dbname=postgres';  
ALTER SUBSCRIPTION  
```  
21、正常的主备切换，不丢任何数据  
```  
pg_ctl stop -m fast -D 主节点目录  
```  
激活从库  
```  
pg_ctl promote -D 从节点目录  
```  
22、激活后的节点，并没有任何SLOT信息。  
```  
pg12@pg11-test-> psql -h 127.0.0.1 -p 12001  
psql (12devel)  
Type "help" for help.  
postgres=# select * from pg_get_replication_slots();  
 slot_name | plugin | slot_type | datoid | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn   
-----------+--------+-----------+--------+-----------+--------+------------+------+--------------+-------------+---------------------  
(0 rows)  
```  
23、在激活后的节点上，查看日志，发现报没有sub2 slot的错误。原因是流复制并没有同步SLOT信息，slot信息全部都在原来的主节点上面，在激活后的从节点上没有任何SLOT信息。  
```  
2019-05-03 21:58:12.368 CST,,,33474,"127.0.0.1:52282",5ccc48f4.82c2,1,"",2019-05-03 21:58:12 CST,,0,LOG,00000,"connection received: host=127.0.0.1 port=52282",,,,,,,,"BackendInitialize, postmaster.c:4289",""  
2019-05-03 21:58:12.369 CST,"postgres","postgres",33474,"127.0.0.1:52282",5ccc48f4.82c2,2,"authentication",2019-05-03 21:58:12 CST,4/38,0,LOG,00000,"replication connection authorized: user=postgres application_name=sub2",,,,,,,,"PerformAuthentication, postinit.c:276",""  
2019-05-03 21:58:12.371 CST,"postgres","postgres",33474,"127.0.0.1:52282",5ccc48f4.82c2,3,"idle",2019-05-03 21:58:12 CST,4/0,0,ERROR,42704,"replication slot ""sub2"" does not exist",,,,,,,,"ReplicationSlotAcquire, slot.c:387","sub2"  
2019-05-03 21:58:12.371 CST,"postgres","postgres",33474,"127.0.0.1:52282",5ccc48f4.82c2,4,"idle",2019-05-03 21:58:12 CST,,0,LOG,00000,"disconnection: session time: 0:00:00.002 user=postgres database=postgres host=127.0.0.1 port=52282",,,,,,,,"log_disconnections, postgres.c:4679","sub2"  
```  
24、对于这种流复制的HA架构，如果使用了PG内置的逻辑订阅功能，那么发生HA切换后，需要在激活后的新主库上创建对应的SLOT。    
例如  
```  
pg12@pg11-test-> psql -h 127.0.0.1 -p 12001  
psql (12devel)  
Type "help" for help.  
postgres=# select pg_create_logical_replication_slot('sub2','pgoutput');  
 pg_create_logical_replication_slot   
------------------------------------  
 (sub2,1/B20059E0)  
(1 row)  
pg12@pg11-test-> psql -h 127.0.0.1 -p 12001  
psql (12devel)  
Type "help" for help.  
postgres=# select * from pg_get_replication_slots();  
 slot_name |  plugin  | slot_type | datoid | temporary | active | active_pid | xmin | catalog_xmin | restart_lsn | confirmed_flush_lsn   
-----------+----------+-----------+--------+-----------+--------+------------+------+--------------+-------------+---------------------  
 sub2      | pgoutput | logical   |  13585 | f         | t      |      34972 |      |          540 | 1/B20059A8  | 1/B20059E0  
(1 row)  
```  
新主库对应日志  
```  
2019-05-03 22:14:09.002 CST,,,34972,"127.0.0.1:52668",5ccc4cb1.889c,1,"",2019-05-03 22:14:09 CST,,0,LOG,00000,"connection received: host=127.0.0.1 port=52668",,,,,,,,"BackendInitialize, postmaster.c:4289",""  
2019-05-03 22:14:09.003 CST,"postgres","postgres",34972,"127.0.0.1:52668",5ccc4cb1.889c,2,"authentication",2019-05-03 22:14:09 CST,5/434,0,LOG,00000,"replication connection authorized: user=postgres application_name=sub2",,,,,,,,"PerformAuthentication, postinit.c:276",""  
2019-05-03 22:14:09.004 CST,"postgres","postgres",34972,"127.0.0.1:52668",5ccc4cb1.889c,3,"idle",2019-05-03 22:14:09 CST,5/0,0,LOG,00000,"starting logical decoding for slot ""sub2""","Streaming transactions committing after 1/B20059E0, reading WAL from 1/B20059A8.",,,,,,,"CreateDecodingContext, logical.c:447","sub2"  
2019-05-03 22:14:09.004 CST,"postgres","postgres",34972,"127.0.0.1:52668",5ccc4cb1.889c,4,"idle",2019-05-03 22:14:09 CST,5/0,0,LOG,00000,"logical decoding found consistent point at 1/B20059A8","There are no running transactions.",,,,,,,"SnapBuildFindSnapshot, snapbuild.c:1272","sub2"  
```  
25、注意，由于新建的SLOT位点超出了sub2逻辑订阅的位点，所以中间没有解析的REDO对应的变更会丢失。  
```  
sub端要的是这里开始的REDO  
1/B1012438  
新主库创建的逻辑SLOT，起始位点是：  
1/B20059A8  
这两个位置存在差异，新主库对应位点已经更后了，所以丢了一部分信息  
```  
事实上可以看到values -1对应的记录没有被订阅到，因为这条记录对应的REOD是在订阅端没有接收到的。  
```  
postgres=# select * from test where id=-1;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
```  
在新主库新产生的日志可以被回放。  
```  
postgres=# insert into test values (-2);  
INSERT 0 1  
订阅端  
postgres=# select * from test where id=-2;  
 id | info | crt_time   
----+------+----------  
 -2 |      |   
(1 row)  
但是对于key -1的操作，不会被复制  
postgres=# update test set info='abc' where id=-1;  
UPDATE 1  
postgres=# update test set info='abc' where id=-2;  
UPDATE 1  
订阅端  
postgres=# select * from test where id=-1;  
 id | info | crt_time   
----+------+----------  
(0 rows)  
postgres=# select * from test where id=-2;  
 id | info | crt_time   
----+------+----------  
 -2 | abc  |   
(1 row)  
```  
## 小结    
物理流复制的standby可以构建级联standby，创建物理slot等。    
1、物理standby支持创建物理slot    
2、物理standby支持级联物理standby    
物理流复制的STANDBY不支持逻辑复制、SLOT同步、逻辑订阅功能：    
1、物理standby不支持逻辑复制，例如创建逻辑slot decode    
2、物理standby不支持publication    
3、物理standby不支持级联逻辑复制    
不管是逻辑standby还是物理standby，都不支持slot信息的同步。    
1、流复制暂时不支持slot同步(physical and logical)（所以也不支持漂移）    
重点：如果你在流复制HA架构中，使用了逻辑复制（replication slot, publication\subscriber, logical decoding），那么在发生主从切换后，这些信息都会丢失。    
如果有这种场景使用的需求，同时有HA的需求，那么可以考虑换一下HA架构，例如共享存储的传统HA架构，数据只有一份，只有一个节点ACTIVE，另一个节点在主节点异常时接管存储，启动数据库。    
## 参考    
https://www.postgresql.org/docs/devel/runtime-config-wal.html#RUNTIME-CONFIG-WAL-ARCHIVE-RECOVERY    
PostgreSQL 13 将支持slot主从同步，   
https://www.postgresql.org/message-id/flat/PI:EMAIL         
https://commitfest.postgresql.org/23/1961/   
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")