---
author: Eric Bidelman
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 18172
date: '2017-09-08 11:34:00'
editorchoice: false
excerpt: 在 Chrome 59 中开始搭载 Headless Chrome。这是一种在无需显示的环境下运行 Chrome 浏览器的方式。从本质上来说，就是不用
  chrome 浏览器来运行 Chrome 的功能！它将 Chromium 和 Blink 渲染引擎提供的所有现代 Web 平台的功能都带入了命令行。
fromurl: https://developers.google.com/web/updates/2017/04/headless-chrome
id: 8850
islctt: true
largepic: /data/attachment/album/201709/08/113337g9jjamqsizxmie3s.png
permalink: /article-8850-1.html
pic: /data/attachment/album/201709/08/113337g9jjamqsizxmie3s.png.thumb.jpg
related:
- displayorder: 0
  raid: 8861
reviewer: ''
selector: ''
summary: 在 Chrome 59 中开始搭载 Headless Chrome。这是一种在无需显示的环境下运行 Chrome 浏览器的方式。从本质上来说，就是不用
  chrome 浏览器来运行 Chrome 的功能！它将 Chromium 和 Blink 渲染引擎提供的所有现代 Web 平台的功能都带入了命令行。
tags:
- 浏览器
- Chrome
- Headless
thumb: false
title: Headless Chrome 入门
titlepic: true
translator: firmianay
updated: '2017-09-08 11:34:00'
---
![](/data/attachment/album/201709/08/113337g9jjamqsizxmie3s.png)
### 摘要
在 Chrome 59 中开始搭载 [Headless Chrome](https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md)。这是一种在 无需显示   headless 的环境下运行 Chrome 浏览器的方式。从本质上来说，就是不用 chrome 浏览器来运行 Chrome 的功能！它将 Chromium 和 Blink 渲染引擎提供的所有现代 Web 平台的功能都带入了命令行。
它有什么用？
 无需显示   headless 的浏览器对于自动化测试和不需要可视化 UI 界面的服务器环境是一个很好的工具。例如，你可能需要对真实的网页运行一些测试，创建一个 PDF，或者只是检查浏览器如何呈现 URL。
> 
> **注意：** Mac 和 Linux 上的 Chrome 59 都可以运行无需显示模式。[对 Windows 的支持](https://bugs.chromium.org/p/chromium/issues/detail?id=686608)将在 Chrome 60 中提供。要检查你使用的 Chrome 版本，请在浏览器中打开 `chrome://version`。
> 
> 
> 
### 开启 无需显示   headless 模式（命令行界面）
开启 无需显示   headless 模式最简单的方法是从命令行打开 Chrome 二进制文件。如果你已经安装了 Chrome 59 以上的版本，请使用 `--headless` 标志启动 Chrome：
```
chrome \
  --headless \                   # Runs Chrome in headless mode.
  --disable-gpu \                # Temporarily needed for now.
  --remote-debugging-port=9222 \
  https://www.chromestatus.com   # URL to open. Defaults to about:blank.
```
> 
> **注意：**目前你仍然需要使用 `--disable-gpu` 标志。但它最终会不需要的。
> 
> 
> 
`chrome` 二进制文件应该指向你安装 Chrome 的位置。确切的位置会因平台差异而不同。当前我在 Mac 上操作，所以我为安装的每个版本的 Chrome 都创建了方便使用的别名。
如果您使用 Chrome 的稳定版，并且无法获得测试版，我建议您使用 `chrome-canary` 版本：
```
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chrome-canary="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"
alias chromium="/Applications/Chromium.app/Contents/MacOS/Chromium"
```
在[这里](https://www.google.com/chrome/browser/canary.html)下载 Chrome Cannary。
### 命令行的功能
在某些情况下，你可能不需要[以脚本编程的方式](https://developers.google.com/web/updates/2017/04/headless-chrome#node)操作 Headless Chrome。可以使用一些[有用的命令行标志](https://cs.chromium.org/chromium/src/headless/app/headless_shell_switches.cc)来执行常见的任务。
#### 打印 DOM
`--dump-dom` 标志将打印 `document.body.innerHTML` 到标准输出：
```
chrome --headless --disable-gpu --dump-dom https://www.chromestatus.com/
```
#### 创建一个 PDF
`--print-to-pdf` 标志将页面转出为 PDF 文件：
```
chrome --headless --disable-gpu --print-to-pdf https://www.chromestatus.com/
```
#### 截图
要捕获页面的屏幕截图，请使用 `--screenshot` 标志：
```
chrome --headless --disable-gpu --screenshot https://www.chromestatus.com/
# Size of a standard letterhead.
chrome --headless --disable-gpu --screenshot --window-size=1280,1696 https://www.chromestatus.com/
# Nexus 5x
chrome --headless --disable-gpu --screenshot --window-size=412,732 https://www.chromestatus.com/
```
使用 `--screenshot` 标志运行 Headless Chrome 将在当前工作目录中生成一个名为 `screenshot.png` 的文件。如果你正在寻求整个页面的截图，那么会涉及到很多事情。来自 David Schnurr 的一篇很棒的博文已经介绍了这一内容。请查看 [使用 headless Chrome 作为自动截屏工具](https://medium.com/@dschnr/using-headless-chrome-as-an-automated-screenshot-tool-4b07dffba79a)。
#### REPL 模式 (read-eval-print loop)
`--repl` 标志可以使 Headless Chrome 运行在一个你可以使用浏览器评估 JS 表达式的模式下。执行下面的命令：
```
$ chrome --headless --disable-gpu --repl https://www.chromestatus.com/
[0608/112805.245285:INFO:headless_shell.cc(278)] Type a Javascript expression to evaluate or "quit" to exit.
>>> location.href
{"result":{"type":"string","value":"https://www.chromestatus.com/features"}}
>>> quit
```
### 在没有浏览器界面的情况下调试 Chrome
当你使用 `--remote-debugging-port=9222` 运行 Chrome 时，它会启动一个支持 [DevTools 协议](https://chromedevtools.github.io/devtools-protocol/)的实例。该协议用于与 Chrome 进行通信，并且驱动 Headless Chrome 浏览器实例。它也是一个类似 Sublime、VS Code 和 Node 的工具，可用于应用程序的远程调试。#协同效应
由于你没有浏览器用户界面可用来查看网页，请在另一个浏览器中输入 `http://localhost:9222`，以检查一切是否正常。你将会看到一个 可检查的   inspectable 页面的列表，可以点击它们来查看 Headless Chrome 正在呈现的内容：
![](/data/attachment/album/201709/08/113716ghwls9r2wtu2mwhl.jpg)
*DevTools 远程调试界面*
从这里，你就可以像往常一样使用熟悉的 DevTools 来检查、调试和调整页面了。如果你以编程方式使用 Headless Chrome，这个页面也是一个功能强大的调试工具，用于查看所有通过网络与浏览器交互的原始 DevTools 协议命令。
### 使用编程模式 （Node）
#### Puppeteer 库 API
[Puppeteer](https://github.com/GoogleChrome/puppeteer) 是一个由 Chrome 团队开发的 Node 库。它提供了一个高层次的 API 来控制无需显示版（或 完全版）的 Chrome。它与其他自动化测试库，如 Phantom 和 NightmareJS 相类似，但是只适用于最新版本的 Chrome。
除此之外，Puppeteer 还可用于轻松截取屏幕截图，创建 PDF，页面间导航以及获取有关这些页面的信息。如果你想快速地自动化进行浏览器测试，我建议使用该库。它隐藏了 DevTools 协议的复杂性，并可以处理诸如启动 Chrome 调试实例等繁冗的任务。
安装：
```
yarn add puppeteer
```
**例子** - 打印用户代理：
```
const puppeteer = require('puppeteer');
(async() => {
  const browser = await puppeteer.launch();
  console.log(await browser.version());
  browser.close();
})();
```
**例子** - 获取页面的屏幕截图：
```
const puppeteer = require('puppeteer');
(async() => {
const browser = await puppeteer.launch();
const page = await browser.newPage();
await page.goto('https://www.chromestatus.com', {waitUntil: 'networkidle'});
await page.pdf({path: 'page.pdf', format: 'A4'});
browser.close();
})();
```
查看 [Puppeteer 的文档](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md)，了解完整 API 的更多信息。
#### CRI 库
[chrome-remote-interface](https://www.npmjs.com/package/chrome-remote-interface) 是一个比 Puppeteer API 更低层次的库。如果你想要更接近原始信息和更直接地使用 [DevTools 协议](https://chromedevtools.github.io/devtools-protocol/)的话，我推荐使用它。
**启动 Chrome**
chrome-remote-interface 不会为你启动 Chrome，所以你要自己启动它。
在前面的 CLI 章节中，我们使用 `--headless --remote-debugging-port=9222` [手动启动了 Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome#cli)。但是，要想做到完全自动化测试，你可能希望从你的应用程序中启动 Chrome。
其中一种方法是使用 `child_process`：
```
const execFile = require('child_process').execFile;
function launchHeadlessChrome(url, callback) {
  // Assuming MacOSx.
  const CHROME = '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome';
  execFile(CHROME, ['--headless', '--disable-gpu', '--remote-debugging-port=9222', url], callback);
}
launchHeadlessChrome('https://www.chromestatus.com', (err, stdout, stderr) => {
  ...
});
```
但是如果你想要在多个平台上运行可移植的解决方案，事情会变得很棘手。请注意 Chrome 的硬编码路径：
**使用 ChromeLauncher**
[Lighthouse](https://developers.google.com/web/tools/lighthouse/) 是一个令人称奇的网络应用的质量测试工具。Lighthouse 内部开发了一个强大的用于启动 Chrome 的模块，现在已经被提取出来单独使用。[chrome-launcher NPM 模块](https://www.npmjs.com/package/chrome-launcher) 可以找到 Chrome 的安装位置，设置调试实例，启动浏览器和在程序运行完之后将其杀死。它最好的一点是可以跨平台工作，感谢 Node！
默认情况下，**chrome-launcher 会尝试启动 Chrome Canary**（如果已经安装），但是你也可以更改它，手动选择使用的 Chrome 版本。要想使用它，首先从 npm 安装：
```
yarn add chrome-launcher
```
**例子** - 使用 `chrome-launcher` 启动 Headless Chrome：
```
const chromeLauncher = require('chrome-launcher');
// Optional: set logging level of launcher to see its output.
// Install it using: yarn add lighthouse-logger
// const log = require('lighthouse-logger');
// log.setLevel('info');
/**
 * Launches a debugging instance of Chrome.
 * @param {boolean=} headless True (default) launches Chrome in headless mode.
 *     False launches a full version of Chrome.
 * @return {Promise}
 */
function launchChrome(headless=true) {
  return chromeLauncher.launch({
    // port: 9222, // Uncomment to force a specific port of your choice.
    chromeFlags: [
      '--window-size=412,732',
      '--disable-gpu',
      headless ? '--headless' : ''
    ]
  });
}
launchChrome().then(chrome => {
  console.log(`Chrome debuggable on port: ${chrome.port}`);
  ...
  // chrome.kill();
});
```
运行这个脚本没有做太多的事情，但你应该能在任务管理器中看到启动了一个 Chrome 的实例，它加载了页面 `about:blank`。记住，它不会有任何的浏览器界面，我们是无需显示的。
为了控制浏览器，我们需要 DevTools 协议！
#### 检索有关页面的信息
> 