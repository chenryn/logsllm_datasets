I'm trying to use `sizehint!` \+ `push!` to fill an array, but it is much
slower than the equivalent operation using `resize!` and indexing. Benchmarks
below.
I'm not surprised there's _some_ overhead, and I'd be willing to accept some
just to avoid potential bugs resulting from uninitialized data, but the
overhead is 10x:
    julia> VERSION
    v"1.3.0-DEV.377"
    julia> f!(arr, N) = ( sizehint!(arr, N); for i in 1:N; push!(arr, i); end; arr )
    f! (generic function with 1 method)
    julia> g!(arr, N) = ( resize!(arr, N); for i in 1:N; arr[i] = i; end; arr )
    g! (generic function with 1 method)
    julia> f!(Int[], 1_000_000) == g!(Int[], 1_000_000)
    true
    julia> @benchmark f!(arr, 1_000_000) setup=(arr=Int[])
    BenchmarkTools.Trial: 
      memory estimate:  7.63 MiB
      allocs estimate:  1
      --------------
      minimum time:     3.717 ms (0.00% GC)
      median time:      3.811 ms (0.00% GC)
      mean time:        3.870 ms (0.00% GC)
      maximum time:     6.022 ms (0.00% GC)
      --------------
      samples:          1271
      evals/sample:     1
    julia> @benchmark g!(arr, 1_000_000) setup=(arr=Int[])
    BenchmarkTools.Trial: 
      memory estimate:  7.63 MiB
      allocs estimate:  1
      --------------
      minimum time:     392.328 μs (0.00% GC)
      median time:      419.459 μs (0.00% GC)
      mean time:        433.387 μs (0.00% GC)
      maximum time:     2.653 ms (0.00% GC)
      --------------
      samples:          10000
      evals/sample:     1
Almost all time is spent in the function `_growend!`, which in turn is backed
by a C function so I can't easily pin-point on what line the slowness is. I
have reproduced this in v1.0.3 as well as latest master.