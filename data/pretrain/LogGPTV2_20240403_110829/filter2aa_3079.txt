# KCon: Breaking iOS Mitigation Jails to Achieve Your Own Private Jailbreak

## Speaker
Min (Spark) Zheng, Alibaba Mobile Security

## Overview
This presentation is only available at the event and will cover how to bypass iOS security measures to achieve a private jailbreak. 

## Current iOS Status
- Apple has sold over 1 billion iOS devices.
- There are more than 380,000 registered iOS developers in the U.S.
- iOS is often considered more secure than Android due to its controlled distribution channel and comprehensive app review process (e.g., the FBI vs. Apple case).
- Despite these protections, there are still potential risks for iOS systems. We will share our private jailbreak techniques and demonstrate how to break through the protection of the iOS system.

## iOS System Architecture
The iOS system architecture includes several layers of security:
- **Sandbox**: Limits app access to system resources.
- **Team ID**: Ensures that binaries have the correct team identifier.
- **Entitlements**: Controls specific permissions and capabilities.
- **Kernel**: The core of the operating system.
- **KPP (Kernel Patch Protection)**: Prevents unauthorized modifications to the kernel.

## iOS Mitigations
To achieve a jailbreak, one must overcome the following mitigations:
- **Sandbox**: You cannot access most kernel interfaces unless you escape the sandbox.
- **Team ID**: You cannot execute or load any binary unless it has the "platform-binary" team ID.
- **Entitlements**: You cannot create HID devices unless the binary has the "com.apple.hid.manager.user-access-device" entitlement.
- **Kernel Bugs**: You cannot control the kernel unless you have kernel bugs and can bypass kernel heap mitigations.
- **KPP**: You cannot patch the kernel unless you can bypass the kernel patch protection.

## Sandbox and NSXPC
- **Sandboxing**: iOS apps are isolated from each other and from the system.
- **IPC (Inter-Process Communication)**: Apps can communicate with unsandboxed system services through IPC mechanisms such as Mach messages, XPC, and NSXPC.
- **NSXPC Vulnerability**: We will discuss an IPC vulnerability we discovered that allows an app to escape the sandbox.

### Example: CVE-2015-7037
- **Service**: com.apple.PersistentURLTranslator.Gatekeeper
- **Vulnerability**: Path traversal vulnerability allowing an app to move folders outside the sandbox with mobile privileges (used in Pangu9 for jailbreaking).

## Heap Spray Techniques
- **Traditional xpc_dictionary heap spray**: Failed because the data was freed before PC control.
- **Asynchronous xpc_dictionary heap spray**: Unstable due to a very small time window.
- **SQL query heap spray**: Low success rate due to ASLR and memory limits.
- **Asynchronous OOL (Out-of-Line) message heap spray**: Finally successful!

## User Mode to Kernel
### iOS Kernel Overview
- **Mach**: Manages kernel threads and inter-process communication.
- **BSD**: Handles user IDs, permissions, basic security policies, and system calls.
- **IOKit**: Manages drivers (e.g., graphics, keyboard).

### Kernel Exploitation
- **iOS 9.0 IOHIDFamily UAF (Use-After-Free)**: Exploit OSSafeRelease() to create a fake device and vtable for ROP.
- **iOS 9.3 IOHIDDevice Heap Overflow**: No check for Input reports, leading to arbitrary length heap overflow in any kalloc zone.

### Leaking Kernel Slide
- **Heap Feng Shui**: By comparing the dynamic vtable address with the vtable in the kernelcache, the attacker can determine the kernel slide.

### Arbitrary Kernel Memory Read and Write
- **ROP Chain**: Use OSSerialize to create a ROP chain that invokes uuid_copy, allowing the attacker to read and write arbitrary kernel memory.
- **IOConnectGetService**: Trigger the ROP chain by sending a fake vtable data of AGXCommandQueue UserClient.

### Kernel Patching
- **Patching Security Features**: Modify kernel features to set kernel pages RWX, get kernel task port, gain root, disable signature checks, and remount the root file system.
- **Bypassing KPP (Kernel Patch Protection)**: For arm32, no KPP; for arm64, use timing attacks or page remapping with fake TTBR.

## Jailbreak Process
- **CodeSign, Sandbox, TeamID, Entitlements**: Bypass these to gain userland access.
- **Kernel Patch**: Patch the kernel to gain root and disable security features.
- **KPP Bypass**: Bypass kernel patch protection.
- **Heap Mitigation**: Bypass heap mitigations.
- **IOKit/XNU**: Exploit IOKit and XNU vulnerabilities.
- **Root Access**: Gain full root access and install jailbreak apps.

## Case Study: OverSky (aka Flying) Jailbreak
- **iOS 9.3.4/9.3.5**: A zero-day jailbreak at the time.
- **Demo**: [YouTube Video](https://www.youtube.com/watch?v=GsPmG8-kMK8)

## Conclusion
- **Mitigation Strategies**: Apple continuously introduces new mitigation approaches to enhance iOS security.
- **Exploit Development**: We will present how to break each specific mitigation mechanism by exploiting corresponding vulnerabilities.
- **Jailbreak Construction**: We will construct a long exploit chain to achieve a jailbreak.
- **Reproducibility**: With the techniques presented, anyone interested can develop their own private iOS jailbreak.

Thank you!