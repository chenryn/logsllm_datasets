∗
w
∗
w
∗
j
σ
∗
w
= acH2(D
||(n + w)) + bc mod p
∗
w
σc = acH2(Dw||(n + w)) + bc mod p
(1)
(2)
If (ac = 0 ∨ bc = 0), B aborts. Otherwise, B returns (ac, bc).
In the above game, simulator B makes as many queries as
A makes. The running time of simulator B is that of A plus
the overhead due to handling A’s BAF signature queries.
If A succeeds with probability  in forging, then simulator
B succeeds with probability ∼ (/L). The argument is sum-
marized as follows: (i) The view of A that B produces the
signatures is computationally indistinguishable from the view
of A interacting with a real BAF signing oracle. That is, if
there exists a distinguisher for these two views of A, there
exists a distinguisher for H1. (ii) Conditioned on simulator
B choosing target forgery time period tw as the period for
which A is supposed to output a valid forgery, the probability
that B solves the ECDLP is the same as the probability
that A succeeds in forgery (i.e., with probability ). Since
choosing the “correct” target forgery time period tw occurs
with probability 1/L, the approximate lower bound on the
forging probability of B is ∼ (/L).
(cid:2)
Theorem 1 proves that BAF achieves all the required secu-
rity objectives that a forward secure and aggregate signature
scheme must satisfy [1], [8], [9]: Forward security, unforge-
ability, integrity, authentication, and signature aggregation.
Apart from the above security properties, another security
concern in audit logging is truncation and delayed detection
attacks identiﬁed in [1], [3]. Truncation attack is a special
type of deletion attack, in which A deletes a continuous subset
of tail-end log entries. This attack can be prevented via “all-
or-nothing” property [8]: A either should remain previously
accumulated data intact, or should not use them at all (A
cannot selectively delete/modify any subset of this data [1]).
Delayed detection attack targets the audit logging mechanisms
requiring online TTP support to enable the log veriﬁcation. In
these mechanisms, the veriﬁers cannot detect whether the log
entries are modiﬁed before the TTP provides required keying
information. Due to the lack of immediate veriﬁcation, these
mechanisms cannot fulﬁll the requirement of applications in
which the log entries should to be processed in real-time. Ma
et al. [1] showed that many existing schemes are vulnerable
to these attacks (e.g., [4], [10], [2], [5]).
Based on Theorem 1, it is straightforward to show that BAF
is secure against both truncation and delayed detection attacks.
The argument is outlined as follows: (i) Theorem 1 guarantees
that any data item (or any subset of the accumulated data
items), signed and aggregated before the break-in of A, is for-
ward secure and aggregate unforgeable. This implies that BAF
224
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
NOTATION FOR PERFORMANCE ANALYSIS AND COMPARISON
TABLE I
(cid:2)
M uln: Modular multiplication mod n = p
M ulp: Modular multiplication mod p
EM ul: ECC scalar multiplication over Fp M tP : ECC map-to-point operation
Sqr: Modular squaring mod n
GSig: Generic signature generation
are large primes
and q
q
(cid:2)
(cid:2)
(cid:2)
l: # of data item to be processed
GV er: Generic signature veriﬁcation R: # of veriﬁers
, where p
Exp: Modular exponentiation mod p H: Hash operation
P R: ECC pairing operation
L: max. # of key updates
x: # of bits in FssAgg keys
COMPUTATION INVOLVED IN BAF AND PREVIOUS SCHEMES
TABLE II
BAF
H
2H
(l + 1) · EM ul
FssAgg-BLS [8]
M tP + Exp + M ulp
H
l · (M ulp + P R)
Sig
Upd
Ver
PKC-based
FssAgg-BM [1], [9]
2 )M uln
(1 + x
(x + 1)Sqr
L· Sqr + (l +
l·x
2 )M uln
FssAgg-AR [1], [9]
x · Sqr + (2 + x
(2x)Sqr
x(L + l)Sqr +
2l(1 + x
2 )M uln
2 )M uln
Logcrypt [11]
Symmetric
[2], [4], [5], [8]
GSig
-
l · GV er
H
H
l · H
achieves “all-or-nothing” property. Thus, it is secure against
any attack modifying (or deleting) the data accumulated before
the break-in. (ii) In BAF, the veriﬁers are provided with all the
required public keys before deployment. Hence, BAF achieves
the immediate veriﬁcation property, and therefore is secure
against delayed detection attack.
V. PERFORMANCE ANALYSIS AND COMPARISON
In this section, we present the performance analysis of our
scheme. We also compare BAF with the previous schemes
using the following criteria: (i) The computational overhead
of signature generation/veriﬁcation operations; (ii) storage and
communication overheads depending on the size of signing
key and the size of signature; (iii) scalability properties such
as public veriﬁability and ofﬂine/online TTP, and (iv) security
properties such as immediate veriﬁcation and being resilient to
the truncation and delayed detection attacks. Computational,
storage and communication overheads are critical to justify
the practicality of these schemes for task intensive and/or
resource-constrained environments. Scalability and security
properties are critical
to justify the applicability of these
schemes in large distributed systems.
We list the notation used in our performance analysis and
comparison in Table I. Based on this notation, for each of
the above category, we ﬁrst provide the analysis of BAF, and
then present its comparison with the previous schemes both
analytically and numerically. Note that we accept the per-data
item key update model as the comparison basis in our analysis.
A. Computational Overhead
We ﬁrst analyze the computational overhead of BAF for
signing a single log entry. Individual signature generation
requires one H, one addition and one multiplication modular
p. Key update requires 2H, and the signature aggregation re-
quires one addition modular p. Since the overhead of addition
and multiplication operations is negligible, the total cost of
signing a single log entry is only 3H.
We now analyze the signature veriﬁcation overhead of
BAF. By following the BAF signature veriﬁcation equation,
verifying a single log entry requires one EM ul, one H and
one ECC addition. Note that it is possible to avoid the ECC
=
(cid:2)
j
(cid:2)
j
i=0 Bj = (
addition by using an optimization: In the key generation phase,
(cid:3)
i=0 bj)G
we can compute and release B
instead of Bj = bjG for j = 0, . . . , L − 1 to speed
j
up the signature veriﬁcation. In this way, the veriﬁers can
perform the signature veriﬁcation with only one ECC addition
(negligible cost) regardless of the value of l as σ0,l−1 ∗ G
?==
j=0(H2(Dj||(n+j))∗Aj)+B
l−1
(cid:3)
l−1. The cost of H is negligi-
ble in this case, since the total computational cost is dominated
by EM ul. Hence, the aggregate signature veriﬁcation cost of
BAF for l received log entries is (l + 1) · EM ul.
(cid:2)
To get an intuitive feeling about the computational overhead,
we measured the execution times of basic BAF operations on
a laptop with a 1.60GHz Pentium D processor and 512MB
RAM running Windows XP. We used MIRACL library [27]
compiled with Visual C++ 2005 for necessary cryptographic
operations. A single EM ul operation over 160 bit random EC
takes 2.05 ms, while a single H operation (i.e, SHA-1) takes
0.02 ms. Hence, the execution times of signing and verifying
a single log entry for BAF can be estimated as 0.06 ms and
(2.05+0.06)=2.11 ms, respectively.
Comparison: The closest counter parts of our scheme
are FssAgg schemes [1], [3], [8], [9]. The signature gen-
eration of FssAgg-BLS [8] is expensive due to Exp and
M tP , while its signature veriﬁcation is highly expensive due
to pairing operations. Different from FssAgg-BLS, FssAgg-
BM and FssAgg-AR [9] rely on efﬁcient PKC operations
such as Sqr and M uln. However, these schemes are also
computationally costly, since they require heavy use of such
PKC operations. For instance, FssAgg-BM [9] requires (x +
1)Sqr + (1 + x/2)M uln (i.e., x˜=160 [9]) for the signature
generation (key update plus the signing cost), and it requires
L · Sqr + (l + x · l/2)M uln for the signature veriﬁcation.
Similarly, FssAgg-AR requires (3x)Sqr + (2 + x/2)M uln
for the signature generation, and it requires x(L + l)Sqr +
2l(1 + x
2 )M uln for the signature veriﬁcation. Logcrypt uses
a digital signature scheme (e.g., ECDSA) to sign and verify
each log entry separately without signature aggregation [11],
and thus has standard signature costs. The symmetric schemes
[2], [4], [5], [8] are in general efﬁcient, since they only need
symmetric cryptographic operations. Table II summarizes the
computational costs of all the compared schemes.
Table III shows the estimated execution time of BAF and
225
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:08:30 UTC from IEEE Xplore.  Restrictions apply. 
ESTIMATED EXECUTION TIME (IN MS) OF BAF AND PREVIOUS SCHEMES FOR A SINGLE LOG ENTRY
TABLE III
BAF
0.06
2.11
Sig
Ver
FssAgg-BLS [8]
PKC-based
FssAgg-BM [1], [9]
30.0
33.0
5.55
2.2
FssAgg-AR [1], [9]
Logcrypt [11]
11.66
8.1
2.11
12.09
Symmetric
[2], [4], [5], [8]
0.06
0.06
106
104
102
100
)
s
m
n
i
(
e
m
i
t
n
o
i
t
u
c
e
x
E
10−2
0
)
s
m
n
i
(
e
m
i
t
n
o
i
t
u
c
e
x
E
105
104
103
102
101
100
0
BAF
FssAgg−BLS
FssAgg−BM
FssAgg−AR
Logcrypt
200
800
Number of log entries to be signed (l)
400
600
1000
Fig. 2. Signing time comparison (in ms)
BAF
FssAgg−BLS
FssAgg−BM
FssAgg−AR
Logcrypt
200
800
Number of log entries to be verified (l)
400
Fig. 3. Veriﬁcation time comparison (in ms)
600
1000
previous schemes. The execution times of BAF, Logcrypt, and
the symmetric schemes [2], [4], [5], [8] were obtained using
the MIRACL library [27] on a laptop with a 1.60GHz Pentium
D processor and 512MB RAM, while the results for all FssAgg
schemes are taken from [1], [9], which used a laptop with a
1.73GHz Intel dual-core with 1GB RAM. Thus, our numerical
comparison of BAF and the FssAgg schemes is conservative
for BAF.
When compared with PKC-based FssAgg-BLS, FssAgg-
BM, FssAgg-AR and Logcrypt, BAF is 500, 92, 194, and 35
times faster for loggers, respectively. This efﬁciency makes
BAF the best alternative among all existing schemes for
secure logging with public veriﬁability in task intensive and/or
resource-constrained applications. Similarly, BAF signature
veriﬁcation is also more efﬁcient than the previous schemes.
When compared with FssAgg-BLS, FssAgg-AR and Logcrypt,
BAF is 15.6, 3.8 and 5.7 times faster, respectively. BAF is
also slightly more efﬁcient than FssAgg-BM. Figure 2 and
Figure 3 further show the comparison of BAF and the previous
schemes that allow public veriﬁcation in terms of signature
generation and veriﬁcation time as the number of log entries
increases. These ﬁgures clearly show that BAF is the most
computationally efﬁcient one among all these choices.
When compared with the previous symmetric logging
schemes (e.g., [2], [4], [5], [8], [10]), BAF signature generation
is equally efﬁcient even though it is a PKC-based scheme.
However, signature veriﬁcation of the symmetric logging
schemes is more efﬁcient than all the existing PKC-based
schemes, including BAF. Note that these symmetric schemes
sacriﬁce storage/communication efﬁciency, public veriﬁability,