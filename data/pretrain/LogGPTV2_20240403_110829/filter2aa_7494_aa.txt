  目录
-   [1 通用类](#1)
    *   [I. 代码实现](#1.1)
		+   [1.1 内存管理](#1.1.1)
		+   [1.2 文件操作](#1.1.2)
		+   [1.3 系统接口](#1.1.3)
		+   [1.4 通信安全](#1.1.4)
		+   [1.5 敏感数据保护](#1.1.5)
		+   [1.6 加密解密](#1.1.6)
		+   [1.7 正则表达式](#1.1.7)
-   [2 后台类](#2)
    *   [I. 代码实现](#2.1)
		+   [1.1 输入校验](#2.1.1)
		+   [1.2 SQL操作](#2.1.2)
		+   [1.3 网络请求](#2.1.3)
		+   [1.4 服务器端渲染](#2.1.4)
		+   [1.5 Web跨域](#2.1.5)
		+   [1.6 响应输出](#2.1.6)
		+   [1.7 会话管理](#2.1.7)
		+   [1.8 访问控制](#2.1.8)
		+   [1.9 并发保护](#2.1.9)
# 通用类
## 1. 代码实现类
### 1.1 内存管理
#### 1.1.1【必须】切片长度校验
- 在对slice进行操作时，必须判断长度是否合法，防止程序panic
```go
// bad: 未判断data的长度，可导致 index out of range
func decode(data []byte) bool {
	if data[0] == 'F' && data[1] == 'U' && data[2] == 'Z' && data[3] == 'Z' && data[4] == 'E' && data[5] == 'R' {
		fmt.Println("Bad")
		return true
	}
	return false
}
// bad: slice bounds out of range
func foo() {
	var slice = []int{0, 1, 2, 3, 4, 5, 6}
	fmt.Println(slice[:10])
}
// good: 使用data前应判断长度是否合法
func decode(data []byte) bool {
	if len(data) == 6 {
		if data[0] == 'F' && data[1] == 'U' && data[2] == 'Z' && data[3] == 'Z' && data[4] == 'E' && data[5] == 'R' {
			fmt.Println("Good")
			return true
		}
	}
	return false
}
```
#### 1.1.2【必须】nil指针判断
- 进行指针操作时，必须判断该指针是否为nil，防止程序panic，尤其在进行结构体Unmarshal时
```go
type Packet struct {
	PackeyType    uint8
	PackeyVersion uint8
	Data          *Data
}
type Data struct {
	Stat uint8
	Len  uint8
	Buf  [8]byte
}
func (p *Packet) UnmarshalBinary(b []byte) error {
	if len(b)  2 {
		p.Data = new(Data)
	}
	return nil
}
// bad: 未判断指针是否为nil
func main() {
	packet := new(Packet)
	data := make([]byte, 2)
	if err := packet.UnmarshalBinary(data); err != nil {
		fmt.Println("Failed to unmarshal packet")
		return
	}
	fmt.Printf("Stat: %v\n", packet.Data.Stat)
}
// good: 判断Data指针是否为nil
func main() {
	packet := new(Packet)
	data := make([]byte, 2)
	if err := packet.UnmarshalBinary(data); err != nil {
		fmt.Println("Failed to unmarshal packet")
		return
	}
	if packet.Data == nil {
		return
	}
	fmt.Printf("Stat: %v\n", packet.Data.Stat)
}
```
#### 1.1.3【必须】整数安全
- 在进行数字运算操作时，需要做好长度限制，防止外部输入运算导致异常：
  - 确保无符号整数运算时不会反转
  - 确保有符号整数运算时不会出现溢出
  - 确保整型转换时不会出现截断错误
  - 确保整型转换时不会出现符号错误
- 以下场景必须严格进行长度限制：
  - 作为数组索引
  - 作为对象的长度或者大小
  - 作为数组的边界（如作为循环计数器）
```go
// bad: 未限制长度，导致整数溢出
func overflow(numControlByUser int32) {
	var numInt int32 = 0
	numInt = numControlByUser + 1
	// 对长度限制不当，导致整数溢出
	fmt.Printf("%d\n", numInt)
	// 使用numInt，可能导致其他错误
}
func main() {
	overflow(2147483647)
}
// good
func overflow(numControlByUser int32) {
	var numInt int32 = 0
	numInt = numControlByUser + 1
	if numInt  64*1024*1024 {
		return nil, errors.New("value too large")
	}
	buffer := make([]byte, size)
	copy(buffer, data)
	return buffer, nil
}
```
#### 1.1.5【必须】禁止SetFinalizer和指针循环引用同时使用
- 当一个对象从被GC选中到移除内存之前，runtime.SetFinalizer()都不会执行，即使程序正常结束或者发生错误。由指针构成的“循环引用”虽然能被GC正确处理，但由于无法确定Finalizer依赖顺序，从而无法调用runtime.SetFinalizer()，导致目标对象无法变成可达状态，从而造成内存无法被回收。
```go
// bad
func foo() {
	var a, b Data
	a.o = &b
	b.o = &a
	// 指针循环引用，SetFinalizer()无法正常调用
	runtime.SetFinalizer(&a, func(d *Data) {
		fmt.Printf("a %p final.\n", d)
	})
	runtime.SetFinalizer(&b, func(d *Data) {
		fmt.Printf("b %p final.\n", d)
	})
}
func main() {
	for {
		foo()
		time.Sleep(time.Millisecond)
	}
}
```
#### 1.1.6【必须】禁止重复释放channel
- 重复释放一般存在于异常流程判断中，如果恶意攻击者构造出异常条件使程序重复释放channel，则会触发运行时panic，从而造成DoS攻击。
```go
// bad
func foo(c chan int) {
	defer close(c)
	err := processBusiness()
	if err != nil {
		c 
### 1.2 文件操作
#### 1.2.1【必须】 路径穿越检查
- 在进行文件操作时，如果对外部传入的文件名未做限制，可能导致任意文件读取或者任意文件写入，严重可能导致代码执行。
```go
// bad: 任意文件读取
func handler(w http.ResponseWriter, r *http.Request) {
	path := r.URL.Query()["path"][0]
	// 未过滤文件路径，可能导致任意文件读取
	data, _ := ioutil.ReadFile(path)
	w.Write(data)
	// 对外部传入的文件名变量，还需要验证是否存在../等路径穿越的文件名
	data, _ = ioutil.ReadFile(filepath.Join("/home/user/", path))
	w.Write(data)
}
// bad: 任意文件写入
func unzip(f string) {
	r, _ := zip.OpenReader(f)
	for _, f := range r.File {
		p, _ := filepath.Abs(f.Name)
		// 未验证压缩文件名，可能导致../等路径穿越，任意文件路径写入
		ioutil.WriteFile(p, []byte("present"), 0640)
	}
}
// good: 检查压缩的文件名是否包含..路径穿越特征字符，防止任意写入
func unzipGood(f string) bool {
	r, err := zip.OpenReader(f)
	if err != nil {
		fmt.Println("read zip file fail")
		return false
	}
	for _, f := range r.File {
		if !strings.Contains(f.Name, "..") {
			p, _ := filepath.Abs(f.Name)
			ioutil.WriteFile(p, []byte("present"), 0640)
		} else {
			return false