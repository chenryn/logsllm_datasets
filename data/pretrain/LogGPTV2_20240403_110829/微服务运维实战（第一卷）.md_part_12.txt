78
第5章部署流水线的实现——初始阶段
到把生产环境搭建起来再介绍。第6章将会讨论完成这项任务的所必需的选项。
一部分），如图5-2所示。
少对生产环境的影响，因此将尽可能地继续在目标服务器之外运行步骤（或其中的
现在完成了开始五个步骤，或者至少这些步骤的手动版本，剩下的步骤将等
请注意，
（9）将测试容器推送到镜像库一
（8）运行部署后测试一
（7）集成容器一
（6）将容器部署到生产服务器
（5）将容器推送到镜像库一
（4）构建容器一
（3）编译并打包代码一
（2）运行预部署测试—
（1）检出代码一
在CD节点上执行
构建容器
，现在运行的所有步骤都是在 cd 虚拟机上执行的。我们希望尽可能减
将推送
←
图5-2利用Docker部署流水线的初始阶段
一待完成。
一完成。
一完成。
待完成。
一完成。
一完成。
一完成。
检出代码
待完成。
一待完成。
---
## Page 94
6.1
下，昨天做出的选择也与今天的不同。
钱愿意将它们现代化，那么今天的现实会被容器和微服务所统治。在这种情况
的遗留系统的架构。如果这样的遗留系统能被忽略，或者有人有足够的勇气和金
昨天的也不一样。大多数情况下的决策并不是基于可选项，而是基于承诺要维护
就是最好的。就像往常一样，选择会随着时间的推移而变化，今天的选择可能跟
试过一个又一个、又投入了大量时间和金钱的人可能会争辩说，他们选择的工具
不到任何理由不去使用它们。现在的问题不是用不用，而是用哪个。那些已经尝
满风险。配置管理（configuration management，CM）已经存在很长一段时间，我找
CFEngine 可以说是配置管理之父。它创建于1993 年并革新了设置和配置服务
CFEngine
CFEngine
任何管理过多台服务器的人都会承认，手动完成这样的任务既浪费时间又充
Docker世界中的配置管理
第6章
World
---
## Page 95
Chef
Chef
Puppet
Puppet
Puppet 则被认为是更多地面向运维和系统管理。两者都没有足够明显的优势压倒
的工具越来越多，这也增加了其学习曲线和复杂性。Chef对开发者更加友好，而
零和游戏。只要其中一个提出创新或者改进，另外一个就会很快采纳。两者添加
它也确实做到了。后来，随着 Puppet 和 Chef的流行程度而不断上升，它们进入了
已然失去了作为被选武器的声誉。
行和其他金融相关业务中仍然存在一样，它似乎也不会立刻销声匿迹。然而，它
CFEngine 变成历史。这并不意味着 CFEngine 不再被使用，而是像 Cobol 在许多银
受。CFEngine的学习曲线可能是Puppet 进入配置管理市场的主要原因，并慢慢将
使用C 语言编写的不同，Ruby 语言被证明更容易理解也更容易被运维人员所接
友好”，结果我们就看到一个可以被运维部门使用的配置管理工具。与CFEngine
CFEngine 相比，由于其模型驱动的方法和平滑的学习曲线，它被认为更加“操作
现在很少会有人选择CFEngine。
人，新的工具创造出来后，如果不是出于公司对其中的投资而被迫这样做，那么
员来管理，但这并不妨碍它在一些大型企业中被广泛采用。然而，正如新人胜旧
大多数情况下，一般水平的维护者没有能力使用 CFEngine，它需要一个C 开发人
大的地方。但是，CFEngine 也有它的弱点，对编码技能的要求可能是最主要的。
我所知，没有别的工具的速度能超过CFEngine 的速度。这也是并且仍然是它最强
接着Chef 出现了，目的是要解决 Puppet 出现的一些小问题，在一段时间内，
后来，Puppet 应运而生，它也从一个开源项目开始，接着是企业版本。与
CFEngine 使用C 语言编写，只有很少的依赖关系而且快如闪电。实际上，据
---
## Page 96
上运行单个实例。例如，可以通过笔记本电脑管理所有的服务器。虽然这并不可
情况而不需要任何东西。Ansible的体系架构使得你只需要在Linux或OS X计算机
试图迫使你以某种方式设置服务器的竞争者不同，Ansible 充分利用了现有的实际
定。唯一的要求是已经预装在大多数Linux 发行版上的Python。换句话说，与那些
的且广泛使用的协议来运行任何需要的命令，以确保目标服务器符合我们的规
无代理运行功能有限。与Ansible相比，这本身就是一个巨大的差别，因为SSH
端安装在它们要管理的所有服务器上，虽然Chef声称它并不是这样，但它支持的
Ansible
通过强制执行一个不需要在目标服务器上安装任何东西的推送模型来完成。
法应该简单易读，即使对于那些从未使用过该工具的人也是如此。不可变性可以
环境下，配置管理的选择应该更加看中简单性和不可变性，而不是其他方面。语
Docker Swarm 只是今天可能使用的迅速增长的部署工具中的一小部分。在这样的
新定义了配置管理应该做的事情的范围。Docker Compose、Mesos、Kubernetes 和
及其他一些事情，剩下的都是容器。部署正在成为一套不同工具的主题，并且重
围小得多。大多数情况下，我们需要一个或两个用户，启动并运行 Docker 服务以
并不意味着我们不需要配置管理，我们需要！但是，被选工具应该做的事情的范
题不是成百上千的软件包、配置文件、用户、日志等，而是大量容器的处理。这
可变部署时候的问题。之前遇到的服务器混乱已经不复存在，目前我们面临的问
这个游戏会随着Docker 的变化而变化，因为设计它们的时候Docker 还不存在。
对于所要完成的事情来说太复杂。它们在设计的时候都没有考虑容器，也不知道
广泛采用（特别是在企业环境中），也都有大量的开源贡献。唯一的问题是，它们
对方，选择它们也通常是基于个人经验而不是别的。Puppet 和 Chef 都很成熟并被
（几乎）总是存在，所以不需要服务器有什么特别的地方。Ansible利用定义良好
题。
一个明显的区别是它通过 SSH 执行所有的操作。CFEngine 和 Puppet要求客户
Ansible 试图以一种完全不同的方式来解决其他配置管理工具遇到的相同问
到目前为止，我们提到的所有配置管理工具都在试图解决没有采用容器和不
:6.1 CFEngine< 81 
---
## Page 97
第6章Docker世界中的配置管理
Final Thoughts
最后几点思考
的。你应该选择 Chef 或Puppet，除非你已经使用 CFEngine，否则请忽略它。
喜欢 Windows 服务器而不是Linux 发行版，那么对Ansible 的所有赞美都是徒劳
构不像Linux那样友好。
也要比在Linux上的表现差很多。简言之，对于配置管理的目的，Windows体系结
即使在Windows上忽略容器以及它不确定的未来，其他工具在Windows上的表现
Windows，但是现在（或者至少在我写这篇文章的时候），这也只是在路线图上。
令）。无论如何，Docker 还没有准备好在Windows 中运行容器。也许将来会支持
去创建一个全能的工具，而是集中在它最擅长的事情上（通过Linux上的SSH命
如果使用容器，这个缺点在我看来是一个优势。Ansible 开发人员并没有浪费时间
Windows上运行，可以在 playbooks 中使用并且在其上运行的模块数量非常有限。
学习另一种语言和/或DSL。
是CFEngine不同，开发人员编写Ansible的目的是让使用者更加容易上手，而不是
的人，也能明白是怎么回事。与开发人员为开发人员编写的 Chef、Puppet，特别
时间。它的语法基于YAML，只要看一遍playbook，即使是从未使用过这个工具
手。
这样的基于推送的系统，比我们之前讨论过的基于拉取的工具更容易理解、上
具的服务器），但笔记本电脑的例子说明了它的简单性。根据我的经验，像Ansible
取，Ansible应该可以运行在真正的服务器上（最好是安装其他持续集成和部署工
如果几年前有人问我应该使用哪种工具，我会很难回答。今天，如果可以选
我可能说的有点远，也不应该对 Windows 太苛刻并质疑你的选择。如果你更
有人会指出，Ansible 的主要缺点是对Windows 支持有限。客户端甚至不能在
与掌握其他工具所需的所有错综复杂情况相比，学习 Ansible 只要花费很少的
---
## Page 98
Configuring the Production Environment
配置生产环境
ansible-playbook /vagrant/ansible/prod.yml -i /vagrant/ansible/hosts/prod
vagrantsshcd
vagrant up cd prod --provision
拟机启动并运行，下面将从 cd 虚拟机开始来创建 prod 节点。
我们学到的一切带来了新的东西，并让我们成为更好的专业人士。
Ansible 很容易学，即使你没有选择采纳它，也不会浪费很多宝贵的时间。此外，
好和试图达成的目标。然而，与别的工具不同，Ansible 几乎不会浪费你的时间。
哪一个都不是最好的，并会为其他工具投票。很公平，这一切都取决于我们的偏
Chef和Puppet至少在复杂的架构和陡峭的学习曲线上矫枉过正了。
说都是一个重要的优势，CM 也不应该是一个例外。与 Ansible 相比，CFEngine、
（这绝对不应该）。然而，整个团队都可以从事项目的工作对于任何类型的任务来
因此，配置管理可以很快成为整个团队的任务。我并不是说基础设施应该被轻视
都是矫枉过正的。我还没有找到一个在维护Ansible playbooks 时遇到过困难的人，
执行任务的范围，所以 Ansible 是我们需要的工具。任何更复杂的或更难学的东西
么激进的观点，我认为CM在武器库中仍是一个有价值的工具。由于CM工具需要
赖CoreOS、容器以及像Docker Swarm或Kubernetes 这样的部署工具。我还没有这
用时）稳操胜券。我们甚至可能会争论是否需要CM工具，有些例子是大家完全依
楚的（至少在我提到的工具中），Ansible（当与Docker 和 Docker 部署工具结合使
择切换到容器（不管是Docker 还是其他类型）和不可变的部署，那么选择是很清
输出应该类似于以下内容：
让我们看看 Ansible 的实际操作，然后讨论它是如何配置的。现在需要两台虚
你现在可能已经猜到，Ansible将成为我们用于配置管理的工具。
快速浏览的四种工具绝不是我们仅有的选择。也许你很容易争辩说，这里面
6.1 CFEngine<83
---
## Page 99
84
种状态。从上面的输出中可以看到，所有任务的状态都被改变或跳过了。例如，
指定所需的状态，而不是我们想要运行的命令。Ansible会尽力确保服务器处于这
关于Ansible（以及一般的配置管理）的很重要的一点是，在大多数情况下应
10.100.198.201 : ok=11 changed=9 unreachable=0 failed=0
TASK: [docker | vagrant user is added to the docker group]
skipping: [10.100.198.201]
TASK: [docker | Debian Daemon is reloaded]*************************
changed: [10.100.198.201]
changed:[10.100.198.201]
[10.100.198.201]
Are you sure you want to continue connecting(yes/no)?yes ok:
ECDSA key fingerprint is 2c:05:06:9f:a1:53:2a:82:2a:ff:93:24:d0:94
established.
changed:[10.100.198.201]
changed:[10.100.198.201]
TASK:[docker|Debian Docker service isrestarted]
changed:[10.100.198.201]
changed: [10.100.198.201]
***********
TASK:[docker
changed:[10.100.198.201]
***********
changed:[10.100.198.201]
changed:[10.100.198.201]
：f8:82.
The authenticity of host'10.100.198.201(10.100.198.201)'can't be
GR+****************************************************
***********
***********
****
***********
**
*
---
## Page 100
ansible-playbookprod.yml-i hosts/prod
我们指定需要的Docker服务。Ansible会发现目标服务器 prod上面并没有安装它。
Ansible 连接到服务器并检查所有任务的状态，一次一个。由于这是第二次运
10.100.198.201 : ok=10 changed=0 unreachable=0 failed=0
如果再次运行 playbook 会发生什么？
ok:[10.100.198.201]
skipping:[10.100.198.201]
TASK:[docker
ok:[10.100.198.201]
TASK: [docker | vagrant user is added to the docker group]
skipping: [10.100.198.201]
*********
ok:[10.100.198.201]
TASK: [docker I Debian files are present]***************************
ok:[10.100.198.201]
************************ uasa4d s d--axoop uesaaaI aoop  s
ok:[10.100.198.201]
ok:[10.100.198.201]
ok:[10.100.198.201]
TASK:[docker|
ok:[10.100.198.201]
TASK:[common| JQ is present] *********
ok:[10.100.198.201]
GATHERING FACTS *****
你会注意到所有任务的状态都是ok：
*********
********
|Debian add Dockerrepository and update apt cache]
Debian Docker service is restarted]
*******************************
*****************************
6.1 CFEngine85
---
## Page 101
86
第6章Docker世界中的配置管理
Setting Up the Ansible Playbook
设置Ansible Playbook
Docker 配置需要重启 Docker 服务，所以每次更改 files/docker 文件时都必须这样
我们的系统中。接下来，要将标准 Docker 配置替换为位于文件目录中的文件。
Debian 仓库存在，并且安装了最新的 docker-engine 软件包。之后若需要 docker-py
任务。Ansible 是基于按 playbook 里的角色归类分组的任务进行组织的。
common 和 docker。角色通常是我们围绕一种功能、产品、操作类型等组织的一组
vagrant 运行，并以 sudo 执行命令。最后一行是角色列表，这里只有两个，即
的 playbook 的配置。
Docker Compose 和一些配置文件。稍后将看到更复杂的例子。
playbook应该运行的服务器列表。
个参数表示 playbook 的路径；第二个参数的值表示库存文件的路径，该路径包含
的状况跟预期的一样。
行，所以没有修改服务器中的任何内容，Ansible 总结说没有任何事情可做。目前
（Docker的PythonAPI客户端），可以使用pip安装，因此要确保两者都存在于
在开始学习之前，让我们来讨论一下Docker 角色的目标。要确保 Docker
只要阅读 playbook，
prod.yml Ansible playbook 的内容如下。
现在已经看到Ansible运行的效果，让我们仔细检查刚刚已经运行过（两次）
-hosts: prod
这是一个非常简单的例子。虽然必须设置生产环境，
刚刚运行的命令（ansible-playbook prod.yml-i hosts/prod）很简单。第一
roles:- common -
sudo:yes
serial:1
remote_user:
vagrant
，就能理解它的含义,它在名为 prod 的主机上作为用户
docker
，但现在只需要 Docker、
---
## Page 102
roles/docke/tasks/debian.yml 角色。
可分为 debian.yml 文件和centos.yml 文件。现在将使用 Ubuntu，下面来看看
定义它们：
文件和任务组成。任务是任何角色的核心，默认情况下，要求在 main.yml 文件中
做。最后，要确保将用户vagrant添加到docker用户组，以便能够运行Docker命令。
version}}main
-name: Debian add Docker repository and update apt cache apt_repository:
由于将在Debian（Ubuntu）和CentOS或Red Hat上运行Docker，因此，角色
The content of the roles/docker/tasks/main.yml file is as follows.