the Rich App Profile doesn’t need to send wrap_client_secret in the access token request.
 Accessing a WRAP-Protected API
All the previous profiles talk about how to get an access token. Once you have the access 
token, the rest of the flow is independent of the WRAP profile. The following cURL 
command shows how to access a WRAP-protected resource or an API, and it must 
happen over TLS:
\> curl –H "Authorization: WRAP
         access_token=cac93e1d29e45bf6d84073dbfb460"
         https://localhost:8080/recipe
 WRAP to OAuth 2.0
OAuth WRAP was able to sort out many of the limitations and drawbacks found in OAuth 
1.0: primarily, extensibility. OAuth 1.0 is a concrete protocol for identity delegation that 
has its roots in Flickr Authentication, Google AuthSub, and Yahoo! BBAuth. Another 
key difference between OAuth 1.0 and WRAP is the dependency on signatures: OAuth 
WRAP eliminated the need for signatures and mandated using TLS for all types of 
communications. 
OAuth 2.0 is a big step forward from OAuth WRAP. It further improved the 
extensibility features introduced in OAuth WRAP and introduced two major extension 
points: grant types and token types.
APPendix B  OAuTH 1.0
355
© Prabath Siriwardena 2020 
P. Siriwardena, Advanced API Security, https://doi.org/10.1007/978-1-4842-2050-4_18
APPENDIX C
How Transport Layer 
Security Works?
After the exposure of certain secret operations carried out by the National Security 
Agency (NSA) of the United States, by its former contractor, Edward Snowden, most of the 
governments, corporations, and even individuals started to think more about security. 
Edward Snowden is a traitor for some while a whistle-blower for others. The Washington 
Post newspaper published details from a document revealed by Edward Snowden 
on October 30, 2013. This was a disturbing news for two Silicon Valley tech giants, 
Google and Yahoo!. This highly confidential document revealed how NSA intercepted 
communication links between data centers of Google and Yahoo! to carry out a massive 
surveillance on its hundreds of millions of users. Further, according to the document, 
NSA sends millions of records every day from the Yahoo! and Google internal networks 
to data warehouses at the agency’s headquarters in Fort Meade, Md. After that, field 
collectors process these data records to extract out metadata, which indicate who sent or 
received emails and when, as well as the content such as text, audio, and video.1
How is this possible? How come an intruder (in this case, it’s the government) 
intercepts the communication channels between two data centers and gets access to 
the data? Even though Google used a secured communication channel from the user’s 
browser to the Google front-end servers, from there onward, and between the data 
centers, the communication was in cleartext. As a response to this incident, Google 
started securing all its communication links between data centers with encryption. 
Transport Layer Security (TLS) plays a major role in securing data transferred over 
1 NSA infiltrates links to Yahoo, Google data centers worldwide, Snowden documents say,  
www.washingtonpost.com/world/national-security/nsa-infiltrates-links-to-yahoo-
google-data-centers-worldwide-snowden-documents-say/2013/10/30/e51d661e-4166-11e3-
8b74-d89d714ca4dd_story.html
356
communication links. In fact, Google is one of the first out of all tech giants to realize 
the value of TLS. Google made TLS the default setting in Gmail in January 2010 to 
secure all Gmail communications and four months later introduced an encrypted 
search service located at https://encrypted.google.com. In October 2011, Google 
further enhanced its encrypted search and made google.com available on HTTPS, and 
all Google search queries and the result pages were delivered over HTTPS. HTTPS is in 
fact the HTTP over TLS.
In addition to establishing a protected communication channel between the client 
and the server, TLS also allows both the parties to identify each other. In the most 
popular form of TLS, which everyone knows and uses in day-to-day life on the Internet, 
only the server authenticates to the client—this is also known as one-way TLS. In other 
words, the client can identify exactly the server it communicates with. This is done by 
observing and matching the server’s certificate with the server URL, which the user hits 
on the browser. As we proceed in this appendix, we will further discuss how exactly this 
is done in detail. In contrast to one-way TLS, mutual authentication identifies both the 
parties—the client and the server. The client knows exactly the server it communicates 
with, and the server knows who the client is.
 The Evolution of Transport Layer Security (TLS)
TLS has its roots in SSL (Secure Sockets Layer). Netscape Communications (then Mosaic 
Communications) introduced SSL in 1994 to build a secured channel between the 
Netscape browser and the web server it connects to. This was an important need at that 
time, just prior to the dot-com bubble.2 The SSL 1.0 specification was never released 
to the public, because it was heavily criticized for the weak cryptographic algorithms 
that were used. In February 1995, Netscape released the SSL 2.0 specification with 
many improvements.3 Most of its design was done by Kipp Hickman, with much less 
participation from the public community. Even though it had its own vulnerabilities, it 
2 Dot-com bubble refers to the rapid rise in equity markets fueled by investments in Internet-
based companies. During the dot-com bubble of the late 1990s, the value of equity markets grew 
exponentially, with the technology-dominated Nasdaq index rising from under 1,000 to 5,000 
between 1995 and 2000.
3 Adam Shostack, the well-known author of The New School of Information Security, provides an 
overview of SSL 2.0 at www.homeport.org/~adam/ssl.html
Appendix C  How TrAnsporT LAyer seCuriTy works?
357
earned the trust and respect of the public as a strong protocol. The very first deployment 
of SSL 2.0 was in Netscape Navigator 1.1. In late 1995, Ian Goldberg and David Wagner 
discovered a vulnerability in the random number generation logic in SSL 2.0.4 Mostly 
due to US export regulations, Netscape had to weaken its encryption scheme to use  
40-bit long keys. This limited all possible key combinations to a million million, which 
were tried by a set of researchers in 30 hours with many spare CPU cycles; they were able 
to recover the encrypted data.
SSL 2.0 was completely under the control of Netscape and was developed with 
no or minimal inputs from others. This encouraged many other vendors including 
Microsoft to come up with their own security implementations. As a result, Microsoft 
developed its own variant of SSL in 1995, called Private Communication Technology 
(PCT).5 PCT fixed many security vulnerabilities uncovered in SSL 2.0 and simplified 
the SSL handshake with fewer round trips required in establishing a connection. 
Among the differences between SSL 2.0 and PCT, the non-encrypted operational mode 
introduced in PCT was quite prominent. With non-encrypted operational mode, PCT 
only provides authentication—no data encryption. As discussed before, due to the 
US export regulation laws, SSL 2.0 had to use weak cryptographic keys for encryption. 
Even though the regulations did not mandate to use weak cryptographic keys for 
authentication, SSL 2.0 used the same weak cryptographic keys used for encryption, also 
for authentication. PCT fixed this limitation in SSL 2.0 by introducing a separate strong 
key for authentication.
Netscape released SSL 3.0 in 1996 having Paul Kocher as the key architect. This was 
after an attempt to introduce SSL 2.1 as a fix for the SSL 2.0. But it never went pass the 
draft stage, and Netscape decided it was the time to design everything from ground up. 
In fact, Netscape hired Paul Kocher to work with its own Phil Karlton and Allan Freier to 
build SSL 3.0 from scratch. SSL 3.0 introduced a new specification language as well as a 
new record type and a new data encoding technique, which made it incompatible with 
the SSL 2.0. It fixed issues in its predecessor, introduced due to MD5 hashing. The new 
version used a combination of the MD5 and SHA-1 algorithms to build a hybrid hash. 
SSL 3.0 was the most stable of all. Even some of the issues found in Microsoft PCT were 
fixed in SSL 3.0, and it further added a set of new features that were not in PCT. In 1996, 
4 Ian Goldberg and David Wagner, “Randomness and the Netscape Browser: How Secure Is the 
World Wide Web?” www.cs.berkeley.edu/~daw/papers/ddj-netscape.html, January 1996.
5 Microsoft proposed PCT to the IETF in October 1995: http://tools.ietf.org/html/draft-
benaloh-pct-00. This was later superseded by SSL 3.0 and TLS.
Appendix C  How TrAnsporT LAyer seCuriTy works?
358
Microsoft came up with a new proposal to merge SSL 3.0 and its own SSL variant PCT 2.0 
to build a new standard called Secure Transport Layer Protocol (STLP).6
Due to the interest shown by many vendors in solving the same problem in 
different ways, in 1996 the IETF initiated the Transport Layer Security working group 
to standardize all vendor-specific implementations. All the major vendors, including 
Netscape and Microsoft, met under the chairmanship of Bruce Schneier in a series of 
IETF meetings to decide the future of TLS. TLS 1.0 (RFC 2246) was the result; it was 
released by the IETF in January 1999. The differences between TLS 1.0 and SSL 3.0 aren’t 
dramatic, but they’re significant enough that TLS 1.0 and SSL 3.0 don’t interoperate. TLS 
1.0 was quite stable and stayed unchanged for seven years, until 2006. In April 2006, RFC 
4346 introduced TLS 1.1, which made few major changes to TLS 1.0. Two years later, RFC 
5246 introduced TLS 1.2, and in August 2018, almost 10 years after TLS 1.2, RFC 8446 
introduced TLS 1.3.
 Transmission Control Protocol (TCP)
Understanding how Transmission Control Protocol (TCP) works provides a good 
background to understand how TLS works. TCP is a layer of abstraction of a reliable 
network running over an unreliable channel. IP (Internet Protocol) provides host-to- 
host routing and addressing. TCP/IP is collectively known as the Internet Protocol Suite, 
which was initially proposed by Vint Cerf and Bob Kahn.7 The original proposal became 
the RFC 675 under the network working group of IETF in December 1974. After a series 
of refinements, the version 4 of this specification was published as two RFCs: RFC 791 
and RFC 793. The former talks about the Internet Protocol (IP), while the latter is about 
the Transmission Control Protocol (TCP).
The TCP/IP protocol suite presents a four-layered model for network communication 
as shown in Figure C-1. Each layer has its own responsibilities and communicates with 
each other using a well-defined interface. For example, the Hypertext Transfer Protocol 
(HTTP) is an application layer protocol, which is transport layer protocol agnostic. HTTP 
does not care how the packets are transported from one host to another. It can be over 
TCP or UDP (User Datagram Protocol), which are defined at the transport layer. But 
6 Microsoft Strawman Proposal for a Secure Transport Layer Protocol (“STLP”), http://cseweb.
ucsd.edu/~bsy/stlp.ps
7 A Protocol for Packet Network Intercommunication, www.cs.princeton.edu/courses/archive/
fall06/cos561/papers/cerf74.pdf
Appendix C  How TrAnsporT LAyer seCuriTy works?
359
in practice, most of the HTTP traffic goes over TCP. This is mostly due to the inherent 
characteristics of TCP. During the data transmission, TCP takes care of retransmission of 
lost data, ordered delivery of packets, congestion control and avoidance, data integrity, 
and many more. Almost all the HTTP traffic is benefitted from these characteristics of 
TCP. Neither the TCP nor the UDP takes care of how the Internet layer operates. The 
Internet Protocol (IP) functions at the Internet layer. Its responsibility is to provide a 
hardware-independent addressing scheme to the messages pass-through. Finally, it 
becomes the responsibility of the network access layer to transport the messages via the 
physical network. The network access layer interacts directly with the physical network 
and provides an addressing scheme to identify each device the messages pass through. 
The Ethernet protocol operates at the network access layer.
Our discussion from here onward focuses only on TCP, which operates at the 
transport layer. Any TCP connection bootstraps with a three-way handshake. In 
other words, TCP is a connection-oriented protocol, and the client has to establish a 
connection with the server prior to the data transmission. Before the data transmission 
begins between the client and the server, each party has to exchange with each other 
a set of parameters. These parameters include the starting packet sequence numbers 
and many other connection-specific parameters. The client initiates the TCP three- 
way handshake by sending a TCP packet to the server. This packet is known as the SYN 
packet. SYN is a flag set in the TCP packet. The SYN packet includes a randomly picked 
sequence number by the client, the source (client) port number, destination (server) 
port number, and many other fields as shown in Figure C-2. If you look closely at  
Figure C-2, you will notice that the source (client) IP address and the destination (server) 
IP address are outside the TCP packet and are included as part of the IP packet. As 
discussed before, IP operates at the network layer, and the IP addresses are defined to be 
hardware independent. Another important field here that requires our attention is the 
TCP Segment Len field. This field indicates the length of the application data this packet 
carries. For all the messages sent during the TCP three-way handshake, the value of the 
TCP Segment Len field will be zero, as no exchange has started yet.
Appendix C  How TrAnsporT LAyer seCuriTy works?
360
Once the server receives the initial message from the client, it too picks its own 
random sequence number and passes it back in the response to the client. This packet 
is known as the SYN ACK packet. The two main characteristics of TCP, error control 
(recover from lost packets) and ordered delivery, require each TCP packet to be 
identified uniquely. The exchange of sequence numbers between the client and the 
server helps to keep that promise. Once the packets are numbered, both sides of the 
communication channel know which packets get lost during the transmission and 
duplicate packets and how to order a set of packets, which are delivered in a random 
order. Figure C-3 shows a sample TCP SYN ACK packet captured by Wireshark. This 
includes the source (server) port, destination (client) port, server sequence number, and 
Figure C-2. TCP SYN packet captured by Wireshark, which is an open source 
packet analyzer
Figure C-1. TCP/IP stack: protocol layer
Appendix C  How TrAnsporT LAyer seCuriTy works?
361
the acknowledgement number. Adding one to the client sequence number found in the 
SYN packet derives the acknowledgement number. Since we are still in the three-way 
handshake, the value of the TCP Segment Len field is zero.
Figure C-3. TCP SYN ACK packet captured by Wireshark
Figure C-4. TCP ACK packet captured by Wireshark
To complete the handshake, the client will once again send a TCP packet to the 
server to acknowledge the SYN ACK packet it received from the server. This is known 
as the ACK packet. Figure C-4 shows a sample TCP ACK packet captured by Wireshark. 
This includes the source (client) port, destination (server) port, initial client sequence 
number + 1 as the new sequence number, and the acknowledgement number. 
Adding one to the server sequence number found in the SYN ACK packet derives the 
Appendix C  How TrAnsporT LAyer seCuriTy works?
362
acknowledgement number. Since we are still in the three-way handshake, the value of 
the TCP Segment Len field is zero.
Once the handshake is complete, the application data transmission between the 
client and the server can begin. The client sends the application data packets to the 
server immediately after it sends the ACK packet. The transport layer gets the application 
data from the application layer. Figure C-5 is a captured message from Wireshark, 
which shows the TCP packet corresponding to an HTTP GET request to download an 
image. The HTTP, which operates at the application layer, takes care of building the 
HTTP message with all relevant headers and passes it to the TCP at the transport layer. 
Whatever the data it receives from the application layer, the TCP encapsulates with its 
own headers and passes it through the rest of the layers in the TCP/IP stack. How TCP 
derives the sequence number for the first TCP packet, which carries the application data, 
is explained under the side bar “How does TCP sequence numbering work?” If you look 
closely at the value of the TCP Segment Len field in Figure C-5, you will notice that it is 
now set to a nonzero value.
Figure C-5. TCP packet corresponding to an HTTP GET request to download an 
image captured by Wireshark
Appendix C  How TrAnsporT LAyer seCuriTy works?
363
Once the application data transmission between the client and the server begins, 
the other should acknowledge each data packet sent by either party. As a response to the 
first TCP packet sent by the client, which carries application data, the server will respond 
with a TCP ACK packet, as shown in Figure C-6. How TCP derives the sequence number 
and the acknowledgement number for this TCP ACK packet is explained under the side 
bar “How does TCP sequence numbering work?”
Figure C-6. TCP ACK from the server to the client captured by Wireshark
HOW DOES TCP SEQUENCE NUMBERING WORK?
whenever either of the two parties at either end of the communication channel wants to send 
a message to the other, it sends a packet with the ACk flag as an acknowledgement to the  
last received sequence number from that party. if you look at the very first syn packet  
(Figure C-2) sent from the client to the server, it does not have an ACk flag, because prior to 
the syn packet, the client didn’t receive anything from the server. From there onward, every 
packet sent either by the server or the client has the ACk flag and the Acknowledgement 
Number field in the TCp packet.
in the syn ACk packet (Figure C-3) from the server to the client, the value of the 
Acknowledgement Number is derived by adding one to the sequence number of the last 
packet received by the server (from the client). in other words, the Acknowledgement Number 
field here, from the server to the client, represents the sequence number of the next expected 
packet. Also if you closely look at the TCp segment Len field in each TCp packet of the 
three- way handshake, the value of it is set to zero. even though we mentioned before that the 
Appendix C  How TrAnsporT LAyer seCuriTy works?
364
Acknowledgement Number field in syn ACk is derived by adding one to the sequence number 
found in the syn packet from the client, precisely what happens is the server adds 1 + the 
value of the TCp segment Len field from the client to the current sequence number to derive the 
value of the Acknowledgement Number field. The same applies to the ACk packet (Figure C-4)  
sent from the client to the server. Adding 1 + the value of the TCp segment Len field from 
the server to the sequence number of the last packet received by the client (from the server) 
derives the Acknowledgement Number field there. The value of the sequence number in the 
ACk packet is the same as the value of the Acknowledgement Number in the syn ACk packet 
from the server.
The client starts sending real application data only after the three-way handshake is 
completed. Figure C-5 shows the first TCp packet, which carries application data from the 
client to the server. if you look at the sequence number in that TCp packet, it’s the same from 
the previous packet (ACk packet as shown in Figure C-4) sent from the client to the server. 
After client sends the ACk packet to the server, it receives nothing from the server. That 
implies the server still expects a packet with a sequence number, which matches the value of 
the Acknowledgement Number in the last packet it sent to the client. if you look at Figure C-5, 
which is the first TCp packet with application data, the value of the TCp segment Len field 
is set to a nonzero value, and as per Figure C-6, which is the ACk to the first packet with the 
application data sent by the client, the value of Acknowledgement Number is set correctly to 
the value of the TCp segment Len field + 1 + the current sequence number from the client.
 How Transport Layer Security (TLS) Works
Transport Layer Security (TLS) protocol can be divided into two phases: the handshake 
and the data transfer. During the handshake phase, both the client and the server get 
to know about each other’s cryptographic capabilities and establish cryptographic keys 
to protect the data transfer. The data transfer happens at the end of the handshake. 
The data is broken down into a set of records, protected with the cryptographic keys 
established in the first phase, and transferred between the client and the server.  
Figure C-7 shows how TLS fits in between other transport and application layer 
protocols. TLS was initially designed to work on top of a reliable transport protocol like 
TCP (Transmission Control Protocol). However, TLS is also being used with unreliable 
transport layer protocols like UDP (User Datagram Protocol). The RFC 6347 defines the 
Appendix C  How TrAnsporT LAyer seCuriTy works?
365
Datagram Transport Layer Security (DTLS) 1.2, which is the TLS equivalent in the UDP 
world. The DTLS protocol is based on the TLS protocol and provides equivalent security 
guarantees. This chapter only focuses on TLS.
Figure C-7. TLS protocol layers
 Transport Layer Security (TLS) Handshake
Similar to the three-way TCP handshake (see Figure C-8), TLS too introduces its  
own handshake. The TLS handshake includes three subprotocols: the Handshake 
protocol, the Change Cipher Spec protocol, and the Alert protocol (see Figure C-7).  
The Handshake protocol is responsible for building an agreement between the 
client and the server on cryptographic keys to be used to protect the application 
data. Both the client and the server use the Change Cipher Spec protocol to indicate 