ID-Forward message again. This mechanism also ensures that the forwarder sends ID-
Evidence successfully and correctly. 
3.  ID-Request Message: Tolerate ID-Evidence message lost. The detector may not 
receive  ID-Evidence  messages  in  time  while  an  ID-Evidence  message  gets  lost  by 
262 
C.H. Tseng et al. 
some expected receivers but is received by the ID-Evidence’s owner.  In this situation, 
the ID-Evidence message’s owner will not send ID-Forward again; expected receivers 
have  to  broadcast  ID-Request  messages  to  request  that  the  forwarder  broadcast  the 
lost ID-Evidence message again.  
When a detector does not receive the expected ID-Evidence message in 4 seconds, 
the detector assumes that the required message is lost. After a random jitter time, the 
detector  broadcasts  an  ID-Request  message  to  request  that  the  forwarder  resend  the 
expected ID-Evidence message. In ID-Request message, the owner of ID-Evidence is 
called the destination, and the forwarder is one of the MPRs of the destination. An ID-
Request message may consist of several sets of the forwarder and the destination to 
aggregate requests. 
Also, while the detector detects a message inconsistency lasting over 4 seconds by 
C1  or  C3,  the  inconsistency  may  occur  due  to  ID-Evidence  message  lost.  So  the 
detector broadcasts ID-Request message to request the ID-Evidence message. These 
additional ID-Request messages can reduce false positives and delay detection . 
Similar  to  ID-Forward,  the  forwarder  who  receives  the  ID-Request  message 
broadcasts an ID-Evidence message for the requestor, the sender of the ID-Request. 
In  case  of  message  loss,  the  requestor  will  resend  the  ID-Request  again  if  the 
requestor  does  not  hear  the  expected  ID-Evidence  message  while  receiving  a  new 
outgoing Hello message.  In summary, ID-Request messages help detectors to prevent 
potential false positives due to ID-Evidence message loss. 
5.7   Thwarting Forged OLSR Messages Attacks 
Temporary  Inconsistency.  While  the  detector  detects  message  inconsistency  by 
detection  constraints,  the  inconsistency  may  occur  due  to  normal  node  mobility 
behavior. This kind of inconsistency is called Temporary Inconsistency (TI). It occurs 
when  a  node  encounters  a  lost  link  or  new  symmetric  link  as  the  node  moves.  The 
node uses its Hello message to announce the changes of link status periodically.  
A  node  reports  a  lost  link  by  its  two-second  periodical  Hello  message  while  the 
node does not hear from a symmetric neighbor in 6 seconds. Also, a node announces a 
new symmetric neighbor by its two-second periodical Hello message. Clearly, when a 
new  or  lost  link  occurs,  the  neighbors  of  a  changing  link  must  temporarily  declare 
inconsistent  neighbor  information  in  their  Hello  messages.  Thus,  temporary 
inconsistencies occur.  
Alarm  Thresholds  and  Detection  Latency.  Since  a  detector  detects  attacks  by 
detecting messages inconsistencies of its neighbors through the three constraints, the 
detectors  must  tolerate  T.I.  due  to  normal  mobility  behavior.  Otherwise,  T.I.  will 
result  in  significant  unnecessary  false  positives.  Thus,  while  a  detector  detect  a 
message  inconsistency,  the  detector  assumes  it  is  a  T.I.  unless  the  lasting  time  of 
inconsistency exceeds the alarm threshold. 
For  the  three  constraints,  a  detector  has  to  define  the  proper  alarm  thresholds, 
which are also the maximum T.I. lasting times. Message loss is the major factor for 
enlarged  ID-Evidence  message  waiting  time.  Also,  ID-Evidence  message  waiting 
time and lost link expire time are the two major factors for large T.I. lasting time. The 
alarm thresholds must consider these factors. The threshold is 16 seconds in C1 and 
15 seconds in C3 in the experiment.  
DEMEM: Distributed Evidence-Driven Message Exchange Intrusion Detection 
263 
For  C2,  the  Validation  Manager  waits  for  the  related  ID-Evidence  message  to 
calculate the 2-hop neighbor list of the validated neighbor. C2’s alarm threshold is 0 
because  ID-Evidence  message  waiting  time  has  counted  T.I.  lasting  time.  Thus, 
detection latency of C2 results from ID-Evidence message waiting time, and detection 
latency of C1 and C3 results from lasting T.I. time. 
Automatic  Attack  Recovery.    When  a  detector  detects  an  abnormal  message 
inconsistency,  the  detector  remarks  the  link  involving  the  inconsistency  as  a  forge 
link.  Tthe  detector  removes  the  forged  link  in  its  evidence  record  and  corrects  the 
forged  message  before  passing  the  message  to  the  OLSR  layer.  Because  OLSR 
messages are broadcast messages, all of the neighbors of malicious node receive the 
forged message. They should detect and correct the forge message at about the same 
time, except in cases of serious message loss or collisions. Then, the neighbors will 
broadcast the correct messages to overwrite old forged messages that are sent during 
the  temporary  inconsistency  lasting  time.  Thus,  the  messages  correct  the  routing 
tables corrupted by the forged message and recover the attack. In 7.2, we will discuss 
how to deal with the attacker furthermore. 
6   Simulation 
GloMoSim  is  a  clean,  effective,  and  scalable  experimental  simulation  platform 
designed  for  MANET  that  supports  802.11  and  the  Ground  Reflection  (Two-Ray) 
Model. This  radio  model  has  both  a  direct  path  and  a  ground  reflected  propagation 
path between transmitter and receiver. The radio range is about 377 meters calculated 
with  the  following  parameters[20]—  antenna  height  150cm,  transmission  power 
15dBm, antenna gain 0, sensitivity -91 dBm, receiving threshold -81 dBm. Nodes are 
randomly placed in the equally divided cells in the field. Total simulation time is 600 
seconds.  
First, we will demonstrate how DEMEM detects OLSR routing attacks through an 
example scenario, a stable topology consisting of 10 nodes in a 1km  x 1km region. 
Second,  we  will  evaluate  DEMEM  in  OLSR  in  both  stable  and  mobile  topologies 
through  performance  metrics:  ID  Message  overhead,  Detection  accuracy,  and 
Detection latency. In mobile topology, the metrics show that DEMEM in OLSR has 
low message overhead, low false positives, no false negatives, low detection latency 
under  message  loss  situations,  and  high  degree  mobility.  In  stable  topology,  the 
results are even better: the message overhead and detection latency is much less, and 
there is no false positive or negative. 
6.1   Example Scenario  
Fig.  8  shows  an  example  scenario  with  a  stable  10  node  OLSR  topology  and  a 
continuous  bi-directional  TCP  traffic  between  node  8  and  3.  In  the  beginning,  the 
route between 8 and 3 is 84523. First, we demonstrate an example of 
the  Man-In-the-Middle  attack.  Second,  we  illustrate  how  detectors  residing  at  the 
neighbors of attackers detect the attack. 
264 
C.H. Tseng et al. 
Example Man-In-the-Middle Attack. The attacker, node 6, is going to hijack the 
route,  changing  it  to  89673.  To  launch  the  attack,  the  attacker  
utilizes attack methods 1 and 3 in 5.1 to create the virtual links. Then, the attacker 
can  use  the  virtual  links  to  lure  nodes 8 and 3  to  change  the  route  as  the attacker 
expects.  
The attacker  uses  attack  method  1:  forge  its  neighbor  list  in  its  Hello  message. 
Node  6  adds  node  3  and  8  in  its  1-hop  neighbor  list  and  broadcasts  its  Hello 
message with this new forged neighbor list. Also, the attacker uses attack method 3: 
forge its MPR selector set in its TC messages. Node 6 adds node 3 and 8 in its MPR 
selector set, and broadcasts its TC messages with this new forged new MPR selector 
set. By the forged Hello and TC message, the attacker creates the virtual links, 6->8 
and 6->3. 
8
9 
Hello (6) = {1,5,7,9,3,8}
TC (6) = {1,5,7,9,3,8} 
6
4 
0 
5 
1 
2 
Fig. 8. Example attack scenario 
7 
3
The attacker uses the virtual link 6->3 to lure node 8 and 9 to change the route to 
be  8  9673  instead  of  84523.  While  node  8  receives  the 
forged TC message of node 6, node 8 believes that node 6 is the last hop to node 3. 
Then node 8 computes the new route, 8->9->6->3 and chooses the new route (3 hop) 
instead of the original one (4 hops). So node 8 sends the packets to node 9 toward 3. 
Note that node 8 does not receive the forged Hello message from node 6; node 8 does 
not choose node 6 as the next hop toward node 3.  
Also,  node  9  knows  that  node  3  is  the  neighbor  of  node  6  from  the  new  forged 
Hello message. Then node 9 believes node 6 is the best next hop to node 3 and sends 
the packets from node 8 to node 6. Thus, the attacker successfully attracts the packets 
from node 8 toward 3, sending it to the attacker itself and using node 7 to finish the 
new route. 
Similarly, the attacker uses the virtual link 6-8 to lure node 3 and 7 to change the 
route to 3->7->6->9->8 instead of 3->2->5->4->8. Therefore, the attacker successful 
changes  the  bi-directional  route,  and  the  attack  is  complete.  Note  that  the  forged 
messages are almost normal OLSR messages except for the forged content. Since the 
originator of the messages forges its neighbor information, only the related neighbors 
can be aware of the forged messages. 
DEMEM: Distributed Evidence-Driven Message Exchange Intrusion Detection 
265 
Detecting  the  attack.  While  the  neighbors  of  node  6,  node  1,5,7,9,  receive  the 
forged  messages,  the  detectors  residing  on  the  neighbors  can  detect  the  forged 
messages from the attacker, node 6. For node 9, because they have the neighbor list 
of node 8 from the Hello message directly, node 9 knows that node 8 does not agree 
that node 6 is node 8’s neighbor. So node 6 should not claim node 8 as its neighbor 
because the neighboring record will expire in 6 seconds. Thus, the detector at node 
9 determines that node 6’s Hello message violates C1 against node 8. In its Hello 
message,  8  does  not  claim  node  6  as  its  MPR,  and  thus  node  6’s  TC  message 
violates C3 against node 8.  
However, node 9 does not have the Hello message of node 3. Node 9 sends an ID-
Request to ask node 6 to send an ID-Evidence message of node 3 because node 6 is 
the only node can reach node 3 from node 9 according to the Hello message of node 
6.  Although  node  6  can  have  ID-Evidence  message  of  node  3  from  node  7,  node  6 
cannot forge the message by adding itself into the 1-hop neighbor list and MPR set of 
the  message  because  of  authentication  protection.    So  node  9  cannot  have  ID-
Evidence message having node 6 in the 1-hop neighbor list MPR set of the message. 
Thus,  node  9  determines  that  node  6’s  Hello  and  TC  message  violates  C1  and  C3 
against node 3. 
Similarly, the detectors of node 1,5,7 detect that node 6’s Hello and TC messages 
violate C1 and C3 against nodes 3 and 8. So the detectors of node 1,5,7,9 correct their 
evidence tables and the forged messages before their OLSR layers can process them. 
Since  the  OLSR  layers  of  the  attacker’s  neighbors  have  the  correct  messages,  the 
OLSR layers have correct topology and routing tables to send the new correct OLSR 
messages. For example, node 9 does not count node 6 as the neighbor of node 3 and 
sends the correct TC message of node 6, which does not contains nodes 3 or 8. After 
node 8 receives the corrected TC message from node 9, node 8 does not counts node 6 
as  last  hop  to  node  3  and  chooses  the  original  route,  8-4-5-2-3.  Thus,  the  hijacked 
route becomes the original route and is recovered. 
6.2   Performance Evaluation 
Because mobility results are the major factors of message loss and lost links, which 
significantly  affect  the  three  performance  metrics,  it  is  challenging  to  have  good 
results  in  mobile  topologies,  especially  with  high  degree  mobility.  We  will  discuss 
performance metrics in mobile topologies and the better results in stable topologies. 
Since  background  end  to  end  traffic  has  little  impact  on  performance,  we  will  not 
discuss it here. 
A.  Mobile  Topology.  Mobile  nodes  follow  the  Random  Waypoint  Mobility  Model 
with random speed up to 20 m/s (45 mile/hr) with no pause time. Network topologies 
consist of four types of topologies: (1) 10 nodes in 1km x 1km, (2) 50 nodes in 1.5km 
x 1.5km, (3) 100 nodes in 2km x 2km, (4)150 nodes in 2.5km x 2.5km. For each type 
of topology, the simulation has run 50 times: five different kinds of node allocations 
and 10 different set of mobility degrees: 0, 30, 60, 120, 300 seconds pause time, and 
0-10, 1-20 m/s node speed. 
266 
C.H. Tseng et al. 
Fig. 9. Message Overhead vs. Scalability               Fig. 10. Message Overhead vs. Mobility 
Fig. 11. Max and Ave lasting T.I. time               Fig. 12. ID-Evidence Message waiting time 
1.  Message  Overhead.  ID-Evidence  message  is  the  main  source  of  message 
overhead. The ratio of  message overhead  for ID-Evidence, ID-Forward, ID-Request 
message  in  average  is  85%,  12.5%,  2.5%  in  size  and  58%,  39%,  3%  in  frequency. 
ID
-
Evidence
Message overhead formula is:  
-
+
ID 
Hello
Forward
TC
+
+
ID 
-
Request
In  general,  message  overhead  is  between  2  and  30%.  Fig.  9  shows  that  message 
overhead  decreases  as  the  number  of  nodes  increases.  The  main  reason  is  the 
frequency  of  ID-Evidence  messages,  which  is  the  majority  of  messaged  overhead, 
does  not  increase  as  much  as  Hello  and  TC  messages  while  number  of  nodes 
increases. Thus, DEMEM is more scalable than OLSR because of its local message 
exchanging behavior.  
If  mobility  degree  decreases,  it  may  impact  overhead  ratio.  Fig.  10  shows  the 
impact  of  node  speed  for  the  message  overhead  in  a  10  nodes  topology.  When 
maximum  node  speed  decreases  by  half,  then  the  overhead  also  decreases  by  half. 
However, if pause time increases by 30, 60, 120, or 300 seconds, then the overhead 
decreases  only  slightly.  Thus,  increased  node  speed  may  cause  more  topology 
changes, resulting in more message overhead to confront these changes.  
2.  Detection  Accuracy.  Considering  T.I.,  when  the  detector  first  detects  message 
inconsistencies for C1 and C3, about half of these inconsistencies will still occur in 