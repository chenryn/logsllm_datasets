same bandwidth class as the old reservation, simultaneous use
of old and new RTs is detected by the per-class monitoring
mechanism (as described above) since the usage is jointly
accounted under the same ﬂow ID.
We now consider the case when the renewed bandwidth
class is different from the old one. The edge AS performs per-
ﬂow stateful inspection and is supposed to ﬁlter out trafﬁc
that violates the sending rule. Therefore, the edge AS can
be held accountable by other ASes for improperly ﬁltering
trafﬁc. In transit ASes, however, we propose a probabilistic
approach for catching this type of misbehavior. ASes maintain
one Bloom ﬁlter [10] per currently active expiration time and
per bandwidth class. Since an RT is maximally valid for 16
seconds and the time granularity is 4 seconds, 4 Bloom ﬁlters
are needed per bandwidth class, to record ﬂow IDs that use the
bandwidth class within that time period. We will discuss the
details about time discretization in SIBRA in Section IV-A. For
an incoming packet with a reservation in a monitored class C,
ASes simply store the tuple (cid:104)ﬂow ID,reservation index(cid:105) in the
Bloom ﬁlter of class C. By probabilistically inspecting some
of these Bloom ﬁlters, each AS notices whether a ﬂow ID uses
two different bandwidth classes during a time period.
We further optimize the monitoring algorithm as follows.
SIBRA selects a small number of classes to monitor at a given
moment in time, therefore ASes store Bloom ﬁlters only for
the few monitored trafﬁc classes. In addition, SIBRA does
AS 1AS 2AS 3AS 4Reservation/Sending: 5/8 MbpsReservation/Sending: 5/2 MbpsAS 0<ow 1<ow 2not investigate all Bloom ﬁlters: We observe that, when the
renewed bandwidth is much higher or much lower than the
previous bandwidth, using both the old and new reservations
would incur an insigniﬁcant bandwidth overuse. Therefore, if a
certain reservation index is used in class C, SIBRA investigates
only the Bloom ﬁlters of the classes whose bandwidth values
are comparable to C’s bandwidth (the comparability of classes
is discussed in Section IV-A). SIBRA investigates whether in
these Bloom ﬁlters an index reservation index + i is present,
where i∈{0,1, . . . ,15} chosen randomly (i = 0 detects whether
the end host maliciously reuses the same reservation index).
If found, ASes increment a violation counter for the source
of that ﬂow ID. The violation counter allows for Bloom ﬁlter
false positives. When the violation counter exceeds a threshold,
an alarm is raised for that sender. Therefore, the more packets
an attacker sends, the higher the probability of detection. The
policing push back technique can then localize the source AS
of the misbehaving ﬂow.
G. Dealing with failures
While bandwidth guarantees along ﬁxed network paths allow
for a scalable design, link failures can still disrupt these paths
and thus render the reservations futile. In fact,
leaf ASes
and end hosts are rather interested in obtaining a bandwidth
guarantee than obtaining a speciﬁc network path for their
trafﬁc.
SIBRA deals with link failures using two mechanisms:
(1) a failure detection technique to remove reservations along
faulty paths, and (2) a failure tolerance technique to provide
guarantees in the presence of failures. For (1), SIBRA uses
short expiration times for reservations and keep-alive mecha-
nisms. Steady paths expire within 3 minutes of creation, but
leaf ASes can extend the steady paths’ lifetime using keep-
alive messages. Ephemeral paths have a default lifetime of 16
seconds, which can be extended by source end hosts through
renewals. Unless keep-alive messages or renewals are used,
reservations are removed from the system within their default
expiration time. By construction, a new reservation cannot be
created on top of faulty paths. For (2), SIBRA allows leaf ASes
to register multiple disjoint steady paths. We also envision
source end hosts being able to choose a bandwidth reservation
service with high reliability, which would use a small number
of disjoint ephemeral paths to the same destination.
H. Dynamic Interdomain Leased Lines
Businesses use leased lines to achieve highly reliable commu-
nication links. ISPs implement leased lines virtually through
reserved resources on existing networks, or physically through
dedicated network links. Leased lines are very costly, can
require weeks to be set up, and are challenging to establish
across several ISPs.
A natural desire is to achieve properties similar
to
traditional
leased lines, but more efﬁciently. GEANT of-
fers a service called “Bandwidth-On-Demand” (BoD), which
is implemented through the InterDomain Controller Proto-
col [1] to perform resource allocations across the participating
providers [14]. Although BoD is a promising step, the alloca-
tions are still heavy-weight and require per-ﬂow state.
With SIBRA’s properties, ISPs can offer lightweight Dy-
namic Interdomain Leased Lines (DILLs). A DILL can be
composed by two longer-lived steady paths, connected through
a core path, or dynamically set up with an ephemeral path that
is constantly renewed. Thanks to the lightweight operation of
SIBRA, DILLs can be set up with an RTT setup message
and are immediately usable. Our discussions with operators of
availability-critical services have shown that the DILL model
has sparked high interest among operators.
To enable long-term DILLs, valid on the order of weeks,
the concept of ephemeral paths in SIBRA could be reframed:
long-term DILLs could use the same techniques for monitoring
and policing as ephemeral paths, however, they would also
introduce new challenges. To enable long-term DILLs, ISPs
need to ensure bandwidth availability even when DILLs are not
actively used, as opposed to ephemeral bandwidth, which can
be temporarily used by best-effort ﬂows. For this purpose, ISPs
could allocate a percentage of their link bandwidth for DILLs,
besides steady, ephemeral, and best-effort paths. Additionally,
for availability in the face of link failures, ISPs would need
to consider active failover mechanisms. For instance, in archi-
tectures that provide path choice, ISPs could leverage disjoint
multipath reservations concentrated in a highly available DILL.
A detailed design though is out of scope for this paper.
IV.
IMPLEMENTATION
We present the implementation of senders and routers to launch
a reservation request and to use a reservation. We rely on
efﬁcient data structures and algorithms that enable fastpath
processing in the common case and explain the infrequent
operations when SIBRA needs slowpath processing.
A. Bandwidth reservation setup
Sender implementation. A reservation request initiator spec-
iﬁes the following conﬁguration parameters: a ﬂow ID (128
bits), a reservation expiration time (16 bits), bandwidth classes
for forward and/or reverse directions (5 bits each), a path
direction type (2 bits), and a reservation index (4 bits). SIBRA
considers time at a granularity of 4 seconds (which we call
SIBRA seconds). By default, steady paths thus have an initial
lifetime of 45 SIBRA seconds, and ephemeral paths of 4
SIBRA seconds; nevertheless, these paths can be renewed at
any time. All reservations start at the request time.
We chose SIBRA’s bandwidth classes to cover a meaning-
√
ful range for steady and ephemeral trafﬁc: there are 12 steady
bandwidth classes according to the formula 16 ·
2i kbps,
where i ∈ {0,1, . . . ,11}, ranging from 16 kbps to ∼724 kbps;
√
and 20 ephemeral bandwidth classes according to the for-
mula 256 ·
2i kbps, where i ∈ {0,1, . . . ,19}, ranging from
256 kbps to ∼185 Mbps. The exponential growth allows for
a ﬁne-grained allocation of smaller bandwidth values, but
more coarse-grained allocation of larger bandwidth values.
Additionally, it enables efﬁcient monitoring of ﬂow renewals,
with a small number of classes having comparable bandwidth.
indicates, for a
(cid:104)requester,destination(cid:105) pair, either a uni-directional reserva-
tion, for trafﬁc either sent or received by the requester; or
bi-directional, for trafﬁc sent and received by the requester.
The reservation index is a number speciﬁc to a ﬂow, incre-
mented every time the reservation corresponding to the ﬂow
is renewed.
Bandwidth reservation and accounting. To efﬁciently man-
age and account for bandwidth reservations, SIBRA routers
The path direction type is a ﬂag that
8
maintain the following data structures: (1) a bandwidth table,
i.e., an array of size k storing the currently reserved bandwidth
for each of the router’s k neighbors; (2) an accounting table,
i.e., a table with tuples containing the ﬂow ID of a reservation,
the expiration time, the bandwidth class, and the neighbor
to/from whom the reservation is speciﬁed; (3) a pending table,
i.e., a table (of similar structure as the accounting table) that
stores pending reservations. A reservation is said to be pending
if it has been requested, but not used for data transmission. A
reservation with ﬂow ID i is said to be active when data has
been transmitted using i, i.e., the router has seen i in a data
packet. A reservation for i is said to be expired if the router
has not seen packets containing i within a time frame of (cid:96)
SIBRA seconds (details below).
To decide whether a requested amount bwr can be reserved,
routers perform admission control by comparing bwr with the
entry in the bandwidth table for the speciﬁed neighbor.6 In
case sufﬁcient bandwidth is available, the request’s ﬂow ID,
the expiration time, the request’s bandwidth class, and the
neighbor are added to the pending table. The requested amount
bwr is also added to the respective entry in the bandwidth table.
Yet, at this point, the router does not add information about the
request to the accounting table. The reason is that the request
may fail at a later point, in which case the accounting table
update would have to be reverted. In a periodic background
process, the router checks whether there are entries in the
pending table older than 300 milliseconds (sufﬁcient to allow
for an Internet round trip time7). Such entries are considered
failed reservations, and thus they are deleted from the pending
table and the corresponding reserved bandwidth is freed and
updated in the bandwidth table.
If the router sees a data packet with ﬂow ID i for the ﬁrst
time, it implies that the reservation for ﬂow ID i was accepted
by all routers on the path. The reservation becomes active and
the entry with ﬂow ID i is then removed from the pending
table and added to the accounting table.
To periodically reclaim unused ephemeral bandwidth of
expired reservations, a router periodically removes the amount
of expired bandwidth from the bandwidth table. The expiration
parameter (cid:96) (e.g., 1 ≤ (cid:96) ≤ 5) speciﬁes the lifetime (in SIBRA
seconds) of pending reservations. In order to keep reservations
active (even if no data is transmitted), a source simply sends
a keep-alive message within (cid:96) SIBRA seconds. In a periodic
background process, the router then iterates over the account-
ing table’s entries that correspond to the last (cid:96) SIBRA seconds.
More speciﬁcally, the router checks whether the listed ﬂow
IDs occur in a Bloom ﬁlter that is ﬁlled while forwarding
data packets: to enable fastpath operation, the ﬂow ID of each
incoming data packet is stored in a Bloom ﬁlter, not in the
accounting table. Bandwidth reclaim is then processed in the
slowpath.
Intermediate AS implementation. The MAC operation of
RTs are implemented using CBC-MAC based on AES. Our
AES implementation uses AESni [16], a fast instruction set
available on Intel and AMD CPUs, which requires only 4.15
6The reason for considering only the current amount of available band-
width when making the admission decision is justiﬁed by the monotonicity of
reservations: reservations can never be set up to start in the future, hence, in
the next SIBRA second, there cannot be less bandwidth available than in the
current SIBRA second (unless new reservations are requested).
7http://www.caida.org/research/performance/rtt/walrus0202
cycles per byte to encrypt a 1 kB buffer in CBC mode. The
key necessary for the MAC operation is expanded once at the
AS and then used for all RTs generated by that AS. SIBRA
uses 32 bits for MACs, which constitutes an optimization, yet
provides sufﬁcient security: a forgery will be detected with
probability 1− 2−32.
During a reservation request, the header for the positive ad-
mission of a ﬂow contains the request conﬁguration values set
by the sender and the list of RTs generated so far. A ﬁeld Hops
is used to locate the correct offset for a newly generated RT.
In addition, a ﬁeld Extension Flag indicates the request
path type (bi-/uni-directional), the request status (successful or
failed), and whether the packet carries a reservation request or
a reservation conﬁrmation.
When a request does not pass the admission control, then
the corresponding router sets the extension ﬂag to failed, marks
its own AS in the Decline AS* ﬁeld, and resets Hops to
zero. Starting with this AS, every subsequent AS on the path
towards destination adds a Bandwidth Offer ﬁeld with the
offered bandwidth.
We implemented SIBRA on top of a SCION-enabled
network, which provides path control. Our SIBRA implemen-
tation provides end-host support through a SIBRA-enabled
gateway, which contains modules for reservation requests and
their conﬁrmation, SCION encapsulation, decapsulation, and a
trafﬁc hijacking module. The last element is implemented via
NetFilter Queue [41], and it allows to tunnel legacy IP trafﬁc
to a remote host through the SIBRA-enabled SCION network.
Such a design provides SIBRA’s beneﬁts to legacy software,
as well as facilitates SIBRA’s deployment.
The SIBRA packet header contains SCION-relevant infor-
mation, such as src/dst addresses, forwarding path as opaque
ﬁelds (OFs), the current OF/RT indicator, and an optional
extension ﬁeld in which SIBRA’s reservation request messages
are encoded. We implemented SIBRA in SCION using exten-
sion headers.
V. EVALUATION
A. Processing on router
to the processing
We ﬁrst evaluated SIBRA with respect