from the nameserver of vict.im and calculates the offset where
the fragmentation should occur. The MTU in the ICMP fragmenta-
tion needed error message is set accordingly. The goal is to ensure
that the records, which it will replace with spoofed records, are in
second fragment.
The attack proceeds as illustrated in Figure 2. In step (1) the
attacker sends to the victim DNS resolver a spoofed second frag-
ment (see spoofed second fragment illustrated in Figure 6). The
fragment is cached by the receiving resolver in the IP defragmenta-
tion cache waiting for the remaining fragments to arrive. In step (2)
the attacker uploads a CSR form requesting certification for domain
vict.im. The attacker selects an email based DV, hence in step
(3) the DNS resolver at the CA issues a DNS request to the name-
server of vict.im domain asking for an IP address of the email
server mail.vict.im. The attacker issues an ICMP fragmentation
needed packet in step (4) to ensure that the response is fragmented;
this ICMP error message can be issued also before step (3). In step
(5) the nameserver of vict.im sends a fragmented DNS response.
The first fragment contains the entropy (resolver’s source port and
TXID are copied by the nameserver to the response) and some of
the DNS payload, such as the question section, answer section, and
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2065probably part of the authoritative section (see first fragment in
Figure 7). Some of the records from the authoritative section (or
the complete authoritative section) as well as the additional section
are in the second fragment. The first fragment is then reassembled
with the spoofed second fragment that was already in the cache
of the DNS resolver; they both leave the cache, and are passed on
to the UDP layer. The legitimate second fragment will not have
any first fragment to reassemble with, since when it arrives the
legitimate first fragment have already been reassembled with the
spoofed second fragment and left the buffer. The remaining steps
(6)-(8) complete the DV process.
Notice that in step (1) when sending the spoofed fragment the
attacker needs to ensure the correctness of UDP checksum and IP
ID. In what follows we describe both challenges and explain how
we ensure them.
3.2.5 UDP Checksum. The method to calculate UDP checksum
is defined in [RFC768]. The UDP checksum is calculated as the 16-bit
one’s complement of the one’s complement sum of the fields in IP
header, the UDP header and the UDP payload. The UDP checksum
value is stored in the UDP header. Upon receipt of a UDP packet the
receiver calculates the UDP checksum (using the same procedure as
the sender did) and then compares whether it is the same value as
in UDP header. If the value differs - the UDP datagram is discarded.
If the checksum in the second spoofed fragment is not adjusted,
When the spoofed second fragment is reassembled with the first real
fragment, the overall value of the UDP checksum of both fragments
is altered, and will differ from the UDP checksum value in the
UDP header. Specifically, the spoofed second fragment contains
different records than the real second fragment. Hence, the attacker
needs to adjust the UDP checksum of the second fragment such that
the computation of the UDP checksum using the payload in both
fragments remains similar to the original value of UDP checksum
in the UDP header.
The attacker can ensure this as follows: the attacker sends a
request to the nameserver and receives a response in two fragments
(possibly using the ICMP fragmentation needed packet to enforce
fragmentation). The attacker calculates the UDP checksum value of
the second fragment, then alters the second fragment and calculates
the checksum of the altered second fragment. The difference value
in the checksum of both second fragments the attacker needs to add
(or remove) by altering two bytes (in even location) in the altered
second fragment. This is a simple computation since the attacker
knows the original value, and knows what bytes were modified, it
can efficiently compute the difference and add (or remove) it to the
value of UDP checksum of second fragment.
To adjust the value of two bytes the attacker can either modify
two bytes in any record in the second altered fragment, or can add
the two bytes at the end, after the EDNS [RFC6891] record (in this
case the DNS software will ignore these two bytes but they will be
included in the UDP checksum computation).
3.2.6
IP ID. The spoofed second fragment should contain the
correct IP ID value – the same value as the original IP packet sent
by the nameserver. The attacker must predict this value correctly,
otherwise, when the first fragment and the spoofed second fragment
have different IP ID values, the receiving OS will not reassemble
them together.
Predicting the IP ID value can typically be done efficiently. There
are three IP ID assignment algorithms: sequentially incrementing
(the OS increments IP ID value by one for every sent packet), per-
destination sequentially incrementing (the OS increments IP ID
by one for every packet sent to a given destination), and random
[24, 41]. We describe the three cases below.
Sequentially Incrementing IP ID. More than 60% of 10K-top Alexa
domains use sequentially incrementing IP ID values assignment.
Windows operating systems use a sequentially incrementing IP ID.
The attacker samples the IP ID value from the nameserver and
samples the IP ID increase rate. Then the attacker calculates the
IP ID value that will be assigned at the time the nameserver sends
the DNS response to the victim DNS resolver. The attacker uses
this value in the second spoofed fragment. The attacker can also
send multiple fragments with different IP ID values to increase his
chances to hit the correct IP ID value.
Per-Destination IP ID. A bit less than 40% of the nameservers use
a per-destination incrementing IP ID. Linux versions are using a
per-destination incrementing IP ID assignment. Our attacker uses
the techniques presented in [41] for predicting the IP ID values.
Since this is not the focus of our work, we do not describe the
algorithm here and refer an interested reader to [24, 41] for details.
Random IP ID. Very few servers use random IP ID values, less
than 1%. The reason is the overhead that it introduces on the server.
Specifically, instead of maintaining a single counter (as in the case
of globally incrementing) or one counter per destination (in the case
of per destination incrementing IP ID), in this case the server has to
maintain multiple counters, and to continually check for collisions,
i.e., that it does not select an IP ID that was already allocated.
The success probability of the attack in case of a single fragment
is 1
216 . The attacker can increase its success probability by sending
multiple fragments, each with a different IP ID value. Assuming
an infinite size defragmentation cache, if the attacker sends 216
fragments, its success probability is 1. The existing OSes however
limit the number of fragments that can be sent, e.g., Windows to 100
fragments, recent Linux versions to 64 and older allow several thou-
sand fragments [37]. In Linux, the limit is set via ip_frag_max_dist
parameter.
3.3 Overwriting Cached Records
Defragmentation cache poisoning allows to bypass the challenge
response authentication as the entropy is in the first fragment and
the attacker injects payload into the second fragment. A successful
defragmentation cache poisoning allows to bypass the validation
of the OS and the packet is transferred on to the DNS software.
Now, the task is to ensure that the records (sent in the spoofed DNS
response) are cached and served in responses to applications and
clients. The problem is that often the records will already be present
in the cache. For instance, records of domains of interest or popular
domains, such as banks and social networks, are typically present
in caches. The resolvers will not necessarily overwrite the already
cached values, in fact, often they will silently ignore records for
which there are cached copies but with other values. This poses a
challenge - how to overwrite the already cached records with new
values?
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada2066The tricky part here is that different DNS software assign dif-
ferent trust ranks to DNS records and apply different logic when
overwriting the cached records with new values. The higher the
rank the more difficult it is to overwrite the cached record with a
new value. The ranking of DNS records is discussed in [RFC2181],
and these recommendations are interpreted and implemented in
each software differently. Since the records’ overwriting behaviour
is so different between the different DNS resolver software, it can
be used to fingerprint the software of the DNS cache.
To understand how to overwrite cached records with new values
we did a characterisation of DNS caches of CAs and modelled under
which conditions the caches replace copies of cached records with
new values. Our study builds on [40] which evaluated different
approaches for overwriting cached records. We next describe the
setup, the study and the results.
3.3.1
Setup. Based on a lab model of the caches’ overwriting
behaviour, we applied our study over the resolvers of CAs. We used
the vict.im domain and its subdomains for our study. The zone
file was configured with 6 nameservers each with an A record (IPv4
address) and AAAA record (IPv6 address), 3 MX records (incoming
email servers), and other records, such as DNS specific records (e.g.,
SOA) and anti-spam records (e.g., SPF). The study proceeded in a
black box manner - we cause the CAs to issue DNS requests for
records within vict.im and monitor requests that arrive to our
nameservers. We generate responses dynamically on the name-
server with program we built based on Stanford::DNSserver perl
library. We then use the monitored queries to characterise the
caches and to understand the overwriting behaviour.
In Appendix, in Figure 12 we recap a number of selected pay-
loads (see full list in [40]) of the DNS responses and the cached
records that they can overwrite, using records that are returned
in answer, authority and/or additional sections. Our measurement
of minimum MTU values in popular Alexa servers shows that the
responses can be often reduced to even 68 bytes. Furthermore, frag-
mentation at the boundaries of authority or additional sections is
common and can often be enforced.
In Figure 13 we recap the in-lab evaluation of selected payloads
(from [40]) against popular DNS resolvers’ software, appliances
and public services. The indexes in the leftmost column correspond
to indexes of the payloads in Figure 12. The values in cells indicate
whether the cache in column j is vulnerable to overwriting by
payload in row k: 0 means not vulnerable and 1 means vulnerable.
The evaluation indicates that all the resolvers that were tested,
except Unbound in hardened mode (which is resilient to all the
payloads), are vulnerable to at least one type of cache overwriting
payloads.
Caches’ Overwriting Study. For each CA, our study proceeds for
each payload pi in Figure 12 in three phases: (a) seed the honey
record, (b) overwrite the value of the honey record with a new
value, (c) probe the value of the honey record.
We first plant the honey record in the cache of the DNS resolver
of the CA. The honey record simulates a real value of our test do-
main vict.im. During phase (b) we attempt to overwrite the honey
record with a new value. During phase (c) we send a DNS request
for the honey record and check its value. If the value was modified
following step (b), we mark the cache as vulnerable to payload pi.
Next iteration, increment i and evaluate with new payload.
resolution platform.
Overwriting Vulnerabilities in CAs. We next list the CAs that
were found vulnerable to overwriting attacks. Within our study we
also identified CAs that share the same infrastructure (Email server
and caching DNS resolver) - we grouped those CAs below.
• COMODO, InstantSSL, NetworkSolutions, SSL.com: these CAs
use the same MX email server mcmail1.mcr.colo.comodo.net
which uses the same caching DNS resolver. The results from our
cache overwriting methods indicates that the DNS resolver software
is New BIND 9.x with DNSSEC-validation.
• Thawte, GeoTrust, RapidSSL: use the same MX server and
• StartCom4, StartSSL: both use the same email server and the
• SwissSign: uses New BIND 9.x.
Caches Overwriting Attacker. The study of caches overwriting is
performed with a man-in-the-middle (MitM) type attacker – in this
step we do not attempt to guess ports or TXID, just to characterise
the caches of the CAs. In particular, we observe the requests from
the caching DNS resolvers of the CAs and generate the responses
dynamically “on the fly” as a function of the requests and the pay-
loads in Figure 12. After characterising the caches of the CAs in this
model, we run the complete attack in an off-path attacker model in
Section 3.4.
same DNS resolver.
3.4 Evaluation of Attack Against CAs
3.4.1
Setup. We evaluated the attack (with the components in
Sections 3.1, 3.2 and 3.3) against the DNS resolvers of CAs (in Figure
1) using our own test domain vict.im. The nameservers hosting
the test domain were located on one network (belonging to Internet
Service Provider (ISP) A), while the attacking hosts were located on
a different network (belonging to ISP B). Our nameservers running
vict.im as well as its subdomains were set up with a globally
sequential IP ID allocation. The attacking hosts are configured with
a mapping of cache overwrite vulnerabilities per each CA on the
list. Namely, when running an attack against CA ω, the attacker
selects one of the payloads from the list 12 to which the caching
DNS resolver of ω is vulnerable, and uses it to generate the payload
of the spoofed second fragment. The attacking host queries the
nameserver for IP ID value ipid and uses it to calculate the IP ID
value that will be assigned to the response that we will be attacking
with a spoofed second fragment.
3.4.2
Issuing Spoofed Certificate. The attacking host initiates
the CSR process for victim domain vict.im (and its subdomains).
After submitting the CSR the attacker selects the DV method that
it wishes to pass (CAs typically support a number of DV methods,
see Figure 1). Since the attacker cannot control the timing when
the request is sent, it must periodically transmit spoofed second
fragment, until the validation is initiated. Finally, if the attacker
receives a signed certificate for the resource that it requested (i.e., a
domain vict.im or its subdomains) we mark the CA as vulnerable.
4StartCom stopped issuing new certificates in January 2018.
Session 10C: TLS 2CCS’18, October 15-19, 2018, Toronto, ON, Canada20673.4.3 Which Record To Attack? All the different DV methods
(in Section 2) generate NS (nameserver) and A (IP address) type
requests. In addition, DV with Email (or with WHOIS) also generate
MX (email server exchanger) type requests. Responses to these
requests are suitable attack targets. Specifically, the attacker hijacks
the entire vict.im domain by injecting into a response packet a
spoofed NS or A records or hijacks an email server by injecting an
MX record (with the corresponding A record). Once a CA caches a
record mapping the nameserver of vict.im to attacker’s host, all
the subsequent requests (e.g., for email server or webserver) will
go to the attacker. The attacker passes any DV verification option
listed in Section 2.
3.4.4 Constructing the Second Fragment. Essentially for many
domains the attacker can control even the answer section of a DNS
response, if fragmentation is at around 200 bytes. For instance,
consider fragmentation at 68 bytes. Given a nameserver whose
responses fragment so that the first fragment is 68 bytes long,