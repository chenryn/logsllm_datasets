### 优化后的文本

#### 图10：SIP流量行为在突发流量下的表现（呼叫率从75CPS跃升至400CPS，在第10分钟）
- **时间 (分钟)**
  - 完成的呼叫
  - 累积呼叫分布 (30秒间隔)
    - 50 CPS被拒绝 + 30% 延迟
    - 75 CPS被拒绝 + 20% 延迟
    - 无保护
- **时间 (分钟)**
  - 失败的呼叫
  - 累积呼叫分布 (30秒间隔)
    - 50 CPS被拒绝 + 30% 延迟
    - 75 CPS被拒绝 + 20% 延迟
    - 无保护
- **时间 (分钟)**
  - 平均响应时间 (毫秒)
  - 观察到的响应时间 (30秒间隔)
    - 无保护
    - 50 CPS被拒绝 + 30% 延迟
    - 75 CPS被拒绝 + 20% 延迟

#### 图11：SIP流量行为在DDoS攻击下的表现（150个伪造CPS与75CPS混合，在第10分钟）
- **时间 (分钟)**
  - 完成的呼叫
  - 累积完成呼叫分布 (30秒间隔)
    - 有保护
    - 无保护
- **时间 (分钟)**
  - 失败的呼叫
  - 累积失败呼叫分布 (30秒间隔)
    - 无保护
    - 有保护
- **时间 (分钟)**
  - 平均响应时间 (毫秒)
  - 观察到的响应时间 (30秒间隔)
    - 无保护
    - 有保护

### 实现细节
- 在用户空间中，大部分数据包处理工作得以完成。实现用户空间中的数据包处理模块比内核空间简单得多，但用户空间的处理延迟会对netlink和ip队列缓冲区容量产生不利影响，从而导致数据包丢失。
- netfilter捕获的数据包流如图9所示。推回控制和选择性准入之间的主要区别在于一个过程，该过程在图中以阴影框表示。
- 在DDoS攻击中，X值为100%，而在突发流量中则低得多（即15-30%），这主要取决于其严重程度。

### 性能评估
- 为了展示我们过载保护方法的性能，我们在突发流量和DDoS攻击条件下应用了所提出的过载控制。我们使用三个指标来评估保护方法的成功率：
  1. **呼叫成功率**：衡量在过载条件下成功建立的SIP会话数量。
  2. **呼叫失败率**：衡量由于服务器资源耗尽而未能建立的SIP会话数量。
  3. **响应时间**：衡量会话建立的速度。

#### 突发流量下的SIP会话建立行为
- 在第10分钟，正常的呼叫率从75CPS激增至400CPS。在一分钟后，交易开始超时，呼叫吞吐量降至0CPS。
- 应用推回控制后，通过拒绝50CPS并进一步延迟30%的呼叫，呼叫吞吐量有所改善，但仅持续了接下来的4分钟。
- 改变控制参数为75CPS拒绝率和20%延迟后，服务器在呼叫吞吐量和响应时间方面的性能保持稳定。
- 在相同网络条件下，通过比较成功完成和失败的呼叫率，可以明显看出推回控制的有效性。

#### DDoS攻击下的SIP会话建立行为
- 我们的目标是允许合法呼叫同时拒绝伪造的呼叫。选择性INVITE准入只允许重传的呼叫请求被服务，从而拒绝所有伪造的呼叫请求。
- 尽管这会给初始INVITE请求处理增加额外的500毫秒延迟，但这一延迟通过提高呼叫吞吐量和响应时间得到了补偿。

### 进一步讨论
- **延长会话建立时间**：ADS可能使正常合法用户感到不便。首先，预防方案仅丢弃总呼叫的一小部分；其次，即使丢弃1到2次INVITE，额外的延迟也仅为0.5到1.5秒，这对呼叫者来说是不易察觉的。
- **复杂攻击**：攻击者可能会编程恶意软件，使其在T1、2*T1、4*T1等时间延迟下重复相同的INVITE请求。为应对这种复杂的攻击，ADS引入了一种“早期临时响应，后期INVITE准入”的新方法。在随机选择的X次丢弃后，到达的X次重传INVITE消息会被排队（而不是直接访问SIP代理服务器），并向客户端发送一个(100 Trying)临时响应。如果在稍后的时间出现(X+1)次丢弃，则这是由机器人生成的呼叫请求，否则排队的INVITE将被允许访问SIP代理服务器资源。

### 模仿攻击
- 由于我们的DDoS攻击检测基于观察INVITE、(100 Trying)、(200 OK)和ACK消息，攻击者可能尝试通过模仿突发流量事件来生成相同的消息集。例如，分布在互联网上的恶意主机可以通过生成有效的ACK消息来完成INVITE交易。ADS能够区分这种模仿攻击，并将其误认为真实的突发流量，从而错误地应用服务器端推回控制。
- 在本节中，我们开发了一个解决方案，可以识别模仿攻击。这使得先前应用的检测和保护机制能够进化并选择适当的控制方法。

### 模仿攻击特征
- 机器生成的呼叫要么由订阅者（即人类）接听，要么最终进入语音邮件系统。如果虚假呼叫被订阅者接听，则通话持续时间将异常短（因为没有呼叫者的语音流）。因此，在攻击期间，平均通话持续时间预计会下降。
- 由于语音邮件系统通常只允许录制几分钟的语音（典型值为1或2分钟），许多呼叫将具有恒定的通话持续时间。这是因为当录音计时器到期时，语音邮件系统会通过向呼叫者发送BYE消息来终止呼叫。

### 熵分类器
- 熵分类器组件基于通话持续时间的熵测量做出攻击分类决策。通话持续时间被分箱为N个连续区间（长度不同）。我们可以将这些区间解释为离散随机变量X的状态xi，其中p(X=xi)=pi。随机变量X的熵为H[p]=−∑i p(xi)ln p(xi)。
- 分布p(xi)集中在少数几个区间内的熵相对较低，而那些均匀分布在多个区间内的熵较高。例如，如果通话持续时间的熵较低，则表明存在可预测的异常呼叫行为模式。如果测量的熵较高（即通话持续时间分布在多个区间内），则表明人类对话的不规则或不可预测行为。

### 熵剖面创建
- 在实验中，用于创建熵剖面的呼叫日志是从美国东南部和中西部地区的NuVox Communications VoIP网络收集的。三天（2008年12月1日至3日）的呼叫日志来自佛罗里达州温特黑文的一个Class-V交换机。这些呼叫日志对应于佛罗里达州奥兰多和坦帕市VoIP商业用户的长途呼叫。
- 图12(a)和(b)显示了2008年12月2日单日（即25小时）的呼叫特征。总共包含88,596个完成的呼叫和32,126个未成功的呼叫。通话持续时间被分箱为16个粗粒度的连续区间，长度不同。
- 通过基于训练期间收集的历史数据构建通话持续时间的熵剖面，我们使用测量的熵设置截止分数。如果测试分数（在测试期间）大于或等于截止分数，则呼叫请求被分类为人类生成。如果测试分数小于截止分数，则呼叫请求被分类为恶意请求。
- 我们发现高峰时段的熵值在1.5到2.5之间。非高峰时段的熵更加不可预测（特别是在午夜到上午9点之间）。然而，在这段时间内，呼叫到达非常少，且通话持续时间较短。通过使用细粒度的区间并观察异常高的流量，可以进行攻击检测。

### 熵分类器的应用
- 在本节中，我们评估熵分类器在检测准确性方面的性能。通过适当设置阈值，在正常情况下不会有误报（即假阳性）。为了平衡假阳性和假阴性，我们将熵阈值设置为1.5。在我们的呼叫日志分析中，我们观察到0.83%的时间熵值低于阈值，从而产生误报。
- 为了衡量假阴性，我们使用检测概率，定义为在一组实验中成功识别的攻击实例占总发起攻击的比例。在实验中，呼叫日志被用来生成呼叫到达，并作为正常背景流量。随后，这些流量被随机混合到不同呼叫率的攻击流量中。

### 结论
- 本文提出了一种基于协议行为距离的异常检测机制，利用协议属性之间的内在相关性。我们还提出了一种新的方案，用于在过载条件下保护SIP代理服务器。该过载保护方案依赖于TCP和SIP协议内置的可靠性机制。服务器端的过载控制展示了在不修改协议本身或要求基础设施变更的情况下，保护SIP代理服务器免受过载条件的可能性。通话持续时间的熵用于检测伪装成突发流量的DDoS攻击。

### 参考文献
[此处列出参考文献]

希望这些改进能让您的文档更加清晰、连贯和专业。如果有任何进一步的调整需求，请告诉我！