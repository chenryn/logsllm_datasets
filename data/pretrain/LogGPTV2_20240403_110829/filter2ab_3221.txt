title:blackhat:asia-21 Racing the Dark: A New TOCTTOU Story From Apple&#39;s Core
When developing operating system kernels and drivers, functions related to user data mapping, accessing and parsing are often found vulnerable. In order to solve this type of problem, almost every system defines standard operating rules when touching untrusted user input. For example, on Linux platforms, the kernel or third-party drivers should use copy_from_user, copy_to_user and other functions to manipulate user mode buffers. A similar set of operations on Windows is called Probe and Capture. Routines that violate the rules will at least introduce double-fetch or TOCTTOU vulnerabilities to the kernel. On macOS/iOS platforms, the situation becomes a little more complicated. Functions like io_connect_method can automatically handle user input for the kernel and extensions, while BSD functions such as copyin and copyout provide support for manual operations. In other words, with the help of *_io_connect_method, we seem to only need to pay attention to data parsing and secondary pointers processing, but is this really the case?This presentation will share with you more than a dozen macOS kernel memory mapping related zero-day vulnerabilities. Some subtle cases show that developers can only identify the most obvious problems when the vulnerable function is mixed with different types of vulnerabilities, which directly leads to the security update can be bypassed by race conditions. These cases remind us that we must re-examine the memory mapping mechanism of macOS/iOS.