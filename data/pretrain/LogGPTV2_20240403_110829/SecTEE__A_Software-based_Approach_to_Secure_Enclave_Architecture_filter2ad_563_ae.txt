### Secrets Provisioning and System Calls

Secrets provisioning, along with other security features, has been extended to the OP-TEE kernel. The system calls listed in Table 1 are provided to enclaves. A Quoting Enclave is implemented to manage attestation keys. We support two types of attestation keys: RSA-based keys (2048 bits) and ECC-based keys (256 bits). Sealing and unsealing keys are implemented using 256-bit AES keys. Our prototype is built on the NXP i.MX6Q Sabre-SD platform, which includes an i.MX 6Quad SoC with 4 ARM Cortex-A9 1.2 GHz CPUs, a 16-way 1MB L2 unified cache, 256 KB OCM, and 1 GB DRAM. Since the platform does not meet the hardware key requirements of SecTEE, we simulate the DRK and MRK by hard-coding two 2048-bit RSA keys in software and simulate the DSK by hard-coding a 256-bit AES key.

### Evaluation Metrics

We evaluate the TCB size of SecTEE, the performance overhead imposed by SecTEE, and the side-channel defense effectiveness of SecTEE by performing well-known cache attacks on AES. The performance evaluation is conducted on four systems: 
1. OP-TEE OS without any trusted computing features.
2. OP-TEE Pager system without any trusted computing features (denoted as Pager).
3. SecTEE without memory protection (denoted as SecTEE-plain).
4. Full SecTEE.

Pager is used to assess the performance overhead of the trusted computing features in SecTEE, while SecTEE-plain evaluates the overhead incurred by the memory protection mechanism.

### 6.1 TCB Size

Although our prototype is based on OP-TEE, SecTEE’s design is not limited to it and can be applied to other TEE OSes. The large codebase of OP-TEE does not imply that any SecTEE implementation will have a large TCB. Furthermore, the large TCB and its trustworthiness issues can be addressed using a microkernel approach. For example, MicroTEE [52] is a TEE OS based on seL4 [56], which is formally verified.

To comprehensively evaluate the TCB introduced by SecTEE, we measure the lines of source code for all components except the enclave management component: memory protection, side-channel resistance, and trusted computing primitives. We also measure the code size of cryptographic primitives required by these components, including AES-GCM, SHA256, and RSA. Note that the enclave management, memory protection, and cryptographic primitives are part of OP-TEE. We do not measure the enclave management component because it combines memory management, process scheduling, and interrupt handling functionalities, which are common in any TEE OS and do not bloat the TCB.

The memory protection component has approximately 2000 LOC, the side-channel resistance component has about 200 LOC, the trusted computing primitives have around 1700 LOC, and the cryptographic primitives (only those required by SecTEE) have about 3500 LOC. Thus, SecTEE adds approximately 7400 LOC to the TCB. The cryptographic primitives account for about half of the code, and their trustworthiness can be improved by using formally verified cryptographic libraries such as EverCrypt [83], HACL* [124], Vale [7], and Vigilant’s CRT-RSA [86].

In conclusion, the TCB of SecTEE can be reduced by leveraging the microkernel approach. SecTEE’s design increases the TCB in an acceptable magnitude, and the trustworthiness of the added TCB can be enhanced by adopting formally verified cryptographic libraries.

### 6.2 Overhead of Trusted Computing Features

When host software invokes `TEEC_OpenSession`, SecTEE authenticates the identity of the required enclave and measures its integrity. The execution time of `TEEC_OpenSession` represents the performance overhead of enclave identification and measurement. The overhead of other trusted computing features is evaluated by measuring the execution time of the corresponding system calls (Table 1). For system calls related to attestation keys (`syscall_request_AK`, `syscall_remote_attestation`, and `syscall_provisioning`), we measure their performance for both RSA and ECC keys. The evaluation results (Table 2) show that most system calls take acceptable time, except for `syscall_request_AK` and `syscall_provisioning`. The performance of `syscall_request_AK` is significantly improved when using ECC-based keys.

**Table 2: Performance of Trusted Computing Features (milliseconds)**

| System Call                 | RSA-based AK | ECC-based AK |
|-----------------------------|--------------|--------------|
| `TEEC_OpenSession`          | 90.73        | —            |
| `syscall_request_AK`        | 23254        | 744.37       |
| `syscall_seal_AK`           | 1.40         | —            |
| `syscall_import_AK`         | 10.47        | —            |
| `syscall_remote_attestation`| 196.61       | —            |
| `syscall_seal`              | 0.90         | —            |
| `syscall_unseal`            | 0.90         | —            |
| `syscall_provisioning`      | 1186         | 507.69       |
| World Switch                | 0.08         | 1508.89      |

### 6.3 Xtest Performance Evaluation

Xtest [67] is a test framework designed by Linaro for OP-TEE. It includes two types of performance benchmarks: trusted storage and crypto. It also provides comprehensive tests for various features of OP-TEE, including OS-related, socket, crypto, shared memory, storage, GP shared memory, key derivation, and secure storage. We perform the benchmarks and all feature tests on the four systems: OP-TEE, Pager, SecTEE-plain, and SecTEE. Each test is run 100 times, and the geometric mean of the results is calculated.

#### 6.3.1 Xtest Benchmarks

Figures 9 and 10 illustrate the results of the trusted storage and crypto benchmarks for the four systems. The results are calculated by inputting data of different sizes to secure services. Pager and SecTEE achieve similar performance, indicating that the extended trusted computing features introduce minimal overhead. For the trusted storage benchmark, SecTEE-plain is 1.2 times slower than OP-TEE, and SecTEE is 2.2 times slower. For the crypto benchmark, SecTEE-plain is 11.8 times slower, and SecTEE is 53.5 times slower. The reason for the smaller impact on trusted storage operations is that they invoke the file system service of the normal world, which takes a significant portion of the execution time but is not affected by SecTEE.

#### 6.3.2 Xtest Tests of OP-TEE’s Features

Figure 11 shows the results of Xtest tests of OP-TEE’s features for the four systems. SecTEE is 3.9 times slower than OP-TEE on average, while SecTEE-plain and OP-TEE achieve similar performance (SecTEE-plain is 1.06 times slower). The results demonstrate that most of the performance overhead is caused by the memory protection mechanism.

### 6.4 Enclave Performance Evaluation

To evaluate SecTEE’s performance impact on enclaves, we build the following three security enclaves and run them on the four systems:

- **Random TA**: Generates random numbers for applications in the normal world.
- **Data Protection TA**: Uses AES to encrypt provided data and return the ciphertext to the normal world.
- **HMAC-based One Time Password (HOTP) TA**: Receives a shared key from the normal world and computes HMAC-based OTPs.

We evaluate both the entire execution time and the service runtime of enclaves (Figure 12). The entire execution time includes loading the enclave into SecTEE, allocating resources, executing enclave services, and destroying the enclave. The service runtime only includes the time of running enclave services (TA commands).

For the entire execution time of secure enclaves, SecTEE-plain is 4.4 times slower than OP-TEE on average, and SecTEE is 43.7 times slower. This indicates that most of the performance overhead comes from the memory protection mechanism. As SecTEE is 1.12 times slower than Pager, the trusted computing features (excluding memory protection) of SecTEE introduce only 12% overhead on average.

### 6.5 Side-channel Defense Evaluation

To demonstrate the effectiveness of SecTEE’s protection against memory access-based side-channel attacks, we perform public cache attacks [77] (based on the libflush library of ARMageddon [68]) against the OpenSSL AES implementation on OP-TEE and SecTEE.

#### 6.5.1 Experiment Preparation

We port the libflush library and attack tools to SecTEE. We extract the source code of the T-table-based AES implementation of OpenSSL and port it to SecTEE as an AES static TA. We use the cycle count register (PMCCNTR) of the performance monitoring unit (PMU) to measure memory access time. The cache hit and miss histograms (Figure 13) of normal DRAM (N-DRAM), secure DRAM (S-DRAM), and secure OCM (S-OCM) show that cache hits and misses are clearly distinguishable in both the normal and secure worlds (the cache hit histogram of S-DRAM overlaps that of S-OCM). The results show that cache hits of secure memory (about 55 CPU cycles) take much less time than cache hits of normal memory (about 160 CPU cycles).

#### 6.5.2 Evaluating Attacks from the Normal World

We first perform cache attacks against AES and find that the methods provided by the libflush library, such as Prime+Probe and Eviction+Probe, do not provide high enough resolution to recover the AES key in the secure world. We then perform Prime+Probe to check if the normal world can detect memory accesses in the secure world. Figure 14 shows the Prime+Probe histograms for cache hits and misses. On OP-TEE, we observe a higher execution time if the secure world accesses a congruent memory address, while on SecTEE, the execution time is the same regardless of whether the secure world accesses a congruent memory address. This indicates that SecTEE prevents attackers in the normal world from learning the access patterns of the secure world.

#### 6.5.3 Evaluating Attacks from the Secure World

We implement the T-table-based AES as a victim static TA and use the attack tools [77] to implement an attacker static TA that can invoke the AES TA. Since the cache attack requires the victim and the attacker to share AES T-tables, we place the T-tables on a shared memory page. Our experiment shows that the attacker TA can recover the 128-bit AES key after 256,000 encryptions on OP-TEE, while it cannot recover any byte of the key on SecTEE. Figure 15 illustrates the candidate scores of the first byte of the last round key on OP-TEE and SecTEE. The correct value of the first byte of the last round key is 0x98=152. The attacker TA correctly guesses the last round key of AES on OP-TEE, but it cannot guess the key on SecTEE. Figure 15 shows that the attacker TA learns no information about the memory access patterns of the AES TA: all candidates get almost the same score (1 or 0).

### 7 Related Work

#### 7.1 Security Applications of TrustZone

This section introduces the security applications of ARM TrustZone, including TEE virtualization, mobile OS protection and monitoring, and security services for mobile devices.

- **TEE Virtualization**: ARM TrustZone itself does not support virtualization, limiting its application in server markets. vTZ [45] addresses this by creating secure VMs as guest TEEs for guest VMs and using TrustZone and the hypervisor to enforce strong isolation between the guest TEEs. TEEv [64] designs a TEE virtualization architecture for ARM TrustZone, supporting multiple TEE OSes running concurrently in the secure world.
- **Mobile OS Protection and Monitoring**: TZ-RKP [5] provides real-time protection of the mobile OS by removing critical system control instructions from the mobile OS kernel and simulating these instructions in the TEE. TruZ-Droid [118] incorporates generic TrustZone support in Android, allowing applications to leverage TrustZone to protect users’ secrets and interaction information without installing app-specific TAs. Sprobes [28] presents an introspection mechanism in the TEE to detect mobile OS kernel rootkits. TrustShadow [36] and CryptMe [11] protect mobile applications from physical attacks using a lightweight runtime system in the TEE. TrustDump [102] develops a memory acquisition mechanism in the TEE to perform memory dump and malware analysis of the mobile OS. TrustICE [103] enables the execution of security-sensitive code in isolated environments in the normal world without increasing the TCB of the TEE.
- **Security Services for Mobile Devices**: TLR [89] provides a small runtime engine interpreting .NET managed code in the TEE, enabling mobile applications to implement security use cases using high-level languages like C#. AdAttester [62] is a verifiable mobile advertisement framework that guarantees that advertisements are displayed intact and timely. TrustOTP [101] proposes a secure one-time password solution achieving both security and usability.