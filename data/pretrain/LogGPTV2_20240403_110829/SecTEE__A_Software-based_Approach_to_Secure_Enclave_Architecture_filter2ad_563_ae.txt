and secrets provisioning, are extended to the OP-TEE kernel, and
the system calls listed in Table 1 are provided to enclaves. A Quoting
Enclave is implemented to manage attestation keys. We implement
two types of attestation keys: RSA-based keys and ECC-based keys,
whose lengths are 2048 bits and 256 bits respectively, and implement
the sealing/unsealing keys using 256-bit AES keys. Our prototype
is built on the NXP i.MX6Q Sabre-SD platform, which has an i.MX
6Quad SoC with 4 ARM Cortex-A9 1.2 GHz CPUs, 16-way 1MB
L2 unified cache, 256 KB OCM, and 1 GB DRAM. As the platform
does not satisfy the hardware key requirements of SecTEE, we
simulate the DRK and MRK by hard-coding two 2048-bit RSA keys
in software and simulate the DSK by hard-coding a 256-bit AES
key.
We evaluate the TCB size of SecTEE, the performance overhead
imposed by SecTEE, and the side-channel defense effectiveness
of SecTEE by performing well-known cache attacks on AES. The
performance evaluation is performed on four systems: the OP-TEE
OS without any trusted computing features, the OP-TEE Pager
system without any trusted computing features (denoted by Pager),
SecTEE without memory protection (denoted by SecTEE-plain),
and SecTEE. Pager is used to evaluate the performance overhead
of the trusted computing features to SecTEE, and SecTEE-plain is
used to evaluate the performance overhead incurred by the memory
protection mechanism to SecTEE.
6.1 TCB Size
Although our prototype is based on OP-TEE, SecTEE’s design is
not limited to it, and it can be applied to any other TEE OSes. So
the large codebase of OP-TEE does not indicate that any SecTEE’s
implementation has a large TCB. Furthermore, the large TCB and its
trustworthiness issues can be solved by the microkernel approach:
TEE OS based on formally verified OS has been proposed, such as
MicroTEE [52], a TEE OS based on seL4 [56].
To comprehensively evaluate the TCB introduced by SecTEE, we
measure the lines of source code of all the components of SecTEE
(Section 5) except the enclave management component: memory
protection, side-channel resistance, and trusted computing primi-
tives. We also measure the code size of cryptographic primitives
required by memory protection and trusted computing primitives,
including AES-GCM, SHA256, and RSA. Note that the enclave
management, memory protection, and cryptographic primitives are
of OP-TEE. We do not measure the enclave management component
because it is actually a combination of memory management,
process scheduling, and interrupt handling functionalities of an
OS. Since these functionalities are common for any TEE OS, we
believe that the enclave management component does not bloat
the TCB. The memory protection component has ∼2000 LOC, the
side-channel resistance component has ∼200 LOC, the trusted
computing primitives have ∼1700 LOC, and the cryptographic
primitives (we only measure the primitives required by SecTEE)
have ∼3500 LOC. So SecTEE adds ∼7400 LOC to the TCB. Note
TEEC_OpenSessionNon-existingInitializedRunningBlockedTEEC_InvokeCommandTEEC_CloseSessionInterruptThreadschedulerUninitializedNon-runnableResources allocation(thread, memory)Resources release(thread, memory)TEEC_InvokeCommandSession 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1733that the cryptographic primitives take up about half of the code,
and their trustworthiness can be improved by leveraging formally
verified cryptographic libraries, such as EverCrypt [83], HACL*
[124], Vale [7], and Vigilant’s CRT-RSA [86].
In conclusion, the whole TCB of SecTEE can be decreased by
leveraging the microkernel approach; SecTEE’s design increases
the TCB in an acceptable magnitude, and the trustworthiness of
the added TCB can be improved by adopting formally verified
cryptographic libraries.
6.2 Overhead of Trusted Computing Features
When host software invokes TEEC_OpenSession, SecTEE authenti-
cates the identity of the required enclave and measures its integrity,
so the execution time of TEEC_OpenSession represents the perfor-
mance overhead of enclave identification and measurement. The
overhead of other trusted computing features can be evaluated
by measuring the execution time of the corresponding system
calls (Table 1). For the system calls performed by attestation
keys (syscall_request_AK, syscall_remote_attestation, and
syscall_provisioning), we measure their performance when the
types of attestation keys are RSA and ECC respectively. The evalu-
ation results (Table 2) show that most system calls take acceptable
time except syscall_request_AK and syscall_provisioning,
and that the performance of syscall_request_AK is greatly
improved when the attestation key is the type of ECC.
Table 2: Performance of Trusted Computing Features (mil-
lisecond)
TEEC_OpenSession
syscall_request_AK
syscall_seal_AK
syscall_import_AK
syscall_remote_attestation
syscall_seal
syscall_unseal
syscall_provisioning
World Switch
RSA-based AK
90.73
23254
1.40
10.47
196.61
0.90
0.90
1186
0.08
ECC-based AK
—
744.37
—
—
—
—
—
507.69
1508.89
6.3 Xtest Performance Evaluation
Xtest [67] is a test framework designed by Linaro for OP-TEE.
It contains two kinds of performance benchmarks: the trusted
storage benchmark and the crypto benchmark. It also contains
comprehensive tests of features of OP-TEE, including OS related
tests, socket related tests, crypto related tests, shared memory
tests, storage tests, GP shared memory tests, key derivation &
management tests, and secure storage tests. We perform the
benchmarks and all feature tests for the four systems: OP-TEE,
Pager, SecTEE-plain, and SecTEE. We run each test 100 times and
compute the geometric mean of the results.
6.3.1 Xtest Benchmarks. Figures 9 and 10 illustrate the results of
trusted storage and crypto benchmarks for the four systems. The
results are calculated by inputting data of different sizes to secure
services. Pager and SecTEE achieve similar performance, which
shows that the extended trusted computing features introduce little
overhead. For the trusted storage benchmark, SecTEE-plain is 1.2
times slower than OP-TEE, and SecTEE is 2.2 times slower than
OP-TEE. For the crypto benchmark, SecTEE-plain is 11.8 times
slower than OP-TEE, and SecTEE is 53.5 times slower than OP-TEE.
The reason that SecTEE’s performance impact on trusted storage
operations is less than on crypto operations is that trusted storage
operations need to invoke the file system service of the normal
world to store data, which takes a large part of the whole execution
time but is not affected by SecTEE.
6.3.2 Xtest Tests of OP-TEE’s Features. Figures 11 illustrates the re-
sults of Xtest tests of OP-TEE’s features for the four systems. SecTEE
is 3.9 times slower than OP-TEE on average, and SecTEE-plain and
OP-TEE achieve similar performance on average (SecTEE-plain
is 1.06 times slower than OP-TEE). The results demonstrate that
most performance overhead is caused by the memory protection
mechanism.
normal world.
the ciphertext to the normal world.
6.4 Enclave Performance Evaluation
To evaluate SecTEE’s performance impact on enclaves, we build
the following three security enclaves and run them on the four
systems.
• Random TA: generate random numbers for applications in the
• Data Protection TA: use AES to encrypt provided data and return
• HMAC-based One Time Password (HOTP) TA: receive a shared
key from the normal world and compute HMAC-based OTPs.
We evaluate both the entire execution time and the service
runtime of enclaves (Figure 12). The entire execution time includes
all the time of loading an enclave into SecTEE, allocating resources
for it, executing enclave services, and destroying the enclave. The
service runtime only includes the time of running enclave services
(TA commands).
For the entire execution time of secure enclaves, SecTEE-plain is
4.4 times slower than OP-TEE on average, and SecTEE is 43.7 times
slower than OP-TEE on average. So the results demonstrate that
most performance overhead comes from the memory protection
mechanism. As SecTEE is 1.12 times slower than Pager, the trusted
computing features (not including memory protection) of SecTEE
only introduce 12% overhead on average.
6.5 Side-channel Defense Evaluation
To demonstrate the effectiveness of SecTEE’s protection against
memory access based side-channel attacks, we perform the public
cache attacks [77] (based on the libflush library of ARMageddon
[68]) against the OpenSSL AES implementation on OP-TEE and
SecTEE respectively.
6.5.1 Experiment Preparation. We port the libflush library and
attack tools to SecTEE. We extract the source code of the T-table
based AES implementation of OpenSSL, and port it to SecTEE as
an AES static TA. We leverage the cycle count register (PMCCNTR)
of the performance monitoring unit (PMU) to measure the time of
memory access. The cache hit and miss histograms (Figure 13) of
normal DRAM (N-DRAM), secure DRAM (S-DRAM), and secure
OCM (S-OCM) show that cache hits and cache misses are clearly
distinguishable in both the normal world and the secure world (the
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1734Figure 9: Xtest Trusted Storage Benchmarks
Figure 10: Xtest Crypto Benchmarks
Figure 12: Performance of Security Enclaves
Figure 11: Xtest Test of OP-TEE’s Features
Figure 13: Histograms of cache hits and cache misses in the
normal world and the secure world (the X-Axis represents
the latency of a memory access in CPU cycles)
cache hit histogram of the secure DRAM overlaps that of the secure
OCM). The results illustrate an interesting phenomenon: cache hits
of the secure memory (about 55 CPU cycles) take much less time
than cache hits of the normal memory (about 160 CPU cycles).
6.5.2 Evaluating Attacks from the Normal World. We first perform
the cache attacks against AES, and find that the methods provided
by the libflush library, such as Prime+Probe and Eviction+Probe,
do not provide high enough resolution to recover the AES key in
the secure world. So we perform Prime+Probe to check whether
the normal world can detect memory accesses in the secure
world, i.e., prime before switching to the secure world and probe
after switching back to the normal world. Figure 14 shows the
256B512B1KB2KB4KB16KB512KB1MB05101520253035Performance (KB/S)Benchmark 1001 (Write)256B512B1KB2KB4KB16KB512KB1MB020406080100120140160180Performance (KB/S)Benchmark 1002 (Read)256B512B1KB2KB4KB16KB512KB1MB051015202530Performance (KB/S)Benchmark 1003 (Re-write) OP-TEE  Pager  SecTEE-plain  SecTEEBenchmark 2001Benchmark 2002Benchmark 2011Benchmark 20120.00.20.40.60.81.01.21.41.61.82.04681012141618(AES CBC)(AES ECB)(SHA256)Performance (MB/S) OP-TEE Pager SecTEE-plain SecTEE(SHA1)05001000150020002500300035004000450020000400006000080000100000120000140000160000180000200000shared memory& managementKey derivation Secure storageGPStorageShared memoryCrypto relatedSocket relatedOS relatedTime(ms) OP-TEE  Pager  SecTEE-plain  SecTEERandomData ProtectionHOTP05101520253035404550556065707580852004006008001000Performance (ms)Entire Execution Time of EnclavesRandomData ProtectionHOTP0.00.51.01.52.02.520406080100120140160Performance (ms)Service Runtime of Enclaves OP-TEE  Pager  SecTEE-plain  SecTEE0100200300400500600012345 Number of accessesMeasured access time in CPU cycles Hit (N-DRAM)      Hit (S-DRAM)      Hit (S-OCM) Miss (N-DRAM)   Miss (S-DRAM)   Miss (S-OCM)·104 Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1735Prime+Probe histograms for cache hits and cache misses. On OP-
TEE, we observe a higher execution time if the secure world accesses
a congruent memory address (addresses that map to the same cache
set are considered congruent), while on SecTEE, the execution
time is the same no matter whether the secure world accesses a
congruent memory address or not. So SecTEE prevents attackers in
the normal world from learning the access patterns of the secure
world.
Figure 14: Histograms of Prime+Probe timings on OP-TEE
and SecTEE (the X-Axis represents the execution time of the
Probe operation of libflush)
6.5.3 Evaluating Attacks from the Secure World. We implement the
T-table based implementation of AES as a victim static TA, and use
the attack tools [77] to implement an attacker static TA which can
invoke the AES TA. Since the cache attack requires the victim and
the attacker to share AES T-tables, we put the T-tables on a shared
memory page. Our experiment shows that the attacker TA can
recover the 128-bit AES key after 256,000 encryptions on OP-TEE,
while it cannot recover any byte of the key on SecTEE. Figure 15
illustrates the candidate scores of the first byte of the last round key
on OP-TEE and SecTEE respectively: the correct value of the first
byte of the last round key is 0x98=152. The attacker TA correctly
guesses the last round key of AES on OP-TEE, while it cannot guess
the key on SecTEE. Especially, Figure 15 shows that the attacker
TA learns no information about the memory access patterns of the
AES TA: all candidates get almost the same score (1 or 0).
Figure 15: Candidate Scores of the 1st byte of the last round
key on OP-TEE and SecTEE
7 RELATED WORK
7.1 Security Applications of TrustZone
This section introduces the security applications of ARM TrustZone,
including TEE virtualization, mobile OS protection and monitoring,
and security services for mobile devices.
TEE Virtualization. ARM TrustZone itself does not support
virtualization, preventing its application on server markets. vTZ
[45] addresses this problem by creating secure VMs as guest
TEEs for guest VMs and leveraging TrustZone and the hypervisor
to enforce strong isolation between the guest TEEs. TEEv [64]
designs a TEE virtualization architecture for ARM TrustZone, which
supports multiple TEE OSes running concurrently in the secure
world.
Mobile OS Protection and Monitoring. TZ-RKP [5] provides
real-time protection of the mobile OS by removing critical system
control instructions from the mobile OS kernel and simulating these
instructions in TEE. TruZ-Droid [118] incorporates the generic
TrustZone support in Android so that allows Android applications
leveraging TrustZone to protect users’ secrets and interaction
information without installing app-specific TAs. Sprobes [28]
presents an introspection mechanism in the TEE to detect mobile OS
kernel rootkits. TrustShadow [36] and CryptMe [11] protect mobile
applications from physical attacks using a lightweight runtime
system in the TEE. TrustDump [102] develops a memory acquisition
mechanism in the TEE to perform memory dump and malware
analysis of the mobile OS. TrustICE [103] enables execution of
security-sensitive code in isolated environments in the normal
world without increasing the TCB of TEE.
Security Services for Mobile Devices. TLR [89] provides a
small runtime engine interpreting .NET managed code in the
TEE and enables mobile applications to implement security use
cases using high-level languages like C#. AdAttester [62] is a
verifiable mobile advertisement framework which guarantees that
the advertisement is displayed intact and timely. TrustOTP [101]
proposes a secure one-time password solution achieving both the