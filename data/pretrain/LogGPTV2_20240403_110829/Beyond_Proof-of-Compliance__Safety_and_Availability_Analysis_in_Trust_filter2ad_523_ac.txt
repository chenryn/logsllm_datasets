For each A.r←− D in P|R, add
lb(A, r, D)
For each A.r←− B.r1 in P|R, add
lb(A, r, ?Z) :− lb(B, r1, ?Z)
For each A.r←− A.r1.r2 in P|R, add
lb(A, r, ?Z) :− lb(A, r1, ?Y ), lb(?Y, r2, ?Z)
(b3)
For each A.r←− B1.r1 ∩ B2.r2 in P|R, add
lb(A, r, ?Z) :− lb(B1, r1, ?Z), lb(B2, r2, ?Z) (b4)
(b2)
(b1)
The worst-case complexity of evaluating the lower bound
program is O(|P|3).
if and only if
|= lb(A, r, D)
Observe that the above lower bound program is essen-
tially the same as the semantic program for the minimal
state P|R. They differ in that anywhere LB(P,R) uses
the predicate lb, SP(P|R) uses the predicate m. Therefore,
we have the following fact.
Fact 3.1 LB(P,R)
SP(P|R) |= m(A, r, D).
Proposition 3.2 LB(P,R) |= lb(A, r, D) if and only if for
every P(cid:2)
Proof. The “only if” part: If LB(P,R) |= lb(A, r, D),
then from Fact 3.1, SP(P|R) |= m(A, r, D). For every P(cid:2)
that is reachable, P|R ⊆ P(cid:2)
. Furthermore, the language
SRT is monotonic; therefore, SP(P(cid:2)) |= m(A, r, D).
, SP(P(cid:2)) |=
m(A, r, D), then SP(P|R) |= m(A, r, D), since P|R is
reachable. From Fact 3.1, LB(P,R) |= lb(A, r, D).
if for every reachable P(cid:2)
, SP(P(cid:2)) |= m(A, r, D).
such that P ∗(cid:5)→R P(cid:2)
The “if” part:
Corollary 3.3 Given P and R, a form-1 query A.r (cid:20)
{D1, . . . , Dn} is necessary if and only if LB(P,R) |=
lb(A, r, Di) for every i, 1 ≤ i ≤ n.
Corollary 3.4 Given P and R,
query
form-2
{D1, . . . , Dn} (cid:20) A.r is possible if and only if
{D1, . . . , Dn} ⊇ {Z | LB(P,R) |= lb(A, r, Z)}.
a
For
the “if” part, we must show that
Proof.
if
{D1, . . . , Dn} ⊇ {Z | LB(P,R) |= lb(A, r, Z)}, then
there exists a reachable P(cid:2)
such that each D satisfying
P(cid:2) |= m(A, r, D) also satisﬁes D ∈ {D1, . . . , Dn}. It is
easily seen by using Fact 3.1 that P|R is such a P(cid:2)
The “only if” part follows from Proposition 3.2 as fol-
lows. Suppose there exists Z such that LB(P,R) |=
lb(A, r, Z) and Z (cid:25)∈ {D1, . . . , Dn}. By Proposition 3.2,
, SP(P(cid:2)) |= m(A, r, Z); therefore,
for every reachable P(cid:2)
the query is not possible.
.
and HR.manager
“SA.manager ←− HR.manager”,
Consider Example 1. The simple availability query
“is SA.access (cid:20) {Alice} necessary” is
true when
SA.access,
SA.manager,
s-
since then the statements “SA.access ←−
restricted,
SA.manager”,
and
“HR.manager ←− Alice” exist in the minimal state. On
the other hand, it is not necessary that Bob has access,
even when SA.delegatedAccess, HR.employee,
and
HR.programmer are also s-restricted, since Alice could
remove her statement “Alice.access ←− Bob”.
are
3.2 The Upper Bound
To compute the upper bound of roles, we introduce the
following notion: A role is g-unbounded if for every prin-
such that SP(P(cid:2)) |=
cipal Z, there exists a reachable P(cid:2)
m(A, r, Z). In other words, A.r could have every principal
as its member. A g-unrestricted role is clearly g-unbounded.
A g-restricted role may also be g-unbounded, as it may be
deﬁned to include a g-unbounded role.
The following fact about g-unbounded roles says that one
only needs to consider one principal that does not occur in
P (instead of every principal) to determine whether a role is
g-unbounded.
Fact 3.5 Given P, R, a role A.r, and a principal E that
does not occur in P, A.r is g-unbounded if and only if there
such that SP(P(cid:2)) |= m(A, r, E).
exists a reachable state P(cid:2)
Proposition 3.2 means that the lower bound program can
be used to answer universal form-1 queries and existential
form-2 queries. We have not found an intuitive security
meaning of existential form-2 queries, but include answer-
ing method for them here for completeness.
See Appendix A.1 for the proof. We now show how to
compute the upper bound, which simulates an inﬁnite state.
P,
Deﬁnition 4 (The Upper Bound Program) Given
R = (G,S), their upper bound program, UB(P,R), is
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
6
constructed as follows. ((cid:26) is a special principal symbol not
occurring in P, R, or any query Q.)
(u0)
(u1)
(u)
(u2)
Add
ub((cid:26), ?r, ?Z)
For each A.r ∈ Roles(P) − G, add
ub(A, r, ?Z)
For each A.r←− D in P, add
ub(A, r, D)
For each A.r←− B.r1 in P, add
ub(A, r, ?Z) :− ub(B, r1, ?Z)
For each A.r←− A.r1.r2 in P, add
ub(A, r, ?Z) :− ub(A, r1, ?Y ), ub(?Y, r2, ?Z)
(u3)
For each A.r←− B1.r1 ∩ B2.r2 in P, add
ub(A, r, ?Z) :− ub(B1, r1, ?Z), ub(B2, r2, ?Z) (u4)
The computational complexity for evaluating UB(P,R)
is O(|P|3). Note that Roles(P) has O(|P|2) elements, since
there are O(|P|) principals and O(|P|) role names in P.
Therefore, there are O(N 2) instance rules of (u0); however,
each such rule has only one variable.
Proposition 3.6 Given any P, R = (G,S), A.r ∈
Roles(P), and Z ∈ Principals(P) ∪ {(cid:26)}, UB(P,R) |=
such that P ∗(cid:5)→R P(cid:2)
ub(A, r, Z) if and only if there exists P(cid:2)
and SP(P(cid:2)) |= m(A, r, Z).
See Appendix A.1 for the proof. From Fact 3.5 and
Proposition 3.6, we have the following.
|= ub(A, r,(cid:26)), or (3) UB(P,R)
Corollary 3.7 A role A.r is g-unbounded if and only if
UB(P,R) |= ub(A, r,(cid:26)).
Corollary 3.8 Given P and R = (G,S), a form-1 query
A.r (cid:20) {D1, . . . , Dn} is possible if and only if one
(1) A.r (cid:25)∈ G,
of the following three conditions hold:
(2) UB(P,R)
|=
ub(A, r, Di) for every i, 1 ≤ i ≤ n.
Proof. When A.r (cid:25)∈ Roles(P), the second and the third
condition will not hold; the query is possible if and only if
A.r is g-unrestricted, i.e., A.r (cid:25)∈ G. When A.r ∈ Roles(P),
the ﬁrst condition implies the second condition. Condition
(2) or (3) both imply that the query is possible. If none of the
three conditions holds, the query is not possible. Condition
(2) is needed to deal with the case that some of the Di’s in
the query do not occur in P.
Corollary 3.9 Given P and R = (G,S), a form-2 query
{D1, . . . , Dn} (cid:20) A.r is necessary if and only if A.r ∈ G
and {D1, . . . , Dn} ⊇ {Z|UB(P,R) |= ub(A, r, Z)}.
Consider Example 1 again and observe that the pol-
icy is not safe according to either the simple safety query
Proceedings of the 2003 IEEE Symposium on Security and Privacy (SP(cid:146)03) 
1081-6011/03 $17.00 ' 2003 IEEE 
7
the
or the bounded safety query. One reason is that
role HR.manager is g-unrestricted, meaning that new man-
agers may be added. Another reason is that the role
HR.programmer is g-unrestricted; therefore, new program-
mers may be added and access may be delegated to them.
However, if the company knows that Eve is an enemy, then
the company probably will not hire Eve as a manager or a
programmer.
In fact, simple safety is quite unnatural:
to use it ef-
fectively, one has to be able to identify the principals that
should never have access, the number of such principals
could be arbitrary large. Bounded safety is also unnatural,
one does not know, for example, who in the future the com-
pany will hire as a manager. A more natural policy is to
ensure that, for example, only employees of the company
are allowed to access the resource. This can be done by
using form-3 queries.
4 Answering Universal Form-3 Queries
Form-3 queries (i.e., role inclusion queries) are nei-
ther monotonic nor anti-monotonic. Given a form-3 query
X.u (cid:20) Z.w and three states P(cid:2) ⊆ P ⊆ P(cid:2)(cid:2)
, it is possible
that P (cid:1) Q, but both P(cid:2) (cid:25)(cid:1) Q and P(cid:2)(cid:2) (cid:25)(cid:1) Q. As a result, the
approach taken with form-1 and form-2 queries is not appli-
cable here. We cannot simply look at a speciﬁc minimal (or
maximal) state and answer the query.
In this paper, we restrict our attention to universal role in-
clusion queries. We have not found meaningful readings of
existential role inclusion queries in terms of security prop-
erties. We say that a role X.u contains another role A.r
if X.u (cid:20) A.r is necessary, i.e., X.u includes A.r in ev-
ery reachable state. And we call the problem of answering
containment queries containment analysis.
The case that one of X.u and A.r is not in Roles(P) is
uninteresting. If A.r (cid:25)∈ Roles(P), then X.u contains A.r
if and only if A.r is g-restricted. If A.r ∈ Roles(P) and
X.u (cid:25)∈ Roles(P), then X.u contains A.r if and only if A.r
has an upper bound that is empty. In the rest of this sec-
tion, we only consider the case that both X.u and A.r are in
Roles(P).
Intuitively, there are two cases in which a role X.u con-
tains a role A.r. The ﬁrst case is that this containment is
forced by the statements that are in P. For example, if a
statement X.u ←− A.r exists and cannot be removed, then
X.u contains A.r. A containment may be forced by a chain
of credentials. Forced containment can be computed simi-
larly to role memberships.
In the second case, containment is caused by the nonex-
istence of statements in P. In the extreme case, if A.r has
no deﬁnition and is g-restricted, then A.r is contained in
every role, since the member set of A.r is empty in every
reachable state. To compute this kind of containment, ob-
serve that a g-restricted role A.r is contained in another role
X.u if every deﬁnition of A.r is contained in X.u. If A.r
has no deﬁnition at all, then it is contained in every role.
However, a straightforward translation of this into a posi-
tive logic program does not work. Consider the following
example: P = {A.r ←− B.r1, A.r ←− D, B.r1 ←−
A.r, X.u ←− D} and R is such that G = {A.r, B.r1}
and S = {A.r, B.r1, X.u}. In any P(cid:2)
that is R-reachable
from P, the member sets of A.r and B.r1 are always {D},
and so both roles are contained by X.u. A straightforward
positive logic program cannot derive this, since X.u con-
tains A.r only if it contains B.r1 and vice versa. As a re-
sult, neither containment relationship will be in the minimal
model. To deal with this problem, we take the approach to
prove non-containment using the minimal model of a logic
program, and derive containment using negation-as-failure.
Intuitively, X.u contains A.r unless we can ﬁnd a witness
entity E that is a member of A.r in some state but not a
member of X.u in the same state.
Intuitively, containment queries that have the ﬂavor of
availability should be proven by forced containment. That
a manager always has access to a resource should be due
to a credential chain forcing this. In Example 1, SA.access
contains HR.manager as long as SA.access and SA.manager
are s-restricted. On the other hand, policy statements are
unlikely to force everyone who has access to a resource
to be an employee; the orientation of the forced contain-
ment does not naturally correspond to this practical depen-
dency.
In Example 1, HR.employee contains SA.access
as long as SA.access and SA.manager are g-restricted and
HR.employee is s-restricted. This is because, as long as no
new rule deﬁning SA.access or SA.mamnager is added, any
member of SA.access is either a member of HR.manager
or a member of HR.employee; if furthermore, the statement
“HR.employee ←− HR.manager” cannot be removed, then
HR.employee contains SA.access.
4.1 Answering Containment Queries in BRT
Recall that the language BRT has only type-1 and type-2
statements.
Deﬁnition 5 (The Role Containment Program for BRT )
Given a BRT state P and R, the role containment program,
BCP(P,R), includes the lower bound program LB(P,R)
in Deﬁnition 3. In addition, it deﬁnes two predicates: fc/4
and nc/4. An atom fc(X, u, Z, w) means that X.u is forced
to contain Z.w. An atom nc(X, u, Z, w) means that X.u
does not contain Z.w. The program BCP(P,R) is derived
from LB(P,R) as follows.
Add