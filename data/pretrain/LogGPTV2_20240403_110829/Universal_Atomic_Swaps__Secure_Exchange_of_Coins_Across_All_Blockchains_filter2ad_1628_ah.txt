swp,k under the public key pk (10)
k
= 1.
swp,k, σ∗(cid:17)
(cid:17)
swp,i, σ∗(cid:17)
, tx (0)
σ∗, ˜σ(0)
σ∗, ˜σ(0)
AS .Adapt
swp,k, Y
swp,k, Y
pk (01)
, tx (1)
pk (10)
, tx (0)
pk (10)
k
AS .Ext
DS .Vf
DS .Vf
i
(cid:16)
(cid:16)
k
(cid:16)
(cid:16)
(cid:16)
(cid:16)
(cid:17)
and
swp,i
swp,i ← ΠSIG
σ(1)
(cid:16)
and there exists some i∗ ∈ [n] such that
swp,i∗ , σ(1)
pk (01)
, tx (1)
DS .Vf
ΠSIG
i∗
(cid:17)
swp,i∗
= 0
i
18
Setup: On input 1λ the setup algorithm does the following.
• Run SetupZK(1λ) to generate crs range
• Generate the public parameters pp ← PSetup(1λ, T)
• Output crs := (crs range, pp)
Commit and Prove: On input (crs, wit) the Com algorithm does the following.
• Parse wit := x, crs := (crs range, pp), H := Gx
• For all i ∈ [t − 1] sample a uniform xi ← Zq and set Hi := Gxi
• For all i ∈ {t, . . . , n} compute
xi =
xj · (cid:96)j(0)
x −(cid:88)
H(cid:81)
j∈[t]
Hi =
j∈[t] H (cid:96)j (0)
j
 · (cid:96)i(0)−1
(cid:96)i(0)−1
where (cid:96)i(·) is the i-th Lagrange polynomial basis.
• For i ∈ [n], generate puzzles with corresponding range proofs as shown below
ri ← {0, 1}λ, Zi ← PGen(p, xi; ri)
πrange,i ← PNIZK,Lrange (crs range, (Zi, a, b, T), (xi, ri))
1) There exists some j /∈ I such that(cid:81)
• Compute I ← H(cid:48) (H, (H1, Z1, πrange,1), . . . , (Hn, Zn, πrange,n))
• The Com algorithm outputs C := (Z1, . . . , Zn, T) and π := ({Hi, πrange,i}i∈[n], I,{xi, ri}i∈I )
• Finally output (H, C, π)
Veriﬁcation: On input (crs, H, C, π) the Verify algorithm does the following.
• Parse C := (Z1, . . . , Zn, T), π := ({Hi, πrange,i}i∈[n], I,{xi, ri}i∈I ) and crs := (crs range, pp)
• If any of the following conditions is satisﬁed output 0, else return 1:
2) There exists some i ∈ [n] such that VNIZK,Lrange (crs range, (Zi, a, b, T), πrange,i) (cid:54)= 1
3) There exists some i ∈ I such that Zi (cid:54)= PGen(p, xi; ri) or Hi = Gxi
4) I (cid:54)= H(cid:48) (H, (H1, Z1, πrange,1), . . . , (Hn, Zn, πrange,n))
Open: The Open algorithm outputs (x,{ri}i∈[n]).
Force Open: The ForceOp algorithm take as input C := (Z1, . . . , Zn, T) and works as follows:
• Runs xi ← Solve(pp, Zi) for i ∈ [n] to obtain all shares. ForceOp has to solve only (n − t + 1) puzzles, as t − 1 puzzles
are already opened.
i∈I H (cid:96)i(0)
· H (cid:96)j (0)
(cid:54)= H
j
i
j∈[t](xj) · (cid:96)j(0) where wlog., the ﬁrst t are valid shares.
• Output x :=(cid:80)
Fig. 9: Veriﬁable Timed Dlog for a group G with generator G and order q, where H = Gx, and x is the discrete log value
committed to
(cid:16)
DS .Vf
, tx∗, σ∗(cid:17)
, the simulator aborts by outputting abort3.
Hybrid H6: This is the same as the above execution except now
if in some session q6, an adversarial P0, outputs any transaction
tx∗ and a signature σ∗ such that ΠSIG
= 1
for some i ∈ [n] before time T0, the simulator aborts by
outputting abortPRIV,0.
Hybrid H7: This is the same as the above execution except now
if in some session q7, an adversarial P1, outputs any transaction
tx∗ and a signature σ∗ such that ΠSIG
= 1
for some k ∈ [˜n] before time T1, the simulator aborts by
outputting abortPRIV,1.
, tx∗, σ∗(cid:17)
pk (01)
pk (10)
DS .Vf
(cid:16)
k
i
19
(cid:17)
(cid:16)
(cid:48) (cid:54)= sk (10)
(cid:48) ← ΠVTD.ForceOp
Hybrid H8: This is the same execution as above except now, if
in some session q8, the adversary corrupts P0, and the simulator
for some j ∈ [˜n]. The
C (1)
obtains sk
j
simulator aborts with abort4, if sk
is
the secret share of the adversary generated in the freeze coin
phase.
Hybrid H9: This is the same execution as above except now, if
in some session q9, the adversary corrupts P1, and the simulator
for some j ∈ [n]. The
C (0)
obtains sk
j
simulator aborts with abort5, if sk
is
the secret share of the adversary generated in the freeze coin
(cid:48) ← ΠVTD.ForceOp
0,j where sk (10)
1,j where sk (01)
(cid:48) (cid:54)= sk (01)
(cid:16)
(cid:17)
0,j
1,j
3 : Is the same execution as H(cid:48)
Hybrid H(cid:48)(cid:48)
3 as in session
q3, except now the pre-signatures are hard-coded into the
simulation of ΓAdpSg.
We now show that the above hybrids are indistinguishable.
H3 ≡ H3,0: the hybrids are identical as the adversary only
sees random shares of secret keys of uniformly chosen shared
public keys.
H3,0 ≈c H(cid:48)
the indistinguishability follows immediately
3:
from the zero-knowledge property of the NIZK system
(PNIZK,LR ,VNIZK,LR ), for which the simulator SNIZK is guar-
anteed to exist.
H(cid:48)
3 ≡ H(cid:48)(cid:48)
3 : the executions are functionally equivalent. We only
change the way the output of the simulated 2-PC (ΓAdpSg) is
generated and therefore the hybrid executions H(cid:48)
3 are
identical.
3 and H(cid:48)(cid:48)
By a standard hybrid argument we can see that H3 ≈c H(cid:48)(cid:48)
3 .
This means that the probability with which the abort event
abort1 occurs in H3 is negligibly close to the probability of
it occurring in H(cid:48)(cid:48)
3 .
phase.
Simulator S: The execution of the simulator is deﬁned as the
execution in H9 while it interacts with the ideal functionality
Fswap. The simulator receives (swap1, id, V, ˜V , PK, ˜PK, U1)
and (swap2, id, V, ˜V , PK, ˜PK, U0) from Fswap. It proceeds
as in the execution of H9 by simulating the view of the
adversary appropriately as it receives messages from the ideal
functionality Fswap. If the simulated view deviates from the
execution of the ideal functionality, we note that the simulation
must have already aborted (as discussed in cases of abort in
the above hybrids).
i
i
Below we discuss the indistinguishability arguments and
we use the notation ≈c,≈T to denote computational indistin-
guishability for a PPT algorithm, and indistinguishability for
depth T bounded algorithms, respectively.
H0 ≈c H1: the indistinguishability follow from the security
JKGen in the freeze coin phase.
of the 2PC protocols, namely ΓSIG
Security of the 2PC protocol ΓSIG
JKGen for the derivation of keys
guarantees the existence of S2pc,1.
H1 ≈c H2: the indistinguishability follow from the security of
the 2PC protocols, namely ΓAdpSg in the swap lock phase. The
security of the 2PC protocol for the pre-signature generation
ΓAdpSg guarantees the existence of S2pc,2. Notice that the
simulator extracts the adversaries key shares in ΓSIG
JKGen using
S2pc,1 and uses them in the simulation of S2pc,2.
H2 ≈c H3: the only difference between the hybrids is that in
H3 the simulator aborts with abort1, if in some session q3,
the adversary corrupts user P1 and the adversary outputs σ∗
on a transaction tx (1)
for some
i ∈ [n] such that ΠSIG
= 1, before the
simulator initiates the swap on behalf of P0. Via Lemma 1,
we bound the probability Pr[abort1|H3] to be negligible.
Therefore the indistinguishability between H2 and H3 follows.
Lemma 1: There exists a negligible function negl such that
Pr[abort1|H3] ≤ negl(λ)
swp,i under the public key pk (01)
DS .Vf
swp,i, σ∗(cid:17)
pk (01)
, tx (1)
(cid:16)
Proof 2 (Lemma 1): To show this, we consider the following
hybrid executions. Using standard hybrid arguments we show
the indistinguishability of the hybrids. Using the ﬁnal hybrid
execution we show a reduction to the unforgeability property of
the adaptor signature scheme and show that Pr[abort1|H3] ≤
negl(λ). Note that these hybrid executions are only designed
to prove the above lemma.
Hybrid H3,0: Is the same execution as H3 as in session q3,
for i ∈ [n]
except now the simulator chooses the keys pk (01)
for j ∈ [˜n] uniformly at random and chooses the
and pk (10)
adversarial shares of the corresponding secret keys also to be
chosen unﬁrmly at random. Rest of the execution is unchanged.
Hybrid H(cid:48)
3: Is the same execution as H3,0 as in session
q3, except now the hard relation is chosen as follows. The
simulator samples Y ← R without the corresponding witness
and simulates the NIZK proof π ← SNIZK(Y ) using the NIZK
simulator SNIZK for the language LR. Rest of the execution is
unchanged.
j
i
20
i
3
k
(cid:16)
(cid:111)
(cid:110)
(cid:110)
(cid:111)
(cid:110)
(cid:111)
(cid:110)
pk (10)
(cid:17)
(cid:111)
i∈[n]\i∗ ,
˜σ(1)
swp,i∗ , Y
˜σ(1)
swp,i
We now show that Pr[abort1|H(cid:48)(cid:48)
3 ] ≤ negl(λ). To do this,
we show a reduction R that plays against the unforgeability
property of the adaptor signature scheme ΠSIG
AS and uses the
adversary A that triggers abort1 in H(cid:48)(cid:48)
3 in the q3-th session, as a
sub-routine. The reduction R plays in the aSigForge experiment
and gets as input a public key pk. The reduction guesses the
session q3 (from a polynomial number of sessions). It guesses
an index i∗ ∈ [n] and sets pk (01)
:= pk and sets other keys
i∗
pk (01)
by choosing their respective
k∈[˜n]
secret keys itself. The reduction follows the execution as in H(cid:48)(cid:48)
in the swap lock phase until the reduction outputs tx (1)
swp,i∗ to
. The reduction uses this Y
its challenger to learn
.
to setup the pre-signatures
i∈[n]\i∗ and
k∈[˜n]
The adversary outputs a signature σ∗. The reduction outputs
σ∗ to its own challenger.
reduction
if
Clearly the
= 1, the reduction succeeds in
ΠSIG
DS .Vf
winning aSigForge experiment. Therefore, if Pr[abort1|H(cid:48)(cid:48)
3 ]
is non-negligible, the reduction outputs a valid forgery with
the same non-negligible probability (except for a loss of a
polynomial factor owing to the guessing of the session q3 and
the index i∗). This is a contradiction to the unforgeability
AS . This implies
property of the adaptor signature scheme ΠSIG
3 ] ≤ negl(λ) and the lemma follows immediately.
Pr[abort1|H(cid:48)(cid:48)
(cid:3)
H3 ≈c H4: The only difference between the hybrids is that in
H4, the simulator aborts with abort2 if in some session q4,
the adversary corrupts P0 and does the following:
• the adversary outputs σ∗ on a transaction tx (0)
swp,i∗ , σ∗(cid:17)
efﬁcient. Notice
pk , tx (1)
˜σ(0)
swp,k
(cid:16)
that
der the public key pk (10)
ΠSIG
pk (10)
, tx (0)
DS .Vf
k
k
swp,k, σ∗(cid:17)
(cid:16)
swp,k un-
for some k ∈ [˜n] such that
= 1
is
(cid:16)
(cid:17)