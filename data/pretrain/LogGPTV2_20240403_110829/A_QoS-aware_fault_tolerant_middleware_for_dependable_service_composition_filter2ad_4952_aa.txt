**Title:** A QoS-Aware Fault-Tolerant Middleware for Dependable Service Composition

**Authors:** Zibin Zheng and Michael R. Lyu  
**DOI:** 978-1-4244-4421-2/09/$25.00 Â© 2009 IEEE  
**Authorized Use:** Limited to Tsinghua University. Downloaded on March 20, 2021, at 09:59:04 UTC from IEEE Xplore. Restrictions apply.

**Abstract:**
Service-oriented architecture (SOA) enables the dynamic and automatic composition of complex distributed systems by integrating Web services provided by different organizations. However, this introduces significant challenges in ensuring the dependability of SOA-based systems. In this paper, we propose a QoS-aware fault-tolerant middleware to address this critical issue. Our middleware incorporates a user-collaborated QoS model, various fault tolerance strategies, and a context-aware algorithm for determining the optimal fault tolerance strategy for both stateless and stateful Web services. The benefits of the proposed middleware are demonstrated through experiments, and the performance of the optimal fault tolerance strategy selection algorithm is extensively investigated. Experimental results show that the proposed middleware can efficiently, effectively, and optimally enhance fault tolerance in distributed SOA systems.

**1. Introduction**
Service-oriented architecture (SOA) has become a major framework for developing distributed systems. In an SOA environment, complex distributed systems can be dynamically and automatically composed by integrating existing Web services provided by different organizations. Since these Web service components are typically distributed across the Internet and invoked via communication links, building dependable SOA systems presents a significant challenge.

Software fault tolerance is a key approach to building reliable systems. One method, known as design diversity, involves using functionally equivalent but independently designed program versions [11]. This previously expensive approach is now a viable solution in the rapidly growing field of service-oriented computing, as independently designed Web services with overlapping or identical functionalities can be used to construct diversity-based fault-tolerant systems. There is an urgent need for systematic studies on how to apply traditional software fault tolerance techniques to the service-oriented computing domain.

Our work aims to advance the state-of-the-art in fault tolerance technologies for dependable service composition. We propose a QoS-aware fault-tolerant middleware to make fault tolerance in distributed SOA systems efficient, effective, and optimized. The contributions of this paper are threefold:
1. To align with the key concepts of Web 2.0, user collaboration is introduced into our QoS model for Web services, and systematic formulas and algorithms for QoS composition are provided.
2. Commonly used fault tolerance strategies for service composition are identified.
3. An adjustable, context-aware algorithm is designed to determine the optimal fault tolerance strategy dynamically and automatically for both stateless and stateful Web services.

Our middleware places significant emphasis on applying fault tolerance techniques to stateful Web services, which is more challenging due to their complexity compared to stateless Web services. Although the proposed middleware is tailored for the service-oriented environment, many of the proposed techniques can also be applied to other distributed computing platforms (e.g., DCOM and CORBA) and standalone systems.

The rest of this paper is organized as follows: Section 2 introduces the system architecture. Section 3 defines the QoS model and fault tolerance strategies. Section 4 designs optimization algorithms. Section 5 presents our implementation and experimental results, and Section 6 concludes the paper.

**2. System Architecture**
Before delving into the system architecture, we first explain some basic concepts:
1. **Atomic Services:** These are self-contained Web services that provide services to users independently without relying on any other Web services.
2. **Composite Services:** These are Web services that provide services by integrating other Web services.
3. **Service Composition:** This refers to the process of combining multiple atomic and composite services to form a more complex and comprehensive service.

[Continued in the next section]