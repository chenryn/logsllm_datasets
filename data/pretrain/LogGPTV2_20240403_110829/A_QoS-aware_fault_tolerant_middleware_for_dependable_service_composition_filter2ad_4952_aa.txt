title:A QoS-aware fault tolerant middleware for dependable service composition
author:Zibin Zheng and
Michael R. Lyu
978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
239
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:59:04 UTC from IEEE Xplore.  Restrictions apply. 
AQoS-AwareFaultTolerantMiddlewareforDependableServiceCompositionZibinZhengandMichaelR.LyuDepartmentofComputerScienceandEngineeringTheChineseUniversityofHongKong{zbzheng,lyu}@cse.cuhk.edu.hkAbstractBasedontheframeworkofservice-orientedarchitecture(SOA),complexdistributedsystemscanbedynamicallyandautomaticallycomposedbyintegratingdistributedWebser-vicesprovidedbydifferentorganizations,makingdepend-abilityofthedistributedSOAsystemsabigchallenge.Inthispaper,weproposeaQoS-awarefaulttolerantmiddle-waretoattackthiscriticalproblem.Ourmiddlewarein-cludesauser-collaboratedQoSmodel,variousfaulttoler-ancestrategies,andacontext-awarealgorithmindetermin-ingoptimalfaulttolerancestrategyforbothstatelessandstatefulWebservices.Thebeneﬁtsoftheproposedmid-dlewarearedemonstratedbyexperiments,andtheperfor-manceoftheoptimalfaulttolerancestrategyselectional-gorithmisinvestigatedextensively.Asillustratedbytheex-perimentalresults,faulttoleranceforthedistributedSOAsystemscanbeefﬁcient,effectiveandoptimizedbythepro-posedmiddleware.1.IntroductionService-orientedarchitecture(SOA)isbecomingamajorsoftwareframeworkfordistributedsystems.Intheservice-orientedenvironment,complexdistributedsystemscanbedynamicallyandautomaticallycomposedbyintegratingex-istingWebservices,whichareprovidedbydifferentorgani-zations.SincetheWebservicecomponentsareusuallydis-tributedacrosstheInternetandinvokedbycommunicationlinks,buildingdependableSOAsystemsbecomesagreatchallenge.Softwarefaulttoleranceisanimportantapproachforbuildingreliablesystems.Oneapproachtosoftwarefaulttolerance,alsoknownasdesigndiversity,istoemployfunctionallyequivalentyetindependentlydesignedpro-gramversions[11].Thisused-to-beexpensiveapproachnowbecomesaviablesolutiontothefast-growingservice-orientedcomputingarena,sincetheindependentlydesignedWebserviceswithoverlappingoridenticalfunctionalitiesaresuitedfortheconstructionofdiversity-basedfaulttoler-antsystems.Thereisanurgentneedforsystematicstudiesonhowtoapplytraditionalsoftwarefaulttolerancetech-niquestotheservice-orientedcomputingarena.Ourworkaimsatadvancingthecurrentstate-of-the-artinfaulttolerancetechnologiesfordependableservicecom-position.WeproposeaQoS-awarefaulttolerantmiddle-waretomakefaulttoleranceforthedistributedSOAsys-temsefﬁcient,effectiveandoptimized.Thecontributionsofthispaperarethree-fold:1)tocomplywiththekeyconceptofWeb2.0,user-collaborationisintroducedinourQoSmodelofWebservices,andsystematicformulaandalgo-rithmsforQoScompositionareprovided;2)commonly-usedfaulttolerancestrategiesforservicecompositionareidentiﬁed;and3)anadjustablecontext-awarealgorithmisdesignedfordeterminingoptimalfaulttolerancestrategydynamicallyandautomaticallyforbothstatelessandstate-fulWebservices.OurmiddlewareplacesgreatemphasisonapplyingfaulttolerancetechniquesforstatefulWebservices,whichismorechallengingsincestatefulWebservicesaremuchmorecomplexthanstatelessWebservices.Althoughtheproposedmiddlewareisrestrictedtotheservice-orientedenvironment,mostoftheproposedtechniquescanalsobeappliedtootherdistributedcomputingplatforms(e.g,DCOMandCORBA)andstand-alonesystems.Therestofthispaperisorganizedasfollows:Section2introducesthesystemarchitecture.Section3deﬁnestheQoSmodelandfaulttolerancestrategies.Section4designsoptimizationalgorithms.Section5showsourimplementa-tionandexperimentsandSection6concludesthepaper.2.SystemArchitectureBeforeintroducingthesystemarchitecture,weﬁrstex-plainsomebasicconceptsasfollows:1)atomicservicespresentself-containedWebserviceswhichprovideservicestousersindependentlywithoutrelyingonanyotherWebservices;2)compositeservicespresentWebserviceswhichprovideservicesbyintegratingotherWebservices;3)ser-978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
240
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:59:04 UTC from IEEE Xplore.  Restrictions apply. 