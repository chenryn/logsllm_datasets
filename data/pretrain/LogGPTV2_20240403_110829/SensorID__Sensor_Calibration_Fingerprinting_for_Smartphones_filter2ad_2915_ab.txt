z
(b) Consecutive differences between gyroscope measurements
Fig. 1: Raw gyroscope data collected from a Samsung Galaxy
S8 and an iPhone X
If there is no factory calibration, the gain matrix G will
be equal to the FG · I, where FG is the nominal gain of the
gyroscope. In this case, we will have:
⎤
⎦ = FG
⎡
⎣ΔOx
ΔOy
ΔOz
⎤
⎦
⎡
⎣ΔAx
ΔAy
ΔAz
(4)
is an integer, ΔOi should be a multiple of
Since ΔAi
the nominal gain. Fig. 1 (b) shows the difference between
consecutive measurements for each of the three axes. Notably,
the ﬁgure only presents a small range of data to show the
results more clearly. As seen in Fig. 1 (b), the difference for the
(cid:23)(cid:21)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
Gyro data in native units (rad/s)
Gyro data converted to deg/s
Gyro data converted to deg/s, in Q32.32 format.
x
e
d
n
I
a
t
a
D
1000
2000
3000
4000
5000
6000
7000
8000
9000
10000
11000
x
e
d
n
I
a
t
a
D
1000
2000
3000
4000
5000
6000
7000
8000
9000
10000
11000
x
e
d
n
I
a
t
a
D
1000
2000
3000
4000
5000
6000
7000
8000
9000
10000
11000
10
20
30
Bit Index
40
50
60
10
20
30
Bit Index
40
50
60
10
20
30
Bit Index
40
50
60
(a) rad/s, IEEE 754 format
(b) deg/s, IEEE 754 format
(c) deg/s, Q32.32 format
Fig. 2: Different binary representations of the raw gyroscope data
Samsung Galaxy S8 is always a multiple of a constant value
(nominal gain). By contrast, the differences for the iPhone X
are not a single multiple. Fig. 1 also reveals that each axis of
the gyroscope in the iPhone X has a different gain and bias
(the x axis has a slightly lower gain than the y and z axes).
Overall, Fig. 1 demonstrates two things: (i) the gain matrix
of the gyroscope in the iPhone X is factory calibrated while
the one in the Samsung Galaxy S8 is not; and (ii) the
iOS API for accessing raw sensor data obtains the factory
calibrated data. We further implement the same experiment on
other iOS device models and conﬁrm their gyroscope is also
factory calibrated. The factory calibration of motion sensors
in Android devices is discussed in §V-D.
B. Nominal Gain Estimation
In general, manufacturing imperfections introduce idiosyn-
crasies across different sensors. If factory calibration is carried
out on a per-device basis, then the calibration matrices, which
include the gain matrix G and the bias matrix B, may also
be unique. Therefore, if we can recover any of these matrices,
then it may be used as a device ﬁngerprint. In this paper we
focus on recovering the gain matrix G. We ﬁrst investigate
ﬁngerprinting devices from mobile apps, where raw sensor
data is accessible.
To recover the gain matrix G, we need to know the nominal
gain of each device. For some earlier iOS devices, such as
iPhone 4, the nominal gain of the gyroscope, 70 millidegrees
per second (mdps), is speciﬁed in the datasheet. Although
we could not ﬁnd the gyroscope speciﬁcation for recent
iOS device models, we can estimate the nominal gain from
gyroscope measurements.
Equation 3 shows that the bias B can be eliminated by
taking the difference between two sensor outputs. From Fig. 1
(b), we observe that the actual gain of each axis is in close
proximity to each other (or to the nominal gain) and the
ﬂuctuation within each cluster is small compared with the large
gap between different clusters. This implies that the actual
gain matrix is close, but not equal, to the ideal gain matrix
(FG·I). Since the iPhone X was resting on the desk during data
collection, the difference between consecutive ADC outputs
TABLE I: Estimated gyroscope nominal gain for iOS devices
Model
Nominal Gain
(mdps)
iPhone 5S∗/6/6 Plus/6S/6S Plus/7/7 Plus/8/8 Plus/SE
iPhone X/XS/XS Max
iPad Pro 9.7/10.5/12 inch
iPhone 4/4S/5/5C/5S∗,
iPad 3/Mini/Mini 4/Mini Retina/Air/Air 2
∗ iPhone 5S devices have two possible nominal gain values.
61
70
ΔAi should be small (e.g., 0, ±1). To estimate the nominal
gain (FG) of the iPhone X, we ﬁnd the cluster with only
positive values that is closest to 0 but its range does not
include 0. In the case of Fig. 1 (b), the qualiﬁed clusters is
the one inside dashed black lines. Then the average of all the
values inside the cluster, which includes data from all three
axes, can be used as a reliable estimate of the nominal gain of
the iPhone X. Note that this approach requires the device is
stationary (e.g., at rest on a desk) during measurement so that
we have enough data points with ΔAi = ±1. This is usually
not a problem since we only need to estimate the nominal gain
once for each device model. Appendix A shows the estimated
nominal gain from two iPhone X devices using this approach.
Table I lists the nominal gain (in mdps) of the gyroscope
for all the iOS devices that we have measured. Note that we
have observed two possible nominal gain values for iPhone 5S
devices. This may be because some iPhone 5S devices use a
different IMU model from others. The estimated nominal gain
of 61 mdps indicates that the sensor is likely conﬁgured to a
measurement range of ±2000 dps and resolution of 16 bits
(4000/216 ≈ 0.061).
C. Data Representation
Before looking into the gyroscope ﬁngerprinting technique,
we ﬁrst investigate the data representation format used by the
hardware. We start by looking at the binary representation
of the raw sensor data. In particular, we collect 3,918 raw
gyroscope samples from an iPad Air 2. Each sample is a 3-
tuple consisting of triaxial measurements; the native unit pro-
vided by the iOS SDK is radians per second. A visualization
(cid:23)(cid:21)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
~
Update G
ΔA
(cid:610)
Not Complete
Failed
BOTH APPROACHES
G
(cid:611)
Pass
(cid:612)
(cid:613)
IMPROVED APPROACH
(cid:608)(cid:3)
(cid:609)(cid:3)
(cid:39)(cid:68)(cid:87)(cid:68)(cid:3)(cid:38)(cid:82)(cid:79)(cid:79)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:39)(cid:68)(cid:87)(cid:68)(cid:3)(cid:51)(cid:85)(cid:72)(cid:83)(cid:85)(cid:82)(cid:70)(cid:72)(cid:86)(cid:86)(cid:76)(cid:81)(cid:74)
(cid:36)(cid:39)(cid:38)(cid:3)(cid:57)(cid:68)(cid:79)(cid:88)(cid:72)(cid:3)(cid:53)(cid:72)(cid:70)(cid:82)(cid:89)(cid:72)(cid:85)(cid:92)
(cid:42)(cid:68)(cid:76)(cid:81)(cid:3)(cid:48)(cid:68)(cid:87)(cid:85)(cid:76)(cid:91)(cid:3)(cid:40)(cid:86)(cid:87)(cid:76)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:57)(cid:68)(cid:79)(cid:76)(cid:71)(cid:76)(cid:87)(cid:92)(cid:3)(cid:38)(cid:75)(cid:72)(cid:70)(cid:78)
(cid:54)(cid:72)(cid:81)(cid:86)(cid:82)(cid:85)(cid:44)(cid:39)(cid:3)(cid:42)(cid:72)(cid:81)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
Fig. 3: General steps to recover the SENSORID
of the raw gyroscope data, in the IEEE 754 ﬂoating point
representation, is shown in Fig. 2 (a).
Here, the colors show the various parts of the IEEE 754
representation: bit 1 (yellow) is the sign bit, bits 2–12 (green)
are the exponent, and bits 13–64 (blue) are the signiﬁcand.
Overall, no obvious structure is observed in this form. How-
ever, if we convert the data into units of degrees per second
and replot, then we obtain the results shown in Fig. 2 (b).
It is now obvious that the internal calculations have much
less precision than is available in IEEE 754 representation
and must be in units of degrees per second. We gain some
more information if we convert the double precision numbers,
in degrees per second (dps), into ﬁxed-point Q32.32 form.
Results are presented in Fig. 2 (c).
In Fig. 2 (c), the ﬁrst 32 bits contain the integer part of
the data (two’s complement) and the last 32 bits show the
fractional part. It is obvious that there are only 16 bits of
data in the fractional part. The 16-bit resolution of gyroscope
outputs is observed on all the iOS devices we have tested.
There are a few possible reasons for this, but the simplest is
that the value in the gain matrix G is stored as a signed integer
with a resolution of 2−16
dps. After investigation, we ﬁnd that
every device that uses an M-series motion coprocessor, which
was released by Apple in September 2013 with the iPhone 5S,
shows this pattern. The purpose of the motion coprocessor is
to ofﬂoad the collection and processing of sensor data from
the CPU. However, for older devices such as iPhone 4 and
iPhone 4S, gain matrix values are stored with more precision
and the calibration involves truncation down to 2−16
dps after
the gain is applied. The complete set of devices that use the M-
series motion coprocessor can be found online.3 As discussed
in §III-D, the lack of resolution in these devices allows us to
precisely recover the gain matrix G.
1) Basic Approach: We ﬁrst consider the case that the
device is stationary or moving slowly during sampling.
Data Collection. We collect a small number of samples
from the gyroscope through a mobile app at the maximum
sampling frequency. Empirically, we ﬁnd 100 samples col-
lected in less than 1 second is sufﬁcient. We use O =
[O0, O1, · · · , On−1] to denote the collected data, where Oi =
[Oix
is a 3-by-1 vector.
, Oiz ]T
, Oiy
Data Preprocessing. After collecting the data, we calculate
ΔO by differencing the consecutive outputs for all three axes.
In other words, ΔO is calculated by the following equation:
ΔO = [O1 − O0, O2 − O1, · · · , On−1 − On−2]
ADC Value Recovery. In this step, we aim to recover ΔA,
which is the difference between consecutive ADC outputs.
From Equation 3 we know that ΔA can be calculated by:
ΔA = G−1ΔO
(5)
where G−1
is the inverse of the gain matrix G. However,
the value of G is unknown at the moment. Nevertheless, we
can set G to the ideal value G0 = FG · I, where FG is the
nominal gain of the gyroscope. Since the deterministic errors
are comparatively small, G should be relatively close to G0
(§III-B). Since ΔA only has integer values, we can estimate
ΔA by:
(cid:6)ΔA = round(G−1
0 ΔO)
(6)
(cid:6)ΔA may not be the true value. Therefore, we further
where the round function rounds each element to the nearest
integer. However, since G0 is not equal to G, the rounded
value
calculate the rounding error Er
deﬁned as follows:
, which is
3×(n−1)
∈ R
ΔA
ΔA = |(cid:6)ΔA − G−1
r
0 ΔO|
D. Fingerprinting from Mobile Apps
E
(7)
The general process to generate the SENSORID is illustrated
in Fig. 3, which consists of six major steps: Data Collec-
tion, Data Preprocessing, ADC Value Recovery, Gain Matrix
Estimation, Validity Check, and SensorID Generation. In the
following of the section, we ﬁrst present a basic approach to
generate the gyroscope ﬁngerprint (GYROID), which works
well when the device is stationary. Then, we further propose
an improved scheme that can reliably generate the GYROID
even when the device is moving.
3https://en.wikipedia.org/wiki/Apple motion coprocessors
ΔAi , which means the i-th column in Er
To ensure the estimated values are correct, we require that
every value in Er
ΔA,
be lower than a threshold Γ (e.g., 0.1). If not, we believe the
rounding is ambiguous and remove both
the dataset. Once all ambiguous values are removed, we will
regard the estimated
(cid:6)ΔAi and ΔOi from
(cid:6)ΔA as the true ADC value matrix ΔA.
Note that, this is only true if the device is stationary or
moving slowly, in which case the absolute values of ΔA are
small. Otherwise, any rounding error could be accumulated
and results in rounding to an incorrect integer value.
(cid:23)(cid:21)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
(cid:7)G and
3×1
(cid:7)G should
Gain Matrix Estimation. After recovering the ADC value
matrix ΔA, we can estimate the gain matrix
(cid:7)G as follows:
(cid:7)G = ΔO/ΔA
Here, the matrix right division operation returns a least
squares solution of G that minimizes the norm of the vector
GΔA − ΔO.
Validity Check. To quantify the deviation between
the true value of G, we deﬁne the estimation error Ee ∈ R
as follows:
e = std(ΔO − (cid:7)GΔA)
E
where std is the row-wise standard deviation function. If the
estimation error is small (i.e., max(Ee) < Θ), then
be close to the true gain matrix G.
If the device uses an M-series motion coprocessor, we
can implement another check to ensure the accuracy of our
estimation and precisely recover the true gain matrix G.
(cid:7)G that we estimated
⎡
⎤
⎣ 0.001068460229340 −0.000009587379924 −0.000002929477199
⎦
from an iPhone XS in the units of radians per second (rps):
By way of an example, here is the
0.000002929477199
0.001073520235411
−0.000001065264436 −0.000006657902725
0.000005858954398
0.001069525493776
Recall that the gain matrix of the iPhone XS, which uses
Apple M12 coprocessor, only has 2−16
resolution in the units
of dps. Therefore we can convert from rds to dps and estimate
the underlying integers:(cid:7)G · 216 · 180/π =
⎡
⎣ 4012.000000000001 −35.999999999999318 −10.999999999999677
11.000000000000174
−3.999999999999980 −25.000000000000011
4030.999999999999
21.999999999999631
4016.000000000000
⎤
⎦
In this case, these numbers are extremely close to whole
integers, so these can be rounded to obtain the true gain matrix
G. To ensure the rounding is safe, we calculate the rounding
error Er
∈ R
3×3
G
r
as follows:
G = |(cid:8)Gd · 216 − round(
(cid:7)G in the units of dps.
E
(cid:8)Gd means
(cid:8)Gd · 216)|
where
If the maximum value in Er
G is lower than a threshold
Φ (e.g., 0.01), then we believe that the rounding is reliable.
Otherwise, if any of these checks fail, then it is likely that
the device was moving during data collection. For this basic
approach, we need to repeatedly collect another batch of data
until the estimation error and rounding error are small enough.
GYROID Generation. The generation of the GYROID can
be categorized into two groups based on whether the device
has an M-series coprocessor. If the device does have an M-
series coprocessor, the GYROID is deﬁned as follows:
0 · 216)
GYROID = round(
(8)
d
Or in words, the GYROID is the gain matrix G after subtract-
ing the nominal gain in units of 2−16
dps. For instance, the
GYROID of the iPhone XS in previous example is:
(cid:8)Gd · 216) − round(G
⎤
⎡
⎦
⎣ 14 −36 −11
11
33
−4 −25
22