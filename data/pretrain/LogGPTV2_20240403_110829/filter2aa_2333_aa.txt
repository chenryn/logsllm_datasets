State of DNS Rebinding
Attack & Prevention Techniques and
the Singularity of Origin
Gérald Doussot & Roger Meyer | DEF CON 27
New Tool: Singularity
●
Everything you need for DNS 
rebinding
●
Reliable: Default settings just work
●
Performant: up to 20x faster (3s vs 
60s)
●
Built-in payloads: Jenkins, Rails, 
AWS Instance Metadata, etc...
●
Autopwn: Networks & services 
scan, service detection and 
auto-exploitation
Contributions
Neat Technical Details/Techniques
●
Speed: Multiple DNS answers and 
cache flooding 
●
Protection Bypasses: 3 different 
bypasses for common DNS 
rebinding protections
○
Using DNS trickery
●
Hook/Control - Interactively browse 
the victim’s internal network
○
Websocket proxying, no HTTP proxy 
needed!
Agenda
●
A Refresher on DNS Rebinding
●
DNS Rebinding Attack: Building on reliable foundations
●
The Need for Speed: DNS rebinding in 3 seconds
●
Protection Bypasses: 3 different bypasses for common DNS rebinding 
protections
●
Hook and Control: Interactively browse the victim’s internal network
●
Scanning for Vulnerable Host Services
●
Automation: Service detection & exploitation and orchestrating all the above 
Introduction
Who Are We
●
Gérald Doussot and Roger Meyer
●
Security consultants at 
●
San Francisco, CA
●
Authors of Singularity of Origin,
 a DNS Rebinding Attack Framework 
https://github.com/nccgroup/singularity
Why Should You Care About DNS Rebinding
bind 0.0.0.0
Why Should You Care About DNS Rebinding
bind 127.0.0.1
Why Should You Care About DNS Rebinding
Why Should You Care About DNS Rebinding
Why Should You Care About DNS Rebinding
Why Should You Care About DNS Rebinding
Why Should You Care About DNS Rebinding
Why Should You Care About DNS Rebinding
Why Should You Care About DNS Rebinding
●
Prevalence of apps exposing HTTP servers on localhost (e.g. Electron)
●
IoT devices exposing sensitive interfaces on internal networks
●
Misconceptions
○
DNS rebinding is slow
○
DNS rebinding can be solved by out-of-the-box DNS filtering products or services
A Refresher on DNS 
Rebinding
On the Origin of Web Documents
The “Origin” of a resource is a tuple consisting of scheme, host  and port. 
Two documents A and B share the “same-origin” if they have identical scheme, 
host and port components.
●
https://mysite.com/hello.html  and https://mysite.com/world.html ✔
●
https://mysite.com/hello.html and https://attacker.com/hello.html ✖
On the Origin of Web Documents
The “same-origin policy” dictates how two different origins may interact. 
These interactions between origins are typically permitted: form submissions, 
links, redirects, content embedding (JavaScript, CSS).
Cross-origin reads are typically not allowed e.g. reading the content of an HTML 
document located on gmail.com from site attacker.com.
DNS Rebinding permits to bypass restrictions imposed by the same-origin 
policy.
DNS Rebinding Attack Walkthrough
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
Intranet
Internet
DNS Rebinding Attack Walkthrough
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
Intranet
Internet
Unauthenticated 
access
DNS Rebinding Attack Walkthrough
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
Intranet
Internet
Unauthenticated 
access
Blocked
DNS Rebinding Attack Walkthrough
DNS query rebind.it
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
DNS Rebinding Attack Walkthrough
DNS query rebind.it
DNS A record response: 
35.185.206.165 
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
DNS Rebinding Attack Walkthrough
DNS query rebind.it
DNS A record response: 
35.185.206.165 
DNS cache expires;
DNS query rebind.it
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
DNS Rebinding Attack Walkthrough
DNS query rebind.it
DNS A record response: 
35.185.206.165 
DNS cache expires;
DNS query rebind.it
DNS A record response: 
127.0.0.1
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
DNS Rebinding Attack Walkthrough
DNS query rebind.it
DNS A record response: 
35.185.206.165 
DNS cache expires;
DNS query rebind.it
DNS A record response: 
127.0.0.1
GET/POST 
request to 
127.0.0.1
Attacker DNS 
& Web Server
35.185.206.165
Target Service 
127.0.0.1
Victim (Browser)
Learning More About the Basics of DNS Rebinding
●
[2017] DEF CON 25 - Luke Young - There’s no place like 127.001: Achieving 
reliable DNS rebinding (https://youtu.be/Q0JG_eKLcws)
●
[2010] Black Hat USA & DEF CON 18 - Craig Heffner - How to hack millions of 
routers (https://youtu.be/VAaqABpjiUQ / https://youtu.be/Zazk0plSoQg)
●
[2007] 24C3 - Dan Kaminsky - DNS Rebinding And More Packet Tricks 
(https://youtu.be/YwbpnZe74ds)
●
[2018] NorthSec - Danny Cooper & Allan Wirth - Homeward Bound: Scanning 
Private IP Space with DNS Rebinding (https://youtu.be/9iSvAS6IdiM)
●
[2013] WOOT '13 - Yunxing Dai, Ryan Resig - FireDrill: Interactive DNS 
Rebinding (https://www.usenix.org/conference/woot13/workshop-program/presentation/Dai)
●
[2007] Stanford University - Protecting Browsers from DNS Rebinding Attacks 
(https://crypto.stanford.edu/dns/)
iOS Demo: DNS rebinding in 5 s (cache flooding)
DNS Rebinding 
Attack: Building on 
Reliable Foundations
You Visit a 
Completely 
Innocuous 
Looking Website
Malicious JavaScript Code Downloaded.
Sending First DNS Query...
What’s in a Query?
Example DNS query from a browser to Singularity DNS server:
s-35.185.206.165-127.0.0.1-3504134790-fs-e.d.rebind.it
●
(s)tart
●
35.185.206.165: Attacker Host IP Address
●
127.0.0.1: Target Service IP Address or Name
●
3504134790: Session ID
●
fs: DNS Rebinding Strategy - “first then second” IP address.
●
(e)nd
●
d.rebind.it: Attack Host Domain 
Removing HTTP Performance Enhancing 
Techniques That Impede DNS Rebinding
HTTP Caching - We want the browser to get fresh copies of resources.
Keep-Alive - We don’t want the browser to stick to the attacker’s server.
TTL Values
# 1st query
$ dig +noall +answer  s-35.185.206.165-127.0.0.1-123-fs-e.d.rebind.it
S-35.185.206.165-127.0.0.1-123-fs-e.d.rebind.it. 0 IN A 35.185.206.165
# 2nd query
$ dig +noall +answer  s-35.185.206.165-127.0.0.1-123-fs-e.d.rebind.it 
s-35.185.206.165-127.0.0.1-123-fs-e.d.rebind.it. 0 IN A 127.0.0.1
Why not 1 second? We hoped 0 second would break stuff[1]. It did not so far, as far 
as we know, it is a legitimate value[2].
[1] https://mark.lindsey.name/2009/03/09/never-use-dns-ttl-of-zero-0/ 
[2] https://tools.ietf.org/html/rfc2181#page-10 
How Do We Know We’ve Successfully Rebinded?
Two ways to differentiate the attacker server from the target service:
$ curl -v http://s-35.185.206.165-127.0.0.1-3504134792-fs-e.d.rebind.it:8080/
 (...)
HTTP/1.1 200 OK
X-Singularity-Of-Origin: t # Custom HTTP Header 
 (...)
(...) # Index Token
Randomness and Catering for Potential Interference
IPS/IDS/other interference via spurious DNS queries
●
Challenge: the environment IPS/IDS may make their own queries to the 
attacker domains in addition to the target, resulting in incorrect DNS/out of 
sequence DNS answers for the target.
●
Solution: Use the random DNS rebinding strategy.
●
Slower technique in general (but you could get lucky!).
The Need for Speed: 
DNS Rebinding in 3 
Seconds
Implementation Details Matter!
DNS Rebinding speed varies based on a number of factors: 
●
OS implementation: Windows or Unix-like (Linux, macOS)
●
Browser vendor: IE/Edge, Firefox, Chrome/Chromium Edge, Safari
●
Target specification: local, remote
●
External factors: Spurious DNS queries e.g. presence of IPS/IDS
DNS rebinding may take 40+ min or ~3s on Edge depending on the strategy!
We can automatically fingerprint to optimize for speed in some conditions. More 
on this later!
Multiple Answers Rebinding Strategy with Targets 
127.0.0.1 / 0.0.0.0
The time-varying (Singularity’s “first then second”) DNS rebinding technique is ~60 
seconds on all browsers except IE/Edge.
Multiple answers (respond with attacker and target addresses, then block attacker 
with ephemeral firewall rule) is near instantaneous. 127.0.0.1 works on Windows 
only. 
We got it to work on Unix-y machines (Linux, macOS) with “0.0.0.0”. 
             Solid and fast DNS rebinding against all “localhost” services.
Multiple Answers Rebinding Strategy Illustrated
Target Browser
Attacker DNS 
& Web Server
35.185.206.165
Target Service
127.0.0.1
DNS query rebind.it
DNS A record response: 
1.
35.185.206.165
2.
127.0.0.1
t: 0s - HTTP request 1
t: 2s - HTTP request 3
t: 1s - HTTP request 2
Blocked!
DNS Cache Flooding
Multiple Answers works well for the loopback (0.0.0.0 or 127.x.x.x) interface - 
inconsistent results for other target specifications.
On Google Chrome or Safari/iOS platforms, when flooding the DNS cache with 
1K+ queries for which we receive valid answers, we observe DNS rebinding time 
with the time varying attack technique (first then second) of 5 to 40 seconds, a 
substantial progress over the average of ~60 seconds.
Flooding the cache is performed in a web worker.
Speed Measured / Target Definition
Browser
OS
Strategy
Time to 
Exploit
Fetch Interval
Target Spec
Windows 10
MA
3 seconds
1 second
127.0.0.1
Ubuntu
MA
3 seconds
1 second
0.0.0.0
macOS
MA
3 seconds
1 second
0.0.0.0