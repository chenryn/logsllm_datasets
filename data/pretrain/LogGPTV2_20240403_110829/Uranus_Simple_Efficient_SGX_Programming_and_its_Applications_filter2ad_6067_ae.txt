### Attacker Rollback of Encrypted Data

An attacker may attempt to roll back encrypted data outside of enclaves. Previous research [53] has shown that this attack can be mitigated using SGX monotonic counters within enclaves. Uranus addresses this issue by providing an API for trusted code to access these counters and compare their values with those in the decrypted data.

### Iago Attacks

In this paper, we consider Iago attacks, which compromise the type-safety or control flow integrity of trusted code when running a JVM within an enclave. Specifically, an attacker may manipulate values or object references passed to `JECall` or return results from `JOCall` during enclave transitions, leading to three types of attacks:

1. **Control Flow Manipulation**: An attacker may try to forge a field of an object (OU) to alter the control flow of enclaves. Uranus prevents such attacks by prohibiting enclave code from reading objects outside the enclave and requiring developers to use Uranus’s API to read and verify the legitimacy of the content.
   
2. **Pointer Manipulation**: An attacker may change pointers stored in a field of OU to point to memory within the enclave, causing subsequent writes to poison the call stack. Uranus prevents this by ensuring that its API for reading from OU checks if the pointer is within the enclave's memory.

3. **Class Forgery**: An attacker may forge the class of OU to change the control flow when executing its member functions. Uranus mitigates this by forbidding the execution of OU’s member functions within enclaves.

Overall, Uranus ensures that attackers cannot poison enclave memory during enclave transitions or during proactive/mistaken cross-boundary memory access, thereby preventing Iago attacks from compromising the type-safety and integrity of trusted Java code. Verifying the content of `JOCall` to prevent application-level Iago attacks remains the responsibility of the application developers, as Uranus does not have knowledge of the semantic and actual return results of `JOCall`.

### Information Leakage via AEX and OCall

An attacker may observe the number of Asynchronous Enclave Exits (AEX) or Outcalls (OCall) in JVM components during the execution of trusted code. By observing OS signals thrown from enclaves, the attacker can infer the number of exceptions or garbage collection (GC) events during a `JECall`, potentially inferring the plaintext data being processed in the enclave. Uranus mitigates this leakage by isolating its GC and exception handler components from the OS, ensuring that the execution flows of the same trusted code on different encrypted data produce similar numbers of AEX/OCall. Handling application-level side-channels (e.g., the number of `JOCall`) is the responsibility of the developers.

### Java Exceptions and Dynamic Checks

We tested the robustness of Uranus’s dynamic checks (§4.3) by writing buggy code that writes enclave data to the outside. Uranus threw an `EnclaveException` with encrypted stack traces, revealing no plaintext. To continue the execution of the enclave, we implemented a handler in the enclave code that logs the exception and continues handling user requests. The program then continued, wrote encrypted exception logs, and returned `null` without leaking any sensitive data.

### Limitations and Future Work

Our current implementation of Uranus supports Java and Scala, and it can be extended to run other dynamic languages such as Python [7] and JavaScript [8] in the future, as the JVM can interpret these languages. Additional TEE implementations like TrustZone [27, 32] and Sanctum [30] can also be integrated into Uranus with proper engineering to achieve cross-platform compatibility.

Uranus implements an easy-to-verify Just-In-Time (JIT) compiler based on Hotspot’s interpreter. While Spark-Uranus demonstrates functionality with typical big-data datasets, its performance overhead is non-negligible (§6.3) due to the lack of Intermediate Representation (IR) optimizations. In future work, Uranus’s JIT can incorporate easy-to-verify IR optimizations [52] to improve efficiency and include type-safety formal verification [74] for correctness.

Our current evaluation focuses on Spark and Zookeeper, but Uranus can also protect other data-handling applications (e.g., Storm [1]) and web servers (e.g., Tomcat [2]) with appropriate engineering. For Spark and Zookeeper, the partitioning of trusted and untrusted code is already clear in relevant SGX systems (e.g., SGX-Spark and SecureKeeper). Automatically inferring a partition between trusted and untrusted code for arbitrary applications is not the main focus of this paper, but static analysis tools (e.g., Glamdring [51] and [57]) can complement Uranus. Uranus’s boundary checking protocol can enforce the trusted and untrusted code partition at runtime, complementing unsound assumptions in Java static data flow analysis (§4.3). Differential privacy [35, 49] and data shuffling [77] can also be integrated into Spark-Uranus to provide better data protection.

### Related Work

**Trusted Execution Environments (TEE)**: TEEs provide strong confidentiality and integrity guarantees for applications while removing the BIOS, hypervisor, and OS from the Trusted Computing Base (TCB). Various TEE implementations exist, including Intel SGX [38], AMD SEV [42], ARM TrustZone [17], and IBM SecureBlue [25]. Komodo [32] and Sanctum [30, 64] propose verifiable TEEs on ARM and RISC-V, respectively. Recent TEE implementations like Timber-V [73] and Ginseng [75] focus on memory efficiency and low-TCB. OpenSGX [39] is an SGX emulator for research. TLR [58] proposes a .NET framework running on ARM TrustZone, but it requires a trusted third party for attestations and assumes a secure OS, whereas Uranus assumes an untrusted OS and proposes OS-decoupled components to tackle Iago attacks and side-channel leakage.

**SGX-based Systems**: SGX systems can be categorized into two types based on the code running in the SGX. The first category, "shielding," runs all application code in the SGX enclave (e.g., Haven [21], SCONE [18], Graphene-SGX [67], PESOS [47], and SGX-Kernel [66]). The second category, "customizing," runs only the code processing secret plaintext data in the SGX (e.g., Opaque [77], VC3 [59], SecureKeeper [28], S-NFV [61], SGX-Tor [45], Panoply [62], SGX-BigMatrix [60], SGX-Log [43], MiniBox [50], ShieldStore [46], EnclaveDB [56], SGX-Spark [11], and Ryoan [37]). Uranus belongs to the customizing category, as it annotates and protects sensitive functions. Panoply [62] provides POSIX API for running parts of C/C++ applications in enclaves. SGX-BigMatrix [60] is a Python-based secure and oblivious data analytics system for matrix computation. SGXElide [20] loads encrypted code at runtime but does not handle dynamically loaded code as Uranus does. JIT-Guard [33] uses SGX to protect a JIT compiler, not applications. Recent systems like RustSGX [71], GoTEE [34], and ScriptShield [70] focus on specific security challenges in Rust, Go, and script languages, respectively. Uranus tackles specific security challenges in Java, including dynamic code loading and GC. CordaSGX [4] is an industry project for Java applications, currently evaluating key management in enclaves. It lacks an integrity attestation protocol for dynamically loaded code, which Uranus can address.

**Civet [16]**: Civet is a recent system that automatically partitions and executes Java code. Uranus and Civet are complementary in several ways:
1. **Code Partitioning**: Civet uses static analysis to infer the trusted code partition and requires manual annotation for dynamically loaded code (e.g., reflection). Uranus can reduce manual annotation efforts by supporting automatic loading of dynamically loaded code using `loadClass` (§4.1).
2. **Enclave Boundary Enforcement**: Civet uses dynamic flow tracking (Phosphor [23]) to prevent sensitive data from leaking out of the enclave, which can be memory-intensive for data-intensive applications. Uranus presents `Read-integrity` and `WriteConfidentiality` (§4.1), an efficient approach to enforce a safe enclave boundary.
3. **Garbage Collection (GC)**: Civet optimizes traditional generational GC by proposing a three-generation GC to reduce L3 cache misses and EPC page swapping. Uranus proposes a region-based GC optimized for data-handling applications, enabling efficient operation with typical big-data datasets. Additionally, Uranus addresses information leakage from AEX and OCall, which Civet does not discuss.

**Regional GC**: Regional-based JVM GC has been used for big-data platforms (Yak [55]) and real-time applications (RTSJ [22, 26]). Uranus’s GC differs in that it is fully automated by leveraging the enclave boundary and is not OS-assisted, making it suitable for managing enclave memory.

### Conclusion

We have presented Uranus, an easy-to-use, efficient, and secure SGX programming system for Java applications. Uranus explores a new high-level SGX programming method, hiding the details of low-level TEE implementations. We identified security and efficiency challenges during the design of Uranus and presented two new secure and efficient protocols for dynamic code loading and GC. Extensive evaluations show that Uranus is practical for data-handling applications. The source code and evaluation results are available at https://github.com/hku-systems/uranus.

### Acknowledgments

We thank our shepherd, Lucas Davi, and all anonymous AsiaCCS reviewers for their helpful comments. This work is funded in part by the research grants from Huawei Innovation Research Program Flagship 2018, HK RGC GRF (17202318, 17207117), HK RGC ECS (27200916), and a Croucher innovation award.

### References

[1] Apache Storm. http://storm.apache.org/.

[2] Apache Tomcat. http://tomcat.apache.org/.

[3] ChronicleMap. https://github.com/OpenHFT/Chronicle-Map.

[4] Corda SGX JVM. https://github.com/corda/sgxjvm-public.

[5] Java ASM Package. https://asm.ow2.io/.

[6] JVM Runtime. http://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html.

[7] The Jython Project. www.jython.org.

[8] Multi-threaded JavaScript on the JVM. ringojs.org.

[9] SecureWorker. https://www.npmjs.com/package/secureworker.

[10] SGX-LKL. https://github.com/lsds/sgx-lkl.

[11] SGX-Spark. https://github.com/lsds/sgx-spark.

[12] SpiderMonkey. https://developer.mozilla.org/en-US/docs/Mozilla/Projects/.

[13] ZooKeeper. https://zookeeper.apache.org/.

[14] Zookeeper Smoketest. https://github.com/phunt/zk-smoketest.

[15] Handling segfault in SGX enclaves. https://software.intel.com/en-us/forums/intel-software-guard-extensions-intel-sgx/topic/734597.

[16] Civet: An Efficient Java Partitioning Framework for Hardware Enclaves. In 29th USENIX Security Symposium (USENIX Security 20). USENIX Association, Boston, MA. https://www.usenix.org/conference/usenixsecurity20/presentation/tsai.

[17] ARM. Security technology building a secure system using TrustZone technology (white paper).

[18] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin, Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, Mark Stillwell, et al. SCONE: Secure Linux Containers with Intel SGX. In OSDI. 689–703.

[19] Pierre-Louis Aublin, Peter Pietzuch, and Valerio Schiavoni. Using Trusted Execution Environments for Secure Stream Processing of Medical Data. In Distributed Applications and Interoperable Systems: 19th IFIP WG 6.1 International Conference, DAIS 2019, Held as Part of the 14th International Federated Conference on Distributed Computing Techniques, DisCoTec 2019, Kongens Lyngby, Denmark, June 17–21, 2019, Proceedings. Springer, 91.

[20] Erick Bauman, Huibo Wang, Mingwei Zhang, and Zhiqiang Lin. SGXElide: enabling enclave code secrecy via self-modification. In Proceedings of the 2018 International Symposium on Code Generation and Optimization. ACM, 75–86.

[21] Andrew Baumann, Marcus Peinado, and Galen Hunt. Shielding Applications from an Untrusted Cloud with Haven. In Proceedings of the Eleventh Symposium on Operating Systems Design and Implementation (OSDI ’14). 267–283.

[22] William S Beebee and Martin Rinard. An implementation of scoped memory for Real-Time Java. In International Workshop on Embedded Software. Springer, 289–305.

[23] Jonathan Bell and Gail Kaiser. Phosphor: Illuminating Dynamic Data Flow in Commodity JVMs. In Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages & Applications (Portland, Oregon, USA) (OOPSLA ’14). ACM, New York, NY, USA, 83–101.

[24] Andrea Biondo, Mauro Conti, Lucas Davi, Tommaso Frassetto, and Ahmad-Reza Sadeghi. The Guard’s Dilemma: Efficient Code-Reuse Attacks Against Intel SGX. In 27th USENIX Security Symposium (USENIX Security 18). 1213–1227.

[25] Rick Boivie and Peter Williams. SecureBlue++: CPU support for secure execution. Technical report (2012).

[26] Chandrasekhar Boyapati, Alexandru Salcianu, William Beebee Jr, and Martin Rinard. Ownership types for safe region-based memory management in real-time Java. In ACM SIGPLAN Notices, Vol. 38. ACM, 324–337.

[27] Ferdinand Brasser, David Gens, Patrick Jauernig, Ahmad-Reza Sadeghi, and Emmanuel Stapf. SANCTUARY: ARMing TrustZone with User-space Enclaves. In NDSS.

[28] Stefan Brenner, Colin Wulf, David Goltzsche, Nico Weichbrodt, Matthias Lorenz, Christof Fetzer, Peter R Pietzuch, and Rüdiger Kapitza. SecureKeeper: Confidential ZooKeeper using Intel SGX. In Middleware. 14.

[29] Stephen Checkoway and Hovav Shacham. Iago attacks: Why the system call API is a bad untrusted RPC interface. Vol. 41. ACM.

[30] Victor Costan, Ilia A Lebedev, and Srinivas Devadas. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. In USENIX Security Symposium. 857–874.

[31] Whitfield Diffie and Martin Hellman. New directions in cryptography. IEEE transactions on Information Theory 22, 6 (1976), 644–654.

[32] Andrew Ferraiuolo, Andrew Baumann, Chris Hawblitzel, and Bryan Parno. Komodo: Using verification to disentangle secure-enclave hardware from software. In Proceedings of the 26th Symposium on Operating Systems Principles. ACM, 287–305.

[33] Tommaso Frassetto, David Gens, Christopher Liebchen, and Ahmad-Reza Sadeghi. JITGuard: Hardening Just-in-time Compilers with SGX. (2017).

[34] Adrien Ghosn, James R Larus, and Edouard Bugnion. Secured routines: language-based construction of trusted execution environments. In 2019 USENIX Annual Technical Conference (USENIX ATC 19). 571–586.

[35] Xueyang Hu, Mingxuan Yuan, Jianguo Yao, Yu Deng, Lei Chen, Qiang Yang, Haibing Guan, and Jia Zeng. Differential Privacy in Telco Big Data Platform. Proc. VLDB Endow. 8, 12 (Aug. 2015), 1692–1703.

[36] Patrick Hunt, Mahadev Konar, Flavio P. Junqueira, and Benjamin Reed. ZooKeeper: Wait-free Coordination for Internet-scale Systems. In Proceedings of the 2010 USENIX Conference on USENIX Annual Technical Conference (USENIX ATC’10).

[37] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter, and Emmett Witchel. Ryoan: A Distributed Sandbox for Untrusted Computation on Secret Data. In OSDI. 533–549.

[38] Intel. Software Guard Extensions Programming Reference. https://software.intel.com/sites/default/files/329298-001.pdf.

[39] Prerit Jain, Soham Jayesh Desai, Ming-Wei Shih, Taesoo Kim, Seong Min Kim, Jae-Hyuk Lee, Changho Choi, Youjung Shin, Brent Byunghoon Kang, and Dongsu Han. OpenSGX: An Open Platform for SGX Research. In NDSS.

[40] Jiang Jianyu, Zhao Shixiong, Alsayed Danish, Wang Yuexuan, Cui Heming, Liang Feng, and Gu Zhaoquan. Kakute: A Precise, Unified Information Flow Analysis System for Big-data Security. In Proceedings of the Annual Computer Security Applications Conference (ACSAC ’17).

[41] Simon Johnson, Vinnie Scarlata, Carlos Rozas, Ernie Brickell, and Frank Mckeen. Intel® Software Guard Extensions: EPID Provisioning and Attestation Services. White Paper 1 (2016), 1–10.

[42] David Kaplan, Jeremy Powell, and Tom Woller. AMD memory encryption. White paper (2016).

[43] Vishal Karande, Erick Bauman, Zhiqiang Lin, and Latifur Khan. SGX-Log: Securing system logs with SGX. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. ACM, 19–30.

[44] Daniel Kästner, Xavier Leroy, Sandrine Blazy, Bernhard Schommer, Michael Schmidt, and Christian Ferdinand. Closing the gap–the formally verified optimizing compiler CompCert. In SSS’17: Safety-critical Systems Symposium 2017. CreateSpace, 163–180.

[45] Seong Min Kim, Juhyeng Han, Jaehyeong Ha, Taesoo Kim, and Dongsu Han. Enhancing Security and Privacy of Tor’s Ecosystem by Using Trusted Execution Environments. In NSDI. 145–161.

[46] Taehoon Kim, Joongun Park, Jaewook Woo, Seungheun Jeon, and Jaehyuk Huh. ShieldStore: Shielded In-memory Key-value Storage with SGX. In Proceedings of the Fourteenth EuroSys Conference 2019. ACM, 14.

[47] Robert Krahn, Bohdan Trach, Anjo Vahldiek-Oberwagner, Thomas Knauth, Pramod Bhatotia, and Christof Fetzer. Pesos: Policy Enhanced Secure Object Store. In Proceedings of the Twelfth European Conference on Computer Systems (EuroSys).

[48] Jaehyuk Lee, Jinsoo Jang, Yeongjin Jang, Nohyun Kwak, Yeseul Choi, Changho Choi, Taesoo Kim, Marcus Peinado, and Brent ByungHoon Kang. Hacking in darkness: Return-oriented programming against secure enclaves. In 26th USENIX Security Symposium (USENIX Security 17). 523–539.

[49] Tsz On Li, Jianyu Jiang, Ji Qi, Chi Chiu So, Jiacheng Ma, Tianxiang Shen, Heming