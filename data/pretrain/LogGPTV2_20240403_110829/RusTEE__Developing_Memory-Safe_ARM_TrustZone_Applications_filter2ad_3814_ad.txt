TEE
Trusted Core Framework API
Trusted Storage API
Cryptographic Operation API
Time API
TEE Arithmetical API
Client API
Examples
Rewritten OP-TEE Examples
Newly Added Examples
REE
Total
Lines of Code
2076
544
672
52
258
687
1964
2105
8358
Trusted Core Framework API defines the APIs that provide basic
OS functionalities for all kinds of TAs, such as memory manage-
ment, system-information retrieving, and cross-world communi-
cations. For example, each TA should call the same set of APIs
to construct and maintain the communication channel with the
REE. Moreover, in the current implementation of cross-world com-
munication, we label two operations, Parameter::as_value and
Parameter::as_memref, as unsafe operations because OP-TEE’s
Parameter are implemented as unsafe from Rust’s ownership and
thread-safety perspective. Specifically, whenever a TA receives the
data in the shared memory, the CA and REE still have the privilege
to modify the Parameter, so there exists a potential concurrent issue
for using shared Parameters. Currently, these two operations are
the only two exceptions that can appear in the TA source code as
unsafe segment. Note that the unsafe labels here do not mean
any memory vulnerability is actually introduced, while they are
more to syntactical definitions to alert the developers. For example,
whenever the TA is supposed to use any passed-in data array ex-
clusively, it should copy the data from the unsafe Parameters into
a safe array, and then conduct rest operations reliably.
The second type is Trusted Storage API for Data and Keys, which
provides reliable storing for security-sensitive structures, and mostly
applied on the cryptography keys’ materials. Thirdly, Cryptographic
Operation API defines the APIs for extensive cryptographic-related
tasks such as generating the key, conducting synchronous/asyn-
chronous encryption, and hashing calculations. Next, Time API can
return the trusted time for TAs, where the time can be selected from
different perspectives such as per-TA time, Trusted OS’s unified
time, or even REE’s Rich OS’s time. Moreover, TEE Arithmetical API
are the essential functions that majorly serve for calculating big
numbers and primes. Lastly, Peripheral and Event API is designed
to allow TAs to interact with the hardware peripherals. Most of
the peripheral-APIs are platform-specific as different platforms can
equip a variety of peripherals. Since OP-TEE OS only implements
the first five types of APIs, our prototype binds all of the imple-
mented APIs, and we list the Lines-of-Code (LOC) of each type in
Table 1.
5.3 REE and Examples
Besides the TEE-side SDK, we also implement the crate optee-teec
as the REE-side SDK, which integrates the Rust standard library and
other GPD-defined Client API-related libraries to support building
secure CAs. Presently, OP-TEE provides six examples to demon-
strate the CA/TA workflow in several aspects, such as basic commu-
nication functionalities, secure storage, and cryptography-related
tasks. To prove the practicality of RusTEE, we completely migrate
these six examples by rewriting them in Rust. Moreover, we provide
six more examples to present RusTEE’s capabilities of interacting
with all types of TEE Internal APIs. Finally, we provide one addi-
tional example for exhibiting the case that integrates third-party
Rust crate Serde into TA development. The detailed examples and
corresponding performance evaluation are presented in the Eval-
uation Section 6. The latest project’s LOC2, which includes both
worlds’ SDK and examples, are summarized in Table 1.
6 EVALUATION
In this section, we present the performance evaluation of RusTEE.
Compared to the previous TA-development mechanisms, our mech-
anism introduces performance overhead in two aspects: the general
overhead of changing programming language and specific overhead
of API-related enhancements. First, since RusTEE replaces the pre-
vious programming language C with Rust, RusTEE may introduce
the overhead because of using the new language. Though some ex-
isting benchmarks already presented the difference between these
two languages on the x86 platform, we notice their performances
vary a lot on ARM devices. Therefore, we present the language-
wise difference between C and Rust for ARM devices specifically.
We implement four benchmark programs in both languages and
evaluate the programs’ performances on the ARM-based Juno r1 [3]
development board. Furthermore, we re-run the benchmark on the
emulator environment QEMU [39] with the same ARM architecture
to validate the observation.
Besides the differences in programming languages, RusTEE may
introduce extra overhead because it performs multiple security
enhancements on the TEE Internal APIs. Since the overhead of
invoking APIs is tightly coupled with the real-world use cases,
we evaluate this overhead based on five real-world TAs provided
by OP-TEE [32]. We rewrite each TA in Rust and then compare
our rewritten TA with OP-TEE’s C-based TA. The difference be-
tween the two TAs’ execution time can indicate the overhead of
corresponding APIs.
6.1 Language-wise Overhead
To present the fundamental difference between languages C and
Rust on ARM devices, we evaluate them with four benchmark cases
of the open-source programming language benchmark-set [21]. The
benchmark-set provides dozens of cases in different languages for
evaluating their computation efficiencies on x86 devices. However,
it is non-trivial to migrate all benchmark programs on ARM devices
because many programs rely on the libraries that are not supported
by either C or Rust compiler on ARM platforms. Moreover, as OP-
TEE OS only provides limited functionalities in the TEE, TAs are
2The LOC are counted at the time of this paper is written and may change in the future
version of the open-source project.
449RusTEE: Developing Memory-Safe ARM TrustZone Applications
ACSAC ’20, December 07–11, 2020, Online
not capable of integrating any benchmark’s program completely.
After manually reviewing the benchmark-set, we select four cases
that can get compiled and executed on ARM platforms stably for
both languages. We implement the benchmark programs in the REE
to get the support of the Rich OS, which equips the Linux kernel in
our implementation.
Among the evaluated cases, case n-body models the orbits of
Jovian planets as a double-precision simulation; case fasta gener-
ates and rewrites DNA sequences; case fannkuch-redux performs
the indexed-access to tiny integer-sequence with the approximated
time complexity n ∗ log n; case spectral-norm resolves the mathe-
matical challenge [49] that requires to calculate the spectral norm
of an infinite matrix. Currently, the benchmark-set already pro-
vides detailed performance of C and Rust about each case on x86
platforms, including their execution time, memory space, and CPU
utilization. Also, every case can get accomplished with different
algorithms.
Since previous coders and researchers already evaluated the
thorough performances of two languages on x86 platforms, our
experiment focuses on presenting the performances’ variations
after benchmark programs are migrated from x86 platforms to
ARM platforms. We assume an algorithm of one case is executed as
100% time on x86 platforms, and we normalize the execution time of
this algorithm on the Juno board accordingly. For each benchmark
case, we evaluate all algorithms that can get compiled with both
languages’ ARM compiler. After collecting all algorithms’ results
for one case, we calculate the average value of the normalized
execution time, and we present the final result in Figure 4.
Figure 4: C vs. Rust Performance on Juno
According to our experiment, all the benchmark programs run
slower on the Juno board than the x86 platform. The numerical
difference can be introduced because of the different hardware
configuration (i.e., CPU cores and total memory space). Specifically,
for the first two cases n-body and spectral-norm, C language
performs relatively better than Rust after normalization, while the
other two cases present the contrast observation. Meanwhile, for
all evaluated cases, the normalized differences between the two
languages are less than 40%.
Figure 5: QEMU vs. Juno Performance
Different Platforms Evaluation. To validate the performance
we evaluated on Juno is representative across different ARM de-
vices, we provide an extra evaluation of the emulation environment
QEMU. We re-implement the benchmark n-body in two languages
on QEMU, and then evaluate the performances as presented in
Figure 5. We assume the execution time of Juno board’s programs
are 100%, and then normalize the time of QEMU’s programs accord-
ingly. As the experiment shows, comparing to the Juno board, the
emulator introduces around 3.5 times extra overhead for both C and
Rust languages. Meanwhile, the extra overhead is introduced with
a similar ratio for two languages, which means the relative differ-
ence between C and Rust stays at the same level on both Juno and
QEMU. In conclusion, we claim that the language-wise difference
we evaluate in Figure 4 is representative of the ARM architecture.
Also, the evaluations on either development board or emulation
environment present the same pattern of the difference.
6.2 Enhanced APIs’ Overhead
To present the overall overhead of enhancing APIs, we evaluate
TAs’ performance in five real-world cases to invoke different types
of APIs. For each case, we use the same CA to invoke two TAs
compiled in C and Rust, respectively. Meanwhile, both C-based and
Rust-based TAs are programmed to execute the same task with
the same algorithm, while the major difference is that all Rust-
based TEE Internal APIs are enhanced by RusTEE. Among the
five cases, case Secure_Storage provides the functionalities for
reading, creating, and deleting the secure-storage objects. We use
the time of creating an empty secure-storage object to represent
related tasks efficiency; case Random generates a 16-bytes random
number; case Hotp generates ten HMAC-based one-time passwords
according to the RFC4226 algorithm [37]; case Aes conducts the
AES-128 encryption with CTR mode on a 4096-bytes plaintext; case
Acipher conducts RSA Public-Key Cryptography Standards (PKCS)
encryption with the 1024-bits key and the 100-bytes plaintext.
n-bodyspectral-normfannkuchfasta50010001500Normalized Execution Time (%)1380.11206.2710.7205.21772.61218.3609.6129.9C on JunoRust on Junon-body Benchmark on ARM Platforms100200300400500600Normalized Execution Time (%)65.6 s76.1 s381.7 s394.4 sC on JunoRust on JunoC on QEMURust on QEMU450ACSAC ’20, December 07–11, 2020, Online
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He
are changed. Alternatively, if the system administrator wants to
extend the support for a C-based library rapidly, she can utilize the
Rust FFI mechanism to include the library’s functions with the Rust
world. However, as we argued before, such a mechanism is memory-
unsafe, so it does not fit RusTEE’s primary objects. Moreover, since
a TrustZone-assisted TEE only has a limited-size TCB and relatively
stable libraries, we believe such TEE is a perfect target for manually
binding with acceptable engineering effort.
8 RELATED WORK
8.1 Rust-assisted Systems
In past years, Rust language has become an attractive program-
ming language for developers who have an interest in enhancing
application security. As a memory-safe language, Rust’s safety has
been formally proved in RustBelt [27] in 2017. Meanwhile, lines
of works [5, 29–31, 48] have been proposed to adapt Rust into
the development of traditional C/C++ based systems. For exam-
ple, TockOS [30] presents the idea to write a complete embedded
system OS in Rust. Moreover, Rust has been integrated with TEE
development [15, 16, 48]. For Intel SGX, Wang et al. [48] propose
the open-source project Rust-SGX to deliver the Rust-based SDK
for SGX enclave developers, and Fortanix Rust EDP [16] has im-
plemented a similar idea. Regarding the TrustZone technology,
RustZone [15] first demonstrates the possibilities to migrate Rust
into TrustZone TA development, while lacking a thorough analysis
of the security for each component insides TAs. To the best of our
knowledge, RusTEE is the first work that presents the complete
development kit set for TrustZone TA developers and provides the
default features to compile TAs in Rust-safe style.
8.2 Security of TEE
The TEE technology has evolved rapidly during recent years. Re-
searchers [23, 24, 36] first propose the software-only solutions that
utilize the virtualization technique to create the TEEs. Nowadays,
many hardware-assisted TEE architectures [2, 25, 50] have been
proposed to provide isolated environments with more reliable tech-
nologies and work for different real-world scenarios. Among these
recently popular hardware-assisted TEE systems, some architec-
tures such as Intel SGX [14, 25] can provide multiple TEEs within
a single device, while other architectures like ARM TrustZone [2]
present the single-TEE solution to partition the device into one REE
and one TEE.
The security of ARM platforms has been discussed in several
aspects in the previous works [4, 17, 26, 28, 52]. Among these
TrustZone-related works, one leading category is using Trusted
Applications for protecting the REE’s rich OS. For example, Trust-