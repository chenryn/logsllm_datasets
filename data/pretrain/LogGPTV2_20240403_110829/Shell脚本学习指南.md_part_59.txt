338
www.TopSage.com
---
## Page 351
拼写检查
339
do
printf *[B}dit, Spell (Clheck, [S}end, or [A]bort: *
read choice
case Sehoice in
[Ce]*>
spel1 sfile
[Aa] *}
exit 0
[Ss]*}
break
 from 1oop
esac
II
done
传选报告
在本章，我们会从各个角度审视拼写检查，因为这部分很有趣，我们有机会以不同的方
式解决问题。
12.2
2最初的UNIX拼写检查原型
以拼写检查为主题的研究报告及书籍已经不少于300项（注1）。在JonBentley的
&Programming Pearls》一书（注2）里曾提到：SteveJohnson在1975年的某个午后，
写出第一版spel1.Bentley之后略为改逾，贡献给Kernighan与Plauger（注3），该程
序以UNIX的管道完成，我们可用现代语汇改写如下：
prepare filename 1
将大写字母对应到小写字母
副除格式化命令
tr A-z a-z I
tr -c a-g *\n′ 1
别除标点符号
sort 1
将单词做字母顺序排列
uniq 1
comn -13-dictionary -
别除重复的单词
报告不在字典里的单词
这里的prepare为过滤程序，它会将所有文件标记（markup）拿掉：最简单的情况，
只要用到cat，我们使用的参数语法是假定tr命令为GNU版本，
这个管道里唯一我们还未曹提过的程序便是comm：它是用以比较两个排序后的文件，
并选定或拒绝两个文件里共同的行。这里使用-13选项，因此它仅输出来自第二个文件
（管道的输入）但不在第一个文件（字典）里的行。该输出为拼写异常报告。
注1:
http://www.math.utah.edw/pub/tex/bib/index-table-s.html#spell提供了丰富的参考文杖,
注 2:
Jon Louis Bentley, 《Programming Pearis}, Addison-Wesley, 1986, ISBN 0-201-10331-1,
注3;
Brian W. Kernighan and P.J.Plauger, 《Software Tools in Pascal}. Addison-Wesley,
1981, ISBN 0-201-10342-7。
www.TopSage.com
---
## Page 352
340
comm
语法
comm[options...}filel file2
用途
指出在两个输入文件里，哪些行是只出现在其中一个文件中，或者两个文件
里都有出现。
主要选项
-1
不要显示第一列（只在filel出现的行）
-2
不要显示第二列（只在file2出现的行）
-3
不要显示第三列（两个文件里都有的行）
行为模式
逐行读取两个文件，且输入文件必须都已排序。产生的输出共三列：只在
filel里有的行、只在file2里有的行，以及两个文件里都有的行列。这两
个文件名其中一个可以是-，福定comm读取标准输人。
警告
它的选项不是直接式的：用户难记得为了别除一个输出到，要加上一个选
项！
Bentley之后继续讨论贝尔实验室的DougMcllroy于1981年所开发的拼写检查程序，包
括它的设计与应用、如何将字典存储在小型的内存里，以及为什么检查拼写这么困难，
尤其是在像英文这样杂乱无章的语言上。
现代的spe11为了效率而使用C完成。不过，原始的管道仍在贝尔实验室里使用相当
长的一段时间。
12.3
改良的ispell与aspell
UNIX的spe11支持许多选项，不过有很多是平时用不到的。不过令spe11的行为模
“color等（注4）.要了解其他选项请见使用手册。
注 4:
spell(1)使用手册中的BUGS小节，有长属说明“British spelling was done by an American”
www.TopSage.com
---
## Page 353
拼写检查
其中一个不错的功能就是：你可以提供你本地有效单词的拼写列表。例如，在特定专门
领域中的正确拼法，但在spel1的字典里是不存在的（例如：POSIX）。你可以建立并
长期维护自有的有效、但非一般性的单词列表，然后在执行6Pel1时使用此列表。指定
本地拼写列表的方式，是标明路径名称并将它放在要被检查的文件之前，且前置单个的
+字符：
spell +/usr/local/lib/local.words myfile > myfile.errs
12.3.1私有拼写字典
我们觉得，在实际上最重要的就是：针对你所写的任何文件都提供私有拼写字典。一个
通用于大部分文件的字典并不卖用，因为词汇量会变得太大，且无法确切发现错误，
“syzygy”在数学论文里可能是正确的，但在小说里，它或许应为“soggy”才对。我们
发现，几百万行的技术文件大全配合拼写字典作比较，几乎是每六行就出现一个拼写异
常，这告诉我们，拼写异常很常见，这也是这个项目另外必须解决的向题。
关于spel1还有一些蒙手的事：它只能有一个+选项，且其字典必须以字典编幂法的方
式排序，这是个很粗糙的设计。即spe11的绝大多数版本，在locale变动后，就会失灵
（虽然这被认为是个很差的设计，但事实上那只是未预期到locale的出现所导致的结果。
spe11的代码在很多系统上已使用20年以上未作更改，而当底层的程序库被更新以完
成locale为主的排序时，没有人了解这会造成影响）。举例如下：
$env LC_ALL=en_Gs spel1 +ibmdyej.aok  /tmp/foo.en_GB
$ env LC_ALL=en_GB apel1 +/tnp/foo,en_GB < Ibm8y8j.bib 1 wc -1
2163
问题是默认的locale在操作系统版本之间可能有所不同。因此最好的方式便是将LC
ALL环境变量设置为与私人字典排序一致，再执行spel1，我们将在下一节提供sDe11
已排序字典需求的改写方案。
12.3.2ispell与aspell
这里有两个可以自由取用的拼写检查程序：ispel1与aspell，ispel1程序为交互模式
的拼写检查，它会显示文件，然后将所有拼写错误之处反白，并提供建议的更动。aspel1
www.TopSage.com
---
## Page 354
342
第12章
程序也类似，不过它在英文上提供的建议更正比较好，且其作者希望它最终能最代
ispel1。这两个程序都能用于产生拼错单词的简易列表，且因为希望apsel1能取代
ispel1，所以它们使用的选项相间：
-1
在标准输出打印拼错的单词列表。
p file
以file作为正确单词拼法的个人字典。类似UNIXspe11里，以+起始的私有
文件选项。
ispel1的官方网站在hrtp://ficus-www.cs.acla.edu/geoff/ispell.htmi，其源代码可在
ftp://ftp.gnu.org/gnu/non-gnu/ispell/（注5）找到。aspe11官方网站则为http://
aspellnet/，源代码位干ftp://ftp-gnu.org/gnw/aspell/.
这两个程序都提供基本的批处理拼写检查功能。当然它们同样也共享了坏习惯：产生未
排序的结果，且未省略错误单词重复的部分（UNIX的spel1没有这两个问题）。因此，
我们优秀的GNU/Linux厂商便有了/usr/bin/spel1这样的Shell脚本出现：
1/bin/αb
aspel1-1大概地模仿标准UNIXspel1程序
n-3os 1. auou=epow-- I- Ttedee 1e$。eo
--node选项使得aspe11忽略一些类型的标记，例如SGML与TEX。这里的
--mode=none表示不微任何的过滤。sort-u命令则是将排序结果里重复的部分去除，
产生UNIX老手预期看到的结果。你也可以使用ispel1作同样的事：
n- 1208 1 I- IadeT 1 B$。 20
有两种方式可以再改进这个脚本，让它可以提供个人字典，像UNIX的spel1那样，第
一个替换spe11脚本的方式如例12-1。
例12-1：以 ispell 代费 spell
1/bin/eh
UNx的spe11把'+file的第一个参数看作是
提供私有拼写列表，我们也如法泡制。
mydict=
case $1 in
注 5:
emaco利用ispo11在交至模式下逸行拼写检查，处理速度会很快，固为ispel1会在
后台中持续执行。
www.TopSage.com
---
## Page 355
拼写检查
mydict=$（1#+）去除开头的+
mydict=*-p Smydict*
com
shift
esac
1
n-42os 12o1p/ms t- ttods1 18s.380
这段代码只是查找起始为+的第一个参数，将其存储到变量，截去+字符，再放入准备
好的-p选项、传递给ispel1引用。
不幸的是：该技巧在aspel1下无效，因为它要求字典必须为编译后的二进制格式。如
要使用aspell，我们改以fgrep手段进行，它可以匹配文件内所提供的多个字符串。
我们另加人-v选项，要求fgrep显示不匹配的行。所以第二种替换spel1脚本的方
式见例12-2。
例12-2：vaspell取代spell
#1/bin/sh
Ix的spel1把+fi1e的第-个参数看作是
私有拼写列表的提供，我们也如法泡制。
mydict=cat
+?*)
case $1 in
mydict=*fgrep -v -f Saydict*
mydict=$(1#+)
去除开头的+
shift
esac
aspel1-1模仿标准UNIx spel1程序，
如果你不想要排序私有字典，或不想烦恼不同的locale所产生的不同排序方式，那么相
同的fgrep后续处理技巧也可搭配UNIx的spel1使用。
下一节呈现的是spel1的awk版本，它可以提供功能强大又简化的替代方案，是我们
在此所讨论的spel1替换的另一种选择。
12.4.
在awk内的拼写检查程序
本节要呈现的是提供检查拼写的程序。即便所有UNIX系统都有spel1，有些甚至还有
aspell或ispell，但我们的程序兼具了教育性与实用性，本节不但能让你知道awk的
功能有多强大，还能得到一个适用于所有平台上的程序，只要它有awk。
www.TopSage.com
---
## Page 356
344
第12章
我们必须强调检查（checking）与更正（correcting）的差别。后者必须了解内文格式，
还需要人为确认，因此完全不适于批处理处理。由网页浏览器与文本处理程序所提供的
自动化拼写更正只会让情况变得更福，因为它们多单是错的，且在你快速输人时进行的
二次推断，情况只会进一步恶化。
emacs文字编辑程序提供三个好的解决方案，可在输入内文期间提供拼写协助：可依需
求展开部分单词以动态补齐单词、通过单一按键提出对当前单词的拼写验证需求，以及
flyspe11程序库可用以要录以不部么显眼的额色标示出可能有误的单词。
只要你能在拼写程序指出错误时认得拼错的部分，那么能够报告可能拼错单词的列表及
允许你提供个人的特殊单词列表，非字典的一般单词，会是比较好的拼写检查程序，可
减少该报告长度。之后你可以利用这份报告识别错误的部分，修正它们后再重新产生报
告（这时应只有正确的单词了），然后将它的内容加入到你私有字典里。由于我们的写
作都在处理技术的素材，包时常充调不常见的单词，实际上我们保有私人的与特定文件
的补充字典，应用到我们所写的每个文件中。
为引导程序的进行，这里列出几个我们的拼写检查程序预期的设计目标。遵循ISO标准
的实际，我们使用将会（shall）指出必须做的，而使用应该（should）指出想要做的：
程序将会能够读取文字数据流、隔离单词，以及报告不在已知单词列表[也即，拼
写字典（spelling dictionary）里的单词实体。
·将会有一个默认的单词列表，由一个成多个系统字典收集而成。
·它将可能取代默认的单词列表。
标准单词列表将有可能由一个或多个用户所提供的单词列表而扩增，该列表在技术
性文件上特别有用，例如首字母缩写、术语及专有名词，它们大部分都无法在标准
列表里找到。
单词列表将无须排序，这点与UNIX的spel1不同，后者当locale变动时，会出
现不当的行为模式。
虽然默认单词列表都是英文，但辅以适当的替代性单词列表，程序将可以处理任何
语言的文字，只要它是以基础为ASCII的字符集（编码为8位字节）呈现，以空白
字符（whitespace）分隔单词。这消除了难懂语言的难度，例如老挝语（Lao）与
泰文（Thai），它们缺乏单词内的空间，因此需要更具扩展性的语意分析才能识别
单词。
将忽略字母大小写，让单词列表维持在易于管理的大小，不过异常列表报告时将使
用原来的大小写。
www.TopSage.com
---
## Page 357
拼写检查
345
将忽略标点符号与数字，但顿点符号（缩写的一撤）将视为字母。
默认的报告将为排序后具有独一无二单词的列表（是无法在结合的单词列表里找到
的）以一行一个单润的方式呈现。这是拼写异常列表（spelling exception list）。
将可通过选项增加异常列表报告，并有位置信息，例如文件名与行编号，以利寻找
与更正拼错的单词，报告将以位置排序，且当它们在同一位置发现多个异常时，则