分 类 安 全 产 品
机房 门禁系统、消防系统、摄像系统
服务器 防病毒软件、漏洞扫描工具、配置核查系统
网络 防火墙、入侵监测系统、入侵防御系统
终端 防病毒软件、行为控制和审计软件、堡垒机
应用程序 漏洞扫描工具、源代码扫描软件、证书管理系统、统一认证系统、身份管理系统
数据备份 数据备份软件
流程管理 运维管理平台、安全管理平台、审计平台
定期对系统进行大规模摸底扫描，并组织相关内外部资源对资源进行渗透性测试，
发现并且解决系统中的安全风险点。
208 大数据应用部署与调优
在组织团队和新员工入职时，就对所有的开发人员进行有针对性的安全培训，严
格遵守对应的编码规范，强化安全编码和信息安全的意识。有不少人认为安全的技术
产品就可以完全规避所有的安全问题，但事实并非如此。例如，如图 6-6 所示就展示
了一种针对 SSL 的中间人攻击，利用该攻击模式，可以破解或者修改传输内容，也可
以让客户端做的输入过滤失效。
用户
UI
SSL SSL
代理工具
密钥1 密钥2
浏览器 客户端 服务器
图6-6 SSL中间人攻击
制订的安全制度规范需要严格执行，制度中禁止的行为绝对不能因为技术因素或
者人为因素而忽略执行，从而产生严重的后果。
6.2 系统优化
6.2.1 Hadoop 配置优化
1．Hadoop 硬件配置规划优化
硬件配置的优化主要基于以下几个方面。
（1）机架：节点平均分布在机架之间，可以提高读操作性能，并提高数据可用性；
节点副本存储在同一机架，可提高写操作性能。Hadoop 默认存储 3 份副本，其中两份
存储在同一机架上，另一份存储在另一机架上。
（2）主机：Master 机器配置高于 Slave 机器配置。
（3）磁盘：存放数据做计算的磁盘可以做 RAID 0，或考虑冗余保护需要做 RAID
0+1，提高磁盘 I/O 并行度。
由于磁盘 I/O 的速度是比较慢的，如果一个进程的内存空间不足，它会将内存中
的部分数据暂时写到磁盘，当需要时，再把磁盘上的数据写到内存。因此可以设置合
理的预读缓冲区大小来提高 Hadoop 里面大文件顺序读的性能，以此来提高 I/O 性能。
（4）网卡：多网卡绑定，做负载均衡或者主备冗余保护。
2．操作系统规划优化
以下合理规划对文件系统的性能提升会有较大帮助：cache mode、I/O scheduler、
调度参数、文件块大小、inode 大小、日志功能、文件时间戳方式、同步或异步 I/O、
writeback 模式等规划。
第 6章 高级系统运维 209
3．Hadoop 集群配置规划优化
1）集群节点内存分配
例如，一个数据节点，假如 task 并行度为 p，单个任务内存开销为 m GB，则节点
内存配置如下。
m×4 (DataNode)+m×2 (NodeManager)+ m×4 (ZooKeeper)+ m×p
示例：并行度为 8，单任务内存开销为 1 GB，则节点内存可配置为 18 GB。
2）集群节点规模
假如每天产生的大数据容量为 d TB，需保存 t 个月，每个节点硬盘容量为 h TB，
Hadoop 数据副本数为 k（通常为 3），硬盘最佳利用率为 R（常取 70%），则配置的节
点数 n 可计算如下。
n=d×k×t×30/h/R
示例：如果每天产生的大数据容量为 1 TB，需保存 1 个月，每个节点硬盘容量为
2 TB，Hadoop 数据副本数 k 为 3，硬盘最佳利用率 70%，则节点数 n 计算如下。
n=1×3×1×30/2/70%，n 约为 65。
6.2.2 Hadoop 性能优化
1．内存优化
1）NameNode、DataNode 内存调整
在$HADOOP_HOME/etc/hadoop/hadoop-env.sh 配置文件中，设置 NameNode、
DataNode 的守护进程内存分配可参照如下方案。
HADOOP_NAMENODE_OPTS：Hadoop 对应的命名空间节点设置参数。
export
HADOOP_NAMENODE_OPTS="-Xmx512m-Xms512m -Dhadoop.security.logger=${HADOOP_S
ECURITY_LOGGER:-INFO,RFAS} -Dhdfs.audit.logger=${HDFS_AUDIT_LOGGER:-INFO,NullAp
pender} $HADOOP_NAMENODE_OPTS"
即将内存分配设置成 512 MB。
HADOOP_DATANODE_OPTS：Hadoop 对应的数据节点设置参数。
DataNode：
export HADOOP_DATANODE_OPTS="-Xmx256m -Xms256m -Dhadoop.security.logger=ERROR,
RFAS $HADOOP_DATANODE_OPTS"
即将内存分配设置成 256 MB。
注意：-Xmx、-Xms 这两个参数保持相等可以防止 JVM 在每次垃圾回收完成后重
新分配内存。
2）ResourceManager、NodeManager 内存调整
在$HADOOP_HOME/etc/hadoop/yarn-env.sh 配置文件中，设置内存分配如下，可
210 大数据应用部署与调优
以修改其中内存设置值。
YARN_RESOURCEMANAGER_HEAPSIZE：YARN 资源管理堆空间大小。
YARN_RESOURCEMANAGER_OPTS：YARN 资源管理设置参数。
ResourceManager：
export YARN_RESOURCEMANAGER_HEAPSIZE=1000 export YARN_RESOURCEMANAGER_
OPTS=""
即将内存分配设置成 1000 MB。
YARN_RESOURCEMANAGER_HEAPSIZE：YARN 资源命名空间节点堆大小。
YARN_RESOURCEMANAGER_OPTS：YARN 资源管理命名空间节点设置参数。
NodeManager：
export YARN_NODEMANAGER_HEAPSIZE=1000
export YARN_NODEMANAGER_OPTS=""
即将内存分配设置成 1000 MB。
3）Task、Job 内存调整
在$HADOOP_HOME/etc/hadoop/yarn-site.xml 文件中配置。
yarn.scheduler.maximum-allocation-mb
其中设置了单个可申请的最小/最大内存量，默认值为 1024 MB/8192 MB。
yarn.nodemanager.resource.memory-mb
总的可用物理内存量，默认值为 8096 MB。
对于 MapReduce 而言，每个作业的内存量可通过以下参数设置。
mapreduce.map.memory.mb：
设置物理内存量，默认值为 1024 MB。
2．配置多个 MapReduce 工作目录，提高 I/O 性能
在以下配置文件中设置相关参数，达到分散 I/O、提高 I/O 性能的目的。
$HADOOP_HOME/etc/hadoop/yarn-site.xml #对应文件及目录
yarn.nodemanager.local-dirs：存放中间结果。
yarn.nodemanager.log-dirs：存放日志。
$HADOOP_HOME/etc/hadoop/mapred-site.xml #对应文件及目录
mapreduce.cluster.local.dir：MapReduce 的缓存数据存储在文件系统中的位置。
$HADOOP_HOME/etc/hadoop/hdfs-site.xml：提供多个备份以提高可用性。
dfs.namenode.name.dir：HDFS 格式化 namenode 时生成的 nametable 元文件的存储
第 6章 高级系统运维 211
目录。
dfs.namenode.edits.dir：HDFS 格式化 namenode 时生成的 edits元文件的存储目录。
dfs.datanode.data.dir：存放数据块（dateblock）的目录。
多个目录之间以“,”分开，如下所示。
/data1/dfs/name,/data2/dfs/name, /data3/dfs/name #对应文件及目录
3．压缩 MapReduce 中间结果，提高 I/O性能
由于 HDFS 存储了多个副本，为避免大量硬盘 I/O 或网络传输的开销，可以压缩
MapReduce 中间结果，提高性能。
配置$HADOOP_HOME/etc/hadoop/mapred-site.xml 文件。
#设置MapReduce输出结果是否压缩
mapreduce.map.output.compress
true
 #设置MapReduce压缩机制
mapreduce.map.output.compress.codec
org.apache.hadoop.io.compress.SnappyCodec
其他 MapReduce 参数调优描述如下。
（1）mapred.reduce.tasks(mapreduce.job.reduces)。
默认值：1。
说明：默认启动的 reduce 数。通过该参数可以手动修改 reduce 的个数。
（2）mapreduce.task.io.sort.factor。
默认值：10。
说明：Reduce Task 中合并小文件时，一次合并的文件数据，每次合并的时候选择
最小的前 10 进行合并。
（3）mapreduce.task.io.sort.mb。
默认值：100。
说明：Map Task 缓冲区所占内存大小。
（4）mapred.child.java.opts。
默认值：-Xmx200m。
说明：jvm启动的子线程可以使用的最大内存。建议值-XX:-UseGCOverheadLimit
-Xms512m -Xmx2048m -verbose:gc -Xloggc:/tmp/@taskid@.gc。
（5）mapreduce.jobtracker.handler.count。
默认值：10。