# 京东应用架构设计

## 作者
吴博

## 日期
2014/7/18

## 保密级别
机要文档 请勿外传

---

## 目录
1. 架构愿景
2. 业务架构
3. 应用架构
4. 数据架构
5. 技术架构
6. 618经验

---

### 1. 架构愿景

#### 1.1 架构目标
- **多快好省**：构建超大型电商平台，兼顾效率与性能，达到高人效、高时效和低成本。
- **低成本**：增加服务的复用性以提高开发效率并降低人力成本；利用成熟开源技术减少软硬件成本；通过虚拟化技术减少服务器成本。
- **高可扩展性**：系统架构简单清晰，应用间耦合度低，便于水平扩展及快速增改业务功能。
- **高可用性**：自动化运维确保整体系统可用性达99.99%，单个系统可用性达99.999%。全年故障时间不超过50分钟，单个系统故障不超过5分钟。

#### 1.2 质量要求
- 可用性
- 互操作性
- 可管理性
- 性能
- 可靠性
- 可扩展性
- 安全性
- 完整性
- 可维护性
- 易用性
- 可重用性
- 可支持性
- 可测试性

#### 1.3 总体架构原则
- **可用性**
  - N+1冗余
  - 版本回退能力
  - 功能开关机制
  - 容错设计
  - 使用成熟技术
  - 系统监控
  - 多维度拆分
  - 避免过度设计
  - 松耦合
  - 抽象化
  - 服务重用
  - 水平扩展
  - 单一职责原则
  - 同质化硬件使用
  - DID（Do It Differently）原则
- **可扩展性**
- **成本控制**

### 2. 业务架构

#### 2.1 设计原则
1. **平台化**：将各业务单元独立运营，如交易、仓储、物流、支付、广告等。
2. **核心与非核心分离**：区分电商的核心与非核心业务，精简核心业务以增强稳定性，同时允许非核心业务多样化。
3. **基础业务下沉**：将用户、商品、类别、促销、时效等功能模块化，以便于重复使用。
4. **主辅流程区分**：明确哪些是电商的主要流程，在运行时优先保障其顺利执行，次要流程则可采用后台异步处理方式。
5. **业务隔离**：根据业务特性进行隔离，例如交易业务需保证高可用性，履约业务更重视一致性，闪购业务则对并发有较高需求。

#### 2.2 实例
- 基础业务下沉示例

### 3. 应用架构

#### 3.1 设计原则
- **解耦/拆分**：稳定部分与易变部分分离；核心与非核心业务分离；主辅流程分离；应用与数据分离。
- **稳定性**：一切围绕稳定性展开；架构简洁明了；避免过度设计。
- **抽象化**：服务与实现细节分离；应用只依赖于服务抽象而不关注其实现细节或位置；数据库抽象化使得应用只需关心逻辑库而无需了解物理库布局；服务器抽象化支持动态资源调配。
- **容错设计**：服务自治以避免连锁反应；集群部署防止单点故障；跨域调用尽量异步化。
- **松耦合**：不同业务领域之间尽可能采取异步通信模式。

#### 3.2 架构分解原则
- 水平扩展与读写分离
- 垂直拆分按业务领域划分
- 业务分片以提高处理能力
- 水平拆分将稳定与变化部分分开

#### 3.3 依赖原则
- 跨域弱依赖
- 依赖稳定组件
- 基础服务不向上层服务依赖
- 核心服务不依赖非核心服务
- 平台服务不依赖上层应用

### 4. 数据架构

#### 4.1 设计原则
- **数据与应用分离**：应用程序仅依赖于逻辑数据库而非直接访问其他主机上的数据库。
- **统一数据视图**：确保数据的一致性、准确性和完整性。
- **数据异构**：当源数据与目标数据相同但视角不同，则创建索引异构；若内容差异较大，则实施数据库异构。

### 5. 技术架构

#### 5.1 服务设计原则
- 无状态服务
- 可复用性
- 松耦合
- 可治理
- 服务降级
- 流量控制
- 服务开关
- 监控能力

### 6. 618经验分享
此处可以详细记录关于应对大促期间的技术挑战及其解决方案等内容。

---

此文档旨在提供一个清晰、连贯且专业的视角来理解京东的应用架构设计。希望这有助于您更好地理解和应用相关知识。