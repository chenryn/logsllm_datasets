appname:nginx AND nginx.request_time:* AND nginx.client_ip.geo.province:北京
| eval new_request_time=todouble(nginx.request_time)
129
日志学院
| table nginx.client_ip.geo.ip, nginx.client_ip.geo.isp, nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
SPL说明：
l 本方法是将过滤内容放在查询中。这样查询效率更高。
SPL：sort 排序突出重点
appname:nginx AND nginx.request_time:* AND nginx.client_ip.geo.province:北京
| eval new_request_time=todouble(nginx.request_time)
| table nginx.client_ip.geo.ip, nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
| sort by new_request_time
结果如图：
SPL说明：
l 当您想对上例中请求时间进行倒排序，以突出重点时或显示异常情况。可以使用sort
命令，by为必选参数。Sort 对单个排序字段可以用符号”+”表示升序，符号”-”
表示降序，默认为降序排列。
130
日志学院
SPL：dedup 去冗余
appname:nginx AND nginx.request_time:* AND nginx.client_ip.geo.province:北京
| eval new_request_time=todouble(nginx.request_time)
| table nginx.client_ip.geo.ip, nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
| sort by new_request_time
| dedup new_request_time
结果如图：
未用dedup前：
使用dedup后：
SPL说明：
l dedup命令可以对搜索结果中指定字段值的重复情况进行去重。默认只保留重复出现
的第一条数据。命令详细内容可以参阅《日志易检索参考》手册。
SPL：limit限量显示
appname:nginx AND nginx.request_time:* AND nginx.client_ip.geo.province:北京
| eval new_request_time=todouble(nginx.request_time)
| table nginx.client_ip.geo.ip, nginx.client_ip.geo.isp,nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
131
日志学院
| sort by new_request_time
| limit 3
SPL说明：
l 您也许仅仅想要突出一部分量大、耗时高或者数值非常小的数据用于图表展现。这时
候就可以使用limit 对返回数据量进行限定。Limit 3 即显示前3行。
SPL：autoregress 实现跨行计算
问题：您是否想要对两条相邻的信息进行计算？比如相邻两条信息做时差的计算。或则对
两个属性统计值做比例计算，例：
appname:nginx
| eval new_status=if(nginx.status=="200","正常","异常")
| stats count() by new_status
查询结果：
那么如何计算两种情况占总体比值？
appname:nginx
| eval new_status=if(nginx.status=="200","正常","异常")
| stats count() as COUNT by new_status
| autoregress 'COUNT' as new p=1
132
日志学院
结果如图：
SPL说明：
l 首先我们要解决访问连接状态次数求和问题。autoregress命令可以实现跨行字段的计
算。首先将参数列的数据按照单位p的跨度生成新的一列。新列new与COUNT列每
行错开单位为1。
然后通过eval 命令对列值进行计算，SPL如下：
appname:nginx
| eval new_status=if(nginx.status=="200","正常","异常")
| stats count() as COUNT by new_status
| autoregress 'COUNT' as new p=1
| eval total=COUNT+new
| eval success=new/total
| eval failure=COUNT/total
结果如图：
SPL说明：
l Eval不但可以在语句中生成临时字段。也可以在统计后对字段进行二次计算并形成新
列。但上例中您有很多数据不需要，那么如何处理呢？
SPL：fields 只留下想要的字段
appname:nginx
133
日志学院
| eval new_status=if(nginx.status=="200","正常","异常")
| stats count() as COUNT by new_status
| autoregress 'COUNT' as new p=1
| eval total=COUNT+new
| eval success=new/total
| eval failure=COUNT/total
| fields success,failure
| where !empty(success)
结果如图：
SPL说明：
l 本实例通过fields命令仅保留了success和failure两个字段。但是中间还存在空行。
通过where 命令将空行过滤去掉即可。!empty() 为非空函数。取空为empty()
一脉相通
道生一，一生二，二生三，三生万物。——道德经
万事互相效力。——圣经
事事相互关联相互影响，业务系统性能、主机性能指标、业务模块逻辑、网络吞吐量等等
在出现异常时都会成为事故的导火索。在日常对各种因素加以关联分析。也许可以改善或
降低运维故障的概率。本小节将为您介绍如何利用SPL命令关联分析数据。
案例5：数据关联与子查询
为了您能好的理解接下来要介绍的内容，我们为您准备了另外两个测试数据。人员信息和
人员喜好信息，如图：
134
日志学院
那么现在您可能想像SQL一样将两个表的信息关联起来来看。实际上换成日志原理也是一
样的。首先需要导入上述两个测试文件，导入方法如图：
1、导入favor日志样例文件，按规则输入appname:worker tag:favor
2、导入info日志样例文件，按规则输入appname:worker tag:info
135
日志学院
导入后效果：
通过上面的学习，您可以轻松的列出样例日志属性。
appname:worker AND tag:info
| table json.name,json.age
136
日志学院
appname:worker AND tag:favor
| table json.name,json.favorite_fruit
思考：现在如何将人员名称年龄与喜欢的水果对应起来？
137
日志学院
SPL：join 关联分析
appname:worker AND tag:info
| table json.name,json.age
| join type=left json.name
[[
appname:worker AND tag:favor
| table json.name,json.favorite_fruit
]]
结果如图：
SPL说明：
l 通过上例我们可以看出利用join 命令可以用类似sql中的key将两个数据表进行关
联。Type定义了关联方式，从上例中我们看到”[[ ]]”扩起来一部分SPL查询，双中
括号扩起来部分我们成为子查询。一个子查询常用于作为另外一个SPL查询的参数。
子查询将在外部查询执行之前被执行。
思考：回顾7.2.7 中第二问，“如何计算失败率的问题？”。如果用join如何处理？(其实
实际工作中应用不需要那么复杂，一个top命令就可以解决)
138
日志学院
appname:nginx
| eval new_status=if(nginx.status=="200","success","failure")
| where new_status=="success"
| stats count() as succ by appname
| join type=left appname
[[
appname:nginx
| eval new_status=if(nginx.status=="200","success","failure")
| where new_status=="failure"
| stats count() as fail by appname
]]
| eval total=succ+fail
结果如图：
SPL：append 与同环比
starttime="-1d/d" endtime="now/d" appname:nginx
| bucket timestamp span=1h as ts
| eval time=formatdate(ts,"HH")
| stats count() as _count by time
| eval group = "yesterday"
| append
[[
starttime="now/d" endtime="now" appname:nginx
| bucket timestamp span=1h as ts
| eval time=formatdate(ts,"HH")
| stats count() as _count by time
| eval group = "today"
]]
结果如图：
139
日志学院
数据结构：
图表配置方法如下：
140
日志学院
SPL说明：
l 上例中您可以看到采用了两天的数据对比，即当天和前一天的数据。SPL语句中采用
了固定时间的写法starttime和endtime。Starttime和endtime 被使用后其优先级高于
日志易界面上时间段的选择。详细用法您可以参考《搜索指令参考》常见时间格式部
分内容。
l Append命令主要是将子查询结果附加在主查询结果之后。一般用于数据对比，在数
据整理时需要为数据生成一个共享分组字段“group”在图形展示时使用。
案例6：自定义Starttime、endtime进行搜索
相对时间：starttime="-1d" endtime="now" *
141
日志学院
精确时间：starttime=2019-10-28:12:33:21 endtime=2019-11-01:01:10:00 *
高歌猛进
日志易机器学习功能不再本文中阐述，如果您还想继续学习，我们建议您参阅产品文档
《日志易检索参考》和《日志易搜索实例》。
附件
1、日志样例：网页日志样例access.log.10.gz
2、join关联分析样例：favor.list、worker_info.list
本章习题：
1、有4个appname (a、b、c、d)，
需要搜索数据属于a 和d，或者属于c和a，或者属于d但是不属于b的数据。对应的搜
索语句应当怎么写？
2、统计周一到周五的9点到18点之间，ERROR关键字出现的次数？
3、对比appname为nginx的日志今日与昨日的日志量，要求以HH:mm的方式分桶。
4、日志内有一字段timeCost，使用菜单视图求一天内每小时timeCost在100-200，200-
300，300-500，500以上的数量。
思考：
怎么使用SPL实现：列出日志数最多的三种logtype他们各自最大的日志文本长度？
142
日志学院
九、监控告警
利用日志中统计分析得出的数值，可以进行监控告警。
9.1 告警类型
使用日志进行告警，一般有如下几种场景：
1、 事件数告警：按某条件对日志进行过滤，基于得到的日志条数进行告警；
a) 我们可以使用设备切分的方式，同时对多种类型的日志的事件数进行监控，这
时，我们的一次告警执行，可能分别发送多条告警邮件。