of itself according to the LCA definition.
Note:
●All of the nodes' values will be unique.
aa Aeuiq au u sixa m sanjea yoq pue juaap aue b pue d  ●
题目大意
给定一个二叉树，找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树T的两个结点p、9，最近公共祖先表示为一个结点
x，满足×是p、q的祖先且x的深度尽可能大（一个节点也可以是它自己的祖先）。“
解题思路
·这是一套经典的题目，寻找任意一个二叉树中两个结点的LCA最近公共祖先，考察递归
代码
package leetcode
* Definition for TreeNode.
 type TreeNode struct {
valint
Left *ListNode
Right *ListNode
*/
func 1owestCommonAncestor236(root，p,q *TreeNode)*TreeNode {
if root == nil l1 root == q l1 root == p {
return root
1eft := 1owestCommonAncestor236(root.Left， p, q)
right := 1owestCommonAncestor236(root.Right, p, q)
if left l= nil {
---
## Page 388
if right != nil {
return root
return 1eft
return right
237.DeleteNodeinaLinkedList
题目
Write a function to delete a node (except the tail) in a singly linked list, given only access to that
node.
Given linked list - head = [4,5, 1,9], which looks like following:
4
9
Example 1:
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the 1inked list
should become 4 -> 1 -> 9 after calling your function.
Example 2:
Input: head = [4,5,1,9], node = 1
Output:[4,5,9]
Explanation: You are given the third node with value 1, the linked 1ist should
become 4 -> 5 -> 9 after calling your function.
Note:
● The linked list will have at least two elements.
● All of the nodes' values will be unique.
● The given nodle will not be the tail and it will always be a valid node of the linked list.
● Do not return anything from your function.
题目大意
---
## Page 389
删除给点结点。没有给链表的头结点。
解题思路
其实就是把后面的结点都覆盖上来即可。或者直接当前结点的值等于下一个结点，Next指针指向下下
个结点，这样做也可以，只不过中间有一个结点不被释放，内存消耗多一些。
代码
package leetcode
/☆
* Definition for singly-linked list.
 type ListNode struct {
val int
Next *ListNode
*/
func deleteNode(node *ListNode) {
if node == nil {
return
cur := node
for cur.Next.Next != nil {
cur.val = cur.Next.Val
cur = cur.Next
cur.Val = cur.Next.Val
cur.Next = ni1
239.SlidingWindowMaximum
题目
Given an array nums, there is a sliding windlow of size k which is moving from the very left of the
array to the very right. You can only see the k numbers in the window. Each time the slidling
windlow moves right by one position. Return the max slidling windlow.
Example:
---
## Page 390
Input: nums = [1,3, -1, -3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7]
Explanation:
window position
Max
[13-1]-35367
3
1[3
-1-3]5367
3
1  3 [-1-35] 36 7
5
13-1 [-353] 67
5
13-1-3 [53 6] 7
6
13-1-35 [36 7]
7
Note:
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array
Follow up:
Could you solve it in linear time?
题目大意
给定一个数组nums，有一个大小为k的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到
在滑动窗口k内的数字。滑动窗口每次只向右移动一位。返回滑动窗口最大值。
解题思路
·给定一个数组和一个窗口为K的窗口，当窗口从数组的左边滑动到数组右边的时候，输出每次移
动窗口以后，在窗口内的最大值。
·这道题最暴力的方法就是2层循环，时间复杂度O（n*K)。
·另一种思路是用优先队列，每次窗口以后的时候都向优先队列里面新增一个节点，并删除一个节
点。时间复杂度是O（n*logn）)
·最优的解法是用双端队列，队列的一边永远都存的是窗口的最大值，队列的另外一个边存的是比最
大值小的值。队列中最大值左边的所有值都出队。在保证了双端队列的一边即是最大值以后，时间
复杂度是O（n)，空间复杂度是O(K)
代码
package leetcode
//解法一暴力解法o（nk)
func maxslidingwindowl(a []int, k int) []int {
res := make([]int, 0, k)
n := len(a)
if n == 0 {
return []int{}
---
## Page 391
for i := 0; i =k && window[0]  0 && nums[window[1en(window)-1]]= k-1 {
result = append(result, nums[window[o]]) // the 1eft-most is the index
of max value in nums
return result
240.Searcha2DMatrixll
题目
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the
following properties:
● Integers in each row are sorted in ascending from left to right.
● Integers in each column are sorted in ascending from top to bottom.
---
## Page 392
Example:
Consider the following matrix:
4, 7, 11, 15],
[2,
5, 8, 12, 19],
[3,
6，9,16, 22],
[10, 13, 14, 17, 24],
[18, 21, 23, 26, 30]
Given target = 5, return true .
Given target = 20, return fa1se
题目大意
编写一个高效的算法来搜索mxn矩阵matrix中的一个目标值target。该矩阵具有以下特性：
·每行的元素从左到右升序排列。
·每列的元素从上到下升序排列。
解题思路
·给出一个二维矩阵，矩阵的特点是每一个行内，元素随着下标增大而增大，每一列内，元素也是随
着下标增大而增大。但是相邻两行的元素并没有大小关系。例如第一行最后一个元素就比第二行第
一个元素要大。要求设计一个算法能在这个矩阵中高效的找到一个数，如果找到就输出true，找
不到就输出false。
·这一题是第74题的加强版。第74题中的二维矩阵完全是一个有序的一维矩阵，但是这一题如果
把它拍扁成一维，并不是有序的。首先每一个行或者每一列是有序的，那么我们可以依次在每一
行或者每一列中利用二分去搜索。这样做时间复杂度为O（nlogn)。
·还有一个模拟的解法。通过观察，我们发现了这个矩阵的一个特点，最右边一列的元素是本行中最
大的元素，所以我们可以先从最右边一列开始找到第一个比target元素大的元素，这个元素所在
的行，是我们接着要搜索的。在行中搜索是从最右边开始往左边搜索，时间复杂度是O（n），算上
一开始在最右边一列中查找的时间复杂度是O（m），所以最终的时间复杂度为O（m+n）。
代码
package leetcode
//解法一模拟，时间复杂度o（m+n)
func searchMatrix240(matrix [][]int, target int) bool {
if 1en(matrix) == 0 {
return false
---
## Page 393
row, co1 := 0, 1en(matrix[0])-1
for col >= 0 && row  matrix[row][col] {
row++
}else{
co1--
return false
//解法二二分搜索，时间复杂度0（n1ogn）
func searchMatrix2401(matrix [][]int, target int) bool {
if len(matrix) == 0 {
return false
for
-, row := range matrix {
1ow, high := 0, 1en(matrix[0])-1
for 1ow >1
if row[mid]> target {
high = mid - 1
}else if row[mid] pivot {
i++
a[j], a[i] = a[i], a[j]
F
a[i+l], a[hi] = a[hi], a[i+l]
return i + 1
func quickSortByte(a []byte, lo, hi int) {
if lo >= hi {
return
p:= partitionByte(a,lo, hi)
quicksortByte(a, lo, p-1)
quickSortByte(a, p+l, hi)
---
## Page 396
257.BinaryTreePaths
题目
Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Example:
Input:
[2->5, 1->3
题目大意
给定一个二叉树，返回所有从根节点到叶子节点的路径。说明：叶子节点是指没有子节点的节点。
解题思路
·Google的面试题，考察递归
代码
package leetcode
import(
"strconv"
*Definition for a binary tree node.
type TreeNode struct {
Val int
Left *TreeNode
Right *TreeNode
---
## Page 397
func binaryTreePaths(root *TreeNode) []string {
if root == nil {
return []string{}]
res := []string{}
if root.Left == nil && root.Right == nil {
return []string{strconv.Itoa(root.val)}
tmpLeft := binaryTreePaths(root.Left)
for i:= 0; i "+tmpLeft[i])
tmpRight := binaryTreePaths(root.Right)
for i:= 0; i"+tmpRight[i])
return res
258.AddDigits
题目
alip auo fuo seu ajnsas au gun st3ip si lle ppe Aipajeadas wnu agaul ajegau-uou e uani
Example:
Input: 38
Output: 2
Explanation: The process is 1ike: 3 + 8 = 11, 1 + 1 = 2.
Since 2 has only one digit, return it.
Follow up: Could you do it without any loop/recursion in O(1) runtime?
题目大意
给定一个非负整数num，反复将各个位上的数字相加，直到结果为一位数。
解题思路
·给定一个非负整数，反复加各个位上的数，直到结果为一位数为止，最后输出这一位数。
·简单题。按照题意循环累加即可。
代码
package leetcode
---
## Page 398
func addpigits(num int) int {
fornum >9{
cur := 0
for num != 0 {
cur += num % 10
num /= 10
Jn = wnu
return num
上
260.SingleNumberl