# A Data Life Cycle Modeling Proposal by Means of Formal Methods

**Authors:**
- Madalina G. Ciobanu
- Fausto Fasano
- Fabio Martinelli
- Francesco Mercaldo
- Antonella Santone

## POSTER: A Data Life Cycle Modeling Proposal by Means of Formal Methods

### Authors and Affiliations:
- **Madalina G. Ciobanu**  
  Department of Medicine and Health Sciences “Vincenzo Tiberio”  
  University of Molise, Campobasso, Italy  
  Email: [PI:EMAIL]

- **Fausto Fasano**  
  Department of Bioscience and Territory  
  University of Molise, Pesche (IS), Italy  
  Email: [PI:EMAIL]

- **Fabio Martinelli**  
  IIT-CNR, Pisa, Italy  
  Email: [PI:EMAIL]

- **Francesco Mercaldo**  
  IIT-CNR & Department of Bioscience and Territory  
  University of Molise, Pisa, Italy  
  Email: [PI:EMAIL]

- **Antonella Santone**  
  Department of Bioscience and Territory  
  University of Molise, Pesche (IS), Italy  
  Email: [PI:EMAIL]

## Abstract
Data typically evolve according to specific processes, which can be characterized by the values they assume, the frequencies at which they change, and their temporal variations in relation to other data. Violations of these conditions may indicate various threats such as tampering, cyber attacks, system failures, or software bugs. Detecting such violations is challenging, especially when the processes are unknown or difficult to extract. In this paper, we propose an approach to model the data life cycle by observing data evolution. We represent users who can alter data using timed automata and use model checking to detect anomalies in relational databases, data warehouses, and big data.

## CCS Concepts
- **Security and Privacy**: Formal methods and theory of security; Database activity monitoring.
- **Theory of Computation**: Logic and verification; Modal and temporal logics; Logic and databases.

## Keywords
Data modeling, data life cycle, database, data warehouse, big data, timed automata, formal methods

## ACM Reference Format
Madalina G. Ciobanu, Fausto Fasano, Fabio Martinelli, Francesco Mercaldo, and Antonella Santone. 2019. POSTER: A Data Life Cycle Modeling Proposal by means of Formal Methods. In ACM Asia Conference on Computer and Communications Security (AsiaCCS '19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3321705.3331003

## 1. Introduction and Related Work
Data fields within databases often vary according to specific, often tacit, processes that reflect user actions. These variations can include:
- A data field varying once a month.
- Multiple data fields varying together.
- Contextual variations in groups of data fields.
- Temporal intervals for data field variations.
- Users with access to the data field and their typical behavior.

A violation of these processes, known as a "data anomaly," can be caused by:
1. Tampering of the database.
2. Cyber attacks on the system.
3. System failures.
4. Bugs in the applications managing the data.

Detecting data anomalies can help identify improper behavior, intrusions, and verify the quality of the infrastructure. However, data variations are often not explicit, making them difficult to verify. This can be due to:
- Unknown or non-formalized processes.
- Incidental or circumstantial factors.
- Different system configurations affecting update order.

Data fields can be modified by recurrent or non-deterministic processes. Recurrent processes, which occur at regular intervals, are more suitable for defining data life cycles, while non-deterministic processes, being unpredictable, can lead to false positives. Current literature focuses on static outlier detection in data mining, with dynamic outlier detection primarily in log mining. Some studies propose algorithms without real-world application, while others, like Simonet et al., focus on resource data life cycles using Petri nets.

In this paper, we propose a data-driven approach to extract data variations directly from the database. We focus on recurrent processes that modify the same sets of data fields at regular intervals. Our aim is to capture these recurring characteristics using formal methods, specifically timed automata, to detect anomalies through logic properties describing expected behavior.

## 2. Data Life Cycle Modeling
Our approach involves modeling the data life cycle using timed automata. The method works with both homogeneous (relational databases, data warehouses) and heterogeneous (big data) data. 

### Process Overview
1. **Data Variation Logging**: For each user, we store:
   - Timestamp: Date and time of the transaction.
   - User@Host: Host and user who performed the transaction.
   - Operation: Type of transaction.
   - Table: Table name.
   - ID: Row.
   - Column: Column name.

2. **Time Window Clustering**: Using timestamps, we define fixed time window clusters and retrieve user data operations falling within each cluster.

3. **User Behavior Modeling**: Each user's behavior is modeled using a timed automaton. The network of timed automata synchronizes when a new temporal cluster starts, and state transitions represent data operations.

4. **Model Checking**: We use model checking to verify if a set of properties, aimed at verifying legitimate user behavior, is satisfied. This helps in detecting anomalies in data alteration processes.

### Example Behaviors and Anomalies
- **Behavior 1**: "Antonella" performs only read operations on the "Budget" table.
- **Behavior 2**: "Francesco" performs only read operations on the "Project" table.
- **Behavior 3**: "Madalina" performs write operations on the "Budget" and "Project" tables.
- **Behavior 4**: "Francesco" reads the "Budget" table before "Madalina" updates it, and "Antonella" accesses the table after "Madalina."
- **Behavior 5**: "Antonella" reads the "Project" table before "Madalina" updates it.

Anomalies can include:
- "Antonella" performing write operations instead of reads.
- "Francesco" reading the "Project" table instead of the "Budget" table.
- "Francesco" writing to the "Project" table, causing inconsistencies.
- "Madalina" performing read operations on the "Registry" table.
- "Francesco" reading the "Budget" table after "Madalina" updates it.
- "Antonella" reading the "Project" table after "Madalina" updates it.

These anomalies can be detected using the timed automata network and temporal logic properties provided by domain experts.

## 3. Conclusion and Future Work
We propose a method to mine data anomalies by modeling the data life cycle using timed automata networks. Future work will involve evaluating the method with real-world datasets, particularly in security and biology domains. Additionally, we plan to explore the semantic meaning of data changes to ensure consistency with their semantic identity.

## Acknowledgments
This work was partially supported by H2020 EU-funded projects SPARTA (contract 830892), C3ISP, EIT-Digital Project HII, PRIN “Governing Adaptive and Unplanned Systems of Systems,” and the EU project CyberSure 734815.

## References
[1] Bengtsson, J., and Yi, W. 2003. Timed automata: Semantics, algorithms, and tools. In Advanced Course on Petri Nets. Springer, 87–124.

[2] Canfora, G., Mercaldo, F., Moriano, G., and Visaggio, C. A. 2015. Composition-malware: Building Android malware at run time. In 2015 10th International Conference on Availability, Reliability and Security. IEEE, 318–326.

[3] Ceccarelli, M., Cerulo, L., and Santone, A. 2014. De novo reconstruction of gene regulatory networks from time series data, an approach based on formal methods. Methods 69, 3 (2014), 298–305.

[4] Chandola, V., Banerjee, A., and Kumar, V. 2009. Anomaly detection: A survey. ACM computing surveys (CSUR) 41, 3 (2009), 15.

[5] Gogoi, P., Bhattacharyya, D. K., Borah, B., and Kalita, J. K. 2011. A survey of outlier detection methods in network anomaly identification. Comput. J. 54, 4 (2011), 570–588.

[6] Leng, M., Chen, X., and Li, L. 2008. Variable length methods for detecting anomaly patterns in time series. In Computational Intelligence and Design, 2008. ISCID’08. International Symposium on, Vol. 2. IEEE, 52–56.

[7] Leng, M., Lai, X., Tan, G., and Xu, X. 2009. Time series representation for anomaly detection. In Computer Science and Information Technology, 2009. ICCSIT 2009. 2nd IEEE International Conference on. IEEE, 628–632.

[8] Martinelli, F., Mercaldo, F., Nardone, V., and Santone, A. 2017. Car hacking identification through fuzzy logic algorithms. In 2017 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE). IEEE, 1–7.

[9] Munk, M., Kapusta, J., and Švec, P. 2010. Data preprocessing evaluation for web log mining: Reconstruction of activities of a web visitor. Procedia Computer Science 1, 1 (2010), 2273–2280.

[10] Simonet, A., Fedak, G., and Ripeanu, M. 2015. Active Data: A programming model to manage data life cycle across heterogeneous systems and infrastructures. Future Generation Computer Systems 53 (2015), 25–42.