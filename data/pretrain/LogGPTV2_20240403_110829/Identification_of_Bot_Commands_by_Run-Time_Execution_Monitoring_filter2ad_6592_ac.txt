 10000
 1000
 100
 10
 1
 0.1
 1
No hooking
Hooking w/o argument retrieval
Hooking w argument retrieval
 10
 100
 1000
 10000
Number of API Calls
Figure 3. Hooking overhead with increase in the number of API calls.
The logarithmic scale is used on both the X- and Y-axis.
To evaluate BotTee, it was required that one bot command
with the same functionality be executed by at least four
different bots. This allowed construction of each template
to be based on the execution of at least three bots. The exe-
cution traces of the remaining bots were used to evaluate the
effectiveness of the template for identifying bot commands.
In addition, we collected at least 100 execution traces for
each bot command in the controlled environment. For these
100 or more traces, the ability of the method to correctly
identify the bot command can be evaluated. For instance, to
evaluate the method on Agobot, the execution traces from
other bots were used to construct semantic templates, which
were then used to identify the bot commands executed by
Agobot. For all bots, we evaluated the detection rate for
different bot commands.
B. Performance Overhead of Hooking
It is important to measure the overhead of hooking, as
that determines the practicality of the proposed method.
Figure 3 shows this overhead, as a function of the number
of intercepted API calls. For normal environments without
hooking, there is no overhead. The overhead is greater when
hooking also captures the arguments of system calls. The
326
overhead becomes signiﬁcant only when more than 1000
API calls are intercepted. This motivates the decision to
intercept only calls in ComAPI, which results in a smaller
performance penalty. We show below this is still sufﬁcient
to identify bot commands accurately.
We assume that suspected bot is ﬁrst detected by conven-
tional means. After this, execution tracing can be turned on
to identify which bot commands are being executed.
C. Correlation Results
The ﬁrst experiment was intended to determine if different
bot input commands with the same purpose produce execu-
tion traces that are highly correlated. The results are shown
in Figure 4(a) and Figure 4(b).
Figure 4(a) shows the average correlation with a prob-
ability of θ1 ≥ 95% for each bot command, performed
by all possible pairs of bots, for repetition factor γ = 2
(Note: γ = 2 for all experiments. The longer γ is, the more
robust against API call injection. However, the efﬁciency
for real-time matching might be reduced. According to the
experiments, 2 ≤ γ ≤ 5 would be recommended.). For this
experiment, the average correlation score for bot commands
with the same purpose, but performed by different bots,
was 0.88. In the case of ‘synﬂood’, ‘scan’ and ‘redirect’
commands, which were performed by Jrbot, Spybot, Agobot
and Rbot, the average correlation (ρ) was higher than 0.7. In
the case of ‘dns’, ‘download’, ‘visit’ and ‘email’ commands,
the average correlation (ρ) was higher than 0.9 All of
these commands are closely related to Internet threats, and
have a recognizable pattern of system calls to achieve their
objective.
Compared with Figure 4(a), Figure 4(b) shows that dif-
ferent bot commands with different purposes performed by
a pair of bots have low correlation values (ρ), with an
average of 0.52. This further illustrates the accuracy of
the proposed command identiﬁcation method. As expected,
very different bot commands will have very low correlation
values. For example, the average correlation of ‘delete’ and
‘open’ commands was less than 0.3. However, the ‘quit’
and ‘sysinfo’ commands have a high correlation value, since
most CACTs for the two commands consist of routine (non-
distinctive) calls for each bot.
Bot Command
sysinfo
dns
synﬂood
email
Bot Instance
Agobot, Sdbot
Jrbot, Sdbot
Jrbot, Rbot
Rbot, Jrbot
ρ
θ1 (%)
0.87193
0.99785
0.99449
0.91479
97
99
99
99
k
13
30
35
52
RESULTS FROM CORRELATION ENGINE FOR PAIRS OF BOTS
(CORRELATION (ρ), PROBABILITY (θ1 (%)), CACT LENGTH (k))
Table II
In addition, Table II shows one example of analyzing
commands from pairs of bots. The table includes the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply. 
detection rate. In the group of attack commands, BotTee
shows more than 95% detection rate. Above all, commands
in the attack command group are identiﬁed with a high
detection rate. These commands exhibit distinctive system
call patterns (type and frequency) that can be distinguished
from those of other commands.
(a)
(b)
Figure 4.
Average correlation value from the correlation engine. In
Figure 4(a), the values are for bot commands with the same purpose,
performed by a pair of different bots. In Figure 4(b), the values are for
bot commands with different purposes performed by a pair of different
bots. Each bar is the average values for all the possible execution traces of
all the bots.
length of the longest common subsequence of API calls,
the correlation, and the probability θ1, for each such pair.
As shown in Table II, the bot commands with the same
function performed by two different bots have a very high
correlation value and a probability (θ1) that
is greater
than 95%. Additionally,
the CACTs for each command
include important APIs for identifying the execution of
the bot command. These are termed the featured APIs.
For example, in the case of the ‘dns’ bot command, the
CACT is recv, TlsGetValue, GetLocalTime,
GetUserDefaultLCID, WideCharToMultiByte,
GetTimeFormatA, GetConsoleMode,
WriteConsoleA, WriteFile, inet_addr,
..., GetTickCount, InterlockedExchange,
CloseHandle, gethostbynam, inet_ntoa,
send, with the length 30.
D. Identiﬁcation of Speciﬁc Bot Commands
BotTee identiﬁes each bot command based on the method
described in section II-E. For each group of commands,
Figure 5(a) shows that BotTee achieves more than a 95%
identiﬁcation rate (γ = 2); the exception is commands in the
general group. In the groups of host control commands and
network control commands, BotTee has approximately 95%
(a)
(b)
Figure 5. Detection rate for each command group or for each bot command
as shown in Table I. The detection rate is evaluated for γ = 2, probability
(θ1) ≥ 95% correlation (ρ) ≥ 0.6 (δ).
By each command, Figure 5(b) shows in more detail
how well BotTee identiﬁes speciﬁc actions of bots on the
host.4 Most bot commands are identiﬁed correctly more
than 95% of the time. For example, commands such as
‘dns’, ‘download’, ‘visit’, etc., are 100% correctly identiﬁed.
The ‘email’ and ‘synﬂood’ commands, which also exhibit
distinctive call patterns, are identiﬁed correctly more than
95% of the time.
Table III shows an example of the logging system in
Figure 1 when a bot executes a bot command. In this
example, the victim can be a host targeted by DoS attack
or a vulnerable mail server to send spam. Other malicious
behaviors of interest can be captured by the logging system
and used for analysis of the botnet structure and use.
4The general group, as shown in Figure 5(b) includes all the commands
which consist of routine system calls, such as ‘id’, ‘alias’, ‘version’, ‘nick’,
etc., as indicated in Table I.
327
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:10:26 UTC from IEEE Xplore.  Restrictions apply. 
C&C server IP (Port)
192.168.15.101 (6667)
192.168.15.101 (6667)
192.168.15.101 (6667)
192.168.15.101 (6667)
Bot Command
id
sysinfo
synﬂood
email
Response
sdbot456
cpu: 2000MHz. ram: 2086440KB total ...
SynFlooding: 192.168.15.103 port: 12345 ...
email sent to PI:EMAIL
Victim
N/A
N/A
192.168.15.103 (1234)
192.168.15.103 (25)
Behavior
General
Host
Attack
Attack
AN EXAMPLE OF LOGGING ARGUMENTS IN THE INTERCEPTED API FUNCTIONS. THE EXAMPLE IS DERIVED BY EXPERIMENTS IN SECTION III. THE
Table III
LAST ENTRY (BEHAVIOR) IN THIS TABLE REPRESENTS EACH BOT COMMAND GROUP IN TABLE I.
E. False Identiﬁcation
Using the templates derived from monitored bot execu-
tion, we evaluated the number of times that bot commands
were incorrectly identiﬁed as being executed by non-bot
software. Table IV shows the results. In the majority of
cases,
the length of the CACT shared by the non-bot
application and the template was less than 10.
In two cases, the non-bot program trace was identiﬁed
as executing the bot command ‘download’ after comparison
with the template database. The CACT lengths in these two
cases consisted of the initial 9 (Internet Explorer) or 13
(Winscp) system calls in the template for the bot ‘download’
command, which are evidently not distinctive enough to
differentiate bots from non-bot programs. In point of fact,
some commands executed by bots may well be quite similar
to the actions taken by non-bot programs. Our assumption
is other means are used discriminate bots from non-bots, so
this isn’t a serious drawback. In all other cases (including
some not shown in Table IV), non-bot programs had low
correlation with the bot templates, and were not identiﬁed
as executing bot commands.
F. Detection Rate with API Call Injection Attack
Figure 6. Detection rate for API call injection attacks.
If an attacker wishing to obfuscate the execution of
bot commands introduced arbitrary system calls during
command execution, there should be little impact on the
proposed detection method. This is because many types of
system calls are ignored by the correlation engine. A more
serious attack would be the injection of ComAPI calls. Let
the attack rate φ be deﬁned as the fraction of ComAPI calls
which are injected by the attacker for obfuscation purposes.
328
In other words, some API calls in the complete set of
ComAPI calls are intentionally injected into execution traces
as much as φ. For instance, if the attack rate is 10%, one
tenth of the hooked API calls are injected by the attacker
for obfuscation purposes. Such injection may be intended to
obfuscate timing analysis and correlation as well. In general,
one bot command may generate an execution trace with
several hundred hooked system calls, so a 10% attack rate
may obfuscate execution traces signiﬁcantly.
For purposes of evaluation, we launched injection attacks
on bot execution, and compared with templates that gave
high detection rates for each bot command, as shown in
Figure 5(b). Figure 6 demonstrates the performance of
BotTee under these conditions. As shown in the ﬁgure,
BotTee shows a high detection rate for network-related
attack commands, up to an attack rate of 20%. In the case
of bot commands with speciﬁc patterns, such as ‘email’
and ‘synﬂood’, BotTee identiﬁes such bot commands well,
regardless of the attack rate. On the other hand, for com-
mands having a short CACT, the detection rate is decreased
when the attack rate reaches 20%. Such commands are
classiﬁed into a general group, or are not involved in network
threats, so accurate and exact identiﬁcation is likely to be
of lower priority. For bot commands which can be involved
in network threats, such as ‘dns’, ‘scan’, ‘visit’, ‘email’,
‘synﬂood’, etc., BotTee is robust to call insertion attacks.
IV. DISCUSSION
infection on honeypots. For example,
The more bots that are observed, using techniques such
as the one proposed in this paper,
the more accurately
that botnet-driven network threats can be identiﬁed. This
can be facilitated by virtualization of hosts susceptible to
bot
the Potemkin
Honeyfarm system [18] provided highly scalable virtual
honeypots based on special purpose gateways and a virtual
machine monitor derived from Xen. This work emulated
hundreds of thousands of IP addresses, using only a handful
of physical servers.
BotTee can specify victims targeted by active botnets and
infer the overall behaviors of the active botnets through
closely monitoring bots activities without analyzing network
trafﬁc. To do so, we should allow the bots to communicate