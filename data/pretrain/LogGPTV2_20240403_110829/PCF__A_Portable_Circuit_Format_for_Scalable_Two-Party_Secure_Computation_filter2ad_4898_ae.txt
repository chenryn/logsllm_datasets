128-bit mult.
256-bit mult.
76± 4% 2820± 2% 1200± 10%
3900± 3%
21± 2%
11.2± 0.2%
23.± 2%
27.± 4%
10± 20%
63.0± 0.4%
100± 40%
260± 10%
16± 6%
70.1± 1%
192.± 0.3% 47.2± 0.6%
637.± 0.5% 160± 1%
210± 2%
33.3± 0.5%
49.± 6%
187.± 2%
168.± 0.4%
577.± 0.3%
Table 9: Online running time in the malicious model for several circuits. Times are averaged over 50 samples, with
95% conﬁdence intervals.
duce the performance differential between the phone and
PC environments. Additionally, the KSS12 system uses
more efﬁcient cryptographic primitives, potentially fur-
ther improving performance.
7 Related Work
Compiler approaches to secure two-party computation
have attracted signiﬁcant attention in recent years. The
TASTY system presented by Henecka et al. [11] com-
bines garbled circuit approaches with homomorphic en-
cryption, and includes a compiler that emits circuits that
can be used in both models. As with Fairplay and
KSS12, TASTY requires functions to be described in a
domain-speciﬁc language. The TASTY compiler per-
forms optimizations on the abstract syntax tree for the
function being compiled. Kruger et al. developed an or-
dered BDD compiler to test the performance of their sys-
tem relative to Fairplay [19]. Mood et al. focused on
compiling secure functions on mobile devices with the
PALC system, which involved a modiﬁcation to the Fair-
play compiler [23].
Recently, a compiler approach based on bounded
model checking was present by Holzer et al. [12]. In that
work, the CBMC system [5] was used to construct cir-
cuits, which were then rewritten to have fewer non-XOR
gates. This approach had several advantages over pre-
vious approaches, most prominent being that functions
could be described in the widely used C programming
language, and that the use of CBMC allows for more
advanced software engineering techniques to be applied
to secure computation protocols. Like KSS12, however,
this approach unrolls all loops (up to some ﬁxed number
of iterations), and converts a high level description di-
rectly to a boolean circuit which must then be optimized.
In addition to SFE, work on efﬁcient compilers for
proof systems has also been presented. Almeida et al.
developed a zero-knowledge proof of knowledge com-
piler for Σ-protocols, which converts a protocol speciﬁ-
cation given in a domain-speciﬁc language into a pro-
gram for the prover and the veriﬁer to run [1]. Setty
et al. presented a system for veriﬁable computation that
uses a modiﬁcation of the Fairplay compiler, which com-
putes a system of quadratic constraints instead of boolean
circuits, and emits executables for the prover and veri-
ﬁer [28, 29]. Our system is somewhat similar to these
approaches, in that the circuit representation we present
can be viewed as a program that is executed by the par-
USENIX Association  
22nd USENIX Security Symposium  333
13
ties in the SFE system; however, our approach is unique
in its handling of control ﬂow and iterative constructs.
Closely related to our work is the Sharemind sys-
tem [3, 14], which uses secure computation as a building
block for privacy-preserving distributed applications. As
in our approach, the circuits used in the secure compu-
tation portions of Sharemind are not fully unrolled until
the protocol is actually run. Functions in Sharemind are
described using a domain-speciﬁc language called Se-
creC. Although there has been work on static analysis
for SecreC [26], the SecreC compiler does not perform
automatic optimizations. By contrast, our approach is fo-
cused on allowing circuit optimizations at the bit-level to
occur without having to unroll an entire circuit.
Kerschbaum has presented work on automatically op-
timizing secure computation at the protocol level, with
an approach based on term and expression rewriting [15,
16]. This approach is based on maximizing the use of of-
ﬂine computation by inferring what each party can com-
pute without knowledge of the other party’s input, and
does not treat the underlying secure computation primi-
tives as a black box. It therefore requires additional work
to remain secure in the malicious model. Our techniques
could conceivably be combined with Kerschbaum’s to re-
duce the overhead of online components.
8 Future Work
Our compiler can conceivably read any bytecode repre-
sentation as input; one immediate future direction is to
write translations for the instructions of another byte-
code format, such as LLVM or the JVM, which would
allow functions to be expressed in a broader range of
languages. Additionally, we believe that our techniques
could be combined with Sharemind, by having our com-
piler read the bytecode for the Sharemind VM and com-
pute optimized PCF ﬁles for cases where garbled circuit
computations are used in a Sharemind protocol.
The PCF format does not convey high-level informa-
tion about data operations or types. Such information
may further reduce the size of the circuits that are com-
puted. Static analysis of such information by compilers
has been widely studied, and it is possible that our com-
piler could be extended to support further reductions in
the sizes of circuits emitted by the PCF interpreter. High-
level information about data structures could also be used
to improve the generation of circuits prior to optimiza-
tion, using techniques recently presented by Evans and
Zahur [6].
Our system and techniques can likely be generalized to
the multiparty case, and to other representations of func-
tions, such as arithmetic circuits. This would require sig-
niﬁcant changes to the optimization strategies and goals
in our compiler, but fewer changes would be necessary
for the PCF interpreter. Similar modiﬁcations to support
homomorphic encryption systems are also possible.
9 Conclusion
We have presented an approach to compiling and stor-
ing circuits for secure computation systems that requires
substantially lower computational resources than previ-
ous approaches. Empirical evidence of the improve-
ment and utility of our approach is given, using a vari-
ety of functions with different circuit sizes and control
ﬂow structures. Additionally, we have presented a com-
piler for secure computation that reads bytecode as an in-
put, rather than a domain-speciﬁc language, and have ex-
plored the challenges associated with such an approach.
We also presented interpreters, which evaluate our new
language on both PCs and phones.
The code for the compiler, PCF interpreters, and test
cases will be available on the authors’ website.
Acknowledgments We would like to thank Elaine Shi
for her helpful advice. We also thank Chih-hao Shen for
his help with porting KSS12 to use PCF. This material is
based on research sponsored by the Defense Advanced
Research Projects Agency (DARPA) and the Air Force
Research Laboratory (AFRL) under contract FA8750-
11-2-0211. The U.S. Government is authorized to re-
produce and distribute reprints for Governmental pur-
poses notwithstanding any copyright notation thereon.
The views and conclusions contained herein are those
of the authors and should not be interpreted as neces-
sarily representing the ofﬁcial policies or endorsements,
either expressed or implied, of DARPA or the U.S. Gov-
ernment.
References
[1] J. B. Almeida, E. Bangerter, M. Barbosa, S. Krenn, A.-R.
Sadeghi, and T. Schneider. A Certifying Compiler For Zero-
Knowledge Proofs of Knowledge Based on Σ-Protocols. In Pro-
ceedings of the 15th European conference on Research in com-
puter security, ESORICS’10, pages 151–167, Berlin, Heidelberg,
2010. Springer-Verlag.
[2] A. Biere, A. Cimatti, E. M. Clarke, and Y. Zhu. Symbolic Model
Checking without BDDs. In Proceedings of the 5th International
Conference on Tools and Algorithms for Construction and Anal-
ysis of Systems, TACAS ’99, pages 193–207, London, UK, UK,
1999. Springer-Verlag.
[3] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A Frame-
work for Fast Privacy-Preserving Computations. In Proceedings
of the 13th European Symposium on Research in Computer Secu-
rity - ESORICS’08, 2008.
[4] J. Boyar and R. Peralta. A New Combinational Logic Minimiza-
tion Technique with Applications to Cryptology. In P. Festa, ed-
itor, Experimental Algorithms, volume 6049 of Lecture Notes in
Computer Science, pages 178–189. Springer Berlin / Heidelberg,
2010.
334  22nd USENIX Security Symposium 
USENIX Association
14
[5] E. Clarke, D. Kroening, and F. Lerda. A Tool for Checking ANSI-
C Programs.
In K. Jensen and A. Podelski, editors, Tools and
Algorithms for the Construction and Analysis of Systems (TACAS
2004), volume 2988 of Lecture Notes in Computer Science, pages
168–176. Springer, 2004.
[6] D. Evans and S. Zahur. Circuit structures for improving efﬁciency
of security and privacy tools. In IEEE Symposium on Security and
Privacy (to appear), 2013.
[7] S. Even, O. Goldreich, and A. Lempel. A randomized protocol
for signing contracts. Commun. ACM, 28(6):637–647, June 1985.
[8] C. W. Fraser and D. R. Hanson. A Retargetable C Compiler: De-
sign and Implementation. Addison-Wesley Longman Publishing
Co., Inc., Boston, MA, USA, 1995.
[9] O. Goldreich, S. Micali, and A. Wigderson. Proofs that yield
nothing but their validity or all languages in np have zero-
knowledge proof systems. J. ACM, 38(3):690–728, July 1991.
[10] V. Goyal, P. Mohassel, and A. Smith. Efﬁcient Two Party and
Multi Party Computation Against Covert Adversaries.
In Pro-
ceedings of 27th annual international conference on Advances
in cryptology, EUROCRYPT’08, pages 289–306, Berlin, Heidel-
berg, 2008. Springer-Verlag.
[11] W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider, and
I. Wehrenberg. TASTY: Tool for Automating Secure Two-partY
computations. In ACM Conference on Computer and Communi-
cations Security, 2010.
[12] A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith. Secure Two-
Party computations in ANSI C. In Proceedings of the 2012 ACM
conference on Computer and communications security, CCS ’12,
pages 772–783, New York, NY, USA, 2012. ACM.
[13] Y. Huang, D. Evans, J. Katz, and L. Malka. Faster Secure Two-
Party Computation Using Garbled Circuits. In USENIX Security
Symposium, 2011.
[14] R. Jagom¨agis. SecreC: a Privacy-Aware Programming Language
with Apllications in Data Mining. Master’s thesis, University of
Tartu, 2010.
[15] F. Kerschbaum. Automatically optimizing secure computation.
In Proceedings of the 18th ACM conference on Computer and
communications security, CCS ’11, pages 703–714, New York,
NY, USA, 2011. ACM.
[16] F. Kerschbaum. Expression rewriting for optimizing secure com-
putation. In Conference on Data and Application Security and
Privacy, 2013.
[17] V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free
XOR Gates and Applications. In L. Aceto, I. Damg˚ard, L. Gold-
berg, M. Halld´orsson, A. Ing´olfsd´ottir, and I. Walukiewicz, edi-
tors, ALP 2008, volume 5126 of LNCS, pages 486–498. Springer,
2008.
[18] B. Kreuter, A. Shelat, and C.-H. Shen. Billion-gate secure com-
putation with malicious adversaries. In Proceedings of the 21st
USENIX conference on Security symposium, Security’12, pages
14–14, Berkeley, CA, USA, 2012. USENIX Association.
[19] L. Kruger, S. Jha, E.-J. Goh, and D. Boneh. Secure function
evaluation with ordered binary decision diagrams. In Proceedings
of the 13th ACM conference on Computer and communications
security (CCS’06), Alexandria, VA, Oct. 2006.
[20] L. Malka. VMCrypt: modular software architecture for scalable
secure computation. In ACM Conference on Computer and Com-
munications Security, pages 715–724, 2011.
[21] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay: A Secure
Two-Party Computation System. In 13th Conference on USENIX
Security Symposium, volume 13, pages 287–302. USENIX Asso-
ciation, 2004.
[22] B. Mood. Optimizing Secure Function Evaluation on Mobile De-
vices. Master’s thesis, 2012, University of Oregon.
[23] B. Mood, L. Letaw, and K. Butler. Memory-Efﬁcient Garbled
Circuit Generation for Mobile Devices. In Financial Cryptogra-
phy and Data Security, volume 7397. Springer Berlin Heidelberg,
2012.
[24] B. Pinkas, T. Schneider, N. Smart, and S. Williams. Secure Two-
Party Computation Is Practical. In M. Matsui, editor, Asiacrypt,
volume 5912 of LNCS, pages 250–267. Springer, 2009.
[25] M. Rabin. How to Exchange Secrets by Oblivious Transfer.
Technical Report TR-81, Harvard Aiken Computation Labora-
tory, 1981.
[26] J. Ristioja. An analysis framework for an imperative privacy-
preserving programming language. Master’s thesis, Institute of
Computer Science, University of Tartu, 2010.
[27] T. Schneider. Engineering Secure Two-Party Computation Proto-
cols - Design, Optimization, and Applications of Efﬁcient Secure
Function Evaluation. Springer, 2012.
[28] S. Setty, R. McPherson, A. J. Blumberg, and M. Walﬁsh. Mak-
ing Argument Systems for Outsourced Computation Practical
(Sometimes). In NDSS, 2012.
[29] S. Setty, V. Vu, N. Panpalia, B. Braun, A. J. Blumberg, and
M. Walﬁsh. Taking proof-based veriﬁed computation a few steps
closer to practicality. In Proceedings of the 21st USENIX confer-
ence on Security symposium, Berkeley, CA, USA, 2012.
[30] A. Yao. Protocols for Secure Computations.
In 23rd Sympo-
sium on Foundations of Computer Science, pages 160–164. IEEE
Computer Society, 1982.
A PCF Semantics
The PCF ﬁle format consists of a header section that de-
clares the input size, followed by a list of operations that
are divided into subroutines. At runtime, these opera-
tions manipulate the internal state of the PCF interpreter,
causing gates to be emitted when necessary. The inter-
nal state of the PCF interpreter consists of an instruction
pointer, a call stack, an array of wire values, and an ar-
ray of pointers. The pointers are positive integers. Wire
values are 0, 1, or ⊥, where ⊥ represents a value that de-
pends on input data, which is supplied by the code that
invokes the interpreter. Each position in the wire table
can be treated as a stack.
Each PCF instruction can take up to 3 arguments. The
instructions and their semantics are as follows:
CLABEL/SETLABELC Appears only in the header,
used for setting the input size for each party. CLA-
BEL declares the bit width of a value, SETLA-
BELC sets the value.
FUNCTION Denotes the beginning of a subroutine.
When the subroutine is called,
the instruction
pointer is set to the position following this instruc-
tion.
GADGET Denotes a branch target
USENIX Association  
22nd USENIX Security Symposium  335
15
A.1 Example PCF Description
Below is an example of a PCF ﬁle. It iterates over a loop
several times times, XORing the two parties’ inputs with
a bit from the internal state.
GADGET: main
CLABEL ALICEINLENGTH 32
CLABEL BOBINLEGNTH 32
CLABEL xxx 32
SETLABELC ALICEINLENGTH 128
SETLABELC ALICEINLENGTH 128
FUNCTION: main
1111 32 0 0
0000 33 0 0
0000 34 0 0
0000 35 0 0
GADGET: L
0110 36 35 34
0001 35 36 36
0110 36 34 33
0001 34 36 36
0110 36 33 32
0001 33 36 36
ALICEINPUT32 0 0
0001 36 0 0
BOBINPUT32 0 0
0001 37 0 0
0110 38 37 36
0110 39 33 38
SHIFT OUT ALICE 39
BRANCH L 35
RETURN xxx
BRANCH Takes two arguments: a target, declared with
GADGET, and a location in the wire table. In the
wire value is 0, the instruction pointer is set to the
instruction following the target. If the wire value is
1, the instruction pointer is incremented. If the wire
value is ⊥, evaluation halts with an error.
FUNC Calls a subroutine, pushing the current instruc-
tion pointer onto the call stack.
PUSH Pushes a copy of the wire value at a speciﬁed
position onto the stack at that position.
POP Pops a stack at a speciﬁed position. If there is only
one value on that stack, evaluation halts with an er-
ror.
ALICEIN32/BOBIN32 Fetches 32 input bits from one
party, beginning at a speciﬁed bit position in that
party’s input. The bit position is speciﬁed by an
array of 32 values in the wire table. If any of the
values is ⊥, evaluation halts with an error. The input
values will all have the value ⊥, and will be stored
in the wire table at positions 0 through 31.
SHIFT OUT Outputs a single bit for a given party
RETURN Return from a subroutine. The instruction
pointer is repositioned to the value popped from the
top of the call stack.
STORECONSTPTR Sets a value in the pointer table
OFFSETPTR Adds a value to a pointer, speciﬁed by an
array of 32 wire values starting at a position in the
wire table. If any value in the array is ⊥, evaluation
halts with an error.
PTRTOWIRE Saves a pointer value as a 32 bit un-
signed integer. Each of the bits is pushed onto the
stack at a location in the wire table.
PTRTOPTR Copies a value from one position in the
pointer table to another.
CPY121 Copy a wire value from a position speciﬁed by
a pointer to a statically speciﬁed position.
CPY32 Copy a wire value from a statically speciﬁc po-
sition to a position speciﬁed by a pointer.
g0,0g0,1g1,0g1,1 Compute a gate with the speciﬁed truth
table on two input values from the wire table, with
output stored at a speciﬁed position. Logic simpli-
ﬁcation rules are applied when one or both of the
input values is ⊥. If no simpliﬁcation is possible,
then the output will be ⊥ and the interpreter will
emit a gate. This is used for both local computa-
tions such as updating a loop index, and for com-
puting the gates used by the protocol.
336  22nd USENIX Security Symposium 
USENIX Association
16