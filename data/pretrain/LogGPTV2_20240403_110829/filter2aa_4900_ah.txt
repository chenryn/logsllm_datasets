.PP
[\fIn\fP]\fB>&\fP\fIword\fP
.RE
.PP
用于复制输出文件描述符。如果没有指定
.I n，
将使用标准输出 (文件描述符 1)。如果
.I word
中的数字并未指定一个被用于输出的文件描述符，将产生一个重定向错误。
特殊情况下，如果忽略了 \fIn\fP，并且 \fIword\fP 并非扩展为一个或多个数字，
标准输出和标准错误将被重定向，和前面描述的一样。
.SS "Moving File Descriptors"
.PP
重定向操作符
.RS
.PP
[\fIn\fP]\fB&\fP\fIdigit\fP\fB\-\fP
.RE
.PP
将文件描述符 \fIdigit\fP 移动为文件描述符
.IR n ,
或标准输出 (文件描述符 1)，如果没有指定 \fIn\fP 的话。
.SS "Opening File Descriptors for Reading and Writing"
.PP
重定向操作符
.RS
.PP
[\fIn\fP]\fB<>\fP\fIword\fP
.RE
.PP
使得以
.I word
扩展结果为名的文件被打开，通过文件描述符
.IR n 
进行读写。如果没有指定
.I n
那么就使用文件描述符 0。如果文件不存在，它将被创建。
.SH 别名(ALIASES)
\fIAliases\fP (别名机制) 允许将一个词来替换为一个字符串，如果它是
一个简单命令的第一个词的话。shell 记录着一个别名列表，可以使用
内建命令
.B alias
和
.B unalias
来定义和取消 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节)。每个命令的第一个词，如果没有引用，都将被检查是否是一个别名。
如果是，这个词将被它所指代的文本替换。别名和替换的文本可以包含任何有效
的 shell 输入，包含上面列出的
.I metacharacters (元字符)
，特殊情况是别名中不能包含 \fI=\fP。替换文本的第一个词也被检查是否
是别名，但是如果它与被替换的别名相同，就不会再替换第二次。这意味着可以用
.B ls
作为
.BR "ls \-F"
的别名，
.B bash
不会递归地展开替换文本。如果别名的最后一个字符是
.IR blank ,
那么命令中别名之后的下一个词也将被检查是否能进行别名展开。
.PP
别名可以使用
.B alias
命令来创建或列举出来，使用
.B unalias
命令来删除。
.PP
在替换文本中没有参数机制。如果需要参数，应当使用 shell 函数 (参见下面的
.SM
.B FUNCTIONS (函数)
段落)。
.PP
如果 shell 不是交互的，别名将不会展开，除非使用内建命令
.B shopt
设置了
.B expand_aliases
选项。
.PP
关于别名的定义和使用中的规则比较混乱。
.B Bash
在执行一行中的任何命令之前，总是读入至少完整一行的输入。
别名在命令被读取时展开，而不是在执行的时候。因此，别名定义如果
和另一个命令在同一行，那么不会起作用，除非读入了下一行。
别名定义之后，同一行中的命令不会受新的别名影响。这种行为
在函数执行时存在争议，因为别名替换是在函数定义被读取时发生的，
而不是函数被执行的时候，因为函数定义本身是一个复合命令。结果，
在函数中定义的别名只有当这个函数执行完才会生效。为了保险起见，
应当总是将别名定义放在单独的一行，不在复合命令中使用
.B alias。
.PP
不管什么情况下，别名都被 shell 函数超越 (be superseded)。
.SH 函数(FUNCTIONS)
一个 shell 函数，以上面
.SM
.BR "SHELL GRAMMAR" 
中描述的方法定义，保存着一系列的命令，等待稍后执行。
当 shell 函数名作为一个简单命令名使用时，这个函数名关联的命令的序列
被执行。函数在当前 shell 的上下文环境中执行；不会创建新的进程来
解释它们 (这与 shell 脚本的执行形成了对比)。当执行函数时，函数
的参数成为执行过程中的位置参数 (positional parameters)。特殊参数
.B #
被更新以反映这个变化。位置参数 0 不会改变。函数执行时，
.SM
.B FUNCNAME
变量被设置为函数的名称。函数和它的调用者在 shell 执行环境的所有
其他方面都是一样的，特殊情况是
.SM
.B DEBUG
陷阱 (参见下面对内建函数
.B trap
的描述，在
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节中) 不会被继承，除非函数设置了
\fBtrace\fP 属性 (参见下面对内建函数
.SM
.B declare
的描述)。
.PP
函数中的局部变量可以使用内建命令
.B local
来声明。通常情况下，变量和它们的值在函数和它的调用者之间是共享的。
.PP
如果函数中执行了内建命令
.B return，
那么函数结束，执行从函数调用之后的下一个命令开始。
函数结束后，位置参数的值以及特殊参数
.B #
都将重置为它们在函数执行前的值。
.PP
函数名和定义可以使用内建命令
.B declare
或
.B typeset
加上
.B \-f
参数来列出。如果在
.B declare
或
.B typeset
命令中使用
.B \-F
选项将只列出函数名。函数可以使用内建命令
.B export
加上
.B \-f
参数导出，使得子 shell 中它们被自动定义。
.PP
函数可以是递归的。对于递归调用的次数没有硬性限制。
.SH 算术求值("ARITHMETIC EVALUATION")
在一定的环境下，shell 允许进行算术表达式的求值 (参见内建命令 \fBlet\fP
和 \fBArithmetic Expansion\fP (算术表达式))。
求值使用固定宽度的整数，不检查是否溢出，但是被零除会被捕获，标记为错误。
操作数及其优先级和聚合程度与 C 语言中相同。下列操作数的列表按照相同
优先级的操作数其级别来分组。列出的级别顺序是优先级递减的。
.PP
.PD 0
.TP
.B \fIid\fP++ \fIid\fP\-\-
变量自增/自减 (在后)
.TP
.B ++\fIid\fP \-\-\fIid\fP
变量自增/自减 (在前)
.TP
.B \- +
(单目的) 取负/取正
.TP
.B ! ~
逻辑和位取反
.TP
.B **
乘幂
.TP
.B * / %
乘，除，取余
.TP
.B + \-
加，减
.TP
.B >
左/右位移
.TP
.B = 
比较
.TP
.B == !=
相等/不等
.TP
.B &
位与 (AND)
.TP
.B ^
位异或 (exclusive OR)
.TP
.B |
位或 (OR)
.TP
.B &&
逻辑与 (AND)
.TP
.B ||
逻辑或 (OR)
.TP
.B \fIexpr\fP?\fIexpr\fP:\fIexpr\fP
条件求值
.TP
.B = *= /= %= += \-= >= &= ^= |=
赋值
.TP
.B \fIexpr1\fP , \fIexpr2\fP
逗号表达式
.PD
.PP
shell 变量可以作为操作数；在表达式求值之前会进行参数扩展。
在表达式中，可以用名称引用 shell 变量，不必使用参数扩展的语法。
变量被引用时，其值被作为算术表达式来求值。
shell 变量用于表达式中时，不必启用整数属性。
.PP
以 0 为前导的常量被当作八进制数，以 0x 或 0X 作为前导表明是十六进制。
其他情况下，数字的形式是 [\fIbase#\fP]n，这里 \fIbase\fP 是一个 2 到 64
的十进制数值，作为数字的基数，\fIn\fP 是在这个基数中数字的值。
如果忽略了 \fIbase#\fP，将以 10 为基数。大于 10 的数字依次以小写字母，
大写字母，@ 和 _ 表示。如果 \fIbase\fP 小于或等于 36，在表示 10 与 35 之间
的数字时小写字母和大写字母可以互换。
.PP
操作符根据优先级顺序进行求值。圆括号中的子表达式被最先求值，可能会
超越上面的优先级规则。
.SH 条件表达式("CONDITIONAL EXPRESSIONS")
条件表达式用于 \fB[[\fP 复合命令以及内建命令 \fBtest\fP 和 \fB[\fP 中，
用来测试文件属性，进行字符串和算术比较。表达式使用下面的单目或二进制操作构造。
如果某操作的任何 \fIfile\fP 参数的形式是 \fI/dev/fd/n\fP，那么将检查
文件描述符 \fIn\fP。如果某操作的 \fIfile\fP 参数是 \fI/dev/stdin\fP，
\fI/dev/stdout\fP 或者 \fI/dev/stderr\fP 之一，将分别检查文件描述符 0，1 和 2。
.sp 1
.PD 0
.TP
.B \-a \fIfile\fP
如果 \fIfile\fP 存在则为真。
.TP
.B \-b \fIfile\fP
如果 \fIfile\fP 存在且为块设备则为真。
.TP
.B \-c \fIfile\fP
如果 \fIfile\fP 存在且为字符设备则为真。
.TP
.B \-d \fIfile\fP
如果 \fIfile\fP 存在且是一个目录则为真。
.TP
.B \-e \fIfile\fP
如果 \fIfile\fP 存在则为真。
.TP
.B \-f \fIfile\fP
如果 \fIfile\fP 存在且为普通文件则为真。
.TP
.B \-g \fIfile\fP
如果 \fIfile\fP 存在且是设置组ID的 (sgid) 则为真。
.TP
.B \-h \fIfile\fP
如果 \fIfile\fP 存在且为符号链接则为真。
.TP
.B \-k \fIfile\fP
如果 \fIfile\fP 存在且设置了 ``sticky'' 位 (粘滞位) 则为真。
.TP
.B \-p \fIfile\fP
如果 \fIfile\fP 存在且是一个命名管道 (FIFO) 则为真。
.TP
.B \-r \fIfile\fP
如果 \fIfile\fP 存在且可读则为真。
.TP
.B \-s \fIfile\fP
如果 \fIfile\fP 存在且大小大于零则为真。
.TP
.B \-t \fIfd\fP
如果文件描述符
.I fd
是打开的且对应一个终端则为真。
.TP
.B \-u \fIfile\fP
如果 \fIfile\fP 存在且是设置用户ID的 (suid) 则为真。
.TP
.B \-w \fIfile\fP
如果 \fIfile\fP 存在且可写则为真。
.TP
.B \-x \fIfile\fP
如果 \fIfile\fP 存在且可执行则为真。
.TP
.B \-O \fIfile\fP
如果 \fIfile\fP 存在且为有效用户ID所拥有则为真。
.TP
.B \-G \fIfile\fP
如果 \fIfile\fP 存在且为有效组ID所拥有则为真。
.TP
.B \-L \fIfile\fP
如果 \fIfile\fP 存在且为符号链接则为真。
.TP
.B \-S \fIfile\fP
如果 \fIfile\fP 存在且为套接字则为真。
.TP
.B \-N \fIfile\fP
如果 \fIfile\fP 存在且上次读取后被修改过则为真。
.TP
\fIfile1\fP \-\fBnt\fP \fIfile2\fP
如果 \fIfile1\fP 比 \fIfile2\fP 要新 (根据修改日期)，或者
如果 \fIfile1\fP 存在而 \fIfile2\fP 不存在，则为真。
.TP
\fIfile1\fP \-\fBot\fP \fIfile2\fP
如果 \fIfile1\fP 比 \fIfile2\fP 更旧，或者
如果 \fIfile1\fP 不存在而 \fIfile2\fP 存在，则为真。
.TP
\fIfile1\fP \fB\-ef\fP \fIfile2\fP
如果 \fIfile1\fP 和 \fIfile2\fP 指的是相同的设备和 inode 号则为真。
.TP
.B \-o \fIoptname\fP
如果启用了 shell 选项
.I optname
则为真。参见下面对内建命令
.B set
的
.B \-o
选项的描述中的选项列表。
.TP
.B \-z \fIstring\fP
如果 \fIstring\fP 的长度为 0 则为真。
.TP
.B \-n \fIstring\fP
.TP
\fIstring\fP
如果 \fIstring\fP 的长度非 0 则为真。
.TP
\fIstring1\fP \fB==\fP \fIstring2\fP
如果字符串相等则为真。\fB=\fP 可以用于使用 \fB==\fP 的场合来兼容 POSIX 规范。
.TP
\fIstring1\fP \fB!=\fP \fIstring2\fP
如果字符串不相等则为真。
.TP
\fIstring1\fP \fB<\fP \fIstring2\fP