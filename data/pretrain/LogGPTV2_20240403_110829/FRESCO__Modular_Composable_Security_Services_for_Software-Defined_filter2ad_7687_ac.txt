packet responses from the honeypot (4), unaware that all of
its ﬂows are now redirected to and from the honeynet.
find_scan (1)(2){
type:ScanDetector
event:TCP_CONNECTION_FAIL
input:source_IP
output:source_IP, scan_result
parameter:5
/* no actions are defined */
action: -
}
do_redirect (2)(0){
type:ActionHandler
event:PUSH
input:source_IP, scan_result
output: -
parameter: -
/* if scan_result equals 1, redirect,
otherwise, forward */
action: scan_result == 1 ?
REDIRECT : FORWARD
}
Figure 5. FRESCO script with two connecting modules used to build a reﬂector net
on the messages through FRESCO script.
A message from a third-party security application will
be delivered to a module as a type of event - MES-
SAGE LEGACY, and the format of a message is of two
kinds: (i) FRESCO type and (ii) other standardized formats
such as the intrusion detection message exchange format
(IDMEF) [33]. If we use FRESCO type, it is notiﬁed in the
event as a keyword of FRESCO, and it can be represented as
MESSAGE LEGACY:FRESCO. If we use IDMEF, it can
be shown as MESSAGE LEGACY:IDMEF.
In the scenario, shown in Figure 7, an attacker sends a
bot binary (1) to the host C, and BotHunter responds by
producing an infection proﬁle (2). Then, BotHunter reports
this information (i.e., the Victim IP and forensic conﬁdence
score for the infection) to a security application written in
FRESCO script (3). If the proﬁle’s forensic score achieves a
threshold value, the application imposes a quarantine action
on the victim IP. The quarantine module uses the FRESCO
SEK to enforce a series of ﬂow rules that implement the
quarantine action SEK (4, 5). Finally, if an infected host
(the host C) sends another malicious data to other hosts,
such as host A or host B (6), it is automatically blocked by
the switch.
Figure 7. Operational illustration of a FRESCO
actuator cooperating with BotHunter
To implement this function, we simply reconﬁgure the
“do quarantine” instance (or create another instance) used
in the above example scenario for this case. This time,
we instantiate the instance with four alternate variables:
(i) event, (ii) input, (iii) parameter, and (iv) condition
Figure 6. Operational illustration of a FRESCO
reﬂector net application
6.2 Cooperating with a Legacy Security Application
FRESCO provides an interface, which receives messages
from legacy security applications, such as Snort [38] and
BotHunter [12]. Usually, we use these network security ap-
plications to monitor our networks, often using DPI-based
techniques to identify malicious trafﬁc content or by simply
monitoring ﬂow patterns. Using FRESCO, alerts produced
from such network security monitors can be integrated into
the ﬂow rule production logic of OF-enabled networks. To
do this, we employ FRESCO actions (e.g., drop and redi-
rect) as responses against network attacks.
One might consider reimplementing classic network
security applications directly as OpenFlow applications.
However, such efforts are both costly in engineering time
and subject to limitations in the availability of data pro-
vided by the OF controller. Also, OpenFlow does not ex-
port full packet content over its APIs, so DPI-based secu-
rity services must be implemented as external applications.
To reduce the integration burden, FRESCO provides a func-
tion of receiving messages from third-party security appli-
cations, and we can simply design response strategies based
part of action. When BotHunter forwards its infection
alarm using the FRESCO API, we set the event vari-
able as MESSAGE LEGACY:FRESCO. The input vari-
ables passed to this module include the victim ip (re-
ported as infected by BotHunter), and the infection conﬁ-
dence score, which represents the degree of forensic evi-
dence recorded within the infection proﬁle. We also spec-
ify a parameter for the conﬁdence threshold, and trigger the
QUARANTINE action when the conﬁdence score exceeds
the conﬁdence threshold. The FRESCO script for this in-
stance is shown in Figure 8.
do_quarantine (2)(0){
type:ActionHandler
event:MESSAGE_LEGACY:FRESCO
input:victim_ip,confidence_score
output: -
parameter:confidence_threshold
/* redirect all flows from source IP */
action:confidence_score > confidence_threshold
? QUARANTINE(victim_ip)
}
Figure 8. FRESCO script for invoking host
quarantine for BotHunter
7
Implementation
We have developed a prototype implementation of the
FRESCO architecture. The FRESCO Application Layer
prototype is implemented in Python and runs as an Open-
Flow application on NOX. The prototype operates on NOX
version 0.5.0 using the OpenFlow 1.1.0 protocol, and
is implemented in approximately 3,000 lines of Python.
FRESCO modules are implemented as independent Python
objects, and inputs and parameters of a module are input
variables to the Python object. The return values of a Python
object are considered as output values of a module.
A sample implementation of the FRESCO Compara-
tor module, used in Figure 2 (right), is presented in Fig-
ure 9. All modules in FRESCO start with the function
of module start, and this function has two arguments: (i)
input dic, which is a dictionary data structure contain-
ing F-DB, event, and input values, and (ii) param list,
which is a list structure storing user-deﬁned parameter val-
ues. All variables starting with ”FR ” are FRESCO native
variables. The developer ﬁlls in additional specialized logic
at the bottom of the module (lines 13-18).
The FRESCO SEK is
implemented as a native
C++ extension of the NOX source code in approxi-
mately 1160 lines of C++ code. We modiﬁed the
send openflow command function, whose main opera-
tion is to send OpenFlow commands to network switches,
to capture ﬂow rules from all OpenFlow applications.
FRESCO SEK intercepts ﬂow rules in the function and
stores them into the security constraints table if the rules
are from FRESCO applications (i.e., ﬂow rules produced
# initialize FRESCO variables
FR_ret_dic = {}
FR_ret_dic[’output’] = []
FR_ret_dic[’action’] = None
# initialize FRESCO native inputs
FR_FDB = input_dic[’FR_FDB’]
FR_event = in_dic[’FR_event’]
FR_input = input_dic[’FR_input’]
1 def module_start(input_dic, param_list):
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
FR_ret_dic[’output’].append(output)
# end - user defined logic
# start - user defined logic
if param_list[0] == FR_input[0]:
return FR_ret_dic
output = 1
else:
output = 0
Figure 9. FRESCO Comparator module
through the FRESCO path are considered trusted ﬂow rules
and are preserved as active network security constraints). If
a ﬂow rule is from a non-FRESCO application, FRESCO
SEK evaluates the rule to determine if a conﬂict exists
within its security constraints table. The match algorithm is
speciﬁcally optimized to perform the least-expensive com-
If there are conﬂicts, an error message is
parisons ﬁrst.
returned to the OF application. Otherwise,
the rule is
forwarded to the network switches. We implement and
evaluate the security constraint table using the in-memory
database opportunistic best-ﬁt comparison algorithm, which
reports an ability to execute queries in near-constant lookup
time.
8 System Evaluation
We now evaluate the FRESCO framework with respect
to its ease of use, ﬂexibility, and security constraints preser-
vation. To evaluate components in FRESCO, we employ
mininet [25], which provides a rapid prototyping environ-
ment for the emulation of OpenFlow network switches.
Using mininet, we have emulated one OpenFlow network
switch, three hosts connected to the switch, and one host to
operate our NOX controller. We perform ﬂow generation
by selecting one or two hosts to initiate TCP or UDP con-
nections. The remaining host is employed as a medium in-
teraction server, which responds to client application setup
requests. We hosted our evaluation environment on an Intel
i3 CPU with 4 GB of memory. In addition, we conduct live
performance evaluations of the FRESCO SEK using an HP
ProCurve 6600 OF-enabled switch in a test network labora-
tory.
8.1 Evaluating Modularity and Composability
For the evaluation, we begin with the basic problem of
identifying entities performing ﬂow patterns indicative of
malicious network scanning, and compare schemes of im-
plementing network scanning attacks with and without the
use of FRESCO.
While network scanning is a well-studied problem in the
network security realm, it offers an opportunity to examine
the efﬁciency of entity tracking using FRESCO. Many well-
established algorithms for scan detection exist [16, 15, 35].
However, under OpenFlow, the potential for FRESCO to
dynamically manipulate the switch’s data path in reaction
to malicious scans is a natural objective. This scenario also
lets us examine how simple modules can be composed to
perform data collection, evaluation, and response.
1. FRESCO Scan Deﬂector Service. Figure 10 illustrates
how FRESCO modules and their connections can be linked
together to implement a malicious scan deﬂector for Open-
Flow environments. This scan detection function consists of
the three modules described above. First, we have a module
for looking up a blacklist. This module checks a blacklist
table to learn whether or not an input source IP is listed.
If the table contains the source IP, the module notiﬁes its
presence to the second module. Based on the input value,
the second module performs threshold-based scan detection
or it drops a packet. If it does not drop the packet, it no-
tiﬁes the detection result to the third module. In addition,
this second module receives a parameter value that will be
used to determine the threshold. Finally, the third module
performs two actions based on input. If the input is 1, the
module redirects a packet. If the input is 0, it forwards a
packet. Implementing the three modules required 205 lines
of Python code and 24 lines of FRESCO script (this script
is shown in Figure 11).
Figure 10. FRESCO composition of a Scan De-
ﬂector
2. FRESCO BotMiner Service.
To illustrate a more
complex ﬂow analysis module using FRESCO, we have
implemented a FRESCO version of the BotMiner [11] ap-
plication. Note that our goal here is not faithful, “bug-
compatible” adherence to the full BotMiner protocol de-
scribed in [11], but rather to demonstrate feasibility and to
capture the essence of its implementation through FRESCO,
in a manner that is slightly simpliﬁed for readability.
Figure 12. FRESCO composition of the Bot-
Miner service
BotMiner detects bots through network-level ﬂow anal-
ysis. We have implemented the essentials of its detection
functionality using ﬁve modules as shown in Figure 12.
BotMiner assumes that hosts infected with the same bot-
net exhibit similar patterns at the network level, and these
patterns are different from benign hosts. To ﬁnd similar pat-
terns between bots, BotMiner clusters botnet activity in two
dimensions (C-plane and A-plane). The C-plane clustering
approach is used to detect hosts that resemble each other in
terms of (packets per second) and bps (bytes per second).
The A-plane clustering identiﬁes hosts that produce similar
network anomalies. In this implementation, we use the scan
detector module to ﬁnd network anomalies. Finally, if we
ﬁnd two clusters, we perform co-clustering to ﬁnd common
hosts that exist in both dimensions and label them as bots.
BotMiner was implemented in 312 lines of python code and
40 lines of FRESCO script (the script for BotMiner is pre-
sented in Figure 13).
3. FRESCO P2P Plotter Service. We have implemented
a FRESCO-based P2P malware detection service, simi-
larly implemented to capture the concept of the algorithm,
but simpliﬁed for the purpose of readability. Motivated
by Yen’s work [43], we have implemented the P2P mal-
ware detection algorithm, referred to as P2P Plotter, using
FRESCO. The P2P Plotter asserts that P2P malware has two
interesting characteristics, which are quite different from
normal P2P client programs. First, P2P malware usually
operates at lower volumes of network ﬂow interactions than
what is typically observed in benign P2P protocols. Second,
P2P malware typically interacts with a peer population that
has a lower churn rate (i.e., the connection duration time
1 blacklist_check (1)(1){
2
3
type:TableLookup
event:TCP_CONNECTION_FAIL,
TCP_CONNECTION_SUCCESS
input:source_IP
output:blacklist_out
parameter:-
action:-
4
5
6
7
8 }
1 table_check (1)(2){
2
3
type:TableLookup
event:TCP_CONNECTION_FAIL,
TCP_CONNECTION_SUCCESS
input:source_IP
output:table_out,source_IP
parameter:-
action:-
4
5
6
7
8 }
type:CrossCluster
event:PUSH
input:a_cls_out,c_cls_out
output:cross_out,ip_list
parameter:-
action:-
1 cr_cluster (2)(2){
2
3
4
5
6
7
8 }
-
1 find_scan (1)(1){
2
3
4
5
6
7
type:ScanDetector
event:PUSH
input:blacklist_out
output:scan_out
parameter:-
action:blacklist_out == 1
?DROP
8 }
Figure 11. FRESCO script for Scan Detector
type:A-PlaneCluster