 1 if (dwCtrlType == CTRL_C_EVENT) {
2 SetEvent(g_hStop);
return TRUE;
}
return FALSE;
}
int main()
{
--snip--
g_hStop = CreateEvent(NULL, TRUE, FALSE, NULL);
SetConsoleCtrlHandler(ConsoleCtrlHandler, TRUE);
WaitForSingleObject(g_hStop, INFINITE);
3 CloseTrace(hSession);
WaitForSingleObject(hThread, INFINITE);
CloseHandle(g_hStop);
CloseHandle(hThread);
return dwStatus
}
Listing 8-13: Using a console control handler to signal a thread exit
Evading EDR (Early Access) © 2023 by Matt Hand
158   Chapter 8
In this example, we use an internal console control handler routine, 
ConsoleCtrlHandler(), and an event object that watches for the ctrl-c key-
board combination 1. When the handler observes this keyboard combi-
nation, the internal function notifies the event object 2, a synchronization 
object commonly used to tell a thread that some event has occurred, 
and returns. Because the event object has been signaled, the application 
resumes its execution and closes the trace session 3.
Processing Events
When the consumer thread receives a new event, its callback function 
(OnEvent() in our example code) is invoked with a pointer to an EVENT_RECORD 
structure. This structure, defined in Listing 8-14, represents the entirety of 
the event.
typedef struct _EVENT_RECORD {
 EVENT_HEADER  
EventHeader;
 ETW_BUFFER_CONTEXT 
BufferContext;
 USHORT  
ExtendedDataCount;
 USHORT  
UserDataLength;
 PEVENT_HEADER_EXTENDED_DATA_ITEM ExtendedData;
 PVOID  
UserData;
 PVOID  
UserContext;
} EVENT_RECORD, *PEVENT_RECORD;
Listing 8-14: The EVENT_RECORD structure definition
This structure might seem simple at first glance, but it could contain a 
huge amount of information. The first field, EventHeader, holds basic event 
metadata, such as the process ID of the provider binary; a timestamp; 
and an EVENT_DESCRIPTOR, which describes the event itself in detail. The 
ExtendedData member matches the data passed in the EnableProperty param-
eter of sechost!EnableTraceEx2(). This field is a pointer to an EVENT_HEADER 
_EXTENDED_DATA_ITEM, defined in Listing 8-15.
typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM {
 USHORT 
Reserved1;
 USHORT 
ExtType;
 struct {
USHORT Linkage : 1;
USHORT Reserved2 : 15;
 };
 USHORT 
DataSize;
 ULONGLONG DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM;
Listing 8-15: The EVENT_HEADER_EXTENDED_DATA_ITEM structure definition
The ExtType member contains an identifier (defined in eventcons.h 
and shown in Listing 8-16) that tells the consumer to which data type the 
DataPtr member points. Note that a significant number of values defined 
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   159
in the headers are not formally supported for the callers of the API in 
Microsoft’s documentation.
#define EVENT_HEADER_EXT_TYPE_RELATED_ACTIVITYID 
0x0001
#define EVENT_HEADER_EXT_TYPE_SID  
0x0002
#define EVENT_HEADER_EXT_TYPE_TS_ID  
0x0003
#define EVENT_HEADER_EXT_TYPE_INSTANCE_INFO  
0x0004
#define EVENT_HEADER_EXT_TYPE_STACK_TRACE32  
0x0005
#define EVENT_HEADER_EXT_TYPE_STACK_TRACE64  
0x0006
#define EVENT_HEADER_EXT_TYPE_PEBS_INDEX   
0x0007
#define EVENT_HEADER_EXT_TYPE_PMC_COUNTERS   
0x0008
#define EVENT_HEADER_EXT_TYPE_PSM_KEY  
0x0009
#define EVENT_HEADER_EXT_TYPE_EVENT_KEY  
0x000A
#define EVENT_HEADER_EXT_TYPE_EVENT_SCHEMA_TL 
0x000B
#define EVENT_HEADER_EXT_TYPE_PROV_TRAITS   
0x000C
#define EVENT_HEADER_EXT_TYPE_PROCESS_START_KEY  
0x000D
#define EVENT_HEADER_EXT_TYPE_CONTROL_GUID   
0x000E
#define EVENT_HEADER_EXT_TYPE_QPC_DELTA  
0x000F
#define EVENT_HEADER_EXT_TYPE_CONTAINER_ID   
0x0010
#define EVENT_HEADER_EXT_TYPE_MAX  
0x0011
Listing 8-16: The EVENT_HEADER_EXT_TYPE constants
This ExtendedData member of the EVENT_RECORD contains valuable data, but 
agents typically use it to supplement other sources, particularly the UserData 
member of the EVENT_RECORD. This is where things get a little tricky, as Microsoft 
states that, in almost all cases, we must retrieve this data using the TDH APIs.
We’ll walk through this process in our callback function, but keep in 
mind that this example represents only one approach to extracting rel-
evant information and may not reflect production code. To begin process-
ing the event data, the agent calls tdh!TdhGetEventInformation(), as shown in 
Listing 8-17.
void CALLBACK OnEvent(PEVENT_RECORD pRecord)
{
ULONG ulSize = 0;
DWORD dwStatus = 0;
PBYTE pUserData = (PBYTE)pRecord->UserData;
dwStatus = TdhGetEventInformation(pRecord, 0, NULL, NULL, &ulSize);
PTRACE_EVENT_INFO pEventInfo = (PTRACE_EVENT_INFO)malloc(ulSize);
if (!pEventInfo)
{
// Exit immediately if we’re out of memory
ExitProcess(ERROR_OUTOFMEMORY);
}
dwStatus = TdhGetEventInformation(
pRecord,
0,
NULL,
Evading EDR (Early Access) © 2023 by Matt Hand
160   Chapter 8
pEventInfo,
&ulSize);
if (dwStatus != ERROR_SUCCESS)
{
return;
}
--snip--
}
Listing 8-17: Beginning to process event data
After allocating memory of the required size, we pass a pointer to a 
TRACE_EVENT_INFO structure, as the first parameter to the function.  
Listing 8-18 defines this structure.
typedef struct _TRACE_EVENT_INFO {
 GUID  
ProviderGuid;
 GUID  
EventGuid;
 EVENT_DESCRIPTOR 
EventDescriptor;
1 DECODING_SOURCE 
DecodingSource;
 ULONG  
ProviderNameOffset;
 ULONG  
LevelNameOffset;
 ULONG  
ChannelNameOffset;
 ULONG  
KeywordsNameOffset;
 ULONG  
TaskNameOffset;
 ULONG  
OpcodeNameOffset;
 ULONG  
EventMessageOffset;
 ULONG  
ProviderMessageOffset;
 ULONG  
BinaryXMLOffset;
 ULONG  
BinaryXMLSize;
 union {
ULONG EventNameOffset;
ULONG ActivityIDNameOffset;
 };
 union {
ULONG EventAttributesOffset;
ULONG RelatedActivityIDNameOffset;
 };
 ULONG  
PropertyCount;
 ULONG  
TopLevelPropertyCount;
 union {
TEMPLATE_FLAGS Flags;
struct {
ULONG Reserved : 4;
ULONG Tags : 28;
};
 };
2 EVENT_PROPERTY_INFO EventPropertyInfoArray[ANYSIZE_ARRAY];
} TRACE_EVENT_INFO;
Listing 8-18: The TRACE_EVENT_INFO structure definition
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   161
When the function returns, it will populate this structure with useful 
metadata, such as the DecodingSource 1, used to identify how the event is 
defined (in an instrumentation manifest, MOF class, or WPP template).  
But the most important value is EventPropertyInfoArray 2, an array of  
EVENT_PROPERTY_INFO structures, defined in Listing 8-19, that provides  
information about each property of the EVENT_RECORD’s UserData member.
typedef struct _EVENT_PROPERTY_INFO {
1 PROPERTY_FLAGS Flags;
 ULONG  
NameOffset;
 union {
struct {
USHORT InType;
USHORT OutType;
ULONG MapNameOffset;
} nonStructType;
struct {
USHORT StructStartIndex;
USHORT NumOfStructMembers;
ULONG padding;
} structType;
struct {
USHORT InType;
USHORT OutType;
ULONG CustomSchemaOffset;
} customSchemaType;
 };
 union {
 2 USHORT count;
USHORT countPropertyIndex;
 };
 union {
 3 USHORT length;
USHORT lengthPropertyIndex;
 };
 union {
ULONG Reserved;
struct {
ULONG Tags : 28;
};
 };
} EVENT_PROPERTY_INFO;
Listing 8-19: The EVENT_PROPERTY_INFO struct
We must parse each structure in the array individually. First, it gets 
the length of the property with which it is working. This length is depen-
dent on the way in which the event is defined (for example, MOF versus 
manifest). Generally, we derive the size of the property either from the 
length member 3, from the size of a known data type (such as the size of 
an unsigned long, or ulong), or by calling tdh!TdhGetPropertySize(). If the 
property itself is an array, we need to retrieve its size by either evaluating 
the count member 2 or calling tdh!TdhGetPropertySize() again.
Evading EDR (Early Access) © 2023 by Matt Hand
162   Chapter 8
Next, we need to determine whether the data being evaluated is itself a 
structure. Since the caller typically knows the format of the data with which 
they’re working, this isn’t difficult in most cases and generally only becomes 
relevant when parsing events from unfamiliar providers. If an agent does 
need to work with structures inside events, however, the Flags member 1 
will include the PropertyStruct (0x1) flag.
When the data isn’t a structure, as in the case of the Microsoft-
Windows-DotNETRuntime provider, it will be a simple value mapping, 
and we can get this map information using tdh!TdhGetEventMapInformation(). 
This function takes a pointer to the TRACE_EVENT_INFO, as well as a pointer to 
the map name offset, which it can access via the MapNameOffset member. On 
completion, it receives a pointer to an EVENT_MAP_INFO structure, defined in 
Listing 8-20, which defines the metadata about the event map.
typedef struct _EVENT_MAP_INFO {
 ULONG  
NameOffset;
 MAP_FLAGS  
Flag;
 ULONG  
EntryCount;
 union {
MAP_VALUETYPE MapEntryValueType;
ULONG  
FormatStringOffset;
 };
 EVENT_MAP_ENTRY MapEntryArray[ANYSIZE_ARRAY];
} EVENT_MAP_INFO;
Listing 8-20: The EVENT_MAP_INFO structure definition
Listing 8-21 shows how our callback function uses this structure.
void CALLBACK OnEvent(PEVENT_RECORD pRecord)
{
 --snip--
WCHAR pszValue[512];
USHORT wPropertyLen = 0;
ULONG ulPointerSize =
(pRecord->EventHeader.Flags & EVENT_HEADER_FLAG_32_BIT_HEADER) ? 4 : 8;
USHORT wUserDataLen = pRecord->UserDataLength;
 1 for (USHORT i = 0; i TopLevelPropertyCount; i++)
{
EVENT_PROPERTY_INFO propertyInfo =
 pEventInfo->EventPropertyInfoArray[i];
PCWSTR pszPropertyName =
 PCWSTR)((BYTE*)pEventInfo + propertyInfo.NameOffset);
 wPropertyLen = propertyInfo.length;
2 if ((propertyInfo.Flags & PropertyStruct | PropertyParamCount)) != 0)
 {
return;
 }
 PEVENT_MAP_INFO pMapInfo = NULL;
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   163
 PWSTR mapName = NULL;
3 if (propertyInfo.nonStructType.MapNameOffset)
 {
ULONG ulMapSize = 0;
mapName = (PWSTR)((BYTE*)pEventInfo +
propertyInfo.nonStructType.MapNameOffset);
dwStatus = TdhGetEventMapInformation(
pRecord,
mapName,
pMapInfo,
&ulMapSize);
if (dwStatus == ERROR_INSUFFICIENT_BUFFER)
{
pMapInfo = (PEVENT_MAP_INFO)malloc(ulMapSize);
4 dwStatus = TdhGetEventMapInformation(
pRecord,
mapName,
pMapInfo,
&ulMapSize);
if (dwStatus != ERROR_SUCCESS)
{
 pMapInfo = NULL;
}
 }
}
--snip--
}
Listing 8-21: Parsing the event map information
To parse the events that the provider emits, we iterate over every top-
level property in the event by using the total count of properties found in 
TopLevelPropertyCount for the trace event information structure 1. Then, 
if we’re not dealing with a structure 2 and the offset to the name of the 
member is present 3, we pass the offset to tdh!TdhGetEventMapInformation() 
4 to get the event map information.
At this point, we’ve collected all the pieces of information required to 
fully parse the event data. Next, we call tdh!TdhFormatProperty(), passing in the 
information we collected previously. Listing 8-22 shows this function in action.
void CALLBACK OnEvent(PEVENT_RECORD pRecord)
{
--snip--