# 十五、AKS 的持续集成和持续部署
DevOps 是人员、流程和工具的结合，以更快、更频繁、更可靠地交付软件。DevOps 文化中有**持续整合和持续部署** ( **CI/CD** )的实践。CI/CD 是一组通过一个或多个工具实现的实践，用于自动测试、构建和交付软件。
CI 阶段指的是持续测试和构建软件的实践。配置项阶段的结果是一个可部署的工件。那个神器可以是很多东西；例如，对于一个 Java 应用，它将是一个 **JAR** 文件，而对于一个基于容器的应用，它将是一个容器映像。
光盘阶段是指持续发布软件的实践。在光盘阶段，在配置项期间生成的工件被部署到多个环境中，通常从测试到质量保证再到试运行到生产。
存在多种工具来实现配置项/光盘。GitHub Actions 就是这样一个工具。GitHub Actions 是一个内置在 GitHub 中的工作流自动化系统。借助 GitHub Actions，您可以构建、测试和部署以任何语言编写的应用到各种平台。它还允许您构建容器映像并将应用部署到 Kubernetes 集群，这将在本章中介绍。
具体而言，本章将涵盖以下主题:
*   容器和 Kubernetes 的 CI/CD 工艺
*   设置 Azure 和 GitHub
*   设置配置项管道
*   设置光盘管道
让我们从探索容器和 Kubernetes 的 CI/CD 生命周期开始。
## 容器和库伯内特的 CI/CD 工艺
在开始构建管道之前，最好了解容器和 Kubernetes 的典型 CI/CD 流程。本节将对*图 15.1* 所示的高层流程进行更深入的探讨。有关针对 Kubernetes 的 CI/CD 和 DevOps 的更详细的探索，鼓励您探索以下由微软提供的免费在线电子书:[https://docs . Microsoft . com/dotnet/architecture/contained-life cycle/](15.html)。
![A representation of the container and Kubernetes CI/CD process](img/B17338_15_01.jpg)
F 图 15.1:容器和 Kubernetes CI/CD 工艺
这个过程从某人修改代码开始。代码更改可能意味着应用代码的更改、用于构建容器的 Dockerfile 的更改，或者用于在集群上部署应用的 Kubernetes YAML 文件的更改。
一旦代码更改完成，这些更改将提交给源代码控制系统。通常，这是一个 Git 存储库，但是也存在其他系统，比如 Subversion (SVN)。在 Git 存储库中，您通常会有多个代码分支。分支使多个个人和团队能够在同一代码基础上并行工作，而不会相互干扰。一旦分支上的工作完成，它就与主分支合并。一旦一个分支被合并，来自该分支的更改将与使用该代码库的其他分支共享。
#### 注意
分支是 Git 源代码控制系统的一个强大功能。有多种方法可以管理如何在代码库中使用分支。请参考斯科特·沙孔和本·施特劳布的 *Pro Git* (Apress，2014)中关于分支的章节，对这个主题进行更深入的探索:[https://Git-SCM . com/book/en/v2/Git-branding-branch-in-a-cabines](15.html)。
将代码推入源代码控制后，无论是在主分支还是功能分支中，都可以触发配置项管道。在基于容器的应用中，这意味着代码被构建到容器映像中，该映像被测试，如果测试成功，它将被推送到容器注册表。根据分支，您可以包括不同的步骤和不同的测试。例如，在功能分支上，您可能只构建和测试容器以验证代码是否有效，但不会将其推送到注册表，而在主分支上，您可能构建和测试容器并将其推送到容器注册表。
最后，可以触发光盘管道来部署或更新 Kubernetes 上的应用。通常，在光盘管道中，部署会经历不同的阶段。您可以先将更新后的应用部署到一个临时环境中，在将应用转移到生产环境之前，您可以在该环境中对应用运行自动和手动测试。
现在，您已经理解了容器和 Kubernetes 的 CI/CD 过程，您可以开始构建本章的示例部分了。让我们从设置 Azure 和 GitHub 开始。
## 设置 Azure 和 GitHub
在本节中，您将设置用于创建和运行将要构建的管道的基本基础设施。要托管容器映像，您需要一个容器注册表。您可以使用许多容器注册中心，但是这里您将创建一个 Azure 容器注册中心实例，因为它与**Azure Kubernetes Service**(**AKS**)很好地集成在一起。创建容器注册表后，您需要将该容器注册表链接到您的 AKS 集群并创建一个新的服务主体，然后您需要设置一个 GitHub 存储库来运行本章的示例部分。执行以下七个步骤来完成本活动:
1.  To start, create a new container registry. In the Azure search bar, look for **container registry** and click on Container registries, as shown in *Figure 15.2:*
    ![Searching for container registry in the Azure search bar](img/B17338_15_02.jpg)
    图 15.2:通过 Azure 门户导航到容器注册服务
2.  Click the Create button at the top to create a new registry. To organize the resources in this chapter together, create a new resource group. To do this, click on Create new to create a new resource group and call it **rg-pipelines**, as shown in *Figure 15.3:*
    ![Clicking the Create new button to create a new resource group](img/B17338_15_03.jpg)
    图图 15.3:创建新的资源组
    提供创建注册表所需的详细信息。注册表名称需要是全局唯一的，因此考虑将您的首字母添加到注册表名称中。建议在与集群相同的位置创建注册表。要优化演示花费，您可以将 SKU 更改为基本。选择底部的审核+创建按钮，创建注册表，如图*图 15.4:*
    ![Clicking the Review + create button to create a new container registry](img/B17338_15_04.jpg)
    图 15.4:创建新的容器注册表
    在结果窗格中，单击创建按钮创建注册表。
3.  When your registry is created, open Cloud Shell so that you can configure your AKS cluster to get access to your container registry. Use the following command to give AKS permissions on your registry:
    az aks 更新-n 握手\
    -g rg-hand onaks-attach-ACR
    这将返回类似于图 15.5 的输出，该输出已被裁剪，仅显示输出的顶部:
    ![Configuring the AKS cluster to get access to the container registry](img/B17338_15_05.jpg)
    图 15.5:允许 AKS 集群访问容器注册表
4.  Next, you'll need to create a service principal that will be used by GitHub Actions to connect to your subscription. You can create this service principal using the following command:
    az ad sp 为 rbac 创建-名称“cicd-管道”
    - sdk-auth -角色贡献者
    您将需要该命令的完整输出 JSON，如稍后在 GitHub 中的*图 15.6* 所示。复制此输出:
    ![Creating a new service principal](img/B17338_15_06.jpg)
    图 15.6:创建新的服务主体
5.  这就完成了安装的 Azure 部分。接下来，您需要登录 GitHub，分叉这本书附带的回购，并在这个回购中配置一个机密。如果您还没有 GitHub 帐户，请通过[https://github.com/join](15.html)创建一个。如果您已经有账户，请使用[https://github.com/login](15.html)登录。
6.  Once you are logged in to GitHub, browse to the repository associated with this book at [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Azure-third-edition](15.html). Create a fork of this repo in your account by clicking on the Fork button in the top-right corner of the screen, as shown in *Figure 15.7:*
    ![Forking the GitHub repo](img/B17338_15_07.jpg)
    图 15.7:分叉 GitHub 存储库
    分叉回购将在您自己的 GitHub 帐户中创建一个存储库副本。这将允许您对存储库进行更改，就像您在本章中构建管道一样。
7.  分叉存储库需要几秒钟的时间。一旦你有了自己的账户，你需要在这个回购中配置 Azure 机密。首先点击回购右上角的设置，如图*图 15.8:*
![Clicking on the Settings button in the GitHub repo](img/B17338_15_08.jpg)
图 15.8:点击 GitHub 存储库中的设置
这将带你到你的回购设置。在左侧，单击机密，在结果屏幕上单击顶部的新建存储库机密按钮，如图 15.9 所示:
![Creating a new repository secret](img/B17338_15_09.jpg)
图 15 .9:创建新的存储库机密
这将带你到屏幕上创建新的机密。调用这个机密 **AZURE_CREDENTIALS** ，作为这个机密的值，粘贴到你在本节*第 4 步*发出的 CLI 命令的输出中，如图*图 15.10:*
![Setting the value for the new secret](img/B17338_15_10.jpg)
图 15。 10:设置新机密的值
最后，点击屏幕底部的添加密码保存密码。
现在，您已经设置了 Azure 和 GitHub 来开始构建您的管道。您已经创建了一个服务主体，GitHub 将使用它与 Azure 进行交互，您还创建了一个容器注册表，您的 CI 管道可以将映像推送到该注册表，AKS 可以从中提取映像。现在让我们构建一个配置项管道。
## 建立竞争情报管道
您现在可以构建配置项管道了。作为本节演示的一部分，您将构建一个 **nginx** 容器，其中加载了一个小的自定义网页。容器构建完成后，您将把 **nginx** 容器推送到您在上一节中创建的容器注册表中。您将在接下来的 13 个步骤中逐步构建配置项管道:
1.  To start, open the forked GitHub repo and open the folder for **Chapter 15**. In that folder, you will find a couple of files, including **Dockerfile** and **index.html**. These files are used to build the custom container. Throughout the example, you will make changes to **index.html** to trigger changes in the GitHub action. Let's have a look at the contents of **index.html**:
    1
    2
    3 版本 1
    4
    5
    6
    # 版本 1
    7
    8
    这是一个简单的 HTML 文件，标题和头上都写着**版本 1** 。在*设置光盘管道*部分，您将被要求增加版本。
    接下来，还向您提供了一个 Dockerfile。该文件的内容如下:
    1 FROM nginx:1 . 19 . 7-阿尔卑斯山
    2 COPY index.html/usr/share/nginx/html/index . html
    这个文档文件从一个阿尔卑斯山的基本映像开始。Nginx 是一个流行的开源网络服务器，Alpine 是一个轻量级的操作系统，经常用于容器映像。在第二行，您将本地**index.html**文件复制到容器中，复制到 **nginx** 加载网页的位置。
    既然您已经了解了应用本身，那么就可以开始构建配置项管道了。作为参考，CI 管道的完整定义在本章的代码文件中以 **pipeline-ci.yaml** 的形式提供，但是在接下来的内容中将指示您一步一步地构建这个管道。
2.  Let's start by creating a GitHub Actions workflow. At the top of the screen in GitHub, click on Actions and then click on the set up a workflow yourself link, as shown in *Figure 15.11:*
    ![Clicking the Set up a workflow yourself button to create a new GitHub action](img/B17338_15_11.jpg)
    图 15.1 1:创建新的 GitHub 动作
3.  This will take you to a code editor that is part of GitHub. First, change the name of the pipeline file to **pipeline.yaml** and change the name on *line 3* to **pipeline**, as shown in *Figure 15.12:*
    ![Changing the name of the pipeline](img/B17338_15_12.jpg)
    图 15.12 :更改管道名称
4.  Next, you'll focus on the triggers of the workflow. In this demonstration, you'll only work with the main branch. However, you do not want the workflow to run for every code change. You only want it to run when changes are made to either the pipeline definition or the code in the **Chapter 15** folder. To achieve this, you can set up the following code to control the workflow trigger:
    4 #控制动作何时运行。
    5 开:
    6 #触发推或拉请求事件的工作流，但仅针对主分支
    7 推:
    8 个分支:[主要]
    9 条路径:
    第 10-15 章/**