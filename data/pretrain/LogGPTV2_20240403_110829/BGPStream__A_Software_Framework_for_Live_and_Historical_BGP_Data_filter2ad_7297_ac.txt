### 3.5.3 Command Line Interface for Reconfiguration Management

To fully control operations during the application transition, the application administrator should be granted permission to reconfigure a software application via the command line interface (CLI). This approach maximizes the flexibility of the application transition by allowing the CLI to be used in two ways: 
1. For transitioning only one module.
2. For simultaneously upgrading a group of interdependent modules.

A scripting language like Tcl/Tk [14] can be used to build an application-specific CLI, providing powerful capabilities for managing these transitions.

### 4. Implementation Environment

We implemented the framework in C++ to ensure extensibility and reusability. To adapt to different environments and reduce portability issues, we used ACE (Adaptive Communication Environment) [15][16] to map the framework onto multiple platforms, including various versions of Unix, Linux, and Win32.

Dynamic library facilities provided by the operating systems allow loading a module library at runtime, which has been compiled as a shared library. The object-oriented system design further enables creating an instance of a dynamic module at runtime. To leverage these features, dynamic modules must meet the following implementation requirements:

- Each module-implementation is encapsulated as a C++ class derived from a base class `ModuleImp`.
- This class can be compiled separately as a dynamic shared library, which can be loaded into and unloaded from memory at runtime [17][18][19].
- The base class `ModuleImp` contains a message queue and essential functions for internal manipulation during live software upgrades.
- `ModuleImp` also exports well-known interfaces that can be overridden by its subclasses implementing software modules.

Due to inheritance and late binding, a newly created instance of a subclass can be dynamically typecast to its base class `ModuleImp`. This allows for replacing an old version of the module-implementation with a new version at runtime.

The module-proxy component is implemented by the `ModuleType` class, which interacts internally with the module-implementation and provides a public interface for other software modules to communicate with its delegated module. A `ModuleType` object can be configured to delegate any `ModuleImp` object. Each `ModuleType` object contains a reference to a `ModuleImp` object, with which it is currently bound.

During an online change, the reference to the module-implementation can be hot-swapped to a new `ModuleImp` object by the `ModuleType` object.

We found that software design patterns facilitate the implementation of the framework. Additionally, mutual exclusion and barrier mechanisms help resolve synchronization issues when upgrading a group of modules.

### 5. Simulation Results

Our demonstration application, called the non-stop Router, consists of four modules: TIMER, IP (Internet Protocol) [20], OSPF (Open Shortest Path First) [21], and VRRP (Virtual Router Redundancy Protocol) [22]. These modules are concurrently executed and provide multiple services, as shown in Figure 9.

- **ICMP (Internet Control Message Protocol) packets, HELLO discovery packets, and HEARTBEAT packets** are periodically broadcasted.
- **IP Monitor, OSPF Monitor, and VRRP Monitor** nodes receive ICMP, HELLO, and HEARTBEAT packets, respectively.
- An application administrator can reconfigure the software application through the CLI node.

To simulate a publisher and subscriber communication model:
- The TIMER module acts as a publisher by broadcasting events.
- Other modules subscribe to these events once they are activated.
- When the IP module receives an event message, it broadcasts an ICMP packet to the neighborhood and sends a control message to the OSPF module.
- Similarly, the VRRP module broadcasts a HEARTBEAT packet and sends a control message to the OSPF module.
- The OSPF module broadcasts its HELLO packet after receiving an event message.

To maintain application consistency before and after a live software upgrade, messages sent by the VRRP and IP modules to the OSPF are assigned a consecutive integer number, called the relay number.

#### 5.1 Transaction One
**Configuration Command:**
```
Replace IP libIPImp_v2.so
```

**Transaction One (Figure 10):**
- Version 1 of the IP module-implementation is successfully replaced with Version 2.
- The IP module-implementation is disabled by its module-proxy to stop broadcasting packets and sending messages to the OSPF module.
- After consuming all pending messages in its input message queue, the module-implementation receives a special TERM message from its proxy, terminating its task context and reaching a stable state.
- Version 1 of the implementation object checkpointed its state and put its relay number into state storage.
- Version 2 of the implementation object recovers the state transferred by its proxy and is ready to send consecutive relay numbers in messages again.

#### 5.2 Transaction Two
**Configuration Command:**
```
SetTimer 2
Syn_Replace OSPF libOSPFImp_v2.so
                    IP        libIPImp_v2.so
```

**Transaction Two (Figure 11):**
- The maximum preparation time is two seconds, which may be shorter than the time required by one of the modules to prepare for a live upgrade.
- Within two seconds, the OSPF module reaches a stable state, returns its vote, and attains voting state.
- However, the IP module cannot meet the timing constraint and returns a "NO" vote to the software upgrader.
- The software upgrader aborts the transaction, removes the newly created implementation objects from memory, and brings the original implementation objects back into service.
- No pending or new incoming messages are lost during this process.

The simulation results demonstrate that the proposed framework supports live software upgrades for a non-stop multi-tasking application. It allows dynamic replacement, addition, and removal of modules such as OSPF, IP, and VRRP. The framework also ensures that an upgrade transaction can be aborted in case of failure, maintaining the all-or-nothing property.

### 6. Discussion and Experience

Our prototype implementation has provided valuable insights. We found that performing live upgrades at a modular level is suitable for complex software systems. Our framework supports the following features:
1. A run-time evolvable software architecture at the module granularity.
2. Atomic upgrade transactions without affecting other running modules.
3. State consistency maintenance during changes.
4. Incremental execution of reconfiguration in soft real time.
5. Concurrent upgrade mechanisms.

In service and mission-critical applications, module behaviors often depend on periodic control messages exchanged between modules. To avoid changing the state machine of software modules during a live upgrade, an upgrade transaction must be committed or aborted within a specified timing constraint. Additionally, no control messages should be lost during the upgrade.

**Scope Change:**
- The extent to which software modules are affected by an upgrade.
- Changes to the message protocol cause changes to the module interfaces.
- Both modules become replaced modules if their message protocol is changed.
- The proxy of a module remains the same, except for the upgraded implementation.
- Dependency on the message protocol determines the scope change of target modules.
- Backward compatibility requires accommodating both versions of the message protocol until all modules using the older version are updated.

To benefit from the framework, software applications should meet the following requirements:
1. Software modules must be written as derived classes of `ModuleImp` based on the dynamic updating protocol.
2. Messaging and the publisher-subscriber model should be adopted.
3. Software modules should enable state transfer, with the "right" state handler written for a new implementation to transform the state from the old one.
4. The framework provides essential infrastructures, such as binding proxies with module implementations, upgrading intercommunication, wrapping, and transferring the state between versions of the implementation.

As service availability and state consistency are preferred, failing to upgrade modules that have not reached a quiescent condition within a bounded time is an acceptable compromise. A plan for later retry is considered as an alternative.

### 7. Conclusion

We have presented an integrated practical framework for live software upgrades. The framework's design emphasizes four main areas: dynamic architecture and communication model, reconfiguration management, runtime upgrade protocol, and upgrade technique. We introduced a unique dynamic architecture that includes an indirect publisher-subscriber communication model, a name service, a version-control repository, and a software upgrader. We designed an upgrade protocol for module addition, replacement, and removal, and introduced a two-phase commit protocol to ensure robust upgrades. A master-slave concurrent upgrade mode minimizes downtime for services provided by a software application. We also implemented a mechanism for maintaining state consistency and controlling the upgrade transaction.

Future work in this framework will include performance measurement, adaptation to a distributed environment, and addressing some authentication issues.

### 8. References

[1] Pankaj Jalote, “Fault Tolerance in Distributed Systems,” Prentice Hall, 1998.
[2] Jeff Magee and Jeff Kramer, “Dynamic Structure in Software Architectures,” Fourth SIGSOFT Symposium on the Foundations of Software Engineering (FSE), pp. 3-14, San Francisco, October 1996.
[3] Peyman Oreizy and Richard N. Taylor, “On the Role of Software Architectures in Runtime System Reconfiguration,” Proceedings of the International Conference on Configurable Distributed Systems (ICCDS 4), Annapolis, Maryland, May 1998.
[4] Peyman Oreizy, Nenad Medvidovic, and Richard N. Taylor, “Architecture-Based Runtime Software Evolution,” IEEE/ACM International Conference on Software Engineering (ICSE '98), pp. 177-186, Kyoto, Japan, April 19-25, 1998.
[5] Deepak Gupta and Pankaj Jalote, “Increasing System Availability through On-Line Software Version Change,” Proceedings of 1993 IEEE 23rd International Symposium on Fault-Tolerant Computing, pp. 30-35, August 1993.
[6] Jonathan E. Cook and Jeffrey A. Dage, “Highly Reliable Upgrading of Components,” IEEE/ACM International Conference on Software Engineering (ICSE ’99), pp. 203-212, Los Angeles, CA, 1999.
[7] Lui Sha, “Dependable System Upgrade,” Technical Report, Carnegie Mellon University, Sep. 1998.
[8] Mike Gagliardi, Raj Rajkumar, and Lui Sha, “Designing for Evolvability: Building Blocks for Evolvable Real-Time Systems,” In Proceedings of the IEEE Real-time Technology and Applications Symposium, pp. 100-109, June 1996.
[9] Object Management Group, “The Common Object Request Broker: Architecture and Specification, 2.2 Edition,” OMG Technical Committee Document formal/98-07-01, Feb 1998.
[10] Microsoft Corporation, Various COM documents, MSDN Library, 1998.
[11] L. A. Tewksbury, Louise E. Moser, P. M. Melliar-Smith, “Live Upgrades for CORBA Applications Using Object Replication,” IEEE International Conference on Software Maintenance, pp. 488-497, Florence, Italy, Nov. 2001.
[12] Louise E. Moser, P. M. Melliar-Smith, P. Narasimhan, L. A. Tewksbury, V. Kalogeraki, “Eternal: Fault Tolerance and Live Upgrades for Distributed Object Systems,” Proceedings of IEEE Information Survivability Conference and Exposition (DISCEX 2000), Vol. 2, pp. 184-196, 2000.
[13] Jeff Kramer and Jeff Magee, “The Evolving Philosophers Problem: Dynamic Change Management,” IEEE Transactions on Software Engineering, Vol. 16, No. 11, pp. 1293-1306, November 1990.
[14] Brent Welch, “Practical Programming in Tcl and Tk,” Third Edition, Prentice Hall, Nov. 1999.
[15] Douglas C. Schmidt, “The Adaptive Communication Environment: An Object-Oriented Network Programming Toolkit for Developing Communication Software,” 11th and 12th Sun Users Group Conference, June 1994.
[16] Douglas C. Schmidt, “Applying Patterns and Frameworks to Develop Object-Oriented Communication Software,” Handbook of Programming Languages, Volume I, edited by Peter Salus, MacMillan Computer Publishing, 1997.
[17] Michael Franz, “Dynamic Linking of Software Components,” IEEE Computer, Vol. 30, No. 3, pp. 74-81, March 1997.
[18] W. Wilson Ho and Ronald A. Olsson, “An Approach to Genuine Dynamic Linking,” Software-Practice and Experience, Vol. 21, No. 4, pp. 375-390, April 1991.
[19] Donn Seeley, “Shared Libraries as Objects,” USENIX Summer Conference Proceedings, pp. 25-37, 1990.
[20] F. Baker, “Requirements for IP Version 4 Routers,” RFC 1812, June 1995.
[21] J. Moy, “OSPF Version 2,” RFC 2328, April 1998.
[22] S. Knight et al., “Virtual Router Redundancy Protocol,” RFC 2338, April 1998.