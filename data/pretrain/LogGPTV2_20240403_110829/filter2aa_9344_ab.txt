.PP
.Vb 1
\&     -->
.Ve
.PP
.Vb 1
\&    if (ac)
.Ve
.PP
.Vb 1
\&    
.Ve
.PP
.Vb 1
\&    >>>>>>>>>>> ]]>
.Ve
.PP
If \s-1HTML\s0 comments include other tags, those solutions would also break
on text like this:
.PP
.Vb 3
\&    You can't see me!
\&    -->
.Ve
.Sh "如何萃取 URL?"
.IX Subsection "How do I extract URLs?"
可以简单地从 HTML 中得到所有种类的 URL，只要使用 \f(CW\*(C`HTML::SimpleLinkExtor\*(C'\fR 模块，它可以处理锚，图像，对象，桢，其他包含 URL 的标签。如果需要更复杂的东西，可以创建 \f(CW\*(C`HTML::LinkExtor\*(C'\fR 的子类或使用 \f(CW\*(C`HTML::Parser\*(C'\fR. 你甚至可以用
\&\f(CW\*(C`HTML::SimpleLinkExtor\*(C'\fR 作为范例，来书写适合你特殊需要的程序。
.PP
You can use URI::Find to extract URLs from an arbitrary text document.
.PP
Less complete solutions involving regular expressions can save
you a lot of processing time if you know that the input is simple.  One
solution from Tom Christiansen runs 100 times faster than most
module based approaches but only extracts URLs from anchors where the first
attribute is \s-1HREF\s0 and there are no other attributes.
.PP
.Vb 7
\&        #!/usr/bin/perl -n00
\&        # qxurl - PI:EMAIL
\&        print "$2\en" while m{
\&            
\&        }gsix;
.Ve
.Sh "如何从用户的机器上下载文件？如何打开其他机器上的文件？"
.IX Subsection "How do I download a file from the user's machine?  How do I open a file on another machine?"
In this case, download means to use the file upload feature of \s-1HTML\s0
forms.  You allow the web surfer to specify a file to send to your web
server.  To you it looks like a download, and to the user it looks
like an upload.  No matter what you call it, you do it with what's
known as \fBmultipart/form\-data\fR encoding.  The \s-1CGI\s0.pm module (which
comes with Perl as part of the Standard Library) supports this in the
\&\fIstart_multipart_form()\fR method, which isn't the same as the \fIstartform()\fR
method.
.PP
See the section in the \s-1CGI\s0.pm documentation on file uploads for code
examples and details.
.Sh "如何在 HTML 添加一个弹出菜单?"
.IX Subsection "How do I make a pop-up menu in HTML?"
用  和 这两个标签。 CGI.pm模组（可由 CPAN取得）对这个 widget【此指跳出式选单这个介面成分】还有许多其他的介面成分都有支援【即有制作动态标签的函式】，其中有些是以巧妙模拟的方 式达成。
.Sh "如何获取 HTML 文件?"
.IX Subsection "How do I fetch an HTML file?"
有一个方法是，如果您的系统上装有 lynx一类的文字模式的 HTML浏览器的话，那么可以这么做：
.PP
.Vb 2
\&    $html_code = `lynx -source $url`;
\&    $text_data = `lynx -dump $url`;
.Ve
.PP
收录在 CPAN里的 libwww-perl (LWP)模组则提供了更强的方法来做这件事。它不但可钻过 proxies，而且也不需要 lynx：
.PP
.Vb 3
\&    # simplest version
\&    use LWP::Simple;
\&    $content = get($URL);
.Ve
.PP
.Vb 3
\&    # or print HTML from a URL
\&    use LWP::Simple;
\&    getprint "http://www.linpro.no/lwp/";
.Ve
.PP
.Vb 11
\&    # or print ASCII from HTML from a URL
\&    # also need HTML-Tree package from CPAN
\&    use LWP::Simple;
\&    use HTML::Parser;
\&    use HTML::FormatText;
\&    my ($html, $ascii);
\&    $html = get("http://www.perl.com/");
\&    defined $html
\&        or die "Can't fetch HTML from http://www.perl.com/";
\&    $ascii = HTML::FormatText->new->format(parse_html($html));
\&    print $ascii;
.Ve
.Sh "如何根据提交的内容自动生成一个 HTML ?"
.IX Subsection "How do I automate an HTML form submission?"
If you're submitting values using the \s-1GET\s0 method, create a \s-1URL\s0 and encode
the form using the \f(CW\*(C`query_form\*(C'\fR method:
.PP
.Vb 2
\&    use LWP::Simple;
\&    use URI::URL;
.Ve
.PP
.Vb 3
\&    my $url = url('http://www.perl.com/cgi-bin/cpan_mod');
\&    $url->query_form(module => 'DB_File', readme => 1);
\&    $content = get($url);
.Ve
.PP
If you're using the \s-1POST\s0 method, create your own user agent and encode
the content appropriately.
.PP
.Vb 2
\&    use HTTP::Request::Common qw(POST);
\&    use LWP::UserAgent;
.Ve
.PP
.Vb 4
\&    $ua = LWP::UserAgent->new();
\&    my $req = POST 'http://www.perl.com/cgi-bin/cpan_mod',
\&                   [ module => 'DB_File', readme => 1 ];
\&    $content = $ua->request($req)->as_string;
.Ve
.Sh "如何解码或创建 web 中的 %-encoding?"
.IX Subsection "How do I decode or create those %-encodings on the web?"
If you are writing a \s-1CGI\s0 script, you should be using the \s-1CGI\s0.pm module
that comes with perl, or some other equivalent module.  The \s-1CGI\s0 module
automatically decodes queries for you, and provides an \fIescape()\fR
function to handle encoding.
.PP
The best source of detailed information on \s-1URI\s0 encoding is \s-1RFC\s0 2396.
Basically, the following substitutions do it:
.PP
.Vb 1
\&    s/([^\ew()'*~!.-])/sprintf '%%%02x', ord $1/eg;   # encode
.Ve
.PP
.Vb 1
\&    s/%([A-Fa-f\ed]{2})/chr hex $1/eg;            # decode
.Ve
.PP
However, you should only apply them to individual \s-1URI\s0 components, not
the entire \s-1URI\s0, otherwise you'll lose information and generally mess
things up.  If that didn't explain it, don't worry.  Just go read
section 2 of the \s-1RFC\s0, it's probably the best explanation there is.
.PP
\&\s-1RFC\s0 2396 also contains a lot of other useful information, including a
regexp for breaking any arbitrary \s-1URI\s0 into components (Appendix B).
.Sh "如何重定向到其他页面？"
.IX Subsection "How do I redirect to another page?"
Specify the complete \s-1URL\s0 of the destination (even if it is on the same
server). This is one of the two different kinds of \s-1CGI\s0 \*(L"Location:\*(R"
responses which are defined in the \s-1CGI\s0 specification for a Parsed Headers
script. The other kind (an absolute URLpath) is resolved internally to
the server without any \s-1HTTP\s0 redirection. The \s-1CGI\s0 specifications do not
allow relative URLs in either case.
.PP
Use of \s-1CGI\s0.pm is strongly recommended.  This example shows redirection
with a complete \s-1URL\s0. This redirection is handled by the web browser.
.PP
.Vb 1
\&      use CGI qw/:standard/;
.Ve
.PP
.Vb 2
\&      my $url = 'http://www.cpan.org/';
\&      print redirect($url);
.Ve
.PP
This example shows a redirection with an absolute URLpath.  This
redirection is handled by the local web server.
.PP
.Vb 2
\&      my $url = '/CPAN/index.html';
\&      print redirect($url);
.Ve
.PP
But if coded directly, it could be as follows (the final \*(L"\en\*(R" is
shown separately, for clarity), using either a complete \s-1URL\s0 or
an absolute URLpath.
.PP
.Vb 2
\&      print "Location: $url\en";   # CGI response header
\&      print "\en";                 # end of headers
.Ve
.Sh "如何为我的网页加上密码？"
.IX Subsection "How do I put a password on my web pages?"
要启用 web 服务器的验证，你需要配置你的 web 服务器，不同的服务器有不同的方法\-\-\-apache 与 iPlanet 不同，后者又与 \s-1IIS\s0 不同。从你的 web 服务器的文档中查找特定服务器的配置细节。
.Sh "如何用 Perl 修改我的 .htpasswd 和 .htgroup 文件?"
.IX Subsection "How do I edit my .htpasswd and .htgroup files with Perl?"
HTTPD::UserAdmin 和 HTTPD::GroupAdmin 等模组为这些档案提供了统一的物件导向介面，尽管这些档案可能以各种不同的格式储存。这些资料库可能是纯文字格式、 dbm、Berkeley DB或任何 DBI相容的资料库驱动程式 (drivers)。 HTTPD::UserAdmin支援`Basic' 和 `Digest'这两个认证模式所用的档案。以下是 一例：
.PP
.Vb 4
\&    use HTTPD::UserAdmin ();
\&    HTTPD::UserAdmin
\&          ->new(DB => "/foo/.htpasswd")
\&          ->add($username => $password);
.Ve
.Sh "如何确保用户不会在表单中输入使我的 CGI 脚本作坏事的值？"
.IX Subsection "How do I make sure users can't enter values into a form that cause my CGI script to do bad things?"
阅读 \s-1CGI\s0 Meta \s-1FAQ\s0 列出的安全索引
.PP
.Vb 1
\&        http://www.perl.org/CGI_MetaFAQ.html
.Ve
.Sh "如何解释一个邮件头？"
.IX Subsection "How do I parse a mail header?"
要使用一个快速的方法，可以这样使用 perlfunc 中的 \*(L"split\*(R" 函数：
.PP
.Vb 4
\&    $/ = '';
\&    $header = ;
\&    $header =~ s/\en\es+/ /g;      # 将延续行合并成单行
\&    %head = ( UNIX_FROM_LINE, split /^([-\ew]+):\es*/m, $header );
.Ve
.PP
但是，如果您若想保留所有 Received栏位资料的话【因 Received 栏位通常不止一个】，这个解法便不太行了。一个完整的解法是使用收录在 CPAN的 Mail::Header 模组（ MailTools 套件的一部分）。
.Sh "如何解码一个 CGI 表单？"
.IX Subsection "How do I decode a CGI form?"
使用标准模块，应该是 \s-1CGI\s0.pm。没有理由去尝试手动去做！
.PP
你大概都看过一大堆从 STDIN 读取与 $ENV{CONTENT_LENGTH} 长度相同的字节，或者获取 $ENV{QUERY_STRING} 来解码 GET。这些程序都非常糟糕。他们仅在某些时候工作。他们通常不检查 read() 的返回值，这是主要的错误。他们不处理 \s-1HEAD\s0 请求。他们不处理文件上载时的多成分表单。They don't deal
with \s-1GET/POST\s0 combinations where query fields are in more than one place.
They don't deal with keywords in the query string.
.PP
In short, they're bad hacks.  Resist them at all costs.  Please do not be
tempted to reinvent the wheel.  Instead, use the \s-1CGI\s0.pm or CGI_Lite.pm
(available from \s-1CPAN\s0), or if you're trapped in the module-free land
of perl1 .. perl4, you might look into cgi\-lib.pl (available from
http://cgi\-lib.stanford.edu/cgi\-lib/ ).
.PP
Make sure you know whether to use a \s-1GET\s0 or a \s-1POST\s0 in your form.
GETs should only be used for something that doesn't update the server.
Otherwise you can get mangled databases and repeated feedback mail
messages.  The fancy word for this is ``idempotency''.  This simply
means that there should be no difference between making a \s-1GET\s0 request
for a particular \s-1URL\s0 once or multiple times.  This is because the
\&\s-1HTTP\s0 protocol definition says that a \s-1GET\s0 request may be cached by the
browser, or server, or an intervening proxy.  \s-1POST\s0 requests cannot be
cached, because each request is independent and matters.  Typically,
\&\s-1POST\s0 requests change or depend on state on the server (query or update
a database, send mail, or purchase a computer).
.Sh "如何检测一个有效的邮件地址？"
.IX Subsection "How do I check a valid mail address?"
没有办法。至少，没有可行的办法。
.PP
如果没有寄封信到一个位址去试试看它会不会弹回来（即使是这么做您还得面对停顿的问题），您是无法确定一个位址是否真的存在的。即使您套用 email 标头的标准规格来做检查的依据，您还是有可能会遇到问题，因为有些送得到的位址并不 符合 RFC-822（电子邮件标头的标准）的规定，但有些符合标准的位址却无法投 递。
.PP
You can use the Email::Valid or RFC::RFC822::Address which check
the format of the address, although they cannot actually tell you
if it is a deliverable address (i.e. that mail to the address