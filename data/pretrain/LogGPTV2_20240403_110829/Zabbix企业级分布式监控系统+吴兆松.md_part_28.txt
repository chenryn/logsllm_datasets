### 优化后的文本

#### SNMP 相关配置
- `ifOutErrorsS{=SNMPVALUE}]`: 60, 365, SNMPV2agent
- `ifOutOctets[{#SNMPVALUE)]`: 60, 365, SNMPv2agent
- `Ten`

#### 图9-27: 9.4.1 现实案例需求
以下通过一个具体例子详细说明如何配置低级发现（Low-level discovery）。

**1. 业务需求**
需要监控大量URL，形式如`http://www.itnihao.com`。当URL状态不为200时，系统应发出告警。

**2. 需求详细分析**
这些URL数量庞大且经常变动。为了简化管理，每当新增一个URL时，都应自动完成监控设置。

**3. 解决方案**
根据上述需求，可以使用Zabbix的低级发现功能来轻松解决这一问题。尽管URL会频繁变化，但其他相关状态保持不变。

#### 9.4.2 Zabbix 客户端配置
以下是Zabbix客户端的配置示例：
```shell
# 去除注释和空行
shell# egrep -v "(^#|^$)" /etc/zabbix/zabbix_agentd.conf
LogFile=/var/log/zabbix/zabbix_agentd.log
EnableRemoteCommands=0
Server=127.0.0.1,192.168.0.240  # Zabbix Server IP地址
StartAgents=8
ServerActive=192.168.0.240:10051  # Zabbix Server IP地址
Hostname=nodel
Timeout=30
Include=/etc/zabbix/zabbix_agentd.conf.d/  # 子配置文件路径
UnsafeUserParameters=1  # 自定义Key中允许包含特殊字符
```

#### 9.4.3 编写低级发现脚本
低级发现脚本采用JSON格式输出。考虑到大多数用户的习惯，这里使用Shell语言编写。若需更简洁的代码，可以考虑使用PERL或Python，并可从[GitHub](https://github.com/itnihao/zabbix-book)下载相关脚本。
```bash
#!/bin/bash
# 功能：通过Zabbix监控网站状态
# 许可证：GPL
# 邮箱：PI:EMAIL
# 版本：1.0 日期：2012-12-09
source /etc/bashrc >/dev/null 2>&1
#/usr/bin/curl -o /dev/null -s -w %{http_code} http://$1/

Web_SITE_discovery(){
    Web_SITE=($(cat /etc/zabbix/scripts/Web.txt | grep -v "^#"))
    printf '{\n'
    printf '\t"data":[\n'
    for ((i=0; i<${#Web_SITE[@]}; i++))
    do
        printf '\t\t{"{#SITENAME}":"%s"}' "${Web_SITE[$i]}"
        if [ $i -lt $((${#Web_SITE[@]} - 1)) ]; then
            printf ',\n'
        else
            printf '\n'
        fi
    done
    printf '\t]\n}\n'
}
```
图9-41中的$1代表检测出的URL，`web.site.code[{#SITENAME}]`中的变量将依次检查这些URL。

点击保存后创建触发器原型（Trigger prototype），如图9-42所示。

继续配置触发器，详见图9-44至图9-49。

**图9-44: 创建触发器原型**

**图9-45: 选择项与函数**

**图9-46: 条件设置**

**图9-47: 选择项与函数**

**图9-48: 条件设置**

**图9-49: 插入条件**

以上步骤完成后，即可实现对动态变化URL的有效监控。