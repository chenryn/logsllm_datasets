# Windows下printf多进程架构及内核态—用户态多级调试分析

##### 译文声明
本文为翻译文章，具体内容和含义以原文为准。

## 0. 主要内容
本文深入探讨了微软在底层如何实现`printf`函数。从应用程序开始逐步分析到内核层，并通过双机调试追踪数据流向。然后从内核返回用户态程序，再根据内核态调试获得的信息，对用户态的另一个进程进行分析。这一过程揭示了`printf`实现的全貌。涉及的主要内容包括：
1. 内核对象及其管理；
2. 设备驱动程序及驱动程序对象；
3. MDL（内存描述符列表）；
4. 用户态程序与内核驱动通信：`DeviceIoControl`；
5. 使用Windbg进行调试；
6. C运行时库代码分析。

## 1. 背景
对于程序员来说，`printf`函数并不陌生。初学C语言时，第一个程序通常是经典的`printf("hello world\n")`。尽管这个函数已经使用多年，但很少有人深入探究其背后的实现原理。最近，我利用闲暇时间对此进行了详细研究，发现仅靠C运行时库源码无法完全解释其实现机制。因此，我搭建了双机调试环境，进行内核分析。

## 2. 源码部分分析
### 2.1 实例代码
以下是一个简单的示例代码，IDE为VS2017：

```c
#include <stdio.h>
#include <windows.h>

int _tmain(int argc, _TCHAR* argv[])
{
    while(1)
    {
        printf("hello world\n");
        Sleep(500);
    }
    return 0;
}
```

该代码每隔500毫秒打印一次字符串“hello world\n”。接下来，我们跟踪VC运行时库的源码，总结起来就是`printf`最终调用`WriteFile()`。

### 2.2 源码分析
经过详细的源码分析，可以总结出`printf`的实现路径是`printf -> WriteFile()`。现在我们需要关注的是`WriteFile()`写入的文件到底是什么。

## 3. 内核调试分析
根据之前的分析，`WriteFile()`使用的句柄值为0x0C。借助Procexp.exe工具，我们可以进一步查看这个句柄对应的对象。显然，这是一个由内核驱动创建的设备对象。接下来，我们将通过双机调试来深入了解其内部机制。

### 3.1 对象信息
首先，查看对象的具体信息：

```shell
1: kd> !object 0xFFFFCC8BDCEA4EF0
Object: ffffcc8bdcea4ef0  Type: (ffffcc8bd88cdb20) File
    ObjectHeader: ffffcc8bdcea4ec0 (new version)
    HandleCount: 2  PointerCount: 64696
    Directory Object: 00000000  Name: \Output {ConDrv}

1: kd> dt _OBJECT_HEADER ffffcc8bdcea4ec0
nt!_OBJECT_HEADER
   +0x000 PointerCount     : 0n64696
   +0x008 HandleCount      : 0n2
   +0x008 NextToFree       : 0x00000000`00000002 Void
   +0x010 Lock             : _EX_PUSH_LOCK
   +0x018 TypeIndex        : 0x50 'P'
   +0x019 TraceFlags       : 0 ''
   +0x019 DbgRefTrace      : 0y0
   +0x019 DbgTracePermanent : 0y0
   +0x01a InfoMask         : 0x4c 'L'
   +0x01b Flags            : 0 ''
   +0x01b NewObject        : 0y0
   +0x01b KernelObject     : 0y0
   +0x01b KernelOnlyAccess : 0y0
   +0x01b ExclusiveObject  : 0y0
   +0x01b PermanentObject  : 0y0
   +0x01b DefaultSecurityQuota : 0y0
   +0x01b SingleHandleEntry : 0y0
   +0x01b DeletedInline    : 0y0
   +0x01c Reserved         : 0xffffb68d
   +0x020 ObjectCreateInfo : 0xffffcc8b`db7aed80 _OBJECT_CREATE_INFORMATION
   +0x020 QuotaBlockCharged : 0xffffcc8b`db7aed80 Void
   +0x028 SecurityDescriptor : (null)
   +0x030 Body             : _QUAD
```

可以看到，该对象类型为`File`。接下来，进一步查看`_FILE_OBJECT`的详细信息：

```shell
1: kd> dt _FILE_OBJECT ffffcc8bdcea4ef0
nt!_FILE_OBJECT
   +0x000 Type             : 0n5
   +0x002 Size             : 0n216
   +0x008 DeviceObject     : 0xffffcc8b`dbee7b20 _DEVICE_OBJECT
   +0x010 Vpb              : (null)
   +0x018 FsContext        : 0xffffb68d`59de5b30 Void
   +0x020 FsContext2       : 0xffffcc8b`dacca230 Void
   +0x028 SectionObjectPointer : (null)
   +0x030 PrivateCacheMap  : (null)
   +0x038 FinalStatus      : 0n0
   +0x040 RelatedFileObject : 0xffffcc8b`dd122550 _FILE_OBJECT
   +0x048 LockOperation    : 0 ''
   +0x049 DeletePending    : 0 ''
   +0x04a ReadAccess       : 0 ''
   +0x04b WriteAccess      : 0 ''
   +0x04c DeleteAccess     : 0 ''
   +0x04d SharedRead       : 0 ''
   +0x04e SharedWrite      : 0 ''
   +0x04f SharedDelete     : 0 ''
   +0x050 Flags            : 0x10040002
   +0x058 FileName         : _UNICODE_STRING "\Output"
   +0x068 CurrentByteOffset : _LARGE_INTEGER 0x0
   +0x070 Waiters          : 0
   +0x074 Busy             : 0
   +0x078 LastLock         : (null)
   +0x080 Lock             : _KEVENT
   +0x098 Event            : _KEVENT
   +0x0b0 CompletionContext : (null)
   +0x0b8 IrpListLock      : 0
   +0x0c0 IrpList          : _LIST_ENTRY [ 0xffffcc8b`dcea4fb0 - 0xffffcc8b`dcea4fb0 ]
   +0x0d0 FileObjectExtension : (null)
```

该文件对象关联的设备对象如下：

```shell
1: kd> dt 0xffffcc8b`dbee7b20 _DEVICE_OBJECT
nt!_DEVICE_OBJECT
   +0x000 Type             : 0n3
   +0x002 Size             : 0x150
   +0x004 ReferenceCount   : 0n10
   +0x008 DriverObject     : 0xffffcc8b`dc4fa200 _DRIVER_OBJECT
   +0x010 NextDevice       : (null)
   +0x018 AttachedDevice   : (null)
   +0x020 CurrentIrp       : (null)
   +0x028 Timer            : (null)
   +0x030 Flags            : 0x50
   +0x034 Characteristics  : 0x20000
   +0x038 Vpb              : (null)
   +0x040 DeviceExtension  : (null)
   +0x048 DeviceType       : 0x50
   +0x04c StackSize        : 2 ''
   +0x050 Queue            : 
   +0x098 AlignmentRequirement : 0
   +0x0a0 DeviceQueue      : _KDEVICE_QUEUE
   +0x0c8 Dpc              : _KDPC
   +0x108 ActiveThreadCount : 0
   +0x110 SecurityDescriptor : 0xffffb68d`575f0380 Void
   +0x118 DeviceLock       : _KEVENT
   +0x130 SectorSize       : 0
   +0x132 Spare1           : 0
   +0x138 DeviceObjectExtension : 0xffffcc8b`dbee7c70 _DEVOBJ_EXTENSION
   +0x140 Reserved         : (null)
```

关联的驱动对象如下：

```shell
1: kd> dt 0xffffcc8b`dc4fa200 _DRIVER_OBJECT
nt!_DRIVER_OBJECT
   +0x000 Type             : 0n4
   +0x002 Size             : 0n336
   +0x008 DeviceObject     : 0xffffcc8b`dbee7b20 _DEVICE_OBJECT
   +0x010 Flags            : 0x12
   +0x018 DriverStart      : 0xfffff802`14530000 Void
   +0x020 DriverSize       : 0x12000
   +0x028 DriverSection    : 0xffffcc8b`dc472cf0 Void
   +0x030 DriverExtension  : 0xffffcc8b`dc4fa350 _DRIVER_EXTENSION
   +0x038 DriverName       : _UNICODE_STRING "\Driver\condrv"
   +0x048 HardwareDatabase : 0xfffff802`151f4e38 _UNICODE_STRING "\REGISTRY\MACHINE\HARDWARE\DESCRIPTION\SYSTEM"
   +0x050 FastIoDispatch   : 0xfffff802`14534020 _FAST_IO_DISPATCH
   +0x058 DriverInit       : 0xfffff802`1453e010     long  +fffff8021453e010
   +0x060 DriverStartIo    : (null)
   +0x068 DriverUnload     : 0xfffff802`1453c8e0     void  +fffff8021453c8e0
   +0x070 MajorFunction    : [28] 0xfffff802`14537e10     long  +fffff80214537e10
```

该驱动对象的名字是`\Driver\condrv`。接下来，我们来看一个重要的回调例程：

```c
typedef NTSTATUS DRIVER_DISPATCH (__in struct _DEVICE_OBJECT *DeviceObject, __inout struct _IRP *Irp);
```

设置断点并继续执行：

```shell
1: kd> bp 0xfffff802145382a0
1: kd> g
1: kd> k
# Child-SP          RetAddr           Call Site
00 ffffcb80`4ec07808 fffff802`14a428d9 0xfffff802`145382a0
01 ffffcb80`4ec07810 fffff802`14ed755e nt!IofCallDriver+0x59
02 ffffcb80`4ec07850 fffff802`14ed8ca0 nt!IopSynchronousServiceTail+0x19e
03 ffffcb80`4ec07900 fffff802`14b79553 nt!NtWriteFile+0x8b0
04 ffffcb80`4ec07a10 00000000`6e5e1e5c nt!KiSystemServiceCopyEnd+0x13
05 00000000`00aeead8 00000000`6e5e1b3a 0x6e5e1e5c
06 00000000`00aeeae0 00000023`774de7bc 0x6e5e1b3a
07 00000000`00aeeae8 00000000`6e580023 0x00000023`774de7bc
08 00000000`00aeeaf0 00000000`00000000 0x6e580023
```

虽然看到`nt!NtWriteFile`，但由于是内核态，参数传递较为复杂。通过查看`IRP`结构，可以获得更多信息：

```shell
1: kd> !irp ffffcc8bdc6addc0
Irp is active with 2 stacks 2 is current (= 0xffffcc8bdc6aded8)
```

通过这些步骤，我们可以逐步揭开`printf`实现的神秘面纱。